\idx{refl_type}         A type ==> A = A), 
\idx{refl_elem}         a : A ==> a = a : A

\idx{sym_type}          A = B ==> B = A
\idx{sym_elem}          a = b : A ==> b = a : A

\idx{trans_type}        [| A = B;  B = C |] ==> A = C
\idx{trans_elem}        [| a = b : A;  b = c : A |] ==> a = c : A

\idx{equal_types}       [| a : A;  A = B |] ==> a : B
\idx{equal_typesL}      [| a = b : A;  A = B |] ==> a = b : B

\idx{subst_type}        [| a : A;  !!z. z:A ==> B(z) type |] ==> B(a) type

\idx{subst_typeL}       [| a = c : A;  !!z. z:A ==> B(z) = D(z) 
                  |] ==> B(a) = D(c)
\idx{subst_elem}        [| a : A;  !!z. z:A ==> b(z):B(z) |] ==> b(a):B(a)

\idx{subst_elemL}       [| a = c : A;  !!z. z:A ==> b(z) = d(z) : B(z) 
                  |] ==> b(a) = d(c) : B(a)

\idx{refl_red}          Reduce(a,a)
\idx{red_if_equal}      a = b : A ==> Reduce(a,b)
\idx{trans_red}         [| a = b : A;  Reduce(b,c) |] ==> a = c : A


\idx{NF}        N type

\idx{NI0}       0 : N
\idx{NI_succ}   a : N ==> succ(a) : N
\idx{NI_succL}  a = b : N ==> succ(a) = succ(b) : N

\idx{NE}        [| p: N;  a: C(0);  
             !!u v. [| u: N; v: C(u) |] ==> b(u,v): C(succ(u)) 
          |] ==> rec(p, a, %u v.b(u,v)) : C(p)

\idx{NEL}       [| p = q : N;  a = c : C(0);  
             !!u v. [| u: N; v: C(u) |] ==> b(u,v) = d(u,v): C(succ(u))
          |] ==> rec(p, a, %u v.b(u,v)) = rec(q,c,d) : C(p)

\idx{NC0}       [| a: C(0);  
             !!u v. [| u: N; v: C(u) |] ==> b(u,v): C(succ(u))
          |] ==> rec(0, a, %u v.b(u,v)) = a : C(0)

\idx{NC_succ}   [| p: N;  a: C(0);  
             !!u v. [| u: N; v: C(u) |] ==> b(u,v): C(succ(u)) 
          |] ==> rec(succ(p), a, %u v.b(u,v)) =
                    b(p, rec(p, a, %u v.b(u,v))) : C(succ(p))

\idx{zero_ne_succ}      [| a: N;  0 = succ(a) : N |] ==> 0: F


\idx{ProdF}     [| A type; !!x. x:A ==> B(x) type |] ==> PROD x:A.B(x) type
\idx{ProdFL}    [| A = C;  !!x. x:A ==> B(x) = D(x) |] ==> 
          PROD x:A.B(x) = PROD x:C.D(x)

\idx{ProdI}     [| A type;  !!x. x:A ==> b(x):B(x)
          |] ==> lam x.b(x) : PROD x:A.B(x)
\idx{ProdIL}    [| A type;  !!x. x:A ==> b(x) = c(x) : B(x)
          |] ==> lam x.b(x) = lam x.c(x) : PROD x:A.B(x)

\idx{ProdE}     [| p : PROD x:A.B(x);  a : A |] ==> p`a : B(a)
\idx{ProdEL}    [| p=q: PROD x:A.B(x);  a=b : A |] ==> p`a = q`b : B(a)

\idx{ProdC}     [| a : A;  !!x. x:A ==> b(x) : B(x)
          |] ==> (lam x.b(x)) ` a = b(a) : B(a)

\idx{ProdC2}    p : PROD x:A.B(x) ==> (lam x. p`x) = p : PROD x:A.B(x)


\idx{SumF}      [| A type;  !!x. x:A ==> B(x) type |] ==> SUM x:A.B(x) type
\idx{SumFL}     [| A = C;  !!x. x:A ==> B(x) = D(x) 
          |] ==> SUM x:A.B(x) = SUM x:C.D(x)

\idx{SumI}      [| a : A;  b : B(a) |] ==> <a,b> : SUM x:A.B(x)
\idx{SumIL}     [| a=c:A;  b=d:B(a) |] ==> <a,b> = <c,d> : SUM x:A.B(x)

\idx{SumE}      [| p: SUM x:A.B(x);  
             !!x y. [| x:A; y:B(x) |] ==> c(x,y): C(<x,y>) 
          |] ==> split(p, %x y.c(x,y)) : C(p)

\idx{SumEL}     [| p=q : SUM x:A.B(x); 
             !!x y. [| x:A; y:B(x) |] ==> c(x,y)=d(x,y): C(<x,y>)
          |] ==> split(p, %x y.c(x,y)) = split(q, % x y.d(x,y)) : C(p)

\idx{SumC}      [| a: A;  b: B(a);
             !!x y. [| x:A; y:B(x) |] ==> c(x,y): C(<x,y>)
          |] ==> split(<a,b>, %x y.c(x,y)) = c(a,b) : C(<a,b>)

\idx{fst_def}   fst(a) == split(a, %x y.x)
\idx{snd_def}   snd(a) == split(a, %x y.y)


\idx{PlusF}     [| A type;  B type |] ==> A+B type
\idx{PlusFL}    [| A = C;  B = D |] ==> A+B = C+D

\idx{PlusI_inl}   [| a : A;  B type |] ==> inl(a) : A+B
\idx{PlusI_inlL}  [| a = c : A;  B type |] ==> inl(a) = inl(c) : A+B

\idx{PlusI_inr}   [| A type;  b : B |] ==> inr(b) : A+B
\idx{PlusI_inrL}  [| A type;  b = d : B |] ==> inr(b) = inr(d) : A+B

\idx{PlusE}     [| p: A+B;
             !!x. x:A ==> c(x): C(inl(x));  
             !!y. y:B ==> d(y): C(inr(y))
          |] ==> when(p, %x.c(x), %y.d(y)) : C(p)

\idx{PlusEL}    [| p = q : A+B;
             !!x. x: A ==> c(x) = e(x) : C(inl(x));   
             !!y. y: B ==> d(y) = f(y) : C(inr(y))
          |] ==> when(p, %x.c(x), %y.d(y)) = when(q, %x.e(x), %y.f(y)) : C(p)

\idx{PlusC_inl} [| a: A;
             !!x. x:A ==> c(x): C(inl(x));  
             !!y. y:B ==> d(y): C(inr(y))
          |] ==> when(inl(a), %x.c(x), %y.d(y)) = c(a) : C(inl(a))

\idx{PlusC_inr} [| b: B;
             !!x. x:A ==> c(x): C(inl(x));  
             !!y. y:B ==> d(y): C(inr(y))
          |] ==> when(inr(b), %x.c(x), %y.d(y)) = d(b) : C(inr(b))

\idx{EqF}       [| A type;  a : A;  b : A |] ==> Eq(A,a,b) type
\idx{EqFL}      [| A=B;  a=c: A;  b=d : A |] ==> Eq(A,a,b) = Eq(B,c,d)
\idx{EqI}       a = b : A ==> eq : Eq(A,a,b)
\idx{EqE}       p : Eq(A,a,b) ==> a = b : A
\idx{EqC}       p : Eq(A,a,b) ==> p = eq : Eq(A,a,b)

\idx{FF}        F type
\idx{FE}        [| p: F;  C type |] ==> contr(p) : C
\idx{FEL}       [| p = q : F;  C type |] ==> contr(p) = contr(q) : C

\idx{TF}        T type
\idx{TI}        tt : T
\idx{TE}        [| p : T;  c : C(tt) |] ==> c : C(p)
\idx{TEL}       [| p = q : T;  c = d : C(tt) |] ==> c = d : C(p)
\idx{TC}        p : T ==> p = tt : T)


\idx{replace_type}      [| B = A;  a : A |] ==> a : B
\idx{subst_eqtyparg}    [| a=c : A;  !!z. z:A ==> B(z) type |] ==> B(a)=B(c)

\idx{subst_prodE}       [| p: Prod(A,B);  a: A;  !!z. z: B(a) ==> c(z): C(z)
                  |] ==> c(p`a): C(p`a)

\idx{SumIL2}    [| c=a : A;  d=b : B(a) |] ==> <c,d> = <a,b> : Sum(A,B)

\idx{SumE_fst}  p : Sum(A,B) ==> fst(p) : A

\idx{SumE_snd}  [| p: Sum(A,B);  A type;  !!x. x:A ==> B(x) type
          |] ==> snd(p) : B(fst(p))



\idx{add_def}		a#+b == rec(a, b, %u v.succ(v))  
\idx{diff_def}		a-b == rec(b, a, %u v.rec(v, 0, %x y.x))  
\idx{absdiff_def}	a|-|b == (a-b) #+ (b-a)  
\idx{mult_def}		a#*b == rec(a, 0, %u v. b #+ v)  

\idx{mod_def}	a//b == rec(a, 0, %u v.   
  			rec(succ(v) |-| b, 0, %x y.succ(v)))  

\idx{quo_def}	a/b == rec(a, 0, %u v.   
  			rec(succ(u) // b, succ(v), %x y.v))


\idx{add_typing}        [| a:N;  b:N |] ==> a #+ b : N
\idx{add_typingL}       [| a=c:N;  b=d:N |] ==> a #+ b = c #+ d : N
\idx{addC0}             b:N ==> 0 #+ b = b : N
\idx{addC_succ}         [| a:N;  b:N |] ==> succ(a) #+ b = succ(a #+ b) : N
\idx{mult_typing}       [| a:N;  b:N |] ==> a #* b : N
\idx{mult_typingL}      [| a=c:N;  b=d:N |] ==> a #* b = c #* d : N
\idx{multC0}            b:N ==> 0 #* b = 0 : N
\idx{multC_succ}        [| a:N;  b:N |] ==> succ(a) #* b = b #+ (a #* b) : N
\idx{diff_typing}       [| a:N;  b:N |] ==> a - b : N
\idx{diff_typingL}      [| a=c:N;  b=d:N |] ==> a - b = c - d : N
\idx{diffC0}            a:N ==> a - 0 = a : N
\idx{diff_0_eq_0}       b:N ==> 0 - b = 0 : N

\idx{diff_succ_succ}    [| a:N;  b:N |] ==> succ(a) - succ(b) = a - b : N

\idx{add_assoc} [| a:N;  b:N;  c:N |] ==> (a #+ b) #+ c = a #+ (b #+ c) : N

\idx{add_commute}       [| a:N;  b:N |] ==> a #+ b = b #+ a : N

\idx{mult_right0}       a:N ==> a #* 0 = 0 : N

\idx{mult_right_succ}   [| a:N;  b:N |] ==> a #* succ(b) = a #+ (a #* b) : N

\idx{mult_commute}      [| a:N;  b:N |] ==> a #* b = b #* a : N

\idx{add_mult_dist}     [| a:N;  b:N;  c:N |] ==> (a #+ b) #* c = (a #* c) #+ (b #* c) : N

\idx{mult_assoc}        [| a:N;  b:N;  c:N |] ==> (a #* b) #* c = a #* (b #* c) : N

\idx{diff_self_eq_0}    a:N ==> a - a = 0 : N

\idx{add_inverse_diff_lemma}    
    b:N ==> ?a : PROD x:N. Eq(N, b-x, 0) --> Eq(N, b #+ (x-b), x)

\idx{add_inverse_diff}  [| a:N;  b:N;  b-a = 0 : N |] ==> b #+ (a-b) = a : N

\idx{absdiff_typing}    [| a:N;  b:N |] ==> a |-| b : N
\idx{absdiff_typingL}   [| a=c:N;  b=d:N |] ==> a |-| b = c |-| d : N
\idx{absdiff_self_eq_0} a:N ==> a |-| a = 0 : N
\idx{absdiffC0}         a:N ==> 0 |-| a = a : N

\idx{absdiff_succ_succ} [| a:N;  b:N |] ==> succ(a) |-| succ(b)  =  a |-| b : N
\idx{absdiff_commute}   [| a:N;  b:N |] ==> a |-| b = b |-| a : N

\idx{add_eq0_lemma}     [| a:N;  b:N |] ==> ?c : PROD u: Eq(N,a#+b,0) .  Eq(N,a,0)

\idx{add_eq0}   [| a:N;  b:N;  a #+ b = 0 : N |] ==> a = 0 : N

\idx{absdiff_eq0_lem}   
    [| a:N;  b:N;  a |-| b = 0 : N |] ==> 
    ?a : SUM v: Eq(N, a-b, 0) . Eq(N, b-a, 0)

\idx{absdiff_eq0}       [| a |-| b = 0 : N;  a:N;  b:N |] ==> a = b : N

\idx{mod_typing}        [| a:N;  b:N |] ==> a//b : N
\idx{mod_typingL}       [| a=c:N;  b=d:N |] ==> a//b = c//d : N
\idx{modC0}             b:N ==> 0//b = 0 : N
\idx{modC_succ} 
[| a:N; b:N |] ==> succ(a)//b = rec(succ(a//b) |-| b, 0, %x y.succ(a//b)) : N

\idx{quo_typing}        [| a:N;  b:N |] ==> a / b : N
\idx{quo_typingL}       [| a=c:N;  b=d:N |] ==> a / b = c / d : N
\idx{quoC0}             b:N ==> 0 / b = 0 : N
[| a:N;  b:N |] ==> succ(a) / b = 
    rec(succ(a)//b, succ(a / b), %x y. a / b) : N
\idx{quoC_succ2}        [| a:N;  b:N |] ==> 
    succ(a) / b =rec(succ(a//b) |-| b, succ(a / b), %x y. a / b) : N

\idx{iszero_decidable}  
    a:N ==> rec(a, inl(eq), %ka kb.inr(<ka, eq>)) : 
                      Eq(N,a,0) + (SUM x:N. Eq(N,a, succ(x)))

\idx{mod_quo_equality}  [| a:N;  b:N |] ==> a//b  #+  (a/b) #* b = a : N


