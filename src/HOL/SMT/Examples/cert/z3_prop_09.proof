#2 := false
decl uf_1 :: (-> T1 T1 T1)
decl uf_2 :: T1
#10 := uf_2
decl uf_3 :: T1
#12 := uf_3
#14 := (uf_1 uf_3 uf_2)
#13 := (uf_1 uf_2 uf_3)
#15 := (= #13 #14)
#44 := (not #15)
#11 := (= uf_2 uf_2)
#16 := (and #11 #15)
#17 := (not #16)
#45 := (iff #17 #44)
#42 := (iff #16 #15)
#1 := true
#37 := (and true #15)
#40 := (iff #37 #15)
#41 := [rewrite]: #40
#38 := (iff #16 #37)
#35 := (iff #11 true)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#34 := [asserted]: #17
#49 := [mp #34 #46]: #44
#4 := (:var 1 T1)
#5 := (:var 0 T1)
#7 := (uf_1 #5 #4)
#530 := (pattern #7)
#6 := (uf_1 #4 #5)
#529 := (pattern #6)
#8 := (= #6 #7)
#531 := (forall (vars (?x1 T1) (?x2 T1)) (:pat #529 #530) #8)
#9 := (forall (vars (?x1 T1) (?x2 T1)) #8)
#534 := (iff #9 #531)
#532 := (iff #8 #8)
#533 := [refl]: #532
#535 := [quant-intro #533]: #534
#55 := (~ #9 #9)
#53 := (~ #8 #8)
#54 := [refl]: #53
#56 := [nnf-pos #54]: #55
#33 := [asserted]: #9
#57 := [mp~ #33 #56]: #9
#536 := [mp #57 #535]: #531
#112 := (not #531)
#199 := (or #112 #15)
#113 := [quant-inst]: #199
[unit-resolution #113 #536 #49]: false
unsat
