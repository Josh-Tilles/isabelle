8c0dd63633148cae631c41716f59fedf31aaf85f 8 0
#2 := false
#1 := true
#8 := (not true)
#29 := (iff #8 false)
#30 := [rewrite]: #29
#28 := [asserted]: #8
[mp #28 #30]: false
unsat
4e759d02d4de42cc8b917c1ee399e500780bf8d9 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (or #9 #10)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := (= f1 f3)
#36 := (not #33)
#39 := (or #33 #36)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #35 #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
964f9fc947278fe63d579d7e942d63db70d69508 37 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#1 := true
#10 := (and #9 true)
#11 := (iff #10 #9)
#12 := (not #11)
#55 := (iff #12 false)
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#48 := (iff #11 true)
#33 := (= f1 f3)
#43 := (iff #33 #33)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#41 := (iff #10 #33)
#36 := (and #33 true)
#39 := (iff #36 #33)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42 #35]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#32 := [asserted]: #12
[mp #32 #56]: false
unsat
6f5c195ed8186ea009f805e2f8ea8ad3b1ee6432 66 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#40 := (= f1 f4)
decl f3 :: S1
#8 := f3
#37 := (= f1 f3)
#43 := (or #37 #40)
#87 := (iff #43 false)
#82 := (or false false)
#85 := (iff #82 false)
#86 := [rewrite]: #85
#83 := (iff #43 #82)
#78 := (iff #40 false)
#69 := (not #40)
#46 := (not #37)
#52 := (and #46 #43)
#60 := (not #52)
#61 := (or #40 #60)
#66 := (not #61)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (not #9)
#12 := (or #9 #11)
#14 := (and #12 #13)
#15 := (implies #14 #11)
#16 := (not #15)
#67 := (iff #16 #66)
#64 := (iff #15 #61)
#57 := (implies #52 #40)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #15 #57)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#55 := (iff #14 #52)
#49 := (and #43 #46)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39]: #47
#44 := (iff #12 #43)
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56 #42]: #58
#65 := [trans #59 #63]: #64
#68 := [monotonicity #65]: #67
#36 := [asserted]: #16
#71 := [mp #36 #68]: #66
#70 := [not-or-elim #71]: #69
#79 := [iff-false #70]: #78
#80 := (iff #37 false)
#72 := [not-or-elim #71]: #52
#73 := [and-elim #72]: #46
#81 := [iff-false #73]: #80
#84 := [monotonicity #81 #79]: #83
#88 := [trans #84 #86]: #87
#74 := [and-elim #72]: #43
[mp #74 #88]: false
unsat
bc6de36d6c86b416e91711bb23067cc8250ac153 59 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
#17 := (and #14 #16)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and #9 #11)
#18 := (or #12 #17)
#19 := (implies #18 #18)
#20 := (not #19)
#74 := (iff #20 false)
#1 := true
#69 := (not true)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #20 #69)
#67 := (iff #19 true)
#53 := (= f1 f6)
#50 := (= f1 f5)
#56 := (and #50 #53)
#44 := (= f1 f4)
#41 := (= f1 f3)
#47 := (and #41 #44)
#59 := (or #47 #56)
#62 := (implies #59 #59)
#65 := (iff #62 true)
#66 := [rewrite]: #65
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#54 := (iff #16 #53)
#55 := [rewrite]: #54
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#58 := [monotonicity #52 #55]: #57
#48 := (iff #12 #47)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#61 := [monotonicity #49 #58]: #60
#64 := [monotonicity #61 #61]: #63
#68 := [trans #64 #66]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#40 := [asserted]: #20
[mp #40 #75]: false
unsat
e334e079d0f61721e404e4ca140ce40c317189ba 94 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
#17 := (and #9 #14)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#16 := (and #14 #11)
#18 := (or #16 #17)
#19 := (implies #9 #18)
#20 := (or #19 #9)
#12 := (and #9 #11)
#15 := (or #12 #14)
#21 := (implies #15 #20)
#22 := (not #21)
#110 := (iff #22 false)
#52 := (= f1 f5)
#43 := (= f1 f3)
#66 := (and #43 #52)
#46 := (= f1 f4)
#61 := (and #46 #52)
#69 := (or #61 #66)
#75 := (not #43)
#76 := (or #75 #69)
#84 := (or #43 #76)
#49 := (and #43 #46)
#55 := (or #49 #52)
#92 := (not #55)
#93 := (or #92 #84)
#98 := (not #93)
#108 := (iff #98 false)
#1 := true
#103 := (not true)
#106 := (iff #103 false)
#107 := [rewrite]: #106
#104 := (iff #98 #103)
#101 := (iff #93 true)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#109 := [trans #105 #107]: #108
#99 := (iff #22 #98)
#96 := (iff #21 #93)
#89 := (implies #55 #84)
#94 := (iff #89 #93)
#95 := [rewrite]: #94
#90 := (iff #21 #89)
#87 := (iff #20 #84)
#81 := (or #76 #43)
#85 := (iff #81 #84)
#86 := [rewrite]: #85
#82 := (iff #20 #81)
#44 := (iff #9 #43)
#45 := [rewrite]: #44
#79 := (iff #19 #76)
#72 := (implies #43 #69)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #19 #72)
#70 := (iff #18 #69)
#67 := (iff #17 #66)
#53 := (iff #14 #52)
#54 := [rewrite]: #53
#68 := [monotonicity #45 #54]: #67
#64 := (iff #16 #61)
#58 := (and #52 #46)
#62 := (iff #58 #61)
#63 := [rewrite]: #62
#59 := (iff #16 #58)
#47 := (iff #11 #46)
#48 := [rewrite]: #47
#60 := [monotonicity #54 #48]: #59
#65 := [trans #60 #63]: #64
#71 := [monotonicity #65 #68]: #70
#74 := [monotonicity #45 #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80 #45]: #82
#88 := [trans #83 #86]: #87
#56 := (iff #15 #55)
#50 := (iff #12 #49)
#51 := [monotonicity #45 #48]: #50
#57 := [monotonicity #51 #54]: #56
#91 := [monotonicity #57 #88]: #90
#97 := [trans #91 #95]: #96
#100 := [monotonicity #97]: #99
#111 := [trans #100 #109]: #110
#42 := [asserted]: #22
[mp #42 #111]: false
unsat
778009f890fff5d244f6b4e04a54c69b4023bcd7 72 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (iff #9 #9)
#11 := (iff #10 #9)
#12 := (iff #11 #9)
#13 := (iff #12 #9)
#14 := (iff #13 #9)
#15 := (iff #14 #9)
#16 := (iff #15 #9)
#17 := (iff #16 #9)
#18 := (iff #17 #9)
#19 := (not #18)
#90 := (iff #19 false)
#1 := true
#85 := (not true)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #19 #85)
#83 := (iff #18 true)
#40 := (= f1 f3)
#43 := (iff #40 #40)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#81 := (iff #18 #43)
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#79 := (iff #17 #40)
#50 := (iff true #40)
#53 := (iff #50 #40)
#54 := [rewrite]: #53
#77 := (iff #17 #50)
#75 := (iff #16 true)
#73 := (iff #16 #43)
#71 := (iff #15 #40)
#69 := (iff #15 #50)
#67 := (iff #14 true)
#65 := (iff #14 #43)
#63 := (iff #13 #40)
#61 := (iff #13 #50)
#59 := (iff #12 true)
#57 := (iff #12 #43)
#55 := (iff #11 #40)
#51 := (iff #11 #50)
#48 := (iff #10 true)
#44 := (iff #10 #43)
#45 := [monotonicity #42 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49 #42]: #51
#56 := [trans #52 #54]: #55
#58 := [monotonicity #56 #42]: #57
#60 := [trans #58 #47]: #59
#62 := [monotonicity #60 #42]: #61
#64 := [trans #62 #54]: #63
#66 := [monotonicity #64 #42]: #65
#68 := [trans #66 #47]: #67
#70 := [monotonicity #68 #42]: #69
#72 := [trans #70 #54]: #71
#74 := [monotonicity #72 #42]: #73
#76 := [trans #74 #47]: #75
#78 := [monotonicity #76 #42]: #77
#80 := [trans #78 #54]: #79
#82 := [monotonicity #80 #42]: #81
#84 := [trans #82 #47]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#39 := [asserted]: #19
[mp #39 #91]: false
unsat
1d6ace6138adeb11b9c9952f896f225452c30f9e 234 0
#2 := false
decl f6 :: S1
#14 := f6
decl f1 :: S1
#4 := f1
#82 := (= f1 f6)
decl f5 :: S1
#12 := f5
#79 := (= f1 f5)
decl f4 :: S1
#10 := f4
#76 := (= f1 f4)
decl f3 :: S1
#8 := f3
#73 := (= f1 f3)
#94 := (or #73 #76 #79 #82)
#301 := (iff #94 false)
#296 := (or false false false false)
#299 := (iff #296 false)
#300 := [rewrite]: #299
#297 := (iff #94 #296)
#253 := (iff #82 false)
#183 := (not #82)
#189 := (or #79 #183)
#261 := (iff #189 #183)
#256 := (or false #183)
#259 := (iff #256 #183)
#260 := [rewrite]: #259
#257 := (iff #189 #256)
#254 := (iff #79 false)
#123 := (not #79)
decl f11 :: S1
#44 := f11
#45 := (= f11 f1)
#46 := (not #45)
#47 := (and #45 #46)
decl f10 :: S1
#41 := f10
#42 := (= f10 f1)
#48 := (or #42 #47)
#43 := (not #42)
#49 := (and #43 #48)
#13 := (= f5 f1)
#50 := (or #13 #49)
#51 := (not #50)
#236 := (iff #51 #123)
#234 := (iff #50 #79)
#229 := (or #79 false)
#232 := (iff #229 #79)
#233 := [rewrite]: #232
#230 := (iff #50 #229)
#227 := (iff #49 false)
#195 := (= f1 f10)
#199 := (not #195)
#222 := (and #199 #195)
#225 := (iff #222 false)
#226 := [rewrite]: #225
#223 := (iff #49 #222)
#220 := (iff #48 #195)
#215 := (or #195 false)
#218 := (iff #215 #195)
#219 := [rewrite]: #218
#216 := (iff #48 #215)
#213 := (iff #47 false)
#202 := (= f1 f11)
#205 := (not #202)
#208 := (and #202 #205)
#211 := (iff #208 false)
#212 := [rewrite]: #211
#209 := (iff #47 #208)
#206 := (iff #46 #205)
#203 := (iff #45 #202)
#204 := [rewrite]: #203
#207 := [monotonicity #204]: #206
#210 := [monotonicity #204 #207]: #209
#214 := [trans #210 #212]: #213
#197 := (iff #42 #195)
#198 := [rewrite]: #197
#217 := [monotonicity #198 #214]: #216
#221 := [trans #217 #219]: #220
#200 := (iff #43 #199)
#201 := [monotonicity #198]: #200
#224 := [monotonicity #201 #221]: #223
#228 := [trans #224 #226]: #227
#80 := (iff #13 #79)
#81 := [rewrite]: #80
#231 := [monotonicity #81 #228]: #230
#235 := [trans #231 #233]: #234
#237 := [monotonicity #235]: #236
#194 := [asserted]: #51
#240 := [mp #194 #237]: #123
#255 := [iff-false #240]: #254
#258 := [monotonicity #255]: #257
#262 := [trans #258 #260]: #261
#15 := (= f6 f1)
#38 := (or #15 false)
#39 := (not #38)
#40 := (or #39 #13)
#192 := (iff #40 #189)
#186 := (or #183 #79)
#190 := (iff #186 #189)
#191 := [rewrite]: #190
#187 := (iff #40 #186)
#184 := (iff #39 #183)
#181 := (iff #38 #82)
#175 := (or #82 false)
#179 := (iff #175 #82)
#180 := [rewrite]: #179
#177 := (iff #38 #175)
#83 := (iff #15 #82)
#84 := [rewrite]: #83
#178 := [monotonicity #84]: #177
#182 := [trans #178 #180]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185 #81]: #187
#193 := [trans #188 #191]: #192
#174 := [asserted]: #40
#196 := [mp #174 #193]: #189
#252 := [mp #196 #262]: #183
#263 := [iff-false #252]: #253
#251 := (iff #76 false)
#168 := (not #76)
#171 := (or #168 #79)
#269 := (iff #171 #168)
#264 := (or #168 false)
#267 := (iff #264 #168)
#268 := [rewrite]: #267
#265 := (iff #171 #264)
#266 := [monotonicity #255]: #265
#270 := [trans #266 #268]: #269
decl f9 :: S1
#31 := f9
#32 := (= f9 f1)
#33 := (not #32)
#34 := (or #32 #33)
#11 := (= f4 f1)
#35 := (and #11 #34)
#36 := (not #35)
#37 := (or #36 #13)
#172 := (iff #37 #171)
#169 := (iff #36 #168)
#166 := (iff #35 #76)
#1 := true
#161 := (and #76 true)
#164 := (iff #161 #76)
#165 := [rewrite]: #164
#162 := (iff #35 #161)
#159 := (iff #34 true)
#147 := (= f1 f9)
#151 := (not #147)
#154 := (or #147 #151)
#157 := (iff #154 true)
#158 := [rewrite]: #157
#155 := (iff #34 #154)
#152 := (iff #33 #151)
#149 := (iff #32 #147)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #150 #153]: #155
#160 := [trans #156 #158]: #159
#77 := (iff #11 #76)
#78 := [rewrite]: #77
#163 := [monotonicity #78 #160]: #162
#167 := [trans #163 #165]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170 #81]: #172
#146 := [asserted]: #37
#176 := [mp #146 #173]: #171
#250 := [mp #176 #270]: #168
#271 := [iff-false #250]: #251
#249 := (iff #73 false)
#140 := (not #73)
#143 := (or #140 #76)
#277 := (iff #143 #140)
#272 := (or #140 false)
#275 := (iff #272 #140)
#276 := [rewrite]: #275
#273 := (iff #143 #272)
#274 := [monotonicity #271]: #273
#278 := [trans #274 #276]: #277
#26 := (not #13)
#27 := (and #13 #26)
#9 := (= f3 f1)
#28 := (or #9 #27)
#29 := (not #28)
#30 := (or #29 #11)
#144 := (iff #30 #143)
#141 := (iff #29 #140)
#138 := (iff #28 #73)
#133 := (or #73 false)
#136 := (iff #133 #73)
#137 := [rewrite]: #136
#134 := (iff #28 #133)
#131 := (iff #27 false)
#126 := (and #79 #123)
#129 := (iff #126 false)
#130 := [rewrite]: #129
#127 := (iff #27 #126)
#124 := (iff #26 #123)
#125 := [monotonicity #81]: #124
#128 := [monotonicity #81 #125]: #127
#132 := [trans #128 #130]: #131
#74 := (iff #9 #73)
#75 := [rewrite]: #74
#135 := [monotonicity #75 #132]: #134
#139 := [trans #135 #137]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142 #78]: #144
#122 := [asserted]: #30
#148 := [mp #122 #145]: #143
#248 := [mp #148 #278]: #140
#279 := [iff-false #248]: #249
#298 := [monotonicity #279 #271 #255 #263]: #297
#302 := [trans #298 #300]: #301
#16 := (or #13 #15)
#17 := (or #11 #16)
#18 := (or #9 #17)
#97 := (iff #18 #94)
#85 := (or #79 #82)
#88 := (or #76 #85)
#91 := (or #73 #88)
#95 := (iff #91 #94)
#96 := [rewrite]: #95
#92 := (iff #18 #91)
#89 := (iff #17 #88)
#86 := (iff #16 #85)
#87 := [monotonicity #81 #84]: #86
#90 := [monotonicity #78 #87]: #89
#93 := [monotonicity #75 #90]: #92
#98 := [trans #93 #96]: #97
#72 := [asserted]: #18
#99 := [mp #72 #98]: #94
[mp #99 #302]: false
unsat
06b0c3de2b103a3370515a513898e3214632f94b 52 0
#2 := false
decl f3 :: (-> S2 S2 S2)
decl f4 :: S2
#14 := f4
decl f5 :: S2
#16 := f5
#18 := (f3 f5 f4)
#17 := (f3 f4 f5)
#19 := (= #17 #18)
#52 := (not #19)
#15 := (= f4 f4)
#20 := (and #15 #19)
#21 := (not #20)
#53 := (iff #21 #52)
#50 := (iff #20 #19)
#1 := true
#45 := (and true #19)
#48 := (iff #45 #19)
#49 := [rewrite]: #48
#46 := (iff #20 #45)
#43 := (iff #15 true)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#42 := [asserted]: #21
#57 := [mp #42 #54]: #52
#8 := (:var 1 S2)
#9 := (:var 0 S2)
#11 := (f3 #9 #8)
#538 := (pattern #11)
#10 := (f3 #8 #9)
#537 := (pattern #10)
#12 := (= #10 #11)
#539 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #537 #538) #12)
#13 := (forall (vars (?v0 S2) (?v1 S2)) #12)
#542 := (iff #13 #539)
#540 := (iff #12 #12)
#541 := [refl]: #540
#543 := [quant-intro #541]: #542
#65 := (~ #13 #13)
#63 := (~ #12 #12)
#64 := [refl]: #63
#66 := [nnf-pos #64]: #65
#41 := [asserted]: #13
#56 := [mp~ #41 #66]: #13
#544 := [mp #56 #543]: #539
#120 := (not #539)
#207 := (or #120 #19)
#121 := [quant-inst #14 #16]: #207
[unit-resolution #121 #544 #57]: false
unsat
0863329327da9e45e4d77f7bc111e467c5d58d3c 2526 0
#2 := false
decl f9 :: S1
#26 := f9
decl f1 :: S1
#4 := f1
#493 := (= f1 f9)
decl f20 :: S1
#60 := f20
#629 := (= f1 f20)
decl f21 :: S1
#62 := f21
#632 := (= f1 f21)
#1513 := (not #632)
decl f31 :: S1
#98 := f31
#782 := (= f1 f31)
decl f62 :: S1
#208 := f62
#1242 := (= f1 f62)
decl f58 :: S1
#190 := f58
#1145 := (= f1 f58)
#2559 := (not #1145)
decl f47 :: S1
#152 := f47
#992 := (= f1 f47)
#1817 := (not #782)
#3000 := [hypothesis]: #1817
decl f46 :: S1
#150 := f46
#989 := (= f1 f46)
#2247 := (not #989)
decl f48 :: S1
#157 := f48
#1016 := (= f1 f48)
decl f57 :: S1
#188 := f57
#1142 := (= f1 f57)
#2555 := (not #1142)
decl f45 :: S1
#145 := f45
#965 := (= f1 f45)
#2190 := (not #965)
decl f42 :: S1
#136 := f42
#935 := (= f1 f42)
#3487 := (or #935 #782)
decl f40 :: S1
#129 := f40
#908 := (= f1 f40)
#2125 := (not #935)
#3115 := [hypothesis]: #2125
decl f32 :: S1
#100 := f32
#785 := (= f1 f32)
#1821 := (not #785)
decl f16 :: S1
#47 := f16
#577 := (= f1 f16)
decl f17 :: S1
#49 := f17
#581 := (= f1 f17)
#1421 := (not #581)
decl f28 :: S1
#87 := f28
#734 := (= f1 f28)
#3470 := (or #734 #782 #935)
decl f29 :: S1
#91 := f29
#755 := (= f1 f29)
#1756 := (not #755)
#2064 := (not #908)
#1729 := (not #734)
#2887 := [hypothesis]: #1729
#3447 := (or #2064 #734)
decl f51 :: S1
#167 := f51
#1061 := (= f1 f51)
#2372 := (not #1061)
decl f54 :: S1
#176 := f54
#1091 := (= f1 f54)
decl f56 :: S1
#183 := f56
#1118 := (= f1 f56)
#2498 := (not #1118)
#2437 := (not #1091)
#3180 := [hypothesis]: #2437
#3209 := (or #2559 #1091)
decl f18 :: S1
#53 := f18
#602 := (= f1 f18)
decl f33 :: S1
#105 := f33
#809 := (= f1 f33)
#1878 := (not #809)
decl f36 :: S1
#114 := f36
#839 := (= f1 f36)
#2251 := (not #992)
#3175 := [hypothesis]: #1145
#2600 := (or #2251 #2559)
#153 := (= f47 f1)
#348 := (not #153)
#191 := (= f58 f1)
#389 := (not #191)
#394 := (or #389 #348)
#2603 := (iff #394 #2600)
#2596 := (or #2559 #2251)
#2601 := (iff #2596 #2600)
#2602 := [rewrite]: #2601
#2598 := (iff #394 #2596)
#2252 := (iff #348 #2251)
#993 := (iff #153 #992)
#994 := [rewrite]: #993
#2253 := [monotonicity #994]: #2252
#2560 := (iff #389 #2559)
#1146 := (iff #191 #1145)
#1147 := [rewrite]: #1146
#2561 := [monotonicity #1147]: #2560
#2599 := [monotonicity #2561 #2253]: #2598
#2604 := [trans #2599 #2602]: #2603
#2595 := [asserted]: #394
#2607 := [mp #2595 #2604]: #2600
#3176 := [unit-resolution #2607 #3175]: #2251
#2562 := (or #2555 #2559)
#189 := (= f57 f1)
#388 := (not #189)
#390 := (or #388 #389)
#2563 := (iff #390 #2562)
#2557 := (iff #388 #2555)
#1143 := (iff #189 #1142)
#1144 := [rewrite]: #1143
#2558 := [monotonicity #1144]: #2557
#2564 := [monotonicity #2558 #2561]: #2563
#2554 := [asserted]: #390
#2567 := [mp #2554 #2564]: #2562
#3177 := [unit-resolution #2567 #3175]: #2555
#1172 := (or #1016 #1142)
decl f6 :: S1
#17 := f6
#460 := (= f1 f6)
#1180 := (or #460 #1016 #1142)
#2860 := (iff #1180 #1172)
#2855 := (or false #1016 #1142)
#2858 := (iff #2855 #1172)
#2859 := [rewrite]: #2858
#2856 := (iff #1180 #2855)
#2779 := (iff #460 false)
#464 := (not #460)
#18 := (= f6 f1)
#19 := (not #18)
#465 := (iff #19 #464)
#462 := (iff #18 #460)
#463 := [rewrite]: #462
#466 := [monotonicity #463]: #465
#459 := [asserted]: #19
#469 := [mp #459 #466]: #464
#2780 := [iff-false #469]: #2779
#2857 := [monotonicity #2780]: #2856
#2861 := [trans #2857 #2859]: #2860
#158 := (= f48 f1)
#195 := (or #189 #158)
#196 := (or #18 #195)
#1183 := (iff #196 #1180)
#1177 := (or #460 #1172)
#1181 := (iff #1177 #1180)
#1182 := [rewrite]: #1181
#1178 := (iff #196 #1177)
#1175 := (iff #195 #1172)
#1169 := (or #1142 #1016)
#1173 := (iff #1169 #1172)
#1174 := [rewrite]: #1173
#1170 := (iff #195 #1169)
#1017 := (iff #158 #1016)
#1018 := [rewrite]: #1017
#1171 := [monotonicity #1144 #1018]: #1170
#1176 := [trans #1171 #1174]: #1175
#1179 := [monotonicity #463 #1176]: #1178
#1184 := [trans #1179 #1182]: #1183
#1168 := [asserted]: #196
#1185 := [mp #1168 #1184]: #1180
#2862 := [mp #1185 #2861]: #1172
#3178 := [unit-resolution #2862 #3177]: #1016
#2308 := (not #1016)
#2315 := (or #2247 #2308)
#151 := (= f46 f1)
#347 := (not #151)
#355 := (not #158)
#356 := (or #355 #347)
#2318 := (iff #356 #2315)
#2312 := (or #2308 #2247)
#2316 := (iff #2312 #2315)
#2317 := [rewrite]: #2316
#2313 := (iff #356 #2312)
#2249 := (iff #347 #2247)
#990 := (iff #151 #989)
#991 := [rewrite]: #990
#2250 := [monotonicity #991]: #2249
#2310 := (iff #355 #2308)
#2311 := [monotonicity #1018]: #2310
#2314 := [monotonicity #2311 #2250]: #2313
#2319 := [trans #2314 #2317]: #2318
#2307 := [asserted]: #356
#2322 := [mp #2307 #2319]: #2315
#3179 := [unit-resolution #2322 #3178]: #2247
decl f44 :: S1
#143 := f44
#962 := (= f1 f44)
#2186 := (not #962)
decl f61 :: S1
#204 := f61
#1221 := (= f1 f61)
decl f60 :: S1
#200 := f60
#1199 := (= f1 f60)
#2649 := (not #1199)
decl f37 :: S1
#119 := f37
#863 := (= f1 f37)
#2000 := (not #863)
#2325 := (or #2000 #2308)
#120 := (= f37 f1)
#314 := (not #120)
#357 := (or #355 #314)
#2328 := (iff #357 #2325)
#2321 := (or #2308 #2000)
#2326 := (iff #2321 #2325)
#2327 := [rewrite]: #2326
#2323 := (iff #357 #2321)
#2002 := (iff #314 #2000)
#864 := (iff #120 #863)
#865 := [rewrite]: #864
#2003 := [monotonicity #865]: #2002
#2324 := [monotonicity #2311 #2003]: #2323
#2329 := [trans #2324 #2327]: #2328
#2320 := [asserted]: #357
#2332 := [mp #2320 #2329]: #2325
#3181 := [unit-resolution #2332 #3178]: #2000
#3003 := (or #2649 #989 #992 #863)
#1509 := (not #629)
decl f23 :: S1
#69 := f23
#659 := (= f1 f23)
decl f34 :: S1
#107 := f34
#812 := (= f1 f34)
#1882 := (not #812)
#3071 := [hypothesis]: #2251
#3072 := [hypothesis]: #2247
#1943 := (not #839)
decl f25 :: S1
#76 := f25
#686 := (= f1 f25)
decl f39 :: S1
#125 := f39
#887 := (= f1 f39)
#2037 := (not #887)
decl f50 :: S1
#163 := f50
#1040 := (= f1 f50)
decl f59 :: S1
#197 := f59
#1187 := (= f1 f59)
#2636 := (not #1187)
#3044 := [hypothesis]: #1199
#2656 := (or #2636 #2649)
#198 := (= f59 f1)
#399 := (not #198)
#201 := (= f60 f1)
#401 := (not #201)
#402 := (or #401 #399)
#2659 := (iff #402 #2656)
#2653 := (or #2649 #2636)
#2657 := (iff #2653 #2656)
#2658 := [rewrite]: #2657
#2654 := (iff #402 #2653)
#2638 := (iff #399 #2636)
#1188 := (iff #198 #1187)
#1189 := [rewrite]: #1188
#2639 := [monotonicity #1189]: #2638
#2651 := (iff #401 #2649)
#1201 := (iff #201 #1199)
#1202 := [rewrite]: #1201
#2652 := [monotonicity #1202]: #2651
#2655 := [monotonicity #2652 #2639]: #2654
#2660 := [trans #2655 #2658]: #2659
#2648 := [asserted]: #402
#2663 := [mp #2648 #2660]: #2656
#3041 := [unit-resolution #2663 #3044]: #2636
#1193 := (or #1040 #1187)
#164 := (= f50 f1)
#199 := (or #198 #164)
#1196 := (iff #199 #1193)
#1190 := (or #1187 #1040)
#1194 := (iff #1190 #1193)
#1195 := [rewrite]: #1194
#1191 := (iff #199 #1190)
#1041 := (iff #164 #1040)
#1042 := [rewrite]: #1041
#1192 := [monotonicity #1189 #1042]: #1191
#1197 := [trans #1192 #1195]: #1196
#1186 := [asserted]: #199
#1200 := [mp #1186 #1197]: #1193
#3042 := [unit-resolution #1200 #3041]: #1040
#2345 := (not #1040)
#2366 := (or #2037 #2345)
#126 := (= f39 f1)
#319 := (not #126)
#360 := (not #164)
#363 := (or #360 #319)
#2369 := (iff #363 #2366)
#2362 := (or #2345 #2037)
#2367 := (iff #2362 #2366)
#2368 := [rewrite]: #2367
#2364 := (iff #363 #2362)
#2038 := (iff #319 #2037)
#888 := (iff #126 #887)
#889 := [rewrite]: #888
#2039 := [monotonicity #889]: #2038
#2346 := (iff #360 #2345)
#2347 := [monotonicity #1042]: #2346
#2365 := [monotonicity #2347 #2039]: #2364
#2370 := [trans #2365 #2368]: #2369
#2361 := [asserted]: #363
#2373 := [mp #2361 #2370]: #2366
#3039 := [unit-resolution #2373 #3042]: #2037
decl f26 :: S1
#81 := f26
#710 := (= f1 f26)
#3173 := [hypothesis]: #2000
decl f35 :: S1
#112 := f35
#836 := (= f1 f35)
#1939 := (not #836)
decl f43 :: S1
#138 := f43
#938 := (= f1 f43)
#2129 := (not #938)
decl f52 :: S1
#169 := f52
#1064 := (= f1 f52)
#2376 := (not #1064)
#2666 := (or #2376 #2649)
#170 := (= f52 f1)
#365 := (not #170)
#403 := (or #401 #365)
#2669 := (iff #403 #2666)
#2662 := (or #2649 #2376)
#2667 := (iff #2662 #2666)
#2668 := [rewrite]: #2667
#2664 := (iff #403 #2662)
#2377 := (iff #365 #2376)
#1065 := (iff #170 #1064)
#1066 := [rewrite]: #1065
#2378 := [monotonicity #1066]: #2377
#2665 := [monotonicity #2652 #2378]: #2664
#2670 := [trans #2665 #2668]: #2669
#2661 := [asserted]: #403
#2673 := [mp #2661 #2670]: #2666
#3040 := [unit-resolution #2673 #3044]: #2376
decl f49 :: S1
#161 := f49
#1037 := (= f1 f49)
#2341 := (not #1037)
#2348 := (or #2341 #2345)
#162 := (= f49 f1)
#359 := (not #162)
#361 := (or #359 #360)
#2349 := (iff #361 #2348)
#2343 := (iff #359 #2341)
#1038 := (iff #162 #1037)
#1039 := [rewrite]: #1038
#2344 := [monotonicity #1039]: #2343
#2350 := [monotonicity #2344 #2347]: #2349
#2340 := [asserted]: #361
#2353 := [mp #2340 #2350]: #2348
#3037 := [unit-resolution #2353 #3042]: #2341
decl f41 :: S1
#131 := f41
#911 := (= f1 f41)
#2068 := (not #911)
#3146 := (or #2068 #863 #887)
#1692 := (not #710)
decl f15 :: S1
#44 := f15
#565 := (= f1 f15)
decl f13 :: S1
#38 := f13
#541 := (= f1 f13)
#1373 := (not #541)
decl f11 :: S1
#32 := f11
#517 := (= f1 f11)
#1311 := (not #493)
decl f7 :: S1
#20 := f7
#468 := (= f1 f7)
decl f8 :: S1
#22 := f8
#472 := (= f1 f8)
#1284 := (not #472)
#3174 := [hypothesis]: #2037
decl f38 :: S1
#123 := f38
#884 := (= f1 f38)
#2033 := (not #884)
#3171 := [hypothesis]: #911
#2099 := (or #2033 #2068)
#124 := (= f38 f1)
#318 := (not #124)
#132 := (= f41 f1)
#324 := (not #132)
#328 := (or #324 #318)
#2102 := (iff #328 #2099)
#2095 := (or #2068 #2033)
#2100 := (iff #2095 #2099)
#2101 := [rewrite]: #2100
#2097 := (iff #328 #2095)
#2035 := (iff #318 #2033)
#885 := (iff #124 #884)
#886 := [rewrite]: #885
#2036 := [monotonicity #886]: #2035
#2069 := (iff #324 #2068)
#912 := (iff #132 #911)
#913 := [rewrite]: #912
#2070 := [monotonicity #913]: #2069
#2098 := [monotonicity #2070 #2036]: #2097
#2103 := [trans #2098 #2101]: #2102
#2094 := [asserted]: #328
#2106 := [mp #2094 #2103]: #2099
#3172 := [unit-resolution #2106 #3171]: #2033
#901 := (or #734 #884 #887)
#88 := (= f28 f1)
#127 := (or #126 #88)
#128 := (or #124 #127)
#904 := (iff #128 #901)
#893 := (or #734 #887)
#898 := (or #884 #893)
#902 := (iff #898 #901)
#903 := [rewrite]: #902
#899 := (iff #128 #898)
#896 := (iff #127 #893)
#890 := (or #887 #734)
#894 := (iff #890 #893)
#895 := [rewrite]: #894
#891 := (iff #127 #890)
#735 := (iff #88 #734)
#736 := [rewrite]: #735
#892 := [monotonicity #889 #736]: #891
#897 := [trans #892 #895]: #896
#900 := [monotonicity #886 #897]: #899
#905 := [trans #900 #903]: #904
#883 := [asserted]: #128
#906 := [mp #883 #905]: #901
#3169 := [unit-resolution #906 #3172 #3174]: #734
#1750 := (or #1421 #1729)
#50 := (= f17 f1)
#237 := (not #50)
#278 := (not #88)
#281 := (or #278 #237)
#1753 := (iff #281 #1750)
#1746 := (or #1729 #1421)
#1751 := (iff #1746 #1750)
#1752 := [rewrite]: #1751
#1748 := (iff #281 #1746)
#1422 := (iff #237 #1421)
#582 := (iff #50 #581)
#583 := [rewrite]: #582
#1423 := [monotonicity #583]: #1422
#1730 := (iff #278 #1729)
#1731 := [monotonicity #736]: #1730
#1749 := [monotonicity #1731 #1423]: #1748
#1754 := [trans #1749 #1752]: #1753
#1745 := [asserted]: #281
#1757 := [mp #1745 #1754]: #1750
#3170 := [unit-resolution #1757 #3169]: #1421
#2803 := (or #577 #581)
decl f4 :: S1
#11 := f4
#444 := (= f1 f4)
#595 := (or #444 #577 #581)
#2806 := (iff #595 #2803)
#2800 := (or false #577 #581)
#2804 := (iff #2800 #2803)
#2805 := [rewrite]: #2804
#2801 := (iff #595 #2800)
#2775 := (iff #444 false)
#448 := (not #444)
#12 := (= f4 f1)
#13 := (not #12)
#449 := (iff #13 #448)
#446 := (iff #12 #444)
#447 := [rewrite]: #446
#450 := [monotonicity #447]: #449
#443 := [asserted]: #13
#453 := [mp #443 #450]: #448
#2776 := [iff-false #453]: #2775
#2802 := [monotonicity #2776]: #2801
#2807 := [trans #2802 #2805]: #2806
#51 := (or #50 #12)
#48 := (= f16 f1)
#52 := (or #48 #51)
#598 := (iff #52 #595)
#587 := (or #444 #581)
#592 := (or #577 #587)
#596 := (iff #592 #595)
#597 := [rewrite]: #596
#593 := (iff #52 #592)
#590 := (iff #51 #587)
#584 := (or #581 #444)
#588 := (iff #584 #587)
#589 := [rewrite]: #588
#585 := (iff #51 #584)
#586 := [monotonicity #583 #447]: #585
#591 := [trans #586 #589]: #590
#579 := (iff #48 #577)
#580 := [rewrite]: #579
#594 := [monotonicity #580 #591]: #593
#599 := [trans #594 #597]: #598
#576 := [asserted]: #52
#600 := [mp #576 #599]: #595
#2808 := [mp #600 #2807]: #2803
#3167 := [unit-resolution #2808 #3170]: #577
#1417 := (not #577)
#1503 := (or #1284 #1417)
#23 := (= f8 f1)
#215 := (not #23)
#236 := (not #48)
#248 := (or #236 #215)
#1506 := (iff #248 #1503)
#1499 := (or #1417 #1284)
#1504 := (iff #1499 #1503)
#1505 := [rewrite]: #1504
#1501 := (iff #248 #1499)
#1285 := (iff #215 #1284)
#473 := (iff #23 #472)
#474 := [rewrite]: #473
#1286 := [monotonicity #474]: #1285
#1419 := (iff #236 #1417)
#1420 := [monotonicity #580]: #1419
#1502 := [monotonicity #1420 #1286]: #1501
#1507 := [trans #1502 #1505]: #1506
#1498 := [asserted]: #248
#1510 := [mp #1498 #1507]: #1503
#3168 := [unit-resolution #1510 #3167]: #1284
#2784 := (or #468 #472)
decl f3 :: S1
#8 := f3
#437 := (= f1 f3)
#486 := (or #437 #468 #472)
#2787 := (iff #486 #2784)
#2781 := (or false #468 #472)
#2785 := (iff #2781 #2784)
#2786 := [rewrite]: #2785
#2782 := (iff #486 #2781)
#2772 := (iff #437 false)
#440 := (not #437)
#9 := (= f3 f1)
#10 := (not #9)
#441 := (iff #10 #440)
#438 := (iff #9 #437)
#439 := [rewrite]: #438
#442 := [monotonicity #439]: #441
#436 := [asserted]: #10
#445 := [mp #436 #442]: #440
#2774 := [iff-false #445]: #2772
#2783 := [monotonicity #2774]: #2782
#2788 := [trans #2783 #2786]: #2787
#24 := (or #23 #9)
#21 := (= f7 f1)
#25 := (or #21 #24)
#489 := (iff #25 #486)
#478 := (or #437 #472)
#483 := (or #468 #478)
#487 := (iff #483 #486)
#488 := [rewrite]: #487
#484 := (iff #25 #483)
#481 := (iff #24 #478)
#475 := (or #472 #437)
#479 := (iff #475 #478)
#480 := [rewrite]: #479
#476 := (iff #24 #475)
#477 := [monotonicity #474 #439]: #476
#482 := [trans #477 #480]: #481
#470 := (iff #21 #468)
#471 := [rewrite]: #470
#485 := [monotonicity #471 #482]: #484
#490 := [trans #485 #488]: #489
#467 := [asserted]: #25
#491 := [mp #467 #490]: #486
#2789 := [mp #491 #2788]: #2784
#3165 := [unit-resolution #2789 #3168]: #468
#1281 := (not #468)
#1326 := (or #1281 #1311)
#214 := (not #21)
#27 := (= f9 f1)
#219 := (not #27)
#222 := (or #219 #214)
#1329 := (iff #222 #1326)
#1322 := (or #1311 #1281)
#1327 := (iff #1322 #1326)
#1328 := [rewrite]: #1327
#1324 := (iff #222 #1322)
#1282 := (iff #214 #1281)
#1283 := [monotonicity #471]: #1282
#1313 := (iff #219 #1311)
#494 := (iff #27 #493)
#495 := [rewrite]: #494
#1314 := [monotonicity #495]: #1313
#1325 := [monotonicity #1314 #1283]: #1324
#1330 := [trans #1325 #1328]: #1329
#1321 := [asserted]: #222
#1333 := [mp #1321 #1330]: #1326
#3166 := [unit-resolution #1333 #3165]: #1311
decl f12 :: S1
#34 := f12
#520 := (= f1 f12)
#1346 := (not #520)
decl f30 :: S1
#93 := f30
#758 := (= f1 f30)
#1760 := (not #758)
#2109 := (or #1760 #2068)
#94 := (= f30 f1)
#283 := (not #94)
#329 := (or #324 #283)
#2112 := (iff #329 #2109)
#2105 := (or #2068 #1760)
#2110 := (iff #2105 #2109)
#2111 := [rewrite]: #2110
#2107 := (iff #329 #2105)
#1761 := (iff #283 #1760)
#759 := (iff #94 #758)
#760 := [rewrite]: #759
#1762 := [monotonicity #760]: #1761
#2108 := [monotonicity #2070 #1762]: #2107
#2113 := [trans #2108 #2111]: #2112
#2104 := [asserted]: #329
#2116 := [mp #2104 #2113]: #2109
#3163 := [unit-resolution #2116 #3171]: #1760
decl f27 :: S1
#85 := f27
#731 := (= f1 f27)
#1725 := (not #731)
#1732 := (or #1725 #1729)
#86 := (= f27 f1)
#277 := (not #86)
#279 := (or #277 #278)
#1733 := (iff #279 #1732)
#1727 := (iff #277 #1725)
#732 := (iff #86 #731)
#733 := [rewrite]: #732
#1728 := [monotonicity #733]: #1727
#1734 := [monotonicity #1728 #1731]: #1733
#1724 := [asserted]: #279
#1737 := [mp #1724 #1734]: #1732
#3164 := [unit-resolution #1737 #3169]: #1725
decl f19 :: S1
#55 := f19
#605 := (= f1 f19)
#1452 := (not #605)
#1483 := (or #1417 #1452)
#56 := (= f19 f1)
#242 := (not #56)
#246 := (or #242 #236)
#1486 := (iff #246 #1483)
#1479 := (or #1452 #1417)
#1484 := (iff #1479 #1483)
#1485 := [rewrite]: #1484
#1481 := (iff #246 #1479)
#1453 := (iff #242 #1452)
#606 := (iff #56 #605)
#607 := [rewrite]: #606
#1454 := [monotonicity #607]: #1453
#1482 := [monotonicity #1454 #1420]: #1481
#1487 := [trans #1482 #1485]: #1486
#1478 := [asserted]: #246
#1490 := [mp #1478 #1487]: #1483
#3161 := [unit-resolution #1490 #3167]: #1452
#775 := (or #605 #731 #755 #758)
#95 := (or #86 #56)
#96 := (or #94 #95)
#92 := (= f29 f1)
#97 := (or #92 #96)
#778 := (iff #97 #775)
#764 := (or #605 #731)
#769 := (or #758 #764)
#772 := (or #755 #769)
#776 := (iff #772 #775)
#777 := [rewrite]: #776
#773 := (iff #97 #772)
#770 := (iff #96 #769)
#767 := (iff #95 #764)
#761 := (or #731 #605)
#765 := (iff #761 #764)
#766 := [rewrite]: #765
#762 := (iff #95 #761)
#763 := [monotonicity #733 #607]: #762
#768 := [trans #763 #766]: #767
#771 := [monotonicity #760 #768]: #770
#756 := (iff #92 #755)
#757 := [rewrite]: #756
#774 := [monotonicity #757 #771]: #773
#779 := [trans #774 #777]: #778
#754 := [asserted]: #97
#780 := [mp #754 #779]: #775
#3162 := [unit-resolution #780 #3161 #3164 #3163]: #755
#1872 := (or #1513 #1756)
#63 := (= f21 f1)
#250 := (not #63)
#282 := (not #92)
#297 := (or #282 #250)
#1875 := (iff #297 #1872)
#1868 := (or #1756 #1513)
#1873 := (iff #1868 #1872)
#1874 := [rewrite]: #1873
#1870 := (iff #297 #1868)
#1514 := (iff #250 #1513)
#633 := (iff #63 #632)
#634 := [rewrite]: #633
#1515 := [monotonicity #634]: #1514
#1758 := (iff #282 #1756)
#1759 := [monotonicity #757]: #1758
#1871 := [monotonicity #1759 #1515]: #1870
#1876 := [trans #1871 #1874]: #1875
#1867 := [asserted]: #297
#1879 := [mp #1867 #1876]: #1872
#3159 := [unit-resolution #1879 #3162]: #1513
#1448 := (not #602)
#1463 := (or #1417 #1448)
#54 := (= f18 f1)
#241 := (not #54)
#244 := (or #241 #236)
#1466 := (iff #244 #1463)
#1459 := (or #1448 #1417)
#1464 := (iff #1459 #1463)
#1465 := [rewrite]: #1464
#1461 := (iff #244 #1459)
#1450 := (iff #241 #1448)
#603 := (iff #54 #602)
#604 := [rewrite]: #603
#1451 := [monotonicity #604]: #1450
#1462 := [monotonicity #1451 #1420]: #1461
#1467 := [trans #1462 #1465]: #1466
#1458 := [asserted]: #244
#1470 := [mp #1458 #1467]: #1463
#3160 := [unit-resolution #1470 #3167]: #1448
decl f10 :: S1
#28 := f10
#496 := (= f1 f10)
#1315 := (not #496)
#1336 := (or #1281 #1315)
#29 := (= f10 f1)
#220 := (not #29)
#223 := (or #220 #214)
#1339 := (iff #223 #1336)
#1332 := (or #1315 #1281)
#1337 := (iff #1332 #1336)
#1338 := [rewrite]: #1337
#1334 := (iff #223 #1332)
#1316 := (iff #220 #1315)
#497 := (iff #29 #496)
#498 := [rewrite]: #497
#1317 := [monotonicity #498]: #1316
#1335 := [monotonicity #1317 #1283]: #1334
#1340 := [trans #1335 #1338]: #1339
#1331 := [asserted]: #223
#1343 := [mp #1331 #1340]: #1336
#3157 := [unit-resolution #1343 #3165]: #1315
#649 := (or #496 #602 #629 #632)
#64 := (or #54 #29)
#65 := (or #63 #64)
#61 := (= f20 f1)
#66 := (or #61 #65)
#652 := (iff #66 #649)
#638 := (or #496 #602)
#643 := (or #632 #638)
#646 := (or #629 #643)
#650 := (iff #646 #649)
#651 := [rewrite]: #650
#647 := (iff #66 #646)
#644 := (iff #65 #643)
#641 := (iff #64 #638)
#635 := (or #602 #496)
#639 := (iff #635 #638)
#640 := [rewrite]: #639
#636 := (iff #64 #635)
#637 := [monotonicity #604 #498]: #636
#642 := [trans #637 #640]: #641
#645 := [monotonicity #634 #642]: #644
#630 := (iff #61 #629)
#631 := [rewrite]: #630
#648 := [monotonicity #631 #645]: #647
#653 := [trans #648 #651]: #652
#628 := [asserted]: #66
#654 := [mp #628 #653]: #649
#3158 := [unit-resolution #654 #3157 #3160 #3159]: #629
#1625 := (or #1346 #1509)
#35 := (= f12 f1)
#225 := (not #35)
#249 := (not #61)
#264 := (or #249 #225)
#1628 := (iff #264 #1625)
#1621 := (or #1509 #1346)
#1626 := (iff #1621 #1625)
#1627 := [rewrite]: #1626
#1623 := (iff #264 #1621)
#1347 := (iff #225 #1346)
#521 := (iff #35 #520)
#522 := [rewrite]: #521
#1348 := [monotonicity #522]: #1347
#1511 := (iff #249 #1509)
#1512 := [monotonicity #631]: #1511
#1624 := [monotonicity #1512 #1348]: #1623
#1629 := [trans #1624 #1627]: #1628
#1620 := [asserted]: #264
#1632 := [mp #1620 #1629]: #1625
#3155 := [unit-resolution #1632 #3158]: #1346
#534 := (or #493 #517 #520)
#36 := (or #35 #27)
#33 := (= f11 f1)
#37 := (or #33 #36)
#537 := (iff #37 #534)
#526 := (or #493 #520)
#531 := (or #517 #526)
#535 := (iff #531 #534)
#536 := [rewrite]: #535
#532 := (iff #37 #531)
#529 := (iff #36 #526)
#523 := (or #520 #493)
#527 := (iff #523 #526)
#528 := [rewrite]: #527
#524 := (iff #36 #523)
#525 := [monotonicity #522 #495]: #524
#530 := [trans #525 #528]: #529
#518 := (iff #33 #517)
#519 := [rewrite]: #518
#533 := [monotonicity #519 #530]: #532
#538 := [trans #533 #536]: #537
#516 := [asserted]: #37
#539 := [mp #516 #538]: #534
#3156 := [unit-resolution #539 #3155 #3166]: #517
#1342 := (not #517)
#1388 := (or #1342 #1373)
#224 := (not #33)
#39 := (= f13 f1)
#229 := (not #39)
#232 := (or #229 #224)
#1391 := (iff #232 #1388)
#1384 := (or #1373 #1342)
#1389 := (iff #1384 #1388)
#1390 := [rewrite]: #1389
#1386 := (iff #232 #1384)
#1344 := (iff #224 #1342)
#1345 := [monotonicity #519]: #1344
#1375 := (iff #229 #1373)
#542 := (iff #39 #541)
#543 := [rewrite]: #542
#1376 := [monotonicity #543]: #1375
#1387 := [monotonicity #1376 #1345]: #1386
#1392 := [trans #1387 #1390]: #1391
#1383 := [asserted]: #232
#1395 := [mp #1383 #1392]: #1388
#3153 := [unit-resolution #1395 #3156]: #1373
#571 := (or #541 #565)
#45 := (= f15 f1)
#46 := (or #45 #39)
#574 := (iff #46 #571)
#568 := (or #565 #541)
#572 := (iff #568 #571)
#573 := [rewrite]: #572
#569 := (iff #46 #568)
#566 := (iff #45 #565)
#567 := [rewrite]: #566
#570 := [monotonicity #567 #543]: #569
#575 := [trans #570 #573]: #574
#564 := [asserted]: #46
#578 := [mp #564 #575]: #571
#3154 := [unit-resolution #578 #3153]: #565
#1404 := (not #565)
#1709 := (or #1404 #1692)
#234 := (not #45)
#82 := (= f26 f1)
#273 := (not #82)
#275 := (or #273 #234)
#1712 := (iff #275 #1709)
#1705 := (or #1692 #1404)
#1710 := (iff #1705 #1709)
#1711 := [rewrite]: #1710
#1707 := (iff #275 #1705)
#1406 := (iff #234 #1404)
#1407 := [monotonicity #567]: #1406
#1694 := (iff #273 #1692)
#711 := (iff #82 #710)
#712 := [rewrite]: #711
#1695 := [monotonicity #712]: #1694
#1708 := [monotonicity #1695 #1407]: #1707
#1713 := [trans #1708 #1711]: #1712
#1704 := [asserted]: #275
#1716 := [mp #1704 #1713]: #1709
#3151 := [unit-resolution #1716 #3154]: #1692
#877 := (or #710 #836 #863)
#113 := (= f35 f1)
#121 := (or #113 #82)
#122 := (or #120 #121)
#880 := (iff #122 #877)
#869 := (or #710 #836)
#874 := (or #863 #869)
#878 := (iff #874 #877)
#879 := [rewrite]: #878
#875 := (iff #122 #874)
#872 := (iff #121 #869)
#866 := (or #836 #710)
#870 := (iff #866 #869)
#871 := [rewrite]: #870
#867 := (iff #121 #866)
#837 := (iff #113 #836)
#838 := [rewrite]: #837
#868 := [monotonicity #838 #712]: #867
#873 := [trans #868 #871]: #872
#876 := [monotonicity #865 #873]: #875
#881 := [trans #876 #879]: #880
#862 := [asserted]: #122
#882 := [mp #862 #881]: #877
#3152 := [unit-resolution #882 #3151 #3173]: #836
decl f14 :: S1
#40 := f14
#544 := (= f1 f14)
#1377 := (not #544)
#1398 := (or #1342 #1377)
#41 := (= f14 f1)
#230 := (not #41)
#233 := (or #230 #224)
#1401 := (iff #233 #1398)
#1394 := (or #1377 #1342)
#1399 := (iff #1394 #1398)
#1400 := [rewrite]: #1399
#1396 := (iff #233 #1394)
#1378 := (iff #230 #1377)
#545 := (iff #41 #544)
#546 := [rewrite]: #545
#1379 := [monotonicity #546]: #1378
#1397 := [monotonicity #1379 #1345]: #1396
#1402 := [trans #1397 #1400]: #1401
#1393 := [asserted]: #233
#1405 := [mp #1393 #1402]: #1398
#3149 := [unit-resolution #1405 #3156]: #1377
decl f22 :: S1
#67 := f22
#656 := (= f1 f22)
#1570 := (not #656)
#1585 := (or #1509 #1570)
#68 := (= f22 f1)
#257 := (not #68)
#260 := (or #257 #249)
#1588 := (iff #260 #1585)
#1581 := (or #1570 #1509)
#1586 := (iff #1581 #1585)
#1587 := [rewrite]: #1586
#1583 := (iff #260 #1581)
#1572 := (iff #257 #1570)
#657 := (iff #68 #656)
#658 := [rewrite]: #657
#1573 := [monotonicity #658]: #1572
#1584 := [monotonicity #1573 #1512]: #1583
#1589 := [trans #1584 #1587]: #1588
#1580 := [asserted]: #260
#1592 := [mp #1580 #1589]: #1585
#3150 := [unit-resolution #1592 #3158]: #1570
decl f24 :: S1
#74 := f24
#683 := (= f1 f24)
#1631 := (not #683)
#1719 := (or #1404 #1631)
#75 := (= f24 f1)
#265 := (not #75)
#276 := (or #265 #234)
#1722 := (iff #276 #1719)
#1715 := (or #1631 #1404)
#1720 := (iff #1715 #1719)
#1721 := [rewrite]: #1720
#1717 := (iff #276 #1715)
#1633 := (iff #265 #1631)
#684 := (iff #75 #683)
#685 := [rewrite]: #684
#1634 := [monotonicity #685]: #1633
#1718 := [monotonicity #1634 #1407]: #1717
#1723 := [trans #1718 #1721]: #1722
#1714 := [asserted]: #276
#1726 := [mp #1714 #1723]: #1719
#3147 := [unit-resolution #1726 #3154]: #1631
#703 := (or #544 #656 #683 #686)
#78 := (or #68 #41)
#77 := (= f25 f1)
#79 := (or #77 #78)
#80 := (or #75 #79)
#706 := (iff #80 #703)
#692 := (or #544 #656)
#697 := (or #686 #692)
#700 := (or #683 #697)
#704 := (iff #700 #703)
#705 := [rewrite]: #704
#701 := (iff #80 #700)
#698 := (iff #79 #697)
#695 := (iff #78 #692)
#689 := (or #656 #544)
#693 := (iff #689 #692)
#694 := [rewrite]: #693
#690 := (iff #78 #689)
#691 := [monotonicity #658 #546]: #690
#696 := [trans #691 #694]: #695
#687 := (iff #77 #686)
#688 := [rewrite]: #687
#699 := [monotonicity #688 #696]: #698
#702 := [monotonicity #685 #699]: #701
#707 := [trans #702 #705]: #706
#682 := [asserted]: #80
#708 := [mp #682 #707]: #703
#3148 := [unit-resolution #708 #3147 #3150 #3149]: #686
#1635 := (not #686)
#1964 := (or #1635 #1939)
#266 := (not #77)
#306 := (not #113)
#310 := (or #306 #266)
#1967 := (iff #310 #1964)
#1960 := (or #1939 #1635)
#1965 := (iff #1960 #1964)
#1966 := [rewrite]: #1965
#1962 := (iff #310 #1960)
#1636 := (iff #266 #1635)
#1637 := [monotonicity #688]: #1636
#1941 := (iff #306 #1939)
#1942 := [monotonicity #838]: #1941
#1963 := [monotonicity #1942 #1637]: #1962
#1968 := [trans #1963 #1966]: #1967
#1959 := [asserted]: #310
#1971 := [mp #1959 #1968]: #1964
#3145 := [unit-resolution #1971 #3148 #3152]: false
#3143 := [lemma #3145]: #3146
#3038 := [unit-resolution #3143 #3039 #3173]: #2068
#1081 := (or #911 #1037 #1061 #1064)
#171 := (or #162 #132)
#172 := (or #170 #171)
#168 := (= f51 f1)
#173 := (or #168 #172)
#1084 := (iff #173 #1081)
#1070 := (or #911 #1037)
#1075 := (or #1064 #1070)
#1078 := (or #1061 #1075)
#1082 := (iff #1078 #1081)
#1083 := [rewrite]: #1082
#1079 := (iff #173 #1078)
#1076 := (iff #172 #1075)
#1073 := (iff #171 #1070)
#1067 := (or #1037 #911)
#1071 := (iff #1067 #1070)
#1072 := [rewrite]: #1071
#1068 := (iff #171 #1067)
#1069 := [monotonicity #1039 #913]: #1068
#1074 := [trans #1069 #1072]: #1073
#1077 := [monotonicity #1066 #1074]: #1076
#1062 := (iff #168 #1061)
#1063 := [rewrite]: #1062
#1080 := [monotonicity #1063 #1077]: #1079
#1085 := [trans #1080 #1083]: #1084
#1060 := [asserted]: #173
#1086 := [mp #1060 #1085]: #1081
#3035 := [unit-resolution #1086 #3038 #3037 #3040]: #1061
#2488 := (or #2129 #2372)
#139 := (= f43 f1)
#332 := (not #139)
#364 := (not #168)
#379 := (or #364 #332)
#2491 := (iff #379 #2488)
#2484 := (or #2372 #2129)
#2489 := (iff #2484 #2488)
#2490 := [rewrite]: #2489
#2486 := (iff #379 #2484)
#2130 := (iff #332 #2129)
#939 := (iff #139 #938)
#940 := [rewrite]: #939
#2131 := [monotonicity #940]: #2130
#2374 := (iff #364 #2372)
#2375 := [monotonicity #1063]: #2374
#2487 := [monotonicity #2375 #2131]: #2486
#2492 := [trans #2487 #2490]: #2491
#2483 := [asserted]: #379
#2495 := [mp #2483 #2492]: #2488
#3036 := [unit-resolution #2495 #3035]: #2129
#3046 := (or #1939 #938 #887 #989 #992)
#3069 := [hypothesis]: #836
#1946 := (or #1939 #1943)
#115 := (= f36 f1)
#307 := (not #115)
#308 := (or #306 #307)
#1947 := (iff #308 #1946)
#1944 := (iff #307 #1943)
#840 := (iff #115 #839)
#841 := [rewrite]: #840
#1945 := [monotonicity #841]: #1944
#1948 := [monotonicity #1942 #1945]: #1947
#1938 := [asserted]: #308
#1951 := [mp #1938 #1948]: #1946
#3070 := [unit-resolution #1951 #3069]: #1943
#1009 := (or #839 #962 #989 #992)
#144 := (= f44 f1)
#154 := (or #144 #115)
#155 := (or #153 #154)
#156 := (or #151 #155)
#1012 := (iff #156 #1009)
#998 := (or #839 #962)
#1003 := (or #992 #998)
#1006 := (or #989 #1003)
#1010 := (iff #1006 #1009)
#1011 := [rewrite]: #1010
#1007 := (iff #156 #1006)
#1004 := (iff #155 #1003)
#1001 := (iff #154 #998)
#995 := (or #962 #839)
#999 := (iff #995 #998)
#1000 := [rewrite]: #999
#996 := (iff #154 #995)
#963 := (iff #144 #962)
#964 := [rewrite]: #963
#997 := [monotonicity #964 #841]: #996
#1002 := [trans #997 #1000]: #1001
#1005 := [monotonicity #994 #1002]: #1004
#1008 := [monotonicity #991 #1005]: #1007
#1013 := [trans #1008 #1011]: #1012
#988 := [asserted]: #156
#1014 := [mp #988 #1013]: #1009
#3067 := [unit-resolution #1014 #3070 #3072 #3071]: #962
#2211 := (or #1882 #2186)
#108 := (= f34 f1)
#299 := (not #108)
#339 := (not #144)
#343 := (or #339 #299)
#2214 := (iff #343 #2211)
#2207 := (or #2186 #1882)
#2212 := (iff #2207 #2211)
#2213 := [rewrite]: #2212
#2209 := (iff #343 #2207)
#1883 := (iff #299 #1882)
#813 := (iff #108 #812)
#814 := [rewrite]: #813
#1884 := [monotonicity #814]: #1883
#2188 := (iff #339 #2186)
#2189 := [monotonicity #964]: #2188
#2210 := [monotonicity #2189 #1884]: #2209
#2215 := [trans #2210 #2213]: #2214
#2206 := [asserted]: #343
#2218 := [mp #2206 #2215]: #2211
#3068 := [unit-resolution #2218 #3067]: #1882
#1954 := (or #1878 #1939)
#106 := (= f33 f1)
#298 := (not #106)
#309 := (or #306 #298)
#1957 := (iff #309 #1954)
#1950 := (or #1939 #1878)
#1955 := (iff #1950 #1954)
#1956 := [rewrite]: #1955
#1952 := (iff #309 #1950)
#1880 := (iff #298 #1878)
#810 := (iff #106 #809)
#811 := [rewrite]: #810
#1881 := [monotonicity #811]: #1880
#1953 := [monotonicity #1942 #1881]: #1952
#1958 := [trans #1953 #1956]: #1957
#1949 := [asserted]: #309
#1961 := [mp #1949 #1958]: #1954
#3065 := [unit-resolution #1961 #3069]: #1878
#2201 := (or #2125 #2186)
#137 := (= f42 f1)
#331 := (not #137)
#342 := (or #339 #331)
#2204 := (iff #342 #2201)
#2197 := (or #2186 #2125)
#2202 := (iff #2197 #2201)
#2203 := [rewrite]: #2202
#2199 := (iff #342 #2197)
#2127 := (iff #331 #2125)
#936 := (iff #137 #935)
#937 := [rewrite]: #936
#2128 := [monotonicity #937]: #2127
#2200 := [monotonicity #2189 #2128]: #2199
#2205 := [trans #2200 #2203]: #2204
#2196 := [asserted]: #342
#2208 := [mp #2196 #2205]: #2201
#3066 := [unit-resolution #2208 #3067]: #2125
#3116 := [hypothesis]: #2129
#3083 := (or #1729 #938 #935 #809 #812)
#3103 := [hypothesis]: #734
#3104 := [unit-resolution #1757 #3103]: #1421
#3101 := [unit-resolution #2808 #3104]: #577
#3102 := [unit-resolution #1510 #3101]: #1284
#3099 := [unit-resolution #2789 #3102]: #468
#3100 := [unit-resolution #1343 #3099]: #1315
#3097 := [unit-resolution #1470 #3101]: #1448
#3098 := [hypothesis]: #1882
#3095 := [hypothesis]: #1878
#3096 := [unit-resolution #1490 #3101]: #1452
#3093 := [unit-resolution #1737 #3103]: #1725
#3105 := (or #1817 #731 #605 #938 #935)
#3113 := [hypothesis]: #782
#1824 := (or #1817 #1821)
#101 := (= f32 f1)
#291 := (not #101)
#99 := (= f31 f1)
#290 := (not #99)
#292 := (or #290 #291)
#1825 := (iff #292 #1824)
#1822 := (iff #291 #1821)
#786 := (iff #101 #785)
#787 := [rewrite]: #786
#1823 := [monotonicity #787]: #1822
#1819 := (iff #290 #1817)
#783 := (iff #99 #782)
#784 := [rewrite]: #783
#1820 := [monotonicity #784]: #1819
#1826 := [monotonicity #1820 #1823]: #1825
#1816 := [asserted]: #292
#1829 := [mp #1816 #1826]: #1824
#3114 := [unit-resolution #1829 #3113]: #1821
#955 := (or #785 #908 #935 #938)
#130 := (= f40 f1)
#140 := (or #130 #101)
#141 := (or #139 #140)
#142 := (or #137 #141)
#958 := (iff #142 #955)
#944 := (or #785 #908)
#949 := (or #938 #944)
#952 := (or #935 #949)
#956 := (iff #952 #955)
#957 := [rewrite]: #956
#953 := (iff #142 #952)
#950 := (iff #141 #949)
#947 := (iff #140 #944)
#941 := (or #908 #785)
#945 := (iff #941 #944)
#946 := [rewrite]: #945
#942 := (iff #140 #941)
#909 := (iff #130 #908)
#910 := [rewrite]: #909
#943 := [monotonicity #910 #787]: #942
#948 := [trans #943 #946]: #947
#951 := [monotonicity #940 #948]: #950
#954 := [monotonicity #937 #951]: #953
#959 := [trans #954 #957]: #958
#934 := [asserted]: #142
#960 := [mp #934 #959]: #955
#3111 := [unit-resolution #960 #3114 #3116 #3115]: #908
#3112 := [hypothesis]: #1452
#3109 := [hypothesis]: #1725
#1832 := (or #1756 #1817)
#293 := (or #290 #282)
#1835 := (iff #293 #1832)
#1828 := (or #1817 #1756)
#1833 := (iff #1828 #1832)
#1834 := [rewrite]: #1833
#1830 := (iff #293 #1828)
#1831 := [monotonicity #1820 #1759]: #1830
#1836 := [trans #1831 #1834]: #1835
#1827 := [asserted]: #293
#1839 := [mp #1827 #1836]: #1832
#3110 := [unit-resolution #1839 #3113]: #1756
#3107 := [unit-resolution #780 #3110 #3109 #3112]: #758
#2089 := (or #1760 #2064)
#323 := (not #130)
#327 := (or #323 #283)
#2092 := (iff #327 #2089)
#2085 := (or #2064 #1760)
#2090 := (iff #2085 #2089)
#2091 := [rewrite]: #2090
#2087 := (iff #327 #2085)
#2066 := (iff #323 #2064)
#2067 := [monotonicity #910]: #2066
#2088 := [monotonicity #2067 #1762]: #2087
#2093 := [trans #2088 #2091]: #2092
#2084 := [asserted]: #327
#2096 := [mp #2084 #2093]: #2089
#3108 := [unit-resolution #2096 #3107 #3111]: false
#3106 := [lemma #3108]: #3105
#3094 := [unit-resolution #3106 #3093 #3096 #3116 #3115]: #1817
#829 := (or #659 #782 #809 #812)
#70 := (= f23 f1)
#109 := (or #99 #70)
#110 := (or #108 #109)
#111 := (or #106 #110)
#832 := (iff #111 #829)
#818 := (or #659 #782)
#823 := (or #812 #818)
#826 := (or #809 #823)
#830 := (iff #826 #829)
#831 := [rewrite]: #830
#827 := (iff #111 #826)
#824 := (iff #110 #823)
#821 := (iff #109 #818)
#815 := (or #782 #659)
#819 := (iff #815 #818)
#820 := [rewrite]: #819
#816 := (iff #109 #815)
#660 := (iff #70 #659)
#661 := [rewrite]: #660
#817 := [monotonicity #784 #661]: #816
#822 := [trans #817 #820]: #821
#825 := [monotonicity #814 #822]: #824
#828 := [monotonicity #811 #825]: #827
#833 := [trans #828 #831]: #832
#808 := [asserted]: #111
#834 := [mp #808 #833]: #829
#3091 := [unit-resolution #834 #3094 #3095 #3098]: #659
#1574 := (not #659)
#1605 := (or #1509 #1574)
#258 := (not #70)
#262 := (or #258 #249)
#1608 := (iff #262 #1605)
#1601 := (or #1574 #1509)
#1606 := (iff #1601 #1605)
#1607 := [rewrite]: #1606
#1603 := (iff #262 #1601)
#1575 := (iff #258 #1574)
#1576 := [monotonicity #661]: #1575
#1604 := [monotonicity #1576 #1512]: #1603
#1609 := [trans #1604 #1607]: #1608
#1600 := [asserted]: #262
#1612 := [mp #1600 #1609]: #1605
#3092 := [unit-resolution #1612 #3091]: #1509
#3089 := [unit-resolution #654 #3092 #3097 #3100]: #632
#1862 := (or #1513 #1821)
#296 := (or #291 #250)
#1865 := (iff #296 #1862)
#1858 := (or #1821 #1513)
#1863 := (iff #1858 #1862)
#1864 := [rewrite]: #1863
#1860 := (iff #296 #1858)
#1861 := [monotonicity #1823 #1515]: #1860
#1866 := [trans #1861 #1864]: #1865
#1857 := [asserted]: #296
#1869 := [mp #1857 #1866]: #1862
#3090 := [unit-resolution #1869 #3089]: #1821
#3087 := [unit-resolution #960 #3090 #3116 #3115]: #908
#3088 := [unit-resolution #1879 #3089]: #1756
#3085 := [unit-resolution #780 #3088 #3093 #3096]: #758
#3086 := [unit-resolution #2096 #3085 #3087]: false
#3084 := [lemma #3086]: #3083
#3063 := [unit-resolution #3084 #3066 #3116 #3065 #3068]: #1729
#3064 := [unit-resolution #906 #3063 #3174]: #884
#2079 := (or #2033 #2064)
#326 := (or #323 #318)
#2082 := (iff #326 #2079)
#2075 := (or #2064 #2033)
#2080 := (iff #2075 #2079)
#2081 := [rewrite]: #2080
#2077 := (iff #326 #2075)
#2078 := [monotonicity #2067 #2036]: #2077
#2083 := [trans #2078 #2081]: #2082
#2074 := [asserted]: #326
#2086 := [mp #2074 #2083]: #2079
#3061 := [unit-resolution #2086 #3064]: #2064
#3062 := [unit-resolution #960 #3061 #3116 #3066]: #785
#3059 := [unit-resolution #1829 #3062]: #1817
#3060 := [unit-resolution #834 #3059 #3065 #3068]: #659
#3057 := [unit-resolution #1612 #3060]: #1509
#3058 := [unit-resolution #1869 #3062]: #1513
#1852 := (or #1756 #1821)
#295 := (or #291 #282)
#1855 := (iff #295 #1852)
#1848 := (or #1821 #1756)
#1853 := (iff #1848 #1852)
#1854 := [rewrite]: #1853
#1850 := (iff #295 #1848)
#1851 := [monotonicity #1823 #1759]: #1850
#1856 := [trans #1851 #1854]: #1855
#1847 := [asserted]: #295
#1859 := [mp #1847 #1856]: #1852
#3055 := [unit-resolution #1859 #3062]: #1756
#2119 := (or #1760 #2033)
#330 := (or #318 #283)
#2122 := (iff #330 #2119)
#2115 := (or #2033 #1760)
#2120 := (iff #2115 #2119)
#2121 := [rewrite]: #2120
#2117 := (iff #330 #2115)
#2118 := [monotonicity #2036 #1762]: #2117
#2123 := [trans #2118 #2121]: #2122
#2114 := [asserted]: #330
#2126 := [mp #2114 #2123]: #2119
#3056 := [unit-resolution #2126 #3064]: #1760
#3073 := (or #1417 #632 #629)
#3081 := [hypothesis]: #1509
#3082 := [hypothesis]: #1513
#3079 := [hypothesis]: #577
#3080 := [unit-resolution #1470 #3079]: #1448
#3077 := [unit-resolution #654 #3080 #3082 #3081]: #496
#3078 := [unit-resolution #1510 #3079]: #1284
#3075 := [unit-resolution #2789 #3078]: #468
#3076 := [unit-resolution #1343 #3075 #3077]: false
#3074 := [lemma #3076]: #3073
#3053 := [unit-resolution #3074 #3058 #3057]: #1417
#3054 := [unit-resolution #2808 #3053]: #581
#1740 := (or #1421 #1725)
#280 := (or #277 #237)
#1743 := (iff #280 #1740)
#1736 := (or #1725 #1421)
#1741 := (iff #1736 #1740)
#1742 := [rewrite]: #1741
#1738 := (iff #280 #1736)
#1739 := [monotonicity #1728 #1423]: #1738
#1744 := [trans #1739 #1742]: #1743
#1735 := [asserted]: #280
#1747 := [mp #1735 #1744]: #1740
#3051 := [unit-resolution #1747 #3054]: #1725
#3052 := [unit-resolution #780 #3051 #3056 #3055]: #605
#1455 := (or #1448 #1452)
#243 := (or #241 #242)
#1456 := (iff #243 #1455)
#1457 := [monotonicity #1451 #1454]: #1456
#1447 := [asserted]: #243
#1460 := [mp #1447 #1457]: #1455
#3049 := [unit-resolution #1460 #3052]: #1448
#3050 := [unit-resolution #654 #3049 #3058 #3057]: #496
#1493 := (or #1284 #1452)
#247 := (or #242 #215)
#1496 := (iff #247 #1493)
#1489 := (or #1452 #1284)
#1494 := (iff #1489 #1493)
#1495 := [rewrite]: #1494
#1491 := (iff #247 #1489)
#1492 := [monotonicity #1454 #1286]: #1491
#1497 := [trans #1492 #1495]: #1496
#1488 := [asserted]: #247
#1500 := [mp #1488 #1497]: #1493
#3047 := [unit-resolution #1500 #3052]: #1284
#3048 := [unit-resolution #2789 #3047]: #468
#3045 := [unit-resolution #1343 #3048 #3050]: false
#3043 := [lemma #3045]: #3046
#3033 := [unit-resolution #3043 #3036 #3039 #3072 #3071]: #1939
#3034 := [unit-resolution #882 #3033 #3173]: #710
#3117 := (or #1692 #887 #686)
#3144 := [hypothesis]: #710
#3141 := [unit-resolution #1716 #3144]: #1404
#3142 := [unit-resolution #578 #3141]: #541
#3139 := [unit-resolution #1395 #3142]: #1342
#1699 := (or #1631 #1692)
#274 := (or #273 #265)
#1702 := (iff #274 #1699)
#1696 := (or #1692 #1631)
#1700 := (iff #1696 #1699)
#1701 := [rewrite]: #1700
#1697 := (iff #274 #1696)
#1698 := [monotonicity #1695 #1634]: #1697
#1703 := [trans #1698 #1701]: #1702
#1691 := [asserted]: #274
#1706 := [mp #1691 #1703]: #1699
#3140 := [unit-resolution #1706 #3144]: #1631
#3137 := [hypothesis]: #1635
#1380 := (or #1373 #1377)
#231 := (or #229 #230)
#1381 := (iff #231 #1380)
#1382 := [monotonicity #1376 #1379]: #1381
#1372 := [asserted]: #231
#1385 := [mp #1372 #1382]: #1380
#3138 := [unit-resolution #1385 #3142]: #1377
#3135 := [unit-resolution #708 #3138 #3137 #3140]: #656
#1595 := (or #1346 #1570)
#261 := (or #257 #225)
#1598 := (iff #261 #1595)
#1591 := (or #1570 #1346)
#1596 := (iff #1591 #1595)
#1597 := [rewrite]: #1596
#1593 := (iff #261 #1591)
#1594 := [monotonicity #1573 #1348]: #1593
#1599 := [trans #1594 #1597]: #1598
#1590 := [asserted]: #261
#1602 := [mp #1590 #1599]: #1595
#3136 := [unit-resolution #1602 #3135]: #1346
#3133 := [unit-resolution #539 #3136 #3139]: #493
#1318 := (or #1311 #1315)
#221 := (or #219 #220)
#1319 := (iff #221 #1318)
#1320 := [monotonicity #1314 #1317]: #1319
#1310 := [asserted]: #221
#1323 := [mp #1310 #1320]: #1318
#3134 := [unit-resolution #1323 #3133]: #1315
#3131 := [unit-resolution #1592 #3135]: #1509
#3132 := [unit-resolution #1333 #3133]: #1281
#3129 := [unit-resolution #2789 #3132]: #472
#1473 := (or #1284 #1448)
#245 := (or #241 #215)
#1476 := (iff #245 #1473)
#1469 := (or #1448 #1284)
#1474 := (iff #1469 #1473)
#1475 := [rewrite]: #1474
#1471 := (iff #245 #1469)
#1472 := [monotonicity #1451 #1286]: #1471
#1477 := [trans #1472 #1475]: #1476
#1468 := [asserted]: #245
#1480 := [mp #1468 #1477]: #1473
#3130 := [unit-resolution #1480 #3129]: #1448
#3127 := [unit-resolution #654 #3130 #3131 #3134]: #632
#3128 := [unit-resolution #1879 #3127]: #1756
#3125 := [unit-resolution #1500 #3129]: #1452
#3126 := [unit-resolution #1510 #3129]: #1417
#3123 := [unit-resolution #2808 #3126]: #581
#3124 := [unit-resolution #1747 #3123]: #1725
#3121 := [unit-resolution #780 #3124 #3125 #3128]: #758
#3122 := [unit-resolution #1757 #3123]: #1729
#3119 := [unit-resolution #906 #3122 #3174]: #884
#3120 := [unit-resolution #2126 #3119 #3121]: false
#3118 := [lemma #3120]: #3117
#3031 := [unit-resolution #3118 #3034 #3039]: #686
#1984 := (or #1635 #1943)
#312 := (or #307 #266)
#1987 := (iff #312 #1984)
#1980 := (or #1943 #1635)
#1985 := (iff #1980 #1984)
#1986 := [rewrite]: #1985
#1982 := (iff #312 #1980)
#1983 := [monotonicity #1945 #1637]: #1982
#1988 := [trans #1983 #1986]: #1987
#1979 := [asserted]: #312
#1991 := [mp #1979 #1988]: #1984
#3032 := [unit-resolution #1991 #3031]: #1943
#3029 := [unit-resolution #1014 #3032 #3072 #3071]: #962
#3030 := [unit-resolution #2218 #3029]: #1882
#1994 := (or #1635 #1878)
#313 := (or #298 #266)
#1997 := (iff #313 #1994)
#1990 := (or #1878 #1635)
#1995 := (iff #1990 #1994)
#1996 := [rewrite]: #1995
#1992 := (iff #313 #1990)
#1993 := [monotonicity #1881 #1637]: #1992
#1998 := [trans #1993 #1996]: #1997
#1989 := [asserted]: #313
#2001 := [mp #1989 #1998]: #1994
#3027 := [unit-resolution #2001 #3031]: #1878
#3028 := [unit-resolution #2208 #3029]: #2125
#3025 := [unit-resolution #3084 #3028 #3036 #3027 #3030]: #1729
#3026 := [unit-resolution #906 #3025 #3039]: #884
#3023 := [unit-resolution #2086 #3026]: #2064
#3024 := [unit-resolution #960 #3023 #3036 #3028]: #785
#3021 := [unit-resolution #1829 #3024]: #1817
#3022 := [unit-resolution #834 #3021 #3027 #3030]: #659
#3019 := [unit-resolution #1612 #3022]: #1509
#3020 := [unit-resolution #1869 #3024]: #1513
#3017 := [unit-resolution #1716 #3034]: #1404
#3018 := [unit-resolution #578 #3017]: #541
#3015 := [unit-resolution #1395 #3018]: #1342
#1615 := (or #1346 #1574)
#263 := (or #258 #225)
#1618 := (iff #263 #1615)
#1611 := (or #1574 #1346)
#1616 := (iff #1611 #1615)
#1617 := [rewrite]: #1616
#1613 := (iff #263 #1611)
#1614 := [monotonicity #1576 #1348]: #1613
#1619 := [trans #1614 #1617]: #1618
#1610 := [asserted]: #263
#1622 := [mp #1610 #1619]: #1615
#3016 := [unit-resolution #1622 #3022]: #1346
#3013 := [unit-resolution #539 #3016 #3015]: #493
#3014 := [unit-resolution #1323 #3013]: #1315
#3011 := [unit-resolution #654 #3014 #3020 #3019]: #602
#3012 := [unit-resolution #1859 #3024]: #1756
#3009 := [unit-resolution #2126 #3026]: #1760
#3010 := [unit-resolution #3074 #3019 #3020]: #1417
#3007 := [unit-resolution #2808 #3010]: #581
#3008 := [unit-resolution #1747 #3007]: #1725
#3005 := [unit-resolution #780 #3008 #3009 #3012]: #605
#3006 := [unit-resolution #1460 #3005 #3011]: false
#3004 := [lemma #3006]: #3003
#3182 := [unit-resolution #3004 #3179 #3176 #3181]: #2649
#1235 := (or #1091 #1199 #1221)
#177 := (= f54 f1)
#206 := (or #201 #177)
#205 := (= f61 f1)
#207 := (or #205 #206)
#1238 := (iff #207 #1235)
#1227 := (or #1091 #1199)
#1232 := (or #1221 #1227)
#1236 := (iff #1232 #1235)
#1237 := [rewrite]: #1236
#1233 := (iff #207 #1232)
#1230 := (iff #206 #1227)
#1224 := (or #1199 #1091)
#1228 := (iff #1224 #1227)
#1229 := [rewrite]: #1228
#1225 := (iff #206 #1224)
#1092 := (iff #177 #1091)
#1093 := [rewrite]: #1092
#1226 := [monotonicity #1202 #1093]: #1225
#1231 := [trans #1226 #1229]: #1230
#1222 := (iff #205 #1221)
#1223 := [rewrite]: #1222
#1234 := [monotonicity #1223 #1231]: #1233
#1239 := [trans #1234 #1237]: #1238
#1220 := [asserted]: #207
#1240 := [mp #1220 #1239]: #1235
#3183 := [unit-resolution #1240 #3182 #3180]: #1221
#2682 := (not #1221)
#2742 := (or #2498 #2682)
#184 := (= f56 f1)
#381 := (not #184)
#405 := (not #205)
#412 := (or #405 #381)
#2745 := (iff #412 #2742)
#2738 := (or #2682 #2498)
#2743 := (iff #2738 #2742)
#2744 := [rewrite]: #2743
#2740 := (iff #412 #2738)
#2499 := (iff #381 #2498)
#1119 := (iff #184 #1118)
#1120 := [rewrite]: #1119
#2500 := [monotonicity #1120]: #2499
#2684 := (iff #405 #2682)
#2685 := [monotonicity #1223]: #2684
#2741 := [monotonicity #2685 #2500]: #2740
#2746 := [trans #2741 #2744]: #2745
#2737 := [asserted]: #412
#2749 := [mp #2737 #2746]: #2742
#3184 := [unit-resolution #2749 #3183]: #2498
decl f55 :: S1
#181 := f55
#1115 := (= f1 f55)
#2494 := (not #1115)
#2590 := (or #2494 #2559)
#182 := (= f55 f1)
#380 := (not #182)
#393 := (or #389 #380)
#2593 := (iff #393 #2590)
#2586 := (or #2559 #2494)
#2591 := (iff #2586 #2590)
#2592 := [rewrite]: #2591
#2588 := (iff #393 #2586)
#2496 := (iff #380 #2494)
#1116 := (iff #182 #1115)
#1117 := [rewrite]: #1116
#2497 := [monotonicity #1117]: #2496
#2589 := [monotonicity #2561 #2497]: #2588
#2594 := [trans #2589 #2592]: #2593
#2585 := [asserted]: #393
#2597 := [mp #2585 #2594]: #2590
#3185 := [unit-resolution #2597 #3175]: #2494
decl f53 :: S1
#174 := f53
#1088 := (= f1 f53)
#2433 := (not #1088)
#2933 := (or #1509 #1115 #1118 #989 #992 #863)
#2957 := [hypothesis]: #629
#2958 := [unit-resolution #1592 #2957]: #1570
#2959 := (or #1943 #656 #863)
#2991 := [hypothesis]: #1570
#2970 := [hypothesis]: #839
#2967 := [unit-resolution #1991 #2970]: #1635
#2968 := [unit-resolution #1951 #2970]: #1939
#2965 := [unit-resolution #882 #2968 #3173]: #710
#2966 := [unit-resolution #1706 #2965]: #1631
#2963 := [unit-resolution #708 #2966 #2967 #2991]: #544
#2964 := [unit-resolution #1716 #2965]: #1404
#2961 := [unit-resolution #578 #2964]: #541
#2962 := [unit-resolution #1385 #2961 #2963]: false
#2960 := [lemma #2962]: #2959
#2955 := [unit-resolution #2960 #2958 #3173]: #1943
#2956 := [unit-resolution #1014 #2955 #3072 #3071]: #962
#2953 := [unit-resolution #2208 #2956]: #2125
#2954 := [unit-resolution #1632 #2957]: #1346
#2972 := (or #1342 #656 #863)
#2979 := [hypothesis]: #517
#2980 := [unit-resolution #1395 #2979]: #1373
#2977 := [unit-resolution #578 #2980]: #565
#2978 := [unit-resolution #1716 #2977]: #1692
#2975 := [unit-resolution #882 #2978 #3173]: #836
#2976 := [unit-resolution #1405 #2979]: #1377
#2973 := [unit-resolution #1726 #2977]: #1631
#2974 := [unit-resolution #708 #2973 #2976 #2991]: #686
#2971 := [unit-resolution #1971 #2974 #2975]: false
#2969 := [lemma #2971]: #2972
#2951 := [unit-resolution #2969 #2958 #3173]: #1342
#2952 := [unit-resolution #539 #2951 #2954]: #493
#2949 := [unit-resolution #1333 #2952]: #1281
#2950 := [unit-resolution #2789 #2949]: #472
#2947 := [unit-resolution #1500 #2950]: #1452
#2948 := [unit-resolution #1510 #2950]: #1417
#2945 := [unit-resolution #2808 #2948]: #581
#2946 := [unit-resolution #1747 #2945]: #1725
#2981 := (or #1878 #656 #863)
#2992 := [hypothesis]: #809
#2989 := [unit-resolution #2001 #2992]: #1635
#2990 := [unit-resolution #1961 #2992]: #1939
#2987 := [unit-resolution #882 #2990 #3173]: #710
#2988 := [unit-resolution #1706 #2987]: #1631
#2985 := [unit-resolution #708 #2988 #2989 #2991]: #544
#2986 := [unit-resolution #1716 #2987]: #1404
#2983 := [unit-resolution #578 #2986]: #541
#2984 := [unit-resolution #1385 #2983 #2985]: false
#2982 := [lemma #2984]: #2981
#2943 := [unit-resolution #2982 #2958 #3173]: #1878
#2944 := [unit-resolution #1612 #2957]: #1574
#2941 := [unit-resolution #2218 #2956]: #1882
#2942 := [unit-resolution #834 #2941 #2944 #2943]: #782
#2939 := [hypothesis]: #2498
#2940 := [hypothesis]: #2494
#2193 := (or #2186 #2190)
#146 := (= f45 f1)
#340 := (not #146)
#341 := (or #339 #340)
#2194 := (iff #341 #2193)
#2191 := (iff #340 #2190)
#966 := (iff #146 #965)
#967 := [rewrite]: #966
#2192 := [monotonicity #967]: #2191
#2195 := [monotonicity #2189 #2192]: #2194
#2185 := [asserted]: #341
#2198 := [mp #2185 #2195]: #2193
#2937 := [unit-resolution #2198 #2956]: #2190
#1135 := (or #965 #1088 #1115 #1118)
#175 := (= f53 f1)
#185 := (or #175 #146)
#186 := (or #184 #185)
#187 := (or #182 #186)
#1138 := (iff #187 #1135)
#1124 := (or #965 #1088)
#1129 := (or #1118 #1124)
#1132 := (or #1115 #1129)
#1136 := (iff #1132 #1135)
#1137 := [rewrite]: #1136
#1133 := (iff #187 #1132)
#1130 := (iff #186 #1129)
#1127 := (iff #185 #1124)
#1121 := (or #1088 #965)
#1125 := (iff #1121 #1124)
#1126 := [rewrite]: #1125
#1122 := (iff #185 #1121)
#1089 := (iff #175 #1088)
#1090 := [rewrite]: #1089
#1123 := [monotonicity #1090 #967]: #1122
#1128 := [trans #1123 #1126]: #1127
#1131 := [monotonicity #1120 #1128]: #1130
#1134 := [monotonicity #1117 #1131]: #1133
#1139 := [trans #1134 #1137]: #1138
#1114 := [asserted]: #187
#1140 := [mp #1114 #1139]: #1135
#2938 := [unit-resolution #1140 #2937 #2940 #2939]: #1088
#2458 := (or #2129 #2433)
#372 := (not #175)
#376 := (or #372 #332)
#2461 := (iff #376 #2458)
#2454 := (or #2433 #2129)
#2459 := (iff #2454 #2458)
#2460 := [rewrite]: #2459
#2456 := (iff #376 #2454)
#2435 := (iff #372 #2433)
#2436 := [monotonicity #1090]: #2435
#2457 := [monotonicity #2436 #2131]: #2456
#2462 := [trans #2457 #2460]: #2461
#2453 := [asserted]: #376
#2465 := [mp #2453 #2462]: #2458
#2935 := [unit-resolution #2465 #2938]: #2129
#2936 := [unit-resolution #3106 #2935 #2942 #2946 #2947 #2953]: false
#2934 := [lemma #2936]: #2933
#3186 := [unit-resolution #2934 #3185 #3184 #3179 #3176 #3181]: #1509
#2773 := (or #2433 #989 #992 #863 #629)
#2813 := [hypothesis]: #1088
#2448 := (or #2372 #2433)
#375 := (or #372 #364)
#2451 := (iff #375 #2448)
#2444 := (or #2433 #2372)
#2449 := (iff #2444 #2448)
#2450 := [rewrite]: #2449
#2446 := (iff #375 #2444)
#2447 := [monotonicity #2436 #2375]: #2446
#2452 := [trans #2447 #2450]: #2451
#2443 := [asserted]: #375
#2455 := [mp #2443 #2452]: #2448
#2814 := [unit-resolution #2455 #2813]: #2372
#2811 := [unit-resolution #2465 #2813]: #2129
#2822 := (or #1421 #863 #989 #992 #938 #629 #1061)
#2901 := [hypothesis]: #2372
#2839 := [hypothesis]: #581
#2840 := [unit-resolution #1757 #2839]: #1729
#2854 := (or #2064 #1061 #734)
#2869 := [hypothesis]: #908
#2071 := (or #2064 #2068)
#325 := (or #323 #324)
#2072 := (iff #325 #2071)
#2073 := [monotonicity #2067 #2070]: #2072
#2063 := [asserted]: #325
#2076 := [mp #2063 #2073]: #2071
#2870 := [unit-resolution #2076 #2869]: #2068
#2867 := [unit-resolution #2086 #2869]: #2033
#2868 := [unit-resolution #906 #2867 #2887]: #887
#2356 := (or #2037 #2341)
#362 := (or #359 #319)
#2359 := (iff #362 #2356)
#2352 := (or #2341 #2037)
#2357 := (iff #2352 #2356)
#2358 := [rewrite]: #2357
#2354 := (iff #362 #2352)
#2355 := [monotonicity #2344 #2039]: #2354
#2360 := [trans #2355 #2358]: #2359
#2351 := [asserted]: #362
#2363 := [mp #2351 #2360]: #2356
#2865 := [unit-resolution #2363 #2868]: #2341
#2866 := [unit-resolution #1086 #2865 #2901 #2870]: #1064
#2863 := [unit-resolution #2373 #2868]: #2345
#2864 := [unit-resolution #1200 #2863]: #1187
#2676 := (or #2376 #2636)
#404 := (or #399 #365)
#2679 := (iff #404 #2676)
#2672 := (or #2636 #2376)
#2677 := (iff #2672 #2676)
#2678 := [rewrite]: #2677
#2674 := (iff #404 #2672)
#2675 := [monotonicity #2639 #2378]: #2674
#2680 := [trans #2675 #2678]: #2679
#2671 := [asserted]: #404
#2683 := [mp #2671 #2680]: #2676
#2853 := [unit-resolution #2683 #2864 #2866]: false
#2851 := [lemma #2853]: #2854
#2837 := [unit-resolution #2851 #2840 #2901]: #2064
#2838 := [unit-resolution #1747 #2839]: #1725
#2871 := (or #1760 #1061 #734)
#2889 := [hypothesis]: #758
#2890 := [unit-resolution #2116 #2889]: #2068
#2888 := [unit-resolution #2126 #2889]: #2033
#2885 := [unit-resolution #906 #2888 #2887]: #887
#2886 := [unit-resolution #2363 #2885]: #2341
#2883 := [unit-resolution #1086 #2886 #2901 #2890]: #1064
#2884 := [unit-resolution #2373 #2885]: #2345
#2881 := [unit-resolution #1200 #2884]: #1187
#2882 := [unit-resolution #2683 #2881 #2883]: false
#2872 := [lemma #2882]: #2871
#2835 := [unit-resolution #2872 #2840 #2901]: #1760
#2841 := (or #605 #938 #908 #989 #992 #758 #731 #629 #863)
#2852 := [hypothesis]: #2064
#2849 := [hypothesis]: #1760
#2850 := [unit-resolution #780 #3112 #2849 #3109]: #755
#2847 := [unit-resolution #1859 #2850]: #1821
#2911 := (or #656 #605 #731 #938 #629 #989 #992 #863)
#2931 := [unit-resolution #2960 #2991 #3173]: #1943
#2932 := [unit-resolution #1014 #2931 #3072 #3071]: #962
#2929 := [unit-resolution #2208 #2932]: #2125
#2930 := [unit-resolution #2969 #2991 #3173]: #1342
#2927 := [unit-resolution #2982 #2991 #3173]: #1878
#2928 := [unit-resolution #2218 #2932]: #1882
#2925 := [unit-resolution #3106 #2929 #3116 #3109 #3112]: #1817
#2926 := [unit-resolution #834 #2925 #2928 #2927]: #659
#2923 := [unit-resolution #1622 #2926]: #1346
#2924 := [unit-resolution #539 #2923 #2930]: #493
#2921 := [unit-resolution #1323 #2924]: #1315
#2922 := [unit-resolution #1333 #2924]: #1281
#2919 := [unit-resolution #2789 #2922]: #472
#2920 := [unit-resolution #1480 #2919]: #1448
#2917 := [unit-resolution #654 #2920 #3081 #2921]: #632
#2918 := [unit-resolution #1869 #2917]: #1821
#2915 := [unit-resolution #960 #2918 #3116 #2929]: #908
#2916 := [unit-resolution #1879 #2917]: #1756
#2913 := [unit-resolution #780 #2916 #3112 #3109]: #758
#2914 := [unit-resolution #2096 #2913 #2915]: false
#2912 := [lemma #2914]: #2911
#2848 := [unit-resolution #2912 #3112 #3109 #3116 #3081 #3072 #3071 #3173]: #656
#1577 := (or #1570 #1574)
#259 := (or #257 #258)
#1578 := (iff #259 #1577)
#1579 := [monotonicity #1573 #1576]: #1578
#1569 := [asserted]: #259
#1582 := [mp #1569 #1579]: #1577
#2845 := [unit-resolution #1582 #2848]: #1574
#2846 := [unit-resolution #1839 #2850]: #1817
#2993 := (or #2125 #659 #782 #989 #992)
#3001 := [hypothesis]: #935
#3002 := [unit-resolution #2208 #3001]: #2186
#2999 := [unit-resolution #1014 #3002 #3072 #3071]: #839
#2997 := [hypothesis]: #1574
#2241 := (or #1882 #2125)
#346 := (or #331 #299)
#2244 := (iff #346 #2241)
#2237 := (or #2125 #1882)
#2242 := (iff #2237 #2241)
#2243 := [rewrite]: #2242
#2239 := (iff #346 #2237)
#2240 := [monotonicity #2128 #1884]: #2239
#2245 := [trans #2240 #2243]: #2244
#2236 := [asserted]: #346
#2248 := [mp #2236 #2245]: #2241
#2998 := [unit-resolution #2248 #3001]: #1882
#2995 := [unit-resolution #834 #2998 #2997 #3000]: #809
#1974 := (or #1878 #1943)
#311 := (or #307 #298)
#1977 := (iff #311 #1974)
#1970 := (or #1943 #1878)
#1975 := (iff #1970 #1974)
#1976 := [rewrite]: #1975
#1972 := (iff #311 #1970)
#1973 := [monotonicity #1945 #1881]: #1972
#1978 := [trans #1973 #1976]: #1977
#1969 := [asserted]: #311
#1981 := [mp #1969 #1978]: #1974
#2996 := [unit-resolution #1981 #2995 #2999]: false
#2994 := [lemma #2996]: #2993
#2843 := [unit-resolution #2994 #2846 #2845 #3072 #3071]: #2125
#2844 := [unit-resolution #960 #2843 #2847 #3116 #2852]: false
#2842 := [lemma #2844]: #2841
#2836 := [unit-resolution #2842 #2837 #3116 #3072 #3071 #2835 #2838 #3081 #3173]: #605
#2833 := [unit-resolution #1460 #2836]: #1448
#2834 := [unit-resolution #1500 #2836]: #1284
#2831 := [unit-resolution #2789 #2834]: #468
#2832 := [unit-resolution #1343 #2831]: #1315
#2829 := [unit-resolution #654 #2832 #3081 #2833]: #632
#2830 := [unit-resolution #1869 #2829]: #1821
#2827 := [unit-resolution #960 #2830 #3116 #2837]: #935
#2828 := [unit-resolution #2208 #2827]: #2186
#2825 := [unit-resolution #1014 #2828 #3072 #3071]: #839
#1842 := (or #1513 #1817)
#294 := (or #290 #250)
#1845 := (iff #294 #1842)
#1838 := (or #1817 #1513)
#1843 := (iff #1838 #1842)
#1844 := [rewrite]: #1843
#1840 := (iff #294 #1838)
#1841 := [monotonicity #1820 #1515]: #1840
#1846 := [trans #1841 #1844]: #1845
#1837 := [asserted]: #294
#1849 := [mp #1837 #1846]: #1842
#2826 := [unit-resolution #1849 #2829]: #1817
#2823 := [unit-resolution #2994 #2827 #2826 #3072 #3071]: #659
#2824 := [unit-resolution #1582 #2823]: #1570
#2821 := [unit-resolution #2960 #2824 #2825 #3173]: false
#2819 := [lemma #2821]: #2822
#2812 := [unit-resolution #2819 #2811 #3072 #3071 #3173 #3081 #2814]: #1421
#2809 := [unit-resolution #2808 #2812]: #577
#2810 := [unit-resolution #3074 #2809 #3081]: #632
#2798 := [unit-resolution #1869 #2810]: #1821
#2799 := [unit-resolution #1849 #2810]: #1817
#2815 := (or #2125 #863 #989 #992 #782)
#2820 := [unit-resolution #2994 #3001 #3000 #3072 #3071]: #659
#2817 := [unit-resolution #1582 #2820]: #1570
#2818 := [unit-resolution #2960 #2817 #2999 #3173]: false
#2816 := [lemma #2818]: #2815
#2796 := [unit-resolution #2816 #2799 #3072 #3071 #3173]: #2125
#2797 := [unit-resolution #960 #2796 #2811 #2798]: #908
#2794 := [unit-resolution #2851 #2797 #2814]: #734
#2795 := [unit-resolution #1879 #2810]: #1756
#2792 := [unit-resolution #1490 #2809]: #1452
#2793 := [unit-resolution #2096 #2797]: #1760
#2790 := [unit-resolution #780 #2793 #2792 #2795]: #731
#2791 := [unit-resolution #1737 #2790 #2794]: false
#2771 := [lemma #2791]: #2773
#3187 := [unit-resolution #2771 #3179 #3176 #3181 #3186]: #2433
#3188 := [unit-resolution #1140 #3187 #3185 #3184]: #965
#3189 := [unit-resolution #2198 #3188]: #2186
#3190 := [unit-resolution #1014 #3189 #3179 #3176]: #839
#3191 := [unit-resolution #1981 #3190]: #1878
#2231 := (or #1882 #2190)
#345 := (or #340 #299)
#2234 := (iff #345 #2231)
#2227 := (or #2190 #1882)
#2232 := (iff #2227 #2231)
#2233 := [rewrite]: #2232
#2229 := (iff #345 #2227)
#2230 := [monotonicity #2192 #1884]: #2229
#2235 := [trans #2230 #2233]: #2234
#2226 := [asserted]: #345
#2238 := [mp #2226 #2235]: #2231
#3192 := [unit-resolution #2238 #3188]: #1882
#3193 := [unit-resolution #2960 #3190 #3181]: #656
#3194 := [unit-resolution #1582 #3193]: #1574
#3195 := [unit-resolution #834 #3194 #3192 #3191]: #782
#3196 := [unit-resolution #1849 #3195]: #1513
#3197 := [unit-resolution #1602 #3193]: #1346
#3198 := [unit-resolution #1951 #3190]: #1939
#3199 := [unit-resolution #882 #3198 #3181]: #710
#3200 := [unit-resolution #1716 #3199]: #1404
#3201 := [unit-resolution #578 #3200]: #541
#3202 := [unit-resolution #1395 #3201]: #1342
#3203 := [unit-resolution #539 #3202 #3197]: #493
#3204 := [unit-resolution #1323 #3203]: #1315
#3205 := [unit-resolution #654 #3204 #3186 #3196]: #602
#3206 := [unit-resolution #1333 #3203]: #1281
#3207 := [unit-resolution #2789 #3206]: #472
#3208 := [unit-resolution #1480 #3207 #3205]: false
#3210 := [lemma #3208]: #3209
#3385 := [unit-resolution #3210 #3180]: #2559
#1266 := (or #1145 #1242)
decl f5 :: S1
#14 := f5
#452 := (= f1 f5)
#1274 := (or #452 #1145 #1242)
#2878 := (iff #1274 #1266)
#2873 := (or false #1145 #1242)
#2876 := (iff #2873 #1266)
#2877 := [rewrite]: #2876
#2874 := (iff #1274 #2873)
#2777 := (iff #452 false)
#456 := (not #452)
#15 := (= f5 f1)
#16 := (not #15)
#457 := (iff #16 #456)
#454 := (iff #15 #452)
#455 := [rewrite]: #454
#458 := [monotonicity #455]: #457
#451 := [asserted]: #16
#461 := [mp #451 #458]: #456
#2778 := [iff-false #461]: #2777
#2875 := [monotonicity #2778]: #2874
#2879 := [trans #2875 #2877]: #2878
#209 := (= f62 f1)
#212 := (or #209 #191)
#213 := (or #15 #212)
#1277 := (iff #213 #1274)
#1271 := (or #452 #1266)
#1275 := (iff #1271 #1274)
#1276 := [rewrite]: #1275
#1272 := (iff #213 #1271)
#1269 := (iff #212 #1266)
#1263 := (or #1242 #1145)
#1267 := (iff #1263 #1266)
#1268 := [rewrite]: #1267
#1264 := (iff #212 #1263)
#1243 := (iff #209 #1242)
#1244 := [rewrite]: #1243
#1265 := [monotonicity #1244 #1147]: #1264
#1270 := [trans #1265 #1268]: #1269
#1273 := [monotonicity #455 #1270]: #1272
#1278 := [trans #1273 #1276]: #1277
#1262 := [asserted]: #213
#1279 := [mp #1262 #1278]: #1274
#2880 := [mp #1279 #2879]: #1266
#3386 := [unit-resolution #2880 #3385]: #1242
#2715 := (not #1242)
#2732 := (or #2498 #2715)
#409 := (not #209)
#411 := (or #409 #381)
#2735 := (iff #411 #2732)
#2728 := (or #2715 #2498)
#2733 := (iff #2728 #2732)
#2734 := [rewrite]: #2733
#2730 := (iff #411 #2728)
#2717 := (iff #409 #2715)
#2718 := [monotonicity #1244]: #2717
#2731 := [monotonicity #2718 #2500]: #2730
#2736 := [trans #2731 #2734]: #2735
#2727 := [asserted]: #411
#2739 := [mp #2727 #2736]: #2732
#3387 := [unit-resolution #2739 #3386]: #2498
#2722 := (or #2682 #2715)
#410 := (or #409 #405)
#2725 := (iff #410 #2722)
#2719 := (or #2715 #2682)
#2723 := (iff #2719 #2722)
#2724 := [rewrite]: #2723
#2720 := (iff #410 #2719)
#2721 := [monotonicity #2718 #2685]: #2720
#2726 := [trans #2721 #2724]: #2725
#2714 := [asserted]: #410
#2729 := [mp #2714 #2726]: #2722
#3388 := [unit-resolution #2729 #3386]: #2682
#3389 := [unit-resolution #1240 #3388 #3180]: #1199
#3259 := (or #863 #1118 #2649)
#3244 := [unit-resolution #3143 #3173 #3039]: #2068
#3245 := [unit-resolution #1086 #3244 #3037 #3040]: #1061
#3246 := [unit-resolution #2455 #3245]: #2433
#3242 := (or #2494 #2649 #863)
#3236 := [hypothesis]: #1115
#2570 := (or #2494 #2555)
#391 := (or #388 #380)
#2573 := (iff #391 #2570)
#2566 := (or #2555 #2494)
#2571 := (iff #2566 #2570)
#2572 := [rewrite]: #2571
#2568 := (iff #391 #2566)
#2569 := [monotonicity #2558 #2497]: #2568
#2574 := [trans #2569 #2572]: #2573
#2565 := [asserted]: #391
#2577 := [mp #2565 #2574]: #2570
#3237 := [unit-resolution #2577 #3236]: #2555
#3238 := [unit-resolution #2862 #3237]: #1016
#2610 := (or #2251 #2494)
#395 := (or #380 #348)
#2613 := (iff #395 #2610)
#2606 := (or #2494 #2251)
#2611 := (iff #2606 #2610)
#2612 := [rewrite]: #2611
#2608 := (iff #395 #2606)
#2609 := [monotonicity #2497 #2253]: #2608
#2614 := [trans #2609 #2612]: #2613
#2605 := [asserted]: #395
#2617 := [mp #2605 #2614]: #2610
#3239 := [unit-resolution #2617 #3236]: #2251
#3240 := [unit-resolution #3004 #3239 #3044 #3173]: #989
#3241 := [unit-resolution #2322 #3240 #3238]: false
#3243 := [lemma #3241]: #3242
#3247 := [unit-resolution #3243 #3173 #3044]: #2494
#3248 := [unit-resolution #1140 #3247 #3246 #2939]: #965
#3249 := [unit-resolution #2238 #3248]: #1882
#3212 := (or #1878 #887 #863)
#3211 := [unit-resolution #3118 #2987 #2989 #3174]: false
#3213 := [lemma #3211]: #3212
#3250 := [unit-resolution #3213 #3173 #3039]: #1878
#3251 := [unit-resolution #2495 #3245]: #2129
#2221 := (or #2125 #2190)
#344 := (or #340 #331)
#2224 := (iff #344 #2221)
#2217 := (or #2190 #2125)
#2222 := (iff #2217 #2221)
#2223 := [rewrite]: #2222
#2219 := (iff #344 #2217)
#2220 := [monotonicity #2192 #2128]: #2219
#2225 := [trans #2220 #2223]: #2224
#2216 := [asserted]: #344
#2228 := [mp #2216 #2225]: #2221
#3252 := [unit-resolution #2228 #3248]: #2125
#3253 := [unit-resolution #3084 #3252 #3251 #3250 #3249]: #1729
#3254 := [unit-resolution #906 #3253 #3039]: #884
#3234 := (or #2190 #938 #863 #887 #782)
#3214 := [hypothesis]: #965
#3215 := [unit-resolution #2228 #3214]: #2125
#3216 := [unit-resolution #2238 #3214]: #1882
#3217 := [unit-resolution #3213 #3173 #3174]: #1878
#3218 := [unit-resolution #3084 #3215 #3116 #3217 #3216]: #1729
#3219 := [unit-resolution #906 #3218 #3174]: #884
#3220 := [unit-resolution #2086 #3219]: #2064
#3221 := [unit-resolution #960 #3220 #3116 #3215]: #785
#3222 := [unit-resolution #1869 #3221]: #1513
#3223 := [unit-resolution #834 #3216 #3217 #3000]: #659
#3224 := [unit-resolution #1612 #3223]: #1509
#3225 := [unit-resolution #1622 #3223]: #1346
#3226 := [unit-resolution #1582 #3223]: #1570
#3227 := [unit-resolution #2969 #3226 #3173]: #1342
#3228 := [unit-resolution #539 #3227 #3225]: #493
#3229 := [unit-resolution #1323 #3228]: #1315
#3230 := [unit-resolution #654 #3229 #3224 #3222]: #602
#3231 := [unit-resolution #1333 #3228]: #1281
#3232 := [unit-resolution #2789 #3231]: #472
#3233 := [unit-resolution #1480 #3232 #3230]: false
#3235 := [lemma #3233]: #3234
#3255 := [unit-resolution #3235 #3248 #3173 #3039 #3251]: #782
#3256 := [unit-resolution #1829 #3255]: #1821
#3257 := [unit-resolution #960 #3256 #3251 #3252]: #908
#3258 := [unit-resolution #2086 #3257 #3254]: false
#3260 := [lemma #3258]: #3259
#3390 := [unit-resolution #3260 #3387 #3389]: #863
#3391 := [unit-resolution #2332 #3390]: #2308
#3392 := [unit-resolution #2862 #3391]: #1142
#3393 := [unit-resolution #2577 #3392]: #2494
#3394 := [unit-resolution #2673 #3389]: #2376
#3395 := [unit-resolution #2663 #3389]: #2636
#3396 := [unit-resolution #1200 #3395]: #1040
#3397 := [unit-resolution #2353 #3396]: #2341
#3398 := [unit-resolution #2373 #3396]: #2037
#2580 := (or #2251 #2555)
#392 := (or #388 #348)
#2583 := (iff #392 #2580)
#2576 := (or #2555 #2251)
#2581 := (iff #2576 #2580)
#2582 := [rewrite]: #2581
#2578 := (iff #392 #2576)
#2579 := [monotonicity #2558 #2253]: #2578
#2584 := [trans #2579 #2582]: #2583
#2575 := [asserted]: #392
#2587 := [mp #2575 #2584]: #2580
#3399 := [unit-resolution #2587 #3392]: #2251
#2335 := (or #2000 #2247)
#358 := (or #347 #314)
#2338 := (iff #358 #2335)
#2331 := (or #2247 #2000)
#2336 := (iff #2331 #2335)
#2337 := [rewrite]: #2336
#2333 := (iff #358 #2331)
#2334 := [monotonicity #2250 #2003]: #2333
#2339 := [trans #2334 #2337]: #2338
#2330 := [asserted]: #358
#2342 := [mp #2330 #2339]: #2335
#3400 := [unit-resolution #2342 #3390]: #2247
#3371 := (or #782 #887 #1037 #1064 #1115 #1118 #989 #992)
#3278 := [hypothesis]: #2376
#3279 := [hypothesis]: #2341
#3352 := (or #935 #989 #992 #1115 #1118 #887 #1037 #1064 #782)
#3337 := (or #908 #887 #935 #1037 #1064 #1115 #1118 #989 #992 #782)
#3317 := (or #809 #887 #782 #1037 #1064 #1115 #1118 #908 #935)
#3296 := (or #1821 #887 #1037 #1064 #1115 #1118 #782 #809)
#3276 := [hypothesis]: #785
#3277 := [unit-resolution #1859 #3276]: #1756
#3280 := [unit-resolution #1869 #3276]: #1513
#3274 := (or #629 #632 #755 #887)
#3261 := [hypothesis]: #1756
#3262 := [unit-resolution #3074 #3081 #3082]: #1417
#3263 := [unit-resolution #2808 #3262]: #581
#3264 := [unit-resolution #1747 #3263]: #1725
#3265 := [unit-resolution #1757 #3263]: #1729
#3266 := [unit-resolution #906 #3265 #3174]: #884
#3267 := [unit-resolution #2126 #3266]: #1760
#3268 := [unit-resolution #780 #3267 #3264 #3261]: #605
#3269 := [unit-resolution #1460 #3268]: #1448
#3270 := [unit-resolution #654 #3269 #3081 #3082]: #496
#3271 := [unit-resolution #1500 #3268]: #1284
#3272 := [unit-resolution #2789 #3271]: #468
#3273 := [unit-resolution #1343 #3272 #3270]: false
#3275 := [lemma #3273]: #3274
#3281 := [unit-resolution #3275 #3280 #3277 #3174]: #629
#3282 := [unit-resolution #1612 #3281]: #1574
#3283 := [unit-resolution #834 #3282 #3000 #3095]: #812
#3284 := [unit-resolution #2238 #3283]: #2190
#3285 := [unit-resolution #1140 #3284 #2940 #2939]: #1088
#3286 := [unit-resolution #2455 #3285]: #2372
#3287 := [unit-resolution #1086 #3286 #3279 #3278]: #911
#3288 := [unit-resolution #2116 #3287]: #1760
#3289 := [unit-resolution #2106 #3287]: #2033
#3290 := [unit-resolution #906 #3289 #3174]: #734
#3291 := [unit-resolution #1737 #3290]: #1725
#3292 := [unit-resolution #780 #3291 #3288 #3277]: #605
#3293 := [unit-resolution #1757 #3290]: #1421
#3294 := [unit-resolution #2808 #3293]: #577
#3295 := [unit-resolution #1490 #3294 #3292]: false
#3297 := [lemma #3295]: #3296
#3298 := [unit-resolution #3297 #3095 #3279 #3278 #2940 #2939 #3000 #3174]: #1821
#3299 := [unit-resolution #960 #3298 #2852 #3115]: #938
#3300 := [unit-resolution #2465 #3299]: #2433
#3301 := [unit-resolution #1140 #3300 #2940 #2939]: #965
#3302 := [unit-resolution #2238 #3301]: #1882
#3303 := [unit-resolution #834 #3302 #3000 #3095]: #659
#3304 := [unit-resolution #1612 #3303]: #1509
#3305 := [unit-resolution #2495 #3299]: #2372
#3306 := [unit-resolution #1086 #3305 #3279 #3278]: #911
#3307 := [unit-resolution #2106 #3306]: #2033
#3308 := [unit-resolution #906 #3307 #3174]: #734
#3309 := [unit-resolution #1757 #3308]: #1421
#3310 := [unit-resolution #2808 #3309]: #577
#3311 := [unit-resolution #3074 #3310 #3304]: #632
#3312 := [unit-resolution #1737 #3308]: #1725
#3313 := [unit-resolution #2116 #3306]: #1760
#3314 := [unit-resolution #1490 #3310]: #1452
#3315 := [unit-resolution #780 #3314 #3313 #3312]: #755
#3316 := [unit-resolution #1879 #3315 #3311]: false
#3318 := [lemma #3316]: #3317
#3319 := [unit-resolution #3318 #2852 #3000 #3279 #3278 #2940 #2939 #3174 #3115]: #809
#3320 := [unit-resolution #1981 #3319]: #1943
#3321 := [unit-resolution #1014 #3320 #3072 #3071]: #962
#3322 := [unit-resolution #2198 #3321]: #2190
#3323 := [unit-resolution #1140 #3322 #2940 #2939]: #1088
#3324 := [unit-resolution #2465 #3323]: #2129
#3325 := [unit-resolution #960 #3324 #2852 #3115]: #785
#3326 := [unit-resolution #1859 #3325]: #1756
#3327 := [unit-resolution #2455 #3323]: #2372
#3328 := [unit-resolution #1086 #3327 #3279 #3278]: #911
#3329 := [unit-resolution #2116 #3328]: #1760
#3330 := [unit-resolution #2106 #3328]: #2033
#3331 := [unit-resolution #906 #3330 #3174]: #734
#3332 := [unit-resolution #1737 #3331]: #1725
#3333 := [unit-resolution #780 #3332 #3329 #3326]: #605
#3334 := [unit-resolution #1757 #3331]: #1421
#3335 := [unit-resolution #2808 #3334]: #577
#3336 := [unit-resolution #1490 #3335 #3333]: false
#3338 := [lemma #3336]: #3337
#3339 := [unit-resolution #3338 #3115 #3174 #3279 #3278 #2940 #2939 #3072 #3071 #3000]: #908
#3340 := [unit-resolution #2076 #3339]: #2068
#3341 := [unit-resolution #1086 #3340 #3279 #3278]: #1061
#3342 := [unit-resolution #2455 #3341]: #2433
#3343 := [unit-resolution #1140 #3342 #2940 #2939]: #965
#3344 := [unit-resolution #2198 #3343]: #2186
#3345 := [unit-resolution #1014 #3344 #3072 #3071]: #839
#3346 := [unit-resolution #2086 #3339]: #2033
#3347 := [unit-resolution #906 #3346 #3174]: #734
#2160 := (or #2064 #2129)
#336 := (or #332 #323)
#2163 := (iff #336 #2160)
#2156 := (or #2129 #2064)
#2161 := (iff #2156 #2160)
#2162 := [rewrite]: #2161
#2158 := (iff #336 #2156)
#2159 := [monotonicity #2131 #2067]: #2158
#2164 := [trans #2159 #2162]: #2163
#2155 := [asserted]: #336
#2167 := [mp #2155 #2164]: #2160
#3348 := [unit-resolution #2167 #3339]: #2129
#3349 := [unit-resolution #2238 #3343]: #1882
#3350 := [unit-resolution #3084 #3349 #3115 #3348 #3347]: #809
#3351 := [unit-resolution #1981 #3350 #3345]: false
#3353 := [lemma #3351]: #3352
#3354 := [unit-resolution #3353 #3000 #3071 #2940 #2939 #3174 #3279 #3278 #3072]: #935
#3355 := [unit-resolution #2994 #3354 #3000 #3072 #3071]: #659
#3356 := [unit-resolution #1612 #3355]: #1509
#3357 := [unit-resolution #2228 #3354]: #2190
#3358 := [unit-resolution #1140 #3357 #2940 #2939]: #1088
#3359 := [unit-resolution #2455 #3358]: #2372
#3360 := [unit-resolution #1086 #3359 #3279 #3278]: #911
#3361 := [unit-resolution #2106 #3360]: #2033
#3362 := [unit-resolution #906 #3361 #3174]: #734
#3363 := [unit-resolution #1757 #3362]: #1421
#3364 := [unit-resolution #2808 #3363]: #577
#3365 := [unit-resolution #3074 #3364 #3356]: #632
#3366 := [unit-resolution #1737 #3362]: #1725
#3367 := [unit-resolution #2116 #3360]: #1760
#3368 := [unit-resolution #1490 #3364]: #1452
#3369 := [unit-resolution #780 #3368 #3367 #3366]: #755
#3370 := [unit-resolution #1879 #3369 #3365]: false
#3372 := [lemma #3370]: #3371
#3401 := [unit-resolution #3372 #3398 #3397 #3394 #3393 #3387 #3400 #3399]: #782
#3402 := [unit-resolution #1829 #3401]: #1821
#3383 := (or #2033 #785 #1115 #1118 #1037 #1064)
#3373 := [hypothesis]: #884
#3374 := [unit-resolution #2106 #3373]: #2068
#3375 := [unit-resolution #1086 #3374 #3279 #3278]: #1061
#3376 := [unit-resolution #2455 #3375]: #2433
#3377 := [unit-resolution #1140 #3376 #2940 #2939]: #965
#3378 := [unit-resolution #2086 #3373]: #2064
#3379 := [hypothesis]: #1821
#3380 := [unit-resolution #2495 #3375]: #2129
#3381 := [unit-resolution #960 #3380 #3379 #3378]: #935
#3382 := [unit-resolution #2228 #3381 #3377]: false
#3384 := [lemma #3382]: #3383
#3403 := [unit-resolution #3384 #3402 #3393 #3387 #3397 #3394]: #2033
#3404 := [unit-resolution #906 #3403 #3398]: #734
#3405 := [unit-resolution #1737 #3404]: #1725
#3406 := [unit-resolution #1839 #3401]: #1756
#3407 := [unit-resolution #1757 #3404]: #1421
#3408 := [unit-resolution #2808 #3407]: #577
#3409 := [unit-resolution #1490 #3408]: #1452
#3410 := [unit-resolution #780 #3409 #3406 #3405]: #758
#3411 := [unit-resolution #2116 #3410]: #2068
#3412 := [unit-resolution #1086 #3411 #3397 #3394]: #1061
#3413 := [unit-resolution #2455 #3412]: #2433
#3414 := [unit-resolution #1140 #3413 #3393 #3387]: #965
#3415 := [unit-resolution #2096 #3410]: #2064
#3416 := [unit-resolution #2495 #3412]: #2129
#3417 := [unit-resolution #960 #3416 #3402 #3415]: #935
#3418 := [unit-resolution #2228 #3417 #3414]: false
#3419 := [lemma #3418]: #1091
#2468 := (or #2372 #2437)
#373 := (not #177)
#377 := (or #373 #364)
#2471 := (iff #377 #2468)
#2464 := (or #2437 #2372)
#2469 := (iff #2464 #2468)
#2470 := [rewrite]: #2469
#2466 := (iff #377 #2464)
#2438 := (iff #373 #2437)
#2439 := [monotonicity #1093]: #2438
#2467 := [monotonicity #2439 #2375]: #2466
#2472 := [trans #2467 #2470]: #2471
#2463 := [asserted]: #377
#2475 := [mp #2463 #2472]: #2468
#3446 := [unit-resolution #2475 #3419]: #2372
#3448 := [unit-resolution #2851 #3446]: #3447
#3449 := [unit-resolution #3448 #2887]: #2064
#3451 := (or #785 #908 #935)
#2478 := (or #2129 #2437)
#378 := (or #373 #332)
#2481 := (iff #378 #2478)
#2474 := (or #2437 #2129)
#2479 := (iff #2474 #2478)
#2480 := [rewrite]: #2479
#2476 := (iff #378 #2474)
#2477 := [monotonicity #2439 #2131]: #2476
#2482 := [trans #2477 #2480]: #2481
#2473 := [asserted]: #378
#2485 := [mp #2473 #2482]: #2478
#3450 := [unit-resolution #2485 #3419]: #2129
#3452 := [unit-resolution #960 #3450]: #3451
#3453 := [unit-resolution #3452 #3449 #3115]: #785
#3454 := [unit-resolution #1859 #3453]: #1756
#3455 := (or #1760 #734)
#3456 := [unit-resolution #2872 #3446]: #3455
#3457 := [unit-resolution #3456 #2887]: #1760
#3439 := (or #1284 #758 #755)
#3433 := [hypothesis]: #472
#3434 := [unit-resolution #1500 #3433]: #1452
#3435 := [unit-resolution #780 #3434 #2849 #3261]: #731
#3436 := [unit-resolution #1510 #3433]: #1417
#3437 := [unit-resolution #2808 #3436]: #581
#3438 := [unit-resolution #1747 #3437 #3435]: false
#3440 := [lemma #3438]: #3439
#3458 := [unit-resolution #3440 #3457 #3454]: #1284
#3459 := [unit-resolution #2789 #3458]: #468
#3460 := [unit-resolution #1343 #3459]: #1315
#3461 := [unit-resolution #1869 #3453]: #1513
#3462 := [unit-resolution #1333 #3459]: #1311
#3444 := (or #1509 #493 #782)
#3441 := [hypothesis]: #1311
#3431 := (or #1342 #782 #659 #656)
#3420 := [unit-resolution #2969 #2979 #2991]: #863
#3421 := [unit-resolution #2332 #3420]: #2308
#3422 := [unit-resolution #2862 #3421]: #1142
#3423 := [unit-resolution #2587 #3422]: #2251
#3424 := [unit-resolution #2342 #3420]: #2247
#3425 := [unit-resolution #708 #2973 #2991 #2976]: #686
#3426 := [unit-resolution #1991 #3425]: #1943
#3427 := [unit-resolution #1014 #3426 #3424 #3423]: #962
#3428 := [unit-resolution #2001 #3425]: #1878
#3429 := [unit-resolution #834 #3428 #3000 #2997]: #812
#3430 := [unit-resolution #2218 #3429 #3427]: false
#3432 := [lemma #3430]: #3431
#3442 := [unit-resolution #3432 #2944 #3000 #2958]: #1342
#3443 := [unit-resolution #539 #3442 #2954 #3441]: false
#3445 := [lemma #3443]: #3444
#3463 := [unit-resolution #3445 #3462 #3000]: #1509
#3464 := [unit-resolution #654 #3463 #3461 #3460]: #602
#3465 := [unit-resolution #1460 #3464]: #1452
#3466 := [unit-resolution #3074 #3463 #3461]: #1417
#3467 := [unit-resolution #2808 #3466]: #581
#3468 := [unit-resolution #1747 #3467]: #1725
#3469 := [unit-resolution #780 #3468 #3465 #3457 #3454]: false
#3471 := [lemma #3469]: #3470
#3472 := [unit-resolution #3471 #3115 #3000]: #734
#3473 := [unit-resolution #1757 #3472]: #1421
#3474 := [unit-resolution #2808 #3473]: #577
#3475 := [unit-resolution #1510 #3474]: #1284
#3476 := [unit-resolution #2789 #3475]: #468
#3477 := [unit-resolution #1333 #3476]: #1311
#3478 := [unit-resolution #3445 #3477 #3000]: #1509
#3479 := [unit-resolution #3074 #3478 #3474]: #632
#3480 := [unit-resolution #1869 #3479]: #1821
#3481 := [unit-resolution #3452 #3480 #3115]: #908
#3482 := [unit-resolution #1490 #3474]: #1452
#3483 := [unit-resolution #1737 #3472]: #1725
#3484 := [unit-resolution #1879 #3479]: #1756
#3485 := [unit-resolution #780 #3484 #3483 #3482]: #758
#3486 := [unit-resolution #2096 #3485 #3481]: false
#3488 := [lemma #3486]: #3487
#3501 := [unit-resolution #3488 #3000]: #935
#3502 := [unit-resolution #2228 #3501]: #2190
#3499 := (or #2555 #965)
#3489 := [hypothesis]: #1142
#3490 := [unit-resolution #2567 #3489]: #2559
#3491 := [unit-resolution #2880 #3490]: #1242
#3492 := [hypothesis]: #2190
#3493 := [unit-resolution #2577 #3489]: #2494
#3495 := (or #965 #1115 #1118)
#2440 := (or #2433 #2437)
#374 := (or #372 #373)
#2441 := (iff #374 #2440)
#2442 := [monotonicity #2436 #2439]: #2441
#2432 := [asserted]: #374
#2445 := [mp #2432 #2442]: #2440
#3494 := [unit-resolution #2445 #3419]: #2433
#3496 := [unit-resolution #1140 #3494]: #3495
#3497 := [unit-resolution #3496 #3493 #3492]: #1118
#3498 := [unit-resolution #2739 #3497 #3491]: false
#3500 := [lemma #3498]: #3499
#3503 := [unit-resolution #3500 #3502]: #2555
#3504 := [unit-resolution #2862 #3503]: #1016
#3505 := [unit-resolution #2322 #3504]: #2247
#3506 := [unit-resolution #2332 #3504]: #2000
#3507 := [unit-resolution #2816 #3506 #3501 #3505 #3000]: #992
#3508 := [unit-resolution #2607 #3507]: #2559
#3509 := [unit-resolution #2880 #3508]: #1242
#3510 := [unit-resolution #2617 #3507]: #2494
#3511 := [unit-resolution #3496 #3510 #3502]: #1118
#3512 := [unit-resolution #2739 #3511 #3509]: false
#3513 := [lemma #3512]: #782
#3535 := [unit-resolution #1849 #3513]: #1513
#3531 := [unit-resolution #1839 #3513]: #1756
#3532 := [unit-resolution #3440 #2849 #3531]: #1284
#3533 := [unit-resolution #2789 #3532]: #468
#3534 := [unit-resolution #1343 #3533]: #1315
#3536 := [unit-resolution #1333 #3533]: #1311
#3529 := (or #1509 #493)
#3514 := [unit-resolution #1829 #3513]: #1821
#3515 := [unit-resolution #3452 #3115 #3514]: #908
#1893 := (or #1817 #1878)
#301 := (or #298 #290)
#1896 := (iff #301 #1893)
#1889 := (or #1878 #1817)
#1894 := (iff #1889 #1893)
#1895 := [rewrite]: #1894
#1891 := (iff #301 #1889)
#1892 := [monotonicity #1881 #1820]: #1891
#1897 := [trans #1892 #1895]: #1896
#1888 := [asserted]: #301
#1900 := [mp #1888 #1897]: #1893
#3516 := [unit-resolution #1900 #3513]: #1878
#1913 := (or #1817 #1882)
#303 := (or #299 #290)
#1916 := (iff #303 #1913)
#1909 := (or #1882 #1817)
#1914 := (iff #1909 #1913)
#1915 := [rewrite]: #1914
#1911 := (iff #303 #1909)
#1912 := [monotonicity #1884 #1820]: #1911
#1917 := [trans #1912 #1915]: #1916
#1908 := [asserted]: #303
#1920 := [mp #1908 #1917]: #1913
#3517 := [unit-resolution #1920 #3513]: #1882
#3518 := (or #1729 #935 #809 #812)
#3519 := [unit-resolution #3084 #3450]: #3518
#3520 := [unit-resolution #3519 #3115 #3517 #3516]: #1729
#3521 := [unit-resolution #3448 #3520 #3515]: false
#3522 := [lemma #3521]: #935
#3523 := [unit-resolution #2228 #3522]: #2190
#3524 := [unit-resolution #3500 #3523]: #2555
#3525 := [unit-resolution #2862 #3524]: #1016
#3526 := [unit-resolution #2332 #3525]: #2000
#3527 := [unit-resolution #2969 #2958 #3526]: #1342
#3528 := [unit-resolution #539 #3527 #2954 #3441]: false
#3530 := [lemma #3528]: #3529
#3537 := [unit-resolution #3530 #3536]: #1509
#3538 := [unit-resolution #654 #3537 #3535 #3534]: #602
#3539 := [unit-resolution #1460 #3538]: #1452
#3540 := [unit-resolution #3074 #3537 #3535]: #1417
#3541 := [unit-resolution #2808 #3540]: #581
#3542 := [unit-resolution #1747 #3541]: #1725
#3543 := [unit-resolution #780 #3542 #3539 #3531 #2849]: false
#3544 := [lemma #3543]: #758
#3545 := [unit-resolution #3456 #3544]: #734
#2058 := (or #1729 #2037)
#322 := (or #319 #278)
#2061 := (iff #322 #2058)
#2054 := (or #2037 #1729)
#2059 := (iff #2054 #2058)
#2060 := [rewrite]: #2059
#2056 := (iff #322 #2054)
#2057 := [monotonicity #2039 #1731]: #2056
#2062 := [trans #2057 #2060]: #2061
#2053 := [asserted]: #322
#2065 := [mp #2053 #2062]: #2058
#3546 := [unit-resolution #2065 #3545]: #2037
#3547 := [unit-resolution #3275 #3546 #3531 #3535]: #629
#3548 := [unit-resolution #3530 #3547]: #493
#3549 := [unit-resolution #1757 #3545]: #1421
#3550 := [unit-resolution #2808 #3549]: #577
#3551 := [unit-resolution #1510 #3550]: #1284
#3552 := [unit-resolution #2789 #3551]: #468
[unit-resolution #1333 #3552 #3548]: false
unsat
0020560a0c4fa3058b0174abbbe01bb65cb5b25a 95 0
#2 := false
decl f3 :: (-> Int S1)
decl ?v0!0 :: Int
#77 := ?v0!0
#78 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#79 := (= f1 #78)
#74 := (not #79)
decl ?v1!1 :: Int
#88 := ?v1!1
#89 := (f3 ?v1!1)
#90 := (= f1 #89)
#108 := (or #79 #90)
#111 := (not #108)
#114 := (and #79 #111)
#91 := (or #90 #79)
#92 := (not #91)
#85 := (not #74)
#98 := (and #85 #92)
#115 := (iff #98 #114)
#112 := (iff #92 #111)
#109 := (iff #91 #108)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#106 := (iff #85 #79)
#107 := [rewrite]: #106
#116 := [monotonicity #107 #113]: #115
#11 := (:var 1 Int)
#12 := (f3 #11)
#42 := (= f1 #12)
#8 := (:var 0 Int)
#9 := (f3 #8)
#39 := (= f1 #9)
#48 := (or #39 #42)
#53 := (forall (vars (?v1 Int)) #48)
#59 := (not #39)
#60 := (or #59 #53)
#65 := (forall (vars (?v0 Int)) #60)
#68 := (not #65)
#101 := (~ #68 #98)
#80 := (or #39 #79)
#72 := (forall (vars (?v1 Int)) #80)
#81 := (or #74 #72)
#82 := (not #81)
#99 := (~ #82 #98)
#93 := (not #72)
#94 := (~ #93 #92)
#95 := [sk]: #94
#86 := (~ #85 #85)
#87 := [refl]: #86
#100 := [nnf-neg #87 #95]: #99
#83 := (~ #68 #82)
#84 := [sk]: #83
#102 := [trans #84 #100]: #101
#10 := (= #9 f1)
#13 := (= #12 f1)
#14 := (or #13 #10)
#15 := (forall (vars (?v1 Int)) #14)
#16 := (implies #10 #15)
#17 := (forall (vars (?v0 Int)) #16)
#18 := (not #17)
#69 := (iff #18 #68)
#66 := (iff #17 #65)
#63 := (iff #16 #60)
#56 := (implies #39 #53)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#45 := (or #42 #39)
#49 := (iff #45 #48)
#50 := [rewrite]: #49
#46 := (iff #14 #45)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44 #41]: #46
#52 := [trans #47 #50]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #41 #55]: #57
#64 := [trans #58 #62]: #63
#67 := [quant-intro #64]: #66
#70 := [monotonicity #67]: #69
#38 := [asserted]: #18
#73 := [mp #38 #70]: #68
#103 := [mp~ #73 #102]: #98
#104 := [mp #103 #116]: #114
#117 := [and-elim #104]: #111
#118 := [not-or-elim #117]: #74
#105 := [and-elim #104]: #79
[unit-resolution #105 #118]: false
unsat
8759ce5d8b43c6b425d21500283811dc999647d4 146 0
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f4 :: S1
#15 := f4
#16 := (f3 f4 #9)
#601 := (pattern #16)
decl f1 :: S1
#4 := f1
#57 := (= f1 #16)
#98 := (not #57)
#602 := (forall (vars (?v0 S2)) (:pat #601) #98)
decl f5 :: S2
#19 := f5
#20 := (f3 f4 f5)
#64 := (= f1 #20)
#176 := (= f1 f4)
#177 := (iff #64 #176)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#594 := (pattern #10)
#47 := (= f1 #8)
#44 := (= f1 #10)
#50 := (iff #44 #47)
#595 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #594) #50)
#53 := (forall (vars (?v0 S1) (?v1 S2)) #50)
#598 := (iff #53 #595)
#596 := (iff #50 #50)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#89 := (~ #53 #53)
#87 := (~ #50 #50)
#88 := [refl]: #87
#90 := [nnf-pos #88]: #89
#12 := (= #8 f1)
#11 := (= #10 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#54 := (iff #14 #53)
#51 := (iff #13 #50)
#48 := (iff #12 #47)
#49 := [rewrite]: #48
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#52 := [monotonicity #46 #49]: #51
#55 := [quant-intro #52]: #54
#43 := [asserted]: #14
#58 := [mp #43 #55]: #53
#80 := [mp~ #58 #90]: #53
#600 := [mp #80 #599]: #595
#178 := (not #595)
#254 := (or #178 #177)
#255 := [quant-inst #15 #19]: #254
#264 := [unit-resolution #255 #600]: #177
decl ?v0!0 :: S2
#82 := ?v0!0
#91 := (f3 f4 ?v0!0)
#83 := (= f1 #91)
#263 := (iff #83 #176)
#265 := (or #178 #263)
#256 := [quant-inst #15 #82]: #265
#582 := [unit-resolution #256 #600]: #263
#267 := (not #263)
#585 := (or #267 #176)
#104 := (not #64)
#584 := [hypothesis]: #104
#109 := (or #64 #83)
#101 := (forall (vars (?v0 S2)) #98)
#110 := (or #104 #101)
#117 := (and #109 #110)
#111 := (and #110 #109)
#118 := (iff #111 #117)
#119 := [rewrite]: #118
#61 := (exists (vars (?v0 S2)) #57)
#73 := (not #61)
#74 := (iff #64 #73)
#112 := (~ #74 #111)
#102 := (~ #73 #101)
#99 := (~ #98 #98)
#100 := [refl]: #99
#103 := [nnf-neg #100]: #102
#95 := (not #73)
#96 := (~ #95 #83)
#84 := (~ #61 #83)
#92 := [sk]: #84
#97 := [nnf-neg #92]: #96
#107 := (~ #64 #64)
#108 := [refl]: #107
#105 := (~ #104 #104)
#106 := [refl]: #105
#113 := [nnf-pos #106 #108 #97 #103]: #112
#21 := (= #20 f1)
#17 := (= #16 f1)
#18 := (exists (vars (?v0 S2)) #17)
#22 := (iff #18 #21)
#23 := (not #22)
#77 := (iff #23 #74)
#67 := (iff #61 #64)
#70 := (not #67)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #23 #70)
#68 := (iff #22 #67)
#65 := (iff #21 #64)
#66 := [rewrite]: #65
#62 := (iff #18 #61)
#59 := (iff #17 #57)
#60 := [rewrite]: #59
#63 := [quant-intro #60]: #62
#69 := [monotonicity #63 #66]: #68
#72 := [monotonicity #69]: #71
#78 := [trans #72 #76]: #77
#56 := [asserted]: #23
#81 := [mp #56 #78]: #74
#114 := [mp~ #81 #113]: #111
#115 := [mp #114 #119]: #117
#116 := [and-elim #115]: #109
#242 := [unit-resolution #116 #584]: #83
#266 := (not #83)
#270 := (or #267 #266 #176)
#249 := [def-axiom]: #270
#226 := [unit-resolution #249 #242]: #585
#569 := [unit-resolution #226 #582]: #176
#268 := (not #176)
#589 := (not #177)
#230 := (or #589 #268)
#590 := (or #589 #64 #268)
#591 := [def-axiom]: #590
#231 := [unit-resolution #591 #584]: #230
#232 := [unit-resolution #231 #569 #264]: false
#233 := [lemma #232]: #64
#607 := (or #104 #602)
#608 := (iff #110 #607)
#605 := (iff #101 #602)
#603 := (iff #98 #98)
#604 := [refl]: #603
#606 := [quant-intro #604]: #605
#609 := [monotonicity #606]: #608
#120 := [and-elim #115]: #110
#610 := [mp #120 #609]: #607
#196 := [unit-resolution #610 #233]: #602
#593 := (not #602)
#583 := (or #593 #104)
#241 := [quant-inst #19]: #583
[unit-resolution #241 #233 #196]: false
unsat
6adfd21e17521f9484229c9e5eabfe34f616e110 146 2
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f5 :: S1
#23 := f5
#24 := (f3 f5 #9)
#696 := (pattern #24)
decl f1 :: S1
#4 := f1
#81 := (= f1 #24)
#177 := (not #81)
#697 := (forall (vars (?v0 S2)) (:pat #696) #177)
decl f4 :: S2
#18 := f4
#27 := (f3 f5 f4)
#88 := (= f1 #27)
#255 := (= f1 f5)
#256 := (iff #88 #255)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#673 := (pattern #10)
#54 := (= f1 #8)
#51 := (= f1 #10)
#57 := (iff #51 #54)
#674 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #673) #57)
#60 := (forall (vars (?v0 S1) (?v1 S2)) #57)
#677 := (iff #60 #674)
#675 := (iff #57 #57)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#115 := (~ #60 #60)
#113 := (~ #57 #57)
#114 := [refl]: #113
#116 := [nnf-pos #114]: #115
#12 := (= #8 f1)
#11 := (= #10 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#61 := (iff #14 #60)
#58 := (iff #13 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#52 := (iff #11 #51)
#53 := [rewrite]: #52
#59 := [monotonicity #53 #56]: #58
#62 := [quant-intro #59]: #61
#50 := [asserted]: #14
#65 := [mp #50 #62]: #60
#104 := [mp~ #65 #116]: #60
#679 := [mp #104 #678]: #674
#257 := (not #674)
#333 := (or #257 #256)
#334 := [quant-inst #23 #18]: #333
#343 := [unit-resolution #334 #679]: #256
decl ?v0!3 :: S2
#148 := ?v0!3
#149 := (f3 f5 ?v0!3)
#121 := (= f1 #149)
#342 := (iff #121 #255)
#344 := (or #257 #342)
#335 := [quant-inst #23 #148]: #344
#661 := [unit-resolution #335 #679]: #342
#346 := (not #342)
#664 := (or #346 #255)
#183 := (not #88)
#663 := [hypothesis]: #183
#188 := (or #88 #121)
#180 := (forall (vars (?v0 S2)) #177)
#189 := (or #183 #180)
#196 := (and #188 #189)
#190 := (and #189 #188)
#197 := (iff #190 #196)
#198 := [rewrite]: #197
#85 := (exists (vars (?v0 S2)) #81)
#97 := (not #85)
#98 := (iff #88 #97)
#191 := (~ #98 #190)
#181 := (~ #97 #180)
#178 := (~ #177 #177)
#179 := [refl]: #178
#182 := [nnf-neg #179]: #181
#174 := (not #97)
#175 := (~ #174 #121)
#122 := (~ #85 #121)
#171 := [sk]: #122
#176 := [nnf-neg #171]: #175
#186 := (~ #88 #88)
#187 := [refl]: #186
#184 := (~ #183 #183)
#185 := [refl]: #184
#192 := [nnf-pos #185 #187 #176 #182]: #191
#28 := (= #27 f1)
#25 := (= #24 f1)
#26 := (exists (vars (?v0 S2)) #25)
#29 := (iff #26 #28)
#30 := (not #29)
#101 := (iff #30 #98)
#91 := (iff #85 #88)
#94 := (not #91)
#99 := (iff #94 #98)
#100 := [rewrite]: #99
#95 := (iff #30 #94)
#92 := (iff #29 #91)
#89 := (iff #28 #88)
#90 := [rewrite]: #89
#86 := (iff #26 #85)
#83 := (iff #25 #81)
#84 := [rewrite]: #83
#87 := [quant-intro #84]: #86
#93 := [monotonicity #87 #90]: #92
#96 := [monotonicity #93]: #95
#102 := [trans #96 #100]: #101
#80 := [asserted]: #30
#105 := [mp #80 #102]: #98
#193 := [mp~ #105 #192]: #190
#194 := [mp #193 #198]: #196
#195 := [and-elim #194]: #188
#321 := [unit-resolution #195 #663]: #121
#345 := (not #121)
#349 := (or #346 #345 #255)
#328 := [def-axiom]: #349
#305 := [unit-resolution #328 #321]: #664
#648 := [unit-resolution #305 #661]: #255
#347 := (not #255)
#668 := (not #256)
#309 := (or #668 #347)
#669 := (or #668 #88 #347)
#670 := [def-axiom]: #669
#310 := [unit-resolution #670 #663]: #309
#311 := [unit-resolution #310 #648 #343]: false
#312 := [lemma #311]: #88
#702 := (or #183 #697)
#703 := (iff #189 #702)
#700 := (iff #180 #697)
#698 := (iff #177 #177)
#699 := [refl]: #698
#701 := [quant-intro #699]: #700
#704 := [monotonicity #701]: #703
#199 := [and-elim #194]: #189
#705 := [mp #199 #704]: #702
#275 := [unit-resolution #705 #312]: #697
#672 := (not #697)
#662 := (or #672 #183)
#320 := [quant-inst #18]: #662
[unit-resolution #320 #312 #275]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!14)

5dc6f25776aabe70ad45ce325942b3a138a1974d 91 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
decl f1 :: S1
#4 := f1
#44 := (= f1 #9)
decl f5 :: S2
#19 := f5
#20 := (f3 f5)
#66 := (= f1 #20)
#73 := (not #44)
#74 := (or #73 #66)
#79 := (not #74)
#21 := (= #20 f1)
#10 := (= #9 f1)
#22 := (implies #10 #21)
#23 := (not #22)
#80 := (iff #23 #79)
#77 := (iff #22 #74)
#70 := (implies #44 #66)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #22 #70)
#68 := (iff #21 #66)
#69 := [rewrite]: #68
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#72 := [monotonicity #46 #69]: #71
#78 := [trans #72 #76]: #77
#81 := [monotonicity #78]: #80
#65 := [asserted]: #23
#84 := [mp #65 #81]: #79
#82 := [not-or-elim #84]: #44
#11 := (:var 0 S2)
#12 := (f3 #11)
#577 := (pattern #12)
#47 := (= f1 #12)
#56 := (not #47)
#578 := (forall (vars (?v0 S2)) (:pat #577) #56)
#59 := (forall (vars (?v0 S2)) #56)
#581 := (iff #59 #578)
#579 := (iff #56 #56)
#580 := [refl]: #579
#582 := [quant-intro #580]: #581
#50 := (exists (vars (?v0 S2)) #47)
#53 := (not #50)
#90 := (~ #53 #59)
#93 := (~ #56 #56)
#94 := [refl]: #93
#102 := [nnf-neg #94]: #90
#62 := (ite #44 #53 #59)
#100 := (iff #62 #53)
#1 := true
#95 := (ite true #53 #59)
#98 := (iff #95 #53)
#99 := [rewrite]: #98
#96 := (iff #62 #95)
#91 := (iff #44 true)
#92 := [iff-true #82]: #91
#97 := [monotonicity #92]: #96
#101 := [trans #97 #99]: #100
#13 := (= #12 f1)
#16 := (not #13)
#17 := (forall (vars (?v0 S2)) #16)
#14 := (exists (vars (?v0 S2)) #13)
#15 := (not #14)
#18 := (ite #10 #15 #17)
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#57 := (iff #16 #56)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#58 := [monotonicity #49]: #57
#61 := [quant-intro #58]: #60
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [quant-intro #49]: #51
#55 := [monotonicity #52]: #54
#64 := [monotonicity #46 #55 #61]: #63
#43 := [asserted]: #18
#67 := [mp #43 #64]: #62
#89 := [mp #67 #101]: #53
#87 := [mp~ #89 #102]: #59
#583 := [mp #87 #582]: #578
#160 := (not #578)
#247 := (or #160 #73)
#161 := [quant-inst #8]: #247
[unit-resolution #161 #583 #82]: false
unsat
29e0fbcf1b3262888237e1fa476aa8a7425443c7 17 0
#2 := false
#8 := 3::Int
#9 := (= 3::Int 3::Int)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
065da226a83f89ade06131ac7b676aff1d33184f 17 0
#2 := false
#8 := 3::Real
#9 := (= 3::Real 3::Real)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
52cd464fc4027157f69df0b8cc3229ae55ad2079 26 0
#2 := false
#11 := 4::Int
#9 := 1::Int
#8 := 3::Int
#10 := (+ 3::Int 1::Int)
#12 := (= #10 4::Int)
#13 := (not #12)
#47 := (iff #13 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #13 #42)
#40 := (iff #12 true)
#35 := (= 4::Int 4::Int)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #12 #35)
#34 := [rewrite]: #12
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#33 := [asserted]: #13
[mp #33 #48]: false
unsat
28b6536c2d4f9dc75412d00f15231ed2ee58fe03 41 0
#2 := false
decl f3 :: Int
#8 := f3
decl f5 :: Int
#10 := f5
#13 := (+ f5 f3)
decl f4 :: Int
#9 := f4
#14 := (+ f4 #13)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#59 := (iff #16 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #16 #54)
#52 := (iff #15 true)
#47 := (= #12 #12)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #15 #47)
#45 := (= #14 #12)
#37 := (+ f3 f5)
#40 := (+ f4 #37)
#43 := (= #40 #12)
#44 := [rewrite]: #43
#41 := (= #14 #40)
#38 := (= #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#36 := [asserted]: #16
[mp #36 #60]: false
unsat
8450cf6a350ba6ec26331e50c3fd5d8f999ad9a0 35 0
#2 := false
#9 := 3::Int
#10 := 8::Int
#11 := (<= 3::Int 8::Int)
#12 := (ite #11 8::Int 3::Int)
#8 := 5::Int
#13 := (< 5::Int #12)
#14 := (not #13)
#58 := (iff #14 false)
#1 := true
#53 := (not true)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #14 #53)
#51 := (iff #13 true)
#46 := (< 5::Int 8::Int)
#49 := (iff #46 true)
#50 := [rewrite]: #49
#47 := (iff #13 #46)
#44 := (= #12 8::Int)
#39 := (ite true 8::Int 3::Int)
#42 := (= #39 8::Int)
#43 := [rewrite]: #42
#40 := (= #12 #39)
#37 := (iff #11 true)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#34 := [asserted]: #14
[mp #34 #59]: false
unsat
6afccd7c6734a9f80c327ff8b0bab36d43ee827b 216 0
#2 := false
#11 := 0::Real
decl f4 :: Real
#9 := f4
#44 := -1::Real
#46 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#45 := (* -1::Real f3)
#47 := (+ #45 #46)
#10 := (+ f3 f4)
#72 := (>= #10 0::Real)
#79 := (ite #72 #10 #47)
#154 := (* -1::Real #79)
#182 := (+ #47 #154)
#184 := (>= #182 0::Real)
#135 := (= #47 #79)
#73 := (not #72)
#96 := (>= f4 0::Real)
#97 := (not #96)
#155 := (+ #10 #154)
#157 := (>= #155 0::Real)
#134 := (= #10 #79)
#198 := (not #135)
#193 := (not #184)
#164 := [hypothesis]: #96
#194 := (or #193 #97)
#185 := [hypothesis]: #184
#103 := (ite #96 f4 #46)
#115 := (* -1::Real #103)
#84 := (>= f3 0::Real)
#91 := (ite #84 f3 #45)
#114 := (* -1::Real #91)
#116 := (+ #114 #115)
#117 := (+ #79 #116)
#118 := (<= #117 0::Real)
#123 := (not #118)
#19 := (- f4)
#18 := (< f4 0::Real)
#20 := (ite #18 #19 f4)
#16 := (- f3)
#15 := (< f3 0::Real)
#17 := (ite #15 #16 f3)
#21 := (+ #17 #20)
#13 := (- #10)
#12 := (< #10 0::Real)
#14 := (ite #12 #13 #10)
#22 := (<= #14 #21)
#23 := (not #22)
#126 := (iff #23 #123)
#60 := (ite #18 #46 f4)
#55 := (ite #15 #45 f3)
#63 := (+ #55 #60)
#50 := (ite #12 #47 #10)
#66 := (<= #50 #63)
#69 := (not #66)
#124 := (iff #69 #123)
#121 := (iff #66 #118)
#108 := (+ #91 #103)
#111 := (<= #79 #108)
#119 := (iff #111 #118)
#120 := [rewrite]: #119
#112 := (iff #66 #111)
#109 := (= #63 #108)
#106 := (= #60 #103)
#100 := (ite #97 #46 f4)
#104 := (= #100 #103)
#105 := [rewrite]: #104
#101 := (= #60 #100)
#98 := (iff #18 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#107 := [trans #102 #105]: #106
#94 := (= #55 #91)
#85 := (not #84)
#88 := (ite #85 #45 f3)
#92 := (= #88 #91)
#93 := [rewrite]: #92
#89 := (= #55 #88)
#86 := (iff #15 #85)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#95 := [trans #90 #93]: #94
#110 := [monotonicity #95 #107]: #109
#82 := (= #50 #79)
#76 := (ite #73 #47 #10)
#80 := (= #76 #79)
#81 := [rewrite]: #80
#77 := (= #50 #76)
#74 := (iff #12 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#83 := [trans #78 #81]: #82
#113 := [monotonicity #83 #110]: #112
#122 := [trans #113 #120]: #121
#125 := [monotonicity #122]: #124
#70 := (iff #23 #69)
#67 := (iff #22 #66)
#64 := (= #21 #63)
#61 := (= #20 #60)
#58 := (= #19 #46)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#56 := (= #17 #55)
#53 := (= #16 #45)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#65 := [monotonicity #57 #62]: #64
#51 := (= #14 #50)
#48 := (= #13 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#68 := [monotonicity #52 #65]: #67
#71 := [monotonicity #68]: #70
#127 := [trans #71 #125]: #126
#43 := [asserted]: #23
#128 := [mp #43 #127]: #123
#148 := (+ f4 #115)
#149 := (<= #148 0::Real)
#142 := (= f4 #103)
#144 := (or #97 #142)
#145 := [def-axiom]: #144
#173 := [unit-resolution #145 #164]: #142
#174 := (not #142)
#175 := (or #174 #149)
#176 := [th-lemma arith triangle-eq]: #175
#177 := [unit-resolution #176 #173]: #149
#153 := (+ #45 #114)
#156 := (<= #153 0::Real)
#131 := (= #45 #91)
#179 := (or #85 #97)
#151 := (+ f3 #114)
#152 := (<= #151 0::Real)
#130 := (= f3 #91)
#158 := [hypothesis]: #84
#138 := (or #85 #130)
#139 := [def-axiom]: #138
#159 := [unit-resolution #139 #158]: #130
#160 := (not #130)
#161 := (or #160 #152)
#162 := [th-lemma arith triangle-eq]: #161
#163 := [unit-resolution #162 #159]: #152
#165 := (or #72 #85 #97)
#166 := [th-lemma arith assign-bounds -1 -1]: #165
#167 := [unit-resolution #166 #158 #164]: #72
#136 := (or #73 #134)
#137 := [def-axiom]: #136
#168 := [unit-resolution #137 #167]: #134
#169 := (not #134)
#170 := (or #169 #157)
#171 := [th-lemma arith triangle-eq]: #170
#172 := [unit-resolution #171 #168]: #157
#178 := [th-lemma arith farkas 1 -1 -1 1 #177 #172 #128 #163]: false
#180 := [lemma #178]: #179
#186 := [unit-resolution #180 #164]: #85
#140 := (or #84 #131)
#141 := [def-axiom]: #140
#187 := [unit-resolution #141 #186]: #131
#188 := (not #131)
#189 := (or #188 #156)
#190 := [th-lemma arith triangle-eq]: #189
#191 := [unit-resolution #190 #187]: #156
#192 := [th-lemma arith farkas 2 -1 -1 1 1 #164 #191 #177 #128 #185]: false
#195 := [lemma #192]: #194
#203 := [unit-resolution #195 #164]: #193
#199 := (or #198 #184)
#196 := [hypothesis]: #193
#197 := [hypothesis]: #135
#200 := [th-lemma arith triangle-eq]: #199
#201 := [unit-resolution #200 #197 #196]: false
#202 := [lemma #201]: #199
#204 := [unit-resolution #202 #203]: #198
#132 := (or #72 #135)
#133 := [def-axiom]: #132
#205 := [unit-resolution #133 #204]: #72
#206 := [unit-resolution #137 #205]: #134
#207 := [unit-resolution #171 #206]: #157
#208 := [th-lemma arith farkas 2 1 1 1 1 #186 #191 #177 #128 #207]: false
#209 := [lemma #208]: #97
#150 := (+ #46 #115)
#181 := (<= #150 0::Real)
#143 := (= #46 #103)
#146 := (or #96 #143)
#147 := [def-axiom]: #146
#214 := [unit-resolution #147 #209]: #143
#215 := (not #143)
#216 := (or #215 #181)
#217 := [th-lemma arith triangle-eq]: #216
#218 := [unit-resolution #217 #214]: #181
#220 := (not #157)
#221 := (not #152)
#222 := (or #220 #221)
#212 := [hypothesis]: #152
#213 := [hypothesis]: #157
#219 := [th-lemma arith farkas 2 1 1 1 1 #209 #218 #128 #213 #212]: false
#223 := [lemma #219]: #222
#228 := [unit-resolution #223 #163]: #220
#224 := [hypothesis]: #220
#225 := [hypothesis]: #134
#226 := [unit-resolution #171 #225 #224]: false
#227 := [lemma #226]: #170
#229 := [unit-resolution #227 #228]: #169
#230 := [unit-resolution #137 #229]: #73
#231 := [unit-resolution #133 #230]: #135
#232 := [unit-resolution #202 #231]: #184
#233 := [th-lemma arith farkas 1/2 -1/2 -1/2 1/2 1 #232 #163 #218 #128 #158]: false
#234 := [lemma #233]: #85
#235 := (or #73 #84 #96)
#236 := [th-lemma arith assign-bounds 1 1]: #235
#237 := [unit-resolution #236 #234 #209]: #73
#238 := [unit-resolution #133 #237]: #135
#239 := [unit-resolution #202 #238]: #184
#240 := [unit-resolution #141 #234]: #131
#241 := [unit-resolution #190 #240]: #156
[th-lemma arith farkas -1 -1 1 1 #241 #218 #128 #239]: false
unsat
c722596cfa285e209992f7087932c1ec15fd226b 42 0
#2 := false
decl f3 :: (-> S1 S2)
decl f1 :: S1
#4 := f1
#13 := (f3 f1)
decl f2 :: S1
#5 := f2
#9 := 3::Int
#8 := 2::Int
#10 := (< 2::Int 3::Int)
#11 := (ite #10 f1 f2)
#12 := (f3 #11)
#14 := (= #12 #13)
#15 := (not #14)
#60 := (iff #15 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #15 #55)
#53 := (iff #14 true)
#48 := (= #13 #13)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #14 #48)
#45 := (= #11 f1)
#40 := (ite true f1 f2)
#43 := (= #40 f1)
#44 := [rewrite]: #43
#41 := (= #11 #40)
#38 := (iff #10 true)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#47 := [monotonicity #46]: #14
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#35 := [asserted]: #15
[mp #35 #61]: false
unsat
4d8a8a08b49cb28d987bdc1bcdbb3a144907bf45 54 0
#2 := false
#13 := 1::Int
decl f3 :: Int
#9 := f3
#14 := (< f3 1::Int)
#10 := 3::Int
#11 := (+ f3 3::Int)
#8 := 4::Int
#12 := (<= 4::Int #11)
#15 := (or #12 #14)
#16 := (not #15)
#74 := (iff #16 false)
#37 := (+ 3::Int f3)
#40 := (<= 4::Int #37)
#46 := (or #14 #40)
#51 := (not #46)
#72 := (iff #51 false)
#1 := true
#67 := (not true)
#70 := (iff #67 false)
#71 := [rewrite]: #70
#68 := (iff #51 #67)
#65 := (iff #46 true)
#56 := (>= f3 1::Int)
#54 := (not #56)
#60 := (or #54 #56)
#63 := (iff #60 true)
#64 := [rewrite]: #63
#61 := (iff #46 #60)
#58 := (iff #40 #56)
#59 := [rewrite]: #58
#55 := (iff #14 #54)
#57 := [rewrite]: #55
#62 := [monotonicity #57 #59]: #61
#66 := [trans #62 #64]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#52 := (iff #16 #51)
#49 := (iff #15 #46)
#43 := (or #40 #14)
#47 := (iff #43 #46)
#48 := [rewrite]: #47
#44 := (iff #15 #43)
#41 := (iff #12 #40)
#38 := (= #11 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#50 := [trans #45 #48]: #49
#53 := [monotonicity #50]: #52
#75 := [trans #53 #73]: #74
#36 := [asserted]: #16
[mp #36 #75]: false
unsat
8bd98db330c82b711ec70353229651c63b6517b9 63 0
#2 := false
#15 := 0::Int
decl f4 :: Int
#11 := f4
#50 := -1::Int
#53 := (* -1::Int f4)
decl f3 :: Int
#9 := f3
#54 := (+ f3 #53)
#71 := (>= #54 0::Int)
#95 := (iff #71 false)
#52 := -4::Int
#88 := (>= -4::Int 0::Int)
#87 := (iff #88 false)
#94 := [rewrite]: #87
#89 := (iff #71 #88)
#55 := (= #54 -4::Int)
#12 := 4::Int
#13 := (+ f3 4::Int)
#14 := (= f4 #13)
#57 := (iff #14 #55)
#40 := (+ 4::Int f3)
#47 := (= f4 #40)
#51 := (iff #47 #55)
#56 := [rewrite]: #51
#48 := (iff #14 #47)
#45 := (= #13 #40)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#58 := [trans #49 #56]: #57
#39 := [asserted]: #14
#59 := [mp #39 #58]: #55
#86 := [monotonicity #59]: #89
#96 := [trans #86 #94]: #95
#16 := (- f4 f3)
#17 := (< 0::Int #16)
#18 := (not #17)
#82 := (iff #18 #71)
#61 := (* -1::Int f3)
#62 := (+ #61 f4)
#65 := (< 0::Int #62)
#68 := (not #65)
#80 := (iff #68 #71)
#72 := (not #71)
#75 := (not #72)
#78 := (iff #75 #71)
#79 := [rewrite]: #78
#76 := (iff #68 #75)
#73 := (iff #65 #72)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#69 := (iff #18 #68)
#66 := (iff #17 #65)
#63 := (= #16 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#83 := [trans #70 #81]: #82
#60 := [asserted]: #18
#84 := [mp #60 #83]: #71
[mp #84 #96]: false
unsat
e799a1569bcb7c90a4ec458d9136d7c6af5e039d 35 0
#2 := false
#10 := 5::Int
#8 := 2::Int
#9 := (+ 2::Int 2::Int)
#11 := (= #9 5::Int)
#12 := (not #11)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#44 := (not false)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #12 #44)
#42 := (iff #11 false)
#34 := 4::Int
#37 := (= 4::Int 5::Int)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #11 #37)
#35 := (= #9 4::Int)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#33 := [asserted]: #13
[mp #33 #57]: false
unsat
94bbb14edc8e8a8aac37f1ba3711bbb03b5ccb30 45 0
#2 := false
#15 := 4::Real
decl f4 :: Real
#12 := f4
#11 := 7::Real
#13 := (* 7::Real f4)
decl f3 :: Real
#9 := f3
#8 := 3::Real
#10 := (* 3::Real f3)
#14 := (+ #10 #13)
#49 := (>= #14 4::Real)
#47 := (not #49)
#16 := (< #14 4::Real)
#48 := (iff #16 #47)
#45 := [rewrite]: #48
#42 := [asserted]: #16
#46 := [mp #42 #45]: #47
#17 := 2::Real
#18 := (* 2::Real f3)
#51 := (<= #18 3::Real)
#52 := (not #51)
#19 := (< 3::Real #18)
#53 := (iff #19 #52)
#54 := [rewrite]: #53
#43 := [asserted]: #19
#55 := [mp #43 #54]: #52
#20 := 0::Real
#59 := (>= f4 0::Real)
#21 := (< f4 0::Real)
#22 := (not #21)
#66 := (iff #22 #59)
#57 := (not #59)
#61 := (not #57)
#64 := (iff #61 #59)
#65 := [rewrite]: #64
#62 := (iff #22 #61)
#58 := (iff #21 #57)
#60 := [rewrite]: #58
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#44 := [asserted]: #22
#68 := [mp #44 #67]: #59
[th-lemma arith farkas 7 3/2 1 #68 #55 #46]: false
unsat
4588f343772c15f1f661bad429073998929c6598 59 0
#2 := false
#20 := (not false)
decl f4 :: Int
#12 := f4
#8 := 0::Int
#16 := (<= 0::Int f4)
#17 := (not #16)
#18 := (or #17 #16)
#10 := 1::Int
#11 := (- 1::Int)
#13 := (* #11 f4)
decl f3 :: Int
#9 := f3
#14 := (+ f3 #13)
#15 := (<= 0::Int #14)
#19 := (or #15 #18)
#21 := (iff #19 #20)
#22 := (not #21)
#78 := (iff #22 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #22 #73)
#71 := (iff #21 true)
#66 := (iff true true)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #21 #66)
#64 := (iff #20 true)
#65 := [rewrite]: #64
#62 := (iff #19 true)
#43 := -1::Int
#46 := (* -1::Int f4)
#49 := (+ f3 #46)
#52 := (<= 0::Int #49)
#57 := (or #52 true)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #19 #57)
#55 := (iff #18 true)
#56 := [rewrite]: #55
#53 := (iff #15 #52)
#50 := (= #14 #49)
#47 := (= #13 #46)
#44 := (= #11 -1::Int)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#54 := [monotonicity #51]: #53
#59 := [monotonicity #54 #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#42 := [asserted]: #22
[mp #42 #79]: false
unsat
78003574b5d95d4c28641909502b0f435784ad24 104 0
#2 := false
decl f1 :: S1
#4 := f1
decl f2 :: S1
#5 := f2
#9 := 3::Int
decl f3 :: Int
#8 := f3
#49 := (>= f3 3::Int)
#54 := (ite #49 f2 f1)
#76 := (= f1 #54)
#61 := (ite #49 f1 f2)
#71 := (= f1 #61)
#118 := (iff #71 #76)
#116 := (iff #76 #71)
#64 := (= #54 #61)
#12 := (<= 3::Int f3)
#13 := (ite #12 f1 f2)
#10 := (< f3 3::Int)
#11 := (ite #10 f1 f2)
#14 := (distinct #11 #13)
#15 := (not #14)
#67 := (iff #15 #64)
#36 := (= #11 #13)
#65 := (iff #36 #64)
#62 := (= #13 #61)
#59 := (iff #12 #49)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#57 := (= #11 #54)
#47 := (not #49)
#51 := (ite #47 f1 f2)
#55 := (= #51 #54)
#56 := [rewrite]: #55
#52 := (= #11 #51)
#48 := (iff #10 #47)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#58 := [trans #53 #56]: #57
#66 := [monotonicity #58 #63]: #65
#45 := (iff #15 #36)
#37 := (not #36)
#40 := (not #37)
#43 := (iff #40 #36)
#44 := [rewrite]: #43
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#68 := [trans #46 #66]: #67
#35 := [asserted]: #15
#69 := [mp #35 #68]: #64
#117 := [monotonicity #69]: #116
#119 := [symm #117]: #118
#112 := (not #76)
#6 := (= f1 f2)
#72 := (= f2 #61)
#108 := (iff #72 #6)
#106 := (iff #6 #72)
#101 := (= #61 f2)
#104 := (iff #101 #72)
#105 := [commutativity]: #104
#102 := (iff #6 #101)
#99 := [hypothesis]: #76
#100 := [trans #99 #69]: #71
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#109 := [symm #107]: #108
#75 := (= f2 #54)
#87 := (iff #75 #72)
#88 := [monotonicity #69]: #87
#89 := (iff #72 #75)
#90 := [symm #88]: #89
#83 := (not #75)
#84 := [hypothesis]: #83
#77 := (or #47 #75)
#78 := [def-axiom]: #77
#85 := [unit-resolution #78 #84]: #47
#81 := (or #49 #72)
#82 := [def-axiom]: #81
#86 := [unit-resolution #82 #85]: #72
#91 := [mp #86 #90]: #75
#92 := [unit-resolution #84 #91]: false
#93 := [lemma #92]: #75
#96 := [mp #93 #88]: #72
#94 := (not #72)
#95 := [hypothesis]: #94
#97 := [unit-resolution #95 #96]: false
#98 := [lemma #97]: #72
#110 := [mp #98 #109]: #6
#7 := (not #6)
#34 := [asserted]: #7
#111 := [unit-resolution #34 #110]: false
#113 := [lemma #111]: #112
#73 := (or #49 #76)
#74 := [def-axiom]: #73
#114 := [unit-resolution #74 #113]: #49
#79 := (or #47 #71)
#80 := [def-axiom]: #79
#115 := [unit-resolution #80 #114]: #71
#120 := [mp #115 #119]: #76
[unit-resolution #113 #120]: false
unsat
5d7df2dbd3da6509a839adcbe280f54ee342d7d8 86 0
#2 := false
decl f3 :: Int
#9 := f3
#11 := 2::Int
#37 := (* 2::Int f3)
#8 := 0::Int
#68 := (= 0::Int #37)
#69 := (not #68)
#61 := (= #37 0::Int)
#112 := (not #61)
#118 := (iff #112 #69)
#116 := (iff #61 #68)
#117 := [commutativity]: #116
#119 := [monotonicity #117]: #118
#70 := (<= #37 0::Int)
#108 := (not #70)
#38 := (<= f3 0::Int)
#39 := (not #38)
#10 := (< 0::Int f3)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#35 := [asserted]: #10
#42 := [mp #35 #41]: #39
#109 := (or #108 #38)
#110 := [th-lemma arith assign-bounds 2]: #109
#111 := [unit-resolution #110 #42]: #108
#113 := (or #112 #70)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111]: #112
#120 := [mp #115 #119]: #69
#64 := (= f3 #37)
#65 := (not #64)
#66 := (= 0::Int f3)
#67 := (not #66)
#62 := (and #67 #69 #65)
#77 := (not #62)
#50 := (distinct 0::Int f3 #37)
#55 := (not #50)
#13 := (- f3 f3)
#12 := (* f3 2::Int)
#14 := (distinct f3 #12 #13)
#15 := (not #14)
#56 := (iff #15 #55)
#53 := (iff #14 #50)
#47 := (distinct f3 #37 0::Int)
#51 := (iff #47 #50)
#52 := [rewrite]: #51
#48 := (iff #14 #47)
#45 := (= #13 0::Int)
#46 := [rewrite]: #45
#43 := (= #12 #37)
#44 := [rewrite]: #43
#49 := [monotonicity #44 #46]: #48
#54 := [trans #49 #52]: #53
#57 := [monotonicity #54]: #56
#36 := [asserted]: #15
#60 := [mp #36 #57]: #55
#88 := (or #50 #77)
#89 := [def-axiom]: #88
#90 := [unit-resolution #89 #60]: #77
#63 := (= f3 0::Int)
#91 := (not #63)
#97 := (iff #91 #67)
#95 := (iff #63 #66)
#96 := [commutativity]: #95
#98 := [monotonicity #96]: #97
#92 := (or #91 #38)
#93 := [th-lemma arith triangle-eq]: #92
#94 := [unit-resolution #93 #42]: #91
#99 := [mp #94 #98]: #67
#72 := -1::Int
#73 := (* -1::Int #37)
#74 := (+ f3 #73)
#76 := (>= #74 0::Int)
#100 := (not #76)
#101 := (or #100 #38)
#102 := [th-lemma arith assign-bounds 1]: #101
#103 := [unit-resolution #102 #42]: #100
#104 := (or #65 #76)
#105 := [th-lemma arith triangle-eq]: #104
#106 := [unit-resolution #105 #103]: #65
#84 := (or #62 #66 #68 #64)
#85 := [def-axiom]: #84
#107 := [unit-resolution #85 #106 #99 #90]: #68
[unit-resolution #107 #120]: false
unsat
adcd90d27a640d65adf92b737298d76a88dcb2d7 551 0
#2 := false
#177 := 0::Int
decl f5 :: Int
#11 := f5
#174 := -1::Int
#175 := (* -1::Int f5)
decl f4 :: Int
#9 := f4
#199 := (+ f4 #175)
#245 := (<= #199 0::Int)
#210 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#211 := (+ f3 #210)
#226 := (>= #211 0::Int)
#176 := (+ f3 #175)
#186 := (>= #176 0::Int)
#185 := (not #186)
#19 := (= f3 f5)
#439 := (not #19)
#225 := (not #226)
#584 := [hypothesis]: #225
#476 := (or #439 #226)
#232 := (and #19 #225)
#370 := (not #232)
#485 := (iff #370 #476)
#477 := (not #476)
#480 := (not #477)
#483 := (iff #480 #476)
#484 := [rewrite]: #483
#481 := (iff #370 #480)
#478 := (iff #232 #477)
#479 := [rewrite]: #478
#482 := [monotonicity #479]: #481
#486 := [trans #482 #484]: #485
#198 := (>= #199 0::Int)
#197 := (not #198)
#295 := (and #197 #225)
#14 := (= f4 f5)
#287 := (and #14 #225)
#246 := (not #245)
#281 := (and #185 #246)
#276 := (and #19 #246)
#21 := (= f3 f4)
#268 := (and #21 #197)
#212 := (<= #211 0::Int)
#213 := (not #212)
#260 := (and #213 #246)
#252 := (and #21 #246)
#178 := (<= #176 0::Int)
#179 := (not #178)
#240 := (and #179 #225)
#222 := (and #14 #213)
#219 := (and #185 #213)
#216 := (and #19 #213)
#205 := (and #179 #197)
#192 := (and #21 #185)
#182 := (and #14 #179)
#123 := (and #14 #21)
#345 := (or #123 #182 #192 #205 #216 #219 #222 #232 #240 #252 #260 #268 #276 #281 #287 #295)
#350 := (not #345)
#25 := (= f4 f3)
#31 := (= f5 f4)
#38 := (and #31 #25)
#27 := (< f5 f3)
#37 := (and #14 #27)
#39 := (or #37 #38)
#16 := (< f3 f5)
#36 := (and #25 #16)
#40 := (or #36 #39)
#12 := (< f4 f5)
#35 := (and #12 #27)
#41 := (or #35 #40)
#29 := (= f5 f3)
#23 := (< f4 f3)
#34 := (and #23 #29)
#42 := (or #34 #41)
#33 := (and #23 #16)
#43 := (or #33 #42)
#32 := (and #31 #23)
#44 := (or #32 #43)
#10 := (< f3 f4)
#30 := (and #29 #10)
#45 := (or #30 #44)
#28 := (and #27 #10)
#46 := (or #28 #45)
#17 := (< f5 f4)
#26 := (and #17 #25)
#47 := (or #26 #46)
#24 := (and #17 #23)
#48 := (or #24 #47)
#22 := (and #21 #12)
#49 := (or #22 #48)
#20 := (and #19 #17)
#50 := (or #20 #49)
#18 := (and #16 #17)
#51 := (or #18 #50)
#15 := (and #10 #14)
#52 := (or #15 #51)
#13 := (and #10 #12)
#53 := (or #13 #52)
#54 := (not #53)
#353 := (iff #54 #350)
#126 := (or #37 #123)
#118 := (and #16 #21)
#129 := (or #118 #126)
#132 := (or #35 #129)
#110 := (and #19 #23)
#135 := (or #110 #132)
#104 := (and #16 #23)
#138 := (or #104 #135)
#101 := (and #14 #23)
#141 := (or #101 #138)
#94 := (and #10 #19)
#144 := (or #94 #141)
#86 := (and #10 #27)
#147 := (or #86 #144)
#83 := (and #17 #21)
#150 := (or #83 #147)
#153 := (or #24 #150)
#78 := (and #12 #21)
#156 := (or #78 #153)
#75 := (and #17 #19)
#159 := (or #75 #156)
#162 := (or #18 #159)
#165 := (or #15 #162)
#168 := (or #13 #165)
#171 := (not #168)
#351 := (iff #171 #350)
#348 := (iff #168 #345)
#300 := (or #182 #123)
#303 := (or #192 #300)
#306 := (or #205 #303)
#309 := (or #216 #306)
#312 := (or #219 #309)
#315 := (or #222 #312)
#318 := (or #232 #315)
#321 := (or #240 #318)
#324 := (or #252 #321)
#327 := (or #260 #324)
#330 := (or #268 #327)
#333 := (or #276 #330)
#336 := (or #281 #333)
#339 := (or #287 #336)
#342 := (or #295 #339)
#346 := (iff #342 #345)
#347 := [rewrite]: #346
#343 := (iff #168 #342)
#340 := (iff #165 #339)
#337 := (iff #162 #336)
#334 := (iff #159 #333)
#331 := (iff #156 #330)
#328 := (iff #153 #327)
#325 := (iff #150 #324)
#322 := (iff #147 #321)
#319 := (iff #144 #318)
#316 := (iff #141 #315)
#313 := (iff #138 #312)
#310 := (iff #135 #309)
#307 := (iff #132 #306)
#304 := (iff #129 #303)
#301 := (iff #126 #300)
#183 := (iff #37 #182)
#180 := (iff #27 #179)
#181 := [rewrite]: #180
#184 := [monotonicity #181]: #183
#302 := [monotonicity #184]: #301
#195 := (iff #118 #192)
#189 := (and #185 #21)
#193 := (iff #189 #192)
#194 := [rewrite]: #193
#190 := (iff #118 #189)
#187 := (iff #16 #185)
#188 := [rewrite]: #187
#191 := [monotonicity #188]: #190
#196 := [trans #191 #194]: #195
#305 := [monotonicity #196 #302]: #304
#208 := (iff #35 #205)
#202 := (and #197 #179)
#206 := (iff #202 #205)
#207 := [rewrite]: #206
#203 := (iff #35 #202)
#200 := (iff #12 #197)
#201 := [rewrite]: #200
#204 := [monotonicity #201 #181]: #203
#209 := [trans #204 #207]: #208
#308 := [monotonicity #209 #305]: #307
#217 := (iff #110 #216)
#214 := (iff #23 #213)
#215 := [rewrite]: #214
#218 := [monotonicity #215]: #217
#311 := [monotonicity #218 #308]: #310
#220 := (iff #104 #219)
#221 := [monotonicity #188 #215]: #220
#314 := [monotonicity #221 #311]: #313
#223 := (iff #101 #222)
#224 := [monotonicity #215]: #223
#317 := [monotonicity #224 #314]: #316
#235 := (iff #94 #232)
#229 := (and #225 #19)
#233 := (iff #229 #232)
#234 := [rewrite]: #233
#230 := (iff #94 #229)
#227 := (iff #10 #225)
#228 := [rewrite]: #227
#231 := [monotonicity #228]: #230
#236 := [trans #231 #234]: #235
#320 := [monotonicity #236 #317]: #319
#243 := (iff #86 #240)
#237 := (and #225 #179)
#241 := (iff #237 #240)
#242 := [rewrite]: #241
#238 := (iff #86 #237)
#239 := [monotonicity #228 #181]: #238
#244 := [trans #239 #242]: #243
#323 := [monotonicity #244 #320]: #322
#255 := (iff #83 #252)
#249 := (and #246 #21)
#253 := (iff #249 #252)
#254 := [rewrite]: #253
#250 := (iff #83 #249)
#247 := (iff #17 #246)
#248 := [rewrite]: #247
#251 := [monotonicity #248]: #250
#256 := [trans #251 #254]: #255
#326 := [monotonicity #256 #323]: #325
#263 := (iff #24 #260)
#257 := (and #246 #213)
#261 := (iff #257 #260)
#262 := [rewrite]: #261
#258 := (iff #24 #257)
#259 := [monotonicity #248 #215]: #258
#264 := [trans #259 #262]: #263
#329 := [monotonicity #264 #326]: #328
#271 := (iff #78 #268)
#265 := (and #197 #21)
#269 := (iff #265 #268)
#270 := [rewrite]: #269
#266 := (iff #78 #265)
#267 := [monotonicity #201]: #266
#272 := [trans #267 #270]: #271
#332 := [monotonicity #272 #329]: #331
#279 := (iff #75 #276)
#273 := (and #246 #19)
#277 := (iff #273 #276)
#278 := [rewrite]: #277
#274 := (iff #75 #273)
#275 := [monotonicity #248]: #274
#280 := [trans #275 #278]: #279
#335 := [monotonicity #280 #332]: #334
#282 := (iff #18 #281)
#283 := [monotonicity #188 #248]: #282
#338 := [monotonicity #283 #335]: #337
#290 := (iff #15 #287)
#284 := (and #225 #14)
#288 := (iff #284 #287)
#289 := [rewrite]: #288
#285 := (iff #15 #284)
#286 := [monotonicity #228]: #285
#291 := [trans #286 #289]: #290
#341 := [monotonicity #291 #338]: #340
#298 := (iff #13 #295)
#292 := (and #225 #197)
#296 := (iff #292 #295)
#297 := [rewrite]: #296
#293 := (iff #13 #292)
#294 := [monotonicity #228 #201]: #293
#299 := [trans #294 #297]: #298
#344 := [monotonicity #299 #341]: #343
#349 := [trans #344 #347]: #348
#352 := [monotonicity #349]: #351
#172 := (iff #54 #171)
#169 := (iff #53 #168)
#166 := (iff #52 #165)
#163 := (iff #51 #162)
#160 := (iff #50 #159)
#157 := (iff #49 #156)
#154 := (iff #48 #153)
#151 := (iff #47 #150)
#148 := (iff #46 #147)
#145 := (iff #45 #144)
#142 := (iff #44 #141)
#139 := (iff #43 #138)
#136 := (iff #42 #135)
#133 := (iff #41 #132)
#130 := (iff #40 #129)
#127 := (iff #39 #126)
#124 := (iff #38 #123)
#81 := (iff #25 #21)
#82 := [rewrite]: #81
#99 := (iff #31 #14)
#100 := [rewrite]: #99
#125 := [monotonicity #100 #82]: #124
#128 := [monotonicity #125]: #127
#121 := (iff #36 #118)
#115 := (and #21 #16)
#119 := (iff #115 #118)
#120 := [rewrite]: #119
#116 := (iff #36 #115)
#117 := [monotonicity #82]: #116
#122 := [trans #117 #120]: #121
#131 := [monotonicity #122 #128]: #130
#134 := [monotonicity #131]: #133
#113 := (iff #34 #110)
#107 := (and #23 #19)
#111 := (iff #107 #110)
#112 := [rewrite]: #111
#108 := (iff #34 #107)
#89 := (iff #29 #19)
#90 := [rewrite]: #89
#109 := [monotonicity #90]: #108
#114 := [trans #109 #112]: #113
#137 := [monotonicity #114 #134]: #136
#105 := (iff #33 #104)
#106 := [rewrite]: #105
#140 := [monotonicity #106 #137]: #139
#102 := (iff #32 #101)
#103 := [monotonicity #100]: #102
#143 := [monotonicity #103 #140]: #142
#97 := (iff #30 #94)
#91 := (and #19 #10)
#95 := (iff #91 #94)
#96 := [rewrite]: #95
#92 := (iff #30 #91)
#93 := [monotonicity #90]: #92
#98 := [trans #93 #96]: #97
#146 := [monotonicity #98 #143]: #145
#87 := (iff #28 #86)
#88 := [rewrite]: #87
#149 := [monotonicity #88 #146]: #148
#84 := (iff #26 #83)
#85 := [monotonicity #82]: #84
#152 := [monotonicity #85 #149]: #151
#155 := [monotonicity #152]: #154
#79 := (iff #22 #78)
#80 := [rewrite]: #79
#158 := [monotonicity #80 #155]: #157
#76 := (iff #20 #75)
#77 := [rewrite]: #76
#161 := [monotonicity #77 #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#354 := [trans #173 #352]: #353
#74 := [asserted]: #54
#355 := [mp #74 #354]: #350
#371 := [not-or-elim #355]: #370
#487 := [mp #371 #486]: #476
#585 := [unit-resolution #487 #584]: #439
#488 := (or #178 #226)
#372 := (not #240)
#497 := (iff #372 #488)
#489 := (not #488)
#492 := (not #489)
#495 := (iff #492 #488)
#496 := [rewrite]: #495
#493 := (iff #372 #492)
#490 := (iff #240 #489)
#491 := [rewrite]: #490
#494 := [monotonicity #491]: #493
#498 := [trans #494 #496]: #497
#373 := [not-or-elim #355]: #372
#499 := [mp #373 #498]: #488
#586 := [unit-resolution #499 #584]: #178
#587 := (or #19 #179 #185)
#588 := [th-lemma arith triangle-eq]: #587
#589 := [unit-resolution #588 #586 #585]: #185
#548 := (or #186 #245)
#382 := (not #281)
#557 := (iff #382 #548)
#549 := (not #548)
#552 := (not #549)
#555 := (iff #552 #548)
#556 := [rewrite]: #555
#553 := (iff #382 #552)
#550 := (iff #281 #549)
#551 := [rewrite]: #550
#554 := [monotonicity #551]: #553
#558 := [trans #554 #556]: #557
#383 := [not-or-elim #355]: #382
#559 := [mp #383 #558]: #548
#590 := [unit-resolution #559 #589]: #245
#572 := (or #198 #226)
#386 := (not #295)
#581 := (iff #386 #572)
#573 := (not #572)
#576 := (not #573)
#579 := (iff #576 #572)
#580 := [rewrite]: #579
#577 := (iff #386 #576)
#574 := (iff #295 #573)
#575 := [rewrite]: #574
#578 := [monotonicity #575]: #577
#582 := [trans #578 #580]: #581
#387 := [not-or-elim #355]: #386
#583 := [mp #387 #582]: #572
#591 := [unit-resolution #583 #584]: #198
#423 := (not #14)
#560 := (or #423 #226)
#384 := (not #287)
#569 := (iff #384 #560)
#561 := (not #560)
#564 := (not #561)
#567 := (iff #564 #560)
#568 := [rewrite]: #567
#565 := (iff #384 #564)
#562 := (iff #287 #561)
#563 := [rewrite]: #562
#566 := [monotonicity #563]: #565
#570 := [trans #566 #568]: #569
#385 := [not-or-elim #355]: #384
#571 := [mp #385 #570]: #560
#592 := [unit-resolution #571 #584]: #423
#593 := (or #14 #246 #197)
#594 := [th-lemma arith triangle-eq]: #593
#595 := [unit-resolution #594 #592 #591 #590]: false
#596 := [lemma #595]: #226
#597 := [hypothesis]: #246
#512 := (or #212 #245)
#376 := (not #260)
#521 := (iff #376 #512)
#513 := (not #512)
#516 := (not #513)
#519 := (iff #516 #512)
#520 := [rewrite]: #519
#517 := (iff #376 #516)
#514 := (iff #260 #513)
#515 := [rewrite]: #514
#518 := [monotonicity #515]: #517
#522 := [trans #518 #520]: #521
#377 := [not-or-elim #355]: #376
#523 := [mp #377 #522]: #512
#598 := [unit-resolution #523 #597]: #212
#424 := (not #21)
#500 := (or #424 #245)
#374 := (not #252)
#509 := (iff #374 #500)
#501 := (not #500)
#504 := (not #501)
#507 := (iff #504 #500)
#508 := [rewrite]: #507
#505 := (iff #374 #504)
#502 := (iff #252 #501)
#503 := [rewrite]: #502
#506 := [monotonicity #503]: #505
#510 := [trans #506 #508]: #509
#375 := [not-or-elim #355]: #374
#511 := [mp #375 #510]: #500
#599 := [unit-resolution #511 #597]: #424
#600 := (or #21 #213 #225)
#601 := [th-lemma arith triangle-eq]: #600
#602 := [unit-resolution #601 #599 #598 #596]: false
#603 := [lemma #602]: #245
#604 := [hypothesis]: #213
#440 := (or #439 #212)
#364 := (not #216)
#449 := (iff #364 #440)
#441 := (not #440)
#444 := (not #441)
#447 := (iff #444 #440)
#448 := [rewrite]: #447
#445 := (iff #364 #444)
#442 := (iff #216 #441)
#443 := [rewrite]: #442
#446 := [monotonicity #443]: #445
#450 := [trans #446 #448]: #449
#365 := [not-or-elim #355]: #364
#451 := [mp #365 #450]: #440
#605 := [unit-resolution #451 #604]: #439
#452 := (or #186 #212)
#366 := (not #219)
#461 := (iff #366 #452)
#453 := (not #452)
#456 := (not #453)
#459 := (iff #456 #452)
#460 := [rewrite]: #459
#457 := (iff #366 #456)
#454 := (iff #219 #453)
#455 := [rewrite]: #454
#458 := [monotonicity #455]: #457
#462 := [trans #458 #460]: #461
#367 := [not-or-elim #355]: #366
#463 := [mp #367 #462]: #452
#606 := [unit-resolution #463 #604]: #186
#607 := [unit-resolution #588 #606 #605]: #179
#427 := (or #178 #198)
#362 := (not #205)
#436 := (iff #362 #427)
#428 := (not #427)
#431 := (not #428)
#434 := (iff #431 #427)
#435 := [rewrite]: #434
#432 := (iff #362 #431)
#429 := (iff #205 #428)
#430 := [rewrite]: #429
#433 := [monotonicity #430]: #432
#437 := [trans #433 #435]: #436
#363 := [not-or-elim #355]: #362
#438 := [mp #363 #437]: #427
#608 := [unit-resolution #438 #607]: #198
#464 := (or #423 #212)
#368 := (not #222)
#473 := (iff #368 #464)
#465 := (not #464)
#468 := (not #465)
#471 := (iff #468 #464)
#472 := [rewrite]: #471
#469 := (iff #368 #468)
#466 := (iff #222 #465)
#467 := [rewrite]: #466
#470 := [monotonicity #467]: #469
#474 := [trans #470 #472]: #473
#369 := [not-or-elim #355]: #368
#475 := [mp #369 #474]: #464
#609 := [unit-resolution #475 #604]: #423
#610 := [unit-resolution #594 #609 #608 #603]: false
#611 := [lemma #610]: #212
#612 := [th-lemma arith eq-propagate 1 1 #596 #611]: #21
#524 := (or #424 #198)
#378 := (not #268)
#533 := (iff #378 #524)
#525 := (not #524)
#528 := (not #525)
#531 := (iff #528 #524)
#532 := [rewrite]: #531
#529 := (iff #378 #528)
#526 := (iff #268 #525)
#527 := [rewrite]: #526
#530 := [monotonicity #527]: #529
#534 := [trans #530 #532]: #533
#379 := [not-or-elim #355]: #378
#535 := [mp #379 #534]: #524
#614 := [unit-resolution #535 #612]: #198
#425 := (or #423 #424)
#356 := (not #123)
#416 := (iff #356 #425)
#426 := (not #425)
#419 := (not #426)
#418 := (iff #419 #425)
#415 := [rewrite]: #418
#420 := (iff #356 #419)
#421 := (iff #123 #426)
#422 := [rewrite]: #421
#417 := [monotonicity #422]: #420
#413 := [trans #417 #415]: #416
#357 := [not-or-elim #355]: #356
#414 := [mp #357 #413]: #425
#615 := [unit-resolution #414 #612]: #423
[unit-resolution #594 #615 #614 #603]: false
unsat
c461f417e01961729e64bc338da8fe68ac7ad70e 2290 0
#2 := false
#10 := 0::Int
decl f7 :: Int
#23 := f7
#98 := -1::Int
#151 := (* -1::Int f7)
#482 := (>= f7 0::Int)
#489 := (ite #482 f7 #151)
#500 := (* -1::Int #489)
#1034 := (+ #151 #500)
#1610 := (<= #1034 0::Int)
decl f11 :: Int
#47 := f11
#219 := (* -1::Int f11)
#366 := (>= f11 0::Int)
#373 := (ite #366 f11 #219)
#384 := (* -1::Int #373)
#765 := (+ f11 #384)
#892 := (<= #765 0::Int)
#1335 := (not #892)
#671 := (= #219 #373)
#1102 := (not #671)
decl f10 :: Int
#41 := f10
#202 := (* -1::Int f10)
#395 := (>= f10 0::Int)
#402 := (ite #395 f10 #202)
#413 := (* -1::Int #402)
#762 := (+ f10 #413)
#763 := (<= #762 0::Int)
#678 := (= f10 #402)
decl f4 :: Int
#9 := f4
#569 := (>= f4 0::Int)
#483 := (not #482)
#1664 := [hypothesis]: #483
#1973 := (or #569 #482)
decl f6 :: Int
#17 := f6
#134 := (* -1::Int f6)
#511 := (>= f6 0::Int)
#518 := (ite #511 f6 #134)
#529 := (* -1::Int #518)
#747 := (+ f6 #529)
#748 := (<= #747 0::Int)
#710 := (= f6 #518)
#512 := (not #511)
#1681 := [hypothesis]: #512
#1869 := (or #482 #511)
decl f13 :: Int
#59 := f13
#66 := (= f4 f13)
#651 := (not #66)
decl f12 :: Int
#53 := f12
decl f5 :: Int
#14 := f5
#65 := (= f5 f12)
#236 := (* -1::Int f12)
#734 := (+ f5 #236)
#736 := (>= #734 0::Int)
decl f9 :: Int
#35 := f9
#185 := (* -1::Int f9)
#424 := (>= f9 0::Int)
#431 := (ite #424 f9 #185)
#442 := (* -1::Int #431)
#759 := (+ f9 #442)
#760 := (<= #759 0::Int)
#686 := (= f9 #431)
#1816 := (or #424 #511)
#750 := (+ f7 #500)
#1322 := (<= #750 0::Int)
#1505 := (not #1322)
#425 := (not #424)
#917 := [hypothesis]: #425
#1017 := (+ #134 #529)
#1035 := (<= #1017 0::Int)
#711 := (= #134 #518)
#714 := (or #511 #711)
#715 := [def-axiom]: #714
#1694 := [unit-resolution #715 #1681]: #711
#1196 := (not #711)
#1428 := (or #1196 #1035)
#1550 := (not #1035)
#1563 := [hypothesis]: #1550
#1228 := [hypothesis]: #711
#1429 := [th-lemma arith triangle-eq]: #1428
#1564 := [unit-resolution #1429 #1228 #1563]: false
#1565 := [lemma #1564]: #1428
#1695 := [unit-resolution #1565 #1694]: #1035
#1805 := (or #748 #511 #1550)
#1806 := [th-lemma arith assign-bounds 2 1]: #1805
#1807 := [unit-resolution #1806 #1695 #1681]: #748
#1108 := (>= #1017 0::Int)
#1197 := (or #1196 #1108)
#1125 := (not #1108)
#1227 := [hypothesis]: #1125
#1198 := [th-lemma arith triangle-eq]: #1197
#1229 := [unit-resolution #1198 #1228 #1227]: false
#1230 := [lemma #1229]: #1197
#1808 := [unit-resolution #1230 #1694]: #1108
decl f8 :: Int
#29 := f8
#168 := (* -1::Int f8)
#453 := (>= f8 0::Int)
#460 := (ite #453 f8 #168)
#471 := (* -1::Int #460)
#472 := (+ f9 #471)
#473 := (+ f7 #472)
#701 := (>= #473 0::Int)
#474 := (= #473 0::Int)
#99 := (* -1::Int f4)
#576 := (ite #569 f4 #99)
#587 := (* -1::Int #576)
#588 := (+ f5 #587)
decl f3 :: Int
#8 := f3
#589 := (+ f3 #588)
#590 := (= #589 0::Int)
#595 := (not #590)
#117 := (* -1::Int f3)
#540 := (>= f3 0::Int)
#547 := (ite #540 f3 #117)
#558 := (* -1::Int #547)
#559 := (+ f6 #558)
#560 := (+ f4 #559)
#561 := (= #560 0::Int)
#566 := (not #561)
#530 := (+ f7 #529)
#531 := (+ f3 #530)
#532 := (= #531 0::Int)
#537 := (not #532)
#501 := (+ f8 #500)
#502 := (+ f6 #501)
#503 := (= #502 0::Int)
#508 := (not #503)
#479 := (not #474)
#443 := (+ f10 #442)
#444 := (+ f8 #443)
#445 := (= #444 0::Int)
#450 := (not #445)
#414 := (+ f11 #413)
#415 := (+ f9 #414)
#416 := (= #415 0::Int)
#421 := (not #416)
#385 := (+ f12 #384)
#386 := (+ f10 #385)
#387 := (= #386 0::Int)
#392 := (not #387)
#337 := (>= f12 0::Int)
#344 := (ite #337 f12 #236)
#355 := (* -1::Int #344)
#356 := (+ f13 #355)
#357 := (+ f11 #356)
#358 := (= #357 0::Int)
#363 := (not #358)
#67 := (and #65 #66)
#625 := (or #67 #363 #392 #421 #450 #479 #508 #537 #566 #595)
#630 := (not #625)
#61 := (- f12)
#60 := (< f12 0::Int)
#62 := (ite #60 #61 f12)
#63 := (- #62 f11)
#64 := (= f13 #63)
#68 := (implies #64 #67)
#55 := (- f11)
#54 := (< f11 0::Int)
#56 := (ite #54 #55 f11)
#57 := (- #56 f10)
#58 := (= f12 #57)
#69 := (implies #58 #68)
#49 := (- f10)
#48 := (< f10 0::Int)
#50 := (ite #48 #49 f10)
#51 := (- #50 f9)
#52 := (= f11 #51)
#70 := (implies #52 #69)
#43 := (- f9)
#42 := (< f9 0::Int)
#44 := (ite #42 #43 f9)
#45 := (- #44 f8)
#46 := (= f10 #45)
#71 := (implies #46 #70)
#37 := (- f8)
#36 := (< f8 0::Int)
#38 := (ite #36 #37 f8)
#39 := (- #38 f7)
#40 := (= f9 #39)
#72 := (implies #40 #71)
#31 := (- f7)
#30 := (< f7 0::Int)
#32 := (ite #30 #31 f7)
#33 := (- #32 f6)
#34 := (= f8 #33)
#73 := (implies #34 #72)
#25 := (- f6)
#24 := (< f6 0::Int)
#26 := (ite #24 #25 f6)
#27 := (- #26 f3)
#28 := (= f7 #27)
#74 := (implies #28 #73)
#19 := (- f3)
#18 := (< f3 0::Int)
#20 := (ite #18 #19 f3)
#21 := (- #20 f4)
#22 := (= f6 #21)
#75 := (implies #22 #74)
#12 := (- f4)
#11 := (< f4 0::Int)
#13 := (ite #11 #12 f4)
#15 := (- #13 f5)
#16 := (= f3 #15)
#76 := (implies #16 #75)
#77 := (not #76)
#633 := (iff #77 #630)
#239 := (ite #60 #236 f12)
#245 := (+ #219 #239)
#250 := (= f13 #245)
#256 := (not #250)
#257 := (or #67 #256)
#222 := (ite #54 #219 f11)
#228 := (+ #202 #222)
#233 := (= f12 #228)
#265 := (not #233)
#266 := (or #265 #257)
#205 := (ite #48 #202 f10)
#211 := (+ #185 #205)
#216 := (= f11 #211)
#274 := (not #216)
#275 := (or #274 #266)
#188 := (ite #42 #185 f9)
#194 := (+ #168 #188)
#199 := (= f10 #194)
#283 := (not #199)
#284 := (or #283 #275)
#171 := (ite #36 #168 f8)
#177 := (+ #151 #171)
#182 := (= f9 #177)
#292 := (not #182)
#293 := (or #292 #284)
#154 := (ite #30 #151 f7)
#160 := (+ #134 #154)
#165 := (= f8 #160)
#301 := (not #165)
#302 := (or #301 #293)
#137 := (ite #24 #134 f6)
#143 := (+ #117 #137)
#148 := (= f7 #143)
#310 := (not #148)
#311 := (or #310 #302)
#120 := (ite #18 #117 f3)
#126 := (+ #99 #120)
#131 := (= f6 #126)
#319 := (not #131)
#320 := (or #319 #311)
#102 := (ite #11 #99 f4)
#108 := (* -1::Int f5)
#109 := (+ #108 #102)
#114 := (= f3 #109)
#328 := (not #114)
#329 := (or #328 #320)
#334 := (not #329)
#631 := (iff #334 #630)
#628 := (iff #329 #625)
#598 := (or #67 #363)
#601 := (or #392 #598)
#604 := (or #421 #601)
#607 := (or #450 #604)
#610 := (or #479 #607)
#613 := (or #508 #610)
#616 := (or #537 #613)
#619 := (or #566 #616)
#622 := (or #595 #619)
#626 := (iff #622 #625)
#627 := [rewrite]: #626
#623 := (iff #329 #622)
#620 := (iff #320 #619)
#617 := (iff #311 #616)
#614 := (iff #302 #613)
#611 := (iff #293 #610)
#608 := (iff #284 #607)
#605 := (iff #275 #604)
#602 := (iff #266 #601)
#599 := (iff #257 #598)
#364 := (iff #256 #363)
#361 := (iff #250 #358)
#349 := (+ #219 #344)
#352 := (= f13 #349)
#359 := (iff #352 #358)
#360 := [rewrite]: #359
#353 := (iff #250 #352)
#350 := (= #245 #349)
#347 := (= #239 #344)
#338 := (not #337)
#341 := (ite #338 #236 f12)
#345 := (= #341 #344)
#346 := [rewrite]: #345
#342 := (= #239 #341)
#339 := (iff #60 #338)
#340 := [rewrite]: #339
#343 := [monotonicity #340]: #342
#348 := [trans #343 #346]: #347
#351 := [monotonicity #348]: #350
#354 := [monotonicity #351]: #353
#362 := [trans #354 #360]: #361
#365 := [monotonicity #362]: #364
#600 := [monotonicity #365]: #599
#393 := (iff #265 #392)
#390 := (iff #233 #387)
#378 := (+ #202 #373)
#381 := (= f12 #378)
#388 := (iff #381 #387)
#389 := [rewrite]: #388
#382 := (iff #233 #381)
#379 := (= #228 #378)
#376 := (= #222 #373)
#367 := (not #366)
#370 := (ite #367 #219 f11)
#374 := (= #370 #373)
#375 := [rewrite]: #374
#371 := (= #222 #370)
#368 := (iff #54 #367)
#369 := [rewrite]: #368
#372 := [monotonicity #369]: #371
#377 := [trans #372 #375]: #376
#380 := [monotonicity #377]: #379
#383 := [monotonicity #380]: #382
#391 := [trans #383 #389]: #390
#394 := [monotonicity #391]: #393
#603 := [monotonicity #394 #600]: #602
#422 := (iff #274 #421)
#419 := (iff #216 #416)
#407 := (+ #185 #402)
#410 := (= f11 #407)
#417 := (iff #410 #416)
#418 := [rewrite]: #417
#411 := (iff #216 #410)
#408 := (= #211 #407)
#405 := (= #205 #402)
#396 := (not #395)
#399 := (ite #396 #202 f10)
#403 := (= #399 #402)
#404 := [rewrite]: #403
#400 := (= #205 #399)
#397 := (iff #48 #396)
#398 := [rewrite]: #397
#401 := [monotonicity #398]: #400
#406 := [trans #401 #404]: #405
#409 := [monotonicity #406]: #408
#412 := [monotonicity #409]: #411
#420 := [trans #412 #418]: #419
#423 := [monotonicity #420]: #422
#606 := [monotonicity #423 #603]: #605
#451 := (iff #283 #450)
#448 := (iff #199 #445)
#436 := (+ #168 #431)
#439 := (= f10 #436)
#446 := (iff #439 #445)
#447 := [rewrite]: #446
#440 := (iff #199 #439)
#437 := (= #194 #436)
#434 := (= #188 #431)
#428 := (ite #425 #185 f9)
#432 := (= #428 #431)
#433 := [rewrite]: #432
#429 := (= #188 #428)
#426 := (iff #42 #425)
#427 := [rewrite]: #426
#430 := [monotonicity #427]: #429
#435 := [trans #430 #433]: #434
#438 := [monotonicity #435]: #437
#441 := [monotonicity #438]: #440
#449 := [trans #441 #447]: #448
#452 := [monotonicity #449]: #451
#609 := [monotonicity #452 #606]: #608
#480 := (iff #292 #479)
#477 := (iff #182 #474)
#465 := (+ #151 #460)
#468 := (= f9 #465)
#475 := (iff #468 #474)
#476 := [rewrite]: #475
#469 := (iff #182 #468)
#466 := (= #177 #465)
#463 := (= #171 #460)
#454 := (not #453)
#457 := (ite #454 #168 f8)
#461 := (= #457 #460)
#462 := [rewrite]: #461
#458 := (= #171 #457)
#455 := (iff #36 #454)
#456 := [rewrite]: #455
#459 := [monotonicity #456]: #458
#464 := [trans #459 #462]: #463
#467 := [monotonicity #464]: #466
#470 := [monotonicity #467]: #469
#478 := [trans #470 #476]: #477
#481 := [monotonicity #478]: #480
#612 := [monotonicity #481 #609]: #611
#509 := (iff #301 #508)
#506 := (iff #165 #503)
#494 := (+ #134 #489)
#497 := (= f8 #494)
#504 := (iff #497 #503)
#505 := [rewrite]: #504
#498 := (iff #165 #497)
#495 := (= #160 #494)
#492 := (= #154 #489)
#486 := (ite #483 #151 f7)
#490 := (= #486 #489)
#491 := [rewrite]: #490
#487 := (= #154 #486)
#484 := (iff #30 #483)
#485 := [rewrite]: #484
#488 := [monotonicity #485]: #487
#493 := [trans #488 #491]: #492
#496 := [monotonicity #493]: #495
#499 := [monotonicity #496]: #498
#507 := [trans #499 #505]: #506
#510 := [monotonicity #507]: #509
#615 := [monotonicity #510 #612]: #614
#538 := (iff #310 #537)
#535 := (iff #148 #532)
#523 := (+ #117 #518)
#526 := (= f7 #523)
#533 := (iff #526 #532)
#534 := [rewrite]: #533
#527 := (iff #148 #526)
#524 := (= #143 #523)
#521 := (= #137 #518)
#515 := (ite #512 #134 f6)
#519 := (= #515 #518)
#520 := [rewrite]: #519
#516 := (= #137 #515)
#513 := (iff #24 #512)
#514 := [rewrite]: #513
#517 := [monotonicity #514]: #516
#522 := [trans #517 #520]: #521
#525 := [monotonicity #522]: #524
#528 := [monotonicity #525]: #527
#536 := [trans #528 #534]: #535
#539 := [monotonicity #536]: #538
#618 := [monotonicity #539 #615]: #617
#567 := (iff #319 #566)
#564 := (iff #131 #561)
#552 := (+ #99 #547)
#555 := (= f6 #552)
#562 := (iff #555 #561)
#563 := [rewrite]: #562
#556 := (iff #131 #555)
#553 := (= #126 #552)
#550 := (= #120 #547)
#541 := (not #540)
#544 := (ite #541 #117 f3)
#548 := (= #544 #547)
#549 := [rewrite]: #548
#545 := (= #120 #544)
#542 := (iff #18 #541)
#543 := [rewrite]: #542
#546 := [monotonicity #543]: #545
#551 := [trans #546 #549]: #550
#554 := [monotonicity #551]: #553
#557 := [monotonicity #554]: #556
#565 := [trans #557 #563]: #564
#568 := [monotonicity #565]: #567
#621 := [monotonicity #568 #618]: #620
#596 := (iff #328 #595)
#593 := (iff #114 #590)
#581 := (+ #108 #576)
#584 := (= f3 #581)
#591 := (iff #584 #590)
#592 := [rewrite]: #591
#585 := (iff #114 #584)
#582 := (= #109 #581)
#579 := (= #102 #576)
#570 := (not #569)
#573 := (ite #570 #99 f4)
#577 := (= #573 #576)
#578 := [rewrite]: #577
#574 := (= #102 #573)
#571 := (iff #11 #570)
#572 := [rewrite]: #571
#575 := [monotonicity #572]: #574
#580 := [trans #575 #578]: #579
#583 := [monotonicity #580]: #582
#586 := [monotonicity #583]: #585
#594 := [trans #586 #592]: #593
#597 := [monotonicity #594]: #596
#624 := [monotonicity #597 #621]: #623
#629 := [trans #624 #627]: #628
#632 := [monotonicity #629]: #631
#335 := (iff #77 #334)
#332 := (iff #76 #329)
#325 := (implies #114 #320)
#330 := (iff #325 #329)
#331 := [rewrite]: #330
#326 := (iff #76 #325)
#323 := (iff #75 #320)
#316 := (implies #131 #311)
#321 := (iff #316 #320)
#322 := [rewrite]: #321
#317 := (iff #75 #316)
#314 := (iff #74 #311)
#307 := (implies #148 #302)
#312 := (iff #307 #311)
#313 := [rewrite]: #312
#308 := (iff #74 #307)
#305 := (iff #73 #302)
#298 := (implies #165 #293)
#303 := (iff #298 #302)
#304 := [rewrite]: #303
#299 := (iff #73 #298)
#296 := (iff #72 #293)
#289 := (implies #182 #284)
#294 := (iff #289 #293)
#295 := [rewrite]: #294
#290 := (iff #72 #289)
#287 := (iff #71 #284)
#280 := (implies #199 #275)
#285 := (iff #280 #284)
#286 := [rewrite]: #285
#281 := (iff #71 #280)
#278 := (iff #70 #275)
#271 := (implies #216 #266)
#276 := (iff #271 #275)
#277 := [rewrite]: #276
#272 := (iff #70 #271)
#269 := (iff #69 #266)
#262 := (implies #233 #257)
#267 := (iff #262 #266)
#268 := [rewrite]: #267
#263 := (iff #69 #262)
#260 := (iff #68 #257)
#253 := (implies #250 #67)
#258 := (iff #253 #257)
#259 := [rewrite]: #258
#254 := (iff #68 #253)
#251 := (iff #64 #250)
#248 := (= #63 #245)
#242 := (- #239 f11)
#246 := (= #242 #245)
#247 := [rewrite]: #246
#243 := (= #63 #242)
#240 := (= #62 #239)
#237 := (= #61 #236)
#238 := [rewrite]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#249 := [trans #244 #247]: #248
#252 := [monotonicity #249]: #251
#255 := [monotonicity #252]: #254
#261 := [trans #255 #259]: #260
#234 := (iff #58 #233)
#231 := (= #57 #228)
#225 := (- #222 f10)
#229 := (= #225 #228)
#230 := [rewrite]: #229
#226 := (= #57 #225)
#223 := (= #56 #222)
#220 := (= #55 #219)
#221 := [rewrite]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#232 := [trans #227 #230]: #231
#235 := [monotonicity #232]: #234
#264 := [monotonicity #235 #261]: #263
#270 := [trans #264 #268]: #269
#217 := (iff #52 #216)
#214 := (= #51 #211)
#208 := (- #205 f9)
#212 := (= #208 #211)
#213 := [rewrite]: #212
#209 := (= #51 #208)
#206 := (= #50 #205)
#203 := (= #49 #202)
#204 := [rewrite]: #203
#207 := [monotonicity #204]: #206
#210 := [monotonicity #207]: #209
#215 := [trans #210 #213]: #214
#218 := [monotonicity #215]: #217
#273 := [monotonicity #218 #270]: #272
#279 := [trans #273 #277]: #278
#200 := (iff #46 #199)
#197 := (= #45 #194)
#191 := (- #188 f8)
#195 := (= #191 #194)
#196 := [rewrite]: #195
#192 := (= #45 #191)
#189 := (= #44 #188)
#186 := (= #43 #185)
#187 := [rewrite]: #186
#190 := [monotonicity #187]: #189
#193 := [monotonicity #190]: #192
#198 := [trans #193 #196]: #197
#201 := [monotonicity #198]: #200
#282 := [monotonicity #201 #279]: #281
#288 := [trans #282 #286]: #287
#183 := (iff #40 #182)
#180 := (= #39 #177)
#174 := (- #171 f7)
#178 := (= #174 #177)
#179 := [rewrite]: #178
#175 := (= #39 #174)
#172 := (= #38 #171)
#169 := (= #37 #168)
#170 := [rewrite]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#181 := [trans #176 #179]: #180
#184 := [monotonicity #181]: #183
#291 := [monotonicity #184 #288]: #290
#297 := [trans #291 #295]: #296
#166 := (iff #34 #165)
#163 := (= #33 #160)
#157 := (- #154 f6)
#161 := (= #157 #160)
#162 := [rewrite]: #161
#158 := (= #33 #157)
#155 := (= #32 #154)
#152 := (= #31 #151)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#164 := [trans #159 #162]: #163
#167 := [monotonicity #164]: #166
#300 := [monotonicity #167 #297]: #299
#306 := [trans #300 #304]: #305
#149 := (iff #28 #148)
#146 := (= #27 #143)
#140 := (- #137 f3)
#144 := (= #140 #143)
#145 := [rewrite]: #144
#141 := (= #27 #140)
#138 := (= #26 #137)
#135 := (= #25 #134)
#136 := [rewrite]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#147 := [trans #142 #145]: #146
#150 := [monotonicity #147]: #149
#309 := [monotonicity #150 #306]: #308
#315 := [trans #309 #313]: #314
#132 := (iff #22 #131)
#129 := (= #21 #126)
#123 := (- #120 f4)
#127 := (= #123 #126)
#128 := [rewrite]: #127
#124 := (= #21 #123)
#121 := (= #20 #120)
#118 := (= #19 #117)
#119 := [rewrite]: #118
#122 := [monotonicity #119]: #121
#125 := [monotonicity #122]: #124
#130 := [trans #125 #128]: #129
#133 := [monotonicity #130]: #132
#318 := [monotonicity #133 #315]: #317
#324 := [trans #318 #322]: #323
#115 := (iff #16 #114)
#112 := (= #15 #109)
#105 := (- #102 f5)
#110 := (= #105 #109)
#111 := [rewrite]: #110
#106 := (= #15 #105)
#103 := (= #13 #102)
#100 := (= #12 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#107 := [monotonicity #104]: #106
#113 := [trans #107 #111]: #112
#116 := [monotonicity #113]: #115
#327 := [monotonicity #116 #324]: #326
#333 := [trans #327 #331]: #332
#336 := [monotonicity #333]: #335
#634 := [trans #336 #632]: #633
#97 := [asserted]: #77
#635 := [mp #97 #634]: #630
#642 := [not-or-elim #635]: #474
#871 := (or #479 #701)
#872 := [th-lemma arith triangle-eq]: #871
#873 := [unit-resolution #872 #642]: #701
#709 := (>= #502 0::Int)
#643 := [not-or-elim #635]: #503
#1502 := (or #508 #709)
#1503 := [th-lemma arith triangle-eq]: #1502
#1504 := [unit-resolution #1503 #643]: #709
#753 := (+ f8 #471)
#754 := (<= #753 0::Int)
#694 := (= f8 #460)
#1803 := (or #453 #424 #511)
#757 := (+ #168 #471)
#761 := (<= #757 0::Int)
#986 := (not #761)
#918 := [hypothesis]: #454
#1683 := (or #511 #483 #453)
#702 := (= f7 #489)
#909 := [hypothesis]: #482
#704 := (or #483 #702)
#705 := [def-axiom]: #704
#1663 := [unit-resolution #705 #909]: #702
#1059 := (not #702)
#1493 := (or #1059 #1322)
#1494 := [th-lemma arith triangle-eq]: #1493
#1680 := [unit-resolution #1494 #1663]: #1322
#1682 := [th-lemma arith farkas 1 1 1 1 1 #909 #1681 #918 #1504 #1680]: false
#1684 := [lemma #1682]: #1683
#1800 := [unit-resolution #1684 #918 #1681]: #483
#1616 := (or #482 #986 #424 #453)
#875 := (not #701)
#1614 := (or #482 #986 #875 #424 #453)
#1615 := [th-lemma arith assign-bounds 1 1 1 1]: #1614
#1617 := [unit-resolution #1615 #873]: #1616
#1801 := [unit-resolution #1617 #1800 #917 #918]: #986
#695 := (= #168 #460)
#698 := (or #453 #695)
#699 := [def-axiom]: #698
#919 := [unit-resolution #699 #918]: #695
#920 := (not #695)
#921 := (or #920 #761)
#922 := [th-lemma arith triangle-eq]: #921
#1802 := [unit-resolution #922 #919 #1801]: false
#1804 := [lemma #1802]: #1803
#1809 := [unit-resolution #1804 #917 #1681]: #453
#696 := (or #454 #694)
#697 := [def-axiom]: #696
#1810 := [unit-resolution #697 #1809]: #694
#852 := (not #694)
#860 := (or #852 #754)
#861 := [th-lemma arith triangle-eq]: #860
#1811 := [unit-resolution #861 #1810]: #754
#1506 := (not #709)
#1014 := (not #748)
#874 := (not #754)
#1792 := (or #1125 #874 #875 #424 #1014 #1505 #1506)
#1793 := [th-lemma arith assign-bounds 2 2 2 1 2 2]: #1792
#1812 := [unit-resolution #1793 #1811 #1504 #873 #1808 #1807 #917]: #1505
#1648 := (or #482 #424 #874 #875 #454)
#1649 := [th-lemma arith assign-bounds 1 1 1 1]: #1648
#1813 := [unit-resolution #1649 #1811 #873 #917 #1809]: #482
#1814 := [unit-resolution #705 #1813]: #702
#1815 := [unit-resolution #1494 #1814 #1812]: false
#1817 := [lemma #1815]: #1816
#1823 := [unit-resolution #1817 #1681]: #424
#688 := (or #425 #686)
#689 := [def-axiom]: #688
#1824 := [unit-resolution #689 #1823]: #686
#882 := (not #686)
#883 := (or #882 #760)
#884 := [th-lemma arith triangle-eq]: #883
#1825 := [unit-resolution #884 #1824]: #760
#1821 := (or #453 #511)
#1669 := (not #1610)
#1673 := (or #511 #453 #482 #1669 #1506)
#1674 := [th-lemma arith assign-bounds 1 1 1 1]: #1673
#1818 := [unit-resolution #1674 #918 #1504 #1681 #1800]: #1669
#703 := (= #151 #489)
#706 := (or #482 #703)
#707 := [def-axiom]: #706
#1819 := [unit-resolution #707 #1800]: #703
#1052 := (not #703)
#1666 := (or #1052 #1610)
#1667 := [th-lemma arith triangle-eq]: #1666
#1820 := [unit-resolution #1667 #1819 #1818]: false
#1822 := [lemma #1820]: #1821
#1826 := [unit-resolution #1822 #1681]: #453
#1827 := [unit-resolution #697 #1826]: #694
#1828 := [unit-resolution #861 #1827]: #754
#938 := (not #760)
#1416 := (or #482 #874 #938 #395)
#693 := (>= #444 0::Int)
#641 := [not-or-elim #635]: #445
#857 := (or #450 #693)
#858 := [th-lemma arith triangle-eq]: #857
#859 := [unit-resolution #858 #641]: #693
#939 := (not #693)
#1382 := (or #482 #874 #875 #938 #939 #395)
#1383 := [th-lemma arith assign-bounds 1 1 1 1 1]: #1382
#1417 := [unit-resolution #1383 #873 #859]: #1416
#1829 := [unit-resolution #1417 #1664 #1828 #1825]: #395
#680 := (or #396 #678)
#681 := [def-axiom]: #680
#1830 := [unit-resolution #681 #1829]: #678
#802 := (not #678)
#803 := (or #802 #763)
#804 := [th-lemma arith triangle-eq]: #803
#1831 := [unit-resolution #804 #1830]: #763
#766 := (+ #202 #413)
#792 := (<= #766 0::Int)
#945 := (not #763)
#1215 := (or #792 #396 #945)
#1216 := [th-lemma arith assign-bounds 2 -1]: #1215
#1832 := [unit-resolution #1216 #1831 #1829]: #792
#755 := (>= #753 0::Int)
#853 := (or #852 #755)
#854 := [th-lemma arith triangle-eq]: #853
#1833 := [unit-resolution #854 #1827]: #755
#890 := (+ #219 #384)
#974 := (>= #890 0::Int)
#684 := (<= #415 0::Int)
#640 := [not-or-elim #635]: #416
#894 := (or #421 #684)
#915 := [th-lemma arith triangle-eq]: #894
#916 := [unit-resolution #915 #640]: #684
#751 := (>= #759 0::Int)
#1436 := (or #882 #751)
#1437 := [th-lemma arith triangle-eq]: #1436
#1834 := [unit-resolution #1437 #1824]: #751
#893 := (>= #762 0::Int)
#951 := (or #802 #893)
#952 := [th-lemma arith triangle-eq]: #951
#1835 := [unit-resolution #952 #1830]: #893
#692 := (<= #444 0::Int)
#1023 := (or #450 #692)
#1024 := [th-lemma arith triangle-eq]: #1023
#1025 := [unit-resolution #1024 #641]: #692
#1665 := [unit-resolution #707 #1664]: #703
#1668 := [unit-resolution #1667 #1665]: #1610
#1512 := (not #692)
#1029 := (not #751)
#985 := (not #684)
#984 := (not #893)
#1836 := (or #367 #984 #985 #1029 #1512 #1669 #1506 #511 #482)
#1837 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1]: #1836
#1838 := [unit-resolution #1837 #1668 #1025 #1664 #1504 #1681 #1835 #1834 #916]: #367
#674 := (or #366 #671)
#675 := [def-axiom]: #674
#1839 := [unit-resolution #675 #1838]: #671
#1103 := (or #1102 #974)
#1047 := (not #974)
#1150 := [hypothesis]: #1047
#1178 := [hypothesis]: #671
#1104 := [th-lemma arith triangle-eq]: #1103
#1179 := [unit-resolution #1104 #1178 #1150]: false
#1180 := [lemma #1179]: #1103
#1840 := [unit-resolution #1180 #1839]: #974
#741 := (+ f4 #587)
#742 := (<= #741 0::Int)
#726 := (= f4 #576)
#744 := (+ f3 #558)
#745 := (<= #744 0::Int)
#1013 := (not #745)
#1321 := [hypothesis]: #1013
#718 := (= f3 #547)
#746 := (>= #744 0::Int)
#1396 := (or #745 #746)
#1397 := [th-lemma arith farkas 1 1]: #1396
#1398 := [unit-resolution #1397 #1321]: #746
#877 := (not #746)
#1394 := (or #540 #877)
#1221 := (+ #117 #558)
#1222 := (<= #1221 0::Int)
#1243 := (not #1222)
#925 := [hypothesis]: #746
#1257 := [hypothesis]: #541
#1390 := (or #877 #540 #1243)
#1391 := [th-lemma arith assign-bounds 2 1]: #1390
#1392 := [unit-resolution #1391 #1257 #925]: #1243
#719 := (= #117 #547)
#722 := (or #540 #719)
#723 := [def-axiom]: #722
#1258 := [unit-resolution #723 #1257]: #719
#1259 := (not #719)
#1260 := (or #1259 #1222)
#1261 := [th-lemma arith triangle-eq]: #1260
#1393 := [unit-resolution #1261 #1258 #1392]: false
#1395 := [lemma #1393]: #1394
#1399 := [unit-resolution #1395 #1398]: #540
#720 := (or #541 #718)
#721 := [def-axiom]: #720
#1400 := [unit-resolution #721 #1399]: #718
#864 := (not #718)
#1075 := (or #864 #745)
#1076 := [th-lemma arith triangle-eq]: #1075
#1401 := [unit-resolution #1076 #1400 #1321]: false
#1402 := [lemma #1401]: #745
#725 := (>= #560 0::Int)
#645 := [not-or-elim #635]: #561
#1003 := (or #566 #725)
#1004 := [th-lemma arith triangle-eq]: #1003
#1005 := [unit-resolution #1004 #645]: #725
#717 := (>= #531 0::Int)
#644 := [not-or-elim #635]: #532
#998 := (or #537 #717)
#999 := [th-lemma arith triangle-eq]: #998
#1000 := [unit-resolution #999 #644]: #717
#1090 := (not #717)
#1081 := (not #725)
#1841 := (or #569 #1081 #1090 #482 #1550 #1013 #511)
#1842 := [th-lemma arith assign-bounds 1 1 1 1 1 2]: #1841
#1843 := [unit-resolution #1842 #1664 #1000 #1005 #1681 #1402 #1695]: #569
#728 := (or #570 #726)
#729 := [def-axiom]: #728
#1844 := [unit-resolution #729 #1843]: #726
#825 := (not #726)
#826 := (or #825 #742)
#827 := [th-lemma arith triangle-eq]: #826
#1845 := [unit-resolution #827 #1844]: #742
#902 := (not #792)
#816 := (not #755)
#840 := (not #742)
#1846 := (or #1047 #840 #736 #816 #902 #874 #945 #938)
#1176 := (or #1047 #1013 #840 #736 #816 #902 #874 #945 #938)
#1039 := [hypothesis]: #974
#685 := (>= #415 0::Int)
#798 := (or #421 #685)
#799 := [th-lemma arith triangle-eq]: #798
#800 := [unit-resolution #799 #640]: #685
#1169 := [hypothesis]: #792
#700 := (<= #473 0::Int)
#806 := (or #479 #700)
#807 := [th-lemma arith triangle-eq]: #806
#808 := [unit-resolution #807 #642]: #700
#809 := [hypothesis]: #755
#708 := (<= #502 0::Int)
#810 := (or #508 #708)
#811 := [th-lemma arith triangle-eq]: #810
#812 := [unit-resolution #811 #643]: #708
#752 := (>= #750 0::Int)
#1036 := (>= #1034 0::Int)
#1046 := (not #1036)
#676 := (<= #386 0::Int)
#639 := [not-or-elim #635]: #387
#770 := (or #392 #676)
#771 := [th-lemma arith triangle-eq]: #770
#772 := [unit-resolution #771 #639]: #676
#1043 := [hypothesis]: #760
#1037 := [hypothesis]: #763
#1044 := [hypothesis]: #754
#1002 := [hypothesis]: #745
#1162 := [hypothesis]: #742
#929 := (not #736)
#930 := [hypothesis]: #929
#733 := (>= #589 0::Int)
#646 := [not-or-elim #635]: #590
#830 := (or #595 #733)
#831 := [th-lemma arith triangle-eq]: #830
#832 := [unit-resolution #831 #646]: #733
#903 := (not #685)
#841 := (not #733)
#839 := (not #708)
#983 := (not #676)
#1082 := (or #1047 #1046 #874 #938 #939 #875 #983 #1081 #1013 #839 #840 #841 #736 #945 #903)
#1083 := [th-lemma arith assign-bounds 1 -1 -2 2 1 -1 1 -1 -1 -1 1 -1 -1 1]: #1082
#1170 := [unit-resolution #1083 #1039 #859 #873 #812 #1005 #832 #930 #1162 #1002 #1044 #1037 #1043 #800 #772]: #1046
#1053 := (or #1052 #1036)
#1050 := [hypothesis]: #1046
#1051 := [hypothesis]: #703
#1054 := [th-lemma arith triangle-eq]: #1053
#1055 := [unit-resolution #1054 #1051 #1050]: false
#1056 := [lemma #1055]: #1053
#1171 := [unit-resolution #1056 #1170]: #1052
#1172 := [unit-resolution #707 #1171]: #482
#1173 := [unit-resolution #705 #1172]: #702
#1060 := (or #1059 #752)
#815 := (not #752)
#1057 := [hypothesis]: #815
#1058 := [hypothesis]: #702
#1061 := [th-lemma arith triangle-eq]: #1060
#1062 := [unit-resolution #1061 #1058 #1057]: false
#1063 := [lemma #1062]: #1060
#1174 := [unit-resolution #1063 #1173]: #752
#1175 := [th-lemma arith farkas -1 1 -1 -1 1 -1 1 -1 1 -1 -1 1 1 #772 #1005 #1002 #1162 #832 #930 #1174 #812 #809 #808 #1169 #800 #1039]: false
#1177 := [lemma #1175]: #1176
#1847 := [unit-resolution #1177 #1402]: #1846
#1848 := [unit-resolution #1847 #1845 #1840 #1825 #1833 #1832 #1828 #1831]: #736
#735 := (<= #734 0::Int)
#1481 := (>= #741 0::Int)
#1537 := (or #825 #1481)
#1538 := [th-lemma arith triangle-eq]: #1537
#1849 := [unit-resolution #1538 #1844]: #1481
#1608 := (or #395 #540)
#737 := (* -1::Int f13)
#738 := (+ f4 #737)
#739 := (<= #738 0::Int)
#653 := (>= #357 0::Int)
#638 := [not-or-elim #635]: #358
#1471 := (or #363 #653)
#1472 := [th-lemma arith triangle-eq]: #1471
#1473 := [unit-resolution #1472 #638]: #653
#1320 := (>= #1221 0::Int)
#1566 := (or #1259 #1320)
#1567 := [th-lemma arith triangle-eq]: #1566
#1568 := [unit-resolution #1567 #1258]: #1320
#677 := (>= #386 0::Int)
#1006 := (or #392 #677)
#1007 := [th-lemma arith triangle-eq]: #1006
#1008 := [unit-resolution #1007 #639]: #677
#756 := (+ f12 #355)
#1109 := (<= #756 0::Int)
#658 := (= f12 #344)
#895 := [hypothesis]: #396
#740 := (>= #738 0::Int)
#1466 := (or #740 #395 #540)
#1262 := [unit-resolution #1261 #1258]: #1222
#775 := (not #740)
#776 := [hypothesis]: #775
#758 := (>= #756 0::Int)
#1085 := (or #740 #739)
#1086 := [th-lemma arith farkas 1 1]: #1085
#1087 := [unit-resolution #1086 #776]: #739
#1089 := (not #739)
#1440 := (or #366 #540 #1089 #395)
#679 := (= #202 #402)
#682 := (or #395 #679)
#683 := [def-axiom]: #682
#896 := [unit-resolution #683 #895]: #679
#897 := (not #679)
#898 := (or #897 #792)
#899 := [th-lemma arith triangle-eq]: #898
#900 := [unit-resolution #899 #896]: #792
#901 := [hypothesis]: #367
#1405 := (or #424 #395 #902 #366)
#904 := (or #424 #395 #902 #903 #366)
#905 := [th-lemma arith assign-bounds 1 1 1 1]: #904
#1406 := [unit-resolution #905 #800]: #1405
#1407 := [unit-resolution #1406 #901 #900 #895]: #424
#1408 := [unit-resolution #689 #1407]: #686
#1409 := [unit-resolution #884 #1408]: #760
#1410 := (or #395 #425 #938 #453)
#940 := (or #395 #425 #938 #939 #453)
#941 := [th-lemma arith assign-bounds 1 1 1 1]: #940
#1411 := [unit-resolution #941 #859]: #1410
#1412 := [unit-resolution #1411 #1409 #895 #1407]: #453
#1413 := [unit-resolution #697 #1412]: #694
#1414 := [unit-resolution #854 #1413]: #755
#1415 := [unit-resolution #861 #1413]: #754
#1418 := [unit-resolution #1417 #1415 #895 #1409]: #482
#1419 := [unit-resolution #705 #1418]: #702
#1420 := [unit-resolution #1063 #1419]: #752
#1424 := (or #512 #815 #816 #395 #902 #366)
#1421 := (not #700)
#1422 := (or #512 #815 #839 #816 #1421 #395 #902 #903 #366)
#1423 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1]: #1422
#1425 := [unit-resolution #1423 #800 #808 #812]: #1424
#1426 := [unit-resolution #1425 #1420 #900 #901 #1414 #895]: #512
#1427 := [unit-resolution #715 #1426]: #711
#1430 := [unit-resolution #1429 #1427]: #1035
#1357 := [unit-resolution #675 #901]: #671
#1358 := [unit-resolution #1180 #1357]: #974
#1124 := [hypothesis]: #739
#652 := (<= #357 0::Int)
#777 := (or #363 #652)
#778 := [th-lemma arith triangle-eq]: #777
#779 := [unit-resolution #778 #638]: #652
#891 := (<= #890 0::Int)
#1360 := (or #1102 #891)
#1361 := [th-lemma arith triangle-eq]: #1360
#1362 := [unit-resolution #1361 #1357]: #891
#1030 := (not #891)
#1431 := (or #337 #395 #366 #1030)
#1336 := (not #677)
#1363 := (or #337 #395 #366 #1030 #1336)
#1364 := [th-lemma arith assign-bounds 1 1 1 1]: #1363
#1432 := [unit-resolution #1364 #1008]: #1431
#1433 := [unit-resolution #1432 #1362 #895 #901]: #337
#656 := (or #338 #658)
#657 := [def-axiom]: #656
#1434 := [unit-resolution #657 #1433]: #658
#847 := (not #658)
#848 := (or #847 #758)
#849 := [th-lemma arith triangle-eq]: #848
#1435 := [unit-resolution #849 #1434]: #758
#1438 := [unit-resolution #1437 #1408]: #751
#1439 := [th-lemma arith farkas 1 2 3 3 1 1 2 2 2 2 1 1 1 1 1 1 1 1 #1000 #1257 #1414 #808 #1438 #1025 #1420 #812 #900 #800 #1435 #779 #1124 #1262 #1005 #1358 #772 #1430]: false
#1441 := [lemma #1439]: #1440
#1404 := [unit-resolution #1441 #1087 #1257 #895]: #366
#670 := (= f11 #373)
#672 := (or #367 #670)
#673 := [def-axiom]: #672
#1442 := [unit-resolution #673 #1404]: #670
#787 := (not #670)
#1009 := (or #787 #892)
#1010 := [th-lemma arith triangle-eq]: #1009
#1443 := [unit-resolution #1010 #1442]: #892
#1444 := (or #337 #395 #367 #1335)
#1337 := (or #337 #395 #367 #1335 #1336)
#1338 := [th-lemma arith assign-bounds 1 1 1 1]: #1337
#1445 := [unit-resolution #1338 #1008]: #1444
#1446 := [unit-resolution #1445 #1443 #895 #1404]: #337
#1447 := [unit-resolution #657 #1446]: #658
#1448 := [unit-resolution #849 #1447]: #758
#782 := (not #758)
#1253 := (or #424 #1243 #740 #782 #395)
#1110 := (+ #185 #442)
#1111 := (<= #1110 0::Int)
#687 := (= #185 #431)
#690 := (or #424 #687)
#691 := [def-axiom]: #690
#1114 := [unit-resolution #691 #917]: #687
#1115 := (not #687)
#1116 := (or #1115 #1111)
#1117 := [th-lemma arith triangle-eq]: #1116
#1118 := [unit-resolution #1117 #1114]: #1111
#1119 := (not #1111)
#1132 := (or #395 #939 #453 #424 #1119)
#1133 := [th-lemma arith assign-bounds 1 1 1 1]: #1132
#1231 := [unit-resolution #1133 #1118 #859 #895 #917]: #453
#1232 := [unit-resolution #697 #1231]: #694
#1233 := [unit-resolution #861 #1232]: #754
#1234 := (or #482 #874 #875 #424 #1119 #395 #939)
#1235 := [th-lemma arith assign-bounds 1 1 2 1 1 1]: #1234
#1236 := [unit-resolution #1235 #1233 #859 #873 #895 #1118 #917]: #482
#1237 := [unit-resolution #705 #1236]: #702
#1238 := [unit-resolution #1063 #1237]: #752
#716 := (<= #531 0::Int)
#833 := (or #537 #716)
#834 := [th-lemma arith triangle-eq]: #833
#835 := [unit-resolution #834 #644]: #716
#749 := (>= #747 0::Int)
#1239 := [hypothesis]: #1222
#768 := [hypothesis]: #758
#767 := (>= #765 0::Int)
#1240 := [unit-resolution #905 #917 #800 #900 #895]: #366
#1241 := [unit-resolution #673 #1240]: #670
#788 := (or #787 #767)
#781 := (not #767)
#785 := [hypothesis]: #781
#786 := [hypothesis]: #670
#789 := [th-lemma arith triangle-eq]: #788
#790 := [unit-resolution #789 #786 #785]: false
#791 := [lemma #790]: #788
#1242 := [unit-resolution #791 #1241]: #767
#1088 := (not #652)
#838 := (not #716)
#1244 := (or #1125 #838 #1243 #1081 #781 #983 #1088 #1089 #782 #874 #875 #424 #1119 #939)
#1245 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1 1 1 2 1 1]: #1244
#1246 := [unit-resolution #1245 #917 #772 #859 #873 #835 #1005 #1087 #1233 #1242 #768 #779 #1118 #1239]: #1125
#1247 := [unit-resolution #1230 #1246]: #1196
#1248 := [unit-resolution #715 #1247]: #511
#712 := (or #512 #710)
#713 := [def-axiom]: #712
#1249 := [unit-resolution #713 #1248]: #710
#820 := (not #710)
#821 := (or #820 #749)
#822 := [th-lemma arith triangle-eq]: #821
#1250 := [unit-resolution #822 #1249]: #749
#1251 := [unit-resolution #854 #1232]: #755
#1252 := [th-lemma arith farkas -1 -1/2 1/2 1/2 -1/2 -1/2 -1/2 1/2 1/2 -1/2 1/2 -1/2 -1/2 1/2 1 #812 #1239 #1005 #1242 #772 #779 #776 #768 #1251 #808 #1250 #835 #1118 #859 #1238]: false
#1254 := [lemma #1252]: #1253
#1449 := [unit-resolution #1254 #1448 #895 #776 #1262]: #424
#1450 := [unit-resolution #689 #1449]: #686
#1451 := [unit-resolution #884 #1450]: #760
#1452 := [unit-resolution #1411 #1451 #895 #1449]: #453
#1453 := [unit-resolution #697 #1452]: #694
#1454 := [unit-resolution #861 #1453]: #754
#1455 := [unit-resolution #1417 #1454 #895 #1451]: #482
#1456 := [unit-resolution #705 #1455]: #702
#1457 := [unit-resolution #1063 #1456]: #752
#1458 := [unit-resolution #854 #1453]: #755
#1459 := [unit-resolution #791 #1442]: #767
#1226 := (or #1125 #1243 #781 #740 #782 #874 #938)
#774 := [hypothesis]: #767
#1123 := [hypothesis]: #1108
#1225 := [th-lemma arith farkas -1 1 1 -1 -1 1 1 1 -1 1 -1 -1 1 #1123 #835 #1239 #1005 #774 #772 #779 #776 #768 #1044 #873 #859 #1043]: false
#1255 := [lemma #1225]: #1226
#1460 := [unit-resolution #1255 #1454 #1459 #776 #1448 #1451 #1262]: #1125
#1461 := [unit-resolution #1230 #1460]: #1196
#1462 := [unit-resolution #715 #1461]: #511
#1463 := [unit-resolution #713 #1462]: #710
#1464 := [unit-resolution #822 #1463]: #749
#1465 := [th-lemma arith farkas 1/2 -1/2 -1/2 1/2 1/2 1/2 -1/2 -1/2 -1/2 1/2 -1/2 1/2 -1/2 1 -1 1 #1464 #835 #1451 #859 #1459 #1448 #779 #776 #1262 #1005 #772 #1458 #808 #1457 #812 #1449]: false
#1467 := [lemma #1465]: #1466
#1569 := [unit-resolution #1467 #895 #1257]: #740
#1478 := (not #1320)
#1479 := (or #366 #775 #1478 #395)
#724 := (<= #560 0::Int)
#868 := (or #566 #724)
#869 := [th-lemma arith triangle-eq]: #868
#870 := [unit-resolution #869 #645]: #724
#1469 := [hypothesis]: #1320
#1470 := [hypothesis]: #740
#1474 := (or #847 #1109)
#1475 := [th-lemma arith triangle-eq]: #1474
#1476 := [unit-resolution #1475 #1434]: #1109
#1477 := [th-lemma arith farkas 1 1 1 1 1 1 1 1 1 1 1 2 1 1 #1414 #808 #1000 #1438 #1025 #1476 #1473 #1470 #1469 #870 #1008 #901 #1362 #1430]: false
#1480 := [lemma #1477]: #1479
#1570 := [unit-resolution #1480 #1569 #1568 #895]: #366
#1571 := [unit-resolution #673 #1570]: #670
#1572 := [unit-resolution #1010 #1571]: #892
#1573 := [unit-resolution #1445 #1572 #895 #1570]: #337
#1574 := [unit-resolution #657 #1573]: #658
#1575 := [unit-resolution #1475 #1574]: #1109
#1545 := (or #424 #775 #1478 #395)
#1468 := (>= #1110 0::Int)
#1482 := (or #1115 #1468)
#1483 := [th-lemma arith triangle-eq]: #1482
#1484 := [unit-resolution #1483 #1114]: #1468
#1120 := (or #760 #424 #1119)
#1121 := [th-lemma arith assign-bounds 2 1]: #1120
#1485 := [unit-resolution #1121 #1118 #917]: #760
#1486 := (or #395 #453 #424 #1119)
#1487 := [unit-resolution #1133 #859]: #1486
#1488 := [unit-resolution #1487 #1118 #895 #917]: #453
#1489 := [unit-resolution #697 #1488]: #694
#1490 := [unit-resolution #861 #1489]: #754
#1491 := [unit-resolution #1417 #1490 #895 #1485]: #482
#1492 := [unit-resolution #705 #1491]: #702
#1495 := [unit-resolution #1494 #1492]: #1322
#1496 := [unit-resolution #1480 #1470 #1469 #895]: #366
#1497 := [unit-resolution #673 #1496]: #670
#1498 := [unit-resolution #1010 #1497]: #892
#1499 := [unit-resolution #1445 #1498 #895 #1496]: #337
#1500 := [unit-resolution #657 #1499]: #658
#1501 := [unit-resolution #1475 #1500]: #1109
#1507 := (or #511 #874 #875 #1505 #1506 #424)
#1508 := [th-lemma arith assign-bounds 1 1 1 1 1]: #1507
#1509 := [unit-resolution #1508 #917 #1504 #873 #1490 #1495]: #511
#1510 := [unit-resolution #713 #1509]: #710
#1040 := (or #820 #748)
#1041 := [th-lemma arith triangle-eq]: #1040
#1511 := [unit-resolution #1041 #1510]: #748
#1515 := (not #1468)
#876 := (not #724)
#1514 := (not #653)
#1513 := (not #1109)
#1516 := (or #739 #1014 #1090 #1512 #874 #875 #1513 #1514 #1478 #876 #1335 #1336 #1515 #1505 #1506)
#1517 := [th-lemma arith assign-bounds -1 1 -1 -1 1 -1 1 1 -1 -1 1 1 -2 2]: #1516
#1518 := [unit-resolution #1517 #1490 #1025 #873 #1504 #1000 #870 #1473 #1008 #1498 #1511 #1501 #1495 #1469 #1484]: #739
#1519 := (or #66 #1089 #775)
#1520 := [th-lemma arith triangle-eq]: #1519
#1521 := [unit-resolution #1520 #1518 #1470]: #66
#1403 := (>= #766 0::Int)
#1522 := (or #897 #1403)
#1523 := [th-lemma arith triangle-eq]: #1522
#1524 := [unit-resolution #1523 #896]: #1403
#1525 := (or #569 #1513 #1514 #775 #395 #1335 #1336)
#1526 := [th-lemma arith assign-bounds 1 1 1 1 1 1]: #1525
#1527 := [unit-resolution #1526 #895 #1008 #1473 #1470 #1498 #1501]: #569
#1528 := [unit-resolution #729 #1527]: #726
#1529 := [unit-resolution #827 #1528]: #742
#1530 := (not #1403)
#1531 := (or #736 #840 #841 #1513 #1514 #775 #1530 #985 #874 #875 #1505 #1506 #1478 #876 #1335 #1336)
#1532 := [th-lemma arith assign-bounds 1 -1 2 -2 -2 -1 1 1 -1 1 -1 -1 1 1 -1]: #1531
#1533 := [unit-resolution #1532 #1529 #916 #873 #1504 #870 #832 #1473 #1470 #1008 #1490 #1498 #1501 #1495 #1469 #1524]: #736
#732 := (<= #589 0::Int)
#1534 := (or #595 #732)
#1535 := [th-lemma arith triangle-eq]: #1534
#1536 := [unit-resolution #1535 #646]: #732
#1539 := [unit-resolution #1538 #1528]: #1481
#1540 := [th-lemma arith assign-bounds 1 -1 -1 1 -1 1 -3 3 1 -1 -1 1 -2 2 -2 2 #1539 #1536 #900 #800 #1490 #873 #1495 #1504 #1469 #870 #1498 #1008 #1511 #1000 #1025 #1484]: #735
#842 := (not #735)
#1541 := (or #65 #842 #929)
#1542 := [th-lemma arith triangle-eq]: #1541
#1543 := [unit-resolution #1542 #1540 #1533]: #65
#650 := (not #65)
#648 := (or #650 #651)
#636 := (not #67)
#663 := (iff #636 #648)
#649 := (not #648)
#666 := (not #649)
#665 := (iff #666 #648)
#662 := [rewrite]: #665
#667 := (iff #636 #666)
#668 := (iff #67 #649)
#669 := [rewrite]: #668
#664 := [monotonicity #669]: #667
#660 := [trans #664 #662]: #663
#637 := [not-or-elim #635]: #636
#661 := [mp #637 #660]: #648
#1544 := [unit-resolution #661 #1543 #1521]: false
#1546 := [lemma #1544]: #1545
#1576 := [unit-resolution #1546 #1569 #1568 #895]: #424
#1577 := [unit-resolution #689 #1576]: #686
#1578 := [unit-resolution #1437 #1577]: #751
#1579 := [unit-resolution #884 #1577]: #760
#1580 := [unit-resolution #1411 #1579 #895 #1576]: #453
#1581 := [unit-resolution #697 #1580]: #694
#1582 := [unit-resolution #861 #1581]: #754
#1583 := [unit-resolution #1417 #1582 #895 #1579]: #482
#1584 := [unit-resolution #705 #1583]: #702
#1585 := [unit-resolution #1063 #1584]: #752
#1586 := [unit-resolution #854 #1581]: #755
#1587 := [unit-resolution #1526 #895 #1008 #1473 #1569 #1572 #1575]: #569
#1588 := [unit-resolution #729 #1587]: #726
#1589 := [unit-resolution #1538 #1588]: #1481
#1590 := [unit-resolution #827 #1588]: #742
#1591 := [unit-resolution #1494 #1584]: #1322
#1592 := [unit-resolution #1532 #1591 #916 #873 #1504 #870 #832 #1582 #1569 #1590 #1008 #1572 #1575 #1473 #1568 #1524]: #736
#1560 := (not #1481)
#1561 := (or #1550 #929 #775 #1560 #902 #816 #815 #1478 #1335 #1029 #1513)
#1547 := [hypothesis]: #1109
#1026 := [hypothesis]: #751
#1548 := [hypothesis]: #892
#1549 := [hypothesis]: #1035
#1551 := (or #739 #1090 #1513 #1514 #1478 #876 #1335 #1336 #1029 #816 #1421 #1512 #1550)
#1552 := [th-lemma arith assign-bounds 1 -1 1 1 -1 -1 1 1 1 -1 -1 -1]: #1551
#1553 := [unit-resolution #1552 #1549 #1025 #808 #1000 #870 #1473 #809 #1548 #1026 #1008 #1547 #1469]: #739
#1554 := [unit-resolution #1520 #1553 #1470]: #66
#1555 := [hypothesis]: #736
#813 := [hypothesis]: #752
#1556 := [hypothesis]: #1481
#1557 := [th-lemma arith assign-bounds 1 -1 -1 1 3 -3 1 -1 1 -1 -1 1 2 2 -2 -2 #1556 #1536 #1169 #800 #809 #808 #813 #812 #1469 #870 #1548 #1008 #1000 #1026 #1025 #1549]: #735
#1558 := [unit-resolution #1542 #1557 #1555]: #65
#1559 := [unit-resolution #661 #1558 #1554]: false
#1562 := [lemma #1559]: #1561
#1593 := [unit-resolution #1562 #1592 #1569 #1589 #900 #1586 #1585 #1568 #1572 #1578 #1575]: #1550
#1594 := [unit-resolution #1565 #1593]: #1196
#1595 := [unit-resolution #715 #1594]: #511
#1596 := [unit-resolution #713 #1595]: #710
#1597 := [unit-resolution #1041 #1596]: #748
#1598 := (or #1468 #816 #1421 #512 #815 #839 #1029)
#1599 := [th-lemma arith assign-bounds -2 2 -2 -2 2 -1]: #1598
#1600 := [unit-resolution #1599 #1595 #812 #1585 #1586 #1578 #808]: #1468
#1601 := [unit-resolution #1517 #1600 #1025 #873 #1504 #1000 #870 #1591 #1582 #1572 #1597 #1575 #1008 #1568 #1473]: #739
#1602 := [unit-resolution #1520 #1601 #1569]: #66
#1603 := [unit-resolution #661 #1602]: #650
#1604 := [unit-resolution #1542 #1603 #1592]: #842
#1605 := [unit-resolution #791 #1571]: #767
#1606 := [unit-resolution #849 #1574]: #758
#1607 := [th-lemma arith farkas -1 1 1/2 -1/2 -1/2 1/2 -1/2 1/2 -1/2 1/2 -1/2 -1/2 1/2 -1/2 1/2 1 #1606 #779 #1262 #1005 #1605 #772 #1589 #1536 #1604 #900 #800 #1586 #808 #1585 #812 #1601]: false
#1609 := [lemma #1607]: #1608
#1626 := [unit-resolution #1609 #1257]: #395
#1716 := (or #511 #540)
#1692 := (or #453 #540)
#1678 := (or #482 #540 #453)
#1670 := (or #1014 #1090 #540 #482 #453 #1669 #1506)
#1671 := [th-lemma arith assign-bounds 1 1 2 1 1 1]: #1670
#1672 := [unit-resolution #1671 #1664 #1504 #1000 #1257 #918 #1668]: #1014
#1675 := [unit-resolution #1674 #1664 #1504 #918 #1668]: #511
#1676 := [unit-resolution #713 #1675]: #710
#1677 := [unit-resolution #1041 #1676 #1672]: false
#1679 := [lemma #1677]: #1678
#1685 := [unit-resolution #1679 #918 #1257]: #482
#1686 := [unit-resolution #705 #1685]: #702
#1687 := [unit-resolution #1494 #1686]: #1322
#1688 := [unit-resolution #1684 #1685 #918]: #511
#1689 := [unit-resolution #713 #1688]: #710
#1690 := [unit-resolution #1041 #1689]: #748
#1691 := [th-lemma arith farkas 1 1 1 1 1 1 #918 #1504 #1690 #1000 #1257 #1687]: false
#1693 := [lemma #1691]: #1692
#1705 := [unit-resolution #1693 #1257]: #453
#1706 := [unit-resolution #697 #1705]: #694
#1707 := [unit-resolution #861 #1706]: #754
#1703 := (or #482 #540)
#1697 := (or #511 #540 #482)
#1696 := [th-lemma arith farkas 1 1 1 1 1 #1681 #1000 #1257 #1664 #1695]: false
#1698 := [lemma #1696]: #1697
#1699 := [unit-resolution #1698 #1664 #1257]: #511
#1700 := [unit-resolution #713 #1699]: #710
#1701 := [unit-resolution #1041 #1700]: #748
#1702 := [th-lemma arith farkas 1 1 1 1 1 #1000 #1257 #1664 #1699 #1701]: false
#1704 := [lemma #1702]: #1703
#1708 := [unit-resolution #1704 #1257]: #482
#1709 := [unit-resolution #705 #1708]: #702
#1710 := [unit-resolution #1494 #1709]: #1322
#1711 := [unit-resolution #1508 #1681 #1504 #873 #1710 #1707]: #424
#1712 := [unit-resolution #689 #1711]: #686
#1713 := [unit-resolution #1437 #1712]: #751
#1714 := [unit-resolution #854 #1706]: #755
#1715 := [th-lemma arith farkas 1 1 1 1 1 1 1 1 1 #1714 #1713 #1025 #808 #1695 #1681 #1000 #1257 #1626]: false
#1717 := [lemma #1715]: #1716
#1753 := [unit-resolution #1717 #1257]: #511
#1764 := [unit-resolution #713 #1753]: #710
#1765 := [unit-resolution #1041 #1764]: #748
#1782 := (or #1029 #816 #1512 #396 #1421 #1014 #512 #1090 #540)
#1783 := [th-lemma arith assign-bounds 1 -1 1 -1 -1 1 1 -1]: #1782
#1784 := [unit-resolution #1783 #1753 #808 #1025 #1000 #1257 #1714 #1765 #1626]: #1029
#1780 := (or #424 #540)
#1751 := [unit-resolution #1063 #1709]: #752
#1627 := [unit-resolution #681 #1626]: #678
#1628 := [unit-resolution #804 #1627]: #763
#1661 := (or #424 #740 #540)
#1643 := (or #453 #1089 #540 #424)
#923 := [unit-resolution #922 #919]: #761
#1611 := (or #754 #453 #986)
#1612 := [th-lemma arith assign-bounds 2 1]: #1611
#1613 := [unit-resolution #1612 #923 #918]: #754
#1618 := [unit-resolution #1617 #923 #917 #918]: #482
#1619 := [unit-resolution #705 #1618]: #702
#1620 := [unit-resolution #1494 #1619]: #1322
#1621 := (or #1515 #874 #875 #511 #1505 #1506 #938)
#1622 := [th-lemma arith assign-bounds 2 2 2 2 2 1]: #1621
#1623 := [unit-resolution #1622 #1620 #1484 #1613 #1485 #1504 #873]: #511
#1624 := [unit-resolution #713 #1623]: #710
#1625 := [unit-resolution #1041 #1624]: #748
#1631 := (or #424 #945 #396 #366)
#1629 := (or #424 #945 #903 #396 #366)
#1630 := [th-lemma arith assign-bounds 1 1 1 1]: #1629
#1632 := [unit-resolution #1630 #800]: #1631
#1633 := [unit-resolution #1632 #917 #1628 #1626]: #366
#1634 := [unit-resolution #673 #1633]: #670
#1635 := [unit-resolution #791 #1634]: #767
#1636 := [unit-resolution #1010 #1634]: #892
#1637 := (or #337 #1335 #1336 #424 #945 #903)
#1638 := [th-lemma arith assign-bounds 1 1 1 1 1]: #1637
#1639 := [unit-resolution #1638 #917 #800 #1008 #1636 #1628]: #337
#1640 := [unit-resolution #657 #1639]: #658
#1641 := [unit-resolution #849 #1640]: #758
#764 := (>= #757 0::Int)
#995 := (or #920 #764)
#996 := [th-lemma arith triangle-eq]: #995
#997 := [unit-resolution #996 #919]: #764
#1642 := [th-lemma arith farkas 1 1 1 1 1 1 1 1 1 1 1 1 2 1 #1000 #808 #997 #1262 #1005 #1641 #779 #1124 #1635 #772 #859 #1118 #1257 #1625]: false
#1644 := [lemma #1642]: #1643
#1645 := [unit-resolution #1644 #917 #1257 #1087]: #453
#1646 := [unit-resolution #697 #1645]: #694
#1647 := [unit-resolution #861 #1646]: #754
#1650 := [unit-resolution #1649 #1645 #873 #917 #1647]: #482
#1651 := [unit-resolution #705 #1650]: #702
#1652 := [unit-resolution #1063 #1651]: #752
#783 := (or #781 #740 #396 #570 #782)
#769 := [hypothesis]: #569
#773 := [hypothesis]: #395
#780 := [th-lemma arith farkas -1 -1 1 1 -1 1 1 #779 #776 #774 #773 #772 #769 #768]: false
#784 := [lemma #780]: #783
#1653 := [unit-resolution #784 #1641 #1626 #1635 #776]: #570
#1654 := (or #569 #1243 #1081 #511 #540)
#1655 := [th-lemma arith assign-bounds 1 1 1 1]: #1654
#1656 := [unit-resolution #1655 #1653 #1005 #1257 #1262]: #511
#1657 := [unit-resolution #713 #1656]: #710
#1658 := [unit-resolution #822 #1657]: #749
#1659 := [unit-resolution #854 #1646]: #755
#1660 := [th-lemma arith farkas 1/2 -1/2 -1 -1/2 1/2 1/2 -1/2 -1/2 1/2 -1/2 1/2 -1/2 1/2 -1/2 1 #1659 #808 #812 #1262 #1005 #1641 #779 #776 #1635 #772 #859 #1118 #1658 #835 #1652]: false
#1662 := [lemma #1660]: #1661
#1752 := [unit-resolution #1662 #917 #1257]: #740
#1754 := (or #366 #945 #903 #512 #816 #396 #1421 #815 #839)
#1755 := [th-lemma arith assign-bounds 1 -1 -1 -1 -1 1 -1 1]: #1754
#1756 := [unit-resolution #1755 #1626 #800 #808 #812 #1753 #1751 #1714 #1628]: #366
#1757 := [unit-resolution #673 #1756]: #670
#1758 := [unit-resolution #1010 #1757]: #892
#1759 := (or #337 #1335 #1336 #945 #903 #512 #816 #1421 #815 #839)
#1760 := [th-lemma arith assign-bounds 1 -1 1 -1 -1 -1 1 -1 1]: #1759
#1761 := [unit-resolution #1760 #1753 #800 #808 #812 #1008 #1751 #1714 #1758 #1628]: #337
#1762 := [unit-resolution #657 #1761]: #658
#1763 := [unit-resolution #1475 #1762]: #1109
#1766 := [unit-resolution #1517 #1484 #1025 #873 #1504 #1000 #870 #1710 #1707 #1758 #1765 #1763 #1008 #1568 #1473]: #739
#1767 := [unit-resolution #1520 #1766 #1752]: #66
#1768 := [unit-resolution #661 #1767]: #650
#1769 := [unit-resolution #952 #1627]: #893
#1770 := [unit-resolution #849 #1762]: #758
#1771 := [unit-resolution #791 #1757]: #767
#1737 := (or #736 #1505 #775 #874 #1335 #1513 #1478 #1089 #781 #782 #984)
#1720 := [hypothesis]: #1322
#727 := (= #99 #576)
#1326 := (not #727)
#743 := (+ #99 #587)
#1223 := (<= #743 0::Int)
#1330 := (not #1223)
#1721 := [hypothesis]: #893
#1723 := (or #1330 #781 #984 #1478 #874 #1505 #736)
#1719 := [hypothesis]: #1223
#1722 := [th-lemma arith farkas -1 -1 1 -1 1 -1 1 1 -1 1 -1 1 1 #832 #774 #772 #1721 #916 #1469 #870 #1044 #873 #1720 #1504 #1719 #930]: false
#1724 := [lemma #1722]: #1723
#1718 := [unit-resolution #1724 #930 #1721 #1469 #1044 #1720 #774]: #1330
#1327 := (or #1326 #1223)
#1725 := [hypothesis]: #1330
#1726 := [hypothesis]: #727
#1328 := [th-lemma arith triangle-eq]: #1327
#1727 := [unit-resolution #1328 #1726 #1725]: false
#1728 := [lemma #1727]: #1327
#1729 := [unit-resolution #1728 #1718]: #1326
#730 := (or #569 #727)
#731 := [def-axiom]: #730
#1730 := [unit-resolution #731 #1729]: #569
#1731 := [unit-resolution #729 #1730]: #726
#1732 := [unit-resolution #827 #1731]: #742
#1733 := (or #1403 #984 #782 #1088 #1089 #781 #983 #570)
#1734 := [th-lemma arith assign-bounds -1 -2 2 2 -2 2 -2]: #1733
#1735 := [unit-resolution #1734 #1730 #772 #1124 #774 #768 #1721 #779]: #1403
#1736 := [unit-resolution #1532 #1735 #1732 #916 #873 #1504 #870 #832 #1720 #1470 #930 #1044 #1548 #1547 #1008 #1469 #1473]: false
#1738 := [lemma #1736]: #1737
#1772 := [unit-resolution #1738 #1752 #1710 #1707 #1758 #1763 #1568 #1766 #1771 #1770 #1769]: #736
#1773 := [unit-resolution #1542 #1772 #1768]: #842
#1739 := (>= #743 0::Int)
#1743 := (not #1739)
#1744 := (or #1743 #735 #1335 #945 #1243 #816 #815)
#1740 := [hypothesis]: #1739
#1741 := [hypothesis]: #842
#1742 := [th-lemma arith farkas -1 1 -1 1 -1 1 -1 1 1 -1 1 -1 1 #1536 #1741 #1548 #1008 #1037 #800 #1239 #1005 #809 #808 #813 #812 #1740]: false
#1745 := [lemma #1742]: #1744
#1774 := [unit-resolution #1745 #1773 #1758 #1628 #1262 #1714 #1751]: #1743
#1747 := (or #1326 #1739)
#1746 := [hypothesis]: #1743
#1748 := [th-lemma arith triangle-eq]: #1747
#1749 := [unit-resolution #1748 #1726 #1746]: false
#1750 := [lemma #1749]: #1747
#1775 := [unit-resolution #1750 #1774]: #1326
#1776 := [unit-resolution #731 #1775]: #569
#1777 := [unit-resolution #729 #1776]: #726
#1778 := [unit-resolution #1538 #1777]: #1481
#1779 := [th-lemma arith farkas 1 -1 -1 1/2 -1/2 1/2 -1/2 1/2 -1/2 1/2 -1/2 1/2 1/2 -1/2 1/2 -1/2 1 #1770 #779 #1766 #1771 #772 #1778 #1536 #1773 #1628 #800 #1262 #1005 #1714 #808 #1751 #812 #1626]: false
#1781 := [lemma #1779]: #1780
#1785 := [unit-resolution #1781 #1257]: #424
#1786 := [unit-resolution #689 #1785]: #686
#1787 := [unit-resolution #1437 #1786 #1784]: false
#1788 := [lemma #1787]: #540
#1850 := [unit-resolution #721 #1788]: #718
#865 := (or #864 #746)
#866 := [th-lemma arith triangle-eq]: #865
#1851 := [unit-resolution #866 #1850]: #746
#1852 := [unit-resolution #1361 #1839]: #891
#1853 := (not #732)
#1854 := (or #735 #1030 #1560 #1853 #1336 #876 #816 #1421 #877 #1029 #1512 #1669 #1506 #984 #985)
#1855 := [th-lemma arith assign-bounds -1 1 -1 1 -1 1 -1 1 2 -2 -1 1 1 -1]: #1854
#1856 := [unit-resolution #1855 #1852 #1025 #808 #1504 #870 #1536 #1008 #1851 #1833 #916 #1835 #1834 #1849 #1668]: #735
#1857 := [unit-resolution #1542 #1856 #1848]: #65
#1858 := [unit-resolution #661 #1857]: #651
#1859 := [unit-resolution #1056 #1665]: #1036
#1860 := (or #337 #511 #1030 #1336 #816 #1421 #1029 #1512 #1669 #1506 #984 #985)
#1861 := [th-lemma arith assign-bounds 1 1 1 1 1 2 2 1 1 1 1]: #1860
#1862 := [unit-resolution #1861 #1852 #916 #1025 #808 #1504 #1681 #1833 #1008 #1835 #1834 #1668]: #337
#1863 := [unit-resolution #657 #1862]: #658
#1864 := [unit-resolution #849 #1863]: #758
#1865 := [th-lemma arith assign-bounds -1 1 -1 1 -2 2 2 -2 3 -3 -1 1 -1 1 -1 1 #1864 #779 #1000 #1695 #1859 #812 #1831 #800 #1825 #859 #1840 #772 #1005 #1828 #873 #1402]: #740
#1866 := [unit-resolution #1475 #1863]: #1109
#1867 := [th-lemma arith assign-bounds -1 1 -1 1 -2 2 2 -2 3 -3 -1 1 -1 1 -1 1 #1866 #1473 #835 #1808 #1668 #1504 #1835 #916 #1834 #1025 #1852 #1008 #870 #1833 #808 #1851]: #739
#1868 := [unit-resolution #1520 #1867 #1865 #1858]: false
#1870 := [lemma #1868]: #1869
#1933 := [unit-resolution #1870 #1681]: #482
#1941 := (or #367 #511)
#1934 := [unit-resolution #705 #1933]: #702
#1935 := [unit-resolution #1494 #1934]: #1322
#1936 := [hypothesis]: #366
#1931 := (or #395 #1550 #816 #1029 #938 #874 #1125 #483)
#1911 := (or #366 #1125 #938 #874 #816 #1029 #483 #395 #1550)
#1873 := (or #483 #816 #1029 #337 #366 #1030)
#1871 := (or #483 #816 #1029 #1512 #1421 #337 #1336 #366 #1030)
#1872 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1]: #1871
#1874 := [unit-resolution #1872 #1008 #1025 #808]: #1873
#1875 := [unit-resolution #1874 #1362 #1026 #809 #909 #901]: #337
#1876 := [unit-resolution #657 #1875]: #658
#1895 := [unit-resolution #1475 #1876]: #1109
#1893 := (or #740 #395 #1125 #874 #938 #1550 #1029 #816 #483)
#1882 := (or #1222 #1013 #541)
#1883 := [th-lemma arith assign-bounds 1 -2]: #1882
#1884 := [unit-resolution #1883 #1402 #1788]: #1222
#1880 := (or #366 #740 #1550 #1029 #816 #902 #483)
#1877 := [unit-resolution #849 #1876]: #758
#1878 := [unit-resolution #1063 #1663]: #752
#1879 := [th-lemma arith farkas -1 -1 1 -1 2 1 -1 1 -1 1 3 -3 -1 2 -2 -2 1 #779 #776 #1000 #1549 #800 #1026 #1025 #1358 #772 #1005 #809 #808 #1402 #1878 #812 #1169 #1877]: false
#1881 := [lemma #1879]: #1880
#1885 := [unit-resolution #1881 #776 #1549 #1026 #809 #900 #909]: #366
#1886 := [unit-resolution #673 #1885]: #670
#1887 := [unit-resolution #791 #1886]: #767
#1888 := [unit-resolution #1255 #1887 #1123 #1044 #776 #1043 #1884]: #782
#1889 := [unit-resolution #1010 #1886]: #892
#1890 := [unit-resolution #1445 #1889 #895 #1885]: #337
#1891 := [unit-resolution #657 #1890]: #658
#1892 := [unit-resolution #849 #1891 #1888]: false
#1894 := [lemma #1892]: #1893
#1896 := [unit-resolution #1894 #895 #1123 #1044 #1043 #1549 #1026 #809 #909]: #740
#1184 := (or #763 #395 #902)
#1185 := [th-lemma arith assign-bounds 2 1]: #1184
#1186 := [unit-resolution #1185 #900 #895]: #763
#1897 := (or #569 #1081 #1090 #1550 #1013 #1029 #816 #1421 #1512 #395 #366 #903 #815 #839 #902)
#1898 := [th-lemma arith assign-bounds 1 1 1 1 1 3 3 1 1 2 2 2 2 2]: #1897
#1899 := [unit-resolution #1898 #901 #800 #1025 #808 #812 #1000 #1005 #895 #1878 #809 #900 #1402 #1026 #1549]: #569
#1900 := [unit-resolution #729 #1899]: #726
#1901 := [unit-resolution #827 #1900]: #742
#1902 := [unit-resolution #1847 #1901 #1358 #1043 #809 #900 #1044 #1186]: #736
#1903 := [unit-resolution #1538 #1900]: #1481
#1904 := (or #735 #1030 #1560 #1853 #1336 #876 #877 #985 #1505 #874 #875 #1506 #1530)
#1905 := [th-lemma arith assign-bounds -1 1 -1 1 -1 1 -1 -1 -1 1 1 1]: #1904
#1906 := [unit-resolution #1905 #1362 #873 #1504 #870 #1536 #1008 #1851 #1044 #916 #1680 #1524 #1903]: #735
#1907 := [unit-resolution #1542 #1906 #1902]: #65
#1908 := [unit-resolution #661 #1907]: #651
#1909 := [unit-resolution #1520 #1908 #1896]: #1089
#1910 := [th-lemma arith farkas -1 -1 1 -1 2 1 -1 1 -1 1 3 -3 -1 2 -2 -2 1 #1473 #1909 #835 #1123 #916 #1043 #859 #1362 #1008 #870 #1044 #873 #1851 #1680 #1504 #1524 #1895]: false
#1912 := [lemma #1910]: #1911
#1913 := [unit-resolution #1912 #895 #1043 #1044 #809 #1026 #909 #1123 #1549]: #366
#1914 := [unit-resolution #673 #1913]: #670
#1915 := [unit-resolution #1010 #1914]: #892
#1916 := [unit-resolution #1445 #1915 #895 #1913]: #337
#1917 := [unit-resolution #657 #1916]: #658
#1918 := [unit-resolution #1475 #1917]: #1109
#1919 := (or #1320 #877 #838 #1125 #938 #874 #875 #939 #367 #985 #1505 #1506 #1530)
#1920 := [th-lemma arith assign-bounds -1 2 -2 2 4 -4 -2 -2 2 2 -2 -2]: #1919
#1921 := [unit-resolution #1920 #1913 #859 #873 #1504 #835 #1851 #1044 #1043 #1123 #1680 #916 #1524]: #1320
#1922 := (or #1530 #945 #1513 #1514 #775 #1335 #1336 #569)
#1923 := [th-lemma arith assign-bounds 1 2 2 2 2 2 2]: #1922
#1924 := [unit-resolution #1923 #1918 #1524 #1896 #1915 #1186 #1008 #1473]: #569
#1925 := [unit-resolution #729 #1924]: #726
#1926 := [unit-resolution #1538 #1925]: #1481
#1927 := [th-lemma arith assign-bounds 1 -1 -1 1 -1 2 1 -1 -1 1 3 -3 -1 2 -2 -2 #1918 #1473 #1896 #835 #1123 #916 #1043 #859 #1008 #870 #1044 #873 #1851 #1680 #1504 #1524]: #974
#1928 := [unit-resolution #827 #1925]: #742
#1929 := [unit-resolution #1847 #1928 #1927 #1043 #809 #900 #1044 #1186]: #736
#1930 := [unit-resolution #1562 #1929 #1926 #1549 #1896 #900 #1921 #809 #1878 #1915 #1026 #1918]: false
#1932 := [lemma #1930]: #1931
#1937 := [unit-resolution #1932 #1695 #1833 #1834 #1825 #1828 #1808 #1933]: #395
#1938 := [unit-resolution #681 #1937]: #678
#1939 := [unit-resolution #952 #1938]: #893
#1940 := [th-lemma arith farkas 1 -1 1 1 -1 -1 1 -1 1 #1834 #1025 #1939 #1936 #916 #1935 #1504 #1681 #1933]: false
#1942 := [lemma #1940]: #1941
#1943 := [unit-resolution #1942 #1681]: #367
#1944 := [unit-resolution #675 #1943]: #671
#1945 := [unit-resolution #1361 #1944]: #891
#1946 := [unit-resolution #804 #1938]: #763
#1947 := [unit-resolution #1216 #1946 #1937]: #792
#1948 := [unit-resolution #1881 #1943 #1695 #1834 #1833 #1947 #1933]: #740
#1949 := (or #569 #1081 #1090 #1550 #1013 #1029 #816 #1421 #1512 #396 #511)
#1950 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1 1 2]: #1949
#1951 := [unit-resolution #1950 #1681 #808 #1025 #1000 #1005 #1937 #1833 #1402 #1834 #1695]: #569
#1952 := [unit-resolution #729 #1951]: #726
#1953 := [unit-resolution #827 #1952]: #742
#1954 := [unit-resolution #1180 #1944]: #974
#1955 := [unit-resolution #1847 #1954 #1953 #1825 #1833 #1947 #1828 #1946]: #736
#1956 := (or #1610 #1505 #483)
#1957 := [th-lemma arith assign-bounds 1 -2]: #1956
#1958 := [unit-resolution #1957 #1935 #1933]: #1610
#1959 := [unit-resolution #1538 #1952]: #1481
#1960 := [unit-resolution #1855 #1945 #1025 #808 #1504 #870 #1536 #1008 #1851 #1833 #916 #1939 #1834 #1959 #1958]: #735
#1961 := [unit-resolution #1542 #1960 #1955]: #65
#1962 := [unit-resolution #661 #1961]: #651
#1963 := [unit-resolution #1520 #1962 #1948]: #1089
#1964 := [unit-resolution #1874 #1945 #1834 #1833 #1933 #1943]: #337
#1965 := [unit-resolution #657 #1964]: #658
#1966 := [unit-resolution #1475 #1965]: #1109
#1967 := [th-lemma arith farkas 3/4 -3/4 1/2 -1/2 -1/2 1/2 -1/4 1/4 1/4 -1/4 1/4 -1/4 1/4 -1/4 1/4 -1/4 1/4 1 #1834 #1025 #1939 #916 #1935 #1504 #1966 #1473 #1963 #835 #1808 #1945 #1008 #870 #1833 #808 #1851 #1933]: false
#1968 := [lemma #1967]: #511
#1969 := [unit-resolution #713 #1968]: #710
#1970 := [unit-resolution #1041 #1969]: #748
#1971 := [hypothesis]: #570
#1972 := [th-lemma arith farkas 1 1 1 1 1 1 #1971 #1005 #1000 #1402 #1664 #1970]: false
#1974 := [lemma #1972]: #1973
#1993 := [unit-resolution #1974 #1664]: #569
#2002 := (or #395 #570)
#1996 := [unit-resolution #822 #1969]: #749
#837 := (not #749)
#972 := (or #395 #877 #837 #570)
#924 := [hypothesis]: #749
#965 := (or #424 #570 #877 #837)
#927 := (or #424 #877 #837 #453 #570)
#926 := [th-lemma arith farkas 1 1 1 1 1 1 1 1 1 #870 #925 #924 #835 #923 #873 #918 #917 #769]: false
#928 := [lemma #926]: #927
#961 := [unit-resolution #928 #917 #924 #925 #769]: #453
#878 := (or #424 #874 #875 #876 #877 #837 #838 #570 #454)
#879 := [th-lemma arith assign-bounds 1 -1 1 -1 -1 1 -1 -1]: #878
#962 := [unit-resolution #879 #917 #873 #835 #870 #769 #925 #924 #961]: #874
#963 := [unit-resolution #697 #961]: #694
#964 := [unit-resolution #861 #963 #962]: false
#966 := [lemma #964]: #965
#959 := [unit-resolution #966 #924 #925 #769]: #424
#960 := [unit-resolution #689 #959]: #686
#967 := [unit-resolution #884 #960]: #760
#968 := [unit-resolution #941 #895 #859 #967 #959]: #453
#969 := [unit-resolution #697 #968]: #694
#970 := [unit-resolution #861 #969]: #754
#971 := [th-lemma arith farkas -1 -1 1 1 1 -1 -1 -1 1 1 #970 #870 #925 #873 #924 #835 #895 #967 #859 #769]: false
#973 := [lemma #971]: #972
#2003 := [unit-resolution #973 #1851 #1996]: #2002
#2004 := [unit-resolution #2003 #1993]: #395
#2005 := [unit-resolution #681 #2004]: #678
#2008 := [unit-resolution #804 #2005]: #763
#1997 := (or #424 #570)
#1998 := [unit-resolution #966 #1851 #1996]: #1997
#1999 := [unit-resolution #1998 #1993]: #424
#2000 := [unit-resolution #689 #1999]: #686
#2016 := [unit-resolution #884 #2000]: #760
#1994 := [unit-resolution #729 #1993]: #726
#2055 := [unit-resolution #827 #1994]: #742
#2076 := (or #453 #482)
#2049 := (or #366 #938 #453 #945)
#946 := (or #366 #938 #939 #453 #945 #903)
#947 := [th-lemma arith assign-bounds 1 1 1 1 1]: #946
#2050 := [unit-resolution #947 #859 #800]: #2049
#2051 := [unit-resolution #2050 #918 #2008 #2016]: #366
#2052 := [unit-resolution #673 #2051]: #670
#2053 := [unit-resolution #791 #2052]: #767
#2006 := [unit-resolution #952 #2005]: #893
#2001 := [unit-resolution #1437 #2000]: #751
#2031 := (or #740 #482)
#659 := (= #236 #344)
#1995 := [unit-resolution #1538 #1994]: #1481
#1318 := (or #570 #736 #740)
#1219 := (or #541 #736 #740 #570)
#793 := [hypothesis]: #540
#863 := [unit-resolution #721 #793]: #718
#1077 := [unit-resolution #1076 #863]: #745
#824 := [unit-resolution #729 #769]: #726
#828 := [unit-resolution #827 #824]: #742
#931 := (or #736 #735)
#932 := [th-lemma arith farkas 1 1]: #931
#933 := [unit-resolution #932 #930]: #735
#1106 := (or #512 #570 #740 #736 #541)
#794 := [hypothesis]: #511
#957 := (or #815 #736 #570 #541 #512 #740)
#867 := [unit-resolution #866 #863]: #746
#819 := [unit-resolution #713 #794]: #710
#823 := [unit-resolution #822 #819]: #749
#887 := (or #454 #815 #541 #512 #740 #570 #842)
#829 := [hypothesis]: #735
#836 := [hypothesis]: #453
#843 := (or #337 #837 #838 #570 #815 #454 #839 #840 #841 #842)
#844 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1 1]: #843
#845 := [unit-resolution #844 #836 #812 #835 #769 #832 #829 #828 #823 #813]: #337
#846 := [unit-resolution #657 #845]: #658
#850 := [unit-resolution #849 #846]: #758
#851 := [unit-resolution #697 #836]: #694
#855 := [unit-resolution #854 #851]: #755
#817 := (or #396 #815 #816 #512 #740 #570 #782)
#795 := [unit-resolution #784 #773 #776 #769 #768]: #781
#796 := [unit-resolution #791 #795]: #787
#797 := [unit-resolution #673 #796]: #367
#801 := [unit-resolution #681 #773]: #678
#805 := [unit-resolution #804 #801]: #763
#814 := [th-lemma arith farkas 1 -1 1 -1 -1 1 -1 1 1 #813 #812 #809 #808 #805 #800 #797 #773 #794]: false
#818 := [lemma #814]: #817
#856 := [unit-resolution #818 #855 #813 #794 #776 #769 #850]: #396
#862 := [unit-resolution #861 #851]: #754
#880 := [unit-resolution #879 #836 #873 #835 #870 #769 #867 #823 #862]: #424
#881 := [unit-resolution #689 #880]: #686
#885 := [unit-resolution #884 #881]: #760
#886 := [th-lemma arith farkas 1 -1 1 -1 1 -1 1 -1 1 #823 #835 #813 #812 #880 #885 #859 #856 #793]: false
#888 := [lemma #886]: #887
#934 := [unit-resolution #888 #813 #793 #794 #776 #769 #933]: #454
#935 := [unit-resolution #928 #934 #823 #867 #769]: #424
#936 := [unit-resolution #689 #935]: #686
#937 := [unit-resolution #884 #936]: #760
#942 := [unit-resolution #941 #935 #859 #934 #937]: #395
#943 := [unit-resolution #681 #942]: #678
#944 := [unit-resolution #804 #943]: #763
#948 := [unit-resolution #947 #934 #859 #800 #937 #944]: #366
#949 := [unit-resolution #673 #948]: #670
#950 := [unit-resolution #791 #949]: #767
#953 := [unit-resolution #952 #943]: #893
#954 := [unit-resolution #699 #934]: #695
#955 := [unit-resolution #922 #954]: #761
#956 := [th-lemma arith farkas -1/2 1/2 1 -1 -1/2 1/2 1/2 -1/2 -1/2 1/2 -1/2 1/2 1/2 -1/2 -1/2 1 #870 #867 #823 #835 #955 #873 #813 #812 #828 #832 #930 #953 #950 #772 #916 #769]: false
#958 := [lemma #956]: #957
#1064 := [unit-resolution #958 #794 #769 #793 #930 #776]: #815
#1065 := [unit-resolution #1063 #1064]: #1059
#1066 := [unit-resolution #705 #1065]: #483
#1067 := [unit-resolution #707 #1066]: #703
#1068 := [unit-resolution #1056 #1067]: #1036
#1069 := [unit-resolution #973 #823 #867 #769]: #395
#1070 := [unit-resolution #681 #1069]: #678
#1071 := [unit-resolution #804 #1070]: #763
#1072 := [unit-resolution #966 #823 #867 #769]: #424
#1073 := [unit-resolution #689 #1072]: #686
#1074 := [unit-resolution #884 #1073]: #760
#1042 := [unit-resolution #1041 #819]: #748
#1015 := (or #453 #1013 #1014 #740 #570 #877 #837)
#889 := (+ #236 #355)
#975 := (>= #889 0::Int)
#976 := [unit-resolution #973 #924 #925 #769]: #395
#977 := [unit-resolution #681 #976]: #678
#978 := [unit-resolution #952 #977]: #893
#979 := [unit-resolution #804 #977]: #763
#980 := [unit-resolution #947 #918 #859 #979 #967 #800]: #366
#981 := [unit-resolution #673 #980]: #670
#982 := [unit-resolution #791 #981]: #767
#987 := (or #338 #781 #983 #984 #985 #570 #876 #877 #875 #837 #838 #453 #986)
#988 := [th-lemma arith assign-bounds 1 -1 1 -1 1 -1 1 1 1 -1 -1 -1]: #987
#989 := [unit-resolution #988 #918 #916 #772 #873 #835 #870 #769 #925 #924 #982 #923 #978]: #338
#654 := (or #337 #659)
#655 := [def-axiom]: #654
#990 := [unit-resolution #655 #989]: #659
#991 := (not #659)
#992 := (or #991 #975)
#993 := [th-lemma arith triangle-eq]: #992
#994 := [unit-resolution #993 #990]: #975
#1001 := [hypothesis]: #748
#1011 := [unit-resolution #1010 #981]: #892
#1012 := [th-lemma arith farkas -1 1 -2 2 1 -1 -1 -1 1 1 -1 -1 -1 1 1 #1011 #1008 #979 #800 #1005 #1002 #808 #1001 #1000 #997 #779 #776 #967 #859 #994]: false
#1016 := [lemma #1012]: #1015
#1078 := [unit-resolution #1016 #1042 #1077 #776 #769 #867 #823]: #453
#1079 := [unit-resolution #697 #1078]: #694
#1080 := [unit-resolution #861 #1079]: #754
#1084 := [unit-resolution #1083 #1080 #859 #873 #812 #1005 #832 #930 #828 #1077 #800 #1074 #1071 #1068 #772]: #1047
#1028 := (not #975)
#1091 := (or #1028 #1088 #1089 #938 #939 #1081 #1013 #1014 #1090 #1046 #839 #840 #841 #736 #945 #903)
#1092 := [th-lemma arith assign-bounds 1 1 -1 1 2 -2 -1 1 1 -1 -1 1 -1 -1 1]: #1091
#1093 := [unit-resolution #1092 #1042 #859 #812 #1000 #1005 #832 #930 #1087 #828 #1077 #800 #1074 #1071 #779 #1068]: #1028
#1018 := [hypothesis]: #1028
#1019 := [hypothesis]: #659
#1020 := [unit-resolution #993 #1019 #1018]: false
#1033 := [lemma #1020]: #992
#1094 := [unit-resolution #1033 #1093]: #991
#1095 := [unit-resolution #655 #1094]: #337
#1096 := [unit-resolution #657 #1095]: #658
#1097 := [unit-resolution #849 #1096]: #758
#1098 := [unit-resolution #784 #1097 #1069 #769 #776]: #781
#1099 := [unit-resolution #791 #1098]: #787
#1100 := [unit-resolution #673 #1099]: #367
#1101 := [unit-resolution #675 #1100]: #671
#1105 := [unit-resolution #1104 #1101 #1084]: false
#1107 := [lemma #1105]: #1106
#1149 := [unit-resolution #1107 #793 #776 #930 #769]: #512
#1190 := (or #337 #511 #1081 #1013 #840 #841 #842)
#1191 := [th-lemma arith assign-bounds 1 1 1 1 1 1]: #1190
#1192 := [unit-resolution #1191 #1149 #1005 #832 #933 #828 #1077]: #337
#1193 := [unit-resolution #657 #1192]: #658
#1194 := [unit-resolution #849 #1193]: #758
#1195 := [unit-resolution #715 #1149]: #711
#1199 := [unit-resolution #1198 #1195]: #1108
#1147 := (or #453 #782 #570 #740 #541 #1125)
#1137 := (or #424 #453 #541 #1089 #782 #1125)
#1122 := [unit-resolution #1121 #917 #1118]: #760
#1126 := (or #781 #983 #1081 #1013 #939 #782 #1088 #1089 #838 #1125 #986 #875 #424 #541 #453 #1119)
#1127 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1 1 1 1 2 2 2 1]: #1126
#1128 := [unit-resolution #1127 #917 #772 #859 #918 #873 #835 #793 #1005 #1124 #1077 #779 #768 #923 #1123 #1118]: #781
#1129 := [unit-resolution #791 #1128]: #787
#1130 := [unit-resolution #673 #1129]: #367
#1131 := [unit-resolution #947 #1130 #859 #918 #1122 #800]: #945
#1134 := [unit-resolution #1133 #917 #859 #918 #1118]: #395
#1135 := [unit-resolution #681 #1134]: #678
#1136 := [unit-resolution #804 #1135 #1131]: false
#1138 := [lemma #1136]: #1137
#1112 := [unit-resolution #1138 #918 #793 #1087 #768 #1123]: #424
#1113 := [unit-resolution #689 #1112]: #686
#1139 := [unit-resolution #884 #1113]: #760
#1140 := [unit-resolution #941 #1139 #859 #918 #1112]: #395
#1141 := [unit-resolution #784 #1140 #768 #769 #776]: #781
#1142 := [unit-resolution #791 #1141]: #787
#1143 := [unit-resolution #673 #1142]: #367
#1144 := [unit-resolution #947 #1143 #859 #918 #1139 #800]: #945
#1145 := [unit-resolution #681 #1140]: #678
#1146 := [unit-resolution #804 #1145 #1144]: false
#1148 := [lemma #1146]: #1147
#1200 := [unit-resolution #1148 #1194 #769 #776 #793 #1199]: #453
#1201 := [unit-resolution #697 #1200]: #694
#1202 := [unit-resolution #861 #1201]: #754
#1167 := (or #424 #840 #842 #874 #1125 #541 #1089 #782)
#1157 := (or #395 #424 #541 #1089 #874 #782 #1125)
#1151 := [unit-resolution #905 #900 #800 #917 #895]: #366
#1152 := (or #781 #983 #1081 #1013 #782 #1088 #1089 #541 #874 #838 #1125 #875 #424 #1119 #939)
#1153 := [th-lemma arith assign-bounds 1 1 1 1 1 1 2 1 1 1 1 2 1 1]: #1152
#1154 := [unit-resolution #1153 #917 #772 #859 #873 #835 #793 #1005 #1124 #1077 #1044 #779 #768 #1123 #1118]: #781
#1155 := [unit-resolution #791 #1154]: #787
#1156 := [unit-resolution #673 #1155 #1151]: false
#1158 := [lemma #1156]: #1157
#1159 := [unit-resolution #1158 #917 #793 #1124 #1044 #768 #1123]: #395
#1160 := [unit-resolution #681 #1159]: #678
#1161 := [unit-resolution #804 #1160]: #763
#1163 := [unit-resolution #673 #1155]: #367
#1164 := [unit-resolution #675 #1163]: #671
#1165 := [unit-resolution #1104 #1164]: #974
#1166 := [th-lemma arith farkas 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #800 #1159 #917 #1165 #772 #1005 #1077 #1162 #832 #829 #1044 #835 #1123 #873 #1118 #859 #793 #1161]: false
#1168 := [lemma #1166]: #1167
#1203 := [unit-resolution #1168 #1202 #933 #828 #1199 #793 #1087 #1194]: #424
#1204 := [unit-resolution #689 #1203]: #686
#1205 := [unit-resolution #884 #1204]: #760
#1182 := (or #781 #874 #1125 #541 #782 #740 #938)
#1181 := [th-lemma arith farkas 1 1 -1 -1 -1 -2 -1 1 1 -1 1 -1 1 1 #1044 #835 #1123 #873 #859 #793 #768 #779 #776 #774 #772 #1005 #1077 #1043]: false
#1183 := [lemma #1181]: #1182
#1206 := [unit-resolution #1183 #1202 #1199 #793 #1194 #776 #1205]: #781
#1207 := [unit-resolution #791 #1206]: #787
#1208 := [unit-resolution #673 #1207]: #367
#1209 := [unit-resolution #675 #1208]: #671
#1210 := [unit-resolution #1180 #1209]: #974
#1211 := [unit-resolution #854 #1201]: #755
#1188 := (or #395 #840 #736 #816 #1013 #874 #1047 #938)
#1187 := [unit-resolution #1177 #1186 #900 #1162 #930 #809 #1002 #1044 #1039 #1043]: false
#1189 := [lemma #1187]: #1188
#1212 := [unit-resolution #1189 #1211 #930 #828 #1077 #1202 #1210 #1205]: #395
#1213 := [unit-resolution #681 #1212]: #678
#1214 := [unit-resolution #804 #1213]: #763
#1217 := [unit-resolution #1216 #1214 #1212]: #792
#1218 := [unit-resolution #1177 #1217 #1214 #828 #930 #1211 #1077 #1202 #1210 #1205]: false
#1220 := [lemma #1218]: #1219
#1224 := [unit-resolution #1220 #769 #776 #930]: #541
#1256 := [unit-resolution #723 #1224]: #719
#1292 := [unit-resolution #1261 #1256]: #1222
#1270 := (or #745 #540 #1243)
#1271 := [th-lemma arith assign-bounds 2 1]: #1270
#1293 := [unit-resolution #1271 #1224 #1292]: #745
#1294 := (or #337 #840 #841 #842 #570 #540)
#1295 := [th-lemma arith assign-bounds 1 1 1 1 1]: #1294
#1296 := [unit-resolution #1295 #1224 #769 #832 #933 #828]: #337
#1297 := [unit-resolution #657 #1296]: #658
#1298 := [unit-resolution #849 #1297]: #758
#1290 := (or #395 #740 #782 #540 #736 #840)
#1263 := [unit-resolution #1254 #895 #776 #768 #1262]: #424
#1264 := [unit-resolution #689 #1263]: #686
#1265 := [unit-resolution #884 #1264]: #760
#1266 := [unit-resolution #941 #1265 #859 #895 #1263]: #453
#1267 := [unit-resolution #697 #1266]: #694
#1268 := [unit-resolution #861 #1267]: #754
#1269 := [unit-resolution #854 #1267]: #755
#1272 := [unit-resolution #1271 #1257 #1262]: #745
#1273 := [unit-resolution #1189 #1268 #930 #895 #1272 #1265 #1269 #1162]: #1047
#1274 := [unit-resolution #1180 #1273]: #1102
#1275 := [unit-resolution #675 #1274]: #366
#1276 := [unit-resolution #673 #1275]: #670
#1277 := [unit-resolution #791 #1276]: #767
#1278 := [unit-resolution #1255 #1277 #1262 #776 #768 #1268 #1265]: #1125
#1279 := [unit-resolution #1230 #1278]: #1196
#1280 := [unit-resolution #715 #1279]: #511
#1281 := [unit-resolution #713 #1280]: #710
#1282 := [unit-resolution #1041 #1281]: #748
#1283 := (or #482 #540 #1090 #1014 #938 #1243 #1081 #781 #983 #1088 #1089 #782 #874 #875 #939)
#1284 := [th-lemma arith assign-bounds 1 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2]: #1283
#1285 := [unit-resolution #1284 #1268 #859 #873 #779 #1000 #1257 #1005 #1087 #772 #1277 #768 #1265 #1282 #1262]: #482
#1286 := [unit-resolution #705 #1285]: #702
#1287 := [unit-resolution #1063 #1286]: #752
#1288 := [unit-resolution #822 #1281]: #749
#1289 := [th-lemma arith farkas -1 1/2 -1/2 1 -1/2 -1/2 -1/2 1/2 1/2 -1/2 -1/2 -1/2 1/2 1/2 1/2 1 #812 #1269 #808 #1263 #1265 #835 #1262 #1005 #1277 #772 #779 #776 #768 #859 #1288 #1287]: false
#1291 := [lemma #1289]: #1290
#1299 := [unit-resolution #1291 #1298 #776 #1224 #930 #828]: #395
#1300 := [unit-resolution #681 #1299]: #678
#1301 := [unit-resolution #804 #1300]: #763
#1302 := [unit-resolution #784 #1299 #1298 #769 #776]: #781
#1303 := [unit-resolution #791 #1302]: #787
#1304 := [unit-resolution #673 #1303]: #367
#1305 := [unit-resolution #675 #1304]: #671
#1306 := [unit-resolution #1180 #1305]: #974
#1307 := (or #424 #945 #903 #396 #1047 #983 #570 #840 #841 #842 #540)
#1308 := [th-lemma arith assign-bounds 1 1 2 1 1 1 1 1 1 1]: #1307
#1309 := [unit-resolution #1308 #1299 #800 #772 #1224 #769 #832 #933 #828 #1301 #1306]: #424
#1310 := [unit-resolution #689 #1309]: #686
#1311 := [unit-resolution #884 #1310]: #760
#1312 := [unit-resolution #1216 #1301 #1299]: #792
#1313 := [unit-resolution #947 #1311 #859 #1304 #1301 #800]: #453
#1314 := [unit-resolution #697 #1313]: #694
#1315 := [unit-resolution #861 #1314]: #754
#1316 := [unit-resolution #854 #1314]: #755
#1317 := [unit-resolution #1177 #1316 #1315 #828 #930 #1306 #1312 #1311 #1301 #1293]: false
#1319 := [lemma #1317]: #1318
#2007 := [unit-resolution #1319 #776 #1993]: #736
#2011 := (or #453 #740 #570)
#2009 := (or #453 #1014 #740 #570 #877 #837)
#2010 := [unit-resolution #1016 #1402]: #2009
#2012 := [unit-resolution #2010 #1851 #1970 #1996]: #2011
#2013 := [unit-resolution #2012 #776 #1993]: #453
#2014 := [unit-resolution #697 #2013]: #694
#2015 := [unit-resolution #861 #2014]: #754
#2017 := [unit-resolution #854 #2014]: #755
#1991 := (or #1102 #1029 #740 #816 #1046 #938 #874 #945)
#1038 := [hypothesis]: #1036
#1975 := [unit-resolution #1180 #1178]: #974
#1978 := (or #1046 #782 #740 #874 #938 #1047 #945)
#1976 := (or #1046 #782 #740 #874 #938 #1047 #945 #512)
#1048 := (or #1046 #1013 #782 #740 #874 #938 #1047 #945 #512)
#1045 := [th-lemma arith farkas 1/2 -1/2 1/2 -1/2 -1/2 -1/2 -3/2 3/2 1/2 -1/2 1/2 -1/2 1/2 1 -1 -1 1 1 #1005 #1002 #768 #779 #776 #1044 #1043 #859 #873 #1042 #1000 #772 #1039 #1038 #812 #1037 #800 #794]: false
#1049 := [lemma #1045]: #1048
#1977 := [unit-resolution #1049 #1402]: #1976
#1979 := [unit-resolution #1977 #1968]: #1978
#1980 := [unit-resolution #1979 #1975 #1038 #776 #1043 #1044 #1037]: #782
#1981 := [unit-resolution #1361 #1178]: #891
#1984 := (or #1028 #740 #816 #1029 #1030)
#1982 := (or #1028 #740 #816 #1029 #1014 #1030)
#1031 := (or #1028 #740 #816 #1029 #1013 #1014 #1030)
#1021 := [hypothesis]: #975
#1022 := [hypothesis]: #891
#1027 := [th-lemma arith farkas -1 -1 1 1 -1 1 -1 -1 -1 1 1 -1 1 #779 #776 #809 #1026 #1025 #1005 #1002 #808 #1001 #1000 #1008 #1022 #1021]: false
#1032 := [lemma #1027]: #1031
#1983 := [unit-resolution #1032 #1402]: #1982
#1985 := [unit-resolution #1983 #1970]: #1984
#1986 := [unit-resolution #1985 #1981 #1026 #776 #809]: #1028
#1987 := [unit-resolution #1033 #1986]: #991
#1988 := [unit-resolution #655 #1987]: #337
#1989 := [unit-resolution #657 #1988]: #658
#1990 := [unit-resolution #849 #1989 #1980]: false
#1992 := [lemma #1990]: #1991
#2018 := [unit-resolution #1992 #776 #2001 #2017 #1859 #2016 #2015 #2008]: #1102
#2019 := [unit-resolution #675 #2018]: #366
#2020 := (or #338 #876 #877 #1560 #1853 #929 #1669 #1029 #1512 #984 #985 #1506 #482 #367)
#2021 := [th-lemma arith assign-bounds -1 1 1 -1 1 -1 1 -1 1 -1 1 -1 1]: #2020
#2022 := [unit-resolution #2021 #2019 #916 #1025 #1664 #1504 #870 #1536 #2007 #1851 #2006 #2001 #1995 #1668]: #338
#2023 := [unit-resolution #655 #2022]: #659
#2024 := [unit-resolution #673 #2019]: #670
#2025 := [unit-resolution #1010 #2024]: #892
#2026 := (or #891 #367 #1335)
#2027 := [th-lemma arith assign-bounds 2 -1]: #2026
#2028 := [unit-resolution #2027 #2025 #2019]: #891
#2029 := [unit-resolution #1985 #2028 #2001 #776 #2017]: #1028
#2030 := [unit-resolution #1033 #2029 #2023]: false
#2032 := [lemma #2030]: #2031
#2054 := [unit-resolution #2032 #1664]: #740
#2056 := (or #736 #1081 #1013 #840 #841 #1046 #839 #986 #875 #781 #983 #984 #985)
#2057 := [th-lemma arith assign-bounds -1 1 1 -1 -1 1 1 -1 -1 1 -1 1]: #2056
#2058 := [unit-resolution #2057 #2053 #873 #812 #1005 #832 #772 #2055 #916 #923 #2006 #1402 #1859]: #736
#2059 := [unit-resolution #1010 #2052]: #892
#912 := (not #764)
#2060 := (or #735 #876 #877 #1560 #1853 #1669 #1506 #912 #1421 #1335 #1336 #945 #903)
#2061 := [th-lemma arith assign-bounds -1 1 1 -1 -1 1 1 -1 -1 1 -1 1]: #2060
#2062 := [unit-resolution #2061 #997 #808 #1504 #870 #1536 #1008 #1851 #800 #2059 #2008 #1995 #1668]: #735
#2063 := [unit-resolution #1542 #2062 #2058]: #65
#2064 := [unit-resolution #661 #2063]: #651
#2065 := [unit-resolution #1520 #2064 #2054]: #1089
#2048 := (<= #889 0::Int)
#2068 := (or #338 #781 #984 #482 #453 #986)
#2066 := (or #338 #781 #983 #984 #985 #482 #453 #986 #875)
#2067 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1]: #2066
#2069 := [unit-resolution #2067 #916 #873 #772]: #2068
#2070 := [unit-resolution #2069 #923 #1664 #918 #2053 #2006]: #338
#2071 := [unit-resolution #655 #2070]: #659
#2072 := (or #991 #2048)
#2073 := [th-lemma arith triangle-eq]: #2072
#2074 := [unit-resolution #2073 #2071]: #2048
#2075 := [th-lemma arith farkas -1 -1 1 -1 1 1 1 -1 2 -2 -1 1 1 -1 1 #870 #835 #1851 #2074 #1473 #2065 #2001 #1025 #2006 #916 #923 #873 #2053 #772 #1996]: false
#2077 := [lemma #2075]: #2076
#2105 := [unit-resolution #2077 #1664]: #453
#2106 := [unit-resolution #697 #2105]: #694
#2107 := [unit-resolution #854 #2106]: #755
#2103 := (or #1102 #1029 #1560 #1669 #984 #775 #816 #1046 #840 #938 #945)
#2082 := (not #2048)
#2079 := [hypothesis]: #1610
#2033 := [hypothesis]: #874
#2037 := (or #755 #754)
#2038 := [th-lemma arith farkas 1 1]: #2037
#2039 := [unit-resolution #2038 #2033]: #755
#2034 := [hypothesis]: #694
#2035 := [unit-resolution #861 #2034 #2033]: false
#2036 := [lemma #2035]: #860
#2040 := [unit-resolution #2036 #2033]: #852
#2041 := [unit-resolution #697 #2040]: #454
#2042 := (or #816 #453 #986)
#2043 := [th-lemma arith assign-bounds 2 1]: #2042
#2044 := [unit-resolution #2043 #2041 #2039]: #986
#2045 := [unit-resolution #699 #2041]: #695
#2046 := [unit-resolution #922 #2045 #2044]: false
#2047 := [lemma #2046]: #754
#2088 := (or #1047 #1046 #874 #938 #840 #736 #945)
#2089 := [unit-resolution #1083 #859 #873 #812 #1005 #832 #1402 #800 #772]: #2088
#2090 := [unit-resolution #2089 #1975 #2047 #1038 #1162 #1043 #1037]: #736
#2091 := (or #735 #1030 #1560 #816 #1029 #1669 #984)
#2092 := [unit-resolution #1855 #1025 #808 #1504 #870 #1536 #1008 #1851 #916]: #2091
#2093 := [unit-resolution #2092 #1981 #809 #1721 #1026 #1556 #2079]: #735
#2094 := [unit-resolution #1542 #2093 #2090]: #65
#2095 := [unit-resolution #661 #2094]: #651
#2096 := [unit-resolution #1520 #2095 #1470]: #1089
#2083 := (or #2082 #739 #1029 #1560 #929 #1669 #984)
#2078 := [hypothesis]: #2048
#2080 := [hypothesis]: #1089
#2081 := [th-lemma arith farkas -1 2 1 -2 -1 -1 -1 1 -1 1 -1 1 -1 -1 1 1 #1996 #870 #835 #1851 #1473 #2080 #1026 #1025 #1556 #1536 #1555 #2079 #1504 #1721 #916 #2078]: false
#2084 := [lemma #2081]: #2083
#2097 := [unit-resolution #2084 #2096 #1026 #1556 #2090 #2079 #1721]: #2082
#2085 := [hypothesis]: #2082
#2086 := [unit-resolution #2073 #1019 #2085]: false
#2087 := [lemma #2086]: #2072
#2098 := [unit-resolution #2087 #2097]: #991
#2099 := [unit-resolution #655 #2098]: #337
#2100 := [unit-resolution #657 #2099]: #658
#2101 := [unit-resolution #1475 #2100]: #1109
#2102 := [th-lemma arith farkas -1 1 -1 1 -1 -1 -1 1 -1 1 -1 -1 1 -2 2 -2 1 #1026 #1025 #1996 #835 #1473 #2096 #1556 #1536 #2090 #2079 #1504 #1721 #916 #2099 #870 #1851 #2101]: false
#2104 := [lemma #2102]: #2103
#2108 := [unit-resolution #2104 #2001 #1995 #1668 #2006 #2054 #2107 #1859 #2055 #2016 #2008]: #1102
#2109 := [unit-resolution #675 #2108]: #366
#2110 := (or #761 #874 #454)
#2111 := [th-lemma arith assign-bounds 1 -2]: #2110
#2112 := [unit-resolution #2111 #2105 #2047]: #761
#2113 := [unit-resolution #673 #2109]: #670
#2114 := [unit-resolution #791 #2113]: #767
#2115 := [unit-resolution #2057 #2114 #873 #812 #1005 #832 #772 #2055 #916 #2112 #2006 #1402 #1859]: #736
#2116 := (or #1125 #876 #877 #838 #482 #570 #1669 #1029 #1512 #984 #985 #1506 #367)
#2117 := [th-lemma arith assign-bounds -1 1 -1 -1 1 -2 2 -2 2 -2 2 2]: #2116
#2118 := [unit-resolution #2117 #2109 #1025 #1664 #1504 #835 #870 #1993 #1851 #2006 #2001 #916 #1668]: #1125
#2119 := (or #1108 #837 #338 #876 #877 #1560 #1853 #929)
#2120 := [th-lemma arith assign-bounds -1 -2 2 -2 -2 2 -2]: #2119
#2121 := [unit-resolution #2120 #2115 #1536 #870 #1851 #1996 #2118 #1995]: #338
#2122 := [unit-resolution #655 #2121]: #659
#2123 := [unit-resolution #2087 #2122]: #2048
#2124 := [unit-resolution #2084 #2123 #2001 #1995 #2115 #1668 #2006]: #739
#2125 := [unit-resolution #1520 #2124 #2054]: #66
#2126 := [unit-resolution #661 #2125]: #650
#2127 := [unit-resolution #1542 #2126 #2115]: #842
#2128 := [unit-resolution #2092 #2127 #2107 #2006 #2001 #1995 #1668]: #1030
#2129 := [unit-resolution #2027 #2128 #2109]: #1335
#2130 := [unit-resolution #1010 #2113 #2129]: false
#2131 := [lemma #2130]: #482
#2164 := [unit-resolution #705 #2131]: #702
#2220 := [unit-resolution #1494 #2164]: #1322
#2312 := [unit-resolution #1957 #2220 #2131]: #1610
#2132 := [hypothesis]: #1029
#2133 := [hypothesis]: #686
#2134 := [unit-resolution #1437 #2133 #2132]: false
#2135 := [lemma #2134]: #1436
#2200 := [unit-resolution #2135 #2132]: #882
#2201 := [unit-resolution #689 #2200]: #425
#2202 := [unit-resolution #691 #2201]: #687
#2203 := [unit-resolution #1483 #2202]: #1468
#2167 := (or #395 #424)
#2165 := [unit-resolution #1063 #2164]: #752
#2166 := [th-lemma arith farkas 1 1 1 1 1 1 1 1 1 #1996 #835 #2165 #812 #895 #1118 #859 #917 #1788]: false
#2168 := [lemma #2166]: #2167
#2204 := [unit-resolution #2168 #2201]: #395
#2143 := (or #396 #424 #337)
#2136 := [hypothesis]: #338
#2137 := (or #337 #1335 #424 #945)
#2138 := [unit-resolution #1638 #800 #1008]: #2137
#2139 := [unit-resolution #2138 #805 #917 #2136]: #1335
#2140 := [unit-resolution #1632 #805 #917 #773]: #366
#2141 := [unit-resolution #673 #2140]: #670
#2142 := [unit-resolution #1010 #2141 #2139]: false
#2144 := [lemma #2142]: #2143
#2205 := [unit-resolution #2144 #2204 #2201]: #337
#2206 := [unit-resolution #657 #2205]: #658
#2207 := [unit-resolution #1475 #2206]: #1109
#2208 := [unit-resolution #681 #2204]: #678
#2209 := [unit-resolution #804 #2208]: #763
#2210 := [unit-resolution #1632 #2209 #2201 #2204]: #366
#2211 := [unit-resolution #673 #2210]: #670
#2212 := [unit-resolution #1010 #2211]: #892
#2213 := (or #751 #760)
#2214 := [th-lemma arith farkas 1 1]: #2213
#2215 := [unit-resolution #2214 #2132]: #760
#2191 := (or #740 #938 #424)
#2169 := [unit-resolution #2168 #917]: #395
#2170 := [unit-resolution #681 #2169]: #678
#2171 := [unit-resolution #804 #2170]: #763
#2172 := [unit-resolution #1632 #2171 #917 #2169]: #366
#2173 := [unit-resolution #673 #2172]: #670
#2174 := [unit-resolution #1010 #2173]: #892
#2175 := [unit-resolution #1998 #917]: #570
#2176 := [unit-resolution #731 #2175]: #727
#2177 := [unit-resolution #1750 #2176]: #1739
#2162 := (or #453 #740 #938 #424)
#2148 := [unit-resolution #1487 #918 #1118 #917]: #395
#2149 := [unit-resolution #681 #2148]: #678
#2150 := [unit-resolution #804 #2149]: #763
#2153 := (or #912 #938 #945 #366 #874)
#2151 := (or #912 #938 #939 #945 #903 #366 #874)
#2152 := [th-lemma arith assign-bounds 2 2 2 2 2 1]: #2151
#2154 := [unit-resolution #2152 #859 #800]: #2153
#2155 := [unit-resolution #2154 #997 #2047 #2150 #1043]: #366
#2156 := [unit-resolution #673 #2155]: #670
#2157 := [unit-resolution #791 #2156]: #767
#2158 := [unit-resolution #2144 #2148 #917]: #337
#2159 := [unit-resolution #657 #2158]: #658
#2160 := [unit-resolution #849 #2159]: #758
#2161 := [th-lemma arith farkas -1 1 -1 1 -1 1 -1 -1 1 -1 1 -1 1 #772 #2160 #1118 #859 #1970 #1000 #779 #776 #997 #808 #1005 #1402 #2157]: false
#2163 := [lemma #2161]: #2162
#2178 := [unit-resolution #2163 #776 #1043 #917]: #453
#2179 := [unit-resolution #697 #2178]: #694
#2145 := [hypothesis]: #816
#2146 := [unit-resolution #854 #2034 #2145]: false
#2147 := [lemma #2146]: #853
#2180 := [unit-resolution #2147 #2179]: #755
#2181 := (or #1743 #735 #1335 #945 #816 #815)
#2182 := [unit-resolution #1745 #1884]: #2181
#2183 := [unit-resolution #2182 #2180 #2177 #2171 #2174 #2165]: #735
#2184 := [unit-resolution #2144 #2169 #917]: #337
#2185 := [unit-resolution #657 #2184]: #658
#2186 := [unit-resolution #849 #2185]: #758
#2187 := [unit-resolution #952 #2170]: #893
#2188 := [unit-resolution #791 #2173]: #767
#2189 := [unit-resolution #1728 #2176]: #1223
#2190 := [th-lemma arith farkas -1 1 -1 -1 1 1 1 -1 -2 2 -1 1 -1 1 1 1 #1996 #835 #2165 #832 #812 #2189 #1118 #859 #2188 #772 #2187 #916 #2186 #779 #776 #2183]: false
#2192 := [lemma #2190]: #2191
#2216 := [unit-resolution #2192 #2215 #2201]: #740
#2217 := [unit-resolution #1998 #2201]: #570
#2218 := [unit-resolution #731 #2217]: #727
#2219 := [unit-resolution #1750 #2218]: #1739
#2221 := (or #735 #1014 #1090 #1505 #1853 #1506 #1743 #1515 #1512 #1335 #1336 #945 #903 #1513 #1514 #775)
#2222 := [th-lemma arith assign-bounds -1 1 -1 -1 1 1 1 -1 -2 2 -1 1 -1 1 1]: #2221
#2223 := [unit-resolution #2222 #2216 #800 #1025 #1504 #1000 #1536 #1473 #1008 #2212 #2209 #1970 #2207 #2220 #2203 #2219]: #735
#2224 := [unit-resolution #849 #2206]: #758
#2225 := [unit-resolution #952 #2208]: #893
#2226 := [unit-resolution #791 #2211]: #767
#2227 := [unit-resolution #1117 #2202]: #1111
#2228 := [unit-resolution #1728 #2218]: #1223
#2198 := (or #1089 #1330 #1119 #781 #984 #782 #842 #775)
#2193 := [unit-resolution #1520 #1124 #1470]: #66
#2194 := [unit-resolution #661 #2193]: #650
#2195 := [unit-resolution #1542 #2194 #829]: #929
#2196 := [hypothesis]: #1111
#2197 := [th-lemma arith farkas -1 1 -1 -1 1 1 1 -1 -2 2 -1 1 -1 1 1 1 #1996 #835 #2165 #832 #812 #1719 #2196 #859 #774 #772 #1721 #916 #768 #779 #1124 #2195]: false
#2199 := [lemma #2197]: #2198
#2229 := [unit-resolution #2199 #2228 #2227 #2226 #2225 #2224 #2223 #2216]: #1089
#2230 := (or #739 #986 #875 #1515 #1512 #1513 #837 #838 #1514 #876 #877 #1335 #1336)
#2231 := [th-lemma arith assign-bounds 1 -1 -1 1 1 -1 1 -1 1 -1 1 -1]: #2230
#2232 := [unit-resolution #2231 #2229 #1025 #873 #835 #870 #1473 #1851 #1996 #1008 #2212 #2207 #2203]: #986
#2233 := (or #739 #874 #1513 #1478 #1335 #1515 #1505)
#2234 := [unit-resolution #1517 #1025 #873 #1504 #1000 #870 #1970 #1008 #1473]: #2233
#2235 := [unit-resolution #2234 #2229 #2220 #2203 #2212 #2207 #2047]: #1478
#2236 := (or #1320 #877 #837 #838 #815 #839 #454)
#2237 := [th-lemma arith assign-bounds -1 -2 2 -2 2 -2]: #2236
#2238 := [unit-resolution #2237 #2235 #835 #1851 #1996 #2165 #812]: #454
#2239 := [unit-resolution #699 #2238]: #695
#2240 := [unit-resolution #922 #2239 #2232]: false
#2241 := [lemma #2240]: #751
#2278 := (or #1029 #424 #1119)
#2279 := [th-lemma arith assign-bounds 2 1]: #2278
#2280 := [unit-resolution #2279 #917 #2241]: #1119
#2281 := [unit-resolution #1117 #1114 #2280]: false
#2282 := [lemma #2281]: #424
#2249 := (or #395 #425)
#2245 := [hypothesis]: #424
#2246 := [unit-resolution #689 #2245]: #686
#2247 := [unit-resolution #884 #2246]: #760
#2248 := [th-lemma arith farkas 1 -1 1 -1 -1 1 -1 1 1 #1996 #835 #2165 #812 #2247 #2245 #895 #859 #1788]: false
#2250 := [lemma #2248]: #2249
#2285 := [unit-resolution #2250 #2282]: #395
#2286 := [unit-resolution #681 #2285]: #678
#2341 := [unit-resolution #952 #2286]: #893
#2283 := [unit-resolution #689 #2282]: #686
#2284 := [unit-resolution #884 #2283]: #760
#2287 := [unit-resolution #804 #2286]: #763
#2288 := [unit-resolution #2050 #918 #2287 #2284]: #366
#2289 := [unit-resolution #673 #2288]: #670
#2339 := [unit-resolution #1010 #2289]: #892
#2321 := (or #735 #912 #1335)
#910 := [hypothesis]: #764
#2313 := [unit-resolution #2061 #1741 #808 #1504 #870 #1536 #1008 #1851 #800 #910 #2287 #1548 #2312]: #1560
#2314 := (or #1743 #1014 #1090 #1505 #1853 #735 #1506 #912 #1421 #1081 #1013 #1335 #1336 #945 #903)
#2315 := [th-lemma arith assign-bounds -2 2 -1 -1 1 1 1 -1 1 -1 -1 1 -1 1]: #2314
#2316 := [unit-resolution #2315 #1741 #808 #1504 #1000 #1005 #1536 #800 #910 #1548 #2287 #1402 #1970 #2220 #1008]: #1743
#2317 := [unit-resolution #1750 #2316]: #1326
#2318 := [unit-resolution #731 #2317]: #569
#2319 := [unit-resolution #729 #2318]: #726
#2320 := [unit-resolution #1538 #2319 #2313]: false
#2322 := [lemma #2320]: #2321
#2340 := [unit-resolution #2322 #997 #2339]: #735
#2290 := [unit-resolution #791 #2289]: #767
#2323 := [unit-resolution #1728 #1725]: #1326
#2324 := [unit-resolution #731 #2323]: #569
#2325 := (or #1223 #840 #570)
#2326 := [th-lemma arith assign-bounds -1 2]: #2325
#2327 := [unit-resolution #2326 #2324 #1725]: #840
#2328 := [unit-resolution #729 #2324]: #726
#2329 := [unit-resolution #827 #2328 #2327]: false
#2330 := [lemma #2329]: #1223
#2342 := (or #1330 #837 #838 #815 #841 #736 #839 #986 #875 #876 #877 #781 #983 #984 #985)
#2343 := [th-lemma arith assign-bounds -2 2 -1 -1 1 1 1 -1 1 -1 -1 1 -1 1]: #2342
#2344 := [unit-resolution #2343 #923 #873 #812 #835 #870 #832 #916 #1851 #1996 #2165 #2330 #2290 #2341 #772]: #736
#2345 := [unit-resolution #1542 #2344 #2340]: #65
#2295 := (or #453 #740)
#2276 := (or #337 #740)
#2243 := (or #424 #337)
#2242 := [unit-resolution #2144 #2169 #917 #2136]: false
#2244 := [lemma #2242]: #2243
#2257 := [unit-resolution #2244 #2136]: #424
#2258 := [unit-resolution #2250 #2257]: #395
#2259 := [unit-resolution #681 #2258]: #678
#2260 := [unit-resolution #804 #2259]: #763
#2261 := [unit-resolution #689 #2257]: #686
#2262 := [unit-resolution #884 #2261]: #760
#2263 := [unit-resolution #655 #2136]: #659
#2264 := [unit-resolution #1033 #2263]: #975
#2255 := (or #453 #1028 #938 #945 #740)
#2251 := [unit-resolution #2050 #918 #1037 #1043]: #366
#2252 := [unit-resolution #673 #2251]: #670
#2253 := [unit-resolution #1010 #2252]: #892
#2254 := [th-lemma arith farkas 1 -1 1 -1 2 -2 -1 1 1 -1 -1 1 1 -1 1 #779 #1021 #1043 #859 #1037 #800 #997 #808 #1970 #1000 #1005 #1402 #2253 #1008 #776]: false
#2256 := [lemma #2254]: #2255
#2265 := [unit-resolution #2256 #2264 #2262 #2260 #776]: #453
#2266 := [unit-resolution #697 #2265]: #694
#2267 := [unit-resolution #2147 #2266]: #755
#2268 := (or #337 #1335 #945 #816 #815)
#2269 := [unit-resolution #1760 #800 #808 #812 #1008 #1968]: #2268
#2270 := [unit-resolution #2269 #2267 #2165 #2136 #2260]: #1335
#2271 := (or #366 #945 #816 #396 #815)
#2272 := [unit-resolution #1755 #800 #808 #812 #1968]: #2271
#2273 := [unit-resolution #2272 #2267 #2165 #2258 #2260]: #366
#2274 := [unit-resolution #673 #2273]: #670
#2275 := [unit-resolution #1010 #2274 #2270]: false
#2277 := [lemma #2275]: #2276
#2291 := [unit-resolution #2277 #776]: #337
#2292 := [unit-resolution #657 #2291]: #658
#2293 := [unit-resolution #849 #2292]: #758
#2294 := [th-lemma arith farkas 2 -1 1 -1 -1 -1 1 1 -1 -1 1 1 -1 1 #2282 #772 #2293 #779 #776 #2284 #859 #997 #808 #1970 #1000 #1005 #1402 #2290]: false
#2296 := [lemma #2294]: #2295
#2297 := [unit-resolution #2296 #776]: #453
#2298 := [unit-resolution #697 #2297]: #694
#2299 := [unit-resolution #2147 #2298]: #755
#2302 := (or #1036 #816 #1029 #396 #815)
#2300 := (or #1036 #816 #1421 #1029 #1512 #396 #815)
#2301 := [th-lemma arith assign-bounds -2 2 -2 2 -2 -1]: #2300
#2303 := [unit-resolution #2301 #808 #1025]: #2302
#2304 := [unit-resolution #2303 #2299 #2165 #2241 #2285]: #1036
#2305 := (or #396 #815 #816 #740 #570 #782)
#2306 := [unit-resolution #818 #1968]: #2305
#2307 := [unit-resolution #2306 #2299 #2165 #2285 #776 #2293]: #570
#2308 := (or #1046 #1505 #569 #1014 #1081 #1090 #1013)
#2309 := [th-lemma arith assign-bounds 1 2 2 2 2 2]: #2308
#2310 := [unit-resolution #2309 #2307 #2304 #1005 #1402 #1970 #1000 #2220]: false
#2311 := [lemma #2310]: #740
#2331 := [unit-resolution #2087 #2085]: #991
#2332 := [unit-resolution #655 #2331]: #337
#2333 := (or #2048 #1513 #338)
#2334 := [th-lemma arith assign-bounds 1 -2]: #2333
#2335 := [unit-resolution #2334 #2332 #2085]: #1513
#2336 := [unit-resolution #657 #2332]: #658
#2337 := [unit-resolution #1475 #2336 #2335]: false
#2338 := [lemma #2337]: #2048
#2346 := (or #739 #1514 #2082 #1029 #1512 #986 #875 #837 #838 #876 #877 #984 #985 #781 #983)
#2347 := [th-lemma arith assign-bounds -1 1 -1 1 1 -1 -1 1 1 -1 -2 2 -1 1]: #2346
#2348 := [unit-resolution #2347 #923 #916 #1025 #873 #835 #870 #1473 #1851 #1996 #2338 #2290 #2341 #2241 #772]: #739
#2349 := [unit-resolution #1520 #2348 #2311]: #66
#2350 := [unit-resolution #661 #2349 #2345]: false
#2351 := [lemma #2350]: #453
#2352 := [unit-resolution #2111 #2351 #2047]: #761
#2353 := [unit-resolution #697 #2351]: #694
#2354 := [unit-resolution #2147 #2353]: #755
#2355 := [unit-resolution #2272 #2354 #2165 #2285 #2287]: #366
#2356 := [unit-resolution #673 #2355]: #670
#2357 := [unit-resolution #791 #2356]: #767
#2358 := [unit-resolution #2343 #2357 #873 #812 #835 #870 #832 #916 #1851 #1996 #2165 #2330 #2352 #2341 #772]: #736
#2359 := [unit-resolution #2347 #2357 #916 #1025 #873 #835 #870 #1473 #1851 #1996 #2338 #2352 #2341 #2241 #772]: #739
#2360 := [unit-resolution #1520 #2359 #2311]: #66
#2361 := [unit-resolution #661 #2360]: #650
#2362 := [unit-resolution #1542 #2361 #2358]: #842
#2363 := [unit-resolution #2303 #2354 #2165 #2241 #2285]: #1036
#2364 := [unit-resolution #2309 #2363 #1005 #1402 #1970 #1000 #2220]: #569
#2365 := [unit-resolution #729 #2364]: #726
#2366 := [unit-resolution #1538 #2365]: #1481
#2367 := [unit-resolution #1010 #2356]: #892
#2368 := [unit-resolution #2027 #2367 #2355]: #891
[unit-resolution #2092 #2368 #2366 #2241 #2341 #2354 #2362 #2312]: false
unsat
ebb9b9eba458556c3c96e64ab347c2dd794296aa 52 0
#2 := false
#12 := 1::Real
decl f3 :: Real
#8 := f3
#10 := 2::Real
#11 := (* 2::Real f3)
#13 := (+ #11 1::Real)
#9 := (+ f3 f3)
#14 := (< #9 #13)
#15 := (or false #14)
#16 := (or #14 #15)
#17 := (not #16)
#72 := (iff #17 false)
#40 := (+ 1::Real #11)
#43 := (< #11 #40)
#60 := (not #43)
#70 := (iff #60 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #60 #65)
#63 := (iff #43 true)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #17 #60)
#58 := (iff #16 #43)
#53 := (or #43 #43)
#56 := (iff #53 #43)
#57 := [rewrite]: #56
#54 := (iff #16 #53)
#51 := (iff #15 #43)
#46 := (or false #43)
#49 := (iff #46 #43)
#50 := [rewrite]: #49
#47 := (iff #15 #46)
#44 := (iff #14 #43)
#41 := (= #13 #40)
#42 := [rewrite]: #41
#38 := (= #9 #11)
#39 := [rewrite]: #38
#45 := [monotonicity #39 #42]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#55 := [monotonicity #45 #52]: #54
#59 := [trans #55 #57]: #58
#62 := [monotonicity #59]: #61
#73 := [trans #62 #71]: #72
#37 := [asserted]: #17
[mp #37 #73]: false
unsat
75da1862a2fd162477f9d85292ff8ab2e18559e4 342 0
#2 := false
#21 := 0::Int
decl f3 :: Int
#8 := f3
#419 := (<= f3 0::Int)
#446 := (>= f3 0::Int)
#753 := (not #446)
#409 := (not #419)
#754 := (or #409 #753)
#715 := (not #754)
#11 := 2::Int
#443 := (mod f3 2::Int)
#113 := -1::Int
#444 := (* -1::Int #443)
decl f4 :: (-> Int Int Int)
#12 := (f4 f3 2::Int)
#445 := (+ #12 #444)
#442 := (= #445 0::Int)
#705 := (not #442)
#717 := (>= #445 0::Int)
#647 := (not #717)
#654 := [hypothesis]: #717
#689 := (>= #443 0::Int)
#1 := true
#65 := [true-axiom]: true
#665 := (or false #689)
#643 := [th-lemma arith]: #665
#644 := [unit-resolution #643 #65]: #689
#95 := (>= #12 0::Int)
#98 := (not #95)
#9 := 1::Int
#13 := (* 2::Int #12)
#14 := (+ #13 1::Int)
#15 := (+ f3 #14)
#10 := (+ f3 1::Int)
#16 := (<= #10 #15)
#17 := (not #16)
#103 := (iff #17 #98)
#77 := (+ f3 #13)
#78 := (+ 1::Int #77)
#68 := (+ 1::Int f3)
#83 := (<= #68 #78)
#86 := (not #83)
#101 := (iff #86 #98)
#93 := (>= #13 0::Int)
#89 := (not #93)
#99 := (iff #89 #98)
#96 := (iff #93 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#90 := (iff #86 #89)
#91 := (iff #83 #93)
#92 := [rewrite]: #91
#94 := [monotonicity #92]: #90
#102 := [trans #94 #100]: #101
#87 := (iff #17 #86)
#84 := (iff #16 #83)
#81 := (= #15 #78)
#71 := (+ 1::Int #13)
#74 := (+ f3 #71)
#79 := (= #74 #78)
#80 := [rewrite]: #79
#75 := (= #15 #74)
#72 := (= #14 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [trans #76 #80]: #81
#69 := (= #10 #68)
#70 := [rewrite]: #69
#85 := [monotonicity #70 #82]: #84
#88 := [monotonicity #85]: #87
#104 := [trans #88 #102]: #103
#67 := [asserted]: #17
#105 := [mp #67 #104]: #98
#646 := [th-lemma arith farkas -1 1 1 #105 #644 #654]: false
#648 := [lemma #646]: #647
#660 := (or #705 #717)
#661 := [th-lemma arith triangle-eq]: #660
#662 := [unit-resolution #661 #648]: #705
#637 := (or #715 #442)
#741 := -2::Int
#439 := (* -1::Int f3)
#465 := (mod #439 -2::Int)
#361 := (+ #12 #465)
#460 := (= #361 0::Int)
#739 := (ite #754 #442 #460)
#763 := (= #12 0::Int)
#764 := (= f3 0::Int)
#450 := (ite #764 #763 #739)
#19 := (:var 0 Int)
#18 := (:var 1 Int)
#39 := (f4 #18 #19)
#775 := (pattern #39)
#117 := (* -1::Int #19)
#114 := (* -1::Int #18)
#172 := (mod #114 #117)
#287 := (+ #39 #172)
#288 := (= #287 0::Int)
#40 := (mod #18 #19)
#284 := (* -1::Int #40)
#285 := (+ #39 #284)
#286 := (= #285 0::Int)
#146 := (>= #18 0::Int)
#139 := (<= #19 0::Int)
#231 := (or #139 #146)
#232 := (not #231)
#135 := (<= #18 0::Int)
#229 := (or #135 #139)
#230 := (not #229)
#235 := (or #230 #232)
#289 := (ite #235 #286 #288)
#283 := (= #39 0::Int)
#22 := (= #18 0::Int)
#290 := (ite #22 #283 #289)
#282 := (= #18 #39)
#23 := (= #19 0::Int)
#291 := (ite #23 #282 #290)
#776 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #775) #291)
#294 := (forall (vars (?v0 Int) (?v1 Int)) #291)
#779 := (iff #294 #776)
#777 := (iff #291 #291)
#778 := [refl]: #777
#780 := [quant-intro #778]: #779
#178 := (* -1::Int #172)
#251 := (ite #235 #40 #178)
#254 := (ite #22 0::Int #251)
#257 := (ite #23 #18 #254)
#260 := (= #39 #257)
#263 := (forall (vars (?v0 Int) (?v1 Int)) #260)
#295 := (iff #263 #294)
#292 := (iff #260 #291)
#293 := [rewrite]: #292
#296 := [quant-intro #293]: #295
#147 := (not #146)
#140 := (not #139)
#150 := (and #140 #147)
#136 := (not #135)
#143 := (and #136 #140)
#153 := (or #143 #150)
#198 := (ite #153 #40 #178)
#201 := (ite #22 0::Int #198)
#204 := (ite #23 #18 #201)
#207 := (= #39 #204)
#210 := (forall (vars (?v0 Int) (?v1 Int)) #207)
#264 := (iff #210 #263)
#261 := (iff #207 #260)
#258 := (= #204 #257)
#255 := (= #201 #254)
#252 := (= #198 #251)
#236 := (iff #153 #235)
#233 := (iff #150 #232)
#234 := [rewrite]: #233
#223 := (iff #143 #230)
#224 := [rewrite]: #223
#237 := [monotonicity #224 #234]: #236
#253 := [monotonicity #237]: #252
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [monotonicity #259]: #261
#265 := [quant-intro #262]: #264
#221 := (~ #210 #210)
#220 := (~ #207 #207)
#217 := [refl]: #220
#222 := [nnf-pos #217]: #221
#33 := (- #19)
#32 := (- #18)
#41 := (mod #32 #33)
#42 := (- #41)
#26 := (< 0::Int #19)
#28 := (< #18 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #18)
#27 := (and #25 #26)
#30 := (or #27 #29)
#43 := (ite #30 #40 #42)
#44 := (ite #22 0::Int #43)
#45 := (ite #23 #18 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#213 := (iff #47 #210)
#107 := (and #26 #28)
#110 := (or #27 #107)
#183 := (ite #110 #40 #178)
#186 := (ite #22 0::Int #183)
#189 := (ite #23 #18 #186)
#192 := (= #39 #189)
#195 := (forall (vars (?v0 Int) (?v1 Int)) #192)
#211 := (iff #195 #210)
#208 := (iff #192 #207)
#205 := (= #189 #204)
#202 := (= #186 #201)
#199 := (= #183 #198)
#154 := (iff #110 #153)
#151 := (iff #107 #150)
#148 := (iff #28 #147)
#149 := [rewrite]: #148
#141 := (iff #26 #140)
#142 := [rewrite]: #141
#152 := [monotonicity #142 #149]: #151
#144 := (iff #27 #143)
#137 := (iff #25 #136)
#138 := [rewrite]: #137
#145 := [monotonicity #138 #142]: #144
#155 := [monotonicity #145 #152]: #154
#200 := [monotonicity #155]: #199
#203 := [monotonicity #200]: #202
#206 := [monotonicity #203]: #205
#209 := [monotonicity #206]: #208
#212 := [quant-intro #209]: #211
#196 := (iff #47 #195)
#193 := (iff #46 #192)
#190 := (= #45 #189)
#187 := (= #44 #186)
#184 := (= #43 #183)
#181 := (= #42 #178)
#175 := (- #172)
#179 := (= #175 #178)
#180 := [rewrite]: #179
#176 := (= #42 #175)
#173 := (= #41 #172)
#118 := (= #33 #117)
#119 := [rewrite]: #118
#115 := (= #32 #114)
#116 := [rewrite]: #115
#174 := [monotonicity #116 #119]: #173
#177 := [monotonicity #174]: #176
#182 := [trans #177 #180]: #181
#111 := (iff #30 #110)
#108 := (iff #29 #107)
#109 := [rewrite]: #108
#112 := [monotonicity #109]: #111
#185 := [monotonicity #112 #182]: #184
#188 := [monotonicity #185]: #187
#191 := [monotonicity #188]: #190
#194 := [monotonicity #191]: #193
#197 := [quant-intro #194]: #196
#214 := [trans #197 #212]: #213
#171 := [asserted]: #47
#215 := [mp #171 #214]: #210
#218 := [mp~ #215 #222]: #210
#266 := [mp #218 #265]: #263
#297 := [mp #266 #296]: #294
#781 := [mp #297 #780]: #776
#734 := (not #776)
#723 := (or #734 #450)
#355 := (* -1::Int 2::Int)
#440 := (mod #439 #355)
#441 := (+ #12 #440)
#432 := (= #441 0::Int)
#425 := (<= 2::Int 0::Int)
#760 := (or #425 #446)
#762 := (not #760)
#549 := (or #419 #425)
#756 := (not #549)
#430 := (or #756 #762)
#431 := (ite #430 #442 #432)
#765 := (ite #764 #763 #431)
#766 := (= f3 #12)
#761 := (= 2::Int 0::Int)
#767 := (ite #761 #766 #765)
#724 := (or #734 #767)
#720 := (iff #724 #723)
#726 := (iff #723 #723)
#727 := [rewrite]: #726
#733 := (iff #767 #450)
#453 := (ite false #766 #450)
#447 := (iff #453 #450)
#729 := [rewrite]: #447
#731 := (iff #767 #453)
#451 := (iff #765 #450)
#736 := (iff #431 #739)
#461 := (iff #432 #460)
#737 := (= #441 #361)
#466 := (= #440 #465)
#742 := (= #355 -2::Int)
#464 := [rewrite]: #742
#467 := [monotonicity #464]: #466
#738 := [monotonicity #467]: #737
#735 := [monotonicity #738]: #461
#752 := (iff #430 #754)
#393 := (iff #762 #753)
#388 := (iff #760 #446)
#747 := (or false #446)
#744 := (iff #747 #446)
#750 := [rewrite]: #744
#748 := (iff #760 #747)
#422 := (iff #425 false)
#758 := [rewrite]: #422
#749 := [monotonicity #758]: #748
#751 := [trans #749 #750]: #388
#394 := [monotonicity #751]: #393
#745 := (iff #756 #409)
#407 := (iff #549 #419)
#418 := (or #419 false)
#743 := (iff #418 #419)
#406 := [rewrite]: #743
#759 := (iff #549 #418)
#402 := [monotonicity #758]: #759
#408 := [trans #402 #406]: #407
#746 := [monotonicity #408]: #745
#755 := [monotonicity #746 #394]: #752
#740 := [monotonicity #755 #735]: #736
#452 := [monotonicity #740]: #451
#757 := (iff #761 false)
#417 := [rewrite]: #757
#732 := [monotonicity #417 #452]: #731
#730 := [trans #732 #729]: #733
#721 := [monotonicity #730]: #720
#722 := [trans #721 #727]: #720
#725 := [quant-inst #8 #11]: #724
#728 := [mp #725 #722]: #723
#663 := [unit-resolution #728 #781]: #450
#593 := (not #764)
#592 := (not #450)
#649 := (or #592 #593)
#698 := (not #763)
#664 := (or #698 #95)
#688 := [th-lemma arith triangle-eq]: #664
#682 := [unit-resolution #688 #105]: #698
#552 := (or #592 #593 #763)
#700 := [def-axiom]: #552
#650 := [unit-resolution #700 #682]: #649
#645 := [unit-resolution #650 #663]: #593
#602 := (or #592 #764 #739)
#697 := [def-axiom]: #602
#651 := [unit-resolution #697 #645 #663]: #739
#719 := (not #739)
#548 := (or #719 #715 #442)
#550 := [def-axiom]: #548
#633 := [unit-resolution #550 #651]: #637
#634 := [unit-resolution #633 #662]: #715
#570 := (or #754 #419)
#571 := [def-axiom]: #570
#635 := [unit-resolution #571 #634]: #419
#713 := (or #754 #446)
#714 := [def-axiom]: #713
#638 := [unit-resolution #714 #634]: #446
#639 := (or #764 #409 #753)
#640 := [th-lemma arith triangle-eq]: #639
#641 := [unit-resolution #640 #645]: #754
[unit-resolution #641 #638 #635]: false
unsat
3b8dfbe5d2104f714ba2e5d249bcf001c2c84dba 349 0
#2 := false
#20 := 0::Int
decl f3 :: Int
#8 := f3
#438 := (>= f3 0::Int)
#758 := (<= f3 0::Int)
#404 := (not #758)
#747 := (not #438)
#751 := (or #747 #404)
#714 := (not #751)
#9 := 2::Int
#439 := (mod f3 2::Int)
#108 := -1::Int
#440 := (* -1::Int #439)
decl f4 :: (-> Int Int Int)
#10 := (f4 f3 2::Int)
#368 := (+ #10 #440)
#441 := (= #368 0::Int)
#587 := (not #441)
#544 := (<= #368 0::Int)
#647 := (not #544)
#655 := (>= #439 2::Int)
#656 := (not #655)
#1 := true
#64 := [true-axiom]: true
#643 := (or false #656)
#644 := [th-lemma arith]: #643
#645 := [unit-resolution #644 #64]: #656
#646 := [hypothesis]: #544
#93 := (>= #10 2::Int)
#13 := 3::Int
#14 := (+ f3 3::Int)
#11 := (+ #10 #10)
#12 := (+ f3 #11)
#15 := (< #12 #14)
#16 := (not #15)
#98 := (iff #16 #93)
#73 := (+ 3::Int f3)
#67 := (* 2::Int #10)
#70 := (+ f3 #67)
#76 := (< #70 #73)
#79 := (not #76)
#96 := (iff #79 #93)
#86 := (>= #67 3::Int)
#94 := (iff #86 #93)
#95 := [rewrite]: #94
#91 := (iff #79 #86)
#84 := (not #86)
#83 := (not #84)
#89 := (iff #83 #86)
#90 := [rewrite]: #89
#87 := (iff #79 #83)
#85 := (iff #76 #84)
#82 := [rewrite]: #85
#88 := [monotonicity #82]: #87
#92 := [trans #88 #90]: #91
#97 := [trans #92 #95]: #96
#80 := (iff #16 #79)
#77 := (iff #15 #76)
#74 := (= #14 #73)
#75 := [rewrite]: #74
#71 := (= #12 #70)
#68 := (= #11 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#78 := [monotonicity #72 #75]: #77
#81 := [monotonicity #78]: #80
#99 := [trans #81 #97]: #98
#66 := [asserted]: #16
#100 := [mp #66 #99]: #93
#641 := [th-lemma arith farkas -1 1 1 #100 #646 #645]: false
#633 := [lemma #641]: #647
#650 := (or #587 #544)
#661 := [th-lemma arith triangle-eq]: #650
#639 := [unit-resolution #661 #633]: #587
#611 := (or #714 #441)
#462 := -2::Int
#435 := (* -1::Int f3)
#733 := (mod #435 -2::Int)
#457 := (+ #10 #733)
#732 := (= #457 0::Int)
#447 := (ite #751 #441 #732)
#427 := (= #10 0::Int)
#759 := (= f3 0::Int)
#727 := (ite #759 #427 #447)
#18 := (:var 0 Int)
#17 := (:var 1 Int)
#38 := (f4 #17 #18)
#771 := (pattern #38)
#112 := (* -1::Int #18)
#109 := (* -1::Int #17)
#167 := (mod #109 #112)
#282 := (+ #38 #167)
#283 := (= #282 0::Int)
#39 := (mod #17 #18)
#279 := (* -1::Int #39)
#280 := (+ #38 #279)
#281 := (= #280 0::Int)
#141 := (>= #17 0::Int)
#134 := (<= #18 0::Int)
#226 := (or #134 #141)
#227 := (not #226)
#130 := (<= #17 0::Int)
#224 := (or #130 #134)
#225 := (not #224)
#230 := (or #225 #227)
#284 := (ite #230 #281 #283)
#278 := (= #38 0::Int)
#21 := (= #17 0::Int)
#285 := (ite #21 #278 #284)
#277 := (= #17 #38)
#22 := (= #18 0::Int)
#286 := (ite #22 #277 #285)
#772 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #771) #286)
#289 := (forall (vars (?v0 Int) (?v1 Int)) #286)
#775 := (iff #289 #772)
#773 := (iff #286 #286)
#774 := [refl]: #773
#776 := [quant-intro #774]: #775
#173 := (* -1::Int #167)
#246 := (ite #230 #39 #173)
#249 := (ite #21 0::Int #246)
#252 := (ite #22 #17 #249)
#255 := (= #38 #252)
#258 := (forall (vars (?v0 Int) (?v1 Int)) #255)
#290 := (iff #258 #289)
#287 := (iff #255 #286)
#288 := [rewrite]: #287
#291 := [quant-intro #288]: #290
#142 := (not #141)
#135 := (not #134)
#145 := (and #135 #142)
#131 := (not #130)
#138 := (and #131 #135)
#148 := (or #138 #145)
#193 := (ite #148 #39 #173)
#196 := (ite #21 0::Int #193)
#199 := (ite #22 #17 #196)
#202 := (= #38 #199)
#205 := (forall (vars (?v0 Int) (?v1 Int)) #202)
#259 := (iff #205 #258)
#256 := (iff #202 #255)
#253 := (= #199 #252)
#250 := (= #196 #249)
#247 := (= #193 #246)
#231 := (iff #148 #230)
#228 := (iff #145 #227)
#229 := [rewrite]: #228
#218 := (iff #138 #225)
#219 := [rewrite]: #218
#232 := [monotonicity #219 #229]: #231
#248 := [monotonicity #232]: #247
#251 := [monotonicity #248]: #250
#254 := [monotonicity #251]: #253
#257 := [monotonicity #254]: #256
#260 := [quant-intro #257]: #259
#216 := (~ #205 #205)
#215 := (~ #202 #202)
#212 := [refl]: #215
#217 := [nnf-pos #212]: #216
#32 := (- #18)
#31 := (- #17)
#40 := (mod #31 #32)
#41 := (- #40)
#25 := (< 0::Int #18)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#42 := (ite #29 #39 #41)
#43 := (ite #21 0::Int #42)
#44 := (ite #22 #17 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#208 := (iff #46 #205)
#102 := (and #25 #27)
#105 := (or #26 #102)
#178 := (ite #105 #39 #173)
#181 := (ite #21 0::Int #178)
#184 := (ite #22 #17 #181)
#187 := (= #38 #184)
#190 := (forall (vars (?v0 Int) (?v1 Int)) #187)
#206 := (iff #190 #205)
#203 := (iff #187 #202)
#200 := (= #184 #199)
#197 := (= #181 #196)
#194 := (= #178 #193)
#149 := (iff #105 #148)
#146 := (iff #102 #145)
#143 := (iff #27 #142)
#144 := [rewrite]: #143
#136 := (iff #25 #135)
#137 := [rewrite]: #136
#147 := [monotonicity #137 #144]: #146
#139 := (iff #26 #138)
#132 := (iff #24 #131)
#133 := [rewrite]: #132
#140 := [monotonicity #133 #137]: #139
#150 := [monotonicity #140 #147]: #149
#195 := [monotonicity #150]: #194
#198 := [monotonicity #195]: #197
#201 := [monotonicity #198]: #200
#204 := [monotonicity #201]: #203
#207 := [quant-intro #204]: #206
#191 := (iff #46 #190)
#188 := (iff #45 #187)
#185 := (= #44 #184)
#182 := (= #43 #181)
#179 := (= #42 #178)
#176 := (= #41 #173)
#170 := (- #167)
#174 := (= #170 #173)
#175 := [rewrite]: #174
#171 := (= #41 #170)
#168 := (= #40 #167)
#113 := (= #32 #112)
#114 := [rewrite]: #113
#110 := (= #31 #109)
#111 := [rewrite]: #110
#169 := [monotonicity #111 #114]: #168
#172 := [monotonicity #169]: #171
#177 := [trans #172 #175]: #176
#106 := (iff #29 #105)
#103 := (iff #28 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#180 := [monotonicity #107 #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [monotonicity #186]: #188
#192 := [quant-intro #189]: #191
#209 := [trans #192 #207]: #208
#166 := [asserted]: #46
#210 := [mp #166 #209]: #205
#213 := [mp~ #210 #217]: #205
#261 := [mp #213 #260]: #258
#292 := [mp #261 #291]: #289
#777 := [mp #292 #776]: #772
#716 := (not #772)
#717 := (or #716 #727)
#350 := (* -1::Int 2::Int)
#436 := (mod #435 #350)
#437 := (+ #10 #436)
#428 := (= #437 0::Int)
#442 := (<= 2::Int 0::Int)
#421 := (or #442 #438)
#756 := (not #421)
#415 := (or #758 #442)
#545 := (not #415)
#752 := (or #545 #756)
#426 := (ite #752 #441 #428)
#760 := (ite #759 #427 #426)
#761 := (= f3 #10)
#762 := (= 2::Int 0::Int)
#757 := (ite #762 #761 #760)
#722 := (or #716 #757)
#718 := (iff #722 #717)
#565 := (iff #717 #717)
#566 := [rewrite]: #565
#720 := (iff #757 #727)
#725 := (ite false #761 #727)
#730 := (iff #725 #727)
#719 := [rewrite]: #730
#729 := (iff #757 #725)
#728 := (iff #760 #727)
#448 := (iff #426 #447)
#736 := (iff #428 #732)
#731 := (= #437 #457)
#734 := (= #436 #733)
#463 := (= #350 -2::Int)
#356 := [rewrite]: #463
#456 := [monotonicity #356]: #734
#735 := [monotonicity #456]: #731
#446 := [monotonicity #735]: #736
#460 := (iff #752 #751)
#390 := (or #404 #747)
#737 := (iff #390 #751)
#738 := [rewrite]: #737
#750 := (iff #752 #390)
#749 := (iff #756 #747)
#746 := (iff #421 #438)
#742 := (or false #438)
#745 := (iff #742 #438)
#740 := [rewrite]: #745
#743 := (iff #421 #742)
#413 := (iff #442 false)
#418 := [rewrite]: #413
#744 := [monotonicity #418]: #743
#384 := [trans #744 #740]: #746
#389 := [monotonicity #384]: #749
#405 := (iff #545 #404)
#402 := (iff #415 #758)
#754 := (or #758 false)
#398 := (iff #754 #758)
#739 := [rewrite]: #398
#414 := (iff #415 #754)
#755 := [monotonicity #418]: #414
#403 := [trans #755 #739]: #402
#741 := [monotonicity #403]: #405
#748 := [monotonicity #741 #389]: #750
#461 := [trans #748 #738]: #460
#449 := [monotonicity #461 #446]: #448
#443 := [monotonicity #449]: #728
#763 := (iff #762 false)
#753 := [rewrite]: #763
#726 := [monotonicity #753 #443]: #729
#721 := [trans #726 #719]: #720
#724 := [monotonicity #721]: #718
#567 := [trans #724 #566]: #718
#723 := [quant-inst #8 #9]: #722
#709 := [mp #723 #567]: #717
#640 := [unit-resolution #709 #777]: #727
#694 := (not #759)
#693 := (not #727)
#636 := (or #693 #694)
#600 := (not #427)
#710 := (<= #10 0::Int)
#642 := (not #710)
#672 := (not #93)
#673 := (or #642 #672)
#629 := [th-lemma arith farkas 1 1]: #673
#630 := [unit-resolution #629 #100]: #642
#631 := (or #600 #710)
#634 := [th-lemma arith triangle-eq]: #631
#635 := [unit-resolution #634 #630]: #600
#697 := (or #693 #694 #427)
#582 := [def-axiom]: #697
#637 := [unit-resolution #582 #635]: #636
#632 := [unit-resolution #637 #640]: #694
#597 := (or #693 #759 #447)
#599 := [def-axiom]: #597
#638 := [unit-resolution #599 #632 #640]: #447
#701 := (not #447)
#703 := (or #701 #714 #441)
#704 := [def-axiom]: #703
#612 := [unit-resolution #704 #638]: #611
#613 := [unit-resolution #612 #639]: #714
#712 := (or #751 #438)
#706 := [def-axiom]: #712
#506 := [unit-resolution #706 #613]: #438
#707 := (or #751 #758)
#713 := [def-axiom]: #707
#617 := [unit-resolution #713 #613]: #758
#618 := (or #759 #404 #747)
#619 := [th-lemma arith triangle-eq]: #618
#624 := [unit-resolution #619 #632]: #390
[unit-resolution #624 #617 #506]: false
unsat
cfa8a4e8b0964986b89eaf37e6038032e9b8b0d6 101 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#10 := (= f3 0::Real)
#11 := (not #10)
#46 := [asserted]: #11
#101 := (<= f3 0::Real)
#21 := 2::Real
#48 := (* 2::Real f3)
#103 := (<= #48 0::Real)
#96 := (= #48 0::Real)
#20 := 4::Real
#15 := (- f3)
#14 := (< f3 0::Real)
#16 := (ite #14 #15 f3)
#13 := 1::Real
#17 := (< 1::Real #16)
#18 := (not #17)
#19 := (or #17 #18)
#22 := (ite #19 4::Real 2::Real)
#23 := (* #22 f3)
#12 := (+ f3 f3)
#24 := (= #12 #23)
#25 := (not #24)
#26 := (not #25)
#97 := (iff #26 #96)
#78 := (* 4::Real f3)
#81 := (= #48 #78)
#94 := (iff #81 #96)
#95 := [rewrite]: #94
#92 := (iff #26 #81)
#84 := (not #81)
#87 := (not #84)
#90 := (iff #87 #81)
#91 := [rewrite]: #90
#88 := (iff #26 #87)
#85 := (iff #25 #84)
#82 := (iff #24 #81)
#79 := (= #23 #78)
#76 := (= #22 4::Real)
#1 := true
#71 := (ite true 4::Real 2::Real)
#74 := (= #71 4::Real)
#75 := [rewrite]: #74
#72 := (= #22 #71)
#69 := (iff #19 true)
#51 := -1::Real
#52 := (* -1::Real f3)
#55 := (ite #14 #52 f3)
#58 := (< 1::Real #55)
#61 := (not #58)
#64 := (or #58 #61)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #19 #64)
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (= #16 #55)
#53 := (= #15 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #60 #63]: #65
#70 := [trans #66 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#80 := [monotonicity #77]: #79
#49 := (= #12 #48)
#50 := [rewrite]: #49
#83 := [monotonicity #50 #80]: #82
#86 := [monotonicity #83]: #85
#89 := [monotonicity #86]: #88
#93 := [trans #89 #91]: #92
#98 := [trans #93 #95]: #97
#47 := [asserted]: #26
#99 := [mp #47 #98]: #96
#105 := (not #96)
#106 := (or #105 #103)
#107 := [th-lemma arith triangle-eq]: #106
#108 := [unit-resolution #107 #99]: #103
#109 := (not #103)
#110 := (or #101 #109)
#111 := [th-lemma arith assign-bounds 1]: #110
#112 := [unit-resolution #111 #108]: #101
#102 := (>= f3 0::Real)
#104 := (>= #48 0::Real)
#113 := (or #105 #104)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #99]: #104
#116 := (not #104)
#117 := (or #102 #116)
#118 := [th-lemma arith assign-bounds 1]: #117
#119 := [unit-resolution #118 #115]: #102
#121 := (not #102)
#120 := (not #101)
#122 := (or #10 #120 #121)
#123 := [th-lemma arith triangle-eq]: #122
[unit-resolution #123 #119 #112 #46]: false
unsat
742e212b0179422ed718ceb7818522f48622510c 930 0
#2 := false
#20 := 1::Int
decl f3 :: (-> Int Int Int)
#11 := 2::Int
decl f5 :: Int
#9 := f5
#22 := (f3 f5 2::Int)
#1103 := (<= #22 1::Int)
#13 := 0::Int
#574 := (mod f5 2::Int)
#108 := -1::Int
#575 := (* -1::Int #574)
#576 := (+ #22 #575)
#954 := (<= #576 0::Int)
#577 := (= #576 0::Int)
decl f4 :: Int
#8 := f4
#10 := (+ f4 f5)
#461 := (>= #10 0::Int)
#778 := (= #10 0::Int)
#458 := (mod #10 2::Int)
#459 := (* -1::Int #458)
#12 := (f3 #10 2::Int)
#460 := (+ #12 #459)
#457 := (= #460 0::Int)
#715 := (not #457)
#720 := (<= #460 0::Int)
#1107 := [hypothesis]: #457
#1108 := (or #715 #720)
#1109 := [th-lemma arith triangle-eq]: #1108
#1110 := [unit-resolution #1109 #1107]: #720
#722 := (>= #460 0::Int)
#1111 := (or #715 #722)
#1322 := [th-lemma arith triangle-eq]: #1111
#1323 := [unit-resolution #1322 #1107]: #722
#1193 := (not #720)
#1239 := (not #722)
#1348 := (or #1239 #1193)
#1112 := (div f5 2::Int)
#476 := -2::Int
#1125 := (* -2::Int #1112)
#1126 := (+ #575 #1125)
#1127 := (+ f5 #1126)
#1124 := (= #1127 0::Int)
#1161 := (not #1124)
#1276 := [hypothesis]: #1161
#1 := true
#72 := [true-axiom]: true
#1154 := (or false #1124)
#1159 := [th-lemma arith]: #1154
#1277 := [unit-resolution #1159 #72 #1276]: false
#1278 := [lemma #1277]: #1124
#1274 := (or #1161 #1239 #1193)
#1134 := (>= #574 0::Int)
#1157 := (or false #1134)
#1158 := [th-lemma arith]: #1157
#1151 := [unit-resolution #1158 #72]: #1134
#1224 := (>= #1127 0::Int)
#1246 := [hypothesis]: #1124
#1247 := (or #1161 #1224)
#1248 := [th-lemma arith triangle-eq]: #1247
#1249 := [unit-resolution #1248 #1246]: #1224
#17 := 3::Int
#15 := 4::Int
#16 := (f3 f4 4::Int)
#568 := (>= #16 3::Int)
#18 := (= #16 3::Int)
#75 := [asserted]: #18
#967 := (not #18)
#993 := (or #967 #568)
#994 := [th-lemma arith triangle-eq]: #993
#995 := [unit-resolution #994 #75]: #568
#865 := (div f4 4::Int)
#663 := -4::Int
#881 := (* -4::Int #865)
#696 := (mod f4 4::Int)
#698 := (* -1::Int #696)
#882 := (+ #698 #881)
#883 := (+ f4 #882)
#889 := (>= #883 0::Int)
#880 := (= #883 0::Int)
#971 := (or false #880)
#972 := [th-lemma arith]: #971
#973 := [unit-resolution #972 #72]: #880
#974 := (not #880)
#996 := (or #974 #889)
#997 := [th-lemma arith triangle-eq]: #996
#998 := [unit-resolution #997 #973]: #889
#560 := (>= #12 0::Int)
#14 := (= #12 0::Int)
#74 := [asserted]: #14
#622 := (not #14)
#1230 := (or #622 #560)
#1231 := [th-lemma arith triangle-eq]: #1230
#1232 := [unit-resolution #1231 #74]: #560
#811 := (div #10 2::Int)
#828 := (* -2::Int #811)
#829 := (+ #459 #828)
#830 := (+ f5 #829)
#831 := (+ f4 #830)
#1106 := (>= #831 0::Int)
#826 := (= #831 0::Int)
#1167 := (or false #826)
#1168 := [th-lemma arith]: #1167
#1169 := [unit-resolution #1168 #72]: #826
#1180 := (not #826)
#1233 := (or #1180 #1106)
#1234 := [th-lemma arith triangle-eq]: #1233
#1235 := [unit-resolution #1234 #1169]: #1106
#708 := (+ #16 #698)
#600 := (>= #708 0::Int)
#709 := (= #708 0::Int)
#482 := (* -1::Int f4)
#660 := (mod #482 -4::Int)
#648 := (+ #16 #660)
#653 := (= #648 0::Int)
#710 := (>= f4 0::Int)
#669 := (not #710)
#701 := (<= f4 0::Int)
#670 := (not #701)
#659 := (or #670 #669)
#656 := (ite #659 #709 #653)
#689 := (= f4 0::Int)
#590 := (not #689)
#688 := (= #16 0::Int)
#595 := (not #688)
#428 := (= 3::Int 0::Int)
#430 := (iff #428 false)
#419 := [rewrite]: #430
#425 := [hypothesis]: #688
#426 := (= 3::Int #16)
#427 := [symm #75]: #426
#429 := [trans #427 #425]: #428
#431 := [mp #429 #419]: false
#412 := [lemma #431]: #595
#1027 := (or #590 #688)
#630 := (ite #689 #688 #656)
#27 := (:var 0 Int)
#26 := (:var 1 Int)
#46 := (f3 #26 #27)
#790 := (pattern #46)
#112 := (* -1::Int #27)
#109 := (* -1::Int #26)
#173 := (mod #109 #112)
#302 := (+ #46 #173)
#303 := (= #302 0::Int)
#47 := (mod #26 #27)
#299 := (* -1::Int #47)
#300 := (+ #46 #299)
#301 := (= #300 0::Int)
#147 := (>= #26 0::Int)
#140 := (<= #27 0::Int)
#246 := (or #140 #147)
#247 := (not #246)
#136 := (<= #26 0::Int)
#242 := (or #136 #140)
#243 := (not #242)
#250 := (or #243 #247)
#304 := (ite #250 #301 #303)
#298 := (= #46 0::Int)
#29 := (= #26 0::Int)
#305 := (ite #29 #298 #304)
#297 := (= #26 #46)
#30 := (= #27 0::Int)
#306 := (ite #30 #297 #305)
#791 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #790) #306)
#309 := (forall (vars (?v0 Int) (?v1 Int)) #306)
#794 := (iff #309 #791)
#792 := (iff #306 #306)
#793 := [refl]: #792
#795 := [quant-intro #793]: #794
#179 := (* -1::Int #173)
#266 := (ite #250 #47 #179)
#269 := (ite #29 0::Int #266)
#272 := (ite #30 #26 #269)
#275 := (= #46 #272)
#278 := (forall (vars (?v0 Int) (?v1 Int)) #275)
#310 := (iff #278 #309)
#307 := (iff #275 #306)
#308 := [rewrite]: #307
#311 := [quant-intro #308]: #310
#148 := (not #147)
#141 := (not #140)
#151 := (and #141 #148)
#137 := (not #136)
#144 := (and #137 #141)
#154 := (or #144 #151)
#199 := (ite #154 #47 #179)
#202 := (ite #29 0::Int #199)
#205 := (ite #30 #26 #202)
#208 := (= #46 #205)
#211 := (forall (vars (?v0 Int) (?v1 Int)) #208)
#279 := (iff #211 #278)
#276 := (iff #208 #275)
#273 := (= #205 #272)
#270 := (= #202 #269)
#267 := (= #199 #266)
#251 := (iff #154 #250)
#248 := (iff #151 #247)
#249 := [rewrite]: #248
#244 := (iff #144 #243)
#245 := [rewrite]: #244
#252 := [monotonicity #245 #249]: #251
#268 := [monotonicity #252]: #267
#271 := [monotonicity #268]: #270
#274 := [monotonicity #271]: #273
#277 := [monotonicity #274]: #276
#280 := [quant-intro #277]: #279
#221 := (~ #211 #211)
#223 := (~ #208 #208)
#220 := [refl]: #223
#224 := [nnf-pos #220]: #221
#40 := (- #27)
#39 := (- #26)
#48 := (mod #39 #40)
#49 := (- #48)
#33 := (< 0::Int #27)
#35 := (< #26 0::Int)
#36 := (and #35 #33)
#32 := (< 0::Int #26)
#34 := (and #32 #33)
#37 := (or #34 #36)
#50 := (ite #37 #47 #49)
#51 := (ite #29 0::Int #50)
#52 := (ite #30 #26 #51)
#53 := (= #46 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#214 := (iff #54 #211)
#102 := (and #33 #35)
#105 := (or #34 #102)
#184 := (ite #105 #47 #179)
#93 := (= 0::Int #26)
#187 := (ite #93 0::Int #184)
#96 := (= 0::Int #27)
#190 := (ite #96 #26 #187)
#193 := (= #46 #190)
#196 := (forall (vars (?v0 Int) (?v1 Int)) #193)
#212 := (iff #196 #211)
#209 := (iff #193 #208)
#206 := (= #190 #205)
#203 := (= #187 #202)
#200 := (= #184 #199)
#155 := (iff #105 #154)
#152 := (iff #102 #151)
#149 := (iff #35 #148)
#150 := [rewrite]: #149
#142 := (iff #33 #141)
#143 := [rewrite]: #142
#153 := [monotonicity #143 #150]: #152
#145 := (iff #34 #144)
#138 := (iff #32 #137)
#139 := [rewrite]: #138
#146 := [monotonicity #139 #143]: #145
#156 := [monotonicity #146 #153]: #155
#201 := [monotonicity #156]: #200
#130 := (iff #93 #29)
#131 := [rewrite]: #130
#204 := [monotonicity #131 #201]: #203
#132 := (iff #96 #30)
#133 := [rewrite]: #132
#207 := [monotonicity #133 #204]: #206
#210 := [monotonicity #207]: #209
#213 := [quant-intro #210]: #212
#197 := (iff #54 #196)
#194 := (iff #53 #193)
#191 := (= #52 #190)
#188 := (= #51 #187)
#185 := (= #50 #184)
#182 := (= #49 #179)
#176 := (- #173)
#180 := (= #176 #179)
#181 := [rewrite]: #180
#177 := (= #49 #176)
#174 := (= #48 #173)
#113 := (= #40 #112)
#114 := [rewrite]: #113
#110 := (= #39 #109)
#111 := [rewrite]: #110
#175 := [monotonicity #111 #114]: #174
#178 := [monotonicity #175]: #177
#183 := [trans #178 #181]: #182
#106 := (iff #37 #105)
#103 := (iff #36 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#186 := [monotonicity #107 #183]: #185
#94 := (iff #29 #93)
#95 := [rewrite]: #94
#189 := [monotonicity #95 #186]: #188
#97 := (iff #30 #96)
#98 := [rewrite]: #97
#192 := [monotonicity #98 #189]: #191
#195 := [monotonicity #192]: #194
#198 := [quant-intro #195]: #197
#215 := [trans #198 #213]: #214
#172 := [asserted]: #54
#216 := [mp #172 #215]: #211
#225 := [mp~ #216 #224]: #211
#281 := [mp #225 #280]: #278
#312 := [mp #281 #311]: #309
#796 := [mp #312 #795]: #791
#584 := (not #791)
#641 := (or #584 #630)
#718 := (* -1::Int 4::Int)
#705 := (mod #482 #718)
#707 := (+ #16 #705)
#699 := (= #707 0::Int)
#706 := (<= 4::Int 0::Int)
#711 := (or #706 #710)
#700 := (not #711)
#702 := (or #701 #706)
#703 := (not #702)
#697 := (or #703 #700)
#704 := (ite #697 #709 #699)
#691 := (ite #689 #688 #704)
#692 := (= f4 #16)
#693 := (= 4::Int 0::Int)
#694 := (ite #693 #692 #691)
#644 := (or #584 #694)
#646 := (iff #644 #641)
#647 := (iff #641 #641)
#627 := [rewrite]: #647
#639 := (iff #694 #630)
#525 := (ite false #692 #630)
#638 := (iff #525 #630)
#643 := [rewrite]: #638
#636 := (iff #694 #525)
#631 := (iff #691 #630)
#651 := (iff #704 #656)
#654 := (iff #699 #653)
#649 := (= #707 #648)
#666 := (= #705 #660)
#664 := (= #718 -4::Int)
#665 := [rewrite]: #664
#652 := [monotonicity #665]: #666
#650 := [monotonicity #652]: #649
#655 := [monotonicity #650]: #654
#661 := (iff #697 #659)
#680 := (iff #700 #669)
#678 := (iff #711 #710)
#673 := (or false #710)
#676 := (iff #673 #710)
#677 := [rewrite]: #676
#674 := (iff #711 #673)
#681 := (iff #706 false)
#682 := [rewrite]: #681
#675 := [monotonicity #682]: #674
#679 := [trans #675 #677]: #678
#658 := [monotonicity #679]: #680
#671 := (iff #703 #670)
#667 := (iff #702 #701)
#684 := (or #701 false)
#683 := (iff #684 #701)
#687 := [rewrite]: #683
#685 := (iff #702 #684)
#686 := [monotonicity #682]: #685
#668 := [trans #686 #687]: #667
#672 := [monotonicity #668]: #671
#662 := [monotonicity #672 #658]: #661
#657 := [monotonicity #662 #655]: #651
#632 := [monotonicity #657]: #631
#690 := (iff #693 false)
#695 := [rewrite]: #690
#637 := [monotonicity #695 #632]: #636
#640 := [trans #637 #643]: #639
#642 := [monotonicity #640]: #646
#573 := [trans #642 #627]: #646
#645 := [quant-inst #8 #15]: #644
#628 := [mp #645 #573]: #641
#1048 := [unit-resolution #628 #796]: #630
#589 := (not #630)
#591 := (or #589 #590 #688)
#592 := [def-axiom]: #591
#1047 := [unit-resolution #592 #1048]: #1027
#1043 := [unit-resolution #1047 #412]: #590
#957 := (or #689 #656)
#593 := (or #589 #689 #656)
#594 := [def-axiom]: #593
#964 := [unit-resolution #594 #1048]: #957
#1033 := [unit-resolution #964 #1043]: #656
#635 := (not #659)
#860 := [hypothesis]: #635
#609 := (or #659 #701)
#633 := [def-axiom]: #609
#861 := [unit-resolution #633 #860]: #701
#634 := (or #659 #710)
#629 := [def-axiom]: #634
#862 := [unit-resolution #629 #860]: #710
#863 := (or #689 #670 #669)
#864 := [th-lemma arith triangle-eq]: #863
#913 := [unit-resolution #864 #862 #861 #1043]: false
#914 := [lemma #913]: #659
#611 := (not #656)
#613 := (or #611 #635 #709)
#614 := [def-axiom]: #613
#1165 := [unit-resolution #614 #914 #1033]: #709
#605 := (not #709)
#1054 := (or #605 #600)
#1055 := [th-lemma arith triangle-eq]: #1054
#1236 := [unit-resolution #1055 #1165]: #600
#1237 := [hypothesis]: #722
#1170 := (* -1::Int #1112)
#1035 := (* -2::Int #865)
#1171 := (+ #1035 #1170)
#1155 := (* -1::Int #811)
#1172 := (+ #1155 #1171)
#1173 := (+ #698 #1172)
#1174 := (+ #459 #1173)
#1175 := (+ #16 #1174)
#1176 := (+ #12 #1175)
#1177 := (+ f5 #1176)
#1178 := (+ f4 #1177)
#1179 := (>= #1178 2::Int)
#1191 := (not #1179)
#955 := (>= #576 0::Int)
#1184 := [hypothesis]: #720
#1240 := (or #577 #1239 #1193)
#561 := (<= #16 3::Int)
#968 := (or #967 #561)
#966 := [th-lemma arith triangle-eq]: #968
#970 := [unit-resolution #966 #75]: #561
#888 := (<= #883 0::Int)
#975 := (or #974 #888)
#976 := [th-lemma arith triangle-eq]: #975
#982 := [unit-resolution #976 #973]: #888
#580 := (<= f5 0::Int)
#556 := (= f5 0::Int)
#1059 := (not #577)
#1146 := [hypothesis]: #1059
#1222 := (or #556 #577)
#376 := (* -1::Int f5)
#521 := (mod #376 -2::Int)
#523 := (+ #22 #521)
#508 := (= #523 0::Int)
#546 := (not #580)
#578 := (>= f5 0::Int)
#526 := (not #578)
#536 := (or #526 #546)
#511 := (ite #536 #577 #508)
#1066 := (not #556)
#1207 := [hypothesis]: #1066
#1201 := (or #556 #511)
#555 := (= #22 0::Int)
#514 := (ite #556 #555 #511)
#382 := (or #584 #514)
#370 := (* -1::Int 2::Int)
#570 := (mod #376 #370)
#571 := (+ #22 #570)
#572 := (= #571 0::Int)
#440 := (<= 2::Int 0::Int)
#579 := (or #440 #578)
#562 := (not #579)
#550 := (or #580 #440)
#551 := (not #550)
#552 := (or #551 #562)
#553 := (ite #552 #577 #572)
#557 := (ite #556 #555 #553)
#400 := (= f5 #22)
#781 := (= 2::Int 0::Int)
#558 := (ite #781 #400 #557)
#383 := (or #584 #558)
#371 := (iff #383 #382)
#375 := (iff #382 #382)
#797 := [rewrite]: #375
#498 := (iff #558 #514)
#517 := (ite false #400 #514)
#495 := (iff #517 #514)
#497 := [rewrite]: #495
#506 := (iff #558 #517)
#515 := (iff #557 #514)
#512 := (iff #553 #511)
#509 := (iff #572 #508)
#505 := (= #571 #523)
#522 := (= #570 #521)
#750 := (= #370 -2::Int)
#754 := [rewrite]: #750
#520 := [monotonicity #754]: #522
#507 := [monotonicity #520]: #505
#510 := [monotonicity #507]: #509
#533 := (iff #552 #536)
#531 := (or #546 #526)
#529 := (iff #531 #536)
#532 := [rewrite]: #529
#535 := (iff #552 #531)
#527 := (iff #562 #526)
#534 := (iff #579 #578)
#540 := (or false #578)
#539 := (iff #540 #578)
#544 := [rewrite]: #539
#542 := (iff #579 #540)
#758 := (iff #440 false)
#421 := [rewrite]: #758
#543 := [monotonicity #421]: #542
#524 := [trans #543 #544]: #534
#530 := [monotonicity #524]: #527
#549 := (iff #551 #546)
#547 := (iff #550 #580)
#554 := (or #580 false)
#541 := (iff #554 #580)
#545 := [rewrite]: #541
#559 := (iff #550 #554)
#538 := [monotonicity #421]: #559
#548 := [trans #538 #545]: #547
#537 := [monotonicity #548]: #549
#528 := [monotonicity #537 #530]: #535
#519 := [trans #528 #532]: #533
#513 := [monotonicity #519 #510]: #512
#516 := [monotonicity #513]: #515
#782 := (iff #781 false)
#772 := [rewrite]: #782
#518 := [monotonicity #772 #516]: #506
#499 := [trans #518 #497]: #498
#372 := [monotonicity #499]: #371
#798 := [trans #372 #797]: #371
#384 := [quant-inst #9 #11]: #383
#799 := [mp #384 #798]: #382
#1156 := [unit-resolution #799 #796]: #514
#1028 := (not #514)
#1034 := (or #1028 #556 #511)
#1070 := [def-axiom]: #1034
#1202 := [unit-resolution #1070 #1156]: #1201
#1208 := [unit-resolution #1202 #1207]: #511
#1205 := (or #578 #577)
#1147 := [hypothesis]: #526
#388 := (or #536 #578)
#389 := [def-axiom]: #388
#1148 := [unit-resolution #389 #1147]: #536
#1149 := (or #1066 #578)
#1150 := [th-lemma arith triangle-eq]: #1149
#1133 := [unit-resolution #1150 #1147]: #1066
#1203 := [unit-resolution #1202 #1133]: #511
#917 := (not #536)
#836 := (not #511)
#1025 := (or #836 #917 #577)
#1026 := [def-axiom]: #1025
#1204 := [unit-resolution #1026 #1203 #1148 #1146]: false
#1206 := [lemma #1204]: #1205
#1209 := [unit-resolution #1206 #1146]: #578
#1217 := (or #556 #546 #526)
#1218 := [th-lemma arith triangle-eq]: #1217
#1219 := [unit-resolution #1218 #1207 #1209]: #546
#915 := (or #536 #580)
#916 := [def-axiom]: #915
#1220 := [unit-resolution #916 #1219]: #536
#1221 := [unit-resolution #1026 #1220 #1208 #1146]: false
#1223 := [lemma #1221]: #1222
#1226 := [unit-resolution #1223 #1146]: #556
#1227 := (or #1066 #580)
#1228 := [th-lemma arith triangle-eq]: #1227
#1229 := [unit-resolution #1228 #1226]: #580
#599 := (<= #12 0::Int)
#1186 := (or #622 #599)
#1187 := [th-lemma arith triangle-eq]: #1186
#1188 := [unit-resolution #1187 #74]: #599
#1105 := (<= #831 0::Int)
#1181 := (or #1180 #1105)
#1182 := [th-lemma arith triangle-eq]: #1181
#1183 := [unit-resolution #1182 #1169]: #1105
#569 := (<= #708 0::Int)
#1050 := (or #605 #569)
#1051 := [th-lemma arith triangle-eq]: #1050
#1166 := [unit-resolution #1051 #1165]: #569
#1238 := [th-lemma arith gcd-test -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 #1237 #1184 #1236 #1166 #1235 #1183 #1232 #1188 #1209 #1229 #998 #982 #995 #970]: false
#1241 := [lemma #1238]: #1240
#1250 := [unit-resolution #1241 #1237 #1184]: #577
#1251 := (or #1059 #955)
#1252 := [th-lemma arith triangle-eq]: #1251
#1253 := [unit-resolution #1252 #1250]: #955
#1104 := (>= #22 1::Int)
#1152 := (not #1104)
#1254 := (or #1059 #954)
#1255 := [th-lemma arith triangle-eq]: #1254
#1256 := [unit-resolution #1255 #1250]: #954
#1140 := (>= #574 2::Int)
#1141 := (not #1140)
#1257 := (or false #1141)
#1258 := [th-lemma arith]: #1257
#1259 := [unit-resolution #1258 #72]: #1141
#1260 := (not #954)
#1261 := (or #1103 #1140 #1260)
#1262 := [th-lemma arith assign-bounds 1 1]: #1261
#1263 := [unit-resolution #1262 #1259 #1256]: #1103
#1266 := (not #1103)
#1269 := (or #1266 #1152)
#23 := (= #22 1::Int)
#219 := (not #23)
#19 := (f3 f4 2::Int)
#21 := (= #19 1::Int)
#1097 := (or #635 #21)
#918 := (div f4 2::Int)
#1036 := (* -1::Int #918)
#1037 := (+ #1035 #1036)
#1038 := (+ #698 #1037)
#483 := (mod f4 2::Int)
#484 := (* -1::Int #483)
#1039 := (+ #484 #1038)
#1040 := (+ #16 #1039)
#1041 := (+ f4 #1040)
#1042 := (>= #1041 2::Int)
#1030 := (not #1042)
#1045 := [hypothesis]: #659
#1049 := [unit-resolution #614 #1045 #1033]: #709
#1052 := [unit-resolution #1051 #1049]: #569
#988 := (not #569)
#1031 := (or #1030 #988)
#940 := (>= #483 0::Int)
#1023 := (or false #940)
#1024 := [th-lemma arith]: #1023
#1021 := [unit-resolution #1024 #72]: #940
#983 := [hypothesis]: #569
#931 := (* -2::Int #918)
#932 := (+ #484 #931)
#933 := (+ f4 #932)
#938 := (<= #933 0::Int)
#930 := (= #933 0::Int)
#1011 := (or false #930)
#1010 := [th-lemma arith]: #1011
#1009 := [unit-resolution #1010 #72]: #930
#958 := (not #930)
#959 := (or #958 #938)
#965 := [th-lemma arith triangle-eq]: #959
#963 := [unit-resolution #965 #1009]: #938
#1022 := [hypothesis]: #1042
#1029 := [th-lemma arith farkas -1 2 -1 -1 -1 1 #970 #1022 #982 #963 #983 #1021]: false
#1032 := [lemma #1029]: #1031
#1053 := [unit-resolution #1032 #1052]: #1030
#1056 := [unit-resolution #1055 #1049]: #600
#939 := (>= #933 0::Int)
#1064 := (or #958 #939)
#1065 := [th-lemma arith triangle-eq]: #1064
#1068 := [unit-resolution #1065 #1009]: #939
#485 := (+ #19 #484)
#385 := (>= #485 0::Int)
#477 := (= #485 0::Int)
#500 := (mod #482 -2::Int)
#504 := (+ #19 #500)
#491 := (= #504 0::Int)
#478 := (ite #659 #477 #491)
#464 := (= #19 0::Int)
#420 := (ite #689 #464 #478)
#411 := (or #584 #420)
#493 := (mod #482 #370)
#492 := (+ #19 #493)
#494 := (= #492 0::Int)
#469 := (or #440 #710)
#470 := (not #469)
#471 := (or #701 #440)
#463 := (not #471)
#472 := (or #463 #470)
#473 := (ite #472 #477 #494)
#474 := (ite #689 #464 #473)
#441 := (= f4 #19)
#443 := (ite #781 #441 #474)
#386 := (or #584 #443)
#391 := (iff #386 #411)
#398 := (iff #411 #411)
#399 := [rewrite]: #398
#410 := (iff #443 #420)
#413 := (ite false #441 #420)
#406 := (iff #413 #420)
#407 := [rewrite]: #406
#416 := (iff #443 #413)
#414 := (iff #474 #420)
#488 := (iff #473 #478)
#486 := (iff #494 #491)
#489 := (= #492 #504)
#503 := (= #493 #500)
#496 := [monotonicity #754]: #503
#490 := [monotonicity #496]: #489
#487 := [monotonicity #490]: #486
#501 := (iff #472 #659)
#438 := (iff #470 #669)
#453 := (iff #469 #710)
#452 := (iff #469 #673)
#442 := [monotonicity #421]: #452
#436 := [trans #442 #677]: #453
#439 := [monotonicity #436]: #438
#450 := (iff #463 #670)
#448 := (iff #471 #701)
#444 := (iff #471 #684)
#435 := [monotonicity #421]: #444
#449 := [trans #435 #687]: #448
#451 := [monotonicity #449]: #450
#502 := [monotonicity #451 #439]: #501
#418 := [monotonicity #502 #487]: #488
#415 := [monotonicity #418]: #414
#404 := [monotonicity #772 #415]: #416
#405 := [trans #404 #407]: #410
#396 := [monotonicity #405]: #391
#401 := [trans #396 #399]: #391
#390 := [quant-inst #8 #11]: #386
#397 := [mp #390 #401]: #411
#1069 := [unit-resolution #397 #796]: #420
#379 := (not #420)
#1072 := (or #379 #478)
#373 := (or #379 #689 #478)
#374 := [def-axiom]: #373
#1073 := [unit-resolution #374 #1043]: #1072
#1074 := [unit-resolution #1073 #1069]: #478
#392 := (not #478)
#393 := (or #392 #635 #477)
#394 := [def-axiom]: #393
#1075 := [unit-resolution #394 #1045 #1074]: #477
#380 := (not #477)
#1076 := (or #380 #385)
#1077 := [th-lemma arith triangle-eq]: #1076
#1078 := [unit-resolution #1077 #1075]: #385
#801 := (>= #19 1::Int)
#1015 := (not #801)
#800 := (<= #19 1::Int)
#946 := (>= #483 2::Int)
#947 := (not #946)
#1079 := (or false #947)
#1080 := [th-lemma arith]: #1079
#1081 := [unit-resolution #1080 #72]: #947
#402 := (<= #485 0::Int)
#1082 := (or #380 #402)
#1083 := [th-lemma arith triangle-eq]: #1082
#1084 := [unit-resolution #1083 #1075]: #402
#1085 := (not #402)
#1086 := (or #800 #946 #1085)
#1087 := [th-lemma arith assign-bounds 1 1]: #1086
#1088 := [unit-resolution #1087 #1084 #1081]: #800
#1090 := (not #800)
#1093 := (or #1090 #1015)
#218 := (not #21)
#1089 := [hypothesis]: #218
#1091 := (or #21 #1090 #1015)
#1092 := [th-lemma arith triangle-eq]: #1091
#1094 := [unit-resolution #1092 #1089]: #1093
#1095 := [unit-resolution #1094 #1088]: #1015
#1096 := [th-lemma arith farkas -1/2 -1/2 1/2 -1/2 -1/2 -1/2 1 #995 #998 #1095 #1078 #1068 #1056 #1053]: false
#1098 := [lemma #1096]: #1097
#1264 := [unit-resolution #1098 #914]: #21
#230 := (or #218 #219)
#24 := (and #21 #23)
#25 := (not #24)
#239 := (iff #25 #230)
#231 := (not #230)
#234 := (not #231)
#237 := (iff #234 #230)
#238 := [rewrite]: #237
#235 := (iff #25 #234)
#232 := (iff #24 #231)
#233 := [rewrite]: #232
#236 := [monotonicity #233]: #235
#240 := [trans #236 #238]: #239
#76 := [asserted]: #25
#241 := [mp #76 #240]: #230
#1265 := [unit-resolution #241 #1264]: #219
#1267 := (or #23 #1266 #1152)
#1268 := [th-lemma arith triangle-eq]: #1267
#1270 := [unit-resolution #1268 #1265]: #1269
#1271 := [unit-resolution #1270 #1263]: #1152
#1192 := (not #955)
#1194 := (or #1191 #1192 #1193 #1104)
#1153 := [hypothesis]: #1152
#1132 := (<= #1127 0::Int)
#1160 := [unit-resolution #1159 #72]: #1124
#1162 := (or #1161 #1132)
#1163 := [th-lemma arith triangle-eq]: #1162
#1164 := [unit-resolution #1163 #1160]: #1132
#1185 := [hypothesis]: #1179
#1189 := [hypothesis]: #955
#1190 := [th-lemma arith farkas -1 1 -2 1 1 1 1 1 1 1 #1189 #1188 #1185 #1184 #1183 #1166 #1164 #982 #970 #1153]: false
#1195 := [lemma #1190]: #1194
#1272 := [unit-resolution #1195 #1271 #1184 #1253]: #1191
#1273 := [th-lemma arith farkas -2 1 1 1 1 1 1 1 1 #1272 #1237 #1236 #1235 #1232 #998 #995 #1249 #1151]: false
#1275 := [lemma #1273]: #1274
#1349 := [unit-resolution #1275 #1278]: #1348
#1350 := [unit-resolution #1349 #1323 #1110]: false
#1351 := [lemma #1350]: #715
#1281 := (or #778 #457)
#1225 := [hypothesis]: #715
#752 := (+ #482 #376)
#751 := (mod #752 -2::Int)
#466 := (+ #12 #751)
#746 := (= #466 0::Int)
#770 := (not #461)
#434 := (<= #10 0::Int)
#764 := (not #434)
#479 := (or #764 #770)
#744 := (ite #479 #457 #746)
#618 := (not #778)
#802 := [hypothesis]: #618
#1243 := (or #778 #744)
#749 := (ite #778 #14 #744)
#585 := (or #584 #749)
#454 := (* -1::Int #10)
#455 := (mod #454 #370)
#456 := (+ #12 #455)
#447 := (= #456 0::Int)
#775 := (or #440 #461)
#777 := (not #775)
#564 := (or #434 #440)
#771 := (not #564)
#445 := (or #771 #777)
#446 := (ite #445 #457 #447)
#779 := (ite #778 #14 #446)
#780 := (= #10 #12)
#776 := (ite #781 #780 #779)
#586 := (or #584 #776)
#729 := (iff #586 #585)
#731 := (iff #585 #585)
#725 := [rewrite]: #731
#737 := (iff #776 #749)
#432 := (* -1::Int #12)
#437 := (+ f5 #432)
#773 := (+ f4 #437)
#433 := (= #773 0::Int)
#740 := (ite false #433 #749)
#741 := (iff #740 #749)
#742 := [rewrite]: #741
#735 := (iff #776 #740)
#738 := (iff #779 #749)
#748 := (iff #446 #744)
#747 := (iff #447 #746)
#467 := (= #456 #466)
#755 := (= #455 #751)
#753 := (= #454 #752)
#475 := [rewrite]: #753
#465 := [monotonicity #475 #754]: #755
#468 := [monotonicity #465]: #467
#462 := [monotonicity #468]: #747
#480 := (iff #445 #479)
#756 := (iff #777 #770)
#769 := (iff #775 #461)
#403 := (or false #461)
#408 := (iff #403 #461)
#409 := [rewrite]: #408
#766 := (iff #775 #403)
#768 := [monotonicity #421]: #766
#767 := [trans #768 #409]: #769
#757 := [monotonicity #767]: #756
#759 := (iff #771 #764)
#762 := (iff #564 #434)
#422 := (or #434 false)
#760 := (iff #422 #434)
#761 := [rewrite]: #760
#423 := (iff #564 #422)
#424 := [monotonicity #421]: #423
#763 := [trans #424 #761]: #762
#765 := [monotonicity #763]: #759
#481 := [monotonicity #765 #757]: #480
#745 := [monotonicity #481 #462]: #748
#739 := [monotonicity #745]: #738
#774 := (iff #780 #433)
#417 := [rewrite]: #774
#736 := [monotonicity #772 #417 #739]: #735
#743 := [trans #736 #742]: #737
#730 := [monotonicity #743]: #729
#726 := [trans #730 #725]: #729
#728 := [quant-inst #10 #11]: #586
#732 := [mp #728 #726]: #585
#1242 := [unit-resolution #732 #796]: #749
#616 := (not #749)
#620 := (or #616 #778 #744)
#621 := [def-axiom]: #620
#1244 := [unit-resolution #621 #1242]: #1243
#1245 := [unit-resolution #1244 #802]: #744
#809 := (or #479 #778)
#565 := (not #479)
#803 := [hypothesis]: #565
#733 := (or #479 #434)
#727 := [def-axiom]: #733
#804 := [unit-resolution #727 #803]: #434
#734 := (or #479 #461)
#563 := [def-axiom]: #734
#805 := [unit-resolution #563 #803]: #461
#806 := (or #778 #764 #770)
#807 := [th-lemma arith triangle-eq]: #806
#808 := [unit-resolution #807 #805 #804 #802]: false
#810 := [lemma #808]: #809
#1279 := [unit-resolution #810 #802]: #479
#724 := (not #744)
#606 := (or #724 #565 #457)
#607 := [def-axiom]: #606
#1280 := [unit-resolution #607 #1279 #1245 #1225]: false
#1282 := [lemma #1280]: #1281
#1352 := [unit-resolution #1282 #1351]: #778
#1353 := (or #618 #461)
#1354 := [th-lemma arith triangle-eq]: #1353
#1355 := [unit-resolution #1354 #1352]: #461
#1356 := (or #618 #434)
#1357 := [th-lemma arith triangle-eq]: #1356
#1358 := [unit-resolution #1357 #1352]: #434
#1346 := (or #577 #770 #764)
#1295 := [hypothesis]: #434
#1327 := (or #526 #764 #701)
#1005 := [hypothesis]: #670
#1289 := [hypothesis]: #578
#1291 := [th-lemma arith farkas -1 1 1 #1295 #1289 #1005]: false
#1328 := [lemma #1291]: #1327
#1342 := [unit-resolution #1328 #1209 #1295]: #701
#1343 := [unit-resolution #864 #1043]: #659
#1344 := [unit-resolution #1343 #1342]: #669
#1290 := [hypothesis]: #461
#1345 := [th-lemma arith farkas -1 1 1 #1290 #1344 #1229]: false
#1347 := [lemma #1345]: #1346
#1359 := [unit-resolution #1347 #1358 #1355]: #577
#1360 := [unit-resolution #1255 #1359]: #954
#1361 := (or #1103 #1260)
#1302 := [hypothesis]: #1140
#1308 := [unit-resolution #1258 #72 #1302]: false
#1321 := [lemma #1308]: #1141
#1362 := [unit-resolution #1262 #1321]: #1361
#1363 := [unit-resolution #1362 #1360]: #1103
#1303 := (+ #698 #1171)
#1326 := (+ #575 #1303)
#1335 := (+ #16 #1326)
#1336 := (+ f5 #1335)
#1337 := (+ f4 #1336)
#1338 := (>= #1337 2::Int)
#1329 := (not #1338)
#1330 := (or #1329 #764)
#1294 := [unit-resolution #1163 #1278]: #1132
#1310 := [hypothesis]: #1338
#1309 := [th-lemma arith farkas 2 -1 -1 -1 -1 -1 1 #1310 #1295 #1166 #982 #970 #1294 #1151]: false
#1331 := [lemma #1309]: #1330
#1364 := [unit-resolution #1331 #1358]: #1329
#1365 := [unit-resolution #1252 #1359]: #955
#1340 := (or #1192 #1338 #770 #1104)
#1332 := [unit-resolution #1248 #1278]: #1224
#1325 := [th-lemma arith #1290 #1153 #1189 #1236 #998 #995 #1332]: #1338
#1324 := [hypothesis]: #1329
#1339 := [unit-resolution #1324 #1325]: false
#1341 := [lemma #1339]: #1340
#1366 := [unit-resolution #1341 #1365 #1355 #1364]: #1104
[unit-resolution #1270 #1366 #1363]: false
unsat
c04d38458726eb1b2cafd52bd3881d6f8160666f 24 0
#2 := false
#8 := (exists (vars (?v0 Int)) false)
#9 := (not #8)
#10 := (not #9)
#45 := (iff #10 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#38 := (iff #9 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 false)
#32 := [elim-unused]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #10
[mp #30 #46]: false
unsat
b7e68d81e2b1e168216a793b1d4c3fb61e54a4fa 24 0
#2 := false
#8 := (exists (vars (?v0 Real)) false)
#9 := (not #8)
#10 := (not #9)
#45 := (iff #10 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#38 := (iff #9 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 false)
#32 := [elim-unused]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #10
[mp #30 #46]: false
unsat
091ba9e3776453f72e577cca020359bfc2bbb1a8 1 0
unsat
6b48d925e625c5baa918d61afc02b3d6fa4e46f8 1 0
unsat
7b03d36f70c1cb511c7ddbbd8c6bb360b0e823ac 1 0
unsat
770827669678f8e68bf300baf101a56cec1c8d6b 73 0
#2 := false
#9 := 0::Int
#12 := 1::Int
#151 := (= 1::Int 0::Int)
#153 := (iff #151 false)
#154 := [rewrite]: #153
decl ?v0!1 :: Int
#57 := ?v0!1
#53 := (= ?v0!1 0::Int)
decl ?v1!0 :: Int
#56 := ?v1!0
#51 := (= ?v1!0 1::Int)
#71 := (and #51 #53)
#77 := (= ?v1!0 ?v0!1)
#80 := (not #77)
#74 := (not #71)
#83 := (or #74 #80)
#86 := (not #83)
#58 := (= ?v0!1 ?v1!0)
#59 := (not #58)
#60 := (and #53 #51)
#61 := (not #60)
#62 := (or #61 #59)
#63 := (not #62)
#87 := (iff #63 #86)
#84 := (iff #62 #83)
#81 := (iff #59 #80)
#78 := (iff #58 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#75 := (iff #61 #74)
#72 := (iff #60 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#85 := [monotonicity #76 #82]: #84
#88 := [monotonicity #85]: #87
#11 := (:var 0 Int)
#8 := (:var 1 Int)
#15 := (= #8 #11)
#16 := (not #15)
#13 := (= #11 1::Int)
#10 := (= #8 0::Int)
#14 := (and #10 #13)
#40 := (not #14)
#41 := (or #40 #16)
#44 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#47 := (not #44)
#64 := (~ #47 #63)
#65 := [sk]: #64
#17 := (implies #14 #16)
#18 := (forall (vars (?v0 Int) (?v1 Int)) #17)
#19 := (not #18)
#48 := (iff #19 #47)
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#43 := [rewrite]: #42
#46 := [quant-intro #43]: #45
#49 := [monotonicity #46]: #48
#39 := [asserted]: #19
#52 := [mp #39 #49]: #47
#68 := [mp~ #52 #65]: #63
#69 := [mp #68 #88]: #86
#70 := [not-or-elim #69]: #71
#90 := [and-elim #70]: #53
#149 := (= 1::Int ?v0!1)
#91 := [not-or-elim #69]: #77
#147 := (= 1::Int ?v1!0)
#89 := [and-elim #70]: #51
#148 := [symm #89]: #147
#150 := [trans #148 #91]: #149
#152 := [trans #150 #90]: #151
[mp #152 #154]: false
unsat
2d33526ae6f55fa8bf28af8a491289a10023ebc3 82 0
#2 := false
#9 := (:var 0 Int)
#11 := 0::Int
#13 := (<= 0::Int #9)
#12 := (< #9 0::Int)
#14 := (or #12 #13)
#8 := (:var 1 Int)
#10 := (< #8 #9)
#15 := (implies #10 #14)
#16 := (forall (vars (?v1 Int)) #15)
#17 := (exists (vars (?v0 Int)) #16)
#18 := (not #17)
#103 := (iff #18 false)
#39 := (not #10)
#40 := (or #39 #14)
#43 := (forall (vars (?v1 Int)) #40)
#46 := (exists (vars (?v0 Int)) #43)
#49 := (not #46)
#101 := (iff #49 false)
#1 := true
#96 := (not true)
#99 := (iff #96 false)
#100 := [rewrite]: #99
#97 := (iff #49 #96)
#94 := (iff #46 true)
#89 := (exists (vars (?v0 Int)) true)
#92 := (iff #89 true)
#93 := [elim-unused]: #92
#90 := (iff #46 #89)
#87 := (iff #43 true)
#82 := (forall (vars (?v1 Int)) true)
#85 := (iff #82 true)
#86 := [elim-unused]: #85
#83 := (iff #43 #82)
#80 := (iff #40 true)
#54 := (>= #9 0::Int)
#52 := (not #54)
#72 := (or #52 #54)
#58 := -1::Int
#61 := (* -1::Int #9)
#62 := (+ #8 #61)
#60 := (>= #62 0::Int)
#75 := (or #60 #72)
#78 := (iff #75 true)
#79 := [rewrite]: #78
#76 := (iff #40 #75)
#73 := (iff #14 #72)
#56 := (iff #13 #54)
#57 := [rewrite]: #56
#53 := (iff #12 #52)
#55 := [rewrite]: #53
#74 := [monotonicity #55 #57]: #73
#70 := (iff #39 #60)
#59 := (not #60)
#65 := (not #59)
#68 := (iff #65 #60)
#69 := [rewrite]: #68
#66 := (iff #39 #65)
#63 := (iff #10 #59)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#77 := [monotonicity #71 #74]: #76
#81 := [trans #77 #79]: #80
#84 := [quant-intro #81]: #83
#88 := [trans #84 #86]: #87
#91 := [quant-intro #88]: #90
#95 := [trans #91 #93]: #94
#98 := [monotonicity #95]: #97
#102 := [trans #98 #100]: #101
#50 := (iff #18 #49)
#47 := (iff #17 #46)
#44 := (iff #16 #43)
#41 := (iff #15 #40)
#42 := [rewrite]: #41
#45 := [quant-intro #42]: #44
#48 := [quant-intro #45]: #47
#51 := [monotonicity #48]: #50
#104 := [trans #51 #102]: #103
#38 := [asserted]: #18
[mp #38 #104]: false
unsat
faa0ca9568a00467876bf060199376e2ca905359 78 0
#2 := false
#9 := (:var 0 Int)
#11 := 2::Int
#15 := (* 2::Int #9)
#13 := 1::Int
#8 := (:var 1 Int)
#12 := (* 2::Int #8)
#14 := (+ #12 1::Int)
#16 := (< #14 #15)
#10 := (< #8 #9)
#17 := (implies #10 #16)
#18 := (forall (vars (?v0 Int) (?v1 Int)) #17)
#19 := (not #18)
#99 := (iff #19 false)
#40 := (+ 1::Int #12)
#43 := (< #40 #15)
#49 := (not #10)
#50 := (or #49 #43)
#55 := (forall (vars (?v0 Int) (?v1 Int)) #50)
#58 := (not #55)
#97 := (iff #58 false)
#1 := true
#92 := (not true)
#95 := (iff #92 false)
#96 := [rewrite]: #95
#93 := (iff #58 #92)
#90 := (iff #55 true)
#85 := (forall (vars (?v0 Int) (?v1 Int)) true)
#88 := (iff #85 true)
#89 := [elim-unused]: #88
#86 := (iff #55 #85)
#83 := (iff #50 true)
#63 := 0::Int
#61 := -1::Int
#65 := (* -1::Int #9)
#66 := (+ #8 #65)
#64 := (>= #66 0::Int)
#62 := (not #64)
#77 := (or #64 #62)
#81 := (iff #77 true)
#82 := [rewrite]: #81
#79 := (iff #50 #77)
#78 := (iff #43 #62)
#76 := [rewrite]: #78
#74 := (iff #49 #64)
#69 := (not #62)
#72 := (iff #69 #64)
#73 := [rewrite]: #72
#70 := (iff #49 #69)
#67 := (iff #10 #62)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#80 := [monotonicity #75 #76]: #79
#84 := [trans #80 #82]: #83
#87 := [quant-intro #84]: #86
#91 := [trans #87 #89]: #90
#94 := [monotonicity #91]: #93
#98 := [trans #94 #96]: #97
#59 := (iff #19 #58)
#56 := (iff #18 #55)
#53 := (iff #17 #50)
#46 := (implies #10 #43)
#51 := (iff #46 #50)
#52 := [rewrite]: #51
#47 := (iff #17 #46)
#44 := (iff #16 #43)
#41 := (= #14 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#54 := [trans #48 #52]: #53
#57 := [quant-intro #54]: #56
#60 := [monotonicity #57]: #59
#100 := [trans #60 #98]: #99
#39 := [asserted]: #19
[mp #39 #100]: false
unsat
05a0d5d1100f50948c093c944115de9816b9e0d9 61 0
#2 := false
#13 := (:var 0 Int)
#8 := 2::Int
#14 := (* 2::Int #13)
#11 := 1::Int
#9 := (:var 1 Int)
#10 := (* 2::Int #9)
#12 := (+ #10 1::Int)
#15 := (= #12 #14)
#16 := (not #15)
#17 := (forall (vars (?v0 Int) (?v1 Int)) #16)
#18 := (not #17)
#82 := (iff #18 false)
#39 := (+ 1::Int #10)
#45 := (= #14 #39)
#50 := (not #45)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #50)
#56 := (not #53)
#80 := (iff #56 false)
#1 := true
#75 := (not true)
#78 := (iff #75 false)
#79 := [rewrite]: #78
#76 := (iff #56 #75)
#73 := (iff #53 true)
#68 := (forall (vars (?v0 Int) (?v1 Int)) true)
#71 := (iff #68 true)
#72 := [elim-unused]: #71
#69 := (iff #53 #68)
#66 := (iff #50 true)
#59 := (not false)
#64 := (iff #59 true)
#65 := [rewrite]: #64
#60 := (iff #50 #59)
#61 := (iff #45 false)
#62 := [rewrite]: #61
#63 := [monotonicity #62]: #60
#67 := [trans #63 #65]: #66
#70 := [quant-intro #67]: #69
#74 := [trans #70 #72]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#42 := (= #39 #14)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #15 #42)
#40 := (= #12 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#49 := [trans #44 #47]: #48
#52 := [monotonicity #49]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #55]: #57
#83 := [trans #58 #81]: #82
#38 := [asserted]: #18
[mp #38 #83]: false
unsat
cb31e6f6a1ecdcd5cb5be0830fe96dcd6a225db2 111 0
#2 := false
#8 := 2::Int
decl ?v0!1 :: Int
#95 := ?v0!1
decl ?v1!0 :: Int
#94 := ?v1!0
#109 := (+ ?v1!0 ?v0!1)
#115 := (>= #109 2::Int)
#121 := (<= #109 2::Int)
#124 := (not #121)
#118 := (not #115)
#112 := (= #109 2::Int)
#127 := (or #112 #118 #124)
#130 := (not #127)
#96 := (+ ?v0!1 ?v1!0)
#97 := (<= #96 2::Int)
#90 := (not #97)
#91 := (>= #96 2::Int)
#98 := (not #91)
#99 := (= #96 2::Int)
#100 := (or #99 #98 #90)
#101 := (not #100)
#131 := (iff #101 #130)
#128 := (iff #100 #127)
#125 := (iff #90 #124)
#122 := (iff #97 #121)
#110 := (= #96 #109)
#111 := [rewrite]: #110
#123 := [monotonicity #111]: #122
#126 := [monotonicity #123]: #125
#119 := (iff #98 #118)
#116 := (iff #91 #115)
#117 := [monotonicity #111]: #116
#120 := [monotonicity #117]: #119
#113 := (iff #99 #112)
#114 := [monotonicity #111]: #113
#129 := [monotonicity #114 #120 #126]: #128
#132 := [monotonicity #129]: #131
#10 := (:var 0 Int)
#9 := (:var 1 Int)
#11 := (+ #9 #10)
#64 := (<= #11 2::Int)
#66 := (not #64)
#62 := (>= #11 2::Int)
#59 := (not #62)
#13 := (= #11 2::Int)
#75 := (or #13 #59 #66)
#80 := (forall (vars (?v0 Int) (?v1 Int)) #75)
#83 := (not #80)
#102 := (~ #83 #101)
#103 := [sk]: #102
#14 := (< #11 2::Int)
#15 := (or #13 #14)
#12 := (< 2::Int #11)
#16 := (or #12 #15)
#17 := (forall (vars (?v0 Int) (?v1 Int)) #16)
#18 := (not #17)
#86 := (iff #18 #83)
#39 := (= 2::Int #11)
#45 := (or #14 #39)
#50 := (or #12 #45)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #50)
#56 := (not #53)
#84 := (iff #56 #83)
#81 := (iff #53 #80)
#78 := (iff #50 #75)
#69 := (or #59 #13)
#72 := (or #66 #69)
#76 := (iff #72 #75)
#77 := [rewrite]: #76
#73 := (iff #50 #72)
#70 := (iff #45 #69)
#63 := (iff #39 #13)
#65 := [rewrite]: #63
#61 := (iff #14 #59)
#60 := [rewrite]: #61
#71 := [monotonicity #60 #65]: #70
#67 := (iff #12 #66)
#68 := [rewrite]: #67
#74 := [monotonicity #68 #71]: #73
#79 := [trans #74 #77]: #78
#82 := [quant-intro #79]: #81
#85 := [monotonicity #82]: #84
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#42 := (or #39 #14)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #15 #42)
#40 := (iff #13 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#49 := [trans #44 #47]: #48
#52 := [monotonicity #49]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #55]: #57
#87 := [trans #58 #85]: #86
#38 := [asserted]: #18
#88 := [mp #38 #87]: #83
#106 := [mp~ #88 #103]: #101
#107 := [mp #106 #132]: #130
#134 := [not-or-elim #107]: #115
#108 := (not #112)
#133 := [not-or-elim #107]: #108
#135 := [not-or-elim #107]: #121
#191 := (or #112 #124 #118)
#192 := [th-lemma arith triangle-eq]: #191
[unit-resolution #192 #135 #133 #134]: false
unsat
14c5d2b27aee290cf4e7c2c280797baa69660461 89 0
#2 := false
#8 := 0::Int
decl ?v0!0 :: Int
#88 := ?v0!0
#85 := (<= ?v0!0 0::Int)
#154 := (not #85)
#163 := [hypothesis]: #85
#11 := 1::Int
#91 := (>= ?v0!0 1::Int)
#84 := (not #91)
#164 := (or #84 #154)
#165 := [th-lemma arith farkas 1 1]: #164
#166 := [unit-resolution #165 #163]: #84
#167 := (or #154 #91)
#57 := -1::Int
#89 := (<= ?v0!0 -1::Int)
#90 := (not #89)
#92 := (ite #85 #84 #90)
#93 := (not #92)
#9 := (:var 0 Int)
#58 := (<= #9 -1::Int)
#59 := (not #58)
#63 := (>= #9 1::Int)
#62 := (not #63)
#53 := (<= #9 0::Int)
#69 := (ite #53 #62 #59)
#74 := (forall (vars (?v0 Int)) #69)
#77 := (not #74)
#94 := (~ #77 #93)
#95 := [sk]: #94
#14 := (< #9 1::Int)
#12 := (+ #9 1::Int)
#13 := (< 0::Int #12)
#10 := (< 0::Int #9)
#15 := (ite #10 #13 #14)
#16 := (forall (vars (?v0 Int)) #15)
#17 := (not #16)
#80 := (iff #17 #77)
#38 := (+ 1::Int #9)
#41 := (< 0::Int #38)
#44 := (ite #10 #41 #14)
#47 := (forall (vars (?v0 Int)) #44)
#50 := (not #47)
#78 := (iff #50 #77)
#75 := (iff #47 #74)
#72 := (iff #44 #69)
#54 := (not #53)
#66 := (ite #54 #59 #62)
#70 := (iff #66 #69)
#71 := [rewrite]: #70
#67 := (iff #44 #66)
#64 := (iff #14 #62)
#65 := [rewrite]: #64
#60 := (iff #41 #59)
#61 := [rewrite]: #60
#55 := (iff #10 #54)
#56 := [rewrite]: #55
#68 := [monotonicity #56 #61 #65]: #67
#73 := [trans #68 #71]: #72
#76 := [quant-intro #73]: #75
#79 := [monotonicity #76]: #78
#51 := (iff #17 #50)
#48 := (iff #16 #47)
#45 := (iff #15 #44)
#42 := (iff #13 #41)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#49 := [quant-intro #46]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#37 := [asserted]: #17
#82 := [mp #37 #81]: #77
#98 := [mp~ #82 #95]: #93
#159 := (or #92 #154 #91)
#160 := [def-axiom]: #159
#168 := [unit-resolution #160 #98]: #167
#169 := [unit-resolution #168 #166 #163]: false
#170 := [lemma #169]: #154
#171 := (or #90 #85)
#172 := [th-lemma arith farkas 1 1]: #171
#173 := [unit-resolution #172 #170]: #90
#174 := (or #85 #89)
#161 := (or #92 #85 #89)
#162 := [def-axiom]: #161
#175 := [unit-resolution #162 #98]: #174
[unit-resolution #175 #173 #170]: false
unsat
74ffecf155cc435ac1a2bcfe873a84647e4ce6b1 83 2
#2 := false
#9 := 0::Int
#8 := (:var 0 Int)
#50 := (<= #8 0::Int)
#51 := (not #50)
#48 := (>= #8 0::Int)
#46 := (not #48)
#54 := (or #46 #51)
#57 := (forall (vars (?v0 Int)) #54)
#190 := (not #57)
#126 := (<= 0::Int 0::Int)
#212 := (not #126)
#127 := (>= 0::Int 0::Int)
#213 := (not #127)
#214 := (or #213 #212)
#195 := (or #190 #214)
#180 := (iff #195 #190)
#191 := (or #190 false)
#517 := (iff #191 #190)
#179 := [rewrite]: #517
#533 := (iff #195 #191)
#541 := (iff #214 false)
#537 := (or false false)
#540 := (iff #537 false)
#535 := [rewrite]: #540
#538 := (iff #214 #537)
#203 := (iff #212 false)
#1 := true
#217 := (not true)
#215 := (iff #217 false)
#219 := [rewrite]: #215
#323 := (iff #212 #217)
#536 := (iff #126 true)
#192 := [rewrite]: #536
#530 := [monotonicity #192]: #323
#204 := [trans #530 #219]: #203
#198 := (iff #213 false)
#145 := (iff #213 #217)
#205 := (iff #127 true)
#216 := [rewrite]: #205
#218 := [monotonicity #216]: #145
#534 := [trans #218 #219]: #198
#539 := [monotonicity #534 #204]: #538
#531 := [trans #539 #535]: #541
#175 := [monotonicity #531]: #533
#181 := [trans #175 #179]: #180
#532 := [quant-inst #9]: #195
#182 := [mp #532 #181]: #190
#70 := (~ #57 #57)
#68 := (~ #54 #54)
#69 := [refl]: #68
#71 := [nnf-pos #69]: #70
#11 := (< 0::Int #8)
#10 := (< #8 0::Int)
#12 := (or #10 #11)
#13 := (forall (vars (?v0 Int)) #12)
#14 := (ite #13 false true)
#15 := (not #14)
#60 := (iff #15 #57)
#58 := (iff #13 #57)
#55 := (iff #12 #54)
#52 := (iff #11 #51)
#53 := [rewrite]: #52
#47 := (iff #10 #46)
#49 := [rewrite]: #47
#56 := [monotonicity #49 #53]: #55
#59 := [quant-intro #56]: #58
#44 := (iff #15 #13)
#36 := (not #13)
#39 := (not #36)
#42 := (iff #39 #13)
#43 := [rewrite]: #42
#40 := (iff #15 #39)
#37 := (iff #14 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#61 := [trans #45 #59]: #60
#35 := [asserted]: #15
#62 := [mp #35 #61]: #57
#64 := [mp~ #62 #71]: #57
[unit-resolution #64 #182]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!10)

8602f0cbb8a6b885b19d4424fa42859ac2937970 180 2
#2 := false
#8 := 0::Int
#9 := (:var 0 Int)
#56 := (<= #9 0::Int)
#57 := (not #56)
#53 := (>= #9 0::Int)
#52 := (not #53)
#60 := (or #52 #57)
#63 := (forall (vars (?v0 Int)) #60)
#96 := (not #63)
#271 := (<= 0::Int 0::Int)
#276 := (not #271)
#612 := (>= 0::Int 0::Int)
#272 := (not #612)
#613 := (or #272 #276)
#596 := (or #96 #613)
#592 := (iff #596 #96)
#319 := (or #96 false)
#215 := (iff #319 #96)
#591 := [rewrite]: #215
#320 := (iff #596 #319)
#609 := (iff #613 false)
#607 := (or false false)
#608 := (iff #607 false)
#606 := [rewrite]: #608
#247 := (iff #613 #607)
#242 := (iff #276 false)
#1 := true
#260 := (not true)
#263 := (iff #260 false)
#599 := [rewrite]: #263
#598 := (iff #276 #260)
#602 := (iff #271 true)
#603 := [rewrite]: #602
#604 := [monotonicity #603]: #598
#605 := [trans #604 #599]: #242
#600 := (iff #272 false)
#261 := (iff #272 #260)
#256 := (iff #612 true)
#597 := [rewrite]: #256
#262 := [monotonicity #597]: #261
#601 := [trans #262 #599]: #600
#248 := [monotonicity #601 #605]: #247
#595 := [trans #248 #606]: #609
#321 := [monotonicity #595]: #320
#314 := [trans #321 #591]: #592
#318 := [quant-inst #8]: #596
#315 := [mp #318 #314]: #96
decl z3name!0 :: bool
#93 := z3name!0
#16 := 3::Int
#40 := -1::Int
#100 := (ite z3name!0 -1::Int 3::Int)
#298 := (= #100 3::Int)
#618 := (not #298)
#616 := (>= #100 3::Int)
#273 := (not #616)
#103 := (<= #100 0::Int)
#66 := (ite #63 -1::Int 3::Int)
#72 := (<= #66 0::Int)
#104 := (~ #72 #103)
#101 := (= #66 #100)
#98 := (~ #63 z3name!0)
#89 := (or z3name!0 #96)
#94 := (not z3name!0)
#95 := (or #94 #63)
#90 := (and #95 #89)
#97 := [intro-def]: #90
#99 := [apply-def #97]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#14 := 1::Int
#15 := (- 1::Int)
#11 := (< 0::Int #9)
#10 := (< #9 0::Int)
#12 := (or #10 #11)
#13 := (forall (vars (?v0 Int)) #12)
#17 := (ite #13 #15 3::Int)
#18 := (< 0::Int #17)
#19 := (not #18)
#85 := (iff #19 #72)
#43 := (ite #13 -1::Int 3::Int)
#46 := (< 0::Int #43)
#49 := (not #46)
#83 := (iff #49 #72)
#73 := (not #72)
#78 := (not #73)
#81 := (iff #78 #72)
#82 := [rewrite]: #81
#79 := (iff #49 #78)
#76 := (iff #46 #73)
#69 := (< 0::Int #66)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #46 #69)
#67 := (= #43 #66)
#64 := (iff #13 #63)
#61 := (iff #12 #60)
#58 := (iff #11 #57)
#59 := [rewrite]: #58
#54 := (iff #10 #52)
#55 := [rewrite]: #54
#62 := [monotonicity #55 #59]: #61
#65 := [quant-intro #62]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#77 := [trans #71 #75]: #76
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#50 := (iff #19 #49)
#47 := (iff #18 #46)
#44 := (= #17 #43)
#41 := (= #15 -1::Int)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#86 := [trans #51 #84]: #85
#39 := [asserted]: #19
#87 := [mp #39 #86]: #72
#134 := [mp~ #87 #105]: #103
#403 := (not #103)
#610 := (or #273 #403)
#284 := [th-lemma arith farkas 1 1]: #610
#285 := [unit-resolution #284 #134]: #273
#617 := [hypothesis]: #298
#619 := (or #618 #616)
#620 := [th-lemma arith triangle-eq]: #619
#615 := [unit-resolution #620 #617 #285]: false
#621 := [lemma #615]: #618
#300 := (or z3name!0 #298)
#279 := [def-axiom]: #300
#589 := [unit-resolution #279 #621]: z3name!0
#137 := (or #63 #94)
decl ?v0!1 :: Int
#116 := ?v0!1
#119 := (>= ?v0!1 0::Int)
#120 := (not #119)
#117 := (<= ?v0!1 0::Int)
#118 := (not #117)
#140 := (or #118 #120)
#143 := (not #140)
#146 := (or z3name!0 #143)
#149 := (and #137 #146)
#121 := (or #120 #118)
#122 := (not #121)
#127 := (or z3name!0 #122)
#130 := (and #95 #127)
#150 := (iff #130 #149)
#147 := (iff #127 #146)
#144 := (iff #122 #143)
#141 := (iff #121 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#138 := (iff #95 #137)
#139 := [rewrite]: #138
#151 := [monotonicity #139 #148]: #150
#131 := (~ #90 #130)
#128 := (~ #89 #127)
#123 := (~ #96 #122)
#124 := [sk]: #123
#114 := (~ z3name!0 z3name!0)
#115 := [refl]: #114
#129 := [monotonicity #115 #124]: #128
#112 := (~ #95 #95)
#110 := (~ #63 #63)
#108 := (~ #60 #60)
#109 := [refl]: #108
#111 := [nnf-pos #109]: #110
#106 := (~ #94 #94)
#107 := [refl]: #106
#113 := [monotonicity #107 #111]: #112
#132 := [monotonicity #113 #129]: #131
#133 := [mp~ #97 #132]: #130
#135 := [mp #133 #151]: #149
#136 := [and-elim #135]: #137
#593 := [unit-resolution #136 #589]: #63
[unit-resolution #593 #315]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!10)

2f9041ab2507988941f04b373596319a25dbff04 68 0
#2 := false
#16 := 1::Int
#13 := (:var 1 Int)
#11 := 6::Int
#12 := (- 6::Int)
#14 := (* #12 #13)
#9 := (:var 2 Int)
#8 := 4::Int
#10 := (* 4::Int #9)
#15 := (+ #10 #14)
#17 := (= #15 1::Int)
#18 := (exists (vars (?v0 Int) (?v1 Int) (?v2 Int)) #17)
#19 := (not #18)
#20 := (not #19)
#90 := (iff #20 false)
#61 := (:var 0 Int)
#41 := -6::Int
#62 := (* -6::Int #61)
#63 := (* 4::Int #13)
#64 := (+ #63 #62)
#65 := (= 1::Int #64)
#66 := (exists (vars (?v0 Int) (?v1 Int)) #65)
#88 := (iff #66 false)
#84 := (exists (vars (?v0 Int) (?v1 Int)) false)
#86 := (iff #84 false)
#87 := [elim-unused]: #86
#85 := (iff #66 #84)
#81 := (iff #65 false)
#82 := [rewrite]: #81
#83 := [quant-intro #82]: #85
#89 := [trans #83 #87]: #88
#79 := (iff #20 #66)
#71 := (not #66)
#74 := (not #71)
#77 := (iff #74 #66)
#78 := [rewrite]: #77
#75 := (iff #20 #74)
#72 := (iff #19 #71)
#69 := (iff #18 #66)
#44 := (* -6::Int #13)
#47 := (+ #10 #44)
#53 := (= 1::Int #47)
#58 := (exists (vars (?v0 Int) (?v1 Int) (?v2 Int)) #53)
#67 := (iff #58 #66)
#68 := [elim-unused]: #67
#59 := (iff #18 #58)
#56 := (iff #17 #53)
#50 := (= #47 1::Int)
#54 := (iff #50 #53)
#55 := [rewrite]: #54
#51 := (iff #17 #50)
#48 := (= #15 #47)
#45 := (= #14 #44)
#42 := (= #12 -6::Int)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#57 := [trans #52 #55]: #56
#60 := [quant-intro #57]: #59
#70 := [trans #60 #68]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#91 := [trans #80 #89]: #90
#40 := [asserted]: #20
[mp #40 #91]: false
unsat
e7e4f914c64da4bb9f5ff1d016939e644d6e9497 107 0
#2 := false
#8 := 0::Int
decl ?v1!1 :: Int
#93 := ?v1!1
decl ?v2!0 :: Int
#92 := ?v2!0
#116 := (+ ?v2!0 ?v1!1)
#119 := (<= #116 0::Int)
#122 := (not #119)
#97 := (<= ?v1!1 0::Int)
#98 := (not #97)
#89 := (<= ?v2!0 0::Int)
#96 := (not #89)
#110 := (and #96 #98)
#113 := (not #110)
#125 := (or #113 #122)
#128 := (not #125)
#94 := (+ ?v1!1 ?v2!0)
#95 := (<= #94 0::Int)
#88 := (not #95)
#99 := (and #98 #96)
#100 := (not #99)
#101 := (or #100 #88)
#102 := (not #101)
#129 := (iff #102 #128)
#126 := (iff #101 #125)
#123 := (iff #88 #122)
#120 := (iff #95 #119)
#117 := (= #94 #116)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#124 := [monotonicity #121]: #123
#114 := (iff #100 #113)
#111 := (iff #99 #110)
#112 := [rewrite]: #111
#115 := [monotonicity #112]: #114
#127 := [monotonicity #115 #124]: #126
#130 := [monotonicity #127]: #129
#11 := (:var 0 Int)
#9 := (:var 1 Int)
#14 := (+ #9 #11)
#71 := (<= #14 0::Int)
#72 := (not #71)
#61 := (<= #11 0::Int)
#62 := (not #61)
#57 := (<= #9 0::Int)
#58 := (not #57)
#65 := (and #58 #62)
#68 := (not #65)
#75 := (or #68 #72)
#78 := (forall (vars (?v1 Int) (?v2 Int)) #75)
#81 := (not #78)
#103 := (~ #81 #102)
#104 := [sk]: #103
#15 := (< 0::Int #14)
#12 := (< 0::Int #11)
#10 := (< 0::Int #9)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (forall (vars (?v1 Int) (?v2 Int)) #16)
#18 := (exists (vars (?v0 Int)) #17)
#19 := (not #18)
#84 := (iff #19 #81)
#40 := (not #13)
#41 := (or #40 #15)
#44 := (forall (vars (?v1 Int) (?v2 Int)) #41)
#54 := (not #44)
#82 := (iff #54 #81)
#79 := (iff #44 #78)
#76 := (iff #41 #75)
#73 := (iff #15 #72)
#74 := [rewrite]: #73
#69 := (iff #40 #68)
#66 := (iff #13 #65)
#63 := (iff #12 #62)
#64 := [rewrite]: #63
#59 := (iff #10 #58)
#60 := [rewrite]: #59
#67 := [monotonicity #60 #64]: #66
#70 := [monotonicity #67]: #69
#77 := [monotonicity #70 #74]: #76
#80 := [quant-intro #77]: #79
#83 := [monotonicity #80]: #82
#55 := (iff #19 #54)
#52 := (iff #18 #44)
#47 := (exists (vars (?v0 Int)) #44)
#50 := (iff #47 #44)
#51 := [elim-unused]: #50
#48 := (iff #18 #47)
#45 := (iff #17 #44)
#42 := (iff #16 #41)
#43 := [rewrite]: #42
#46 := [quant-intro #43]: #45
#49 := [quant-intro #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#85 := [trans #56 #83]: #84
#39 := [asserted]: #19
#86 := [mp #39 #85]: #81
#107 := [mp~ #86 #104]: #102
#108 := [mp #107 #130]: #128
#133 := [not-or-elim #108]: #119
#109 := [not-or-elim #108]: #110
#132 := [and-elim #109]: #98
#131 := [and-elim #109]: #96
[th-lemma arith farkas 1 1 1 #131 #132 #133]: false
unsat
68c837c3dabb51cfb3fa72be140feeef8d58aa35 117 0
#2 := false
#8 := 0::Int
decl ?v1!1 :: Int
#103 := ?v1!1
#106 := (<= ?v1!1 0::Int)
#107 := (not #106)
#11 := 0::Real
decl ?v2!0 :: Real
#102 := ?v2!0
#104 := (<= ?v2!0 0::Real)
#105 := (not #104)
#119 := (and #105 #107)
#122 := (not #119)
#41 := -1::Int
#100 := (<= ?v1!1 -1::Int)
#101 := (not #100)
#128 := (or #101 #122)
#133 := (not #128)
#108 := (and #107 #105)
#109 := (not #108)
#110 := (or #109 #101)
#111 := (not #110)
#134 := (iff #111 #133)
#131 := (iff #110 #128)
#125 := (or #122 #101)
#129 := (iff #125 #128)
#130 := [rewrite]: #129
#126 := (iff #110 #125)
#123 := (iff #109 #122)
#120 := (iff #108 #119)
#121 := [rewrite]: #120
#124 := [monotonicity #121]: #123
#127 := [monotonicity #124]: #126
#132 := [trans #127 #130]: #131
#135 := [monotonicity #132]: #134
#9 := (:var 1 Int)
#83 := (<= #9 -1::Int)
#84 := (not #83)
#12 := (:var 0 Real)
#73 := (<= #12 0::Real)
#74 := (not #73)
#69 := (<= #9 0::Int)
#70 := (not #69)
#77 := (and #70 #74)
#80 := (not #77)
#87 := (or #80 #84)
#90 := (forall (vars (?v1 Int) (?v2 Real)) #87)
#93 := (not #90)
#112 := (~ #93 #111)
#113 := [sk]: #112
#15 := 1::Int
#16 := (- 1::Int)
#17 := (< #16 #9)
#13 := (< 0::Real #12)
#10 := (< 0::Int #9)
#14 := (and #10 #13)
#18 := (implies #14 #17)
#19 := (forall (vars (?v1 Int) (?v2 Real)) #18)
#20 := (exists (vars (?v0 Int)) #19)
#21 := (not #20)
#96 := (iff #21 #93)
#44 := (< -1::Int #9)
#50 := (not #14)
#51 := (or #50 #44)
#56 := (forall (vars (?v1 Int) (?v2 Real)) #51)
#66 := (not #56)
#94 := (iff #66 #93)
#91 := (iff #56 #90)
#88 := (iff #51 #87)
#85 := (iff #44 #84)
#86 := [rewrite]: #85
#81 := (iff #50 #80)
#78 := (iff #14 #77)
#75 := (iff #13 #74)
#76 := [rewrite]: #75
#71 := (iff #10 #70)
#72 := [rewrite]: #71
#79 := [monotonicity #72 #76]: #78
#82 := [monotonicity #79]: #81
#89 := [monotonicity #82 #86]: #88
#92 := [quant-intro #89]: #91
#95 := [monotonicity #92]: #94
#67 := (iff #21 #66)
#64 := (iff #20 #56)
#59 := (exists (vars (?v0 Int)) #56)
#62 := (iff #59 #56)
#63 := [elim-unused]: #62
#60 := (iff #20 #59)
#57 := (iff #19 #56)
#54 := (iff #18 #51)
#47 := (implies #14 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #18 #47)
#45 := (iff #17 #44)
#42 := (= #16 -1::Int)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#58 := [quant-intro #55]: #57
#61 := [quant-intro #58]: #60
#65 := [trans #61 #63]: #64
#68 := [monotonicity #65]: #67
#97 := [trans #68 #95]: #96
#40 := [asserted]: #21
#98 := [mp #40 #97]: #93
#116 := [mp~ #98 #113]: #111
#117 := [mp #116 #135]: #133
#136 := [not-or-elim #117]: #119
#138 := [and-elim #136]: #107
#118 := [not-or-elim #117]: #100
#194 := (or #101 #106)
#195 := [th-lemma arith farkas 1 1]: #194
#196 := [unit-resolution #195 #118]: #106
[unit-resolution #196 #138]: false
unsat
111e0e11b10e3dfb46a207e5da98c171ac0c63ad 148 0
#2 := false
#152 := (not false)
#11 := 0::Int
#9 := (:var 0 Int)
#60 := (<= #9 0::Int)
#61 := (not #60)
#155 := (or #61 #152)
#158 := (not #155)
#161 := (forall (vars (?v0 Int)) #158)
#188 := (iff #161 false)
#183 := (forall (vars (?v0 Int)) false)
#186 := (iff #183 false)
#187 := [elim-unused]: #186
#184 := (iff #161 #183)
#181 := (iff #158 false)
#1 := true
#176 := (not true)
#179 := (iff #176 false)
#180 := [rewrite]: #179
#177 := (iff #158 #176)
#174 := (iff #155 true)
#169 := (or #61 true)
#172 := (iff #169 true)
#173 := [rewrite]: #172
#170 := (iff #155 #169)
#167 := (iff #152 true)
#168 := [rewrite]: #167
#171 := [monotonicity #168]: #170
#175 := [trans #171 #173]: #174
#178 := [monotonicity #175]: #177
#182 := [trans #178 #180]: #181
#185 := [quant-intro #182]: #184
#189 := [trans #185 #187]: #188
#64 := -1::Int
#65 := (* -1::Int #9)
#8 := (:var 1 Int)
#66 := (+ #8 #65)
#67 := (<= #66 0::Int)
#70 := (not #67)
#76 := (or #61 #70)
#81 := (forall (vars (?v1 Int)) #76)
#84 := (not #81)
#87 := (or #61 #84)
#113 := (not #87)
#131 := (forall (vars (?v0 Int)) #113)
#164 := (iff #131 #161)
#135 := (forall (vars (?v1 Int)) #61)
#138 := (not #135)
#141 := (or #61 #138)
#144 := (not #141)
#147 := (forall (vars (?v0 Int)) #144)
#162 := (iff #147 #161)
#163 := [rewrite]: #162
#148 := (iff #131 #147)
#149 := [rewrite]: #148
#165 := [trans #149 #163]: #164
#124 := (and #60 #81)
#127 := (forall (vars (?v0 Int)) #124)
#132 := (iff #127 #131)
#121 := (iff #124 #113)
#130 := [rewrite]: #121
#133 := [quant-intro #130]: #132
#104 := (not #61)
#112 := (and #104 #81)
#116 := (forall (vars (?v0 Int)) #112)
#128 := (iff #116 #127)
#125 := (iff #112 #124)
#122 := (iff #104 #60)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#129 := [quant-intro #126]: #128
#90 := (exists (vars (?v0 Int)) #87)
#93 := (not #90)
#117 := (~ #93 #116)
#114 := (~ #113 #112)
#109 := (not #84)
#110 := (~ #109 #81)
#101 := (~ #81 #81)
#107 := (~ #76 #76)
#100 := [refl]: #107
#108 := [nnf-pos #100]: #101
#111 := [nnf-neg #108]: #110
#105 := (~ #104 #104)
#106 := [refl]: #105
#115 := [nnf-neg #106 #111]: #114
#118 := [nnf-neg #115]: #117
#12 := (< 0::Int #9)
#10 := (<= #8 #9)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 Int)) #13)
#15 := (implies #14 #12)
#16 := (exists (vars (?v0 Int)) #15)
#17 := (not #16)
#96 := (iff #17 #93)
#38 := (not #10)
#39 := (or #38 #12)
#42 := (forall (vars (?v1 Int)) #39)
#48 := (not #42)
#49 := (or #12 #48)
#54 := (exists (vars (?v0 Int)) #49)
#57 := (not #54)
#94 := (iff #57 #93)
#91 := (iff #54 #90)
#88 := (iff #49 #87)
#85 := (iff #48 #84)
#82 := (iff #42 #81)
#79 := (iff #39 #76)
#73 := (or #70 #61)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #39 #73)
#62 := (iff #12 #61)
#63 := [rewrite]: #62
#71 := (iff #38 #70)
#68 := (iff #10 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72 #63]: #74
#80 := [trans #75 #78]: #79
#83 := [quant-intro #80]: #82
#86 := [monotonicity #83]: #85
#89 := [monotonicity #63 #86]: #88
#92 := [quant-intro #89]: #91
#95 := [monotonicity #92]: #94
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #49)
#45 := (implies #42 #12)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #15 #45)
#43 := (iff #14 #42)
#40 := (iff #13 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#56 := [quant-intro #53]: #55
#59 := [monotonicity #56]: #58
#97 := [trans #59 #95]: #96
#37 := [asserted]: #17
#98 := [mp #37 #97]: #93
#119 := [mp~ #98 #118]: #116
#120 := [mp #119 #129]: #127
#134 := [mp #120 #133]: #131
#166 := [mp #134 #165]: #161
[mp #166 #189]: false
unsat
f97f94cdf9ea1da48e107362c172b39f4b82d4a8 66 2
#2 := false
decl f3 :: Int
#9 := f3
#11 := 2::Int
#13 := (* 2::Int f3)
#8 := (:var 0 Int)
#12 := (* 2::Int #8)
#14 := (< #12 #13)
#10 := (< #8 f3)
#15 := (implies #10 #14)
#16 := (forall (vars (?v0 Int)) #15)
#17 := (not #16)
#86 := (iff #17 false)
#38 := (not #10)
#39 := (or #38 #14)
#42 := (forall (vars (?v0 Int)) #39)
#45 := (not #42)
#84 := (iff #45 false)
#1 := true
#79 := (not true)
#82 := (iff #79 false)
#83 := [rewrite]: #82
#80 := (iff #45 #79)
#77 := (iff #42 true)
#72 := (forall (vars (?v0 Int)) true)
#75 := (iff #72 true)
#76 := [elim-unused]: #75
#73 := (iff #42 #72)
#70 := (iff #39 true)
#50 := 0::Int
#48 := -1::Int
#52 := (* -1::Int f3)
#53 := (+ #8 #52)
#51 := (>= #53 0::Int)
#49 := (not #51)
#64 := (or #51 #49)
#68 := (iff #64 true)
#69 := [rewrite]: #68
#66 := (iff #39 #64)
#65 := (iff #14 #49)
#63 := [rewrite]: #65
#61 := (iff #38 #51)
#56 := (not #49)
#59 := (iff #56 #51)
#60 := [rewrite]: #59
#57 := (iff #38 #56)
#54 := (iff #10 #49)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#67 := [monotonicity #62 #63]: #66
#71 := [trans #67 #69]: #70
#74 := [quant-intro #71]: #73
#78 := [trans #74 #76]: #77
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#46 := (iff #17 #45)
#43 := (iff #16 #42)
#40 := (iff #15 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#47 := [monotonicity #44]: #46
#87 := [trans #47 #85]: #86
#37 := [asserted]: #17
[mp #37 #87]: false
unsat
ERROR: line 11 column 83: invalid pattern.

8f616b17d0807409dc26bfdf9593c5fcd06fb7e7 1 0
unsat
3eb9cf11ee8774c9212c37c265e7552f3b8f24a9 75 0
#2 := false
#10 := 1::Int
decl f5 :: Int
#12 := f5
#16 := (+ f5 1::Int)
decl f3 :: Int
#8 := f3
#17 := (* f3 #16)
decl f4 :: Int
#9 := f4
#15 := (* f3 f4)
#18 := (+ #15 #17)
#11 := (+ f4 1::Int)
#13 := (+ #11 f5)
#14 := (* f3 #13)
#19 := (= #14 #18)
#20 := (not #19)
#93 := (iff #20 false)
#1 := true
#88 := (not true)
#91 := (iff #88 false)
#92 := [rewrite]: #91
#89 := (iff #20 #88)
#86 := (iff #19 true)
#56 := (* f3 f5)
#57 := (+ #15 #56)
#58 := (+ f3 #57)
#81 := (= #58 #58)
#84 := (iff #81 true)
#85 := [rewrite]: #84
#82 := (iff #19 #81)
#79 := (= #18 #58)
#69 := (+ f3 #56)
#74 := (+ #15 #69)
#77 := (= #74 #58)
#78 := [rewrite]: #77
#75 := (= #18 #74)
#72 := (= #17 #69)
#63 := (+ 1::Int f5)
#66 := (* f3 #63)
#70 := (= #66 #69)
#71 := [rewrite]: #70
#67 := (= #17 #66)
#64 := (= #16 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#61 := (= #14 #58)
#47 := (+ f4 f5)
#48 := (+ 1::Int #47)
#53 := (* f3 #48)
#59 := (= #53 #58)
#60 := [rewrite]: #59
#54 := (= #14 #53)
#51 := (= #13 #48)
#41 := (+ 1::Int f4)
#44 := (+ #41 f5)
#49 := (= #44 #48)
#50 := [rewrite]: #49
#45 := (= #13 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#62 := [trans #55 #60]: #61
#83 := [monotonicity #62 #80]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#40 := [asserted]: #20
[mp #40 #94]: false
unsat
741a564e40e4b6610d1d47bdab19a223e004482a 62 0
#2 := false
decl f4 :: Real
#10 := f4
decl f3 :: Real
#8 := f3
#16 := 2::Real
#17 := (* 2::Real f3)
#18 := (* #17 f4)
#9 := 1::Real
#13 := (- 1::Real f4)
#14 := (* f3 #13)
#11 := (+ 1::Real f4)
#12 := (* f3 #11)
#15 := (- #12 #14)
#19 := (= #15 #18)
#20 := (not #19)
#81 := (iff #20 false)
#1 := true
#76 := (not true)
#79 := (iff #76 false)
#80 := [rewrite]: #79
#77 := (iff #20 #76)
#74 := (iff #19 true)
#41 := (* f3 f4)
#63 := (* 2::Real #41)
#69 := (= #63 #63)
#72 := (iff #69 true)
#73 := [rewrite]: #72
#70 := (iff #19 #69)
#67 := (= #18 #63)
#68 := [rewrite]: #67
#65 := (= #15 #63)
#45 := -1::Real
#53 := (* -1::Real #41)
#54 := (+ f3 #53)
#42 := (+ f3 #41)
#59 := (- #42 #54)
#62 := (= #59 #63)
#64 := [rewrite]: #62
#60 := (= #15 #59)
#57 := (= #14 #54)
#46 := (* -1::Real f4)
#47 := (+ 1::Real #46)
#50 := (* f3 #47)
#55 := (= #50 #54)
#56 := [rewrite]: #55
#51 := (= #14 #50)
#48 := (= #13 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#58 := [trans #52 #56]: #57
#43 := (= #12 #42)
#44 := [rewrite]: #43
#61 := [monotonicity #44 #58]: #60
#66 := [trans #61 #64]: #65
#71 := [monotonicity #66 #68]: #70
#75 := [trans #71 #73]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#40 := [asserted]: #20
[mp #40 #82]: false
unsat
06d1bd5308956fb019ef1c09bf97c6326d872fd6 141 0
#2 := false
decl f6 :: Int
#13 := f6
decl f7 :: Int
#17 := f7
decl f5 :: Int
#12 := f5
#28 := (+ f5 f7)
#29 := (+ #28 f6)
decl f4 :: Int
#10 := f4
#9 := 1::Int
#11 := (+ 1::Int f4)
#30 := (* #11 #29)
#25 := (* f7 f4)
#23 := (* #11 f7)
#14 := (+ f5 f6)
#20 := 2::Int
#21 := (* 2::Int #11)
#22 := (* #21 #14)
#24 := (+ #22 #23)
#26 := (+ #24 #25)
decl f3 :: Int
#8 := f3
#27 := (+ f3 #26)
#31 := (- #27 #30)
#18 := (* f4 f7)
#15 := (* #11 #14)
#16 := (+ f3 #15)
#19 := (+ #16 #18)
#32 := (= #19 #31)
#33 := (not #32)
#157 := (iff #33 false)
#1 := true
#152 := (not true)
#155 := (iff #152 false)
#156 := [rewrite]: #155
#153 := (iff #33 #152)
#150 := (iff #32 true)
#55 := (* f4 f6)
#54 := (* f4 f5)
#56 := (+ #54 #55)
#67 := (+ #18 #56)
#68 := (+ f6 #67)
#69 := (+ f5 #68)
#70 := (+ f3 #69)
#144 := (= #70 #70)
#148 := (iff #144 true)
#149 := [rewrite]: #148
#143 := (iff #32 #144)
#146 := (= #31 #70)
#131 := (+ f7 #67)
#132 := (+ f6 #131)
#133 := (+ f5 #132)
#85 := (* 2::Int #55)
#83 := (* 2::Int #54)
#86 := (+ #83 #85)
#112 := (* 2::Int #18)
#113 := (+ #112 #86)
#114 := (+ f7 #113)
#84 := (* 2::Int f6)
#115 := (+ #84 #114)
#82 := (* 2::Int f5)
#116 := (+ #82 #115)
#121 := (+ f3 #116)
#138 := (- #121 #133)
#141 := (= #138 #70)
#147 := [rewrite]: #141
#139 := (= #31 #138)
#136 := (= #30 #133)
#124 := (+ f6 f7)
#125 := (+ f5 #124)
#128 := (* #11 #125)
#134 := (= #128 #133)
#135 := [rewrite]: #134
#129 := (= #30 #128)
#126 := (= #29 #125)
#127 := [rewrite]: #126
#130 := [monotonicity #127]: #129
#137 := [trans #130 #135]: #136
#122 := (= #27 #121)
#119 := (= #26 #116)
#99 := (+ #18 #86)
#100 := (+ f7 #99)
#101 := (+ #84 #100)
#102 := (+ #82 #101)
#109 := (+ #102 #18)
#117 := (= #109 #116)
#118 := [rewrite]: #117
#110 := (= #26 #109)
#107 := (= #25 #18)
#108 := [rewrite]: #107
#105 := (= #24 #102)
#93 := (+ f7 #18)
#87 := (+ #84 #86)
#88 := (+ #82 #87)
#96 := (+ #88 #93)
#103 := (= #96 #102)
#104 := [rewrite]: #103
#97 := (= #24 #96)
#94 := (= #23 #93)
#95 := [rewrite]: #94
#91 := (= #22 #88)
#75 := (* 2::Int f4)
#76 := (+ 2::Int #75)
#79 := (* #76 #14)
#89 := (= #79 #88)
#90 := [rewrite]: #89
#80 := (= #22 #79)
#77 := (= #21 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#92 := [trans #81 #90]: #91
#98 := [monotonicity #92 #95]: #97
#106 := [trans #98 #104]: #105
#111 := [monotonicity #106 #108]: #110
#120 := [trans #111 #118]: #119
#123 := [monotonicity #120]: #122
#140 := [monotonicity #123 #137]: #139
#145 := [trans #140 #147]: #146
#73 := (= #19 #70)
#57 := (+ f6 #56)
#58 := (+ f5 #57)
#61 := (+ f3 #58)
#64 := (+ #61 #18)
#71 := (= #64 #70)
#72 := [rewrite]: #71
#65 := (= #19 #64)
#62 := (= #16 #61)
#59 := (= #15 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#74 := [trans #66 #72]: #73
#142 := [monotonicity #74 #145]: #143
#151 := [trans #142 #149]: #150
#154 := [monotonicity #151]: #153
#158 := [trans #154 #156]: #157
#53 := [asserted]: #33
[mp #53 #158]: false
unsat
13d222fc57300189e3c05b2df538ad53757b2feb 257 0
#2 := false
#23 := 0::Int
decl f4 :: (-> S2 Int)
decl f3 :: (-> Int S2)
decl f5 :: S2
#9 := f5
#10 := (f4 f5)
#8 := 2::Int
#11 := (* 2::Int #10)
#12 := (f3 #11)
#306 := (f4 #12)
#308 := -1::Int
#287 := (* -1::Int #306)
#623 := (+ #11 #287)
#607 := (<= #623 0::Int)
#625 := (= #623 0::Int)
#619 := (>= #10 0::Int)
#250 := (= #306 0::Int)
#562 := (not #250)
#601 := (<= #306 0::Int)
#470 := (not #601)
#13 := 1::Int
#571 := (>= #306 1::Int)
#568 := (= #306 1::Int)
#14 := (f3 1::Int)
#602 := (f4 #14)
#314 := (= #602 1::Int)
#24 := (:var 0 Int)
#26 := (f3 #24)
#639 := (pattern #26)
#84 := (>= #24 0::Int)
#85 := (not #84)
#27 := (f4 #26)
#66 := (= #24 #27)
#91 := (or #66 #85)
#640 := (forall (vars (?v0 Int)) (:pat #639) #91)
#96 := (forall (vars (?v0 Int)) #91)
#643 := (iff #96 #640)
#641 := (iff #91 #91)
#642 := [refl]: #641
#644 := [quant-intro #642]: #643
#148 := (~ #96 #96)
#147 := (~ #91 #91)
#144 := [refl]: #147
#149 := [nnf-pos #144]: #148
#28 := (= #27 #24)
#25 := (<= 0::Int #24)
#29 := (implies #25 #28)
#30 := (forall (vars (?v0 Int)) #29)
#99 := (iff #30 #96)
#73 := (not #25)
#74 := (or #73 #66)
#79 := (forall (vars (?v0 Int)) #74)
#97 := (iff #79 #96)
#94 := (iff #74 #91)
#88 := (or #85 #66)
#92 := (iff #88 #91)
#93 := [rewrite]: #92
#89 := (iff #74 #88)
#86 := (iff #73 #85)
#82 := (iff #25 #84)
#83 := [rewrite]: #82
#87 := [monotonicity #83]: #86
#90 := [monotonicity #87]: #89
#95 := [trans #90 #93]: #94
#98 := [quant-intro #95]: #97
#80 := (iff #30 #79)
#77 := (iff #29 #74)
#70 := (implies #25 #66)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #29 #70)
#68 := (iff #28 #66)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#78 := [trans #72 #76]: #77
#81 := [quant-intro #78]: #80
#100 := [trans #81 #98]: #99
#65 := [asserted]: #30
#101 := [mp #65 #100]: #96
#145 := [mp~ #101 #149]: #96
#645 := [mp #145 #644]: #640
#622 := (not #640)
#591 := (or #622 #314)
#324 := (>= 1::Int 0::Int)
#598 := (not #324)
#599 := (= 1::Int #602)
#603 := (or #599 #598)
#432 := (or #622 #603)
#434 := (iff #432 #591)
#577 := (iff #591 #591)
#578 := [rewrite]: #577
#590 := (iff #603 #314)
#587 := (or #314 false)
#584 := (iff #587 #314)
#589 := [rewrite]: #584
#588 := (iff #603 #587)
#597 := (iff #598 false)
#1 := true
#595 := (not true)
#596 := (iff #595 false)
#593 := [rewrite]: #596
#309 := (iff #598 #595)
#316 := (iff #324 true)
#594 := [rewrite]: #316
#592 := [monotonicity #594]: #309
#586 := [trans #592 #593]: #597
#313 := (iff #599 #314)
#315 := [rewrite]: #313
#583 := [monotonicity #315 #586]: #588
#585 := [trans #583 #589]: #590
#576 := [monotonicity #585]: #434
#579 := [trans #576 #578]: #434
#433 := [quant-inst #13]: #432
#573 := [mp #433 #579]: #591
#455 := [unit-resolution #573 #645]: #314
#456 := (= #306 #602)
#15 := (= #12 #14)
#16 := (not #15)
#17 := (not #16)
#55 := (iff #17 #15)
#56 := [rewrite]: #55
#54 := [asserted]: #17
#59 := [mp #54 #56]: #15
#449 := [monotonicity #59]: #456
#464 := [trans #449 #455]: #568
#466 := (not #568)
#467 := (or #466 #571)
#460 := [th-lemma arith triangle-eq]: #467
#468 := [unit-resolution #460 #464]: #571
#469 := (not #571)
#471 := (or #469 #470)
#472 := [th-lemma arith farkas 1 1]: #471
#565 := [unit-resolution #472 #468]: #470
#566 := (or #562 #601)
#553 := [th-lemma arith triangle-eq]: #566
#555 := [unit-resolution #553 #565]: #562
#616 := (or #250 #619)
#32 := (= #27 0::Int)
#132 := (or #32 #84)
#646 := (forall (vars (?v0 Int)) (:pat #639) #132)
#137 := (forall (vars (?v0 Int)) #132)
#649 := (iff #137 #646)
#647 := (iff #132 #132)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#150 := (~ #137 #137)
#158 := (~ #132 #132)
#159 := [refl]: #158
#151 := [nnf-pos #159]: #150
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#140 := (iff #34 #137)
#103 := (= 0::Int #27)
#109 := (not #31)
#110 := (or #109 #103)
#115 := (forall (vars (?v0 Int)) #110)
#138 := (iff #115 #137)
#135 := (iff #110 #132)
#129 := (or #84 #32)
#133 := (iff #129 #132)
#134 := [rewrite]: #133
#130 := (iff #110 #129)
#127 := (iff #103 #32)
#128 := [rewrite]: #127
#125 := (iff #109 #84)
#120 := (not #85)
#123 := (iff #120 #84)
#124 := [rewrite]: #123
#121 := (iff #109 #120)
#118 := (iff #31 #85)
#119 := [rewrite]: #118
#122 := [monotonicity #119]: #121
#126 := [trans #122 #124]: #125
#131 := [monotonicity #126 #128]: #130
#136 := [trans #131 #134]: #135
#139 := [quant-intro #136]: #138
#116 := (iff #34 #115)
#113 := (iff #33 #110)
#106 := (implies #31 #103)
#111 := (iff #106 #110)
#112 := [rewrite]: #111
#107 := (iff #33 #106)
#104 := (iff #32 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105]: #107
#114 := [trans #108 #112]: #113
#117 := [quant-intro #114]: #116
#141 := [trans #117 #139]: #140
#102 := [asserted]: #34
#142 := [mp #102 #141]: #137
#160 := [mp~ #142 #151]: #137
#651 := [mp #160 #650]: #646
#617 := (not #646)
#615 := (or #617 #250 #619)
#217 := (>= #11 0::Int)
#614 := (or #250 #217)
#618 := (or #617 #614)
#330 := (iff #618 #615)
#605 := (or #617 #616)
#328 := (iff #605 #615)
#329 := [rewrite]: #328
#312 := (iff #618 #605)
#255 := (iff #614 #616)
#292 := (iff #217 #619)
#293 := [rewrite]: #292
#256 := [monotonicity #293]: #255
#327 := [monotonicity #256]: #312
#223 := [trans #327 #329]: #330
#604 := [quant-inst #11]: #618
#600 := [mp #604 #223]: #615
#547 := [unit-resolution #600 #651]: #616
#544 := [unit-resolution #547 #555]: #619
#626 := (not #619)
#620 := (or #626 #625)
#264 := (or #622 #626 #625)
#302 := (not #217)
#307 := (= #11 #306)
#304 := (or #307 #302)
#606 := (or #622 #304)
#610 := (iff #606 #264)
#269 := (or #622 #620)
#608 := (iff #269 #264)
#609 := [rewrite]: #608
#270 := (iff #606 #269)
#621 := (iff #304 #620)
#629 := (or #625 #626)
#279 := (iff #629 #620)
#284 := [rewrite]: #279
#624 := (iff #304 #629)
#627 := (iff #302 #626)
#628 := [monotonicity #293]: #627
#281 := (iff #307 #625)
#412 := [rewrite]: #281
#630 := [monotonicity #412 #628]: #624
#280 := [trans #630 #284]: #621
#271 := [monotonicity #280]: #270
#611 := [trans #271 #609]: #610
#268 := [quant-inst #11]: #606
#612 := [mp #268 #611]: #264
#546 := [unit-resolution #612 #645]: #620
#556 := [unit-resolution #546 #544]: #625
#557 := (not #625)
#558 := (or #557 #607)
#554 := [th-lemma arith triangle-eq]: #558
#559 := [unit-resolution #554 #556]: #607
#613 := (>= #623 0::Int)
#548 := (or #557 #613)
#549 := [th-lemma arith triangle-eq]: #548
#550 := [unit-resolution #549 #556]: #613
#570 := (<= #306 1::Int)
#551 := (or #466 #570)
#545 := [th-lemma arith triangle-eq]: #551
#552 := [unit-resolution #545 #464]: #570
[th-lemma arith gcd-test -1/2 -1/2 -1/2 -1/2 #468 #552 #550 #559]: false
unsat
a1e6530c70707193300160df3c867064030ce9e7 53 0
#2 := false
#73 := 4::Int
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#74 := (>= #9 4::Int)
#75 := (not #74)
#10 := 3::Int
#64 := (>= #9 3::Int)
#78 := (or #64 #75)
#81 := (not #78)
#14 := 7::Int
#12 := 2::Int
#13 := (* 2::Int #9)
#15 := (< #13 7::Int)
#11 := (< #9 3::Int)
#16 := (implies #11 #15)
#17 := (not #16)
#84 := (iff #17 #81)
#55 := (not #11)
#56 := (or #55 #15)
#59 := (not #56)
#82 := (iff #59 #81)
#79 := (iff #56 #78)
#76 := (iff #15 #75)
#77 := [rewrite]: #76
#71 := (iff #55 #64)
#62 := (not #64)
#66 := (not #62)
#69 := (iff #66 #64)
#70 := [rewrite]: #69
#67 := (iff #55 #66)
#63 := (iff #11 #62)
#65 := [rewrite]: #63
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#80 := [monotonicity #72 #77]: #79
#83 := [monotonicity #80]: #82
#60 := (iff #17 #59)
#57 := (iff #16 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#85 := [trans #61 #83]: #84
#54 := [asserted]: #17
#86 := [mp #54 #85]: #81
#88 := [not-or-elim #86]: #74
#87 := [not-or-elim #86]: #62
#247 := (or #75 #64)
#333 := [th-lemma arith farkas 1 1]: #247
#248 := [unit-resolution #333 #87]: #75
[unit-resolution #248 #88]: false
unsat
b291832954eed5d417dbf2b7700c405589802332 313 0
#2 := false
#8 := 0::Int
decl f3 :: (-> S2 Int)
decl f4 :: (-> Int S2)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#9 := 1::Int
#12 := (+ 1::Int #11)
#13 := (f4 #12)
#14 := (f3 #13)
#59 := -1::Int
#60 := (* -1::Int #11)
#61 := (+ #60 #14)
#64 := (f4 #61)
#67 := (f3 #64)
#324 := (* -1::Int #14)
#625 := (+ #324 #67)
#626 := (+ #11 #625)
#613 := (>= #626 0::Int)
#346 := (= #626 0::Int)
#325 := (+ #11 #324)
#341 := (<= #325 0::Int)
#644 := (<= #325 -1::Int)
#657 := (= #325 -1::Int)
#660 := (>= #11 -1::Int)
#491 := (>= #11 0::Int)
#551 := (= #11 0::Int)
#248 := (f4 #11)
#499 := (f3 #248)
#500 := (= #499 0::Int)
#553 := (not #491)
#554 := [hypothesis]: #553
#502 := (or #491 #500)
#26 := (:var 0 Int)
#28 := (f4 #26)
#670 := (pattern #28)
#115 := (>= #26 0::Int)
#29 := (f3 #28)
#34 := (= #29 0::Int)
#164 := (or #34 #115)
#677 := (forall (vars (?v0 Int)) (:pat #670) #164)
#169 := (forall (vars (?v0 Int)) #164)
#680 := (iff #169 #677)
#678 := (iff #164 #164)
#679 := [refl]: #678
#681 := [quant-intro #679]: #680
#182 := (~ #169 #169)
#190 := (~ #164 #164)
#191 := [refl]: #190
#183 := [nnf-pos #191]: #182
#33 := (< #26 0::Int)
#35 := (implies #33 #34)
#36 := (forall (vars (?v0 Int)) #35)
#172 := (iff #36 #169)
#135 := (= 0::Int #29)
#141 := (not #33)
#142 := (or #141 #135)
#147 := (forall (vars (?v0 Int)) #142)
#170 := (iff #147 #169)
#167 := (iff #142 #164)
#161 := (or #115 #34)
#165 := (iff #161 #164)
#166 := [rewrite]: #165
#162 := (iff #142 #161)
#159 := (iff #135 #34)
#160 := [rewrite]: #159
#157 := (iff #141 #115)
#117 := (not #115)
#152 := (not #117)
#155 := (iff #152 #115)
#156 := [rewrite]: #155
#153 := (iff #141 #152)
#150 := (iff #33 #117)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#158 := [trans #154 #156]: #157
#163 := [monotonicity #158 #160]: #162
#168 := [trans #163 #166]: #167
#171 := [quant-intro #168]: #170
#148 := (iff #36 #147)
#145 := (iff #35 #142)
#138 := (implies #33 #135)
#143 := (iff #138 #142)
#144 := [rewrite]: #143
#139 := (iff #35 #138)
#136 := (iff #34 #135)
#137 := [rewrite]: #136
#140 := [monotonicity #137]: #139
#146 := [trans #140 #144]: #145
#149 := [quant-intro #146]: #148
#173 := [trans #149 #171]: #172
#134 := [asserted]: #36
#174 := [mp #134 #173]: #169
#192 := [mp~ #174 #183]: #169
#682 := [mp #192 #681]: #677
#646 := (not #677)
#593 := (or #646 #491 #500)
#501 := (or #500 #491)
#597 := (or #646 #501)
#588 := (iff #597 #593)
#586 := (or #646 #502)
#577 := (iff #586 #593)
#587 := [rewrite]: #577
#578 := (iff #597 #586)
#503 := (iff #501 #502)
#596 := [rewrite]: #503
#575 := [monotonicity #596]: #578
#589 := [trans #575 #587]: #588
#584 := [quant-inst #11]: #597
#585 := [mp #584 #589]: #593
#555 := [unit-resolution #585 #682]: #502
#556 := [unit-resolution #555 #554]: #500
#558 := (= #11 #499)
#333 := (= f5 #248)
#21 := (:var 0 S2)
#22 := (f3 #21)
#662 := (pattern #22)
#23 := (f4 #22)
#91 := (= #21 #23)
#663 := (forall (vars (?v0 S2)) (:pat #662) #91)
#94 := (forall (vars (?v0 S2)) #91)
#664 := (iff #94 #663)
#666 := (iff #663 #663)
#667 := [rewrite]: #666
#665 := [rewrite]: #664
#668 := [trans #665 #667]: #664
#188 := (~ #94 #94)
#186 := (~ #91 #91)
#187 := [refl]: #186
#189 := [nnf-pos #187]: #188
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S2)) #24)
#95 := (iff #25 #94)
#92 := (iff #24 #91)
#93 := [rewrite]: #92
#96 := [quant-intro #93]: #95
#90 := [asserted]: #25
#99 := [mp #90 #96]: #94
#178 := [mp~ #99 #189]: #94
#669 := [mp #178 #668]: #663
#335 := (not #663)
#326 := (or #335 #333)
#337 := [quant-inst #10]: #326
#557 := [unit-resolution #337 #669]: #333
#548 := [monotonicity #557]: #558
#559 := [trans #548 #556]: #551
#537 := (not #551)
#538 := (or #537 #491)
#540 := [th-lemma arith triangle-eq]: #538
#541 := [unit-resolution #540 #554 #559]: false
#542 := [lemma #541]: #491
#552 := (or #553 #660)
#543 := [th-lemma arith farkas 1 1]: #552
#544 := [unit-resolution #543 #542]: #660
#651 := (not #660)
#652 := (or #657 #651)
#98 := (= #26 #29)
#123 := (or #98 #117)
#671 := (forall (vars (?v0 Int)) (:pat #670) #123)
#128 := (forall (vars (?v0 Int)) #123)
#674 := (iff #128 #671)
#672 := (iff #123 #123)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#180 := (~ #128 #128)
#179 := (~ #123 #123)
#176 := [refl]: #179
#181 := [nnf-pos #176]: #180
#30 := (= #29 #26)
#27 := (<= 0::Int #26)
#31 := (implies #27 #30)
#32 := (forall (vars (?v0 Int)) #31)
#131 := (iff #32 #128)
#105 := (not #27)
#106 := (or #105 #98)
#111 := (forall (vars (?v0 Int)) #106)
#129 := (iff #111 #128)
#126 := (iff #106 #123)
#120 := (or #117 #98)
#124 := (iff #120 #123)
#125 := [rewrite]: #124
#121 := (iff #106 #120)
#118 := (iff #105 #117)
#114 := (iff #27 #115)
#116 := [rewrite]: #114
#119 := [monotonicity #116]: #118
#122 := [monotonicity #119]: #121
#127 := [trans #122 #125]: #126
#130 := [quant-intro #127]: #129
#112 := (iff #32 #111)
#109 := (iff #31 #106)
#102 := (implies #27 #98)
#107 := (iff #102 #106)
#108 := [rewrite]: #107
#103 := (iff #31 #102)
#100 := (iff #30 #98)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#110 := [trans #104 #108]: #109
#113 := [quant-intro #110]: #112
#132 := [trans #113 #130]: #131
#97 := [asserted]: #32
#133 := [mp #97 #132]: #128
#177 := [mp~ #133 #181]: #128
#676 := [mp #177 #675]: #671
#296 := (not #671)
#637 := (or #296 #657 #651)
#319 := (>= #12 0::Int)
#654 := (not #319)
#443 := (= #12 #14)
#650 := (or #443 #654)
#300 := (or #296 #650)
#642 := (iff #300 #637)
#302 := (or #296 #652)
#640 := (iff #302 #637)
#641 := [rewrite]: #640
#303 := (iff #300 #302)
#312 := (iff #650 #652)
#311 := (iff #654 #651)
#655 := (iff #319 #660)
#661 := [rewrite]: #655
#316 := [monotonicity #661]: #311
#658 := (iff #443 #657)
#659 := [rewrite]: #658
#653 := [monotonicity #659 #316]: #312
#639 := [monotonicity #653]: #303
#643 := [trans #639 #641]: #642
#301 := [quant-inst #12]: #300
#638 := [mp #301 #643]: #637
#539 := [unit-resolution #638 #676]: #652
#545 := [unit-resolution #539 #544]: #657
#531 := (not #657)
#527 := (or #531 #644)
#528 := [th-lemma arith triangle-eq]: #527
#529 := [unit-resolution #528 #545]: #644
#532 := (not #644)
#533 := (or #532 #341)
#534 := [th-lemma arith farkas 1 1]: #533
#535 := [unit-resolution #534 #529]: #341
#624 := (not #341)
#615 := (or #624 #346)
#463 := (or #296 #624 #346)
#633 := (>= #61 0::Int)
#630 := (not #633)
#634 := (= #61 #67)
#344 := (or #634 #630)
#464 := (or #296 #344)
#605 := (iff #464 #463)
#607 := (or #296 #615)
#610 := (iff #607 #463)
#604 := [rewrite]: #610
#608 := (iff #464 #607)
#616 := (iff #344 #615)
#618 := (or #346 #624)
#620 := (iff #618 #615)
#621 := [rewrite]: #620
#619 := (iff #344 #618)
#628 := (iff #630 #624)
#623 := (iff #633 #341)
#627 := [rewrite]: #623
#617 := [monotonicity #627]: #628
#345 := (iff #634 #346)
#347 := [rewrite]: #345
#614 := [monotonicity #347 #617]: #619
#622 := [trans #614 #621]: #616
#609 := [monotonicity #622]: #608
#611 := [trans #609 #604]: #605
#465 := [quant-inst #61]: #464
#612 := [mp #465 #611]: #463
#530 := [unit-resolution #612 #676]: #615
#536 := [unit-resolution #530 #535]: #346
#509 := (not #346)
#510 := (or #509 #613)
#511 := [th-lemma arith triangle-eq]: #510
#404 := [unit-resolution #511 #536]: #613
#76 := (<= #67 0::Int)
#16 := (- #14 #11)
#17 := (f4 #16)
#18 := (f3 #17)
#15 := (* 0::Int #14)
#19 := (< #15 #18)
#20 := (not #19)
#87 := (iff #20 #76)
#70 := (< 0::Int #67)
#73 := (not #70)
#85 := (iff #73 #76)
#77 := (not #76)
#80 := (not #77)
#83 := (iff #80 #76)
#84 := [rewrite]: #83
#81 := (iff #73 #80)
#78 := (iff #70 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#86 := [trans #82 #84]: #85
#74 := (iff #20 #73)
#71 := (iff #19 #70)
#68 := (= #18 #67)
#65 := (= #17 #64)
#62 := (= #16 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#69 := [monotonicity #66]: #68
#57 := (= #15 0::Int)
#58 := [rewrite]: #57
#72 := [monotonicity #58 #69]: #71
#75 := [monotonicity #72]: #74
#88 := [trans #75 #86]: #87
#56 := [asserted]: #20
#89 := [mp #56 #88]: #76
[th-lemma arith farkas -1 -1 1 #89 #529 #404]: false
unsat
2468012bc8708b2ac313d9120ee323168ff0a853 322 0
#2 := false
#8 := 0::Int
decl f3 :: (-> S2 Int)
decl f4 :: (-> Int S2)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#9 := 1::Int
#12 := (+ 1::Int #11)
#13 := (f4 #12)
#14 := (f3 #13)
#64 := -1::Int
#65 := (+ -1::Int #14)
#68 := (f4 #65)
#317 := (f3 #68)
#702 := (* -1::Int #317)
#566 := (+ #11 #702)
#560 := (>= #566 0::Int)
#564 := (= #11 #317)
#74 := (= f5 #68)
#110 := (<= #14 0::Int)
#111 := (not #110)
#117 := (iff #74 #111)
#132 := (not #117)
#244 := (iff #132 #74)
#234 := (not #74)
#239 := (not #234)
#242 := (iff #239 #74)
#243 := [rewrite]: #242
#240 := (iff #132 #239)
#237 := (iff #117 #234)
#231 := (iff #74 false)
#235 := (iff #231 #234)
#236 := [rewrite]: #235
#232 := (iff #117 #231)
#229 := (iff #111 false)
#1 := true
#224 := (not true)
#227 := (iff #224 false)
#228 := [rewrite]: #227
#225 := (iff #111 #224)
#222 := (iff #110 true)
#122 := (or #111 #117)
#125 := (not #122)
#15 := (< 0::Int #14)
#16 := (ite #15 true false)
#21 := (not #16)
#22 := (implies #21 false)
#17 := (- #14 1::Int)
#18 := (f4 #17)
#19 := (= #18 f5)
#20 := (iff #16 #19)
#23 := (or #20 #22)
#24 := (or false #23)
#25 := (not #24)
#128 := (iff #25 #125)
#79 := (iff #15 #74)
#95 := (or #15 #79)
#107 := (not #95)
#126 := (iff #107 #125)
#123 := (iff #95 #122)
#120 := (iff #79 #117)
#114 := (iff #111 #74)
#118 := (iff #114 #117)
#119 := [rewrite]: #118
#115 := (iff #79 #114)
#112 := (iff #15 #111)
#113 := [rewrite]: #112
#116 := [monotonicity #113]: #115
#121 := [trans #116 #119]: #120
#124 := [monotonicity #113 #121]: #123
#127 := [monotonicity #124]: #126
#108 := (iff #25 #107)
#105 := (iff #24 #95)
#100 := (or false #95)
#103 := (iff #100 #95)
#104 := [rewrite]: #103
#101 := (iff #24 #100)
#98 := (iff #23 #95)
#92 := (or #79 #15)
#96 := (iff #92 #95)
#97 := [rewrite]: #96
#93 := (iff #23 #92)
#90 := (iff #22 #15)
#82 := (not #15)
#85 := (implies #82 false)
#88 := (iff #85 #15)
#89 := [rewrite]: #88
#86 := (iff #22 #85)
#83 := (iff #21 #82)
#62 := (iff #16 #15)
#63 := [rewrite]: #62
#84 := [monotonicity #63]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#80 := (iff #20 #79)
#77 := (iff #19 #74)
#71 := (= #68 f5)
#75 := (iff #71 #74)
#76 := [rewrite]: #75
#72 := (iff #19 #71)
#69 := (= #18 #68)
#66 := (= #17 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#78 := [trans #73 #76]: #77
#81 := [monotonicity #63 #78]: #80
#94 := [monotonicity #81 #91]: #93
#99 := [trans #94 #97]: #98
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#109 := [monotonicity #106]: #108
#129 := [trans #109 #127]: #128
#61 := [asserted]: #25
#130 := [mp #61 #129]: #125
#131 := [not-or-elim #130]: #110
#223 := [iff-true #131]: #222
#226 := [monotonicity #223]: #225
#230 := [trans #226 #228]: #229
#233 := [monotonicity #230]: #232
#238 := [trans #233 #236]: #237
#241 := [monotonicity #238]: #240
#245 := [trans #241 #243]: #244
#133 := [not-or-elim #130]: #132
#246 := [mp #133 #245]: #74
#571 := [monotonicity #246]: #564
#572 := (not #564)
#644 := (or #572 #560)
#646 := [th-lemma arith triangle-eq]: #644
#656 := [unit-resolution #646 #571]: #560
#382 := (* -1::Int #14)
#512 := (+ #11 #382)
#711 := (<= #512 -1::Int)
#719 := (= #512 -1::Int)
#726 := (>= #11 -1::Int)
#549 := (>= #317 0::Int)
#680 := (= #317 0::Int)
#415 := (>= #14 1::Int)
#695 := (not #415)
#657 := (or #695 #111)
#658 := [th-lemma arith farkas 1 1]: #657
#654 := [unit-resolution #658 #131]: #695
#31 := (:var 0 Int)
#33 := (f4 #31)
#739 := (pattern #33)
#159 := (>= #31 0::Int)
#34 := (f3 #33)
#39 := (= #34 0::Int)
#208 := (or #39 #159)
#746 := (forall (vars (?v0 Int)) (:pat #739) #208)
#213 := (forall (vars (?v0 Int)) #208)
#749 := (iff #213 #746)
#747 := (iff #208 #208)
#748 := [refl]: #747
#750 := [quant-intro #748]: #749
#257 := (~ #213 #213)
#255 := (~ #208 #208)
#256 := [refl]: #255
#258 := [nnf-pos #256]: #257
#38 := (< #31 0::Int)
#40 := (implies #38 #39)
#41 := (forall (vars (?v0 Int)) #40)
#216 := (iff #41 #213)
#179 := (= 0::Int #34)
#185 := (not #38)
#186 := (or #185 #179)
#191 := (forall (vars (?v0 Int)) #186)
#214 := (iff #191 #213)
#211 := (iff #186 #208)
#205 := (or #159 #39)
#209 := (iff #205 #208)
#210 := [rewrite]: #209
#206 := (iff #186 #205)
#203 := (iff #179 #39)
#204 := [rewrite]: #203
#201 := (iff #185 #159)
#161 := (not #159)
#196 := (not #161)
#199 := (iff #196 #159)
#200 := [rewrite]: #199
#197 := (iff #185 #196)
#194 := (iff #38 #161)
#195 := [rewrite]: #194
#198 := [monotonicity #195]: #197
#202 := [trans #198 #200]: #201
#207 := [monotonicity #202 #204]: #206
#212 := [trans #207 #210]: #211
#215 := [quant-intro #212]: #214
#192 := (iff #41 #191)
#189 := (iff #40 #186)
#182 := (implies #38 #179)
#187 := (iff #182 #186)
#188 := [rewrite]: #187
#183 := (iff #40 #182)
#180 := (iff #39 #179)
#181 := [rewrite]: #180
#184 := [monotonicity #181]: #183
#190 := [trans #184 #188]: #189
#193 := [quant-intro #190]: #192
#217 := [trans #193 #215]: #216
#178 := [asserted]: #41
#218 := [mp #178 #217]: #213
#259 := [mp~ #218 #258]: #213
#751 := [mp #259 #750]: #746
#356 := (not #746)
#671 := (or #356 #415 #680)
#701 := (>= #65 0::Int)
#681 := (or #680 #701)
#669 := (or #356 #681)
#565 := (iff #669 #671)
#513 := (or #415 #680)
#554 := (or #356 #513)
#515 := (iff #554 #671)
#663 := [rewrite]: #515
#555 := (iff #669 #554)
#668 := (iff #681 #513)
#675 := (or #680 #415)
#514 := (iff #675 #513)
#667 := [rewrite]: #514
#682 := (iff #681 #675)
#416 := (iff #701 #415)
#694 := [rewrite]: #416
#511 := [monotonicity #694]: #682
#670 := [trans #511 #667]: #668
#556 := [monotonicity #670]: #555
#660 := [trans #556 #663]: #565
#672 := [quant-inst #65]: #669
#661 := [mp #672 #660]: #671
#659 := [unit-resolution #661 #751 #654]: #680
#648 := (not #680)
#649 := (or #648 #549)
#650 := [th-lemma arith triangle-eq]: #649
#651 := [unit-resolution #650 #659]: #549
#652 := (not #560)
#645 := (not #549)
#636 := (or #726 #645 #652)
#637 := [th-lemma arith assign-bounds 1 1]: #636
#639 := [unit-resolution #637 #651 #656]: #726
#729 := (not #726)
#720 := (or #719 #729)
#142 := (= #31 #34)
#167 := (or #142 #161)
#740 := (forall (vars (?v0 Int)) (:pat #739) #167)
#172 := (forall (vars (?v0 Int)) #167)
#743 := (iff #172 #740)
#741 := (iff #167 #167)
#742 := [refl]: #741
#744 := [quant-intro #742]: #743
#248 := (~ #172 #172)
#250 := (~ #167 #167)
#247 := [refl]: #250
#220 := [nnf-pos #247]: #248
#35 := (= #34 #31)
#32 := (<= 0::Int #31)
#36 := (implies #32 #35)
#37 := (forall (vars (?v0 Int)) #36)
#175 := (iff #37 #172)
#149 := (not #32)
#150 := (or #149 #142)
#155 := (forall (vars (?v0 Int)) #150)
#173 := (iff #155 #172)
#170 := (iff #150 #167)
#164 := (or #161 #142)
#168 := (iff #164 #167)
#169 := [rewrite]: #168
#165 := (iff #150 #164)
#162 := (iff #149 #161)
#158 := (iff #32 #159)
#160 := [rewrite]: #158
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#171 := [trans #166 #169]: #170
#174 := [quant-intro #171]: #173
#156 := (iff #37 #155)
#153 := (iff #36 #150)
#146 := (implies #32 #142)
#151 := (iff #146 #150)
#152 := [rewrite]: #151
#147 := (iff #36 #146)
#144 := (iff #35 #142)
#145 := [rewrite]: #144
#148 := [monotonicity #145]: #147
#154 := [trans #148 #152]: #153
#157 := [quant-intro #154]: #156
#176 := [trans #157 #174]: #175
#141 := [asserted]: #37
#177 := [mp #141 #176]: #172
#221 := [mp~ #177 #220]: #172
#745 := [mp #221 #744]: #740
#721 := (not #740)
#381 := (or #721 #719 #729)
#408 := (>= #12 0::Int)
#405 := (not #408)
#723 := (= #12 #14)
#725 := (or #723 #405)
#722 := (or #721 #725)
#708 := (iff #722 #381)
#706 := (or #721 #720)
#371 := (iff #706 #381)
#372 := [rewrite]: #371
#369 := (iff #722 #706)
#380 := (iff #725 #720)
#724 := (iff #405 #729)
#727 := (iff #408 #726)
#728 := [rewrite]: #727
#730 := [monotonicity #728]: #724
#393 := (iff #723 #719)
#394 := [rewrite]: #393
#385 := [monotonicity #394 #730]: #380
#370 := [monotonicity #385]: #369
#709 := [trans #370 #372]: #708
#365 := [quant-inst #12]: #722
#710 := [mp #365 #709]: #381
#640 := [unit-resolution #710 #745]: #720
#641 := [unit-resolution #640 #639]: #719
#642 := (not #719)
#638 := (or #642 #711)
#643 := [th-lemma arith triangle-eq]: #638
#629 := [unit-resolution #643 #641]: #711
[th-lemma arith farkas 1 -1 -1 1 #651 #131 #629 #656]: false
unsat
f69a4ae74391a6ea3d0fb4562d0b150f22df9f42 418 0
#2 := false
decl f4 :: (-> S2 Int)
decl f3 :: (-> Int S2)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#13 := 2::Int
#65 := (* 2::Int #9)
#15 := 3::Int
#71 := (+ 3::Int #65)
#76 := (f3 #71)
#620 := (f4 #76)
#10 := 1::Int
#59 := (+ 1::Int #9)
#62 := (f3 #59)
#317 := (f4 #62)
#421 := (= #317 #620)
#249 := (= #62 #76)
#27 := 0::Int
#81 := (f3 0::Int)
#336 := (= #76 #81)
#327 := (not #336)
#596 := (= #620 0::Int)
#591 := (f4 #81)
#582 := (= #591 0::Int)
#28 := (:var 0 Int)
#30 := (f3 #28)
#672 := (pattern #30)
#117 := (>= #28 0::Int)
#118 := (not #117)
#31 := (f4 #30)
#99 := (= #28 #31)
#124 := (or #99 #118)
#673 := (forall (vars (?v0 Int)) (:pat #672) #124)
#129 := (forall (vars (?v0 Int)) #124)
#676 := (iff #129 #673)
#674 := (iff #124 #124)
#675 := [refl]: #674
#677 := [quant-intro #675]: #676
#181 := (~ #129 #129)
#180 := (~ #124 #124)
#177 := [refl]: #180
#182 := [nnf-pos #177]: #181
#32 := (= #31 #28)
#29 := (<= 0::Int #28)
#33 := (implies #29 #32)
#34 := (forall (vars (?v0 Int)) #33)
#132 := (iff #34 #129)
#106 := (not #29)
#107 := (or #106 #99)
#112 := (forall (vars (?v0 Int)) #107)
#130 := (iff #112 #129)
#127 := (iff #107 #124)
#121 := (or #118 #99)
#125 := (iff #121 #124)
#126 := [rewrite]: #125
#122 := (iff #107 #121)
#119 := (iff #106 #118)
#115 := (iff #29 #117)
#116 := [rewrite]: #115
#120 := [monotonicity #116]: #119
#123 := [monotonicity #120]: #122
#128 := [trans #123 #126]: #127
#131 := [quant-intro #128]: #130
#113 := (iff #34 #112)
#110 := (iff #33 #107)
#103 := (implies #29 #99)
#108 := (iff #103 #107)
#109 := [rewrite]: #108
#104 := (iff #33 #103)
#101 := (iff #32 #99)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#111 := [trans #105 #109]: #110
#114 := [quant-intro #111]: #113
#133 := [trans #114 #131]: #132
#98 := [asserted]: #34
#134 := [mp #98 #133]: #129
#178 := [mp~ #134 #182]: #129
#678 := [mp #178 #677]: #673
#647 := (not #673)
#564 := (or #647 #582)
#589 := (>= 0::Int 0::Int)
#590 := (not #589)
#587 := (= 0::Int #591)
#592 := (or #587 #590)
#568 := (or #647 #592)
#549 := (iff #568 #564)
#552 := (iff #564 #564)
#553 := [rewrite]: #552
#566 := (iff #592 #582)
#571 := (or #582 false)
#563 := (iff #571 #582)
#565 := [rewrite]: #563
#576 := (iff #592 #571)
#574 := (iff #590 false)
#1 := true
#585 := (not true)
#572 := (iff #585 false)
#573 := [rewrite]: #572
#569 := (iff #590 #585)
#584 := (iff #589 true)
#578 := [rewrite]: #584
#570 := [monotonicity #578]: #569
#575 := [trans #570 #573]: #574
#581 := (iff #587 #582)
#583 := [rewrite]: #581
#562 := [monotonicity #583 #575]: #576
#567 := [trans #562 #565]: #566
#551 := [monotonicity #567]: #549
#554 := [trans #551 #553]: #549
#548 := [quant-inst #27]: #568
#555 := [mp #548 #554]: #564
#443 := [unit-resolution #555 #678]: #582
#433 := (= #620 #591)
#461 := [hypothesis]: #336
#434 := [monotonicity #461]: #433
#436 := [trans #434 #443]: #596
#457 := (not #596)
#577 := (<= #620 0::Int)
#451 := (not #577)
#655 := -1::Int
#304 := (>= #9 -1::Int)
#540 := (>= #9 0::Int)
#510 := (= #9 0::Int)
#660 := (f3 #9)
#542 := (f4 #660)
#543 := (= #542 0::Int)
#484 := (not #540)
#491 := [hypothesis]: #484
#545 := (or #540 #543)
#36 := (= #31 0::Int)
#165 := (or #36 #117)
#679 := (forall (vars (?v0 Int)) (:pat #672) #165)
#170 := (forall (vars (?v0 Int)) #165)
#682 := (iff #170 #679)
#680 := (iff #165 #165)
#681 := [refl]: #680
#683 := [quant-intro #681]: #682
#183 := (~ #170 #170)
#191 := (~ #165 #165)
#192 := [refl]: #191
#184 := [nnf-pos #192]: #183
#35 := (< #28 0::Int)
#37 := (implies #35 #36)
#38 := (forall (vars (?v0 Int)) #37)
#173 := (iff #38 #170)
#136 := (= 0::Int #31)
#142 := (not #35)
#143 := (or #142 #136)
#148 := (forall (vars (?v0 Int)) #143)
#171 := (iff #148 #170)
#168 := (iff #143 #165)
#162 := (or #117 #36)
#166 := (iff #162 #165)
#167 := [rewrite]: #166
#163 := (iff #143 #162)
#160 := (iff #136 #36)
#161 := [rewrite]: #160
#158 := (iff #142 #117)
#153 := (not #118)
#156 := (iff #153 #117)
#157 := [rewrite]: #156
#154 := (iff #142 #153)
#151 := (iff #35 #118)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#159 := [trans #155 #157]: #158
#164 := [monotonicity #159 #161]: #163
#169 := [trans #164 #167]: #168
#172 := [quant-intro #169]: #171
#149 := (iff #38 #148)
#146 := (iff #37 #143)
#139 := (implies #35 #136)
#144 := (iff #139 #143)
#145 := [rewrite]: #144
#140 := (iff #37 #139)
#137 := (iff #36 #136)
#138 := [rewrite]: #137
#141 := [monotonicity #138]: #140
#147 := [trans #141 #145]: #146
#150 := [quant-intro #147]: #149
#174 := [trans #150 #172]: #173
#135 := [asserted]: #38
#175 := [mp #135 #174]: #170
#193 := [mp~ #175 #184]: #170
#684 := [mp #193 #683]: #679
#631 := (not #679)
#547 := (or #631 #540 #543)
#544 := (or #543 #540)
#533 := (or #631 #544)
#537 := (iff #533 #547)
#530 := (or #631 #545)
#535 := (iff #530 #547)
#536 := [rewrite]: #535
#531 := (iff #533 #530)
#546 := (iff #544 #545)
#541 := [rewrite]: #546
#534 := [monotonicity #541]: #531
#532 := [trans #534 #536]: #537
#529 := [quant-inst #9]: #533
#538 := [mp #529 #532]: #547
#450 := [unit-resolution #538 #684]: #545
#481 := [unit-resolution #450 #491]: #543
#485 := (= #9 #542)
#661 := (= f5 #660)
#22 := (:var 0 S2)
#23 := (f4 #22)
#664 := (pattern #23)
#24 := (f3 #23)
#91 := (= #22 #24)
#665 := (forall (vars (?v0 S2)) (:pat #664) #91)
#95 := (forall (vars (?v0 S2)) #91)
#666 := (iff #95 #665)
#668 := (iff #665 #665)
#669 := [rewrite]: #668
#667 := [rewrite]: #666
#670 := [trans #667 #669]: #666
#189 := (~ #95 #95)
#187 := (~ #91 #91)
#188 := [refl]: #187
#190 := [nnf-pos #188]: #189
#25 := (= #24 #22)
#26 := (forall (vars (?v0 S2)) #25)
#96 := (iff #26 #95)
#93 := (iff #25 #91)
#94 := [rewrite]: #93
#97 := [quant-intro #94]: #96
#90 := [asserted]: #26
#100 := [mp #90 #97]: #95
#179 := [mp~ #100 #190]: #95
#671 := [mp #179 #670]: #665
#663 := (not #665)
#653 := (or #663 #661)
#312 := [quant-inst #8]: #653
#483 := [unit-resolution #312 #671]: #661
#492 := [monotonicity #483]: #485
#494 := [trans #492 #481]: #510
#495 := (not #510)
#496 := (or #495 #540)
#506 := [th-lemma arith triangle-eq]: #496
#486 := [unit-resolution #506 #491 #494]: false
#507 := [lemma #486]: #540
#474 := (or #484 #304)
#475 := [th-lemma arith farkas 1 1]: #474
#441 := [unit-resolution #475 #507]: #304
#623 := -3::Int
#617 := (* -1::Int #620)
#622 := (+ #65 #617)
#489 := (<= #622 -3::Int)
#618 := (= #622 -3::Int)
#643 := (not #304)
#607 := (or #643 #618)
#444 := (or #647 #643 #618)
#630 := (>= #71 0::Int)
#619 := (not #630)
#621 := (= #71 #620)
#616 := (or #621 #619)
#446 := (or #647 #616)
#605 := (iff #446 #444)
#600 := (or #647 #607)
#604 := (iff #600 #444)
#602 := [rewrite]: #604
#601 := (iff #446 #600)
#608 := (iff #616 #607)
#611 := (or #618 #643)
#613 := (iff #611 #607)
#614 := [rewrite]: #613
#612 := (iff #616 #611)
#609 := (iff #619 #643)
#466 := (iff #630 #304)
#467 := [rewrite]: #466
#610 := [monotonicity #467]: #609
#624 := (iff #621 #618)
#465 := [rewrite]: #624
#606 := [monotonicity #465 #610]: #612
#615 := [trans #606 #614]: #608
#603 := [monotonicity #615]: #601
#487 := [trans #603 #602]: #605
#447 := [quant-inst #71]: #446
#488 := [mp #447 #487]: #444
#518 := [unit-resolution #488 #678]: #607
#442 := [unit-resolution #518 #441]: #618
#524 := (not #618)
#520 := (or #524 #489)
#521 := [th-lemma arith triangle-eq]: #520
#449 := [unit-resolution #521 #442]: #489
#452 := (not #489)
#453 := (or #451 #452 #643)
#455 := [th-lemma arith assign-bounds 1 2]: #453
#456 := [unit-resolution #455 #449 #441]: #451
#458 := (or #457 #577)
#459 := [th-lemma arith triangle-eq]: #458
#460 := [unit-resolution #459 #456]: #457
#437 := [unit-resolution #460 #436]: false
#438 := [lemma #437]: #327
#250 := (= #62 #81)
#335 := (not #250)
#256 := (= #317 0::Int)
#424 := (= #317 #591)
#418 := [hypothesis]: #250
#420 := [monotonicity #418]: #424
#425 := [trans #420 #443]: #256
#428 := (not #256)
#629 := (<= #317 0::Int)
#435 := (not #629)
#297 := (* -1::Int #317)
#639 := (+ #9 #297)
#362 := (<= #639 -1::Int)
#301 := (= #639 -1::Int)
#640 := (or #301 #643)
#649 := (or #647 #301 #643)
#662 := (>= #59 0::Int)
#657 := (not #662)
#654 := (= #59 #317)
#313 := (or #654 #657)
#288 := (or #647 #313)
#345 := (iff #288 #649)
#650 := (or #647 #640)
#637 := (iff #650 #649)
#638 := [rewrite]: #637
#648 := (iff #288 #650)
#646 := (iff #313 #640)
#644 := (iff #657 #643)
#641 := (iff #662 #304)
#642 := [rewrite]: #641
#645 := [monotonicity #642]: #644
#302 := (iff #654 #301)
#303 := [rewrite]: #302
#283 := [monotonicity #303 #645]: #646
#651 := [monotonicity #283]: #648
#360 := [trans #651 #638]: #345
#289 := [quant-inst #59]: #288
#361 := [mp #289 #360]: #649
#525 := [unit-resolution #361 #678]: #640
#431 := [unit-resolution #525 #441]: #301
#527 := (not #301)
#432 := (or #527 #362)
#280 := [th-lemma arith triangle-eq]: #432
#439 := [unit-resolution #280 #431]: #362
#440 := (not #362)
#419 := (or #435 #440 #484)
#422 := [th-lemma arith assign-bounds 1 -1]: #419
#426 := [unit-resolution #422 #439 #507]: #435
#429 := (or #428 #629)
#427 := [th-lemma arith triangle-eq]: #429
#430 := [unit-resolution #427 #426]: #428
#415 := [unit-resolution #430 #425]: false
#405 := [lemma #415]: #335
#408 := (or #249 #250 #336)
#334 := (not #249)
#338 := (and #334 #335 #327)
#339 := (not #338)
#84 := (distinct #62 #76 #81)
#87 := (not #84)
#18 := (- #9 #9)
#19 := (f3 #18)
#14 := (* #9 2::Int)
#16 := (+ #14 3::Int)
#17 := (f3 #16)
#11 := (+ #9 1::Int)
#12 := (f3 #11)
#20 := (distinct #12 #17 #19)
#21 := (not #20)
#88 := (iff #21 #87)
#85 := (iff #20 #84)
#82 := (= #19 #81)
#79 := (= #18 0::Int)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#77 := (= #17 #76)
#74 := (= #16 #71)
#68 := (+ #65 3::Int)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #16 #68)
#66 := (= #14 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#63 := (= #12 #62)
#60 := (= #11 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#86 := [monotonicity #64 #78 #83]: #85
#89 := [monotonicity #86]: #88
#58 := [asserted]: #21
#92 := [mp #58 #89]: #87
#326 := (or #84 #339)
#659 := [def-axiom]: #326
#407 := [unit-resolution #659 #92]: #339
#314 := (or #338 #249 #250 #336)
#445 := [def-axiom]: #314
#411 := [unit-resolution #445 #407]: #408
#412 := [unit-resolution #411 #405 #438]: #249
#416 := [monotonicity #412]: #421
#512 := (+ #317 #617)
#406 := (>= #512 0::Int)
#490 := (not #406)
#514 := (or #643 #490)
#517 := [hypothesis]: #304
#519 := [unit-resolution #518 #517]: #618
#522 := [unit-resolution #521 #519]: #489
#363 := (>= #639 -1::Int)
#526 := [unit-resolution #525 #517]: #301
#523 := (or #527 #363)
#528 := [th-lemma arith triangle-eq]: #523
#508 := [unit-resolution #528 #526]: #363
#454 := [hypothesis]: #406
#509 := [th-lemma arith farkas 1 1 -1 1 #454 #508 #522 #517]: false
#515 := [lemma #509]: #514
#409 := [unit-resolution #515 #441]: #490
#417 := (not #421)
#410 := (or #417 #406)
#413 := [th-lemma arith triangle-eq]: #410
[unit-resolution #413 #409 #416]: false
unsat
8c488c6da3be276f91a366441114266619770503 161 0
#2 := false
#9 := 0::Int
decl f5 :: Int
#8 := f5
#53 := -1::Int
#54 := (* -1::Int f5)
#77 := (>= f5 0::Int)
#84 := (ite #77 f5 #54)
#656 := (* -1::Int #84)
#653 := (+ #54 #656)
#650 := (<= #653 0::Int)
#348 := (= #54 #84)
#78 := (not #77)
#657 := (+ f5 #656)
#658 := (<= #657 0::Int)
#262 := (= f5 #84)
#659 := [hypothesis]: #77
#263 := (or #78 #262)
#349 := [def-axiom]: #263
#297 := [unit-resolution #349 #659]: #262
#660 := (not #262)
#662 := (or #660 #658)
#302 := [th-lemma arith triangle-eq]: #662
#303 := [unit-resolution #302 #297]: #658
#281 := (>= #84 0::Int)
#354 := (not #281)
decl f4 :: (-> Int S2)
#22 := (:var 0 Int)
#24 := (f4 #22)
#685 := (pattern #24)
#129 := (>= #22 0::Int)
#131 := (not #129)
decl f3 :: (-> S2 Int)
#25 := (f3 #24)
#112 := (= #22 #25)
#137 := (or #112 #131)
#686 := (forall (vars (?v0 Int)) (:pat #685) #137)
#142 := (forall (vars (?v0 Int)) #137)
#689 := (iff #142 #686)
#687 := (iff #137 #137)
#688 := [refl]: #687
#690 := [quant-intro #688]: #689
#194 := (~ #142 #142)
#193 := (~ #137 #137)
#190 := [refl]: #193
#195 := [nnf-pos #190]: #194
#26 := (= #25 #22)
#23 := (<= 0::Int #22)
#27 := (implies #23 #26)
#28 := (forall (vars (?v0 Int)) #27)
#145 := (iff #28 #142)
#119 := (not #23)
#120 := (or #119 #112)
#125 := (forall (vars (?v0 Int)) #120)
#143 := (iff #125 #142)
#140 := (iff #120 #137)
#134 := (or #131 #112)
#138 := (iff #134 #137)
#139 := [rewrite]: #138
#135 := (iff #120 #134)
#132 := (iff #119 #131)
#128 := (iff #23 #129)
#130 := [rewrite]: #128
#133 := [monotonicity #130]: #132
#136 := [monotonicity #133]: #135
#141 := [trans #136 #139]: #140
#144 := [quant-intro #141]: #143
#126 := (iff #28 #125)
#123 := (iff #27 #120)
#116 := (implies #23 #112)
#121 := (iff #116 #120)
#122 := [rewrite]: #121
#117 := (iff #27 #116)
#114 := (iff #26 #112)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#124 := [trans #118 #122]: #123
#127 := [quant-intro #124]: #126
#146 := [trans #127 #144]: #145
#111 := [asserted]: #28
#147 := [mp #111 #146]: #142
#191 := [mp~ #147 #195]: #142
#691 := [mp #191 #690]: #686
#89 := (f4 #84)
#92 := (f3 #89)
#95 := (= #84 #92)
#98 := (not #95)
#11 := (- f5)
#10 := (< f5 0::Int)
#12 := (ite #10 #11 f5)
#13 := (f4 #12)
#14 := (f3 #13)
#15 := (= #14 #12)
#16 := (not #15)
#101 := (iff #16 #98)
#57 := (ite #10 #54 f5)
#60 := (f4 #57)
#63 := (f3 #60)
#69 := (= #57 #63)
#74 := (not #69)
#99 := (iff #74 #98)
#96 := (iff #69 #95)
#93 := (= #63 #92)
#90 := (= #60 #89)
#87 := (= #57 #84)
#81 := (ite #78 #54 f5)
#85 := (= #81 #84)
#86 := [rewrite]: #85
#82 := (= #57 #81)
#79 := (iff #10 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#88 := [trans #83 #86]: #87
#91 := [monotonicity #88]: #90
#94 := [monotonicity #91]: #93
#97 := [monotonicity #88 #94]: #96
#100 := [monotonicity #97]: #99
#75 := (iff #16 #74)
#72 := (iff #15 #69)
#66 := (= #63 #57)
#70 := (iff #66 #69)
#71 := [rewrite]: #70
#67 := (iff #15 #66)
#58 := (= #12 #57)
#55 := (= #11 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#64 := (= #14 #63)
#61 := (= #13 #60)
#62 := [monotonicity #59]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65 #59]: #67
#73 := [trans #68 #71]: #72
#76 := [monotonicity #73]: #75
#102 := [trans #76 #100]: #101
#52 := [asserted]: #16
#103 := [mp #52 #102]: #98
#458 := (not #686)
#665 := (or #458 #95 #354)
#669 := (or #95 #354)
#339 := (or #458 #669)
#672 := (iff #339 #665)
#673 := [rewrite]: #672
#340 := [quant-inst #84]: #339
#674 := [mp #340 #673]: #665
#663 := [unit-resolution #674 #103 #691]: #354
#661 := [th-lemma arith farkas -1 1 1 #659 #663 #303]: false
#664 := [lemma #661]: #78
#350 := (or #77 #348)
#341 := [def-axiom]: #350
#373 := [unit-resolution #341 #664]: #348
#374 := (not #348)
#375 := (or #374 #650)
#376 := [th-lemma arith triangle-eq]: #375
#269 := [unit-resolution #376 #373]: #650
#655 := (<= #84 0::Int)
#646 := (or #655 #281)
#647 := [th-lemma arith farkas 1 1]: #646
#369 := [unit-resolution #647 #663]: #655
[th-lemma arith farkas 1 1 1 #664 #369 #269]: false
unsat
003d509bb4f4a85a0837c8f307cd3f490be4bcf1 548 0
#2 := false
#659 := -1::Int
decl f4 :: (-> S2 Int)
decl f6 :: (-> Int S2)
decl f7 :: S2
#27 := f7
#28 := (f4 f7)
#26 := 4::Int
#29 := (* 4::Int #28)
#11 := 1::Int
#122 := (+ 1::Int #29)
#125 := (f6 #122)
#521 := (f4 #125)
#660 := (* -1::Int #521)
#645 := (+ #29 #660)
#610 := (>= #645 -1::Int)
#661 := (= #645 -1::Int)
#40 := 0::Int
#630 := (>= #28 0::Int)
#608 := (= #521 0::Int)
#572 := (not #608)
#591 := (<= #521 0::Int)
#567 := (not #591)
#518 := (<= #521 1::Int)
#793 := (not #518)
decl f5 :: (-> S2 S2 S1)
#8 := (:var 0 S2)
#430 := (f5 #8 #125)
#508 := (pattern #430)
#516 := (= #8 #125)
decl f1 :: S1
#4 := f1
#515 := (= f1 #430)
#431 := (not #515)
#17 := (f6 1::Int)
#18 := (= #8 #17)
#827 := (or #18 #431 #516)
#830 := (forall (vars (?v1 S2)) (:pat #508) #827)
#831 := (not #830)
#818 := (or #518 #831)
#541 := (not #818)
decl f3 :: (-> S2 S1)
#128 := (f3 #125)
#134 := (= f1 #128)
#142 := (not #134)
#544 := (or #142 #541)
#815 := (not #544)
decl ?v1!0 :: (-> S2 S2)
#495 := (?v1!0 #125)
#833 := (= #17 #495)
#626 := (= #125 #495)
#506 := (f5 #495 #125)
#507 := (= f1 #506)
#840 := (not #507)
#493 := (or #840 #626 #833)
#494 := (not #493)
#484 := (or #134 #494 #518)
#825 := (not #484)
#812 := (or #825 #815)
#817 := (not #812)
#12 := (f4 #8)
#873 := (pattern #12)
#9 := (f3 #8)
#872 := (pattern #9)
#14 := (:var 1 S2)
#15 := (f5 #8 #14)
#845 := (pattern #15)
#75 := (= f1 #15)
#81 := (not #75)
#19 := (= #8 #14)
#103 := (or #18 #19 #81)
#846 := (forall (vars (?v1 S2)) (:pat #845) #103)
#851 := (not #846)
#99 := (<= #12 1::Int)
#854 := (or #99 #851)
#857 := (not #854)
#72 := (= f1 #9)
#297 := (not #72)
#860 := (or #297 #857)
#863 := (not #860)
#274 := (?v1!0 #8)
#318 := (= #8 #274)
#315 := (= #17 #274)
#257 := (f5 #274 #8)
#258 := (= f1 #257)
#275 := (not #258)
#324 := (or #275 #315 #318)
#329 := (not #324)
#338 := (or #72 #99 #329)
#362 := (not #338)
#866 := (or #362 #863)
#869 := (not #866)
#874 := (forall (vars (?v0 S2)) (:pat #872 #873) #869)
#106 := (forall (vars (?v1 S2)) #103)
#280 := (not #106)
#353 := (or #99 #280)
#354 := (not #353)
#355 := (or #297 #354)
#361 := (not #355)
#363 := (or #362 #361)
#364 := (not #363)
#369 := (forall (vars (?v0 S2)) #364)
#875 := (iff #369 #874)
#870 := (iff #364 #869)
#867 := (iff #363 #866)
#864 := (iff #361 #863)
#861 := (iff #355 #860)
#858 := (iff #354 #857)
#855 := (iff #353 #854)
#852 := (iff #280 #851)
#849 := (iff #106 #846)
#847 := (iff #103 #103)
#848 := [refl]: #847
#850 := [quant-intro #848]: #849
#853 := [monotonicity #850]: #852
#856 := [monotonicity #853]: #855
#859 := [monotonicity #856]: #858
#862 := [monotonicity #859]: #861
#865 := [monotonicity #862]: #864
#868 := [monotonicity #865]: #867
#871 := [monotonicity #868]: #870
#876 := [quant-intro #871]: #875
#100 := (not #99)
#109 := (and #100 #106)
#303 := (or #297 #109)
#343 := (and #303 #338)
#346 := (forall (vars (?v0 S2)) #343)
#370 := (iff #346 #369)
#367 := (iff #343 #364)
#358 := (and #355 #338)
#365 := (iff #358 #364)
#366 := [rewrite]: #365
#359 := (iff #343 #358)
#356 := (iff #303 #355)
#269 := (iff #109 #354)
#270 := [rewrite]: #269
#357 := [monotonicity #270]: #356
#360 := [monotonicity #357]: #359
#368 := [trans #360 #366]: #367
#371 := [quant-intro #368]: #370
#276 := (= #274 #8)
#277 := (= #274 #17)
#278 := (or #277 #276 #275)
#279 := (not #278)
#271 := (not #100)
#285 := (or #271 #279)
#302 := (or #72 #285)
#304 := (and #303 #302)
#307 := (forall (vars (?v0 S2)) #304)
#347 := (iff #307 #346)
#344 := (iff #304 #343)
#341 := (iff #302 #338)
#332 := (or #99 #329)
#335 := (or #72 #332)
#339 := (iff #335 #338)
#340 := [rewrite]: #339
#336 := (iff #302 #335)
#333 := (iff #285 #332)
#330 := (iff #279 #329)
#327 := (iff #278 #324)
#321 := (or #315 #318 #275)
#325 := (iff #321 #324)
#326 := [rewrite]: #325
#322 := (iff #278 #321)
#319 := (iff #276 #318)
#320 := [rewrite]: #319
#316 := (iff #277 #315)
#317 := [rewrite]: #316
#323 := [monotonicity #317 #320]: #322
#328 := [trans #323 #326]: #327
#331 := [monotonicity #328]: #330
#313 := (iff #271 #99)
#314 := [rewrite]: #313
#334 := [monotonicity #314 #331]: #333
#337 := [monotonicity #334]: #336
#342 := [trans #337 #340]: #341
#345 := [monotonicity #342]: #344
#348 := [quant-intro #345]: #347
#112 := (iff #72 #109)
#115 := (forall (vars (?v0 S2)) #112)
#308 := (~ #115 #307)
#305 := (~ #112 #304)
#295 := (~ #109 #109)
#293 := (~ #106 #106)
#291 := (~ #103 #103)
#292 := [refl]: #291
#294 := [nnf-pos #292]: #293
#289 := (~ #100 #100)
#290 := [refl]: #289
#296 := [monotonicity #290 #294]: #295
#286 := (not #109)
#287 := (~ #286 #285)
#281 := (~ #280 #279)
#282 := [sk]: #281
#272 := (~ #271 #271)
#273 := [refl]: #272
#288 := [nnf-neg #273 #282]: #287
#300 := (~ #72 #72)
#301 := [refl]: #300
#298 := (~ #297 #297)
#299 := [refl]: #298
#306 := [nnf-pos #299 #301 #288 #296]: #305
#309 := [nnf-pos #306]: #308
#20 := (or #18 #19)
#16 := (= #15 f1)
#21 := (implies #16 #20)
#22 := (forall (vars (?v1 S2)) #21)
#13 := (< 1::Int #12)
#23 := (and #13 #22)
#10 := (= #9 f1)
#24 := (iff #10 #23)
#25 := (forall (vars (?v0 S2)) #24)
#118 := (iff #25 #115)
#82 := (or #20 #81)
#87 := (forall (vars (?v1 S2)) #82)
#90 := (and #13 #87)
#93 := (iff #72 #90)
#96 := (forall (vars (?v0 S2)) #93)
#116 := (iff #96 #115)
#113 := (iff #93 #112)
#110 := (iff #90 #109)
#107 := (iff #87 #106)
#104 := (iff #82 #103)
#105 := [rewrite]: #104
#108 := [quant-intro #105]: #107
#101 := (iff #13 #100)
#102 := [rewrite]: #101
#111 := [monotonicity #102 #108]: #110
#114 := [monotonicity #111]: #113
#117 := [quant-intro #114]: #116
#97 := (iff #25 #96)
#94 := (iff #24 #93)
#91 := (iff #23 #90)
#88 := (iff #22 #87)
#85 := (iff #21 #82)
#78 := (implies #75 #20)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #21 #78)
#76 := (iff #16 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#86 := [trans #80 #84]: #85
#89 := [quant-intro #86]: #88
#92 := [monotonicity #89]: #91
#73 := (iff #10 #72)
#74 := [rewrite]: #73
#95 := [monotonicity #74 #92]: #94
#98 := [quant-intro #95]: #97
#119 := [trans #98 #117]: #118
#71 := [asserted]: #25
#120 := [mp #71 #119]: #115
#310 := [mp~ #120 #309]: #307
#311 := [mp #310 #348]: #346
#372 := [mp #311 #371]: #369
#877 := [mp #372 #876]: #874
#529 := (not #874)
#530 := (or #529 #817)
#517 := (or #18 #516 #431)
#519 := (forall (vars (?v1 S2)) (:pat #508) #517)
#520 := (not #519)
#522 := (or #518 #520)
#501 := (not #522)
#837 := (or #142 #501)
#839 := (not #837)
#841 := (or #840 #833 #626)
#842 := (not #841)
#843 := (or #134 #518 #842)
#838 := (not #843)
#844 := (or #838 #839)
#834 := (not #844)
#808 := (or #529 #834)
#523 := (iff #808 #530)
#810 := (iff #530 #530)
#807 := [rewrite]: #810
#527 := (iff #834 #817)
#816 := (iff #844 #812)
#537 := (iff #839 #815)
#437 := (iff #837 #544)
#542 := (iff #501 #541)
#819 := (iff #522 #818)
#829 := (iff #520 #831)
#469 := (iff #519 #830)
#464 := (iff #517 #827)
#828 := [rewrite]: #464
#470 := [quant-intro #828]: #469
#832 := [monotonicity #470]: #829
#526 := [monotonicity #832]: #819
#543 := [monotonicity #526]: #542
#814 := [monotonicity #543]: #437
#538 := [monotonicity #814]: #537
#826 := (iff #838 #825)
#823 := (iff #843 #484)
#820 := (or #134 #518 #494)
#485 := (iff #820 #484)
#822 := [rewrite]: #485
#482 := (iff #843 #820)
#836 := (iff #842 #494)
#498 := (iff #841 #493)
#835 := [rewrite]: #498
#478 := [monotonicity #835]: #836
#483 := [monotonicity #478]: #482
#824 := [trans #483 #822]: #823
#821 := [monotonicity #824]: #826
#813 := [monotonicity #821 #538]: #816
#528 := [monotonicity #813]: #527
#806 := [monotonicity #528]: #523
#811 := [trans #806 #807]: #523
#809 := [quant-inst #125]: #808
#800 := [mp #809 #811]: #530
#595 := [unit-resolution #800 #877]: #817
#629 := (or #812 #544)
#777 := [def-axiom]: #629
#581 := [unit-resolution #777 #595]: #544
#583 := (or #815 #541)
#153 := (>= #28 1::Int)
#157 := (or #142 #153)
#162 := (not #157)
#34 := (<= 1::Int #28)
#30 := (+ #29 1::Int)
#31 := (f6 #30)
#32 := (f3 #31)
#33 := (= #32 f1)
#35 := (implies #33 #34)
#36 := (not #35)
#165 := (iff #36 #162)
#143 := (or #34 #142)
#148 := (not #143)
#163 := (iff #148 #162)
#160 := (iff #143 #157)
#154 := (or #153 #142)
#158 := (iff #154 #157)
#159 := [rewrite]: #158
#155 := (iff #143 #154)
#151 := (iff #34 #153)
#152 := [rewrite]: #151
#156 := [monotonicity #152]: #155
#161 := [trans #156 #159]: #160
#164 := [monotonicity #161]: #163
#149 := (iff #36 #148)
#146 := (iff #35 #143)
#139 := (implies #134 #34)
#144 := (iff #139 #143)
#145 := [rewrite]: #144
#140 := (iff #35 #139)
#137 := (iff #33 #134)
#131 := (= #128 f1)
#135 := (iff #131 #134)
#136 := [rewrite]: #135
#132 := (iff #33 #131)
#129 := (= #32 #128)
#126 := (= #31 #125)
#123 := (= #30 #122)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#138 := [trans #133 #136]: #137
#141 := [monotonicity #138]: #140
#147 := [trans #141 #145]: #146
#150 := [monotonicity #147]: #149
#166 := [trans #150 #164]: #165
#121 := [asserted]: #36
#167 := [mp #121 #166]: #162
#168 := [not-or-elim #167]: #134
#786 := (or #815 #142 #541)
#668 := [def-axiom]: #786
#584 := [unit-resolution #668 #168]: #583
#582 := [unit-resolution #584 #581]: #541
#789 := (or #818 #793)
#796 := [def-axiom]: #789
#585 := [unit-resolution #796 #582]: #793
#569 := (or #567 #518)
#570 := [th-lemma arith farkas 1 1]: #569
#571 := [unit-resolution #570 #585]: #567
#573 := (or #572 #591)
#574 := [th-lemma arith triangle-eq]: #573
#575 := [unit-resolution #574 #571]: #572
#599 := (or #608 #630)
#41 := (:var 0 Int)
#43 := (f6 #41)
#885 := (pattern #43)
#197 := (>= #41 0::Int)
#44 := (f4 #43)
#49 := (= #44 0::Int)
#245 := (or #49 #197)
#892 := (forall (vars (?v0 Int)) (:pat #885) #245)
#250 := (forall (vars (?v0 Int)) #245)
#895 := (iff #250 #892)
#893 := (iff #245 #245)
#894 := [refl]: #893
#896 := [quant-intro #894]: #895
#267 := (~ #250 #250)
#350 := (~ #245 #245)
#351 := [refl]: #350
#268 := [nnf-pos #351]: #267
#48 := (< #41 0::Int)
#50 := (implies #48 #49)
#51 := (forall (vars (?v0 Int)) #50)
#253 := (iff #51 #250)
#216 := (= 0::Int #44)
#222 := (not #48)
#223 := (or #222 #216)
#228 := (forall (vars (?v0 Int)) #223)
#251 := (iff #228 #250)
#248 := (iff #223 #245)
#242 := (or #197 #49)
#246 := (iff #242 #245)
#247 := [rewrite]: #246
#243 := (iff #223 #242)
#240 := (iff #216 #49)
#241 := [rewrite]: #240
#238 := (iff #222 #197)
#198 := (not #197)
#233 := (not #198)
#236 := (iff #233 #197)
#237 := [rewrite]: #236
#234 := (iff #222 #233)
#231 := (iff #48 #198)
#232 := [rewrite]: #231
#235 := [monotonicity #232]: #234
#239 := [trans #235 #237]: #238
#244 := [monotonicity #239 #241]: #243
#249 := [trans #244 #247]: #248
#252 := [quant-intro #249]: #251
#229 := (iff #51 #228)
#226 := (iff #50 #223)
#219 := (implies #48 #216)
#224 := (iff #219 #223)
#225 := [rewrite]: #224
#220 := (iff #50 #219)
#217 := (iff #49 #216)
#218 := [rewrite]: #217
#221 := [monotonicity #218]: #220
#227 := [trans #221 #225]: #226
#230 := [quant-intro #227]: #229
#254 := [trans #230 #252]: #253
#215 := [asserted]: #51
#255 := [mp #215 #254]: #250
#352 := [mp~ #255 #268]: #250
#897 := [mp #352 #896]: #892
#605 := (not #892)
#601 := (or #605 #608 #630)
#652 := (>= #122 0::Int)
#611 := (or #608 #652)
#606 := (or #605 #611)
#597 := (iff #606 #601)
#586 := (or #605 #599)
#592 := (iff #586 #601)
#593 := [rewrite]: #592
#588 := (iff #606 #586)
#602 := (iff #611 #599)
#632 := (iff #652 #630)
#633 := [rewrite]: #632
#604 := [monotonicity #633]: #602
#589 := [monotonicity #604]: #588
#590 := [trans #589 #593]: #597
#596 := [quant-inst #122]: #606
#598 := [mp #596 #590]: #601
#576 := [unit-resolution #598 #897]: #599
#577 := [unit-resolution #576 #575]: #630
#634 := (not #630)
#641 := (or #634 #661)
#179 := (= #41 #44)
#204 := (or #179 #198)
#886 := (forall (vars (?v0 Int)) (:pat #885) #204)
#209 := (forall (vars (?v0 Int)) #204)
#889 := (iff #209 #886)
#887 := (iff #204 #204)
#888 := [refl]: #887
#890 := [quant-intro #888]: #889
#265 := (~ #209 #209)
#264 := (~ #204 #204)
#261 := [refl]: #264
#266 := [nnf-pos #261]: #265
#45 := (= #44 #41)
#42 := (<= 0::Int #41)
#46 := (implies #42 #45)
#47 := (forall (vars (?v0 Int)) #46)
#212 := (iff #47 #209)
#186 := (not #42)
#187 := (or #186 #179)
#192 := (forall (vars (?v0 Int)) #187)
#210 := (iff #192 #209)
#207 := (iff #187 #204)
#201 := (or #198 #179)
#205 := (iff #201 #204)
#206 := [rewrite]: #205
#202 := (iff #187 #201)
#199 := (iff #186 #198)
#195 := (iff #42 #197)
#196 := [rewrite]: #195
#200 := [monotonicity #196]: #199
#203 := [monotonicity #200]: #202
#208 := [trans #203 #206]: #207
#211 := [quant-intro #208]: #210
#193 := (iff #47 #192)
#190 := (iff #46 #187)
#183 := (implies #42 #179)
#188 := (iff #183 #187)
#189 := [rewrite]: #188
#184 := (iff #46 #183)
#181 := (iff #45 #179)
#182 := [rewrite]: #181
#185 := [monotonicity #182]: #184
#191 := [trans #185 #189]: #190
#194 := [quant-intro #191]: #193
#213 := [trans #194 #211]: #212
#178 := [asserted]: #47
#214 := [mp #178 #213]: #209
#262 := [mp~ #214 #266]: #209
#891 := [mp #262 #890]: #886
#614 := (not #886)
#615 := (or #614 #634 #661)
#653 := (not #652)
#657 := (= #122 #521)
#658 := (or #657 #653)
#617 := (or #614 #658)
#600 := (iff #617 #615)
#619 := (or #614 #641)
#616 := (iff #619 #615)
#621 := [rewrite]: #616
#461 := (iff #617 #619)
#612 := (iff #658 #641)
#638 := (or #661 #634)
#624 := (iff #638 #641)
#642 := [rewrite]: #624
#639 := (iff #658 #638)
#636 := (iff #653 #634)
#637 := [monotonicity #633]: #636
#622 := (iff #657 #661)
#623 := [rewrite]: #622
#640 := [monotonicity #623 #637]: #639
#613 := [trans #640 #642]: #612
#620 := [monotonicity #613]: #461
#603 := [trans #620 #621]: #600
#618 := [quant-inst #122]: #617
#607 := [mp #618 #603]: #615
#578 := [unit-resolution #607 #891]: #641
#579 := [unit-resolution #578 #577]: #661
#568 := (not #661)
#580 := (or #568 #610)
#557 := [th-lemma arith triangle-eq]: #580
#559 := [unit-resolution #557 #579]: #610
#169 := (not #153)
#170 := [not-or-elim #167]: #169
[th-lemma arith farkas -4 1 1 #170 #585 #559]: false
unsat
5a76ac61ccccc3cf413dd2cf808cc3df750b1eab 61 0
#2 := false
decl f7 :: S2
#18 := f7
decl f5 :: S2
#14 := f5
#20 := (= f5 f7)
decl f3 :: (-> S4 S2)
decl f4 :: (-> S2 S3 S4)
decl f6 :: S3
#15 := f6
#16 := (f4 f5 f6)
#17 := (f3 #16)
#19 := (= #17 f7)
#50 := (not #19)
#52 := (or #50 #20)
#55 := (not #52)
#21 := (implies #19 #20)
#22 := (not #21)
#56 := (iff #22 #55)
#53 := (iff #21 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#49 := [asserted]: #22
#60 := [mp #49 #57]: #55
#58 := [not-or-elim #60]: #19
#125 := (= f5 #17)
#9 := (:var 0 S3)
#8 := (:var 1 S2)
#10 := (f4 #8 #9)
#543 := (pattern #10)
#11 := (f3 #10)
#43 := (= #8 #11)
#544 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #543) #43)
#46 := (forall (vars (?v0 S2) (?v1 S3)) #43)
#547 := (iff #46 #544)
#545 := (iff #43 #43)
#546 := [refl]: #545
#548 := [quant-intro #546]: #547
#73 := (~ #46 #46)
#71 := (~ #43 #43)
#72 := [refl]: #71
#74 := [nnf-pos #72]: #73
#12 := (= #11 #8)
#13 := (forall (vars (?v0 S2) (?v1 S3)) #12)
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#48 := [quant-intro #45]: #47
#42 := [asserted]: #13
#51 := [mp #42 #48]: #46
#63 := [mp~ #51 #74]: #46
#549 := [mp #63 #548]: #544
#213 := (not #544)
#127 := (or #213 #125)
#214 := [quant-inst #14 #15]: #127
#212 := [unit-resolution #214 #549]: #125
#126 := [trans #212 #58]: #20
#59 := (not #20)
#61 := [not-or-elim #60]: #59
[unit-resolution #61 #126]: false
unsat
23c03a2c075c99b6dd1e5fff0e14c35c8745e586 116 0
#2 := false
decl f3 :: (-> S4 S3)
decl f12 :: S4
#31 := f12
#36 := (f3 f12)
decl f8 :: (-> S5 S3)
decl f9 :: S5
#26 := f9
#35 := (f8 f9)
#37 := (= #35 #36)
decl f4 :: (-> S2 S3 S4)
decl f10 :: S3
#27 := f10
decl f11 :: S2
#28 := f11
#32 := (f4 f11 f10)
#183 := (f3 #32)
#248 := (= #183 #36)
#600 := (= #36 #183)
#33 := (= f12 #32)
decl f6 :: (-> S3 S2 S5)
#29 := (f6 f10 f11)
#30 := (= f9 #29)
#34 := (and #30 #33)
#91 := (not #34)
#93 := (or #91 #37)
#96 := (not #93)
#38 := (implies #34 #37)
#39 := (not #38)
#97 := (iff #39 #96)
#94 := (iff #38 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#90 := [asserted]: #39
#101 := [mp #90 #98]: #96
#99 := [not-or-elim #101]: #34
#102 := [and-elim #99]: #33
#590 := [monotonicity #102]: #600
#253 := [symm #590]: #248
#592 := (= #35 #183)
#270 := (= f10 #183)
#9 := (:var 0 S3)
#8 := (:var 1 S2)
#10 := (f4 #8 #9)
#601 := (pattern #10)
#11 := (f3 #10)
#60 := (= #9 #11)
#602 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #601) #60)
#63 := (forall (vars (?v0 S2) (?v1 S3)) #60)
#605 := (iff #63 #602)
#603 := (iff #60 #60)
#604 := [refl]: #603
#606 := [quant-intro #604]: #605
#124 := (~ #63 #63)
#122 := (~ #60 #60)
#123 := [refl]: #122
#125 := [nnf-pos #123]: #124
#12 := (= #11 #9)
#13 := (forall (vars (?v0 S2) (?v1 S3)) #12)
#64 := (iff #13 #63)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#65 := [quant-intro #62]: #64
#59 := [asserted]: #13
#68 := [mp #59 #65]: #63
#106 := [mp~ #68 #125]: #63
#607 := [mp #106 #606]: #602
#185 := (not #602)
#272 := (or #185 #270)
#263 := [quant-inst #28 #27]: #272
#382 := [unit-resolution #263 #607]: #270
#591 := (= #35 f10)
#277 := (f8 #29)
#599 := (= #277 f10)
#256 := (= f10 #277)
#15 := (:var 0 S2)
#14 := (:var 1 S3)
#16 := (f6 #14 #15)
#608 := (pattern #16)
#23 := (f8 #16)
#83 := (= #14 #23)
#621 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #608) #83)
#87 := (forall (vars (?v0 S3) (?v1 S2)) #83)
#624 := (iff #87 #621)
#622 := (iff #83 #83)
#623 := [refl]: #622
#625 := [quant-intro #623]: #624
#112 := (~ #87 #87)
#131 := (~ #83 #83)
#132 := [refl]: #131
#113 := [nnf-pos #132]: #112
#24 := (= #23 #14)
#25 := (forall (vars (?v0 S3) (?v1 S2)) #24)
#88 := (iff #25 #87)
#85 := (iff #24 #83)
#86 := [rewrite]: #85
#89 := [quant-intro #86]: #88
#82 := [asserted]: #25
#92 := [mp #82 #89]: #87
#133 := [mp~ #92 #113]: #87
#626 := [mp #133 #625]: #621
#261 := (not #621)
#262 := (or #261 #256)
#596 := [quant-inst #27 #28]: #262
#589 := [unit-resolution #596 #626]: #256
#594 := [symm #589]: #599
#597 := (= #35 #277)
#100 := [and-elim #99]: #30
#598 := [monotonicity #100]: #597
#249 := [trans #598 #594]: #591
#233 := [trans #249 #382]: #592
#576 := [trans #233 #253]: #37
#103 := (not #37)
#104 := [not-or-elim #101]: #103
[unit-resolution #104 #576]: false
unsat
21925946f04e63dea2f01d8f4ea201edb55fb97e 192 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f5 :: S3
#26 := f5
decl f8 :: S2
#34 := f8
#40 := (f3 f8 f5)
decl f4 :: (-> S2 S3 S4 S2)
decl f10 :: S4
#37 := f10
decl f7 :: S3
#30 := f7
decl f9 :: S4
#35 := f9
decl f6 :: S3
#27 := f6
#36 := (f4 f8 f6 f9)
#38 := (f4 #36 f7 f10)
#39 := (f3 #38 f5)
#41 := (= #39 #40)
#242 := (f3 #36 f6)
#233 := (f4 f8 f6 #242)
#571 := (f3 #233 f5)
#574 := (= #571 #40)
#579 := (= #40 #571)
#575 := (= #242 #571)
#28 := (= f5 f6)
#580 := (ite #28 #575 #579)
#12 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#11 := (f4 #8 #9 #10)
#13 := (f3 #11 #12)
#594 := (pattern #13)
#15 := (f3 #8 #12)
#119 := (= #13 #15)
#118 := (= #10 #13)
#64 := (= #9 #12)
#104 := (ite #64 #118 #119)
#595 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #594) #104)
#111 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #104)
#598 := (iff #111 #595)
#596 := (iff #104 #104)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#67 := (ite #64 #10 #15)
#70 := (= #13 #67)
#73 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #70)
#108 := (iff #73 #111)
#105 := (iff #70 #104)
#110 := [rewrite]: #105
#109 := [quant-intro #110]: #108
#114 := (~ #73 #73)
#112 := (~ #70 #70)
#113 := [refl]: #112
#115 := [nnf-pos #113]: #114
#14 := (= #12 #9)
#16 := (ite #14 #10 #15)
#17 := (= #13 #16)
#18 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #17)
#74 := (iff #18 #73)
#71 := (iff #17 #70)
#68 := (= #16 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#75 := [quant-intro #72]: #74
#63 := [asserted]: #18
#78 := [mp #63 #75]: #73
#100 := [mp~ #78 #115]: #73
#106 := [mp #100 #109]: #111
#600 := [mp #106 #599]: #595
#269 := (not #595)
#567 := (or #269 #580)
#570 := (= f6 f5)
#576 := (ite #570 #575 #574)
#568 := (or #269 #576)
#290 := (iff #568 #567)
#292 := (iff #567 #567)
#278 := [rewrite]: #292
#578 := (iff #576 #580)
#217 := (iff #574 #579)
#218 := [rewrite]: #217
#212 := (iff #570 #28)
#577 := [rewrite]: #212
#581 := [monotonicity #577 #218]: #578
#291 := [monotonicity #581]: #290
#293 := [trans #291 #278]: #290
#274 := [quant-inst #34 #27 #242 #26]: #568
#184 := [mp #274 #293]: #567
#529 := [unit-resolution #184 #600]: #580
#563 := (not #580)
#516 := (or #563 #579)
#29 := (not #28)
#31 := (= f5 f7)
#32 := (not #31)
#33 := (and #29 #32)
#85 := (not #33)
#87 := (or #85 #41)
#90 := (not #87)
#42 := (implies #33 #41)
#43 := (not #42)
#91 := (iff #43 #90)
#88 := (iff #42 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#84 := [asserted]: #43
#95 := [mp #84 #92]: #90
#93 := [not-or-elim #95]: #33
#94 := [and-elim #93]: #29
#287 := (or #563 #28 #579)
#561 := [def-axiom]: #287
#518 := [unit-resolution #561 #94]: #516
#510 := [unit-resolution #518 #529]: #579
#512 := [symm #510]: #574
#513 := (= #39 #571)
#176 := (f3 #36 f5)
#522 := (= #176 #571)
#521 := (= #571 #176)
#528 := (= #233 #36)
#434 := (= #242 f9)
#585 := (= f9 #242)
#21 := (:var 0 S4)
#20 := (:var 1 S3)
#19 := (:var 2 S2)
#22 := (f4 #19 #20 #21)
#601 := (pattern #22)
#23 := (f3 #22 #20)
#77 := (= #21 #23)
#603 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #601) #77)
#81 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #77)
#602 := (iff #81 #603)
#605 := (iff #603 #603)
#606 := [rewrite]: #605
#604 := [rewrite]: #602
#607 := [trans #604 #606]: #602
#102 := (~ #81 #81)
#101 := (~ #77 #77)
#116 := [refl]: #101
#103 := [nnf-pos #116]: #102
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #24)
#82 := (iff #25 #81)
#79 := (iff #24 #77)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#76 := [asserted]: #25
#86 := [mp #76 #83]: #81
#117 := [mp~ #86 #103]: #81
#608 := [mp #117 #607]: #603
#230 := (not #603)
#231 := (or #230 #585)
#232 := [quant-inst #34 #27 #35]: #231
#433 := [unit-resolution #232 #608]: #585
#435 := [symm #433]: #434
#525 := [monotonicity #435]: #528
#517 := [monotonicity #525]: #521
#511 := [symm #517]: #522
#263 := (= #39 #176)
#177 := (= f10 #39)
#267 := (ite #31 #177 #263)
#266 := (or #269 #267)
#264 := (= f7 f5)
#178 := (ite #264 #177 #263)
#270 := (or #269 #178)
#586 := (iff #270 #266)
#243 := (iff #266 #266)
#375 := [rewrite]: #243
#268 := (iff #178 #267)
#265 := (iff #264 #31)
#256 := [rewrite]: #265
#196 := [monotonicity #256]: #268
#588 := [monotonicity #196]: #586
#582 := [trans #588 #375]: #586
#249 := [quant-inst #36 #30 #37 #26]: #270
#254 := [mp #249 #582]: #266
#507 := [unit-resolution #254 #600]: #267
#255 := (not #267)
#509 := (or #255 #263)
#96 := [and-elim #93]: #32
#591 := (or #255 #31 #263)
#592 := [def-axiom]: #591
#519 := [unit-resolution #592 #96]: #509
#520 := [unit-resolution #519 #507]: #263
#514 := [trans #520 #511]: #513
#508 := [trans #514 #512]: #41
#97 := (not #41)
#98 := [not-or-elim #95]: #97
[unit-resolution #98 #508]: false
unsat
10c4eb4ff6b9f0c880cfc3af0cd433a1ff110114 96 0
#2 := false
decl f6 :: (-> S2 S3 S1)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#12 := (f6 f4 f5)
decl f1 :: S1
#4 := f1
#44 := (= f1 #12)
decl f3 :: (-> S2 S3 S1)
#10 := (f3 f4 f5)
#41 := (= f1 #10)
#54 := (iff #41 #44)
#93 := (not #54)
#114 := (iff #93 false)
#1 := true
#109 := (not true)
#112 := (iff #109 false)
#113 := [rewrite]: #112
#110 := (iff #93 #109)
#107 := (iff #54 true)
#102 := (iff false false)
#105 := (iff #102 true)
#106 := [rewrite]: #105
#103 := (iff #54 #102)
#100 := (iff #44 false)
#91 := (not #44)
#80 := (or #41 #44 #54)
#83 := (not #80)
#13 := (= #12 f1)
#17 := (iff #13 true)
#11 := (= #10 f1)
#16 := (iff #11 true)
#18 := (or #16 #17)
#14 := (and #13 true)
#15 := (iff #11 #14)
#19 := (or #15 #18)
#20 := (not #19)
#86 := (iff #20 #83)
#71 := (or #41 #44)
#74 := (or #54 #71)
#77 := (not #74)
#84 := (iff #77 #83)
#81 := (iff #74 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#78 := (iff #20 #77)
#75 := (iff #19 #74)
#72 := (iff #18 #71)
#69 := (iff #17 #44)
#64 := (iff #44 true)
#67 := (iff #64 #44)
#68 := [rewrite]: #67
#65 := (iff #17 #64)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#66 := [monotonicity #46]: #65
#70 := [trans #66 #68]: #69
#62 := (iff #16 #41)
#57 := (iff #41 true)
#60 := (iff #57 #41)
#61 := [rewrite]: #60
#58 := (iff #16 #57)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#59 := [monotonicity #43]: #58
#63 := [trans #59 #61]: #62
#73 := [monotonicity #63 #70]: #72
#55 := (iff #15 #54)
#52 := (iff #14 #44)
#47 := (and #44 true)
#50 := (iff #47 #44)
#51 := [rewrite]: #50
#48 := (iff #14 #47)
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #43 #53]: #55
#76 := [monotonicity #56 #73]: #75
#79 := [monotonicity #76]: #78
#87 := [trans #79 #85]: #86
#40 := [asserted]: #20
#88 := [mp #40 #87]: #83
#92 := [not-or-elim #88]: #91
#101 := [iff-false #92]: #100
#98 := (iff #41 false)
#89 := (not #41)
#90 := [not-or-elim #88]: #89
#99 := [iff-false #90]: #98
#104 := [monotonicity #99 #101]: #103
#108 := [trans #104 #106]: #107
#111 := [monotonicity #108]: #110
#115 := [trans #111 #113]: #114
#94 := [not-or-elim #88]: #93
[mp #94 #115]: false
unsat
b9360163b10b7a2a34fb792ababcc1898c7e5b1c 138 0
#2 := false
decl f3 :: (-> S2 S2)
decl f5 :: (-> Int S2)
decl f6 :: (-> Int Int)
decl f7 :: Int
#18 := f7
#19 := (f6 f7)
#20 := (f6 #19)
#21 := (f5 #20)
#22 := (f3 #21)
#70 := (= #21 #22)
#106 := (not #70)
decl f4 :: (-> S1 S1)
decl f1 :: S1
#4 := f1
#24 := (f4 f1)
#74 := (= f1 #24)
#107 := (not #74)
#579 := [hypothesis]: #107
#12 := (:var 0 S1)
#13 := (f4 #12)
#598 := (pattern #13)
#60 := (= f1 #12)
#56 := (= f1 #13)
#63 := (iff #56 #60)
#599 := (forall (vars (?v0 S1)) (:pat #598) #63)
#66 := (forall (vars (?v0 S1)) #63)
#602 := (iff #66 #599)
#600 := (iff #63 #63)
#601 := [refl]: #600
#603 := [quant-intro #601]: #602
#94 := (~ #66 #66)
#93 := (~ #63 #63)
#104 := [refl]: #93
#95 := [nnf-pos #104]: #94
#15 := (= #12 f1)
#14 := (= #13 f1)
#16 := (iff #14 #15)
#17 := (forall (vars (?v0 S1)) #16)
#67 := (iff #17 #66)
#64 := (iff #16 #63)
#61 := (iff #15 #60)
#62 := [rewrite]: #61
#58 := (iff #14 #56)
#59 := [rewrite]: #58
#65 := [monotonicity #59 #62]: #64
#68 := [quant-intro #65]: #67
#55 := [asserted]: #17
#71 := [mp #55 #68]: #66
#105 := [mp~ #71 #95]: #66
#604 := [mp #105 #603]: #599
#265 := (not #599)
#193 := (or #265 #74)
#173 := (= f1 f1)
#260 := (iff #74 #173)
#266 := (or #265 #260)
#267 := (iff #266 #193)
#583 := (iff #193 #193)
#585 := [rewrite]: #583
#253 := (iff #260 #74)
#1 := true
#77 := (iff #74 true)
#80 := (iff #77 #74)
#81 := [rewrite]: #80
#175 := (iff #260 #77)
#174 := (iff #173 true)
#261 := [rewrite]: #174
#262 := [monotonicity #261]: #175
#264 := [trans #262 #81]: #253
#246 := [monotonicity #264]: #267
#240 := [trans #246 #585]: #267
#263 := [quant-inst #4]: #266
#372 := [mp #263 #240]: #193
#251 := [unit-resolution #372 #604 #579]: false
#252 := [lemma #251]: #74
#96 := (or #106 #107)
#84 := (and #70 #74)
#87 := (not #84)
#113 := (iff #87 #96)
#97 := (not #96)
#108 := (not #97)
#111 := (iff #108 #96)
#112 := [rewrite]: #111
#109 := (iff #87 #108)
#98 := (iff #84 #97)
#99 := [rewrite]: #98
#110 := [monotonicity #99]: #109
#114 := [trans #110 #112]: #113
#25 := (= #24 f1)
#26 := (iff #25 true)
#23 := (= #22 #21)
#27 := (and #23 #26)
#28 := (not #27)
#88 := (iff #28 #87)
#85 := (iff #27 #84)
#82 := (iff #26 #74)
#78 := (iff #26 #77)
#75 := (iff #25 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#72 := (iff #23 #70)
#73 := [rewrite]: #72
#86 := [monotonicity #73 #83]: #85
#89 := [monotonicity #86]: #88
#69 := [asserted]: #28
#92 := [mp #69 #89]: #87
#115 := [mp #92 #114]: #96
#586 := [unit-resolution #115 #252]: #106
#8 := (:var 0 S2)
#9 := (f3 #8)
#591 := (pattern #9)
#49 := (= #8 #9)
#592 := (forall (vars (?v0 S2)) (:pat #591) #49)
#52 := (forall (vars (?v0 S2)) #49)
#595 := (iff #52 #592)
#593 := (iff #49 #49)
#594 := [refl]: #593
#596 := [quant-intro #594]: #595
#102 := (~ #52 #52)
#100 := (~ #49 #49)
#101 := [refl]: #100
#103 := [nnf-pos #101]: #102
#10 := (= #9 #8)
#11 := (forall (vars (?v0 S2)) #10)
#53 := (iff #11 #52)
#50 := (iff #10 #49)
#51 := [rewrite]: #50
#54 := [quant-intro #51]: #53
#48 := [asserted]: #11
#57 := [mp #48 #54]: #52
#91 := [mp~ #57 #103]: #52
#597 := [mp #91 #596]: #592
#588 := (not #592)
#589 := (or #588 #70)
#584 := [quant-inst #21]: #589
[unit-resolution #584 #597 #586]: false
unsat
81c1cc5fc7edfc96b965f4e15b374acf04ca9046 458 0
#2 := false
decl f8 :: (-> S2 S4 S4)
decl f9 :: S4
#29 := f9
decl f5 :: (-> Int S2)
#39 := 2::Int
#40 := (f5 2::Int)
#41 := (f8 #40 f9)
#13 := 1::Int
#35 := (f5 1::Int)
#42 := (f8 #35 #41)
decl f7 :: (-> S3 S4 S4)
#36 := (f8 #35 f9)
#33 := 0::Int
#34 := (f5 0::Int)
#37 := (f8 #34 #36)
decl f4 :: S3
#8 := f4
#38 := (f7 f4 #37)
#43 := (= #38 #42)
#275 := (f7 f4 #36)
decl f3 :: (-> S3 S2 S2)
#360 := (f3 f4 #34)
#276 := (f8 #360 #275)
#317 := (= #276 #42)
#316 := (= #42 #276)
#369 := (= #41 #275)
#530 := (f7 f4 f9)
#531 := (f3 f4 #35)
#624 := (f8 #531 #530)
#377 := (= #624 #275)
#621 := (= #275 #624)
#20 := (:var 0 S4)
#18 := (:var 2 S3)
#24 := (f7 #18 #20)
#19 := (:var 1 S2)
#23 := (f3 #18 #19)
#25 := (f8 #23 #24)
#691 := (pattern #25)
#21 := (f8 #19 #20)
#22 := (f7 #18 #21)
#690 := (pattern #22)
#26 := (= #22 #25)
#692 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) (:pat #690 #691) #26)
#27 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #26)
#695 := (iff #27 #692)
#693 := (iff #26 #26)
#694 := [refl]: #693
#696 := [quant-intro #694]: #695
#190 := (~ #27 #27)
#189 := (~ #26 #26)
#208 := [refl]: #189
#191 := [nnf-pos #208]: #190
#91 := [asserted]: #27
#209 := [mp~ #91 #191]: #27
#697 := [mp #209 #696]: #692
#364 := (not #692)
#614 := (or #364 #621)
#606 := [quant-inst #8 #35 #29]: #614
#414 := [unit-resolution #606 #697]: #621
#378 := [symm #414]: #377
#395 := (= #41 #624)
#618 := (= f9 #530)
#28 := (:var 0 S3)
#30 := (f7 #28 f9)
#698 := (pattern #30)
#94 := (= f9 #30)
#699 := (forall (vars (?v0 S3)) (:pat #698) #94)
#97 := (forall (vars (?v0 S3)) #94)
#702 := (iff #97 #699)
#700 := (iff #94 #94)
#701 := [refl]: #700
#703 := [quant-intro #701]: #702
#192 := (~ #97 #97)
#210 := (~ #94 #94)
#211 := [refl]: #210
#193 := [nnf-pos #211]: #192
#31 := (= #30 f9)
#32 := (forall (vars (?v0 S3)) #31)
#98 := (iff #32 #97)
#95 := (iff #31 #94)
#96 := [rewrite]: #95
#99 := [quant-intro #96]: #98
#92 := [asserted]: #32
#102 := [mp #92 #99]: #97
#212 := [mp~ #102 #193]: #97
#704 := [mp #212 #703]: #699
#609 := (not #699)
#610 := (or #609 #618)
#604 := [quant-inst #8]: #610
#415 := [unit-resolution #604 #704]: #618
#394 := (= #40 #531)
decl f6 :: (-> S2 Int)
#677 := (f6 #35)
#607 := (+ 1::Int #677)
#608 := (f5 #607)
#391 := (= #608 #531)
#611 := (= #531 #608)
#9 := (:var 0 S2)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#12 := (f6 #9)
#79 := (+ 1::Int #12)
#82 := (f5 #79)
#85 := (= #10 #82)
#88 := (forall (vars (?v0 S2)) (:pat #11) #85)
#206 := (~ #88 #88)
#204 := (~ #85 #85)
#205 := [refl]: #204
#207 := [nnf-pos #205]: #206
#14 := (+ #12 1::Int)
#15 := (f5 #14)
#16 := (= #10 #15)
#17 := (forall (vars (?v0 S2)) (:pat #11) #16)
#89 := (iff #17 #88)
#86 := (iff #16 #85)
#83 := (= #15 #82)
#80 := (= #14 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#90 := [quant-intro #87]: #89
#78 := [asserted]: #17
#93 := [mp #78 #90]: #88
#188 := [mp~ #93 #207]: #88
#616 := (not #88)
#598 := (or #616 #611)
#599 := [quant-inst #35]: #598
#416 := [unit-resolution #599 #188]: #611
#392 := [symm #416]: #391
#384 := (= #40 #608)
#554 := (f6 #608)
#445 := (f5 #554)
#452 := (= #445 #608)
#705 := (pattern #12)
#45 := (f5 #12)
#103 := (= #9 #45)
#706 := (forall (vars (?v0 S2)) (:pat #705) #103)
#106 := (forall (vars (?v0 S2)) #103)
#707 := (iff #106 #706)
#709 := (iff #706 #706)
#710 := [rewrite]: #709
#708 := [rewrite]: #707
#711 := [trans #708 #710]: #707
#194 := (~ #106 #106)
#213 := (~ #103 #103)
#214 := [refl]: #213
#195 := [nnf-pos #214]: #194
#46 := (= #45 #9)
#47 := (forall (vars (?v0 S2)) #46)
#107 := (iff #47 #106)
#104 := (iff #46 #103)
#105 := [rewrite]: #104
#108 := [quant-intro #105]: #107
#101 := [asserted]: #47
#111 := [mp #101 #108]: #106
#196 := [mp~ #111 #195]: #106
#712 := [mp #196 #711]: #706
#458 := (not #706)
#453 := (or #458 #452)
#448 := (= #608 #445)
#456 := (or #458 #448)
#447 := (iff #456 #453)
#450 := (iff #453 #453)
#446 := [rewrite]: #450
#454 := (iff #448 #452)
#455 := [rewrite]: #454
#449 := [monotonicity #455]: #447
#451 := [trans #449 #446]: #447
#444 := [quant-inst #608]: #456
#441 := [mp #444 #451]: #453
#417 := [unit-resolution #441 #712]: #452
#401 := (= #40 #445)
#400 := (= 2::Int #554)
#397 := (= #554 2::Int)
#602 := -1::Int
#540 := (* -1::Int #677)
#541 := (+ #554 #540)
#498 := (<= #541 1::Int)
#516 := (= #541 1::Int)
#542 := (>= #677 -1::Int)
#552 := (>= #677 1::Int)
#387 := (= #677 1::Int)
#48 := (:var 0 Int)
#50 := (f5 #48)
#713 := (pattern #50)
#128 := (>= #48 0::Int)
#129 := (not #128)
#51 := (f6 #50)
#110 := (= #48 #51)
#135 := (or #110 #129)
#714 := (forall (vars (?v0 Int)) (:pat #713) #135)
#140 := (forall (vars (?v0 Int)) #135)
#717 := (iff #140 #714)
#715 := (iff #135 #135)
#716 := [refl]: #715
#718 := [quant-intro #716]: #717
#198 := (~ #140 #140)
#197 := (~ #135 #135)
#215 := [refl]: #197
#199 := [nnf-pos #215]: #198
#52 := (= #51 #48)
#49 := (<= 0::Int #48)
#53 := (implies #49 #52)
#54 := (forall (vars (?v0 Int)) #53)
#143 := (iff #54 #140)
#117 := (not #49)
#118 := (or #117 #110)
#123 := (forall (vars (?v0 Int)) #118)
#141 := (iff #123 #140)
#138 := (iff #118 #135)
#132 := (or #129 #110)
#136 := (iff #132 #135)
#137 := [rewrite]: #136
#133 := (iff #118 #132)
#130 := (iff #117 #129)
#126 := (iff #49 #128)
#127 := [rewrite]: #126
#131 := [monotonicity #127]: #130
#134 := [monotonicity #131]: #133
#139 := [trans #134 #137]: #138
#142 := [quant-intro #139]: #141
#124 := (iff #54 #123)
#121 := (iff #53 #118)
#114 := (implies #49 #110)
#119 := (iff #114 #118)
#120 := [rewrite]: #119
#115 := (iff #53 #114)
#112 := (iff #52 #110)
#113 := [rewrite]: #112
#116 := [monotonicity #113]: #115
#122 := [trans #116 #120]: #121
#125 := [quant-intro #122]: #124
#144 := [trans #125 #142]: #143
#109 := [asserted]: #54
#145 := [mp #109 #144]: #140
#216 := [mp~ #145 #199]: #140
#719 := [mp #216 #718]: #714
#323 := (not #714)
#374 := (or #323 #387)
#676 := (>= 1::Int 0::Int)
#674 := (not #676)
#663 := (= 1::Int #677)
#664 := (or #663 #674)
#375 := (or #323 #664)
#654 := (iff #375 #374)
#651 := (iff #374 #374)
#655 := [rewrite]: #651
#372 := (iff #664 #387)
#383 := (or #387 false)
#658 := (iff #383 #387)
#662 := [rewrite]: #658
#657 := (iff #664 #383)
#660 := (iff #674 false)
#1 := true
#351 := (not true)
#686 := (iff #351 false)
#687 := [rewrite]: #686
#282 := (iff #674 #351)
#388 := (iff #676 true)
#389 := [rewrite]: #388
#659 := [monotonicity #389]: #282
#382 := [trans #659 #687]: #660
#371 := (iff #663 #387)
#386 := [rewrite]: #371
#661 := [monotonicity #386 #382]: #657
#373 := [trans #661 #662]: #372
#368 := [monotonicity #373]: #654
#652 := [trans #368 #655]: #654
#653 := [quant-inst #13]: #375
#656 := [mp #653 #652]: #374
#418 := [unit-resolution #656 #719]: #387
#419 := (not #387)
#420 := (or #419 #552)
#421 := [th-lemma arith triangle-eq]: #420
#422 := [unit-resolution #421 #418]: #552
#423 := (not #552)
#424 := (or #423 #542)
#413 := [th-lemma arith farkas 1 1]: #424
#425 := [unit-resolution #413 #422]: #542
#476 := (not #542)
#521 := (or #323 #516 #476)
#553 := (>= #607 0::Int)
#549 := (not #553)
#534 := (= #607 #554)
#480 := (or #534 #549)
#522 := (or #323 #480)
#495 := (iff #522 #521)
#511 := (or #516 #476)
#512 := (or #323 #511)
#489 := (iff #512 #521)
#494 := [rewrite]: #489
#533 := (iff #522 #512)
#518 := (iff #480 #511)
#507 := (iff #549 #476)
#510 := (iff #553 #542)
#517 := [rewrite]: #510
#509 := [monotonicity #517]: #507
#535 := (iff #534 #516)
#536 := [rewrite]: #535
#520 := [monotonicity #536 #509]: #518
#488 := [monotonicity #520]: #533
#496 := [trans #488 #494]: #495
#532 := [quant-inst #607]: #522
#497 := [mp #532 #496]: #521
#402 := [unit-resolution #497 #719 #425]: #516
#404 := (not #516)
#405 := (or #404 #498)
#406 := [th-lemma arith triangle-eq]: #405
#407 := [unit-resolution #406 #402]: #498
#499 := (>= #541 1::Int)
#408 := (or #404 #499)
#409 := [th-lemma arith triangle-eq]: #408
#410 := [unit-resolution #409 #402]: #499
#551 := (<= #677 1::Int)
#403 := (or #419 #551)
#411 := [th-lemma arith triangle-eq]: #403
#396 := [unit-resolution #411 #418]: #551
#398 := [th-lemma arith eq-propagate -1 -1 -1 -1 #422 #396 #410 #407]: #397
#399 := [symm #398]: #400
#390 := [monotonicity #399]: #401
#393 := [trans #390 #417]: #384
#385 := [trans #393 #392]: #394
#376 := [monotonicity #385 #415]: #395
#379 := [trans #376 #378]: #369
#310 := (= #35 #360)
#363 := (f6 #34)
#625 := (+ 1::Int #363)
#612 := (f5 #625)
#320 := (= #612 #360)
#603 := (= #360 #612)
#617 := (or #616 #603)
#613 := [quant-inst #34]: #617
#380 := [unit-resolution #613 #188]: #603
#321 := [symm #380]: #320
#319 := (= #35 #612)
#600 := (f6 #612)
#485 := (f5 #600)
#469 := (= #485 #612)
#459 := (or #458 #469)
#486 := (= #612 #485)
#460 := (or #458 #486)
#463 := (iff #460 #459)
#306 := (iff #459 #459)
#465 := [rewrite]: #306
#487 := (iff #486 #469)
#457 := [rewrite]: #487
#464 := [monotonicity #457]: #463
#461 := [trans #464 #465]: #463
#462 := [quant-inst #612]: #460
#466 := [mp #462 #461]: #459
#370 := [unit-resolution #466 #712]: #469
#337 := (= #35 #485)
#336 := (= 1::Int #600)
#334 := (= #600 1::Int)
#588 := (* -1::Int #600)
#589 := (+ #363 #588)
#559 := (<= #589 -1::Int)
#591 := (= #589 -1::Int)
#590 := (>= #363 -1::Int)
#615 := (>= #363 0::Int)
#340 := (= #363 0::Int)
#665 := (or #323 #340)
#362 := (>= 0::Int 0::Int)
#353 := (not #362)
#367 := (= 0::Int #363)
#346 := (or #367 #353)
#327 := (or #323 #346)
#329 := (iff #327 #665)
#667 := (iff #665 #665)
#668 := [rewrite]: #667
#339 := (iff #346 #340)
#689 := (or #340 false)
#343 := (iff #689 #340)
#680 := [rewrite]: #343
#679 := (iff #346 #689)
#688 := (iff #353 false)
#352 := (iff #353 #351)
#471 := (iff #362 true)
#678 := [rewrite]: #471
#685 := [monotonicity #678]: #352
#683 := [trans #685 #687]: #688
#682 := (iff #367 #340)
#684 := [rewrite]: #682
#338 := [monotonicity #684 #683]: #679
#681 := [trans #338 #680]: #339
#330 := [monotonicity #681]: #329
#669 := [trans #330 #668]: #329
#328 := [quant-inst #33]: #327
#670 := [mp #328 #669]: #665
#381 := [unit-resolution #670 #719]: #340
#347 := (not #340)
#349 := (or #347 #615)
#350 := [th-lemma arith triangle-eq]: #349
#341 := [unit-resolution #350 #381]: #615
#354 := (not #615)
#355 := (or #354 #590)
#356 := [th-lemma arith farkas 1 1]: #355
#357 := [unit-resolution #356 #341]: #590
#575 := (not #590)
#576 := (or #323 #575 #591)
#595 := (>= #625 0::Int)
#596 := (not #595)
#601 := (= #625 #600)
#597 := (or #601 #596)
#587 := (or #323 #597)
#572 := (iff #587 #576)
#582 := (or #575 #591)
#566 := (or #323 #582)
#570 := (iff #566 #576)
#571 := [rewrite]: #570
#568 := (iff #587 #566)
#585 := (iff #597 #582)
#579 := (or #591 #575)
#583 := (iff #579 #582)
#584 := [rewrite]: #583
#580 := (iff #597 #579)
#577 := (iff #596 #575)
#594 := (iff #595 #590)
#574 := [rewrite]: #594
#578 := [monotonicity #574]: #577
#592 := (iff #601 #591)
#593 := [rewrite]: #592
#581 := [monotonicity #593 #578]: #580
#586 := [trans #581 #584]: #585
#569 := [monotonicity #586]: #568
#567 := [trans #569 #571]: #572
#565 := [quant-inst #625]: #587
#573 := [mp #565 #567]: #576
#358 := [unit-resolution #573 #719 #357]: #591
#348 := (not #591)
#359 := (or #348 #559)
#342 := [th-lemma arith triangle-eq]: #359
#344 := [unit-resolution #342 #358]: #559
#555 := (>= #589 -1::Int)
#345 := (or #348 #555)
#324 := [th-lemma arith triangle-eq]: #345
#326 := [unit-resolution #324 #358]: #555
#605 := (<= #363 0::Int)
#331 := (or #347 #605)
#332 := [th-lemma arith triangle-eq]: #331
#333 := [unit-resolution #332 #381]: #605
#335 := [th-lemma arith eq-propagate -1 -1 1 1 #341 #333 #326 #344]: #334
#325 := [symm #335]: #336
#318 := [monotonicity #325]: #337
#322 := [trans #318 #370]: #319
#312 := [trans #322 #321]: #310
#311 := [monotonicity #312 #379]: #316
#292 := [symm #311]: #317
#361 := (= #38 #276)
#365 := (or #364 #361)
#366 := [quant-inst #8 #34 #36]: #365
#313 := [unit-resolution #366 #697]: #361
#296 := [trans #313 #292]: #43
#44 := (not #43)
#100 := [asserted]: #44
[unit-resolution #100 #296]: false
unsat
b18aa009c5b54d915c2c9feecd9762a9bb0c27b5 38 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (not #11)
#13 := (or #11 #12)
#14 := (not #13)
#56 := (iff #14 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #14 #51)
#49 := (iff #13 true)
#35 := (= f1 #9)
#38 := (forall (vars (?v0 S2)) #35)
#41 := (not #38)
#44 := (or #38 #41)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#36 := (iff #10 #35)
#37 := [rewrite]: #36
#40 := [quant-intro #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #40 #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#34 := [asserted]: #14
[mp #34 #57]: false
unsat
0981584a739b689bb03bd432c8c4584b486099cf 374 0
#2 := false
decl f5 :: (-> Int S2)
#26 := 6::Int
#27 := (f5 6::Int)
decl f3 :: (-> S2 S2)
decl f4 :: (-> S2 Int)
#19 := 4::Int
#20 := (f5 4::Int)
#21 := (f3 #20)
#22 := (f4 #21)
#23 := (* 4::Int #22)
#24 := (f5 #23)
#25 := (f3 #24)
#28 := (= #25 #27)
#545 := (f3 #27)
#407 := (= #545 #27)
#540 := (= #27 #545)
#589 := (f4 #27)
#65 := -10::Int
#521 := (+ -10::Int #589)
#480 := (f5 #521)
#511 := (f3 #480)
#524 := (= #511 #545)
#11 := 10::Int
#515 := (>= #589 10::Int)
#536 := (ite #515 #524 #540)
#8 := (:var 0 S2)
#9 := (f3 #8)
#695 := (pattern #9)
#10 := (f4 #8)
#694 := (pattern #10)
#215 := (= #8 #9)
#66 := (+ -10::Int #10)
#69 := (f5 #66)
#72 := (f3 #69)
#214 := (= #9 #72)
#86 := (>= #10 10::Int)
#202 := (ite #86 #214 #215)
#696 := (forall (vars (?v0 S2)) (:pat #694 #695) #202)
#217 := (forall (vars (?v0 S2)) #202)
#699 := (iff #217 #696)
#697 := (iff #202 #202)
#698 := [refl]: #697
#700 := [quant-intro #698]: #699
#91 := (ite #86 #72 #8)
#96 := (= #9 #91)
#99 := (forall (vars (?v0 S2)) #96)
#218 := (iff #99 #217)
#203 := (iff #96 #202)
#216 := [rewrite]: #203
#219 := [quant-intro #216]: #218
#206 := (~ #99 #99)
#204 := (~ #96 #96)
#205 := [refl]: #204
#207 := [nnf-pos #205]: #206
#13 := (- #10 10::Int)
#14 := (f5 #13)
#15 := (f3 #14)
#12 := (< #10 10::Int)
#16 := (ite #12 #8 #15)
#17 := (= #9 #16)
#18 := (forall (vars (?v0 S2)) #17)
#102 := (iff #18 #99)
#75 := (ite #12 #8 #72)
#78 := (= #9 #75)
#81 := (forall (vars (?v0 S2)) #78)
#100 := (iff #81 #99)
#97 := (iff #78 #96)
#94 := (= #75 #91)
#84 := (not #86)
#88 := (ite #84 #8 #72)
#92 := (= #88 #91)
#93 := [rewrite]: #92
#89 := (= #75 #88)
#85 := (iff #12 #84)
#87 := [rewrite]: #85
#90 := [monotonicity #87]: #89
#95 := [trans #90 #93]: #94
#98 := [monotonicity #95]: #97
#101 := [quant-intro #98]: #100
#82 := (iff #18 #81)
#79 := (iff #17 #78)
#76 := (= #16 #75)
#73 := (= #15 #72)
#70 := (= #14 #69)
#67 := (= #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#80 := [monotonicity #77]: #79
#83 := [quant-intro #80]: #82
#103 := [trans #83 #101]: #102
#64 := [asserted]: #18
#104 := [mp #64 #103]: #99
#192 := [mp~ #104 #207]: #99
#220 := [mp #192 #219]: #217
#701 := [mp #220 #700]: #696
#367 := (not #696)
#492 := (or #367 #536)
#513 := (= #545 #511)
#522 := (ite #515 #513 #540)
#493 := (or #367 #522)
#499 := (iff #493 #492)
#501 := (iff #492 #492)
#502 := [rewrite]: #501
#516 := (iff #522 #536)
#525 := (iff #513 #524)
#526 := [rewrite]: #525
#537 := [monotonicity #526]: #516
#500 := [monotonicity #537]: #499
#503 := [trans #500 #502]: #499
#498 := [quant-inst #27]: #493
#504 := [mp #498 #503]: #492
#489 := [unit-resolution #504 #701]: #536
#506 := (not #515)
#483 := (<= #589 6::Int)
#569 := (= #589 6::Int)
#34 := (:var 0 Int)
#36 := (f5 #34)
#709 := (pattern #36)
#33 := 0::Int
#132 := (>= #34 0::Int)
#133 := (not #132)
#37 := (f4 #36)
#114 := (= #34 #37)
#139 := (or #114 #133)
#710 := (forall (vars (?v0 Int)) (:pat #709) #139)
#144 := (forall (vars (?v0 Int)) #139)
#713 := (iff #144 #710)
#711 := (iff #139 #139)
#712 := [refl]: #711
#714 := [quant-intro #712]: #713
#198 := (~ #144 #144)
#197 := (~ #139 #139)
#209 := [refl]: #197
#199 := [nnf-pos #209]: #198
#38 := (= #37 #34)
#35 := (<= 0::Int #34)
#39 := (implies #35 #38)
#40 := (forall (vars (?v0 Int)) #39)
#147 := (iff #40 #144)
#121 := (not #35)
#122 := (or #121 #114)
#127 := (forall (vars (?v0 Int)) #122)
#145 := (iff #127 #144)
#142 := (iff #122 #139)
#136 := (or #133 #114)
#140 := (iff #136 #139)
#141 := [rewrite]: #140
#137 := (iff #122 #136)
#134 := (iff #121 #133)
#130 := (iff #35 #132)
#131 := [rewrite]: #130
#135 := [monotonicity #131]: #134
#138 := [monotonicity #135]: #137
#143 := [trans #138 #141]: #142
#146 := [quant-intro #143]: #145
#128 := (iff #40 #127)
#125 := (iff #39 #122)
#118 := (implies #35 #114)
#123 := (iff #118 #122)
#124 := [rewrite]: #123
#119 := (iff #39 #118)
#116 := (iff #38 #114)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#126 := [trans #120 #124]: #125
#129 := [quant-intro #126]: #128
#148 := [trans #129 #146]: #147
#113 := [asserted]: #40
#149 := [mp #113 #148]: #144
#210 := [mp~ #149 #199]: #144
#715 := [mp #210 #714]: #710
#642 := (not #710)
#566 := (or #642 #569)
#587 := (>= 6::Int 0::Int)
#588 := (not #587)
#590 := (= 6::Int #589)
#580 := (or #590 #588)
#567 := (or #642 #580)
#568 := (iff #567 #566)
#542 := (iff #566 #566)
#543 := [rewrite]: #542
#564 := (iff #580 #569)
#577 := (or #569 false)
#560 := (iff #577 #569)
#561 := [rewrite]: #560
#563 := (iff #580 #577)
#576 := (iff #588 false)
#1 := true
#650 := (not true)
#647 := (iff #650 false)
#652 := [rewrite]: #647
#574 := (iff #588 #650)
#572 := (iff #587 true)
#573 := [rewrite]: #572
#575 := [monotonicity #573]: #574
#571 := [trans #575 #652]: #576
#591 := (iff #590 #569)
#570 := [rewrite]: #591
#559 := [monotonicity #570 #571]: #563
#565 := [trans #559 #561]: #564
#541 := [monotonicity #565]: #568
#436 := [trans #541 #543]: #568
#562 := [quant-inst #26]: #567
#547 := [mp #562 #436]: #566
#490 := [unit-resolution #547 #715]: #569
#466 := (not #569)
#467 := (or #466 #483)
#468 := [th-lemma arith triangle-eq]: #467
#310 := [unit-resolution #468 #490]: #483
#469 := (not #483)
#465 := (or #469 #506)
#470 := [th-lemma arith farkas 1 1]: #465
#449 := [unit-resolution #470 #310]: #506
#505 := (not #536)
#509 := (or #505 #515 #540)
#494 := [def-axiom]: #509
#452 := [unit-resolution #494 #449 #489]: #540
#415 := [symm #452]: #407
#400 := (= #25 #545)
#334 := (f4 #24)
#681 := (+ -10::Int #334)
#667 := (f5 #681)
#668 := (f3 #667)
#413 := (= #668 #545)
#417 := (= #667 #27)
#427 := (= #681 6::Int)
#683 := (f4 #20)
#512 := -1::Int
#558 := (* -1::Int #683)
#538 := (+ #22 #558)
#484 := (<= #538 0::Int)
#553 := (= #22 #683)
#445 := (= #21 #20)
#693 := (= #20 #21)
#343 := (+ -10::Int #683)
#685 := (f5 #343)
#327 := (f3 #685)
#669 := (= #21 #327)
#331 := (>= #683 10::Int)
#332 := (ite #331 #669 #693)
#671 := (or #367 #332)
#672 := [quant-inst #20]: #671
#456 := [unit-resolution #672 #701]: #332
#674 := (not #331)
#630 := (<= #683 4::Int)
#656 := (= #683 4::Int)
#636 := (or #642 #656)
#392 := (>= 4::Int 0::Int)
#393 := (not #392)
#658 := (= 4::Int #683)
#372 := (or #658 #393)
#637 := (or #642 #372)
#644 := (iff #637 #636)
#645 := (iff #636 #636)
#474 := [rewrite]: #645
#640 := (iff #372 #656)
#654 := (or #656 false)
#497 := (iff #654 #656)
#639 := [rewrite]: #497
#495 := (iff #372 #654)
#653 := (iff #393 false)
#651 := (iff #393 #650)
#660 := (iff #392 true)
#649 := [rewrite]: #660
#646 := [monotonicity #649]: #651
#648 := [trans #646 #652]: #653
#655 := (iff #658 #656)
#659 := [rewrite]: #655
#496 := [monotonicity #659 #648]: #495
#641 := [trans #496 #639]: #640
#638 := [monotonicity #641]: #644
#476 := [trans #638 #474]: #644
#643 := [quant-inst #19]: #637
#477 := [mp #643 #476]: #636
#458 := [unit-resolution #477 #715]: #656
#459 := (not #656)
#457 := (or #459 #630)
#460 := [th-lemma arith triangle-eq]: #457
#448 := [unit-resolution #460 #458]: #630
#451 := (not #630)
#453 := (or #451 #674)
#454 := [th-lemma arith farkas 1 1]: #453
#450 := [unit-resolution #454 #448]: #674
#673 := (not #332)
#676 := (or #673 #331 #693)
#313 := [def-axiom]: #676
#455 := [unit-resolution #313 #450 #456]: #693
#435 := [symm #455]: #445
#437 := [monotonicity #435]: #553
#438 := (not #553)
#441 := (or #438 #484)
#442 := [th-lemma arith triangle-eq]: #441
#446 := [unit-resolution #442 #437]: #484
#539 := (>= #538 0::Int)
#439 := (or #438 #539)
#447 := [th-lemma arith triangle-eq]: #439
#440 := [unit-resolution #447 #437]: #539
#631 := (>= #683 4::Int)
#443 := (or #459 #631)
#444 := [th-lemma arith triangle-eq]: #443
#430 := [unit-resolution #444 #458]: #631
#527 := (* -1::Int #334)
#529 := (+ #23 #527)
#614 := (<= #529 0::Int)
#530 := (= #529 0::Int)
#532 := (>= #22 0::Int)
#433 := (not #539)
#432 := (not #631)
#431 := (or #532 #432 #433)
#434 := [th-lemma arith assign-bounds 1 1]: #431
#416 := [unit-resolution #434 #430 #440]: #532
#535 := (not #532)
#629 := (or #530 #535)
#610 := (or #642 #530 #535)
#528 := (>= #23 0::Int)
#623 := (not #528)
#624 := (= #23 #334)
#627 := (or #624 #623)
#607 := (or #642 #627)
#611 := (iff #607 #610)
#619 := (or #642 #629)
#617 := (iff #619 #610)
#622 := [rewrite]: #617
#620 := (iff #607 #619)
#616 := (iff #627 #629)
#628 := (iff #623 #535)
#533 := (iff #528 #532)
#534 := [rewrite]: #533
#625 := [monotonicity #534]: #628
#523 := (iff #624 #530)
#531 := [rewrite]: #523
#618 := [monotonicity #531 #625]: #616
#621 := [monotonicity #618]: #620
#612 := [trans #621 #622]: #611
#609 := [quant-inst #23]: #607
#613 := [mp #609 #612]: #610
#418 := [unit-resolution #613 #715]: #629
#419 := [unit-resolution #418 #416]: #530
#420 := (not #530)
#421 := (or #420 #614)
#422 := [th-lemma arith triangle-eq]: #421
#423 := [unit-resolution #422 #419]: #614
#608 := (>= #529 0::Int)
#424 := (or #420 #608)
#425 := [th-lemma arith triangle-eq]: #424
#426 := [unit-resolution #425 #419]: #608
#428 := [th-lemma arith eq-propagate 1 1 -4 -4 -4 -4 #426 #423 #430 #448 #440 #446]: #427
#429 := [monotonicity #428]: #417
#414 := [monotonicity #429]: #413
#375 := (= #25 #668)
#333 := (= #24 #25)
#390 := (>= #334 10::Int)
#391 := (ite #390 #375 #333)
#285 := (or #367 #391)
#663 := [quant-inst #24]: #285
#406 := [unit-resolution #663 #701]: #391
#408 := (not #614)
#409 := (or #390 #408 #432 #433)
#410 := [th-lemma arith assign-bounds 1 4 4]: #409
#411 := [unit-resolution #410 #430 #423 #440]: #390
#386 := (not #390)
#664 := (not #391)
#387 := (or #664 #386 #375)
#661 := [def-axiom]: #387
#412 := [unit-resolution #661 #411 #406]: #375
#401 := [trans #412 #414]: #400
#402 := [trans #401 #415]: #28
#29 := (not #28)
#105 := [asserted]: #29
[unit-resolution #105 #402]: false
unsat
cbddab0a93fe2901d1f5dd30bb313d7532a1c531 1 0
unsat
a7ba12fdd24a1cfe15f53475941aaf6855022b7f 76 0
#2 := false
decl f28 :: (-> Int S1)
#107 := 1::Int
#108 := (f28 1::Int)
decl f1 :: S1
#4 := f1
#382 := (= f1 #108)
#386 := (not #382)
#109 := (= #108 f1)
#110 := (not #109)
#387 := (iff #110 #386)
#384 := (iff #109 #382)
#385 := [rewrite]: #384
#388 := [monotonicity #385]: #387
#381 := [asserted]: #110
#391 := [mp #381 #388]: #386
#96 := (:var 0 Int)
#97 := (f28 #96)
#965 := (pattern #97)
#354 := (= f1 #97)
#966 := (forall (vars (?v0 Int)) (:pat #965) #354)
#378 := (forall (vars (?v0 Int)) #354)
#969 := (iff #378 #966)
#967 := (iff #354 #354)
#968 := [refl]: #967
#970 := [quant-intro #968]: #969
#407 := (~ #378 #378)
#437 := (~ #354 #354)
#438 := [refl]: #437
#408 := [nnf-pos #438]: #407
decl f3 :: (-> S2 S1)
decl f29 :: (-> Int S2 S2)
decl f30 :: S2
#99 := f30
#100 := (f29 #96 f30)
#101 := (f3 #100)
#102 := (= #101 f1)
#103 := (not #102)
#104 := (or #102 #103)
#98 := (= #97 f1)
#105 := (and #98 #104)
#106 := (forall (vars (?v0 Int)) #105)
#379 := (iff #106 #378)
#376 := (iff #105 #354)
#1 := true
#371 := (and #354 true)
#374 := (iff #371 #354)
#375 := [rewrite]: #374
#372 := (iff #105 #371)
#369 := (iff #104 true)
#358 := (= f1 #101)
#361 := (not #358)
#364 := (or #358 #361)
#367 := (iff #364 true)
#368 := [rewrite]: #367
#365 := (iff #104 #364)
#362 := (iff #103 #361)
#359 := (iff #102 #358)
#360 := [rewrite]: #359
#363 := [monotonicity #360]: #362
#366 := [monotonicity #360 #363]: #365
#370 := [trans #366 #368]: #369
#356 := (iff #98 #354)
#357 := [rewrite]: #356
#373 := [monotonicity #357 #370]: #372
#377 := [trans #373 #375]: #376
#380 := [quant-intro #377]: #379
#353 := [asserted]: #106
#383 := [mp #353 #380]: #378
#439 := [mp~ #383 #408]: #378
#971 := [mp #439 #970]: #966
#494 := (not #966)
#579 := (or #494 #382)
#580 := [quant-inst #107]: #579
[unit-resolution #580 #971 #391]: false
unsat
24f7b95c280da62e693df186e53d1c34ad016474 421 0
#2 := false
decl f19 :: (-> S8 S3)
decl f22 :: (-> S1 S8)
decl f1 :: S1
#4 := f1
#101 := (f22 f1)
#102 := (f19 #101)
decl f17 :: (-> S7 S3)
decl f21 :: (-> Int S7)
#98 := 3::Int
#99 := (f21 3::Int)
#100 := (f17 #99)
#103 := (= #100 #102)
decl f16 :: (-> S4 S3)
decl f8 :: (-> S1 S4 S4)
decl f10 :: S4
#35 := f10
#884 := (f8 f1 f10)
#886 := (f16 #884)
#640 := (= #886 #102)
#553 := (= #102 #886)
#91 := (:var 0 S1)
#94 := (f8 #91 f10)
#959 := (pattern #94)
#92 := (f22 #91)
#958 := (pattern #92)
#95 := (f16 #94)
#93 := (f19 #92)
#96 := (= #93 #95)
#960 := (forall (vars (?v0 S1)) (:pat #958 #959) #96)
#97 := (forall (vars (?v0 S1)) #96)
#963 := (iff #97 #960)
#961 := (iff #96 #96)
#962 := [refl]: #961
#964 := [quant-intro #962]: #963
#386 := (~ #97 #97)
#385 := (~ #96 #96)
#382 := [refl]: #385
#387 := [nnf-pos #382]: #386
#267 := [asserted]: #97
#383 := [mp~ #267 #387]: #97
#965 := [mp #383 #964]: #960
#888 := (not #960)
#889 := (or #888 #553)
#890 := [quant-inst #4]: #889
#658 := [unit-resolution #890 #965]: #553
#644 := [symm #658]: #640
#629 := (= #100 #886)
decl f7 :: (-> S4 S3)
#849 := (f7 #884)
#844 := (= #849 #886)
#22 := (:var 0 S4)
#71 := (f16 #22)
#943 := (pattern #71)
#25 := (f7 #22)
#942 := (pattern #25)
#247 := (= #25 #71)
#944 := (forall (vars (?v0 S4)) (:pat #942 #943) #247)
#251 := (forall (vars (?v0 S4)) #247)
#947 := (iff #251 #944)
#945 := (iff #247 #247)
#946 := [refl]: #945
#948 := [quant-intro #946]: #947
#374 := (~ #251 #251)
#415 := (~ #247 #247)
#416 := [refl]: #415
#375 := [nnf-pos #416]: #374
#72 := (= #71 #25)
#73 := (forall (vars (?v0 S4)) #72)
#252 := (iff #73 #251)
#249 := (iff #72 #247)
#250 := [rewrite]: #249
#253 := [quant-intro #250]: #252
#246 := [asserted]: #73
#256 := [mp #246 #253]: #251
#417 := [mp~ #256 #375]: #251
#949 := [mp #417 #948]: #944
#568 := (not #944)
#693 := (or #568 #844)
#694 := [quant-inst #884]: #693
#655 := [unit-resolution #694 #949]: #844
#630 := (= #100 #849)
decl f5 :: (-> Int S3)
decl f6 :: (-> S3 Int)
#36 := (f7 f10)
#846 := (f6 #36)
#15 := 1::Int
#852 := (+ 1::Int #846)
#695 := (f5 #852)
#838 := (= #695 #849)
#21 := (:var 1 S1)
#23 := (f8 #21 #22)
#899 := (pattern #23)
#26 := (f6 #25)
#164 := (+ 1::Int #26)
#169 := (f5 #164)
#24 := (f7 #23)
#172 := (= #24 #169)
#900 := (forall (vars (?v0 S1) (?v1 S4)) (:pat #899) #172)
#175 := (forall (vars (?v0 S1) (?v1 S4)) #172)
#903 := (iff #175 #900)
#901 := (iff #172 #172)
#902 := [refl]: #901
#904 := [quant-intro #902]: #903
#358 := (~ #175 #175)
#357 := (~ #172 #172)
#402 := [refl]: #357
#359 := [nnf-pos #402]: #358
#14 := 0::Int
#16 := (+ 0::Int 1::Int)
#27 := (+ #26 #16)
#28 := (f5 #27)
#29 := (= #24 #28)
#30 := (forall (vars (?v0 S1) (?v1 S4)) #29)
#176 := (iff #30 #175)
#173 := (iff #29 #172)
#170 := (= #28 #169)
#167 := (= #27 #164)
#160 := (+ #26 1::Int)
#165 := (= #160 #164)
#166 := [rewrite]: #165
#162 := (= #27 #160)
#140 := (= #16 1::Int)
#141 := [rewrite]: #140
#163 := [monotonicity #141]: #162
#168 := [trans #163 #166]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [quant-intro #174]: #176
#159 := [asserted]: #30
#180 := [mp #159 #177]: #175
#403 := [mp~ #180 #359]: #175
#905 := [mp #403 #904]: #900
#834 := (not #900)
#835 := (or #834 #838)
#837 := (= #849 #695)
#841 := (or #834 #837)
#836 := (iff #841 #835)
#672 := (iff #835 #835)
#674 := [rewrite]: #672
#839 := (iff #837 #838)
#840 := [rewrite]: #839
#843 := [monotonicity #840]: #836
#675 := [trans #843 #674]: #836
#842 := [quant-inst #4 #35]: #841
#828 := [mp #842 #675]: #835
#657 := [unit-resolution #828 #905]: #838
#642 := (= #100 #695)
decl f3 :: (-> S2 S3)
decl f9 :: S2
#31 := f9
#32 := (f3 f9)
#854 := (f6 #32)
#858 := (+ 1::Int #854)
#847 := (f5 #858)
#636 := (= #847 #695)
#648 := (= #695 #847)
#654 := (= #852 #858)
#647 := (= 1::Int #858)
#687 := (= #858 1::Int)
#831 := (<= #854 0::Int)
#829 := (= #854 0::Int)
#33 := (f5 0::Int)
#885 := (f6 #33)
#882 := (= #885 0::Int)
#84 := (:var 0 Int)
#111 := (f5 #84)
#974 := (pattern #111)
#296 := (>= #84 0::Int)
#297 := (not #296)
#112 := (f6 #111)
#278 := (= #84 #112)
#303 := (or #278 #297)
#975 := (forall (vars (?v0 Int)) (:pat #974) #303)
#308 := (forall (vars (?v0 Int)) #303)
#978 := (iff #308 #975)
#976 := (iff #303 #303)
#977 := [refl]: #976
#979 := [quant-intro #977]: #978
#392 := (~ #308 #308)
#391 := (~ #303 #303)
#378 := [refl]: #391
#393 := [nnf-pos #378]: #392
#113 := (= #112 #84)
#110 := (<= 0::Int #84)
#114 := (implies #110 #113)
#115 := (forall (vars (?v0 Int)) #114)
#311 := (iff #115 #308)
#285 := (not #110)
#286 := (or #285 #278)
#291 := (forall (vars (?v0 Int)) #286)
#309 := (iff #291 #308)
#306 := (iff #286 #303)
#300 := (or #297 #278)
#304 := (iff #300 #303)
#305 := [rewrite]: #304
#301 := (iff #286 #300)
#298 := (iff #285 #297)
#294 := (iff #110 #296)
#295 := [rewrite]: #294
#299 := [monotonicity #295]: #298
#302 := [monotonicity #299]: #301
#307 := [trans #302 #305]: #306
#310 := [quant-intro #307]: #309
#292 := (iff #115 #291)
#289 := (iff #114 #286)
#282 := (implies #110 #278)
#287 := (iff #282 #286)
#288 := [rewrite]: #287
#283 := (iff #114 #282)
#280 := (iff #113 #278)
#281 := [rewrite]: #280
#284 := [monotonicity #281]: #283
#290 := [trans #284 #288]: #289
#293 := [quant-intro #290]: #292
#312 := [trans #293 #310]: #311
#277 := [asserted]: #115
#313 := [mp #277 #312]: #308
#379 := [mp~ #313 #393]: #308
#980 := [mp #379 #979]: #975
#875 := (not #975)
#877 := (or #875 #882)
#554 := (>= 0::Int 0::Int)
#887 := (not #554)
#891 := (= 0::Int #885)
#881 := (or #891 #887)
#516 := (or #875 #881)
#878 := (iff #516 #877)
#879 := (iff #877 #877)
#865 := [rewrite]: #879
#874 := (iff #881 #882)
#870 := (or #882 false)
#873 := (iff #870 #882)
#868 := [rewrite]: #873
#871 := (iff #881 #870)
#532 := (iff #887 false)
#1 := true
#525 := (not true)
#530 := (iff #525 false)
#531 := [rewrite]: #530
#867 := (iff #887 #525)
#541 := (iff #554 true)
#883 := [rewrite]: #541
#529 := [monotonicity #883]: #867
#869 := [trans #529 #531]: #532
#540 := (iff #891 #882)
#545 := [rewrite]: #540
#872 := [monotonicity #545 #869]: #871
#511 := [trans #872 #868]: #874
#876 := [monotonicity #511]: #878
#866 := [trans #876 #865]: #878
#517 := [quant-inst #14]: #516
#573 := [mp #517 #866]: #877
#707 := [unit-resolution #573 #980]: #882
#669 := (= #854 #885)
#34 := (= #32 #33)
#178 := [asserted]: #34
#670 := [monotonicity #178]: #669
#677 := [trans #670 #707]: #829
#679 := (not #829)
#680 := (or #679 #831)
#681 := [th-lemma arith triangle-eq]: #680
#683 := [unit-resolution #681 #677]: #831
#832 := (>= #854 0::Int)
#684 := (or #679 #832)
#685 := [th-lemma arith triangle-eq]: #684
#686 := [unit-resolution #685 #677]: #832
#688 := [th-lemma arith eq-propagate -1 -1 #686 #683]: #687
#650 := [symm #688]: #647
#663 := (= #852 1::Int)
#833 := (<= #846 0::Int)
#830 := (= #846 0::Int)
#689 := (= #846 #885)
#37 := (= #36 #33)
#181 := (= #33 #36)
#182 := (iff #37 #181)
#183 := [rewrite]: #182
#179 := [asserted]: #37
#186 := [mp #179 #183]: #181
#671 := [symm #186]: #37
#659 := [monotonicity #671]: #689
#660 := [trans #659 #707]: #830
#661 := (not #830)
#662 := (or #661 #833)
#664 := [th-lemma arith triangle-eq]: #662
#665 := [unit-resolution #664 #660]: #833
#715 := (>= #846 0::Int)
#666 := (or #661 #715)
#508 := [th-lemma arith triangle-eq]: #666
#667 := [unit-resolution #508 #660]: #715
#668 := [th-lemma arith eq-propagate -1 -1 #667 #665]: #663
#656 := [trans #668 #650]: #654
#653 := [monotonicity #656]: #648
#639 := [symm #653]: #636
#638 := (= #100 #847)
decl f4 :: (-> Int S2 S2)
#563 := (f4 3::Int f9)
#585 := (f3 #563)
#848 := (= #585 #847)
#9 := (:var 0 S2)
#8 := (:var 1 Int)
#10 := (f4 #8 #9)
#892 := (pattern #10)
#12 := (f3 #9)
#13 := (f6 #12)
#145 := (+ 1::Int #13)
#150 := (f5 #145)
#11 := (f3 #10)
#153 := (= #11 #150)
#893 := (forall (vars (?v0 Int) (?v1 S2)) (:pat #892) #153)
#156 := (forall (vars (?v0 Int) (?v1 S2)) #153)
#896 := (iff #156 #893)
#894 := (iff #153 #153)
#895 := [refl]: #894
#897 := [quant-intro #895]: #896
#400 := (~ #156 #156)
#398 := (~ #153 #153)
#399 := [refl]: #398
#401 := [nnf-pos #399]: #400
#17 := (+ #13 #16)
#18 := (f5 #17)
#19 := (= #11 #18)
#20 := (forall (vars (?v0 Int) (?v1 S2)) #19)
#157 := (iff #20 #156)
#154 := (iff #19 #153)
#151 := (= #18 #150)
#148 := (= #17 #145)
#142 := (+ #13 1::Int)
#146 := (= #142 #145)
#147 := [rewrite]: #146
#143 := (= #17 #142)
#144 := [monotonicity #141]: #143
#149 := [trans #144 #147]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#158 := [quant-intro #155]: #157
#139 := [asserted]: #20
#161 := [mp #139 #158]: #156
#356 := [mp~ #161 #401]: #156
#898 := [mp #356 #897]: #893
#845 := (not #893)
#850 := (or #845 #848)
#851 := [quant-inst #98 #31]: #850
#706 := [unit-resolution #851 #898]: #848
#637 := (= #100 #585)
decl f15 :: (-> S2 S3)
#567 := (f15 #563)
#863 := (= #567 #585)
#68 := (f15 #9)
#935 := (pattern #68)
#934 := (pattern #12)
#239 := (= #12 #68)
#936 := (forall (vars (?v0 S2)) (:pat #934 #935) #239)
#243 := (forall (vars (?v0 S2)) #239)
#939 := (iff #243 #936)
#937 := (iff #239 #239)
#938 := [refl]: #937
#940 := [quant-intro #938]: #939
#372 := (~ #243 #243)
#412 := (~ #239 #239)
#413 := [refl]: #412
#373 := [nnf-pos #413]: #372
#69 := (= #68 #12)
#70 := (forall (vars (?v0 S2)) #69)
#244 := (iff #70 #243)
#241 := (iff #69 #239)
#242 := [rewrite]: #241
#245 := [quant-intro #242]: #244
#238 := [asserted]: #70
#248 := [mp #238 #245]: #243
#414 := [mp~ #248 #373]: #243
#941 := [mp #414 #940]: #936
#564 := (not #936)
#574 := (or #564 #863)
#859 := (= #585 #567)
#575 := (or #564 #859)
#577 := (iff #575 #574)
#856 := (iff #574 #574)
#570 := [rewrite]: #856
#860 := (iff #859 #863)
#864 := [rewrite]: #860
#855 := [monotonicity #864]: #577
#853 := [trans #855 #570]: #577
#576 := [quant-inst #563]: #575
#857 := [mp #576 #853]: #574
#705 := [unit-resolution #857 #941]: #863
#548 := (= #100 #567)
#87 := (f4 #84 f9)
#951 := (pattern #87)
#85 := (f21 #84)
#950 := (pattern #85)
#88 := (f15 #87)
#86 := (f17 #85)
#89 := (= #86 #88)
#952 := (forall (vars (?v0 Int)) (:pat #950 #951) #89)
#90 := (forall (vars (?v0 Int)) #89)
#955 := (iff #90 #952)
#953 := (iff #89 #89)
#954 := [refl]: #953
#956 := [quant-intro #954]: #955
#376 := (~ #90 #90)
#418 := (~ #89 #89)
#419 := [refl]: #418
#377 := [nnf-pos #419]: #376
#266 := [asserted]: #90
#384 := [mp~ #266 #377]: #90
#957 := [mp #384 #956]: #952
#542 := (not #952)
#673 := (or #542 #548)
#880 := [quant-inst #98]: #673
#646 := [unit-resolution #880 #957]: #548
#645 := [trans #646 #705]: #637
#641 := [trans #645 #706]: #638
#628 := [trans #641 #639]: #642
#631 := [trans #628 #657]: #630
#632 := [trans #631 #655]: #629
#614 := [trans #632 #644]: #103
#104 := (not #103)
#269 := [asserted]: #104
[unit-resolution #269 #614]: false
unsat
b5935b8a85a2e047200d1ea44e320dc9dcfbbbbc 76 0
#2 := false
decl f3 :: (-> Int S1)
#118 := 1::Int
#119 := (f3 1::Int)
decl f1 :: S1
#4 := f1
#421 := (= f1 #119)
#425 := (not #421)
#120 := (= #119 f1)
#121 := (not #120)
#426 := (iff #121 #425)
#423 := (iff #120 #421)
#424 := [rewrite]: #423
#427 := [monotonicity #424]: #426
#420 := [asserted]: #121
#430 := [mp #420 #427]: #425
#8 := (:var 0 Int)
#9 := (f3 #8)
#953 := (pattern #9)
#142 := (= f1 #9)
#954 := (forall (vars (?v0 Int)) (:pat #953) #142)
#165 := (forall (vars (?v0 Int)) #142)
#957 := (iff #165 #954)
#955 := (iff #142 #142)
#956 := [refl]: #955
#958 := [quant-intro #956]: #957
#456 := (~ #165 #165)
#454 := (~ #142 #142)
#455 := [refl]: #454
#457 := [nnf-pos #455]: #456
decl f4 :: (-> S2 S1)
decl f5 :: (-> Int S2 S2)
decl f6 :: S2
#11 := f6
#12 := (f5 #8 f6)
#13 := (f4 #12)
#14 := (= #13 f1)
#15 := (not #14)
#16 := (or #14 #15)
#10 := (= #9 f1)
#17 := (and #10 #16)
#18 := (forall (vars (?v0 Int)) #17)
#166 := (iff #18 #165)
#163 := (iff #17 #142)
#1 := true
#158 := (and #142 true)
#161 := (iff #158 #142)
#162 := [rewrite]: #161
#159 := (iff #17 #158)
#156 := (iff #16 true)
#145 := (= f1 #13)
#148 := (not #145)
#151 := (or #145 #148)
#154 := (iff #151 true)
#155 := [rewrite]: #154
#152 := (iff #16 #151)
#149 := (iff #15 #148)
#146 := (iff #14 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#153 := [monotonicity #147 #150]: #152
#157 := [trans #153 #155]: #156
#143 := (iff #10 #142)
#144 := [rewrite]: #143
#160 := [monotonicity #144 #157]: #159
#164 := [trans #160 #162]: #163
#167 := [quant-intro #164]: #166
#141 := [asserted]: #18
#170 := [mp #141 #167]: #165
#429 := [mp~ #170 #457]: #165
#959 := [mp #429 #958]: #954
#538 := (not #954)
#623 := (or #538 #421)
#624 := [quant-inst #118]: #623
[unit-resolution #624 #959 #430]: false
unsat
c2e9404480cb814492148c359fbbbb3b0e606571 54 0
#2 := false
#1 := true
decl f1 :: S1
#4 := f1
decl f3 :: (-> S1 S1)
decl f2 :: S1
#5 := f2
decl f4 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f4 #8)
#10 := (= #9 f1)
#11 := (exists (vars (?v0 S2)) #10)
#12 := (ite #11 f1 f2)
#13 := (f3 #12)
#14 := (= #13 f1)
#15 := (implies #14 true)
#16 := (not #15)
#69 := (iff #16 false)
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #16 #64)
#62 := (iff #15 true)
#37 := (= f1 #9)
#40 := (exists (vars (?v0 S2)) #37)
#43 := (ite #40 f1 f2)
#46 := (f3 #43)
#52 := (= f1 #46)
#57 := (implies #52 true)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #15 #57)
#55 := (iff #14 #52)
#49 := (= #46 f1)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (= #13 #46)
#44 := (= #12 #43)
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [quant-intro #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#36 := [asserted]: #16
[mp #36 #70]: false
unsat
343488aeda93da0c02f8ac1558cbc54ab37a2bb9 54 0
#2 := false
#1 := true
decl f1 :: S1
#4 := f1
decl f3 :: (-> S1 S1)
decl f2 :: S1
#5 := f2
decl f4 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f4 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (ite #11 f1 f2)
#13 := (f3 #12)
#14 := (= #13 f1)
#15 := (implies #14 true)
#16 := (not #15)
#69 := (iff #16 false)
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #16 #64)
#62 := (iff #15 true)
#37 := (= f1 #9)
#40 := (forall (vars (?v0 S2)) #37)
#43 := (ite #40 f1 f2)
#46 := (f3 #43)
#52 := (= f1 #46)
#57 := (implies #52 true)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #15 #57)
#55 := (iff #14 #52)
#49 := (= #46 f1)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (= #13 #46)
#44 := (= #12 #43)
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [quant-intro #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#36 := [asserted]: #16
[mp #36 #70]: false
unsat
1953a39a3cc38daf2fde4846aa1d5cbc2ff95785 60 0
#2 := false
#8 := 0::Int
decl ?v1!0 :: Int
#67 := ?v1!0
#70 := (<= ?v1!0 0::Int)
#63 := (not #70)
#11 := 1::Int
#68 := (>= ?v1!0 1::Int)
#69 := (not #68)
#79 := (or #69 #63)
#82 := (not #79)
#64 := (or #63 #69)
#71 := (not #64)
#83 := (iff #71 #82)
#80 := (iff #64 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#9 := (:var 0 Int)
#48 := (>= #9 1::Int)
#46 := (not #48)
#42 := (<= #9 0::Int)
#43 := (not #42)
#50 := (or #43 #46)
#53 := (forall (vars (?v1 Int)) #50)
#56 := (not #53)
#72 := (~ #56 #71)
#73 := [sk]: #72
#12 := (< #9 1::Int)
#10 := (< 0::Int #9)
#13 := (or #10 #12)
#14 := (forall (vars (?v0 Int) (?v1 Int)) #13)
#15 := (not #14)
#59 := (iff #15 #56)
#36 := (forall (vars (?v1 Int)) #13)
#39 := (not #36)
#57 := (iff #39 #56)
#54 := (iff #36 #53)
#51 := (iff #13 #50)
#47 := (iff #12 #46)
#49 := [rewrite]: #47
#44 := (iff #10 #43)
#45 := [rewrite]: #44
#52 := [monotonicity #45 #49]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #55]: #57
#40 := (iff #15 #39)
#37 := (iff #14 #36)
#38 := [elim-unused]: #37
#41 := [monotonicity #38]: #40
#60 := [trans #41 #58]: #59
#35 := [asserted]: #15
#61 := [mp #35 #60]: #56
#76 := [mp~ #61 #73]: #71
#77 := [mp #76 #84]: #82
#85 := [not-or-elim #77]: #70
#78 := [not-or-elim #77]: #68
#141 := [th-lemma arith farkas 1 1]: #64
#142 := [unit-resolution #141 #78]: #63
[unit-resolution #142 #85]: false
unsat
4d18c87aa576f201e48ea20e31f11fb8675b59d4 8 0
#2 := false
#1 := true
#33 := (not true)
#63 := (iff #33 false)
#65 := [rewrite]: #63
#62 := [asserted]: #33
[mp #62 #65]: false
unsat
ad406fc43130e24f380abadc1fc8a246fab490af 145 0
#2 := false
decl f3 :: (-> S2 Int S1)
#22 := 42::Int
decl f4 :: (-> S3 Int S2)
#20 := 3::Int
decl f6 :: S3
#18 := f6
#21 := (f4 f6 3::Int)
#23 := (f3 #21 42::Int)
decl f1 :: S1
#4 := f1
#86 := (= f1 #23)
decl f5 :: S3
#8 := f5
#255 := (f4 f5 3::Int)
#246 := (f3 #255 42::Int)
#568 := (= #246 #23)
#207 := (= #23 #246)
#202 := (= #21 #255)
#558 := (= #255 #21)
#83 := (= f5 f6)
#92 := (not #83)
#93 := (or #92 #86)
#98 := (not #93)
#24 := (= #23 f1)
#19 := (= f6 f5)
#25 := (implies #19 #24)
#26 := (not #25)
#99 := (iff #26 #98)
#96 := (iff #25 #93)
#89 := (implies #83 #86)
#94 := (iff #89 #93)
#95 := [rewrite]: #94
#90 := (iff #25 #89)
#87 := (iff #24 #86)
#88 := [rewrite]: #87
#84 := (iff #19 #83)
#85 := [rewrite]: #84
#91 := [monotonicity #85 #88]: #90
#97 := [trans #91 #95]: #96
#100 := [monotonicity #97]: #99
#82 := [asserted]: #26
#103 := [mp #82 #100]: #98
#101 := [not-or-elim #103]: #83
#564 := [monotonicity #101]: #558
#565 := [symm #564]: #202
#208 := [monotonicity #565]: #207
#566 := [symm #208]: #568
#257 := (= f1 #246)
#11 := (:var 0 Int)
#9 := (:var 1 Int)
#10 := (f4 f5 #9)
#12 := (f3 #10 #11)
#13 := (pattern #12)
#64 := 0::Int
#61 := -1::Int
#62 := (* -1::Int #11)
#63 := (+ #9 #62)
#65 := (<= #63 0::Int)
#47 := (= f1 #12)
#71 := (iff #47 #65)
#76 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #13) #71)
#116 := (~ #76 #76)
#114 := (~ #71 #71)
#115 := [refl]: #114
#117 := [nnf-pos #115]: #116
#15 := (<= #9 #11)
#14 := (= #12 f1)
#16 := (iff #14 #15)
#17 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #13) #16)
#79 := (iff #17 #76)
#53 := (iff #15 #47)
#58 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #13) #53)
#77 := (iff #58 #76)
#74 := (iff #53 #71)
#68 := (iff #65 #47)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #53 #68)
#66 := (iff #15 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [quant-intro #75]: #77
#59 := (iff #17 #58)
#56 := (iff #16 #53)
#50 := (iff #47 #15)
#54 := (iff #50 #53)
#55 := [rewrite]: #54
#51 := (iff #16 #50)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#57 := [trans #52 #55]: #56
#60 := [quant-intro #57]: #59
#80 := [trans #60 #78]: #79
#46 := [asserted]: #17
#81 := [mp #46 #80]: #76
#106 := [mp~ #81 #117]: #76
#557 := (not #76)
#220 := (or #557 #257)
#168 := (* -1::Int 42::Int)
#253 := (+ 3::Int #168)
#254 := (<= #253 0::Int)
#258 := (iff #257 #254)
#221 := (or #557 #258)
#223 := (iff #221 #220)
#560 := (iff #220 #220)
#561 := [rewrite]: #560
#573 := (iff #258 #257)
#1 := true
#571 := (iff #257 true)
#572 := (iff #571 #257)
#232 := [rewrite]: #572
#231 := (iff #258 #571)
#575 := (iff #254 true)
#576 := -39::Int
#245 := (<= -39::Int 0::Int)
#579 := (iff #245 true)
#580 := [rewrite]: #579
#577 := (iff #254 #245)
#570 := (= #253 -39::Int)
#186 := -42::Int
#260 := (+ 3::Int -42::Int)
#233 := (= #260 -39::Int)
#363 := [rewrite]: #233
#239 := (= #253 #260)
#259 := (= #168 -42::Int)
#256 := [rewrite]: #259
#574 := [monotonicity #256]: #239
#244 := [trans #574 #363]: #570
#578 := [monotonicity #244]: #577
#581 := [trans #578 #580]: #575
#236 := [monotonicity #581]: #231
#216 := [trans #236 #232]: #573
#559 := [monotonicity #216]: #223
#562 := [trans #559 #561]: #223
#222 := [quant-inst #20 #22]: #221
#563 := [mp #222 #562]: #220
#567 := [unit-resolution #563 #106]: #257
#569 := [trans #567 #566]: #86
#102 := (not #86)
#104 := [not-or-elim #103]: #102
[unit-resolution #104 #569]: false
unsat
