ef3118b3c538f5cd123d726ccf13a3c2d3725bb0 8 0
#2 := false
#1 := true
#8 := (not true)
#26 := (iff #8 false)
#27 := [rewrite]: #26
#25 := [asserted]: #8
[mp #25 #27]: false
unsat
b59b2f429ffd47c407e4ef1af006540275b1a26c 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (or #9 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#30 := (= f1 f3)
#33 := (not #30)
#36 := (or #30 #33)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 #33)
#31 := (iff #9 #30)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#38 := [monotonicity #32 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
2e7e9d422d65be29e15f02c69c60971cab2c6ff5 37 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#1 := true
#10 := (and #9 true)
#11 := (iff #10 #9)
#12 := (not #11)
#52 := (iff #12 false)
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 true)
#30 := (= f1 f3)
#40 := (iff #30 #30)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#31 := (iff #9 #30)
#32 := [rewrite]: #31
#38 := (iff #10 #30)
#33 := (and #30 true)
#36 := (iff #33 #30)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39 #32]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#29 := [asserted]: #12
[mp #29 #53]: false
unsat
c09f42a4df50b3429cb0f5ddbf56d93bf0b06b7b 66 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#37 := (= f1 f4)
decl f3 :: S1
#8 := f3
#34 := (= f1 f3)
#40 := (or #34 #37)
#84 := (iff #40 false)
#79 := (or false false)
#82 := (iff #79 false)
#83 := [rewrite]: #82
#80 := (iff #40 #79)
#75 := (iff #37 false)
#66 := (not #37)
#43 := (not #34)
#49 := (and #43 #40)
#57 := (not #49)
#58 := (or #37 #57)
#63 := (not #58)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (not #9)
#12 := (or #9 #11)
#14 := (and #12 #13)
#15 := (implies #14 #11)
#16 := (not #15)
#64 := (iff #16 #63)
#61 := (iff #15 #58)
#54 := (implies #49 #37)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #15 #54)
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#52 := (iff #14 #49)
#46 := (and #40 #43)
#50 := (iff #46 #49)
#51 := [rewrite]: #50
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#45 := [monotonicity #36]: #44
#41 := (iff #12 #40)
#42 := [monotonicity #36 #39]: #41
#48 := [monotonicity #42 #45]: #47
#53 := [trans #48 #51]: #52
#56 := [monotonicity #53 #39]: #55
#62 := [trans #56 #60]: #61
#65 := [monotonicity #62]: #64
#33 := [asserted]: #16
#68 := [mp #33 #65]: #63
#67 := [not-or-elim #68]: #66
#76 := [iff-false #67]: #75
#77 := (iff #34 false)
#69 := [not-or-elim #68]: #49
#70 := [and-elim #69]: #43
#78 := [iff-false #70]: #77
#81 := [monotonicity #78 #76]: #80
#85 := [trans #81 #83]: #84
#71 := [and-elim #69]: #40
[mp #71 #85]: false
unsat
a3969d96ad7c1fdd20f7d69abeb13b18bac4be8d 1 0
unsat
8f1394900829ee257ef5682b19118d98b3c0c820 94 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
#17 := (and #9 #14)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#16 := (and #14 #11)
#18 := (or #16 #17)
#19 := (implies #9 #18)
#20 := (or #19 #9)
#12 := (and #9 #11)
#15 := (or #12 #14)
#21 := (implies #15 #20)
#22 := (not #21)
#107 := (iff #22 false)
#49 := (= f1 f5)
#40 := (= f1 f3)
#63 := (and #40 #49)
#43 := (= f1 f4)
#58 := (and #43 #49)
#66 := (or #58 #63)
#72 := (not #40)
#73 := (or #72 #66)
#81 := (or #40 #73)
#46 := (and #40 #43)
#52 := (or #46 #49)
#89 := (not #52)
#90 := (or #89 #81)
#95 := (not #90)
#105 := (iff #95 false)
#1 := true
#100 := (not true)
#103 := (iff #100 false)
#104 := [rewrite]: #103
#101 := (iff #95 #100)
#98 := (iff #90 true)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#96 := (iff #22 #95)
#93 := (iff #21 #90)
#86 := (implies #52 #81)
#91 := (iff #86 #90)
#92 := [rewrite]: #91
#87 := (iff #21 #86)
#84 := (iff #20 #81)
#78 := (or #73 #40)
#82 := (iff #78 #81)
#83 := [rewrite]: #82
#79 := (iff #20 #78)
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#76 := (iff #19 #73)
#69 := (implies #40 #66)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #19 #69)
#67 := (iff #18 #66)
#64 := (iff #17 #63)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#65 := [monotonicity #42 #51]: #64
#61 := (iff #16 #58)
#55 := (and #49 #43)
#59 := (iff #55 #58)
#60 := [rewrite]: #59
#56 := (iff #16 #55)
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#57 := [monotonicity #51 #45]: #56
#62 := [trans #57 #60]: #61
#68 := [monotonicity #62 #65]: #67
#71 := [monotonicity #42 #68]: #70
#77 := [trans #71 #75]: #76
#80 := [monotonicity #77 #42]: #79
#85 := [trans #80 #83]: #84
#53 := (iff #15 #52)
#47 := (iff #12 #46)
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#88 := [monotonicity #54 #85]: #87
#94 := [trans #88 #92]: #93
#97 := [monotonicity #94]: #96
#108 := [trans #97 #106]: #107
#39 := [asserted]: #22
[mp #39 #108]: false
unsat
41b693f504b47ef3e9345eeec00c566a4d93af04 72 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (iff #9 #9)
#11 := (iff #10 #9)
#12 := (iff #11 #9)
#13 := (iff #12 #9)
#14 := (iff #13 #9)
#15 := (iff #14 #9)
#16 := (iff #15 #9)
#17 := (iff #16 #9)
#18 := (iff #17 #9)
#19 := (not #18)
#87 := (iff #19 false)
#1 := true
#82 := (not true)
#85 := (iff #82 false)
#86 := [rewrite]: #85
#83 := (iff #19 #82)
#80 := (iff #18 true)
#37 := (= f1 f3)
#40 := (iff #37 #37)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#78 := (iff #18 #40)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#76 := (iff #17 #37)
#47 := (iff true #37)
#50 := (iff #47 #37)
#51 := [rewrite]: #50
#74 := (iff #17 #47)
#72 := (iff #16 true)
#70 := (iff #16 #40)
#68 := (iff #15 #37)
#66 := (iff #15 #47)
#64 := (iff #14 true)
#62 := (iff #14 #40)
#60 := (iff #13 #37)
#58 := (iff #13 #47)
#56 := (iff #12 true)
#54 := (iff #12 #40)
#52 := (iff #11 #37)
#48 := (iff #11 #47)
#45 := (iff #10 true)
#41 := (iff #10 #40)
#42 := [monotonicity #39 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46 #39]: #48
#53 := [trans #49 #51]: #52
#55 := [monotonicity #53 #39]: #54
#57 := [trans #55 #44]: #56
#59 := [monotonicity #57 #39]: #58
#61 := [trans #59 #51]: #60
#63 := [monotonicity #61 #39]: #62
#65 := [trans #63 #44]: #64
#67 := [monotonicity #65 #39]: #66
#69 := [trans #67 #51]: #68
#71 := [monotonicity #69 #39]: #70
#73 := [trans #71 #44]: #72
#75 := [monotonicity #73 #39]: #74
#77 := [trans #75 #51]: #76
#79 := [monotonicity #77 #39]: #78
#81 := [trans #79 #44]: #80
#84 := [monotonicity #81]: #83
#88 := [trans #84 #86]: #87
#36 := [asserted]: #19
[mp #36 #88]: false
unsat
1bb9b155bb9b619999029c3bea6bb00c7c21cd3b 234 0
#2 := false
decl f6 :: S1
#14 := f6
decl f1 :: S1
#4 := f1
#79 := (= f1 f6)
decl f5 :: S1
#12 := f5
#76 := (= f1 f5)
decl f4 :: S1
#10 := f4
#73 := (= f1 f4)
decl f3 :: S1
#8 := f3
#70 := (= f1 f3)
#91 := (or #70 #73 #76 #79)
#298 := (iff #91 false)
#293 := (or false false false false)
#296 := (iff #293 false)
#297 := [rewrite]: #296
#294 := (iff #91 #293)
#250 := (iff #79 false)
#180 := (not #79)
#186 := (or #76 #180)
#258 := (iff #186 #180)
#253 := (or false #180)
#256 := (iff #253 #180)
#257 := [rewrite]: #256
#254 := (iff #186 #253)
#251 := (iff #76 false)
#120 := (not #76)
decl f11 :: S1
#44 := f11
#45 := (= f11 f1)
#46 := (not #45)
#47 := (and #45 #46)
decl f10 :: S1
#41 := f10
#42 := (= f10 f1)
#48 := (or #42 #47)
#43 := (not #42)
#49 := (and #43 #48)
#13 := (= f5 f1)
#50 := (or #13 #49)
#51 := (not #50)
#233 := (iff #51 #120)
#231 := (iff #50 #76)
#226 := (or #76 false)
#229 := (iff #226 #76)
#230 := [rewrite]: #229
#227 := (iff #50 #226)
#224 := (iff #49 false)
#192 := (= f1 f10)
#196 := (not #192)
#219 := (and #196 #192)
#222 := (iff #219 false)
#223 := [rewrite]: #222
#220 := (iff #49 #219)
#217 := (iff #48 #192)
#212 := (or #192 false)
#215 := (iff #212 #192)
#216 := [rewrite]: #215
#213 := (iff #48 #212)
#210 := (iff #47 false)
#199 := (= f1 f11)
#202 := (not #199)
#205 := (and #199 #202)
#208 := (iff #205 false)
#209 := [rewrite]: #208
#206 := (iff #47 #205)
#203 := (iff #46 #202)
#200 := (iff #45 #199)
#201 := [rewrite]: #200
#204 := [monotonicity #201]: #203
#207 := [monotonicity #201 #204]: #206
#211 := [trans #207 #209]: #210
#194 := (iff #42 #192)
#195 := [rewrite]: #194
#214 := [monotonicity #195 #211]: #213
#218 := [trans #214 #216]: #217
#197 := (iff #43 #196)
#198 := [monotonicity #195]: #197
#221 := [monotonicity #198 #218]: #220
#225 := [trans #221 #223]: #224
#77 := (iff #13 #76)
#78 := [rewrite]: #77
#228 := [monotonicity #78 #225]: #227
#232 := [trans #228 #230]: #231
#234 := [monotonicity #232]: #233
#191 := [asserted]: #51
#237 := [mp #191 #234]: #120
#252 := [iff-false #237]: #251
#255 := [monotonicity #252]: #254
#259 := [trans #255 #257]: #258
#15 := (= f6 f1)
#38 := (or #15 false)
#39 := (not #38)
#40 := (or #39 #13)
#189 := (iff #40 #186)
#183 := (or #180 #76)
#187 := (iff #183 #186)
#188 := [rewrite]: #187
#184 := (iff #40 #183)
#181 := (iff #39 #180)
#178 := (iff #38 #79)
#172 := (or #79 false)
#176 := (iff #172 #79)
#177 := [rewrite]: #176
#174 := (iff #38 #172)
#80 := (iff #15 #79)
#81 := [rewrite]: #80
#175 := [monotonicity #81]: #174
#179 := [trans #175 #177]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182 #78]: #184
#190 := [trans #185 #188]: #189
#171 := [asserted]: #40
#193 := [mp #171 #190]: #186
#249 := [mp #193 #259]: #180
#260 := [iff-false #249]: #250
#248 := (iff #73 false)
#165 := (not #73)
#168 := (or #165 #76)
#266 := (iff #168 #165)
#261 := (or #165 false)
#264 := (iff #261 #165)
#265 := [rewrite]: #264
#262 := (iff #168 #261)
#263 := [monotonicity #252]: #262
#267 := [trans #263 #265]: #266
decl f9 :: S1
#31 := f9
#32 := (= f9 f1)
#33 := (not #32)
#34 := (or #32 #33)
#11 := (= f4 f1)
#35 := (and #11 #34)
#36 := (not #35)
#37 := (or #36 #13)
#169 := (iff #37 #168)
#166 := (iff #36 #165)
#163 := (iff #35 #73)
#1 := true
#158 := (and #73 true)
#161 := (iff #158 #73)
#162 := [rewrite]: #161
#159 := (iff #35 #158)
#156 := (iff #34 true)
#144 := (= f1 f9)
#148 := (not #144)
#151 := (or #144 #148)
#154 := (iff #151 true)
#155 := [rewrite]: #154
#152 := (iff #34 #151)
#149 := (iff #33 #148)
#146 := (iff #32 #144)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#153 := [monotonicity #147 #150]: #152
#157 := [trans #153 #155]: #156
#74 := (iff #11 #73)
#75 := [rewrite]: #74
#160 := [monotonicity #75 #157]: #159
#164 := [trans #160 #162]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167 #78]: #169
#143 := [asserted]: #37
#173 := [mp #143 #170]: #168
#247 := [mp #173 #267]: #165
#268 := [iff-false #247]: #248
#246 := (iff #70 false)
#137 := (not #70)
#140 := (or #137 #73)
#274 := (iff #140 #137)
#269 := (or #137 false)
#272 := (iff #269 #137)
#273 := [rewrite]: #272
#270 := (iff #140 #269)
#271 := [monotonicity #268]: #270
#275 := [trans #271 #273]: #274
#26 := (not #13)
#27 := (and #13 #26)
#9 := (= f3 f1)
#28 := (or #9 #27)
#29 := (not #28)
#30 := (or #29 #11)
#141 := (iff #30 #140)
#138 := (iff #29 #137)
#135 := (iff #28 #70)
#130 := (or #70 false)
#133 := (iff #130 #70)
#134 := [rewrite]: #133
#131 := (iff #28 #130)
#128 := (iff #27 false)
#123 := (and #76 #120)
#126 := (iff #123 false)
#127 := [rewrite]: #126
#124 := (iff #27 #123)
#121 := (iff #26 #120)
#122 := [monotonicity #78]: #121
#125 := [monotonicity #78 #122]: #124
#129 := [trans #125 #127]: #128
#71 := (iff #9 #70)
#72 := [rewrite]: #71
#132 := [monotonicity #72 #129]: #131
#136 := [trans #132 #134]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139 #75]: #141
#119 := [asserted]: #30
#145 := [mp #119 #142]: #140
#245 := [mp #145 #275]: #137
#276 := [iff-false #245]: #246
#295 := [monotonicity #276 #268 #252 #260]: #294
#299 := [trans #295 #297]: #298
#16 := (or #13 #15)
#17 := (or #11 #16)
#18 := (or #9 #17)
#94 := (iff #18 #91)
#82 := (or #76 #79)
#85 := (or #73 #82)
#88 := (or #70 #85)
#92 := (iff #88 #91)
#93 := [rewrite]: #92
#89 := (iff #18 #88)
#86 := (iff #17 #85)
#83 := (iff #16 #82)
#84 := [monotonicity #78 #81]: #83
#87 := [monotonicity #75 #84]: #86
#90 := [monotonicity #72 #87]: #89
#95 := [trans #90 #93]: #94
#69 := [asserted]: #18
#96 := [mp #69 #95]: #91
[mp #96 #299]: false
unsat
c02efa254926732c7b107199403ddd23251d413c 52 0
#2 := false
decl f4 :: (-> S2 S2 S2)
#16 := (:var 1 S2)
#17 := (:var 0 S2)
#19 := (f4 #17 #16)
#535 := (pattern #19)
#18 := (f4 #16 #17)
#534 := (pattern #18)
#20 := (= #18 #19)
#536 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #534 #535) #20)
#21 := (forall (vars (?v0 S2) (?v1 S2)) #20)
#539 := (iff #21 #536)
#537 := (iff #20 #20)
#538 := [refl]: #537
#540 := [quant-intro #538]: #539
#62 := (~ #21 #21)
#60 := (~ #20 #20)
#61 := [refl]: #60
#63 := [nnf-pos #61]: #62
#51 := [asserted]: #21
#56 := [mp~ #51 #63]: #21
#541 := [mp #56 #540]: #536
decl f3 :: S2
#8 := f3
decl f5 :: S2
#10 := f5
#12 := (f4 f5 f3)
#11 := (f4 f3 f5)
#13 := (= #11 #12)
#48 := (not #13)
#9 := (= f3 f3)
#14 := (and #9 #13)
#15 := (not #14)
#49 := (iff #15 #48)
#46 := (iff #14 #13)
#1 := true
#41 := (and true #13)
#44 := (iff #41 #13)
#45 := [rewrite]: #44
#42 := (iff #14 #41)
#39 := (iff #9 true)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#50 := [monotonicity #47]: #49
#38 := [asserted]: #15
#53 := [mp #38 #50]: #48
#117 := (not #536)
#204 := (or #117 #13)
#118 := [quant-inst]: #204
[unit-resolution #118 #53 #541]: false
unsat
950f494f909b64c53d64f243647b66f8a05dd7f6 2578 0
#2 := false
decl f35 :: S1
#112 := f35
decl f1 :: S1
#4 := f1
#833 := (= f1 f35)
decl f37 :: S1
#119 := f37
#860 := (= f1 f37)
#1997 := (not #860)
decl f48 :: S1
#157 := f48
#1013 := (= f1 f48)
decl f57 :: S1
#188 := f57
#1139 := (= f1 f57)
#2552 := (not #1139)
decl f47 :: S1
#152 := f47
#989 := (= f1 f47)
decl f46 :: S1
#150 := f46
#986 := (= f1 f46)
#2244 := (not #986)
#3246 := [hypothesis]: #986
#2332 := (or #1997 #2244)
#120 := (= f37 f1)
#314 := (not #120)
#151 := (= f46 f1)
#347 := (not #151)
#358 := (or #347 #314)
#2335 := (iff #358 #2332)
#2328 := (or #2244 #1997)
#2333 := (iff #2328 #2332)
#2334 := [rewrite]: #2333
#2330 := (iff #358 #2328)
#1999 := (iff #314 #1997)
#861 := (iff #120 #860)
#862 := [rewrite]: #861
#2000 := [monotonicity #862]: #1999
#2246 := (iff #347 #2244)
#987 := (iff #151 #986)
#988 := [rewrite]: #987
#2247 := [monotonicity #988]: #2246
#2331 := [monotonicity #2247 #2000]: #2330
#2336 := [trans #2331 #2334]: #2335
#2327 := [asserted]: #358
#2339 := [mp #2327 #2336]: #2332
#3247 := [unit-resolution #2339 #3246]: #1997
decl f26 :: S1
#81 := f26
#707 := (= f1 f26)
#1689 := (not #707)
decl f15 :: S1
#44 := f15
#562 := (= f1 f15)
decl f13 :: S1
#38 := f13
#538 := (= f1 f13)
#1370 := (not #538)
decl f11 :: S1
#32 := f11
#514 := (= f1 f11)
decl f23 :: S1
#69 := f23
#656 := (= f1 f23)
decl f34 :: S1
#107 := f34
#809 := (= f1 f34)
#1879 := (not #809)
decl f45 :: S1
#145 := f45
#962 := (= f1 f45)
decl f55 :: S1
#181 := f55
#1112 := (= f1 f55)
#2491 := (not #1112)
#2305 := (not #1013)
#2312 := (or #2244 #2305)
#158 := (= f48 f1)
#355 := (not #158)
#356 := (or #355 #347)
#2315 := (iff #356 #2312)
#2309 := (or #2305 #2244)
#2313 := (iff #2309 #2312)
#2314 := [rewrite]: #2313
#2310 := (iff #356 #2309)
#2307 := (iff #355 #2305)
#1014 := (iff #158 #1013)
#1015 := [rewrite]: #1014
#2308 := [monotonicity #1015]: #2307
#2311 := [monotonicity #2308 #2247]: #2310
#2316 := [trans #2311 #2314]: #2315
#2304 := [asserted]: #356
#2319 := [mp #2304 #2316]: #2312
#3253 := [unit-resolution #2319 #3246]: #2305
#1169 := (or #1013 #1139)
decl f6 :: S1
#17 := f6
#457 := (= f1 f6)
#1177 := (or #457 #1013 #1139)
#2857 := (iff #1177 #1169)
#2852 := (or false #1013 #1139)
#2855 := (iff #2852 #1169)
#2856 := [rewrite]: #2855
#2853 := (iff #1177 #2852)
#2776 := (iff #457 false)
#461 := (not #457)
#18 := (= f6 f1)
#19 := (not #18)
#462 := (iff #19 #461)
#459 := (iff #18 #457)
#460 := [rewrite]: #459
#463 := [monotonicity #460]: #462
#456 := [asserted]: #19
#466 := [mp #456 #463]: #461
#2777 := [iff-false #466]: #2776
#2854 := [monotonicity #2777]: #2853
#2858 := [trans #2854 #2856]: #2857
#189 := (= f57 f1)
#195 := (or #189 #158)
#196 := (or #18 #195)
#1180 := (iff #196 #1177)
#1174 := (or #457 #1169)
#1178 := (iff #1174 #1177)
#1179 := [rewrite]: #1178
#1175 := (iff #196 #1174)
#1172 := (iff #195 #1169)
#1166 := (or #1139 #1013)
#1170 := (iff #1166 #1169)
#1171 := [rewrite]: #1170
#1167 := (iff #195 #1166)
#1140 := (iff #189 #1139)
#1141 := [rewrite]: #1140
#1168 := [monotonicity #1141 #1015]: #1167
#1173 := [trans #1168 #1171]: #1172
#1176 := [monotonicity #460 #1173]: #1175
#1181 := [trans #1176 #1179]: #1180
#1165 := [asserted]: #196
#1182 := [mp #1165 #1181]: #1177
#2859 := [mp #1182 #2858]: #1169
#3254 := [unit-resolution #2859 #3253]: #1139
#2567 := (or #2491 #2552)
#182 := (= f55 f1)
#380 := (not #182)
#388 := (not #189)
#391 := (or #388 #380)
#2570 := (iff #391 #2567)
#2563 := (or #2552 #2491)
#2568 := (iff #2563 #2567)
#2569 := [rewrite]: #2568
#2565 := (iff #391 #2563)
#2493 := (iff #380 #2491)
#1113 := (iff #182 #1112)
#1114 := [rewrite]: #1113
#2494 := [monotonicity #1114]: #2493
#2554 := (iff #388 #2552)
#2555 := [monotonicity #1141]: #2554
#2566 := [monotonicity #2555 #2494]: #2565
#2571 := [trans #2566 #2569]: #2570
#2562 := [asserted]: #391
#2574 := [mp #2562 #2571]: #2567
#3255 := [unit-resolution #2574 #3254]: #2491
decl f56 :: S1
#183 := f56
#1115 := (= f1 f56)
#2495 := (not #1115)
decl f62 :: S1
#208 := f62
#1239 := (= f1 f62)
decl f58 :: S1
#190 := f58
#1142 := (= f1 f58)
#2556 := (not #1142)
#2559 := (or #2552 #2556)
#191 := (= f58 f1)
#389 := (not #191)
#390 := (or #388 #389)
#2560 := (iff #390 #2559)
#2557 := (iff #389 #2556)
#1143 := (iff #191 #1142)
#1144 := [rewrite]: #1143
#2558 := [monotonicity #1144]: #2557
#2561 := [monotonicity #2555 #2558]: #2560
#2551 := [asserted]: #390
#2564 := [mp #2551 #2561]: #2559
#3594 := [unit-resolution #2564 #3254]: #2556
#1263 := (or #1142 #1239)
decl f5 :: S1
#14 := f5
#449 := (= f1 f5)
#1271 := (or #449 #1142 #1239)
#2875 := (iff #1271 #1263)
#2870 := (or false #1142 #1239)
#2873 := (iff #2870 #1263)
#2874 := [rewrite]: #2873
#2871 := (iff #1271 #2870)
#2774 := (iff #449 false)
#453 := (not #449)
#15 := (= f5 f1)
#16 := (not #15)
#454 := (iff #16 #453)
#451 := (iff #15 #449)
#452 := [rewrite]: #451
#455 := [monotonicity #452]: #454
#448 := [asserted]: #16
#458 := [mp #448 #455]: #453
#2775 := [iff-false #458]: #2774
#2872 := [monotonicity #2775]: #2871
#2876 := [trans #2872 #2874]: #2875
#209 := (= f62 f1)
#212 := (or #209 #191)
#213 := (or #15 #212)
#1274 := (iff #213 #1271)
#1268 := (or #449 #1263)
#1272 := (iff #1268 #1271)
#1273 := [rewrite]: #1272
#1269 := (iff #213 #1268)
#1266 := (iff #212 #1263)
#1260 := (or #1239 #1142)
#1264 := (iff #1260 #1263)
#1265 := [rewrite]: #1264
#1261 := (iff #212 #1260)
#1240 := (iff #209 #1239)
#1241 := [rewrite]: #1240
#1262 := [monotonicity #1241 #1144]: #1261
#1267 := [trans #1262 #1265]: #1266
#1270 := [monotonicity #452 #1267]: #1269
#1275 := [trans #1270 #1273]: #1274
#1259 := [asserted]: #213
#1276 := [mp #1259 #1275]: #1271
#2877 := [mp #1276 #2876]: #1263
#3595 := [unit-resolution #2877 #3594]: #1239
#2712 := (not #1239)
#2729 := (or #2495 #2712)
#184 := (= f56 f1)
#381 := (not #184)
#409 := (not #209)
#411 := (or #409 #381)
#2732 := (iff #411 #2729)
#2725 := (or #2712 #2495)
#2730 := (iff #2725 #2729)
#2731 := [rewrite]: #2730
#2727 := (iff #411 #2725)
#2496 := (iff #381 #2495)
#1116 := (iff #184 #1115)
#1117 := [rewrite]: #1116
#2497 := [monotonicity #1117]: #2496
#2714 := (iff #409 #2712)
#2715 := [monotonicity #1241]: #2714
#2728 := [monotonicity #2715 #2497]: #2727
#2733 := [trans #2728 #2731]: #2732
#2724 := [asserted]: #411
#2736 := [mp #2724 #2733]: #2729
#3596 := [unit-resolution #2736 #3595]: #2495
decl f53 :: S1
#174 := f53
#1085 := (= f1 f53)
#2430 := (not #1085)
decl f61 :: S1
#204 := f61
#1218 := (= f1 f61)
#2679 := (not #1218)
#2719 := (or #2679 #2712)
#205 := (= f61 f1)
#405 := (not #205)
#410 := (or #409 #405)
#2722 := (iff #410 #2719)
#2716 := (or #2712 #2679)
#2720 := (iff #2716 #2719)
#2721 := [rewrite]: #2720
#2717 := (iff #410 #2716)
#2681 := (iff #405 #2679)
#1219 := (iff #205 #1218)
#1220 := [rewrite]: #1219
#2682 := [monotonicity #1220]: #2681
#2718 := [monotonicity #2715 #2682]: #2717
#2723 := [trans #2718 #2721]: #2722
#2711 := [asserted]: #410
#2726 := [mp #2711 #2723]: #2719
#3597 := [unit-resolution #2726 #3595]: #2679
#3579 := (or #2430 #1218)
decl f19 :: S1
#55 := f19
#602 := (= f1 f19)
decl f30 :: S1
#93 := f30
#755 := (= f1 f30)
#1757 := (not #755)
decl f41 :: S1
#131 := f41
#908 := (= f1 f41)
decl f52 :: S1
#169 := f52
#1061 := (= f1 f52)
#2373 := (not #1061)
decl f60 :: S1
#200 := f60
#1196 := (= f1 f60)
#3563 := [hypothesis]: #2679
decl f54 :: S1
#176 := f54
#1088 := (= f1 f54)
#2434 := (not #1088)
#3175 := [hypothesis]: #1085
#2437 := (or #2430 #2434)
#177 := (= f54 f1)
#373 := (not #177)
#175 := (= f53 f1)
#372 := (not #175)
#374 := (or #372 #373)
#2438 := (iff #374 #2437)
#2435 := (iff #373 #2434)
#1089 := (iff #177 #1088)
#1090 := [rewrite]: #1089
#2436 := [monotonicity #1090]: #2435
#2432 := (iff #372 #2430)
#1086 := (iff #175 #1085)
#1087 := [rewrite]: #1086
#2433 := [monotonicity #1087]: #2432
#2439 := [monotonicity #2433 #2436]: #2438
#2429 := [asserted]: #374
#2442 := [mp #2429 #2439]: #2437
#3176 := [unit-resolution #2442 #3175]: #2434
#1232 := (or #1088 #1196 #1218)
#201 := (= f60 f1)
#206 := (or #201 #177)
#207 := (or #205 #206)
#1235 := (iff #207 #1232)
#1224 := (or #1088 #1196)
#1229 := (or #1218 #1224)
#1233 := (iff #1229 #1232)
#1234 := [rewrite]: #1233
#1230 := (iff #207 #1229)
#1227 := (iff #206 #1224)
#1221 := (or #1196 #1088)
#1225 := (iff #1221 #1224)
#1226 := [rewrite]: #1225
#1222 := (iff #206 #1221)
#1198 := (iff #201 #1196)
#1199 := [rewrite]: #1198
#1223 := [monotonicity #1199 #1090]: #1222
#1228 := [trans #1223 #1226]: #1227
#1231 := [monotonicity #1220 #1228]: #1230
#1236 := [trans #1231 #1234]: #1235
#1217 := [asserted]: #207
#1237 := [mp #1217 #1236]: #1232
#3564 := [unit-resolution #1237 #3176 #3563]: #1196
#2646 := (not #1196)
#2663 := (or #2373 #2646)
#170 := (= f52 f1)
#365 := (not #170)
#401 := (not #201)
#403 := (or #401 #365)
#2666 := (iff #403 #2663)
#2659 := (or #2646 #2373)
#2664 := (iff #2659 #2663)
#2665 := [rewrite]: #2664
#2661 := (iff #403 #2659)
#2374 := (iff #365 #2373)
#1062 := (iff #170 #1061)
#1063 := [rewrite]: #1062
#2375 := [monotonicity #1063]: #2374
#2648 := (iff #401 #2646)
#2649 := [monotonicity #1199]: #2648
#2662 := [monotonicity #2649 #2375]: #2661
#2667 := [trans #2662 #2665]: #2666
#2658 := [asserted]: #403
#2670 := [mp #2658 #2667]: #2663
#3565 := [unit-resolution #2670 #3564]: #2373
decl f51 :: S1
#167 := f51
#1058 := (= f1 f51)
#2369 := (not #1058)
#2445 := (or #2369 #2430)
#168 := (= f51 f1)
#364 := (not #168)
#375 := (or #372 #364)
#2448 := (iff #375 #2445)
#2441 := (or #2430 #2369)
#2446 := (iff #2441 #2445)
#2447 := [rewrite]: #2446
#2443 := (iff #375 #2441)
#2371 := (iff #364 #2369)
#1059 := (iff #168 #1058)
#1060 := [rewrite]: #1059
#2372 := [monotonicity #1060]: #2371
#2444 := [monotonicity #2433 #2372]: #2443
#2449 := [trans #2444 #2447]: #2448
#2440 := [asserted]: #375
#2452 := [mp #2440 #2449]: #2445
#3181 := [unit-resolution #2452 #3175]: #2369
decl f49 :: S1
#161 := f49
#1034 := (= f1 f49)
#2338 := (not #1034)
decl f50 :: S1
#163 := f50
#1037 := (= f1 f50)
decl f59 :: S1
#197 := f59
#1184 := (= f1 f59)
#2633 := (not #1184)
#2653 := (or #2633 #2646)
#198 := (= f59 f1)
#399 := (not #198)
#402 := (or #401 #399)
#2656 := (iff #402 #2653)
#2650 := (or #2646 #2633)
#2654 := (iff #2650 #2653)
#2655 := [rewrite]: #2654
#2651 := (iff #402 #2650)
#2635 := (iff #399 #2633)
#1185 := (iff #198 #1184)
#1186 := [rewrite]: #1185
#2636 := [monotonicity #1186]: #2635
#2652 := [monotonicity #2649 #2636]: #2651
#2657 := [trans #2652 #2655]: #2656
#2645 := [asserted]: #402
#2660 := [mp #2645 #2657]: #2653
#3566 := [unit-resolution #2660 #3564]: #2633
#1190 := (or #1037 #1184)
#164 := (= f50 f1)
#199 := (or #198 #164)
#1193 := (iff #199 #1190)
#1187 := (or #1184 #1037)
#1191 := (iff #1187 #1190)
#1192 := [rewrite]: #1191
#1188 := (iff #199 #1187)
#1038 := (iff #164 #1037)
#1039 := [rewrite]: #1038
#1189 := [monotonicity #1186 #1039]: #1188
#1194 := [trans #1189 #1192]: #1193
#1183 := [asserted]: #199
#1197 := [mp #1183 #1194]: #1190
#3567 := [unit-resolution #1197 #3566]: #1037
#2342 := (not #1037)
#2345 := (or #2338 #2342)
#360 := (not #164)
#162 := (= f49 f1)
#359 := (not #162)
#361 := (or #359 #360)
#2346 := (iff #361 #2345)
#2343 := (iff #360 #2342)
#2344 := [monotonicity #1039]: #2343
#2340 := (iff #359 #2338)
#1035 := (iff #162 #1034)
#1036 := [rewrite]: #1035
#2341 := [monotonicity #1036]: #2340
#2347 := [monotonicity #2341 #2344]: #2346
#2337 := [asserted]: #361
#2350 := [mp #2337 #2347]: #2345
#3568 := [unit-resolution #2350 #3567]: #2338
#1078 := (or #908 #1034 #1058 #1061)
#132 := (= f41 f1)
#171 := (or #162 #132)
#172 := (or #170 #171)
#173 := (or #168 #172)
#1081 := (iff #173 #1078)
#1067 := (or #908 #1034)
#1072 := (or #1061 #1067)
#1075 := (or #1058 #1072)
#1079 := (iff #1075 #1078)
#1080 := [rewrite]: #1079
#1076 := (iff #173 #1075)
#1073 := (iff #172 #1072)
#1070 := (iff #171 #1067)
#1064 := (or #1034 #908)
#1068 := (iff #1064 #1067)
#1069 := [rewrite]: #1068
#1065 := (iff #171 #1064)
#909 := (iff #132 #908)
#910 := [rewrite]: #909
#1066 := [monotonicity #1036 #910]: #1065
#1071 := [trans #1066 #1069]: #1070
#1074 := [monotonicity #1063 #1071]: #1073
#1077 := [monotonicity #1060 #1074]: #1076
#1082 := [trans #1077 #1080]: #1081
#1057 := [asserted]: #173
#1083 := [mp #1057 #1082]: #1078
#3569 := [unit-resolution #1083 #3568 #3181 #3565]: #908
#2065 := (not #908)
#2106 := (or #1757 #2065)
#94 := (= f30 f1)
#283 := (not #94)
#324 := (not #132)
#329 := (or #324 #283)
#2109 := (iff #329 #2106)
#2102 := (or #2065 #1757)
#2107 := (iff #2102 #2106)
#2108 := [rewrite]: #2107
#2104 := (iff #329 #2102)
#1758 := (iff #283 #1757)
#756 := (iff #94 #755)
#757 := [rewrite]: #756
#1759 := [monotonicity #757]: #1758
#2066 := (iff #324 #2065)
#2067 := [monotonicity #910]: #2066
#2105 := [monotonicity #2067 #1759]: #2104
#2110 := [trans #2105 #2108]: #2109
#2101 := [asserted]: #329
#2113 := [mp #2101 #2110]: #2106
#3570 := [unit-resolution #2113 #3569]: #1757
decl f27 :: S1
#85 := f27
#728 := (= f1 f27)
#1722 := (not #728)
decl f28 :: S1
#87 := f28
#731 := (= f1 f28)
decl f39 :: S1
#125 := f39
#884 := (= f1 f39)
#2034 := (not #884)
#2363 := (or #2034 #2342)
#126 := (= f39 f1)
#319 := (not #126)
#363 := (or #360 #319)
#2366 := (iff #363 #2363)
#2359 := (or #2342 #2034)
#2364 := (iff #2359 #2363)
#2365 := [rewrite]: #2364
#2361 := (iff #363 #2359)
#2035 := (iff #319 #2034)
#885 := (iff #126 #884)
#886 := [rewrite]: #885
#2036 := [monotonicity #886]: #2035
#2362 := [monotonicity #2344 #2036]: #2361
#2367 := [trans #2362 #2365]: #2366
#2358 := [asserted]: #363
#2370 := [mp #2358 #2367]: #2363
#3571 := [unit-resolution #2370 #3567]: #2034
decl f38 :: S1
#123 := f38
#881 := (= f1 f38)
#2030 := (not #881)
#2096 := (or #2030 #2065)
#124 := (= f38 f1)
#318 := (not #124)
#328 := (or #324 #318)
#2099 := (iff #328 #2096)
#2092 := (or #2065 #2030)
#2097 := (iff #2092 #2096)
#2098 := [rewrite]: #2097
#2094 := (iff #328 #2092)
#2032 := (iff #318 #2030)
#882 := (iff #124 #881)
#883 := [rewrite]: #882
#2033 := [monotonicity #883]: #2032
#2095 := [monotonicity #2067 #2033]: #2094
#2100 := [trans #2095 #2098]: #2099
#2091 := [asserted]: #328
#2103 := [mp #2091 #2100]: #2096
#3572 := [unit-resolution #2103 #3569]: #2030
#898 := (or #731 #881 #884)
#88 := (= f28 f1)
#127 := (or #126 #88)
#128 := (or #124 #127)
#901 := (iff #128 #898)
#890 := (or #731 #884)
#895 := (or #881 #890)
#899 := (iff #895 #898)
#900 := [rewrite]: #899
#896 := (iff #128 #895)
#893 := (iff #127 #890)
#887 := (or #884 #731)
#891 := (iff #887 #890)
#892 := [rewrite]: #891
#888 := (iff #127 #887)
#732 := (iff #88 #731)
#733 := [rewrite]: #732
#889 := [monotonicity #886 #733]: #888
#894 := [trans #889 #892]: #893
#897 := [monotonicity #883 #894]: #896
#902 := [trans #897 #900]: #901
#880 := [asserted]: #128
#903 := [mp #880 #902]: #898
#3573 := [unit-resolution #903 #3572 #3571]: #731
#1726 := (not #731)
#1729 := (or #1722 #1726)
#278 := (not #88)
#86 := (= f27 f1)
#277 := (not #86)
#279 := (or #277 #278)
#1730 := (iff #279 #1729)
#1727 := (iff #278 #1726)
#1728 := [monotonicity #733]: #1727
#1724 := (iff #277 #1722)
#729 := (iff #86 #728)
#730 := [rewrite]: #729
#1725 := [monotonicity #730]: #1724
#1731 := [monotonicity #1725 #1728]: #1730
#1721 := [asserted]: #279
#1734 := [mp #1721 #1731]: #1729
#3574 := [unit-resolution #1734 #3573]: #1722
#3507 := (or #602 #728 #755)
decl f29 :: S1
#91 := f29
#752 := (= f1 f29)
#1753 := (not #752)
decl f32 :: S1
#100 := f32
#782 := (= f1 f32)
#1818 := (not #782)
#3138 := [hypothesis]: #1818
decl f42 :: S1
#136 := f42
#932 := (= f1 f42)
#2122 := (not #932)
decl f44 :: S1
#143 := f44
#959 := (= f1 f44)
#3323 := (or #514 #782)
decl f8 :: S1
#22 := f8
#469 := (= f1 f8)
decl f7 :: S1
#20 := f7
#465 := (= f1 f7)
#1278 := (not #465)
decl f9 :: S1
#26 := f9
#490 := (= f1 f9)
#1339 := (not #514)
#2940 := [hypothesis]: #1339
decl f12 :: S1
#34 := f12
#517 := (= f1 f12)
#1343 := (not #517)
decl f22 :: S1
#67 := f22
#653 := (= f1 f22)
#1571 := (not #656)
#3297 := (or #1571 #782 #514)
#2248 := (not #989)
#2923 := [hypothesis]: #656
#1612 := (or #1343 #1571)
#35 := (= f12 f1)
#225 := (not #35)
#70 := (= f23 f1)
#258 := (not #70)
#263 := (or #258 #225)
#1615 := (iff #263 #1612)
#1608 := (or #1571 #1343)
#1613 := (iff #1608 #1612)
#1614 := [rewrite]: #1613
#1610 := (iff #263 #1608)
#1344 := (iff #225 #1343)
#518 := (iff #35 #517)
#519 := [rewrite]: #518
#1345 := [monotonicity #519]: #1344
#1572 := (iff #258 #1571)
#657 := (iff #70 #656)
#658 := [rewrite]: #657
#1573 := [monotonicity #658]: #1572
#1611 := [monotonicity #1573 #1345]: #1610
#1616 := [trans #1611 #1614]: #1615
#1607 := [asserted]: #263
#1619 := [mp #1607 #1616]: #1612
#2918 := [unit-resolution #1619 #2923]: #1343
#531 := (or #490 #514 #517)
#27 := (= f9 f1)
#36 := (or #35 #27)
#33 := (= f11 f1)
#37 := (or #33 #36)
#534 := (iff #37 #531)
#523 := (or #490 #517)
#528 := (or #514 #523)
#532 := (iff #528 #531)
#533 := [rewrite]: #532
#529 := (iff #37 #528)
#526 := (iff #36 #523)
#520 := (or #517 #490)
#524 := (iff #520 #523)
#525 := [rewrite]: #524
#521 := (iff #36 #520)
#491 := (iff #27 #490)
#492 := [rewrite]: #491
#522 := [monotonicity #519 #492]: #521
#527 := [trans #522 #525]: #526
#515 := (iff #33 #514)
#516 := [rewrite]: #515
#530 := [monotonicity #516 #527]: #529
#535 := [trans #530 #533]: #534
#513 := [asserted]: #37
#536 := [mp #513 #535]: #531
#2919 := [unit-resolution #536 #2918 #2940]: #490
#1308 := (not #490)
#1323 := (or #1278 #1308)
#21 := (= f7 f1)
#214 := (not #21)
#219 := (not #27)
#222 := (or #219 #214)
#1326 := (iff #222 #1323)
#1319 := (or #1308 #1278)
#1324 := (iff #1319 #1323)
#1325 := [rewrite]: #1324
#1321 := (iff #222 #1319)
#1279 := (iff #214 #1278)
#467 := (iff #21 #465)
#468 := [rewrite]: #467
#1280 := [monotonicity #468]: #1279
#1310 := (iff #219 #1308)
#1311 := [monotonicity #492]: #1310
#1322 := [monotonicity #1311 #1280]: #1321
#1327 := [trans #1322 #1325]: #1326
#1318 := [asserted]: #222
#1330 := [mp #1318 #1327]: #1323
#3285 := [unit-resolution #1330 #2919]: #1278
#2781 := (or #465 #469)
decl f3 :: S1
#8 := f3
#434 := (= f1 f3)
#483 := (or #434 #465 #469)
#2784 := (iff #483 #2781)
#2778 := (or false #465 #469)
#2782 := (iff #2778 #2781)
#2783 := [rewrite]: #2782
#2779 := (iff #483 #2778)
#2769 := (iff #434 false)
#437 := (not #434)
#9 := (= f3 f1)
#10 := (not #9)
#438 := (iff #10 #437)
#435 := (iff #9 #434)
#436 := [rewrite]: #435
#439 := [monotonicity #436]: #438
#433 := [asserted]: #10
#442 := [mp #433 #439]: #437
#2771 := [iff-false #442]: #2769
#2780 := [monotonicity #2771]: #2779
#2785 := [trans #2780 #2783]: #2784
#23 := (= f8 f1)
#24 := (or #23 #9)
#25 := (or #21 #24)
#486 := (iff #25 #483)
#475 := (or #434 #469)
#480 := (or #465 #475)
#484 := (iff #480 #483)
#485 := [rewrite]: #484
#481 := (iff #25 #480)
#478 := (iff #24 #475)
#472 := (or #469 #434)
#476 := (iff #472 #475)
#477 := [rewrite]: #476
#473 := (iff #24 #472)
#470 := (iff #23 #469)
#471 := [rewrite]: #470
#474 := [monotonicity #471 #436]: #473
#479 := [trans #474 #477]: #478
#482 := [monotonicity #468 #479]: #481
#487 := [trans #482 #485]: #486
#464 := [asserted]: #25
#488 := [mp #464 #487]: #483
#2786 := [mp #488 #2785]: #2781
#3286 := [unit-resolution #2786 #3285]: #469
decl f21 :: S1
#62 := f21
#629 := (= f1 f21)
decl f18 :: S1
#53 := f18
#599 := (= f1 f18)
#1445 := (not #599)
#1281 := (not #469)
#1470 := (or #1281 #1445)
#215 := (not #23)
#54 := (= f18 f1)
#241 := (not #54)
#245 := (or #241 #215)
#1473 := (iff #245 #1470)
#1466 := (or #1445 #1281)
#1471 := (iff #1466 #1470)
#1472 := [rewrite]: #1471
#1468 := (iff #245 #1466)
#1282 := (iff #215 #1281)
#1283 := [monotonicity #471]: #1282
#1447 := (iff #241 #1445)
#600 := (iff #54 #599)
#601 := [rewrite]: #600
#1448 := [monotonicity #601]: #1447
#1469 := [monotonicity #1448 #1283]: #1468
#1474 := [trans #1469 #1472]: #1473
#1465 := [asserted]: #245
#1477 := [mp #1465 #1474]: #1470
#3287 := [unit-resolution #1477 #3286]: #1445
#2917 := (or #1571 #514 #599 #629)
decl f10 :: S1
#28 := f10
#493 := (= f1 f10)
#1510 := (not #629)
#2944 := [hypothesis]: #1510
#3061 := [hypothesis]: #1445
decl f20 :: S1
#60 := f20
#626 := (= f1 f20)
#1506 := (not #626)
#1602 := (or #1506 #1571)
#61 := (= f20 f1)
#249 := (not #61)
#262 := (or #258 #249)
#1605 := (iff #262 #1602)
#1598 := (or #1571 #1506)
#1603 := (iff #1598 #1602)
#1604 := [rewrite]: #1603
#1600 := (iff #262 #1598)
#1508 := (iff #249 #1506)
#627 := (iff #61 #626)
#628 := [rewrite]: #627
#1509 := [monotonicity #628]: #1508
#1601 := [monotonicity #1573 #1509]: #1600
#1606 := [trans #1601 #1604]: #1605
#1597 := [asserted]: #262
#1609 := [mp #1597 #1606]: #1602
#2920 := [unit-resolution #1609 #2923]: #1506
#646 := (or #493 #599 #626 #629)
#29 := (= f10 f1)
#64 := (or #54 #29)
#63 := (= f21 f1)
#65 := (or #63 #64)
#66 := (or #61 #65)
#649 := (iff #66 #646)
#635 := (or #493 #599)
#640 := (or #629 #635)
#643 := (or #626 #640)
#647 := (iff #643 #646)
#648 := [rewrite]: #647
#644 := (iff #66 #643)
#641 := (iff #65 #640)
#638 := (iff #64 #635)
#632 := (or #599 #493)
#636 := (iff #632 #635)
#637 := [rewrite]: #636
#633 := (iff #64 #632)
#494 := (iff #29 #493)
#495 := [rewrite]: #494
#634 := [monotonicity #601 #495]: #633
#639 := [trans #634 #637]: #638
#630 := (iff #63 #629)
#631 := [rewrite]: #630
#642 := [monotonicity #631 #639]: #641
#645 := [monotonicity #628 #642]: #644
#650 := [trans #645 #648]: #649
#625 := [asserted]: #66
#651 := [mp #625 #650]: #646
#2921 := [unit-resolution #651 #2920 #3061 #2944]: #493
#1312 := (not #493)
#1315 := (or #1308 #1312)
#220 := (not #29)
#221 := (or #219 #220)
#1316 := (iff #221 #1315)
#1313 := (iff #220 #1312)
#1314 := [monotonicity #495]: #1313
#1317 := [monotonicity #1311 #1314]: #1316
#1307 := [asserted]: #221
#1320 := [mp #1307 #1317]: #1315
#2916 := [unit-resolution #1320 #2919 #2921]: false
#2914 := [lemma #2916]: #2917
#3288 := [unit-resolution #2914 #3287 #2940 #2923]: #629
#1869 := (or #1510 #1753)
#250 := (not #63)
#92 := (= f29 f1)
#282 := (not #92)
#297 := (or #282 #250)
#1872 := (iff #297 #1869)
#1865 := (or #1753 #1510)
#1870 := (iff #1865 #1869)
#1871 := [rewrite]: #1870
#1867 := (iff #297 #1865)
#1511 := (iff #250 #1510)
#1512 := [monotonicity #631]: #1511
#1755 := (iff #282 #1753)
#753 := (iff #92 #752)
#754 := [rewrite]: #753
#1756 := [monotonicity #754]: #1755
#1868 := [monotonicity #1756 #1512]: #1867
#1873 := [trans #1868 #1871]: #1872
#1864 := [asserted]: #297
#1876 := [mp #1864 #1873]: #1869
#3289 := [unit-resolution #1876 #3288]: #1753
#2829 := (or #1281 #1112 #782 #752)
#2880 := (or #2556 #782)
decl f24 :: S1
#74 := f24
#680 := (= f1 f24)
#1628 := (not #680)
#2915 := [hypothesis]: #1142
#2912 := [unit-resolution #2564 #2915]: #2552
#2913 := [unit-resolution #2859 #2912]: #1013
#2322 := (or #1997 #2305)
#357 := (or #355 #314)
#2325 := (iff #357 #2322)
#2318 := (or #2305 #1997)
#2323 := (iff #2318 #2322)
#2324 := [rewrite]: #2323
#2320 := (iff #357 #2318)
#2321 := [monotonicity #2308 #2000]: #2320
#2326 := [trans #2321 #2324]: #2325
#2317 := [asserted]: #357
#2329 := [mp #2317 #2326]: #2322
#2910 := [unit-resolution #2329 #2913]: #1997
#1936 := (not #833)
#2597 := (or #2248 #2556)
#153 := (= f47 f1)
#348 := (not #153)
#394 := (or #389 #348)
#2600 := (iff #394 #2597)
#2593 := (or #2556 #2248)
#2598 := (iff #2593 #2597)
#2599 := [rewrite]: #2598
#2595 := (iff #394 #2593)
#2249 := (iff #348 #2248)
#990 := (iff #153 #989)
#991 := [rewrite]: #990
#2250 := [monotonicity #991]: #2249
#2596 := [monotonicity #2558 #2250]: #2595
#2601 := [trans #2596 #2599]: #2600
#2592 := [asserted]: #394
#2604 := [mp #2592 #2601]: #2597
#2911 := [unit-resolution #2604 #2915]: #2248
#2908 := [unit-resolution #2319 #2913]: #2244
decl f31 :: S1
#98 := f31
#779 := (= f1 f31)
#1814 := (not #779)
decl f17 :: S1
#49 := f17
#578 := (= f1 f17)
decl f16 :: S1
#47 := f16
#574 := (= f1 f16)
#1414 := (not #574)
#2946 := (or #1278 #986 #989 #860 #782)
#3139 := [hypothesis]: #2248
#3136 := [hypothesis]: #2244
decl f36 :: S1
#114 := f36
#836 := (= f1 f36)
#1940 := (not #836)
decl f25 :: S1
#76 := f25
#683 := (= f1 f25)
#3170 := [hypothesis]: #1997
#2977 := [hypothesis]: #465
#2974 := [unit-resolution #1330 #2977]: #1308
#1333 := (or #1278 #1312)
#223 := (or #220 #214)
#1336 := (iff #223 #1333)
#1329 := (or #1312 #1278)
#1334 := (iff #1329 #1333)
#1335 := [rewrite]: #1334
#1331 := (iff #223 #1329)
#1332 := [monotonicity #1314 #1280]: #1331
#1337 := [trans #1332 #1335]: #1336
#1328 := [asserted]: #223
#1340 := [mp #1328 #1337]: #1333
#2975 := [unit-resolution #1340 #2977]: #1312
#3020 := (or #599 #490 #493 #986 #989 #860)
#3071 := [hypothesis]: #1308
decl f33 :: S1
#105 := f33
#806 := (= f1 f33)
#1875 := (not #806)
#3060 := [hypothesis]: #1312
#3055 := (or #1689 #986 #989 #599 #493 #490)
decl f14 :: S1
#40 := f14
#541 := (= f1 f14)
#1374 := (not #541)
#1401 := (not #562)
#3074 := [hypothesis]: #707
#1706 := (or #1401 #1689)
#45 := (= f15 f1)
#234 := (not #45)
#82 := (= f26 f1)
#273 := (not #82)
#275 := (or #273 #234)
#1709 := (iff #275 #1706)
#1702 := (or #1689 #1401)
#1707 := (iff #1702 #1706)
#1708 := [rewrite]: #1707
#1704 := (iff #275 #1702)
#1403 := (iff #234 #1401)
#563 := (iff #45 #562)
#564 := [rewrite]: #563
#1404 := [monotonicity #564]: #1403
#1691 := (iff #273 #1689)
#708 := (iff #82 #707)
#709 := [rewrite]: #708
#1692 := [monotonicity #709]: #1691
#1705 := [monotonicity #1692 #1404]: #1704
#1710 := [trans #1705 #1708]: #1709
#1701 := [asserted]: #275
#1713 := [mp #1701 #1710]: #1706
#3075 := [unit-resolution #1713 #3074]: #1401
#568 := (or #538 #562)
#39 := (= f13 f1)
#46 := (or #45 #39)
#571 := (iff #46 #568)
#565 := (or #562 #538)
#569 := (iff #565 #568)
#570 := [rewrite]: #569
#566 := (iff #46 #565)
#539 := (iff #39 #538)
#540 := [rewrite]: #539
#567 := [monotonicity #564 #540]: #566
#572 := [trans #567 #570]: #571
#561 := [asserted]: #46
#575 := [mp #561 #572]: #568
#3072 := [unit-resolution #575 #3075]: #538
#1377 := (or #1370 #1374)
#41 := (= f14 f1)
#230 := (not #41)
#229 := (not #39)
#231 := (or #229 #230)
#1378 := (iff #231 #1377)
#1375 := (iff #230 #1374)
#542 := (iff #41 #541)
#543 := [rewrite]: #542
#1376 := [monotonicity #543]: #1375
#1372 := (iff #229 #1370)
#1373 := [monotonicity #540]: #1372
#1379 := [monotonicity #1373 #1376]: #1378
#1369 := [asserted]: #231
#1382 := [mp #1369 #1379]: #1377
#3073 := [unit-resolution #1382 #3072]: #1374
#1696 := (or #1628 #1689)
#75 := (= f24 f1)
#265 := (not #75)
#274 := (or #273 #265)
#1699 := (iff #274 #1696)
#1693 := (or #1689 #1628)
#1697 := (iff #1693 #1696)
#1698 := [rewrite]: #1697
#1694 := (iff #274 #1693)
#1630 := (iff #265 #1628)
#681 := (iff #75 #680)
#682 := [rewrite]: #681
#1631 := [monotonicity #682]: #1630
#1695 := [monotonicity #1692 #1631]: #1694
#1700 := [trans #1695 #1698]: #1699
#1688 := [asserted]: #274
#1703 := [mp #1688 #1700]: #1696
#3070 := [unit-resolution #1703 #3074]: #1628
#1567 := (not #653)
#1385 := (or #1339 #1370)
#224 := (not #33)
#232 := (or #229 #224)
#1388 := (iff #232 #1385)
#1381 := (or #1370 #1339)
#1386 := (iff #1381 #1385)
#1387 := [rewrite]: #1386
#1383 := (iff #232 #1381)
#1341 := (iff #224 #1339)
#1342 := [monotonicity #516]: #1341
#1384 := [monotonicity #1373 #1342]: #1383
#1389 := [trans #1384 #1387]: #1388
#1380 := [asserted]: #232
#1392 := [mp #1380 #1389]: #1385
#3068 := [unit-resolution #1392 #3072]: #1339
#3069 := [unit-resolution #536 #3068 #3071]: #517
#1592 := (or #1343 #1567)
#68 := (= f22 f1)
#257 := (not #68)
#261 := (or #257 #225)
#1595 := (iff #261 #1592)
#1588 := (or #1567 #1343)
#1593 := (iff #1588 #1592)
#1594 := [rewrite]: #1593
#1590 := (iff #261 #1588)
#1569 := (iff #257 #1567)
#654 := (iff #68 #653)
#655 := [rewrite]: #654
#1570 := [monotonicity #655]: #1569
#1591 := [monotonicity #1570 #1345]: #1590
#1596 := [trans #1591 #1594]: #1595
#1587 := [asserted]: #261
#1599 := [mp #1587 #1596]: #1592
#3066 := [unit-resolution #1599 #3069]: #1567
#700 := (or #541 #653 #680 #683)
#78 := (or #68 #41)
#77 := (= f25 f1)
#79 := (or #77 #78)
#80 := (or #75 #79)
#703 := (iff #80 #700)
#689 := (or #541 #653)
#694 := (or #683 #689)
#697 := (or #680 #694)
#701 := (iff #697 #700)
#702 := [rewrite]: #701
#698 := (iff #80 #697)
#695 := (iff #79 #694)
#692 := (iff #78 #689)
#686 := (or #653 #541)
#690 := (iff #686 #689)
#691 := [rewrite]: #690
#687 := (iff #78 #686)
#688 := [monotonicity #655 #543]: #687
#693 := [trans #688 #691]: #692
#684 := (iff #77 #683)
#685 := [rewrite]: #684
#696 := [monotonicity #685 #693]: #695
#699 := [monotonicity #682 #696]: #698
#704 := [trans #699 #702]: #703
#679 := [asserted]: #80
#705 := [mp #679 #704]: #700
#3067 := [unit-resolution #705 #3066 #3070 #3073]: #683
#1632 := (not #683)
#1981 := (or #1632 #1940)
#266 := (not #77)
#115 := (= f36 f1)
#307 := (not #115)
#312 := (or #307 #266)
#1984 := (iff #312 #1981)
#1977 := (or #1940 #1632)
#1982 := (iff #1977 #1981)
#1983 := [rewrite]: #1982
#1979 := (iff #312 #1977)
#1633 := (iff #266 #1632)
#1634 := [monotonicity #685]: #1633
#1941 := (iff #307 #1940)
#837 := (iff #115 #836)
#838 := [rewrite]: #837
#1942 := [monotonicity #838]: #1941
#1980 := [monotonicity #1942 #1634]: #1979
#1985 := [trans #1980 #1983]: #1984
#1976 := [asserted]: #312
#1988 := [mp #1976 #1985]: #1981
#3064 := [unit-resolution #1988 #3067]: #1940
#1006 := (or #836 #959 #986 #989)
#144 := (= f44 f1)
#154 := (or #144 #115)
#155 := (or #153 #154)
#156 := (or #151 #155)
#1009 := (iff #156 #1006)
#995 := (or #836 #959)
#1000 := (or #989 #995)
#1003 := (or #986 #1000)
#1007 := (iff #1003 #1006)
#1008 := [rewrite]: #1007
#1004 := (iff #156 #1003)
#1001 := (iff #155 #1000)
#998 := (iff #154 #995)
#992 := (or #959 #836)
#996 := (iff #992 #995)
#997 := [rewrite]: #996
#993 := (iff #154 #992)
#960 := (iff #144 #959)
#961 := [rewrite]: #960
#994 := [monotonicity #961 #838]: #993
#999 := [trans #994 #997]: #998
#1002 := [monotonicity #991 #999]: #1001
#1005 := [monotonicity #988 #1002]: #1004
#1010 := [trans #1005 #1008]: #1009
#985 := [asserted]: #156
#1011 := [mp #985 #1010]: #1006
#3065 := [unit-resolution #1011 #3064 #3136 #3139]: #959
#1991 := (or #1632 #1875)
#106 := (= f33 f1)
#298 := (not #106)
#313 := (or #298 #266)
#1994 := (iff #313 #1991)
#1987 := (or #1875 #1632)
#1992 := (iff #1987 #1991)
#1993 := [rewrite]: #1992
#1989 := (iff #313 #1987)
#1877 := (iff #298 #1875)
#807 := (iff #106 #806)
#808 := [rewrite]: #807
#1878 := [monotonicity #808]: #1877
#1990 := [monotonicity #1878 #1634]: #1989
#1995 := [trans #1990 #1993]: #1994
#1986 := [asserted]: #313
#1998 := [mp #1986 #1995]: #1991
#3062 := [unit-resolution #1998 #3067]: #1875
#3063 := [unit-resolution #1619 #3069]: #1571
#1622 := (or #1343 #1506)
#264 := (or #249 #225)
#1625 := (iff #264 #1622)
#1618 := (or #1506 #1343)
#1623 := (iff #1618 #1622)
#1624 := [rewrite]: #1623
#1620 := (iff #264 #1618)
#1621 := [monotonicity #1509 #1345]: #1620
#1626 := [trans #1621 #1624]: #1625
#1617 := [asserted]: #264
#1629 := [mp #1617 #1626]: #1622
#3058 := [unit-resolution #1629 #3069]: #1506
#3059 := [unit-resolution #651 #3058 #3061 #3060]: #629
#1839 := (or #1510 #1814)
#99 := (= f31 f1)
#290 := (not #99)
#294 := (or #290 #250)
#1842 := (iff #294 #1839)
#1835 := (or #1814 #1510)
#1840 := (iff #1835 #1839)
#1841 := [rewrite]: #1840
#1837 := (iff #294 #1835)
#1816 := (iff #290 #1814)
#780 := (iff #99 #779)
#781 := [rewrite]: #780
#1817 := [monotonicity #781]: #1816
#1838 := [monotonicity #1817 #1512]: #1837
#1843 := [trans #1838 #1841]: #1842
#1834 := [asserted]: #294
#1846 := [mp #1834 #1843]: #1839
#3056 := [unit-resolution #1846 #3059]: #1814
#826 := (or #656 #779 #806 #809)
#109 := (or #99 #70)
#108 := (= f34 f1)
#110 := (or #108 #109)
#111 := (or #106 #110)
#829 := (iff #111 #826)
#815 := (or #656 #779)
#820 := (or #809 #815)
#823 := (or #806 #820)
#827 := (iff #823 #826)
#828 := [rewrite]: #827
#824 := (iff #111 #823)
#821 := (iff #110 #820)
#818 := (iff #109 #815)
#812 := (or #779 #656)
#816 := (iff #812 #815)
#817 := [rewrite]: #816
#813 := (iff #109 #812)
#814 := [monotonicity #781 #658]: #813
#819 := [trans #814 #817]: #818
#810 := (iff #108 #809)
#811 := [rewrite]: #810
#822 := [monotonicity #811 #819]: #821
#825 := [monotonicity #808 #822]: #824
#830 := [trans #825 #828]: #829
#805 := [asserted]: #111
#831 := [mp #805 #830]: #826
#3057 := [unit-resolution #831 #3056 #3063 #3062]: #809
#2183 := (not #959)
#2208 := (or #1879 #2183)
#299 := (not #108)
#339 := (not #144)
#343 := (or #339 #299)
#2211 := (iff #343 #2208)
#2204 := (or #2183 #1879)
#2209 := (iff #2204 #2208)
#2210 := [rewrite]: #2209
#2206 := (iff #343 #2204)
#1880 := (iff #299 #1879)
#1881 := [monotonicity #811]: #1880
#2185 := (iff #339 #2183)
#2186 := [monotonicity #961]: #2185
#2207 := [monotonicity #2186 #1881]: #2206
#2212 := [trans #2207 #2210]: #2211
#2203 := [asserted]: #343
#2215 := [mp #2203 #2212]: #2208
#3054 := [unit-resolution #2215 #3057 #3065]: false
#3052 := [lemma #3054]: #3055
#3041 := [unit-resolution #3052 #3061 #3139 #3136 #3060 #3071]: #1689
#874 := (or #707 #833 #860)
#113 := (= f35 f1)
#121 := (or #113 #82)
#122 := (or #120 #121)
#877 := (iff #122 #874)
#866 := (or #707 #833)
#871 := (or #860 #866)
#875 := (iff #871 #874)
#876 := [rewrite]: #875
#872 := (iff #122 #871)
#869 := (iff #121 #866)
#863 := (or #833 #707)
#867 := (iff #863 #866)
#868 := [rewrite]: #867
#864 := (iff #121 #863)
#834 := (iff #113 #833)
#835 := [rewrite]: #834
#865 := [monotonicity #835 #709]: #864
#870 := [trans #865 #868]: #869
#873 := [monotonicity #862 #870]: #872
#878 := [trans #873 #876]: #877
#859 := [asserted]: #122
#879 := [mp #859 #878]: #874
#3038 := [unit-resolution #879 #3041 #3170]: #833
#1951 := (or #1875 #1936)
#306 := (not #113)
#309 := (or #306 #298)
#1954 := (iff #309 #1951)
#1947 := (or #1936 #1875)
#1952 := (iff #1947 #1951)
#1953 := [rewrite]: #1952
#1949 := (iff #309 #1947)
#1938 := (iff #306 #1936)
#1939 := [monotonicity #835]: #1938
#1950 := [monotonicity #1939 #1878]: #1949
#1955 := [trans #1950 #1953]: #1954
#1946 := [asserted]: #309
#1958 := [mp #1946 #1955]: #1951
#3039 := [unit-resolution #1958 #3038]: #1875
#1943 := (or #1936 #1940)
#308 := (or #306 #307)
#1944 := (iff #308 #1943)
#1945 := [monotonicity #1939 #1942]: #1944
#1935 := [asserted]: #308
#1948 := [mp #1935 #1945]: #1943
#3036 := [unit-resolution #1948 #3038]: #1940
#3037 := [unit-resolution #1011 #3036 #3136 #3139]: #959
#3034 := [unit-resolution #2215 #3037]: #1879
#1961 := (or #1632 #1936)
#310 := (or #306 #266)
#1964 := (iff #310 #1961)
#1957 := (or #1936 #1632)
#1962 := (iff #1957 #1961)
#1963 := [rewrite]: #1962
#1959 := (iff #310 #1957)
#1960 := [monotonicity #1939 #1634]: #1959
#1965 := [trans #1960 #1963]: #1964
#1956 := [asserted]: #310
#1968 := [mp #1956 #1965]: #1961
#3035 := [unit-resolution #1968 #3038]: #1632
#3043 := (or #1506 #683 #490)
#3053 := [hypothesis]: #626
#3050 := [unit-resolution #1629 #3053]: #1343
#3051 := [unit-resolution #536 #3050 #3071]: #514
#3048 := [unit-resolution #1392 #3051]: #1370
#3049 := [unit-resolution #575 #3048]: #562
#1582 := (or #1506 #1567)
#260 := (or #257 #249)
#1585 := (iff #260 #1582)
#1578 := (or #1567 #1506)
#1583 := (iff #1578 #1582)
#1584 := [rewrite]: #1583
#1580 := (iff #260 #1578)
#1581 := [monotonicity #1570 #1509]: #1580
#1586 := [trans #1581 #1584]: #1585
#1577 := [asserted]: #260
#1589 := [mp #1577 #1586]: #1582
#3046 := [unit-resolution #1589 #3053]: #1567
#3047 := [hypothesis]: #1632
#1395 := (or #1339 #1374)
#233 := (or #230 #224)
#1398 := (iff #233 #1395)
#1391 := (or #1374 #1339)
#1396 := (iff #1391 #1395)
#1397 := [rewrite]: #1396
#1393 := (iff #233 #1391)
#1394 := [monotonicity #1376 #1342]: #1393
#1399 := [trans #1394 #1397]: #1398
#1390 := [asserted]: #233
#1402 := [mp #1390 #1399]: #1395
#3044 := [unit-resolution #1402 #3051]: #1374
#3045 := [unit-resolution #705 #3044 #3047 #3046]: #680
#1716 := (or #1401 #1628)
#276 := (or #265 #234)
#1719 := (iff #276 #1716)
#1712 := (or #1628 #1401)
#1717 := (iff #1712 #1716)
#1718 := [rewrite]: #1717
#1714 := (iff #276 #1712)
#1715 := [monotonicity #1631 #1404]: #1714
#1720 := [trans #1715 #1718]: #1719
#1711 := [asserted]: #276
#1723 := [mp #1711 #1720]: #1716
#3042 := [unit-resolution #1723 #3045 #3049]: false
#3040 := [lemma #3042]: #3043
#3032 := [unit-resolution #3040 #3035 #3071]: #1506
#3033 := [unit-resolution #651 #3032 #3061 #3060]: #629
#3030 := [unit-resolution #1846 #3033]: #1814
#3031 := [unit-resolution #831 #3030 #3034 #3039]: #656
#3028 := [unit-resolution #1619 #3031]: #1343
#3029 := [unit-resolution #536 #3028 #3071]: #514
#3026 := [unit-resolution #1392 #3029]: #1370
#3027 := [unit-resolution #575 #3026]: #562
#1574 := (or #1567 #1571)
#259 := (or #257 #258)
#1575 := (iff #259 #1574)
#1576 := [monotonicity #1570 #1573]: #1575
#1566 := [asserted]: #259
#1579 := [mp #1566 #1576]: #1574
#3024 := [unit-resolution #1579 #3031]: #1567
#3025 := [unit-resolution #1402 #3029]: #1374
#3022 := [unit-resolution #705 #3025 #3035 #3024]: #680
#3023 := [unit-resolution #1723 #3022 #3027]: false
#3021 := [lemma #3023]: #3020
#2972 := [unit-resolution #3021 #2974 #2975 #3136 #3139 #3170]: #599
#1460 := (or #1414 #1445)
#48 := (= f16 f1)
#236 := (not #48)
#244 := (or #241 #236)
#1463 := (iff #244 #1460)
#1456 := (or #1445 #1414)
#1461 := (iff #1456 #1460)
#1462 := [rewrite]: #1461
#1458 := (iff #244 #1456)
#1416 := (iff #236 #1414)
#576 := (iff #48 #574)
#577 := [rewrite]: #576
#1417 := [monotonicity #577]: #1416
#1459 := [monotonicity #1448 #1417]: #1458
#1464 := [trans #1459 #1462]: #1463
#1455 := [asserted]: #244
#1467 := [mp #1455 #1464]: #1460
#2973 := [unit-resolution #1467 #2972]: #1414
#2800 := (or #574 #578)
decl f4 :: S1
#11 := f4
#441 := (= f1 f4)
#592 := (or #441 #574 #578)
#2803 := (iff #592 #2800)
#2797 := (or false #574 #578)
#2801 := (iff #2797 #2800)
#2802 := [rewrite]: #2801
#2798 := (iff #592 #2797)
#2772 := (iff #441 false)
#445 := (not #441)
#12 := (= f4 f1)
#13 := (not #12)
#446 := (iff #13 #445)
#443 := (iff #12 #441)
#444 := [rewrite]: #443
#447 := [monotonicity #444]: #446
#440 := [asserted]: #13
#450 := [mp #440 #447]: #445
#2773 := [iff-false #450]: #2772
#2799 := [monotonicity #2773]: #2798
#2804 := [trans #2799 #2802]: #2803
#50 := (= f17 f1)
#51 := (or #50 #12)
#52 := (or #48 #51)
#595 := (iff #52 #592)
#584 := (or #441 #578)
#589 := (or #574 #584)
#593 := (iff #589 #592)
#594 := [rewrite]: #593
#590 := (iff #52 #589)
#587 := (iff #51 #584)
#581 := (or #578 #441)
#585 := (iff #581 #584)
#586 := [rewrite]: #585
#582 := (iff #51 #581)
#579 := (iff #50 #578)
#580 := [rewrite]: #579
#583 := [monotonicity #580 #444]: #582
#588 := [trans #583 #586]: #587
#591 := [monotonicity #577 #588]: #590
#596 := [trans #591 #594]: #595
#573 := [asserted]: #52
#597 := [mp #573 #596]: #592
#2805 := [mp #597 #2804]: #2800
#2970 := [unit-resolution #2805 #2973]: #578
#1418 := (not #578)
#1737 := (or #1418 #1722)
#237 := (not #50)
#280 := (or #277 #237)
#1740 := (iff #280 #1737)
#1733 := (or #1722 #1418)
#1738 := (iff #1733 #1737)
#1739 := [rewrite]: #1738
#1735 := (iff #280 #1733)
#1419 := (iff #237 #1418)
#1420 := [monotonicity #580]: #1419
#1736 := [monotonicity #1725 #1420]: #1735
#1741 := [trans #1736 #1739]: #1740
#1732 := [asserted]: #280
#1744 := [mp #1732 #1741]: #1737
#2971 := [unit-resolution #1744 #2970]: #1722
#1449 := (not #602)
#1452 := (or #1445 #1449)
#56 := (= f19 f1)
#242 := (not #56)
#243 := (or #241 #242)
#1453 := (iff #243 #1452)
#1450 := (iff #242 #1449)
#603 := (iff #56 #602)
#604 := [rewrite]: #603
#1451 := [monotonicity #604]: #1450
#1454 := [monotonicity #1448 #1451]: #1453
#1444 := [asserted]: #243
#1457 := [mp #1444 #1454]: #1452
#2968 := [unit-resolution #1457 #2972]: #1449
#3076 := (or #2122 #860 #986 #989)
#3103 := [hypothesis]: #932
#2198 := (or #2122 #2183)
#137 := (= f42 f1)
#331 := (not #137)
#342 := (or #339 #331)
#2201 := (iff #342 #2198)
#2194 := (or #2183 #2122)
#2199 := (iff #2194 #2198)
#2200 := [rewrite]: #2199
#2196 := (iff #342 #2194)
#2124 := (iff #331 #2122)
#933 := (iff #137 #932)
#934 := [rewrite]: #933
#2125 := [monotonicity #934]: #2124
#2197 := [monotonicity #2186 #2125]: #2196
#2202 := [trans #2197 #2200]: #2201
#2193 := [asserted]: #342
#2205 := [mp #2193 #2202]: #2198
#3100 := [unit-resolution #2205 #3103]: #2183
#3101 := [unit-resolution #1011 #3100 #3136 #3139]: #836
#3098 := [unit-resolution #1948 #3101]: #1936
#3099 := [unit-resolution #879 #3098 #3170]: #707
#3096 := [unit-resolution #1713 #3099]: #1401
#3097 := [unit-resolution #575 #3096]: #538
#3094 := [unit-resolution #1392 #3097]: #1339
#3095 := [unit-resolution #1988 #3101]: #1632
#3092 := [unit-resolution #1703 #3099]: #1628
#3093 := [unit-resolution #1382 #3097]: #1374
#3090 := [unit-resolution #705 #3093 #3092 #3095]: #653
#3091 := [unit-resolution #1599 #3090]: #1343
#3088 := [unit-resolution #536 #3091 #3094]: #490
#3089 := [unit-resolution #1320 #3088]: #1312
#3086 := [unit-resolution #1589 #3090]: #1506
#1971 := (or #1875 #1940)
#311 := (or #307 #298)
#1974 := (iff #311 #1971)
#1967 := (or #1940 #1875)
#1972 := (iff #1967 #1971)
#1973 := [rewrite]: #1972
#1969 := (iff #311 #1967)
#1970 := [monotonicity #1942 #1878]: #1969
#1975 := [trans #1970 #1973]: #1974
#1966 := [asserted]: #311
#1978 := [mp #1966 #1975]: #1971
#3087 := [unit-resolution #1978 #3101]: #1875
#2238 := (or #1879 #2122)
#346 := (or #331 #299)
#2241 := (iff #346 #2238)
#2234 := (or #2122 #1879)
#2239 := (iff #2234 #2238)
#2240 := [rewrite]: #2239
#2236 := (iff #346 #2234)
#2237 := [monotonicity #2125 #1881]: #2236
#2242 := [trans #2237 #2240]: #2241
#2233 := [asserted]: #346
#2245 := [mp #2233 #2242]: #2238
#3084 := [unit-resolution #2245 #3103]: #1879
#3085 := [unit-resolution #1579 #3090]: #1571
#3082 := [unit-resolution #831 #3085 #3084 #3087]: #779
#3083 := [unit-resolution #1846 #3082]: #1510
#3080 := [unit-resolution #651 #3083 #3086 #3089]: #599
#3081 := [unit-resolution #1330 #3088]: #1278
#3078 := [unit-resolution #2786 #3081]: #469
#3079 := [unit-resolution #1477 #3078 #3080]: false
#3077 := [lemma #3079]: #3076
#2969 := [unit-resolution #3077 #3170 #3136 #3139]: #2122
#1747 := (or #1418 #1726)
#281 := (or #278 #237)
#1750 := (iff #281 #1747)
#1743 := (or #1726 #1418)
#1748 := (iff #1743 #1747)
#1749 := [rewrite]: #1748
#1745 := (iff #281 #1743)
#1746 := [monotonicity #1728 #1420]: #1745
#1751 := [trans #1746 #1749]: #1750
#1742 := [asserted]: #281
#1754 := [mp #1742 #1751]: #1747
#2966 := [unit-resolution #1754 #2970]: #1726
#3004 := (or #1757 #731 #782 #932)
#3018 := [hypothesis]: #1726
#3019 := [hypothesis]: #755
#2116 := (or #1757 #2030)
#330 := (or #318 #283)
#2119 := (iff #330 #2116)
#2112 := (or #2030 #1757)
#2117 := (iff #2112 #2116)
#2118 := [rewrite]: #2117
#2114 := (iff #330 #2112)
#2115 := [monotonicity #2033 #1759]: #2114
#2120 := [trans #2115 #2118]: #2119
#2111 := [asserted]: #330
#2123 := [mp #2111 #2120]: #2116
#3016 := [unit-resolution #2123 #3019]: #2030
#3017 := [unit-resolution #903 #3016 #3018]: #884
#2353 := (or #2034 #2338)
#362 := (or #359 #319)
#2356 := (iff #362 #2353)
#2349 := (or #2338 #2034)
#2354 := (iff #2349 #2353)
#2355 := [rewrite]: #2354
#2351 := (iff #362 #2349)
#2352 := [monotonicity #2341 #2036]: #2351
#2357 := [trans #2352 #2355]: #2356
#2348 := [asserted]: #362
#2360 := [mp #2348 #2357]: #2353
#3014 := [unit-resolution #2360 #3017]: #2338
#3015 := [unit-resolution #2113 #3019]: #2065
decl f43 :: S1
#138 := f43
#935 := (= f1 f43)
#3012 := [hypothesis]: #2122
decl f40 :: S1
#129 := f40
#905 := (= f1 f40)
#2061 := (not #905)
#2086 := (or #1757 #2061)
#130 := (= f40 f1)
#323 := (not #130)
#327 := (or #323 #283)
#2089 := (iff #327 #2086)
#2082 := (or #2061 #1757)
#2087 := (iff #2082 #2086)
#2088 := [rewrite]: #2087
#2084 := (iff #327 #2082)
#2063 := (iff #323 #2061)
#906 := (iff #130 #905)
#907 := [rewrite]: #906
#2064 := [monotonicity #907]: #2063
#2085 := [monotonicity #2064 #1759]: #2084
#2090 := [trans #2085 #2088]: #2089
#2081 := [asserted]: #327
#2093 := [mp #2081 #2090]: #2086
#3013 := [unit-resolution #2093 #3019]: #2061
#952 := (or #782 #905 #932 #935)
#101 := (= f32 f1)
#140 := (or #130 #101)
#139 := (= f43 f1)
#141 := (or #139 #140)
#142 := (or #137 #141)
#955 := (iff #142 #952)
#941 := (or #782 #905)
#946 := (or #935 #941)
#949 := (or #932 #946)
#953 := (iff #949 #952)
#954 := [rewrite]: #953
#950 := (iff #142 #949)
#947 := (iff #141 #946)
#944 := (iff #140 #941)
#938 := (or #905 #782)
#942 := (iff #938 #941)
#943 := [rewrite]: #942
#939 := (iff #140 #938)
#783 := (iff #101 #782)
#784 := [rewrite]: #783
#940 := [monotonicity #907 #784]: #939
#945 := [trans #940 #943]: #944
#936 := (iff #139 #935)
#937 := [rewrite]: #936
#948 := [monotonicity #937 #945]: #947
#951 := [monotonicity #934 #948]: #950
#956 := [trans #951 #954]: #955
#931 := [asserted]: #142
#957 := [mp #931 #956]: #952
#3010 := [unit-resolution #957 #3013 #3138 #3012]: #935
#2126 := (not #935)
#2485 := (or #2126 #2369)
#332 := (not #139)
#379 := (or #364 #332)
#2488 := (iff #379 #2485)
#2481 := (or #2369 #2126)
#2486 := (iff #2481 #2485)
#2487 := [rewrite]: #2486
#2483 := (iff #379 #2481)
#2127 := (iff #332 #2126)
#2128 := [monotonicity #937]: #2127
#2484 := [monotonicity #2372 #2128]: #2483
#2489 := [trans #2484 #2487]: #2488
#2480 := [asserted]: #379
#2492 := [mp #2480 #2489]: #2485
#3011 := [unit-resolution #2492 #3010]: #2369
#3008 := [unit-resolution #1083 #3011 #3015 #3014]: #1061
#3009 := [unit-resolution #2370 #3017]: #2342
#3006 := [unit-resolution #1197 #3009]: #1184
#2673 := (or #2373 #2633)
#404 := (or #399 #365)
#2676 := (iff #404 #2673)
#2669 := (or #2633 #2373)
#2674 := (iff #2669 #2673)
#2675 := [rewrite]: #2674
#2671 := (iff #404 #2669)
#2672 := [monotonicity #2636 #2375]: #2671
#2677 := [trans #2672 #2675]: #2676
#2668 := [asserted]: #404
#2680 := [mp #2668 #2677]: #2673
#3007 := [unit-resolution #2680 #3006 #3008]: false
#3005 := [lemma #3007]: #3004
#2967 := [unit-resolution #3005 #2966 #3138 #2969]: #1757
#772 := (or #602 #728 #752 #755)
#95 := (or #86 #56)
#96 := (or #94 #95)
#97 := (or #92 #96)
#775 := (iff #97 #772)
#761 := (or #602 #728)
#766 := (or #755 #761)
#769 := (or #752 #766)
#773 := (iff #769 #772)
#774 := [rewrite]: #773
#770 := (iff #97 #769)
#767 := (iff #96 #766)
#764 := (iff #95 #761)
#758 := (or #728 #602)
#762 := (iff #758 #761)
#763 := [rewrite]: #762
#759 := (iff #95 #758)
#760 := [monotonicity #730 #604]: #759
#765 := [trans #760 #763]: #764
#768 := [monotonicity #757 #765]: #767
#771 := [monotonicity #754 #768]: #770
#776 := [trans #771 #774]: #775
#751 := [asserted]: #97
#777 := [mp #751 #776]: #772
#2964 := [unit-resolution #777 #2967 #2968 #2971]: #752
#1829 := (or #1753 #1814)
#293 := (or #290 #282)
#1832 := (iff #293 #1829)
#1825 := (or #1814 #1753)
#1830 := (iff #1825 #1829)
#1831 := [rewrite]: #1830
#1827 := (iff #293 #1825)
#1828 := [monotonicity #1817 #1756]: #1827
#1833 := [trans #1828 #1831]: #1832
#1824 := [asserted]: #293
#1836 := [mp #1824 #1833]: #1829
#2965 := [unit-resolution #1836 #2964]: #1814
#2986 := (or #1339 #779 #986 #989 #860)
#3002 := [hypothesis]: #514
#3003 := [unit-resolution #1392 #3002]: #1370
#3000 := [unit-resolution #575 #3003]: #562
#3001 := [unit-resolution #1713 #3000]: #1689
#2998 := [unit-resolution #879 #3001 #3170]: #833
#2999 := [unit-resolution #1958 #2998]: #1875
#2996 := [hypothesis]: #1814
#2997 := [unit-resolution #1948 #2998]: #1940
#2994 := [unit-resolution #1011 #2997 #3136 #3139]: #959
#2995 := [unit-resolution #2215 #2994]: #1879
#2992 := [unit-resolution #1723 #3000]: #1628
#2993 := [unit-resolution #1402 #3002]: #1374
#2990 := [unit-resolution #1968 #2998]: #1632
#2991 := [unit-resolution #705 #2990 #2993 #2992]: #653
#2988 := [unit-resolution #1579 #2991]: #1571
#2989 := [unit-resolution #831 #2988 #2995 #2996 #2999]: false
#2987 := [lemma #2989]: #2986
#2962 := [unit-resolution #2987 #2965 #3136 #3139 #3170]: #1339
#2963 := [unit-resolution #536 #2962 #2974]: #517
#2960 := [unit-resolution #1619 #2963]: #1571
#2979 := (or #1936 #779 #656 #986 #989)
#2984 := [hypothesis]: #833
#2985 := [unit-resolution #1948 #2984]: #1940
#2982 := [unit-resolution #1011 #2985 #3136 #3139]: #959
#2983 := [hypothesis]: #1571
#2980 := [unit-resolution #1958 #2984]: #1875
#2981 := [unit-resolution #831 #2980 #2996 #2983]: #809
#2978 := [unit-resolution #2215 #2981 #2982]: false
#2976 := [lemma #2978]: #2979
#2961 := [unit-resolution #2976 #2965 #2960 #3136 #3139]: #1936
#2958 := [unit-resolution #879 #2961 #3170]: #707
#2959 := [unit-resolution #1703 #2958]: #1628
#2956 := [unit-resolution #1599 #2963]: #1567
#2957 := [unit-resolution #1713 #2958]: #1401
#2954 := [unit-resolution #575 #2957]: #538
#2955 := [unit-resolution #1382 #2954]: #1374
#2952 := [unit-resolution #705 #2955 #2956 #2959]: #683
#2953 := [unit-resolution #1988 #2952]: #1940
#2950 := [unit-resolution #1011 #2953 #3136 #3139]: #959
#2951 := [unit-resolution #1998 #2952]: #1875
#2948 := [unit-resolution #831 #2951 #2965 #2960]: #809
#2949 := [unit-resolution #2215 #2948 #2950]: false
#2947 := [lemma #2949]: #2946
#2909 := [unit-resolution #2947 #2908 #2911 #2910 #3138]: #1278
#2906 := [unit-resolution #2786 #2909]: #469
#1500 := (or #1281 #1414)
#248 := (or #236 #215)
#1503 := (iff #248 #1500)
#1496 := (or #1414 #1281)
#1501 := (iff #1496 #1500)
#1502 := [rewrite]: #1501
#1498 := (iff #248 #1496)
#1499 := [monotonicity #1417 #1283]: #1498
#1504 := [trans #1499 #1502]: #1503
#1495 := [asserted]: #248
#1507 := [mp #1495 #1504]: #1500
#2907 := [unit-resolution #1507 #2906]: #1414
#2904 := [unit-resolution #2805 #2907]: #578
#2905 := [unit-resolution #1744 #2904]: #1722
#1490 := (or #1281 #1449)
#247 := (or #242 #215)
#1493 := (iff #247 #1490)
#1486 := (or #1449 #1281)
#1491 := (iff #1486 #1490)
#1492 := [rewrite]: #1491
#1488 := (iff #247 #1486)
#1489 := [monotonicity #1451 #1283]: #1488
#1494 := [trans #1489 #1492]: #1493
#1485 := [asserted]: #247
#1497 := [mp #1485 #1494]: #1490
#2902 := [unit-resolution #1497 #2906]: #1449
#2903 := [unit-resolution #3077 #2910 #2908 #2911]: #2122
#2900 := [unit-resolution #1754 #2904]: #1726
#2901 := [unit-resolution #3005 #2900 #3138 #2903]: #1757
#2898 := [unit-resolution #777 #2901 #2902 #2905]: #752
#2899 := [unit-resolution #1836 #2898]: #1814
#2896 := [unit-resolution #1876 #2898]: #1510
#2897 := [unit-resolution #1477 #2906]: #1445
#2894 := [unit-resolution #2987 #2899 #2908 #2911 #2910]: #1339
#2895 := [unit-resolution #2914 #2894 #2897 #2896]: #1571
#2892 := [unit-resolution #2976 #2895 #2899 #2908 #2911]: #1936
#2893 := [unit-resolution #879 #2892 #2910]: #707
#2890 := [unit-resolution #1703 #2893]: #1628
#2936 := (or #1567 #514 #599 #629)
#2945 := [hypothesis]: #653
#2942 := [unit-resolution #1589 #2945]: #1506
#2943 := [unit-resolution #651 #2942 #3061 #2944]: #493
#2941 := [unit-resolution #1599 #2945]: #1343
#2938 := [unit-resolution #536 #2941 #2940]: #490
#2939 := [unit-resolution #1320 #2938 #2943]: false
#2937 := [lemma #2939]: #2936
#2891 := [unit-resolution #2937 #2894 #2897 #2896]: #1567
#2925 := (or #656 #653 #860 #779 #809 #986 #989)
#2934 := [hypothesis]: #1879
#2935 := [unit-resolution #831 #2983 #2996 #2934]: #806
#2932 := [unit-resolution #1998 #2935]: #1632
#2933 := [hypothesis]: #1567
#2930 := [unit-resolution #2976 #2983 #2996 #3136 #3139]: #1936
#2931 := [unit-resolution #879 #2930 #3170]: #707
#2928 := [unit-resolution #1703 #2931]: #1628
#2929 := [unit-resolution #705 #2928 #2933 #2932]: #541
#2926 := [unit-resolution #1713 #2931]: #1401
#2927 := [unit-resolution #575 #2926]: #538
#2924 := [unit-resolution #1382 #2927 #2929]: false
#2922 := [lemma #2924]: #2925
#2888 := [unit-resolution #2922 #2895 #2910 #2899 #2891 #2908 #2911]: #809
#2889 := [unit-resolution #2215 #2888]: #2183
#2886 := [unit-resolution #1011 #2889 #2908 #2911]: #836
#2887 := [unit-resolution #1988 #2886]: #1632
#2884 := [unit-resolution #1713 #2893]: #1401
#2885 := [unit-resolution #575 #2884]: #538
#2882 := [unit-resolution #1382 #2885]: #1374
#2883 := [unit-resolution #705 #2882 #2887 #2891 #2890]: false
#2881 := [lemma #2883]: #2880
#2851 := [unit-resolution #2881 #3138]: #2556
#2848 := [unit-resolution #2877 #2851]: #1239
#2849 := [unit-resolution #2726 #2848]: #2679
#2846 := [hypothesis]: #2491
#2847 := [unit-resolution #2736 #2848]: #2495
#2187 := (not #962)
#2844 := [hypothesis]: #469
#2845 := [unit-resolution #1507 #2844]: #1414
#2842 := [unit-resolution #2805 #2845]: #578
#2843 := [unit-resolution #1754 #2842]: #1726
#2840 := [unit-resolution #1497 #2844]: #1449
#2865 := [hypothesis]: #1753
#2841 := [unit-resolution #1744 #2842]: #1722
#2838 := [unit-resolution #777 #2841 #2865 #2840]: #755
#2839 := [unit-resolution #3005 #2838 #3138 #2843]: #932
#2218 := (or #2122 #2187)
#146 := (= f45 f1)
#340 := (not #146)
#344 := (or #340 #331)
#2221 := (iff #344 #2218)
#2214 := (or #2187 #2122)
#2219 := (iff #2214 #2218)
#2220 := [rewrite]: #2219
#2216 := (iff #344 #2214)
#2188 := (iff #340 #2187)
#963 := (iff #146 #962)
#964 := [rewrite]: #963
#2189 := [monotonicity #964]: #2188
#2217 := [monotonicity #2189 #2125]: #2216
#2222 := [trans #2217 #2220]: #2221
#2213 := [asserted]: #344
#2225 := [mp #2213 #2222]: #2218
#2836 := [unit-resolution #2225 #2839]: #2187
#1132 := (or #962 #1085 #1112 #1115)
#185 := (or #175 #146)
#186 := (or #184 #185)
#187 := (or #182 #186)
#1135 := (iff #187 #1132)
#1121 := (or #962 #1085)
#1126 := (or #1115 #1121)
#1129 := (or #1112 #1126)
#1133 := (iff #1129 #1132)
#1134 := [rewrite]: #1133
#1130 := (iff #187 #1129)
#1127 := (iff #186 #1126)
#1124 := (iff #185 #1121)
#1118 := (or #1085 #962)
#1122 := (iff #1118 #1121)
#1123 := [rewrite]: #1122
#1119 := (iff #185 #1118)
#1120 := [monotonicity #1087 #964]: #1119
#1125 := [trans #1120 #1123]: #1124
#1128 := [monotonicity #1117 #1125]: #1127
#1131 := [monotonicity #1114 #1128]: #1130
#1136 := [trans #1131 #1134]: #1135
#1111 := [asserted]: #187
#1137 := [mp #1111 #1136]: #1132
#2837 := [unit-resolution #1137 #2836 #2847 #2846]: #1085
#2834 := [unit-resolution #2442 #2837]: #2434
#2835 := [unit-resolution #2123 #2838]: #2030
#2832 := [unit-resolution #903 #2835 #2843]: #884
#2833 := [unit-resolution #2370 #2832]: #2342
#2830 := [unit-resolution #1197 #2833]: #1184
#2831 := [unit-resolution #2660 #2830]: #2646
#2828 := [unit-resolution #1237 #2831 #2834 #2849]: false
#2826 := [lemma #2828]: #2829
#3290 := [unit-resolution #2826 #3289 #3138 #3286]: #1112
#2607 := (or #2248 #2491)
#395 := (or #380 #348)
#2610 := (iff #395 #2607)
#2603 := (or #2491 #2248)
#2608 := (iff #2603 #2607)
#2609 := [rewrite]: #2608
#2605 := (iff #395 #2603)
#2606 := [monotonicity #2494 #2250]: #2605
#2611 := [trans #2606 #2609]: #2610
#2602 := [asserted]: #395
#2614 := [mp #2602 #2611]: #2607
#3291 := [unit-resolution #2614 #3290]: #2248
#3292 := [unit-resolution #2574 #3290]: #2552
#3293 := [unit-resolution #2859 #3292]: #1013
#3294 := [unit-resolution #2319 #3293]: #2244
#3295 := [unit-resolution #2329 #3293]: #1997
#2861 := (or #989 #782 #752 #860 #986)
#2878 := [unit-resolution #3077 #3139 #3170 #3136]: #2122
#2879 := [unit-resolution #2947 #3139 #3136 #3170 #3138]: #1278
#2868 := [unit-resolution #2786 #2879]: #469
#2869 := [unit-resolution #1507 #2868]: #1414
#2866 := [unit-resolution #2805 #2869]: #578
#2867 := [unit-resolution #1754 #2866]: #1726
#2864 := [unit-resolution #1497 #2868]: #1449
#2862 := [unit-resolution #1744 #2866]: #1722
#2863 := [unit-resolution #777 #2862 #2865 #2864]: #755
#2860 := [unit-resolution #3005 #2863 #2867 #3138 #2878]: false
#2850 := [lemma #2860]: #2861
#3296 := [unit-resolution #2850 #3295 #3294 #3289 #3291 #3138]: false
#3298 := [lemma #3296]: #3297
#3299 := [unit-resolution #3298 #2940 #3138]: #1571
#3283 := (or #656 #514 #782 #653)
#3275 := (or #707 #782 #656 #514)
#3213 := [hypothesis]: #1689
#3259 := (or #2244 #782 #656 #707 #514)
#3173 := (or #1814 #860 #782 #514)
#2791 := [hypothesis]: #779
#2792 := [unit-resolution #1846 #2791]: #1510
#2789 := [unit-resolution #1836 #2791]: #1753
#2793 := (or #1112 #782 #752 #629 #514)
#2827 := [unit-resolution #2826 #2846 #3138 #2865]: #1281
#2824 := [unit-resolution #2786 #2827]: #465
#2825 := [unit-resolution #1340 #2824]: #1312
#2822 := [unit-resolution #1330 #2824]: #1308
#2823 := [unit-resolution #536 #2822 #2940]: #517
#2820 := [unit-resolution #1629 #2823]: #1506
#2821 := [unit-resolution #651 #2820 #2825 #2944]: #599
#2818 := [unit-resolution #1467 #2821]: #1414
#2819 := [unit-resolution #2805 #2818]: #578
#2816 := [unit-resolution #1754 #2819]: #1726
#2817 := [unit-resolution #1457 #2821]: #1449
#2814 := [unit-resolution #1744 #2819]: #1722
#2815 := [unit-resolution #777 #2814 #2865 #2817]: #755
#2812 := [unit-resolution #3005 #2815 #3138 #2816]: #932
#2813 := [unit-resolution #2225 #2812]: #2187
#2810 := [unit-resolution #1137 #2813 #2847 #2846]: #1085
#2811 := [unit-resolution #2442 #2810]: #2434
#2808 := [unit-resolution #2123 #2815]: #2030
#2809 := [unit-resolution #903 #2808 #2816]: #884
#2806 := [unit-resolution #2370 #2809]: #2342
#2807 := [unit-resolution #1197 #2806]: #1184
#2795 := [unit-resolution #2660 #2807]: #2646
#2796 := [unit-resolution #1237 #2795 #2811 #2849]: false
#2794 := [lemma #2796]: #2793
#2790 := [unit-resolution #2794 #2789 #3138 #2792 #2940]: #1112
#2787 := [unit-resolution #2574 #2790]: #2552
#2788 := [unit-resolution #2859 #2787]: #1013
#2768 := [unit-resolution #2614 #2790]: #2248
#2764 := [unit-resolution #2850 #2768 #2789 #3170 #3138]: #986
#3172 := [unit-resolution #2319 #2764 #2788]: false
#3174 := [lemma #3172]: #3173
#3248 := [unit-resolution #3174 #3247 #3138 #2940]: #1814
#3249 := [unit-resolution #879 #3247 #3213]: #833
#3250 := [unit-resolution #1958 #3249]: #1875
#3251 := [unit-resolution #831 #3250 #3248 #2983]: #809
#3252 := [unit-resolution #2245 #3251]: #2122
#2228 := (or #1879 #2187)
#345 := (or #340 #299)
#2231 := (iff #345 #2228)
#2224 := (or #2187 #1879)
#2229 := (iff #2224 #2228)
#2230 := [rewrite]: #2229
#2226 := (iff #345 #2224)
#2227 := [monotonicity #2189 #1881]: #2226
#2232 := [trans #2227 #2230]: #2231
#2223 := [asserted]: #345
#2235 := [mp #2223 #2232]: #2228
#3256 := [unit-resolution #2235 #3251]: #2187
#3257 := [unit-resolution #1137 #3256 #2847 #3255]: #1085
#3187 := (or #2430 #782 #932)
#3177 := [unit-resolution #1237 #3176 #2849]: #1196
#3178 := [unit-resolution #2660 #3177]: #2633
#3179 := [unit-resolution #1197 #3178]: #1037
#3180 := [unit-resolution #2670 #3177]: #2373
#2455 := (or #2126 #2430)
#376 := (or #372 #332)
#2458 := (iff #376 #2455)
#2451 := (or #2430 #2126)
#2456 := (iff #2451 #2455)
#2457 := [rewrite]: #2456
#2453 := (iff #376 #2451)
#2454 := [monotonicity #2433 #2128]: #2453
#2459 := [trans #2454 #2457]: #2458
#2450 := [asserted]: #376
#2462 := [mp #2450 #2459]: #2455
#3182 := [unit-resolution #2462 #3175]: #2126
#3183 := [unit-resolution #957 #3182 #3138 #3012]: #905
#2068 := (or #2061 #2065)
#325 := (or #323 #324)
#2069 := (iff #325 #2068)
#2070 := [monotonicity #2064 #2067]: #2069
#2060 := [asserted]: #325
#2073 := [mp #2060 #2070]: #2068
#3184 := [unit-resolution #2073 #3183]: #2065
#3185 := [unit-resolution #1083 #3184 #3181 #3180]: #1034
#3186 := [unit-resolution #2350 #3185 #3179]: false
#3188 := [lemma #3186]: #3187
#3258 := [unit-resolution #3188 #3257 #3252 #3138]: false
#3260 := [lemma #3258]: #3259
#3261 := [unit-resolution #3260 #3213 #2983 #3138 #2940]: #2244
#3244 := (or #986 #782 #514 #989 #656 #707)
#3216 := (or #860 #656 #986 #989 #707 #782 #514)
#3212 := [unit-resolution #3174 #3170 #3138 #2940]: #1814
#3214 := [unit-resolution #879 #3170 #3213]: #833
#3215 := [unit-resolution #2976 #3214 #3212 #2983 #3136 #3139]: false
#3217 := [lemma #3215]: #3216
#3236 := [unit-resolution #3217 #3136 #2983 #3139 #3213 #3138 #2940]: #860
#3237 := [unit-resolution #2329 #3236]: #2305
#3238 := [unit-resolution #2859 #3237]: #1139
#3239 := [unit-resolution #2574 #3238]: #2491
#3234 := (or #779 #656 #989 #986 #782 #1112)
#3224 := (or #2187 #779 #656 #989 #986)
#3218 := [hypothesis]: #962
#2190 := (or #2183 #2187)
#341 := (or #339 #340)
#2191 := (iff #341 #2190)
#2192 := [monotonicity #2186 #2189]: #2191
#2182 := [asserted]: #341
#2195 := [mp #2182 #2192]: #2190
#3219 := [unit-resolution #2195 #3218]: #2183
#3220 := [unit-resolution #1011 #3219 #3139 #3136]: #836
#3221 := [unit-resolution #2235 #3218]: #1879
#3222 := [unit-resolution #831 #3221 #2996 #2983]: #806
#3223 := [unit-resolution #1978 #3222 #3220]: false
#3225 := [lemma #3223]: #3224
#3226 := [unit-resolution #3225 #2996 #2983 #3139 #3136]: #2187
#3227 := [unit-resolution #1137 #3226 #2847 #2846]: #1085
#3228 := [unit-resolution #3188 #3227 #3138]: #932
#3229 := [unit-resolution #2205 #3228]: #2183
#3230 := [unit-resolution #1011 #3229 #3139 #3136]: #836
#3231 := [unit-resolution #2245 #3228]: #1879
#3232 := [unit-resolution #831 #3231 #2996 #2983]: #806
#3233 := [unit-resolution #1978 #3232 #3230]: false
#3235 := [lemma #3233]: #3234
#3240 := [unit-resolution #3235 #3136 #3139 #2983 #3138 #3239]: #779
#3241 := [unit-resolution #1836 #3240]: #1753
#3242 := [unit-resolution #1846 #3240]: #1510
#3243 := [unit-resolution #2794 #3242 #3241 #3138 #3239 #2940]: false
#3245 := [lemma #3243]: #3244
#3262 := [unit-resolution #3245 #3261 #2940 #3138 #2983 #3213]: #989
#2577 := (or #2248 #2552)
#392 := (or #388 #348)
#2580 := (iff #392 #2577)
#2573 := (or #2552 #2248)
#2578 := (iff #2573 #2577)
#2579 := [rewrite]: #2578
#2575 := (iff #392 #2573)
#2576 := [monotonicity #2555 #2250]: #2575
#2581 := [trans #2576 #2579]: #2580
#2572 := [asserted]: #392
#2584 := [mp #2572 #2581]: #2577
#3263 := [unit-resolution #2584 #3262]: #2552
#3264 := [unit-resolution #2859 #3263]: #1013
#3265 := [unit-resolution #2329 #3264]: #1997
#3266 := [unit-resolution #3174 #3265 #3138 #2940]: #1814
#3267 := [unit-resolution #879 #3265 #3213]: #833
#3268 := [unit-resolution #1958 #3267]: #1875
#3269 := [unit-resolution #831 #3268 #3266 #2983]: #809
#3270 := [unit-resolution #2245 #3269]: #2122
#3271 := [unit-resolution #2614 #3262]: #2491
#3272 := [unit-resolution #2235 #3269]: #2187
#3273 := [unit-resolution #1137 #3272 #2847 #3271]: #1085
#3274 := [unit-resolution #3188 #3273 #3270 #3138]: false
#3276 := [lemma #3274]: #3275
#3277 := [unit-resolution #3276 #2983 #3138 #2940]: #707
#3278 := [unit-resolution #1703 #3277]: #1628
#3210 := (or #541 #782 #656 #514 #680 #653)
#3189 := [hypothesis]: #1628
#3190 := [hypothesis]: #1374
#3191 := [unit-resolution #705 #3190 #2933 #3189]: #683
#3192 := [unit-resolution #1998 #3191]: #1875
#555 := (or #514 #538 #541)
#42 := (or #41 #33)
#43 := (or #39 #42)
#558 := (iff #43 #555)
#547 := (or #514 #541)
#552 := (or #538 #547)
#556 := (iff #552 #555)
#557 := [rewrite]: #556
#553 := (iff #43 #552)
#550 := (iff #42 #547)
#544 := (or #541 #514)
#548 := (iff #544 #547)
#549 := [rewrite]: #548
#545 := (iff #42 #544)
#546 := [monotonicity #543 #516]: #545
#551 := [trans #546 #549]: #550
#554 := [monotonicity #540 #551]: #553
#559 := [trans #554 #557]: #558
#537 := [asserted]: #43
#560 := [mp #537 #559]: #555
#3193 := [unit-resolution #560 #3190 #2940]: #538
#1408 := (or #1370 #1401)
#235 := (or #234 #229)
#1411 := (iff #235 #1408)
#1405 := (or #1401 #1370)
#1409 := (iff #1405 #1408)
#1410 := [rewrite]: #1409
#1406 := (iff #235 #1405)
#1407 := [monotonicity #1404 #1373]: #1406
#1412 := [trans #1407 #1410]: #1411
#1400 := [asserted]: #235
#1415 := [mp #1400 #1412]: #1408
#3194 := [unit-resolution #1415 #3193]: #1401
#721 := (or #562 #680 #707)
#83 := (or #75 #45)
#84 := (or #82 #83)
#724 := (iff #84 #721)
#713 := (or #562 #680)
#718 := (or #707 #713)
#722 := (iff #718 #721)
#723 := [rewrite]: #722
#719 := (iff #84 #718)
#716 := (iff #83 #713)
#710 := (or #680 #562)
#714 := (iff #710 #713)
#715 := [rewrite]: #714
#711 := (iff #83 #710)
#712 := [monotonicity #682 #564]: #711
#717 := [trans #712 #715]: #716
#720 := [monotonicity #709 #717]: #719
#725 := [trans #720 #723]: #724
#706 := [asserted]: #84
#726 := [mp #706 #725]: #721
#3195 := [unit-resolution #726 #3194 #3189]: #707
#2014 := (or #1689 #1997)
#316 := (or #314 #273)
#2017 := (iff #316 #2014)
#2010 := (or #1997 #1689)
#2015 := (iff #2010 #2014)
#2016 := [rewrite]: #2015
#2012 := (iff #316 #2010)
#2013 := [monotonicity #2000 #1692]: #2012
#2018 := [trans #2013 #2016]: #2017
#2009 := [asserted]: #316
#2021 := [mp #2009 #2018]: #2014
#3196 := [unit-resolution #2021 #3195]: #1997
#3197 := [unit-resolution #3174 #3196 #3138 #2940]: #1814
#3198 := [unit-resolution #831 #3197 #3192 #2983]: #809
#3199 := [unit-resolution #2235 #3198]: #2187
#3200 := [unit-resolution #2245 #3198]: #2122
#3201 := [unit-resolution #3188 #3200 #3138]: #2430
#3202 := [unit-resolution #1137 #3201 #2847 #3199]: #1112
#3203 := [unit-resolution #2574 #3202]: #2552
#3204 := [unit-resolution #2859 #3203]: #1013
#3205 := [unit-resolution #2215 #3198]: #2183
#3206 := [unit-resolution #1988 #3191]: #1940
#3207 := [unit-resolution #2614 #3202]: #2248
#3208 := [unit-resolution #1011 #3207 #3206 #3205]: #986
#3209 := [unit-resolution #2319 #3208 #3204]: false
#3211 := [lemma #3209]: #3210
#3279 := [unit-resolution #3211 #3278 #2983 #2940 #3138 #2933]: #541
#3280 := [unit-resolution #1713 #3277]: #1401
#3281 := [unit-resolution #575 #3280]: #538
#3282 := [unit-resolution #1382 #3281 #3279]: false
#3284 := [lemma #3282]: #3283
#3300 := [unit-resolution #3284 #3299 #3138 #2940]: #653
#3301 := [unit-resolution #1599 #3300]: #1343
#3302 := [unit-resolution #536 #3301 #2940]: #490
#3303 := [unit-resolution #1330 #3302]: #1278
#3304 := [unit-resolution #2786 #3303]: #469
#3305 := [unit-resolution #1477 #3304]: #1445
#3306 := [unit-resolution #2937 #3305 #2940 #3300]: #629
#3307 := [unit-resolution #1876 #3306]: #1753
#3308 := [unit-resolution #2826 #3307 #3138 #3304]: #1112
#3309 := [unit-resolution #2574 #3308]: #2552
#3310 := [unit-resolution #2859 #3309]: #1013
#3311 := [unit-resolution #1507 #3304]: #1414
#3312 := [unit-resolution #2805 #3311]: #578
#3313 := [unit-resolution #1754 #3312]: #1726
#3314 := [unit-resolution #1497 #3304]: #1449
#3315 := [unit-resolution #1744 #3312]: #1722
#3316 := [unit-resolution #777 #3315 #3307 #3314]: #755
#3317 := [unit-resolution #3005 #3316 #3138 #3313]: #932
#3318 := [unit-resolution #3276 #3299 #3138 #2940]: #707
#3319 := [unit-resolution #2021 #3318]: #1997
#3320 := [unit-resolution #2614 #3308]: #2248
#3321 := [unit-resolution #3077 #3320 #3319 #3317]: #986
#3322 := [unit-resolution #2319 #3321 #3310]: false
#3324 := [lemma #3322]: #3323
#3326 := [unit-resolution #3324 #3138]: #514
#3394 := [unit-resolution #1392 #3326]: #1370
#3395 := [unit-resolution #575 #3394]: #562
#3396 := [unit-resolution #1713 #3395]: #1689
#3466 := [unit-resolution #1723 #3395]: #1628
#3467 := [unit-resolution #1402 #3326]: #1374
#3464 := (or #656 #782)
#3428 := (or #2248 #782 #656)
#3392 := [hypothesis]: #989
#3393 := [unit-resolution #2614 #3392]: #2491
#3397 := [unit-resolution #2584 #3392]: #2552
#3398 := [unit-resolution #2859 #3397]: #1013
#3399 := [unit-resolution #2329 #3398]: #1997
#3400 := [unit-resolution #879 #3399 #3396]: #833
#3401 := [unit-resolution #1958 #3400]: #1875
#3390 := (or #1879 #782 #1112)
#3385 := [hypothesis]: #809
#3386 := [unit-resolution #2245 #3385]: #2122
#3387 := [unit-resolution #2235 #3385]: #2187
#3388 := [unit-resolution #1137 #3387 #2847 #2846]: #1085
#3389 := [unit-resolution #3188 #3388 #3386 #3138]: false
#3391 := [lemma #3389]: #3390
#3402 := [unit-resolution #3391 #3393 #3138]: #1879
#3403 := [unit-resolution #831 #3402 #2983 #3401]: #779
#3404 := [unit-resolution #1846 #3403]: #1510
#1354 := (or #1308 #1339)
#227 := (or #224 #219)
#1357 := (iff #227 #1354)
#1350 := (or #1339 #1308)
#1355 := (iff #1350 #1354)
#1356 := [rewrite]: #1355
#1352 := (iff #227 #1350)
#1353 := [monotonicity #1342 #1311]: #1352
#1358 := [trans #1353 #1356]: #1357
#1349 := [asserted]: #227
#1361 := [mp #1349 #1358]: #1354
#3338 := [unit-resolution #1361 #3326]: #1308
#3405 := [unit-resolution #1968 #3400]: #1632
#3406 := [unit-resolution #3040 #3405 #3338]: #1506
#3407 := [unit-resolution #1836 #3403]: #1753
#3408 := [unit-resolution #2826 #3407 #3138 #3393]: #1281
#3409 := [unit-resolution #2786 #3408]: #465
#3410 := [unit-resolution #1340 #3409]: #1312
#3411 := [unit-resolution #651 #3410 #3406 #3404]: #599
#3412 := [unit-resolution #1467 #3411]: #1414
#3413 := [unit-resolution #2805 #3412]: #578
#3414 := [unit-resolution #1754 #3413]: #1726
#3415 := [unit-resolution #1457 #3411]: #1449
#3416 := [unit-resolution #1744 #3413]: #1722
#3417 := [unit-resolution #777 #3416 #3407 #3415]: #755
#3418 := [unit-resolution #3005 #3417 #3138 #3414]: #932
#3419 := [unit-resolution #2225 #3418]: #2187
#3420 := [unit-resolution #1137 #3419 #2847 #3393]: #1085
#3421 := [unit-resolution #2442 #3420]: #2434
#3422 := [unit-resolution #2123 #3417]: #2030
#3423 := [unit-resolution #903 #3422 #3414]: #884
#3424 := [unit-resolution #2370 #3423]: #2342
#3425 := [unit-resolution #1197 #3424]: #1184
#3426 := [unit-resolution #2660 #3425]: #2646
#3427 := [unit-resolution #1237 #3426 #3421 #2849]: false
#3429 := [lemma #3427]: #3428
#3430 := [unit-resolution #3429 #2983 #3138]: #2248
#3383 := (or #989 #986 #782 #656)
#3329 := (or #860 #986 #989 #782)
#3325 := [unit-resolution #2850 #3170 #3136 #3139 #3138]: #752
#3327 := [unit-resolution #2987 #3170 #3326 #3136 #3139]: #779
#3328 := [unit-resolution #1836 #3327 #3325]: false
#3330 := [lemma #3328]: #3329
#3331 := [unit-resolution #3330 #3139 #3136 #3138]: #860
#3332 := [unit-resolution #2329 #3331]: #2305
#3333 := [unit-resolution #2859 #3332]: #1139
#3334 := [unit-resolution #2574 #3333]: #2491
#3355 := [unit-resolution #3235 #3334 #2983 #3136 #3138 #3139]: #779
#3356 := [unit-resolution #1846 #3355]: #1510
#3357 := [unit-resolution #1836 #3355]: #1753
#3353 := (or #932 #782 #752 #629 #986 #989)
#3335 := [unit-resolution #2826 #2865 #3138 #3334]: #1281
#3336 := [unit-resolution #2786 #3335]: #465
#3337 := [unit-resolution #1340 #3336]: #1312
#3339 := [unit-resolution #3188 #3012 #3138]: #2430
#3340 := [unit-resolution #1137 #3339 #2847 #3334]: #962
#3341 := [unit-resolution #2195 #3340]: #2183
#3342 := [unit-resolution #1011 #3341 #3136 #3139]: #836
#3343 := [unit-resolution #1988 #3342]: #1632
#3344 := [unit-resolution #3040 #3343 #3338]: #1506
#3345 := [unit-resolution #651 #3344 #2944 #3337]: #599
#3346 := [unit-resolution #1467 #3345]: #1414
#3347 := [unit-resolution #2805 #3346]: #578
#3348 := [unit-resolution #1754 #3347]: #1726
#3349 := [unit-resolution #1457 #3345]: #1449
#3350 := [unit-resolution #1744 #3347]: #1722
#3351 := [unit-resolution #777 #3350 #2865 #3349]: #755
#3352 := [unit-resolution #3005 #3351 #3348 #3138 #3012]: false
#3354 := [lemma #3352]: #3353
#3358 := [unit-resolution #3354 #3357 #3138 #3356 #3136 #3139]: #932
#3359 := [unit-resolution #2225 #3358]: #2187
#3360 := [unit-resolution #1137 #3359 #2847 #3334]: #1085
#3361 := [unit-resolution #2442 #3360]: #2434
#3362 := [unit-resolution #1237 #3361 #2849]: #1196
#3363 := [unit-resolution #2670 #3362]: #2373
#3364 := [unit-resolution #2452 #3360]: #2369
#3365 := [unit-resolution #2660 #3362]: #2633
#3366 := [unit-resolution #1197 #3365]: #1037
#3367 := [unit-resolution #2350 #3366]: #2338
#3368 := [unit-resolution #1083 #3367 #3364 #3363]: #908
#3369 := [unit-resolution #2826 #3357 #3138 #3334]: #1281
#3370 := [unit-resolution #2786 #3369]: #465
#3371 := [unit-resolution #1340 #3370]: #1312
#3372 := [unit-resolution #2205 #3358]: #2183
#3373 := [unit-resolution #1011 #3372 #3136 #3139]: #836
#3374 := [unit-resolution #1988 #3373]: #1632
#3375 := [unit-resolution #3040 #3374 #3338]: #1506
#3376 := [unit-resolution #651 #3375 #3356 #3371]: #599
#3377 := [unit-resolution #1467 #3376]: #1414
#3378 := [unit-resolution #2805 #3377]: #578
#3379 := [unit-resolution #1754 #3378]: #1726
#3380 := [unit-resolution #2370 #3366]: #2034
#3381 := [unit-resolution #903 #3380 #3379]: #881
#3382 := [unit-resolution #2103 #3381 #3368]: false
#3384 := [lemma #3382]: #3383
#3431 := [unit-resolution #3384 #3430 #3138 #2983]: #986
#3432 := [unit-resolution #2319 #3431]: #2305
#3433 := [unit-resolution #2859 #3432]: #1139
#3434 := [unit-resolution #2574 #3433]: #2491
#3435 := [unit-resolution #2339 #3431]: #1997
#3436 := [unit-resolution #879 #3435 #3396]: #833
#3437 := [unit-resolution #1958 #3436]: #1875
#3438 := [unit-resolution #3391 #3434 #3138]: #1879
#3439 := [unit-resolution #831 #3438 #2983 #3437]: #779
#3440 := [unit-resolution #1846 #3439]: #1510
#3441 := [unit-resolution #1968 #3436]: #1632
#3442 := [unit-resolution #3040 #3441 #3338]: #1506
#3443 := [unit-resolution #1836 #3439]: #1753
#3444 := [unit-resolution #2826 #3443 #3138 #3434]: #1281
#3445 := [unit-resolution #2786 #3444]: #465
#3446 := [unit-resolution #1340 #3445]: #1312
#3447 := [unit-resolution #651 #3446 #3442 #3440]: #599
#3448 := [unit-resolution #1467 #3447]: #1414
#3449 := [unit-resolution #2805 #3448]: #578
#3450 := [unit-resolution #1754 #3449]: #1726
#3451 := [unit-resolution #1457 #3447]: #1449
#3452 := [unit-resolution #1744 #3449]: #1722
#3453 := [unit-resolution #777 #3452 #3443 #3451]: #755
#3454 := [unit-resolution #3005 #3453 #3138 #3450]: #932
#3455 := [unit-resolution #2225 #3454]: #2187
#3456 := [unit-resolution #1137 #3455 #2847 #3434]: #1085
#3457 := [unit-resolution #2442 #3456]: #2434
#3458 := [unit-resolution #2123 #3453]: #2030
#3459 := [unit-resolution #903 #3458 #3450]: #884
#3460 := [unit-resolution #2370 #3459]: #2342
#3461 := [unit-resolution #1197 #3460]: #1184
#3462 := [unit-resolution #2660 #3461]: #2646
#3463 := [unit-resolution #1237 #3462 #3457 #2849]: false
#3465 := [lemma #3463]: #3464
#3468 := [unit-resolution #3465 #3138]: #656
#3469 := [unit-resolution #1579 #3468]: #1567
#3470 := [unit-resolution #705 #3469 #3467 #3466]: #683
#3471 := [unit-resolution #1968 #3470]: #1936
#3472 := [unit-resolution #879 #3471 #3396]: #860
#3473 := [unit-resolution #2339 #3472]: #2244
#3474 := [unit-resolution #1988 #3470]: #1940
#3475 := [unit-resolution #2329 #3472]: #2305
#3476 := [unit-resolution #2859 #3475]: #1139
#3477 := [unit-resolution #2584 #3476]: #2248
#3478 := [unit-resolution #1011 #3477 #3474 #3473]: #959
#3479 := [unit-resolution #2205 #3478]: #2122
#3480 := [unit-resolution #2574 #3476]: #2491
#3481 := [unit-resolution #2195 #3478]: #2187
#3482 := [unit-resolution #1137 #3481 #2847 #3480]: #1085
#3483 := [unit-resolution #3188 #3482 #3479 #3138]: false
#3484 := [lemma #3483]: #782
#1849 := (or #1753 #1818)
#291 := (not #101)
#295 := (or #291 #282)
#1852 := (iff #295 #1849)
#1845 := (or #1818 #1753)
#1850 := (iff #1845 #1849)
#1851 := [rewrite]: #1850
#1847 := (iff #295 #1845)
#1819 := (iff #291 #1818)
#1820 := [monotonicity #784]: #1819
#1848 := [monotonicity #1820 #1756]: #1847
#1853 := [trans #1848 #1851]: #1852
#1844 := [asserted]: #295
#1856 := [mp #1844 #1853]: #1849
#3506 := [unit-resolution #1856 #3484]: #1753
#3508 := [unit-resolution #777 #3506]: #3507
#3575 := [unit-resolution #3508 #3574 #3570]: #602
#3576 := [unit-resolution #1754 #3573]: #1418
#3577 := [unit-resolution #2805 #3576]: #574
#1480 := (or #1414 #1449)
#246 := (or #242 #236)
#1483 := (iff #246 #1480)
#1476 := (or #1449 #1414)
#1481 := (iff #1476 #1480)
#1482 := [rewrite]: #1481
#1478 := (iff #246 #1476)
#1479 := [monotonicity #1451 #1417]: #1478
#1484 := [trans #1479 #1482]: #1483
#1475 := [asserted]: #246
#1487 := [mp #1475 #1484]: #1480
#3578 := [unit-resolution #1487 #3577 #3575]: false
#3580 := [lemma #3578]: #3579
#3598 := [unit-resolution #3580 #3597]: #2430
#3599 := [unit-resolution #1137 #3598 #3596 #3255]: #962
#3600 := [unit-resolution #2235 #3599]: #1879
#3592 := (or #1875 #860)
#3581 := [hypothesis]: #806
#3582 := [unit-resolution #1958 #3581]: #1936
#3583 := [unit-resolution #879 #3582 #3170]: #707
#3584 := [unit-resolution #1713 #3583]: #1401
#3585 := [unit-resolution #575 #3584]: #538
#3586 := [unit-resolution #1392 #3585]: #1339
#3587 := [unit-resolution #1703 #3583]: #1628
#3588 := [unit-resolution #1998 #3581]: #1632
#3589 := [unit-resolution #1382 #3585]: #1374
#3590 := [unit-resolution #705 #3589 #3588 #3587]: #653
#3129 := (or #1567 #514)
#3134 := (or #1567 #514 #599)
#1859 := (or #1510 #1818)
#296 := (or #291 #250)
#1862 := (iff #296 #1859)
#1855 := (or #1818 #1510)
#1860 := (iff #1855 #1859)
#1861 := [rewrite]: #1860
#1857 := (iff #296 #1855)
#1858 := [monotonicity #1820 #1512]: #1857
#1863 := [trans #1858 #1861]: #1862
#1854 := [asserted]: #296
#1866 := [mp #1854 #1863]: #1859
#3137 := [unit-resolution #1866 #3484]: #1510
#3135 := [unit-resolution #2937 #3137]: #3134
#3141 := [unit-resolution #3135 #2945 #2940]: #599
#3132 := [unit-resolution #1477 #3141]: #1281
#3133 := [unit-resolution #1330 #2938]: #1278
#3130 := [unit-resolution #2786 #3133 #3132]: false
#3126 := [lemma #3130]: #3129
#3591 := [unit-resolution #3126 #3590 #3586]: false
#3593 := [lemma #3591]: #3592
#3601 := [unit-resolution #3593 #3247]: #1875
#3602 := (or #656 #806 #809)
#1821 := (or #1814 #1818)
#292 := (or #290 #291)
#1822 := (iff #292 #1821)
#1823 := [monotonicity #1817 #1820]: #1822
#1813 := [asserted]: #292
#1826 := [mp #1813 #1823]: #1821
#3127 := [unit-resolution #1826 #3484]: #1814
#3603 := [unit-resolution #831 #3127]: #3602
#3604 := [unit-resolution #3603 #3601 #3600]: #656
#3522 := (or #514 #1571)
#3515 := (or #1571 #514 #599)
#3516 := [unit-resolution #2914 #3137]: #3515
#3517 := [unit-resolution #3516 #2940 #2923]: #599
#3518 := [unit-resolution #1477 #3517]: #1281
#3519 := [unit-resolution #536 #2940 #2918]: #490
#3520 := [unit-resolution #1330 #3519]: #1278
#3521 := [unit-resolution #2786 #3520 #3518]: false
#3523 := [lemma #3521]: #3522
#3605 := [unit-resolution #3523 #3604]: #514
#3606 := [unit-resolution #1392 #3605]: #1370
#3607 := [unit-resolution #575 #3606]: #562
#3608 := [unit-resolution #1713 #3607]: #1689
#3609 := [unit-resolution #879 #3608 #3247]: #833
#3610 := [unit-resolution #1402 #3605]: #1374
#3611 := [unit-resolution #1579 #3604]: #1567
#3612 := [unit-resolution #1723 #3607]: #1628
#3613 := [unit-resolution #705 #3612 #3611 #3610]: #683
#3614 := [unit-resolution #1968 #3613 #3609]: false
#3615 := [lemma #3614]: #2244
#3561 := (or #986 #989)
#3513 := (or #656 #986 #989)
#3107 := (or #860 #989 #986 #656)
#3128 := (or #1936 #656 #986 #989)
#3131 := [unit-resolution #2976 #3127]: #3128
#3124 := [unit-resolution #3131 #2983 #3139 #3136]: #1936
#3119 := [unit-resolution #879 #3170 #3124]: #707
#3118 := [unit-resolution #1703 #3119]: #1628
#3123 := [unit-resolution #1713 #3119]: #1401
#3120 := [unit-resolution #575 #3123]: #538
#3121 := [unit-resolution #1382 #3120]: #1374
#3116 := (or #1339 #986 #989 #860)
#3108 := [unit-resolution #2987 #3127]: #3116
#3111 := [unit-resolution #3108 #3170 #3139 #3136]: #1339
#3109 := [unit-resolution #3126 #3111]: #1567
#3106 := [unit-resolution #705 #3109 #3121 #3118]: #683
#3110 := [unit-resolution #1988 #3106]: #1940
#3117 := (or #656 #653 #860 #809 #986 #989)
#3122 := [unit-resolution #2922 #3127]: #3117
#3125 := [unit-resolution #3122 #3109 #3136 #3139 #2983 #3170]: #809
#3114 := [unit-resolution #2215 #3125]: #2183
#3113 := [unit-resolution #1011 #3114 #3110 #3139 #3136]: false
#3115 := [lemma #3113]: #3107
#3112 := [unit-resolution #3115 #2983 #3136 #3139]: #860
#3104 := [unit-resolution #2329 #3112]: #2305
#3105 := [unit-resolution #2859 #3104]: #1139
#3102 := [unit-resolution #2564 #3105]: #2556
#3485 := [unit-resolution #2877 #3102]: #1239
#3486 := [unit-resolution #2726 #3485]: #2679
#3487 := [unit-resolution #2574 #3105]: #2491
#3488 := (or #2187 #656 #989 #986)
#3489 := [unit-resolution #3225 #3127]: #3488
#3490 := [unit-resolution #3489 #2983 #3136 #3139]: #2187
#3491 := [unit-resolution #2736 #3485]: #2495
#3492 := [unit-resolution #1137 #3491 #3490 #3487]: #1085
#3493 := [unit-resolution #2442 #3492]: #2434
#3494 := [unit-resolution #1237 #3493 #3486]: #1196
#3495 := [unit-resolution #2670 #3494]: #2373
#3496 := [unit-resolution #2452 #3492]: #2369
#3497 := [unit-resolution #2660 #3494]: #2633
#3498 := [unit-resolution #1197 #3497]: #1037
#3499 := [unit-resolution #2350 #3498]: #2338
#3500 := [unit-resolution #1083 #3499 #3496 #3495]: #908
#3501 := [unit-resolution #2113 #3500]: #1757
#3502 := [unit-resolution #2370 #3498]: #2034
#3503 := [unit-resolution #2103 #3500]: #2030
#3504 := [unit-resolution #903 #3503 #3502]: #731
#3505 := [unit-resolution #1734 #3504]: #1722
#3509 := [unit-resolution #3508 #3505 #3501]: #602
#3510 := [unit-resolution #1754 #3504]: #1418
#3511 := [unit-resolution #2805 #3510]: #574
#3512 := [unit-resolution #1487 #3511 #3509]: false
#3514 := [lemma #3512]: #3513
#3524 := [unit-resolution #3514 #3136 #3139]: #656
#3525 := [unit-resolution #3523 #3524]: #514
#3526 := [unit-resolution #3108 #3525 #3139 #3136]: #860
#3527 := [unit-resolution #2329 #3526]: #2305
#3528 := [unit-resolution #2859 #3527]: #1139
#3529 := [unit-resolution #2564 #3528]: #2556
#3530 := [unit-resolution #2877 #3529]: #1239
#3531 := [unit-resolution #2726 #3530]: #2679
#3532 := [unit-resolution #2574 #3528]: #2491
#3533 := [unit-resolution #1402 #3525]: #1374
#3534 := [unit-resolution #1579 #3524]: #1567
#3535 := [unit-resolution #1392 #3525]: #1370
#3536 := [unit-resolution #575 #3535]: #562
#3537 := [unit-resolution #1723 #3536]: #1628
#3538 := [unit-resolution #705 #3537 #3534 #3533]: #683
#3539 := [unit-resolution #1988 #3538]: #1940
#3540 := [unit-resolution #1011 #3539 #3139 #3136]: #959
#3541 := [unit-resolution #2195 #3540]: #2187
#3542 := [unit-resolution #2736 #3530]: #2495
#3543 := [unit-resolution #1137 #3542 #3541 #3532]: #1085
#3544 := [unit-resolution #2442 #3543]: #2434
#3545 := [unit-resolution #1237 #3544 #3531]: #1196
#3546 := [unit-resolution #2670 #3545]: #2373
#3547 := [unit-resolution #2452 #3543]: #2369
#3548 := [unit-resolution #2660 #3545]: #2633
#3549 := [unit-resolution #1197 #3548]: #1037
#3550 := [unit-resolution #2350 #3549]: #2338
#3551 := [unit-resolution #1083 #3550 #3547 #3546]: #908
#3552 := [unit-resolution #2113 #3551]: #1757
#3553 := [unit-resolution #2370 #3549]: #2034
#3554 := [unit-resolution #2103 #3551]: #2030
#3555 := [unit-resolution #903 #3554 #3553]: #731
#3556 := [unit-resolution #1734 #3555]: #1722
#3557 := [unit-resolution #3508 #3556 #3552]: #602
#3558 := [unit-resolution #1754 #3555]: #1418
#3559 := [unit-resolution #2805 #3558]: #574
#3560 := [unit-resolution #1487 #3559 #3557]: false
#3562 := [lemma #3560]: #3561
#3616 := [unit-resolution #3562 #3615]: #989
#3617 := [unit-resolution #2584 #3616]: #2552
#3618 := [unit-resolution #2859 #3617]: #1013
#3619 := [unit-resolution #2329 #3618]: #1997
#3620 := [unit-resolution #3593 #3619]: #1875
#3621 := [unit-resolution #2614 #3616]: #2491
#3622 := [unit-resolution #2604 #3616]: #2556
#3623 := [unit-resolution #2877 #3622]: #1239
#3624 := [unit-resolution #2736 #3623]: #2495
#3625 := [unit-resolution #2726 #3623]: #2679
#3626 := [unit-resolution #3580 #3625]: #2430
#3627 := [unit-resolution #1137 #3626 #3624 #3621]: #962
#3628 := [unit-resolution #2235 #3627]: #1879
#3629 := [unit-resolution #3603 #3628 #3620]: #656
#3630 := [unit-resolution #3523 #3629]: #514
#3631 := [unit-resolution #1392 #3630]: #1370
#3632 := [unit-resolution #575 #3631]: #562
#3633 := [unit-resolution #1713 #3632]: #1689
#3634 := [unit-resolution #879 #3633 #3619]: #833
#3635 := [unit-resolution #1402 #3630]: #1374
#3636 := [unit-resolution #1579 #3629]: #1567
#3637 := [unit-resolution #1723 #3632]: #1628
#3638 := [unit-resolution #705 #3637 #3636 #3635]: #683
[unit-resolution #1968 #3638 #3634]: false
unsat
d9089f92efb7cf3cd5f913b2fd8f4e6cc7fca01b 95 0
#2 := false
decl f3 :: (-> int S1)
decl ?v0!0 :: int
#74 := ?v0!0
#75 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#76 := (= f1 #75)
#68 := (not #76)
decl ?v1!1 :: int
#85 := ?v1!1
#86 := (f3 ?v1!1)
#87 := (= f1 #86)
#105 := (or #76 #87)
#108 := (not #105)
#111 := (and #76 #108)
#88 := (or #87 #76)
#89 := (not #88)
#82 := (not #68)
#95 := (and #82 #89)
#112 := (iff #95 #111)
#109 := (iff #89 #108)
#106 := (iff #88 #105)
#107 := [rewrite]: #106
#110 := [monotonicity #107]: #109
#103 := (iff #82 #76)
#104 := [rewrite]: #103
#113 := [monotonicity #104 #110]: #112
#11 := (:var 1 int)
#12 := (f3 #11)
#39 := (= f1 #12)
#8 := (:var 0 int)
#9 := (f3 #8)
#36 := (= f1 #9)
#45 := (or #36 #39)
#50 := (forall (vars (?v1 int)) #45)
#56 := (not #36)
#57 := (or #56 #50)
#62 := (forall (vars (?v0 int)) #57)
#65 := (not #62)
#98 := (~ #65 #95)
#77 := (or #36 #76)
#71 := (forall (vars (?v1 int)) #77)
#78 := (or #68 #71)
#79 := (not #78)
#96 := (~ #79 #95)
#90 := (not #71)
#91 := (~ #90 #89)
#92 := [sk]: #91
#83 := (~ #82 #82)
#84 := [refl]: #83
#97 := [nnf-neg #84 #92]: #96
#80 := (~ #65 #79)
#81 := [sk]: #80
#99 := [trans #81 #97]: #98
#10 := (= #9 f1)
#13 := (= #12 f1)
#14 := (or #13 #10)
#15 := (forall (vars (?v1 int)) #14)
#16 := (implies #10 #15)
#17 := (forall (vars (?v0 int)) #16)
#18 := (not #17)
#66 := (iff #18 #65)
#63 := (iff #17 #62)
#60 := (iff #16 #57)
#53 := (implies #36 #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #16 #53)
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#42 := (or #39 #36)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #14 #42)
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#40 := (iff #13 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41 #38]: #43
#49 := [trans #44 #47]: #48
#52 := [quant-intro #49]: #51
#55 := [monotonicity #38 #52]: #54
#61 := [trans #55 #59]: #60
#64 := [quant-intro #61]: #63
#67 := [monotonicity #64]: #66
#35 := [asserted]: #18
#70 := [mp #35 #67]: #65
#100 := [mp~ #70 #99]: #95
#101 := [mp #100 #113]: #111
#114 := [and-elim #101]: #108
#115 := [not-or-elim #114]: #68
#102 := [and-elim #101]: #76
[unit-resolution #102 #115]: false
unsat
c79d3e134c40dc60b6991210fa65efc043a31981 146 0
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f4 :: S1
#15 := f4
#16 := (f3 f4 #9)
#614 := (pattern #16)
decl f1 :: S1
#4 := f1
#54 := (= f1 #16)
#95 := (not #54)
#615 := (forall (vars (?v0 S2)) (:pat #614) #95)
decl f5 :: S2
#19 := f5
#20 := (f3 f4 f5)
#61 := (= f1 #20)
#192 := (= f1 f4)
#193 := (iff #61 #192)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#607 := (pattern #10)
#44 := (= f1 #8)
#41 := (= f1 #10)
#47 := (iff #41 #44)
#608 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #607) #47)
#50 := (forall (vars (?v0 S1) (?v1 S2)) #47)
#611 := (iff #50 #608)
#609 := (iff #47 #47)
#610 := [refl]: #609
#612 := [quant-intro #610]: #611
#86 := (~ #50 #50)
#84 := (~ #47 #47)
#85 := [refl]: #84
#87 := [nnf-pos #85]: #86
#12 := (= #8 f1)
#11 := (= #10 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#51 := (iff #14 #50)
#48 := (iff #13 #47)
#45 := (iff #12 #44)
#46 := [rewrite]: #45
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#52 := [quant-intro #49]: #51
#40 := [asserted]: #14
#55 := [mp #40 #52]: #50
#79 := [mp~ #55 #87]: #50
#613 := [mp #79 #612]: #608
#194 := (not #608)
#270 := (or #194 #193)
#602 := [quant-inst]: #270
#279 := [unit-resolution #602 #613]: #193
decl ?v0!0 :: S2
#76 := ?v0!0
#88 := (f3 f4 ?v0!0)
#80 := (= f1 #88)
#278 := (iff #80 #192)
#280 := (or #194 #278)
#271 := [quant-inst]: #280
#269 := [unit-resolution #271 #613]: #278
#282 := (not #278)
#241 := (or #282 #192)
#101 := (not #61)
#257 := [hypothesis]: #101
#106 := (or #61 #80)
#98 := (forall (vars (?v0 S2)) #95)
#107 := (or #101 #98)
#114 := (and #106 #107)
#108 := (and #107 #106)
#115 := (iff #108 #114)
#116 := [rewrite]: #115
#58 := (exists (vars (?v0 S2)) #54)
#70 := (not #58)
#71 := (iff #61 #70)
#109 := (~ #71 #108)
#99 := (~ #70 #98)
#96 := (~ #95 #95)
#97 := [refl]: #96
#100 := [nnf-neg #97]: #99
#92 := (not #70)
#93 := (~ #92 #80)
#81 := (~ #58 #80)
#89 := [sk]: #81
#94 := [nnf-neg #89]: #93
#104 := (~ #61 #61)
#105 := [refl]: #104
#102 := (~ #101 #101)
#103 := [refl]: #102
#110 := [nnf-pos #103 #105 #94 #100]: #109
#21 := (= #20 f1)
#17 := (= #16 f1)
#18 := (exists (vars (?v0 S2)) #17)
#22 := (iff #18 #21)
#23 := (not #22)
#74 := (iff #23 #71)
#64 := (iff #58 #61)
#67 := (not #64)
#72 := (iff #67 #71)
#73 := [rewrite]: #72
#68 := (iff #23 #67)
#65 := (iff #22 #64)
#62 := (iff #21 #61)
#63 := [rewrite]: #62
#59 := (iff #18 #58)
#56 := (iff #17 #54)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#66 := [monotonicity #60 #63]: #65
#69 := [monotonicity #66]: #68
#75 := [trans #69 #73]: #74
#53 := [asserted]: #23
#78 := [mp #53 #75]: #71
#111 := [mp~ #78 #110]: #108
#112 := [mp #111 #116]: #114
#113 := [and-elim #112]: #106
#598 := [unit-resolution #113 #257]: #80
#285 := (not #80)
#264 := (or #282 #285 #192)
#599 := [def-axiom]: #264
#582 := [unit-resolution #599 #598]: #241
#245 := [unit-resolution #582 #269]: #192
#283 := (not #192)
#603 := (not #193)
#246 := (or #603 #283)
#604 := (or #603 #61 #283)
#605 := [def-axiom]: #604
#247 := [unit-resolution #605 #257]: #246
#248 := [unit-resolution #247 #245 #279]: false
#584 := [lemma #248]: #61
#620 := (or #101 #615)
#621 := (iff #107 #620)
#618 := (iff #98 #615)
#616 := (iff #95 #95)
#617 := [refl]: #616
#619 := [quant-intro #617]: #618
#622 := [monotonicity #619]: #621
#117 := [and-elim #112]: #107
#623 := [mp #117 #622]: #620
#284 := [unit-resolution #623 #584]: #615
#596 := (not #615)
#256 := (or #596 #101)
#261 := [quant-inst]: #256
[unit-resolution #261 #584 #284]: false
unsat
90a02b978126d0cf254666f4e32434ce827e91f3 146 2
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f5 :: S1
#23 := f5
#24 := (f3 f5 #9)
#693 := (pattern #24)
decl f1 :: S1
#4 := f1
#78 := (= f1 #24)
#174 := (not #78)
#694 := (forall (vars (?v0 S2)) (:pat #693) #174)
decl f4 :: S2
#18 := f4
#27 := (f3 f5 f4)
#85 := (= f1 #27)
#252 := (= f1 f5)
#253 := (iff #85 #252)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#670 := (pattern #10)
#51 := (= f1 #8)
#48 := (= f1 #10)
#54 := (iff #48 #51)
#671 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #670) #54)
#57 := (forall (vars (?v0 S1) (?v1 S2)) #54)
#674 := (iff #57 #671)
#672 := (iff #54 #54)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#112 := (~ #57 #57)
#110 := (~ #54 #54)
#111 := [refl]: #110
#113 := [nnf-pos #111]: #112
#12 := (= #8 f1)
#11 := (= #10 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#58 := (iff #14 #57)
#55 := (iff #13 #54)
#52 := (iff #12 #51)
#53 := [rewrite]: #52
#49 := (iff #11 #48)
#50 := [rewrite]: #49
#56 := [monotonicity #50 #53]: #55
#59 := [quant-intro #56]: #58
#47 := [asserted]: #14
#62 := [mp #47 #59]: #57
#103 := [mp~ #62 #113]: #57
#676 := [mp #103 #675]: #671
#254 := (not #671)
#330 := (or #254 #253)
#331 := [quant-inst]: #330
#340 := [unit-resolution #331 #676]: #253
decl ?v0!3 :: S2
#145 := ?v0!3
#146 := (f3 f5 ?v0!3)
#118 := (= f1 #146)
#339 := (iff #118 #252)
#341 := (or #254 #339)
#332 := [quant-inst]: #341
#658 := [unit-resolution #332 #676]: #339
#343 := (not #339)
#661 := (or #343 #252)
#180 := (not #85)
#660 := [hypothesis]: #180
#185 := (or #85 #118)
#177 := (forall (vars (?v0 S2)) #174)
#186 := (or #180 #177)
#193 := (and #185 #186)
#187 := (and #186 #185)
#194 := (iff #187 #193)
#195 := [rewrite]: #194
#82 := (exists (vars (?v0 S2)) #78)
#94 := (not #82)
#95 := (iff #85 #94)
#188 := (~ #95 #187)
#178 := (~ #94 #177)
#175 := (~ #174 #174)
#176 := [refl]: #175
#179 := [nnf-neg #176]: #178
#171 := (not #94)
#172 := (~ #171 #118)
#119 := (~ #82 #118)
#168 := [sk]: #119
#173 := [nnf-neg #168]: #172
#183 := (~ #85 #85)
#184 := [refl]: #183
#181 := (~ #180 #180)
#182 := [refl]: #181
#189 := [nnf-pos #182 #184 #173 #179]: #188
#28 := (= #27 f1)
#25 := (= #24 f1)
#26 := (exists (vars (?v0 S2)) #25)
#29 := (iff #26 #28)
#30 := (not #29)
#98 := (iff #30 #95)
#88 := (iff #82 #85)
#91 := (not #88)
#96 := (iff #91 #95)
#97 := [rewrite]: #96
#92 := (iff #30 #91)
#89 := (iff #29 #88)
#86 := (iff #28 #85)
#87 := [rewrite]: #86
#83 := (iff #26 #82)
#80 := (iff #25 #78)
#81 := [rewrite]: #80
#84 := [quant-intro #81]: #83
#90 := [monotonicity #84 #87]: #89
#93 := [monotonicity #90]: #92
#99 := [trans #93 #97]: #98
#77 := [asserted]: #30
#102 := [mp #77 #99]: #95
#190 := [mp~ #102 #189]: #187
#191 := [mp #190 #195]: #193
#192 := [and-elim #191]: #185
#318 := [unit-resolution #192 #660]: #118
#342 := (not #118)
#346 := (or #343 #342 #252)
#325 := [def-axiom]: #346
#302 := [unit-resolution #325 #318]: #661
#645 := [unit-resolution #302 #658]: #252
#344 := (not #252)
#665 := (not #253)
#306 := (or #665 #344)
#666 := (or #665 #85 #344)
#667 := [def-axiom]: #666
#307 := [unit-resolution #667 #660]: #306
#308 := [unit-resolution #307 #645 #340]: false
#309 := [lemma #308]: #85
#699 := (or #180 #694)
#700 := (iff #186 #699)
#697 := (iff #177 #694)
#695 := (iff #174 #174)
#696 := [refl]: #695
#698 := [quant-intro #696]: #697
#701 := [monotonicity #698]: #700
#196 := [and-elim #191]: #186
#702 := [mp #196 #701]: #699
#272 := [unit-resolution #702 #309]: #694
#669 := (not #694)
#659 := (or #669 #180)
#317 := [quant-inst]: #659
[unit-resolution #317 #309 #272]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!13)

f01333d944f2f80d82a424a44d896dcad3d2ab6b 91 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
decl f1 :: S1
#4 := f1
#41 := (= f1 #9)
decl f5 :: S2
#19 := f5
#20 := (f3 f5)
#63 := (= f1 #20)
#70 := (not #41)
#71 := (or #70 #63)
#76 := (not #71)
#21 := (= #20 f1)
#10 := (= #9 f1)
#22 := (implies #10 #21)
#23 := (not #22)
#77 := (iff #23 #76)
#74 := (iff #22 #71)
#67 := (implies #41 #63)
#72 := (iff #67 #71)
#73 := [rewrite]: #72
#68 := (iff #22 #67)
#65 := (iff #21 #63)
#66 := [rewrite]: #65
#42 := (iff #10 #41)
#43 := [rewrite]: #42
#69 := [monotonicity #43 #66]: #68
#75 := [trans #69 #73]: #74
#78 := [monotonicity #75]: #77
#62 := [asserted]: #23
#81 := [mp #62 #78]: #76
#79 := [not-or-elim #81]: #41
#11 := (:var 0 S2)
#12 := (f3 #11)
#576 := (pattern #12)
#44 := (= f1 #12)
#53 := (not #44)
#577 := (forall (vars (?v0 S2)) (:pat #576) #53)
#56 := (forall (vars (?v0 S2)) #53)
#580 := (iff #56 #577)
#578 := (iff #53 #53)
#579 := [refl]: #578
#581 := [quant-intro #579]: #580
#47 := (exists (vars (?v0 S2)) #44)
#50 := (not #47)
#87 := (~ #50 #56)
#90 := (~ #53 #53)
#91 := [refl]: #90
#99 := [nnf-neg #91]: #87
#59 := (ite #41 #50 #56)
#97 := (iff #59 #50)
#1 := true
#92 := (ite true #50 #56)
#95 := (iff #92 #50)
#96 := [rewrite]: #95
#93 := (iff #59 #92)
#88 := (iff #41 true)
#89 := [iff-true #79]: #88
#94 := [monotonicity #89]: #93
#98 := [trans #94 #96]: #97
#13 := (= #12 f1)
#16 := (not #13)
#17 := (forall (vars (?v0 S2)) #16)
#14 := (exists (vars (?v0 S2)) #13)
#15 := (not #14)
#18 := (ite #10 #15 #17)
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#54 := (iff #16 #53)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#55 := [monotonicity #46]: #54
#58 := [quant-intro #55]: #57
#51 := (iff #15 #50)
#48 := (iff #14 #47)
#49 := [quant-intro #46]: #48
#52 := [monotonicity #49]: #51
#61 := [monotonicity #43 #52 #58]: #60
#40 := [asserted]: #18
#64 := [mp #40 #61]: #59
#86 := [mp #64 #98]: #50
#85 := [mp~ #86 #99]: #56
#582 := [mp #85 #581]: #577
#161 := (not #577)
#248 := (or #161 #70)
#162 := [quant-inst]: #248
[unit-resolution #162 #582 #79]: false
unsat
63e9e9c72f5ef2d46bc28af44941977dc976d3b5 17 0
#2 := false
#8 := 3::int
#9 := (= 3::int 3::int)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
711fabeeccec1b44c93a2cd4391df71f5fdafd74 17 0
#2 := false
#8 := 3::real
#9 := (= 3::real 3::real)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
eb7a82422e5eb210ae6e04c9f7170b09a67998d0 26 0
#2 := false
#11 := 4::int
#9 := 1::int
#8 := 3::int
#10 := (+ 3::int 1::int)
#12 := (= #10 4::int)
#13 := (not #12)
#44 := (iff #13 false)
#1 := true
#39 := (not true)
#42 := (iff #39 false)
#43 := [rewrite]: #42
#40 := (iff #13 #39)
#37 := (iff #12 true)
#32 := (= 4::int 4::int)
#35 := (iff #32 true)
#36 := [rewrite]: #35
#33 := (iff #12 #32)
#31 := [rewrite]: #12
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#30 := [asserted]: #13
[mp #30 #45]: false
unsat
5764777c5ab04100aa6409067059f42abecddd25 41 0
#2 := false
decl f3 :: int
#8 := f3
decl f5 :: int
#10 := f5
#13 := (+ f5 f3)
decl f4 :: int
#9 := f4
#14 := (+ f4 #13)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#56 := (iff #16 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #16 #51)
#49 := (iff #15 true)
#44 := (= #12 #12)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #15 #44)
#42 := (= #14 #12)
#34 := (+ f3 f5)
#37 := (+ f4 #34)
#40 := (= #37 #12)
#41 := [rewrite]: #40
#38 := (= #14 #37)
#35 := (= #13 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#33 := [asserted]: #16
[mp #33 #57]: false
unsat
f10e15cb480fc7147b50d697554b03e8d45998ff 35 0
#2 := false
#9 := 3::int
#10 := 8::int
#11 := (<= 3::int 8::int)
#12 := (ite #11 8::int 3::int)
#8 := 5::int
#13 := (< 5::int #12)
#14 := (not #13)
#55 := (iff #14 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #14 #50)
#48 := (iff #13 true)
#43 := (< 5::int 8::int)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (= #12 8::int)
#36 := (ite true 8::int 3::int)
#39 := (= #36 8::int)
#40 := [rewrite]: #39
#37 := (= #12 #36)
#34 := (iff #11 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#31 := [asserted]: #14
[mp #31 #56]: false
unsat
85e154b43f9eaa0aee17c7df60f7b297367e646f 209 0
#2 := false
#11 := 0::real
decl f4 :: real
#9 := f4
#41 := -1::real
#43 := (* -1::real f4)
#93 := (>= f4 0::real)
#100 := (ite #93 f4 #43)
#112 := (* -1::real #100)
#149 := (+ f4 #112)
#150 := (<= #149 0::real)
#139 := (= f4 #100)
#151 := (+ #43 #112)
#154 := (<= #151 0::real)
#140 := (= #43 #100)
#94 := (not #93)
#223 := [hypothesis]: #94
#143 := (or #93 #140)
#144 := [def-axiom]: #143
#224 := [unit-resolution #144 #223]: #140
#197 := (not #140)
#198 := (or #197 #154)
#199 := [th-lemma]: #198
#225 := [unit-resolution #199 #224]: #154
decl f3 :: real
#8 := f3
#42 := (* -1::real f3)
#81 := (>= f3 0::real)
#88 := (ite #81 f3 #42)
#111 := (* -1::real #88)
#179 := (+ f3 #111)
#180 := (<= #179 0::real)
#128 := (= f3 #88)
#10 := (+ f3 f4)
#69 := (>= #10 0::real)
#152 := (+ #42 #111)
#153 := (<= #152 0::real)
#126 := (= #42 #88)
#82 := (not #81)
#44 := (+ #42 #43)
#76 := (ite #69 #10 #44)
#145 := (* -1::real #76)
#146 := (+ #44 #145)
#148 := (>= #146 0::real)
#132 := (= #44 #76)
#70 := (not #69)
#161 := [hypothesis]: #70
#129 := (or #69 #132)
#130 := [def-axiom]: #129
#170 := [unit-resolution #130 #161]: #132
#171 := (not #132)
#172 := (or #171 #148)
#173 := [th-lemma]: #172
#174 := [unit-resolution #173 #170]: #148
#176 := (or #94 #69)
#155 := [hypothesis]: #93
#141 := (or #94 #139)
#142 := [def-axiom]: #141
#156 := [unit-resolution #142 #155]: #139
#157 := (not #139)
#158 := (or #157 #150)
#159 := [th-lemma]: #158
#160 := [unit-resolution #159 #156]: #150
#162 := (or #82 #94 #69)
#163 := [th-lemma]: #162
#164 := [unit-resolution #163 #155 #161]: #82
#137 := (or #81 #126)
#138 := [def-axiom]: #137
#165 := [unit-resolution #138 #164]: #126
#166 := (not #126)
#167 := (or #166 #153)
#168 := [th-lemma]: #167
#169 := [unit-resolution #168 #165]: #153
#113 := (+ #111 #112)
#114 := (+ #76 #113)
#115 := (<= #114 0::real)
#120 := (not #115)
#19 := (- f4)
#18 := (< f4 0::real)
#20 := (ite #18 #19 f4)
#16 := (- f3)
#15 := (< f3 0::real)
#17 := (ite #15 #16 f3)
#21 := (+ #17 #20)
#13 := (- #10)
#12 := (< #10 0::real)
#14 := (ite #12 #13 #10)
#22 := (<= #14 #21)
#23 := (not #22)
#123 := (iff #23 #120)
#57 := (ite #18 #43 f4)
#52 := (ite #15 #42 f3)
#60 := (+ #52 #57)
#47 := (ite #12 #44 #10)
#63 := (<= #47 #60)
#66 := (not #63)
#121 := (iff #66 #120)
#118 := (iff #63 #115)
#105 := (+ #88 #100)
#108 := (<= #76 #105)
#116 := (iff #108 #115)
#117 := [rewrite]: #116
#109 := (iff #63 #108)
#106 := (= #60 #105)
#103 := (= #57 #100)
#97 := (ite #94 #43 f4)
#101 := (= #97 #100)
#102 := [rewrite]: #101
#98 := (= #57 #97)
#95 := (iff #18 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#104 := [trans #99 #102]: #103
#91 := (= #52 #88)
#85 := (ite #82 #42 f3)
#89 := (= #85 #88)
#90 := [rewrite]: #89
#86 := (= #52 #85)
#83 := (iff #15 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#92 := [trans #87 #90]: #91
#107 := [monotonicity #92 #104]: #106
#79 := (= #47 #76)
#73 := (ite #70 #44 #10)
#77 := (= #73 #76)
#78 := [rewrite]: #77
#74 := (= #47 #73)
#71 := (iff #12 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#80 := [trans #75 #78]: #79
#110 := [monotonicity #80 #107]: #109
#119 := [trans #110 #117]: #118
#122 := [monotonicity #119]: #121
#67 := (iff #23 #66)
#64 := (iff #22 #63)
#61 := (= #21 #60)
#58 := (= #20 #57)
#55 := (= #19 #43)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#53 := (= #17 #52)
#50 := (= #16 #42)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#62 := [monotonicity #54 #59]: #61
#48 := (= #14 #47)
#45 := (= #13 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#65 := [monotonicity #49 #62]: #64
#68 := [monotonicity #65]: #67
#124 := [trans #68 #122]: #123
#40 := [asserted]: #23
#125 := [mp #40 #124]: #120
#175 := [th-lemma #125 #174 #155 #169 #160]: false
#177 := [lemma #175]: #176
#195 := [unit-resolution #177 #161]: #94
#196 := [unit-resolution #144 #195]: #140
#200 := [unit-resolution #199 #196]: #154
#192 := (not #148)
#191 := (not #154)
#193 := (or #82 #191 #192)
#182 := [hypothesis]: #81
#183 := [hypothesis]: #148
#184 := [hypothesis]: #154
#135 := (or #82 #128)
#136 := [def-axiom]: #135
#185 := [unit-resolution #136 #182]: #128
#186 := (not #128)
#187 := (or #186 #180)
#188 := [th-lemma]: #187
#189 := [unit-resolution #188 #185]: #180
#190 := [th-lemma #189 #184 #125 #183 #182]: false
#194 := [lemma #190]: #193
#201 := [unit-resolution #194 #200 #174]: #82
#202 := [unit-resolution #138 #201]: #126
#203 := [unit-resolution #168 #202]: #153
#204 := [th-lemma #200 #125 #174 #203]: false
#205 := [lemma #204]: #69
#208 := [hypothesis]: #82
#209 := (or #93 #81 #70)
#210 := [th-lemma]: #209
#211 := [unit-resolution #210 #208 #205]: #93
#212 := [unit-resolution #142 #211]: #139
#213 := [unit-resolution #159 #212]: #150
#214 := [unit-resolution #138 #208]: #126
#215 := [unit-resolution #168 #214]: #153
#147 := (+ #10 #145)
#181 := (>= #147 0::real)
#131 := (= #10 #76)
#133 := (or #70 #131)
#134 := [def-axiom]: #133
#216 := [unit-resolution #134 #205]: #131
#217 := (not #131)
#218 := (or #217 #181)
#219 := [th-lemma]: #218
#220 := [unit-resolution #219 #216]: #181
#221 := [th-lemma #208 #125 #220 #215 #213]: false
#222 := [lemma #221]: #81
#226 := [unit-resolution #136 #222]: #128
#227 := [unit-resolution #188 #226]: #180
#228 := [th-lemma #125 #220 #227 #223 #225]: false
#229 := [lemma #228]: #93
#230 := [unit-resolution #142 #229]: #139
#231 := [unit-resolution #159 #230]: #150
[th-lemma #125 #220 #227 #231]: false
unsat
c7afd26a7e4c735b3f9da1bcf41b42fb4f611502 42 0
#2 := false
decl f3 :: (-> S1 S2)
decl f1 :: S1
#4 := f1
#13 := (f3 f1)
decl f2 :: S1
#5 := f2
#9 := 3::int
#8 := 2::int
#10 := (< 2::int 3::int)
#11 := (ite #10 f1 f2)
#12 := (f3 #11)
#14 := (= #12 #13)
#15 := (not #14)
#57 := (iff #15 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #15 #52)
#50 := (iff #14 true)
#45 := (= #13 #13)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #14 #45)
#42 := (= #11 f1)
#37 := (ite true f1 f2)
#40 := (= #37 f1)
#41 := [rewrite]: #40
#38 := (= #11 #37)
#35 := (iff #10 true)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#43 := [trans #39 #41]: #42
#44 := [monotonicity #43]: #14
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#32 := [asserted]: #15
[mp #32 #58]: false
unsat
b1921561d90efa4396e2195f6befedbbc08c3f93 54 0
#2 := false
#13 := 1::int
decl f3 :: int
#9 := f3
#14 := (< f3 1::int)
#10 := 3::int
#11 := (+ f3 3::int)
#8 := 4::int
#12 := (<= 4::int #11)
#15 := (or #12 #14)
#16 := (not #15)
#71 := (iff #16 false)
#34 := (+ 3::int f3)
#37 := (<= 4::int #34)
#43 := (or #14 #37)
#48 := (not #43)
#69 := (iff #48 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #48 #64)
#62 := (iff #43 true)
#53 := (>= f3 1::int)
#51 := (not #53)
#57 := (or #51 #53)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #43 #57)
#55 := (iff #37 #53)
#56 := [rewrite]: #55
#52 := (iff #14 #51)
#54 := [rewrite]: #52
#59 := [monotonicity #54 #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#49 := (iff #16 #48)
#46 := (iff #15 #43)
#40 := (or #37 #14)
#44 := (iff #40 #43)
#45 := [rewrite]: #44
#41 := (iff #15 #40)
#38 := (iff #12 #37)
#35 := (= #11 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #39]: #41
#47 := [trans #42 #45]: #46
#50 := [monotonicity #47]: #49
#72 := [trans #50 #70]: #71
#33 := [asserted]: #16
[mp #33 #72]: false
unsat
186b71f451f1ced8ef7a2af2f7333861c89cddbd 63 0
#2 := false
#15 := 0::int
decl f4 :: int
#11 := f4
#47 := -1::int
#50 := (* -1::int f4)
decl f3 :: int
#9 := f3
#51 := (+ f3 #50)
#68 := (>= #51 0::int)
#92 := (iff #68 false)
#49 := -4::int
#85 := (>= -4::int 0::int)
#82 := (iff #85 false)
#91 := [rewrite]: #82
#86 := (iff #68 #85)
#52 := (= #51 -4::int)
#12 := 4::int
#13 := (+ f3 4::int)
#14 := (= f4 #13)
#54 := (iff #14 #52)
#37 := (+ 4::int f3)
#44 := (= f4 #37)
#48 := (iff #44 #52)
#53 := [rewrite]: #48
#45 := (iff #14 #44)
#42 := (= #13 #37)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#55 := [trans #46 #53]: #54
#36 := [asserted]: #14
#56 := [mp #36 #55]: #52
#84 := [monotonicity #56]: #86
#93 := [trans #84 #91]: #92
#16 := (- f4 f3)
#17 := (< 0::int #16)
#18 := (not #17)
#79 := (iff #18 #68)
#58 := (* -1::int f3)
#59 := (+ #58 f4)
#62 := (< 0::int #59)
#65 := (not #62)
#77 := (iff #65 #68)
#69 := (not #68)
#72 := (not #69)
#75 := (iff #72 #68)
#76 := [rewrite]: #75
#73 := (iff #65 #72)
#70 := (iff #62 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#66 := (iff #18 #65)
#63 := (iff #17 #62)
#60 := (= #16 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#80 := [trans #67 #78]: #79
#57 := [asserted]: #18
#81 := [mp #57 #80]: #68
[mp #81 #93]: false
unsat
ed9f5b4ddb34caba3e930028ab3abbea1141767c 35 0
#2 := false
#10 := 5::int
#8 := 2::int
#9 := (+ 2::int 2::int)
#11 := (= #9 5::int)
#12 := (not #11)
#13 := (not #12)
#53 := (iff #13 false)
#1 := true
#48 := (not true)
#51 := (iff #48 false)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (iff #12 true)
#41 := (not false)
#44 := (iff #41 true)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 false)
#31 := 4::int
#34 := (= 4::int 5::int)
#37 := (iff #34 false)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#32 := (= #9 4::int)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#30 := [asserted]: #13
[mp #30 #54]: false
unsat
e6971c89ab6428863738be19afcd7e6157397835 45 0
#2 := false
#15 := 4::real
decl f4 :: real
#12 := f4
#11 := 7::real
#13 := (* 7::real f4)
decl f3 :: real
#9 := f3
#8 := 3::real
#10 := (* 3::real f3)
#14 := (+ #10 #13)
#46 := (>= #14 4::real)
#44 := (not #46)
#16 := (< #14 4::real)
#45 := (iff #16 #44)
#42 := [rewrite]: #45
#39 := [asserted]: #16
#43 := [mp #39 #42]: #44
#17 := 2::real
#18 := (* 2::real f3)
#48 := (<= #18 3::real)
#49 := (not #48)
#19 := (< 3::real #18)
#50 := (iff #19 #49)
#51 := [rewrite]: #50
#40 := [asserted]: #19
#52 := [mp #40 #51]: #49
#20 := 0::real
#56 := (>= f4 0::real)
#21 := (< f4 0::real)
#22 := (not #21)
#63 := (iff #22 #56)
#54 := (not #56)
#58 := (not #54)
#61 := (iff #58 #56)
#62 := [rewrite]: #61
#59 := (iff #22 #58)
#55 := (iff #21 #54)
#57 := [rewrite]: #55
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#41 := [asserted]: #22
#65 := [mp #41 #64]: #56
[th-lemma #65 #52 #43]: false
unsat
4bafaa4fbebd6a7c5c47a5e807b07fb360f1fe97 59 0
#2 := false
#20 := (not false)
decl f4 :: int
#12 := f4
#8 := 0::int
#16 := (<= 0::int f4)
#17 := (not #16)
#18 := (or #17 #16)
#10 := 1::int
#11 := (- 1::int)
#13 := (* #11 f4)
decl f3 :: int
#9 := f3
#14 := (+ f3 #13)
#15 := (<= 0::int #14)
#19 := (or #15 #18)
#21 := (iff #19 #20)
#22 := (not #21)
#75 := (iff #22 false)
#1 := true
#70 := (not true)
#73 := (iff #70 false)
#74 := [rewrite]: #73
#71 := (iff #22 #70)
#68 := (iff #21 true)
#63 := (iff true true)
#66 := (iff #63 true)
#67 := [rewrite]: #66
#64 := (iff #21 #63)
#61 := (iff #20 true)
#62 := [rewrite]: #61
#59 := (iff #19 true)
#40 := -1::int
#43 := (* -1::int f4)
#46 := (+ f3 #43)
#49 := (<= 0::int #46)
#54 := (or #49 true)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #19 #54)
#52 := (iff #18 true)
#53 := [rewrite]: #52
#50 := (iff #15 #49)
#47 := (= #14 #46)
#44 := (= #13 #43)
#41 := (= #11 -1::int)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [monotonicity #51 #53]: #55
#60 := [trans #56 #58]: #59
#65 := [monotonicity #60 #62]: #64
#69 := [trans #65 #67]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#39 := [asserted]: #22
[mp #39 #76]: false
unsat
c2be8bcf98f782ce6e39f901eead42a359d07f16 43 0
#2 := false
decl f3 :: int
#8 := f3
#9 := 3::int
#11 := (<= 3::int f3)
#10 := (< f3 3::int)
#12 := (iff #10 #11)
#13 := (not #12)
#14 := (not #13)
#61 := (iff #14 false)
#59 := (iff #12 false)
#50 := (>= f3 3::int)
#48 := (not #50)
#54 := (iff #48 #50)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #12 #54)
#52 := (iff #11 #50)
#53 := [rewrite]: #52
#49 := (iff #10 #48)
#51 := [rewrite]: #49
#56 := [monotonicity #51 #53]: #55
#60 := [trans #56 #58]: #59
#46 := (iff #14 #12)
#40 := (iff #11 #10)
#44 := (iff #40 #12)
#45 := [rewrite]: #44
#42 := (iff #14 #40)
#32 := (not #10)
#33 := (iff #11 #32)
#36 := (not #33)
#39 := (iff #36 #40)
#41 := [rewrite]: #39
#37 := (iff #14 #36)
#34 := (iff #13 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#43 := [trans #38 #41]: #42
#47 := [trans #43 #45]: #46
#62 := [trans #47 #60]: #61
#31 := [asserted]: #14
[mp #31 #62]: false
unsat
f13f6152ed2127a9ebc1d2b9377e88e7270d2645 86 0
#2 := false
decl f3 :: int
#9 := f3
#11 := 2::int
#34 := (* 2::int f3)
#8 := 0::int
#65 := (= 0::int #34)
#66 := (not #65)
#55 := (= #34 0::int)
#109 := (not #55)
#115 := (iff #109 #66)
#113 := (iff #55 #65)
#114 := [commutativity]: #113
#116 := [monotonicity #114]: #115
#67 := (<= #34 0::int)
#105 := (not #67)
#35 := (<= f3 0::int)
#36 := (not #35)
#10 := (< 0::int f3)
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#32 := [asserted]: #10
#39 := [mp #32 #38]: #36
#106 := (or #105 #35)
#107 := [th-lemma]: #106
#108 := [unit-resolution #107 #39]: #105
#110 := (or #109 #67)
#111 := [th-lemma]: #110
#112 := [unit-resolution #111 #108]: #109
#117 := [mp #112 #116]: #66
#61 := (= f3 #34)
#62 := (not #61)
#63 := (= 0::int f3)
#64 := (not #63)
#59 := (and #64 #66 #62)
#74 := (not #59)
#47 := (distinct 0::int f3 #34)
#52 := (not #47)
#13 := (- f3 f3)
#12 := (* f3 2::int)
#14 := (distinct f3 #12 #13)
#15 := (not #14)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (distinct f3 #34 0::int)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#42 := (= #13 0::int)
#43 := [rewrite]: #42
#40 := (= #12 #34)
#41 := [rewrite]: #40
#46 := [monotonicity #41 #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#33 := [asserted]: #15
#57 := [mp #33 #54]: #52
#85 := (or #47 #74)
#86 := [def-axiom]: #85
#87 := [unit-resolution #86 #57]: #74
#60 := (= f3 0::int)
#88 := (not #60)
#94 := (iff #88 #64)
#92 := (iff #60 #63)
#93 := [commutativity]: #92
#95 := [monotonicity #93]: #94
#89 := (or #88 #35)
#90 := [th-lemma]: #89
#91 := [unit-resolution #90 #39]: #88
#96 := [mp #91 #95]: #64
#69 := -1::int
#70 := (* -1::int #34)
#71 := (+ f3 #70)
#73 := (>= #71 0::int)
#97 := (not #73)
#98 := (or #97 #35)
#99 := [th-lemma]: #98
#100 := [unit-resolution #99 #39]: #97
#101 := (or #62 #73)
#102 := [th-lemma]: #101
#103 := [unit-resolution #102 #100]: #62
#81 := (or #59 #63 #65 #61)
#82 := [def-axiom]: #81
#104 := [unit-resolution #82 #103 #96 #87]: #65
[unit-resolution #104 #117]: false
unsat
faa44c5ec66ed5260e47611608af7290f07ca77d 551 0
#2 := false
#174 := 0::int
decl f4 :: int
#9 := f4
#171 := -1::int
#207 := (* -1::int f4)
decl f3 :: int
#8 := f3
#208 := (+ f3 #207)
#223 := (>= #208 0::int)
decl f5 :: int
#11 := f5
#14 := (= f4 f5)
#172 := (* -1::int f5)
#196 := (+ f4 #172)
#242 := (<= #196 0::int)
#173 := (+ f3 #172)
#175 := (<= #173 0::int)
#176 := (not #175)
#19 := (= f3 f5)
#436 := (not #19)
#243 := (not #242)
#594 := [hypothesis]: #243
#533 := (or #436 #242)
#273 := (and #19 #243)
#377 := (not #273)
#542 := (iff #377 #533)
#534 := (not #533)
#537 := (not #534)
#540 := (iff #537 #533)
#541 := [rewrite]: #540
#538 := (iff #377 #537)
#535 := (iff #273 #534)
#536 := [rewrite]: #535
#539 := [monotonicity #536]: #538
#543 := [trans #539 #541]: #542
#222 := (not #223)
#195 := (>= #196 0::int)
#194 := (not #195)
#292 := (and #194 #222)
#284 := (and #14 #222)
#183 := (>= #173 0::int)
#182 := (not #183)
#278 := (and #182 #243)
#21 := (= f3 f4)
#265 := (and #21 #194)
#209 := (<= #208 0::int)
#210 := (not #209)
#257 := (and #210 #243)
#249 := (and #21 #243)
#237 := (and #176 #222)
#229 := (and #19 #222)
#219 := (and #14 #210)
#216 := (and #182 #210)
#213 := (and #19 #210)
#202 := (and #176 #194)
#189 := (and #21 #182)
#179 := (and #14 #176)
#120 := (and #14 #21)
#342 := (or #120 #179 #189 #202 #213 #216 #219 #229 #237 #249 #257 #265 #273 #278 #284 #292)
#347 := (not #342)
#25 := (= f4 f3)
#31 := (= f5 f4)
#38 := (and #31 #25)
#27 := (< f5 f3)
#37 := (and #14 #27)
#39 := (or #37 #38)
#16 := (< f3 f5)
#36 := (and #25 #16)
#40 := (or #36 #39)
#12 := (< f4 f5)
#35 := (and #12 #27)
#41 := (or #35 #40)
#29 := (= f5 f3)
#23 := (< f4 f3)
#34 := (and #23 #29)
#42 := (or #34 #41)
#33 := (and #23 #16)
#43 := (or #33 #42)
#32 := (and #31 #23)
#44 := (or #32 #43)
#10 := (< f3 f4)
#30 := (and #29 #10)
#45 := (or #30 #44)
#28 := (and #27 #10)
#46 := (or #28 #45)
#17 := (< f5 f4)
#26 := (and #17 #25)
#47 := (or #26 #46)
#24 := (and #17 #23)
#48 := (or #24 #47)
#22 := (and #21 #12)
#49 := (or #22 #48)
#20 := (and #19 #17)
#50 := (or #20 #49)
#18 := (and #16 #17)
#51 := (or #18 #50)
#15 := (and #10 #14)
#52 := (or #15 #51)
#13 := (and #10 #12)
#53 := (or #13 #52)
#54 := (not #53)
#350 := (iff #54 #347)
#123 := (or #37 #120)
#115 := (and #16 #21)
#126 := (or #115 #123)
#129 := (or #35 #126)
#107 := (and #19 #23)
#132 := (or #107 #129)
#101 := (and #16 #23)
#135 := (or #101 #132)
#98 := (and #14 #23)
#138 := (or #98 #135)
#91 := (and #10 #19)
#141 := (or #91 #138)
#83 := (and #10 #27)
#144 := (or #83 #141)
#80 := (and #17 #21)
#147 := (or #80 #144)
#150 := (or #24 #147)
#75 := (and #12 #21)
#153 := (or #75 #150)
#72 := (and #17 #19)
#156 := (or #72 #153)
#159 := (or #18 #156)
#162 := (or #15 #159)
#165 := (or #13 #162)
#168 := (not #165)
#348 := (iff #168 #347)
#345 := (iff #165 #342)
#297 := (or #179 #120)
#300 := (or #189 #297)
#303 := (or #202 #300)
#306 := (or #213 #303)
#309 := (or #216 #306)
#312 := (or #219 #309)
#315 := (or #229 #312)
#318 := (or #237 #315)
#321 := (or #249 #318)
#324 := (or #257 #321)
#327 := (or #265 #324)
#330 := (or #273 #327)
#333 := (or #278 #330)
#336 := (or #284 #333)
#339 := (or #292 #336)
#343 := (iff #339 #342)
#344 := [rewrite]: #343
#340 := (iff #165 #339)
#337 := (iff #162 #336)
#334 := (iff #159 #333)
#331 := (iff #156 #330)
#328 := (iff #153 #327)
#325 := (iff #150 #324)
#322 := (iff #147 #321)
#319 := (iff #144 #318)
#316 := (iff #141 #315)
#313 := (iff #138 #312)
#310 := (iff #135 #309)
#307 := (iff #132 #306)
#304 := (iff #129 #303)
#301 := (iff #126 #300)
#298 := (iff #123 #297)
#180 := (iff #37 #179)
#177 := (iff #27 #176)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#299 := [monotonicity #181]: #298
#192 := (iff #115 #189)
#186 := (and #182 #21)
#190 := (iff #186 #189)
#191 := [rewrite]: #190
#187 := (iff #115 #186)
#184 := (iff #16 #182)
#185 := [rewrite]: #184
#188 := [monotonicity #185]: #187
#193 := [trans #188 #191]: #192
#302 := [monotonicity #193 #299]: #301
#205 := (iff #35 #202)
#199 := (and #194 #176)
#203 := (iff #199 #202)
#204 := [rewrite]: #203
#200 := (iff #35 #199)
#197 := (iff #12 #194)
#198 := [rewrite]: #197
#201 := [monotonicity #198 #178]: #200
#206 := [trans #201 #204]: #205
#305 := [monotonicity #206 #302]: #304
#214 := (iff #107 #213)
#211 := (iff #23 #210)
#212 := [rewrite]: #211
#215 := [monotonicity #212]: #214
#308 := [monotonicity #215 #305]: #307
#217 := (iff #101 #216)
#218 := [monotonicity #185 #212]: #217
#311 := [monotonicity #218 #308]: #310
#220 := (iff #98 #219)
#221 := [monotonicity #212]: #220
#314 := [monotonicity #221 #311]: #313
#232 := (iff #91 #229)
#226 := (and #222 #19)
#230 := (iff #226 #229)
#231 := [rewrite]: #230
#227 := (iff #91 #226)
#224 := (iff #10 #222)
#225 := [rewrite]: #224
#228 := [monotonicity #225]: #227
#233 := [trans #228 #231]: #232
#317 := [monotonicity #233 #314]: #316
#240 := (iff #83 #237)
#234 := (and #222 #176)
#238 := (iff #234 #237)
#239 := [rewrite]: #238
#235 := (iff #83 #234)
#236 := [monotonicity #225 #178]: #235
#241 := [trans #236 #239]: #240
#320 := [monotonicity #241 #317]: #319
#252 := (iff #80 #249)
#246 := (and #243 #21)
#250 := (iff #246 #249)
#251 := [rewrite]: #250
#247 := (iff #80 #246)
#244 := (iff #17 #243)
#245 := [rewrite]: #244
#248 := [monotonicity #245]: #247
#253 := [trans #248 #251]: #252
#323 := [monotonicity #253 #320]: #322
#260 := (iff #24 #257)
#254 := (and #243 #210)
#258 := (iff #254 #257)
#259 := [rewrite]: #258
#255 := (iff #24 #254)
#256 := [monotonicity #245 #212]: #255
#261 := [trans #256 #259]: #260
#326 := [monotonicity #261 #323]: #325
#268 := (iff #75 #265)
#262 := (and #194 #21)
#266 := (iff #262 #265)
#267 := [rewrite]: #266
#263 := (iff #75 #262)
#264 := [monotonicity #198]: #263
#269 := [trans #264 #267]: #268
#329 := [monotonicity #269 #326]: #328
#276 := (iff #72 #273)
#270 := (and #243 #19)
#274 := (iff #270 #273)
#275 := [rewrite]: #274
#271 := (iff #72 #270)
#272 := [monotonicity #245]: #271
#277 := [trans #272 #275]: #276
#332 := [monotonicity #277 #329]: #331
#279 := (iff #18 #278)
#280 := [monotonicity #185 #245]: #279
#335 := [monotonicity #280 #332]: #334
#287 := (iff #15 #284)
#281 := (and #222 #14)
#285 := (iff #281 #284)
#286 := [rewrite]: #285
#282 := (iff #15 #281)
#283 := [monotonicity #225]: #282
#288 := [trans #283 #286]: #287
#338 := [monotonicity #288 #335]: #337
#295 := (iff #13 #292)
#289 := (and #222 #194)
#293 := (iff #289 #292)
#294 := [rewrite]: #293
#290 := (iff #13 #289)
#291 := [monotonicity #225 #198]: #290
#296 := [trans #291 #294]: #295
#341 := [monotonicity #296 #338]: #340
#346 := [trans #341 #344]: #345
#349 := [monotonicity #346]: #348
#169 := (iff #54 #168)
#166 := (iff #53 #165)
#163 := (iff #52 #162)
#160 := (iff #51 #159)
#157 := (iff #50 #156)
#154 := (iff #49 #153)
#151 := (iff #48 #150)
#148 := (iff #47 #147)
#145 := (iff #46 #144)
#142 := (iff #45 #141)
#139 := (iff #44 #138)
#136 := (iff #43 #135)
#133 := (iff #42 #132)
#130 := (iff #41 #129)
#127 := (iff #40 #126)
#124 := (iff #39 #123)
#121 := (iff #38 #120)
#78 := (iff #25 #21)
#79 := [rewrite]: #78
#96 := (iff #31 #14)
#97 := [rewrite]: #96
#122 := [monotonicity #97 #79]: #121
#125 := [monotonicity #122]: #124
#118 := (iff #36 #115)
#112 := (and #21 #16)
#116 := (iff #112 #115)
#117 := [rewrite]: #116
#113 := (iff #36 #112)
#114 := [monotonicity #79]: #113
#119 := [trans #114 #117]: #118
#128 := [monotonicity #119 #125]: #127
#131 := [monotonicity #128]: #130
#110 := (iff #34 #107)
#104 := (and #23 #19)
#108 := (iff #104 #107)
#109 := [rewrite]: #108
#105 := (iff #34 #104)
#86 := (iff #29 #19)
#87 := [rewrite]: #86
#106 := [monotonicity #87]: #105
#111 := [trans #106 #109]: #110
#134 := [monotonicity #111 #131]: #133
#102 := (iff #33 #101)
#103 := [rewrite]: #102
#137 := [monotonicity #103 #134]: #136
#99 := (iff #32 #98)
#100 := [monotonicity #97]: #99
#140 := [monotonicity #100 #137]: #139
#94 := (iff #30 #91)
#88 := (and #19 #10)
#92 := (iff #88 #91)
#93 := [rewrite]: #92
#89 := (iff #30 #88)
#90 := [monotonicity #87]: #89
#95 := [trans #90 #93]: #94
#143 := [monotonicity #95 #140]: #142
#84 := (iff #28 #83)
#85 := [rewrite]: #84
#146 := [monotonicity #85 #143]: #145
#81 := (iff #26 #80)
#82 := [monotonicity #79]: #81
#149 := [monotonicity #82 #146]: #148
#152 := [monotonicity #149]: #151
#76 := (iff #22 #75)
#77 := [rewrite]: #76
#155 := [monotonicity #77 #152]: #154
#73 := (iff #20 #72)
#74 := [rewrite]: #73
#158 := [monotonicity #74 #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#351 := [trans #170 #349]: #350
#71 := [asserted]: #54
#352 := [mp #71 #351]: #347
#378 := [not-or-elim #352]: #377
#544 := [mp #378 #543]: #533
#595 := [unit-resolution #544 #594]: #436
#545 := (or #183 #242)
#379 := (not #278)
#554 := (iff #379 #545)
#546 := (not #545)
#549 := (not #546)
#552 := (iff #549 #545)
#553 := [rewrite]: #552
#550 := (iff #379 #549)
#547 := (iff #278 #546)
#548 := [rewrite]: #547
#551 := [monotonicity #548]: #550
#555 := [trans #551 #553]: #554
#380 := [not-or-elim #352]: #379
#556 := [mp #380 #555]: #545
#596 := [unit-resolution #556 #594]: #183
#585 := (or #19 #176 #182)
#586 := [th-lemma]: #585
#597 := [unit-resolution #586 #596 #595]: #176
#485 := (or #175 #223)
#369 := (not #237)
#494 := (iff #369 #485)
#486 := (not #485)
#489 := (not #486)
#492 := (iff #489 #485)
#493 := [rewrite]: #492
#490 := (iff #369 #489)
#487 := (iff #237 #486)
#488 := [rewrite]: #487
#491 := [monotonicity #488]: #490
#495 := [trans #491 #493]: #494
#370 := [not-or-elim #352]: #369
#496 := [mp #370 #495]: #485
#598 := [unit-resolution #496 #597]: #223
#581 := [hypothesis]: #210
#509 := (or #209 #242)
#373 := (not #257)
#518 := (iff #373 #509)
#510 := (not #509)
#513 := (not #510)
#516 := (iff #513 #509)
#517 := [rewrite]: #516
#514 := (iff #373 #513)
#511 := (iff #257 #510)
#512 := [rewrite]: #511
#515 := [monotonicity #512]: #514
#519 := [trans #515 #517]: #518
#374 := [not-or-elim #352]: #373
#520 := [mp #374 #519]: #509
#582 := [unit-resolution #520 #581]: #242
#437 := (or #436 #209)
#361 := (not #213)
#446 := (iff #361 #437)
#438 := (not #437)
#441 := (not #438)
#444 := (iff #441 #437)
#445 := [rewrite]: #444
#442 := (iff #361 #441)
#439 := (iff #213 #438)
#440 := [rewrite]: #439
#443 := [monotonicity #440]: #442
#447 := [trans #443 #445]: #446
#362 := [not-or-elim #352]: #361
#448 := [mp #362 #447]: #437
#583 := [unit-resolution #448 #581]: #436
#449 := (or #183 #209)
#363 := (not #216)
#458 := (iff #363 #449)
#450 := (not #449)
#453 := (not #450)
#456 := (iff #453 #449)
#457 := [rewrite]: #456
#454 := (iff #363 #453)
#451 := (iff #216 #450)
#452 := [rewrite]: #451
#455 := [monotonicity #452]: #454
#459 := [trans #455 #457]: #458
#364 := [not-or-elim #352]: #363
#460 := [mp #364 #459]: #449
#584 := [unit-resolution #460 #581]: #183
#587 := [unit-resolution #586 #584 #583]: #176
#424 := (or #175 #195)
#359 := (not #202)
#433 := (iff #359 #424)
#425 := (not #424)
#428 := (not #425)
#431 := (iff #428 #424)
#432 := [rewrite]: #431
#429 := (iff #359 #428)
#426 := (iff #202 #425)
#427 := [rewrite]: #426
#430 := [monotonicity #427]: #429
#434 := [trans #430 #432]: #433
#360 := [not-or-elim #352]: #359
#435 := [mp #360 #434]: #424
#588 := [unit-resolution #435 #587]: #195
#420 := (not #14)
#461 := (or #420 #209)
#365 := (not #219)
#470 := (iff #365 #461)
#462 := (not #461)
#465 := (not #462)
#468 := (iff #465 #461)
#469 := [rewrite]: #468
#466 := (iff #365 #465)
#463 := (iff #219 #462)
#464 := [rewrite]: #463
#467 := [monotonicity #464]: #466
#471 := [trans #467 #469]: #470
#366 := [not-or-elim #352]: #365
#472 := [mp #366 #471]: #461
#589 := [unit-resolution #472 #581]: #420
#590 := (or #14 #243 #194)
#591 := [th-lemma]: #590
#592 := [unit-resolution #591 #589 #588 #582]: false
#593 := [lemma #592]: #209
#421 := (not #21)
#497 := (or #421 #242)
#371 := (not #249)
#506 := (iff #371 #497)
#498 := (not #497)
#501 := (not #498)
#504 := (iff #501 #497)
#505 := [rewrite]: #504
#502 := (iff #371 #501)
#499 := (iff #249 #498)
#500 := [rewrite]: #499
#503 := [monotonicity #500]: #502
#507 := [trans #503 #505]: #506
#372 := [not-or-elim #352]: #371
#508 := [mp #372 #507]: #497
#599 := [unit-resolution #508 #594]: #421
#600 := (or #21 #210 #222)
#601 := [th-lemma]: #600
#602 := [unit-resolution #601 #599 #593 #598]: false
#603 := [lemma #602]: #242
#609 := [hypothesis]: #194
#569 := (or #195 #223)
#383 := (not #292)
#578 := (iff #383 #569)
#570 := (not #569)
#573 := (not #570)
#576 := (iff #573 #569)
#577 := [rewrite]: #576
#574 := (iff #383 #573)
#571 := (iff #292 #570)
#572 := [rewrite]: #571
#575 := [monotonicity #572]: #574
#579 := [trans #575 #577]: #578
#384 := [not-or-elim #352]: #383
#580 := [mp #384 #579]: #569
#610 := [unit-resolution #580 #609]: #223
#521 := (or #421 #195)
#375 := (not #265)
#530 := (iff #375 #521)
#522 := (not #521)
#525 := (not #522)
#528 := (iff #525 #521)
#529 := [rewrite]: #528
#526 := (iff #375 #525)
#523 := (iff #265 #522)
#524 := [rewrite]: #523
#527 := [monotonicity #524]: #526
#531 := [trans #527 #529]: #530
#376 := [not-or-elim #352]: #375
#532 := [mp #376 #531]: #521
#611 := [unit-resolution #532 #609]: #421
#612 := [unit-resolution #601 #611 #593 #610]: false
#613 := [lemma #612]: #195
#614 := [th-lemma #613 #603]: #14
#557 := (or #420 #223)
#381 := (not #284)
#566 := (iff #381 #557)
#558 := (not #557)
#561 := (not #558)
#564 := (iff #561 #557)
#565 := [rewrite]: #564
#562 := (iff #381 #561)
#559 := (iff #284 #558)
#560 := [rewrite]: #559
#563 := [monotonicity #560]: #562
#567 := [trans #563 #565]: #566
#382 := [not-or-elim #352]: #381
#568 := [mp #382 #567]: #557
#616 := [unit-resolution #568 #614]: #223
#422 := (or #420 #421)
#353 := (not #120)
#413 := (iff #353 #422)
#423 := (not #422)
#416 := (not #423)
#415 := (iff #416 #422)
#412 := [rewrite]: #415
#417 := (iff #353 #416)
#418 := (iff #120 #423)
#419 := [rewrite]: #418
#414 := [monotonicity #419]: #417
#410 := [trans #414 #412]: #413
#354 := [not-or-elim #352]: #353
#411 := [mp #354 #410]: #422
#617 := [unit-resolution #411 #614]: #421
[unit-resolution #601 #617 #593 #616]: false
unsat
4dd2cecd4113f0eaf15e733b006ad0e01202872f 2109 0
#2 := false
#10 := 0::int
decl f3 :: int
#8 := f3
#95 := -1::int
#114 := (* -1::int f3)
#537 := (>= f3 0::int)
#544 := (ite #537 f3 #114)
#555 := (* -1::int #544)
#744 := (+ f3 #555)
#745 := (<= #744 0::int)
#715 := (= f3 #544)
decl f6 :: int
#17 := f6
#131 := (* -1::int f6)
#508 := (>= f6 0::int)
#515 := (ite #508 f6 #131)
#526 := (* -1::int #515)
#749 := (+ f6 #526)
#752 := (<= #749 0::int)
#707 := (= f6 #515)
decl f13 :: int
#59 := f13
#734 := (* -1::int f13)
decl f4 :: int
#9 := f4
#735 := (+ f4 #734)
#737 := (>= #735 0::int)
#988 := (+ #131 #526)
#1057 := (<= #988 0::int)
#708 := (= #131 #515)
#509 := (not #508)
#1129 := [hypothesis]: #509
#711 := (or #508 #708)
#712 := [def-axiom]: #711
#1130 := [unit-resolution #712 #1129]: #708
#1131 := (not #708)
#1132 := (or #1131 #1057)
#1133 := [th-lemma]: #1132
#1134 := [unit-resolution #1133 #1130]: #1057
decl f12 :: int
#53 := f12
#233 := (* -1::int f12)
#334 := (>= f12 0::int)
#341 := (ite #334 f12 #233)
#352 := (* -1::int #341)
#864 := (+ f12 #352)
#901 := (>= #864 0::int)
#655 := (= f12 #341)
decl f8 :: int
#29 := f8
#165 := (* -1::int f8)
#450 := (>= f8 0::int)
#457 := (ite #450 f8 #165)
#468 := (* -1::int #457)
#750 := (+ f8 #468)
#903 := (>= #750 0::int)
#736 := (<= #735 0::int)
#967 := (not #736)
#66 := (= f4 f13)
#648 := (not #66)
decl f5 :: int
#14 := f5
#65 := (= f5 f12)
#731 := (+ f5 #233)
#732 := (<= #731 0::int)
#987 := (>= #744 0::int)
#451 := (not #450)
#691 := (= f8 #457)
#769 := (not #691)
#1246 := (not #903)
#1580 := [hypothesis]: #1246
#1040 := (or #769 #903)
#1581 := [hypothesis]: #691
#1041 := [th-lemma]: #1040
#1582 := [unit-resolution #1041 #1581 #1580]: false
#1583 := [lemma #1582]: #1040
#1834 := [unit-resolution #1583 #1580]: #769
#693 := (or #451 #691)
#694 := [def-axiom]: #693
#1835 := [unit-resolution #694 #1834]: #451
#1343 := (or #450 #508)
decl f7 :: int
#23 := f7
#148 := (* -1::int f7)
#479 := (>= f7 0::int)
#486 := (ite #479 f7 #148)
#497 := (* -1::int #486)
#1334 := (+ f7 #497)
#1335 := (<= #1334 0::int)
#699 := (= f7 #486)
decl f9 :: int
#35 := f9
#182 := (* -1::int f9)
#421 := (>= f9 0::int)
#428 := (ite #421 f9 #182)
#439 := (* -1::int #428)
#753 := (+ f9 #439)
#986 := (>= #753 0::int)
#683 := (= f9 #428)
#480 := (not #479)
#810 := [hypothesis]: #480
#1193 := (or #450 #479)
#733 := (>= #731 0::int)
#1141 := (or #537 #479)
#538 := (not #537)
#907 := [hypothesis]: #538
#1136 := (or #508 #537 #479)
#527 := (+ f7 #526)
#528 := (+ f3 #527)
#714 := (>= #528 0::int)
#529 := (= #528 0::int)
#96 := (* -1::int f4)
#566 := (>= f4 0::int)
#573 := (ite #566 f4 #96)
#584 := (* -1::int #573)
#585 := (+ f5 #584)
#586 := (+ f3 #585)
#587 := (= #586 0::int)
#592 := (not #587)
#556 := (+ f6 #555)
#557 := (+ f4 #556)
#558 := (= #557 0::int)
#563 := (not #558)
#534 := (not #529)
#498 := (+ f8 #497)
#499 := (+ f6 #498)
#500 := (= #499 0::int)
#505 := (not #500)
#469 := (+ f9 #468)
#470 := (+ f7 #469)
#471 := (= #470 0::int)
#476 := (not #471)
decl f10 :: int
#41 := f10
#440 := (+ f10 #439)
#441 := (+ f8 #440)
#442 := (= #441 0::int)
#447 := (not #442)
#199 := (* -1::int f10)
#392 := (>= f10 0::int)
#399 := (ite #392 f10 #199)
#410 := (* -1::int #399)
decl f11 :: int
#47 := f11
#411 := (+ f11 #410)
#412 := (+ f9 #411)
#413 := (= #412 0::int)
#418 := (not #413)
#216 := (* -1::int f11)
#363 := (>= f11 0::int)
#370 := (ite #363 f11 #216)
#381 := (* -1::int #370)
#382 := (+ f12 #381)
#383 := (+ f10 #382)
#384 := (= #383 0::int)
#389 := (not #384)
#353 := (+ f13 #352)
#354 := (+ f11 #353)
#355 := (= #354 0::int)
#360 := (not #355)
#67 := (and #65 #66)
#622 := (or #67 #360 #389 #418 #447 #476 #505 #534 #563 #592)
#627 := (not #622)
#61 := (- f12)
#60 := (< f12 0::int)
#62 := (ite #60 #61 f12)
#63 := (- #62 f11)
#64 := (= f13 #63)
#68 := (implies #64 #67)
#55 := (- f11)
#54 := (< f11 0::int)
#56 := (ite #54 #55 f11)
#57 := (- #56 f10)
#58 := (= f12 #57)
#69 := (implies #58 #68)
#49 := (- f10)
#48 := (< f10 0::int)
#50 := (ite #48 #49 f10)
#51 := (- #50 f9)
#52 := (= f11 #51)
#70 := (implies #52 #69)
#43 := (- f9)
#42 := (< f9 0::int)
#44 := (ite #42 #43 f9)
#45 := (- #44 f8)
#46 := (= f10 #45)
#71 := (implies #46 #70)
#37 := (- f8)
#36 := (< f8 0::int)
#38 := (ite #36 #37 f8)
#39 := (- #38 f7)
#40 := (= f9 #39)
#72 := (implies #40 #71)
#31 := (- f7)
#30 := (< f7 0::int)
#32 := (ite #30 #31 f7)
#33 := (- #32 f6)
#34 := (= f8 #33)
#73 := (implies #34 #72)
#25 := (- f6)
#24 := (< f6 0::int)
#26 := (ite #24 #25 f6)
#27 := (- #26 f3)
#28 := (= f7 #27)
#74 := (implies #28 #73)
#19 := (- f3)
#18 := (< f3 0::int)
#20 := (ite #18 #19 f3)
#21 := (- #20 f4)
#22 := (= f6 #21)
#75 := (implies #22 #74)
#12 := (- f4)
#11 := (< f4 0::int)
#13 := (ite #11 #12 f4)
#15 := (- #13 f5)
#16 := (= f3 #15)
#76 := (implies #16 #75)
#77 := (not #76)
#630 := (iff #77 #627)
#236 := (ite #60 #233 f12)
#242 := (+ #216 #236)
#247 := (= f13 #242)
#253 := (not #247)
#254 := (or #67 #253)
#219 := (ite #54 #216 f11)
#225 := (+ #199 #219)
#230 := (= f12 #225)
#262 := (not #230)
#263 := (or #262 #254)
#202 := (ite #48 #199 f10)
#208 := (+ #182 #202)
#213 := (= f11 #208)
#271 := (not #213)
#272 := (or #271 #263)
#185 := (ite #42 #182 f9)
#191 := (+ #165 #185)
#196 := (= f10 #191)
#280 := (not #196)
#281 := (or #280 #272)
#168 := (ite #36 #165 f8)
#174 := (+ #148 #168)
#179 := (= f9 #174)
#289 := (not #179)
#290 := (or #289 #281)
#151 := (ite #30 #148 f7)
#157 := (+ #131 #151)
#162 := (= f8 #157)
#298 := (not #162)
#299 := (or #298 #290)
#134 := (ite #24 #131 f6)
#140 := (+ #114 #134)
#145 := (= f7 #140)
#307 := (not #145)
#308 := (or #307 #299)
#117 := (ite #18 #114 f3)
#123 := (+ #96 #117)
#128 := (= f6 #123)
#316 := (not #128)
#317 := (or #316 #308)
#99 := (ite #11 #96 f4)
#105 := (* -1::int f5)
#106 := (+ #105 #99)
#111 := (= f3 #106)
#325 := (not #111)
#326 := (or #325 #317)
#331 := (not #326)
#628 := (iff #331 #627)
#625 := (iff #326 #622)
#595 := (or #67 #360)
#598 := (or #389 #595)
#601 := (or #418 #598)
#604 := (or #447 #601)
#607 := (or #476 #604)
#610 := (or #505 #607)
#613 := (or #534 #610)
#616 := (or #563 #613)
#619 := (or #592 #616)
#623 := (iff #619 #622)
#624 := [rewrite]: #623
#620 := (iff #326 #619)
#617 := (iff #317 #616)
#614 := (iff #308 #613)
#611 := (iff #299 #610)
#608 := (iff #290 #607)
#605 := (iff #281 #604)
#602 := (iff #272 #601)
#599 := (iff #263 #598)
#596 := (iff #254 #595)
#361 := (iff #253 #360)
#358 := (iff #247 #355)
#346 := (+ #216 #341)
#349 := (= f13 #346)
#356 := (iff #349 #355)
#357 := [rewrite]: #356
#350 := (iff #247 #349)
#347 := (= #242 #346)
#344 := (= #236 #341)
#335 := (not #334)
#338 := (ite #335 #233 f12)
#342 := (= #338 #341)
#343 := [rewrite]: #342
#339 := (= #236 #338)
#336 := (iff #60 #335)
#337 := [rewrite]: #336
#340 := [monotonicity #337]: #339
#345 := [trans #340 #343]: #344
#348 := [monotonicity #345]: #347
#351 := [monotonicity #348]: #350
#359 := [trans #351 #357]: #358
#362 := [monotonicity #359]: #361
#597 := [monotonicity #362]: #596
#390 := (iff #262 #389)
#387 := (iff #230 #384)
#375 := (+ #199 #370)
#378 := (= f12 #375)
#385 := (iff #378 #384)
#386 := [rewrite]: #385
#379 := (iff #230 #378)
#376 := (= #225 #375)
#373 := (= #219 #370)
#364 := (not #363)
#367 := (ite #364 #216 f11)
#371 := (= #367 #370)
#372 := [rewrite]: #371
#368 := (= #219 #367)
#365 := (iff #54 #364)
#366 := [rewrite]: #365
#369 := [monotonicity #366]: #368
#374 := [trans #369 #372]: #373
#377 := [monotonicity #374]: #376
#380 := [monotonicity #377]: #379
#388 := [trans #380 #386]: #387
#391 := [monotonicity #388]: #390
#600 := [monotonicity #391 #597]: #599
#419 := (iff #271 #418)
#416 := (iff #213 #413)
#404 := (+ #182 #399)
#407 := (= f11 #404)
#414 := (iff #407 #413)
#415 := [rewrite]: #414
#408 := (iff #213 #407)
#405 := (= #208 #404)
#402 := (= #202 #399)
#393 := (not #392)
#396 := (ite #393 #199 f10)
#400 := (= #396 #399)
#401 := [rewrite]: #400
#397 := (= #202 #396)
#394 := (iff #48 #393)
#395 := [rewrite]: #394
#398 := [monotonicity #395]: #397
#403 := [trans #398 #401]: #402
#406 := [monotonicity #403]: #405
#409 := [monotonicity #406]: #408
#417 := [trans #409 #415]: #416
#420 := [monotonicity #417]: #419
#603 := [monotonicity #420 #600]: #602
#448 := (iff #280 #447)
#445 := (iff #196 #442)
#433 := (+ #165 #428)
#436 := (= f10 #433)
#443 := (iff #436 #442)
#444 := [rewrite]: #443
#437 := (iff #196 #436)
#434 := (= #191 #433)
#431 := (= #185 #428)
#422 := (not #421)
#425 := (ite #422 #182 f9)
#429 := (= #425 #428)
#430 := [rewrite]: #429
#426 := (= #185 #425)
#423 := (iff #42 #422)
#424 := [rewrite]: #423
#427 := [monotonicity #424]: #426
#432 := [trans #427 #430]: #431
#435 := [monotonicity #432]: #434
#438 := [monotonicity #435]: #437
#446 := [trans #438 #444]: #445
#449 := [monotonicity #446]: #448
#606 := [monotonicity #449 #603]: #605
#477 := (iff #289 #476)
#474 := (iff #179 #471)
#462 := (+ #148 #457)
#465 := (= f9 #462)
#472 := (iff #465 #471)
#473 := [rewrite]: #472
#466 := (iff #179 #465)
#463 := (= #174 #462)
#460 := (= #168 #457)
#454 := (ite #451 #165 f8)
#458 := (= #454 #457)
#459 := [rewrite]: #458
#455 := (= #168 #454)
#452 := (iff #36 #451)
#453 := [rewrite]: #452
#456 := [monotonicity #453]: #455
#461 := [trans #456 #459]: #460
#464 := [monotonicity #461]: #463
#467 := [monotonicity #464]: #466
#475 := [trans #467 #473]: #474
#478 := [monotonicity #475]: #477
#609 := [monotonicity #478 #606]: #608
#506 := (iff #298 #505)
#503 := (iff #162 #500)
#491 := (+ #131 #486)
#494 := (= f8 #491)
#501 := (iff #494 #500)
#502 := [rewrite]: #501
#495 := (iff #162 #494)
#492 := (= #157 #491)
#489 := (= #151 #486)
#483 := (ite #480 #148 f7)
#487 := (= #483 #486)
#488 := [rewrite]: #487
#484 := (= #151 #483)
#481 := (iff #30 #480)
#482 := [rewrite]: #481
#485 := [monotonicity #482]: #484
#490 := [trans #485 #488]: #489
#493 := [monotonicity #490]: #492
#496 := [monotonicity #493]: #495
#504 := [trans #496 #502]: #503
#507 := [monotonicity #504]: #506
#612 := [monotonicity #507 #609]: #611
#535 := (iff #307 #534)
#532 := (iff #145 #529)
#520 := (+ #114 #515)
#523 := (= f7 #520)
#530 := (iff #523 #529)
#531 := [rewrite]: #530
#524 := (iff #145 #523)
#521 := (= #140 #520)
#518 := (= #134 #515)
#512 := (ite #509 #131 f6)
#516 := (= #512 #515)
#517 := [rewrite]: #516
#513 := (= #134 #512)
#510 := (iff #24 #509)
#511 := [rewrite]: #510
#514 := [monotonicity #511]: #513
#519 := [trans #514 #517]: #518
#522 := [monotonicity #519]: #521
#525 := [monotonicity #522]: #524
#533 := [trans #525 #531]: #532
#536 := [monotonicity #533]: #535
#615 := [monotonicity #536 #612]: #614
#564 := (iff #316 #563)
#561 := (iff #128 #558)
#549 := (+ #96 #544)
#552 := (= f6 #549)
#559 := (iff #552 #558)
#560 := [rewrite]: #559
#553 := (iff #128 #552)
#550 := (= #123 #549)
#547 := (= #117 #544)
#541 := (ite #538 #114 f3)
#545 := (= #541 #544)
#546 := [rewrite]: #545
#542 := (= #117 #541)
#539 := (iff #18 #538)
#540 := [rewrite]: #539
#543 := [monotonicity #540]: #542
#548 := [trans #543 #546]: #547
#551 := [monotonicity #548]: #550
#554 := [monotonicity #551]: #553
#562 := [trans #554 #560]: #561
#565 := [monotonicity #562]: #564
#618 := [monotonicity #565 #615]: #617
#593 := (iff #325 #592)
#590 := (iff #111 #587)
#578 := (+ #105 #573)
#581 := (= f3 #578)
#588 := (iff #581 #587)
#589 := [rewrite]: #588
#582 := (iff #111 #581)
#579 := (= #106 #578)
#576 := (= #99 #573)
#567 := (not #566)
#570 := (ite #567 #96 f4)
#574 := (= #570 #573)
#575 := [rewrite]: #574
#571 := (= #99 #570)
#568 := (iff #11 #567)
#569 := [rewrite]: #568
#572 := [monotonicity #569]: #571
#577 := [trans #572 #575]: #576
#580 := [monotonicity #577]: #579
#583 := [monotonicity #580]: #582
#591 := [trans #583 #589]: #590
#594 := [monotonicity #591]: #593
#621 := [monotonicity #594 #618]: #620
#626 := [trans #621 #624]: #625
#629 := [monotonicity #626]: #628
#332 := (iff #77 #331)
#329 := (iff #76 #326)
#322 := (implies #111 #317)
#327 := (iff #322 #326)
#328 := [rewrite]: #327
#323 := (iff #76 #322)
#320 := (iff #75 #317)
#313 := (implies #128 #308)
#318 := (iff #313 #317)
#319 := [rewrite]: #318
#314 := (iff #75 #313)
#311 := (iff #74 #308)
#304 := (implies #145 #299)
#309 := (iff #304 #308)
#310 := [rewrite]: #309
#305 := (iff #74 #304)
#302 := (iff #73 #299)
#295 := (implies #162 #290)
#300 := (iff #295 #299)
#301 := [rewrite]: #300
#296 := (iff #73 #295)
#293 := (iff #72 #290)
#286 := (implies #179 #281)
#291 := (iff #286 #290)
#292 := [rewrite]: #291
#287 := (iff #72 #286)
#284 := (iff #71 #281)
#277 := (implies #196 #272)
#282 := (iff #277 #281)
#283 := [rewrite]: #282
#278 := (iff #71 #277)
#275 := (iff #70 #272)
#268 := (implies #213 #263)
#273 := (iff #268 #272)
#274 := [rewrite]: #273
#269 := (iff #70 #268)
#266 := (iff #69 #263)
#259 := (implies #230 #254)
#264 := (iff #259 #263)
#265 := [rewrite]: #264
#260 := (iff #69 #259)
#257 := (iff #68 #254)
#250 := (implies #247 #67)
#255 := (iff #250 #254)
#256 := [rewrite]: #255
#251 := (iff #68 #250)
#248 := (iff #64 #247)
#245 := (= #63 #242)
#239 := (- #236 f11)
#243 := (= #239 #242)
#244 := [rewrite]: #243
#240 := (= #63 #239)
#237 := (= #62 #236)
#234 := (= #61 #233)
#235 := [rewrite]: #234
#238 := [monotonicity #235]: #237
#241 := [monotonicity #238]: #240
#246 := [trans #241 #244]: #245
#249 := [monotonicity #246]: #248
#252 := [monotonicity #249]: #251
#258 := [trans #252 #256]: #257
#231 := (iff #58 #230)
#228 := (= #57 #225)
#222 := (- #219 f10)
#226 := (= #222 #225)
#227 := [rewrite]: #226
#223 := (= #57 #222)
#220 := (= #56 #219)
#217 := (= #55 #216)
#218 := [rewrite]: #217
#221 := [monotonicity #218]: #220
#224 := [monotonicity #221]: #223
#229 := [trans #224 #227]: #228
#232 := [monotonicity #229]: #231
#261 := [monotonicity #232 #258]: #260
#267 := [trans #261 #265]: #266
#214 := (iff #52 #213)
#211 := (= #51 #208)
#205 := (- #202 f9)
#209 := (= #205 #208)
#210 := [rewrite]: #209
#206 := (= #51 #205)
#203 := (= #50 #202)
#200 := (= #49 #199)
#201 := [rewrite]: #200
#204 := [monotonicity #201]: #203
#207 := [monotonicity #204]: #206
#212 := [trans #207 #210]: #211
#215 := [monotonicity #212]: #214
#270 := [monotonicity #215 #267]: #269
#276 := [trans #270 #274]: #275
#197 := (iff #46 #196)
#194 := (= #45 #191)
#188 := (- #185 f8)
#192 := (= #188 #191)
#193 := [rewrite]: #192
#189 := (= #45 #188)
#186 := (= #44 #185)
#183 := (= #43 #182)
#184 := [rewrite]: #183
#187 := [monotonicity #184]: #186
#190 := [monotonicity #187]: #189
#195 := [trans #190 #193]: #194
#198 := [monotonicity #195]: #197
#279 := [monotonicity #198 #276]: #278
#285 := [trans #279 #283]: #284
#180 := (iff #40 #179)
#177 := (= #39 #174)
#171 := (- #168 f7)
#175 := (= #171 #174)
#176 := [rewrite]: #175
#172 := (= #39 #171)
#169 := (= #38 #168)
#166 := (= #37 #165)
#167 := [rewrite]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#178 := [trans #173 #176]: #177
#181 := [monotonicity #178]: #180
#288 := [monotonicity #181 #285]: #287
#294 := [trans #288 #292]: #293
#163 := (iff #34 #162)
#160 := (= #33 #157)
#154 := (- #151 f6)
#158 := (= #154 #157)
#159 := [rewrite]: #158
#155 := (= #33 #154)
#152 := (= #32 #151)
#149 := (= #31 #148)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#161 := [trans #156 #159]: #160
#164 := [monotonicity #161]: #163
#297 := [monotonicity #164 #294]: #296
#303 := [trans #297 #301]: #302
#146 := (iff #28 #145)
#143 := (= #27 #140)
#137 := (- #134 f3)
#141 := (= #137 #140)
#142 := [rewrite]: #141
#138 := (= #27 #137)
#135 := (= #26 #134)
#132 := (= #25 #131)
#133 := [rewrite]: #132
#136 := [monotonicity #133]: #135
#139 := [monotonicity #136]: #138
#144 := [trans #139 #142]: #143
#147 := [monotonicity #144]: #146
#306 := [monotonicity #147 #303]: #305
#312 := [trans #306 #310]: #311
#129 := (iff #22 #128)
#126 := (= #21 #123)
#120 := (- #117 f4)
#124 := (= #120 #123)
#125 := [rewrite]: #124
#121 := (= #21 #120)
#118 := (= #20 #117)
#115 := (= #19 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#122 := [monotonicity #119]: #121
#127 := [trans #122 #125]: #126
#130 := [monotonicity #127]: #129
#315 := [monotonicity #130 #312]: #314
#321 := [trans #315 #319]: #320
#112 := (iff #16 #111)
#109 := (= #15 #106)
#102 := (- #99 f5)
#107 := (= #102 #106)
#108 := [rewrite]: #107
#103 := (= #15 #102)
#100 := (= #13 #99)
#97 := (= #12 #96)
#98 := [rewrite]: #97
#101 := [monotonicity #98]: #100
#104 := [monotonicity #101]: #103
#110 := [trans #104 #108]: #109
#113 := [monotonicity #110]: #112
#324 := [monotonicity #113 #321]: #323
#330 := [trans #324 #328]: #329
#333 := [monotonicity #330]: #332
#631 := [trans #333 #629]: #630
#94 := [asserted]: #77
#632 := [mp #94 #631]: #627
#641 := [not-or-elim #632]: #529
#908 := (or #534 #714)
#909 := [th-lemma]: #908
#910 := [unit-resolution #909 #641]: #714
#1135 := [th-lemma #910 #907 #1129 #810 #1134]: false
#1137 := [lemma #1135]: #1136
#1128 := [unit-resolution #1137 #907 #810]: #508
#709 := (or #509 #707)
#710 := [def-axiom]: #709
#1138 := [unit-resolution #710 #1128]: #707
#926 := (not #707)
#927 := (or #926 #752)
#928 := [th-lemma]: #927
#1139 := [unit-resolution #928 #1138]: #752
#1140 := [th-lemma #910 #907 #1128 #810 #1139]: false
#1142 := [lemma #1140]: #1141
#1144 := [unit-resolution #1142 #810]: #537
#717 := (or #538 #715)
#718 := [def-axiom]: #717
#1145 := [unit-resolution #718 #1144]: #715
#895 := (not #715)
#896 := (or #895 #745)
#797 := (not #745)
#893 := [hypothesis]: #797
#894 := [hypothesis]: #715
#897 := [th-lemma]: #896
#898 := [unit-resolution #897 #894 #893]: false
#899 := [lemma #898]: #896
#1146 := [unit-resolution #899 #1145]: #745
#741 := (+ f4 #584)
#742 := (<= #741 0::int)
#723 := (= f4 #573)
#722 := (>= #557 0::int)
#642 := [not-or-elim #632]: #558
#782 := (or #563 #722)
#783 := [th-lemma]: #782
#784 := [unit-resolution #783 #642]: #722
#738 := (+ #148 #497)
#739 := (<= #738 0::int)
#700 := (= #148 #486)
#703 := (or #479 #700)
#704 := [def-axiom]: #703
#811 := [unit-resolution #704 #810]: #700
#812 := (not #700)
#904 := (or #812 #739)
#905 := [th-lemma]: #904
#906 := [unit-resolution #905 #811]: #739
#706 := (>= #499 0::int)
#640 := [not-or-elim #632]: #500
#911 := (or #505 #706)
#912 := [th-lemma]: #911
#913 := [unit-resolution #912 #640]: #706
#914 := [hypothesis]: #451
#917 := (not #739)
#916 := (not #706)
#922 := (or #508 #479 #916 #917 #450)
#923 := [th-lemma]: #922
#924 := [unit-resolution #923 #914 #913 #810 #906]: #508
#925 := [unit-resolution #710 #924]: #707
#1072 := [unit-resolution #928 #925]: #752
#918 := (not #714)
#915 := (not #752)
#996 := (not #722)
#1076 := (or #566 #797 #479 #996 #915 #918)
#1077 := [th-lemma]: #1076
#1147 := [unit-resolution #1077 #1072 #784 #1146 #910 #810]: #566
#725 := (or #567 #723)
#726 := [def-axiom]: #725
#1148 := [unit-resolution #726 #1147]: #723
#934 := (not #723)
#935 := (or #934 #742)
#936 := [th-lemma]: #935
#1149 := [unit-resolution #936 #1148]: #742
#798 := (not #742)
#891 := (or #797 #798 #733 #479)
#747 := (+ #165 #468)
#748 := (<= #747 0::int)
#692 := (= #165 #457)
#762 := (not #733)
#763 := [hypothesis]: #762
#780 := [hypothesis]: #742
#781 := [hypothesis]: #745
#856 := (or #451 #479 #798 #733 #797)
#754 := (<= #753 0::int)
#820 := (not #754)
#764 := [hypothesis]: #450
#847 := (or #820 #797 #798 #733 #451 #479)
#760 := (+ #216 #381)
#809 := (>= #760 0::int)
#668 := (= #216 #370)
#667 := (= f11 #370)
#803 := (not #667)
#759 := (+ f11 #381)
#761 := (>= #759 0::int)
#794 := (not #761)
#740 := (>= #738 0::int)
#813 := (or #812 #740)
#814 := [th-lemma]: #813
#815 := [unit-resolution #814 #811]: #740
#756 := (+ f10 #410)
#758 := (>= #756 0::int)
#675 := (= f10 #399)
#690 := (>= #441 0::int)
#638 := [not-or-elim #632]: #442
#816 := (or #447 #690)
#817 := [th-lemma]: #816
#818 := [unit-resolution #817 #638]: #690
#751 := (<= #750 0::int)
#768 := [unit-resolution #694 #764]: #691
#770 := (or #769 #751)
#771 := [th-lemma]: #770
#772 := [unit-resolution #771 #768]: #751
#698 := (>= #470 0::int)
#639 := [not-or-elim #632]: #471
#765 := (or #476 #698)
#766 := [th-lemma]: #765
#767 := [unit-resolution #766 #639]: #698
#819 := [hypothesis]: #754
#823 := (not #690)
#822 := (not #698)
#821 := (not #751)
#824 := (or #392 #820 #821 #479 #822 #823)
#825 := [th-lemma]: #824
#826 := [unit-resolution #825 #819 #767 #810 #772 #818]: #392
#677 := (or #393 #675)
#678 := [def-axiom]: #677
#827 := [unit-resolution #678 #826]: #675
#828 := (not #675)
#829 := (or #828 #758)
#830 := [th-lemma]: #829
#831 := [unit-resolution #830 #827]: #758
#796 := (not #740)
#795 := (not #758)
#799 := (or #794 #795 #796 #797 #798 #451 #733)
#673 := (<= #383 0::int)
#636 := [not-or-elim #632]: #384
#773 := (or #389 #673)
#774 := [th-lemma]: #773
#775 := [unit-resolution #774 #636]: #673
#776 := [hypothesis]: #761
#730 := (>= #586 0::int)
#643 := [not-or-elim #632]: #587
#777 := (or #592 #730)
#778 := [th-lemma]: #777
#779 := [unit-resolution #778 #643]: #730
#785 := [hypothesis]: #740
#705 := (<= #499 0::int)
#786 := (or #505 #705)
#787 := [th-lemma]: #786
#788 := [unit-resolution #787 #640]: #705
#681 := (<= #412 0::int)
#637 := [not-or-elim #632]: #413
#789 := (or #418 #681)
#790 := [th-lemma]: #789
#791 := [unit-resolution #790 #637]: #681
#792 := [hypothesis]: #758
#793 := [th-lemma #792 #791 #788 #785 #784 #781 #780 #779 #776 #775 #772 #767 #764 #763]: false
#800 := [lemma #793]: #799
#832 := [unit-resolution #800 #831 #815 #781 #780 #764 #763]: #794
#804 := (or #803 #761)
#801 := [hypothesis]: #794
#802 := [hypothesis]: #667
#805 := [th-lemma]: #804
#806 := [unit-resolution #805 #802 #801]: false
#807 := [lemma #806]: #804
#833 := [unit-resolution #807 #832]: #803
#669 := (or #364 #667)
#670 := [def-axiom]: #669
#834 := [unit-resolution #670 #833]: #364
#671 := (or #363 #668)
#672 := [def-axiom]: #671
#835 := [unit-resolution #672 #834]: #668
#836 := (not #668)
#837 := (or #836 #809)
#838 := [th-lemma]: #837
#839 := [unit-resolution #838 #835]: #809
#682 := (>= #412 0::int)
#840 := (or #418 #682)
#841 := [th-lemma]: #840
#842 := [unit-resolution #841 #637]: #682
#757 := (<= #756 0::int)
#843 := (or #828 #757)
#844 := [th-lemma]: #843
#845 := [unit-resolution #844 #827]: #757
#846 := [th-lemma #819 #818 #845 #842 #788 #815 #784 #781 #780 #779 #763 #775 #772 #767 #839]: false
#848 := [lemma #846]: #847
#849 := [unit-resolution #848 #764 #780 #763 #781 #810]: #820
#859 := (or #421 #479 #451)
#857 := [hypothesis]: #422
#858 := [th-lemma #810 #857 #772 #767 #764]: false
#860 := [lemma #858]: #859
#850 := [unit-resolution #860 #764 #810]: #421
#685 := (or #422 #683)
#686 := [def-axiom]: #685
#851 := [unit-resolution #686 #850]: #683
#852 := (not #683)
#853 := (or #852 #754)
#854 := [th-lemma]: #853
#855 := [unit-resolution #854 #851 #849]: false
#861 := [lemma #855]: #856
#865 := [unit-resolution #861 #781 #780 #763 #810]: #451
#695 := (or #450 #692)
#696 := [def-axiom]: #695
#866 := [unit-resolution #696 #865]: #692
#867 := (not #692)
#868 := (or #867 #748)
#869 := [th-lemma]: #868
#870 := [unit-resolution #869 #866]: #748
#871 := (not #748)
#872 := (or #421 #871 #479 #822 #450)
#873 := [th-lemma]: #872
#874 := [unit-resolution #873 #865 #767 #810 #870]: #421
#875 := [unit-resolution #686 #874]: #683
#876 := [unit-resolution #854 #875]: #754
#877 := (or #392 #422 #820 #823 #450)
#878 := [th-lemma]: #877
#879 := [unit-resolution #878 #874 #818 #865 #876]: #392
#880 := [unit-resolution #678 #879]: #675
#881 := [unit-resolution #830 #880]: #758
#882 := [unit-resolution #844 #880]: #757
#884 := (not #682)
#883 := (not #757)
#885 := (or #363 #883 #884 #820 #823 #450)
#886 := [th-lemma]: #885
#887 := [unit-resolution #886 #865 #818 #842 #876 #882]: #363
#888 := [unit-resolution #670 #887]: #667
#889 := [unit-resolution #807 #888]: #761
#890 := [th-lemma #767 #889 #784 #781 #780 #779 #763 #775 #788 #815 #881 #791 #870]: false
#892 := [lemma #890]: #891
#1150 := [unit-resolution #892 #1149 #1146 #810]: #733
#1056 := (+ #233 #352)
#1143 := (<= #1056 0::int)
#656 := (= #233 #341)
#1084 := (or #895 #987)
#1085 := [th-lemma]: #1084
#1151 := [unit-resolution #1085 #1145]: #987
#729 := (<= #586 0::int)
#1098 := (or #592 #729)
#1099 := [th-lemma]: #1098
#1100 := [unit-resolution #1099 #643]: #729
#721 := (<= #557 0::int)
#1032 := (or #563 #721)
#1033 := [th-lemma]: #1032
#1034 := [unit-resolution #1033 #642]: #721
#1055 := (>= #741 0::int)
#1081 := (or #934 #1055)
#1082 := [th-lemma]: #1081
#1152 := [unit-resolution #1082 #1148]: #1055
#1108 := (not #721)
#1107 := (not #987)
#1106 := (not #729)
#1105 := (not #1055)
#1116 := (or #335 #762 #1105 #1106 #1107 #479 #916 #917 #1108 #450)
#1117 := [th-lemma]: #1116
#1153 := [unit-resolution #1117 #1152 #810 #913 #1034 #1100 #1150 #906 #1151 #914]: #335
#651 := (or #334 #656)
#652 := [def-axiom]: #651
#1154 := [unit-resolution #652 #1153]: #656
#1120 := (not #656)
#1155 := (or #1120 #1143)
#1156 := [th-lemma]: #1155
#1157 := [unit-resolution #1156 #1154]: #1143
#1127 := (>= #749 0::int)
#1158 := (or #926 #1127)
#1159 := [th-lemma]: #1158
#1160 := [unit-resolution #1159 #925]: #1127
#1061 := [unit-resolution #696 #914]: #692
#1062 := [unit-resolution #869 #1061]: #748
#1063 := [unit-resolution #873 #1062 #767 #810 #914]: #421
#1064 := [unit-resolution #686 #1063]: #683
#1046 := (or #852 #986)
#1047 := [th-lemma]: #1046
#1161 := [unit-resolution #1047 #1064]: #986
#1066 := (or #751 #450 #871)
#1067 := [th-lemma]: #1066
#1162 := [unit-resolution #1067 #1062 #914]: #751
#1065 := [unit-resolution #854 #1064]: #754
#1163 := [unit-resolution #825 #1065 #767 #810 #1162 #818]: #392
#1164 := [unit-resolution #678 #1163]: #675
#1165 := [unit-resolution #830 #1164]: #758
#650 := (>= #354 0::int)
#635 := [not-or-elim #632]: #355
#1166 := (or #360 #650)
#1167 := [th-lemma]: #1166
#1168 := [unit-resolution #1167 #635]: #650
#713 := (<= #528 0::int)
#1169 := (or #534 #713)
#1170 := [th-lemma]: #1169
#1171 := [unit-resolution #1170 #641]: #713
#689 := (<= #441 0::int)
#1049 := (or #447 #689)
#1050 := [th-lemma]: #1049
#1051 := [unit-resolution #1050 #638]: #689
#1125 := (or #450 #737 #479)
#1059 := (not #737)
#1060 := [hypothesis]: #1059
#1068 := [unit-resolution #1067 #914 #1062]: #751
#1069 := [unit-resolution #825 #1065 #767 #810 #1068 #818]: #392
#1070 := [unit-resolution #678 #1069]: #675
#1071 := [unit-resolution #844 #1070]: #757
#649 := (<= #354 0::int)
#954 := (or #360 #649)
#955 := [th-lemma]: #954
#956 := [unit-resolution #955 #635]: #649
#930 := (or #450 #537 #479)
#919 := (or #537 #450 #915 #479 #916 #917 #918)
#920 := [th-lemma]: #919
#921 := [unit-resolution #920 #914 #913 #910 #907 #906 #810]: #915
#929 := [unit-resolution #928 #925 #921]: false
#931 := [lemma #929]: #930
#1073 := [unit-resolution #931 #914 #810]: #537
#1074 := [unit-resolution #718 #1073]: #715
#1075 := [unit-resolution #899 #1074]: #745
#1078 := [unit-resolution #1077 #1075 #784 #810 #910 #1072]: #566
#1079 := [unit-resolution #726 #1078]: #723
#1080 := [unit-resolution #936 #1079]: #742
#1083 := [unit-resolution #1082 #1079]: #1055
#1086 := [unit-resolution #1085 #1074]: #987
#900 := (>= #747 0::int)
#1087 := (or #867 #900)
#1088 := [th-lemma]: #1087
#1089 := [unit-resolution #1088 #1061]: #900
#863 := (<= #759 0::int)
#1090 := [unit-resolution #886 #1071 #818 #914 #1065 #842]: #363
#1091 := [unit-resolution #670 #1090]: #667
#1092 := (or #803 #863)
#1093 := [th-lemma]: #1092
#1094 := [unit-resolution #1093 #1091]: #863
#674 := (>= #383 0::int)
#1095 := (or #389 #674)
#1096 := [th-lemma]: #1095
#1097 := [unit-resolution #1096 #636]: #674
#697 := (<= #470 0::int)
#1043 := (or #476 #697)
#1044 := [th-lemma]: #1043
#1045 := [unit-resolution #1044 #639]: #697
#1104 := (not #697)
#1103 := (not #900)
#1102 := (not #674)
#1101 := (not #863)
#1109 := (or #732 #1101 #1102 #1103 #1104 #883 #884 #1105 #1106 #1107 #916 #917 #1108)
#1110 := [th-lemma]: #1109
#1111 := [unit-resolution #1110 #1071 #1045 #913 #1034 #1100 #1097 #906 #842 #1094 #1089 #1086 #1083]: #732
#1058 := (>= #1056 0::int)
#1112 := (or #737 #736)
#1113 := [th-lemma]: #1112
#1114 := [unit-resolution #1113 #1060]: #736
#1053 := (or #733 #479 #967)
#743 := (+ #96 #584)
#862 := (<= #743 0::int)
#724 := (= #96 #573)
#963 := [hypothesis]: #736
#984 := (or #567 #479 #967 #733)
#932 := [hypothesis]: #566
#933 := [unit-resolution #726 #932]: #723
#937 := [unit-resolution #936 #933]: #742
#938 := (or #733 #732)
#939 := [th-lemma]: #938
#940 := [unit-resolution #939 #763]: #732
#941 := [unit-resolution #892 #937 #763 #810]: #797
#942 := [unit-resolution #899 #941]: #895
#943 := [unit-resolution #718 #942]: #538
#945 := (not #732)
#944 := (not #730)
#946 := (or #334 #537 #567 #798 #944 #945)
#947 := [th-lemma]: #946
#948 := [unit-resolution #947 #943 #932 #779 #940 #937]: #334
#653 := (or #335 #655)
#654 := [def-axiom]: #653
#949 := [unit-resolution #654 #948]: #655
#950 := (not #655)
#951 := (or #950 #901)
#952 := [th-lemma]: #951
#953 := [unit-resolution #952 #949]: #901
#957 := [unit-resolution #931 #943 #810]: #450
#958 := [unit-resolution #860 #957 #810]: #421
#959 := [unit-resolution #686 #958]: #683
#960 := [unit-resolution #854 #959]: #754
#961 := [unit-resolution #694 #957]: #691
#962 := [unit-resolution #771 #961]: #751
#966 := (not #649)
#965 := (not #901)
#964 := (not #673)
#968 := (or #794 #964 #823 #479 #965 #966 #967 #820 #821 #822 #567)
#969 := [th-lemma]: #968
#970 := [unit-resolution #969 #932 #818 #767 #810 #775 #963 #962 #960 #956 #953]: #794
#971 := [unit-resolution #807 #970]: #803
#972 := [unit-resolution #670 #971]: #364
#973 := [unit-resolution #672 #972]: #668
#974 := [unit-resolution #838 #973]: #809
#746 := (+ #114 #555)
#808 := (<= #746 0::int)
#716 := (= #114 #544)
#719 := (or #537 #716)
#720 := [def-axiom]: #719
#975 := [unit-resolution #720 #943]: #716
#976 := (not #716)
#977 := (or #976 #808)
#978 := [th-lemma]: #977
#979 := [unit-resolution #978 #975]: #808
#980 := [unit-resolution #825 #962 #767 #810 #960 #818]: #392
#981 := [unit-resolution #678 #980]: #675
#982 := [unit-resolution #844 #981]: #757
#983 := [th-lemma #943 #937 #779 #940 #775 #818 #960 #962 #767 #982 #842 #979 #788 #815 #784 #974]: false
#985 := [lemma #983]: #984
#1007 := [unit-resolution #985 #763 #963 #810]: #567
#727 := (or #566 #724)
#728 := [def-axiom]: #727
#1008 := [unit-resolution #728 #1007]: #724
#1009 := (not #724)
#1010 := (or #1009 #862)
#1011 := [th-lemma]: #1010
#1012 := [unit-resolution #1011 #1008]: #862
#1013 := (not #862)
#1014 := (or #742 #566 #1013)
#1015 := [th-lemma]: #1014
#1016 := [unit-resolution #1015 #1007 #1012]: #742
#1017 := [unit-resolution #892 #1016 #763 #810]: #797
#1018 := [unit-resolution #899 #1017]: #895
#1019 := [unit-resolution #718 #1018]: #538
#1020 := [unit-resolution #931 #1019 #810]: #450
#1021 := [unit-resolution #694 #1020]: #691
#1022 := [unit-resolution #771 #1021]: #751
#1023 := [unit-resolution #860 #1020 #810]: #421
#1024 := [unit-resolution #686 #1023]: #683
#1025 := [unit-resolution #854 #1024]: #754
#1026 := [unit-resolution #825 #1025 #767 #810 #1022 #818]: #392
#1027 := [unit-resolution #678 #1026]: #675
#1028 := [unit-resolution #844 #1027]: #757
#1005 := (or #363 #537 #566 #796 #820 #883)
#989 := [unit-resolution #720 #907]: #716
#990 := [unit-resolution #978 #989]: #808
#991 := [hypothesis]: #757
#992 := [hypothesis]: #567
#993 := [hypothesis]: #364
#995 := (not #808)
#994 := (not #705)
#997 := (or #915 #918 #537 #883 #823 #994 #796 #884 #363 #820 #995 #996 #566)
#998 := [th-lemma]: #997
#999 := [unit-resolution #998 #993 #818 #788 #910 #907 #784 #992 #785 #819 #991 #842 #990]: #915
#1000 := (or #508 #995 #537 #996 #566)
#1001 := [th-lemma]: #1000
#1002 := [unit-resolution #1001 #907 #784 #992 #990]: #508
#1003 := [unit-resolution #710 #1002]: #707
#1004 := [unit-resolution #928 #1003 #999]: false
#1006 := [lemma #1004]: #1005
#1029 := [unit-resolution #1006 #1019 #1007 #815 #1025 #1028]: #363
#1030 := [unit-resolution #670 #1029]: #667
#1031 := [unit-resolution #807 #1030]: #761
#1035 := [unit-resolution #830 #1027]: #758
#902 := (>= #746 0::int)
#1036 := [unit-resolution #720 #1019]: #716
#1037 := (or #976 #902)
#1038 := [th-lemma]: #1037
#1039 := [unit-resolution #1038 #1036]: #902
#1042 := [unit-resolution #1041 #1021]: #903
#1048 := [unit-resolution #1047 #1024]: #986
#1052 := [th-lemma #1051 #1048 #1045 #1042 #1039 #1035 #913 #906 #1034 #791 #1031 #763 #775 #1012 #779 #1026]: false
#1054 := [lemma #1052]: #1053
#1115 := [unit-resolution #1054 #1114 #810]: #733
#1118 := [unit-resolution #1117 #914 #810 #913 #1034 #1100 #1115 #906 #1086 #1083]: #335
#1119 := [unit-resolution #652 #1118]: #656
#1121 := (or #1120 #1058)
#1122 := [th-lemma]: #1121
#1123 := [unit-resolution #1122 #1119]: #1058
#1124 := [th-lemma #1123 #1111 #1080 #779 #1075 #788 #815 #784 #956 #1072 #910 #1071 #818 #842 #1065 #1060]: false
#1126 := [lemma #1124]: #1125
#1172 := [unit-resolution #1126 #914 #810]: #737
#1179 := (not #689)
#1178 := (not #986)
#1177 := (not #713)
#1176 := (not #1127)
#1175 := (not #681)
#1174 := (not #650)
#1173 := (not #1143)
#1180 := (or #732 #1173 #1105 #1106 #916 #917 #1107 #1108 #795 #1174 #1059 #1175 #1176 #1177 #1178 #1179)
#1181 := [th-lemma]: #1180
#1182 := [unit-resolution #1181 #1172 #1051 #913 #1171 #1034 #1100 #1168 #791 #906 #1165 #1151 #1152 #1161 #1160 #1157]: #732
#1183 := (or #65 #945 #762)
#1184 := [th-lemma]: #1183
#1185 := [unit-resolution #1184 #1182 #1150]: #65
#1186 := (or #736 #1173 #762 #1105 #1106 #916 #917 #1107 #1108 #795 #1174 #1175 #1176 #1177 #1178 #1179)
#1187 := [th-lemma]: #1186
#1188 := [unit-resolution #1187 #1150 #1051 #913 #1171 #1034 #1100 #791 #1168 #906 #1165 #1151 #1152 #1161 #1160 #1157]: #736
#1189 := (or #66 #967 #1059)
#1190 := [th-lemma]: #1189
#1191 := [unit-resolution #1190 #1188 #1172]: #66
#647 := (not #65)
#646 := (or #647 #648)
#633 := (not #67)
#660 := (iff #633 #646)
#644 := (not #646)
#663 := (not #644)
#662 := (iff #663 #646)
#659 := [rewrite]: #662
#664 := (iff #633 #663)
#665 := (iff #67 #644)
#666 := [rewrite]: #665
#661 := [monotonicity #666]: #664
#657 := [trans #661 #659]: #660
#634 := [not-or-elim #632]: #633
#658 := [mp #634 #657]: #646
#1192 := [unit-resolution #658 #1191 #1185]: false
#1194 := [lemma #1192]: #1193
#1217 := [unit-resolution #1194 #810]: #450
#1221 := [unit-resolution #860 #1217 #810]: #421
#1222 := [unit-resolution #686 #1221]: #683
#1223 := [unit-resolution #1047 #1222]: #986
#1224 := [unit-resolution #694 #1217]: #691
#1225 := [unit-resolution #1041 #1224]: #903
#1214 := (or #566 #479)
#1206 := (or #566 #797 #479 #915)
#1207 := [unit-resolution #1077 #784 #910]: #1206
#1208 := [unit-resolution #1207 #992 #810 #1146]: #915
#1209 := (or #508 #538 #797 #996 #566)
#1210 := [th-lemma]: #1209
#1211 := [unit-resolution #1210 #992 #784 #1144 #1146]: #508
#1212 := [unit-resolution #710 #1211]: #707
#1213 := [unit-resolution #928 #1212 #1208]: false
#1215 := [lemma #1213]: #1214
#1226 := [unit-resolution #1215 #810]: #566
#1227 := [unit-resolution #726 #1226]: #723
#1228 := [unit-resolution #1082 #1227]: #1055
#755 := (<= #760 0::int)
#1245 := (not #755)
#1312 := [hypothesis]: #1245
#1242 := (or #836 #755)
#1313 := [hypothesis]: #668
#1243 := [th-lemma]: #1242
#1314 := [unit-resolution #1243 #1313 #1312]: false
#1315 := [lemma #1314]: #1242
#1316 := [unit-resolution #1315 #1312]: #836
#1317 := [unit-resolution #672 #1316]: #363
#1318 := (or #755 #364 #1101)
#1319 := [th-lemma]: #1318
#1320 := [unit-resolution #1319 #1317 #1312]: #1101
#1321 := [unit-resolution #670 #1317]: #667
#1322 := [unit-resolution #1093 #1321 #1320]: false
#1323 := [lemma #1322]: #755
#1229 := [unit-resolution #771 #1224]: #751
#1230 := [unit-resolution #854 #1222]: #754
#1231 := (or #392 #820 #821 #479)
#1232 := [unit-resolution #825 #767 #818]: #1231
#1233 := [unit-resolution #1232 #1230 #810 #1229]: #392
#1234 := [unit-resolution #678 #1233]: #675
#1235 := [unit-resolution #830 #1234]: #758
#1276 := (or #508 #479)
#1218 := (or #451 #479 #733 #797)
#1196 := [hypothesis]: #798
#1197 := [hypothesis]: #723
#1198 := [unit-resolution #936 #1197 #1196]: false
#1199 := [lemma #1198]: #935
#1200 := [unit-resolution #1199 #1196]: #934
#1201 := [unit-resolution #726 #1200]: #567
#1202 := [unit-resolution #1015 #1201 #1196]: #1013
#1203 := [unit-resolution #728 #1201]: #724
#1204 := [unit-resolution #1011 #1203 #1202]: false
#1205 := [lemma #1204]: #742
#1219 := [unit-resolution #861 #1205]: #1218
#1220 := [unit-resolution #1219 #1146 #1217 #810]: #733
#1238 := (or #364 #795 #1178 #508 #479 #917)
#1236 := (or #364 #795 #1175 #1178 #1179 #508 #479 #916 #917)
#1237 := [th-lemma]: #1236
#1239 := [unit-resolution #1237 #1051 #913 #791]: #1238
#1240 := [unit-resolution #1239 #1129 #810 #1223 #906 #1235]: #364
#1241 := [unit-resolution #672 #1240]: #668
#1244 := [unit-resolution #1243 #1241]: #755
#1247 := (or #732 #1245 #1102 #795 #1175 #1246 #1179 #1104 #917 #916 #1107 #1108 #1178 #1105 #1106)
#1248 := [th-lemma]: #1247
#1249 := [unit-resolution #1248 #1244 #1051 #1045 #913 #1034 #1100 #1097 #1235 #791 #906 #1151 #1228 #1225 #1223]: #732
#1250 := [unit-resolution #1184 #1249 #1220]: #65
#1251 := [unit-resolution #658 #1250]: #648
#1252 := [unit-resolution #844 #1234]: #757
#1255 := (or #334 #1245 #1246 #1178 #508 #917 #795)
#1253 := (or #334 #1245 #1102 #1104 #1246 #1179 #1178 #508 #916 #917 #795 #1175)
#1254 := [th-lemma]: #1253
#1256 := [unit-resolution #1254 #791 #1051 #1045 #913 #1097]: #1255
#1257 := [unit-resolution #1256 #1244 #1223 #906 #1235 #1129 #1225]: #334
#1258 := [unit-resolution #654 #1257]: #655
#1259 := [unit-resolution #952 #1258]: #901
#1260 := (not #1057)
#1261 := (or #737 #883 #966 #884 #823 #796 #994 #820 #1260 #918 #965 #762 #1105 #1106)
#1262 := [th-lemma]: #1261
#1263 := [unit-resolution #1262 #1259 #818 #788 #910 #1100 #1220 #956 #1230 #815 #1252 #842 #1228 #1134]: #737
#1216 := (<= #864 0::int)
#1264 := (or #950 #1216)
#1265 := [th-lemma]: #1264
#1266 := [unit-resolution #1265 #1258]: #1216
#1195 := (>= #988 0::int)
#1267 := (or #1131 #1195)
#1268 := [th-lemma]: #1267
#1269 := [unit-resolution #1268 #1130]: #1195
#1271 := (not #1216)
#1270 := (not #1195)
#1272 := (or #736 #795 #1174 #1175 #1179 #917 #916 #1178 #1270 #1177 #1271 #945 #798 #944)
#1273 := [th-lemma]: #1272
#1274 := [unit-resolution #1273 #1249 #1051 #913 #1171 #779 #791 #1168 #1235 #1205 #906 #1223 #1269 #1266]: #736
#1275 := [unit-resolution #1190 #1274 #1263 #1251]: false
#1277 := [lemma #1275]: #1276
#1324 := [unit-resolution #1277 #810]: #508
#1325 := [unit-resolution #710 #1324]: #707
#1326 := [unit-resolution #928 #1325]: #752
#1327 := [unit-resolution #1159 #1325]: #1127
#1328 := (or #1057 #915 #509)
#1329 := [th-lemma]: #1328
#1330 := [unit-resolution #1329 #1326 #1324]: #1057
#1310 := (or #945 #795 #917 #1178 #762 #820 #796 #883 #1105 #1260 #1107 #1176 #915 #797)
#1282 := [hypothesis]: #733
#1281 := [hypothesis]: #732
#1283 := [unit-resolution #1184 #1281 #1282]: #65
#1284 := [unit-resolution #658 #1283]: #648
#1298 := [hypothesis]: #1057
#1286 := [hypothesis]: #1055
#1285 := [hypothesis]: #986
#1287 := [hypothesis]: #987
#1288 := [hypothesis]: #739
#1289 := [hypothesis]: #1127
#1280 := [hypothesis]: #752
#1296 := (or #1120 #883 #796 #820 #945 #915 #797 #762 #1176 #917 #795 #1107 #1105 #1178)
#1278 := [hypothesis]: #656
#1279 := [unit-resolution #1122 #1278]: #1058
#1290 := [unit-resolution #1156 #1278]: #1143
#1291 := (or #736 #1173 #762 #1105 #917 #1107 #795 #1176 #1178)
#1292 := [unit-resolution #1187 #1051 #913 #1171 #1034 #1100 #791 #1168]: #1291
#1293 := [unit-resolution #1292 #1290 #1282 #1289 #1288 #792 #1287 #1286 #1285]: #736
#1294 := [unit-resolution #1190 #1293 #1284]: #1059
#1295 := [th-lemma #991 #956 #1294 #842 #818 #785 #788 #819 #910 #1281 #1205 #779 #1280 #781 #784 #1279]: false
#1297 := [lemma #1295]: #1296
#1299 := [unit-resolution #1297 #1281 #785 #819 #991 #1280 #781 #1282 #1289 #1288 #792 #1287 #1286 #1285]: #1120
#1300 := [unit-resolution #652 #1299]: #334
#1301 := [unit-resolution #654 #1300]: #655
#1302 := [unit-resolution #952 #1301]: #901
#1303 := [unit-resolution #1262 #1302 #818 #788 #910 #1100 #1282 #956 #819 #785 #991 #842 #1286 #1298]: #737
#1304 := [unit-resolution #1265 #1301]: #1216
#1305 := (or #1195 #1176 #335 #762 #1105 #1106 #1107 #1108)
#1306 := [th-lemma]: #1305
#1307 := [unit-resolution #1306 #1300 #1100 #1282 #1287 #1286 #1289 #1034]: #1195
#1308 := [unit-resolution #1273 #1307 #1051 #913 #1171 #779 #1281 #1304 #792 #1205 #1288 #1285 #791 #1168]: #736
#1309 := [unit-resolution #1190 #1308 #1303 #1284]: false
#1311 := [lemma #1309]: #1310
#1331 := [unit-resolution #1311 #1235 #906 #1223 #1220 #1230 #815 #1252 #1228 #1330 #1151 #1327 #1326 #1146]: #945
#1332 := [unit-resolution #1248 #1331 #1235 #1051 #1045 #913 #1034 #1100 #1097 #1323 #791 #906 #1151 #1228 #1225 #1223]: false
#1333 := [lemma #1332]: #479
#701 := (or #480 #699)
#702 := [def-axiom]: #701
#1337 := [unit-resolution #702 #1333]: #699
#1338 := (not #699)
#1339 := (or #1338 #1335)
#1340 := [th-lemma]: #1339
#1341 := [unit-resolution #1340 #1337]: #1335
#1342 := [th-lemma #1333 #914 #913 #1129 #1341]: false
#1344 := [lemma #1342]: #1343
#1992 := [unit-resolution #1344 #1835]: #508
#1993 := [unit-resolution #710 #1992]: #707
#1994 := [unit-resolution #928 #1993]: #752
#1828 := (or #903 #751)
#1829 := [th-lemma]: #1828
#1830 := [unit-resolution #1829 #1580]: #751
#1836 := [unit-resolution #696 #1835]: #692
#1849 := [unit-resolution #1088 #1836]: #900
#1997 := (or #1103 #821 #915 #537)
#1351 := (not #1335)
#1995 := (or #1103 #821 #915 #1351 #916 #918 #537)
#1996 := [th-lemma]: #1995
#1998 := [unit-resolution #1996 #910 #913 #1341]: #1997
#1999 := [unit-resolution #1998 #1849 #1830 #1994]: #537
#2000 := [unit-resolution #718 #1999]: #715
#2001 := [unit-resolution #1085 #2000]: #987
#1578 := (or #450 #363)
#1563 := (or #392 #363 #450)
#1547 := [hypothesis]: #393
#1345 := (+ #199 #410)
#1346 := (<= #1345 0::int)
#676 := (= #199 #399)
#679 := (or #392 #676)
#680 := [def-axiom]: #679
#1548 := [unit-resolution #680 #1547]: #676
#1362 := (not #676)
#1363 := (or #1362 #1346)
#1370 := (not #1346)
#1390 := [hypothesis]: #1370
#1391 := [hypothesis]: #676
#1364 := [th-lemma]: #1363
#1392 := [unit-resolution #1364 #1391 #1390]: false
#1393 := [lemma #1392]: #1363
#1549 := [unit-resolution #1393 #1548]: #1346
#1550 := (or #757 #1370 #392)
#1551 := [th-lemma]: #1550
#1552 := [unit-resolution #1551 #1549 #1547]: #757
#1553 := (or #363 #883 #820 #450)
#1554 := [unit-resolution #886 #818 #842]: #1553
#1555 := [unit-resolution #1554 #1552 #993 #914]: #820
#684 := (= #182 #428)
#1466 := (not #684)
#1451 := (+ #182 #439)
#1452 := (<= #1451 0::int)
#1461 := (not #1452)
#1556 := (or #1461 #1104 #823 #480 #1103 #392)
#1557 := [th-lemma]: #1556
#1558 := [unit-resolution #1557 #1547 #1045 #1333 #1089 #818]: #1461
#1467 := (or #1466 #1452)
#1464 := [hypothesis]: #1461
#1465 := [hypothesis]: #684
#1468 := [th-lemma]: #1467
#1469 := [unit-resolution #1468 #1465 #1464]: false
#1470 := [lemma #1469]: #1467
#1559 := [unit-resolution #1470 #1558]: #1466
#687 := (or #421 #684)
#688 := [def-axiom]: #687
#1560 := [unit-resolution #688 #1559]: #421
#1561 := [unit-resolution #686 #1560]: #683
#1562 := [unit-resolution #854 #1561 #1555]: false
#1564 := [lemma #1562]: #1563
#1571 := [unit-resolution #1564 #914 #993]: #392
#1572 := [unit-resolution #678 #1571]: #675
#1573 := [unit-resolution #844 #1572]: #757
#1574 := [unit-resolution #1554 #1573 #993 #914]: #820
#1569 := (or #421 #393 #363)
#1565 := [hypothesis]: #392
#1566 := [unit-resolution #678 #1565]: #675
#1567 := [unit-resolution #844 #1566]: #757
#1568 := [th-lemma #1565 #993 #842 #857 #1567]: false
#1570 := [lemma #1568]: #1569
#1575 := [unit-resolution #1570 #1571 #993]: #421
#1576 := [unit-resolution #686 #1575]: #683
#1577 := [unit-resolution #854 #1576 #1574]: false
#1579 := [lemma #1577]: #1578
#2002 := [unit-resolution #1579 #1835]: #363
#2003 := [unit-resolution #670 #2002]: #667
#2004 := [unit-resolution #1093 #2003]: #863
#2005 := [unit-resolution #899 #2000]: #745
#1968 := (or #732 #797 #915 #1101 #1103 #1107)
#1722 := [hypothesis]: #863
#1950 := [hypothesis]: #900
#1749 := [hypothesis]: #945
#1958 := (or #732 #1101 #1103 #1105 #1107)
#1720 := (or #421 #392)
#1588 := (or #392 #450)
#1584 := (or #392 #422 #820 #450)
#1585 := [unit-resolution #878 #818]: #1584
#1586 := [unit-resolution #1585 #1560 #914 #1547]: #820
#1587 := [unit-resolution #854 #1561 #1586]: false
#1589 := [lemma #1587]: #1588
#1626 := [unit-resolution #1589 #1547]: #450
#1627 := [unit-resolution #694 #1626]: #691
#1649 := [unit-resolution #771 #1627]: #751
#1675 := (or #421 #821 #508)
#1352 := (or #421 #821 #822 #508 #1351 #916)
#1353 := [th-lemma]: #1352
#1676 := [unit-resolution #1353 #913 #767 #1341]: #1675
#1677 := [unit-resolution #1676 #857 #1649]: #508
#1678 := [unit-resolution #710 #1677]: #707
#1679 := [unit-resolution #1159 #1678]: #1127
#1628 := [unit-resolution #1583 #1627]: #903
#1680 := [unit-resolution #688 #857]: #684
#1681 := [unit-resolution #1470 #1680]: #1452
#1336 := (>= #1334 0::int)
#1366 := (or #1338 #1336)
#1367 := [th-lemma]: #1366
#1368 := [unit-resolution #1367 #1337]: #1336
#1369 := (not #1336)
#1682 := (or #538 #1369 #994 #1177 #823 #421 #392 #1176 #1461)
#1683 := [th-lemma]: #1682
#1684 := [unit-resolution #1683 #857 #818 #788 #1171 #1547 #1679 #1368 #1681]: #538
#1685 := [unit-resolution #720 #1684]: #716
#1686 := [unit-resolution #978 #1685]: #808
#1689 := (or #566 #995 #1246 #392 #1176 #1461)
#1687 := (or #566 #996 #995 #1369 #994 #1246 #1104 #823 #392 #1176 #1177 #1461)
#1688 := [th-lemma]: #1687
#1690 := [unit-resolution #1688 #1045 #788 #1171 #784 #1368 #818]: #1689
#1691 := [unit-resolution #1690 #1686 #1547 #1681 #1628 #1679]: #566
#1692 := [unit-resolution #726 #1691]: #723
#1693 := [unit-resolution #1082 #1692]: #1055
#1673 := (or #363 #392)
#1387 := (not #809)
#1545 := (or #537 #733)
#1509 := [unit-resolution #1038 #989]: #902
#1446 := (or #508 #733)
#1381 := (or #537 #733 #508)
#1348 := [unit-resolution #1344 #1129]: #450
#1349 := [unit-resolution #694 #1348]: #691
#1350 := [unit-resolution #771 #1349]: #751
#1354 := [unit-resolution #1353 #1129 #913 #767 #1350 #1341]: #421
#1355 := [unit-resolution #686 #1354]: #683
#1356 := [unit-resolution #1047 #1355]: #986
#1357 := [unit-resolution #1041 #1349]: #903
#1358 := (or #393 #1246 #1179 #1104 #1178 #918 #537 #508 #1260)
#1359 := [th-lemma]: #1358
#1360 := [unit-resolution #1359 #907 #1045 #1129 #910 #1051 #1357 #1356 #1134]: #393
#1361 := [unit-resolution #680 #1360]: #676
#1365 := [unit-resolution #1364 #1361]: #1346
#1371 := (or #363 #1179 #1178 #884 #1369 #994 #918 #537 #1260 #1370 #1246 #1104)
#1372 := [th-lemma]: #1371
#1373 := [unit-resolution #1372 #907 #1051 #1045 #788 #910 #842 #1357 #1356 #1134 #1368 #1365]: #363
#1374 := [unit-resolution #854 #1355]: #754
#1347 := (>= #1345 0::int)
#1375 := (or #1362 #1347)
#1376 := [th-lemma]: #1375
#1377 := [unit-resolution #1376 #1361]: #1347
#1378 := [th-lemma #775 #763 #791 #1350 #767 #784 #1205 #779 #1341 #913 #990 #1377 #818 #1374 #1171 #1269]: #794
#1379 := [unit-resolution #807 #1378]: #803
#1380 := [unit-resolution #670 #1379 #1373]: false
#1382 := [lemma #1380]: #1381
#1418 := [unit-resolution #1382 #1129 #763]: #537
#1419 := [unit-resolution #718 #1418]: #715
#1420 := [unit-resolution #899 #1419]: #745
#1400 := (or #1387 #733 #1246 #797)
#1383 := [hypothesis]: #809
#1385 := [hypothesis]: #903
#1388 := (or #1370 #733 #1246 #797 #1387)
#1384 := [hypothesis]: #1346
#1386 := [th-lemma #775 #763 #1385 #1045 #784 #1205 #779 #1384 #842 #1368 #788 #781 #1383]: false
#1389 := [lemma #1386]: #1388
#1394 := [unit-resolution #1389 #1383 #1385 #781 #763]: #1370
#1395 := [unit-resolution #1393 #1394]: #1362
#1396 := [unit-resolution #680 #1395]: #392
#1397 := [unit-resolution #678 #1396]: #675
#1398 := [unit-resolution #844 #1397]: #757
#1399 := [th-lemma #775 #763 #1385 #1045 #784 #1205 #779 #842 #1368 #788 #781 #1398 #1396 #1383]: false
#1401 := [lemma #1399]: #1400
#1421 := [unit-resolution #1401 #1357 #763 #1420]: #1387
#1402 := [hypothesis]: #1387
#1403 := [unit-resolution #838 #1313 #1402]: false
#1404 := [lemma #1403]: #837
#1422 := [unit-resolution #1404 #1421]: #836
#1423 := [unit-resolution #672 #1422]: #363
#1424 := [unit-resolution #670 #1423]: #667
#1425 := [unit-resolution #807 #1424]: #761
#1426 := (or #795 #794 #964 #945 #821 #822 #996 #798 #944 #1175 #1351 #916 #797 #508)
#1427 := [th-lemma]: #1426
#1428 := [unit-resolution #1427 #1129 #767 #913 #791 #784 #779 #940 #1350 #1425 #775 #1420 #1205 #1341]: #795
#1414 := (not #1347)
#1429 := (or #752 #1260 #508)
#1430 := [th-lemma]: #1429
#1431 := [unit-resolution #1430 #1134 #1129]: #752
#1432 := (or #1270 #915 #334 #945 #798 #944 #797 #996)
#1433 := [th-lemma]: #1432
#1434 := [unit-resolution #1433 #1420 #779 #940 #1269 #1205 #1431 #784]: #334
#1435 := [unit-resolution #654 #1434]: #655
#1436 := [unit-resolution #1265 #1435]: #1216
#1437 := [unit-resolution #952 #1435]: #901
#1412 := (or #737 #821 #820 #1270 #965 #794 #538)
#1405 := [hypothesis]: #537
#1406 := [unit-resolution #718 #1405]: #715
#1407 := [unit-resolution #899 #1406]: #745
#1408 := [hypothesis]: #901
#1409 := [hypothesis]: #1195
#1410 := [hypothesis]: #751
#1411 := [th-lemma #1410 #818 #767 #819 #1171 #1409 #956 #1060 #1408 #776 #775 #784 #1407 #1405]: false
#1413 := [lemma #1411]: #1412
#1438 := [unit-resolution #1413 #1350 #1374 #1269 #1437 #1425 #1418]: #737
#1439 := (or #1059 #1174 #1175 #823 #820 #1271 #733 #798 #944 #1351 #916 #1177 #1270 #1414 #821 #822)
#1440 := [th-lemma]: #1439
#1441 := [unit-resolution #1440 #1438 #818 #767 #913 #1171 #779 #763 #1436 #1350 #1374 #1205 #791 #1269 #1341 #1168]: #1414
#1415 := [hypothesis]: #1414
#1416 := [unit-resolution #1376 #1391 #1415]: false
#1417 := [lemma #1416]: #1375
#1442 := [unit-resolution #1417 #1441]: #1362
#1443 := [unit-resolution #680 #1442]: #392
#1444 := [unit-resolution #678 #1443]: #675
#1445 := [unit-resolution #830 #1444 #1428]: false
#1447 := [lemma #1445]: #1446
#1455 := [unit-resolution #1447 #763]: #508
#1456 := [unit-resolution #710 #1455]: #707
#1453 := [unit-resolution #928 #1456]: #752
#1449 := (or #450 #537 #915)
#1448 := [th-lemma #914 #1341 #913 #910 #907 #1280]: false
#1450 := [lemma #1448]: #1449
#1525 := [unit-resolution #1450 #907 #1453]: #450
#1526 := [unit-resolution #694 #1525]: #691
#1527 := [unit-resolution #771 #1526]: #751
#1528 := (or #745 #537 #995)
#1529 := [th-lemma]: #1528
#1530 := [unit-resolution #1529 #990 #907]: #745
#1531 := [unit-resolution #1041 #1526]: #903
#1532 := [unit-resolution #1401 #1531 #763 #1530]: #1387
#1533 := [unit-resolution #1404 #1532]: #836
#1534 := [unit-resolution #672 #1533]: #363
#1535 := [unit-resolution #670 #1534]: #667
#1536 := [unit-resolution #807 #1535]: #761
#1513 := (not #902)
#1537 := (or #1513 #821 #733 #794 #795)
#1516 := [hypothesis]: #1013
#1519 := (or #862 #567)
#1517 := (or #862 #567 #798)
#1518 := [th-lemma]: #1517
#1520 := [unit-resolution #1518 #1205]: #1519
#1521 := [unit-resolution #1520 #1516]: #567
#1522 := [unit-resolution #728 #1521]: #724
#1523 := [unit-resolution #1011 #1522 #1516]: false
#1524 := [lemma #1523]: #862
#1514 := (or #1013 #1513 #821 #733 #794 #795)
#1510 := [hypothesis]: #862
#1511 := [hypothesis]: #902
#1512 := [th-lemma #1034 #1511 #1341 #913 #1410 #767 #763 #779 #791 #776 #775 #792 #1510]: false
#1515 := [lemma #1512]: #1514
#1538 := [unit-resolution #1515 #1524]: #1537
#1539 := [unit-resolution #1538 #1536 #763 #1527 #1509]: #795
#1490 := (or #1414 #995 #1246 #733 #821 #797)
#1457 := [unit-resolution #1159 #1456]: #1127
#1458 := [hypothesis]: #808
#1471 := [unit-resolution #1401 #1385 #763 #781]: #1387
#1472 := [unit-resolution #1404 #1471]: #836
#1473 := [unit-resolution #672 #1472]: #363
#1474 := [unit-resolution #670 #1473]: #667
#1475 := [unit-resolution #807 #1474]: #761
#1459 := [hypothesis]: #1347
#1462 := (or #1461 #1414 #1246 #733 #794 #995)
#1454 := [hypothesis]: #1452
#1460 := [th-lemma #1459 #1385 #818 #1045 #763 #779 #791 #776 #775 #784 #1458 #1368 #788 #1457 #1171 #1454 #1205]: false
#1463 := [lemma #1460]: #1462
#1476 := [unit-resolution #1463 #1459 #1385 #763 #1475 #1458]: #1461
#1477 := [unit-resolution #1470 #1476]: #1466
#1478 := [unit-resolution #688 #1477]: #421
#1479 := (or #1195 #1369 #994 #422 #1246 #1104 #1176)
#1480 := [th-lemma]: #1479
#1481 := [unit-resolution #1480 #1478 #788 #1385 #1457 #1045 #1368]: #1195
#1482 := [unit-resolution #1433 #1481 #779 #940 #781 #1205 #1453 #784]: #334
#1483 := [unit-resolution #654 #1482]: #655
#1484 := [unit-resolution #952 #1483]: #901
#1485 := [unit-resolution #686 #1478]: #683
#1486 := [unit-resolution #854 #1485]: #754
#1487 := [unit-resolution #1265 #1483]: #1216
#1488 := [unit-resolution #1440 #1487 #818 #767 #913 #1171 #779 #763 #1459 #1410 #1486 #1205 #1481 #791 #1341 #1168]: #1059
#1489 := [th-lemma #818 #956 #1488 #1475 #775 #784 #1458 #1368 #788 #1457 #1171 #1385 #1045 #1486 #1478 #1484]: false
#1491 := [lemma #1489]: #1490
#1540 := [unit-resolution #1491 #1530 #1531 #763 #1527 #990]: #1414
#1541 := [unit-resolution #1417 #1540]: #1362
#1542 := [unit-resolution #680 #1541]: #392
#1543 := [unit-resolution #678 #1542]: #675
#1544 := [unit-resolution #830 #1543 #1539]: false
#1546 := [lemma #1544]: #1545
#1597 := [unit-resolution #1546 #763]: #537
#1598 := [unit-resolution #718 #1597]: #715
#1590 := [unit-resolution #899 #1598]: #745
#1601 := (or #450 #733)
#1591 := [unit-resolution #1579 #914]: #363
#1592 := [unit-resolution #670 #1591]: #667
#1593 := [unit-resolution #807 #1592]: #761
#1594 := [unit-resolution #1589 #914]: #392
#1595 := [unit-resolution #678 #1594]: #675
#1596 := [unit-resolution #830 #1595]: #758
#1599 := [unit-resolution #1085 #1598]: #987
#1600 := [th-lemma #1034 #1368 #788 #763 #779 #775 #1599 #1457 #1171 #767 #1062 #791 #1596 #1593 #1524]: false
#1602 := [lemma #1600]: #1601
#1603 := [unit-resolution #1602 #763]: #450
#1604 := [unit-resolution #694 #1603]: #691
#1605 := [unit-resolution #1583 #1604]: #903
#1606 := [unit-resolution #1401 #1605 #763 #1590]: #1387
#1607 := [unit-resolution #1404 #1606]: #836
#1608 := [unit-resolution #672 #1607]: #363
#1609 := [unit-resolution #670 #1608]: #667
#1610 := [unit-resolution #807 #1609]: #761
#1611 := [unit-resolution #771 #1604]: #751
#1612 := (or #902 #1107 #451 #1176 #1369 #994 #1177)
#1613 := [th-lemma]: #1612
#1614 := [unit-resolution #1613 #1599 #1171 #788 #1457 #1368 #1603]: #902
#1615 := [unit-resolution #1538 #1614 #763 #1611 #1610]: #795
#1616 := (or #808 #538 #797)
#1617 := [th-lemma]: #1616
#1618 := [unit-resolution #1617 #1590 #1597]: #808
#1619 := [unit-resolution #1491 #1611 #1590 #763 #1605 #1618]: #1414
#1620 := [unit-resolution #1417 #1619]: #1362
#1621 := [unit-resolution #680 #1620]: #392
#1622 := [unit-resolution #678 #1621]: #675
#1623 := [unit-resolution #830 #1622 #1615]: false
#1624 := [lemma #1623]: #733
#1625 := [unit-resolution #1417 #1548]: #1347
#1629 := (or #509 #1369 #994 #1246 #1104 #363 #884 #392 #1370)
#1630 := [th-lemma]: #1629
#1631 := [unit-resolution #1630 #993 #842 #1045 #788 #1547 #1628 #1368 #1549]: #509
#1632 := [unit-resolution #712 #1631]: #708
#1633 := [unit-resolution #1133 #1632]: #1057
#1634 := (or #421 #363 #884 #392 #1370)
#1635 := [th-lemma]: #1634
#1636 := [unit-resolution #1635 #993 #842 #1547 #1549]: #421
#1637 := [unit-resolution #686 #1636]: #683
#1638 := [unit-resolution #1047 #1637]: #986
#1639 := (or #363 #1178 #537 #1260 #1370 #1246)
#1640 := [unit-resolution #1372 #1051 #1045 #788 #910 #1368 #842]: #1639
#1641 := [unit-resolution #1640 #1638 #1549 #1628 #993 #1633]: #537
#1642 := [unit-resolution #718 #1641]: #715
#1643 := [unit-resolution #899 #1642]: #745
#1644 := (or #508 #538 #797 #566)
#1645 := [unit-resolution #1210 #784]: #1644
#1646 := [unit-resolution #1645 #1643 #1631 #1641]: #566
#1647 := [unit-resolution #726 #1646]: #723
#1648 := [unit-resolution #1082 #1647]: #1055
#1650 := [unit-resolution #1085 #1642]: #987
#1651 := (or #732 #1105 #1106 #1102 #1108 #1351 #916 #1107 #821 #822 #1175 #1414 #1245)
#1652 := [th-lemma]: #1651
#1653 := [unit-resolution #1652 #1650 #767 #913 #1034 #1100 #1097 #1649 #1323 #791 #1648 #1341 #1625]: #732
#1654 := [unit-resolution #1184 #1653 #1624]: #65
#1655 := [unit-resolution #854 #1637]: #754
#1656 := [unit-resolution #1268 #1632]: #1195
#1661 := (or #334 #363 #392)
#1659 := (or #334 #363 #1245 #392)
#1657 := (or #334 #363 #1245 #1102 #392)
#1658 := [th-lemma]: #1657
#1660 := [unit-resolution #1658 #1097]: #1659
#1662 := [unit-resolution #1660 #1323]: #1661
#1663 := [unit-resolution #1662 #993 #1547]: #334
#1664 := [unit-resolution #654 #1663]: #655
#1665 := [unit-resolution #1265 #1664]: #1216
#1666 := [th-lemma #1168 #1665 #1097 #1034 #1650 #1323 #1341 #913 #1649 #767 #791 #1625 #1656 #1171 #1655 #818]: #736
#1667 := [unit-resolution #672 #993]: #668
#1668 := [unit-resolution #1404 #1667]: #809
#1669 := [unit-resolution #952 #1664]: #901
#1670 := [th-lemma #956 #1669 #775 #784 #1643 #1668 #1368 #788 #1628 #1045 #842 #1549 #1633 #910 #1638 #1051]: #737
#1671 := [unit-resolution #1190 #1670 #1666]: #66
#1672 := [unit-resolution #658 #1671 #1654]: false
#1674 := [lemma #1672]: #1673
#1694 := [unit-resolution #1674 #1547]: #363
#1695 := [unit-resolution #670 #1694]: #667
#1696 := [unit-resolution #1093 #1695]: #863
#1697 := (or #334 #1102 #884 #883 #421 #1101)
#1698 := [th-lemma]: #1697
#1699 := [unit-resolution #1698 #857 #842 #1097 #1552 #1696]: #334
#1700 := [unit-resolution #654 #1699]: #655
#1701 := [unit-resolution #952 #1700]: #901
#1702 := [unit-resolution #1265 #1700]: #1216
#1703 := [unit-resolution #928 #1678]: #752
#1492 := (>= #1451 0::int)
#1704 := (or #1466 #1492)
#1705 := [th-lemma]: #1704
#1706 := [unit-resolution #1705 #1680]: #1492
#1707 := [unit-resolution #1038 #1685]: #902
#1708 := (not #1492)
#1711 := (or #736 #1708 #915 #1271 #1101 #1513 #821)
#1709 := (or #736 #1708 #1179 #915 #1351 #916 #918 #1174 #1271 #1101 #1102 #1108 #1513 #821 #822)
#1710 := [th-lemma]: #1709
#1712 := [unit-resolution #1710 #1051 #767 #913 #910 #1034 #1341 #1097 #1168]: #1711
#1713 := [unit-resolution #1712 #1707 #1706 #1649 #1703 #1696 #1702]: #736
#1714 := [unit-resolution #807 #1695]: #761
#1507 := (or #737 #1176 #965 #794 #995 #1246 #1461)
#1493 := [th-lemma #818 #1289 #1368 #788 #1171 #956 #1060 #1408 #776 #775 #784 #1458 #1385 #1045 #1454]: false
#1508 := [lemma #1493]: #1507
#1715 := [unit-resolution #1508 #1686 #1628 #1714 #1681 #1701 #1679]: #737
#1716 := [unit-resolution #1190 #1715 #1713]: #66
#1717 := [unit-resolution #658 #1716]: #647
#1718 := [unit-resolution #1184 #1717 #1624]: #945
#1719 := [th-lemma #1718 #1100 #1341 #913 #842 #1549 #910 #1051 #1703 #1706 #956 #1713 #1701 #1693]: false
#1721 := [lemma #1719]: #1720
#1753 := [unit-resolution #1721 #1547]: #421
#1803 := (or #508 #392)
#1779 := (or #537 #392)
#1754 := [unit-resolution #686 #1753]: #683
#1755 := [unit-resolution #1047 #1754]: #986
#1756 := [unit-resolution #854 #1754]: #754
#1757 := (or #1452 #820 #422)
#1758 := [th-lemma]: #1757
#1759 := [unit-resolution #1758 #1756 #1753]: #1452
#1744 := (or #508 #794 #820 #821 #1414 #537 #1101 #1246 #1178 #1370)
#1723 := (or #508 #995 #537 #566)
#1724 := [unit-resolution #1001 #784]: #1723
#1725 := [unit-resolution #1724 #1129 #990 #907]: #566
#1726 := [unit-resolution #726 #1725]: #723
#1727 := [unit-resolution #1082 #1726]: #1055
#1728 := [th-lemma #1727 #1100 #1368 #788 #842 #1384 #910 #1385 #1045 #1285 #1051 #1509 #1034 #1722 #1097 #1134]: #732
#1729 := [unit-resolution #1184 #1728 #1624]: #65
#1730 := [unit-resolution #658 #1729]: #648
#1731 := (or #334 #1101 #884 #1370 #1102 #508 #1369 #994 #1246 #1104 #918 #537 #1178 #1179 #1260)
#1732 := [th-lemma]: #1731
#1733 := [unit-resolution #1732 #1129 #842 #1051 #1045 #788 #1097 #910 #907 #1722 #1385 #1285 #1134 #1368 #1384]: #334
#1734 := [unit-resolution #654 #1733]: #655
#1735 := [unit-resolution #1265 #1734]: #1216
#1738 := (or #736 #820 #1271 #945 #1270 #1414 #821)
#1736 := (or #736 #1174 #1175 #823 #820 #1271 #945 #798 #944 #1351 #916 #1177 #1270 #1414 #821 #822)
#1737 := [th-lemma]: #1736
#1739 := [unit-resolution #1737 #818 #767 #913 #1171 #779 #1205 #791 #1341 #1168]: #1738
#1740 := [unit-resolution #1739 #1735 #1459 #1269 #1410 #819 #1728]: #736
#1741 := [unit-resolution #1190 #1740 #1730]: #1059
#1742 := [unit-resolution #952 #1734]: #901
#1743 := [th-lemma #990 #1171 #784 #956 #1742 #776 #775 #819 #1410 #767 #818 #1269 #1741]: false
#1745 := [lemma #1743]: #1744
#1760 := [unit-resolution #1745 #907 #1756 #1649 #1625 #1714 #1696 #1628 #1755 #1549]: #508
#1761 := [unit-resolution #710 #1760]: #707
#1762 := [unit-resolution #1159 #1761]: #1127
#1763 := [unit-resolution #1690 #1762 #1547 #1759 #1628 #990]: #566
#1764 := [unit-resolution #726 #1763]: #723
#1765 := [unit-resolution #1082 #1764]: #1055
#1751 := (or #732 #509 #1105 #1370 #1246 #1178 #1513 #1101)
#1746 := [hypothesis]: #508
#1747 := [unit-resolution #710 #1746]: #707
#1748 := [unit-resolution #928 #1747]: #752
#1750 := [th-lemma #1746 #1749 #1286 #1100 #1368 #788 #842 #1384 #910 #1385 #1045 #1285 #1051 #1511 #1034 #1722 #1097 #1748]: false
#1752 := [lemma #1750]: #1751
#1766 := [unit-resolution #1752 #1760 #1765 #1549 #1628 #1755 #1509 #1696]: #732
#1767 := [unit-resolution #1184 #1766 #1624]: #65
#1768 := [unit-resolution #658 #1767]: #648
#1769 := (or #1195 #422 #1246 #1176)
#1770 := [unit-resolution #1480 #788 #1045 #1368]: #1769
#1771 := [unit-resolution #1770 #1762 #1628 #1753]: #1195
#1505 := (or #334 #945 #537)
#1494 := [hypothesis]: #335
#1495 := (or #334 #537 #567 #945)
#1496 := [unit-resolution #947 #1205 #779]: #1495
#1497 := [unit-resolution #1496 #1494 #907 #1281]: #567
#1500 := (or #334 #945 #566 #1013 #537)
#1498 := (or #334 #945 #566 #1013 #537 #944)
#1499 := [th-lemma]: #1498
#1501 := [unit-resolution #1499 #779]: #1500
#1502 := [unit-resolution #1501 #1497 #1281 #1494 #907]: #1013
#1503 := [unit-resolution #728 #1497]: #724
#1504 := [unit-resolution #1011 #1503 #1502]: false
#1506 := [lemma #1504]: #1505
#1772 := [unit-resolution #1506 #1766 #907]: #334
#1773 := [unit-resolution #654 #1772]: #655
#1774 := [unit-resolution #1265 #1773]: #1216
#1775 := [unit-resolution #1739 #1774 #1625 #1771 #1649 #1756 #1766]: #736
#1776 := [unit-resolution #952 #1773]: #901
#1777 := [unit-resolution #1508 #1776 #1628 #1714 #1759 #990 #1762]: #737
#1778 := [unit-resolution #1190 #1777 #1775 #1768]: false
#1780 := [lemma #1778]: #1779
#1781 := [unit-resolution #1780 #1547]: #537
#1782 := [unit-resolution #718 #1781]: #715
#1783 := [unit-resolution #1085 #1782]: #987
#1784 := [unit-resolution #899 #1782]: #745
#1785 := [unit-resolution #1645 #1129 #1784 #1781]: #566
#1786 := [unit-resolution #726 #1785]: #723
#1787 := [unit-resolution #1082 #1786]: #1055
#1788 := [unit-resolution #1652 #1787 #767 #913 #1034 #1100 #1097 #1649 #1323 #791 #1783 #1341 #1625]: #732
#1789 := [unit-resolution #1184 #1788 #1624]: #65
#1790 := [unit-resolution #658 #1789]: #648
#1791 := (or #752 #508 #1177 #821 #822 #820 #823 #538 #392)
#1792 := [th-lemma]: #1791
#1793 := [unit-resolution #1792 #1129 #767 #818 #1171 #1781 #1649 #1756 #1547]: #752
#1794 := (or #1270 #915 #334 #945 #797)
#1795 := [unit-resolution #1433 #779 #1205 #784]: #1794
#1796 := [unit-resolution #1795 #1788 #1269 #1784 #1793]: #334
#1797 := [unit-resolution #654 #1796]: #655
#1798 := [unit-resolution #1265 #1797]: #1216
#1799 := [unit-resolution #1739 #1798 #1625 #1269 #1649 #1756 #1788]: #736
#1800 := [unit-resolution #952 #1797]: #901
#1801 := [unit-resolution #1413 #1800 #1714 #1649 #1756 #1781 #1269]: #737
#1802 := [unit-resolution #1190 #1801 #1799 #1790]: false
#1804 := [lemma #1802]: #1803
#1805 := [unit-resolution #1804 #1547]: #508
#1806 := [unit-resolution #710 #1805]: #707
#1807 := [unit-resolution #1159 #1806]: #1127
#1808 := (or #1270 #1177 #821 #822 #820 #823 #538 #509 #392)
#1809 := [th-lemma]: #1808
#1810 := [unit-resolution #1809 #1805 #767 #818 #1171 #1781 #1649 #1756 #1547]: #1270
#1811 := [unit-resolution #1770 #1810 #1807 #1628 #1753]: false
#1812 := [lemma #1811]: #392
#1850 := [unit-resolution #678 #1812]: #675
#1851 := [unit-resolution #844 #1850]: #757
#1956 := (or #732 #1101 #1103 #883 #1105 #1107)
#1951 := (or #739 #480 #1351)
#1952 := [th-lemma]: #1951
#1953 := [unit-resolution #1952 #1333 #1341]: #739
#1954 := (or #732 #1101 #1103 #883 #1105 #1107 #917)
#1955 := [unit-resolution #1110 #1045 #913 #1034 #1100 #842 #1097]: #1954
#1957 := [unit-resolution #1955 #1953]: #1956
#1959 := [unit-resolution #1957 #1851]: #1958
#1960 := [unit-resolution #1959 #1749 #1950 #1722 #1287]: #1105
#1827 := (>= #743 0::int)
#1888 := (not #1827)
#1961 := (or #1888 #732 #1106 #1101 #1102 #996 #883 #884 #1351 #916 #1103 #1104 #797 #915 #918)
#1962 := [th-lemma]: #1961
#1963 := [unit-resolution #1962 #1749 #1045 #913 #910 #784 #1100 #842 #781 #1851 #1280 #1722 #1950 #1341 #1097]: #1888
#1846 := (or #1009 #1827)
#1891 := [hypothesis]: #1888
#1892 := [hypothesis]: #724
#1847 := [th-lemma]: #1846
#1893 := [unit-resolution #1847 #1892 #1891]: false
#1894 := [lemma #1893]: #1846
#1964 := [unit-resolution #1894 #1963]: #1009
#1965 := [unit-resolution #728 #1964]: #566
#1966 := [unit-resolution #726 #1965]: #723
#1967 := [unit-resolution #1082 #1966 #1960]: false
#1969 := [lemma #1967]: #1968
#2006 := [unit-resolution #1969 #2005 #1994 #2004 #1849 #2001]: #732
#2007 := (or #65 #945)
#2008 := [unit-resolution #1184 #1624]: #2007
#2009 := [unit-resolution #2008 #2006]: #65
#2010 := [unit-resolution #658 #2009]: #648
#2011 := [unit-resolution #807 #2003]: #761
#1987 := (or #737 #1103 #915 #797 #1101 #794)
#1979 := (or #737 #965 #797 #794 #915 #1103)
#1819 := [hypothesis]: #820
#1820 := (or #986 #754)
#1821 := [th-lemma]: #1820
#1822 := [unit-resolution #1821 #1819]: #986
#1817 := (or #421 #1178)
#1813 := (or #1178 #421 #1461)
#1814 := [th-lemma]: #1813
#1815 := [unit-resolution #1814 #857 #1285]: #1461
#1816 := [unit-resolution #1470 #1815 #1680]: false
#1818 := [lemma #1816]: #1817
#1823 := [unit-resolution #1818 #1822]: #421
#1824 := [unit-resolution #686 #1823]: #683
#1825 := [unit-resolution #854 #1824 #1819]: false
#1826 := [lemma #1825]: #754
#1871 := (or #903 #421)
#1831 := [unit-resolution #1676 #1830 #857]: #508
#1832 := [unit-resolution #710 #1831]: #707
#1833 := [unit-resolution #1159 #1832]: #1127
#1837 := [unit-resolution #869 #1836]: #748
#1838 := [unit-resolution #928 #1832]: #752
#1839 := [unit-resolution #1450 #1838 #1835]: #537
#1840 := [unit-resolution #718 #1839]: #715
#1841 := [unit-resolution #1085 #1840]: #987
#1842 := (or #567 #1176 #1177 #1108 #1107 #822 #421 #450 #871)
#1843 := [th-lemma]: #1842
#1844 := [unit-resolution #1843 #1841 #767 #1171 #1034 #857 #1835 #1837 #1833]: #567
#1845 := [unit-resolution #728 #1844]: #724
#1848 := [unit-resolution #1847 #1845]: #1827
#1852 := [unit-resolution #899 #1840]: #745
#1853 := [unit-resolution #1570 #857 #1812]: #363
#1854 := [unit-resolution #670 #1853]: #667
#1855 := [unit-resolution #1093 #1854]: #863
#1856 := [unit-resolution #1698 #1855 #842 #1097 #1851 #857]: #334
#1857 := [unit-resolution #654 #1856]: #655
#1858 := [unit-resolution #952 #1857]: #901
#1859 := [unit-resolution #807 #1854]: #761
#1860 := (or #737 #966 #965 #797 #996 #794 #964 #915 #918 #1461 #823 #1104 #1103)
#1861 := [th-lemma]: #1860
#1862 := [unit-resolution #1861 #1852 #818 #1045 #910 #784 #956 #1859 #775 #1838 #1858 #1849 #1681]: #737
#1863 := [unit-resolution #1265 #1857]: #1216
#1864 := (or #736 #1174 #1271 #1107 #1108 #1101 #1102 #1176 #1177 #1708 #1179 #822 #871)
#1865 := [th-lemma]: #1864
#1866 := [unit-resolution #1865 #1837 #1051 #767 #1171 #1034 #1168 #1097 #1855 #1841 #1833 #1863 #1706]: #736
#1867 := [unit-resolution #1190 #1866 #1862]: #66
#1868 := [unit-resolution #658 #1867]: #647
#1869 := [unit-resolution #1184 #1868 #1624]: #945
#1870 := [th-lemma #1869 #1100 #1341 #913 #1855 #1097 #1852 #784 #1851 #842 #1838 #910 #1045 #1849 #1848]: false
#1872 := [lemma #1870]: #1871
#1916 := [unit-resolution #1872 #857]: #903
#1875 := (or #508 #421)
#1873 := [unit-resolution #1676 #1129 #857]: #821
#1874 := [unit-resolution #771 #1349 #1873]: false
#1876 := [lemma #1874]: #1875
#1917 := [unit-resolution #1876 #857]: #508
#1918 := [unit-resolution #710 #1917]: #707
#1919 := [unit-resolution #1159 #1918]: #1127
#1920 := [unit-resolution #928 #1918]: #752
#1914 := (or #976 #1708 #915 #1101 #1246 #1271 #794 #1461 #1176 #965)
#1895 := [hypothesis]: #716
#1896 := [unit-resolution #978 #1895]: #808
#1897 := [unit-resolution #1508 #1896 #1385 #776 #1454 #1289 #1408]: #737
#1898 := [hypothesis]: #1492
#1884 := (or #450 #1246)
#1880 := (or #1246 #450 #871)
#1881 := [th-lemma]: #1880
#1882 := [unit-resolution #1881 #914 #1385]: #871
#1883 := [unit-resolution #869 #1061 #1882]: false
#1885 := [lemma #1883]: #1884
#1899 := [unit-resolution #1885 #1385]: #450
#1900 := [unit-resolution #694 #1899]: #691
#1877 := [hypothesis]: #821
#1878 := [unit-resolution #771 #1581 #1877]: false
#1879 := [lemma #1878]: #770
#1901 := [unit-resolution #1879 #1900]: #751
#1902 := [hypothesis]: #1216
#1903 := [unit-resolution #1038 #1895]: #902
#1904 := [unit-resolution #1712 #1903 #1902 #1901 #1280 #1722 #1898]: #736
#1905 := [unit-resolution #1190 #1904 #1897]: #66
#1906 := [unit-resolution #658 #1905]: #647
#1907 := [unit-resolution #1184 #1906 #1624]: #945
#1889 := (or #1888 #732 #1101 #995 #1246)
#1886 := [hypothesis]: #1827
#1887 := [th-lemma #1749 #1100 #1722 #1097 #784 #1851 #842 #1458 #1385 #1368 #788 #1045 #1886]: false
#1890 := [lemma #1887]: #1889
#1908 := [unit-resolution #1890 #1907 #1722 #1896 #1385]: #1888
#1909 := [unit-resolution #1894 #1908]: #1009
#1910 := [unit-resolution #728 #1909]: #566
#1911 := [unit-resolution #726 #1910]: #723
#1912 := [unit-resolution #1082 #1911]: #1055
#1913 := [th-lemma #1898 #1051 #1280 #910 #1341 #913 #1034 #1903 #1901 #767 #1907 #1912 #1100 #1722 #1097 #1851 #842 #1812]: false
#1915 := [lemma #1913]: #1914
#1921 := [unit-resolution #1915 #1706 #1920 #1855 #1916 #1863 #1859 #1681 #1919 #1858]: #976
#1922 := [unit-resolution #720 #1921]: #537
#1923 := [unit-resolution #718 #1922]: #715
#1924 := [unit-resolution #899 #1923]: #745
#1925 := [unit-resolution #1617 #1924 #1922]: #808
#1926 := [unit-resolution #1885 #1916]: #450
#1927 := [unit-resolution #1085 #1923]: #987
#1928 := [unit-resolution #1613 #1927 #1171 #788 #1919 #1368 #1926]: #902
#1929 := [unit-resolution #830 #1850]: #758
#1930 := [unit-resolution #694 #1926]: #691
#1931 := [unit-resolution #1879 #1930]: #751
#1932 := (or #1414 #1461 #823 #1176 #1177 #1369 #994 #538 #421 #883)
#1933 := [th-lemma]: #1932
#1934 := [unit-resolution #1933 #1922 #788 #1171 #818 #1851 #1919 #1368 #857 #1681]: #1414
#1935 := (or #1347 #795 #1708 #1179 #915 #918 #1351 #916 #567 #1108 #1513 #821 #822)
#1936 := [th-lemma]: #1935
#1937 := [unit-resolution #1936 #1934 #913 #910 #1034 #767 #1931 #1929 #1920 #1341 #1051 #1928 #1706]: #567
#1938 := [unit-resolution #728 #1937]: #724
#1939 := [unit-resolution #1894 #1938]: #1827
#1940 := [unit-resolution #1508 #1925 #1916 #1859 #1681 #1919 #1858]: #737
#1941 := (or #748 #451 #821)
#1942 := [th-lemma]: #1941
#1943 := [unit-resolution #1942 #1931 #1926]: #748
#1944 := [unit-resolution #1865 #1927 #1051 #767 #1171 #1034 #1168 #1097 #1855 #1943 #1919 #1863 #1706]: #736
#1945 := [unit-resolution #1190 #1944 #1940]: #66
#1946 := [unit-resolution #658 #1945]: #647
#1947 := [unit-resolution #1184 #1946 #1624]: #945
#1948 := [unit-resolution #1890 #1947 #1939 #1855 #1925 #1916]: false
#1949 := [lemma #1948]: #421
#1978 := [unit-resolution #1758 #1949 #1826]: #1452
#1980 := [unit-resolution #1861 #818 #1045 #910 #784 #956 #775 #1978]: #1979
#1981 := [unit-resolution #1980 #1060 #776 #1280 #1950 #781]: #965
#1972 := (not #1058)
#1973 := (or #1972 #737 #1103 #915 #797 #1101)
#1970 := [hypothesis]: #1058
#1971 := [th-lemma #956 #1060 #1826 #1851 #842 #818 #784 #1950 #1045 #1280 #910 #781 #1722 #1097 #1970]: false
#1974 := [lemma #1971]: #1973
#1982 := [unit-resolution #1974 #1060 #1950 #1280 #781 #1722]: #1972
#1975 := [hypothesis]: #1972
#1976 := [unit-resolution #1122 #1278 #1975]: false
#1977 := [lemma #1976]: #1121
#1983 := [unit-resolution #1977 #1982]: #1120
#1984 := [unit-resolution #652 #1983]: #334
#1985 := [unit-resolution #654 #1984]: #655
#1986 := [unit-resolution #952 #1985 #1981]: false
#1988 := [lemma #1986]: #1987
#2012 := [unit-resolution #1988 #1849 #1994 #2005 #2004 #2011]: #737
#2013 := [unit-resolution #1190 #2012 #2010]: #967
#2014 := [unit-resolution #1159 #1993]: #1127
#2015 := [unit-resolution #686 #1949]: #683
#2016 := [unit-resolution #1047 #2015]: #986
#2017 := (or #1173 #1174 #736 #1178 #795 #1175 #1179 #1108 #871 #822 #1176 #1177 #1107 #794 #964)
#2018 := [th-lemma]: #2017
#2019 := [unit-resolution #2018 #2013 #791 #1051 #767 #1171 #1034 #775 #2011 #1929 #1837 #2001 #2016 #2014 #1168]: #1173
#1989 := [hypothesis]: #1173
#1990 := [unit-resolution #1156 #1278 #1989]: false
#1991 := [lemma #1990]: #1155
#2020 := [unit-resolution #1991 #2019]: #1120
#2021 := [unit-resolution #652 #2020]: #334
#2022 := [unit-resolution #654 #2021]: #655
#2023 := [unit-resolution #1265 #2022]: #1216
#2024 := (or #1492 #335 #794 #964 #1178 #795 #1175)
#2025 := [th-lemma]: #2024
#2026 := [unit-resolution #2025 #2011 #791 #775 #1929 #2016 #2021]: #1492
#2027 := (or #736 #1271 #1107 #1101 #1176 #1708 #871)
#2028 := [unit-resolution #1865 #1051 #767 #1171 #1034 #1168 #1097]: #2027
#2029 := [unit-resolution #2028 #2026 #2023 #2004 #1837 #2014 #2001 #2013]: false
#2030 := [lemma #2029]: #903
#2045 := (or #334 #1246 #508)
#2043 := (or #334 #1246 #1178 #508 #795)
#2044 := [unit-resolution #1256 #1953 #1323]: #2043
#2046 := [unit-resolution #2044 #1929 #2016]: #2045
#2047 := [unit-resolution #2046 #1129 #2030]: #334
#2048 := [unit-resolution #654 #2047]: #655
#2049 := [unit-resolution #952 #2048]: #901
#2054 := (or #740 #1246)
#2052 := (or #740 #1246 #1178 #393)
#2050 := (or #740 #1369 #1246 #1179 #1104 #1178 #393)
#2051 := [th-lemma]: #2050
#2053 := [unit-resolution #2051 #1045 #1051 #1368]: #2052
#2055 := [unit-resolution #2053 #1812 #2016]: #2054
#2056 := [unit-resolution #2055 #2030]: #740
#2064 := (or #1246 #537 #508 #1260)
#2057 := (or #1346 #883 #393)
#2058 := [th-lemma]: #2057
#2059 := [unit-resolution #2058 #1851 #1812]: #1346
#2062 := (or #795 #1370 #1246 #1178 #537 #508 #1260)
#2060 := (or #795 #1370 #1246 #1179 #1104 #1178 #918 #537 #508 #1260)
#2061 := [th-lemma]: #2060
#2063 := [unit-resolution #2061 #910 #1045 #1051]: #2062
#2065 := [unit-resolution #2063 #2059 #1929 #2016]: #2064
#2066 := [unit-resolution #2065 #1134 #2030 #1129]: #537
#2067 := [unit-resolution #718 #2066]: #715
#2068 := [unit-resolution #899 #2067]: #745
#2069 := (or #796 #1351 #996 #566 #915 #918 #797)
#2070 := [th-lemma]: #2069
#2071 := [unit-resolution #2070 #2068 #784 #910 #2056 #1431 #1341]: #566
#2072 := [unit-resolution #726 #2071]: #723
#2073 := [unit-resolution #1082 #2072]: #1055
#2076 := (or #737 #796 #1260 #965 #1105)
#2074 := (or #737 #883 #796 #820 #1260 #965 #762 #1105)
#2075 := [unit-resolution #1262 #818 #788 #910 #1100 #956 #842]: #2074
#2077 := [unit-resolution #2075 #1624 #1826 #1851]: #2076
#2078 := [unit-resolution #2077 #2073 #2056 #2049 #1134]: #737
#2079 := [unit-resolution #1265 #2048]: #1216
#2080 := [unit-resolution #1085 #2067]: #987
#2083 := (or #732 #1246 #1107 #1105)
#2081 := (or #732 #795 #1246 #1107 #1178 #1105)
#2082 := [unit-resolution #1248 #1051 #1045 #913 #1034 #1100 #1097 #1323 #791 #1953]: #2081
#2084 := [unit-resolution #2082 #1929 #2016]: #2083
#2085 := [unit-resolution #2084 #2073 #2080 #2030]: #732
#2088 := (or #736 #1270 #1271 #945)
#2086 := (or #736 #795 #1178 #1270 #1271 #945)
#2087 := [unit-resolution #1273 #1051 #913 #1171 #779 #1205 #1953 #791 #1168]: #2086
#2089 := [unit-resolution #2087 #1929 #2016]: #2088
#2090 := [unit-resolution #2089 #2085 #1269 #2079]: #736
#2091 := [unit-resolution #2008 #2085]: #65
#2092 := [unit-resolution #658 #2091]: #648
#2093 := [unit-resolution #1190 #2092 #2090 #2078]: false
#2094 := [lemma #2093]: #508
#2095 := [unit-resolution #710 #2094]: #707
#2096 := [unit-resolution #928 #2095]: #752
#2097 := [unit-resolution #1885 #2030]: #450
#2098 := [unit-resolution #694 #2097]: #691
#2099 := [unit-resolution #1879 #2098]: #751
#2100 := (or #509 #1369 #994 #1246 #1104 #883 #884 #393 #363)
#2101 := [th-lemma]: #2100
#2102 := [unit-resolution #2101 #2094 #842 #1045 #788 #1812 #1851 #2030 #1368]: #363
#2103 := (or #900 #1246 #1178 #795 #1175 #364 #1179)
#2104 := [th-lemma]: #2103
#2105 := [unit-resolution #2104 #791 #1051 #1929 #2102 #2030 #2016]: #900
#2106 := [unit-resolution #1998 #2105 #2099 #2096]: #537
#2107 := [unit-resolution #718 #2106]: #715
#2108 := [unit-resolution #899 #2107]: #745
#2031 := [hypothesis]: #1101
#2032 := (or #863 #761)
#2033 := [th-lemma]: #2032
#2034 := [unit-resolution #2033 #2031]: #761
#2037 := (or #794 #363)
#2035 := (or #794 #1245 #363)
#2036 := [th-lemma]: #2035
#2038 := [unit-resolution #2036 #1323]: #2037
#2039 := [unit-resolution #2038 #2034]: #363
#2040 := [unit-resolution #670 #2039]: #667
#2041 := [unit-resolution #1093 #2040 #2031]: false
#2042 := [lemma #2041]: #863
#2109 := [unit-resolution #1085 #2107]: #987
#2110 := [unit-resolution #2070 #2108 #784 #910 #2056 #2096 #1341]: #566
#2111 := [unit-resolution #726 #2110]: #723
#2112 := [unit-resolution #1082 #2111]: #1055
#2113 := [unit-resolution #1159 #2095]: #1127
#2114 := [unit-resolution #1329 #2096 #2094]: #1057
#2117 := (or #945 #796 #1105 #1260 #1107 #1176 #915 #797)
#2115 := (or #945 #795 #1178 #762 #820 #796 #883 #1105 #1260 #1107 #1176 #915 #797)
#2116 := [unit-resolution #1311 #1953]: #2115
#2118 := [unit-resolution #2116 #1624 #1929 #1826 #2016 #1851]: #2117
#2119 := [unit-resolution #2118 #2109 #2056 #2114 #2113 #2112 #2096 #2108]: #945
[unit-resolution #1969 #2119 #2109 #2096 #2042 #2105 #2108]: false
unsat
91a72ccddaee78c8eef27b68b8a29a516e5fa812 52 0
#2 := false
#12 := 1::real
decl f3 :: real
#8 := f3
#10 := 2::real
#11 := (* 2::real f3)
#13 := (+ #11 1::real)
#9 := (+ f3 f3)
#14 := (< #9 #13)
#15 := (or false #14)
#16 := (or #14 #15)
#17 := (not #16)
#69 := (iff #17 false)
#37 := (+ 1::real #11)
#40 := (< #11 #37)
#57 := (not #40)
#67 := (iff #57 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #57 #62)
#60 := (iff #40 true)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#58 := (iff #17 #57)
#55 := (iff #16 #40)
#50 := (or #40 #40)
#53 := (iff #50 #40)
#54 := [rewrite]: #53
#51 := (iff #16 #50)
#48 := (iff #15 #40)
#43 := (or false #40)
#46 := (iff #43 #40)
#47 := [rewrite]: #46
#44 := (iff #15 #43)
#41 := (iff #14 #40)
#38 := (= #13 #37)
#39 := [rewrite]: #38
#35 := (= #9 #11)
#36 := [rewrite]: #35
#42 := [monotonicity #36 #39]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #42 #49]: #51
#56 := [trans #52 #54]: #55
#59 := [monotonicity #56]: #58
#70 := [trans #59 #68]: #69
#34 := [asserted]: #17
[mp #34 #70]: false
unsat
fcbcf3a00f1d2be93e0056636348f79e12052409 348 0
#2 := false
#11 := 0::int
decl f5 :: int
#38 := f5
#421 := (>= f5 0::int)
#427 := (<= f5 0::int)
#755 := (not #427)
#411 := (not #421)
#756 := (or #411 #755)
#717 := (not #756)
#41 := 2::int
#445 := (mod f5 2::int)
#71 := -1::int
#446 := (* -1::int #445)
decl f4 :: (-> int int int)
#42 := (f4 f5 2::int)
#447 := (+ #42 #446)
#444 := (= #447 0::int)
#707 := (not #444)
#719 := (>= #447 0::int)
#649 := (not #719)
#656 := [hypothesis]: #719
#691 := (>= #445 0::int)
#1 := true
#62 := [true-axiom]: true
#667 := (or false #691)
#645 := [th-lemma]: #667
#646 := [unit-resolution #645 #62]: #691
#202 := (>= #42 0::int)
#205 := (not #202)
#39 := 1::int
#43 := (* 2::int #42)
#44 := (+ #43 1::int)
#45 := (+ f5 #44)
#40 := (+ f5 1::int)
#46 := (<= #40 #45)
#47 := (not #46)
#210 := (iff #47 #205)
#184 := (+ f5 #43)
#185 := (+ 1::int #184)
#175 := (+ 1::int f5)
#190 := (<= #175 #185)
#193 := (not #190)
#208 := (iff #193 #205)
#199 := (>= #43 0::int)
#196 := (not #199)
#206 := (iff #196 #205)
#203 := (iff #199 #202)
#204 := [rewrite]: #203
#207 := [monotonicity #204]: #206
#200 := (iff #193 #196)
#197 := (iff #190 #199)
#198 := [rewrite]: #197
#201 := [monotonicity #198]: #200
#209 := [trans #201 #207]: #208
#194 := (iff #47 #193)
#191 := (iff #46 #190)
#188 := (= #45 #185)
#178 := (+ 1::int #43)
#181 := (+ f5 #178)
#186 := (= #181 #185)
#187 := [rewrite]: #186
#182 := (= #45 #181)
#179 := (= #44 #178)
#180 := [rewrite]: #179
#183 := [monotonicity #180]: #182
#189 := [trans #183 #187]: #188
#176 := (= #40 #175)
#177 := [rewrite]: #176
#192 := [monotonicity #177 #189]: #191
#195 := [monotonicity #192]: #194
#211 := [trans #195 #209]: #210
#174 := [asserted]: #47
#212 := [mp #174 #211]: #205
#648 := [th-lemma #212 #646 #656]: false
#650 := [lemma #648]: #649
#662 := (or #707 #719)
#663 := [th-lemma]: #662
#664 := [unit-resolution #663 #650]: #707
#639 := (or #717 #444)
#743 := -2::int
#441 := (* -1::int f5)
#467 := (mod #441 -2::int)
#363 := (+ #42 #467)
#462 := (= #363 0::int)
#741 := (ite #756 #444 #462)
#765 := (= #42 0::int)
#766 := (= f5 0::int)
#452 := (ite #766 #765 #741)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#777 := (pattern #29)
#75 := (* -1::int #9)
#72 := (* -1::int #8)
#130 := (mod #72 #75)
#289 := (+ #29 #130)
#290 := (= #289 0::int)
#30 := (mod #8 #9)
#286 := (* -1::int #30)
#287 := (+ #29 #286)
#288 := (= #287 0::int)
#97 := (<= #9 0::int)
#93 := (<= #8 0::int)
#228 := (or #93 #97)
#229 := (not #228)
#104 := (>= #8 0::int)
#220 := (or #97 #104)
#221 := (not #220)
#235 := (or #221 #229)
#291 := (ite #235 #288 #290)
#285 := (= #29 0::int)
#12 := (= #8 0::int)
#292 := (ite #12 #285 #291)
#284 := (= #8 #29)
#13 := (= #9 0::int)
#293 := (ite #13 #284 #292)
#778 := (forall (vars (?v0 int) (?v1 int)) (:pat #777) #293)
#296 := (forall (vars (?v0 int) (?v1 int)) #293)
#781 := (iff #296 #778)
#779 := (iff #293 #293)
#780 := [refl]: #779
#782 := [quant-intro #780]: #781
#136 := (* -1::int #130)
#253 := (ite #235 #30 #136)
#256 := (ite #12 0::int #253)
#259 := (ite #13 #8 #256)
#262 := (= #29 #259)
#265 := (forall (vars (?v0 int) (?v1 int)) #262)
#297 := (iff #265 #296)
#294 := (iff #262 #293)
#295 := [rewrite]: #294
#298 := [quant-intro #295]: #297
#105 := (not #104)
#98 := (not #97)
#108 := (and #98 #105)
#94 := (not #93)
#101 := (and #94 #98)
#111 := (or #101 #108)
#156 := (ite #111 #30 #136)
#159 := (ite #12 0::int #156)
#162 := (ite #13 #8 #159)
#165 := (= #29 #162)
#168 := (forall (vars (?v0 int) (?v1 int)) #165)
#266 := (iff #168 #265)
#263 := (iff #165 #262)
#260 := (= #162 #259)
#257 := (= #159 #256)
#254 := (= #156 #253)
#238 := (iff #111 #235)
#232 := (or #229 #221)
#236 := (iff #232 #235)
#237 := [rewrite]: #236
#233 := (iff #111 #232)
#230 := (iff #108 #221)
#231 := [rewrite]: #230
#218 := (iff #101 #229)
#219 := [rewrite]: #218
#234 := [monotonicity #219 #231]: #233
#239 := [trans #234 #237]: #238
#255 := [monotonicity #239]: #254
#258 := [monotonicity #255]: #257
#261 := [monotonicity #258]: #260
#264 := [monotonicity #261]: #263
#267 := [quant-intro #264]: #266
#216 := (~ #168 #168)
#213 := (~ #165 #165)
#226 := [refl]: #213
#217 := [nnf-pos #226]: #216
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#171 := (iff #37 #168)
#65 := (and #16 #18)
#68 := (or #17 #65)
#141 := (ite #68 #30 #136)
#144 := (ite #12 0::int #141)
#147 := (ite #13 #8 #144)
#150 := (= #29 #147)
#153 := (forall (vars (?v0 int) (?v1 int)) #150)
#169 := (iff #153 #168)
#166 := (iff #150 #165)
#163 := (= #147 #162)
#160 := (= #144 #159)
#157 := (= #141 #156)
#112 := (iff #68 #111)
#109 := (iff #65 #108)
#106 := (iff #18 #105)
#107 := [rewrite]: #106
#99 := (iff #16 #98)
#100 := [rewrite]: #99
#110 := [monotonicity #100 #107]: #109
#102 := (iff #17 #101)
#95 := (iff #15 #94)
#96 := [rewrite]: #95
#103 := [monotonicity #96 #100]: #102
#113 := [monotonicity #103 #110]: #112
#158 := [monotonicity #113]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [quant-intro #167]: #169
#154 := (iff #37 #153)
#151 := (iff #36 #150)
#148 := (= #35 #147)
#145 := (= #34 #144)
#142 := (= #33 #141)
#139 := (= #32 #136)
#133 := (- #130)
#137 := (= #133 #136)
#138 := [rewrite]: #137
#134 := (= #32 #133)
#131 := (= #31 #130)
#76 := (= #23 #75)
#77 := [rewrite]: #76
#73 := (= #22 #72)
#74 := [rewrite]: #73
#132 := [monotonicity #74 #77]: #131
#135 := [monotonicity #132]: #134
#140 := [trans #135 #138]: #139
#69 := (iff #20 #68)
#66 := (iff #19 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#143 := [monotonicity #70 #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#155 := [quant-intro #152]: #154
#172 := [trans #155 #170]: #171
#129 := [asserted]: #37
#173 := [mp #129 #172]: #168
#227 := [mp~ #173 #217]: #168
#268 := [mp #227 #267]: #265
#299 := [mp #268 #298]: #296
#783 := [mp #299 #782]: #778
#736 := (not #778)
#725 := (or #736 #452)
#357 := (* -1::int 2::int)
#442 := (mod #441 #357)
#443 := (+ #42 #442)
#434 := (= #443 0::int)
#448 := (<= 2::int 0::int)
#762 := (or #427 #448)
#764 := (not #762)
#551 := (or #448 #421)
#758 := (not #551)
#432 := (or #758 #764)
#433 := (ite #432 #444 #434)
#767 := (ite #766 #765 #433)
#768 := (= f5 #42)
#763 := (= 2::int 0::int)
#769 := (ite #763 #768 #767)
#726 := (or #736 #769)
#722 := (iff #726 #725)
#728 := (iff #725 #725)
#729 := [rewrite]: #728
#735 := (iff #769 #452)
#455 := (ite false #768 #452)
#449 := (iff #455 #452)
#731 := [rewrite]: #449
#733 := (iff #769 #455)
#453 := (iff #767 #452)
#738 := (iff #433 #741)
#463 := (iff #434 #462)
#739 := (= #443 #363)
#468 := (= #442 #467)
#744 := (= #357 -2::int)
#466 := [rewrite]: #744
#469 := [monotonicity #466]: #468
#740 := [monotonicity #469]: #739
#737 := [monotonicity #740]: #463
#754 := (iff #432 #756)
#395 := (iff #764 #755)
#390 := (iff #762 #427)
#749 := (or #427 false)
#746 := (iff #749 #427)
#752 := [rewrite]: #746
#750 := (iff #762 #749)
#424 := (iff #448 false)
#760 := [rewrite]: #424
#751 := [monotonicity #760]: #750
#753 := [trans #751 #752]: #390
#396 := [monotonicity #753]: #395
#747 := (iff #758 #411)
#409 := (iff #551 #421)
#420 := (or false #421)
#745 := (iff #420 #421)
#408 := [rewrite]: #745
#761 := (iff #551 #420)
#404 := [monotonicity #760]: #761
#410 := [trans #404 #408]: #409
#748 := [monotonicity #410]: #747
#757 := [monotonicity #748 #396]: #754
#742 := [monotonicity #757 #737]: #738
#454 := [monotonicity #742]: #453
#759 := (iff #763 false)
#419 := [rewrite]: #759
#734 := [monotonicity #419 #454]: #733
#732 := [trans #734 #731]: #735
#723 := [monotonicity #732]: #722
#724 := [trans #723 #729]: #722
#727 := [quant-inst]: #726
#730 := [mp #727 #724]: #725
#665 := [unit-resolution #730 #783]: #452
#595 := (not #766)
#594 := (not #452)
#651 := (or #594 #595)
#700 := (not #765)
#666 := (or #700 #202)
#690 := [th-lemma]: #666
#684 := [unit-resolution #690 #212]: #700
#554 := (or #594 #595 #765)
#702 := [def-axiom]: #554
#652 := [unit-resolution #702 #684]: #651
#647 := [unit-resolution #652 #665]: #595
#604 := (or #594 #766 #741)
#699 := [def-axiom]: #604
#653 := [unit-resolution #699 #647 #665]: #741
#721 := (not #741)
#550 := (or #721 #717 #444)
#552 := [def-axiom]: #550
#635 := [unit-resolution #552 #653]: #639
#636 := [unit-resolution #635 #664]: #717
#572 := (or #756 #421)
#573 := [def-axiom]: #572
#637 := [unit-resolution #573 #636]: #421
#715 := (or #756 #427)
#716 := [def-axiom]: #715
#640 := [unit-resolution #716 #636]: #427
#643 := (or #755 #411)
#641 := (or #766 #755 #411)
#642 := [th-lemma]: #641
#638 := [unit-resolution #642 #647]: #643
[unit-resolution #638 #640 #637]: false
unsat
3ff5c7aca258ce7606adbaf5b380622b5f987775 354 0
#2 := false
#11 := 0::int
decl f5 :: int
#38 := f5
#444 := (<= f5 0::int)
#760 := (>= f5 0::int)
#406 := (not #760)
#749 := (not #444)
#753 := (or #749 #406)
#716 := (not #753)
#39 := 2::int
#441 := (mod f5 2::int)
#70 := -1::int
#442 := (* -1::int #441)
decl f4 :: (-> int int int)
#40 := (f4 f5 2::int)
#370 := (+ #40 #442)
#443 := (= #370 0::int)
#589 := (not #443)
#546 := (<= #370 0::int)
#649 := (not #546)
#657 := (>= #441 2::int)
#658 := (not #657)
#1 := true
#61 := [true-axiom]: true
#645 := (or false #658)
#646 := [th-lemma]: #645
#647 := [unit-resolution #646 #61]: #658
#648 := [hypothesis]: #546
#200 := (>= #40 2::int)
#43 := 3::int
#44 := (+ f5 3::int)
#41 := (+ #40 #40)
#42 := (+ f5 #41)
#45 := (< #42 #44)
#46 := (not #45)
#205 := (iff #46 #200)
#180 := (+ 3::int f5)
#174 := (* 2::int #40)
#177 := (+ f5 #174)
#183 := (< #177 #180)
#186 := (not #183)
#203 := (iff #186 #200)
#192 := (>= #174 3::int)
#201 := (iff #192 #200)
#202 := [rewrite]: #201
#198 := (iff #186 #192)
#190 := (not #192)
#193 := (not #190)
#196 := (iff #193 #192)
#197 := [rewrite]: #196
#194 := (iff #186 #193)
#191 := (iff #183 #190)
#189 := [rewrite]: #191
#195 := [monotonicity #189]: #194
#199 := [trans #195 #197]: #198
#204 := [trans #199 #202]: #203
#187 := (iff #46 #186)
#184 := (iff #45 #183)
#181 := (= #44 #180)
#182 := [rewrite]: #181
#178 := (= #42 #177)
#175 := (= #41 #174)
#176 := [rewrite]: #175
#179 := [monotonicity #176]: #178
#185 := [monotonicity #179 #182]: #184
#188 := [monotonicity #185]: #187
#206 := [trans #188 #204]: #205
#173 := [asserted]: #46
#207 := [mp #173 #206]: #200
#643 := [th-lemma #207 #648 #647]: false
#635 := [lemma #643]: #649
#652 := (or #589 #546)
#663 := [th-lemma]: #652
#641 := [unit-resolution #663 #635]: #589
#613 := (or #716 #443)
#464 := -2::int
#437 := (* -1::int f5)
#735 := (mod #437 -2::int)
#459 := (+ #40 #735)
#734 := (= #459 0::int)
#449 := (ite #753 #443 #734)
#429 := (= #40 0::int)
#761 := (= f5 0::int)
#729 := (ite #761 #429 #449)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#773 := (pattern #29)
#74 := (* -1::int #9)
#71 := (* -1::int #8)
#129 := (mod #71 #74)
#284 := (+ #29 #129)
#285 := (= #284 0::int)
#30 := (mod #8 #9)
#281 := (* -1::int #30)
#282 := (+ #29 #281)
#283 := (= #282 0::int)
#96 := (<= #9 0::int)
#92 := (<= #8 0::int)
#223 := (or #92 #96)
#224 := (not #223)
#103 := (>= #8 0::int)
#215 := (or #96 #103)
#216 := (not #215)
#230 := (or #216 #224)
#286 := (ite #230 #283 #285)
#280 := (= #29 0::int)
#12 := (= #8 0::int)
#287 := (ite #12 #280 #286)
#279 := (= #8 #29)
#13 := (= #9 0::int)
#288 := (ite #13 #279 #287)
#774 := (forall (vars (?v0 int) (?v1 int)) (:pat #773) #288)
#291 := (forall (vars (?v0 int) (?v1 int)) #288)
#777 := (iff #291 #774)
#775 := (iff #288 #288)
#776 := [refl]: #775
#778 := [quant-intro #776]: #777
#135 := (* -1::int #129)
#248 := (ite #230 #30 #135)
#251 := (ite #12 0::int #248)
#254 := (ite #13 #8 #251)
#257 := (= #29 #254)
#260 := (forall (vars (?v0 int) (?v1 int)) #257)
#292 := (iff #260 #291)
#289 := (iff #257 #288)
#290 := [rewrite]: #289
#293 := [quant-intro #290]: #292
#104 := (not #103)
#97 := (not #96)
#107 := (and #97 #104)
#93 := (not #92)
#100 := (and #93 #97)
#110 := (or #100 #107)
#155 := (ite #110 #30 #135)
#158 := (ite #12 0::int #155)
#161 := (ite #13 #8 #158)
#164 := (= #29 #161)
#167 := (forall (vars (?v0 int) (?v1 int)) #164)
#261 := (iff #167 #260)
#258 := (iff #164 #257)
#255 := (= #161 #254)
#252 := (= #158 #251)
#249 := (= #155 #248)
#233 := (iff #110 #230)
#227 := (or #224 #216)
#231 := (iff #227 #230)
#232 := [rewrite]: #231
#228 := (iff #110 #227)
#225 := (iff #107 #216)
#226 := [rewrite]: #225
#213 := (iff #100 #224)
#214 := [rewrite]: #213
#229 := [monotonicity #214 #226]: #228
#234 := [trans #229 #232]: #233
#250 := [monotonicity #234]: #249
#253 := [monotonicity #250]: #252
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [quant-intro #259]: #261
#211 := (~ #167 #167)
#208 := (~ #164 #164)
#221 := [refl]: #208
#212 := [nnf-pos #221]: #211
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#170 := (iff #37 #167)
#64 := (and #16 #18)
#67 := (or #17 #64)
#140 := (ite #67 #30 #135)
#143 := (ite #12 0::int #140)
#146 := (ite #13 #8 #143)
#149 := (= #29 #146)
#152 := (forall (vars (?v0 int) (?v1 int)) #149)
#168 := (iff #152 #167)
#165 := (iff #149 #164)
#162 := (= #146 #161)
#159 := (= #143 #158)
#156 := (= #140 #155)
#111 := (iff #67 #110)
#108 := (iff #64 #107)
#105 := (iff #18 #104)
#106 := [rewrite]: #105
#98 := (iff #16 #97)
#99 := [rewrite]: #98
#109 := [monotonicity #99 #106]: #108
#101 := (iff #17 #100)
#94 := (iff #15 #93)
#95 := [rewrite]: #94
#102 := [monotonicity #95 #99]: #101
#112 := [monotonicity #102 #109]: #111
#157 := [monotonicity #112]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#153 := (iff #37 #152)
#150 := (iff #36 #149)
#147 := (= #35 #146)
#144 := (= #34 #143)
#141 := (= #33 #140)
#138 := (= #32 #135)
#132 := (- #129)
#136 := (= #132 #135)
#137 := [rewrite]: #136
#133 := (= #32 #132)
#130 := (= #31 #129)
#75 := (= #23 #74)
#76 := [rewrite]: #75
#72 := (= #22 #71)
#73 := [rewrite]: #72
#131 := [monotonicity #73 #76]: #130
#134 := [monotonicity #131]: #133
#139 := [trans #134 #137]: #138
#68 := (iff #20 #67)
#65 := (iff #19 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#142 := [monotonicity #69 #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [quant-intro #151]: #153
#171 := [trans #154 #169]: #170
#128 := [asserted]: #37
#172 := [mp #128 #171]: #167
#222 := [mp~ #172 #212]: #167
#263 := [mp #222 #262]: #260
#294 := [mp #263 #293]: #291
#779 := [mp #294 #778]: #774
#718 := (not #774)
#719 := (or #718 #729)
#352 := (* -1::int 2::int)
#438 := (mod #437 #352)
#439 := (+ #40 #438)
#430 := (= #439 0::int)
#440 := (<= 2::int 0::int)
#423 := (or #444 #440)
#758 := (not #423)
#417 := (or #440 #760)
#547 := (not #417)
#754 := (or #547 #758)
#428 := (ite #754 #443 #430)
#762 := (ite #761 #429 #428)
#763 := (= f5 #40)
#764 := (= 2::int 0::int)
#759 := (ite #764 #763 #762)
#724 := (or #718 #759)
#720 := (iff #724 #719)
#567 := (iff #719 #719)
#568 := [rewrite]: #567
#722 := (iff #759 #729)
#727 := (ite false #763 #729)
#732 := (iff #727 #729)
#721 := [rewrite]: #732
#731 := (iff #759 #727)
#730 := (iff #762 #729)
#450 := (iff #428 #449)
#738 := (iff #430 #734)
#733 := (= #439 #459)
#736 := (= #438 #735)
#465 := (= #352 -2::int)
#358 := [rewrite]: #465
#458 := [monotonicity #358]: #736
#737 := [monotonicity #458]: #733
#448 := [monotonicity #737]: #738
#462 := (iff #754 #753)
#392 := (or #406 #749)
#739 := (iff #392 #753)
#740 := [rewrite]: #739
#752 := (iff #754 #392)
#751 := (iff #758 #749)
#748 := (iff #423 #444)
#744 := (or #444 false)
#747 := (iff #744 #444)
#742 := [rewrite]: #747
#745 := (iff #423 #744)
#415 := (iff #440 false)
#420 := [rewrite]: #415
#746 := [monotonicity #420]: #745
#386 := [trans #746 #742]: #748
#391 := [monotonicity #386]: #751
#407 := (iff #547 #406)
#404 := (iff #417 #760)
#756 := (or false #760)
#400 := (iff #756 #760)
#741 := [rewrite]: #400
#416 := (iff #417 #756)
#757 := [monotonicity #420]: #416
#405 := [trans #757 #741]: #404
#743 := [monotonicity #405]: #407
#750 := [monotonicity #743 #391]: #752
#463 := [trans #750 #740]: #462
#451 := [monotonicity #463 #448]: #450
#445 := [monotonicity #451]: #730
#765 := (iff #764 false)
#755 := [rewrite]: #765
#728 := [monotonicity #755 #445]: #731
#723 := [trans #728 #721]: #722
#726 := [monotonicity #723]: #720
#569 := [trans #726 #568]: #720
#725 := [quant-inst]: #724
#711 := [mp #725 #569]: #719
#642 := [unit-resolution #711 #779]: #729
#696 := (not #761)
#695 := (not #729)
#638 := (or #695 #696)
#602 := (not #429)
#712 := (<= #40 0::int)
#644 := (not #712)
#674 := (not #200)
#675 := (or #644 #674)
#631 := [th-lemma]: #675
#632 := [unit-resolution #631 #207]: #644
#633 := (or #602 #712)
#636 := [th-lemma]: #633
#637 := [unit-resolution #636 #632]: #602
#699 := (or #695 #696 #429)
#584 := [def-axiom]: #699
#639 := [unit-resolution #584 #637]: #638
#634 := [unit-resolution #639 #642]: #696
#599 := (or #695 #761 #449)
#601 := [def-axiom]: #599
#640 := [unit-resolution #601 #634 #642]: #449
#703 := (not #449)
#705 := (or #703 #716 #443)
#706 := [def-axiom]: #705
#614 := [unit-resolution #706 #640]: #613
#615 := [unit-resolution #614 #641]: #716
#714 := (or #753 #444)
#708 := [def-axiom]: #714
#508 := [unit-resolution #708 #615]: #444
#709 := (or #753 #760)
#715 := [def-axiom]: #709
#619 := [unit-resolution #715 #615]: #760
#620 := (or #761 #749 #406)
#621 := [th-lemma]: #620
#626 := [unit-resolution #621 #634]: #753
[unit-resolution #626 #619 #508]: false
unsat
37b2210a0af8b22facfab20f06af5ae3c558113d 101 0
#2 := false
#9 := 0::real
decl f3 :: real
#8 := f3
#10 := (= f3 0::real)
#11 := (not #10)
#43 := [asserted]: #11
#99 := (<= f3 0::real)
#21 := 2::real
#45 := (* 2::real f3)
#100 := (<= #45 0::real)
#93 := (= #45 0::real)
#20 := 4::real
#15 := (- f3)
#14 := (< f3 0::real)
#16 := (ite #14 #15 f3)
#13 := 1::real
#17 := (< 1::real #16)
#18 := (not #17)
#19 := (or #17 #18)
#22 := (ite #19 4::real 2::real)
#23 := (* #22 f3)
#12 := (+ f3 f3)
#24 := (= #12 #23)
#25 := (not #24)
#26 := (not #25)
#94 := (iff #26 #93)
#75 := (* 4::real f3)
#78 := (= #45 #75)
#91 := (iff #78 #93)
#92 := [rewrite]: #91
#89 := (iff #26 #78)
#81 := (not #78)
#84 := (not #81)
#87 := (iff #84 #78)
#88 := [rewrite]: #87
#85 := (iff #26 #84)
#82 := (iff #25 #81)
#79 := (iff #24 #78)
#76 := (= #23 #75)
#73 := (= #22 4::real)
#1 := true
#68 := (ite true 4::real 2::real)
#71 := (= #68 4::real)
#72 := [rewrite]: #71
#69 := (= #22 #68)
#66 := (iff #19 true)
#48 := -1::real
#49 := (* -1::real f3)
#52 := (ite #14 #49 f3)
#55 := (< 1::real #52)
#58 := (not #55)
#61 := (or #55 #58)
#64 := (iff #61 true)
#65 := [rewrite]: #64
#62 := (iff #19 #61)
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#53 := (= #16 #52)
#50 := (= #15 #49)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #57 #60]: #62
#67 := [trans #63 #65]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#77 := [monotonicity #74]: #76
#46 := (= #12 #45)
#47 := [rewrite]: #46
#80 := [monotonicity #47 #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#90 := [trans #86 #88]: #89
#95 := [trans #90 #92]: #94
#44 := [asserted]: #26
#96 := [mp #44 #95]: #93
#102 := (not #93)
#103 := (or #102 #100)
#104 := [th-lemma]: #103
#105 := [unit-resolution #104 #96]: #100
#106 := (not #100)
#107 := (or #99 #106)
#108 := [th-lemma]: #107
#109 := [unit-resolution #108 #105]: #99
#97 := (>= f3 0::real)
#101 := (>= #45 0::real)
#110 := (or #102 #101)
#111 := [th-lemma]: #110
#112 := [unit-resolution #111 #96]: #101
#113 := (not #101)
#114 := (or #97 #113)
#115 := [th-lemma]: #114
#116 := [unit-resolution #115 #112]: #97
#118 := (not #97)
#117 := (not #99)
#119 := (or #10 #117 #118)
#120 := [th-lemma]: #119
[unit-resolution #120 #116 #109 #43]: false
unsat
70f2c00c05f2849d6805e35842428b4464a986bf 943 0
#2 := false
#49 := 1::int
decl f4 :: (-> int int int)
#41 := 2::int
decl f6 :: int
#39 := f6
#51 := (f4 f6 2::int)
#407 := (>= #51 1::int)
#11 := 0::int
#561 := (mod f6 2::int)
#78 := -1::int
#562 := (* -1::int #561)
#563 := (+ #51 #562)
#474 := (>= #563 0::int)
#564 := (= #563 0::int)
decl f5 :: int
#38 := f5
#40 := (+ f5 f6)
#765 := (= #40 0::int)
#605 := (not #765)
#421 := (<= #40 0::int)
#751 := (not #421)
#448 := (>= #40 0::int)
#405 := (<= #51 1::int)
#952 := (>= #561 2::int)
#953 := (not #952)
#1235 := [hypothesis]: #952
#1 := true
#69 := [true-axiom]: true
#1236 := (or false #953)
#1237 := [th-lemma]: #1236
#1238 := [unit-resolution #1237 #69 #1235]: false
#1239 := [lemma #1238]: #953
#473 := (<= #563 0::int)
#757 := (not #448)
#855 := [hypothesis]: #757
#428 := (or #605 #448)
#430 := [th-lemma]: #428
#431 := [unit-resolution #430 #855]: #605
#1181 := (or #564 #765)
#650 := -4::int
#469 := (* -1::int f5)
#647 := (mod #469 -4::int)
#44 := 4::int
#45 := (f4 f5 4::int)
#635 := (+ #45 #647)
#640 := (= #635 0::int)
#683 := (mod f5 4::int)
#685 := (* -1::int #683)
#695 := (+ #45 #685)
#696 := (= #695 0::int)
#697 := (>= f5 0::int)
#656 := (not #697)
#688 := (<= f5 0::int)
#657 := (not #688)
#646 := (or #657 #656)
#643 := (ite #646 #696 #640)
#676 := (= f5 0::int)
#577 := (not #676)
#675 := (= #45 0::int)
#582 := (not #675)
#46 := 3::int
#1034 := (= 3::int 0::int)
#1036 := (iff #1034 false)
#1037 := [rewrite]: #1036
#1031 := [hypothesis]: #675
#1032 := (= 3::int #45)
#47 := (= #45 3::int)
#187 := [asserted]: #47
#1033 := [symm #187]: #1032
#1035 := [trans #1033 #1031]: #1034
#1038 := [mp #1035 #1037]: false
#1039 := [lemma #1038]: #582
#1053 := (or #577 #675)
#617 := (ite #676 #675 #643)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#777 := (pattern #29)
#82 := (* -1::int #9)
#79 := (* -1::int #8)
#137 := (mod #79 #82)
#289 := (+ #29 #137)
#290 := (= #289 0::int)
#30 := (mod #8 #9)
#286 := (* -1::int #30)
#287 := (+ #29 #286)
#288 := (= #287 0::int)
#111 := (>= #8 0::int)
#104 := (<= #9 0::int)
#219 := (or #104 #111)
#220 := (not #219)
#100 := (<= #8 0::int)
#206 := (or #100 #104)
#204 := (not #206)
#223 := (or #204 #220)
#291 := (ite #223 #288 #290)
#285 := (= #29 0::int)
#12 := (= #8 0::int)
#292 := (ite #12 #285 #291)
#284 := (= #8 #29)
#13 := (= #9 0::int)
#293 := (ite #13 #284 #292)
#778 := (forall (vars (?v0 int) (?v1 int)) (:pat #777) #293)
#296 := (forall (vars (?v0 int) (?v1 int)) #293)
#781 := (iff #296 #778)
#779 := (iff #293 #293)
#780 := [refl]: #779
#782 := [quant-intro #780]: #781
#143 := (* -1::int #137)
#239 := (ite #223 #30 #143)
#242 := (ite #12 0::int #239)
#245 := (ite #13 #8 #242)
#248 := (= #29 #245)
#251 := (forall (vars (?v0 int) (?v1 int)) #248)
#297 := (iff #251 #296)
#294 := (iff #248 #293)
#295 := [rewrite]: #294
#298 := [quant-intro #295]: #297
#112 := (not #111)
#105 := (not #104)
#115 := (and #105 #112)
#101 := (not #100)
#108 := (and #101 #105)
#118 := (or #108 #115)
#163 := (ite #118 #30 #143)
#166 := (ite #12 0::int #163)
#169 := (ite #13 #8 #166)
#172 := (= #29 #169)
#175 := (forall (vars (?v0 int) (?v1 int)) #172)
#252 := (iff #175 #251)
#249 := (iff #172 #248)
#246 := (= #169 #245)
#243 := (= #166 #242)
#240 := (= #163 #239)
#224 := (iff #118 #223)
#221 := (iff #115 #220)
#222 := [rewrite]: #221
#217 := (iff #108 #204)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#241 := [monotonicity #225]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [quant-intro #250]: #252
#212 := (~ #175 #175)
#214 := (~ #172 #172)
#211 := [refl]: #214
#207 := [nnf-pos #211]: #212
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#178 := (iff #37 #175)
#72 := (and #16 #18)
#75 := (or #17 #72)
#148 := (ite #75 #30 #143)
#151 := (ite #12 0::int #148)
#154 := (ite #13 #8 #151)
#157 := (= #29 #154)
#160 := (forall (vars (?v0 int) (?v1 int)) #157)
#176 := (iff #160 #175)
#173 := (iff #157 #172)
#170 := (= #154 #169)
#167 := (= #151 #166)
#164 := (= #148 #163)
#119 := (iff #75 #118)
#116 := (iff #72 #115)
#113 := (iff #18 #112)
#114 := [rewrite]: #113
#106 := (iff #16 #105)
#107 := [rewrite]: #106
#117 := [monotonicity #107 #114]: #116
#109 := (iff #17 #108)
#102 := (iff #15 #101)
#103 := [rewrite]: #102
#110 := [monotonicity #103 #107]: #109
#120 := [monotonicity #110 #117]: #119
#165 := [monotonicity #120]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [quant-intro #174]: #176
#161 := (iff #37 #160)
#158 := (iff #36 #157)
#155 := (= #35 #154)
#152 := (= #34 #151)
#149 := (= #33 #148)
#146 := (= #32 #143)
#140 := (- #137)
#144 := (= #140 #143)
#145 := [rewrite]: #144
#141 := (= #32 #140)
#138 := (= #31 #137)
#83 := (= #23 #82)
#84 := [rewrite]: #83
#80 := (= #22 #79)
#81 := [rewrite]: #80
#139 := [monotonicity #81 #84]: #138
#142 := [monotonicity #139]: #141
#147 := [trans #142 #145]: #146
#76 := (iff #20 #75)
#73 := (iff #19 #72)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#150 := [monotonicity #77 #147]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [quant-intro #159]: #161
#179 := [trans #162 #177]: #178
#136 := [asserted]: #37
#180 := [mp #136 #179]: #175
#208 := [mp~ #180 #207]: #175
#254 := [mp #208 #253]: #251
#299 := [mp #254 #298]: #296
#783 := [mp #299 #782]: #778
#571 := (not #778)
#628 := (or #571 #617)
#705 := (* -1::int 4::int)
#692 := (mod #469 #705)
#694 := (+ #45 #692)
#686 := (= #694 0::int)
#693 := (<= 4::int 0::int)
#698 := (or #693 #697)
#687 := (not #698)
#689 := (or #688 #693)
#690 := (not #689)
#684 := (or #690 #687)
#691 := (ite #684 #696 #686)
#678 := (ite #676 #675 #691)
#679 := (= f5 #45)
#680 := (= 4::int 0::int)
#681 := (ite #680 #679 #678)
#631 := (or #571 #681)
#633 := (iff #631 #628)
#634 := (iff #628 #628)
#614 := [rewrite]: #634
#626 := (iff #681 #617)
#512 := (ite false #679 #617)
#625 := (iff #512 #617)
#630 := [rewrite]: #625
#623 := (iff #681 #512)
#618 := (iff #678 #617)
#638 := (iff #691 #643)
#641 := (iff #686 #640)
#636 := (= #694 #635)
#653 := (= #692 #647)
#651 := (= #705 -4::int)
#652 := [rewrite]: #651
#639 := [monotonicity #652]: #653
#637 := [monotonicity #639]: #636
#642 := [monotonicity #637]: #641
#648 := (iff #684 #646)
#667 := (iff #687 #656)
#665 := (iff #698 #697)
#660 := (or false #697)
#663 := (iff #660 #697)
#664 := [rewrite]: #663
#661 := (iff #698 #660)
#668 := (iff #693 false)
#669 := [rewrite]: #668
#662 := [monotonicity #669]: #661
#666 := [trans #662 #664]: #665
#645 := [monotonicity #666]: #667
#658 := (iff #690 #657)
#654 := (iff #689 #688)
#671 := (or #688 false)
#670 := (iff #671 #688)
#674 := [rewrite]: #670
#672 := (iff #689 #671)
#673 := [monotonicity #669]: #672
#655 := [trans #673 #674]: #654
#659 := [monotonicity #655]: #658
#649 := [monotonicity #659 #645]: #648
#644 := [monotonicity #649 #642]: #638
#619 := [monotonicity #644]: #618
#677 := (iff #680 false)
#682 := [rewrite]: #677
#624 := [monotonicity #682 #619]: #623
#627 := [trans #624 #630]: #626
#629 := [monotonicity #627]: #633
#560 := [trans #629 #614]: #633
#632 := [quant-inst]: #631
#615 := [mp #632 #560]: #628
#1052 := [unit-resolution #615 #783]: #617
#576 := (not #617)
#578 := (or #576 #577 #675)
#579 := [def-axiom]: #578
#1054 := [unit-resolution #579 #1052]: #1053
#1055 := [unit-resolution #1054 #1039]: #577
#1056 := (or #676 #643)
#580 := (or #576 #676 #643)
#581 := [def-axiom]: #580
#1057 := [unit-resolution #581 #1052]: #1056
#1058 := [unit-resolution #1057 #1055]: #643
#598 := (not #643)
#943 := (or #564 #598 #765)
#556 := (<= #695 0::int)
#853 := [hypothesis]: #643
#567 := (<= f6 0::int)
#543 := (= f6 0::int)
#460 := (not #564)
#826 := [hypothesis]: #460
#824 := (or #543 #564)
#463 := -2::int
#363 := (* -1::int f6)
#508 := (mod #363 -2::int)
#510 := (+ #51 #508)
#495 := (= #510 0::int)
#533 := (not #567)
#565 := (>= f6 0::int)
#513 := (not #565)
#523 := (or #513 #533)
#498 := (ite #523 #564 #495)
#542 := (= #51 0::int)
#501 := (ite #543 #542 #498)
#487 := (or #571 #501)
#357 := (* -1::int 2::int)
#557 := (mod #363 #357)
#558 := (+ #51 #557)
#559 := (= #558 0::int)
#427 := (<= 2::int 0::int)
#566 := (or #427 #565)
#549 := (not #566)
#537 := (or #567 #427)
#538 := (not #537)
#539 := (or #538 #549)
#540 := (ite #539 #564 #559)
#544 := (ite #543 #542 #540)
#387 := (= f6 #51)
#768 := (= 2::int 0::int)
#545 := (ite #768 #387 #544)
#488 := (or #571 #545)
#490 := (iff #488 #487)
#491 := (iff #487 #487)
#476 := [rewrite]: #491
#485 := (iff #545 #501)
#504 := (ite false #387 #501)
#482 := (iff #504 #501)
#484 := [rewrite]: #482
#493 := (iff #545 #504)
#502 := (iff #544 #501)
#499 := (iff #540 #498)
#496 := (iff #559 #495)
#492 := (= #558 #510)
#509 := (= #557 #508)
#737 := (= #357 -2::int)
#741 := [rewrite]: #737
#507 := [monotonicity #741]: #509
#494 := [monotonicity #507]: #492
#497 := [monotonicity #494]: #496
#520 := (iff #539 #523)
#518 := (or #533 #513)
#516 := (iff #518 #523)
#519 := [rewrite]: #516
#522 := (iff #539 #518)
#514 := (iff #549 #513)
#521 := (iff #566 #565)
#527 := (or false #565)
#526 := (iff #527 #565)
#531 := [rewrite]: #526
#529 := (iff #566 #527)
#745 := (iff #427 false)
#408 := [rewrite]: #745
#530 := [monotonicity #408]: #529
#511 := [trans #530 #531]: #521
#517 := [monotonicity #511]: #514
#536 := (iff #538 #533)
#534 := (iff #537 #567)
#541 := (or #567 false)
#528 := (iff #541 #567)
#532 := [rewrite]: #528
#546 := (iff #537 #541)
#525 := [monotonicity #408]: #546
#535 := [trans #525 #532]: #534
#524 := [monotonicity #535]: #536
#515 := [monotonicity #524 #517]: #522
#506 := [trans #515 #519]: #520
#500 := [monotonicity #506 #497]: #499
#503 := [monotonicity #500]: #502
#769 := (iff #768 false)
#759 := [rewrite]: #769
#505 := [monotonicity #759 #503]: #493
#486 := [trans #505 #484]: #485
#483 := [monotonicity #486]: #490
#477 := [trans #483 #476]: #490
#489 := [quant-inst]: #488
#478 := [mp #489 #477]: #487
#829 := [unit-resolution #478 #783]: #501
#435 := (not #543)
#370 := [hypothesis]: #435
#422 := (not #501)
#438 := (or #422 #543 #498)
#439 := [def-axiom]: #438
#366 := [unit-resolution #439 #370 #829]: #498
#835 := (or #565 #564)
#827 := [hypothesis]: #513
#480 := (or #523 #565)
#479 := [def-axiom]: #480
#828 := [unit-resolution #479 #827]: #523
#830 := (or #435 #565)
#831 := [th-lemma]: #830
#832 := [unit-resolution #831 #827]: #435
#833 := [unit-resolution #439 #832 #829]: #498
#471 := (not #523)
#456 := (not #498)
#457 := (or #456 #471 #564)
#458 := [def-axiom]: #457
#834 := [unit-resolution #458 #833 #828 #826]: false
#836 := [lemma #834]: #835
#371 := [unit-resolution #836 #826]: #565
#358 := (or #543 #533 #513)
#360 := [th-lemma]: #358
#821 := [unit-resolution #360 #370 #371]: #533
#481 := (or #523 #567)
#470 := [def-axiom]: #481
#822 := [unit-resolution #470 #821]: #523
#823 := [unit-resolution #458 #822 #366 #826]: false
#825 := [lemma #823]: #824
#852 := [unit-resolution #825 #826]: #543
#913 := (or #435 #567)
#914 := [th-lemma]: #913
#915 := [unit-resolution #914 #852]: #567
#916 := [hypothesis]: #605
#739 := (+ #469 #363)
#738 := (mod #739 -2::int)
#42 := (f4 #40 2::int)
#453 := (+ #42 #738)
#733 := (= #453 0::int)
#445 := (mod #40 2::int)
#446 := (* -1::int #445)
#447 := (+ #42 #446)
#444 := (= #447 0::int)
#466 := (or #751 #757)
#731 := (ite #466 #444 #733)
#918 := (or #765 #731)
#43 := (= #42 0::int)
#736 := (ite #765 #43 #731)
#572 := (or #571 #736)
#441 := (* -1::int #40)
#442 := (mod #441 #357)
#443 := (+ #42 #442)
#434 := (= #443 0::int)
#762 := (or #427 #448)
#764 := (not #762)
#551 := (or #421 #427)
#758 := (not #551)
#432 := (or #758 #764)
#433 := (ite #432 #444 #434)
#766 := (ite #765 #43 #433)
#767 := (= #40 #42)
#763 := (ite #768 #767 #766)
#573 := (or #571 #763)
#716 := (iff #573 #572)
#718 := (iff #572 #572)
#712 := [rewrite]: #718
#724 := (iff #763 #736)
#419 := (* -1::int #42)
#424 := (+ f6 #419)
#760 := (+ f5 #424)
#420 := (= #760 0::int)
#727 := (ite false #420 #736)
#728 := (iff #727 #736)
#729 := [rewrite]: #728
#722 := (iff #763 #727)
#725 := (iff #766 #736)
#735 := (iff #433 #731)
#734 := (iff #434 #733)
#454 := (= #443 #453)
#742 := (= #442 #738)
#740 := (= #441 #739)
#462 := [rewrite]: #740
#452 := [monotonicity #462 #741]: #742
#455 := [monotonicity #452]: #454
#449 := [monotonicity #455]: #734
#467 := (iff #432 #466)
#743 := (iff #764 #757)
#756 := (iff #762 #448)
#390 := (or false #448)
#395 := (iff #390 #448)
#396 := [rewrite]: #395
#753 := (iff #762 #390)
#755 := [monotonicity #408]: #753
#754 := [trans #755 #396]: #756
#744 := [monotonicity #754]: #743
#746 := (iff #758 #751)
#749 := (iff #551 #421)
#409 := (or #421 false)
#747 := (iff #409 #421)
#748 := [rewrite]: #747
#410 := (iff #551 #409)
#411 := [monotonicity #408]: #410
#750 := [trans #411 #748]: #749
#752 := [monotonicity #750]: #746
#468 := [monotonicity #752 #744]: #467
#732 := [monotonicity #468 #449]: #735
#726 := [monotonicity #732]: #725
#761 := (iff #767 #420)
#404 := [rewrite]: #761
#723 := [monotonicity #759 #404 #726]: #722
#730 := [trans #723 #729]: #724
#717 := [monotonicity #730]: #716
#713 := [trans #717 #712]: #716
#715 := [quant-inst]: #573
#719 := [mp #715 #713]: #572
#917 := [unit-resolution #719 #783]: #736
#603 := (not #736)
#607 := (or #603 #765 #731)
#608 := [def-axiom]: #607
#919 := [unit-resolution #608 #917]: #918
#920 := [unit-resolution #919 #916]: #731
#711 := (not #731)
#911 := (or #448 #513 #533 #598 #711)
#854 := [hypothesis]: #565
#856 := (or #513 #656 #448)
#857 := [th-lemma]: #856
#858 := [unit-resolution #857 #855 #854]: #656
#621 := (or #646 #697)
#616 := [def-axiom]: #621
#859 := [unit-resolution #616 #858]: #646
#622 := (not #646)
#600 := (or #598 #622 #696)
#601 := [def-axiom]: #600
#860 := [unit-resolution #601 #859 #853]: #696
#592 := (not #696)
#861 := (or #592 #556)
#862 := [th-lemma]: #861
#863 := [unit-resolution #862 #860]: #556
#587 := (>= #695 0::int)
#864 := (or #592 #587)
#865 := [th-lemma]: #864
#866 := [unit-resolution #865 #860]: #587
#548 := (<= #45 3::int)
#867 := (not #47)
#868 := (or #867 #548)
#869 := [th-lemma]: #868
#870 := [unit-resolution #869 #187]: #548
#555 := (>= #45 3::int)
#871 := (or #867 #555)
#872 := [th-lemma]: #871
#873 := [unit-resolution #872 #187]: #555
#874 := [hypothesis]: #567
#361 := (div f5 4::int)
#791 := (* -4::int #361)
#792 := (+ #791 #685)
#793 := (+ f5 #792)
#845 := (<= #793 0::int)
#790 := (= #793 0::int)
#875 := (or false #790)
#876 := [th-lemma]: #875
#877 := [unit-resolution #876 #69]: #790
#878 := (not #790)
#879 := (or #878 #845)
#880 := [th-lemma]: #879
#881 := [unit-resolution #880 #877]: #845
#846 := (>= #793 0::int)
#882 := (or #878 #846)
#883 := [th-lemma]: #882
#884 := [unit-resolution #883 #877]: #846
#707 := (<= #447 0::int)
#885 := [hypothesis]: #731
#721 := (or #466 #448)
#550 := [def-axiom]: #721
#886 := [unit-resolution #550 #855]: #466
#552 := (not #466)
#593 := (or #711 #552 #444)
#594 := [def-axiom]: #593
#887 := [unit-resolution #594 #886 #885]: #444
#702 := (not #444)
#888 := (or #702 #707)
#889 := [th-lemma]: #888
#890 := [unit-resolution #889 #887]: #707
#709 := (>= #447 0::int)
#891 := (or #702 #709)
#892 := [th-lemma]: #891
#893 := [unit-resolution #892 #887]: #709
#586 := (<= #42 0::int)
#181 := [asserted]: #43
#609 := (not #43)
#894 := (or #609 #586)
#895 := [th-lemma]: #894
#896 := [unit-resolution #895 #181]: #586
#547 := (>= #42 0::int)
#897 := (or #609 #547)
#898 := [th-lemma]: #897
#899 := [unit-resolution #898 #181]: #547
#412 := (div #40 2::int)
#400 := (* -2::int #412)
#403 := (+ #400 #446)
#391 := (+ f6 #403)
#393 := (+ f5 #391)
#838 := (<= #393 0::int)
#401 := (= #393 0::int)
#900 := (or false #401)
#901 := [th-lemma]: #900
#902 := [unit-resolution #901 #69]: #401
#903 := (not #401)
#904 := (or #903 #838)
#905 := [th-lemma]: #904
#906 := [unit-resolution #905 #902]: #838
#839 := (>= #393 0::int)
#907 := (or #903 #839)
#908 := [th-lemma]: #907
#909 := [unit-resolution #908 #902]: #839
#910 := [th-lemma #909 #906 #899 #896 #893 #890 #884 #881 #854 #874 #873 #870 #866 #863]: false
#912 := [lemma #910]: #911
#927 := [unit-resolution #912 #371 #915 #853 #920]: #448
#928 := (or #765 #751 #757)
#929 := [th-lemma]: #928
#930 := [unit-resolution #929 #927 #916]: #751
#931 := (or #657 #533 #421)
#932 := [th-lemma]: #931
#933 := [unit-resolution #932 #930 #915]: #657
#596 := (or #646 #688)
#620 := [def-axiom]: #596
#934 := [unit-resolution #620 #933]: #646
#935 := [unit-resolution #601 #934 #853]: #696
#936 := [unit-resolution #862 #935]: #556
#937 := [unit-resolution #865 #935]: #587
#720 := (or #466 #421)
#714 := [def-axiom]: #720
#938 := [unit-resolution #714 #930]: #466
#939 := [unit-resolution #594 #938 #920]: #444
#940 := [unit-resolution #889 #939]: #707
#941 := [unit-resolution #892 #939]: #709
#942 := [th-lemma #909 #906 #899 #896 #941 #940 #873 #870 #884 #881 #371 #915 #937 #936]: false
#944 := [lemma #942]: #943
#1182 := [unit-resolution #944 #1058]: #1181
#1183 := [unit-resolution #1182 #431]: #564
#1184 := (or #460 #473)
#1185 := [th-lemma]: #1184
#1123 := [unit-resolution #1185 #1183]: #473
#1125 := (not #473)
#1126 := (or #405 #952 #1125)
#1107 := [th-lemma]: #1126
#1234 := [unit-resolution #1107 #1123 #1239]: #405
#429 := (or #448 #444)
#461 := [hypothesis]: #702
#436 := [unit-resolution #919 #431]: #731
#437 := [unit-resolution #594 #436 #886 #461]: false
#440 := [lemma #437]: #429
#1240 := [unit-resolution #440 #855]: #444
#1241 := (or #460 #474)
#1242 := [th-lemma]: #1241
#1243 := [unit-resolution #1242 #1183]: #474
#1027 := (not #474)
#1244 := (or #702 #407 #1027)
#975 := (or #646 #676)
#968 := [hypothesis]: #577
#969 := [hypothesis]: #622
#970 := [unit-resolution #620 #969]: #688
#971 := [unit-resolution #616 #969]: #697
#972 := (or #676 #657 #656)
#973 := [th-lemma]: #972
#974 := [unit-resolution #973 #971 #970 #968]: false
#976 := [lemma #974]: #975
#1059 := [unit-resolution #976 #1055]: #646
#1060 := [unit-resolution #601 #1059 #1058]: #696
#1061 := [unit-resolution #865 #1060]: #587
#1108 := [unit-resolution #862 #1060]: #556
#1003 := (not #556)
#1026 := (not #587)
#1028 := (or #702 #1026 #407 #1027 #1003)
#840 := (div f6 2::int)
#1006 := (* -1::int #840)
#1007 := (+ #685 #1006)
#1008 := (+ #562 #1007)
#1009 := (+ #446 #1008)
#987 := (* -1::int #412)
#1010 := (+ #987 #1009)
#1005 := (* -2::int #361)
#1011 := (+ #1005 #1010)
#1012 := (+ #45 #1011)
#1013 := (+ #42 #1012)
#1014 := (+ f6 #1013)
#1015 := (+ f5 #1014)
#1016 := (>= #1015 2::int)
#1002 := (not #1016)
#999 := [hypothesis]: #556
#982 := [hypothesis]: #444
#988 := [unit-resolution #889 #982]: #707
#1004 := (not #707)
#1017 := (or #1002 #1003 #1004)
#946 := (>= #561 0::int)
#984 := (or false #946)
#985 := [th-lemma]: #984
#986 := [unit-resolution #985 #69]: #946
#991 := [hypothesis]: #707
#797 := (* -2::int #840)
#837 := (+ #562 #797)
#921 := (+ f6 #837)
#963 := (<= #921 0::int)
#796 := (= #921 0::int)
#992 := (or false #796)
#993 := [th-lemma]: #992
#994 := [unit-resolution #993 #69]: #796
#995 := (not #796)
#996 := (or #995 #963)
#997 := [th-lemma]: #996
#998 := [unit-resolution #997 #994]: #963
#1000 := [hypothesis]: #1016
#1001 := [th-lemma #896 #870 #1000 #881 #999 #998 #991 #906 #986]: false
#1018 := [lemma #1001]: #1017
#989 := [unit-resolution #1018 #988 #999]: #1002
#990 := [unit-resolution #892 #982]: #709
#983 := [hypothesis]: #474
#1019 := (not #407)
#1020 := [hypothesis]: #1019
#964 := (>= #921 0::int)
#1021 := (or #995 #964)
#1022 := [th-lemma]: #1021
#1023 := [unit-resolution #1022 #994]: #964
#1024 := [hypothesis]: #587
#1025 := [th-lemma #899 #873 #884 #1024 #1023 #1020 #983 #990 #909 #989]: false
#1029 := [lemma #1025]: #1028
#1245 := [unit-resolution #1029 #1108 #1061]: #1244
#1246 := [unit-resolution #1245 #1243 #1240]: #407
#1248 := (not #405)
#1251 := (or #1248 #1019)
#52 := (= #51 1::int)
#256 := (not #52)
#48 := (f4 f5 2::int)
#50 := (= #48 1::int)
#962 := (mod f5 2::int)
#965 := (* -1::int #962)
#966 := (+ #48 #965)
#1105 := (<= #966 0::int)
#967 := (= #966 0::int)
#1074 := (mod #469 -2::int)
#1077 := (+ #48 #1074)
#1080 := (= #1077 0::int)
#1083 := (ite #646 #967 #1080)
#1042 := (= #48 0::int)
#1086 := (ite #676 #1042 #1083)
#1114 := (or #571 #1086)
#426 := (mod #469 #357)
#958 := (+ #48 #426)
#961 := (= #958 0::int)
#926 := (or #427 #697)
#945 := (not #926)
#465 := (or #688 #427)
#475 := (not #465)
#1040 := (or #475 #945)
#1041 := (ite #1040 #967 #961)
#1043 := (ite #676 #1042 #1041)
#1044 := (= f5 #48)
#1045 := (ite #768 #1044 #1043)
#1115 := (or #571 #1045)
#1117 := (iff #1115 #1114)
#1119 := (iff #1114 #1114)
#1120 := [rewrite]: #1119
#1094 := (iff #1045 #1086)
#1089 := (ite false #1044 #1086)
#1092 := (iff #1089 #1086)
#1093 := [rewrite]: #1092
#1090 := (iff #1045 #1089)
#1087 := (iff #1043 #1086)
#1084 := (iff #1041 #1083)
#1081 := (iff #961 #1080)
#1078 := (= #958 #1077)
#1075 := (= #426 #1074)
#1076 := [monotonicity #741]: #1075
#1079 := [monotonicity #1076]: #1078
#1082 := [monotonicity #1079]: #1081
#1072 := (iff #1040 #646)
#1070 := (iff #945 #656)
#1068 := (iff #926 #697)
#960 := (iff #926 #660)
#1067 := [monotonicity #408]: #960
#1069 := [trans #1067 #664]: #1068
#1071 := [monotonicity #1069]: #1070
#423 := (iff #475 #657)
#1048 := (iff #465 #688)
#1046 := (iff #465 #671)
#1047 := [monotonicity #408]: #1046
#1049 := [trans #1047 #674]: #1048
#959 := [monotonicity #1049]: #423
#1073 := [monotonicity #959 #1071]: #1072
#1085 := [monotonicity #1073 #1082]: #1084
#1088 := [monotonicity #1085]: #1087
#1091 := [monotonicity #759 #1088]: #1090
#1095 := [trans #1091 #1093]: #1094
#1118 := [monotonicity #1095]: #1117
#1121 := [trans #1118 #1120]: #1117
#1116 := [quant-inst]: #1115
#1122 := [mp #1116 #1121]: #1114
#1151 := [unit-resolution #1122 #783]: #1086
#1104 := (not #1086)
#1172 := (or #1104 #1083)
#1166 := (or #1104 #676 #1083)
#1167 := [def-axiom]: #1166
#1174 := [unit-resolution #1167 #1055]: #1172
#1175 := [unit-resolution #1174 #1151]: #1083
#1127 := (not #1083)
#1186 := (or #1127 #967)
#1128 := (or #1127 #622 #967)
#1129 := [def-axiom]: #1128
#1191 := [unit-resolution #1129 #1059]: #1186
#1192 := [unit-resolution #1191 #1175]: #967
#1096 := (not #967)
#1193 := (or #1096 #1105)
#1194 := [th-lemma]: #1193
#1195 := [unit-resolution #1194 #1192]: #1105
#1106 := (>= #966 0::int)
#1196 := (or #1096 #1106)
#1197 := [th-lemma]: #1196
#1198 := [unit-resolution #1197 #1192]: #1106
#1170 := (>= #48 1::int)
#1208 := (not #1170)
#1169 := (<= #48 1::int)
#1158 := (>= #962 2::int)
#1159 := (not #1158)
#1199 := (or false #1159)
#1200 := [th-lemma]: #1199
#1201 := [unit-resolution #1200 #69]: #1159
#1202 := (not #1105)
#1203 := (or #1169 #1158 #1202)
#1204 := [th-lemma]: #1203
#1205 := [unit-resolution #1204 #1195 #1201]: #1169
#1207 := (not #1169)
#1211 := (or #1207 #1208)
#255 := (not #50)
#1206 := [hypothesis]: #255
#1209 := (or #50 #1207 #1208)
#1210 := [th-lemma]: #1209
#1212 := [unit-resolution #1210 #1206]: #1211
#1213 := [unit-resolution #1212 #1205]: #1208
#1124 := (>= #48 0::int)
#1152 := (>= #962 0::int)
#1214 := (or false #1152)
#1215 := [th-lemma]: #1214
#1216 := [unit-resolution #1215 #69]: #1152
#1218 := (not #1106)
#1217 := (not #1152)
#1219 := (or #1124 #1217 #1218)
#1220 := [th-lemma]: #1219
#1221 := [unit-resolution #1220 #1198 #1216]: #1124
#1130 := (div f5 2::int)
#1143 := (* -2::int #1130)
#1144 := (+ #965 #1143)
#1145 := (+ f5 #1144)
#1150 := (<= #1145 0::int)
#1142 := (= #1145 0::int)
#1222 := (or false #1142)
#1223 := [th-lemma]: #1222
#1224 := [unit-resolution #1223 #69]: #1142
#1225 := (not #1142)
#1226 := (or #1225 #1150)
#1227 := [th-lemma]: #1226
#1228 := [unit-resolution #1227 #1224]: #1150
#1180 := (>= #1145 0::int)
#1229 := (or #1225 #1180)
#1230 := [th-lemma]: #1229
#1231 := [unit-resolution #1230 #1224]: #1180
#1232 := [th-lemma #1231 #1228 #1221 #1213 #1198 #1195 #884 #881 #873 #870 #1061 #1108]: false
#1233 := [lemma #1232]: #50
#257 := (or #255 #256)
#53 := (and #50 #52)
#54 := (not #53)
#266 := (iff #54 #257)
#258 := (not #257)
#261 := (not #258)
#264 := (iff #261 #257)
#265 := [rewrite]: #264
#262 := (iff #54 #261)
#259 := (iff #53 #258)
#260 := [rewrite]: #259
#263 := [monotonicity #260]: #262
#267 := [trans #263 #265]: #266
#188 := [asserted]: #54
#268 := [mp #188 #267]: #257
#1247 := [unit-resolution #268 #1233]: #256
#1249 := (or #52 #1248 #1019)
#1250 := [th-lemma]: #1249
#1252 := [unit-resolution #1250 #1247]: #1251
#1253 := [unit-resolution #1252 #1246 #1234]: false
#1254 := [lemma #1253]: #448
#1274 := [hypothesis]: #421
#1276 := (or #460 #751)
#1264 := [hypothesis]: #564
#1265 := [unit-resolution #1185 #1264]: #473
#1266 := [unit-resolution #1242 #1264]: #474
#1267 := [unit-resolution #1107 #1265 #1239]: #405
#1268 := [unit-resolution #1252 #1267]: #1019
#425 := (>= #51 0::int)
#1271 := (or #425 #1027)
#1187 := (not #946)
#1188 := [hypothesis]: #1187
#1189 := [unit-resolution #985 #69 #1188]: false
#1190 := [lemma #1189]: #946
#1269 := (or #425 #1187 #1027)
#1270 := [th-lemma]: #1269
#1272 := [unit-resolution #1270 #1190]: #1271
#1273 := [unit-resolution #1272 #1266]: #425
#1275 := [th-lemma #1254 #1274 #1061 #1108 #1273 #1268 #1266 #1265 #1023 #998 #884 #881 #873 #870]: false
#1277 := [lemma #1275]: #1276
#1259 := [unit-resolution #1277 #1274]: #460
#1260 := [unit-resolution #825 #1259]: #543
#1261 := [unit-resolution #914 #1260]: #567
#1262 := [unit-resolution #836 #1259]: #565
#1263 := (or #513 #751 #688)
#1278 := [th-lemma]: #1263
#1279 := [unit-resolution #1278 #1262 #1274]: #688
#1280 := [unit-resolution #973 #1055]: #646
#1281 := [unit-resolution #1280 #1279]: #656
#1282 := (or #697 #533 #757)
#1283 := [th-lemma]: #1282
#1284 := [unit-resolution #1283 #1281 #1261 #1254]: false
#1285 := [lemma #1284]: #751
#1286 := (or #605 #421)
#1287 := [th-lemma]: #1286
#1288 := [unit-resolution #1287 #1285]: #605
#1289 := [unit-resolution #1182 #1288]: #564
#1290 := [unit-resolution #1242 #1289]: #474
#1257 := (or #765 #444)
#981 := (or #466 #765)
#977 := [hypothesis]: #552
#978 := [unit-resolution #714 #977]: #421
#979 := [unit-resolution #550 #977]: #448
#980 := [unit-resolution #929 #979 #978 #916]: false
#1030 := [lemma #980]: #981
#1255 := [unit-resolution #1030 #916]: #466
#1256 := [unit-resolution #594 #1255 #920 #461]: false
#1258 := [lemma #1256]: #1257
#1291 := [unit-resolution #1258 #1288]: #444
#1292 := [unit-resolution #1245 #1291 #1290]: #407
#1293 := [unit-resolution #1185 #1289]: #473
#1294 := [unit-resolution #1107 #1293 #1239]: #405
[unit-resolution #1252 #1294 #1292]: false
unsat
659511229cba86eafd88b265af83c150a34ef866 24 0
#2 := false
#8 := (exists (vars (?v0 int)) false)
#9 := (not #8)
#10 := (not #9)
#42 := (iff #10 false)
#1 := true
#37 := (not true)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #10 #37)
#35 := (iff #9 true)
#30 := (not false)
#33 := (iff #30 true)
#34 := [rewrite]: #33
#31 := (iff #9 #30)
#28 := (iff #8 false)
#29 := [elim-unused]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#39 := [monotonicity #36]: #38
#43 := [trans #39 #41]: #42
#27 := [asserted]: #10
[mp #27 #43]: false
unsat
9315f166813c097237f939d5bfec03336d48d6a9 24 0
#2 := false
#8 := (exists (vars (?v0 real)) false)
#9 := (not #8)
#10 := (not #9)
#42 := (iff #10 false)
#1 := true
#37 := (not true)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #10 #37)
#35 := (iff #9 true)
#30 := (not false)
#33 := (iff #30 true)
#34 := [rewrite]: #33
#31 := (iff #9 #30)
#28 := (iff #8 false)
#29 := [elim-unused]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#39 := [monotonicity #36]: #38
#43 := [trans #39 #41]: #42
#27 := [asserted]: #10
[mp #27 #43]: false
unsat
c605fee711b129b0bde66fbd9b8f8cc9ce226e9a 1 0
unsat
e58017e3173d9778bc4b43bd6c7d6554fa96991e 1 0
unsat
0e0dcf19cd5b120a9f262cfa9c01b662a315ee94 1 0
unsat
2336c05cc0db64fbd723579d41aafc2ab55fbe93 67 0
#2 := false
#9 := 0::int
#12 := 1::int
#142 := (= 1::int 0::int)
#144 := (iff #142 false)
#145 := [rewrite]: #144
decl ?v0!1 :: int
#54 := ?v0!1
#47 := (= ?v0!1 0::int)
decl ?v1!0 :: int
#53 := ?v1!0
#50 := (= ?v1!0 1::int)
#57 := (and #47 #50)
#68 := (= ?v1!0 ?v0!1)
#71 := (not #68)
#58 := (not #57)
#74 := (or #58 #71)
#77 := (not #74)
#55 := (= ?v0!1 ?v1!0)
#56 := (not #55)
#59 := (or #58 #56)
#60 := (not #59)
#78 := (iff #60 #77)
#75 := (iff #59 #74)
#72 := (iff #56 #71)
#69 := (iff #55 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#11 := (:var 0 int)
#8 := (:var 1 int)
#15 := (= #8 #11)
#16 := (not #15)
#13 := (= #11 1::int)
#10 := (= #8 0::int)
#14 := (and #10 #13)
#37 := (not #14)
#38 := (or #37 #16)
#41 := (forall (vars (?v0 int) (?v1 int)) #38)
#44 := (not #41)
#61 := (~ #44 #60)
#62 := [sk]: #61
#17 := (implies #14 #16)
#18 := (forall (vars (?v0 int) (?v1 int)) #17)
#19 := (not #18)
#45 := (iff #19 #44)
#42 := (iff #18 #41)
#39 := (iff #17 #38)
#40 := [rewrite]: #39
#43 := [quant-intro #40]: #42
#46 := [monotonicity #43]: #45
#36 := [asserted]: #19
#49 := [mp #36 #46]: #44
#65 := [mp~ #49 #62]: #60
#66 := [mp #65 #79]: #77
#67 := [not-or-elim #66]: #57
#80 := [and-elim #67]: #47
#140 := (= 1::int ?v0!1)
#82 := [not-or-elim #66]: #68
#138 := (= 1::int ?v1!0)
#81 := [and-elim #67]: #50
#139 := [symm #81]: #138
#141 := [trans #139 #82]: #140
#143 := [trans #141 #80]: #142
[mp #143 #145]: false
unsat
5efd84778495b1b150aa0b9f4a0b4263b1687cbc 82 0
#2 := false
#9 := (:var 0 int)
#11 := 0::int
#13 := (<= 0::int #9)
#12 := (< #9 0::int)
#14 := (or #12 #13)
#8 := (:var 1 int)
#10 := (< #8 #9)
#15 := (implies #10 #14)
#16 := (forall (vars (?v1 int)) #15)
#17 := (exists (vars (?v0 int)) #16)
#18 := (not #17)
#100 := (iff #18 false)
#36 := (not #10)
#37 := (or #36 #14)
#40 := (forall (vars (?v1 int)) #37)
#43 := (exists (vars (?v0 int)) #40)
#46 := (not #43)
#98 := (iff #46 false)
#1 := true
#93 := (not true)
#96 := (iff #93 false)
#97 := [rewrite]: #96
#94 := (iff #46 #93)
#91 := (iff #43 true)
#86 := (exists (vars (?v0 int)) true)
#89 := (iff #86 true)
#90 := [elim-unused]: #89
#87 := (iff #43 #86)
#84 := (iff #40 true)
#79 := (forall (vars (?v1 int)) true)
#82 := (iff #79 true)
#83 := [elim-unused]: #82
#80 := (iff #40 #79)
#77 := (iff #37 true)
#51 := (>= #9 0::int)
#49 := (not #51)
#69 := (or #49 #51)
#55 := -1::int
#58 := (* -1::int #9)
#59 := (+ #8 #58)
#57 := (>= #59 0::int)
#72 := (or #57 #69)
#75 := (iff #72 true)
#76 := [rewrite]: #75
#73 := (iff #37 #72)
#70 := (iff #14 #69)
#53 := (iff #13 #51)
#54 := [rewrite]: #53
#50 := (iff #12 #49)
#52 := [rewrite]: #50
#71 := [monotonicity #52 #54]: #70
#67 := (iff #36 #57)
#56 := (not #57)
#62 := (not #56)
#65 := (iff #62 #57)
#66 := [rewrite]: #65
#63 := (iff #36 #62)
#60 := (iff #10 #56)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#74 := [monotonicity #68 #71]: #73
#78 := [trans #74 #76]: #77
#81 := [quant-intro #78]: #80
#85 := [trans #81 #83]: #84
#88 := [quant-intro #85]: #87
#92 := [trans #88 #90]: #91
#95 := [monotonicity #92]: #94
#99 := [trans #95 #97]: #98
#47 := (iff #18 #46)
#44 := (iff #17 #43)
#41 := (iff #16 #40)
#38 := (iff #15 #37)
#39 := [rewrite]: #38
#42 := [quant-intro #39]: #41
#45 := [quant-intro #42]: #44
#48 := [monotonicity #45]: #47
#101 := [trans #48 #99]: #100
#35 := [asserted]: #18
[mp #35 #101]: false
unsat
7f5cf2a606c1f6fc9684f5e78e16538004b7482b 78 0
#2 := false
#9 := (:var 0 int)
#11 := 2::int
#15 := (* 2::int #9)
#13 := 1::int
#8 := (:var 1 int)
#12 := (* 2::int #8)
#14 := (+ #12 1::int)
#16 := (< #14 #15)
#10 := (< #8 #9)
#17 := (implies #10 #16)
#18 := (forall (vars (?v0 int) (?v1 int)) #17)
#19 := (not #18)
#96 := (iff #19 false)
#37 := (+ 1::int #12)
#40 := (< #37 #15)
#46 := (not #10)
#47 := (or #46 #40)
#52 := (forall (vars (?v0 int) (?v1 int)) #47)
#55 := (not #52)
#94 := (iff #55 false)
#1 := true
#89 := (not true)
#92 := (iff #89 false)
#93 := [rewrite]: #92
#90 := (iff #55 #89)
#87 := (iff #52 true)
#82 := (forall (vars (?v0 int) (?v1 int)) true)
#85 := (iff #82 true)
#86 := [elim-unused]: #85
#83 := (iff #52 #82)
#80 := (iff #47 true)
#60 := 0::int
#58 := -1::int
#62 := (* -1::int #9)
#63 := (+ #8 #62)
#61 := (>= #63 0::int)
#59 := (not #61)
#74 := (or #61 #59)
#78 := (iff #74 true)
#79 := [rewrite]: #78
#76 := (iff #47 #74)
#75 := (iff #40 #59)
#73 := [rewrite]: #75
#71 := (iff #46 #61)
#66 := (not #59)
#69 := (iff #66 #61)
#70 := [rewrite]: #69
#67 := (iff #46 #66)
#64 := (iff #10 #59)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#77 := [monotonicity #72 #73]: #76
#81 := [trans #77 #79]: #80
#84 := [quant-intro #81]: #83
#88 := [trans #84 #86]: #87
#91 := [monotonicity #88]: #90
#95 := [trans #91 #93]: #94
#56 := (iff #19 #55)
#53 := (iff #18 #52)
#50 := (iff #17 #47)
#43 := (implies #10 #40)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #17 #43)
#41 := (iff #16 #40)
#38 := (= #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [quant-intro #51]: #53
#57 := [monotonicity #54]: #56
#97 := [trans #57 #95]: #96
#36 := [asserted]: #19
[mp #36 #97]: false
unsat
2a13654aa992c8bed90af2572886d27708a51b8d 61 0
#2 := false
#13 := (:var 0 int)
#8 := 2::int
#14 := (* 2::int #13)
#11 := 1::int
#9 := (:var 1 int)
#10 := (* 2::int #9)
#12 := (+ #10 1::int)
#15 := (= #12 #14)
#16 := (not #15)
#17 := (forall (vars (?v0 int) (?v1 int)) #16)
#18 := (not #17)
#79 := (iff #18 false)
#36 := (+ 1::int #10)
#42 := (= #14 #36)
#47 := (not #42)
#50 := (forall (vars (?v0 int) (?v1 int)) #47)
#53 := (not #50)
#77 := (iff #53 false)
#1 := true
#72 := (not true)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #53 #72)
#70 := (iff #50 true)
#65 := (forall (vars (?v0 int) (?v1 int)) true)
#68 := (iff #65 true)
#69 := [elim-unused]: #68
#66 := (iff #50 #65)
#63 := (iff #47 true)
#56 := (not false)
#61 := (iff #56 true)
#62 := [rewrite]: #61
#57 := (iff #47 #56)
#58 := (iff #42 false)
#59 := [rewrite]: #58
#60 := [monotonicity #59]: #57
#64 := [trans #60 #62]: #63
#67 := [quant-intro #64]: #66
#71 := [trans #67 #69]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#54 := (iff #18 #53)
#51 := (iff #17 #50)
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#39 := (= #36 #14)
#43 := (iff #39 #42)
#44 := [rewrite]: #43
#40 := (iff #15 #39)
#37 := (= #12 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#49 := [monotonicity #46]: #48
#52 := [quant-intro #49]: #51
#55 := [monotonicity #52]: #54
#80 := [trans #55 #78]: #79
#35 := [asserted]: #18
[mp #35 #80]: false
unsat
00a64958e6476c1107006d163ef1b97bd464c3ab 111 0
#2 := false
#8 := 2::int
decl ?v0!1 :: int
#92 := ?v0!1
decl ?v1!0 :: int
#91 := ?v1!0
#106 := (+ ?v1!0 ?v0!1)
#112 := (>= #106 2::int)
#118 := (<= #106 2::int)
#121 := (not #118)
#115 := (not #112)
#109 := (= #106 2::int)
#124 := (or #109 #115 #121)
#127 := (not #124)
#93 := (+ ?v0!1 ?v1!0)
#94 := (<= #93 2::int)
#88 := (not #94)
#86 := (>= #93 2::int)
#95 := (not #86)
#96 := (= #93 2::int)
#97 := (or #96 #95 #88)
#98 := (not #97)
#128 := (iff #98 #127)
#125 := (iff #97 #124)
#122 := (iff #88 #121)
#119 := (iff #94 #118)
#107 := (= #93 #106)
#108 := [rewrite]: #107
#120 := [monotonicity #108]: #119
#123 := [monotonicity #120]: #122
#116 := (iff #95 #115)
#113 := (iff #86 #112)
#114 := [monotonicity #108]: #113
#117 := [monotonicity #114]: #116
#110 := (iff #96 #109)
#111 := [monotonicity #108]: #110
#126 := [monotonicity #111 #117 #123]: #125
#129 := [monotonicity #126]: #128
#10 := (:var 0 int)
#9 := (:var 1 int)
#11 := (+ #9 #10)
#61 := (<= #11 2::int)
#63 := (not #61)
#59 := (>= #11 2::int)
#56 := (not #59)
#13 := (= #11 2::int)
#72 := (or #13 #56 #63)
#77 := (forall (vars (?v0 int) (?v1 int)) #72)
#80 := (not #77)
#99 := (~ #80 #98)
#100 := [sk]: #99
#14 := (< #11 2::int)
#15 := (or #13 #14)
#12 := (< 2::int #11)
#16 := (or #12 #15)
#17 := (forall (vars (?v0 int) (?v1 int)) #16)
#18 := (not #17)
#83 := (iff #18 #80)
#36 := (= 2::int #11)
#42 := (or #14 #36)
#47 := (or #12 #42)
#50 := (forall (vars (?v0 int) (?v1 int)) #47)
#53 := (not #50)
#81 := (iff #53 #80)
#78 := (iff #50 #77)
#75 := (iff #47 #72)
#66 := (or #56 #13)
#69 := (or #63 #66)
#73 := (iff #69 #72)
#74 := [rewrite]: #73
#70 := (iff #47 #69)
#67 := (iff #42 #66)
#60 := (iff #36 #13)
#62 := [rewrite]: #60
#58 := (iff #14 #56)
#57 := [rewrite]: #58
#68 := [monotonicity #57 #62]: #67
#64 := (iff #12 #63)
#65 := [rewrite]: #64
#71 := [monotonicity #65 #68]: #70
#76 := [trans #71 #74]: #75
#79 := [quant-intro #76]: #78
#82 := [monotonicity #79]: #81
#54 := (iff #18 #53)
#51 := (iff #17 #50)
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#39 := (or #36 #14)
#43 := (iff #39 #42)
#44 := [rewrite]: #43
#40 := (iff #15 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#49 := [monotonicity #46]: #48
#52 := [quant-intro #49]: #51
#55 := [monotonicity #52]: #54
#84 := [trans #55 #82]: #83
#35 := [asserted]: #18
#85 := [mp #35 #84]: #80
#103 := [mp~ #85 #100]: #98
#104 := [mp #103 #129]: #127
#131 := [not-or-elim #104]: #112
#105 := (not #109)
#130 := [not-or-elim #104]: #105
#132 := [not-or-elim #104]: #118
#188 := (or #109 #121 #115)
#189 := [th-lemma]: #188
[unit-resolution #189 #132 #130 #131]: false
unsat
3f82af9f48300cb861109298f1c808dfeedc27df 89 0
#2 := false
#8 := 0::int
decl ?v0!0 :: int
#85 := ?v0!0
#80 := (<= ?v0!0 0::int)
#151 := (not #80)
#160 := [hypothesis]: #151
#54 := -1::int
#86 := (<= ?v0!0 -1::int)
#87 := (not #86)
#161 := (or #87 #80)
#162 := [th-lemma]: #161
#163 := [unit-resolution #162 #160]: #87
#164 := (or #80 #86)
#11 := 1::int
#88 := (>= ?v0!0 1::int)
#82 := (not #88)
#89 := (ite #80 #82 #87)
#90 := (not #89)
#9 := (:var 0 int)
#55 := (<= #9 -1::int)
#56 := (not #55)
#60 := (>= #9 1::int)
#59 := (not #60)
#50 := (<= #9 0::int)
#66 := (ite #50 #59 #56)
#71 := (forall (vars (?v0 int)) #66)
#74 := (not #71)
#91 := (~ #74 #90)
#92 := [sk]: #91
#14 := (< #9 1::int)
#12 := (+ #9 1::int)
#13 := (< 0::int #12)
#10 := (< 0::int #9)
#15 := (ite #10 #13 #14)
#16 := (forall (vars (?v0 int)) #15)
#17 := (not #16)
#77 := (iff #17 #74)
#35 := (+ 1::int #9)
#38 := (< 0::int #35)
#41 := (ite #10 #38 #14)
#44 := (forall (vars (?v0 int)) #41)
#47 := (not #44)
#75 := (iff #47 #74)
#72 := (iff #44 #71)
#69 := (iff #41 #66)
#51 := (not #50)
#63 := (ite #51 #56 #59)
#67 := (iff #63 #66)
#68 := [rewrite]: #67
#64 := (iff #41 #63)
#61 := (iff #14 #59)
#62 := [rewrite]: #61
#57 := (iff #38 #56)
#58 := [rewrite]: #57
#52 := (iff #10 #51)
#53 := [rewrite]: #52
#65 := [monotonicity #53 #58 #62]: #64
#70 := [trans #65 #68]: #69
#73 := [quant-intro #70]: #72
#76 := [monotonicity #73]: #75
#48 := (iff #17 #47)
#45 := (iff #16 #44)
#42 := (iff #15 #41)
#39 := (iff #13 #38)
#36 := (= #12 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#46 := [quant-intro #43]: #45
#49 := [monotonicity #46]: #48
#78 := [trans #49 #76]: #77
#34 := [asserted]: #17
#79 := [mp #34 #78]: #74
#95 := [mp~ #79 #92]: #90
#158 := (or #89 #80 #86)
#159 := [def-axiom]: #158
#165 := [unit-resolution #159 #95]: #164
#166 := [unit-resolution #165 #163 #160]: false
#167 := [lemma #166]: #80
#168 := (or #82 #151)
#169 := [th-lemma]: #168
#170 := [unit-resolution #169 #167]: #82
#171 := (or #151 #88)
#156 := (or #89 #151 #88)
#157 := [def-axiom]: #156
#172 := [unit-resolution #157 #95]: #171
[unit-resolution #172 #170 #167]: false
unsat
acea26b9fcd9353bdce76a59fb81f2d230c19002 83 2
#2 := false
#9 := 0::int
#8 := (:var 0 int)
#47 := (<= #8 0::int)
#48 := (not #47)
#45 := (>= #8 0::int)
#43 := (not #45)
#51 := (or #43 #48)
#54 := (forall (vars (?v0 int)) #51)
#187 := (not #54)
#123 := (<= 0::int 0::int)
#209 := (not #123)
#124 := (>= 0::int 0::int)
#210 := (not #124)
#211 := (or #210 #209)
#192 := (or #187 #211)
#177 := (iff #192 #187)
#188 := (or #187 false)
#514 := (iff #188 #187)
#176 := [rewrite]: #514
#530 := (iff #192 #188)
#538 := (iff #211 false)
#534 := (or false false)
#537 := (iff #534 false)
#532 := [rewrite]: #537
#535 := (iff #211 #534)
#200 := (iff #209 false)
#1 := true
#214 := (not true)
#212 := (iff #214 false)
#216 := [rewrite]: #212
#320 := (iff #209 #214)
#533 := (iff #123 true)
#189 := [rewrite]: #533
#527 := [monotonicity #189]: #320
#201 := [trans #527 #216]: #200
#195 := (iff #210 false)
#142 := (iff #210 #214)
#202 := (iff #124 true)
#213 := [rewrite]: #202
#215 := [monotonicity #213]: #142
#531 := [trans #215 #216]: #195
#536 := [monotonicity #531 #201]: #535
#528 := [trans #536 #532]: #538
#172 := [monotonicity #528]: #530
#178 := [trans #172 #176]: #177
#529 := [quant-inst]: #192
#179 := [mp #529 #178]: #187
#67 := (~ #54 #54)
#65 := (~ #51 #51)
#66 := [refl]: #65
#68 := [nnf-pos #66]: #67
#11 := (< 0::int #8)
#10 := (< #8 0::int)
#12 := (or #10 #11)
#13 := (forall (vars (?v0 int)) #12)
#14 := (ite #13 false true)
#15 := (not #14)
#57 := (iff #15 #54)
#55 := (iff #13 #54)
#52 := (iff #12 #51)
#49 := (iff #11 #48)
#50 := [rewrite]: #49
#44 := (iff #10 #43)
#46 := [rewrite]: #44
#53 := [monotonicity #46 #50]: #52
#56 := [quant-intro #53]: #55
#41 := (iff #15 #13)
#33 := (not #13)
#36 := (not #33)
#39 := (iff #36 #13)
#40 := [rewrite]: #39
#37 := (iff #15 #36)
#34 := (iff #14 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#58 := [trans #42 #56]: #57
#32 := [asserted]: #15
#59 := [mp #32 #58]: #54
#62 := [mp~ #59 #68]: #54
[unit-resolution #62 #179]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!9)

baa910cd7ead809257c9ce1201462fe467c60aef 180 2
#2 := false
#16 := 3::int
#37 := -1::int
decl z3name!0 :: bool
#90 := z3name!0
#97 := (ite z3name!0 -1::int 3::int)
#613 := (>= #97 3::int)
#315 := (not #613)
#8 := 0::int
#100 := (<= #97 0::int)
#9 := (:var 0 int)
#53 := (<= #9 0::int)
#54 := (not #53)
#50 := (>= #9 0::int)
#49 := (not #50)
#57 := (or #49 #54)
#60 := (forall (vars (?v0 int)) #57)
#63 := (ite #60 -1::int 3::int)
#69 := (<= #63 0::int)
#101 := (~ #69 #100)
#98 := (= #63 #97)
#95 := (~ #60 z3name!0)
#93 := (not #60)
#87 := (or z3name!0 #93)
#91 := (not z3name!0)
#92 := (or #91 #60)
#85 := (and #92 #87)
#94 := [intro-def]: #85
#96 := [apply-def #94]: #95
#99 := [monotonicity #96]: #98
#102 := [monotonicity #99]: #101
#14 := 1::int
#15 := (- 1::int)
#11 := (< 0::int #9)
#10 := (< #9 0::int)
#12 := (or #10 #11)
#13 := (forall (vars (?v0 int)) #12)
#17 := (ite #13 #15 3::int)
#18 := (< 0::int #17)
#19 := (not #18)
#82 := (iff #19 #69)
#40 := (ite #13 -1::int 3::int)
#43 := (< 0::int #40)
#46 := (not #43)
#80 := (iff #46 #69)
#70 := (not #69)
#75 := (not #70)
#78 := (iff #75 #69)
#79 := [rewrite]: #78
#76 := (iff #46 #75)
#73 := (iff #43 #70)
#66 := (< 0::int #63)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #43 #66)
#64 := (= #40 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #57)
#55 := (iff #11 #54)
#56 := [rewrite]: #55
#51 := (iff #10 #49)
#52 := [rewrite]: #51
#59 := [monotonicity #52 #56]: #58
#62 := [quant-intro #59]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#74 := [trans #68 #72]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#47 := (iff #19 #46)
#44 := (iff #18 #43)
#41 := (= #17 #40)
#38 := (= #15 -1::int)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#83 := [trans #48 #81]: #82
#36 := [asserted]: #19
#84 := [mp #36 #83]: #69
#131 := [mp~ #84 #102]: #100
#316 := (not #100)
#317 := (or #315 #316)
#318 := [th-lemma]: #317
#212 := [unit-resolution #318 #131]: #315
#295 := (= #97 3::int)
#270 := (<= 0::int 0::int)
#400 := (not #270)
#607 := (>= 0::int 0::int)
#281 := (not #607)
#282 := (or #281 #400)
#600 := (or #93 #282)
#245 := (iff #600 #93)
#601 := (or #93 false)
#604 := (iff #601 #93)
#244 := [rewrite]: #604
#239 := (iff #600 #601)
#598 := (iff #282 false)
#258 := (or false false)
#596 := (iff #258 false)
#597 := [rewrite]: #596
#259 := (iff #282 #258)
#594 := (iff #400 false)
#1 := true
#616 := (not true)
#618 := (iff #616 false)
#608 := [rewrite]: #618
#610 := (iff #400 #616)
#609 := (iff #270 true)
#269 := [rewrite]: #609
#253 := [monotonicity #269]: #610
#257 := [trans #253 #608]: #594
#268 := (iff #281 false)
#617 := (iff #281 #616)
#614 := (iff #607 true)
#615 := [rewrite]: #614
#612 := [monotonicity #615]: #617
#273 := [trans #612 #608]: #268
#260 := [monotonicity #273 #257]: #259
#599 := [trans #260 #597]: #598
#602 := [monotonicity #599]: #239
#605 := [trans #602 #244]: #245
#595 := [quant-inst]: #600
#603 := [mp #595 #605]: #93
#606 := [hypothesis]: #60
#592 := [unit-resolution #606 #603]: false
#593 := [lemma #592]: #93
#134 := (or #60 #91)
decl ?v0!1 :: int
#113 := ?v0!1
#116 := (>= ?v0!1 0::int)
#117 := (not #116)
#114 := (<= ?v0!1 0::int)
#115 := (not #114)
#137 := (or #115 #117)
#140 := (not #137)
#143 := (or z3name!0 #140)
#146 := (and #134 #143)
#118 := (or #117 #115)
#119 := (not #118)
#124 := (or z3name!0 #119)
#127 := (and #92 #124)
#147 := (iff #127 #146)
#144 := (iff #124 #143)
#141 := (iff #119 #140)
#138 := (iff #118 #137)
#139 := [rewrite]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#135 := (iff #92 #134)
#136 := [rewrite]: #135
#148 := [monotonicity #136 #145]: #147
#128 := (~ #85 #127)
#125 := (~ #87 #124)
#120 := (~ #93 #119)
#121 := [sk]: #120
#111 := (~ z3name!0 z3name!0)
#112 := [refl]: #111
#126 := [monotonicity #112 #121]: #125
#109 := (~ #92 #92)
#107 := (~ #60 #60)
#105 := (~ #57 #57)
#106 := [refl]: #105
#108 := [nnf-pos #106]: #107
#103 := (~ #91 #91)
#104 := [refl]: #103
#110 := [monotonicity #104 #108]: #109
#129 := [monotonicity #110 #126]: #128
#130 := [mp~ #94 #129]: #127
#132 := [mp #130 #148]: #146
#133 := [and-elim #132]: #134
#588 := [unit-resolution #133 #593]: #91
#297 := (or z3name!0 #295)
#276 := [def-axiom]: #297
#589 := [unit-resolution #276 #588]: #295
#311 := (not #295)
#312 := (or #311 #613)
#586 := [th-lemma]: #312
[unit-resolution #586 #589 #212]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!9)

7a877ca9edb4f2c73b1ef0625cc9c1f31c342b91 68 0
#2 := false
#16 := 1::int
#13 := (:var 1 int)
#11 := 6::int
#12 := (- 6::int)
#14 := (* #12 #13)
#9 := (:var 2 int)
#8 := 4::int
#10 := (* 4::int #9)
#15 := (+ #10 #14)
#17 := (= #15 1::int)
#18 := (exists (vars (?v0 int) (?v1 int) (?v2 int)) #17)
#19 := (not #18)
#20 := (not #19)
#87 := (iff #20 false)
#58 := (:var 0 int)
#38 := -6::int
#59 := (* -6::int #58)
#60 := (* 4::int #13)
#61 := (+ #60 #59)
#62 := (= 1::int #61)
#63 := (exists (vars (?v0 int) (?v1 int)) #62)
#85 := (iff #63 false)
#81 := (exists (vars (?v0 int) (?v1 int)) false)
#83 := (iff #81 false)
#84 := [elim-unused]: #83
#82 := (iff #63 #81)
#78 := (iff #62 false)
#79 := [rewrite]: #78
#80 := [quant-intro #79]: #82
#86 := [trans #80 #84]: #85
#76 := (iff #20 #63)
#68 := (not #63)
#71 := (not #68)
#74 := (iff #71 #63)
#75 := [rewrite]: #74
#72 := (iff #20 #71)
#69 := (iff #19 #68)
#66 := (iff #18 #63)
#41 := (* -6::int #13)
#44 := (+ #10 #41)
#50 := (= 1::int #44)
#55 := (exists (vars (?v0 int) (?v1 int) (?v2 int)) #50)
#64 := (iff #55 #63)
#65 := [elim-unused]: #64
#56 := (iff #18 #55)
#53 := (iff #17 #50)
#47 := (= #44 1::int)
#51 := (iff #47 #50)
#52 := [rewrite]: #51
#48 := (iff #17 #47)
#45 := (= #15 #44)
#42 := (= #14 #41)
#39 := (= #12 -6::int)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#54 := [trans #49 #52]: #53
#57 := [quant-intro #54]: #56
#67 := [trans #57 #65]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#88 := [trans #77 #86]: #87
#37 := [asserted]: #20
[mp #37 #88]: false
unsat
c8d9f4511ee6959de9f02b091245c0b85d6b9a13 107 0
#2 := false
#8 := 0::int
decl ?v1!1 :: int
#90 := ?v1!1
decl ?v2!0 :: int
#89 := ?v2!0
#113 := (+ ?v2!0 ?v1!1)
#116 := (<= #113 0::int)
#119 := (not #116)
#94 := (<= ?v1!1 0::int)
#95 := (not #94)
#84 := (<= ?v2!0 0::int)
#93 := (not #84)
#107 := (and #93 #95)
#110 := (not #107)
#122 := (or #110 #119)
#125 := (not #122)
#91 := (+ ?v1!1 ?v2!0)
#92 := (<= #91 0::int)
#86 := (not #92)
#96 := (and #95 #93)
#97 := (not #96)
#98 := (or #97 #86)
#99 := (not #98)
#126 := (iff #99 #125)
#123 := (iff #98 #122)
#120 := (iff #86 #119)
#117 := (iff #92 #116)
#114 := (= #91 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#121 := [monotonicity #118]: #120
#111 := (iff #97 #110)
#108 := (iff #96 #107)
#109 := [rewrite]: #108
#112 := [monotonicity #109]: #111
#124 := [monotonicity #112 #121]: #123
#127 := [monotonicity #124]: #126
#11 := (:var 0 int)
#9 := (:var 1 int)
#14 := (+ #9 #11)
#68 := (<= #14 0::int)
#69 := (not #68)
#58 := (<= #11 0::int)
#59 := (not #58)
#54 := (<= #9 0::int)
#55 := (not #54)
#62 := (and #55 #59)
#65 := (not #62)
#72 := (or #65 #69)
#75 := (forall (vars (?v1 int) (?v2 int)) #72)
#78 := (not #75)
#100 := (~ #78 #99)
#101 := [sk]: #100
#15 := (< 0::int #14)
#12 := (< 0::int #11)
#10 := (< 0::int #9)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (forall (vars (?v1 int) (?v2 int)) #16)
#18 := (exists (vars (?v0 int)) #17)
#19 := (not #18)
#81 := (iff #19 #78)
#37 := (not #13)
#38 := (or #37 #15)
#41 := (forall (vars (?v1 int) (?v2 int)) #38)
#51 := (not #41)
#79 := (iff #51 #78)
#76 := (iff #41 #75)
#73 := (iff #38 #72)
#70 := (iff #15 #69)
#71 := [rewrite]: #70
#66 := (iff #37 #65)
#63 := (iff #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#64 := [monotonicity #57 #61]: #63
#67 := [monotonicity #64]: #66
#74 := [monotonicity #67 #71]: #73
#77 := [quant-intro #74]: #76
#80 := [monotonicity #77]: #79
#52 := (iff #19 #51)
#49 := (iff #18 #41)
#44 := (exists (vars (?v0 int)) #41)
#47 := (iff #44 #41)
#48 := [elim-unused]: #47
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#39 := (iff #16 #38)
#40 := [rewrite]: #39
#43 := [quant-intro #40]: #42
#46 := [quant-intro #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#36 := [asserted]: #19
#83 := [mp #36 #82]: #78
#104 := [mp~ #83 #101]: #99
#105 := [mp #104 #127]: #125
#130 := [not-or-elim #105]: #116
#106 := [not-or-elim #105]: #107
#129 := [and-elim #106]: #95
#128 := [and-elim #106]: #93
[th-lemma #128 #129 #130]: false
unsat
64c53f605d405ecd0170c0241c2194ef25f17257 117 0
#2 := false
#8 := 0::int
decl ?v1!1 :: int
#100 := ?v1!1
#103 := (<= ?v1!1 0::int)
#104 := (not #103)
#11 := 0::real
decl ?v2!0 :: real
#99 := ?v2!0
#101 := (<= ?v2!0 0::real)
#102 := (not #101)
#116 := (and #102 #104)
#119 := (not #116)
#38 := -1::int
#98 := (<= ?v1!1 -1::int)
#96 := (not #98)
#125 := (or #96 #119)
#130 := (not #125)
#105 := (and #104 #102)
#106 := (not #105)
#107 := (or #106 #96)
#108 := (not #107)
#131 := (iff #108 #130)
#128 := (iff #107 #125)
#122 := (or #119 #96)
#126 := (iff #122 #125)
#127 := [rewrite]: #126
#123 := (iff #107 #122)
#120 := (iff #106 #119)
#117 := (iff #105 #116)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#124 := [monotonicity #121]: #123
#129 := [trans #124 #127]: #128
#132 := [monotonicity #129]: #131
#9 := (:var 1 int)
#80 := (<= #9 -1::int)
#81 := (not #80)
#12 := (:var 0 real)
#70 := (<= #12 0::real)
#71 := (not #70)
#66 := (<= #9 0::int)
#67 := (not #66)
#74 := (and #67 #71)
#77 := (not #74)
#84 := (or #77 #81)
#87 := (forall (vars (?v1 int) (?v2 real)) #84)
#90 := (not #87)
#109 := (~ #90 #108)
#110 := [sk]: #109
#15 := 1::int
#16 := (- 1::int)
#17 := (< #16 #9)
#13 := (< 0::real #12)
#10 := (< 0::int #9)
#14 := (and #10 #13)
#18 := (implies #14 #17)
#19 := (forall (vars (?v1 int) (?v2 real)) #18)
#20 := (exists (vars (?v0 int)) #19)
#21 := (not #20)
#93 := (iff #21 #90)
#41 := (< -1::int #9)
#47 := (not #14)
#48 := (or #47 #41)
#53 := (forall (vars (?v1 int) (?v2 real)) #48)
#63 := (not #53)
#91 := (iff #63 #90)
#88 := (iff #53 #87)
#85 := (iff #48 #84)
#82 := (iff #41 #81)
#83 := [rewrite]: #82
#78 := (iff #47 #77)
#75 := (iff #14 #74)
#72 := (iff #13 #71)
#73 := [rewrite]: #72
#68 := (iff #10 #67)
#69 := [rewrite]: #68
#76 := [monotonicity #69 #73]: #75
#79 := [monotonicity #76]: #78
#86 := [monotonicity #79 #83]: #85
#89 := [quant-intro #86]: #88
#92 := [monotonicity #89]: #91
#64 := (iff #21 #63)
#61 := (iff #20 #53)
#56 := (exists (vars (?v0 int)) #53)
#59 := (iff #56 #53)
#60 := [elim-unused]: #59
#57 := (iff #20 #56)
#54 := (iff #19 #53)
#51 := (iff #18 #48)
#44 := (implies #14 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#39 := (= #16 -1::int)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [quant-intro #52]: #54
#58 := [quant-intro #55]: #57
#62 := [trans #58 #60]: #61
#65 := [monotonicity #62]: #64
#94 := [trans #65 #92]: #93
#37 := [asserted]: #21
#95 := [mp #37 #94]: #90
#113 := [mp~ #95 #110]: #108
#114 := [mp #113 #132]: #130
#133 := [not-or-elim #114]: #116
#135 := [and-elim #133]: #104
#115 := [not-or-elim #114]: #98
#191 := (or #96 #103)
#192 := [th-lemma]: #191
#193 := [unit-resolution #192 #115]: #103
[unit-resolution #193 #135]: false
unsat
7bc9510644b978b75cac18b8fb186f89e0d2c0fd 148 0
#2 := false
#149 := (not false)
#11 := 0::int
#9 := (:var 0 int)
#57 := (<= #9 0::int)
#58 := (not #57)
#152 := (or #58 #149)
#155 := (not #152)
#158 := (forall (vars (?v0 int)) #155)
#185 := (iff #158 false)
#180 := (forall (vars (?v0 int)) false)
#183 := (iff #180 false)
#184 := [elim-unused]: #183
#181 := (iff #158 #180)
#178 := (iff #155 false)
#1 := true
#173 := (not true)
#176 := (iff #173 false)
#177 := [rewrite]: #176
#174 := (iff #155 #173)
#171 := (iff #152 true)
#166 := (or #58 true)
#169 := (iff #166 true)
#170 := [rewrite]: #169
#167 := (iff #152 #166)
#164 := (iff #149 true)
#165 := [rewrite]: #164
#168 := [monotonicity #165]: #167
#172 := [trans #168 #170]: #171
#175 := [monotonicity #172]: #174
#179 := [trans #175 #177]: #178
#182 := [quant-intro #179]: #181
#186 := [trans #182 #184]: #185
#61 := -1::int
#62 := (* -1::int #9)
#8 := (:var 1 int)
#63 := (+ #8 #62)
#64 := (<= #63 0::int)
#67 := (not #64)
#73 := (or #58 #67)
#78 := (forall (vars (?v1 int)) #73)
#81 := (not #78)
#84 := (or #58 #81)
#110 := (not #84)
#128 := (forall (vars (?v0 int)) #110)
#161 := (iff #128 #158)
#132 := (forall (vars (?v1 int)) #58)
#135 := (not #132)
#138 := (or #58 #135)
#141 := (not #138)
#144 := (forall (vars (?v0 int)) #141)
#159 := (iff #144 #158)
#160 := [rewrite]: #159
#145 := (iff #128 #144)
#146 := [rewrite]: #145
#162 := [trans #146 #160]: #161
#121 := (and #57 #78)
#124 := (forall (vars (?v0 int)) #121)
#129 := (iff #124 #128)
#118 := (iff #121 #110)
#127 := [rewrite]: #118
#130 := [quant-intro #127]: #129
#101 := (not #58)
#109 := (and #101 #78)
#113 := (forall (vars (?v0 int)) #109)
#125 := (iff #113 #124)
#122 := (iff #109 #121)
#119 := (iff #101 #57)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#126 := [quant-intro #123]: #125
#87 := (exists (vars (?v0 int)) #84)
#90 := (not #87)
#114 := (~ #90 #113)
#111 := (~ #110 #109)
#106 := (not #81)
#107 := (~ #106 #78)
#96 := (~ #78 #78)
#104 := (~ #73 #73)
#98 := [refl]: #104
#105 := [nnf-pos #98]: #96
#108 := [nnf-neg #105]: #107
#102 := (~ #101 #101)
#103 := [refl]: #102
#112 := [nnf-neg #103 #108]: #111
#115 := [nnf-neg #112]: #114
#12 := (< 0::int #9)
#10 := (<= #8 #9)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 int)) #13)
#15 := (implies #14 #12)
#16 := (exists (vars (?v0 int)) #15)
#17 := (not #16)
#93 := (iff #17 #90)
#35 := (not #10)
#36 := (or #35 #12)
#39 := (forall (vars (?v1 int)) #36)
#45 := (not #39)
#46 := (or #12 #45)
#51 := (exists (vars (?v0 int)) #46)
#54 := (not #51)
#91 := (iff #54 #90)
#88 := (iff #51 #87)
#85 := (iff #46 #84)
#82 := (iff #45 #81)
#79 := (iff #39 #78)
#76 := (iff #36 #73)
#70 := (or #67 #58)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #36 #70)
#59 := (iff #12 #58)
#60 := [rewrite]: #59
#68 := (iff #35 #67)
#65 := (iff #10 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69 #60]: #71
#77 := [trans #72 #75]: #76
#80 := [quant-intro #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #60 #83]: #85
#89 := [quant-intro #86]: #88
#92 := [monotonicity #89]: #91
#55 := (iff #17 #54)
#52 := (iff #16 #51)
#49 := (iff #15 #46)
#42 := (implies #39 #12)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #15 #42)
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [quant-intro #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [quant-intro #50]: #52
#56 := [monotonicity #53]: #55
#94 := [trans #56 #92]: #93
#34 := [asserted]: #17
#95 := [mp #34 #94]: #90
#116 := [mp~ #95 #115]: #113
#117 := [mp #116 #126]: #124
#131 := [mp #117 #130]: #128
#163 := [mp #131 #162]: #158
[mp #163 #186]: false
unsat
23471f6b1ed12f9477f5b746b57d0271e3fe26ad 67 0
#2 := false
#8 := (:var 0 int)
#9 := (pattern #8)
decl f3 :: int
#10 := f3
#12 := 2::int
#14 := (* 2::int f3)
#13 := (* 2::int #8)
#15 := (< #13 #14)
#11 := (< #8 f3)
#16 := (implies #11 #15)
#17 := (forall (vars (?v0 int)) (:pat #9) #16)
#18 := (not #17)
#84 := (iff #18 false)
#36 := (not #11)
#37 := (or #36 #15)
#40 := (forall (vars (?v0 int)) (:pat #9) #37)
#43 := (not #40)
#82 := (iff #43 false)
#1 := true
#77 := (not true)
#80 := (iff #77 false)
#81 := [rewrite]: #80
#78 := (iff #43 #77)
#75 := (iff #40 true)
#70 := (forall (vars (?v0 int)) (:pat #9) true)
#73 := (iff #70 true)
#74 := [elim-unused]: #73
#71 := (iff #40 #70)
#68 := (iff #37 true)
#48 := 0::int
#46 := -1::int
#50 := (* -1::int f3)
#51 := (+ #8 #50)
#49 := (>= #51 0::int)
#47 := (not #49)
#62 := (or #49 #47)
#66 := (iff #62 true)
#67 := [rewrite]: #66
#64 := (iff #37 #62)
#63 := (iff #15 #47)
#61 := [rewrite]: #63
#59 := (iff #36 #49)
#54 := (not #47)
#57 := (iff #54 #49)
#58 := [rewrite]: #57
#55 := (iff #36 #54)
#52 := (iff #11 #47)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#65 := [monotonicity #60 #61]: #64
#69 := [trans #65 #67]: #68
#72 := [quant-intro #69]: #71
#76 := [trans #72 #74]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#38 := (iff #16 #37)
#39 := [rewrite]: #38
#42 := [quant-intro #39]: #41
#45 := [monotonicity #42]: #44
#85 := [trans #45 #83]: #84
#35 := [asserted]: #18
[mp #35 #85]: false
unsat
53ac944328a76df2270bb4117390a226d92d4e8d 1 0
unsat
5645c40190078bc259023463ba288394a1ee2d31 75 0
#2 := false
#10 := 1::int
decl f5 :: int
#12 := f5
#16 := (+ f5 1::int)
decl f3 :: int
#8 := f3
#17 := (* f3 #16)
decl f4 :: int
#9 := f4
#15 := (* f3 f4)
#18 := (+ #15 #17)
#11 := (+ f4 1::int)
#13 := (+ #11 f5)
#14 := (* f3 #13)
#19 := (= #14 #18)
#20 := (not #19)
#90 := (iff #20 false)
#1 := true
#85 := (not true)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #20 #85)
#83 := (iff #19 true)
#53 := (* f3 f5)
#54 := (+ #15 #53)
#55 := (+ f3 #54)
#78 := (= #55 #55)
#81 := (iff #78 true)
#82 := [rewrite]: #81
#79 := (iff #19 #78)
#76 := (= #18 #55)
#66 := (+ f3 #53)
#71 := (+ #15 #66)
#74 := (= #71 #55)
#75 := [rewrite]: #74
#72 := (= #18 #71)
#69 := (= #17 #66)
#60 := (+ 1::int f5)
#63 := (* f3 #60)
#67 := (= #63 #66)
#68 := [rewrite]: #67
#64 := (= #17 #63)
#61 := (= #16 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#70 := [trans #65 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#58 := (= #14 #55)
#44 := (+ f4 f5)
#45 := (+ 1::int #44)
#50 := (* f3 #45)
#56 := (= #50 #55)
#57 := [rewrite]: #56
#51 := (= #14 #50)
#48 := (= #13 #45)
#38 := (+ 1::int f4)
#41 := (+ #38 f5)
#46 := (= #41 #45)
#47 := [rewrite]: #46
#42 := (= #13 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#59 := [trans #52 #57]: #58
#80 := [monotonicity #59 #77]: #79
#84 := [trans #80 #82]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#37 := [asserted]: #20
[mp #37 #91]: false
unsat
dfe5809b750cf5dfc5ba8d902ad5002b8123814d 62 0
#2 := false
decl f4 :: real
#10 := f4
decl f3 :: real
#8 := f3
#16 := 2::real
#17 := (* 2::real f3)
#18 := (* #17 f4)
#9 := 1::real
#13 := (- 1::real f4)
#14 := (* f3 #13)
#11 := (+ 1::real f4)
#12 := (* f3 #11)
#15 := (- #12 #14)
#19 := (= #15 #18)
#20 := (not #19)
#78 := (iff #20 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #20 #73)
#71 := (iff #19 true)
#38 := (* f3 f4)
#60 := (* 2::real #38)
#66 := (= #60 #60)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #19 #66)
#64 := (= #18 #60)
#65 := [rewrite]: #64
#62 := (= #15 #60)
#42 := -1::real
#50 := (* -1::real #38)
#51 := (+ f3 #50)
#39 := (+ f3 #38)
#56 := (- #39 #51)
#59 := (= #56 #60)
#61 := [rewrite]: #59
#57 := (= #15 #56)
#54 := (= #14 #51)
#43 := (* -1::real f4)
#44 := (+ 1::real #43)
#47 := (* f3 #44)
#52 := (= #47 #51)
#53 := [rewrite]: #52
#48 := (= #14 #47)
#45 := (= #13 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#40 := (= #12 #39)
#41 := [rewrite]: #40
#58 := [monotonicity #41 #55]: #57
#63 := [trans #58 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#37 := [asserted]: #20
[mp #37 #79]: false
unsat
3845bb98c4dd099de3474412f61c35c8b79e798c 141 0
#2 := false
decl f6 :: int
#13 := f6
decl f7 :: int
#17 := f7
decl f5 :: int
#12 := f5
#28 := (+ f5 f7)
#29 := (+ #28 f6)
decl f4 :: int
#10 := f4
#9 := 1::int
#11 := (+ 1::int f4)
#30 := (* #11 #29)
#25 := (* f7 f4)
#23 := (* #11 f7)
#14 := (+ f5 f6)
#20 := 2::int
#21 := (* 2::int #11)
#22 := (* #21 #14)
#24 := (+ #22 #23)
#26 := (+ #24 #25)
decl f3 :: int
#8 := f3
#27 := (+ f3 #26)
#31 := (- #27 #30)
#18 := (* f4 f7)
#15 := (* #11 #14)
#16 := (+ f3 #15)
#19 := (+ #16 #18)
#32 := (= #19 #31)
#33 := (not #32)
#154 := (iff #33 false)
#1 := true
#149 := (not true)
#152 := (iff #149 false)
#153 := [rewrite]: #152
#150 := (iff #33 #149)
#147 := (iff #32 true)
#52 := (* f4 f6)
#51 := (* f4 f5)
#53 := (+ #51 #52)
#64 := (+ #18 #53)
#65 := (+ f6 #64)
#66 := (+ f5 #65)
#67 := (+ f3 #66)
#141 := (= #67 #67)
#145 := (iff #141 true)
#146 := [rewrite]: #145
#140 := (iff #32 #141)
#143 := (= #31 #67)
#128 := (+ f7 #64)
#129 := (+ f6 #128)
#130 := (+ f5 #129)
#82 := (* 2::int #52)
#80 := (* 2::int #51)
#83 := (+ #80 #82)
#109 := (* 2::int #18)
#110 := (+ #109 #83)
#111 := (+ f7 #110)
#81 := (* 2::int f6)
#112 := (+ #81 #111)
#79 := (* 2::int f5)
#113 := (+ #79 #112)
#118 := (+ f3 #113)
#135 := (- #118 #130)
#138 := (= #135 #67)
#144 := [rewrite]: #138
#136 := (= #31 #135)
#133 := (= #30 #130)
#121 := (+ f6 f7)
#122 := (+ f5 #121)
#125 := (* #11 #122)
#131 := (= #125 #130)
#132 := [rewrite]: #131
#126 := (= #30 #125)
#123 := (= #29 #122)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#134 := [trans #127 #132]: #133
#119 := (= #27 #118)
#116 := (= #26 #113)
#96 := (+ #18 #83)
#97 := (+ f7 #96)
#98 := (+ #81 #97)
#99 := (+ #79 #98)
#106 := (+ #99 #18)
#114 := (= #106 #113)
#115 := [rewrite]: #114
#107 := (= #26 #106)
#104 := (= #25 #18)
#105 := [rewrite]: #104
#102 := (= #24 #99)
#90 := (+ f7 #18)
#84 := (+ #81 #83)
#85 := (+ #79 #84)
#93 := (+ #85 #90)
#100 := (= #93 #99)
#101 := [rewrite]: #100
#94 := (= #24 #93)
#91 := (= #23 #90)
#92 := [rewrite]: #91
#88 := (= #22 #85)
#72 := (* 2::int f4)
#73 := (+ 2::int #72)
#76 := (* #73 #14)
#86 := (= #76 #85)
#87 := [rewrite]: #86
#77 := (= #22 #76)
#74 := (= #21 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#89 := [trans #78 #87]: #88
#95 := [monotonicity #89 #92]: #94
#103 := [trans #95 #101]: #102
#108 := [monotonicity #103 #105]: #107
#117 := [trans #108 #115]: #116
#120 := [monotonicity #117]: #119
#137 := [monotonicity #120 #134]: #136
#142 := [trans #137 #144]: #143
#70 := (= #19 #67)
#54 := (+ f6 #53)
#55 := (+ f5 #54)
#58 := (+ f3 #55)
#61 := (+ #58 #18)
#68 := (= #61 #67)
#69 := [rewrite]: #68
#62 := (= #19 #61)
#59 := (= #16 #58)
#56 := (= #15 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#71 := [trans #63 #69]: #70
#139 := [monotonicity #71 #142]: #140
#148 := [trans #139 #146]: #147
#151 := [monotonicity #148]: #150
#155 := [trans #151 #153]: #154
#50 := [asserted]: #33
[mp #50 #155]: false
unsat
522e7a274d393467135232ebd14a729963459539 252 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f5 :: S2
#26 := f5
#27 := (f4 f5)
#25 := 2::int
#28 := (* 2::int #27)
#29 := (f3 #28)
#298 := (f4 #29)
#300 := -1::int
#279 := (* -1::int #298)
#615 := (+ #28 #279)
#599 := (<= #615 0::int)
#617 := (= #615 0::int)
#611 := (>= #27 0::int)
#242 := (= #298 0::int)
#554 := (not #242)
#593 := (<= #298 0::int)
#462 := (not #593)
#30 := 1::int
#563 := (>= #298 1::int)
#560 := (= #298 1::int)
#31 := (f3 1::int)
#594 := (f4 #31)
#306 := (= #594 1::int)
#14 := (:var 0 int)
#16 := (f3 #14)
#631 := (pattern #16)
#75 := (>= #14 0::int)
#76 := (not #75)
#17 := (f4 #16)
#57 := (= #14 #17)
#82 := (or #57 #76)
#632 := (forall (vars (?v0 int)) (:pat #631) #82)
#87 := (forall (vars (?v0 int)) #82)
#635 := (iff #87 #632)
#633 := (iff #82 #82)
#634 := [refl]: #633
#636 := [quant-intro #634]: #635
#138 := (~ #87 #87)
#135 := (~ #82 #82)
#150 := [refl]: #135
#139 := [nnf-pos #150]: #138
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#90 := (iff #20 #87)
#64 := (not #15)
#65 := (or #64 #57)
#70 := (forall (vars (?v0 int)) #65)
#88 := (iff #70 #87)
#85 := (iff #65 #82)
#79 := (or #76 #57)
#83 := (iff #79 #82)
#84 := [rewrite]: #83
#80 := (iff #65 #79)
#77 := (iff #64 #76)
#73 := (iff #15 #75)
#74 := [rewrite]: #73
#78 := [monotonicity #74]: #77
#81 := [monotonicity #78]: #80
#86 := [trans #81 #84]: #85
#89 := [quant-intro #86]: #88
#71 := (iff #20 #70)
#68 := (iff #19 #65)
#61 := (implies #15 #57)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #19 #61)
#59 := (iff #18 #57)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [quant-intro #69]: #71
#91 := [trans #72 #89]: #90
#56 := [asserted]: #20
#92 := [mp #56 #91]: #87
#151 := [mp~ #92 #139]: #87
#637 := [mp #151 #636]: #632
#614 := (not #632)
#583 := (or #614 #306)
#316 := (>= 1::int 0::int)
#590 := (not #316)
#591 := (= 1::int #594)
#595 := (or #591 #590)
#424 := (or #614 #595)
#426 := (iff #424 #583)
#569 := (iff #583 #583)
#570 := [rewrite]: #569
#582 := (iff #595 #306)
#579 := (or #306 false)
#576 := (iff #579 #306)
#581 := [rewrite]: #576
#580 := (iff #595 #579)
#589 := (iff #590 false)
#1 := true
#587 := (not true)
#588 := (iff #587 false)
#585 := [rewrite]: #588
#301 := (iff #590 #587)
#308 := (iff #316 true)
#586 := [rewrite]: #308
#584 := [monotonicity #586]: #301
#578 := [trans #584 #585]: #589
#305 := (iff #591 #306)
#307 := [rewrite]: #305
#575 := [monotonicity #307 #578]: #580
#577 := [trans #575 #581]: #582
#568 := [monotonicity #577]: #426
#571 := [trans #568 #570]: #426
#425 := [quant-inst]: #424
#565 := [mp #425 #571]: #583
#447 := [unit-resolution #565 #637]: #306
#448 := (= #298 #594)
#32 := (= #29 #31)
#134 := [asserted]: #32
#441 := [monotonicity #134]: #448
#456 := [trans #441 #447]: #560
#458 := (not #560)
#459 := (or #458 #563)
#452 := [th-lemma]: #459
#460 := [unit-resolution #452 #456]: #563
#461 := (not #563)
#463 := (or #461 #462)
#464 := [th-lemma]: #463
#557 := [unit-resolution #464 #460]: #462
#558 := (or #554 #593)
#545 := [th-lemma]: #558
#547 := [unit-resolution #545 #557]: #554
#608 := (or #242 #611)
#22 := (= #17 0::int)
#123 := (or #22 #75)
#638 := (forall (vars (?v0 int)) (:pat #631) #123)
#128 := (forall (vars (?v0 int)) #123)
#641 := (iff #128 #638)
#639 := (iff #123 #123)
#640 := [refl]: #639
#642 := [quant-intro #640]: #641
#140 := (~ #128 #128)
#152 := (~ #123 #123)
#153 := [refl]: #152
#141 := [nnf-pos #153]: #140
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#131 := (iff #24 #128)
#94 := (= 0::int #17)
#100 := (not #21)
#101 := (or #100 #94)
#106 := (forall (vars (?v0 int)) #101)
#129 := (iff #106 #128)
#126 := (iff #101 #123)
#120 := (or #75 #22)
#124 := (iff #120 #123)
#125 := [rewrite]: #124
#121 := (iff #101 #120)
#118 := (iff #94 #22)
#119 := [rewrite]: #118
#116 := (iff #100 #75)
#111 := (not #76)
#114 := (iff #111 #75)
#115 := [rewrite]: #114
#112 := (iff #100 #111)
#109 := (iff #21 #76)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#117 := [trans #113 #115]: #116
#122 := [monotonicity #117 #119]: #121
#127 := [trans #122 #125]: #126
#130 := [quant-intro #127]: #129
#107 := (iff #24 #106)
#104 := (iff #23 #101)
#97 := (implies #21 #94)
#102 := (iff #97 #101)
#103 := [rewrite]: #102
#98 := (iff #23 #97)
#95 := (iff #22 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#105 := [trans #99 #103]: #104
#108 := [quant-intro #105]: #107
#132 := [trans #108 #130]: #131
#93 := [asserted]: #24
#133 := [mp #93 #132]: #128
#154 := [mp~ #133 #141]: #128
#643 := [mp #154 #642]: #638
#609 := (not #638)
#607 := (or #609 #242 #611)
#209 := (>= #28 0::int)
#606 := (or #242 #209)
#610 := (or #609 #606)
#322 := (iff #610 #607)
#597 := (or #609 #608)
#320 := (iff #597 #607)
#321 := [rewrite]: #320
#304 := (iff #610 #597)
#247 := (iff #606 #608)
#284 := (iff #209 #611)
#285 := [rewrite]: #284
#248 := [monotonicity #285]: #247
#319 := [monotonicity #248]: #304
#215 := [trans #319 #321]: #322
#596 := [quant-inst]: #610
#592 := [mp #596 #215]: #607
#539 := [unit-resolution #592 #643]: #608
#536 := [unit-resolution #539 #547]: #611
#618 := (not #611)
#612 := (or #618 #617)
#256 := (or #614 #618 #617)
#294 := (not #209)
#299 := (= #28 #298)
#296 := (or #299 #294)
#598 := (or #614 #296)
#602 := (iff #598 #256)
#261 := (or #614 #612)
#600 := (iff #261 #256)
#601 := [rewrite]: #600
#262 := (iff #598 #261)
#613 := (iff #296 #612)
#621 := (or #617 #618)
#271 := (iff #621 #612)
#276 := [rewrite]: #271
#616 := (iff #296 #621)
#619 := (iff #294 #618)
#620 := [monotonicity #285]: #619
#273 := (iff #299 #617)
#404 := [rewrite]: #273
#622 := [monotonicity #404 #620]: #616
#272 := [trans #622 #276]: #613
#263 := [monotonicity #272]: #262
#603 := [trans #263 #601]: #602
#260 := [quant-inst]: #598
#604 := [mp #260 #603]: #256
#538 := [unit-resolution #604 #637]: #612
#548 := [unit-resolution #538 #536]: #617
#549 := (not #617)
#550 := (or #549 #599)
#546 := [th-lemma]: #550
#551 := [unit-resolution #546 #548]: #599
#605 := (>= #615 0::int)
#540 := (or #549 #605)
#541 := [th-lemma]: #540
#542 := [unit-resolution #541 #548]: #605
#562 := (<= #298 1::int)
#543 := (or #458 #562)
#537 := [th-lemma]: #543
#544 := [unit-resolution #537 #456]: #562
[th-lemma #460 #544 #542 #551]: false
unsat
4d15f891322a8916dc12e3586edb994e590a9767 227 0
#2 := false
#27 := 3::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#143 := (>= #26 3::int)
#141 := (not #143)
#33 := 7::int
decl f3 :: (-> int S2)
#29 := 2::int
#30 := (* 2::int #26)
#31 := (f3 #30)
#32 := (f4 #31)
#147 := (>= #32 7::int)
#156 := (and #141 #147)
#34 := (< #32 7::int)
#35 := (not #34)
#28 := (< #26 3::int)
#36 := (and #28 #35)
#157 := (iff #36 #156)
#154 := (iff #35 #147)
#145 := (not #147)
#149 := (not #145)
#152 := (iff #149 #147)
#153 := [rewrite]: #152
#150 := (iff #35 #149)
#146 := (iff #34 #145)
#148 := [rewrite]: #146
#151 := [monotonicity #148]: #150
#155 := [trans #151 #153]: #154
#142 := (iff #28 #141)
#144 := [rewrite]: #142
#158 := [monotonicity #144 #155]: #157
#138 := [asserted]: #36
#159 := [mp #138 #158]: #156
#160 := [and-elim #159]: #141
#13 := 0::int
#641 := -1::int
#643 := (* -1::int #32)
#299 := (+ #30 #643)
#632 := (>= #299 0::int)
#430 := (= #299 0::int)
#311 := (>= #26 0::int)
#634 := (= #32 0::int)
#327 := (not #634)
#331 := (<= #32 0::int)
#333 := (not #331)
#161 := [and-elim #159]: #147
#334 := (or #333 #145)
#612 := [th-lemma]: #334
#613 := [unit-resolution #612 #161]: #333
#610 := (or #327 #331)
#614 := [th-lemma]: #610
#611 := [unit-resolution #614 #613]: #327
#14 := (:var 0 int)
#16 := (f3 #14)
#657 := (pattern #16)
#79 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#127 := (or #22 #79)
#664 := (forall (vars (?v0 int)) (:pat #657) #127)
#132 := (forall (vars (?v0 int)) #127)
#667 := (iff #132 #664)
#665 := (iff #127 #127)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#165 := (~ #132 #132)
#179 := (~ #127 #127)
#180 := [refl]: #179
#166 := [nnf-pos #180]: #165
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#135 := (iff #24 #132)
#98 := (= 0::int #17)
#104 := (not #21)
#105 := (or #104 #98)
#110 := (forall (vars (?v0 int)) #105)
#133 := (iff #110 #132)
#130 := (iff #105 #127)
#124 := (or #79 #22)
#128 := (iff #124 #127)
#129 := [rewrite]: #128
#125 := (iff #105 #124)
#122 := (iff #98 #22)
#123 := [rewrite]: #122
#120 := (iff #104 #79)
#80 := (not #79)
#115 := (not #80)
#118 := (iff #115 #79)
#119 := [rewrite]: #118
#116 := (iff #104 #115)
#113 := (iff #21 #80)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#121 := [trans #117 #119]: #120
#126 := [monotonicity #121 #123]: #125
#131 := [trans #126 #129]: #130
#134 := [quant-intro #131]: #133
#111 := (iff #24 #110)
#108 := (iff #23 #105)
#101 := (implies #21 #98)
#106 := (iff #101 #105)
#107 := [rewrite]: #106
#102 := (iff #23 #101)
#99 := (iff #22 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#109 := [trans #103 #107]: #108
#112 := [quant-intro #109]: #111
#136 := [trans #112 #134]: #135
#97 := [asserted]: #24
#137 := [mp #97 #136]: #132
#181 := [mp~ #137 #166]: #132
#669 := [mp #181 #668]: #664
#346 := (not #664)
#347 := (or #346 #311 #634)
#324 := (>= #30 0::int)
#273 := (or #634 #324)
#348 := (or #346 #273)
#620 := (iff #348 #347)
#636 := (or #311 #634)
#618 := (or #346 #636)
#342 := (iff #618 #347)
#616 := [rewrite]: #342
#619 := (iff #348 #618)
#330 := (iff #273 #636)
#274 := (or #634 #311)
#622 := (iff #274 #636)
#623 := [rewrite]: #622
#635 := (iff #273 #274)
#644 := (iff #324 #311)
#645 := [rewrite]: #644
#633 := [monotonicity #645]: #635
#345 := [trans #633 #623]: #330
#341 := [monotonicity #345]: #619
#617 := [trans #341 #616]: #620
#240 := [quant-inst]: #348
#621 := [mp #240 #617]: #347
#615 := [unit-resolution #621 #669 #611]: #311
#646 := (not #311)
#302 := (or #646 #430)
#61 := (= #14 #17)
#86 := (or #61 #80)
#658 := (forall (vars (?v0 int)) (:pat #657) #86)
#91 := (forall (vars (?v0 int)) #86)
#661 := (iff #91 #658)
#659 := (iff #86 #86)
#660 := [refl]: #659
#662 := [quant-intro #660]: #661
#163 := (~ #91 #91)
#139 := (~ #86 #86)
#177 := [refl]: #139
#164 := [nnf-pos #177]: #163
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#94 := (iff #20 #91)
#68 := (not #15)
#69 := (or #68 #61)
#74 := (forall (vars (?v0 int)) #69)
#92 := (iff #74 #91)
#89 := (iff #69 #86)
#83 := (or #80 #61)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #69 #83)
#81 := (iff #68 #80)
#77 := (iff #15 #79)
#78 := [rewrite]: #77
#82 := [monotonicity #78]: #81
#85 := [monotonicity #82]: #84
#90 := [trans #85 #88]: #89
#93 := [quant-intro #90]: #92
#75 := (iff #20 #74)
#72 := (iff #19 #69)
#65 := (implies #15 #61)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #19 #65)
#63 := (iff #18 #61)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#73 := [trans #67 #71]: #72
#76 := [quant-intro #73]: #75
#95 := [trans #76 #93]: #94
#60 := [asserted]: #20
#96 := [mp #60 #95]: #91
#178 := [mp~ #96 #164]: #91
#663 := [mp #178 #662]: #658
#624 := (not #658)
#286 := (or #624 #646 #430)
#252 := (not #324)
#326 := (= #30 #32)
#305 := (or #326 #252)
#287 := (or #624 #305)
#630 := (iff #287 #286)
#289 := (or #624 #302)
#628 := (iff #289 #286)
#629 := [rewrite]: #628
#626 := (iff #287 #289)
#640 := (iff #305 #302)
#648 := (or #430 #646)
#639 := (iff #648 #302)
#298 := [rewrite]: #639
#638 := (iff #305 #648)
#647 := (iff #252 #646)
#642 := [monotonicity #645]: #647
#637 := (iff #326 #430)
#310 := [rewrite]: #637
#297 := [monotonicity #310 #642]: #638
#282 := [trans #297 #298]: #640
#627 := [monotonicity #282]: #626
#625 := [trans #627 #629]: #630
#288 := [quant-inst]: #287
#631 := [mp #288 #625]: #286
#604 := [unit-resolution #631 #663]: #302
#605 := [unit-resolution #604 #615]: #430
#606 := (not #430)
#601 := (or #606 #632)
#602 := [th-lemma]: #601
#607 := [unit-resolution #602 #605]: #632
[th-lemma #161 #607 #160]: false
unsat
ee8d523b01e5668527c65aa2ae3489e22daf3c31 367 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#26 := f5
#27 := (f4 f5)
#474 := (= #27 0::int)
decl f3 :: (-> int S2)
#256 := (f3 #27)
#562 := (f4 #256)
#563 := (= #562 0::int)
#561 := (>= #27 0::int)
#482 := (not #561)
#149 := -1::int
#353 := (>= #27 -1::int)
#633 := (not #353)
#25 := 1::int
#28 := (+ 1::int #27)
#29 := (f3 #28)
#30 := (f4 #29)
#640 := (* -1::int #30)
#637 := (+ #27 #640)
#641 := (= #637 -1::int)
#476 := (not #641)
#611 := (<= #637 -1::int)
#532 := (not #611)
#150 := (* -1::int #27)
#151 := (+ #150 #30)
#154 := (f3 #151)
#157 := (f4 #154)
#509 := (+ #640 #157)
#510 := (+ #27 #509)
#578 := (>= #510 0::int)
#507 := (= #510 0::int)
#600 := (<= #637 0::int)
#531 := [hypothesis]: #611
#519 := (or #532 #600)
#520 := [th-lemma]: #519
#515 := [unit-resolution #520 #531]: #600
#593 := (not #600)
#584 := (or #507 #593)
#14 := (:var 0 int)
#16 := (f3 #14)
#677 := (pattern #16)
#81 := (>= #14 0::int)
#82 := (not #81)
#17 := (f4 #16)
#63 := (= #14 #17)
#88 := (or #63 #82)
#678 := (forall (vars (?v0 int)) (:pat #677) #88)
#93 := (forall (vars (?v0 int)) #88)
#681 := (iff #93 #678)
#679 := (iff #88 #88)
#680 := [refl]: #679
#682 := [quant-intro #680]: #681
#185 := (~ #93 #93)
#182 := (~ #88 #88)
#197 := [refl]: #182
#186 := [nnf-pos #197]: #185
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#96 := (iff #20 #93)
#70 := (not #15)
#71 := (or #70 #63)
#76 := (forall (vars (?v0 int)) #71)
#94 := (iff #76 #93)
#91 := (iff #71 #88)
#85 := (or #82 #63)
#89 := (iff #85 #88)
#90 := [rewrite]: #89
#86 := (iff #71 #85)
#83 := (iff #70 #82)
#79 := (iff #15 #81)
#80 := [rewrite]: #79
#84 := [monotonicity #80]: #83
#87 := [monotonicity #84]: #86
#92 := [trans #87 #90]: #91
#95 := [quant-intro #92]: #94
#77 := (iff #20 #76)
#74 := (iff #19 #71)
#67 := (implies #15 #63)
#72 := (iff #67 #71)
#73 := [rewrite]: #72
#68 := (iff #19 #67)
#65 := (iff #18 #63)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#75 := [trans #69 #73]: #74
#78 := [quant-intro #75]: #77
#97 := [trans #78 #95]: #96
#62 := [asserted]: #20
#98 := [mp #62 #97]: #93
#198 := [mp~ #98 #186]: #93
#683 := [mp #198 #682]: #678
#649 := (not #678)
#596 := (or #649 #507 #593)
#504 := (>= #151 0::int)
#505 := (not #504)
#498 := (= #151 #157)
#506 := (or #498 #505)
#592 := (or #649 #506)
#590 := (iff #592 #596)
#586 := (or #649 #584)
#589 := (iff #586 #596)
#583 := [rewrite]: #589
#587 := (iff #592 #586)
#594 := (iff #506 #584)
#585 := (iff #505 #593)
#604 := (iff #504 #600)
#591 := [rewrite]: #604
#582 := [monotonicity #591]: #585
#508 := (iff #498 #507)
#603 := [rewrite]: #508
#595 := [monotonicity #603 #582]: #594
#588 := [monotonicity #595]: #587
#574 := [trans #588 #583]: #590
#597 := [quant-inst]: #592
#575 := [mp #597 #574]: #596
#521 := [unit-resolution #575 #683]: #584
#489 := [unit-resolution #521 #515]: #507
#496 := (not #507)
#455 := (or #496 #578)
#486 := [th-lemma]: #455
#488 := [unit-resolution #486 #489]: #578
#559 := (<= #157 0::int)
#168 := (* -1::int #157)
#143 := (f3 0::int)
#146 := (f4 #143)
#169 := (+ #146 #168)
#167 := (>= #169 0::int)
#34 := (- #30 #27)
#35 := (f3 #34)
#36 := (f4 #35)
#31 := (* 0::int #30)
#32 := (f3 #31)
#33 := (f4 #32)
#37 := (< #33 #36)
#38 := (not #37)
#179 := (iff #38 #167)
#160 := (< #146 #157)
#163 := (not #160)
#177 := (iff #163 #167)
#166 := (not #167)
#172 := (not #166)
#175 := (iff #172 #167)
#176 := [rewrite]: #175
#173 := (iff #163 #172)
#170 := (iff #160 #166)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#178 := [trans #174 #176]: #177
#164 := (iff #38 #163)
#161 := (iff #37 #160)
#158 := (= #36 #157)
#155 := (= #35 #154)
#152 := (= #34 #151)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#147 := (= #33 #146)
#144 := (= #32 #143)
#141 := (= #31 0::int)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#162 := [monotonicity #148 #159]: #161
#165 := [monotonicity #162]: #164
#180 := [trans #165 #178]: #179
#140 := [asserted]: #38
#181 := [mp #140 #180]: #167
#653 := (<= #146 0::int)
#667 := (= #146 0::int)
#650 := (or #649 #667)
#450 := (>= 0::int 0::int)
#657 := (not #450)
#664 := (= 0::int #146)
#665 := (or #664 #657)
#645 := (or #649 #665)
#289 := (iff #645 #650)
#654 := (iff #650 #650)
#294 := [rewrite]: #654
#647 := (iff #665 #667)
#307 := (or #667 false)
#310 := (iff #307 #667)
#646 := [rewrite]: #310
#308 := (iff #665 #307)
#303 := (iff #657 false)
#1 := true
#318 := (not true)
#319 := (iff #318 false)
#660 := [rewrite]: #319
#323 := (iff #657 #318)
#668 := (iff #450 true)
#658 := [rewrite]: #668
#659 := [monotonicity #658]: #323
#644 := [trans #659 #660]: #303
#666 := (iff #664 #667)
#662 := [rewrite]: #666
#309 := [monotonicity #662 #644]: #308
#648 := [trans #309 #646]: #647
#652 := [monotonicity #648]: #289
#295 := [trans #652 #294]: #289
#651 := [quant-inst]: #645
#655 := [mp #651 #295]: #650
#490 := [unit-resolution #655 #683]: #667
#497 := (not #667)
#499 := (or #497 #653)
#500 := [th-lemma]: #499
#501 := [unit-resolution #500 #490]: #653
#511 := (not #653)
#491 := (or #559 #511 #166)
#512 := [th-lemma]: #491
#467 := [unit-resolution #512 #501 #181]: #559
#468 := [th-lemma #467 #531 #488]: false
#473 := [lemma #468]: #532
#477 := (or #476 #611)
#478 := [th-lemma]: #477
#479 := [unit-resolution #478 #473]: #476
#624 := (or #633 #641)
#627 := (or #649 #633 #641)
#639 := (>= #28 0::int)
#361 := (not #639)
#362 := (= #28 #30)
#636 := (or #362 #361)
#628 := (or #649 #636)
#615 := (iff #628 #627)
#629 := (or #649 #624)
#472 := (iff #629 #627)
#614 := [rewrite]: #472
#470 := (iff #628 #629)
#621 := (iff #636 #624)
#634 := (or #641 #633)
#625 := (iff #634 #624)
#626 := [rewrite]: #625
#631 := (iff #636 #634)
#348 := (iff #361 #633)
#354 := (iff #639 #353)
#632 := [rewrite]: #354
#630 := [monotonicity #632]: #348
#351 := (iff #362 #641)
#352 := [rewrite]: #351
#635 := [monotonicity #352 #630]: #631
#622 := [trans #635 #626]: #621
#471 := [monotonicity #622]: #470
#616 := [trans #471 #614]: #615
#623 := [quant-inst]: #628
#617 := [mp #623 #616]: #627
#480 := [unit-resolution #617 #683]: #624
#481 := [unit-resolution #480 #479]: #633
#483 := (or #482 #353)
#484 := [th-lemma]: #483
#469 := [unit-resolution #484 #481]: #482
#565 := (or #561 #563)
#22 := (= #17 0::int)
#129 := (or #22 #81)
#684 := (forall (vars (?v0 int)) (:pat #677) #129)
#134 := (forall (vars (?v0 int)) #129)
#687 := (iff #134 #684)
#685 := (iff #129 #129)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#187 := (~ #134 #134)
#199 := (~ #129 #129)
#200 := [refl]: #199
#188 := [nnf-pos #200]: #187
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#137 := (iff #24 #134)
#100 := (= 0::int #17)
#106 := (not #21)
#107 := (or #106 #100)
#112 := (forall (vars (?v0 int)) #107)
#135 := (iff #112 #134)
#132 := (iff #107 #129)
#126 := (or #81 #22)
#130 := (iff #126 #129)
#131 := [rewrite]: #130
#127 := (iff #107 #126)
#124 := (iff #100 #22)
#125 := [rewrite]: #124
#122 := (iff #106 #81)
#117 := (not #82)
#120 := (iff #117 #81)
#121 := [rewrite]: #120
#118 := (iff #106 #117)
#115 := (iff #21 #82)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#123 := [trans #119 #121]: #122
#128 := [monotonicity #123 #125]: #127
#133 := [trans #128 #131]: #132
#136 := [quant-intro #133]: #135
#113 := (iff #24 #112)
#110 := (iff #23 #107)
#103 := (implies #21 #100)
#108 := (iff #103 #107)
#109 := [rewrite]: #108
#104 := (iff #23 #103)
#101 := (iff #22 #100)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#111 := [trans #105 #109]: #110
#114 := [quant-intro #111]: #113
#138 := [trans #114 #136]: #137
#99 := [asserted]: #24
#139 := [mp #99 #138]: #134
#201 := [mp~ #139 #188]: #134
#689 := [mp #201 #688]: #684
#609 := (not #684)
#544 := (or #609 #561 #563)
#564 := (or #563 #561)
#545 := (or #609 #564)
#552 := (iff #545 #544)
#548 := (or #609 #565)
#551 := (iff #548 #544)
#546 := [rewrite]: #551
#549 := (iff #545 #548)
#555 := (iff #564 #565)
#566 := [rewrite]: #555
#550 := [monotonicity #566]: #549
#538 := [trans #550 #546]: #552
#547 := [quant-inst]: #545
#534 := [mp #547 #538]: #544
#485 := [unit-resolution #534 #689]: #565
#446 := [unit-resolution #485 #469]: #563
#454 := (= #27 #562)
#341 := (= f5 #256)
#8 := (:var 0 S2)
#9 := (f4 #8)
#669 := (pattern #9)
#10 := (f3 #9)
#56 := (= #8 #10)
#670 := (forall (vars (?v0 S2)) (:pat #669) #56)
#59 := (forall (vars (?v0 S2)) #56)
#671 := (iff #59 #670)
#673 := (iff #670 #670)
#674 := [rewrite]: #673
#672 := [rewrite]: #671
#675 := [trans #672 #674]: #671
#195 := (~ #59 #59)
#193 := (~ #56 #56)
#194 := [refl]: #193
#196 := [nnf-pos #194]: #195
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#60 := (iff #12 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#61 := [quant-intro #58]: #60
#55 := [asserted]: #12
#64 := [mp #55 #61]: #59
#184 := [mp~ #64 #196]: #59
#676 := [mp #184 #675]: #670
#342 := (not #670)
#343 := (or #342 #341)
#347 := [quant-inst]: #343
#447 := [unit-resolution #347 #676]: #341
#456 := [monotonicity #447]: #454
#457 := [trans #456 #446]: #474
#458 := (not #474)
#460 := (or #458 #561)
#461 := [th-lemma]: #460
[unit-resolution #461 #469 #457]: false
unsat
fe0d866a3da682e02aab50789c1002badb2ec0c9 299 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f5 :: S2
#26 := f5
#27 := (f4 f5)
#25 := 1::int
#28 := (+ 1::int #27)
#29 := (f3 #28)
#30 := (f4 #29)
#140 := -1::int
#141 := (+ -1::int #30)
#144 := (f3 #141)
#291 := (f4 #144)
#676 := (* -1::int #291)
#540 := (+ #27 #676)
#534 := (>= #540 0::int)
#538 := (= #27 #291)
#150 := (= f5 #144)
#169 := (<= #30 0::int)
#170 := (not #169)
#176 := (iff #150 #170)
#191 := (not #176)
#224 := (iff #191 #150)
#214 := (not #150)
#219 := (not #214)
#222 := (iff #219 #150)
#223 := [rewrite]: #222
#220 := (iff #191 #219)
#217 := (iff #176 #214)
#211 := (iff #150 false)
#215 := (iff #211 #214)
#216 := [rewrite]: #215
#212 := (iff #176 #211)
#209 := (iff #170 false)
#1 := true
#204 := (not true)
#207 := (iff #204 false)
#208 := [rewrite]: #207
#205 := (iff #170 #204)
#202 := (iff #169 true)
#181 := (or #170 #176)
#184 := (not #181)
#31 := (< 0::int #30)
#32 := (- #30 1::int)
#33 := (f3 #32)
#34 := (= #33 f5)
#35 := (iff #31 #34)
#36 := (or #35 #31)
#37 := (not #36)
#187 := (iff #37 #184)
#155 := (iff #31 #150)
#161 := (or #31 #155)
#166 := (not #161)
#185 := (iff #166 #184)
#182 := (iff #161 #181)
#179 := (iff #155 #176)
#173 := (iff #170 #150)
#177 := (iff #173 #176)
#178 := [rewrite]: #177
#174 := (iff #155 #173)
#171 := (iff #31 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#180 := [trans #175 #178]: #179
#183 := [monotonicity #172 #180]: #182
#186 := [monotonicity #183]: #185
#167 := (iff #37 #166)
#164 := (iff #36 #161)
#158 := (or #155 #31)
#162 := (iff #158 #161)
#163 := [rewrite]: #162
#159 := (iff #36 #158)
#156 := (iff #35 #155)
#153 := (iff #34 #150)
#147 := (= #144 f5)
#151 := (iff #147 #150)
#152 := [rewrite]: #151
#148 := (iff #34 #147)
#145 := (= #33 #144)
#142 := (= #32 #141)
#143 := [rewrite]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#165 := [trans #160 #163]: #164
#168 := [monotonicity #165]: #167
#188 := [trans #168 #186]: #187
#139 := [asserted]: #37
#189 := [mp #139 #188]: #184
#190 := [not-or-elim #189]: #169
#203 := [iff-true #190]: #202
#206 := [monotonicity #203]: #205
#210 := [trans #206 #208]: #209
#213 := [monotonicity #210]: #212
#218 := [trans #213 #216]: #217
#221 := [monotonicity #218]: #220
#225 := [trans #221 #223]: #224
#192 := [not-or-elim #189]: #191
#226 := [mp #192 #225]: #150
#545 := [monotonicity #226]: #538
#546 := (not #538)
#618 := (or #546 #534)
#620 := [th-lemma]: #618
#630 := [unit-resolution #620 #545]: #534
#356 := (* -1::int #30)
#486 := (+ #27 #356)
#685 := (<= #486 -1::int)
#693 := (= #486 -1::int)
#700 := (>= #27 -1::int)
#523 := (>= #291 0::int)
#654 := (= #291 0::int)
#389 := (>= #30 1::int)
#669 := (not #389)
#631 := (or #669 #170)
#632 := [th-lemma]: #631
#628 := [unit-resolution #632 #190]: #669
#14 := (:var 0 int)
#16 := (f3 #14)
#713 := (pattern #16)
#80 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#128 := (or #22 #80)
#720 := (forall (vars (?v0 int)) (:pat #713) #128)
#133 := (forall (vars (?v0 int)) #128)
#723 := (iff #133 #720)
#721 := (iff #128 #128)
#722 := [refl]: #721
#724 := [quant-intro #722]: #723
#231 := (~ #133 #133)
#229 := (~ #128 #128)
#230 := [refl]: #229
#232 := [nnf-pos #230]: #231
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#136 := (iff #24 #133)
#99 := (= 0::int #17)
#105 := (not #21)
#106 := (or #105 #99)
#111 := (forall (vars (?v0 int)) #106)
#134 := (iff #111 #133)
#131 := (iff #106 #128)
#125 := (or #80 #22)
#129 := (iff #125 #128)
#130 := [rewrite]: #129
#126 := (iff #106 #125)
#123 := (iff #99 #22)
#124 := [rewrite]: #123
#121 := (iff #105 #80)
#81 := (not #80)
#116 := (not #81)
#119 := (iff #116 #80)
#120 := [rewrite]: #119
#117 := (iff #105 #116)
#114 := (iff #21 #81)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#122 := [trans #118 #120]: #121
#127 := [monotonicity #122 #124]: #126
#132 := [trans #127 #130]: #131
#135 := [quant-intro #132]: #134
#112 := (iff #24 #111)
#109 := (iff #23 #106)
#102 := (implies #21 #99)
#107 := (iff #102 #106)
#108 := [rewrite]: #107
#103 := (iff #23 #102)
#100 := (iff #22 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#110 := [trans #104 #108]: #109
#113 := [quant-intro #110]: #112
#137 := [trans #113 #135]: #136
#98 := [asserted]: #24
#138 := [mp #98 #137]: #133
#233 := [mp~ #138 #232]: #133
#725 := [mp #233 #724]: #720
#330 := (not #720)
#645 := (or #330 #389 #654)
#675 := (>= #141 0::int)
#655 := (or #654 #675)
#643 := (or #330 #655)
#539 := (iff #643 #645)
#487 := (or #389 #654)
#528 := (or #330 #487)
#489 := (iff #528 #645)
#637 := [rewrite]: #489
#529 := (iff #643 #528)
#642 := (iff #655 #487)
#649 := (or #654 #389)
#488 := (iff #649 #487)
#641 := [rewrite]: #488
#656 := (iff #655 #649)
#390 := (iff #675 #389)
#668 := [rewrite]: #390
#485 := [monotonicity #668]: #656
#644 := [trans #485 #641]: #642
#530 := [monotonicity #644]: #529
#634 := [trans #530 #637]: #539
#646 := [quant-inst]: #643
#635 := [mp #646 #634]: #645
#633 := [unit-resolution #635 #725 #628]: #654
#622 := (not #654)
#623 := (or #622 #523)
#624 := [th-lemma]: #623
#625 := [unit-resolution #624 #633]: #523
#626 := (not #534)
#619 := (not #523)
#610 := (or #700 #619 #626)
#611 := [th-lemma]: #610
#613 := [unit-resolution #611 #625 #630]: #700
#703 := (not #700)
#694 := (or #693 #703)
#62 := (= #14 #17)
#87 := (or #62 #81)
#714 := (forall (vars (?v0 int)) (:pat #713) #87)
#92 := (forall (vars (?v0 int)) #87)
#717 := (iff #92 #714)
#715 := (iff #87 #87)
#716 := [refl]: #715
#718 := [quant-intro #716]: #717
#197 := (~ #92 #92)
#199 := (~ #87 #87)
#196 := [refl]: #199
#195 := [nnf-pos #196]: #197
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#95 := (iff #20 #92)
#69 := (not #15)
#70 := (or #69 #62)
#75 := (forall (vars (?v0 int)) #70)
#93 := (iff #75 #92)
#90 := (iff #70 #87)
#84 := (or #81 #62)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #70 #84)
#82 := (iff #69 #81)
#78 := (iff #15 #80)
#79 := [rewrite]: #78
#83 := [monotonicity #79]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [quant-intro #91]: #93
#76 := (iff #20 #75)
#73 := (iff #19 #70)
#66 := (implies #15 #62)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #19 #66)
#64 := (iff #18 #62)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#74 := [trans #68 #72]: #73
#77 := [quant-intro #74]: #76
#96 := [trans #77 #94]: #95
#61 := [asserted]: #20
#97 := [mp #61 #96]: #92
#193 := [mp~ #97 #195]: #92
#719 := [mp #193 #718]: #714
#695 := (not #714)
#355 := (or #695 #693 #703)
#382 := (>= #28 0::int)
#379 := (not #382)
#697 := (= #28 #30)
#699 := (or #697 #379)
#696 := (or #695 #699)
#682 := (iff #696 #355)
#680 := (or #695 #694)
#345 := (iff #680 #355)
#346 := [rewrite]: #345
#343 := (iff #696 #680)
#354 := (iff #699 #694)
#698 := (iff #379 #703)
#701 := (iff #382 #700)
#702 := [rewrite]: #701
#704 := [monotonicity #702]: #698
#367 := (iff #697 #693)
#368 := [rewrite]: #367
#359 := [monotonicity #368 #704]: #354
#344 := [monotonicity #359]: #343
#683 := [trans #344 #346]: #682
#339 := [quant-inst]: #696
#684 := [mp #339 #683]: #355
#614 := [unit-resolution #684 #719]: #694
#615 := [unit-resolution #614 #613]: #693
#616 := (not #693)
#612 := (or #616 #685)
#617 := [th-lemma]: #612
#603 := [unit-resolution #617 #615]: #685
[th-lemma #625 #190 #603 #630]: false
unsat
0be1401474e291c6d6933a302a6418a34a233b36 458 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := 1::int
#143 := (+ 1::int #26)
#146 := (f3 #143)
#302 := (f4 #146)
#362 := (= #302 0::int)
#171 := (f3 0::int)
#536 := (f4 #171)
#542 := (= #536 0::int)
#14 := (:var 0 int)
#16 := (f3 #14)
#677 := (pattern #16)
#83 := (>= #14 0::int)
#84 := (not #83)
#17 := (f4 #16)
#65 := (= #14 #17)
#90 := (or #65 #84)
#678 := (forall (vars (?v0 int)) (:pat #677) #90)
#95 := (forall (vars (?v0 int)) #90)
#681 := (iff #95 #678)
#679 := (iff #90 #90)
#680 := [refl]: #679
#682 := [quant-intro #680]: #681
#184 := (~ #95 #95)
#180 := (~ #90 #90)
#196 := [refl]: #180
#185 := [nnf-pos #196]: #184
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#98 := (iff #20 #95)
#72 := (not #15)
#73 := (or #72 #65)
#78 := (forall (vars (?v0 int)) #73)
#96 := (iff #78 #95)
#93 := (iff #73 #90)
#87 := (or #84 #65)
#91 := (iff #87 #90)
#92 := [rewrite]: #91
#88 := (iff #73 #87)
#85 := (iff #72 #84)
#81 := (iff #15 #83)
#82 := [rewrite]: #81
#86 := [monotonicity #82]: #85
#89 := [monotonicity #86]: #88
#94 := [trans #89 #92]: #93
#97 := [quant-intro #94]: #96
#79 := (iff #20 #78)
#76 := (iff #19 #73)
#69 := (implies #15 #65)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #19 #69)
#67 := (iff #18 #65)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [trans #71 #75]: #76
#80 := [quant-intro #77]: #79
#99 := [trans #80 #97]: #98
#64 := [asserted]: #20
#100 := [mp #64 #99]: #95
#197 := [mp~ #100 #185]: #95
#683 := [mp #197 #682]: #678
#655 := (not #678)
#533 := (or #655 #542)
#534 := (>= 0::int 0::int)
#535 := (not #534)
#539 := (= 0::int #536)
#540 := (or #539 #535)
#513 := (or #655 #540)
#514 := (iff #513 #533)
#519 := (iff #533 #533)
#520 := [rewrite]: #519
#532 := (iff #540 #542)
#525 := (or #542 false)
#530 := (iff #525 #542)
#531 := [rewrite]: #530
#526 := (iff #540 #525)
#524 := (iff #535 false)
#1 := true
#517 := (not true)
#522 := (iff #517 false)
#523 := [rewrite]: #522
#518 := (iff #535 #517)
#543 := (iff #534 true)
#516 := [rewrite]: #543
#411 := [monotonicity #516]: #518
#529 := [trans #411 #523]: #524
#541 := (iff #539 #542)
#537 := [rewrite]: #541
#527 := [monotonicity #537 #529]: #526
#528 := [trans #527 #531]: #532
#495 := [monotonicity #528]: #514
#515 := [trans #495 #520]: #514
#459 := [quant-inst]: #513
#521 := [mp #459 #515]: #533
#399 := [unit-resolution #521 #683]: #542
#360 := (= #302 #536)
#255 := (= #146 #171)
#30 := 2::int
#149 := (* 2::int #26)
#152 := (f3 #149)
#155 := (f4 #152)
#34 := 3::int
#161 := (+ 3::int #155)
#166 := (f3 #161)
#341 := (= #166 #171)
#332 := (not #341)
#593 := (f4 #166)
#560 := (= #593 0::int)
#403 := (= #593 #536)
#400 := [hypothesis]: #341
#392 := [monotonicity #400]: #403
#404 := [trans #392 #399]: #560
#395 := (not #560)
#552 := (<= #593 0::int)
#408 := (not #552)
#600 := (>= #155 0::int)
#307 := -1::int
#623 := (* -1::int #155)
#629 := (+ #149 #623)
#493 := (<= #629 0::int)
#470 := (= #629 0::int)
#614 := (>= #26 0::int)
#447 := (= #26 0::int)
#665 := (f3 #26)
#500 := (f4 #665)
#501 := (= #500 0::int)
#617 := (not #614)
#456 := [hypothesis]: #617
#511 := (or #501 #614)
#22 := (= #17 0::int)
#131 := (or #22 #83)
#684 := (forall (vars (?v0 int)) (:pat #677) #131)
#136 := (forall (vars (?v0 int)) #131)
#687 := (iff #136 #684)
#685 := (iff #131 #131)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#186 := (~ #136 #136)
#198 := (~ #131 #131)
#199 := [refl]: #198
#187 := [nnf-pos #199]: #186
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#139 := (iff #24 #136)
#102 := (= 0::int #17)
#108 := (not #21)
#109 := (or #108 #102)
#114 := (forall (vars (?v0 int)) #109)
#137 := (iff #114 #136)
#134 := (iff #109 #131)
#128 := (or #83 #22)
#132 := (iff #128 #131)
#133 := [rewrite]: #132
#129 := (iff #109 #128)
#126 := (iff #102 #22)
#127 := [rewrite]: #126
#124 := (iff #108 #83)
#119 := (not #84)
#122 := (iff #119 #83)
#123 := [rewrite]: #122
#120 := (iff #108 #119)
#117 := (iff #21 #84)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#125 := [trans #121 #123]: #124
#130 := [monotonicity #125 #127]: #129
#135 := [trans #130 #133]: #134
#138 := [quant-intro #135]: #137
#115 := (iff #24 #114)
#112 := (iff #23 #109)
#105 := (implies #21 #102)
#110 := (iff #105 #109)
#111 := [rewrite]: #110
#106 := (iff #23 #105)
#103 := (iff #22 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#113 := [trans #107 #111]: #112
#116 := [quant-intro #113]: #115
#140 := [trans #116 #138]: #139
#101 := [asserted]: #24
#141 := [mp #101 #140]: #136
#200 := [mp~ #141 #187]: #136
#689 := [mp #200 #688]: #684
#351 := (not #684)
#467 := (or #351 #501 #614)
#468 := (or #351 #511)
#474 := (iff #468 #467)
#475 := [rewrite]: #474
#473 := [quant-inst]: #468
#476 := [mp #473 #475]: #467
#457 := [unit-resolution #476 #689]: #511
#458 := [unit-resolution #457 #456]: #501
#461 := (= #26 #500)
#666 := (= f5 #665)
#8 := (:var 0 S2)
#9 := (f4 #8)
#669 := (pattern #9)
#10 := (f3 #9)
#58 := (= #8 #10)
#670 := (forall (vars (?v0 S2)) (:pat #669) #58)
#61 := (forall (vars (?v0 S2)) #58)
#671 := (iff #61 #670)
#673 := (iff #670 #670)
#674 := [rewrite]: #673
#672 := [rewrite]: #671
#675 := [trans #672 #674]: #671
#194 := (~ #61 #61)
#192 := (~ #58 #58)
#193 := [refl]: #192
#195 := [nnf-pos #193]: #194
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#62 := (iff #12 #61)
#59 := (iff #11 #58)
#60 := [rewrite]: #59
#63 := [quant-intro #60]: #62
#57 := [asserted]: #12
#66 := [mp #57 #63]: #61
#183 := [mp~ #66 #195]: #61
#676 := [mp #183 #675]: #670
#668 := (not #670)
#658 := (or #668 #666)
#317 := [quant-inst]: #658
#460 := [unit-resolution #317 #676]: #666
#462 := [monotonicity #460]: #461
#463 := [trans #462 #458]: #447
#464 := (not #447)
#465 := (or #464 #614)
#448 := [th-lemma]: #465
#466 := [unit-resolution #448 #456 #463]: false
#436 := [lemma #466]: #614
#618 := (or #470 #617)
#620 := (or #655 #470 #617)
#621 := (>= #149 0::int)
#622 := (not #621)
#627 := (= #149 #155)
#628 := (or #627 #622)
#449 := (or #655 #628)
#607 := (iff #449 #620)
#452 := (or #655 #618)
#608 := (iff #452 #620)
#609 := [rewrite]: #608
#605 := (iff #449 #452)
#619 := (iff #628 #618)
#611 := (iff #622 #617)
#615 := (iff #621 #614)
#616 := [rewrite]: #615
#612 := [monotonicity #616]: #611
#471 := (iff #627 #470)
#472 := [rewrite]: #471
#613 := [monotonicity #472 #612]: #619
#606 := [monotonicity #613]: #605
#610 := [trans #606 #609]: #607
#451 := [quant-inst]: #449
#492 := [mp #451 #610]: #620
#444 := [unit-resolution #492 #683]: #618
#440 := [unit-resolution #444 #436]: #470
#445 := (not #470)
#424 := (or #445 #493)
#427 := [th-lemma]: #424
#431 := [unit-resolution #427 #440]: #493
#435 := (not #493)
#438 := (or #600 #617 #435)
#443 := [th-lemma]: #438
#407 := [unit-resolution #443 #436 #431]: #600
#595 := -3::int
#584 := (* -1::int #593)
#594 := (+ #155 #584)
#558 := (<= #594 -3::int)
#596 := (= #594 -3::int)
#586 := (>= #155 -3::int)
#649 := (>= #26 -1::int)
#433 := (or #617 #649)
#434 := [th-lemma]: #433
#432 := [unit-resolution #434 #436]: #649
#651 := (not #649)
#423 := (or #586 #651 #435)
#426 := [th-lemma]: #423
#428 := [unit-resolution #426 #431 #432]: #586
#589 := (not #586)
#578 := (or #589 #596)
#567 := (or #655 #589 #596)
#604 := (>= #161 0::int)
#591 := (not #604)
#585 := (= #161 #593)
#582 := (or #585 #591)
#568 := (or #655 #582)
#554 := (iff #568 #567)
#571 := (or #655 #578)
#573 := (iff #571 #567)
#553 := [rewrite]: #573
#572 := (iff #568 #571)
#576 := (iff #582 #578)
#574 := (or #596 #589)
#579 := (iff #574 #578)
#580 := [rewrite]: #579
#575 := (iff #582 #574)
#583 := (iff #591 #589)
#587 := (iff #604 #586)
#588 := [rewrite]: #587
#590 := [monotonicity #588]: #583
#592 := (iff #585 #596)
#597 := [rewrite]: #592
#577 := [monotonicity #597 #590]: #575
#581 := [trans #577 #580]: #576
#569 := [monotonicity #581]: #572
#556 := [trans #569 #553]: #554
#570 := [quant-inst]: #568
#557 := [mp #570 #556]: #567
#429 := [unit-resolution #557 #683]: #578
#425 := [unit-resolution #429 #428]: #596
#430 := (not #596)
#420 := (or #430 #558)
#410 := [th-lemma]: #420
#412 := [unit-resolution #410 #425]: #558
#409 := (not #558)
#406 := (not #600)
#391 := (or #408 #406 #409)
#393 := [th-lemma]: #391
#394 := [unit-resolution #393 #412 #407]: #408
#396 := (or #395 #552)
#397 := [th-lemma]: #396
#398 := [unit-resolution #397 #394]: #395
#381 := [unit-resolution #398 #404]: false
#383 := [lemma #381]: #332
#254 := (= #146 #166)
#339 := (not #254)
#401 := (= #302 #593)
#390 := [hypothesis]: #254
#375 := [monotonicity #390]: #401
#385 := (not #401)
#439 := (+ #302 #584)
#285 := (>= #439 0::int)
#419 := (not #285)
#308 := (* -1::int #302)
#309 := (+ #26 #308)
#361 := (>= #309 -1::int)
#646 := (= #309 -1::int)
#654 := (or #646 #651)
#653 := (or #655 #646 #651)
#322 := (>= #143 0::int)
#659 := (not #322)
#644 := (= #143 #302)
#306 := (or #644 #659)
#656 := (or #655 #306)
#368 := (iff #656 #653)
#643 := (or #655 #654)
#366 := (iff #643 #653)
#367 := [rewrite]: #366
#350 := (iff #656 #643)
#293 := (iff #306 #654)
#288 := (iff #659 #651)
#650 := (iff #322 #649)
#645 := [rewrite]: #650
#652 := [monotonicity #645]: #288
#647 := (iff #644 #646)
#648 := [rewrite]: #647
#294 := [monotonicity #648 #652]: #293
#365 := [monotonicity #294]: #350
#261 := [trans #365 #367]: #368
#642 := [quant-inst]: #656
#638 := [mp #642 #261]: #653
#413 := [unit-resolution #638 #683]: #654
#416 := [unit-resolution #413 #432]: #646
#417 := (not #646)
#421 := (or #417 #361)
#414 := [th-lemma]: #421
#422 := [unit-resolution #414 #416]: #361
#415 := [hypothesis]: #285
#418 := [th-lemma #428 #415 #422 #412 #431]: false
#405 := [lemma #418]: #419
#386 := (or #385 #285)
#387 := [th-lemma]: #386
#382 := [unit-resolution #387 #405]: #385
#376 := [unit-resolution #382 #375]: false
#377 := [lemma #376]: #339
#357 := (or #254 #255 #341)
#340 := (not #255)
#343 := (and #339 #340 #332)
#344 := (not #343)
#174 := (distinct #146 #166 #171)
#177 := (not #174)
#37 := (- #26 #26)
#38 := (f3 #37)
#31 := (* #26 2::int)
#32 := (f3 #31)
#33 := (f4 #32)
#35 := (+ #33 3::int)
#36 := (f3 #35)
#28 := (+ #26 1::int)
#29 := (f3 #28)
#39 := (distinct #29 #36 #38)
#40 := (not #39)
#178 := (iff #40 #177)
#175 := (iff #39 #174)
#172 := (= #38 #171)
#169 := (= #37 0::int)
#170 := [rewrite]: #169
#173 := [monotonicity #170]: #172
#167 := (= #36 #166)
#164 := (= #35 #161)
#158 := (+ #155 3::int)
#162 := (= #158 #161)
#163 := [rewrite]: #162
#159 := (= #35 #158)
#156 := (= #33 #155)
#153 := (= #32 #152)
#150 := (= #31 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#165 := [trans #160 #163]: #164
#168 := [monotonicity #165]: #167
#147 := (= #29 #146)
#144 := (= #28 #143)
#145 := [rewrite]: #144
#148 := [monotonicity #145]: #147
#176 := [monotonicity #148 #168 #173]: #175
#179 := [monotonicity #176]: #178
#142 := [asserted]: #40
#182 := [mp #142 #179]: #177
#331 := (or #174 #344)
#664 := [def-axiom]: #331
#356 := [unit-resolution #664 #182]: #344
#319 := (or #343 #254 #255 #341)
#450 := [def-axiom]: #319
#348 := [unit-resolution #450 #356]: #357
#358 := [unit-resolution #348 #377 #383]: #255
#326 := [monotonicity #358]: #360
#328 := [trans #326 #399]: #362
#373 := (not #362)
#625 := (<= #302 0::int)
#369 := (not #625)
#639 := (<= #309 -1::int)
#379 := (or #417 #639)
#378 := [th-lemma]: #379
#380 := [unit-resolution #378 #416]: #639
#370 := (not #639)
#371 := (or #369 #617 #370)
#363 := [th-lemma]: #371
#372 := [unit-resolution #363 #380 #436]: #369
#364 := (or #373 #625)
#374 := [th-lemma]: #364
#355 := [unit-resolution #374 #372]: #373
[unit-resolution #355 #328]: false
unsat
75dd8d1e40b17d4d494dfbbca0b51228568d2c11 161 0
#2 := false
#13 := 0::int
decl f5 :: int
#25 := f5
#135 := -1::int
#136 := (* -1::int f5)
#159 := (>= f5 0::int)
#166 := (ite #159 f5 #136)
#653 := (* -1::int #166)
#650 := (+ #136 #653)
#647 := (<= #650 0::int)
#345 := (= #136 #166)
#160 := (not #159)
#654 := (+ f5 #653)
#655 := (<= #654 0::int)
#259 := (= f5 #166)
#656 := [hypothesis]: #159
#260 := (or #160 #259)
#346 := [def-axiom]: #260
#294 := [unit-resolution #346 #656]: #259
#657 := (not #259)
#659 := (or #657 #655)
#299 := [th-lemma]: #659
#300 := [unit-resolution #299 #294]: #655
#278 := (>= #166 0::int)
#351 := (not #278)
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
#171 := (f3 #166)
#174 := (f4 #171)
#177 := (= #166 #174)
#180 := (not #177)
#27 := (- f5)
#26 := (< f5 0::int)
#28 := (ite #26 #27 f5)
#29 := (f3 #28)
#30 := (f4 #29)
#31 := (= #30 #28)
#32 := (not #31)
#183 := (iff #32 #180)
#139 := (ite #26 #136 f5)
#142 := (f3 #139)
#145 := (f4 #142)
#151 := (= #139 #145)
#156 := (not #151)
#181 := (iff #156 #180)
#178 := (iff #151 #177)
#175 := (= #145 #174)
#172 := (= #142 #171)
#169 := (= #139 #166)
#163 := (ite #160 #136 f5)
#167 := (= #163 #166)
#168 := [rewrite]: #167
#164 := (= #139 #163)
#161 := (iff #26 #160)
#162 := [rewrite]: #161
#165 := [monotonicity #162]: #164
#170 := [trans #165 #168]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #170 #176]: #178
#182 := [monotonicity #179]: #181
#157 := (iff #32 #156)
#154 := (iff #31 #151)
#148 := (= #145 #139)
#152 := (iff #148 #151)
#153 := [rewrite]: #152
#149 := (iff #31 #148)
#140 := (= #28 #139)
#137 := (= #27 #136)
#138 := [rewrite]: #137
#141 := [monotonicity #138]: #140
#146 := (= #30 #145)
#143 := (= #29 #142)
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147 #141]: #149
#155 := [trans #150 #153]: #154
#158 := [monotonicity #155]: #157
#184 := [trans #158 #182]: #183
#134 := [asserted]: #32
#185 := [mp #134 #184]: #180
#14 := (:var 0 int)
#16 := (f3 #14)
#682 := (pattern #16)
#75 := (>= #14 0::int)
#76 := (not #75)
#17 := (f4 #16)
#57 := (= #14 #17)
#82 := (or #57 #76)
#683 := (forall (vars (?v0 int)) (:pat #682) #82)
#87 := (forall (vars (?v0 int)) #82)
#686 := (iff #87 #683)
#684 := (iff #82 #82)
#685 := [refl]: #684
#687 := [quant-intro #685]: #686
#189 := (~ #87 #87)
#186 := (~ #82 #82)
#201 := [refl]: #186
#190 := [nnf-pos #201]: #189
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#90 := (iff #20 #87)
#64 := (not #15)
#65 := (or #64 #57)
#70 := (forall (vars (?v0 int)) #65)
#88 := (iff #70 #87)
#85 := (iff #65 #82)
#79 := (or #76 #57)
#83 := (iff #79 #82)
#84 := [rewrite]: #83
#80 := (iff #65 #79)
#77 := (iff #64 #76)
#73 := (iff #15 #75)
#74 := [rewrite]: #73
#78 := [monotonicity #74]: #77
#81 := [monotonicity #78]: #80
#86 := [trans #81 #84]: #85
#89 := [quant-intro #86]: #88
#71 := (iff #20 #70)
#68 := (iff #19 #65)
#61 := (implies #15 #57)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #19 #61)
#59 := (iff #18 #57)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [quant-intro #69]: #71
#91 := [trans #72 #89]: #90
#56 := [asserted]: #20
#92 := [mp #56 #91]: #87
#202 := [mp~ #92 #190]: #87
#688 := [mp #202 #687]: #683
#455 := (not #683)
#662 := (or #455 #177 #351)
#666 := (or #177 #351)
#336 := (or #455 #666)
#669 := (iff #336 #662)
#670 := [rewrite]: #669
#337 := [quant-inst]: #336
#671 := [mp #337 #670]: #662
#660 := [unit-resolution #671 #688 #185]: #351
#658 := [th-lemma #656 #660 #300]: false
#661 := [lemma #658]: #160
#347 := (or #159 #345)
#338 := [def-axiom]: #347
#370 := [unit-resolution #338 #661]: #345
#371 := (not #345)
#372 := (or #371 #647)
#373 := [th-lemma]: #372
#266 := [unit-resolution #373 #370]: #647
#652 := (<= #166 0::int)
#643 := (or #652 #278)
#644 := [th-lemma]: #643
#366 := [unit-resolution #644 #660]: #652
[th-lemma #661 #366 #266]: false
unsat
c37debf59e8d6c8b243d5aaa6c9491c65a29d492 604 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f7 :: S2
#42 := f7
#43 := (f4 f7)
#41 := 4::int
#44 := (* 4::int #43)
#45 := (f3 #44)
#46 := (f4 #45)
#612 := (= #46 0::int)
#991 := (not #612)
#595 := (<= #46 0::int)
#986 := (not #595)
#27 := 1::int
#206 := (+ 1::int #46)
#209 := (f3 #206)
#582 := (f4 #209)
#518 := (<= #582 1::int)
#903 := (not #518)
decl f6 :: (-> S2 S2 S1)
#8 := (:var 0 S2)
#519 := (f6 #8 #209)
#490 := (pattern #519)
decl f1 :: S1
#4 := f1
#530 := (= f1 #519)
#496 := (not #530)
#498 := (= #8 #209)
#32 := (f3 1::int)
#33 := (= #8 #32)
#499 := (or #33 #498 #496)
#503 := (forall (vars (?v1 S2)) (:pat #490) #499)
#504 := (not #503)
#494 := (or #504 #518)
#480 := (not #494)
decl f5 :: (-> S2 S1)
#212 := (f5 #209)
#218 := (= f1 #212)
#507 := (not #218)
#483 := (or #507 #480)
#474 := (not #483)
decl ?v1!0 :: (-> S2 S2)
#533 := (?v1!0 #209)
#534 := (f6 #533 #209)
#544 := (= f1 #534)
#525 := (not #544)
#543 := (= #32 #533)
#542 := (= #209 #533)
#469 := (or #542 #543 #525)
#471 := (not #469)
#466 := (or #218 #471 #518)
#453 := (not #466)
#443 := (or #453 #474)
#442 := (not #443)
#9 := (f4 #8)
#839 := (pattern #9)
#25 := (f5 #8)
#887 := (pattern #25)
#258 := (?v1!0 #8)
#321 := (= #8 #258)
#318 := (= #32 #258)
#276 := (f6 #258 #8)
#277 := (= f1 #276)
#278 := (not #277)
#327 := (or #278 #318 #321)
#332 := (not #327)
#183 := (<= #9 1::int)
#156 := (= f1 #25)
#341 := (or #156 #183 #332)
#356 := (not #341)
#29 := (:var 1 S2)
#30 := (f6 #8 #29)
#860 := (pattern #30)
#159 := (= f1 #30)
#165 := (not #159)
#34 := (= #8 #29)
#187 := (or #33 #34 #165)
#861 := (forall (vars (?v1 S2)) (:pat #860) #187)
#866 := (not #861)
#869 := (or #183 #866)
#872 := (not #869)
#300 := (not #156)
#875 := (or #300 #872)
#878 := (not #875)
#881 := (or #878 #356)
#884 := (not #881)
#888 := (forall (vars (?v0 S2)) (:pat #887 #839) #884)
#190 := (forall (vars (?v1 S2)) #187)
#283 := (not #190)
#286 := (or #183 #283)
#287 := (not #286)
#263 := (or #300 #287)
#355 := (not #263)
#357 := (or #355 #356)
#358 := (not #357)
#363 := (forall (vars (?v0 S2)) #358)
#889 := (iff #363 #888)
#885 := (iff #358 #884)
#882 := (iff #357 #881)
#879 := (iff #355 #878)
#876 := (iff #263 #875)
#873 := (iff #287 #872)
#870 := (iff #286 #869)
#867 := (iff #283 #866)
#864 := (iff #190 #861)
#862 := (iff #187 #187)
#863 := [refl]: #862
#865 := [quant-intro #863]: #864
#868 := [monotonicity #865]: #867
#871 := [monotonicity #868]: #870
#874 := [monotonicity #871]: #873
#877 := [monotonicity #874]: #876
#880 := [monotonicity #877]: #879
#883 := [monotonicity #880]: #882
#886 := [monotonicity #883]: #885
#890 := [quant-intro #886]: #889
#184 := (not #183)
#193 := (and #184 #190)
#306 := (or #300 #193)
#346 := (and #306 #341)
#349 := (forall (vars (?v0 S2)) #346)
#364 := (iff #349 #363)
#361 := (iff #346 #358)
#262 := (and #263 #341)
#359 := (iff #262 #358)
#360 := [rewrite]: #359
#353 := (iff #346 #262)
#264 := (iff #306 #263)
#315 := (iff #193 #287)
#352 := [rewrite]: #315
#261 := [monotonicity #352]: #264
#354 := [monotonicity #261]: #353
#362 := [trans #354 #360]: #361
#365 := [quant-intro #362]: #364
#279 := (= #258 #8)
#280 := (= #258 #32)
#281 := (or #280 #279 #278)
#282 := (not #281)
#274 := (not #184)
#288 := (or #274 #282)
#305 := (or #156 #288)
#307 := (and #306 #305)
#310 := (forall (vars (?v0 S2)) #307)
#350 := (iff #310 #349)
#347 := (iff #307 #346)
#344 := (iff #305 #341)
#335 := (or #183 #332)
#338 := (or #156 #335)
#342 := (iff #338 #341)
#343 := [rewrite]: #342
#339 := (iff #305 #338)
#336 := (iff #288 #335)
#333 := (iff #282 #332)
#330 := (iff #281 #327)
#324 := (or #318 #321 #278)
#328 := (iff #324 #327)
#329 := [rewrite]: #328
#325 := (iff #281 #324)
#322 := (iff #279 #321)
#323 := [rewrite]: #322
#319 := (iff #280 #318)
#320 := [rewrite]: #319
#326 := [monotonicity #320 #323]: #325
#331 := [trans #326 #329]: #330
#334 := [monotonicity #331]: #333
#316 := (iff #274 #183)
#317 := [rewrite]: #316
#337 := [monotonicity #317 #334]: #336
#340 := [monotonicity #337]: #339
#345 := [trans #340 #343]: #344
#348 := [monotonicity #345]: #347
#351 := [quant-intro #348]: #350
#196 := (iff #156 #193)
#199 := (forall (vars (?v0 S2)) #196)
#311 := (~ #199 #310)
#308 := (~ #196 #307)
#298 := (~ #193 #193)
#296 := (~ #190 #190)
#294 := (~ #187 #187)
#295 := [refl]: #294
#297 := [nnf-pos #295]: #296
#292 := (~ #184 #184)
#293 := [refl]: #292
#299 := [monotonicity #293 #297]: #298
#289 := (not #193)
#290 := (~ #289 #288)
#284 := (~ #283 #282)
#285 := [sk]: #284
#275 := (~ #274 #274)
#257 := [refl]: #275
#291 := [nnf-neg #257 #285]: #290
#303 := (~ #156 #156)
#304 := [refl]: #303
#301 := (~ #300 #300)
#302 := [refl]: #301
#309 := [nnf-pos #302 #304 #291 #299]: #308
#312 := [nnf-pos #309]: #311
#35 := (or #33 #34)
#31 := (= #30 f1)
#36 := (implies #31 #35)
#37 := (forall (vars (?v1 S2)) #36)
#28 := (< 1::int #9)
#38 := (and #28 #37)
#26 := (= #25 f1)
#39 := (iff #26 #38)
#40 := (forall (vars (?v0 S2)) #39)
#202 := (iff #40 #199)
#166 := (or #35 #165)
#171 := (forall (vars (?v1 S2)) #166)
#174 := (and #28 #171)
#177 := (iff #156 #174)
#180 := (forall (vars (?v0 S2)) #177)
#200 := (iff #180 #199)
#197 := (iff #177 #196)
#194 := (iff #174 #193)
#191 := (iff #171 #190)
#188 := (iff #166 #187)
#189 := [rewrite]: #188
#192 := [quant-intro #189]: #191
#185 := (iff #28 #184)
#186 := [rewrite]: #185
#195 := [monotonicity #186 #192]: #194
#198 := [monotonicity #195]: #197
#201 := [quant-intro #198]: #200
#181 := (iff #40 #180)
#178 := (iff #39 #177)
#175 := (iff #38 #174)
#172 := (iff #37 #171)
#169 := (iff #36 #166)
#162 := (implies #159 #35)
#167 := (iff #162 #166)
#168 := [rewrite]: #167
#163 := (iff #36 #162)
#160 := (iff #31 #159)
#161 := [rewrite]: #160
#164 := [monotonicity #161]: #163
#170 := [trans #164 #168]: #169
#173 := [quant-intro #170]: #172
#176 := [monotonicity #173]: #175
#157 := (iff #26 #156)
#158 := [rewrite]: #157
#179 := [monotonicity #158 #176]: #178
#182 := [quant-intro #179]: #181
#203 := [trans #182 #201]: #202
#155 := [asserted]: #40
#204 := [mp #155 #203]: #199
#313 := [mp~ #204 #312]: #310
#314 := [mp #313 #351]: #349
#366 := [mp #314 #365]: #363
#891 := [mp #366 #890]: #888
#799 := (not #888)
#432 := (or #799 #442)
#526 := (or #525 #543 #542)
#527 := (not #526)
#528 := (or #218 #518 #527)
#529 := (not #528)
#505 := (or #518 #504)
#506 := (not #505)
#497 := (or #507 #506)
#508 := (not #497)
#491 := (or #508 #529)
#493 := (not #491)
#433 := (or #799 #493)
#437 := (iff #433 #432)
#434 := (iff #432 #432)
#439 := [rewrite]: #434
#450 := (iff #493 #442)
#448 := (iff #491 #443)
#452 := (or #474 #453)
#444 := (iff #452 #443)
#447 := [rewrite]: #444
#457 := (iff #491 #452)
#454 := (iff #529 #453)
#446 := (iff #528 #466)
#462 := (or #218 #518 #471)
#441 := (iff #462 #466)
#445 := [rewrite]: #441
#465 := (iff #528 #462)
#459 := (iff #527 #471)
#470 := (iff #526 #469)
#468 := [rewrite]: #470
#461 := [monotonicity #468]: #459
#460 := [monotonicity #461]: #465
#451 := [trans #460 #445]: #446
#456 := [monotonicity #451]: #454
#486 := (iff #508 #474)
#484 := (iff #497 #483)
#481 := (iff #506 #480)
#473 := (iff #505 #494)
#475 := [rewrite]: #473
#482 := [monotonicity #475]: #481
#485 := [monotonicity #482]: #484
#467 := [monotonicity #485]: #486
#440 := [monotonicity #467 #456]: #457
#449 := [trans #440 #447]: #448
#435 := [monotonicity #449]: #450
#438 := [monotonicity #435]: #437
#426 := [trans #438 #439]: #437
#436 := [quant-inst]: #433
#428 := [mp #436 #426]: #432
#962 := [unit-resolution #428 #891]: #442
#922 := (or #443 #483)
#923 := [def-axiom]: #922
#963 := [unit-resolution #923 #962]: #483
#966 := (or #474 #480)
#233 := (>= #43 1::int)
#234 := (not #233)
#240 := (and #218 #234)
#51 := (<= 1::int #43)
#52 := (not #51)
#47 := (+ #46 1::int)
#48 := (f3 #47)
#49 := (f5 #48)
#50 := (= #49 f1)
#53 := (and #50 #52)
#245 := (iff #53 #240)
#226 := (and #52 #218)
#243 := (iff #226 #240)
#237 := (and #234 #218)
#241 := (iff #237 #240)
#242 := [rewrite]: #241
#238 := (iff #226 #237)
#235 := (iff #52 #234)
#231 := (iff #51 #233)
#232 := [rewrite]: #231
#236 := [monotonicity #232]: #235
#239 := [monotonicity #236]: #238
#244 := [trans #239 #242]: #243
#229 := (iff #53 #226)
#223 := (and #218 #52)
#227 := (iff #223 #226)
#228 := [rewrite]: #227
#224 := (iff #53 #223)
#221 := (iff #50 #218)
#215 := (= #212 f1)
#219 := (iff #215 #218)
#220 := [rewrite]: #219
#216 := (iff #50 #215)
#213 := (= #49 #212)
#210 := (= #48 #209)
#207 := (= #47 #206)
#208 := [rewrite]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#222 := [trans #217 #220]: #221
#225 := [monotonicity #222]: #224
#230 := [trans #225 #228]: #229
#246 := [trans #230 #244]: #245
#205 := [asserted]: #53
#247 := [mp #205 #246]: #240
#248 := [and-elim #247]: #218
#918 := (or #474 #507 #480)
#919 := [def-axiom]: #918
#967 := [unit-resolution #919 #248]: #966
#968 := [unit-resolution #967 #963]: #480
#910 := (or #494 #903)
#911 := [def-axiom]: #910
#969 := [unit-resolution #911 #968]: #903
#647 := -1::int
#587 := (* -1::int #582)
#591 := (+ #46 #587)
#551 := (>= #591 -1::int)
#584 := (= #591 -1::int)
#588 := (>= #46 -1::int)
#553 := (= #582 0::int)
#974 := (not #553)
#540 := (<= #582 0::int)
#970 := (not #540)
#971 := (or #970 #518)
#972 := [th-lemma]: #971
#973 := [unit-resolution #972 #969]: #970
#975 := (or #974 #540)
#976 := [th-lemma]: #975
#977 := [unit-resolution #976 #973]: #974
#555 := (or #553 #588)
#14 := (:var 0 int)
#16 := (f3 #14)
#847 := (pattern #16)
#96 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#144 := (or #22 #96)
#854 := (forall (vars (?v0 int)) (:pat #847) #144)
#149 := (forall (vars (?v0 int)) #144)
#857 := (iff #149 #854)
#855 := (iff #144 #144)
#856 := [refl]: #855
#858 := [quant-intro #856]: #857
#255 := (~ #149 #149)
#271 := (~ #144 #144)
#272 := [refl]: #271
#256 := [nnf-pos #272]: #255
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#152 := (iff #24 #149)
#115 := (= 0::int #17)
#121 := (not #21)
#122 := (or #121 #115)
#127 := (forall (vars (?v0 int)) #122)
#150 := (iff #127 #149)
#147 := (iff #122 #144)
#141 := (or #96 #22)
#145 := (iff #141 #144)
#146 := [rewrite]: #145
#142 := (iff #122 #141)
#139 := (iff #115 #22)
#140 := [rewrite]: #139
#137 := (iff #121 #96)
#97 := (not #96)
#132 := (not #97)
#135 := (iff #132 #96)
#136 := [rewrite]: #135
#133 := (iff #121 #132)
#130 := (iff #21 #97)
#131 := [rewrite]: #130
#134 := [monotonicity #131]: #133
#138 := [trans #134 #136]: #137
#143 := [monotonicity #138 #140]: #142
#148 := [trans #143 #146]: #147
#151 := [quant-intro #148]: #150
#128 := (iff #24 #127)
#125 := (iff #23 #122)
#118 := (implies #21 #115)
#123 := (iff #118 #122)
#124 := [rewrite]: #123
#119 := (iff #23 #118)
#116 := (iff #22 #115)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#126 := [trans #120 #124]: #125
#129 := [quant-intro #126]: #128
#153 := [trans #129 #151]: #152
#114 := [asserted]: #24
#154 := [mp #114 #153]: #149
#273 := [mp~ #154 #256]: #149
#859 := [mp #273 #858]: #854
#615 := (not #854)
#558 := (or #615 #553 #588)
#590 := (>= #206 0::int)
#554 := (or #553 #590)
#559 := (or #615 #554)
#548 := (iff #559 #558)
#560 := (or #615 #555)
#547 := (iff #560 #558)
#549 := [rewrite]: #547
#545 := (iff #559 #560)
#556 := (iff #554 #555)
#589 := (iff #590 #588)
#575 := [rewrite]: #589
#557 := [monotonicity #575]: #556
#546 := [monotonicity #557]: #545
#550 := [trans #546 #549]: #548
#552 := [quant-inst]: #559
#539 := [mp #552 #550]: #558
#978 := [unit-resolution #539 #859]: #555
#979 := [unit-resolution #978 #977]: #588
#577 := (not #588)
#579 := (or #584 #577)
#78 := (= #14 #17)
#103 := (or #78 #97)
#848 := (forall (vars (?v0 int)) (:pat #847) #103)
#108 := (forall (vars (?v0 int)) #103)
#851 := (iff #108 #848)
#849 := (iff #103 #103)
#850 := [refl]: #849
#852 := [quant-intro #850]: #851
#253 := (~ #108 #108)
#250 := (~ #103 #103)
#269 := [refl]: #250
#254 := [nnf-pos #269]: #253
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#111 := (iff #20 #108)
#85 := (not #15)
#86 := (or #85 #78)
#91 := (forall (vars (?v0 int)) #86)
#109 := (iff #91 #108)
#106 := (iff #86 #103)
#100 := (or #97 #78)
#104 := (iff #100 #103)
#105 := [rewrite]: #104
#101 := (iff #86 #100)
#98 := (iff #85 #97)
#94 := (iff #15 #96)
#95 := [rewrite]: #94
#99 := [monotonicity #95]: #98
#102 := [monotonicity #99]: #101
#107 := [trans #102 #105]: #106
#110 := [quant-intro #107]: #109
#92 := (iff #20 #91)
#89 := (iff #19 #86)
#82 := (implies #15 #78)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #19 #82)
#80 := (iff #18 #78)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#93 := [quant-intro #90]: #92
#112 := [trans #93 #110]: #111
#77 := [asserted]: #20
#113 := [mp #77 #112]: #108
#270 := [mp~ #113 #254]: #108
#853 := [mp #270 #852]: #848
#628 := (not #848)
#564 := (or #628 #584 #577)
#580 := (not #590)
#583 := (= #206 #582)
#586 := (or #583 #580)
#565 := (or #628 #586)
#572 := (iff #565 #564)
#567 := (or #628 #579)
#570 := (iff #567 #564)
#571 := [rewrite]: #570
#568 := (iff #565 #567)
#561 := (iff #586 #579)
#578 := (iff #580 #577)
#576 := [monotonicity #575]: #578
#592 := (iff #583 #584)
#585 := [rewrite]: #592
#563 := [monotonicity #585 #576]: #561
#569 := [monotonicity #563]: #568
#573 := [trans #569 #571]: #572
#566 := [quant-inst]: #565
#562 := [mp #566 #573]: #564
#980 := [unit-resolution #562 #853]: #579
#981 := [unit-resolution #980 #979]: #584
#982 := (not #584)
#983 := (or #982 #551)
#984 := [th-lemma]: #983
#985 := [unit-resolution #984 #981]: #551
#987 := (not #551)
#988 := (or #986 #518 #987)
#989 := [th-lemma]: #988
#990 := [unit-resolution #989 #985 #969]: #986
#992 := (or #991 #595)
#993 := [th-lemma]: #992
#994 := [unit-resolution #993 #990]: #991
#653 := (>= #43 0::int)
#655 := (not #653)
#648 := (* -1::int #46)
#649 := (+ #44 #648)
#650 := (= #649 0::int)
#999 := (not #650)
#611 := (>= #649 0::int)
#995 := (not #611)
#249 := [and-elim #247]: #234
#996 := (or #995 #233 #518 #987)
#997 := [th-lemma]: #996
#998 := [unit-resolution #997 #249 #985 #969]: #995
#1000 := (or #999 #611)
#1001 := [th-lemma]: #1000
#1002 := [unit-resolution #1001 #998]: #999
#624 := (or #650 #655)
#630 := (or #628 #650 #655)
#643 := (>= #44 0::int)
#644 := (not #643)
#645 := (= #44 #46)
#646 := (or #645 #644)
#631 := (or #628 #646)
#606 := (iff #631 #630)
#633 := (or #628 #624)
#618 := (iff #633 #630)
#636 := [rewrite]: #618
#634 := (iff #631 #633)
#626 := (iff #646 #624)
#616 := (iff #644 #655)
#654 := (iff #643 #653)
#639 := [rewrite]: #654
#617 := [monotonicity #639]: #616
#651 := (iff #645 #650)
#652 := [rewrite]: #651
#627 := [monotonicity #652 #617]: #626
#635 := [monotonicity #627]: #634
#607 := [trans #635 #636]: #606
#632 := [quant-inst]: #631
#608 := [mp #632 #607]: #630
#1003 := [unit-resolution #608 #853]: #624
#1004 := [unit-resolution #1003 #1002]: #655
#455 := (or #612 #653)
#594 := (or #615 #612 #653)
#613 := (or #612 #643)
#597 := (or #615 #613)
#596 := (iff #597 #594)
#603 := (or #615 #455)
#605 := (iff #603 #594)
#593 := [rewrite]: #605
#604 := (iff #597 #603)
#614 := (iff #613 #455)
#610 := [monotonicity #639]: #614
#602 := [monotonicity #610]: #604
#598 := [trans #602 #593]: #596
#601 := [quant-inst]: #597
#599 := [mp #601 #598]: #594
#1005 := [unit-resolution #599 #859]: #455
[unit-resolution #1005 #1004 #994]: false
unsat
8add4983d79a2879b8718ea3b1ded6de7ef7d64c 61 0
#2 := false
decl f7 :: S3
#12 := f7
decl f5 :: S3
#8 := f5
#14 := (= f5 f7)
decl f3 :: (-> S2 S3)
decl f4 :: (-> S3 S4 S2)
decl f6 :: S4
#9 := f6
#10 := (f4 f5 f6)
#11 := (f3 #10)
#13 := (= #11 f7)
#49 := (not #13)
#50 := (or #49 #14)
#53 := (not #50)
#15 := (implies #13 #14)
#16 := (not #15)
#54 := (iff #16 #53)
#51 := (iff #15 #50)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#48 := [asserted]: #16
#58 := [mp #48 #55]: #53
#56 := [not-or-elim #58]: #13
#157 := (= f5 #11)
#18 := (:var 0 S4)
#17 := (:var 1 S3)
#19 := (f4 #17 #18)
#575 := (pattern #19)
#20 := (f3 #19)
#61 := (= #17 #20)
#576 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #575) #61)
#64 := (forall (vars (?v0 S3) (?v1 S4)) #61)
#579 := (iff #64 #576)
#577 := (iff #61 #61)
#578 := [refl]: #577
#580 := [quant-intro #578]: #579
#99 := (~ #64 #64)
#97 := (~ #61 #61)
#98 := [refl]: #97
#100 := [nnf-pos #98]: #99
#21 := (= #20 #17)
#22 := (forall (vars (?v0 S3) (?v1 S4)) #21)
#65 := (iff #22 #64)
#62 := (iff #21 #61)
#63 := [rewrite]: #62
#66 := [quant-intro #63]: #65
#60 := [asserted]: #22
#69 := [mp #60 #66]: #64
#89 := [mp~ #69 #100]: #64
#581 := [mp #89 #580]: #576
#245 := (not #576)
#159 := (or #245 #157)
#246 := [quant-inst]: #159
#247 := [unit-resolution #246 #581]: #157
#251 := [trans #247 #56]: #14
#57 := (not #14)
#59 := [not-or-elim #58]: #57
[unit-resolution #59 #251]: false
unsat
6a6cf93b65ddcaf1b125eb57f4a626298f29e47d 116 0
#2 := false
decl f10 :: (-> S5 S3)
decl f7 :: S5
#13 := f7
#18 := (f10 f7)
decl f9 :: (-> S2 S3)
decl f3 :: S2
#8 := f3
#17 := (f9 f3)
#19 := (= #17 #18)
decl f8 :: (-> S4 S3 S5)
decl f5 :: S3
#9 := f5
decl f6 :: S4
#10 := f6
#14 := (f8 f6 f5)
#219 := (f10 #14)
#275 := (= #219 #18)
#273 := (= #18 #219)
#15 := (= f7 #14)
decl f4 :: (-> S3 S4 S2)
#11 := (f4 f5 f6)
#12 := (= f3 #11)
#16 := (and #12 #15)
#69 := (not #16)
#70 := (or #69 #19)
#73 := (not #70)
#20 := (implies #16 #19)
#21 := (not #20)
#74 := (iff #21 #73)
#71 := (iff #20 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#68 := [asserted]: #21
#78 := [mp #68 #75]: #73
#76 := [not-or-elim #78]: #16
#79 := [and-elim #76]: #15
#274 := [monotonicity #79]: #273
#613 := [symm #274]: #275
#616 := (= #17 #219)
#306 := (= f5 #219)
#23 := (:var 0 S3)
#22 := (:var 1 S4)
#24 := (f8 #22 #23)
#636 := (pattern #24)
#34 := (f10 #24)
#98 := (= #23 #34)
#650 := (forall (vars (?v0 S4) (?v1 S3)) (:pat #636) #98)
#102 := (forall (vars (?v0 S4) (?v1 S3)) #98)
#653 := (iff #102 #650)
#651 := (iff #98 #98)
#652 := [refl]: #651
#654 := [quant-intro #652]: #653
#141 := (~ #102 #102)
#133 := (~ #98 #98)
#134 := [refl]: #133
#142 := [nnf-pos #134]: #141
#35 := (= #34 #23)
#36 := (forall (vars (?v0 S4) (?v1 S3)) #35)
#103 := (iff #36 #102)
#100 := (iff #35 #98)
#101 := [rewrite]: #100
#104 := [quant-intro #101]: #103
#97 := [asserted]: #36
#107 := [mp #97 #104]: #102
#132 := [mp~ #107 #142]: #102
#655 := [mp #132 #654]: #650
#238 := (not #650)
#311 := (or #238 #306)
#308 := [quant-inst]: #311
#625 := [unit-resolution #308 #655]: #306
#614 := (= #17 f5)
#309 := (f9 #11)
#611 := (= #309 f5)
#310 := (= f5 #309)
#29 := (:var 0 S4)
#28 := (:var 1 S3)
#30 := (f4 #28 #29)
#643 := (pattern #30)
#31 := (f9 #30)
#90 := (= #28 #31)
#644 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #643) #90)
#94 := (forall (vars (?v0 S3) (?v1 S4)) #90)
#647 := (iff #94 #644)
#645 := (iff #90 #90)
#646 := [refl]: #645
#648 := [quant-intro #646]: #647
#139 := (~ #94 #94)
#138 := (~ #90 #90)
#135 := [refl]: #138
#140 := [nnf-pos #135]: #139
#32 := (= #31 #28)
#33 := (forall (vars (?v0 S3) (?v1 S4)) #32)
#95 := (iff #33 #94)
#92 := (iff #32 #90)
#93 := [rewrite]: #92
#96 := [quant-intro #93]: #95
#89 := [asserted]: #33
#99 := [mp #89 #96]: #94
#136 := [mp~ #99 #140]: #94
#649 := [mp #136 #648]: #644
#628 := (not #644)
#630 := (or #628 #310)
#285 := [quant-inst]: #630
#283 := [unit-resolution #285 #649]: #310
#272 := [symm #283]: #611
#627 := (= #17 #309)
#77 := [and-elim #76]: #12
#268 := [monotonicity #77]: #627
#615 := [trans #268 #272]: #614
#617 := [trans #615 #625]: #616
#612 := [trans #617 #613]: #19
#80 := (not #19)
#81 := [not-or-elim #78]: #80
[unit-resolution #81 #612]: false
unsat
c4ff195222fb458c30d04a5dbddcd6f66862822e 192 0
#2 := false
decl f6 :: (-> S3 S2 S4)
decl f3 :: S2
#8 := f3
decl f8 :: S3
#16 := f8
#22 := (f6 f8 f3)
decl f7 :: (-> S3 S2 S4 S3)
decl f10 :: S4
#19 := f10
decl f5 :: S2
#12 := f5
decl f9 :: S4
#17 := f9
decl f4 :: S2
#9 := f4
#18 := (f7 f8 f4 f9)
#20 := (f7 #18 f5 f10)
#21 := (f6 #20 f3)
#23 := (= #21 #22)
#173 := (f6 #18 f4)
#570 := (f7 f8 f4 #173)
#538 := (f6 #570 f3)
#539 := (= #538 #22)
#542 := (= #22 #538)
#533 := (= #173 #538)
#10 := (= f3 f4)
#374 := (ite #10 #533 #542)
#37 := (:var 0 S2)
#35 := (:var 1 S4)
#34 := (:var 2 S2)
#33 := (:var 3 S3)
#36 := (f7 #33 #34 #35)
#38 := (f6 #36 #37)
#599 := (pattern #38)
#40 := (f6 #33 #37)
#100 := (= #38 #40)
#99 := (= #35 #38)
#82 := (= #34 #37)
#107 := (ite #82 #99 #100)
#600 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) (:pat #599) #107)
#95 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #107)
#603 := (iff #95 #600)
#601 := (iff #107 #107)
#602 := [refl]: #601
#604 := [quant-intro #602]: #603
#86 := (ite #82 #35 #40)
#89 := (= #38 #86)
#92 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #89)
#113 := (iff #92 #95)
#108 := (iff #89 #107)
#98 := [rewrite]: #108
#114 := [quant-intro #98]: #113
#105 := (~ #92 #92)
#104 := (~ #89 #89)
#101 := [refl]: #104
#106 := [nnf-pos #101]: #105
#39 := (= #37 #34)
#41 := (ite #39 #35 #40)
#42 := (= #38 #41)
#43 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #42)
#93 := (iff #43 #92)
#90 := (iff #42 #89)
#87 := (= #41 #86)
#84 := (iff #39 #82)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#91 := [monotonicity #88]: #90
#94 := [quant-intro #91]: #93
#81 := [asserted]: #43
#97 := [mp #81 #94]: #92
#102 := [mp~ #97 #106]: #92
#115 := [mp #102 #114]: #95
#605 := [mp #115 #604]: #600
#251 := (not #600)
#530 := (or #251 #374)
#534 := (= f4 f3)
#540 := (ite #534 #533 #539)
#531 := (or #251 #540)
#532 := (iff #531 #530)
#415 := (iff #530 #530)
#416 := [rewrite]: #415
#527 := (iff #540 #374)
#371 := (iff #539 #542)
#373 := [rewrite]: #371
#541 := (iff #534 #10)
#535 := [rewrite]: #541
#528 := [monotonicity #535 #373]: #527
#414 := [monotonicity #528]: #532
#375 := [trans #414 #416]: #532
#529 := [quant-inst]: #531
#523 := [mp #529 #375]: #530
#526 := [unit-resolution #523 #605]: #374
#425 := (not #374)
#513 := (or #425 #542)
#11 := (not #10)
#13 := (= f3 f5)
#14 := (not #13)
#15 := (and #11 #14)
#61 := (not #15)
#62 := (or #61 #23)
#65 := (not #62)
#24 := (implies #15 #23)
#25 := (not #24)
#66 := (iff #25 #65)
#63 := (iff #24 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#60 := [asserted]: #25
#70 := [mp #60 #67]: #65
#68 := [not-or-elim #70]: #15
#69 := [and-elim #68]: #11
#524 := (or #425 #10 #542)
#409 := [def-axiom]: #524
#515 := [unit-resolution #409 #69]: #513
#507 := [unit-resolution #515 #526]: #542
#509 := [symm #507]: #539
#510 := (= #21 #538)
#264 := (f6 #18 f3)
#519 := (= #264 #538)
#518 := (= #538 #264)
#525 := (= #570 #18)
#431 := (= #173 f9)
#260 := (= f9 #173)
#28 := (:var 0 S4)
#27 := (:var 1 S2)
#26 := (:var 2 S3)
#29 := (f7 #26 #27 #28)
#591 := (pattern #29)
#30 := (f6 #29 #27)
#75 := (= #28 #30)
#593 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) (:pat #591) #75)
#78 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #75)
#592 := (iff #78 #593)
#595 := (iff #593 #593)
#596 := [rewrite]: #595
#594 := [rewrite]: #592
#597 := [trans #594 #596]: #592
#111 := (~ #78 #78)
#109 := (~ #75 #75)
#110 := [refl]: #109
#112 := [nnf-pos #110]: #111
#31 := (= #30 #28)
#32 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #31)
#79 := (iff #32 #78)
#76 := (iff #31 #75)
#77 := [rewrite]: #76
#80 := [quant-intro #77]: #79
#74 := [asserted]: #32
#83 := [mp #74 #80]: #78
#103 := [mp~ #83 #112]: #78
#598 := [mp #103 #597]: #593
#175 := (not #593)
#262 := (or #175 #260)
#253 := [quant-inst]: #262
#430 := [unit-resolution #253 #598]: #260
#432 := [symm #430]: #431
#522 := [monotonicity #432]: #525
#514 := [monotonicity #522]: #518
#508 := [symm #514]: #519
#265 := (= #21 #264)
#263 := (= f10 #21)
#240 := (ite #13 #263 #265)
#252 := (or #251 #240)
#267 := (= f5 f3)
#246 := (ite #267 #263 #265)
#586 := (or #251 #246)
#588 := (iff #586 #252)
#584 := (iff #252 #252)
#590 := [rewrite]: #584
#372 := (iff #246 #240)
#583 := (iff #267 #13)
#585 := [rewrite]: #583
#579 := [monotonicity #585]: #372
#589 := [monotonicity #579]: #588
#580 := [trans #589 #590]: #588
#587 := [quant-inst]: #586
#238 := [mp #587 #580]: #252
#504 := [unit-resolution #238 #605]: #240
#243 := (not #240)
#506 := (or #243 #265)
#71 := [and-elim #68]: #14
#582 := (or #243 #13 #265)
#223 := [def-axiom]: #582
#516 := [unit-resolution #223 #71]: #506
#517 := [unit-resolution #516 #504]: #265
#511 := [trans #517 #508]: #510
#505 := [trans #511 #509]: #23
#72 := (not #23)
#73 := [not-or-elim #70]: #72
[unit-resolution #73 #505]: false
unsat
2dc4b9dba54c10e431adb8ebd743c805e8784c37 80 0
#2 := false
decl f6 :: (-> S2 S3 S1)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#12 := (f6 f4 f5)
decl f1 :: S1
#4 := f1
#39 := (= f1 #12)
decl f3 :: (-> S2 S3 S1)
#10 := (f3 f4 f5)
#36 := (= f1 #10)
#49 := (iff #36 #39)
#74 := (not #49)
#95 := (iff #74 false)
#1 := true
#90 := (not true)
#93 := (iff #90 false)
#94 := [rewrite]: #93
#91 := (iff #74 #90)
#88 := (iff #49 true)
#83 := (iff false false)
#86 := (iff #83 true)
#87 := [rewrite]: #86
#84 := (iff #49 #83)
#81 := (iff #39 false)
#72 := (not #39)
#61 := (or #36 #39 #49)
#64 := (not #61)
#13 := (= #12 f1)
#11 := (= #10 f1)
#16 := (or #11 #13)
#14 := (and #13 true)
#15 := (iff #11 #14)
#17 := (or #15 #16)
#18 := (not #17)
#67 := (iff #18 #64)
#52 := (or #36 #39)
#55 := (or #49 #52)
#58 := (not #55)
#65 := (iff #58 #64)
#62 := (iff #55 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#53 := (iff #16 #52)
#40 := (iff #13 #39)
#41 := [rewrite]: #40
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#54 := [monotonicity #38 #41]: #53
#50 := (iff #15 #49)
#47 := (iff #14 #39)
#42 := (and #39 true)
#45 := (iff #42 #39)
#46 := [rewrite]: #45
#43 := (iff #14 #42)
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#51 := [monotonicity #38 #48]: #50
#57 := [monotonicity #51 #54]: #56
#60 := [monotonicity #57]: #59
#68 := [trans #60 #66]: #67
#35 := [asserted]: #18
#69 := [mp #35 #68]: #64
#73 := [not-or-elim #69]: #72
#82 := [iff-false #73]: #81
#79 := (iff #36 false)
#70 := (not #36)
#71 := [not-or-elim #69]: #70
#80 := [iff-false #71]: #79
#85 := [monotonicity #80 #82]: #84
#89 := [trans #85 #87]: #88
#92 := [monotonicity #89]: #91
#96 := [trans #92 #94]: #95
#75 := [not-or-elim #69]: #74
[mp #75 #96]: false
unsat
39345d35925f930054a812342385e19283e673d4 128 0
#2 := false
decl f3 :: (-> S2 S2)
#15 := (:var 0 S2)
#16 := (f3 #15)
#577 := (pattern #16)
#55 := (= #15 #16)
#578 := (forall (vars (?v0 S2)) (:pat #577) #55)
#59 := (forall (vars (?v0 S2)) #55)
#581 := (iff #59 #578)
#579 := (iff #55 #55)
#580 := [refl]: #579
#582 := [quant-intro #580]: #581
#88 := (~ #59 #59)
#86 := (~ #55 #55)
#87 := [refl]: #86
#89 := [nnf-pos #87]: #88
#17 := (= #16 #15)
#18 := (forall (vars (?v0 S2)) #17)
#60 := (iff #18 #59)
#57 := (iff #17 #55)
#58 := [rewrite]: #57
#61 := [quant-intro #58]: #60
#54 := [asserted]: #18
#64 := [mp #54 #61]: #59
#80 := [mp~ #64 #89]: #59
#583 := [mp #80 #582]: #578
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#42 := (= f4 #9)
#90 := (not #42)
decl f5 :: (-> S1 S1)
decl f1 :: S1
#4 := f1
#11 := (f5 f1)
#45 := (= f1 #11)
#19 := (:var 0 S1)
#20 := (f5 #19)
#584 := (pattern #20)
#67 := (= f1 #19)
#63 := (= f1 #20)
#70 := (iff #63 #67)
#585 := (forall (vars (?v0 S1)) (:pat #584) #70)
#73 := (forall (vars (?v0 S1)) #70)
#588 := (iff #73 #585)
#586 := (iff #70 #70)
#587 := [refl]: #586
#589 := [quant-intro #587]: #588
#82 := (~ #73 #73)
#81 := (~ #70 #70)
#79 := [refl]: #81
#83 := [nnf-pos #79]: #82
#22 := (= #19 f1)
#21 := (= #20 f1)
#23 := (iff #21 #22)
#24 := (forall (vars (?v0 S1)) #23)
#74 := (iff #24 #73)
#71 := (iff #23 #70)
#68 := (iff #22 #67)
#69 := [rewrite]: #68
#65 := (iff #21 #63)
#66 := [rewrite]: #65
#72 := [monotonicity #66 #69]: #71
#75 := [quant-intro #72]: #74
#62 := [asserted]: #24
#78 := [mp #62 #75]: #73
#76 := [mp~ #78 #83]: #73
#590 := [mp #76 #589]: #585
#91 := (not #45)
#572 := [hypothesis]: #91
#249 := (not #585)
#253 := (or #249 #45)
#159 := (= f1 f1)
#246 := (iff #45 #159)
#232 := (or #249 #246)
#571 := (iff #232 #253)
#358 := (iff #253 #253)
#565 := [rewrite]: #358
#179 := (iff #246 #45)
#1 := true
#161 := (iff #45 true)
#250 := (iff #161 #45)
#251 := [rewrite]: #250
#248 := (iff #246 #161)
#160 := (iff #159 true)
#247 := [rewrite]: #160
#239 := [monotonicity #247]: #248
#252 := [trans #239 #251]: #179
#226 := [monotonicity #252]: #571
#237 := [trans #226 #565]: #571
#569 := [quant-inst]: #232
#238 := [mp #569 #237]: #253
#573 := [unit-resolution #238 #572 #590]: false
#574 := [lemma #573]: #45
#84 := (or #90 #91)
#48 := (and #42 #45)
#51 := (not #48)
#99 := (iff #51 #84)
#85 := (not #84)
#94 := (not #85)
#97 := (iff #94 #84)
#98 := [rewrite]: #97
#95 := (iff #51 #94)
#92 := (iff #48 #85)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#100 := [trans #96 #98]: #99
#12 := (= #11 f1)
#10 := (= #9 f4)
#13 := (and #10 #12)
#14 := (not #13)
#52 := (iff #14 #51)
#49 := (iff #13 #48)
#46 := (iff #12 #45)
#47 := [rewrite]: #46
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#50 := [monotonicity #44 #47]: #49
#53 := [monotonicity #50]: #52
#41 := [asserted]: #14
#56 := [mp #41 #53]: #51
#101 := [mp #56 #100]: #84
#575 := [unit-resolution #101 #574]: #90
#576 := (not #578)
#566 := (or #576 #42)
#224 := [quant-inst]: #566
[unit-resolution #224 #575 #583]: false
unsat
c66a2580a73c3d496a195fadc270ed658f997968 469 0
#2 := false
decl f8 :: (-> S2 S4 S4)
decl f9 :: S4
#34 := f9
decl f5 :: (-> int S2)
#38 := 2::int
#39 := (f5 2::int)
#40 := (f8 #39 f9)
#12 := 1::int
#33 := (f5 1::int)
#41 := (f8 #33 #40)
decl f7 :: (-> S3 S4 S4)
#35 := (f8 #33 f9)
#20 := 0::int
#32 := (f5 0::int)
#36 := (f8 #32 #35)
decl f4 :: S3
#8 := f4
#37 := (f7 f4 #36)
#42 := (= #37 #41)
#519 := (f7 f4 #35)
decl f3 :: (-> S3 S2 S2)
#521 := (f3 f4 #32)
#522 := (f8 #521 #519)
#812 := (= #522 #41)
#810 := (= #41 #522)
#773 := (= #40 #519)
#598 := (f7 f4 f9)
#599 := (f3 f4 #33)
#584 := (f8 #599 #598)
#771 := (= #584 #519)
#585 := (= #519 #584)
#50 := (:var 0 S4)
#48 := (:var 2 S3)
#54 := (f7 #48 #50)
#49 := (:var 1 S2)
#53 := (f3 #48 #49)
#55 := (f8 #53 #54)
#722 := (pattern #55)
#51 := (f8 #49 #50)
#52 := (f7 #48 #51)
#721 := (pattern #52)
#56 := (= #52 #55)
#723 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) (:pat #721 #722) #56)
#57 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #56)
#726 := (iff #57 #723)
#724 := (iff #56 #56)
#725 := [refl]: #724
#727 := [quant-intro #725]: #726
#196 := (~ #57 #57)
#195 := (~ #56 #56)
#214 := [refl]: #195
#197 := [nnf-pos #214]: #196
#181 := [asserted]: #57
#215 := [mp~ #181 #197]: #57
#728 := [mp #215 #727]: #723
#525 := (not #723)
#589 := (or #525 #585)
#586 := [quant-inst]: #589
#731 := [unit-resolution #586 #728]: #585
#772 := [symm #731]: #771
#769 := (= #40 #584)
#397 := (= f9 #598)
#44 := (:var 0 S3)
#45 := (f7 #44 f9)
#714 := (pattern #45)
#175 := (= f9 #45)
#715 := (forall (vars (?v0 S3)) (:pat #714) #175)
#178 := (forall (vars (?v0 S3)) #175)
#718 := (iff #178 #715)
#716 := (iff #175 #175)
#717 := [refl]: #716
#719 := [quant-intro #717]: #718
#192 := (~ #178 #178)
#212 := (~ #175 #175)
#213 := [refl]: #212
#193 := [nnf-pos #213]: #192
#46 := (= #45 f9)
#47 := (forall (vars (?v0 S3)) #46)
#179 := (iff #47 #178)
#176 := (iff #46 #175)
#177 := [rewrite]: #176
#180 := [quant-intro #177]: #179
#174 := [asserted]: #47
#183 := [mp #174 #180]: #178
#194 := [mp~ #183 #193]: #178
#720 := [mp #194 #719]: #715
#388 := (not #715)
#380 := (or #388 #397)
#389 := [quant-inst]: #380
#732 := [unit-resolution #389 #720]: #397
#767 := (= #39 #599)
decl f6 :: (-> S2 int)
#305 := (f6 #33)
#617 := (+ 1::int #305)
#621 := (f5 #617)
#763 := (= #621 #599)
#601 := (= #599 #621)
#9 := (:var 0 S2)
#11 := (f6 #9)
#687 := (pattern #11)
#10 := (f3 f4 #9)
#686 := (pattern #10)
#75 := (+ 1::int #11)
#78 := (f5 #75)
#81 := (= #10 #78)
#688 := (forall (vars (?v0 S2)) (:pat #686 #687) #81)
#84 := (forall (vars (?v0 S2)) #81)
#691 := (iff #84 #688)
#689 := (iff #81 #81)
#690 := [refl]: #689
#692 := [quant-intro #690]: #691
#202 := (~ #84 #84)
#200 := (~ #81 #81)
#201 := [refl]: #200
#203 := [nnf-pos #201]: #202
#13 := (+ #11 1::int)
#14 := (f5 #13)
#15 := (= #10 #14)
#16 := (forall (vars (?v0 S2)) #15)
#85 := (iff #16 #84)
#82 := (iff #15 #81)
#79 := (= #14 #78)
#76 := (= #13 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#86 := [quant-intro #83]: #85
#74 := [asserted]: #16
#89 := [mp #74 #86]: #84
#185 := [mp~ #89 #203]: #84
#693 := [mp #185 #692]: #688
#608 := (not #688)
#613 := (or #608 #601)
#609 := [quant-inst]: #613
#735 := [unit-resolution #609 #693]: #601
#764 := [symm #735]: #763
#765 := (= #39 #621)
#507 := (f6 #621)
#313 := (f5 #507)
#292 := (= #313 #621)
#17 := (f5 #11)
#88 := (= #9 #17)
#694 := (forall (vars (?v0 S2)) (:pat #687) #88)
#92 := (forall (vars (?v0 S2)) #88)
#695 := (iff #92 #694)
#697 := (iff #694 #694)
#698 := [rewrite]: #697
#696 := [rewrite]: #695
#699 := [trans #696 #698]: #695
#186 := (~ #92 #92)
#182 := (~ #88 #88)
#204 := [refl]: #182
#187 := [nnf-pos #204]: #186
#18 := (= #17 #9)
#19 := (forall (vars (?v0 S2)) #18)
#93 := (iff #19 #92)
#90 := (iff #18 #88)
#91 := [rewrite]: #90
#94 := [quant-intro #91]: #93
#87 := [asserted]: #19
#97 := [mp #87 #94]: #92
#205 := [mp~ #97 #187]: #92
#700 := [mp #205 #699]: #694
#354 := (not #694)
#300 := (or #354 #292)
#288 := (= #621 #313)
#301 := (or #354 #288)
#299 := (iff #301 #300)
#287 := (iff #300 #300)
#290 := [rewrite]: #287
#293 := (iff #288 #292)
#298 := [rewrite]: #293
#304 := [monotonicity #298]: #299
#291 := [trans #304 #290]: #299
#303 := [quant-inst]: #301
#294 := [mp #303 #291]: #300
#736 := [unit-resolution #294 #700]: #292
#761 := (= #39 #313)
#759 := (= 2::int #507)
#757 := (= #507 2::int)
#579 := -1::int
#517 := (* -1::int #507)
#518 := (+ #305 #517)
#480 := (<= #518 -1::int)
#528 := (= #518 -1::int)
#484 := (>= #305 -1::int)
#570 := (>= #305 1::int)
#672 := (= #305 1::int)
#21 := (:var 0 int)
#23 := (f5 #21)
#701 := (pattern #23)
#114 := (>= #21 0::int)
#115 := (not #114)
#24 := (f6 #23)
#96 := (= #21 #24)
#121 := (or #96 #115)
#702 := (forall (vars (?v0 int)) (:pat #701) #121)
#126 := (forall (vars (?v0 int)) #121)
#705 := (iff #126 #702)
#703 := (iff #121 #121)
#704 := [refl]: #703
#706 := [quant-intro #704]: #705
#188 := (~ #126 #126)
#206 := (~ #121 #121)
#207 := [refl]: #206
#189 := [nnf-pos #207]: #188
#25 := (= #24 #21)
#22 := (<= 0::int #21)
#26 := (implies #22 #25)
#27 := (forall (vars (?v0 int)) #26)
#129 := (iff #27 #126)
#103 := (not #22)
#104 := (or #103 #96)
#109 := (forall (vars (?v0 int)) #104)
#127 := (iff #109 #126)
#124 := (iff #104 #121)
#118 := (or #115 #96)
#122 := (iff #118 #121)
#123 := [rewrite]: #122
#119 := (iff #104 #118)
#116 := (iff #103 #115)
#112 := (iff #22 #114)
#113 := [rewrite]: #112
#117 := [monotonicity #113]: #116
#120 := [monotonicity #117]: #119
#125 := [trans #120 #123]: #124
#128 := [quant-intro #125]: #127
#110 := (iff #27 #109)
#107 := (iff #26 #104)
#100 := (implies #22 #96)
#105 := (iff #100 #104)
#106 := [rewrite]: #105
#101 := (iff #26 #100)
#98 := (iff #25 #96)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#108 := [trans #102 #106]: #107
#111 := [quant-intro #108]: #110
#130 := [trans #111 #128]: #129
#95 := [asserted]: #27
#131 := [mp #95 #130]: #126
#208 := [mp~ #131 #189]: #126
#707 := [mp #208 #706]: #702
#685 := (not #702)
#379 := (or #685 #672)
#662 := (>= 1::int 0::int)
#668 := (not #662)
#669 := (= 1::int #305)
#671 := (or #669 #668)
#653 := (or #685 #671)
#654 := (iff #653 #379)
#368 := (iff #379 #379)
#369 := [rewrite]: #368
#656 := (iff #671 #672)
#383 := (or #672 false)
#278 := (iff #383 #672)
#655 := [rewrite]: #278
#384 := (iff #671 #383)
#367 := (iff #668 false)
#1 := true
#363 := (not true)
#680 := (iff #363 false)
#336 := [rewrite]: #680
#659 := (iff #668 #363)
#670 := (iff #662 true)
#673 := [rewrite]: #670
#660 := [monotonicity #673]: #659
#382 := [trans #660 #336]: #367
#310 := (iff #669 #672)
#311 := [rewrite]: #310
#385 := [monotonicity #311 #382]: #384
#378 := [trans #385 #655]: #656
#658 := [monotonicity #378]: #654
#370 := [trans #658 #369]: #654
#657 := [quant-inst]: #653
#371 := [mp #657 #370]: #379
#737 := [unit-resolution #371 #707]: #672
#738 := (not #672)
#739 := (or #738 #570)
#740 := [th-lemma]: #739
#741 := [unit-resolution #740 #737]: #570
#742 := (not #570)
#743 := (or #742 #484)
#744 := [th-lemma]: #743
#745 := [unit-resolution #744 #741]: #484
#491 := (not #484)
#486 := (or #685 #491 #528)
#503 := (>= #617 0::int)
#505 := (not #503)
#514 := (= #617 #507)
#516 := (or #514 #505)
#502 := (or #685 #516)
#477 := (iff #502 #486)
#497 := (or #491 #528)
#464 := (or #685 #497)
#474 := (iff #464 #486)
#475 := [rewrite]: #474
#471 := (iff #502 #464)
#500 := (iff #516 #497)
#494 := (or #528 #491)
#498 := (iff #494 #497)
#499 := [rewrite]: #498
#495 := (iff #516 #494)
#492 := (iff #505 #491)
#485 := (iff #503 #484)
#490 := [rewrite]: #485
#493 := [monotonicity #490]: #492
#508 := (iff #514 #528)
#529 := [rewrite]: #508
#496 := [monotonicity #529 #493]: #495
#501 := [trans #496 #499]: #500
#473 := [monotonicity #501]: #471
#478 := [trans #473 #475]: #477
#463 := [quant-inst]: #502
#479 := [mp #463 #478]: #486
#746 := [unit-resolution #479 #707 #745]: #528
#747 := (not #528)
#748 := (or #747 #480)
#749 := [th-lemma]: #748
#750 := [unit-resolution #749 #746]: #480
#481 := (>= #518 -1::int)
#751 := (or #747 #481)
#752 := [th-lemma]: #751
#753 := [unit-resolution #752 #746]: #481
#590 := (<= #305 1::int)
#754 := (or #738 #590)
#755 := [th-lemma]: #754
#756 := [unit-resolution #755 #737]: #590
#758 := [th-lemma #741 #756 #753 #750]: #757
#760 := [symm #758]: #759
#762 := [monotonicity #760]: #761
#766 := [trans #762 #736]: #765
#768 := [trans #766 #764]: #767
#770 := [monotonicity #768 #732]: #769
#774 := [trans #770 #772]: #773
#807 := (= #33 #521)
#272 := (f6 #32)
#523 := (+ 1::int #272)
#524 := (f5 #523)
#803 := (= #524 #521)
#620 := (= #521 #524)
#610 := (or #608 #620)
#602 := [quant-inst]: #610
#775 := [unit-resolution #602 #693]: #620
#804 := [symm #775]: #803
#805 := (= #33 #524)
#576 := (f6 #524)
#337 := (f5 #576)
#351 := (= #337 #524)
#344 := (or #354 #351)
#350 := (= #524 #337)
#355 := (or #354 #350)
#340 := (iff #355 #344)
#320 := (iff #344 #344)
#322 := [rewrite]: #320
#352 := (iff #350 #351)
#353 := [rewrite]: #352
#341 := [monotonicity #353]: #340
#327 := [trans #341 #322]: #340
#338 := [quant-inst]: #355
#328 := [mp #338 #327]: #344
#776 := [unit-resolution #328 #700]: #351
#801 := (= #33 #337)
#799 := (= 1::int #576)
#797 := (= #576 1::int)
#580 := (* -1::int #576)
#581 := (+ #272 #580)
#541 := (<= #581 -1::int)
#582 := (= #581 -1::int)
#561 := (>= #272 -1::int)
#588 := (>= #272 0::int)
#361 := (= #272 0::int)
#675 := (or #685 #361)
#271 := (>= 0::int 0::int)
#356 := (not #271)
#357 := (= 0::int #272)
#358 := (or #357 #356)
#334 := (or #685 #358)
#676 := (iff #334 #675)
#677 := (iff #675 #675)
#319 := [rewrite]: #677
#684 := (iff #358 #361)
#347 := (or #361 false)
#682 := (iff #347 #361)
#683 := [rewrite]: #682
#348 := (iff #358 #347)
#467 := (iff #356 false)
#342 := (iff #356 #363)
#362 := (iff #271 true)
#359 := [rewrite]: #362
#678 := [monotonicity #359]: #342
#674 := [trans #678 #336]: #467
#349 := (iff #357 #361)
#360 := [rewrite]: #349
#681 := [monotonicity #360 #674]: #348
#679 := [trans #681 #683]: #684
#335 := [monotonicity #679]: #676
#661 := [trans #335 #319]: #676
#339 := [quant-inst]: #334
#323 := [mp #339 #661]: #675
#777 := [unit-resolution #323 #707]: #361
#778 := (not #361)
#779 := (or #778 #588)
#780 := [th-lemma]: #779
#781 := [unit-resolution #780 #777]: #588
#782 := (not #588)
#783 := (or #782 #561)
#784 := [th-lemma]: #783
#785 := [unit-resolution #784 #781]: #561
#565 := (not #561)
#557 := (or #685 #565 #582)
#574 := (>= #523 0::int)
#575 := (not #574)
#577 := (= #523 #576)
#578 := (or #577 #575)
#558 := (or #685 #578)
#428 := (iff #558 #557)
#555 := (or #565 #582)
#554 := (or #685 #555)
#534 := (iff #554 #557)
#535 := [rewrite]: #534
#560 := (iff #558 #554)
#553 := (iff #578 #555)
#568 := (or #582 #565)
#551 := (iff #568 #555)
#552 := [rewrite]: #551
#563 := (iff #578 #568)
#566 := (iff #575 #565)
#562 := (iff #574 #561)
#564 := [rewrite]: #562
#567 := [monotonicity #564]: #566
#572 := (iff #577 #582)
#583 := [rewrite]: #572
#569 := [monotonicity #583 #567]: #563
#556 := [trans #569 #552]: #553
#533 := [monotonicity #556]: #560
#539 := [trans #533 #535]: #428
#559 := [quant-inst]: #558
#540 := [mp #559 #539]: #557
#786 := [unit-resolution #540 #707 #785]: #582
#787 := (not #582)
#788 := (or #787 #541)
#789 := [th-lemma]: #788
#790 := [unit-resolution #789 #786]: #541
#546 := (>= #581 -1::int)
#791 := (or #787 #546)
#792 := [th-lemma]: #791
#793 := [unit-resolution #792 #786]: #546
#587 := (<= #272 0::int)
#794 := (or #778 #587)
#795 := [th-lemma]: #794
#796 := [unit-resolution #795 #777]: #587
#798 := [th-lemma #781 #796 #793 #790]: #797
#800 := [symm #798]: #799
#802 := [monotonicity #800]: #801
#806 := [trans #802 #776]: #805
#808 := [trans #806 #804]: #807
#811 := [monotonicity #808 #774]: #810
#813 := [symm #811]: #812
#515 := (= #37 #522)
#526 := (or #525 #515)
#527 := [quant-inst]: #526
#809 := [unit-resolution #527 #728]: #515
#814 := [trans #809 #813]: #42
#43 := (not #42)
#173 := [asserted]: #43
[unit-resolution #173 #814]: false
unsat
4cc658eed58c39b67c9bb50c6dd977ba3d6d31a0 38 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (not #11)
#13 := (or #11 #12)
#14 := (not #13)
#53 := (iff #14 false)
#1 := true
#48 := (not true)
#51 := (iff #48 false)
#52 := [rewrite]: #51
#49 := (iff #14 #48)
#46 := (iff #13 true)
#32 := (= f1 #9)
#35 := (forall (vars (?v0 S2)) #32)
#38 := (not #35)
#41 := (or #35 #38)
#44 := (iff #41 true)
#45 := [rewrite]: #44
#42 := (iff #13 #41)
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#33 := (iff #10 #32)
#34 := [rewrite]: #33
#37 := [quant-intro #34]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #37 #40]: #42
#47 := [trans #43 #45]: #46
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#31 := [asserted]: #14
[mp #31 #54]: false
unsat
8134ded6ddb01de87deb72c99e279ab6f9bebab8 366 0
#2 := false
decl f3 :: (-> int S2)
#41 := 6::int
#42 := (f3 6::int)
decl f5 :: (-> S2 S2)
decl f4 :: (-> S2 int)
#34 := 4::int
#35 := (f3 4::int)
#36 := (f5 #35)
#37 := (f4 #36)
#38 := (* 4::int #37)
#39 := (f3 #38)
#40 := (f5 #39)
#43 := (= #40 #42)
#481 := (f5 #42)
#408 := (= #481 #42)
#536 := (= #42 #481)
#625 := (f4 #42)
#147 := -10::int
#518 := (+ -10::int #625)
#477 := (f3 #518)
#508 := (f5 #477)
#510 := (= #481 #508)
#26 := 10::int
#512 := (>= #625 10::int)
#519 := (ite #512 #510 #536)
#8 := (:var 0 S2)
#25 := (f5 #8)
#712 := (pattern #25)
#9 := (f4 #8)
#691 := (pattern #9)
#214 := (= #8 #25)
#148 := (+ -10::int #9)
#151 := (f3 #148)
#154 := (f5 #151)
#213 := (= #25 #154)
#168 := (>= #9 10::int)
#197 := (ite #168 #213 #214)
#713 := (forall (vars (?v0 S2)) (:pat #691 #712) #197)
#200 := (forall (vars (?v0 S2)) #197)
#716 := (iff #200 #713)
#714 := (iff #197 #197)
#715 := [refl]: #714
#717 := [quant-intro #715]: #716
#173 := (ite #168 #154 #8)
#178 := (= #25 #173)
#181 := (forall (vars (?v0 S2)) #178)
#215 := (iff #181 #200)
#198 := (iff #178 #197)
#199 := [rewrite]: #198
#216 := [quant-intro #199]: #215
#195 := (~ #181 #181)
#210 := (~ #178 #178)
#211 := [refl]: #210
#196 := [nnf-pos #211]: #195
#28 := (- #9 10::int)
#29 := (f3 #28)
#30 := (f5 #29)
#27 := (< #9 10::int)
#31 := (ite #27 #8 #30)
#32 := (= #25 #31)
#33 := (forall (vars (?v0 S2)) #32)
#184 := (iff #33 #181)
#157 := (ite #27 #8 #154)
#160 := (= #25 #157)
#163 := (forall (vars (?v0 S2)) #160)
#182 := (iff #163 #181)
#179 := (iff #160 #178)
#176 := (= #157 #173)
#166 := (not #168)
#170 := (ite #166 #8 #154)
#174 := (= #170 #173)
#175 := [rewrite]: #174
#171 := (= #157 #170)
#167 := (iff #27 #166)
#169 := [rewrite]: #167
#172 := [monotonicity #169]: #171
#177 := [trans #172 #175]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#164 := (iff #33 #163)
#161 := (iff #32 #160)
#158 := (= #31 #157)
#155 := (= #30 #154)
#152 := (= #29 #151)
#149 := (= #28 #148)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#185 := [trans #165 #183]: #184
#146 := [asserted]: #33
#186 := [mp #146 #185]: #181
#212 := [mp~ #186 #196]: #181
#217 := [mp #212 #216]: #200
#718 := [mp #217 #717]: #713
#341 := (not #713)
#523 := (or #341 #519)
#533 := [quant-inst]: #523
#482 := [unit-resolution #533 #718]: #519
#534 := (not #512)
#503 := (<= #625 6::int)
#615 := (= #625 6::int)
#14 := (:var 0 int)
#16 := (f3 #14)
#699 := (pattern #16)
#13 := 0::int
#87 := (>= #14 0::int)
#88 := (not #87)
#17 := (f4 #16)
#69 := (= #14 #17)
#94 := (or #69 #88)
#700 := (forall (vars (?v0 int)) (:pat #699) #94)
#99 := (forall (vars (?v0 int)) #94)
#703 := (iff #99 #700)
#701 := (iff #94 #94)
#702 := [refl]: #701
#704 := [quant-intro #702]: #703
#191 := (~ #99 #99)
#188 := (~ #94 #94)
#205 := [refl]: #188
#192 := [nnf-pos #205]: #191
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#102 := (iff #20 #99)
#76 := (not #15)
#77 := (or #76 #69)
#82 := (forall (vars (?v0 int)) #77)
#100 := (iff #82 #99)
#97 := (iff #77 #94)
#91 := (or #88 #69)
#95 := (iff #91 #94)
#96 := [rewrite]: #95
#92 := (iff #77 #91)
#89 := (iff #76 #88)
#85 := (iff #15 #87)
#86 := [rewrite]: #85
#90 := [monotonicity #86]: #89
#93 := [monotonicity #90]: #92
#98 := [trans #93 #96]: #97
#101 := [quant-intro #98]: #100
#83 := (iff #20 #82)
#80 := (iff #19 #77)
#73 := (implies #15 #69)
#78 := (iff #73 #77)
#79 := [rewrite]: #78
#74 := (iff #19 #73)
#71 := (iff #18 #69)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#81 := [trans #75 #79]: #80
#84 := [quant-intro #81]: #83
#103 := [trans #84 #101]: #102
#68 := [asserted]: #20
#104 := [mp #68 #103]: #99
#206 := [mp~ #104 #192]: #99
#705 := [mp #206 #704]: #700
#678 := (not #700)
#596 := (or #678 #615)
#531 := (>= 6::int 0::int)
#532 := (not #531)
#622 := (= 6::int #625)
#626 := (or #622 #532)
#597 := (or #678 #626)
#600 := (iff #597 #596)
#602 := (iff #596 #596)
#598 := [rewrite]: #602
#605 := (iff #626 #615)
#619 := (or #615 false)
#610 := (iff #619 #615)
#611 := [rewrite]: #610
#608 := (iff #626 #619)
#618 := (iff #532 false)
#1 := true
#668 := (not true)
#671 := (iff #668 false)
#672 := [rewrite]: #671
#616 := (iff #532 #668)
#604 := (iff #531 true)
#606 := [rewrite]: #604
#617 := [monotonicity #606]: #616
#614 := [trans #617 #672]: #618
#613 := (iff #622 #615)
#607 := [rewrite]: #613
#609 := [monotonicity #607 #614]: #608
#612 := [trans #609 #611]: #605
#601 := [monotonicity #612]: #600
#603 := [trans #601 #598]: #600
#599 := [quant-inst]: #597
#589 := [mp #599 #603]: #596
#483 := [unit-resolution #589 #705]: #615
#458 := (not #615)
#459 := (or #458 #503)
#460 := [th-lemma]: #459
#461 := [unit-resolution #460 #483]: #503
#463 := (not #503)
#464 := (or #463 #534)
#465 := [th-lemma]: #464
#307 := [unit-resolution #465 #461]: #534
#513 := (not #519)
#495 := (or #513 #512 #536)
#496 := [def-axiom]: #495
#466 := [unit-resolution #496 #307 #482]: #536
#409 := [symm #466]: #408
#410 := (= #40 #481)
#654 := (f4 #39)
#587 := (+ -10::int #654)
#558 := (f3 #587)
#561 := (f5 #558)
#406 := (= #561 #481)
#422 := (= #558 #42)
#420 := (= #587 6::int)
#340 := (f4 #35)
#652 := -1::int
#507 := (* -1::int #340)
#468 := (+ #37 #507)
#469 := (<= #468 0::int)
#491 := (= #37 #340)
#450 := (= #36 #35)
#579 := (= #35 #36)
#580 := (+ -10::int #340)
#581 := (f3 #580)
#582 := (f5 #581)
#583 := (= #36 #582)
#584 := (>= #340 10::int)
#585 := (ite #584 #583 #579)
#577 := (or #341 #585)
#588 := [quant-inst]: #577
#462 := [unit-resolution #588 #718]: #585
#567 := (not #584)
#559 := (<= #340 4::int)
#329 := (= #340 4::int)
#664 := (or #678 #329)
#683 := (>= 4::int 0::int)
#685 := (not #683)
#682 := (= 4::int #340)
#324 := (or #682 #685)
#665 := (or #678 #324)
#387 := (iff #665 #664)
#389 := (iff #664 #664)
#390 := [rewrite]: #389
#677 := (iff #324 #329)
#310 := (or #329 false)
#315 := (iff #310 #329)
#316 := [rewrite]: #315
#674 := (iff #324 #310)
#667 := (iff #685 false)
#669 := (iff #685 #668)
#330 := (iff #683 true)
#331 := [rewrite]: #330
#670 := [monotonicity #331]: #669
#673 := [trans #670 #672]: #667
#666 := (iff #682 #329)
#328 := [rewrite]: #666
#676 := [monotonicity #328 #673]: #674
#675 := [trans #676 #316]: #677
#388 := [monotonicity #675]: #387
#282 := [trans #388 #390]: #387
#372 := [quant-inst]: #665
#660 := [mp #372 #282]: #664
#467 := [unit-resolution #660 #705]: #329
#446 := (not #329)
#449 := (or #446 #559)
#453 := [th-lemma]: #449
#455 := [unit-resolution #453 #467]: #559
#456 := (not #559)
#454 := (or #456 #567)
#457 := [th-lemma]: #454
#445 := [unit-resolution #457 #455]: #567
#566 := (not #585)
#571 := (or #566 #584 #579)
#572 := [def-axiom]: #571
#448 := [unit-resolution #572 #445 #462]: #579
#451 := [symm #448]: #450
#447 := [monotonicity #451]: #491
#452 := (not #491)
#442 := (or #452 #469)
#432 := [th-lemma]: #442
#434 := [unit-resolution #432 #447]: #469
#476 := (>= #468 0::int)
#435 := (or #452 #476)
#438 := [th-lemma]: #435
#439 := [unit-resolution #438 #447]: #476
#565 := (>= #340 4::int)
#443 := (or #446 #565)
#436 := [th-lemma]: #443
#444 := [unit-resolution #436 #467]: #565
#656 := (* -1::int #654)
#653 := (+ #38 #656)
#630 := (<= #653 0::int)
#657 := (= #653 0::int)
#648 := (>= #37 0::int)
#440 := (not #476)
#437 := (not #565)
#441 := (or #648 #437 #440)
#427 := [th-lemma]: #441
#429 := [unit-resolution #427 #444 #439]: #648
#649 := (not #648)
#494 := (or #649 #657)
#633 := (or #678 #649 #657)
#375 := (>= #38 0::int)
#376 := (not #375)
#655 := (= #38 #654)
#369 := (or #655 #376)
#634 := (or #678 #369)
#474 := (iff #634 #633)
#641 := (or #678 #494)
#471 := (iff #641 #633)
#473 := [rewrite]: #471
#635 := (iff #634 #641)
#638 := (iff #369 #494)
#651 := (or #657 #649)
#636 := (iff #651 #494)
#637 := [rewrite]: #636
#492 := (iff #369 #651)
#650 := (iff #376 #649)
#643 := (iff #375 #648)
#644 := [rewrite]: #643
#645 := [monotonicity #644]: #650
#646 := (iff #655 #657)
#647 := [rewrite]: #646
#493 := [monotonicity #647 #645]: #492
#639 := [trans #493 #637]: #638
#642 := [monotonicity #639]: #635
#627 := [trans #642 #473]: #474
#640 := [quant-inst]: #634
#628 := [mp #640 #627]: #633
#430 := [unit-resolution #628 #705]: #494
#428 := [unit-resolution #430 #429]: #657
#431 := (not #657)
#413 := (or #431 #630)
#415 := [th-lemma]: #413
#416 := [unit-resolution #415 #428]: #630
#631 := (>= #653 0::int)
#417 := (or #431 #631)
#418 := [th-lemma]: #417
#419 := [unit-resolution #418 #428]: #631
#421 := [th-lemma #419 #416 #444 #455 #439 #434]: #420
#423 := [monotonicity #421]: #422
#407 := [monotonicity #423]: #406
#562 := (= #40 #561)
#586 := (= #39 #40)
#563 := (>= #654 10::int)
#564 := (ite #563 #562 #586)
#538 := (or #341 #564)
#539 := [quant-inst]: #538
#424 := [unit-resolution #539 #718]: #564
#425 := (not #630)
#414 := (or #563 #425 #437 #440)
#426 := [th-lemma]: #414
#403 := [unit-resolution #426 #416 #444 #439]: #563
#433 := (not #563)
#540 := (not #564)
#544 := (or #540 #433 #562)
#545 := [def-axiom]: #544
#405 := [unit-resolution #545 #403 #424]: #562
#411 := [trans #405 #407]: #410
#404 := [trans #411 #409]: #43
#44 := (not #43)
#187 := [asserted]: #44
[unit-resolution #187 #404]: false
unsat
2a228f77dfa0e1f9c335db511955697c625e5b3e 1271 0
#2 := false
decl f6 :: (-> int int int)
#12 := 2::int
decl f14 :: int
#84 := f14
#89 := (f6 f14 2::int)
decl f10 :: (-> S4 S5 int)
decl f11 :: (-> S3 S5 S5)
decl f13 :: S5
#82 := f13
decl f4 :: S3
#8 := f4
#86 := (f11 f4 f13)
decl f12 :: S4
#81 := f12
#87 := (f10 f12 #86)
#88 := (f6 #87 2::int)
#90 := (= #88 #89)
#83 := (f10 f12 f13)
#876 := (f6 #83 2::int)
#616 := (= #876 #89)
#85 := (= #83 f14)
decl f9 :: (-> int int int)
#124 := -1::int
#351 := (* -1::int #87)
#352 := (+ f14 #351)
#355 := (f9 #352 2::int)
decl f8 :: S3
#17 := f8
#91 := (f11 f8 f13)
#92 := (f10 f12 #91)
#358 := (= #92 #355)
#361 := (not #358)
#367 := (not #90)
#368 := (or #367 #361)
#26 := 0::int
#1324 := (>= #355 0::int)
#611 := (= #355 0::int)
#337 := -2::int
#935 := (* -1::int f14)
#932 := (+ #935 #87)
#922 := (div #932 -2::int)
#929 := (* -1::int #922)
#771 := (+ #355 #929)
#915 := (= #771 0::int)
#963 := (div #352 2::int)
#969 := (* -1::int #963)
#959 := (+ #355 #969)
#619 := (= #959 0::int)
#960 := (<= #352 0::int)
#654 := (not #960)
#604 := (>= #352 0::int)
#939 := (not #604)
#934 := (or #939 #654)
#918 := (ite #934 #619 #915)
#948 := (= #352 0::int)
#919 := (ite #948 #611 #918)
#24 := (:var 0 int)
#23 := (:var 1 int)
#25 := (f9 #23 #24)
#985 := (pattern #25)
#128 := (* -1::int #24)
#125 := (* -1::int #23)
#131 := (div #125 #128)
#472 := (* -1::int #131)
#473 := (+ #25 #472)
#474 := (= #473 0::int)
#36 := (div #23 #24)
#469 := (* -1::int #36)
#470 := (+ #25 #469)
#471 := (= #470 0::int)
#150 := (<= #24 0::int)
#146 := (<= #23 0::int)
#427 := (or #146 #150)
#428 := (not #427)
#157 := (>= #23 0::int)
#398 := (or #150 #157)
#399 := (not #398)
#434 := (or #399 #428)
#475 := (ite #434 #471 #474)
#468 := (= #25 0::int)
#28 := (= #24 0::int)
#27 := (= #23 0::int)
#29 := (or #27 #28)
#476 := (ite #29 #468 #475)
#986 := (forall (vars (?v0 int) (?v1 int)) (:pat #985) #476)
#479 := (forall (vars (?v0 int) (?v1 int)) #476)
#989 := (iff #479 #986)
#987 := (iff #476 #476)
#988 := [refl]: #987
#990 := [quant-intro #988]: #989
#439 := (ite #434 #36 #131)
#442 := (ite #29 0::int #439)
#445 := (= #25 #442)
#448 := (forall (vars (?v0 int) (?v1 int)) #445)
#480 := (iff #448 #479)
#477 := (iff #445 #476)
#478 := [rewrite]: #477
#481 := [quant-intro #478]: #480
#158 := (not #157)
#151 := (not #150)
#161 := (and #151 #158)
#147 := (not #146)
#154 := (and #147 #151)
#164 := (or #154 #161)
#167 := (ite #164 #36 #131)
#170 := (ite #29 0::int #167)
#173 := (= #25 #170)
#176 := (forall (vars (?v0 int) (?v1 int)) #173)
#449 := (iff #176 #448)
#446 := (iff #173 #445)
#443 := (= #170 #442)
#440 := (= #167 #439)
#437 := (iff #164 #434)
#431 := (or #428 #399)
#435 := (iff #431 #434)
#436 := [rewrite]: #435
#432 := (iff #164 #431)
#429 := (iff #161 #399)
#430 := [rewrite]: #429
#396 := (iff #154 #428)
#397 := [rewrite]: #396
#433 := [monotonicity #397 #430]: #432
#438 := [trans #433 #436]: #437
#441 := [monotonicity #438]: #440
#444 := [monotonicity #441]: #443
#447 := [monotonicity #444]: #446
#450 := [quant-intro #447]: #449
#382 := (~ #176 #176)
#406 := (~ #173 #173)
#407 := [refl]: #406
#383 := [nnf-pos #407]: #382
#38 := (- #24)
#37 := (- #23)
#39 := (div #37 #38)
#31 := (< 0::int #24)
#33 := (< #23 0::int)
#34 := (and #33 #31)
#30 := (< 0::int #23)
#32 := (and #30 #31)
#35 := (or #32 #34)
#40 := (ite #35 #36 #39)
#41 := (ite #29 0::int #40)
#42 := (= #25 #41)
#43 := (forall (vars (?v0 int) (?v1 int)) #42)
#179 := (iff #43 #176)
#118 := (and #31 #33)
#121 := (or #32 #118)
#134 := (ite #121 #36 #131)
#137 := (ite #29 0::int #134)
#140 := (= #25 #137)
#143 := (forall (vars (?v0 int) (?v1 int)) #140)
#177 := (iff #143 #176)
#174 := (iff #140 #173)
#171 := (= #137 #170)
#168 := (= #134 #167)
#165 := (iff #121 #164)
#162 := (iff #118 #161)
#159 := (iff #33 #158)
#160 := [rewrite]: #159
#152 := (iff #31 #151)
#153 := [rewrite]: #152
#163 := [monotonicity #153 #160]: #162
#155 := (iff #32 #154)
#148 := (iff #30 #147)
#149 := [rewrite]: #148
#156 := [monotonicity #149 #153]: #155
#166 := [monotonicity #156 #163]: #165
#169 := [monotonicity #166]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [quant-intro #175]: #177
#144 := (iff #43 #143)
#141 := (iff #42 #140)
#138 := (= #41 #137)
#135 := (= #40 #134)
#132 := (= #39 #131)
#129 := (= #38 #128)
#130 := [rewrite]: #129
#126 := (= #37 #125)
#127 := [rewrite]: #126
#133 := [monotonicity #127 #130]: #132
#122 := (iff #35 #121)
#119 := (iff #34 #118)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#136 := [monotonicity #123 #133]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [quant-intro #142]: #144
#180 := [trans #145 #178]: #179
#117 := [asserted]: #43
#181 := [mp #117 #180]: #176
#408 := [mp~ #181 #383]: #176
#451 := [mp #408 #450]: #448
#482 := [mp #451 #481]: #479
#991 := [mp #482 #990]: #986
#921 := (not #986)
#750 := (or #921 #919)
#632 := (* -1::int 2::int)
#633 := (* -1::int #352)
#965 := (div #633 #632)
#966 := (* -1::int #965)
#967 := (+ #355 #966)
#968 := (= #967 0::int)
#624 := (<= 2::int 0::int)
#620 := (or #960 #624)
#961 := (not #620)
#945 := (or #624 #604)
#608 := (not #945)
#609 := (or #608 #961)
#610 := (ite #609 #619 #968)
#947 := (= 2::int 0::int)
#949 := (or #948 #947)
#950 := (ite #949 #611 #610)
#752 := (or #921 #950)
#906 := (iff #752 #750)
#909 := (iff #750 #750)
#910 := [rewrite]: #909
#920 := (iff #950 #919)
#912 := (iff #610 #918)
#916 := (iff #968 #915)
#772 := (= #967 #771)
#924 := (= #966 #929)
#923 := (= #965 #922)
#926 := (= #632 -2::int)
#927 := [rewrite]: #926
#936 := (= #633 #932)
#925 := [rewrite]: #936
#928 := [monotonicity #925 #927]: #923
#930 := [monotonicity #928]: #924
#773 := [monotonicity #930]: #772
#917 := [monotonicity #773]: #916
#649 := (iff #609 #934)
#655 := (iff #961 #654)
#652 := (iff #620 #960)
#663 := (or #960 false)
#938 := (iff #663 #960)
#942 := [rewrite]: #938
#937 := (iff #620 #663)
#954 := (iff #624 false)
#957 := [rewrite]: #954
#941 := [monotonicity #957]: #937
#653 := [trans #941 #942]: #652
#933 := [monotonicity #653]: #655
#940 := (iff #608 #939)
#669 := (iff #945 #604)
#943 := (or false #604)
#667 := (iff #943 #604)
#668 := [rewrite]: #667
#944 := (iff #945 #943)
#666 := [monotonicity #957]: #944
#562 := [trans #666 #668]: #669
#662 := [monotonicity #562]: #940
#931 := [monotonicity #662 #933]: #649
#913 := [monotonicity #931 #917]: #912
#596 := (iff #949 #948)
#952 := (or #948 false)
#955 := (iff #952 #948)
#595 := [rewrite]: #955
#590 := (iff #949 #952)
#951 := (iff #947 false)
#946 := [rewrite]: #951
#953 := [monotonicity #946]: #590
#956 := [trans #953 #595]: #596
#914 := [monotonicity #956 #913]: #920
#907 := [monotonicity #914]: #906
#908 := [trans #907 #910]: #906
#753 := [quant-inst]: #752
#911 := [mp #753 #908]: #750
#1195 := [unit-resolution #911 #991]: #919
#962 := (not #85)
#634 := (not #368)
#1530 := [hypothesis]: #634
#751 := (or #962 #368)
#373 := (iff #85 #368)
#93 := (- f14 #87)
#94 := (f9 #93 2::int)
#95 := (= #92 #94)
#96 := (not #95)
#97 := (implies #90 #96)
#98 := (iff #85 #97)
#374 := (iff #98 #373)
#371 := (iff #97 #368)
#364 := (implies #90 #361)
#369 := (iff #364 #368)
#370 := [rewrite]: #369
#365 := (iff #97 #364)
#362 := (iff #96 #361)
#359 := (iff #95 #358)
#356 := (= #94 #355)
#353 := (= #93 #352)
#354 := [rewrite]: #353
#357 := [monotonicity #354]: #356
#360 := [monotonicity #357]: #359
#363 := [monotonicity #360]: #362
#366 := [monotonicity #363]: #365
#372 := [trans #366 #370]: #371
#375 := [monotonicity #372]: #374
#350 := [asserted]: #98
#378 := [mp #350 #375]: #373
#574 := (not #373)
#964 := (or #962 #368 #574)
#621 := [def-axiom]: #964
#958 := [unit-resolution #621 #378]: #751
#1524 := [unit-resolution #958 #1530]: #962
#1068 := (* -1::int #876)
#1140 := (+ #89 #1068)
#1141 := (<= #1140 0::int)
#1139 := (= #89 #876)
#868 := (= #88 #876)
#67 := (:var 0 S5)
#70 := (f11 f4 #67)
#66 := (:var 1 S4)
#71 := (f10 #66 #70)
#1019 := (pattern #71)
#72 := (f6 #71 2::int)
#68 := (f10 #66 #67)
#69 := (f6 #68 2::int)
#73 := (= #69 #72)
#1020 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #1019) #73)
#74 := (forall (vars (?v0 S4) (?v1 S5)) #73)
#1023 := (iff #74 #1020)
#1021 := (iff #73 #73)
#1022 := [refl]: #1021
#1024 := [quant-intro #1022]: #1023
#392 := (~ #74 #74)
#421 := (~ #73 #73)
#422 := [refl]: #421
#393 := [nnf-pos #422]: #392
#312 := [asserted]: #74
#423 := [mp~ #312 #393]: #74
#1025 := [mp #423 #1024]: #1020
#872 := (not #1020)
#873 := (or #872 #868)
#878 := (= #876 #88)
#870 := (or #872 #878)
#854 := (iff #870 #873)
#857 := (iff #873 #873)
#858 := [rewrite]: #857
#869 := (iff #878 #868)
#871 := [rewrite]: #869
#855 := [monotonicity #871]: #854
#859 := [trans #855 #858]: #854
#874 := [quant-inst]: #870
#860 := [mp #874 #859]: #873
#1526 := [unit-resolution #860 #1025]: #868
#1322 := (= #89 #88)
#556 := (or #368 #90)
#641 := [def-axiom]: #556
#1525 := [unit-resolution #641 #1530]: #90
#1323 := [symm #1525]: #1322
#1703 := [trans #1323 #1526]: #1139
#1704 := (not #1139)
#1705 := (or #1704 #1141)
#1706 := [th-lemma]: #1705
#1707 := [unit-resolution #1706 #1703]: #1141
#1142 := (>= #1140 0::int)
#1708 := (or #1704 #1142)
#1709 := [th-lemma]: #1708
#1710 := [unit-resolution #1709 #1703]: #1142
#584 := (+ #83 #935)
#571 := (>= #584 0::int)
#1440 := (not #571)
#589 := (<= #584 0::int)
#598 := (* -1::int #355)
#572 := (+ #92 #598)
#577 := (<= #572 0::int)
#642 := (or #368 #358)
#643 := [def-axiom]: #642
#1711 := [unit-resolution #643 #1530]: #358
#1712 := (or #361 #577)
#1713 := [th-lemma]: #1712
#1714 := [unit-resolution #1713 #1711]: #577
#1292 := (not #577)
#1312 := (or #589 #1292)
#883 := (not #948)
#1289 := [hypothesis]: #577
#1276 := (not #589)
#1277 := [hypothesis]: #1276
#1299 := (or #883 #1292 #589)
#1193 := (<= #355 0::int)
#1258 := [hypothesis]: #948
#886 := (not #919)
#885 := (or #886 #883 #611)
#895 := [def-axiom]: #885
#1259 := [unit-resolution #895 #1258 #1195]: #611
#893 := (not #611)
#1191 := (or #893 #1193)
#1192 := [th-lemma]: #1191
#1245 := [unit-resolution #1192 #1259]: #1193
#1295 := (or #883 #604)
#1296 := [th-lemma]: #1295
#1297 := [unit-resolution #1296 #1258]: #604
#890 := (* -2::int #92)
#884 := (+ #351 #890)
#891 := (+ #83 #884)
#877 := (<= #891 0::int)
#875 := (= #891 0::int)
#75 := (f11 f8 #67)
#76 := (f10 #66 #75)
#1026 := (pattern #76)
#338 := (* -2::int #76)
#336 := (* -1::int #71)
#339 := (+ #336 #338)
#340 := (+ #68 #339)
#341 := (= #340 0::int)
#1027 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #1019 #1026) #341)
#344 := (forall (vars (?v0 S4) (?v1 S5)) #341)
#1030 := (iff #344 #1027)
#1028 := (iff #341 #341)
#1029 := [refl]: #1028
#1031 := [quant-intro #1029]: #1030
#394 := (~ #344 #344)
#424 := (~ #341 #341)
#425 := [refl]: #424
#395 := [nnf-pos #425]: #394
#77 := (* #76 2::int)
#78 := (+ #77 #71)
#79 := (= #78 #68)
#80 := (forall (vars (?v0 S4) (?v1 S5)) #79)
#347 := (iff #80 #344)
#314 := (* 2::int #76)
#320 := (+ #71 #314)
#328 := (= #68 #320)
#333 := (forall (vars (?v0 S4) (?v1 S5)) #328)
#345 := (iff #333 #344)
#342 := (iff #328 #341)
#343 := [rewrite]: #342
#346 := [quant-intro #343]: #345
#334 := (iff #80 #333)
#331 := (iff #79 #328)
#325 := (= #320 #68)
#329 := (iff #325 #328)
#330 := [rewrite]: #329
#326 := (iff #79 #325)
#323 := (= #78 #320)
#317 := (+ #314 #71)
#321 := (= #317 #320)
#322 := [rewrite]: #321
#318 := (= #78 #317)
#315 := (= #77 #314)
#316 := [rewrite]: #315
#319 := [monotonicity #316]: #318
#324 := [trans #319 #322]: #323
#327 := [monotonicity #324]: #326
#332 := [trans #327 #330]: #331
#335 := [quant-intro #332]: #334
#348 := [trans #335 #346]: #347
#313 := [asserted]: #80
#349 := [mp #313 #348]: #344
#426 := [mp~ #349 #395]: #344
#1032 := [mp #426 #1031]: #1027
#879 := (not #1027)
#880 := (or #879 #875)
#881 := [quant-inst]: #880
#1271 := [unit-resolution #881 #1032]: #875
#1272 := (not #875)
#1273 := (or #1272 #877)
#1274 := [th-lemma]: #1273
#1275 := [unit-resolution #1274 #1271]: #877
#1298 := [th-lemma #1275 #1289 #1297 #1277 #1245]: false
#1300 := [lemma #1298]: #1299
#1194 := [unit-resolution #1300 #1277 #1289]: #883
#902 := (not #934)
#811 := (not #619)
#903 := (<= #959 0::int)
#1291 := (not #903)
#1293 := (or #1291 #1292 #589)
#1201 := (+ f14 #87)
#1202 := (mod #1201 2::int)
#1214 := (* -1::int #1202)
#1213 := (* -2::int #963)
#1215 := (+ #1213 #1214)
#1216 := (+ #351 #1215)
#1217 := (+ f14 #1216)
#1222 := (>= #1217 0::int)
#1211 := (= #1217 0::int)
#1 := true
#113 := [true-axiom]: true
#1278 := (or false #1211)
#1279 := [th-lemma]: #1278
#1280 := [unit-resolution #1279 #113]: #1211
#1281 := (not #1211)
#1282 := (or #1281 #1222)
#1283 := [th-lemma]: #1282
#1284 := [unit-resolution #1283 #1280]: #1222
#1246 := (>= #1202 0::int)
#1285 := (or false #1246)
#1286 := [th-lemma]: #1285
#1287 := [unit-resolution #1286 #113]: #1246
#1288 := [hypothesis]: #903
#1290 := [th-lemma #1289 #1288 #1287 #1284 #1277 #1275]: false
#1294 := [lemma #1290]: #1293
#1301 := [unit-resolution #1294 #1277 #1289]: #1291
#1302 := (or #811 #903)
#1303 := [th-lemma]: #1302
#1304 := [unit-resolution #1303 #1301]: #811
#896 := (or #886 #948 #918)
#897 := [def-axiom]: #896
#1305 := [unit-resolution #897 #1194 #1195]: #918
#799 := (not #918)
#807 := (or #799 #902 #619)
#808 := [def-axiom]: #807
#1306 := [unit-resolution #808 #1305 #1304]: #902
#793 := (or #934 #604)
#794 := [def-axiom]: #793
#1307 := [unit-resolution #794 #1306]: #604
#795 := (or #934 #960)
#754 := [def-axiom]: #795
#1308 := [unit-resolution #754 #1306]: #960
#1309 := (or #948 #654 #939)
#1310 := [th-lemma]: #1309
#1311 := [unit-resolution #1310 #1308 #1307 #1194]: false
#1313 := [lemma #1311]: #1312
#1715 := [unit-resolution #1313 #1714]: #589
#1718 := (or #1276 #1440)
#1716 := (or #85 #1276 #1440)
#1717 := [th-lemma]: #1716
#1719 := [unit-resolution #1717 #1524]: #1718
#1720 := [unit-resolution #1719 #1715]: #1440
#578 := (>= #572 0::int)
#1721 := (or #361 #578)
#1722 := [th-lemma]: #1721
#1723 := [unit-resolution #1722 #1711]: #578
#583 := (* -1::int #89)
#585 := (+ #88 #583)
#586 := (<= #585 0::int)
#1724 := (or #367 #586)
#1725 := [th-lemma]: #1724
#1726 := [unit-resolution #1725 #1525]: #586
#1434 := (not #1141)
#1489 := (not #1142)
#1430 := (not #578)
#1636 := (not #586)
#1701 := (or #948 #1636 #1430 #571 #1489 #1434 #85)
#864 := (mod f14 2::int)
#865 := (* -1::int #864)
#866 := (+ #89 #865)
#856 := (= #866 0::int)
#766 := (not #856)
#1402 := [hypothesis]: #1141
#581 := (mod #83 2::int)
#1069 := (+ #581 #1068)
#1113 := (<= #1069 0::int)
#1070 := (= #1069 0::int)
#1453 := [hypothesis]: #962
#1421 := [hypothesis]: #578
#1480 := [hypothesis]: #1142
#1441 := [hypothesis]: #1440
#788 := (>= #959 0::int)
#1314 := [hypothesis]: #883
#1679 := [unit-resolution #897 #1314 #1195]: #918
#1319 := (or #934 #948)
#1315 := [hypothesis]: #902
#1316 := [unit-resolution #794 #1315]: #604
#1317 := [unit-resolution #754 #1315]: #960
#1318 := [unit-resolution #1310 #1317 #1316 #1314]: false
#1320 := [lemma #1318]: #1319
#1680 := [unit-resolution #1320 #1314]: #934
#1681 := [unit-resolution #808 #1680 #1679]: #619
#1682 := (or #811 #788)
#1683 := [th-lemma]: #1682
#1684 := [unit-resolution #1683 #1681]: #788
#1431 := (not #788)
#1490 := (or #1070 #1489 #571 #1431 #1430 #1434 #85)
#1409 := 1::int
#1352 := (div f14 2::int)
#1405 := (* -1::int #1352)
#1406 := (+ #865 #1405)
#1407 := (+ #89 #1406)
#1408 := (+ f14 #1407)
#1410 := (>= #1408 1::int)
#757 := (>= #866 0::int)
#814 := (mod #935 -2::int)
#796 := (+ #89 #814)
#816 := (= #796 0::int)
#867 := (<= f14 0::int)
#828 := (not #867)
#848 := (>= f14 0::int)
#817 := (not #848)
#833 := (or #817 #828)
#797 := (ite #833 #856 #816)
#847 := (= #89 0::int)
#853 := (= f14 0::int)
#789 := (ite #853 #847 #797)
#44 := (f6 #23 #24)
#992 := (pattern #44)
#183 := (mod #125 #128)
#488 := (+ #44 #183)
#489 := (= #488 0::int)
#45 := (mod #23 #24)
#485 := (* -1::int #45)
#486 := (+ #44 #485)
#487 := (= #486 0::int)
#490 := (ite #434 #487 #489)
#484 := (= #44 0::int)
#491 := (ite #27 #484 #490)
#483 := (= #23 #44)
#492 := (ite #28 #483 #491)
#993 := (forall (vars (?v0 int) (?v1 int)) (:pat #992) #492)
#495 := (forall (vars (?v0 int) (?v1 int)) #492)
#996 := (iff #495 #993)
#994 := (iff #492 #492)
#995 := [refl]: #994
#997 := [quant-intro #995]: #996
#189 := (* -1::int #183)
#452 := (ite #434 #45 #189)
#455 := (ite #27 0::int #452)
#458 := (ite #28 #23 #455)
#461 := (= #44 #458)
#464 := (forall (vars (?v0 int) (?v1 int)) #461)
#496 := (iff #464 #495)
#493 := (iff #461 #492)
#494 := [rewrite]: #493
#497 := [quant-intro #494]: #496
#209 := (ite #164 #45 #189)
#212 := (ite #27 0::int #209)
#215 := (ite #28 #23 #212)
#218 := (= #44 #215)
#221 := (forall (vars (?v0 int) (?v1 int)) #218)
#465 := (iff #221 #464)
#462 := (iff #218 #461)
#459 := (= #215 #458)
#456 := (= #212 #455)
#453 := (= #209 #452)
#454 := [monotonicity #438]: #453
#457 := [monotonicity #454]: #456
#460 := [monotonicity #457]: #459
#463 := [monotonicity #460]: #462
#466 := [quant-intro #463]: #465
#384 := (~ #221 #221)
#409 := (~ #218 #218)
#410 := [refl]: #409
#385 := [nnf-pos #410]: #384
#46 := (mod #37 #38)
#47 := (- #46)
#48 := (ite #35 #45 #47)
#49 := (ite #27 0::int #48)
#50 := (ite #28 #23 #49)
#51 := (= #44 #50)
#52 := (forall (vars (?v0 int) (?v1 int)) #51)
#224 := (iff #52 #221)
#194 := (ite #121 #45 #189)
#197 := (ite #27 0::int #194)
#200 := (ite #28 #23 #197)
#203 := (= #44 #200)
#206 := (forall (vars (?v0 int) (?v1 int)) #203)
#222 := (iff #206 #221)
#219 := (iff #203 #218)
#216 := (= #200 #215)
#213 := (= #197 #212)
#210 := (= #194 #209)
#211 := [monotonicity #166]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [monotonicity #217]: #219
#223 := [quant-intro #220]: #222
#207 := (iff #52 #206)
#204 := (iff #51 #203)
#201 := (= #50 #200)
#198 := (= #49 #197)
#195 := (= #48 #194)
#192 := (= #47 #189)
#186 := (- #183)
#190 := (= #186 #189)
#191 := [rewrite]: #190
#187 := (= #47 #186)
#184 := (= #46 #183)
#185 := [monotonicity #127 #130]: #184
#188 := [monotonicity #185]: #187
#193 := [trans #188 #191]: #192
#196 := [monotonicity #123 #193]: #195
#199 := [monotonicity #196]: #198
#202 := [monotonicity #199]: #201
#205 := [monotonicity #202]: #204
#208 := [quant-intro #205]: #207
#225 := [trans #208 #223]: #224
#182 := [asserted]: #52
#226 := [mp #182 #225]: #221
#411 := [mp~ #226 #385]: #221
#467 := [mp #411 #466]: #464
#498 := [mp #467 #497]: #495
#998 := [mp #498 #997]: #993
#769 := (not #993)
#774 := (or #769 #789)
#861 := (mod #935 #632)
#862 := (+ #89 #861)
#863 := (= #862 0::int)
#845 := (or #867 #624)
#846 := (not #845)
#849 := (or #624 #848)
#850 := (not #849)
#851 := (or #850 #846)
#852 := (ite #851 #856 #863)
#839 := (ite #853 #847 #852)
#835 := (= f14 #89)
#836 := (ite #947 #835 #839)
#775 := (or #769 #836)
#777 := (iff #775 #774)
#779 := (iff #774 #774)
#780 := [rewrite]: #779
#813 := (iff #836 #789)
#800 := (ite false #835 #789)
#812 := (iff #800 #789)
#792 := [rewrite]: #812
#801 := (iff #836 #800)
#791 := (iff #839 #789)
#756 := (iff #852 #797)
#822 := (iff #863 #816)
#820 := (= #862 #796)
#760 := (= #861 #814)
#815 := [monotonicity #927]: #760
#821 := [monotonicity #815]: #820
#790 := [monotonicity #821]: #822
#829 := (iff #851 #833)
#831 := (iff #846 #828)
#826 := (iff #845 #867)
#712 := (or #867 false)
#825 := (iff #712 #867)
#830 := [rewrite]: #825
#823 := (iff #845 #712)
#824 := [monotonicity #957]: #823
#827 := [trans #824 #830]: #826
#832 := [monotonicity #827]: #831
#818 := (iff #850 #817)
#838 := (iff #849 #848)
#837 := (or false #848)
#842 := (iff #837 #848)
#843 := [rewrite]: #842
#840 := (iff #849 #837)
#841 := [monotonicity #957]: #840
#844 := [trans #841 #843]: #838
#819 := [monotonicity #844]: #818
#834 := [monotonicity #819 #832]: #829
#787 := [monotonicity #834 #790]: #756
#798 := [monotonicity #787]: #791
#802 := [monotonicity #946 #798]: #801
#768 := [trans #802 #792]: #813
#778 := [monotonicity #768]: #777
#781 := [trans #778 #780]: #777
#776 := [quant-inst]: #775
#782 := [mp #776 #781]: #774
#1452 := [unit-resolution #782 #998]: #789
#742 := (not #853)
#1461 := (iff #962 #742)
#1459 := (iff #85 #853)
#1454 := (= 0::int f14)
#1457 := (iff #1454 #853)
#1458 := [commutativity]: #1457
#1455 := (iff #85 #1454)
#560 := (= #83 0::int)
#1122 := (not #1070)
#1336 := [hypothesis]: #1122
#1348 := (or #560 #1070)
#575 := (* -1::int #83)
#1075 := (mod #575 -2::int)
#1078 := (+ #876 #1075)
#1081 := (= #1078 0::int)
#568 := (>= #83 0::int)
#1041 := (not #568)
#563 := (<= #83 0::int)
#1051 := (not #563)
#1057 := (or #1051 #1041)
#1084 := (ite #1057 #1070 #1081)
#559 := (= #876 0::int)
#1087 := (ite #560 #559 #1084)
#1097 := (or #769 #1087)
#576 := (mod #575 #632)
#579 := (+ #876 #576)
#580 := (= #579 0::int)
#573 := (* -1::int #581)
#582 := (+ #876 #573)
#566 := (= #582 0::int)
#564 := (or #563 #624)
#567 := (not #564)
#569 := (or #624 #568)
#565 := (not #569)
#570 := (or #565 #567)
#557 := (ite #570 #566 #580)
#558 := (ite #560 #559 #557)
#561 := (= #83 #876)
#1033 := (ite #947 #561 #558)
#1098 := (or #769 #1033)
#1100 := (iff #1098 #1097)
#1102 := (iff #1097 #1097)
#1103 := [rewrite]: #1102
#1095 := (iff #1033 #1087)
#1090 := (ite false #561 #1087)
#1093 := (iff #1090 #1087)
#1094 := [rewrite]: #1093
#1091 := (iff #1033 #1090)
#1088 := (iff #558 #1087)
#1085 := (iff #557 #1084)
#1082 := (iff #580 #1081)
#1079 := (= #579 #1078)
#1076 := (= #576 #1075)
#1077 := [monotonicity #927]: #1076
#1080 := [monotonicity #1077]: #1079
#1083 := [monotonicity #1080]: #1082
#1073 := (iff #566 #1070)
#1062 := (+ #573 #876)
#1065 := (= #1062 0::int)
#1071 := (iff #1065 #1070)
#1072 := [rewrite]: #1071
#1066 := (iff #566 #1065)
#1063 := (= #582 #1062)
#1064 := [rewrite]: #1063
#1067 := [monotonicity #1064]: #1066
#1074 := [trans #1067 #1072]: #1073
#1060 := (iff #570 #1057)
#1054 := (or #1041 #1051)
#1058 := (iff #1054 #1057)
#1059 := [rewrite]: #1058
#1055 := (iff #570 #1054)
#1052 := (iff #567 #1051)
#1049 := (iff #564 #563)
#1044 := (or #563 false)
#1047 := (iff #1044 #563)
#1048 := [rewrite]: #1047
#1045 := (iff #564 #1044)
#1046 := [monotonicity #957]: #1045
#1050 := [trans #1046 #1048]: #1049
#1053 := [monotonicity #1050]: #1052
#1042 := (iff #565 #1041)
#1039 := (iff #569 #568)
#1034 := (or false #568)
#1037 := (iff #1034 #568)
#1038 := [rewrite]: #1037
#1035 := (iff #569 #1034)
#1036 := [monotonicity #957]: #1035
#1040 := [trans #1036 #1038]: #1039
#1043 := [monotonicity #1040]: #1042
#1056 := [monotonicity #1043 #1053]: #1055
#1061 := [trans #1056 #1059]: #1060
#1086 := [monotonicity #1061 #1074 #1083]: #1085
#1089 := [monotonicity #1086]: #1088
#1092 := [monotonicity #946 #1089]: #1091
#1096 := [trans #1092 #1094]: #1095
#1101 := [monotonicity #1096]: #1100
#1104 := [trans #1101 #1103]: #1100
#1099 := [quant-inst]: #1098
#1105 := [mp #1099 #1104]: #1097
#1339 := [unit-resolution #1105 #998]: #1087
#1129 := (not #560)
#1331 := [hypothesis]: #1129
#1128 := (not #1087)
#1132 := (or #1128 #560 #1084)
#1133 := [def-axiom]: #1132
#1332 := [unit-resolution #1133 #1331 #1339]: #1084
#1345 := (or #563 #1070)
#1337 := [hypothesis]: #1051
#1106 := (or #1057 #563)
#1107 := [def-axiom]: #1106
#1338 := [unit-resolution #1107 #1337]: #1057
#1340 := (or #1129 #563)
#1341 := [th-lemma]: #1340
#1342 := [unit-resolution #1341 #1337]: #1129
#1343 := [unit-resolution #1133 #1342 #1339]: #1084
#1110 := (not #1057)
#1117 := (not #1084)
#1118 := (or #1117 #1110 #1070)
#1119 := [def-axiom]: #1118
#1344 := [unit-resolution #1119 #1343 #1338 #1336]: false
#1346 := [lemma #1344]: #1345
#1333 := [unit-resolution #1346 #1336]: #563
#1334 := (or #560 #1051 #1041)
#1335 := [th-lemma]: #1334
#1329 := [unit-resolution #1335 #1331 #1333]: #1041
#1108 := (or #1057 #568)
#1109 := [def-axiom]: #1108
#1330 := [unit-resolution #1109 #1329]: #1057
#1347 := [unit-resolution #1119 #1330 #1332 #1336]: false
#1349 := [lemma #1347]: #1348
#1447 := [unit-resolution #1349 #1336]: #560
#1456 := [monotonicity #1447]: #1455
#1460 := [trans #1456 #1458]: #1459
#1462 := [monotonicity #1460]: #1461
#1463 := [mp #1453 #1462]: #742
#740 := (not #789)
#587 := (or #740 #853 #797)
#745 := [def-axiom]: #587
#1464 := [unit-resolution #745 #1463 #1452]: #797
#1465 := (or #1129 #568)
#1466 := [th-lemma]: #1465
#1467 := [unit-resolution #1466 #1447]: #568
#1468 := (or #828 #1041 #571)
#1469 := [th-lemma]: #1468
#1470 := [unit-resolution #1469 #1467 #1441]: #828
#785 := (or #833 #867)
#770 := [def-axiom]: #785
#1471 := [unit-resolution #770 #1470]: #833
#786 := (not #833)
#761 := (not #797)
#762 := (or #761 #786 #856)
#763 := [def-axiom]: #762
#1472 := [unit-resolution #763 #1471 #1464]: #856
#1477 := (or #766 #757)
#1478 := [th-lemma]: #1477
#1479 := [unit-resolution #1478 #1472]: #757
#1351 := (>= #876 0::int)
#1130 := (or #1128 #1129 #559)
#1131 := [def-axiom]: #1130
#1448 := [unit-resolution #1131 #1447 #1339]: #559
#1134 := (not #559)
#1481 := (or #1134 #1351)
#1482 := [th-lemma]: #1481
#1483 := [unit-resolution #1482 #1448]: #1351
#1365 := (* -2::int #1352)
#1366 := (+ #865 #1365)
#1367 := (+ f14 #1366)
#1373 := (>= #1367 0::int)
#1364 := (= #1367 0::int)
#1404 := (or false #1364)
#1411 := [th-lemma]: #1404
#1412 := [unit-resolution #1411 #113]: #1364
#1413 := (not #1364)
#1484 := (or #1413 #1373)
#1485 := [th-lemma]: #1484
#1486 := [unit-resolution #1485 #1412]: #1373
#1487 := [th-lemma #1486 #1483 #1480 #1467 #1441 #1479]: #1410
#1429 := (not #1410)
#1350 := (<= #876 0::int)
#1449 := (or #1134 #1350)
#1450 := [th-lemma]: #1449
#1451 := [unit-resolution #1450 #1448]: #1350
#755 := (<= #866 0::int)
#1473 := (or #766 #755)
#1474 := [th-lemma]: #1473
#1475 := [unit-resolution #1474 #1472]: #755
#1420 := [hypothesis]: #788
#1433 := (not #1350)
#1432 := (not #755)
#1435 := (or #1429 #1430 #1431 #1051 #1432 #1433 #1434)
#1252 := (>= #1202 2::int)
#1253 := (not #1252)
#1399 := (or false #1253)
#1400 := [th-lemma]: #1399
#1401 := [unit-resolution #1400 #113]: #1253
#1403 := [hypothesis]: #1350
#1372 := (<= #1367 0::int)
#1414 := (or #1413 #1372)
#1415 := [th-lemma]: #1414
#1416 := [unit-resolution #1415 #1412]: #1372
#1417 := [hypothesis]: #755
#1418 := [hypothesis]: #563
#1419 := [hypothesis]: #1410
#882 := (>= #891 0::int)
#1422 := (or #1272 #882)
#1423 := [th-lemma]: #1422
#1424 := [unit-resolution #1423 #1271]: #882
#1321 := (<= #1217 0::int)
#1425 := (or #1281 #1321)
#1426 := [th-lemma]: #1425
#1427 := [unit-resolution #1426 #1280]: #1321
#1428 := [th-lemma #1427 #1424 #1421 #1420 #1419 #1418 #1417 #1416 #1403 #1402 #1401]: false
#1436 := [lemma #1428]: #1435
#1476 := [unit-resolution #1436 #1333 #1420 #1421 #1475 #1451 #1402]: #1429
#1488 := [unit-resolution #1476 #1487]: false
#1491 := [lemma #1488]: #1490
#1685 := [unit-resolution #1491 #1684 #1441 #1480 #1421 #1402 #1453]: #1070
#1686 := (or #1122 #1113)
#1687 := [th-lemma]: #1686
#1688 := [unit-resolution #1687 #1685]: #1113
#1114 := (>= #1069 0::int)
#1689 := (or #1122 #1114)
#1690 := [th-lemma]: #1689
#1691 := [unit-resolution #1690 #1685]: #1114
#1552 := (not #1113)
#1578 := (not #1114)
#1598 := (or #766 #571 #1578 #1489 #1431 #1430 #1552 #1434)
#1386 := (div #83 2::int)
#1567 := (* -1::int #1386)
#1568 := (+ #1405 #1567)
#1569 := (+ #1068 #1568)
#1570 := (+ #865 #1569)
#1571 := (+ #89 #1570)
#1572 := (+ f14 #1571)
#1594 := (>= #1572 1::int)
#1564 := [hypothesis]: #1114
#1493 := (* -2::int #1386)
#1494 := (+ #573 #1493)
#1495 := (+ #83 #1494)
#1501 := (>= #1495 0::int)
#1492 := (= #1495 0::int)
#1540 := (or false #1492)
#1541 := [th-lemma]: #1540
#1542 := [unit-resolution #1541 #113]: #1492
#1543 := (not #1492)
#1565 := (or #1543 #1501)
#1566 := [th-lemma]: #1565
#1575 := [unit-resolution #1566 #1542]: #1501
#1591 := [hypothesis]: #856
#1595 := [unit-resolution #1478 #1591]: #757
#1596 := [th-lemma #1441 #1595 #1575 #1564 #1486 #1480]: #1594
#1587 := (not #1594)
#1539 := [hypothesis]: #1113
#1592 := [unit-resolution #1474 #1591]: #755
#1588 := (or #1587 #1430 #1431 #1432 #1552 #1434)
#1500 := (<= #1495 0::int)
#1544 := (or #1543 #1500)
#1545 := [th-lemma]: #1544
#1546 := [unit-resolution #1545 #1542]: #1500
#1585 := [hypothesis]: #1594
#1586 := [th-lemma #1427 #1424 #1421 #1420 #1585 #1417 #1546 #1539 #1416 #1402 #1401]: false
#1589 := [lemma #1586]: #1588
#1593 := [unit-resolution #1589 #1592 #1420 #1421 #1539 #1402]: #1587
#1597 := [unit-resolution #1593 #1596]: false
#1599 := [lemma #1597]: #1598
#1692 := [unit-resolution #1599 #1691 #1441 #1480 #1684 #1421 #1688 #1402]: #766
#1633 := [hypothesis]: #586
#1522 := (or #867 #856)
#1514 := [hypothesis]: #766
#1515 := [hypothesis]: #828
#1516 := [unit-resolution #770 #1515]: #833
#1517 := (or #742 #867)
#1518 := [th-lemma]: #1517
#1519 := [unit-resolution #1518 #1515]: #742
#1520 := [unit-resolution #745 #1519 #1452]: #797
#1521 := [unit-resolution #763 #1520 #1516 #1514]: false
#1523 := [lemma #1521]: #1522
#1693 := [unit-resolution #1523 #1692]: #867
#1677 := (or #742 #828 #902 #1636 #1430 #1431 #571)
#736 := (mod #87 2::int)
#724 := (* -1::int #736)
#727 := (+ #88 #724)
#729 := (= #727 0::int)
#613 := (not #729)
#629 := (>= #727 0::int)
#1637 := (not #629)
#1528 := (<= #89 0::int)
#1617 := [hypothesis]: #853
#743 := (or #740 #742 #847)
#744 := [def-axiom]: #743
#1618 := [unit-resolution #744 #1617 #1452]: #847
#741 := (not #847)
#1619 := (or #741 #1528)
#1613 := [th-lemma]: #1619
#1614 := [unit-resolution #1613 #1618]: #1528
#1622 := (+ #736 #1214)
#1624 := (>= #1622 0::int)
#1621 := [hypothesis]: #867
#1615 := (or #742 #848)
#1616 := [th-lemma]: #1615
#1644 := [unit-resolution #1616 #1617]: #848
#1657 := (or #1624 #817 #828)
#1643 := (= #736 #1202)
#1649 := (= #1202 #736)
#1647 := (= #1201 #87)
#1645 := (= #87 #1201)
#1607 := [hypothesis]: #848
#1646 := [th-lemma #1607 #1621]: #1645
#1648 := [symm #1646]: #1647
#1650 := [monotonicity #1648]: #1649
#1651 := [symm #1650]: #1643
#1635 := (not #1624)
#1652 := [hypothesis]: #1635
#1653 := (not #1643)
#1654 := (or #1653 #1624)
#1655 := [th-lemma]: #1654
#1656 := [unit-resolution #1655 #1652 #1651]: false
#1658 := [lemma #1656]: #1657
#1659 := [unit-resolution #1658 #1644 #1621]: #1624
#1638 := (not #1528)
#1639 := (or #1635 #1636 #1637 #1638 #1430 #1431 #571)
#1630 := [hypothesis]: #1624
#1631 := [hypothesis]: #1528
#1632 := [hypothesis]: #629
#1634 := [th-lemma #1633 #1632 #1631 #1427 #1424 #1421 #1420 #1441 #1630]: false
#1640 := [lemma #1634]: #1639
#1660 := [unit-resolution #1640 #1659 #1633 #1614 #1421 #1420 #1441]: #1637
#1661 := (or #613 #629)
#1662 := [th-lemma]: #1661
#1663 := [unit-resolution #1662 #1660]: #613
#730 := (<= #87 0::int)
#703 := (not #730)
#721 := (>= #87 0::int)
#692 := (not #721)
#705 := (or #692 #703)
#1664 := [hypothesis]: #934
#1605 := (or #730 #729)
#1532 := [hypothesis]: #613
#1583 := [hypothesis]: #703
#622 := (or #705 #730)
#635 := [def-axiom]: #622
#1584 := [unit-resolution #635 #1583]: #705
#685 := (mod #351 -2::int)
#688 := (+ #88 #685)
#683 := (= #688 0::int)
#677 := (ite #705 #729 #683)
#718 := (= #88 0::int)
#722 := (= #87 0::int)
#679 := (ite #722 #718 #677)
#656 := (or #769 #679)
#734 := (mod #351 #632)
#735 := (+ #88 #734)
#733 := (= #735 0::int)
#726 := (or #730 #624)
#731 := (not #726)
#711 := (or #624 #721)
#713 := (not #711)
#714 := (or #713 #731)
#717 := (ite #714 #729 #733)
#715 := (ite #722 #718 #717)
#723 := (= #87 #88)
#716 := (ite #947 #723 #715)
#657 := (or #769 #716)
#650 := (iff #657 #656)
#660 := (iff #656 #656)
#651 := [rewrite]: #660
#665 := (iff #716 #679)
#671 := (ite false #723 #679)
#673 := (iff #671 #679)
#674 := [rewrite]: #673
#672 := (iff #716 #671)
#681 := (iff #715 #679)
#678 := (iff #717 #677)
#691 := (iff #733 #683)
#689 := (= #735 #688)
#686 := (= #734 #685)
#687 := [monotonicity #927]: #686
#690 := [monotonicity #687]: #689
#676 := [monotonicity #690]: #691
#682 := (iff #714 #705)
#704 := (iff #731 #703)
#701 := (iff #726 #730)
#696 := (or #730 false)
#699 := (iff #696 #730)
#700 := [rewrite]: #699
#697 := (iff #726 #696)
#698 := [monotonicity #957]: #697
#702 := [trans #698 #700]: #701
#693 := [monotonicity #702]: #704
#694 := (iff #713 #692)
#707 := (iff #711 #721)
#719 := (or false #721)
#708 := (iff #719 #721)
#709 := [rewrite]: #708
#720 := (iff #711 #719)
#706 := [monotonicity #957]: #720
#710 := [trans #706 #709]: #707
#695 := [monotonicity #710]: #694
#684 := [monotonicity #695 #693]: #682
#680 := [monotonicity #684 #676]: #678
#670 := [monotonicity #680]: #681
#664 := [monotonicity #946 #670]: #672
#675 := [trans #664 #674]: #665
#659 := [monotonicity #675]: #650
#661 := [trans #659 #651]: #650
#658 := [quant-inst]: #657
#628 := [mp #658 #661]: #656
#1590 := [unit-resolution #628 #998]: #679
#599 := (not #722)
#1600 := (or #599 #730)
#1601 := [th-lemma]: #1600
#1602 := [unit-resolution #1601 #1583]: #599
#618 := (not #679)
#600 := (or #618 #722 #677)
#603 := [def-axiom]: #600
#1603 := [unit-resolution #603 #1602 #1590]: #677
#636 := (not #705)
#625 := (not #677)
#626 := (or #625 #636 #729)
#605 := [def-axiom]: #626
#1604 := [unit-resolution #605 #1603 #1584 #1532]: false
#1606 := [lemma #1604]: #1605
#1665 := [unit-resolution #1606 #1663]: #730
#1611 := (or #703 #604 #817)
#1608 := [hypothesis]: #730
#1609 := [hypothesis]: #939
#1610 := [th-lemma #1609 #1608 #1607]: false
#1612 := [lemma #1610]: #1611
#1666 := [unit-resolution #1612 #1665 #1644]: #604
#804 := (or #902 #939 #654)
#899 := [def-axiom]: #804
#1667 := [unit-resolution #899 #1666 #1664]: #654
#1668 := (or #692 #828 #960)
#1669 := [th-lemma]: #1668
#1670 := [unit-resolution #1669 #1667 #1621]: #692
#630 := (or #705 #721)
#631 := [def-axiom]: #630
#1671 := [unit-resolution #631 #1670]: #705
#1672 := (or #599 #721)
#1673 := [th-lemma]: #1672
#1674 := [unit-resolution #1673 #1670]: #599
#1675 := [unit-resolution #603 #1674 #1590]: #677
#1676 := [unit-resolution #605 #1675 #1671 #1663]: false
#1678 := [lemma #1676]: #1677
#1694 := [unit-resolution #1678 #1693 #1680 #1633 #1421 #1684 #1441]: #742
#1695 := [unit-resolution #745 #1694 #1452]: #797
#1696 := (or #853 #828 #817)
#1697 := [th-lemma]: #1696
#1698 := [unit-resolution #1697 #1694 #1693]: #817
#783 := (or #833 #848)
#784 := [def-axiom]: #783
#1699 := [unit-resolution #784 #1698]: #833
#1700 := [unit-resolution #763 #1699 #1695 #1692]: false
#1702 := [lemma #1700]: #1701
#1727 := [unit-resolution #1702 #1726 #1723 #1720 #1710 #1707 #1524]: #948
#1728 := [unit-resolution #895 #1727 #1195]: #611
#1729 := (or #893 #1324)
#1730 := [th-lemma]: #1729
#1731 := [unit-resolution #1730 #1728]: #1324
#1732 := (or #883 #960)
#1733 := [th-lemma]: #1732
#1734 := [unit-resolution #1733 #1727]: #960
#1735 := [th-lemma #1723 #1424 #1720 #1734 #1731]: false
#1736 := [lemma #1735]: #368
#648 := (or #85 #634)
#647 := (or #85 #634 #574)
#644 := [def-axiom]: #647
#627 := [unit-resolution #644 #378]: #648
#1737 := [unit-resolution #627 #1736]: #85
#1763 := [monotonicity #1737]: #616
#1764 := [trans #1526 #1763]: #90
#1748 := [hypothesis]: #361
#1754 := (or #811 #358)
#640 := (or #962 #571)
#623 := [th-lemma]: #640
#588 := [unit-resolution #623 #1737]: #571
#1115 := [hypothesis]: #619
#1116 := [unit-resolution #1303 #1115]: #903
#1327 := (not #1222)
#1326 := (not #1246)
#1325 := (not #877)
#1328 := (or #578 #1325 #1291 #1326 #1327 #1440)
#1527 := [th-lemma]: #1328
#1745 := [unit-resolution #1527 #1116 #588 #1284 #1275 #1287]: #578
#1746 := [unit-resolution #1683 #1115]: #788
#1743 := (or #577 #1431)
#1738 := (or #962 #589)
#1739 := [th-lemma]: #1738
#1740 := [unit-resolution #1739 #1737]: #589
#1741 := [hypothesis]: #1292
#1742 := [th-lemma #1741 #1424 #1420 #1427 #1740 #1401]: false
#1744 := [lemma #1742]: #1743
#1747 := [unit-resolution #1744 #1746]: #577
#1751 := (or #1292 #1430)
#1749 := (or #358 #1292 #1430)
#1750 := [th-lemma]: #1749
#1752 := [unit-resolution #1750 #1748]: #1751
#1753 := [unit-resolution #1752 #1747 #1745]: false
#1755 := [lemma #1753]: #1754
#1135 := [unit-resolution #1755 #1748]: #811
#759 := (or #948 #619)
#1260 := [hypothesis]: #811
#758 := [unit-resolution #808 #1679 #1680 #1260]: false
#639 := [lemma #758]: #759
#1136 := [unit-resolution #639 #1135]: #948
#1137 := [unit-resolution #895 #1136 #1195]: #611
#805 := [unit-resolution #1192 #1137]: #1193
#806 := [unit-resolution #1296 #1136]: #604
#1126 := (not #1193)
#1127 := (or #578 #939 #1126 #1325 #1440)
#1124 := [th-lemma]: #1127
#1125 := [unit-resolution #1124 #806 #588 #805 #1275]: #578
#1138 := [unit-resolution #1730 #1137]: #1324
#803 := [unit-resolution #1733 #1136]: #960
#1757 := (not #882)
#1756 := (not #1324)
#1758 := (or #577 #654 #1756 #1757 #1276)
#1759 := [th-lemma]: #1758
#1760 := [unit-resolution #1759 #803 #1740 #1424 #1138]: #577
#1761 := [unit-resolution #1752 #1760 #1125]: false
#1762 := [lemma #1761]: #358
#645 := (or #634 #367 #361)
#646 := [def-axiom]: #645
#638 := [unit-resolution #646 #1736]: #368
#615 := [unit-resolution #638 #1762]: #367
[unit-resolution #615 #1764]: false
unsat
5234c113c47a34efd714baca9777f6d9bb4fe31e 76 0
#2 := false
decl f3 :: (-> int S1)
#12 := (:var 0 int)
#13 := (f3 #12)
#1016 := (pattern #13)
decl f1 :: S1
#4 := f1
#157 := (= f1 #13)
#1017 := (forall (vars (?v0 int)) (:pat #1016) #157)
#181 := (forall (vars (?v0 int)) #157)
#1020 := (iff #181 #1017)
#1018 := (iff #157 #157)
#1019 := [refl]: #1018
#1021 := [quant-intro #1019]: #1020
#494 := (~ #181 #181)
#492 := (~ #157 #157)
#493 := [refl]: #492
#495 := [nnf-pos #493]: #494
decl f4 :: (-> S2 S1)
decl f5 :: (-> int S2 S2)
decl f6 :: S2
#15 := f6
#16 := (f5 #12 f6)
#17 := (f4 #16)
#18 := (= #17 f1)
#19 := (not #18)
#20 := (or #18 #19)
#14 := (= #13 f1)
#21 := (and #14 #20)
#22 := (forall (vars (?v0 int)) #21)
#182 := (iff #22 #181)
#179 := (iff #21 #157)
#1 := true
#174 := (and #157 true)
#177 := (iff #174 #157)
#178 := [rewrite]: #177
#175 := (iff #21 #174)
#172 := (iff #20 true)
#161 := (= f1 #17)
#164 := (not #161)
#167 := (or #161 #164)
#170 := (iff #167 true)
#171 := [rewrite]: #170
#168 := (iff #20 #167)
#165 := (iff #19 #164)
#162 := (iff #18 #161)
#163 := [rewrite]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #163 #166]: #168
#173 := [trans #169 #171]: #172
#159 := (iff #14 #157)
#160 := [rewrite]: #159
#176 := [monotonicity #160 #173]: #175
#180 := [trans #176 #178]: #179
#183 := [quant-intro #180]: #182
#156 := [asserted]: #22
#186 := [mp #156 #183]: #181
#468 := [mp~ #186 #495]: #181
#1022 := [mp #468 #1021]: #1017
#8 := 1::int
#9 := (f3 1::int)
#150 := (= f1 #9)
#153 := (not #150)
#10 := (= #9 f1)
#11 := (not #10)
#154 := (iff #11 #153)
#151 := (iff #10 #150)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#149 := [asserted]: #11
#158 := [mp #149 #155]: #153
#603 := (not #1017)
#688 := (or #603 #150)
#689 := [quant-inst]: #688
[unit-resolution #689 #158 #1022]: false
unsat
b9f47e2d664572f569f3105a25d0e77e894b5cdd 478 0
#2 := false
decl f7 :: (-> S4 S2)
decl f8 :: (-> S1 S4)
decl f1 :: S1
#4 := f1
#28 := (f8 f1)
#29 := (f7 #28)
decl f5 :: (-> S3 S2)
decl f6 :: (-> int S3)
#25 := 3::int
#26 := (f6 3::int)
#27 := (f5 #26)
#30 := (= #27 #29)
decl f12 :: (-> S6 S2)
decl f13 :: (-> S1 S6 S6)
decl f14 :: S6
#42 := f14
#857 := (f13 f1 f14)
#496 := (f12 #857)
#602 := (= #496 #29)
#859 := (= #29 #496)
#39 := (:var 0 S1)
#43 := (f13 #39 f14)
#902 := (pattern #43)
#40 := (f8 #39)
#901 := (pattern #40)
#44 := (f12 #43)
#41 := (f7 #40)
#45 := (= #41 #44)
#903 := (forall (vars (?v0 S1)) (:pat #901 #902) #45)
#46 := (forall (vars (?v0 S1)) #45)
#906 := (iff #46 #903)
#904 := (iff #45 #45)
#905 := [refl]: #904
#907 := [quant-intro #905]: #906
#346 := (~ #46 #46)
#345 := (~ #45 #45)
#389 := [refl]: #345
#347 := [nnf-pos #389]: #346
#225 := [asserted]: #46
#390 := [mp~ #225 #347]: #46
#908 := [mp #390 #907]: #903
#553 := (not #903)
#568 := (or #553 #859)
#569 := [quant-inst]: #568
#625 := [unit-resolution #569 #908]: #859
#603 := [symm #625]: #602
#590 := (= #27 #496)
decl f18 :: (-> S6 S2)
#814 := (f18 #857)
#600 := (= #814 #496)
#815 := (= #496 #814)
#62 := (:var 0 S6)
#64 := (f18 #62)
#918 := (pattern #64)
#63 := (f12 #62)
#917 := (pattern #63)
#65 := (= #63 #64)
#919 := (forall (vars (?v0 S6)) (:pat #917 #918) #65)
#66 := (forall (vars (?v0 S6)) #65)
#922 := (iff #66 #919)
#920 := (iff #65 #65)
#921 := [refl]: #920
#923 := [quant-intro #921]: #922
#358 := (~ #66 #66)
#357 := (~ #65 #65)
#354 := [refl]: #357
#359 := [nnf-pos #354]: #358
#238 := [asserted]: #66
#355 := [mp~ #238 #359]: #66
#924 := [mp #355 #923]: #919
#564 := (not #919)
#816 := (or #564 #815)
#823 := [quant-inst]: #816
#617 := [unit-resolution #823 #924]: #815
#601 := [symm #617]: #600
#588 := (= #27 #814)
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
#108 := (f18 f14)
#821 := (f4 #108)
#85 := 1::int
#252 := (f3 1::int)
#255 := (f4 #252)
#655 := (+ #255 #821)
#811 := (f3 #655)
#697 := (= #811 #814)
#94 := (:var 1 S1)
#95 := (f13 #94 #62)
#960 := (pattern #95)
#117 := (f4 #64)
#321 := (+ #117 #255)
#325 := (f3 #321)
#116 := (f18 #95)
#328 := (= #116 #325)
#961 := (forall (vars (?v0 S1) (?v1 S6)) (:pat #960) #328)
#331 := (forall (vars (?v0 S1) (?v1 S6)) #328)
#964 := (iff #331 #961)
#962 := (iff #328 #328)
#963 := [refl]: #962
#965 := [quant-intro #963]: #964
#374 := (~ #331 #331)
#373 := (~ #328 #328)
#370 := [refl]: #373
#375 := [nnf-pos #370]: #374
#13 := 0::int
#86 := (+ 0::int 1::int)
#87 := (f3 #86)
#88 := (f4 #87)
#118 := (+ #117 #88)
#119 := (f3 #118)
#120 := (= #116 #119)
#121 := (forall (vars (?v0 S1) (?v1 S6)) #120)
#332 := (iff #121 #331)
#329 := (iff #120 #328)
#326 := (= #119 #325)
#323 := (= #118 #321)
#256 := (= #88 #255)
#253 := (= #87 #252)
#249 := (= #86 1::int)
#251 := [rewrite]: #249
#254 := [monotonicity #251]: #253
#257 := [monotonicity #254]: #256
#324 := [monotonicity #257]: #323
#327 := [monotonicity #324]: #326
#330 := [monotonicity #327]: #329
#333 := [quant-intro #330]: #332
#320 := [asserted]: #121
#336 := [mp #320 #333]: #331
#371 := [mp~ #336 #375]: #331
#966 := [mp #371 #965]: #961
#802 := (not #961)
#805 := (or #802 #697)
#822 := (+ #821 #255)
#652 := (f3 #822)
#654 := (= #814 #652)
#690 := (or #802 #654)
#707 := (iff #690 #805)
#701 := (iff #805 #805)
#709 := [rewrite]: #701
#706 := (iff #654 #697)
#813 := (= #814 #811)
#656 := (iff #813 #697)
#804 := [rewrite]: #656
#695 := (iff #654 #813)
#812 := (= #652 #811)
#808 := (= #822 #655)
#809 := [rewrite]: #808
#810 := [monotonicity #809]: #812
#696 := [monotonicity #810]: #695
#801 := [trans #696 #804]: #706
#708 := [monotonicity #801]: #707
#710 := [trans #708 #709]: #707
#705 := [quant-inst]: #690
#711 := [mp #705 #710]: #805
#624 := [unit-resolution #711 #966]: #697
#586 := (= #27 #811)
#598 := (= #252 #811)
#622 := (= #811 #252)
#619 := (= #655 1::int)
#807 := (<= #821 0::int)
#803 := (= #821 0::int)
#69 := (f3 0::int)
#543 := (f4 #69)
#548 := (= #543 0::int)
#14 := (:var 0 int)
#16 := (f3 #14)
#880 := (pattern #16)
#164 := (>= #14 0::int)
#165 := (not #164)
#17 := (f4 #16)
#146 := (= #14 #17)
#171 := (or #146 #165)
#881 := (forall (vars (?v0 int)) (:pat #880) #171)
#176 := (forall (vars (?v0 int)) #171)
#884 := (iff #176 #881)
#882 := (iff #171 #171)
#883 := [refl]: #882
#885 := [quant-intro #883]: #884
#338 := (~ #176 #176)
#334 := (~ #171 #171)
#382 := [refl]: #334
#339 := [nnf-pos #382]: #338
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#179 := (iff #20 #176)
#153 := (not #15)
#154 := (or #153 #146)
#159 := (forall (vars (?v0 int)) #154)
#177 := (iff #159 #176)
#174 := (iff #154 #171)
#168 := (or #165 #146)
#172 := (iff #168 #171)
#173 := [rewrite]: #172
#169 := (iff #154 #168)
#166 := (iff #153 #165)
#162 := (iff #15 #164)
#163 := [rewrite]: #162
#167 := [monotonicity #163]: #166
#170 := [monotonicity #167]: #169
#175 := [trans #170 #173]: #174
#178 := [quant-intro #175]: #177
#160 := (iff #20 #159)
#157 := (iff #19 #154)
#150 := (implies #15 #146)
#155 := (iff #150 #154)
#156 := [rewrite]: #155
#151 := (iff #19 #150)
#148 := (iff #18 #146)
#149 := [rewrite]: #148
#152 := [monotonicity #149]: #151
#158 := [trans #152 #156]: #157
#161 := [quant-intro #158]: #160
#180 := [trans #161 #178]: #179
#145 := [asserted]: #20
#181 := [mp #145 #180]: #176
#383 := [mp~ #181 #339]: #176
#886 := [mp #383 #885]: #881
#861 := (not #881)
#520 := (or #861 #548)
#458 := (>= 0::int 0::int)
#542 := (not #458)
#544 := (= 0::int #543)
#535 := (or #544 #542)
#525 := (or #861 #535)
#521 := (iff #525 #520)
#505 := (iff #520 #520)
#847 := [rewrite]: #505
#865 := (iff #535 #548)
#534 := (or #548 false)
#869 := (iff #534 #548)
#870 := [rewrite]: #869
#867 := (iff #535 #534)
#860 := (iff #542 false)
#1 := true
#528 := (not true)
#522 := (iff #528 false)
#653 := [rewrite]: #522
#864 := (iff #542 #528)
#545 := (iff #458 true)
#549 := [rewrite]: #545
#866 := [monotonicity #549]: #864
#533 := [trans #866 #653]: #860
#546 := (iff #544 #548)
#547 := [rewrite]: #546
#868 := [monotonicity #547 #533]: #867
#871 := [trans #868 #870]: #865
#863 := [monotonicity #871]: #521
#509 := [trans #863 #847]: #521
#862 := [quant-inst]: #525
#510 := [mp #862 #509]: #520
#664 := [unit-resolution #510 #886]: #548
#626 := (= #821 #543)
#109 := (= #108 #69)
#302 := (= #69 #108)
#304 := (iff #109 #302)
#305 := [rewrite]: #304
#301 := [asserted]: #109
#308 := [mp #301 #305]: #302
#638 := [symm #308]: #109
#629 := [monotonicity #638]: #626
#631 := [trans #629 #664]: #803
#632 := (not #803)
#628 := (or #632 #807)
#633 := [th-lemma]: #628
#623 := [unit-resolution #633 #631]: #807
#794 := (>= #821 0::int)
#613 := (or #632 #794)
#615 := [th-lemma]: #613
#616 := [unit-resolution #615 #631]: #794
#726 := (<= #255 1::int)
#747 := (= #255 1::int)
#744 := (or #861 #747)
#756 := (>= 1::int 0::int)
#757 := (not #756)
#768 := (= 1::int #255)
#758 := (or #768 #757)
#745 := (or #861 #758)
#746 := (iff #745 #744)
#720 := (iff #744 #744)
#721 := [rewrite]: #720
#742 := (iff #758 #747)
#755 := (or #747 false)
#738 := (iff #755 #747)
#739 := [rewrite]: #738
#741 := (iff #758 #755)
#754 := (iff #757 false)
#752 := (iff #757 #528)
#750 := (iff #756 true)
#751 := [rewrite]: #750
#753 := [monotonicity #751]: #752
#749 := [trans #753 #653]: #754
#769 := (iff #768 #747)
#748 := [rewrite]: #769
#737 := [monotonicity #748 #749]: #741
#743 := [trans #737 #739]: #742
#719 := [monotonicity #743]: #746
#614 := [trans #719 #721]: #746
#740 := [quant-inst]: #745
#725 := [mp #740 #614]: #744
#645 := [unit-resolution #725 #886]: #747
#646 := (not #747)
#488 := (or #646 #726)
#647 := [th-lemma]: #488
#643 := [unit-resolution #647 #645]: #726
#727 := (>= #255 1::int)
#648 := (or #646 #727)
#627 := [th-lemma]: #648
#630 := [unit-resolution #627 #645]: #727
#620 := [th-lemma #630 #643 #616 #623]: #619
#608 := [monotonicity #620]: #622
#599 := [symm #608]: #598
#607 := (= #27 #252)
decl f17 :: (-> S5 S2)
decl f11 :: S5
#34 := f11
#106 := (f17 f11)
#843 := (f4 #106)
#557 := (+ #255 #843)
#550 := (f3 #557)
#596 := (= #550 #252)
#610 := (= #252 #550)
#637 := (= 1::int #557)
#634 := (= #557 1::int)
#713 := (<= #843 0::int)
#712 := (= #843 0::int)
#666 := (= #843 #543)
#107 := (= #106 #69)
#297 := (= #69 #106)
#299 := (iff #107 #297)
#300 := [rewrite]: #299
#296 := [asserted]: #107
#303 := [mp #296 #300]: #297
#665 := [symm #303]: #107
#667 := [monotonicity #665]: #666
#668 := [trans #667 #664]: #712
#651 := (not #712)
#669 := (or #651 #713)
#639 := [th-lemma]: #669
#640 := [unit-resolution #639 #668]: #713
#806 := (>= #843 0::int)
#641 := (or #651 #806)
#642 := [th-lemma]: #641
#644 := [unit-resolution #642 #668]: #806
#636 := [th-lemma #630 #643 #644 #640]: #634
#635 := [symm #636]: #637
#611 := [monotonicity #635]: #610
#597 := [symm #611]: #596
#606 := (= #27 #550)
decl f10 :: (-> int S5 S5)
#854 := (f10 3::int f11)
#570 := (f17 #854)
#834 := (= #570 #550)
#828 := (= #550 #570)
#57 := (:var 0 S5)
#77 := (:var 1 int)
#78 := (f10 #77 #57)
#953 := (pattern #78)
#59 := (f17 #57)
#111 := (f4 #59)
#307 := (+ #111 #255)
#311 := (f3 #307)
#110 := (f17 #78)
#314 := (= #110 #311)
#954 := (forall (vars (?v0 int) (?v1 S5)) (:pat #953) #314)
#317 := (forall (vars (?v0 int) (?v1 S5)) #314)
#957 := (iff #317 #954)
#955 := (iff #314 #314)
#956 := [refl]: #955
#958 := [quant-intro #956]: #957
#368 := (~ #317 #317)
#401 := (~ #314 #314)
#402 := [refl]: #401
#369 := [nnf-pos #402]: #368
#112 := (+ #111 #88)
#113 := (f3 #112)
#114 := (= #110 #113)
#115 := (forall (vars (?v0 int) (?v1 S5)) #114)
#318 := (iff #115 #317)
#315 := (iff #114 #314)
#312 := (= #113 #311)
#309 := (= #112 #307)
#310 := [monotonicity #257]: #309
#313 := [monotonicity #310]: #312
#316 := [monotonicity #313]: #315
#319 := [quant-intro #316]: #318
#306 := [asserted]: #115
#322 := [mp #306 #319]: #317
#372 := [mp~ #322 #369]: #317
#959 := [mp #372 #958]: #954
#831 := (not #954)
#826 := (or #831 #828)
#840 := (+ #843 #255)
#555 := (f3 #840)
#556 := (= #570 #555)
#832 := (or #831 #556)
#674 := (iff #832 #826)
#817 := (iff #826 #826)
#818 := [rewrite]: #817
#825 := (iff #556 #828)
#829 := (iff #834 #828)
#824 := [rewrite]: #829
#838 := (iff #556 #834)
#833 := (= #555 #550)
#835 := (= #840 #557)
#836 := [rewrite]: #835
#837 := [monotonicity #836]: #833
#827 := [monotonicity #837]: #838
#830 := [trans #827 #824]: #825
#675 := [monotonicity #830]: #674
#819 := [trans #675 #818]: #674
#673 := [quant-inst]: #832
#820 := [mp #673 #819]: #826
#659 := [unit-resolution #820 #959]: #828
#594 := [symm #659]: #834
#604 := (= #27 #570)
decl f9 :: (-> S5 S2)
#491 := (f9 #854)
#842 := (= #491 #570)
#910 := (pattern #59)
#58 := (f9 #57)
#909 := (pattern #58)
#60 := (= #58 #59)
#911 := (forall (vars (?v0 S5)) (:pat #909 #910) #60)
#61 := (forall (vars (?v0 S5)) #60)
#914 := (iff #61 #911)
#912 := (iff #60 #60)
#913 := [refl]: #912
#915 := [quant-intro #913]: #914
#348 := (~ #61 #61)
#391 := (~ #60 #60)
#392 := [refl]: #391
#349 := [nnf-pos #392]: #348
#237 := [asserted]: #61
#356 := [mp~ #237 #349]: #61
#916 := [mp #356 #915]: #911
#571 := (not #911)
#844 := (or #571 #842)
#554 := [quant-inst]: #844
#657 := [unit-resolution #554 #916]: #842
#855 := (= #27 #491)
#35 := (f10 #14 f11)
#894 := (pattern #35)
#32 := (f6 #14)
#893 := (pattern #32)
#36 := (f9 #35)
#33 := (f5 #32)
#37 := (= #33 #36)
#895 := (forall (vars (?v0 int)) (:pat #893 #894) #37)
#38 := (forall (vars (?v0 int)) #37)
#898 := (iff #38 #895)
#896 := (iff #37 #37)
#897 := [refl]: #896
#899 := [quant-intro #897]: #898
#342 := (~ #38 #38)
#387 := (~ #37 #37)
#388 := [refl]: #387
#343 := [nnf-pos #388]: #342
#224 := [asserted]: #38
#344 := [mp~ #224 #343]: #38
#900 := [mp #344 #899]: #895
#497 := (not #895)
#858 := (or #497 #855)
#856 := [quant-inst]: #858
#618 := [unit-resolution #856 #900]: #855
#605 := [trans #618 #657]: #604
#595 := [trans #605 #594]: #606
#584 := [trans #595 #597]: #607
#587 := [trans #584 #599]: #586
#589 := [trans #587 #624]: #588
#591 := [trans #589 #601]: #590
#592 := [trans #591 #603]: #30
#31 := (not #30)
#223 := [asserted]: #31
[unit-resolution #223 #592]: false
unsat
