8c0dd63633148cae631c41716f59fedf31aaf85f 8 0
#2 := false
#1 := true
#8 := (not true)
#29 := (iff #8 false)
#30 := [rewrite]: #29
#28 := [asserted]: #8
[mp #28 #30]: false
unsat
4e759d02d4de42cc8b917c1ee399e500780bf8d9 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (or #9 #10)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := (= f1 f3)
#36 := (not #33)
#39 := (or #33 #36)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #35 #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
964f9fc947278fe63d579d7e942d63db70d69508 37 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#1 := true
#10 := (and #9 true)
#11 := (iff #10 #9)
#12 := (not #11)
#55 := (iff #12 false)
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#48 := (iff #11 true)
#33 := (= f1 f3)
#43 := (iff #33 #33)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#41 := (iff #10 #33)
#36 := (and #33 true)
#39 := (iff #36 #33)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42 #35]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#32 := [asserted]: #12
[mp #32 #56]: false
unsat
6f5c195ed8186ea009f805e2f8ea8ad3b1ee6432 66 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#40 := (= f1 f4)
decl f3 :: S1
#8 := f3
#37 := (= f1 f3)
#43 := (or #37 #40)
#87 := (iff #43 false)
#82 := (or false false)
#85 := (iff #82 false)
#86 := [rewrite]: #85
#83 := (iff #43 #82)
#78 := (iff #40 false)
#69 := (not #40)
#46 := (not #37)
#52 := (and #46 #43)
#60 := (not #52)
#61 := (or #40 #60)
#66 := (not #61)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (not #9)
#12 := (or #9 #11)
#14 := (and #12 #13)
#15 := (implies #14 #11)
#16 := (not #15)
#67 := (iff #16 #66)
#64 := (iff #15 #61)
#57 := (implies #52 #40)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #15 #57)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#55 := (iff #14 #52)
#49 := (and #43 #46)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39]: #47
#44 := (iff #12 #43)
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56 #42]: #58
#65 := [trans #59 #63]: #64
#68 := [monotonicity #65]: #67
#36 := [asserted]: #16
#71 := [mp #36 #68]: #66
#70 := [not-or-elim #71]: #69
#79 := [iff-false #70]: #78
#80 := (iff #37 false)
#72 := [not-or-elim #71]: #52
#73 := [and-elim #72]: #46
#81 := [iff-false #73]: #80
#84 := [monotonicity #81 #79]: #83
#88 := [trans #84 #86]: #87
#74 := [and-elim #72]: #43
[mp #74 #88]: false
unsat
bc6de36d6c86b416e91711bb23067cc8250ac153 59 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
#17 := (and #14 #16)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and #9 #11)
#18 := (or #12 #17)
#19 := (implies #18 #18)
#20 := (not #19)
#74 := (iff #20 false)
#1 := true
#69 := (not true)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #20 #69)
#67 := (iff #19 true)
#53 := (= f1 f6)
#50 := (= f1 f5)
#56 := (and #50 #53)
#44 := (= f1 f4)
#41 := (= f1 f3)
#47 := (and #41 #44)
#59 := (or #47 #56)
#62 := (implies #59 #59)
#65 := (iff #62 true)
#66 := [rewrite]: #65
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#54 := (iff #16 #53)
#55 := [rewrite]: #54
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#58 := [monotonicity #52 #55]: #57
#48 := (iff #12 #47)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#61 := [monotonicity #49 #58]: #60
#64 := [monotonicity #61 #61]: #63
#68 := [trans #64 #66]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#40 := [asserted]: #20
[mp #40 #75]: false
unsat
e334e079d0f61721e404e4ca140ce40c317189ba 94 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
#17 := (and #9 #14)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#16 := (and #14 #11)
#18 := (or #16 #17)
#19 := (implies #9 #18)
#20 := (or #19 #9)
#12 := (and #9 #11)
#15 := (or #12 #14)
#21 := (implies #15 #20)
#22 := (not #21)
#110 := (iff #22 false)
#52 := (= f1 f5)
#43 := (= f1 f3)
#66 := (and #43 #52)
#46 := (= f1 f4)
#61 := (and #46 #52)
#69 := (or #61 #66)
#75 := (not #43)
#76 := (or #75 #69)
#84 := (or #43 #76)
#49 := (and #43 #46)
#55 := (or #49 #52)
#92 := (not #55)
#93 := (or #92 #84)
#98 := (not #93)
#108 := (iff #98 false)
#1 := true
#103 := (not true)
#106 := (iff #103 false)
#107 := [rewrite]: #106
#104 := (iff #98 #103)
#101 := (iff #93 true)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#109 := [trans #105 #107]: #108
#99 := (iff #22 #98)
#96 := (iff #21 #93)
#89 := (implies #55 #84)
#94 := (iff #89 #93)
#95 := [rewrite]: #94
#90 := (iff #21 #89)
#87 := (iff #20 #84)
#81 := (or #76 #43)
#85 := (iff #81 #84)
#86 := [rewrite]: #85
#82 := (iff #20 #81)
#44 := (iff #9 #43)
#45 := [rewrite]: #44
#79 := (iff #19 #76)
#72 := (implies #43 #69)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #19 #72)
#70 := (iff #18 #69)
#67 := (iff #17 #66)
#53 := (iff #14 #52)
#54 := [rewrite]: #53
#68 := [monotonicity #45 #54]: #67
#64 := (iff #16 #61)
#58 := (and #52 #46)
#62 := (iff #58 #61)
#63 := [rewrite]: #62
#59 := (iff #16 #58)
#47 := (iff #11 #46)
#48 := [rewrite]: #47
#60 := [monotonicity #54 #48]: #59
#65 := [trans #60 #63]: #64
#71 := [monotonicity #65 #68]: #70
#74 := [monotonicity #45 #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80 #45]: #82
#88 := [trans #83 #86]: #87
#56 := (iff #15 #55)
#50 := (iff #12 #49)
#51 := [monotonicity #45 #48]: #50
#57 := [monotonicity #51 #54]: #56
#91 := [monotonicity #57 #88]: #90
#97 := [trans #91 #95]: #96
#100 := [monotonicity #97]: #99
#111 := [trans #100 #109]: #110
#42 := [asserted]: #22
[mp #42 #111]: false
unsat
778009f890fff5d244f6b4e04a54c69b4023bcd7 72 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (iff #9 #9)
#11 := (iff #10 #9)
#12 := (iff #11 #9)
#13 := (iff #12 #9)
#14 := (iff #13 #9)
#15 := (iff #14 #9)
#16 := (iff #15 #9)
#17 := (iff #16 #9)
#18 := (iff #17 #9)
#19 := (not #18)
#90 := (iff #19 false)
#1 := true
#85 := (not true)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #19 #85)
#83 := (iff #18 true)
#40 := (= f1 f3)
#43 := (iff #40 #40)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#81 := (iff #18 #43)
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#79 := (iff #17 #40)
#50 := (iff true #40)
#53 := (iff #50 #40)
#54 := [rewrite]: #53
#77 := (iff #17 #50)
#75 := (iff #16 true)
#73 := (iff #16 #43)
#71 := (iff #15 #40)
#69 := (iff #15 #50)
#67 := (iff #14 true)
#65 := (iff #14 #43)
#63 := (iff #13 #40)
#61 := (iff #13 #50)
#59 := (iff #12 true)
#57 := (iff #12 #43)
#55 := (iff #11 #40)
#51 := (iff #11 #50)
#48 := (iff #10 true)
#44 := (iff #10 #43)
#45 := [monotonicity #42 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49 #42]: #51
#56 := [trans #52 #54]: #55
#58 := [monotonicity #56 #42]: #57
#60 := [trans #58 #47]: #59
#62 := [monotonicity #60 #42]: #61
#64 := [trans #62 #54]: #63
#66 := [monotonicity #64 #42]: #65
#68 := [trans #66 #47]: #67
#70 := [monotonicity #68 #42]: #69
#72 := [trans #70 #54]: #71
#74 := [monotonicity #72 #42]: #73
#76 := [trans #74 #47]: #75
#78 := [monotonicity #76 #42]: #77
#80 := [trans #78 #54]: #79
#82 := [monotonicity #80 #42]: #81
#84 := [trans #82 #47]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#39 := [asserted]: #19
[mp #39 #91]: false
unsat
1d6ace6138adeb11b9c9952f896f225452c30f9e 234 0
#2 := false
decl f6 :: S1
#14 := f6
decl f1 :: S1
#4 := f1
#82 := (= f1 f6)
decl f5 :: S1
#12 := f5
#79 := (= f1 f5)
decl f4 :: S1
#10 := f4
#76 := (= f1 f4)
decl f3 :: S1
#8 := f3
#73 := (= f1 f3)
#94 := (or #73 #76 #79 #82)
#301 := (iff #94 false)
#296 := (or false false false false)
#299 := (iff #296 false)
#300 := [rewrite]: #299
#297 := (iff #94 #296)
#253 := (iff #82 false)
#183 := (not #82)
#189 := (or #79 #183)
#261 := (iff #189 #183)
#256 := (or false #183)
#259 := (iff #256 #183)
#260 := [rewrite]: #259
#257 := (iff #189 #256)
#254 := (iff #79 false)
#123 := (not #79)
decl f11 :: S1
#44 := f11
#45 := (= f11 f1)
#46 := (not #45)
#47 := (and #45 #46)
decl f10 :: S1
#41 := f10
#42 := (= f10 f1)
#48 := (or #42 #47)
#43 := (not #42)
#49 := (and #43 #48)
#13 := (= f5 f1)
#50 := (or #13 #49)
#51 := (not #50)
#236 := (iff #51 #123)
#234 := (iff #50 #79)
#229 := (or #79 false)
#232 := (iff #229 #79)
#233 := [rewrite]: #232
#230 := (iff #50 #229)
#227 := (iff #49 false)
#195 := (= f1 f10)
#199 := (not #195)
#222 := (and #199 #195)
#225 := (iff #222 false)
#226 := [rewrite]: #225
#223 := (iff #49 #222)
#220 := (iff #48 #195)
#215 := (or #195 false)
#218 := (iff #215 #195)
#219 := [rewrite]: #218
#216 := (iff #48 #215)
#213 := (iff #47 false)
#202 := (= f1 f11)
#205 := (not #202)
#208 := (and #202 #205)
#211 := (iff #208 false)
#212 := [rewrite]: #211
#209 := (iff #47 #208)
#206 := (iff #46 #205)
#203 := (iff #45 #202)
#204 := [rewrite]: #203
#207 := [monotonicity #204]: #206
#210 := [monotonicity #204 #207]: #209
#214 := [trans #210 #212]: #213
#197 := (iff #42 #195)
#198 := [rewrite]: #197
#217 := [monotonicity #198 #214]: #216
#221 := [trans #217 #219]: #220
#200 := (iff #43 #199)
#201 := [monotonicity #198]: #200
#224 := [monotonicity #201 #221]: #223
#228 := [trans #224 #226]: #227
#80 := (iff #13 #79)
#81 := [rewrite]: #80
#231 := [monotonicity #81 #228]: #230
#235 := [trans #231 #233]: #234
#237 := [monotonicity #235]: #236
#194 := [asserted]: #51
#240 := [mp #194 #237]: #123
#255 := [iff-false #240]: #254
#258 := [monotonicity #255]: #257
#262 := [trans #258 #260]: #261
#15 := (= f6 f1)
#38 := (or #15 false)
#39 := (not #38)
#40 := (or #39 #13)
#192 := (iff #40 #189)
#186 := (or #183 #79)
#190 := (iff #186 #189)
#191 := [rewrite]: #190
#187 := (iff #40 #186)
#184 := (iff #39 #183)
#181 := (iff #38 #82)
#175 := (or #82 false)
#179 := (iff #175 #82)
#180 := [rewrite]: #179
#177 := (iff #38 #175)
#83 := (iff #15 #82)
#84 := [rewrite]: #83
#178 := [monotonicity #84]: #177
#182 := [trans #178 #180]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185 #81]: #187
#193 := [trans #188 #191]: #192
#174 := [asserted]: #40
#196 := [mp #174 #193]: #189
#252 := [mp #196 #262]: #183
#263 := [iff-false #252]: #253
#251 := (iff #76 false)
#168 := (not #76)
#171 := (or #168 #79)
#269 := (iff #171 #168)
#264 := (or #168 false)
#267 := (iff #264 #168)
#268 := [rewrite]: #267
#265 := (iff #171 #264)
#266 := [monotonicity #255]: #265
#270 := [trans #266 #268]: #269
decl f9 :: S1
#31 := f9
#32 := (= f9 f1)
#33 := (not #32)
#34 := (or #32 #33)
#11 := (= f4 f1)
#35 := (and #11 #34)
#36 := (not #35)
#37 := (or #36 #13)
#172 := (iff #37 #171)
#169 := (iff #36 #168)
#166 := (iff #35 #76)
#1 := true
#161 := (and #76 true)
#164 := (iff #161 #76)
#165 := [rewrite]: #164
#162 := (iff #35 #161)
#159 := (iff #34 true)
#147 := (= f1 f9)
#151 := (not #147)
#154 := (or #147 #151)
#157 := (iff #154 true)
#158 := [rewrite]: #157
#155 := (iff #34 #154)
#152 := (iff #33 #151)
#149 := (iff #32 #147)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #150 #153]: #155
#160 := [trans #156 #158]: #159
#77 := (iff #11 #76)
#78 := [rewrite]: #77
#163 := [monotonicity #78 #160]: #162
#167 := [trans #163 #165]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170 #81]: #172
#146 := [asserted]: #37
#176 := [mp #146 #173]: #171
#250 := [mp #176 #270]: #168
#271 := [iff-false #250]: #251
#249 := (iff #73 false)
#140 := (not #73)
#143 := (or #140 #76)
#277 := (iff #143 #140)
#272 := (or #140 false)
#275 := (iff #272 #140)
#276 := [rewrite]: #275
#273 := (iff #143 #272)
#274 := [monotonicity #271]: #273
#278 := [trans #274 #276]: #277
#26 := (not #13)
#27 := (and #13 #26)
#9 := (= f3 f1)
#28 := (or #9 #27)
#29 := (not #28)
#30 := (or #29 #11)
#144 := (iff #30 #143)
#141 := (iff #29 #140)
#138 := (iff #28 #73)
#133 := (or #73 false)
#136 := (iff #133 #73)
#137 := [rewrite]: #136
#134 := (iff #28 #133)
#131 := (iff #27 false)
#126 := (and #79 #123)
#129 := (iff #126 false)
#130 := [rewrite]: #129
#127 := (iff #27 #126)
#124 := (iff #26 #123)
#125 := [monotonicity #81]: #124
#128 := [monotonicity #81 #125]: #127
#132 := [trans #128 #130]: #131
#74 := (iff #9 #73)
#75 := [rewrite]: #74
#135 := [monotonicity #75 #132]: #134
#139 := [trans #135 #137]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142 #78]: #144
#122 := [asserted]: #30
#148 := [mp #122 #145]: #143
#248 := [mp #148 #278]: #140
#279 := [iff-false #248]: #249
#298 := [monotonicity #279 #271 #255 #263]: #297
#302 := [trans #298 #300]: #301
#16 := (or #13 #15)
#17 := (or #11 #16)
#18 := (or #9 #17)
#97 := (iff #18 #94)
#85 := (or #79 #82)
#88 := (or #76 #85)
#91 := (or #73 #88)
#95 := (iff #91 #94)
#96 := [rewrite]: #95
#92 := (iff #18 #91)
#89 := (iff #17 #88)
#86 := (iff #16 #85)
#87 := [monotonicity #81 #84]: #86
#90 := [monotonicity #78 #87]: #89
#93 := [monotonicity #75 #90]: #92
#98 := [trans #93 #96]: #97
#72 := [asserted]: #18
#99 := [mp #72 #98]: #94
[mp #99 #302]: false
unsat
dd0cba0a17795cc066f8c77647c6bcb52b690616 59 0
#2 := false
decl f3 :: (-> S3 S2 S2)
decl f6 :: S2
#17 := f6
decl f4 :: (-> S4 S2 S3)
decl f7 :: S2
#20 := f7
decl f5 :: S4
#8 := f5
#22 := (f4 f5 f7)
#23 := (f3 #22 f6)
#19 := (f4 f5 f6)
#21 := (f3 #19 f7)
#24 := (= #21 #23)
#57 := (not #24)
#18 := (= f6 f6)
#25 := (and #18 #24)
#26 := (not #25)
#58 := (iff #26 #57)
#55 := (iff #25 #24)
#1 := true
#50 := (and true #24)
#53 := (iff #50 #24)
#54 := [rewrite]: #53
#51 := (iff #25 #50)
#48 := (iff #18 true)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#59 := [monotonicity #56]: #58
#47 := [asserted]: #26
#62 := [mp #47 #59]: #57
#9 := (:var 1 S2)
#11 := (:var 0 S2)
#13 := (f4 f5 #11)
#14 := (f3 #13 #9)
#543 := (pattern #14)
#10 := (f4 f5 #9)
#12 := (f3 #10 #11)
#542 := (pattern #12)
#15 := (= #12 #14)
#544 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #542 #543) #15)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#547 := (iff #16 #544)
#545 := (iff #15 #15)
#546 := [refl]: #545
#548 := [quant-intro #546]: #547
#70 := (~ #16 #16)
#68 := (~ #15 #15)
#69 := [refl]: #68
#71 := [nnf-pos #69]: #70
#46 := [asserted]: #16
#61 := [mp~ #46 #71]: #16
#549 := [mp #61 #548]: #544
#125 := (not #544)
#212 := (or #125 #24)
#126 := [quant-inst #17 #20]: #212
[unit-resolution #126 #549 #62]: false
unsat
0863329327da9e45e4d77f7bc111e467c5d58d3c 2526 0
#2 := false
decl f9 :: S1
#26 := f9
decl f1 :: S1
#4 := f1
#493 := (= f1 f9)
decl f20 :: S1
#60 := f20
#629 := (= f1 f20)
decl f21 :: S1
#62 := f21
#632 := (= f1 f21)
#1513 := (not #632)
decl f31 :: S1
#98 := f31
#782 := (= f1 f31)
decl f62 :: S1
#208 := f62
#1242 := (= f1 f62)
decl f58 :: S1
#190 := f58
#1145 := (= f1 f58)
#2559 := (not #1145)
decl f47 :: S1
#152 := f47
#992 := (= f1 f47)
#1817 := (not #782)
#3000 := [hypothesis]: #1817
decl f46 :: S1
#150 := f46
#989 := (= f1 f46)
#2247 := (not #989)
decl f48 :: S1
#157 := f48
#1016 := (= f1 f48)
decl f57 :: S1
#188 := f57
#1142 := (= f1 f57)
#2555 := (not #1142)
decl f45 :: S1
#145 := f45
#965 := (= f1 f45)
#2190 := (not #965)
decl f42 :: S1
#136 := f42
#935 := (= f1 f42)
#3487 := (or #935 #782)
decl f40 :: S1
#129 := f40
#908 := (= f1 f40)
#2125 := (not #935)
#3115 := [hypothesis]: #2125
decl f32 :: S1
#100 := f32
#785 := (= f1 f32)
#1821 := (not #785)
decl f16 :: S1
#47 := f16
#577 := (= f1 f16)
decl f17 :: S1
#49 := f17
#581 := (= f1 f17)
#1421 := (not #581)
decl f28 :: S1
#87 := f28
#734 := (= f1 f28)
#3470 := (or #734 #782 #935)
decl f29 :: S1
#91 := f29
#755 := (= f1 f29)
#1756 := (not #755)
#2064 := (not #908)
#1729 := (not #734)
#2887 := [hypothesis]: #1729
#3447 := (or #2064 #734)
decl f51 :: S1
#167 := f51
#1061 := (= f1 f51)
#2372 := (not #1061)
decl f54 :: S1
#176 := f54
#1091 := (= f1 f54)
decl f56 :: S1
#183 := f56
#1118 := (= f1 f56)
#2498 := (not #1118)
#2437 := (not #1091)
#3180 := [hypothesis]: #2437
#3209 := (or #2559 #1091)
decl f18 :: S1
#53 := f18
#602 := (= f1 f18)
decl f33 :: S1
#105 := f33
#809 := (= f1 f33)
#1878 := (not #809)
decl f36 :: S1
#114 := f36
#839 := (= f1 f36)
#2251 := (not #992)
#3175 := [hypothesis]: #1145
#2600 := (or #2251 #2559)
#153 := (= f47 f1)
#348 := (not #153)
#191 := (= f58 f1)
#389 := (not #191)
#394 := (or #389 #348)
#2603 := (iff #394 #2600)
#2596 := (or #2559 #2251)
#2601 := (iff #2596 #2600)
#2602 := [rewrite]: #2601
#2598 := (iff #394 #2596)
#2252 := (iff #348 #2251)
#993 := (iff #153 #992)
#994 := [rewrite]: #993
#2253 := [monotonicity #994]: #2252
#2560 := (iff #389 #2559)
#1146 := (iff #191 #1145)
#1147 := [rewrite]: #1146
#2561 := [monotonicity #1147]: #2560
#2599 := [monotonicity #2561 #2253]: #2598
#2604 := [trans #2599 #2602]: #2603
#2595 := [asserted]: #394
#2607 := [mp #2595 #2604]: #2600
#3176 := [unit-resolution #2607 #3175]: #2251
#2562 := (or #2555 #2559)
#189 := (= f57 f1)
#388 := (not #189)
#390 := (or #388 #389)
#2563 := (iff #390 #2562)
#2557 := (iff #388 #2555)
#1143 := (iff #189 #1142)
#1144 := [rewrite]: #1143
#2558 := [monotonicity #1144]: #2557
#2564 := [monotonicity #2558 #2561]: #2563
#2554 := [asserted]: #390
#2567 := [mp #2554 #2564]: #2562
#3177 := [unit-resolution #2567 #3175]: #2555
#1172 := (or #1016 #1142)
decl f6 :: S1
#17 := f6
#460 := (= f1 f6)
#1180 := (or #460 #1016 #1142)
#2860 := (iff #1180 #1172)
#2855 := (or false #1016 #1142)
#2858 := (iff #2855 #1172)
#2859 := [rewrite]: #2858
#2856 := (iff #1180 #2855)
#2779 := (iff #460 false)
#464 := (not #460)
#18 := (= f6 f1)
#19 := (not #18)
#465 := (iff #19 #464)
#462 := (iff #18 #460)
#463 := [rewrite]: #462
#466 := [monotonicity #463]: #465
#459 := [asserted]: #19
#469 := [mp #459 #466]: #464
#2780 := [iff-false #469]: #2779
#2857 := [monotonicity #2780]: #2856
#2861 := [trans #2857 #2859]: #2860
#158 := (= f48 f1)
#195 := (or #189 #158)
#196 := (or #18 #195)
#1183 := (iff #196 #1180)
#1177 := (or #460 #1172)
#1181 := (iff #1177 #1180)
#1182 := [rewrite]: #1181
#1178 := (iff #196 #1177)
#1175 := (iff #195 #1172)
#1169 := (or #1142 #1016)
#1173 := (iff #1169 #1172)
#1174 := [rewrite]: #1173
#1170 := (iff #195 #1169)
#1017 := (iff #158 #1016)
#1018 := [rewrite]: #1017
#1171 := [monotonicity #1144 #1018]: #1170
#1176 := [trans #1171 #1174]: #1175
#1179 := [monotonicity #463 #1176]: #1178
#1184 := [trans #1179 #1182]: #1183
#1168 := [asserted]: #196
#1185 := [mp #1168 #1184]: #1180
#2862 := [mp #1185 #2861]: #1172
#3178 := [unit-resolution #2862 #3177]: #1016
#2308 := (not #1016)
#2315 := (or #2247 #2308)
#151 := (= f46 f1)
#347 := (not #151)
#355 := (not #158)
#356 := (or #355 #347)
#2318 := (iff #356 #2315)
#2312 := (or #2308 #2247)
#2316 := (iff #2312 #2315)
#2317 := [rewrite]: #2316
#2313 := (iff #356 #2312)
#2249 := (iff #347 #2247)
#990 := (iff #151 #989)
#991 := [rewrite]: #990
#2250 := [monotonicity #991]: #2249
#2310 := (iff #355 #2308)
#2311 := [monotonicity #1018]: #2310
#2314 := [monotonicity #2311 #2250]: #2313
#2319 := [trans #2314 #2317]: #2318
#2307 := [asserted]: #356
#2322 := [mp #2307 #2319]: #2315
#3179 := [unit-resolution #2322 #3178]: #2247
decl f44 :: S1
#143 := f44
#962 := (= f1 f44)
#2186 := (not #962)
decl f61 :: S1
#204 := f61
#1221 := (= f1 f61)
decl f60 :: S1
#200 := f60
#1199 := (= f1 f60)
#2649 := (not #1199)
decl f37 :: S1
#119 := f37
#863 := (= f1 f37)
#2000 := (not #863)
#2325 := (or #2000 #2308)
#120 := (= f37 f1)
#314 := (not #120)
#357 := (or #355 #314)
#2328 := (iff #357 #2325)
#2321 := (or #2308 #2000)
#2326 := (iff #2321 #2325)
#2327 := [rewrite]: #2326
#2323 := (iff #357 #2321)
#2002 := (iff #314 #2000)
#864 := (iff #120 #863)
#865 := [rewrite]: #864
#2003 := [monotonicity #865]: #2002
#2324 := [monotonicity #2311 #2003]: #2323
#2329 := [trans #2324 #2327]: #2328
#2320 := [asserted]: #357
#2332 := [mp #2320 #2329]: #2325
#3181 := [unit-resolution #2332 #3178]: #2000
#3003 := (or #2649 #989 #992 #863)
#1509 := (not #629)
decl f23 :: S1
#69 := f23
#659 := (= f1 f23)
decl f34 :: S1
#107 := f34
#812 := (= f1 f34)
#1882 := (not #812)
#3071 := [hypothesis]: #2251
#3072 := [hypothesis]: #2247
#1943 := (not #839)
decl f25 :: S1
#76 := f25
#686 := (= f1 f25)
decl f39 :: S1
#125 := f39
#887 := (= f1 f39)
#2037 := (not #887)
decl f50 :: S1
#163 := f50
#1040 := (= f1 f50)
decl f59 :: S1
#197 := f59
#1187 := (= f1 f59)
#2636 := (not #1187)
#3044 := [hypothesis]: #1199
#2656 := (or #2636 #2649)
#198 := (= f59 f1)
#399 := (not #198)
#201 := (= f60 f1)
#401 := (not #201)
#402 := (or #401 #399)
#2659 := (iff #402 #2656)
#2653 := (or #2649 #2636)
#2657 := (iff #2653 #2656)
#2658 := [rewrite]: #2657
#2654 := (iff #402 #2653)
#2638 := (iff #399 #2636)
#1188 := (iff #198 #1187)
#1189 := [rewrite]: #1188
#2639 := [monotonicity #1189]: #2638
#2651 := (iff #401 #2649)
#1201 := (iff #201 #1199)
#1202 := [rewrite]: #1201
#2652 := [monotonicity #1202]: #2651
#2655 := [monotonicity #2652 #2639]: #2654
#2660 := [trans #2655 #2658]: #2659
#2648 := [asserted]: #402
#2663 := [mp #2648 #2660]: #2656
#3041 := [unit-resolution #2663 #3044]: #2636
#1193 := (or #1040 #1187)
#164 := (= f50 f1)
#199 := (or #198 #164)
#1196 := (iff #199 #1193)
#1190 := (or #1187 #1040)
#1194 := (iff #1190 #1193)
#1195 := [rewrite]: #1194
#1191 := (iff #199 #1190)
#1041 := (iff #164 #1040)
#1042 := [rewrite]: #1041
#1192 := [monotonicity #1189 #1042]: #1191
#1197 := [trans #1192 #1195]: #1196
#1186 := [asserted]: #199
#1200 := [mp #1186 #1197]: #1193
#3042 := [unit-resolution #1200 #3041]: #1040
#2345 := (not #1040)
#2366 := (or #2037 #2345)
#126 := (= f39 f1)
#319 := (not #126)
#360 := (not #164)
#363 := (or #360 #319)
#2369 := (iff #363 #2366)
#2362 := (or #2345 #2037)
#2367 := (iff #2362 #2366)
#2368 := [rewrite]: #2367
#2364 := (iff #363 #2362)
#2038 := (iff #319 #2037)
#888 := (iff #126 #887)
#889 := [rewrite]: #888
#2039 := [monotonicity #889]: #2038
#2346 := (iff #360 #2345)
#2347 := [monotonicity #1042]: #2346
#2365 := [monotonicity #2347 #2039]: #2364
#2370 := [trans #2365 #2368]: #2369
#2361 := [asserted]: #363
#2373 := [mp #2361 #2370]: #2366
#3039 := [unit-resolution #2373 #3042]: #2037
decl f26 :: S1
#81 := f26
#710 := (= f1 f26)
#3173 := [hypothesis]: #2000
decl f35 :: S1
#112 := f35
#836 := (= f1 f35)
#1939 := (not #836)
decl f43 :: S1
#138 := f43
#938 := (= f1 f43)
#2129 := (not #938)
decl f52 :: S1
#169 := f52
#1064 := (= f1 f52)
#2376 := (not #1064)
#2666 := (or #2376 #2649)
#170 := (= f52 f1)
#365 := (not #170)
#403 := (or #401 #365)
#2669 := (iff #403 #2666)
#2662 := (or #2649 #2376)
#2667 := (iff #2662 #2666)
#2668 := [rewrite]: #2667
#2664 := (iff #403 #2662)
#2377 := (iff #365 #2376)
#1065 := (iff #170 #1064)
#1066 := [rewrite]: #1065
#2378 := [monotonicity #1066]: #2377
#2665 := [monotonicity #2652 #2378]: #2664
#2670 := [trans #2665 #2668]: #2669
#2661 := [asserted]: #403
#2673 := [mp #2661 #2670]: #2666
#3040 := [unit-resolution #2673 #3044]: #2376
decl f49 :: S1
#161 := f49
#1037 := (= f1 f49)
#2341 := (not #1037)
#2348 := (or #2341 #2345)
#162 := (= f49 f1)
#359 := (not #162)
#361 := (or #359 #360)
#2349 := (iff #361 #2348)
#2343 := (iff #359 #2341)
#1038 := (iff #162 #1037)
#1039 := [rewrite]: #1038
#2344 := [monotonicity #1039]: #2343
#2350 := [monotonicity #2344 #2347]: #2349
#2340 := [asserted]: #361
#2353 := [mp #2340 #2350]: #2348
#3037 := [unit-resolution #2353 #3042]: #2341
decl f41 :: S1
#131 := f41
#911 := (= f1 f41)
#2068 := (not #911)
#3146 := (or #2068 #863 #887)
#1692 := (not #710)
decl f15 :: S1
#44 := f15
#565 := (= f1 f15)
decl f13 :: S1
#38 := f13
#541 := (= f1 f13)
#1373 := (not #541)
decl f11 :: S1
#32 := f11
#517 := (= f1 f11)
#1311 := (not #493)
decl f7 :: S1
#20 := f7
#468 := (= f1 f7)
decl f8 :: S1
#22 := f8
#472 := (= f1 f8)
#1284 := (not #472)
#3174 := [hypothesis]: #2037
decl f38 :: S1
#123 := f38
#884 := (= f1 f38)
#2033 := (not #884)
#3171 := [hypothesis]: #911
#2099 := (or #2033 #2068)
#124 := (= f38 f1)
#318 := (not #124)
#132 := (= f41 f1)
#324 := (not #132)
#328 := (or #324 #318)
#2102 := (iff #328 #2099)
#2095 := (or #2068 #2033)
#2100 := (iff #2095 #2099)
#2101 := [rewrite]: #2100
#2097 := (iff #328 #2095)
#2035 := (iff #318 #2033)
#885 := (iff #124 #884)
#886 := [rewrite]: #885
#2036 := [monotonicity #886]: #2035
#2069 := (iff #324 #2068)
#912 := (iff #132 #911)
#913 := [rewrite]: #912
#2070 := [monotonicity #913]: #2069
#2098 := [monotonicity #2070 #2036]: #2097
#2103 := [trans #2098 #2101]: #2102
#2094 := [asserted]: #328
#2106 := [mp #2094 #2103]: #2099
#3172 := [unit-resolution #2106 #3171]: #2033
#901 := (or #734 #884 #887)
#88 := (= f28 f1)
#127 := (or #126 #88)
#128 := (or #124 #127)
#904 := (iff #128 #901)
#893 := (or #734 #887)
#898 := (or #884 #893)
#902 := (iff #898 #901)
#903 := [rewrite]: #902
#899 := (iff #128 #898)
#896 := (iff #127 #893)
#890 := (or #887 #734)
#894 := (iff #890 #893)
#895 := [rewrite]: #894
#891 := (iff #127 #890)
#735 := (iff #88 #734)
#736 := [rewrite]: #735
#892 := [monotonicity #889 #736]: #891
#897 := [trans #892 #895]: #896
#900 := [monotonicity #886 #897]: #899
#905 := [trans #900 #903]: #904
#883 := [asserted]: #128
#906 := [mp #883 #905]: #901
#3169 := [unit-resolution #906 #3172 #3174]: #734
#1750 := (or #1421 #1729)
#50 := (= f17 f1)
#237 := (not #50)
#278 := (not #88)
#281 := (or #278 #237)
#1753 := (iff #281 #1750)
#1746 := (or #1729 #1421)
#1751 := (iff #1746 #1750)
#1752 := [rewrite]: #1751
#1748 := (iff #281 #1746)
#1422 := (iff #237 #1421)
#582 := (iff #50 #581)
#583 := [rewrite]: #582
#1423 := [monotonicity #583]: #1422
#1730 := (iff #278 #1729)
#1731 := [monotonicity #736]: #1730
#1749 := [monotonicity #1731 #1423]: #1748
#1754 := [trans #1749 #1752]: #1753
#1745 := [asserted]: #281
#1757 := [mp #1745 #1754]: #1750
#3170 := [unit-resolution #1757 #3169]: #1421
#2803 := (or #577 #581)
decl f4 :: S1
#11 := f4
#444 := (= f1 f4)
#595 := (or #444 #577 #581)
#2806 := (iff #595 #2803)
#2800 := (or false #577 #581)
#2804 := (iff #2800 #2803)
#2805 := [rewrite]: #2804
#2801 := (iff #595 #2800)
#2775 := (iff #444 false)
#448 := (not #444)
#12 := (= f4 f1)
#13 := (not #12)
#449 := (iff #13 #448)
#446 := (iff #12 #444)
#447 := [rewrite]: #446
#450 := [monotonicity #447]: #449
#443 := [asserted]: #13
#453 := [mp #443 #450]: #448
#2776 := [iff-false #453]: #2775
#2802 := [monotonicity #2776]: #2801
#2807 := [trans #2802 #2805]: #2806
#51 := (or #50 #12)
#48 := (= f16 f1)
#52 := (or #48 #51)
#598 := (iff #52 #595)
#587 := (or #444 #581)
#592 := (or #577 #587)
#596 := (iff #592 #595)
#597 := [rewrite]: #596
#593 := (iff #52 #592)
#590 := (iff #51 #587)
#584 := (or #581 #444)
#588 := (iff #584 #587)
#589 := [rewrite]: #588
#585 := (iff #51 #584)
#586 := [monotonicity #583 #447]: #585
#591 := [trans #586 #589]: #590
#579 := (iff #48 #577)
#580 := [rewrite]: #579
#594 := [monotonicity #580 #591]: #593
#599 := [trans #594 #597]: #598
#576 := [asserted]: #52
#600 := [mp #576 #599]: #595
#2808 := [mp #600 #2807]: #2803
#3167 := [unit-resolution #2808 #3170]: #577
#1417 := (not #577)
#1503 := (or #1284 #1417)
#23 := (= f8 f1)
#215 := (not #23)
#236 := (not #48)
#248 := (or #236 #215)
#1506 := (iff #248 #1503)
#1499 := (or #1417 #1284)
#1504 := (iff #1499 #1503)
#1505 := [rewrite]: #1504
#1501 := (iff #248 #1499)
#1285 := (iff #215 #1284)
#473 := (iff #23 #472)
#474 := [rewrite]: #473
#1286 := [monotonicity #474]: #1285
#1419 := (iff #236 #1417)
#1420 := [monotonicity #580]: #1419
#1502 := [monotonicity #1420 #1286]: #1501
#1507 := [trans #1502 #1505]: #1506
#1498 := [asserted]: #248
#1510 := [mp #1498 #1507]: #1503
#3168 := [unit-resolution #1510 #3167]: #1284
#2784 := (or #468 #472)
decl f3 :: S1
#8 := f3
#437 := (= f1 f3)
#486 := (or #437 #468 #472)
#2787 := (iff #486 #2784)
#2781 := (or false #468 #472)
#2785 := (iff #2781 #2784)
#2786 := [rewrite]: #2785
#2782 := (iff #486 #2781)
#2772 := (iff #437 false)
#440 := (not #437)
#9 := (= f3 f1)
#10 := (not #9)
#441 := (iff #10 #440)
#438 := (iff #9 #437)
#439 := [rewrite]: #438
#442 := [monotonicity #439]: #441
#436 := [asserted]: #10
#445 := [mp #436 #442]: #440
#2774 := [iff-false #445]: #2772
#2783 := [monotonicity #2774]: #2782
#2788 := [trans #2783 #2786]: #2787
#24 := (or #23 #9)
#21 := (= f7 f1)
#25 := (or #21 #24)
#489 := (iff #25 #486)
#478 := (or #437 #472)
#483 := (or #468 #478)
#487 := (iff #483 #486)
#488 := [rewrite]: #487
#484 := (iff #25 #483)
#481 := (iff #24 #478)
#475 := (or #472 #437)
#479 := (iff #475 #478)
#480 := [rewrite]: #479
#476 := (iff #24 #475)
#477 := [monotonicity #474 #439]: #476
#482 := [trans #477 #480]: #481
#470 := (iff #21 #468)
#471 := [rewrite]: #470
#485 := [monotonicity #471 #482]: #484
#490 := [trans #485 #488]: #489
#467 := [asserted]: #25
#491 := [mp #467 #490]: #486
#2789 := [mp #491 #2788]: #2784
#3165 := [unit-resolution #2789 #3168]: #468
#1281 := (not #468)
#1326 := (or #1281 #1311)
#214 := (not #21)
#27 := (= f9 f1)
#219 := (not #27)
#222 := (or #219 #214)
#1329 := (iff #222 #1326)
#1322 := (or #1311 #1281)
#1327 := (iff #1322 #1326)
#1328 := [rewrite]: #1327
#1324 := (iff #222 #1322)
#1282 := (iff #214 #1281)
#1283 := [monotonicity #471]: #1282
#1313 := (iff #219 #1311)
#494 := (iff #27 #493)
#495 := [rewrite]: #494
#1314 := [monotonicity #495]: #1313
#1325 := [monotonicity #1314 #1283]: #1324
#1330 := [trans #1325 #1328]: #1329
#1321 := [asserted]: #222
#1333 := [mp #1321 #1330]: #1326
#3166 := [unit-resolution #1333 #3165]: #1311
decl f12 :: S1
#34 := f12
#520 := (= f1 f12)
#1346 := (not #520)
decl f30 :: S1
#93 := f30
#758 := (= f1 f30)
#1760 := (not #758)
#2109 := (or #1760 #2068)
#94 := (= f30 f1)
#283 := (not #94)
#329 := (or #324 #283)
#2112 := (iff #329 #2109)
#2105 := (or #2068 #1760)
#2110 := (iff #2105 #2109)
#2111 := [rewrite]: #2110
#2107 := (iff #329 #2105)
#1761 := (iff #283 #1760)
#759 := (iff #94 #758)
#760 := [rewrite]: #759
#1762 := [monotonicity #760]: #1761
#2108 := [monotonicity #2070 #1762]: #2107
#2113 := [trans #2108 #2111]: #2112
#2104 := [asserted]: #329
#2116 := [mp #2104 #2113]: #2109
#3163 := [unit-resolution #2116 #3171]: #1760
decl f27 :: S1
#85 := f27
#731 := (= f1 f27)
#1725 := (not #731)
#1732 := (or #1725 #1729)
#86 := (= f27 f1)
#277 := (not #86)
#279 := (or #277 #278)
#1733 := (iff #279 #1732)
#1727 := (iff #277 #1725)
#732 := (iff #86 #731)
#733 := [rewrite]: #732
#1728 := [monotonicity #733]: #1727
#1734 := [monotonicity #1728 #1731]: #1733
#1724 := [asserted]: #279
#1737 := [mp #1724 #1734]: #1732
#3164 := [unit-resolution #1737 #3169]: #1725
decl f19 :: S1
#55 := f19
#605 := (= f1 f19)
#1452 := (not #605)
#1483 := (or #1417 #1452)
#56 := (= f19 f1)
#242 := (not #56)
#246 := (or #242 #236)
#1486 := (iff #246 #1483)
#1479 := (or #1452 #1417)
#1484 := (iff #1479 #1483)
#1485 := [rewrite]: #1484
#1481 := (iff #246 #1479)
#1453 := (iff #242 #1452)
#606 := (iff #56 #605)
#607 := [rewrite]: #606
#1454 := [monotonicity #607]: #1453
#1482 := [monotonicity #1454 #1420]: #1481
#1487 := [trans #1482 #1485]: #1486
#1478 := [asserted]: #246
#1490 := [mp #1478 #1487]: #1483
#3161 := [unit-resolution #1490 #3167]: #1452
#775 := (or #605 #731 #755 #758)
#95 := (or #86 #56)
#96 := (or #94 #95)
#92 := (= f29 f1)
#97 := (or #92 #96)
#778 := (iff #97 #775)
#764 := (or #605 #731)
#769 := (or #758 #764)
#772 := (or #755 #769)
#776 := (iff #772 #775)
#777 := [rewrite]: #776
#773 := (iff #97 #772)
#770 := (iff #96 #769)
#767 := (iff #95 #764)
#761 := (or #731 #605)
#765 := (iff #761 #764)
#766 := [rewrite]: #765
#762 := (iff #95 #761)
#763 := [monotonicity #733 #607]: #762
#768 := [trans #763 #766]: #767
#771 := [monotonicity #760 #768]: #770
#756 := (iff #92 #755)
#757 := [rewrite]: #756
#774 := [monotonicity #757 #771]: #773
#779 := [trans #774 #777]: #778
#754 := [asserted]: #97
#780 := [mp #754 #779]: #775
#3162 := [unit-resolution #780 #3161 #3164 #3163]: #755
#1872 := (or #1513 #1756)
#63 := (= f21 f1)
#250 := (not #63)
#282 := (not #92)
#297 := (or #282 #250)
#1875 := (iff #297 #1872)
#1868 := (or #1756 #1513)
#1873 := (iff #1868 #1872)
#1874 := [rewrite]: #1873
#1870 := (iff #297 #1868)
#1514 := (iff #250 #1513)
#633 := (iff #63 #632)
#634 := [rewrite]: #633
#1515 := [monotonicity #634]: #1514
#1758 := (iff #282 #1756)
#1759 := [monotonicity #757]: #1758
#1871 := [monotonicity #1759 #1515]: #1870
#1876 := [trans #1871 #1874]: #1875
#1867 := [asserted]: #297
#1879 := [mp #1867 #1876]: #1872
#3159 := [unit-resolution #1879 #3162]: #1513
#1448 := (not #602)
#1463 := (or #1417 #1448)
#54 := (= f18 f1)
#241 := (not #54)
#244 := (or #241 #236)
#1466 := (iff #244 #1463)
#1459 := (or #1448 #1417)
#1464 := (iff #1459 #1463)
#1465 := [rewrite]: #1464
#1461 := (iff #244 #1459)
#1450 := (iff #241 #1448)
#603 := (iff #54 #602)
#604 := [rewrite]: #603
#1451 := [monotonicity #604]: #1450
#1462 := [monotonicity #1451 #1420]: #1461
#1467 := [trans #1462 #1465]: #1466
#1458 := [asserted]: #244
#1470 := [mp #1458 #1467]: #1463
#3160 := [unit-resolution #1470 #3167]: #1448
decl f10 :: S1
#28 := f10
#496 := (= f1 f10)
#1315 := (not #496)
#1336 := (or #1281 #1315)
#29 := (= f10 f1)
#220 := (not #29)
#223 := (or #220 #214)
#1339 := (iff #223 #1336)
#1332 := (or #1315 #1281)
#1337 := (iff #1332 #1336)
#1338 := [rewrite]: #1337
#1334 := (iff #223 #1332)
#1316 := (iff #220 #1315)
#497 := (iff #29 #496)
#498 := [rewrite]: #497
#1317 := [monotonicity #498]: #1316
#1335 := [monotonicity #1317 #1283]: #1334
#1340 := [trans #1335 #1338]: #1339
#1331 := [asserted]: #223
#1343 := [mp #1331 #1340]: #1336
#3157 := [unit-resolution #1343 #3165]: #1315
#649 := (or #496 #602 #629 #632)
#64 := (or #54 #29)
#65 := (or #63 #64)
#61 := (= f20 f1)
#66 := (or #61 #65)
#652 := (iff #66 #649)
#638 := (or #496 #602)
#643 := (or #632 #638)
#646 := (or #629 #643)
#650 := (iff #646 #649)
#651 := [rewrite]: #650
#647 := (iff #66 #646)
#644 := (iff #65 #643)
#641 := (iff #64 #638)
#635 := (or #602 #496)
#639 := (iff #635 #638)
#640 := [rewrite]: #639
#636 := (iff #64 #635)
#637 := [monotonicity #604 #498]: #636
#642 := [trans #637 #640]: #641
#645 := [monotonicity #634 #642]: #644
#630 := (iff #61 #629)
#631 := [rewrite]: #630
#648 := [monotonicity #631 #645]: #647
#653 := [trans #648 #651]: #652
#628 := [asserted]: #66
#654 := [mp #628 #653]: #649
#3158 := [unit-resolution #654 #3157 #3160 #3159]: #629
#1625 := (or #1346 #1509)
#35 := (= f12 f1)
#225 := (not #35)
#249 := (not #61)
#264 := (or #249 #225)
#1628 := (iff #264 #1625)
#1621 := (or #1509 #1346)
#1626 := (iff #1621 #1625)
#1627 := [rewrite]: #1626
#1623 := (iff #264 #1621)
#1347 := (iff #225 #1346)
#521 := (iff #35 #520)
#522 := [rewrite]: #521
#1348 := [monotonicity #522]: #1347
#1511 := (iff #249 #1509)
#1512 := [monotonicity #631]: #1511
#1624 := [monotonicity #1512 #1348]: #1623
#1629 := [trans #1624 #1627]: #1628
#1620 := [asserted]: #264
#1632 := [mp #1620 #1629]: #1625
#3155 := [unit-resolution #1632 #3158]: #1346
#534 := (or #493 #517 #520)
#36 := (or #35 #27)
#33 := (= f11 f1)
#37 := (or #33 #36)
#537 := (iff #37 #534)
#526 := (or #493 #520)
#531 := (or #517 #526)
#535 := (iff #531 #534)
#536 := [rewrite]: #535
#532 := (iff #37 #531)
#529 := (iff #36 #526)
#523 := (or #520 #493)
#527 := (iff #523 #526)
#528 := [rewrite]: #527
#524 := (iff #36 #523)
#525 := [monotonicity #522 #495]: #524
#530 := [trans #525 #528]: #529
#518 := (iff #33 #517)
#519 := [rewrite]: #518
#533 := [monotonicity #519 #530]: #532
#538 := [trans #533 #536]: #537
#516 := [asserted]: #37
#539 := [mp #516 #538]: #534
#3156 := [unit-resolution #539 #3155 #3166]: #517
#1342 := (not #517)
#1388 := (or #1342 #1373)
#224 := (not #33)
#39 := (= f13 f1)
#229 := (not #39)
#232 := (or #229 #224)
#1391 := (iff #232 #1388)
#1384 := (or #1373 #1342)
#1389 := (iff #1384 #1388)
#1390 := [rewrite]: #1389
#1386 := (iff #232 #1384)
#1344 := (iff #224 #1342)
#1345 := [monotonicity #519]: #1344
#1375 := (iff #229 #1373)
#542 := (iff #39 #541)
#543 := [rewrite]: #542
#1376 := [monotonicity #543]: #1375
#1387 := [monotonicity #1376 #1345]: #1386
#1392 := [trans #1387 #1390]: #1391
#1383 := [asserted]: #232
#1395 := [mp #1383 #1392]: #1388
#3153 := [unit-resolution #1395 #3156]: #1373
#571 := (or #541 #565)
#45 := (= f15 f1)
#46 := (or #45 #39)
#574 := (iff #46 #571)
#568 := (or #565 #541)
#572 := (iff #568 #571)
#573 := [rewrite]: #572
#569 := (iff #46 #568)
#566 := (iff #45 #565)
#567 := [rewrite]: #566
#570 := [monotonicity #567 #543]: #569
#575 := [trans #570 #573]: #574
#564 := [asserted]: #46
#578 := [mp #564 #575]: #571
#3154 := [unit-resolution #578 #3153]: #565
#1404 := (not #565)
#1709 := (or #1404 #1692)
#234 := (not #45)
#82 := (= f26 f1)
#273 := (not #82)
#275 := (or #273 #234)
#1712 := (iff #275 #1709)
#1705 := (or #1692 #1404)
#1710 := (iff #1705 #1709)
#1711 := [rewrite]: #1710
#1707 := (iff #275 #1705)
#1406 := (iff #234 #1404)
#1407 := [monotonicity #567]: #1406
#1694 := (iff #273 #1692)
#711 := (iff #82 #710)
#712 := [rewrite]: #711
#1695 := [monotonicity #712]: #1694
#1708 := [monotonicity #1695 #1407]: #1707
#1713 := [trans #1708 #1711]: #1712
#1704 := [asserted]: #275
#1716 := [mp #1704 #1713]: #1709
#3151 := [unit-resolution #1716 #3154]: #1692
#877 := (or #710 #836 #863)
#113 := (= f35 f1)
#121 := (or #113 #82)
#122 := (or #120 #121)
#880 := (iff #122 #877)
#869 := (or #710 #836)
#874 := (or #863 #869)
#878 := (iff #874 #877)
#879 := [rewrite]: #878
#875 := (iff #122 #874)
#872 := (iff #121 #869)
#866 := (or #836 #710)
#870 := (iff #866 #869)
#871 := [rewrite]: #870
#867 := (iff #121 #866)
#837 := (iff #113 #836)
#838 := [rewrite]: #837
#868 := [monotonicity #838 #712]: #867
#873 := [trans #868 #871]: #872
#876 := [monotonicity #865 #873]: #875
#881 := [trans #876 #879]: #880
#862 := [asserted]: #122
#882 := [mp #862 #881]: #877
#3152 := [unit-resolution #882 #3151 #3173]: #836
decl f14 :: S1
#40 := f14
#544 := (= f1 f14)
#1377 := (not #544)
#1398 := (or #1342 #1377)
#41 := (= f14 f1)
#230 := (not #41)
#233 := (or #230 #224)
#1401 := (iff #233 #1398)
#1394 := (or #1377 #1342)
#1399 := (iff #1394 #1398)
#1400 := [rewrite]: #1399
#1396 := (iff #233 #1394)
#1378 := (iff #230 #1377)
#545 := (iff #41 #544)
#546 := [rewrite]: #545
#1379 := [monotonicity #546]: #1378
#1397 := [monotonicity #1379 #1345]: #1396
#1402 := [trans #1397 #1400]: #1401
#1393 := [asserted]: #233
#1405 := [mp #1393 #1402]: #1398
#3149 := [unit-resolution #1405 #3156]: #1377
decl f22 :: S1
#67 := f22
#656 := (= f1 f22)
#1570 := (not #656)
#1585 := (or #1509 #1570)
#68 := (= f22 f1)
#257 := (not #68)
#260 := (or #257 #249)
#1588 := (iff #260 #1585)
#1581 := (or #1570 #1509)
#1586 := (iff #1581 #1585)
#1587 := [rewrite]: #1586
#1583 := (iff #260 #1581)
#1572 := (iff #257 #1570)
#657 := (iff #68 #656)
#658 := [rewrite]: #657
#1573 := [monotonicity #658]: #1572
#1584 := [monotonicity #1573 #1512]: #1583
#1589 := [trans #1584 #1587]: #1588
#1580 := [asserted]: #260
#1592 := [mp #1580 #1589]: #1585
#3150 := [unit-resolution #1592 #3158]: #1570
decl f24 :: S1
#74 := f24
#683 := (= f1 f24)
#1631 := (not #683)
#1719 := (or #1404 #1631)
#75 := (= f24 f1)
#265 := (not #75)
#276 := (or #265 #234)
#1722 := (iff #276 #1719)
#1715 := (or #1631 #1404)
#1720 := (iff #1715 #1719)
#1721 := [rewrite]: #1720
#1717 := (iff #276 #1715)
#1633 := (iff #265 #1631)
#684 := (iff #75 #683)
#685 := [rewrite]: #684
#1634 := [monotonicity #685]: #1633
#1718 := [monotonicity #1634 #1407]: #1717
#1723 := [trans #1718 #1721]: #1722
#1714 := [asserted]: #276
#1726 := [mp #1714 #1723]: #1719
#3147 := [unit-resolution #1726 #3154]: #1631
#703 := (or #544 #656 #683 #686)
#78 := (or #68 #41)
#77 := (= f25 f1)
#79 := (or #77 #78)
#80 := (or #75 #79)
#706 := (iff #80 #703)
#692 := (or #544 #656)
#697 := (or #686 #692)
#700 := (or #683 #697)
#704 := (iff #700 #703)
#705 := [rewrite]: #704
#701 := (iff #80 #700)
#698 := (iff #79 #697)
#695 := (iff #78 #692)
#689 := (or #656 #544)
#693 := (iff #689 #692)
#694 := [rewrite]: #693
#690 := (iff #78 #689)
#691 := [monotonicity #658 #546]: #690
#696 := [trans #691 #694]: #695
#687 := (iff #77 #686)
#688 := [rewrite]: #687
#699 := [monotonicity #688 #696]: #698
#702 := [monotonicity #685 #699]: #701
#707 := [trans #702 #705]: #706
#682 := [asserted]: #80
#708 := [mp #682 #707]: #703
#3148 := [unit-resolution #708 #3147 #3150 #3149]: #686
#1635 := (not #686)
#1964 := (or #1635 #1939)
#266 := (not #77)
#306 := (not #113)
#310 := (or #306 #266)
#1967 := (iff #310 #1964)
#1960 := (or #1939 #1635)
#1965 := (iff #1960 #1964)
#1966 := [rewrite]: #1965
#1962 := (iff #310 #1960)
#1636 := (iff #266 #1635)
#1637 := [monotonicity #688]: #1636
#1941 := (iff #306 #1939)
#1942 := [monotonicity #838]: #1941
#1963 := [monotonicity #1942 #1637]: #1962
#1968 := [trans #1963 #1966]: #1967
#1959 := [asserted]: #310
#1971 := [mp #1959 #1968]: #1964
#3145 := [unit-resolution #1971 #3148 #3152]: false
#3143 := [lemma #3145]: #3146
#3038 := [unit-resolution #3143 #3039 #3173]: #2068
#1081 := (or #911 #1037 #1061 #1064)
#171 := (or #162 #132)
#172 := (or #170 #171)
#168 := (= f51 f1)
#173 := (or #168 #172)
#1084 := (iff #173 #1081)
#1070 := (or #911 #1037)
#1075 := (or #1064 #1070)
#1078 := (or #1061 #1075)
#1082 := (iff #1078 #1081)
#1083 := [rewrite]: #1082
#1079 := (iff #173 #1078)
#1076 := (iff #172 #1075)
#1073 := (iff #171 #1070)
#1067 := (or #1037 #911)
#1071 := (iff #1067 #1070)
#1072 := [rewrite]: #1071
#1068 := (iff #171 #1067)
#1069 := [monotonicity #1039 #913]: #1068
#1074 := [trans #1069 #1072]: #1073
#1077 := [monotonicity #1066 #1074]: #1076
#1062 := (iff #168 #1061)
#1063 := [rewrite]: #1062
#1080 := [monotonicity #1063 #1077]: #1079
#1085 := [trans #1080 #1083]: #1084
#1060 := [asserted]: #173
#1086 := [mp #1060 #1085]: #1081
#3035 := [unit-resolution #1086 #3038 #3037 #3040]: #1061
#2488 := (or #2129 #2372)
#139 := (= f43 f1)
#332 := (not #139)
#364 := (not #168)
#379 := (or #364 #332)
#2491 := (iff #379 #2488)
#2484 := (or #2372 #2129)
#2489 := (iff #2484 #2488)
#2490 := [rewrite]: #2489
#2486 := (iff #379 #2484)
#2130 := (iff #332 #2129)
#939 := (iff #139 #938)
#940 := [rewrite]: #939
#2131 := [monotonicity #940]: #2130
#2374 := (iff #364 #2372)
#2375 := [monotonicity #1063]: #2374
#2487 := [monotonicity #2375 #2131]: #2486
#2492 := [trans #2487 #2490]: #2491
#2483 := [asserted]: #379
#2495 := [mp #2483 #2492]: #2488
#3036 := [unit-resolution #2495 #3035]: #2129
#3046 := (or #1939 #938 #887 #989 #992)
#3069 := [hypothesis]: #836
#1946 := (or #1939 #1943)
#115 := (= f36 f1)
#307 := (not #115)
#308 := (or #306 #307)
#1947 := (iff #308 #1946)
#1944 := (iff #307 #1943)
#840 := (iff #115 #839)
#841 := [rewrite]: #840
#1945 := [monotonicity #841]: #1944
#1948 := [monotonicity #1942 #1945]: #1947
#1938 := [asserted]: #308
#1951 := [mp #1938 #1948]: #1946
#3070 := [unit-resolution #1951 #3069]: #1943
#1009 := (or #839 #962 #989 #992)
#144 := (= f44 f1)
#154 := (or #144 #115)
#155 := (or #153 #154)
#156 := (or #151 #155)
#1012 := (iff #156 #1009)
#998 := (or #839 #962)
#1003 := (or #992 #998)
#1006 := (or #989 #1003)
#1010 := (iff #1006 #1009)
#1011 := [rewrite]: #1010
#1007 := (iff #156 #1006)
#1004 := (iff #155 #1003)
#1001 := (iff #154 #998)
#995 := (or #962 #839)
#999 := (iff #995 #998)
#1000 := [rewrite]: #999
#996 := (iff #154 #995)
#963 := (iff #144 #962)
#964 := [rewrite]: #963
#997 := [monotonicity #964 #841]: #996
#1002 := [trans #997 #1000]: #1001
#1005 := [monotonicity #994 #1002]: #1004
#1008 := [monotonicity #991 #1005]: #1007
#1013 := [trans #1008 #1011]: #1012
#988 := [asserted]: #156
#1014 := [mp #988 #1013]: #1009
#3067 := [unit-resolution #1014 #3070 #3072 #3071]: #962
#2211 := (or #1882 #2186)
#108 := (= f34 f1)
#299 := (not #108)
#339 := (not #144)
#343 := (or #339 #299)
#2214 := (iff #343 #2211)
#2207 := (or #2186 #1882)
#2212 := (iff #2207 #2211)
#2213 := [rewrite]: #2212
#2209 := (iff #343 #2207)
#1883 := (iff #299 #1882)
#813 := (iff #108 #812)
#814 := [rewrite]: #813
#1884 := [monotonicity #814]: #1883
#2188 := (iff #339 #2186)
#2189 := [monotonicity #964]: #2188
#2210 := [monotonicity #2189 #1884]: #2209
#2215 := [trans #2210 #2213]: #2214
#2206 := [asserted]: #343
#2218 := [mp #2206 #2215]: #2211
#3068 := [unit-resolution #2218 #3067]: #1882
#1954 := (or #1878 #1939)
#106 := (= f33 f1)
#298 := (not #106)
#309 := (or #306 #298)
#1957 := (iff #309 #1954)
#1950 := (or #1939 #1878)
#1955 := (iff #1950 #1954)
#1956 := [rewrite]: #1955
#1952 := (iff #309 #1950)
#1880 := (iff #298 #1878)
#810 := (iff #106 #809)
#811 := [rewrite]: #810
#1881 := [monotonicity #811]: #1880
#1953 := [monotonicity #1942 #1881]: #1952
#1958 := [trans #1953 #1956]: #1957
#1949 := [asserted]: #309
#1961 := [mp #1949 #1958]: #1954
#3065 := [unit-resolution #1961 #3069]: #1878
#2201 := (or #2125 #2186)
#137 := (= f42 f1)
#331 := (not #137)
#342 := (or #339 #331)
#2204 := (iff #342 #2201)
#2197 := (or #2186 #2125)
#2202 := (iff #2197 #2201)
#2203 := [rewrite]: #2202
#2199 := (iff #342 #2197)
#2127 := (iff #331 #2125)
#936 := (iff #137 #935)
#937 := [rewrite]: #936
#2128 := [monotonicity #937]: #2127
#2200 := [monotonicity #2189 #2128]: #2199
#2205 := [trans #2200 #2203]: #2204
#2196 := [asserted]: #342
#2208 := [mp #2196 #2205]: #2201
#3066 := [unit-resolution #2208 #3067]: #2125
#3116 := [hypothesis]: #2129
#3083 := (or #1729 #938 #935 #809 #812)
#3103 := [hypothesis]: #734
#3104 := [unit-resolution #1757 #3103]: #1421
#3101 := [unit-resolution #2808 #3104]: #577
#3102 := [unit-resolution #1510 #3101]: #1284
#3099 := [unit-resolution #2789 #3102]: #468
#3100 := [unit-resolution #1343 #3099]: #1315
#3097 := [unit-resolution #1470 #3101]: #1448
#3098 := [hypothesis]: #1882
#3095 := [hypothesis]: #1878
#3096 := [unit-resolution #1490 #3101]: #1452
#3093 := [unit-resolution #1737 #3103]: #1725
#3105 := (or #1817 #731 #605 #938 #935)
#3113 := [hypothesis]: #782
#1824 := (or #1817 #1821)
#101 := (= f32 f1)
#291 := (not #101)
#99 := (= f31 f1)
#290 := (not #99)
#292 := (or #290 #291)
#1825 := (iff #292 #1824)
#1822 := (iff #291 #1821)
#786 := (iff #101 #785)
#787 := [rewrite]: #786
#1823 := [monotonicity #787]: #1822
#1819 := (iff #290 #1817)
#783 := (iff #99 #782)
#784 := [rewrite]: #783
#1820 := [monotonicity #784]: #1819
#1826 := [monotonicity #1820 #1823]: #1825
#1816 := [asserted]: #292
#1829 := [mp #1816 #1826]: #1824
#3114 := [unit-resolution #1829 #3113]: #1821
#955 := (or #785 #908 #935 #938)
#130 := (= f40 f1)
#140 := (or #130 #101)
#141 := (or #139 #140)
#142 := (or #137 #141)
#958 := (iff #142 #955)
#944 := (or #785 #908)
#949 := (or #938 #944)
#952 := (or #935 #949)
#956 := (iff #952 #955)
#957 := [rewrite]: #956
#953 := (iff #142 #952)
#950 := (iff #141 #949)
#947 := (iff #140 #944)
#941 := (or #908 #785)
#945 := (iff #941 #944)
#946 := [rewrite]: #945
#942 := (iff #140 #941)
#909 := (iff #130 #908)
#910 := [rewrite]: #909
#943 := [monotonicity #910 #787]: #942
#948 := [trans #943 #946]: #947
#951 := [monotonicity #940 #948]: #950
#954 := [monotonicity #937 #951]: #953
#959 := [trans #954 #957]: #958
#934 := [asserted]: #142
#960 := [mp #934 #959]: #955
#3111 := [unit-resolution #960 #3114 #3116 #3115]: #908
#3112 := [hypothesis]: #1452
#3109 := [hypothesis]: #1725
#1832 := (or #1756 #1817)
#293 := (or #290 #282)
#1835 := (iff #293 #1832)
#1828 := (or #1817 #1756)
#1833 := (iff #1828 #1832)
#1834 := [rewrite]: #1833
#1830 := (iff #293 #1828)
#1831 := [monotonicity #1820 #1759]: #1830
#1836 := [trans #1831 #1834]: #1835
#1827 := [asserted]: #293
#1839 := [mp #1827 #1836]: #1832
#3110 := [unit-resolution #1839 #3113]: #1756
#3107 := [unit-resolution #780 #3110 #3109 #3112]: #758
#2089 := (or #1760 #2064)
#323 := (not #130)
#327 := (or #323 #283)
#2092 := (iff #327 #2089)
#2085 := (or #2064 #1760)
#2090 := (iff #2085 #2089)
#2091 := [rewrite]: #2090
#2087 := (iff #327 #2085)
#2066 := (iff #323 #2064)
#2067 := [monotonicity #910]: #2066
#2088 := [monotonicity #2067 #1762]: #2087
#2093 := [trans #2088 #2091]: #2092
#2084 := [asserted]: #327
#2096 := [mp #2084 #2093]: #2089
#3108 := [unit-resolution #2096 #3107 #3111]: false
#3106 := [lemma #3108]: #3105
#3094 := [unit-resolution #3106 #3093 #3096 #3116 #3115]: #1817
#829 := (or #659 #782 #809 #812)
#70 := (= f23 f1)
#109 := (or #99 #70)
#110 := (or #108 #109)
#111 := (or #106 #110)
#832 := (iff #111 #829)
#818 := (or #659 #782)
#823 := (or #812 #818)
#826 := (or #809 #823)
#830 := (iff #826 #829)
#831 := [rewrite]: #830
#827 := (iff #111 #826)
#824 := (iff #110 #823)
#821 := (iff #109 #818)
#815 := (or #782 #659)
#819 := (iff #815 #818)
#820 := [rewrite]: #819
#816 := (iff #109 #815)
#660 := (iff #70 #659)
#661 := [rewrite]: #660
#817 := [monotonicity #784 #661]: #816
#822 := [trans #817 #820]: #821
#825 := [monotonicity #814 #822]: #824
#828 := [monotonicity #811 #825]: #827
#833 := [trans #828 #831]: #832
#808 := [asserted]: #111
#834 := [mp #808 #833]: #829
#3091 := [unit-resolution #834 #3094 #3095 #3098]: #659
#1574 := (not #659)
#1605 := (or #1509 #1574)
#258 := (not #70)
#262 := (or #258 #249)
#1608 := (iff #262 #1605)
#1601 := (or #1574 #1509)
#1606 := (iff #1601 #1605)
#1607 := [rewrite]: #1606
#1603 := (iff #262 #1601)
#1575 := (iff #258 #1574)
#1576 := [monotonicity #661]: #1575
#1604 := [monotonicity #1576 #1512]: #1603
#1609 := [trans #1604 #1607]: #1608
#1600 := [asserted]: #262
#1612 := [mp #1600 #1609]: #1605
#3092 := [unit-resolution #1612 #3091]: #1509
#3089 := [unit-resolution #654 #3092 #3097 #3100]: #632
#1862 := (or #1513 #1821)
#296 := (or #291 #250)
#1865 := (iff #296 #1862)
#1858 := (or #1821 #1513)
#1863 := (iff #1858 #1862)
#1864 := [rewrite]: #1863
#1860 := (iff #296 #1858)
#1861 := [monotonicity #1823 #1515]: #1860
#1866 := [trans #1861 #1864]: #1865
#1857 := [asserted]: #296
#1869 := [mp #1857 #1866]: #1862
#3090 := [unit-resolution #1869 #3089]: #1821
#3087 := [unit-resolution #960 #3090 #3116 #3115]: #908
#3088 := [unit-resolution #1879 #3089]: #1756
#3085 := [unit-resolution #780 #3088 #3093 #3096]: #758
#3086 := [unit-resolution #2096 #3085 #3087]: false
#3084 := [lemma #3086]: #3083
#3063 := [unit-resolution #3084 #3066 #3116 #3065 #3068]: #1729
#3064 := [unit-resolution #906 #3063 #3174]: #884
#2079 := (or #2033 #2064)
#326 := (or #323 #318)
#2082 := (iff #326 #2079)
#2075 := (or #2064 #2033)
#2080 := (iff #2075 #2079)
#2081 := [rewrite]: #2080
#2077 := (iff #326 #2075)
#2078 := [monotonicity #2067 #2036]: #2077
#2083 := [trans #2078 #2081]: #2082
#2074 := [asserted]: #326
#2086 := [mp #2074 #2083]: #2079
#3061 := [unit-resolution #2086 #3064]: #2064
#3062 := [unit-resolution #960 #3061 #3116 #3066]: #785
#3059 := [unit-resolution #1829 #3062]: #1817
#3060 := [unit-resolution #834 #3059 #3065 #3068]: #659
#3057 := [unit-resolution #1612 #3060]: #1509
#3058 := [unit-resolution #1869 #3062]: #1513
#1852 := (or #1756 #1821)
#295 := (or #291 #282)
#1855 := (iff #295 #1852)
#1848 := (or #1821 #1756)
#1853 := (iff #1848 #1852)
#1854 := [rewrite]: #1853
#1850 := (iff #295 #1848)
#1851 := [monotonicity #1823 #1759]: #1850
#1856 := [trans #1851 #1854]: #1855
#1847 := [asserted]: #295
#1859 := [mp #1847 #1856]: #1852
#3055 := [unit-resolution #1859 #3062]: #1756
#2119 := (or #1760 #2033)
#330 := (or #318 #283)
#2122 := (iff #330 #2119)
#2115 := (or #2033 #1760)
#2120 := (iff #2115 #2119)
#2121 := [rewrite]: #2120
#2117 := (iff #330 #2115)
#2118 := [monotonicity #2036 #1762]: #2117
#2123 := [trans #2118 #2121]: #2122
#2114 := [asserted]: #330
#2126 := [mp #2114 #2123]: #2119
#3056 := [unit-resolution #2126 #3064]: #1760
#3073 := (or #1417 #632 #629)
#3081 := [hypothesis]: #1509
#3082 := [hypothesis]: #1513
#3079 := [hypothesis]: #577
#3080 := [unit-resolution #1470 #3079]: #1448
#3077 := [unit-resolution #654 #3080 #3082 #3081]: #496
#3078 := [unit-resolution #1510 #3079]: #1284
#3075 := [unit-resolution #2789 #3078]: #468
#3076 := [unit-resolution #1343 #3075 #3077]: false
#3074 := [lemma #3076]: #3073
#3053 := [unit-resolution #3074 #3058 #3057]: #1417
#3054 := [unit-resolution #2808 #3053]: #581
#1740 := (or #1421 #1725)
#280 := (or #277 #237)
#1743 := (iff #280 #1740)
#1736 := (or #1725 #1421)
#1741 := (iff #1736 #1740)
#1742 := [rewrite]: #1741
#1738 := (iff #280 #1736)
#1739 := [monotonicity #1728 #1423]: #1738
#1744 := [trans #1739 #1742]: #1743
#1735 := [asserted]: #280
#1747 := [mp #1735 #1744]: #1740
#3051 := [unit-resolution #1747 #3054]: #1725
#3052 := [unit-resolution #780 #3051 #3056 #3055]: #605
#1455 := (or #1448 #1452)
#243 := (or #241 #242)
#1456 := (iff #243 #1455)
#1457 := [monotonicity #1451 #1454]: #1456
#1447 := [asserted]: #243
#1460 := [mp #1447 #1457]: #1455
#3049 := [unit-resolution #1460 #3052]: #1448
#3050 := [unit-resolution #654 #3049 #3058 #3057]: #496
#1493 := (or #1284 #1452)
#247 := (or #242 #215)
#1496 := (iff #247 #1493)
#1489 := (or #1452 #1284)
#1494 := (iff #1489 #1493)
#1495 := [rewrite]: #1494
#1491 := (iff #247 #1489)
#1492 := [monotonicity #1454 #1286]: #1491
#1497 := [trans #1492 #1495]: #1496
#1488 := [asserted]: #247
#1500 := [mp #1488 #1497]: #1493
#3047 := [unit-resolution #1500 #3052]: #1284
#3048 := [unit-resolution #2789 #3047]: #468
#3045 := [unit-resolution #1343 #3048 #3050]: false
#3043 := [lemma #3045]: #3046
#3033 := [unit-resolution #3043 #3036 #3039 #3072 #3071]: #1939
#3034 := [unit-resolution #882 #3033 #3173]: #710
#3117 := (or #1692 #887 #686)
#3144 := [hypothesis]: #710
#3141 := [unit-resolution #1716 #3144]: #1404
#3142 := [unit-resolution #578 #3141]: #541
#3139 := [unit-resolution #1395 #3142]: #1342
#1699 := (or #1631 #1692)
#274 := (or #273 #265)
#1702 := (iff #274 #1699)
#1696 := (or #1692 #1631)
#1700 := (iff #1696 #1699)
#1701 := [rewrite]: #1700
#1697 := (iff #274 #1696)
#1698 := [monotonicity #1695 #1634]: #1697
#1703 := [trans #1698 #1701]: #1702
#1691 := [asserted]: #274
#1706 := [mp #1691 #1703]: #1699
#3140 := [unit-resolution #1706 #3144]: #1631
#3137 := [hypothesis]: #1635
#1380 := (or #1373 #1377)
#231 := (or #229 #230)
#1381 := (iff #231 #1380)
#1382 := [monotonicity #1376 #1379]: #1381
#1372 := [asserted]: #231
#1385 := [mp #1372 #1382]: #1380
#3138 := [unit-resolution #1385 #3142]: #1377
#3135 := [unit-resolution #708 #3138 #3137 #3140]: #656
#1595 := (or #1346 #1570)
#261 := (or #257 #225)
#1598 := (iff #261 #1595)
#1591 := (or #1570 #1346)
#1596 := (iff #1591 #1595)
#1597 := [rewrite]: #1596
#1593 := (iff #261 #1591)
#1594 := [monotonicity #1573 #1348]: #1593
#1599 := [trans #1594 #1597]: #1598
#1590 := [asserted]: #261
#1602 := [mp #1590 #1599]: #1595
#3136 := [unit-resolution #1602 #3135]: #1346
#3133 := [unit-resolution #539 #3136 #3139]: #493
#1318 := (or #1311 #1315)
#221 := (or #219 #220)
#1319 := (iff #221 #1318)
#1320 := [monotonicity #1314 #1317]: #1319
#1310 := [asserted]: #221
#1323 := [mp #1310 #1320]: #1318
#3134 := [unit-resolution #1323 #3133]: #1315
#3131 := [unit-resolution #1592 #3135]: #1509
#3132 := [unit-resolution #1333 #3133]: #1281
#3129 := [unit-resolution #2789 #3132]: #472
#1473 := (or #1284 #1448)
#245 := (or #241 #215)
#1476 := (iff #245 #1473)
#1469 := (or #1448 #1284)
#1474 := (iff #1469 #1473)
#1475 := [rewrite]: #1474
#1471 := (iff #245 #1469)
#1472 := [monotonicity #1451 #1286]: #1471
#1477 := [trans #1472 #1475]: #1476
#1468 := [asserted]: #245
#1480 := [mp #1468 #1477]: #1473
#3130 := [unit-resolution #1480 #3129]: #1448
#3127 := [unit-resolution #654 #3130 #3131 #3134]: #632
#3128 := [unit-resolution #1879 #3127]: #1756
#3125 := [unit-resolution #1500 #3129]: #1452
#3126 := [unit-resolution #1510 #3129]: #1417
#3123 := [unit-resolution #2808 #3126]: #581
#3124 := [unit-resolution #1747 #3123]: #1725
#3121 := [unit-resolution #780 #3124 #3125 #3128]: #758
#3122 := [unit-resolution #1757 #3123]: #1729
#3119 := [unit-resolution #906 #3122 #3174]: #884
#3120 := [unit-resolution #2126 #3119 #3121]: false
#3118 := [lemma #3120]: #3117
#3031 := [unit-resolution #3118 #3034 #3039]: #686
#1984 := (or #1635 #1943)
#312 := (or #307 #266)
#1987 := (iff #312 #1984)
#1980 := (or #1943 #1635)
#1985 := (iff #1980 #1984)
#1986 := [rewrite]: #1985
#1982 := (iff #312 #1980)
#1983 := [monotonicity #1945 #1637]: #1982
#1988 := [trans #1983 #1986]: #1987
#1979 := [asserted]: #312
#1991 := [mp #1979 #1988]: #1984
#3032 := [unit-resolution #1991 #3031]: #1943
#3029 := [unit-resolution #1014 #3032 #3072 #3071]: #962
#3030 := [unit-resolution #2218 #3029]: #1882
#1994 := (or #1635 #1878)
#313 := (or #298 #266)
#1997 := (iff #313 #1994)
#1990 := (or #1878 #1635)
#1995 := (iff #1990 #1994)
#1996 := [rewrite]: #1995
#1992 := (iff #313 #1990)
#1993 := [monotonicity #1881 #1637]: #1992
#1998 := [trans #1993 #1996]: #1997
#1989 := [asserted]: #313
#2001 := [mp #1989 #1998]: #1994
#3027 := [unit-resolution #2001 #3031]: #1878
#3028 := [unit-resolution #2208 #3029]: #2125
#3025 := [unit-resolution #3084 #3028 #3036 #3027 #3030]: #1729
#3026 := [unit-resolution #906 #3025 #3039]: #884
#3023 := [unit-resolution #2086 #3026]: #2064
#3024 := [unit-resolution #960 #3023 #3036 #3028]: #785
#3021 := [unit-resolution #1829 #3024]: #1817
#3022 := [unit-resolution #834 #3021 #3027 #3030]: #659
#3019 := [unit-resolution #1612 #3022]: #1509
#3020 := [unit-resolution #1869 #3024]: #1513
#3017 := [unit-resolution #1716 #3034]: #1404
#3018 := [unit-resolution #578 #3017]: #541
#3015 := [unit-resolution #1395 #3018]: #1342
#1615 := (or #1346 #1574)
#263 := (or #258 #225)
#1618 := (iff #263 #1615)
#1611 := (or #1574 #1346)
#1616 := (iff #1611 #1615)
#1617 := [rewrite]: #1616
#1613 := (iff #263 #1611)
#1614 := [monotonicity #1576 #1348]: #1613
#1619 := [trans #1614 #1617]: #1618
#1610 := [asserted]: #263
#1622 := [mp #1610 #1619]: #1615
#3016 := [unit-resolution #1622 #3022]: #1346
#3013 := [unit-resolution #539 #3016 #3015]: #493
#3014 := [unit-resolution #1323 #3013]: #1315
#3011 := [unit-resolution #654 #3014 #3020 #3019]: #602
#3012 := [unit-resolution #1859 #3024]: #1756
#3009 := [unit-resolution #2126 #3026]: #1760
#3010 := [unit-resolution #3074 #3019 #3020]: #1417
#3007 := [unit-resolution #2808 #3010]: #581
#3008 := [unit-resolution #1747 #3007]: #1725
#3005 := [unit-resolution #780 #3008 #3009 #3012]: #605
#3006 := [unit-resolution #1460 #3005 #3011]: false
#3004 := [lemma #3006]: #3003
#3182 := [unit-resolution #3004 #3179 #3176 #3181]: #2649
#1235 := (or #1091 #1199 #1221)
#177 := (= f54 f1)
#206 := (or #201 #177)
#205 := (= f61 f1)
#207 := (or #205 #206)
#1238 := (iff #207 #1235)
#1227 := (or #1091 #1199)
#1232 := (or #1221 #1227)
#1236 := (iff #1232 #1235)
#1237 := [rewrite]: #1236
#1233 := (iff #207 #1232)
#1230 := (iff #206 #1227)
#1224 := (or #1199 #1091)
#1228 := (iff #1224 #1227)
#1229 := [rewrite]: #1228
#1225 := (iff #206 #1224)
#1092 := (iff #177 #1091)
#1093 := [rewrite]: #1092
#1226 := [monotonicity #1202 #1093]: #1225
#1231 := [trans #1226 #1229]: #1230
#1222 := (iff #205 #1221)
#1223 := [rewrite]: #1222
#1234 := [monotonicity #1223 #1231]: #1233
#1239 := [trans #1234 #1237]: #1238
#1220 := [asserted]: #207
#1240 := [mp #1220 #1239]: #1235
#3183 := [unit-resolution #1240 #3182 #3180]: #1221
#2682 := (not #1221)
#2742 := (or #2498 #2682)
#184 := (= f56 f1)
#381 := (not #184)
#405 := (not #205)
#412 := (or #405 #381)
#2745 := (iff #412 #2742)
#2738 := (or #2682 #2498)
#2743 := (iff #2738 #2742)
#2744 := [rewrite]: #2743
#2740 := (iff #412 #2738)
#2499 := (iff #381 #2498)
#1119 := (iff #184 #1118)
#1120 := [rewrite]: #1119
#2500 := [monotonicity #1120]: #2499
#2684 := (iff #405 #2682)
#2685 := [monotonicity #1223]: #2684
#2741 := [monotonicity #2685 #2500]: #2740
#2746 := [trans #2741 #2744]: #2745
#2737 := [asserted]: #412
#2749 := [mp #2737 #2746]: #2742
#3184 := [unit-resolution #2749 #3183]: #2498
decl f55 :: S1
#181 := f55
#1115 := (= f1 f55)
#2494 := (not #1115)
#2590 := (or #2494 #2559)
#182 := (= f55 f1)
#380 := (not #182)
#393 := (or #389 #380)
#2593 := (iff #393 #2590)
#2586 := (or #2559 #2494)
#2591 := (iff #2586 #2590)
#2592 := [rewrite]: #2591
#2588 := (iff #393 #2586)
#2496 := (iff #380 #2494)
#1116 := (iff #182 #1115)
#1117 := [rewrite]: #1116
#2497 := [monotonicity #1117]: #2496
#2589 := [monotonicity #2561 #2497]: #2588
#2594 := [trans #2589 #2592]: #2593
#2585 := [asserted]: #393
#2597 := [mp #2585 #2594]: #2590
#3185 := [unit-resolution #2597 #3175]: #2494
decl f53 :: S1
#174 := f53
#1088 := (= f1 f53)
#2433 := (not #1088)
#2933 := (or #1509 #1115 #1118 #989 #992 #863)
#2957 := [hypothesis]: #629
#2958 := [unit-resolution #1592 #2957]: #1570
#2959 := (or #1943 #656 #863)
#2991 := [hypothesis]: #1570
#2970 := [hypothesis]: #839
#2967 := [unit-resolution #1991 #2970]: #1635
#2968 := [unit-resolution #1951 #2970]: #1939
#2965 := [unit-resolution #882 #2968 #3173]: #710
#2966 := [unit-resolution #1706 #2965]: #1631
#2963 := [unit-resolution #708 #2966 #2967 #2991]: #544
#2964 := [unit-resolution #1716 #2965]: #1404
#2961 := [unit-resolution #578 #2964]: #541
#2962 := [unit-resolution #1385 #2961 #2963]: false
#2960 := [lemma #2962]: #2959
#2955 := [unit-resolution #2960 #2958 #3173]: #1943
#2956 := [unit-resolution #1014 #2955 #3072 #3071]: #962
#2953 := [unit-resolution #2208 #2956]: #2125
#2954 := [unit-resolution #1632 #2957]: #1346
#2972 := (or #1342 #656 #863)
#2979 := [hypothesis]: #517
#2980 := [unit-resolution #1395 #2979]: #1373
#2977 := [unit-resolution #578 #2980]: #565
#2978 := [unit-resolution #1716 #2977]: #1692
#2975 := [unit-resolution #882 #2978 #3173]: #836
#2976 := [unit-resolution #1405 #2979]: #1377
#2973 := [unit-resolution #1726 #2977]: #1631
#2974 := [unit-resolution #708 #2973 #2976 #2991]: #686
#2971 := [unit-resolution #1971 #2974 #2975]: false
#2969 := [lemma #2971]: #2972
#2951 := [unit-resolution #2969 #2958 #3173]: #1342
#2952 := [unit-resolution #539 #2951 #2954]: #493
#2949 := [unit-resolution #1333 #2952]: #1281
#2950 := [unit-resolution #2789 #2949]: #472
#2947 := [unit-resolution #1500 #2950]: #1452
#2948 := [unit-resolution #1510 #2950]: #1417
#2945 := [unit-resolution #2808 #2948]: #581
#2946 := [unit-resolution #1747 #2945]: #1725
#2981 := (or #1878 #656 #863)
#2992 := [hypothesis]: #809
#2989 := [unit-resolution #2001 #2992]: #1635
#2990 := [unit-resolution #1961 #2992]: #1939
#2987 := [unit-resolution #882 #2990 #3173]: #710
#2988 := [unit-resolution #1706 #2987]: #1631
#2985 := [unit-resolution #708 #2988 #2989 #2991]: #544
#2986 := [unit-resolution #1716 #2987]: #1404
#2983 := [unit-resolution #578 #2986]: #541
#2984 := [unit-resolution #1385 #2983 #2985]: false
#2982 := [lemma #2984]: #2981
#2943 := [unit-resolution #2982 #2958 #3173]: #1878
#2944 := [unit-resolution #1612 #2957]: #1574
#2941 := [unit-resolution #2218 #2956]: #1882
#2942 := [unit-resolution #834 #2941 #2944 #2943]: #782
#2939 := [hypothesis]: #2498
#2940 := [hypothesis]: #2494
#2193 := (or #2186 #2190)
#146 := (= f45 f1)
#340 := (not #146)
#341 := (or #339 #340)
#2194 := (iff #341 #2193)
#2191 := (iff #340 #2190)
#966 := (iff #146 #965)
#967 := [rewrite]: #966
#2192 := [monotonicity #967]: #2191
#2195 := [monotonicity #2189 #2192]: #2194
#2185 := [asserted]: #341
#2198 := [mp #2185 #2195]: #2193
#2937 := [unit-resolution #2198 #2956]: #2190
#1135 := (or #965 #1088 #1115 #1118)
#175 := (= f53 f1)
#185 := (or #175 #146)
#186 := (or #184 #185)
#187 := (or #182 #186)
#1138 := (iff #187 #1135)
#1124 := (or #965 #1088)
#1129 := (or #1118 #1124)
#1132 := (or #1115 #1129)
#1136 := (iff #1132 #1135)
#1137 := [rewrite]: #1136
#1133 := (iff #187 #1132)
#1130 := (iff #186 #1129)
#1127 := (iff #185 #1124)
#1121 := (or #1088 #965)
#1125 := (iff #1121 #1124)
#1126 := [rewrite]: #1125
#1122 := (iff #185 #1121)
#1089 := (iff #175 #1088)
#1090 := [rewrite]: #1089
#1123 := [monotonicity #1090 #967]: #1122
#1128 := [trans #1123 #1126]: #1127
#1131 := [monotonicity #1120 #1128]: #1130
#1134 := [monotonicity #1117 #1131]: #1133
#1139 := [trans #1134 #1137]: #1138
#1114 := [asserted]: #187
#1140 := [mp #1114 #1139]: #1135
#2938 := [unit-resolution #1140 #2937 #2940 #2939]: #1088
#2458 := (or #2129 #2433)
#372 := (not #175)
#376 := (or #372 #332)
#2461 := (iff #376 #2458)
#2454 := (or #2433 #2129)
#2459 := (iff #2454 #2458)
#2460 := [rewrite]: #2459
#2456 := (iff #376 #2454)
#2435 := (iff #372 #2433)
#2436 := [monotonicity #1090]: #2435
#2457 := [monotonicity #2436 #2131]: #2456
#2462 := [trans #2457 #2460]: #2461
#2453 := [asserted]: #376
#2465 := [mp #2453 #2462]: #2458
#2935 := [unit-resolution #2465 #2938]: #2129
#2936 := [unit-resolution #3106 #2935 #2942 #2946 #2947 #2953]: false
#2934 := [lemma #2936]: #2933
#3186 := [unit-resolution #2934 #3185 #3184 #3179 #3176 #3181]: #1509
#2773 := (or #2433 #989 #992 #863 #629)
#2813 := [hypothesis]: #1088
#2448 := (or #2372 #2433)
#375 := (or #372 #364)
#2451 := (iff #375 #2448)
#2444 := (or #2433 #2372)
#2449 := (iff #2444 #2448)
#2450 := [rewrite]: #2449
#2446 := (iff #375 #2444)
#2447 := [monotonicity #2436 #2375]: #2446
#2452 := [trans #2447 #2450]: #2451
#2443 := [asserted]: #375
#2455 := [mp #2443 #2452]: #2448
#2814 := [unit-resolution #2455 #2813]: #2372
#2811 := [unit-resolution #2465 #2813]: #2129
#2822 := (or #1421 #863 #989 #992 #938 #629 #1061)
#2901 := [hypothesis]: #2372
#2839 := [hypothesis]: #581
#2840 := [unit-resolution #1757 #2839]: #1729
#2854 := (or #2064 #1061 #734)
#2869 := [hypothesis]: #908
#2071 := (or #2064 #2068)
#325 := (or #323 #324)
#2072 := (iff #325 #2071)
#2073 := [monotonicity #2067 #2070]: #2072
#2063 := [asserted]: #325
#2076 := [mp #2063 #2073]: #2071
#2870 := [unit-resolution #2076 #2869]: #2068
#2867 := [unit-resolution #2086 #2869]: #2033
#2868 := [unit-resolution #906 #2867 #2887]: #887
#2356 := (or #2037 #2341)
#362 := (or #359 #319)
#2359 := (iff #362 #2356)
#2352 := (or #2341 #2037)
#2357 := (iff #2352 #2356)
#2358 := [rewrite]: #2357
#2354 := (iff #362 #2352)
#2355 := [monotonicity #2344 #2039]: #2354
#2360 := [trans #2355 #2358]: #2359
#2351 := [asserted]: #362
#2363 := [mp #2351 #2360]: #2356
#2865 := [unit-resolution #2363 #2868]: #2341
#2866 := [unit-resolution #1086 #2865 #2901 #2870]: #1064
#2863 := [unit-resolution #2373 #2868]: #2345
#2864 := [unit-resolution #1200 #2863]: #1187
#2676 := (or #2376 #2636)
#404 := (or #399 #365)
#2679 := (iff #404 #2676)
#2672 := (or #2636 #2376)
#2677 := (iff #2672 #2676)
#2678 := [rewrite]: #2677
#2674 := (iff #404 #2672)
#2675 := [monotonicity #2639 #2378]: #2674
#2680 := [trans #2675 #2678]: #2679
#2671 := [asserted]: #404
#2683 := [mp #2671 #2680]: #2676
#2853 := [unit-resolution #2683 #2864 #2866]: false
#2851 := [lemma #2853]: #2854
#2837 := [unit-resolution #2851 #2840 #2901]: #2064
#2838 := [unit-resolution #1747 #2839]: #1725
#2871 := (or #1760 #1061 #734)
#2889 := [hypothesis]: #758
#2890 := [unit-resolution #2116 #2889]: #2068
#2888 := [unit-resolution #2126 #2889]: #2033
#2885 := [unit-resolution #906 #2888 #2887]: #887
#2886 := [unit-resolution #2363 #2885]: #2341
#2883 := [unit-resolution #1086 #2886 #2901 #2890]: #1064
#2884 := [unit-resolution #2373 #2885]: #2345
#2881 := [unit-resolution #1200 #2884]: #1187
#2882 := [unit-resolution #2683 #2881 #2883]: false
#2872 := [lemma #2882]: #2871
#2835 := [unit-resolution #2872 #2840 #2901]: #1760
#2841 := (or #605 #938 #908 #989 #992 #758 #731 #629 #863)
#2852 := [hypothesis]: #2064
#2849 := [hypothesis]: #1760
#2850 := [unit-resolution #780 #3112 #2849 #3109]: #755
#2847 := [unit-resolution #1859 #2850]: #1821
#2911 := (or #656 #605 #731 #938 #629 #989 #992 #863)
#2931 := [unit-resolution #2960 #2991 #3173]: #1943
#2932 := [unit-resolution #1014 #2931 #3072 #3071]: #962
#2929 := [unit-resolution #2208 #2932]: #2125
#2930 := [unit-resolution #2969 #2991 #3173]: #1342
#2927 := [unit-resolution #2982 #2991 #3173]: #1878
#2928 := [unit-resolution #2218 #2932]: #1882
#2925 := [unit-resolution #3106 #2929 #3116 #3109 #3112]: #1817
#2926 := [unit-resolution #834 #2925 #2928 #2927]: #659
#2923 := [unit-resolution #1622 #2926]: #1346
#2924 := [unit-resolution #539 #2923 #2930]: #493
#2921 := [unit-resolution #1323 #2924]: #1315
#2922 := [unit-resolution #1333 #2924]: #1281
#2919 := [unit-resolution #2789 #2922]: #472
#2920 := [unit-resolution #1480 #2919]: #1448
#2917 := [unit-resolution #654 #2920 #3081 #2921]: #632
#2918 := [unit-resolution #1869 #2917]: #1821
#2915 := [unit-resolution #960 #2918 #3116 #2929]: #908
#2916 := [unit-resolution #1879 #2917]: #1756
#2913 := [unit-resolution #780 #2916 #3112 #3109]: #758
#2914 := [unit-resolution #2096 #2913 #2915]: false
#2912 := [lemma #2914]: #2911
#2848 := [unit-resolution #2912 #3112 #3109 #3116 #3081 #3072 #3071 #3173]: #656
#1577 := (or #1570 #1574)
#259 := (or #257 #258)
#1578 := (iff #259 #1577)
#1579 := [monotonicity #1573 #1576]: #1578
#1569 := [asserted]: #259
#1582 := [mp #1569 #1579]: #1577
#2845 := [unit-resolution #1582 #2848]: #1574
#2846 := [unit-resolution #1839 #2850]: #1817
#2993 := (or #2125 #659 #782 #989 #992)
#3001 := [hypothesis]: #935
#3002 := [unit-resolution #2208 #3001]: #2186
#2999 := [unit-resolution #1014 #3002 #3072 #3071]: #839
#2997 := [hypothesis]: #1574
#2241 := (or #1882 #2125)
#346 := (or #331 #299)
#2244 := (iff #346 #2241)
#2237 := (or #2125 #1882)
#2242 := (iff #2237 #2241)
#2243 := [rewrite]: #2242
#2239 := (iff #346 #2237)
#2240 := [monotonicity #2128 #1884]: #2239
#2245 := [trans #2240 #2243]: #2244
#2236 := [asserted]: #346
#2248 := [mp #2236 #2245]: #2241
#2998 := [unit-resolution #2248 #3001]: #1882
#2995 := [unit-resolution #834 #2998 #2997 #3000]: #809
#1974 := (or #1878 #1943)
#311 := (or #307 #298)
#1977 := (iff #311 #1974)
#1970 := (or #1943 #1878)
#1975 := (iff #1970 #1974)
#1976 := [rewrite]: #1975
#1972 := (iff #311 #1970)
#1973 := [monotonicity #1945 #1881]: #1972
#1978 := [trans #1973 #1976]: #1977
#1969 := [asserted]: #311
#1981 := [mp #1969 #1978]: #1974
#2996 := [unit-resolution #1981 #2995 #2999]: false
#2994 := [lemma #2996]: #2993
#2843 := [unit-resolution #2994 #2846 #2845 #3072 #3071]: #2125
#2844 := [unit-resolution #960 #2843 #2847 #3116 #2852]: false
#2842 := [lemma #2844]: #2841
#2836 := [unit-resolution #2842 #2837 #3116 #3072 #3071 #2835 #2838 #3081 #3173]: #605
#2833 := [unit-resolution #1460 #2836]: #1448
#2834 := [unit-resolution #1500 #2836]: #1284
#2831 := [unit-resolution #2789 #2834]: #468
#2832 := [unit-resolution #1343 #2831]: #1315
#2829 := [unit-resolution #654 #2832 #3081 #2833]: #632
#2830 := [unit-resolution #1869 #2829]: #1821
#2827 := [unit-resolution #960 #2830 #3116 #2837]: #935
#2828 := [unit-resolution #2208 #2827]: #2186
#2825 := [unit-resolution #1014 #2828 #3072 #3071]: #839
#1842 := (or #1513 #1817)
#294 := (or #290 #250)
#1845 := (iff #294 #1842)
#1838 := (or #1817 #1513)
#1843 := (iff #1838 #1842)
#1844 := [rewrite]: #1843
#1840 := (iff #294 #1838)
#1841 := [monotonicity #1820 #1515]: #1840
#1846 := [trans #1841 #1844]: #1845
#1837 := [asserted]: #294
#1849 := [mp #1837 #1846]: #1842
#2826 := [unit-resolution #1849 #2829]: #1817
#2823 := [unit-resolution #2994 #2827 #2826 #3072 #3071]: #659
#2824 := [unit-resolution #1582 #2823]: #1570
#2821 := [unit-resolution #2960 #2824 #2825 #3173]: false
#2819 := [lemma #2821]: #2822
#2812 := [unit-resolution #2819 #2811 #3072 #3071 #3173 #3081 #2814]: #1421
#2809 := [unit-resolution #2808 #2812]: #577
#2810 := [unit-resolution #3074 #2809 #3081]: #632
#2798 := [unit-resolution #1869 #2810]: #1821
#2799 := [unit-resolution #1849 #2810]: #1817
#2815 := (or #2125 #863 #989 #992 #782)
#2820 := [unit-resolution #2994 #3001 #3000 #3072 #3071]: #659
#2817 := [unit-resolution #1582 #2820]: #1570
#2818 := [unit-resolution #2960 #2817 #2999 #3173]: false
#2816 := [lemma #2818]: #2815
#2796 := [unit-resolution #2816 #2799 #3072 #3071 #3173]: #2125
#2797 := [unit-resolution #960 #2796 #2811 #2798]: #908
#2794 := [unit-resolution #2851 #2797 #2814]: #734
#2795 := [unit-resolution #1879 #2810]: #1756
#2792 := [unit-resolution #1490 #2809]: #1452
#2793 := [unit-resolution #2096 #2797]: #1760
#2790 := [unit-resolution #780 #2793 #2792 #2795]: #731
#2791 := [unit-resolution #1737 #2790 #2794]: false
#2771 := [lemma #2791]: #2773
#3187 := [unit-resolution #2771 #3179 #3176 #3181 #3186]: #2433
#3188 := [unit-resolution #1140 #3187 #3185 #3184]: #965
#3189 := [unit-resolution #2198 #3188]: #2186
#3190 := [unit-resolution #1014 #3189 #3179 #3176]: #839
#3191 := [unit-resolution #1981 #3190]: #1878
#2231 := (or #1882 #2190)
#345 := (or #340 #299)
#2234 := (iff #345 #2231)
#2227 := (or #2190 #1882)
#2232 := (iff #2227 #2231)
#2233 := [rewrite]: #2232
#2229 := (iff #345 #2227)
#2230 := [monotonicity #2192 #1884]: #2229
#2235 := [trans #2230 #2233]: #2234
#2226 := [asserted]: #345
#2238 := [mp #2226 #2235]: #2231
#3192 := [unit-resolution #2238 #3188]: #1882
#3193 := [unit-resolution #2960 #3190 #3181]: #656
#3194 := [unit-resolution #1582 #3193]: #1574
#3195 := [unit-resolution #834 #3194 #3192 #3191]: #782
#3196 := [unit-resolution #1849 #3195]: #1513
#3197 := [unit-resolution #1602 #3193]: #1346
#3198 := [unit-resolution #1951 #3190]: #1939
#3199 := [unit-resolution #882 #3198 #3181]: #710
#3200 := [unit-resolution #1716 #3199]: #1404
#3201 := [unit-resolution #578 #3200]: #541
#3202 := [unit-resolution #1395 #3201]: #1342
#3203 := [unit-resolution #539 #3202 #3197]: #493
#3204 := [unit-resolution #1323 #3203]: #1315
#3205 := [unit-resolution #654 #3204 #3186 #3196]: #602
#3206 := [unit-resolution #1333 #3203]: #1281
#3207 := [unit-resolution #2789 #3206]: #472
#3208 := [unit-resolution #1480 #3207 #3205]: false
#3210 := [lemma #3208]: #3209
#3385 := [unit-resolution #3210 #3180]: #2559
#1266 := (or #1145 #1242)
decl f5 :: S1
#14 := f5
#452 := (= f1 f5)
#1274 := (or #452 #1145 #1242)
#2878 := (iff #1274 #1266)
#2873 := (or false #1145 #1242)
#2876 := (iff #2873 #1266)
#2877 := [rewrite]: #2876
#2874 := (iff #1274 #2873)
#2777 := (iff #452 false)
#456 := (not #452)
#15 := (= f5 f1)
#16 := (not #15)
#457 := (iff #16 #456)
#454 := (iff #15 #452)
#455 := [rewrite]: #454
#458 := [monotonicity #455]: #457
#451 := [asserted]: #16
#461 := [mp #451 #458]: #456
#2778 := [iff-false #461]: #2777
#2875 := [monotonicity #2778]: #2874
#2879 := [trans #2875 #2877]: #2878
#209 := (= f62 f1)
#212 := (or #209 #191)
#213 := (or #15 #212)
#1277 := (iff #213 #1274)
#1271 := (or #452 #1266)
#1275 := (iff #1271 #1274)
#1276 := [rewrite]: #1275
#1272 := (iff #213 #1271)
#1269 := (iff #212 #1266)
#1263 := (or #1242 #1145)
#1267 := (iff #1263 #1266)
#1268 := [rewrite]: #1267
#1264 := (iff #212 #1263)
#1243 := (iff #209 #1242)
#1244 := [rewrite]: #1243
#1265 := [monotonicity #1244 #1147]: #1264
#1270 := [trans #1265 #1268]: #1269
#1273 := [monotonicity #455 #1270]: #1272
#1278 := [trans #1273 #1276]: #1277
#1262 := [asserted]: #213
#1279 := [mp #1262 #1278]: #1274
#2880 := [mp #1279 #2879]: #1266
#3386 := [unit-resolution #2880 #3385]: #1242
#2715 := (not #1242)
#2732 := (or #2498 #2715)
#409 := (not #209)
#411 := (or #409 #381)
#2735 := (iff #411 #2732)
#2728 := (or #2715 #2498)
#2733 := (iff #2728 #2732)
#2734 := [rewrite]: #2733
#2730 := (iff #411 #2728)
#2717 := (iff #409 #2715)
#2718 := [monotonicity #1244]: #2717
#2731 := [monotonicity #2718 #2500]: #2730
#2736 := [trans #2731 #2734]: #2735
#2727 := [asserted]: #411
#2739 := [mp #2727 #2736]: #2732
#3387 := [unit-resolution #2739 #3386]: #2498
#2722 := (or #2682 #2715)
#410 := (or #409 #405)
#2725 := (iff #410 #2722)
#2719 := (or #2715 #2682)
#2723 := (iff #2719 #2722)
#2724 := [rewrite]: #2723
#2720 := (iff #410 #2719)
#2721 := [monotonicity #2718 #2685]: #2720
#2726 := [trans #2721 #2724]: #2725
#2714 := [asserted]: #410
#2729 := [mp #2714 #2726]: #2722
#3388 := [unit-resolution #2729 #3386]: #2682
#3389 := [unit-resolution #1240 #3388 #3180]: #1199
#3259 := (or #863 #1118 #2649)
#3244 := [unit-resolution #3143 #3173 #3039]: #2068
#3245 := [unit-resolution #1086 #3244 #3037 #3040]: #1061
#3246 := [unit-resolution #2455 #3245]: #2433
#3242 := (or #2494 #2649 #863)
#3236 := [hypothesis]: #1115
#2570 := (or #2494 #2555)
#391 := (or #388 #380)
#2573 := (iff #391 #2570)
#2566 := (or #2555 #2494)
#2571 := (iff #2566 #2570)
#2572 := [rewrite]: #2571
#2568 := (iff #391 #2566)
#2569 := [monotonicity #2558 #2497]: #2568
#2574 := [trans #2569 #2572]: #2573
#2565 := [asserted]: #391
#2577 := [mp #2565 #2574]: #2570
#3237 := [unit-resolution #2577 #3236]: #2555
#3238 := [unit-resolution #2862 #3237]: #1016
#2610 := (or #2251 #2494)
#395 := (or #380 #348)
#2613 := (iff #395 #2610)
#2606 := (or #2494 #2251)
#2611 := (iff #2606 #2610)
#2612 := [rewrite]: #2611
#2608 := (iff #395 #2606)
#2609 := [monotonicity #2497 #2253]: #2608
#2614 := [trans #2609 #2612]: #2613
#2605 := [asserted]: #395
#2617 := [mp #2605 #2614]: #2610
#3239 := [unit-resolution #2617 #3236]: #2251
#3240 := [unit-resolution #3004 #3239 #3044 #3173]: #989
#3241 := [unit-resolution #2322 #3240 #3238]: false
#3243 := [lemma #3241]: #3242
#3247 := [unit-resolution #3243 #3173 #3044]: #2494
#3248 := [unit-resolution #1140 #3247 #3246 #2939]: #965
#3249 := [unit-resolution #2238 #3248]: #1882
#3212 := (or #1878 #887 #863)
#3211 := [unit-resolution #3118 #2987 #2989 #3174]: false
#3213 := [lemma #3211]: #3212
#3250 := [unit-resolution #3213 #3173 #3039]: #1878
#3251 := [unit-resolution #2495 #3245]: #2129
#2221 := (or #2125 #2190)
#344 := (or #340 #331)
#2224 := (iff #344 #2221)
#2217 := (or #2190 #2125)
#2222 := (iff #2217 #2221)
#2223 := [rewrite]: #2222
#2219 := (iff #344 #2217)
#2220 := [monotonicity #2192 #2128]: #2219
#2225 := [trans #2220 #2223]: #2224
#2216 := [asserted]: #344
#2228 := [mp #2216 #2225]: #2221
#3252 := [unit-resolution #2228 #3248]: #2125
#3253 := [unit-resolution #3084 #3252 #3251 #3250 #3249]: #1729
#3254 := [unit-resolution #906 #3253 #3039]: #884
#3234 := (or #2190 #938 #863 #887 #782)
#3214 := [hypothesis]: #965
#3215 := [unit-resolution #2228 #3214]: #2125
#3216 := [unit-resolution #2238 #3214]: #1882
#3217 := [unit-resolution #3213 #3173 #3174]: #1878
#3218 := [unit-resolution #3084 #3215 #3116 #3217 #3216]: #1729
#3219 := [unit-resolution #906 #3218 #3174]: #884
#3220 := [unit-resolution #2086 #3219]: #2064
#3221 := [unit-resolution #960 #3220 #3116 #3215]: #785
#3222 := [unit-resolution #1869 #3221]: #1513
#3223 := [unit-resolution #834 #3216 #3217 #3000]: #659
#3224 := [unit-resolution #1612 #3223]: #1509
#3225 := [unit-resolution #1622 #3223]: #1346
#3226 := [unit-resolution #1582 #3223]: #1570
#3227 := [unit-resolution #2969 #3226 #3173]: #1342
#3228 := [unit-resolution #539 #3227 #3225]: #493
#3229 := [unit-resolution #1323 #3228]: #1315
#3230 := [unit-resolution #654 #3229 #3224 #3222]: #602
#3231 := [unit-resolution #1333 #3228]: #1281
#3232 := [unit-resolution #2789 #3231]: #472
#3233 := [unit-resolution #1480 #3232 #3230]: false
#3235 := [lemma #3233]: #3234
#3255 := [unit-resolution #3235 #3248 #3173 #3039 #3251]: #782
#3256 := [unit-resolution #1829 #3255]: #1821
#3257 := [unit-resolution #960 #3256 #3251 #3252]: #908
#3258 := [unit-resolution #2086 #3257 #3254]: false
#3260 := [lemma #3258]: #3259
#3390 := [unit-resolution #3260 #3387 #3389]: #863
#3391 := [unit-resolution #2332 #3390]: #2308
#3392 := [unit-resolution #2862 #3391]: #1142
#3393 := [unit-resolution #2577 #3392]: #2494
#3394 := [unit-resolution #2673 #3389]: #2376
#3395 := [unit-resolution #2663 #3389]: #2636
#3396 := [unit-resolution #1200 #3395]: #1040
#3397 := [unit-resolution #2353 #3396]: #2341
#3398 := [unit-resolution #2373 #3396]: #2037
#2580 := (or #2251 #2555)
#392 := (or #388 #348)
#2583 := (iff #392 #2580)
#2576 := (or #2555 #2251)
#2581 := (iff #2576 #2580)
#2582 := [rewrite]: #2581
#2578 := (iff #392 #2576)
#2579 := [monotonicity #2558 #2253]: #2578
#2584 := [trans #2579 #2582]: #2583
#2575 := [asserted]: #392
#2587 := [mp #2575 #2584]: #2580
#3399 := [unit-resolution #2587 #3392]: #2251
#2335 := (or #2000 #2247)
#358 := (or #347 #314)
#2338 := (iff #358 #2335)
#2331 := (or #2247 #2000)
#2336 := (iff #2331 #2335)
#2337 := [rewrite]: #2336
#2333 := (iff #358 #2331)
#2334 := [monotonicity #2250 #2003]: #2333
#2339 := [trans #2334 #2337]: #2338
#2330 := [asserted]: #358
#2342 := [mp #2330 #2339]: #2335
#3400 := [unit-resolution #2342 #3390]: #2247
#3371 := (or #782 #887 #1037 #1064 #1115 #1118 #989 #992)
#3278 := [hypothesis]: #2376
#3279 := [hypothesis]: #2341
#3352 := (or #935 #989 #992 #1115 #1118 #887 #1037 #1064 #782)
#3337 := (or #908 #887 #935 #1037 #1064 #1115 #1118 #989 #992 #782)
#3317 := (or #809 #887 #782 #1037 #1064 #1115 #1118 #908 #935)
#3296 := (or #1821 #887 #1037 #1064 #1115 #1118 #782 #809)
#3276 := [hypothesis]: #785
#3277 := [unit-resolution #1859 #3276]: #1756
#3280 := [unit-resolution #1869 #3276]: #1513
#3274 := (or #629 #632 #755 #887)
#3261 := [hypothesis]: #1756
#3262 := [unit-resolution #3074 #3081 #3082]: #1417
#3263 := [unit-resolution #2808 #3262]: #581
#3264 := [unit-resolution #1747 #3263]: #1725
#3265 := [unit-resolution #1757 #3263]: #1729
#3266 := [unit-resolution #906 #3265 #3174]: #884
#3267 := [unit-resolution #2126 #3266]: #1760
#3268 := [unit-resolution #780 #3267 #3264 #3261]: #605
#3269 := [unit-resolution #1460 #3268]: #1448
#3270 := [unit-resolution #654 #3269 #3081 #3082]: #496
#3271 := [unit-resolution #1500 #3268]: #1284
#3272 := [unit-resolution #2789 #3271]: #468
#3273 := [unit-resolution #1343 #3272 #3270]: false
#3275 := [lemma #3273]: #3274
#3281 := [unit-resolution #3275 #3280 #3277 #3174]: #629
#3282 := [unit-resolution #1612 #3281]: #1574
#3283 := [unit-resolution #834 #3282 #3000 #3095]: #812
#3284 := [unit-resolution #2238 #3283]: #2190
#3285 := [unit-resolution #1140 #3284 #2940 #2939]: #1088
#3286 := [unit-resolution #2455 #3285]: #2372
#3287 := [unit-resolution #1086 #3286 #3279 #3278]: #911
#3288 := [unit-resolution #2116 #3287]: #1760
#3289 := [unit-resolution #2106 #3287]: #2033
#3290 := [unit-resolution #906 #3289 #3174]: #734
#3291 := [unit-resolution #1737 #3290]: #1725
#3292 := [unit-resolution #780 #3291 #3288 #3277]: #605
#3293 := [unit-resolution #1757 #3290]: #1421
#3294 := [unit-resolution #2808 #3293]: #577
#3295 := [unit-resolution #1490 #3294 #3292]: false
#3297 := [lemma #3295]: #3296
#3298 := [unit-resolution #3297 #3095 #3279 #3278 #2940 #2939 #3000 #3174]: #1821
#3299 := [unit-resolution #960 #3298 #2852 #3115]: #938
#3300 := [unit-resolution #2465 #3299]: #2433
#3301 := [unit-resolution #1140 #3300 #2940 #2939]: #965
#3302 := [unit-resolution #2238 #3301]: #1882
#3303 := [unit-resolution #834 #3302 #3000 #3095]: #659
#3304 := [unit-resolution #1612 #3303]: #1509
#3305 := [unit-resolution #2495 #3299]: #2372
#3306 := [unit-resolution #1086 #3305 #3279 #3278]: #911
#3307 := [unit-resolution #2106 #3306]: #2033
#3308 := [unit-resolution #906 #3307 #3174]: #734
#3309 := [unit-resolution #1757 #3308]: #1421
#3310 := [unit-resolution #2808 #3309]: #577
#3311 := [unit-resolution #3074 #3310 #3304]: #632
#3312 := [unit-resolution #1737 #3308]: #1725
#3313 := [unit-resolution #2116 #3306]: #1760
#3314 := [unit-resolution #1490 #3310]: #1452
#3315 := [unit-resolution #780 #3314 #3313 #3312]: #755
#3316 := [unit-resolution #1879 #3315 #3311]: false
#3318 := [lemma #3316]: #3317
#3319 := [unit-resolution #3318 #2852 #3000 #3279 #3278 #2940 #2939 #3174 #3115]: #809
#3320 := [unit-resolution #1981 #3319]: #1943
#3321 := [unit-resolution #1014 #3320 #3072 #3071]: #962
#3322 := [unit-resolution #2198 #3321]: #2190
#3323 := [unit-resolution #1140 #3322 #2940 #2939]: #1088
#3324 := [unit-resolution #2465 #3323]: #2129
#3325 := [unit-resolution #960 #3324 #2852 #3115]: #785
#3326 := [unit-resolution #1859 #3325]: #1756
#3327 := [unit-resolution #2455 #3323]: #2372
#3328 := [unit-resolution #1086 #3327 #3279 #3278]: #911
#3329 := [unit-resolution #2116 #3328]: #1760
#3330 := [unit-resolution #2106 #3328]: #2033
#3331 := [unit-resolution #906 #3330 #3174]: #734
#3332 := [unit-resolution #1737 #3331]: #1725
#3333 := [unit-resolution #780 #3332 #3329 #3326]: #605
#3334 := [unit-resolution #1757 #3331]: #1421
#3335 := [unit-resolution #2808 #3334]: #577
#3336 := [unit-resolution #1490 #3335 #3333]: false
#3338 := [lemma #3336]: #3337
#3339 := [unit-resolution #3338 #3115 #3174 #3279 #3278 #2940 #2939 #3072 #3071 #3000]: #908
#3340 := [unit-resolution #2076 #3339]: #2068
#3341 := [unit-resolution #1086 #3340 #3279 #3278]: #1061
#3342 := [unit-resolution #2455 #3341]: #2433
#3343 := [unit-resolution #1140 #3342 #2940 #2939]: #965
#3344 := [unit-resolution #2198 #3343]: #2186
#3345 := [unit-resolution #1014 #3344 #3072 #3071]: #839
#3346 := [unit-resolution #2086 #3339]: #2033
#3347 := [unit-resolution #906 #3346 #3174]: #734
#2160 := (or #2064 #2129)
#336 := (or #332 #323)
#2163 := (iff #336 #2160)
#2156 := (or #2129 #2064)
#2161 := (iff #2156 #2160)
#2162 := [rewrite]: #2161
#2158 := (iff #336 #2156)
#2159 := [monotonicity #2131 #2067]: #2158
#2164 := [trans #2159 #2162]: #2163
#2155 := [asserted]: #336
#2167 := [mp #2155 #2164]: #2160
#3348 := [unit-resolution #2167 #3339]: #2129
#3349 := [unit-resolution #2238 #3343]: #1882
#3350 := [unit-resolution #3084 #3349 #3115 #3348 #3347]: #809
#3351 := [unit-resolution #1981 #3350 #3345]: false
#3353 := [lemma #3351]: #3352
#3354 := [unit-resolution #3353 #3000 #3071 #2940 #2939 #3174 #3279 #3278 #3072]: #935
#3355 := [unit-resolution #2994 #3354 #3000 #3072 #3071]: #659
#3356 := [unit-resolution #1612 #3355]: #1509
#3357 := [unit-resolution #2228 #3354]: #2190
#3358 := [unit-resolution #1140 #3357 #2940 #2939]: #1088
#3359 := [unit-resolution #2455 #3358]: #2372
#3360 := [unit-resolution #1086 #3359 #3279 #3278]: #911
#3361 := [unit-resolution #2106 #3360]: #2033
#3362 := [unit-resolution #906 #3361 #3174]: #734
#3363 := [unit-resolution #1757 #3362]: #1421
#3364 := [unit-resolution #2808 #3363]: #577
#3365 := [unit-resolution #3074 #3364 #3356]: #632
#3366 := [unit-resolution #1737 #3362]: #1725
#3367 := [unit-resolution #2116 #3360]: #1760
#3368 := [unit-resolution #1490 #3364]: #1452
#3369 := [unit-resolution #780 #3368 #3367 #3366]: #755
#3370 := [unit-resolution #1879 #3369 #3365]: false
#3372 := [lemma #3370]: #3371
#3401 := [unit-resolution #3372 #3398 #3397 #3394 #3393 #3387 #3400 #3399]: #782
#3402 := [unit-resolution #1829 #3401]: #1821
#3383 := (or #2033 #785 #1115 #1118 #1037 #1064)
#3373 := [hypothesis]: #884
#3374 := [unit-resolution #2106 #3373]: #2068
#3375 := [unit-resolution #1086 #3374 #3279 #3278]: #1061
#3376 := [unit-resolution #2455 #3375]: #2433
#3377 := [unit-resolution #1140 #3376 #2940 #2939]: #965
#3378 := [unit-resolution #2086 #3373]: #2064
#3379 := [hypothesis]: #1821
#3380 := [unit-resolution #2495 #3375]: #2129
#3381 := [unit-resolution #960 #3380 #3379 #3378]: #935
#3382 := [unit-resolution #2228 #3381 #3377]: false
#3384 := [lemma #3382]: #3383
#3403 := [unit-resolution #3384 #3402 #3393 #3387 #3397 #3394]: #2033
#3404 := [unit-resolution #906 #3403 #3398]: #734
#3405 := [unit-resolution #1737 #3404]: #1725
#3406 := [unit-resolution #1839 #3401]: #1756
#3407 := [unit-resolution #1757 #3404]: #1421
#3408 := [unit-resolution #2808 #3407]: #577
#3409 := [unit-resolution #1490 #3408]: #1452
#3410 := [unit-resolution #780 #3409 #3406 #3405]: #758
#3411 := [unit-resolution #2116 #3410]: #2068
#3412 := [unit-resolution #1086 #3411 #3397 #3394]: #1061
#3413 := [unit-resolution #2455 #3412]: #2433
#3414 := [unit-resolution #1140 #3413 #3393 #3387]: #965
#3415 := [unit-resolution #2096 #3410]: #2064
#3416 := [unit-resolution #2495 #3412]: #2129
#3417 := [unit-resolution #960 #3416 #3402 #3415]: #935
#3418 := [unit-resolution #2228 #3417 #3414]: false
#3419 := [lemma #3418]: #1091
#2468 := (or #2372 #2437)
#373 := (not #177)
#377 := (or #373 #364)
#2471 := (iff #377 #2468)
#2464 := (or #2437 #2372)
#2469 := (iff #2464 #2468)
#2470 := [rewrite]: #2469
#2466 := (iff #377 #2464)
#2438 := (iff #373 #2437)
#2439 := [monotonicity #1093]: #2438
#2467 := [monotonicity #2439 #2375]: #2466
#2472 := [trans #2467 #2470]: #2471
#2463 := [asserted]: #377
#2475 := [mp #2463 #2472]: #2468
#3446 := [unit-resolution #2475 #3419]: #2372
#3448 := [unit-resolution #2851 #3446]: #3447
#3449 := [unit-resolution #3448 #2887]: #2064
#3451 := (or #785 #908 #935)
#2478 := (or #2129 #2437)
#378 := (or #373 #332)
#2481 := (iff #378 #2478)
#2474 := (or #2437 #2129)
#2479 := (iff #2474 #2478)
#2480 := [rewrite]: #2479
#2476 := (iff #378 #2474)
#2477 := [monotonicity #2439 #2131]: #2476
#2482 := [trans #2477 #2480]: #2481
#2473 := [asserted]: #378
#2485 := [mp #2473 #2482]: #2478
#3450 := [unit-resolution #2485 #3419]: #2129
#3452 := [unit-resolution #960 #3450]: #3451
#3453 := [unit-resolution #3452 #3449 #3115]: #785
#3454 := [unit-resolution #1859 #3453]: #1756
#3455 := (or #1760 #734)
#3456 := [unit-resolution #2872 #3446]: #3455
#3457 := [unit-resolution #3456 #2887]: #1760
#3439 := (or #1284 #758 #755)
#3433 := [hypothesis]: #472
#3434 := [unit-resolution #1500 #3433]: #1452
#3435 := [unit-resolution #780 #3434 #2849 #3261]: #731
#3436 := [unit-resolution #1510 #3433]: #1417
#3437 := [unit-resolution #2808 #3436]: #581
#3438 := [unit-resolution #1747 #3437 #3435]: false
#3440 := [lemma #3438]: #3439
#3458 := [unit-resolution #3440 #3457 #3454]: #1284
#3459 := [unit-resolution #2789 #3458]: #468
#3460 := [unit-resolution #1343 #3459]: #1315
#3461 := [unit-resolution #1869 #3453]: #1513
#3462 := [unit-resolution #1333 #3459]: #1311
#3444 := (or #1509 #493 #782)
#3441 := [hypothesis]: #1311
#3431 := (or #1342 #782 #659 #656)
#3420 := [unit-resolution #2969 #2979 #2991]: #863
#3421 := [unit-resolution #2332 #3420]: #2308
#3422 := [unit-resolution #2862 #3421]: #1142
#3423 := [unit-resolution #2587 #3422]: #2251
#3424 := [unit-resolution #2342 #3420]: #2247
#3425 := [unit-resolution #708 #2973 #2991 #2976]: #686
#3426 := [unit-resolution #1991 #3425]: #1943
#3427 := [unit-resolution #1014 #3426 #3424 #3423]: #962
#3428 := [unit-resolution #2001 #3425]: #1878
#3429 := [unit-resolution #834 #3428 #3000 #2997]: #812
#3430 := [unit-resolution #2218 #3429 #3427]: false
#3432 := [lemma #3430]: #3431
#3442 := [unit-resolution #3432 #2944 #3000 #2958]: #1342
#3443 := [unit-resolution #539 #3442 #2954 #3441]: false
#3445 := [lemma #3443]: #3444
#3463 := [unit-resolution #3445 #3462 #3000]: #1509
#3464 := [unit-resolution #654 #3463 #3461 #3460]: #602
#3465 := [unit-resolution #1460 #3464]: #1452
#3466 := [unit-resolution #3074 #3463 #3461]: #1417
#3467 := [unit-resolution #2808 #3466]: #581
#3468 := [unit-resolution #1747 #3467]: #1725
#3469 := [unit-resolution #780 #3468 #3465 #3457 #3454]: false
#3471 := [lemma #3469]: #3470
#3472 := [unit-resolution #3471 #3115 #3000]: #734
#3473 := [unit-resolution #1757 #3472]: #1421
#3474 := [unit-resolution #2808 #3473]: #577
#3475 := [unit-resolution #1510 #3474]: #1284
#3476 := [unit-resolution #2789 #3475]: #468
#3477 := [unit-resolution #1333 #3476]: #1311
#3478 := [unit-resolution #3445 #3477 #3000]: #1509
#3479 := [unit-resolution #3074 #3478 #3474]: #632
#3480 := [unit-resolution #1869 #3479]: #1821
#3481 := [unit-resolution #3452 #3480 #3115]: #908
#3482 := [unit-resolution #1490 #3474]: #1452
#3483 := [unit-resolution #1737 #3472]: #1725
#3484 := [unit-resolution #1879 #3479]: #1756
#3485 := [unit-resolution #780 #3484 #3483 #3482]: #758
#3486 := [unit-resolution #2096 #3485 #3481]: false
#3488 := [lemma #3486]: #3487
#3501 := [unit-resolution #3488 #3000]: #935
#3502 := [unit-resolution #2228 #3501]: #2190
#3499 := (or #2555 #965)
#3489 := [hypothesis]: #1142
#3490 := [unit-resolution #2567 #3489]: #2559
#3491 := [unit-resolution #2880 #3490]: #1242
#3492 := [hypothesis]: #2190
#3493 := [unit-resolution #2577 #3489]: #2494
#3495 := (or #965 #1115 #1118)
#2440 := (or #2433 #2437)
#374 := (or #372 #373)
#2441 := (iff #374 #2440)
#2442 := [monotonicity #2436 #2439]: #2441
#2432 := [asserted]: #374
#2445 := [mp #2432 #2442]: #2440
#3494 := [unit-resolution #2445 #3419]: #2433
#3496 := [unit-resolution #1140 #3494]: #3495
#3497 := [unit-resolution #3496 #3493 #3492]: #1118
#3498 := [unit-resolution #2739 #3497 #3491]: false
#3500 := [lemma #3498]: #3499
#3503 := [unit-resolution #3500 #3502]: #2555
#3504 := [unit-resolution #2862 #3503]: #1016
#3505 := [unit-resolution #2322 #3504]: #2247
#3506 := [unit-resolution #2332 #3504]: #2000
#3507 := [unit-resolution #2816 #3506 #3501 #3505 #3000]: #992
#3508 := [unit-resolution #2607 #3507]: #2559
#3509 := [unit-resolution #2880 #3508]: #1242
#3510 := [unit-resolution #2617 #3507]: #2494
#3511 := [unit-resolution #3496 #3510 #3502]: #1118
#3512 := [unit-resolution #2739 #3511 #3509]: false
#3513 := [lemma #3512]: #782
#3535 := [unit-resolution #1849 #3513]: #1513
#3531 := [unit-resolution #1839 #3513]: #1756
#3532 := [unit-resolution #3440 #2849 #3531]: #1284
#3533 := [unit-resolution #2789 #3532]: #468
#3534 := [unit-resolution #1343 #3533]: #1315
#3536 := [unit-resolution #1333 #3533]: #1311
#3529 := (or #1509 #493)
#3514 := [unit-resolution #1829 #3513]: #1821
#3515 := [unit-resolution #3452 #3115 #3514]: #908
#1893 := (or #1817 #1878)
#301 := (or #298 #290)
#1896 := (iff #301 #1893)
#1889 := (or #1878 #1817)
#1894 := (iff #1889 #1893)
#1895 := [rewrite]: #1894
#1891 := (iff #301 #1889)
#1892 := [monotonicity #1881 #1820]: #1891
#1897 := [trans #1892 #1895]: #1896
#1888 := [asserted]: #301
#1900 := [mp #1888 #1897]: #1893
#3516 := [unit-resolution #1900 #3513]: #1878
#1913 := (or #1817 #1882)
#303 := (or #299 #290)
#1916 := (iff #303 #1913)
#1909 := (or #1882 #1817)
#1914 := (iff #1909 #1913)
#1915 := [rewrite]: #1914
#1911 := (iff #303 #1909)
#1912 := [monotonicity #1884 #1820]: #1911
#1917 := [trans #1912 #1915]: #1916
#1908 := [asserted]: #303
#1920 := [mp #1908 #1917]: #1913
#3517 := [unit-resolution #1920 #3513]: #1882
#3518 := (or #1729 #935 #809 #812)
#3519 := [unit-resolution #3084 #3450]: #3518
#3520 := [unit-resolution #3519 #3115 #3517 #3516]: #1729
#3521 := [unit-resolution #3448 #3520 #3515]: false
#3522 := [lemma #3521]: #935
#3523 := [unit-resolution #2228 #3522]: #2190
#3524 := [unit-resolution #3500 #3523]: #2555
#3525 := [unit-resolution #2862 #3524]: #1016
#3526 := [unit-resolution #2332 #3525]: #2000
#3527 := [unit-resolution #2969 #2958 #3526]: #1342
#3528 := [unit-resolution #539 #3527 #2954 #3441]: false
#3530 := [lemma #3528]: #3529
#3537 := [unit-resolution #3530 #3536]: #1509
#3538 := [unit-resolution #654 #3537 #3535 #3534]: #602
#3539 := [unit-resolution #1460 #3538]: #1452
#3540 := [unit-resolution #3074 #3537 #3535]: #1417
#3541 := [unit-resolution #2808 #3540]: #581
#3542 := [unit-resolution #1747 #3541]: #1725
#3543 := [unit-resolution #780 #3542 #3539 #3531 #2849]: false
#3544 := [lemma #3543]: #758
#3545 := [unit-resolution #3456 #3544]: #734
#2058 := (or #1729 #2037)
#322 := (or #319 #278)
#2061 := (iff #322 #2058)
#2054 := (or #2037 #1729)
#2059 := (iff #2054 #2058)
#2060 := [rewrite]: #2059
#2056 := (iff #322 #2054)
#2057 := [monotonicity #2039 #1731]: #2056
#2062 := [trans #2057 #2060]: #2061
#2053 := [asserted]: #322
#2065 := [mp #2053 #2062]: #2058
#3546 := [unit-resolution #2065 #3545]: #2037
#3547 := [unit-resolution #3275 #3546 #3531 #3535]: #629
#3548 := [unit-resolution #3530 #3547]: #493
#3549 := [unit-resolution #1757 #3545]: #1421
#3550 := [unit-resolution #2808 #3549]: #577
#3551 := [unit-resolution #1510 #3550]: #1284
#3552 := [unit-resolution #2789 #3551]: #468
[unit-resolution #1333 #3552 #3548]: false
unsat
0020560a0c4fa3058b0174abbbe01bb65cb5b25a 95 0
#2 := false
decl f3 :: (-> Int S1)
decl ?v0!0 :: Int
#77 := ?v0!0
#78 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#79 := (= f1 #78)
#74 := (not #79)
decl ?v1!1 :: Int
#88 := ?v1!1
#89 := (f3 ?v1!1)
#90 := (= f1 #89)
#108 := (or #79 #90)
#111 := (not #108)
#114 := (and #79 #111)
#91 := (or #90 #79)
#92 := (not #91)
#85 := (not #74)
#98 := (and #85 #92)
#115 := (iff #98 #114)
#112 := (iff #92 #111)
#109 := (iff #91 #108)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#106 := (iff #85 #79)
#107 := [rewrite]: #106
#116 := [monotonicity #107 #113]: #115
#11 := (:var 1 Int)
#12 := (f3 #11)
#42 := (= f1 #12)
#8 := (:var 0 Int)
#9 := (f3 #8)
#39 := (= f1 #9)
#48 := (or #39 #42)
#53 := (forall (vars (?v1 Int)) #48)
#59 := (not #39)
#60 := (or #59 #53)
#65 := (forall (vars (?v0 Int)) #60)
#68 := (not #65)
#101 := (~ #68 #98)
#80 := (or #39 #79)
#72 := (forall (vars (?v1 Int)) #80)
#81 := (or #74 #72)
#82 := (not #81)
#99 := (~ #82 #98)
#93 := (not #72)
#94 := (~ #93 #92)
#95 := [sk]: #94
#86 := (~ #85 #85)
#87 := [refl]: #86
#100 := [nnf-neg #87 #95]: #99
#83 := (~ #68 #82)
#84 := [sk]: #83
#102 := [trans #84 #100]: #101
#10 := (= #9 f1)
#13 := (= #12 f1)
#14 := (or #13 #10)
#15 := (forall (vars (?v1 Int)) #14)
#16 := (implies #10 #15)
#17 := (forall (vars (?v0 Int)) #16)
#18 := (not #17)
#69 := (iff #18 #68)
#66 := (iff #17 #65)
#63 := (iff #16 #60)
#56 := (implies #39 #53)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#45 := (or #42 #39)
#49 := (iff #45 #48)
#50 := [rewrite]: #49
#46 := (iff #14 #45)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44 #41]: #46
#52 := [trans #47 #50]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #41 #55]: #57
#64 := [trans #58 #62]: #63
#67 := [quant-intro #64]: #66
#70 := [monotonicity #67]: #69
#38 := [asserted]: #18
#73 := [mp #38 #70]: #68
#103 := [mp~ #73 #102]: #98
#104 := [mp #103 #116]: #114
#117 := [and-elim #104]: #111
#118 := [not-or-elim #117]: #74
#105 := [and-elim #104]: #79
[unit-resolution #105 #118]: false
unsat
71f21c0a5d88cb94f60cf796ba4f0c3c95e6bff5 151 0
#2 := false
decl f3 :: (-> S3 S2 S1)
#11 := (:var 0 S2)
decl f4 :: (-> S4 S1 S3)
decl f6 :: S1
#17 := f6
decl f5 :: S4
#8 := f5
#18 := (f4 f5 f6)
#19 := (f3 #18 #11)
#604 := (pattern #19)
decl f1 :: S1
#4 := f1
#60 := (= f1 #19)
#101 := (not #60)
#605 := (forall (vars (?v0 S2)) (:pat #604) #101)
decl f7 :: S2
#22 := f7
#23 := (f3 #18 f7)
#67 := (= f1 #23)
#179 := (= f1 f6)
#180 := (iff #67 #179)
#9 := (:var 1 S1)
#10 := (f4 f5 #9)
#12 := (f3 #10 #11)
#597 := (pattern #12)
#50 := (= f1 #9)
#47 := (= f1 #12)
#53 := (iff #47 #50)
#598 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #597) #53)
#56 := (forall (vars (?v0 S1) (?v1 S2)) #53)
#601 := (iff #56 #598)
#599 := (iff #53 #53)
#600 := [refl]: #599
#602 := [quant-intro #600]: #601
#92 := (~ #56 #56)
#90 := (~ #53 #53)
#91 := [refl]: #90
#93 := [nnf-pos #91]: #92
#14 := (= #9 f1)
#13 := (= #12 f1)
#15 := (iff #13 #14)
#16 := (forall (vars (?v0 S1) (?v1 S2)) #15)
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#55 := [monotonicity #49 #52]: #54
#58 := [quant-intro #55]: #57
#46 := [asserted]: #16
#61 := [mp #46 #58]: #56
#83 := [mp~ #61 #93]: #56
#603 := [mp #83 #602]: #598
#181 := (not #598)
#257 := (or #181 #180)
#258 := [quant-inst #17 #22]: #257
#267 := [unit-resolution #258 #603]: #180
decl ?v0!0 :: S2
#85 := ?v0!0
#94 := (f3 #18 ?v0!0)
#86 := (= f1 #94)
#266 := (iff #86 #179)
#268 := (or #181 #266)
#259 := [quant-inst #17 #85]: #268
#585 := [unit-resolution #259 #603]: #266
#270 := (not #266)
#588 := (or #270 #179)
#107 := (not #67)
#587 := [hypothesis]: #107
#112 := (or #67 #86)
#104 := (forall (vars (?v0 S2)) #101)
#113 := (or #107 #104)
#120 := (and #112 #113)
#114 := (and #113 #112)
#121 := (iff #114 #120)
#122 := [rewrite]: #121
#64 := (exists (vars (?v0 S2)) #60)
#76 := (not #64)
#77 := (iff #67 #76)
#115 := (~ #77 #114)
#105 := (~ #76 #104)
#102 := (~ #101 #101)
#103 := [refl]: #102
#106 := [nnf-neg #103]: #105
#98 := (not #76)
#99 := (~ #98 #86)
#87 := (~ #64 #86)
#95 := [sk]: #87
#100 := [nnf-neg #95]: #99
#110 := (~ #67 #67)
#111 := [refl]: #110
#108 := (~ #107 #107)
#109 := [refl]: #108
#116 := [nnf-pos #109 #111 #100 #106]: #115
#24 := (= #23 f1)
#20 := (= #19 f1)
#21 := (exists (vars (?v0 S2)) #20)
#25 := (iff #21 #24)
#26 := (not #25)
#80 := (iff #26 #77)
#70 := (iff #64 #67)
#73 := (not #70)
#78 := (iff #73 #77)
#79 := [rewrite]: #78
#74 := (iff #26 #73)
#71 := (iff #25 #70)
#68 := (iff #24 #67)
#69 := [rewrite]: #68
#65 := (iff #21 #64)
#62 := (iff #20 #60)
#63 := [rewrite]: #62
#66 := [quant-intro #63]: #65
#72 := [monotonicity #66 #69]: #71
#75 := [monotonicity #72]: #74
#81 := [trans #75 #79]: #80
#59 := [asserted]: #26
#84 := [mp #59 #81]: #77
#117 := [mp~ #84 #116]: #114
#118 := [mp #117 #122]: #120
#119 := [and-elim #118]: #112
#245 := [unit-resolution #119 #587]: #86
#269 := (not #86)
#273 := (or #270 #269 #179)
#252 := [def-axiom]: #273
#229 := [unit-resolution #252 #245]: #588
#572 := [unit-resolution #229 #585]: #179
#271 := (not #179)
#592 := (not #180)
#233 := (or #592 #271)
#593 := (or #592 #67 #271)
#594 := [def-axiom]: #593
#234 := [unit-resolution #594 #587]: #233
#235 := [unit-resolution #234 #572 #267]: false
#236 := [lemma #235]: #67
#610 := (or #107 #605)
#611 := (iff #113 #610)
#608 := (iff #104 #605)
#606 := (iff #101 #101)
#607 := [refl]: #606
#609 := [quant-intro #607]: #608
#612 := [monotonicity #609]: #611
#123 := [and-elim #118]: #113
#613 := [mp #123 #612]: #610
#199 := [unit-resolution #613 #236]: #605
#596 := (not #605)
#586 := (or #596 #107)
#244 := [quant-inst #22]: #586
[unit-resolution #244 #236 #199]: false
unsat
ae3e0f78fcdef723f102d089b42d97f098766d9e 151 0
#2 := false
decl f3 :: (-> S3 S2 S1)
#11 := (:var 0 S2)
decl f4 :: (-> S4 S1 S3)
decl f7 :: S1
#26 := f7
decl f5 :: S4
#8 := f5
#27 := (f4 f5 f7)
#28 := (f3 #27 #11)
#711 := (pattern #28)
decl f1 :: S1
#4 := f1
#85 := (= f1 #28)
#183 := (not #85)
#712 := (forall (vars (?v0 S2)) (:pat #711) #183)
decl f6 :: S2
#21 := f6
#31 := (f3 #27 f6)
#92 := (= f1 #31)
#261 := (= f1 f7)
#262 := (iff #92 #261)
#9 := (:var 1 S1)
#10 := (f4 f5 #9)
#12 := (f3 #10 #11)
#679 := (pattern #12)
#58 := (= f1 #9)
#55 := (= f1 #12)
#61 := (iff #55 #58)
#680 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #679) #61)
#64 := (forall (vars (?v0 S1) (?v1 S2)) #61)
#683 := (iff #64 #680)
#681 := (iff #61 #61)
#682 := [refl]: #681
#684 := [quant-intro #682]: #683
#119 := (~ #64 #64)
#117 := (~ #61 #61)
#118 := [refl]: #117
#120 := [nnf-pos #118]: #119
#14 := (= #9 f1)
#13 := (= #12 f1)
#15 := (iff #13 #14)
#16 := (forall (vars (?v0 S1) (?v1 S2)) #15)
#65 := (iff #16 #64)
#62 := (iff #15 #61)
#59 := (iff #14 #58)
#60 := [rewrite]: #59
#56 := (iff #13 #55)
#57 := [rewrite]: #56
#63 := [monotonicity #57 #60]: #62
#66 := [quant-intro #63]: #65
#54 := [asserted]: #16
#69 := [mp #54 #66]: #64
#108 := [mp~ #69 #120]: #64
#685 := [mp #108 #684]: #680
#263 := (not #680)
#339 := (or #263 #262)
#340 := [quant-inst #26 #21]: #339
#349 := [unit-resolution #340 #685]: #262
decl ?v0!3 :: S2
#154 := ?v0!3
#155 := (f3 #27 ?v0!3)
#126 := (= f1 #155)
#348 := (iff #126 #261)
#350 := (or #263 #348)
#341 := [quant-inst #26 #154]: #350
#667 := [unit-resolution #341 #685]: #348
#352 := (not #348)
#670 := (or #352 #261)
#189 := (not #92)
#669 := [hypothesis]: #189
#194 := (or #92 #126)
#186 := (forall (vars (?v0 S2)) #183)
#195 := (or #189 #186)
#202 := (and #194 #195)
#196 := (and #195 #194)
#203 := (iff #196 #202)
#204 := [rewrite]: #203
#89 := (exists (vars (?v0 S2)) #85)
#101 := (not #89)
#102 := (iff #92 #101)
#197 := (~ #102 #196)
#187 := (~ #101 #186)
#184 := (~ #183 #183)
#185 := [refl]: #184
#188 := [nnf-neg #185]: #187
#180 := (not #101)
#181 := (~ #180 #126)
#127 := (~ #89 #126)
#177 := [sk]: #127
#182 := [nnf-neg #177]: #181
#192 := (~ #92 #92)
#193 := [refl]: #192
#190 := (~ #189 #189)
#191 := [refl]: #190
#198 := [nnf-pos #191 #193 #182 #188]: #197
#32 := (= #31 f1)
#29 := (= #28 f1)
#30 := (exists (vars (?v0 S2)) #29)
#33 := (iff #30 #32)
#34 := (not #33)
#105 := (iff #34 #102)
#95 := (iff #89 #92)
#98 := (not #95)
#103 := (iff #98 #102)
#104 := [rewrite]: #103
#99 := (iff #34 #98)
#96 := (iff #33 #95)
#93 := (iff #32 #92)
#94 := [rewrite]: #93
#90 := (iff #30 #89)
#87 := (iff #29 #85)
#88 := [rewrite]: #87
#91 := [quant-intro #88]: #90
#97 := [monotonicity #91 #94]: #96
#100 := [monotonicity #97]: #99
#106 := [trans #100 #104]: #105
#84 := [asserted]: #34
#109 := [mp #84 #106]: #102
#199 := [mp~ #109 #198]: #196
#200 := [mp #199 #204]: #202
#201 := [and-elim #200]: #194
#327 := [unit-resolution #201 #669]: #126
#351 := (not #126)
#355 := (or #352 #351 #261)
#334 := [def-axiom]: #355
#311 := [unit-resolution #334 #327]: #670
#654 := [unit-resolution #311 #667]: #261
#353 := (not #261)
#674 := (not #262)
#315 := (or #674 #353)
#675 := (or #674 #92 #353)
#676 := [def-axiom]: #675
#316 := [unit-resolution #676 #669]: #315
#317 := [unit-resolution #316 #654 #349]: false
#318 := [lemma #317]: #92
#717 := (or #189 #712)
#718 := (iff #195 #717)
#715 := (iff #186 #712)
#713 := (iff #183 #183)
#714 := [refl]: #713
#716 := [quant-intro #714]: #715
#719 := [monotonicity #716]: #718
#205 := [and-elim #200]: #195
#720 := [mp #205 #719]: #717
#281 := [unit-resolution #720 #318]: #712
#678 := (not #712)
#668 := (or #678 #189)
#326 := [quant-inst #21]: #668
[unit-resolution #326 #318 #281]: false
unsat
5dc6f25776aabe70ad45ce325942b3a138a1974d 91 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
decl f1 :: S1
#4 := f1
#44 := (= f1 #9)
decl f5 :: S2
#19 := f5
#20 := (f3 f5)
#66 := (= f1 #20)
#73 := (not #44)
#74 := (or #73 #66)
#79 := (not #74)
#21 := (= #20 f1)
#10 := (= #9 f1)
#22 := (implies #10 #21)
#23 := (not #22)
#80 := (iff #23 #79)
#77 := (iff #22 #74)
#70 := (implies #44 #66)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #22 #70)
#68 := (iff #21 #66)
#69 := [rewrite]: #68
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#72 := [monotonicity #46 #69]: #71
#78 := [trans #72 #76]: #77
#81 := [monotonicity #78]: #80
#65 := [asserted]: #23
#84 := [mp #65 #81]: #79
#82 := [not-or-elim #84]: #44
#11 := (:var 0 S2)
#12 := (f3 #11)
#577 := (pattern #12)
#47 := (= f1 #12)
#56 := (not #47)
#578 := (forall (vars (?v0 S2)) (:pat #577) #56)
#59 := (forall (vars (?v0 S2)) #56)
#581 := (iff #59 #578)
#579 := (iff #56 #56)
#580 := [refl]: #579
#582 := [quant-intro #580]: #581
#50 := (exists (vars (?v0 S2)) #47)
#53 := (not #50)
#90 := (~ #53 #59)
#93 := (~ #56 #56)
#94 := [refl]: #93
#102 := [nnf-neg #94]: #90
#62 := (ite #44 #53 #59)
#100 := (iff #62 #53)
#1 := true
#95 := (ite true #53 #59)
#98 := (iff #95 #53)
#99 := [rewrite]: #98
#96 := (iff #62 #95)
#91 := (iff #44 true)
#92 := [iff-true #82]: #91
#97 := [monotonicity #92]: #96
#101 := [trans #97 #99]: #100
#13 := (= #12 f1)
#16 := (not #13)
#17 := (forall (vars (?v0 S2)) #16)
#14 := (exists (vars (?v0 S2)) #13)
#15 := (not #14)
#18 := (ite #10 #15 #17)
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#57 := (iff #16 #56)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#58 := [monotonicity #49]: #57
#61 := [quant-intro #58]: #60
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [quant-intro #49]: #51
#55 := [monotonicity #52]: #54
#64 := [monotonicity #46 #55 #61]: #63
#43 := [asserted]: #18
#67 := [mp #43 #64]: #62
#89 := [mp #67 #101]: #53
#87 := [mp~ #89 #102]: #59
#583 := [mp #87 #582]: #578
#160 := (not #578)
#247 := (or #160 #73)
#161 := [quant-inst #8]: #247
[unit-resolution #161 #583 #82]: false
unsat
29e0fbcf1b3262888237e1fa476aa8a7425443c7 17 0
#2 := false
#8 := 3::Int
#9 := (= 3::Int 3::Int)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
065da226a83f89ade06131ac7b676aff1d33184f 17 0
#2 := false
#8 := 3::Real
#9 := (= 3::Real 3::Real)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
52cd464fc4027157f69df0b8cc3229ae55ad2079 26 0
#2 := false
#11 := 4::Int
#9 := 1::Int
#8 := 3::Int
#10 := (+ 3::Int 1::Int)
#12 := (= #10 4::Int)
#13 := (not #12)
#47 := (iff #13 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #13 #42)
#40 := (iff #12 true)
#35 := (= 4::Int 4::Int)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #12 #35)
#34 := [rewrite]: #12
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#33 := [asserted]: #13
[mp #33 #48]: false
unsat
28b6536c2d4f9dc75412d00f15231ed2ee58fe03 41 0
#2 := false
decl f3 :: Int
#8 := f3
decl f5 :: Int
#10 := f5
#13 := (+ f5 f3)
decl f4 :: Int
#9 := f4
#14 := (+ f4 #13)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#59 := (iff #16 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #16 #54)
#52 := (iff #15 true)
#47 := (= #12 #12)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #15 #47)
#45 := (= #14 #12)
#37 := (+ f3 f5)
#40 := (+ f4 #37)
#43 := (= #40 #12)
#44 := [rewrite]: #43
#41 := (= #14 #40)
#38 := (= #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#36 := [asserted]: #16
[mp #36 #60]: false
unsat
8450cf6a350ba6ec26331e50c3fd5d8f999ad9a0 35 0
#2 := false
#9 := 3::Int
#10 := 8::Int
#11 := (<= 3::Int 8::Int)
#12 := (ite #11 8::Int 3::Int)
#8 := 5::Int
#13 := (< 5::Int #12)
#14 := (not #13)
#58 := (iff #14 false)
#1 := true
#53 := (not true)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #14 #53)
#51 := (iff #13 true)
#46 := (< 5::Int 8::Int)
#49 := (iff #46 true)
#50 := [rewrite]: #49
#47 := (iff #13 #46)
#44 := (= #12 8::Int)
#39 := (ite true 8::Int 3::Int)
#42 := (= #39 8::Int)
#43 := [rewrite]: #42
#40 := (= #12 #39)
#37 := (iff #11 true)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#34 := [asserted]: #14
[mp #34 #59]: false
unsat
6afccd7c6734a9f80c327ff8b0bab36d43ee827b 216 0
#2 := false
#11 := 0::Real
decl f4 :: Real
#9 := f4
#44 := -1::Real
#46 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#45 := (* -1::Real f3)
#47 := (+ #45 #46)
#10 := (+ f3 f4)
#72 := (>= #10 0::Real)
#79 := (ite #72 #10 #47)
#154 := (* -1::Real #79)
#182 := (+ #47 #154)
#184 := (>= #182 0::Real)
#135 := (= #47 #79)
#73 := (not #72)
#96 := (>= f4 0::Real)
#97 := (not #96)
#155 := (+ #10 #154)
#157 := (>= #155 0::Real)
#134 := (= #10 #79)
#198 := (not #135)
#193 := (not #184)
#164 := [hypothesis]: #96
#194 := (or #193 #97)
#185 := [hypothesis]: #184
#103 := (ite #96 f4 #46)
#115 := (* -1::Real #103)
#84 := (>= f3 0::Real)
#91 := (ite #84 f3 #45)
#114 := (* -1::Real #91)
#116 := (+ #114 #115)
#117 := (+ #79 #116)
#118 := (<= #117 0::Real)
#123 := (not #118)
#19 := (- f4)
#18 := (< f4 0::Real)
#20 := (ite #18 #19 f4)
#16 := (- f3)
#15 := (< f3 0::Real)
#17 := (ite #15 #16 f3)
#21 := (+ #17 #20)
#13 := (- #10)
#12 := (< #10 0::Real)
#14 := (ite #12 #13 #10)
#22 := (<= #14 #21)
#23 := (not #22)
#126 := (iff #23 #123)
#60 := (ite #18 #46 f4)
#55 := (ite #15 #45 f3)
#63 := (+ #55 #60)
#50 := (ite #12 #47 #10)
#66 := (<= #50 #63)
#69 := (not #66)
#124 := (iff #69 #123)
#121 := (iff #66 #118)
#108 := (+ #91 #103)
#111 := (<= #79 #108)
#119 := (iff #111 #118)
#120 := [rewrite]: #119
#112 := (iff #66 #111)
#109 := (= #63 #108)
#106 := (= #60 #103)
#100 := (ite #97 #46 f4)
#104 := (= #100 #103)
#105 := [rewrite]: #104
#101 := (= #60 #100)
#98 := (iff #18 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#107 := [trans #102 #105]: #106
#94 := (= #55 #91)
#85 := (not #84)
#88 := (ite #85 #45 f3)
#92 := (= #88 #91)
#93 := [rewrite]: #92
#89 := (= #55 #88)
#86 := (iff #15 #85)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#95 := [trans #90 #93]: #94
#110 := [monotonicity #95 #107]: #109
#82 := (= #50 #79)
#76 := (ite #73 #47 #10)
#80 := (= #76 #79)
#81 := [rewrite]: #80
#77 := (= #50 #76)
#74 := (iff #12 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#83 := [trans #78 #81]: #82
#113 := [monotonicity #83 #110]: #112
#122 := [trans #113 #120]: #121
#125 := [monotonicity #122]: #124
#70 := (iff #23 #69)
#67 := (iff #22 #66)
#64 := (= #21 #63)
#61 := (= #20 #60)
#58 := (= #19 #46)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#56 := (= #17 #55)
#53 := (= #16 #45)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#65 := [monotonicity #57 #62]: #64
#51 := (= #14 #50)
#48 := (= #13 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#68 := [monotonicity #52 #65]: #67
#71 := [monotonicity #68]: #70
#127 := [trans #71 #125]: #126
#43 := [asserted]: #23
#128 := [mp #43 #127]: #123
#148 := (+ f4 #115)
#149 := (<= #148 0::Real)
#142 := (= f4 #103)
#144 := (or #97 #142)
#145 := [def-axiom]: #144
#173 := [unit-resolution #145 #164]: #142
#174 := (not #142)
#175 := (or #174 #149)
#176 := [th-lemma arith triangle-eq]: #175
#177 := [unit-resolution #176 #173]: #149
#153 := (+ #45 #114)
#156 := (<= #153 0::Real)
#131 := (= #45 #91)
#179 := (or #85 #97)
#151 := (+ f3 #114)
#152 := (<= #151 0::Real)
#130 := (= f3 #91)
#158 := [hypothesis]: #84
#138 := (or #85 #130)
#139 := [def-axiom]: #138
#159 := [unit-resolution #139 #158]: #130
#160 := (not #130)
#161 := (or #160 #152)
#162 := [th-lemma arith triangle-eq]: #161
#163 := [unit-resolution #162 #159]: #152
#165 := (or #72 #85 #97)
#166 := [th-lemma arith assign-bounds -1 -1]: #165
#167 := [unit-resolution #166 #158 #164]: #72
#136 := (or #73 #134)
#137 := [def-axiom]: #136
#168 := [unit-resolution #137 #167]: #134
#169 := (not #134)
#170 := (or #169 #157)
#171 := [th-lemma arith triangle-eq]: #170
#172 := [unit-resolution #171 #168]: #157
#178 := [th-lemma arith farkas 1 -1 -1 1 #177 #172 #128 #163]: false
#180 := [lemma #178]: #179
#186 := [unit-resolution #180 #164]: #85
#140 := (or #84 #131)
#141 := [def-axiom]: #140
#187 := [unit-resolution #141 #186]: #131
#188 := (not #131)
#189 := (or #188 #156)
#190 := [th-lemma arith triangle-eq]: #189
#191 := [unit-resolution #190 #187]: #156
#192 := [th-lemma arith farkas 2 -1 -1 1 1 #164 #191 #177 #128 #185]: false
#195 := [lemma #192]: #194
#203 := [unit-resolution #195 #164]: #193
#199 := (or #198 #184)
#196 := [hypothesis]: #193
#197 := [hypothesis]: #135
#200 := [th-lemma arith triangle-eq]: #199
#201 := [unit-resolution #200 #197 #196]: false
#202 := [lemma #201]: #199
#204 := [unit-resolution #202 #203]: #198
#132 := (or #72 #135)
#133 := [def-axiom]: #132
#205 := [unit-resolution #133 #204]: #72
#206 := [unit-resolution #137 #205]: #134
#207 := [unit-resolution #171 #206]: #157
#208 := [th-lemma arith farkas 2 1 1 1 1 #186 #191 #177 #128 #207]: false
#209 := [lemma #208]: #97
#150 := (+ #46 #115)
#181 := (<= #150 0::Real)
#143 := (= #46 #103)
#146 := (or #96 #143)
#147 := [def-axiom]: #146
#214 := [unit-resolution #147 #209]: #143
#215 := (not #143)
#216 := (or #215 #181)
#217 := [th-lemma arith triangle-eq]: #216
#218 := [unit-resolution #217 #214]: #181
#220 := (not #157)
#221 := (not #152)
#222 := (or #220 #221)
#212 := [hypothesis]: #152
#213 := [hypothesis]: #157
#219 := [th-lemma arith farkas 2 1 1 1 1 #209 #218 #128 #213 #212]: false
#223 := [lemma #219]: #222
#228 := [unit-resolution #223 #163]: #220
#224 := [hypothesis]: #220
#225 := [hypothesis]: #134
#226 := [unit-resolution #171 #225 #224]: false
#227 := [lemma #226]: #170
#229 := [unit-resolution #227 #228]: #169
#230 := [unit-resolution #137 #229]: #73
#231 := [unit-resolution #133 #230]: #135
#232 := [unit-resolution #202 #231]: #184
#233 := [th-lemma arith farkas 1/2 -1/2 -1/2 1/2 1 #232 #163 #218 #128 #158]: false
#234 := [lemma #233]: #85
#235 := (or #73 #84 #96)
#236 := [th-lemma arith assign-bounds 1 1]: #235
#237 := [unit-resolution #236 #234 #209]: #73
#238 := [unit-resolution #133 #237]: #135
#239 := [unit-resolution #202 #238]: #184
#240 := [unit-resolution #141 #234]: #131
#241 := [unit-resolution #190 #240]: #156
[th-lemma arith farkas -1 -1 1 1 #241 #218 #128 #239]: false
unsat
c722596cfa285e209992f7087932c1ec15fd226b 42 0
#2 := false
decl f3 :: (-> S1 S2)
decl f1 :: S1
#4 := f1
#13 := (f3 f1)
decl f2 :: S1
#5 := f2
#9 := 3::Int
#8 := 2::Int
#10 := (< 2::Int 3::Int)
#11 := (ite #10 f1 f2)
#12 := (f3 #11)
#14 := (= #12 #13)
#15 := (not #14)
#60 := (iff #15 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #15 #55)
#53 := (iff #14 true)
#48 := (= #13 #13)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #14 #48)
#45 := (= #11 f1)
#40 := (ite true f1 f2)
#43 := (= #40 f1)
#44 := [rewrite]: #43
#41 := (= #11 #40)
#38 := (iff #10 true)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#47 := [monotonicity #46]: #14
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#35 := [asserted]: #15
[mp #35 #61]: false
unsat
4d8a8a08b49cb28d987bdc1bcdbb3a144907bf45 54 0
#2 := false
#13 := 1::Int
decl f3 :: Int
#9 := f3
#14 := (< f3 1::Int)
#10 := 3::Int
#11 := (+ f3 3::Int)
#8 := 4::Int
#12 := (<= 4::Int #11)
#15 := (or #12 #14)
#16 := (not #15)
#74 := (iff #16 false)
#37 := (+ 3::Int f3)
#40 := (<= 4::Int #37)
#46 := (or #14 #40)
#51 := (not #46)
#72 := (iff #51 false)
#1 := true
#67 := (not true)
#70 := (iff #67 false)
#71 := [rewrite]: #70
#68 := (iff #51 #67)
#65 := (iff #46 true)
#56 := (>= f3 1::Int)
#54 := (not #56)
#60 := (or #54 #56)
#63 := (iff #60 true)
#64 := [rewrite]: #63
#61 := (iff #46 #60)
#58 := (iff #40 #56)
#59 := [rewrite]: #58
#55 := (iff #14 #54)
#57 := [rewrite]: #55
#62 := [monotonicity #57 #59]: #61
#66 := [trans #62 #64]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#52 := (iff #16 #51)
#49 := (iff #15 #46)
#43 := (or #40 #14)
#47 := (iff #43 #46)
#48 := [rewrite]: #47
#44 := (iff #15 #43)
#41 := (iff #12 #40)
#38 := (= #11 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#50 := [trans #45 #48]: #49
#53 := [monotonicity #50]: #52
#75 := [trans #53 #73]: #74
#36 := [asserted]: #16
[mp #36 #75]: false
unsat
8bd98db330c82b711ec70353229651c63b6517b9 63 0
#2 := false
#15 := 0::Int
decl f4 :: Int
#11 := f4
#50 := -1::Int
#53 := (* -1::Int f4)
decl f3 :: Int
#9 := f3
#54 := (+ f3 #53)
#71 := (>= #54 0::Int)
#95 := (iff #71 false)
#52 := -4::Int
#88 := (>= -4::Int 0::Int)
#87 := (iff #88 false)
#94 := [rewrite]: #87
#89 := (iff #71 #88)
#55 := (= #54 -4::Int)
#12 := 4::Int
#13 := (+ f3 4::Int)
#14 := (= f4 #13)
#57 := (iff #14 #55)
#40 := (+ 4::Int f3)
#47 := (= f4 #40)
#51 := (iff #47 #55)
#56 := [rewrite]: #51
#48 := (iff #14 #47)
#45 := (= #13 #40)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#58 := [trans #49 #56]: #57
#39 := [asserted]: #14
#59 := [mp #39 #58]: #55
#86 := [monotonicity #59]: #89
#96 := [trans #86 #94]: #95
#16 := (- f4 f3)
#17 := (< 0::Int #16)
#18 := (not #17)
#82 := (iff #18 #71)
#61 := (* -1::Int f3)
#62 := (+ #61 f4)
#65 := (< 0::Int #62)
#68 := (not #65)
#80 := (iff #68 #71)
#72 := (not #71)
#75 := (not #72)
#78 := (iff #75 #71)
#79 := [rewrite]: #78
#76 := (iff #68 #75)
#73 := (iff #65 #72)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#69 := (iff #18 #68)
#66 := (iff #17 #65)
#63 := (= #16 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#83 := [trans #70 #81]: #82
#60 := [asserted]: #18
#84 := [mp #60 #83]: #71
[mp #84 #96]: false
unsat
e799a1569bcb7c90a4ec458d9136d7c6af5e039d 35 0
#2 := false
#10 := 5::Int
#8 := 2::Int
#9 := (+ 2::Int 2::Int)
#11 := (= #9 5::Int)
#12 := (not #11)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#44 := (not false)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #12 #44)
#42 := (iff #11 false)
#34 := 4::Int
#37 := (= 4::Int 5::Int)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #11 #37)
#35 := (= #9 4::Int)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#33 := [asserted]: #13
[mp #33 #57]: false
unsat
94bbb14edc8e8a8aac37f1ba3711bbb03b5ccb30 45 0
#2 := false
#15 := 4::Real
decl f4 :: Real
#12 := f4
#11 := 7::Real
#13 := (* 7::Real f4)
decl f3 :: Real
#9 := f3
#8 := 3::Real
#10 := (* 3::Real f3)
#14 := (+ #10 #13)
#49 := (>= #14 4::Real)
#47 := (not #49)
#16 := (< #14 4::Real)
#48 := (iff #16 #47)
#45 := [rewrite]: #48
#42 := [asserted]: #16
#46 := [mp #42 #45]: #47
#17 := 2::Real
#18 := (* 2::Real f3)
#51 := (<= #18 3::Real)
#52 := (not #51)
#19 := (< 3::Real #18)
#53 := (iff #19 #52)
#54 := [rewrite]: #53
#43 := [asserted]: #19
#55 := [mp #43 #54]: #52
#20 := 0::Real
#59 := (>= f4 0::Real)
#21 := (< f4 0::Real)
#22 := (not #21)
#66 := (iff #22 #59)
#57 := (not #59)
#61 := (not #57)
#64 := (iff #61 #59)
#65 := [rewrite]: #64
#62 := (iff #22 #61)
#58 := (iff #21 #57)
#60 := [rewrite]: #58
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#44 := [asserted]: #22
#68 := [mp #44 #67]: #59
[th-lemma arith farkas 7 3/2 1 #68 #55 #46]: false
unsat
4588f343772c15f1f661bad429073998929c6598 59 0
#2 := false
#20 := (not false)
decl f4 :: Int
#12 := f4
#8 := 0::Int
#16 := (<= 0::Int f4)
#17 := (not #16)
#18 := (or #17 #16)
#10 := 1::Int
#11 := (- 1::Int)
#13 := (* #11 f4)
decl f3 :: Int
#9 := f3
#14 := (+ f3 #13)
#15 := (<= 0::Int #14)
#19 := (or #15 #18)
#21 := (iff #19 #20)
#22 := (not #21)
#78 := (iff #22 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #22 #73)
#71 := (iff #21 true)
#66 := (iff true true)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #21 #66)
#64 := (iff #20 true)
#65 := [rewrite]: #64
#62 := (iff #19 true)
#43 := -1::Int
#46 := (* -1::Int f4)
#49 := (+ f3 #46)
#52 := (<= 0::Int #49)
#57 := (or #52 true)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #19 #57)
#55 := (iff #18 true)
#56 := [rewrite]: #55
#53 := (iff #15 #52)
#50 := (= #14 #49)
#47 := (= #13 #46)
#44 := (= #11 -1::Int)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#54 := [monotonicity #51]: #53
#59 := [monotonicity #54 #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#42 := [asserted]: #22
[mp #42 #79]: false
unsat
78003574b5d95d4c28641909502b0f435784ad24 104 0
#2 := false
decl f1 :: S1
#4 := f1
decl f2 :: S1
#5 := f2
#9 := 3::Int
decl f3 :: Int
#8 := f3
#49 := (>= f3 3::Int)
#54 := (ite #49 f2 f1)
#76 := (= f1 #54)
#61 := (ite #49 f1 f2)
#71 := (= f1 #61)
#118 := (iff #71 #76)
#116 := (iff #76 #71)
#64 := (= #54 #61)
#12 := (<= 3::Int f3)
#13 := (ite #12 f1 f2)
#10 := (< f3 3::Int)
#11 := (ite #10 f1 f2)
#14 := (distinct #11 #13)
#15 := (not #14)
#67 := (iff #15 #64)
#36 := (= #11 #13)
#65 := (iff #36 #64)
#62 := (= #13 #61)
#59 := (iff #12 #49)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#57 := (= #11 #54)
#47 := (not #49)
#51 := (ite #47 f1 f2)
#55 := (= #51 #54)
#56 := [rewrite]: #55
#52 := (= #11 #51)
#48 := (iff #10 #47)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#58 := [trans #53 #56]: #57
#66 := [monotonicity #58 #63]: #65
#45 := (iff #15 #36)
#37 := (not #36)
#40 := (not #37)
#43 := (iff #40 #36)
#44 := [rewrite]: #43
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#68 := [trans #46 #66]: #67
#35 := [asserted]: #15
#69 := [mp #35 #68]: #64
#117 := [monotonicity #69]: #116
#119 := [symm #117]: #118
#112 := (not #76)
#6 := (= f1 f2)
#72 := (= f2 #61)
#108 := (iff #72 #6)
#106 := (iff #6 #72)
#101 := (= #61 f2)
#104 := (iff #101 #72)
#105 := [commutativity]: #104
#102 := (iff #6 #101)
#99 := [hypothesis]: #76
#100 := [trans #99 #69]: #71
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#109 := [symm #107]: #108
#75 := (= f2 #54)
#87 := (iff #75 #72)
#88 := [monotonicity #69]: #87
#89 := (iff #72 #75)
#90 := [symm #88]: #89
#83 := (not #75)
#84 := [hypothesis]: #83
#77 := (or #47 #75)
#78 := [def-axiom]: #77
#85 := [unit-resolution #78 #84]: #47
#81 := (or #49 #72)
#82 := [def-axiom]: #81
#86 := [unit-resolution #82 #85]: #72
#91 := [mp #86 #90]: #75
#92 := [unit-resolution #84 #91]: false
#93 := [lemma #92]: #75
#96 := [mp #93 #88]: #72
#94 := (not #72)
#95 := [hypothesis]: #94
#97 := [unit-resolution #95 #96]: false
#98 := [lemma #97]: #72
#110 := [mp #98 #109]: #6
#7 := (not #6)
#34 := [asserted]: #7
#111 := [unit-resolution #34 #110]: false
#113 := [lemma #111]: #112
#73 := (or #49 #76)
#74 := [def-axiom]: #73
#114 := [unit-resolution #74 #113]: #49
#79 := (or #47 #71)
#80 := [def-axiom]: #79
#115 := [unit-resolution #80 #114]: #71
#120 := [mp #115 #119]: #76
[unit-resolution #113 #120]: false
unsat
5d7df2dbd3da6509a839adcbe280f54ee342d7d8 86 0
#2 := false
decl f3 :: Int
#9 := f3
#11 := 2::Int
#37 := (* 2::Int f3)
#8 := 0::Int
#68 := (= 0::Int #37)
#69 := (not #68)
#61 := (= #37 0::Int)
#112 := (not #61)
#118 := (iff #112 #69)
#116 := (iff #61 #68)
#117 := [commutativity]: #116
#119 := [monotonicity #117]: #118
#70 := (<= #37 0::Int)
#108 := (not #70)
#38 := (<= f3 0::Int)
#39 := (not #38)
#10 := (< 0::Int f3)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#35 := [asserted]: #10
#42 := [mp #35 #41]: #39
#109 := (or #108 #38)
#110 := [th-lemma arith assign-bounds 2]: #109
#111 := [unit-resolution #110 #42]: #108
#113 := (or #112 #70)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111]: #112
#120 := [mp #115 #119]: #69
#64 := (= f3 #37)
#65 := (not #64)
#66 := (= 0::Int f3)
#67 := (not #66)
#62 := (and #67 #69 #65)
#77 := (not #62)
#50 := (distinct 0::Int f3 #37)
#55 := (not #50)
#13 := (- f3 f3)
#12 := (* f3 2::Int)
#14 := (distinct f3 #12 #13)
#15 := (not #14)
#56 := (iff #15 #55)
#53 := (iff #14 #50)
#47 := (distinct f3 #37 0::Int)
#51 := (iff #47 #50)
#52 := [rewrite]: #51
#48 := (iff #14 #47)
#45 := (= #13 0::Int)
#46 := [rewrite]: #45
#43 := (= #12 #37)
#44 := [rewrite]: #43
#49 := [monotonicity #44 #46]: #48
#54 := [trans #49 #52]: #53
#57 := [monotonicity #54]: #56
#36 := [asserted]: #15
#60 := [mp #36 #57]: #55
#88 := (or #50 #77)
#89 := [def-axiom]: #88
#90 := [unit-resolution #89 #60]: #77
#63 := (= f3 0::Int)
#91 := (not #63)
#97 := (iff #91 #67)
#95 := (iff #63 #66)
#96 := [commutativity]: #95
#98 := [monotonicity #96]: #97
#92 := (or #91 #38)
#93 := [th-lemma arith triangle-eq]: #92
#94 := [unit-resolution #93 #42]: #91
#99 := [mp #94 #98]: #67
#72 := -1::Int
#73 := (* -1::Int #37)
#74 := (+ f3 #73)
#76 := (>= #74 0::Int)
#100 := (not #76)
#101 := (or #100 #38)
#102 := [th-lemma arith assign-bounds 1]: #101
#103 := [unit-resolution #102 #42]: #100
#104 := (or #65 #76)
#105 := [th-lemma arith triangle-eq]: #104
#106 := [unit-resolution #105 #103]: #65
#84 := (or #62 #66 #68 #64)
#85 := [def-axiom]: #84
#107 := [unit-resolution #85 #106 #99 #90]: #68
[unit-resolution #107 #120]: false
unsat
adcd90d27a640d65adf92b737298d76a88dcb2d7 551 0
#2 := false
#177 := 0::Int
decl f5 :: Int
#11 := f5
#174 := -1::Int
#175 := (* -1::Int f5)
decl f4 :: Int
#9 := f4
#199 := (+ f4 #175)
#245 := (<= #199 0::Int)
#210 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#211 := (+ f3 #210)
#226 := (>= #211 0::Int)
#176 := (+ f3 #175)
#186 := (>= #176 0::Int)
#185 := (not #186)
#19 := (= f3 f5)
#439 := (not #19)
#225 := (not #226)
#584 := [hypothesis]: #225
#476 := (or #439 #226)
#232 := (and #19 #225)
#370 := (not #232)
#485 := (iff #370 #476)
#477 := (not #476)
#480 := (not #477)
#483 := (iff #480 #476)
#484 := [rewrite]: #483
#481 := (iff #370 #480)
#478 := (iff #232 #477)
#479 := [rewrite]: #478
#482 := [monotonicity #479]: #481
#486 := [trans #482 #484]: #485
#198 := (>= #199 0::Int)
#197 := (not #198)
#295 := (and #197 #225)
#14 := (= f4 f5)
#287 := (and #14 #225)
#246 := (not #245)
#281 := (and #185 #246)
#276 := (and #19 #246)
#21 := (= f3 f4)
#268 := (and #21 #197)
#212 := (<= #211 0::Int)
#213 := (not #212)
#260 := (and #213 #246)
#252 := (and #21 #246)
#178 := (<= #176 0::Int)
#179 := (not #178)
#240 := (and #179 #225)
#222 := (and #14 #213)
#219 := (and #185 #213)
#216 := (and #19 #213)
#205 := (and #179 #197)
#192 := (and #21 #185)
#182 := (and #14 #179)
#123 := (and #14 #21)
#345 := (or #123 #182 #192 #205 #216 #219 #222 #232 #240 #252 #260 #268 #276 #281 #287 #295)
#350 := (not #345)
#25 := (= f4 f3)
#31 := (= f5 f4)
#38 := (and #31 #25)
#27 := (< f5 f3)
#37 := (and #14 #27)
#39 := (or #37 #38)
#16 := (< f3 f5)
#36 := (and #25 #16)
#40 := (or #36 #39)
#12 := (< f4 f5)
#35 := (and #12 #27)
#41 := (or #35 #40)
#29 := (= f5 f3)
#23 := (< f4 f3)
#34 := (and #23 #29)
#42 := (or #34 #41)
#33 := (and #23 #16)
#43 := (or #33 #42)
#32 := (and #31 #23)
#44 := (or #32 #43)
#10 := (< f3 f4)
#30 := (and #29 #10)
#45 := (or #30 #44)
#28 := (and #27 #10)
#46 := (or #28 #45)
#17 := (< f5 f4)
#26 := (and #17 #25)
#47 := (or #26 #46)
#24 := (and #17 #23)
#48 := (or #24 #47)
#22 := (and #21 #12)
#49 := (or #22 #48)
#20 := (and #19 #17)
#50 := (or #20 #49)
#18 := (and #16 #17)
#51 := (or #18 #50)
#15 := (and #10 #14)
#52 := (or #15 #51)
#13 := (and #10 #12)
#53 := (or #13 #52)
#54 := (not #53)
#353 := (iff #54 #350)
#126 := (or #37 #123)
#118 := (and #16 #21)
#129 := (or #118 #126)
#132 := (or #35 #129)
#110 := (and #19 #23)
#135 := (or #110 #132)
#104 := (and #16 #23)
#138 := (or #104 #135)
#101 := (and #14 #23)
#141 := (or #101 #138)
#94 := (and #10 #19)
#144 := (or #94 #141)
#86 := (and #10 #27)
#147 := (or #86 #144)
#83 := (and #17 #21)
#150 := (or #83 #147)
#153 := (or #24 #150)
#78 := (and #12 #21)
#156 := (or #78 #153)
#75 := (and #17 #19)
#159 := (or #75 #156)
#162 := (or #18 #159)
#165 := (or #15 #162)
#168 := (or #13 #165)
#171 := (not #168)
#351 := (iff #171 #350)
#348 := (iff #168 #345)
#300 := (or #182 #123)
#303 := (or #192 #300)
#306 := (or #205 #303)
#309 := (or #216 #306)
#312 := (or #219 #309)
#315 := (or #222 #312)
#318 := (or #232 #315)
#321 := (or #240 #318)
#324 := (or #252 #321)
#327 := (or #260 #324)
#330 := (or #268 #327)
#333 := (or #276 #330)
#336 := (or #281 #333)
#339 := (or #287 #336)
#342 := (or #295 #339)
#346 := (iff #342 #345)
#347 := [rewrite]: #346
#343 := (iff #168 #342)
#340 := (iff #165 #339)
#337 := (iff #162 #336)
#334 := (iff #159 #333)
#331 := (iff #156 #330)
#328 := (iff #153 #327)
#325 := (iff #150 #324)
#322 := (iff #147 #321)
#319 := (iff #144 #318)
#316 := (iff #141 #315)
#313 := (iff #138 #312)
#310 := (iff #135 #309)
#307 := (iff #132 #306)
#304 := (iff #129 #303)
#301 := (iff #126 #300)
#183 := (iff #37 #182)
#180 := (iff #27 #179)
#181 := [rewrite]: #180
#184 := [monotonicity #181]: #183
#302 := [monotonicity #184]: #301
#195 := (iff #118 #192)
#189 := (and #185 #21)
#193 := (iff #189 #192)
#194 := [rewrite]: #193
#190 := (iff #118 #189)
#187 := (iff #16 #185)
#188 := [rewrite]: #187
#191 := [monotonicity #188]: #190
#196 := [trans #191 #194]: #195
#305 := [monotonicity #196 #302]: #304
#208 := (iff #35 #205)
#202 := (and #197 #179)
#206 := (iff #202 #205)
#207 := [rewrite]: #206
#203 := (iff #35 #202)
#200 := (iff #12 #197)
#201 := [rewrite]: #200
#204 := [monotonicity #201 #181]: #203
#209 := [trans #204 #207]: #208
#308 := [monotonicity #209 #305]: #307
#217 := (iff #110 #216)
#214 := (iff #23 #213)
#215 := [rewrite]: #214
#218 := [monotonicity #215]: #217
#311 := [monotonicity #218 #308]: #310
#220 := (iff #104 #219)
#221 := [monotonicity #188 #215]: #220
#314 := [monotonicity #221 #311]: #313
#223 := (iff #101 #222)
#224 := [monotonicity #215]: #223
#317 := [monotonicity #224 #314]: #316
#235 := (iff #94 #232)
#229 := (and #225 #19)
#233 := (iff #229 #232)
#234 := [rewrite]: #233
#230 := (iff #94 #229)
#227 := (iff #10 #225)
#228 := [rewrite]: #227
#231 := [monotonicity #228]: #230
#236 := [trans #231 #234]: #235
#320 := [monotonicity #236 #317]: #319
#243 := (iff #86 #240)
#237 := (and #225 #179)
#241 := (iff #237 #240)
#242 := [rewrite]: #241
#238 := (iff #86 #237)
#239 := [monotonicity #228 #181]: #238
#244 := [trans #239 #242]: #243
#323 := [monotonicity #244 #320]: #322
#255 := (iff #83 #252)
#249 := (and #246 #21)
#253 := (iff #249 #252)
#254 := [rewrite]: #253
#250 := (iff #83 #249)
#247 := (iff #17 #246)
#248 := [rewrite]: #247
#251 := [monotonicity #248]: #250
#256 := [trans #251 #254]: #255
#326 := [monotonicity #256 #323]: #325
#263 := (iff #24 #260)
#257 := (and #246 #213)
#261 := (iff #257 #260)
#262 := [rewrite]: #261
#258 := (iff #24 #257)
#259 := [monotonicity #248 #215]: #258
#264 := [trans #259 #262]: #263
#329 := [monotonicity #264 #326]: #328
#271 := (iff #78 #268)
#265 := (and #197 #21)
#269 := (iff #265 #268)
#270 := [rewrite]: #269
#266 := (iff #78 #265)
#267 := [monotonicity #201]: #266
#272 := [trans #267 #270]: #271
#332 := [monotonicity #272 #329]: #331
#279 := (iff #75 #276)
#273 := (and #246 #19)
#277 := (iff #273 #276)
#278 := [rewrite]: #277
#274 := (iff #75 #273)
#275 := [monotonicity #248]: #274
#280 := [trans #275 #278]: #279
#335 := [monotonicity #280 #332]: #334
#282 := (iff #18 #281)
#283 := [monotonicity #188 #248]: #282
#338 := [monotonicity #283 #335]: #337
#290 := (iff #15 #287)
#284 := (and #225 #14)
#288 := (iff #284 #287)
#289 := [rewrite]: #288
#285 := (iff #15 #284)
#286 := [monotonicity #228]: #285
#291 := [trans #286 #289]: #290
#341 := [monotonicity #291 #338]: #340
#298 := (iff #13 #295)
#292 := (and #225 #197)
#296 := (iff #292 #295)
#297 := [rewrite]: #296
#293 := (iff #13 #292)
#294 := [monotonicity #228 #201]: #293
#299 := [trans #294 #297]: #298
#344 := [monotonicity #299 #341]: #343
#349 := [trans #344 #347]: #348
#352 := [monotonicity #349]: #351
#172 := (iff #54 #171)
#169 := (iff #53 #168)
#166 := (iff #52 #165)
#163 := (iff #51 #162)
#160 := (iff #50 #159)
#157 := (iff #49 #156)
#154 := (iff #48 #153)
#151 := (iff #47 #150)
#148 := (iff #46 #147)
#145 := (iff #45 #144)
#142 := (iff #44 #141)
#139 := (iff #43 #138)
#136 := (iff #42 #135)
#133 := (iff #41 #132)
#130 := (iff #40 #129)
#127 := (iff #39 #126)
#124 := (iff #38 #123)
#81 := (iff #25 #21)
#82 := [rewrite]: #81
#99 := (iff #31 #14)
#100 := [rewrite]: #99
#125 := [monotonicity #100 #82]: #124
#128 := [monotonicity #125]: #127
#121 := (iff #36 #118)
#115 := (and #21 #16)
#119 := (iff #115 #118)
#120 := [rewrite]: #119
#116 := (iff #36 #115)
#117 := [monotonicity #82]: #116
#122 := [trans #117 #120]: #121
#131 := [monotonicity #122 #128]: #130
#134 := [monotonicity #131]: #133
#113 := (iff #34 #110)
#107 := (and #23 #19)
#111 := (iff #107 #110)
#112 := [rewrite]: #111
#108 := (iff #34 #107)
#89 := (iff #29 #19)
#90 := [rewrite]: #89
#109 := [monotonicity #90]: #108
#114 := [trans #109 #112]: #113
#137 := [monotonicity #114 #134]: #136
#105 := (iff #33 #104)
#106 := [rewrite]: #105
#140 := [monotonicity #106 #137]: #139
#102 := (iff #32 #101)
#103 := [monotonicity #100]: #102
#143 := [monotonicity #103 #140]: #142
#97 := (iff #30 #94)
#91 := (and #19 #10)
#95 := (iff #91 #94)
#96 := [rewrite]: #95
#92 := (iff #30 #91)
#93 := [monotonicity #90]: #92
#98 := [trans #93 #96]: #97
#146 := [monotonicity #98 #143]: #145
#87 := (iff #28 #86)
#88 := [rewrite]: #87
#149 := [monotonicity #88 #146]: #148
#84 := (iff #26 #83)
#85 := [monotonicity #82]: #84
#152 := [monotonicity #85 #149]: #151
#155 := [monotonicity #152]: #154
#79 := (iff #22 #78)
#80 := [rewrite]: #79
#158 := [monotonicity #80 #155]: #157
#76 := (iff #20 #75)
#77 := [rewrite]: #76
#161 := [monotonicity #77 #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#354 := [trans #173 #352]: #353
#74 := [asserted]: #54
#355 := [mp #74 #354]: #350
#371 := [not-or-elim #355]: #370
#487 := [mp #371 #486]: #476
#585 := [unit-resolution #487 #584]: #439
#488 := (or #178 #226)
#372 := (not #240)
#497 := (iff #372 #488)
#489 := (not #488)
#492 := (not #489)
#495 := (iff #492 #488)
#496 := [rewrite]: #495
#493 := (iff #372 #492)
#490 := (iff #240 #489)
#491 := [rewrite]: #490
#494 := [monotonicity #491]: #493
#498 := [trans #494 #496]: #497
#373 := [not-or-elim #355]: #372
#499 := [mp #373 #498]: #488
#586 := [unit-resolution #499 #584]: #178
#587 := (or #19 #179 #185)
#588 := [th-lemma arith triangle-eq]: #587
#589 := [unit-resolution #588 #586 #585]: #185
#548 := (or #186 #245)
#382 := (not #281)
#557 := (iff #382 #548)
#549 := (not #548)
#552 := (not #549)
#555 := (iff #552 #548)
#556 := [rewrite]: #555
#553 := (iff #382 #552)
#550 := (iff #281 #549)
#551 := [rewrite]: #550
#554 := [monotonicity #551]: #553
#558 := [trans #554 #556]: #557
#383 := [not-or-elim #355]: #382
#559 := [mp #383 #558]: #548
#590 := [unit-resolution #559 #589]: #245
#572 := (or #198 #226)
#386 := (not #295)
#581 := (iff #386 #572)
#573 := (not #572)
#576 := (not #573)
#579 := (iff #576 #572)
#580 := [rewrite]: #579
#577 := (iff #386 #576)
#574 := (iff #295 #573)
#575 := [rewrite]: #574
#578 := [monotonicity #575]: #577
#582 := [trans #578 #580]: #581
#387 := [not-or-elim #355]: #386
#583 := [mp #387 #582]: #572
#591 := [unit-resolution #583 #584]: #198
#423 := (not #14)
#560 := (or #423 #226)
#384 := (not #287)
#569 := (iff #384 #560)
#561 := (not #560)
#564 := (not #561)
#567 := (iff #564 #560)
#568 := [rewrite]: #567
#565 := (iff #384 #564)
#562 := (iff #287 #561)
#563 := [rewrite]: #562
#566 := [monotonicity #563]: #565
#570 := [trans #566 #568]: #569
#385 := [not-or-elim #355]: #384
#571 := [mp #385 #570]: #560
#592 := [unit-resolution #571 #584]: #423
#593 := (or #14 #246 #197)
#594 := [th-lemma arith triangle-eq]: #593
#595 := [unit-resolution #594 #592 #591 #590]: false
#596 := [lemma #595]: #226
#597 := [hypothesis]: #246
#512 := (or #212 #245)
#376 := (not #260)
#521 := (iff #376 #512)
#513 := (not #512)
#516 := (not #513)
#519 := (iff #516 #512)
#520 := [rewrite]: #519
#517 := (iff #376 #516)
#514 := (iff #260 #513)
#515 := [rewrite]: #514
#518 := [monotonicity #515]: #517
#522 := [trans #518 #520]: #521
#377 := [not-or-elim #355]: #376
#523 := [mp #377 #522]: #512
#598 := [unit-resolution #523 #597]: #212
#424 := (not #21)
#500 := (or #424 #245)
#374 := (not #252)
#509 := (iff #374 #500)
#501 := (not #500)
#504 := (not #501)
#507 := (iff #504 #500)
#508 := [rewrite]: #507
#505 := (iff #374 #504)
#502 := (iff #252 #501)
#503 := [rewrite]: #502
#506 := [monotonicity #503]: #505
#510 := [trans #506 #508]: #509
#375 := [not-or-elim #355]: #374
#511 := [mp #375 #510]: #500
#599 := [unit-resolution #511 #597]: #424
#600 := (or #21 #213 #225)
#601 := [th-lemma arith triangle-eq]: #600
#602 := [unit-resolution #601 #599 #598 #596]: false
#603 := [lemma #602]: #245
#604 := [hypothesis]: #213
#440 := (or #439 #212)
#364 := (not #216)
#449 := (iff #364 #440)
#441 := (not #440)
#444 := (not #441)
#447 := (iff #444 #440)
#448 := [rewrite]: #447
#445 := (iff #364 #444)
#442 := (iff #216 #441)
#443 := [rewrite]: #442
#446 := [monotonicity #443]: #445
#450 := [trans #446 #448]: #449
#365 := [not-or-elim #355]: #364
#451 := [mp #365 #450]: #440
#605 := [unit-resolution #451 #604]: #439
#452 := (or #186 #212)
#366 := (not #219)
#461 := (iff #366 #452)
#453 := (not #452)
#456 := (not #453)
#459 := (iff #456 #452)
#460 := [rewrite]: #459
#457 := (iff #366 #456)
#454 := (iff #219 #453)
#455 := [rewrite]: #454
#458 := [monotonicity #455]: #457
#462 := [trans #458 #460]: #461
#367 := [not-or-elim #355]: #366
#463 := [mp #367 #462]: #452
#606 := [unit-resolution #463 #604]: #186
#607 := [unit-resolution #588 #606 #605]: #179
#427 := (or #178 #198)
#362 := (not #205)
#436 := (iff #362 #427)
#428 := (not #427)
#431 := (not #428)
#434 := (iff #431 #427)
#435 := [rewrite]: #434
#432 := (iff #362 #431)
#429 := (iff #205 #428)
#430 := [rewrite]: #429
#433 := [monotonicity #430]: #432
#437 := [trans #433 #435]: #436
#363 := [not-or-elim #355]: #362
#438 := [mp #363 #437]: #427
#608 := [unit-resolution #438 #607]: #198
#464 := (or #423 #212)
#368 := (not #222)
#473 := (iff #368 #464)
#465 := (not #464)
#468 := (not #465)
#471 := (iff #468 #464)
#472 := [rewrite]: #471
#469 := (iff #368 #468)
#466 := (iff #222 #465)
#467 := [rewrite]: #466
#470 := [monotonicity #467]: #469
#474 := [trans #470 #472]: #473
#369 := [not-or-elim #355]: #368
#475 := [mp #369 #474]: #464
#609 := [unit-resolution #475 #604]: #423
#610 := [unit-resolution #594 #609 #608 #603]: false
#611 := [lemma #610]: #212
#612 := [th-lemma arith eq-propagate 1 1 #596 #611]: #21
#524 := (or #424 #198)
#378 := (not #268)
#533 := (iff #378 #524)
#525 := (not #524)
#528 := (not #525)
#531 := (iff #528 #524)
#532 := [rewrite]: #531
#529 := (iff #378 #528)
#526 := (iff #268 #525)
#527 := [rewrite]: #526
#530 := [monotonicity #527]: #529
#534 := [trans #530 #532]: #533
#379 := [not-or-elim #355]: #378
#535 := [mp #379 #534]: #524
#614 := [unit-resolution #535 #612]: #198
#425 := (or #423 #424)
#356 := (not #123)
#416 := (iff #356 #425)
#426 := (not #425)
#419 := (not #426)
#418 := (iff #419 #425)
#415 := [rewrite]: #418
#420 := (iff #356 #419)
#421 := (iff #123 #426)
#422 := [rewrite]: #421
#417 := [monotonicity #422]: #420
#413 := [trans #417 #415]: #416
#357 := [not-or-elim #355]: #356
#414 := [mp #357 #413]: #425
#615 := [unit-resolution #414 #612]: #423
[unit-resolution #594 #615 #614 #603]: false
unsat
c461f417e01961729e64bc338da8fe68ac7ad70e 2290 0
#2 := false
#10 := 0::Int
decl f7 :: Int
#23 := f7
#98 := -1::Int
#151 := (* -1::Int f7)
#482 := (>= f7 0::Int)
#489 := (ite #482 f7 #151)
#500 := (* -1::Int #489)
#1034 := (+ #151 #500)
#1610 := (<= #1034 0::Int)
decl f11 :: Int
#47 := f11
#219 := (* -1::Int f11)
#366 := (>= f11 0::Int)
#373 := (ite #366 f11 #219)
#384 := (* -1::Int #373)
#765 := (+ f11 #384)
#892 := (<= #765 0::Int)
#1335 := (not #892)
#671 := (= #219 #373)
#1102 := (not #671)
decl f10 :: Int
#41 := f10
#202 := (* -1::Int f10)
#395 := (>= f10 0::Int)
#402 := (ite #395 f10 #202)
#413 := (* -1::Int #402)
#762 := (+ f10 #413)
#763 := (<= #762 0::Int)
#678 := (= f10 #402)
decl f4 :: Int
#9 := f4
#569 := (>= f4 0::Int)
#483 := (not #482)
#1664 := [hypothesis]: #483
#1973 := (or #569 #482)
decl f6 :: Int
#17 := f6
#134 := (* -1::Int f6)
#511 := (>= f6 0::Int)
#518 := (ite #511 f6 #134)
#529 := (* -1::Int #518)
#747 := (+ f6 #529)
#748 := (<= #747 0::Int)
#710 := (= f6 #518)
#512 := (not #511)
#1681 := [hypothesis]: #512
#1869 := (or #482 #511)
decl f13 :: Int
#59 := f13
#66 := (= f4 f13)
#651 := (not #66)
decl f12 :: Int
#53 := f12
decl f5 :: Int
#14 := f5
#65 := (= f5 f12)
#236 := (* -1::Int f12)
#734 := (+ f5 #236)
#736 := (>= #734 0::Int)
decl f9 :: Int
#35 := f9
#185 := (* -1::Int f9)
#424 := (>= f9 0::Int)
#431 := (ite #424 f9 #185)
#442 := (* -1::Int #431)
#759 := (+ f9 #442)
#760 := (<= #759 0::Int)
#686 := (= f9 #431)
#1816 := (or #424 #511)
#750 := (+ f7 #500)
#1322 := (<= #750 0::Int)
#1505 := (not #1322)
#425 := (not #424)
#917 := [hypothesis]: #425
#1017 := (+ #134 #529)
#1035 := (<= #1017 0::Int)
#711 := (= #134 #518)
#714 := (or #511 #711)
#715 := [def-axiom]: #714
#1694 := [unit-resolution #715 #1681]: #711
#1196 := (not #711)
#1428 := (or #1196 #1035)
#1550 := (not #1035)
#1563 := [hypothesis]: #1550
#1228 := [hypothesis]: #711
#1429 := [th-lemma arith triangle-eq]: #1428
#1564 := [unit-resolution #1429 #1228 #1563]: false
#1565 := [lemma #1564]: #1428
#1695 := [unit-resolution #1565 #1694]: #1035
#1805 := (or #748 #511 #1550)
#1806 := [th-lemma arith assign-bounds 2 1]: #1805
#1807 := [unit-resolution #1806 #1695 #1681]: #748
#1108 := (>= #1017 0::Int)
#1197 := (or #1196 #1108)
#1125 := (not #1108)
#1227 := [hypothesis]: #1125
#1198 := [th-lemma arith triangle-eq]: #1197
#1229 := [unit-resolution #1198 #1228 #1227]: false
#1230 := [lemma #1229]: #1197
#1808 := [unit-resolution #1230 #1694]: #1108
decl f8 :: Int
#29 := f8
#168 := (* -1::Int f8)
#453 := (>= f8 0::Int)
#460 := (ite #453 f8 #168)
#471 := (* -1::Int #460)
#472 := (+ f9 #471)
#473 := (+ f7 #472)
#701 := (>= #473 0::Int)
#474 := (= #473 0::Int)
#99 := (* -1::Int f4)
#576 := (ite #569 f4 #99)
#587 := (* -1::Int #576)
#588 := (+ f5 #587)
decl f3 :: Int
#8 := f3
#589 := (+ f3 #588)
#590 := (= #589 0::Int)
#595 := (not #590)
#117 := (* -1::Int f3)
#540 := (>= f3 0::Int)
#547 := (ite #540 f3 #117)
#558 := (* -1::Int #547)
#559 := (+ f6 #558)
#560 := (+ f4 #559)
#561 := (= #560 0::Int)
#566 := (not #561)
#530 := (+ f7 #529)
#531 := (+ f3 #530)
#532 := (= #531 0::Int)
#537 := (not #532)
#501 := (+ f8 #500)
#502 := (+ f6 #501)
#503 := (= #502 0::Int)
#508 := (not #503)
#479 := (not #474)
#443 := (+ f10 #442)
#444 := (+ f8 #443)
#445 := (= #444 0::Int)
#450 := (not #445)
#414 := (+ f11 #413)
#415 := (+ f9 #414)
#416 := (= #415 0::Int)
#421 := (not #416)
#385 := (+ f12 #384)
#386 := (+ f10 #385)
#387 := (= #386 0::Int)
#392 := (not #387)
#337 := (>= f12 0::Int)
#344 := (ite #337 f12 #236)
#355 := (* -1::Int #344)
#356 := (+ f13 #355)
#357 := (+ f11 #356)
#358 := (= #357 0::Int)
#363 := (not #358)
#67 := (and #65 #66)
#625 := (or #67 #363 #392 #421 #450 #479 #508 #537 #566 #595)
#630 := (not #625)
#61 := (- f12)
#60 := (< f12 0::Int)
#62 := (ite #60 #61 f12)
#63 := (- #62 f11)
#64 := (= f13 #63)
#68 := (implies #64 #67)
#55 := (- f11)
#54 := (< f11 0::Int)
#56 := (ite #54 #55 f11)
#57 := (- #56 f10)
#58 := (= f12 #57)
#69 := (implies #58 #68)
#49 := (- f10)
#48 := (< f10 0::Int)
#50 := (ite #48 #49 f10)
#51 := (- #50 f9)
#52 := (= f11 #51)
#70 := (implies #52 #69)
#43 := (- f9)
#42 := (< f9 0::Int)
#44 := (ite #42 #43 f9)
#45 := (- #44 f8)
#46 := (= f10 #45)
#71 := (implies #46 #70)
#37 := (- f8)
#36 := (< f8 0::Int)
#38 := (ite #36 #37 f8)
#39 := (- #38 f7)
#40 := (= f9 #39)
#72 := (implies #40 #71)
#31 := (- f7)
#30 := (< f7 0::Int)
#32 := (ite #30 #31 f7)
#33 := (- #32 f6)
#34 := (= f8 #33)
#73 := (implies #34 #72)
#25 := (- f6)
#24 := (< f6 0::Int)
#26 := (ite #24 #25 f6)
#27 := (- #26 f3)
#28 := (= f7 #27)
#74 := (implies #28 #73)
#19 := (- f3)
#18 := (< f3 0::Int)
#20 := (ite #18 #19 f3)
#21 := (- #20 f4)
#22 := (= f6 #21)
#75 := (implies #22 #74)
#12 := (- f4)
#11 := (< f4 0::Int)
#13 := (ite #11 #12 f4)
#15 := (- #13 f5)
#16 := (= f3 #15)
#76 := (implies #16 #75)
#77 := (not #76)
#633 := (iff #77 #630)
#239 := (ite #60 #236 f12)
#245 := (+ #219 #239)
#250 := (= f13 #245)
#256 := (not #250)
#257 := (or #67 #256)
#222 := (ite #54 #219 f11)
#228 := (+ #202 #222)
#233 := (= f12 #228)
#265 := (not #233)
#266 := (or #265 #257)
#205 := (ite #48 #202 f10)
#211 := (+ #185 #205)
#216 := (= f11 #211)
#274 := (not #216)
#275 := (or #274 #266)
#188 := (ite #42 #185 f9)
#194 := (+ #168 #188)
#199 := (= f10 #194)
#283 := (not #199)
#284 := (or #283 #275)
#171 := (ite #36 #168 f8)
#177 := (+ #151 #171)
#182 := (= f9 #177)
#292 := (not #182)
#293 := (or #292 #284)
#154 := (ite #30 #151 f7)
#160 := (+ #134 #154)
#165 := (= f8 #160)
#301 := (not #165)
#302 := (or #301 #293)
#137 := (ite #24 #134 f6)
#143 := (+ #117 #137)
#148 := (= f7 #143)
#310 := (not #148)
#311 := (or #310 #302)
#120 := (ite #18 #117 f3)
#126 := (+ #99 #120)
#131 := (= f6 #126)
#319 := (not #131)
#320 := (or #319 #311)
#102 := (ite #11 #99 f4)
#108 := (* -1::Int f5)
#109 := (+ #108 #102)
#114 := (= f3 #109)
#328 := (not #114)
#329 := (or #328 #320)
#334 := (not #329)
#631 := (iff #334 #630)
#628 := (iff #329 #625)
#598 := (or #67 #363)
#601 := (or #392 #598)
#604 := (or #421 #601)
#607 := (or #450 #604)
#610 := (or #479 #607)
#613 := (or #508 #610)
#616 := (or #537 #613)
#619 := (or #566 #616)
#622 := (or #595 #619)
#626 := (iff #622 #625)
#627 := [rewrite]: #626
#623 := (iff #329 #622)
#620 := (iff #320 #619)
#617 := (iff #311 #616)
#614 := (iff #302 #613)
#611 := (iff #293 #610)
#608 := (iff #284 #607)
#605 := (iff #275 #604)
#602 := (iff #266 #601)
#599 := (iff #257 #598)
#364 := (iff #256 #363)
#361 := (iff #250 #358)
#349 := (+ #219 #344)
#352 := (= f13 #349)
#359 := (iff #352 #358)
#360 := [rewrite]: #359
#353 := (iff #250 #352)
#350 := (= #245 #349)
#347 := (= #239 #344)
#338 := (not #337)
#341 := (ite #338 #236 f12)
#345 := (= #341 #344)
#346 := [rewrite]: #345
#342 := (= #239 #341)
#339 := (iff #60 #338)
#340 := [rewrite]: #339
#343 := [monotonicity #340]: #342
#348 := [trans #343 #346]: #347
#351 := [monotonicity #348]: #350
#354 := [monotonicity #351]: #353
#362 := [trans #354 #360]: #361
#365 := [monotonicity #362]: #364
#600 := [monotonicity #365]: #599
#393 := (iff #265 #392)
#390 := (iff #233 #387)
#378 := (+ #202 #373)
#381 := (= f12 #378)
#388 := (iff #381 #387)
#389 := [rewrite]: #388
#382 := (iff #233 #381)
#379 := (= #228 #378)
#376 := (= #222 #373)
#367 := (not #366)
#370 := (ite #367 #219 f11)
#374 := (= #370 #373)
#375 := [rewrite]: #374
#371 := (= #222 #370)
#368 := (iff #54 #367)
#369 := [rewrite]: #368
#372 := [monotonicity #369]: #371
#377 := [trans #372 #375]: #376
#380 := [monotonicity #377]: #379
#383 := [monotonicity #380]: #382
#391 := [trans #383 #389]: #390
#394 := [monotonicity #391]: #393
#603 := [monotonicity #394 #600]: #602
#422 := (iff #274 #421)
#419 := (iff #216 #416)
#407 := (+ #185 #402)
#410 := (= f11 #407)
#417 := (iff #410 #416)
#418 := [rewrite]: #417
#411 := (iff #216 #410)
#408 := (= #211 #407)
#405 := (= #205 #402)
#396 := (not #395)
#399 := (ite #396 #202 f10)
#403 := (= #399 #402)
#404 := [rewrite]: #403
#400 := (= #205 #399)
#397 := (iff #48 #396)
#398 := [rewrite]: #397
#401 := [monotonicity #398]: #400
#406 := [trans #401 #404]: #405
#409 := [monotonicity #406]: #408
#412 := [monotonicity #409]: #411
#420 := [trans #412 #418]: #419
#423 := [monotonicity #420]: #422
#606 := [monotonicity #423 #603]: #605
#451 := (iff #283 #450)
#448 := (iff #199 #445)
#436 := (+ #168 #431)
#439 := (= f10 #436)
#446 := (iff #439 #445)
#447 := [rewrite]: #446
#440 := (iff #199 #439)
#437 := (= #194 #436)
#434 := (= #188 #431)
#428 := (ite #425 #185 f9)
#432 := (= #428 #431)
#433 := [rewrite]: #432
#429 := (= #188 #428)
#426 := (iff #42 #425)
#427 := [rewrite]: #426
#430 := [monotonicity #427]: #429
#435 := [trans #430 #433]: #434
#438 := [monotonicity #435]: #437
#441 := [monotonicity #438]: #440
#449 := [trans #441 #447]: #448
#452 := [monotonicity #449]: #451
#609 := [monotonicity #452 #606]: #608
#480 := (iff #292 #479)
#477 := (iff #182 #474)
#465 := (+ #151 #460)
#468 := (= f9 #465)
#475 := (iff #468 #474)
#476 := [rewrite]: #475
#469 := (iff #182 #468)
#466 := (= #177 #465)
#463 := (= #171 #460)
#454 := (not #453)
#457 := (ite #454 #168 f8)
#461 := (= #457 #460)
#462 := [rewrite]: #461
#458 := (= #171 #457)
#455 := (iff #36 #454)
#456 := [rewrite]: #455
#459 := [monotonicity #456]: #458
#464 := [trans #459 #462]: #463
#467 := [monotonicity #464]: #466
#470 := [monotonicity #467]: #469
#478 := [trans #470 #476]: #477
#481 := [monotonicity #478]: #480
#612 := [monotonicity #481 #609]: #611
#509 := (iff #301 #508)
#506 := (iff #165 #503)
#494 := (+ #134 #489)
#497 := (= f8 #494)
#504 := (iff #497 #503)
#505 := [rewrite]: #504
#498 := (iff #165 #497)
#495 := (= #160 #494)
#492 := (= #154 #489)
#486 := (ite #483 #151 f7)
#490 := (= #486 #489)
#491 := [rewrite]: #490
#487 := (= #154 #486)
#484 := (iff #30 #483)
#485 := [rewrite]: #484
#488 := [monotonicity #485]: #487
#493 := [trans #488 #491]: #492
#496 := [monotonicity #493]: #495
#499 := [monotonicity #496]: #498
#507 := [trans #499 #505]: #506
#510 := [monotonicity #507]: #509
#615 := [monotonicity #510 #612]: #614
#538 := (iff #310 #537)
#535 := (iff #148 #532)
#523 := (+ #117 #518)
#526 := (= f7 #523)
#533 := (iff #526 #532)
#534 := [rewrite]: #533
#527 := (iff #148 #526)
#524 := (= #143 #523)
#521 := (= #137 #518)
#515 := (ite #512 #134 f6)
#519 := (= #515 #518)
#520 := [rewrite]: #519
#516 := (= #137 #515)
#513 := (iff #24 #512)
#514 := [rewrite]: #513
#517 := [monotonicity #514]: #516
#522 := [trans #517 #520]: #521
#525 := [monotonicity #522]: #524
#528 := [monotonicity #525]: #527
#536 := [trans #528 #534]: #535
#539 := [monotonicity #536]: #538
#618 := [monotonicity #539 #615]: #617
#567 := (iff #319 #566)
#564 := (iff #131 #561)
#552 := (+ #99 #547)
#555 := (= f6 #552)
#562 := (iff #555 #561)
#563 := [rewrite]: #562
#556 := (iff #131 #555)
#553 := (= #126 #552)
#550 := (= #120 #547)
#541 := (not #540)
#544 := (ite #541 #117 f3)
#548 := (= #544 #547)
#549 := [rewrite]: #548
#545 := (= #120 #544)
#542 := (iff #18 #541)
#543 := [rewrite]: #542
#546 := [monotonicity #543]: #545
#551 := [trans #546 #549]: #550
#554 := [monotonicity #551]: #553
#557 := [monotonicity #554]: #556
#565 := [trans #557 #563]: #564
#568 := [monotonicity #565]: #567
#621 := [monotonicity #568 #618]: #620
#596 := (iff #328 #595)
#593 := (iff #114 #590)
#581 := (+ #108 #576)
#584 := (= f3 #581)
#591 := (iff #584 #590)
#592 := [rewrite]: #591
#585 := (iff #114 #584)
#582 := (= #109 #581)
#579 := (= #102 #576)
#570 := (not #569)
#573 := (ite #570 #99 f4)
#577 := (= #573 #576)
#578 := [rewrite]: #577
#574 := (= #102 #573)
#571 := (iff #11 #570)
#572 := [rewrite]: #571
#575 := [monotonicity #572]: #574
#580 := [trans #575 #578]: #579
#583 := [monotonicity #580]: #582
#586 := [monotonicity #583]: #585
#594 := [trans #586 #592]: #593
#597 := [monotonicity #594]: #596
#624 := [monotonicity #597 #621]: #623
#629 := [trans #624 #627]: #628
#632 := [monotonicity #629]: #631
#335 := (iff #77 #334)
#332 := (iff #76 #329)
#325 := (implies #114 #320)
#330 := (iff #325 #329)
#331 := [rewrite]: #330
#326 := (iff #76 #325)
#323 := (iff #75 #320)
#316 := (implies #131 #311)
#321 := (iff #316 #320)
#322 := [rewrite]: #321
#317 := (iff #75 #316)
#314 := (iff #74 #311)
#307 := (implies #148 #302)
#312 := (iff #307 #311)
#313 := [rewrite]: #312
#308 := (iff #74 #307)
#305 := (iff #73 #302)
#298 := (implies #165 #293)
#303 := (iff #298 #302)
#304 := [rewrite]: #303
#299 := (iff #73 #298)
#296 := (iff #72 #293)
#289 := (implies #182 #284)
#294 := (iff #289 #293)
#295 := [rewrite]: #294
#290 := (iff #72 #289)
#287 := (iff #71 #284)
#280 := (implies #199 #275)
#285 := (iff #280 #284)
#286 := [rewrite]: #285
#281 := (iff #71 #280)
#278 := (iff #70 #275)
#271 := (implies #216 #266)
#276 := (iff #271 #275)
#277 := [rewrite]: #276
#272 := (iff #70 #271)
#269 := (iff #69 #266)
#262 := (implies #233 #257)
#267 := (iff #262 #266)
#268 := [rewrite]: #267
#263 := (iff #69 #262)
#260 := (iff #68 #257)
#253 := (implies #250 #67)
#258 := (iff #253 #257)
#259 := [rewrite]: #258
#254 := (iff #68 #253)
#251 := (iff #64 #250)
#248 := (= #63 #245)
#242 := (- #239 f11)
#246 := (= #242 #245)
#247 := [rewrite]: #246
#243 := (= #63 #242)
#240 := (= #62 #239)
#237 := (= #61 #236)
#238 := [rewrite]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#249 := [trans #244 #247]: #248
#252 := [monotonicity #249]: #251
#255 := [monotonicity #252]: #254
#261 := [trans #255 #259]: #260
#234 := (iff #58 #233)
#231 := (= #57 #228)
#225 := (- #222 f10)
#229 := (= #225 #228)
#230 := [rewrite]: #229
#226 := (= #57 #225)
#223 := (= #56 #222)
#220 := (= #55 #219)
#221 := [rewrite]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#232 := [trans #227 #230]: #231
#235 := [monotonicity #232]: #234
#264 := [monotonicity #235 #261]: #263
#270 := [trans #264 #268]: #269
#217 := (iff #52 #216)
#214 := (= #51 #211)
#208 := (- #205 f9)
#212 := (= #208 #211)
#213 := [rewrite]: #212
#209 := (= #51 #208)
#206 := (= #50 #205)
#203 := (= #49 #202)
#204 := [rewrite]: #203
#207 := [monotonicity #204]: #206
#210 := [monotonicity #207]: #209
#215 := [trans #210 #213]: #214
#218 := [monotonicity #215]: #217
#273 := [monotonicity #218 #270]: #272
#279 := [trans #273 #277]: #278
#200 := (iff #46 #199)
#197 := (= #45 #194)
#191 := (- #188 f8)
#195 := (= #191 #194)
#196 := [rewrite]: #195
#192 := (= #45 #191)
#189 := (= #44 #188)
#186 := (= #43 #185)
#187 := [rewrite]: #186
#190 := [monotonicity #187]: #189
#193 := [monotonicity #190]: #192
#198 := [trans #193 #196]: #197
#201 := [monotonicity #198]: #200
#282 := [monotonicity #201 #279]: #281
#288 := [trans #282 #286]: #287
#183 := (iff #40 #182)
#180 := (= #39 #177)
#174 := (- #171 f7)
#178 := (= #174 #177)
#179 := [rewrite]: #178
#175 := (= #39 #174)
#172 := (= #38 #171)
#169 := (= #37 #168)
#170 := [rewrite]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#181 := [trans #176 #179]: #180
#184 := [monotonicity #181]: #183
#291 := [monotonicity #184 #288]: #290
#297 := [trans #291 #295]: #296
#166 := (iff #34 #165)
#163 := (= #33 #160)
#157 := (- #154 f6)
#161 := (= #157 #160)
#162 := [rewrite]: #161
#158 := (= #33 #157)
#155 := (= #32 #154)
#152 := (= #31 #151)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#164 := [trans #159 #162]: #163
#167 := [monotonicity #164]: #166
#300 := [monotonicity #167 #297]: #299
#306 := [trans #300 #304]: #305
#149 := (iff #28 #148)
#146 := (= #27 #143)
#140 := (- #137 f3)
#144 := (= #140 #143)
#145 := [rewrite]: #144
#141 := (= #27 #140)
#138 := (= #26 #137)
#135 := (= #25 #134)
#136 := [rewrite]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#147 := [trans #142 #145]: #146
#150 := [monotonicity #147]: #149
#309 := [monotonicity #150 #306]: #308
#315 := [trans #309 #313]: #314
#132 := (iff #22 #131)
#129 := (= #21 #126)
#123 := (- #120 f4)
#127 := (= #123 #126)
#128 := [rewrite]: #127
#124 := (= #21 #123)
#121 := (= #20 #120)
#118 := (= #19 #117)
#119 := [rewrite]: #118
#122 := [monotonicity #119]: #121
#125 := [monotonicity #122]: #124
#130 := [trans #125 #128]: #129
#133 := [monotonicity #130]: #132
#318 := [monotonicity #133 #315]: #317
#324 := [trans #318 #322]: #323
#115 := (iff #16 #114)
#112 := (= #15 #109)
#105 := (- #102 f5)
#110 := (= #105 #109)
#111 := [rewrite]: #110
#106 := (= #15 #105)
#103 := (= #13 #102)
#100 := (= #12 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#107 := [monotonicity #104]: #106
#113 := [trans #107 #111]: #112
#116 := [monotonicity #113]: #115
#327 := [monotonicity #116 #324]: #326
#333 := [trans #327 #331]: #332
#336 := [monotonicity #333]: #335
#634 := [trans #336 #632]: #633
#97 := [asserted]: #77
#635 := [mp #97 #634]: #630
#642 := [not-or-elim #635]: #474
#871 := (or #479 #701)
#872 := [th-lemma arith triangle-eq]: #871
#873 := [unit-resolution #872 #642]: #701
#709 := (>= #502 0::Int)
#643 := [not-or-elim #635]: #503
#1502 := (or #508 #709)
#1503 := [th-lemma arith triangle-eq]: #1502
#1504 := [unit-resolution #1503 #643]: #709
#753 := (+ f8 #471)
#754 := (<= #753 0::Int)
#694 := (= f8 #460)
#1803 := (or #453 #424 #511)
#757 := (+ #168 #471)
#761 := (<= #757 0::Int)
#986 := (not #761)
#918 := [hypothesis]: #454
#1683 := (or #511 #483 #453)
#702 := (= f7 #489)
#909 := [hypothesis]: #482
#704 := (or #483 #702)
#705 := [def-axiom]: #704
#1663 := [unit-resolution #705 #909]: #702
#1059 := (not #702)
#1493 := (or #1059 #1322)
#1494 := [th-lemma arith triangle-eq]: #1493
#1680 := [unit-resolution #1494 #1663]: #1322
#1682 := [th-lemma arith farkas 1 1 1 1 1 #909 #1681 #918 #1504 #1680]: false
#1684 := [lemma #1682]: #1683
#1800 := [unit-resolution #1684 #918 #1681]: #483
#1616 := (or #482 #986 #424 #453)
#875 := (not #701)
#1614 := (or #482 #986 #875 #424 #453)
#1615 := [th-lemma arith assign-bounds 1 1 1 1]: #1614
#1617 := [unit-resolution #1615 #873]: #1616
#1801 := [unit-resolution #1617 #1800 #917 #918]: #986
#695 := (= #168 #460)
#698 := (or #453 #695)
#699 := [def-axiom]: #698
#919 := [unit-resolution #699 #918]: #695
#920 := (not #695)
#921 := (or #920 #761)
#922 := [th-lemma arith triangle-eq]: #921
#1802 := [unit-resolution #922 #919 #1801]: false
#1804 := [lemma #1802]: #1803
#1809 := [unit-resolution #1804 #917 #1681]: #453
#696 := (or #454 #694)
#697 := [def-axiom]: #696
#1810 := [unit-resolution #697 #1809]: #694
#852 := (not #694)
#860 := (or #852 #754)
#861 := [th-lemma arith triangle-eq]: #860
#1811 := [unit-resolution #861 #1810]: #754
#1506 := (not #709)
#1014 := (not #748)
#874 := (not #754)
#1792 := (or #1125 #874 #875 #424 #1014 #1505 #1506)
#1793 := [th-lemma arith assign-bounds 2 2 2 1 2 2]: #1792
#1812 := [unit-resolution #1793 #1811 #1504 #873 #1808 #1807 #917]: #1505
#1648 := (or #482 #424 #874 #875 #454)
#1649 := [th-lemma arith assign-bounds 1 1 1 1]: #1648
#1813 := [unit-resolution #1649 #1811 #873 #917 #1809]: #482
#1814 := [unit-resolution #705 #1813]: #702
#1815 := [unit-resolution #1494 #1814 #1812]: false
#1817 := [lemma #1815]: #1816
#1823 := [unit-resolution #1817 #1681]: #424
#688 := (or #425 #686)
#689 := [def-axiom]: #688
#1824 := [unit-resolution #689 #1823]: #686
#882 := (not #686)
#883 := (or #882 #760)
#884 := [th-lemma arith triangle-eq]: #883
#1825 := [unit-resolution #884 #1824]: #760
#1821 := (or #453 #511)
#1669 := (not #1610)
#1673 := (or #511 #453 #482 #1669 #1506)
#1674 := [th-lemma arith assign-bounds 1 1 1 1]: #1673
#1818 := [unit-resolution #1674 #918 #1504 #1681 #1800]: #1669
#703 := (= #151 #489)
#706 := (or #482 #703)
#707 := [def-axiom]: #706
#1819 := [unit-resolution #707 #1800]: #703
#1052 := (not #703)
#1666 := (or #1052 #1610)
#1667 := [th-lemma arith triangle-eq]: #1666
#1820 := [unit-resolution #1667 #1819 #1818]: false
#1822 := [lemma #1820]: #1821
#1826 := [unit-resolution #1822 #1681]: #453
#1827 := [unit-resolution #697 #1826]: #694
#1828 := [unit-resolution #861 #1827]: #754
#938 := (not #760)
#1416 := (or #482 #874 #938 #395)
#693 := (>= #444 0::Int)
#641 := [not-or-elim #635]: #445
#857 := (or #450 #693)
#858 := [th-lemma arith triangle-eq]: #857
#859 := [unit-resolution #858 #641]: #693
#939 := (not #693)
#1382 := (or #482 #874 #875 #938 #939 #395)
#1383 := [th-lemma arith assign-bounds 1 1 1 1 1]: #1382
#1417 := [unit-resolution #1383 #873 #859]: #1416
#1829 := [unit-resolution #1417 #1664 #1828 #1825]: #395
#680 := (or #396 #678)
#681 := [def-axiom]: #680
#1830 := [unit-resolution #681 #1829]: #678
#802 := (not #678)
#803 := (or #802 #763)
#804 := [th-lemma arith triangle-eq]: #803
#1831 := [unit-resolution #804 #1830]: #763
#766 := (+ #202 #413)
#792 := (<= #766 0::Int)
#945 := (not #763)
#1215 := (or #792 #396 #945)
#1216 := [th-lemma arith assign-bounds 2 -1]: #1215
#1832 := [unit-resolution #1216 #1831 #1829]: #792
#755 := (>= #753 0::Int)
#853 := (or #852 #755)
#854 := [th-lemma arith triangle-eq]: #853
#1833 := [unit-resolution #854 #1827]: #755
#890 := (+ #219 #384)
#974 := (>= #890 0::Int)
#684 := (<= #415 0::Int)
#640 := [not-or-elim #635]: #416
#894 := (or #421 #684)
#915 := [th-lemma arith triangle-eq]: #894
#916 := [unit-resolution #915 #640]: #684
#751 := (>= #759 0::Int)
#1436 := (or #882 #751)
#1437 := [th-lemma arith triangle-eq]: #1436
#1834 := [unit-resolution #1437 #1824]: #751
#893 := (>= #762 0::Int)
#951 := (or #802 #893)
#952 := [th-lemma arith triangle-eq]: #951
#1835 := [unit-resolution #952 #1830]: #893
#692 := (<= #444 0::Int)
#1023 := (or #450 #692)
#1024 := [th-lemma arith triangle-eq]: #1023
#1025 := [unit-resolution #1024 #641]: #692
#1665 := [unit-resolution #707 #1664]: #703
#1668 := [unit-resolution #1667 #1665]: #1610
#1512 := (not #692)
#1029 := (not #751)
#985 := (not #684)
#984 := (not #893)
#1836 := (or #367 #984 #985 #1029 #1512 #1669 #1506 #511 #482)
#1837 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1]: #1836
#1838 := [unit-resolution #1837 #1668 #1025 #1664 #1504 #1681 #1835 #1834 #916]: #367
#674 := (or #366 #671)
#675 := [def-axiom]: #674
#1839 := [unit-resolution #675 #1838]: #671
#1103 := (or #1102 #974)
#1047 := (not #974)
#1150 := [hypothesis]: #1047
#1178 := [hypothesis]: #671
#1104 := [th-lemma arith triangle-eq]: #1103
#1179 := [unit-resolution #1104 #1178 #1150]: false
#1180 := [lemma #1179]: #1103
#1840 := [unit-resolution #1180 #1839]: #974
#741 := (+ f4 #587)
#742 := (<= #741 0::Int)
#726 := (= f4 #576)
#744 := (+ f3 #558)
#745 := (<= #744 0::Int)
#1013 := (not #745)
#1321 := [hypothesis]: #1013
#718 := (= f3 #547)
#746 := (>= #744 0::Int)
#1396 := (or #745 #746)
#1397 := [th-lemma arith farkas 1 1]: #1396
#1398 := [unit-resolution #1397 #1321]: #746
#877 := (not #746)
#1394 := (or #540 #877)
#1221 := (+ #117 #558)
#1222 := (<= #1221 0::Int)
#1243 := (not #1222)
#925 := [hypothesis]: #746
#1257 := [hypothesis]: #541
#1390 := (or #877 #540 #1243)
#1391 := [th-lemma arith assign-bounds 2 1]: #1390
#1392 := [unit-resolution #1391 #1257 #925]: #1243
#719 := (= #117 #547)
#722 := (or #540 #719)
#723 := [def-axiom]: #722
#1258 := [unit-resolution #723 #1257]: #719
#1259 := (not #719)
#1260 := (or #1259 #1222)
#1261 := [th-lemma arith triangle-eq]: #1260
#1393 := [unit-resolution #1261 #1258 #1392]: false
#1395 := [lemma #1393]: #1394
#1399 := [unit-resolution #1395 #1398]: #540
#720 := (or #541 #718)
#721 := [def-axiom]: #720
#1400 := [unit-resolution #721 #1399]: #718
#864 := (not #718)
#1075 := (or #864 #745)
#1076 := [th-lemma arith triangle-eq]: #1075
#1401 := [unit-resolution #1076 #1400 #1321]: false
#1402 := [lemma #1401]: #745
#725 := (>= #560 0::Int)
#645 := [not-or-elim #635]: #561
#1003 := (or #566 #725)
#1004 := [th-lemma arith triangle-eq]: #1003
#1005 := [unit-resolution #1004 #645]: #725
#717 := (>= #531 0::Int)
#644 := [not-or-elim #635]: #532
#998 := (or #537 #717)
#999 := [th-lemma arith triangle-eq]: #998
#1000 := [unit-resolution #999 #644]: #717
#1090 := (not #717)
#1081 := (not #725)
#1841 := (or #569 #1081 #1090 #482 #1550 #1013 #511)
#1842 := [th-lemma arith assign-bounds 1 1 1 1 1 2]: #1841
#1843 := [unit-resolution #1842 #1664 #1000 #1005 #1681 #1402 #1695]: #569
#728 := (or #570 #726)
#729 := [def-axiom]: #728
#1844 := [unit-resolution #729 #1843]: #726
#825 := (not #726)
#826 := (or #825 #742)
#827 := [th-lemma arith triangle-eq]: #826
#1845 := [unit-resolution #827 #1844]: #742
#902 := (not #792)
#816 := (not #755)
#840 := (not #742)
#1846 := (or #1047 #840 #736 #816 #902 #874 #945 #938)
#1176 := (or #1047 #1013 #840 #736 #816 #902 #874 #945 #938)
#1039 := [hypothesis]: #974
#685 := (>= #415 0::Int)
#798 := (or #421 #685)
#799 := [th-lemma arith triangle-eq]: #798
#800 := [unit-resolution #799 #640]: #685
#1169 := [hypothesis]: #792
#700 := (<= #473 0::Int)
#806 := (or #479 #700)
#807 := [th-lemma arith triangle-eq]: #806
#808 := [unit-resolution #807 #642]: #700
#809 := [hypothesis]: #755
#708 := (<= #502 0::Int)
#810 := (or #508 #708)
#811 := [th-lemma arith triangle-eq]: #810
#812 := [unit-resolution #811 #643]: #708
#752 := (>= #750 0::Int)
#1036 := (>= #1034 0::Int)
#1046 := (not #1036)
#676 := (<= #386 0::Int)
#639 := [not-or-elim #635]: #387
#770 := (or #392 #676)
#771 := [th-lemma arith triangle-eq]: #770
#772 := [unit-resolution #771 #639]: #676
#1043 := [hypothesis]: #760
#1037 := [hypothesis]: #763
#1044 := [hypothesis]: #754
#1002 := [hypothesis]: #745
#1162 := [hypothesis]: #742
#929 := (not #736)
#930 := [hypothesis]: #929
#733 := (>= #589 0::Int)
#646 := [not-or-elim #635]: #590
#830 := (or #595 #733)
#831 := [th-lemma arith triangle-eq]: #830
#832 := [unit-resolution #831 #646]: #733
#903 := (not #685)
#841 := (not #733)
#839 := (not #708)
#983 := (not #676)
#1082 := (or #1047 #1046 #874 #938 #939 #875 #983 #1081 #1013 #839 #840 #841 #736 #945 #903)
#1083 := [th-lemma arith assign-bounds 1 -1 -2 2 1 -1 1 -1 -1 -1 1 -1 -1 1]: #1082
#1170 := [unit-resolution #1083 #1039 #859 #873 #812 #1005 #832 #930 #1162 #1002 #1044 #1037 #1043 #800 #772]: #1046
#1053 := (or #1052 #1036)
#1050 := [hypothesis]: #1046
#1051 := [hypothesis]: #703
#1054 := [th-lemma arith triangle-eq]: #1053
#1055 := [unit-resolution #1054 #1051 #1050]: false
#1056 := [lemma #1055]: #1053
#1171 := [unit-resolution #1056 #1170]: #1052
#1172 := [unit-resolution #707 #1171]: #482
#1173 := [unit-resolution #705 #1172]: #702
#1060 := (or #1059 #752)
#815 := (not #752)
#1057 := [hypothesis]: #815
#1058 := [hypothesis]: #702
#1061 := [th-lemma arith triangle-eq]: #1060
#1062 := [unit-resolution #1061 #1058 #1057]: false
#1063 := [lemma #1062]: #1060
#1174 := [unit-resolution #1063 #1173]: #752
#1175 := [th-lemma arith farkas -1 1 -1 -1 1 -1 1 -1 1 -1 -1 1 1 #772 #1005 #1002 #1162 #832 #930 #1174 #812 #809 #808 #1169 #800 #1039]: false
#1177 := [lemma #1175]: #1176
#1847 := [unit-resolution #1177 #1402]: #1846
#1848 := [unit-resolution #1847 #1845 #1840 #1825 #1833 #1832 #1828 #1831]: #736
#735 := (<= #734 0::Int)
#1481 := (>= #741 0::Int)
#1537 := (or #825 #1481)
#1538 := [th-lemma arith triangle-eq]: #1537
#1849 := [unit-resolution #1538 #1844]: #1481
#1608 := (or #395 #540)
#737 := (* -1::Int f13)
#738 := (+ f4 #737)
#739 := (<= #738 0::Int)
#653 := (>= #357 0::Int)
#638 := [not-or-elim #635]: #358
#1471 := (or #363 #653)
#1472 := [th-lemma arith triangle-eq]: #1471
#1473 := [unit-resolution #1472 #638]: #653
#1320 := (>= #1221 0::Int)
#1566 := (or #1259 #1320)
#1567 := [th-lemma arith triangle-eq]: #1566
#1568 := [unit-resolution #1567 #1258]: #1320
#677 := (>= #386 0::Int)
#1006 := (or #392 #677)
#1007 := [th-lemma arith triangle-eq]: #1006
#1008 := [unit-resolution #1007 #639]: #677
#756 := (+ f12 #355)
#1109 := (<= #756 0::Int)
#658 := (= f12 #344)
#895 := [hypothesis]: #396
#740 := (>= #738 0::Int)
#1466 := (or #740 #395 #540)
#1262 := [unit-resolution #1261 #1258]: #1222
#775 := (not #740)
#776 := [hypothesis]: #775
#758 := (>= #756 0::Int)
#1085 := (or #740 #739)
#1086 := [th-lemma arith farkas 1 1]: #1085
#1087 := [unit-resolution #1086 #776]: #739
#1089 := (not #739)
#1440 := (or #366 #540 #1089 #395)
#679 := (= #202 #402)
#682 := (or #395 #679)
#683 := [def-axiom]: #682
#896 := [unit-resolution #683 #895]: #679
#897 := (not #679)
#898 := (or #897 #792)
#899 := [th-lemma arith triangle-eq]: #898
#900 := [unit-resolution #899 #896]: #792
#901 := [hypothesis]: #367
#1405 := (or #424 #395 #902 #366)
#904 := (or #424 #395 #902 #903 #366)
#905 := [th-lemma arith assign-bounds 1 1 1 1]: #904
#1406 := [unit-resolution #905 #800]: #1405
#1407 := [unit-resolution #1406 #901 #900 #895]: #424
#1408 := [unit-resolution #689 #1407]: #686
#1409 := [unit-resolution #884 #1408]: #760
#1410 := (or #395 #425 #938 #453)
#940 := (or #395 #425 #938 #939 #453)
#941 := [th-lemma arith assign-bounds 1 1 1 1]: #940
#1411 := [unit-resolution #941 #859]: #1410
#1412 := [unit-resolution #1411 #1409 #895 #1407]: #453
#1413 := [unit-resolution #697 #1412]: #694
#1414 := [unit-resolution #854 #1413]: #755
#1415 := [unit-resolution #861 #1413]: #754
#1418 := [unit-resolution #1417 #1415 #895 #1409]: #482
#1419 := [unit-resolution #705 #1418]: #702
#1420 := [unit-resolution #1063 #1419]: #752
#1424 := (or #512 #815 #816 #395 #902 #366)
#1421 := (not #700)
#1422 := (or #512 #815 #839 #816 #1421 #395 #902 #903 #366)
#1423 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1]: #1422
#1425 := [unit-resolution #1423 #800 #808 #812]: #1424
#1426 := [unit-resolution #1425 #1420 #900 #901 #1414 #895]: #512
#1427 := [unit-resolution #715 #1426]: #711
#1430 := [unit-resolution #1429 #1427]: #1035
#1357 := [unit-resolution #675 #901]: #671
#1358 := [unit-resolution #1180 #1357]: #974
#1124 := [hypothesis]: #739
#652 := (<= #357 0::Int)
#777 := (or #363 #652)
#778 := [th-lemma arith triangle-eq]: #777
#779 := [unit-resolution #778 #638]: #652
#891 := (<= #890 0::Int)
#1360 := (or #1102 #891)
#1361 := [th-lemma arith triangle-eq]: #1360
#1362 := [unit-resolution #1361 #1357]: #891
#1030 := (not #891)
#1431 := (or #337 #395 #366 #1030)
#1336 := (not #677)
#1363 := (or #337 #395 #366 #1030 #1336)
#1364 := [th-lemma arith assign-bounds 1 1 1 1]: #1363
#1432 := [unit-resolution #1364 #1008]: #1431
#1433 := [unit-resolution #1432 #1362 #895 #901]: #337
#656 := (or #338 #658)
#657 := [def-axiom]: #656
#1434 := [unit-resolution #657 #1433]: #658
#847 := (not #658)
#848 := (or #847 #758)
#849 := [th-lemma arith triangle-eq]: #848
#1435 := [unit-resolution #849 #1434]: #758
#1438 := [unit-resolution #1437 #1408]: #751
#1439 := [th-lemma arith farkas 1 2 3 3 1 1 2 2 2 2 1 1 1 1 1 1 1 1 #1000 #1257 #1414 #808 #1438 #1025 #1420 #812 #900 #800 #1435 #779 #1124 #1262 #1005 #1358 #772 #1430]: false
#1441 := [lemma #1439]: #1440
#1404 := [unit-resolution #1441 #1087 #1257 #895]: #366
#670 := (= f11 #373)
#672 := (or #367 #670)
#673 := [def-axiom]: #672
#1442 := [unit-resolution #673 #1404]: #670
#787 := (not #670)
#1009 := (or #787 #892)
#1010 := [th-lemma arith triangle-eq]: #1009
#1443 := [unit-resolution #1010 #1442]: #892
#1444 := (or #337 #395 #367 #1335)
#1337 := (or #337 #395 #367 #1335 #1336)
#1338 := [th-lemma arith assign-bounds 1 1 1 1]: #1337
#1445 := [unit-resolution #1338 #1008]: #1444
#1446 := [unit-resolution #1445 #1443 #895 #1404]: #337
#1447 := [unit-resolution #657 #1446]: #658
#1448 := [unit-resolution #849 #1447]: #758
#782 := (not #758)
#1253 := (or #424 #1243 #740 #782 #395)
#1110 := (+ #185 #442)
#1111 := (<= #1110 0::Int)
#687 := (= #185 #431)
#690 := (or #424 #687)
#691 := [def-axiom]: #690
#1114 := [unit-resolution #691 #917]: #687
#1115 := (not #687)
#1116 := (or #1115 #1111)
#1117 := [th-lemma arith triangle-eq]: #1116
#1118 := [unit-resolution #1117 #1114]: #1111
#1119 := (not #1111)
#1132 := (or #395 #939 #453 #424 #1119)
#1133 := [th-lemma arith assign-bounds 1 1 1 1]: #1132
#1231 := [unit-resolution #1133 #1118 #859 #895 #917]: #453
#1232 := [unit-resolution #697 #1231]: #694
#1233 := [unit-resolution #861 #1232]: #754
#1234 := (or #482 #874 #875 #424 #1119 #395 #939)
#1235 := [th-lemma arith assign-bounds 1 1 2 1 1 1]: #1234
#1236 := [unit-resolution #1235 #1233 #859 #873 #895 #1118 #917]: #482
#1237 := [unit-resolution #705 #1236]: #702
#1238 := [unit-resolution #1063 #1237]: #752
#716 := (<= #531 0::Int)
#833 := (or #537 #716)
#834 := [th-lemma arith triangle-eq]: #833
#835 := [unit-resolution #834 #644]: #716
#749 := (>= #747 0::Int)
#1239 := [hypothesis]: #1222
#768 := [hypothesis]: #758
#767 := (>= #765 0::Int)
#1240 := [unit-resolution #905 #917 #800 #900 #895]: #366
#1241 := [unit-resolution #673 #1240]: #670
#788 := (or #787 #767)
#781 := (not #767)
#785 := [hypothesis]: #781
#786 := [hypothesis]: #670
#789 := [th-lemma arith triangle-eq]: #788
#790 := [unit-resolution #789 #786 #785]: false
#791 := [lemma #790]: #788
#1242 := [unit-resolution #791 #1241]: #767
#1088 := (not #652)
#838 := (not #716)
#1244 := (or #1125 #838 #1243 #1081 #781 #983 #1088 #1089 #782 #874 #875 #424 #1119 #939)
#1245 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1 1 1 2 1 1]: #1244
#1246 := [unit-resolution #1245 #917 #772 #859 #873 #835 #1005 #1087 #1233 #1242 #768 #779 #1118 #1239]: #1125
#1247 := [unit-resolution #1230 #1246]: #1196
#1248 := [unit-resolution #715 #1247]: #511
#712 := (or #512 #710)
#713 := [def-axiom]: #712
#1249 := [unit-resolution #713 #1248]: #710
#820 := (not #710)
#821 := (or #820 #749)
#822 := [th-lemma arith triangle-eq]: #821
#1250 := [unit-resolution #822 #1249]: #749
#1251 := [unit-resolution #854 #1232]: #755
#1252 := [th-lemma arith farkas -1 -1/2 1/2 1/2 -1/2 -1/2 -1/2 1/2 1/2 -1/2 1/2 -1/2 -1/2 1/2 1 #812 #1239 #1005 #1242 #772 #779 #776 #768 #1251 #808 #1250 #835 #1118 #859 #1238]: false
#1254 := [lemma #1252]: #1253
#1449 := [unit-resolution #1254 #1448 #895 #776 #1262]: #424
#1450 := [unit-resolution #689 #1449]: #686
#1451 := [unit-resolution #884 #1450]: #760
#1452 := [unit-resolution #1411 #1451 #895 #1449]: #453
#1453 := [unit-resolution #697 #1452]: #694
#1454 := [unit-resolution #861 #1453]: #754
#1455 := [unit-resolution #1417 #1454 #895 #1451]: #482
#1456 := [unit-resolution #705 #1455]: #702
#1457 := [unit-resolution #1063 #1456]: #752
#1458 := [unit-resolution #854 #1453]: #755
#1459 := [unit-resolution #791 #1442]: #767
#1226 := (or #1125 #1243 #781 #740 #782 #874 #938)
#774 := [hypothesis]: #767
#1123 := [hypothesis]: #1108
#1225 := [th-lemma arith farkas -1 1 1 -1 -1 1 1 1 -1 1 -1 -1 1 #1123 #835 #1239 #1005 #774 #772 #779 #776 #768 #1044 #873 #859 #1043]: false
#1255 := [lemma #1225]: #1226
#1460 := [unit-resolution #1255 #1454 #1459 #776 #1448 #1451 #1262]: #1125
#1461 := [unit-resolution #1230 #1460]: #1196
#1462 := [unit-resolution #715 #1461]: #511
#1463 := [unit-resolution #713 #1462]: #710
#1464 := [unit-resolution #822 #1463]: #749
#1465 := [th-lemma arith farkas 1/2 -1/2 -1/2 1/2 1/2 1/2 -1/2 -1/2 -1/2 1/2 -1/2 1/2 -1/2 1 -1 1 #1464 #835 #1451 #859 #1459 #1448 #779 #776 #1262 #1005 #772 #1458 #808 #1457 #812 #1449]: false
#1467 := [lemma #1465]: #1466
#1569 := [unit-resolution #1467 #895 #1257]: #740
#1478 := (not #1320)
#1479 := (or #366 #775 #1478 #395)
#724 := (<= #560 0::Int)
#868 := (or #566 #724)
#869 := [th-lemma arith triangle-eq]: #868
#870 := [unit-resolution #869 #645]: #724
#1469 := [hypothesis]: #1320
#1470 := [hypothesis]: #740
#1474 := (or #847 #1109)
#1475 := [th-lemma arith triangle-eq]: #1474
#1476 := [unit-resolution #1475 #1434]: #1109
#1477 := [th-lemma arith farkas 1 1 1 1 1 1 1 1 1 1 1 2 1 1 #1414 #808 #1000 #1438 #1025 #1476 #1473 #1470 #1469 #870 #1008 #901 #1362 #1430]: false
#1480 := [lemma #1477]: #1479
#1570 := [unit-resolution #1480 #1569 #1568 #895]: #366
#1571 := [unit-resolution #673 #1570]: #670
#1572 := [unit-resolution #1010 #1571]: #892
#1573 := [unit-resolution #1445 #1572 #895 #1570]: #337
#1574 := [unit-resolution #657 #1573]: #658
#1575 := [unit-resolution #1475 #1574]: #1109
#1545 := (or #424 #775 #1478 #395)
#1468 := (>= #1110 0::Int)
#1482 := (or #1115 #1468)
#1483 := [th-lemma arith triangle-eq]: #1482
#1484 := [unit-resolution #1483 #1114]: #1468
#1120 := (or #760 #424 #1119)
#1121 := [th-lemma arith assign-bounds 2 1]: #1120
#1485 := [unit-resolution #1121 #1118 #917]: #760
#1486 := (or #395 #453 #424 #1119)
#1487 := [unit-resolution #1133 #859]: #1486
#1488 := [unit-resolution #1487 #1118 #895 #917]: #453
#1489 := [unit-resolution #697 #1488]: #694
#1490 := [unit-resolution #861 #1489]: #754
#1491 := [unit-resolution #1417 #1490 #895 #1485]: #482
#1492 := [unit-resolution #705 #1491]: #702
#1495 := [unit-resolution #1494 #1492]: #1322
#1496 := [unit-resolution #1480 #1470 #1469 #895]: #366
#1497 := [unit-resolution #673 #1496]: #670
#1498 := [unit-resolution #1010 #1497]: #892
#1499 := [unit-resolution #1445 #1498 #895 #1496]: #337
#1500 := [unit-resolution #657 #1499]: #658
#1501 := [unit-resolution #1475 #1500]: #1109
#1507 := (or #511 #874 #875 #1505 #1506 #424)
#1508 := [th-lemma arith assign-bounds 1 1 1 1 1]: #1507
#1509 := [unit-resolution #1508 #917 #1504 #873 #1490 #1495]: #511
#1510 := [unit-resolution #713 #1509]: #710
#1040 := (or #820 #748)
#1041 := [th-lemma arith triangle-eq]: #1040
#1511 := [unit-resolution #1041 #1510]: #748
#1515 := (not #1468)
#876 := (not #724)
#1514 := (not #653)
#1513 := (not #1109)
#1516 := (or #739 #1014 #1090 #1512 #874 #875 #1513 #1514 #1478 #876 #1335 #1336 #1515 #1505 #1506)
#1517 := [th-lemma arith assign-bounds -1 1 -1 -1 1 -1 1 1 -1 -1 1 1 -2 2]: #1516
#1518 := [unit-resolution #1517 #1490 #1025 #873 #1504 #1000 #870 #1473 #1008 #1498 #1511 #1501 #1495 #1469 #1484]: #739
#1519 := (or #66 #1089 #775)
#1520 := [th-lemma arith triangle-eq]: #1519
#1521 := [unit-resolution #1520 #1518 #1470]: #66
#1403 := (>= #766 0::Int)
#1522 := (or #897 #1403)
#1523 := [th-lemma arith triangle-eq]: #1522
#1524 := [unit-resolution #1523 #896]: #1403
#1525 := (or #569 #1513 #1514 #775 #395 #1335 #1336)
#1526 := [th-lemma arith assign-bounds 1 1 1 1 1 1]: #1525
#1527 := [unit-resolution #1526 #895 #1008 #1473 #1470 #1498 #1501]: #569
#1528 := [unit-resolution #729 #1527]: #726
#1529 := [unit-resolution #827 #1528]: #742
#1530 := (not #1403)
#1531 := (or #736 #840 #841 #1513 #1514 #775 #1530 #985 #874 #875 #1505 #1506 #1478 #876 #1335 #1336)
#1532 := [th-lemma arith assign-bounds 1 -1 2 -2 -2 -1 1 1 -1 1 -1 -1 1 1 -1]: #1531
#1533 := [unit-resolution #1532 #1529 #916 #873 #1504 #870 #832 #1473 #1470 #1008 #1490 #1498 #1501 #1495 #1469 #1524]: #736
#732 := (<= #589 0::Int)
#1534 := (or #595 #732)
#1535 := [th-lemma arith triangle-eq]: #1534
#1536 := [unit-resolution #1535 #646]: #732
#1539 := [unit-resolution #1538 #1528]: #1481
#1540 := [th-lemma arith assign-bounds 1 -1 -1 1 -1 1 -3 3 1 -1 -1 1 -2 2 -2 2 #1539 #1536 #900 #800 #1490 #873 #1495 #1504 #1469 #870 #1498 #1008 #1511 #1000 #1025 #1484]: #735
#842 := (not #735)
#1541 := (or #65 #842 #929)
#1542 := [th-lemma arith triangle-eq]: #1541
#1543 := [unit-resolution #1542 #1540 #1533]: #65
#650 := (not #65)
#648 := (or #650 #651)
#636 := (not #67)
#663 := (iff #636 #648)
#649 := (not #648)
#666 := (not #649)
#665 := (iff #666 #648)
#662 := [rewrite]: #665
#667 := (iff #636 #666)
#668 := (iff #67 #649)
#669 := [rewrite]: #668
#664 := [monotonicity #669]: #667
#660 := [trans #664 #662]: #663
#637 := [not-or-elim #635]: #636
#661 := [mp #637 #660]: #648
#1544 := [unit-resolution #661 #1543 #1521]: false
#1546 := [lemma #1544]: #1545
#1576 := [unit-resolution #1546 #1569 #1568 #895]: #424
#1577 := [unit-resolution #689 #1576]: #686
#1578 := [unit-resolution #1437 #1577]: #751
#1579 := [unit-resolution #884 #1577]: #760
#1580 := [unit-resolution #1411 #1579 #895 #1576]: #453
#1581 := [unit-resolution #697 #1580]: #694
#1582 := [unit-resolution #861 #1581]: #754
#1583 := [unit-resolution #1417 #1582 #895 #1579]: #482
#1584 := [unit-resolution #705 #1583]: #702
#1585 := [unit-resolution #1063 #1584]: #752
#1586 := [unit-resolution #854 #1581]: #755
#1587 := [unit-resolution #1526 #895 #1008 #1473 #1569 #1572 #1575]: #569
#1588 := [unit-resolution #729 #1587]: #726
#1589 := [unit-resolution #1538 #1588]: #1481
#1590 := [unit-resolution #827 #1588]: #742
#1591 := [unit-resolution #1494 #1584]: #1322
#1592 := [unit-resolution #1532 #1591 #916 #873 #1504 #870 #832 #1582 #1569 #1590 #1008 #1572 #1575 #1473 #1568 #1524]: #736
#1560 := (not #1481)
#1561 := (or #1550 #929 #775 #1560 #902 #816 #815 #1478 #1335 #1029 #1513)
#1547 := [hypothesis]: #1109
#1026 := [hypothesis]: #751
#1548 := [hypothesis]: #892
#1549 := [hypothesis]: #1035
#1551 := (or #739 #1090 #1513 #1514 #1478 #876 #1335 #1336 #1029 #816 #1421 #1512 #1550)
#1552 := [th-lemma arith assign-bounds 1 -1 1 1 -1 -1 1 1 1 -1 -1 -1]: #1551
#1553 := [unit-resolution #1552 #1549 #1025 #808 #1000 #870 #1473 #809 #1548 #1026 #1008 #1547 #1469]: #739
#1554 := [unit-resolution #1520 #1553 #1470]: #66
#1555 := [hypothesis]: #736
#813 := [hypothesis]: #752
#1556 := [hypothesis]: #1481
#1557 := [th-lemma arith assign-bounds 1 -1 -1 1 3 -3 1 -1 1 -1 -1 1 2 2 -2 -2 #1556 #1536 #1169 #800 #809 #808 #813 #812 #1469 #870 #1548 #1008 #1000 #1026 #1025 #1549]: #735
#1558 := [unit-resolution #1542 #1557 #1555]: #65
#1559 := [unit-resolution #661 #1558 #1554]: false
#1562 := [lemma #1559]: #1561
#1593 := [unit-resolution #1562 #1592 #1569 #1589 #900 #1586 #1585 #1568 #1572 #1578 #1575]: #1550
#1594 := [unit-resolution #1565 #1593]: #1196
#1595 := [unit-resolution #715 #1594]: #511
#1596 := [unit-resolution #713 #1595]: #710
#1597 := [unit-resolution #1041 #1596]: #748
#1598 := (or #1468 #816 #1421 #512 #815 #839 #1029)
#1599 := [th-lemma arith assign-bounds -2 2 -2 -2 2 -1]: #1598
#1600 := [unit-resolution #1599 #1595 #812 #1585 #1586 #1578 #808]: #1468
#1601 := [unit-resolution #1517 #1600 #1025 #873 #1504 #1000 #870 #1591 #1582 #1572 #1597 #1575 #1008 #1568 #1473]: #739
#1602 := [unit-resolution #1520 #1601 #1569]: #66
#1603 := [unit-resolution #661 #1602]: #650
#1604 := [unit-resolution #1542 #1603 #1592]: #842
#1605 := [unit-resolution #791 #1571]: #767
#1606 := [unit-resolution #849 #1574]: #758
#1607 := [th-lemma arith farkas -1 1 1/2 -1/2 -1/2 1/2 -1/2 1/2 -1/2 1/2 -1/2 -1/2 1/2 -1/2 1/2 1 #1606 #779 #1262 #1005 #1605 #772 #1589 #1536 #1604 #900 #800 #1586 #808 #1585 #812 #1601]: false
#1609 := [lemma #1607]: #1608
#1626 := [unit-resolution #1609 #1257]: #395
#1716 := (or #511 #540)
#1692 := (or #453 #540)
#1678 := (or #482 #540 #453)
#1670 := (or #1014 #1090 #540 #482 #453 #1669 #1506)
#1671 := [th-lemma arith assign-bounds 1 1 2 1 1 1]: #1670
#1672 := [unit-resolution #1671 #1664 #1504 #1000 #1257 #918 #1668]: #1014
#1675 := [unit-resolution #1674 #1664 #1504 #918 #1668]: #511
#1676 := [unit-resolution #713 #1675]: #710
#1677 := [unit-resolution #1041 #1676 #1672]: false
#1679 := [lemma #1677]: #1678
#1685 := [unit-resolution #1679 #918 #1257]: #482
#1686 := [unit-resolution #705 #1685]: #702
#1687 := [unit-resolution #1494 #1686]: #1322
#1688 := [unit-resolution #1684 #1685 #918]: #511
#1689 := [unit-resolution #713 #1688]: #710
#1690 := [unit-resolution #1041 #1689]: #748
#1691 := [th-lemma arith farkas 1 1 1 1 1 1 #918 #1504 #1690 #1000 #1257 #1687]: false
#1693 := [lemma #1691]: #1692
#1705 := [unit-resolution #1693 #1257]: #453
#1706 := [unit-resolution #697 #1705]: #694
#1707 := [unit-resolution #861 #1706]: #754
#1703 := (or #482 #540)
#1697 := (or #511 #540 #482)
#1696 := [th-lemma arith farkas 1 1 1 1 1 #1681 #1000 #1257 #1664 #1695]: false
#1698 := [lemma #1696]: #1697
#1699 := [unit-resolution #1698 #1664 #1257]: #511
#1700 := [unit-resolution #713 #1699]: #710
#1701 := [unit-resolution #1041 #1700]: #748
#1702 := [th-lemma arith farkas 1 1 1 1 1 #1000 #1257 #1664 #1699 #1701]: false
#1704 := [lemma #1702]: #1703
#1708 := [unit-resolution #1704 #1257]: #482
#1709 := [unit-resolution #705 #1708]: #702
#1710 := [unit-resolution #1494 #1709]: #1322
#1711 := [unit-resolution #1508 #1681 #1504 #873 #1710 #1707]: #424
#1712 := [unit-resolution #689 #1711]: #686
#1713 := [unit-resolution #1437 #1712]: #751
#1714 := [unit-resolution #854 #1706]: #755
#1715 := [th-lemma arith farkas 1 1 1 1 1 1 1 1 1 #1714 #1713 #1025 #808 #1695 #1681 #1000 #1257 #1626]: false
#1717 := [lemma #1715]: #1716
#1753 := [unit-resolution #1717 #1257]: #511
#1764 := [unit-resolution #713 #1753]: #710
#1765 := [unit-resolution #1041 #1764]: #748
#1782 := (or #1029 #816 #1512 #396 #1421 #1014 #512 #1090 #540)
#1783 := [th-lemma arith assign-bounds 1 -1 1 -1 -1 1 1 -1]: #1782
#1784 := [unit-resolution #1783 #1753 #808 #1025 #1000 #1257 #1714 #1765 #1626]: #1029
#1780 := (or #424 #540)
#1751 := [unit-resolution #1063 #1709]: #752
#1627 := [unit-resolution #681 #1626]: #678
#1628 := [unit-resolution #804 #1627]: #763
#1661 := (or #424 #740 #540)
#1643 := (or #453 #1089 #540 #424)
#923 := [unit-resolution #922 #919]: #761
#1611 := (or #754 #453 #986)
#1612 := [th-lemma arith assign-bounds 2 1]: #1611
#1613 := [unit-resolution #1612 #923 #918]: #754
#1618 := [unit-resolution #1617 #923 #917 #918]: #482
#1619 := [unit-resolution #705 #1618]: #702
#1620 := [unit-resolution #1494 #1619]: #1322
#1621 := (or #1515 #874 #875 #511 #1505 #1506 #938)
#1622 := [th-lemma arith assign-bounds 2 2 2 2 2 1]: #1621
#1623 := [unit-resolution #1622 #1620 #1484 #1613 #1485 #1504 #873]: #511
#1624 := [unit-resolution #713 #1623]: #710
#1625 := [unit-resolution #1041 #1624]: #748
#1631 := (or #424 #945 #396 #366)
#1629 := (or #424 #945 #903 #396 #366)
#1630 := [th-lemma arith assign-bounds 1 1 1 1]: #1629
#1632 := [unit-resolution #1630 #800]: #1631
#1633 := [unit-resolution #1632 #917 #1628 #1626]: #366
#1634 := [unit-resolution #673 #1633]: #670
#1635 := [unit-resolution #791 #1634]: #767
#1636 := [unit-resolution #1010 #1634]: #892
#1637 := (or #337 #1335 #1336 #424 #945 #903)
#1638 := [th-lemma arith assign-bounds 1 1 1 1 1]: #1637
#1639 := [unit-resolution #1638 #917 #800 #1008 #1636 #1628]: #337
#1640 := [unit-resolution #657 #1639]: #658
#1641 := [unit-resolution #849 #1640]: #758
#764 := (>= #757 0::Int)
#995 := (or #920 #764)
#996 := [th-lemma arith triangle-eq]: #995
#997 := [unit-resolution #996 #919]: #764
#1642 := [th-lemma arith farkas 1 1 1 1 1 1 1 1 1 1 1 1 2 1 #1000 #808 #997 #1262 #1005 #1641 #779 #1124 #1635 #772 #859 #1118 #1257 #1625]: false
#1644 := [lemma #1642]: #1643
#1645 := [unit-resolution #1644 #917 #1257 #1087]: #453
#1646 := [unit-resolution #697 #1645]: #694
#1647 := [unit-resolution #861 #1646]: #754
#1650 := [unit-resolution #1649 #1645 #873 #917 #1647]: #482
#1651 := [unit-resolution #705 #1650]: #702
#1652 := [unit-resolution #1063 #1651]: #752
#783 := (or #781 #740 #396 #570 #782)
#769 := [hypothesis]: #569
#773 := [hypothesis]: #395
#780 := [th-lemma arith farkas -1 -1 1 1 -1 1 1 #779 #776 #774 #773 #772 #769 #768]: false
#784 := [lemma #780]: #783
#1653 := [unit-resolution #784 #1641 #1626 #1635 #776]: #570
#1654 := (or #569 #1243 #1081 #511 #540)
#1655 := [th-lemma arith assign-bounds 1 1 1 1]: #1654
#1656 := [unit-resolution #1655 #1653 #1005 #1257 #1262]: #511
#1657 := [unit-resolution #713 #1656]: #710
#1658 := [unit-resolution #822 #1657]: #749
#1659 := [unit-resolution #854 #1646]: #755
#1660 := [th-lemma arith farkas 1/2 -1/2 -1 -1/2 1/2 1/2 -1/2 -1/2 1/2 -1/2 1/2 -1/2 1/2 -1/2 1 #1659 #808 #812 #1262 #1005 #1641 #779 #776 #1635 #772 #859 #1118 #1658 #835 #1652]: false
#1662 := [lemma #1660]: #1661
#1752 := [unit-resolution #1662 #917 #1257]: #740
#1754 := (or #366 #945 #903 #512 #816 #396 #1421 #815 #839)
#1755 := [th-lemma arith assign-bounds 1 -1 -1 -1 -1 1 -1 1]: #1754
#1756 := [unit-resolution #1755 #1626 #800 #808 #812 #1753 #1751 #1714 #1628]: #366
#1757 := [unit-resolution #673 #1756]: #670
#1758 := [unit-resolution #1010 #1757]: #892
#1759 := (or #337 #1335 #1336 #945 #903 #512 #816 #1421 #815 #839)
#1760 := [th-lemma arith assign-bounds 1 -1 1 -1 -1 -1 1 -1 1]: #1759
#1761 := [unit-resolution #1760 #1753 #800 #808 #812 #1008 #1751 #1714 #1758 #1628]: #337
#1762 := [unit-resolution #657 #1761]: #658
#1763 := [unit-resolution #1475 #1762]: #1109
#1766 := [unit-resolution #1517 #1484 #1025 #873 #1504 #1000 #870 #1710 #1707 #1758 #1765 #1763 #1008 #1568 #1473]: #739
#1767 := [unit-resolution #1520 #1766 #1752]: #66
#1768 := [unit-resolution #661 #1767]: #650
#1769 := [unit-resolution #952 #1627]: #893
#1770 := [unit-resolution #849 #1762]: #758
#1771 := [unit-resolution #791 #1757]: #767
#1737 := (or #736 #1505 #775 #874 #1335 #1513 #1478 #1089 #781 #782 #984)
#1720 := [hypothesis]: #1322
#727 := (= #99 #576)
#1326 := (not #727)
#743 := (+ #99 #587)
#1223 := (<= #743 0::Int)
#1330 := (not #1223)
#1721 := [hypothesis]: #893
#1723 := (or #1330 #781 #984 #1478 #874 #1505 #736)
#1719 := [hypothesis]: #1223
#1722 := [th-lemma arith farkas -1 -1 1 -1 1 -1 1 1 -1 1 -1 1 1 #832 #774 #772 #1721 #916 #1469 #870 #1044 #873 #1720 #1504 #1719 #930]: false
#1724 := [lemma #1722]: #1723
#1718 := [unit-resolution #1724 #930 #1721 #1469 #1044 #1720 #774]: #1330
#1327 := (or #1326 #1223)
#1725 := [hypothesis]: #1330
#1726 := [hypothesis]: #727
#1328 := [th-lemma arith triangle-eq]: #1327
#1727 := [unit-resolution #1328 #1726 #1725]: false
#1728 := [lemma #1727]: #1327
#1729 := [unit-resolution #1728 #1718]: #1326
#730 := (or #569 #727)
#731 := [def-axiom]: #730
#1730 := [unit-resolution #731 #1729]: #569
#1731 := [unit-resolution #729 #1730]: #726
#1732 := [unit-resolution #827 #1731]: #742
#1733 := (or #1403 #984 #782 #1088 #1089 #781 #983 #570)
#1734 := [th-lemma arith assign-bounds -1 -2 2 2 -2 2 -2]: #1733
#1735 := [unit-resolution #1734 #1730 #772 #1124 #774 #768 #1721 #779]: #1403
#1736 := [unit-resolution #1532 #1735 #1732 #916 #873 #1504 #870 #832 #1720 #1470 #930 #1044 #1548 #1547 #1008 #1469 #1473]: false
#1738 := [lemma #1736]: #1737
#1772 := [unit-resolution #1738 #1752 #1710 #1707 #1758 #1763 #1568 #1766 #1771 #1770 #1769]: #736
#1773 := [unit-resolution #1542 #1772 #1768]: #842
#1739 := (>= #743 0::Int)
#1743 := (not #1739)
#1744 := (or #1743 #735 #1335 #945 #1243 #816 #815)
#1740 := [hypothesis]: #1739
#1741 := [hypothesis]: #842
#1742 := [th-lemma arith farkas -1 1 -1 1 -1 1 -1 1 1 -1 1 -1 1 #1536 #1741 #1548 #1008 #1037 #800 #1239 #1005 #809 #808 #813 #812 #1740]: false
#1745 := [lemma #1742]: #1744
#1774 := [unit-resolution #1745 #1773 #1758 #1628 #1262 #1714 #1751]: #1743
#1747 := (or #1326 #1739)
#1746 := [hypothesis]: #1743
#1748 := [th-lemma arith triangle-eq]: #1747
#1749 := [unit-resolution #1748 #1726 #1746]: false
#1750 := [lemma #1749]: #1747
#1775 := [unit-resolution #1750 #1774]: #1326
#1776 := [unit-resolution #731 #1775]: #569
#1777 := [unit-resolution #729 #1776]: #726
#1778 := [unit-resolution #1538 #1777]: #1481
#1779 := [th-lemma arith farkas 1 -1 -1 1/2 -1/2 1/2 -1/2 1/2 -1/2 1/2 -1/2 1/2 1/2 -1/2 1/2 -1/2 1 #1770 #779 #1766 #1771 #772 #1778 #1536 #1773 #1628 #800 #1262 #1005 #1714 #808 #1751 #812 #1626]: false
#1781 := [lemma #1779]: #1780
#1785 := [unit-resolution #1781 #1257]: #424
#1786 := [unit-resolution #689 #1785]: #686
#1787 := [unit-resolution #1437 #1786 #1784]: false
#1788 := [lemma #1787]: #540
#1850 := [unit-resolution #721 #1788]: #718
#865 := (or #864 #746)
#866 := [th-lemma arith triangle-eq]: #865
#1851 := [unit-resolution #866 #1850]: #746
#1852 := [unit-resolution #1361 #1839]: #891
#1853 := (not #732)
#1854 := (or #735 #1030 #1560 #1853 #1336 #876 #816 #1421 #877 #1029 #1512 #1669 #1506 #984 #985)
#1855 := [th-lemma arith assign-bounds -1 1 -1 1 -1 1 -1 1 2 -2 -1 1 1 -1]: #1854
#1856 := [unit-resolution #1855 #1852 #1025 #808 #1504 #870 #1536 #1008 #1851 #1833 #916 #1835 #1834 #1849 #1668]: #735
#1857 := [unit-resolution #1542 #1856 #1848]: #65
#1858 := [unit-resolution #661 #1857]: #651
#1859 := [unit-resolution #1056 #1665]: #1036
#1860 := (or #337 #511 #1030 #1336 #816 #1421 #1029 #1512 #1669 #1506 #984 #985)
#1861 := [th-lemma arith assign-bounds 1 1 1 1 1 2 2 1 1 1 1]: #1860
#1862 := [unit-resolution #1861 #1852 #916 #1025 #808 #1504 #1681 #1833 #1008 #1835 #1834 #1668]: #337
#1863 := [unit-resolution #657 #1862]: #658
#1864 := [unit-resolution #849 #1863]: #758
#1865 := [th-lemma arith assign-bounds -1 1 -1 1 -2 2 2 -2 3 -3 -1 1 -1 1 -1 1 #1864 #779 #1000 #1695 #1859 #812 #1831 #800 #1825 #859 #1840 #772 #1005 #1828 #873 #1402]: #740
#1866 := [unit-resolution #1475 #1863]: #1109
#1867 := [th-lemma arith assign-bounds -1 1 -1 1 -2 2 2 -2 3 -3 -1 1 -1 1 -1 1 #1866 #1473 #835 #1808 #1668 #1504 #1835 #916 #1834 #1025 #1852 #1008 #870 #1833 #808 #1851]: #739
#1868 := [unit-resolution #1520 #1867 #1865 #1858]: false
#1870 := [lemma #1868]: #1869
#1933 := [unit-resolution #1870 #1681]: #482
#1941 := (or #367 #511)
#1934 := [unit-resolution #705 #1933]: #702
#1935 := [unit-resolution #1494 #1934]: #1322
#1936 := [hypothesis]: #366
#1931 := (or #395 #1550 #816 #1029 #938 #874 #1125 #483)
#1911 := (or #366 #1125 #938 #874 #816 #1029 #483 #395 #1550)
#1873 := (or #483 #816 #1029 #337 #366 #1030)
#1871 := (or #483 #816 #1029 #1512 #1421 #337 #1336 #366 #1030)
#1872 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1]: #1871
#1874 := [unit-resolution #1872 #1008 #1025 #808]: #1873
#1875 := [unit-resolution #1874 #1362 #1026 #809 #909 #901]: #337
#1876 := [unit-resolution #657 #1875]: #658
#1895 := [unit-resolution #1475 #1876]: #1109
#1893 := (or #740 #395 #1125 #874 #938 #1550 #1029 #816 #483)
#1882 := (or #1222 #1013 #541)
#1883 := [th-lemma arith assign-bounds 1 -2]: #1882
#1884 := [unit-resolution #1883 #1402 #1788]: #1222
#1880 := (or #366 #740 #1550 #1029 #816 #902 #483)
#1877 := [unit-resolution #849 #1876]: #758
#1878 := [unit-resolution #1063 #1663]: #752
#1879 := [th-lemma arith farkas -1 -1 1 -1 2 1 -1 1 -1 1 3 -3 -1 2 -2 -2 1 #779 #776 #1000 #1549 #800 #1026 #1025 #1358 #772 #1005 #809 #808 #1402 #1878 #812 #1169 #1877]: false
#1881 := [lemma #1879]: #1880
#1885 := [unit-resolution #1881 #776 #1549 #1026 #809 #900 #909]: #366
#1886 := [unit-resolution #673 #1885]: #670
#1887 := [unit-resolution #791 #1886]: #767
#1888 := [unit-resolution #1255 #1887 #1123 #1044 #776 #1043 #1884]: #782
#1889 := [unit-resolution #1010 #1886]: #892
#1890 := [unit-resolution #1445 #1889 #895 #1885]: #337
#1891 := [unit-resolution #657 #1890]: #658
#1892 := [unit-resolution #849 #1891 #1888]: false
#1894 := [lemma #1892]: #1893
#1896 := [unit-resolution #1894 #895 #1123 #1044 #1043 #1549 #1026 #809 #909]: #740
#1184 := (or #763 #395 #902)
#1185 := [th-lemma arith assign-bounds 2 1]: #1184
#1186 := [unit-resolution #1185 #900 #895]: #763
#1897 := (or #569 #1081 #1090 #1550 #1013 #1029 #816 #1421 #1512 #395 #366 #903 #815 #839 #902)
#1898 := [th-lemma arith assign-bounds 1 1 1 1 1 3 3 1 1 2 2 2 2 2]: #1897
#1899 := [unit-resolution #1898 #901 #800 #1025 #808 #812 #1000 #1005 #895 #1878 #809 #900 #1402 #1026 #1549]: #569
#1900 := [unit-resolution #729 #1899]: #726
#1901 := [unit-resolution #827 #1900]: #742
#1902 := [unit-resolution #1847 #1901 #1358 #1043 #809 #900 #1044 #1186]: #736
#1903 := [unit-resolution #1538 #1900]: #1481
#1904 := (or #735 #1030 #1560 #1853 #1336 #876 #877 #985 #1505 #874 #875 #1506 #1530)
#1905 := [th-lemma arith assign-bounds -1 1 -1 1 -1 1 -1 -1 -1 1 1 1]: #1904
#1906 := [unit-resolution #1905 #1362 #873 #1504 #870 #1536 #1008 #1851 #1044 #916 #1680 #1524 #1903]: #735
#1907 := [unit-resolution #1542 #1906 #1902]: #65
#1908 := [unit-resolution #661 #1907]: #651
#1909 := [unit-resolution #1520 #1908 #1896]: #1089
#1910 := [th-lemma arith farkas -1 -1 1 -1 2 1 -1 1 -1 1 3 -3 -1 2 -2 -2 1 #1473 #1909 #835 #1123 #916 #1043 #859 #1362 #1008 #870 #1044 #873 #1851 #1680 #1504 #1524 #1895]: false
#1912 := [lemma #1910]: #1911
#1913 := [unit-resolution #1912 #895 #1043 #1044 #809 #1026 #909 #1123 #1549]: #366
#1914 := [unit-resolution #673 #1913]: #670
#1915 := [unit-resolution #1010 #1914]: #892
#1916 := [unit-resolution #1445 #1915 #895 #1913]: #337
#1917 := [unit-resolution #657 #1916]: #658
#1918 := [unit-resolution #1475 #1917]: #1109
#1919 := (or #1320 #877 #838 #1125 #938 #874 #875 #939 #367 #985 #1505 #1506 #1530)
#1920 := [th-lemma arith assign-bounds -1 2 -2 2 4 -4 -2 -2 2 2 -2 -2]: #1919
#1921 := [unit-resolution #1920 #1913 #859 #873 #1504 #835 #1851 #1044 #1043 #1123 #1680 #916 #1524]: #1320
#1922 := (or #1530 #945 #1513 #1514 #775 #1335 #1336 #569)
#1923 := [th-lemma arith assign-bounds 1 2 2 2 2 2 2]: #1922
#1924 := [unit-resolution #1923 #1918 #1524 #1896 #1915 #1186 #1008 #1473]: #569
#1925 := [unit-resolution #729 #1924]: #726
#1926 := [unit-resolution #1538 #1925]: #1481
#1927 := [th-lemma arith assign-bounds 1 -1 -1 1 -1 2 1 -1 -1 1 3 -3 -1 2 -2 -2 #1918 #1473 #1896 #835 #1123 #916 #1043 #859 #1008 #870 #1044 #873 #1851 #1680 #1504 #1524]: #974
#1928 := [unit-resolution #827 #1925]: #742
#1929 := [unit-resolution #1847 #1928 #1927 #1043 #809 #900 #1044 #1186]: #736
#1930 := [unit-resolution #1562 #1929 #1926 #1549 #1896 #900 #1921 #809 #1878 #1915 #1026 #1918]: false
#1932 := [lemma #1930]: #1931
#1937 := [unit-resolution #1932 #1695 #1833 #1834 #1825 #1828 #1808 #1933]: #395
#1938 := [unit-resolution #681 #1937]: #678
#1939 := [unit-resolution #952 #1938]: #893
#1940 := [th-lemma arith farkas 1 -1 1 1 -1 -1 1 -1 1 #1834 #1025 #1939 #1936 #916 #1935 #1504 #1681 #1933]: false
#1942 := [lemma #1940]: #1941
#1943 := [unit-resolution #1942 #1681]: #367
#1944 := [unit-resolution #675 #1943]: #671
#1945 := [unit-resolution #1361 #1944]: #891
#1946 := [unit-resolution #804 #1938]: #763
#1947 := [unit-resolution #1216 #1946 #1937]: #792
#1948 := [unit-resolution #1881 #1943 #1695 #1834 #1833 #1947 #1933]: #740
#1949 := (or #569 #1081 #1090 #1550 #1013 #1029 #816 #1421 #1512 #396 #511)
#1950 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1 1 2]: #1949
#1951 := [unit-resolution #1950 #1681 #808 #1025 #1000 #1005 #1937 #1833 #1402 #1834 #1695]: #569
#1952 := [unit-resolution #729 #1951]: #726
#1953 := [unit-resolution #827 #1952]: #742
#1954 := [unit-resolution #1180 #1944]: #974
#1955 := [unit-resolution #1847 #1954 #1953 #1825 #1833 #1947 #1828 #1946]: #736
#1956 := (or #1610 #1505 #483)
#1957 := [th-lemma arith assign-bounds 1 -2]: #1956
#1958 := [unit-resolution #1957 #1935 #1933]: #1610
#1959 := [unit-resolution #1538 #1952]: #1481
#1960 := [unit-resolution #1855 #1945 #1025 #808 #1504 #870 #1536 #1008 #1851 #1833 #916 #1939 #1834 #1959 #1958]: #735
#1961 := [unit-resolution #1542 #1960 #1955]: #65
#1962 := [unit-resolution #661 #1961]: #651
#1963 := [unit-resolution #1520 #1962 #1948]: #1089
#1964 := [unit-resolution #1874 #1945 #1834 #1833 #1933 #1943]: #337
#1965 := [unit-resolution #657 #1964]: #658
#1966 := [unit-resolution #1475 #1965]: #1109
#1967 := [th-lemma arith farkas 3/4 -3/4 1/2 -1/2 -1/2 1/2 -1/4 1/4 1/4 -1/4 1/4 -1/4 1/4 -1/4 1/4 -1/4 1/4 1 #1834 #1025 #1939 #916 #1935 #1504 #1966 #1473 #1963 #835 #1808 #1945 #1008 #870 #1833 #808 #1851 #1933]: false
#1968 := [lemma #1967]: #511
#1969 := [unit-resolution #713 #1968]: #710
#1970 := [unit-resolution #1041 #1969]: #748
#1971 := [hypothesis]: #570
#1972 := [th-lemma arith farkas 1 1 1 1 1 1 #1971 #1005 #1000 #1402 #1664 #1970]: false
#1974 := [lemma #1972]: #1973
#1993 := [unit-resolution #1974 #1664]: #569
#2002 := (or #395 #570)
#1996 := [unit-resolution #822 #1969]: #749
#837 := (not #749)
#972 := (or #395 #877 #837 #570)
#924 := [hypothesis]: #749
#965 := (or #424 #570 #877 #837)
#927 := (or #424 #877 #837 #453 #570)
#926 := [th-lemma arith farkas 1 1 1 1 1 1 1 1 1 #870 #925 #924 #835 #923 #873 #918 #917 #769]: false
#928 := [lemma #926]: #927
#961 := [unit-resolution #928 #917 #924 #925 #769]: #453
#878 := (or #424 #874 #875 #876 #877 #837 #838 #570 #454)
#879 := [th-lemma arith assign-bounds 1 -1 1 -1 -1 1 -1 -1]: #878
#962 := [unit-resolution #879 #917 #873 #835 #870 #769 #925 #924 #961]: #874
#963 := [unit-resolution #697 #961]: #694
#964 := [unit-resolution #861 #963 #962]: false
#966 := [lemma #964]: #965
#959 := [unit-resolution #966 #924 #925 #769]: #424
#960 := [unit-resolution #689 #959]: #686
#967 := [unit-resolution #884 #960]: #760
#968 := [unit-resolution #941 #895 #859 #967 #959]: #453
#969 := [unit-resolution #697 #968]: #694
#970 := [unit-resolution #861 #969]: #754
#971 := [th-lemma arith farkas -1 -1 1 1 1 -1 -1 -1 1 1 #970 #870 #925 #873 #924 #835 #895 #967 #859 #769]: false
#973 := [lemma #971]: #972
#2003 := [unit-resolution #973 #1851 #1996]: #2002
#2004 := [unit-resolution #2003 #1993]: #395
#2005 := [unit-resolution #681 #2004]: #678
#2008 := [unit-resolution #804 #2005]: #763
#1997 := (or #424 #570)
#1998 := [unit-resolution #966 #1851 #1996]: #1997
#1999 := [unit-resolution #1998 #1993]: #424
#2000 := [unit-resolution #689 #1999]: #686
#2016 := [unit-resolution #884 #2000]: #760
#1994 := [unit-resolution #729 #1993]: #726
#2055 := [unit-resolution #827 #1994]: #742
#2076 := (or #453 #482)
#2049 := (or #366 #938 #453 #945)
#946 := (or #366 #938 #939 #453 #945 #903)
#947 := [th-lemma arith assign-bounds 1 1 1 1 1]: #946
#2050 := [unit-resolution #947 #859 #800]: #2049
#2051 := [unit-resolution #2050 #918 #2008 #2016]: #366
#2052 := [unit-resolution #673 #2051]: #670
#2053 := [unit-resolution #791 #2052]: #767
#2006 := [unit-resolution #952 #2005]: #893
#2001 := [unit-resolution #1437 #2000]: #751
#2031 := (or #740 #482)
#659 := (= #236 #344)
#1995 := [unit-resolution #1538 #1994]: #1481
#1318 := (or #570 #736 #740)
#1219 := (or #541 #736 #740 #570)
#793 := [hypothesis]: #540
#863 := [unit-resolution #721 #793]: #718
#1077 := [unit-resolution #1076 #863]: #745
#824 := [unit-resolution #729 #769]: #726
#828 := [unit-resolution #827 #824]: #742
#931 := (or #736 #735)
#932 := [th-lemma arith farkas 1 1]: #931
#933 := [unit-resolution #932 #930]: #735
#1106 := (or #512 #570 #740 #736 #541)
#794 := [hypothesis]: #511
#957 := (or #815 #736 #570 #541 #512 #740)
#867 := [unit-resolution #866 #863]: #746
#819 := [unit-resolution #713 #794]: #710
#823 := [unit-resolution #822 #819]: #749
#887 := (or #454 #815 #541 #512 #740 #570 #842)
#829 := [hypothesis]: #735
#836 := [hypothesis]: #453
#843 := (or #337 #837 #838 #570 #815 #454 #839 #840 #841 #842)
#844 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1 1]: #843
#845 := [unit-resolution #844 #836 #812 #835 #769 #832 #829 #828 #823 #813]: #337
#846 := [unit-resolution #657 #845]: #658
#850 := [unit-resolution #849 #846]: #758
#851 := [unit-resolution #697 #836]: #694
#855 := [unit-resolution #854 #851]: #755
#817 := (or #396 #815 #816 #512 #740 #570 #782)
#795 := [unit-resolution #784 #773 #776 #769 #768]: #781
#796 := [unit-resolution #791 #795]: #787
#797 := [unit-resolution #673 #796]: #367
#801 := [unit-resolution #681 #773]: #678
#805 := [unit-resolution #804 #801]: #763
#814 := [th-lemma arith farkas 1 -1 1 -1 -1 1 -1 1 1 #813 #812 #809 #808 #805 #800 #797 #773 #794]: false
#818 := [lemma #814]: #817
#856 := [unit-resolution #818 #855 #813 #794 #776 #769 #850]: #396
#862 := [unit-resolution #861 #851]: #754
#880 := [unit-resolution #879 #836 #873 #835 #870 #769 #867 #823 #862]: #424
#881 := [unit-resolution #689 #880]: #686
#885 := [unit-resolution #884 #881]: #760
#886 := [th-lemma arith farkas 1 -1 1 -1 1 -1 1 -1 1 #823 #835 #813 #812 #880 #885 #859 #856 #793]: false
#888 := [lemma #886]: #887
#934 := [unit-resolution #888 #813 #793 #794 #776 #769 #933]: #454
#935 := [unit-resolution #928 #934 #823 #867 #769]: #424
#936 := [unit-resolution #689 #935]: #686
#937 := [unit-resolution #884 #936]: #760
#942 := [unit-resolution #941 #935 #859 #934 #937]: #395
#943 := [unit-resolution #681 #942]: #678
#944 := [unit-resolution #804 #943]: #763
#948 := [unit-resolution #947 #934 #859 #800 #937 #944]: #366
#949 := [unit-resolution #673 #948]: #670
#950 := [unit-resolution #791 #949]: #767
#953 := [unit-resolution #952 #943]: #893
#954 := [unit-resolution #699 #934]: #695
#955 := [unit-resolution #922 #954]: #761
#956 := [th-lemma arith farkas -1/2 1/2 1 -1 -1/2 1/2 1/2 -1/2 -1/2 1/2 -1/2 1/2 1/2 -1/2 -1/2 1 #870 #867 #823 #835 #955 #873 #813 #812 #828 #832 #930 #953 #950 #772 #916 #769]: false
#958 := [lemma #956]: #957
#1064 := [unit-resolution #958 #794 #769 #793 #930 #776]: #815
#1065 := [unit-resolution #1063 #1064]: #1059
#1066 := [unit-resolution #705 #1065]: #483
#1067 := [unit-resolution #707 #1066]: #703
#1068 := [unit-resolution #1056 #1067]: #1036
#1069 := [unit-resolution #973 #823 #867 #769]: #395
#1070 := [unit-resolution #681 #1069]: #678
#1071 := [unit-resolution #804 #1070]: #763
#1072 := [unit-resolution #966 #823 #867 #769]: #424
#1073 := [unit-resolution #689 #1072]: #686
#1074 := [unit-resolution #884 #1073]: #760
#1042 := [unit-resolution #1041 #819]: #748
#1015 := (or #453 #1013 #1014 #740 #570 #877 #837)
#889 := (+ #236 #355)
#975 := (>= #889 0::Int)
#976 := [unit-resolution #973 #924 #925 #769]: #395
#977 := [unit-resolution #681 #976]: #678
#978 := [unit-resolution #952 #977]: #893
#979 := [unit-resolution #804 #977]: #763
#980 := [unit-resolution #947 #918 #859 #979 #967 #800]: #366
#981 := [unit-resolution #673 #980]: #670
#982 := [unit-resolution #791 #981]: #767
#987 := (or #338 #781 #983 #984 #985 #570 #876 #877 #875 #837 #838 #453 #986)
#988 := [th-lemma arith assign-bounds 1 -1 1 -1 1 -1 1 1 1 -1 -1 -1]: #987
#989 := [unit-resolution #988 #918 #916 #772 #873 #835 #870 #769 #925 #924 #982 #923 #978]: #338
#654 := (or #337 #659)
#655 := [def-axiom]: #654
#990 := [unit-resolution #655 #989]: #659
#991 := (not #659)
#992 := (or #991 #975)
#993 := [th-lemma arith triangle-eq]: #992
#994 := [unit-resolution #993 #990]: #975
#1001 := [hypothesis]: #748
#1011 := [unit-resolution #1010 #981]: #892
#1012 := [th-lemma arith farkas -1 1 -2 2 1 -1 -1 -1 1 1 -1 -1 -1 1 1 #1011 #1008 #979 #800 #1005 #1002 #808 #1001 #1000 #997 #779 #776 #967 #859 #994]: false
#1016 := [lemma #1012]: #1015
#1078 := [unit-resolution #1016 #1042 #1077 #776 #769 #867 #823]: #453
#1079 := [unit-resolution #697 #1078]: #694
#1080 := [unit-resolution #861 #1079]: #754
#1084 := [unit-resolution #1083 #1080 #859 #873 #812 #1005 #832 #930 #828 #1077 #800 #1074 #1071 #1068 #772]: #1047
#1028 := (not #975)
#1091 := (or #1028 #1088 #1089 #938 #939 #1081 #1013 #1014 #1090 #1046 #839 #840 #841 #736 #945 #903)
#1092 := [th-lemma arith assign-bounds 1 1 -1 1 2 -2 -1 1 1 -1 -1 1 -1 -1 1]: #1091
#1093 := [unit-resolution #1092 #1042 #859 #812 #1000 #1005 #832 #930 #1087 #828 #1077 #800 #1074 #1071 #779 #1068]: #1028
#1018 := [hypothesis]: #1028
#1019 := [hypothesis]: #659
#1020 := [unit-resolution #993 #1019 #1018]: false
#1033 := [lemma #1020]: #992
#1094 := [unit-resolution #1033 #1093]: #991
#1095 := [unit-resolution #655 #1094]: #337
#1096 := [unit-resolution #657 #1095]: #658
#1097 := [unit-resolution #849 #1096]: #758
#1098 := [unit-resolution #784 #1097 #1069 #769 #776]: #781
#1099 := [unit-resolution #791 #1098]: #787
#1100 := [unit-resolution #673 #1099]: #367
#1101 := [unit-resolution #675 #1100]: #671
#1105 := [unit-resolution #1104 #1101 #1084]: false
#1107 := [lemma #1105]: #1106
#1149 := [unit-resolution #1107 #793 #776 #930 #769]: #512
#1190 := (or #337 #511 #1081 #1013 #840 #841 #842)
#1191 := [th-lemma arith assign-bounds 1 1 1 1 1 1]: #1190
#1192 := [unit-resolution #1191 #1149 #1005 #832 #933 #828 #1077]: #337
#1193 := [unit-resolution #657 #1192]: #658
#1194 := [unit-resolution #849 #1193]: #758
#1195 := [unit-resolution #715 #1149]: #711
#1199 := [unit-resolution #1198 #1195]: #1108
#1147 := (or #453 #782 #570 #740 #541 #1125)
#1137 := (or #424 #453 #541 #1089 #782 #1125)
#1122 := [unit-resolution #1121 #917 #1118]: #760
#1126 := (or #781 #983 #1081 #1013 #939 #782 #1088 #1089 #838 #1125 #986 #875 #424 #541 #453 #1119)
#1127 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1 1 1 1 2 2 2 1]: #1126
#1128 := [unit-resolution #1127 #917 #772 #859 #918 #873 #835 #793 #1005 #1124 #1077 #779 #768 #923 #1123 #1118]: #781
#1129 := [unit-resolution #791 #1128]: #787
#1130 := [unit-resolution #673 #1129]: #367
#1131 := [unit-resolution #947 #1130 #859 #918 #1122 #800]: #945
#1134 := [unit-resolution #1133 #917 #859 #918 #1118]: #395
#1135 := [unit-resolution #681 #1134]: #678
#1136 := [unit-resolution #804 #1135 #1131]: false
#1138 := [lemma #1136]: #1137
#1112 := [unit-resolution #1138 #918 #793 #1087 #768 #1123]: #424
#1113 := [unit-resolution #689 #1112]: #686
#1139 := [unit-resolution #884 #1113]: #760
#1140 := [unit-resolution #941 #1139 #859 #918 #1112]: #395
#1141 := [unit-resolution #784 #1140 #768 #769 #776]: #781
#1142 := [unit-resolution #791 #1141]: #787
#1143 := [unit-resolution #673 #1142]: #367
#1144 := [unit-resolution #947 #1143 #859 #918 #1139 #800]: #945
#1145 := [unit-resolution #681 #1140]: #678
#1146 := [unit-resolution #804 #1145 #1144]: false
#1148 := [lemma #1146]: #1147
#1200 := [unit-resolution #1148 #1194 #769 #776 #793 #1199]: #453
#1201 := [unit-resolution #697 #1200]: #694
#1202 := [unit-resolution #861 #1201]: #754
#1167 := (or #424 #840 #842 #874 #1125 #541 #1089 #782)
#1157 := (or #395 #424 #541 #1089 #874 #782 #1125)
#1151 := [unit-resolution #905 #900 #800 #917 #895]: #366
#1152 := (or #781 #983 #1081 #1013 #782 #1088 #1089 #541 #874 #838 #1125 #875 #424 #1119 #939)
#1153 := [th-lemma arith assign-bounds 1 1 1 1 1 1 2 1 1 1 1 2 1 1]: #1152
#1154 := [unit-resolution #1153 #917 #772 #859 #873 #835 #793 #1005 #1124 #1077 #1044 #779 #768 #1123 #1118]: #781
#1155 := [unit-resolution #791 #1154]: #787
#1156 := [unit-resolution #673 #1155 #1151]: false
#1158 := [lemma #1156]: #1157
#1159 := [unit-resolution #1158 #917 #793 #1124 #1044 #768 #1123]: #395
#1160 := [unit-resolution #681 #1159]: #678
#1161 := [unit-resolution #804 #1160]: #763
#1163 := [unit-resolution #673 #1155]: #367
#1164 := [unit-resolution #675 #1163]: #671
#1165 := [unit-resolution #1104 #1164]: #974
#1166 := [th-lemma arith farkas 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #800 #1159 #917 #1165 #772 #1005 #1077 #1162 #832 #829 #1044 #835 #1123 #873 #1118 #859 #793 #1161]: false
#1168 := [lemma #1166]: #1167
#1203 := [unit-resolution #1168 #1202 #933 #828 #1199 #793 #1087 #1194]: #424
#1204 := [unit-resolution #689 #1203]: #686
#1205 := [unit-resolution #884 #1204]: #760
#1182 := (or #781 #874 #1125 #541 #782 #740 #938)
#1181 := [th-lemma arith farkas 1 1 -1 -1 -1 -2 -1 1 1 -1 1 -1 1 1 #1044 #835 #1123 #873 #859 #793 #768 #779 #776 #774 #772 #1005 #1077 #1043]: false
#1183 := [lemma #1181]: #1182
#1206 := [unit-resolution #1183 #1202 #1199 #793 #1194 #776 #1205]: #781
#1207 := [unit-resolution #791 #1206]: #787
#1208 := [unit-resolution #673 #1207]: #367
#1209 := [unit-resolution #675 #1208]: #671
#1210 := [unit-resolution #1180 #1209]: #974
#1211 := [unit-resolution #854 #1201]: #755
#1188 := (or #395 #840 #736 #816 #1013 #874 #1047 #938)
#1187 := [unit-resolution #1177 #1186 #900 #1162 #930 #809 #1002 #1044 #1039 #1043]: false
#1189 := [lemma #1187]: #1188
#1212 := [unit-resolution #1189 #1211 #930 #828 #1077 #1202 #1210 #1205]: #395
#1213 := [unit-resolution #681 #1212]: #678
#1214 := [unit-resolution #804 #1213]: #763
#1217 := [unit-resolution #1216 #1214 #1212]: #792
#1218 := [unit-resolution #1177 #1217 #1214 #828 #930 #1211 #1077 #1202 #1210 #1205]: false
#1220 := [lemma #1218]: #1219
#1224 := [unit-resolution #1220 #769 #776 #930]: #541
#1256 := [unit-resolution #723 #1224]: #719
#1292 := [unit-resolution #1261 #1256]: #1222
#1270 := (or #745 #540 #1243)
#1271 := [th-lemma arith assign-bounds 2 1]: #1270
#1293 := [unit-resolution #1271 #1224 #1292]: #745
#1294 := (or #337 #840 #841 #842 #570 #540)
#1295 := [th-lemma arith assign-bounds 1 1 1 1 1]: #1294
#1296 := [unit-resolution #1295 #1224 #769 #832 #933 #828]: #337
#1297 := [unit-resolution #657 #1296]: #658
#1298 := [unit-resolution #849 #1297]: #758
#1290 := (or #395 #740 #782 #540 #736 #840)
#1263 := [unit-resolution #1254 #895 #776 #768 #1262]: #424
#1264 := [unit-resolution #689 #1263]: #686
#1265 := [unit-resolution #884 #1264]: #760
#1266 := [unit-resolution #941 #1265 #859 #895 #1263]: #453
#1267 := [unit-resolution #697 #1266]: #694
#1268 := [unit-resolution #861 #1267]: #754
#1269 := [unit-resolution #854 #1267]: #755
#1272 := [unit-resolution #1271 #1257 #1262]: #745
#1273 := [unit-resolution #1189 #1268 #930 #895 #1272 #1265 #1269 #1162]: #1047
#1274 := [unit-resolution #1180 #1273]: #1102
#1275 := [unit-resolution #675 #1274]: #366
#1276 := [unit-resolution #673 #1275]: #670
#1277 := [unit-resolution #791 #1276]: #767
#1278 := [unit-resolution #1255 #1277 #1262 #776 #768 #1268 #1265]: #1125
#1279 := [unit-resolution #1230 #1278]: #1196
#1280 := [unit-resolution #715 #1279]: #511
#1281 := [unit-resolution #713 #1280]: #710
#1282 := [unit-resolution #1041 #1281]: #748
#1283 := (or #482 #540 #1090 #1014 #938 #1243 #1081 #781 #983 #1088 #1089 #782 #874 #875 #939)
#1284 := [th-lemma arith assign-bounds 1 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2 1/2]: #1283
#1285 := [unit-resolution #1284 #1268 #859 #873 #779 #1000 #1257 #1005 #1087 #772 #1277 #768 #1265 #1282 #1262]: #482
#1286 := [unit-resolution #705 #1285]: #702
#1287 := [unit-resolution #1063 #1286]: #752
#1288 := [unit-resolution #822 #1281]: #749
#1289 := [th-lemma arith farkas -1 1/2 -1/2 1 -1/2 -1/2 -1/2 1/2 1/2 -1/2 -1/2 -1/2 1/2 1/2 1/2 1 #812 #1269 #808 #1263 #1265 #835 #1262 #1005 #1277 #772 #779 #776 #768 #859 #1288 #1287]: false
#1291 := [lemma #1289]: #1290
#1299 := [unit-resolution #1291 #1298 #776 #1224 #930 #828]: #395
#1300 := [unit-resolution #681 #1299]: #678
#1301 := [unit-resolution #804 #1300]: #763
#1302 := [unit-resolution #784 #1299 #1298 #769 #776]: #781
#1303 := [unit-resolution #791 #1302]: #787
#1304 := [unit-resolution #673 #1303]: #367
#1305 := [unit-resolution #675 #1304]: #671
#1306 := [unit-resolution #1180 #1305]: #974
#1307 := (or #424 #945 #903 #396 #1047 #983 #570 #840 #841 #842 #540)
#1308 := [th-lemma arith assign-bounds 1 1 2 1 1 1 1 1 1 1]: #1307
#1309 := [unit-resolution #1308 #1299 #800 #772 #1224 #769 #832 #933 #828 #1301 #1306]: #424
#1310 := [unit-resolution #689 #1309]: #686
#1311 := [unit-resolution #884 #1310]: #760
#1312 := [unit-resolution #1216 #1301 #1299]: #792
#1313 := [unit-resolution #947 #1311 #859 #1304 #1301 #800]: #453
#1314 := [unit-resolution #697 #1313]: #694
#1315 := [unit-resolution #861 #1314]: #754
#1316 := [unit-resolution #854 #1314]: #755
#1317 := [unit-resolution #1177 #1316 #1315 #828 #930 #1306 #1312 #1311 #1301 #1293]: false
#1319 := [lemma #1317]: #1318
#2007 := [unit-resolution #1319 #776 #1993]: #736
#2011 := (or #453 #740 #570)
#2009 := (or #453 #1014 #740 #570 #877 #837)
#2010 := [unit-resolution #1016 #1402]: #2009
#2012 := [unit-resolution #2010 #1851 #1970 #1996]: #2011
#2013 := [unit-resolution #2012 #776 #1993]: #453
#2014 := [unit-resolution #697 #2013]: #694
#2015 := [unit-resolution #861 #2014]: #754
#2017 := [unit-resolution #854 #2014]: #755
#1991 := (or #1102 #1029 #740 #816 #1046 #938 #874 #945)
#1038 := [hypothesis]: #1036
#1975 := [unit-resolution #1180 #1178]: #974
#1978 := (or #1046 #782 #740 #874 #938 #1047 #945)
#1976 := (or #1046 #782 #740 #874 #938 #1047 #945 #512)
#1048 := (or #1046 #1013 #782 #740 #874 #938 #1047 #945 #512)
#1045 := [th-lemma arith farkas 1/2 -1/2 1/2 -1/2 -1/2 -1/2 -3/2 3/2 1/2 -1/2 1/2 -1/2 1/2 1 -1 -1 1 1 #1005 #1002 #768 #779 #776 #1044 #1043 #859 #873 #1042 #1000 #772 #1039 #1038 #812 #1037 #800 #794]: false
#1049 := [lemma #1045]: #1048
#1977 := [unit-resolution #1049 #1402]: #1976
#1979 := [unit-resolution #1977 #1968]: #1978
#1980 := [unit-resolution #1979 #1975 #1038 #776 #1043 #1044 #1037]: #782
#1981 := [unit-resolution #1361 #1178]: #891
#1984 := (or #1028 #740 #816 #1029 #1030)
#1982 := (or #1028 #740 #816 #1029 #1014 #1030)
#1031 := (or #1028 #740 #816 #1029 #1013 #1014 #1030)
#1021 := [hypothesis]: #975
#1022 := [hypothesis]: #891
#1027 := [th-lemma arith farkas -1 -1 1 1 -1 1 -1 -1 -1 1 1 -1 1 #779 #776 #809 #1026 #1025 #1005 #1002 #808 #1001 #1000 #1008 #1022 #1021]: false
#1032 := [lemma #1027]: #1031
#1983 := [unit-resolution #1032 #1402]: #1982
#1985 := [unit-resolution #1983 #1970]: #1984
#1986 := [unit-resolution #1985 #1981 #1026 #776 #809]: #1028
#1987 := [unit-resolution #1033 #1986]: #991
#1988 := [unit-resolution #655 #1987]: #337
#1989 := [unit-resolution #657 #1988]: #658
#1990 := [unit-resolution #849 #1989 #1980]: false
#1992 := [lemma #1990]: #1991
#2018 := [unit-resolution #1992 #776 #2001 #2017 #1859 #2016 #2015 #2008]: #1102
#2019 := [unit-resolution #675 #2018]: #366
#2020 := (or #338 #876 #877 #1560 #1853 #929 #1669 #1029 #1512 #984 #985 #1506 #482 #367)
#2021 := [th-lemma arith assign-bounds -1 1 1 -1 1 -1 1 -1 1 -1 1 -1 1]: #2020
#2022 := [unit-resolution #2021 #2019 #916 #1025 #1664 #1504 #870 #1536 #2007 #1851 #2006 #2001 #1995 #1668]: #338
#2023 := [unit-resolution #655 #2022]: #659
#2024 := [unit-resolution #673 #2019]: #670
#2025 := [unit-resolution #1010 #2024]: #892
#2026 := (or #891 #367 #1335)
#2027 := [th-lemma arith assign-bounds 2 -1]: #2026
#2028 := [unit-resolution #2027 #2025 #2019]: #891
#2029 := [unit-resolution #1985 #2028 #2001 #776 #2017]: #1028
#2030 := [unit-resolution #1033 #2029 #2023]: false
#2032 := [lemma #2030]: #2031
#2054 := [unit-resolution #2032 #1664]: #740
#2056 := (or #736 #1081 #1013 #840 #841 #1046 #839 #986 #875 #781 #983 #984 #985)
#2057 := [th-lemma arith assign-bounds -1 1 1 -1 -1 1 1 -1 -1 1 -1 1]: #2056
#2058 := [unit-resolution #2057 #2053 #873 #812 #1005 #832 #772 #2055 #916 #923 #2006 #1402 #1859]: #736
#2059 := [unit-resolution #1010 #2052]: #892
#912 := (not #764)
#2060 := (or #735 #876 #877 #1560 #1853 #1669 #1506 #912 #1421 #1335 #1336 #945 #903)
#2061 := [th-lemma arith assign-bounds -1 1 1 -1 -1 1 1 -1 -1 1 -1 1]: #2060
#2062 := [unit-resolution #2061 #997 #808 #1504 #870 #1536 #1008 #1851 #800 #2059 #2008 #1995 #1668]: #735
#2063 := [unit-resolution #1542 #2062 #2058]: #65
#2064 := [unit-resolution #661 #2063]: #651
#2065 := [unit-resolution #1520 #2064 #2054]: #1089
#2048 := (<= #889 0::Int)
#2068 := (or #338 #781 #984 #482 #453 #986)
#2066 := (or #338 #781 #983 #984 #985 #482 #453 #986 #875)
#2067 := [th-lemma arith assign-bounds 1 1 1 1 1 1 1 1]: #2066
#2069 := [unit-resolution #2067 #916 #873 #772]: #2068
#2070 := [unit-resolution #2069 #923 #1664 #918 #2053 #2006]: #338
#2071 := [unit-resolution #655 #2070]: #659
#2072 := (or #991 #2048)
#2073 := [th-lemma arith triangle-eq]: #2072
#2074 := [unit-resolution #2073 #2071]: #2048
#2075 := [th-lemma arith farkas -1 -1 1 -1 1 1 1 -1 2 -2 -1 1 1 -1 1 #870 #835 #1851 #2074 #1473 #2065 #2001 #1025 #2006 #916 #923 #873 #2053 #772 #1996]: false
#2077 := [lemma #2075]: #2076
#2105 := [unit-resolution #2077 #1664]: #453
#2106 := [unit-resolution #697 #2105]: #694
#2107 := [unit-resolution #854 #2106]: #755
#2103 := (or #1102 #1029 #1560 #1669 #984 #775 #816 #1046 #840 #938 #945)
#2082 := (not #2048)
#2079 := [hypothesis]: #1610
#2033 := [hypothesis]: #874
#2037 := (or #755 #754)
#2038 := [th-lemma arith farkas 1 1]: #2037
#2039 := [unit-resolution #2038 #2033]: #755
#2034 := [hypothesis]: #694
#2035 := [unit-resolution #861 #2034 #2033]: false
#2036 := [lemma #2035]: #860
#2040 := [unit-resolution #2036 #2033]: #852
#2041 := [unit-resolution #697 #2040]: #454
#2042 := (or #816 #453 #986)
#2043 := [th-lemma arith assign-bounds 2 1]: #2042
#2044 := [unit-resolution #2043 #2041 #2039]: #986
#2045 := [unit-resolution #699 #2041]: #695
#2046 := [unit-resolution #922 #2045 #2044]: false
#2047 := [lemma #2046]: #754
#2088 := (or #1047 #1046 #874 #938 #840 #736 #945)
#2089 := [unit-resolution #1083 #859 #873 #812 #1005 #832 #1402 #800 #772]: #2088
#2090 := [unit-resolution #2089 #1975 #2047 #1038 #1162 #1043 #1037]: #736
#2091 := (or #735 #1030 #1560 #816 #1029 #1669 #984)
#2092 := [unit-resolution #1855 #1025 #808 #1504 #870 #1536 #1008 #1851 #916]: #2091
#2093 := [unit-resolution #2092 #1981 #809 #1721 #1026 #1556 #2079]: #735
#2094 := [unit-resolution #1542 #2093 #2090]: #65
#2095 := [unit-resolution #661 #2094]: #651
#2096 := [unit-resolution #1520 #2095 #1470]: #1089
#2083 := (or #2082 #739 #1029 #1560 #929 #1669 #984)
#2078 := [hypothesis]: #2048
#2080 := [hypothesis]: #1089
#2081 := [th-lemma arith farkas -1 2 1 -2 -1 -1 -1 1 -1 1 -1 1 -1 -1 1 1 #1996 #870 #835 #1851 #1473 #2080 #1026 #1025 #1556 #1536 #1555 #2079 #1504 #1721 #916 #2078]: false
#2084 := [lemma #2081]: #2083
#2097 := [unit-resolution #2084 #2096 #1026 #1556 #2090 #2079 #1721]: #2082
#2085 := [hypothesis]: #2082
#2086 := [unit-resolution #2073 #1019 #2085]: false
#2087 := [lemma #2086]: #2072
#2098 := [unit-resolution #2087 #2097]: #991
#2099 := [unit-resolution #655 #2098]: #337
#2100 := [unit-resolution #657 #2099]: #658
#2101 := [unit-resolution #1475 #2100]: #1109
#2102 := [th-lemma arith farkas -1 1 -1 1 -1 -1 -1 1 -1 1 -1 -1 1 -2 2 -2 1 #1026 #1025 #1996 #835 #1473 #2096 #1556 #1536 #2090 #2079 #1504 #1721 #916 #2099 #870 #1851 #2101]: false
#2104 := [lemma #2102]: #2103
#2108 := [unit-resolution #2104 #2001 #1995 #1668 #2006 #2054 #2107 #1859 #2055 #2016 #2008]: #1102
#2109 := [unit-resolution #675 #2108]: #366
#2110 := (or #761 #874 #454)
#2111 := [th-lemma arith assign-bounds 1 -2]: #2110
#2112 := [unit-resolution #2111 #2105 #2047]: #761
#2113 := [unit-resolution #673 #2109]: #670
#2114 := [unit-resolution #791 #2113]: #767
#2115 := [unit-resolution #2057 #2114 #873 #812 #1005 #832 #772 #2055 #916 #2112 #2006 #1402 #1859]: #736
#2116 := (or #1125 #876 #877 #838 #482 #570 #1669 #1029 #1512 #984 #985 #1506 #367)
#2117 := [th-lemma arith assign-bounds -1 1 -1 -1 1 -2 2 -2 2 -2 2 2]: #2116
#2118 := [unit-resolution #2117 #2109 #1025 #1664 #1504 #835 #870 #1993 #1851 #2006 #2001 #916 #1668]: #1125
#2119 := (or #1108 #837 #338 #876 #877 #1560 #1853 #929)
#2120 := [th-lemma arith assign-bounds -1 -2 2 -2 -2 2 -2]: #2119
#2121 := [unit-resolution #2120 #2115 #1536 #870 #1851 #1996 #2118 #1995]: #338
#2122 := [unit-resolution #655 #2121]: #659
#2123 := [unit-resolution #2087 #2122]: #2048
#2124 := [unit-resolution #2084 #2123 #2001 #1995 #2115 #1668 #2006]: #739
#2125 := [unit-resolution #1520 #2124 #2054]: #66
#2126 := [unit-resolution #661 #2125]: #650
#2127 := [unit-resolution #1542 #2126 #2115]: #842
#2128 := [unit-resolution #2092 #2127 #2107 #2006 #2001 #1995 #1668]: #1030
#2129 := [unit-resolution #2027 #2128 #2109]: #1335
#2130 := [unit-resolution #1010 #2113 #2129]: false
#2131 := [lemma #2130]: #482
#2164 := [unit-resolution #705 #2131]: #702
#2220 := [unit-resolution #1494 #2164]: #1322
#2312 := [unit-resolution #1957 #2220 #2131]: #1610
#2132 := [hypothesis]: #1029
#2133 := [hypothesis]: #686
#2134 := [unit-resolution #1437 #2133 #2132]: false
#2135 := [lemma #2134]: #1436
#2200 := [unit-resolution #2135 #2132]: #882
#2201 := [unit-resolution #689 #2200]: #425
#2202 := [unit-resolution #691 #2201]: #687
#2203 := [unit-resolution #1483 #2202]: #1468
#2167 := (or #395 #424)
#2165 := [unit-resolution #1063 #2164]: #752
#2166 := [th-lemma arith farkas 1 1 1 1 1 1 1 1 1 #1996 #835 #2165 #812 #895 #1118 #859 #917 #1788]: false
#2168 := [lemma #2166]: #2167
#2204 := [unit-resolution #2168 #2201]: #395
#2143 := (or #396 #424 #337)
#2136 := [hypothesis]: #338
#2137 := (or #337 #1335 #424 #945)
#2138 := [unit-resolution #1638 #800 #1008]: #2137
#2139 := [unit-resolution #2138 #805 #917 #2136]: #1335
#2140 := [unit-resolution #1632 #805 #917 #773]: #366
#2141 := [unit-resolution #673 #2140]: #670
#2142 := [unit-resolution #1010 #2141 #2139]: false
#2144 := [lemma #2142]: #2143
#2205 := [unit-resolution #2144 #2204 #2201]: #337
#2206 := [unit-resolution #657 #2205]: #658
#2207 := [unit-resolution #1475 #2206]: #1109
#2208 := [unit-resolution #681 #2204]: #678
#2209 := [unit-resolution #804 #2208]: #763
#2210 := [unit-resolution #1632 #2209 #2201 #2204]: #366
#2211 := [unit-resolution #673 #2210]: #670
#2212 := [unit-resolution #1010 #2211]: #892
#2213 := (or #751 #760)
#2214 := [th-lemma arith farkas 1 1]: #2213
#2215 := [unit-resolution #2214 #2132]: #760
#2191 := (or #740 #938 #424)
#2169 := [unit-resolution #2168 #917]: #395
#2170 := [unit-resolution #681 #2169]: #678
#2171 := [unit-resolution #804 #2170]: #763
#2172 := [unit-resolution #1632 #2171 #917 #2169]: #366
#2173 := [unit-resolution #673 #2172]: #670
#2174 := [unit-resolution #1010 #2173]: #892
#2175 := [unit-resolution #1998 #917]: #570
#2176 := [unit-resolution #731 #2175]: #727
#2177 := [unit-resolution #1750 #2176]: #1739
#2162 := (or #453 #740 #938 #424)
#2148 := [unit-resolution #1487 #918 #1118 #917]: #395
#2149 := [unit-resolution #681 #2148]: #678
#2150 := [unit-resolution #804 #2149]: #763
#2153 := (or #912 #938 #945 #366 #874)
#2151 := (or #912 #938 #939 #945 #903 #366 #874)
#2152 := [th-lemma arith assign-bounds 2 2 2 2 2 1]: #2151
#2154 := [unit-resolution #2152 #859 #800]: #2153
#2155 := [unit-resolution #2154 #997 #2047 #2150 #1043]: #366
#2156 := [unit-resolution #673 #2155]: #670
#2157 := [unit-resolution #791 #2156]: #767
#2158 := [unit-resolution #2144 #2148 #917]: #337
#2159 := [unit-resolution #657 #2158]: #658
#2160 := [unit-resolution #849 #2159]: #758
#2161 := [th-lemma arith farkas -1 1 -1 1 -1 1 -1 -1 1 -1 1 -1 1 #772 #2160 #1118 #859 #1970 #1000 #779 #776 #997 #808 #1005 #1402 #2157]: false
#2163 := [lemma #2161]: #2162
#2178 := [unit-resolution #2163 #776 #1043 #917]: #453
#2179 := [unit-resolution #697 #2178]: #694
#2145 := [hypothesis]: #816
#2146 := [unit-resolution #854 #2034 #2145]: false
#2147 := [lemma #2146]: #853
#2180 := [unit-resolution #2147 #2179]: #755
#2181 := (or #1743 #735 #1335 #945 #816 #815)
#2182 := [unit-resolution #1745 #1884]: #2181
#2183 := [unit-resolution #2182 #2180 #2177 #2171 #2174 #2165]: #735
#2184 := [unit-resolution #2144 #2169 #917]: #337
#2185 := [unit-resolution #657 #2184]: #658
#2186 := [unit-resolution #849 #2185]: #758
#2187 := [unit-resolution #952 #2170]: #893
#2188 := [unit-resolution #791 #2173]: #767
#2189 := [unit-resolution #1728 #2176]: #1223
#2190 := [th-lemma arith farkas -1 1 -1 -1 1 1 1 -1 -2 2 -1 1 -1 1 1 1 #1996 #835 #2165 #832 #812 #2189 #1118 #859 #2188 #772 #2187 #916 #2186 #779 #776 #2183]: false
#2192 := [lemma #2190]: #2191
#2216 := [unit-resolution #2192 #2215 #2201]: #740
#2217 := [unit-resolution #1998 #2201]: #570
#2218 := [unit-resolution #731 #2217]: #727
#2219 := [unit-resolution #1750 #2218]: #1739
#2221 := (or #735 #1014 #1090 #1505 #1853 #1506 #1743 #1515 #1512 #1335 #1336 #945 #903 #1513 #1514 #775)
#2222 := [th-lemma arith assign-bounds -1 1 -1 -1 1 1 1 -1 -2 2 -1 1 -1 1 1]: #2221
#2223 := [unit-resolution #2222 #2216 #800 #1025 #1504 #1000 #1536 #1473 #1008 #2212 #2209 #1970 #2207 #2220 #2203 #2219]: #735
#2224 := [unit-resolution #849 #2206]: #758
#2225 := [unit-resolution #952 #2208]: #893
#2226 := [unit-resolution #791 #2211]: #767
#2227 := [unit-resolution #1117 #2202]: #1111
#2228 := [unit-resolution #1728 #2218]: #1223
#2198 := (or #1089 #1330 #1119 #781 #984 #782 #842 #775)
#2193 := [unit-resolution #1520 #1124 #1470]: #66
#2194 := [unit-resolution #661 #2193]: #650
#2195 := [unit-resolution #1542 #2194 #829]: #929
#2196 := [hypothesis]: #1111
#2197 := [th-lemma arith farkas -1 1 -1 -1 1 1 1 -1 -2 2 -1 1 -1 1 1 1 #1996 #835 #2165 #832 #812 #1719 #2196 #859 #774 #772 #1721 #916 #768 #779 #1124 #2195]: false
#2199 := [lemma #2197]: #2198
#2229 := [unit-resolution #2199 #2228 #2227 #2226 #2225 #2224 #2223 #2216]: #1089
#2230 := (or #739 #986 #875 #1515 #1512 #1513 #837 #838 #1514 #876 #877 #1335 #1336)
#2231 := [th-lemma arith assign-bounds 1 -1 -1 1 1 -1 1 -1 1 -1 1 -1]: #2230
#2232 := [unit-resolution #2231 #2229 #1025 #873 #835 #870 #1473 #1851 #1996 #1008 #2212 #2207 #2203]: #986
#2233 := (or #739 #874 #1513 #1478 #1335 #1515 #1505)
#2234 := [unit-resolution #1517 #1025 #873 #1504 #1000 #870 #1970 #1008 #1473]: #2233
#2235 := [unit-resolution #2234 #2229 #2220 #2203 #2212 #2207 #2047]: #1478
#2236 := (or #1320 #877 #837 #838 #815 #839 #454)
#2237 := [th-lemma arith assign-bounds -1 -2 2 -2 2 -2]: #2236
#2238 := [unit-resolution #2237 #2235 #835 #1851 #1996 #2165 #812]: #454
#2239 := [unit-resolution #699 #2238]: #695
#2240 := [unit-resolution #922 #2239 #2232]: false
#2241 := [lemma #2240]: #751
#2278 := (or #1029 #424 #1119)
#2279 := [th-lemma arith assign-bounds 2 1]: #2278
#2280 := [unit-resolution #2279 #917 #2241]: #1119
#2281 := [unit-resolution #1117 #1114 #2280]: false
#2282 := [lemma #2281]: #424
#2249 := (or #395 #425)
#2245 := [hypothesis]: #424
#2246 := [unit-resolution #689 #2245]: #686
#2247 := [unit-resolution #884 #2246]: #760
#2248 := [th-lemma arith farkas 1 -1 1 -1 -1 1 -1 1 1 #1996 #835 #2165 #812 #2247 #2245 #895 #859 #1788]: false
#2250 := [lemma #2248]: #2249
#2285 := [unit-resolution #2250 #2282]: #395
#2286 := [unit-resolution #681 #2285]: #678
#2341 := [unit-resolution #952 #2286]: #893
#2283 := [unit-resolution #689 #2282]: #686
#2284 := [unit-resolution #884 #2283]: #760
#2287 := [unit-resolution #804 #2286]: #763
#2288 := [unit-resolution #2050 #918 #2287 #2284]: #366
#2289 := [unit-resolution #673 #2288]: #670
#2339 := [unit-resolution #1010 #2289]: #892
#2321 := (or #735 #912 #1335)
#910 := [hypothesis]: #764
#2313 := [unit-resolution #2061 #1741 #808 #1504 #870 #1536 #1008 #1851 #800 #910 #2287 #1548 #2312]: #1560
#2314 := (or #1743 #1014 #1090 #1505 #1853 #735 #1506 #912 #1421 #1081 #1013 #1335 #1336 #945 #903)
#2315 := [th-lemma arith assign-bounds -2 2 -1 -1 1 1 1 -1 1 -1 -1 1 -1 1]: #2314
#2316 := [unit-resolution #2315 #1741 #808 #1504 #1000 #1005 #1536 #800 #910 #1548 #2287 #1402 #1970 #2220 #1008]: #1743
#2317 := [unit-resolution #1750 #2316]: #1326
#2318 := [unit-resolution #731 #2317]: #569
#2319 := [unit-resolution #729 #2318]: #726
#2320 := [unit-resolution #1538 #2319 #2313]: false
#2322 := [lemma #2320]: #2321
#2340 := [unit-resolution #2322 #997 #2339]: #735
#2290 := [unit-resolution #791 #2289]: #767
#2323 := [unit-resolution #1728 #1725]: #1326
#2324 := [unit-resolution #731 #2323]: #569
#2325 := (or #1223 #840 #570)
#2326 := [th-lemma arith assign-bounds -1 2]: #2325
#2327 := [unit-resolution #2326 #2324 #1725]: #840
#2328 := [unit-resolution #729 #2324]: #726
#2329 := [unit-resolution #827 #2328 #2327]: false
#2330 := [lemma #2329]: #1223
#2342 := (or #1330 #837 #838 #815 #841 #736 #839 #986 #875 #876 #877 #781 #983 #984 #985)
#2343 := [th-lemma arith assign-bounds -2 2 -1 -1 1 1 1 -1 1 -1 -1 1 -1 1]: #2342
#2344 := [unit-resolution #2343 #923 #873 #812 #835 #870 #832 #916 #1851 #1996 #2165 #2330 #2290 #2341 #772]: #736
#2345 := [unit-resolution #1542 #2344 #2340]: #65
#2295 := (or #453 #740)
#2276 := (or #337 #740)
#2243 := (or #424 #337)
#2242 := [unit-resolution #2144 #2169 #917 #2136]: false
#2244 := [lemma #2242]: #2243
#2257 := [unit-resolution #2244 #2136]: #424
#2258 := [unit-resolution #2250 #2257]: #395
#2259 := [unit-resolution #681 #2258]: #678
#2260 := [unit-resolution #804 #2259]: #763
#2261 := [unit-resolution #689 #2257]: #686
#2262 := [unit-resolution #884 #2261]: #760
#2263 := [unit-resolution #655 #2136]: #659
#2264 := [unit-resolution #1033 #2263]: #975
#2255 := (or #453 #1028 #938 #945 #740)
#2251 := [unit-resolution #2050 #918 #1037 #1043]: #366
#2252 := [unit-resolution #673 #2251]: #670
#2253 := [unit-resolution #1010 #2252]: #892
#2254 := [th-lemma arith farkas 1 -1 1 -1 2 -2 -1 1 1 -1 -1 1 1 -1 1 #779 #1021 #1043 #859 #1037 #800 #997 #808 #1970 #1000 #1005 #1402 #2253 #1008 #776]: false
#2256 := [lemma #2254]: #2255
#2265 := [unit-resolution #2256 #2264 #2262 #2260 #776]: #453
#2266 := [unit-resolution #697 #2265]: #694
#2267 := [unit-resolution #2147 #2266]: #755
#2268 := (or #337 #1335 #945 #816 #815)
#2269 := [unit-resolution #1760 #800 #808 #812 #1008 #1968]: #2268
#2270 := [unit-resolution #2269 #2267 #2165 #2136 #2260]: #1335
#2271 := (or #366 #945 #816 #396 #815)
#2272 := [unit-resolution #1755 #800 #808 #812 #1968]: #2271
#2273 := [unit-resolution #2272 #2267 #2165 #2258 #2260]: #366
#2274 := [unit-resolution #673 #2273]: #670
#2275 := [unit-resolution #1010 #2274 #2270]: false
#2277 := [lemma #2275]: #2276
#2291 := [unit-resolution #2277 #776]: #337
#2292 := [unit-resolution #657 #2291]: #658
#2293 := [unit-resolution #849 #2292]: #758
#2294 := [th-lemma arith farkas 2 -1 1 -1 -1 -1 1 1 -1 -1 1 1 -1 1 #2282 #772 #2293 #779 #776 #2284 #859 #997 #808 #1970 #1000 #1005 #1402 #2290]: false
#2296 := [lemma #2294]: #2295
#2297 := [unit-resolution #2296 #776]: #453
#2298 := [unit-resolution #697 #2297]: #694
#2299 := [unit-resolution #2147 #2298]: #755
#2302 := (or #1036 #816 #1029 #396 #815)
#2300 := (or #1036 #816 #1421 #1029 #1512 #396 #815)
#2301 := [th-lemma arith assign-bounds -2 2 -2 2 -2 -1]: #2300
#2303 := [unit-resolution #2301 #808 #1025]: #2302
#2304 := [unit-resolution #2303 #2299 #2165 #2241 #2285]: #1036
#2305 := (or #396 #815 #816 #740 #570 #782)
#2306 := [unit-resolution #818 #1968]: #2305
#2307 := [unit-resolution #2306 #2299 #2165 #2285 #776 #2293]: #570
#2308 := (or #1046 #1505 #569 #1014 #1081 #1090 #1013)
#2309 := [th-lemma arith assign-bounds 1 2 2 2 2 2]: #2308
#2310 := [unit-resolution #2309 #2307 #2304 #1005 #1402 #1970 #1000 #2220]: false
#2311 := [lemma #2310]: #740
#2331 := [unit-resolution #2087 #2085]: #991
#2332 := [unit-resolution #655 #2331]: #337
#2333 := (or #2048 #1513 #338)
#2334 := [th-lemma arith assign-bounds 1 -2]: #2333
#2335 := [unit-resolution #2334 #2332 #2085]: #1513
#2336 := [unit-resolution #657 #2332]: #658
#2337 := [unit-resolution #1475 #2336 #2335]: false
#2338 := [lemma #2337]: #2048
#2346 := (or #739 #1514 #2082 #1029 #1512 #986 #875 #837 #838 #876 #877 #984 #985 #781 #983)
#2347 := [th-lemma arith assign-bounds -1 1 -1 1 1 -1 -1 1 1 -1 -2 2 -1 1]: #2346
#2348 := [unit-resolution #2347 #923 #916 #1025 #873 #835 #870 #1473 #1851 #1996 #2338 #2290 #2341 #2241 #772]: #739
#2349 := [unit-resolution #1520 #2348 #2311]: #66
#2350 := [unit-resolution #661 #2349 #2345]: false
#2351 := [lemma #2350]: #453
#2352 := [unit-resolution #2111 #2351 #2047]: #761
#2353 := [unit-resolution #697 #2351]: #694
#2354 := [unit-resolution #2147 #2353]: #755
#2355 := [unit-resolution #2272 #2354 #2165 #2285 #2287]: #366
#2356 := [unit-resolution #673 #2355]: #670
#2357 := [unit-resolution #791 #2356]: #767
#2358 := [unit-resolution #2343 #2357 #873 #812 #835 #870 #832 #916 #1851 #1996 #2165 #2330 #2352 #2341 #772]: #736
#2359 := [unit-resolution #2347 #2357 #916 #1025 #873 #835 #870 #1473 #1851 #1996 #2338 #2352 #2341 #2241 #772]: #739
#2360 := [unit-resolution #1520 #2359 #2311]: #66
#2361 := [unit-resolution #661 #2360]: #650
#2362 := [unit-resolution #1542 #2361 #2358]: #842
#2363 := [unit-resolution #2303 #2354 #2165 #2241 #2285]: #1036
#2364 := [unit-resolution #2309 #2363 #1005 #1402 #1970 #1000 #2220]: #569
#2365 := [unit-resolution #729 #2364]: #726
#2366 := [unit-resolution #1538 #2365]: #1481
#2367 := [unit-resolution #1010 #2356]: #892
#2368 := [unit-resolution #2027 #2367 #2355]: #891
[unit-resolution #2092 #2368 #2366 #2241 #2341 #2354 #2362 #2312]: false
unsat
ebb9b9eba458556c3c96e64ab347c2dd794296aa 52 0
#2 := false
#12 := 1::Real
decl f3 :: Real
#8 := f3
#10 := 2::Real
#11 := (* 2::Real f3)
#13 := (+ #11 1::Real)
#9 := (+ f3 f3)
#14 := (< #9 #13)
#15 := (or false #14)
#16 := (or #14 #15)
#17 := (not #16)
#72 := (iff #17 false)
#40 := (+ 1::Real #11)
#43 := (< #11 #40)
#60 := (not #43)
#70 := (iff #60 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #60 #65)
#63 := (iff #43 true)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #17 #60)
#58 := (iff #16 #43)
#53 := (or #43 #43)
#56 := (iff #53 #43)
#57 := [rewrite]: #56
#54 := (iff #16 #53)
#51 := (iff #15 #43)
#46 := (or false #43)
#49 := (iff #46 #43)
#50 := [rewrite]: #49
#47 := (iff #15 #46)
#44 := (iff #14 #43)
#41 := (= #13 #40)
#42 := [rewrite]: #41
#38 := (= #9 #11)
#39 := [rewrite]: #38
#45 := [monotonicity #39 #42]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#55 := [monotonicity #45 #52]: #54
#59 := [trans #55 #57]: #58
#62 := [monotonicity #59]: #61
#73 := [trans #62 #71]: #72
#37 := [asserted]: #17
[mp #37 #73]: false
unsat
7284d3250d19a32079c86839237365aa695997b1 347 0
#2 := false
#25 := 0::Int
decl f3 :: Int
#8 := f3
#424 := (<= f3 0::Int)
#451 := (>= f3 0::Int)
#758 := (not #451)
#414 := (not #424)
#759 := (or #414 #758)
#720 := (not #759)
#11 := 2::Int
#448 := (mod f3 2::Int)
#118 := -1::Int
#449 := (* -1::Int #448)
decl f4 :: (-> S2 Int Int)
decl f5 :: (-> S3 Int S2)
decl f6 :: S3
#12 := f6
#13 := (f5 f6 f3)
#14 := (f4 #13 2::Int)
#450 := (+ #14 #449)
#447 := (= #450 0::Int)
#710 := (not #447)
#722 := (>= #450 0::Int)
#652 := (not #722)
#659 := [hypothesis]: #722
#694 := (>= #448 0::Int)
#1 := true
#70 := [true-axiom]: true
#670 := (or false #694)
#648 := [th-lemma arith]: #670
#649 := [unit-resolution #648 #70]: #694
#100 := (>= #14 0::Int)
#103 := (not #100)
#9 := 1::Int
#15 := (* 2::Int #14)
#16 := (+ #15 1::Int)
#17 := (+ f3 #16)
#10 := (+ f3 1::Int)
#18 := (<= #10 #17)
#19 := (not #18)
#108 := (iff #19 #103)
#82 := (+ f3 #15)
#83 := (+ 1::Int #82)
#73 := (+ 1::Int f3)
#88 := (<= #73 #83)
#91 := (not #88)
#106 := (iff #91 #103)
#98 := (>= #15 0::Int)
#94 := (not #98)
#104 := (iff #94 #103)
#101 := (iff #98 #100)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#95 := (iff #91 #94)
#96 := (iff #88 #98)
#97 := [rewrite]: #96
#99 := [monotonicity #97]: #95
#107 := [trans #99 #105]: #106
#92 := (iff #19 #91)
#89 := (iff #18 #88)
#86 := (= #17 #83)
#76 := (+ 1::Int #15)
#79 := (+ f3 #76)
#84 := (= #79 #83)
#85 := [rewrite]: #84
#80 := (= #17 #79)
#77 := (= #16 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#87 := [trans #81 #85]: #86
#74 := (= #10 #73)
#75 := [rewrite]: #74
#90 := [monotonicity #75 #87]: #89
#93 := [monotonicity #90]: #92
#109 := [trans #93 #107]: #108
#72 := [asserted]: #19
#110 := [mp #72 #109]: #103
#651 := [th-lemma arith farkas -1 1 1 #110 #649 #659]: false
#653 := [lemma #651]: #652
#665 := (or #710 #722)
#666 := [th-lemma arith triangle-eq]: #665
#667 := [unit-resolution #666 #653]: #710
#642 := (or #720 #447)
#746 := -2::Int
#444 := (* -1::Int f3)
#470 := (mod #444 -2::Int)
#366 := (+ #14 #470)
#465 := (= #366 0::Int)
#744 := (ite #759 #447 #465)
#768 := (= #14 0::Int)
#769 := (= f3 0::Int)
#455 := (ite #769 #768 #744)
#23 := (:var 0 Int)
#21 := (:var 1 Int)
#43 := (f5 f6 #21)
#44 := (f4 #43 #23)
#780 := (pattern #44)
#122 := (* -1::Int #23)
#119 := (* -1::Int #21)
#177 := (mod #119 #122)
#292 := (+ #44 #177)
#293 := (= #292 0::Int)
#45 := (mod #21 #23)
#289 := (* -1::Int #45)
#290 := (+ #44 #289)
#291 := (= #290 0::Int)
#151 := (>= #21 0::Int)
#144 := (<= #23 0::Int)
#236 := (or #144 #151)
#237 := (not #236)
#140 := (<= #21 0::Int)
#234 := (or #140 #144)
#235 := (not #234)
#240 := (or #235 #237)
#294 := (ite #240 #291 #293)
#288 := (= #44 0::Int)
#26 := (= #21 0::Int)
#295 := (ite #26 #288 #294)
#287 := (= #21 #44)
#27 := (= #23 0::Int)
#296 := (ite #27 #287 #295)
#781 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #780) #296)
#299 := (forall (vars (?v0 Int) (?v1 Int)) #296)
#784 := (iff #299 #781)
#782 := (iff #296 #296)
#783 := [refl]: #782
#785 := [quant-intro #783]: #784
#183 := (* -1::Int #177)
#256 := (ite #240 #45 #183)
#259 := (ite #26 0::Int #256)
#262 := (ite #27 #21 #259)
#265 := (= #44 #262)
#268 := (forall (vars (?v0 Int) (?v1 Int)) #265)
#300 := (iff #268 #299)
#297 := (iff #265 #296)
#298 := [rewrite]: #297
#301 := [quant-intro #298]: #300
#152 := (not #151)
#145 := (not #144)
#155 := (and #145 #152)
#141 := (not #140)
#148 := (and #141 #145)
#158 := (or #148 #155)
#203 := (ite #158 #45 #183)
#206 := (ite #26 0::Int #203)
#209 := (ite #27 #21 #206)
#212 := (= #44 #209)
#215 := (forall (vars (?v0 Int) (?v1 Int)) #212)
#269 := (iff #215 #268)
#266 := (iff #212 #265)
#263 := (= #209 #262)
#260 := (= #206 #259)
#257 := (= #203 #256)
#241 := (iff #158 #240)
#238 := (iff #155 #237)
#239 := [rewrite]: #238
#228 := (iff #148 #235)
#229 := [rewrite]: #228
#242 := [monotonicity #229 #239]: #241
#258 := [monotonicity #242]: #257
#261 := [monotonicity #258]: #260
#264 := [monotonicity #261]: #263
#267 := [monotonicity #264]: #266
#270 := [quant-intro #267]: #269
#226 := (~ #215 #215)
#225 := (~ #212 #212)
#222 := [refl]: #225
#227 := [nnf-pos #222]: #226
#37 := (- #23)
#36 := (- #21)
#46 := (mod #36 #37)
#47 := (- #46)
#30 := (< 0::Int #23)
#32 := (< #21 0::Int)
#33 := (and #32 #30)
#29 := (< 0::Int #21)
#31 := (and #29 #30)
#34 := (or #31 #33)
#48 := (ite #34 #45 #47)
#49 := (ite #26 0::Int #48)
#50 := (ite #27 #21 #49)
#51 := (= #44 #50)
#52 := (forall (vars (?v0 Int) (?v1 Int)) #51)
#218 := (iff #52 #215)
#112 := (and #30 #32)
#115 := (or #31 #112)
#188 := (ite #115 #45 #183)
#191 := (ite #26 0::Int #188)
#194 := (ite #27 #21 #191)
#197 := (= #44 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#216 := (iff #200 #215)
#213 := (iff #197 #212)
#210 := (= #194 #209)
#207 := (= #191 #206)
#204 := (= #188 #203)
#159 := (iff #115 #158)
#156 := (iff #112 #155)
#153 := (iff #32 #152)
#154 := [rewrite]: #153
#146 := (iff #30 #145)
#147 := [rewrite]: #146
#157 := [monotonicity #147 #154]: #156
#149 := (iff #31 #148)
#142 := (iff #29 #141)
#143 := [rewrite]: #142
#150 := [monotonicity #143 #147]: #149
#160 := [monotonicity #150 #157]: #159
#205 := [monotonicity #160]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [quant-intro #214]: #216
#201 := (iff #52 #200)
#198 := (iff #51 #197)
#195 := (= #50 #194)
#192 := (= #49 #191)
#189 := (= #48 #188)
#186 := (= #47 #183)
#180 := (- #177)
#184 := (= #180 #183)
#185 := [rewrite]: #184
#181 := (= #47 #180)
#178 := (= #46 #177)
#123 := (= #37 #122)
#124 := [rewrite]: #123
#120 := (= #36 #119)
#121 := [rewrite]: #120
#179 := [monotonicity #121 #124]: #178
#182 := [monotonicity #179]: #181
#187 := [trans #182 #185]: #186
#116 := (iff #34 #115)
#113 := (iff #33 #112)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#190 := [monotonicity #117 #187]: #189
#193 := [monotonicity #190]: #192
#196 := [monotonicity #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#219 := [trans #202 #217]: #218
#176 := [asserted]: #52
#220 := [mp #176 #219]: #215
#223 := [mp~ #220 #227]: #215
#271 := [mp #223 #270]: #268
#302 := [mp #271 #301]: #299
#786 := [mp #302 #785]: #781
#739 := (not #781)
#728 := (or #739 #455)
#360 := (* -1::Int 2::Int)
#445 := (mod #444 #360)
#446 := (+ #14 #445)
#437 := (= #446 0::Int)
#430 := (<= 2::Int 0::Int)
#765 := (or #430 #451)
#767 := (not #765)
#554 := (or #424 #430)
#761 := (not #554)
#435 := (or #761 #767)
#436 := (ite #435 #447 #437)
#770 := (ite #769 #768 #436)
#771 := (= f3 #14)
#766 := (= 2::Int 0::Int)
#772 := (ite #766 #771 #770)
#729 := (or #739 #772)
#725 := (iff #729 #728)
#731 := (iff #728 #728)
#732 := [rewrite]: #731
#738 := (iff #772 #455)
#458 := (ite false #771 #455)
#452 := (iff #458 #455)
#734 := [rewrite]: #452
#736 := (iff #772 #458)
#456 := (iff #770 #455)
#741 := (iff #436 #744)
#466 := (iff #437 #465)
#742 := (= #446 #366)
#471 := (= #445 #470)
#747 := (= #360 -2::Int)
#469 := [rewrite]: #747
#472 := [monotonicity #469]: #471
#743 := [monotonicity #472]: #742
#740 := [monotonicity #743]: #466
#757 := (iff #435 #759)
#398 := (iff #767 #758)
#393 := (iff #765 #451)
#752 := (or false #451)
#749 := (iff #752 #451)
#755 := [rewrite]: #749
#753 := (iff #765 #752)
#427 := (iff #430 false)
#763 := [rewrite]: #427
#754 := [monotonicity #763]: #753
#756 := [trans #754 #755]: #393
#399 := [monotonicity #756]: #398
#750 := (iff #761 #414)
#412 := (iff #554 #424)
#423 := (or #424 false)
#748 := (iff #423 #424)
#411 := [rewrite]: #748
#764 := (iff #554 #423)
#407 := [monotonicity #763]: #764
#413 := [trans #407 #411]: #412
#751 := [monotonicity #413]: #750
#760 := [monotonicity #751 #399]: #757
#745 := [monotonicity #760 #740]: #741
#457 := [monotonicity #745]: #456
#762 := (iff #766 false)
#422 := [rewrite]: #762
#737 := [monotonicity #422 #457]: #736
#735 := [trans #737 #734]: #738
#726 := [monotonicity #735]: #725
#727 := [trans #726 #732]: #725
#730 := [quant-inst #8 #11]: #729
#733 := [mp #730 #727]: #728
#668 := [unit-resolution #733 #786]: #455
#598 := (not #769)
#597 := (not #455)
#654 := (or #597 #598)
#703 := (not #768)
#669 := (or #703 #100)
#693 := [th-lemma arith triangle-eq]: #669
#687 := [unit-resolution #693 #110]: #703
#557 := (or #597 #598 #768)
#705 := [def-axiom]: #557
#655 := [unit-resolution #705 #687]: #654
#650 := [unit-resolution #655 #668]: #598
#607 := (or #597 #769 #744)
#702 := [def-axiom]: #607
#656 := [unit-resolution #702 #650 #668]: #744
#724 := (not #744)
#553 := (or #724 #720 #447)
#555 := [def-axiom]: #553
#638 := [unit-resolution #555 #656]: #642
#639 := [unit-resolution #638 #667]: #720
#575 := (or #759 #424)
#576 := [def-axiom]: #575
#640 := [unit-resolution #576 #639]: #424
#718 := (or #759 #451)
#719 := [def-axiom]: #718
#643 := [unit-resolution #719 #639]: #451
#644 := (or #769 #414 #758)
#645 := [th-lemma arith triangle-eq]: #644
#646 := [unit-resolution #645 #650]: #759
[unit-resolution #646 #643 #640]: false
unsat
cf5adef89e3e53946521876e9bc33cdee144fbaf 354 0
#2 := false
#24 := 0::Int
decl f3 :: Int
#8 := f3
#443 := (>= f3 0::Int)
#763 := (<= f3 0::Int)
#409 := (not #763)
#752 := (not #443)
#756 := (or #752 #409)
#719 := (not #756)
#11 := 2::Int
#444 := (mod f3 2::Int)
#113 := -1::Int
#445 := (* -1::Int #444)
decl f4 :: (-> S2 Int Int)
decl f5 :: (-> S3 Int S2)
decl f6 :: S3
#9 := f6
#10 := (f5 f6 f3)
#12 := (f4 #10 2::Int)
#373 := (+ #12 #445)
#446 := (= #373 0::Int)
#592 := (not #446)
#549 := (<= #373 0::Int)
#652 := (not #549)
#660 := (>= #444 2::Int)
#661 := (not #660)
#1 := true
#69 := [true-axiom]: true
#648 := (or false #661)
#649 := [th-lemma arith]: #648
#650 := [unit-resolution #649 #69]: #661
#651 := [hypothesis]: #549
#98 := (>= #12 2::Int)
#15 := 3::Int
#16 := (+ f3 3::Int)
#13 := (+ #12 #12)
#14 := (+ f3 #13)
#17 := (< #14 #16)
#18 := (not #17)
#103 := (iff #18 #98)
#78 := (+ 3::Int f3)
#72 := (* 2::Int #12)
#75 := (+ f3 #72)
#81 := (< #75 #78)
#84 := (not #81)
#101 := (iff #84 #98)
#91 := (>= #72 3::Int)
#99 := (iff #91 #98)
#100 := [rewrite]: #99
#96 := (iff #84 #91)
#89 := (not #91)
#88 := (not #89)
#94 := (iff #88 #91)
#95 := [rewrite]: #94
#92 := (iff #84 #88)
#90 := (iff #81 #89)
#87 := [rewrite]: #90
#93 := [monotonicity #87]: #92
#97 := [trans #93 #95]: #96
#102 := [trans #97 #100]: #101
#85 := (iff #18 #84)
#82 := (iff #17 #81)
#79 := (= #16 #78)
#80 := [rewrite]: #79
#76 := (= #14 #75)
#73 := (= #13 #72)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#83 := [monotonicity #77 #80]: #82
#86 := [monotonicity #83]: #85
#104 := [trans #86 #102]: #103
#71 := [asserted]: #18
#105 := [mp #71 #104]: #98
#646 := [th-lemma arith farkas -1 1 1 #105 #651 #650]: false
#638 := [lemma #646]: #652
#655 := (or #592 #549)
#666 := [th-lemma arith triangle-eq]: #655
#644 := [unit-resolution #666 #638]: #592
#616 := (or #719 #446)
#467 := -2::Int
#440 := (* -1::Int f3)
#738 := (mod #440 -2::Int)
#462 := (+ #12 #738)
#737 := (= #462 0::Int)
#452 := (ite #756 #446 #737)
#432 := (= #12 0::Int)
#764 := (= f3 0::Int)
#732 := (ite #764 #432 #452)
#22 := (:var 0 Int)
#20 := (:var 1 Int)
#42 := (f5 f6 #20)
#43 := (f4 #42 #22)
#776 := (pattern #43)
#117 := (* -1::Int #22)
#114 := (* -1::Int #20)
#172 := (mod #114 #117)
#287 := (+ #43 #172)
#288 := (= #287 0::Int)
#44 := (mod #20 #22)
#284 := (* -1::Int #44)
#285 := (+ #43 #284)
#286 := (= #285 0::Int)
#146 := (>= #20 0::Int)
#139 := (<= #22 0::Int)
#231 := (or #139 #146)
#232 := (not #231)
#135 := (<= #20 0::Int)
#229 := (or #135 #139)
#230 := (not #229)
#235 := (or #230 #232)
#289 := (ite #235 #286 #288)
#283 := (= #43 0::Int)
#25 := (= #20 0::Int)
#290 := (ite #25 #283 #289)
#282 := (= #20 #43)
#26 := (= #22 0::Int)
#291 := (ite #26 #282 #290)
#777 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #776) #291)
#294 := (forall (vars (?v0 Int) (?v1 Int)) #291)
#780 := (iff #294 #777)
#778 := (iff #291 #291)
#779 := [refl]: #778
#781 := [quant-intro #779]: #780
#178 := (* -1::Int #172)
#251 := (ite #235 #44 #178)
#254 := (ite #25 0::Int #251)
#257 := (ite #26 #20 #254)
#260 := (= #43 #257)
#263 := (forall (vars (?v0 Int) (?v1 Int)) #260)
#295 := (iff #263 #294)
#292 := (iff #260 #291)
#293 := [rewrite]: #292
#296 := [quant-intro #293]: #295
#147 := (not #146)
#140 := (not #139)
#150 := (and #140 #147)
#136 := (not #135)
#143 := (and #136 #140)
#153 := (or #143 #150)
#198 := (ite #153 #44 #178)
#201 := (ite #25 0::Int #198)
#204 := (ite #26 #20 #201)
#207 := (= #43 #204)
#210 := (forall (vars (?v0 Int) (?v1 Int)) #207)
#264 := (iff #210 #263)
#261 := (iff #207 #260)
#258 := (= #204 #257)
#255 := (= #201 #254)
#252 := (= #198 #251)
#236 := (iff #153 #235)
#233 := (iff #150 #232)
#234 := [rewrite]: #233
#223 := (iff #143 #230)
#224 := [rewrite]: #223
#237 := [monotonicity #224 #234]: #236
#253 := [monotonicity #237]: #252
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [monotonicity #259]: #261
#265 := [quant-intro #262]: #264
#221 := (~ #210 #210)
#220 := (~ #207 #207)
#217 := [refl]: #220
#222 := [nnf-pos #217]: #221
#36 := (- #22)
#35 := (- #20)
#45 := (mod #35 #36)
#46 := (- #45)
#29 := (< 0::Int #22)
#31 := (< #20 0::Int)
#32 := (and #31 #29)
#28 := (< 0::Int #20)
#30 := (and #28 #29)
#33 := (or #30 #32)
#47 := (ite #33 #44 #46)
#48 := (ite #25 0::Int #47)
#49 := (ite #26 #20 #48)
#50 := (= #43 #49)
#51 := (forall (vars (?v0 Int) (?v1 Int)) #50)
#213 := (iff #51 #210)
#107 := (and #29 #31)
#110 := (or #30 #107)
#183 := (ite #110 #44 #178)
#186 := (ite #25 0::Int #183)
#189 := (ite #26 #20 #186)
#192 := (= #43 #189)
#195 := (forall (vars (?v0 Int) (?v1 Int)) #192)
#211 := (iff #195 #210)
#208 := (iff #192 #207)
#205 := (= #189 #204)
#202 := (= #186 #201)
#199 := (= #183 #198)
#154 := (iff #110 #153)
#151 := (iff #107 #150)
#148 := (iff #31 #147)
#149 := [rewrite]: #148
#141 := (iff #29 #140)
#142 := [rewrite]: #141
#152 := [monotonicity #142 #149]: #151
#144 := (iff #30 #143)
#137 := (iff #28 #136)
#138 := [rewrite]: #137
#145 := [monotonicity #138 #142]: #144
#155 := [monotonicity #145 #152]: #154
#200 := [monotonicity #155]: #199
#203 := [monotonicity #200]: #202
#206 := [monotonicity #203]: #205
#209 := [monotonicity #206]: #208
#212 := [quant-intro #209]: #211
#196 := (iff #51 #195)
#193 := (iff #50 #192)
#190 := (= #49 #189)
#187 := (= #48 #186)
#184 := (= #47 #183)
#181 := (= #46 #178)
#175 := (- #172)
#179 := (= #175 #178)
#180 := [rewrite]: #179
#176 := (= #46 #175)
#173 := (= #45 #172)
#118 := (= #36 #117)
#119 := [rewrite]: #118
#115 := (= #35 #114)
#116 := [rewrite]: #115
#174 := [monotonicity #116 #119]: #173
#177 := [monotonicity #174]: #176
#182 := [trans #177 #180]: #181
#111 := (iff #33 #110)
#108 := (iff #32 #107)
#109 := [rewrite]: #108
#112 := [monotonicity #109]: #111
#185 := [monotonicity #112 #182]: #184
#188 := [monotonicity #185]: #187
#191 := [monotonicity #188]: #190
#194 := [monotonicity #191]: #193
#197 := [quant-intro #194]: #196
#214 := [trans #197 #212]: #213
#171 := [asserted]: #51
#215 := [mp #171 #214]: #210
#218 := [mp~ #215 #222]: #210
#266 := [mp #218 #265]: #263
#297 := [mp #266 #296]: #294
#782 := [mp #297 #781]: #777
#721 := (not #777)
#722 := (or #721 #732)
#355 := (* -1::Int 2::Int)
#441 := (mod #440 #355)
#442 := (+ #12 #441)
#433 := (= #442 0::Int)
#447 := (<= 2::Int 0::Int)
#426 := (or #447 #443)
#761 := (not #426)
#420 := (or #763 #447)
#550 := (not #420)
#757 := (or #550 #761)
#431 := (ite #757 #446 #433)
#765 := (ite #764 #432 #431)
#766 := (= f3 #12)
#767 := (= 2::Int 0::Int)
#762 := (ite #767 #766 #765)
#727 := (or #721 #762)
#723 := (iff #727 #722)
#570 := (iff #722 #722)
#571 := [rewrite]: #570
#725 := (iff #762 #732)
#730 := (ite false #766 #732)
#735 := (iff #730 #732)
#724 := [rewrite]: #735
#734 := (iff #762 #730)
#733 := (iff #765 #732)
#453 := (iff #431 #452)
#741 := (iff #433 #737)
#736 := (= #442 #462)
#739 := (= #441 #738)
#468 := (= #355 -2::Int)
#361 := [rewrite]: #468
#461 := [monotonicity #361]: #739
#740 := [monotonicity #461]: #736
#451 := [monotonicity #740]: #741
#465 := (iff #757 #756)
#395 := (or #409 #752)
#742 := (iff #395 #756)
#743 := [rewrite]: #742
#755 := (iff #757 #395)
#754 := (iff #761 #752)
#751 := (iff #426 #443)
#747 := (or false #443)
#750 := (iff #747 #443)
#745 := [rewrite]: #750
#748 := (iff #426 #747)
#418 := (iff #447 false)
#423 := [rewrite]: #418
#749 := [monotonicity #423]: #748
#389 := [trans #749 #745]: #751
#394 := [monotonicity #389]: #754
#410 := (iff #550 #409)
#407 := (iff #420 #763)
#759 := (or #763 false)
#403 := (iff #759 #763)
#744 := [rewrite]: #403
#419 := (iff #420 #759)
#760 := [monotonicity #423]: #419
#408 := [trans #760 #744]: #407
#746 := [monotonicity #408]: #410
#753 := [monotonicity #746 #394]: #755
#466 := [trans #753 #743]: #465
#454 := [monotonicity #466 #451]: #453
#448 := [monotonicity #454]: #733
#768 := (iff #767 false)
#758 := [rewrite]: #768
#731 := [monotonicity #758 #448]: #734
#726 := [trans #731 #724]: #725
#729 := [monotonicity #726]: #723
#572 := [trans #729 #571]: #723
#728 := [quant-inst #8 #11]: #727
#714 := [mp #728 #572]: #722
#645 := [unit-resolution #714 #782]: #732
#699 := (not #764)
#698 := (not #732)
#641 := (or #698 #699)
#605 := (not #432)
#715 := (<= #12 0::Int)
#647 := (not #715)
#677 := (not #98)
#678 := (or #647 #677)
#634 := [th-lemma arith farkas 1 1]: #678
#635 := [unit-resolution #634 #105]: #647
#636 := (or #605 #715)
#639 := [th-lemma arith triangle-eq]: #636
#640 := [unit-resolution #639 #635]: #605
#702 := (or #698 #699 #432)
#587 := [def-axiom]: #702
#642 := [unit-resolution #587 #640]: #641
#637 := [unit-resolution #642 #645]: #699
#602 := (or #698 #764 #452)
#604 := [def-axiom]: #602
#643 := [unit-resolution #604 #637 #645]: #452
#706 := (not #452)
#708 := (or #706 #719 #446)
#709 := [def-axiom]: #708
#617 := [unit-resolution #709 #643]: #616
#618 := [unit-resolution #617 #644]: #719
#717 := (or #756 #443)
#711 := [def-axiom]: #717
#511 := [unit-resolution #711 #618]: #443
#712 := (or #756 #763)
#718 := [def-axiom]: #712
#622 := [unit-resolution #718 #618]: #763
#623 := (or #764 #409 #752)
#624 := [th-lemma arith triangle-eq]: #623
#629 := [unit-resolution #624 #637]: #395
[unit-resolution #629 #622 #511]: false
unsat
cfa8a4e8b0964986b89eaf37e6038032e9b8b0d6 101 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#10 := (= f3 0::Real)
#11 := (not #10)
#46 := [asserted]: #11
#101 := (<= f3 0::Real)
#21 := 2::Real
#48 := (* 2::Real f3)
#103 := (<= #48 0::Real)
#96 := (= #48 0::Real)
#20 := 4::Real
#15 := (- f3)
#14 := (< f3 0::Real)
#16 := (ite #14 #15 f3)
#13 := 1::Real
#17 := (< 1::Real #16)
#18 := (not #17)
#19 := (or #17 #18)
#22 := (ite #19 4::Real 2::Real)
#23 := (* #22 f3)
#12 := (+ f3 f3)
#24 := (= #12 #23)
#25 := (not #24)
#26 := (not #25)
#97 := (iff #26 #96)
#78 := (* 4::Real f3)
#81 := (= #48 #78)
#94 := (iff #81 #96)
#95 := [rewrite]: #94
#92 := (iff #26 #81)
#84 := (not #81)
#87 := (not #84)
#90 := (iff #87 #81)
#91 := [rewrite]: #90
#88 := (iff #26 #87)
#85 := (iff #25 #84)
#82 := (iff #24 #81)
#79 := (= #23 #78)
#76 := (= #22 4::Real)
#1 := true
#71 := (ite true 4::Real 2::Real)
#74 := (= #71 4::Real)
#75 := [rewrite]: #74
#72 := (= #22 #71)
#69 := (iff #19 true)
#51 := -1::Real
#52 := (* -1::Real f3)
#55 := (ite #14 #52 f3)
#58 := (< 1::Real #55)
#61 := (not #58)
#64 := (or #58 #61)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #19 #64)
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (= #16 #55)
#53 := (= #15 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #60 #63]: #65
#70 := [trans #66 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#80 := [monotonicity #77]: #79
#49 := (= #12 #48)
#50 := [rewrite]: #49
#83 := [monotonicity #50 #80]: #82
#86 := [monotonicity #83]: #85
#89 := [monotonicity #86]: #88
#93 := [trans #89 #91]: #92
#98 := [trans #93 #95]: #97
#47 := [asserted]: #26
#99 := [mp #47 #98]: #96
#105 := (not #96)
#106 := (or #105 #103)
#107 := [th-lemma arith triangle-eq]: #106
#108 := [unit-resolution #107 #99]: #103
#109 := (not #103)
#110 := (or #101 #109)
#111 := [th-lemma arith assign-bounds 1]: #110
#112 := [unit-resolution #111 #108]: #101
#102 := (>= f3 0::Real)
#104 := (>= #48 0::Real)
#113 := (or #105 #104)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #99]: #104
#116 := (not #104)
#117 := (or #102 #116)
#118 := [th-lemma arith assign-bounds 1]: #117
#119 := [unit-resolution #118 #115]: #102
#121 := (not #102)
#120 := (not #101)
#122 := (or #10 #120 #121)
#123 := [th-lemma arith triangle-eq]: #122
[unit-resolution #123 #119 #112 #46]: false
unsat
0e941ae848fda6bf9dfac1fd97560c61c65c1f6a 937 0
#2 := false
#23 := 1::Int
decl f3 :: (-> S2 Int Int)
#13 := 2::Int
decl f4 :: (-> S3 Int S2)
decl f7 :: Int
#10 := f7
decl f5 :: S3
#8 := f5
#25 := (f4 f5 f7)
#26 := (f3 #25 2::Int)
#1110 := (<= #26 1::Int)
#15 := 0::Int
#581 := (mod f7 2::Int)
#115 := -1::Int
#582 := (* -1::Int #581)
#583 := (+ #26 #582)
#961 := (<= #583 0::Int)
#584 := (= #583 0::Int)
decl f6 :: Int
#9 := f6
#11 := (+ f6 f7)
#468 := (>= #11 0::Int)
#785 := (= #11 0::Int)
#465 := (mod #11 2::Int)
#466 := (* -1::Int #465)
#12 := (f4 f5 #11)
#14 := (f3 #12 2::Int)
#467 := (+ #14 #466)
#464 := (= #467 0::Int)
#722 := (not #464)
#727 := (<= #467 0::Int)
#1114 := [hypothesis]: #464
#1115 := (or #722 #727)
#1116 := [th-lemma arith triangle-eq]: #1115
#1117 := [unit-resolution #1116 #1114]: #727
#729 := (>= #467 0::Int)
#1118 := (or #722 #729)
#1329 := [th-lemma arith triangle-eq]: #1118
#1330 := [unit-resolution #1329 #1114]: #729
#1200 := (not #727)
#1246 := (not #729)
#1355 := (or #1246 #1200)
#1119 := (div f7 2::Int)
#483 := -2::Int
#1132 := (* -2::Int #1119)
#1133 := (+ #582 #1132)
#1134 := (+ f7 #1133)
#1131 := (= #1134 0::Int)
#1168 := (not #1131)
#1283 := [hypothesis]: #1168
#1 := true
#79 := [true-axiom]: true
#1161 := (or false #1131)
#1166 := [th-lemma arith]: #1161
#1284 := [unit-resolution #1166 #79 #1283]: false
#1285 := [lemma #1284]: #1131
#1281 := (or #1168 #1246 #1200)
#1141 := (>= #581 0::Int)
#1164 := (or false #1141)
#1165 := [th-lemma arith]: #1164
#1158 := [unit-resolution #1165 #79]: #1141
#1231 := (>= #1134 0::Int)
#1253 := [hypothesis]: #1131
#1254 := (or #1168 #1231)
#1255 := [th-lemma arith triangle-eq]: #1254
#1256 := [unit-resolution #1255 #1253]: #1231
#20 := 3::Int
#18 := 4::Int
#17 := (f4 f5 f6)
#19 := (f3 #17 4::Int)
#575 := (>= #19 3::Int)
#21 := (= #19 3::Int)
#82 := [asserted]: #21
#974 := (not #21)
#1000 := (or #974 #575)
#1001 := [th-lemma arith triangle-eq]: #1000
#1002 := [unit-resolution #1001 #82]: #575
#872 := (div f6 4::Int)
#670 := -4::Int
#888 := (* -4::Int #872)
#703 := (mod f6 4::Int)
#705 := (* -1::Int #703)
#889 := (+ #705 #888)
#890 := (+ f6 #889)
#896 := (>= #890 0::Int)
#887 := (= #890 0::Int)
#978 := (or false #887)
#979 := [th-lemma arith]: #978
#980 := [unit-resolution #979 #79]: #887
#981 := (not #887)
#1003 := (or #981 #896)
#1004 := [th-lemma arith triangle-eq]: #1003
#1005 := [unit-resolution #1004 #980]: #896
#567 := (>= #14 0::Int)
#16 := (= #14 0::Int)
#81 := [asserted]: #16
#629 := (not #16)
#1237 := (or #629 #567)
#1238 := [th-lemma arith triangle-eq]: #1237
#1239 := [unit-resolution #1238 #81]: #567
#818 := (div #11 2::Int)
#835 := (* -2::Int #818)
#836 := (+ #466 #835)
#837 := (+ f7 #836)
#838 := (+ f6 #837)
#1113 := (>= #838 0::Int)
#833 := (= #838 0::Int)
#1174 := (or false #833)
#1175 := [th-lemma arith]: #1174
#1176 := [unit-resolution #1175 #79]: #833
#1187 := (not #833)
#1240 := (or #1187 #1113)
#1241 := [th-lemma arith triangle-eq]: #1240
#1242 := [unit-resolution #1241 #1176]: #1113
#715 := (+ #19 #705)
#607 := (>= #715 0::Int)
#716 := (= #715 0::Int)
#489 := (* -1::Int f6)
#667 := (mod #489 -4::Int)
#655 := (+ #19 #667)
#660 := (= #655 0::Int)
#717 := (>= f6 0::Int)
#676 := (not #717)
#708 := (<= f6 0::Int)
#677 := (not #708)
#666 := (or #677 #676)
#663 := (ite #666 #716 #660)
#696 := (= f6 0::Int)
#597 := (not #696)
#695 := (= #19 0::Int)
#602 := (not #695)
#435 := (= 3::Int 0::Int)
#437 := (iff #435 false)
#426 := [rewrite]: #437
#432 := [hypothesis]: #695
#433 := (= 3::Int #19)
#434 := [symm #82]: #433
#436 := [trans #434 #432]: #435
#438 := [mp #436 #426]: false
#419 := [lemma #438]: #602
#1034 := (or #597 #695)
#637 := (ite #696 #695 #663)
#33 := (:var 0 Int)
#31 := (:var 1 Int)
#52 := (f4 f5 #31)
#53 := (f3 #52 #33)
#797 := (pattern #53)
#119 := (* -1::Int #33)
#116 := (* -1::Int #31)
#180 := (mod #116 #119)
#309 := (+ #53 #180)
#310 := (= #309 0::Int)
#54 := (mod #31 #33)
#306 := (* -1::Int #54)
#307 := (+ #53 #306)
#308 := (= #307 0::Int)
#154 := (>= #31 0::Int)
#147 := (<= #33 0::Int)
#253 := (or #147 #154)
#254 := (not #253)
#143 := (<= #31 0::Int)
#249 := (or #143 #147)
#250 := (not #249)
#257 := (or #250 #254)
#311 := (ite #257 #308 #310)
#305 := (= #53 0::Int)
#35 := (= #31 0::Int)
#312 := (ite #35 #305 #311)
#304 := (= #31 #53)
#36 := (= #33 0::Int)
#313 := (ite #36 #304 #312)
#798 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #797) #313)
#316 := (forall (vars (?v0 Int) (?v1 Int)) #313)
#801 := (iff #316 #798)
#799 := (iff #313 #313)
#800 := [refl]: #799
#802 := [quant-intro #800]: #801
#186 := (* -1::Int #180)
#273 := (ite #257 #54 #186)
#276 := (ite #35 0::Int #273)
#279 := (ite #36 #31 #276)
#282 := (= #53 #279)
#285 := (forall (vars (?v0 Int) (?v1 Int)) #282)
#317 := (iff #285 #316)
#314 := (iff #282 #313)
#315 := [rewrite]: #314
#318 := [quant-intro #315]: #317
#155 := (not #154)
#148 := (not #147)
#158 := (and #148 #155)
#144 := (not #143)
#151 := (and #144 #148)
#161 := (or #151 #158)
#206 := (ite #161 #54 #186)
#209 := (ite #35 0::Int #206)
#212 := (ite #36 #31 #209)
#215 := (= #53 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#286 := (iff #218 #285)
#283 := (iff #215 #282)
#280 := (= #212 #279)
#277 := (= #209 #276)
#274 := (= #206 #273)
#258 := (iff #161 #257)
#255 := (iff #158 #254)
#256 := [rewrite]: #255
#251 := (iff #151 #250)
#252 := [rewrite]: #251
#259 := [monotonicity #252 #256]: #258
#275 := [monotonicity #259]: #274
#278 := [monotonicity #275]: #277
#281 := [monotonicity #278]: #280
#284 := [monotonicity #281]: #283
#287 := [quant-intro #284]: #286
#228 := (~ #218 #218)
#230 := (~ #215 #215)
#227 := [refl]: #230
#231 := [nnf-pos #227]: #228
#46 := (- #33)
#45 := (- #31)
#55 := (mod #45 #46)
#56 := (- #55)
#39 := (< 0::Int #33)
#41 := (< #31 0::Int)
#42 := (and #41 #39)
#38 := (< 0::Int #31)
#40 := (and #38 #39)
#43 := (or #40 #42)
#57 := (ite #43 #54 #56)
#58 := (ite #35 0::Int #57)
#59 := (ite #36 #31 #58)
#60 := (= #53 #59)
#61 := (forall (vars (?v0 Int) (?v1 Int)) #60)
#221 := (iff #61 #218)
#109 := (and #39 #41)
#112 := (or #40 #109)
#191 := (ite #112 #54 #186)
#100 := (= 0::Int #31)
#194 := (ite #100 0::Int #191)
#103 := (= 0::Int #33)
#197 := (ite #103 #31 #194)
#200 := (= #53 #197)
#203 := (forall (vars (?v0 Int) (?v1 Int)) #200)
#219 := (iff #203 #218)
#216 := (iff #200 #215)
#213 := (= #197 #212)
#210 := (= #194 #209)
#207 := (= #191 #206)
#162 := (iff #112 #161)
#159 := (iff #109 #158)
#156 := (iff #41 #155)
#157 := [rewrite]: #156
#149 := (iff #39 #148)
#150 := [rewrite]: #149
#160 := [monotonicity #150 #157]: #159
#152 := (iff #40 #151)
#145 := (iff #38 #144)
#146 := [rewrite]: #145
#153 := [monotonicity #146 #150]: #152
#163 := [monotonicity #153 #160]: #162
#208 := [monotonicity #163]: #207
#137 := (iff #100 #35)
#138 := [rewrite]: #137
#211 := [monotonicity #138 #208]: #210
#139 := (iff #103 #36)
#140 := [rewrite]: #139
#214 := [monotonicity #140 #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#204 := (iff #61 #203)
#201 := (iff #60 #200)
#198 := (= #59 #197)
#195 := (= #58 #194)
#192 := (= #57 #191)
#189 := (= #56 #186)
#183 := (- #180)
#187 := (= #183 #186)
#188 := [rewrite]: #187
#184 := (= #56 #183)
#181 := (= #55 #180)
#120 := (= #46 #119)
#121 := [rewrite]: #120
#117 := (= #45 #116)
#118 := [rewrite]: #117
#182 := [monotonicity #118 #121]: #181
#185 := [monotonicity #182]: #184
#190 := [trans #185 #188]: #189
#113 := (iff #43 #112)
#110 := (iff #42 #109)
#111 := [rewrite]: #110
#114 := [monotonicity #111]: #113
#193 := [monotonicity #114 #190]: #192
#101 := (iff #35 #100)
#102 := [rewrite]: #101
#196 := [monotonicity #102 #193]: #195
#104 := (iff #36 #103)
#105 := [rewrite]: #104
#199 := [monotonicity #105 #196]: #198
#202 := [monotonicity #199]: #201
#205 := [quant-intro #202]: #204
#222 := [trans #205 #220]: #221
#179 := [asserted]: #61
#223 := [mp #179 #222]: #218
#232 := [mp~ #223 #231]: #218
#288 := [mp #232 #287]: #285
#319 := [mp #288 #318]: #316
#803 := [mp #319 #802]: #798
#591 := (not #798)
#648 := (or #591 #637)
#725 := (* -1::Int 4::Int)
#712 := (mod #489 #725)
#714 := (+ #19 #712)
#706 := (= #714 0::Int)
#713 := (<= 4::Int 0::Int)
#718 := (or #713 #717)
#707 := (not #718)
#709 := (or #708 #713)
#710 := (not #709)
#704 := (or #710 #707)
#711 := (ite #704 #716 #706)
#698 := (ite #696 #695 #711)
#699 := (= f6 #19)
#700 := (= 4::Int 0::Int)
#701 := (ite #700 #699 #698)
#651 := (or #591 #701)
#653 := (iff #651 #648)
#654 := (iff #648 #648)
#634 := [rewrite]: #654
#646 := (iff #701 #637)
#532 := (ite false #699 #637)
#645 := (iff #532 #637)
#650 := [rewrite]: #645
#643 := (iff #701 #532)
#638 := (iff #698 #637)
#658 := (iff #711 #663)
#661 := (iff #706 #660)
#656 := (= #714 #655)
#673 := (= #712 #667)
#671 := (= #725 -4::Int)
#672 := [rewrite]: #671
#659 := [monotonicity #672]: #673
#657 := [monotonicity #659]: #656
#662 := [monotonicity #657]: #661
#668 := (iff #704 #666)
#687 := (iff #707 #676)
#685 := (iff #718 #717)
#680 := (or false #717)
#683 := (iff #680 #717)
#684 := [rewrite]: #683
#681 := (iff #718 #680)
#688 := (iff #713 false)
#689 := [rewrite]: #688
#682 := [monotonicity #689]: #681
#686 := [trans #682 #684]: #685
#665 := [monotonicity #686]: #687
#678 := (iff #710 #677)
#674 := (iff #709 #708)
#691 := (or #708 false)
#690 := (iff #691 #708)
#694 := [rewrite]: #690
#692 := (iff #709 #691)
#693 := [monotonicity #689]: #692
#675 := [trans #693 #694]: #674
#679 := [monotonicity #675]: #678
#669 := [monotonicity #679 #665]: #668
#664 := [monotonicity #669 #662]: #658
#639 := [monotonicity #664]: #638
#697 := (iff #700 false)
#702 := [rewrite]: #697
#644 := [monotonicity #702 #639]: #643
#647 := [trans #644 #650]: #646
#649 := [monotonicity #647]: #653
#580 := [trans #649 #634]: #653
#652 := [quant-inst #9 #18]: #651
#635 := [mp #652 #580]: #648
#1055 := [unit-resolution #635 #803]: #637
#596 := (not #637)
#598 := (or #596 #597 #695)
#599 := [def-axiom]: #598
#1054 := [unit-resolution #599 #1055]: #1034
#1050 := [unit-resolution #1054 #419]: #597
#964 := (or #696 #663)
#600 := (or #596 #696 #663)
#601 := [def-axiom]: #600
#971 := [unit-resolution #601 #1055]: #964
#1040 := [unit-resolution #971 #1050]: #663
#642 := (not #666)
#867 := [hypothesis]: #642
#616 := (or #666 #708)
#640 := [def-axiom]: #616
#868 := [unit-resolution #640 #867]: #708
#641 := (or #666 #717)
#636 := [def-axiom]: #641
#869 := [unit-resolution #636 #867]: #717
#870 := (or #696 #677 #676)
#871 := [th-lemma arith triangle-eq]: #870
#920 := [unit-resolution #871 #869 #868 #1050]: false
#921 := [lemma #920]: #666
#618 := (not #663)
#620 := (or #618 #642 #716)
#621 := [def-axiom]: #620
#1172 := [unit-resolution #621 #921 #1040]: #716
#612 := (not #716)
#1061 := (or #612 #607)
#1062 := [th-lemma arith triangle-eq]: #1061
#1243 := [unit-resolution #1062 #1172]: #607
#1244 := [hypothesis]: #729
#1177 := (* -1::Int #1119)
#1042 := (* -2::Int #872)
#1178 := (+ #1042 #1177)
#1162 := (* -1::Int #818)
#1179 := (+ #1162 #1178)
#1180 := (+ #705 #1179)
#1181 := (+ #466 #1180)
#1182 := (+ #19 #1181)
#1183 := (+ #14 #1182)
#1184 := (+ f7 #1183)
#1185 := (+ f6 #1184)
#1186 := (>= #1185 2::Int)
#1198 := (not #1186)
#962 := (>= #583 0::Int)
#1191 := [hypothesis]: #727
#1247 := (or #584 #1246 #1200)
#568 := (<= #19 3::Int)
#975 := (or #974 #568)
#973 := [th-lemma arith triangle-eq]: #975
#977 := [unit-resolution #973 #82]: #568
#895 := (<= #890 0::Int)
#982 := (or #981 #895)
#983 := [th-lemma arith triangle-eq]: #982
#989 := [unit-resolution #983 #980]: #895
#587 := (<= f7 0::Int)
#563 := (= f7 0::Int)
#1066 := (not #584)
#1153 := [hypothesis]: #1066
#1229 := (or #563 #584)
#383 := (* -1::Int f7)
#528 := (mod #383 -2::Int)
#530 := (+ #26 #528)
#515 := (= #530 0::Int)
#553 := (not #587)
#585 := (>= f7 0::Int)
#533 := (not #585)
#543 := (or #533 #553)
#518 := (ite #543 #584 #515)
#1073 := (not #563)
#1214 := [hypothesis]: #1073
#1208 := (or #563 #518)
#562 := (= #26 0::Int)
#521 := (ite #563 #562 #518)
#389 := (or #591 #521)
#377 := (* -1::Int 2::Int)
#577 := (mod #383 #377)
#578 := (+ #26 #577)
#579 := (= #578 0::Int)
#447 := (<= 2::Int 0::Int)
#586 := (or #447 #585)
#569 := (not #586)
#557 := (or #587 #447)
#558 := (not #557)
#559 := (or #558 #569)
#560 := (ite #559 #584 #579)
#564 := (ite #563 #562 #560)
#407 := (= f7 #26)
#788 := (= 2::Int 0::Int)
#565 := (ite #788 #407 #564)
#390 := (or #591 #565)
#378 := (iff #390 #389)
#382 := (iff #389 #389)
#804 := [rewrite]: #382
#505 := (iff #565 #521)
#524 := (ite false #407 #521)
#502 := (iff #524 #521)
#504 := [rewrite]: #502
#513 := (iff #565 #524)
#522 := (iff #564 #521)
#519 := (iff #560 #518)
#516 := (iff #579 #515)
#512 := (= #578 #530)
#529 := (= #577 #528)
#757 := (= #377 -2::Int)
#761 := [rewrite]: #757
#527 := [monotonicity #761]: #529
#514 := [monotonicity #527]: #512
#517 := [monotonicity #514]: #516
#540 := (iff #559 #543)
#538 := (or #553 #533)
#536 := (iff #538 #543)
#539 := [rewrite]: #536
#542 := (iff #559 #538)
#534 := (iff #569 #533)
#541 := (iff #586 #585)
#547 := (or false #585)
#546 := (iff #547 #585)
#551 := [rewrite]: #546
#549 := (iff #586 #547)
#765 := (iff #447 false)
#428 := [rewrite]: #765
#550 := [monotonicity #428]: #549
#531 := [trans #550 #551]: #541
#537 := [monotonicity #531]: #534
#556 := (iff #558 #553)
#554 := (iff #557 #587)
#561 := (or #587 false)
#548 := (iff #561 #587)
#552 := [rewrite]: #548
#566 := (iff #557 #561)
#545 := [monotonicity #428]: #566
#555 := [trans #545 #552]: #554
#544 := [monotonicity #555]: #556
#535 := [monotonicity #544 #537]: #542
#526 := [trans #535 #539]: #540
#520 := [monotonicity #526 #517]: #519
#523 := [monotonicity #520]: #522
#789 := (iff #788 false)
#779 := [rewrite]: #789
#525 := [monotonicity #779 #523]: #513
#506 := [trans #525 #504]: #505
#379 := [monotonicity #506]: #378
#805 := [trans #379 #804]: #378
#391 := [quant-inst #10 #13]: #390
#806 := [mp #391 #805]: #389
#1163 := [unit-resolution #806 #803]: #521
#1035 := (not #521)
#1041 := (or #1035 #563 #518)
#1077 := [def-axiom]: #1041
#1209 := [unit-resolution #1077 #1163]: #1208
#1215 := [unit-resolution #1209 #1214]: #518
#1212 := (or #585 #584)
#1154 := [hypothesis]: #533
#395 := (or #543 #585)
#396 := [def-axiom]: #395
#1155 := [unit-resolution #396 #1154]: #543
#1156 := (or #1073 #585)
#1157 := [th-lemma arith triangle-eq]: #1156
#1140 := [unit-resolution #1157 #1154]: #1073
#1210 := [unit-resolution #1209 #1140]: #518
#924 := (not #543)
#843 := (not #518)
#1032 := (or #843 #924 #584)
#1033 := [def-axiom]: #1032
#1211 := [unit-resolution #1033 #1210 #1155 #1153]: false
#1213 := [lemma #1211]: #1212
#1216 := [unit-resolution #1213 #1153]: #585
#1224 := (or #563 #553 #533)
#1225 := [th-lemma arith triangle-eq]: #1224
#1226 := [unit-resolution #1225 #1214 #1216]: #553
#922 := (or #543 #587)
#923 := [def-axiom]: #922
#1227 := [unit-resolution #923 #1226]: #543
#1228 := [unit-resolution #1033 #1227 #1215 #1153]: false
#1230 := [lemma #1228]: #1229
#1233 := [unit-resolution #1230 #1153]: #563
#1234 := (or #1073 #587)
#1235 := [th-lemma arith triangle-eq]: #1234
#1236 := [unit-resolution #1235 #1233]: #587
#606 := (<= #14 0::Int)
#1193 := (or #629 #606)
#1194 := [th-lemma arith triangle-eq]: #1193
#1195 := [unit-resolution #1194 #81]: #606
#1112 := (<= #838 0::Int)
#1188 := (or #1187 #1112)
#1189 := [th-lemma arith triangle-eq]: #1188
#1190 := [unit-resolution #1189 #1176]: #1112
#576 := (<= #715 0::Int)
#1057 := (or #612 #576)
#1058 := [th-lemma arith triangle-eq]: #1057
#1173 := [unit-resolution #1058 #1172]: #576
#1245 := [th-lemma arith gcd-test -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 -1/2 #1244 #1191 #1243 #1173 #1242 #1190 #1239 #1195 #1216 #1236 #1005 #989 #1002 #977]: false
#1248 := [lemma #1245]: #1247
#1257 := [unit-resolution #1248 #1244 #1191]: #584
#1258 := (or #1066 #962)
#1259 := [th-lemma arith triangle-eq]: #1258
#1260 := [unit-resolution #1259 #1257]: #962
#1111 := (>= #26 1::Int)
#1159 := (not #1111)
#1261 := (or #1066 #961)
#1262 := [th-lemma arith triangle-eq]: #1261
#1263 := [unit-resolution #1262 #1257]: #961
#1147 := (>= #581 2::Int)
#1148 := (not #1147)
#1264 := (or false #1148)
#1265 := [th-lemma arith]: #1264
#1266 := [unit-resolution #1265 #79]: #1148
#1267 := (not #961)
#1268 := (or #1110 #1147 #1267)
#1269 := [th-lemma arith assign-bounds 1 1]: #1268
#1270 := [unit-resolution #1269 #1266 #1263]: #1110
#1273 := (not #1110)
#1276 := (or #1273 #1159)
#27 := (= #26 1::Int)
#226 := (not #27)
#22 := (f3 #17 2::Int)
#24 := (= #22 1::Int)
#1104 := (or #642 #24)
#925 := (div f6 2::Int)
#1043 := (* -1::Int #925)
#1044 := (+ #1042 #1043)
#1045 := (+ #705 #1044)
#490 := (mod f6 2::Int)
#491 := (* -1::Int #490)
#1046 := (+ #491 #1045)
#1047 := (+ #19 #1046)
#1048 := (+ f6 #1047)
#1049 := (>= #1048 2::Int)
#1037 := (not #1049)
#1052 := [hypothesis]: #666
#1056 := [unit-resolution #621 #1052 #1040]: #716
#1059 := [unit-resolution #1058 #1056]: #576
#995 := (not #576)
#1038 := (or #1037 #995)
#947 := (>= #490 0::Int)
#1030 := (or false #947)
#1031 := [th-lemma arith]: #1030
#1028 := [unit-resolution #1031 #79]: #947
#990 := [hypothesis]: #576
#938 := (* -2::Int #925)
#939 := (+ #491 #938)
#940 := (+ f6 #939)
#945 := (<= #940 0::Int)
#937 := (= #940 0::Int)
#1018 := (or false #937)
#1017 := [th-lemma arith]: #1018
#1016 := [unit-resolution #1017 #79]: #937
#965 := (not #937)
#966 := (or #965 #945)
#972 := [th-lemma arith triangle-eq]: #966
#970 := [unit-resolution #972 #1016]: #945
#1029 := [hypothesis]: #1049
#1036 := [th-lemma arith farkas -1 2 -1 -1 -1 1 #977 #1029 #989 #970 #990 #1028]: false
#1039 := [lemma #1036]: #1038
#1060 := [unit-resolution #1039 #1059]: #1037
#1063 := [unit-resolution #1062 #1056]: #607
#946 := (>= #940 0::Int)
#1071 := (or #965 #946)
#1072 := [th-lemma arith triangle-eq]: #1071
#1075 := [unit-resolution #1072 #1016]: #946
#492 := (+ #22 #491)
#392 := (>= #492 0::Int)
#484 := (= #492 0::Int)
#507 := (mod #489 -2::Int)
#511 := (+ #22 #507)
#498 := (= #511 0::Int)
#485 := (ite #666 #484 #498)
#471 := (= #22 0::Int)
#427 := (ite #696 #471 #485)
#418 := (or #591 #427)
#500 := (mod #489 #377)
#499 := (+ #22 #500)
#501 := (= #499 0::Int)
#476 := (or #447 #717)
#477 := (not #476)
#478 := (or #708 #447)
#470 := (not #478)
#479 := (or #470 #477)
#480 := (ite #479 #484 #501)
#481 := (ite #696 #471 #480)
#448 := (= f6 #22)
#450 := (ite #788 #448 #481)
#393 := (or #591 #450)
#398 := (iff #393 #418)
#405 := (iff #418 #418)
#406 := [rewrite]: #405
#417 := (iff #450 #427)
#420 := (ite false #448 #427)
#413 := (iff #420 #427)
#414 := [rewrite]: #413
#423 := (iff #450 #420)
#421 := (iff #481 #427)
#495 := (iff #480 #485)
#493 := (iff #501 #498)
#496 := (= #499 #511)
#510 := (= #500 #507)
#503 := [monotonicity #761]: #510
#497 := [monotonicity #503]: #496
#494 := [monotonicity #497]: #493
#508 := (iff #479 #666)
#445 := (iff #477 #676)
#460 := (iff #476 #717)
#459 := (iff #476 #680)
#449 := [monotonicity #428]: #459
#443 := [trans #449 #684]: #460
#446 := [monotonicity #443]: #445
#457 := (iff #470 #677)
#455 := (iff #478 #708)
#451 := (iff #478 #691)
#442 := [monotonicity #428]: #451
#456 := [trans #442 #694]: #455
#458 := [monotonicity #456]: #457
#509 := [monotonicity #458 #446]: #508
#425 := [monotonicity #509 #494]: #495
#422 := [monotonicity #425]: #421
#411 := [monotonicity #779 #422]: #423
#412 := [trans #411 #414]: #417
#403 := [monotonicity #412]: #398
#408 := [trans #403 #406]: #398
#397 := [quant-inst #9 #13]: #393
#404 := [mp #397 #408]: #418
#1076 := [unit-resolution #404 #803]: #427
#386 := (not #427)
#1079 := (or #386 #485)
#380 := (or #386 #696 #485)
#381 := [def-axiom]: #380
#1080 := [unit-resolution #381 #1050]: #1079
#1081 := [unit-resolution #1080 #1076]: #485
#399 := (not #485)
#400 := (or #399 #642 #484)
#401 := [def-axiom]: #400
#1082 := [unit-resolution #401 #1052 #1081]: #484
#387 := (not #484)
#1083 := (or #387 #392)
#1084 := [th-lemma arith triangle-eq]: #1083
#1085 := [unit-resolution #1084 #1082]: #392
#808 := (>= #22 1::Int)
#1022 := (not #808)
#807 := (<= #22 1::Int)
#953 := (>= #490 2::Int)
#954 := (not #953)
#1086 := (or false #954)
#1087 := [th-lemma arith]: #1086
#1088 := [unit-resolution #1087 #79]: #954
#409 := (<= #492 0::Int)
#1089 := (or #387 #409)
#1090 := [th-lemma arith triangle-eq]: #1089
#1091 := [unit-resolution #1090 #1082]: #409
#1092 := (not #409)
#1093 := (or #807 #953 #1092)
#1094 := [th-lemma arith assign-bounds 1 1]: #1093
#1095 := [unit-resolution #1094 #1091 #1088]: #807
#1097 := (not #807)
#1100 := (or #1097 #1022)
#225 := (not #24)
#1096 := [hypothesis]: #225
#1098 := (or #24 #1097 #1022)
#1099 := [th-lemma arith triangle-eq]: #1098
#1101 := [unit-resolution #1099 #1096]: #1100
#1102 := [unit-resolution #1101 #1095]: #1022
#1103 := [th-lemma arith farkas -1/2 -1/2 1/2 -1/2 -1/2 -1/2 1 #1002 #1005 #1102 #1085 #1075 #1063 #1060]: false
#1105 := [lemma #1103]: #1104
#1271 := [unit-resolution #1105 #921]: #24
#237 := (or #225 #226)
#28 := (and #24 #27)
#29 := (not #28)
#246 := (iff #29 #237)
#238 := (not #237)
#241 := (not #238)
#244 := (iff #241 #237)
#245 := [rewrite]: #244
#242 := (iff #29 #241)
#239 := (iff #28 #238)
#240 := [rewrite]: #239
#243 := [monotonicity #240]: #242
#247 := [trans #243 #245]: #246
#83 := [asserted]: #29
#248 := [mp #83 #247]: #237
#1272 := [unit-resolution #248 #1271]: #226
#1274 := (or #27 #1273 #1159)
#1275 := [th-lemma arith triangle-eq]: #1274
#1277 := [unit-resolution #1275 #1272]: #1276
#1278 := [unit-resolution #1277 #1270]: #1159
#1199 := (not #962)
#1201 := (or #1198 #1199 #1200 #1111)
#1160 := [hypothesis]: #1159
#1139 := (<= #1134 0::Int)
#1167 := [unit-resolution #1166 #79]: #1131
#1169 := (or #1168 #1139)
#1170 := [th-lemma arith triangle-eq]: #1169
#1171 := [unit-resolution #1170 #1167]: #1139
#1192 := [hypothesis]: #1186
#1196 := [hypothesis]: #962
#1197 := [th-lemma arith farkas -1 1 -2 1 1 1 1 1 1 1 #1196 #1195 #1192 #1191 #1190 #1173 #1171 #989 #977 #1160]: false
#1202 := [lemma #1197]: #1201
#1279 := [unit-resolution #1202 #1278 #1191 #1260]: #1198
#1280 := [th-lemma arith farkas -2 1 1 1 1 1 1 1 1 #1279 #1244 #1243 #1242 #1239 #1005 #1002 #1256 #1158]: false
#1282 := [lemma #1280]: #1281
#1356 := [unit-resolution #1282 #1285]: #1355
#1357 := [unit-resolution #1356 #1330 #1117]: false
#1358 := [lemma #1357]: #722
#1288 := (or #785 #464)
#1232 := [hypothesis]: #722
#759 := (+ #489 #383)
#758 := (mod #759 -2::Int)
#473 := (+ #14 #758)
#753 := (= #473 0::Int)
#777 := (not #468)
#441 := (<= #11 0::Int)
#771 := (not #441)
#486 := (or #771 #777)
#751 := (ite #486 #464 #753)
#625 := (not #785)
#809 := [hypothesis]: #625
#1250 := (or #785 #751)
#756 := (ite #785 #16 #751)
#592 := (or #591 #756)
#461 := (* -1::Int #11)
#462 := (mod #461 #377)
#463 := (+ #14 #462)
#454 := (= #463 0::Int)
#782 := (or #447 #468)
#784 := (not #782)
#571 := (or #441 #447)
#778 := (not #571)
#452 := (or #778 #784)
#453 := (ite #452 #464 #454)
#786 := (ite #785 #16 #453)
#787 := (= #11 #14)
#783 := (ite #788 #787 #786)
#593 := (or #591 #783)
#736 := (iff #593 #592)
#738 := (iff #592 #592)
#732 := [rewrite]: #738
#744 := (iff #783 #756)
#439 := (* -1::Int #14)
#444 := (+ f7 #439)
#780 := (+ f6 #444)
#440 := (= #780 0::Int)
#747 := (ite false #440 #756)
#748 := (iff #747 #756)
#749 := [rewrite]: #748
#742 := (iff #783 #747)
#745 := (iff #786 #756)
#755 := (iff #453 #751)
#754 := (iff #454 #753)
#474 := (= #463 #473)
#762 := (= #462 #758)
#760 := (= #461 #759)
#482 := [rewrite]: #760
#472 := [monotonicity #482 #761]: #762
#475 := [monotonicity #472]: #474
#469 := [monotonicity #475]: #754
#487 := (iff #452 #486)
#763 := (iff #784 #777)
#776 := (iff #782 #468)
#410 := (or false #468)
#415 := (iff #410 #468)
#416 := [rewrite]: #415
#773 := (iff #782 #410)
#775 := [monotonicity #428]: #773
#774 := [trans #775 #416]: #776
#764 := [monotonicity #774]: #763
#766 := (iff #778 #771)
#769 := (iff #571 #441)
#429 := (or #441 false)
#767 := (iff #429 #441)
#768 := [rewrite]: #767
#430 := (iff #571 #429)
#431 := [monotonicity #428]: #430
#770 := [trans #431 #768]: #769
#772 := [monotonicity #770]: #766
#488 := [monotonicity #772 #764]: #487
#752 := [monotonicity #488 #469]: #755
#746 := [monotonicity #752]: #745
#781 := (iff #787 #440)
#424 := [rewrite]: #781
#743 := [monotonicity #779 #424 #746]: #742
#750 := [trans #743 #749]: #744
#737 := [monotonicity #750]: #736
#733 := [trans #737 #732]: #736
#735 := [quant-inst #11 #13]: #593
#739 := [mp #735 #733]: #592
#1249 := [unit-resolution #739 #803]: #756
#623 := (not #756)
#627 := (or #623 #785 #751)
#628 := [def-axiom]: #627
#1251 := [unit-resolution #628 #1249]: #1250
#1252 := [unit-resolution #1251 #809]: #751
#816 := (or #486 #785)
#572 := (not #486)
#810 := [hypothesis]: #572
#740 := (or #486 #441)
#734 := [def-axiom]: #740
#811 := [unit-resolution #734 #810]: #441
#741 := (or #486 #468)
#570 := [def-axiom]: #741
#812 := [unit-resolution #570 #810]: #468
#813 := (or #785 #771 #777)
#814 := [th-lemma arith triangle-eq]: #813
#815 := [unit-resolution #814 #812 #811 #809]: false
#817 := [lemma #815]: #816
#1286 := [unit-resolution #817 #809]: #486
#731 := (not #751)
#613 := (or #731 #572 #464)
#614 := [def-axiom]: #613
#1287 := [unit-resolution #614 #1286 #1252 #1232]: false
#1289 := [lemma #1287]: #1288
#1359 := [unit-resolution #1289 #1358]: #785
#1360 := (or #625 #468)
#1361 := [th-lemma arith triangle-eq]: #1360
#1362 := [unit-resolution #1361 #1359]: #468
#1363 := (or #625 #441)
#1364 := [th-lemma arith triangle-eq]: #1363
#1365 := [unit-resolution #1364 #1359]: #441
#1353 := (or #584 #777 #771)
#1302 := [hypothesis]: #441
#1334 := (or #533 #771 #708)
#1012 := [hypothesis]: #677
#1296 := [hypothesis]: #585
#1298 := [th-lemma arith farkas -1 1 1 #1302 #1296 #1012]: false
#1335 := [lemma #1298]: #1334
#1349 := [unit-resolution #1335 #1216 #1302]: #708
#1350 := [unit-resolution #871 #1050]: #666
#1351 := [unit-resolution #1350 #1349]: #676
#1297 := [hypothesis]: #468
#1352 := [th-lemma arith farkas -1 1 1 #1297 #1351 #1236]: false
#1354 := [lemma #1352]: #1353
#1366 := [unit-resolution #1354 #1365 #1362]: #584
#1367 := [unit-resolution #1262 #1366]: #961
#1368 := (or #1110 #1267)
#1309 := [hypothesis]: #1147
#1315 := [unit-resolution #1265 #79 #1309]: false
#1328 := [lemma #1315]: #1148
#1369 := [unit-resolution #1269 #1328]: #1368
#1370 := [unit-resolution #1369 #1367]: #1110
#1310 := (+ #705 #1178)
#1333 := (+ #582 #1310)
#1342 := (+ #19 #1333)
#1343 := (+ f7 #1342)
#1344 := (+ f6 #1343)
#1345 := (>= #1344 2::Int)
#1336 := (not #1345)
#1337 := (or #1336 #771)
#1301 := [unit-resolution #1170 #1285]: #1139
#1317 := [hypothesis]: #1345
#1316 := [th-lemma arith farkas 2 -1 -1 -1 -1 -1 1 #1317 #1302 #1173 #989 #977 #1301 #1158]: false
#1338 := [lemma #1316]: #1337
#1371 := [unit-resolution #1338 #1365]: #1336
#1372 := [unit-resolution #1259 #1366]: #962
#1347 := (or #1199 #1345 #777 #1111)
#1339 := [unit-resolution #1255 #1285]: #1231
#1332 := [th-lemma arith #1297 #1160 #1196 #1243 #1005 #1002 #1339]: #1345
#1331 := [hypothesis]: #1336
#1346 := [unit-resolution #1331 #1332]: false
#1348 := [lemma #1346]: #1347
#1373 := [unit-resolution #1348 #1372 #1362 #1371]: #1111
[unit-resolution #1277 #1373 #1370]: false
unsat
c04d38458726eb1b2cafd52bd3881d6f8160666f 24 0
#2 := false
#8 := (exists (vars (?v0 Int)) false)
#9 := (not #8)
#10 := (not #9)
#45 := (iff #10 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#38 := (iff #9 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 false)
#32 := [elim-unused]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #10
[mp #30 #46]: false
unsat
b7e68d81e2b1e168216a793b1d4c3fb61e54a4fa 24 0
#2 := false
#8 := (exists (vars (?v0 Real)) false)
#9 := (not #8)
#10 := (not #9)
#45 := (iff #10 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#38 := (iff #9 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 false)
#32 := [elim-unused]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #10
[mp #30 #46]: false
unsat
091ba9e3776453f72e577cca020359bfc2bbb1a8 1 0
unsat
6b48d925e625c5baa918d61afc02b3d6fa4e46f8 1 0
unsat
7b03d36f70c1cb511c7ddbbd8c6bb360b0e823ac 1 0
unsat
770827669678f8e68bf300baf101a56cec1c8d6b 73 0
#2 := false
#9 := 0::Int
#12 := 1::Int
#151 := (= 1::Int 0::Int)
#153 := (iff #151 false)
#154 := [rewrite]: #153
decl ?v0!1 :: Int
#57 := ?v0!1
#53 := (= ?v0!1 0::Int)
decl ?v1!0 :: Int
#56 := ?v1!0
#51 := (= ?v1!0 1::Int)
#71 := (and #51 #53)
#77 := (= ?v1!0 ?v0!1)
#80 := (not #77)
#74 := (not #71)
#83 := (or #74 #80)
#86 := (not #83)
#58 := (= ?v0!1 ?v1!0)
#59 := (not #58)
#60 := (and #53 #51)
#61 := (not #60)
#62 := (or #61 #59)
#63 := (not #62)
#87 := (iff #63 #86)
#84 := (iff #62 #83)
#81 := (iff #59 #80)
#78 := (iff #58 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#75 := (iff #61 #74)
#72 := (iff #60 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#85 := [monotonicity #76 #82]: #84
#88 := [monotonicity #85]: #87
#11 := (:var 0 Int)
#8 := (:var 1 Int)
#15 := (= #8 #11)
#16 := (not #15)
#13 := (= #11 1::Int)
#10 := (= #8 0::Int)
#14 := (and #10 #13)
#40 := (not #14)
#41 := (or #40 #16)
#44 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#47 := (not #44)
#64 := (~ #47 #63)
#65 := [sk]: #64
#17 := (implies #14 #16)
#18 := (forall (vars (?v0 Int) (?v1 Int)) #17)
#19 := (not #18)
#48 := (iff #19 #47)
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#43 := [rewrite]: #42
#46 := [quant-intro #43]: #45
#49 := [monotonicity #46]: #48
#39 := [asserted]: #19
#52 := [mp #39 #49]: #47
#68 := [mp~ #52 #65]: #63
#69 := [mp #68 #88]: #86
#70 := [not-or-elim #69]: #71
#90 := [and-elim #70]: #53
#149 := (= 1::Int ?v0!1)
#91 := [not-or-elim #69]: #77
#147 := (= 1::Int ?v1!0)
#89 := [and-elim #70]: #51
#148 := [symm #89]: #147
#150 := [trans #148 #91]: #149
#152 := [trans #150 #90]: #151
[mp #152 #154]: false
unsat
2d33526ae6f55fa8bf28af8a491289a10023ebc3 82 0
#2 := false
#9 := (:var 0 Int)
#11 := 0::Int
#13 := (<= 0::Int #9)
#12 := (< #9 0::Int)
#14 := (or #12 #13)
#8 := (:var 1 Int)
#10 := (< #8 #9)
#15 := (implies #10 #14)
#16 := (forall (vars (?v1 Int)) #15)
#17 := (exists (vars (?v0 Int)) #16)
#18 := (not #17)
#103 := (iff #18 false)
#39 := (not #10)
#40 := (or #39 #14)
#43 := (forall (vars (?v1 Int)) #40)
#46 := (exists (vars (?v0 Int)) #43)
#49 := (not #46)
#101 := (iff #49 false)
#1 := true
#96 := (not true)
#99 := (iff #96 false)
#100 := [rewrite]: #99
#97 := (iff #49 #96)
#94 := (iff #46 true)
#89 := (exists (vars (?v0 Int)) true)
#92 := (iff #89 true)
#93 := [elim-unused]: #92
#90 := (iff #46 #89)
#87 := (iff #43 true)
#82 := (forall (vars (?v1 Int)) true)
#85 := (iff #82 true)
#86 := [elim-unused]: #85
#83 := (iff #43 #82)
#80 := (iff #40 true)
#54 := (>= #9 0::Int)
#52 := (not #54)
#72 := (or #52 #54)
#58 := -1::Int
#61 := (* -1::Int #9)
#62 := (+ #8 #61)
#60 := (>= #62 0::Int)
#75 := (or #60 #72)
#78 := (iff #75 true)
#79 := [rewrite]: #78
#76 := (iff #40 #75)
#73 := (iff #14 #72)
#56 := (iff #13 #54)
#57 := [rewrite]: #56
#53 := (iff #12 #52)
#55 := [rewrite]: #53
#74 := [monotonicity #55 #57]: #73
#70 := (iff #39 #60)
#59 := (not #60)
#65 := (not #59)
#68 := (iff #65 #60)
#69 := [rewrite]: #68
#66 := (iff #39 #65)
#63 := (iff #10 #59)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#77 := [monotonicity #71 #74]: #76
#81 := [trans #77 #79]: #80
#84 := [quant-intro #81]: #83
#88 := [trans #84 #86]: #87
#91 := [quant-intro #88]: #90
#95 := [trans #91 #93]: #94
#98 := [monotonicity #95]: #97
#102 := [trans #98 #100]: #101
#50 := (iff #18 #49)
#47 := (iff #17 #46)
#44 := (iff #16 #43)
#41 := (iff #15 #40)
#42 := [rewrite]: #41
#45 := [quant-intro #42]: #44
#48 := [quant-intro #45]: #47
#51 := [monotonicity #48]: #50
#104 := [trans #51 #102]: #103
#38 := [asserted]: #18
[mp #38 #104]: false
unsat
faa0ca9568a00467876bf060199376e2ca905359 78 0
#2 := false
#9 := (:var 0 Int)
#11 := 2::Int
#15 := (* 2::Int #9)
#13 := 1::Int
#8 := (:var 1 Int)
#12 := (* 2::Int #8)
#14 := (+ #12 1::Int)
#16 := (< #14 #15)
#10 := (< #8 #9)
#17 := (implies #10 #16)
#18 := (forall (vars (?v0 Int) (?v1 Int)) #17)
#19 := (not #18)
#99 := (iff #19 false)
#40 := (+ 1::Int #12)
#43 := (< #40 #15)
#49 := (not #10)
#50 := (or #49 #43)
#55 := (forall (vars (?v0 Int) (?v1 Int)) #50)
#58 := (not #55)
#97 := (iff #58 false)
#1 := true
#92 := (not true)
#95 := (iff #92 false)
#96 := [rewrite]: #95
#93 := (iff #58 #92)
#90 := (iff #55 true)
#85 := (forall (vars (?v0 Int) (?v1 Int)) true)
#88 := (iff #85 true)
#89 := [elim-unused]: #88
#86 := (iff #55 #85)
#83 := (iff #50 true)
#63 := 0::Int
#61 := -1::Int
#65 := (* -1::Int #9)
#66 := (+ #8 #65)
#64 := (>= #66 0::Int)
#62 := (not #64)
#77 := (or #64 #62)
#81 := (iff #77 true)
#82 := [rewrite]: #81
#79 := (iff #50 #77)
#78 := (iff #43 #62)
#76 := [rewrite]: #78
#74 := (iff #49 #64)
#69 := (not #62)
#72 := (iff #69 #64)
#73 := [rewrite]: #72
#70 := (iff #49 #69)
#67 := (iff #10 #62)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#80 := [monotonicity #75 #76]: #79
#84 := [trans #80 #82]: #83
#87 := [quant-intro #84]: #86
#91 := [trans #87 #89]: #90
#94 := [monotonicity #91]: #93
#98 := [trans #94 #96]: #97
#59 := (iff #19 #58)
#56 := (iff #18 #55)
#53 := (iff #17 #50)
#46 := (implies #10 #43)
#51 := (iff #46 #50)
#52 := [rewrite]: #51
#47 := (iff #17 #46)
#44 := (iff #16 #43)
#41 := (= #14 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#54 := [trans #48 #52]: #53
#57 := [quant-intro #54]: #56
#60 := [monotonicity #57]: #59
#100 := [trans #60 #98]: #99
#39 := [asserted]: #19
[mp #39 #100]: false
unsat
05a0d5d1100f50948c093c944115de9816b9e0d9 61 0
#2 := false
#13 := (:var 0 Int)
#8 := 2::Int
#14 := (* 2::Int #13)
#11 := 1::Int
#9 := (:var 1 Int)
#10 := (* 2::Int #9)
#12 := (+ #10 1::Int)
#15 := (= #12 #14)
#16 := (not #15)
#17 := (forall (vars (?v0 Int) (?v1 Int)) #16)
#18 := (not #17)
#82 := (iff #18 false)
#39 := (+ 1::Int #10)
#45 := (= #14 #39)
#50 := (not #45)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #50)
#56 := (not #53)
#80 := (iff #56 false)
#1 := true
#75 := (not true)
#78 := (iff #75 false)
#79 := [rewrite]: #78
#76 := (iff #56 #75)
#73 := (iff #53 true)
#68 := (forall (vars (?v0 Int) (?v1 Int)) true)
#71 := (iff #68 true)
#72 := [elim-unused]: #71
#69 := (iff #53 #68)
#66 := (iff #50 true)
#59 := (not false)
#64 := (iff #59 true)
#65 := [rewrite]: #64
#60 := (iff #50 #59)
#61 := (iff #45 false)
#62 := [rewrite]: #61
#63 := [monotonicity #62]: #60
#67 := [trans #63 #65]: #66
#70 := [quant-intro #67]: #69
#74 := [trans #70 #72]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#42 := (= #39 #14)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #15 #42)
#40 := (= #12 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#49 := [trans #44 #47]: #48
#52 := [monotonicity #49]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #55]: #57
#83 := [trans #58 #81]: #82
#38 := [asserted]: #18
[mp #38 #83]: false
unsat
cb31e6f6a1ecdcd5cb5be0830fe96dcd6a225db2 111 0
#2 := false
#8 := 2::Int
decl ?v0!1 :: Int
#95 := ?v0!1
decl ?v1!0 :: Int
#94 := ?v1!0
#109 := (+ ?v1!0 ?v0!1)
#115 := (>= #109 2::Int)
#121 := (<= #109 2::Int)
#124 := (not #121)
#118 := (not #115)
#112 := (= #109 2::Int)
#127 := (or #112 #118 #124)
#130 := (not #127)
#96 := (+ ?v0!1 ?v1!0)
#97 := (<= #96 2::Int)
#90 := (not #97)
#91 := (>= #96 2::Int)
#98 := (not #91)
#99 := (= #96 2::Int)
#100 := (or #99 #98 #90)
#101 := (not #100)
#131 := (iff #101 #130)
#128 := (iff #100 #127)
#125 := (iff #90 #124)
#122 := (iff #97 #121)
#110 := (= #96 #109)
#111 := [rewrite]: #110
#123 := [monotonicity #111]: #122
#126 := [monotonicity #123]: #125
#119 := (iff #98 #118)
#116 := (iff #91 #115)
#117 := [monotonicity #111]: #116
#120 := [monotonicity #117]: #119
#113 := (iff #99 #112)
#114 := [monotonicity #111]: #113
#129 := [monotonicity #114 #120 #126]: #128
#132 := [monotonicity #129]: #131
#10 := (:var 0 Int)
#9 := (:var 1 Int)
#11 := (+ #9 #10)
#64 := (<= #11 2::Int)
#66 := (not #64)
#62 := (>= #11 2::Int)
#59 := (not #62)
#13 := (= #11 2::Int)
#75 := (or #13 #59 #66)
#80 := (forall (vars (?v0 Int) (?v1 Int)) #75)
#83 := (not #80)
#102 := (~ #83 #101)
#103 := [sk]: #102
#14 := (< #11 2::Int)
#15 := (or #13 #14)
#12 := (< 2::Int #11)
#16 := (or #12 #15)
#17 := (forall (vars (?v0 Int) (?v1 Int)) #16)
#18 := (not #17)
#86 := (iff #18 #83)
#39 := (= 2::Int #11)
#45 := (or #14 #39)
#50 := (or #12 #45)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #50)
#56 := (not #53)
#84 := (iff #56 #83)
#81 := (iff #53 #80)
#78 := (iff #50 #75)
#69 := (or #59 #13)
#72 := (or #66 #69)
#76 := (iff #72 #75)
#77 := [rewrite]: #76
#73 := (iff #50 #72)
#70 := (iff #45 #69)
#63 := (iff #39 #13)
#65 := [rewrite]: #63
#61 := (iff #14 #59)
#60 := [rewrite]: #61
#71 := [monotonicity #60 #65]: #70
#67 := (iff #12 #66)
#68 := [rewrite]: #67
#74 := [monotonicity #68 #71]: #73
#79 := [trans #74 #77]: #78
#82 := [quant-intro #79]: #81
#85 := [monotonicity #82]: #84
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#42 := (or #39 #14)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #15 #42)
#40 := (iff #13 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#49 := [trans #44 #47]: #48
#52 := [monotonicity #49]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #55]: #57
#87 := [trans #58 #85]: #86
#38 := [asserted]: #18
#88 := [mp #38 #87]: #83
#106 := [mp~ #88 #103]: #101
#107 := [mp #106 #132]: #130
#134 := [not-or-elim #107]: #115
#108 := (not #112)
#133 := [not-or-elim #107]: #108
#135 := [not-or-elim #107]: #121
#191 := (or #112 #124 #118)
#192 := [th-lemma arith triangle-eq]: #191
[unit-resolution #192 #135 #133 #134]: false
unsat
14c5d2b27aee290cf4e7c2c280797baa69660461 89 0
#2 := false
#8 := 0::Int
decl ?v0!0 :: Int
#88 := ?v0!0
#85 := (<= ?v0!0 0::Int)
#154 := (not #85)
#163 := [hypothesis]: #85
#11 := 1::Int
#91 := (>= ?v0!0 1::Int)
#84 := (not #91)
#164 := (or #84 #154)
#165 := [th-lemma arith farkas 1 1]: #164
#166 := [unit-resolution #165 #163]: #84
#167 := (or #154 #91)
#57 := -1::Int
#89 := (<= ?v0!0 -1::Int)
#90 := (not #89)
#92 := (ite #85 #84 #90)
#93 := (not #92)
#9 := (:var 0 Int)
#58 := (<= #9 -1::Int)
#59 := (not #58)
#63 := (>= #9 1::Int)
#62 := (not #63)
#53 := (<= #9 0::Int)
#69 := (ite #53 #62 #59)
#74 := (forall (vars (?v0 Int)) #69)
#77 := (not #74)
#94 := (~ #77 #93)
#95 := [sk]: #94
#14 := (< #9 1::Int)
#12 := (+ #9 1::Int)
#13 := (< 0::Int #12)
#10 := (< 0::Int #9)
#15 := (ite #10 #13 #14)
#16 := (forall (vars (?v0 Int)) #15)
#17 := (not #16)
#80 := (iff #17 #77)
#38 := (+ 1::Int #9)
#41 := (< 0::Int #38)
#44 := (ite #10 #41 #14)
#47 := (forall (vars (?v0 Int)) #44)
#50 := (not #47)
#78 := (iff #50 #77)
#75 := (iff #47 #74)
#72 := (iff #44 #69)
#54 := (not #53)
#66 := (ite #54 #59 #62)
#70 := (iff #66 #69)
#71 := [rewrite]: #70
#67 := (iff #44 #66)
#64 := (iff #14 #62)
#65 := [rewrite]: #64
#60 := (iff #41 #59)
#61 := [rewrite]: #60
#55 := (iff #10 #54)
#56 := [rewrite]: #55
#68 := [monotonicity #56 #61 #65]: #67
#73 := [trans #68 #71]: #72
#76 := [quant-intro #73]: #75
#79 := [monotonicity #76]: #78
#51 := (iff #17 #50)
#48 := (iff #16 #47)
#45 := (iff #15 #44)
#42 := (iff #13 #41)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#49 := [quant-intro #46]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#37 := [asserted]: #17
#82 := [mp #37 #81]: #77
#98 := [mp~ #82 #95]: #93
#159 := (or #92 #154 #91)
#160 := [def-axiom]: #159
#168 := [unit-resolution #160 #98]: #167
#169 := [unit-resolution #168 #166 #163]: false
#170 := [lemma #169]: #154
#171 := (or #90 #85)
#172 := [th-lemma arith farkas 1 1]: #171
#173 := [unit-resolution #172 #170]: #90
#174 := (or #85 #89)
#161 := (or #92 #85 #89)
#162 := [def-axiom]: #161
#175 := [unit-resolution #162 #98]: #174
[unit-resolution #175 #173 #170]: false
unsat
74ffecf155cc435ac1a2bcfe873a84647e4ce6b1 83 2
#2 := false
#9 := 0::Int
#8 := (:var 0 Int)
#50 := (<= #8 0::Int)
#51 := (not #50)
#48 := (>= #8 0::Int)
#46 := (not #48)
#54 := (or #46 #51)
#57 := (forall (vars (?v0 Int)) #54)
#190 := (not #57)
#126 := (<= 0::Int 0::Int)
#212 := (not #126)
#127 := (>= 0::Int 0::Int)
#213 := (not #127)
#214 := (or #213 #212)
#195 := (or #190 #214)
#180 := (iff #195 #190)
#191 := (or #190 false)
#517 := (iff #191 #190)
#179 := [rewrite]: #517
#533 := (iff #195 #191)
#541 := (iff #214 false)
#537 := (or false false)
#540 := (iff #537 false)
#535 := [rewrite]: #540
#538 := (iff #214 #537)
#203 := (iff #212 false)
#1 := true
#217 := (not true)
#215 := (iff #217 false)
#219 := [rewrite]: #215
#323 := (iff #212 #217)
#536 := (iff #126 true)
#192 := [rewrite]: #536
#530 := [monotonicity #192]: #323
#204 := [trans #530 #219]: #203
#198 := (iff #213 false)
#145 := (iff #213 #217)
#205 := (iff #127 true)
#216 := [rewrite]: #205
#218 := [monotonicity #216]: #145
#534 := [trans #218 #219]: #198
#539 := [monotonicity #534 #204]: #538
#531 := [trans #539 #535]: #541
#175 := [monotonicity #531]: #533
#181 := [trans #175 #179]: #180
#532 := [quant-inst #9]: #195
#182 := [mp #532 #181]: #190
#70 := (~ #57 #57)
#68 := (~ #54 #54)
#69 := [refl]: #68
#71 := [nnf-pos #69]: #70
#11 := (< 0::Int #8)
#10 := (< #8 0::Int)
#12 := (or #10 #11)
#13 := (forall (vars (?v0 Int)) #12)
#14 := (ite #13 false true)
#15 := (not #14)
#60 := (iff #15 #57)
#58 := (iff #13 #57)
#55 := (iff #12 #54)
#52 := (iff #11 #51)
#53 := [rewrite]: #52
#47 := (iff #10 #46)
#49 := [rewrite]: #47
#56 := [monotonicity #49 #53]: #55
#59 := [quant-intro #56]: #58
#44 := (iff #15 #13)
#36 := (not #13)
#39 := (not #36)
#42 := (iff #39 #13)
#43 := [rewrite]: #42
#40 := (iff #15 #39)
#37 := (iff #14 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#61 := [trans #45 #59]: #60
#35 := [asserted]: #15
#62 := [mp #35 #61]: #57
#64 := [mp~ #62 #71]: #57
[unit-resolution #64 #182]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!10)

8602f0cbb8a6b885b19d4424fa42859ac2937970 180 2
#2 := false
#8 := 0::Int
#9 := (:var 0 Int)
#56 := (<= #9 0::Int)
#57 := (not #56)
#53 := (>= #9 0::Int)
#52 := (not #53)
#60 := (or #52 #57)
#63 := (forall (vars (?v0 Int)) #60)
#96 := (not #63)
#271 := (<= 0::Int 0::Int)
#276 := (not #271)
#612 := (>= 0::Int 0::Int)
#272 := (not #612)
#613 := (or #272 #276)
#596 := (or #96 #613)
#592 := (iff #596 #96)
#319 := (or #96 false)
#215 := (iff #319 #96)
#591 := [rewrite]: #215
#320 := (iff #596 #319)
#609 := (iff #613 false)
#607 := (or false false)
#608 := (iff #607 false)
#606 := [rewrite]: #608
#247 := (iff #613 #607)
#242 := (iff #276 false)
#1 := true
#260 := (not true)
#263 := (iff #260 false)
#599 := [rewrite]: #263
#598 := (iff #276 #260)
#602 := (iff #271 true)
#603 := [rewrite]: #602
#604 := [monotonicity #603]: #598
#605 := [trans #604 #599]: #242
#600 := (iff #272 false)
#261 := (iff #272 #260)
#256 := (iff #612 true)
#597 := [rewrite]: #256
#262 := [monotonicity #597]: #261
#601 := [trans #262 #599]: #600
#248 := [monotonicity #601 #605]: #247
#595 := [trans #248 #606]: #609
#321 := [monotonicity #595]: #320
#314 := [trans #321 #591]: #592
#318 := [quant-inst #8]: #596
#315 := [mp #318 #314]: #96
decl z3name!0 :: bool
#93 := z3name!0
#16 := 3::Int
#40 := -1::Int
#100 := (ite z3name!0 -1::Int 3::Int)
#298 := (= #100 3::Int)
#618 := (not #298)
#616 := (>= #100 3::Int)
#273 := (not #616)
#103 := (<= #100 0::Int)
#66 := (ite #63 -1::Int 3::Int)
#72 := (<= #66 0::Int)
#104 := (~ #72 #103)
#101 := (= #66 #100)
#98 := (~ #63 z3name!0)
#89 := (or z3name!0 #96)
#94 := (not z3name!0)
#95 := (or #94 #63)
#90 := (and #95 #89)
#97 := [intro-def]: #90
#99 := [apply-def #97]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#14 := 1::Int
#15 := (- 1::Int)
#11 := (< 0::Int #9)
#10 := (< #9 0::Int)
#12 := (or #10 #11)
#13 := (forall (vars (?v0 Int)) #12)
#17 := (ite #13 #15 3::Int)
#18 := (< 0::Int #17)
#19 := (not #18)
#85 := (iff #19 #72)
#43 := (ite #13 -1::Int 3::Int)
#46 := (< 0::Int #43)
#49 := (not #46)
#83 := (iff #49 #72)
#73 := (not #72)
#78 := (not #73)
#81 := (iff #78 #72)
#82 := [rewrite]: #81
#79 := (iff #49 #78)
#76 := (iff #46 #73)
#69 := (< 0::Int #66)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #46 #69)
#67 := (= #43 #66)
#64 := (iff #13 #63)
#61 := (iff #12 #60)
#58 := (iff #11 #57)
#59 := [rewrite]: #58
#54 := (iff #10 #52)
#55 := [rewrite]: #54
#62 := [monotonicity #55 #59]: #61
#65 := [quant-intro #62]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#77 := [trans #71 #75]: #76
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#50 := (iff #19 #49)
#47 := (iff #18 #46)
#44 := (= #17 #43)
#41 := (= #15 -1::Int)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#86 := [trans #51 #84]: #85
#39 := [asserted]: #19
#87 := [mp #39 #86]: #72
#134 := [mp~ #87 #105]: #103
#403 := (not #103)
#610 := (or #273 #403)
#284 := [th-lemma arith farkas 1 1]: #610
#285 := [unit-resolution #284 #134]: #273
#617 := [hypothesis]: #298
#619 := (or #618 #616)
#620 := [th-lemma arith triangle-eq]: #619
#615 := [unit-resolution #620 #617 #285]: false
#621 := [lemma #615]: #618
#300 := (or z3name!0 #298)
#279 := [def-axiom]: #300
#589 := [unit-resolution #279 #621]: z3name!0
#137 := (or #63 #94)
decl ?v0!1 :: Int
#116 := ?v0!1
#119 := (>= ?v0!1 0::Int)
#120 := (not #119)
#117 := (<= ?v0!1 0::Int)
#118 := (not #117)
#140 := (or #118 #120)
#143 := (not #140)
#146 := (or z3name!0 #143)
#149 := (and #137 #146)
#121 := (or #120 #118)
#122 := (not #121)
#127 := (or z3name!0 #122)
#130 := (and #95 #127)
#150 := (iff #130 #149)
#147 := (iff #127 #146)
#144 := (iff #122 #143)
#141 := (iff #121 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#138 := (iff #95 #137)
#139 := [rewrite]: #138
#151 := [monotonicity #139 #148]: #150
#131 := (~ #90 #130)
#128 := (~ #89 #127)
#123 := (~ #96 #122)
#124 := [sk]: #123
#114 := (~ z3name!0 z3name!0)
#115 := [refl]: #114
#129 := [monotonicity #115 #124]: #128
#112 := (~ #95 #95)
#110 := (~ #63 #63)
#108 := (~ #60 #60)
#109 := [refl]: #108
#111 := [nnf-pos #109]: #110
#106 := (~ #94 #94)
#107 := [refl]: #106
#113 := [monotonicity #107 #111]: #112
#132 := [monotonicity #113 #129]: #131
#133 := [mp~ #97 #132]: #130
#135 := [mp #133 #151]: #149
#136 := [and-elim #135]: #137
#593 := [unit-resolution #136 #589]: #63
[unit-resolution #593 #315]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!10)

2f9041ab2507988941f04b373596319a25dbff04 68 0
#2 := false
#16 := 1::Int
#13 := (:var 1 Int)
#11 := 6::Int
#12 := (- 6::Int)
#14 := (* #12 #13)
#9 := (:var 2 Int)
#8 := 4::Int
#10 := (* 4::Int #9)
#15 := (+ #10 #14)
#17 := (= #15 1::Int)
#18 := (exists (vars (?v0 Int) (?v1 Int) (?v2 Int)) #17)
#19 := (not #18)
#20 := (not #19)
#90 := (iff #20 false)
#61 := (:var 0 Int)
#41 := -6::Int
#62 := (* -6::Int #61)
#63 := (* 4::Int #13)
#64 := (+ #63 #62)
#65 := (= 1::Int #64)
#66 := (exists (vars (?v0 Int) (?v1 Int)) #65)
#88 := (iff #66 false)
#84 := (exists (vars (?v0 Int) (?v1 Int)) false)
#86 := (iff #84 false)
#87 := [elim-unused]: #86
#85 := (iff #66 #84)
#81 := (iff #65 false)
#82 := [rewrite]: #81
#83 := [quant-intro #82]: #85
#89 := [trans #83 #87]: #88
#79 := (iff #20 #66)
#71 := (not #66)
#74 := (not #71)
#77 := (iff #74 #66)
#78 := [rewrite]: #77
#75 := (iff #20 #74)
#72 := (iff #19 #71)
#69 := (iff #18 #66)
#44 := (* -6::Int #13)
#47 := (+ #10 #44)
#53 := (= 1::Int #47)
#58 := (exists (vars (?v0 Int) (?v1 Int) (?v2 Int)) #53)
#67 := (iff #58 #66)
#68 := [elim-unused]: #67
#59 := (iff #18 #58)
#56 := (iff #17 #53)
#50 := (= #47 1::Int)
#54 := (iff #50 #53)
#55 := [rewrite]: #54
#51 := (iff #17 #50)
#48 := (= #15 #47)
#45 := (= #14 #44)
#42 := (= #12 -6::Int)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#57 := [trans #52 #55]: #56
#60 := [quant-intro #57]: #59
#70 := [trans #60 #68]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#91 := [trans #80 #89]: #90
#40 := [asserted]: #20
[mp #40 #91]: false
unsat
e7e4f914c64da4bb9f5ff1d016939e644d6e9497 107 0
#2 := false
#8 := 0::Int
decl ?v1!1 :: Int
#93 := ?v1!1
decl ?v2!0 :: Int
#92 := ?v2!0
#116 := (+ ?v2!0 ?v1!1)
#119 := (<= #116 0::Int)
#122 := (not #119)
#97 := (<= ?v1!1 0::Int)
#98 := (not #97)
#89 := (<= ?v2!0 0::Int)
#96 := (not #89)
#110 := (and #96 #98)
#113 := (not #110)
#125 := (or #113 #122)
#128 := (not #125)
#94 := (+ ?v1!1 ?v2!0)
#95 := (<= #94 0::Int)
#88 := (not #95)
#99 := (and #98 #96)
#100 := (not #99)
#101 := (or #100 #88)
#102 := (not #101)
#129 := (iff #102 #128)
#126 := (iff #101 #125)
#123 := (iff #88 #122)
#120 := (iff #95 #119)
#117 := (= #94 #116)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#124 := [monotonicity #121]: #123
#114 := (iff #100 #113)
#111 := (iff #99 #110)
#112 := [rewrite]: #111
#115 := [monotonicity #112]: #114
#127 := [monotonicity #115 #124]: #126
#130 := [monotonicity #127]: #129
#11 := (:var 0 Int)
#9 := (:var 1 Int)
#14 := (+ #9 #11)
#71 := (<= #14 0::Int)
#72 := (not #71)
#61 := (<= #11 0::Int)
#62 := (not #61)
#57 := (<= #9 0::Int)
#58 := (not #57)
#65 := (and #58 #62)
#68 := (not #65)
#75 := (or #68 #72)
#78 := (forall (vars (?v1 Int) (?v2 Int)) #75)
#81 := (not #78)
#103 := (~ #81 #102)
#104 := [sk]: #103
#15 := (< 0::Int #14)
#12 := (< 0::Int #11)
#10 := (< 0::Int #9)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (forall (vars (?v1 Int) (?v2 Int)) #16)
#18 := (exists (vars (?v0 Int)) #17)
#19 := (not #18)
#84 := (iff #19 #81)
#40 := (not #13)
#41 := (or #40 #15)
#44 := (forall (vars (?v1 Int) (?v2 Int)) #41)
#54 := (not #44)
#82 := (iff #54 #81)
#79 := (iff #44 #78)
#76 := (iff #41 #75)
#73 := (iff #15 #72)
#74 := [rewrite]: #73
#69 := (iff #40 #68)
#66 := (iff #13 #65)
#63 := (iff #12 #62)
#64 := [rewrite]: #63
#59 := (iff #10 #58)
#60 := [rewrite]: #59
#67 := [monotonicity #60 #64]: #66
#70 := [monotonicity #67]: #69
#77 := [monotonicity #70 #74]: #76
#80 := [quant-intro #77]: #79
#83 := [monotonicity #80]: #82
#55 := (iff #19 #54)
#52 := (iff #18 #44)
#47 := (exists (vars (?v0 Int)) #44)
#50 := (iff #47 #44)
#51 := [elim-unused]: #50
#48 := (iff #18 #47)
#45 := (iff #17 #44)
#42 := (iff #16 #41)
#43 := [rewrite]: #42
#46 := [quant-intro #43]: #45
#49 := [quant-intro #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#85 := [trans #56 #83]: #84
#39 := [asserted]: #19
#86 := [mp #39 #85]: #81
#107 := [mp~ #86 #104]: #102
#108 := [mp #107 #130]: #128
#133 := [not-or-elim #108]: #119
#109 := [not-or-elim #108]: #110
#132 := [and-elim #109]: #98
#131 := [and-elim #109]: #96
[th-lemma arith farkas 1 1 1 #131 #132 #133]: false
unsat
68c837c3dabb51cfb3fa72be140feeef8d58aa35 117 0
#2 := false
#8 := 0::Int
decl ?v1!1 :: Int
#103 := ?v1!1
#106 := (<= ?v1!1 0::Int)
#107 := (not #106)
#11 := 0::Real
decl ?v2!0 :: Real
#102 := ?v2!0
#104 := (<= ?v2!0 0::Real)
#105 := (not #104)
#119 := (and #105 #107)
#122 := (not #119)
#41 := -1::Int
#100 := (<= ?v1!1 -1::Int)
#101 := (not #100)
#128 := (or #101 #122)
#133 := (not #128)
#108 := (and #107 #105)
#109 := (not #108)
#110 := (or #109 #101)
#111 := (not #110)
#134 := (iff #111 #133)
#131 := (iff #110 #128)
#125 := (or #122 #101)
#129 := (iff #125 #128)
#130 := [rewrite]: #129
#126 := (iff #110 #125)
#123 := (iff #109 #122)
#120 := (iff #108 #119)
#121 := [rewrite]: #120
#124 := [monotonicity #121]: #123
#127 := [monotonicity #124]: #126
#132 := [trans #127 #130]: #131
#135 := [monotonicity #132]: #134
#9 := (:var 1 Int)
#83 := (<= #9 -1::Int)
#84 := (not #83)
#12 := (:var 0 Real)
#73 := (<= #12 0::Real)
#74 := (not #73)
#69 := (<= #9 0::Int)
#70 := (not #69)
#77 := (and #70 #74)
#80 := (not #77)
#87 := (or #80 #84)
#90 := (forall (vars (?v1 Int) (?v2 Real)) #87)
#93 := (not #90)
#112 := (~ #93 #111)
#113 := [sk]: #112
#15 := 1::Int
#16 := (- 1::Int)
#17 := (< #16 #9)
#13 := (< 0::Real #12)
#10 := (< 0::Int #9)
#14 := (and #10 #13)
#18 := (implies #14 #17)
#19 := (forall (vars (?v1 Int) (?v2 Real)) #18)
#20 := (exists (vars (?v0 Int)) #19)
#21 := (not #20)
#96 := (iff #21 #93)
#44 := (< -1::Int #9)
#50 := (not #14)
#51 := (or #50 #44)
#56 := (forall (vars (?v1 Int) (?v2 Real)) #51)
#66 := (not #56)
#94 := (iff #66 #93)
#91 := (iff #56 #90)
#88 := (iff #51 #87)
#85 := (iff #44 #84)
#86 := [rewrite]: #85
#81 := (iff #50 #80)
#78 := (iff #14 #77)
#75 := (iff #13 #74)
#76 := [rewrite]: #75
#71 := (iff #10 #70)
#72 := [rewrite]: #71
#79 := [monotonicity #72 #76]: #78
#82 := [monotonicity #79]: #81
#89 := [monotonicity #82 #86]: #88
#92 := [quant-intro #89]: #91
#95 := [monotonicity #92]: #94
#67 := (iff #21 #66)
#64 := (iff #20 #56)
#59 := (exists (vars (?v0 Int)) #56)
#62 := (iff #59 #56)
#63 := [elim-unused]: #62
#60 := (iff #20 #59)
#57 := (iff #19 #56)
#54 := (iff #18 #51)
#47 := (implies #14 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #18 #47)
#45 := (iff #17 #44)
#42 := (= #16 -1::Int)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#58 := [quant-intro #55]: #57
#61 := [quant-intro #58]: #60
#65 := [trans #61 #63]: #64
#68 := [monotonicity #65]: #67
#97 := [trans #68 #95]: #96
#40 := [asserted]: #21
#98 := [mp #40 #97]: #93
#116 := [mp~ #98 #113]: #111
#117 := [mp #116 #135]: #133
#136 := [not-or-elim #117]: #119
#138 := [and-elim #136]: #107
#118 := [not-or-elim #117]: #100
#194 := (or #101 #106)
#195 := [th-lemma arith farkas 1 1]: #194
#196 := [unit-resolution #195 #118]: #106
[unit-resolution #196 #138]: false
unsat
111e0e11b10e3dfb46a207e5da98c171ac0c63ad 148 0
#2 := false
#152 := (not false)
#11 := 0::Int
#9 := (:var 0 Int)
#60 := (<= #9 0::Int)
#61 := (not #60)
#155 := (or #61 #152)
#158 := (not #155)
#161 := (forall (vars (?v0 Int)) #158)
#188 := (iff #161 false)
#183 := (forall (vars (?v0 Int)) false)
#186 := (iff #183 false)
#187 := [elim-unused]: #186
#184 := (iff #161 #183)
#181 := (iff #158 false)
#1 := true
#176 := (not true)
#179 := (iff #176 false)
#180 := [rewrite]: #179
#177 := (iff #158 #176)
#174 := (iff #155 true)
#169 := (or #61 true)
#172 := (iff #169 true)
#173 := [rewrite]: #172
#170 := (iff #155 #169)
#167 := (iff #152 true)
#168 := [rewrite]: #167
#171 := [monotonicity #168]: #170
#175 := [trans #171 #173]: #174
#178 := [monotonicity #175]: #177
#182 := [trans #178 #180]: #181
#185 := [quant-intro #182]: #184
#189 := [trans #185 #187]: #188
#64 := -1::Int
#65 := (* -1::Int #9)
#8 := (:var 1 Int)
#66 := (+ #8 #65)
#67 := (<= #66 0::Int)
#70 := (not #67)
#76 := (or #61 #70)
#81 := (forall (vars (?v1 Int)) #76)
#84 := (not #81)
#87 := (or #61 #84)
#113 := (not #87)
#131 := (forall (vars (?v0 Int)) #113)
#164 := (iff #131 #161)
#135 := (forall (vars (?v1 Int)) #61)
#138 := (not #135)
#141 := (or #61 #138)
#144 := (not #141)
#147 := (forall (vars (?v0 Int)) #144)
#162 := (iff #147 #161)
#163 := [rewrite]: #162
#148 := (iff #131 #147)
#149 := [rewrite]: #148
#165 := [trans #149 #163]: #164
#124 := (and #60 #81)
#127 := (forall (vars (?v0 Int)) #124)
#132 := (iff #127 #131)
#121 := (iff #124 #113)
#130 := [rewrite]: #121
#133 := [quant-intro #130]: #132
#104 := (not #61)
#112 := (and #104 #81)
#116 := (forall (vars (?v0 Int)) #112)
#128 := (iff #116 #127)
#125 := (iff #112 #124)
#122 := (iff #104 #60)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#129 := [quant-intro #126]: #128
#90 := (exists (vars (?v0 Int)) #87)
#93 := (not #90)
#117 := (~ #93 #116)
#114 := (~ #113 #112)
#109 := (not #84)
#110 := (~ #109 #81)
#101 := (~ #81 #81)
#107 := (~ #76 #76)
#100 := [refl]: #107
#108 := [nnf-pos #100]: #101
#111 := [nnf-neg #108]: #110
#105 := (~ #104 #104)
#106 := [refl]: #105
#115 := [nnf-neg #106 #111]: #114
#118 := [nnf-neg #115]: #117
#12 := (< 0::Int #9)
#10 := (<= #8 #9)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 Int)) #13)
#15 := (implies #14 #12)
#16 := (exists (vars (?v0 Int)) #15)
#17 := (not #16)
#96 := (iff #17 #93)
#38 := (not #10)
#39 := (or #38 #12)
#42 := (forall (vars (?v1 Int)) #39)
#48 := (not #42)
#49 := (or #12 #48)
#54 := (exists (vars (?v0 Int)) #49)
#57 := (not #54)
#94 := (iff #57 #93)
#91 := (iff #54 #90)
#88 := (iff #49 #87)
#85 := (iff #48 #84)
#82 := (iff #42 #81)
#79 := (iff #39 #76)
#73 := (or #70 #61)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #39 #73)
#62 := (iff #12 #61)
#63 := [rewrite]: #62
#71 := (iff #38 #70)
#68 := (iff #10 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72 #63]: #74
#80 := [trans #75 #78]: #79
#83 := [quant-intro #80]: #82
#86 := [monotonicity #83]: #85
#89 := [monotonicity #63 #86]: #88
#92 := [quant-intro #89]: #91
#95 := [monotonicity #92]: #94
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #49)
#45 := (implies #42 #12)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #15 #45)
#43 := (iff #14 #42)
#40 := (iff #13 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#56 := [quant-intro #53]: #55
#59 := [monotonicity #56]: #58
#97 := [trans #59 #95]: #96
#37 := [asserted]: #17
#98 := [mp #37 #97]: #93
#119 := [mp~ #98 #118]: #116
#120 := [mp #119 #129]: #127
#134 := [mp #120 #133]: #131
#166 := [mp #134 #165]: #161
[mp #166 #189]: false
unsat
f97f94cdf9ea1da48e107362c172b39f4b82d4a8 66 2
#2 := false
decl f3 :: Int
#9 := f3
#11 := 2::Int
#13 := (* 2::Int f3)
#8 := (:var 0 Int)
#12 := (* 2::Int #8)
#14 := (< #12 #13)
#10 := (< #8 f3)
#15 := (implies #10 #14)
#16 := (forall (vars (?v0 Int)) #15)
#17 := (not #16)
#86 := (iff #17 false)
#38 := (not #10)
#39 := (or #38 #14)
#42 := (forall (vars (?v0 Int)) #39)
#45 := (not #42)
#84 := (iff #45 false)
#1 := true
#79 := (not true)
#82 := (iff #79 false)
#83 := [rewrite]: #82
#80 := (iff #45 #79)
#77 := (iff #42 true)
#72 := (forall (vars (?v0 Int)) true)
#75 := (iff #72 true)
#76 := [elim-unused]: #75
#73 := (iff #42 #72)
#70 := (iff #39 true)
#50 := 0::Int
#48 := -1::Int
#52 := (* -1::Int f3)
#53 := (+ #8 #52)
#51 := (>= #53 0::Int)
#49 := (not #51)
#64 := (or #51 #49)
#68 := (iff #64 true)
#69 := [rewrite]: #68
#66 := (iff #39 #64)
#65 := (iff #14 #49)
#63 := [rewrite]: #65
#61 := (iff #38 #51)
#56 := (not #49)
#59 := (iff #56 #51)
#60 := [rewrite]: #59
#57 := (iff #38 #56)
#54 := (iff #10 #49)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#67 := [monotonicity #62 #63]: #66
#71 := [trans #67 #69]: #70
#74 := [quant-intro #71]: #73
#78 := [trans #74 #76]: #77
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#46 := (iff #17 #45)
#43 := (iff #16 #42)
#40 := (iff #15 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#47 := [monotonicity #44]: #46
#87 := [trans #47 #85]: #86
#37 := [asserted]: #17
[mp #37 #87]: false
unsat
ERROR: line 11 column 83: invalid pattern.

1953a39a3cc38daf2fde4846aa1d5cbc2ff95785 60 0
#2 := false
#8 := 0::Int
decl ?v1!0 :: Int
#67 := ?v1!0
#70 := (<= ?v1!0 0::Int)
#63 := (not #70)
#11 := 1::Int
#68 := (>= ?v1!0 1::Int)
#69 := (not #68)
#79 := (or #69 #63)
#82 := (not #79)
#64 := (or #63 #69)
#71 := (not #64)
#83 := (iff #71 #82)
#80 := (iff #64 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#9 := (:var 0 Int)
#48 := (>= #9 1::Int)
#46 := (not #48)
#42 := (<= #9 0::Int)
#43 := (not #42)
#50 := (or #43 #46)
#53 := (forall (vars (?v1 Int)) #50)
#56 := (not #53)
#72 := (~ #56 #71)
#73 := [sk]: #72
#12 := (< #9 1::Int)
#10 := (< 0::Int #9)
#13 := (or #10 #12)
#14 := (forall (vars (?v0 Int) (?v1 Int)) #13)
#15 := (not #14)
#59 := (iff #15 #56)
#36 := (forall (vars (?v1 Int)) #13)
#39 := (not #36)
#57 := (iff #39 #56)
#54 := (iff #36 #53)
#51 := (iff #13 #50)
#47 := (iff #12 #46)
#49 := [rewrite]: #47
#44 := (iff #10 #43)
#45 := [rewrite]: #44
#52 := [monotonicity #45 #49]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #55]: #57
#40 := (iff #15 #39)
#37 := (iff #14 #36)
#38 := [elim-unused]: #37
#41 := [monotonicity #38]: #40
#60 := [trans #41 #58]: #59
#35 := [asserted]: #15
#61 := [mp #35 #60]: #56
#76 := [mp~ #61 #73]: #71
#77 := [mp #76 #84]: #82
#85 := [not-or-elim #77]: #70
#78 := [not-or-elim #77]: #68
#141 := [th-lemma arith farkas 1 1]: #64
#142 := [unit-resolution #141 #78]: #63
[unit-resolution #142 #85]: false
unsat
8f616b17d0807409dc26bfdf9593c5fcd06fb7e7 1 0
unsat
3eb9cf11ee8774c9212c37c265e7552f3b8f24a9 75 0
#2 := false
#10 := 1::Int
decl f5 :: Int
#12 := f5
#16 := (+ f5 1::Int)
decl f3 :: Int
#8 := f3
#17 := (* f3 #16)
decl f4 :: Int
#9 := f4
#15 := (* f3 f4)
#18 := (+ #15 #17)
#11 := (+ f4 1::Int)
#13 := (+ #11 f5)
#14 := (* f3 #13)
#19 := (= #14 #18)
#20 := (not #19)
#93 := (iff #20 false)
#1 := true
#88 := (not true)
#91 := (iff #88 false)
#92 := [rewrite]: #91
#89 := (iff #20 #88)
#86 := (iff #19 true)
#56 := (* f3 f5)
#57 := (+ #15 #56)
#58 := (+ f3 #57)
#81 := (= #58 #58)
#84 := (iff #81 true)
#85 := [rewrite]: #84
#82 := (iff #19 #81)
#79 := (= #18 #58)
#69 := (+ f3 #56)
#74 := (+ #15 #69)
#77 := (= #74 #58)
#78 := [rewrite]: #77
#75 := (= #18 #74)
#72 := (= #17 #69)
#63 := (+ 1::Int f5)
#66 := (* f3 #63)
#70 := (= #66 #69)
#71 := [rewrite]: #70
#67 := (= #17 #66)
#64 := (= #16 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#61 := (= #14 #58)
#47 := (+ f4 f5)
#48 := (+ 1::Int #47)
#53 := (* f3 #48)
#59 := (= #53 #58)
#60 := [rewrite]: #59
#54 := (= #14 #53)
#51 := (= #13 #48)
#41 := (+ 1::Int f4)
#44 := (+ #41 f5)
#49 := (= #44 #48)
#50 := [rewrite]: #49
#45 := (= #13 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#62 := [trans #55 #60]: #61
#83 := [monotonicity #62 #80]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#40 := [asserted]: #20
[mp #40 #94]: false
unsat
741a564e40e4b6610d1d47bdab19a223e004482a 62 0
#2 := false
decl f4 :: Real
#10 := f4
decl f3 :: Real
#8 := f3
#16 := 2::Real
#17 := (* 2::Real f3)
#18 := (* #17 f4)
#9 := 1::Real
#13 := (- 1::Real f4)
#14 := (* f3 #13)
#11 := (+ 1::Real f4)
#12 := (* f3 #11)
#15 := (- #12 #14)
#19 := (= #15 #18)
#20 := (not #19)
#81 := (iff #20 false)
#1 := true
#76 := (not true)
#79 := (iff #76 false)
#80 := [rewrite]: #79
#77 := (iff #20 #76)
#74 := (iff #19 true)
#41 := (* f3 f4)
#63 := (* 2::Real #41)
#69 := (= #63 #63)
#72 := (iff #69 true)
#73 := [rewrite]: #72
#70 := (iff #19 #69)
#67 := (= #18 #63)
#68 := [rewrite]: #67
#65 := (= #15 #63)
#45 := -1::Real
#53 := (* -1::Real #41)
#54 := (+ f3 #53)
#42 := (+ f3 #41)
#59 := (- #42 #54)
#62 := (= #59 #63)
#64 := [rewrite]: #62
#60 := (= #15 #59)
#57 := (= #14 #54)
#46 := (* -1::Real f4)
#47 := (+ 1::Real #46)
#50 := (* f3 #47)
#55 := (= #50 #54)
#56 := [rewrite]: #55
#51 := (= #14 #50)
#48 := (= #13 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#58 := [trans #52 #56]: #57
#43 := (= #12 #42)
#44 := [rewrite]: #43
#61 := [monotonicity #44 #58]: #60
#66 := [trans #61 #64]: #65
#71 := [monotonicity #66 #68]: #70
#75 := [trans #71 #73]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#40 := [asserted]: #20
[mp #40 #82]: false
unsat
06d1bd5308956fb019ef1c09bf97c6326d872fd6 141 0
#2 := false
decl f6 :: Int
#13 := f6
decl f7 :: Int
#17 := f7
decl f5 :: Int
#12 := f5
#28 := (+ f5 f7)
#29 := (+ #28 f6)
decl f4 :: Int
#10 := f4
#9 := 1::Int
#11 := (+ 1::Int f4)
#30 := (* #11 #29)
#25 := (* f7 f4)
#23 := (* #11 f7)
#14 := (+ f5 f6)
#20 := 2::Int
#21 := (* 2::Int #11)
#22 := (* #21 #14)
#24 := (+ #22 #23)
#26 := (+ #24 #25)
decl f3 :: Int
#8 := f3
#27 := (+ f3 #26)
#31 := (- #27 #30)
#18 := (* f4 f7)
#15 := (* #11 #14)
#16 := (+ f3 #15)
#19 := (+ #16 #18)
#32 := (= #19 #31)
#33 := (not #32)
#157 := (iff #33 false)
#1 := true
#152 := (not true)
#155 := (iff #152 false)
#156 := [rewrite]: #155
#153 := (iff #33 #152)
#150 := (iff #32 true)
#55 := (* f4 f6)
#54 := (* f4 f5)
#56 := (+ #54 #55)
#67 := (+ #18 #56)
#68 := (+ f6 #67)
#69 := (+ f5 #68)
#70 := (+ f3 #69)
#144 := (= #70 #70)
#148 := (iff #144 true)
#149 := [rewrite]: #148
#143 := (iff #32 #144)
#146 := (= #31 #70)
#131 := (+ f7 #67)
#132 := (+ f6 #131)
#133 := (+ f5 #132)
#85 := (* 2::Int #55)
#83 := (* 2::Int #54)
#86 := (+ #83 #85)
#112 := (* 2::Int #18)
#113 := (+ #112 #86)
#114 := (+ f7 #113)
#84 := (* 2::Int f6)
#115 := (+ #84 #114)
#82 := (* 2::Int f5)
#116 := (+ #82 #115)
#121 := (+ f3 #116)
#138 := (- #121 #133)
#141 := (= #138 #70)
#147 := [rewrite]: #141
#139 := (= #31 #138)
#136 := (= #30 #133)
#124 := (+ f6 f7)
#125 := (+ f5 #124)
#128 := (* #11 #125)
#134 := (= #128 #133)
#135 := [rewrite]: #134
#129 := (= #30 #128)
#126 := (= #29 #125)
#127 := [rewrite]: #126
#130 := [monotonicity #127]: #129
#137 := [trans #130 #135]: #136
#122 := (= #27 #121)
#119 := (= #26 #116)
#99 := (+ #18 #86)
#100 := (+ f7 #99)
#101 := (+ #84 #100)
#102 := (+ #82 #101)
#109 := (+ #102 #18)
#117 := (= #109 #116)
#118 := [rewrite]: #117
#110 := (= #26 #109)
#107 := (= #25 #18)
#108 := [rewrite]: #107
#105 := (= #24 #102)
#93 := (+ f7 #18)
#87 := (+ #84 #86)
#88 := (+ #82 #87)
#96 := (+ #88 #93)
#103 := (= #96 #102)
#104 := [rewrite]: #103
#97 := (= #24 #96)
#94 := (= #23 #93)
#95 := [rewrite]: #94
#91 := (= #22 #88)
#75 := (* 2::Int f4)
#76 := (+ 2::Int #75)
#79 := (* #76 #14)
#89 := (= #79 #88)
#90 := [rewrite]: #89
#80 := (= #22 #79)
#77 := (= #21 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#92 := [trans #81 #90]: #91
#98 := [monotonicity #92 #95]: #97
#106 := [trans #98 #104]: #105
#111 := [monotonicity #106 #108]: #110
#120 := [trans #111 #118]: #119
#123 := [monotonicity #120]: #122
#140 := [monotonicity #123 #137]: #139
#145 := [trans #140 #147]: #146
#73 := (= #19 #70)
#57 := (+ f6 #56)
#58 := (+ f5 #57)
#61 := (+ f3 #58)
#64 := (+ #61 #18)
#71 := (= #64 #70)
#72 := [rewrite]: #71
#65 := (= #19 #64)
#62 := (= #16 #61)
#59 := (= #15 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#74 := [trans #66 #72]: #73
#142 := [monotonicity #74 #145]: #143
#151 := [trans #142 #149]: #150
#154 := [monotonicity #151]: #153
#158 := [trans #154 #156]: #157
#53 := [asserted]: #33
[mp #53 #158]: false
unsat
33e2bdae82fc59f778e5db15565f1c50c2c2fee4 261 0
#2 := false
#25 := 0::Int
decl f5 :: (-> S4 S3 Int)
decl f3 :: (-> S2 Int S3)
decl f7 :: S3
#11 := f7
decl f6 :: S4
#10 := f6
#12 := (f5 f6 f7)
#9 := 2::Int
#13 := (* 2::Int #12)
decl f4 :: S2
#8 := f4
#14 := (f3 f4 #13)
#308 := (f5 f6 #14)
#310 := -1::Int
#289 := (* -1::Int #308)
#625 := (+ #13 #289)
#609 := (<= #625 0::Int)
#627 := (= #625 0::Int)
#621 := (>= #12 0::Int)
#252 := (= #308 0::Int)
#564 := (not #252)
#603 := (<= #308 0::Int)
#472 := (not #603)
#15 := 1::Int
#573 := (>= #308 1::Int)
#570 := (= #308 1::Int)
#16 := (f3 f4 1::Int)
#604 := (f5 f6 #16)
#316 := (= #604 1::Int)
#26 := (:var 0 Int)
#28 := (f3 f4 #26)
#640 := (pattern #28)
#86 := (>= #26 0::Int)
#87 := (not #86)
#29 := (f5 f6 #28)
#68 := (= #26 #29)
#93 := (or #68 #87)
#641 := (forall (vars (?v0 Int)) (:pat #640) #93)
#98 := (forall (vars (?v0 Int)) #93)
#644 := (iff #98 #641)
#642 := (iff #93 #93)
#643 := [refl]: #642
#645 := [quant-intro #643]: #644
#150 := (~ #98 #98)
#149 := (~ #93 #93)
#146 := [refl]: #149
#151 := [nnf-pos #146]: #150
#30 := (= #29 #26)
#27 := (<= 0::Int #26)
#31 := (implies #27 #30)
#32 := (forall (vars (?v0 Int)) #31)
#101 := (iff #32 #98)
#75 := (not #27)
#76 := (or #75 #68)
#81 := (forall (vars (?v0 Int)) #76)
#99 := (iff #81 #98)
#96 := (iff #76 #93)
#90 := (or #87 #68)
#94 := (iff #90 #93)
#95 := [rewrite]: #94
#91 := (iff #76 #90)
#88 := (iff #75 #87)
#84 := (iff #27 #86)
#85 := [rewrite]: #84
#89 := [monotonicity #85]: #88
#92 := [monotonicity #89]: #91
#97 := [trans #92 #95]: #96
#100 := [quant-intro #97]: #99
#82 := (iff #32 #81)
#79 := (iff #31 #76)
#72 := (implies #27 #68)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #31 #72)
#70 := (iff #30 #68)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [trans #74 #78]: #79
#83 := [quant-intro #80]: #82
#102 := [trans #83 #100]: #101
#67 := [asserted]: #32
#103 := [mp #67 #102]: #98
#147 := [mp~ #103 #151]: #98
#646 := [mp #147 #645]: #641
#624 := (not #641)
#593 := (or #624 #316)
#326 := (>= 1::Int 0::Int)
#600 := (not #326)
#601 := (= 1::Int #604)
#605 := (or #601 #600)
#434 := (or #624 #605)
#436 := (iff #434 #593)
#579 := (iff #593 #593)
#580 := [rewrite]: #579
#592 := (iff #605 #316)
#589 := (or #316 false)
#586 := (iff #589 #316)
#591 := [rewrite]: #586
#590 := (iff #605 #589)
#599 := (iff #600 false)
#1 := true
#597 := (not true)
#598 := (iff #597 false)
#595 := [rewrite]: #598
#311 := (iff #600 #597)
#318 := (iff #326 true)
#596 := [rewrite]: #318
#594 := [monotonicity #596]: #311
#588 := [trans #594 #595]: #599
#315 := (iff #601 #316)
#317 := [rewrite]: #315
#585 := [monotonicity #317 #588]: #590
#587 := [trans #585 #591]: #592
#578 := [monotonicity #587]: #436
#581 := [trans #578 #580]: #436
#435 := [quant-inst #15]: #434
#575 := [mp #435 #581]: #593
#457 := [unit-resolution #575 #646]: #316
#458 := (= #308 #604)
#17 := (= #14 #16)
#18 := (not #17)
#19 := (not #18)
#57 := (iff #19 #17)
#58 := [rewrite]: #57
#56 := [asserted]: #19
#61 := [mp #56 #58]: #17
#451 := [monotonicity #61]: #458
#466 := [trans #451 #457]: #570
#468 := (not #570)
#469 := (or #468 #573)
#462 := [th-lemma arith triangle-eq]: #469
#470 := [unit-resolution #462 #466]: #573
#471 := (not #573)
#473 := (or #471 #472)
#474 := [th-lemma arith farkas 1 1]: #473
#567 := [unit-resolution #474 #470]: #472
#568 := (or #564 #603)
#555 := [th-lemma arith triangle-eq]: #568
#557 := [unit-resolution #555 #567]: #564
#618 := (or #252 #621)
#34 := (= #29 0::Int)
#134 := (or #34 #86)
#647 := (forall (vars (?v0 Int)) (:pat #640) #134)
#139 := (forall (vars (?v0 Int)) #134)
#650 := (iff #139 #647)
#648 := (iff #134 #134)
#649 := [refl]: #648
#651 := [quant-intro #649]: #650
#152 := (~ #139 #139)
#160 := (~ #134 #134)
#161 := [refl]: #160
#153 := [nnf-pos #161]: #152
#33 := (< #26 0::Int)
#35 := (implies #33 #34)
#36 := (forall (vars (?v0 Int)) #35)
#142 := (iff #36 #139)
#105 := (= 0::Int #29)
#111 := (not #33)
#112 := (or #111 #105)
#117 := (forall (vars (?v0 Int)) #112)
#140 := (iff #117 #139)
#137 := (iff #112 #134)
#131 := (or #86 #34)
#135 := (iff #131 #134)
#136 := [rewrite]: #135
#132 := (iff #112 #131)
#129 := (iff #105 #34)
#130 := [rewrite]: #129
#127 := (iff #111 #86)
#122 := (not #87)
#125 := (iff #122 #86)
#126 := [rewrite]: #125
#123 := (iff #111 #122)
#120 := (iff #33 #87)
#121 := [rewrite]: #120
#124 := [monotonicity #121]: #123
#128 := [trans #124 #126]: #127
#133 := [monotonicity #128 #130]: #132
#138 := [trans #133 #136]: #137
#141 := [quant-intro #138]: #140
#118 := (iff #36 #117)
#115 := (iff #35 #112)
#108 := (implies #33 #105)
#113 := (iff #108 #112)
#114 := [rewrite]: #113
#109 := (iff #35 #108)
#106 := (iff #34 #105)
#107 := [rewrite]: #106
#110 := [monotonicity #107]: #109
#116 := [trans #110 #114]: #115
#119 := [quant-intro #116]: #118
#143 := [trans #119 #141]: #142
#104 := [asserted]: #36
#144 := [mp #104 #143]: #139
#162 := [mp~ #144 #153]: #139
#652 := [mp #162 #651]: #647
#619 := (not #647)
#617 := (or #619 #252 #621)
#219 := (>= #13 0::Int)
#616 := (or #252 #219)
#620 := (or #619 #616)
#332 := (iff #620 #617)
#607 := (or #619 #618)
#330 := (iff #607 #617)
#331 := [rewrite]: #330
#314 := (iff #620 #607)
#257 := (iff #616 #618)
#294 := (iff #219 #621)
#295 := [rewrite]: #294
#258 := [monotonicity #295]: #257
#329 := [monotonicity #258]: #314
#225 := [trans #329 #331]: #332
#606 := [quant-inst #13]: #620
#602 := [mp #606 #225]: #617
#549 := [unit-resolution #602 #652]: #618
#546 := [unit-resolution #549 #557]: #621
#628 := (not #621)
#622 := (or #628 #627)
#266 := (or #624 #628 #627)
#304 := (not #219)
#309 := (= #13 #308)
#306 := (or #309 #304)
#608 := (or #624 #306)
#612 := (iff #608 #266)
#271 := (or #624 #622)
#610 := (iff #271 #266)
#611 := [rewrite]: #610
#272 := (iff #608 #271)
#623 := (iff #306 #622)
#631 := (or #627 #628)
#281 := (iff #631 #622)
#286 := [rewrite]: #281
#626 := (iff #306 #631)
#629 := (iff #304 #628)
#630 := [monotonicity #295]: #629
#283 := (iff #309 #627)
#414 := [rewrite]: #283
#632 := [monotonicity #414 #630]: #626
#282 := [trans #632 #286]: #623
#273 := [monotonicity #282]: #272
#613 := [trans #273 #611]: #612
#270 := [quant-inst #13]: #608
#614 := [mp #270 #613]: #266
#548 := [unit-resolution #614 #646]: #622
#558 := [unit-resolution #548 #546]: #627
#559 := (not #627)
#560 := (or #559 #609)
#556 := [th-lemma arith triangle-eq]: #560
#561 := [unit-resolution #556 #558]: #609
#615 := (>= #625 0::Int)
#550 := (or #559 #615)
#551 := [th-lemma arith triangle-eq]: #550
#552 := [unit-resolution #551 #558]: #615
#572 := (<= #308 1::Int)
#553 := (or #468 #572)
#547 := [th-lemma arith triangle-eq]: #553
#554 := [unit-resolution #547 #466]: #572
[th-lemma arith gcd-test -1/2 -1/2 -1/2 -1/2 #470 #554 #552 #561]: false
unsat
d558048bb276c46209081d2fdff3fd787837bb57 55 0
#2 := false
#75 := 4::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#76 := (>= #10 4::Int)
#77 := (not #76)
#11 := 3::Int
#66 := (>= #10 3::Int)
#80 := (or #66 #77)
#83 := (not #80)
#15 := 7::Int
#13 := 2::Int
#14 := (* 2::Int #10)
#16 := (< #14 7::Int)
#12 := (< #10 3::Int)
#17 := (implies #12 #16)
#18 := (not #17)
#86 := (iff #18 #83)
#57 := (not #12)
#58 := (or #57 #16)
#61 := (not #58)
#84 := (iff #61 #83)
#81 := (iff #58 #80)
#78 := (iff #16 #77)
#79 := [rewrite]: #78
#73 := (iff #57 #66)
#64 := (not #66)
#68 := (not #64)
#71 := (iff #68 #66)
#72 := [rewrite]: #71
#69 := (iff #57 #68)
#65 := (iff #12 #64)
#67 := [rewrite]: #65
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#82 := [monotonicity #74 #79]: #81
#85 := [monotonicity #82]: #84
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#87 := [trans #63 #85]: #86
#56 := [asserted]: #18
#88 := [mp #56 #87]: #83
#90 := [not-or-elim #88]: #76
#89 := [not-or-elim #88]: #64
#249 := (or #77 #66)
#335 := [th-lemma arith farkas 1 1]: #249
#250 := [unit-resolution #335 #89]: #77
[unit-resolution #250 #90]: false
unsat
8932fefe7cf3366bddd35470f58d0b1fde78bc6e 316 0
#2 := false
#8 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: (-> S4 Int S3)
decl f7 :: S3
#12 := f7
decl f4 :: S2
#9 := f4
#13 := (f3 f4 f7)
#11 := 1::Int
#14 := (+ 1::Int #13)
decl f6 :: S4
#10 := f6
#15 := (f5 f6 #14)
#16 := (f3 f4 #15)
#61 := -1::Int
#62 := (* -1::Int #13)
#63 := (+ #62 #16)
#66 := (f5 f6 #63)
#69 := (f3 f4 #66)
#326 := (* -1::Int #16)
#627 := (+ #326 #69)
#628 := (+ #13 #627)
#615 := (>= #628 0::Int)
#348 := (= #628 0::Int)
#327 := (+ #13 #326)
#343 := (<= #327 0::Int)
#646 := (<= #327 -1::Int)
#659 := (= #327 -1::Int)
#662 := (>= #13 -1::Int)
#493 := (>= #13 0::Int)
#553 := (= #13 0::Int)
#250 := (f5 f6 #13)
#501 := (f3 f4 #250)
#502 := (= #501 0::Int)
#555 := (not #493)
#556 := [hypothesis]: #555
#504 := (or #493 #502)
#28 := (:var 0 Int)
#30 := (f5 f6 #28)
#671 := (pattern #30)
#117 := (>= #28 0::Int)
#31 := (f3 f4 #30)
#36 := (= #31 0::Int)
#166 := (or #36 #117)
#678 := (forall (vars (?v0 Int)) (:pat #671) #166)
#171 := (forall (vars (?v0 Int)) #166)
#681 := (iff #171 #678)
#679 := (iff #166 #166)
#680 := [refl]: #679
#682 := [quant-intro #680]: #681
#184 := (~ #171 #171)
#192 := (~ #166 #166)
#193 := [refl]: #192
#185 := [nnf-pos #193]: #184
#35 := (< #28 0::Int)
#37 := (implies #35 #36)
#38 := (forall (vars (?v0 Int)) #37)
#174 := (iff #38 #171)
#137 := (= 0::Int #31)
#143 := (not #35)
#144 := (or #143 #137)
#149 := (forall (vars (?v0 Int)) #144)
#172 := (iff #149 #171)
#169 := (iff #144 #166)
#163 := (or #117 #36)
#167 := (iff #163 #166)
#168 := [rewrite]: #167
#164 := (iff #144 #163)
#161 := (iff #137 #36)
#162 := [rewrite]: #161
#159 := (iff #143 #117)
#119 := (not #117)
#154 := (not #119)
#157 := (iff #154 #117)
#158 := [rewrite]: #157
#155 := (iff #143 #154)
#152 := (iff #35 #119)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#160 := [trans #156 #158]: #159
#165 := [monotonicity #160 #162]: #164
#170 := [trans #165 #168]: #169
#173 := [quant-intro #170]: #172
#150 := (iff #38 #149)
#147 := (iff #37 #144)
#140 := (implies #35 #137)
#145 := (iff #140 #144)
#146 := [rewrite]: #145
#141 := (iff #37 #140)
#138 := (iff #36 #137)
#139 := [rewrite]: #138
#142 := [monotonicity #139]: #141
#148 := [trans #142 #146]: #147
#151 := [quant-intro #148]: #150
#175 := [trans #151 #173]: #174
#136 := [asserted]: #38
#176 := [mp #136 #175]: #171
#194 := [mp~ #176 #185]: #171
#683 := [mp #194 #682]: #678
#648 := (not #678)
#595 := (or #648 #493 #502)
#503 := (or #502 #493)
#599 := (or #648 #503)
#590 := (iff #599 #595)
#588 := (or #648 #504)
#579 := (iff #588 #595)
#589 := [rewrite]: #579
#580 := (iff #599 #588)
#505 := (iff #503 #504)
#598 := [rewrite]: #505
#577 := [monotonicity #598]: #580
#591 := [trans #577 #589]: #590
#586 := [quant-inst #13]: #599
#587 := [mp #586 #591]: #595
#557 := [unit-resolution #587 #683]: #504
#558 := [unit-resolution #557 #556]: #502
#560 := (= #13 #501)
#335 := (= f7 #250)
#23 := (:var 0 S3)
#24 := (f3 f4 #23)
#664 := (pattern #24)
#25 := (f5 f6 #24)
#93 := (= #23 #25)
#665 := (forall (vars (?v0 S3)) (:pat #664) #93)
#96 := (forall (vars (?v0 S3)) #93)
#668 := (iff #96 #665)
#666 := (iff #93 #93)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#190 := (~ #96 #96)
#188 := (~ #93 #93)
#189 := [refl]: #188
#191 := [nnf-pos #189]: #190
#26 := (= #25 #23)
#27 := (forall (vars (?v0 S3)) #26)
#97 := (iff #27 #96)
#94 := (iff #26 #93)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#92 := [asserted]: #27
#101 := [mp #92 #98]: #96
#180 := [mp~ #101 #191]: #96
#670 := [mp #180 #669]: #665
#337 := (not #665)
#328 := (or #337 #335)
#339 := [quant-inst #12]: #328
#559 := [unit-resolution #339 #670]: #335
#550 := [monotonicity #559]: #560
#561 := [trans #550 #558]: #553
#539 := (not #553)
#540 := (or #539 #493)
#542 := [th-lemma arith triangle-eq]: #540
#543 := [unit-resolution #542 #556 #561]: false
#544 := [lemma #543]: #493
#554 := (or #555 #662)
#545 := [th-lemma arith farkas 1 1]: #554
#546 := [unit-resolution #545 #544]: #662
#653 := (not #662)
#654 := (or #659 #653)
#100 := (= #28 #31)
#125 := (or #100 #119)
#672 := (forall (vars (?v0 Int)) (:pat #671) #125)
#130 := (forall (vars (?v0 Int)) #125)
#675 := (iff #130 #672)
#673 := (iff #125 #125)
#674 := [refl]: #673
#676 := [quant-intro #674]: #675
#182 := (~ #130 #130)
#181 := (~ #125 #125)
#178 := [refl]: #181
#183 := [nnf-pos #178]: #182
#32 := (= #31 #28)
#29 := (<= 0::Int #28)
#33 := (implies #29 #32)
#34 := (forall (vars (?v0 Int)) #33)
#133 := (iff #34 #130)
#107 := (not #29)
#108 := (or #107 #100)
#113 := (forall (vars (?v0 Int)) #108)
#131 := (iff #113 #130)
#128 := (iff #108 #125)
#122 := (or #119 #100)
#126 := (iff #122 #125)
#127 := [rewrite]: #126
#123 := (iff #108 #122)
#120 := (iff #107 #119)
#116 := (iff #29 #117)
#118 := [rewrite]: #116
#121 := [monotonicity #118]: #120
#124 := [monotonicity #121]: #123
#129 := [trans #124 #127]: #128
#132 := [quant-intro #129]: #131
#114 := (iff #34 #113)
#111 := (iff #33 #108)
#104 := (implies #29 #100)
#109 := (iff #104 #108)
#110 := [rewrite]: #109
#105 := (iff #33 #104)
#102 := (iff #32 #100)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#112 := [trans #106 #110]: #111
#115 := [quant-intro #112]: #114
#134 := [trans #115 #132]: #133
#99 := [asserted]: #34
#135 := [mp #99 #134]: #130
#179 := [mp~ #135 #183]: #130
#677 := [mp #179 #676]: #672
#298 := (not #672)
#639 := (or #298 #659 #653)
#321 := (>= #14 0::Int)
#656 := (not #321)
#445 := (= #14 #16)
#652 := (or #445 #656)
#302 := (or #298 #652)
#644 := (iff #302 #639)
#304 := (or #298 #654)
#642 := (iff #304 #639)
#643 := [rewrite]: #642
#305 := (iff #302 #304)
#314 := (iff #652 #654)
#313 := (iff #656 #653)
#657 := (iff #321 #662)
#663 := [rewrite]: #657
#318 := [monotonicity #663]: #313
#660 := (iff #445 #659)
#661 := [rewrite]: #660
#655 := [monotonicity #661 #318]: #314
#641 := [monotonicity #655]: #305
#645 := [trans #641 #643]: #644
#303 := [quant-inst #14]: #302
#640 := [mp #303 #645]: #639
#541 := [unit-resolution #640 #677]: #654
#547 := [unit-resolution #541 #546]: #659
#533 := (not #659)
#529 := (or #533 #646)
#530 := [th-lemma arith triangle-eq]: #529
#531 := [unit-resolution #530 #547]: #646
#534 := (not #646)
#535 := (or #534 #343)
#536 := [th-lemma arith farkas 1 1]: #535
#537 := [unit-resolution #536 #531]: #343
#626 := (not #343)
#617 := (or #626 #348)
#465 := (or #298 #626 #348)
#635 := (>= #63 0::Int)
#632 := (not #635)
#636 := (= #63 #69)
#346 := (or #636 #632)
#466 := (or #298 #346)
#607 := (iff #466 #465)
#609 := (or #298 #617)
#612 := (iff #609 #465)
#606 := [rewrite]: #612
#610 := (iff #466 #609)
#618 := (iff #346 #617)
#620 := (or #348 #626)
#622 := (iff #620 #617)
#623 := [rewrite]: #622
#621 := (iff #346 #620)
#630 := (iff #632 #626)
#625 := (iff #635 #343)
#629 := [rewrite]: #625
#619 := [monotonicity #629]: #630
#347 := (iff #636 #348)
#349 := [rewrite]: #347
#616 := [monotonicity #349 #619]: #621
#624 := [trans #616 #623]: #618
#611 := [monotonicity #624]: #610
#613 := [trans #611 #606]: #607
#467 := [quant-inst #63]: #466
#614 := [mp #467 #613]: #465
#532 := [unit-resolution #614 #677]: #617
#538 := [unit-resolution #532 #537]: #348
#511 := (not #348)
#512 := (or #511 #615)
#513 := [th-lemma arith triangle-eq]: #512
#406 := [unit-resolution #513 #538]: #615
#78 := (<= #69 0::Int)
#18 := (- #16 #13)
#19 := (f5 f6 #18)
#20 := (f3 f4 #19)
#17 := (* 0::Int #16)
#21 := (< #17 #20)
#22 := (not #21)
#89 := (iff #22 #78)
#72 := (< 0::Int #69)
#75 := (not #72)
#87 := (iff #75 #78)
#79 := (not #78)
#82 := (not #79)
#85 := (iff #82 #78)
#86 := [rewrite]: #85
#83 := (iff #75 #82)
#80 := (iff #72 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#88 := [trans #84 #86]: #87
#76 := (iff #22 #75)
#73 := (iff #21 #72)
#70 := (= #20 #69)
#67 := (= #19 #66)
#64 := (= #18 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#59 := (= #17 0::Int)
#60 := [rewrite]: #59
#74 := [monotonicity #60 #71]: #73
#77 := [monotonicity #74]: #76
#90 := [trans #77 #88]: #89
#58 := [asserted]: #22
#91 := [mp #58 #90]: #78
[th-lemma arith farkas -1 -1 1 #91 #531 #406]: false
unsat
68d347fdf181bb23634330d38e10cbe4fff1953a 326 0
#2 := false
#8 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: (-> S4 Int S3)
decl f7 :: S3
#12 := f7
decl f4 :: S2
#9 := f4
#13 := (f3 f4 f7)
#11 := 1::Int
#14 := (+ 1::Int #13)
decl f6 :: S4
#10 := f6
#15 := (f5 f6 #14)
#16 := (f3 f4 #15)
#66 := -1::Int
#67 := (+ -1::Int #16)
#70 := (f5 f6 #67)
#319 := (f3 f4 #70)
#704 := (* -1::Int #319)
#568 := (+ #13 #704)
#562 := (>= #568 0::Int)
#566 := (= #13 #319)
#76 := (= f7 #70)
#112 := (<= #16 0::Int)
#113 := (not #112)
#119 := (iff #76 #113)
#134 := (not #119)
#246 := (iff #134 #76)
#236 := (not #76)
#241 := (not #236)
#244 := (iff #241 #76)
#245 := [rewrite]: #244
#242 := (iff #134 #241)
#239 := (iff #119 #236)
#233 := (iff #76 false)
#237 := (iff #233 #236)
#238 := [rewrite]: #237
#234 := (iff #119 #233)
#231 := (iff #113 false)
#1 := true
#226 := (not true)
#229 := (iff #226 false)
#230 := [rewrite]: #229
#227 := (iff #113 #226)
#224 := (iff #112 true)
#124 := (or #113 #119)
#127 := (not #124)
#17 := (< 0::Int #16)
#18 := (ite #17 true false)
#23 := (not #18)
#24 := (implies #23 false)
#19 := (- #16 1::Int)
#20 := (f5 f6 #19)
#21 := (= #20 f7)
#22 := (iff #18 #21)
#25 := (or #22 #24)
#26 := (or false #25)
#27 := (not #26)
#130 := (iff #27 #127)
#81 := (iff #17 #76)
#97 := (or #17 #81)
#109 := (not #97)
#128 := (iff #109 #127)
#125 := (iff #97 #124)
#122 := (iff #81 #119)
#116 := (iff #113 #76)
#120 := (iff #116 #119)
#121 := [rewrite]: #120
#117 := (iff #81 #116)
#114 := (iff #17 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#123 := [trans #118 #121]: #122
#126 := [monotonicity #115 #123]: #125
#129 := [monotonicity #126]: #128
#110 := (iff #27 #109)
#107 := (iff #26 #97)
#102 := (or false #97)
#105 := (iff #102 #97)
#106 := [rewrite]: #105
#103 := (iff #26 #102)
#100 := (iff #25 #97)
#94 := (or #81 #17)
#98 := (iff #94 #97)
#99 := [rewrite]: #98
#95 := (iff #25 #94)
#92 := (iff #24 #17)
#84 := (not #17)
#87 := (implies #84 false)
#90 := (iff #87 #17)
#91 := [rewrite]: #90
#88 := (iff #24 #87)
#85 := (iff #23 #84)
#64 := (iff #18 #17)
#65 := [rewrite]: #64
#86 := [monotonicity #65]: #85
#89 := [monotonicity #86]: #88
#93 := [trans #89 #91]: #92
#82 := (iff #22 #81)
#79 := (iff #21 #76)
#73 := (= #70 f7)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #21 #73)
#71 := (= #20 #70)
#68 := (= #19 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#80 := [trans #75 #78]: #79
#83 := [monotonicity #65 #80]: #82
#96 := [monotonicity #83 #93]: #95
#101 := [trans #96 #99]: #100
#104 := [monotonicity #101]: #103
#108 := [trans #104 #106]: #107
#111 := [monotonicity #108]: #110
#131 := [trans #111 #129]: #130
#63 := [asserted]: #27
#132 := [mp #63 #131]: #127
#133 := [not-or-elim #132]: #112
#225 := [iff-true #133]: #224
#228 := [monotonicity #225]: #227
#232 := [trans #228 #230]: #231
#235 := [monotonicity #232]: #234
#240 := [trans #235 #238]: #239
#243 := [monotonicity #240]: #242
#247 := [trans #243 #245]: #246
#135 := [not-or-elim #132]: #134
#248 := [mp #135 #247]: #76
#573 := [monotonicity #248]: #566
#574 := (not #566)
#646 := (or #574 #562)
#648 := [th-lemma arith triangle-eq]: #646
#658 := [unit-resolution #648 #573]: #562
#384 := (* -1::Int #16)
#514 := (+ #13 #384)
#713 := (<= #514 -1::Int)
#721 := (= #514 -1::Int)
#728 := (>= #13 -1::Int)
#551 := (>= #319 0::Int)
#682 := (= #319 0::Int)
#417 := (>= #16 1::Int)
#697 := (not #417)
#659 := (or #697 #113)
#660 := [th-lemma arith farkas 1 1]: #659
#656 := [unit-resolution #660 #133]: #697
#33 := (:var 0 Int)
#35 := (f5 f6 #33)
#740 := (pattern #35)
#161 := (>= #33 0::Int)
#36 := (f3 f4 #35)
#41 := (= #36 0::Int)
#210 := (or #41 #161)
#747 := (forall (vars (?v0 Int)) (:pat #740) #210)
#215 := (forall (vars (?v0 Int)) #210)
#750 := (iff #215 #747)
#748 := (iff #210 #210)
#749 := [refl]: #748
#751 := [quant-intro #749]: #750
#259 := (~ #215 #215)
#257 := (~ #210 #210)
#258 := [refl]: #257
#260 := [nnf-pos #258]: #259
#40 := (< #33 0::Int)
#42 := (implies #40 #41)
#43 := (forall (vars (?v0 Int)) #42)
#218 := (iff #43 #215)
#181 := (= 0::Int #36)
#187 := (not #40)
#188 := (or #187 #181)
#193 := (forall (vars (?v0 Int)) #188)
#216 := (iff #193 #215)
#213 := (iff #188 #210)
#207 := (or #161 #41)
#211 := (iff #207 #210)
#212 := [rewrite]: #211
#208 := (iff #188 #207)
#205 := (iff #181 #41)
#206 := [rewrite]: #205
#203 := (iff #187 #161)
#163 := (not #161)
#198 := (not #163)
#201 := (iff #198 #161)
#202 := [rewrite]: #201
#199 := (iff #187 #198)
#196 := (iff #40 #163)
#197 := [rewrite]: #196
#200 := [monotonicity #197]: #199
#204 := [trans #200 #202]: #203
#209 := [monotonicity #204 #206]: #208
#214 := [trans #209 #212]: #213
#217 := [quant-intro #214]: #216
#194 := (iff #43 #193)
#191 := (iff #42 #188)
#184 := (implies #40 #181)
#189 := (iff #184 #188)
#190 := [rewrite]: #189
#185 := (iff #42 #184)
#182 := (iff #41 #181)
#183 := [rewrite]: #182
#186 := [monotonicity #183]: #185
#192 := [trans #186 #190]: #191
#195 := [quant-intro #192]: #194
#219 := [trans #195 #217]: #218
#180 := [asserted]: #43
#220 := [mp #180 #219]: #215
#261 := [mp~ #220 #260]: #215
#752 := [mp #261 #751]: #747
#358 := (not #747)
#673 := (or #358 #417 #682)
#703 := (>= #67 0::Int)
#683 := (or #682 #703)
#671 := (or #358 #683)
#567 := (iff #671 #673)
#515 := (or #417 #682)
#556 := (or #358 #515)
#517 := (iff #556 #673)
#665 := [rewrite]: #517
#557 := (iff #671 #556)
#670 := (iff #683 #515)
#677 := (or #682 #417)
#516 := (iff #677 #515)
#669 := [rewrite]: #516
#684 := (iff #683 #677)
#418 := (iff #703 #417)
#696 := [rewrite]: #418
#513 := [monotonicity #696]: #684
#672 := [trans #513 #669]: #670
#558 := [monotonicity #672]: #557
#662 := [trans #558 #665]: #567
#674 := [quant-inst #67]: #671
#663 := [mp #674 #662]: #673
#661 := [unit-resolution #663 #752 #656]: #682
#650 := (not #682)
#651 := (or #650 #551)
#652 := [th-lemma arith triangle-eq]: #651
#653 := [unit-resolution #652 #661]: #551
#654 := (not #562)
#647 := (not #551)
#638 := (or #728 #647 #654)
#639 := [th-lemma arith assign-bounds 1 1]: #638
#641 := [unit-resolution #639 #653 #658]: #728
#731 := (not #728)
#722 := (or #721 #731)
#144 := (= #33 #36)
#169 := (or #144 #163)
#741 := (forall (vars (?v0 Int)) (:pat #740) #169)
#174 := (forall (vars (?v0 Int)) #169)
#744 := (iff #174 #741)
#742 := (iff #169 #169)
#743 := [refl]: #742
#745 := [quant-intro #743]: #744
#250 := (~ #174 #174)
#252 := (~ #169 #169)
#249 := [refl]: #252
#222 := [nnf-pos #249]: #250
#37 := (= #36 #33)
#34 := (<= 0::Int #33)
#38 := (implies #34 #37)
#39 := (forall (vars (?v0 Int)) #38)
#177 := (iff #39 #174)
#151 := (not #34)
#152 := (or #151 #144)
#157 := (forall (vars (?v0 Int)) #152)
#175 := (iff #157 #174)
#172 := (iff #152 #169)
#166 := (or #163 #144)
#170 := (iff #166 #169)
#171 := [rewrite]: #170
#167 := (iff #152 #166)
#164 := (iff #151 #163)
#160 := (iff #34 #161)
#162 := [rewrite]: #160
#165 := [monotonicity #162]: #164
#168 := [monotonicity #165]: #167
#173 := [trans #168 #171]: #172
#176 := [quant-intro #173]: #175
#158 := (iff #39 #157)
#155 := (iff #38 #152)
#148 := (implies #34 #144)
#153 := (iff #148 #152)
#154 := [rewrite]: #153
#149 := (iff #38 #148)
#146 := (iff #37 #144)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#156 := [trans #150 #154]: #155
#159 := [quant-intro #156]: #158
#178 := [trans #159 #176]: #177
#143 := [asserted]: #39
#179 := [mp #143 #178]: #174
#223 := [mp~ #179 #222]: #174
#746 := [mp #223 #745]: #741
#723 := (not #741)
#383 := (or #723 #721 #731)
#410 := (>= #14 0::Int)
#407 := (not #410)
#725 := (= #14 #16)
#727 := (or #725 #407)
#724 := (or #723 #727)
#710 := (iff #724 #383)
#708 := (or #723 #722)
#373 := (iff #708 #383)
#374 := [rewrite]: #373
#371 := (iff #724 #708)
#382 := (iff #727 #722)
#726 := (iff #407 #731)
#729 := (iff #410 #728)
#730 := [rewrite]: #729
#732 := [monotonicity #730]: #726
#395 := (iff #725 #721)
#396 := [rewrite]: #395
#387 := [monotonicity #396 #732]: #382
#372 := [monotonicity #387]: #371
#711 := [trans #372 #374]: #710
#367 := [quant-inst #14]: #724
#712 := [mp #367 #711]: #383
#642 := [unit-resolution #712 #746]: #722
#643 := [unit-resolution #642 #641]: #721
#644 := (not #721)
#640 := (or #644 #713)
#645 := [th-lemma arith triangle-eq]: #640
#631 := [unit-resolution #645 #643]: #713
[th-lemma arith farkas 1 -1 -1 1 #653 #133 #631 #658]: false
unsat
9bd1c4986d286e4e0abfd70c7740b5ad11395fe6 421 0
#2 := false
decl f5 :: (-> S4 S3 Int)
decl f3 :: (-> S2 Int S3)
decl f7 :: S3
#10 := f7
decl f6 :: S4
#9 := f6
#11 := (f5 f6 f7)
#15 := 2::Int
#67 := (* 2::Int #11)
#17 := 3::Int
#73 := (+ 3::Int #67)
decl f4 :: S2
#8 := f4
#78 := (f3 f4 #73)
#622 := (f5 f6 #78)
#12 := 1::Int
#61 := (+ 1::Int #11)
#64 := (f3 f4 #61)
#319 := (f5 f6 #64)
#423 := (= #319 #622)
#251 := (= #64 #78)
#29 := 0::Int
#83 := (f3 f4 0::Int)
#338 := (= #78 #83)
#329 := (not #338)
#598 := (= #622 0::Int)
#593 := (f5 f6 #83)
#584 := (= #593 0::Int)
#30 := (:var 0 Int)
#32 := (f3 f4 #30)
#673 := (pattern #32)
#119 := (>= #30 0::Int)
#120 := (not #119)
#33 := (f5 f6 #32)
#101 := (= #30 #33)
#126 := (or #101 #120)
#674 := (forall (vars (?v0 Int)) (:pat #673) #126)
#131 := (forall (vars (?v0 Int)) #126)
#677 := (iff #131 #674)
#675 := (iff #126 #126)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#183 := (~ #131 #131)
#182 := (~ #126 #126)
#179 := [refl]: #182
#184 := [nnf-pos #179]: #183
#34 := (= #33 #30)
#31 := (<= 0::Int #30)
#35 := (implies #31 #34)
#36 := (forall (vars (?v0 Int)) #35)
#134 := (iff #36 #131)
#108 := (not #31)
#109 := (or #108 #101)
#114 := (forall (vars (?v0 Int)) #109)
#132 := (iff #114 #131)
#129 := (iff #109 #126)
#123 := (or #120 #101)
#127 := (iff #123 #126)
#128 := [rewrite]: #127
#124 := (iff #109 #123)
#121 := (iff #108 #120)
#117 := (iff #31 #119)
#118 := [rewrite]: #117
#122 := [monotonicity #118]: #121
#125 := [monotonicity #122]: #124
#130 := [trans #125 #128]: #129
#133 := [quant-intro #130]: #132
#115 := (iff #36 #114)
#112 := (iff #35 #109)
#105 := (implies #31 #101)
#110 := (iff #105 #109)
#111 := [rewrite]: #110
#106 := (iff #35 #105)
#103 := (iff #34 #101)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#113 := [trans #107 #111]: #112
#116 := [quant-intro #113]: #115
#135 := [trans #116 #133]: #134
#100 := [asserted]: #36
#136 := [mp #100 #135]: #131
#180 := [mp~ #136 #184]: #131
#679 := [mp #180 #678]: #674
#649 := (not #674)
#566 := (or #649 #584)
#591 := (>= 0::Int 0::Int)
#592 := (not #591)
#589 := (= 0::Int #593)
#594 := (or #589 #592)
#570 := (or #649 #594)
#551 := (iff #570 #566)
#554 := (iff #566 #566)
#555 := [rewrite]: #554
#568 := (iff #594 #584)
#573 := (or #584 false)
#565 := (iff #573 #584)
#567 := [rewrite]: #565
#578 := (iff #594 #573)
#576 := (iff #592 false)
#1 := true
#587 := (not true)
#574 := (iff #587 false)
#575 := [rewrite]: #574
#571 := (iff #592 #587)
#586 := (iff #591 true)
#580 := [rewrite]: #586
#572 := [monotonicity #580]: #571
#577 := [trans #572 #575]: #576
#583 := (iff #589 #584)
#585 := [rewrite]: #583
#564 := [monotonicity #585 #577]: #578
#569 := [trans #564 #567]: #568
#553 := [monotonicity #569]: #551
#556 := [trans #553 #555]: #551
#550 := [quant-inst #29]: #570
#557 := [mp #550 #556]: #566
#445 := [unit-resolution #557 #679]: #584
#435 := (= #622 #593)
#463 := [hypothesis]: #338
#436 := [monotonicity #463]: #435
#438 := [trans #436 #445]: #598
#459 := (not #598)
#579 := (<= #622 0::Int)
#453 := (not #579)
#657 := -1::Int
#306 := (>= #11 -1::Int)
#542 := (>= #11 0::Int)
#512 := (= #11 0::Int)
#662 := (f3 f4 #11)
#544 := (f5 f6 #662)
#545 := (= #544 0::Int)
#486 := (not #542)
#493 := [hypothesis]: #486
#547 := (or #542 #545)
#38 := (= #33 0::Int)
#167 := (or #38 #119)
#680 := (forall (vars (?v0 Int)) (:pat #673) #167)
#172 := (forall (vars (?v0 Int)) #167)
#683 := (iff #172 #680)
#681 := (iff #167 #167)
#682 := [refl]: #681
#684 := [quant-intro #682]: #683
#185 := (~ #172 #172)
#193 := (~ #167 #167)
#194 := [refl]: #193
#186 := [nnf-pos #194]: #185
#37 := (< #30 0::Int)
#39 := (implies #37 #38)
#40 := (forall (vars (?v0 Int)) #39)
#175 := (iff #40 #172)
#138 := (= 0::Int #33)
#144 := (not #37)
#145 := (or #144 #138)
#150 := (forall (vars (?v0 Int)) #145)
#173 := (iff #150 #172)
#170 := (iff #145 #167)
#164 := (or #119 #38)
#168 := (iff #164 #167)
#169 := [rewrite]: #168
#165 := (iff #145 #164)
#162 := (iff #138 #38)
#163 := [rewrite]: #162
#160 := (iff #144 #119)
#155 := (not #120)
#158 := (iff #155 #119)
#159 := [rewrite]: #158
#156 := (iff #144 #155)
#153 := (iff #37 #120)
#154 := [rewrite]: #153
#157 := [monotonicity #154]: #156
#161 := [trans #157 #159]: #160
#166 := [monotonicity #161 #163]: #165
#171 := [trans #166 #169]: #170
#174 := [quant-intro #171]: #173
#151 := (iff #40 #150)
#148 := (iff #39 #145)
#141 := (implies #37 #138)
#146 := (iff #141 #145)
#147 := [rewrite]: #146
#142 := (iff #39 #141)
#139 := (iff #38 #138)
#140 := [rewrite]: #139
#143 := [monotonicity #140]: #142
#149 := [trans #143 #147]: #148
#152 := [quant-intro #149]: #151
#176 := [trans #152 #174]: #175
#137 := [asserted]: #40
#177 := [mp #137 #176]: #172
#195 := [mp~ #177 #186]: #172
#685 := [mp #195 #684]: #680
#633 := (not #680)
#549 := (or #633 #542 #545)
#546 := (or #545 #542)
#535 := (or #633 #546)
#539 := (iff #535 #549)
#532 := (or #633 #547)
#537 := (iff #532 #549)
#538 := [rewrite]: #537
#533 := (iff #535 #532)
#548 := (iff #546 #547)
#543 := [rewrite]: #548
#536 := [monotonicity #543]: #533
#534 := [trans #536 #538]: #539
#531 := [quant-inst #11]: #535
#540 := [mp #531 #534]: #549
#452 := [unit-resolution #540 #685]: #547
#483 := [unit-resolution #452 #493]: #545
#487 := (= #11 #544)
#663 := (= f7 #662)
#24 := (:var 0 S3)
#25 := (f5 f6 #24)
#666 := (pattern #25)
#26 := (f3 f4 #25)
#93 := (= #24 #26)
#667 := (forall (vars (?v0 S3)) (:pat #666) #93)
#97 := (forall (vars (?v0 S3)) #93)
#670 := (iff #97 #667)
#668 := (iff #93 #93)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#191 := (~ #97 #97)
#189 := (~ #93 #93)
#190 := [refl]: #189
#192 := [nnf-pos #190]: #191
#27 := (= #26 #24)
#28 := (forall (vars (?v0 S3)) #27)
#98 := (iff #28 #97)
#95 := (iff #27 #93)
#96 := [rewrite]: #95
#99 := [quant-intro #96]: #98
#92 := [asserted]: #28
#102 := [mp #92 #99]: #97
#181 := [mp~ #102 #192]: #97
#672 := [mp #181 #671]: #667
#665 := (not #667)
#655 := (or #665 #663)
#314 := [quant-inst #10]: #655
#485 := [unit-resolution #314 #672]: #663
#494 := [monotonicity #485]: #487
#496 := [trans #494 #483]: #512
#497 := (not #512)
#498 := (or #497 #542)
#508 := [th-lemma arith triangle-eq]: #498
#488 := [unit-resolution #508 #493 #496]: false
#509 := [lemma #488]: #542
#476 := (or #486 #306)
#477 := [th-lemma arith farkas 1 1]: #476
#443 := [unit-resolution #477 #509]: #306
#625 := -3::Int
#619 := (* -1::Int #622)
#624 := (+ #67 #619)
#491 := (<= #624 -3::Int)
#620 := (= #624 -3::Int)
#645 := (not #306)
#609 := (or #645 #620)
#446 := (or #649 #645 #620)
#632 := (>= #73 0::Int)
#621 := (not #632)
#623 := (= #73 #622)
#618 := (or #623 #621)
#448 := (or #649 #618)
#607 := (iff #448 #446)
#602 := (or #649 #609)
#606 := (iff #602 #446)
#604 := [rewrite]: #606
#603 := (iff #448 #602)
#610 := (iff #618 #609)
#613 := (or #620 #645)
#615 := (iff #613 #609)
#616 := [rewrite]: #615
#614 := (iff #618 #613)
#611 := (iff #621 #645)
#468 := (iff #632 #306)
#469 := [rewrite]: #468
#612 := [monotonicity #469]: #611
#626 := (iff #623 #620)
#467 := [rewrite]: #626
#608 := [monotonicity #467 #612]: #614
#617 := [trans #608 #616]: #610
#605 := [monotonicity #617]: #603
#489 := [trans #605 #604]: #607
#449 := [quant-inst #73]: #448
#490 := [mp #449 #489]: #446
#520 := [unit-resolution #490 #679]: #609
#444 := [unit-resolution #520 #443]: #620
#526 := (not #620)
#522 := (or #526 #491)
#523 := [th-lemma arith triangle-eq]: #522
#451 := [unit-resolution #523 #444]: #491
#454 := (not #491)
#455 := (or #453 #454 #645)
#457 := [th-lemma arith assign-bounds 1 2]: #455
#458 := [unit-resolution #457 #451 #443]: #453
#460 := (or #459 #579)
#461 := [th-lemma arith triangle-eq]: #460
#462 := [unit-resolution #461 #458]: #459
#439 := [unit-resolution #462 #438]: false
#440 := [lemma #439]: #329
#252 := (= #64 #83)
#337 := (not #252)
#258 := (= #319 0::Int)
#426 := (= #319 #593)
#420 := [hypothesis]: #252
#422 := [monotonicity #420]: #426
#427 := [trans #422 #445]: #258
#430 := (not #258)
#631 := (<= #319 0::Int)
#437 := (not #631)
#299 := (* -1::Int #319)
#641 := (+ #11 #299)
#364 := (<= #641 -1::Int)
#303 := (= #641 -1::Int)
#642 := (or #303 #645)
#651 := (or #649 #303 #645)
#664 := (>= #61 0::Int)
#659 := (not #664)
#656 := (= #61 #319)
#315 := (or #656 #659)
#290 := (or #649 #315)
#347 := (iff #290 #651)
#652 := (or #649 #642)
#639 := (iff #652 #651)
#640 := [rewrite]: #639
#650 := (iff #290 #652)
#648 := (iff #315 #642)
#646 := (iff #659 #645)
#643 := (iff #664 #306)
#644 := [rewrite]: #643
#647 := [monotonicity #644]: #646
#304 := (iff #656 #303)
#305 := [rewrite]: #304
#285 := [monotonicity #305 #647]: #648
#653 := [monotonicity #285]: #650
#362 := [trans #653 #640]: #347
#291 := [quant-inst #61]: #290
#363 := [mp #291 #362]: #651
#527 := [unit-resolution #363 #679]: #642
#433 := [unit-resolution #527 #443]: #303
#529 := (not #303)
#434 := (or #529 #364)
#282 := [th-lemma arith triangle-eq]: #434
#441 := [unit-resolution #282 #433]: #364
#442 := (not #364)
#421 := (or #437 #442 #486)
#424 := [th-lemma arith assign-bounds 1 -1]: #421
#428 := [unit-resolution #424 #441 #509]: #437
#431 := (or #430 #631)
#429 := [th-lemma arith triangle-eq]: #431
#432 := [unit-resolution #429 #428]: #430
#417 := [unit-resolution #432 #427]: false
#407 := [lemma #417]: #337
#410 := (or #251 #252 #338)
#336 := (not #251)
#340 := (and #336 #337 #329)
#341 := (not #340)
#86 := (distinct #64 #78 #83)
#89 := (not #86)
#20 := (- #11 #11)
#21 := (f3 f4 #20)
#16 := (* #11 2::Int)
#18 := (+ #16 3::Int)
#19 := (f3 f4 #18)
#13 := (+ #11 1::Int)
#14 := (f3 f4 #13)
#22 := (distinct #14 #19 #21)
#23 := (not #22)
#90 := (iff #23 #89)
#87 := (iff #22 #86)
#84 := (= #21 #83)
#81 := (= #20 0::Int)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#79 := (= #19 #78)
#76 := (= #18 #73)
#70 := (+ #67 3::Int)
#74 := (= #70 #73)
#75 := [rewrite]: #74
#71 := (= #18 #70)
#68 := (= #16 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#77 := [trans #72 #75]: #76
#80 := [monotonicity #77]: #79
#65 := (= #14 #64)
#62 := (= #13 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#88 := [monotonicity #66 #80 #85]: #87
#91 := [monotonicity #88]: #90
#60 := [asserted]: #23
#94 := [mp #60 #91]: #89
#328 := (or #86 #341)
#661 := [def-axiom]: #328
#409 := [unit-resolution #661 #94]: #341
#316 := (or #340 #251 #252 #338)
#447 := [def-axiom]: #316
#413 := [unit-resolution #447 #409]: #410
#414 := [unit-resolution #413 #407 #440]: #251
#418 := [monotonicity #414]: #423
#514 := (+ #319 #619)
#408 := (>= #514 0::Int)
#492 := (not #408)
#516 := (or #645 #492)
#519 := [hypothesis]: #306
#521 := [unit-resolution #520 #519]: #620
#524 := [unit-resolution #523 #521]: #491
#365 := (>= #641 -1::Int)
#528 := [unit-resolution #527 #519]: #303
#525 := (or #529 #365)
#530 := [th-lemma arith triangle-eq]: #525
#510 := [unit-resolution #530 #528]: #365
#456 := [hypothesis]: #408
#511 := [th-lemma arith farkas 1 1 -1 1 #456 #510 #524 #519]: false
#517 := [lemma #511]: #516
#411 := [unit-resolution #517 #443]: #492
#419 := (not #423)
#412 := (or #419 #408)
#415 := [th-lemma arith triangle-eq]: #412
[unit-resolution #415 #411 #418]: false
unsat
b95d641e1affb872027fbe667ba2ad4475fc0039 165 0
#2 := false
#11 := 0::Int
decl f7 :: Int
#10 := f7
#55 := -1::Int
#56 := (* -1::Int f7)
#79 := (>= f7 0::Int)
#86 := (ite #79 f7 #56)
#658 := (* -1::Int #86)
#655 := (+ #56 #658)
#652 := (<= #655 0::Int)
#350 := (= #56 #86)
#80 := (not #79)
#659 := (+ f7 #658)
#660 := (<= #659 0::Int)
#264 := (= f7 #86)
#661 := [hypothesis]: #79
#265 := (or #80 #264)
#351 := [def-axiom]: #265
#299 := [unit-resolution #351 #661]: #264
#662 := (not #264)
#664 := (or #662 #660)
#304 := [th-lemma arith triangle-eq]: #664
#305 := [unit-resolution #304 #299]: #660
#283 := (>= #86 0::Int)
#356 := (not #283)
decl f5 :: (-> S4 Int S3)
#24 := (:var 0 Int)
decl f6 :: S4
#9 := f6
#26 := (f5 f6 #24)
#686 := (pattern #26)
#131 := (>= #24 0::Int)
#133 := (not #131)
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#8 := f4
#27 := (f3 f4 #26)
#114 := (= #24 #27)
#139 := (or #114 #133)
#687 := (forall (vars (?v0 Int)) (:pat #686) #139)
#144 := (forall (vars (?v0 Int)) #139)
#690 := (iff #144 #687)
#688 := (iff #139 #139)
#689 := [refl]: #688
#691 := [quant-intro #689]: #690
#196 := (~ #144 #144)
#195 := (~ #139 #139)
#192 := [refl]: #195
#197 := [nnf-pos #192]: #196
#28 := (= #27 #24)
#25 := (<= 0::Int #24)
#29 := (implies #25 #28)
#30 := (forall (vars (?v0 Int)) #29)
#147 := (iff #30 #144)
#121 := (not #25)
#122 := (or #121 #114)
#127 := (forall (vars (?v0 Int)) #122)
#145 := (iff #127 #144)
#142 := (iff #122 #139)
#136 := (or #133 #114)
#140 := (iff #136 #139)
#141 := [rewrite]: #140
#137 := (iff #122 #136)
#134 := (iff #121 #133)
#130 := (iff #25 #131)
#132 := [rewrite]: #130
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#143 := [trans #138 #141]: #142
#146 := [quant-intro #143]: #145
#128 := (iff #30 #127)
#125 := (iff #29 #122)
#118 := (implies #25 #114)
#123 := (iff #118 #122)
#124 := [rewrite]: #123
#119 := (iff #29 #118)
#116 := (iff #28 #114)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#126 := [trans #120 #124]: #125
#129 := [quant-intro #126]: #128
#148 := [trans #129 #146]: #147
#113 := [asserted]: #30
#149 := [mp #113 #148]: #144
#193 := [mp~ #149 #197]: #144
#692 := [mp #193 #691]: #687
#91 := (f5 f6 #86)
#94 := (f3 f4 #91)
#97 := (= #86 #94)
#100 := (not #97)
#13 := (- f7)
#12 := (< f7 0::Int)
#14 := (ite #12 #13 f7)
#15 := (f5 f6 #14)
#16 := (f3 f4 #15)
#17 := (= #16 #14)
#18 := (not #17)
#103 := (iff #18 #100)
#59 := (ite #12 #56 f7)
#62 := (f5 f6 #59)
#65 := (f3 f4 #62)
#71 := (= #59 #65)
#76 := (not #71)
#101 := (iff #76 #100)
#98 := (iff #71 #97)
#95 := (= #65 #94)
#92 := (= #62 #91)
#89 := (= #59 #86)
#83 := (ite #80 #56 f7)
#87 := (= #83 #86)
#88 := [rewrite]: #87
#84 := (= #59 #83)
#81 := (iff #12 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#96 := [monotonicity #93]: #95
#99 := [monotonicity #90 #96]: #98
#102 := [monotonicity #99]: #101
#77 := (iff #18 #76)
#74 := (iff #17 #71)
#68 := (= #65 #59)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #17 #68)
#60 := (= #14 #59)
#57 := (= #13 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#66 := (= #16 #65)
#63 := (= #15 #62)
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67 #61]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#104 := [trans #78 #102]: #103
#54 := [asserted]: #18
#105 := [mp #54 #104]: #100
#460 := (not #687)
#667 := (or #460 #97 #356)
#671 := (or #97 #356)
#341 := (or #460 #671)
#674 := (iff #341 #667)
#675 := [rewrite]: #674
#342 := [quant-inst #86]: #341
#676 := [mp #342 #675]: #667
#665 := [unit-resolution #676 #105 #692]: #356
#663 := [th-lemma arith farkas -1 1 1 #661 #665 #305]: false
#666 := [lemma #663]: #80
#352 := (or #79 #350)
#343 := [def-axiom]: #352
#375 := [unit-resolution #343 #666]: #350
#376 := (not #350)
#377 := (or #376 #652)
#378 := [th-lemma arith triangle-eq]: #377
#271 := [unit-resolution #378 #375]: #652
#657 := (<= #86 0::Int)
#648 := (or #657 #283)
#649 := [th-lemma arith farkas 1 1]: #648
#371 := [unit-resolution #649 #665]: #657
[th-lemma arith farkas 1 1 1 #666 #371 #271]: false
unsat
05afc7fcdcf1433af94de36ed38785db528a50f6 552 0
#2 := false
#661 := -1::Int
decl f4 :: (-> S3 S2 Int)
decl f7 :: (-> S4 Int S2)
decl f9 :: S2
#29 := f9
decl f5 :: S3
#12 := f5
#30 := (f4 f5 f9)
#28 := 4::Int
#31 := (* 4::Int #30)
#11 := 1::Int
#124 := (+ 1::Int #31)
decl f8 :: S4
#18 := f8
#127 := (f7 f8 #124)
#523 := (f4 f5 #127)
#662 := (* -1::Int #523)
#647 := (+ #31 #662)
#612 := (>= #647 -1::Int)
#663 := (= #647 -1::Int)
#42 := 0::Int
#632 := (>= #30 0::Int)
#610 := (= #523 0::Int)
#574 := (not #610)
#593 := (<= #523 0::Int)
#569 := (not #593)
#520 := (<= #523 1::Int)
#795 := (not #520)
decl f6 :: (-> S2 S2 S1)
#8 := (:var 0 S2)
#432 := (f6 #8 #127)
#510 := (pattern #432)
#518 := (= #8 #127)
decl f1 :: S1
#4 := f1
#517 := (= f1 #432)
#433 := (not #517)
#19 := (f7 f8 1::Int)
#20 := (= #8 #19)
#829 := (or #20 #433 #518)
#832 := (forall (vars (?v1 S2)) (:pat #510) #829)
#833 := (not #832)
#820 := (or #520 #833)
#543 := (not #820)
decl f3 :: (-> S2 S1)
#130 := (f3 #127)
#136 := (= f1 #130)
#144 := (not #136)
#546 := (or #144 #543)
#817 := (not #546)
decl ?v1!0 :: (-> S2 S2)
#497 := (?v1!0 #127)
#835 := (= #19 #497)
#628 := (= #127 #497)
#508 := (f6 #497 #127)
#509 := (= f1 #508)
#842 := (not #509)
#495 := (or #842 #628 #835)
#496 := (not #495)
#486 := (or #136 #496 #520)
#827 := (not #486)
#814 := (or #827 #817)
#819 := (not #814)
#13 := (f4 f5 #8)
#875 := (pattern #13)
#9 := (f3 #8)
#874 := (pattern #9)
#15 := (:var 1 S2)
#16 := (f6 #8 #15)
#847 := (pattern #16)
#77 := (= f1 #16)
#83 := (not #77)
#21 := (= #8 #15)
#105 := (or #20 #21 #83)
#848 := (forall (vars (?v1 S2)) (:pat #847) #105)
#853 := (not #848)
#101 := (<= #13 1::Int)
#856 := (or #101 #853)
#859 := (not #856)
#74 := (= f1 #9)
#299 := (not #74)
#862 := (or #299 #859)
#865 := (not #862)
#276 := (?v1!0 #8)
#320 := (= #8 #276)
#317 := (= #19 #276)
#259 := (f6 #276 #8)
#260 := (= f1 #259)
#277 := (not #260)
#326 := (or #277 #317 #320)
#331 := (not #326)
#340 := (or #74 #101 #331)
#364 := (not #340)
#868 := (or #364 #865)
#871 := (not #868)
#876 := (forall (vars (?v0 S2)) (:pat #874 #875) #871)
#108 := (forall (vars (?v1 S2)) #105)
#282 := (not #108)
#355 := (or #101 #282)
#356 := (not #355)
#357 := (or #299 #356)
#363 := (not #357)
#365 := (or #364 #363)
#366 := (not #365)
#371 := (forall (vars (?v0 S2)) #366)
#877 := (iff #371 #876)
#872 := (iff #366 #871)
#869 := (iff #365 #868)
#866 := (iff #363 #865)
#863 := (iff #357 #862)
#860 := (iff #356 #859)
#857 := (iff #355 #856)
#854 := (iff #282 #853)
#851 := (iff #108 #848)
#849 := (iff #105 #105)
#850 := [refl]: #849
#852 := [quant-intro #850]: #851
#855 := [monotonicity #852]: #854
#858 := [monotonicity #855]: #857
#861 := [monotonicity #858]: #860
#864 := [monotonicity #861]: #863
#867 := [monotonicity #864]: #866
#870 := [monotonicity #867]: #869
#873 := [monotonicity #870]: #872
#878 := [quant-intro #873]: #877
#102 := (not #101)
#111 := (and #102 #108)
#305 := (or #299 #111)
#345 := (and #305 #340)
#348 := (forall (vars (?v0 S2)) #345)
#372 := (iff #348 #371)
#369 := (iff #345 #366)
#360 := (and #357 #340)
#367 := (iff #360 #366)
#368 := [rewrite]: #367
#361 := (iff #345 #360)
#358 := (iff #305 #357)
#271 := (iff #111 #356)
#272 := [rewrite]: #271
#359 := [monotonicity #272]: #358
#362 := [monotonicity #359]: #361
#370 := [trans #362 #368]: #369
#373 := [quant-intro #370]: #372
#278 := (= #276 #8)
#279 := (= #276 #19)
#280 := (or #279 #278 #277)
#281 := (not #280)
#273 := (not #102)
#287 := (or #273 #281)
#304 := (or #74 #287)
#306 := (and #305 #304)
#309 := (forall (vars (?v0 S2)) #306)
#349 := (iff #309 #348)
#346 := (iff #306 #345)
#343 := (iff #304 #340)
#334 := (or #101 #331)
#337 := (or #74 #334)
#341 := (iff #337 #340)
#342 := [rewrite]: #341
#338 := (iff #304 #337)
#335 := (iff #287 #334)
#332 := (iff #281 #331)
#329 := (iff #280 #326)
#323 := (or #317 #320 #277)
#327 := (iff #323 #326)
#328 := [rewrite]: #327
#324 := (iff #280 #323)
#321 := (iff #278 #320)
#322 := [rewrite]: #321
#318 := (iff #279 #317)
#319 := [rewrite]: #318
#325 := [monotonicity #319 #322]: #324
#330 := [trans #325 #328]: #329
#333 := [monotonicity #330]: #332
#315 := (iff #273 #101)
#316 := [rewrite]: #315
#336 := [monotonicity #316 #333]: #335
#339 := [monotonicity #336]: #338
#344 := [trans #339 #342]: #343
#347 := [monotonicity #344]: #346
#350 := [quant-intro #347]: #349
#114 := (iff #74 #111)
#117 := (forall (vars (?v0 S2)) #114)
#310 := (~ #117 #309)
#307 := (~ #114 #306)
#297 := (~ #111 #111)
#295 := (~ #108 #108)
#293 := (~ #105 #105)
#294 := [refl]: #293
#296 := [nnf-pos #294]: #295
#291 := (~ #102 #102)
#292 := [refl]: #291
#298 := [monotonicity #292 #296]: #297
#288 := (not #111)
#289 := (~ #288 #287)
#283 := (~ #282 #281)
#284 := [sk]: #283
#274 := (~ #273 #273)
#275 := [refl]: #274
#290 := [nnf-neg #275 #284]: #289
#302 := (~ #74 #74)
#303 := [refl]: #302
#300 := (~ #299 #299)
#301 := [refl]: #300
#308 := [nnf-pos #301 #303 #290 #298]: #307
#311 := [nnf-pos #308]: #310
#22 := (or #20 #21)
#17 := (= #16 f1)
#23 := (implies #17 #22)
#24 := (forall (vars (?v1 S2)) #23)
#14 := (< 1::Int #13)
#25 := (and #14 #24)
#10 := (= #9 f1)
#26 := (iff #10 #25)
#27 := (forall (vars (?v0 S2)) #26)
#120 := (iff #27 #117)
#84 := (or #22 #83)
#89 := (forall (vars (?v1 S2)) #84)
#92 := (and #14 #89)
#95 := (iff #74 #92)
#98 := (forall (vars (?v0 S2)) #95)
#118 := (iff #98 #117)
#115 := (iff #95 #114)
#112 := (iff #92 #111)
#109 := (iff #89 #108)
#106 := (iff #84 #105)
#107 := [rewrite]: #106
#110 := [quant-intro #107]: #109
#103 := (iff #14 #102)
#104 := [rewrite]: #103
#113 := [monotonicity #104 #110]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#99 := (iff #27 #98)
#96 := (iff #26 #95)
#93 := (iff #25 #92)
#90 := (iff #24 #89)
#87 := (iff #23 #84)
#80 := (implies #77 #22)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #23 #80)
#78 := (iff #17 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#88 := [trans #82 #86]: #87
#91 := [quant-intro #88]: #90
#94 := [monotonicity #91]: #93
#75 := (iff #10 #74)
#76 := [rewrite]: #75
#97 := [monotonicity #76 #94]: #96
#100 := [quant-intro #97]: #99
#121 := [trans #100 #119]: #120
#73 := [asserted]: #27
#122 := [mp #73 #121]: #117
#312 := [mp~ #122 #311]: #309
#313 := [mp #312 #350]: #348
#374 := [mp #313 #373]: #371
#879 := [mp #374 #878]: #876
#531 := (not #876)
#532 := (or #531 #819)
#519 := (or #20 #518 #433)
#521 := (forall (vars (?v1 S2)) (:pat #510) #519)
#522 := (not #521)
#524 := (or #520 #522)
#503 := (not #524)
#839 := (or #144 #503)
#841 := (not #839)
#843 := (or #842 #835 #628)
#844 := (not #843)
#845 := (or #136 #520 #844)
#840 := (not #845)
#846 := (or #840 #841)
#836 := (not #846)
#810 := (or #531 #836)
#525 := (iff #810 #532)
#812 := (iff #532 #532)
#809 := [rewrite]: #812
#529 := (iff #836 #819)
#818 := (iff #846 #814)
#539 := (iff #841 #817)
#439 := (iff #839 #546)
#544 := (iff #503 #543)
#821 := (iff #524 #820)
#831 := (iff #522 #833)
#471 := (iff #521 #832)
#466 := (iff #519 #829)
#830 := [rewrite]: #466
#472 := [quant-intro #830]: #471
#834 := [monotonicity #472]: #831
#528 := [monotonicity #834]: #821
#545 := [monotonicity #528]: #544
#816 := [monotonicity #545]: #439
#540 := [monotonicity #816]: #539
#828 := (iff #840 #827)
#825 := (iff #845 #486)
#822 := (or #136 #520 #496)
#487 := (iff #822 #486)
#824 := [rewrite]: #487
#484 := (iff #845 #822)
#838 := (iff #844 #496)
#500 := (iff #843 #495)
#837 := [rewrite]: #500
#480 := [monotonicity #837]: #838
#485 := [monotonicity #480]: #484
#826 := [trans #485 #824]: #825
#823 := [monotonicity #826]: #828
#815 := [monotonicity #823 #540]: #818
#530 := [monotonicity #815]: #529
#808 := [monotonicity #530]: #525
#813 := [trans #808 #809]: #525
#811 := [quant-inst #127]: #810
#802 := [mp #811 #813]: #532
#597 := [unit-resolution #802 #879]: #819
#631 := (or #814 #546)
#779 := [def-axiom]: #631
#583 := [unit-resolution #779 #597]: #546
#585 := (or #817 #543)
#155 := (>= #30 1::Int)
#159 := (or #144 #155)
#164 := (not #159)
#36 := (<= 1::Int #30)
#32 := (+ #31 1::Int)
#33 := (f7 f8 #32)
#34 := (f3 #33)
#35 := (= #34 f1)
#37 := (implies #35 #36)
#38 := (not #37)
#167 := (iff #38 #164)
#145 := (or #36 #144)
#150 := (not #145)
#165 := (iff #150 #164)
#162 := (iff #145 #159)
#156 := (or #155 #144)
#160 := (iff #156 #159)
#161 := [rewrite]: #160
#157 := (iff #145 #156)
#153 := (iff #36 #155)
#154 := [rewrite]: #153
#158 := [monotonicity #154]: #157
#163 := [trans #158 #161]: #162
#166 := [monotonicity #163]: #165
#151 := (iff #38 #150)
#148 := (iff #37 #145)
#141 := (implies #136 #36)
#146 := (iff #141 #145)
#147 := [rewrite]: #146
#142 := (iff #37 #141)
#139 := (iff #35 #136)
#133 := (= #130 f1)
#137 := (iff #133 #136)
#138 := [rewrite]: #137
#134 := (iff #35 #133)
#131 := (= #34 #130)
#128 := (= #33 #127)
#125 := (= #32 #124)
#126 := [rewrite]: #125
#129 := [monotonicity #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#140 := [trans #135 #138]: #139
#143 := [monotonicity #140]: #142
#149 := [trans #143 #147]: #148
#152 := [monotonicity #149]: #151
#168 := [trans #152 #166]: #167
#123 := [asserted]: #38
#169 := [mp #123 #168]: #164
#170 := [not-or-elim #169]: #136
#788 := (or #817 #144 #543)
#670 := [def-axiom]: #788
#586 := [unit-resolution #670 #170]: #585
#584 := [unit-resolution #586 #583]: #543
#791 := (or #820 #795)
#798 := [def-axiom]: #791
#587 := [unit-resolution #798 #584]: #795
#571 := (or #569 #520)
#572 := [th-lemma arith farkas 1 1]: #571
#573 := [unit-resolution #572 #587]: #569
#575 := (or #574 #593)
#576 := [th-lemma arith triangle-eq]: #575
#577 := [unit-resolution #576 #573]: #574
#601 := (or #610 #632)
#43 := (:var 0 Int)
#45 := (f7 f8 #43)
#886 := (pattern #45)
#199 := (>= #43 0::Int)
#46 := (f4 f5 #45)
#51 := (= #46 0::Int)
#247 := (or #51 #199)
#893 := (forall (vars (?v0 Int)) (:pat #886) #247)
#252 := (forall (vars (?v0 Int)) #247)
#896 := (iff #252 #893)
#894 := (iff #247 #247)
#895 := [refl]: #894
#897 := [quant-intro #895]: #896
#269 := (~ #252 #252)
#352 := (~ #247 #247)
#353 := [refl]: #352
#270 := [nnf-pos #353]: #269
#50 := (< #43 0::Int)
#52 := (implies #50 #51)
#53 := (forall (vars (?v0 Int)) #52)
#255 := (iff #53 #252)
#218 := (= 0::Int #46)
#224 := (not #50)
#225 := (or #224 #218)
#230 := (forall (vars (?v0 Int)) #225)
#253 := (iff #230 #252)
#250 := (iff #225 #247)
#244 := (or #199 #51)
#248 := (iff #244 #247)
#249 := [rewrite]: #248
#245 := (iff #225 #244)
#242 := (iff #218 #51)
#243 := [rewrite]: #242
#240 := (iff #224 #199)
#200 := (not #199)
#235 := (not #200)
#238 := (iff #235 #199)
#239 := [rewrite]: #238
#236 := (iff #224 #235)
#233 := (iff #50 #200)
#234 := [rewrite]: #233
#237 := [monotonicity #234]: #236
#241 := [trans #237 #239]: #240
#246 := [monotonicity #241 #243]: #245
#251 := [trans #246 #249]: #250
#254 := [quant-intro #251]: #253
#231 := (iff #53 #230)
#228 := (iff #52 #225)
#221 := (implies #50 #218)
#226 := (iff #221 #225)
#227 := [rewrite]: #226
#222 := (iff #52 #221)
#219 := (iff #51 #218)
#220 := [rewrite]: #219
#223 := [monotonicity #220]: #222
#229 := [trans #223 #227]: #228
#232 := [quant-intro #229]: #231
#256 := [trans #232 #254]: #255
#217 := [asserted]: #53
#257 := [mp #217 #256]: #252
#354 := [mp~ #257 #270]: #252
#898 := [mp #354 #897]: #893
#607 := (not #893)
#603 := (or #607 #610 #632)
#654 := (>= #124 0::Int)
#613 := (or #610 #654)
#608 := (or #607 #613)
#599 := (iff #608 #603)
#588 := (or #607 #601)
#594 := (iff #588 #603)
#595 := [rewrite]: #594
#590 := (iff #608 #588)
#604 := (iff #613 #601)
#634 := (iff #654 #632)
#635 := [rewrite]: #634
#606 := [monotonicity #635]: #604
#591 := [monotonicity #606]: #590
#592 := [trans #591 #595]: #599
#598 := [quant-inst #124]: #608
#600 := [mp #598 #592]: #603
#578 := [unit-resolution #600 #898]: #601
#579 := [unit-resolution #578 #577]: #632
#636 := (not #632)
#643 := (or #636 #663)
#181 := (= #43 #46)
#206 := (or #181 #200)
#887 := (forall (vars (?v0 Int)) (:pat #886) #206)
#211 := (forall (vars (?v0 Int)) #206)
#890 := (iff #211 #887)
#888 := (iff #206 #206)
#889 := [refl]: #888
#891 := [quant-intro #889]: #890
#267 := (~ #211 #211)
#266 := (~ #206 #206)
#263 := [refl]: #266
#268 := [nnf-pos #263]: #267
#47 := (= #46 #43)
#44 := (<= 0::Int #43)
#48 := (implies #44 #47)
#49 := (forall (vars (?v0 Int)) #48)
#214 := (iff #49 #211)
#188 := (not #44)
#189 := (or #188 #181)
#194 := (forall (vars (?v0 Int)) #189)
#212 := (iff #194 #211)
#209 := (iff #189 #206)
#203 := (or #200 #181)
#207 := (iff #203 #206)
#208 := [rewrite]: #207
#204 := (iff #189 #203)
#201 := (iff #188 #200)
#197 := (iff #44 #199)
#198 := [rewrite]: #197
#202 := [monotonicity #198]: #201
#205 := [monotonicity #202]: #204
#210 := [trans #205 #208]: #209
#213 := [quant-intro #210]: #212
#195 := (iff #49 #194)
#192 := (iff #48 #189)
#185 := (implies #44 #181)
#190 := (iff #185 #189)
#191 := [rewrite]: #190
#186 := (iff #48 #185)
#183 := (iff #47 #181)
#184 := [rewrite]: #183
#187 := [monotonicity #184]: #186
#193 := [trans #187 #191]: #192
#196 := [quant-intro #193]: #195
#215 := [trans #196 #213]: #214
#180 := [asserted]: #49
#216 := [mp #180 #215]: #211
#264 := [mp~ #216 #268]: #211
#892 := [mp #264 #891]: #887
#616 := (not #887)
#617 := (or #616 #636 #663)
#655 := (not #654)
#659 := (= #124 #523)
#660 := (or #659 #655)
#619 := (or #616 #660)
#602 := (iff #619 #617)
#621 := (or #616 #643)
#618 := (iff #621 #617)
#623 := [rewrite]: #618
#463 := (iff #619 #621)
#614 := (iff #660 #643)
#640 := (or #663 #636)
#626 := (iff #640 #643)
#644 := [rewrite]: #626
#641 := (iff #660 #640)
#638 := (iff #655 #636)
#639 := [monotonicity #635]: #638
#624 := (iff #659 #663)
#625 := [rewrite]: #624
#642 := [monotonicity #625 #639]: #641
#615 := [trans #642 #644]: #614
#622 := [monotonicity #615]: #463
#605 := [trans #622 #623]: #602
#620 := [quant-inst #124]: #619
#609 := [mp #620 #605]: #617
#580 := [unit-resolution #609 #892]: #643
#581 := [unit-resolution #580 #579]: #663
#570 := (not #663)
#582 := (or #570 #612)
#559 := [th-lemma arith triangle-eq]: #582
#561 := [unit-resolution #559 #581]: #612
#171 := (not #155)
#172 := [not-or-elim #169]: #171
[th-lemma arith farkas -4 1 1 #172 #587 #561]: false
unsat
8bbf55cbd9308f9edfe0203d9100aace31ed1b8b 63 0
#2 := false
decl f8 :: S2
#19 := f8
decl f6 :: S2
#15 := f6
#21 := (= f6 f8)
decl f3 :: (-> S4 S5 S2)
decl f5 :: (-> S2 S3 S5)
decl f7 :: S3
#16 := f7
#17 := (f5 f6 f7)
decl f4 :: S4
#8 := f4
#18 := (f3 f4 #17)
#20 := (= #18 f8)
#51 := (not #20)
#53 := (or #51 #21)
#56 := (not #53)
#22 := (implies #20 #21)
#23 := (not #22)
#57 := (iff #23 #56)
#54 := (iff #22 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#50 := [asserted]: #23
#61 := [mp #50 #58]: #56
#59 := [not-or-elim #61]: #20
#126 := (= f6 #18)
#10 := (:var 0 S3)
#9 := (:var 1 S2)
#11 := (f5 #9 #10)
#544 := (pattern #11)
#12 := (f3 f4 #11)
#44 := (= #9 #12)
#545 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #544) #44)
#47 := (forall (vars (?v0 S2) (?v1 S3)) #44)
#548 := (iff #47 #545)
#546 := (iff #44 #44)
#547 := [refl]: #546
#549 := [quant-intro #547]: #548
#74 := (~ #47 #47)
#72 := (~ #44 #44)
#73 := [refl]: #72
#75 := [nnf-pos #73]: #74
#13 := (= #12 #9)
#14 := (forall (vars (?v0 S2) (?v1 S3)) #13)
#48 := (iff #14 #47)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#49 := [quant-intro #46]: #48
#43 := [asserted]: #14
#52 := [mp #43 #49]: #47
#64 := [mp~ #52 #75]: #47
#550 := [mp #64 #549]: #545
#214 := (not #545)
#128 := (or #214 #126)
#215 := [quant-inst #15 #16]: #128
#213 := [unit-resolution #215 #550]: #126
#127 := [trans #213 #59]: #21
#60 := (not #21)
#62 := [not-or-elim #61]: #60
[unit-resolution #62 #127]: false
unsat
995e3c8bb1366c3ddfd69a100721f0bf4e72ec56 120 0
#2 := false
decl f11 :: (-> S9 S5 S3)
decl f16 :: S5
#35 := f16
decl f12 :: S9
#26 := f12
#40 := (f11 f12 f16)
decl f6 :: (-> S6 S7 S3)
decl f13 :: S7
#30 := f13
decl f7 :: S6
#15 := f7
#39 := (f6 f7 f13)
#41 := (= #39 #40)
decl f5 :: (-> S2 S3 S5)
decl f14 :: S3
#31 := f14
decl f15 :: S2
#32 := f15
#36 := (f5 f15 f14)
#188 := (f11 f12 #36)
#252 := (= #188 #40)
#604 := (= #40 #188)
#37 := (= f16 #36)
decl f8 :: (-> S3 S2 S7)
#33 := (f8 f14 f15)
#34 := (= f13 #33)
#38 := (and #34 #37)
#95 := (not #38)
#97 := (or #95 #41)
#100 := (not #97)
#42 := (implies #38 #41)
#43 := (not #42)
#101 := (iff #43 #100)
#98 := (iff #42 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#94 := [asserted]: #43
#105 := [mp #94 #102]: #100
#103 := [not-or-elim #105]: #38
#106 := [and-elim #103]: #37
#594 := [monotonicity #106]: #604
#257 := [symm #594]: #252
#596 := (= #39 #188)
#275 := (= f14 #188)
#10 := (:var 0 S3)
#9 := (:var 1 S2)
#11 := (f5 #9 #10)
#605 := (pattern #11)
#27 := (f11 f12 #11)
#87 := (= #10 #27)
#625 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #605) #87)
#91 := (forall (vars (?v0 S2) (?v1 S3)) #87)
#628 := (iff #91 #625)
#626 := (iff #87 #87)
#627 := [refl]: #626
#629 := [quant-intro #627]: #628
#116 := (~ #91 #91)
#135 := (~ #87 #87)
#136 := [refl]: #135
#117 := [nnf-pos #136]: #116
#28 := (= #27 #10)
#29 := (forall (vars (?v0 S2) (?v1 S3)) #28)
#92 := (iff #29 #91)
#89 := (iff #28 #87)
#90 := [rewrite]: #89
#93 := [quant-intro #90]: #92
#86 := [asserted]: #29
#96 := [mp #86 #93]: #91
#137 := [mp~ #96 #117]: #91
#630 := [mp #137 #629]: #625
#207 := (not #625)
#280 := (or #207 #275)
#277 := [quant-inst #32 #31]: #280
#386 := [unit-resolution #277 #630]: #275
#595 := (= #39 f14)
#278 := (f6 f7 #33)
#603 := (= #278 f14)
#279 := (= f14 #278)
#17 := (:var 0 S2)
#16 := (:var 1 S3)
#18 := (f8 #16 #17)
#612 := (pattern #18)
#19 := (f6 f7 #18)
#71 := (= #16 #19)
#613 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #612) #71)
#75 := (forall (vars (?v0 S3) (?v1 S2)) #71)
#616 := (iff #75 #613)
#614 := (iff #71 #71)
#615 := [refl]: #614
#617 := [quant-intro #615]: #616
#112 := (~ #75 #75)
#111 := (~ #71 #71)
#130 := [refl]: #111
#113 := [nnf-pos #130]: #112
#20 := (= #19 #16)
#21 := (forall (vars (?v0 S3) (?v1 S2)) #20)
#76 := (iff #21 #75)
#73 := (iff #20 #71)
#74 := [rewrite]: #73
#77 := [quant-intro #74]: #76
#70 := [asserted]: #21
#80 := [mp #70 #77]: #75
#131 := [mp~ #80 #113]: #75
#618 := [mp #131 #617]: #613
#597 := (not #613)
#599 := (or #597 #279)
#254 := [quant-inst #31 #32]: #599
#593 := [unit-resolution #254 #618]: #279
#598 := [symm #593]: #603
#601 := (= #39 #278)
#104 := [and-elim #103]: #34
#602 := [monotonicity #104]: #601
#253 := [trans #602 #598]: #595
#237 := [trans #253 #386]: #596
#580 := [trans #237 #257]: #41
#107 := (not #41)
#108 := [not-or-elim #105]: #107
[unit-resolution #108 #580]: false
unsat
29cfa5c687980cc2eca5b8b3a0340a9f66137754 203 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f8 :: S3
#31 := f8
decl f11 :: S2
#39 := f11
#49 := (f3 f11 f8)
decl f4 :: (-> S5 S4 S2)
decl f13 :: S4
#46 := f13
decl f5 :: (-> S6 S3 S5)
decl f10 :: S3
#35 := f10
decl f6 :: (-> S7 S2 S6)
decl f12 :: S4
#42 := f12
decl f9 :: S3
#32 := f9
decl f7 :: S7
#8 := f7
#40 := (f6 f7 f11)
#41 := (f5 #40 f9)
#43 := (f4 #41 f12)
#44 := (f6 f7 #43)
#45 := (f5 #44 f10)
#47 := (f4 #45 f13)
#48 := (f3 #47 f8)
#50 := (= #48 #49)
#185 := (f3 #43 f9)
#582 := (f4 #41 #185)
#550 := (f3 #582 f8)
#551 := (= #550 #49)
#554 := (= #49 #550)
#545 := (= #185 #550)
#33 := (= f8 f9)
#386 := (ite #33 #545 #554)
#24 := (:var 0 S3)
#22 := (:var 1 S4)
#20 := (:var 2 S3)
#18 := (:var 3 S2)
#19 := (f6 f7 #18)
#21 := (f5 #19 #20)
#23 := (f4 #21 #22)
#25 := (f3 #23 #24)
#610 := (pattern #25)
#27 := (f3 #18 #24)
#128 := (= #25 #27)
#127 := (= #22 #25)
#80 := (= #20 #24)
#113 := (ite #80 #127 #128)
#611 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #610) #113)
#120 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #113)
#614 := (iff #120 #611)
#612 := (iff #113 #113)
#613 := [refl]: #612
#615 := [quant-intro #613]: #614
#84 := (ite #80 #22 #27)
#87 := (= #25 #84)
#90 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #87)
#117 := (iff #90 #120)
#114 := (iff #87 #113)
#119 := [rewrite]: #114
#118 := [quant-intro #119]: #117
#111 := (~ #90 #90)
#110 := (~ #87 #87)
#125 := [refl]: #110
#112 := [nnf-pos #125]: #111
#26 := (= #24 #20)
#28 := (ite #26 #22 #27)
#29 := (= #25 #28)
#30 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #29)
#91 := (iff #30 #90)
#88 := (iff #29 #87)
#85 := (= #28 #84)
#82 := (iff #26 #80)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#89 := [monotonicity #86]: #88
#92 := [quant-intro #89]: #91
#79 := [asserted]: #30
#95 := [mp #79 #92]: #90
#126 := [mp~ #95 #112]: #90
#115 := [mp #126 #118]: #120
#616 := [mp #115 #615]: #611
#263 := (not #611)
#542 := (or #263 #386)
#546 := (= f9 f8)
#552 := (ite #546 #545 #551)
#543 := (or #263 #552)
#544 := (iff #543 #542)
#427 := (iff #542 #542)
#428 := [rewrite]: #427
#539 := (iff #552 #386)
#383 := (iff #551 #554)
#385 := [rewrite]: #383
#553 := (iff #546 #33)
#547 := [rewrite]: #553
#540 := [monotonicity #547 #385]: #539
#426 := [monotonicity #540]: #544
#387 := [trans #426 #428]: #544
#541 := [quant-inst #39 #32 #185 #31]: #543
#535 := [mp #541 #387]: #542
#538 := [unit-resolution #535 #616]: #386
#437 := (not #386)
#525 := (or #437 #554)
#34 := (not #33)
#36 := (= f8 f10)
#37 := (not #36)
#38 := (and #34 #37)
#94 := (not #38)
#96 := (or #94 #50)
#99 := (not #96)
#51 := (implies #38 #50)
#52 := (not #51)
#100 := (iff #52 #99)
#97 := (iff #51 #96)
#98 := [rewrite]: #97
#101 := [monotonicity #98]: #100
#93 := [asserted]: #52
#104 := [mp #93 #101]: #99
#102 := [not-or-elim #104]: #38
#103 := [and-elim #102]: #34
#536 := (or #437 #33 #554)
#421 := [def-axiom]: #536
#527 := [unit-resolution #421 #103]: #525
#519 := [unit-resolution #527 #538]: #554
#521 := [symm #519]: #551
#522 := (= #48 #550)
#276 := (f3 #43 f8)
#531 := (= #276 #550)
#530 := (= #550 #276)
#537 := (= #582 #43)
#443 := (= #185 f12)
#272 := (= f12 #185)
#13 := (:var 0 S4)
#11 := (:var 1 S3)
#9 := (:var 2 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#14 := (f4 #12 #13)
#603 := (pattern #14)
#15 := (f3 #14 #11)
#73 := (= #13 #15)
#604 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #603) #73)
#76 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #73)
#607 := (iff #76 #604)
#605 := (iff #73 #73)
#606 := [refl]: #605
#608 := [quant-intro #606]: #607
#123 := (~ #76 #76)
#121 := (~ #73 #73)
#122 := [refl]: #121
#124 := [nnf-pos #122]: #123
#16 := (= #15 #13)
#17 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #16)
#77 := (iff #17 #76)
#74 := (iff #16 #73)
#75 := [rewrite]: #74
#78 := [quant-intro #75]: #77
#72 := [asserted]: #17
#81 := [mp #72 #78]: #76
#109 := [mp~ #81 #124]: #76
#609 := [mp #109 #608]: #604
#187 := (not #604)
#274 := (or #187 #272)
#265 := [quant-inst #39 #32 #42]: #274
#442 := [unit-resolution #265 #609]: #272
#444 := [symm #442]: #443
#534 := [monotonicity #444]: #537
#526 := [monotonicity #534]: #530
#520 := [symm #526]: #531
#277 := (= #48 #276)
#275 := (= f13 #48)
#252 := (ite #36 #275 #277)
#264 := (or #263 #252)
#279 := (= f10 f8)
#258 := (ite #279 #275 #277)
#598 := (or #263 #258)
#600 := (iff #598 #264)
#596 := (iff #264 #264)
#602 := [rewrite]: #596
#384 := (iff #258 #252)
#595 := (iff #279 #36)
#597 := [rewrite]: #595
#591 := [monotonicity #597]: #384
#601 := [monotonicity #591]: #600
#592 := [trans #601 #602]: #600
#599 := [quant-inst #43 #35 #46 #31]: #598
#250 := [mp #599 #592]: #264
#516 := [unit-resolution #250 #616]: #252
#255 := (not #252)
#518 := (or #255 #277)
#105 := [and-elim #102]: #37
#594 := (or #255 #36 #277)
#235 := [def-axiom]: #594
#528 := [unit-resolution #235 #105]: #518
#529 := [unit-resolution #528 #516]: #277
#523 := [trans #529 #520]: #522
#517 := [trans #523 #521]: #50
#106 := (not #50)
#107 := [not-or-elim #104]: #106
[unit-resolution #107 #517]: false
unsat
10c4eb4ff6b9f0c880cfc3af0cd433a1ff110114 96 0
#2 := false
decl f6 :: (-> S2 S3 S1)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#12 := (f6 f4 f5)
decl f1 :: S1
#4 := f1
#44 := (= f1 #12)
decl f3 :: (-> S2 S3 S1)
#10 := (f3 f4 f5)
#41 := (= f1 #10)
#54 := (iff #41 #44)
#93 := (not #54)
#114 := (iff #93 false)
#1 := true
#109 := (not true)
#112 := (iff #109 false)
#113 := [rewrite]: #112
#110 := (iff #93 #109)
#107 := (iff #54 true)
#102 := (iff false false)
#105 := (iff #102 true)
#106 := [rewrite]: #105
#103 := (iff #54 #102)
#100 := (iff #44 false)
#91 := (not #44)
#80 := (or #41 #44 #54)
#83 := (not #80)
#13 := (= #12 f1)
#17 := (iff #13 true)
#11 := (= #10 f1)
#16 := (iff #11 true)
#18 := (or #16 #17)
#14 := (and #13 true)
#15 := (iff #11 #14)
#19 := (or #15 #18)
#20 := (not #19)
#86 := (iff #20 #83)
#71 := (or #41 #44)
#74 := (or #54 #71)
#77 := (not #74)
#84 := (iff #77 #83)
#81 := (iff #74 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#78 := (iff #20 #77)
#75 := (iff #19 #74)
#72 := (iff #18 #71)
#69 := (iff #17 #44)
#64 := (iff #44 true)
#67 := (iff #64 #44)
#68 := [rewrite]: #67
#65 := (iff #17 #64)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#66 := [monotonicity #46]: #65
#70 := [trans #66 #68]: #69
#62 := (iff #16 #41)
#57 := (iff #41 true)
#60 := (iff #57 #41)
#61 := [rewrite]: #60
#58 := (iff #16 #57)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#59 := [monotonicity #43]: #58
#63 := [trans #59 #61]: #62
#73 := [monotonicity #63 #70]: #72
#55 := (iff #15 #54)
#52 := (iff #14 #44)
#47 := (and #44 true)
#50 := (iff #47 #44)
#51 := [rewrite]: #50
#48 := (iff #14 #47)
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #43 #53]: #55
#76 := [monotonicity #56 #73]: #75
#79 := [monotonicity #76]: #78
#87 := [trans #79 #85]: #86
#40 := [asserted]: #20
#88 := [mp #40 #87]: #83
#92 := [not-or-elim #88]: #91
#101 := [iff-false #92]: #100
#98 := (iff #41 false)
#89 := (not #41)
#90 := [not-or-elim #88]: #89
#99 := [iff-false #90]: #98
#104 := [monotonicity #99 #101]: #103
#108 := [trans #104 #106]: #107
#111 := [monotonicity #108]: #110
#115 := [trans #111 #113]: #114
#94 := [not-or-elim #88]: #93
[mp #94 #115]: false
unsat
8821f61b34007b1fd5b5c2b393b7f6276c9650d7 144 0
#2 := false
decl f5 :: (-> S4 S3 S3)
decl f7 :: (-> S5 Int S3)
decl f9 :: (-> Int Int)
decl f10 :: Int
#21 := f10
#22 := (f9 f10)
#23 := (f9 #22)
decl f8 :: S5
#20 := f8
#24 := (f7 f8 #23)
decl f6 :: S4
#15 := f6
#25 := (f5 f6 #24)
#73 := (= #24 #25)
#109 := (not #73)
decl f3 :: (-> S2 S1 S1)
decl f1 :: S1
#4 := f1
decl f4 :: S2
#8 := f4
#27 := (f3 f4 f1)
#77 := (= f1 #27)
#110 := (not #77)
#582 := [hypothesis]: #110
#9 := (:var 0 S1)
#10 := (f3 f4 #9)
#594 := (pattern #10)
#55 := (= f1 #9)
#52 := (= f1 #10)
#58 := (iff #52 #55)
#595 := (forall (vars (?v0 S1)) (:pat #594) #58)
#61 := (forall (vars (?v0 S1)) #58)
#598 := (iff #61 #595)
#596 := (iff #58 #58)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#105 := (~ #61 #61)
#103 := (~ #58 #58)
#104 := [refl]: #103
#106 := [nnf-pos #104]: #105
#12 := (= #9 f1)
#11 := (= #10 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1)) #13)
#62 := (iff #14 #61)
#59 := (iff #13 #58)
#56 := (iff #12 #55)
#57 := [rewrite]: #56
#53 := (iff #11 #52)
#54 := [rewrite]: #53
#60 := [monotonicity #54 #57]: #59
#63 := [quant-intro #60]: #62
#51 := [asserted]: #14
#66 := [mp #51 #63]: #61
#94 := [mp~ #66 #106]: #61
#600 := [mp #94 #599]: #595
#268 := (not #595)
#196 := (or #268 #77)
#176 := (= f1 f1)
#263 := (iff #77 #176)
#269 := (or #268 #263)
#270 := (iff #269 #196)
#586 := (iff #196 #196)
#588 := [rewrite]: #586
#256 := (iff #263 #77)
#1 := true
#80 := (iff #77 true)
#83 := (iff #80 #77)
#84 := [rewrite]: #83
#178 := (iff #263 #80)
#177 := (iff #176 true)
#264 := [rewrite]: #177
#265 := [monotonicity #264]: #178
#267 := [trans #265 #84]: #256
#249 := [monotonicity #267]: #270
#243 := [trans #249 #588]: #270
#266 := [quant-inst #4]: #269
#375 := [mp #266 #243]: #196
#254 := [unit-resolution #375 #600 #582]: false
#255 := [lemma #254]: #77
#99 := (or #109 #110)
#87 := (and #73 #77)
#90 := (not #87)
#116 := (iff #90 #99)
#100 := (not #99)
#111 := (not #100)
#114 := (iff #111 #99)
#115 := [rewrite]: #114
#112 := (iff #90 #111)
#101 := (iff #87 #100)
#102 := [rewrite]: #101
#113 := [monotonicity #102]: #112
#117 := [trans #113 #115]: #116
#28 := (= #27 f1)
#29 := (iff #28 true)
#26 := (= #25 #24)
#30 := (and #26 #29)
#31 := (not #30)
#91 := (iff #31 #90)
#88 := (iff #30 #87)
#85 := (iff #29 #77)
#81 := (iff #29 #80)
#78 := (iff #28 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#86 := [trans #82 #84]: #85
#75 := (iff #26 #73)
#76 := [rewrite]: #75
#89 := [monotonicity #76 #86]: #88
#92 := [monotonicity #89]: #91
#72 := [asserted]: #31
#95 := [mp #72 #92]: #90
#118 := [mp #95 #117]: #99
#589 := [unit-resolution #118 #255]: #109
#16 := (:var 0 S3)
#17 := (f5 f6 #16)
#601 := (pattern #17)
#65 := (= #16 #17)
#602 := (forall (vars (?v0 S3)) (:pat #601) #65)
#69 := (forall (vars (?v0 S3)) #65)
#605 := (iff #69 #602)
#603 := (iff #65 #65)
#604 := [refl]: #603
#606 := [quant-intro #604]: #605
#97 := (~ #69 #69)
#96 := (~ #65 #65)
#107 := [refl]: #96
#98 := [nnf-pos #107]: #97
#18 := (= #17 #16)
#19 := (forall (vars (?v0 S3)) #18)
#70 := (iff #19 #69)
#67 := (iff #18 #65)
#68 := [rewrite]: #67
#71 := [quant-intro #68]: #70
#64 := [asserted]: #19
#74 := [mp #64 #71]: #69
#108 := [mp~ #74 #98]: #69
#607 := [mp #108 #606]: #602
#591 := (not #602)
#592 := (or #591 #73)
#587 := [quant-inst #24]: #592
[unit-resolution #587 #607 #589]: false
unsat
c2e9404480cb814492148c359fbbbb3b0e606571 54 0
#2 := false
#1 := true
decl f1 :: S1
#4 := f1
decl f3 :: (-> S1 S1)
decl f2 :: S1
#5 := f2
decl f4 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f4 #8)
#10 := (= #9 f1)
#11 := (exists (vars (?v0 S2)) #10)
#12 := (ite #11 f1 f2)
#13 := (f3 #12)
#14 := (= #13 f1)
#15 := (implies #14 true)
#16 := (not #15)
#69 := (iff #16 false)
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #16 #64)
#62 := (iff #15 true)
#37 := (= f1 #9)
#40 := (exists (vars (?v0 S2)) #37)
#43 := (ite #40 f1 f2)
#46 := (f3 #43)
#52 := (= f1 #46)
#57 := (implies #52 true)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #15 #57)
#55 := (iff #14 #52)
#49 := (= #46 f1)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (= #13 #46)
#44 := (= #12 #43)
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [quant-intro #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#36 := [asserted]: #16
[mp #36 #70]: false
unsat
343488aeda93da0c02f8ac1558cbc54ab37a2bb9 54 0
#2 := false
#1 := true
decl f1 :: S1
#4 := f1
decl f3 :: (-> S1 S1)
decl f2 :: S1
#5 := f2
decl f4 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f4 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (ite #11 f1 f2)
#13 := (f3 #12)
#14 := (= #13 f1)
#15 := (implies #14 true)
#16 := (not #15)
#69 := (iff #16 false)
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #16 #64)
#62 := (iff #15 true)
#37 := (= f1 #9)
#40 := (forall (vars (?v0 S2)) #37)
#43 := (ite #40 f1 f2)
#46 := (f3 #43)
#52 := (= f1 #46)
#57 := (implies #52 true)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #15 #57)
#55 := (iff #14 #52)
#49 := (= #46 f1)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (= #13 #46)
#44 := (= #12 #43)
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [quant-intro #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#36 := [asserted]: #16
[mp #36 #70]: false
unsat
46a14fd6aa65cfd8a30d4b0b44a855a19c19f288 8 0
#2 := false
#1 := true
#24 := (not true)
#53 := (iff #24 false)
#55 := [rewrite]: #53
#52 := [asserted]: #24
[mp #52 #55]: false
unsat
ad406fc43130e24f380abadc1fc8a246fab490af 145 0
#2 := false
decl f3 :: (-> S2 Int S1)
#22 := 42::Int
decl f4 :: (-> S3 Int S2)
#20 := 3::Int
decl f6 :: S3
#18 := f6
#21 := (f4 f6 3::Int)
#23 := (f3 #21 42::Int)
decl f1 :: S1
#4 := f1
#86 := (= f1 #23)
decl f5 :: S3
#8 := f5
#255 := (f4 f5 3::Int)
#246 := (f3 #255 42::Int)
#568 := (= #246 #23)
#207 := (= #23 #246)
#202 := (= #21 #255)
#558 := (= #255 #21)
#83 := (= f5 f6)
#92 := (not #83)
#93 := (or #92 #86)
#98 := (not #93)
#24 := (= #23 f1)
#19 := (= f6 f5)
#25 := (implies #19 #24)
#26 := (not #25)
#99 := (iff #26 #98)
#96 := (iff #25 #93)
#89 := (implies #83 #86)
#94 := (iff #89 #93)
#95 := [rewrite]: #94
#90 := (iff #25 #89)
#87 := (iff #24 #86)
#88 := [rewrite]: #87
#84 := (iff #19 #83)
#85 := [rewrite]: #84
#91 := [monotonicity #85 #88]: #90
#97 := [trans #91 #95]: #96
#100 := [monotonicity #97]: #99
#82 := [asserted]: #26
#103 := [mp #82 #100]: #98
#101 := [not-or-elim #103]: #83
#564 := [monotonicity #101]: #558
#565 := [symm #564]: #202
#208 := [monotonicity #565]: #207
#566 := [symm #208]: #568
#257 := (= f1 #246)
#11 := (:var 0 Int)
#9 := (:var 1 Int)
#10 := (f4 f5 #9)
#12 := (f3 #10 #11)
#13 := (pattern #12)
#64 := 0::Int
#61 := -1::Int
#62 := (* -1::Int #11)
#63 := (+ #9 #62)
#65 := (<= #63 0::Int)
#47 := (= f1 #12)
#71 := (iff #47 #65)
#76 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #13) #71)
#116 := (~ #76 #76)
#114 := (~ #71 #71)
#115 := [refl]: #114
#117 := [nnf-pos #115]: #116
#15 := (<= #9 #11)
#14 := (= #12 f1)
#16 := (iff #14 #15)
#17 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #13) #16)
#79 := (iff #17 #76)
#53 := (iff #15 #47)
#58 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #13) #53)
#77 := (iff #58 #76)
#74 := (iff #53 #71)
#68 := (iff #65 #47)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #53 #68)
#66 := (iff #15 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [quant-intro #75]: #77
#59 := (iff #17 #58)
#56 := (iff #16 #53)
#50 := (iff #47 #15)
#54 := (iff #50 #53)
#55 := [rewrite]: #54
#51 := (iff #16 #50)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#57 := [trans #52 #55]: #56
#60 := [quant-intro #57]: #59
#80 := [trans #60 #78]: #79
#46 := [asserted]: #17
#81 := [mp #46 #80]: #76
#106 := [mp~ #81 #117]: #76
#557 := (not #76)
#220 := (or #557 #257)
#168 := (* -1::Int 42::Int)
#253 := (+ 3::Int #168)
#254 := (<= #253 0::Int)
#258 := (iff #257 #254)
#221 := (or #557 #258)
#223 := (iff #221 #220)
#560 := (iff #220 #220)
#561 := [rewrite]: #560
#573 := (iff #258 #257)
#1 := true
#571 := (iff #257 true)
#572 := (iff #571 #257)
#232 := [rewrite]: #572
#231 := (iff #258 #571)
#575 := (iff #254 true)
#576 := -39::Int
#245 := (<= -39::Int 0::Int)
#579 := (iff #245 true)
#580 := [rewrite]: #579
#577 := (iff #254 #245)
#570 := (= #253 -39::Int)
#186 := -42::Int
#260 := (+ 3::Int -42::Int)
#233 := (= #260 -39::Int)
#363 := [rewrite]: #233
#239 := (= #253 #260)
#259 := (= #168 -42::Int)
#256 := [rewrite]: #259
#574 := [monotonicity #256]: #239
#244 := [trans #574 #363]: #570
#578 := [monotonicity #244]: #577
#581 := [trans #578 #580]: #575
#236 := [monotonicity #581]: #231
#216 := [trans #236 #232]: #573
#559 := [monotonicity #216]: #223
#562 := [trans #559 #561]: #223
#222 := [quant-inst #20 #22]: #221
#563 := [mp #222 #562]: #220
#567 := [unit-resolution #563 #106]: #257
#569 := [trans #567 #566]: #86
#102 := (not #86)
#104 := [not-or-elim #103]: #102
[unit-resolution #104 #569]: false
unsat
a5a23002374b3531b57fc274b72111cc0f0bdd3e 456 0
#2 := false
decl f9 :: (-> S6 S7 S7)
decl f12 :: S7
#23 := f12
decl f20 :: (-> S16 S2 S6)
decl f5 :: (-> S4 Int S2)
#86 := 2::Int
decl f6 :: S4
#12 := f6
#87 := (f5 f6 2::Int)
decl f21 :: S16
#42 := f21
#88 := (f20 f21 #87)
#89 := (f9 #88 f12)
#15 := 1::Int
#81 := (f5 f6 1::Int)
#82 := (f20 f21 #81)
#90 := (f9 #82 #89)
#83 := (f9 #82 f12)
#78 := 0::Int
#79 := (f5 f6 0::Int)
#80 := (f20 f21 #79)
#84 := (f9 #80 #83)
decl f10 :: (-> S8 S3 S6)
decl f4 :: S3
#8 := f4
decl f11 :: S8
#20 := f11
#77 := (f10 f11 f4)
#85 := (f9 #77 #84)
#91 := (= #85 #90)
#362 := (f9 #77 #83)
decl f3 :: (-> S3 S2 S2)
#447 := (f3 f4 #79)
#451 := (f20 f21 #447)
#452 := (f9 #451 #362)
#372 := (= #452 #90)
#379 := (= #90 #452)
#428 := (= #89 #362)
#361 := (f9 #77 f12)
#701 := (f9 #82 #361)
#702 := (f9 #77 #701)
#443 := (= #702 #362)
#441 := (= #362 #702)
#496 := (= #83 #701)
#494 := (= #701 #83)
#490 := (= #361 f12)
#446 := (= f12 #361)
#21 := (:var 0 S3)
#22 := (f10 f11 #21)
#776 := (pattern #22)
#24 := (f9 #22 f12)
#140 := (= f12 #24)
#777 := (forall (vars (?v0 S3)) (:pat #776) #140)
#144 := (forall (vars (?v0 S3)) #140)
#780 := (iff #144 #777)
#778 := (iff #140 #140)
#779 := [refl]: #778
#781 := [quant-intro #779]: #780
#256 := (~ #144 #144)
#255 := (~ #140 #140)
#282 := [refl]: #255
#257 := [nnf-pos #282]: #256
#25 := (= #24 f12)
#26 := (forall (vars (?v0 S3)) #25)
#145 := (iff #26 #144)
#142 := (iff #25 #140)
#143 := [rewrite]: #142
#146 := [quant-intro #143]: #145
#139 := [asserted]: #26
#149 := [mp #139 #146]: #144
#283 := [mp~ #149 #257]: #144
#782 := [mp #283 #781]: #777
#448 := (not #777)
#439 := (or #448 #446)
#450 := [quant-inst #8]: #439
#488 := [unit-resolution #450 #782]: #446
#493 := [symm #488]: #490
#495 := [monotonicity #493]: #494
#489 := [symm #495]: #496
#442 := [monotonicity #489]: #441
#444 := [symm #442]: #443
#434 := (= #89 #702)
#700 := (f9 #77 #361)
#692 := (f3 f4 #81)
#689 := (f20 f21 #692)
#691 := (f9 #689 #700)
#699 := (= #691 #702)
#45 := (:var 0 S7)
#40 := (:var 2 S3)
#41 := (f10 f11 #40)
#50 := (f9 #41 #45)
#43 := (:var 1 S2)
#48 := (f3 #40 #43)
#49 := (f20 f21 #48)
#51 := (f9 #49 #50)
#798 := (pattern #51)
#44 := (f20 f21 #43)
#46 := (f9 #44 #45)
#47 := (f9 #41 #46)
#797 := (pattern #47)
#52 := (= #47 #51)
#799 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S7)) (:pat #797 #798) #52)
#53 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S7)) #52)
#802 := (iff #53 #799)
#800 := (iff #52 #52)
#801 := [refl]: #800
#803 := [quant-intro #801]: #802
#262 := (~ #53 #53)
#290 := (~ #52 #52)
#291 := [refl]: #290
#263 := [nnf-pos #291]: #262
#163 := [asserted]: #53
#292 := [mp~ #163 #263]: #53
#804 := [mp #292 #803]: #799
#768 := (not #799)
#694 := (or #768 #699)
#703 := (= #702 #691)
#695 := (or #768 #703)
#690 := (iff #695 #694)
#681 := (iff #694 #694)
#682 := [rewrite]: #681
#704 := (iff #703 #699)
#693 := [rewrite]: #704
#697 := [monotonicity #693]: #690
#684 := [trans #697 #682]: #690
#696 := [quant-inst #8 #81 #361]: #695
#685 := [mp #696 #684]: #694
#497 := [unit-resolution #685 #804]: #699
#427 := (= #89 #691)
#485 := (= f12 #700)
#484 := (= #361 #700)
#482 := (= #700 #361)
#483 := [monotonicity #493]: #482
#486 := [symm #483]: #484
#487 := [trans #488 #486]: #485
#435 := (= #88 #689)
#467 := (= #87 #692)
decl f7 :: (-> S5 S2 Int)
decl f8 :: S5
#13 := f8
#474 := (f7 f8 #81)
#679 := (+ 1::Int #474)
#676 := (f5 f6 #679)
#660 := (= #676 #692)
#9 := (:var 0 S2)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#14 := (f7 f8 #9)
#127 := (+ 1::Int #14)
#130 := (f5 f6 #127)
#133 := (= #10 #130)
#136 := (forall (vars (?v0 S2)) (:pat #11) #133)
#280 := (~ #136 #136)
#278 := (~ #133 #133)
#279 := [refl]: #278
#281 := [nnf-pos #279]: #280
#16 := (+ #14 1::Int)
#17 := (f5 f6 #16)
#18 := (= #10 #17)
#19 := (forall (vars (?v0 S2)) (:pat #11) #18)
#137 := (iff #19 #136)
#134 := (iff #18 #133)
#131 := (= #17 #130)
#128 := (= #16 #127)
#129 := [rewrite]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [quant-intro #135]: #137
#126 := [asserted]: #19
#141 := [mp #126 #138]: #136
#254 := [mp~ #141 #281]: #136
#675 := (not #136)
#664 := (or #675 #660)
#680 := (= #692 #676)
#665 := (or #675 #680)
#667 := (iff #665 #664)
#669 := (iff #664 #664)
#670 := [rewrite]: #669
#661 := (iff #680 #660)
#663 := [rewrite]: #661
#668 := [monotonicity #663]: #667
#671 := [trans #668 #670]: #667
#666 := [quant-inst #81]: #665
#672 := [mp #666 #671]: #664
#476 := [unit-resolution #672 #254]: #660
#466 := (= #87 #676)
#455 := (= 2::Int #679)
#463 := (= #679 2::Int)
#619 := (<= #474 1::Int)
#468 := (= #474 1::Int)
#96 := (:var 0 Int)
#98 := (f5 f6 #96)
#828 := (pattern #98)
#194 := (>= #96 0::Int)
#195 := (not #194)
#99 := (f7 f8 #98)
#176 := (= #96 #99)
#201 := (or #176 #195)
#829 := (forall (vars (?v0 Int)) (:pat #828) #201)
#206 := (forall (vars (?v0 Int)) #201)
#832 := (iff #206 #829)
#830 := (iff #201 #201)
#831 := [refl]: #830
#833 := [quant-intro #831]: #832
#272 := (~ #206 #206)
#271 := (~ #201 #201)
#301 := [refl]: #271
#273 := [nnf-pos #301]: #272
#100 := (= #99 #96)
#97 := (<= 0::Int #96)
#101 := (implies #97 #100)
#102 := (forall (vars (?v0 Int)) #101)
#209 := (iff #102 #206)
#183 := (not #97)
#184 := (or #183 #176)
#189 := (forall (vars (?v0 Int)) #184)
#207 := (iff #189 #206)
#204 := (iff #184 #201)
#198 := (or #195 #176)
#202 := (iff #198 #201)
#203 := [rewrite]: #202
#199 := (iff #184 #198)
#196 := (iff #183 #195)
#192 := (iff #97 #194)
#193 := [rewrite]: #192
#197 := [monotonicity #193]: #196
#200 := [monotonicity #197]: #199
#205 := [trans #200 #203]: #204
#208 := [quant-intro #205]: #207
#190 := (iff #102 #189)
#187 := (iff #101 #184)
#180 := (implies #97 #176)
#185 := (iff #180 #184)
#186 := [rewrite]: #185
#181 := (iff #101 #180)
#178 := (iff #100 #176)
#179 := [rewrite]: #178
#182 := [monotonicity #179]: #181
#188 := [trans #182 #186]: #187
#191 := [quant-intro #188]: #190
#210 := [trans #191 #208]: #209
#175 := [asserted]: #102
#211 := [mp #175 #210]: #206
#302 := [mp~ #211 #273]: #206
#834 := [mp #302 #833]: #829
#753 := (not #829)
#741 := (or #753 #468)
#472 := (>= 1::Int 0::Int)
#473 := (not #472)
#475 := (= 1::Int #474)
#368 := (or #475 #473)
#738 := (or #753 #368)
#731 := (iff #738 #741)
#733 := (iff #741 #741)
#728 := [rewrite]: #733
#454 := (iff #368 #468)
#459 := (or #468 false)
#739 := (iff #459 #468)
#740 := [rewrite]: #739
#460 := (iff #368 #459)
#748 := (iff #473 false)
#1 := true
#769 := (not true)
#424 := (iff #769 false)
#429 := [rewrite]: #424
#747 := (iff #473 #769)
#469 := (iff #472 true)
#743 := [rewrite]: #469
#744 := [monotonicity #743]: #747
#458 := [trans #744 #429]: #748
#745 := (iff #475 #468)
#746 := [rewrite]: #745
#461 := [monotonicity #746 #458]: #460
#737 := [trans #461 #740]: #454
#732 := [monotonicity #737]: #731
#729 := [trans #732 #728]: #731
#742 := [quant-inst #15]: #738
#734 := [mp #742 #729]: #741
#477 := [unit-resolution #734 #834]: #468
#478 := (not #468)
#470 := (or #478 #619)
#479 := [th-lemma arith triangle-eq]: #470
#480 := [unit-resolution #479 #477]: #619
#574 := (>= #474 1::Int)
#471 := (or #478 #574)
#481 := [th-lemma arith triangle-eq]: #471
#462 := [unit-resolution #481 #477]: #574
#464 := [th-lemma arith eq-propagate -1 -1 #462 #480]: #463
#465 := [symm #464]: #455
#456 := [monotonicity #465]: #466
#433 := [trans #456 #476]: #467
#436 := [monotonicity #433]: #435
#440 := [monotonicity #436 #487]: #427
#445 := [trans #440 #497]: #434
#430 := [trans #445 #444]: #428
#384 := (= #82 #451)
#380 := (= #81 #447)
#557 := (f7 f8 #79)
#686 := (+ 1::Int #557)
#687 := (f5 f6 #686)
#393 := (= #687 #447)
#683 := (= #447 #687)
#677 := (or #675 #683)
#678 := [quant-inst #79]: #677
#431 := [unit-resolution #678 #254]: #683
#389 := [symm #431]: #393
#394 := (= #81 #687)
#651 := (f7 f8 #687)
#536 := (f5 f6 #651)
#537 := (= #536 #687)
#821 := (pattern #14)
#93 := (f5 f6 #14)
#169 := (= #9 #93)
#822 := (forall (vars (?v0 S2)) (:pat #821) #169)
#172 := (forall (vars (?v0 S2)) #169)
#825 := (iff #172 #822)
#823 := (iff #169 #169)
#824 := [refl]: #823
#826 := [quant-intro #824]: #825
#268 := (~ #172 #172)
#299 := (~ #169 #169)
#300 := [refl]: #299
#269 := [nnf-pos #300]: #268
#94 := (= #93 #9)
#95 := (forall (vars (?v0 S2)) #94)
#173 := (iff #95 #172)
#170 := (iff #94 #169)
#171 := [rewrite]: #170
#174 := [quant-intro #171]: #173
#168 := [asserted]: #95
#177 := [mp #168 #174]: #172
#270 := [mp~ #177 #269]: #172
#827 := [mp #270 #826]: #822
#519 := (not #822)
#520 := (or #519 #537)
#532 := (= #687 #536)
#523 := (or #519 #532)
#528 := (iff #523 #520)
#529 := (iff #520 #520)
#522 := [rewrite]: #529
#527 := (iff #532 #537)
#517 := [rewrite]: #527
#521 := [monotonicity #517]: #528
#525 := [trans #521 #522]: #528
#524 := [quant-inst #687]: #523
#526 := [mp #524 #525]: #520
#410 := [unit-resolution #526 #827]: #537
#390 := (= #81 #536)
#383 := (= 1::Int #651)
#378 := (= #651 1::Int)
#655 := -1::Int
#656 := (* -1::Int #651)
#657 := (+ #557 #656)
#640 := (<= #657 -1::Int)
#658 := (= #657 -1::Int)
#645 := (>= #557 -1::Int)
#674 := (>= #557 0::Int)
#772 := (= #557 0::Int)
#754 := (or #753 #772)
#453 := (>= 0::Int 0::Int)
#432 := (not #453)
#764 := (= 0::Int #557)
#437 := (or #764 #432)
#755 := (or #753 #437)
#757 := (iff #755 #754)
#758 := (iff #754 #754)
#395 := [rewrite]: #758
#415 := (iff #437 #772)
#767 := (or #772 false)
#413 := (iff #767 #772)
#414 := [rewrite]: #413
#409 := (iff #437 #767)
#766 := (iff #432 false)
#775 := (iff #432 #769)
#773 := (iff #453 true)
#774 := [rewrite]: #773
#765 := [monotonicity #774]: #775
#425 := [trans #765 #429]: #766
#438 := (iff #764 #772)
#771 := [rewrite]: #438
#751 := [monotonicity #771 #425]: #409
#416 := [trans #751 #414]: #415
#752 := [monotonicity #416]: #757
#759 := [trans #752 #395]: #757
#756 := [quant-inst #78]: #755
#761 := [mp #756 #759]: #754
#412 := [unit-resolution #761 #834]: #772
#417 := (not #772)
#418 := (or #417 #674)
#419 := [th-lemma arith triangle-eq]: #418
#420 := [unit-resolution #419 #412]: #674
#421 := (not #674)
#422 := (or #421 #645)
#411 := [th-lemma arith farkas 1 1]: #422
#423 := [unit-resolution #411 #420]: #645
#643 := (not #645)
#629 := (or #753 #643 #658)
#662 := (>= #686 0::Int)
#673 := (not #662)
#652 := (= #686 #651)
#654 := (or #652 #673)
#630 := (or #753 #654)
#638 := (iff #630 #629)
#650 := (or #643 #658)
#636 := (or #753 #650)
#634 := (iff #636 #629)
#637 := [rewrite]: #634
#632 := (iff #630 #636)
#625 := (iff #654 #650)
#648 := (or #658 #643)
#623 := (iff #648 #650)
#624 := [rewrite]: #623
#649 := (iff #654 #648)
#646 := (iff #673 #643)
#641 := (iff #662 #645)
#642 := [rewrite]: #641
#647 := [monotonicity #642]: #646
#653 := (iff #652 #658)
#659 := [rewrite]: #653
#644 := [monotonicity #659 #647]: #649
#518 := [trans #644 #624]: #625
#633 := [monotonicity #518]: #632
#639 := [trans #633 #637]: #638
#631 := [quant-inst #686]: #630
#635 := [mp #631 #639]: #629
#404 := [unit-resolution #635 #834 #423]: #658
#406 := (not #658)
#407 := (or #406 #640)
#405 := [th-lemma arith triangle-eq]: #407
#408 := [unit-resolution #405 #404]: #640
#620 := (>= #657 -1::Int)
#396 := (or #406 #620)
#398 := [th-lemma arith triangle-eq]: #396
#399 := [unit-resolution #398 #404]: #620
#688 := (<= #557 0::Int)
#402 := (or #417 #688)
#397 := [th-lemma arith triangle-eq]: #402
#403 := [unit-resolution #397 #412]: #688
#382 := [th-lemma arith eq-propagate -1 -1 1 1 #420 #403 #399 #408]: #378
#388 := [symm #382]: #383
#391 := [monotonicity #388]: #390
#377 := [trans #391 #410]: #394
#381 := [trans #377 #389]: #380
#385 := [monotonicity #381]: #384
#387 := [monotonicity #385 #430]: #379
#369 := [symm #387]: #372
#449 := (= #85 #452)
#770 := (or #768 #449)
#426 := [quant-inst #8 #79 #83]: #770
#386 := [unit-resolution #426 #804]: #449
#370 := [trans #386 #369]: #91
#92 := (not #91)
#167 := [asserted]: #92
[unit-resolution #167 #370]: false
unsat
b18aa009c5b54d915c2c9feecd9762a9bb0c27b5 38 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (not #11)
#13 := (or #11 #12)
#14 := (not #13)
#56 := (iff #14 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #14 #51)
#49 := (iff #13 true)
#35 := (= f1 #9)
#38 := (forall (vars (?v0 S2)) #35)
#41 := (not #38)
#44 := (or #38 #41)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#36 := (iff #10 #35)
#37 := [rewrite]: #36
#40 := [quant-intro #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #40 #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#34 := [asserted]: #14
[mp #34 #57]: false
unsat
6484c4415dc032ed762d879b9df0ebba83c1370d 380 0
#2 := false
decl f7 :: (-> S5 Int S2)
#29 := 6::Int
decl f8 :: S5
#15 := f8
#30 := (f7 f8 6::Int)
decl f3 :: (-> S3 S2 S2)
decl f5 :: (-> S4 S2 Int)
#22 := 4::Int
#23 := (f7 f8 4::Int)
decl f4 :: S3
#8 := f4
#24 := (f3 f4 #23)
decl f6 :: S4
#11 := f6
#25 := (f5 f6 #24)
#26 := (* 4::Int #25)
#27 := (f7 f8 #26)
#28 := (f3 f4 #27)
#31 := (= #28 #30)
#548 := (f3 f4 #30)
#410 := (= #548 #30)
#543 := (= #30 #548)
#592 := (f5 f6 #30)
#68 := -10::Int
#524 := (+ -10::Int #592)
#483 := (f7 f8 #524)
#514 := (f3 f4 #483)
#527 := (= #514 #548)
#13 := 10::Int
#518 := (>= #592 10::Int)
#539 := (ite #518 #527 #543)
#9 := (:var 0 S2)
#10 := (f3 f4 #9)
#698 := (pattern #10)
#12 := (f5 f6 #9)
#697 := (pattern #12)
#218 := (= #9 #10)
#69 := (+ -10::Int #12)
#72 := (f7 f8 #69)
#75 := (f3 f4 #72)
#217 := (= #10 #75)
#89 := (>= #12 10::Int)
#205 := (ite #89 #217 #218)
#699 := (forall (vars (?v0 S2)) (:pat #697 #698) #205)
#220 := (forall (vars (?v0 S2)) #205)
#702 := (iff #220 #699)
#700 := (iff #205 #205)
#701 := [refl]: #700
#703 := [quant-intro #701]: #702
#94 := (ite #89 #75 #9)
#99 := (= #10 #94)
#102 := (forall (vars (?v0 S2)) #99)
#221 := (iff #102 #220)
#206 := (iff #99 #205)
#219 := [rewrite]: #206
#222 := [quant-intro #219]: #221
#209 := (~ #102 #102)
#207 := (~ #99 #99)
#208 := [refl]: #207
#210 := [nnf-pos #208]: #209
#16 := (- #12 10::Int)
#17 := (f7 f8 #16)
#18 := (f3 f4 #17)
#14 := (< #12 10::Int)
#19 := (ite #14 #9 #18)
#20 := (= #10 #19)
#21 := (forall (vars (?v0 S2)) #20)
#105 := (iff #21 #102)
#78 := (ite #14 #9 #75)
#81 := (= #10 #78)
#84 := (forall (vars (?v0 S2)) #81)
#103 := (iff #84 #102)
#100 := (iff #81 #99)
#97 := (= #78 #94)
#87 := (not #89)
#91 := (ite #87 #9 #75)
#95 := (= #91 #94)
#96 := [rewrite]: #95
#92 := (= #78 #91)
#88 := (iff #14 #87)
#90 := [rewrite]: #88
#93 := [monotonicity #90]: #92
#98 := [trans #93 #96]: #97
#101 := [monotonicity #98]: #100
#104 := [quant-intro #101]: #103
#85 := (iff #21 #84)
#82 := (iff #20 #81)
#79 := (= #19 #78)
#76 := (= #18 #75)
#73 := (= #17 #72)
#70 := (= #16 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#86 := [quant-intro #83]: #85
#106 := [trans #86 #104]: #105
#67 := [asserted]: #21
#107 := [mp #67 #106]: #102
#195 := [mp~ #107 #210]: #102
#223 := [mp #195 #222]: #220
#704 := [mp #223 #703]: #699
#370 := (not #699)
#495 := (or #370 #539)
#516 := (= #548 #514)
#525 := (ite #518 #516 #543)
#496 := (or #370 #525)
#502 := (iff #496 #495)
#504 := (iff #495 #495)
#505 := [rewrite]: #504
#519 := (iff #525 #539)
#528 := (iff #516 #527)
#529 := [rewrite]: #528
#540 := [monotonicity #529]: #519
#503 := [monotonicity #540]: #502
#506 := [trans #503 #505]: #502
#501 := [quant-inst #30]: #496
#507 := [mp #501 #506]: #495
#492 := [unit-resolution #507 #704]: #539
#509 := (not #518)
#486 := (<= #592 6::Int)
#572 := (= #592 6::Int)
#37 := (:var 0 Int)
#39 := (f7 f8 #37)
#711 := (pattern #39)
#36 := 0::Int
#135 := (>= #37 0::Int)
#136 := (not #135)
#40 := (f5 f6 #39)
#117 := (= #37 #40)
#142 := (or #117 #136)
#712 := (forall (vars (?v0 Int)) (:pat #711) #142)
#147 := (forall (vars (?v0 Int)) #142)
#715 := (iff #147 #712)
#713 := (iff #142 #142)
#714 := [refl]: #713
#716 := [quant-intro #714]: #715
#201 := (~ #147 #147)
#200 := (~ #142 #142)
#212 := [refl]: #200
#202 := [nnf-pos #212]: #201
#41 := (= #40 #37)
#38 := (<= 0::Int #37)
#42 := (implies #38 #41)
#43 := (forall (vars (?v0 Int)) #42)
#150 := (iff #43 #147)
#124 := (not #38)
#125 := (or #124 #117)
#130 := (forall (vars (?v0 Int)) #125)
#148 := (iff #130 #147)
#145 := (iff #125 #142)
#139 := (or #136 #117)
#143 := (iff #139 #142)
#144 := [rewrite]: #143
#140 := (iff #125 #139)
#137 := (iff #124 #136)
#133 := (iff #38 #135)
#134 := [rewrite]: #133
#138 := [monotonicity #134]: #137
#141 := [monotonicity #138]: #140
#146 := [trans #141 #144]: #145
#149 := [quant-intro #146]: #148
#131 := (iff #43 #130)
#128 := (iff #42 #125)
#121 := (implies #38 #117)
#126 := (iff #121 #125)
#127 := [rewrite]: #126
#122 := (iff #42 #121)
#119 := (iff #41 #117)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#129 := [trans #123 #127]: #128
#132 := [quant-intro #129]: #131
#151 := [trans #132 #149]: #150
#116 := [asserted]: #43
#152 := [mp #116 #151]: #147
#213 := [mp~ #152 #202]: #147
#717 := [mp #213 #716]: #712
#645 := (not #712)
#569 := (or #645 #572)
#590 := (>= 6::Int 0::Int)
#591 := (not #590)
#593 := (= 6::Int #592)
#583 := (or #593 #591)
#570 := (or #645 #583)
#571 := (iff #570 #569)
#545 := (iff #569 #569)
#546 := [rewrite]: #545
#567 := (iff #583 #572)
#580 := (or #572 false)
#563 := (iff #580 #572)
#564 := [rewrite]: #563
#566 := (iff #583 #580)
#579 := (iff #591 false)
#1 := true
#653 := (not true)
#650 := (iff #653 false)
#655 := [rewrite]: #650
#577 := (iff #591 #653)
#575 := (iff #590 true)
#576 := [rewrite]: #575
#578 := [monotonicity #576]: #577
#574 := [trans #578 #655]: #579
#594 := (iff #593 #572)
#573 := [rewrite]: #594
#562 := [monotonicity #573 #574]: #566
#568 := [trans #562 #564]: #567
#544 := [monotonicity #568]: #571
#439 := [trans #544 #546]: #571
#565 := [quant-inst #29]: #570
#550 := [mp #565 #439]: #569
#493 := [unit-resolution #550 #717]: #572
#469 := (not #572)
#470 := (or #469 #486)
#471 := [th-lemma arith triangle-eq]: #470
#313 := [unit-resolution #471 #493]: #486
#472 := (not #486)
#468 := (or #472 #509)
#473 := [th-lemma arith farkas 1 1]: #468
#452 := [unit-resolution #473 #313]: #509
#508 := (not #539)
#512 := (or #508 #518 #543)
#497 := [def-axiom]: #512
#455 := [unit-resolution #497 #452 #492]: #543
#418 := [symm #455]: #410
#403 := (= #28 #548)
#337 := (f5 f6 #27)
#684 := (+ -10::Int #337)
#670 := (f7 f8 #684)
#671 := (f3 f4 #670)
#416 := (= #671 #548)
#420 := (= #670 #30)
#430 := (= #684 6::Int)
#686 := (f5 f6 #23)
#515 := -1::Int
#561 := (* -1::Int #686)
#541 := (+ #25 #561)
#487 := (<= #541 0::Int)
#556 := (= #25 #686)
#448 := (= #24 #23)
#696 := (= #23 #24)
#346 := (+ -10::Int #686)
#688 := (f7 f8 #346)
#330 := (f3 f4 #688)
#672 := (= #24 #330)
#334 := (>= #686 10::Int)
#335 := (ite #334 #672 #696)
#674 := (or #370 #335)
#675 := [quant-inst #23]: #674
#459 := [unit-resolution #675 #704]: #335
#677 := (not #334)
#633 := (<= #686 4::Int)
#659 := (= #686 4::Int)
#639 := (or #645 #659)
#395 := (>= 4::Int 0::Int)
#396 := (not #395)
#661 := (= 4::Int #686)
#375 := (or #661 #396)
#640 := (or #645 #375)
#647 := (iff #640 #639)
#648 := (iff #639 #639)
#477 := [rewrite]: #648
#643 := (iff #375 #659)
#657 := (or #659 false)
#500 := (iff #657 #659)
#642 := [rewrite]: #500
#498 := (iff #375 #657)
#656 := (iff #396 false)
#654 := (iff #396 #653)
#663 := (iff #395 true)
#652 := [rewrite]: #663
#649 := [monotonicity #652]: #654
#651 := [trans #649 #655]: #656
#658 := (iff #661 #659)
#662 := [rewrite]: #658
#499 := [monotonicity #662 #651]: #498
#644 := [trans #499 #642]: #643
#641 := [monotonicity #644]: #647
#479 := [trans #641 #477]: #647
#646 := [quant-inst #22]: #640
#480 := [mp #646 #479]: #639
#461 := [unit-resolution #480 #717]: #659
#462 := (not #659)
#460 := (or #462 #633)
#463 := [th-lemma arith triangle-eq]: #460
#451 := [unit-resolution #463 #461]: #633
#454 := (not #633)
#456 := (or #454 #677)
#457 := [th-lemma arith farkas 1 1]: #456
#453 := [unit-resolution #457 #451]: #677
#676 := (not #335)
#679 := (or #676 #334 #696)
#316 := [def-axiom]: #679
#458 := [unit-resolution #316 #453 #459]: #696
#438 := [symm #458]: #448
#440 := [monotonicity #438]: #556
#441 := (not #556)
#444 := (or #441 #487)
#445 := [th-lemma arith triangle-eq]: #444
#449 := [unit-resolution #445 #440]: #487
#542 := (>= #541 0::Int)
#442 := (or #441 #542)
#450 := [th-lemma arith triangle-eq]: #442
#443 := [unit-resolution #450 #440]: #542
#634 := (>= #686 4::Int)
#446 := (or #462 #634)
#447 := [th-lemma arith triangle-eq]: #446
#433 := [unit-resolution #447 #461]: #634
#530 := (* -1::Int #337)
#532 := (+ #26 #530)
#617 := (<= #532 0::Int)
#533 := (= #532 0::Int)
#535 := (>= #25 0::Int)
#436 := (not #542)
#435 := (not #634)
#434 := (or #535 #435 #436)
#437 := [th-lemma arith assign-bounds 1 1]: #434
#419 := [unit-resolution #437 #433 #443]: #535
#538 := (not #535)
#632 := (or #533 #538)
#613 := (or #645 #533 #538)
#531 := (>= #26 0::Int)
#626 := (not #531)
#627 := (= #26 #337)
#630 := (or #627 #626)
#610 := (or #645 #630)
#614 := (iff #610 #613)
#622 := (or #645 #632)
#620 := (iff #622 #613)
#625 := [rewrite]: #620
#623 := (iff #610 #622)
#619 := (iff #630 #632)
#631 := (iff #626 #538)
#536 := (iff #531 #535)
#537 := [rewrite]: #536
#628 := [monotonicity #537]: #631
#526 := (iff #627 #533)
#534 := [rewrite]: #526
#621 := [monotonicity #534 #628]: #619
#624 := [monotonicity #621]: #623
#615 := [trans #624 #625]: #614
#612 := [quant-inst #26]: #610
#616 := [mp #612 #615]: #613
#421 := [unit-resolution #616 #717]: #632
#422 := [unit-resolution #421 #419]: #533
#423 := (not #533)
#424 := (or #423 #617)
#425 := [th-lemma arith triangle-eq]: #424
#426 := [unit-resolution #425 #422]: #617
#611 := (>= #532 0::Int)
#427 := (or #423 #611)
#428 := [th-lemma arith triangle-eq]: #427
#429 := [unit-resolution #428 #422]: #611
#431 := [th-lemma arith eq-propagate 1 1 -4 -4 -4 -4 #429 #426 #433 #451 #443 #449]: #430
#432 := [monotonicity #431]: #420
#417 := [monotonicity #432]: #416
#378 := (= #28 #671)
#336 := (= #27 #28)
#393 := (>= #337 10::Int)
#394 := (ite #393 #378 #336)
#288 := (or #370 #394)
#666 := [quant-inst #27]: #288
#409 := [unit-resolution #666 #704]: #394
#411 := (not #617)
#412 := (or #393 #411 #435 #436)
#413 := [th-lemma arith assign-bounds 1 4 4]: #412
#414 := [unit-resolution #413 #433 #426 #443]: #393
#389 := (not #393)
#667 := (not #394)
#390 := (or #667 #389 #378)
#664 := [def-axiom]: #390
#415 := [unit-resolution #664 #414 #409]: #378
#404 := [trans #415 #417]: #403
#405 := [trans #404 #418]: #31
#32 := (not #31)
#108 := [asserted]: #32
[unit-resolution #108 #405]: false
unsat
f954792d8be81671314fd3cce76fa4be3cd4ee23 1 0
unsat
e776ea3cea49bcb73b17ecdacf5c2db068ae9e28 80 0
#2 := false
decl f3 :: (-> Int S1)
#71 := 1::Int
#72 := (f3 1::Int)
decl f1 :: S1
#4 := f1
#234 := (= f1 #72)
#238 := (not #234)
#73 := (= #72 f1)
#74 := (not #73)
#239 := (iff #74 #238)
#236 := (iff #73 #234)
#237 := [rewrite]: #236
#240 := [monotonicity #237]: #239
#233 := [asserted]: #74
#243 := [mp #233 #240]: #238
#8 := (:var 0 Int)
#9 := (f3 #8)
#741 := (pattern #9)
#95 := (= f1 #9)
#742 := (forall (vars (?v0 Int)) (:pat #741) #95)
#118 := (forall (vars (?v0 Int)) #95)
#745 := (iff #118 #742)
#743 := (iff #95 #95)
#744 := [refl]: #743
#746 := [quant-intro #744]: #745
#259 := (~ #118 #118)
#257 := (~ #95 #95)
#258 := [refl]: #257
#260 := [nnf-pos #258]: #259
decl f4 :: (-> S2 S1)
decl f5 :: (-> S3 S2 S2)
decl f8 :: S2
#13 := f8
decl f6 :: (-> S4 Int S3)
decl f7 :: S4
#11 := f7
#12 := (f6 f7 #8)
#14 := (f5 #12 f8)
#15 := (f4 #14)
#16 := (= #15 f1)
#17 := (not #16)
#18 := (or #16 #17)
#10 := (= #9 f1)
#19 := (and #10 #18)
#20 := (forall (vars (?v0 Int)) #19)
#119 := (iff #20 #118)
#116 := (iff #19 #95)
#1 := true
#111 := (and #95 true)
#114 := (iff #111 #95)
#115 := [rewrite]: #114
#112 := (iff #19 #111)
#109 := (iff #18 true)
#98 := (= f1 #15)
#101 := (not #98)
#104 := (or #98 #101)
#107 := (iff #104 true)
#108 := [rewrite]: #107
#105 := (iff #18 #104)
#102 := (iff #17 #101)
#99 := (iff #16 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#106 := [monotonicity #100 #103]: #105
#110 := [trans #106 #108]: #109
#96 := (iff #10 #95)
#97 := [rewrite]: #96
#113 := [monotonicity #97 #110]: #112
#117 := [trans #113 #115]: #116
#120 := [quant-intro #117]: #119
#94 := [asserted]: #20
#123 := [mp #94 #120]: #118
#242 := [mp~ #123 #260]: #118
#747 := [mp #242 #746]: #742
#326 := (not #742)
#411 := (or #326 #234)
#412 := [quant-inst #71]: #411
[unit-resolution #412 #747 #243]: false
unsat
2e1ce9e1ff9cb725a3a169498ce8fc405a17724f 439 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f5 :: (-> S1 S3)
decl f1 :: S1
#4 := f1
#121 := (f5 f1)
decl f4 :: S2
#8 := f4
#122 := (f3 f4 #121)
decl f12 :: (-> S9 S10 S4)
decl f14 :: (-> Int S10)
#118 := 3::Int
#119 := (f14 3::Int)
decl f13 :: S9
#20 := f13
#120 := (f12 f13 #119)
#123 := (= #120 #122)
decl f6 :: (-> S5 S6 S4)
decl f8 :: (-> S7 S6 S6)
decl f11 :: S6
#15 := f11
decl f9 :: (-> S8 S1 S7)
decl f10 :: S8
#13 := f10
#481 := (f9 f10 f1)
#565 := (f8 #481 f11)
decl f7 :: S5
#12 := f7
#566 := (f6 f7 #565)
#671 := (= #566 #122)
#567 := (= #122 #566)
#9 := (:var 0 S1)
#14 := (f9 f10 #9)
#896 := (pattern #14)
#10 := (f5 #9)
#895 := (pattern #10)
#16 := (f8 #14 f11)
#17 := (f6 f7 #16)
#11 := (f3 f4 #10)
#18 := (= #11 #17)
#897 := (forall (vars (?v0 S1)) (:pat #895 #896) #18)
#19 := (forall (vars (?v0 S1)) #18)
#900 := (iff #19 #897)
#898 := (iff #18 #18)
#899 := [refl]: #898
#901 := [quant-intro #899]: #900
#403 := (~ #19 #19)
#401 := (~ #18 #18)
#402 := [refl]: #401
#404 := [nnf-pos #402]: #403
#159 := [asserted]: #19
#359 := [mp~ #159 #404]: #19
#902 := [mp #359 #901]: #897
#570 := (not #897)
#571 := (or #570 #567)
#568 := [quant-inst #4]: #571
#727 := [unit-resolution #568 #902]: #567
#650 := [symm #727]: #671
#654 := (= #120 #566)
decl f24 :: S5
#50 := f24
#866 := (f6 f24 #565)
#670 := (= #866 #566)
#863 := (= #566 #866)
#48 := (:var 0 S6)
#51 := (f6 f24 #48)
#920 := (pattern #51)
#49 := (f6 f7 #48)
#919 := (pattern #49)
#52 := (= #49 #51)
#921 := (forall (vars (?v0 S6)) (:pat #919 #920) #52)
#53 := (forall (vars (?v0 S6)) #52)
#924 := (iff #53 #921)
#922 := (iff #52 #52)
#923 := [refl]: #922
#925 := [quant-intro #923]: #924
#373 := (~ #53 #53)
#372 := (~ #52 #52)
#369 := [refl]: #372
#374 := [nnf-pos #369]: #373
#173 := [asserted]: #53
#370 := [mp~ #173 #374]: #53
#926 := [mp #370 #925]: #921
#893 := (not #921)
#578 := (or #893 #863)
#579 := [quant-inst #565]: #578
#737 := [unit-resolution #579 #926]: #863
#666 := [symm #737]: #670
#649 := (= #120 #866)
decl f27 :: (-> S15 Int S4)
decl f31 :: (-> S19 S4 Int)
#104 := (f6 f24 f11)
decl f32 :: S19
#75 := f32
#867 := (f31 f32 #104)
#81 := 1::Int
#577 := (+ 1::Int #867)
decl f28 :: S15
#58 := f28
#580 := (f27 f28 #577)
#859 := (= #580 #866)
#89 := (:var 1 S1)
#90 := (f9 f10 #89)
#91 := (f8 #90 #48)
#962 := (pattern #91)
#113 := (f31 f32 #51)
#257 := (+ 1::Int #113)
#262 := (f27 f28 #257)
#112 := (f6 f24 #91)
#265 := (= #112 #262)
#963 := (forall (vars (?v0 S1) (?v1 S6)) (:pat #962) #265)
#268 := (forall (vars (?v0 S1) (?v1 S6)) #265)
#966 := (iff #268 #963)
#964 := (iff #265 #265)
#965 := [refl]: #964
#967 := [quant-intro #965]: #966
#389 := (~ #268 #268)
#388 := (~ #265 #265)
#385 := [refl]: #388
#390 := [nnf-pos #385]: #389
#59 := 0::Int
#82 := (+ 0::Int 1::Int)
#114 := (+ #113 #82)
#115 := (f27 f28 #114)
#116 := (= #112 #115)
#117 := (forall (vars (?v0 S1) (?v1 S6)) #116)
#269 := (iff #117 #268)
#266 := (iff #116 #265)
#263 := (= #115 #262)
#260 := (= #114 #257)
#253 := (+ #113 1::Int)
#258 := (= #253 #257)
#259 := [rewrite]: #258
#255 := (= #114 #253)
#184 := (= #82 1::Int)
#186 := [rewrite]: #184
#256 := [monotonicity #186]: #255
#261 := [trans #256 #259]: #260
#264 := [monotonicity #261]: #263
#267 := [monotonicity #264]: #266
#270 := [quant-intro #267]: #269
#252 := [asserted]: #117
#273 := [mp #252 #270]: #268
#386 := [mp~ #273 #390]: #268
#968 := [mp #386 #967]: #963
#860 := (not #963)
#857 := (or #860 #859)
#858 := (= #866 #580)
#861 := (or #860 #858)
#851 := (iff #861 #857)
#847 := (iff #857 #857)
#848 := [rewrite]: #847
#573 := (iff #858 #859)
#856 := [rewrite]: #573
#852 := [monotonicity #856]: #851
#853 := [trans #852 #848]: #851
#850 := [quant-inst #4 #15]: #861
#854 := [mp #850 #853]: #857
#693 := [unit-resolution #854 #968]: #859
#658 := (= #120 #580)
decl f15 :: (-> S11 S12 S4)
decl f20 :: S12
#27 := f20
decl f23 :: S11
#44 := f23
#102 := (f15 f23 f20)
#696 := (f31 f32 #102)
#697 := (+ 1::Int #696)
#841 := (f27 f28 #697)
#669 := (= #841 #580)
#662 := (= #697 #577)
#674 := (= 1::Int #577)
#710 := (= #577 1::Int)
#833 := (<= #867 0::Int)
#835 := (= #867 0::Int)
#60 := (f27 f28 0::Int)
#884 := (f31 f32 #60)
#886 := (= #884 0::Int)
#21 := (:var 0 Int)
#131 := (f27 f28 #21)
#976 := (pattern #131)
#299 := (>= #21 0::Int)
#300 := (not #299)
#132 := (f31 f32 #131)
#281 := (= #21 #132)
#306 := (or #281 #300)
#977 := (forall (vars (?v0 Int)) (:pat #976) #306)
#311 := (forall (vars (?v0 Int)) #306)
#980 := (iff #311 #977)
#978 := (iff #306 #306)
#979 := [refl]: #978
#981 := [quant-intro #979]: #980
#395 := (~ #311 #311)
#394 := (~ #306 #306)
#421 := [refl]: #394
#396 := [nnf-pos #421]: #395
#133 := (= #132 #21)
#130 := (<= 0::Int #21)
#134 := (implies #130 #133)
#135 := (forall (vars (?v0 Int)) #134)
#314 := (iff #135 #311)
#288 := (not #130)
#289 := (or #288 #281)
#294 := (forall (vars (?v0 Int)) #289)
#312 := (iff #294 #311)
#309 := (iff #289 #306)
#303 := (or #300 #281)
#307 := (iff #303 #306)
#308 := [rewrite]: #307
#304 := (iff #289 #303)
#301 := (iff #288 #300)
#297 := (iff #130 #299)
#298 := [rewrite]: #297
#302 := [monotonicity #298]: #301
#305 := [monotonicity #302]: #304
#310 := [trans #305 #308]: #309
#313 := [quant-intro #310]: #312
#295 := (iff #135 #294)
#292 := (iff #134 #289)
#285 := (implies #130 #281)
#290 := (iff #285 #289)
#291 := [rewrite]: #290
#286 := (iff #134 #285)
#283 := (iff #133 #281)
#284 := [rewrite]: #283
#287 := [monotonicity #284]: #286
#293 := [trans #287 #291]: #292
#296 := [quant-intro #293]: #295
#315 := [trans #296 #313]: #314
#280 := [asserted]: #135
#316 := [mp #280 #315]: #311
#422 := [mp~ #316 #396]: #311
#982 := [mp #422 #981]: #977
#519 := (not #977)
#520 := (or #519 #886)
#556 := (>= 0::Int 0::Int)
#892 := (not #556)
#543 := (= 0::Int #884)
#548 := (or #543 #892)
#881 := (or #519 #548)
#882 := (iff #881 #520)
#869 := (iff #520 #520)
#576 := [rewrite]: #869
#878 := (iff #548 #886)
#875 := (or #886 false)
#877 := (iff #875 #886)
#514 := [rewrite]: #877
#876 := (iff #548 #875)
#873 := (iff #892 false)
#1 := true
#532 := (not true)
#535 := (iff #532 false)
#872 := [rewrite]: #535
#533 := (iff #892 #532)
#528 := (iff #556 true)
#870 := [rewrite]: #528
#534 := [monotonicity #870]: #533
#874 := [trans #534 #872]: #873
#885 := (iff #543 #886)
#544 := [rewrite]: #885
#871 := [monotonicity #544 #874]: #876
#880 := [trans #871 #514]: #878
#868 := [monotonicity #880]: #882
#591 := [trans #868 #576]: #882
#879 := [quant-inst #59]: #881
#592 := [mp #879 #591]: #520
#694 := [unit-resolution #592 #982]: #886
#700 := (= #867 #884)
#105 := (= #104 #60)
#229 := (= #60 #104)
#231 := (iff #105 #229)
#232 := [rewrite]: #231
#228 := [asserted]: #105
#235 := [mp #228 #232]: #229
#699 := [symm #235]: #105
#701 := [monotonicity #699]: #700
#702 := [trans #701 #694]: #835
#703 := (not #835)
#704 := (or #703 #833)
#705 := [th-lemma arith triangle-eq]: #704
#706 := [unit-resolution #705 #702]: #833
#836 := (>= #867 0::Int)
#707 := (or #703 #836)
#708 := [th-lemma arith triangle-eq]: #707
#709 := [unit-resolution #708 #702]: #836
#695 := [th-lemma arith eq-propagate -1 -1 #709 #706]: #710
#692 := [symm #695]: #674
#690 := (= #697 1::Int)
#719 := (<= #696 0::Int)
#718 := (= #696 0::Int)
#672 := (= #696 #884)
#103 := (= #102 #60)
#224 := (= #60 #102)
#226 := (iff #103 #224)
#227 := [rewrite]: #226
#223 := [asserted]: #103
#230 := [mp #223 #227]: #224
#711 := [symm #230]: #103
#673 := [monotonicity #711]: #672
#680 := [trans #673 #694]: #718
#682 := (not #718)
#683 := (or #682 #719)
#684 := [th-lemma arith triangle-eq]: #683
#686 := [unit-resolution #684 #680]: #719
#720 := (>= #696 0::Int)
#687 := (or #682 #720)
#688 := [th-lemma arith triangle-eq]: #687
#689 := [unit-resolution #688 #680]: #720
#691 := [th-lemma arith eq-propagate -1 -1 #689 #686]: #690
#663 := [trans #691 #692]: #662
#511 := [monotonicity #663]: #669
#659 := (= #120 #841)
decl f17 :: (-> S13 S12 S12)
decl f18 :: (-> S14 Int S13)
decl f19 :: S14
#25 := f19
#558 := (f18 f19 3::Int)
#569 := (f17 #558 f20)
#849 := (f15 f23 #569)
#842 := (= #849 #841)
#843 := (= #841 #849)
#42 := (:var 0 S12)
#71 := (:var 1 Int)
#72 := (f18 f19 #71)
#73 := (f17 #72 #42)
#955 := (pattern #73)
#45 := (f15 f23 #42)
#107 := (f31 f32 #45)
#238 := (+ 1::Int #107)
#243 := (f27 f28 #238)
#106 := (f15 f23 #73)
#246 := (= #106 #243)
#956 := (forall (vars (?v0 Int) (?v1 S12)) (:pat #955) #246)
#249 := (forall (vars (?v0 Int) (?v1 S12)) #246)
#959 := (iff #249 #956)
#957 := (iff #246 #246)
#958 := [refl]: #957
#960 := [quant-intro #958]: #959
#383 := (~ #249 #249)
#417 := (~ #246 #246)
#418 := [refl]: #417
#384 := [nnf-pos #418]: #383
#108 := (+ #107 #82)
#109 := (f27 f28 #108)
#110 := (= #106 #109)
#111 := (forall (vars (?v0 Int) (?v1 S12)) #110)
#250 := (iff #111 #249)
#247 := (iff #110 #246)
#244 := (= #109 #243)
#241 := (= #108 #238)
#234 := (+ #107 1::Int)
#239 := (= #234 #238)
#240 := [rewrite]: #239
#236 := (= #108 #234)
#237 := [monotonicity #186]: #236
#242 := [trans #237 #240]: #241
#245 := [monotonicity #242]: #244
#248 := [monotonicity #245]: #247
#251 := [quant-intro #248]: #250
#233 := [asserted]: #111
#254 := [mp #233 #251]: #249
#387 := [mp~ #254 #384]: #249
#961 := [mp #387 #960]: #956
#844 := (not #956)
#845 := (or #844 #843)
#839 := (or #844 #842)
#675 := (iff #839 #845)
#678 := (iff #845 #845)
#831 := [rewrite]: #678
#837 := (iff #842 #843)
#838 := [rewrite]: #837
#677 := [monotonicity #838]: #675
#832 := [trans #677 #831]: #675
#846 := [quant-inst #118 #27]: #839
#834 := [mp #846 #832]: #845
#664 := [unit-resolution #834 #961]: #843
#668 := [symm #664]: #842
#653 := (= #120 #849)
decl f16 :: S11
#24 := f16
#572 := (f15 f16 #569)
#855 := (= #572 #849)
#912 := (pattern #45)
#43 := (f15 f16 #42)
#911 := (pattern #43)
#46 := (= #43 #45)
#913 := (forall (vars (?v0 S12)) (:pat #911 #912) #46)
#47 := (forall (vars (?v0 S12)) #46)
#916 := (iff #47 #913)
#914 := (iff #46 #46)
#915 := [refl]: #914
#917 := [quant-intro #915]: #916
#363 := (~ #47 #47)
#407 := (~ #46 #46)
#408 := [refl]: #407
#364 := [nnf-pos #408]: #363
#172 := [asserted]: #47
#371 := [mp~ #172 #364]: #47
#918 := [mp #371 #917]: #913
#557 := (not #913)
#698 := (or #557 #855)
#840 := [quant-inst #569]: #698
#665 := [unit-resolution #840 #918]: #855
#551 := (= #120 #572)
#26 := (f18 f19 #21)
#904 := (pattern #26)
#22 := (f14 #21)
#903 := (pattern #22)
#28 := (f17 #26 f20)
#29 := (f15 f16 #28)
#23 := (f12 f13 #22)
#30 := (= #23 #29)
#905 := (forall (vars (?v0 Int)) (:pat #903 #904) #30)
#31 := (forall (vars (?v0 Int)) #30)
#908 := (iff #31 #905)
#906 := (iff #30 #30)
#907 := [refl]: #906
#909 := [quant-intro #907]: #908
#361 := (~ #31 #31)
#360 := (~ #30 #30)
#405 := [refl]: #360
#362 := [nnf-pos #405]: #361
#160 := [asserted]: #31
#406 := [mp~ #160 #362]: #31
#910 := [mp #406 #909]: #905
#545 := (not #905)
#676 := (or #545 #551)
#883 := [quant-inst #118]: #676
#667 := [unit-resolution #883 #910]: #551
#657 := [trans #667 #665]: #653
#660 := [trans #657 #668]: #659
#661 := [trans #660 #511]: #658
#652 := [trans #661 #693]: #649
#655 := [trans #652 #666]: #654
#651 := [trans #655 #650]: #123
#124 := (not #123)
#271 := [asserted]: #124
[unit-resolution #271 #651]: false
unsat
d578ad7e6589d737d5b50614f48a1b12ef69c636 37 0
#2 := false
#11 := 0::Int
decl f3 :: Int
#8 := f3
#13 := (<= f3 0::Int)
#55 := (not #13)
decl f4 :: Int
#9 := f4
#14 := (<= f4 0::Int)
#10 := (* f3 f4)
#12 := (<= #10 0::Int)
#38 := (not #12)
#45 := (or #38 #13 #14)
#48 := (not #45)
#15 := (or #13 #14)
#16 := (implies #12 #15)
#17 := (not #16)
#51 := (iff #17 #48)
#39 := (or #38 #15)
#42 := (not #39)
#49 := (iff #42 #48)
#46 := (iff #39 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#52 := [trans #44 #50]: #51
#37 := [asserted]: #17
#53 := [mp #37 #52]: #48
#56 := [not-or-elim #53]: #55
#57 := (not #14)
#58 := [not-or-elim #53]: #57
#54 := [not-or-elim #53]: #12
[th-lemma arith farkas 1 1 1 #54 #58 #56]: false
unsat
