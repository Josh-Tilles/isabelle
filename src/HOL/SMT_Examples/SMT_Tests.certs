23d01cdabb599769b54210e40617eea3d6c91e30 8 0
#2 := false
#1 := true
#7 := (not true)
#29 := (iff #7 false)
#30 := [rewrite]: #29
#28 := [asserted]: #7
[mp #28 #30]: false
unsat
da9cf67daad06e6b55c8a58d39d168a3e68ef149 16 0
#2 := false
#7 := (not false)
#8 := (not #7)
#37 := (iff #8 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #8 #32)
#30 := (iff #7 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #8
[mp #29 #38]: false
unsat
7a1bb52ecd7d9418dd685e581c967efeb26876f4 21 0
#2 := false
#1 := true
#7 := (not true)
#8 := (not #7)
#9 := (not #8)
#42 := (iff #9 false)
#31 := (iff #7 false)
#32 := [rewrite]: #31
#40 := (iff #9 #7)
#38 := (iff #8 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #8 #33)
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#41 := [monotonicity #39]: #40
#43 := [trans #41 #32]: #42
#30 := [asserted]: #9
[mp #30 #43]: false
unsat
6f92ca4f0e1770fcc8e653a3dc6a9a2100ac72fc 16 0
#2 := false
#1 := true
#7 := (and true true)
#8 := (not #7)
#37 := (iff #8 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #8 #32)
#30 := (iff #7 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #8
[mp #29 #38]: false
unsat
8bfe03ac24c5a99989017691842a79e88a05ac7c 16 0
#2 := false
#1 := true
#7 := (or true false)
#8 := (not #7)
#37 := (iff #8 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #8 #32)
#30 := (iff #7 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #8
[mp #29 #38]: false
unsat
5f12d6ee03b980092f8f61fd8d8cfd33a3a3aa1c 16 0
#2 := false
#1 := true
#7 := (implies false true)
#8 := (not #7)
#37 := (iff #8 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #8 #32)
#30 := (iff #7 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #8
[mp #29 #38]: false
unsat
b6f361c6fc132ef6bfb658932ab99e83188e4a5c 24 0
#2 := false
#1 := true
#7 := (iff false true)
#8 := (not #7)
#9 := (not #8)
#45 := (iff #9 false)
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #9 #40)
#38 := (iff #8 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #8 #33)
#31 := (iff #7 false)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #9
[mp #30 #46]: false
unsat
22e23526a38d50ce23abbe4dbfb697891cbcd840 22 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (or #8 #9)
#11 := (not #10)
#40 := (iff #11 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #11 #35)
#33 := (iff #10 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#32 := [asserted]: #11
[mp #32 #41]: false
unsat
902f835133cd6a5c2f7f8ebd7c78b25a41552b0b 30 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (and #8 #9)
#11 := (not #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (not false)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 false)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
e413d2599061059e7509241c4afb58a241792143 49 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (and false #8)
#12 := (or #11 #8)
#10 := (not #8)
#13 := (or #10 #12)
#1 := true
#9 := (and true #8)
#14 := (or #9 #13)
#15 := (not #14)
#67 := (iff #15 false)
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #15 #62)
#60 := (iff #14 true)
#55 := (or #8 true)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#48 := (or #10 #8)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (iff #12 #8)
#41 := (or false #8)
#44 := (iff #41 #8)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 false)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#37 := (iff #9 #8)
#38 := [rewrite]: #37
#57 := [monotonicity #38 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#36 := [asserted]: #15
[mp #36 #68]: false
unsat
59514aaeba28f26ae6e2aa6e362e2d1af4138910 21 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (implies #8 #8)
#10 := (not #9)
#39 := (iff #10 false)
#1 := true
#34 := (not true)
#37 := (iff #34 false)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#32 := (iff #9 true)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#31 := [asserted]: #10
[mp #31 #40]: false
unsat
3c237c6663696e3e9e3813b33e057fd540002911 30 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (and #8 #9)
#11 := (implies #10 false)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (implies false false)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 false)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
67a6978ea29dd08617f96b717aa6e108001ae5f6 48 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#12 := (and #10 #8)
#47 := (not #12)
#68 := (iff #47 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #47 #63)
#61 := (iff #12 true)
#56 := (and true true)
#59 := (iff #56 true)
#60 := [rewrite]: #59
#57 := (iff #12 #56)
#52 := (iff #8 true)
#11 := (and #8 #10)
#36 := (not #11)
#37 := (or #36 #12)
#40 := (not #37)
#13 := (implies #11 #12)
#14 := (not #13)
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #14
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #11
#44 := [and-elim #43]: #8
#53 := [iff-true #44]: #52
#54 := (iff #10 true)
#46 := [and-elim #43]: #10
#55 := [iff-true #46]: #54
#58 := [monotonicity #55 #53]: #57
#62 := [trans #58 #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#48 := [not-or-elim #45]: #47
[mp #48 #69]: false
unsat
f82a7c681aece7ed4681eb3d1ac78d727ad5a702 48 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#71 := (iff #11 false)
#66 := (or false false)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #11 #66)
#62 := (iff #10 false)
#53 := (not #10)
#36 := (not #11)
#43 := (or #36 #10 #8)
#46 := (not #43)
#12 := (or #10 #8)
#13 := (implies #11 #12)
#14 := (not #13)
#49 := (iff #14 #46)
#37 := (or #36 #12)
#40 := (not #37)
#47 := (iff #40 #46)
#44 := (iff #37 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#50 := [trans #42 #48]: #49
#35 := [asserted]: #14
#51 := [mp #35 #50]: #46
#54 := [not-or-elim #51]: #53
#63 := [iff-false #54]: #62
#64 := (iff #8 false)
#55 := (not #8)
#56 := [not-or-elim #51]: #55
#65 := [iff-false #56]: #64
#68 := [monotonicity #65 #63]: #67
#72 := [trans #68 #70]: #71
#52 := [not-or-elim #51]: #11
[mp #52 #72]: false
unsat
fb29bce93621dffd68841a1b3fb5a13d0bf5c688 46 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#55 := (not #8)
#71 := (iff #55 false)
#1 := true
#66 := (not true)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #55 #66)
#62 := (iff #8 true)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#11 := (and #8 #10)
#36 := (not #11)
#43 := (or #36 #8 #10)
#46 := (not #43)
#12 := (or #8 #10)
#13 := (implies #11 #12)
#14 := (not #13)
#49 := (iff #14 #46)
#37 := (or #36 #12)
#40 := (not #37)
#47 := (iff #40 #46)
#44 := (iff #37 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#50 := [trans #42 #48]: #49
#35 := [asserted]: #14
#51 := [mp #35 #50]: #46
#52 := [not-or-elim #51]: #11
#53 := [and-elim #52]: #8
#63 := [iff-true #53]: #62
#68 := [monotonicity #63]: #67
#72 := [trans #68 #70]: #71
#56 := [not-or-elim #51]: #55
[mp #56 #72]: false
unsat
4bc7626ad30ca8d1808bcd7007aadf7e3808f557 35 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#13 := (not #8)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#11 := (or #8 #10)
#12 := (not #11)
#14 := (implies #12 #13)
#15 := (not #14)
#52 := (iff #15 false)
#37 := (or #11 #13)
#40 := (not #37)
#50 := (iff #40 false)
#1 := true
#45 := (not true)
#48 := (iff #45 false)
#49 := [rewrite]: #48
#46 := (iff #40 #45)
#43 := (iff #37 true)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#53 := [trans #42 #51]: #52
#36 := [asserted]: #15
[mp #36 #53]: false
unsat
9765f42e1923ee1286e51e6aaa01fea0147bcc3c 35 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#13 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#12 := (not #11)
#14 := (implies #12 #13)
#15 := (not #14)
#52 := (iff #15 false)
#37 := (or #11 #13)
#40 := (not #37)
#50 := (iff #40 false)
#1 := true
#45 := (not true)
#48 := (iff #45 false)
#49 := [rewrite]: #48
#46 := (iff #40 #45)
#43 := (iff #37 true)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#53 := [trans #42 #51]: #52
#36 := [asserted]: #15
[mp #36 #53]: false
unsat
53caf383c23c48b243dad428460d0b2bad5eb2a7 29 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#51 := (iff #8 false)
#9 := (not #8)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (and #8 #11)
#13 := (not #12)
#37 := (or #8 #13)
#40 := (not #37)
#14 := (implies #9 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#36 := [asserted]: #15
#45 := [mp #36 #42]: #40
#43 := [not-or-elim #45]: #9
#52 := [iff-false #43]: #51
#44 := [not-or-elim #45]: #12
#46 := [and-elim #44]: #8
[mp #46 #52]: false
unsat
8a6cff36c5c734fbecce18e7f0b86cdc4b398c76 29 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#51 := (iff #8 false)
#9 := (not #8)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (and #11 #8)
#13 := (not #12)
#37 := (or #8 #13)
#40 := (not #37)
#14 := (implies #9 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#36 := [asserted]: #15
#45 := [mp #36 #42]: #40
#43 := [not-or-elim #45]: #9
#52 := [iff-false #43]: #51
#44 := [not-or-elim #45]: #12
#47 := [and-elim #44]: #8
[mp #47 #52]: false
unsat
8ed51fcc2c7a7fe92c740f362b331dc69282b7f4 31 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#13 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#12 := (not #8)
#14 := (or #12 #13)
#11 := (and #8 #10)
#40 := (iff #11 #14)
#43 := (iff #40 false)
#15 := (not #14)
#49 := (iff #15 #14)
#46 := (iff #49 false)
#47 := [rewrite]: #46
#50 := (iff #40 #49)
#16 := (iff #11 #15)
#48 := [rewrite]: #16
#51 := [monotonicity #48]: #50
#45 := [trans #51 #47]: #43
#17 := (not #16)
#39 := (iff #17 #40)
#41 := [rewrite]: #39
#38 := [asserted]: #17
#44 := [mp #38 #41]: #40
[mp #44 #45]: false
unsat
40fc055a5f5aa6bfe535236f4ab4452ddc7101b7 53 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#15 := (and #10 #13)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#16 := (and #8 #15)
#11 := (and #8 #10)
#14 := (and #11 #13)
#17 := (implies #14 #16)
#18 := (not #17)
#69 := (iff #18 false)
#40 := (not #14)
#41 := (or #40 #16)
#44 := (not #41)
#67 := (iff #44 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #44 #62)
#60 := (iff #41 true)
#47 := (and #8 #10 #13)
#50 := (not #47)
#55 := (or #50 #47)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #41 #55)
#53 := (iff #16 #47)
#54 := [rewrite]: #53
#51 := (iff #40 #50)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#57 := [monotonicity #52 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#70 := [trans #46 #68]: #69
#39 := [asserted]: #18
[mp #39 #70]: false
unsat
2a514d849c826c123fb15c9d79d484f526c07958 68 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#47 := (or #8 #10 #13)
#90 := (iff #47 false)
#85 := (or false false false)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #47 #85)
#83 := (iff #13 false)
#72 := (not #13)
#50 := (not #47)
#56 := (or #50 #8 #10 #13)
#61 := (not #56)
#15 := (or #10 #13)
#16 := (or #8 #15)
#11 := (or #8 #10)
#14 := (or #11 #13)
#17 := (implies #14 #16)
#18 := (not #17)
#64 := (iff #18 #61)
#40 := (not #14)
#41 := (or #40 #16)
#44 := (not #41)
#62 := (iff #44 #61)
#59 := (iff #41 #56)
#53 := (or #50 #16)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #41 #53)
#51 := (iff #40 #50)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#55 := [monotonicity #52]: #54
#60 := [trans #55 #58]: #59
#63 := [monotonicity #60]: #62
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#65 := [trans #46 #63]: #64
#39 := [asserted]: #18
#66 := [mp #39 #65]: #61
#73 := [not-or-elim #66]: #72
#84 := [iff-false #73]: #83
#81 := (iff #10 false)
#70 := (not #10)
#71 := [not-or-elim #66]: #70
#82 := [iff-false #71]: #81
#79 := (iff #8 false)
#68 := (not #8)
#69 := [not-or-elim #66]: #68
#80 := [iff-false #69]: #79
#87 := [monotonicity #80 #82 #84]: #86
#91 := [trans #87 #89]: #90
#67 := [not-or-elim #66]: #47
[mp #67 #91]: false
unsat
e0b09cf8a39c11d9d4bee6ec1a6a5b93b2257b06 80 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#15 := (or #8 #13)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#60 := (not #10)
#59 := (not #8)
#61 := (or #59 #60)
#62 := (not #61)
#85 := (not #13)
#96 := [hypothesis]: #13
#86 := (or #15 #85)
#87 := [def-axiom]: #86
#97 := [unit-resolution #87 #96]: #15
#16 := (or #10 #13)
#92 := (or #16 #85)
#93 := [def-axiom]: #92
#98 := [unit-resolution #93 #96]: #16
#64 := (not #16)
#63 := (not #15)
#65 := (or #63 #64)
#17 := (and #15 #16)
#49 := (not #17)
#74 := (iff #49 #65)
#66 := (not #65)
#69 := (not #66)
#72 := (iff #69 #65)
#73 := [rewrite]: #72
#70 := (iff #49 #69)
#67 := (iff #17 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#11 := (and #8 #10)
#14 := (or #11 #13)
#41 := (not #14)
#42 := (or #41 #17)
#45 := (not #42)
#18 := (implies #14 #17)
#19 := (not #18)
#46 := (iff #19 #45)
#43 := (iff #18 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#40 := [asserted]: #19
#50 := [mp #40 #47]: #45
#51 := [not-or-elim #50]: #49
#76 := [mp #51 #75]: #65
#99 := [unit-resolution #76 #98 #97]: false
#100 := [lemma #99]: #85
#55 := (or #62 #13)
#56 := (iff #14 #55)
#57 := (iff #11 #62)
#58 := [rewrite]: #57
#53 := [monotonicity #58]: #56
#48 := [not-or-elim #50]: #14
#54 := [mp #48 #53]: #55
#101 := [unit-resolution #54 #100]: #62
#77 := (or #61 #8)
#78 := [def-axiom]: #77
#102 := [unit-resolution #78 #101]: #8
#83 := (or #15 #59)
#84 := [def-axiom]: #83
#103 := [unit-resolution #84 #102]: #15
#79 := (or #61 #10)
#80 := [def-axiom]: #79
#104 := [unit-resolution #80 #101]: #10
#90 := (or #16 #60)
#91 := [def-axiom]: #90
#105 := [unit-resolution #91 #104]: #16
[unit-resolution #76 #105 #103]: false
unsat
32f6ddd6b17440644504f27b6be1cc3c71634e05 82 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#16 := (and #8 #13)
#60 := (not #16)
#101 := (iff #60 false)
#1 := true
#71 := (not true)
#99 := (iff #71 false)
#100 := [rewrite]: #99
#72 := (iff #60 #71)
#96 := (iff #16 true)
#91 := (and true true)
#94 := (iff #91 true)
#95 := [rewrite]: #94
#92 := (iff #16 #91)
#70 := (iff #13 true)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#14 := (or #13 #10)
#80 := (iff #14 #13)
#75 := (or #13 false)
#78 := (iff #75 #13)
#79 := [rewrite]: #78
#76 := (iff #14 #75)
#73 := (iff #10 false)
#62 := (not #10)
#11 := (or #8 #10)
#15 := (and #11 #14)
#41 := (not #15)
#48 := (or #41 #16 #10)
#51 := (not #48)
#17 := (or #16 #10)
#18 := (implies #15 #17)
#19 := (not #18)
#54 := (iff #19 #51)
#42 := (or #41 #17)
#45 := (not #42)
#52 := (iff #45 #51)
#49 := (iff #42 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#46 := (iff #19 #45)
#43 := (iff #18 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#55 := [trans #47 #53]: #54
#40 := [asserted]: #19
#56 := [mp #40 #55]: #51
#63 := [not-or-elim #56]: #62
#74 := [iff-false #63]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#57 := [not-or-elim #56]: #15
#59 := [and-elim #57]: #14
#69 := [mp #59 #81]: #13
#82 := [iff-true #69]: #70
#68 := (iff #8 true)
#88 := (iff #11 #8)
#83 := (or #8 false)
#86 := (iff #83 #8)
#87 := [rewrite]: #86
#84 := (iff #11 #83)
#85 := [monotonicity #74]: #84
#89 := [trans #85 #87]: #88
#58 := [and-elim #57]: #11
#67 := [mp #58 #89]: #8
#90 := [iff-true #67]: #68
#93 := [monotonicity #90 #82]: #92
#97 := [trans #93 #95]: #96
#98 := [monotonicity #97]: #72
#102 := [trans #98 #100]: #101
#61 := [not-or-elim #56]: #60
[mp #61 #102]: false
unsat
822dd2da88addcc306ac946c913fcb511aa60583 81 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#102 := (iff #11 false)
#97 := (or false false)
#100 := (iff #97 false)
#101 := [rewrite]: #100
#98 := (iff #11 #97)
#95 := (iff #10 false)
#91 := (not #10)
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
#16 := (and #10 #13)
#62 := (not #16)
#92 := (iff #62 #91)
#89 := (iff #16 #10)
#1 := true
#84 := (and #10 true)
#87 := (iff #84 #10)
#88 := [rewrite]: #87
#85 := (iff #16 #84)
#69 := (iff #13 true)
#14 := (and #11 #13)
#15 := (and #8 #13)
#41 := (not #14)
#48 := (or #41 #15 #16)
#51 := (not #48)
#17 := (or #15 #16)
#18 := (implies #14 #17)
#19 := (not #18)
#54 := (iff #19 #51)
#42 := (or #41 #17)
#45 := (not #42)
#52 := (iff #45 #51)
#49 := (iff #42 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#46 := (iff #19 #45)
#43 := (iff #18 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#55 := [trans #47 #53]: #54
#40 := [asserted]: #19
#56 := [mp #40 #55]: #51
#57 := [not-or-elim #56]: #14
#59 := [and-elim #57]: #13
#70 := [iff-true #59]: #69
#86 := [monotonicity #70]: #85
#90 := [trans #86 #88]: #89
#93 := [monotonicity #90]: #92
#63 := [not-or-elim #56]: #62
#94 := [mp #63 #93]: #91
#96 := [iff-false #94]: #95
#82 := (iff #8 false)
#78 := (not #8)
#60 := (not #15)
#79 := (iff #60 #78)
#76 := (iff #15 #8)
#71 := (and #8 true)
#74 := (iff #71 #8)
#75 := [rewrite]: #74
#72 := (iff #15 #71)
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#80 := [monotonicity #77]: #79
#61 := [not-or-elim #56]: #60
#81 := [mp #61 #80]: #78
#83 := [iff-false #81]: #82
#99 := [monotonicity #83 #96]: #98
#103 := [trans #99 #101]: #102
#58 := [and-elim #57]: #11
[mp #58 #103]: false
unsat
8cc97fc7cc00db3ed62df1f9aee16d60ca0091ad 83 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#60 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#59 := (not #8)
#61 := (or #59 #60)
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
#16 := (or #8 #13)
#68 := (not #16)
#99 := [hypothesis]: #60
#83 := (or #61 #10)
#84 := [def-axiom]: #83
#100 := [unit-resolution #84 #99]: #61
#55 := (not #13)
#56 := (or #55 #60)
#89 := (or #56 #10)
#90 := [def-axiom]: #89
#101 := [unit-resolution #90 #99]: #56
#53 := (not #56)
#62 := (not #61)
#64 := (or #62 #53)
#14 := (and #13 #10)
#11 := (and #8 #10)
#15 := (or #11 #14)
#65 := (iff #15 #64)
#54 := (iff #14 #53)
#63 := [rewrite]: #54
#57 := (iff #11 #62)
#58 := [rewrite]: #57
#66 := [monotonicity #58 #63]: #65
#17 := (and #16 #10)
#41 := (not #15)
#42 := (or #41 #17)
#45 := (not #42)
#18 := (implies #15 #17)
#19 := (not #18)
#46 := (iff #19 #45)
#43 := (iff #18 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#40 := [asserted]: #19
#50 := [mp #40 #47]: #45
#48 := [not-or-elim #50]: #15
#67 := [mp #48 #66]: #64
#102 := [unit-resolution #67 #101 #100]: false
#103 := [lemma #102]: #10
#69 := (or #68 #60)
#49 := (not #17)
#78 := (iff #49 #69)
#70 := (not #69)
#73 := (not #70)
#76 := (iff #73 #69)
#77 := [rewrite]: #76
#74 := (iff #49 #73)
#71 := (iff #17 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := [not-or-elim #50]: #49
#80 := [mp #51 #79]: #69
#104 := [unit-resolution #80 #103]: #68
#93 := (or #16 #59)
#94 := [def-axiom]: #93
#105 := [unit-resolution #94 #104]: #59
#81 := (or #61 #8)
#82 := [def-axiom]: #81
#106 := [unit-resolution #82 #105]: #61
#95 := (or #16 #55)
#96 := [def-axiom]: #95
#107 := [unit-resolution #96 #104]: #55
#87 := (or #56 #13)
#88 := [def-axiom]: #87
#108 := [unit-resolution #88 #107]: #56
[unit-resolution #67 #108 #106]: false
unsat
52fb5169edaf3c81cfc25b6a7116b0b55c8a28c3 55 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#36 := (not #8)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#37 := (or #36 #10)
#43 := (not #37)
#44 := (or #43 #8)
#52 := (not #44)
#53 := (or #52 #8)
#58 := (not #53)
#11 := (implies #8 #10)
#12 := (implies #11 #8)
#13 := (implies #12 #8)
#14 := (not #13)
#59 := (iff #14 #58)
#56 := (iff #13 #53)
#49 := (implies #44 #8)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #13 #49)
#47 := (iff #12 #44)
#40 := (implies #37 #8)
#45 := (iff #40 #44)
#46 := [rewrite]: #45
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#48 := [trans #42 #46]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#35 := [asserted]: #14
#63 := [mp #35 #60]: #58
#62 := [not-or-elim #63]: #36
#76 := (iff #44 #43)
#71 := (or #43 false)
#74 := (iff #71 #43)
#75 := [rewrite]: #74
#72 := (iff #44 #71)
#69 := (iff #8 false)
#70 := [iff-false #62]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#61 := [not-or-elim #63]: #44
#67 := [mp #61 #77]: #43
#65 := [not-or-elim #67]: #8
[unit-resolution #65 #62]: false
unsat
dd980002bd81efbda187ebb6bc06f50928195b21 129 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#16 := (or #8 #13)
#52 := (not #16)
#53 := (or #52 #10)
#45 := (not #13)
#46 := (or #45 #10)
#75 := (not #46)
#41 := (not #8)
#42 := (or #41 #10)
#74 := (not #42)
#76 := (or #74 #75)
#116 := (not #53)
#77 := (not #76)
#128 := [hypothesis]: #77
#122 := (or #76 #116)
#83 := (iff #76 #53)
#49 := (and #42 #46)
#62 := (not #49)
#63 := (iff #62 #53)
#84 := (iff #63 #83)
#81 := (iff #62 #76)
#69 := (not #77)
#79 := (iff #69 #76)
#80 := [rewrite]: #79
#71 := (iff #62 #69)
#72 := (iff #49 #77)
#73 := [rewrite]: #72
#78 := [monotonicity #73]: #71
#82 := [trans #78 #80]: #81
#85 := [monotonicity #82]: #84
#17 := (implies #16 #10)
#14 := (implies #13 #10)
#11 := (implies #8 #10)
#15 := (and #11 #14)
#18 := (iff #15 #17)
#19 := (not #18)
#66 := (iff #19 #63)
#56 := (iff #49 #53)
#59 := (not #56)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #19 #59)
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#48 := [rewrite]: #47
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#51 := [monotonicity #44 #48]: #50
#58 := [monotonicity #51 #55]: #57
#61 := [monotonicity #58]: #60
#67 := [trans #61 #65]: #66
#40 := [asserted]: #19
#70 := [mp #40 #67]: #63
#86 := [mp #70 #85]: #83
#119 := (not #83)
#120 := (or #76 #116 #119)
#121 := [def-axiom]: #120
#123 := [unit-resolution #121 #86]: #122
#129 := [unit-resolution #123 #128]: #116
#112 := (or #53 #16)
#113 := [def-axiom]: #112
#130 := [unit-resolution #113 #129]: #16
#100 := (or #76 #42)
#101 := [def-axiom]: #100
#131 := [unit-resolution #101 #128]: #42
#89 := (not #10)
#114 := (or #53 #89)
#115 := [def-axiom]: #114
#132 := [unit-resolution #115 #129]: #89
#92 := (or #74 #41 #10)
#93 := [def-axiom]: #92
#133 := [unit-resolution #93 #132 #131]: #41
#102 := (or #76 #46)
#103 := [def-axiom]: #102
#134 := [unit-resolution #103 #128]: #46
#98 := (or #75 #45 #10)
#99 := [def-axiom]: #98
#135 := [unit-resolution #99 #132 #134]: #45
#110 := (or #52 #8 #13)
#111 := [def-axiom]: #110
#136 := [unit-resolution #111 #135 #133 #130]: false
#137 := [lemma #136]: #76
#126 := (or #77 #53)
#124 := (or #77 #53 #119)
#125 := [def-axiom]: #124
#127 := [unit-resolution #125 #86]: #126
#138 := [unit-resolution #127 #137]: #53
#139 := [hypothesis]: #74
#90 := (or #42 #89)
#91 := [def-axiom]: #90
#140 := [unit-resolution #91 #139]: #89
#87 := (or #42 #8)
#88 := [def-axiom]: #87
#141 := [unit-resolution #88 #139]: #8
#106 := (or #16 #41)
#107 := [def-axiom]: #106
#142 := [unit-resolution #107 #141]: #16
#117 := (or #116 #52 #10)
#118 := [def-axiom]: #117
#143 := [unit-resolution #118 #142 #140 #138]: false
#144 := [lemma #143]: #42
#104 := (or #77 #74 #75)
#105 := [def-axiom]: #104
#145 := [unit-resolution #105 #144 #137]: #75
#96 := (or #46 #89)
#97 := [def-axiom]: #96
#146 := [unit-resolution #97 #145]: #89
#94 := (or #46 #13)
#95 := [def-axiom]: #94
#147 := [unit-resolution #95 #145]: #13
#108 := (or #16 #45)
#109 := [def-axiom]: #108
#148 := [unit-resolution #109 #147]: #16
[unit-resolution #118 #148 #146 #138]: false
unsat
642785ae09fc22b58f15d1ae19762bba0657cc2e 87 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#44 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#51 := (not #8)
#69 := (or #51 #44 #13)
#11 := (and #8 #10)
#40 := (not #11)
#41 := (or #40 #13)
#63 := (not #41)
#72 := (iff #63 #69)
#105 := (iff #72 false)
#97 := (not #69)
#100 := (iff #97 #69)
#103 := (iff #100 false)
#104 := [rewrite]: #103
#101 := (iff #72 #100)
#98 := (iff #63 #97)
#95 := (iff #41 #69)
#83 := (or #51 #44)
#90 := (or #83 #13)
#93 := (iff #90 #69)
#94 := [rewrite]: #93
#91 := (iff #41 #90)
#88 := (iff #40 #83)
#84 := (not #83)
#81 := (not #84)
#80 := (iff #81 #83)
#87 := [rewrite]: #80
#82 := (iff #40 #81)
#85 := (iff #11 #84)
#86 := [rewrite]: #85
#79 := [monotonicity #86]: #82
#89 := [trans #79 #87]: #88
#92 := [monotonicity #89]: #91
#96 := [trans #92 #94]: #95
#99 := [monotonicity #96]: #98
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#15 := (implies #10 #13)
#16 := (implies #8 #15)
#14 := (implies #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#75 := (iff #18 #72)
#45 := (or #44 #13)
#52 := (or #51 #45)
#64 := (iff #63 #52)
#73 := (iff #64 #72)
#70 := (iff #52 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#67 := (iff #18 #64)
#57 := (iff #41 #52)
#60 := (not #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #52)
#48 := (implies #8 #45)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #16 #48)
#46 := (iff #15 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#56 := [trans #50 #54]: #55
#42 := (iff #14 #41)
#43 := [rewrite]: #42
#59 := [monotonicity #43 #56]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#76 := [trans #68 #74]: #75
#39 := [asserted]: #18
#77 := [mp #39 #76]: #72
[mp #77 #106]: false
unsat
3cb22aa5593767652961218f5ced2beb102ad8c3 172 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#17 := (and #8 #14)
#70 := (not #17)
#191 := (iff #70 false)
#1 := true
#126 := (not true)
#189 := (iff #126 false)
#190 := [rewrite]: #189
#136 := (iff #70 #126)
#186 := (iff #17 true)
#181 := (and true true)
#184 := (iff #181 true)
#185 := [rewrite]: #184
#182 := (iff #17 #181)
#124 := (iff #14 true)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#57 := (not #14)
#58 := (or #57 #10)
#64 := (not #58)
#65 := (or #64 #10)
#156 := (iff #65 #14)
#151 := (or #14 false)
#154 := (iff #151 #14)
#155 := [rewrite]: #154
#152 := (iff #65 #151)
#127 := (iff #10 false)
#116 := (not #10)
#71 := (or #70 #10)
#77 := (not #71)
#86 := (not #65)
#44 := (not #8)
#45 := (or #44 #10)
#51 := (not #45)
#52 := (or #51 #10)
#95 := (not #52)
#104 := (or #95 #86 #77 #10)
#107 := (not #104)
#18 := (implies #17 #10)
#19 := (implies #18 #10)
#15 := (implies #14 #10)
#16 := (implies #15 #10)
#20 := (implies #16 #19)
#11 := (implies #8 #10)
#12 := (implies #11 #10)
#21 := (implies #12 #20)
#22 := (not #21)
#110 := (iff #22 #107)
#78 := (or #77 #10)
#87 := (or #86 #78)
#96 := (or #95 #87)
#101 := (not #96)
#108 := (iff #101 #107)
#105 := (iff #96 #104)
#106 := [rewrite]: #105
#109 := [monotonicity #106]: #108
#102 := (iff #22 #101)
#99 := (iff #21 #96)
#92 := (implies #52 #87)
#97 := (iff #92 #96)
#98 := [rewrite]: #97
#93 := (iff #21 #92)
#90 := (iff #20 #87)
#83 := (implies #65 #78)
#88 := (iff #83 #87)
#89 := [rewrite]: #88
#84 := (iff #20 #83)
#81 := (iff #19 #78)
#74 := (implies #71 #10)
#79 := (iff #74 #78)
#80 := [rewrite]: #79
#75 := (iff #19 #74)
#72 := (iff #18 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [trans #76 #80]: #81
#68 := (iff #16 #65)
#61 := (implies #58 #10)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #16 #61)
#59 := (iff #15 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#85 := [monotonicity #69 #82]: #84
#91 := [trans #85 #89]: #90
#55 := (iff #12 #52)
#48 := (implies #45 #10)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #12 #48)
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#56 := [trans #50 #54]: #55
#94 := [monotonicity #56 #91]: #93
#100 := [trans #94 #98]: #99
#103 := [monotonicity #100]: #102
#111 := [trans #103 #109]: #110
#43 := [asserted]: #22
#112 := [mp #43 #111]: #107
#117 := [not-or-elim #112]: #116
#128 := [iff-false #117]: #127
#149 := (iff #64 #14)
#144 := (not #57)
#147 := (iff #144 #14)
#148 := [rewrite]: #147
#145 := (iff #64 #144)
#142 := (iff #58 #57)
#137 := (or #57 false)
#140 := (iff #137 #57)
#141 := [rewrite]: #140
#138 := (iff #58 #137)
#139 := [monotonicity #128]: #138
#143 := [trans #139 #141]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#153 := [monotonicity #150 #128]: #152
#157 := [trans #153 #155]: #156
#114 := [not-or-elim #112]: #65
#123 := [mp #114 #157]: #14
#158 := [iff-true #123]: #124
#122 := (iff #8 true)
#178 := (iff #52 #8)
#173 := (or #8 false)
#176 := (iff #173 #8)
#177 := [rewrite]: #176
#174 := (iff #52 #173)
#171 := (iff #51 #8)
#166 := (not #44)
#169 := (iff #166 #8)
#170 := [rewrite]: #169
#167 := (iff #51 #166)
#164 := (iff #45 #44)
#159 := (or #44 false)
#162 := (iff #159 #44)
#163 := [rewrite]: #162
#160 := (iff #45 #159)
#161 := [monotonicity #128]: #160
#165 := [trans #161 #163]: #164
#168 := [monotonicity #165]: #167
#172 := [trans #168 #170]: #171
#175 := [monotonicity #172 #128]: #174
#179 := [trans #175 #177]: #178
#113 := [not-or-elim #112]: #52
#121 := [mp #113 #179]: #8
#180 := [iff-true #121]: #122
#183 := [monotonicity #180 #158]: #182
#187 := [trans #183 #185]: #186
#188 := [monotonicity #187]: #136
#192 := [trans #188 #190]: #191
#134 := (iff #71 #70)
#129 := (or #70 false)
#132 := (iff #129 #70)
#133 := [rewrite]: #132
#130 := (iff #71 #129)
#131 := [monotonicity #128]: #130
#135 := [trans #131 #133]: #134
#115 := [not-or-elim #112]: #71
#125 := [mp #115 #135]: #70
[mp #125 #192]: false
unsat
2a741b287996e3d5a24eaaf5674ca253bbcd8ef7 107 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#17 := (and #8 #14)
#58 := (not #17)
#59 := (or #58 #10)
#126 := (iff #59 false)
#121 := (or false false)
#124 := (iff #121 false)
#125 := [rewrite]: #124
#122 := (iff #59 #121)
#105 := (iff #10 false)
#95 := (not #10)
#62 := (not #59)
#51 := (not #14)
#44 := (not #8)
#84 := (or #44 #51 #10 #62)
#87 := (not #84)
#18 := (implies #17 #10)
#19 := (not #18)
#15 := (implies #14 #10)
#16 := (not #15)
#20 := (implies #16 #19)
#11 := (implies #8 #10)
#12 := (not #11)
#21 := (implies #12 #20)
#22 := (not #21)
#90 := (iff #22 #87)
#52 := (or #51 #10)
#68 := (or #52 #62)
#45 := (or #44 #10)
#76 := (or #45 #68)
#81 := (not #76)
#88 := (iff #81 #87)
#85 := (iff #76 #84)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#82 := (iff #22 #81)
#79 := (iff #21 #76)
#48 := (not #45)
#73 := (implies #48 #68)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #21 #73)
#71 := (iff #20 #68)
#55 := (not #52)
#65 := (implies #55 #62)
#69 := (iff #65 #68)
#70 := [rewrite]: #69
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#67 := [monotonicity #57 #64]: #66
#72 := [trans #67 #70]: #71
#49 := (iff #12 #48)
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#75 := [monotonicity #50 #72]: #74
#80 := [trans #75 #78]: #79
#83 := [monotonicity #80]: #82
#91 := [trans #83 #89]: #90
#43 := [asserted]: #22
#92 := [mp #43 #91]: #87
#96 := [not-or-elim #92]: #95
#106 := [iff-false #96]: #105
#119 := (iff #58 false)
#1 := true
#114 := (not true)
#117 := (iff #114 false)
#118 := [rewrite]: #117
#115 := (iff #58 #114)
#112 := (iff #17 true)
#107 := (and true true)
#110 := (iff #107 true)
#111 := [rewrite]: #110
#108 := (iff #17 #107)
#103 := (iff #14 true)
#94 := [not-or-elim #92]: #14
#104 := [iff-true #94]: #103
#101 := (iff #8 true)
#93 := [not-or-elim #92]: #8
#102 := [iff-true #93]: #101
#109 := [monotonicity #102 #104]: #108
#113 := [trans #109 #111]: #112
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#123 := [monotonicity #120 #106]: #122
#127 := [trans #123 #125]: #126
#97 := [not-or-elim #92]: #59
[mp #97 #127]: false
unsat
e5df9c3ac788514d2b7d8d9dabf4974cdc46f887 136 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
#73 := (not #12)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#41 := (not #8)
#48 := (or #41 #12)
#81 := (not #48)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#45 := (or #41 #10)
#80 := (not #45)
#134 := [hypothesis]: #80
#107 := (or #45 #8)
#108 := [def-axiom]: #107
#135 := [unit-resolution #108 #134]: #8
#72 := (not #10)
#74 := (or #72 #73)
#109 := (or #45 #72)
#110 := [def-axiom]: #109
#136 := [unit-resolution #110 #134]: #72
#95 := (or #74 #10)
#96 := [def-axiom]: #95
#137 := [unit-resolution #96 #136]: #74
#75 := (not #74)
#67 := (or #41 #75)
#82 := (or #80 #81)
#119 := (or #82 #45)
#120 := [def-axiom]: #119
#138 := [unit-resolution #120 #134]: #82
#83 := (not #82)
#128 := (or #67 #83)
#89 := (iff #67 #82)
#51 := (and #45 #48)
#13 := (and #10 #12)
#42 := (or #41 #13)
#60 := (not #42)
#61 := (iff #60 #51)
#92 := (iff #61 #89)
#77 := (not #67)
#86 := (iff #77 #83)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #61 #86)
#84 := (iff #51 #83)
#85 := [rewrite]: #84
#78 := (iff #60 #77)
#69 := (iff #42 #67)
#70 := (iff #13 #75)
#71 := [rewrite]: #70
#76 := [monotonicity #71]: #69
#79 := [monotonicity #76]: #78
#88 := [monotonicity #79 #85]: #87
#93 := [trans #88 #91]: #92
#16 := (implies #8 #12)
#15 := (implies #8 #10)
#17 := (and #15 #16)
#14 := (implies #8 #13)
#18 := (iff #14 #17)
#19 := (not #18)
#64 := (iff #19 #61)
#54 := (iff #42 #51)
#57 := (not #54)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #19 #57)
#55 := (iff #18 #54)
#52 := (iff #17 #51)
#49 := (iff #16 #48)
#50 := [rewrite]: #49
#46 := (iff #15 #45)
#47 := [rewrite]: #46
#53 := [monotonicity #47 #50]: #52
#43 := (iff #14 #42)
#44 := [rewrite]: #43
#56 := [monotonicity #44 #53]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#40 := [asserted]: #19
#68 := [mp #40 #65]: #61
#94 := [mp #68 #93]: #89
#125 := (not #89)
#126 := (or #67 #83 #125)
#127 := [def-axiom]: #126
#129 := [unit-resolution #127 #94]: #128
#139 := [unit-resolution #129 #138]: #67
#105 := (or #77 #41 #75)
#106 := [def-axiom]: #105
#140 := [unit-resolution #106 #139 #137 #135]: false
#141 := [lemma #140]: #45
#142 := [hypothesis]: #77
#101 := (or #67 #8)
#102 := [def-axiom]: #101
#143 := [unit-resolution #102 #142]: #8
#144 := [unit-resolution #129 #142]: #83
#121 := (or #82 #48)
#122 := [def-axiom]: #121
#145 := [unit-resolution #122 #144]: #48
#103 := (or #67 #74)
#104 := [def-axiom]: #103
#146 := [unit-resolution #104 #142]: #74
#111 := (or #80 #41 #10)
#112 := [def-axiom]: #111
#147 := [unit-resolution #112 #143 #141]: #10
#99 := (or #75 #72 #73)
#100 := [def-axiom]: #99
#148 := [unit-resolution #100 #147 #146]: #73
#117 := (or #81 #41 #12)
#118 := [def-axiom]: #117
#149 := [unit-resolution #118 #148 #145 #143]: false
#150 := [lemma #149]: #67
#132 := (or #77 #82)
#130 := (or #77 #82 #125)
#131 := [def-axiom]: #130
#133 := [unit-resolution #131 #94]: #132
#151 := [unit-resolution #133 #150]: #82
#123 := (or #83 #80 #81)
#124 := [def-axiom]: #123
#152 := [unit-resolution #124 #151 #141]: #81
#115 := (or #48 #73)
#116 := [def-axiom]: #115
#153 := [unit-resolution #116 #152]: #73
#113 := (or #48 #8)
#114 := [def-axiom]: #113
#154 := [unit-resolution #114 #152]: #8
#155 := [unit-resolution #106 #154 #150]: #75
#97 := (or #74 #12)
#98 := [def-axiom]: #97
[unit-resolution #98 #155 #153]: false
unsat
2b64d751f48e9ffd90426fd6834e1d0739b8d27d 43 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#11 := (implies #10 #8)
#12 := (implies #8 #11)
#13 := (not #12)
#60 := (iff #13 false)
#35 := (not #10)
#36 := (or #35 #8)
#42 := (not #8)
#43 := (or #42 #36)
#48 := (not #43)
#58 := (iff #48 false)
#1 := true
#53 := (not true)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #48 #53)
#51 := (iff #43 true)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#49 := (iff #13 #48)
#46 := (iff #12 #43)
#39 := (implies #8 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#61 := [trans #50 #59]: #60
#34 := [asserted]: #13
[mp #34 #61]: false
unsat
b8e0ff6234cf196c70abfdfcc191c52116ff14bf 120 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#41 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#48 := (not #8)
#81 := (or #48 #41 #12)
#141 := (iff #81 false)
#136 := (or false false false)
#139 := (iff #136 false)
#140 := [rewrite]: #139
#137 := (iff #81 #136)
#115 := (iff #12 false)
#104 := (not #12)
#54 := (or #48 #10)
#63 := (not #54)
#84 := (not #81)
#90 := (or #84 #63 #48 #12)
#95 := (not #90)
#16 := (implies #8 #12)
#15 := (implies #8 #10)
#17 := (implies #15 #16)
#13 := (implies #10 #12)
#14 := (implies #8 #13)
#18 := (implies #14 #17)
#19 := (not #18)
#98 := (iff #19 #95)
#57 := (or #48 #12)
#64 := (or #63 #57)
#42 := (or #41 #12)
#49 := (or #48 #42)
#72 := (not #49)
#73 := (or #72 #64)
#78 := (not #73)
#96 := (iff #78 #95)
#93 := (iff #73 #90)
#87 := (or #84 #64)
#91 := (iff #87 #90)
#92 := [rewrite]: #91
#88 := (iff #73 #87)
#85 := (iff #72 #84)
#82 := (iff #49 #81)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#89 := [monotonicity #86]: #88
#94 := [trans #89 #92]: #93
#97 := [monotonicity #94]: #96
#79 := (iff #19 #78)
#76 := (iff #18 #73)
#69 := (implies #49 #64)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #18 #69)
#67 := (iff #17 #64)
#60 := (implies #54 #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #17 #60)
#58 := (iff #16 #57)
#59 := [rewrite]: #58
#55 := (iff #15 #54)
#56 := [rewrite]: #55
#62 := [monotonicity #56 #59]: #61
#68 := [trans #62 #66]: #67
#52 := (iff #14 #49)
#45 := (implies #8 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#71 := [monotonicity #53 #68]: #70
#77 := [trans #71 #75]: #76
#80 := [monotonicity #77]: #79
#99 := [trans #80 #97]: #98
#40 := [asserted]: #19
#100 := [mp #40 #99]: #95
#105 := [not-or-elim #100]: #104
#116 := [iff-false #105]: #115
#134 := (iff #41 false)
#1 := true
#117 := (not true)
#120 := (iff #117 false)
#121 := [rewrite]: #120
#132 := (iff #41 #117)
#112 := (iff #10 true)
#129 := (iff #54 #10)
#124 := (or false #10)
#127 := (iff #124 #10)
#128 := [rewrite]: #127
#125 := (iff #54 #124)
#122 := (iff #48 false)
#118 := (iff #48 #117)
#113 := (iff #8 true)
#103 := [not-or-elim #100]: #8
#114 := [iff-true #103]: #113
#119 := [monotonicity #114]: #118
#123 := [trans #119 #121]: #122
#126 := [monotonicity #123]: #125
#130 := [trans #126 #128]: #129
#102 := [not-or-elim #100]: #54
#111 := [mp #102 #130]: #10
#131 := [iff-true #111]: #112
#133 := [monotonicity #131]: #132
#135 := [trans #133 #121]: #134
#138 := [monotonicity #123 #135 #116]: #137
#142 := [trans #138 #140]: #141
#101 := [not-or-elim #100]: #81
[mp #101 #142]: false
unsat
8a8c56cbbacd73dc988b4e0a6095fc9e6705a6a6 94 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#41 := (not #8)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#66 := (or #10 #41 #13)
#115 := (iff #66 false)
#110 := (or false false false)
#113 := (iff #110 false)
#114 := [rewrite]: #113
#111 := (iff #66 #110)
#101 := (iff #13 false)
#90 := (not #13)
#69 := (not #66)
#75 := (or #69 #41 #10 #13)
#80 := (not #75)
#16 := (or #10 #13)
#17 := (implies #8 #16)
#14 := (implies #8 #13)
#11 := (implies #8 #10)
#15 := (or #11 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#83 := (iff #19 #80)
#51 := (or #41 #16)
#45 := (or #41 #13)
#42 := (or #41 #10)
#48 := (or #42 #45)
#57 := (not #48)
#58 := (or #57 #51)
#63 := (not #58)
#81 := (iff #63 #80)
#78 := (iff #58 #75)
#72 := (or #69 #51)
#76 := (iff #72 #75)
#77 := [rewrite]: #76
#73 := (iff #58 #72)
#70 := (iff #57 #69)
#67 := (iff #48 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#79 := [trans #74 #77]: #78
#82 := [monotonicity #79]: #81
#64 := (iff #19 #63)
#61 := (iff #18 #58)
#54 := (implies #48 #51)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #18 #54)
#52 := (iff #17 #51)
#53 := [rewrite]: #52
#49 := (iff #15 #48)
#46 := (iff #14 #45)
#47 := [rewrite]: #46
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#50 := [monotonicity #44 #47]: #49
#56 := [monotonicity #50 #53]: #55
#62 := [trans #56 #60]: #61
#65 := [monotonicity #62]: #64
#84 := [trans #65 #82]: #83
#40 := [asserted]: #19
#85 := [mp #40 #84]: #80
#91 := [not-or-elim #85]: #90
#102 := [iff-false #91]: #101
#108 := (iff #41 false)
#1 := true
#103 := (not true)
#106 := (iff #103 false)
#107 := [rewrite]: #106
#104 := (iff #41 #103)
#97 := (iff #8 true)
#87 := [not-or-elim #85]: #8
#98 := [iff-true #87]: #97
#105 := [monotonicity #98]: #104
#109 := [trans #105 #107]: #108
#99 := (iff #10 false)
#88 := (not #10)
#89 := [not-or-elim #85]: #88
#100 := [iff-false #89]: #99
#112 := [monotonicity #100 #109 #102]: #111
#116 := [trans #112 #114]: #115
#86 := [not-or-elim #85]: #66
[mp #86 #116]: false
unsat
58f02564c26046ffbbf0af2951cd5b2669f92e0c 112 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#38 := (not #8)
#39 := (or #38 #10)
#45 := (not #39)
#46 := (or #45 #8)
#54 := (not #46)
#55 := (or #54 #8)
#63 := (not #55)
#64 := (or #63 #10)
#134 := (iff #64 false)
#129 := (or false false)
#132 := (iff #129 false)
#133 := [rewrite]: #132
#130 := (iff #64 #129)
#90 := (iff #10 false)
#82 := (not #10)
#72 := (not #64)
#73 := (or #72 #10)
#78 := (not #73)
#11 := (implies #8 #10)
#12 := (implies #11 #8)
#13 := (implies #12 #8)
#14 := (implies #13 #10)
#15 := (implies #14 #10)
#16 := (not #15)
#79 := (iff #16 #78)
#76 := (iff #15 #73)
#69 := (implies #64 #10)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #15 #69)
#67 := (iff #14 #64)
#60 := (implies #55 #10)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #14 #60)
#58 := (iff #13 #55)
#51 := (implies #46 #8)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #13 #51)
#49 := (iff #12 #46)
#42 := (implies #39 #8)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#59 := [trans #53 #57]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#71 := [monotonicity #68]: #70
#77 := [trans #71 #75]: #76
#80 := [monotonicity #77]: #79
#37 := [asserted]: #16
#83 := [mp #37 #80]: #78
#84 := [not-or-elim #83]: #82
#91 := [iff-false #84]: #90
#127 := (iff #63 false)
#1 := true
#122 := (not true)
#125 := (iff #122 false)
#126 := [rewrite]: #125
#123 := (iff #63 #122)
#120 := (iff #55 true)
#115 := (or #38 #8)
#118 := (iff #115 true)
#119 := [rewrite]: #118
#116 := (iff #55 #115)
#113 := (iff #54 #38)
#111 := (iff #46 #8)
#106 := (or #8 #8)
#109 := (iff #106 #8)
#110 := [rewrite]: #109
#107 := (iff #46 #106)
#104 := (iff #45 #8)
#99 := (not #38)
#102 := (iff #99 #8)
#103 := [rewrite]: #102
#100 := (iff #45 #99)
#97 := (iff #39 #38)
#92 := (or #38 false)
#95 := (iff #92 #38)
#96 := [rewrite]: #95
#93 := (iff #39 #92)
#94 := [monotonicity #91]: #93
#98 := [trans #94 #96]: #97
#101 := [monotonicity #98]: #100
#105 := [trans #101 #103]: #104
#108 := [monotonicity #105]: #107
#112 := [trans #108 #110]: #111
#114 := [monotonicity #112]: #113
#117 := [monotonicity #114]: #116
#121 := [trans #117 #119]: #120
#124 := [monotonicity #121]: #123
#128 := [trans #124 #126]: #127
#131 := [monotonicity #128 #91]: #130
#135 := [trans #131 #133]: #134
#81 := [not-or-elim #83]: #64
[mp #81 #135]: false
unsat
a7f6ab6ad332f5aded5b2efbf0f5616121d36767 67 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#13 := (not #8)
#38 := (or #13 #10)
#89 := (iff #38 false)
#84 := (or false false)
#87 := (iff #84 false)
#88 := [rewrite]: #87
#85 := (iff #38 #84)
#73 := (iff #10 false)
#12 := (not #10)
#47 := (not #38)
#56 := (or #47 #10 #13)
#59 := (not #56)
#14 := (implies #12 #13)
#11 := (implies #8 #10)
#15 := (implies #11 #14)
#16 := (not #15)
#62 := (iff #16 #59)
#41 := (or #10 #13)
#48 := (or #47 #41)
#53 := (not #48)
#60 := (iff #53 #59)
#57 := (iff #48 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#54 := (iff #16 #53)
#51 := (iff #15 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#43 := [rewrite]: #42
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#63 := [trans #55 #61]: #62
#37 := [asserted]: #16
#64 := [mp #37 #63]: #59
#66 := [not-or-elim #64]: #12
#74 := [iff-false #66]: #73
#82 := (iff #13 false)
#1 := true
#77 := (not true)
#80 := (iff #77 false)
#81 := [rewrite]: #80
#78 := (iff #13 #77)
#75 := (iff #8 true)
#67 := [not-or-elim #64]: #8
#76 := [iff-true #67]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#86 := [monotonicity #83 #74]: #85
#90 := [trans #86 #88]: #89
#65 := [not-or-elim #64]: #38
[mp #65 #90]: false
unsat
96fa7a8ac0c9f92be5ba4897a13fe923e953299b 94 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#41 := (not #8)
#66 := (or #41 #10 #12)
#115 := (iff #66 false)
#110 := (or false false false)
#113 := (iff #110 false)
#114 := [rewrite]: #113
#111 := (iff #66 #110)
#101 := (iff #12 false)
#90 := (not #12)
#69 := (not #66)
#75 := (or #69 #10 #41 #12)
#80 := (not #75)
#16 := (implies #8 #12)
#15 := (implies #8 #10)
#17 := (or #15 #16)
#13 := (or #10 #12)
#14 := (implies #8 #13)
#18 := (implies #14 #17)
#19 := (not #18)
#83 := (iff #19 #80)
#48 := (or #41 #12)
#45 := (or #41 #10)
#51 := (or #45 #48)
#42 := (or #41 #13)
#57 := (not #42)
#58 := (or #57 #51)
#63 := (not #58)
#81 := (iff #63 #80)
#78 := (iff #58 #75)
#72 := (or #69 #51)
#76 := (iff #72 #75)
#77 := [rewrite]: #76
#73 := (iff #58 #72)
#70 := (iff #57 #69)
#67 := (iff #42 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#79 := [trans #74 #77]: #78
#82 := [monotonicity #79]: #81
#64 := (iff #19 #63)
#61 := (iff #18 #58)
#54 := (implies #42 #51)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #18 #54)
#52 := (iff #17 #51)
#49 := (iff #16 #48)
#50 := [rewrite]: #49
#46 := (iff #15 #45)
#47 := [rewrite]: #46
#53 := [monotonicity #47 #50]: #52
#43 := (iff #14 #42)
#44 := [rewrite]: #43
#56 := [monotonicity #44 #53]: #55
#62 := [trans #56 #60]: #61
#65 := [monotonicity #62]: #64
#84 := [trans #65 #82]: #83
#40 := [asserted]: #19
#85 := [mp #40 #84]: #80
#91 := [not-or-elim #85]: #90
#102 := [iff-false #91]: #101
#97 := (iff #10 false)
#87 := (not #10)
#88 := [not-or-elim #85]: #87
#98 := [iff-false #88]: #97
#108 := (iff #41 false)
#1 := true
#103 := (not true)
#106 := (iff #103 false)
#107 := [rewrite]: #106
#104 := (iff #41 #103)
#99 := (iff #8 true)
#89 := [not-or-elim #85]: #8
#100 := [iff-true #89]: #99
#105 := [monotonicity #100]: #104
#109 := [trans #105 #107]: #108
#112 := [monotonicity #109 #98 #102]: #111
#116 := [trans #112 #114]: #115
#86 := [not-or-elim #85]: #66
[mp #86 #116]: false
unsat
470cd9c1962b0613b02378d77ef88475d95420b4 65 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#42 := (not #10)
#81 := [hypothesis]: #42
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#38 := (not #8)
#39 := (or #38 #10)
#43 := (or #42 #8)
#46 := (and #39 #43)
#14 := (iff #8 #10)
#52 := (not #46)
#53 := (or #52 #14)
#58 := (not #53)
#12 := (implies #10 #8)
#11 := (implies #8 #10)
#13 := (and #11 #12)
#15 := (implies #13 #14)
#16 := (not #15)
#59 := (iff #16 #58)
#56 := (iff #15 #53)
#49 := (implies #46 #14)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#48 := [monotonicity #41 #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#37 := [asserted]: #16
#63 := [mp #37 #60]: #58
#61 := [not-or-elim #63]: #46
#62 := [and-elim #61]: #39
#82 := [unit-resolution #62 #81]: #38
#69 := (or #8 #10)
#74 := (iff #38 #10)
#65 := (not #14)
#75 := (iff #65 #74)
#76 := [rewrite]: #75
#66 := [not-or-elim #63]: #65
#77 := [mp #66 #76]: #74
#78 := (not #74)
#71 := (or #8 #10 #78)
#68 := [def-axiom]: #71
#80 := [unit-resolution #68 #77]: #69
#83 := [unit-resolution #80 #82 #81]: false
#84 := [lemma #83]: #10
#64 := [and-elim #61]: #43
#85 := [unit-resolution #64 #84]: #8
#73 := (or #38 #42)
#79 := (or #38 #42 #78)
#72 := [def-axiom]: #79
#70 := [unit-resolution #72 #77]: #73
[unit-resolution #70 #85 #84]: false
unsat
3583d404baf1a70621bef42b341cd5ed7f857304 67 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#12 := (iff #10 #8)
#53 := (not #12)
#71 := [hypothesis]: #53
#76 := (or #10 #12)
#48 := (not #10)
#72 := [hypothesis]: #48
#36 := (not #8)
#37 := (iff #36 #10)
#47 := (not #37)
#69 := (or #47 #12)
#38 := (iff #37 #12)
#11 := (iff #8 #10)
#13 := (iff #11 #12)
#14 := (not #13)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#35 := [asserted]: #14
#43 := [mp #35 #40]: #38
#62 := (not #38)
#67 := (or #47 #12 #62)
#68 := [def-axiom]: #67
#70 := [unit-resolution #68 #43]: #69
#73 := [unit-resolution #70 #71]: #47
#42 := (or #37 #36 #10)
#44 := [def-axiom]: #42
#74 := [unit-resolution #44 #72 #73]: #36
#58 := (or #12 #10 #8)
#59 := [def-axiom]: #58
#75 := [unit-resolution #59 #74 #72 #71]: false
#77 := [lemma #75]: #76
#78 := [unit-resolution #77 #71]: #10
#51 := (or #37 #8 #48)
#52 := [def-axiom]: #51
#79 := [unit-resolution #52 #78 #73]: #8
#60 := (or #12 #48 #36)
#61 := [def-axiom]: #60
#80 := [unit-resolution #61 #79 #78 #71]: false
#81 := [lemma #80]: #12
#82 := [hypothesis]: #36
#65 := (or #37 #53)
#63 := (or #37 #53 #62)
#64 := [def-axiom]: #63
#66 := [unit-resolution #64 #43]: #65
#83 := [unit-resolution #66 #81]: #37
#45 := (or #47 #8 #10)
#46 := [def-axiom]: #45
#84 := [unit-resolution #46 #82 #83]: #10
#56 := (or #53 #48 #8)
#57 := [def-axiom]: #56
#85 := [unit-resolution #57 #84 #82 #81]: false
#86 := [lemma #85]: #8
#49 := (or #47 #36 #48)
#50 := [def-axiom]: #49
#87 := [unit-resolution #50 #86 #83]: #48
#54 := (or #53 #10 #36)
#55 := [def-axiom]: #54
[unit-resolution #55 #87 #86 #81]: false
unsat
25b6de20c7289df4e64dbeeda9c253f854a640a3 30 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (iff #8 #9)
#11 := (not #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (not false)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 false)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
6c7aa77a3e726f6965e1c58daf22b14f9c6eacb5 68 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#13 := (not #8)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#41 := (or #10 #13)
#38 := (or #13 #10)
#68 := (not #41)
#80 := [hypothesis]: #68
#78 := (or #38 #41)
#50 := (not #38)
#51 := (iff #50 #41)
#12 := (not #10)
#14 := (implies #12 #13)
#11 := (implies #8 #10)
#15 := (iff #11 #14)
#16 := (not #15)
#54 := (iff #16 #51)
#44 := (iff #38 #41)
#47 := (not #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #16 #47)
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#43 := [rewrite]: #42
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#46 := [monotonicity #40 #43]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#37 := [asserted]: #16
#58 := [mp #37 #55]: #51
#71 := (not #51)
#76 := (or #38 #41 #71)
#77 := [def-axiom]: #76
#79 := [unit-resolution #77 #58]: #78
#81 := [unit-resolution #79 #80]: #38
#57 := (or #41 #12)
#59 := [def-axiom]: #57
#82 := [unit-resolution #59 #80]: #12
#66 := (or #41 #8)
#67 := [def-axiom]: #66
#83 := [unit-resolution #67 #80]: #8
#60 := (or #50 #13 #10)
#61 := [def-axiom]: #60
#84 := [unit-resolution #61 #83 #82 #81]: false
#85 := [lemma #84]: #41
#74 := (or #50 #68)
#72 := (or #50 #68 #71)
#73 := [def-axiom]: #72
#75 := [unit-resolution #73 #58]: #74
#86 := [unit-resolution #75 #85]: #50
#62 := (or #38 #8)
#63 := [def-axiom]: #62
#87 := [unit-resolution #63 #86]: #8
#64 := (or #38 #12)
#65 := [def-axiom]: #64
#88 := [unit-resolution #65 #86]: #12
#69 := (or #68 #10 #13)
#70 := [def-axiom]: #69
[unit-resolution #70 #88 #87 #85]: false
unsat
ee2587d9af24c00533fd6cc57d8b9c430858d515 64 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (iff #8 #8)
#10 := (iff #8 #9)
#11 := (iff #8 #10)
#12 := (iff #8 #11)
#13 := (iff #8 #12)
#14 := (iff #8 #13)
#15 := (iff #8 #14)
#16 := (iff #8 #15)
#17 := (iff #8 #16)
#18 := (not #17)
#82 := (iff #18 false)
#1 := true
#77 := (not true)
#80 := (iff #77 false)
#81 := [rewrite]: #80
#78 := (iff #18 #77)
#75 := (iff #17 true)
#40 := (iff #9 true)
#41 := [rewrite]: #40
#73 := (iff #17 #9)
#71 := (iff #16 #8)
#42 := (iff #8 true)
#45 := (iff #42 #8)
#46 := [rewrite]: #45
#69 := (iff #16 #42)
#67 := (iff #15 true)
#65 := (iff #15 #9)
#63 := (iff #14 #8)
#61 := (iff #14 #42)
#59 := (iff #13 true)
#57 := (iff #13 #9)
#55 := (iff #12 #8)
#53 := (iff #12 #42)
#51 := (iff #11 true)
#49 := (iff #11 #9)
#47 := (iff #10 #8)
#43 := (iff #10 #42)
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#50 := [monotonicity #48]: #49
#52 := [trans #50 #41]: #51
#54 := [monotonicity #52]: #53
#56 := [trans #54 #46]: #55
#58 := [monotonicity #56]: #57
#60 := [trans #58 #41]: #59
#62 := [monotonicity #60]: #61
#64 := [trans #62 #46]: #63
#66 := [monotonicity #64]: #65
#68 := [trans #66 #41]: #67
#70 := [monotonicity #68]: #69
#72 := [trans #70 #46]: #71
#74 := [monotonicity #72]: #73
#76 := [trans #74 #41]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#39 := [asserted]: #18
[mp #39 #83]: false
unsat
37203ec99bf7e03cbb0be72ecadd1ceb545297a3 121 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#13 := (if #8 #10 #12)
#44 := (or #8 #12)
#69 := (not #44)
#15 := (not #8)
#41 := (or #15 #10)
#68 := (not #41)
#70 := (or #68 #69)
#71 := (not #70)
#123 := [hypothesis]: #71
#103 := (or #70 #44)
#104 := [def-axiom]: #103
#124 := [unit-resolution #104 #123]: #44
#56 := (not #13)
#114 := (or #56 #70)
#73 := (iff #13 #70)
#47 := (and #41 #44)
#57 := (iff #56 #47)
#76 := (iff #57 #73)
#63 := (iff #56 #71)
#74 := (iff #63 #73)
#75 := [rewrite]: #74
#65 := (iff #57 #63)
#66 := (iff #47 #71)
#67 := [rewrite]: #66
#72 := [monotonicity #67]: #65
#77 := [trans #72 #75]: #76
#16 := (implies #15 #12)
#14 := (implies #8 #10)
#17 := (and #14 #16)
#18 := (iff #13 #17)
#19 := (not #18)
#60 := (iff #19 #57)
#50 := (iff #13 #47)
#53 := (not #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #19 #53)
#51 := (iff #18 #50)
#48 := (iff #17 #47)
#45 := (iff #16 #44)
#46 := [rewrite]: #45
#42 := (iff #14 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#52 := [monotonicity #49]: #51
#55 := [monotonicity #52]: #54
#61 := [trans #55 #59]: #60
#40 := [asserted]: #19
#64 := [mp #40 #61]: #57
#78 := [mp #64 #77]: #73
#107 := (not #73)
#112 := (or #56 #70 #107)
#113 := [def-axiom]: #112
#115 := [unit-resolution #113 #78]: #114
#125 := [unit-resolution #115 #123]: #56
#101 := (or #70 #41)
#102 := [def-axiom]: #101
#126 := [unit-resolution #102 #123]: #41
#121 := (or #15 #68 #13)
#116 := [hypothesis]: #41
#117 := [hypothesis]: #8
#83 := (not #10)
#118 := [hypothesis]: #56
#84 := (or #13 #15 #83)
#85 := [def-axiom]: #84
#119 := [unit-resolution #85 #117 #118]: #83
#93 := (or #68 #15 #10)
#94 := [def-axiom]: #93
#120 := [unit-resolution #94 #119 #117 #116]: false
#122 := [lemma #120]: #121
#127 := [unit-resolution #122 #126 #125]: #15
#86 := (not #12)
#87 := (or #13 #8 #86)
#88 := [def-axiom]: #87
#128 := [unit-resolution #88 #127 #125]: #86
#99 := (or #69 #8 #12)
#100 := [def-axiom]: #99
#129 := [unit-resolution #100 #128 #127 #124]: false
#130 := [lemma #129]: #70
#110 := (or #13 #71)
#108 := (or #13 #71 #107)
#109 := [def-axiom]: #108
#111 := [unit-resolution #109 #78]: #110
#133 := [unit-resolution #111 #130]: #13
#131 := [hypothesis]: #15
#89 := (or #41 #8)
#90 := [def-axiom]: #89
#132 := [unit-resolution #90 #131]: #41
#81 := (or #56 #8 #12)
#82 := [def-axiom]: #81
#134 := [unit-resolution #82 #131 #133]: #12
#97 := (or #44 #86)
#98 := [def-axiom]: #97
#135 := [unit-resolution #98 #134]: #44
#105 := (or #71 #68 #69)
#106 := [def-axiom]: #105
#136 := [unit-resolution #106 #135 #132 #130]: false
#137 := [lemma #136]: #8
#79 := (or #56 #15 #10)
#80 := [def-axiom]: #79
#138 := [unit-resolution #80 #137 #133]: #10
#95 := (or #44 #15)
#96 := [def-axiom]: #95
#139 := [unit-resolution #96 #137]: #44
#140 := [unit-resolution #106 #139 #130]: #68
#91 := (or #41 #83)
#92 := [def-axiom]: #91
[unit-resolution #92 #140 #138]: false
unsat
ca9aa750ee4c38be0511c4f7f0526ad22c26b354 50 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#40 := (not #8)
#74 := [hypothesis]: #8
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#36 := (not #10)
#37 := (or #36 #8)
#58 := (or #37 #40)
#59 := [def-axiom]: #58
#75 := [unit-resolution #59 #74]: #37
#54 := (not #37)
#76 := (or #40 #54)
#41 := (or #40 #10)
#44 := (if #8 #37 #41)
#47 := (not #44)
#12 := (implies #8 #10)
#11 := (implies #10 #8)
#13 := (if #8 #11 #12)
#14 := (not #13)
#48 := (iff #14 #47)
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#43 := [rewrite]: #42
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#46 := [monotonicity #39 #43]: #45
#49 := [monotonicity #46]: #48
#35 := [asserted]: #14
#52 := [mp #35 #49]: #47
#70 := (or #44 #40 #54)
#71 := [def-axiom]: #70
#77 := [unit-resolution #71 #52]: #76
#78 := [unit-resolution #77 #75 #74]: false
#79 := [lemma #78]: #40
#53 := (or #41 #8)
#60 := [def-axiom]: #53
#80 := [unit-resolution #60 #79]: #41
#63 := (not #41)
#81 := (or #8 #63)
#72 := (or #44 #8 #63)
#73 := [def-axiom]: #72
#82 := [unit-resolution #73 #52]: #81
[unit-resolution #82 #80 #79]: false
unsat
22136385e4a040042c56d71f978a5676aac282d0 108 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f6 :: S1
#14 := f6
#15 := (= f6 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#16 := (if #11 #13 #15)
#42 := (not #16)
#94 := [hypothesis]: #42
#108 := (or #10 #16)
#47 := (not #11)
#52 := (not #8)
#100 := (or #52 #16)
#95 := [hypothesis]: #8
#53 := (or #11 #52)
#54 := [def-axiom]: #53
#96 := [unit-resolution #54 #95]: #11
#17 := (if #10 #13 #15)
#18 := (if #8 #13 #17)
#92 := (or #16 #18)
#43 := (iff #42 #18)
#19 := (iff #16 #18)
#20 := (not #19)
#44 := (iff #20 #43)
#45 := [rewrite]: #44
#41 := [asserted]: #20
#48 := [mp #41 #45]: #43
#85 := (not #43)
#90 := (or #16 #18 #85)
#91 := [def-axiom]: #90
#93 := [unit-resolution #91 #48]: #92
#97 := [unit-resolution #93 #94]: #18
#76 := (not #18)
#77 := (or #76 #52 #13)
#78 := [def-axiom]: #77
#98 := [unit-resolution #78 #95 #97]: #13
#61 := (not #13)
#62 := (or #16 #47 #61)
#63 := [def-axiom]: #62
#99 := [unit-resolution #63 #98 #96 #94]: false
#101 := [lemma #99]: #100
#102 := [unit-resolution #101 #94]: #52
#55 := (not #10)
#103 := [hypothesis]: #55
#49 := (or #47 #8 #10)
#56 := [def-axiom]: #49
#104 := [unit-resolution #56 #103 #102]: #47
#79 := (or #76 #8 #17)
#80 := [def-axiom]: #79
#105 := [unit-resolution #80 #102 #97]: #17
#67 := (not #17)
#70 := (or #67 #10 #15)
#71 := [def-axiom]: #70
#106 := [unit-resolution #71 #103 #105]: #15
#64 := (not #15)
#65 := (or #16 #11 #64)
#66 := [def-axiom]: #65
#107 := [unit-resolution #66 #106 #104 #94]: false
#109 := [lemma #107]: #108
#110 := [unit-resolution #109 #94]: #10
#50 := (or #11 #55)
#51 := [def-axiom]: #50
#111 := [unit-resolution #51 #110]: #11
#68 := (or #67 #55 #13)
#69 := [def-axiom]: #68
#112 := [unit-resolution #69 #110 #105]: #13
#113 := [unit-resolution #63 #112 #111 #94]: false
#114 := [lemma #113]: #16
#115 := [hypothesis]: #47
#116 := [unit-resolution #51 #115]: #55
#59 := (or #42 #11 #15)
#60 := [def-axiom]: #59
#117 := [unit-resolution #60 #115 #114]: #15
#88 := (or #42 #76)
#86 := (or #42 #76 #85)
#87 := [def-axiom]: #86
#89 := [unit-resolution #87 #48]: #88
#118 := [unit-resolution #89 #114]: #76
#119 := [unit-resolution #54 #115]: #52
#83 := (or #18 #8 #67)
#84 := [def-axiom]: #83
#120 := [unit-resolution #84 #119 #118]: #67
#74 := (or #17 #10 #64)
#75 := [def-axiom]: #74
#121 := [unit-resolution #75 #120 #117 #116]: false
#122 := [lemma #121]: #11
#57 := (or #42 #47 #13)
#58 := [def-axiom]: #57
#123 := [unit-resolution #58 #122 #114]: #13
#81 := (or #18 #52 #61)
#82 := [def-axiom]: #81
#124 := [unit-resolution #82 #123 #118]: #52
#125 := [unit-resolution #84 #124 #118]: #67
#126 := [unit-resolution #56 #124 #122]: #10
#72 := (or #17 #55 #61)
#73 := [def-axiom]: #72
[unit-resolution #73 #126 #125 #123]: false
unsat
042cd6410e2120e0a1d26569b905b9483437aab5 126 0
#2 := false
decl f1 :: S1
#3 := f1
decl f6 :: S1
#14 := f6
#15 := (= f6 f1)
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#53 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#52 := (not #8)
#54 := (or #52 #53)
#57 := (if #54 #15 #13)
#62 := (not #57)
#112 := [hypothesis]: #62
#126 := (or #53 #57)
#55 := (not #54)
#118 := (or #8 #57)
#113 := [hypothesis]: #52
#69 := (or #54 #8)
#70 := [def-axiom]: #69
#114 := [unit-resolution #70 #113]: #54
#17 := (if #10 #13 #15)
#18 := (if #8 #17 #15)
#110 := (or #57 #18)
#65 := (iff #62 #18)
#11 := (and #8 #10)
#16 := (if #11 #13 #15)
#42 := (not #16)
#43 := (iff #42 #18)
#66 := (iff #43 #65)
#63 := (iff #42 #62)
#60 := (iff #16 #57)
#47 := (if #55 #13 #15)
#58 := (iff #47 #57)
#59 := [rewrite]: #58
#49 := (iff #16 #47)
#50 := (iff #11 #55)
#51 := [rewrite]: #50
#56 := [monotonicity #51]: #49
#61 := [trans #56 #59]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#19 := (iff #16 #18)
#20 := (not #19)
#44 := (iff #20 #43)
#45 := [rewrite]: #44
#41 := [asserted]: #20
#48 := [mp #41 #45]: #43
#68 := [mp #48 #67]: #65
#103 := (not #65)
#108 := (or #57 #18 #103)
#109 := [def-axiom]: #108
#111 := [unit-resolution #109 #68]: #110
#115 := [unit-resolution #111 #112]: #18
#94 := (not #18)
#97 := (or #94 #8 #15)
#98 := [def-axiom]: #97
#116 := [unit-resolution #98 #113 #115]: #15
#79 := (not #15)
#80 := (or #57 #55 #79)
#81 := [def-axiom]: #80
#117 := [unit-resolution #81 #116 #114 #112]: false
#119 := [lemma #117]: #118
#120 := [unit-resolution #119 #112]: #8
#121 := [hypothesis]: #10
#73 := (or #55 #52 #53)
#74 := [def-axiom]: #73
#122 := [unit-resolution #74 #121 #120]: #55
#95 := (or #94 #52 #17)
#96 := [def-axiom]: #95
#123 := [unit-resolution #96 #120 #115]: #17
#85 := (not #17)
#86 := (or #85 #53 #13)
#87 := [def-axiom]: #86
#124 := [unit-resolution #87 #121 #123]: #13
#82 := (not #13)
#83 := (or #57 #54 #82)
#84 := [def-axiom]: #83
#125 := [unit-resolution #84 #124 #122 #112]: false
#127 := [lemma #125]: #126
#128 := [unit-resolution #127 #112]: #53
#71 := (or #54 #10)
#72 := [def-axiom]: #71
#129 := [unit-resolution #72 #128]: #54
#88 := (or #85 #10 #15)
#89 := [def-axiom]: #88
#130 := [unit-resolution #89 #128 #123]: #15
#131 := [unit-resolution #81 #130 #129 #112]: false
#132 := [lemma #131]: #57
#133 := [hypothesis]: #55
#134 := [unit-resolution #72 #133]: #10
#77 := (or #62 #54 #13)
#78 := [def-axiom]: #77
#135 := [unit-resolution #78 #133 #132]: #13
#106 := (or #62 #94)
#104 := (or #62 #94 #103)
#105 := [def-axiom]: #104
#107 := [unit-resolution #105 #68]: #106
#136 := [unit-resolution #107 #132]: #94
#137 := [unit-resolution #70 #133]: #8
#99 := (or #18 #52 #85)
#100 := [def-axiom]: #99
#138 := [unit-resolution #100 #137 #136]: #85
#90 := (or #17 #53 #82)
#91 := [def-axiom]: #90
#139 := [unit-resolution #91 #138 #135 #134]: false
#140 := [lemma #139]: #54
#75 := (or #62 #55 #15)
#76 := [def-axiom]: #75
#141 := [unit-resolution #76 #140 #132]: #15
#101 := (or #18 #8 #79)
#102 := [def-axiom]: #101
#142 := [unit-resolution #102 #141 #136]: #8
#143 := [unit-resolution #100 #142 #136]: #85
#144 := [unit-resolution #74 #142 #140]: #53
#92 := (or #17 #10 #79)
#93 := [def-axiom]: #92
[unit-resolution #93 #144 #143 #141]: false
unsat
ef537e4da9516844ed6fad53f93372fb0890ad4d 144 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
decl f6 :: S1
#13 := f6
#14 := (= f6 f1)
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#15 := (if #10 #12 #14)
#44 := (not #8)
#45 := (or #44 #15)
#66 := (not #45)
#54 := (or #44 #14)
#51 := (or #44 #12)
#48 := (or #44 #10)
#57 := (if #48 #51 #54)
#113 := (not #57)
#131 := [hypothesis]: #113
#129 := (or #45 #57)
#67 := (iff #66 #57)
#19 := (implies #8 #14)
#18 := (implies #8 #12)
#17 := (implies #8 #10)
#20 := (if #17 #18 #19)
#16 := (implies #8 #15)
#21 := (iff #16 #20)
#22 := (not #21)
#70 := (iff #22 #67)
#60 := (iff #45 #57)
#63 := (not #60)
#68 := (iff #63 #67)
#69 := [rewrite]: #68
#64 := (iff #22 #63)
#61 := (iff #21 #60)
#58 := (iff #20 #57)
#55 := (iff #19 #54)
#56 := [rewrite]: #55
#52 := (iff #18 #51)
#53 := [rewrite]: #52
#49 := (iff #17 #48)
#50 := [rewrite]: #49
#59 := [monotonicity #50 #53 #56]: #58
#46 := (iff #16 #45)
#47 := [rewrite]: #46
#62 := [monotonicity #47 #59]: #61
#65 := [monotonicity #62]: #64
#71 := [trans #65 #69]: #70
#43 := [asserted]: #22
#74 := [mp #43 #71]: #67
#122 := (not #67)
#127 := (or #45 #57 #122)
#128 := [def-axiom]: #127
#130 := [unit-resolution #128 #74]: #129
#132 := [unit-resolution #130 #131]: #45
#103 := (not #51)
#142 := (or #54 #57)
#110 := (not #54)
#133 := [hypothesis]: #110
#106 := (or #54 #8)
#107 := [def-axiom]: #106
#134 := [unit-resolution #107 #133]: #8
#90 := (or #66 #44 #15)
#91 := [def-axiom]: #90
#135 := [unit-resolution #91 #134 #132]: #15
#83 := (not #14)
#108 := (or #54 #83)
#109 := [def-axiom]: #108
#136 := [unit-resolution #109 #133]: #83
#78 := (not #15)
#76 := (or #78 #10 #14)
#77 := [def-axiom]: #76
#137 := [unit-resolution #77 #136 #135]: #10
#79 := (not #10)
#94 := (or #48 #79)
#95 := [def-axiom]: #94
#138 := [unit-resolution #95 #137]: #48
#80 := (or #78 #79 #12)
#81 := [def-axiom]: #80
#139 := [unit-resolution #81 #137 #135]: #12
#73 := (not #12)
#101 := (or #51 #73)
#102 := [def-axiom]: #101
#140 := [unit-resolution #102 #139]: #51
#96 := (not #48)
#118 := (or #57 #96 #103)
#119 := [def-axiom]: #118
#141 := [unit-resolution #119 #140 #138 #131]: false
#143 := [lemma #141]: #142
#144 := [unit-resolution #143 #131]: #54
#120 := (or #57 #48 #110)
#121 := [def-axiom]: #120
#145 := [unit-resolution #121 #144 #131]: #48
#146 := [unit-resolution #119 #145 #131]: #103
#99 := (or #51 #8)
#100 := [def-axiom]: #99
#147 := [unit-resolution #100 #146]: #8
#148 := [unit-resolution #91 #147 #132]: #15
#149 := [unit-resolution #102 #146]: #73
#97 := (or #96 #44 #10)
#98 := [def-axiom]: #97
#150 := [unit-resolution #98 #147 #145]: #10
#151 := [unit-resolution #81 #150 #149 #148]: false
#152 := [lemma #151]: #57
#125 := (or #66 #113)
#123 := (or #66 #113 #122)
#124 := [def-axiom]: #123
#126 := [unit-resolution #124 #74]: #125
#153 := [unit-resolution #126 #152]: #66
#86 := (or #45 #8)
#87 := [def-axiom]: #86
#154 := [unit-resolution #87 #153]: #8
#88 := (or #45 #78)
#89 := [def-axiom]: #88
#157 := [unit-resolution #89 #153]: #78
#155 := [hypothesis]: #79
#156 := [unit-resolution #98 #155 #154]: #96
#84 := (or #15 #10 #83)
#85 := [def-axiom]: #84
#158 := [unit-resolution #85 #155 #157]: #83
#111 := (or #110 #44 #14)
#112 := [def-axiom]: #111
#159 := [unit-resolution #112 #158 #154]: #110
#116 := (or #113 #48 #54)
#117 := [def-axiom]: #116
#160 := [unit-resolution #117 #159 #156 #152]: false
#161 := [lemma #160]: #10
#75 := (or #15 #79 #73)
#82 := [def-axiom]: #75
#162 := [unit-resolution #82 #161 #157]: #73
#163 := [unit-resolution #95 #161]: #48
#114 := (or #113 #96 #51)
#115 := [def-axiom]: #114
#164 := [unit-resolution #115 #163 #152]: #51
#104 := (or #103 #44 #12)
#105 := [def-axiom]: #104
[unit-resolution #105 #164 #162 #154]: false
unsat
78c572bbf37fdaeffbdf327837dfe6e150ab4121 22 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (if #8 #8 #9)
#11 := (not #10)
#40 := (iff #11 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #11 #35)
#33 := (iff #10 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#32 := [asserted]: #11
[mp #32 #41]: false
unsat
7bfe3d6a8ddb1e5cf6b5e7e7e25b7bb8d3947426 22 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (if #9 #9 #8)
#11 := (not #10)
#40 := (iff #11 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #11 #35)
#33 := (iff #10 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#32 := [asserted]: #11
[mp #32 #41]: false
unsat
36cacffa0b357a87bd4cda01a469de9e5b1b6ff9 18 0
#2 := false
decl f3 :: S2
#7 := f3
#8 := (= f3 f3)
#9 := (not #8)
#38 := (iff #9 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #9
[mp #30 #39]: false
unsat
fdbd50a73d75354218917a033ec85c8b60aadac7 28 0
#2 := false
decl f3 :: S2
#7 := f3
decl f4 :: S2
#8 := f4
#10 := (= f4 f3)
#9 := (= f3 f4)
#54 := (iff #9 #10)
#52 := (iff #10 #9)
#53 := [commutativity]: #52
#55 := [symm #53]: #54
#34 := (not #9)
#35 := (or #34 #10)
#38 := (not #35)
#11 := (implies #9 #10)
#12 := (not #11)
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#33 := [asserted]: #12
#43 := [mp #33 #40]: #38
#41 := [not-or-elim #43]: #9
#50 := [mp #41 #55]: #10
#42 := (not #10)
#44 := [not-or-elim #43]: #42
[unit-resolution #44 #50]: false
unsat
1e7092f06fe51080cd1f2ff9c767c120dee0f325 34 0
#2 := false
decl f5 :: S2
#10 := f5
decl f3 :: S2
#7 := f3
#13 := (= f3 f5)
decl f4 :: S2
#8 := f4
#11 := (= f4 f5)
#61 := (iff #11 #13)
#59 := (iff #13 #11)
#9 := (= f3 f4)
#12 := (and #9 #11)
#37 := (not #12)
#38 := (or #37 #13)
#41 := (not #38)
#14 := (implies #12 #13)
#15 := (not #14)
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#36 := [asserted]: #15
#46 := [mp #36 #43]: #41
#44 := [not-or-elim #46]: #12
#45 := [and-elim #44]: #9
#60 := [monotonicity #45]: #59
#62 := [symm #60]: #61
#47 := [and-elim #44]: #11
#57 := [mp #47 #62]: #13
#48 := (not #13)
#49 := [not-or-elim #46]: #48
[unit-resolution #49 #57]: false
unsat
dcb560c85ca9bae67a2cc2056cbff42277192208 27 0
#2 := false
decl f5 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#11 := (f5 f4)
decl f3 :: S2
#7 := f3
#10 := (f5 f3)
#12 := (= #10 #11)
#9 := (= f3 f4)
#36 := (not #9)
#37 := (or #36 #12)
#40 := (not #37)
#13 := (implies #9 #12)
#14 := (not #13)
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #14
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #9
#54 := [monotonicity #43]: #12
#44 := (not #12)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #54]: false
unsat
b268f4bef33523b0e58fb79bfaa877e0377ed0fe 31 0
#2 := false
decl f5 :: (-> S2 S2 S3)
decl f3 :: S2
#7 := f3
decl f4 :: S2
#8 := f4
#11 := (f5 f4 f3)
#10 := (f5 f3 f4)
#12 := (= #10 #11)
#56 := (= #11 #10)
#9 := (= f3 f4)
#36 := (not #9)
#37 := (or #36 #12)
#40 := (not #37)
#13 := (implies #9 #12)
#14 := (not #13)
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #14
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #9
#54 := (= f4 f3)
#55 := [symm #43]: #54
#57 := [monotonicity #55 #43]: #56
#52 := [symm #57]: #12
#44 := (not #12)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #52]: false
unsat
c15ed7f86c495f57e47ba25cbe1dd59e25e6cfd8 44 0
#2 := false
decl f4 :: S2
#7 := f4
decl f3 :: (-> S2 S2)
#8 := (f3 f4)
#16 := (= #8 f4)
#9 := (f3 #8)
#11 := (f3 #9)
#12 := (f3 #11)
#13 := (f3 #12)
#14 := (= #13 f4)
#10 := (= #9 f4)
#15 := (and #10 #14)
#40 := (not #15)
#41 := (or #40 #16)
#44 := (not #41)
#17 := (implies #15 #16)
#18 := (not #17)
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#39 := [asserted]: #18
#49 := [mp #39 #46]: #44
#47 := [not-or-elim #49]: #15
#50 := [and-elim #47]: #14
#54 := (= #8 #13)
#56 := (= f4 #12)
#58 := (= #9 #12)
#64 := (= #12 #9)
#62 := (= #11 #8)
#48 := [and-elim #47]: #10
#63 := [monotonicity #48]: #62
#65 := [monotonicity #63]: #64
#59 := [symm #65]: #58
#60 := (= f4 #9)
#61 := [symm #48]: #60
#57 := [trans #61 #59]: #56
#55 := [monotonicity #57]: #54
#66 := [trans #55 #50]: #16
#51 := (not #16)
#52 := [not-or-elim #49]: #51
[unit-resolution #52 #66]: false
unsat
e014a521ad8c0c3dc3dc83f7de12a8ea100eaf98 137 0
#2 := false
decl f6 :: S2
#12 := f6
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (if #8 f4 f5)
#13 := (= #11 f6)
#17 := (= f5 f6)
#46 := (or #8 #17)
#71 := (not #46)
#14 := (= f4 f6)
#16 := (not #8)
#43 := (or #16 #14)
#70 := (not #43)
#72 := (or #70 #71)
#116 := [hypothesis]: #71
#103 := (or #72 #46)
#104 := [def-axiom]: #103
#118 := [unit-resolution #104 #116]: #72
#73 := (not #72)
#110 := (or #13 #73)
#75 := (iff #13 #72)
#49 := (and #43 #46)
#58 := (not #13)
#59 := (iff #58 #49)
#78 := (iff #59 #75)
#65 := (iff #58 #73)
#76 := (iff #65 #75)
#77 := [rewrite]: #76
#67 := (iff #59 #65)
#68 := (iff #49 #73)
#69 := [rewrite]: #68
#74 := [monotonicity #69]: #67
#79 := [trans #74 #77]: #78
#18 := (implies #16 #17)
#15 := (implies #8 #14)
#19 := (and #15 #18)
#20 := (iff #13 #19)
#21 := (not #20)
#62 := (iff #21 #59)
#52 := (iff #13 #49)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #21 #55)
#53 := (iff #20 #52)
#50 := (iff #19 #49)
#47 := (iff #18 #46)
#48 := [rewrite]: #47
#44 := (iff #15 #43)
#45 := [rewrite]: #44
#51 := [monotonicity #45 #48]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#42 := [asserted]: #21
#66 := [mp #42 #63]: #59
#80 := [mp #66 #79]: #75
#107 := (not #75)
#108 := (or #13 #73 #107)
#109 := [def-axiom]: #108
#111 := [unit-resolution #109 #80]: #110
#119 := [unit-resolution #111 #118]: #13
#82 := (= f5 #11)
#94 := (or #46 #16)
#95 := [def-axiom]: #94
#120 := [unit-resolution #95 #116]: #16
#85 := (or #8 #82)
#86 := [def-axiom]: #85
#121 := [unit-resolution #86 #120]: #82
#122 := [trans #121 #119]: #17
#96 := (not #17)
#97 := (or #46 #96)
#98 := [def-axiom]: #97
#117 := [unit-resolution #98 #116]: #96
#123 := [unit-resolution #117 #122]: false
#124 := [lemma #123]: #46
#133 := (iff #13 #14)
#131 := (iff #14 #13)
#81 := (= f4 #11)
#125 := [hypothesis]: #8
#83 := (or #16 #81)
#84 := [def-axiom]: #83
#130 := [unit-resolution #84 #125]: #81
#132 := [monotonicity #130]: #131
#134 := [symm #132]: #133
#139 := (or #72 #16)
#89 := (not #14)
#135 := (iff #58 #89)
#136 := [monotonicity #134]: #135
#126 := [hypothesis]: #73
#114 := (or #58 #72)
#112 := (or #58 #72 #107)
#113 := [def-axiom]: #112
#115 := [unit-resolution #113 #80]: #114
#129 := [unit-resolution #115 #126]: #58
#137 := [mp #129 #136]: #89
#101 := (or #72 #43)
#102 := [def-axiom]: #101
#127 := [unit-resolution #102 #126]: #43
#92 := (or #70 #16 #14)
#93 := [def-axiom]: #92
#128 := [unit-resolution #93 #127 #125]: #14
#138 := [unit-resolution #128 #137]: false
#140 := [lemma #138]: #139
#141 := [unit-resolution #140 #125]: #72
#144 := [unit-resolution #111 #141]: #13
#145 := [mp #144 #134]: #14
#105 := (or #73 #70 #71)
#106 := [def-axiom]: #105
#142 := [unit-resolution #106 #141 #124]: #70
#90 := (or #43 #89)
#91 := [def-axiom]: #90
#143 := [unit-resolution #91 #142]: #89
#146 := [unit-resolution #143 #145]: false
#147 := [lemma #146]: #16
#99 := (or #71 #8 #17)
#100 := [def-axiom]: #99
#152 := [unit-resolution #100 #147 #124]: #17
#155 := (= #11 f5)
#151 := [unit-resolution #86 #147]: #82
#156 := [symm #151]: #155
#157 := [trans #156 #152]: #13
#87 := (or #43 #8)
#88 := [def-axiom]: #87
#148 := [unit-resolution #88 #147]: #43
#149 := [unit-resolution #106 #148 #124]: #73
#150 := [unit-resolution #115 #149]: #58
[unit-resolution #150 #157]: false
unsat
991ba005efd39f0b714631fc764d551ecd33f6bf 25 0
#2 := false
#7 := (:var 0 S2)
#8 := (= #7 #7)
#9 := (forall (vars (?v0 S2)) #8)
#10 := (not #9)
#46 := (iff #10 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #10 #41)
#39 := (iff #9 true)
#34 := (forall (vars (?v0 S2)) true)
#37 := (iff #34 true)
#38 := [elim-unused]: #37
#35 := (iff #9 #34)
#32 := (iff #8 true)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #10
[mp #31 #47]: false
unsat
10c5b2de1ef268e3092f5c3c42ead76ab232f440 23 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#10 := (forall (vars (?v0 S2)) #9)
#11 := (iff #10 #10)
#12 := (not #11)
#41 := (iff #12 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (iff #11 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#33 := [asserted]: #12
[mp #33 #42]: false
unsat
3f5721f2d9a816052aac390d06514062d4ac382d 67 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#55 := ?v0!0
#56 := (f3 ?v0!0)
#57 := (= #56 f1)
#58 := (not #57)
decl ?v1!1 :: S2
#66 := ?v1!1
#67 := (f3 ?v1!1)
#68 := (= #67 f1)
#69 := (or #57 #68)
#70 := (not #69)
#86 := (and #57 #70)
#63 := (not #58)
#76 := (and #63 #70)
#87 := (iff #76 #86)
#84 := (iff #63 #57)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#10 := (:var 1 S2)
#11 := (f3 #10)
#12 := (= #11 f1)
#13 := (or #12 #9)
#14 := (forall (vars (?v1 S2)) #13)
#39 := (not #9)
#40 := (or #39 #14)
#43 := (forall (vars (?v0 S2)) #40)
#46 := (not #43)
#79 := (~ #46 #76)
#50 := (or #57 #9)
#52 := (forall (vars (?v1 S2)) #50)
#59 := (or #58 #52)
#60 := (not #59)
#77 := (~ #60 #76)
#71 := (not #52)
#72 := (~ #71 #70)
#73 := [sk]: #72
#64 := (~ #63 #63)
#65 := [refl]: #64
#78 := [nnf-neg #65 #73]: #77
#61 := (~ #46 #60)
#62 := [sk]: #61
#80 := [trans #62 #78]: #79
#15 := (implies #9 #14)
#16 := (forall (vars (?v0 S2)) #15)
#17 := (not #16)
#47 := (iff #17 #46)
#44 := (iff #16 #43)
#41 := (iff #15 #40)
#42 := [rewrite]: #41
#45 := [quant-intro #42]: #44
#48 := [monotonicity #45]: #47
#38 := [asserted]: #17
#51 := [mp #38 #48]: #46
#81 := [mp~ #51 #80]: #76
#82 := [mp #81 #88]: #86
#89 := [and-elim #82]: #70
#90 := [not-or-elim #89]: #58
#83 := [and-elim #82]: #57
[unit-resolution #83 #90]: false
unsat
700a60c41d4e55e179e3bc8ce3a6f9ff4e4e4db4 235 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl ?v0!2 :: S2
#87 := ?v0!2
#88 := (f3 ?v0!2)
#89 := (= #88 f1)
#124 := (not #89)
decl ?v0!0 :: S2
#50 := ?v0!0
#51 := (f3 ?v0!0)
#52 := (= #51 f1)
#53 := (not #52)
#216 := [hypothesis]: #53
#7 := (:var 0 S2)
#8 := (f3 #7)
#624 := (pattern #8)
#9 := (= #8 f1)
#631 := (forall (vars (?v0 S2)) (:pat #624) #9)
decl f4 :: (-> S2 S1)
#10 := (f4 #7)
#625 := (pattern #10)
#11 := (= #10 f1)
#639 := (forall (vars (?v0 S2)) (:pat #625) #11)
#644 := (not #639)
#636 := (not #631)
#647 := (or #636 #644)
#650 := (not #647)
#56 := (not #11)
#55 := (not #9)
#64 := (or #55 #56)
#65 := (not #64)
#626 := (forall (vars (?v0 S2)) (:pat #624 #625) #65)
#618 := (not #626)
#249 := (f4 ?v0!0)
#610 := (= #249 f1)
#608 := (not #610)
#611 := (or #53 #608)
#90 := (f4 ?v0!2)
#91 := (= #90 f1)
#125 := (not #91)
#126 := (or #124 #125)
#127 := (not #126)
#285 := [hypothesis]: #626
#273 := (or #127 #618)
#612 := [hypothesis]: #126
#274 := (or #618 #127)
#405 := [quant-inst #87]: #274
#614 := [unit-resolution #405 #285 #612]: false
#615 := [lemma #614]: #273
#598 := [unit-resolution #615 #285]: #127
#620 := (or #126 #89)
#621 := [def-axiom]: #620
#305 := [unit-resolution #621 #598]: #89
#287 := [hypothesis]: #125
#286 := (or #126 #91)
#619 := [def-axiom]: #286
#280 := [unit-resolution #619 #287]: #126
#299 := (or #644 #91)
#298 := [hypothesis]: #639
#300 := [quant-inst #87]: #299
#297 := [unit-resolution #300 #298 #287]: false
#301 := [lemma #297]: #299
#616 := [unit-resolution #301 #287]: #644
#209 := (or #647 #639)
#295 := [def-axiom]: #209
#622 := [unit-resolution #295 #616]: #647
#653 := (or #626 #650)
#15 := (forall (vars (?v0 S2)) #11)
#61 := (not #15)
#14 := (forall (vars (?v0 S2)) #9)
#45 := (not #14)
#116 := (or #45 #61)
#117 := (not #116)
#113 := (forall (vars (?v0 S2)) #65)
#120 := (or #113 #117)
#654 := (iff #120 #653)
#651 := (iff #117 #650)
#648 := (iff #116 #647)
#645 := (iff #61 #644)
#642 := (iff #15 #639)
#640 := (iff #11 #11)
#641 := [refl]: #640
#643 := [quant-intro #641]: #642
#646 := [monotonicity #643]: #645
#637 := (iff #45 #636)
#634 := (iff #14 #631)
#632 := (iff #9 #9)
#633 := [refl]: #632
#635 := [quant-intro #633]: #634
#638 := [monotonicity #635]: #637
#649 := [monotonicity #638 #646]: #648
#652 := [monotonicity #649]: #651
#629 := (iff #113 #626)
#627 := (iff #65 #65)
#628 := [refl]: #627
#630 := [quant-intro #628]: #629
#655 := [monotonicity #630 #652]: #654
#16 := (and #14 #15)
#12 := (and #9 #11)
#13 := (forall (vars (?v0 S2)) #12)
#99 := (or #13 #16)
#121 := (iff #99 #120)
#118 := (iff #16 #117)
#119 := [rewrite]: #118
#114 := (iff #13 #113)
#96 := (iff #12 #65)
#97 := [rewrite]: #96
#115 := [quant-intro #97]: #114
#122 := [monotonicity #115 #119]: #121
decl ?v0!1 :: S2
#57 := ?v0!1
#58 := (f4 ?v0!1)
#59 := (= #58 f1)
#60 := (not #59)
#92 := (and #89 #91)
#93 := (not #92)
#106 := (or #93 #53 #60)
#109 := (and #99 #106)
#66 := (or #53 #60)
#98 := (or #93 #66)
#100 := (and #99 #98)
#110 := (iff #100 #109)
#107 := (iff #98 #106)
#108 := [rewrite]: #107
#111 := [monotonicity #108]: #110
#40 := (not #13)
#41 := (iff #40 #16)
#101 := (~ #41 #100)
#78 := (~ #16 #16)
#76 := (~ #15 #15)
#74 := (~ #11 #11)
#75 := [refl]: #74
#77 := [nnf-pos #75]: #76
#72 := (~ #14 #14)
#70 := (~ #9 #9)
#71 := [refl]: #70
#73 := [nnf-pos #71]: #72
#79 := [monotonicity #73 #77]: #78
#67 := (not #16)
#68 := (~ #67 #66)
#62 := (~ #61 #60)
#63 := [sk]: #62
#47 := (~ #45 #53)
#54 := [sk]: #47
#69 := [nnf-neg #54 #63]: #68
#94 := (~ #40 #93)
#95 := [sk]: #94
#84 := (not #40)
#85 := (~ #84 #13)
#82 := (~ #13 #13)
#80 := (~ #12 #12)
#81 := [refl]: #80
#83 := [nnf-pos #81]: #82
#86 := [nnf-neg #83]: #85
#102 := [nnf-pos #86 #95 #69 #79]: #101
#17 := (iff #13 #16)
#18 := (not #17)
#42 := (iff #18 #41)
#43 := [rewrite]: #42
#39 := [asserted]: #18
#46 := [mp #39 #43]: #41
#103 := [mp~ #46 #102]: #100
#104 := [mp #103 #111]: #109
#105 := [and-elim #104]: #99
#123 := [mp #105 #122]: #120
#656 := [mp #123 #655]: #653
#617 := [unit-resolution #656 #622]: #626
#623 := [unit-resolution #405 #617 #280]: false
#613 := [lemma #623]: #91
#257 := (f3 ?v0!1)
#599 := (= #257 f1)
#261 := (not #599)
#262 := (or #261 #60)
#263 := (not #262)
#609 := (or #263 #618)
#264 := [hypothesis]: #262
#602 := (or #618 #263)
#603 := [quant-inst #57]: #602
#601 := [unit-resolution #603 #285 #264]: false
#248 := [lemma #601]: #609
#317 := [unit-resolution #248 #285]: #263
#600 := (or #262 #59)
#606 := [def-axiom]: #600
#591 := [unit-resolution #606 #317]: #59
#140 := (or #124 #125 #53 #60)
#143 := (iff #106 #140)
#137 := (or #126 #53 #60)
#141 := (iff #137 #140)
#142 := [rewrite]: #141
#138 := (iff #106 #137)
#135 := (iff #93 #126)
#130 := (not #127)
#133 := (iff #130 #126)
#134 := [rewrite]: #133
#131 := (iff #93 #130)
#128 := (iff #92 #127)
#129 := [rewrite]: #128
#132 := [monotonicity #129]: #131
#136 := [trans #132 #134]: #135
#139 := [monotonicity #136]: #138
#144 := [trans #139 #142]: #143
#112 := [and-elim #104]: #106
#145 := [mp #112 #144]: #140
#595 := [unit-resolution #145 #591 #613 #305]: #53
#322 := (or #611 #52)
#323 := [def-axiom]: #322
#592 := [unit-resolution #323 #595]: #611
#597 := (not #611)
#320 := (or #618 #597)
#321 := [quant-inst #50]: #320
#596 := [unit-resolution #321 #285 #592]: false
#306 := [lemma #596]: #618
#593 := [unit-resolution #656 #306]: #650
#208 := (or #647 #631)
#294 := [def-axiom]: #208
#307 := [unit-resolution #294 #593]: #631
#594 := (or #636 #52)
#316 := [quant-inst #50]: #594
#308 := [unit-resolution #316 #307 #216]: false
#309 := [lemma #308]: #52
#587 := [hypothesis]: #60
#588 := [unit-resolution #295 #593]: #639
#302 := (or #644 #59)
#585 := [quant-inst #57]: #302
#589 := [unit-resolution #585 #588 #587]: false
#586 := [lemma #589]: #59
#590 := (or #124 #53 #60)
#579 := [unit-resolution #145 #613]: #590
#576 := [unit-resolution #579 #586 #309]: #124
#580 := (or #636 #89)
#581 := [quant-inst #87]: #580
[unit-resolution #581 #307 #576]: false
unsat
77c37fe7fae5071b8918f3ac6af902a7b756b568 145 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#72 := ?v0!1
#73 := (f3 ?v0!1)
#74 := (= #73 f1)
#75 := (not #74)
decl f4 :: S1
#11 := f4
#12 := (= f4 f1)
#55 := (or #74 #12)
#56 := (not #55)
decl ?v0!0 :: S2
#49 := ?v0!0
#50 := (f3 ?v0!0)
#51 := (= #50 f1)
#52 := (or #51 #12)
#247 := (not #51)
#44 := (not #52)
#579 := [hypothesis]: #44
#258 := (or #52 #247)
#259 := [def-axiom]: #258
#580 := [unit-resolution #259 #579]: #247
#7 := (:var 0 S2)
#8 := (f3 #7)
#584 := (pattern #8)
#9 := (= #8 f1)
#14 := (or #9 #12)
#590 := (forall (vars (?v0 S2)) (:pat #584) #14)
#81 := (not #12)
#260 := (or #52 #81)
#257 := [def-axiom]: #260
#574 := [unit-resolution #257 #579]: #81
#585 := (forall (vars (?v0 S2)) (:pat #584) #9)
#234 := (not #585)
#365 := (or #234 #51)
#576 := [hypothesis]: #247
#578 := [hypothesis]: #585
#572 := [quant-inst #49]: #365
#245 := [unit-resolution #572 #578 #576]: false
#246 := [lemma #245]: #365
#233 := [unit-resolution #246 #580]: #234
#595 := (or #585 #12 #590)
#15 := (forall (vars (?v0 S2)) #14)
#10 := (forall (vars (?v0 S2)) #9)
#95 := (or #10 #12 #15)
#596 := (iff #95 #595)
#593 := (iff #15 #590)
#591 := (iff #14 #14)
#592 := [refl]: #591
#594 := [quant-intro #592]: #593
#588 := (iff #10 #585)
#586 := (iff #9 #9)
#587 := [refl]: #586
#589 := [quant-intro #587]: #588
#597 := [monotonicity #589 #594]: #596
#84 := (and #75 #81)
#87 := (or #84 #44)
#98 := (and #95 #87)
#13 := (or #10 #12)
#88 := (or #13 #15)
#89 := (and #88 #87)
#99 := (iff #89 #98)
#96 := (iff #88 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#39 := (not #13)
#40 := (iff #39 #15)
#90 := (~ #40 #89)
#59 := (~ #15 #15)
#57 := (~ #14 #14)
#58 := [refl]: #57
#60 := [nnf-pos #58]: #59
#46 := (not #15)
#53 := (~ #46 #44)
#54 := [sk]: #53
#85 := (~ #39 #84)
#82 := (~ #81 #81)
#83 := [refl]: #82
#76 := (not #10)
#77 := (~ #76 #75)
#78 := [sk]: #77
#86 := [nnf-neg #78 #83]: #85
#69 := (not #39)
#70 := (~ #69 #13)
#67 := (~ #13 #13)
#65 := (~ #12 #12)
#66 := [refl]: #65
#63 := (~ #10 #10)
#61 := (~ #9 #9)
#62 := [refl]: #61
#64 := [nnf-pos #62]: #63
#68 := [monotonicity #64 #66]: #67
#71 := [nnf-neg #68]: #70
#91 := [nnf-pos #71 #86 #54 #60]: #90
#16 := (iff #13 #15)
#17 := (not #16)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#38 := [asserted]: #17
#45 := [mp #38 #42]: #40
#92 := [mp~ #45 #91]: #89
#93 := [mp #92 #100]: #98
#94 := [and-elim #93]: #95
#598 := [mp #94 #597]: #595
#575 := [unit-resolution #598 #233 #574]: #590
#581 := (not #590)
#582 := (or #581 #51 #12)
#577 := (or #581 #52)
#573 := (iff #577 #582)
#232 := [rewrite]: #573
#583 := [quant-inst #49]: #577
#237 := [mp #583 #232]: #582
#217 := [unit-resolution #237 #574 #575 #580]: false
#559 := [lemma #217]: #52
#102 := (or #56 #44)
#103 := (iff #87 #102)
#79 := (iff #84 #56)
#80 := [rewrite]: #79
#104 := [monotonicity #80]: #103
#101 := [and-elim #93]: #87
#105 := [mp #101 #104]: #102
#221 := [unit-resolution #105 #559]: #56
#168 := (or #55 #75)
#254 := [def-axiom]: #168
#222 := [unit-resolution #254 #221]: #75
#169 := (or #55 #81)
#255 := [def-axiom]: #169
#560 := [unit-resolution #255 #221]: #81
#565 := [hypothesis]: #590
#223 := (or #581 #74 #12)
#224 := (or #581 #55)
#562 := (iff #224 #223)
#563 := [rewrite]: #562
#561 := [quant-inst #72]: #224
#564 := [mp #561 #563]: #223
#566 := [unit-resolution #564 #560 #565 #222]: false
#203 := [lemma #566]: #581
#567 := [unit-resolution #598 #203 #560]: #585
#208 := (or #234 #74)
#209 := [quant-inst #72]: #208
[unit-resolution #209 #567 #222]: false
unsat
1936a8c3d8900c4f3411f9f65f9183a1e77d9f6e 34 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S2 S1)
#8 := (:var 0 S2)
#12 := (:var 1 S2)
#13 := (f3 #12 #8)
#14 := (= #13 f1)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#7 := (:var 2 S2)
#9 := (f3 #7 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #10)
#16 := (iff #11 #15)
#17 := (not #16)
#52 := (iff #17 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #17 #47)
#45 := (iff #16 true)
#40 := (iff #15 #15)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #16 #40)
#39 := [elim-unused]: #16
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#38 := [asserted]: #17
[mp #38 #53]: false
unsat
0be5cd612b1c80ec2188777514a42f95d455ac60 103 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S2 S1)
decl f4 :: S2
#15 := f4
decl f5 :: S2
#19 := f5
#241 := (f3 f5 f4)
#156 := (= #241 f1)
#242 := (not #156)
#20 := (f3 f4 f5)
#21 := (= #20 f1)
#80 := (not #21)
#8 := (:var 0 S2)
#16 := (f3 #8 f4)
#17 := (= #16 f1)
#18 := (forall (vars (?v0 S2)) #17)
#53 := (not #18)
#7 := (:var 1 S2)
#11 := (f3 #8 #7)
#12 := (= #11 f1)
#9 := (f3 #7 #8)
#10 := (= #9 f1)
#46 := (not #10)
#47 := (or #46 #12)
#50 := (forall (vars (?v0 S2) (?v1 S2)) #47)
#60 := (not #50)
#69 := (or #60 #53 #21)
#72 := (not #69)
#22 := (implies #18 #21)
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2) (?v1 S2)) #13)
#23 := (implies #14 #22)
#24 := (not #23)
#75 := (iff #24 #72)
#54 := (or #53 #21)
#61 := (or #60 #54)
#66 := (not #61)
#73 := (iff #66 #72)
#70 := (iff #61 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#67 := (iff #24 #66)
#64 := (iff #23 #61)
#57 := (implies #50 #54)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #23 #57)
#55 := (iff #22 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#52 := [quant-intro #49]: #51
#59 := [monotonicity #52 #56]: #58
#65 := [trans #59 #63]: #64
#68 := [monotonicity #65]: #67
#76 := [trans #68 #74]: #75
#45 := [asserted]: #24
#77 := [mp #45 #76]: #72
#81 := [not-or-elim #77]: #80
#572 := (pattern #11)
#571 := (pattern #9)
#573 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #571 #572) #47)
#576 := (iff #50 #573)
#574 := (iff #47 #47)
#575 := [refl]: #574
#577 := [quant-intro #575]: #576
#93 := (~ #50 #50)
#91 := (~ #47 #47)
#92 := [refl]: #91
#94 := [nnf-pos #92]: #93
#78 := [not-or-elim #77]: #50
#83 := [mp~ #78 #94]: #50
#578 := [mp #83 #577]: #573
#245 := (not #573)
#246 := (or #245 #242 #21)
#157 := (or #242 #21)
#247 := (or #245 #157)
#248 := (iff #247 #246)
#227 := [rewrite]: #248
#244 := [quant-inst #19 #15]: #247
#563 := [mp #244 #227]: #246
#243 := [unit-resolution #563 #578 #81]: #242
#579 := (pattern #16)
#580 := (forall (vars (?v0 S2)) (:pat #579) #17)
#583 := (iff #18 #580)
#581 := (iff #17 #17)
#582 := [refl]: #581
#584 := [quant-intro #582]: #583
#85 := (~ #18 #18)
#84 := (~ #17 #17)
#95 := [refl]: #84
#86 := [nnf-pos #95]: #85
#79 := [not-or-elim #77]: #18
#96 := [mp~ #79 #86]: #18
#585 := [mp #96 #584]: #580
#565 := (not #580)
#221 := (or #565 #156)
#352 := [quant-inst #19]: #221
[unit-resolution #352 #585 #243]: false
unsat
ac63a8f94b83c505b675b60053e9418e47f3332d 101 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl f4 :: (-> S3 S2 S2)
decl f6 :: S2
#16 := f6
decl f5 :: S3
#10 := f5
#20 := (f4 f5 f6)
#21 := (f4 f5 #20)
#232 := (f3 #21)
#552 := (= #232 f1)
#230 := (f3 #20)
#145 := (= #230 f1)
#17 := (f3 f6)
#18 := (= #17 f1)
#7 := (:var 0 S2)
#11 := (f4 f5 #7)
#12 := (f3 #11)
#13 := (= #12 f1)
#8 := (f3 #7)
#9 := (= #8 f1)
#48 := (not #9)
#49 := (or #48 #13)
#52 := (forall (vars (?v0 S2)) #49)
#55 := (and #52 #18)
#22 := (f4 f5 #21)
#23 := (f3 #22)
#24 := (= #23 f1)
#61 := (not #55)
#62 := (or #61 #24)
#67 := (not #62)
#14 := (implies #9 #13)
#15 := (forall (vars (?v0 S2)) #14)
#19 := (and #15 #18)
#25 := (implies #19 #24)
#26 := (not #25)
#68 := (iff #26 #67)
#65 := (iff #25 #62)
#58 := (implies #55 #24)
#63 := (iff #58 #62)
#64 := [rewrite]: #63
#59 := (iff #25 #58)
#56 := (iff #19 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#54 := [quant-intro #51]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#66 := [trans #60 #64]: #65
#69 := [monotonicity #66]: #68
#47 := [asserted]: #26
#72 := [mp #47 #69]: #67
#70 := [not-or-elim #72]: #55
#73 := [and-elim #70]: #18
#560 := (pattern #11)
#561 := (forall (vars (?v0 S2)) (:pat #560) #49)
#564 := (iff #52 #561)
#562 := (iff #49 #49)
#563 := [refl]: #562
#565 := [quant-intro #563]: #564
#87 := (~ #52 #52)
#85 := (~ #49 #49)
#86 := [refl]: #85
#88 := [nnf-pos #86]: #87
#71 := [and-elim #70]: #52
#77 := [mp~ #71 #88]: #52
#566 := [mp #77 #565]: #561
#144 := (not #18)
#223 := (not #561)
#234 := (or #223 #144 #145)
#231 := (or #144 #145)
#235 := (or #223 #231)
#233 := (iff #235 #234)
#237 := [rewrite]: #233
#236 := [quant-inst #16]: #235
#216 := [mp #236 #237]: #234
#558 := [unit-resolution #216 #566 #73]: #145
#146 := (not #145)
#548 := (or #223 #146 #552)
#554 := (or #146 #552)
#221 := (or #223 #554)
#555 := (iff #221 #548)
#556 := [rewrite]: #555
#222 := [quant-inst #20]: #221
#557 := [mp #222 #556]: #548
#553 := [unit-resolution #557 #566 #558]: #552
#74 := (not #24)
#75 := [not-or-elim #72]: #74
#210 := (not #552)
#559 := (or #223 #210 #24)
#341 := (or #210 #24)
#549 := (or #223 #341)
#213 := (iff #549 #559)
#550 := [rewrite]: #213
#208 := [quant-inst #21]: #549
#209 := [mp #208 #550]: #559
[unit-resolution #209 #566 #75 #553]: false
unsat
f1a3aeaad9840f61d284b110db9d2ac5a6976876 64 0
#2 := false
decl f3 :: (-> S2 S2 S3)
decl f4 :: S2
#13 := f4
decl f5 :: S2
#15 := f5
#17 := (f3 f5 f4)
#16 := (f3 f4 f5)
#18 := (= #16 #17)
#65 := (not #18)
#7 := (:var 1 S2)
#8 := (:var 0 S2)
#10 := (f3 #8 #7)
#9 := (f3 #7 #8)
#11 := (= #9 #10)
#12 := (forall (vars (?v0 S2) (?v1 S2)) #11)
#55 := (not #12)
#56 := (or #55 #18)
#61 := (not #56)
#14 := (= f4 f4)
#19 := (and #14 #18)
#20 := (implies #12 #19)
#21 := (not #20)
#62 := (iff #21 #61)
#59 := (iff #20 #56)
#52 := (implies #12 #18)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #20 #52)
#50 := (iff #19 #18)
#1 := true
#45 := (and true #18)
#48 := (iff #45 #18)
#49 := [rewrite]: #48
#46 := (iff #19 #45)
#43 := (iff #14 true)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#63 := [monotonicity #60]: #62
#42 := [asserted]: #21
#66 := [mp #42 #63]: #61
#67 := [not-or-elim #66]: #65
#553 := (pattern #10)
#552 := (pattern #9)
#554 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #552 #553) #11)
#557 := (iff #12 #554)
#555 := (iff #11 #11)
#556 := [refl]: #555
#558 := [quant-intro #556]: #557
#77 := (~ #12 #12)
#75 := (~ #11 #11)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#64 := [not-or-elim #66]: #12
#69 := [mp~ #64 #78]: #12
#559 := [mp #69 #558]: #554
#137 := (not #554)
#223 := (or #137 #18)
#138 := [quant-inst #13 #15]: #223
[unit-resolution #138 #559 #67]: false
unsat
c37af3173480108eddc4b3a3068306cd906ea03a 203 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl f7 :: S2
#21 := f7
#24 := (f3 f7)
#25 := (= #24 f1)
decl f5 :: S2
#14 := f5
#240 := (f3 f5)
#327 := (= #240 f1)
#242 := (not #327)
decl f4 :: (-> S2 S1)
#15 := (f4 f5)
#16 := (= #15 f1)
#17 := (not #16)
decl f6 :: (-> S2 S1)
#22 := (f6 f7)
#23 := (= #22 f1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#19 := (not #9)
#10 := (f4 #7)
#11 := (= #10 f1)
#18 := (not #11)
#20 := (and #18 #19)
#63 := (not #20)
#88 := (or #63 #23 #25)
#91 := (forall (vars (?v0 S2)) #88)
#57 := (or #19 #11)
#60 := (forall (vars (?v0 S2)) #57)
#100 := (and #60 #17 #91)
#31 := (f4 f7)
#32 := (= #31 f1)
#105 := (not #100)
#111 := (or #105 #23 #32)
#116 := (not #111)
#33 := (or #23 #32)
#26 := (or #23 #25)
#27 := (implies #20 #26)
#28 := (forall (vars (?v0 S2)) #27)
#29 := (and #17 #28)
#12 := (implies #9 #11)
#13 := (forall (vars (?v0 S2)) #12)
#30 := (and #13 #29)
#34 := (implies #30 #33)
#35 := (not #34)
#119 := (iff #35 #116)
#64 := (or #63 #26)
#67 := (forall (vars (?v0 S2)) #64)
#70 := (and #17 #67)
#73 := (and #60 #70)
#79 := (not #73)
#80 := (or #79 #33)
#85 := (not #80)
#117 := (iff #85 #116)
#114 := (iff #80 #111)
#108 := (or #105 #33)
#112 := (iff #108 #111)
#113 := [rewrite]: #112
#109 := (iff #80 #108)
#106 := (iff #79 #105)
#103 := (iff #73 #100)
#94 := (and #17 #91)
#97 := (and #60 #94)
#101 := (iff #97 #100)
#102 := [rewrite]: #101
#98 := (iff #73 #97)
#95 := (iff #70 #94)
#92 := (iff #67 #91)
#89 := (iff #64 #88)
#90 := [rewrite]: #89
#93 := [quant-intro #90]: #92
#96 := [monotonicity #93]: #95
#99 := [monotonicity #96]: #98
#104 := [trans #99 #102]: #103
#107 := [monotonicity #104]: #106
#110 := [monotonicity #107]: #109
#115 := [trans #110 #113]: #114
#118 := [monotonicity #115]: #117
#86 := (iff #35 #85)
#83 := (iff #34 #80)
#76 := (implies #73 #33)
#81 := (iff #76 #80)
#82 := [rewrite]: #81
#77 := (iff #34 #76)
#74 := (iff #30 #73)
#71 := (iff #29 #70)
#68 := (iff #28 #67)
#65 := (iff #27 #64)
#66 := [rewrite]: #65
#69 := [quant-intro #66]: #68
#72 := [monotonicity #69]: #71
#61 := (iff #13 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#75 := [monotonicity #62 #72]: #74
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#87 := [monotonicity #84]: #86
#120 := [trans #87 #118]: #119
#56 := [asserted]: #35
#121 := [mp #56 #120]: #116
#122 := [not-or-elim #121]: #100
#124 := [and-elim #122]: #17
#657 := (pattern #10)
#656 := (pattern #8)
#658 := (forall (vars (?v0 S2)) (:pat #656 #657) #57)
#661 := (iff #60 #658)
#659 := (iff #57 #57)
#660 := [refl]: #659
#662 := [quant-intro #660]: #661
#138 := (~ #60 #60)
#141 := (~ #57 #57)
#142 := [refl]: #141
#154 := [nnf-pos #142]: #138
#123 := [and-elim #122]: #60
#135 := [mp~ #123 #154]: #60
#663 := [mp #135 #662]: #658
#331 := (not #658)
#332 := (or #331 #242 #16)
#328 := (or #242 #16)
#329 := (or #331 #328)
#312 := (iff #329 #332)
#648 := [rewrite]: #312
#333 := [quant-inst #14]: #329
#650 := [mp #333 #648]: #332
#654 := [unit-resolution #650 #663 #124]: #242
#169 := (or #11 #9 #25)
#664 := (forall (vars (?v0 S2)) (:pat #657 #656) #169)
#174 := (forall (vars (?v0 S2)) #169)
#667 := (iff #174 #664)
#665 := (iff #169 #169)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#146 := (or #63 #25)
#151 := (forall (vars (?v0 S2)) #146)
#175 := (iff #151 #174)
#172 := (iff #146 #169)
#155 := (or #11 #9)
#166 := (or #155 #25)
#170 := (iff #166 #169)
#171 := [rewrite]: #170
#167 := (iff #146 #166)
#164 := (iff #63 #155)
#156 := (not #155)
#159 := (not #156)
#162 := (iff #159 #155)
#163 := [rewrite]: #162
#160 := (iff #63 #159)
#157 := (iff #20 #156)
#158 := [rewrite]: #157
#161 := [monotonicity #158]: #160
#165 := [trans #161 #163]: #164
#168 := [monotonicity #165]: #167
#173 := [trans #168 #171]: #172
#176 := [quant-intro #173]: #175
#134 := (~ #151 #151)
#136 := (~ #146 #146)
#133 := [refl]: #136
#131 := [nnf-pos #133]: #134
#152 := (iff #91 #151)
#149 := (iff #88 #146)
#143 := (or #63 false #25)
#147 := (iff #143 #146)
#148 := [rewrite]: #147
#144 := (iff #88 #143)
#139 := (iff #23 false)
#126 := (not #23)
#127 := [not-or-elim #121]: #126
#140 := [iff-false #127]: #139
#145 := [monotonicity #140]: #144
#150 := [trans #145 #148]: #149
#153 := [quant-intro #150]: #152
#125 := [and-elim #122]: #91
#137 := [mp #125 #153]: #151
#132 := [mp~ #137 #131]: #151
#177 := [mp #132 #176]: #174
#669 := [mp #177 #668]: #664
#437 := (not #664)
#644 := (or #437 #16 #327 #25)
#319 := (or #16 #327 #25)
#317 := (or #437 #319)
#651 := (iff #317 #644)
#652 := [rewrite]: #651
#318 := [quant-inst #14]: #317
#653 := [mp #318 #652]: #644
#649 := [unit-resolution #653 #124 #669 #654]: #25
#128 := (not #32)
#129 := [not-or-elim #121]: #128
#330 := (not #25)
#655 := (or #331 #330 #32)
#306 := (or #330 #32)
#645 := (or #331 #306)
#309 := (iff #645 #655)
#646 := [rewrite]: #309
#304 := [quant-inst #21]: #645
#305 := [mp #304 #646]: #655
[unit-resolution #305 #663 #129 #649]: false
unsat
19990be1db50e963aafcc1c9ab3bda9712fc1797 1 0
unsat
1cfdaf7cf1764c12b112c06ca51a00830c6fcdde 25 0
#2 := false
#7 := (:var 0 S2)
#8 := (= #7 #7)
#9 := (exists (vars (?v0 S2)) #8)
#10 := (not #9)
#46 := (iff #10 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #10 #41)
#39 := (iff #9 true)
#34 := (exists (vars (?v0 S2)) true)
#37 := (iff #34 true)
#38 := [elim-unused]: #37
#35 := (iff #9 #34)
#32 := (iff #8 true)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #10
[mp #31 #47]: false
unsat
983e6603d4caff6f91195b6f7c23c1ebf8889f75 23 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#10 := (exists (vars (?v0 S2)) #9)
#11 := (iff #10 #10)
#12 := (not #11)
#41 := (iff #12 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (iff #11 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#33 := [asserted]: #12
[mp #33 #42]: false
unsat
a5805ee4c963267c1bf8cb35e86d5702ad58f164 205 0
#2 := false
decl f4 :: (-> S2 S1)
#7 := (:var 0 S2)
#10 := (f4 #7)
#600 := (pattern #10)
decl f1 :: S1
#3 := f1
#11 := (= #10 f1)
#55 := (not #11)
#614 := (forall (vars (?v0 S2)) (:pat #600) #55)
#619 := (not #614)
decl f3 :: (-> S2 S1)
#8 := (f3 #7)
#599 := (pattern #8)
#9 := (= #8 f1)
#50 := (not #9)
#606 := (forall (vars (?v0 S2)) (:pat #599) #50)
#611 := (not #606)
#622 := (or #611 #619)
#625 := (not #622)
#12 := (or #9 #11)
#96 := (not #12)
#601 := (forall (vars (?v0 S2)) (:pat #599 #600) #96)
#275 := (not #601)
decl ?v0!1 :: S2
#73 := ?v0!1
#74 := (f4 ?v0!1)
#75 := (= #74 f1)
#579 := (f3 ?v0!1)
#580 := (= #579 f1)
#575 := (or #580 #75)
decl ?v0!2 :: S2
#83 := ?v0!2
#86 := (f4 ?v0!2)
#87 := (= #86 f1)
#249 := (not #87)
#84 := (f3 ?v0!2)
#85 := (= #84 f1)
#88 := (or #85 #87)
#262 := (not #88)
#274 := [hypothesis]: #601
#595 := (or #262 #275)
#273 := [hypothesis]: #88
#272 := (or #275 #262)
#276 := [quant-inst #83]: #272
#594 := [unit-resolution #276 #274 #273]: false
#596 := [lemma #594]: #595
#218 := [unit-resolution #596 #274]: #262
#380 := (or #88 #249)
#587 := [def-axiom]: #380
#582 := [unit-resolution #587 #218]: #249
#255 := (not #85)
#591 := (or #88 #255)
#593 := [def-axiom]: #591
#296 := [unit-resolution #593 #218]: #255
decl ?v0!0 :: S2
#66 := ?v0!0
#67 := (f3 ?v0!0)
#68 := (= #67 f1)
#590 := (not #68)
#597 := (f4 ?v0!0)
#592 := (= #597 f1)
#598 := (or #68 #592)
#588 := (not #598)
#577 := (or #588 #275)
#247 := [hypothesis]: #598
#589 := (or #275 #588)
#248 := [quant-inst #66]: #589
#252 := [unit-resolution #248 #274 #247]: false
#578 := [lemma #252]: #577
#297 := [unit-resolution #578 #274]: #588
#232 := (or #598 #590)
#574 := [def-axiom]: #232
#298 := [unit-resolution #574 #297]: #590
#110 := (or #85 #87 #68 #75)
#58 := (forall (vars (?v0 S2)) #55)
#53 := (forall (vars (?v0 S2)) #50)
#62 := (and #53 #58)
#99 := (forall (vars (?v0 S2)) #96)
#102 := (or #99 #62)
#113 := (and #110 #102)
#80 := (or #68 #75)
#103 := (or #88 #80)
#104 := (and #103 #102)
#114 := (iff #104 #113)
#111 := (iff #103 #110)
#112 := [rewrite]: #111
#115 := [monotonicity #112]: #114
#15 := (exists (vars (?v0 S2)) #11)
#14 := (exists (vars (?v0 S2)) #9)
#16 := (or #14 #15)
#13 := (exists (vars (?v0 S2)) #12)
#40 := (not #13)
#41 := (iff #40 #16)
#105 := (~ #41 #104)
#81 := (~ #16 #80)
#76 := (~ #15 #75)
#77 := [sk]: #76
#69 := (~ #14 #68)
#70 := [sk]: #69
#82 := [monotonicity #70 #77]: #81
#63 := (not #16)
#64 := (~ #63 #62)
#59 := (not #15)
#60 := (~ #59 #58)
#56 := (~ #55 #55)
#57 := [refl]: #56
#61 := [nnf-neg #57]: #60
#45 := (not #14)
#47 := (~ #45 #53)
#51 := (~ #50 #50)
#52 := [refl]: #51
#54 := [nnf-neg #52]: #47
#65 := [nnf-neg #54 #61]: #64
#100 := (~ #40 #99)
#97 := (~ #96 #96)
#98 := [refl]: #97
#101 := [nnf-neg #98]: #100
#93 := (not #40)
#94 := (~ #93 #88)
#89 := (~ #13 #88)
#90 := [sk]: #89
#95 := [nnf-neg #90]: #94
#106 := [nnf-pos #95 #101 #65 #82]: #105
#17 := (iff #13 #16)
#18 := (not #17)
#42 := (iff #18 #41)
#43 := [rewrite]: #42
#39 := [asserted]: #18
#46 := [mp #39 #43]: #41
#107 := [mp~ #46 #106]: #104
#108 := [mp #107 #115]: #113
#109 := [and-elim #108]: #110
#191 := [unit-resolution #109 #298 #296 #582]: #75
#586 := (not #75)
#572 := (or #575 #586)
#573 := [def-axiom]: #572
#568 := [unit-resolution #573 #191]: #575
#581 := (not #575)
#584 := (or #275 #581)
#223 := [quant-inst #73]: #584
#569 := [unit-resolution #223 #274 #568]: false
#291 := [lemma #569]: #275
#628 := (or #601 #625)
#72 := (not #58)
#71 := (not #53)
#91 := (or #71 #72)
#92 := (not #91)
#117 := (or #99 #92)
#629 := (iff #117 #628)
#626 := (iff #92 #625)
#623 := (iff #91 #622)
#620 := (iff #72 #619)
#617 := (iff #58 #614)
#615 := (iff #55 #55)
#616 := [refl]: #615
#618 := [quant-intro #616]: #617
#621 := [monotonicity #618]: #620
#612 := (iff #71 #611)
#609 := (iff #53 #606)
#607 := (iff #50 #50)
#608 := [refl]: #607
#610 := [quant-intro #608]: #609
#613 := [monotonicity #610]: #612
#624 := [monotonicity #613 #621]: #623
#627 := [monotonicity #624]: #626
#604 := (iff #99 #601)
#602 := (iff #96 #96)
#603 := [refl]: #602
#605 := [quant-intro #603]: #604
#630 := [monotonicity #605 #627]: #629
#118 := (iff #102 #117)
#78 := (iff #62 #92)
#79 := [rewrite]: #78
#119 := [monotonicity #79]: #118
#116 := [and-elim #108]: #102
#120 := [mp #116 #119]: #117
#631 := [mp #120 #630]: #628
#224 := [unit-resolution #631 #291]: #625
#184 := (or #622 #614)
#270 := [def-axiom]: #184
#283 := [unit-resolution #270 #224]: #614
#183 := (or #622 #606)
#269 := [def-axiom]: #183
#585 := [unit-resolution #269 #224]: #606
#570 := [hypothesis]: #68
#571 := (or #611 #590)
#281 := [quant-inst #66]: #571
#567 := [unit-resolution #281 #570 #585]: false
#282 := [lemma #567]: #590
#295 := [hypothesis]: #85
#583 := (or #611 #255)
#280 := [quant-inst #83]: #583
#292 := [unit-resolution #280 #295 #585]: false
#566 := [lemma #292]: #255
#284 := [hypothesis]: #87
#562 := (or #619 #249)
#563 := [quant-inst #83]: #562
#277 := [unit-resolution #563 #284 #283]: false
#560 := [lemma #277]: #249
#564 := [unit-resolution #109 #560 #566 #282]: #75
#565 := (or #619 #586)
#554 := [quant-inst #73]: #565
[unit-resolution #554 #564 #283]: false
unsat
15bd078d1caba7b30476b1f272408346e917c717 173 0
#2 := false
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#611 := (pattern #8)
decl f1 :: S1
#3 := f1
#9 := (= #8 f1)
#77 := (not #9)
#612 := (forall (vars (?v0 S2)) (:pat #611) #77)
decl f4 :: S1
#11 := f4
#12 := (= f4 f1)
#84 := (not #12)
decl ?v0!1 :: S2
#62 := ?v0!1
#63 := (f3 ?v0!1)
#64 := (= #63 f1)
#67 := (not #64)
#68 := (or #67 #84)
#267 := [hypothesis]: #84
#196 := (or #68 #12)
#282 := [def-axiom]: #196
#603 := [unit-resolution #282 #267]: #68
decl ?v0!0 :: S2
#54 := ?v0!0
#55 := (f3 ?v0!0)
#56 := (= #55 f1)
#106 := (not #56)
#107 := (or #106 #84)
#286 := (or #107 #12)
#287 := [def-axiom]: #286
#605 := [unit-resolution #287 #267]: #107
#108 := (not #107)
#60 := (not #68)
#111 := (or #60 #108)
#57 := (and #56 #12)
#71 := (and #64 #12)
#91 := (or #71 #57)
#112 := (iff #91 #111)
#109 := (iff #57 #108)
#110 := [rewrite]: #109
#61 := (iff #71 #60)
#105 := [rewrite]: #61
#113 := [monotonicity #105 #110]: #112
#14 := (and #9 #12)
#49 := (not #14)
#52 := (forall (vars (?v0 S2)) #49)
#80 := (forall (vars (?v0 S2)) #77)
#98 := (or #80 #84 #52)
#101 := (and #91 #98)
#87 := (or #80 #84)
#90 := (or #87 #52)
#92 := (and #91 #90)
#102 := (iff #92 #101)
#99 := (iff #90 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#15 := (exists (vars (?v0 S2)) #14)
#10 := (exists (vars (?v0 S2)) #9)
#13 := (and #10 #12)
#39 := (not #13)
#40 := (iff #39 #15)
#93 := (~ #40 #92)
#58 := (~ #15 #57)
#59 := [sk]: #58
#44 := (not #15)
#46 := (~ #44 #52)
#50 := (~ #49 #49)
#51 := [refl]: #50
#53 := [nnf-neg #51]: #46
#88 := (~ #39 #87)
#85 := (~ #84 #84)
#86 := [refl]: #85
#81 := (not #10)
#82 := (~ #81 #80)
#78 := (~ #77 #77)
#79 := [refl]: #78
#83 := [nnf-neg #79]: #82
#89 := [nnf-neg #83 #86]: #88
#74 := (not #39)
#75 := (~ #74 #71)
#72 := (~ #13 #71)
#69 := (~ #12 #12)
#70 := [refl]: #69
#65 := (~ #10 #64)
#66 := [sk]: #65
#73 := [monotonicity #66 #70]: #72
#76 := [nnf-neg #73]: #75
#94 := [nnf-pos #76 #89 #53 #59]: #93
#16 := (iff #13 #15)
#17 := (not #16)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#38 := [asserted]: #17
#45 := [mp #38 #42]: #40
#95 := [mp~ #45 #94]: #92
#96 := [mp #95 #103]: #101
#97 := [and-elim #96]: #91
#114 := [mp #97 #113]: #111
#261 := [unit-resolution #114 #605 #603]: false
#392 := [lemma #261]: #12
#115 := (or #77 #84)
#617 := (forall (vars (?v0 S2)) (:pat #611) #115)
#600 := (not #617)
#249 := [hypothesis]: #617
#273 := (not #612)
#272 := [hypothesis]: #56
#606 := (or #273 #106)
#599 := [hypothesis]: #612
#607 := [quant-inst #54]: #606
#608 := [unit-resolution #607 #272 #599]: false
#609 := [lemma #608]: #606
#604 := [unit-resolution #609 #272]: #273
#622 := (or #612 #84 #617)
#126 := (forall (vars (?v0 S2)) #115)
#129 := (or #80 #84 #126)
#623 := (iff #129 #622)
#620 := (iff #126 #617)
#618 := (iff #115 #115)
#619 := [refl]: #618
#621 := [quant-intro #619]: #620
#615 := (iff #80 #612)
#613 := (iff #77 #77)
#614 := [refl]: #613
#616 := [quant-intro #614]: #615
#624 := [monotonicity #616 #621]: #623
#130 := (iff #98 #129)
#127 := (iff #52 #126)
#124 := (iff #49 #115)
#116 := (not #115)
#119 := (not #116)
#122 := (iff #119 #115)
#123 := [rewrite]: #122
#120 := (iff #49 #119)
#117 := (iff #14 #116)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#125 := [trans #121 #123]: #124
#128 := [quant-intro #125]: #127
#131 := [monotonicity #128]: #130
#104 := [and-elim #96]: #98
#132 := [mp #104 #131]: #129
#625 := [mp #132 #624]: #622
#610 := [unit-resolution #625 #604 #392]: #617
#259 := (or #600 #106 #84)
#264 := (or #600 #107)
#260 := (iff #264 #259)
#602 := [rewrite]: #260
#601 := [quant-inst #54]: #264
#244 := [mp #601 #602]: #259
#586 := [unit-resolution #244 #392 #272 #610]: false
#248 := [lemma #586]: #106
#274 := (or #107 #56)
#285 := [def-axiom]: #274
#250 := [unit-resolution #285 #248]: #107
#587 := [unit-resolution #114 #250]: #60
#195 := (or #68 #64)
#281 := [def-axiom]: #195
#593 := [unit-resolution #281 #587]: #64
#251 := (or #600 #67 #84)
#588 := (or #600 #68)
#590 := (iff #588 #251)
#591 := [rewrite]: #590
#589 := [quant-inst #62]: #588
#592 := [mp #589 #591]: #251
#230 := [unit-resolution #592 #593 #392 #249]: false
#594 := [lemma #230]: #600
#596 := [unit-resolution #625 #594 #392]: #612
#236 := (or #273 #67)
#597 := [quant-inst #62]: #236
[unit-resolution #597 #593 #596]: false
unsat
f04d5873e94a5aad7b78e98d30003072c55f70b2 34 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S4 S1)
#8 := (:var 0 S4)
#12 := (:var 1 S2)
#13 := (f3 #12 #8)
#14 := (= #13 f1)
#15 := (exists (vars (?v0 S2) (?v1 S4)) #14)
#7 := (:var 2 S2)
#9 := (f3 #7 #8)
#10 := (= #9 f1)
#11 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #10)
#16 := (iff #11 #15)
#17 := (not #16)
#52 := (iff #17 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #17 #47)
#45 := (iff #16 true)
#40 := (iff #15 #15)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #16 #40)
#39 := [elim-unused]: #16
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#38 := [asserted]: #17
[mp #38 #53]: false
unsat
859cb38c5f32b7d6ba5f7cb98e20433a77c5ac6e 72 0
#2 := false
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#568 := (pattern #8)
decl f1 :: S1
#3 := f1
#9 := (= #8 f1)
#10 := (not #9)
#569 := (forall (vars (?v0 S2)) (:pat #568) #10)
#84 := (forall (vars (?v0 S2)) #10)
#572 := (iff #84 #569)
#570 := (iff #10 #10)
#571 := [refl]: #570
#573 := [quant-intro #571]: #572
#12 := (exists (vars (?v0 S2)) #9)
#18 := (not #12)
#85 := (~ #18 #84)
#81 := (~ #10 #10)
#82 := [refl]: #81
#88 := [nnf-neg #82]: #85
decl f4 :: (-> S2 S1)
#13 := (f4 #7)
#14 := (= #13 f1)
#15 := (and #9 #14)
#16 := (exists (vars (?v0 S2)) #15)
#17 := (or #12 #16)
#11 := (exists (vars (?v0 S2)) #10)
#46 := (and #11 #17 #18)
#19 := (and #17 #18)
#20 := (and #11 #19)
#21 := (not #20)
#22 := (not #21)
#49 := (iff #22 #46)
#47 := (iff #20 #46)
#48 := [rewrite]: #47
#44 := (iff #22 #20)
#45 := [rewrite]: #44
#50 := [trans #45 #48]: #49
#43 := [asserted]: #22
#51 := [mp #43 #50]: #46
#54 := [and-elim #51]: #18
#89 := [mp~ #54 #88]: #84
#574 := [mp #89 #573]: #569
decl ?v0!1 :: S2
#72 := ?v0!1
#73 := (f3 ?v0!1)
#75 := (= #73 f1)
#76 := (f4 ?v0!1)
#77 := (= #76 f1)
#78 := (and #75 #77)
#79 := (~ #16 #78)
#80 := [sk]: #79
#69 := (iff #17 #16)
#64 := (or false #16)
#67 := (iff #64 #16)
#68 := [rewrite]: #67
#65 := (iff #17 #64)
#62 := (iff #12 false)
#63 := [iff-false #54]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#53 := [and-elim #51]: #17
#60 := [mp #53 #70]: #16
#83 := [mp~ #60 #80]: #78
#86 := [and-elim #83]: #75
#152 := (not #75)
#239 := (not #569)
#154 := (or #239 #152)
#240 := [quant-inst #72]: #154
[unit-resolution #240 #86 #574]: false
unsat
f78c1cf1e21deba8da342bf5b3ccd8619a3acc09 2 0
WARNING: failed to find a pattern for quantifier (quantifier id: k!10)
unsat
f78f234620a6b9d63296ecb6ddac45e9775a4139 2 0
WARNING: For problems containing quantifiers, the model finding capabilities of Z3 work better when the formula does not contain nested quantifiers. You can use PULL_NESTED_QUANTIFIERS=true to eliminate nested quantifiers.
unsat
ff5923442190bbdb9015d06b9eb041224ec4aa67 1 0
unsat
4c6ce503f607e74ba8e93edccc79946582314947 1 0
unsat
12584fda31d4fe9678f56daf5308984bcbc8882b 1 0
unsat
3c63947a5d206f9097abc5a6fc0fbae82d2d79e0 1 0
unsat
54883b23fe5740347c973de8603dbf0368168608 79 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1 S1)
decl ?v0!0 :: S1
#47 := ?v0!0
decl f4 :: S2
#7 := f4
#48 := (f3 f4 ?v0!0)
#49 := (= #48 f1)
decl ?v0!1 :: S1
#61 := ?v0!1
#62 := (f3 f4 ?v0!1)
#63 := (= #62 f1)
#145 := (not #63)
#231 := [hypothesis]: #63
#8 := (:var 0 S1)
#9 := (f3 f4 #8)
#561 := (pattern #9)
#10 := (= #9 f1)
#13 := (not #10)
#562 := (forall (vars (?v0 S1)) (:pat #561) #13)
#14 := (forall (vars (?v0 S1)) #13)
#565 := (iff #14 #562)
#563 := (iff #13 #13)
#564 := [refl]: #563
#566 := [quant-intro #564]: #565
#80 := (or #63 #49)
#83 := (and #14 #80)
#50 := (not #49)
#42 := (not #50)
#68 := (or #63 #42)
#69 := (or #14 #14)
#70 := (and #69 #68)
#84 := (iff #70 #83)
#81 := (iff #68 #80)
#78 := (iff #42 #49)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#76 := (iff #69 #14)
#77 := [rewrite]: #76
#85 := [monotonicity #77 #82]: #84
#11 := (exists (vars (?v0 S1)) #10)
#38 := (iff #11 #14)
#71 := (~ #38 #70)
#57 := (~ #14 #14)
#55 := (~ #13 #13)
#56 := [refl]: #55
#58 := [nnf-pos #56]: #57
#44 := (not #14)
#51 := (~ #44 #42)
#52 := [sk]: #51
#64 := (~ #11 #63)
#65 := [sk]: #64
#12 := (not #11)
#59 := (~ #12 #14)
#60 := [nnf-neg #56]: #59
#72 := [nnf-pos #60 #65 #52 #58]: #71
#15 := (iff #12 #14)
#16 := (not #15)
#39 := (iff #16 #38)
#40 := [rewrite]: #39
#37 := [asserted]: #16
#43 := [mp #37 #40]: #38
#73 := [mp~ #43 #72]: #70
#74 := [mp #73 #85]: #83
#75 := [and-elim #74]: #14
#567 := [mp #75 #566]: #562
#232 := (not #562)
#147 := (or #232 #145)
#233 := [quant-inst #61]: #147
#146 := [unit-resolution #233 #567 #231]: false
#224 := [lemma #146]: #145
#86 := [and-elim #74]: #80
#235 := [unit-resolution #86 #224]: #49
#237 := (or #232 #50)
#234 := [quant-inst #47]: #237
[unit-resolution #234 #567 #235]: false
unsat
99b6c9d07fc5dd56e24a241d63a8bd5f333486a2 179 0
#2 := false
decl f3 :: (-> S2 S1 S1)
#8 := (:var 0 S1)
decl f4 :: S2
#7 := f4
#9 := (f3 f4 #8)
#607 := (pattern #9)
decl f1 :: S1
#3 := f1
#10 := (= #9 f1)
#613 := (forall (vars (?v0 S1)) (:pat #607) #10)
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
#618 := (not #613)
#621 := (or #618 #12)
#624 := (not #621)
#40 := (not #10)
#41 := (or #40 #12)
#106 := (not #41)
#608 := (forall (vars (?v0 S1)) (:pat #607) #106)
#595 := (not #608)
decl ?v0!1 :: S1
#94 := ?v0!1
#95 := (f3 f4 ?v0!1)
#96 := (= #95 f1)
#97 := (not #96)
#98 := (or #97 #12)
decl ?v0!0 :: S1
#81 := ?v0!0
#82 := (f3 f4 ?v0!0)
#83 := (= #82 f1)
#84 := (not #83)
#91 := (or #84 #12)
#283 := [hypothesis]: #84
#602 := (or #91 #83)
#603 := [def-axiom]: #602
#257 := [unit-resolution #603 #283]: #91
#280 := (or #618 #83)
#282 := [hypothesis]: #613
#284 := [quant-inst #81]: #280
#263 := [unit-resolution #284 #283 #282]: false
#599 := [lemma #263]: #280
#388 := [unit-resolution #599 #283]: #618
#191 := (or #621 #613)
#192 := [def-axiom]: #191
#596 := [unit-resolution #192 #388]: #621
#627 := (or #608 #624)
#15 := (forall (vars (?v0 S1)) #10)
#47 := (not #15)
#48 := (or #47 #12)
#78 := (not #48)
#109 := (forall (vars (?v0 S1)) #106)
#101 := (or #109 #78)
#628 := (iff #101 #627)
#625 := (iff #78 #624)
#622 := (iff #48 #621)
#619 := (iff #47 #618)
#616 := (iff #15 #613)
#614 := (iff #10 #10)
#615 := [refl]: #614
#617 := [quant-intro #615]: #616
#620 := [monotonicity #617]: #619
#623 := [monotonicity #620]: #622
#626 := [monotonicity #623]: #625
#611 := (iff #109 #608)
#609 := (iff #106 #106)
#610 := [refl]: #609
#612 := [quant-intro #610]: #611
#629 := [monotonicity #612 #626]: #628
#74 := (not #12)
#77 := (and #15 #74)
#112 := (or #109 #77)
#102 := (iff #112 #101)
#87 := (iff #77 #78)
#88 := [rewrite]: #87
#127 := [monotonicity #88]: #102
#120 := (or #97 #84 #12)
#123 := (and #120 #112)
#113 := (or #98 #91)
#114 := (and #113 #112)
#124 := (iff #114 #123)
#121 := (iff #113 #120)
#122 := [rewrite]: #121
#125 := [monotonicity #122]: #124
#44 := (exists (vars (?v0 S1)) #41)
#57 := (not #44)
#58 := (iff #57 #48)
#115 := (~ #58 #114)
#92 := (~ #48 #91)
#89 := (~ #12 #12)
#90 := [refl]: #89
#85 := (~ #47 #84)
#86 := [sk]: #85
#93 := [monotonicity #86 #90]: #92
#79 := (~ #78 #77)
#75 := (~ #74 #74)
#76 := [refl]: #75
#64 := (not #47)
#66 := (~ #64 #15)
#71 := (~ #15 #15)
#69 := (~ #10 #10)
#70 := [refl]: #69
#72 := [nnf-pos #70]: #71
#73 := [nnf-neg #72]: #66
#80 := [nnf-neg #73 #76]: #79
#110 := (~ #57 #109)
#107 := (~ #106 #106)
#108 := [refl]: #107
#111 := [nnf-neg #108]: #110
#103 := (not #57)
#104 := (~ #103 #98)
#99 := (~ #44 #98)
#100 := [sk]: #99
#105 := [nnf-neg #100]: #104
#116 := [nnf-pos #105 #111 #80 #93]: #115
#16 := (implies #15 #12)
#13 := (implies #10 #12)
#14 := (exists (vars (?v0 S1)) #13)
#17 := (iff #14 #16)
#18 := (not #17)
#61 := (iff #18 #58)
#51 := (iff #44 #48)
#54 := (not #51)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #18 #54)
#52 := (iff #17 #51)
#49 := (iff #16 #48)
#50 := [rewrite]: #49
#45 := (iff #14 #44)
#42 := (iff #13 #41)
#43 := [rewrite]: #42
#46 := [quant-intro #43]: #45
#53 := [monotonicity #46 #50]: #52
#56 := [monotonicity #53]: #55
#62 := [trans #56 #60]: #61
#39 := [asserted]: #18
#65 := [mp #39 #62]: #58
#117 := [mp~ #65 #116]: #114
#118 := [mp #117 #125]: #123
#126 := [and-elim #118]: #112
#128 := [mp #126 #127]: #101
#630 := [mp #128 #629]: #627
#255 := [unit-resolution #630 #596]: #608
#601 := (not #91)
#268 := (or #595 #601)
#269 := [quant-inst #81]: #268
#260 := [unit-resolution #269 #255 #257]: false
#597 := [lemma #260]: #83
#604 := (not #98)
#586 := [hypothesis]: #604
#598 := (or #98 #96)
#240 := [def-axiom]: #598
#587 := [unit-resolution #240 #586]: #96
#582 := (or #98 #74)
#244 := [def-axiom]: #582
#588 := [unit-resolution #244 #586]: #74
#119 := [and-elim #118]: #120
#583 := [unit-resolution #119 #588 #587 #597]: false
#589 := [lemma #583]: #98
#584 := (or #604 #595)
#605 := [hypothesis]: #98
#600 := [hypothesis]: #608
#606 := (or #595 #604)
#256 := [quant-inst #94]: #606
#247 := [unit-resolution #256 #600 #605]: false
#585 := [lemma #247]: #584
#226 := [unit-resolution #585 #589]: #595
#590 := [unit-resolution #630 #226]: #624
#232 := [unit-resolution #192 #590]: #613
#277 := (or #621 #74)
#278 := [def-axiom]: #277
#593 := [unit-resolution #278 #590]: #74
#591 := [unit-resolution #119 #593 #597]: #97
#592 := (or #618 #96)
#231 := [quant-inst #94]: #592
[unit-resolution #231 #591 #232]: false
unsat
99ed87e27f19515cee990b0e1501f89b03efe0b8 128 0
#2 := false
decl f3 :: (-> S3 S2 S1)
#10 := (:var 0 S2)
decl f4 :: (-> S4 S1 S3)
decl f6 :: S1
#16 := f6
decl f5 :: S4
#7 := f5
#17 := (f4 f5 f6)
#18 := (f3 #17 #10)
#582 := (pattern #18)
decl f1 :: S1
#3 := f1
#19 := (= #18 f1)
#85 := (not #19)
#583 := (forall (vars (?v0 S2)) (:pat #582) #85)
decl f7 :: S2
#21 := f7
#22 := (f3 #17 f7)
#23 := (= #22 f1)
#159 := (= f6 f1)
#160 := (iff #23 #159)
#8 := (:var 1 S1)
#9 := (f4 f5 #8)
#11 := (f3 #9 #10)
#575 := (pattern #11)
#13 := (= #8 f1)
#12 := (= #11 f1)
#14 := (iff #12 #13)
#576 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #575) #14)
#15 := (forall (vars (?v0 S1) (?v1 S2)) #14)
#579 := (iff #15 #576)
#577 := (iff #14 #14)
#578 := [refl]: #577
#580 := [quant-intro #578]: #579
#62 := (~ #15 #15)
#69 := (~ #14 #14)
#70 := [refl]: #69
#63 := [nnf-pos #70]: #62
#20 := (exists (vars (?v0 S2)) #19)
#24 := (iff #20 #23)
#48 := (not #15)
#49 := (or #48 #24)
#52 := (not #49)
#25 := (implies #15 #24)
#26 := (not #25)
#53 := (iff #26 #52)
#50 := (iff #25 #49)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#47 := [asserted]: #26
#57 := [mp #47 #54]: #52
#55 := [not-or-elim #57]: #15
#60 := [mp~ #55 #63]: #15
#581 := [mp #60 #580]: #576
#161 := (not #576)
#237 := (or #161 #160)
#570 := [quant-inst #16 #21]: #237
#246 := [unit-resolution #570 #581]: #160
decl ?v0!0 :: S2
#75 := ?v0!0
#76 := (f3 #17 ?v0!0)
#77 := (= #76 f1)
#245 := (iff #77 #159)
#247 := (or #161 #245)
#238 := [quant-inst #16 #75]: #247
#236 := [unit-resolution #238 #581]: #245
#249 := (not #245)
#208 := (or #249 #159)
#61 := (not #23)
#224 := [hypothesis]: #61
#92 := (or #77 #23)
#88 := (forall (vars (?v0 S2)) #85)
#91 := (or #88 #61)
#93 := (and #92 #91)
#64 := (not #20)
#65 := (iff #64 #23)
#94 := (~ #65 #93)
#73 := (~ #23 #23)
#74 := [refl]: #73
#71 := (~ #61 #61)
#72 := [refl]: #71
#89 := (~ #64 #88)
#86 := (~ #85 #85)
#87 := [refl]: #86
#90 := [nnf-neg #87]: #89
#82 := (not #64)
#83 := (~ #82 #77)
#78 := (~ #20 #77)
#79 := [sk]: #78
#84 := [nnf-neg #79]: #83
#95 := [nnf-pos #84 #90 #72 #74]: #94
#56 := (not #24)
#66 := (iff #56 #65)
#67 := [rewrite]: #66
#58 := [not-or-elim #57]: #56
#68 := [mp #58 #67]: #65
#96 := [mp~ #68 #95]: #93
#99 := [and-elim #96]: #92
#566 := [unit-resolution #99 #224]: #77
#252 := (not #77)
#231 := (or #249 #252 #159)
#567 := [def-axiom]: #231
#550 := [unit-resolution #567 #566]: #208
#212 := [unit-resolution #550 #236]: #159
#250 := (not #159)
#571 := (not #160)
#213 := (or #571 #250)
#572 := (or #571 #23 #250)
#573 := [def-axiom]: #572
#214 := [unit-resolution #573 #224]: #213
#215 := [unit-resolution #214 #212 #246]: false
#552 := [lemma #215]: #23
#588 := (or #583 #61)
#589 := (iff #91 #588)
#586 := (iff #88 #583)
#584 := (iff #85 #85)
#585 := [refl]: #584
#587 := [quant-intro #585]: #586
#590 := [monotonicity #587]: #589
#100 := [and-elim #96]: #91
#591 := [mp #100 #590]: #588
#251 := [unit-resolution #591 #552]: #583
#564 := (not #583)
#223 := (or #564 #61)
#228 := [quant-inst #21]: #223
[unit-resolution #228 #552 #251]: false
unsat
f269326ea50ac00c82433764ea1a5a8988d23a7e 81 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1 S1)
decl f5 :: S1
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#10 := (= #9 f1)
decl f6 :: S1
#19 := f6
#20 := (f3 f4 f6)
#21 := (= #20 f1)
#46 := (not #10)
#11 := (:var 0 S1)
#12 := (f3 f4 #11)
#13 := (= #12 f1)
#16 := (not #13)
#17 := (forall (vars (?v0 S1)) #16)
#14 := (exists (vars (?v0 S1)) #13)
#15 := (not #14)
#18 := (if #10 #15 #17)
#53 := (not #18)
#62 := (or #53 #46 #21)
#65 := (not #62)
#22 := (implies #10 #21)
#23 := (implies #18 #22)
#24 := (not #23)
#68 := (iff #24 #65)
#47 := (or #46 #21)
#54 := (or #53 #47)
#59 := (not #54)
#66 := (iff #59 #65)
#63 := (iff #54 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#60 := (iff #24 #59)
#57 := (iff #23 #54)
#50 := (implies #18 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #23 #50)
#48 := (iff #22 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58]: #60
#69 := [trans #61 #67]: #68
#45 := [asserted]: #24
#70 := [mp #45 #69]: #65
#72 := [not-or-elim #70]: #10
#569 := (pattern #12)
#570 := (forall (vars (?v0 S1)) (:pat #569) #16)
#573 := (iff #17 #570)
#571 := (iff #16 #16)
#572 := [refl]: #571
#574 := [quant-intro #572]: #573
#79 := (~ #15 #17)
#82 := (~ #16 #16)
#83 := [refl]: #82
#91 := [nnf-neg #83]: #79
#89 := (iff #18 #15)
#1 := true
#84 := (if true #15 #17)
#87 := (iff #84 #15)
#88 := [rewrite]: #87
#85 := (iff #18 #84)
#80 := (iff #10 true)
#81 := [iff-true #72]: #80
#86 := [monotonicity #81]: #85
#90 := [trans #86 #88]: #89
#71 := [not-or-elim #70]: #18
#78 := [mp #71 #90]: #15
#76 := [mp~ #78 #91]: #17
#575 := [mp #76 #574]: #570
#154 := (not #570)
#240 := (or #154 #46)
#155 := [quant-inst #8]: #240
[unit-resolution #155 #575 #72]: false
unsat
d1f4b96a9786562ebfa2e0c93b66635da8fcf6c8 138 0
#2 := false
decl f1 :: S1
#3 := f1
decl f7 :: S1
#26 := f7
#215 := (= f7 f1)
decl f3 :: (-> S3 S2 S1)
decl f6 :: S2
#20 := f6
decl f4 :: (-> S4 S1 S3)
decl f5 :: S4
#7 := f5
#27 := (f4 f5 f7)
#31 := (f3 #27 f6)
#32 := (= #31 f1)
#301 := (iff #32 #215)
#10 := (:var 0 S2)
#8 := (:var 1 S1)
#9 := (f4 f5 #8)
#11 := (f3 #9 #10)
#631 := (pattern #11)
#13 := (= #8 f1)
#12 := (= #11 f1)
#14 := (iff #12 #13)
#632 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #631) #14)
#15 := (forall (vars (?v0 S1) (?v1 S2)) #14)
#635 := (iff #15 #632)
#633 := (iff #14 #14)
#634 := [refl]: #633
#636 := [quant-intro #634]: #635
#75 := (~ #15 #15)
#82 := (~ #14 #14)
#83 := [refl]: #82
#76 := [nnf-pos #83]: #75
#18 := (:var 0 S1)
#19 := (f4 f5 #18)
#21 := (f3 #19 f6)
#22 := (= #21 f1)
#23 := (forall (vars (?v0 S1)) #22)
#16 := (exists (vars (?v1 S2)) #12)
#17 := (forall (vars (?v0 S1)) #16)
#24 := (iff #17 #23)
#25 := (and #15 #24)
#28 := (f3 #27 #10)
#29 := (= #28 f1)
#30 := (exists (vars (?v0 S2)) #29)
#33 := (iff #30 #32)
#57 := (not #25)
#58 := (or #57 #33)
#61 := (not #58)
#34 := (implies #25 #33)
#35 := (not #34)
#62 := (iff #35 #61)
#59 := (iff #34 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#56 := [asserted]: #35
#66 := [mp #56 #63]: #61
#64 := [not-or-elim #66]: #25
#65 := [and-elim #64]: #15
#73 := [mp~ #65 #76]: #15
#637 := [mp #73 #636]: #632
#304 := (not #632)
#620 := (or #304 #301)
#279 := [quant-inst #26 #20]: #620
#306 := [unit-resolution #279 #637]: #301
decl ?v0!3 :: S2
#129 := ?v0!3
#132 := (f3 #27 ?v0!3)
#133 := (= #132 f1)
#305 := (iff #133 #215)
#308 := (or #304 #305)
#287 := [quant-inst #26 #129]: #308
#307 := [unit-resolution #287 #637]: #305
#623 := (not #305)
#608 := (or #623 #215)
#117 := (not #32)
#663 := (pattern #28)
#141 := (not #29)
#664 := (forall (vars (?v0 S2)) (:pat #663) #141)
#216 := [hypothesis]: #32
#669 := (or #664 #117)
#144 := (forall (vars (?v0 S2)) #141)
#147 := (or #144 #117)
#670 := (iff #147 #669)
#667 := (iff #144 #664)
#665 := (iff #141 #141)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#671 := [monotonicity #668]: #670
#148 := (or #133 #32)
#149 := (and #148 #147)
#77 := (not #30)
#78 := (iff #77 #32)
#150 := (~ #78 #149)
#90 := (~ #32 #32)
#128 := [refl]: #90
#118 := (~ #117 #117)
#89 := [refl]: #118
#145 := (~ #77 #144)
#142 := (~ #141 #141)
#143 := [refl]: #142
#146 := [nnf-neg #143]: #145
#138 := (not #77)
#139 := (~ #138 #133)
#134 := (~ #30 #133)
#135 := [sk]: #134
#140 := [nnf-neg #135]: #139
#151 := [nnf-pos #140 #146 #89 #128]: #150
#68 := (not #33)
#79 := (iff #68 #78)
#80 := [rewrite]: #79
#69 := [not-or-elim #66]: #68
#81 := [mp #69 #80]: #78
#152 := [mp~ #81 #151]: #149
#156 := [and-elim #152]: #147
#672 := [mp #156 #671]: #669
#302 := [unit-resolution #672 #216]: #664
#619 := (not #664)
#292 := (or #619 #117)
#293 := [quant-inst #20]: #292
#626 := [unit-resolution #293 #216 #302]: false
#627 := [lemma #626]: #117
#155 := [and-elim #152]: #148
#271 := [unit-resolution #155 #627]: #133
#217 := (not #133)
#303 := (or #623 #217 #215)
#294 := [def-axiom]: #303
#609 := [unit-resolution #294 #271]: #608
#610 := [unit-resolution #609 #307]: #215
#625 := (not #215)
#284 := (not #301)
#611 := (or #284 #625)
#621 := (or #284 #32 #625)
#280 := [def-axiom]: #621
#612 := [unit-resolution #280 #627]: #611
[unit-resolution #612 #610 #306]: false
unsat
e3789d696531e28820a0701533dd90dd157ebfb7 66 0
#2 := false
decl f3 :: (-> S2 S3 S4)
#8 := (:var 0 S3)
decl ?v0!0 :: S2
#43 := ?v0!0
#44 := (f3 ?v0!0 #8)
#537 := (pattern #44)
decl f4 :: (-> S5 S2 S3)
decl f5 :: S5
#10 := f5
#45 := (f4 f5 ?v0!0)
#46 := (f3 ?v0!0 #45)
#39 := (= #44 #46)
#50 := (not #39)
#538 := (forall (vars (?v1 S3)) (:pat #537) #50)
#199 := (not #538)
#533 := (= #46 #46)
#529 := (not #533)
#528 := (or #199 #529)
#514 := (iff #528 #199)
#512 := (or #199 false)
#176 := (iff #512 #199)
#177 := [rewrite]: #176
#174 := (iff #528 #512)
#527 := (iff #529 false)
#1 := true
#530 := (not true)
#185 := (iff #530 false)
#190 := [rewrite]: #185
#536 := (iff #529 #530)
#534 := (iff #533 true)
#535 := [rewrite]: #534
#526 := [monotonicity #535]: #536
#186 := [trans #526 #190]: #527
#175 := [monotonicity #186]: #174
#515 := [trans #175 #177]: #514
#170 := [quant-inst #45]: #528
#516 := [mp #170 #515]: #199
#53 := (forall (vars (?v1 S3)) #50)
#541 := (iff #53 #538)
#539 := (iff #50 #50)
#540 := [refl]: #539
#542 := [quant-intro #540]: #541
#7 := (:var 1 S2)
#11 := (f4 f5 #7)
#12 := (f3 #7 #11)
#9 := (f3 #7 #8)
#13 := (= #9 #12)
#14 := (exists (vars (?v1 S3)) #13)
#15 := (forall (vars (?v0 S2)) #14)
#16 := (not #15)
#56 := (~ #16 #53)
#40 := (exists (vars (?v1 S3)) #39)
#47 := (not #40)
#54 := (~ #47 #53)
#51 := (~ #50 #50)
#52 := [refl]: #51
#55 := [nnf-neg #52]: #54
#48 := (~ #16 #47)
#49 := [sk]: #48
#57 := [trans #49 #55]: #56
#37 := [asserted]: #16
#58 := [mp~ #37 #57]: #53
#543 := [mp #58 #542]: #538
[unit-resolution #543 #516]: false
unsat
d324903e560baa1595f5a14b9effa96572ff81c3 88 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#58 := ?v0!0
#59 := (f3 ?v0!0)
#60 := (= #59 f1)
decl ?v0!1 :: S2
#71 := ?v0!1
#72 := (f3 ?v0!1)
#73 := (= #72 f1)
#155 := (not #73)
#241 := [hypothesis]: #73
#7 := (:var 0 S2)
#8 := (f3 #7)
#571 := (pattern #8)
#9 := (= #8 f1)
#13 := (not #9)
#572 := (forall (vars (?v0 S2)) (:pat #571) #13)
#14 := (forall (vars (?v0 S2)) #13)
#575 := (iff #14 #572)
#573 := (iff #13 #13)
#574 := [refl]: #573
#576 := [quant-intro #574]: #575
#90 := (or #73 #60)
#93 := (and #14 #90)
#61 := (not #60)
#53 := (not #61)
#78 := (or #73 #53)
#79 := (or #14 #14)
#80 := (and #79 #78)
#94 := (iff #80 #93)
#91 := (iff #78 #90)
#88 := (iff #53 #60)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#86 := (iff #79 #14)
#87 := [rewrite]: #86
#95 := [monotonicity #87 #92]: #94
#10 := (exists (vars (?v0 S2)) #9)
#47 := (iff #10 #14)
#81 := (~ #47 #80)
#67 := (~ #14 #14)
#65 := (~ #13 #13)
#66 := [refl]: #65
#68 := [nnf-pos #66]: #67
#15 := (not #14)
#55 := (~ #15 #53)
#62 := [sk]: #55
#74 := (~ #10 #73)
#75 := [sk]: #74
#11 := (not #10)
#69 := (~ #11 #14)
#70 := [nnf-neg #66]: #69
#82 := [nnf-pos #70 #75 #62 #68]: #81
#12 := (not #11)
#16 := (iff #12 #15)
#17 := (not #16)
#50 := (iff #17 #47)
#41 := (iff #10 #15)
#44 := (not #41)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #17 #44)
#42 := (iff #16 #41)
#39 := (iff #12 #10)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#38 := [asserted]: #17
#54 := [mp #38 #51]: #47
#83 := [mp~ #54 #82]: #80
#84 := [mp #83 #95]: #93
#85 := [and-elim #84]: #14
#577 := [mp #85 #576]: #572
#242 := (not #572)
#157 := (or #242 #155)
#243 := [quant-inst #71]: #157
#156 := [unit-resolution #243 #577 #241]: false
#234 := [lemma #156]: #155
#96 := [and-elim #84]: #90
#245 := [unit-resolution #96 #234]: #60
#247 := (or #242 #61)
#244 := [quant-inst #58]: #247
[unit-resolution #244 #577 #245]: false
unsat
3de5495059db2c9339efaef2e05436267d6715ae 98 0
WARNING: failed to find a pattern for quantifier (quantifier id: k!16)
#2 := false
decl f3 :: (-> S2 S3 S4 S5 S6)
decl f6 :: (-> S8 S4 S5)
decl ?v2!1 :: (-> S3 S4)
#63 := (:var 1 S3)
#64 := (?v2!1 #63)
decl f7 :: (-> S9 S2 S8)
decl ?v0!0 :: S2
#50 := ?v0!0
decl f8 :: S9
#14 := f8
#53 := (f7 f8 ?v0!0)
#66 := (f6 #53 #64)
decl f4 :: (-> S7 S2 S3)
decl f5 :: S7
#12 := f5
#52 := (f4 f5 ?v0!0)
#67 := (f3 ?v0!0 #52 #64 #66)
#10 := (:var 0 S5)
#65 := (f3 ?v0!0 #63 #64 #10)
#68 := (= #65 #67)
#61 := (not #68)
#88 := (forall (vars (?v1 S3) (?v3 S5)) #61)
#543 := (not #88)
#541 := (?v2!1 #52)
#530 := (f6 #53 #541)
#534 := (f3 ?v0!0 #52 #541 #530)
#525 := (= #534 #534)
#520 := (not #525)
#371 := (or #543 #520)
#517 := (iff #371 #543)
#514 := (or #543 false)
#510 := (iff #514 #543)
#511 := [rewrite]: #510
#515 := (iff #371 #514)
#369 := (iff #520 false)
#1 := true
#539 := (not true)
#522 := (iff #539 false)
#528 := [rewrite]: #522
#536 := (iff #520 #539)
#526 := (iff #525 true)
#555 := [rewrite]: #526
#527 := [monotonicity #555]: #536
#370 := [trans #527 #528]: #369
#516 := [monotonicity #370]: #515
#518 := [trans #516 #511]: #517
#513 := [quant-inst #52 #530]: #371
#512 := [mp #513 #518]: #543
#75 := (forall (vars (?v3 S5)) #61)
#80 := (forall (vars (?v1 S3)) #75)
#89 := (iff #80 #88)
#90 := [pull-quant]: #89
#9 := (:var 1 S4)
#7 := (:var 3 S2)
#15 := (f7 f8 #7)
#16 := (f6 #15 #9)
#13 := (f4 f5 #7)
#17 := (f3 #7 #13 #9 #16)
#8 := (:var 2 S3)
#11 := (f3 #7 #8 #9 #10)
#18 := (= #11 #17)
#19 := (exists (vars (?v3 S5)) #18)
#20 := (forall (vars (?v2 S4)) #19)
#21 := (exists (vars (?v1 S3)) #20)
#22 := (forall (vars (?v0 S2)) #21)
#23 := (not #22)
#83 := (~ #23 #80)
#46 := (f6 #53 #9)
#47 := (f3 ?v0!0 #52 #9 #46)
#51 := (f3 ?v0!0 #8 #9 #10)
#54 := (= #51 #47)
#55 := (exists (vars (?v3 S5)) #54)
#56 := (forall (vars (?v2 S4)) #55)
#57 := (exists (vars (?v1 S3)) #56)
#58 := (not #57)
#81 := (~ #58 #80)
#71 := (not #56)
#78 := (~ #71 #75)
#69 := (exists (vars (?v3 S5)) #68)
#70 := (not #69)
#76 := (~ #70 #75)
#62 := (~ #61 #61)
#74 := [refl]: #62
#77 := [nnf-neg #74]: #76
#72 := (~ #71 #70)
#73 := [sk]: #72
#79 := [trans #73 #77]: #78
#82 := [nnf-neg #79]: #81
#59 := (~ #23 #58)
#60 := [sk]: #59
#84 := [trans #60 #82]: #83
#44 := [asserted]: #23
#85 := [mp~ #44 #84]: #80
#86 := [mp #85 #90]: #88
[unit-resolution #86 #512]: false
unsat
c05210ac4c810516250c979692bf95e10f79efbc 67 0
#2 := false
decl f4 :: (-> S4 S2 S3)
#10 := (:var 1 S2)
decl f5 :: (-> S5 S2 S4)
decl f6 :: S5
#16 := f6
#17 := (f5 f6 #10)
#18 := (f4 #17 #10)
#15 := (:var 0 S3)
#19 := (= #15 #18)
#20 := (not #19)
#21 := (or #19 #20)
#22 := (forall (vars (?v1 S3)) #21)
#7 := (:var 0 S2)
#11 := (= #7 #10)
#12 := (not #11)
#13 := (or #11 #12)
#14 := (forall (vars (?v1 S2)) #13)
decl f3 :: S2
#8 := f3
#9 := (= #7 f3)
#23 := (if #9 #14 #22)
#24 := (exists (vars (?v0 S2)) #23)
#25 := (not #24)
#84 := (iff #25 false)
#1 := true
#79 := (not true)
#82 := (iff #79 false)
#83 := [rewrite]: #82
#80 := (iff #25 #79)
#77 := (iff #24 true)
#72 := (exists (vars (?v0 S2)) true)
#75 := (iff #72 true)
#76 := [elim-unused]: #75
#73 := (iff #24 #72)
#70 := (iff #23 true)
#65 := (if #9 true true)
#68 := (iff #65 true)
#69 := [rewrite]: #68
#66 := (iff #23 #65)
#63 := (iff #22 true)
#58 := (forall (vars (?v1 S3)) true)
#61 := (iff #58 true)
#62 := [elim-unused]: #61
#59 := (iff #22 #58)
#56 := (iff #21 true)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#64 := [trans #60 #62]: #63
#54 := (iff #14 true)
#49 := (forall (vars (?v1 S2)) true)
#52 := (iff #49 true)
#53 := [elim-unused]: #52
#50 := (iff #14 #49)
#47 := (iff #13 true)
#48 := [rewrite]: #47
#51 := [quant-intro #48]: #50
#55 := [trans #51 #53]: #54
#67 := [monotonicity #55 #64]: #66
#71 := [trans #67 #69]: #70
#74 := [quant-intro #71]: #73
#78 := [trans #74 #76]: #77
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#46 := [asserted]: #25
[mp #46 #85]: false
unsat
954b31fcb23d6bdcc4d8c96fd318c51c72effd7f 64 0
#2 := false
decl f4 :: (-> S4 S2 S3)
#10 := (:var 1 S2)
decl f5 :: (-> S5 S2 S4)
decl f6 :: S5
#16 := f6
#17 := (f5 f6 #10)
#18 := (f4 #17 #10)
#15 := (:var 0 S3)
#19 := (= #15 #18)
#20 := (not #19)
#21 := (or #19 #20)
#22 := (exists (vars (?v1 S3)) #21)
#7 := (:var 0 S2)
#11 := (= #7 #10)
#12 := (not #11)
#13 := (or #11 #12)
#14 := (exists (vars (?v1 S2)) #13)
decl f3 :: S2
#8 := f3
#9 := (= #7 f3)
#23 := (if #9 #14 #22)
#24 := (exists (vars (?v0 S2)) #23)
#25 := (not #24)
#81 := (iff #25 false)
#1 := true
#76 := (not true)
#79 := (iff #76 false)
#80 := [rewrite]: #79
#77 := (iff #25 #76)
#74 := (iff #24 true)
#49 := (exists (vars (?v1 S2)) true)
#52 := (iff #49 true)
#53 := [elim-unused]: #52
#72 := (iff #24 #49)
#70 := (iff #23 true)
#65 := (if #9 true true)
#68 := (iff #65 true)
#69 := [rewrite]: #68
#66 := (iff #23 #65)
#63 := (iff #22 true)
#58 := (exists (vars (?v1 S3)) true)
#61 := (iff #58 true)
#62 := [elim-unused]: #61
#59 := (iff #22 #58)
#56 := (iff #21 true)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#64 := [trans #60 #62]: #63
#54 := (iff #14 true)
#50 := (iff #14 #49)
#47 := (iff #13 true)
#48 := [rewrite]: #47
#51 := [quant-intro #48]: #50
#55 := [trans #51 #53]: #54
#67 := [monotonicity #55 #64]: #66
#71 := [trans #67 #69]: #70
#73 := [quant-intro #71]: #72
#75 := [trans #73 #53]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#46 := [asserted]: #25
[mp #46 #82]: false
unsat
f51403ccc25360b96d5b86de9da670599bc2bdd5 154 0
#2 := false
decl f3 :: (-> S2 S1)
#10 := (:var 0 S2)
#11 := (f3 #10)
#583 := (pattern #11)
decl f1 :: S1
#3 := f1
#12 := (= #11 f1)
#95 := (not #12)
#599 := (forall (vars (?v0 S2)) (:pat #583) #95)
decl ?v0!1 :: S2
#72 := ?v0!1
#73 := (f3 ?v0!1)
#74 := (= #73 f1)
decl ?v0!0 :: S2
#63 := ?v0!0
#64 := (f3 ?v0!0)
#56 := (= #64 f1)
#167 := (iff #56 #74)
#572 := (not #167)
#580 := [hypothesis]: #572
#57 := (iff #56 #12)
#584 := (forall (vars (?v1 S2)) (:pat #583) #57)
#54 := (forall (vars (?v1 S2)) #57)
#587 := (iff #54 #584)
#585 := (iff #57 #57)
#586 := [refl]: #585
#588 := [quant-intro #586]: #587
#7 := (:var 1 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#13 := (iff #9 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (exists (vars (?v0 S2)) #14)
#55 := (~ #15 #54)
#68 := (~ #54 #54)
#66 := (~ #57 #57)
#67 := [refl]: #66
#69 := [nnf-pos #67]: #68
#65 := [sk]: #55
#70 := [trans #65 #69]: #55
#17 := (forall (vars (?v0 S2)) #12)
#16 := (exists (vars (?v0 S2)) #12)
#18 := (iff #16 #17)
#42 := (not #15)
#43 := (or #42 #18)
#46 := (not #43)
#19 := (implies #15 #18)
#20 := (not #19)
#47 := (iff #20 #46)
#44 := (iff #19 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#41 := [asserted]: #20
#51 := [mp #41 #48]: #46
#49 := [not-or-elim #51]: #15
#71 := [mp~ #49 #70]: #54
#589 := [mp #71 #588]: #584
#254 := (not #584)
#576 := (or #254 #167)
#582 := [quant-inst #72]: #576
#581 := [unit-resolution #582 #589 #580]: false
#564 := [lemma #581]: #167
#559 := (or #572 #74)
#259 := (not #56)
#169 := [hypothesis]: #259
#590 := (forall (vars (?v0 S2)) (:pat #583) #12)
decl ?v0!2 :: S2
#85 := ?v0!2
#86 := (f3 ?v0!2)
#87 := (= #86 f1)
#246 := (not #87)
#255 := (or #56 #246)
#253 := (iff #56 #87)
#245 := (not #253)
#168 := [hypothesis]: #245
#571 := (or #254 #253)
#244 := [quant-inst #85]: #571
#364 := [unit-resolution #244 #589 #168]: false
#573 := [lemma #364]: #253
#257 := (or #245 #56 #246)
#258 := [def-axiom]: #257
#223 := [unit-resolution #258 #573]: #255
#560 := [unit-resolution #223 #169]: #246
#595 := (or #87 #590)
#102 := (or #87 #17)
#596 := (iff #102 #595)
#593 := (iff #17 #590)
#591 := (iff #12 #12)
#592 := [refl]: #591
#594 := [quant-intro #592]: #593
#597 := [monotonicity #594]: #596
#75 := (not #74)
#98 := (forall (vars (?v0 S2)) #95)
#101 := (or #98 #75)
#103 := (and #102 #101)
#58 := (not #16)
#59 := (iff #58 #17)
#104 := (~ #59 #103)
#83 := (~ #17 #17)
#81 := (~ #12 #12)
#82 := [refl]: #81
#84 := [nnf-pos #82]: #83
#76 := (not #17)
#77 := (~ #76 #75)
#78 := [sk]: #77
#99 := (~ #58 #98)
#96 := (~ #95 #95)
#97 := [refl]: #96
#100 := [nnf-neg #97]: #99
#92 := (not #58)
#93 := (~ #92 #87)
#88 := (~ #16 #87)
#89 := [sk]: #88
#94 := [nnf-neg #89]: #93
#105 := [nnf-pos #94 #100 #78 #84]: #104
#50 := (not #18)
#60 := (iff #50 #59)
#61 := [rewrite]: #60
#52 := [not-or-elim #51]: #50
#62 := [mp #52 #61]: #59
#106 := [mp~ #62 #105]: #103
#109 := [and-elim #106]: #102
#598 := [mp #109 #597]: #595
#561 := [unit-resolution #598 #560]: #590
#216 := (not #590)
#558 := (or #216 #56)
#220 := [quant-inst #63]: #558
#562 := [unit-resolution #220 #561 #169]: false
#563 := [lemma #562]: #56
#232 := (or #572 #259 #74)
#574 := [def-axiom]: #232
#565 := [unit-resolution #574 #563]: #559
#569 := [unit-resolution #565 #564]: #74
#604 := (or #599 #75)
#605 := (iff #101 #604)
#602 := (iff #98 #599)
#600 := (iff #95 #95)
#601 := [refl]: #600
#603 := [quant-intro #601]: #602
#606 := [monotonicity #603]: #605
#110 := [and-elim #106]: #101
#607 := [mp #110 #606]: #604
#567 := [unit-resolution #607 #569]: #599
#570 := (or #259 #87)
#256 := (or #245 #259 #87)
#260 := [def-axiom]: #256
#556 := [unit-resolution #260 #573]: #570
#557 := [unit-resolution #556 #563]: #87
#202 := (not #599)
#566 := (or #202 #246)
#568 := [quant-inst #85]: #566
[unit-resolution #568 #557 #567]: false
unsat
3bee024f02f6d6345f10af17fc9f9efaf0eafdfa 91 0
#2 := false
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#562 := (pattern #8)
decl f1 :: S1
#3 := f1
decl ?v1!0 :: S2
#54 := ?v1!0
#46 := (f3 ?v1!0)
#48 := (= #46 f1)
#9 := (= #8 f1)
#35 := (not #9)
#59 := (or #35 #48)
#60 := (not #59)
#563 := (forall (vars (?v0 S2)) (:pat #562) #60)
#212 := (not #563)
#55 := (not #48)
#343 := (or #55 #48)
#556 := (not #343)
#201 := (or #212 #556)
#538 := (iff #201 #212)
#539 := (or #212 false)
#542 := (iff #539 #212)
#543 := [rewrite]: #542
#540 := (iff #201 #539)
#199 := (iff #556 false)
#1 := true
#552 := (not true)
#195 := (iff #552 false)
#537 := [rewrite]: #195
#211 := (iff #556 #552)
#210 := (iff #343 true)
#215 := [rewrite]: #210
#553 := [monotonicity #215]: #211
#200 := [trans #553 #537]: #199
#541 := [monotonicity #200]: #540
#544 := [trans #541 #543]: #538
#202 := [quant-inst #54]: #201
#181 := [mp #202 #544]: #212
#80 := (forall (vars (?v0 S2)) #60)
#566 := (iff #80 #563)
#564 := (iff #60 #60)
#565 := [refl]: #564
#567 := [quant-intro #565]: #566
#73 := (and #9 #55)
#76 := (forall (vars (?v0 S2)) #73)
#81 := (iff #76 #80)
#70 := (iff #73 #60)
#79 := [rewrite]: #70
#82 := [quant-intro #79]: #81
#51 := (not #35)
#61 := (and #51 #55)
#65 := (forall (vars (?v0 S2)) #61)
#77 := (iff #65 #76)
#74 := (iff #61 #73)
#71 := (iff #51 #9)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#78 := [quant-intro #75]: #77
#10 := (forall (vars (?v1 S2)) #9)
#36 := (or #35 #10)
#39 := (exists (vars (?v0 S2)) #36)
#42 := (not #39)
#66 := (~ #42 #65)
#62 := (not #36)
#63 := (~ #62 #61)
#56 := (not #10)
#57 := (~ #56 #55)
#58 := [sk]: #57
#52 := (~ #51 #51)
#53 := [refl]: #52
#64 := [nnf-neg #53 #58]: #63
#67 := [nnf-neg #64]: #66
#11 := (implies #9 #10)
#12 := (exists (vars (?v0 S2)) #11)
#13 := (not #12)
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#41 := [quant-intro #38]: #40
#44 := [monotonicity #41]: #43
#34 := [asserted]: #13
#47 := [mp #34 #44]: #42
#68 := [mp~ #47 #67]: #65
#69 := [mp #68 #78]: #76
#83 := [mp #69 #82]: #80
#568 := [mp #83 #567]: #563
[unit-resolution #568 #181]: false
unsat
45134300a71a5bae52258f9afddcfb2800b39351 86 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S3 S2 S1)
decl ?v0!0 :: S2
#60 := ?v0!0
decl ?v0!1 :: S3
#70 := ?v0!1
#549 := (f3 ?v0!1 ?v0!0)
#188 := (= #549 f1)
#189 := (not #188)
#14 := (:var 0 S2)
#71 := (f3 ?v0!1 #14)
#571 := (pattern #71)
#72 := (= #71 f1)
#77 := (not #72)
#572 := (forall (vars (?v1 S2)) (:pat #571) #77)
#80 := (forall (vars (?v1 S2)) #77)
#575 := (iff #80 #572)
#573 := (iff #77 #77)
#574 := [refl]: #573
#576 := [quant-intro #574]: #575
#13 := (:var 1 S3)
#15 := (f3 #13 #14)
#16 := (= #15 f1)
#17 := (exists (vars (?v1 S2)) #16)
#18 := (forall (vars (?v0 S3)) #17)
#50 := (not #18)
#83 := (~ #50 #80)
#73 := (exists (vars (?v1 S2)) #72)
#74 := (not #73)
#81 := (~ #74 #80)
#78 := (~ #77 #77)
#79 := [refl]: #78
#82 := [nnf-neg #79]: #81
#75 := (~ #50 #74)
#76 := [sk]: #75
#84 := [trans #76 #82]: #83
#8 := (:var 1 S2)
#7 := (:var 0 S3)
#9 := (f3 #7 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v1 S3)) #10)
#12 := (exists (vars (?v0 S2)) #11)
#42 := (not #12)
#43 := (or #42 #18)
#46 := (not #43)
#19 := (implies #12 #18)
#20 := (not #19)
#47 := (iff #20 #46)
#44 := (iff #19 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#41 := [asserted]: #20
#51 := [mp #41 #48]: #46
#52 := [not-or-elim #51]: #50
#85 := [mp~ #52 #84]: #80
#577 := [mp #85 #576]: #572
#550 := (not #572)
#548 := (or #550 #189)
#551 := [quant-inst #60]: #548
#543 := [unit-resolution #551 #577]: #189
#61 := (f3 #7 ?v0!0)
#564 := (pattern #61)
#62 := (= #61 f1)
#565 := (forall (vars (?v1 S3)) (:pat #564) #62)
#63 := (forall (vars (?v1 S3)) #62)
#568 := (iff #63 #565)
#566 := (iff #62 #62)
#567 := [refl]: #566
#569 := [quant-intro #567]: #568
#54 := (~ #12 #63)
#66 := (~ #63 #63)
#64 := (~ #62 #62)
#65 := [refl]: #64
#67 := [nnf-pos #65]: #66
#55 := [sk]: #54
#68 := [trans #55 #67]: #54
#49 := [not-or-elim #51]: #12
#69 := [mp~ #49 #68]: #63
#570 := [mp #69 #569]: #565
#557 := (not #565)
#537 := (or #557 #188)
#538 := [quant-inst #70]: #537
[unit-resolution #538 #570 #543]: false
unsat
495d743f85fbd7a7c1dc6d3a6d586246681b024f 86 0
#2 := false
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#579 := (pattern #8)
decl f1 :: S1
#3 := f1
#9 := (= #8 f1)
#40 := (not #9)
#586 := (forall (vars (?v0 S2)) (:pat #579) #40)
#97 := (forall (vars (?v0 S2)) #40)
#589 := (iff #97 #586)
#587 := (iff #40 #40)
#588 := [refl]: #587
#590 := [quant-intro #588]: #589
#16 := (exists (vars (?v0 S2)) #9)
#66 := (not #16)
#98 := (~ #66 #97)
#93 := (~ #40 #40)
#94 := [refl]: #93
#99 := [nnf-neg #94]: #98
#10 := (:var 1 S2)
#11 := (= #7 #10)
#41 := (or #40 #11)
#44 := (forall (vars (?v1 S2)) #41)
#47 := (and #9 #44)
#50 := (exists (vars (?v0 S2)) #47)
#56 := (not #50)
#57 := (or #56 #16)
#62 := (not #57)
#12 := (implies #9 #11)
#13 := (forall (vars (?v1 S2)) #12)
#14 := (and #9 #13)
#15 := (exists (vars (?v0 S2)) #14)
#17 := (implies #15 #16)
#18 := (not #17)
#63 := (iff #18 #62)
#60 := (iff #17 #57)
#53 := (implies #50 #16)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #17 #53)
#51 := (iff #15 #50)
#48 := (iff #14 #47)
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#43 := [rewrite]: #42
#46 := [quant-intro #43]: #45
#49 := [monotonicity #46]: #48
#52 := [quant-intro #49]: #51
#55 := [monotonicity #52]: #54
#61 := [trans #55 #59]: #60
#64 := [monotonicity #61]: #63
#39 := [asserted]: #18
#67 := [mp #39 #64]: #62
#68 := [not-or-elim #67]: #66
#100 := [mp~ #68 #99]: #97
#591 := [mp #100 #590]: #586
decl ?v0!0 :: S2
#76 := ?v0!0
#77 := (f3 ?v0!0)
#78 := (= #77 f1)
#79 := (= #7 ?v0!0)
#70 := (or #40 #79)
#71 := (forall (vars (?v1 S2)) #70)
#80 := (and #78 #71)
#81 := (~ #50 #80)
#89 := (~ #80 #80)
#87 := (~ #71 #71)
#85 := (~ #70 #70)
#86 := [refl]: #85
#88 := [nnf-pos #86]: #87
#83 := (~ #78 #78)
#84 := [refl]: #83
#90 := [monotonicity #84 #88]: #89
#82 := [sk]: #81
#91 := [trans #82 #90]: #81
#65 := [not-or-elim #67]: #50
#92 := [mp~ #65 #91]: #80
#95 := [and-elim #92]: #78
#163 := (not #78)
#250 := (not #586)
#165 := (or #250 #163)
#251 := [quant-inst #76]: #165
[unit-resolution #251 #95 #591]: false
unsat
aa5dc2c51501c5229e09c29f21c70d436d198117 362 0
#2 := false
decl ?v0!2 :: S2
#125 := ?v0!2
decl ?v1!3 :: (-> S2 S2)
#574 := (?v1!3 ?v0!2)
#583 := (= #574 ?v0!2)
#555 := (not #583)
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#570 := (f3 #574)
#575 := (= #570 f1)
#582 := (not #575)
#581 := (or #582 #583)
#577 := (not #581)
#7 := (:var 0 S2)
#8 := (f3 #7)
#663 := (pattern #8)
#146 := (?v1!3 #7)
#150 := (= #146 #7)
#147 := (f3 #146)
#148 := (= #147 f1)
#149 := (not #148)
#151 := (or #149 #150)
#152 := (not #151)
#9 := (= #8 f1)
#17 := (not #9)
#158 := (or #17 #152)
#696 := (forall (vars (?v0 S2)) (:pat #663) #158)
decl ?v1!0 :: (-> S2 S2)
#89 := (?v1!0 #7)
#82 := (f3 #89)
#84 := (= #82 f1)
#91 := (not #84)
#90 := (= #89 #7)
#92 := (or #90 #91)
#93 := (not #92)
#99 := (or #17 #93)
#701 := (forall (vars (?v0 S2)) (:pat #663) #99)
#347 := (not #701)
#615 := (?v1!0 ?v0!2)
#599 := (f3 #615)
#600 := (= #599 f1)
#602 := (not #600)
#616 := (= #615 ?v0!2)
#603 := (or #616 #602)
#601 := (not #603)
#591 := [hypothesis]: #601
#500 := (or #603 #600)
#501 := [def-axiom]: #500
#580 := [unit-resolution #501 #591]: #600
#498 := (not #616)
#499 := (or #603 #498)
#492 := [def-axiom]: #499
#561 := [unit-resolution #492 #591]: #498
#128 := (= #7 ?v0!2)
#129 := (or #17 #128)
#664 := (forall (vars (?v1 S2)) (:pat #663) #129)
#669 := (not #664)
#126 := (f3 ?v0!2)
#127 := (= #126 f1)
#156 := (not #127)
#672 := (or #156 #669)
#675 := (not #672)
decl ?v0!1 :: S2
#107 := ?v0!1
#110 := (= #7 ?v0!1)
#111 := (or #110 #17)
#678 := (forall (vars (?v1 S2)) (:pat #663) #111)
#683 := (not #678)
#108 := (f3 ?v0!1)
#109 := (= #108 f1)
#175 := (not #109)
#686 := (or #175 #683)
#633 := (?v1!0 ?v0!1)
#650 := (f3 #633)
#636 := (= #650 f1)
#647 := (not #636)
#355 := (= #633 ?v0!1)
#637 := (or #355 #647)
#344 := (not #637)
#662 := (not #696)
#319 := (?v1!3 ?v0!1)
#444 := (= #319 ?v0!1)
#655 := (f3 #319)
#657 := (= #655 f1)
#313 := (not #657)
#651 := (or #313 #444)
#689 := (not #686)
#606 := [hypothesis]: #689
#338 := (or #686 #678)
#339 := [def-axiom]: #338
#612 := [unit-resolution #339 #606]: #678
#631 := (or #651 #683)
#654 := (not #444)
#324 := (not #651)
#288 := [hypothesis]: #324
#296 := (or #651 #654)
#638 := [def-axiom]: #296
#649 := [unit-resolution #638 #288]: #654
#653 := (or #651 #657)
#312 := [def-axiom]: #653
#356 := [unit-resolution #312 #288]: #657
#630 := [hypothesis]: #678
#303 := (or #683 #444 #313)
#658 := (or #444 #313)
#640 := (or #683 #658)
#642 := (iff #640 #303)
#643 := [rewrite]: #642
#641 := [quant-inst #319]: #640
#644 := [mp #641 #643]: #303
#634 := [unit-resolution #644 #630 #356 #649]: false
#635 := [lemma #634]: #631
#487 := [unit-resolution #635 #612]: #651
#326 := (or #686 #109)
#337 := [def-axiom]: #326
#488 := [unit-resolution #337 #606]: #109
#661 := (or #662 #175 #324)
#660 := [hypothesis]: #651
#656 := [hypothesis]: #696
#362 := [hypothesis]: #109
#325 := (or #175 #324)
#652 := (or #662 #325)
#316 := (iff #652 #661)
#360 := [rewrite]: #316
#311 := [quant-inst #107]: #652
#361 := [mp #311 #360]: #661
#255 := [unit-resolution #361 #362 #656 #660]: false
#632 := [lemma #255]: #661
#447 := [unit-resolution #632 #488 #487]: #662
#706 := (or #696 #701)
#103 := (forall (vars (?v0 S2)) #99)
#162 := (forall (vars (?v0 S2)) #158)
#165 := (or #162 #103)
#707 := (iff #165 #706)
#704 := (iff #103 #701)
#702 := (iff #99 #99)
#703 := [refl]: #702
#705 := [quant-intro #703]: #704
#699 := (iff #162 #696)
#697 := (iff #158 #158)
#698 := [refl]: #697
#700 := [quant-intro #698]: #699
#708 := [monotonicity #700 #705]: #707
#112 := (forall (vars (?v1 S2)) #111)
#113 := (and #109 #112)
#130 := (forall (vars (?v1 S2)) #129)
#131 := (and #127 #130)
#166 := (or #131 #113)
#167 := (and #166 #165)
#10 := (:var 1 S2)
#11 := (= #7 #10)
#57 := (or #11 #17)
#60 := (forall (vars (?v1 S2)) #57)
#63 := (and #9 #60)
#66 := (exists (vars (?v0 S2)) #63)
#45 := (or #17 #11)
#48 := (forall (vars (?v1 S2)) #45)
#51 := (and #9 #48)
#54 := (exists (vars (?v0 S2)) #51)
#75 := (not #54)
#76 := (iff #75 #66)
#168 := (~ #76 #167)
#114 := (~ #66 #113)
#122 := (~ #113 #113)
#120 := (~ #112 #112)
#118 := (~ #111 #111)
#119 := [refl]: #118
#121 := [nnf-pos #119]: #120
#116 := (~ #109 #109)
#117 := [refl]: #116
#123 := [monotonicity #117 #121]: #122
#115 := [sk]: #114
#124 := [trans #115 #123]: #114
#104 := (not #66)
#105 := (~ #104 #103)
#100 := (not #63)
#101 := (~ #100 #99)
#94 := (not #60)
#95 := (~ #94 #93)
#96 := [sk]: #95
#87 := (~ #17 #17)
#88 := [refl]: #87
#102 := [nnf-neg #88 #96]: #101
#106 := [nnf-neg #102]: #105
#163 := (~ #75 #162)
#159 := (not #51)
#160 := (~ #159 #158)
#153 := (not #48)
#154 := (~ #153 #152)
#155 := [sk]: #154
#161 := [nnf-neg #88 #155]: #160
#164 := [nnf-neg #161]: #163
#143 := (not #75)
#144 := (~ #143 #131)
#132 := (~ #54 #131)
#140 := (~ #131 #131)
#138 := (~ #130 #130)
#136 := (~ #129 #129)
#137 := [refl]: #136
#139 := [nnf-pos #137]: #138
#134 := (~ #127 #127)
#135 := [refl]: #134
#141 := [monotonicity #135 #139]: #140
#133 := [sk]: #132
#142 := [trans #133 #141]: #132
#145 := [nnf-neg #142]: #144
#169 := [nnf-pos #145 #164 #106 #124]: #168
#16 := (not #11)
#18 := (implies #16 #17)
#19 := (forall (vars (?v1 S2)) #18)
#20 := (and #9 #19)
#21 := (exists (vars (?v0 S2)) #20)
#12 := (implies #9 #11)
#13 := (forall (vars (?v1 S2)) #12)
#14 := (and #9 #13)
#15 := (exists (vars (?v0 S2)) #14)
#22 := (iff #15 #21)
#23 := (not #22)
#79 := (iff #23 #76)
#69 := (iff #54 #66)
#72 := (not #69)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #23 #72)
#70 := (iff #22 #69)
#67 := (iff #21 #66)
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#58 := (iff #18 #57)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#65 := [monotonicity #62]: #64
#68 := [quant-intro #65]: #67
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (iff #13 #48)
#46 := (iff #12 #45)
#47 := [rewrite]: #46
#50 := [quant-intro #47]: #49
#53 := [monotonicity #50]: #52
#56 := [quant-intro #53]: #55
#71 := [monotonicity #56 #68]: #70
#74 := [monotonicity #71]: #73
#80 := [trans #74 #78]: #79
#44 := [asserted]: #23
#83 := [mp #44 #80]: #76
#170 := [mp~ #83 #169]: #167
#174 := [and-elim #170]: #165
#709 := [mp #174 #708]: #706
#595 := [unit-resolution #709 #447]: #701
#348 := (or #347 #175 #344)
#359 := (or #175 #344)
#626 := (or #347 #359)
#341 := (iff #626 #348)
#624 := [rewrite]: #341
#627 := [quant-inst #107]: #626
#628 := [mp #627 #624]: #348
#497 := [unit-resolution #628 #488 #595]: #344
#619 := (or #637 #636)
#620 := [def-axiom]: #619
#592 := [unit-resolution #620 #497]: #636
#625 := (not #355)
#629 := (or #637 #625)
#618 := [def-axiom]: #629
#593 := [unit-resolution #618 #497]: #625
#621 := (or #683 #355 #647)
#622 := (or #683 #637)
#623 := (iff #622 #621)
#464 := [rewrite]: #623
#617 := [quant-inst #633]: #622
#465 := [mp #617 #464]: #621
#596 := [unit-resolution #465 #612 #593 #592]: false
#481 := [lemma #596]: #686
#692 := (or #675 #689)
#176 := (not #112)
#177 := (or #175 #176)
#178 := (not #177)
#157 := (not #130)
#97 := (or #156 #157)
#98 := (not #97)
#181 := (or #98 #178)
#693 := (iff #181 #692)
#690 := (iff #178 #689)
#687 := (iff #177 #686)
#684 := (iff #176 #683)
#681 := (iff #112 #678)
#679 := (iff #111 #111)
#680 := [refl]: #679
#682 := [quant-intro #680]: #681
#685 := [monotonicity #682]: #684
#688 := [monotonicity #685]: #687
#691 := [monotonicity #688]: #690
#676 := (iff #98 #675)
#673 := (iff #97 #672)
#670 := (iff #157 #669)
#667 := (iff #130 #664)
#665 := (iff #129 #129)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#671 := [monotonicity #668]: #670
#674 := [monotonicity #671]: #673
#677 := [monotonicity #674]: #676
#694 := [monotonicity #677 #691]: #693
#182 := (iff #166 #181)
#179 := (iff #113 #178)
#180 := [rewrite]: #179
#171 := (iff #131 #98)
#172 := [rewrite]: #171
#183 := [monotonicity #172 #180]: #182
#173 := [and-elim #170]: #166
#184 := [mp #173 #183]: #181
#695 := [mp #184 #694]: #692
#562 := [unit-resolution #695 #481]: #675
#248 := (or #672 #664)
#334 := [def-axiom]: #248
#564 := [unit-resolution #334 #562]: #664
#597 := (or #669 #602 #616)
#486 := (or #602 #616)
#594 := (or #669 #486)
#585 := (iff #594 #597)
#587 := [rewrite]: #585
#598 := [quant-inst #615]: #594
#579 := [mp #598 #587]: #597
#565 := [unit-resolution #579 #564 #561 #580]: false
#566 := [lemma #565]: #603
#613 := [hypothesis]: #701
#247 := (or #672 #127)
#333 := [def-axiom]: #247
#443 := [unit-resolution #333 #562]: #127
#614 := (or #347 #156 #601)
#604 := (or #156 #601)
#445 := (or #347 #604)
#496 := (iff #445 #614)
#569 := [rewrite]: #496
#446 := [quant-inst #125]: #445
#571 := [mp #446 #569]: #614
#572 := [unit-resolution #571 #443 #613 #566]: false
#573 := [lemma #572]: #347
#528 := [unit-resolution #709 #573]: #696
#567 := (or #662 #156 #577)
#584 := (or #156 #577)
#547 := (or #662 #584)
#550 := (iff #547 #567)
#551 := [rewrite]: #550
#548 := [quant-inst #125]: #547
#552 := [mp #548 #551]: #567
#529 := [unit-resolution #552 #443 #528]: #577
#556 := (or #581 #555)
#557 := [def-axiom]: #556
#518 := [unit-resolution #557 #529]: #555
#553 := (or #581 #575)
#554 := [def-axiom]: #553
#523 := [unit-resolution #554 #529]: #575
#549 := (or #669 #582 #583)
#560 := (or #669 #581)
#539 := (iff #560 #549)
#541 := [rewrite]: #539
#538 := [quant-inst #574]: #560
#542 := [mp #538 #541]: #549
[unit-resolution #542 #564 #523 #518]: false
unsat
c5872bdd32bd9e895950d088cbea7b6331bcd87a 148 0
#2 := false
decl f4 :: S2
#7 := f4
decl ?v1!0 :: (-> S2 S2)
#189 := (?v1!0 f4)
#191 := (= #189 f4)
#267 := (not #191)
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#275 := (f3 #189)
#190 := (= #275 f1)
#276 := (not #190)
#277 := (or #276 #191)
#268 := (not #277)
#10 := (:var 0 S2)
#11 := (f3 #10)
#605 := (pattern #11)
#104 := (?v1!0 #10)
#113 := (= #104 #10)
#105 := (f3 #104)
#101 := (= #105 f1)
#112 := (not #101)
#114 := (or #112 #113)
#115 := (not #114)
#12 := (= #11 f1)
#46 := (not #12)
#121 := (or #46 #115)
#612 := (forall (vars (?v0 S2)) (:pat #605) #121)
#125 := (forall (vars (?v0 S2)) #121)
#615 := (iff #125 #612)
#613 := (iff #121 #121)
#614 := [refl]: #613
#616 := [quant-intro #614]: #615
#16 := (:var 1 S2)
#17 := (= #10 #16)
#53 := (or #46 #17)
#56 := (forall (vars (?v1 S2)) #53)
#59 := (and #12 #56)
#62 := (exists (vars (?v0 S2)) #59)
#97 := (not #62)
#126 := (~ #97 #125)
#122 := (not #59)
#123 := (~ #122 #121)
#116 := (not #56)
#117 := (~ #116 #115)
#118 := [sk]: #117
#103 := (~ #46 #46)
#100 := [refl]: #103
#124 := [nnf-neg #100 #118]: #123
#127 := [nnf-neg #124]: #126
#13 := (= #10 f4)
#47 := (or #46 #13)
#50 := (forall (vars (?v0 S2)) #47)
#68 := (not #50)
#8 := (f3 f4)
#9 := (= #8 f1)
#77 := (not #9)
#86 := (or #77 #68 #62)
#89 := (not #86)
#18 := (implies #12 #17)
#19 := (forall (vars (?v1 S2)) #18)
#20 := (and #12 #19)
#21 := (exists (vars (?v0 S2)) #20)
#14 := (implies #12 #13)
#15 := (forall (vars (?v0 S2)) #14)
#22 := (implies #15 #21)
#23 := (implies #9 #22)
#24 := (not #23)
#92 := (iff #24 #89)
#69 := (or #68 #62)
#78 := (or #77 #69)
#83 := (not #78)
#90 := (iff #83 #89)
#87 := (iff #78 #86)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#84 := (iff #24 #83)
#81 := (iff #23 #78)
#74 := (implies #9 #69)
#79 := (iff #74 #78)
#80 := [rewrite]: #79
#75 := (iff #23 #74)
#72 := (iff #22 #69)
#65 := (implies #50 #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #22 #65)
#63 := (iff #21 #62)
#60 := (iff #20 #59)
#57 := (iff #19 #56)
#54 := (iff #18 #53)
#55 := [rewrite]: #54
#58 := [quant-intro #55]: #57
#61 := [monotonicity #58]: #60
#64 := [quant-intro #61]: #63
#51 := (iff #15 #50)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#52 := [quant-intro #49]: #51
#67 := [monotonicity #52 #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#82 := [trans #76 #80]: #81
#85 := [monotonicity #82]: #84
#93 := [trans #85 #91]: #92
#45 := [asserted]: #24
#94 := [mp #45 #93]: #89
#98 := [not-or-elim #94]: #97
#128 := [mp~ #98 #127]: #125
#617 := [mp #128 #616]: #612
#95 := [not-or-elim #94]: #9
#278 := (not #612)
#282 := (or #278 #77 #268)
#279 := (or #77 #268)
#261 := (or #278 #279)
#599 := (iff #261 #282)
#255 := [rewrite]: #599
#597 := [quant-inst #7]: #261
#386 := [mp #597 #255]: #282
#245 := [unit-resolution #386 #95 #617]: #268
#600 := (or #277 #267)
#601 := [def-axiom]: #600
#582 := [unit-resolution #601 #245]: #267
#593 := (or #277 #190)
#266 := [def-axiom]: #593
#592 := [unit-resolution #266 #245]: #190
#606 := (forall (vars (?v0 S2)) (:pat #605) #47)
#609 := (iff #50 #606)
#607 := (iff #47 #47)
#608 := [refl]: #607
#610 := [quant-intro #608]: #609
#110 := (~ #50 #50)
#108 := (~ #47 #47)
#109 := [refl]: #108
#111 := [nnf-pos #109]: #110
#96 := [not-or-elim #94]: #50
#102 := [mp~ #96 #111]: #50
#611 := [mp #102 #610]: #606
#598 := (not #606)
#604 := (or #598 #276 #191)
#594 := (or #598 #277)
#258 := (iff #594 #604)
#595 := [rewrite]: #258
#253 := [quant-inst #189]: #594
#254 := [mp #253 #595]: #604
[unit-resolution #254 #611 #592 #582]: false
unsat
0d91aeb4f1e5219f5da913cca278e0e7cef9a2ce 170 0
#2 := false
decl ?v0!0 :: S2
#97 := ?v0!0
decl ?v1!1 :: (-> S2 S2)
#296 := (?v1!1 ?v0!0)
#298 := (= #296 ?v0!0)
#621 := (not #298)
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#211 := (f3 #296)
#297 := (= #211 f1)
#212 := (not #297)
#289 := (or #212 #298)
#300 := (not #289)
#7 := (:var 0 S2)
#8 := (f3 #7)
#633 := (pattern #8)
#93 := (?v1!1 #7)
#110 := (= #93 #7)
#94 := (f3 #93)
#108 := (= #94 f1)
#109 := (not #108)
#111 := (or #109 #110)
#112 := (not #111)
#9 := (= #8 f1)
#57 := (not #9)
#118 := (or #57 #112)
#634 := (forall (vars (?v0 S2)) (:pat #633) #118)
#122 := (forall (vars (?v0 S2)) #118)
#637 := (iff #122 #634)
#635 := (iff #118 #118)
#636 := [refl]: #635
#638 := [quant-intro #636]: #637
#11 := (:var 1 S2)
#19 := (= #7 #11)
#58 := (or #57 #19)
#61 := (forall (vars (?v1 S2)) #58)
#64 := (and #9 #61)
#67 := (exists (vars (?v0 S2)) #64)
#86 := (not #67)
#123 := (~ #86 #122)
#119 := (not #64)
#120 := (~ #119 #118)
#113 := (not #61)
#114 := (~ #113 #112)
#115 := [sk]: #114
#106 := (~ #57 #57)
#107 := [refl]: #106
#121 := [nnf-neg #107 #115]: #120
#124 := [nnf-neg #121]: #123
#15 := (= #11 #7)
#12 := (f3 #11)
#13 := (= #12 f1)
#14 := (and #13 #9)
#47 := (not #14)
#48 := (or #47 #15)
#51 := (forall (vars (?v0 S2) (?v1 S2)) #48)
#10 := (exists (vars (?v0 S2)) #9)
#54 := (and #10 #51)
#73 := (not #54)
#74 := (or #73 #67)
#79 := (not #74)
#20 := (implies #9 #19)
#21 := (forall (vars (?v1 S2)) #20)
#22 := (and #9 #21)
#23 := (exists (vars (?v0 S2)) #22)
#16 := (implies #14 #15)
#17 := (forall (vars (?v0 S2) (?v1 S2)) #16)
#18 := (and #10 #17)
#24 := (implies #18 #23)
#25 := (not #24)
#80 := (iff #25 #79)
#77 := (iff #24 #74)
#70 := (implies #54 #67)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #24 #70)
#68 := (iff #23 #67)
#65 := (iff #22 #64)
#62 := (iff #21 #61)
#59 := (iff #20 #58)
#60 := [rewrite]: #59
#63 := [quant-intro #60]: #62
#66 := [monotonicity #63]: #65
#69 := [quant-intro #66]: #68
#55 := (iff #18 #54)
#52 := (iff #17 #51)
#49 := (iff #16 #48)
#50 := [rewrite]: #49
#53 := [quant-intro #50]: #52
#56 := [monotonicity #53]: #55
#72 := [monotonicity #56 #69]: #71
#78 := [trans #72 #76]: #77
#81 := [monotonicity #78]: #80
#46 := [asserted]: #25
#84 := [mp #46 #81]: #79
#87 := [not-or-elim #84]: #86
#125 := [mp~ #87 #124]: #122
#639 := [mp #125 #638]: #634
#98 := (f3 ?v0!0)
#99 := (= #98 f1)
#100 := (~ #10 #99)
#89 := [sk]: #100
#82 := [not-or-elim #84]: #54
#83 := [and-elim #82]: #10
#102 := [mp~ #83 #89]: #99
#210 := (not #99)
#303 := (not #634)
#282 := (or #303 #210 #300)
#301 := (or #210 #300)
#618 := (or #303 #301)
#276 := (iff #618 #282)
#407 := [rewrite]: #276
#620 := [quant-inst #97]: #618
#614 := [mp #620 #407]: #282
#600 := [unit-resolution #614 #102 #639]: #300
#622 := (or #289 #621)
#623 := [def-axiom]: #622
#307 := [unit-resolution #623 #600]: #621
#287 := (or #289 #297)
#288 := [def-axiom]: #287
#596 := [unit-resolution #288 #600]: #297
#626 := (pattern #12 #8)
#116 := (not #13)
#139 := (or #116 #57 #15)
#627 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #626) #139)
#144 := (forall (vars (?v0 S2) (?v1 S2)) #139)
#630 := (iff #144 #627)
#628 := (iff #139 #139)
#629 := [refl]: #628
#631 := [quant-intro #629]: #630
#145 := (iff #51 #144)
#142 := (iff #48 #139)
#117 := (or #116 #57)
#136 := (or #117 #15)
#140 := (iff #136 #139)
#141 := [rewrite]: #140
#137 := (iff #48 #136)
#134 := (iff #47 #117)
#126 := (not #117)
#129 := (not #126)
#132 := (iff #129 #117)
#133 := [rewrite]: #132
#130 := (iff #47 #129)
#127 := (iff #14 #126)
#128 := [rewrite]: #127
#131 := [monotonicity #128]: #130
#135 := [trans #131 #133]: #134
#138 := [monotonicity #135]: #137
#143 := [trans #138 #141]: #142
#146 := [quant-intro #143]: #145
#103 := (~ #51 #51)
#90 := (~ #48 #48)
#101 := [refl]: #90
#104 := [nnf-pos #101]: #103
#85 := [and-elim #82]: #51
#105 := [mp~ #85 #104]: #51
#147 := [mp #105 #146]: #144
#632 := [mp #147 #631]: #627
#611 := (not #627)
#250 := (or #611 #212 #210 #298)
#617 := (or #212 #210 #298)
#251 := (or #611 #617)
#610 := (iff #251 #250)
#613 := [rewrite]: #610
#612 := [quant-inst #296 #97]: #251
#599 := [mp #612 #613]: #250
[unit-resolution #599 #102 #632 #596 #307]: false
unsat
142a1362d1a72bfbc8fcd56ed6d2ef4df96159b7 169 0
#2 := false
decl ?v0!0 :: S2
#96 := ?v0!0
decl ?v1!1 :: (-> S2 S2)
#292 := (?v1!1 ?v0!0)
#294 := (= #292 ?v0!0)
#617 := (not #294)
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#207 := (f3 #292)
#293 := (= #207 f1)
#208 := (not #293)
#285 := (or #208 #294)
#296 := (not #285)
#7 := (:var 0 S2)
#8 := (f3 #7)
#622 := (pattern #8)
#127 := (?v1!1 #7)
#131 := (= #127 #7)
#128 := (f3 #127)
#129 := (= #128 f1)
#130 := (not #129)
#132 := (or #130 #131)
#133 := (not #132)
#9 := (= #8 f1)
#44 := (not #9)
#139 := (or #44 #133)
#629 := (forall (vars (?v0 S2)) (:pat #622) #139)
#142 := (forall (vars (?v0 S2)) #139)
#632 := (iff #142 #629)
#630 := (iff #139 #139)
#631 := [refl]: #630
#633 := [quant-intro #631]: #632
#10 := (:var 1 S2)
#11 := (= #7 #10)
#45 := (or #44 #11)
#48 := (forall (vars (?v1 S2)) #45)
#51 := (and #9 #48)
#60 := (not #51)
#106 := (forall (vars (?v0 S2)) #60)
#143 := (~ #106 #142)
#140 := (~ #60 #139)
#134 := (not #48)
#135 := (~ #134 #133)
#136 := [sk]: #135
#123 := (~ #44 #44)
#124 := [refl]: #123
#141 := [nnf-neg #124 #136]: #140
#144 := [nnf-pos #141]: #143
decl f4 :: S1
#16 := f4
#17 := (= f4 f1)
#61 := (or #60 #17)
#66 := (forall (vars (?v0 S2)) #61)
#107 := (iff #66 #106)
#104 := (iff #61 #60)
#99 := (or #60 false)
#102 := (iff #99 #60)
#103 := [rewrite]: #102
#100 := (iff #61 #99)
#97 := (iff #17 false)
#88 := (not #17)
#54 := (exists (vars (?v0 S2)) #51)
#69 := (and #54 #66)
#75 := (not #69)
#76 := (or #75 #17)
#81 := (not #76)
#12 := (implies #9 #11)
#13 := (forall (vars (?v1 S2)) #12)
#14 := (and #9 #13)
#18 := (implies #14 #17)
#19 := (forall (vars (?v0 S2)) #18)
#15 := (exists (vars (?v0 S2)) #14)
#20 := (and #15 #19)
#21 := (implies #20 #17)
#22 := (not #21)
#82 := (iff #22 #81)
#79 := (iff #21 #76)
#72 := (implies #69 #17)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #21 #72)
#70 := (iff #20 #69)
#67 := (iff #19 #66)
#64 := (iff #18 #61)
#57 := (implies #51 #17)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #18 #57)
#52 := (iff #14 #51)
#49 := (iff #13 #48)
#46 := (iff #12 #45)
#47 := [rewrite]: #46
#50 := [quant-intro #47]: #49
#53 := [monotonicity #50]: #52
#59 := [monotonicity #53]: #58
#65 := [trans #59 #63]: #64
#68 := [quant-intro #65]: #67
#55 := (iff #15 #54)
#56 := [quant-intro #53]: #55
#71 := [monotonicity #56 #68]: #70
#74 := [monotonicity #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80]: #82
#43 := [asserted]: #22
#86 := [mp #43 #83]: #81
#89 := [not-or-elim #86]: #88
#98 := [iff-false #89]: #97
#101 := [monotonicity #98]: #100
#105 := [trans #101 #103]: #104
#108 := [quant-intro #105]: #107
#84 := [not-or-elim #86]: #69
#87 := [and-elim #84]: #66
#95 := [mp #87 #108]: #106
#145 := [mp~ #95 #144]: #142
#634 := [mp #145 #633]: #629
#109 := (f3 ?v0!0)
#93 := (= #109 f1)
#94 := (= #7 ?v0!0)
#91 := (or #44 #94)
#92 := (forall (vars (?v1 S2)) #91)
#110 := (and #93 #92)
#111 := (~ #54 #110)
#119 := (~ #110 #110)
#117 := (~ #92 #92)
#115 := (~ #91 #91)
#116 := [refl]: #115
#118 := [nnf-pos #116]: #117
#113 := (~ #93 #93)
#114 := [refl]: #113
#120 := [monotonicity #114 #118]: #119
#112 := [sk]: #111
#121 := [trans #112 #120]: #111
#85 := [and-elim #84]: #54
#122 := [mp~ #85 #121]: #110
#125 := [and-elim #122]: #93
#206 := (not #93)
#299 := (not #629)
#278 := (or #299 #206 #296)
#297 := (or #206 #296)
#614 := (or #299 #297)
#272 := (iff #614 #278)
#403 := [rewrite]: #272
#616 := [quant-inst #96]: #614
#610 := [mp #616 #403]: #278
#599 := [unit-resolution #610 #125 #634]: #296
#618 := (or #285 #617)
#619 := [def-axiom]: #618
#600 := [unit-resolution #619 #599]: #617
#283 := (or #285 #293)
#284 := [def-axiom]: #283
#595 := [unit-resolution #284 #599]: #293
#623 := (forall (vars (?v1 S2)) (:pat #622) #91)
#626 := (iff #92 #623)
#624 := (iff #91 #91)
#625 := [refl]: #624
#627 := [quant-intro #625]: #626
#126 := [and-elim #122]: #92
#628 := [mp #126 #627]: #623
#621 := (not #623)
#611 := (or #621 #208 #294)
#270 := (or #621 #285)
#612 := (iff #270 #611)
#271 := [rewrite]: #612
#275 := [quant-inst #292]: #270
#613 := [mp #275 #271]: #611
[unit-resolution #613 #628 #595 #600]: false
unsat
85de22f5139d27f456b9708b8915cc94f19e85fe 76 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: (-> S2 S1)
decl f6 :: S2
#15 := f6
#19 := (f5 f6)
#20 := (= #19 f1)
#70 := (not #20)
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#8 := f4
#16 := (f3 f6 f4)
#17 := (= #16 f1)
#7 := (:var 0 S2)
#11 := (f5 #7)
#12 := (= #11 f1)
#9 := (f3 #7 f4)
#10 := (= #9 f1)
#44 := (not #10)
#45 := (or #44 #12)
#48 := (forall (vars (?v0 S2)) #45)
#51 := (and #48 #17)
#57 := (not #51)
#58 := (or #57 #20)
#63 := (not #58)
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#18 := (and #14 #17)
#21 := (implies #18 #20)
#22 := (not #21)
#64 := (iff #22 #63)
#61 := (iff #21 #58)
#54 := (implies #51 #20)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #21 #54)
#52 := (iff #18 #51)
#49 := (iff #14 #48)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#50 := [quant-intro #47]: #49
#53 := [monotonicity #50]: #52
#56 := [monotonicity #53]: #55
#62 := [trans #56 #60]: #61
#65 := [monotonicity #62]: #64
#43 := [asserted]: #22
#68 := [mp #43 #65]: #63
#71 := [not-or-elim #68]: #70
#66 := [not-or-elim #68]: #51
#69 := [and-elim #66]: #17
#557 := (pattern #11)
#556 := (pattern #9)
#558 := (forall (vars (?v0 S2)) (:pat #556 #557) #45)
#561 := (iff #48 #558)
#559 := (iff #45 #45)
#560 := [refl]: #559
#562 := [quant-intro #560]: #561
#83 := (~ #48 #48)
#81 := (~ #45 #45)
#82 := [refl]: #81
#84 := [nnf-pos #82]: #83
#67 := [and-elim #66]: #48
#73 := [mp~ #67 #84]: #48
#563 := [mp #73 #562]: #558
#140 := (not #17)
#142 := (not #558)
#228 := (or #142 #140 #20)
#226 := (or #140 #20)
#219 := (or #142 #226)
#231 := (iff #219 #228)
#232 := [rewrite]: #231
#230 := [quant-inst #15]: #219
#229 := [mp #230 #232]: #228
[unit-resolution #229 #563 #69 #71]: false
unsat
ff730e3fbc712bd1b0cb2a46bedef24362b618c7 74 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#8 := f4
decl f6 :: S2
#15 := f6
#18 := (f3 f6 f4)
#19 := (= #18 f1)
decl f5 :: (-> S2 S1)
#16 := (f5 f6)
#17 := (= #16 f1)
#20 := (and #17 #19)
#21 := (not #20)
#7 := (:var 0 S2)
#11 := (f5 #7)
#12 := (= #11 f1)
#9 := (f3 #7 f4)
#10 := (= #9 f1)
#13 := (and #10 #12)
#14 := (exists (vars (?v0 S2)) #13)
#22 := (or #14 #21)
#23 := (not #22)
#44 := [asserted]: #23
#49 := [not-or-elim #44]: #20
#51 := [and-elim #49]: #19
#50 := [and-elim #49]: #17
#556 := (pattern #11)
#555 := (pattern #9)
#65 := (not #12)
#64 := (not #10)
#66 := (or #64 #65)
#557 := (forall (vars (?v0 S2)) (:pat #555 #556) #66)
#73 := (forall (vars (?v0 S2)) #66)
#560 := (iff #73 #557)
#558 := (iff #66 #66)
#559 := [refl]: #558
#561 := [quant-intro #559]: #560
#59 := (not #13)
#62 := (forall (vars (?v0 S2)) #59)
#74 := (iff #62 #73)
#71 := (iff #59 #66)
#67 := (not #66)
#55 := (not #67)
#69 := (iff #55 #66)
#70 := [rewrite]: #69
#56 := (iff #59 #55)
#57 := (iff #13 #67)
#58 := [rewrite]: #57
#68 := [monotonicity #58]: #56
#72 := [trans #68 #70]: #71
#75 := [quant-intro #72]: #74
#47 := (not #14)
#46 := (~ #47 #62)
#60 := (~ #59 #59)
#61 := [refl]: #60
#52 := [nnf-neg #61]: #46
#48 := [not-or-elim #44]: #47
#63 := [mp~ #48 #52]: #62
#76 := [mp #63 #75]: #73
#562 := [mp #76 #561]: #557
#225 := (not #17)
#139 := (not #19)
#227 := (not #557)
#218 := (or #227 #139 #225)
#140 := (or #139 #225)
#229 := (or #227 #140)
#231 := (iff #229 #218)
#228 := [rewrite]: #231
#230 := [quant-inst #15]: #229
#232 := [mp #230 #228]: #218
[unit-resolution #232 #562 #50 #51]: false
unsat
e9bea58a61d26211f4c51dafc9afee93d49dc96f 26 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#12 := (not #11)
#13 := (or #11 #12)
#14 := (not #13)
#43 := (iff #14 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #14 #38)
#36 := (iff #13 true)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#35 := [asserted]: #14
[mp #35 #44]: false
unsat
969eb616732d66fd3a59354121995900f8f42332 27 0
#2 := false
#1 := true
#8 := (or false true)
#7 := (and true false)
#9 := (implies #7 #8)
#10 := (not #9)
#48 := (iff #10 false)
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #10 #43)
#41 := (iff #9 true)
#36 := (implies false true)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #9 #36)
#34 := (iff #8 true)
#35 := [rewrite]: #34
#32 := (iff #7 false)
#33 := [rewrite]: #32
#38 := [monotonicity #33 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#31 := [asserted]: #10
[mp #31 #49]: false
unsat
0554d9d3c0442590754bd0080e373209e9f303c4 23 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#7 := f4
#8 := (f3 f4)
#9 := (= #8 f1)
#10 := (iff #9 #9)
#11 := (not #10)
#40 := (iff #11 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #11 #35)
#33 := (iff #10 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#32 := [asserted]: #11
[mp #32 #41]: false
unsat
984bba573a128d0d85b1bac615cf60bd7590bfe3 25 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#10 := (= #9 f1)
#11 := (iff #10 #10)
#12 := (not #11)
#41 := (iff #12 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (iff #11 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#33 := [asserted]: #12
[mp #33 #42]: false
unsat
49ae3a9a230a943562434a3318ab9bef51520a37 24 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#10 := (forall (vars (?v0 S2)) #9)
#11 := (not #10)
#12 := (if #10 #10 #11)
#13 := (not #12)
#42 := (iff #13 false)
#1 := true
#37 := (not true)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #13 #37)
#35 := (iff #12 true)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#43 := [trans #39 #41]: #42
#34 := [asserted]: #13
[mp #34 #43]: false
unsat
dc53d4d1fa6be018411a9832462fb78b5005d0d6 123 0
#2 := false
decl f4 :: S2
#8 := f4
decl f3 :: S2
#7 := f3
#9 := (= f3 f4)
decl inj!0 :: (-> S3 S2)
decl f6 :: (-> S2 S3)
#28 := (f6 f4)
#179 := (inj!0 #28)
#265 := (= #179 f4)
#18 := (:var 0 S2)
#19 := (f6 #18)
#112 := (pattern #19)
#111 := (inj!0 #19)
#108 := (= #111 #18)
#594 := (forall (vars (k!0 S2)) (:pat #112) #108)
#113 := (forall (vars (k!0 S2)) (:pat #112) #108)
#595 := (iff #113 #594)
#597 := (iff #594 #594)
#598 := [rewrite]: #597
#596 := [rewrite]: #595
#599 := [trans #596 #598]: #595
#16 := (:var 1 S2)
#21 := (= #18 #16)
#17 := (f6 #16)
#20 := (= #17 #19)
#54 := (not #20)
#55 := (or #54 #21)
#58 := (forall (vars (?v0 S2) (?v1 S2)) #55)
#114 := (iff #58 #113)
#115 := [rewrite]: #114
#118 := (~ #58 #58)
#116 := (~ #55 #55)
#117 := [refl]: #116
#119 := [nnf-pos #117]: #118
decl f5 :: S2
#11 := f5
#14 := (= f4 f5)
#15 := (not #14)
#12 := (= f3 f5)
#13 := (not #12)
#10 := (not #9)
#82 := (and #10 #13 #15 #58)
#27 := (f6 f3)
#29 := (= #27 #28)
#30 := (not #29)
#85 := (not #82)
#88 := (or #85 #30)
#91 := (not #88)
#22 := (implies #20 #21)
#23 := (forall (vars (?v0 S2) (?v1 S2)) #22)
#24 := (and #15 #23)
#25 := (and #13 #24)
#26 := (and #10 #25)
#31 := (implies #26 #30)
#32 := (not #31)
#94 := (iff #32 #91)
#61 := (and #15 #58)
#64 := (and #13 #61)
#67 := (and #10 #64)
#73 := (not #67)
#74 := (or #73 #30)
#79 := (not #74)
#92 := (iff #79 #91)
#89 := (iff #74 #88)
#86 := (iff #73 #85)
#83 := (iff #67 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#90 := [monotonicity #87]: #89
#93 := [monotonicity #90]: #92
#80 := (iff #32 #79)
#77 := (iff #31 #74)
#70 := (implies #67 #30)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #31 #70)
#68 := (iff #26 #67)
#65 := (iff #25 #64)
#62 := (iff #24 #61)
#59 := (iff #23 #58)
#56 := (iff #22 #55)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#78 := [trans #72 #76]: #77
#81 := [monotonicity #78]: #80
#95 := [trans #81 #93]: #94
#53 := [asserted]: #32
#96 := [mp #53 #95]: #91
#97 := [not-or-elim #96]: #82
#101 := [and-elim #97]: #58
#110 := [mp~ #101 #119]: #58
#109 := [mp #110 #115]: #113
#600 := [mp #109 #599]: #594
#180 := (not #594)
#270 := (or #180 #265)
#267 := [quant-inst #8]: #270
#250 := [unit-resolution #267 #600]: #265
#590 := (= f3 #179)
#178 := (inj!0 #27)
#256 := (= #178 #179)
#244 := (= #179 #178)
#269 := (= #28 #27)
#102 := [not-or-elim #96]: #29
#271 := [symm #102]: #269
#375 := [monotonicity #271]: #244
#589 := [symm #375]: #256
#582 := (= f3 #178)
#264 := (= #178 f3)
#266 := (or #180 #264)
#257 := [quant-inst #7]: #266
#268 := [unit-resolution #257 #600]: #264
#255 := [symm #268]: #582
#591 := [trans #255 #589]: #590
#592 := [trans #591 #250]: #9
#98 := [and-elim #97]: #10
[unit-resolution #98 #592]: false
unsat
86ad856b2260c7ba2d06c5558baa33155c591c5a 93 0
#2 := false
decl f5 :: S3
#17 := f5
decl f4 :: S3
#16 := f4
#18 := (= f4 f5)
decl inj!0 :: (-> S2 S4 S3)
decl f3 :: (-> S2 S3 S4)
decl f6 :: S2
#21 := f6
#23 := (f3 f6 f5)
#154 := (inj!0 f6 #23)
#240 := (= #154 f5)
#8 := (:var 1 S3)
#78 := (:var 0 S2)
#89 := (f3 #78 #8)
#83 := (pattern #89)
#79 := (inj!0 #78 #89)
#80 := (= #79 #8)
#84 := (forall (vars (k!0 S3) (k!1 S2)) (:pat #83) #80)
#10 := (:var 0 S3)
#13 := (= #8 #10)
#7 := (:var 2 S2)
#11 := (f3 #7 #10)
#9 := (f3 #7 #8)
#12 := (= #9 #11)
#49 := (not #12)
#50 := (or #49 #13)
#53 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #50)
#81 := (iff #53 #84)
#82 := [rewrite]: #81
#87 := (~ #53 #53)
#85 := (~ #50 #50)
#86 := [refl]: #85
#88 := [nnf-pos #86]: #87
#19 := (not #18)
#56 := (and #53 #19)
#22 := (f3 f6 f4)
#24 := (= #22 #23)
#25 := (not #24)
#62 := (not #56)
#63 := (or #62 #25)
#68 := (not #63)
#14 := (implies #12 #13)
#15 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #14)
#20 := (and #15 #19)
#26 := (implies #20 #25)
#27 := (not #26)
#69 := (iff #27 #68)
#66 := (iff #26 #63)
#59 := (implies #56 #25)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #26 #59)
#57 := (iff #20 #56)
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #55]: #57
#61 := [monotonicity #58]: #60
#67 := [trans #61 #65]: #66
#70 := [monotonicity #67]: #69
#48 := [asserted]: #27
#73 := [mp #48 #70]: #68
#71 := [not-or-elim #73]: #56
#72 := [and-elim #71]: #53
#77 := [mp~ #72 #88]: #53
#90 := [mp #77 #82]: #84
#155 := (not #84)
#245 := (or #155 #240)
#242 := [quant-inst #17 #21]: #245
#225 := [unit-resolution #242 #90]: #240
#565 := (= f4 #154)
#153 := (inj!0 f6 #22)
#231 := (= #153 #154)
#219 := (= #154 #153)
#244 := (= #23 #22)
#75 := [not-or-elim #73]: #24
#246 := [symm #75]: #244
#350 := [monotonicity #246]: #219
#564 := [symm #350]: #231
#557 := (= f4 #153)
#239 := (= #153 f4)
#241 := (or #155 #239)
#232 := [quant-inst #16 #21]: #241
#243 := [unit-resolution #232 #90]: #239
#230 := [symm #243]: #557
#566 := [trans #230 #564]: #565
#567 := [trans #566 #225]: #18
#74 := [and-elim #71]: #19
[unit-resolution #74 #567]: false
unsat
dbb9fd47289aae1ee4ef07ea6bbb0529555aea58 91 0
#2 := false
decl f5 :: S2
#17 := f5
decl f4 :: S2
#16 := f4
#18 := (= f4 f5)
decl inj!0 :: (-> S3 S4 S2)
decl f3 :: (-> S2 S3 S4)
decl f6 :: S3
#21 := f6
#23 := (f3 f5 f6)
#152 := (inj!0 f6 #23)
#238 := (= #152 f5)
#8 := (:var 1 S3)
#10 := (:var 0 S2)
#11 := (f3 #10 #8)
#79 := (pattern #11)
#78 := (inj!0 #8 #11)
#89 := (= #78 #10)
#80 := (forall (vars (k!0 S3) (k!1 S2)) (:pat #79) #89)
#7 := (:var 2 S2)
#13 := (= #7 #10)
#9 := (f3 #7 #8)
#12 := (= #9 #11)
#49 := (not #12)
#50 := (or #49 #13)
#53 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #50)
#83 := (iff #53 #80)
#84 := [rewrite]: #83
#87 := (~ #53 #53)
#85 := (~ #50 #50)
#86 := [refl]: #85
#88 := [nnf-pos #86]: #87
#19 := (not #18)
#56 := (and #53 #19)
#22 := (f3 f4 f6)
#24 := (= #22 #23)
#25 := (not #24)
#62 := (not #56)
#63 := (or #62 #25)
#68 := (not #63)
#14 := (implies #12 #13)
#15 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #14)
#20 := (and #15 #19)
#26 := (implies #20 #25)
#27 := (not #26)
#69 := (iff #27 #68)
#66 := (iff #26 #63)
#59 := (implies #56 #25)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #26 #59)
#57 := (iff #20 #56)
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #55]: #57
#61 := [monotonicity #58]: #60
#67 := [trans #61 #65]: #66
#70 := [monotonicity #67]: #69
#48 := [asserted]: #27
#73 := [mp #48 #70]: #68
#71 := [not-or-elim #73]: #56
#72 := [and-elim #71]: #53
#77 := [mp~ #72 #88]: #53
#81 := [mp #77 #84]: #80
#153 := (not #80)
#243 := (or #153 #238)
#240 := [quant-inst #21 #17]: #243
#223 := [unit-resolution #240 #81]: #238
#563 := (= f4 #152)
#151 := (inj!0 f6 #22)
#229 := (= #151 #152)
#217 := (= #152 #151)
#242 := (= #23 #22)
#75 := [not-or-elim #73]: #24
#244 := [symm #75]: #242
#348 := [monotonicity #244]: #217
#562 := [symm #348]: #229
#555 := (= f4 #151)
#237 := (= #151 f4)
#239 := (or #153 #237)
#230 := [quant-inst #21 #16]: #239
#241 := [unit-resolution #230 #81]: #237
#228 := [symm #241]: #555
#564 := [trans #228 #562]: #563
#565 := [trans #564 #223]: #18
#74 := [and-elim #71]: #19
[unit-resolution #74 #565]: false
unsat
2999a68dda8007862d764357a968ba4d913e9986 26 0
#2 := false
decl f5 :: S2
#13 := f5
decl f3 :: (-> S3 S2 S2)
decl f4 :: S3
#7 := f4
#14 := (f3 f4 f5)
#15 := (= #14 f5)
#16 := (not #15)
#38 := [asserted]: #16
#8 := (:var 0 S2)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#11 := (= #9 #8)
#12 := (forall (vars (?v0 S2)) (:pat #10) #11)
#48 := (~ #12 #12)
#46 := (~ #11 #11)
#47 := [refl]: #46
#49 := [nnf-pos #47]: #48
#37 := [asserted]: #12
#40 := [mp~ #37 #49]: #12
#193 := (not #12)
#186 := (or #193 #15)
#197 := [quant-inst #13]: #186
[unit-resolution #197 #40 #38]: false
unsat
57a110a2a64d6237b6a312b1d9c36299cd964fe9 30 0
#2 := false
decl f4 :: (-> S3 S4)
decl f6 :: S3
#16 := f6
#17 := (f4 f6)
decl f3 :: (-> S2 S4)
decl f5 :: S2
#14 := f5
#15 := (f3 f5)
#18 := (= #15 #17)
#19 := (not #18)
#41 := [asserted]: #19
#9 := (:var 0 S3)
#10 := (f4 #9)
#7 := (:var 1 S2)
#8 := (f3 #7)
#11 := (pattern #8 #10)
#12 := (= #8 #10)
#13 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #11) #12)
#51 := (~ #13 #13)
#49 := (~ #12 #12)
#50 := [refl]: #49
#52 := [nnf-pos #50]: #51
#40 := [asserted]: #13
#43 := [mp~ #40 #52]: #13
#111 := (not #13)
#197 := (or #111 #18)
#112 := [quant-inst #14 #16]: #197
[unit-resolution #112 #43 #41]: false
unsat
504b592c818b50152d0a32c8e6416d9f077ac9e1 47 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: (-> S2 S1)
decl f5 :: S2
#15 := f5
#18 := (f4 f5)
#19 := (= #18 f1)
#20 := (not #19)
#50 := [asserted]: #20
decl f3 :: (-> S2 S1)
#16 := (f3 f5)
#17 := (= #16 f1)
#49 := [asserted]: #17
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (pattern #8)
#11 := (f4 #7)
#12 := (= #11 f1)
#10 := (= #8 f1)
#42 := (not #10)
#43 := (or #42 #12)
#46 := (forall (vars (?v0 S2)) (:pat #9) #43)
#63 := (~ #46 #46)
#61 := (~ #43 #43)
#62 := [refl]: #61
#64 := [nnf-pos #62]: #63
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) (:pat #9) #13)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#45 := [rewrite]: #44
#48 := [quant-intro #45]: #47
#41 := [asserted]: #14
#51 := [mp #41 #48]: #46
#53 := [mp~ #51 #64]: #46
#120 := (not #17)
#122 := (not #46)
#208 := (or #122 #120 #19)
#206 := (or #120 #19)
#199 := (or #122 #206)
#211 := (iff #199 #208)
#212 := [rewrite]: #211
#210 := [quant-inst #15]: #199
#209 := [mp #210 #212]: #208
[unit-resolution #209 #53 #49 #50]: false
unsat
2f0e1a7b2581f301956cfc589414e25e013c2022 80 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: (-> S2 S1)
decl f6 :: S2
#18 := f6
#23 := (f5 f6)
#24 := (= #23 f1)
#25 := (not #24)
#57 := [asserted]: #25
decl f4 :: (-> S2 S1)
#21 := (f4 f6)
#22 := (= #21 f1)
#55 := [asserted]: #22
decl f3 :: (-> S2 S1)
#19 := (f3 f6)
#20 := (= #19 f1)
#54 := [asserted]: #20
#7 := (:var 0 S2)
#9 := (f4 #7)
#8 := (f3 #7)
#10 := (pattern #8 #9)
#14 := (f5 #7)
#15 := (= #14 f1)
#12 := (= #9 f1)
#73 := (not #12)
#11 := (= #8 f1)
#60 := (not #11)
#80 := (or #60 #73 #15)
#85 := (forall (vars (?v0 S2)) (:pat #10) #80)
#13 := (and #11 #12)
#47 := (not #13)
#48 := (or #47 #15)
#51 := (forall (vars (?v0 S2)) (:pat #10) #48)
#86 := (iff #51 #85)
#83 := (iff #48 #80)
#61 := (or #60 #73)
#77 := (or #61 #15)
#81 := (iff #77 #80)
#82 := [rewrite]: #81
#78 := (iff #48 #77)
#75 := (iff #47 #61)
#62 := (not #61)
#65 := (not #62)
#64 := (iff #65 #61)
#74 := [rewrite]: #64
#66 := (iff #47 #65)
#67 := (iff #13 #62)
#68 := [rewrite]: #67
#63 := [monotonicity #68]: #66
#76 := [trans #63 #74]: #75
#79 := [monotonicity #76]: #78
#84 := [trans #79 #82]: #83
#87 := [quant-intro #84]: #86
#71 := (~ #51 #51)
#69 := (~ #48 #48)
#70 := [refl]: #69
#72 := [nnf-pos #70]: #71
#16 := (implies #13 #15)
#17 := (forall (vars (?v0 S2)) (:pat #10) #16)
#52 := (iff #17 #51)
#49 := (iff #16 #48)
#50 := [rewrite]: #49
#53 := [quant-intro #50]: #52
#46 := [asserted]: #17
#56 := [mp #46 #53]: #51
#59 := [mp~ #56 #72]: #51
#88 := [mp #59 #87]: #85
#237 := (not #22)
#151 := (not #20)
#239 := (not #85)
#230 := (or #239 #151 #237 #24)
#152 := (or #151 #237 #24)
#241 := (or #239 #152)
#243 := (iff #241 #230)
#240 := [rewrite]: #243
#242 := [quant-inst #18]: #241
#244 := [mp #242 #240]: #230
[unit-resolution #244 #88 #54 #55 #57]: false
unsat
7566f2da21c88f266bea2fe10fd785422cefa613 94 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl f6 :: S2
#20 := f6
#21 := (f3 f6)
#22 := (= #21 f1)
#145 := (not #22)
decl f5 :: (-> S2 S1)
#26 := (f5 f6)
#27 := (= #26 f1)
#231 := (or #145 #27)
decl f4 :: (-> S2 S1)
#23 := (f4 f6)
#24 := (= #23 f1)
#232 := (not #24)
#147 := (or #232 #27)
#233 := (not #147)
#146 := (not #231)
#224 := (or #146 #233)
#235 := (not #224)
#236 := [hypothesis]: #224
#7 := (:var 0 S2)
#10 := (f4 #7)
#11 := (pattern #10)
#8 := (f3 #7)
#9 := (pattern #8)
#13 := (f5 #7)
#14 := (= #13 f1)
#16 := (= #10 f1)
#54 := (not #16)
#55 := (or #54 #14)
#80 := (not #55)
#12 := (= #8 f1)
#50 := (not #12)
#51 := (or #50 #14)
#69 := (not #51)
#70 := (or #69 #80)
#71 := (not #70)
#72 := (forall (vars (?v0 S2)) (:pat #9 #11) #71)
#58 := (and #51 #55)
#61 := (forall (vars (?v0 S2)) (:pat #9 #11) #58)
#73 := (iff #61 #72)
#74 := (iff #58 #71)
#75 := [rewrite]: #74
#81 := [quant-intro #75]: #73
#78 := (~ #61 #61)
#76 := (~ #58 #58)
#77 := [refl]: #76
#79 := [nnf-pos #77]: #78
#17 := (implies #16 #14)
#15 := (implies #12 #14)
#18 := (and #15 #17)
#19 := (forall (vars (?v0 S2)) (:pat #9 #11) #18)
#62 := (iff #19 #61)
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#57 := [rewrite]: #56
#52 := (iff #15 #51)
#53 := [rewrite]: #52
#60 := [monotonicity #53 #57]: #59
#63 := [quant-intro #60]: #62
#49 := [asserted]: #19
#66 := [mp #49 #63]: #61
#68 := [mp~ #66 #79]: #61
#82 := [mp #68 #81]: #72
#234 := (not #72)
#238 := (or #234 #235)
#217 := [quant-inst #20]: #238
#237 := [unit-resolution #217 #82 #236]: false
#552 := [lemma #237]: #235
#560 := (or #224 #231)
#550 := [def-axiom]: #560
#194 := [unit-resolution #550 #552]: #231
#536 := (or #146 #145)
#28 := (not #27)
#65 := [asserted]: #28
#549 := (or #146 #145 #27)
#222 := [def-axiom]: #549
#198 := [unit-resolution #222 #65]: #536
#199 := [unit-resolution #198 #194]: #145
#209 := (or #224 #147)
#214 := [def-axiom]: #209
#200 := [unit-resolution #214 #552]: #147
#201 := (or #233 #232)
#559 := (or #233 #232 #27)
#554 := [def-axiom]: #559
#538 := [unit-resolution #554 #65]: #201
#539 := [unit-resolution #538 #200]: #232
#25 := (or #22 #24)
#64 := [asserted]: #25
[unit-resolution #64 #539 #199]: false
unsat
83f372862020f387ac902abe14c65133bfb11c52 47 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: (-> S2 S1)
decl f5 :: S2
#16 := f5
#19 := (f4 f5)
#20 := (= #19 f1)
#21 := (not #20)
#51 := [asserted]: #21
decl f3 :: (-> S2 S1)
#17 := (f3 f5)
#18 := (= #17 f1)
#50 := [asserted]: #18
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (pattern #8)
#12 := (f4 #7)
#13 := (= #12 f1)
#11 := (= #8 f1)
#43 := (not #11)
#44 := (or #43 #13)
#47 := (forall (vars (?v0 S2)) (:pat #9) #44)
#64 := (~ #47 #47)
#62 := (~ #44 #44)
#63 := [refl]: #62
#65 := [nnf-pos #63]: #64
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2)) (:pat #9) #14)
#48 := (iff #15 #47)
#45 := (iff #14 #44)
#46 := [rewrite]: #45
#49 := [quant-intro #46]: #48
#42 := [asserted]: #15
#52 := [mp #42 #49]: #47
#54 := [mp~ #52 #65]: #47
#120 := (not #18)
#122 := (not #47)
#208 := (or #122 #120 #20)
#206 := (or #120 #20)
#199 := (or #122 #206)
#211 := (iff #199 #208)
#212 := [rewrite]: #211
#210 := [quant-inst #16]: #199
#209 := [mp #210 #212]: #208
[unit-resolution #209 #54 #50 #51]: false
unsat
7f77972298a74beb29a94a34ab2a10ec8952f699 54 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: (-> S2 S1)
decl f5 :: S2
#15 := f5
#18 := (f4 f5)
#19 := (= #18 f1)
#20 := (not #19)
#50 := [asserted]: #20
decl f3 :: (-> S2 S1)
#16 := (f3 f5)
#17 := (= #16 f1)
#49 := [asserted]: #17
#8 := (:var 0 S2)
#11 := (f4 #8)
#536 := (pattern #11)
#9 := (f3 #8)
#535 := (pattern #9)
#12 := (= #11 f1)
#10 := (= #9 f1)
#42 := (not #10)
#43 := (or #42 #12)
#537 := (forall (vars (?v0 S2)) (:pat #535 #536) #43)
#46 := (forall (vars (?v0 S2)) #43)
#540 := (iff #46 #537)
#538 := (iff #43 #43)
#539 := [refl]: #538
#541 := [quant-intro #539]: #540
#63 := (~ #46 #46)
#61 := (~ #43 #43)
#62 := [refl]: #61
#64 := [nnf-pos #62]: #63
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#45 := [rewrite]: #44
#48 := [quant-intro #45]: #47
#41 := [asserted]: #14
#51 := [mp #41 #48]: #46
#53 := [mp~ #51 #64]: #46
#542 := [mp #53 #541]: #537
#119 := (not #17)
#121 := (not #537)
#207 := (or #121 #119 #19)
#205 := (or #119 #19)
#198 := (or #121 #205)
#210 := (iff #198 #207)
#211 := [rewrite]: #210
#209 := [quant-inst #15]: #198
#208 := [mp #209 #211]: #207
[unit-resolution #208 #542 #49 #50]: false
unsat
9b5c16c73032091e1ec7375b17805aa94497d6a1 16 0
#2 := false
#1 := true
#7 := (implies true true)
#8 := (not #7)
#37 := (iff #8 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #8 #32)
#30 := (iff #7 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #8
[mp #29 #38]: false
unsat
4c88c1927abd3263418bbec2ea6a27c312c22645 16 0
#2 := false
#7 := (implies false false)
#8 := (not #7)
#37 := (iff #8 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #8 #32)
#30 := (iff #7 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #8
[mp #29 #38]: false
unsat
2947b9fb81e1118b8d74090c78db2d5a21b405bf 23 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#7 := f4
#8 := (f3 f4)
#9 := (= #8 f1)
#10 := (implies #9 #9)
#11 := (not #10)
#40 := (iff #11 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #11 #35)
#33 := (iff #10 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#32 := [asserted]: #11
[mp #32 #41]: false
unsat
d21a861104797656b2243093005bad40c57dc562 34 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#12 := (implies #8 #11)
#13 := (not #12)
#51 := (iff #13 false)
#35 := (not #8)
#36 := (or #35 #11)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#34 := [asserted]: #13
[mp #34 #52]: false
unsat
27d2c4925d91cba6878c40dc50ee04811f3ebdce 34 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#11 := (or #10 #8)
#12 := (implies #8 #11)
#13 := (not #12)
#51 := (iff #13 false)
#35 := (not #8)
#36 := (or #35 #11)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#34 := [asserted]: #13
[mp #34 #52]: false
unsat
9cdbc92a317e7d7c328d4e9ec144f4d7f38bfbb4 42 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#12 := (implies #8 #11)
#9 := (not #8)
#13 := (implies #9 #12)
#14 := (not #13)
#59 := (iff #14 false)
#36 := (or #9 #11)
#42 := (or #8 #36)
#47 := (not #42)
#57 := (iff #47 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #47 #52)
#50 := (iff #42 true)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#48 := (iff #14 #47)
#45 := (iff #13 #42)
#39 := (implies #9 #36)
#43 := (iff #39 #42)
#44 := [rewrite]: #43
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#49 := [monotonicity #46]: #48
#60 := [trans #49 #58]: #59
#35 := [asserted]: #14
[mp #35 #60]: false
unsat
450b6e38cc400f1592be414b6b28c4b433488131 75 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#38 := (not #8)
#39 := (or #38 #10)
#95 := (iff #39 false)
#90 := (or false false)
#93 := (iff #90 false)
#94 := [rewrite]: #93
#91 := (iff #39 #90)
#81 := (iff #10 false)
#11 := (not #10)
#42 := (not #39)
#64 := (or #38 #10 #42)
#67 := (not #64)
#12 := (implies #8 #10)
#13 := (not #12)
#14 := (implies #11 #13)
#15 := (implies #8 #14)
#16 := (not #15)
#70 := (iff #16 #67)
#48 := (or #10 #42)
#56 := (or #38 #48)
#61 := (not #56)
#68 := (iff #61 #67)
#65 := (iff #56 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#62 := (iff #16 #61)
#59 := (iff #15 #56)
#53 := (implies #8 #48)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#45 := (implies #11 #42)
#49 := (iff #45 #48)
#50 := [rewrite]: #49
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#52 := [trans #47 #50]: #51
#55 := [monotonicity #52]: #54
#60 := [trans #55 #58]: #59
#63 := [monotonicity #60]: #62
#71 := [trans #63 #69]: #70
#37 := [asserted]: #16
#72 := [mp #37 #71]: #67
#74 := [not-or-elim #72]: #11
#82 := [iff-false #74]: #81
#88 := (iff #38 false)
#1 := true
#83 := (not true)
#86 := (iff #83 false)
#87 := [rewrite]: #86
#84 := (iff #38 #83)
#79 := (iff #8 true)
#73 := [not-or-elim #72]: #8
#80 := [iff-true #73]: #79
#85 := [monotonicity #80]: #84
#89 := [trans #85 #87]: #88
#92 := [monotonicity #89 #82]: #91
#96 := [trans #92 #94]: #95
#75 := [not-or-elim #72]: #39
[mp #75 #96]: false
unsat
5c79202855f7fb0e7df333ffc44048260e2027d9 43 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: (-> S2 S1)
decl f4 :: S2
#7 := f4
#10 := (f5 f4)
#11 := (= #10 f1)
decl f3 :: (-> S2 S1)
#8 := (f3 f4)
#9 := (= #8 f1)
#12 := (iff #9 #11)
#47 := (not #12)
#62 := (iff #47 false)
#1 := true
#57 := (not true)
#60 := (iff #57 false)
#61 := [rewrite]: #60
#58 := (iff #47 #57)
#55 := (iff #12 true)
#36 := (not #9)
#37 := (iff #36 #11)
#44 := (not #37)
#52 := (iff #44 #12)
#53 := [rewrite]: #52
#38 := (or #37 #12)
#41 := (not #38)
#13 := (implies #12 #12)
#14 := (not #13)
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#35 := [asserted]: #14
#46 := [mp #35 #43]: #41
#45 := [not-or-elim #46]: #44
#54 := [mp #45 #53]: #12
#56 := [iff-true #54]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#48 := [not-or-elim #46]: #47
[mp #48 #63]: false
unsat
d9f29ce899862b64fac95c45fd1c9213e07c6a55 50 0
#2 := false
decl f5 :: S2
#10 := f5
decl f3 :: S2
#7 := f3
#12 := (= f3 f5)
decl f4 :: S2
#8 := f4
#11 := (= f4 f5)
#77 := (iff #11 #12)
#75 := (iff #12 #11)
#9 := (= f3 f4)
#37 := (not #11)
#44 := (not #9)
#53 := (or #44 #37 #12)
#56 := (not #53)
#13 := (implies #11 #12)
#14 := (implies #9 #13)
#15 := (not #14)
#59 := (iff #15 #56)
#38 := (or #37 #12)
#45 := (or #44 #38)
#50 := (not #45)
#57 := (iff #50 #56)
#54 := (iff #45 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#60 := [trans #52 #58]: #59
#36 := [asserted]: #15
#61 := [mp #36 #60]: #56
#62 := [not-or-elim #61]: #9
#76 := [monotonicity #62]: #75
#78 := [symm #76]: #77
#63 := [not-or-elim #61]: #11
#73 := [mp #63 #78]: #12
#64 := (not #12)
#65 := [not-or-elim #61]: #64
[unit-resolution #65 #73]: false
unsat
1ef8c48f30160deabb1afaa941172d3fdc476c91 27 0
#2 := false
decl f5 :: (-> S2 S3)
decl f4 :: S2
#8 := f4
#11 := (f5 f4)
decl f3 :: S2
#7 := f3
#10 := (f5 f3)
#12 := (= #10 #11)
#9 := (= f3 f4)
#36 := (not #9)
#37 := (or #36 #12)
#40 := (not #37)
#13 := (implies #9 #12)
#14 := (not #13)
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #14
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #9
#54 := [monotonicity #43]: #12
#44 := (not #12)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #54]: false
unsat
1df4d0f227ca61b0473875213498c8bd2447ee70 55 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1 S1)
decl f5 :: S1
#12 := f5
decl f4 :: S2
#7 := f4
#13 := (f3 f4 f5)
#14 := (= #13 f1)
#57 := (not #14)
#15 := (= f5 f1)
#8 := (:var 0 S1)
#9 := (f3 f4 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S1)) #10)
#40 := (not #11)
#47 := (or #40 #14 #15)
#50 := (not #47)
#16 := (or #14 #15)
#17 := (implies #11 #16)
#18 := (not #17)
#53 := (iff #18 #50)
#41 := (or #40 #16)
#44 := (not #41)
#51 := (iff #44 #50)
#48 := (iff #41 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#54 := [trans #46 #52]: #53
#39 := [asserted]: #18
#55 := [mp #39 #54]: #50
#58 := [not-or-elim #55]: #57
#545 := (pattern #9)
#546 := (forall (vars (?v0 S1)) (:pat #545) #10)
#549 := (iff #11 #546)
#547 := (iff #10 #10)
#548 := [refl]: #547
#550 := [quant-intro #548]: #549
#72 := (~ #11 #11)
#70 := (~ #10 #10)
#71 := [refl]: #70
#73 := [nnf-pos #71]: #72
#56 := [not-or-elim #55]: #11
#62 := [mp~ #56 #73]: #11
#551 := [mp #62 #550]: #546
#215 := (not #546)
#216 := (or #215 #14)
#208 := [quant-inst #12]: #216
[unit-resolution #208 #551 #58]: false
unsat
4d29349a83c88fd119fed66c5796e61d5e6eb4b7 83 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S2 S1)
decl ?v0!0 :: S2
#54 := ?v0!0
#63 := (f3 ?v0!0 ?v0!0)
#55 := (= #63 f1)
#56 := (not #55)
#8 := (:var 0 S2)
#15 := (f3 #8 #8)
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S2)) #16)
#49 := (not #17)
#64 := (~ #49 #56)
#65 := [sk]: #64
#7 := (:var 1 S2)
#11 := (f3 #8 #7)
#12 := (= #11 f1)
#9 := (f3 #7 #8)
#10 := (= #9 f1)
#13 := (and #10 #12)
#14 := (forall (vars (?v0 S2) (?v1 S2)) #13)
#41 := (not #14)
#42 := (or #41 #17)
#45 := (not #42)
#18 := (implies #14 #17)
#19 := (not #18)
#46 := (iff #19 #45)
#43 := (iff #18 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#40 := [asserted]: #19
#50 := [mp #40 #47]: #45
#51 := [not-or-elim #50]: #49
#68 := [mp~ #51 #65]: #56
#556 := (pattern #11)
#555 := (pattern #9)
#67 := (not #12)
#66 := (not #10)
#69 := (or #66 #67)
#70 := (not #69)
#557 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #555 #556) #70)
#73 := (forall (vars (?v0 S2) (?v1 S2)) #70)
#560 := (iff #73 #557)
#558 := (iff #70 #70)
#559 := [refl]: #558
#561 := [quant-intro #559]: #560
#74 := (iff #14 #73)
#71 := (iff #13 #70)
#72 := [rewrite]: #71
#75 := [quant-intro #72]: #74
#61 := (~ #14 #14)
#59 := (~ #13 #13)
#60 := [refl]: #59
#62 := [nnf-pos #60]: #61
#48 := [not-or-elim #50]: #14
#53 := [mp~ #48 #62]: #14
#76 := [mp #53 #75]: #73
#562 := [mp #76 #561]: #557
#232 := (not #557)
#211 := (or #232 #55)
#139 := (or #56 #56)
#225 := (not #139)
#547 := (or #232 #225)
#205 := (iff #547 #211)
#543 := (iff #211 #211)
#216 := [rewrite]: #543
#231 := (iff #225 #55)
#141 := (not #56)
#229 := (iff #141 #55)
#230 := [rewrite]: #229
#227 := (iff #225 #141)
#140 := (iff #139 #56)
#226 := [rewrite]: #140
#218 := [monotonicity #226]: #227
#228 := [trans #218 #230]: #231
#336 := [monotonicity #228]: #205
#217 := [trans #336 #216]: #205
#549 := [quant-inst #54 #54]: #547
#550 := [mp #549 #217]: #211
[unit-resolution #550 #562 #68]: false
unsat
263480c8c5909524c36f6198f60c623fbcfc953d 41 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#64 := (iff #11 false)
#59 := (or false false)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #11 #59)
#57 := (iff #10 false)
#48 := (not #10)
#12 := (not #8)
#13 := (and #11 #12)
#37 := (not #13)
#38 := (or #37 #10)
#41 := (not #38)
#14 := (implies #13 #10)
#15 := (not #14)
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#36 := [asserted]: #15
#46 := [mp #36 #43]: #41
#49 := [not-or-elim #46]: #48
#58 := [iff-false #49]: #57
#55 := (iff #8 false)
#44 := [not-or-elim #46]: #13
#47 := [and-elim #44]: #12
#56 := [iff-false #47]: #55
#61 := [monotonicity #56 #58]: #60
#65 := [trans #61 #63]: #64
#45 := [and-elim #44]: #11
[mp #45 #65]: false
unsat
050883983ebe99dc3b7f24a011b1724b1b2c4dd9 33 0
#2 := false
decl f1 :: S1
#3 := f1
decl f6 :: S1
#14 := f6
#15 := (= f6 f1)
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
#16 := (and #13 #15)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (and #8 #10)
#17 := (or #11 #16)
#18 := (implies #17 #17)
#19 := (not #18)
#48 := (iff #19 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #19 #43)
#41 := (iff #18 true)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#40 := [asserted]: #19
[mp #40 #49]: false
unsat
5826af388cc5a35d2efebb6e51d8775678624a36 21 0
#2 := false
decl f3 :: (-> S2 Int S3)
#8 := 0::Int
decl f4 :: S2
#7 := f4
#9 := (f3 f4 0::Int)
#10 := (= #9 #9)
#11 := (not #10)
#56 := (iff #11 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #11 #51)
#49 := (iff #10 true)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#48 := [asserted]: #11
[mp #48 #57]: false
unsat
5e5769d2d58c1ee052480c0b6f4e0dcef2e67169 21 0
#2 := false
decl f3 :: (-> S2 Int S3)
#8 := 1::Int
decl f4 :: S2
#7 := f4
#9 := (f3 f4 1::Int)
#10 := (= #9 #9)
#11 := (not #10)
#57 := (iff #11 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #11 #52)
#50 := (iff #10 true)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#49 := [asserted]: #11
[mp #49 #58]: false
unsat
789dd368fa77887408c1828978af0572cced1843 18 0
#2 := false
#8 := 1::Int
#7 := 0::Int
#9 := (< 0::Int 1::Int)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
a9af7c16cc7269b2c7732f50c5ea73bba73088c0 18 0
#2 := false
#8 := 1::Int
#7 := 0::Int
#9 := (<= 0::Int 1::Int)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
850b27c2d840b86ab5903dbe975b63ba1dab1ea7 18 0
#2 := false
#8 := 2345678901::Int
#7 := 123456789::Int
#9 := (< 123456789::Int 2345678901::Int)
#10 := (not #9)
#41 := (iff #10 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (iff #9 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #10
[mp #31 #42]: false
unsat
9e233efcf15a85c9402b5ed5fea5d2ee7d7da37e 32 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 1::Int
decl f4 :: S2
#7 := f4
#12 := (f3 f4 1::Int)
#8 := 0::Int
#10 := (+ 0::Int 1::Int)
#11 := (f3 f4 #10)
#13 := (= #11 #12)
#14 := (not #13)
#67 := (iff #14 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #14 #62)
#60 := (iff #13 true)
#55 := (= #12 #12)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #13 #55)
#52 := (= #10 1::Int)
#53 := [rewrite]: #52
#54 := [monotonicity #53]: #13
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#51 := [asserted]: #14
[mp #51 #68]: false
unsat
abc5d7d63d1192687b6f5ea215db822a41f37207 39 0
#2 := false
decl f3 :: (-> S2 Int S3)
#11 := 1::Int
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#9 := f7
decl f6 :: S4
#8 := f6
#10 := (f5 f6 f7)
#12 := (+ #10 1::Int)
decl f4 :: S2
#7 := f4
#13 := (f3 f4 #12)
#14 := (= #13 #13)
#15 := (not #14)
#71 := (iff #15 false)
#1 := true
#66 := (not true)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #15 #66)
#64 := (iff #14 true)
#53 := (+ 1::Int #10)
#56 := (f3 f4 #53)
#59 := (= #56 #56)
#62 := (iff #59 true)
#63 := [rewrite]: #62
#60 := (iff #14 #59)
#57 := (= #13 #56)
#54 := (= #12 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#61 := [monotonicity #58 #58]: #60
#65 := [trans #61 #63]: #64
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#52 := [asserted]: #15
[mp #52 #72]: false
unsat
4f23e7a09b61a0353f978f0745982e2d205dbdd8 35 0
#2 := false
#10 := 1::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#11 := (+ #9 1::Int)
#12 := (< #9 #11)
#13 := (not #12)
#70 := (iff #13 false)
#52 := (+ 1::Int #9)
#55 := (< #9 #52)
#58 := (not #55)
#68 := (iff #58 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #58 #63)
#61 := (iff #55 true)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#59 := (iff #13 #58)
#56 := (iff #12 #55)
#53 := (= #11 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#71 := [trans #60 #69]: #70
#51 := [asserted]: #13
[mp #51 #71]: false
unsat
21c805ab7618df702910e81acc19099bb8f38592 435 0
#2 := false
decl f5 :: (-> S4 S3 Int)
decl f8 :: S3
#14 := f8
decl f6 :: S4
#8 := f6
#15 := (f5 f6 f8)
#11 := 1::Int
#65 := (+ 1::Int #15)
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#59 := (+ 1::Int #10)
#398 := (= #59 #65)
#365 := (not #398)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#68 := (f3 f4 #65)
#62 := (f3 f4 #59)
#71 := (= #62 #68)
#627 := (f5 f6 #62)
#444 := (f3 f4 #627)
#382 := (= #444 #68)
#376 := (= #68 #444)
#372 := (= #65 #627)
#389 := (= #59 #627)
#306 := -1::Int
#266 := (* -1::Int #627)
#267 := (+ #10 #266)
#616 := (<= #267 -1::Int)
#604 := (= #267 -1::Int)
#618 := (>= #10 -1::Int)
#27 := 0::Int
#465 := (>= #10 0::Int)
#443 := (= #10 0::Int)
#285 := (f3 f4 #10)
#458 := (f5 f6 #285)
#466 := (= #458 0::Int)
#429 := (not #465)
#445 := [hypothesis]: #429
#467 := (or #465 #466)
#28 := (:var 0 Int)
#30 := (f3 f4 #28)
#636 := (pattern #30)
#31 := (f5 f6 #30)
#36 := (= #31 0::Int)
#98 := (>= #28 0::Int)
#128 := (or #98 #36)
#643 := (forall (vars (?v0 Int)) (:pat #636) #128)
#131 := (forall (vars (?v0 Int)) #128)
#646 := (iff #131 #643)
#644 := (iff #128 #128)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#144 := (~ #131 #131)
#152 := (~ #128 #128)
#153 := [refl]: #152
#145 := [nnf-pos #153]: #144
#35 := (< #28 0::Int)
#37 := (implies #35 #36)
#38 := (forall (vars (?v0 Int)) #37)
#134 := (iff #38 #131)
#112 := (not #35)
#113 := (or #112 #36)
#116 := (forall (vars (?v0 Int)) #113)
#132 := (iff #116 #131)
#129 := (iff #113 #128)
#126 := (iff #112 #98)
#99 := (not #98)
#121 := (not #99)
#124 := (iff #121 #98)
#125 := [rewrite]: #124
#122 := (iff #112 #121)
#119 := (iff #35 #99)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#130 := [monotonicity #127]: #129
#133 := [quant-intro #130]: #132
#117 := (iff #38 #116)
#114 := (iff #37 #113)
#115 := [rewrite]: #114
#118 := [quant-intro #115]: #117
#135 := [trans #118 #133]: #134
#111 := [asserted]: #38
#136 := [mp #111 #135]: #131
#154 := [mp~ #136 #145]: #131
#648 := [mp #154 #647]: #643
#328 := (not #643)
#470 := (or #328 #465 #466)
#563 := (or #328 #467)
#564 := (iff #563 #470)
#551 := [rewrite]: #564
#560 := [quant-inst #10]: #563
#553 := [mp #560 #551]: #470
#406 := [unit-resolution #553 #648]: #467
#407 := [unit-resolution #406 #445]: #466
#414 := (= #10 #458)
#472 := (= f7 #285)
#621 := (= #285 f7)
#22 := (:var 0 S3)
#23 := (f5 f6 #22)
#629 := (pattern #23)
#24 := (f3 f4 #23)
#25 := (= #24 #22)
#630 := (forall (vars (?v0 S3)) (:pat #629) #25)
#26 := (forall (vars (?v0 S3)) #25)
#633 := (iff #26 #630)
#631 := (iff #25 #25)
#632 := [refl]: #631
#634 := [quant-intro #632]: #633
#150 := (~ #26 #26)
#148 := (~ #25 #25)
#149 := [refl]: #148
#151 := [nnf-pos #149]: #150
#86 := [asserted]: #26
#140 := [mp~ #86 #151]: #26
#635 := [mp #140 #634]: #630
#410 := (not #630)
#617 := (or #410 #621)
#290 := [quant-inst #9]: #617
#451 := [unit-resolution #290 #635]: #621
#427 := [symm #451]: #472
#416 := [monotonicity #427]: #414
#417 := [trans #416 #407]: #443
#418 := (not #443)
#420 := (or #418 #465)
#421 := [th-lemma arith triangle-eq]: #420
#422 := [unit-resolution #421 #445 #417]: false
#423 := [lemma #422]: #465
#394 := (or #429 #618)
#392 := [th-lemma arith farkas 1 1]: #394
#395 := [unit-resolution #392 #423]: #618
#619 := (not #618)
#269 := (or #619 #604)
#32 := (= #31 #28)
#102 := (or #99 #32)
#637 := (forall (vars (?v0 Int)) (:pat #636) #102)
#105 := (forall (vars (?v0 Int)) #102)
#640 := (iff #105 #637)
#638 := (iff #102 #102)
#639 := [refl]: #638
#641 := [quant-intro #639]: #640
#142 := (~ #105 #105)
#141 := (~ #102 #102)
#138 := [refl]: #141
#143 := [nnf-pos #138]: #142
#29 := (<= 0::Int #28)
#33 := (implies #29 #32)
#34 := (forall (vars (?v0 Int)) #33)
#108 := (iff #34 #105)
#89 := (not #29)
#90 := (or #89 #32)
#93 := (forall (vars (?v0 Int)) #90)
#106 := (iff #93 #105)
#103 := (iff #90 #102)
#100 := (iff #89 #99)
#96 := (iff #29 #98)
#97 := [rewrite]: #96
#101 := [monotonicity #97]: #100
#104 := [monotonicity #101]: #103
#107 := [quant-intro #104]: #106
#94 := (iff #34 #93)
#91 := (iff #33 #90)
#92 := [rewrite]: #91
#95 := [quant-intro #92]: #94
#109 := [trans #95 #107]: #108
#87 := [asserted]: #34
#110 := [mp #87 #109]: #105
#139 := [mp~ #110 #143]: #105
#642 := [mp #139 #641]: #637
#608 := (not #637)
#609 := (or #608 #619 #604)
#622 := (= #627 #59)
#291 := (>= #59 0::Int)
#624 := (not #291)
#628 := (or #624 #622)
#610 := (or #608 #628)
#254 := (iff #610 #609)
#611 := (or #608 #269)
#614 := (iff #611 #609)
#253 := [rewrite]: #614
#248 := (iff #610 #611)
#606 := (iff #628 #269)
#262 := (iff #622 #604)
#268 := [rewrite]: #262
#278 := (iff #624 #619)
#277 := (iff #291 #618)
#282 := [rewrite]: #277
#620 := [monotonicity #282]: #278
#607 := [monotonicity #620 #268]: #606
#612 := [monotonicity #607]: #248
#615 := [trans #612 #253]: #254
#605 := [quant-inst #59]: #610
#613 := [mp #605 #615]: #609
#449 := [unit-resolution #613 #642]: #269
#383 := [unit-resolution #449 #395]: #604
#415 := (not #604)
#446 := (or #415 #616)
#448 := [th-lemma arith triangle-eq]: #446
#386 := [unit-resolution #448 #383]: #616
#602 := (>= #267 -1::Int)
#457 := (or #415 #602)
#459 := [th-lemma arith triangle-eq]: #457
#388 := [unit-resolution #459 #383]: #602
#385 := [th-lemma arith eq-propagate -1 -1 #388 #386]: #389
#380 := (= #65 #59)
#390 := [hypothesis]: #398
#370 := [symm #390]: #380
#373 := [trans #370 #385]: #372
#377 := [monotonicity #373]: #376
#375 := [symm #377]: #382
#381 := (= #62 #444)
#424 := (= #444 #62)
#426 := (or #410 #424)
#396 := [quant-inst #62]: #426
#393 := [unit-resolution #396 #635]: #424
#374 := [symm #393]: #381
#378 := [trans #374 #375]: #71
#80 := (not #71)
#19 := (= f7 f8)
#623 := (f3 f4 #15)
#279 := (= #623 f8)
#625 := (or #410 #279)
#626 := [quant-inst #14]: #625
#514 := [unit-resolution #626 #635]: #279
#434 := (= f7 #623)
#428 := (= #285 #623)
#461 := (= #10 #15)
#307 := (f5 f6 #68)
#588 := (* -1::Int #307)
#583 := (+ #15 #588)
#411 := (<= #583 -1::Int)
#587 := (= #583 -1::Int)
#591 := (>= #15 -1::Int)
#468 := (>= #15 0::Int)
#544 := (= #15 0::Int)
#469 := (f5 f6 #623)
#545 := (= #469 0::Int)
#548 := (not #468)
#549 := [hypothesis]: #548
#542 := (or #468 #545)
#555 := (or #328 #468 #545)
#556 := (or #328 #542)
#557 := (iff #556 #555)
#546 := [rewrite]: #557
#552 := [quant-inst #15]: #556
#547 := [mp #552 #546]: #555
#533 := [unit-resolution #547 #648]: #542
#513 := [unit-resolution #533 #549]: #545
#518 := (= #15 #469)
#516 := (= f8 #623)
#517 := [symm #514]: #516
#519 := [monotonicity #517]: #518
#520 := [trans #519 #513]: #544
#521 := (not #544)
#522 := (or #521 #468)
#523 := [th-lemma arith triangle-eq]: #522
#524 := [unit-resolution #523 #549 #520]: false
#525 := [lemma #524]: #468
#511 := (or #548 #591)
#506 := [th-lemma arith farkas 1 1]: #511
#512 := [unit-resolution #506 #525]: #591
#585 := (not #591)
#430 := (or #585 #587)
#574 := (or #608 #585 #587)
#590 := (= #307 #65)
#592 := (>= #65 0::Int)
#593 := (not #592)
#594 := (or #593 #590)
#575 := (or #608 #594)
#573 := (iff #575 #574)
#577 := (or #608 #430)
#578 := (iff #577 #574)
#579 := [rewrite]: #578
#571 := (iff #575 #577)
#431 := (iff #594 #430)
#582 := (iff #590 #587)
#589 := [rewrite]: #582
#586 := (iff #593 #585)
#595 := (iff #592 #591)
#584 := [rewrite]: #595
#581 := [monotonicity #584]: #586
#432 := [monotonicity #581 #589]: #431
#572 := [monotonicity #432]: #571
#580 := [trans #572 #579]: #573
#576 := [quant-inst #65]: #575
#409 := [mp #576 #580]: #574
#536 := [unit-resolution #409 #642]: #430
#498 := [unit-resolution #536 #512]: #587
#527 := (not #587)
#528 := (or #527 #411)
#530 := [th-lemma arith triangle-eq]: #528
#494 := [unit-resolution #530 #498]: #411
#412 := (>= #583 -1::Int)
#495 := (or #527 #412)
#496 := [th-lemma arith triangle-eq]: #495
#499 := [unit-resolution #496 #498]: #412
#504 := (+ #307 #266)
#508 := (<= #504 0::Int)
#526 := (= #307 #627)
#501 := (= #627 #307)
#214 := (not #19)
#510 := [hypothesis]: #214
#305 := (or #71 #19)
#81 := (iff #80 #19)
#16 := (+ #15 1::Int)
#17 := (f3 f4 #16)
#12 := (+ #10 1::Int)
#13 := (f3 f4 #12)
#18 := (= #13 #17)
#20 := (iff #18 #19)
#21 := (not #20)
#84 := (iff #21 #81)
#74 := (iff #71 #19)
#77 := (not #74)
#82 := (iff #77 #81)
#83 := [rewrite]: #82
#78 := (iff #21 #77)
#75 := (iff #20 #74)
#72 := (iff #18 #71)
#69 := (= #17 #68)
#66 := (= #16 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#63 := (= #13 #62)
#60 := (= #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#73 := [monotonicity #64 #70]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#85 := [trans #79 #83]: #84
#58 := [asserted]: #21
#88 := [mp #58 #85]: #81
#299 := (not #81)
#303 := (or #71 #19 #299)
#304 := [def-axiom]: #303
#302 := [unit-resolution #304 #88]: #305
#500 := [unit-resolution #302 #510]: #71
#502 := [monotonicity #500]: #501
#497 := [symm #502]: #526
#503 := (not #526)
#476 := (or #503 #508)
#477 := [th-lemma arith triangle-eq]: #476
#478 := [unit-resolution #477 #497]: #508
#509 := (>= #504 0::Int)
#371 := (or #503 #509)
#482 := [th-lemma arith triangle-eq]: #371
#483 := [unit-resolution #482 #497]: #509
#603 := (= #627 0::Int)
#474 := (not #603)
#565 := (= #307 0::Int)
#534 := (not #565)
#455 := (iff #534 #474)
#473 := (iff #565 #603)
#488 := (iff #603 #565)
#493 := [monotonicity #502]: #488
#419 := [symm #493]: #473
#479 := [monotonicity #419]: #455
#462 := (<= #307 0::Int)
#484 := (not #462)
#489 := (not #411)
#485 := (or #484 #548 #489)
#486 := [th-lemma arith assign-bounds -1 1]: #485
#487 := [unit-resolution #486 #494 #525]: #484
#490 := (or #534 #462)
#491 := [th-lemma arith triangle-eq]: #490
#492 := [unit-resolution #491 #487]: #534
#480 := [mp #492 #479]: #474
#325 := (or #618 #603)
#221 := (or #328 #618 #603)
#310 := (or #291 #603)
#598 := (or #328 #310)
#601 := (iff #598 #221)
#321 := (or #328 #325)
#600 := (iff #321 #221)
#597 := [rewrite]: #600
#322 := (iff #598 #321)
#326 := (iff #310 #325)
#327 := [monotonicity #282]: #326
#596 := [monotonicity #327]: #322
#311 := [trans #596 #597]: #601
#599 := [quant-inst #59]: #598
#312 := [mp #599 #311]: #221
#475 := [unit-resolution #312 #648]: #325
#481 := [unit-resolution #475 #480]: #618
#456 := [unit-resolution #449 #481]: #604
#450 := [unit-resolution #448 #456]: #616
#460 := [unit-resolution #459 #456]: #602
#471 := [th-lemma arith eq-propagate -1 -1 1 1 1 1 #460 #450 #483 #478 #499 #494]: #461
#433 := [monotonicity #471]: #428
#435 := [trans #427 #433]: #434
#436 := [trans #435 #514]: #19
#437 := [unit-resolution #510 #436]: false
#438 := [lemma #437]: #19
#301 := (or #80 #214)
#215 := (or #80 #214 #299)
#300 := [def-axiom]: #215
#292 := [unit-resolution #300 #88]: #301
#391 := [unit-resolution #292 #438]: #80
#379 := [unit-resolution #391 #378]: false
#367 := [lemma #379]: #365
#399 := (* -1::Int #65)
#405 := (+ #59 #399)
#384 := (<= #405 0::Int)
#439 := (* -1::Int #15)
#440 := (+ #10 #439)
#441 := (<= #440 0::Int)
#368 := [monotonicity #438]: #461
#366 := (not #461)
#369 := (or #366 #441)
#351 := [th-lemma arith triangle-eq]: #369
#353 := [unit-resolution #351 #368]: #441
#354 := (not #441)
#355 := (or #384 #354)
#356 := [th-lemma arith assign-bounds -1]: #355
#357 := [unit-resolution #356 #353]: #384
#387 := (>= #405 0::Int)
#442 := (>= #440 0::Int)
#358 := (or #366 #442)
#359 := [th-lemma arith triangle-eq]: #358
#360 := [unit-resolution #359 #368]: #442
#361 := (not #442)
#362 := (or #387 #361)
#363 := [th-lemma arith assign-bounds -1]: #362
#352 := [unit-resolution #363 #360]: #387
#341 := (not #387)
#364 := (not #384)
#343 := (or #398 #364 #341)
#344 := [th-lemma arith triangle-eq]: #343
#345 := [unit-resolution #344 #352 #357]: #398
[unit-resolution #345 #367]: false
unsat
acd75482eb0fadad2769b1851e88fa0d92a18b2f 57 0
#2 := false
#13 := 1::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#16 := (+ #11 1::Int)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#15 := (+ #9 1::Int)
#17 := (+ #15 #16)
#12 := (+ #9 #11)
#14 := (+ #12 1::Int)
#18 := (< #14 #17)
#19 := (not #18)
#91 := (iff #19 false)
#70 := 2::Int
#71 := (+ 2::Int #12)
#58 := (+ 1::Int #12)
#76 := (< #58 #71)
#79 := (not #76)
#89 := (iff #79 false)
#1 := true
#83 := (not true)
#87 := (iff #83 false)
#88 := [rewrite]: #87
#85 := (iff #79 #83)
#82 := (iff #76 true)
#84 := [rewrite]: #82
#86 := [monotonicity #84]: #85
#90 := [trans #86 #88]: #89
#80 := (iff #19 #79)
#77 := (iff #18 #76)
#74 := (= #17 #71)
#64 := (+ 1::Int #11)
#61 := (+ 1::Int #9)
#67 := (+ #61 #64)
#72 := (= #67 #71)
#73 := [rewrite]: #72
#68 := (= #17 #67)
#65 := (= #16 #64)
#66 := [rewrite]: #65
#62 := (= #15 #61)
#63 := [rewrite]: #62
#69 := [monotonicity #63 #66]: #68
#75 := [trans #69 #73]: #74
#59 := (= #14 #58)
#60 := [rewrite]: #59
#78 := [monotonicity #60 #75]: #77
#81 := [monotonicity #78]: #80
#92 := [trans #81 #90]: #91
#57 := [asserted]: #19
[mp #57 #92]: false
unsat
cafcbe1d613718219fa1714ac3be1c8043d2d395 51 0
#2 := false
decl f5 :: (-> S4 S3 Int)
#16 := (:var 0 S3)
decl f6 :: S4
#8 := f6
#17 := (f5 f6 #16)
#607 := (pattern #17)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#18 := (f3 f4 #17)
#19 := (= #18 #16)
#608 := (forall (vars (?v0 S3)) (:pat #607) #19)
#20 := (forall (vars (?v0 S3)) #19)
#611 := (iff #20 #608)
#609 := (iff #19 #19)
#610 := [refl]: #609
#612 := [quant-intro #610]: #611
#127 := (~ #20 #20)
#125 := (~ #19 #19)
#126 := [refl]: #125
#128 := [nnf-pos #126]: #127
#63 := [asserted]: #20
#117 := [mp~ #63 #128]: #20
#613 := [mp #117 #612]: #608
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#54 := (f3 f4 #10)
#57 := (= #54 f7)
#60 := (not #57)
#11 := 0::Int
#12 := (+ #10 0::Int)
#13 := (f3 f4 #12)
#14 := (= #13 f7)
#15 := (not #14)
#61 := (iff #15 #60)
#58 := (iff #14 #57)
#55 := (= #13 #54)
#52 := (= #12 #10)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59]: #61
#51 := [asserted]: #15
#65 := [mp #51 #62]: #60
#278 := (not #608)
#279 := (or #278 #57)
#270 := [quant-inst #9]: #279
[unit-resolution #270 #65 #613]: false
unsat
1dfcd4e08e6f8d1a1620a5d9deeafd855aa26e59 51 0
#2 := false
decl f5 :: (-> S4 S3 Int)
#16 := (:var 0 S3)
decl f6 :: S4
#9 := f6
#17 := (f5 f6 #16)
#607 := (pattern #17)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#18 := (f3 f4 #17)
#19 := (= #18 #16)
#608 := (forall (vars (?v0 S3)) (:pat #607) #19)
#20 := (forall (vars (?v0 S3)) #19)
#611 := (iff #20 #608)
#609 := (iff #19 #19)
#610 := [refl]: #609
#612 := [quant-intro #610]: #611
#127 := (~ #20 #20)
#125 := (~ #19 #19)
#126 := [refl]: #125
#128 := [nnf-pos #126]: #127
#63 := [asserted]: #20
#117 := [mp~ #63 #128]: #20
#613 := [mp #117 #612]: #608
decl f7 :: S3
#10 := f7
#11 := (f5 f6 f7)
#54 := (f3 f4 #11)
#57 := (= #54 f7)
#60 := (not #57)
#8 := 0::Int
#12 := (+ 0::Int #11)
#13 := (f3 f4 #12)
#14 := (= #13 f7)
#15 := (not #14)
#61 := (iff #15 #60)
#58 := (iff #14 #57)
#55 := (= #13 #54)
#52 := (= #12 #11)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59]: #61
#51 := [asserted]: #15
#65 := [mp #51 #62]: #60
#278 := (not #608)
#279 := (or #278 #57)
#270 := [quant-inst #10]: #279
[unit-resolution #270 #65 #613]: false
unsat
807ee369d1a6496ab946d19ae1b2533180edb6b7 41 0
#2 := false
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#9 := f7
decl f6 :: S4
#8 := f6
#10 := (f5 f6 f7)
decl f8 :: S3
#11 := f8
#12 := (f5 f6 f8)
#15 := (+ #12 #10)
decl f4 :: S2
#7 := f4
#16 := (f3 f4 #15)
#13 := (+ #10 #12)
#14 := (f3 f4 #13)
#17 := (= #14 #16)
#18 := (not #17)
#72 := (iff #18 false)
#1 := true
#67 := (not true)
#70 := (iff #67 false)
#71 := [rewrite]: #70
#68 := (iff #18 #67)
#65 := (iff #17 true)
#60 := (= #14 #14)
#63 := (iff #60 true)
#64 := [rewrite]: #63
#61 := (iff #17 #60)
#58 := (= #16 #14)
#56 := (= #15 #13)
#57 := [rewrite]: #56
#59 := [monotonicity #57]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#55 := [asserted]: #18
[mp #55 #73]: false
unsat
69a5d92a496670834736208baa7873f48a8b26ef 46 0
#2 := false
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 S3 Int)
decl f9 :: S3
#13 := f9
decl f6 :: S4
#8 := f6
#14 := (f5 f6 f9)
decl f8 :: S3
#11 := f8
#12 := (f5 f6 f8)
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#18 := (+ #10 #12)
#19 := (+ #18 #14)
decl f4 :: S2
#7 := f4
#20 := (f3 f4 #19)
#15 := (+ #12 #14)
#16 := (+ #10 #15)
#17 := (f3 f4 #16)
#21 := (= #17 #20)
#22 := (not #21)
#76 := (iff #22 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #22 #71)
#69 := (iff #21 true)
#64 := (= #17 #17)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #21 #64)
#62 := (= #20 #17)
#60 := (= #19 #16)
#61 := [rewrite]: #60
#63 := [monotonicity #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#59 := [asserted]: #22
[mp #59 #77]: false
unsat
79c07e1ad7272206c5e814c398f47e58d945d62c 406 0
#2 := false
#15 := 0::Int
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#9 := f7
decl f6 :: S4
#8 := f6
#10 := (f5 f6 f7)
#465 := (= #10 0::Int)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#610 := (f3 f4 #10)
#405 := (f5 f6 #610)
#558 := (= #405 0::Int)
decl f8 :: S3
#11 := f8
#12 := (f5 f6 f8)
#284 := (f3 f4 #12)
#562 := (f5 f6 #284)
#554 := (= #562 0::Int)
#404 := (>= #10 0::Int)
#429 := (not #558)
#432 := [hypothesis]: #429
#559 := (or #404 #558)
#28 := (:var 0 Int)
#30 := (f3 f4 #28)
#629 := (pattern #30)
#31 := (f5 f6 #30)
#36 := (= #31 0::Int)
#75 := (>= #28 0::Int)
#105 := (or #75 #36)
#636 := (forall (vars (?v0 Int)) (:pat #629) #105)
#108 := (forall (vars (?v0 Int)) #105)
#639 := (iff #108 #636)
#637 := (iff #105 #105)
#638 := [refl]: #637
#640 := [quant-intro #638]: #639
#121 := (~ #108 #108)
#129 := (~ #105 #105)
#130 := [refl]: #129
#122 := [nnf-pos #130]: #121
#35 := (< #28 0::Int)
#37 := (implies #35 #36)
#38 := (forall (vars (?v0 Int)) #37)
#111 := (iff #38 #108)
#89 := (not #35)
#90 := (or #89 #36)
#93 := (forall (vars (?v0 Int)) #90)
#109 := (iff #93 #108)
#106 := (iff #90 #105)
#103 := (iff #89 #75)
#76 := (not #75)
#98 := (not #76)
#101 := (iff #98 #75)
#102 := [rewrite]: #101
#99 := (iff #89 #98)
#96 := (iff #35 #76)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#104 := [trans #100 #102]: #103
#107 := [monotonicity #104]: #106
#110 := [quant-intro #107]: #109
#94 := (iff #38 #93)
#91 := (iff #37 #90)
#92 := [rewrite]: #91
#95 := [quant-intro #92]: #94
#112 := [trans #95 #110]: #111
#88 := [asserted]: #38
#113 := [mp #88 #112]: #108
#131 := [mp~ #113 #122]: #108
#641 := [mp #131 #640]: #636
#320 := (not #636)
#560 := (or #320 #404 #558)
#563 := (or #320 #559)
#446 := (iff #563 #560)
#447 := [rewrite]: #446
#445 := [quant-inst #10]: #563
#406 := [mp #445 #447]: #560
#433 := [unit-resolution #406 #641]: #559
#434 := [unit-resolution #433 #432]: #404
#493 := (not #404)
#439 := (or #493 #554)
#551 := (= #12 0::Int)
#13 := (+ #10 #12)
#14 := (f3 f4 #13)
#275 := (f5 f6 #14)
#403 := -1::Int
#260 := (* -1::Int #275)
#261 := (+ #12 #260)
#262 := (+ #10 #261)
#609 := (<= #262 0::Int)
#597 := (= #262 0::Int)
#615 := (>= #13 0::Int)
#561 := (>= #12 0::Int)
#517 := (not #554)
#490 := [hypothesis]: #517
#456 := (or #561 #554)
#555 := (or #320 #561 #554)
#440 := (or #320 #456)
#457 := (iff #440 #555)
#458 := [rewrite]: #457
#455 := [quant-inst #12]: #440
#451 := [mp #455 #458]: #555
#496 := [unit-resolution #451 #641]: #456
#469 := [unit-resolution #496 #490]: #561
#497 := [hypothesis]: #404
#470 := (not #561)
#471 := (or #615 #493 #470)
#364 := [th-lemma arith assign-bounds -1 -1]: #471
#475 := [unit-resolution #364 #497 #469]: #615
#621 := (not #615)
#259 := (or #621 #597)
#32 := (= #31 #28)
#79 := (or #76 #32)
#630 := (forall (vars (?v0 Int)) (:pat #629) #79)
#82 := (forall (vars (?v0 Int)) #79)
#633 := (iff #82 #630)
#631 := (iff #79 #79)
#632 := [refl]: #631
#634 := [quant-intro #632]: #633
#119 := (~ #82 #82)
#118 := (~ #79 #79)
#115 := [refl]: #118
#120 := [nnf-pos #115]: #119
#29 := (<= 0::Int #28)
#33 := (implies #29 #32)
#34 := (forall (vars (?v0 Int)) #33)
#85 := (iff #34 #82)
#66 := (not #29)
#67 := (or #66 #32)
#70 := (forall (vars (?v0 Int)) #67)
#83 := (iff #70 #82)
#80 := (iff #67 #79)
#77 := (iff #66 #76)
#73 := (iff #29 #75)
#74 := [rewrite]: #73
#78 := [monotonicity #74]: #77
#81 := [monotonicity #78]: #80
#84 := [quant-intro #81]: #83
#71 := (iff #34 #70)
#68 := (iff #33 #67)
#69 := [rewrite]: #68
#72 := [quant-intro #69]: #71
#86 := [trans #72 #84]: #85
#64 := [asserted]: #34
#87 := [mp #64 #86]: #82
#116 := [mp~ #87 #120]: #82
#635 := [mp #116 #634]: #630
#601 := (not #630)
#602 := (or #601 #621 #597)
#612 := (= #275 #13)
#271 := (or #621 #612)
#603 := (or #601 #271)
#247 := (iff #603 #602)
#604 := (or #601 #259)
#607 := (iff #604 #602)
#246 := [rewrite]: #607
#241 := (iff #603 #604)
#599 := (iff #271 #259)
#255 := (iff #612 #597)
#613 := [rewrite]: #255
#600 := [monotonicity #613]: #599
#605 := [monotonicity #600]: #241
#608 := [trans #605 #246]: #247
#598 := [quant-inst #13]: #603
#606 := [mp #598 #608]: #602
#476 := [unit-resolution #606 #635]: #259
#477 := [unit-resolution #476 #475]: #597
#482 := (not #597)
#478 := (or #482 #609)
#479 := [th-lemma arith triangle-eq]: #478
#480 := [unit-resolution #479 #477]: #609
#595 := (>= #262 0::Int)
#589 := (<= #275 0::Int)
#596 := (= #275 0::Int)
#16 := (f3 f4 0::Int)
#590 := (f5 f6 #16)
#594 := (= #590 0::Int)
#581 := (or #601 #594)
#318 := (>= 0::Int 0::Int)
#319 := (not #318)
#304 := (or #319 #594)
#576 := (or #601 #304)
#423 := (iff #576 #581)
#425 := (iff #581 #581)
#567 := [rewrite]: #425
#575 := (iff #304 #594)
#588 := (or false #594)
#579 := (iff #588 #594)
#574 := [rewrite]: #579
#577 := (iff #304 #588)
#587 := (iff #319 false)
#1 := true
#307 := (not true)
#300 := (iff #307 false)
#583 := [rewrite]: #300
#585 := (iff #319 #307)
#305 := (iff #318 true)
#306 := [rewrite]: #305
#586 := [monotonicity #306]: #585
#584 := [trans #586 #583]: #587
#578 := [monotonicity #584]: #577
#580 := [trans #578 #574]: #575
#424 := [monotonicity #580]: #423
#568 := [trans #424 #567]: #423
#582 := [quant-inst #15]: #576
#569 := [mp #582 #568]: #581
#557 := [unit-resolution #569 #635]: #594
#503 := (= #275 #590)
#17 := (= #14 #16)
#19 := (= f8 #16)
#133 := (not #19)
#18 := (= f7 #16)
#132 := (not #18)
#123 := (or #132 #133)
#521 := (= #13 0::Int)
#534 := (= #13 #590)
#548 := (= #12 #590)
#124 := (not #123)
#556 := [hypothesis]: #124
#208 := (or #123 #19)
#293 := [def-axiom]: #208
#544 := [unit-resolution #293 #556]: #19
#549 := [monotonicity #544]: #548
#533 := (= #13 #12)
#459 := (= #10 #12)
#537 := (= f7 f8)
#546 := (= #16 f8)
#538 := [symm #544]: #546
#207 := (or #123 #18)
#292 := [def-axiom]: #207
#535 := [unit-resolution #292 #556]: #18
#547 := [trans #535 #538]: #537
#532 := [monotonicity #547]: #459
#530 := (= #13 #10)
#527 := (= #10 #13)
#552 := (<= #12 0::Int)
#545 := [trans #549 #557]: #551
#550 := (not #551)
#539 := (or #550 #552)
#540 := [th-lemma arith triangle-eq]: #539
#541 := [unit-resolution #540 #545]: #552
#542 := (or #550 #561)
#536 := [th-lemma arith triangle-eq]: #542
#543 := [unit-resolution #536 #545]: #561
#528 := [th-lemma arith eq-propagate -1 -1 #543 #541]: #527
#531 := [symm #528]: #530
#529 := [trans #531 #532]: #533
#520 := [trans #529 #549]: #534
#523 := [trans #520 #557]: #521
#524 := [monotonicity #523]: #17
#59 := (not #17)
#616 := (or #59 #123)
#139 := (iff #17 #123)
#20 := (and #18 #19)
#60 := (iff #59 #20)
#142 := (iff #60 #139)
#136 := (iff #59 #124)
#140 := (iff #136 #139)
#141 := [rewrite]: #140
#137 := (iff #60 #136)
#134 := (iff #20 #124)
#135 := [rewrite]: #134
#138 := [monotonicity #135]: #137
#143 := [trans #138 #141]: #142
#21 := (iff #17 #20)
#22 := (not #21)
#61 := (iff #22 #60)
#62 := [rewrite]: #61
#58 := [asserted]: #22
#65 := [mp #58 #62]: #60
#144 := [mp #65 #143]: #139
#296 := (not #139)
#278 := (or #59 #123 #296)
#614 := [def-axiom]: #278
#272 := [unit-resolution #614 #144]: #616
#553 := [unit-resolution #272 #556]: #59
#525 := [unit-resolution #553 #524]: false
#522 := [lemma #525]: #123
#295 := (or #17 #124)
#297 := (or #17 #124 #296)
#298 := [def-axiom]: #297
#299 := [unit-resolution #298 #144]: #295
#502 := [unit-resolution #299 #522]: #17
#504 := [monotonicity #502]: #503
#499 := [trans #504 #557]: #596
#505 := (not #596)
#491 := (or #505 #589)
#487 := [th-lemma arith triangle-eq]: #491
#488 := [unit-resolution #487 #499]: #589
#483 := (not #589)
#484 := (or #595 #493 #470 #483)
#485 := [th-lemma arith assign-bounds -1 -1 1]: #484
#481 := [unit-resolution #485 #497 #488 #469]: #595
#593 := (>= #275 0::Int)
#486 := (or #505 #593)
#466 := [th-lemma arith triangle-eq]: #486
#412 := [unit-resolution #466 #499]: #593
#460 := (* -1::Int #12)
#461 := (+ #10 #460)
#519 := (<= #461 0::Int)
#492 := (not #609)
#467 := (or #519 #470 #483 #492)
#448 := [th-lemma arith assign-bounds 1 -1/2 -1/2]: #467
#472 := [unit-resolution #448 #480 #469 #488]: #519
#463 := (>= #461 0::Int)
#494 := (or #463 #492 #493)
#498 := (not #463)
#500 := [hypothesis]: #498
#501 := [hypothesis]: #609
#489 := [th-lemma arith farkas -1/2 -1/2 -1/2 1 #488 #501 #500 #497]: false
#495 := [lemma #489]: #494
#473 := [unit-resolution #495 #480 #497]: #463
#468 := [th-lemma arith eq-propagate 1/2 1/2 -1/2 -1/2 -1/2 -1/2 #473 #472 #412 #488 #481 #480]: #551
#474 := (= #562 #12)
#617 := (= #284 f8)
#23 := (:var 0 S3)
#24 := (f5 f6 #23)
#622 := (pattern #24)
#25 := (f3 f4 #24)
#26 := (= #25 #23)
#623 := (forall (vars (?v0 S3)) (:pat #622) #26)
#27 := (forall (vars (?v0 S3)) #26)
#626 := (iff #27 #623)
#624 := (iff #26 #26)
#625 := [refl]: #624
#627 := [quant-intro #625]: #626
#127 := (~ #27 #27)
#125 := (~ #26 #26)
#126 := [refl]: #125
#128 := [nnf-pos #126]: #127
#63 := [asserted]: #27
#117 := [mp~ #63 #128]: #27
#628 := [mp #117 #627]: #623
#618 := (not #623)
#611 := (or #618 #617)
#270 := [quant-inst #11]: #611
#506 := [unit-resolution #270 #628]: #617
#442 := [monotonicity #506]: #474
#449 := [trans #442 #468]: #554
#408 := [unit-resolution #490 #449]: false
#441 := [lemma #408]: #439
#435 := [unit-resolution #441 #434]: #554
#418 := (= #405 #562)
#510 := (= #12 #562)
#507 := (= f8 #284)
#509 := [symm #506]: #507
#511 := [monotonicity #509]: #510
#416 := (= #405 #12)
#436 := [trans #511 #435]: #551
#437 := [unit-resolution #536 #436]: #561
#422 := [unit-resolution #364 #437 #434]: #615
#438 := [unit-resolution #476 #422]: #597
#399 := [unit-resolution #479 #438]: #609
#400 := [unit-resolution #448 #399 #437 #488]: #519
#407 := [unit-resolution #495 #399 #434]: #463
#409 := (not #519)
#410 := (or #459 #409 #498)
#411 := [th-lemma arith triangle-eq]: #410
#413 := [unit-resolution #411 #407 #400]: #459
#414 := (= #405 #10)
#283 := (= #610 f7)
#619 := (or #618 #283)
#620 := [quant-inst #9]: #619
#452 := [unit-resolution #620 #628]: #283
#415 := [monotonicity #452]: #414
#417 := [trans #415 #413]: #416
#401 := [trans #417 #511]: #418
#419 := [trans #401 #435]: #558
#389 := [unit-resolution #432 #419]: false
#390 := [lemma #389]: #558
#464 := (= #10 #405)
#453 := (= f7 #610)
#454 := [symm #452]: #453
#444 := [monotonicity #454]: #464
#392 := [trans #444 #390]: #465
#430 := (or #429 #18)
#421 := (= #610 #16)
#450 := [hypothesis]: #558
#420 := [trans #444 #450]: #465
#426 := [monotonicity #420]: #421
#427 := [trans #454 #426]: #18
#443 := [hypothesis]: #132
#428 := [unit-resolution #443 #427]: false
#431 := [lemma #428]: #430
#394 := [unit-resolution #431 #390]: #18
#294 := (or #124 #132 #133)
#285 := [def-axiom]: #294
#395 := [unit-resolution #285 #394 #522]: #133
#518 := (or #517 #19)
#513 := (= #284 #16)
#526 := [hypothesis]: #554
#512 := [trans #511 #526]: #551
#514 := [monotonicity #512]: #513
#515 := [trans #509 #514]: #19
#462 := [hypothesis]: #133
#516 := [unit-resolution #462 #515]: false
#508 := [lemma #516]: #518
#396 := [unit-resolution #508 #395]: #517
#238 := [unit-resolution #441 #396]: #493
#397 := (not #465)
#393 := (or #397 #404)
#398 := [th-lemma arith triangle-eq]: #393
[unit-resolution #398 #238 #392]: false
unsat
7309f258a79af4da7f45b6f7385fe1a230a81a14 51 0
#2 := false
decl f5 :: (-> S4 S3 Int)
#16 := (:var 0 S3)
decl f6 :: S4
#8 := f6
#17 := (f5 f6 #16)
#607 := (pattern #17)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#18 := (f3 f4 #17)
#19 := (= #18 #16)
#608 := (forall (vars (?v0 S3)) (:pat #607) #19)
#20 := (forall (vars (?v0 S3)) #19)
#611 := (iff #20 #608)
#609 := (iff #19 #19)
#610 := [refl]: #609
#612 := [quant-intro #610]: #611
#127 := (~ #20 #20)
#125 := (~ #19 #19)
#126 := [refl]: #125
#128 := [nnf-pos #126]: #127
#63 := [asserted]: #20
#117 := [mp~ #63 #128]: #20
#613 := [mp #117 #612]: #608
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#54 := (f3 f4 #10)
#57 := (= #54 f7)
#60 := (not #57)
#11 := 0::Int
#12 := (- #10 0::Int)
#13 := (f3 f4 #12)
#14 := (= #13 f7)
#15 := (not #14)
#61 := (iff #15 #60)
#58 := (iff #14 #57)
#55 := (= #13 #54)
#52 := (= #12 #10)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59]: #61
#51 := [asserted]: #15
#65 := [mp #51 #62]: #60
#278 := (not #608)
#279 := (or #278 #57)
#270 := [quant-inst #9]: #279
[unit-resolution #270 #65 #613]: false
unsat
a612762a52e0e6c4e482e14565e5fee7610935cc 161 0
#2 := false
decl f7 :: (-> S4 Int S3)
#16 := 0::Int
decl f8 :: S4
#13 := f8
#17 := (f7 f8 0::Int)
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#57 := -1::Int
#58 := (* -1::Int #11)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#59 := (+ #9 #58)
#62 := (f7 f8 #59)
#65 := (= #62 #17)
#321 := (f3 f4 #62)
#589 := (f7 f8 #321)
#575 := (= #589 #17)
#429 := (= #17 #589)
#469 := (= 0::Int #321)
#285 := (= #321 0::Int)
#26 := (:var 0 Int)
#28 := (f7 f8 #26)
#652 := (pattern #28)
#29 := (f3 f4 #28)
#34 := (= #29 0::Int)
#113 := (>= #26 0::Int)
#144 := (or #113 #34)
#659 := (forall (vars (?v0 Int)) (:pat #652) #144)
#147 := (forall (vars (?v0 Int)) #144)
#662 := (iff #147 #659)
#660 := (iff #144 #144)
#661 := [refl]: #660
#663 := [quant-intro #661]: #662
#162 := (~ #147 #147)
#154 := (~ #144 #144)
#155 := [refl]: #154
#163 := [nnf-pos #155]: #162
#33 := (< #26 0::Int)
#35 := (implies #33 #34)
#36 := (forall (vars (?v0 Int)) #35)
#150 := (iff #36 #147)
#128 := (not #33)
#129 := (or #128 #34)
#132 := (forall (vars (?v0 Int)) #129)
#148 := (iff #132 #147)
#145 := (iff #129 #144)
#142 := (iff #128 #113)
#115 := (not #113)
#137 := (not #115)
#140 := (iff #137 #113)
#141 := [rewrite]: #140
#138 := (iff #128 #137)
#135 := (iff #33 #115)
#136 := [rewrite]: #135
#139 := [monotonicity #136]: #138
#143 := [trans #139 #141]: #142
#146 := [monotonicity #143]: #145
#149 := [quant-intro #146]: #148
#133 := (iff #36 #132)
#130 := (iff #35 #129)
#131 := [rewrite]: #130
#134 := [quant-intro #131]: #133
#151 := [trans #134 #149]: #150
#127 := [asserted]: #36
#152 := [mp #127 #151]: #147
#170 := [mp~ #152 #163]: #147
#664 := [mp #170 #663]: #659
#81 := (>= #59 0::Int)
#80 := (not #81)
#91 := (or #81 #65)
#94 := (not #91)
#14 := (- #9 #11)
#15 := (f7 f8 #14)
#18 := (= #15 #17)
#12 := (< #9 #11)
#19 := (implies #12 #18)
#20 := (not #19)
#97 := (iff #20 #94)
#71 := (not #12)
#72 := (or #71 #65)
#77 := (not #72)
#95 := (iff #77 #94)
#92 := (iff #72 #91)
#89 := (iff #71 #81)
#84 := (not #80)
#87 := (iff #84 #81)
#88 := [rewrite]: #87
#85 := (iff #71 #84)
#82 := (iff #12 #80)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#90 := [trans #86 #88]: #89
#93 := [monotonicity #90]: #92
#96 := [monotonicity #93]: #95
#78 := (iff #20 #77)
#75 := (iff #19 #72)
#68 := (implies #12 #65)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #19 #68)
#66 := (iff #18 #65)
#63 := (= #15 #62)
#60 := (= #14 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#76 := [trans #70 #74]: #75
#79 := [monotonicity #76]: #78
#98 := [trans #79 #96]: #97
#56 := [asserted]: #20
#99 := [mp #56 #98]: #94
#100 := [not-or-elim #99]: #80
#624 := (not #659)
#625 := (or #624 #81 #285)
#286 := (or #81 #285)
#626 := (or #624 #286)
#627 := (iff #626 #625)
#265 := [rewrite]: #627
#621 := [quant-inst #59]: #626
#628 := [mp #621 #265]: #625
#583 := [unit-resolution #628 #100 #664]: #285
#470 := [symm #583]: #469
#577 := [monotonicity #470]: #429
#578 := [symm #577]: #575
#479 := (= #62 #589)
#596 := (= #589 #62)
#21 := (:var 0 S3)
#22 := (f3 f4 #21)
#645 := (pattern #22)
#23 := (f7 f8 #22)
#24 := (= #23 #21)
#646 := (forall (vars (?v0 S3)) (:pat #645) #24)
#25 := (forall (vars (?v0 S3)) #24)
#649 := (iff #25 #646)
#647 := (iff #24 #24)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#168 := (~ #25 #25)
#166 := (~ #24 #24)
#167 := [refl]: #166
#169 := [nnf-pos #167]: #168
#103 := [asserted]: #25
#158 := [mp~ #103 #169]: #25
#651 := [mp #158 #650]: #646
#318 := (not #646)
#586 := (or #318 #596)
#468 := [quant-inst #62]: #586
#585 := [unit-resolution #468 #651]: #596
#574 := [symm #585]: #479
#463 := [trans #574 #578]: #65
#101 := (not #65)
#102 := [not-or-elim #99]: #101
[unit-resolution #102 #463]: false
unsat
daef8f790726761d318bc7ef25020f07145aab1a 281 0
#2 := false
decl f3 :: (-> S2 Int S3)
#15 := 0::Int
decl f4 :: S2
#7 := f4
#16 := (f3 f4 0::Int)
decl f5 :: (-> S4 S3 Int)
decl f8 :: S3
#11 := f8
decl f6 :: S4
#8 := f6
#12 := (f5 f6 f8)
#59 := -1::Int
#60 := (* -1::Int #12)
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#61 := (+ #10 #60)
#64 := (f3 f4 #61)
#67 := (= #64 #16)
#290 := (f5 f6 #64)
#535 := (f3 f4 #290)
#460 := (= #535 #16)
#484 := (= #16 #535)
#459 := (= 0::Int #290)
#610 := (= #290 0::Int)
#309 := (>= #61 0::Int)
#310 := (not #309)
#70 := (* -1::Int #10)
#71 := (+ #70 #12)
#74 := (f3 f4 #71)
#435 := (f5 f6 #74)
#546 := (<= #435 0::Int)
#487 := (not #546)
#451 := (= #435 0::Int)
#508 := (not #451)
#77 := (= #74 #16)
#542 := (f3 f4 #435)
#528 := (= #542 #16)
#524 := (= #16 #542)
#522 := (= 0::Int #435)
#518 := [hypothesis]: #451
#523 := [symm #518]: #522
#525 := [monotonicity #523]: #524
#529 := [symm #525]: #528
#526 := (= #74 #542)
#543 := (= #542 #74)
#23 := (:var 0 S3)
#24 := (f5 f6 #23)
#633 := (pattern #24)
#25 := (f3 f4 #24)
#26 := (= #25 #23)
#634 := (forall (vars (?v0 S3)) (:pat #633) #26)
#27 := (forall (vars (?v0 S3)) #26)
#637 := (iff #27 #634)
#635 := (iff #26 #26)
#636 := [refl]: #635
#638 := [quant-intro #636]: #637
#156 := (~ #27 #27)
#154 := (~ #26 #26)
#155 := [refl]: #154
#157 := [nnf-pos #155]: #156
#91 := [asserted]: #27
#146 := [mp~ #91 #157]: #27
#639 := [mp #146 #638]: #634
#306 := (not #634)
#533 := (or #306 #543)
#537 := [quant-inst #74]: #533
#517 := [unit-resolution #537 #639]: #543
#527 := [symm #517]: #526
#519 := [trans #527 #529]: #77
#89 := (not #77)
#80 := (or #67 #77)
#83 := (not #80)
#18 := (- #12 #10)
#19 := (f3 f4 #18)
#20 := (= #19 #16)
#13 := (- #10 #12)
#14 := (f3 f4 #13)
#17 := (= #14 #16)
#21 := (or #17 #20)
#22 := (not #21)
#84 := (iff #22 #83)
#81 := (iff #21 #80)
#78 := (iff #20 #77)
#75 := (= #19 #74)
#72 := (= #18 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#68 := (iff #17 #67)
#65 := (= #14 #64)
#62 := (= #13 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#69 := [monotonicity #66]: #68
#82 := [monotonicity #69 #79]: #81
#85 := [monotonicity #82]: #84
#58 := [asserted]: #22
#88 := [mp #58 #85]: #83
#90 := [not-or-elim #88]: #89
#530 := [unit-resolution #90 #519]: false
#509 := [lemma #530]: #508
#548 := (>= #435 0::Int)
#579 := (<= #61 0::Int)
#468 := (or #579 #451)
#28 := (:var 0 Int)
#30 := (f3 f4 #28)
#640 := (pattern #30)
#31 := (f5 f6 #30)
#36 := (= #31 0::Int)
#101 := (>= #28 0::Int)
#132 := (or #101 #36)
#647 := (forall (vars (?v0 Int)) (:pat #640) #132)
#135 := (forall (vars (?v0 Int)) #132)
#650 := (iff #135 #647)
#648 := (iff #132 #132)
#649 := [refl]: #648
#651 := [quant-intro #649]: #650
#150 := (~ #135 #135)
#142 := (~ #132 #132)
#143 := [refl]: #142
#151 := [nnf-pos #143]: #150
#35 := (< #28 0::Int)
#37 := (implies #35 #36)
#38 := (forall (vars (?v0 Int)) #37)
#138 := (iff #38 #135)
#116 := (not #35)
#117 := (or #116 #36)
#120 := (forall (vars (?v0 Int)) #117)
#136 := (iff #120 #135)
#133 := (iff #117 #132)
#130 := (iff #116 #101)
#103 := (not #101)
#125 := (not #103)
#128 := (iff #125 #101)
#129 := [rewrite]: #128
#126 := (iff #116 #125)
#123 := (iff #35 #103)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#131 := [trans #127 #129]: #130
#134 := [monotonicity #131]: #133
#137 := [quant-intro #134]: #136
#121 := (iff #38 #120)
#118 := (iff #37 #117)
#119 := [rewrite]: #118
#122 := [quant-intro #119]: #121
#139 := [trans #122 #137]: #138
#115 := [asserted]: #38
#140 := [mp #115 #139]: #135
#158 := [mp~ #140 #151]: #135
#652 := [mp #158 #651]: #647
#614 := (not #647)
#470 := (or #614 #579 #451)
#593 := (>= #71 0::Int)
#466 := (or #593 #451)
#471 := (or #614 #466)
#555 := (iff #471 #470)
#473 := (or #614 #468)
#564 := (iff #473 #470)
#568 := [rewrite]: #564
#474 := (iff #471 #473)
#469 := (iff #466 #468)
#580 := (iff #593 #579)
#581 := [rewrite]: #580
#462 := [monotonicity #581]: #469
#567 := [monotonicity #462]: #474
#557 := [trans #567 #568]: #555
#472 := [quant-inst #71]: #471
#549 := [mp #472 #557]: #470
#513 := [unit-resolution #549 #652]: #468
#503 := [unit-resolution #513 #509]: #579
#583 := (+ #60 #435)
#577 := (+ #10 #583)
#566 := (>= #577 0::Int)
#584 := (= #577 0::Int)
#575 := (not #579)
#416 := (or #575 #584)
#32 := (= #31 #28)
#106 := (or #103 #32)
#641 := (forall (vars (?v0 Int)) (:pat #640) #106)
#109 := (forall (vars (?v0 Int)) #106)
#644 := (iff #109 #641)
#642 := (iff #106 #106)
#643 := [refl]: #642
#645 := [quant-intro #643]: #644
#148 := (~ #109 #109)
#147 := (~ #106 #106)
#144 := [refl]: #147
#149 := [nnf-pos #144]: #148
#29 := (<= 0::Int #28)
#33 := (implies #29 #32)
#34 := (forall (vars (?v0 Int)) #33)
#112 := (iff #34 #109)
#93 := (not #29)
#94 := (or #93 #32)
#97 := (forall (vars (?v0 Int)) #94)
#110 := (iff #97 #109)
#107 := (iff #94 #106)
#104 := (iff #93 #103)
#100 := (iff #29 #101)
#102 := [rewrite]: #100
#105 := [monotonicity #102]: #104
#108 := [monotonicity #105]: #107
#111 := [quant-intro #108]: #110
#98 := (iff #34 #97)
#95 := (iff #33 #94)
#96 := [rewrite]: #95
#99 := [quant-intro #96]: #98
#113 := [trans #99 #111]: #112
#92 := [asserted]: #34
#114 := [mp #92 #113]: #109
#145 := [mp~ #114 #149]: #109
#646 := [mp #145 #645]: #641
#626 := (not #641)
#572 := (or #626 #575 #584)
#436 := (= #435 #71)
#434 := (not #593)
#578 := (or #434 #436)
#573 := (or #626 #578)
#565 := (iff #573 #572)
#574 := (or #626 #416)
#458 := (iff #574 #572)
#417 := [rewrite]: #458
#456 := (iff #573 #574)
#569 := (iff #578 #416)
#413 := (iff #436 #584)
#415 := [rewrite]: #413
#576 := (iff #434 #575)
#582 := [monotonicity #581]: #576
#570 := [monotonicity #582 #415]: #569
#457 := [monotonicity #570]: #456
#467 := [trans #457 #417]: #565
#571 := [quant-inst #71]: #573
#562 := [mp #571 #467]: #572
#504 := [unit-resolution #562 #646]: #416
#505 := [unit-resolution #504 #503]: #584
#506 := (not #584)
#501 := (or #506 #566)
#507 := [th-lemma arith triangle-eq]: #501
#480 := [unit-resolution #507 #505]: #566
#481 := (not #566)
#482 := (or #548 #481 #575)
#375 := [th-lemma arith assign-bounds 1 -1]: #482
#486 := [unit-resolution #375 #480 #503]: #548
#488 := (not #548)
#493 := (or #451 #487 #488)
#489 := [th-lemma arith triangle-eq]: #493
#490 := [unit-resolution #489 #486 #509]: #487
#563 := (<= #577 0::Int)
#491 := (or #506 #563)
#494 := [th-lemma arith triangle-eq]: #491
#495 := [unit-resolution #494 #505]: #563
#496 := (not #563)
#492 := (or #310 #546 #496)
#497 := [th-lemma arith assign-bounds 1 -1]: #492
#477 := [unit-resolution #497 #495 #490]: #310
#611 := (or #309 #610)
#609 := (or #614 #309 #610)
#615 := (or #614 #611)
#616 := (iff #615 #609)
#618 := [rewrite]: #616
#253 := [quant-inst #61]: #615
#258 := [mp #253 #618]: #609
#423 := [unit-resolution #258 #652]: #611
#478 := [unit-resolution #423 #477]: #610
#483 := [symm #478]: #459
#479 := [monotonicity #483]: #484
#419 := [symm #479]: #460
#485 := (= #64 #535)
#536 := (= #535 #64)
#499 := (or #306 #536)
#500 := [quant-inst #64]: #499
#512 := [unit-resolution #500 #639]: #536
#453 := [symm #512]: #485
#450 := [trans #453 #419]: #67
#86 := (not #67)
#87 := [not-or-elim #88]: #86
[unit-resolution #87 #450]: false
unsat
b4a6a90393789bf8defbaef4acfd5e61ff77c32f 270 0
#2 := false
decl f8 :: S3
#11 := f8
decl f7 :: S3
#9 := f7
#27 := 0::Int
decl f5 :: (-> S4 S3 Int)
decl f6 :: S4
#8 := f6
#12 := (f5 f6 f8)
#59 := -1::Int
#60 := (* -1::Int #12)
#10 := (f5 f6 f7)
#61 := (+ #10 #60)
#88 := (>= #61 0::Int)
#94 := (if #88 f7 f8)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#64 := (f3 f4 #61)
#67 := (f5 f6 #64)
#73 := (+ #12 #67)
#78 := (f3 f4 #73)
#99 := (= #78 #94)
#321 := (= f8 #94)
#87 := (not #88)
#236 := (= f7 #94)
#489 := [hypothesis]: #88
#237 := (or #87 #236)
#322 := [def-axiom]: #237
#490 := [unit-resolution #322 #489]: #236
#515 := (= #78 f7)
#327 := (f3 f4 #10)
#324 := (= #327 f7)
#22 := (:var 0 S3)
#23 := (f5 f6 #22)
#650 := (pattern #23)
#24 := (f3 f4 #23)
#25 := (= #24 #22)
#651 := (forall (vars (?v0 S3)) (:pat #650) #25)
#26 := (forall (vars (?v0 S3)) #25)
#654 := (iff #26 #651)
#652 := (iff #25 #25)
#653 := [refl]: #652
#655 := [quant-intro #653]: #654
#171 := (~ #26 #26)
#169 := (~ #25 #25)
#170 := [refl]: #169
#172 := [nnf-pos #170]: #171
#108 := [asserted]: #26
#161 := [mp~ #108 #172]: #26
#656 := [mp #161 #655]: #651
#328 := (not #651)
#431 := (or #328 #324)
#638 := [quant-inst #9]: #431
#576 := [unit-resolution #638 #656]: #324
#532 := (= #78 #327)
#549 := (= #73 #10)
#567 := (= #10 #73)
#643 := (* -1::Int #67)
#649 := (+ #60 #643)
#639 := (+ #10 #649)
#626 := (<= #639 0::Int)
#648 := (= #639 0::Int)
#304 := (or #87 #648)
#28 := (:var 0 Int)
#30 := (f3 f4 #28)
#657 := (pattern #30)
#31 := (f5 f6 #30)
#32 := (= #31 #28)
#118 := (>= #28 0::Int)
#120 := (not #118)
#123 := (or #120 #32)
#658 := (forall (vars (?v0 Int)) (:pat #657) #123)
#126 := (forall (vars (?v0 Int)) #123)
#661 := (iff #126 #658)
#659 := (iff #123 #123)
#660 := [refl]: #659
#662 := [quant-intro #660]: #661
#163 := (~ #126 #126)
#162 := (~ #123 #123)
#159 := [refl]: #162
#164 := [nnf-pos #159]: #163
#29 := (<= 0::Int #28)
#33 := (implies #29 #32)
#34 := (forall (vars (?v0 Int)) #33)
#129 := (iff #34 #126)
#110 := (not #29)
#111 := (or #110 #32)
#114 := (forall (vars (?v0 Int)) #111)
#127 := (iff #114 #126)
#124 := (iff #111 #123)
#121 := (iff #110 #120)
#117 := (iff #29 #118)
#119 := [rewrite]: #117
#122 := [monotonicity #119]: #121
#125 := [monotonicity #122]: #124
#128 := [quant-intro #125]: #127
#115 := (iff #34 #114)
#112 := (iff #33 #111)
#113 := [rewrite]: #112
#116 := [quant-intro #113]: #115
#130 := [trans #116 #128]: #129
#109 := [asserted]: #34
#131 := [mp #109 #130]: #126
#160 := [mp~ #131 #164]: #126
#663 := [mp #160 #662]: #658
#641 := (not #658)
#284 := (or #641 #87 #648)
#312 := (= #67 #61)
#313 := (or #87 #312)
#625 := (or #641 #313)
#629 := (iff #625 #284)
#289 := (or #641 #304)
#627 := (iff #289 #284)
#628 := [rewrite]: #627
#290 := (iff #625 #289)
#640 := (iff #313 #304)
#647 := (iff #312 #648)
#299 := [rewrite]: #647
#300 := [monotonicity #299]: #640
#291 := [monotonicity #300]: #290
#630 := [trans #291 #628]: #629
#288 := [quant-inst #61]: #625
#631 := [mp #288 #630]: #284
#544 := [unit-resolution #631 #663]: #304
#545 := [unit-resolution #544 #489]: #648
#546 := (not #648)
#536 := (or #546 #626)
#547 := [th-lemma arith triangle-eq]: #536
#525 := [unit-resolution #547 #545]: #626
#632 := (>= #639 0::Int)
#526 := (or #546 #632)
#528 := [th-lemma arith triangle-eq]: #526
#529 := [unit-resolution #528 #545]: #632
#530 := [th-lemma arith eq-propagate -1 -1 #529 #525]: #567
#531 := [symm #530]: #549
#527 := [monotonicity #531]: #532
#516 := [trans #527 #576]: #515
#517 := [trans #516 #490]: #99
#102 := (not #99)
#18 := (< #10 #12)
#19 := (if #18 f8 f7)
#13 := (- #10 #12)
#14 := (f3 f4 #13)
#15 := (f5 f6 #14)
#16 := (+ #15 #12)
#17 := (f3 f4 #16)
#20 := (= #17 #19)
#21 := (not #20)
#105 := (iff #21 #102)
#81 := (= #78 #19)
#84 := (not #81)
#103 := (iff #84 #102)
#100 := (iff #81 #99)
#97 := (= #19 #94)
#91 := (if #87 f8 f7)
#95 := (= #91 #94)
#96 := [rewrite]: #95
#92 := (= #19 #91)
#89 := (iff #18 #87)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#98 := [trans #93 #96]: #97
#101 := [monotonicity #98]: #100
#104 := [monotonicity #101]: #103
#85 := (iff #21 #84)
#82 := (iff #20 #81)
#79 := (= #17 #78)
#76 := (= #16 #73)
#70 := (+ #67 #12)
#74 := (= #70 #73)
#75 := [rewrite]: #74
#71 := (= #16 #70)
#68 := (= #15 #67)
#65 := (= #14 #64)
#62 := (= #13 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#77 := [trans #72 #75]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#106 := [trans #86 #104]: #105
#58 := [asserted]: #21
#107 := [mp #58 #106]: #102
#520 := [unit-resolution #107 #517]: false
#521 := [lemma #520]: #87
#323 := (or #88 #321)
#314 := [def-axiom]: #323
#542 := [unit-resolution #314 #521]: #321
#511 := (= #78 f8)
#325 := (f3 f4 #12)
#326 := (= #325 f8)
#307 := (or #328 #326)
#642 := [quant-inst #11]: #307
#543 := [unit-resolution #642 #656]: #326
#510 := (= #78 #325)
#504 := (= #73 #12)
#392 := (= #12 #73)
#347 := (<= #67 0::Int)
#270 := (= #67 0::Int)
#633 := (or #88 #270)
#36 := (= #31 0::Int)
#149 := (or #118 #36)
#664 := (forall (vars (?v0 Int)) (:pat #657) #149)
#152 := (forall (vars (?v0 Int)) #149)
#667 := (iff #152 #664)
#665 := (iff #149 #149)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#165 := (~ #152 #152)
#173 := (~ #149 #149)
#174 := [refl]: #173
#166 := [nnf-pos #174]: #165
#35 := (< #28 0::Int)
#37 := (implies #35 #36)
#38 := (forall (vars (?v0 Int)) #37)
#155 := (iff #38 #152)
#133 := (not #35)
#134 := (or #133 #36)
#137 := (forall (vars (?v0 Int)) #134)
#153 := (iff #137 #152)
#150 := (iff #134 #149)
#147 := (iff #133 #118)
#142 := (not #120)
#145 := (iff #142 #118)
#146 := [rewrite]: #145
#143 := (iff #133 #142)
#140 := (iff #35 #120)
#141 := [rewrite]: #140
#144 := [monotonicity #141]: #143
#148 := [trans #144 #146]: #147
#151 := [monotonicity #148]: #150
#154 := [quant-intro #151]: #153
#138 := (iff #38 #137)
#135 := (iff #37 #134)
#136 := [rewrite]: #135
#139 := [quant-intro #136]: #138
#156 := [trans #139 #154]: #155
#132 := [asserted]: #38
#157 := [mp #132 #156]: #152
#175 := [mp~ #157 #166]: #152
#669 := [mp #175 #668]: #664
#276 := (not #664)
#636 := (or #276 #88 #270)
#634 := (or #276 #633)
#623 := (iff #634 #636)
#624 := [rewrite]: #623
#637 := [quant-inst #61]: #634
#346 := [mp #637 #624]: #636
#533 := [unit-resolution #346 #669]: #633
#519 := [unit-resolution #533 #521]: #270
#522 := (not #270)
#523 := (or #522 #347)
#518 := [th-lemma arith triangle-eq]: #523
#524 := [unit-resolution #518 #519]: #347
#348 := (>= #67 0::Int)
#497 := (or #522 #348)
#498 := [th-lemma arith triangle-eq]: #497
#499 := [unit-resolution #498 #519]: #348
#503 := [th-lemma arith eq-propagate 1 1 #499 #524]: #392
#505 := [symm #503]: #504
#506 := [monotonicity #505]: #510
#512 := [trans #506 #543]: #511
#513 := [trans #512 #542]: #99
[unit-resolution #107 #513]: false
unsat
fb9388a38938cbf21b6b2ff0332cf8b767f78d03 468 0
#2 := false
#30 := 0::Int
decl f5 :: (-> S4 S3 Int)
decl f3 :: (-> S2 Int S3)
decl f8 :: S3
#11 := f8
decl f6 :: S4
#8 := f6
#12 := (f5 f6 f8)
#62 := -1::Int
#63 := (* -1::Int #12)
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#64 := (+ #10 #63)
decl f4 :: S2
#7 := f4
#67 := (f3 f4 #64)
#70 := (f5 f6 #67)
#640 := (* -1::Int #70)
#630 := (+ #63 #640)
#290 := (+ #10 #630)
#639 := (= #290 0::Int)
#491 := (not #639)
#623 := (>= #290 0::Int)
#347 := (not #623)
decl f9 :: S3
#16 := f9
#17 := (f5 f6 f9)
#76 := (* -1::Int #17)
#85 := (+ #63 #76)
#86 := (+ #10 #85)
#581 := (>= #86 0::Int)
#579 := (not #581)
#89 := (f3 f4 #86)
#77 := (+ #76 #70)
#82 := (f3 f4 #77)
#92 := (= #82 #89)
#582 := (f5 f6 #89)
#510 := (f3 f4 #582)
#506 := (= #510 #89)
#25 := (:var 0 S3)
#26 := (f5 f6 #25)
#641 := (pattern #26)
#27 := (f3 f4 #26)
#28 := (= #27 #25)
#642 := (forall (vars (?v0 S3)) (:pat #641) #28)
#29 := (forall (vars (?v0 S3)) #28)
#645 := (iff #29 #642)
#643 := (iff #28 #28)
#644 := [refl]: #643
#646 := [quant-intro #644]: #645
#162 := (~ #29 #29)
#160 := (~ #28 #28)
#161 := [refl]: #160
#163 := [nnf-pos #161]: #162
#98 := [asserted]: #29
#152 := [mp~ #98 #163]: #29
#647 := [mp #152 #646]: #642
#314 := (not #642)
#463 := (or #314 #506)
#484 := [quant-inst #89]: #463
#448 := [unit-resolution #484 #647]: #506
#441 := (= #82 #510)
#369 := (= #77 #582)
#570 := (* -1::Int #582)
#571 := (+ #76 #570)
#574 := (+ #63 #571)
#459 := (+ #10 #574)
#565 := (<= #459 0::Int)
#425 := (= #459 0::Int)
#258 := [hypothesis]: #581
#475 := (or #579 #425)
#31 := (:var 0 Int)
#33 := (f3 f4 #31)
#648 := (pattern #33)
#34 := (f5 f6 #33)
#35 := (= #34 #31)
#109 := (>= #31 0::Int)
#111 := (not #109)
#114 := (or #111 #35)
#649 := (forall (vars (?v0 Int)) (:pat #648) #114)
#117 := (forall (vars (?v0 Int)) #114)
#652 := (iff #117 #649)
#650 := (iff #114 #114)
#651 := [refl]: #650
#653 := [quant-intro #651]: #652
#154 := (~ #117 #117)
#153 := (~ #114 #114)
#150 := [refl]: #153
#155 := [nnf-pos #150]: #154
#32 := (<= 0::Int #31)
#36 := (implies #32 #35)
#37 := (forall (vars (?v0 Int)) #36)
#120 := (iff #37 #117)
#101 := (not #32)
#102 := (or #101 #35)
#105 := (forall (vars (?v0 Int)) #102)
#118 := (iff #105 #117)
#115 := (iff #102 #114)
#112 := (iff #101 #111)
#108 := (iff #32 #109)
#110 := [rewrite]: #108
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#106 := (iff #37 #105)
#103 := (iff #36 #102)
#104 := [rewrite]: #103
#107 := [quant-intro #104]: #106
#121 := [trans #107 #119]: #120
#99 := [asserted]: #37
#122 := [mp #99 #121]: #117
#151 := [mp~ #122 #155]: #117
#654 := [mp #151 #653]: #649
#632 := (not #649)
#477 := (or #632 #579 #425)
#464 := (= #582 #86)
#465 := (or #579 #464)
#470 := (or #632 #465)
#572 := (iff #470 #477)
#479 := (or #632 #475)
#482 := (iff #479 #477)
#575 := [rewrite]: #482
#480 := (iff #470 #479)
#474 := (iff #465 #475)
#466 := (iff #464 #425)
#573 := [rewrite]: #466
#476 := [monotonicity #573]: #474
#481 := [monotonicity #476]: #480
#576 := [trans #481 #575]: #572
#478 := [quant-inst #86]: #470
#563 := [mp #478 #576]: #477
#497 := [unit-resolution #563 #654]: #475
#389 := [unit-resolution #497 #258]: #425
#499 := (not #425)
#434 := (or #499 #565)
#435 := [th-lemma arith triangle-eq]: #434
#393 := [unit-resolution #435 #389]: #565
#557 := (>= #459 0::Int)
#502 := (or #499 #557)
#503 := [th-lemma arith triangle-eq]: #502
#386 := [unit-resolution #503 #389]: #557
#617 := (<= #290 0::Int)
#422 := (>= #64 0::Int)
#555 := (>= #582 0::Int)
#394 := (not #565)
#387 := (or #555 #394 #579)
#390 := [th-lemma arith assign-bounds 1 -1]: #387
#391 := [unit-resolution #390 #393 #258]: #555
#485 := (not #557)
#505 := (not #555)
#380 := (or #422 #505 #485)
#566 := (>= #17 0::Int)
#415 := (= #17 0::Int)
#227 := (f3 f4 #17)
#567 := (f5 f6 #227)
#562 := (= #567 0::Int)
#405 := (not #566)
#406 := [hypothesis]: #405
#546 := (or #566 #562)
#39 := (= #34 0::Int)
#140 := (or #109 #39)
#655 := (forall (vars (?v0 Int)) (:pat #648) #140)
#143 := (forall (vars (?v0 Int)) #140)
#658 := (iff #143 #655)
#656 := (iff #140 #140)
#657 := [refl]: #656
#659 := [quant-intro #657]: #658
#156 := (~ #143 #143)
#164 := (~ #140 #140)
#165 := [refl]: #164
#157 := [nnf-pos #165]: #156
#38 := (< #31 0::Int)
#40 := (implies #38 #39)
#41 := (forall (vars (?v0 Int)) #40)
#146 := (iff #41 #143)
#124 := (not #38)
#125 := (or #124 #39)
#128 := (forall (vars (?v0 Int)) #125)
#144 := (iff #128 #143)
#141 := (iff #125 #140)
#138 := (iff #124 #109)
#133 := (not #111)
#136 := (iff #133 #109)
#137 := [rewrite]: #136
#134 := (iff #124 #133)
#131 := (iff #38 #111)
#132 := [rewrite]: #131
#135 := [monotonicity #132]: #134
#139 := [trans #135 #137]: #138
#142 := [monotonicity #139]: #141
#145 := [quant-intro #142]: #144
#129 := (iff #41 #128)
#126 := (iff #40 #125)
#127 := [rewrite]: #126
#130 := [quant-intro #127]: #129
#147 := [trans #130 #145]: #146
#123 := [asserted]: #41
#148 := [mp #123 #147]: #143
#166 := [mp~ #148 #157]: #143
#660 := [mp #166 #659]: #655
#267 := (not #655)
#550 := (or #267 #566 #562)
#551 := (or #267 #546)
#548 := (iff #551 #550)
#553 := [rewrite]: #548
#552 := [quant-inst #17]: #551
#539 := [mp #552 #553]: #550
#404 := [unit-resolution #539 #660]: #546
#407 := [unit-resolution #404 #406]: #562
#401 := (= #17 #567)
#398 := (= f9 #227)
#312 := (= #227 f9)
#305 := (or #314 #312)
#316 := [quant-inst #16]: #305
#395 := [unit-resolution #316 #647]: #312
#400 := [symm #395]: #398
#397 := [monotonicity #400]: #401
#402 := [trans #397 #407]: #415
#392 := (not #415)
#382 := (or #392 #566)
#384 := [th-lemma arith triangle-eq]: #382
#385 := [unit-resolution #384 #406 #402]: false
#388 := [lemma #385]: #566
#377 := (or #405 #422 #505 #485)
#379 := [th-lemma arith assign-bounds 1 1 1]: #377
#378 := [unit-resolution #379 #388]: #380
#381 := [unit-resolution #378 #391 #386]: #422
#629 := (not #422)
#295 := (or #629 #639)
#275 := (or #632 #629 #639)
#636 := (= #70 #64)
#637 := (or #629 #636)
#616 := (or #632 #637)
#620 := (iff #616 #275)
#280 := (or #632 #295)
#618 := (iff #280 #275)
#619 := [rewrite]: #618
#281 := (iff #616 #280)
#631 := (iff #637 #295)
#638 := (iff #636 #639)
#634 := [rewrite]: #638
#291 := [monotonicity #634]: #631
#282 := [monotonicity #291]: #281
#621 := [trans #282 #619]: #620
#279 := [quant-inst #64]: #616
#622 := [mp #279 #621]: #275
#461 := [unit-resolution #622 #654]: #295
#363 := [unit-resolution #461 #381]: #639
#492 := (or #491 #617)
#487 := [th-lemma arith triangle-eq]: #492
#365 := [unit-resolution #487 #363]: #617
#366 := (or #491 #623)
#367 := [th-lemma arith triangle-eq]: #366
#368 := [unit-resolution #367 #363]: #623
#370 := [th-lemma arith eq-propagate 1 1 -1 -1 #368 #365 #386 #393]: #369
#371 := [monotonicity #370]: #441
#372 := [trans #371 #448]: #92
#95 := (not #92)
#20 := (+ #12 #17)
#21 := (- #10 #20)
#22 := (f3 f4 #21)
#13 := (- #10 #12)
#14 := (f3 f4 #13)
#15 := (f5 f6 #14)
#18 := (- #15 #17)
#19 := (f3 f4 #18)
#23 := (= #19 #22)
#24 := (not #23)
#96 := (iff #24 #95)
#93 := (iff #23 #92)
#90 := (= #22 #89)
#87 := (= #21 #86)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#83 := (= #19 #82)
#80 := (= #18 #77)
#73 := (- #70 #17)
#78 := (= #73 #77)
#79 := [rewrite]: #78
#74 := (= #18 #73)
#71 := (= #15 #70)
#68 := (= #14 #67)
#65 := (= #13 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#81 := [trans #75 #79]: #80
#84 := [monotonicity #81]: #83
#94 := [monotonicity #84 #91]: #93
#97 := [monotonicity #94]: #96
#61 := [asserted]: #24
#100 := [mp #61 #97]: #95
#373 := [unit-resolution #100 #372]: false
#374 := [lemma #373]: #579
#340 := (f5 f6 #82)
#580 := (>= #340 0::Int)
#611 := (+ #17 #640)
#333 := (<= #611 0::Int)
#554 := (= #582 0::Int)
#490 := (not #554)
#443 := (= #340 0::Int)
#612 := (not #333)
#489 := [hypothesis]: #612
#586 := (or #333 #443)
#589 := (or #267 #333 #443)
#626 := (>= #77 0::Int)
#444 := (or #626 #443)
#583 := (or #267 #444)
#423 := (iff #583 #589)
#590 := (or #267 #586)
#592 := (iff #590 #589)
#421 := [rewrite]: #592
#591 := (iff #583 #590)
#587 := (iff #444 #586)
#334 := (iff #626 #333)
#608 := [rewrite]: #334
#588 := [monotonicity #608]: #587
#585 := [monotonicity #588]: #591
#424 := [trans #585 #421]: #423
#584 := [quant-inst #77]: #583
#577 := [mp #584 #424]: #589
#449 := [unit-resolution #577 #660]: #586
#450 := [unit-resolution #449 #489]: #443
#426 := (not #443)
#428 := (or #490 #426)
#517 := (f3 f4 #340)
#455 := (= #517 #510)
#451 := (= #510 #517)
#446 := (= #582 #340)
#440 := (= 0::Int #340)
#514 := [hypothesis]: #443
#445 := [symm #514]: #440
#439 := [hypothesis]: #554
#447 := [trans #439 #445]: #446
#452 := [monotonicity #447]: #451
#456 := [symm #452]: #455
#453 := (= #82 #517)
#519 := (= #517 #82)
#507 := (or #314 #519)
#508 := [quant-inst #82]: #507
#513 := [unit-resolution #508 #647]: #519
#454 := [symm #513]: #453
#457 := [trans #454 #456]: #441
#418 := [trans #457 #448]: #92
#419 := [unit-resolution #100 #418]: false
#429 := [lemma #419]: #428
#430 := [unit-resolution #429 #450]: #490
#556 := (or #581 #554)
#568 := (or #267 #581 #554)
#564 := (or #267 #556)
#558 := (iff #564 #568)
#559 := [rewrite]: #558
#569 := [quant-inst #86]: #564
#560 := [mp #569 #559]: #568
#496 := [unit-resolution #560 #660]: #556
#432 := [unit-resolution #496 #430]: #581
#433 := [unit-resolution #497 #432]: #425
#436 := [unit-resolution #435 #433]: #565
#561 := (<= #582 0::Int)
#473 := (or #561 #333)
#339 := (>= #70 0::Int)
#261 := (= #70 0::Int)
#500 := (not #617)
#511 := (not #561)
#512 := [hypothesis]: #511
#509 := (or #555 #561)
#515 := [th-lemma arith farkas 1 1]: #509
#488 := [unit-resolution #515 #512]: #555
#383 := (or #490 #561)
#494 := [th-lemma arith triangle-eq]: #383
#495 := [unit-resolution #494 #512]: #490
#501 := [unit-resolution #496 #495]: #581
#498 := [unit-resolution #497 #501]: #425
#504 := [unit-resolution #503 #498]: #557
#431 := (or #500 #333 #505 #485)
#486 := [th-lemma arith assign-bounds 1 1 -1]: #431
#467 := [unit-resolution #486 #504 #489 #488]: #500
#493 := [unit-resolution #487 #467]: #491
#468 := [unit-resolution #461 #493]: #629
#624 := (or #422 #261)
#627 := (or #267 #422 #261)
#625 := (or #267 #624)
#614 := (iff #625 #627)
#615 := [rewrite]: #614
#628 := [quant-inst #64]: #625
#337 := [mp #628 #615]: #627
#427 := [unit-resolution #337 #660]: #624
#458 := [unit-resolution #427 #468]: #261
#460 := (not #261)
#462 := (or #460 #339)
#469 := [th-lemma arith triangle-eq]: #462
#471 := [unit-resolution #469 #458]: #339
#472 := [th-lemma arith farkas 1 1 1 1 1 #489 #468 #488 #504 #471]: false
#483 := [lemma #472]: #473
#437 := [unit-resolution #483 #489]: #561
#420 := (or #554 #511 #505)
#438 := [th-lemma arith triangle-eq]: #420
#408 := [unit-resolution #438 #430 #437]: #505
#409 := [th-lemma arith farkas 1 -1 1 #408 #432 #436]: false
#410 := [lemma #409]: #333
#323 := (+ #640 #340)
#324 := (+ #17 #323)
#442 := (>= #324 0::Int)
#325 := (= #324 0::Int)
#605 := (or #612 #325)
#606 := (or #632 #612 #325)
#234 := (= #340 #77)
#266 := (not #626)
#610 := (or #266 #234)
#603 := (or #632 #610)
#599 := (iff #603 #606)
#596 := (or #632 #605)
#593 := (iff #596 #606)
#594 := [rewrite]: #593
#597 := (iff #603 #596)
#320 := (iff #610 #605)
#326 := (iff #234 #325)
#604 := [rewrite]: #326
#609 := (iff #266 #612)
#613 := [monotonicity #608]: #609
#602 := [monotonicity #613 #604]: #320
#598 := [monotonicity #602]: #597
#600 := [trans #598 #594]: #599
#607 := [quant-inst #77]: #603
#595 := [mp #607 #600]: #606
#375 := [unit-resolution #595 #654]: #605
#364 := [unit-resolution #375 #410]: #325
#376 := (not #325)
#353 := (or #376 #442)
#355 := [th-lemma arith triangle-eq]: #353
#356 := [unit-resolution #355 #364]: #442
#357 := (not #442)
#358 := (or #580 #357 #612)
#359 := [th-lemma arith assign-bounds 1 -1]: #358
#360 := [unit-resolution #359 #356 #410]: #580
#601 := (<= #324 0::Int)
#361 := (or #376 #601)
#354 := [th-lemma arith triangle-eq]: #361
#362 := [unit-resolution #354 #364]: #601
#349 := (not #601)
#348 := (not #580)
#351 := (or #347 #581 #348 #349)
#350 := [th-lemma arith assign-bounds 1 1 -1]: #351
#352 := [unit-resolution #350 #362 #360 #374]: #347
#341 := [unit-resolution #367 #352]: #491
#338 := (<= #70 0::Int)
#328 := (not #338)
#578 := (<= #340 0::Int)
#335 := (not #578)
#342 := [unit-resolution #496 #374]: #554
#343 := [unit-resolution #429 #342]: #426
#336 := (or #443 #335)
#344 := (or #443 #335 #348)
#345 := [th-lemma arith triangle-eq]: #344
#346 := [unit-resolution #345 #360]: #336
#327 := [unit-resolution #346 #343]: #335
#329 := (or #328 #405 #578 #349)
#321 := [th-lemma arith assign-bounds -1 -1 1]: #329
#330 := [unit-resolution #321 #362 #327 #388]: #328
#331 := (or #460 #338)
#322 := [th-lemma arith triangle-eq]: #331
#332 := [unit-resolution #322 #330]: #460
#299 := [unit-resolution #427 #332]: #422
[unit-resolution #461 #299 #341]: false
unsat
c3fe9dd07d48c19f169e86364b6e16e6491742af 37 0
#2 := false
decl f3 :: (-> S2 Int S3)
#11 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#9 := f7
decl f6 :: S4
#8 := f6
#10 := (f5 f6 f7)
#12 := (* #10 0::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#16 := (not #15)
#68 := (iff #16 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #16 #63)
#61 := (iff #15 true)
#56 := (= #14 #14)
#59 := (iff #56 true)
#60 := [rewrite]: #59
#57 := (iff #15 #56)
#53 := (= #12 0::Int)
#54 := [rewrite]: #53
#55 := [monotonicity #54]: #15
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#52 := [asserted]: #16
[mp #52 #69]: false
unsat
77553bfdf91cbdbb4f547370608d4248384211db 37 0
#2 := false
decl f3 :: (-> S2 Int S3)
#8 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#10 := f7
decl f6 :: S4
#9 := f6
#11 := (f5 f6 f7)
#12 := (* 0::Int #11)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#16 := (not #15)
#68 := (iff #16 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #16 #63)
#61 := (iff #15 true)
#56 := (= #14 #14)
#59 := (iff #56 true)
#60 := [rewrite]: #59
#57 := (iff #15 #56)
#53 := (= #12 0::Int)
#54 := [rewrite]: #53
#55 := [monotonicity #54]: #15
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#52 := [asserted]: #16
[mp #52 #69]: false
unsat
1749d19b84217f6922dc5d71d8e67fefffa1dd3a 51 0
#2 := false
decl f5 :: (-> S4 S3 Int)
#16 := (:var 0 S3)
decl f6 :: S4
#8 := f6
#17 := (f5 f6 #16)
#607 := (pattern #17)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#18 := (f3 f4 #17)
#19 := (= #18 #16)
#608 := (forall (vars (?v0 S3)) (:pat #607) #19)
#20 := (forall (vars (?v0 S3)) #19)
#611 := (iff #20 #608)
#609 := (iff #19 #19)
#610 := [refl]: #609
#612 := [quant-intro #610]: #611
#128 := (~ #20 #20)
#126 := (~ #19 #19)
#127 := [refl]: #126
#129 := [nnf-pos #127]: #128
#64 := [asserted]: #20
#118 := [mp~ #64 #129]: #20
#613 := [mp #118 #612]: #608
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#55 := (f3 f4 #10)
#58 := (= #55 f7)
#61 := (not #58)
#11 := 1::Int
#12 := (* #10 1::Int)
#13 := (f3 f4 #12)
#14 := (= #13 f7)
#15 := (not #14)
#62 := (iff #15 #61)
#59 := (iff #14 #58)
#56 := (= #13 #55)
#53 := (= #12 #10)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#52 := [asserted]: #15
#66 := [mp #52 #63]: #61
#278 := (not #608)
#279 := (or #278 #58)
#270 := [quant-inst #9]: #279
[unit-resolution #270 #66 #613]: false
unsat
67566504424067f67a103ec753b4c58eea51e2b0 51 0
#2 := false
decl f5 :: (-> S4 S3 Int)
#16 := (:var 0 S3)
decl f6 :: S4
#9 := f6
#17 := (f5 f6 #16)
#607 := (pattern #17)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#18 := (f3 f4 #17)
#19 := (= #18 #16)
#608 := (forall (vars (?v0 S3)) (:pat #607) #19)
#20 := (forall (vars (?v0 S3)) #19)
#611 := (iff #20 #608)
#609 := (iff #19 #19)
#610 := [refl]: #609
#612 := [quant-intro #610]: #611
#128 := (~ #20 #20)
#126 := (~ #19 #19)
#127 := [refl]: #126
#129 := [nnf-pos #127]: #128
#64 := [asserted]: #20
#118 := [mp~ #64 #129]: #20
#613 := [mp #118 #612]: #608
decl f7 :: S3
#10 := f7
#11 := (f5 f6 f7)
#55 := (f3 f4 #11)
#58 := (= #55 f7)
#61 := (not #58)
#8 := 1::Int
#12 := (* 1::Int #11)
#13 := (f3 f4 #12)
#14 := (= #13 f7)
#15 := (not #14)
#62 := (iff #15 #61)
#59 := (iff #14 #58)
#56 := (= #13 #55)
#53 := (= #12 #11)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#52 := [asserted]: #15
#66 := [mp #52 #63]: #61
#278 := (not #608)
#279 := (or #278 #58)
#270 := [quant-inst #10]: #279
[unit-resolution #270 #66 #613]: false
unsat
9a8122f90fb878d81c9ec24c34cad517ec0e86e9 39 0
#2 := false
decl f3 :: (-> S2 Int S3)
#8 := 3::Int
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#10 := f7
decl f6 :: S4
#9 := f6
#11 := (f5 f6 f7)
#14 := (* #11 3::Int)
decl f4 :: S2
#7 := f4
#15 := (f3 f4 #14)
#12 := (* 3::Int #11)
#13 := (f3 f4 #12)
#16 := (= #13 #15)
#17 := (not #16)
#71 := (iff #17 false)
#1 := true
#66 := (not true)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #17 #66)
#64 := (iff #16 true)
#59 := (= #13 #13)
#62 := (iff #59 true)
#63 := [rewrite]: #62
#60 := (iff #16 #59)
#57 := (= #15 #13)
#55 := (= #14 #12)
#56 := [rewrite]: #55
#58 := [monotonicity #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#54 := [asserted]: #17
[mp #54 #72]: false
unsat
04d7d06577757be1339383f753c875196ebaee4b 246 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#13 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#11 := (f5 #10 0::Int)
#12 := (f3 f4 #11)
#14 := (= #12 #13)
#503 := (= #11 0::Int)
#22 := (:var 0 Int)
#33 := (:var 1 Int)
#34 := (f6 f7 #33)
#35 := (f5 #34 #22)
#830 := (pattern #35)
#135 := -1::Int
#139 := (* -1::Int #22)
#136 := (* -1::Int #33)
#142 := (div #136 #139)
#308 := (* -1::Int #142)
#309 := (+ #35 #308)
#310 := (= #309 0::Int)
#45 := (div #33 #22)
#305 := (* -1::Int #45)
#306 := (+ #35 #305)
#307 := (= #306 0::Int)
#161 := (<= #22 0::Int)
#168 := (>= #33 0::Int)
#268 := (or #168 #161)
#269 := (not #268)
#157 := (<= #33 0::Int)
#266 := (or #157 #161)
#267 := (not #266)
#272 := (or #267 #269)
#311 := (if #272 #307 #310)
#304 := (= #35 0::Int)
#37 := (= #22 0::Int)
#36 := (= #33 0::Int)
#38 := (or #36 #37)
#312 := (if #38 #304 #311)
#831 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #830) #312)
#315 := (forall (vars (?v0 Int) (?v1 Int)) #312)
#834 := (iff #315 #831)
#832 := (iff #312 #312)
#833 := [refl]: #832
#835 := [quant-intro #833]: #834
#275 := (if #272 #45 #142)
#278 := (if #38 0::Int #275)
#281 := (= #35 #278)
#284 := (forall (vars (?v0 Int) (?v1 Int)) #281)
#316 := (iff #284 #315)
#313 := (iff #281 #312)
#314 := [rewrite]: #313
#317 := [quant-intro #314]: #316
#162 := (not #161)
#169 := (not #168)
#172 := (and #169 #162)
#158 := (not #157)
#165 := (and #158 #162)
#175 := (or #165 #172)
#178 := (if #175 #45 #142)
#181 := (if #38 0::Int #178)
#184 := (= #35 #181)
#187 := (forall (vars (?v0 Int) (?v1 Int)) #184)
#285 := (iff #187 #284)
#282 := (iff #184 #281)
#279 := (= #181 #278)
#276 := (= #178 #275)
#273 := (iff #175 #272)
#270 := (iff #172 #269)
#271 := [rewrite]: #270
#251 := (iff #165 #267)
#252 := [rewrite]: #251
#274 := [monotonicity #252 #271]: #273
#277 := [monotonicity #274]: #276
#280 := [monotonicity #277]: #279
#283 := [monotonicity #280]: #282
#286 := [quant-intro #283]: #285
#247 := (~ #187 #187)
#260 := (~ #184 #184)
#261 := [refl]: #260
#248 := [nnf-pos #261]: #247
#47 := (- #22)
#46 := (- #33)
#48 := (div #46 #47)
#40 := (< 0::Int #22)
#42 := (< #33 0::Int)
#43 := (and #42 #40)
#39 := (< 0::Int #33)
#41 := (and #39 #40)
#44 := (or #41 #43)
#49 := (if #44 #45 #48)
#50 := (if #38 0::Int #49)
#51 := (= #35 #50)
#52 := (forall (vars (?v0 Int) (?v1 Int)) #51)
#190 := (iff #52 #187)
#145 := (if #44 #45 #142)
#148 := (if #38 0::Int #145)
#151 := (= #35 #148)
#154 := (forall (vars (?v0 Int) (?v1 Int)) #151)
#188 := (iff #154 #187)
#185 := (iff #151 #184)
#182 := (= #148 #181)
#179 := (= #145 #178)
#176 := (iff #44 #175)
#173 := (iff #43 #172)
#163 := (iff #40 #162)
#164 := [rewrite]: #163
#170 := (iff #42 #169)
#171 := [rewrite]: #170
#174 := [monotonicity #171 #164]: #173
#166 := (iff #41 #165)
#159 := (iff #39 #158)
#160 := [rewrite]: #159
#167 := [monotonicity #160 #164]: #166
#177 := [monotonicity #167 #174]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [quant-intro #186]: #188
#155 := (iff #52 #154)
#152 := (iff #51 #151)
#149 := (= #50 #148)
#146 := (= #49 #145)
#143 := (= #48 #142)
#140 := (= #47 #139)
#141 := [rewrite]: #140
#137 := (= #46 #136)
#138 := [rewrite]: #137
#144 := [monotonicity #138 #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [monotonicity #150]: #152
#156 := [quant-intro #153]: #155
#191 := [trans #156 #189]: #190
#134 := [asserted]: #52
#192 := [mp #134 #191]: #187
#262 := [mp~ #192 #248]: #187
#287 := [mp #262 #286]: #284
#318 := [mp #287 #317]: #315
#836 := [mp #318 #835]: #831
#737 := (not #831)
#733 := (or #737 #503)
#489 := (* -1::Int 0::Int)
#771 := (div #489 #489)
#775 := (* -1::Int #771)
#772 := (+ #11 #775)
#776 := (= #772 0::Int)
#494 := (div 0::Int 0::Int)
#495 := (* -1::Int #494)
#773 := (+ #11 #495)
#774 := (= #773 0::Int)
#777 := (<= 0::Int 0::Int)
#591 := (>= 0::Int 0::Int)
#782 := (or #591 #777)
#492 := (not #782)
#781 := (or #777 #777)
#778 := (not #781)
#493 := (or #778 #492)
#765 := (if #493 #774 #776)
#780 := (= 0::Int 0::Int)
#502 := (or #780 #780)
#766 := (if #502 #503 #765)
#738 := (or #737 #766)
#728 := (iff #738 #733)
#730 := (iff #733 #733)
#724 := [rewrite]: #730
#735 := (iff #766 #503)
#1 := true
#732 := (if true #503 #774)
#723 := (iff #732 #503)
#725 := [rewrite]: #723
#734 := (iff #766 #732)
#741 := (iff #765 #774)
#648 := (if false #774 #774)
#651 := (iff #648 #774)
#744 := [rewrite]: #651
#649 := (iff #765 #648)
#639 := (iff #776 #774)
#645 := (= #772 #773)
#628 := (= #775 #495)
#740 := (= #771 #494)
#644 := (= #489 0::Int)
#739 := [rewrite]: #644
#743 := [monotonicity #739 #739]: #740
#643 := [monotonicity #743]: #628
#646 := [monotonicity #643]: #645
#647 := [monotonicity #646]: #639
#594 := (iff #493 false)
#748 := (or false false)
#634 := (iff #748 false)
#635 := [rewrite]: #634
#751 := (iff #493 #748)
#749 := (iff #492 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#746 := (iff #492 #460)
#592 := (iff #782 true)
#763 := (or true true)
#764 := (iff #763 true)
#770 := [rewrite]: #764
#761 := (iff #782 #763)
#613 := (iff #777 true)
#755 := [rewrite]: #613
#464 := (iff #591 true)
#800 := [rewrite]: #464
#590 := [monotonicity #800 #755]: #761
#593 := [trans #590 #770]: #592
#747 := [monotonicity #593]: #746
#750 := [trans #747 #448]: #749
#760 := (iff #778 false)
#753 := (iff #778 #460)
#758 := (iff #781 true)
#756 := (iff #781 #763)
#757 := [monotonicity #755 #755]: #756
#752 := [trans #757 #770]: #758
#759 := [monotonicity #752]: #753
#754 := [trans #759 #448]: #760
#633 := [monotonicity #754 #750]: #751
#742 := [trans #633 #635]: #594
#650 := [monotonicity #742 #647]: #649
#745 := [trans #650 #744]: #741
#611 := (iff #502 true)
#768 := (iff #502 #763)
#767 := (iff #780 true)
#762 := [rewrite]: #767
#769 := [monotonicity #762 #762]: #768
#612 := [trans #769 #770]: #611
#726 := [monotonicity #612 #745]: #734
#736 := [trans #726 #725]: #735
#729 := [monotonicity #736]: #728
#731 := [trans #729 #724]: #728
#727 := [quant-inst #9 #9]: #738
#715 := [mp #727 #731]: #733
#718 := [unit-resolution #715 #836]: #503
#719 := [monotonicity #718]: #14
#15 := (not #14)
#83 := [asserted]: #15
[unit-resolution #83 #719]: false
unsat
8c194d24ce95c51840adf6b32bc910599b480f95 263 0
#2 := false
decl f3 :: (-> S2 Int S3)
#13 := 0::Int
decl f4 :: S2
#7 := f4
#16 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#10 := f10
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 0::Int)
#15 := (f3 f4 #14)
#17 := (= #15 #16)
#495 := (= #14 0::Int)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#832 := (pattern #37)
#137 := -1::Int
#141 := (* -1::Int #24)
#138 := (* -1::Int #35)
#144 := (div #138 #141)
#310 := (* -1::Int #144)
#311 := (+ #37 #310)
#312 := (= #311 0::Int)
#47 := (div #35 #24)
#307 := (* -1::Int #47)
#308 := (+ #37 #307)
#309 := (= #308 0::Int)
#163 := (<= #24 0::Int)
#170 := (>= #35 0::Int)
#270 := (or #170 #163)
#271 := (not #270)
#159 := (<= #35 0::Int)
#268 := (or #159 #163)
#269 := (not #268)
#274 := (or #269 #271)
#313 := (if #274 #309 #312)
#306 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#314 := (if #40 #306 #313)
#833 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #832) #314)
#317 := (forall (vars (?v0 Int) (?v1 Int)) #314)
#836 := (iff #317 #833)
#834 := (iff #314 #314)
#835 := [refl]: #834
#837 := [quant-intro #835]: #836
#277 := (if #274 #47 #144)
#280 := (if #40 0::Int #277)
#283 := (= #37 #280)
#286 := (forall (vars (?v0 Int) (?v1 Int)) #283)
#318 := (iff #286 #317)
#315 := (iff #283 #314)
#316 := [rewrite]: #315
#319 := [quant-intro #316]: #318
#164 := (not #163)
#171 := (not #170)
#174 := (and #171 #164)
#160 := (not #159)
#167 := (and #160 #164)
#177 := (or #167 #174)
#180 := (if #177 #47 #144)
#183 := (if #40 0::Int #180)
#186 := (= #37 #183)
#189 := (forall (vars (?v0 Int) (?v1 Int)) #186)
#287 := (iff #189 #286)
#284 := (iff #186 #283)
#281 := (= #183 #280)
#278 := (= #180 #277)
#275 := (iff #177 #274)
#272 := (iff #174 #271)
#273 := [rewrite]: #272
#253 := (iff #167 #269)
#254 := [rewrite]: #253
#276 := [monotonicity #254 #273]: #275
#279 := [monotonicity #276]: #278
#282 := [monotonicity #279]: #281
#285 := [monotonicity #282]: #284
#288 := [quant-intro #285]: #287
#249 := (~ #189 #189)
#262 := (~ #186 #186)
#263 := [refl]: #262
#250 := [nnf-pos #263]: #249
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (if #46 #47 #50)
#52 := (if #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#192 := (iff #54 #189)
#147 := (if #46 #47 #144)
#150 := (if #40 0::Int #147)
#153 := (= #37 #150)
#156 := (forall (vars (?v0 Int) (?v1 Int)) #153)
#190 := (iff #156 #189)
#187 := (iff #153 #186)
#184 := (= #150 #183)
#181 := (= #147 #180)
#178 := (iff #46 #177)
#175 := (iff #45 #174)
#165 := (iff #42 #164)
#166 := [rewrite]: #165
#172 := (iff #44 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173 #166]: #175
#168 := (iff #43 #167)
#161 := (iff #41 #160)
#162 := [rewrite]: #161
#169 := [monotonicity #162 #166]: #168
#179 := [monotonicity #169 #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185]: #187
#191 := [quant-intro #188]: #190
#157 := (iff #54 #156)
#154 := (iff #53 #153)
#151 := (= #52 #150)
#148 := (= #51 #147)
#145 := (= #50 #144)
#142 := (= #49 #141)
#143 := [rewrite]: #142
#139 := (= #48 #138)
#140 := [rewrite]: #139
#146 := [monotonicity #140 #143]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#158 := [quant-intro #155]: #157
#193 := [trans #158 #191]: #192
#136 := [asserted]: #54
#194 := [mp #136 #193]: #189
#264 := [mp~ #194 #250]: #189
#289 := [mp #264 #288]: #286
#320 := [mp #289 #319]: #317
#838 := [mp #320 #837]: #833
#713 := (not #833)
#714 := (or #713 #495)
#765 := (* -1::Int 0::Int)
#764 := (* -1::Int #11)
#770 := (div #764 #765)
#771 := (* -1::Int #770)
#766 := (+ #14 #771)
#772 := (= #766 0::Int)
#778 := (div #11 0::Int)
#767 := (* -1::Int #778)
#768 := (+ #14 #767)
#769 := (= #768 0::Int)
#497 := (<= 0::Int 0::Int)
#491 := (>= #11 0::Int)
#773 := (or #491 #497)
#777 := (not #773)
#496 := (<= #11 0::Int)
#775 := (or #496 #497)
#776 := (not #775)
#774 := (or #776 #777)
#613 := (if #774 #769 #772)
#784 := (= 0::Int 0::Int)
#780 := (= #11 0::Int)
#494 := (or #780 #784)
#614 := (if #494 #495 #613)
#715 := (or #713 #614)
#716 := (iff #715 #714)
#697 := (iff #714 #714)
#699 := [rewrite]: #697
#710 := (iff #614 #495)
#734 := (div #764 0::Int)
#725 := (* -1::Int #734)
#738 := (+ #14 #725)
#740 := (= #738 0::Int)
#1 := true
#721 := (if true #495 #740)
#719 := (iff #721 #495)
#724 := [rewrite]: #719
#722 := (iff #614 #721)
#718 := (iff #613 #740)
#731 := (if false #769 #740)
#733 := (iff #731 #740)
#717 := [rewrite]: #733
#732 := (iff #613 #731)
#729 := (iff #772 #740)
#739 := (= #766 #738)
#727 := (= #771 #725)
#736 := (= #770 #734)
#743 := (= #765 0::Int)
#747 := [rewrite]: #743
#728 := [monotonicity #747]: #736
#737 := [monotonicity #728]: #727
#735 := [monotonicity #737]: #739
#730 := [monotonicity #735]: #729
#653 := (iff #774 false)
#641 := (or false false)
#651 := (iff #641 false)
#652 := [rewrite]: #651
#649 := (iff #774 #641)
#647 := (iff #777 false)
#451 := (not true)
#789 := (iff #451 false)
#790 := [rewrite]: #789
#630 := (iff #777 #451)
#742 := (iff #773 true)
#637 := (or #491 true)
#646 := (iff #637 true)
#741 := [rewrite]: #646
#596 := (iff #773 #637)
#756 := (iff #497 true)
#763 := [rewrite]: #756
#744 := [monotonicity #763]: #596
#745 := [trans #744 #741]: #742
#645 := [monotonicity #745]: #630
#648 := [trans #645 #790]: #647
#635 := (iff #776 false)
#750 := (iff #776 #451)
#751 := (iff #775 true)
#592 := (or #496 true)
#748 := (iff #592 true)
#749 := [rewrite]: #748
#594 := (iff #775 #592)
#595 := [monotonicity #763]: #594
#752 := [trans #595 #749]: #751
#753 := [monotonicity #752]: #750
#636 := [trans #753 #790]: #635
#650 := [monotonicity #636 #648]: #649
#746 := [trans #650 #652]: #653
#726 := [monotonicity #746 #730]: #732
#720 := [trans #726 #717]: #718
#761 := (iff #494 true)
#758 := (or #780 true)
#754 := (iff #758 true)
#755 := [rewrite]: #754
#759 := (iff #494 #758)
#615 := (iff #784 true)
#757 := [rewrite]: #615
#760 := [monotonicity #757]: #759
#762 := [trans #760 #755]: #761
#723 := [monotonicity #762 #720]: #722
#711 := [trans #723 #724]: #710
#696 := [monotonicity #711]: #716
#700 := [trans #696 #699]: #716
#712 := [quant-inst #11 #13]: #715
#701 := [mp #712 #700]: #714
#703 := [unit-resolution #701 #838]: #495
#704 := [monotonicity #703]: #17
#18 := (not #17)
#85 := [asserted]: #18
[unit-resolution #85 #704]: false
unsat
4e4622ee8bc45ab84a91b4f6c078726a6c12f7d8 280 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#12 := (f5 #10 1::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#777 := (= #12 0::Int)
#23 := (:var 0 Int)
#34 := (:var 1 Int)
#35 := (f6 f7 #34)
#36 := (f5 #35 #23)
#830 := (pattern #36)
#136 := -1::Int
#140 := (* -1::Int #23)
#137 := (* -1::Int #34)
#143 := (div #137 #140)
#309 := (* -1::Int #143)
#310 := (+ #36 #309)
#311 := (= #310 0::Int)
#46 := (div #34 #23)
#306 := (* -1::Int #46)
#307 := (+ #36 #306)
#308 := (= #307 0::Int)
#162 := (<= #23 0::Int)
#169 := (>= #34 0::Int)
#269 := (or #169 #162)
#270 := (not #269)
#158 := (<= #34 0::Int)
#267 := (or #158 #162)
#268 := (not #267)
#273 := (or #268 #270)
#312 := (if #273 #308 #311)
#305 := (= #36 0::Int)
#38 := (= #23 0::Int)
#37 := (= #34 0::Int)
#39 := (or #37 #38)
#313 := (if #39 #305 #312)
#831 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #830) #313)
#316 := (forall (vars (?v0 Int) (?v1 Int)) #313)
#834 := (iff #316 #831)
#832 := (iff #313 #313)
#833 := [refl]: #832
#835 := [quant-intro #833]: #834
#276 := (if #273 #46 #143)
#279 := (if #39 0::Int #276)
#282 := (= #36 #279)
#285 := (forall (vars (?v0 Int) (?v1 Int)) #282)
#317 := (iff #285 #316)
#314 := (iff #282 #313)
#315 := [rewrite]: #314
#318 := [quant-intro #315]: #317
#163 := (not #162)
#170 := (not #169)
#173 := (and #170 #163)
#159 := (not #158)
#166 := (and #159 #163)
#176 := (or #166 #173)
#179 := (if #176 #46 #143)
#182 := (if #39 0::Int #179)
#185 := (= #36 #182)
#188 := (forall (vars (?v0 Int) (?v1 Int)) #185)
#286 := (iff #188 #285)
#283 := (iff #185 #282)
#280 := (= #182 #279)
#277 := (= #179 #276)
#274 := (iff #176 #273)
#271 := (iff #173 #270)
#272 := [rewrite]: #271
#252 := (iff #166 #268)
#253 := [rewrite]: #252
#275 := [monotonicity #253 #272]: #274
#278 := [monotonicity #275]: #277
#281 := [monotonicity #278]: #280
#284 := [monotonicity #281]: #283
#287 := [quant-intro #284]: #286
#248 := (~ #188 #188)
#261 := (~ #185 #185)
#262 := [refl]: #261
#249 := [nnf-pos #262]: #248
#48 := (- #23)
#47 := (- #34)
#49 := (div #47 #48)
#41 := (< 0::Int #23)
#43 := (< #34 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #34)
#42 := (and #40 #41)
#45 := (or #42 #44)
#50 := (if #45 #46 #49)
#51 := (if #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#191 := (iff #53 #188)
#146 := (if #45 #46 #143)
#149 := (if #39 0::Int #146)
#152 := (= #36 #149)
#155 := (forall (vars (?v0 Int) (?v1 Int)) #152)
#189 := (iff #155 #188)
#186 := (iff #152 #185)
#183 := (= #149 #182)
#180 := (= #146 #179)
#177 := (iff #45 #176)
#174 := (iff #44 #173)
#164 := (iff #41 #163)
#165 := [rewrite]: #164
#171 := (iff #43 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172 #165]: #174
#167 := (iff #42 #166)
#160 := (iff #40 #159)
#161 := [rewrite]: #160
#168 := [monotonicity #161 #165]: #167
#178 := [monotonicity #168 #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [quant-intro #187]: #189
#156 := (iff #53 #155)
#153 := (iff #52 #152)
#150 := (= #51 #149)
#147 := (= #50 #146)
#144 := (= #49 #143)
#141 := (= #48 #140)
#142 := [rewrite]: #141
#138 := (= #47 #137)
#139 := [rewrite]: #138
#145 := [monotonicity #139 #142]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [monotonicity #151]: #153
#157 := [quant-intro #154]: #156
#192 := [trans #157 #190]: #191
#135 := [asserted]: #53
#193 := [mp #135 #192]: #188
#263 := [mp~ #193 #249]: #188
#288 := [mp #263 #287]: #285
#319 := [mp #288 #318]: #316
#836 := [mp #319 #835]: #831
#704 := (not #831)
#705 := (or #704 #777)
#772 := (* -1::Int 1::Int)
#775 := (* -1::Int 0::Int)
#776 := (div #775 #772)
#765 := (* -1::Int #776)
#766 := (+ #12 #765)
#767 := (= #766 0::Int)
#773 := (div 0::Int 1::Int)
#774 := (* -1::Int #773)
#489 := (+ #12 #774)
#771 := (= #489 0::Int)
#778 := (<= 1::Int 0::Int)
#591 := (>= 0::Int 0::Int)
#493 := (or #591 #778)
#494 := (not #493)
#781 := (<= 0::Int 0::Int)
#782 := (or #781 #778)
#492 := (not #782)
#495 := (or #492 #494)
#762 := (if #495 #771 #767)
#502 := (= 1::Int 0::Int)
#780 := (= 0::Int 0::Int)
#503 := (or #780 #502)
#763 := (if #503 #777 #762)
#706 := (or #704 #763)
#707 := (iff #706 #705)
#686 := (iff #705 #705)
#688 := [rewrite]: #686
#702 := (iff #763 #777)
#1 := true
#697 := (if true #777 #777)
#700 := (iff #697 #777)
#701 := [rewrite]: #700
#698 := (iff #763 #697)
#694 := (iff #762 #777)
#711 := (if false #777 #777)
#710 := (iff #711 #777)
#714 := [rewrite]: #710
#712 := (iff #762 #711)
#708 := (iff #767 #777)
#717 := (= #766 #12)
#741 := (+ #12 0::Int)
#734 := (= #741 #12)
#726 := [rewrite]: #734
#720 := (= #766 #741)
#718 := (= #765 0::Int)
#649 := (= #775 0::Int)
#650 := [rewrite]: #649
#715 := (= #765 #775)
#724 := (= #776 0::Int)
#738 := (div 0::Int -1::Int)
#729 := (= #738 0::Int)
#730 := [rewrite]: #729
#727 := (= #776 #738)
#737 := (= #772 -1::Int)
#733 := [rewrite]: #737
#728 := [monotonicity #650 #733]: #727
#731 := [trans #728 #730]: #724
#716 := [monotonicity #731]: #715
#719 := [trans #716 #650]: #718
#721 := [monotonicity #719]: #720
#722 := [trans #721 #726]: #717
#709 := [monotonicity #722]: #708
#735 := (iff #771 #777)
#723 := (= #489 #12)
#745 := (= #489 #741)
#651 := (= #774 0::Int)
#647 := (= #774 #775)
#646 := (= #773 0::Int)
#639 := [rewrite]: #646
#648 := [monotonicity #639]: #647
#744 := [trans #648 #650]: #651
#732 := [monotonicity #744]: #745
#725 := [trans #732 #726]: #723
#736 := [monotonicity #725]: #735
#643 := (iff #495 false)
#644 := (or false false)
#743 := (iff #644 false)
#628 := [rewrite]: #743
#739 := (iff #495 #644)
#594 := (iff #494 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#634 := (iff #494 #460)
#751 := (iff #493 true)
#611 := (or true false)
#755 := (iff #611 true)
#756 := [rewrite]: #755
#750 := (iff #493 #611)
#759 := (iff #778 false)
#760 := [rewrite]: #759
#464 := (iff #591 true)
#800 := [rewrite]: #464
#748 := [monotonicity #800 #760]: #750
#633 := [trans #748 #756]: #751
#635 := [monotonicity #633]: #634
#742 := [trans #635 #448]: #594
#747 := (iff #492 false)
#593 := (iff #492 #460)
#590 := (iff #782 true)
#754 := (iff #782 #611)
#752 := (iff #781 true)
#753 := [rewrite]: #752
#761 := [monotonicity #753 #760]: #754
#592 := [trans #761 #756]: #590
#746 := [monotonicity #592]: #593
#749 := [trans #746 #448]: #747
#740 := [monotonicity #749 #742]: #739
#645 := [trans #740 #628]: #643
#713 := [monotonicity #645 #736 #709]: #712
#695 := [trans #713 #714]: #694
#757 := (iff #503 true)
#612 := (iff #503 #611)
#764 := (iff #502 false)
#770 := [rewrite]: #764
#768 := (iff #780 true)
#769 := [rewrite]: #768
#613 := [monotonicity #769 #770]: #612
#758 := [trans #613 #756]: #757
#699 := [monotonicity #758 #695]: #698
#703 := [trans #699 #701]: #702
#685 := [monotonicity #703]: #707
#689 := [trans #685 #688]: #707
#696 := [quant-inst #9 #11]: #706
#690 := [mp #696 #689]: #705
#692 := [unit-resolution #690 #836]: #777
#687 := [monotonicity #692]: #15
#16 := (not #15)
#84 := [asserted]: #16
[unit-resolution #84 #687]: false
unsat
f2d5511489ae0b1083bd6d09fc48e4e14f9df895 283 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 1::Int
decl f4 :: S2
#7 := f4
#13 := (f3 f4 1::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 1::Int)
#11 := (f5 #10 1::Int)
#12 := (f3 f4 #11)
#14 := (= #12 #13)
#736 := (= #11 1::Int)
#23 := (:var 0 Int)
#34 := (:var 1 Int)
#35 := (f6 f7 #34)
#36 := (f5 #35 #23)
#830 := (pattern #36)
#22 := 0::Int
#136 := -1::Int
#140 := (* -1::Int #23)
#137 := (* -1::Int #34)
#143 := (div #137 #140)
#309 := (* -1::Int #143)
#310 := (+ #36 #309)
#311 := (= #310 0::Int)
#46 := (div #34 #23)
#306 := (* -1::Int #46)
#307 := (+ #36 #306)
#308 := (= #307 0::Int)
#162 := (<= #23 0::Int)
#169 := (>= #34 0::Int)
#269 := (or #169 #162)
#270 := (not #269)
#158 := (<= #34 0::Int)
#267 := (or #158 #162)
#268 := (not #267)
#273 := (or #268 #270)
#312 := (if #273 #308 #311)
#305 := (= #36 0::Int)
#38 := (= #23 0::Int)
#37 := (= #34 0::Int)
#39 := (or #37 #38)
#313 := (if #39 #305 #312)
#831 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #830) #313)
#316 := (forall (vars (?v0 Int) (?v1 Int)) #313)
#834 := (iff #316 #831)
#832 := (iff #313 #313)
#833 := [refl]: #832
#835 := [quant-intro #833]: #834
#276 := (if #273 #46 #143)
#279 := (if #39 0::Int #276)
#282 := (= #36 #279)
#285 := (forall (vars (?v0 Int) (?v1 Int)) #282)
#317 := (iff #285 #316)
#314 := (iff #282 #313)
#315 := [rewrite]: #314
#318 := [quant-intro #315]: #317
#163 := (not #162)
#170 := (not #169)
#173 := (and #170 #163)
#159 := (not #158)
#166 := (and #159 #163)
#176 := (or #166 #173)
#179 := (if #176 #46 #143)
#182 := (if #39 0::Int #179)
#185 := (= #36 #182)
#188 := (forall (vars (?v0 Int) (?v1 Int)) #185)
#286 := (iff #188 #285)
#283 := (iff #185 #282)
#280 := (= #182 #279)
#277 := (= #179 #276)
#274 := (iff #176 #273)
#271 := (iff #173 #270)
#272 := [rewrite]: #271
#252 := (iff #166 #268)
#253 := [rewrite]: #252
#275 := [monotonicity #253 #272]: #274
#278 := [monotonicity #275]: #277
#281 := [monotonicity #278]: #280
#284 := [monotonicity #281]: #283
#287 := [quant-intro #284]: #286
#248 := (~ #188 #188)
#261 := (~ #185 #185)
#262 := [refl]: #261
#249 := [nnf-pos #262]: #248
#48 := (- #23)
#47 := (- #34)
#49 := (div #47 #48)
#41 := (< 0::Int #23)
#43 := (< #34 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #34)
#42 := (and #40 #41)
#45 := (or #42 #44)
#50 := (if #45 #46 #49)
#51 := (if #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#191 := (iff #53 #188)
#146 := (if #45 #46 #143)
#149 := (if #39 0::Int #146)
#152 := (= #36 #149)
#155 := (forall (vars (?v0 Int) (?v1 Int)) #152)
#189 := (iff #155 #188)
#186 := (iff #152 #185)
#183 := (= #149 #182)
#180 := (= #146 #179)
#177 := (iff #45 #176)
#174 := (iff #44 #173)
#164 := (iff #41 #163)
#165 := [rewrite]: #164
#171 := (iff #43 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172 #165]: #174
#167 := (iff #42 #166)
#160 := (iff #40 #159)
#161 := [rewrite]: #160
#168 := [monotonicity #161 #165]: #167
#178 := [monotonicity #168 #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [quant-intro #187]: #189
#156 := (iff #53 #155)
#153 := (iff #52 #152)
#150 := (= #51 #149)
#147 := (= #50 #146)
#144 := (= #49 #143)
#141 := (= #48 #140)
#142 := [rewrite]: #141
#138 := (= #47 #137)
#139 := [rewrite]: #138
#145 := [monotonicity #139 #142]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [monotonicity #151]: #153
#157 := [quant-intro #154]: #156
#192 := [trans #157 #190]: #191
#135 := [asserted]: #53
#193 := [mp #135 #192]: #188
#263 := [mp~ #193 #249]: #188
#288 := [mp #263 #287]: #285
#319 := [mp #288 #318]: #316
#836 := [mp #319 #835]: #831
#707 := (not #831)
#685 := (or #707 #736)
#771 := (* -1::Int 1::Int)
#775 := (div #771 #771)
#772 := (* -1::Int #775)
#776 := (+ #11 #772)
#765 := (= #776 0::Int)
#495 := (div 1::Int 1::Int)
#773 := (* -1::Int #495)
#774 := (+ #11 #773)
#489 := (= #774 0::Int)
#781 := (<= 1::Int 0::Int)
#591 := (>= 1::Int 0::Int)
#492 := (or #591 #781)
#493 := (not #492)
#778 := (or #781 #781)
#782 := (not #778)
#494 := (or #782 #493)
#766 := (if #494 #489 #765)
#777 := (= #11 0::Int)
#502 := (= 1::Int 0::Int)
#503 := (or #502 #502)
#767 := (if #503 #777 #766)
#686 := (or #707 #767)
#689 := (iff #686 #685)
#691 := (iff #685 #685)
#692 := [rewrite]: #691
#706 := (iff #767 #736)
#701 := (if false #777 #736)
#704 := (iff #701 #736)
#705 := [rewrite]: #704
#702 := (iff #767 #701)
#699 := (iff #766 #736)
#1 := true
#714 := (if true #736 #736)
#697 := (iff #714 #736)
#698 := [rewrite]: #697
#694 := (iff #766 #714)
#713 := (iff #765 #736)
#741 := (+ -1::Int #11)
#723 := (= #741 0::Int)
#737 := (iff #723 #736)
#733 := [rewrite]: #737
#711 := (iff #765 #723)
#708 := (= #776 #741)
#650 := (+ #11 -1::Int)
#745 := (= #650 #741)
#732 := [rewrite]: #745
#717 := (= #776 #650)
#720 := (= #772 -1::Int)
#639 := (= #771 -1::Int)
#647 := [rewrite]: #639
#718 := (= #772 #771)
#715 := (= #775 1::Int)
#728 := (div -1::Int -1::Int)
#724 := (= #728 1::Int)
#731 := [rewrite]: #724
#729 := (= #775 #728)
#730 := [monotonicity #647 #647]: #729
#716 := [trans #730 #731]: #715
#719 := [monotonicity #716]: #718
#721 := [trans #719 #647]: #720
#722 := [monotonicity #721]: #717
#709 := [trans #722 #732]: #708
#712 := [monotonicity #709]: #711
#710 := [trans #712 #733]: #713
#738 := (iff #489 #736)
#725 := (iff #489 #723)
#734 := (= #774 #741)
#651 := (= #774 #650)
#648 := (= #773 -1::Int)
#645 := (= #773 #771)
#628 := (= #495 1::Int)
#643 := [rewrite]: #628
#646 := [monotonicity #643]: #645
#649 := [trans #646 #647]: #648
#744 := [monotonicity #649]: #651
#726 := [trans #744 #732]: #734
#735 := [monotonicity #726]: #725
#727 := [trans #735 #733]: #738
#740 := (iff #494 true)
#746 := (or true false)
#750 := (iff #746 true)
#748 := [rewrite]: #750
#644 := (iff #494 #746)
#594 := (iff #493 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#634 := (iff #493 #460)
#751 := (iff #492 true)
#747 := (iff #492 #746)
#755 := (iff #781 false)
#756 := [rewrite]: #755
#464 := (iff #591 true)
#800 := [rewrite]: #464
#749 := [monotonicity #800 #756]: #747
#633 := [trans #749 #748]: #751
#635 := [monotonicity #633]: #634
#742 := [trans #635 #448]: #594
#592 := (iff #782 true)
#759 := (not false)
#761 := (iff #759 true)
#590 := [rewrite]: #761
#760 := (iff #782 #759)
#752 := (iff #778 false)
#768 := (or false false)
#770 := (iff #768 false)
#611 := [rewrite]: #770
#757 := (iff #778 #768)
#758 := [monotonicity #756 #756]: #757
#753 := [trans #758 #611]: #752
#754 := [monotonicity #753]: #760
#593 := [trans #754 #590]: #592
#739 := [monotonicity #593 #742]: #644
#743 := [trans #739 #748]: #740
#695 := [monotonicity #743 #727 #710]: #694
#700 := [trans #695 #698]: #699
#612 := (iff #503 false)
#769 := (iff #503 #768)
#762 := (iff #502 false)
#763 := [rewrite]: #762
#764 := [monotonicity #763 #763]: #769
#613 := [trans #764 #611]: #612
#703 := [monotonicity #613 #700]: #702
#696 := [trans #703 #705]: #706
#690 := [monotonicity #696]: #689
#687 := [trans #690 #692]: #689
#688 := [quant-inst #9 #9]: #686
#693 := [mp #688 #687]: #685
#676 := [unit-resolution #693 #836]: #736
#677 := [monotonicity #676]: #14
#15 := (not #14)
#84 := [asserted]: #15
[unit-resolution #84 #677]: false
unsat
b5e857fcfdcccfc1f8e76abc18cb220c195f28ba 294 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 3::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 3::Int)
decl f5 :: (-> S4 Int Int)
#11 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 3::Int)
#12 := (f5 #10 1::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#724 := (= #12 3::Int)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#830 := (pattern #37)
#23 := 0::Int
#137 := -1::Int
#141 := (* -1::Int #24)
#138 := (* -1::Int #35)
#144 := (div #138 #141)
#310 := (* -1::Int #144)
#311 := (+ #37 #310)
#312 := (= #311 0::Int)
#47 := (div #35 #24)
#307 := (* -1::Int #47)
#308 := (+ #37 #307)
#309 := (= #308 0::Int)
#163 := (<= #24 0::Int)
#170 := (>= #35 0::Int)
#270 := (or #170 #163)
#271 := (not #270)
#159 := (<= #35 0::Int)
#268 := (or #159 #163)
#269 := (not #268)
#274 := (or #269 #271)
#313 := (if #274 #309 #312)
#306 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#314 := (if #40 #306 #313)
#831 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #830) #314)
#317 := (forall (vars (?v0 Int) (?v1 Int)) #314)
#834 := (iff #317 #831)
#832 := (iff #314 #314)
#833 := [refl]: #832
#835 := [quant-intro #833]: #834
#277 := (if #274 #47 #144)
#280 := (if #40 0::Int #277)
#283 := (= #37 #280)
#286 := (forall (vars (?v0 Int) (?v1 Int)) #283)
#318 := (iff #286 #317)
#315 := (iff #283 #314)
#316 := [rewrite]: #315
#319 := [quant-intro #316]: #318
#164 := (not #163)
#171 := (not #170)
#174 := (and #171 #164)
#160 := (not #159)
#167 := (and #160 #164)
#177 := (or #167 #174)
#180 := (if #177 #47 #144)
#183 := (if #40 0::Int #180)
#186 := (= #37 #183)
#189 := (forall (vars (?v0 Int) (?v1 Int)) #186)
#287 := (iff #189 #286)
#284 := (iff #186 #283)
#281 := (= #183 #280)
#278 := (= #180 #277)
#275 := (iff #177 #274)
#272 := (iff #174 #271)
#273 := [rewrite]: #272
#253 := (iff #167 #269)
#254 := [rewrite]: #253
#276 := [monotonicity #254 #273]: #275
#279 := [monotonicity #276]: #278
#282 := [monotonicity #279]: #281
#285 := [monotonicity #282]: #284
#288 := [quant-intro #285]: #287
#249 := (~ #189 #189)
#262 := (~ #186 #186)
#263 := [refl]: #262
#250 := [nnf-pos #263]: #249
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (if #46 #47 #50)
#52 := (if #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#192 := (iff #54 #189)
#147 := (if #46 #47 #144)
#150 := (if #40 0::Int #147)
#153 := (= #37 #150)
#156 := (forall (vars (?v0 Int) (?v1 Int)) #153)
#190 := (iff #156 #189)
#187 := (iff #153 #186)
#184 := (= #150 #183)
#181 := (= #147 #180)
#178 := (iff #46 #177)
#175 := (iff #45 #174)
#165 := (iff #42 #164)
#166 := [rewrite]: #165
#172 := (iff #44 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173 #166]: #175
#168 := (iff #43 #167)
#161 := (iff #41 #160)
#162 := [rewrite]: #161
#169 := [monotonicity #162 #166]: #168
#179 := [monotonicity #169 #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185]: #187
#191 := [quant-intro #188]: #190
#157 := (iff #54 #156)
#154 := (iff #53 #153)
#151 := (= #52 #150)
#148 := (= #51 #147)
#145 := (= #50 #144)
#142 := (= #49 #141)
#143 := [rewrite]: #142
#139 := (= #48 #138)
#140 := [rewrite]: #139
#146 := [monotonicity #140 #143]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#158 := [quant-intro #155]: #157
#193 := [trans #158 #191]: #192
#136 := [asserted]: #54
#194 := [mp #136 #193]: #189
#264 := [mp~ #194 #250]: #189
#289 := [mp #264 #288]: #286
#320 := [mp #289 #319]: #317
#836 := [mp #320 #835]: #831
#679 := (not #831)
#675 := (or #679 #724)
#776 := (* -1::Int 1::Int)
#772 := (* -1::Int 3::Int)
#765 := (div #772 #776)
#766 := (* -1::Int #765)
#767 := (+ #12 #766)
#762 := (= #767 0::Int)
#774 := (div 3::Int 1::Int)
#489 := (* -1::Int #774)
#771 := (+ #12 #489)
#775 := (= #771 0::Int)
#782 := (<= 1::Int 0::Int)
#591 := (>= 3::Int 0::Int)
#494 := (or #591 #782)
#495 := (not #494)
#778 := (<= 3::Int 0::Int)
#492 := (or #778 #782)
#493 := (not #492)
#773 := (or #493 #495)
#763 := (if #773 #775 #762)
#781 := (= #12 0::Int)
#503 := (= 1::Int 0::Int)
#502 := (= 3::Int 0::Int)
#777 := (or #502 #503)
#768 := (if #777 #781 #763)
#676 := (or #679 #768)
#680 := (iff #676 #675)
#682 := (iff #675 #675)
#683 := [rewrite]: #682
#687 := (iff #768 #724)
#688 := (if false #781 #724)
#691 := (iff #688 #724)
#692 := [rewrite]: #691
#689 := (iff #768 #688)
#685 := (iff #763 #724)
#1 := true
#704 := (if true #724 #724)
#696 := (iff #704 #724)
#707 := [rewrite]: #696
#705 := (iff #763 #704)
#702 := (iff #762 #724)
#741 := -3::Int
#736 := (+ -3::Int #12)
#728 := (= #736 0::Int)
#731 := (iff #728 #724)
#715 := [rewrite]: #731
#700 := (iff #762 #728)
#698 := (= #767 #736)
#723 := (+ #12 -3::Int)
#737 := (= #723 #736)
#733 := [rewrite]: #737
#695 := (= #767 #723)
#714 := (= #766 -3::Int)
#745 := (= #772 -3::Int)
#732 := [rewrite]: #745
#713 := (= #766 #772)
#711 := (= #765 3::Int)
#721 := (div -3::Int -1::Int)
#708 := (= #721 3::Int)
#709 := [rewrite]: #708
#717 := (= #765 #721)
#719 := (= #776 -1::Int)
#720 := [rewrite]: #719
#722 := [monotonicity #732 #720]: #717
#712 := [trans #722 #709]: #711
#710 := [monotonicity #712]: #713
#694 := [trans #710 #732]: #714
#697 := [monotonicity #694]: #695
#699 := [trans #697 #733]: #698
#701 := [monotonicity #699]: #700
#703 := [trans #701 #715]: #702
#716 := (iff #775 #724)
#729 := (iff #775 #728)
#738 := (= #771 #736)
#725 := (= #771 #723)
#734 := (= #489 -3::Int)
#651 := (= #489 #772)
#649 := (= #774 3::Int)
#650 := [rewrite]: #649
#744 := [monotonicity #650]: #651
#726 := [trans #744 #732]: #734
#735 := [monotonicity #726]: #725
#727 := [trans #735 #733]: #738
#730 := [monotonicity #727]: #729
#718 := [trans #730 #715]: #716
#647 := (iff #773 true)
#634 := (or true false)
#742 := (iff #634 true)
#644 := [rewrite]: #742
#646 := (iff #773 #634)
#643 := (iff #495 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#743 := (iff #495 #460)
#739 := (iff #494 true)
#635 := (iff #494 #634)
#760 := (iff #782 false)
#754 := [rewrite]: #760
#464 := (iff #591 true)
#800 := [rewrite]: #464
#594 := [monotonicity #800 #754]: #635
#740 := [trans #594 #644]: #739
#628 := [monotonicity #740]: #743
#645 := [trans #628 #448]: #643
#751 := (iff #493 true)
#746 := (not false)
#750 := (iff #746 true)
#748 := [rewrite]: #750
#747 := (iff #493 #746)
#592 := (iff #492 false)
#612 := (or false false)
#756 := (iff #612 false)
#757 := [rewrite]: #756
#761 := (iff #492 #612)
#753 := (iff #778 false)
#759 := [rewrite]: #753
#590 := [monotonicity #759 #754]: #761
#593 := [trans #590 #757]: #592
#749 := [monotonicity #593]: #747
#633 := [trans #749 #748]: #751
#639 := [monotonicity #633 #645]: #646
#648 := [trans #639 #644]: #647
#706 := [monotonicity #648 #718 #703]: #705
#686 := [trans #706 #707]: #685
#758 := (iff #777 false)
#613 := (iff #777 #612)
#770 := (iff #503 false)
#611 := [rewrite]: #770
#769 := (iff #502 false)
#764 := [rewrite]: #769
#755 := [monotonicity #764 #611]: #613
#752 := [trans #755 #757]: #758
#690 := [monotonicity #752 #686]: #689
#693 := [trans #690 #692]: #687
#681 := [monotonicity #693]: #680
#678 := [trans #681 #683]: #680
#677 := [quant-inst #9 #11]: #676
#684 := [mp #677 #678]: #675
#659 := [unit-resolution #684 #836]: #724
#552 := [monotonicity #659]: #15
#16 := (not #15)
#85 := [asserted]: #16
[unit-resolution #85 #552]: false
unsat
35f8a4cc325e6764f31a3b4bdaffd9418bbd18c9 343 0
#2 := false
decl f10 :: S3
#10 := f10
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 Int Int)
#13 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 1::Int)
decl f4 :: S2
#7 := f4
#15 := (f3 f4 #14)
#16 := (= #15 f10)
#398 := (f3 f4 #11)
#482 := (= #398 f10)
#18 := (:var 0 S3)
#19 := (f8 f9 #18)
#811 := (pattern #19)
#20 := (f3 f4 #19)
#21 := (= #20 #18)
#812 := (forall (vars (?v0 S3)) (:pat #811) #21)
#22 := (forall (vars (?v0 S3)) #21)
#815 := (iff #22 #812)
#813 := (iff #21 #21)
#814 := [refl]: #813
#816 := [quant-intro #814]: #815
#257 := (~ #22 #22)
#255 := (~ #21 #21)
#256 := [refl]: #255
#258 := [nnf-pos #256]: #257
#86 := [asserted]: #22
#243 := [mp~ #86 #258]: #22
#817 := [mp #243 #816]: #812
#475 := (not #812)
#486 := (or #475 #482)
#487 := [quant-inst #10]: #486
#664 := [unit-resolution #487 #817]: #482
#638 := (= #15 #398)
#663 := (= #14 #11)
#790 := (div #11 1::Int)
#625 := (= #790 #11)
#549 := (= #11 #790)
#23 := 0::Int
#137 := -1::Int
#791 := (* -1::Int #790)
#588 := (+ #11 #791)
#600 := (<= #588 0::Int)
#627 := (= #588 0::Int)
#1 := true
#83 := [true-axiom]: true
#555 := (or false #627)
#558 := [th-lemma arith]: #555
#559 := [unit-resolution #558 #83]: #627
#563 := (not #627)
#556 := (or #563 #600)
#564 := [th-lemma arith triangle-eq]: #556
#557 := [unit-resolution #564 #559]: #600
#602 := (>= #588 0::Int)
#560 := (or #563 #602)
#561 := [th-lemma arith triangle-eq]: #560
#547 := [unit-resolution #561 #559]: #602
#550 := [th-lemma arith eq-propagate 1 1 #547 #557]: #549
#533 := [symm #550]: #625
#552 := (= #14 #790)
#792 := (+ #14 #791)
#649 := (<= #792 0::Int)
#787 := (= #792 0::Int)
#807 := (= #11 0::Int)
#728 := (not #807)
#697 := (= 0::Int #11)
#665 := [hypothesis]: #807
#708 := [symm #665]: #697
#802 := (= #14 0::Int)
#666 := (or #728 #802)
#793 := (* -1::Int #11)
#612 := (div #793 -1::Int)
#756 := (* -1::Int #612)
#759 := (+ #14 #756)
#760 := (= #759 0::Int)
#451 := (>= #11 0::Int)
#767 := (not #451)
#445 := (<= #11 0::Int)
#495 := (not #445)
#764 := (or #495 #767)
#762 := (if #764 #787 #760)
#594 := (if #807 #802 #762)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#831 := (pattern #37)
#141 := (* -1::Int #24)
#138 := (* -1::Int #35)
#144 := (div #138 #141)
#310 := (* -1::Int #144)
#311 := (+ #37 #310)
#312 := (= #311 0::Int)
#47 := (div #35 #24)
#307 := (* -1::Int #47)
#308 := (+ #37 #307)
#309 := (= #308 0::Int)
#163 := (<= #24 0::Int)
#170 := (>= #35 0::Int)
#270 := (or #170 #163)
#271 := (not #270)
#159 := (<= #35 0::Int)
#268 := (or #159 #163)
#269 := (not #268)
#274 := (or #269 #271)
#313 := (if #274 #309 #312)
#306 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#314 := (if #40 #306 #313)
#832 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #831) #314)
#317 := (forall (vars (?v0 Int) (?v1 Int)) #314)
#835 := (iff #317 #832)
#833 := (iff #314 #314)
#834 := [refl]: #833
#836 := [quant-intro #834]: #835
#277 := (if #274 #47 #144)
#280 := (if #40 0::Int #277)
#283 := (= #37 #280)
#286 := (forall (vars (?v0 Int) (?v1 Int)) #283)
#318 := (iff #286 #317)
#315 := (iff #283 #314)
#316 := [rewrite]: #315
#319 := [quant-intro #316]: #318
#164 := (not #163)
#171 := (not #170)
#174 := (and #171 #164)
#160 := (not #159)
#167 := (and #160 #164)
#177 := (or #167 #174)
#180 := (if #177 #47 #144)
#183 := (if #40 0::Int #180)
#186 := (= #37 #183)
#189 := (forall (vars (?v0 Int) (?v1 Int)) #186)
#287 := (iff #189 #286)
#284 := (iff #186 #283)
#281 := (= #183 #280)
#278 := (= #180 #277)
#275 := (iff #177 #274)
#272 := (iff #174 #271)
#273 := [rewrite]: #272
#253 := (iff #167 #269)
#254 := [rewrite]: #253
#276 := [monotonicity #254 #273]: #275
#279 := [monotonicity #276]: #278
#282 := [monotonicity #279]: #281
#285 := [monotonicity #282]: #284
#288 := [quant-intro #285]: #287
#249 := (~ #189 #189)
#262 := (~ #186 #186)
#263 := [refl]: #262
#250 := [nnf-pos #263]: #249
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (if #46 #47 #50)
#52 := (if #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#192 := (iff #54 #189)
#147 := (if #46 #47 #144)
#150 := (if #40 0::Int #147)
#153 := (= #37 #150)
#156 := (forall (vars (?v0 Int) (?v1 Int)) #153)
#190 := (iff #156 #189)
#187 := (iff #153 #186)
#184 := (= #150 #183)
#181 := (= #147 #180)
#178 := (iff #46 #177)
#175 := (iff #45 #174)
#165 := (iff #42 #164)
#166 := [rewrite]: #165
#172 := (iff #44 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173 #166]: #175
#168 := (iff #43 #167)
#161 := (iff #41 #160)
#162 := [rewrite]: #161
#169 := [monotonicity #162 #166]: #168
#179 := [monotonicity #169 #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185]: #187
#191 := [quant-intro #188]: #190
#157 := (iff #54 #156)
#154 := (iff #53 #153)
#151 := (= #52 #150)
#148 := (= #51 #147)
#145 := (= #50 #144)
#142 := (= #49 #141)
#143 := [rewrite]: #142
#139 := (= #48 #138)
#140 := [rewrite]: #139
#146 := [monotonicity #140 #143]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#158 := [quant-intro #155]: #157
#193 := [trans #158 #191]: #192
#136 := [asserted]: #54
#194 := [mp #136 #193]: #189
#264 := [mp~ #194 #250]: #189
#289 := [mp #264 #288]: #286
#320 := [mp #289 #319]: #317
#837 := [mp #320 #836]: #832
#750 := (not #832)
#751 := (or #750 #594)
#431 := (* -1::Int 1::Int)
#794 := (div #793 #431)
#796 := (* -1::Int #794)
#436 := (+ #14 #796)
#437 := (= #436 0::Int)
#786 := (<= 1::Int 0::Int)
#452 := (or #451 #786)
#788 := (not #452)
#449 := (or #445 #786)
#450 := (not #449)
#789 := (or #450 #788)
#797 := (if #789 #787 #437)
#808 := (= 1::Int 0::Int)
#461 := (or #807 #808)
#795 := (if #461 #802 #797)
#749 := (or #750 #795)
#634 := (iff #749 #751)
#636 := (iff #751 #751)
#595 := [rewrite]: #636
#747 := (iff #795 #594)
#591 := (iff #797 #762)
#761 := (iff #437 #760)
#753 := (= #436 #759)
#757 := (= #796 #756)
#613 := (= #794 #612)
#765 := (= #431 -1::Int)
#771 := [rewrite]: #765
#614 := [monotonicity #771]: #613
#758 := [monotonicity #614]: #757
#754 := [monotonicity #758]: #753
#755 := [monotonicity #754]: #761
#769 := (iff #789 #764)
#768 := (iff #788 #767)
#777 := (iff #452 #451)
#775 := (or #451 false)
#776 := (iff #775 #451)
#773 := [rewrite]: #776
#490 := (iff #452 #775)
#781 := (iff #786 false)
#503 := [rewrite]: #781
#772 := [monotonicity #503]: #490
#766 := [trans #772 #773]: #777
#763 := [monotonicity #766]: #768
#496 := (iff #450 #495)
#493 := (iff #449 #445)
#504 := (or #445 false)
#779 := (iff #504 #445)
#783 := [rewrite]: #779
#778 := (iff #449 #504)
#782 := [monotonicity #503]: #778
#494 := [trans #782 #783]: #493
#774 := [monotonicity #494]: #496
#770 := [monotonicity #774 #763]: #769
#593 := [monotonicity #770 #755]: #591
#404 := (iff #461 #807)
#785 := (or #807 false)
#509 := (iff #785 #807)
#510 := [rewrite]: #509
#507 := (iff #461 #785)
#798 := (iff #808 false)
#784 := [rewrite]: #798
#508 := [monotonicity #784]: #507
#780 := [trans #508 #510]: #404
#748 := [monotonicity #780 #593]: #747
#635 := [monotonicity #748]: #634
#743 := [trans #635 #595]: #634
#752 := [quant-inst #11 #13]: #749
#645 := [mp #752 #743]: #751
#672 := [unit-resolution #645 #837]: #594
#739 := (not #594)
#729 := (or #739 #728 #802)
#730 := [def-axiom]: #729
#671 := [unit-resolution #730 #672]: #666
#667 := [unit-resolution #671 #665]: #802
#631 := [trans #667 #708]: #663
#597 := [monotonicity #631]: #638
#628 := [trans #597 #664]: #16
#17 := (not #16)
#85 := [asserted]: #17
#630 := [unit-resolution #85 #628]: false
#632 := [lemma #630]: #728
#662 := (or #807 #787)
#646 := (not #764)
#724 := (not #787)
#668 := [hypothesis]: #724
#669 := [hypothesis]: #728
#673 := (or #807 #762)
#731 := (or #739 #807 #762)
#725 := [def-axiom]: #731
#674 := [unit-resolution #725 #672]: #673
#670 := [unit-resolution #674 #669]: #762
#742 := (not #762)
#746 := (or #742 #646 #787)
#733 := [def-axiom]: #746
#675 := [unit-resolution #733 #670 #668]: #646
#629 := (or #764 #451)
#644 := [def-axiom]: #629
#655 := [unit-resolution #644 #675]: #451
#741 := (or #764 #445)
#744 := [def-axiom]: #741
#601 := [unit-resolution #744 #675]: #445
#656 := (or #807 #495 #767)
#637 := [th-lemma arith triangle-eq]: #656
#661 := [unit-resolution #637 #669 #601 #655]: false
#657 := [lemma #661]: #662
#565 := [unit-resolution #657 #632]: #787
#568 := (or #724 #649)
#570 := [th-lemma arith triangle-eq]: #568
#571 := [unit-resolution #570 #565]: #649
#650 := (>= #792 0::Int)
#567 := (or #724 #650)
#572 := [th-lemma arith triangle-eq]: #567
#562 := [unit-resolution #572 #565]: #650
#554 := [th-lemma arith eq-propagate 1 1 #562 #571]: #552
#535 := [trans #554 #533]: #663
#536 := [monotonicity #535]: #638
#537 := [trans #536 #664]: #16
[unit-resolution #85 #537]: false
unsat
634d492b81b7e3859d758e0f7fab5f7237c6b80a 281 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#12 := (f5 #10 3::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#777 := (= #12 0::Int)
#23 := (:var 0 Int)
#34 := (:var 1 Int)
#35 := (f6 f7 #34)
#36 := (f5 #35 #23)
#830 := (pattern #36)
#136 := -1::Int
#140 := (* -1::Int #23)
#137 := (* -1::Int #34)
#143 := (div #137 #140)
#309 := (* -1::Int #143)
#310 := (+ #36 #309)
#311 := (= #310 0::Int)
#46 := (div #34 #23)
#306 := (* -1::Int #46)
#307 := (+ #36 #306)
#308 := (= #307 0::Int)
#162 := (<= #23 0::Int)
#169 := (>= #34 0::Int)
#269 := (or #169 #162)
#270 := (not #269)
#158 := (<= #34 0::Int)
#267 := (or #158 #162)
#268 := (not #267)
#273 := (or #268 #270)
#312 := (if #273 #308 #311)
#305 := (= #36 0::Int)
#38 := (= #23 0::Int)
#37 := (= #34 0::Int)
#39 := (or #37 #38)
#313 := (if #39 #305 #312)
#831 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #830) #313)
#316 := (forall (vars (?v0 Int) (?v1 Int)) #313)
#834 := (iff #316 #831)
#832 := (iff #313 #313)
#833 := [refl]: #832
#835 := [quant-intro #833]: #834
#276 := (if #273 #46 #143)
#279 := (if #39 0::Int #276)
#282 := (= #36 #279)
#285 := (forall (vars (?v0 Int) (?v1 Int)) #282)
#317 := (iff #285 #316)
#314 := (iff #282 #313)
#315 := [rewrite]: #314
#318 := [quant-intro #315]: #317
#163 := (not #162)
#170 := (not #169)
#173 := (and #170 #163)
#159 := (not #158)
#166 := (and #159 #163)
#176 := (or #166 #173)
#179 := (if #176 #46 #143)
#182 := (if #39 0::Int #179)
#185 := (= #36 #182)
#188 := (forall (vars (?v0 Int) (?v1 Int)) #185)
#286 := (iff #188 #285)
#283 := (iff #185 #282)
#280 := (= #182 #279)
#277 := (= #179 #276)
#274 := (iff #176 #273)
#271 := (iff #173 #270)
#272 := [rewrite]: #271
#252 := (iff #166 #268)
#253 := [rewrite]: #252
#275 := [monotonicity #253 #272]: #274
#278 := [monotonicity #275]: #277
#281 := [monotonicity #278]: #280
#284 := [monotonicity #281]: #283
#287 := [quant-intro #284]: #286
#248 := (~ #188 #188)
#261 := (~ #185 #185)
#262 := [refl]: #261
#249 := [nnf-pos #262]: #248
#48 := (- #23)
#47 := (- #34)
#49 := (div #47 #48)
#41 := (< 0::Int #23)
#43 := (< #34 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #34)
#42 := (and #40 #41)
#45 := (or #42 #44)
#50 := (if #45 #46 #49)
#51 := (if #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#191 := (iff #53 #188)
#146 := (if #45 #46 #143)
#149 := (if #39 0::Int #146)
#152 := (= #36 #149)
#155 := (forall (vars (?v0 Int) (?v1 Int)) #152)
#189 := (iff #155 #188)
#186 := (iff #152 #185)
#183 := (= #149 #182)
#180 := (= #146 #179)
#177 := (iff #45 #176)
#174 := (iff #44 #173)
#164 := (iff #41 #163)
#165 := [rewrite]: #164
#171 := (iff #43 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172 #165]: #174
#167 := (iff #42 #166)
#160 := (iff #40 #159)
#161 := [rewrite]: #160
#168 := [monotonicity #161 #165]: #167
#178 := [monotonicity #168 #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [quant-intro #187]: #189
#156 := (iff #53 #155)
#153 := (iff #52 #152)
#150 := (= #51 #149)
#147 := (= #50 #146)
#144 := (= #49 #143)
#141 := (= #48 #140)
#142 := [rewrite]: #141
#138 := (= #47 #137)
#139 := [rewrite]: #138
#145 := [monotonicity #139 #142]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [monotonicity #151]: #153
#157 := [quant-intro #154]: #156
#192 := [trans #157 #190]: #191
#135 := [asserted]: #53
#193 := [mp #135 #192]: #188
#263 := [mp~ #193 #249]: #188
#288 := [mp #263 #287]: #285
#319 := [mp #288 #318]: #316
#836 := [mp #319 #835]: #831
#705 := (not #831)
#706 := (or #705 #777)
#772 := (* -1::Int 3::Int)
#775 := (* -1::Int 0::Int)
#776 := (div #775 #772)
#765 := (* -1::Int #776)
#766 := (+ #12 #765)
#767 := (= #766 0::Int)
#773 := (div 0::Int 3::Int)
#774 := (* -1::Int #773)
#489 := (+ #12 #774)
#771 := (= #489 0::Int)
#778 := (<= 3::Int 0::Int)
#591 := (>= 0::Int 0::Int)
#493 := (or #591 #778)
#494 := (not #493)
#781 := (<= 0::Int 0::Int)
#782 := (or #781 #778)
#492 := (not #782)
#495 := (or #492 #494)
#762 := (if #495 #771 #767)
#502 := (= 3::Int 0::Int)
#780 := (= 0::Int 0::Int)
#503 := (or #780 #502)
#763 := (if #503 #777 #762)
#696 := (or #705 #763)
#685 := (iff #696 #706)
#688 := (iff #706 #706)
#689 := [rewrite]: #688
#703 := (iff #763 #777)
#1 := true
#698 := (if true #777 #777)
#701 := (iff #698 #777)
#702 := [rewrite]: #701
#699 := (iff #763 #698)
#695 := (iff #762 #777)
#712 := (if false #777 #777)
#714 := (iff #712 #777)
#694 := [rewrite]: #714
#713 := (iff #762 #712)
#709 := (iff #767 #777)
#722 := (= #766 #12)
#741 := (+ #12 0::Int)
#734 := (= #741 #12)
#726 := [rewrite]: #734
#721 := (= #766 #741)
#719 := (= #765 0::Int)
#649 := (= #775 0::Int)
#650 := [rewrite]: #649
#716 := (= #765 #775)
#731 := (= #776 0::Int)
#737 := -3::Int
#727 := (div 0::Int -3::Int)
#730 := (= #727 0::Int)
#724 := [rewrite]: #730
#728 := (= #776 #727)
#733 := (= #772 -3::Int)
#738 := [rewrite]: #733
#729 := [monotonicity #650 #738]: #728
#715 := [trans #729 #724]: #731
#718 := [monotonicity #715]: #716
#720 := [trans #718 #650]: #719
#717 := [monotonicity #720]: #721
#708 := [trans #717 #726]: #722
#711 := [monotonicity #708]: #709
#735 := (iff #771 #777)
#723 := (= #489 #12)
#745 := (= #489 #741)
#651 := (= #774 0::Int)
#647 := (= #774 #775)
#646 := (= #773 0::Int)
#639 := [rewrite]: #646
#648 := [monotonicity #639]: #647
#744 := [trans #648 #650]: #651
#732 := [monotonicity #744]: #745
#725 := [trans #732 #726]: #723
#736 := [monotonicity #725]: #735
#643 := (iff #495 false)
#644 := (or false false)
#743 := (iff #644 false)
#628 := [rewrite]: #743
#739 := (iff #495 #644)
#594 := (iff #494 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#634 := (iff #494 #460)
#751 := (iff #493 true)
#611 := (or true false)
#755 := (iff #611 true)
#756 := [rewrite]: #755
#750 := (iff #493 #611)
#759 := (iff #778 false)
#760 := [rewrite]: #759
#464 := (iff #591 true)
#800 := [rewrite]: #464
#748 := [monotonicity #800 #760]: #750
#633 := [trans #748 #756]: #751
#635 := [monotonicity #633]: #634
#742 := [trans #635 #448]: #594
#747 := (iff #492 false)
#593 := (iff #492 #460)
#590 := (iff #782 true)
#754 := (iff #782 #611)
#752 := (iff #781 true)
#753 := [rewrite]: #752
#761 := [monotonicity #753 #760]: #754
#592 := [trans #761 #756]: #590
#746 := [monotonicity #592]: #593
#749 := [trans #746 #448]: #747
#740 := [monotonicity #749 #742]: #739
#645 := [trans #740 #628]: #643
#710 := [monotonicity #645 #736 #711]: #713
#697 := [trans #710 #694]: #695
#757 := (iff #503 true)
#612 := (iff #503 #611)
#764 := (iff #502 false)
#770 := [rewrite]: #764
#768 := (iff #780 true)
#769 := [rewrite]: #768
#613 := [monotonicity #769 #770]: #612
#758 := [trans #613 #756]: #757
#700 := [monotonicity #758 #697]: #699
#704 := [trans #700 #702]: #703
#686 := [monotonicity #704]: #685
#690 := [trans #686 #689]: #685
#707 := [quant-inst #9 #11]: #696
#691 := [mp #707 #690]: #706
#687 := [unit-resolution #691 #836]: #777
#693 := [monotonicity #687]: #15
#16 := (not #15)
#84 := [asserted]: #16
[unit-resolution #84 #693]: false
unsat
64f54c697dbe7c3319cdf093c32632d4b6ddde2a 298 0
#2 := false
decl f3 :: (-> S2 Int S3)
#14 := 0::Int
decl f4 :: S2
#7 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 3::Int
decl f6 :: (-> S5 Int S4)
#9 := 1::Int
decl f7 :: S5
#8 := f7
#10 := (f6 f7 1::Int)
#12 := (f5 #10 3::Int)
#13 := (f3 f4 #12)
#16 := (= #13 #15)
#777 := (= #12 0::Int)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#830 := (pattern #37)
#137 := -1::Int
#141 := (* -1::Int #24)
#138 := (* -1::Int #35)
#144 := (div #138 #141)
#310 := (* -1::Int #144)
#311 := (+ #37 #310)
#312 := (= #311 0::Int)
#47 := (div #35 #24)
#307 := (* -1::Int #47)
#308 := (+ #37 #307)
#309 := (= #308 0::Int)
#163 := (<= #24 0::Int)
#170 := (>= #35 0::Int)
#270 := (or #170 #163)
#271 := (not #270)
#159 := (<= #35 0::Int)
#268 := (or #159 #163)
#269 := (not #268)
#274 := (or #269 #271)
#313 := (if #274 #309 #312)
#306 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#314 := (if #40 #306 #313)
#831 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #830) #314)
#317 := (forall (vars (?v0 Int) (?v1 Int)) #314)
#834 := (iff #317 #831)
#832 := (iff #314 #314)
#833 := [refl]: #832
#835 := [quant-intro #833]: #834
#277 := (if #274 #47 #144)
#280 := (if #40 0::Int #277)
#283 := (= #37 #280)
#286 := (forall (vars (?v0 Int) (?v1 Int)) #283)
#318 := (iff #286 #317)
#315 := (iff #283 #314)
#316 := [rewrite]: #315
#319 := [quant-intro #316]: #318
#164 := (not #163)
#171 := (not #170)
#174 := (and #171 #164)
#160 := (not #159)
#167 := (and #160 #164)
#177 := (or #167 #174)
#180 := (if #177 #47 #144)
#183 := (if #40 0::Int #180)
#186 := (= #37 #183)
#189 := (forall (vars (?v0 Int) (?v1 Int)) #186)
#287 := (iff #189 #286)
#284 := (iff #186 #283)
#281 := (= #183 #280)
#278 := (= #180 #277)
#275 := (iff #177 #274)
#272 := (iff #174 #271)
#273 := [rewrite]: #272
#253 := (iff #167 #269)
#254 := [rewrite]: #253
#276 := [monotonicity #254 #273]: #275
#279 := [monotonicity #276]: #278
#282 := [monotonicity #279]: #281
#285 := [monotonicity #282]: #284
#288 := [quant-intro #285]: #287
#249 := (~ #189 #189)
#262 := (~ #186 #186)
#263 := [refl]: #262
#250 := [nnf-pos #263]: #249
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (if #46 #47 #50)
#52 := (if #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#192 := (iff #54 #189)
#147 := (if #46 #47 #144)
#150 := (if #40 0::Int #147)
#153 := (= #37 #150)
#156 := (forall (vars (?v0 Int) (?v1 Int)) #153)
#190 := (iff #156 #189)
#187 := (iff #153 #186)
#184 := (= #150 #183)
#181 := (= #147 #180)
#178 := (iff #46 #177)
#175 := (iff #45 #174)
#165 := (iff #42 #164)
#166 := [rewrite]: #165
#172 := (iff #44 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173 #166]: #175
#168 := (iff #43 #167)
#161 := (iff #41 #160)
#162 := [rewrite]: #161
#169 := [monotonicity #162 #166]: #168
#179 := [monotonicity #169 #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185]: #187
#191 := [quant-intro #188]: #190
#157 := (iff #54 #156)
#154 := (iff #53 #153)
#151 := (= #52 #150)
#148 := (= #51 #147)
#145 := (= #50 #144)
#142 := (= #49 #141)
#143 := [rewrite]: #142
#139 := (= #48 #138)
#140 := [rewrite]: #139
#146 := [monotonicity #140 #143]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#158 := [quant-intro #155]: #157
#193 := [trans #158 #191]: #192
#136 := [asserted]: #54
#194 := [mp #136 #193]: #189
#264 := [mp~ #194 #250]: #189
#289 := [mp #264 #288]: #286
#320 := [mp #289 #319]: #317
#836 := [mp #320 #835]: #831
#682 := (not #831)
#683 := (or #682 #777)
#776 := (* -1::Int 3::Int)
#772 := (* -1::Int 1::Int)
#765 := (div #772 #776)
#766 := (* -1::Int #765)
#767 := (+ #12 #766)
#762 := (= #767 0::Int)
#774 := (div 1::Int 3::Int)
#489 := (* -1::Int #774)
#771 := (+ #12 #489)
#775 := (= #771 0::Int)
#778 := (<= 3::Int 0::Int)
#493 := (>= 1::Int 0::Int)
#494 := (or #493 #778)
#495 := (not #494)
#781 := (<= 1::Int 0::Int)
#782 := (or #781 #778)
#492 := (not #782)
#773 := (or #492 #495)
#763 := (if #773 #775 #762)
#502 := (= 3::Int 0::Int)
#780 := (= 1::Int 0::Int)
#503 := (or #780 #502)
#768 := (if #503 #777 #763)
#678 := (or #682 #768)
#657 := (iff #678 #683)
#659 := (iff #683 #683)
#552 := [rewrite]: #659
#680 := (iff #768 #777)
#693 := (if false #777 #777)
#676 := (iff #693 #777)
#677 := [rewrite]: #676
#679 := (iff #768 #693)
#692 := (iff #763 #777)
#705 := (= #12 1::Int)
#1 := true
#686 := (if true #777 #705)
#690 := (iff #686 #777)
#691 := [rewrite]: #690
#688 := (iff #763 #686)
#707 := (iff #762 #705)
#697 := (+ -1::Int #12)
#702 := (= #697 0::Int)
#706 := (iff #702 #705)
#696 := [rewrite]: #706
#703 := (iff #762 #702)
#700 := (= #767 #697)
#714 := (+ #12 -1::Int)
#698 := (= #714 #697)
#699 := [rewrite]: #698
#694 := (= #767 #714)
#713 := (= #766 -1::Int)
#724 := (= #772 -1::Int)
#731 := [rewrite]: #724
#711 := (= #766 #772)
#708 := (= #765 1::Int)
#715 := -3::Int
#719 := (div -1::Int -3::Int)
#717 := (= #719 1::Int)
#722 := [rewrite]: #717
#720 := (= #765 #719)
#716 := (= #776 -3::Int)
#718 := [rewrite]: #716
#721 := [monotonicity #731 #718]: #720
#709 := [trans #721 #722]: #708
#712 := [monotonicity #709]: #711
#710 := [trans #712 #731]: #713
#695 := [monotonicity #710]: #694
#701 := [trans #695 #699]: #700
#704 := [monotonicity #701]: #703
#685 := [trans #704 #696]: #707
#729 := (iff #775 #777)
#727 := (= #771 #12)
#735 := (+ #12 0::Int)
#733 := (= #735 #12)
#738 := [rewrite]: #733
#736 := (= #771 #735)
#723 := (= #489 0::Int)
#741 := (* -1::Int 0::Int)
#734 := (= #741 0::Int)
#726 := [rewrite]: #734
#745 := (= #489 #741)
#651 := (= #774 0::Int)
#744 := [rewrite]: #651
#732 := [monotonicity #744]: #745
#725 := [trans #732 #726]: #723
#737 := [monotonicity #725]: #736
#728 := [trans #737 #738]: #727
#730 := [monotonicity #728]: #729
#649 := (iff #773 true)
#594 := (or true false)
#739 := (iff #594 true)
#740 := [rewrite]: #739
#647 := (iff #773 #594)
#646 := (iff #495 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#643 := (iff #495 #460)
#743 := (iff #494 true)
#742 := (iff #494 #594)
#760 := (iff #778 false)
#754 := [rewrite]: #760
#634 := (iff #493 true)
#635 := [rewrite]: #634
#644 := [monotonicity #635 #754]: #742
#628 := [trans #644 #740]: #743
#645 := [monotonicity #628]: #643
#639 := [trans #645 #448]: #646
#751 := (iff #492 true)
#746 := (not false)
#750 := (iff #746 true)
#748 := [rewrite]: #750
#747 := (iff #492 #746)
#592 := (iff #782 false)
#612 := (or false false)
#756 := (iff #612 false)
#757 := [rewrite]: #756
#761 := (iff #782 #612)
#753 := (iff #781 false)
#759 := [rewrite]: #753
#590 := [monotonicity #759 #754]: #761
#593 := [trans #590 #757]: #592
#749 := [monotonicity #593]: #747
#633 := [trans #749 #748]: #751
#648 := [monotonicity #633 #639]: #647
#650 := [trans #648 #740]: #649
#689 := [monotonicity #650 #730 #685]: #688
#687 := [trans #689 #691]: #692
#758 := (iff #503 false)
#613 := (iff #503 #612)
#770 := (iff #502 false)
#611 := [rewrite]: #770
#769 := (iff #780 false)
#764 := [rewrite]: #769
#755 := [monotonicity #764 #611]: #613
#752 := [trans #755 #757]: #758
#675 := [monotonicity #752 #687]: #679
#681 := [trans #675 #677]: #680
#658 := [monotonicity #681]: #657
#663 := [trans #658 #552]: #657
#684 := [quant-inst #9 #11]: #678
#664 := [mp #684 #663]: #683
#670 := [unit-resolution #664 #836]: #777
#666 := [monotonicity #670]: #16
#17 := (not #16)
#85 := [asserted]: #17
[unit-resolution #85 #666]: false
unsat
d531b5a296176d2110a62307c2de9e0839c802fe 288 0
#2 := false
decl f3 :: (-> S2 Int S3)
#13 := 1::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 1::Int)
decl f5 :: (-> S4 Int Int)
#9 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 3::Int)
#11 := (f5 #10 3::Int)
#12 := (f3 f4 #11)
#15 := (= #12 #14)
#727 := (= #11 1::Int)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#830 := (pattern #37)
#23 := 0::Int
#137 := -1::Int
#141 := (* -1::Int #24)
#138 := (* -1::Int #35)
#144 := (div #138 #141)
#310 := (* -1::Int #144)
#311 := (+ #37 #310)
#312 := (= #311 0::Int)
#47 := (div #35 #24)
#307 := (* -1::Int #47)
#308 := (+ #37 #307)
#309 := (= #308 0::Int)
#163 := (<= #24 0::Int)
#170 := (>= #35 0::Int)
#270 := (or #170 #163)
#271 := (not #270)
#159 := (<= #35 0::Int)
#268 := (or #159 #163)
#269 := (not #268)
#274 := (or #269 #271)
#313 := (if #274 #309 #312)
#306 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#314 := (if #40 #306 #313)
#831 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #830) #314)
#317 := (forall (vars (?v0 Int) (?v1 Int)) #314)
#834 := (iff #317 #831)
#832 := (iff #314 #314)
#833 := [refl]: #832
#835 := [quant-intro #833]: #834
#277 := (if #274 #47 #144)
#280 := (if #40 0::Int #277)
#283 := (= #37 #280)
#286 := (forall (vars (?v0 Int) (?v1 Int)) #283)
#318 := (iff #286 #317)
#315 := (iff #283 #314)
#316 := [rewrite]: #315
#319 := [quant-intro #316]: #318
#164 := (not #163)
#171 := (not #170)
#174 := (and #171 #164)
#160 := (not #159)
#167 := (and #160 #164)
#177 := (or #167 #174)
#180 := (if #177 #47 #144)
#183 := (if #40 0::Int #180)
#186 := (= #37 #183)
#189 := (forall (vars (?v0 Int) (?v1 Int)) #186)
#287 := (iff #189 #286)
#284 := (iff #186 #283)
#281 := (= #183 #280)
#278 := (= #180 #277)
#275 := (iff #177 #274)
#272 := (iff #174 #271)
#273 := [rewrite]: #272
#253 := (iff #167 #269)
#254 := [rewrite]: #253
#276 := [monotonicity #254 #273]: #275
#279 := [monotonicity #276]: #278
#282 := [monotonicity #279]: #281
#285 := [monotonicity #282]: #284
#288 := [quant-intro #285]: #287
#249 := (~ #189 #189)
#262 := (~ #186 #186)
#263 := [refl]: #262
#250 := [nnf-pos #263]: #249
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (if #46 #47 #50)
#52 := (if #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#192 := (iff #54 #189)
#147 := (if #46 #47 #144)
#150 := (if #40 0::Int #147)
#153 := (= #37 #150)
#156 := (forall (vars (?v0 Int) (?v1 Int)) #153)
#190 := (iff #156 #189)
#187 := (iff #153 #186)
#184 := (= #150 #183)
#181 := (= #147 #180)
#178 := (iff #46 #177)
#175 := (iff #45 #174)
#165 := (iff #42 #164)
#166 := [rewrite]: #165
#172 := (iff #44 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173 #166]: #175
#168 := (iff #43 #167)
#161 := (iff #41 #160)
#162 := [rewrite]: #161
#169 := [monotonicity #162 #166]: #168
#179 := [monotonicity #169 #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185]: #187
#191 := [quant-intro #188]: #190
#157 := (iff #54 #156)
#154 := (iff #53 #153)
#151 := (= #52 #150)
#148 := (= #51 #147)
#145 := (= #50 #144)
#142 := (= #49 #141)
#143 := [rewrite]: #142
#139 := (= #48 #138)
#140 := [rewrite]: #139
#146 := [monotonicity #140 #143]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#158 := [quant-intro #155]: #157
#193 := [trans #158 #191]: #192
#136 := [asserted]: #54
#194 := [mp #136 #193]: #189
#264 := [mp~ #194 #250]: #189
#289 := [mp #264 #288]: #286
#320 := [mp #289 #319]: #317
#836 := [mp #320 #835]: #831
#692 := (not #831)
#687 := (or #692 #727)
#775 := (* -1::Int 3::Int)
#772 := (div #775 #775)
#776 := (* -1::Int #772)
#765 := (+ #11 #776)
#766 := (= #765 0::Int)
#773 := (div 3::Int 3::Int)
#774 := (* -1::Int #773)
#489 := (+ #11 #774)
#771 := (= #489 0::Int)
#781 := (<= 3::Int 0::Int)
#492 := (>= 3::Int 0::Int)
#493 := (or #492 #781)
#494 := (not #493)
#778 := (or #781 #781)
#782 := (not #778)
#495 := (or #782 #494)
#767 := (if #495 #771 #766)
#777 := (= #11 0::Int)
#502 := (= 3::Int 0::Int)
#503 := (or #502 #502)
#762 := (if #503 #777 #767)
#693 := (or #692 #762)
#675 := (iff #693 #687)
#677 := (iff #687 #687)
#680 := [rewrite]: #677
#690 := (iff #762 #727)
#707 := (if false #777 #727)
#688 := (iff #707 #727)
#689 := [rewrite]: #688
#685 := (iff #762 #707)
#706 := (iff #767 #727)
#1 := true
#701 := (if true #727 #727)
#704 := (iff #701 #727)
#705 := [rewrite]: #704
#702 := (iff #767 #701)
#699 := (iff #766 #727)
#726 := (+ -1::Int #11)
#737 := (= #726 0::Int)
#728 := (iff #737 #727)
#729 := [rewrite]: #728
#697 := (iff #766 #737)
#694 := (= #765 #726)
#745 := (+ #11 -1::Int)
#723 := (= #745 #726)
#725 := [rewrite]: #723
#710 := (= #765 #745)
#712 := (= #776 -1::Int)
#647 := (* -1::Int 1::Int)
#650 := (= #647 -1::Int)
#651 := [rewrite]: #650
#709 := (= #776 #647)
#722 := (= #772 1::Int)
#731 := -3::Int
#718 := (div -3::Int -3::Int)
#721 := (= #718 1::Int)
#717 := [rewrite]: #721
#719 := (= #772 #718)
#715 := (= #775 -3::Int)
#716 := [rewrite]: #715
#720 := [monotonicity #716 #716]: #719
#708 := [trans #720 #717]: #722
#711 := [monotonicity #708]: #709
#713 := [trans #711 #651]: #712
#714 := [monotonicity #713]: #710
#695 := [trans #714 #725]: #694
#698 := [monotonicity #695]: #697
#700 := [trans #698 #729]: #699
#730 := (iff #771 #727)
#733 := (iff #771 #737)
#735 := (= #489 #726)
#732 := (= #489 #745)
#744 := (= #774 -1::Int)
#648 := (= #774 #647)
#646 := (= #773 1::Int)
#639 := [rewrite]: #646
#649 := [monotonicity #639]: #648
#741 := [trans #649 #651]: #744
#734 := [monotonicity #741]: #732
#736 := [trans #734 #725]: #735
#738 := [monotonicity #736]: #733
#724 := [trans #738 #729]: #730
#643 := (iff #495 true)
#750 := (or true false)
#633 := (iff #750 true)
#634 := [rewrite]: #633
#743 := (iff #495 #750)
#739 := (iff #494 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#742 := (iff #494 #460)
#635 := (iff #493 true)
#748 := (iff #493 #750)
#756 := (iff #781 false)
#757 := [rewrite]: #756
#747 := (iff #492 true)
#749 := [rewrite]: #747
#751 := [monotonicity #749 #757]: #748
#594 := [trans #751 #634]: #635
#644 := [monotonicity #594]: #742
#740 := [trans #644 #448]: #739
#593 := (iff #782 true)
#760 := (not false)
#590 := (iff #760 true)
#592 := [rewrite]: #590
#754 := (iff #782 #760)
#753 := (iff #778 false)
#769 := (or false false)
#611 := (iff #769 false)
#612 := [rewrite]: #611
#758 := (iff #778 #769)
#752 := [monotonicity #757 #757]: #758
#759 := [trans #752 #612]: #753
#761 := [monotonicity #759]: #754
#746 := [trans #761 #592]: #593
#628 := [monotonicity #746 #740]: #743
#645 := [trans #628 #634]: #643
#703 := [monotonicity #645 #724 #700]: #702
#696 := [trans #703 #705]: #706
#613 := (iff #503 false)
#764 := (iff #503 #769)
#763 := (iff #502 false)
#768 := [rewrite]: #763
#770 := [monotonicity #768 #768]: #764
#755 := [trans #770 #612]: #613
#686 := [monotonicity #755 #696]: #685
#691 := [trans #686 #689]: #690
#676 := [monotonicity #691]: #675
#681 := [trans #676 #680]: #675
#679 := [quant-inst #9 #9]: #693
#682 := [mp #679 #681]: #687
#684 := [unit-resolution #682 #836]: #727
#657 := [monotonicity #684]: #15
#16 := (not #15)
#85 := [asserted]: #16
[unit-resolution #85 #657]: false
unsat
d789ae3569fe642ed1b603027ce5b8f4594bdee7 409 0
#2 := false
#22 := 0::Int
#12 := 3::Int
decl f6 :: (-> S4 S5 Int)
decl f8 :: S5
#9 := f8
decl f7 :: S4
#8 := f7
#10 := (f6 f7 f8)
#756 := (mod #10 3::Int)
#87 := -1::Int
#730 := (* -1::Int #756)
#482 := (div #10 3::Int)
#790 := -3::Int
#729 := (* -3::Int #482)
#726 := (+ #729 #730)
#731 := (+ #10 #726)
#728 := (= #731 0::Int)
#1 := true
#82 := [true-axiom]: true
#685 := (or false #728)
#686 := [th-lemma arith]: #685
#689 := [unit-resolution #686 #82]: #728
#721 := (>= #731 0::Int)
#634 := (not #721)
#722 := (>= #756 0::Int)
#671 := (or false #722)
#639 := [th-lemma arith]: #671
#646 := [unit-resolution #639 #82]: #722
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#11 := (f4 f5 #10)
#13 := (f3 #11 3::Int)
#90 := (* -1::Int #13)
#91 := (+ #10 #90)
#89 := (>= #91 0::Int)
#93 := (not #89)
#14 := (<= #13 #10)
#15 := (not #14)
#94 := (iff #15 #93)
#88 := (iff #14 #89)
#92 := [rewrite]: #88
#95 := [monotonicity #92]: #94
#84 := [asserted]: #15
#96 := [mp #84 #95]: #93
#814 := (* -1::Int #482)
#815 := (+ #13 #814)
#758 := (<= #815 0::Int)
#816 := (= #815 0::Int)
#817 := (* -1::Int #10)
#501 := (div #817 -3::Int)
#504 := (* -1::Int #501)
#498 := (+ #13 #504)
#781 := (= #498 0::Int)
#470 := (>= #10 0::Int)
#412 := (not #470)
#497 := (<= #10 0::Int)
#445 := (not #497)
#511 := (or #445 #412)
#775 := (if #511 #816 #781)
#491 := (= #10 0::Int)
#648 := (not #491)
#762 := (<= #13 0::Int)
#493 := (= #13 0::Int)
#701 := [hypothesis]: #491
#696 := (or #648 #493)
#772 := (if #491 #493 #775)
#23 := (:var 0 Int)
#34 := (:var 1 Int)
#35 := (f4 f5 #34)
#36 := (f3 #35 #23)
#839 := (pattern #36)
#149 := (* -1::Int #23)
#146 := (* -1::Int #34)
#152 := (div #146 #149)
#318 := (* -1::Int #152)
#319 := (+ #36 #318)
#320 := (= #319 0::Int)
#46 := (div #34 #23)
#315 := (* -1::Int #46)
#316 := (+ #36 #315)
#317 := (= #316 0::Int)
#171 := (<= #23 0::Int)
#178 := (>= #34 0::Int)
#278 := (or #178 #171)
#279 := (not #278)
#167 := (<= #34 0::Int)
#276 := (or #167 #171)
#277 := (not #276)
#282 := (or #277 #279)
#321 := (if #282 #317 #320)
#314 := (= #36 0::Int)
#38 := (= #23 0::Int)
#37 := (= #34 0::Int)
#39 := (or #37 #38)
#322 := (if #39 #314 #321)
#840 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #839) #322)
#325 := (forall (vars (?v0 Int) (?v1 Int)) #322)
#843 := (iff #325 #840)
#841 := (iff #322 #322)
#842 := [refl]: #841
#844 := [quant-intro #842]: #843
#285 := (if #282 #46 #152)
#288 := (if #39 0::Int #285)
#291 := (= #36 #288)
#294 := (forall (vars (?v0 Int) (?v1 Int)) #291)
#326 := (iff #294 #325)
#323 := (iff #291 #322)
#324 := [rewrite]: #323
#327 := [quant-intro #324]: #326
#172 := (not #171)
#179 := (not #178)
#182 := (and #179 #172)
#168 := (not #167)
#175 := (and #168 #172)
#185 := (or #175 #182)
#188 := (if #185 #46 #152)
#191 := (if #39 0::Int #188)
#194 := (= #36 #191)
#197 := (forall (vars (?v0 Int) (?v1 Int)) #194)
#295 := (iff #197 #294)
#292 := (iff #194 #291)
#289 := (= #191 #288)
#286 := (= #188 #285)
#283 := (iff #185 #282)
#280 := (iff #182 #279)
#281 := [rewrite]: #280
#261 := (iff #175 #277)
#262 := [rewrite]: #261
#284 := [monotonicity #262 #281]: #283
#287 := [monotonicity #284]: #286
#290 := [monotonicity #287]: #289
#293 := [monotonicity #290]: #292
#296 := [quant-intro #293]: #295
#257 := (~ #197 #197)
#270 := (~ #194 #194)
#271 := [refl]: #270
#258 := [nnf-pos #271]: #257
#48 := (- #23)
#47 := (- #34)
#49 := (div #47 #48)
#41 := (< 0::Int #23)
#43 := (< #34 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #34)
#42 := (and #40 #41)
#45 := (or #42 #44)
#50 := (if #45 #46 #49)
#51 := (if #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#200 := (iff #53 #197)
#155 := (if #45 #46 #152)
#158 := (if #39 0::Int #155)
#161 := (= #36 #158)
#164 := (forall (vars (?v0 Int) (?v1 Int)) #161)
#198 := (iff #164 #197)
#195 := (iff #161 #194)
#192 := (= #158 #191)
#189 := (= #155 #188)
#186 := (iff #45 #185)
#183 := (iff #44 #182)
#173 := (iff #41 #172)
#174 := [rewrite]: #173
#180 := (iff #43 #179)
#181 := [rewrite]: #180
#184 := [monotonicity #181 #174]: #183
#176 := (iff #42 #175)
#169 := (iff #40 #168)
#170 := [rewrite]: #169
#177 := [monotonicity #170 #174]: #176
#187 := [monotonicity #177 #184]: #186
#190 := [monotonicity #187]: #189
#193 := [monotonicity #190]: #192
#196 := [monotonicity #193]: #195
#199 := [quant-intro #196]: #198
#165 := (iff #53 #164)
#162 := (iff #52 #161)
#159 := (= #51 #158)
#156 := (= #50 #155)
#153 := (= #49 #152)
#150 := (= #48 #149)
#151 := [rewrite]: #150
#147 := (= #47 #146)
#148 := [rewrite]: #147
#154 := [monotonicity #148 #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#201 := [trans #166 #199]: #200
#145 := [asserted]: #53
#202 := [mp #145 #201]: #197
#272 := [mp~ #202 #258]: #197
#297 := [mp #272 #296]: #294
#328 := [mp #297 #327]: #325
#845 := [mp #328 #844]: #840
#773 := (not #840)
#779 := (or #773 #772)
#812 := (* -1::Int 3::Int)
#818 := (div #817 #812)
#808 := (* -1::Int #818)
#468 := (+ #13 #808)
#473 := (= #468 0::Int)
#476 := (<= 3::Int 0::Int)
#600 := (or #470 #476)
#807 := (not #600)
#811 := (or #497 #476)
#813 := (not #811)
#481 := (or #813 #807)
#809 := (if #481 #816 #473)
#492 := (= 3::Int 0::Int)
#496 := (or #491 #492)
#469 := (if #496 #493 #809)
#620 := (or #773 #469)
#622 := (iff #620 #779)
#765 := (iff #779 #779)
#766 := [rewrite]: #765
#777 := (iff #469 #772)
#776 := (iff #809 #775)
#785 := (iff #473 #781)
#780 := (= #468 #498)
#782 := (= #808 #504)
#502 := (= #818 #501)
#787 := (= #812 -3::Int)
#791 := [rewrite]: #787
#503 := [monotonicity #791]: #502
#783 := [monotonicity #503]: #782
#784 := [monotonicity #783]: #780
#774 := [monotonicity #784]: #785
#512 := (iff #481 #511)
#788 := (iff #807 #412)
#517 := (iff #600 #470)
#806 := (or #470 false)
#515 := (iff #806 #470)
#516 := [rewrite]: #515
#792 := (iff #600 #806)
#798 := (iff #476 false)
#799 := [rewrite]: #798
#793 := [monotonicity #799]: #792
#518 := [trans #793 #516]: #517
#789 := [monotonicity #518]: #788
#805 := (iff #813 #445)
#804 := (iff #811 #497)
#800 := (or #497 false)
#439 := (iff #800 #497)
#802 := [rewrite]: #439
#795 := (iff #811 #800)
#801 := [monotonicity #799]: #795
#444 := [trans #801 #802]: #804
#803 := [monotonicity #444]: #805
#786 := [monotonicity #803 #789]: #512
#771 := [monotonicity #786 #774]: #776
#796 := (iff #496 #491)
#794 := (or #491 false)
#459 := (iff #794 #491)
#460 := [rewrite]: #459
#457 := (iff #496 #794)
#810 := (iff #492 false)
#453 := [rewrite]: #810
#458 := [monotonicity #453]: #457
#797 := [trans #458 #460]: #796
#778 := [monotonicity #797 #771]: #777
#764 := [monotonicity #778]: #622
#767 := [trans #764 #766]: #622
#621 := [quant-inst #10 #12]: #620
#761 := [mp #621 #767]: #779
#666 := [unit-resolution #761 #845]: #772
#655 := (not #772)
#656 := (or #655 #648 #493)
#657 := [def-axiom]: #656
#702 := [unit-resolution #657 #666]: #696
#688 := [unit-resolution #702 #701]: #493
#660 := (not #493)
#684 := (or #660 #762)
#720 := [th-lemma arith triangle-eq]: #684
#640 := [unit-resolution #720 #688]: #762
#647 := (or #648 #470)
#649 := [th-lemma arith triangle-eq]: #647
#650 := [unit-resolution #649 #701]: #470
#651 := [th-lemma arith farkas -1 1 1 #650 #96 #640]: false
#661 := [lemma #651]: #648
#667 := (or #491 #775)
#658 := (or #655 #491 #775)
#659 := [def-axiom]: #658
#668 := [unit-resolution #659 #666]: #667
#625 := [unit-resolution #668 #661]: #775
decl f9 :: (-> S6 Int S5)
decl f10 :: S6
#16 := f10
#406 := (f9 f10 #10)
#743 := (f6 f7 #406)
#735 := (= #743 0::Int)
#609 := (not #735)
#664 := (iff #648 #609)
#683 := (iff #491 #735)
#682 := (iff #735 #491)
#680 := (= #743 #10)
#490 := (= #406 f8)
#17 := (:var 0 S5)
#18 := (f6 f7 #17)
#819 := (pattern #18)
#19 := (f9 f10 #18)
#20 := (= #19 #17)
#820 := (forall (vars (?v0 S5)) (:pat #819) #20)
#21 := (forall (vars (?v0 S5)) #20)
#823 := (iff #21 #820)
#821 := (iff #20 #20)
#822 := [refl]: #821
#824 := [quant-intro #822]: #823
#265 := (~ #21 #21)
#263 := (~ #20 #20)
#264 := [refl]: #263
#266 := [nnf-pos #264]: #265
#85 := [asserted]: #21
#251 := [mp~ #85 #266]: #21
#825 := [mp #251 #824]: #820
#483 := (not #820)
#494 := (or #483 #490)
#495 := [quant-inst #9]: #494
#677 := [unit-resolution #495 #825]: #490
#681 := [monotonicity #677]: #680
#678 := [monotonicity #681]: #682
#663 := [symm #678]: #683
#645 := [monotonicity #663]: #664
#626 := [mp #661 #645]: #609
#732 := (or #470 #735)
#25 := (f9 f10 #23)
#826 := (pattern #25)
#26 := (f6 f7 #25)
#31 := (= #26 0::Int)
#105 := (>= #23 0::Int)
#136 := (or #105 #31)
#833 := (forall (vars (?v0 Int)) (:pat #826) #136)
#139 := (forall (vars (?v0 Int)) #136)
#836 := (iff #139 #833)
#834 := (iff #136 #136)
#835 := [refl]: #834
#837 := [quant-intro #835]: #836
#255 := (~ #139 #139)
#267 := (~ #136 #136)
#268 := [refl]: #267
#256 := [nnf-pos #268]: #255
#30 := (< #23 0::Int)
#32 := (implies #30 #31)
#33 := (forall (vars (?v0 Int)) #32)
#142 := (iff #33 #139)
#120 := (not #30)
#121 := (or #120 #31)
#124 := (forall (vars (?v0 Int)) #121)
#140 := (iff #124 #139)
#137 := (iff #121 #136)
#134 := (iff #120 #105)
#107 := (not #105)
#129 := (not #107)
#132 := (iff #129 #105)
#133 := [rewrite]: #132
#130 := (iff #120 #129)
#127 := (iff #30 #107)
#128 := [rewrite]: #127
#131 := [monotonicity #128]: #130
#135 := [trans #131 #133]: #134
#138 := [monotonicity #135]: #137
#141 := [quant-intro #138]: #140
#125 := (iff #33 #124)
#122 := (iff #32 #121)
#123 := [rewrite]: #122
#126 := [quant-intro #123]: #125
#143 := [trans #126 #141]: #142
#119 := [asserted]: #33
#144 := [mp #119 #143]: #139
#269 := [mp~ #144 #256]: #139
#838 := [mp #269 #837]: #833
#745 := (not #833)
#746 := (or #745 #470 #735)
#742 := (or #745 #732)
#736 := (iff #742 #746)
#737 := [rewrite]: #736
#747 := [quant-inst #10]: #742
#738 := [mp #747 #737]: #746
#670 := [unit-resolution #738 #838]: #732
#627 := [unit-resolution #670 #626]: #470
#628 := (or #491 #445 #412)
#629 := [th-lemma arith triangle-eq]: #628
#630 := [unit-resolution #629 #627 #661]: #445
#769 := (or #511 #497)
#763 := [def-axiom]: #769
#631 := [unit-resolution #763 #630]: #511
#601 := (not #511)
#643 := (not #775)
#644 := (or #643 #601 #816)
#603 := [def-axiom]: #644
#632 := [unit-resolution #603 #631 #625]: #816
#748 := (not #816)
#679 := (or #748 #758)
#675 := [th-lemma arith triangle-eq]: #679
#633 := [unit-resolution #675 #632]: #758
#635 := (not #758)
#619 := (not #722)
#596 := (or #634 #412 #619 #635 #89)
#597 := [th-lemma arith assign-bounds 2 1 3 3]: #596
#604 := [unit-resolution #597 #627 #633 #96 #646]: #634
#690 := (not #728)
#691 := (or #690 #721)
#692 := [th-lemma arith triangle-eq]: #691
[unit-resolution #692 #604 #689]: false
unsat
c5c3c657f3d41eaffb467378e2ecb04b1c7d2a98 559 0
#2 := false
decl f10 :: S3
#10 := f10
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 Int Int)
#13 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 3::Int)
decl f4 :: S2
#7 := f4
#15 := (f3 f4 #14)
#16 := (= #15 f10)
#17 := 0::Int
#18 := (f3 f4 0::Int)
#416 := (= #18 f10)
#19 := (= f10 #18)
#476 := (f3 f4 #11)
#424 := (= #476 #18)
#437 := (= #18 #476)
#434 := (= 0::Int #11)
#482 := (f8 f9 #15)
#574 := (= #482 #11)
#462 := (= #11 #482)
#456 := (= f10 #15)
#406 := (not #19)
#534 := [hypothesis]: #406
#493 := (or #16 #19)
#89 := (not #16)
#90 := (iff #89 #19)
#20 := (iff #16 #19)
#21 := (not #20)
#91 := (iff #21 #90)
#92 := [rewrite]: #91
#88 := [asserted]: #21
#95 := [mp #88 #92]: #90
#490 := (not #90)
#495 := (or #16 #19 #490)
#496 := [def-axiom]: #495
#497 := [unit-resolution #496 #95]: #493
#536 := [unit-resolution #497 #534]: #16
#461 := [symm #536]: #456
#463 := [monotonicity #461]: #462
#426 := [symm #463]: #574
#427 := (= 0::Int #482)
#447 := (= #14 #482)
#814 := (= #482 #14)
#813 := (>= #14 0::Int)
#585 := (or #813 #89)
#784 := (= #11 0::Int)
#816 := (= #482 0::Int)
#581 := (iff #816 #784)
#595 := [hypothesis]: #16
#577 := [monotonicity #595]: #574
#583 := [monotonicity #577]: #581
#470 := (not #813)
#586 := [hypothesis]: #470
#817 := (or #813 #816)
#27 := (:var 0 Int)
#29 := (f3 f4 #27)
#826 := (pattern #29)
#30 := (f8 f9 #29)
#35 := (= #30 0::Int)
#105 := (>= #27 0::Int)
#135 := (or #105 #35)
#833 := (forall (vars (?v0 Int)) (:pat #826) #135)
#138 := (forall (vars (?v0 Int)) #135)
#836 := (iff #138 #833)
#834 := (iff #135 #135)
#835 := [refl]: #834
#837 := [quant-intro #835]: #836
#255 := (~ #138 #138)
#267 := (~ #135 #135)
#268 := [refl]: #267
#256 := [nnf-pos #268]: #255
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#141 := (iff #37 #138)
#119 := (not #34)
#120 := (or #119 #35)
#123 := (forall (vars (?v0 Int)) #120)
#139 := (iff #123 #138)
#136 := (iff #120 #135)
#133 := (iff #119 #105)
#106 := (not #105)
#128 := (not #106)
#131 := (iff #128 #105)
#132 := [rewrite]: #131
#129 := (iff #119 #128)
#126 := (iff #34 #106)
#127 := [rewrite]: #126
#130 := [monotonicity #127]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134]: #136
#140 := [quant-intro #137]: #139
#124 := (iff #37 #123)
#121 := (iff #36 #120)
#122 := [rewrite]: #121
#125 := [quant-intro #122]: #124
#142 := [trans #125 #140]: #141
#118 := [asserted]: #37
#143 := [mp #118 #142]: #138
#269 := [mp~ #143 #256]: #138
#838 := [mp #269 #837]: #833
#794 := (not #833)
#457 := (or #794 #813 #816)
#458 := (or #794 #817)
#460 := (iff #458 #457)
#796 := [rewrite]: #460
#459 := [quant-inst #14]: #458
#797 := [mp #459 #796]: #457
#594 := [unit-resolution #797 #838]: #817
#590 := [unit-resolution #594 #586]: #816
#584 := [mp #590 #583]: #784
#690 := (not #784)
#774 := (= #14 0::Int)
#666 := (not #774)
#587 := (or #666 #813)
#588 := [th-lemma arith triangle-eq]: #587
#589 := [unit-resolution #588 #586]: #666
#592 := (or #690 #774)
#735 := -3::Int
#145 := -1::Int
#765 := (* -1::Int #11)
#744 := (div #765 -3::Int)
#742 := (* -1::Int #744)
#737 := (+ #14 #742)
#733 := (= #737 0::Int)
#620 := (div #11 3::Int)
#621 := (* -1::Int #620)
#622 := (+ #14 #621)
#764 := (= #622 0::Int)
#777 := (>= #11 0::Int)
#660 := (not #777)
#775 := (<= #11 0::Int)
#752 := (not #775)
#754 := (or #752 #660)
#725 := (if #754 #764 #733)
#729 := (if #784 #774 #725)
#38 := (:var 1 Int)
#39 := (f6 f7 #38)
#40 := (f5 #39 #27)
#839 := (pattern #40)
#149 := (* -1::Int #27)
#146 := (* -1::Int #38)
#152 := (div #146 #149)
#318 := (* -1::Int #152)
#319 := (+ #40 #318)
#320 := (= #319 0::Int)
#50 := (div #38 #27)
#315 := (* -1::Int #50)
#316 := (+ #40 #315)
#317 := (= #316 0::Int)
#171 := (<= #27 0::Int)
#178 := (>= #38 0::Int)
#278 := (or #178 #171)
#279 := (not #278)
#167 := (<= #38 0::Int)
#276 := (or #167 #171)
#277 := (not #276)
#282 := (or #277 #279)
#321 := (if #282 #317 #320)
#314 := (= #40 0::Int)
#42 := (= #27 0::Int)
#41 := (= #38 0::Int)
#43 := (or #41 #42)
#322 := (if #43 #314 #321)
#840 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #839) #322)
#325 := (forall (vars (?v0 Int) (?v1 Int)) #322)
#843 := (iff #325 #840)
#841 := (iff #322 #322)
#842 := [refl]: #841
#844 := [quant-intro #842]: #843
#285 := (if #282 #50 #152)
#288 := (if #43 0::Int #285)
#291 := (= #40 #288)
#294 := (forall (vars (?v0 Int) (?v1 Int)) #291)
#326 := (iff #294 #325)
#323 := (iff #291 #322)
#324 := [rewrite]: #323
#327 := [quant-intro #324]: #326
#172 := (not #171)
#179 := (not #178)
#182 := (and #179 #172)
#168 := (not #167)
#175 := (and #168 #172)
#185 := (or #175 #182)
#188 := (if #185 #50 #152)
#191 := (if #43 0::Int #188)
#194 := (= #40 #191)
#197 := (forall (vars (?v0 Int) (?v1 Int)) #194)
#295 := (iff #197 #294)
#292 := (iff #194 #291)
#289 := (= #191 #288)
#286 := (= #188 #285)
#283 := (iff #185 #282)
#280 := (iff #182 #279)
#281 := [rewrite]: #280
#261 := (iff #175 #277)
#262 := [rewrite]: #261
#284 := [monotonicity #262 #281]: #283
#287 := [monotonicity #284]: #286
#290 := [monotonicity #287]: #289
#293 := [monotonicity #290]: #292
#296 := [quant-intro #293]: #295
#257 := (~ #197 #197)
#270 := (~ #194 #194)
#271 := [refl]: #270
#258 := [nnf-pos #271]: #257
#52 := (- #27)
#51 := (- #38)
#53 := (div #51 #52)
#45 := (< 0::Int #27)
#47 := (< #38 0::Int)
#48 := (and #47 #45)
#44 := (< 0::Int #38)
#46 := (and #44 #45)
#49 := (or #46 #48)
#54 := (if #49 #50 #53)
#55 := (if #43 0::Int #54)
#56 := (= #40 #55)
#57 := (forall (vars (?v0 Int) (?v1 Int)) #56)
#200 := (iff #57 #197)
#155 := (if #49 #50 #152)
#158 := (if #43 0::Int #155)
#161 := (= #40 #158)
#164 := (forall (vars (?v0 Int) (?v1 Int)) #161)
#198 := (iff #164 #197)
#195 := (iff #161 #194)
#192 := (= #158 #191)
#189 := (= #155 #188)
#186 := (iff #49 #185)
#183 := (iff #48 #182)
#173 := (iff #45 #172)
#174 := [rewrite]: #173
#180 := (iff #47 #179)
#181 := [rewrite]: #180
#184 := [monotonicity #181 #174]: #183
#176 := (iff #46 #175)
#169 := (iff #44 #168)
#170 := [rewrite]: #169
#177 := [monotonicity #170 #174]: #176
#187 := [monotonicity #177 #184]: #186
#190 := [monotonicity #187]: #189
#193 := [monotonicity #190]: #192
#196 := [monotonicity #193]: #195
#199 := [quant-intro #196]: #198
#165 := (iff #57 #164)
#162 := (iff #56 #161)
#159 := (= #55 #158)
#156 := (= #54 #155)
#153 := (= #53 #152)
#150 := (= #52 #149)
#151 := [rewrite]: #150
#147 := (= #51 #146)
#148 := [rewrite]: #147
#154 := [monotonicity #148 #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#201 := [trans #166 #199]: #200
#144 := [asserted]: #57
#202 := [mp #144 #201]: #197
#272 := [mp~ #202 #258]: #197
#297 := [mp #272 #296]: #294
#328 := [mp #297 #327]: #325
#845 := [mp #328 #844]: #840
#731 := (not #840)
#717 := (or #731 #729)
#766 := (* -1::Int 3::Int)
#767 := (div #765 #766)
#761 := (* -1::Int #767)
#762 := (+ #14 #761)
#768 := (= #762 0::Int)
#776 := (<= 3::Int 0::Int)
#778 := (or #777 #776)
#773 := (not #778)
#771 := (or #775 #776)
#772 := (not #771)
#779 := (or #772 #773)
#769 := (if #779 #764 #768)
#781 := (= 3::Int 0::Int)
#785 := (or #784 #781)
#763 := (if #785 #774 #769)
#718 := (or #731 #763)
#721 := (iff #718 #717)
#719 := (iff #717 #717)
#723 := [rewrite]: #719
#730 := (iff #763 #729)
#727 := (iff #769 #725)
#740 := (iff #768 #733)
#738 := (= #762 #737)
#747 := (= #761 #742)
#745 := (= #767 #744)
#732 := (= #766 -3::Int)
#734 := [rewrite]: #732
#746 := [monotonicity #734]: #745
#736 := [monotonicity #746]: #747
#739 := [monotonicity #736]: #738
#724 := [monotonicity #739]: #740
#741 := (iff #779 #754)
#753 := (iff #773 #660)
#658 := (iff #778 #777)
#654 := (or #777 false)
#656 := (iff #654 #777)
#657 := [rewrite]: #656
#655 := (iff #778 #654)
#760 := (iff #776 false)
#642 := [rewrite]: #760
#648 := [monotonicity #642]: #655
#659 := [trans #648 #657]: #658
#750 := [monotonicity #659]: #753
#637 := (iff #772 #752)
#748 := (iff #771 #775)
#643 := (or #775 false)
#751 := (iff #643 #775)
#653 := [rewrite]: #751
#644 := (iff #771 #643)
#603 := [monotonicity #642]: #644
#749 := [trans #603 #653]: #748
#652 := [monotonicity #749]: #637
#743 := [monotonicity #652 #750]: #741
#728 := [monotonicity #743 #724]: #727
#759 := (iff #785 #784)
#601 := (or #784 false)
#756 := (iff #601 #784)
#758 := [rewrite]: #756
#602 := (iff #785 #601)
#770 := (iff #781 false)
#599 := [rewrite]: #770
#755 := [monotonicity #599]: #602
#757 := [trans #755 #758]: #759
#726 := [monotonicity #757 #728]: #730
#722 := [monotonicity #726]: #721
#703 := [trans #722 #723]: #721
#720 := [quant-inst #11 #13]: #718
#704 := [mp #720 #703]: #717
#591 := [unit-resolution #704 #845]: #729
#689 := (not #729)
#691 := (or #689 #690 #774)
#692 := [def-axiom]: #691
#593 := [unit-resolution #692 #591]: #592
#436 := [unit-resolution #593 #589]: #690
#582 := [unit-resolution #436 #584]: false
#573 := [lemma #582]: #585
#537 := [unit-resolution #573 #536]: #813
#815 := (or #470 #814)
#31 := (= #30 #27)
#109 := (or #106 #31)
#827 := (forall (vars (?v0 Int)) (:pat #826) #109)
#112 := (forall (vars (?v0 Int)) #109)
#830 := (iff #112 #827)
#828 := (iff #109 #109)
#829 := [refl]: #828
#831 := [quant-intro #829]: #830
#253 := (~ #112 #112)
#252 := (~ #109 #109)
#249 := [refl]: #252
#254 := [nnf-pos #249]: #253
#28 := (<= 0::Int #27)
#32 := (implies #28 #31)
#33 := (forall (vars (?v0 Int)) #32)
#115 := (iff #33 #112)
#96 := (not #28)
#97 := (or #96 #31)
#100 := (forall (vars (?v0 Int)) #97)
#113 := (iff #100 #112)
#110 := (iff #97 #109)
#107 := (iff #96 #106)
#103 := (iff #28 #105)
#104 := [rewrite]: #103
#108 := [monotonicity #104]: #107
#111 := [monotonicity #108]: #110
#114 := [quant-intro #111]: #113
#101 := (iff #33 #100)
#98 := (iff #32 #97)
#99 := [rewrite]: #98
#102 := [quant-intro #99]: #101
#116 := [trans #102 #114]: #115
#94 := [asserted]: #33
#117 := [mp #94 #116]: #112
#250 := [mp~ #117 #254]: #112
#832 := [mp #250 #831]: #827
#812 := (not #827)
#818 := (or #812 #470 #814)
#808 := (or #812 #815)
#473 := (iff #808 #818)
#809 := [rewrite]: #473
#468 := [quant-inst #14]: #808
#469 := [mp #468 #809]: #818
#538 := [unit-resolution #469 #832]: #815
#454 := [unit-resolution #538 #537]: #814
#422 := [symm #454]: #447
#446 := (= 0::Int #14)
#614 := (* -1::Int #14)
#615 := (+ #11 #614)
#616 := (>= #615 0::Int)
#613 := (= #11 #14)
#464 := [trans #463 #454]: #613
#465 := (not #613)
#466 := (or #465 #616)
#455 := [th-lemma arith triangle-eq]: #466
#467 := [unit-resolution #455 #464]: #616
#448 := (not #616)
#450 := (or #777 #470 #448)
#451 := [th-lemma arith assign-bounds 1 1]: #450
#449 := [unit-resolution #451 #537 #467]: #777
#598 := (<= #615 0::Int)
#452 := (or #465 #598)
#440 := [th-lemma arith triangle-eq]: #452
#442 := [unit-resolution #440 #464]: #598
#471 := (not #598)
#474 := (or #774 #471 #660 #470)
#714 := (mod #11 3::Int)
#563 := (* -1::Int #714)
#562 := (* -3::Int #620)
#566 := (+ #562 #563)
#567 := (+ #11 #566)
#560 := (= #567 0::Int)
#1 := true
#86 := [true-axiom]: true
#539 := (or false #560)
#532 := [th-lemma arith]: #539
#540 := [unit-resolution #532 #86]: #560
#565 := (>= #567 0::Int)
#479 := (not #565)
#568 := (>= #714 0::Int)
#525 := (or false #568)
#526 := [th-lemma arith]: #525
#527 := [unit-resolution #526 #86]: #568
#706 := (<= #14 0::Int)
#530 := (not #706)
#529 := [hypothesis]: #813
#528 := [hypothesis]: #666
#519 := (or #774 #530 #470)
#520 := [th-lemma arith triangle-eq]: #519
#521 := [unit-resolution #520 #528 #529]: #530
#513 := [hypothesis]: #598
#715 := (<= #622 0::Int)
#522 := [unit-resolution #593 #528]: #690
#523 := (or #784 #725)
#687 := (or #689 #784 #725)
#693 := [def-axiom]: #687
#514 := [unit-resolution #693 #591]: #523
#524 := [unit-resolution #514 #522]: #725
#505 := [hypothesis]: #777
#506 := (or #784 #752 #660)
#507 := [th-lemma arith triangle-eq]: #506
#499 := [unit-resolution #507 #522 #505]: #752
#707 := (or #754 #775)
#708 := [def-axiom]: #707
#508 := [unit-resolution #708 #499]: #754
#711 := (not #754)
#697 := (not #725)
#698 := (or #697 #711 #764)
#699 := [def-axiom]: #698
#509 := [unit-resolution #699 #508 #524]: #764
#696 := (not #764)
#500 := (or #696 #715)
#510 := [th-lemma arith triangle-eq]: #500
#477 := [unit-resolution #510 #509]: #715
#484 := (not #715)
#480 := (not #568)
#485 := (or #479 #480 #706 #471 #484)
#486 := [th-lemma arith assign-bounds 1 2 1 3]: #485
#487 := [unit-resolution #486 #477 #513 #521 #527]: #479
#488 := (not #560)
#478 := (or #488 #565)
#489 := [th-lemma arith triangle-eq]: #478
#472 := [unit-resolution #489 #487 #540]: false
#475 := [lemma #472]: #474
#443 := [unit-resolution #475 #442 #449 #537]: #774
#441 := [symm #443]: #446
#432 := [trans #441 #422]: #427
#435 := [trans #432 #426]: #434
#433 := [monotonicity #435]: #437
#425 := [symm #433]: #424
#438 := (= f10 #476)
#811 := (= #476 f10)
#22 := (:var 0 S3)
#23 := (f8 f9 #22)
#819 := (pattern #23)
#24 := (f3 f4 #23)
#25 := (= #24 #22)
#820 := (forall (vars (?v0 S3)) (:pat #819) #25)
#26 := (forall (vars (?v0 S3)) #25)
#823 := (iff #26 #820)
#821 := (iff #25 #25)
#822 := [refl]: #821
#824 := [quant-intro #822]: #823
#265 := (~ #26 #26)
#263 := (~ #25 #25)
#264 := [refl]: #263
#266 := [nnf-pos #264]: #265
#93 := [asserted]: #26
#251 := [mp~ #93 #266]: #26
#825 := [mp #251 #824]: #820
#600 := (not #820)
#807 := (or #600 #811)
#481 := [quant-inst #10]: #807
#535 := [unit-resolution #481 #825]: #811
#421 := [symm #535]: #438
#428 := [trans #421 #425]: #19
#429 := [unit-resolution #534 #428]: false
#430 := [lemma #429]: #19
#413 := [symm #430]: #416
#415 := (= #15 #18)
#798 := (f8 f9 #18)
#799 := (= #798 0::Int)
#412 := (or #812 #799)
#810 := (>= 0::Int 0::Int)
#453 := (not #810)
#800 := (or #453 #799)
#788 := (or #812 #800)
#511 := (iff #788 #412)
#786 := (iff #412 #412)
#790 := [rewrite]: #786
#517 := (iff #800 #799)
#806 := (or false #799)
#515 := (iff #806 #799)
#516 := [rewrite]: #515
#792 := (iff #800 #806)
#805 := (iff #453 false)
#439 := (not true)
#444 := (iff #439 false)
#445 := [rewrite]: #444
#802 := (iff #453 #439)
#795 := (iff #810 true)
#801 := [rewrite]: #795
#804 := [monotonicity #801]: #802
#803 := [trans #804 #445]: #805
#793 := [monotonicity #803]: #792
#518 := [trans #793 #516]: #517
#512 := [monotonicity #518]: #511
#787 := [trans #512 #790]: #511
#789 := [quant-inst #17]: #788
#791 := [mp #789 #787]: #412
#431 := [unit-resolution #791 #832]: #799
#414 := (= #11 #798)
#417 := [monotonicity #430]: #414
#418 := [trans #417 #431]: #784
#419 := [unit-resolution #593 #418]: #774
#420 := [monotonicity #419]: #415
#407 := [trans #420 #413]: #16
#483 := (or #89 #406)
#491 := (or #89 #406 #490)
#492 := [def-axiom]: #491
#494 := [unit-resolution #492 #95]: #483
#423 := [unit-resolution #494 #430]: #89
[unit-resolution #423 #407]: false
unsat
1d2ee8034acef6abcc30ff56f495f5a58955cc18 267 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#13 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#11 := (f5 #10 0::Int)
#12 := (f3 f4 #11)
#14 := (= #12 #13)
#502 := (= #11 0::Int)
#22 := (:var 0 Int)
#34 := (:var 1 Int)
#54 := (f6 f7 #34)
#55 := (f5 #54 #22)
#837 := (pattern #55)
#135 := -1::Int
#139 := (* -1::Int #22)
#136 := (* -1::Int #34)
#194 := (mod #136 #139)
#324 := (+ #55 #194)
#325 := (= #324 0::Int)
#56 := (mod #34 #22)
#321 := (* -1::Int #56)
#322 := (+ #55 #321)
#323 := (= #322 0::Int)
#161 := (<= #22 0::Int)
#168 := (>= #34 0::Int)
#268 := (or #168 #161)
#269 := (not #268)
#157 := (<= #34 0::Int)
#266 := (or #157 #161)
#267 := (not #266)
#272 := (or #267 #269)
#326 := (if #272 #323 #325)
#320 := (= #55 0::Int)
#37 := (= #34 0::Int)
#327 := (if #37 #320 #326)
#319 := (= #55 #34)
#38 := (= #22 0::Int)
#328 := (if #38 #319 #327)
#838 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #837) #328)
#331 := (forall (vars (?v0 Int) (?v1 Int)) #328)
#841 := (iff #331 #838)
#839 := (iff #328 #328)
#840 := [refl]: #839
#842 := [quant-intro #840]: #841
#200 := (* -1::Int #194)
#288 := (if #272 #56 #200)
#291 := (if #37 0::Int #288)
#294 := (if #38 #34 #291)
#297 := (= #55 #294)
#300 := (forall (vars (?v0 Int) (?v1 Int)) #297)
#332 := (iff #300 #331)
#329 := (iff #297 #328)
#330 := [rewrite]: #329
#333 := [quant-intro #330]: #332
#162 := (not #161)
#169 := (not #168)
#172 := (and #169 #162)
#158 := (not #157)
#165 := (and #158 #162)
#175 := (or #165 #172)
#220 := (if #175 #56 #200)
#223 := (if #37 0::Int #220)
#226 := (if #38 #34 #223)
#229 := (= #55 #226)
#232 := (forall (vars (?v0 Int) (?v1 Int)) #229)
#301 := (iff #232 #300)
#298 := (iff #229 #297)
#295 := (= #226 #294)
#292 := (= #223 #291)
#289 := (= #220 #288)
#273 := (iff #175 #272)
#270 := (iff #172 #269)
#271 := [rewrite]: #270
#251 := (iff #165 #267)
#252 := [rewrite]: #251
#274 := [monotonicity #252 #271]: #273
#290 := [monotonicity #274]: #289
#293 := [monotonicity #290]: #292
#296 := [monotonicity #293]: #295
#299 := [monotonicity #296]: #298
#302 := [quant-intro #299]: #301
#249 := (~ #232 #232)
#263 := (~ #229 #229)
#264 := [refl]: #263
#250 := [nnf-pos #264]: #249
#48 := (- #22)
#47 := (- #34)
#57 := (mod #47 #48)
#58 := (- #57)
#41 := (< 0::Int #22)
#43 := (< #34 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #34)
#42 := (and #40 #41)
#45 := (or #42 #44)
#59 := (if #45 #56 #58)
#60 := (if #37 0::Int #59)
#61 := (if #38 #34 #60)
#62 := (= #55 #61)
#63 := (forall (vars (?v0 Int) (?v1 Int)) #62)
#235 := (iff #63 #232)
#205 := (if #45 #56 #200)
#208 := (if #37 0::Int #205)
#211 := (if #38 #34 #208)
#214 := (= #55 #211)
#217 := (forall (vars (?v0 Int) (?v1 Int)) #214)
#233 := (iff #217 #232)
#230 := (iff #214 #229)
#227 := (= #211 #226)
#224 := (= #208 #223)
#221 := (= #205 #220)
#176 := (iff #45 #175)
#173 := (iff #44 #172)
#163 := (iff #41 #162)
#164 := [rewrite]: #163
#170 := (iff #43 #169)
#171 := [rewrite]: #170
#174 := [monotonicity #171 #164]: #173
#166 := (iff #42 #165)
#159 := (iff #40 #158)
#160 := [rewrite]: #159
#167 := [monotonicity #160 #164]: #166
#177 := [monotonicity #167 #174]: #176
#222 := [monotonicity #177]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [quant-intro #231]: #233
#218 := (iff #63 #217)
#215 := (iff #62 #214)
#212 := (= #61 #211)
#209 := (= #60 #208)
#206 := (= #59 #205)
#203 := (= #58 #200)
#197 := (- #194)
#201 := (= #197 #200)
#202 := [rewrite]: #201
#198 := (= #58 #197)
#195 := (= #57 #194)
#140 := (= #48 #139)
#141 := [rewrite]: #140
#137 := (= #47 #136)
#138 := [rewrite]: #137
#196 := [monotonicity #138 #141]: #195
#199 := [monotonicity #196]: #198
#204 := [trans #199 #202]: #203
#207 := [monotonicity #204]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [monotonicity #213]: #215
#219 := [quant-intro #216]: #218
#236 := [trans #219 #234]: #235
#193 := [asserted]: #63
#237 := [mp #193 #236]: #232
#265 := [mp~ #237 #250]: #232
#303 := [mp #265 #302]: #300
#334 := [mp #303 #333]: #331
#843 := [mp #334 #842]: #838
#738 := (not #838)
#727 := (or #738 #502)
#774 := (* -1::Int 0::Int)
#489 := (mod #774 #774)
#771 := (+ #11 #489)
#775 := (= #771 0::Int)
#493 := (mod 0::Int 0::Int)
#494 := (* -1::Int #493)
#495 := (+ #11 #494)
#773 := (= #495 0::Int)
#503 := (<= 0::Int 0::Int)
#591 := (>= 0::Int 0::Int)
#778 := (or #591 #503)
#782 := (not #778)
#777 := (or #503 #503)
#781 := (not #777)
#492 := (or #781 #782)
#772 := (if #492 #773 #775)
#780 := (= 0::Int 0::Int)
#776 := (if #780 #502 #772)
#765 := (if #780 #502 #776)
#728 := (or #738 #765)
#730 := (iff #728 #727)
#731 := (iff #727 #727)
#715 := [rewrite]: #731
#737 := (iff #765 #502)
#1 := true
#726 := (if true #502 #502)
#735 := (iff #726 #502)
#736 := [rewrite]: #735
#723 := (iff #765 #726)
#732 := (iff #776 #502)
#742 := (+ #11 #493)
#740 := (= #742 0::Int)
#650 := (if true #502 #740)
#741 := (iff #650 #502)
#745 := [rewrite]: #741
#651 := (iff #776 #650)
#648 := (iff #772 #740)
#643 := (if false #773 #740)
#639 := (iff #643 #740)
#647 := [rewrite]: #639
#645 := (iff #772 #643)
#743 := (iff #775 #740)
#644 := (= #771 #742)
#635 := (= #489 #493)
#633 := (= #774 0::Int)
#634 := [rewrite]: #633
#594 := [monotonicity #634 #634]: #635
#739 := [monotonicity #594]: #644
#628 := [monotonicity #739]: #743
#748 := (iff #492 false)
#593 := (or false false)
#749 := (iff #593 false)
#750 := [rewrite]: #749
#746 := (iff #492 #593)
#590 := (iff #782 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#754 := (iff #782 #460)
#759 := (iff #778 true)
#768 := (or true true)
#770 := (iff #768 true)
#611 := [rewrite]: #770
#752 := (iff #778 #768)
#762 := (iff #503 true)
#763 := [rewrite]: #762
#464 := (iff #591 true)
#800 := [rewrite]: #464
#753 := [monotonicity #800 #763]: #752
#760 := [trans #753 #611]: #759
#761 := [monotonicity #760]: #754
#592 := [trans #761 #448]: #590
#757 := (iff #781 false)
#755 := (iff #781 #460)
#612 := (iff #777 true)
#769 := (iff #777 #768)
#764 := [monotonicity #763 #763]: #769
#613 := [trans #764 #611]: #612
#756 := [monotonicity #613]: #755
#758 := [trans #756 #448]: #757
#747 := [monotonicity #758 #592]: #746
#751 := [trans #747 #750]: #748
#646 := [monotonicity #751 #628]: #645
#649 := [trans #646 #647]: #648
#766 := (iff #780 true)
#767 := [rewrite]: #766
#744 := [monotonicity #767 #649]: #651
#734 := [trans #744 #745]: #732
#725 := [monotonicity #767 #734]: #723
#733 := [trans #725 #736]: #737
#724 := [monotonicity #733]: #730
#716 := [trans #724 #715]: #730
#729 := [quant-inst #9 #9]: #728
#718 := [mp #729 #716]: #727
#720 := [unit-resolution #718 #843]: #502
#721 := [monotonicity #720]: #14
#15 := (not #14)
#83 := [asserted]: #15
[unit-resolution #83 #721]: false
unsat
3423d3f62be3468a179235b7bd3ba97bcbe5bc80 300 0
#2 := false
decl f10 :: S3
#10 := f10
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 Int Int)
#13 := 0::Int
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 0::Int)
decl f4 :: S2
#7 := f4
#15 := (f3 f4 #14)
#16 := (= #15 f10)
#398 := (f3 f4 #11)
#482 := (= #398 f10)
#18 := (:var 0 S3)
#19 := (f8 f9 #18)
#811 := (pattern #19)
#20 := (f3 f4 #19)
#21 := (= #20 #18)
#812 := (forall (vars (?v0 S3)) (:pat #811) #21)
#22 := (forall (vars (?v0 S3)) #21)
#815 := (iff #22 #812)
#813 := (iff #21 #21)
#814 := [refl]: #813
#816 := [quant-intro #814]: #815
#256 := (~ #22 #22)
#254 := (~ #21 #21)
#255 := [refl]: #254
#257 := [nnf-pos #255]: #256
#85 := [asserted]: #22
#242 := [mp~ #85 #257]: #22
#817 := [mp #242 #816]: #812
#475 := (not #812)
#486 := (or #475 #482)
#487 := [quant-inst #10]: #486
#650 := [unit-resolution #487 #817]: #482
#652 := (= #15 #398)
#808 := (= #14 #11)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f6 f7 #35)
#56 := (f5 #55 #23)
#838 := (pattern #56)
#136 := -1::Int
#140 := (* -1::Int #23)
#137 := (* -1::Int #35)
#195 := (mod #137 #140)
#325 := (+ #56 #195)
#326 := (= #325 0::Int)
#57 := (mod #35 #23)
#322 := (* -1::Int #57)
#323 := (+ #56 #322)
#324 := (= #323 0::Int)
#162 := (<= #23 0::Int)
#169 := (>= #35 0::Int)
#269 := (or #169 #162)
#270 := (not #269)
#158 := (<= #35 0::Int)
#267 := (or #158 #162)
#268 := (not #267)
#273 := (or #268 #270)
#327 := (if #273 #324 #326)
#321 := (= #56 0::Int)
#38 := (= #35 0::Int)
#328 := (if #38 #321 #327)
#320 := (= #56 #35)
#39 := (= #23 0::Int)
#329 := (if #39 #320 #328)
#839 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #838) #329)
#332 := (forall (vars (?v0 Int) (?v1 Int)) #329)
#842 := (iff #332 #839)
#840 := (iff #329 #329)
#841 := [refl]: #840
#843 := [quant-intro #841]: #842
#201 := (* -1::Int #195)
#289 := (if #273 #57 #201)
#292 := (if #38 0::Int #289)
#295 := (if #39 #35 #292)
#298 := (= #56 #295)
#301 := (forall (vars (?v0 Int) (?v1 Int)) #298)
#333 := (iff #301 #332)
#330 := (iff #298 #329)
#331 := [rewrite]: #330
#334 := [quant-intro #331]: #333
#163 := (not #162)
#170 := (not #169)
#173 := (and #170 #163)
#159 := (not #158)
#166 := (and #159 #163)
#176 := (or #166 #173)
#221 := (if #176 #57 #201)
#224 := (if #38 0::Int #221)
#227 := (if #39 #35 #224)
#230 := (= #56 #227)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#302 := (iff #233 #301)
#299 := (iff #230 #298)
#296 := (= #227 #295)
#293 := (= #224 #292)
#290 := (= #221 #289)
#274 := (iff #176 #273)
#271 := (iff #173 #270)
#272 := [rewrite]: #271
#252 := (iff #166 #268)
#253 := [rewrite]: #252
#275 := [monotonicity #253 #272]: #274
#291 := [monotonicity #275]: #290
#294 := [monotonicity #291]: #293
#297 := [monotonicity #294]: #296
#300 := [monotonicity #297]: #299
#303 := [quant-intro #300]: #302
#250 := (~ #233 #233)
#264 := (~ #230 #230)
#265 := [refl]: #264
#251 := [nnf-pos #265]: #250
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#236 := (iff #64 #233)
#206 := (if #46 #57 #201)
#209 := (if #38 0::Int #206)
#212 := (if #39 #35 #209)
#215 := (= #56 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#234 := (iff #218 #233)
#231 := (iff #215 #230)
#228 := (= #212 #227)
#225 := (= #209 #224)
#222 := (= #206 #221)
#177 := (iff #46 #176)
#174 := (iff #45 #173)
#164 := (iff #42 #163)
#165 := [rewrite]: #164
#171 := (iff #44 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172 #165]: #174
#167 := (iff #43 #166)
#160 := (iff #41 #159)
#161 := [rewrite]: #160
#168 := [monotonicity #161 #165]: #167
#178 := [monotonicity #168 #175]: #177
#223 := [monotonicity #178]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#219 := (iff #64 #218)
#216 := (iff #63 #215)
#213 := (= #62 #212)
#210 := (= #61 #209)
#207 := (= #60 #206)
#204 := (= #59 #201)
#198 := (- #195)
#202 := (= #198 #201)
#203 := [rewrite]: #202
#199 := (= #59 #198)
#196 := (= #58 #195)
#141 := (= #49 #140)
#142 := [rewrite]: #141
#138 := (= #48 #137)
#139 := [rewrite]: #138
#197 := [monotonicity #139 #142]: #196
#200 := [monotonicity #197]: #199
#205 := [trans #200 #203]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#237 := [trans #220 #235]: #236
#194 := [asserted]: #64
#238 := [mp #194 #237]: #233
#266 := [mp~ #238 #251]: #233
#304 := [mp #266 #303]: #301
#335 := [mp #304 #334]: #332
#844 := [mp #335 #843]: #839
#740 := (not #839)
#741 := (or #740 #808)
#431 := (* -1::Int 0::Int)
#793 := (* -1::Int #11)
#794 := (mod #793 #431)
#796 := (+ #14 #794)
#436 := (= #796 0::Int)
#790 := (mod #11 0::Int)
#791 := (* -1::Int #790)
#792 := (+ #14 #791)
#787 := (= #792 0::Int)
#786 := (<= 0::Int 0::Int)
#451 := (>= #11 0::Int)
#452 := (or #451 #786)
#788 := (not #452)
#445 := (<= #11 0::Int)
#449 := (or #445 #786)
#450 := (not #449)
#789 := (or #450 #788)
#437 := (if #789 #787 #436)
#802 := (= #14 0::Int)
#461 := (= #11 0::Int)
#797 := (if #461 #802 #437)
#807 := (= 0::Int 0::Int)
#795 := (if #807 #808 #797)
#744 := (or #740 #795)
#644 := (iff #744 #741)
#647 := (iff #741 #741)
#640 := [rewrite]: #647
#743 := (iff #795 #808)
#614 := (mod #793 0::Int)
#758 := (+ #14 #614)
#754 := (= #758 0::Int)
#750 := (if #461 #802 #754)
#1 := true
#752 := (if true #808 #750)
#636 := (iff #752 #808)
#595 := [rewrite]: #636
#634 := (iff #795 #752)
#751 := (iff #797 #750)
#747 := (iff #437 #754)
#755 := (if false #787 #754)
#593 := (iff #755 #754)
#594 := [rewrite]: #593
#762 := (iff #437 #755)
#760 := (iff #436 #754)
#759 := (= #796 #758)
#756 := (= #794 #614)
#612 := (= #431 0::Int)
#613 := [rewrite]: #612
#757 := [monotonicity #613]: #756
#753 := [monotonicity #757]: #759
#761 := [monotonicity #753]: #760
#765 := (iff #789 false)
#768 := (or false false)
#769 := (iff #768 false)
#770 := [rewrite]: #769
#763 := (iff #789 #768)
#766 := (iff #788 false)
#504 := (not true)
#779 := (iff #504 false)
#783 := [rewrite]: #779
#773 := (iff #788 #504)
#772 := (iff #452 true)
#495 := (or #451 true)
#775 := (iff #495 true)
#490 := [rewrite]: #775
#496 := (iff #452 #495)
#785 := (iff #786 true)
#507 := [rewrite]: #785
#774 := [monotonicity #507]: #496
#776 := [trans #774 #490]: #772
#777 := [monotonicity #776]: #773
#767 := [trans #777 #783]: #766
#493 := (iff #450 false)
#778 := (iff #450 #504)
#781 := (iff #449 true)
#508 := (or #445 true)
#404 := (iff #508 true)
#780 := [rewrite]: #404
#509 := (iff #449 #508)
#510 := [monotonicity #507]: #509
#503 := [trans #510 #780]: #781
#782 := [monotonicity #503]: #778
#494 := [trans #782 #783]: #493
#764 := [monotonicity #494 #767]: #763
#771 := [trans #764 #770]: #765
#591 := [monotonicity #771 #761]: #762
#748 := [trans #591 #594]: #747
#749 := [monotonicity #748]: #751
#798 := (iff #807 true)
#784 := [rewrite]: #798
#635 := [monotonicity #784 #749]: #634
#645 := [trans #635 #595]: #743
#646 := [monotonicity #645]: #644
#648 := [trans #646 #640]: #644
#629 := [quant-inst #11 #13]: #744
#649 := [mp #629 #648]: #741
#651 := [unit-resolution #649 #844]: #808
#745 := [monotonicity #651]: #652
#742 := [trans #745 #650]: #16
#17 := (not #16)
#84 := [asserted]: #17
[unit-resolution #84 #742]: false
unsat
c3011ba0f8d5cd7434b90805d32c60ec6054ba7f 294 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#12 := (f5 #10 1::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#502 := (= #12 0::Int)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f6 f7 #35)
#56 := (f5 #55 #23)
#837 := (pattern #56)
#136 := -1::Int
#140 := (* -1::Int #23)
#137 := (* -1::Int #35)
#195 := (mod #137 #140)
#325 := (+ #56 #195)
#326 := (= #325 0::Int)
#57 := (mod #35 #23)
#322 := (* -1::Int #57)
#323 := (+ #56 #322)
#324 := (= #323 0::Int)
#162 := (<= #23 0::Int)
#169 := (>= #35 0::Int)
#269 := (or #169 #162)
#270 := (not #269)
#158 := (<= #35 0::Int)
#267 := (or #158 #162)
#268 := (not #267)
#273 := (or #268 #270)
#327 := (if #273 #324 #326)
#321 := (= #56 0::Int)
#38 := (= #35 0::Int)
#328 := (if #38 #321 #327)
#320 := (= #56 #35)
#39 := (= #23 0::Int)
#329 := (if #39 #320 #328)
#838 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #837) #329)
#332 := (forall (vars (?v0 Int) (?v1 Int)) #329)
#841 := (iff #332 #838)
#839 := (iff #329 #329)
#840 := [refl]: #839
#842 := [quant-intro #840]: #841
#201 := (* -1::Int #195)
#289 := (if #273 #57 #201)
#292 := (if #38 0::Int #289)
#295 := (if #39 #35 #292)
#298 := (= #56 #295)
#301 := (forall (vars (?v0 Int) (?v1 Int)) #298)
#333 := (iff #301 #332)
#330 := (iff #298 #329)
#331 := [rewrite]: #330
#334 := [quant-intro #331]: #333
#163 := (not #162)
#170 := (not #169)
#173 := (and #170 #163)
#159 := (not #158)
#166 := (and #159 #163)
#176 := (or #166 #173)
#221 := (if #176 #57 #201)
#224 := (if #38 0::Int #221)
#227 := (if #39 #35 #224)
#230 := (= #56 #227)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#302 := (iff #233 #301)
#299 := (iff #230 #298)
#296 := (= #227 #295)
#293 := (= #224 #292)
#290 := (= #221 #289)
#274 := (iff #176 #273)
#271 := (iff #173 #270)
#272 := [rewrite]: #271
#252 := (iff #166 #268)
#253 := [rewrite]: #252
#275 := [monotonicity #253 #272]: #274
#291 := [monotonicity #275]: #290
#294 := [monotonicity #291]: #293
#297 := [monotonicity #294]: #296
#300 := [monotonicity #297]: #299
#303 := [quant-intro #300]: #302
#250 := (~ #233 #233)
#264 := (~ #230 #230)
#265 := [refl]: #264
#251 := [nnf-pos #265]: #250
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#236 := (iff #64 #233)
#206 := (if #46 #57 #201)
#209 := (if #38 0::Int #206)
#212 := (if #39 #35 #209)
#215 := (= #56 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#234 := (iff #218 #233)
#231 := (iff #215 #230)
#228 := (= #212 #227)
#225 := (= #209 #224)
#222 := (= #206 #221)
#177 := (iff #46 #176)
#174 := (iff #45 #173)
#164 := (iff #42 #163)
#165 := [rewrite]: #164
#171 := (iff #44 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172 #165]: #174
#167 := (iff #43 #166)
#160 := (iff #41 #159)
#161 := [rewrite]: #160
#168 := [monotonicity #161 #165]: #167
#178 := [monotonicity #168 #175]: #177
#223 := [monotonicity #178]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#219 := (iff #64 #218)
#216 := (iff #63 #215)
#213 := (= #62 #212)
#210 := (= #61 #209)
#207 := (= #60 #206)
#204 := (= #59 #201)
#198 := (- #195)
#202 := (= #198 #201)
#203 := [rewrite]: #202
#199 := (= #59 #198)
#196 := (= #58 #195)
#141 := (= #49 #140)
#142 := [rewrite]: #141
#138 := (= #48 #137)
#139 := [rewrite]: #138
#197 := [monotonicity #139 #142]: #196
#200 := [monotonicity #197]: #199
#205 := [trans #200 #203]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#237 := [trans #220 #235]: #236
#194 := [asserted]: #64
#238 := [mp #194 #237]: #233
#266 := [mp~ #238 #251]: #233
#304 := [mp #266 #303]: #301
#335 := [mp #304 #334]: #332
#843 := [mp #335 #842]: #838
#699 := (not #838)
#700 := (or #699 #502)
#775 := (* -1::Int 1::Int)
#771 := (* -1::Int 0::Int)
#772 := (mod #771 #775)
#776 := (+ #12 #772)
#765 := (= #776 0::Int)
#495 := (mod 0::Int 1::Int)
#773 := (* -1::Int #495)
#774 := (+ #12 #773)
#489 := (= #774 0::Int)
#781 := (<= 1::Int 0::Int)
#591 := (>= 0::Int 0::Int)
#492 := (or #591 #781)
#493 := (not #492)
#777 := (<= 0::Int 0::Int)
#778 := (or #777 #781)
#782 := (not #778)
#494 := (or #782 #493)
#766 := (if #494 #489 #765)
#503 := (= 0::Int 0::Int)
#767 := (if #503 #502 #766)
#780 := (= 1::Int 0::Int)
#762 := (if #780 #502 #767)
#701 := (or #699 #762)
#703 := (iff #701 #700)
#705 := (iff #700 #700)
#706 := [rewrite]: #705
#697 := (iff #762 #502)
#716 := (if false #502 #502)
#720 := (iff #716 #502)
#721 := [rewrite]: #720
#694 := (iff #762 #716)
#710 := (iff #767 #502)
#1 := true
#708 := (if true #502 #502)
#712 := (iff #708 #502)
#713 := [rewrite]: #712
#709 := (iff #767 #708)
#717 := (iff #766 #502)
#718 := (iff #766 #716)
#731 := (iff #765 #502)
#730 := (= #776 #12)
#648 := (+ #12 0::Int)
#651 := (= #648 #12)
#744 := [rewrite]: #651
#728 := (= #776 #648)
#738 := (= #772 0::Int)
#725 := (mod 0::Int -1::Int)
#737 := (= #725 0::Int)
#733 := [rewrite]: #737
#735 := (= #772 #725)
#726 := (= #775 -1::Int)
#723 := [rewrite]: #726
#645 := (= #771 0::Int)
#646 := [rewrite]: #645
#736 := [monotonicity #646 #723]: #735
#727 := [trans #736 #733]: #738
#729 := [monotonicity #727]: #728
#724 := [trans #729 #744]: #730
#715 := [monotonicity #724]: #731
#732 := (iff #489 #502)
#741 := (= #774 #12)
#649 := (= #774 #648)
#639 := (= #773 0::Int)
#628 := (= #773 #771)
#740 := (= #495 0::Int)
#743 := [rewrite]: #740
#643 := [monotonicity #743]: #628
#647 := [trans #643 #646]: #639
#650 := [monotonicity #647]: #649
#745 := [trans #650 #744]: #741
#734 := [monotonicity #745]: #732
#644 := (iff #494 false)
#633 := (or false false)
#594 := (iff #633 false)
#742 := [rewrite]: #594
#634 := (iff #494 #633)
#748 := (iff #493 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#749 := (iff #493 #460)
#746 := (iff #492 true)
#755 := (or true false)
#758 := (iff #755 true)
#752 := [rewrite]: #758
#592 := (iff #492 #755)
#612 := (iff #781 false)
#613 := [rewrite]: #612
#464 := (iff #591 true)
#800 := [rewrite]: #464
#593 := [monotonicity #800 #613]: #592
#747 := [trans #593 #752]: #746
#750 := [monotonicity #747]: #749
#751 := [trans #750 #448]: #748
#761 := (iff #782 false)
#760 := (iff #782 #460)
#753 := (iff #778 true)
#756 := (iff #778 #755)
#770 := (iff #777 true)
#611 := [rewrite]: #770
#757 := [monotonicity #611 #613]: #756
#759 := [trans #757 #752]: #753
#754 := [monotonicity #759]: #760
#590 := [trans #754 #448]: #761
#635 := [monotonicity #590 #751]: #634
#739 := [trans #635 #742]: #644
#719 := [monotonicity #739 #734 #715]: #718
#722 := [trans #719 #721]: #717
#769 := (iff #503 true)
#764 := [rewrite]: #769
#711 := [monotonicity #764 #722]: #709
#714 := [trans #711 #713]: #710
#763 := (iff #780 false)
#768 := [rewrite]: #763
#695 := [monotonicity #768 #714]: #694
#698 := [trans #695 #721]: #697
#704 := [monotonicity #698]: #703
#696 := [trans #704 #706]: #703
#702 := [quant-inst #9 #11]: #701
#707 := [mp #702 #696]: #700
#686 := [unit-resolution #707 #843]: #502
#688 := [monotonicity #686]: #15
#16 := (not #15)
#84 := [asserted]: #16
[unit-resolution #84 #688]: false
unsat
87b099d8145ebeef9dc0d37605a12e1099e37589 295 0
#2 := false
decl f3 :: (-> S2 Int S3)
#13 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#9 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 1::Int)
#11 := (f5 #10 1::Int)
#12 := (f3 f4 #11)
#15 := (= #12 #14)
#503 := (= #11 0::Int)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f6 f7 #35)
#56 := (f5 #55 #23)
#837 := (pattern #56)
#136 := -1::Int
#140 := (* -1::Int #23)
#137 := (* -1::Int #35)
#195 := (mod #137 #140)
#325 := (+ #56 #195)
#326 := (= #325 0::Int)
#57 := (mod #35 #23)
#322 := (* -1::Int #57)
#323 := (+ #56 #322)
#324 := (= #323 0::Int)
#162 := (<= #23 0::Int)
#169 := (>= #35 0::Int)
#269 := (or #169 #162)
#270 := (not #269)
#158 := (<= #35 0::Int)
#267 := (or #158 #162)
#268 := (not #267)
#273 := (or #268 #270)
#327 := (if #273 #324 #326)
#321 := (= #56 0::Int)
#38 := (= #35 0::Int)
#328 := (if #38 #321 #327)
#320 := (= #56 #35)
#39 := (= #23 0::Int)
#329 := (if #39 #320 #328)
#838 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #837) #329)
#332 := (forall (vars (?v0 Int) (?v1 Int)) #329)
#841 := (iff #332 #838)
#839 := (iff #329 #329)
#840 := [refl]: #839
#842 := [quant-intro #840]: #841
#201 := (* -1::Int #195)
#289 := (if #273 #57 #201)
#292 := (if #38 0::Int #289)
#295 := (if #39 #35 #292)
#298 := (= #56 #295)
#301 := (forall (vars (?v0 Int) (?v1 Int)) #298)
#333 := (iff #301 #332)
#330 := (iff #298 #329)
#331 := [rewrite]: #330
#334 := [quant-intro #331]: #333
#163 := (not #162)
#170 := (not #169)
#173 := (and #170 #163)
#159 := (not #158)
#166 := (and #159 #163)
#176 := (or #166 #173)
#221 := (if #176 #57 #201)
#224 := (if #38 0::Int #221)
#227 := (if #39 #35 #224)
#230 := (= #56 #227)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#302 := (iff #233 #301)
#299 := (iff #230 #298)
#296 := (= #227 #295)
#293 := (= #224 #292)
#290 := (= #221 #289)
#274 := (iff #176 #273)
#271 := (iff #173 #270)
#272 := [rewrite]: #271
#252 := (iff #166 #268)
#253 := [rewrite]: #252
#275 := [monotonicity #253 #272]: #274
#291 := [monotonicity #275]: #290
#294 := [monotonicity #291]: #293
#297 := [monotonicity #294]: #296
#300 := [monotonicity #297]: #299
#303 := [quant-intro #300]: #302
#250 := (~ #233 #233)
#264 := (~ #230 #230)
#265 := [refl]: #264
#251 := [nnf-pos #265]: #250
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#236 := (iff #64 #233)
#206 := (if #46 #57 #201)
#209 := (if #38 0::Int #206)
#212 := (if #39 #35 #209)
#215 := (= #56 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#234 := (iff #218 #233)
#231 := (iff #215 #230)
#228 := (= #212 #227)
#225 := (= #209 #224)
#222 := (= #206 #221)
#177 := (iff #46 #176)
#174 := (iff #45 #173)
#164 := (iff #42 #163)
#165 := [rewrite]: #164
#171 := (iff #44 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172 #165]: #174
#167 := (iff #43 #166)
#160 := (iff #41 #159)
#161 := [rewrite]: #160
#168 := [monotonicity #161 #165]: #167
#178 := [monotonicity #168 #175]: #177
#223 := [monotonicity #178]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#219 := (iff #64 #218)
#216 := (iff #63 #215)
#213 := (= #62 #212)
#210 := (= #61 #209)
#207 := (= #60 #206)
#204 := (= #59 #201)
#198 := (- #195)
#202 := (= #198 #201)
#203 := [rewrite]: #202
#199 := (= #59 #198)
#196 := (= #58 #195)
#141 := (= #49 #140)
#142 := [rewrite]: #141
#138 := (= #48 #137)
#139 := [rewrite]: #138
#197 := [monotonicity #139 #142]: #196
#200 := [monotonicity #197]: #199
#205 := [trans #200 #203]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#237 := [trans #220 #235]: #236
#194 := [asserted]: #64
#238 := [mp #194 #237]: #233
#266 := [mp~ #238 #251]: #233
#304 := [mp #266 #303]: #301
#335 := [mp #304 #334]: #332
#843 := [mp #335 #842]: #838
#703 := (not #838)
#704 := (or #703 #503)
#771 := (* -1::Int 1::Int)
#775 := (mod #771 #771)
#772 := (+ #11 #775)
#776 := (= #772 0::Int)
#495 := (mod 1::Int 1::Int)
#773 := (* -1::Int #495)
#774 := (+ #11 #773)
#489 := (= #774 0::Int)
#777 := (<= 1::Int 0::Int)
#782 := (>= 1::Int 0::Int)
#492 := (or #782 #777)
#493 := (not #492)
#781 := (or #777 #777)
#778 := (not #781)
#494 := (or #778 #493)
#765 := (if #494 #489 #776)
#780 := (= 1::Int 0::Int)
#766 := (if #780 #503 #765)
#502 := (= #11 1::Int)
#767 := (if #780 #502 #766)
#705 := (or #703 #767)
#696 := (iff #705 #704)
#685 := (iff #704 #704)
#686 := [rewrite]: #685
#701 := (iff #767 #503)
#695 := (if false #502 #503)
#699 := (iff #695 #503)
#700 := [rewrite]: #699
#697 := (iff #767 #695)
#714 := (iff #766 #503)
#709 := (if false #503 #503)
#713 := (iff #709 #503)
#710 := [rewrite]: #713
#711 := (iff #766 #709)
#722 := (iff #765 #503)
#1 := true
#718 := (if true #503 #503)
#721 := (iff #718 #503)
#717 := [rewrite]: #721
#719 := (iff #765 #718)
#715 := (iff #776 #503)
#724 := (= #772 #11)
#649 := (+ #11 0::Int)
#744 := (= #649 #11)
#741 := [rewrite]: #744
#729 := (= #772 #649)
#727 := (= #775 0::Int)
#735 := (mod -1::Int -1::Int)
#733 := (= #735 0::Int)
#738 := [rewrite]: #733
#736 := (= #775 #735)
#723 := (= #771 -1::Int)
#725 := [rewrite]: #723
#737 := [monotonicity #725 #725]: #736
#728 := [trans #737 #738]: #727
#730 := [monotonicity #728]: #729
#731 := [trans #730 #741]: #724
#716 := [monotonicity #731]: #715
#734 := (iff #489 #503)
#745 := (= #774 #11)
#650 := (= #774 #649)
#647 := (= #773 0::Int)
#628 := (* -1::Int 0::Int)
#646 := (= #628 0::Int)
#639 := [rewrite]: #646
#643 := (= #773 #628)
#740 := (= #495 0::Int)
#743 := [rewrite]: #740
#645 := [monotonicity #743]: #643
#648 := [trans #645 #639]: #647
#651 := [monotonicity #648]: #650
#732 := [trans #651 #741]: #745
#726 := [monotonicity #732]: #734
#644 := (iff #494 true)
#592 := (or true false)
#747 := (iff #592 true)
#749 := [rewrite]: #747
#594 := (iff #494 #592)
#634 := (iff #493 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#751 := (iff #493 #460)
#750 := (iff #492 true)
#593 := (iff #492 #592)
#768 := (iff #777 false)
#769 := [rewrite]: #768
#761 := (iff #782 true)
#590 := [rewrite]: #761
#746 := [monotonicity #590 #769]: #593
#748 := [trans #746 #749]: #750
#633 := [monotonicity #748]: #751
#635 := [trans #633 #448]: #634
#760 := (iff #778 true)
#757 := (not false)
#753 := (iff #757 true)
#759 := [rewrite]: #753
#758 := (iff #778 #757)
#755 := (iff #781 false)
#764 := (or false false)
#612 := (iff #764 false)
#613 := [rewrite]: #612
#770 := (iff #781 #764)
#611 := [monotonicity #769 #769]: #770
#756 := [trans #611 #613]: #755
#752 := [monotonicity #756]: #758
#754 := [trans #752 #759]: #760
#742 := [monotonicity #754 #635]: #594
#739 := [trans #742 #749]: #644
#720 := [monotonicity #739 #726 #716]: #719
#708 := [trans #720 #717]: #722
#762 := (iff #780 false)
#763 := [rewrite]: #762
#712 := [monotonicity #763 #708]: #711
#694 := [trans #712 #710]: #714
#698 := [monotonicity #763 #694]: #697
#702 := [trans #698 #700]: #701
#707 := [monotonicity #702]: #696
#688 := [trans #707 #686]: #696
#706 := [quant-inst #9 #9]: #705
#689 := [mp #706 #688]: #704
#691 := [unit-resolution #689 #843]: #503
#692 := [monotonicity #691]: #15
#16 := (not #15)
#84 := [asserted]: #16
[unit-resolution #84 #692]: false
unsat
a614d34cd521f11124f03ffe353f27df43731180 306 0
#2 := false
decl f3 :: (-> S2 Int S3)
#14 := 0::Int
decl f4 :: S2
#7 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 1::Int
decl f6 :: (-> S5 Int S4)
#9 := 3::Int
decl f7 :: S5
#8 := f7
#10 := (f6 f7 3::Int)
#12 := (f5 #10 1::Int)
#13 := (f3 f4 #12)
#16 := (= #13 #15)
#777 := (= #12 0::Int)
#24 := (:var 0 Int)
#36 := (:var 1 Int)
#56 := (f6 f7 #36)
#57 := (f5 #56 #24)
#837 := (pattern #57)
#137 := -1::Int
#141 := (* -1::Int #24)
#138 := (* -1::Int #36)
#196 := (mod #138 #141)
#326 := (+ #57 #196)
#327 := (= #326 0::Int)
#58 := (mod #36 #24)
#323 := (* -1::Int #58)
#324 := (+ #57 #323)
#325 := (= #324 0::Int)
#163 := (<= #24 0::Int)
#170 := (>= #36 0::Int)
#270 := (or #170 #163)
#271 := (not #270)
#159 := (<= #36 0::Int)
#268 := (or #159 #163)
#269 := (not #268)
#274 := (or #269 #271)
#328 := (if #274 #325 #327)
#322 := (= #57 0::Int)
#39 := (= #36 0::Int)
#329 := (if #39 #322 #328)
#321 := (= #57 #36)
#40 := (= #24 0::Int)
#330 := (if #40 #321 #329)
#838 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #837) #330)
#333 := (forall (vars (?v0 Int) (?v1 Int)) #330)
#841 := (iff #333 #838)
#839 := (iff #330 #330)
#840 := [refl]: #839
#842 := [quant-intro #840]: #841
#202 := (* -1::Int #196)
#290 := (if #274 #58 #202)
#293 := (if #39 0::Int #290)
#296 := (if #40 #36 #293)
#299 := (= #57 #296)
#302 := (forall (vars (?v0 Int) (?v1 Int)) #299)
#334 := (iff #302 #333)
#331 := (iff #299 #330)
#332 := [rewrite]: #331
#335 := [quant-intro #332]: #334
#164 := (not #163)
#171 := (not #170)
#174 := (and #171 #164)
#160 := (not #159)
#167 := (and #160 #164)
#177 := (or #167 #174)
#222 := (if #177 #58 #202)
#225 := (if #39 0::Int #222)
#228 := (if #40 #36 #225)
#231 := (= #57 #228)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#303 := (iff #234 #302)
#300 := (iff #231 #299)
#297 := (= #228 #296)
#294 := (= #225 #293)
#291 := (= #222 #290)
#275 := (iff #177 #274)
#272 := (iff #174 #271)
#273 := [rewrite]: #272
#253 := (iff #167 #269)
#254 := [rewrite]: #253
#276 := [monotonicity #254 #273]: #275
#292 := [monotonicity #276]: #291
#295 := [monotonicity #292]: #294
#298 := [monotonicity #295]: #297
#301 := [monotonicity #298]: #300
#304 := [quant-intro #301]: #303
#251 := (~ #234 #234)
#265 := (~ #231 #231)
#266 := [refl]: #265
#252 := [nnf-pos #266]: #251
#50 := (- #24)
#49 := (- #36)
#59 := (mod #49 #50)
#60 := (- #59)
#43 := (< 0::Int #24)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#61 := (if #47 #58 #60)
#62 := (if #39 0::Int #61)
#63 := (if #40 #36 #62)
#64 := (= #57 #63)
#65 := (forall (vars (?v0 Int) (?v1 Int)) #64)
#237 := (iff #65 #234)
#207 := (if #47 #58 #202)
#210 := (if #39 0::Int #207)
#213 := (if #40 #36 #210)
#216 := (= #57 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#235 := (iff #219 #234)
#232 := (iff #216 #231)
#229 := (= #213 #228)
#226 := (= #210 #225)
#223 := (= #207 #222)
#178 := (iff #47 #177)
#175 := (iff #46 #174)
#165 := (iff #43 #164)
#166 := [rewrite]: #165
#172 := (iff #45 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173 #166]: #175
#168 := (iff #44 #167)
#161 := (iff #42 #160)
#162 := [rewrite]: #161
#169 := [monotonicity #162 #166]: #168
#179 := [monotonicity #169 #176]: #178
#224 := [monotonicity #179]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#220 := (iff #65 #219)
#217 := (iff #64 #216)
#214 := (= #63 #213)
#211 := (= #62 #210)
#208 := (= #61 #207)
#205 := (= #60 #202)
#199 := (- #196)
#203 := (= #199 #202)
#204 := [rewrite]: #203
#200 := (= #60 #199)
#197 := (= #59 #196)
#142 := (= #50 #141)
#143 := [rewrite]: #142
#139 := (= #49 #138)
#140 := [rewrite]: #139
#198 := [monotonicity #140 #143]: #197
#201 := [monotonicity #198]: #200
#206 := [trans #201 #204]: #205
#209 := [monotonicity #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#238 := [trans #221 #236]: #237
#195 := [asserted]: #65
#239 := [mp #195 #238]: #234
#267 := [mp~ #239 #252]: #234
#305 := [mp #267 #304]: #302
#336 := [mp #305 #335]: #333
#843 := [mp #336 #842]: #838
#690 := (not #838)
#691 := (or #690 #777)
#776 := (* -1::Int 1::Int)
#772 := (* -1::Int 3::Int)
#765 := (mod #772 #776)
#766 := (+ #12 #765)
#767 := (= #766 0::Int)
#774 := (mod 3::Int 1::Int)
#489 := (* -1::Int #774)
#771 := (+ #12 #489)
#775 := (= #771 0::Int)
#778 := (<= 1::Int 0::Int)
#493 := (>= 3::Int 0::Int)
#494 := (or #493 #778)
#495 := (not #494)
#781 := (<= 3::Int 0::Int)
#782 := (or #781 #778)
#492 := (not #782)
#773 := (or #492 #495)
#762 := (if #773 #775 #767)
#503 := (= 3::Int 0::Int)
#763 := (if #503 #777 #762)
#502 := (= #12 3::Int)
#780 := (= 1::Int 0::Int)
#768 := (if #780 #502 #763)
#692 := (or #690 #768)
#693 := (iff #692 #691)
#675 := (iff #691 #691)
#676 := [rewrite]: #675
#688 := (iff #768 #777)
#706 := (if false #502 #777)
#685 := (iff #706 #777)
#686 := [rewrite]: #685
#696 := (iff #768 #706)
#704 := (iff #763 #777)
#699 := (if false #777 #777)
#702 := (iff #699 #777)
#703 := [rewrite]: #702
#700 := (iff #763 #699)
#697 := (iff #762 #777)
#1 := true
#713 := (if true #777 #777)
#694 := (iff #713 #777)
#695 := [rewrite]: #694
#710 := (iff #762 #713)
#711 := (iff #767 #777)
#708 := (= #766 #12)
#734 := (+ #12 0::Int)
#725 := (= #734 #12)
#735 := [rewrite]: #725
#717 := (= #766 #734)
#720 := (= #765 0::Int)
#727 := -3::Int
#731 := (mod -3::Int -1::Int)
#718 := (= #731 0::Int)
#719 := [rewrite]: #718
#715 := (= #765 #731)
#730 := (= #776 -1::Int)
#724 := [rewrite]: #730
#728 := (= #772 -3::Int)
#729 := [rewrite]: #728
#716 := [monotonicity #729 #724]: #715
#721 := [trans #716 #719]: #720
#722 := [monotonicity #721]: #717
#709 := [trans #722 #735]: #708
#712 := [monotonicity #709]: #711
#733 := (iff #775 #777)
#736 := (= #771 #12)
#726 := (= #771 #734)
#745 := (= #489 0::Int)
#649 := (* -1::Int 0::Int)
#744 := (= #649 0::Int)
#741 := [rewrite]: #744
#650 := (= #489 #649)
#647 := (= #774 0::Int)
#648 := [rewrite]: #647
#651 := [monotonicity #648]: #650
#732 := [trans #651 #741]: #745
#723 := [monotonicity #732]: #726
#737 := [trans #723 #735]: #736
#738 := [monotonicity #737]: #733
#646 := (iff #773 true)
#751 := (or true false)
#635 := (iff #751 true)
#594 := [rewrite]: #635
#643 := (iff #773 #751)
#743 := (iff #495 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#739 := (iff #495 #460)
#742 := (iff #494 true)
#633 := (iff #494 #751)
#755 := (iff #778 false)
#756 := [rewrite]: #755
#750 := (iff #493 true)
#748 := [rewrite]: #750
#634 := [monotonicity #748 #756]: #633
#644 := [trans #634 #594]: #742
#740 := [monotonicity #644]: #739
#628 := [trans #740 #448]: #743
#747 := (iff #492 true)
#761 := (not false)
#593 := (iff #761 true)
#746 := [rewrite]: #593
#590 := (iff #492 #761)
#760 := (iff #782 false)
#757 := (or false false)
#753 := (iff #757 false)
#759 := [rewrite]: #753
#758 := (iff #782 #757)
#612 := (iff #781 false)
#613 := [rewrite]: #612
#752 := [monotonicity #613 #756]: #758
#754 := [trans #752 #759]: #760
#592 := [monotonicity #754]: #590
#749 := [trans #592 #746]: #747
#645 := [monotonicity #749 #628]: #643
#639 := [trans #645 #594]: #646
#714 := [monotonicity #639 #738 #712]: #710
#698 := [trans #714 #695]: #697
#770 := (iff #503 false)
#611 := [rewrite]: #770
#701 := [monotonicity #611 #698]: #700
#705 := [trans #701 #703]: #704
#769 := (iff #780 false)
#764 := [rewrite]: #769
#707 := [monotonicity #764 #705]: #696
#689 := [trans #707 #686]: #688
#679 := [monotonicity #689]: #693
#677 := [trans #679 #676]: #693
#687 := [quant-inst #9 #11]: #692
#680 := [mp #687 #677]: #691
#682 := [unit-resolution #680 #843]: #777
#683 := [monotonicity #682]: #16
#17 := (not #16)
#85 := [asserted]: #17
[unit-resolution #85 #683]: false
unsat
f29683011f680c62d56f5c3422022e33ef78fbc7 309 0
#2 := false
#16 := 0::Int
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#10 := f10
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
#491 := (>= #11 0::Int)
#636 := (not #491)
#496 := (<= #11 0::Int)
#592 := (not #496)
#744 := (or #592 #636)
#708 := (not #744)
decl f5 :: (-> S4 Int Int)
#13 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 1::Int)
#495 := (= #14 0::Int)
#689 := (not #495)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#17 := (f3 f4 0::Int)
#15 := (f3 f4 #14)
#18 := (= #15 #17)
#598 := [hypothesis]: #495
#629 := [monotonicity #598]: #18
#19 := (not #18)
#86 := [asserted]: #19
#631 := [unit-resolution #86 #629]: false
#633 := [lemma #631]: #689
#138 := -1::Int
#764 := (* -1::Int #11)
#737 := (mod #764 -1::Int)
#735 := (+ #14 #737)
#730 := (= #735 0::Int)
#726 := (if #744 #495 #730)
#494 := (= #11 0::Int)
#683 := (not #494)
#676 := (or #683 #495)
#718 := (if #494 #495 #726)
#25 := (:var 0 Int)
#37 := (:var 1 Int)
#57 := (f6 f7 #37)
#58 := (f5 #57 #25)
#839 := (pattern #58)
#142 := (* -1::Int #25)
#139 := (* -1::Int #37)
#197 := (mod #139 #142)
#327 := (+ #58 #197)
#328 := (= #327 0::Int)
#59 := (mod #37 #25)
#324 := (* -1::Int #59)
#325 := (+ #58 #324)
#326 := (= #325 0::Int)
#164 := (<= #25 0::Int)
#171 := (>= #37 0::Int)
#271 := (or #171 #164)
#272 := (not #271)
#160 := (<= #37 0::Int)
#269 := (or #160 #164)
#270 := (not #269)
#275 := (or #270 #272)
#329 := (if #275 #326 #328)
#323 := (= #58 0::Int)
#40 := (= #37 0::Int)
#330 := (if #40 #323 #329)
#322 := (= #58 #37)
#41 := (= #25 0::Int)
#331 := (if #41 #322 #330)
#840 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #839) #331)
#334 := (forall (vars (?v0 Int) (?v1 Int)) #331)
#843 := (iff #334 #840)
#841 := (iff #331 #331)
#842 := [refl]: #841
#844 := [quant-intro #842]: #843
#203 := (* -1::Int #197)
#291 := (if #275 #59 #203)
#294 := (if #40 0::Int #291)
#297 := (if #41 #37 #294)
#300 := (= #58 #297)
#303 := (forall (vars (?v0 Int) (?v1 Int)) #300)
#335 := (iff #303 #334)
#332 := (iff #300 #331)
#333 := [rewrite]: #332
#336 := [quant-intro #333]: #335
#165 := (not #164)
#172 := (not #171)
#175 := (and #172 #165)
#161 := (not #160)
#168 := (and #161 #165)
#178 := (or #168 #175)
#223 := (if #178 #59 #203)
#226 := (if #40 0::Int #223)
#229 := (if #41 #37 #226)
#232 := (= #58 #229)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#304 := (iff #235 #303)
#301 := (iff #232 #300)
#298 := (= #229 #297)
#295 := (= #226 #294)
#292 := (= #223 #291)
#276 := (iff #178 #275)
#273 := (iff #175 #272)
#274 := [rewrite]: #273
#254 := (iff #168 #270)
#255 := [rewrite]: #254
#277 := [monotonicity #255 #274]: #276
#293 := [monotonicity #277]: #292
#296 := [monotonicity #293]: #295
#299 := [monotonicity #296]: #298
#302 := [monotonicity #299]: #301
#305 := [quant-intro #302]: #304
#252 := (~ #235 #235)
#266 := (~ #232 #232)
#267 := [refl]: #266
#253 := [nnf-pos #267]: #252
#51 := (- #25)
#50 := (- #37)
#60 := (mod #50 #51)
#61 := (- #60)
#44 := (< 0::Int #25)
#46 := (< #37 0::Int)
#47 := (and #46 #44)
#43 := (< 0::Int #37)
#45 := (and #43 #44)
#48 := (or #45 #47)
#62 := (if #48 #59 #61)
#63 := (if #40 0::Int #62)
#64 := (if #41 #37 #63)
#65 := (= #58 #64)
#66 := (forall (vars (?v0 Int) (?v1 Int)) #65)
#238 := (iff #66 #235)
#208 := (if #48 #59 #203)
#211 := (if #40 0::Int #208)
#214 := (if #41 #37 #211)
#217 := (= #58 #214)
#220 := (forall (vars (?v0 Int) (?v1 Int)) #217)
#236 := (iff #220 #235)
#233 := (iff #217 #232)
#230 := (= #214 #229)
#227 := (= #211 #226)
#224 := (= #208 #223)
#179 := (iff #48 #178)
#176 := (iff #47 #175)
#166 := (iff #44 #165)
#167 := [rewrite]: #166
#173 := (iff #46 #172)
#174 := [rewrite]: #173
#177 := [monotonicity #174 #167]: #176
#169 := (iff #45 #168)
#162 := (iff #43 #161)
#163 := [rewrite]: #162
#170 := [monotonicity #163 #167]: #169
#180 := [monotonicity #170 #177]: #179
#225 := [monotonicity #180]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#221 := (iff #66 #220)
#218 := (iff #65 #217)
#215 := (= #64 #214)
#212 := (= #63 #211)
#209 := (= #62 #208)
#206 := (= #61 #203)
#200 := (- #197)
#204 := (= #200 #203)
#205 := [rewrite]: #204
#201 := (= #61 #200)
#198 := (= #60 #197)
#143 := (= #51 #142)
#144 := [rewrite]: #143
#140 := (= #50 #139)
#141 := [rewrite]: #140
#199 := [monotonicity #141 #144]: #198
#202 := [monotonicity #199]: #201
#207 := [trans #202 #205]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [monotonicity #213]: #215
#219 := [monotonicity #216]: #218
#222 := [quant-intro #219]: #221
#239 := [trans #222 #237]: #238
#196 := [asserted]: #66
#240 := [mp #196 #239]: #235
#268 := [mp~ #240 #253]: #235
#306 := [mp #268 #305]: #303
#337 := [mp #306 #336]: #334
#845 := [mp #337 #844]: #840
#714 := (not #840)
#715 := (or #714 #718)
#765 := (* -1::Int 1::Int)
#770 := (mod #764 #765)
#771 := (+ #14 #770)
#766 := (= #771 0::Int)
#778 := (mod #11 1::Int)
#767 := (* -1::Int #778)
#768 := (+ #14 #767)
#769 := (= #768 0::Int)
#497 := (<= 1::Int 0::Int)
#773 := (or #491 #497)
#777 := (not #773)
#775 := (or #496 #497)
#776 := (not #775)
#774 := (or #776 #777)
#772 := (if #774 #769 #766)
#613 := (if #494 #495 #772)
#784 := (= #14 #11)
#780 := (= 1::Int 0::Int)
#614 := (if #780 #784 #613)
#712 := (or #714 #614)
#696 := (iff #712 #715)
#699 := (iff #715 #715)
#700 := [rewrite]: #699
#711 := (iff #614 #718)
#722 := (if false #784 #718)
#724 := (iff #722 #718)
#710 := [rewrite]: #724
#723 := (iff #614 #722)
#720 := (iff #613 #718)
#733 := (iff #772 #726)
#731 := (iff #766 #730)
#740 := (= #771 #735)
#738 := (= #770 #737)
#725 := (= #765 -1::Int)
#727 := [rewrite]: #725
#739 := [monotonicity #727]: #738
#729 := [monotonicity #739]: #740
#732 := [monotonicity #729]: #731
#736 := (iff #769 #495)
#747 := (= #768 #14)
#651 := (+ #14 0::Int)
#746 := (= #651 #14)
#743 := [rewrite]: #746
#652 := (= #768 #651)
#649 := (= #767 0::Int)
#630 := (* -1::Int 0::Int)
#648 := (= #630 0::Int)
#641 := [rewrite]: #648
#645 := (= #767 #630)
#742 := (= #778 0::Int)
#745 := [rewrite]: #742
#647 := [monotonicity #745]: #645
#650 := [trans #647 #641]: #649
#653 := [monotonicity #650]: #652
#734 := [trans #653 #743]: #747
#728 := [monotonicity #734]: #736
#646 := (iff #774 #744)
#637 := (iff #777 #636)
#753 := (iff #773 #491)
#748 := (or #491 false)
#752 := (iff #748 #491)
#750 := [rewrite]: #752
#749 := (iff #773 #748)
#758 := (iff #497 false)
#759 := [rewrite]: #758
#751 := [monotonicity #759]: #749
#635 := [trans #751 #750]: #753
#596 := [monotonicity #635]: #637
#594 := (iff #776 #592)
#756 := (iff #775 #496)
#760 := (or #496 false)
#761 := (iff #760 #496)
#762 := [rewrite]: #761
#754 := (iff #775 #760)
#755 := [monotonicity #759]: #754
#763 := [trans #755 #762]: #756
#595 := [monotonicity #763]: #594
#741 := [monotonicity #595 #596]: #646
#717 := [monotonicity #741 #728 #732]: #733
#721 := [monotonicity #717]: #720
#615 := (iff #780 false)
#757 := [rewrite]: #615
#719 := [monotonicity #757 #721]: #723
#713 := [trans #719 #710]: #711
#697 := [monotonicity #713]: #696
#701 := [trans #697 #700]: #696
#716 := [quant-inst #11 #13]: #712
#702 := [mp #716 #701]: #715
#668 := [unit-resolution #702 #845]: #718
#682 := (not #718)
#684 := (or #682 #683 #495)
#685 := [def-axiom]: #684
#656 := [unit-resolution #685 #668]: #676
#583 := [unit-resolution #656 #633]: #683
#657 := (or #494 #726)
#680 := (or #682 #494 #726)
#686 := [def-axiom]: #680
#638 := [unit-resolution #686 #668]: #657
#588 := [unit-resolution #638 #583]: #726
#690 := (not #726)
#691 := (or #690 #708 #495)
#692 := [def-axiom]: #691
#567 := [unit-resolution #692 #588 #633]: #708
#706 := (or #744 #491)
#707 := [def-axiom]: #706
#570 := [unit-resolution #707 #567]: #491
#704 := (or #744 #496)
#705 := [def-axiom]: #704
#574 := [unit-resolution #705 #567]: #496
#576 := (or #494 #592 #636)
#577 := [th-lemma arith triangle-eq]: #576
[unit-resolution #577 #583 #574 #570]: false
unsat
f5dee1de42c18302f6c788168a6801f729654264 295 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#12 := (f5 #10 3::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#502 := (= #12 0::Int)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f6 f7 #35)
#56 := (f5 #55 #23)
#837 := (pattern #56)
#136 := -1::Int
#140 := (* -1::Int #23)
#137 := (* -1::Int #35)
#195 := (mod #137 #140)
#325 := (+ #56 #195)
#326 := (= #325 0::Int)
#57 := (mod #35 #23)
#322 := (* -1::Int #57)
#323 := (+ #56 #322)
#324 := (= #323 0::Int)
#162 := (<= #23 0::Int)
#169 := (>= #35 0::Int)
#269 := (or #169 #162)
#270 := (not #269)
#158 := (<= #35 0::Int)
#267 := (or #158 #162)
#268 := (not #267)
#273 := (or #268 #270)
#327 := (if #273 #324 #326)
#321 := (= #56 0::Int)
#38 := (= #35 0::Int)
#328 := (if #38 #321 #327)
#320 := (= #56 #35)
#39 := (= #23 0::Int)
#329 := (if #39 #320 #328)
#838 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #837) #329)
#332 := (forall (vars (?v0 Int) (?v1 Int)) #329)
#841 := (iff #332 #838)
#839 := (iff #329 #329)
#840 := [refl]: #839
#842 := [quant-intro #840]: #841
#201 := (* -1::Int #195)
#289 := (if #273 #57 #201)
#292 := (if #38 0::Int #289)
#295 := (if #39 #35 #292)
#298 := (= #56 #295)
#301 := (forall (vars (?v0 Int) (?v1 Int)) #298)
#333 := (iff #301 #332)
#330 := (iff #298 #329)
#331 := [rewrite]: #330
#334 := [quant-intro #331]: #333
#163 := (not #162)
#170 := (not #169)
#173 := (and #170 #163)
#159 := (not #158)
#166 := (and #159 #163)
#176 := (or #166 #173)
#221 := (if #176 #57 #201)
#224 := (if #38 0::Int #221)
#227 := (if #39 #35 #224)
#230 := (= #56 #227)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#302 := (iff #233 #301)
#299 := (iff #230 #298)
#296 := (= #227 #295)
#293 := (= #224 #292)
#290 := (= #221 #289)
#274 := (iff #176 #273)
#271 := (iff #173 #270)
#272 := [rewrite]: #271
#252 := (iff #166 #268)
#253 := [rewrite]: #252
#275 := [monotonicity #253 #272]: #274
#291 := [monotonicity #275]: #290
#294 := [monotonicity #291]: #293
#297 := [monotonicity #294]: #296
#300 := [monotonicity #297]: #299
#303 := [quant-intro #300]: #302
#250 := (~ #233 #233)
#264 := (~ #230 #230)
#265 := [refl]: #264
#251 := [nnf-pos #265]: #250
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#236 := (iff #64 #233)
#206 := (if #46 #57 #201)
#209 := (if #38 0::Int #206)
#212 := (if #39 #35 #209)
#215 := (= #56 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#234 := (iff #218 #233)
#231 := (iff #215 #230)
#228 := (= #212 #227)
#225 := (= #209 #224)
#222 := (= #206 #221)
#177 := (iff #46 #176)
#174 := (iff #45 #173)
#164 := (iff #42 #163)
#165 := [rewrite]: #164
#171 := (iff #44 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172 #165]: #174
#167 := (iff #43 #166)
#160 := (iff #41 #159)
#161 := [rewrite]: #160
#168 := [monotonicity #161 #165]: #167
#178 := [monotonicity #168 #175]: #177
#223 := [monotonicity #178]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#219 := (iff #64 #218)
#216 := (iff #63 #215)
#213 := (= #62 #212)
#210 := (= #61 #209)
#207 := (= #60 #206)
#204 := (= #59 #201)
#198 := (- #195)
#202 := (= #198 #201)
#203 := [rewrite]: #202
#199 := (= #59 #198)
#196 := (= #58 #195)
#141 := (= #49 #140)
#142 := [rewrite]: #141
#138 := (= #48 #137)
#139 := [rewrite]: #138
#197 := [monotonicity #139 #142]: #196
#200 := [monotonicity #197]: #199
#205 := [trans #200 #203]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#237 := [trans #220 #235]: #236
#194 := [asserted]: #64
#238 := [mp #194 #237]: #233
#266 := [mp~ #238 #251]: #233
#304 := [mp #266 #303]: #301
#335 := [mp #304 #334]: #332
#843 := [mp #335 #842]: #838
#700 := (not #838)
#701 := (or #700 #502)
#775 := (* -1::Int 3::Int)
#771 := (* -1::Int 0::Int)
#772 := (mod #771 #775)
#776 := (+ #12 #772)
#765 := (= #776 0::Int)
#495 := (mod 0::Int 3::Int)
#773 := (* -1::Int #495)
#774 := (+ #12 #773)
#489 := (= #774 0::Int)
#781 := (<= 3::Int 0::Int)
#591 := (>= 0::Int 0::Int)
#492 := (or #591 #781)
#493 := (not #492)
#777 := (<= 0::Int 0::Int)
#778 := (or #777 #781)
#782 := (not #778)
#494 := (or #782 #493)
#766 := (if #494 #489 #765)
#503 := (= 0::Int 0::Int)
#767 := (if #503 #502 #766)
#780 := (= 3::Int 0::Int)
#762 := (if #780 #502 #767)
#702 := (or #700 #762)
#704 := (iff #702 #701)
#706 := (iff #701 #701)
#696 := [rewrite]: #706
#698 := (iff #762 #502)
#718 := (if false #502 #502)
#721 := (iff #718 #502)
#717 := [rewrite]: #721
#695 := (iff #762 #718)
#714 := (iff #767 #502)
#1 := true
#709 := (if true #502 #502)
#713 := (iff #709 #502)
#710 := [rewrite]: #713
#711 := (iff #767 #709)
#722 := (iff #766 #502)
#719 := (iff #766 #718)
#715 := (iff #765 #502)
#724 := (= #776 #12)
#648 := (+ #12 0::Int)
#651 := (= #648 #12)
#744 := [rewrite]: #651
#729 := (= #776 #648)
#727 := (= #772 0::Int)
#726 := -3::Int
#735 := (mod 0::Int -3::Int)
#733 := (= #735 0::Int)
#738 := [rewrite]: #733
#736 := (= #772 #735)
#723 := (= #775 -3::Int)
#725 := [rewrite]: #723
#645 := (= #771 0::Int)
#646 := [rewrite]: #645
#737 := [monotonicity #646 #725]: #736
#728 := [trans #737 #738]: #727
#730 := [monotonicity #728]: #729
#731 := [trans #730 #744]: #724
#716 := [monotonicity #731]: #715
#732 := (iff #489 #502)
#741 := (= #774 #12)
#649 := (= #774 #648)
#639 := (= #773 0::Int)
#628 := (= #773 #771)
#740 := (= #495 0::Int)
#743 := [rewrite]: #740
#643 := [monotonicity #743]: #628
#647 := [trans #643 #646]: #639
#650 := [monotonicity #647]: #649
#745 := [trans #650 #744]: #741
#734 := [monotonicity #745]: #732
#644 := (iff #494 false)
#633 := (or false false)
#594 := (iff #633 false)
#742 := [rewrite]: #594
#634 := (iff #494 #633)
#748 := (iff #493 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#749 := (iff #493 #460)
#746 := (iff #492 true)
#755 := (or true false)
#758 := (iff #755 true)
#752 := [rewrite]: #758
#592 := (iff #492 #755)
#612 := (iff #781 false)
#613 := [rewrite]: #612
#464 := (iff #591 true)
#800 := [rewrite]: #464
#593 := [monotonicity #800 #613]: #592
#747 := [trans #593 #752]: #746
#750 := [monotonicity #747]: #749
#751 := [trans #750 #448]: #748
#761 := (iff #782 false)
#760 := (iff #782 #460)
#753 := (iff #778 true)
#756 := (iff #778 #755)
#770 := (iff #777 true)
#611 := [rewrite]: #770
#757 := [monotonicity #611 #613]: #756
#759 := [trans #757 #752]: #753
#754 := [monotonicity #759]: #760
#590 := [trans #754 #448]: #761
#635 := [monotonicity #590 #751]: #634
#739 := [trans #635 #742]: #644
#720 := [monotonicity #739 #734 #716]: #719
#708 := [trans #720 #717]: #722
#769 := (iff #503 true)
#764 := [rewrite]: #769
#712 := [monotonicity #764 #708]: #711
#694 := [trans #712 #710]: #714
#763 := (iff #780 false)
#768 := [rewrite]: #763
#697 := [monotonicity #768 #694]: #695
#699 := [trans #697 #717]: #698
#705 := [monotonicity #699]: #704
#707 := [trans #705 #696]: #704
#703 := [quant-inst #9 #11]: #702
#685 := [mp #703 #707]: #701
#688 := [unit-resolution #685 #843]: #502
#689 := [monotonicity #688]: #15
#16 := (not #15)
#84 := [asserted]: #16
[unit-resolution #84 #689]: false
unsat
a2a3dbca7e9573eaa0bdadbb6bd04a2c290ad9e4 321 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 1::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 1::Int)
decl f5 :: (-> S4 Int Int)
#11 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 1::Int)
#12 := (f5 #10 3::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#503 := (= #12 1::Int)
#24 := (:var 0 Int)
#36 := (:var 1 Int)
#56 := (f6 f7 #36)
#57 := (f5 #56 #24)
#837 := (pattern #57)
#23 := 0::Int
#137 := -1::Int
#141 := (* -1::Int #24)
#138 := (* -1::Int #36)
#196 := (mod #138 #141)
#326 := (+ #57 #196)
#327 := (= #326 0::Int)
#58 := (mod #36 #24)
#323 := (* -1::Int #58)
#324 := (+ #57 #323)
#325 := (= #324 0::Int)
#163 := (<= #24 0::Int)
#170 := (>= #36 0::Int)
#270 := (or #170 #163)
#271 := (not #270)
#159 := (<= #36 0::Int)
#268 := (or #159 #163)
#269 := (not #268)
#274 := (or #269 #271)
#328 := (if #274 #325 #327)
#322 := (= #57 0::Int)
#39 := (= #36 0::Int)
#329 := (if #39 #322 #328)
#321 := (= #57 #36)
#40 := (= #24 0::Int)
#330 := (if #40 #321 #329)
#838 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #837) #330)
#333 := (forall (vars (?v0 Int) (?v1 Int)) #330)
#841 := (iff #333 #838)
#839 := (iff #330 #330)
#840 := [refl]: #839
#842 := [quant-intro #840]: #841
#202 := (* -1::Int #196)
#290 := (if #274 #58 #202)
#293 := (if #39 0::Int #290)
#296 := (if #40 #36 #293)
#299 := (= #57 #296)
#302 := (forall (vars (?v0 Int) (?v1 Int)) #299)
#334 := (iff #302 #333)
#331 := (iff #299 #330)
#332 := [rewrite]: #331
#335 := [quant-intro #332]: #334
#164 := (not #163)
#171 := (not #170)
#174 := (and #171 #164)
#160 := (not #159)
#167 := (and #160 #164)
#177 := (or #167 #174)
#222 := (if #177 #58 #202)
#225 := (if #39 0::Int #222)
#228 := (if #40 #36 #225)
#231 := (= #57 #228)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#303 := (iff #234 #302)
#300 := (iff #231 #299)
#297 := (= #228 #296)
#294 := (= #225 #293)
#291 := (= #222 #290)
#275 := (iff #177 #274)
#272 := (iff #174 #271)
#273 := [rewrite]: #272
#253 := (iff #167 #269)
#254 := [rewrite]: #253
#276 := [monotonicity #254 #273]: #275
#292 := [monotonicity #276]: #291
#295 := [monotonicity #292]: #294
#298 := [monotonicity #295]: #297
#301 := [monotonicity #298]: #300
#304 := [quant-intro #301]: #303
#251 := (~ #234 #234)
#265 := (~ #231 #231)
#266 := [refl]: #265
#252 := [nnf-pos #266]: #251
#50 := (- #24)
#49 := (- #36)
#59 := (mod #49 #50)
#60 := (- #59)
#43 := (< 0::Int #24)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#61 := (if #47 #58 #60)
#62 := (if #39 0::Int #61)
#63 := (if #40 #36 #62)
#64 := (= #57 #63)
#65 := (forall (vars (?v0 Int) (?v1 Int)) #64)
#237 := (iff #65 #234)
#207 := (if #47 #58 #202)
#210 := (if #39 0::Int #207)
#213 := (if #40 #36 #210)
#216 := (= #57 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#235 := (iff #219 #234)
#232 := (iff #216 #231)
#229 := (= #213 #228)
#226 := (= #210 #225)
#223 := (= #207 #222)
#178 := (iff #47 #177)
#175 := (iff #46 #174)
#165 := (iff #43 #164)
#166 := [rewrite]: #165
#172 := (iff #45 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173 #166]: #175
#168 := (iff #44 #167)
#161 := (iff #42 #160)
#162 := [rewrite]: #161
#169 := [monotonicity #162 #166]: #168
#179 := [monotonicity #169 #176]: #178
#224 := [monotonicity #179]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#220 := (iff #65 #219)
#217 := (iff #64 #216)
#214 := (= #63 #213)
#211 := (= #62 #210)
#208 := (= #61 #207)
#205 := (= #60 #202)
#199 := (- #196)
#203 := (= #199 #202)
#204 := [rewrite]: #203
#200 := (= #60 #199)
#197 := (= #59 #196)
#142 := (= #50 #141)
#143 := [rewrite]: #142
#139 := (= #49 #138)
#140 := [rewrite]: #139
#198 := [monotonicity #140 #143]: #197
#201 := [monotonicity #198]: #200
#206 := [trans #201 #204]: #205
#209 := [monotonicity #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#238 := [trans #221 #236]: #237
#195 := [asserted]: #65
#239 := [mp #195 #238]: #234
#267 := [mp~ #239 #252]: #234
#305 := [mp #267 #304]: #302
#336 := [mp #305 #335]: #333
#843 := [mp #336 #842]: #838
#683 := (not #838)
#678 := (or #683 #503)
#776 := (* -1::Int 3::Int)
#772 := (* -1::Int 1::Int)
#765 := (mod #772 #776)
#766 := (+ #12 #765)
#767 := (= #766 0::Int)
#774 := (mod 1::Int 3::Int)
#489 := (* -1::Int #774)
#771 := (+ #12 #489)
#775 := (= #771 0::Int)
#782 := (<= 3::Int 0::Int)
#591 := (>= 1::Int 0::Int)
#494 := (or #591 #782)
#495 := (not #494)
#778 := (<= 1::Int 0::Int)
#492 := (or #778 #782)
#493 := (not #492)
#773 := (or #493 #495)
#762 := (if #773 #775 #767)
#781 := (= #12 0::Int)
#777 := (= 1::Int 0::Int)
#763 := (if #777 #781 #762)
#502 := (= 3::Int 0::Int)
#768 := (if #502 #503 #763)
#684 := (or #683 #768)
#658 := (iff #684 #678)
#552 := (iff #678 #678)
#663 := [rewrite]: #552
#681 := (iff #768 #503)
#679 := (if false #503 #503)
#677 := (iff #679 #503)
#680 := [rewrite]: #677
#675 := (iff #768 #679)
#687 := (iff #763 #503)
#688 := (if false #781 #503)
#691 := (iff #688 #503)
#692 := [rewrite]: #691
#689 := (iff #763 #688)
#685 := (iff #762 #503)
#698 := -2::Int
#699 := (= #12 -2::Int)
#1 := true
#704 := (if true #503 #699)
#696 := (iff #704 #503)
#707 := [rewrite]: #696
#705 := (iff #762 #704)
#702 := (iff #767 #699)
#357 := 2::Int
#711 := (+ 2::Int #12)
#694 := (= #711 0::Int)
#700 := (iff #694 #699)
#701 := [rewrite]: #700
#695 := (iff #767 #694)
#710 := (= #766 #711)
#722 := (+ #12 2::Int)
#712 := (= #722 #711)
#713 := [rewrite]: #712
#708 := (= #766 #722)
#721 := (= #765 2::Int)
#730 := -3::Int
#715 := (mod -1::Int -3::Int)
#719 := (= #715 2::Int)
#720 := [rewrite]: #719
#716 := (= #765 #715)
#724 := (= #776 -3::Int)
#731 := [rewrite]: #724
#649 := (= #772 -1::Int)
#650 := [rewrite]: #649
#718 := [monotonicity #650 #731]: #716
#717 := [trans #718 #720]: #721
#709 := [monotonicity #717]: #708
#714 := [trans #709 #713]: #710
#697 := [monotonicity #714]: #695
#703 := [trans #697 #701]: #702
#728 := (iff #775 #503)
#734 := (+ -1::Int #12)
#736 := (= #734 0::Int)
#738 := (iff #736 #503)
#727 := [rewrite]: #738
#737 := (iff #775 #736)
#725 := (= #771 #734)
#741 := (+ #12 -1::Int)
#726 := (= #741 #734)
#723 := [rewrite]: #726
#745 := (= #771 #741)
#651 := (= #489 -1::Int)
#647 := (= #489 #772)
#646 := (= #774 1::Int)
#639 := [rewrite]: #646
#648 := [monotonicity #639]: #647
#744 := [trans #648 #650]: #651
#732 := [monotonicity #744]: #745
#735 := [trans #732 #723]: #725
#733 := [monotonicity #735]: #737
#729 := [trans #733 #727]: #728
#643 := (iff #773 true)
#750 := (or true false)
#633 := (iff #750 true)
#634 := [rewrite]: #633
#743 := (iff #773 #750)
#739 := (iff #495 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#742 := (iff #495 #460)
#635 := (iff #494 true)
#748 := (iff #494 #750)
#755 := (iff #782 false)
#756 := [rewrite]: #755
#464 := (iff #591 true)
#800 := [rewrite]: #464
#751 := [monotonicity #800 #756]: #748
#594 := [trans #751 #634]: #635
#644 := [monotonicity #594]: #742
#740 := [trans #644 #448]: #739
#747 := (iff #493 true)
#761 := (not false)
#593 := (iff #761 true)
#746 := [rewrite]: #593
#590 := (iff #493 #761)
#760 := (iff #492 false)
#757 := (or false false)
#753 := (iff #757 false)
#759 := [rewrite]: #753
#758 := (iff #492 #757)
#612 := (iff #778 false)
#613 := [rewrite]: #612
#752 := [monotonicity #613 #756]: #758
#754 := [trans #752 #759]: #760
#592 := [monotonicity #754]: #590
#749 := [trans #592 #746]: #747
#628 := [monotonicity #749 #740]: #743
#645 := [trans #628 #634]: #643
#706 := [monotonicity #645 #729 #703]: #705
#686 := [trans #706 #707]: #685
#770 := (iff #777 false)
#611 := [rewrite]: #770
#690 := [monotonicity #611 #686]: #689
#693 := [trans #690 #692]: #687
#769 := (iff #502 false)
#764 := [rewrite]: #769
#676 := [monotonicity #764 #693]: #675
#682 := [trans #676 #680]: #681
#659 := [monotonicity #682]: #658
#664 := [trans #659 #663]: #658
#657 := [quant-inst #9 #11]: #684
#665 := [mp #657 #664]: #678
#667 := [unit-resolution #665 #843]: #503
#668 := [monotonicity #667]: #15
#16 := (not #15)
#85 := [asserted]: #16
[unit-resolution #85 #668]: false
unsat
cc3d71be6ab4da3c4f7dfa56b53ad9595e6253f7 296 0
#2 := false
decl f3 :: (-> S2 Int S3)
#13 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#9 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 3::Int)
#11 := (f5 #10 3::Int)
#12 := (f3 f4 #11)
#15 := (= #12 #14)
#503 := (= #11 0::Int)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f6 f7 #35)
#56 := (f5 #55 #23)
#837 := (pattern #56)
#136 := -1::Int
#140 := (* -1::Int #23)
#137 := (* -1::Int #35)
#195 := (mod #137 #140)
#325 := (+ #56 #195)
#326 := (= #325 0::Int)
#57 := (mod #35 #23)
#322 := (* -1::Int #57)
#323 := (+ #56 #322)
#324 := (= #323 0::Int)
#162 := (<= #23 0::Int)
#169 := (>= #35 0::Int)
#269 := (or #169 #162)
#270 := (not #269)
#158 := (<= #35 0::Int)
#267 := (or #158 #162)
#268 := (not #267)
#273 := (or #268 #270)
#327 := (if #273 #324 #326)
#321 := (= #56 0::Int)
#38 := (= #35 0::Int)
#328 := (if #38 #321 #327)
#320 := (= #56 #35)
#39 := (= #23 0::Int)
#329 := (if #39 #320 #328)
#838 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #837) #329)
#332 := (forall (vars (?v0 Int) (?v1 Int)) #329)
#841 := (iff #332 #838)
#839 := (iff #329 #329)
#840 := [refl]: #839
#842 := [quant-intro #840]: #841
#201 := (* -1::Int #195)
#289 := (if #273 #57 #201)
#292 := (if #38 0::Int #289)
#295 := (if #39 #35 #292)
#298 := (= #56 #295)
#301 := (forall (vars (?v0 Int) (?v1 Int)) #298)
#333 := (iff #301 #332)
#330 := (iff #298 #329)
#331 := [rewrite]: #330
#334 := [quant-intro #331]: #333
#163 := (not #162)
#170 := (not #169)
#173 := (and #170 #163)
#159 := (not #158)
#166 := (and #159 #163)
#176 := (or #166 #173)
#221 := (if #176 #57 #201)
#224 := (if #38 0::Int #221)
#227 := (if #39 #35 #224)
#230 := (= #56 #227)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#302 := (iff #233 #301)
#299 := (iff #230 #298)
#296 := (= #227 #295)
#293 := (= #224 #292)
#290 := (= #221 #289)
#274 := (iff #176 #273)
#271 := (iff #173 #270)
#272 := [rewrite]: #271
#252 := (iff #166 #268)
#253 := [rewrite]: #252
#275 := [monotonicity #253 #272]: #274
#291 := [monotonicity #275]: #290
#294 := [monotonicity #291]: #293
#297 := [monotonicity #294]: #296
#300 := [monotonicity #297]: #299
#303 := [quant-intro #300]: #302
#250 := (~ #233 #233)
#264 := (~ #230 #230)
#265 := [refl]: #264
#251 := [nnf-pos #265]: #250
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#236 := (iff #64 #233)
#206 := (if #46 #57 #201)
#209 := (if #38 0::Int #206)
#212 := (if #39 #35 #209)
#215 := (= #56 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#234 := (iff #218 #233)
#231 := (iff #215 #230)
#228 := (= #212 #227)
#225 := (= #209 #224)
#222 := (= #206 #221)
#177 := (iff #46 #176)
#174 := (iff #45 #173)
#164 := (iff #42 #163)
#165 := [rewrite]: #164
#171 := (iff #44 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172 #165]: #174
#167 := (iff #43 #166)
#160 := (iff #41 #159)
#161 := [rewrite]: #160
#168 := [monotonicity #161 #165]: #167
#178 := [monotonicity #168 #175]: #177
#223 := [monotonicity #178]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#219 := (iff #64 #218)
#216 := (iff #63 #215)
#213 := (= #62 #212)
#210 := (= #61 #209)
#207 := (= #60 #206)
#204 := (= #59 #201)
#198 := (- #195)
#202 := (= #198 #201)
#203 := [rewrite]: #202
#199 := (= #59 #198)
#196 := (= #58 #195)
#141 := (= #49 #140)
#142 := [rewrite]: #141
#138 := (= #48 #137)
#139 := [rewrite]: #138
#197 := [monotonicity #139 #142]: #196
#200 := [monotonicity #197]: #199
#205 := [trans #200 #203]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#237 := [trans #220 #235]: #236
#194 := [asserted]: #64
#238 := [mp #194 #237]: #233
#266 := [mp~ #238 #251]: #233
#304 := [mp #266 #303]: #301
#335 := [mp #304 #334]: #332
#843 := [mp #335 #842]: #838
#704 := (not #838)
#705 := (or #704 #503)
#771 := (* -1::Int 3::Int)
#775 := (mod #771 #771)
#772 := (+ #11 #775)
#776 := (= #772 0::Int)
#495 := (mod 3::Int 3::Int)
#773 := (* -1::Int #495)
#774 := (+ #11 #773)
#489 := (= #774 0::Int)
#777 := (<= 3::Int 0::Int)
#782 := (>= 3::Int 0::Int)
#492 := (or #782 #777)
#493 := (not #492)
#781 := (or #777 #777)
#778 := (not #781)
#494 := (or #778 #493)
#765 := (if #494 #489 #776)
#780 := (= 3::Int 0::Int)
#766 := (if #780 #503 #765)
#502 := (= #11 3::Int)
#767 := (if #780 #502 #766)
#706 := (or #704 #767)
#707 := (iff #706 #705)
#686 := (iff #705 #705)
#688 := [rewrite]: #686
#702 := (iff #767 #503)
#697 := (if false #502 #503)
#700 := (iff #697 #503)
#701 := [rewrite]: #700
#698 := (iff #767 #697)
#694 := (iff #766 #503)
#711 := (if false #503 #503)
#710 := (iff #711 #503)
#714 := [rewrite]: #710
#712 := (iff #766 #711)
#708 := (iff #765 #503)
#1 := true
#719 := (if true #503 #503)
#717 := (iff #719 #503)
#722 := [rewrite]: #717
#720 := (iff #765 #719)
#716 := (iff #776 #503)
#731 := (= #772 #11)
#649 := (+ #11 0::Int)
#744 := (= #649 #11)
#741 := [rewrite]: #744
#730 := (= #772 #649)
#728 := (= #775 0::Int)
#723 := -3::Int
#736 := (mod -3::Int -3::Int)
#738 := (= #736 0::Int)
#727 := [rewrite]: #738
#737 := (= #775 #736)
#725 := (= #771 -3::Int)
#735 := [rewrite]: #725
#733 := [monotonicity #735 #735]: #737
#729 := [trans #733 #727]: #728
#724 := [monotonicity #729]: #730
#715 := [trans #724 #741]: #731
#718 := [monotonicity #715]: #716
#734 := (iff #489 #503)
#745 := (= #774 #11)
#650 := (= #774 #649)
#647 := (= #773 0::Int)
#628 := (* -1::Int 0::Int)
#646 := (= #628 0::Int)
#639 := [rewrite]: #646
#643 := (= #773 #628)
#740 := (= #495 0::Int)
#743 := [rewrite]: #740
#645 := [monotonicity #743]: #643
#648 := [trans #645 #639]: #647
#651 := [monotonicity #648]: #650
#732 := [trans #651 #741]: #745
#726 := [monotonicity #732]: #734
#644 := (iff #494 true)
#592 := (or true false)
#747 := (iff #592 true)
#749 := [rewrite]: #747
#594 := (iff #494 #592)
#634 := (iff #493 false)
#460 := (not true)
#785 := (iff #460 false)
#448 := [rewrite]: #785
#751 := (iff #493 #460)
#750 := (iff #492 true)
#593 := (iff #492 #592)
#768 := (iff #777 false)
#769 := [rewrite]: #768
#761 := (iff #782 true)
#590 := [rewrite]: #761
#746 := [monotonicity #590 #769]: #593
#748 := [trans #746 #749]: #750
#633 := [monotonicity #748]: #751
#635 := [trans #633 #448]: #634
#760 := (iff #778 true)
#757 := (not false)
#753 := (iff #757 true)
#759 := [rewrite]: #753
#758 := (iff #778 #757)
#755 := (iff #781 false)
#764 := (or false false)
#612 := (iff #764 false)
#613 := [rewrite]: #612
#770 := (iff #781 #764)
#611 := [monotonicity #769 #769]: #770
#756 := [trans #611 #613]: #755
#752 := [monotonicity #756]: #758
#754 := [trans #752 #759]: #760
#742 := [monotonicity #754 #635]: #594
#739 := [trans #742 #749]: #644
#721 := [monotonicity #739 #726 #718]: #720
#709 := [trans #721 #722]: #708
#762 := (iff #780 false)
#763 := [rewrite]: #762
#713 := [monotonicity #763 #709]: #712
#695 := [trans #713 #714]: #694
#699 := [monotonicity #763 #695]: #698
#703 := [trans #699 #701]: #702
#685 := [monotonicity #703]: #707
#689 := [trans #685 #688]: #707
#696 := [quant-inst #9 #9]: #706
#690 := [mp #696 #689]: #705
#692 := [unit-resolution #690 #843]: #503
#687 := [monotonicity #692]: #15
#16 := (not #15)
#84 := [asserted]: #16
[unit-resolution #84 #687]: false
unsat
1df07385907a71330f107e5e8097355bfe585e4f 407 0
#2 := false
#12 := 3::Int
decl f6 :: (-> S4 S5 Int)
decl f8 :: S5
#9 := f8
decl f7 :: S4
#8 := f7
#10 := (f6 f7 f8)
#485 := (mod #10 3::Int)
#701 := (>= #485 3::Int)
#702 := (not #701)
#1 := true
#82 := [true-axiom]: true
#693 := (or false #702)
#694 := [th-lemma arith]: #693
#695 := [unit-resolution #694 #82]: #702
#22 := 0::Int
#148 := -1::Int
#817 := (* -1::Int #485)
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#11 := (f4 f5 #10)
#13 := (f3 #11 3::Int)
#818 := (+ #13 #817)
#604 := (<= #818 0::Int)
#819 := (= #818 0::Int)
#521 := -3::Int
#820 := (* -1::Int #10)
#792 := (mod #820 -3::Int)
#789 := (+ #13 #792)
#794 := (= #789 0::Int)
#473 := (>= #10 0::Int)
#809 := (not #473)
#500 := (<= #10 0::Int)
#803 := (not #500)
#518 := (or #803 #809)
#506 := (if #518 #819 #794)
#496 := (= #13 0::Int)
#499 := (= #10 0::Int)
#786 := (if #499 #496 #506)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f4 f5 #35)
#56 := (f3 #55 #23)
#849 := (pattern #56)
#152 := (* -1::Int #23)
#149 := (* -1::Int #35)
#207 := (mod #149 #152)
#337 := (+ #56 #207)
#338 := (= #337 0::Int)
#57 := (mod #35 #23)
#334 := (* -1::Int #57)
#335 := (+ #56 #334)
#336 := (= #335 0::Int)
#174 := (<= #23 0::Int)
#181 := (>= #35 0::Int)
#281 := (or #181 #174)
#282 := (not #281)
#170 := (<= #35 0::Int)
#279 := (or #170 #174)
#280 := (not #279)
#285 := (or #280 #282)
#339 := (if #285 #336 #338)
#333 := (= #56 0::Int)
#38 := (= #35 0::Int)
#340 := (if #38 #333 #339)
#332 := (= #56 #35)
#39 := (= #23 0::Int)
#341 := (if #39 #332 #340)
#850 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #849) #341)
#344 := (forall (vars (?v0 Int) (?v1 Int)) #341)
#853 := (iff #344 #850)
#851 := (iff #341 #341)
#852 := [refl]: #851
#854 := [quant-intro #852]: #853
#213 := (* -1::Int #207)
#301 := (if #285 #57 #213)
#304 := (if #38 0::Int #301)
#307 := (if #39 #35 #304)
#310 := (= #56 #307)
#313 := (forall (vars (?v0 Int) (?v1 Int)) #310)
#345 := (iff #313 #344)
#342 := (iff #310 #341)
#343 := [rewrite]: #342
#346 := [quant-intro #343]: #345
#175 := (not #174)
#182 := (not #181)
#185 := (and #182 #175)
#171 := (not #170)
#178 := (and #171 #175)
#188 := (or #178 #185)
#233 := (if #188 #57 #213)
#236 := (if #38 0::Int #233)
#239 := (if #39 #35 #236)
#242 := (= #56 #239)
#245 := (forall (vars (?v0 Int) (?v1 Int)) #242)
#314 := (iff #245 #313)
#311 := (iff #242 #310)
#308 := (= #239 #307)
#305 := (= #236 #304)
#302 := (= #233 #301)
#286 := (iff #188 #285)
#283 := (iff #185 #282)
#284 := [rewrite]: #283
#264 := (iff #178 #280)
#265 := [rewrite]: #264
#287 := [monotonicity #265 #284]: #286
#303 := [monotonicity #287]: #302
#306 := [monotonicity #303]: #305
#309 := [monotonicity #306]: #308
#312 := [monotonicity #309]: #311
#315 := [quant-intro #312]: #314
#262 := (~ #245 #245)
#276 := (~ #242 #242)
#277 := [refl]: #276
#263 := [nnf-pos #277]: #262
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#248 := (iff #64 #245)
#218 := (if #46 #57 #213)
#221 := (if #38 0::Int #218)
#224 := (if #39 #35 #221)
#227 := (= #56 #224)
#230 := (forall (vars (?v0 Int) (?v1 Int)) #227)
#246 := (iff #230 #245)
#243 := (iff #227 #242)
#240 := (= #224 #239)
#237 := (= #221 #236)
#234 := (= #218 #233)
#189 := (iff #46 #188)
#186 := (iff #45 #185)
#176 := (iff #42 #175)
#177 := [rewrite]: #176
#183 := (iff #44 #182)
#184 := [rewrite]: #183
#187 := [monotonicity #184 #177]: #186
#179 := (iff #43 #178)
#172 := (iff #41 #171)
#173 := [rewrite]: #172
#180 := [monotonicity #173 #177]: #179
#190 := [monotonicity #180 #187]: #189
#235 := [monotonicity #190]: #234
#238 := [monotonicity #235]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [quant-intro #244]: #246
#231 := (iff #64 #230)
#228 := (iff #63 #227)
#225 := (= #62 #224)
#222 := (= #61 #221)
#219 := (= #60 #218)
#216 := (= #59 #213)
#210 := (- #207)
#214 := (= #210 #213)
#215 := [rewrite]: #214
#211 := (= #59 #210)
#208 := (= #58 #207)
#153 := (= #49 #152)
#154 := [rewrite]: #153
#150 := (= #48 #149)
#151 := [rewrite]: #150
#209 := [monotonicity #151 #154]: #208
#212 := [monotonicity #209]: #211
#217 := [trans #212 #215]: #216
#220 := [monotonicity #217]: #219
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#249 := [trans #232 #247]: #248
#206 := [asserted]: #64
#250 := [mp #206 #249]: #245
#278 := [mp~ #250 #263]: #245
#316 := [mp #278 #315]: #313
#347 := [mp #316 #346]: #344
#855 := [mp #347 #854]: #850
#775 := (not #850)
#780 := (or #775 #786)
#815 := (* -1::Int 3::Int)
#821 := (mod #820 #815)
#811 := (+ #13 #821)
#471 := (= #811 0::Int)
#479 := (<= 3::Int 0::Int)
#603 := (or #473 #479)
#810 := (not #603)
#814 := (or #500 #479)
#816 := (not #814)
#484 := (or #816 #810)
#476 := (if #484 #819 #471)
#812 := (if #499 #496 #476)
#495 := (= #13 #10)
#494 := (= 3::Int 0::Int)
#472 := (if #494 #495 #812)
#781 := (or #775 #472)
#782 := (iff #781 #780)
#624 := (iff #780 #780)
#625 := [rewrite]: #624
#779 := (iff #472 #786)
#787 := (if false #495 #786)
#777 := (iff #787 #786)
#778 := [rewrite]: #777
#784 := (iff #472 #787)
#501 := (iff #812 #786)
#507 := (iff #476 #506)
#504 := (iff #471 #794)
#793 := (= #811 #789)
#514 := (= #821 #792)
#415 := (= #815 -3::Int)
#791 := [rewrite]: #415
#515 := [monotonicity #791]: #514
#790 := [monotonicity #515]: #793
#505 := [monotonicity #790]: #504
#519 := (iff #484 #518)
#795 := (iff #810 #809)
#808 := (iff #603 #473)
#442 := (or #473 false)
#447 := (iff #442 #473)
#448 := [rewrite]: #447
#805 := (iff #603 #442)
#797 := (iff #479 false)
#460 := [rewrite]: #797
#807 := [monotonicity #460]: #805
#806 := [trans #807 #448]: #808
#796 := [monotonicity #806]: #795
#798 := (iff #816 #803)
#801 := (iff #814 #500)
#461 := (or #500 false)
#799 := (iff #461 #500)
#800 := [rewrite]: #799
#462 := (iff #814 #461)
#463 := [monotonicity #460]: #462
#802 := [trans #463 #800]: #801
#804 := [monotonicity #802]: #798
#520 := [monotonicity #804 #796]: #519
#785 := [monotonicity #520 #505]: #507
#783 := [monotonicity #785]: #501
#813 := (iff #494 false)
#456 := [rewrite]: #813
#788 := [monotonicity #456 #783]: #784
#774 := [trans #788 #778]: #779
#623 := [monotonicity #774]: #782
#767 := [trans #623 #625]: #782
#776 := [quant-inst #10 #12]: #781
#768 := [mp #776 #767]: #780
#690 := [unit-resolution #768 #855]: #786
#755 := (not #499)
#752 := (not #786)
#677 := (or #752 #755)
#651 := (not #496)
#769 := (<= #13 0::Int)
#696 := (not #769)
#89 := (>= #13 3::Int)
#14 := (< #13 3::Int)
#15 := (not #14)
#96 := (iff #15 #89)
#87 := (not #89)
#91 := (not #87)
#94 := (iff #91 #89)
#95 := [rewrite]: #94
#92 := (iff #15 #91)
#88 := (iff #14 #87)
#90 := [rewrite]: #88
#93 := [monotonicity #90]: #92
#97 := [trans #93 #95]: #96
#84 := [asserted]: #15
#98 := [mp #84 #97]: #89
#669 := (or #696 #87)
#670 := [th-lemma arith farkas 1 1]: #669
#671 := [unit-resolution #670 #98]: #696
#564 := (or #651 #769)
#675 := [th-lemma arith triangle-eq]: #564
#676 := [unit-resolution #675 #671]: #651
#640 := (or #752 #755 #496)
#655 := [def-axiom]: #640
#682 := [unit-resolution #655 #676]: #677
#678 := [unit-resolution #682 #690]: #755
#657 := (or #752 #499 #506)
#658 := [def-axiom]: #657
#679 := [unit-resolution #658 #678 #690]: #506
decl f9 :: (-> S6 Int S5)
decl f10 :: S6
#16 := f10
#409 := (f9 f10 #10)
#663 := (f6 f7 #409)
#756 := (= #663 0::Int)
#612 := (not #756)
#667 := (iff #755 #612)
#686 := (iff #499 #756)
#685 := (iff #756 #499)
#683 := (= #663 #10)
#493 := (= #409 f8)
#17 := (:var 0 S5)
#18 := (f6 f7 #17)
#822 := (pattern #18)
#19 := (f9 f10 #18)
#20 := (= #19 #17)
#823 := (forall (vars (?v0 S5)) (:pat #822) #20)
#21 := (forall (vars (?v0 S5)) #20)
#826 := (iff #21 #823)
#824 := (iff #20 #20)
#825 := [refl]: #824
#827 := [quant-intro #825]: #826
#268 := (~ #21 #21)
#266 := (~ #20 #20)
#267 := [refl]: #266
#269 := [nnf-pos #267]: #268
#85 := [asserted]: #21
#254 := [mp~ #85 #269]: #21
#828 := [mp #254 #827]: #823
#486 := (not #823)
#497 := (or #486 #493)
#498 := [quant-inst #9]: #497
#680 := [unit-resolution #498 #828]: #493
#684 := [monotonicity #680]: #683
#681 := [monotonicity #684]: #685
#666 := [symm #681]: #686
#648 := [monotonicity #666]: #667
#672 := [mp #678 #648]: #612
#753 := (or #473 #756)
#25 := (f9 f10 #23)
#829 := (pattern #25)
#26 := (f6 f7 #25)
#31 := (= #26 0::Int)
#108 := (>= #23 0::Int)
#138 := (or #108 #31)
#836 := (forall (vars (?v0 Int)) (:pat #829) #138)
#141 := (forall (vars (?v0 Int)) #138)
#839 := (iff #141 #836)
#837 := (iff #138 #138)
#838 := [refl]: #837
#840 := [quant-intro #838]: #839
#258 := (~ #141 #141)
#270 := (~ #138 #138)
#271 := [refl]: #270
#259 := [nnf-pos #271]: #258
#30 := (< #23 0::Int)
#32 := (implies #30 #31)
#33 := (forall (vars (?v0 Int)) #32)
#144 := (iff #33 #141)
#122 := (not #30)
#123 := (or #122 #31)
#126 := (forall (vars (?v0 Int)) #123)
#142 := (iff #126 #141)
#139 := (iff #123 #138)
#136 := (iff #122 #108)
#109 := (not #108)
#131 := (not #109)
#134 := (iff #131 #108)
#135 := [rewrite]: #134
#132 := (iff #122 #131)
#129 := (iff #30 #109)
#130 := [rewrite]: #129
#133 := [monotonicity #130]: #132
#137 := [trans #133 #135]: #136
#140 := [monotonicity #137]: #139
#143 := [quant-intro #140]: #142
#127 := (iff #33 #126)
#124 := (iff #32 #123)
#125 := [rewrite]: #124
#128 := [quant-intro #125]: #127
#145 := [trans #128 #143]: #144
#121 := [asserted]: #33
#146 := [mp #121 #145]: #141
#272 := [mp~ #146 #259]: #141
#841 := [mp #272 #840]: #836
#746 := (not #836)
#738 := (or #746 #473 #756)
#735 := (or #746 #753)
#747 := (iff #735 #738)
#748 := [rewrite]: #747
#737 := [quant-inst #10]: #735
#749 := [mp #737 #748]: #738
#673 := [unit-resolution #749 #841]: #753
#668 := [unit-resolution #673 #672]: #473
#674 := (or #499 #803 #809)
#642 := [th-lemma arith triangle-eq]: #674
#649 := [unit-resolution #642 #678]: #518
#608 := [unit-resolution #649 #668]: #803
#764 := (or #518 #500)
#765 := [def-axiom]: #764
#639 := [unit-resolution #765 #608]: #518
#766 := (not #518)
#761 := (not #506)
#762 := (or #761 #766 #819)
#760 := [def-axiom]: #762
#641 := [unit-resolution #760 #639 #679]: #819
#646 := (not #819)
#643 := (or #646 #604)
#650 := [th-lemma arith triangle-eq]: #643
#652 := [unit-resolution #650 #641]: #604
[th-lemma arith farkas -1 1 1 #98 #652 #695]: false
unsat
1311ced639549b32ffab57e57f403189256df4d9 590 0
#2 := false
#13 := 3::Int
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#10 := f10
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
#458 := (mod #11 3::Int)
#638 := (>= #458 3::Int)
#639 := (not #638)
#1 := true
#85 := [true-axiom]: true
#629 := (or false #639)
#599 := [th-lemma arith]: #629
#600 := [unit-resolution #599 #85]: #639
#94 := (>= #11 3::Int)
#92 := (not #94)
#522 := [hypothesis]: #92
#25 := 0::Int
#706 := (div #11 3::Int)
#633 := -3::Int
#696 := (* -3::Int #706)
#158 := -1::Int
#818 := (* -1::Int #458)
#676 := (+ #818 #696)
#622 := (+ #11 #676)
#678 := (<= #622 0::Int)
#691 := (= #622 0::Int)
#601 := (or false #691)
#602 := [th-lemma arith]: #601
#604 := [unit-resolution #602 #85]: #691
#605 := (not #691)
#606 := (or #605 #678)
#449 := [th-lemma arith triangle-eq]: #606
#607 := [unit-resolution #449 #604]: #678
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 3::Int)
#816 := (+ #14 #818)
#767 := (<= #816 0::Int)
#819 := (= #816 0::Int)
#810 := (= #11 0::Int)
#753 := (not #810)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#15 := (f3 f4 #14)
#16 := (= #15 f10)
#88 := (not #16)
#509 := (or #88 #94)
#99 := (iff #16 #94)
#17 := (< #11 3::Int)
#18 := (iff #16 #17)
#19 := (not #18)
#104 := (iff #19 #99)
#89 := (iff #88 #17)
#102 := (iff #89 #99)
#96 := (iff #88 #92)
#100 := (iff #96 #99)
#101 := [rewrite]: #100
#97 := (iff #89 #96)
#93 := (iff #17 #92)
#95 := [rewrite]: #93
#98 := [monotonicity #95]: #97
#103 := [trans #98 #101]: #102
#90 := (iff #19 #89)
#91 := [rewrite]: #90
#105 := [trans #91 #103]: #104
#87 := [asserted]: #19
#106 := [mp #87 #105]: #99
#419 := (not #99)
#507 := (or #88 #94 #419)
#508 := [def-axiom]: #507
#506 := [unit-resolution #508 #106]: #509
#513 := [unit-resolution #506 #522]: #88
#705 := (or #753 #16)
#510 := (f3 f4 #11)
#489 := (= #510 f10)
#20 := (:var 0 S3)
#21 := (f8 f9 #20)
#832 := (pattern #21)
#22 := (f3 f4 #21)
#23 := (= #22 #20)
#833 := (forall (vars (?v0 S3)) (:pat #832) #23)
#24 := (forall (vars (?v0 S3)) #23)
#836 := (iff #24 #833)
#834 := (iff #23 #23)
#835 := [refl]: #834
#837 := [quant-intro #835]: #836
#278 := (~ #24 #24)
#276 := (~ #23 #23)
#277 := [refl]: #276
#279 := [nnf-pos #277]: #278
#107 := [asserted]: #24
#264 := [mp~ #107 #279]: #24
#838 := [mp #264 #837]: #833
#483 := (not #833)
#613 := (or #483 #489)
#820 := [quant-inst #10]: #613
#712 := [unit-resolution #820 #838]: #489
#699 := (= #15 #510)
#823 := (= #14 #11)
#701 := (= 0::Int #11)
#713 := [hypothesis]: #810
#697 := [symm #713]: #701
#811 := (= #14 0::Int)
#714 := (or #753 #811)
#805 := (* -1::Int #11)
#777 := (mod #805 -3::Int)
#780 := (+ #14 #777)
#781 := (= #780 0::Int)
#452 := (>= #11 0::Int)
#784 := (not #452)
#812 := (<= #11 0::Int)
#795 := (not #812)
#791 := (or #795 #784)
#783 := (if #791 #819 #781)
#615 := (if #810 #811 #783)
#26 := (:var 0 Int)
#38 := (:var 1 Int)
#58 := (f6 f7 #38)
#59 := (f5 #58 #26)
#859 := (pattern #59)
#162 := (* -1::Int #26)
#159 := (* -1::Int #38)
#217 := (mod #159 #162)
#347 := (+ #59 #217)
#348 := (= #347 0::Int)
#60 := (mod #38 #26)
#344 := (* -1::Int #60)
#345 := (+ #59 #344)
#346 := (= #345 0::Int)
#184 := (<= #26 0::Int)
#191 := (>= #38 0::Int)
#291 := (or #191 #184)
#292 := (not #291)
#180 := (<= #38 0::Int)
#289 := (or #180 #184)
#290 := (not #289)
#295 := (or #290 #292)
#349 := (if #295 #346 #348)
#343 := (= #59 0::Int)
#41 := (= #38 0::Int)
#350 := (if #41 #343 #349)
#342 := (= #59 #38)
#42 := (= #26 0::Int)
#351 := (if #42 #342 #350)
#860 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #859) #351)
#354 := (forall (vars (?v0 Int) (?v1 Int)) #351)
#863 := (iff #354 #860)
#861 := (iff #351 #351)
#862 := [refl]: #861
#864 := [quant-intro #862]: #863
#223 := (* -1::Int #217)
#311 := (if #295 #60 #223)
#314 := (if #41 0::Int #311)
#317 := (if #42 #38 #314)
#320 := (= #59 #317)
#323 := (forall (vars (?v0 Int) (?v1 Int)) #320)
#355 := (iff #323 #354)
#352 := (iff #320 #351)
#353 := [rewrite]: #352
#356 := [quant-intro #353]: #355
#185 := (not #184)
#192 := (not #191)
#195 := (and #192 #185)
#181 := (not #180)
#188 := (and #181 #185)
#198 := (or #188 #195)
#243 := (if #198 #60 #223)
#246 := (if #41 0::Int #243)
#249 := (if #42 #38 #246)
#252 := (= #59 #249)
#255 := (forall (vars (?v0 Int) (?v1 Int)) #252)
#324 := (iff #255 #323)
#321 := (iff #252 #320)
#318 := (= #249 #317)
#315 := (= #246 #314)
#312 := (= #243 #311)
#296 := (iff #198 #295)
#293 := (iff #195 #292)
#294 := [rewrite]: #293
#274 := (iff #188 #290)
#275 := [rewrite]: #274
#297 := [monotonicity #275 #294]: #296
#313 := [monotonicity #297]: #312
#316 := [monotonicity #313]: #315
#319 := [monotonicity #316]: #318
#322 := [monotonicity #319]: #321
#325 := [quant-intro #322]: #324
#272 := (~ #255 #255)
#286 := (~ #252 #252)
#287 := [refl]: #286
#273 := [nnf-pos #287]: #272
#52 := (- #26)
#51 := (- #38)
#61 := (mod #51 #52)
#62 := (- #61)
#45 := (< 0::Int #26)
#47 := (< #38 0::Int)
#48 := (and #47 #45)
#44 := (< 0::Int #38)
#46 := (and #44 #45)
#49 := (or #46 #48)
#63 := (if #49 #60 #62)
#64 := (if #41 0::Int #63)
#65 := (if #42 #38 #64)
#66 := (= #59 #65)
#67 := (forall (vars (?v0 Int) (?v1 Int)) #66)
#258 := (iff #67 #255)
#228 := (if #49 #60 #223)
#231 := (if #41 0::Int #228)
#234 := (if #42 #38 #231)
#237 := (= #59 #234)
#240 := (forall (vars (?v0 Int) (?v1 Int)) #237)
#256 := (iff #240 #255)
#253 := (iff #237 #252)
#250 := (= #234 #249)
#247 := (= #231 #246)
#244 := (= #228 #243)
#199 := (iff #49 #198)
#196 := (iff #48 #195)
#186 := (iff #45 #185)
#187 := [rewrite]: #186
#193 := (iff #47 #192)
#194 := [rewrite]: #193
#197 := [monotonicity #194 #187]: #196
#189 := (iff #46 #188)
#182 := (iff #44 #181)
#183 := [rewrite]: #182
#190 := [monotonicity #183 #187]: #189
#200 := [monotonicity #190 #197]: #199
#245 := [monotonicity #200]: #244
#248 := [monotonicity #245]: #247
#251 := [monotonicity #248]: #250
#254 := [monotonicity #251]: #253
#257 := [quant-intro #254]: #256
#241 := (iff #67 #240)
#238 := (iff #66 #237)
#235 := (= #65 #234)
#232 := (= #64 #231)
#229 := (= #63 #228)
#226 := (= #62 #223)
#220 := (- #217)
#224 := (= #220 #223)
#225 := [rewrite]: #224
#221 := (= #62 #220)
#218 := (= #61 #217)
#163 := (= #52 #162)
#164 := [rewrite]: #163
#160 := (= #51 #159)
#161 := [rewrite]: #160
#219 := [monotonicity #161 #164]: #218
#222 := [monotonicity #219]: #221
#227 := [trans #222 #225]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [quant-intro #239]: #241
#259 := [trans #242 #257]: #258
#216 := [asserted]: #67
#260 := [mp #216 #259]: #255
#288 := [mp~ #260 #273]: #255
#326 := [mp #288 #325]: #323
#357 := [mp #326 #356]: #354
#865 := [mp #357 #864]: #860
#616 := (not #860)
#764 := (or #616 #615)
#806 := (* -1::Int 3::Int)
#528 := (mod #805 #806)
#529 := (+ #14 #528)
#530 := (= #529 0::Int)
#813 := (<= 3::Int 0::Int)
#815 := (or #452 #813)
#817 := (not #815)
#808 := (or #812 #813)
#814 := (not #808)
#457 := (or #814 #817)
#531 := (if #457 #819 #530)
#425 := (if #810 #811 #531)
#482 := (= 3::Int 0::Int)
#801 := (if #482 #823 #425)
#666 := (or #616 #801)
#762 := (iff #666 #764)
#650 := (iff #764 #764)
#665 := [rewrite]: #650
#656 := (iff #801 #615)
#771 := (if false #823 #615)
#773 := (iff #771 #615)
#655 := [rewrite]: #773
#772 := (iff #801 #771)
#768 := (iff #425 #615)
#612 := (iff #531 #783)
#782 := (iff #530 #781)
#774 := (= #529 #780)
#778 := (= #528 #777)
#634 := (= #806 -3::Int)
#635 := [rewrite]: #634
#779 := [monotonicity #635]: #778
#775 := [monotonicity #779]: #774
#776 := [monotonicity #775]: #782
#786 := (iff #457 #791)
#785 := (iff #817 #784)
#788 := (iff #815 #452)
#793 := (or #452 false)
#798 := (iff #793 #452)
#787 := [rewrite]: #798
#797 := (iff #815 #793)
#525 := (iff #813 false)
#799 := [rewrite]: #525
#794 := [monotonicity #799]: #797
#789 := [trans #794 #787]: #788
#790 := [monotonicity #789]: #785
#796 := (iff #814 #795)
#516 := (iff #808 #812)
#803 := (or #812 false)
#514 := (iff #803 #812)
#515 := [rewrite]: #514
#800 := (iff #808 #803)
#804 := [monotonicity #799]: #800
#517 := [trans #804 #515]: #516
#511 := [monotonicity #517]: #796
#792 := [monotonicity #511 #790]: #786
#614 := [monotonicity #792 #776]: #612
#769 := [monotonicity #614]: #768
#802 := (iff #482 false)
#524 := [rewrite]: #802
#770 := [monotonicity #524 #769]: #772
#657 := [trans #770 #655]: #656
#765 := [monotonicity #657]: #762
#667 := [trans #765 #665]: #762
#761 := [quant-inst #11 #13]: #666
#668 := [mp #761 #667]: #764
#722 := [unit-resolution #668 #865]: #615
#746 := (not #615)
#737 := (or #746 #753 #811)
#738 := [def-axiom]: #737
#709 := [unit-resolution #738 #722]: #714
#715 := [unit-resolution #709 #713]: #811
#698 := [trans #715 #697]: #823
#702 := [monotonicity #698]: #699
#703 := [trans #702 #712]: #16
#711 := [hypothesis]: #88
#704 := [unit-resolution #711 #703]: false
#700 := [lemma #704]: #705
#523 := [unit-resolution #700 #513]: #753
#708 := (or #810 #819)
#735 := [hypothesis]: #753
#673 := (not #791)
#755 := (not #819)
#732 := [hypothesis]: #755
#723 := (or #810 #783)
#740 := (or #746 #810 #783)
#741 := [def-axiom]: #740
#724 := [unit-resolution #741 #722]: #723
#725 := [unit-resolution #724 #735]: #783
#745 := (not #783)
#747 := (or #745 #673 #819)
#757 := [def-axiom]: #747
#726 := [unit-resolution #757 #725 #732]: #673
#669 := (or #791 #812)
#670 := [def-axiom]: #669
#727 := [unit-resolution #670 #726]: #812
#671 := (or #791 #452)
#672 := [def-axiom]: #671
#728 := [unit-resolution #672 #726]: #452
#718 := (or #810 #795 #784)
#729 := [th-lemma arith triangle-eq]: #718
#707 := [unit-resolution #729 #728 #727 #735]: false
#710 := [lemma #707]: #708
#490 := [unit-resolution #710 #523]: #819
#492 := (or #755 #767)
#493 := [th-lemma arith triangle-eq]: #492
#484 := [unit-resolution #493 #490]: #767
#370 := 1::Int
#597 := -2::Int
#526 := (* -2::Int #706)
#535 := (+ #818 #526)
#536 := (+ #11 #535)
#527 := (>= #536 1::Int)
#609 := (* -1::Int #14)
#610 := (+ #11 #609)
#617 := (<= #610 0::Int)
#502 := (not #617)
#648 := (= #11 #14)
#626 := (not #648)
#627 := (or #626 #16)
#620 := [hypothesis]: #648
#621 := [symm #620]: #823
#623 := [monotonicity #621]: #699
#624 := [trans #623 #712]: #16
#625 := [unit-resolution #711 #624]: false
#628 := [lemma #625]: #627
#475 := [unit-resolution #628 #513]: #626
#619 := (>= #610 0::Int)
#611 := (>= #706 0::Int)
#731 := (f8 f9 #510)
#733 := (= #731 0::Int)
#461 := (not #733)
#463 := (iff #753 #461)
#468 := (iff #810 #733)
#478 := (iff #733 #810)
#476 := (= #731 #11)
#477 := [monotonicity #712]: #476
#479 := [monotonicity #477]: #478
#480 := [symm #479]: #468
#464 := [monotonicity #480]: #463
#462 := [mp #523 #464]: #461
#734 := (or #452 #733)
#28 := (f3 f4 #26)
#839 := (pattern #28)
#29 := (f8 f9 #28)
#34 := (= #29 0::Int)
#118 := (>= #26 0::Int)
#148 := (or #118 #34)
#846 := (forall (vars (?v0 Int)) (:pat #839) #148)
#151 := (forall (vars (?v0 Int)) #148)
#849 := (iff #151 #846)
#847 := (iff #148 #148)
#848 := [refl]: #847
#850 := [quant-intro #848]: #849
#268 := (~ #151 #151)
#280 := (~ #148 #148)
#281 := [refl]: #280
#269 := [nnf-pos #281]: #268
#33 := (< #26 0::Int)
#35 := (implies #33 #34)
#36 := (forall (vars (?v0 Int)) #35)
#154 := (iff #36 #151)
#132 := (not #33)
#133 := (or #132 #34)
#136 := (forall (vars (?v0 Int)) #133)
#152 := (iff #136 #151)
#149 := (iff #133 #148)
#146 := (iff #132 #118)
#119 := (not #118)
#141 := (not #119)
#144 := (iff #141 #118)
#145 := [rewrite]: #144
#142 := (iff #132 #141)
#139 := (iff #33 #119)
#140 := [rewrite]: #139
#143 := [monotonicity #140]: #142
#147 := [trans #143 #145]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#137 := (iff #36 #136)
#134 := (iff #35 #133)
#135 := [rewrite]: #134
#138 := [quant-intro #135]: #137
#155 := [trans #138 #153]: #154
#131 := [asserted]: #36
#156 := [mp #131 #155]: #151
#282 := [mp~ #156 #269]: #151
#851 := [mp #282 #850]: #846
#466 := (not #846)
#736 := (or #466 #452 #733)
#716 := (or #466 #734)
#719 := (iff #716 #736)
#720 := [rewrite]: #719
#717 := [quant-inst #11]: #716
#721 := [mp #717 #720]: #736
#465 := [unit-resolution #721 #851]: #734
#453 := [unit-resolution #465 #462]: #452
#594 := (or #611 #784)
#603 := (not #611)
#608 := [hypothesis]: #603
#587 := [hypothesis]: #452
#590 := [th-lemma arith farkas 1 3 1 1 #587 #608 #607 #600]: false
#596 := [lemma #590]: #594
#455 := [unit-resolution #596 #453]: #611
#557 := (not #767)
#565 := (or #619 #557 #603)
#570 := (not #619)
#571 := [hypothesis]: #570
#684 := (>= #622 0::Int)
#560 := (or #605 #684)
#561 := [th-lemma arith triangle-eq]: #560
#562 := [unit-resolution #561 #604]: #684
#563 := [hypothesis]: #611
#572 := [hypothesis]: #767
#564 := [th-lemma arith farkas 1 -3 -1 1 #572 #563 #562 #571]: false
#566 := [lemma #564]: #565
#456 := [unit-resolution #566 #484 #455]: #619
#459 := (or #648 #502 #570)
#454 := [th-lemma arith triangle-eq]: #459
#460 := [unit-resolution #454 #456 #475]: #502
#754 := (>= #816 0::Int)
#435 := (or #755 #754)
#439 := [th-lemma arith triangle-eq]: #435
#440 := [unit-resolution #439 #490]: #754
#467 := (not #754)
#469 := (or #527 #467 #617)
#499 := (not #527)
#491 := [hypothesis]: #499
#485 := [hypothesis]: #502
#487 := [hypothesis]: #754
#488 := [th-lemma arith farkas -1/3 -1/3 -2/3 1 #487 #485 #562 #491]: false
#474 := [lemma #488]: #469
#445 := [unit-resolution #474 #440 #460]: #527
#824 := (>= #14 0::Int)
#652 := (>= #458 0::Int)
#447 := (or false #652)
#448 := [th-lemma arith]: #447
#450 := [unit-resolution #448 #85]: #652
#446 := (not #652)
#451 := (or #824 #446 #467)
#434 := [th-lemma arith assign-bounds 1 1]: #451
#437 := [unit-resolution #434 #440 #450]: #824
#438 := [th-lemma arith farkas -1 -3 1 2 1 #437 #445 #484 #607 #522]: false
#441 := [lemma #438]: #94
#494 := (f8 f9 #15)
#495 := (= #494 #14)
#423 := (iff #495 #648)
#420 := (= #494 #11)
#505 := (or #16 #92)
#503 := (or #16 #92 #419)
#504 := [def-axiom]: #503
#496 := [unit-resolution #504 #106]: #505
#433 := [unit-resolution #496 #441]: #16
#422 := [monotonicity #433]: #420
#421 := [monotonicity #422]: #423
#442 := (or #795 #92)
#443 := [th-lemma arith farkas 1 1]: #442
#436 := [unit-resolution #443 #441]: #795
#444 := (or #753 #812)
#429 := [th-lemma arith triangle-eq]: #444
#426 := [unit-resolution #429 #436]: #753
#427 := [unit-resolution #710 #426]: #819
#430 := [unit-resolution #439 #427]: #754
#431 := [unit-resolution #434 #430 #450]: #824
#826 := (not #824)
#827 := (or #826 #495)
#30 := (= #29 #26)
#122 := (or #119 #30)
#840 := (forall (vars (?v0 Int)) (:pat #839) #122)
#125 := (forall (vars (?v0 Int)) #122)
#843 := (iff #125 #840)
#841 := (iff #122 #122)
#842 := [refl]: #841
#844 := [quant-intro #842]: #843
#266 := (~ #125 #125)
#265 := (~ #122 #122)
#262 := [refl]: #265
#267 := [nnf-pos #262]: #266
#27 := (<= 0::Int #26)
#31 := (implies #27 #30)
#32 := (forall (vars (?v0 Int)) #31)
#128 := (iff #32 #125)
#109 := (not #27)
#110 := (or #109 #30)
#113 := (forall (vars (?v0 Int)) #110)
#126 := (iff #113 #125)
#123 := (iff #110 #122)
#120 := (iff #109 #119)
#116 := (iff #27 #118)
#117 := [rewrite]: #116
#121 := [monotonicity #117]: #120
#124 := [monotonicity #121]: #123
#127 := [quant-intro #124]: #126
#114 := (iff #32 #113)
#111 := (iff #31 #110)
#112 := [rewrite]: #111
#115 := [quant-intro #112]: #114
#129 := [trans #115 #127]: #128
#108 := [asserted]: #32
#130 := [mp #108 #129]: #125
#263 := [mp~ #130 #267]: #125
#845 := [mp #263 #844]: #840
#830 := (not #840)
#825 := (or #830 #826 #495)
#831 := (or #830 #827)
#481 := (iff #831 #825)
#486 := [rewrite]: #481
#821 := [quant-inst #14]: #831
#822 := [mp #821 #486]: #825
#432 := [unit-resolution #822 #845]: #827
#428 := [unit-resolution #432 #431]: #495
#424 := [mp #428 #421]: #648
#866 := (or #626 #617)
#867 := [th-lemma arith triangle-eq]: #866
#868 := [unit-resolution #867 #424]: #617
#869 := [unit-resolution #493 #427]: #767
[th-lemma arith farkas 1 1 -1 1 #869 #868 #441 #600]: false
unsat
9d3396d381ad41e645649796d61e70c5401ede3a 761 0
#2 := false
#28 := 0::Int
decl f9 :: (-> S6 S2 Int)
decl f3 :: S2
#7 := f3
decl f10 :: S6
#10 := f10
#11 := (f9 f10 f3)
#804 := (>= #11 0::Int)
#780 := (not #804)
#816 := (<= #11 0::Int)
#631 := (not #816)
#610 := (or #631 #780)
#753 := (not #610)
#471 := (= #11 0::Int)
#730 := (not #471)
decl f4 :: (-> S3 Int S2)
decl f6 :: (-> S4 Int Int)
#13 := 1::Int
decl f7 :: (-> S5 Int S4)
decl f11 :: S5
#16 := f11
#17 := (f7 f11 #11)
#18 := (f6 #17 1::Int)
decl f8 :: S5
#9 := f8
#12 := (f7 f8 #11)
#14 := (f6 #12 1::Int)
#92 := (+ #14 #18)
decl f5 :: S3
#8 := f5
#95 := (f4 f5 #92)
#98 := (= f3 #95)
#507 := (f9 f10 #95)
#465 := (f4 f5 #507)
#467 := (= #465 #95)
#23 := (:var 0 S2)
#24 := (f9 f10 #23)
#830 := (pattern #24)
#25 := (f4 f5 #24)
#26 := (= #25 #23)
#831 := (forall (vars (?v0 S2)) (:pat #830) #26)
#27 := (forall (vars (?v0 S2)) #26)
#834 := (iff #27 #831)
#832 := (iff #26 #26)
#833 := [refl]: #832
#835 := [quant-intro #833]: #834
#276 := (~ #27 #27)
#274 := (~ #26 #26)
#275 := [refl]: #274
#277 := [nnf-pos #275]: #276
#104 := [asserted]: #27
#262 := [mp~ #104 #277]: #27
#836 := [mp #262 #835]: #831
#494 := (not #831)
#908 := (or #494 #467)
#909 := [quant-inst #95]: #908
#952 := [unit-resolution #909 #836]: #467
#959 := (= f3 #465)
#417 := (f4 f5 #11)
#957 := (= #417 #465)
#955 := (= #465 #417)
#950 := (= #507 #11)
#948 := (= 0::Int #11)
#906 := [hypothesis]: #471
#949 := [symm #906]: #948
#469 := (= #507 0::Int)
#815 := (>= #507 0::Int)
#673 := (>= #18 0::Int)
#724 := (= #18 0::Int)
#907 := (or #730 #724)
#156 := -1::Int
#522 := (* -1::Int #11)
#744 := (mod #522 -1::Int)
#685 := (+ #18 #744)
#687 := (= #685 0::Int)
#692 := (if #610 #724 #687)
#694 := (if #471 #724 #692)
#29 := (:var 0 Int)
#40 := (:var 1 Int)
#60 := (f7 f11 #40)
#61 := (f6 #60 #29)
#857 := (pattern #61)
#160 := (* -1::Int #29)
#157 := (* -1::Int #40)
#215 := (mod #157 #160)
#345 := (+ #61 #215)
#346 := (= #345 0::Int)
#62 := (mod #40 #29)
#342 := (* -1::Int #62)
#343 := (+ #61 #342)
#344 := (= #343 0::Int)
#182 := (<= #29 0::Int)
#189 := (>= #40 0::Int)
#289 := (or #189 #182)
#290 := (not #289)
#178 := (<= #40 0::Int)
#287 := (or #178 #182)
#288 := (not #287)
#293 := (or #288 #290)
#347 := (if #293 #344 #346)
#341 := (= #61 0::Int)
#43 := (= #40 0::Int)
#348 := (if #43 #341 #347)
#340 := (= #61 #40)
#44 := (= #29 0::Int)
#349 := (if #44 #340 #348)
#858 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #857) #349)
#352 := (forall (vars (?v0 Int) (?v1 Int)) #349)
#861 := (iff #352 #858)
#859 := (iff #349 #349)
#860 := [refl]: #859
#862 := [quant-intro #860]: #861
#221 := (* -1::Int #215)
#309 := (if #293 #62 #221)
#312 := (if #43 0::Int #309)
#315 := (if #44 #40 #312)
#318 := (= #61 #315)
#321 := (forall (vars (?v0 Int) (?v1 Int)) #318)
#353 := (iff #321 #352)
#350 := (iff #318 #349)
#351 := [rewrite]: #350
#354 := [quant-intro #351]: #353
#183 := (not #182)
#190 := (not #189)
#193 := (and #190 #183)
#179 := (not #178)
#186 := (and #179 #183)
#196 := (or #186 #193)
#241 := (if #196 #62 #221)
#244 := (if #43 0::Int #241)
#247 := (if #44 #40 #244)
#250 := (= #61 #247)
#253 := (forall (vars (?v0 Int) (?v1 Int)) #250)
#322 := (iff #253 #321)
#319 := (iff #250 #318)
#316 := (= #247 #315)
#313 := (= #244 #312)
#310 := (= #241 #309)
#294 := (iff #196 #293)
#291 := (iff #193 #290)
#292 := [rewrite]: #291
#272 := (iff #186 #288)
#273 := [rewrite]: #272
#295 := [monotonicity #273 #292]: #294
#311 := [monotonicity #295]: #310
#314 := [monotonicity #311]: #313
#317 := [monotonicity #314]: #316
#320 := [monotonicity #317]: #319
#323 := [quant-intro #320]: #322
#270 := (~ #253 #253)
#284 := (~ #250 #250)
#285 := [refl]: #284
#271 := [nnf-pos #285]: #270
#54 := (- #29)
#53 := (- #40)
#63 := (mod #53 #54)
#64 := (- #63)
#47 := (< 0::Int #29)
#49 := (< #40 0::Int)
#50 := (and #49 #47)
#46 := (< 0::Int #40)
#48 := (and #46 #47)
#51 := (or #48 #50)
#65 := (if #51 #62 #64)
#66 := (if #43 0::Int #65)
#67 := (if #44 #40 #66)
#68 := (= #61 #67)
#69 := (forall (vars (?v0 Int) (?v1 Int)) #68)
#256 := (iff #69 #253)
#226 := (if #51 #62 #221)
#229 := (if #43 0::Int #226)
#232 := (if #44 #40 #229)
#235 := (= #61 #232)
#238 := (forall (vars (?v0 Int) (?v1 Int)) #235)
#254 := (iff #238 #253)
#251 := (iff #235 #250)
#248 := (= #232 #247)
#245 := (= #229 #244)
#242 := (= #226 #241)
#197 := (iff #51 #196)
#194 := (iff #50 #193)
#184 := (iff #47 #183)
#185 := [rewrite]: #184
#191 := (iff #49 #190)
#192 := [rewrite]: #191
#195 := [monotonicity #192 #185]: #194
#187 := (iff #48 #186)
#180 := (iff #46 #179)
#181 := [rewrite]: #180
#188 := [monotonicity #181 #185]: #187
#198 := [monotonicity #188 #195]: #197
#243 := [monotonicity #198]: #242
#246 := [monotonicity #243]: #245
#249 := [monotonicity #246]: #248
#252 := [monotonicity #249]: #251
#255 := [quant-intro #252]: #254
#239 := (iff #69 #238)
#236 := (iff #68 #235)
#233 := (= #67 #232)
#230 := (= #66 #229)
#227 := (= #65 #226)
#224 := (= #64 #221)
#218 := (- #215)
#222 := (= #218 #221)
#223 := [rewrite]: #222
#219 := (= #64 #218)
#216 := (= #63 #215)
#161 := (= #54 #160)
#162 := [rewrite]: #161
#158 := (= #53 #157)
#159 := [rewrite]: #158
#217 := [monotonicity #159 #162]: #216
#220 := [monotonicity #217]: #219
#225 := [trans #220 #223]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [monotonicity #234]: #236
#240 := [quant-intro #237]: #239
#257 := [trans #240 #255]: #256
#214 := [asserted]: #69
#258 := [mp #214 #257]: #253
#286 := [mp~ #258 #271]: #253
#324 := [mp #286 #323]: #321
#355 := [mp #324 #354]: #352
#863 := [mp #355 #862]: #858
#657 := (not #858)
#616 := (or #657 #694)
#523 := (* -1::Int 1::Int)
#727 := (mod #522 #523)
#705 := (+ #18 #727)
#706 := (= #705 0::Int)
#748 := (mod #11 1::Int)
#725 := (* -1::Int #748)
#726 := (+ #18 #725)
#716 := (= #726 0::Int)
#814 := (<= 1::Int 0::Int)
#526 := (or #804 #814)
#527 := (not #526)
#817 := (or #816 #814)
#803 := (not #817)
#528 := (or #803 #527)
#708 := (if #528 #716 #706)
#709 := (if #471 #724 #708)
#723 := (= #18 #11)
#807 := (= 1::Int 0::Int)
#710 := (if #807 #723 #709)
#647 := (or #657 #710)
#651 := (iff #647 #616)
#660 := (iff #616 #616)
#661 := [rewrite]: #660
#682 := (iff #710 #694)
#675 := (if false #723 #694)
#681 := (iff #675 #694)
#676 := [rewrite]: #681
#656 := (iff #710 #675)
#674 := (iff #709 #694)
#693 := (iff #708 #692)
#688 := (iff #706 #687)
#690 := (= #705 #685)
#683 := (= #727 #744)
#766 := (= #523 -1::Int)
#767 := [rewrite]: #766
#684 := [monotonicity #767]: #683
#686 := [monotonicity #684]: #690
#691 := [monotonicity #686]: #688
#679 := (iff #716 #724)
#677 := (= #726 #18)
#701 := (+ #18 0::Int)
#698 := (= #701 #18)
#704 := [rewrite]: #698
#702 := (= #726 #701)
#697 := (= #725 0::Int)
#707 := (* -1::Int 0::Int)
#695 := (= #707 0::Int)
#696 := [rewrite]: #695
#713 := (= #725 #707)
#711 := (= #748 0::Int)
#712 := [rewrite]: #711
#699 := [monotonicity #712]: #713
#700 := [trans #699 #696]: #697
#703 := [monotonicity #700]: #702
#678 := [trans #703 #704]: #677
#572 := [monotonicity #678]: #679
#612 := (iff #528 #610)
#774 := (iff #527 #780)
#773 := (iff #526 #804)
#775 := (or #804 false)
#778 := (iff #775 #804)
#772 := [rewrite]: #778
#776 := (iff #526 #775)
#785 := (iff #814 false)
#786 := [rewrite]: #785
#777 := [monotonicity #786]: #776
#779 := [trans #777 #772]: #773
#781 := [monotonicity #779]: #774
#632 := (iff #803 #631)
#784 := (iff #817 #816)
#787 := (or #816 false)
#788 := (iff #787 #816)
#789 := [rewrite]: #788
#782 := (iff #817 #787)
#783 := [monotonicity #786]: #782
#790 := [trans #783 #789]: #784
#633 := [monotonicity #790]: #632
#613 := [monotonicity #633 #781]: #612
#689 := [monotonicity #613 #572 #691]: #693
#620 := [monotonicity #689]: #674
#514 := (iff #807 false)
#515 := [rewrite]: #514
#680 := [monotonicity #515 #620]: #656
#650 := [trans #680 #676]: #682
#658 := [monotonicity #650]: #651
#662 := [trans #658 #661]: #651
#649 := [quant-inst #11 #13]: #647
#672 := [mp #649 #662]: #616
#476 := [unit-resolution #672 #863]: #694
#645 := (not #694)
#630 := (or #645 #730 #724)
#646 := [def-axiom]: #630
#910 := [unit-resolution #646 #476]: #907
#881 := [unit-resolution #910 #906]: #724
#639 := (not #724)
#463 := (or #639 #673)
#451 := [th-lemma arith triangle-eq]: #463
#882 := [unit-resolution #451 #881]: #673
#743 := (>= #14 0::Int)
#529 := (div #11 1::Int)
#423 := (* -1::Int #529)
#586 := (+ #11 #423)
#590 := (= #586 0::Int)
#1 := true
#87 := [true-axiom]: true
#565 := (or false #590)
#542 := [th-lemma arith]: #565
#544 := [unit-resolution #542 #87]: #590
#574 := (<= #586 0::Int)
#495 := (not #574)
#545 := (not #743)
#546 := [hypothesis]: #545
#799 := (+ #14 #423)
#750 := (>= #799 0::Int)
#800 := (= #799 0::Int)
#769 := (div #522 -1::Int)
#771 := (* -1::Int #769)
#655 := (+ #14 #771)
#664 := (= #655 0::Int)
#763 := (if #610 #800 #664)
#456 := (= #14 0::Int)
#718 := (not #456)
#547 := (or #718 #743)
#548 := [th-lemma arith triangle-eq]: #547
#549 := [unit-resolution #548 #546]: #718
#543 := (or #730 #456)
#665 := (if #471 #456 #763)
#41 := (f7 f8 #40)
#42 := (f6 #41 #29)
#850 := (pattern #42)
#163 := (div #157 #160)
#329 := (* -1::Int #163)
#330 := (+ #42 #329)
#331 := (= #330 0::Int)
#52 := (div #40 #29)
#326 := (* -1::Int #52)
#327 := (+ #42 #326)
#328 := (= #327 0::Int)
#332 := (if #293 #328 #331)
#325 := (= #42 0::Int)
#45 := (or #43 #44)
#333 := (if #45 #325 #332)
#851 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #850) #333)
#336 := (forall (vars (?v0 Int) (?v1 Int)) #333)
#854 := (iff #336 #851)
#852 := (iff #333 #333)
#853 := [refl]: #852
#855 := [quant-intro #853]: #854
#296 := (if #293 #52 #163)
#299 := (if #45 0::Int #296)
#302 := (= #42 #299)
#305 := (forall (vars (?v0 Int) (?v1 Int)) #302)
#337 := (iff #305 #336)
#334 := (iff #302 #333)
#335 := [rewrite]: #334
#338 := [quant-intro #335]: #337
#199 := (if #196 #52 #163)
#202 := (if #45 0::Int #199)
#205 := (= #42 #202)
#208 := (forall (vars (?v0 Int) (?v1 Int)) #205)
#306 := (iff #208 #305)
#303 := (iff #205 #302)
#300 := (= #202 #299)
#297 := (= #199 #296)
#298 := [monotonicity #295]: #297
#301 := [monotonicity #298]: #300
#304 := [monotonicity #301]: #303
#307 := [quant-intro #304]: #306
#268 := (~ #208 #208)
#281 := (~ #205 #205)
#282 := [refl]: #281
#269 := [nnf-pos #282]: #268
#55 := (div #53 #54)
#56 := (if #51 #52 #55)
#57 := (if #45 0::Int #56)
#58 := (= #42 #57)
#59 := (forall (vars (?v0 Int) (?v1 Int)) #58)
#211 := (iff #59 #208)
#166 := (if #51 #52 #163)
#169 := (if #45 0::Int #166)
#172 := (= #42 #169)
#175 := (forall (vars (?v0 Int) (?v1 Int)) #172)
#209 := (iff #175 #208)
#206 := (iff #172 #205)
#203 := (= #169 #202)
#200 := (= #166 #199)
#201 := [monotonicity #198]: #200
#204 := [monotonicity #201]: #203
#207 := [monotonicity #204]: #206
#210 := [quant-intro #207]: #209
#176 := (iff #59 #175)
#173 := (iff #58 #172)
#170 := (= #57 #169)
#167 := (= #56 #166)
#164 := (= #55 #163)
#165 := [monotonicity #159 #162]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [quant-intro #174]: #176
#212 := [trans #177 #210]: #211
#155 := [asserted]: #59
#213 := [mp #155 #212]: #208
#283 := [mp~ #213 #269]: #208
#308 := [mp #283 #307]: #305
#339 := [mp #308 #338]: #336
#856 := [mp #339 #855]: #851
#667 := (not #851)
#668 := (or #667 #665)
#797 := (div #522 #523)
#801 := (* -1::Int #797)
#798 := (+ #14 #801)
#802 := (= #798 0::Int)
#512 := (if #528 #800 #802)
#455 := (or #471 #807)
#513 := (if #455 #456 #512)
#669 := (or #667 #513)
#671 := (iff #669 #668)
#761 := (iff #668 #668)
#765 := [rewrite]: #761
#666 := (iff #513 #665)
#648 := (iff #512 #763)
#759 := (iff #802 #664)
#614 := (= #798 #655)
#653 := (= #801 #771)
#770 := (= #797 #769)
#768 := [monotonicity #767]: #770
#654 := [monotonicity #768]: #653
#762 := [monotonicity #654]: #614
#760 := [monotonicity #762]: #759
#663 := [monotonicity #613 #760]: #648
#792 := (iff #455 #471)
#793 := (or #471 false)
#791 := (iff #793 #471)
#795 := [rewrite]: #791
#794 := (iff #455 #793)
#509 := [monotonicity #515]: #794
#796 := [trans #509 #795]: #792
#659 := [monotonicity #796 #663]: #666
#764 := [monotonicity #659]: #671
#752 := [trans #764 #765]: #671
#670 := [quant-inst #11 #13]: #669
#754 := [mp #670 #752]: #668
#550 := [unit-resolution #754 #856]: #665
#733 := (not #665)
#734 := (or #733 #730 #456)
#714 := [def-axiom]: #734
#551 := [unit-resolution #714 #550]: #543
#536 := [unit-resolution #551 #549]: #730
#537 := (or #471 #763)
#715 := (or #733 #471 #763)
#717 := [def-axiom]: #715
#538 := [unit-resolution #717 #550]: #537
#540 := [unit-resolution #538 #536]: #763
#621 := (f9 f10 #417)
#622 := (= #621 0::Int)
#534 := (not #622)
#525 := (iff #730 #534)
#524 := (iff #471 #622)
#531 := (iff #622 #471)
#541 := (= #621 #11)
#501 := (= #417 f3)
#505 := (or #494 #501)
#506 := [quant-inst #7]: #505
#539 := [unit-resolution #506 #836]: #501
#530 := [monotonicity #539]: #541
#532 := [monotonicity #530]: #531
#533 := [symm #532]: #524
#535 := [monotonicity #533]: #525
#516 := [mp #536 #535]: #534
#623 := (or #804 #622)
#31 := (f4 f5 #29)
#837 := (pattern #31)
#32 := (f9 f10 #31)
#37 := (= #32 0::Int)
#116 := (>= #29 0::Int)
#146 := (or #116 #37)
#844 := (forall (vars (?v0 Int)) (:pat #837) #146)
#149 := (forall (vars (?v0 Int)) #146)
#847 := (iff #149 #844)
#845 := (iff #146 #146)
#846 := [refl]: #845
#848 := [quant-intro #846]: #847
#266 := (~ #149 #149)
#278 := (~ #146 #146)
#279 := [refl]: #278
#267 := [nnf-pos #279]: #266
#36 := (< #29 0::Int)
#38 := (implies #36 #37)
#39 := (forall (vars (?v0 Int)) #38)
#152 := (iff #39 #149)
#130 := (not #36)
#131 := (or #130 #37)
#134 := (forall (vars (?v0 Int)) #131)
#150 := (iff #134 #149)
#147 := (iff #131 #146)
#144 := (iff #130 #116)
#117 := (not #116)
#139 := (not #117)
#142 := (iff #139 #116)
#143 := [rewrite]: #142
#140 := (iff #130 #139)
#137 := (iff #36 #117)
#138 := [rewrite]: #137
#141 := [monotonicity #138]: #140
#145 := [trans #141 #143]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#135 := (iff #39 #134)
#132 := (iff #38 #131)
#133 := [rewrite]: #132
#136 := [quant-intro #133]: #135
#153 := [trans #136 #151]: #152
#129 := [asserted]: #39
#154 := [mp #129 #153]: #149
#280 := [mp~ #154 #267]: #149
#849 := [mp #280 #848]: #844
#808 := (not #844)
#626 := (or #808 #804 #622)
#609 := (or #808 #623)
#597 := (iff #609 #626)
#598 := [rewrite]: #597
#627 := [quant-inst #11]: #609
#599 := [mp #627 #598]: #626
#517 := [unit-resolution #599 #849]: #623
#518 := [unit-resolution #517 #516]: #804
#510 := (or #471 #631 #780)
#519 := [th-lemma arith triangle-eq]: #510
#520 := [unit-resolution #519 #536]: #610
#511 := [unit-resolution #520 #518]: #631
#745 := (or #610 #816)
#755 := [def-axiom]: #745
#521 := [unit-resolution #755 #511]: #610
#736 := (not #763)
#738 := (or #736 #753 #800)
#739 := [def-axiom]: #738
#488 := [unit-resolution #739 #521 #540]: #800
#737 := (not #800)
#490 := (or #737 #750)
#491 := [th-lemma arith triangle-eq]: #490
#482 := [unit-resolution #491 #488]: #750
#496 := (not #750)
#497 := (or #495 #780 #743 #496)
#498 := [th-lemma arith assign-bounds 1 1 -1]: #497
#499 := [unit-resolution #498 #518 #482 #546]: #495
#489 := (not #590)
#500 := (or #489 #574)
#483 := [th-lemma arith triangle-eq]: #500
#485 := [unit-resolution #483 #499 #544]: false
#486 := [lemma #485]: #743
#611 := (* -1::Int #507)
#818 := (+ #18 #611)
#492 := (+ #14 #818)
#805 := (<= #492 0::Int)
#824 := (= #492 0::Int)
#502 := (>= #92 0::Int)
#915 := (not #673)
#916 := (or #502 #545 #915)
#917 := [th-lemma arith assign-bounds 1 -1]: #916
#918 := [unit-resolution #917 #882 #486]: #502
#503 := (not #502)
#481 := (or #503 #824)
#33 := (= #32 #29)
#120 := (or #117 #33)
#838 := (forall (vars (?v0 Int)) (:pat #837) #120)
#123 := (forall (vars (?v0 Int)) #120)
#841 := (iff #123 #838)
#839 := (iff #120 #120)
#840 := [refl]: #839
#842 := [quant-intro #840]: #841
#264 := (~ #123 #123)
#263 := (~ #120 #120)
#260 := [refl]: #263
#265 := [nnf-pos #260]: #264
#30 := (<= 0::Int #29)
#34 := (implies #30 #33)
#35 := (forall (vars (?v0 Int)) #34)
#126 := (iff #35 #123)
#107 := (not #30)
#108 := (or #107 #33)
#111 := (forall (vars (?v0 Int)) #108)
#124 := (iff #111 #123)
#121 := (iff #108 #120)
#118 := (iff #107 #117)
#114 := (iff #30 #116)
#115 := [rewrite]: #114
#119 := [monotonicity #115]: #118
#122 := [monotonicity #119]: #121
#125 := [quant-intro #122]: #124
#112 := (iff #35 #111)
#109 := (iff #34 #108)
#110 := [rewrite]: #109
#113 := [quant-intro #110]: #112
#127 := [trans #113 #125]: #126
#105 := [asserted]: #35
#128 := [mp #105 #127]: #123
#261 := [mp~ #128 #265]: #123
#843 := [mp #261 #842]: #838
#826 := (not #838)
#827 := (or #826 #503 #824)
#504 := (= #507 #92)
#508 := (or #503 #504)
#828 := (or #826 #508)
#480 := (iff #828 #827)
#829 := (or #826 #481)
#484 := (iff #829 #827)
#820 := [rewrite]: #484
#819 := (iff #828 #829)
#493 := (iff #508 #481)
#822 := (iff #504 #824)
#487 := [rewrite]: #822
#825 := [monotonicity #487]: #493
#479 := [monotonicity #825]: #819
#821 := [trans #479 #820]: #480
#823 := [quant-inst #92]: #828
#464 := [mp #823 #821]: #827
#919 := [unit-resolution #464 #843]: #481
#920 := [unit-resolution #919 #918]: #824
#921 := (not #824)
#922 := (or #921 #805)
#923 := [th-lemma arith triangle-eq]: #922
#924 := [unit-resolution #923 #920]: #805
#925 := (not #805)
#926 := (or #815 #545 #915 #925)
#927 := [th-lemma arith assign-bounds 1 -1 1]: #926
#928 := [unit-resolution #927 #924 #486 #882]: #815
#813 := (<= #507 0::Int)
#652 := (<= #18 0::Int)
#461 := (or #639 #652)
#462 := [th-lemma arith triangle-eq]: #461
#929 := [unit-resolution #462 #881]: #652
#746 := (<= #14 0::Int)
#930 := [unit-resolution #551 #906]: #456
#931 := (or #718 #746)
#932 := [th-lemma arith triangle-eq]: #931
#933 := [unit-resolution #932 #930]: #746
#468 := (>= #492 0::Int)
#934 := (or #921 #468)
#935 := [th-lemma arith triangle-eq]: #934
#936 := [unit-resolution #935 #920]: #468
#939 := (not #468)
#938 := (not #652)
#937 := (not #746)
#940 := (or #813 #937 #938 #939)
#941 := [th-lemma arith assign-bounds -1 -1 1]: #940
#942 := [unit-resolution #941 #936 #933 #929]: #813
#944 := (not #815)
#943 := (not #813)
#945 := (or #469 #943 #944)
#946 := [th-lemma arith triangle-eq]: #945
#947 := [unit-resolution #946 #942 #928]: #469
#951 := [trans #947 #949]: #950
#956 := [monotonicity #951]: #955
#958 := [symm #956]: #957
#441 := (= f3 #417)
#434 := [symm #539]: #441
#960 := [trans #434 #958]: #959
#961 := [trans #960 #952]: #98
#101 := (not #98)
#15 := (* #14 1::Int)
#19 := (+ #15 #18)
#20 := (f4 f5 #19)
#21 := (= f3 #20)
#22 := (not #21)
#102 := (iff #22 #101)
#99 := (iff #21 #98)
#96 := (= #20 #95)
#93 := (= #19 #92)
#90 := (= #15 #14)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#97 := [monotonicity #94]: #96
#100 := [monotonicity #97]: #99
#103 := [monotonicity #100]: #102
#89 := [asserted]: #22
#106 := [mp #89 #103]: #101
#962 := [unit-resolution #106 #961]: false
#963 := [lemma #962]: #730
#428 := (or #471 #753)
#442 := (= #417 #95)
#439 := (= #11 #92)
#454 := (= #14 #92)
#472 := [hypothesis]: #610
#473 := [hypothesis]: #730
#477 := (or #471 #692)
#607 := (or #645 #471 #692)
#608 := [def-axiom]: #607
#466 := [unit-resolution #608 #476]: #477
#478 := [unit-resolution #466 #473]: #692
#634 := (not #692)
#635 := (or #634 #753 #724)
#636 := [def-axiom]: #635
#459 := [unit-resolution #636 #478 #472]: #724
#460 := [unit-resolution #462 #459]: #652
#453 := [unit-resolution #451 #459]: #673
#457 := [th-lemma arith eq-propagate -1 -1 #453 #460]: #454
#449 := (= #11 #14)
#749 := (<= #799 0::Int)
#452 := [unit-resolution #538 #473]: #763
#458 := [unit-resolution #739 #452 #472]: #800
#433 := (or #737 #749)
#437 := [th-lemma arith triangle-eq]: #433
#438 := [unit-resolution #437 #458]: #749
#443 := [unit-resolution #491 #458]: #750
#445 := [unit-resolution #483 #544]: #574
#577 := (>= #586 0::Int)
#446 := (or #489 #577)
#448 := [th-lemma arith triangle-eq]: #446
#444 := [unit-resolution #448 #544]: #577
#432 := [th-lemma arith eq-propagate 1 1 -1 -1 #444 #445 #443 #438]: #449
#440 := [trans #432 #457]: #439
#427 := [monotonicity #440]: #442
#424 := [trans #434 #427]: #98
#425 := [unit-resolution #106 #424]: false
#429 := [lemma #425]: #428
#953 := [unit-resolution #429 #963]: #753
#913 := (or #471 #780)
#911 := [hypothesis]: #804
#474 := [hypothesis]: #631
#475 := [unit-resolution #755 #474]: #610
#435 := [unit-resolution #429 #475]: #471
#436 := (or #730 #816)
#430 := [th-lemma arith triangle-eq]: #436
#426 := [unit-resolution #430 #435 #474]: false
#431 := [lemma #426]: #816
#912 := [unit-resolution #519 #473 #431 #911]: false
#914 := [lemma #912]: #913
#954 := [unit-resolution #914 #963]: #780
#756 := (or #610 #804)
#757 := [def-axiom]: #756
[unit-resolution #757 #954 #953]: false
unsat
b88eecece4a97949c3e182a0994557edf8a964b2 816 0
#2 := false
#28 := 0::Int
decl f9 :: (-> S6 S2 Int)
decl f3 :: S2
#7 := f3
decl f10 :: S6
#10 := f10
#11 := (f9 f10 f3)
#805 := (>= #11 0::Int)
#781 := (not #805)
#817 := (<= #11 0::Int)
#632 := (not #817)
#611 := (or #632 #781)
#759 := (not #611)
#472 := (= #11 0::Int)
#735 := (not #472)
decl f4 :: (-> S3 Int S2)
decl f6 :: (-> S4 Int Int)
#13 := 3::Int
decl f7 :: (-> S5 Int S4)
decl f11 :: S5
#16 := f11
#17 := (f7 f11 #11)
#18 := (f6 #17 3::Int)
decl f8 :: S5
#9 := f8
#12 := (f7 f8 #11)
#14 := (f6 #12 3::Int)
#90 := (* 3::Int #14)
#93 := (+ #90 #18)
decl f5 :: S3
#8 := f5
#96 := (f4 f5 #93)
#99 := (= f3 #96)
#418 := (f4 f5 #11)
#997 := (= #418 #96)
#995 := (= #96 #418)
#993 := (= #93 #11)
#989 := (= 0::Int #11)
#953 := [hypothesis]: #472
#990 := [symm #953]: #989
#991 := (= #93 0::Int)
#508 := (f9 f10 #96)
#470 := (= #508 0::Int)
#816 := (>= #508 0::Int)
#657 := (>= #18 0::Int)
#726 := (= #18 0::Int)
#954 := (or #735 #726)
#767 := -3::Int
#157 := -1::Int
#523 := (* -1::Int #11)
#752 := (mod #523 -3::Int)
#714 := (+ #18 #752)
#697 := (= #714 0::Int)
#750 := (mod #11 3::Int)
#727 := (* -1::Int #750)
#717 := (+ #18 #727)
#728 := (= #717 0::Int)
#702 := (if #611 #728 #697)
#699 := (if #472 #726 #702)
#29 := (:var 0 Int)
#40 := (:var 1 Int)
#60 := (f7 f11 #40)
#61 := (f6 #60 #29)
#858 := (pattern #61)
#161 := (* -1::Int #29)
#158 := (* -1::Int #40)
#216 := (mod #158 #161)
#346 := (+ #61 #216)
#347 := (= #346 0::Int)
#62 := (mod #40 #29)
#343 := (* -1::Int #62)
#344 := (+ #61 #343)
#345 := (= #344 0::Int)
#183 := (<= #29 0::Int)
#190 := (>= #40 0::Int)
#290 := (or #190 #183)
#291 := (not #290)
#179 := (<= #40 0::Int)
#288 := (or #179 #183)
#289 := (not #288)
#294 := (or #289 #291)
#348 := (if #294 #345 #347)
#342 := (= #61 0::Int)
#43 := (= #40 0::Int)
#349 := (if #43 #342 #348)
#341 := (= #61 #40)
#44 := (= #29 0::Int)
#350 := (if #44 #341 #349)
#859 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #858) #350)
#353 := (forall (vars (?v0 Int) (?v1 Int)) #350)
#862 := (iff #353 #859)
#860 := (iff #350 #350)
#861 := [refl]: #860
#863 := [quant-intro #861]: #862
#222 := (* -1::Int #216)
#310 := (if #294 #62 #222)
#313 := (if #43 0::Int #310)
#316 := (if #44 #40 #313)
#319 := (= #61 #316)
#322 := (forall (vars (?v0 Int) (?v1 Int)) #319)
#354 := (iff #322 #353)
#351 := (iff #319 #350)
#352 := [rewrite]: #351
#355 := [quant-intro #352]: #354
#184 := (not #183)
#191 := (not #190)
#194 := (and #191 #184)
#180 := (not #179)
#187 := (and #180 #184)
#197 := (or #187 #194)
#242 := (if #197 #62 #222)
#245 := (if #43 0::Int #242)
#248 := (if #44 #40 #245)
#251 := (= #61 #248)
#254 := (forall (vars (?v0 Int) (?v1 Int)) #251)
#323 := (iff #254 #322)
#320 := (iff #251 #319)
#317 := (= #248 #316)
#314 := (= #245 #313)
#311 := (= #242 #310)
#295 := (iff #197 #294)
#292 := (iff #194 #291)
#293 := [rewrite]: #292
#273 := (iff #187 #289)
#274 := [rewrite]: #273
#296 := [monotonicity #274 #293]: #295
#312 := [monotonicity #296]: #311
#315 := [monotonicity #312]: #314
#318 := [monotonicity #315]: #317
#321 := [monotonicity #318]: #320
#324 := [quant-intro #321]: #323
#271 := (~ #254 #254)
#285 := (~ #251 #251)
#286 := [refl]: #285
#272 := [nnf-pos #286]: #271
#54 := (- #29)
#53 := (- #40)
#63 := (mod #53 #54)
#64 := (- #63)
#47 := (< 0::Int #29)
#49 := (< #40 0::Int)
#50 := (and #49 #47)
#46 := (< 0::Int #40)
#48 := (and #46 #47)
#51 := (or #48 #50)
#65 := (if #51 #62 #64)
#66 := (if #43 0::Int #65)
#67 := (if #44 #40 #66)
#68 := (= #61 #67)
#69 := (forall (vars (?v0 Int) (?v1 Int)) #68)
#257 := (iff #69 #254)
#227 := (if #51 #62 #222)
#230 := (if #43 0::Int #227)
#233 := (if #44 #40 #230)
#236 := (= #61 #233)
#239 := (forall (vars (?v0 Int) (?v1 Int)) #236)
#255 := (iff #239 #254)
#252 := (iff #236 #251)
#249 := (= #233 #248)
#246 := (= #230 #245)
#243 := (= #227 #242)
#198 := (iff #51 #197)
#195 := (iff #50 #194)
#185 := (iff #47 #184)
#186 := [rewrite]: #185
#192 := (iff #49 #191)
#193 := [rewrite]: #192
#196 := [monotonicity #193 #186]: #195
#188 := (iff #48 #187)
#181 := (iff #46 #180)
#182 := [rewrite]: #181
#189 := [monotonicity #182 #186]: #188
#199 := [monotonicity #189 #196]: #198
#244 := [monotonicity #199]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [monotonicity #250]: #252
#256 := [quant-intro #253]: #255
#240 := (iff #69 #239)
#237 := (iff #68 #236)
#234 := (= #67 #233)
#231 := (= #66 #230)
#228 := (= #65 #227)
#225 := (= #64 #222)
#219 := (- #216)
#223 := (= #219 #222)
#224 := [rewrite]: #223
#220 := (= #64 #219)
#217 := (= #63 #216)
#162 := (= #54 #161)
#163 := [rewrite]: #162
#159 := (= #53 #158)
#160 := [rewrite]: #159
#218 := [monotonicity #160 #163]: #217
#221 := [monotonicity #218]: #220
#226 := [trans #221 #224]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [quant-intro #238]: #240
#258 := [trans #241 #256]: #257
#215 := [asserted]: #69
#259 := [mp #215 #258]: #254
#287 := [mp~ #259 #272]: #254
#325 := [mp #287 #324]: #322
#356 := [mp #325 #355]: #353
#864 := [mp #356 #863]: #859
#687 := (not #859)
#688 := (or #687 #699)
#524 := (* -1::Int 3::Int)
#706 := (mod #523 #524)
#707 := (+ #18 #706)
#709 := (= #707 0::Int)
#815 := (<= 3::Int 0::Int)
#527 := (or #805 #815)
#528 := (not #527)
#818 := (or #817 #815)
#804 := (not #818)
#529 := (or #804 #528)
#710 := (if #529 #728 #709)
#711 := (if #472 #726 #710)
#725 := (= #18 #11)
#808 := (= 3::Int 0::Int)
#712 := (if #808 #725 #711)
#689 := (or #687 #712)
#693 := (iff #689 #688)
#690 := (iff #688 #688)
#695 := [rewrite]: #690
#686 := (iff #712 #699)
#679 := (if false #725 #699)
#684 := (iff #679 #699)
#685 := [rewrite]: #684
#680 := (iff #712 #679)
#705 := (iff #711 #699)
#703 := (iff #710 #702)
#698 := (iff #709 #697)
#700 := (= #707 #714)
#713 := (= #706 #752)
#768 := (= #524 -3::Int)
#770 := [rewrite]: #768
#708 := [monotonicity #770]: #713
#696 := [monotonicity #708]: #700
#701 := [monotonicity #696]: #698
#613 := (iff #529 #611)
#775 := (iff #528 #781)
#774 := (iff #527 #805)
#776 := (or #805 false)
#779 := (iff #776 #805)
#773 := [rewrite]: #779
#777 := (iff #527 #776)
#786 := (iff #815 false)
#787 := [rewrite]: #786
#778 := [monotonicity #787]: #777
#780 := [trans #778 #773]: #774
#782 := [monotonicity #780]: #775
#633 := (iff #804 #632)
#785 := (iff #818 #817)
#788 := (or #817 false)
#789 := (iff #788 #817)
#790 := [rewrite]: #789
#783 := (iff #818 #788)
#784 := [monotonicity #787]: #783
#791 := [trans #784 #790]: #785
#634 := [monotonicity #791]: #633
#614 := [monotonicity #634 #782]: #613
#704 := [monotonicity #614 #701]: #703
#678 := [monotonicity #704]: #705
#515 := (iff #808 false)
#516 := [rewrite]: #515
#573 := [monotonicity #516 #678]: #680
#691 := [trans #573 #685]: #686
#694 := [monotonicity #691]: #693
#675 := [trans #694 #695]: #693
#692 := [quant-inst #11 #13]: #689
#621 := [mp #692 #675]: #688
#421 := [unit-resolution #621 #864]: #699
#653 := (not #699)
#674 := (or #653 #735 #726)
#629 := [def-axiom]: #674
#955 := [unit-resolution #629 #421]: #954
#956 := [unit-resolution #955 #953]: #726
#636 := (not #726)
#957 := (or #636 #657)
#928 := [th-lemma arith triangle-eq]: #957
#929 := [unit-resolution #928 #956]: #657
#746 := (>= #14 0::Int)
#530 := (div #11 3::Int)
#626 := (* -3::Int #530)
#627 := (+ #626 #727)
#610 := (+ #11 #627)
#625 := (= #610 0::Int)
#1 := true
#87 := [true-axiom]: true
#576 := (or false #625)
#584 := [th-lemma arith]: #576
#577 := [unit-resolution #584 #87]: #625
#599 := (<= #610 0::Int)
#531 := (not #599)
#590 := (>= #750 3::Int)
#591 := (not #590)
#580 := (or false #591)
#581 := [th-lemma arith]: #580
#567 := [unit-resolution #581 #87]: #591
#569 := (not #746)
#570 := [hypothesis]: #569
#424 := (* -1::Int #530)
#800 := (+ #14 #424)
#745 := (>= #800 0::Int)
#801 := (= #800 0::Int)
#771 := (div #523 -3::Int)
#654 := (* -1::Int #771)
#615 := (+ #14 #654)
#760 := (= #615 0::Int)
#649 := (if #611 #801 #760)
#457 := (= #14 0::Int)
#720 := (not #457)
#568 := (or #720 #746)
#571 := [th-lemma arith triangle-eq]: #568
#553 := [unit-resolution #571 #570]: #720
#556 := (or #735 #457)
#667 := (if #472 #457 #649)
#41 := (f7 f8 #40)
#42 := (f6 #41 #29)
#851 := (pattern #42)
#164 := (div #158 #161)
#330 := (* -1::Int #164)
#331 := (+ #42 #330)
#332 := (= #331 0::Int)
#52 := (div #40 #29)
#327 := (* -1::Int #52)
#328 := (+ #42 #327)
#329 := (= #328 0::Int)
#333 := (if #294 #329 #332)
#326 := (= #42 0::Int)
#45 := (or #43 #44)
#334 := (if #45 #326 #333)
#852 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #851) #334)
#337 := (forall (vars (?v0 Int) (?v1 Int)) #334)
#855 := (iff #337 #852)
#853 := (iff #334 #334)
#854 := [refl]: #853
#856 := [quant-intro #854]: #855
#297 := (if #294 #52 #164)
#300 := (if #45 0::Int #297)
#303 := (= #42 #300)
#306 := (forall (vars (?v0 Int) (?v1 Int)) #303)
#338 := (iff #306 #337)
#335 := (iff #303 #334)
#336 := [rewrite]: #335
#339 := [quant-intro #336]: #338
#200 := (if #197 #52 #164)
#203 := (if #45 0::Int #200)
#206 := (= #42 #203)
#209 := (forall (vars (?v0 Int) (?v1 Int)) #206)
#307 := (iff #209 #306)
#304 := (iff #206 #303)
#301 := (= #203 #300)
#298 := (= #200 #297)
#299 := [monotonicity #296]: #298
#302 := [monotonicity #299]: #301
#305 := [monotonicity #302]: #304
#308 := [quant-intro #305]: #307
#269 := (~ #209 #209)
#282 := (~ #206 #206)
#283 := [refl]: #282
#270 := [nnf-pos #283]: #269
#55 := (div #53 #54)
#56 := (if #51 #52 #55)
#57 := (if #45 0::Int #56)
#58 := (= #42 #57)
#59 := (forall (vars (?v0 Int) (?v1 Int)) #58)
#212 := (iff #59 #209)
#167 := (if #51 #52 #164)
#170 := (if #45 0::Int #167)
#173 := (= #42 #170)
#176 := (forall (vars (?v0 Int) (?v1 Int)) #173)
#210 := (iff #176 #209)
#207 := (iff #173 #206)
#204 := (= #170 #203)
#201 := (= #167 #200)
#202 := [monotonicity #199]: #201
#205 := [monotonicity #202]: #204
#208 := [monotonicity #205]: #207
#211 := [quant-intro #208]: #210
#177 := (iff #59 #176)
#174 := (iff #58 #173)
#171 := (= #57 #170)
#168 := (= #56 #167)
#165 := (= #55 #164)
#166 := [monotonicity #160 #163]: #165
#169 := [monotonicity #166]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [quant-intro #175]: #177
#213 := [trans #178 #211]: #212
#156 := [asserted]: #59
#214 := [mp #156 #213]: #209
#284 := [mp~ #214 #270]: #209
#309 := [mp #284 #308]: #306
#340 := [mp #309 #339]: #337
#857 := [mp #340 #856]: #852
#669 := (not #852)
#670 := (or #669 #667)
#798 := (div #523 #524)
#802 := (* -1::Int #798)
#799 := (+ #14 #802)
#803 := (= #799 0::Int)
#513 := (if #529 #801 #803)
#456 := (or #472 #808)
#514 := (if #456 #457 #513)
#671 := (or #669 #514)
#765 := (iff #671 #670)
#766 := (iff #670 #670)
#753 := [rewrite]: #766
#660 := (iff #514 #667)
#664 := (iff #513 #649)
#761 := (iff #803 #760)
#763 := (= #799 #615)
#655 := (= #802 #654)
#769 := (= #798 #771)
#772 := [monotonicity #770]: #769
#656 := [monotonicity #772]: #655
#665 := [monotonicity #656]: #763
#764 := [monotonicity #665]: #761
#666 := [monotonicity #614 #764]: #664
#793 := (iff #456 #472)
#794 := (or #472 false)
#792 := (iff #794 #472)
#796 := [rewrite]: #792
#795 := (iff #456 #794)
#510 := [monotonicity #516]: #795
#797 := [trans #510 #796]: #793
#668 := [monotonicity #797 #666]: #660
#762 := [monotonicity #668]: #765
#755 := [trans #762 #753]: #765
#672 := [quant-inst #11 #13]: #671
#747 := [mp #672 #755]: #670
#555 := [unit-resolution #747 #857]: #667
#731 := (not #667)
#715 := (or #731 #735 #457)
#716 := [def-axiom]: #715
#557 := [unit-resolution #716 #555]: #556
#558 := [unit-resolution #557 #553]: #735
#559 := (or #472 #649)
#718 := (or #731 #472 #649)
#719 := [def-axiom]: #718
#560 := [unit-resolution #719 #555]: #559
#561 := [unit-resolution #560 #558]: #649
#641 := (f9 f10 #418)
#642 := (= #641 0::Int)
#545 := (not #642)
#546 := (iff #735 #545)
#566 := (iff #472 #642)
#565 := (iff #642 #472)
#563 := (= #641 #11)
#502 := (= #418 f3)
#23 := (:var 0 S2)
#24 := (f9 f10 #23)
#831 := (pattern #24)
#25 := (f4 f5 #24)
#26 := (= #25 #23)
#832 := (forall (vars (?v0 S2)) (:pat #831) #26)
#27 := (forall (vars (?v0 S2)) #26)
#835 := (iff #27 #832)
#833 := (iff #26 #26)
#834 := [refl]: #833
#836 := [quant-intro #834]: #835
#277 := (~ #27 #27)
#275 := (~ #26 #26)
#276 := [refl]: #275
#278 := [nnf-pos #276]: #277
#105 := [asserted]: #27
#263 := [mp~ #105 #278]: #27
#837 := [mp #263 #836]: #832
#495 := (not #832)
#506 := (or #495 #502)
#507 := [quant-inst #7]: #506
#562 := [unit-resolution #507 #837]: #502
#564 := [monotonicity #562]: #563
#554 := [monotonicity #564]: #565
#543 := [symm #554]: #566
#547 := [monotonicity #543]: #546
#548 := [mp #558 #547]: #545
#643 := (or #805 #642)
#31 := (f4 f5 #29)
#838 := (pattern #31)
#32 := (f9 f10 #31)
#37 := (= #32 0::Int)
#117 := (>= #29 0::Int)
#147 := (or #117 #37)
#845 := (forall (vars (?v0 Int)) (:pat #838) #147)
#150 := (forall (vars (?v0 Int)) #147)
#848 := (iff #150 #845)
#846 := (iff #147 #147)
#847 := [refl]: #846
#849 := [quant-intro #847]: #848
#267 := (~ #150 #150)
#279 := (~ #147 #147)
#280 := [refl]: #279
#268 := [nnf-pos #280]: #267
#36 := (< #29 0::Int)
#38 := (implies #36 #37)
#39 := (forall (vars (?v0 Int)) #38)
#153 := (iff #39 #150)
#131 := (not #36)
#132 := (or #131 #37)
#135 := (forall (vars (?v0 Int)) #132)
#151 := (iff #135 #150)
#148 := (iff #132 #147)
#145 := (iff #131 #117)
#118 := (not #117)
#140 := (not #118)
#143 := (iff #140 #117)
#144 := [rewrite]: #143
#141 := (iff #131 #140)
#138 := (iff #36 #118)
#139 := [rewrite]: #138
#142 := [monotonicity #139]: #141
#146 := [trans #142 #144]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#136 := (iff #39 #135)
#133 := (iff #38 #132)
#134 := [rewrite]: #133
#137 := [quant-intro #134]: #136
#154 := [trans #137 #152]: #153
#130 := [asserted]: #39
#155 := [mp #130 #154]: #150
#281 := [mp~ #155 #268]: #150
#850 := [mp #281 #849]: #845
#809 := (not #845)
#646 := (or #809 #805 #642)
#631 := (or #809 #643)
#608 := (iff #631 #646)
#609 := [rewrite]: #608
#647 := [quant-inst #11]: #631
#616 := [mp #647 #609]: #646
#549 := [unit-resolution #616 #850]: #643
#550 := [unit-resolution #549 #548]: #805
#551 := (or #472 #632 #781)
#544 := [th-lemma arith triangle-eq]: #551
#552 := [unit-resolution #544 #558]: #611
#537 := [unit-resolution #552 #550]: #632
#756 := (or #611 #817)
#757 := [def-axiom]: #756
#538 := [unit-resolution #757 #537]: #611
#739 := (not #649)
#740 := (or #739 #759 #801)
#741 := [def-axiom]: #740
#539 := [unit-resolution #741 #538 #561]: #801
#743 := (not #801)
#541 := (or #743 #745)
#540 := [th-lemma arith triangle-eq]: #541
#542 := [unit-resolution #540 #539]: #745
#532 := (not #745)
#533 := (or #531 #781 #590 #746 #532)
#525 := [th-lemma arith assign-bounds 1 1 3 -3]: #533
#534 := [unit-resolution #525 #550 #542 #570 #567]: #531
#535 := (not #625)
#526 := (or #535 #599)
#536 := [th-lemma arith triangle-eq]: #526
#517 := [unit-resolution #536 #534 #577]: false
#518 := [lemma #517]: #746
#819 := (* -1::Int #508)
#493 := (+ #18 #819)
#494 := (+ #90 #493)
#806 := (<= #494 0::Int)
#482 := (= #494 0::Int)
#503 := (>= #93 0::Int)
#880 := (not #657)
#881 := (or #503 #569 #880)
#882 := [th-lemma arith assign-bounds 3 -1]: #881
#962 := [unit-resolution #882 #929 #518]: #503
#504 := (not #503)
#823 := (or #504 #482)
#33 := (= #32 #29)
#121 := (or #118 #33)
#839 := (forall (vars (?v0 Int)) (:pat #838) #121)
#124 := (forall (vars (?v0 Int)) #121)
#842 := (iff #124 #839)
#840 := (iff #121 #121)
#841 := [refl]: #840
#843 := [quant-intro #841]: #842
#265 := (~ #124 #124)
#264 := (~ #121 #121)
#261 := [refl]: #264
#266 := [nnf-pos #261]: #265
#30 := (<= 0::Int #29)
#34 := (implies #30 #33)
#35 := (forall (vars (?v0 Int)) #34)
#127 := (iff #35 #124)
#108 := (not #30)
#109 := (or #108 #33)
#112 := (forall (vars (?v0 Int)) #109)
#125 := (iff #112 #124)
#122 := (iff #109 #121)
#119 := (iff #108 #118)
#115 := (iff #30 #117)
#116 := [rewrite]: #115
#120 := [monotonicity #116]: #119
#123 := [monotonicity #120]: #122
#126 := [quant-intro #123]: #125
#113 := (iff #35 #112)
#110 := (iff #34 #109)
#111 := [rewrite]: #110
#114 := [quant-intro #111]: #113
#128 := [trans #114 #126]: #127
#106 := [asserted]: #35
#129 := [mp #106 #128]: #124
#262 := [mp~ #129 #266]: #124
#844 := [mp #262 #843]: #839
#827 := (not #839)
#828 := (or #827 #504 #482)
#505 := (= #508 #93)
#509 := (or #504 #505)
#829 := (or #827 #509)
#481 := (iff #829 #828)
#830 := (or #827 #823)
#485 := (iff #830 #828)
#821 := [rewrite]: #485
#820 := (iff #829 #830)
#612 := (iff #509 #823)
#825 := (iff #505 #482)
#488 := [rewrite]: #825
#826 := [monotonicity #488]: #612
#480 := [monotonicity #826]: #820
#822 := [trans #480 #821]: #481
#824 := [quant-inst #93]: #829
#465 := [mp #824 #822]: #828
#884 := [unit-resolution #465 #844]: #823
#963 := [unit-resolution #884 #962]: #482
#886 := (not #482)
#887 := (or #886 #806)
#888 := [th-lemma arith triangle-eq]: #887
#964 := [unit-resolution #888 #963]: #806
#890 := (not #806)
#965 := (or #816 #569 #880 #890)
#966 := [th-lemma arith assign-bounds 3 -1 1]: #965
#967 := [unit-resolution #966 #964 #518 #929]: #816
#814 := (<= #508 0::Int)
#676 := (<= #18 0::Int)
#968 := (or #636 #676)
#969 := [th-lemma arith triangle-eq]: #968
#970 := [unit-resolution #969 #956]: #676
#744 := (<= #14 0::Int)
#971 := [unit-resolution #557 #953]: #457
#972 := (or #720 #744)
#973 := [th-lemma arith triangle-eq]: #972
#974 := [unit-resolution #973 #971]: #744
#469 := (>= #494 0::Int)
#894 := (or #886 #469)
#895 := [th-lemma arith triangle-eq]: #894
#975 := [unit-resolution #895 #963]: #469
#897 := (not #469)
#977 := (not #676)
#976 := (not #744)
#978 := (or #814 #976 #977 #897)
#979 := [th-lemma arith assign-bounds -3 -1 1]: #978
#980 := [unit-resolution #979 #975 #974 #970]: #814
#982 := (not #816)
#981 := (not #814)
#983 := (or #470 #981 #982)
#984 := [th-lemma arith triangle-eq]: #983
#985 := [unit-resolution #984 #980 #967]: #470
#491 := (= #93 #508)
#492 := (+ #93 #819)
#490 := (<= #492 0::Int)
#891 := (or #490 #890)
#892 := [th-lemma arith assign-bounds -1]: #891
#986 := [unit-resolution #892 #964]: #490
#501 := (>= #492 0::Int)
#898 := (or #501 #897)
#899 := [th-lemma arith assign-bounds -1]: #898
#987 := [unit-resolution #899 #975]: #501
#902 := (not #501)
#901 := (not #490)
#903 := (or #491 #901 #902)
#904 := [th-lemma arith triangle-eq]: #903
#988 := [unit-resolution #904 #987 #986]: #491
#992 := [trans #988 #985]: #991
#994 := [trans #992 #990]: #993
#996 := [monotonicity #994]: #995
#998 := [symm #996]: #997
#450 := (= f3 #418)
#433 := [symm #562]: #450
#999 := [trans #433 #998]: #99
#102 := (not #99)
#15 := (* #14 3::Int)
#19 := (+ #15 #18)
#20 := (f4 f5 #19)
#21 := (= f3 #20)
#22 := (not #21)
#103 := (iff #22 #102)
#100 := (iff #21 #99)
#97 := (= #20 #96)
#94 := (= #19 #93)
#91 := (= #15 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#104 := [monotonicity #101]: #103
#89 := [asserted]: #22
#107 := [mp #89 #104]: #102
#1000 := [unit-resolution #107 #999]: false
#1001 := [lemma #1000]: #735
#907 := (or #472 #759)
#751 := (<= #800 0::Int)
#426 := [hypothesis]: #611
#429 := [hypothesis]: #735
#430 := [unit-resolution #560 #429]: #649
#431 := [unit-resolution #741 #430 #426]: #801
#427 := (or #743 #751)
#432 := [th-lemma arith triangle-eq]: #427
#419 := [unit-resolution #432 #431]: #751
#681 := (<= #717 0::Int)
#422 := (or #472 #702)
#630 := (or #653 #472 #702)
#635 := [def-axiom]: #630
#420 := [unit-resolution #635 #421]: #422
#423 := [unit-resolution #420 #429]: #702
#651 := (not #702)
#658 := (or #651 #759 #728)
#617 := [def-axiom]: #658
#865 := [unit-resolution #617 #423 #426]: #728
#652 := (not #728)
#866 := (or #652 #681)
#867 := [th-lemma arith triangle-eq]: #866
#868 := [unit-resolution #867 #865]: #681
#869 := [unit-resolution #540 #431]: #745
#682 := (>= #717 0::Int)
#870 := (or #652 #682)
#871 := [th-lemma arith triangle-eq]: #870
#872 := [unit-resolution #871 #865]: #682
#601 := (>= #750 0::Int)
#873 := (or false #601)
#874 := [th-lemma arith]: #873
#875 := [unit-resolution #874 #87]: #601
#458 := (not #682)
#876 := (not #601)
#877 := (or #657 #876 #458)
#878 := [th-lemma arith assign-bounds 1 1]: #877
#879 := [unit-resolution #878 #872 #875]: #657
#883 := [unit-resolution #882 #879 #518]: #503
#885 := [unit-resolution #884 #883]: #482
#889 := [unit-resolution #888 #885]: #806
#893 := [unit-resolution #892 #889]: #490
#896 := [unit-resolution #895 #885]: #469
#900 := [unit-resolution #899 #896]: #501
#905 := [unit-resolution #904 #900 #893]: #491
#460 := (not #751)
#462 := (not #681)
#443 := (not #491)
#428 := (or #443 #458 #532 #462 #460)
#519 := (f4 f5 #508)
#511 := (= #519 #96)
#512 := (or #495 #511)
#522 := [quant-inst #96]: #512
#473 := [unit-resolution #522 #837]: #511
#440 := (= f3 #519)
#436 := (= #418 #519)
#449 := (= #11 #508)
#474 := [hypothesis]: #491
#484 := (= #11 #93)
#486 := (* -1::Int #93)
#487 := (+ #11 #486)
#468 := (>= #487 0::Int)
#475 := [hypothesis]: #751
#600 := (>= #610 0::Int)
#476 := (or #535 #600)
#477 := [th-lemma arith triangle-eq]: #476
#478 := [unit-resolution #477 #577]: #600
#467 := [hypothesis]: #681
#479 := (not #600)
#463 := (or #468 #479 #460 #462)
#461 := [th-lemma arith assign-bounds -1 3 1]: #463
#464 := [unit-resolution #461 #467 #478 #475]: #468
#466 := (<= #487 0::Int)
#452 := [hypothesis]: #745
#454 := [unit-resolution #536 #577]: #599
#455 := [hypothesis]: #682
#453 := (or #466 #531 #532 #458)
#459 := [th-lemma arith assign-bounds -1 3 1]: #453
#434 := [unit-resolution #459 #455 #454 #452]: #466
#439 := (not #468)
#438 := (not #466)
#444 := (or #484 #438 #439)
#446 := [th-lemma arith triangle-eq]: #444
#447 := [unit-resolution #446 #434 #464]: #484
#445 := [trans #447 #474]: #449
#437 := [monotonicity #445]: #436
#441 := [trans #433 #437]: #440
#442 := [trans #441 #473]: #99
#435 := [unit-resolution #107 #442]: false
#425 := [lemma #435]: #428
#906 := [unit-resolution #425 #905 #872 #869 #868 #419]: false
#908 := [lemma #906]: #907
#1002 := [unit-resolution #908 #1001]: #759
#960 := (or #472 #781)
#958 := [hypothesis]: #805
#574 := [hypothesis]: #632
#575 := [unit-resolution #757 #574]: #611
#578 := [unit-resolution #908 #575]: #472
#579 := (or #735 #817)
#583 := [th-lemma arith triangle-eq]: #579
#496 := [unit-resolution #583 #578 #574]: false
#497 := [lemma #496]: #817
#959 := [unit-resolution #544 #429 #497 #958]: false
#961 := [lemma #959]: #960
#1003 := [unit-resolution #961 #1001]: #781
#758 := (or #611 #805)
#754 := [def-axiom]: #758
[unit-resolution #754 #1003 #1002]: false
unsat
eda44a5672e0665e25283a25dd7f355a8eaca7e9 62 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (if #59 #9 #11)
#70 := (* -1::Int #62)
#253 := (+ #11 #70)
#602 := (>= #253 0::Int)
#290 := (= #11 #62)
#206 := (not #59)
#205 := (= #9 #62)
#598 := (not #205)
#71 := (+ #9 #70)
#69 := (>= #71 0::Int)
#75 := (not #69)
#12 := (<= #9 #11)
#13 := (if #12 #9 #11)
#14 := (<= #13 #9)
#15 := (not #14)
#76 := (iff #15 #75)
#73 := (iff #14 #69)
#65 := (<= #62 #9)
#68 := (iff #65 #69)
#72 := [rewrite]: #68
#66 := (iff #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#74 := [trans #67 #72]: #73
#77 := [monotonicity #74]: #76
#53 := [asserted]: #15
#78 := [mp #53 #77]: #75
#594 := [hypothesis]: #205
#599 := (or #598 #69)
#600 := [th-lemma arith triangle-eq]: #599
#595 := [unit-resolution #600 #594 #78]: false
#601 := [lemma #595]: #598
#291 := (or #206 #205)
#292 := [def-axiom]: #291
#604 := [unit-resolution #292 #601]: #206
#283 := (or #59 #290)
#294 := [def-axiom]: #283
#244 := [unit-resolution #294 #604]: #290
#245 := (not #290)
#605 := (or #245 #602)
#603 := [th-lemma arith triangle-eq]: #605
#606 := [unit-resolution #603 #244]: #602
[th-lemma arith farkas 1 1 1 #78 #604 #606]: false
unsat
97b1f19af776d1080cad185bb98c38caf958ba23 62 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (if #59 #9 #11)
#69 := (* -1::Int #62)
#70 := (+ #11 #69)
#68 := (>= #70 0::Int)
#75 := (not #68)
#12 := (<= #9 #11)
#13 := (if #12 #9 #11)
#14 := (<= #13 #11)
#15 := (not #14)
#76 := (iff #15 #75)
#73 := (iff #14 #68)
#65 := (<= #62 #11)
#71 := (iff #65 #68)
#72 := [rewrite]: #71
#66 := (iff #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#74 := [trans #67 #72]: #73
#77 := [monotonicity #74]: #76
#53 := [asserted]: #15
#78 := [mp #53 #77]: #75
#290 := (= #11 #62)
#206 := (not #59)
#599 := [hypothesis]: #59
#253 := (+ #9 #69)
#598 := (>= #253 0::Int)
#205 := (= #9 #62)
#291 := (or #206 #205)
#292 := [def-axiom]: #291
#600 := [unit-resolution #292 #599]: #205
#595 := (not #205)
#601 := (or #595 #598)
#239 := [th-lemma arith triangle-eq]: #601
#602 := [unit-resolution #239 #600]: #598
#604 := [th-lemma arith farkas -1 1 1 #602 #78 #599]: false
#244 := [lemma #604]: #206
#283 := (or #59 #290)
#294 := [def-axiom]: #283
#245 := [unit-resolution #294 #244]: #290
#605 := (not #290)
#603 := (or #605 #68)
#606 := [th-lemma arith triangle-eq]: #603
[unit-resolution #606 #245 #78]: false
unsat
3471bb506d588114610f4dc57e0a4000d67c30d5 238 0
#2 := false
#23 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#57 := -1::Int
#58 := (* -1::Int #11)
#59 := (+ #9 #58)
#60 := (<= #59 0::Int)
#63 := (if #60 #9 #11)
#72 := (* -1::Int #63)
#255 := (+ #9 #72)
#600 := (>= #255 0::Int)
#607 := (not #600)
#617 := (>= #11 0::Int)
#586 := (= #11 0::Int)
decl f7 :: (-> S4 Int S3)
decl f8 :: S4
#17 := f8
#295 := (f7 f8 #11)
#618 := (f3 f4 #295)
#271 := (= #618 0::Int)
#592 := (not #617)
#439 := [hypothesis]: #592
#612 := (or #617 #271)
#24 := (:var 0 Int)
#26 := (f7 f8 #24)
#628 := (pattern #26)
#27 := (f3 f4 #26)
#32 := (= #27 0::Int)
#89 := (>= #24 0::Int)
#120 := (or #89 #32)
#635 := (forall (vars (?v0 Int)) (:pat #628) #120)
#123 := (forall (vars (?v0 Int)) #120)
#638 := (iff #123 #635)
#636 := (iff #120 #120)
#637 := [refl]: #636
#639 := [quant-intro #637]: #638
#136 := (~ #123 #123)
#144 := (~ #120 #120)
#145 := [refl]: #144
#137 := [nnf-pos #145]: #136
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#126 := (iff #34 #123)
#104 := (not #31)
#105 := (or #104 #32)
#108 := (forall (vars (?v0 Int)) #105)
#124 := (iff #108 #123)
#121 := (iff #105 #120)
#118 := (iff #104 #89)
#91 := (not #89)
#113 := (not #91)
#116 := (iff #113 #89)
#117 := [rewrite]: #116
#114 := (iff #104 #113)
#111 := (iff #31 #91)
#112 := [rewrite]: #111
#115 := [monotonicity #112]: #114
#119 := [trans #115 #117]: #118
#122 := [monotonicity #119]: #121
#125 := [quant-intro #122]: #124
#109 := (iff #34 #108)
#106 := (iff #33 #105)
#107 := [rewrite]: #106
#110 := [quant-intro #107]: #109
#127 := [trans #110 #125]: #126
#103 := [asserted]: #34
#128 := [mp #103 #127]: #123
#146 := [mp~ #128 #137]: #123
#640 := [mp #146 #639]: #635
#619 := (not #635)
#259 := (or #619 #617 #271)
#260 := (or #619 #612)
#262 := (iff #260 #259)
#598 := [rewrite]: #262
#261 := [quant-inst #11]: #260
#599 := [mp #261 #598]: #259
#304 := [unit-resolution #599 #640]: #612
#454 := [unit-resolution #304 #439]: #271
#300 := (= #11 #618)
#584 := (= f6 #295)
#299 := (= #295 f6)
#18 := (:var 0 S3)
#19 := (f3 f4 #18)
#621 := (pattern #19)
#20 := (f7 f8 #19)
#21 := (= #20 #18)
#622 := (forall (vars (?v0 S3)) (:pat #621) #21)
#22 := (forall (vars (?v0 S3)) #21)
#625 := (iff #22 #622)
#623 := (iff #21 #21)
#624 := [refl]: #623
#626 := [quant-intro #624]: #625
#142 := (~ #22 #22)
#140 := (~ #21 #21)
#141 := [refl]: #140
#143 := [nnf-pos #141]: #142
#55 := [asserted]: #22
#132 := [mp~ #55 #143]: #22
#627 := [mp #132 #626]: #622
#278 := (not #622)
#609 := (or #278 #299)
#283 := [quant-inst #10]: #609
#306 := [unit-resolution #283 #627]: #299
#585 := [symm #306]: #584
#582 := [monotonicity #585]: #300
#456 := [trans #582 #454]: #586
#457 := (not #586)
#450 := (or #457 #617)
#458 := [th-lemma arith triangle-eq]: #450
#459 := [unit-resolution #458 #439 #456]: false
#460 := [lemma #459]: #617
#555 := (or #592 #607)
#73 := (+ #11 #72)
#74 := (+ #9 #73)
#70 := (>= #74 0::Int)
#77 := (not #70)
#14 := (+ #9 #11)
#12 := (<= #9 #11)
#13 := (if #12 #9 #11)
#15 := (<= #13 #14)
#16 := (not #15)
#78 := (iff #16 #77)
#75 := (iff #15 #70)
#66 := (<= #63 #14)
#69 := (iff #66 #70)
#71 := [rewrite]: #69
#67 := (iff #15 #66)
#64 := (= #13 #63)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#76 := [trans #68 #71]: #75
#79 := [monotonicity #76]: #78
#54 := [asserted]: #16
#80 := [mp #54 #79]: #77
#589 := (or #592 #607 #70)
#593 := [th-lemma arith assign-bounds 1 -1]: #589
#552 := [unit-resolution #593 #80]: #555
#556 := [unit-resolution #552 #460]: #607
#207 := (= #9 #63)
#297 := (f7 f8 #9)
#402 := (f3 f4 #297)
#284 := (= #402 0::Int)
#405 := (iff #284 #207)
#445 := (iff #207 #284)
#562 := (= #63 0::Int)
#424 := (>= #73 0::Int)
#292 := (= #11 #63)
#580 := (iff #284 #292)
#574 := (iff #292 #284)
#587 := (= 0::Int #402)
#578 := (iff #587 #284)
#573 := [commutativity]: #578
#576 := (iff #292 #587)
#314 := (= #63 #402)
#591 := (= #9 #402)
#319 := (= f5 #297)
#298 := (= #297 f5)
#613 := (or #278 #298)
#615 := [quant-inst #8]: #613
#318 := [unit-resolution #615 #627]: #298
#320 := [symm #318]: #319
#313 := [monotonicity #320]: #591
#214 := (= #63 #9)
#601 := (not #292)
#602 := [hypothesis]: #601
#285 := (or #60 #292)
#296 := [def-axiom]: #285
#597 := [unit-resolution #296 #602]: #60
#208 := (not #60)
#293 := (or #208 #207)
#294 := [def-axiom]: #293
#603 := [unit-resolution #294 #597]: #207
#590 := [symm #603]: #214
#588 := [trans #590 #313]: #314
#241 := (not #207)
#604 := (or #241 #600)
#606 := [th-lemma arith triangle-eq]: #604
#246 := [unit-resolution #606 #603]: #600
#303 := [unit-resolution #593 #246 #80]: #592
#305 := [unit-resolution #304 #303]: #271
#583 := [trans #582 #305]: #586
#577 := [monotonicity #583 #588]: #576
#579 := [trans #577 #573]: #574
#575 := [symm #579]: #580
#272 := (>= #9 0::Int)
#247 := (not #272)
#605 := (or #247 #208 #607 #70)
#608 := [th-lemma arith assign-bounds -1 1 -1]: #605
#594 := [unit-resolution #608 #597 #80 #246]: #247
#616 := (or #272 #284)
#614 := (or #619 #272 #284)
#620 := (or #619 #616)
#270 := (iff #620 #614)
#275 := [rewrite]: #270
#610 := [quant-inst #9]: #620
#611 := [mp #610 #275]: #614
#595 := [unit-resolution #611 #640]: #616
#317 := [unit-resolution #595 #594]: #284
#581 := [mp #317 #575]: #292
#422 := [unit-resolution #602 #581]: false
#423 := [lemma #422]: #292
#567 := (or #601 #424)
#568 := [th-lemma arith triangle-eq]: #567
#569 := [unit-resolution #568 #423]: #424
#566 := [hypothesis]: #241
#572 := [unit-resolution #294 #566]: #208
#563 := (not #424)
#401 := (or #592 #563 #60 #70)
#403 := [th-lemma arith assign-bounds 1 1 1]: #401
#404 := [unit-resolution #403 #572 #80 #569]: #592
#557 := [unit-resolution #304 #404]: #271
#561 := (= #63 #618)
#558 := (= #63 #11)
#560 := [symm #423]: #558
#559 := [trans #560 #582]: #561
#444 := [trans #559 #557]: #562
#446 := [monotonicity #313 #444]: #445
#553 := [symm #446]: #405
#564 := (or #247 #563 #70)
#570 := [th-lemma arith assign-bounds 1 -1]: #564
#571 := [unit-resolution #570 #569 #80]: #247
#565 := [unit-resolution #595 #571]: #284
#455 := [mp #565 #553]: #207
#550 := [unit-resolution #566 #455]: false
#551 := [lemma #550]: #207
[unit-resolution #606 #551 #556]: false
unsat
fe9dfffa2627f52b211026454fe85b424a23c79e 109 0
#2 := false
#28 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#67 := -1::Int
#76 := (* -1::Int #14)
#86 := (+ #11 #76)
#87 := (<= #86 0::Int)
#90 := (if #87 #11 #14)
#98 := (* -1::Int #90)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#99 := (+ #9 #98)
#97 := (>= #99 0::Int)
#96 := (not #97)
#77 := (+ #9 #76)
#75 := (>= #77 0::Int)
#74 := (not #75)
#70 := (* -1::Int #11)
#71 := (+ #9 #70)
#69 := (>= #71 0::Int)
#68 := (not #69)
#80 := (and #68 #74)
#83 := (not #80)
#104 := (or #83 #96)
#107 := (not #104)
#17 := (<= #11 #14)
#18 := (if #17 #11 #14)
#19 := (< #9 #18)
#15 := (< #9 #14)
#12 := (< #9 #11)
#16 := (and #12 #15)
#20 := (implies #16 #19)
#21 := (not #20)
#110 := (iff #21 #107)
#60 := (not #16)
#61 := (or #60 #19)
#64 := (not #61)
#108 := (iff #64 #107)
#105 := (iff #61 #104)
#102 := (iff #19 #96)
#93 := (< #9 #90)
#100 := (iff #93 #96)
#101 := [rewrite]: #100
#94 := (iff #19 #93)
#91 := (= #18 #90)
#88 := (iff #17 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#95 := [monotonicity #92]: #94
#103 := [trans #95 #101]: #102
#84 := (iff #60 #83)
#81 := (iff #16 #80)
#78 := (iff #15 #74)
#79 := [rewrite]: #78
#72 := (iff #12 #68)
#73 := [rewrite]: #72
#82 := [monotonicity #73 #79]: #81
#85 := [monotonicity #82]: #84
#106 := [monotonicity #85 #103]: #105
#109 := [monotonicity #106]: #108
#65 := (iff #21 #64)
#62 := (iff #20 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#111 := [trans #66 #109]: #110
#59 := [asserted]: #21
#112 := [mp #59 #111]: #107
#116 := [not-or-elim #112]: #97
#113 := [not-or-elim #112]: #80
#115 := [and-elim #113]: #74
#633 := (+ #14 #98)
#630 := (<= #633 0::Int)
#330 := (= #14 #90)
#246 := (not #87)
#245 := (= #11 #90)
#628 := (not #245)
#642 := (+ #11 #98)
#644 := (<= #642 0::Int)
#357 := (not #644)
#114 := [and-elim #113]: #68
#355 := [hypothesis]: #644
#356 := [th-lemma arith farkas -1 -1 1 #355 #114 #116]: false
#358 := [lemma #356]: #357
#252 := [hypothesis]: #245
#629 := (or #628 #644)
#351 := [th-lemma arith triangle-eq]: #629
#352 := [unit-resolution #351 #252 #358]: false
#626 := [lemma #352]: #628
#331 := (or #246 #245)
#332 := [def-axiom]: #331
#631 := [unit-resolution #332 #626]: #246
#323 := (or #87 #330)
#334 := [def-axiom]: #323
#341 := [unit-resolution #334 #631]: #330
#342 := (not #330)
#343 := (or #342 #630)
#344 := [th-lemma arith triangle-eq]: #343
#622 := [unit-resolution #344 #341]: #630
[th-lemma arith farkas -1 -1 1 #622 #115 #116]: false
unsat
5cb55092de9089ed8a3391dc81cfc498bef42803 151 0
#2 := false
decl f5 :: S3
#8 := f5
decl f6 :: S3
#10 := f6
#24 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#58 := -1::Int
#59 := (* -1::Int #11)
#9 := (f3 f4 f5)
#60 := (+ #9 #59)
#68 := (>= #60 0::Int)
#70 := (if #68 f6 f5)
#61 := (<= #60 0::Int)
#64 := (if #61 f5 f6)
#73 := (= #64 #70)
#296 := (= f6 #70)
#560 := (iff #296 #73)
#557 := (iff #73 #296)
#607 := (= #64 f6)
#291 := (= f6 #64)
#207 := (not #61)
#206 := (= f5 #64)
#563 := (not #206)
#566 := (iff #206 #73)
#423 := (iff #73 #206)
#579 := (= #64 f5)
#421 := (iff #579 #206)
#422 := [commutativity]: #421
#574 := (iff #73 #579)
#304 := (= #70 f5)
#297 := (= f5 #70)
#598 := (not #297)
#599 := [hypothesis]: #598
#612 := (or #68 #297)
#614 := [def-axiom]: #612
#245 := [unit-resolution #614 #599]: #68
#294 := (not #68)
#298 := (or #294 #296)
#277 := [def-axiom]: #298
#246 := [unit-resolution #277 #245]: #296
#575 := (= f5 f6)
decl f7 :: (-> S4 Int S3)
decl f8 :: S4
#18 := f8
#608 := (f7 f8 #11)
#282 := (= #608 f6)
#19 := (:var 0 S3)
#20 := (f3 f4 #19)
#620 := (pattern #20)
#21 := (f7 f8 #20)
#22 := (= #21 #19)
#621 := (forall (vars (?v0 S3)) (:pat #620) #22)
#23 := (forall (vars (?v0 S3)) #22)
#624 := (iff #23 #621)
#622 := (iff #22 #22)
#623 := [refl]: #622
#625 := [quant-intro #623]: #624
#141 := (~ #23 #23)
#139 := (~ #22 #22)
#140 := [refl]: #139
#142 := [nnf-pos #140]: #141
#56 := [asserted]: #23
#131 := [mp~ #56 #142]: #23
#626 := [mp #131 #625]: #621
#283 := (not #621)
#613 := (or #283 #282)
#619 := [quant-inst #10]: #613
#302 := [unit-resolution #619 #626]: #282
#582 := (= f5 #608)
#271 := (f7 f8 #9)
#581 := (= #271 #608)
#305 := (= #608 #271)
#588 := (= #11 #9)
#587 := (= #9 #11)
#213 := (not #291)
#76 := (not #73)
#589 := (iff #76 #213)
#318 := (iff #73 #291)
#316 := (iff #607 #291)
#317 := [commutativity]: #316
#593 := (iff #73 #607)
#606 := (= #70 f6)
#604 := [symm #246]: #606
#594 := [monotonicity #604]: #593
#319 := [trans #594 #317]: #318
#590 := [monotonicity #319]: #589
#14 := (<= #11 #9)
#15 := (if #14 f6 f5)
#12 := (<= #9 #11)
#13 := (if #12 f5 f6)
#16 := (= #13 #15)
#17 := (not #16)
#77 := (iff #17 #76)
#74 := (iff #16 #73)
#71 := (= #15 #70)
#67 := (iff #14 #68)
#69 := [rewrite]: #67
#72 := [monotonicity #69]: #71
#65 := (= #13 #64)
#62 := (iff #12 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#75 := [monotonicity #66 #72]: #74
#78 := [monotonicity #75]: #77
#55 := [asserted]: #17
#79 := [mp #55 #78]: #76
#312 := [mp #79 #590]: #213
#284 := (or #61 #291)
#295 := [def-axiom]: #284
#313 := [unit-resolution #295 #312]: #61
#591 := [th-lemma arith eq-propagate 1 1 #245 #313]: #587
#592 := [symm #591]: #588
#583 := [monotonicity #592]: #305
#585 := [symm #583]: #581
#584 := (= f5 #271)
#401 := (= #271 f5)
#615 := (or #283 #401)
#616 := [quant-inst #8]: #615
#605 := [unit-resolution #616 #626]: #401
#299 := [symm #605]: #584
#586 := [trans #299 #585]: #582
#576 := [trans #586 #302]: #575
#577 := [trans #576 #246]: #297
#572 := [unit-resolution #599 #577]: false
#573 := [lemma #572]: #297
#578 := [symm #573]: #304
#580 := [monotonicity #578]: #574
#565 := [trans #580 #422]: #423
#567 := [symm #565]: #566
#303 := [hypothesis]: #206
#568 := [mp #303 #567]: #73
#562 := [unit-resolution #79 #568]: false
#569 := [lemma #562]: #563
#292 := (or #207 #206)
#293 := [def-axiom]: #292
#570 := [unit-resolution #293 #569]: #207
#403 := [unit-resolution #295 #570]: #291
#556 := [symm #403]: #607
#559 := [monotonicity #556]: #557
#558 := [symm #559]: #560
#564 := (or #68 #61)
#571 := [th-lemma arith farkas 1 1]: #564
#400 := [unit-resolution #571 #570]: #68
#402 := [unit-resolution #277 #400]: #296
#561 := [mp #402 #558]: #73
[unit-resolution #79 #561]: false
unsat
dfbdf9498a779cc07990188555d390512d351434 141 0
#2 := false
#10 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: (-> S4 Int S3)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
decl f7 :: S4
#12 := f7
#272 := (f6 f7 #9)
#570 := (f3 f4 #272)
#277 := (= #570 0::Int)
#543 := (= #9 0::Int)
#11 := (<= #9 0::Int)
#13 := (f6 f7 0::Int)
#14 := (if #11 f5 #13)
#266 := (= #13 #14)
#567 := (not #266)
#15 := (= #14 #13)
#16 := (not #15)
#564 := (iff #16 #567)
#293 := (iff #15 #266)
#294 := [commutativity]: #293
#568 := [monotonicity #294]: #564
#52 := [asserted]: #16
#278 := [mp #52 #568]: #567
#259 := (or #11 #266)
#270 := [def-axiom]: #259
#279 := [unit-resolution #270 #278]: #11
#569 := (>= #9 0::Int)
#541 := (not #277)
#181 := (= f5 #14)
#182 := (not #11)
#267 := (or #182 #181)
#268 := [def-axiom]: #267
#280 := [unit-resolution #268 #279]: #181
#556 := (= #13 f5)
#269 := (= #272 f5)
#17 := (:var 0 S3)
#18 := (f3 f4 #17)
#596 := (pattern #18)
#19 := (f6 f7 #18)
#20 := (= #19 #17)
#597 := (forall (vars (?v0 S3)) (:pat #596) #20)
#21 := (forall (vars (?v0 S3)) #20)
#600 := (iff #21 #597)
#598 := (iff #20 #20)
#599 := [refl]: #598
#601 := [quant-intro #599]: #600
#116 := (~ #21 #21)
#114 := (~ #20 #20)
#115 := [refl]: #114
#117 := [nnf-pos #115]: #116
#53 := [asserted]: #21
#106 := [mp~ #53 #117]: #21
#602 := [mp #106 #601]: #597
#588 := (not #597)
#590 := (or #588 #269)
#246 := [quant-inst #8]: #590
#281 := [unit-resolution #246 #602]: #269
#549 := (= #13 #272)
#553 := (= 0::Int #9)
#551 := (= #570 #9)
#557 := (= #9 #570)
#560 := (= f5 #272)
#274 := [symm #281]: #560
#561 := [monotonicity #274]: #557
#552 := [symm #561]: #551
#558 := (= 0::Int #570)
#559 := [hypothesis]: #277
#562 := [symm #559]: #558
#548 := [trans #562 #552]: #553
#554 := [monotonicity #548]: #549
#397 := [trans #554 #281]: #556
#398 := [trans #397 #280]: #266
#399 := [unit-resolution #278 #398]: false
#542 := [lemma #399]: #541
#292 := (or #569 #277)
#22 := (:var 0 Int)
#24 := (f6 f7 #22)
#603 := (pattern #24)
#25 := (f3 f4 #24)
#30 := (= #25 0::Int)
#64 := (>= #22 0::Int)
#94 := (or #64 #30)
#610 := (forall (vars (?v0 Int)) (:pat #603) #94)
#97 := (forall (vars (?v0 Int)) #94)
#613 := (iff #97 #610)
#611 := (iff #94 #94)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#110 := (~ #97 #97)
#118 := (~ #94 #94)
#119 := [refl]: #118
#111 := [nnf-pos #119]: #110
#29 := (< #22 0::Int)
#31 := (implies #29 #30)
#32 := (forall (vars (?v0 Int)) #31)
#100 := (iff #32 #97)
#78 := (not #29)
#79 := (or #78 #30)
#82 := (forall (vars (?v0 Int)) #79)
#98 := (iff #82 #97)
#95 := (iff #79 #94)
#92 := (iff #78 #64)
#65 := (not #64)
#87 := (not #65)
#90 := (iff #87 #64)
#91 := [rewrite]: #90
#88 := (iff #78 #87)
#85 := (iff #29 #65)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#93 := [trans #89 #91]: #92
#96 := [monotonicity #93]: #95
#99 := [quant-intro #96]: #98
#83 := (iff #32 #82)
#80 := (iff #31 #79)
#81 := [rewrite]: #80
#84 := [quant-intro #81]: #83
#101 := [trans #84 #99]: #100
#77 := [asserted]: #32
#102 := [mp #77 #101]: #97
#120 := [mp~ #102 #111]: #97
#615 := [mp #120 #614]: #610
#295 := (not #610)
#188 := (or #295 #569 #277)
#565 := (or #295 #292)
#288 := (iff #565 #188)
#289 := [rewrite]: #288
#566 := [quant-inst #9]: #565
#563 := [mp #566 #289]: #188
#555 := [unit-resolution #563 #615]: #292
#550 := [unit-resolution #555 #542]: #569
#544 := [th-lemma arith eq-propagate 0 0 #550 #279]: #543
#538 := [monotonicity #281]: #551
#539 := [trans #538 #544]: #277
[unit-resolution #542 #539]: false
unsat
812e594047adacc8648774584661958380724a55 62 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#56 := -1::Int
#57 := (* -1::Int #11)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (if #59 #11 #9)
#68 := (* -1::Int #62)
#69 := (+ #9 #68)
#70 := (<= #69 0::Int)
#75 := (not #70)
#12 := (<= #9 #11)
#13 := (if #12 #11 #9)
#14 := (<= #9 #13)
#15 := (not #14)
#76 := (iff #15 #75)
#73 := (iff #14 #70)
#65 := (<= #9 #62)
#71 := (iff #65 #70)
#72 := [rewrite]: #71
#66 := (iff #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#74 := [trans #67 #72]: #73
#77 := [monotonicity #74]: #76
#53 := [asserted]: #15
#78 := [mp #53 #77]: #75
#290 := (= #9 #62)
#206 := (not #59)
#599 := [hypothesis]: #59
#253 := (+ #11 #68)
#594 := (<= #253 0::Int)
#205 := (= #11 #62)
#291 := (or #206 #205)
#292 := [def-axiom]: #291
#600 := [unit-resolution #292 #599]: #205
#595 := (not #205)
#601 := (or #595 #594)
#239 := [th-lemma arith triangle-eq]: #601
#602 := [unit-resolution #239 #600]: #594
#604 := [th-lemma arith farkas 1 -1 1 #602 #78 #599]: false
#244 := [lemma #604]: #206
#283 := (or #59 #290)
#294 := [def-axiom]: #283
#245 := [unit-resolution #294 #244]: #290
#605 := (not #290)
#603 := (or #605 #70)
#606 := [th-lemma arith triangle-eq]: #603
[unit-resolution #606 #245 #78]: false
unsat
4d3aa2ede700d1c10ea9ca78d1cd42eb1d9ac7f6 62 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#56 := -1::Int
#59 := (* -1::Int #11)
#60 := (+ #9 #59)
#58 := (>= #60 0::Int)
#62 := (if #58 #9 #11)
#68 := (* -1::Int #62)
#253 := (+ #11 #68)
#239 := (<= #253 0::Int)
#290 := (= #11 #62)
#206 := (not #58)
#205 := (= #9 #62)
#598 := (not #205)
#69 := (+ #9 #68)
#70 := (<= #69 0::Int)
#75 := (not #70)
#12 := (<= #11 #9)
#13 := (if #12 #9 #11)
#14 := (<= #9 #13)
#15 := (not #14)
#76 := (iff #15 #75)
#73 := (iff #14 #70)
#65 := (<= #9 #62)
#71 := (iff #65 #70)
#72 := [rewrite]: #71
#66 := (iff #14 #65)
#63 := (= #13 #62)
#57 := (iff #12 #58)
#61 := [rewrite]: #57
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#74 := [trans #67 #72]: #73
#77 := [monotonicity #74]: #76
#53 := [asserted]: #15
#78 := [mp #53 #77]: #75
#594 := [hypothesis]: #205
#599 := (or #598 #70)
#600 := [th-lemma arith triangle-eq]: #599
#595 := [unit-resolution #600 #594 #78]: false
#601 := [lemma #595]: #598
#291 := (or #206 #205)
#292 := [def-axiom]: #291
#604 := [unit-resolution #292 #601]: #206
#283 := (or #58 #290)
#294 := [def-axiom]: #283
#244 := [unit-resolution #294 #604]: #290
#245 := (not #290)
#605 := (or #245 #239)
#603 := [th-lemma arith triangle-eq]: #605
#606 := [unit-resolution #603 #244]: #239
[th-lemma arith farkas 1 1 1 #78 #604 #606]: false
unsat
231f97166ce8df86a8011ff98d1fa9f68fa8398e 409 0
#2 := false
#29 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: (-> S4 Int S3)
decl f8 :: S3
#11 := f8
decl f4 :: S2
#7 := f4
#12 := (f3 f4 f8)
decl f7 :: S3
#9 := f7
#10 := (f3 f4 f7)
#61 := -1::Int
#72 := (* -1::Int #10)
#73 := (+ #72 #12)
decl f6 :: S4
#8 := f6
#76 := (f5 f6 #73)
#79 := (f3 f4 #76)
#62 := (* -1::Int #12)
#341 := (+ #62 #79)
#619 := (+ #10 #341)
#459 := (<= #619 0::Int)
#620 := (= #619 0::Int)
#63 := (+ #10 #62)
#91 := (<= #63 0::Int)
#94 := (if #91 #12 #10)
#100 := (* -1::Int #94)
#564 := (+ #10 #100)
#540 := (<= #564 0::Int)
#521 := (not #540)
#594 := (<= #79 0::Int)
#602 := (= #79 0::Int)
#243 := (not #91)
#487 := [hypothesis]: #243
#604 := (or #91 #602)
#30 := (:var 0 Int)
#32 := (f5 f6 #30)
#663 := (pattern #32)
#33 := (f3 f4 #32)
#38 := (= #33 0::Int)
#124 := (>= #30 0::Int)
#155 := (or #124 #38)
#670 := (forall (vars (?v0 Int)) (:pat #663) #155)
#158 := (forall (vars (?v0 Int)) #155)
#673 := (iff #158 #670)
#671 := (iff #155 #155)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#171 := (~ #158 #158)
#179 := (~ #155 #155)
#180 := [refl]: #179
#172 := [nnf-pos #180]: #171
#37 := (< #30 0::Int)
#39 := (implies #37 #38)
#40 := (forall (vars (?v0 Int)) #39)
#161 := (iff #40 #158)
#139 := (not #37)
#140 := (or #139 #38)
#143 := (forall (vars (?v0 Int)) #140)
#159 := (iff #143 #158)
#156 := (iff #140 #155)
#153 := (iff #139 #124)
#126 := (not #124)
#148 := (not #126)
#151 := (iff #148 #124)
#152 := [rewrite]: #151
#149 := (iff #139 #148)
#146 := (iff #37 #126)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#154 := [trans #150 #152]: #153
#157 := [monotonicity #154]: #156
#160 := [quant-intro #157]: #159
#144 := (iff #40 #143)
#141 := (iff #39 #140)
#142 := [rewrite]: #141
#145 := [quant-intro #142]: #144
#162 := [trans #145 #160]: #161
#138 := [asserted]: #40
#163 := [mp #138 #162]: #158
#181 := [mp~ #163 #172]: #158
#675 := [mp #181 #674]: #670
#353 := (not #670)
#605 := (or #353 #91 #602)
#630 := (>= #73 0::Int)
#603 := (or #630 #602)
#606 := (or #353 #603)
#593 := (iff #606 #605)
#607 := (or #353 #604)
#439 := (iff #607 #605)
#592 := [rewrite]: #439
#436 := (iff #606 #607)
#598 := (iff #603 #604)
#628 := (iff #630 #91)
#338 := [rewrite]: #628
#599 := [monotonicity #338]: #598
#438 := [monotonicity #599]: #436
#595 := [trans #438 #592]: #593
#600 := [quant-inst #73]: #606
#596 := [mp #600 #595]: #605
#488 := [unit-resolution #596 #675]: #604
#498 := [unit-resolution #488 #487]: #602
#478 := (not #602)
#499 := (or #478 #594)
#454 := [th-lemma arith triangle-eq]: #499
#455 := [unit-resolution #454 #498]: #594
#539 := (not #594)
#466 := (or #539 #521)
#66 := (f5 f6 #63)
#69 := (f3 f4 #66)
#647 := (* -1::Int #69)
#290 := (+ #62 #647)
#631 := (+ #10 #290)
#640 := (>= #631 0::Int)
#646 := (= #631 0::Int)
#654 := (>= #63 0::Int)
#573 := (+ #12 #100)
#574 := (<= #573 0::Int)
#558 := (not #574)
#349 := (<= #69 0::Int)
#643 := (= #69 0::Int)
#649 := (not #654)
#527 := [hypothesis]: #649
#629 := (or #654 #643)
#354 := (or #353 #654 #643)
#355 := (or #353 #629)
#625 := (iff #355 #354)
#626 := [rewrite]: #625
#249 := [quant-inst #63]: #355
#348 := [mp #249 #626]: #354
#514 := [unit-resolution #348 #675]: #629
#517 := [unit-resolution #514 #527]: #643
#518 := (not #643)
#519 := (or #518 #349)
#515 := [th-lemma arith triangle-eq]: #519
#520 := [unit-resolution #515 #517]: #349
#479 := (>= #10 0::Int)
#560 := (= #10 0::Int)
#332 := (f5 f6 #10)
#480 := (f3 f4 #332)
#481 := (= #480 0::Int)
#554 := (not #479)
#541 := [hypothesis]: #554
#440 := (or #479 #481)
#585 := (or #353 #479 #481)
#586 := (or #353 #440)
#474 := (iff #586 #585)
#489 := [rewrite]: #474
#589 := [quant-inst #10]: #586
#491 := [mp #589 #489]: #585
#543 := [unit-resolution #491 #675]: #440
#544 := [unit-resolution #543 #541]: #481
#548 := (= #10 #480)
#546 := (= f7 #332)
#333 := (= #332 f7)
#24 := (:var 0 S3)
#25 := (f3 f4 #24)
#656 := (pattern #25)
#26 := (f5 f6 #25)
#27 := (= #26 #24)
#657 := (forall (vars (?v0 S3)) (:pat #656) #27)
#28 := (forall (vars (?v0 S3)) #27)
#660 := (iff #28 #657)
#658 := (iff #27 #27)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#177 := (~ #28 #28)
#175 := (~ #27 #27)
#176 := [refl]: #175
#178 := [nnf-pos #176]: #177
#114 := [asserted]: #28
#167 := [mp~ #114 #178]: #28
#662 := [mp #167 #661]: #657
#313 := (not #657)
#648 := (or #313 #333)
#650 := [quant-inst #9]: #648
#545 := [unit-resolution #650 #662]: #333
#547 := [symm #545]: #546
#549 := [monotonicity #547]: #548
#550 := [trans #549 #544]: #560
#551 := (not #560)
#552 := (or #551 #479)
#542 := [th-lemma arith triangle-eq]: #552
#553 := [unit-resolution #542 #541 #550]: false
#531 := [lemma #553]: #479
#500 := (or #654 #91)
#446 := [th-lemma arith farkas 1 1]: #500
#501 := [unit-resolution #446 #527]: #91
#621 := (or #243 #620)
#34 := (= #33 #30)
#129 := (or #126 #34)
#664 := (forall (vars (?v0 Int)) (:pat #663) #129)
#132 := (forall (vars (?v0 Int)) #129)
#667 := (iff #132 #664)
#665 := (iff #129 #129)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#169 := (~ #132 #132)
#168 := (~ #129 #129)
#165 := [refl]: #168
#170 := [nnf-pos #165]: #169
#31 := (<= 0::Int #30)
#35 := (implies #31 #34)
#36 := (forall (vars (?v0 Int)) #35)
#135 := (iff #36 #132)
#116 := (not #31)
#117 := (or #116 #34)
#120 := (forall (vars (?v0 Int)) #117)
#133 := (iff #120 #132)
#130 := (iff #117 #129)
#127 := (iff #116 #126)
#123 := (iff #31 #124)
#125 := [rewrite]: #123
#128 := [monotonicity #125]: #127
#131 := [monotonicity #128]: #130
#134 := [quant-intro #131]: #133
#121 := (iff #36 #120)
#118 := (iff #35 #117)
#119 := [rewrite]: #118
#122 := [quant-intro #119]: #121
#136 := [trans #122 #134]: #135
#115 := [asserted]: #36
#137 := [mp #115 #136]: #132
#166 := [mp~ #137 #170]: #132
#669 := [mp #166 #668]: #664
#633 := (not #664)
#611 := (or #633 #243 #620)
#627 := (= #79 #73)
#352 := (not #630)
#624 := (or #352 #627)
#612 := (or #633 #624)
#616 := (iff #612 #611)
#608 := (or #633 #621)
#615 := (iff #608 #611)
#610 := [rewrite]: #615
#609 := (iff #612 #608)
#618 := (iff #624 #621)
#335 := (iff #627 #620)
#617 := [rewrite]: #335
#339 := (iff #352 #243)
#340 := [monotonicity #338]: #339
#622 := [monotonicity #340 #617]: #618
#614 := [monotonicity #622]: #609
#457 := [trans #614 #610]: #616
#613 := [quant-inst #73]: #612
#458 := [mp #613 #457]: #611
#482 := [unit-resolution #458 #669]: #621
#506 := [unit-resolution #482 #501]: #620
#507 := (not #620)
#502 := (or #507 #459)
#508 := [th-lemma arith triangle-eq]: #502
#476 := [unit-resolution #508 #506]: #459
#557 := (not #459)
#555 := (not #349)
#559 := (or #554 #555 #557 #558)
#565 := [hypothesis]: #574
#566 := [hypothesis]: #479
#567 := [hypothesis]: #459
#101 := (+ #79 #100)
#102 := (+ #69 #101)
#103 := (<= #102 0::Int)
#108 := (not #103)
#20 := (<= #10 #12)
#21 := (if #20 #12 #10)
#16 := (- #12 #10)
#17 := (f5 f6 #16)
#18 := (f3 f4 #17)
#13 := (- #10 #12)
#14 := (f5 f6 #13)
#15 := (f3 f4 #14)
#19 := (+ #15 #18)
#22 := (<= #19 #21)
#23 := (not #22)
#111 := (iff #23 #108)
#82 := (+ #69 #79)
#85 := (<= #82 #21)
#88 := (not #85)
#109 := (iff #88 #108)
#106 := (iff #85 #103)
#97 := (<= #82 #94)
#104 := (iff #97 #103)
#105 := [rewrite]: #104
#98 := (iff #85 #97)
#95 := (= #21 #94)
#92 := (iff #20 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#99 := [monotonicity #96]: #98
#107 := [trans #99 #105]: #106
#110 := [monotonicity #107]: #109
#89 := (iff #23 #88)
#86 := (iff #22 #85)
#83 := (= #19 #82)
#80 := (= #18 #79)
#77 := (= #17 #76)
#74 := (= #16 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#70 := (= #15 #69)
#67 := (= #14 #66)
#64 := (= #13 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#84 := [monotonicity #71 #81]: #83
#87 := [monotonicity #84]: #86
#90 := [monotonicity #87]: #89
#112 := [trans #90 #110]: #111
#60 := [asserted]: #23
#113 := [mp #60 #112]: #108
#563 := [hypothesis]: #349
#568 := [th-lemma arith farkas 1 -1 1 -1 1 #563 #113 #567 #566 #565]: false
#556 := [lemma #568]: #559
#483 := [unit-resolution #556 #476 #531 #520]: #558
#242 := (= #12 #94)
#328 := (or #243 #242)
#329 := [def-axiom]: #328
#442 := [unit-resolution #329 #501]: #242
#473 := (not #242)
#475 := (or #473 #574)
#477 := [th-lemma arith triangle-eq]: #475
#484 := [unit-resolution #477 #442 #483]: false
#486 := [lemma #484]: #654
#295 := (or #649 #646)
#634 := (or #633 #649 #646)
#305 := (= #69 #63)
#310 := (or #649 #305)
#635 := (or #633 #310)
#641 := (iff #635 #634)
#637 := (or #633 #295)
#276 := (iff #637 #634)
#639 := [rewrite]: #276
#632 := (iff #635 #637)
#296 := (iff #310 #295)
#306 := (iff #305 #646)
#294 := [rewrite]: #306
#297 := [monotonicity #294]: #296
#638 := [monotonicity #297]: #632
#281 := [trans #638 #639]: #641
#636 := [quant-inst #63]: #635
#282 := [mp #636 #281]: #634
#460 := [unit-resolution #282 #669]: #295
#461 := [unit-resolution #460 #486]: #646
#462 := (not #646)
#463 := (or #462 #640)
#464 := [th-lemma arith triangle-eq]: #463
#465 := [unit-resolution #464 #461]: #640
#588 := (>= #12 0::Int)
#526 := (= #12 0::Int)
#330 := (f5 f6 #12)
#490 := (f3 f4 #330)
#492 := (= #490 0::Int)
#533 := (not #588)
#528 := [hypothesis]: #533
#485 := (or #588 #492)
#495 := (or #353 #588 #492)
#496 := (or #353 #485)
#590 := (iff #496 #495)
#587 := [rewrite]: #590
#497 := [quant-inst #12]: #496
#591 := [mp #497 #587]: #495
#529 := [unit-resolution #591 #675]: #485
#524 := [unit-resolution #529 #528]: #492
#505 := (= #12 #490)
#503 := (= f8 #330)
#334 := (= #330 f8)
#644 := (or #313 #334)
#318 := [quant-inst #11]: #644
#530 := [unit-resolution #318 #662]: #334
#504 := [symm #530]: #503
#398 := [monotonicity #504]: #505
#509 := [trans #398 #524]: #526
#510 := (not #526)
#511 := (or #510 #588)
#516 := [th-lemma arith triangle-eq]: #511
#512 := [unit-resolution #516 #528 #509]: false
#513 := [lemma #512]: #588
#525 := (not #640)
#522 := (or #533 #539 #525 #521)
#534 := [hypothesis]: #540
#535 := [hypothesis]: #588
#536 := [hypothesis]: #640
#537 := [hypothesis]: #594
#538 := [th-lemma arith farkas -1 1 -1 -1 1 #113 #537 #536 #535 #534]: false
#523 := [lemma #538]: #522
#467 := [unit-resolution #523 #513 #465]: #466
#468 := [unit-resolution #467 #455]: #521
#327 := (= #10 #94)
#320 := (or #91 #327)
#331 := [def-axiom]: #320
#469 := [unit-resolution #331 #487]: #327
#470 := (not #327)
#471 := (or #470 #540)
#456 := [th-lemma arith triangle-eq]: #471
#472 := [unit-resolution #456 #469 #468]: false
#433 := [lemma #472]: #91
#434 := [unit-resolution #482 #433]: #620
#441 := [unit-resolution #508 #434]: #459
#443 := [unit-resolution #329 #433]: #242
#444 := [unit-resolution #477 #443]: #574
#445 := (or #349 #525 #243)
#447 := [th-lemma arith assign-bounds 1 -1]: #445
#448 := [unit-resolution #447 #465 #433]: #349
#449 := (or #555 #557 #558)
#450 := [unit-resolution #556 #531]: #449
[unit-resolution #450 #448 #444 #441]: false
unsat
f2081c9ce72ee506fa1abe41bc9504adb41b6a70 109 0
#2 := false
#28 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
decl f7 :: S3
#13 := f7
#14 := (f3 f4 f7)
#67 := -1::Int
#74 := (* -1::Int #14)
#86 := (+ #9 #74)
#87 := (<= #86 0::Int)
#90 := (if #87 #14 #9)
#96 := (* -1::Int #90)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#97 := (+ #11 #96)
#98 := (<= #97 0::Int)
#99 := (not #98)
#75 := (+ #11 #74)
#76 := (<= #75 0::Int)
#77 := (not #76)
#70 := (* -1::Int #11)
#71 := (+ #9 #70)
#69 := (>= #71 0::Int)
#68 := (not #69)
#80 := (and #68 #77)
#83 := (not #80)
#104 := (or #83 #99)
#107 := (not #104)
#17 := (<= #9 #14)
#18 := (if #17 #14 #9)
#19 := (< #18 #11)
#15 := (< #14 #11)
#12 := (< #9 #11)
#16 := (and #12 #15)
#20 := (implies #16 #19)
#21 := (not #20)
#110 := (iff #21 #107)
#60 := (not #16)
#61 := (or #60 #19)
#64 := (not #61)
#108 := (iff #64 #107)
#105 := (iff #61 #104)
#102 := (iff #19 #99)
#93 := (< #90 #11)
#100 := (iff #93 #99)
#101 := [rewrite]: #100
#94 := (iff #19 #93)
#91 := (= #18 #90)
#88 := (iff #17 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#95 := [monotonicity #92]: #94
#103 := [trans #95 #101]: #102
#84 := (iff #60 #83)
#81 := (iff #16 #80)
#78 := (iff #15 #77)
#79 := [rewrite]: #78
#72 := (iff #12 #68)
#73 := [rewrite]: #72
#82 := [monotonicity #73 #79]: #81
#85 := [monotonicity #82]: #84
#106 := [monotonicity #85 #103]: #105
#109 := [monotonicity #106]: #108
#65 := (iff #21 #64)
#62 := (iff #20 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#111 := [trans #66 #109]: #110
#59 := [asserted]: #21
#112 := [mp #59 #111]: #107
#116 := [not-or-elim #112]: #98
#113 := [not-or-elim #112]: #80
#114 := [and-elim #113]: #68
#644 := (+ #9 #96)
#627 := (>= #644 0::Int)
#330 := (= #9 #90)
#246 := (not #87)
#245 := (= #14 #90)
#628 := (not #245)
#642 := (+ #14 #96)
#633 := (>= #642 0::Int)
#357 := (not #633)
#115 := [and-elim #113]: #77
#355 := [hypothesis]: #633
#356 := [th-lemma arith farkas -1 -1 1 #355 #115 #116]: false
#358 := [lemma #356]: #357
#252 := [hypothesis]: #245
#629 := (or #628 #633)
#351 := [th-lemma arith triangle-eq]: #629
#352 := [unit-resolution #351 #252 #358]: false
#626 := [lemma #352]: #628
#331 := (or #246 #245)
#332 := [def-axiom]: #331
#631 := [unit-resolution #332 #626]: #246
#323 := (or #87 #330)
#334 := [def-axiom]: #323
#341 := [unit-resolution #334 #631]: #330
#342 := (not #330)
#343 := (or #342 #627)
#344 := [th-lemma arith triangle-eq]: #343
#622 := [unit-resolution #344 #341]: #627
[th-lemma arith farkas -1 1 1 #622 #114 #116]: false
unsat
173bb4f0b36bcf659115903eaed06f43d1cc4af2 149 0
#2 := false
decl f6 :: S3
#10 := f6
decl f5 :: S3
#8 := f5
#24 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#58 := -1::Int
#59 := (* -1::Int #11)
#9 := (f3 f4 f5)
#60 := (+ #9 #59)
#68 := (>= #60 0::Int)
#70 := (if #68 f5 f6)
#61 := (<= #60 0::Int)
#64 := (if #61 f6 f5)
#73 := (= #64 #70)
#296 := (= f5 #70)
#557 := (iff #296 #73)
#403 := (iff #73 #296)
#607 := (= #64 f5)
#291 := (= f5 #64)
#207 := (not #61)
#206 := (= f6 #64)
#568 := (not #206)
#423 := (iff #206 #73)
#421 := (iff #73 #206)
#573 := (= #64 f6)
#574 := (iff #573 #206)
#580 := [commutativity]: #574
#578 := (iff #73 #573)
#577 := (= #70 f6)
#297 := (= f6 #70)
#598 := (not #297)
#599 := [hypothesis]: #598
#612 := (or #68 #297)
#614 := [def-axiom]: #612
#605 := [unit-resolution #614 #599]: #68
#294 := (not #68)
#298 := (or #294 #296)
#277 := [def-axiom]: #298
#245 := [unit-resolution #277 #605]: #296
#581 := (= f6 f5)
decl f7 :: (-> S4 Int S3)
decl f8 :: S4
#18 := f8
#271 := (f7 f8 #9)
#401 := (= #271 f5)
#19 := (:var 0 S3)
#20 := (f3 f4 #19)
#620 := (pattern #20)
#21 := (f7 f8 #20)
#22 := (= #21 #19)
#621 := (forall (vars (?v0 S3)) (:pat #620) #22)
#23 := (forall (vars (?v0 S3)) #22)
#624 := (iff #23 #621)
#622 := (iff #22 #22)
#623 := [refl]: #622
#625 := [quant-intro #623]: #624
#141 := (~ #23 #23)
#139 := (~ #22 #22)
#140 := [refl]: #139
#142 := [nnf-pos #140]: #141
#56 := [asserted]: #23
#131 := [mp~ #56 #142]: #23
#626 := [mp #131 #625]: #621
#283 := (not #621)
#615 := (or #283 #401)
#616 := [quant-inst #8]: #615
#246 := [unit-resolution #616 #626]: #401
#584 := (= f6 #271)
#608 := (f7 f8 #11)
#305 := (= #608 #271)
#588 := (= #11 #9)
#587 := (= #9 #11)
#213 := (not #291)
#76 := (not #73)
#589 := (iff #76 #213)
#318 := (iff #73 #291)
#316 := (iff #607 #291)
#317 := [commutativity]: #316
#593 := (iff #73 #607)
#606 := (= #70 f5)
#604 := [symm #245]: #606
#594 := [monotonicity #604]: #593
#319 := [trans #594 #317]: #318
#590 := [monotonicity #319]: #589
#14 := (<= #11 #9)
#15 := (if #14 f5 f6)
#12 := (<= #9 #11)
#13 := (if #12 f6 f5)
#16 := (= #13 #15)
#17 := (not #16)
#77 := (iff #17 #76)
#74 := (iff #16 #73)
#71 := (= #15 #70)
#67 := (iff #14 #68)
#69 := [rewrite]: #67
#72 := [monotonicity #69]: #71
#65 := (= #13 #64)
#62 := (iff #12 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#75 := [monotonicity #66 #72]: #74
#78 := [monotonicity #75]: #77
#55 := [asserted]: #17
#79 := [mp #55 #78]: #76
#312 := [mp #79 #590]: #213
#284 := (or #61 #291)
#295 := [def-axiom]: #284
#313 := [unit-resolution #295 #312]: #61
#591 := [th-lemma arith eq-propagate 1 1 #605 #313]: #587
#592 := [symm #591]: #588
#583 := [monotonicity #592]: #305
#303 := (= f6 #608)
#282 := (= #608 f6)
#613 := (or #283 #282)
#619 := [quant-inst #10]: #613
#302 := [unit-resolution #619 #626]: #282
#304 := [symm #302]: #303
#299 := [trans #304 #583]: #584
#585 := [trans #299 #246]: #581
#582 := [trans #585 #245]: #297
#586 := [unit-resolution #599 #582]: false
#575 := [lemma #586]: #297
#572 := [symm #575]: #577
#579 := [monotonicity #572]: #578
#422 := [trans #579 #580]: #421
#565 := [symm #422]: #423
#576 := [hypothesis]: #206
#566 := [mp #576 #565]: #73
#567 := [unit-resolution #79 #566]: false
#562 := [lemma #567]: #568
#292 := (or #207 #206)
#293 := [def-axiom]: #292
#563 := [unit-resolution #293 #562]: #207
#400 := [unit-resolution #295 #563]: #291
#402 := [symm #400]: #607
#556 := [monotonicity #402]: #403
#559 := [symm #556]: #557
#569 := (or #68 #61)
#570 := [th-lemma arith farkas 1 1]: #569
#564 := [unit-resolution #570 #563]: #68
#571 := [unit-resolution #277 #564]: #296
#560 := [mp #571 #559]: #73
[unit-resolution #79 #560]: false
unsat
c843701a69b18945f314fe27c203badcfa31d469 137 0
#2 := false
decl f5 :: S3
#8 := f5
decl f6 :: (-> S4 Int S3)
#10 := 0::Int
decl f7 :: S4
#12 := f7
#13 := (f6 f7 0::Int)
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#11 := (<= #9 0::Int)
#14 := (if #11 #13 f5)
#266 := (= f5 #14)
#181 := (= #13 #14)
#568 := (not #266)
#15 := (= #14 f5)
#16 := (not #15)
#278 := (iff #16 #568)
#567 := (iff #15 #266)
#564 := [commutativity]: #567
#279 := [monotonicity #564]: #278
#52 := [asserted]: #16
#280 := [mp #52 #279]: #568
#259 := (or #11 #266)
#270 := [def-axiom]: #259
#281 := [unit-resolution #270 #280]: #11
#182 := (not #11)
#267 := (or #182 #181)
#268 := [def-axiom]: #267
#548 := [unit-resolution #268 #281]: #181
#399 := (= f5 #13)
#272 := (f6 f7 #9)
#397 := (= #272 #13)
#274 := (= #9 0::Int)
#252 := (f3 f4 #272)
#377 := (= #252 0::Int)
#273 := (>= #9 0::Int)
#289 := (not #377)
#563 := [hypothesis]: #289
#584 := (or #273 #377)
#22 := (:var 0 Int)
#24 := (f6 f7 #22)
#603 := (pattern #24)
#25 := (f3 f4 #24)
#30 := (= #25 0::Int)
#64 := (>= #22 0::Int)
#94 := (or #64 #30)
#610 := (forall (vars (?v0 Int)) (:pat #603) #94)
#97 := (forall (vars (?v0 Int)) #94)
#613 := (iff #97 #610)
#611 := (iff #94 #94)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#110 := (~ #97 #97)
#118 := (~ #94 #94)
#119 := [refl]: #118
#111 := [nnf-pos #119]: #110
#29 := (< #22 0::Int)
#31 := (implies #29 #30)
#32 := (forall (vars (?v0 Int)) #31)
#100 := (iff #32 #97)
#78 := (not #29)
#79 := (or #78 #30)
#82 := (forall (vars (?v0 Int)) #79)
#98 := (iff #82 #97)
#95 := (iff #79 #94)
#92 := (iff #78 #64)
#65 := (not #64)
#87 := (not #65)
#90 := (iff #87 #64)
#91 := [rewrite]: #90
#88 := (iff #78 #87)
#85 := (iff #29 #65)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#93 := [trans #89 #91]: #92
#96 := [monotonicity #93]: #95
#99 := [quant-intro #96]: #98
#83 := (iff #32 #82)
#80 := (iff #31 #79)
#81 := [rewrite]: #80
#84 := [quant-intro #81]: #83
#101 := [trans #84 #99]: #100
#77 := [asserted]: #32
#102 := [mp #77 #101]: #97
#120 := [mp~ #102 #111]: #97
#615 := [mp #120 #614]: #610
#591 := (not #610)
#592 := (or #591 #273 #377)
#593 := (or #591 #584)
#589 := (iff #593 #592)
#595 := [rewrite]: #589
#594 := [quant-inst #9]: #593
#585 := [mp #594 #595]: #592
#559 := [unit-resolution #585 #615]: #584
#560 := [unit-resolution #559 #563]: #273
#557 := [th-lemma arith eq-propagate 0 0 #560 #281]: #274
#558 := (= #252 #9)
#269 := (= #272 f5)
#17 := (:var 0 S3)
#18 := (f3 f4 #17)
#596 := (pattern #18)
#19 := (f6 f7 #18)
#20 := (= #19 #17)
#597 := (forall (vars (?v0 S3)) (:pat #596) #20)
#21 := (forall (vars (?v0 S3)) #20)
#600 := (iff #21 #597)
#598 := (iff #20 #20)
#599 := [refl]: #598
#601 := [quant-intro #599]: #600
#116 := (~ #21 #21)
#114 := (~ #20 #20)
#115 := [refl]: #114
#117 := [nnf-pos #115]: #116
#53 := [asserted]: #21
#106 := [mp~ #53 #117]: #21
#602 := [mp #106 #601]: #597
#588 := (not #597)
#590 := (or #588 #269)
#246 := [quant-inst #8]: #590
#561 := [unit-resolution #246 #602]: #269
#562 := [monotonicity #561]: #558
#551 := [trans #562 #557]: #377
#552 := [unit-resolution #563 #551]: false
#553 := [lemma #552]: #377
#555 := (= #9 #252)
#549 := (= f5 #272)
#554 := [symm #561]: #549
#550 := [monotonicity #554]: #555
#556 := [trans #550 #553]: #274
#398 := [monotonicity #556]: #397
#541 := [trans #554 #398]: #399
#542 := [trans #541 #548]: #266
[unit-resolution #280 #542]: false
unsat
39efecfe038f83ab2d1aa99967fadc5bc10be8c6 114 0
#2 := false
#7 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#273 := (= #10 0::Int)
decl f6 :: (-> S4 Int S3)
decl f7 :: S4
#13 := f7
#270 := (f6 f7 #10)
#271 := (f3 f4 #270)
#272 := (= #271 0::Int)
#19 := (:var 0 Int)
#21 := (f6 f7 #19)
#607 := (pattern #21)
#22 := (f3 f4 #21)
#27 := (= #22 0::Int)
#68 := (>= #19 0::Int)
#98 := (or #68 #27)
#614 := (forall (vars (?v0 Int)) (:pat #607) #98)
#101 := (forall (vars (?v0 Int)) #98)
#617 := (iff #101 #614)
#615 := (iff #98 #98)
#616 := [refl]: #615
#618 := [quant-intro #616]: #617
#114 := (~ #101 #101)
#122 := (~ #98 #98)
#123 := [refl]: #122
#115 := [nnf-pos #123]: #114
#26 := (< #19 0::Int)
#28 := (implies #26 #27)
#29 := (forall (vars (?v0 Int)) #28)
#104 := (iff #29 #101)
#82 := (not #26)
#83 := (or #82 #27)
#86 := (forall (vars (?v0 Int)) #83)
#102 := (iff #86 #101)
#99 := (iff #83 #98)
#96 := (iff #82 #68)
#69 := (not #68)
#91 := (not #69)
#94 := (iff #91 #68)
#95 := [rewrite]: #94
#92 := (iff #82 #91)
#89 := (iff #26 #69)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#97 := [trans #93 #95]: #96
#100 := [monotonicity #97]: #99
#103 := [quant-intro #100]: #102
#87 := (iff #29 #86)
#84 := (iff #28 #83)
#85 := [rewrite]: #84
#88 := [quant-intro #85]: #87
#105 := [trans #88 #103]: #104
#81 := [asserted]: #29
#106 := [mp #81 #105]: #101
#124 := [mp~ #106 #115]: #101
#619 := [mp #124 #618]: #614
#54 := (>= #10 0::Int)
#55 := (not #54)
#11 := (<= 0::Int #10)
#12 := (not #11)
#56 := (iff #12 #55)
#52 := (iff #11 #54)
#53 := [rewrite]: #52
#57 := [monotonicity #53]: #56
#49 := [asserted]: #12
#58 := [mp #49 #57]: #55
#256 := (not #614)
#592 := (or #256 #54 #272)
#276 := (or #54 #272)
#594 := (or #256 #276)
#381 := (iff #594 #592)
#588 := [rewrite]: #381
#250 := [quant-inst #10]: #594
#261 := [mp #250 #588]: #592
#262 := [unit-resolution #261 #58 #619]: #272
#598 := (= #10 #271)
#596 := (= f5 #270)
#186 := (= #270 f5)
#14 := (:var 0 S3)
#15 := (f3 f4 #14)
#600 := (pattern #15)
#16 := (f6 f7 #15)
#17 := (= #16 #14)
#601 := (forall (vars (?v0 S3)) (:pat #600) #17)
#18 := (forall (vars (?v0 S3)) #17)
#604 := (iff #18 #601)
#602 := (iff #17 #17)
#603 := [refl]: #602
#605 := [quant-intro #603]: #604
#120 := (~ #18 #18)
#118 := (~ #17 #17)
#119 := [refl]: #118
#121 := [nnf-pos #119]: #120
#50 := [asserted]: #18
#110 := [mp~ #50 #121]: #18
#606 := [mp #110 #605]: #601
#263 := (not #601)
#274 := (or #263 #186)
#275 := [quant-inst #9]: #274
#595 := [unit-resolution #275 #606]: #186
#597 := [symm #595]: #596
#593 := [monotonicity #597]: #598
#599 := [trans #593 #262]: #273
#589 := (not #273)
#248 := (or #589 #54)
#253 := [th-lemma arith triangle-eq]: #248
[unit-resolution #253 #58 #599]: false
unsat
f7e768909a7c1b933ad0d893349ffd5af448126c 88 0
#2 := false
decl f6 :: (-> S4 Int S3)
#12 := 1::Int
decl f7 :: S4
#15 := f7
#16 := (f6 f7 1::Int)
decl f5 :: S3
#9 := f5
#17 := (= f5 #16)
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#299 := (f6 f7 #10)
#325 := (= #299 #16)
#616 := (= #16 #299)
#615 := (= 1::Int #10)
#253 := (= #10 1::Int)
#13 := (<= #10 1::Int)
#7 := 0::Int
#63 := (<= #10 0::Int)
#64 := (not #63)
#67 := (and #64 #13)
#70 := (not #67)
#73 := (or #70 #17)
#76 := (not #73)
#11 := (< 0::Int #10)
#14 := (and #11 #13)
#18 := (implies #14 #17)
#19 := (not #18)
#79 := (iff #19 #76)
#56 := (not #14)
#57 := (or #56 #17)
#60 := (not #57)
#77 := (iff #60 #76)
#74 := (iff #57 #73)
#71 := (iff #56 #70)
#68 := (iff #14 #67)
#65 := (iff #11 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#61 := (iff #19 #60)
#58 := (iff #18 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#80 := [trans #62 #78]: #79
#55 := [asserted]: #19
#81 := [mp #55 #80]: #76
#82 := [not-or-elim #81]: #67
#84 := [and-elim #82]: #13
#83 := [and-elim #82]: #64
#254 := [th-lemma arith eq-propagate 0 0 #83 #84]: #253
#613 := [symm #254]: #615
#602 := [monotonicity #613]: #616
#326 := [symm #602]: #325
#603 := (= f5 #299)
#215 := (= #299 f5)
#20 := (:var 0 S3)
#21 := (f3 f4 #20)
#629 := (pattern #21)
#22 := (f6 f7 #21)
#23 := (= #22 #20)
#630 := (forall (vars (?v0 S3)) (:pat #629) #23)
#24 := (forall (vars (?v0 S3)) #23)
#633 := (iff #24 #630)
#631 := (iff #23 #23)
#632 := [refl]: #631
#634 := [quant-intro #632]: #633
#154 := (~ #24 #24)
#152 := (~ #23 #23)
#153 := [refl]: #152
#155 := [nnf-pos #153]: #154
#87 := [asserted]: #24
#144 := [mp~ #87 #155]: #24
#635 := [mp #144 #634]: #630
#292 := (not #630)
#303 := (or #292 #215)
#304 := [quant-inst #9]: #303
#614 := [unit-resolution #304 #635]: #215
#310 := [symm #614]: #603
#327 := [trans #310 #326]: #17
#85 := (not #17)
#86 := [not-or-elim #81]: #85
[unit-resolution #86 #327]: false
unsat
e9599784ae48c0a76ee6ce769530275315a7c306 22 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#10 := (<= #9 #9)
#11 := (not #10)
#59 := (iff #11 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #11 #54)
#52 := (iff #10 true)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#49 := [asserted]: #11
[mp #49 #60]: false
unsat
bc3dab857c3b884433a23e55254b9c450e3d29a1 56 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#13 := 3::Int
#15 := (* 3::Int #11)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#14 := (* 3::Int #9)
#16 := (<= #14 #15)
#12 := (<= #9 #11)
#17 := (implies #12 #16)
#18 := (not #17)
#89 := (iff #18 false)
#57 := (not #12)
#58 := (or #57 #16)
#61 := (not #58)
#87 := (iff #61 false)
#1 := true
#82 := (not true)
#85 := (iff #82 false)
#86 := [rewrite]: #85
#83 := (iff #61 #82)
#80 := (iff #58 true)
#25 := 0::Int
#64 := -1::Int
#65 := (* -1::Int #11)
#66 := (+ #9 #65)
#67 := (<= #66 0::Int)
#70 := (not #67)
#75 := (or #70 #67)
#78 := (iff #75 true)
#79 := [rewrite]: #78
#76 := (iff #58 #75)
#73 := (iff #16 #67)
#74 := [rewrite]: #73
#71 := (iff #57 #70)
#68 := (iff #12 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#77 := [monotonicity #72 #74]: #76
#81 := [trans #77 #79]: #80
#84 := [monotonicity #81]: #83
#88 := [trans #84 #86]: #87
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#90 := [trans #63 #88]: #89
#56 := [asserted]: #18
[mp #56 #90]: false
unsat
782e867b2e6b539b485b3c801c1684af80e8e4eb 61 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#13 := 3::Int
#15 := (* 3::Int #11)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#14 := (* 3::Int #9)
#16 := (< #14 #15)
#12 := (< #9 #11)
#17 := (implies #12 #16)
#18 := (not #17)
#94 := (iff #18 false)
#57 := (not #12)
#58 := (or #57 #16)
#61 := (not #58)
#92 := (iff #61 false)
#1 := true
#87 := (not true)
#90 := (iff #87 false)
#91 := [rewrite]: #90
#88 := (iff #61 #87)
#85 := (iff #58 true)
#25 := 0::Int
#64 := -1::Int
#67 := (* -1::Int #11)
#68 := (+ #9 #67)
#66 := (>= #68 0::Int)
#65 := (not #66)
#79 := (or #66 #65)
#83 := (iff #79 true)
#84 := [rewrite]: #83
#81 := (iff #58 #79)
#80 := (iff #16 #65)
#78 := [rewrite]: #80
#76 := (iff #57 #66)
#71 := (not #65)
#74 := (iff #71 #66)
#75 := [rewrite]: #74
#72 := (iff #57 #71)
#69 := (iff #12 #65)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#82 := [monotonicity #77 #78]: #81
#86 := [trans #82 #84]: #85
#89 := [monotonicity #86]: #88
#93 := [trans #89 #91]: #92
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#95 := [trans #63 #93]: #94
#56 := [asserted]: #18
[mp #56 #95]: false
unsat
94669687013e4a07eb52cc8d3181b4486a98fb64 57 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#61 := -1::Int
#64 := (* -1::Int #11)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#65 := (+ #9 #64)
#75 := (<= #65 0::Int)
#88 := (not #75)
#63 := (>= #65 0::Int)
#78 := (or #63 #75)
#81 := (not #78)
#13 := (<= #9 #11)
#12 := (< #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#84 := (iff #15 #81)
#54 := (not #12)
#55 := (or #54 #13)
#58 := (not #55)
#82 := (iff #58 #81)
#79 := (iff #55 #78)
#76 := (iff #13 #75)
#77 := [rewrite]: #76
#73 := (iff #54 #63)
#62 := (not #63)
#68 := (not #62)
#71 := (iff #68 #63)
#72 := [rewrite]: #71
#69 := (iff #54 #68)
#66 := (iff #12 #62)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#80 := [monotonicity #74 #77]: #79
#83 := [monotonicity #80]: #82
#59 := (iff #15 #58)
#56 := (iff #14 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#85 := [trans #60 #83]: #84
#53 := [asserted]: #15
#86 := [mp #53 #85]: #81
#89 := [not-or-elim #86]: #88
#87 := [not-or-elim #86]: #62
#218 := (or #75 #63)
#303 := [th-lemma arith farkas 1 1]: #218
#219 := [unit-resolution #303 #87]: #75
[unit-resolution #219 #89]: false
unsat
7c33b6e5c3b47260d57df088f1707958b9c6cfb4 78 0
#2 := false
#74 := -1::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#77 := (* -1::Int #11)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#78 := (+ #9 #77)
#88 := (<= #78 -1::Int)
#24 := 0::Int
#76 := (>= #78 0::Int)
#75 := (not #76)
#224 := (not #88)
#277 := [hypothesis]: #224
#315 := (or #75 #88)
#91 := (iff #76 #88)
#13 := 1::Int
#14 := (+ #9 1::Int)
#15 := (<= #14 #11)
#12 := (< #9 #11)
#16 := (iff #12 #15)
#17 := (not #16)
#94 := (iff #17 #91)
#56 := (+ 1::Int #9)
#59 := (<= #56 #11)
#68 := (not #12)
#69 := (iff #68 #59)
#92 := (iff #69 #91)
#89 := (iff #59 #88)
#90 := [rewrite]: #89
#86 := (iff #68 #76)
#81 := (not #75)
#84 := (iff #81 #76)
#85 := [rewrite]: #84
#82 := (iff #68 #81)
#79 := (iff #12 #75)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#87 := [trans #83 #85]: #86
#93 := [monotonicity #87 #90]: #92
#72 := (iff #17 #69)
#62 := (iff #12 #59)
#65 := (not #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #17 #65)
#63 := (iff #16 #62)
#60 := (iff #15 #59)
#57 := (= #14 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#73 := [trans #67 #71]: #72
#95 := [trans #73 #93]: #94
#55 := [asserted]: #17
#96 := [mp #55 #95]: #91
#309 := (not #91)
#313 := (or #75 #88 #309)
#314 := [def-axiom]: #313
#312 := [unit-resolution #314 #96]: #315
#278 := [unit-resolution #312 #277]: #75
#614 := [th-lemma arith farkas 1 1 #277 #278]: false
#620 := [lemma #614]: #88
#258 := (or #224 #75)
#621 := [th-lemma arith farkas 1 1]: #258
#623 := [unit-resolution #621 #620]: #75
#311 := (or #76 #224)
#225 := (or #76 #224 #309)
#310 := [def-axiom]: #225
#302 := [unit-resolution #310 #96]: #311
[unit-resolution #302 #623 #620]: false
unsat
1ddff06a9124711b00597d9f7f79edb1f5ac02da 19 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#10 := (< #9 #9)
#11 := (not #10)
#12 := (not #11)
#55 := (iff #12 false)
#53 := (iff #10 false)
#54 := [rewrite]: #53
#51 := (iff #12 #10)
#52 := [rewrite]: #51
#56 := [trans #52 #54]: #55
#50 := [asserted]: #12
[mp #50 #56]: false
unsat
34a197030d596a851cfea7401235747df59a05b3 81 0
#2 := false
#26 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#74 := -1::Int
#75 := (* -1::Int #14)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#76 := (+ #11 #75)
#77 := (<= #76 0::Int)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#83 := (+ #9 #75)
#84 := (<= #83 0::Int)
#80 := (not #77)
#87 := (* -1::Int #11)
#88 := (+ #9 #87)
#89 := (<= #88 0::Int)
#92 := (not #89)
#101 := (or #92 #80 #84)
#106 := (not #101)
#16 := (<= #9 #14)
#15 := (<= #11 #14)
#17 := (implies #15 #16)
#12 := (<= #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#109 := (iff #19 #106)
#58 := (not #15)
#59 := (or #58 #16)
#65 := (not #12)
#66 := (or #65 #59)
#71 := (not #66)
#107 := (iff #71 #106)
#104 := (iff #66 #101)
#95 := (or #80 #84)
#98 := (or #92 #95)
#102 := (iff #98 #101)
#103 := [rewrite]: #102
#99 := (iff #66 #98)
#96 := (iff #59 #95)
#85 := (iff #16 #84)
#86 := [rewrite]: #85
#81 := (iff #58 #80)
#78 := (iff #15 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#97 := [monotonicity #82 #86]: #96
#93 := (iff #65 #92)
#90 := (iff #12 #89)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#100 := [monotonicity #94 #97]: #99
#105 := [trans #100 #103]: #104
#108 := [monotonicity #105]: #107
#72 := (iff #19 #71)
#69 := (iff #18 #66)
#62 := (implies #12 #59)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70]: #72
#110 := [trans #73 #108]: #109
#57 := [asserted]: #19
#111 := [mp #57 #110]: #106
#113 := [not-or-elim #111]: #77
#114 := (not #84)
#115 := [not-or-elim #111]: #114
#112 := [not-or-elim #111]: #89
[th-lemma arith farkas 1 -1 1 #112 #115 #113]: false
unsat
7b0882598adc749ae782704cbf82bc84a198ea68 86 0
#2 := false
#26 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#74 := -1::Int
#75 := (* -1::Int #14)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#76 := (+ #11 #75)
#77 := (<= #76 0::Int)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#83 := (+ #9 #75)
#84 := (<= #83 0::Int)
#80 := (not #77)
#89 := (* -1::Int #11)
#90 := (+ #9 #89)
#88 := (>= #90 0::Int)
#106 := (or #88 #80 #84)
#111 := (not #106)
#16 := (<= #9 #14)
#15 := (<= #11 #14)
#17 := (implies #15 #16)
#12 := (< #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#114 := (iff #19 #111)
#58 := (not #15)
#59 := (or #58 #16)
#65 := (not #12)
#66 := (or #65 #59)
#71 := (not #66)
#112 := (iff #71 #111)
#109 := (iff #66 #106)
#100 := (or #80 #84)
#103 := (or #88 #100)
#107 := (iff #103 #106)
#108 := [rewrite]: #107
#104 := (iff #66 #103)
#101 := (iff #59 #100)
#85 := (iff #16 #84)
#86 := [rewrite]: #85
#81 := (iff #58 #80)
#78 := (iff #15 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#102 := [monotonicity #82 #86]: #101
#98 := (iff #65 #88)
#87 := (not #88)
#93 := (not #87)
#96 := (iff #93 #88)
#97 := [rewrite]: #96
#94 := (iff #65 #93)
#91 := (iff #12 #87)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#99 := [trans #95 #97]: #98
#105 := [monotonicity #99 #102]: #104
#110 := [trans #105 #108]: #109
#113 := [monotonicity #110]: #112
#72 := (iff #19 #71)
#69 := (iff #18 #66)
#62 := (implies #12 #59)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70]: #72
#115 := [trans #73 #113]: #114
#57 := [asserted]: #19
#116 := [mp #57 #115]: #111
#118 := [not-or-elim #116]: #77
#117 := [not-or-elim #116]: #87
#119 := (not #84)
#120 := [not-or-elim #116]: #119
[th-lemma arith farkas 1 1 1 #120 #117 #118]: false
unsat
d78e40f60c9b56c29d89cfe670baf3737ca499b3 86 0
#2 := false
#26 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#74 := -1::Int
#77 := (* -1::Int #14)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#88 := (+ #9 #77)
#89 := (<= #88 0::Int)
#119 := (not #89)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#78 := (+ #11 #77)
#76 := (>= #78 0::Int)
#92 := (* -1::Int #11)
#93 := (+ #9 #92)
#94 := (<= #93 0::Int)
#97 := (not #94)
#106 := (or #97 #76 #89)
#111 := (not #106)
#16 := (<= #9 #14)
#15 := (< #11 #14)
#17 := (implies #15 #16)
#12 := (<= #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#114 := (iff #19 #111)
#58 := (not #15)
#59 := (or #58 #16)
#65 := (not #12)
#66 := (or #65 #59)
#71 := (not #66)
#112 := (iff #71 #111)
#109 := (iff #66 #106)
#100 := (or #76 #89)
#103 := (or #97 #100)
#107 := (iff #103 #106)
#108 := [rewrite]: #107
#104 := (iff #66 #103)
#101 := (iff #59 #100)
#90 := (iff #16 #89)
#91 := [rewrite]: #90
#86 := (iff #58 #76)
#75 := (not #76)
#81 := (not #75)
#84 := (iff #81 #76)
#85 := [rewrite]: #84
#82 := (iff #58 #81)
#79 := (iff #15 #75)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#87 := [trans #83 #85]: #86
#102 := [monotonicity #87 #91]: #101
#98 := (iff #65 #97)
#95 := (iff #12 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#105 := [monotonicity #99 #102]: #104
#110 := [trans #105 #108]: #109
#113 := [monotonicity #110]: #112
#72 := (iff #19 #71)
#69 := (iff #18 #66)
#62 := (implies #12 #59)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70]: #72
#115 := [trans #73 #113]: #114
#57 := [asserted]: #19
#116 := [mp #57 #115]: #111
#120 := [not-or-elim #116]: #119
#118 := [not-or-elim #116]: #75
#117 := [not-or-elim #116]: #94
[th-lemma arith farkas 1 1 1 #117 #118 #120]: false
unsat
355ace00757b4951a8f0a007e56528f29f4c829d 91 0
#2 := false
#26 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#74 := -1::Int
#77 := (* -1::Int #14)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#90 := (+ #9 #77)
#89 := (>= #90 0::Int)
#88 := (not #89)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#78 := (+ #11 #77)
#76 := (>= #78 0::Int)
#95 := (* -1::Int #11)
#96 := (+ #9 #95)
#94 := (>= #96 0::Int)
#112 := (or #94 #76 #88)
#117 := (not #112)
#16 := (< #9 #14)
#15 := (< #11 #14)
#17 := (implies #15 #16)
#12 := (< #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#120 := (iff #19 #117)
#58 := (not #15)
#59 := (or #58 #16)
#65 := (not #12)
#66 := (or #65 #59)
#71 := (not #66)
#118 := (iff #71 #117)
#115 := (iff #66 #112)
#106 := (or #76 #88)
#109 := (or #94 #106)
#113 := (iff #109 #112)
#114 := [rewrite]: #113
#110 := (iff #66 #109)
#107 := (iff #59 #106)
#91 := (iff #16 #88)
#92 := [rewrite]: #91
#86 := (iff #58 #76)
#75 := (not #76)
#81 := (not #75)
#84 := (iff #81 #76)
#85 := [rewrite]: #84
#82 := (iff #58 #81)
#79 := (iff #15 #75)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#87 := [trans #83 #85]: #86
#108 := [monotonicity #87 #92]: #107
#104 := (iff #65 #94)
#93 := (not #94)
#99 := (not #93)
#102 := (iff #99 #94)
#103 := [rewrite]: #102
#100 := (iff #65 #99)
#97 := (iff #12 #93)
#98 := [rewrite]: #97
#101 := [monotonicity #98]: #100
#105 := [trans #101 #103]: #104
#111 := [monotonicity #105 #108]: #110
#116 := [trans #111 #114]: #115
#119 := [monotonicity #116]: #118
#72 := (iff #19 #71)
#69 := (iff #18 #66)
#62 := (implies #12 #59)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70]: #72
#121 := [trans #73 #119]: #120
#57 := [asserted]: #19
#122 := [mp #57 #121]: #117
#125 := [not-or-elim #122]: #89
#124 := [not-or-elim #122]: #75
#123 := [not-or-elim #122]: #93
[th-lemma arith farkas 1 1 1 #123 #124 #125]: false
unsat
c6e2a76c11802bc1dbc13937c0da68298caebc2d 75 0
#2 := false
#27 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#66 := -1::Int
#74 := (* -1::Int #14)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#85 := (+ #9 #74)
#86 := (<= #85 0::Int)
#87 := (not #86)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#75 := (+ #11 #74)
#73 := (>= #75 0::Int)
#76 := (not #73)
#69 := (* -1::Int #11)
#70 := (+ #9 #69)
#68 := (>= #70 0::Int)
#67 := (not #68)
#79 := (and #67 #76)
#82 := (not #79)
#97 := (or #82 #86)
#100 := (not #97)
#17 := (< #14 #9)
#18 := (not #17)
#15 := (< #11 #14)
#12 := (< #9 #11)
#16 := (and #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#103 := (iff #20 #100)
#59 := (not #16)
#60 := (or #59 #18)
#63 := (not #60)
#101 := (iff #63 #100)
#98 := (iff #60 #97)
#95 := (iff #18 #86)
#90 := (not #87)
#93 := (iff #90 #86)
#94 := [rewrite]: #93
#91 := (iff #18 #90)
#88 := (iff #17 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#96 := [trans #92 #94]: #95
#83 := (iff #59 #82)
#80 := (iff #16 #79)
#77 := (iff #15 #76)
#78 := [rewrite]: #77
#71 := (iff #12 #67)
#72 := [rewrite]: #71
#81 := [monotonicity #72 #78]: #80
#84 := [monotonicity #81]: #83
#99 := [monotonicity #84 #96]: #98
#102 := [monotonicity #99]: #101
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#104 := [trans #65 #102]: #103
#58 := [asserted]: #20
#105 := [mp #58 #104]: #100
#109 := [not-or-elim #105]: #87
#106 := [not-or-elim #105]: #79
#108 := [and-elim #106]: #76
#107 := [and-elim #106]: #67
[th-lemma arith farkas 1 1 1 #107 #108 #109]: false
unsat
f1af9130b40233478fdc7662d2e61597d0d0c162 17 0
#2 := false
#7 := 0::Int
#8 := (= 0::Int 0::Int)
#9 := (not #8)
#37 := (iff #9 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
df5bd564889a3a421a410f30957cfbf7950c8d24 25 0
#2 := false
#7 := 0::Int
#8 := (- 0::Int)
#9 := (= 0::Int #8)
#10 := (not #9)
#45 := (iff #10 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#38 := (iff #9 true)
#33 := (= 0::Int 0::Int)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (= #8 0::Int)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #10
[mp #30 #46]: false
unsat
7bb6bad9020ee08bca9f57f4097fba1ccde7a752 17 0
#2 := false
#7 := 1::Int
#8 := (= 1::Int 1::Int)
#9 := (not #8)
#38 := (iff #9 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #9
[mp #30 #39]: false
unsat
e358808f536492e400da2798c38454f7a31ee728 34 0
#2 := false
#7 := 1::Int
#8 := (- 1::Int)
#9 := (= #8 1::Int)
#10 := (not #9)
#11 := (not #10)
#55 := (iff #11 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #11 #50)
#48 := (iff #10 true)
#43 := (not false)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #10 #43)
#41 := (iff #9 false)
#33 := -1::Int
#36 := (= -1::Int 1::Int)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #9 #36)
#34 := (= #8 -1::Int)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#32 := [asserted]: #11
[mp #32 #56]: false
unsat
289258b061b6c2ab7d0444f514f156a31ab808a5 40 0
#2 := false
#11 := 567::Int
#9 := 345::Int
#7 := 123::Int
#8 := (- 123::Int)
#10 := (+ #8 345::Int)
#12 := (< #10 567::Int)
#13 := (not #12)
#61 := (iff #13 false)
#41 := 222::Int
#46 := (< 222::Int 567::Int)
#49 := (not #46)
#59 := (iff #49 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #49 #54)
#52 := (iff #46 true)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#50 := (iff #13 #49)
#47 := (iff #12 #46)
#44 := (= #10 222::Int)
#35 := -123::Int
#38 := (+ -123::Int 345::Int)
#42 := (= #38 222::Int)
#43 := [rewrite]: #42
#39 := (= #10 #38)
#36 := (= #8 -123::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#62 := [trans #51 #60]: #61
#34 := [asserted]: #13
[mp #34 #62]: false
unsat
ec3d9bd94c80cde36f0de69695b202f9ddf0b4fa 30 0
#2 := false
#9 := 2345678901::Int
#7 := 123456789::Int
#8 := (- 123456789::Int)
#10 := (< #8 2345678901::Int)
#11 := (not #10)
#51 := (iff #11 false)
#33 := -123456789::Int
#36 := (< -123456789::Int 2345678901::Int)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (= #8 -123456789::Int)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #11
[mp #32 #52]: false
unsat
e691c4b38a0343c2894ab60a09c5cabe20925699 26 0
#2 := false
decl f3 :: Int
#7 := f3
#8 := 0::Int
#9 := (+ f3 0::Int)
#10 := (= #9 f3)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= f3 f3)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
5c4b8f51c8c77bd1a261a8ed01b60034ae255cfc 26 0
#2 := false
decl f3 :: Int
#8 := f3
#7 := 0::Int
#9 := (+ 0::Int f3)
#10 := (= #9 f3)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= f3 f3)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
01d4aea8f66d97bfd6d4aa17e6a8adfadb01a40a 29 0
#2 := false
decl f3 :: Int
#7 := f3
decl f4 :: Int
#8 := f4
#10 := (+ f4 f3)
#9 := (+ f3 f4)
#11 := (= #9 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (= #9 #9)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (= #10 #9)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
7c37cd9f2beeef1c65d4ffd557883d8830a3d5c8 33 0
#2 := false
decl f5 :: Int
#9 := f5
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#12 := (+ f3 f4)
#13 := (+ #12 f5)
#10 := (+ f4 f5)
#11 := (+ f3 #10)
#14 := (= #11 #13)
#15 := (not #14)
#51 := (iff #15 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #15 #46)
#44 := (iff #14 true)
#39 := (= #11 #11)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #14 #39)
#37 := (= #13 #11)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#36 := [asserted]: #15
[mp #36 #52]: false
unsat
f7b791c457a131b93a9eb5502d849317ab54ee47 45 0
#2 := false
decl f4 :: Int
#8 := f4
#12 := (- f4)
decl f3 :: Int
#7 := f3
#13 := (= f3 #12)
#10 := 0::Int
#9 := (+ f3 f4)
#11 := (= #9 0::Int)
#14 := (iff #11 #13)
#15 := (not #14)
#64 := (iff #15 false)
#36 := -1::Int
#37 := (* -1::Int f4)
#40 := (= f3 #37)
#49 := (not #11)
#50 := (iff #49 #40)
#62 := (iff #50 false)
#57 := (iff #49 #11)
#60 := (iff #57 false)
#61 := [rewrite]: #60
#58 := (iff #50 #57)
#55 := (iff #40 #11)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#53 := (iff #15 #50)
#43 := (iff #11 #40)
#46 := (not #43)
#51 := (iff #46 #50)
#52 := [rewrite]: #51
#47 := (iff #15 #46)
#44 := (iff #14 #43)
#41 := (iff #13 #40)
#38 := (= #12 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#54 := [trans #48 #52]: #53
#65 := [trans #54 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
310dcc34c35fac2a90c97769561f401f5711a5cb 26 0
#2 := false
#7 := 1::Int
#8 := (- 1::Int)
#9 := (= #8 #8)
#10 := (not #9)
#47 := (iff #10 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #10 #42)
#40 := (iff #9 true)
#32 := -1::Int
#35 := (= -1::Int -1::Int)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #9 #35)
#33 := (= #8 -1::Int)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #10
[mp #31 #48]: false
unsat
cec035ee1776e184f791b0a4756799d613e13376 26 0
#2 := false
#7 := 3::Int
#8 := (- 3::Int)
#9 := (= #8 #8)
#10 := (not #9)
#47 := (iff #10 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #10 #42)
#40 := (iff #9 true)
#32 := -3::Int
#35 := (= -3::Int -3::Int)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #9 #35)
#33 := (= #8 -3::Int)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #10
[mp #31 #48]: false
unsat
3815df4ff70adc684db4806205e34634fa08e24e 53 0
#2 := false
decl f3 :: Int
#7 := f3
#9 := 0::Int
#11 := (< 0::Int f3)
#8 := (- f3)
#10 := (< #8 0::Int)
#12 := (iff #10 #11)
#13 := (not #12)
#73 := (iff #13 false)
#34 := -1::Int
#35 := (* -1::Int f3)
#38 := (< #35 0::Int)
#47 := (not #38)
#48 := (iff #47 #11)
#71 := (iff #48 false)
#53 := (<= f3 0::Int)
#54 := (not #53)
#66 := (iff #53 #54)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #48 #66)
#64 := (iff #11 #54)
#65 := [rewrite]: #64
#62 := (iff #47 #53)
#57 := (not #54)
#60 := (iff #57 #53)
#61 := [rewrite]: #60
#58 := (iff #47 #57)
#55 := (iff #38 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#51 := (iff #13 #48)
#41 := (iff #38 #11)
#44 := (not #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (iff #10 #38)
#36 := (= #8 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#74 := [trans #52 #72]: #73
#33 := [asserted]: #13
[mp #33 #74]: false
unsat
0a4435dcf9c2c38efb971e8501cc52dde8c28b6b 61 0
#2 := false
#7 := 0::Int
decl f3 :: Int
#8 := f3
#10 := (- f3)
#11 := (< #10 0::Int)
#9 := (< 0::Int f3)
#12 := (implies #9 #11)
#13 := (not #12)
#80 := (iff #13 false)
#34 := -1::Int
#35 := (* -1::Int f3)
#38 := (< #35 0::Int)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#78 := (iff #50 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #50 #73)
#71 := (iff #45 true)
#53 := (<= f3 0::Int)
#54 := (not #53)
#66 := (or #53 #54)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #45 #66)
#64 := (iff #38 #54)
#65 := [rewrite]: #64
#62 := (iff #44 #53)
#57 := (not #54)
#60 := (iff #57 #53)
#61 := [rewrite]: #60
#58 := (iff #44 #57)
#55 := (iff #9 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := (iff #13 #50)
#48 := (iff #12 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#33 := [asserted]: #13
[mp #33 #81]: false
unsat
ff6b944415a61fef8e7066737bb3f4071effee41 61 0
#2 := false
decl f3 :: Int
#7 := f3
#10 := (- f3)
#8 := 0::Int
#11 := (< 0::Int #10)
#9 := (< f3 0::Int)
#12 := (implies #9 #11)
#13 := (not #12)
#80 := (iff #13 false)
#34 := -1::Int
#35 := (* -1::Int f3)
#38 := (< 0::Int #35)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#78 := (iff #50 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #50 #73)
#71 := (iff #45 true)
#53 := (>= f3 0::Int)
#54 := (not #53)
#66 := (or #53 #54)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #45 #66)
#64 := (iff #38 #54)
#65 := [rewrite]: #64
#62 := (iff #44 #53)
#57 := (not #54)
#60 := (iff #57 #53)
#61 := [rewrite]: #60
#58 := (iff #44 #57)
#55 := (iff #9 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := (iff #13 #50)
#48 := (iff #12 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#33 := [asserted]: #13
[mp #33 #81]: false
unsat
1edbd3da42c4e3944ae42bd9887fadb3437e96a1 26 0
#2 := false
decl f3 :: Int
#7 := f3
#8 := 0::Int
#9 := (- f3 0::Int)
#10 := (= #9 f3)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= f3 f3)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
b83a075b345830e9b6e6ce14a816684d0ce48153 32 0
#2 := false
decl f3 :: Int
#8 := f3
#10 := (- f3)
#7 := 0::Int
#9 := (- 0::Int f3)
#11 := (= #9 #10)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := -1::Int
#34 := (* -1::Int f3)
#39 := (= #34 #34)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (= #10 #34)
#38 := [rewrite]: #37
#35 := (= #9 #34)
#36 := [rewrite]: #35
#41 := [monotonicity #36 #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
cd3e641f4c63603b28155ba6239b2f0c22391251 64 0
#2 := false
#11 := 0::Int
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#10 := (- f3 f4)
#12 := (< #10 0::Int)
#9 := (< f3 f4)
#13 := (implies #9 #12)
#14 := (not #13)
#82 := (iff #14 false)
#35 := -1::Int
#36 := (* -1::Int f4)
#37 := (+ f3 #36)
#40 := (< #37 0::Int)
#46 := (not #9)
#47 := (or #46 #40)
#52 := (not #47)
#80 := (iff #52 false)
#1 := true
#75 := (not true)
#78 := (iff #75 false)
#79 := [rewrite]: #78
#76 := (iff #52 #75)
#73 := (iff #47 true)
#56 := (>= #37 0::Int)
#55 := (not #56)
#68 := (or #56 #55)
#71 := (iff #68 true)
#72 := [rewrite]: #71
#69 := (iff #47 #68)
#66 := (iff #40 #55)
#67 := [rewrite]: #66
#64 := (iff #46 #56)
#59 := (not #55)
#62 := (iff #59 #56)
#63 := [rewrite]: #62
#60 := (iff #46 #59)
#57 := (iff #9 #55)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#70 := [monotonicity #65 #67]: #69
#74 := [trans #70 #72]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#53 := (iff #14 #52)
#50 := (iff #13 #47)
#43 := (implies #9 #40)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #13 #43)
#41 := (iff #12 #40)
#38 := (= #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [monotonicity #51]: #53
#83 := [trans #54 #81]: #82
#34 := [asserted]: #14
[mp #34 #83]: false
unsat
61cdc1fc5eb0d0636c10956aeb832369d0478262 44 0
#2 := false
decl f3 :: Int
#7 := f3
decl f4 :: Int
#8 := f4
#10 := (- f4 f3)
#11 := (- #10)
#9 := (- f3 f4)
#12 := (= #9 #11)
#13 := (not #12)
#63 := (iff #13 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #13 #58)
#56 := (iff #12 true)
#35 := -1::Int
#36 := (* -1::Int f4)
#37 := (+ f3 #36)
#51 := (= #37 #37)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #12 #51)
#49 := (= #11 #37)
#40 := (* -1::Int f3)
#41 := (+ #40 f4)
#44 := (- #41)
#47 := (= #44 #37)
#48 := [rewrite]: #47
#45 := (= #11 #44)
#42 := (= #10 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#38 := (= #9 #37)
#39 := [rewrite]: #38
#53 := [monotonicity #39 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#34 := [asserted]: #13
[mp #34 #64]: false
unsat
1f1c398b527ff7ee3d1a5967ff2a131100a56323 42 0
#2 := false
decl f3 :: Int
#7 := f3
decl f4 :: Int
#8 := f4
#10 := (- f4)
#11 := (+ #10 f3)
#9 := (- f3 f4)
#12 := (= #9 #11)
#13 := (not #12)
#61 := (iff #13 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #13 #56)
#54 := (iff #12 true)
#35 := -1::Int
#36 := (* -1::Int f4)
#37 := (+ f3 #36)
#49 := (= #37 #37)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #12 #49)
#47 := (= #11 #37)
#42 := (+ #36 f3)
#45 := (= #42 #37)
#46 := [rewrite]: #45
#43 := (= #11 #42)
#40 := (= #10 #36)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#38 := (= #9 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#34 := [asserted]: #13
[mp #34 #62]: false
unsat
d180958823e52c24cdf709d7b779e581a5146a9d 48 0
#2 := false
decl f5 :: Int
#10 := f5
decl f4 :: Int
#8 := f4
#12 := (+ f4 f5)
decl f3 :: Int
#7 := f3
#13 := (- f3 #12)
#9 := (- f3 f4)
#11 := (- #9 f5)
#14 := (= #11 #13)
#15 := (not #14)
#66 := (iff #15 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #15 #61)
#59 := (iff #14 true)
#37 := -1::Int
#45 := (* -1::Int f5)
#38 := (* -1::Int f4)
#46 := (+ #38 #45)
#47 := (+ f3 #46)
#54 := (= #47 #47)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #14 #54)
#52 := (= #13 #47)
#53 := [rewrite]: #52
#50 := (= #11 #47)
#39 := (+ f3 #38)
#42 := (- #39 f5)
#48 := (= #42 #47)
#49 := [rewrite]: #48
#43 := (= #11 #42)
#40 := (= #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#51 := [trans #44 #49]: #50
#56 := [monotonicity #51 #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#36 := [asserted]: #15
[mp #36 #67]: false
unsat
e52eb52be8591bb795a077857670e69de11af1da 26 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#7 := f3
#9 := (* f3 0::Int)
#10 := (= #9 0::Int)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= 0::Int 0::Int)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
44b181d9f3d713df94663408b08cd9af6cbe23f9 26 0
#2 := false
#7 := 0::Int
decl f3 :: Int
#8 := f3
#9 := (* 0::Int f3)
#10 := (= #9 0::Int)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= 0::Int 0::Int)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
723479197e5c26fbfd35522ce4cd26d5915d7119 26 0
#2 := false
decl f3 :: Int
#7 := f3
#8 := 1::Int
#9 := (* f3 1::Int)
#10 := (= #9 f3)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#33 := [rewrite]: #10
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #11
[mp #32 #47]: false
unsat
07b026f7999300309ad1aa93f8da68492163aa1d 26 0
#2 := false
decl f3 :: Int
#8 := f3
#7 := 1::Int
#9 := (* 1::Int f3)
#10 := (= #9 f3)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#33 := [rewrite]: #10
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #11
[mp #32 #47]: false
unsat
e5021087f8c15699d6bd7188a85d3d91458b6e0f 40 0
#2 := false
decl f3 :: Int
#7 := f3
#11 := (- f3)
#8 := 1::Int
#9 := (- 1::Int)
#10 := (* f3 #9)
#12 := (= #10 #11)
#13 := (not #12)
#60 := (iff #13 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #13 #55)
#53 := (iff #12 true)
#35 := -1::Int
#41 := (* -1::Int f3)
#48 := (= #41 #41)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #12 #48)
#46 := (= #11 #41)
#47 := [rewrite]: #46
#44 := (= #10 #41)
#38 := (* f3 -1::Int)
#42 := (= #38 #41)
#43 := [rewrite]: #42
#39 := (= #10 #38)
#36 := (= #9 -1::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#50 := [monotonicity #45 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#34 := [asserted]: #13
[mp #34 #61]: false
unsat
92512c29655e3be3ef6191609f8fa8665ffb186f 35 0
#2 := false
decl f3 :: Int
#9 := f3
#11 := (- f3)
#7 := 1::Int
#8 := (- 1::Int)
#10 := (* #8 f3)
#12 := (= #10 #11)
#13 := (not #12)
#55 := (iff #13 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #13 #50)
#48 := (iff #12 true)
#35 := -1::Int
#38 := (* -1::Int f3)
#43 := (= #38 #38)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (= #11 #38)
#42 := [rewrite]: #41
#39 := (= #10 #38)
#36 := (= #8 -1::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [monotonicity #40 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#34 := [asserted]: #13
[mp #34 #56]: false
unsat
63a5902a5fc3cd2e10705ba8b00e69639073cd3f 28 0
#2 := false
#7 := 3::Int
decl f3 :: Int
#8 := f3
#10 := (* f3 3::Int)
#9 := (* 3::Int f3)
#11 := (= #9 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (= #9 #9)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (= #10 #9)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
238cf59caa00b771da8649f78ab90d7b2fb747c2 238 0
#2 := false
decl f3 :: (-> S2 Int Int)
#15 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#13 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#14 := (f4 f5 #13)
#16 := (f3 #14 #15)
#726 := (pattern #16)
#8 := 0::Int
#66 := -1::Int
#70 := (* -1::Int #15)
#67 := (* -1::Int #13)
#73 := (div #67 #70)
#224 := (* -1::Int #73)
#225 := (+ #16 #224)
#226 := (= #225 0::Int)
#26 := (div #13 #15)
#221 := (* -1::Int #26)
#222 := (+ #16 #221)
#223 := (= #222 0::Int)
#92 := (<= #15 0::Int)
#99 := (>= #13 0::Int)
#184 := (or #99 #92)
#185 := (not #184)
#88 := (<= #13 0::Int)
#182 := (or #88 #92)
#183 := (not #182)
#188 := (or #183 #185)
#227 := (if #188 #223 #226)
#220 := (= #16 0::Int)
#18 := (= #15 0::Int)
#17 := (= #13 0::Int)
#19 := (or #17 #18)
#228 := (if #19 #220 #227)
#727 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #726) #228)
#231 := (forall (vars (?v0 Int) (?v1 Int)) #228)
#730 := (iff #231 #727)
#728 := (iff #228 #228)
#729 := [refl]: #728
#731 := [quant-intro #729]: #730
#191 := (if #188 #26 #73)
#194 := (if #19 0::Int #191)
#197 := (= #16 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#232 := (iff #200 #231)
#229 := (iff #197 #228)
#230 := [rewrite]: #229
#233 := [quant-intro #230]: #232
#93 := (not #92)
#100 := (not #99)
#103 := (and #100 #93)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#109 := (if #106 #26 #73)
#112 := (if #19 0::Int #109)
#115 := (= #16 #112)
#118 := (forall (vars (?v0 Int) (?v1 Int)) #115)
#201 := (iff #118 #200)
#198 := (iff #115 #197)
#195 := (= #112 #194)
#192 := (= #109 #191)
#189 := (iff #106 #188)
#186 := (iff #103 #185)
#187 := [rewrite]: #186
#176 := (iff #96 #183)
#177 := [rewrite]: #176
#190 := [monotonicity #177 #187]: #189
#193 := [monotonicity #190]: #192
#196 := [monotonicity #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#180 := (~ #118 #118)
#178 := (~ #115 #115)
#179 := [refl]: #178
#181 := [nnf-pos #179]: #180
#28 := (- #15)
#27 := (- #13)
#29 := (div #27 #28)
#21 := (< 0::Int #15)
#23 := (< #13 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #13)
#22 := (and #20 #21)
#25 := (or #22 #24)
#30 := (if #25 #26 #29)
#31 := (if #19 0::Int #30)
#32 := (= #16 #31)
#33 := (forall (vars (?v0 Int) (?v1 Int)) #32)
#121 := (iff #33 #118)
#76 := (if #25 #26 #73)
#79 := (if #19 0::Int #76)
#82 := (= #16 #79)
#85 := (forall (vars (?v0 Int) (?v1 Int)) #82)
#119 := (iff #85 #118)
#116 := (iff #82 #115)
#113 := (= #79 #112)
#110 := (= #76 #109)
#107 := (iff #25 #106)
#104 := (iff #24 #103)
#94 := (iff #21 #93)
#95 := [rewrite]: #94
#101 := (iff #23 #100)
#102 := [rewrite]: #101
#105 := [monotonicity #102 #95]: #104
#97 := (iff #22 #96)
#90 := (iff #20 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [quant-intro #117]: #119
#86 := (iff #33 #85)
#83 := (iff #32 #82)
#80 := (= #31 #79)
#77 := (= #30 #76)
#74 := (= #29 #73)
#71 := (= #28 #70)
#72 := [rewrite]: #71
#68 := (= #27 #67)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#87 := [quant-intro #84]: #86
#122 := [trans #87 #120]: #121
#65 := [asserted]: #33
#123 := [mp #65 #122]: #118
#172 := [mp~ #123 #181]: #118
#203 := [mp #172 #202]: #200
#234 := [mp #203 #233]: #231
#732 := [mp #234 #731]: #727
#9 := (f4 f5 0::Int)
#10 := (f3 #9 0::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#64 := [asserted]: #12
#685 := (not #727)
#680 := (or #685 #11)
#377 := (* -1::Int 0::Int)
#507 := (div #377 #377)
#714 := (* -1::Int #507)
#388 := (+ #10 #714)
#389 := (= #388 0::Int)
#404 := (div 0::Int 0::Int)
#383 := (* -1::Int #404)
#718 := (+ #10 #383)
#720 := (= #718 0::Int)
#398 := (<= 0::Int 0::Int)
#401 := (>= 0::Int 0::Int)
#402 := (or #401 #398)
#403 := (not #402)
#399 := (or #398 #398)
#390 := (not #399)
#400 := (or #390 #403)
#721 := (if #400 #720 #389)
#313 := (= 0::Int 0::Int)
#397 := (or #313 #313)
#722 := (if #397 #11 #721)
#686 := (or #685 #722)
#528 := (iff #686 #680)
#671 := (iff #680 #680)
#672 := [rewrite]: #671
#679 := (iff #722 #11)
#1 := true
#692 := (if true #11 #720)
#683 := (iff #692 #11)
#678 := [rewrite]: #683
#681 := (iff #722 #692)
#691 := (iff #721 #720)
#411 := (if false #720 #720)
#405 := (iff #411 #720)
#687 := [rewrite]: #405
#689 := (iff #721 #411)
#409 := (iff #389 #720)
#698 := (= #388 #718)
#697 := (= #714 #383)
#419 := (= #507 #404)
#696 := (= #377 0::Int)
#418 := [rewrite]: #696
#693 := [monotonicity #418 #418]: #419
#694 := [monotonicity #693]: #697
#408 := [monotonicity #694]: #698
#410 := [monotonicity #408]: #409
#319 := (iff #400 false)
#700 := (or false false)
#424 := (iff #700 false)
#425 := [rewrite]: #424
#422 := (iff #400 #700)
#713 := (iff #403 false)
#367 := (not true)
#705 := (iff #367 false)
#706 := [rewrite]: #705
#712 := (iff #403 #367)
#351 := (iff #402 true)
#719 := (or true true)
#375 := (iff #719 true)
#380 := [rewrite]: #375
#709 := (iff #402 #719)
#717 := (iff #398 true)
#360 := [rewrite]: #717
#708 := (iff #401 true)
#346 := [rewrite]: #708
#711 := [monotonicity #346 #360]: #709
#352 := [trans #711 #380]: #351
#710 := [monotonicity #352]: #712
#699 := [trans #710 #706]: #713
#707 := (iff #390 false)
#703 := (iff #390 #367)
#365 := (iff #399 true)
#701 := (iff #399 #719)
#364 := [monotonicity #360 #360]: #701
#366 := [trans #364 #380]: #365
#704 := [monotonicity #366]: #703
#702 := [trans #704 #706]: #707
#423 := [monotonicity #702 #699]: #422
#695 := [trans #423 #425]: #319
#690 := [monotonicity #695 #410]: #689
#688 := [trans #690 #687]: #691
#716 := (iff #397 true)
#725 := (iff #397 #719)
#723 := (iff #313 true)
#724 := [rewrite]: #723
#715 := [monotonicity #724 #724]: #725
#376 := [trans #715 #380]: #716
#682 := [monotonicity #376 #688]: #681
#684 := [trans #682 #678]: #679
#529 := [monotonicity #684]: #528
#673 := [trans #529 #672]: #528
#527 := [quant-inst #8 #8]: #686
#674 := [mp #527 #673]: #680
[unit-resolution #674 #64 #732]: false
unsat
6309bf780f2ba9dd55b826441e74066dc2c9aa9e 251 0
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#727 := (pattern #17)
#10 := 0::Int
#67 := -1::Int
#71 := (* -1::Int #16)
#68 := (* -1::Int #14)
#74 := (div #68 #71)
#225 := (* -1::Int #74)
#226 := (+ #17 #225)
#227 := (= #226 0::Int)
#27 := (div #14 #16)
#222 := (* -1::Int #27)
#223 := (+ #17 #222)
#224 := (= #223 0::Int)
#93 := (<= #16 0::Int)
#100 := (>= #14 0::Int)
#185 := (or #100 #93)
#186 := (not #185)
#89 := (<= #14 0::Int)
#183 := (or #89 #93)
#184 := (not #183)
#189 := (or #184 #186)
#228 := (if #189 #224 #227)
#221 := (= #17 0::Int)
#19 := (= #16 0::Int)
#18 := (= #14 0::Int)
#20 := (or #18 #19)
#229 := (if #20 #221 #228)
#728 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #727) #229)
#232 := (forall (vars (?v0 Int) (?v1 Int)) #229)
#731 := (iff #232 #728)
#729 := (iff #229 #229)
#730 := [refl]: #729
#732 := [quant-intro #730]: #731
#192 := (if #189 #27 #74)
#195 := (if #20 0::Int #192)
#198 := (= #17 #195)
#201 := (forall (vars (?v0 Int) (?v1 Int)) #198)
#233 := (iff #201 #232)
#230 := (iff #198 #229)
#231 := [rewrite]: #230
#234 := [quant-intro #231]: #233
#94 := (not #93)
#101 := (not #100)
#104 := (and #101 #94)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#110 := (if #107 #27 #74)
#113 := (if #20 0::Int #110)
#116 := (= #17 #113)
#119 := (forall (vars (?v0 Int) (?v1 Int)) #116)
#202 := (iff #119 #201)
#199 := (iff #116 #198)
#196 := (= #113 #195)
#193 := (= #110 #192)
#190 := (iff #107 #189)
#187 := (iff #104 #186)
#188 := [rewrite]: #187
#177 := (iff #97 #184)
#178 := [rewrite]: #177
#191 := [monotonicity #178 #188]: #190
#194 := [monotonicity #191]: #193
#197 := [monotonicity #194]: #196
#200 := [monotonicity #197]: #199
#203 := [quant-intro #200]: #202
#181 := (~ #119 #119)
#179 := (~ #116 #116)
#180 := [refl]: #179
#182 := [nnf-pos #180]: #181
#29 := (- #16)
#28 := (- #14)
#30 := (div #28 #29)
#22 := (< 0::Int #16)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (if #26 #27 #30)
#32 := (if #20 0::Int #31)
#33 := (= #17 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#122 := (iff #34 #119)
#77 := (if #26 #27 #74)
#80 := (if #20 0::Int #77)
#83 := (= #17 #80)
#86 := (forall (vars (?v0 Int) (?v1 Int)) #83)
#120 := (iff #86 #119)
#117 := (iff #83 #116)
#114 := (= #80 #113)
#111 := (= #77 #110)
#108 := (iff #26 #107)
#105 := (iff #25 #104)
#95 := (iff #22 #94)
#96 := [rewrite]: #95
#102 := (iff #24 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103 #96]: #105
#98 := (iff #23 #97)
#91 := (iff #21 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [monotonicity #115]: #117
#121 := [quant-intro #118]: #120
#87 := (iff #34 #86)
#84 := (iff #33 #83)
#81 := (= #32 #80)
#78 := (= #31 #77)
#75 := (= #30 #74)
#72 := (= #29 #71)
#73 := [rewrite]: #72
#69 := (= #28 #68)
#70 := [rewrite]: #69
#76 := [monotonicity #70 #73]: #75
#79 := [monotonicity #76]: #78
#82 := [monotonicity #79]: #81
#85 := [monotonicity #82]: #84
#88 := [quant-intro #85]: #87
#123 := [trans #88 #121]: #122
#66 := [asserted]: #34
#124 := [mp #66 #123]: #119
#173 := [mp~ #124 #182]: #119
#204 := [mp #173 #203]: #201
#235 := [mp #204 #234]: #232
#733 := [mp #235 #732]: #728
decl f6 :: Int
#8 := f6
#9 := (f4 f5 f6)
#11 := (f3 #9 0::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#65 := [asserted]: #13
#670 := (not #728)
#676 := (or #670 #12)
#389 := (* -1::Int 0::Int)
#715 := (* -1::Int f6)
#390 := (div #715 #389)
#722 := (* -1::Int #390)
#723 := (+ #11 #722)
#724 := (= #723 0::Int)
#719 := (div f6 0::Int)
#721 := (* -1::Int #719)
#378 := (+ #11 #721)
#508 := (= #378 0::Int)
#391 := (<= 0::Int 0::Int)
#404 := (>= f6 0::Int)
#401 := (or #404 #391)
#405 := (not #401)
#400 := (<= f6 0::Int)
#402 := (or #400 #391)
#403 := (not #402)
#384 := (or #403 #405)
#725 := (if #384 #508 #724)
#398 := (= 0::Int 0::Int)
#314 := (= f6 0::Int)
#399 := (or #314 #398)
#720 := (if #399 #12 #725)
#677 := (or #670 #720)
#678 := (iff #677 #676)
#509 := (iff #676 #676)
#510 := [rewrite]: #509
#675 := (iff #720 #12)
#411 := (div #715 0::Int)
#691 := (* -1::Int #411)
#692 := (+ #11 #691)
#682 := (= #692 0::Int)
#1 := true
#529 := (if true #12 #682)
#673 := (iff #529 #12)
#674 := [rewrite]: #673
#530 := (iff #720 #529)
#687 := (iff #725 #682)
#679 := (if false #508 #682)
#686 := (iff #679 #682)
#681 := [rewrite]: #686
#680 := (iff #725 #679)
#683 := (iff #724 #682)
#689 := (= #723 #692)
#406 := (= #722 #691)
#412 := (= #390 #411)
#409 := (= #389 0::Int)
#410 := [rewrite]: #409
#690 := [monotonicity #410]: #412
#688 := [monotonicity #690]: #406
#693 := [monotonicity #688]: #689
#684 := [monotonicity #693]: #683
#695 := (iff #384 false)
#697 := (or false false)
#694 := (iff #697 false)
#698 := [rewrite]: #694
#419 := (iff #384 #697)
#320 := (iff #405 false)
#703 := (not true)
#710 := (iff #703 false)
#712 := [rewrite]: #710
#425 := (iff #405 #703)
#423 := (iff #401 true)
#713 := (or #404 true)
#700 := (iff #713 true)
#701 := [rewrite]: #700
#711 := (iff #401 #713)
#365 := (iff #391 true)
#366 := [rewrite]: #365
#714 := [monotonicity #366]: #711
#424 := [trans #714 #701]: #423
#426 := [monotonicity #424]: #425
#696 := [trans #426 #712]: #320
#352 := (iff #403 false)
#709 := (iff #403 #703)
#707 := (iff #402 true)
#367 := (or #400 true)
#705 := (iff #367 true)
#706 := [rewrite]: #705
#368 := (iff #402 #367)
#704 := [monotonicity #366]: #368
#708 := [trans #704 #706]: #707
#347 := [monotonicity #708]: #709
#353 := [trans #347 #712]: #352
#420 := [monotonicity #353 #696]: #419
#699 := [trans #420 #698]: #695
#685 := [monotonicity #699 #684]: #680
#528 := [trans #685 #681]: #687
#361 := (iff #399 true)
#376 := (or #314 true)
#377 := (iff #376 true)
#718 := [rewrite]: #377
#381 := (iff #399 #376)
#726 := (iff #398 true)
#716 := [rewrite]: #726
#717 := [monotonicity #716]: #381
#702 := [trans #717 #718]: #361
#672 := [monotonicity #702 #528]: #530
#669 := [trans #672 #674]: #675
#507 := [monotonicity #669]: #678
#663 := [trans #507 #510]: #678
#671 := [quant-inst #8 #10]: #677
#664 := [mp #671 #663]: #676
[unit-resolution #664 #65 #733]: false
unsat
06fdbb5d35836ddf21804a31fcb1c796b637cebe 272 0
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#726 := (pattern #17)
#8 := 0::Int
#67 := -1::Int
#71 := (* -1::Int #16)
#68 := (* -1::Int #14)
#74 := (div #68 #71)
#225 := (* -1::Int #74)
#226 := (+ #17 #225)
#227 := (= #226 0::Int)
#27 := (div #14 #16)
#222 := (* -1::Int #27)
#223 := (+ #17 #222)
#224 := (= #223 0::Int)
#93 := (<= #16 0::Int)
#100 := (>= #14 0::Int)
#185 := (or #100 #93)
#186 := (not #185)
#89 := (<= #14 0::Int)
#183 := (or #89 #93)
#184 := (not #183)
#189 := (or #184 #186)
#228 := (if #189 #224 #227)
#221 := (= #17 0::Int)
#19 := (= #16 0::Int)
#18 := (= #14 0::Int)
#20 := (or #18 #19)
#229 := (if #20 #221 #228)
#727 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #726) #229)
#232 := (forall (vars (?v0 Int) (?v1 Int)) #229)
#730 := (iff #232 #727)
#728 := (iff #229 #229)
#729 := [refl]: #728
#731 := [quant-intro #729]: #730
#192 := (if #189 #27 #74)
#195 := (if #20 0::Int #192)
#198 := (= #17 #195)
#201 := (forall (vars (?v0 Int) (?v1 Int)) #198)
#233 := (iff #201 #232)
#230 := (iff #198 #229)
#231 := [rewrite]: #230
#234 := [quant-intro #231]: #233
#94 := (not #93)
#101 := (not #100)
#104 := (and #101 #94)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#110 := (if #107 #27 #74)
#113 := (if #20 0::Int #110)
#116 := (= #17 #113)
#119 := (forall (vars (?v0 Int) (?v1 Int)) #116)
#202 := (iff #119 #201)
#199 := (iff #116 #198)
#196 := (= #113 #195)
#193 := (= #110 #192)
#190 := (iff #107 #189)
#187 := (iff #104 #186)
#188 := [rewrite]: #187
#177 := (iff #97 #184)
#178 := [rewrite]: #177
#191 := [monotonicity #178 #188]: #190
#194 := [monotonicity #191]: #193
#197 := [monotonicity #194]: #196
#200 := [monotonicity #197]: #199
#203 := [quant-intro #200]: #202
#181 := (~ #119 #119)
#179 := (~ #116 #116)
#180 := [refl]: #179
#182 := [nnf-pos #180]: #181
#29 := (- #16)
#28 := (- #14)
#30 := (div #28 #29)
#22 := (< 0::Int #16)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (if #26 #27 #30)
#32 := (if #20 0::Int #31)
#33 := (= #17 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#122 := (iff #34 #119)
#77 := (if #26 #27 #74)
#80 := (if #20 0::Int #77)
#83 := (= #17 #80)
#86 := (forall (vars (?v0 Int) (?v1 Int)) #83)
#120 := (iff #86 #119)
#117 := (iff #83 #116)
#114 := (= #80 #113)
#111 := (= #77 #110)
#108 := (iff #26 #107)
#105 := (iff #25 #104)
#95 := (iff #22 #94)
#96 := [rewrite]: #95
#102 := (iff #24 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103 #96]: #105
#98 := (iff #23 #97)
#91 := (iff #21 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [monotonicity #115]: #117
#121 := [quant-intro #118]: #120
#87 := (iff #34 #86)
#84 := (iff #33 #83)
#81 := (= #32 #80)
#78 := (= #31 #77)
#75 := (= #30 #74)
#72 := (= #29 #71)
#73 := [rewrite]: #72
#69 := (= #28 #68)
#70 := [rewrite]: #69
#76 := [monotonicity #70 #73]: #75
#79 := [monotonicity #76]: #78
#82 := [monotonicity #79]: #81
#85 := [monotonicity #82]: #84
#88 := [quant-intro #85]: #87
#123 := [trans #88 #121]: #122
#66 := [asserted]: #34
#124 := [mp #66 #123]: #119
#173 := [mp~ #124 #182]: #119
#204 := [mp #173 #203]: #201
#235 := [mp #204 #234]: #232
#732 := [mp #235 #731]: #727
#10 := 1::Int
#9 := (f4 f5 0::Int)
#11 := (f3 #9 1::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#65 := [asserted]: #13
#659 := (not #727)
#544 := (or #659 #12)
#388 := (* -1::Int 1::Int)
#714 := (* -1::Int 0::Int)
#389 := (div #714 #388)
#721 := (* -1::Int #389)
#722 := (+ #11 #721)
#723 := (= #722 0::Int)
#718 := (div 0::Int 1::Int)
#720 := (* -1::Int #718)
#377 := (+ #11 #720)
#507 := (= #377 0::Int)
#390 := (<= 1::Int 0::Int)
#403 := (>= 0::Int 0::Int)
#400 := (or #403 #390)
#404 := (not #400)
#399 := (<= 0::Int 0::Int)
#401 := (or #399 #390)
#402 := (not #401)
#383 := (or #402 #404)
#724 := (if #383 #507 #723)
#397 := (= 1::Int 0::Int)
#313 := (= 0::Int 0::Int)
#398 := (or #313 #397)
#719 := (if #398 #12 #724)
#559 := (or #659 #719)
#562 := (iff #559 #544)
#563 := (iff #544 #544)
#564 := [rewrite]: #563
#655 := (iff #719 #12)
#1 := true
#550 := (if true #12 #12)
#658 := (iff #550 #12)
#560 := [rewrite]: #658
#551 := (iff #719 #550)
#667 := (iff #724 #12)
#662 := (if false #12 #12)
#666 := (iff #662 #12)
#664 := [rewrite]: #666
#663 := (iff #724 #662)
#508 := (iff #723 #12)
#677 := (= #722 #11)
#691 := (+ #11 0::Int)
#681 := (= #691 #11)
#682 := [rewrite]: #681
#676 := (= #722 #691)
#669 := (= #721 0::Int)
#689 := (= #714 0::Int)
#690 := [rewrite]: #689
#674 := (= #721 #714)
#672 := (= #389 0::Int)
#686 := (div 0::Int -1::Int)
#529 := (= #686 0::Int)
#671 := [rewrite]: #529
#527 := (= #389 #686)
#685 := (= #388 -1::Int)
#680 := [rewrite]: #685
#528 := [monotonicity #690 #680]: #527
#673 := [trans #528 #671]: #672
#668 := [monotonicity #673]: #674
#675 := [trans #668 #690]: #669
#670 := [monotonicity #675]: #676
#506 := [trans #670 #682]: #677
#509 := [monotonicity #506]: #508
#679 := (iff #507 #12)
#683 := (= #377 #11)
#688 := (= #377 #691)
#405 := (= #720 0::Int)
#410 := (= #720 #714)
#408 := (= #718 0::Int)
#409 := [rewrite]: #408
#411 := [monotonicity #409]: #410
#687 := [trans #411 #690]: #405
#692 := [monotonicity #687]: #688
#678 := [trans #692 #682]: #683
#684 := [monotonicity #678]: #679
#694 := (iff #383 false)
#696 := (or false false)
#693 := (iff #696 false)
#697 := [rewrite]: #693
#418 := (iff #383 #696)
#319 := (iff #404 false)
#708 := (not true)
#711 := (iff #708 false)
#351 := [rewrite]: #711
#424 := (iff #404 #708)
#422 := (iff #400 true)
#716 := (or true false)
#360 := (iff #716 true)
#701 := [rewrite]: #360
#699 := (iff #400 #716)
#703 := (iff #390 false)
#704 := [rewrite]: #703
#710 := (iff #403 true)
#713 := [rewrite]: #710
#700 := [monotonicity #713 #704]: #699
#423 := [trans #700 #701]: #422
#425 := [monotonicity #423]: #424
#695 := [trans #425 #351]: #319
#352 := (iff #402 false)
#346 := (iff #402 #708)
#707 := (iff #401 true)
#705 := (iff #401 #716)
#366 := (iff #399 true)
#367 := [rewrite]: #366
#706 := [monotonicity #367 #704]: #705
#702 := [trans #706 #701]: #707
#709 := [monotonicity #702]: #346
#712 := [trans #709 #351]: #352
#419 := [monotonicity #712 #695]: #418
#698 := [trans #419 #697]: #694
#665 := [monotonicity #698 #684 #509]: #663
#549 := [trans #665 #664]: #667
#364 := (iff #398 true)
#376 := (iff #398 #716)
#375 := (iff #397 false)
#380 := [rewrite]: #375
#725 := (iff #313 true)
#715 := [rewrite]: #725
#717 := [monotonicity #715 #380]: #376
#365 := [trans #717 #701]: #364
#510 := [monotonicity #365 #549]: #551
#656 := [trans #510 #560]: #655
#555 := [monotonicity #656]: #562
#565 := [trans #555 #564]: #562
#561 := [quant-inst #8 #10]: #559
#566 := [mp #561 #565]: #544
[unit-resolution #566 #65 #732]: false
unsat
fe9044a7983d603398b14459325449d5e84b7012 275 0
#2 := false
decl f3 :: (-> S2 Int Int)
#15 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#13 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#14 := (f4 f5 #13)
#16 := (f3 #14 #15)
#726 := (pattern #16)
#17 := 0::Int
#67 := -1::Int
#71 := (* -1::Int #15)
#68 := (* -1::Int #13)
#74 := (div #68 #71)
#225 := (* -1::Int #74)
#226 := (+ #16 #225)
#227 := (= #226 0::Int)
#27 := (div #13 #15)
#222 := (* -1::Int #27)
#223 := (+ #16 #222)
#224 := (= #223 0::Int)
#93 := (<= #15 0::Int)
#100 := (>= #13 0::Int)
#185 := (or #100 #93)
#186 := (not #185)
#89 := (<= #13 0::Int)
#183 := (or #89 #93)
#184 := (not #183)
#189 := (or #184 #186)
#228 := (if #189 #224 #227)
#221 := (= #16 0::Int)
#19 := (= #15 0::Int)
#18 := (= #13 0::Int)
#20 := (or #18 #19)
#229 := (if #20 #221 #228)
#727 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #726) #229)
#232 := (forall (vars (?v0 Int) (?v1 Int)) #229)
#730 := (iff #232 #727)
#728 := (iff #229 #229)
#729 := [refl]: #728
#731 := [quant-intro #729]: #730
#192 := (if #189 #27 #74)
#195 := (if #20 0::Int #192)
#198 := (= #16 #195)
#201 := (forall (vars (?v0 Int) (?v1 Int)) #198)
#233 := (iff #201 #232)
#230 := (iff #198 #229)
#231 := [rewrite]: #230
#234 := [quant-intro #231]: #233
#94 := (not #93)
#101 := (not #100)
#104 := (and #101 #94)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#110 := (if #107 #27 #74)
#113 := (if #20 0::Int #110)
#116 := (= #16 #113)
#119 := (forall (vars (?v0 Int) (?v1 Int)) #116)
#202 := (iff #119 #201)
#199 := (iff #116 #198)
#196 := (= #113 #195)
#193 := (= #110 #192)
#190 := (iff #107 #189)
#187 := (iff #104 #186)
#188 := [rewrite]: #187
#177 := (iff #97 #184)
#178 := [rewrite]: #177
#191 := [monotonicity #178 #188]: #190
#194 := [monotonicity #191]: #193
#197 := [monotonicity #194]: #196
#200 := [monotonicity #197]: #199
#203 := [quant-intro #200]: #202
#181 := (~ #119 #119)
#179 := (~ #116 #116)
#180 := [refl]: #179
#182 := [nnf-pos #180]: #181
#29 := (- #15)
#28 := (- #13)
#30 := (div #28 #29)
#22 := (< 0::Int #15)
#24 := (< #13 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #13)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (if #26 #27 #30)
#32 := (if #20 0::Int #31)
#33 := (= #16 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#122 := (iff #34 #119)
#77 := (if #26 #27 #74)
#80 := (if #20 0::Int #77)
#83 := (= #16 #80)
#86 := (forall (vars (?v0 Int) (?v1 Int)) #83)
#120 := (iff #86 #119)
#117 := (iff #83 #116)
#114 := (= #80 #113)
#111 := (= #77 #110)
#108 := (iff #26 #107)
#105 := (iff #25 #104)
#95 := (iff #22 #94)
#96 := [rewrite]: #95
#102 := (iff #24 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103 #96]: #105
#98 := (iff #23 #97)
#91 := (iff #21 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [monotonicity #115]: #117
#121 := [quant-intro #118]: #120
#87 := (iff #34 #86)
#84 := (iff #33 #83)
#81 := (= #32 #80)
#78 := (= #31 #77)
#75 := (= #30 #74)
#72 := (= #29 #71)
#73 := [rewrite]: #72
#69 := (= #28 #68)
#70 := [rewrite]: #69
#76 := [monotonicity #70 #73]: #75
#79 := [monotonicity #76]: #78
#82 := [monotonicity #79]: #81
#85 := [monotonicity #82]: #84
#88 := [quant-intro #85]: #87
#123 := [trans #88 #121]: #122
#66 := [asserted]: #34
#124 := [mp #66 #123]: #119
#173 := [mp~ #124 #182]: #119
#204 := [mp #173 #203]: #201
#235 := [mp #204 #234]: #232
#732 := [mp #235 #731]: #727
#8 := 1::Int
#9 := (f4 f5 1::Int)
#10 := (f3 #9 1::Int)
#11 := (= #10 1::Int)
#12 := (not #11)
#65 := [asserted]: #12
#561 := (not #727)
#562 := (or #561 #11)
#507 := (* -1::Int 1::Int)
#714 := (div #507 #507)
#388 := (* -1::Int #714)
#389 := (+ #10 #388)
#721 := (= #389 0::Int)
#383 := (div 1::Int 1::Int)
#718 := (* -1::Int #383)
#720 := (+ #10 #718)
#377 := (= #720 0::Int)
#399 := (<= 1::Int 0::Int)
#402 := (>= 1::Int 0::Int)
#403 := (or #402 #399)
#400 := (not #403)
#390 := (or #399 #399)
#401 := (not #390)
#404 := (or #401 #400)
#722 := (if #404 #377 #721)
#398 := (= #10 0::Int)
#313 := (= 1::Int 0::Int)
#397 := (or #313 #313)
#723 := (if #397 #398 #722)
#555 := (or #561 #723)
#564 := (iff #555 #562)
#566 := (iff #562 #562)
#567 := [rewrite]: #566
#544 := (iff #723 #11)
#658 := (if false #398 #11)
#656 := (iff #658 #11)
#659 := [rewrite]: #656
#560 := (iff #723 #658)
#551 := (iff #722 #11)
#1 := true
#666 := (if true #11 #11)
#549 := (iff #666 #11)
#550 := [rewrite]: #549
#664 := (iff #722 #666)
#663 := (iff #721 #11)
#691 := (+ -1::Int #10)
#683 := (= #691 0::Int)
#684 := (iff #683 #11)
#685 := [rewrite]: #684
#509 := (iff #721 #683)
#506 := (= #389 #691)
#690 := (+ #10 -1::Int)
#688 := (= #690 #691)
#692 := [rewrite]: #688
#670 := (= #389 #690)
#675 := (= #388 -1::Int)
#409 := (= #507 -1::Int)
#410 := [rewrite]: #409
#668 := (= #388 #507)
#673 := (= #714 1::Int)
#527 := (div -1::Int -1::Int)
#671 := (= #527 1::Int)
#672 := [rewrite]: #671
#528 := (= #714 #527)
#529 := [monotonicity #410 #410]: #528
#674 := [trans #529 #672]: #673
#669 := [monotonicity #674]: #668
#676 := [trans #669 #410]: #675
#677 := [monotonicity #676]: #670
#508 := [trans #677 #692]: #506
#662 := [monotonicity #508]: #509
#665 := [trans #662 #685]: #663
#680 := (iff #377 #11)
#678 := (iff #377 #683)
#681 := (= #720 #691)
#405 := (= #720 #690)
#411 := (= #718 -1::Int)
#698 := (= #718 #507)
#697 := (= #383 1::Int)
#694 := [rewrite]: #697
#408 := [monotonicity #694]: #698
#689 := [trans #408 #410]: #411
#687 := [monotonicity #689]: #405
#682 := [trans #687 #692]: #681
#679 := [monotonicity #682]: #678
#686 := [trans #679 #685]: #680
#419 := (iff #404 true)
#711 := (or true false)
#712 := (iff #711 true)
#710 := [rewrite]: #712
#696 := (iff #404 #711)
#319 := (iff #400 false)
#700 := (not true)
#424 := (iff #700 false)
#425 := [rewrite]: #424
#422 := (iff #400 #700)
#713 := (iff #403 true)
#351 := (iff #403 #711)
#360 := (iff #399 false)
#701 := [rewrite]: #360
#346 := (iff #402 true)
#709 := [rewrite]: #346
#352 := [monotonicity #709 #701]: #351
#699 := [trans #352 #710]: #713
#423 := [monotonicity #699]: #422
#695 := [trans #423 #425]: #319
#702 := (iff #401 true)
#703 := (not false)
#706 := (iff #703 true)
#707 := [rewrite]: #706
#704 := (iff #401 #703)
#366 := (iff #390 false)
#725 := (or false false)
#380 := (iff #725 false)
#716 := [rewrite]: #380
#364 := (iff #390 #725)
#365 := [monotonicity #701 #701]: #364
#367 := [trans #365 #716]: #366
#705 := [monotonicity #367]: #704
#708 := [trans #705 #707]: #702
#418 := [monotonicity #708 #695]: #696
#693 := [trans #418 #710]: #419
#667 := [monotonicity #693 #686 #665]: #664
#510 := [trans #667 #550]: #551
#376 := (iff #397 false)
#715 := (iff #397 #725)
#724 := (iff #313 false)
#719 := [rewrite]: #724
#375 := [monotonicity #719 #719]: #715
#717 := [trans #375 #716]: #376
#655 := [monotonicity #717 #510]: #560
#559 := [trans #655 #659]: #544
#565 := [monotonicity #559]: #564
#660 := [trans #565 #567]: #564
#563 := [quant-inst #8 #8]: #555
#657 := [mp #563 #660]: #562
[unit-resolution #657 #65 #732]: false
unsat
2afe6ba8054e3b6ca9e599e36f01a50ef2fd9772 286 0
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#726 := (pattern #17)
#18 := 0::Int
#68 := -1::Int
#72 := (* -1::Int #16)
#69 := (* -1::Int #14)
#75 := (div #69 #72)
#226 := (* -1::Int #75)
#227 := (+ #17 #226)
#228 := (= #227 0::Int)
#28 := (div #14 #16)
#223 := (* -1::Int #28)
#224 := (+ #17 #223)
#225 := (= #224 0::Int)
#94 := (<= #16 0::Int)
#101 := (>= #14 0::Int)
#186 := (or #101 #94)
#187 := (not #186)
#90 := (<= #14 0::Int)
#184 := (or #90 #94)
#185 := (not #184)
#190 := (or #185 #187)
#229 := (if #190 #225 #228)
#222 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #14 0::Int)
#21 := (or #19 #20)
#230 := (if #21 #222 #229)
#727 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #726) #230)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#730 := (iff #233 #727)
#728 := (iff #230 #230)
#729 := [refl]: #728
#731 := [quant-intro #729]: #730
#193 := (if #190 #28 #75)
#196 := (if #21 0::Int #193)
#199 := (= #17 #196)
#202 := (forall (vars (?v0 Int) (?v1 Int)) #199)
#234 := (iff #202 #233)
#231 := (iff #199 #230)
#232 := [rewrite]: #231
#235 := [quant-intro #232]: #234
#95 := (not #94)
#102 := (not #101)
#105 := (and #102 #95)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#111 := (if #108 #28 #75)
#114 := (if #21 0::Int #111)
#117 := (= #17 #114)
#120 := (forall (vars (?v0 Int) (?v1 Int)) #117)
#203 := (iff #120 #202)
#200 := (iff #117 #199)
#197 := (= #114 #196)
#194 := (= #111 #193)
#191 := (iff #108 #190)
#188 := (iff #105 #187)
#189 := [rewrite]: #188
#178 := (iff #98 #185)
#179 := [rewrite]: #178
#192 := [monotonicity #179 #189]: #191
#195 := [monotonicity #192]: #194
#198 := [monotonicity #195]: #197
#201 := [monotonicity #198]: #200
#204 := [quant-intro #201]: #203
#182 := (~ #120 #120)
#180 := (~ #117 #117)
#181 := [refl]: #180
#183 := [nnf-pos #181]: #182
#30 := (- #16)
#29 := (- #14)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #14 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #14)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#123 := (iff #35 #120)
#78 := (if #27 #28 #75)
#81 := (if #21 0::Int #78)
#84 := (= #17 #81)
#87 := (forall (vars (?v0 Int) (?v1 Int)) #84)
#121 := (iff #87 #120)
#118 := (iff #84 #117)
#115 := (= #81 #114)
#112 := (= #78 #111)
#109 := (iff #27 #108)
#106 := (iff #26 #105)
#96 := (iff #23 #95)
#97 := [rewrite]: #96
#103 := (iff #25 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104 #97]: #106
#99 := (iff #24 #98)
#92 := (iff #22 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#88 := (iff #35 #87)
#85 := (iff #34 #84)
#82 := (= #33 #81)
#79 := (= #32 #78)
#76 := (= #31 #75)
#73 := (= #30 #72)
#74 := [rewrite]: #73
#70 := (= #29 #69)
#71 := [rewrite]: #70
#77 := [monotonicity #71 #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#124 := [trans #89 #122]: #123
#67 := [asserted]: #35
#125 := [mp #67 #124]: #120
#174 := [mp~ #125 #183]: #120
#205 := [mp #174 #204]: #202
#236 := [mp #205 #235]: #233
#732 := [mp #236 #731]: #727
#8 := 3::Int
#10 := 1::Int
#9 := (f4 f5 3::Int)
#11 := (f3 #9 1::Int)
#12 := (= #11 3::Int)
#13 := (not #12)
#66 := [asserted]: #13
#661 := (not #727)
#648 := (or #661 #12)
#389 := (* -1::Int 1::Int)
#388 := (* -1::Int 3::Int)
#721 := (div #388 #389)
#722 := (* -1::Int #721)
#723 := (+ #11 #722)
#724 := (= #723 0::Int)
#720 := (div 3::Int 1::Int)
#377 := (* -1::Int #720)
#507 := (+ #11 #377)
#714 := (= #507 0::Int)
#401 := (<= 1::Int 0::Int)
#400 := (>= 3::Int 0::Int)
#404 := (or #400 #401)
#383 := (not #404)
#390 := (<= 3::Int 0::Int)
#402 := (or #390 #401)
#403 := (not #402)
#718 := (or #403 #383)
#719 := (if #718 #714 #724)
#399 := (= #11 0::Int)
#397 := (= 1::Int 0::Int)
#313 := (= 3::Int 0::Int)
#398 := (or #313 #397)
#725 := (if #398 #399 #719)
#650 := (or #661 #725)
#639 := (iff #650 #648)
#651 := (iff #648 #648)
#652 := [rewrite]: #651
#660 := (iff #725 #12)
#563 := (if false #399 #12)
#566 := (iff #563 #12)
#567 := [rewrite]: #566
#564 := (iff #725 #563)
#562 := (iff #719 #12)
#1 := true
#656 := (if true #12 #12)
#559 := (iff #656 #12)
#561 := [rewrite]: #559
#659 := (iff #719 #656)
#560 := (iff #724 #12)
#691 := -3::Int
#684 := (+ -3::Int #11)
#528 := (= #684 0::Int)
#672 := (iff #528 #12)
#673 := [rewrite]: #672
#510 := (iff #724 #528)
#550 := (= #723 #684)
#683 := (+ #11 -3::Int)
#685 := (= #683 #684)
#680 := [rewrite]: #685
#667 := (= #723 #683)
#666 := (= #722 -3::Int)
#688 := (= #388 -3::Int)
#692 := [rewrite]: #688
#663 := (= #722 #388)
#509 := (= #721 3::Int)
#676 := (div -3::Int -1::Int)
#506 := (= #676 3::Int)
#508 := [rewrite]: #506
#670 := (= #721 #676)
#669 := (= #389 -1::Int)
#675 := [rewrite]: #669
#677 := [monotonicity #692 #675]: #670
#662 := [trans #677 #508]: #509
#665 := [monotonicity #662]: #663
#664 := [trans #665 #692]: #666
#549 := [monotonicity #664]: #667
#551 := [trans #549 #680]: #550
#658 := [monotonicity #551]: #510
#655 := [trans #658 #673]: #560
#674 := (iff #714 #12)
#529 := (iff #714 #528)
#686 := (= #507 #684)
#678 := (= #507 #683)
#681 := (= #377 -3::Int)
#405 := (= #377 #388)
#689 := (= #720 3::Int)
#690 := [rewrite]: #689
#687 := [monotonicity #690]: #405
#682 := [trans #687 #692]: #681
#679 := [monotonicity #682]: #678
#527 := [trans #679 #680]: #686
#671 := [monotonicity #527]: #529
#668 := [trans #671 #673]: #674
#410 := (iff #718 true)
#700 := (or true false)
#424 := (iff #700 true)
#425 := [rewrite]: #424
#408 := (iff #718 #700)
#694 := (iff #383 false)
#696 := (not true)
#693 := (iff #696 false)
#697 := [rewrite]: #693
#418 := (iff #383 #696)
#319 := (iff #404 true)
#422 := (iff #404 #700)
#704 := (iff #401 false)
#705 := [rewrite]: #704
#713 := (iff #400 true)
#699 := [rewrite]: #713
#423 := [monotonicity #699 #705]: #422
#695 := [trans #423 #425]: #319
#419 := [monotonicity #695]: #418
#698 := [trans #419 #697]: #694
#712 := (iff #403 true)
#346 := (not false)
#351 := (iff #346 true)
#352 := [rewrite]: #351
#709 := (iff #403 #346)
#702 := (iff #402 false)
#376 := (or false false)
#701 := (iff #376 false)
#364 := [rewrite]: #701
#706 := (iff #402 #376)
#367 := (iff #390 false)
#703 := [rewrite]: #367
#707 := [monotonicity #703 #705]: #706
#708 := [trans #707 #364]: #702
#711 := [monotonicity #708]: #709
#710 := [trans #711 #352]: #712
#409 := [monotonicity #710 #698]: #408
#411 := [trans #409 #425]: #410
#544 := [monotonicity #411 #668 #655]: #659
#555 := [trans #544 #561]: #562
#365 := (iff #398 false)
#717 := (iff #398 #376)
#380 := (iff #397 false)
#716 := [rewrite]: #380
#715 := (iff #313 false)
#375 := [rewrite]: #715
#360 := [monotonicity #375 #716]: #717
#366 := [trans #360 #364]: #365
#565 := [monotonicity #366 #555]: #564
#657 := [trans #565 #567]: #660
#641 := [monotonicity #657]: #639
#653 := [trans #641 #652]: #639
#642 := [quant-inst #8 #10]: #650
#649 := [mp #642 #653]: #648
[unit-resolution #649 #66 #732]: false
unsat
bc025623c048399a2cbdaaab334a8777f197552e 314 0
#2 := false
#18 := 0::Int
decl f3 :: (-> S2 Int Int)
#10 := 1::Int
decl f4 :: (-> S3 Int S2)
decl f6 :: Int
#8 := f6
decl f5 :: S3
#7 := f5
#9 := (f4 f5 f6)
#11 := (f3 #9 1::Int)
#400 := (= #11 0::Int)
#560 := (not #400)
#12 := (= #11 f6)
#13 := (not #12)
#532 := (iff #13 #560)
#526 := (iff #12 #400)
#570 := (iff #400 #12)
#569 := (= 0::Int f6)
#314 := (= f6 0::Int)
#721 := (div f6 1::Int)
#68 := -1::Int
#378 := (* -1::Int #721)
#508 := (+ #11 #378)
#715 := (= #508 0::Int)
#665 := (not #715)
#629 := (= #721 f6)
#572 := (= f6 #721)
#611 := (+ f6 #378)
#617 := (<= #611 0::Int)
#631 := (= #611 0::Int)
#1 := true
#64 := [true-axiom]: true
#583 := (or false #631)
#584 := [th-lemma arith]: #583
#585 := [unit-resolution #584 #64]: #631
#588 := (not #631)
#589 := (or #588 #617)
#590 := [th-lemma arith triangle-eq]: #589
#586 := [unit-resolution #590 #585]: #617
#618 := (>= #611 0::Int)
#591 := (or #588 #618)
#571 := [th-lemma arith triangle-eq]: #591
#517 := [unit-resolution #571 #585]: #618
#553 := [th-lemma arith eq-propagate 1 1 #517 #586]: #572
#573 := [symm #553]: #629
#582 := (= #11 #721)
#677 := (<= #508 0::Int)
#601 := [hypothesis]: #715
#574 := (or #665 #677)
#575 := [th-lemma arith triangle-eq]: #574
#576 := [unit-resolution #575 #601]: #677
#671 := (>= #508 0::Int)
#469 := (or #665 #671)
#580 := [th-lemma arith triangle-eq]: #469
#581 := [unit-resolution #580 #601]: #671
#587 := [th-lemma arith eq-propagate 1 1 #581 #576]: #582
#579 := [trans #587 #573]: #12
#66 := [asserted]: #13
#547 := [unit-resolution #66 #579]: false
#554 := [lemma #547]: #665
#389 := (* -1::Int f6)
#419 := (div #389 -1::Int)
#698 := (* -1::Int #419)
#409 := (+ #11 #698)
#412 := (= #409 0::Int)
#401 := (>= f6 0::Int)
#701 := (not #401)
#391 := (<= f6 0::Int)
#709 := (not #391)
#425 := (or #709 #701)
#406 := (if #425 #715 #412)
#561 := (not #314)
#651 := [hypothesis]: #561
#578 := (or #314 #406)
#689 := (if #314 #400 #406)
#16 := (:var 0 Int)
#14 := (:var 1 Int)
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#727 := (pattern #17)
#72 := (* -1::Int #16)
#69 := (* -1::Int #14)
#75 := (div #69 #72)
#226 := (* -1::Int #75)
#227 := (+ #17 #226)
#228 := (= #227 0::Int)
#28 := (div #14 #16)
#223 := (* -1::Int #28)
#224 := (+ #17 #223)
#225 := (= #224 0::Int)
#94 := (<= #16 0::Int)
#101 := (>= #14 0::Int)
#186 := (or #101 #94)
#187 := (not #186)
#90 := (<= #14 0::Int)
#184 := (or #90 #94)
#185 := (not #184)
#190 := (or #185 #187)
#229 := (if #190 #225 #228)
#222 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #14 0::Int)
#21 := (or #19 #20)
#230 := (if #21 #222 #229)
#728 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #727) #230)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#731 := (iff #233 #728)
#729 := (iff #230 #230)
#730 := [refl]: #729
#732 := [quant-intro #730]: #731
#193 := (if #190 #28 #75)
#196 := (if #21 0::Int #193)
#199 := (= #17 #196)
#202 := (forall (vars (?v0 Int) (?v1 Int)) #199)
#234 := (iff #202 #233)
#231 := (iff #199 #230)
#232 := [rewrite]: #231
#235 := [quant-intro #232]: #234
#95 := (not #94)
#102 := (not #101)
#105 := (and #102 #95)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#111 := (if #108 #28 #75)
#114 := (if #21 0::Int #111)
#117 := (= #17 #114)
#120 := (forall (vars (?v0 Int) (?v1 Int)) #117)
#203 := (iff #120 #202)
#200 := (iff #117 #199)
#197 := (= #114 #196)
#194 := (= #111 #193)
#191 := (iff #108 #190)
#188 := (iff #105 #187)
#189 := [rewrite]: #188
#178 := (iff #98 #185)
#179 := [rewrite]: #178
#192 := [monotonicity #179 #189]: #191
#195 := [monotonicity #192]: #194
#198 := [monotonicity #195]: #197
#201 := [monotonicity #198]: #200
#204 := [quant-intro #201]: #203
#182 := (~ #120 #120)
#180 := (~ #117 #117)
#181 := [refl]: #180
#183 := [nnf-pos #181]: #182
#30 := (- #16)
#29 := (- #14)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #14 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #14)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#123 := (iff #35 #120)
#78 := (if #27 #28 #75)
#81 := (if #21 0::Int #78)
#84 := (= #17 #81)
#87 := (forall (vars (?v0 Int) (?v1 Int)) #84)
#121 := (iff #87 #120)
#118 := (iff #84 #117)
#115 := (= #81 #114)
#112 := (= #78 #111)
#109 := (iff #27 #108)
#106 := (iff #26 #105)
#96 := (iff #23 #95)
#97 := [rewrite]: #96
#103 := (iff #25 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104 #97]: #106
#99 := (iff #24 #98)
#92 := (iff #22 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#88 := (iff #35 #87)
#85 := (iff #34 #84)
#82 := (= #33 #81)
#79 := (= #32 #78)
#76 := (= #31 #75)
#73 := (= #30 #72)
#74 := [rewrite]: #73
#70 := (= #29 #69)
#71 := [rewrite]: #70
#77 := [monotonicity #71 #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#124 := [trans #89 #122]: #123
#67 := [asserted]: #35
#125 := [mp #67 #124]: #120
#174 := [mp~ #125 #183]: #120
#205 := [mp #174 #204]: #202
#236 := [mp #205 #235]: #233
#733 := [mp #236 #732]: #728
#683 := (not #728)
#684 := (or #683 #689)
#390 := (* -1::Int 1::Int)
#722 := (div #389 #390)
#723 := (* -1::Int #722)
#724 := (+ #11 #723)
#725 := (= #724 0::Int)
#402 := (<= 1::Int 0::Int)
#405 := (or #401 #402)
#384 := (not #405)
#403 := (or #391 #402)
#404 := (not #403)
#719 := (or #404 #384)
#720 := (if #719 #715 #725)
#398 := (= 1::Int 0::Int)
#399 := (or #314 #398)
#726 := (if #399 #400 #720)
#679 := (or #683 #726)
#685 := (iff #679 #684)
#681 := (iff #684 #684)
#687 := [rewrite]: #681
#693 := (iff #726 #689)
#688 := (iff #720 #406)
#690 := (iff #725 #412)
#410 := (= #724 #409)
#695 := (= #723 #698)
#420 := (= #722 #419)
#696 := (= #390 -1::Int)
#697 := [rewrite]: #696
#694 := [monotonicity #697]: #420
#699 := [monotonicity #694]: #695
#411 := [monotonicity #699]: #410
#691 := [monotonicity #411]: #690
#426 := (iff #719 #425)
#423 := (iff #384 #701)
#714 := (iff #405 #401)
#712 := (or #401 false)
#713 := (iff #712 #401)
#711 := [rewrite]: #713
#352 := (iff #405 #712)
#366 := (iff #402 false)
#367 := [rewrite]: #366
#353 := [monotonicity #367]: #352
#700 := [trans #353 #711]: #714
#424 := [monotonicity #700]: #423
#347 := (iff #404 #709)
#708 := (iff #403 #391)
#368 := (or #391 false)
#706 := (iff #368 #391)
#707 := [rewrite]: #706
#704 := (iff #403 #368)
#705 := [monotonicity #367]: #704
#703 := [trans #705 #707]: #708
#710 := [monotonicity #703]: #347
#320 := [monotonicity #710 #424]: #426
#692 := [monotonicity #320 #691]: #688
#702 := (iff #399 #314)
#381 := (or #314 false)
#718 := (iff #381 #314)
#361 := [rewrite]: #718
#717 := (iff #399 #381)
#716 := (iff #398 false)
#376 := [rewrite]: #716
#377 := [monotonicity #376]: #717
#365 := [trans #377 #361]: #702
#682 := [monotonicity #365 #692]: #693
#686 := [monotonicity #682]: #685
#528 := [trans #686 #687]: #685
#680 := [quant-inst #8 #10]: #679
#529 := [mp #680 #528]: #684
#577 := [unit-resolution #529 #733]: #689
#659 := (not #689)
#660 := (or #659 #314 #406)
#545 := [def-axiom]: #660
#513 := [unit-resolution #545 #577]: #578
#544 := [unit-resolution #513 #651]: #406
#653 := (or #425 #314)
#675 := (not #425)
#658 := [hypothesis]: #675
#530 := (or #425 #391)
#672 := [def-axiom]: #530
#662 := [unit-resolution #672 #658]: #391
#673 := (or #425 #401)
#674 := [def-axiom]: #673
#649 := [unit-resolution #674 #658]: #401
#643 := (or #314 #709 #701)
#640 := [th-lemma arith triangle-eq]: #643
#642 := [unit-resolution #640 #651]: #425
#652 := [unit-resolution #642 #649 #662]: false
#654 := [lemma #652]: #653
#546 := [unit-resolution #654 #651]: #425
#510 := (not #406)
#663 := (or #510 #675 #715)
#664 := [def-axiom]: #663
#548 := [unit-resolution #664 #546 #544 #554]: false
#555 := [lemma #548]: #314
#549 := [symm #555]: #569
#525 := [monotonicity #549]: #570
#531 := [symm #525]: #526
#533 := [monotonicity #531]: #532
#534 := [mp #66 #533]: #560
#557 := (or #561 #400)
#656 := (or #659 #561 #400)
#657 := [def-axiom]: #656
#558 := [unit-resolution #657 #577]: #557
#559 := [unit-resolution #558 #555]: #400
[unit-resolution #559 #534]: false
unsat
54537fcadbc5f87e29d49193f557c51ef593586b 288 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#739 := (pattern #18)
#8 := 0::Int
#67 := -1::Int
#84 := (* -1::Int #17)
#80 := (* -1::Int #15)
#87 := (div #80 #84)
#238 := (* -1::Int #87)
#239 := (+ #18 #238)
#240 := (= #239 0::Int)
#28 := (div #15 #17)
#235 := (* -1::Int #28)
#236 := (+ #18 #235)
#237 := (= #236 0::Int)
#106 := (<= #17 0::Int)
#113 := (>= #15 0::Int)
#198 := (or #113 #106)
#199 := (not #198)
#102 := (<= #15 0::Int)
#196 := (or #102 #106)
#197 := (not #196)
#202 := (or #197 #199)
#241 := (if #202 #237 #240)
#234 := (= #18 0::Int)
#20 := (= #17 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#242 := (if #21 #234 #241)
#740 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #739) #242)
#245 := (forall (vars (?v0 Int) (?v1 Int)) #242)
#743 := (iff #245 #740)
#741 := (iff #242 #242)
#742 := [refl]: #741
#744 := [quant-intro #742]: #743
#205 := (if #202 #28 #87)
#208 := (if #21 0::Int #205)
#211 := (= #18 #208)
#214 := (forall (vars (?v0 Int) (?v1 Int)) #211)
#246 := (iff #214 #245)
#243 := (iff #211 #242)
#244 := [rewrite]: #243
#247 := [quant-intro #244]: #246
#107 := (not #106)
#114 := (not #113)
#117 := (and #114 #107)
#103 := (not #102)
#110 := (and #103 #107)
#120 := (or #110 #117)
#123 := (if #120 #28 #87)
#126 := (if #21 0::Int #123)
#129 := (= #18 #126)
#132 := (forall (vars (?v0 Int) (?v1 Int)) #129)
#215 := (iff #132 #214)
#212 := (iff #129 #211)
#209 := (= #126 #208)
#206 := (= #123 #205)
#203 := (iff #120 #202)
#200 := (iff #117 #199)
#201 := [rewrite]: #200
#190 := (iff #110 #197)
#191 := [rewrite]: #190
#204 := [monotonicity #191 #201]: #203
#207 := [monotonicity #204]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [quant-intro #213]: #215
#194 := (~ #132 #132)
#192 := (~ #129 #129)
#193 := [refl]: #192
#195 := [nnf-pos #193]: #194
#30 := (- #17)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #18 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#135 := (iff #35 #132)
#90 := (if #27 #28 #87)
#93 := (if #21 0::Int #90)
#96 := (= #18 #93)
#99 := (forall (vars (?v0 Int) (?v1 Int)) #96)
#133 := (iff #99 #132)
#130 := (iff #96 #129)
#127 := (= #93 #126)
#124 := (= #90 #123)
#121 := (iff #27 #120)
#118 := (iff #26 #117)
#108 := (iff #23 #107)
#109 := [rewrite]: #108
#115 := (iff #25 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116 #109]: #118
#111 := (iff #24 #110)
#104 := (iff #22 #103)
#105 := [rewrite]: #104
#112 := [monotonicity #105 #109]: #111
#122 := [monotonicity #112 #119]: #121
#125 := [monotonicity #122]: #124
#128 := [monotonicity #125]: #127
#131 := [monotonicity #128]: #130
#134 := [quant-intro #131]: #133
#100 := (iff #35 #99)
#97 := (iff #34 #96)
#94 := (= #33 #93)
#91 := (= #32 #90)
#88 := (= #31 #87)
#85 := (= #30 #84)
#86 := [rewrite]: #85
#82 := (= #29 #80)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#92 := [monotonicity #89]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#101 := [quant-intro #98]: #100
#136 := [trans #101 #134]: #135
#79 := [asserted]: #35
#137 := [mp #79 #136]: #132
#186 := [mp~ #137 #195]: #132
#217 := [mp #186 #216]: #214
#248 := [mp #217 #247]: #245
#745 := [mp #248 #744]: #740
#9 := (f4 f5 0::Int)
#70 := (f3 #9 -1::Int)
#73 := (= #70 0::Int)
#76 := (not #73)
#10 := 1::Int
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#13 := (= #12 0::Int)
#14 := (not #13)
#77 := (iff #14 #76)
#74 := (iff #13 #73)
#71 := (= #12 #70)
#68 := (= #11 -1::Int)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#66 := [asserted]: #14
#81 := [mp #66 #78]: #76
#574 := (not #740)
#575 := (or #574 #73)
#401 := (* -1::Int -1::Int)
#727 := (* -1::Int 0::Int)
#402 := (div #727 #401)
#734 := (* -1::Int #402)
#735 := (+ #70 #734)
#736 := (= #735 0::Int)
#731 := (div 0::Int -1::Int)
#733 := (* -1::Int #731)
#390 := (+ #70 #733)
#520 := (= #390 0::Int)
#403 := (<= -1::Int 0::Int)
#416 := (>= 0::Int 0::Int)
#413 := (or #416 #403)
#417 := (not #413)
#412 := (<= 0::Int 0::Int)
#414 := (or #412 #403)
#415 := (not #414)
#396 := (or #415 #417)
#737 := (if #396 #520 #736)
#410 := (= -1::Int 0::Int)
#326 := (= 0::Int 0::Int)
#411 := (or #326 #410)
#732 := (if #411 #73 #737)
#568 := (or #574 #732)
#577 := (iff #568 #575)
#579 := (iff #575 #575)
#580 := [rewrite]: #579
#557 := (iff #732 #73)
#1 := true
#671 := (if true #73 #73)
#669 := (iff #671 #73)
#672 := [rewrite]: #669
#573 := (iff #732 #671)
#564 := (iff #737 #73)
#679 := (if false #73 #73)
#562 := (iff #679 #73)
#563 := [rewrite]: #562
#677 := (iff #737 #679)
#676 := (iff #736 #73)
#522 := (= #735 #70)
#694 := (+ #70 0::Int)
#691 := (= #694 #70)
#692 := [rewrite]: #691
#519 := (= #735 #694)
#683 := (= #734 0::Int)
#700 := (= #727 0::Int)
#704 := [rewrite]: #700
#688 := (= #734 #727)
#681 := (= #402 0::Int)
#542 := (div 0::Int 1::Int)
#686 := (= #542 0::Int)
#687 := [rewrite]: #686
#684 := (= #402 #542)
#540 := (= #401 1::Int)
#541 := [rewrite]: #540
#685 := [monotonicity #704 #541]: #684
#682 := [trans #685 #687]: #681
#689 := [monotonicity #682]: #688
#690 := [trans #689 #704]: #683
#521 := [monotonicity #690]: #519
#675 := [trans #521 #692]: #522
#678 := [monotonicity #675]: #676
#693 := (iff #520 #73)
#697 := (= #390 #70)
#695 := (= #390 #694)
#701 := (= #733 0::Int)
#703 := (= #733 #727)
#424 := (= #731 0::Int)
#702 := [rewrite]: #424
#418 := [monotonicity #702]: #703
#705 := [trans #418 #704]: #701
#696 := [monotonicity #705]: #695
#698 := [trans #696 #692]: #697
#699 := [monotonicity #698]: #693
#422 := (iff #396 false)
#706 := (or false false)
#711 := (iff #706 false)
#421 := [rewrite]: #711
#710 := (iff #396 #706)
#431 := (iff #417 false)
#724 := (not true)
#725 := (iff #724 false)
#723 := [rewrite]: #725
#708 := (iff #417 #724)
#438 := (iff #413 true)
#718 := (or true true)
#715 := (iff #718 true)
#721 := [rewrite]: #715
#436 := (iff #413 #718)
#716 := (iff #403 true)
#717 := [rewrite]: #716
#713 := (iff #416 true)
#435 := [rewrite]: #713
#437 := [monotonicity #435 #717]: #436
#332 := [trans #437 #721]: #438
#709 := [monotonicity #332]: #708
#432 := [trans #709 #723]: #431
#726 := (iff #415 false)
#364 := (iff #415 #724)
#359 := (iff #414 true)
#719 := (iff #414 #718)
#379 := (iff #412 true)
#380 := [rewrite]: #379
#720 := [monotonicity #380 #717]: #719
#722 := [trans #720 #721]: #359
#365 := [monotonicity #722]: #364
#712 := [trans #365 #723]: #726
#707 := [monotonicity #712 #432]: #710
#423 := [trans #707 #421]: #422
#680 := [monotonicity #423 #699 #678]: #677
#523 := [trans #680 #563]: #564
#377 := (iff #411 true)
#729 := (or true false)
#373 := (iff #729 true)
#714 := [rewrite]: #373
#389 := (iff #411 #729)
#388 := (iff #410 false)
#393 := [rewrite]: #388
#738 := (iff #326 true)
#728 := [rewrite]: #738
#730 := [monotonicity #728 #393]: #389
#378 := [trans #730 #714]: #377
#668 := [monotonicity #378 #523]: #573
#572 := [trans #668 #672]: #557
#578 := [monotonicity #572]: #577
#673 := [trans #578 #580]: #577
#576 := [quant-inst #8 #67]: #568
#670 := [mp #576 #673]: #575
[unit-resolution #670 #81 #745]: false
unsat
1919ef46c663d3b5ae90ef3cb3a4aa4abba7ea65 297 0
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#739 := (pattern #17)
#18 := 0::Int
#67 := -1::Int
#84 := (* -1::Int #16)
#80 := (* -1::Int #14)
#87 := (div #80 #84)
#238 := (* -1::Int #87)
#239 := (+ #17 #238)
#240 := (= #239 0::Int)
#28 := (div #14 #16)
#235 := (* -1::Int #28)
#236 := (+ #17 #235)
#237 := (= #236 0::Int)
#106 := (<= #16 0::Int)
#113 := (>= #14 0::Int)
#198 := (or #113 #106)
#199 := (not #198)
#102 := (<= #14 0::Int)
#196 := (or #102 #106)
#197 := (not #196)
#202 := (or #197 #199)
#241 := (if #202 #237 #240)
#234 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #14 0::Int)
#21 := (or #19 #20)
#242 := (if #21 #234 #241)
#740 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #739) #242)
#245 := (forall (vars (?v0 Int) (?v1 Int)) #242)
#743 := (iff #245 #740)
#741 := (iff #242 #242)
#742 := [refl]: #741
#744 := [quant-intro #742]: #743
#205 := (if #202 #28 #87)
#208 := (if #21 0::Int #205)
#211 := (= #17 #208)
#214 := (forall (vars (?v0 Int) (?v1 Int)) #211)
#246 := (iff #214 #245)
#243 := (iff #211 #242)
#244 := [rewrite]: #243
#247 := [quant-intro #244]: #246
#107 := (not #106)
#114 := (not #113)
#117 := (and #114 #107)
#103 := (not #102)
#110 := (and #103 #107)
#120 := (or #110 #117)
#123 := (if #120 #28 #87)
#126 := (if #21 0::Int #123)
#129 := (= #17 #126)
#132 := (forall (vars (?v0 Int) (?v1 Int)) #129)
#215 := (iff #132 #214)
#212 := (iff #129 #211)
#209 := (= #126 #208)
#206 := (= #123 #205)
#203 := (iff #120 #202)
#200 := (iff #117 #199)
#201 := [rewrite]: #200
#190 := (iff #110 #197)
#191 := [rewrite]: #190
#204 := [monotonicity #191 #201]: #203
#207 := [monotonicity #204]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [quant-intro #213]: #215
#194 := (~ #132 #132)
#192 := (~ #129 #129)
#193 := [refl]: #192
#195 := [nnf-pos #193]: #194
#30 := (- #16)
#29 := (- #14)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #14 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #14)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#135 := (iff #35 #132)
#90 := (if #27 #28 #87)
#93 := (if #21 0::Int #90)
#96 := (= #17 #93)
#99 := (forall (vars (?v0 Int) (?v1 Int)) #96)
#133 := (iff #99 #132)
#130 := (iff #96 #129)
#127 := (= #93 #126)
#124 := (= #90 #123)
#121 := (iff #27 #120)
#118 := (iff #26 #117)
#108 := (iff #23 #107)
#109 := [rewrite]: #108
#115 := (iff #25 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116 #109]: #118
#111 := (iff #24 #110)
#104 := (iff #22 #103)
#105 := [rewrite]: #104
#112 := [monotonicity #105 #109]: #111
#122 := [monotonicity #112 #119]: #121
#125 := [monotonicity #122]: #124
#128 := [monotonicity #125]: #127
#131 := [monotonicity #128]: #130
#134 := [quant-intro #131]: #133
#100 := (iff #35 #99)
#97 := (iff #34 #96)
#94 := (= #33 #93)
#91 := (= #32 #90)
#88 := (= #31 #87)
#85 := (= #30 #84)
#86 := [rewrite]: #85
#82 := (= #29 #80)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#92 := [monotonicity #89]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#101 := [quant-intro #98]: #100
#136 := [trans #101 #134]: #135
#79 := [asserted]: #35
#137 := [mp #79 #136]: #132
#186 := [mp~ #137 #195]: #132
#217 := [mp #186 #216]: #214
#248 := [mp #217 #247]: #245
#745 := [mp #248 #744]: #740
#8 := 1::Int
#9 := (f4 f5 1::Int)
#70 := (f3 #9 -1::Int)
#73 := (= #70 -1::Int)
#76 := (not #73)
#10 := (- 1::Int)
#11 := (f3 #9 #10)
#12 := (= #11 #10)
#13 := (not #12)
#77 := (iff #13 #76)
#74 := (iff #12 #73)
#68 := (= #10 -1::Int)
#69 := [rewrite]: #68
#71 := (= #11 #70)
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72 #69]: #74
#78 := [monotonicity #75]: #77
#66 := [asserted]: #13
#81 := [mp #66 #78]: #76
#670 := (not #740)
#674 := (or #670 #73)
#402 := (* -1::Int -1::Int)
#401 := (* -1::Int 1::Int)
#734 := (div #401 #402)
#735 := (* -1::Int #734)
#736 := (+ #70 #735)
#737 := (= #736 0::Int)
#733 := (div 1::Int -1::Int)
#390 := (* -1::Int #733)
#520 := (+ #70 #390)
#727 := (= #520 0::Int)
#414 := (<= -1::Int 0::Int)
#413 := (>= 1::Int 0::Int)
#417 := (or #413 #414)
#396 := (not #417)
#403 := (<= 1::Int 0::Int)
#415 := (or #403 #414)
#416 := (not #415)
#731 := (or #416 #396)
#732 := (if #731 #727 #737)
#412 := (= #70 0::Int)
#410 := (= -1::Int 0::Int)
#326 := (= 1::Int 0::Int)
#411 := (or #326 #410)
#738 := (if #411 #412 #732)
#661 := (or #670 #738)
#655 := (iff #661 #674)
#654 := (iff #674 #674)
#664 := [rewrite]: #654
#580 := (iff #738 #73)
#568 := (if false #412 #73)
#578 := (iff #568 #73)
#579 := [rewrite]: #578
#576 := (iff #738 #568)
#574 := (iff #732 #73)
#668 := (if false #73 #73)
#557 := (iff #668 #73)
#572 := [rewrite]: #557
#669 := (iff #732 #668)
#671 := (iff #737 #73)
#692 := (+ 1::Int #70)
#540 := (= #692 0::Int)
#684 := (iff #540 #73)
#685 := [rewrite]: #684
#564 := (iff #737 #540)
#562 := (= #736 #692)
#695 := (+ #70 1::Int)
#697 := (= #695 #692)
#698 := [rewrite]: #697
#677 := (= #736 #695)
#678 := (= #735 1::Int)
#704 := (= #402 1::Int)
#701 := [rewrite]: #704
#675 := (= #735 #402)
#521 := (= #734 -1::Int)
#688 := (div -1::Int 1::Int)
#690 := (= #688 -1::Int)
#519 := [rewrite]: #690
#689 := (= #734 #688)
#681 := (= #401 -1::Int)
#682 := [rewrite]: #681
#683 := [monotonicity #682 #701]: #689
#522 := [trans #683 #519]: #521
#676 := [monotonicity #522]: #675
#679 := [trans #676 #701]: #678
#680 := [monotonicity #679]: #677
#563 := [trans #680 #698]: #562
#523 := [monotonicity #563]: #564
#573 := [trans #523 #685]: #671
#686 := (iff #727 #73)
#541 := (iff #727 #540)
#693 := (= #520 #692)
#696 := (= #520 #695)
#705 := (= #390 1::Int)
#418 := (= #390 #402)
#702 := (= #733 -1::Int)
#703 := [rewrite]: #702
#700 := [monotonicity #703]: #418
#694 := [trans #700 #701]: #705
#691 := [monotonicity #694]: #696
#699 := [trans #691 #698]: #693
#542 := [monotonicity #699]: #541
#687 := [trans #542 #685]: #686
#423 := (iff #731 false)
#389 := (or false false)
#714 := (iff #389 false)
#377 := [rewrite]: #714
#421 := (iff #731 #389)
#707 := (iff #396 false)
#1 := true
#364 := (not true)
#723 := (iff #364 false)
#726 := [rewrite]: #723
#706 := (iff #396 #364)
#431 := (iff #417 true)
#437 := (or true true)
#708 := (iff #437 true)
#709 := [rewrite]: #708
#438 := (iff #417 #437)
#717 := (iff #414 true)
#718 := [rewrite]: #717
#435 := (iff #413 true)
#436 := [rewrite]: #435
#332 := [monotonicity #436 #718]: #438
#432 := [trans #332 #709]: #431
#710 := [monotonicity #432]: #706
#711 := [trans #710 #726]: #707
#712 := (iff #416 false)
#365 := (iff #416 #364)
#722 := (iff #415 true)
#719 := (or false true)
#721 := (iff #719 true)
#359 := [rewrite]: #721
#720 := (iff #415 #719)
#380 := (iff #403 false)
#716 := [rewrite]: #380
#715 := [monotonicity #716 #718]: #720
#724 := [trans #715 #359]: #722
#725 := [monotonicity #724]: #365
#713 := [trans #725 #726]: #712
#422 := [monotonicity #713 #711]: #421
#424 := [trans #422 #377]: #423
#672 := [monotonicity #424 #687 #573]: #669
#575 := [trans #672 #572]: #574
#378 := (iff #411 false)
#730 := (iff #411 #389)
#393 := (iff #410 false)
#729 := [rewrite]: #393
#728 := (iff #326 false)
#388 := [rewrite]: #728
#373 := [monotonicity #388 #729]: #730
#379 := [trans #373 #377]: #378
#577 := [monotonicity #379 #575]: #576
#673 := [trans #577 #579]: #580
#652 := [monotonicity #673]: #655
#665 := [trans #652 #664]: #655
#663 := [quant-inst #8 #67]: #661
#666 := [mp #663 #665]: #674
[unit-resolution #666 #81 #745]: false
unsat
baa666ada000b9422ae7630b704989505cee3646 305 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#743 := (pattern #19)
#20 := 0::Int
#69 := -1::Int
#89 := (* -1::Int #18)
#85 := (* -1::Int #16)
#92 := (div #85 #89)
#243 := (* -1::Int #92)
#244 := (+ #19 #243)
#245 := (= #244 0::Int)
#30 := (div #16 #18)
#240 := (* -1::Int #30)
#241 := (+ #19 #240)
#242 := (= #241 0::Int)
#111 := (<= #18 0::Int)
#118 := (>= #16 0::Int)
#203 := (or #118 #111)
#204 := (not #203)
#107 := (<= #16 0::Int)
#201 := (or #107 #111)
#202 := (not #201)
#207 := (or #202 #204)
#246 := (if #207 #242 #245)
#239 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#247 := (if #23 #239 #246)
#744 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #743) #247)
#250 := (forall (vars (?v0 Int) (?v1 Int)) #247)
#747 := (iff #250 #744)
#745 := (iff #247 #247)
#746 := [refl]: #745
#748 := [quant-intro #746]: #747
#210 := (if #207 #30 #92)
#213 := (if #23 0::Int #210)
#216 := (= #19 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#251 := (iff #219 #250)
#248 := (iff #216 #247)
#249 := [rewrite]: #248
#252 := [quant-intro #249]: #251
#112 := (not #111)
#119 := (not #118)
#122 := (and #119 #112)
#108 := (not #107)
#115 := (and #108 #112)
#125 := (or #115 #122)
#128 := (if #125 #30 #92)
#131 := (if #23 0::Int #128)
#134 := (= #19 #131)
#137 := (forall (vars (?v0 Int) (?v1 Int)) #134)
#220 := (iff #137 #219)
#217 := (iff #134 #216)
#214 := (= #131 #213)
#211 := (= #128 #210)
#208 := (iff #125 #207)
#205 := (iff #122 #204)
#206 := [rewrite]: #205
#195 := (iff #115 #202)
#196 := [rewrite]: #195
#209 := [monotonicity #196 #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#199 := (~ #137 #137)
#197 := (~ #134 #134)
#198 := [refl]: #197
#200 := [nnf-pos #198]: #199
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#140 := (iff #37 #137)
#95 := (if #29 #30 #92)
#98 := (if #23 0::Int #95)
#101 := (= #19 #98)
#104 := (forall (vars (?v0 Int) (?v1 Int)) #101)
#138 := (iff #104 #137)
#135 := (iff #101 #134)
#132 := (= #98 #131)
#129 := (= #95 #128)
#126 := (iff #29 #125)
#123 := (iff #28 #122)
#113 := (iff #25 #112)
#114 := [rewrite]: #113
#120 := (iff #27 #119)
#121 := [rewrite]: #120
#124 := [monotonicity #121 #114]: #123
#116 := (iff #26 #115)
#109 := (iff #24 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#127 := [monotonicity #117 #124]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#136 := [monotonicity #133]: #135
#139 := [quant-intro #136]: #138
#105 := (iff #37 #104)
#102 := (iff #36 #101)
#99 := (= #35 #98)
#96 := (= #34 #95)
#93 := (= #33 #92)
#90 := (= #32 #89)
#91 := [rewrite]: #90
#87 := (= #31 #85)
#88 := [rewrite]: #87
#94 := [monotonicity #88 #91]: #93
#97 := [monotonicity #94]: #96
#100 := [monotonicity #97]: #99
#103 := [monotonicity #100]: #102
#106 := [quant-intro #103]: #105
#141 := [trans #106 #139]: #140
#84 := [asserted]: #37
#142 := [mp #84 #141]: #137
#191 := [mp~ #142 #200]: #137
#222 := [mp #191 #221]: #219
#253 := [mp #222 #252]: #250
#749 := [mp #253 #748]: #744
#75 := -3::Int
#8 := 3::Int
#9 := (f4 f5 3::Int)
#72 := (f3 #9 -1::Int)
#78 := (= #72 -3::Int)
#81 := (not #78)
#13 := (- 3::Int)
#10 := 1::Int
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#14 := (= #12 #13)
#15 := (not #14)
#82 := (iff #15 #81)
#79 := (iff #14 #78)
#76 := (= #13 -3::Int)
#77 := [rewrite]: #76
#73 := (= #12 #72)
#70 := (= #11 -1::Int)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#83 := [monotonicity #80]: #82
#68 := [asserted]: #15
#86 := [mp #68 #83]: #81
#667 := (not #744)
#659 := (or #667 #78)
#406 := (* -1::Int -1::Int)
#405 := (* -1::Int 3::Int)
#738 := (div #405 #406)
#739 := (* -1::Int #738)
#740 := (+ #72 #739)
#741 := (= #740 0::Int)
#737 := (div 3::Int -1::Int)
#394 := (* -1::Int #737)
#524 := (+ #72 #394)
#731 := (= #524 0::Int)
#418 := (<= -1::Int 0::Int)
#417 := (>= 3::Int 0::Int)
#421 := (or #417 #418)
#400 := (not #421)
#407 := (<= 3::Int 0::Int)
#419 := (or #407 #418)
#420 := (not #419)
#735 := (or #420 #400)
#736 := (if #735 #731 #741)
#416 := (= #72 0::Int)
#414 := (= -1::Int 0::Int)
#330 := (= 3::Int 0::Int)
#415 := (or #330 #414)
#742 := (if #415 #416 #736)
#656 := (or #667 #742)
#668 := (iff #656 #659)
#670 := (iff #659 #659)
#666 := [rewrite]: #670
#678 := (iff #742 #78)
#582 := (if false #416 #78)
#677 := (iff #582 #78)
#674 := [rewrite]: #677
#583 := (iff #742 #582)
#580 := (iff #736 #78)
#561 := (if false #78 #78)
#579 := (iff #561 #78)
#572 := [rewrite]: #579
#576 := (iff #736 #561)
#673 := (iff #741 #78)
#701 := (+ 3::Int #72)
#545 := (= #701 0::Int)
#689 := (iff #545 #78)
#690 := [rewrite]: #689
#577 := (iff #741 #545)
#527 := (= #740 #701)
#700 := (+ #72 3::Int)
#702 := (= #700 #701)
#697 := [rewrite]: #702
#567 := (= #740 #700)
#684 := (= #739 3::Int)
#422 := (* -1::Int -3::Int)
#705 := (= #422 3::Int)
#709 := [rewrite]: #705
#683 := (= #739 #422)
#680 := (= #738 -3::Int)
#694 := (div -3::Int 1::Int)
#526 := (= #694 -3::Int)
#679 := [rewrite]: #526
#523 := (= #738 #694)
#693 := (= #406 1::Int)
#687 := [rewrite]: #693
#686 := (= #405 -3::Int)
#692 := [rewrite]: #686
#525 := [monotonicity #692 #687]: #523
#682 := [trans #525 #679]: #680
#681 := [monotonicity #682]: #683
#566 := [trans #681 #709]: #684
#568 := [monotonicity #566]: #567
#675 := [trans #568 #697]: #527
#672 := [monotonicity #675]: #577
#676 := [trans #672 #690]: #673
#691 := (iff #731 #78)
#546 := (iff #731 #545)
#703 := (= #524 #701)
#695 := (= #524 #700)
#698 := (= #394 3::Int)
#704 := (= #394 #422)
#706 := (= #737 -3::Int)
#707 := [rewrite]: #706
#708 := [monotonicity #707]: #704
#699 := [trans #708 #709]: #698
#696 := [monotonicity #699]: #695
#544 := [trans #696 #697]: #703
#688 := [monotonicity #544]: #546
#685 := [trans #688 #690]: #691
#427 := (iff #735 false)
#393 := (or false false)
#718 := (iff #393 false)
#381 := [rewrite]: #718
#425 := (iff #735 #393)
#711 := (iff #400 false)
#1 := true
#368 := (not true)
#727 := (iff #368 false)
#730 := [rewrite]: #727
#710 := (iff #400 #368)
#435 := (iff #421 true)
#441 := (or true true)
#712 := (iff #441 true)
#713 := [rewrite]: #712
#442 := (iff #421 #441)
#721 := (iff #418 true)
#722 := [rewrite]: #721
#439 := (iff #417 true)
#440 := [rewrite]: #439
#336 := [monotonicity #440 #722]: #442
#436 := [trans #336 #713]: #435
#714 := [monotonicity #436]: #710
#715 := [trans #714 #730]: #711
#716 := (iff #420 false)
#369 := (iff #420 #368)
#726 := (iff #419 true)
#723 := (or false true)
#725 := (iff #723 true)
#363 := [rewrite]: #725
#724 := (iff #419 #723)
#384 := (iff #407 false)
#720 := [rewrite]: #384
#719 := [monotonicity #720 #722]: #724
#728 := [trans #719 #363]: #726
#729 := [monotonicity #728]: #369
#717 := [trans #729 #730]: #716
#426 := [monotonicity #717 #715]: #425
#428 := [trans #426 #381]: #427
#578 := [monotonicity #428 #685 #676]: #576
#581 := [trans #578 #572]: #580
#382 := (iff #415 false)
#734 := (iff #415 #393)
#397 := (iff #414 false)
#733 := [rewrite]: #397
#732 := (iff #330 false)
#392 := [rewrite]: #732
#377 := [monotonicity #392 #733]: #734
#383 := [trans #377 #381]: #382
#584 := [monotonicity #383 #581]: #583
#665 := [trans #584 #674]: #678
#669 := [monotonicity #665]: #668
#671 := [trans #669 #666]: #668
#658 := [quant-inst #8 #69]: #656
#660 := [mp #658 #671]: #659
[unit-resolution #660 #86 #749]: false
unsat
b30615473f23884eeaa7af098b5437e95d4b87b1 349 0
#2 := false
#20 := 0::Int
#10 := 1::Int
decl f6 :: Int
#8 := f6
#69 := -1::Int
#75 := (* -1::Int f6)
#716 := (div #75 1::Int)
#714 := (* -1::Int #716)
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#9 := (f4 f5 f6)
#72 := (f3 #9 -1::Int)
#719 := (+ #72 #714)
#693 := (<= #719 0::Int)
#710 := (= #719 0::Int)
#425 := (= f6 0::Int)
#576 := (not #425)
#429 := (<= f6 0::Int)
#617 := [hypothesis]: #425
#597 := (or #576 #429)
#543 := [th-lemma arith triangle-eq]: #597
#598 := [unit-resolution #543 #617]: #429
#84 := (+ f6 #72)
#340 := (<= #84 0::Int)
#579 := (not #340)
#424 := (>= #84 0::Int)
#410 := (>= f6 0::Int)
#686 := (not #710)
#691 := (>= #719 0::Int)
#623 := (not #691)
#632 := (not #424)
#633 := [hypothesis]: #632
#624 := (or #623 #424)
#631 := [hypothesis]: #691
#667 := (+ f6 #716)
#664 := (>= #667 0::Int)
#674 := (= #667 0::Int)
#1 := true
#66 := [true-axiom]: true
#634 := (or false #674)
#635 := [th-lemma arith]: #634
#630 := [unit-resolution #635 #66]: #674
#636 := (not #674)
#622 := (or #636 #664)
#618 := [th-lemma arith triangle-eq]: #622
#619 := [unit-resolution #618 #630]: #664
#620 := [th-lemma arith farkas 1 -1 1 #619 #633 #631]: false
#625 := [lemma #620]: #624
#663 := [unit-resolution #625 #633]: #623
#626 := (or #686 #691)
#621 := [th-lemma arith triangle-eq]: #626
#627 := [unit-resolution #621 #663]: #686
#601 := (or #425 #710)
#428 := (= #72 0::Int)
#698 := (if #425 #428 #710)
#18 := (:var 0 Int)
#16 := (:var 1 Int)
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#753 := (pattern #19)
#98 := (* -1::Int #18)
#95 := (* -1::Int #16)
#101 := (div #95 #98)
#252 := (* -1::Int #101)
#253 := (+ #19 #252)
#254 := (= #253 0::Int)
#30 := (div #16 #18)
#249 := (* -1::Int #30)
#250 := (+ #19 #249)
#251 := (= #250 0::Int)
#120 := (<= #18 0::Int)
#127 := (>= #16 0::Int)
#212 := (or #127 #120)
#213 := (not #212)
#116 := (<= #16 0::Int)
#210 := (or #116 #120)
#211 := (not #210)
#216 := (or #211 #213)
#255 := (if #216 #251 #254)
#248 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#256 := (if #23 #248 #255)
#754 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #753) #256)
#259 := (forall (vars (?v0 Int) (?v1 Int)) #256)
#757 := (iff #259 #754)
#755 := (iff #256 #256)
#756 := [refl]: #755
#758 := [quant-intro #756]: #757
#219 := (if #216 #30 #101)
#222 := (if #23 0::Int #219)
#225 := (= #19 #222)
#228 := (forall (vars (?v0 Int) (?v1 Int)) #225)
#260 := (iff #228 #259)
#257 := (iff #225 #256)
#258 := [rewrite]: #257
#261 := [quant-intro #258]: #260
#121 := (not #120)
#128 := (not #127)
#131 := (and #128 #121)
#117 := (not #116)
#124 := (and #117 #121)
#134 := (or #124 #131)
#137 := (if #134 #30 #101)
#140 := (if #23 0::Int #137)
#143 := (= #19 #140)
#146 := (forall (vars (?v0 Int) (?v1 Int)) #143)
#229 := (iff #146 #228)
#226 := (iff #143 #225)
#223 := (= #140 #222)
#220 := (= #137 #219)
#217 := (iff #134 #216)
#214 := (iff #131 #213)
#215 := [rewrite]: #214
#204 := (iff #124 #211)
#205 := [rewrite]: #204
#218 := [monotonicity #205 #215]: #217
#221 := [monotonicity #218]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [quant-intro #227]: #229
#208 := (~ #146 #146)
#206 := (~ #143 #143)
#207 := [refl]: #206
#209 := [nnf-pos #207]: #208
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#149 := (iff #37 #146)
#104 := (if #29 #30 #101)
#107 := (if #23 0::Int #104)
#110 := (= #19 #107)
#113 := (forall (vars (?v0 Int) (?v1 Int)) #110)
#147 := (iff #113 #146)
#144 := (iff #110 #143)
#141 := (= #107 #140)
#138 := (= #104 #137)
#135 := (iff #29 #134)
#132 := (iff #28 #131)
#122 := (iff #25 #121)
#123 := [rewrite]: #122
#129 := (iff #27 #128)
#130 := [rewrite]: #129
#133 := [monotonicity #130 #123]: #132
#125 := (iff #26 #124)
#118 := (iff #24 #117)
#119 := [rewrite]: #118
#126 := [monotonicity #119 #123]: #125
#136 := [monotonicity #126 #133]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [quant-intro #145]: #147
#114 := (iff #37 #113)
#111 := (iff #36 #110)
#108 := (= #35 #107)
#105 := (= #34 #104)
#102 := (= #33 #101)
#99 := (= #32 #98)
#100 := [rewrite]: #99
#96 := (= #31 #95)
#97 := [rewrite]: #96
#103 := [monotonicity #97 #100]: #102
#106 := [monotonicity #103]: #105
#109 := [monotonicity #106]: #108
#112 := [monotonicity #109]: #111
#115 := [quant-intro #112]: #114
#150 := [trans #115 #148]: #149
#94 := [asserted]: #37
#151 := [mp #94 #150]: #146
#200 := [mp~ #151 #209]: #146
#231 := [mp #200 #230]: #228
#262 := [mp #231 #261]: #259
#759 := [mp #262 #758]: #754
#701 := (not #754)
#695 := (or #701 #698)
#748 := (* -1::Int -1::Int)
#749 := (div #75 #748)
#750 := (* -1::Int #749)
#751 := (+ #72 #750)
#746 := (= #751 0::Int)
#534 := (div f6 -1::Int)
#741 := (* -1::Int #534)
#415 := (+ #72 #741)
#416 := (= #415 0::Int)
#430 := (<= -1::Int 0::Int)
#745 := (or #410 #430)
#747 := (not #745)
#427 := (or #429 #430)
#431 := (not #427)
#404 := (or #431 #747)
#752 := (if #404 #416 #746)
#426 := (= -1::Int 0::Int)
#417 := (or #425 #426)
#742 := (if #417 #428 #752)
#696 := (or #701 #742)
#703 := (iff #696 #695)
#704 := (iff #695 #695)
#533 := [rewrite]: #704
#699 := (iff #742 #698)
#555 := (iff #752 #710)
#711 := (if false #416 #710)
#713 := (iff #711 #710)
#554 := [rewrite]: #713
#712 := (iff #752 #711)
#705 := (iff #746 #710)
#708 := (= #751 #719)
#718 := (= #750 #714)
#717 := (= #749 #716)
#437 := (= #748 1::Int)
#438 := [rewrite]: #437
#432 := [monotonicity #438]: #717
#715 := [monotonicity #432]: #718
#709 := [monotonicity #715]: #708
#706 := [monotonicity #709]: #705
#435 := (iff #404 false)
#446 := (or false false)
#721 := (iff #446 false)
#725 := [rewrite]: #721
#720 := (iff #404 #446)
#723 := (iff #747 false)
#373 := (not true)
#378 := (iff #373 false)
#379 := [rewrite]: #378
#346 := (iff #747 #373)
#451 := (iff #745 true)
#740 := (or #410 true)
#449 := (iff #740 true)
#450 := [rewrite]: #449
#726 := (iff #745 #740)
#393 := (iff #430 true)
#394 := [rewrite]: #393
#727 := [monotonicity #394]: #726
#452 := [trans #727 #450]: #451
#722 := [monotonicity #452]: #346
#445 := [trans #722 #379]: #723
#739 := (iff #431 false)
#736 := (iff #431 #373)
#729 := (iff #427 true)
#730 := (or #429 true)
#733 := (iff #730 true)
#734 := [rewrite]: #733
#731 := (iff #427 #730)
#732 := [monotonicity #394]: #731
#735 := [trans #732 #734]: #729
#738 := [monotonicity #735]: #736
#737 := [trans #738 #379]: #739
#724 := [monotonicity #737 #445]: #720
#436 := [trans #724 #725]: #435
#707 := [monotonicity #436 #706]: #712
#556 := [trans #707 #554]: #555
#391 := (iff #417 #425)
#743 := (or #425 false)
#387 := (iff #743 #425)
#728 := [rewrite]: #387
#403 := (iff #417 #743)
#402 := (iff #426 false)
#407 := [rewrite]: #402
#744 := [monotonicity #407]: #403
#392 := [trans #744 #728]: #391
#700 := [monotonicity #392 #556]: #699
#697 := [monotonicity #700]: #703
#535 := [trans #697 #533]: #703
#702 := [quant-inst #8 #69]: #696
#536 := [mp #702 #535]: #695
#600 := [unit-resolution #536 #759]: #698
#694 := (not #698)
#537 := (or #694 #425 #710)
#685 := [def-axiom]: #537
#602 := [unit-resolution #685 #600]: #601
#495 := [unit-resolution #602 #627]: #425
#606 := (or #576 #410)
#607 := [th-lemma arith triangle-eq]: #606
#608 := [unit-resolution #607 #495]: #410
#690 := (>= #72 0::Int)
#613 := (or #576 #428)
#577 := (or #694 #576 #428)
#578 := [def-axiom]: #577
#609 := [unit-resolution #578 #600]: #613
#610 := [unit-resolution #609 #495]: #428
#587 := (not #428)
#611 := (or #587 #690)
#614 := [th-lemma arith triangle-eq]: #611
#615 := [unit-resolution #614 #610]: #690
#616 := [th-lemma arith farkas 1 -1 1 #615 #633 #608]: false
#612 := [lemma #616]: #424
#599 := (or #579 #632)
#85 := (= #84 0::Int)
#88 := (not #85)
#13 := (- f6)
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#14 := (= #12 #13)
#15 := (not #14)
#91 := (iff #15 #88)
#78 := (= #72 #75)
#81 := (not #78)
#89 := (iff #81 #88)
#86 := (iff #78 #85)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#82 := (iff #15 #81)
#79 := (iff #14 #78)
#76 := (= #13 #75)
#77 := [rewrite]: #76
#73 := (= #12 #72)
#70 := (= #11 -1::Int)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#83 := [monotonicity #80]: #82
#92 := [trans #83 #90]: #91
#68 := [asserted]: #15
#93 := [mp #68 #92]: #88
#603 := (or #85 #579 #632)
#604 := [th-lemma arith triangle-eq]: #603
#605 := [unit-resolution #604 #93]: #599
#573 := [unit-resolution #605 #612]: #579
#689 := (<= #72 0::Int)
#580 := [unit-resolution #609 #617]: #428
#539 := (or #587 #689)
#570 := [th-lemma arith triangle-eq]: #539
#572 := [unit-resolution #570 #580]: #689
#574 := [th-lemma arith farkas 1 -1 1 #572 #573 #598]: false
#581 := [lemma #574]: #576
#584 := [unit-resolution #602 #581]: #710
#585 := (or #686 #693)
#595 := [th-lemma arith triangle-eq]: #585
#575 := [unit-resolution #595 #584]: #693
#583 := (<= #667 0::Int)
#596 := (or #636 #583)
#551 := [th-lemma arith triangle-eq]: #596
#552 := [unit-resolution #551 #630]: #583
[th-lemma arith farkas 1 -1 1 #552 #573 #575]: false
unsat
f75a5bc3547a7074f0c9531c7810228e69e7b130 273 0
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#726 := (pattern #17)
#8 := 0::Int
#67 := -1::Int
#71 := (* -1::Int #16)
#68 := (* -1::Int #14)
#74 := (div #68 #71)
#225 := (* -1::Int #74)
#226 := (+ #17 #225)
#227 := (= #226 0::Int)
#27 := (div #14 #16)
#222 := (* -1::Int #27)
#223 := (+ #17 #222)
#224 := (= #223 0::Int)
#93 := (<= #16 0::Int)
#100 := (>= #14 0::Int)
#185 := (or #100 #93)
#186 := (not #185)
#89 := (<= #14 0::Int)
#183 := (or #89 #93)
#184 := (not #183)
#189 := (or #184 #186)
#228 := (if #189 #224 #227)
#221 := (= #17 0::Int)
#19 := (= #16 0::Int)
#18 := (= #14 0::Int)
#20 := (or #18 #19)
#229 := (if #20 #221 #228)
#727 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #726) #229)
#232 := (forall (vars (?v0 Int) (?v1 Int)) #229)
#730 := (iff #232 #727)
#728 := (iff #229 #229)
#729 := [refl]: #728
#731 := [quant-intro #729]: #730
#192 := (if #189 #27 #74)
#195 := (if #20 0::Int #192)
#198 := (= #17 #195)
#201 := (forall (vars (?v0 Int) (?v1 Int)) #198)
#233 := (iff #201 #232)
#230 := (iff #198 #229)
#231 := [rewrite]: #230
#234 := [quant-intro #231]: #233
#94 := (not #93)
#101 := (not #100)
#104 := (and #101 #94)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#110 := (if #107 #27 #74)
#113 := (if #20 0::Int #110)
#116 := (= #17 #113)
#119 := (forall (vars (?v0 Int) (?v1 Int)) #116)
#202 := (iff #119 #201)
#199 := (iff #116 #198)
#196 := (= #113 #195)
#193 := (= #110 #192)
#190 := (iff #107 #189)
#187 := (iff #104 #186)
#188 := [rewrite]: #187
#177 := (iff #97 #184)
#178 := [rewrite]: #177
#191 := [monotonicity #178 #188]: #190
#194 := [monotonicity #191]: #193
#197 := [monotonicity #194]: #196
#200 := [monotonicity #197]: #199
#203 := [quant-intro #200]: #202
#181 := (~ #119 #119)
#179 := (~ #116 #116)
#180 := [refl]: #179
#182 := [nnf-pos #180]: #181
#29 := (- #16)
#28 := (- #14)
#30 := (div #28 #29)
#22 := (< 0::Int #16)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (if #26 #27 #30)
#32 := (if #20 0::Int #31)
#33 := (= #17 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#122 := (iff #34 #119)
#77 := (if #26 #27 #74)
#80 := (if #20 0::Int #77)
#83 := (= #17 #80)
#86 := (forall (vars (?v0 Int) (?v1 Int)) #83)
#120 := (iff #86 #119)
#117 := (iff #83 #116)
#114 := (= #80 #113)
#111 := (= #77 #110)
#108 := (iff #26 #107)
#105 := (iff #25 #104)
#95 := (iff #22 #94)
#96 := [rewrite]: #95
#102 := (iff #24 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103 #96]: #105
#98 := (iff #23 #97)
#91 := (iff #21 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [monotonicity #115]: #117
#121 := [quant-intro #118]: #120
#87 := (iff #34 #86)
#84 := (iff #33 #83)
#81 := (= #32 #80)
#78 := (= #31 #77)
#75 := (= #30 #74)
#72 := (= #29 #71)
#73 := [rewrite]: #72
#69 := (= #28 #68)
#70 := [rewrite]: #69
#76 := [monotonicity #70 #73]: #75
#79 := [monotonicity #76]: #78
#82 := [monotonicity #79]: #81
#85 := [monotonicity #82]: #84
#88 := [quant-intro #85]: #87
#123 := [trans #88 #121]: #122
#66 := [asserted]: #34
#124 := [mp #66 #123]: #119
#173 := [mp~ #124 #182]: #119
#204 := [mp #173 #203]: #201
#235 := [mp #204 #234]: #232
#732 := [mp #235 #731]: #727
#10 := 3::Int
#9 := (f4 f5 0::Int)
#11 := (f3 #9 3::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#65 := [asserted]: #13
#544 := (not #727)
#559 := (or #544 #12)
#388 := (* -1::Int 3::Int)
#714 := (* -1::Int 0::Int)
#389 := (div #714 #388)
#721 := (* -1::Int #389)
#722 := (+ #11 #721)
#723 := (= #722 0::Int)
#718 := (div 0::Int 3::Int)
#720 := (* -1::Int #718)
#377 := (+ #11 #720)
#507 := (= #377 0::Int)
#390 := (<= 3::Int 0::Int)
#403 := (>= 0::Int 0::Int)
#400 := (or #403 #390)
#404 := (not #400)
#399 := (<= 0::Int 0::Int)
#401 := (or #399 #390)
#402 := (not #401)
#383 := (or #402 #404)
#724 := (if #383 #507 #723)
#397 := (= 3::Int 0::Int)
#313 := (= 0::Int 0::Int)
#398 := (or #313 #397)
#719 := (if #398 #12 #724)
#561 := (or #544 #719)
#555 := (iff #561 #559)
#564 := (iff #559 #559)
#565 := [rewrite]: #564
#656 := (iff #719 #12)
#1 := true
#551 := (if true #12 #12)
#560 := (iff #551 #12)
#655 := [rewrite]: #560
#510 := (iff #719 #551)
#549 := (iff #724 #12)
#663 := (if false #12 #12)
#664 := (iff #663 #12)
#667 := [rewrite]: #664
#665 := (iff #724 #663)
#509 := (iff #723 #12)
#506 := (= #722 #11)
#691 := (+ #11 0::Int)
#681 := (= #691 #11)
#682 := [rewrite]: #681
#670 := (= #722 #691)
#675 := (= #721 0::Int)
#689 := (= #714 0::Int)
#690 := [rewrite]: #689
#668 := (= #721 #714)
#673 := (= #389 0::Int)
#685 := -3::Int
#527 := (div 0::Int -3::Int)
#671 := (= #527 0::Int)
#672 := [rewrite]: #671
#528 := (= #389 #527)
#680 := (= #388 -3::Int)
#686 := [rewrite]: #680
#529 := [monotonicity #690 #686]: #528
#674 := [trans #529 #672]: #673
#669 := [monotonicity #674]: #668
#676 := [trans #669 #690]: #675
#677 := [monotonicity #676]: #670
#508 := [trans #677 #682]: #506
#662 := [monotonicity #508]: #509
#679 := (iff #507 #12)
#683 := (= #377 #11)
#688 := (= #377 #691)
#405 := (= #720 0::Int)
#410 := (= #720 #714)
#408 := (= #718 0::Int)
#409 := [rewrite]: #408
#411 := [monotonicity #409]: #410
#687 := [trans #411 #690]: #405
#692 := [monotonicity #687]: #688
#678 := [trans #692 #682]: #683
#684 := [monotonicity #678]: #679
#694 := (iff #383 false)
#696 := (or false false)
#693 := (iff #696 false)
#697 := [rewrite]: #693
#418 := (iff #383 #696)
#319 := (iff #404 false)
#708 := (not true)
#711 := (iff #708 false)
#351 := [rewrite]: #711
#424 := (iff #404 #708)
#422 := (iff #400 true)
#716 := (or true false)
#360 := (iff #716 true)
#701 := [rewrite]: #360
#699 := (iff #400 #716)
#703 := (iff #390 false)
#704 := [rewrite]: #703
#710 := (iff #403 true)
#713 := [rewrite]: #710
#700 := [monotonicity #713 #704]: #699
#423 := [trans #700 #701]: #422
#425 := [monotonicity #423]: #424
#695 := [trans #425 #351]: #319
#352 := (iff #402 false)
#346 := (iff #402 #708)
#707 := (iff #401 true)
#705 := (iff #401 #716)
#366 := (iff #399 true)
#367 := [rewrite]: #366
#706 := [monotonicity #367 #704]: #705
#702 := [trans #706 #701]: #707
#709 := [monotonicity #702]: #346
#712 := [trans #709 #351]: #352
#419 := [monotonicity #712 #695]: #418
#698 := [trans #419 #697]: #694
#666 := [monotonicity #698 #684 #662]: #665
#550 := [trans #666 #667]: #549
#364 := (iff #398 true)
#376 := (iff #398 #716)
#375 := (iff #397 false)
#380 := [rewrite]: #375
#725 := (iff #313 true)
#715 := [rewrite]: #725
#717 := [monotonicity #715 #380]: #376
#365 := [trans #717 #701]: #364
#658 := [monotonicity #365 #550]: #510
#659 := [trans #658 #655]: #656
#563 := [monotonicity #659]: #555
#566 := [trans #563 #565]: #555
#562 := [quant-inst #8 #10]: #561
#567 := [mp #562 #566]: #559
[unit-resolution #567 #65 #732]: false
unsat
3a037a6da2a34725e2878597eed3b279d726e286 289 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#740 := (pattern #18)
#8 := 0::Int
#80 := -1::Int
#85 := (* -1::Int #17)
#82 := (* -1::Int #15)
#88 := (div #82 #85)
#239 := (* -1::Int #88)
#240 := (+ #18 #239)
#241 := (= #240 0::Int)
#28 := (div #15 #17)
#236 := (* -1::Int #28)
#237 := (+ #18 #236)
#238 := (= #237 0::Int)
#107 := (<= #17 0::Int)
#114 := (>= #15 0::Int)
#199 := (or #114 #107)
#200 := (not #199)
#103 := (<= #15 0::Int)
#197 := (or #103 #107)
#198 := (not #197)
#203 := (or #198 #200)
#242 := (if #203 #238 #241)
#235 := (= #18 0::Int)
#20 := (= #17 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#243 := (if #21 #235 #242)
#741 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #740) #243)
#246 := (forall (vars (?v0 Int) (?v1 Int)) #243)
#744 := (iff #246 #741)
#742 := (iff #243 #243)
#743 := [refl]: #742
#745 := [quant-intro #743]: #744
#206 := (if #203 #28 #88)
#209 := (if #21 0::Int #206)
#212 := (= #18 #209)
#215 := (forall (vars (?v0 Int) (?v1 Int)) #212)
#247 := (iff #215 #246)
#244 := (iff #212 #243)
#245 := [rewrite]: #244
#248 := [quant-intro #245]: #247
#108 := (not #107)
#115 := (not #114)
#118 := (and #115 #108)
#104 := (not #103)
#111 := (and #104 #108)
#121 := (or #111 #118)
#124 := (if #121 #28 #88)
#127 := (if #21 0::Int #124)
#130 := (= #18 #127)
#133 := (forall (vars (?v0 Int) (?v1 Int)) #130)
#216 := (iff #133 #215)
#213 := (iff #130 #212)
#210 := (= #127 #209)
#207 := (= #124 #206)
#204 := (iff #121 #203)
#201 := (iff #118 #200)
#202 := [rewrite]: #201
#191 := (iff #111 #198)
#192 := [rewrite]: #191
#205 := [monotonicity #192 #202]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [quant-intro #214]: #216
#195 := (~ #133 #133)
#193 := (~ #130 #130)
#194 := [refl]: #193
#196 := [nnf-pos #194]: #195
#30 := (- #17)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #18 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#136 := (iff #35 #133)
#91 := (if #27 #28 #88)
#94 := (if #21 0::Int #91)
#97 := (= #18 #94)
#100 := (forall (vars (?v0 Int) (?v1 Int)) #97)
#134 := (iff #100 #133)
#131 := (iff #97 #130)
#128 := (= #94 #127)
#125 := (= #91 #124)
#122 := (iff #27 #121)
#119 := (iff #26 #118)
#109 := (iff #23 #108)
#110 := [rewrite]: #109
#116 := (iff #25 #115)
#117 := [rewrite]: #116
#120 := [monotonicity #117 #110]: #119
#112 := (iff #24 #111)
#105 := (iff #22 #104)
#106 := [rewrite]: #105
#113 := [monotonicity #106 #110]: #112
#123 := [monotonicity #113 #120]: #122
#126 := [monotonicity #123]: #125
#129 := [monotonicity #126]: #128
#132 := [monotonicity #129]: #131
#135 := [quant-intro #132]: #134
#101 := (iff #35 #100)
#98 := (iff #34 #97)
#95 := (= #33 #94)
#92 := (= #32 #91)
#89 := (= #31 #88)
#86 := (= #30 #85)
#87 := [rewrite]: #86
#83 := (= #29 #82)
#84 := [rewrite]: #83
#90 := [monotonicity #84 #87]: #89
#93 := [monotonicity #90]: #92
#96 := [monotonicity #93]: #95
#99 := [monotonicity #96]: #98
#102 := [quant-intro #99]: #101
#137 := [trans #102 #135]: #136
#79 := [asserted]: #35
#138 := [mp #79 #137]: #133
#187 := [mp~ #138 #196]: #133
#218 := [mp #187 #217]: #215
#249 := [mp #218 #248]: #246
#746 := [mp #249 #745]: #741
#67 := -3::Int
#9 := (f4 f5 0::Int)
#70 := (f3 #9 -3::Int)
#73 := (= #70 0::Int)
#76 := (not #73)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#13 := (= #12 0::Int)
#14 := (not #13)
#77 := (iff #14 #76)
#74 := (iff #13 #73)
#71 := (= #12 #70)
#68 := (= #11 -3::Int)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#66 := [asserted]: #14
#81 := [mp #66 #78]: #76
#575 := (not #741)
#576 := (or #575 #73)
#402 := (* -1::Int -3::Int)
#728 := (* -1::Int 0::Int)
#403 := (div #728 #402)
#735 := (* -1::Int #403)
#736 := (+ #70 #735)
#737 := (= #736 0::Int)
#732 := (div 0::Int -3::Int)
#734 := (* -1::Int #732)
#391 := (+ #70 #734)
#521 := (= #391 0::Int)
#404 := (<= -3::Int 0::Int)
#417 := (>= 0::Int 0::Int)
#414 := (or #417 #404)
#418 := (not #414)
#413 := (<= 0::Int 0::Int)
#415 := (or #413 #404)
#416 := (not #415)
#397 := (or #416 #418)
#738 := (if #397 #521 #737)
#411 := (= -3::Int 0::Int)
#327 := (= 0::Int 0::Int)
#412 := (or #327 #411)
#733 := (if #412 #73 #738)
#569 := (or #575 #733)
#578 := (iff #569 #576)
#580 := (iff #576 #576)
#581 := [rewrite]: #580
#558 := (iff #733 #73)
#1 := true
#672 := (if true #73 #73)
#670 := (iff #672 #73)
#673 := [rewrite]: #670
#574 := (iff #733 #672)
#565 := (iff #738 #73)
#680 := (if false #73 #73)
#563 := (iff #680 #73)
#564 := [rewrite]: #563
#678 := (iff #738 #680)
#677 := (iff #737 #73)
#523 := (= #736 #70)
#695 := (+ #70 0::Int)
#692 := (= #695 #70)
#693 := [rewrite]: #692
#520 := (= #736 #695)
#684 := (= #735 0::Int)
#701 := (= #728 0::Int)
#705 := [rewrite]: #701
#689 := (= #735 #728)
#682 := (= #403 0::Int)
#543 := (div 0::Int 3::Int)
#687 := (= #543 0::Int)
#688 := [rewrite]: #687
#685 := (= #403 #543)
#541 := (= #402 3::Int)
#542 := [rewrite]: #541
#686 := [monotonicity #705 #542]: #685
#683 := [trans #686 #688]: #682
#690 := [monotonicity #683]: #689
#691 := [trans #690 #705]: #684
#522 := [monotonicity #691]: #520
#676 := [trans #522 #693]: #523
#679 := [monotonicity #676]: #677
#694 := (iff #521 #73)
#698 := (= #391 #70)
#696 := (= #391 #695)
#702 := (= #734 0::Int)
#704 := (= #734 #728)
#425 := (= #732 0::Int)
#703 := [rewrite]: #425
#419 := [monotonicity #703]: #704
#706 := [trans #419 #705]: #702
#697 := [monotonicity #706]: #696
#699 := [trans #697 #693]: #698
#700 := [monotonicity #699]: #694
#423 := (iff #397 false)
#707 := (or false false)
#712 := (iff #707 false)
#422 := [rewrite]: #712
#711 := (iff #397 #707)
#432 := (iff #418 false)
#725 := (not true)
#726 := (iff #725 false)
#724 := [rewrite]: #726
#709 := (iff #418 #725)
#439 := (iff #414 true)
#719 := (or true true)
#716 := (iff #719 true)
#722 := [rewrite]: #716
#437 := (iff #414 #719)
#717 := (iff #404 true)
#718 := [rewrite]: #717
#714 := (iff #417 true)
#436 := [rewrite]: #714
#438 := [monotonicity #436 #718]: #437
#333 := [trans #438 #722]: #439
#710 := [monotonicity #333]: #709
#433 := [trans #710 #724]: #432
#727 := (iff #416 false)
#365 := (iff #416 #725)
#360 := (iff #415 true)
#720 := (iff #415 #719)
#380 := (iff #413 true)
#381 := [rewrite]: #380
#721 := [monotonicity #381 #718]: #720
#723 := [trans #721 #722]: #360
#366 := [monotonicity #723]: #365
#713 := [trans #366 #724]: #727
#708 := [monotonicity #713 #433]: #711
#424 := [trans #708 #422]: #423
#681 := [monotonicity #424 #700 #679]: #678
#524 := [trans #681 #564]: #565
#378 := (iff #412 true)
#730 := (or true false)
#374 := (iff #730 true)
#715 := [rewrite]: #374
#390 := (iff #412 #730)
#389 := (iff #411 false)
#394 := [rewrite]: #389
#739 := (iff #327 true)
#729 := [rewrite]: #739
#731 := [monotonicity #729 #394]: #390
#379 := [trans #731 #715]: #378
#669 := [monotonicity #379 #524]: #574
#573 := [trans #669 #673]: #558
#579 := [monotonicity #573]: #578
#674 := [trans #579 #581]: #578
#577 := [quant-inst #8 #67]: #569
#671 := [mp #577 #674]: #576
[unit-resolution #671 #81 #746]: false
unsat
58560b4c08322ae7fbfadc81b6f10d1874a37205 290 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#726 := (pattern #18)
#12 := 0::Int
#68 := -1::Int
#72 := (* -1::Int #17)
#69 := (* -1::Int #15)
#75 := (div #69 #72)
#226 := (* -1::Int #75)
#227 := (+ #18 #226)
#228 := (= #227 0::Int)
#28 := (div #15 #17)
#223 := (* -1::Int #28)
#224 := (+ #18 #223)
#225 := (= #224 0::Int)
#94 := (<= #17 0::Int)
#101 := (>= #15 0::Int)
#186 := (or #101 #94)
#187 := (not #186)
#90 := (<= #15 0::Int)
#184 := (or #90 #94)
#185 := (not #184)
#190 := (or #185 #187)
#229 := (if #190 #225 #228)
#222 := (= #18 0::Int)
#20 := (= #17 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#230 := (if #21 #222 #229)
#727 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #726) #230)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#730 := (iff #233 #727)
#728 := (iff #230 #230)
#729 := [refl]: #728
#731 := [quant-intro #729]: #730
#193 := (if #190 #28 #75)
#196 := (if #21 0::Int #193)
#199 := (= #18 #196)
#202 := (forall (vars (?v0 Int) (?v1 Int)) #199)
#234 := (iff #202 #233)
#231 := (iff #199 #230)
#232 := [rewrite]: #231
#235 := [quant-intro #232]: #234
#95 := (not #94)
#102 := (not #101)
#105 := (and #102 #95)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#111 := (if #108 #28 #75)
#114 := (if #21 0::Int #111)
#117 := (= #18 #114)
#120 := (forall (vars (?v0 Int) (?v1 Int)) #117)
#203 := (iff #120 #202)
#200 := (iff #117 #199)
#197 := (= #114 #196)
#194 := (= #111 #193)
#191 := (iff #108 #190)
#188 := (iff #105 #187)
#189 := [rewrite]: #188
#178 := (iff #98 #185)
#179 := [rewrite]: #178
#192 := [monotonicity #179 #189]: #191
#195 := [monotonicity #192]: #194
#198 := [monotonicity #195]: #197
#201 := [monotonicity #198]: #200
#204 := [quant-intro #201]: #203
#182 := (~ #120 #120)
#180 := (~ #117 #117)
#181 := [refl]: #180
#183 := [nnf-pos #181]: #182
#30 := (- #17)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #18 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#123 := (iff #35 #120)
#78 := (if #27 #28 #75)
#81 := (if #21 0::Int #78)
#84 := (= #18 #81)
#87 := (forall (vars (?v0 Int) (?v1 Int)) #84)
#121 := (iff #87 #120)
#118 := (iff #84 #117)
#115 := (= #81 #114)
#112 := (= #78 #111)
#109 := (iff #27 #108)
#106 := (iff #26 #105)
#96 := (iff #23 #95)
#97 := [rewrite]: #96
#103 := (iff #25 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104 #97]: #106
#99 := (iff #24 #98)
#92 := (iff #22 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#88 := (iff #35 #87)
#85 := (iff #34 #84)
#82 := (= #33 #81)
#79 := (= #32 #78)
#76 := (= #31 #75)
#73 := (= #30 #72)
#74 := [rewrite]: #73
#70 := (= #29 #69)
#71 := [rewrite]: #70
#77 := [monotonicity #71 #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#124 := [trans #89 #122]: #123
#67 := [asserted]: #35
#125 := [mp #67 #124]: #120
#174 := [mp~ #125 #183]: #120
#205 := [mp #174 #204]: #202
#236 := [mp #205 #235]: #233
#732 := [mp #236 #731]: #727
#10 := 3::Int
#8 := 1::Int
#9 := (f4 f5 1::Int)
#11 := (f3 #9 3::Int)
#13 := (= #11 0::Int)
#14 := (not #13)
#66 := [asserted]: #14
#639 := (not #727)
#641 := (or #639 #13)
#388 := (* -1::Int 3::Int)
#714 := (* -1::Int 1::Int)
#389 := (div #714 #388)
#721 := (* -1::Int #389)
#722 := (+ #11 #721)
#723 := (= #722 0::Int)
#718 := (div 1::Int 3::Int)
#720 := (* -1::Int #718)
#377 := (+ #11 #720)
#507 := (= #377 0::Int)
#390 := (<= 3::Int 0::Int)
#403 := (>= 1::Int 0::Int)
#400 := (or #403 #390)
#404 := (not #400)
#399 := (<= 1::Int 0::Int)
#401 := (or #399 #390)
#402 := (not #401)
#383 := (or #402 #404)
#724 := (if #383 #507 #723)
#397 := (= 3::Int 0::Int)
#313 := (= 1::Int 0::Int)
#398 := (or #313 #397)
#719 := (if #398 #13 #724)
#651 := (or #639 #719)
#653 := (iff #651 #641)
#654 := (iff #641 #641)
#643 := [rewrite]: #654
#650 := (iff #719 #13)
#567 := (if false #13 #13)
#661 := (iff #567 #13)
#648 := [rewrite]: #661
#660 := (iff #719 #567)
#565 := (iff #724 #13)
#655 := (= #11 1::Int)
#1 := true
#561 := (if true #13 #655)
#563 := (iff #561 #13)
#564 := [rewrite]: #563
#562 := (iff #724 #561)
#544 := (iff #723 #655)
#664 := (+ -1::Int #11)
#510 := (= #664 0::Int)
#656 := (iff #510 #655)
#659 := [rewrite]: #656
#658 := (iff #723 #510)
#550 := (= #722 #664)
#663 := (+ #11 -1::Int)
#667 := (= #663 #664)
#549 := [rewrite]: #667
#665 := (= #722 #663)
#509 := (= #721 -1::Int)
#528 := (= #714 -1::Int)
#529 := [rewrite]: #528
#506 := (= #721 #714)
#670 := (= #389 1::Int)
#671 := -3::Int
#674 := (div -1::Int -3::Int)
#675 := (= #674 1::Int)
#676 := [rewrite]: #675
#668 := (= #389 #674)
#672 := (= #388 -3::Int)
#673 := [rewrite]: #672
#669 := [monotonicity #529 #673]: #668
#677 := [trans #669 #676]: #670
#508 := [monotonicity #677]: #506
#662 := [trans #508 #529]: #509
#666 := [monotonicity #662]: #665
#551 := [trans #666 #549]: #550
#560 := [monotonicity #551]: #658
#559 := [trans #560 #659]: #544
#686 := (iff #507 #13)
#685 := (= #377 #11)
#682 := (+ #11 0::Int)
#679 := (= #682 #11)
#684 := [rewrite]: #679
#683 := (= #377 #682)
#692 := (= #720 0::Int)
#690 := (* -1::Int 0::Int)
#691 := (= #690 0::Int)
#688 := [rewrite]: #691
#405 := (= #720 #690)
#411 := (= #718 0::Int)
#689 := [rewrite]: #411
#687 := [monotonicity #689]: #405
#681 := [trans #687 #688]: #692
#678 := [monotonicity #681]: #683
#680 := [trans #678 #684]: #685
#527 := [monotonicity #680]: #686
#409 := (iff #383 true)
#699 := (or true false)
#423 := (iff #699 true)
#424 := [rewrite]: #423
#698 := (iff #383 #699)
#697 := (iff #404 false)
#695 := (not true)
#419 := (iff #695 false)
#693 := [rewrite]: #419
#696 := (iff #404 #695)
#425 := (iff #400 true)
#700 := (iff #400 #699)
#703 := (iff #390 false)
#704 := [rewrite]: #703
#710 := (iff #403 true)
#713 := [rewrite]: #710
#422 := [monotonicity #713 #704]: #700
#319 := [trans #422 #424]: #425
#418 := [monotonicity #319]: #696
#694 := [trans #418 #693]: #697
#352 := (iff #402 true)
#708 := (not false)
#711 := (iff #708 true)
#351 := [rewrite]: #711
#346 := (iff #402 #708)
#707 := (iff #401 false)
#716 := (or false false)
#360 := (iff #716 false)
#701 := [rewrite]: #360
#705 := (iff #401 #716)
#366 := (iff #399 false)
#367 := [rewrite]: #366
#706 := [monotonicity #367 #704]: #705
#702 := [trans #706 #701]: #707
#709 := [monotonicity #702]: #346
#712 := [trans #709 #351]: #352
#408 := [monotonicity #712 #694]: #698
#410 := [trans #408 #424]: #409
#555 := [monotonicity #410 #527 #559]: #562
#566 := [trans #555 #564]: #565
#364 := (iff #398 false)
#376 := (iff #398 #716)
#375 := (iff #397 false)
#380 := [rewrite]: #375
#725 := (iff #313 false)
#715 := [rewrite]: #725
#717 := [monotonicity #715 #380]: #376
#365 := [trans #717 #701]: #364
#657 := [monotonicity #365 #566]: #660
#642 := [trans #657 #648]: #650
#649 := [monotonicity #642]: #653
#644 := [trans #649 #643]: #653
#652 := [quant-inst #8 #10]: #651
#645 := [mp #652 #644]: #641
[unit-resolution #645 #66 #732]: false
unsat
a76887b4238113dd2f0fd0fc574d57f879ea15c2 280 0
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#726 := (pattern #17)
#18 := 0::Int
#68 := -1::Int
#72 := (* -1::Int #16)
#69 := (* -1::Int #14)
#75 := (div #69 #72)
#226 := (* -1::Int #75)
#227 := (+ #17 #226)
#228 := (= #227 0::Int)
#28 := (div #14 #16)
#223 := (* -1::Int #28)
#224 := (+ #17 #223)
#225 := (= #224 0::Int)
#94 := (<= #16 0::Int)
#101 := (>= #14 0::Int)
#186 := (or #101 #94)
#187 := (not #186)
#90 := (<= #14 0::Int)
#184 := (or #90 #94)
#185 := (not #184)
#190 := (or #185 #187)
#229 := (if #190 #225 #228)
#222 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #14 0::Int)
#21 := (or #19 #20)
#230 := (if #21 #222 #229)
#727 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #726) #230)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#730 := (iff #233 #727)
#728 := (iff #230 #230)
#729 := [refl]: #728
#731 := [quant-intro #729]: #730
#193 := (if #190 #28 #75)
#196 := (if #21 0::Int #193)
#199 := (= #17 #196)
#202 := (forall (vars (?v0 Int) (?v1 Int)) #199)
#234 := (iff #202 #233)
#231 := (iff #199 #230)
#232 := [rewrite]: #231
#235 := [quant-intro #232]: #234
#95 := (not #94)
#102 := (not #101)
#105 := (and #102 #95)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#111 := (if #108 #28 #75)
#114 := (if #21 0::Int #111)
#117 := (= #17 #114)
#120 := (forall (vars (?v0 Int) (?v1 Int)) #117)
#203 := (iff #120 #202)
#200 := (iff #117 #199)
#197 := (= #114 #196)
#194 := (= #111 #193)
#191 := (iff #108 #190)
#188 := (iff #105 #187)
#189 := [rewrite]: #188
#178 := (iff #98 #185)
#179 := [rewrite]: #178
#192 := [monotonicity #179 #189]: #191
#195 := [monotonicity #192]: #194
#198 := [monotonicity #195]: #197
#201 := [monotonicity #198]: #200
#204 := [quant-intro #201]: #203
#182 := (~ #120 #120)
#180 := (~ #117 #117)
#181 := [refl]: #180
#183 := [nnf-pos #181]: #182
#30 := (- #16)
#29 := (- #14)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #14 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #14)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#123 := (iff #35 #120)
#78 := (if #27 #28 #75)
#81 := (if #21 0::Int #78)
#84 := (= #17 #81)
#87 := (forall (vars (?v0 Int) (?v1 Int)) #84)
#121 := (iff #87 #120)
#118 := (iff #84 #117)
#115 := (= #81 #114)
#112 := (= #78 #111)
#109 := (iff #27 #108)
#106 := (iff #26 #105)
#96 := (iff #23 #95)
#97 := [rewrite]: #96
#103 := (iff #25 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104 #97]: #106
#99 := (iff #24 #98)
#92 := (iff #22 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#88 := (iff #35 #87)
#85 := (iff #34 #84)
#82 := (= #33 #81)
#79 := (= #32 #78)
#76 := (= #31 #75)
#73 := (= #30 #72)
#74 := [rewrite]: #73
#70 := (= #29 #69)
#71 := [rewrite]: #70
#77 := [monotonicity #71 #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#124 := [trans #89 #122]: #123
#67 := [asserted]: #35
#125 := [mp #67 #124]: #120
#174 := [mp~ #125 #183]: #120
#205 := [mp #174 #204]: #202
#236 := [mp #205 #235]: #233
#732 := [mp #236 #731]: #727
#11 := 1::Int
#8 := 3::Int
#9 := (f4 f5 3::Int)
#10 := (f3 #9 3::Int)
#12 := (= #10 1::Int)
#13 := (not #12)
#66 := [asserted]: #13
#564 := (not #727)
#565 := (or #564 #12)
#507 := (* -1::Int 3::Int)
#714 := (div #507 #507)
#388 := (* -1::Int #714)
#389 := (+ #10 #388)
#721 := (= #389 0::Int)
#383 := (div 3::Int 3::Int)
#718 := (* -1::Int #383)
#720 := (+ #10 #718)
#377 := (= #720 0::Int)
#399 := (<= 3::Int 0::Int)
#402 := (>= 3::Int 0::Int)
#403 := (or #402 #399)
#400 := (not #403)
#390 := (or #399 #399)
#401 := (not #390)
#404 := (or #401 #400)
#722 := (if #404 #377 #721)
#398 := (= #10 0::Int)
#313 := (= 3::Int 0::Int)
#397 := (or #313 #313)
#723 := (if #397 #398 #722)
#566 := (or #564 #723)
#660 := (iff #566 #565)
#661 := (iff #565 #565)
#648 := [rewrite]: #661
#555 := (iff #723 #12)
#659 := (if false #398 #12)
#561 := (iff #659 #12)
#562 := [rewrite]: #561
#544 := (iff #723 #659)
#655 := (iff #722 #12)
#1 := true
#550 := (if true #12 #12)
#658 := (iff #550 #12)
#560 := [rewrite]: #658
#551 := (iff #722 #550)
#667 := (iff #721 #12)
#688 := (+ -1::Int #10)
#678 := (= #688 0::Int)
#685 := (iff #678 #12)
#680 := [rewrite]: #685
#666 := (iff #721 #678)
#663 := (= #389 #688)
#405 := (+ #10 -1::Int)
#692 := (= #405 #688)
#681 := [rewrite]: #692
#509 := (= #389 #405)
#506 := (= #388 -1::Int)
#698 := (* -1::Int 1::Int)
#410 := (= #698 -1::Int)
#411 := [rewrite]: #410
#670 := (= #388 #698)
#675 := (= #714 1::Int)
#528 := -3::Int
#672 := (div -3::Int -3::Int)
#668 := (= #672 1::Int)
#669 := [rewrite]: #668
#673 := (= #714 #672)
#529 := (= #507 -3::Int)
#671 := [rewrite]: #529
#674 := [monotonicity #671 #671]: #673
#676 := [trans #674 #669]: #675
#677 := [monotonicity #676]: #670
#508 := [trans #677 #411]: #506
#662 := [monotonicity #508]: #509
#665 := [trans #662 #681]: #663
#664 := [monotonicity #665]: #666
#549 := [trans #664 #680]: #667
#686 := (iff #377 #12)
#679 := (iff #377 #678)
#682 := (= #720 #688)
#687 := (= #720 #405)
#689 := (= #718 -1::Int)
#408 := (= #718 #698)
#697 := (= #383 1::Int)
#694 := [rewrite]: #697
#409 := [monotonicity #694]: #408
#690 := [trans #409 #411]: #689
#691 := [monotonicity #690]: #687
#683 := [trans #691 #681]: #682
#684 := [monotonicity #683]: #679
#527 := [trans #684 #680]: #686
#419 := (iff #404 true)
#711 := (or true false)
#712 := (iff #711 true)
#710 := [rewrite]: #712
#696 := (iff #404 #711)
#319 := (iff #400 false)
#700 := (not true)
#424 := (iff #700 false)
#425 := [rewrite]: #424
#422 := (iff #400 #700)
#713 := (iff #403 true)
#351 := (iff #403 #711)
#360 := (iff #399 false)
#701 := [rewrite]: #360
#346 := (iff #402 true)
#709 := [rewrite]: #346
#352 := [monotonicity #709 #701]: #351
#699 := [trans #352 #710]: #713
#423 := [monotonicity #699]: #422
#695 := [trans #423 #425]: #319
#702 := (iff #401 true)
#703 := (not false)
#706 := (iff #703 true)
#707 := [rewrite]: #706
#704 := (iff #401 #703)
#366 := (iff #390 false)
#725 := (or false false)
#380 := (iff #725 false)
#716 := [rewrite]: #380
#364 := (iff #390 #725)
#365 := [monotonicity #701 #701]: #364
#367 := [trans #365 #716]: #366
#705 := [monotonicity #367]: #704
#708 := [trans #705 #707]: #702
#418 := [monotonicity #708 #695]: #696
#693 := [trans #418 #710]: #419
#510 := [monotonicity #693 #527 #549]: #551
#656 := [trans #510 #560]: #655
#376 := (iff #397 false)
#715 := (iff #397 #725)
#724 := (iff #313 false)
#719 := [rewrite]: #724
#375 := [monotonicity #719 #719]: #715
#717 := [trans #375 #716]: #376
#559 := [monotonicity #717 #656]: #544
#563 := [trans #559 #562]: #555
#657 := [monotonicity #563]: #660
#650 := [trans #657 #648]: #660
#567 := [quant-inst #8 #8]: #566
#642 := [mp #567 #650]: #565
[unit-resolution #642 #66 #732]: false
unsat
3e19a3704b0d883148b4ca12556acf9eedeb8436 304 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#726 := (pattern #18)
#19 := 0::Int
#69 := -1::Int
#73 := (* -1::Int #17)
#70 := (* -1::Int #15)
#76 := (div #70 #73)
#227 := (* -1::Int #76)
#228 := (+ #18 #227)
#229 := (= #228 0::Int)
#29 := (div #15 #17)
#224 := (* -1::Int #29)
#225 := (+ #18 #224)
#226 := (= #225 0::Int)
#95 := (<= #17 0::Int)
#102 := (>= #15 0::Int)
#187 := (or #102 #95)
#188 := (not #187)
#91 := (<= #15 0::Int)
#185 := (or #91 #95)
#186 := (not #185)
#191 := (or #186 #188)
#230 := (if #191 #226 #229)
#223 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #15 0::Int)
#22 := (or #20 #21)
#231 := (if #22 #223 #230)
#727 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #726) #231)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#730 := (iff #234 #727)
#728 := (iff #231 #231)
#729 := [refl]: #728
#731 := [quant-intro #729]: #730
#194 := (if #191 #29 #76)
#197 := (if #22 0::Int #194)
#200 := (= #18 #197)
#203 := (forall (vars (?v0 Int) (?v1 Int)) #200)
#235 := (iff #203 #234)
#232 := (iff #200 #231)
#233 := [rewrite]: #232
#236 := [quant-intro #233]: #235
#96 := (not #95)
#103 := (not #102)
#106 := (and #103 #96)
#92 := (not #91)
#99 := (and #92 #96)
#109 := (or #99 #106)
#112 := (if #109 #29 #76)
#115 := (if #22 0::Int #112)
#118 := (= #18 #115)
#121 := (forall (vars (?v0 Int) (?v1 Int)) #118)
#204 := (iff #121 #203)
#201 := (iff #118 #200)
#198 := (= #115 #197)
#195 := (= #112 #194)
#192 := (iff #109 #191)
#189 := (iff #106 #188)
#190 := [rewrite]: #189
#179 := (iff #99 #186)
#180 := [rewrite]: #179
#193 := [monotonicity #180 #190]: #192
#196 := [monotonicity #193]: #195
#199 := [monotonicity #196]: #198
#202 := [monotonicity #199]: #201
#205 := [quant-intro #202]: #204
#183 := (~ #121 #121)
#181 := (~ #118 #118)
#182 := [refl]: #181
#184 := [nnf-pos #182]: #183
#31 := (- #17)
#30 := (- #15)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (if #28 #29 #32)
#34 := (if #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#124 := (iff #36 #121)
#79 := (if #28 #29 #76)
#82 := (if #22 0::Int #79)
#85 := (= #18 #82)
#88 := (forall (vars (?v0 Int) (?v1 Int)) #85)
#122 := (iff #88 #121)
#119 := (iff #85 #118)
#116 := (= #82 #115)
#113 := (= #79 #112)
#110 := (iff #28 #109)
#107 := (iff #27 #106)
#97 := (iff #24 #96)
#98 := [rewrite]: #97
#104 := (iff #26 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105 #98]: #107
#100 := (iff #25 #99)
#93 := (iff #23 #92)
#94 := [rewrite]: #93
#101 := [monotonicity #94 #98]: #100
#111 := [monotonicity #101 #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [monotonicity #117]: #119
#123 := [quant-intro #120]: #122
#89 := (iff #36 #88)
#86 := (iff #35 #85)
#83 := (= #34 #82)
#80 := (= #33 #79)
#77 := (= #32 #76)
#74 := (= #31 #73)
#75 := [rewrite]: #74
#71 := (= #30 #70)
#72 := [rewrite]: #71
#78 := [monotonicity #72 #75]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#90 := [quant-intro #87]: #89
#125 := [trans #90 #123]: #124
#68 := [asserted]: #36
#126 := [mp #68 #125]: #121
#175 := [mp~ #126 #184]: #121
#206 := [mp #175 #205]: #203
#237 := [mp #206 #236]: #234
#732 := [mp #237 #731]: #727
#12 := 1::Int
#10 := 3::Int
#8 := 5::Int
#9 := (f4 f5 5::Int)
#11 := (f3 #9 3::Int)
#13 := (= #11 1::Int)
#14 := (not #13)
#67 := [asserted]: #14
#647 := (not #727)
#631 := (or #647 #13)
#389 := (* -1::Int 3::Int)
#388 := (* -1::Int 5::Int)
#721 := (div #388 #389)
#722 := (* -1::Int #721)
#723 := (+ #11 #722)
#724 := (= #723 0::Int)
#720 := (div 5::Int 3::Int)
#377 := (* -1::Int #720)
#507 := (+ #11 #377)
#714 := (= #507 0::Int)
#401 := (<= 3::Int 0::Int)
#400 := (>= 5::Int 0::Int)
#404 := (or #400 #401)
#383 := (not #404)
#390 := (<= 5::Int 0::Int)
#402 := (or #390 #401)
#403 := (not #402)
#718 := (or #403 #383)
#719 := (if #718 #714 #724)
#399 := (= #11 0::Int)
#397 := (= 3::Int 0::Int)
#313 := (= 5::Int 0::Int)
#398 := (or #313 #397)
#725 := (if #398 #399 #719)
#632 := (or #647 #725)
#635 := (iff #632 #631)
#637 := (iff #631 #631)
#633 := [rewrite]: #637
#646 := (iff #725 #13)
#649 := (if false #399 #13)
#644 := (iff #649 #13)
#645 := [rewrite]: #644
#654 := (iff #725 #649)
#652 := (iff #719 #13)
#274 := 2::Int
#567 := (= #11 2::Int)
#1 := true
#650 := (if true #13 #567)
#641 := (iff #650 #13)
#651 := [rewrite]: #641
#642 := (iff #719 #650)
#661 := (iff #724 #567)
#551 := -2::Int
#559 := (+ -2::Int #11)
#564 := (= #559 0::Int)
#660 := (iff #564 #567)
#657 := [rewrite]: #660
#565 := (iff #724 #564)
#555 := (= #723 #559)
#656 := (+ #11 -2::Int)
#561 := (= #656 #559)
#562 := [rewrite]: #561
#659 := (= #723 #656)
#560 := (= #722 -2::Int)
#667 := (* -1::Int 2::Int)
#510 := (= #667 -2::Int)
#658 := [rewrite]: #510
#549 := (= #722 #667)
#666 := (= #721 2::Int)
#670 := -3::Int
#669 := -5::Int
#508 := (div -5::Int -3::Int)
#663 := (= #508 2::Int)
#665 := [rewrite]: #663
#509 := (= #721 #508)
#677 := (= #389 -3::Int)
#506 := [rewrite]: #677
#675 := (= #388 -5::Int)
#676 := [rewrite]: #675
#662 := [monotonicity #676 #506]: #509
#664 := [trans #662 #665]: #666
#550 := [monotonicity #664]: #549
#655 := [trans #550 #658]: #560
#544 := [monotonicity #655]: #659
#563 := [trans #544 #562]: #555
#566 := [monotonicity #563]: #565
#648 := [trans #566 #657]: #661
#674 := (iff #714 #13)
#684 := (+ -1::Int #11)
#528 := (= #684 0::Int)
#672 := (iff #528 #13)
#673 := [rewrite]: #672
#529 := (iff #714 #528)
#686 := (= #507 #684)
#683 := (+ #11 -1::Int)
#685 := (= #683 #684)
#680 := [rewrite]: #685
#678 := (= #507 #683)
#681 := (= #377 -1::Int)
#405 := (* -1::Int 1::Int)
#688 := (= #405 -1::Int)
#692 := [rewrite]: #688
#687 := (= #377 #405)
#689 := (= #720 1::Int)
#690 := [rewrite]: #689
#691 := [monotonicity #690]: #687
#682 := [trans #691 #692]: #681
#679 := [monotonicity #682]: #678
#527 := [trans #679 #680]: #686
#671 := [monotonicity #527]: #529
#668 := [trans #671 #673]: #674
#410 := (iff #718 true)
#700 := (or true false)
#424 := (iff #700 true)
#425 := [rewrite]: #424
#408 := (iff #718 #700)
#694 := (iff #383 false)
#696 := (not true)
#693 := (iff #696 false)
#697 := [rewrite]: #693
#418 := (iff #383 #696)
#319 := (iff #404 true)
#422 := (iff #404 #700)
#704 := (iff #401 false)
#705 := [rewrite]: #704
#713 := (iff #400 true)
#699 := [rewrite]: #713
#423 := [monotonicity #699 #705]: #422
#695 := [trans #423 #425]: #319
#419 := [monotonicity #695]: #418
#698 := [trans #419 #697]: #694
#712 := (iff #403 true)
#346 := (not false)
#351 := (iff #346 true)
#352 := [rewrite]: #351
#709 := (iff #403 #346)
#702 := (iff #402 false)
#376 := (or false false)
#701 := (iff #376 false)
#364 := [rewrite]: #701
#706 := (iff #402 #376)
#367 := (iff #390 false)
#703 := [rewrite]: #367
#707 := [monotonicity #703 #705]: #706
#708 := [trans #707 #364]: #702
#711 := [monotonicity #708]: #709
#710 := [trans #711 #352]: #712
#409 := [monotonicity #710 #698]: #408
#411 := [trans #409 #425]: #410
#639 := [monotonicity #411 #668 #648]: #642
#653 := [trans #639 #651]: #652
#365 := (iff #398 false)
#717 := (iff #398 #376)
#380 := (iff #397 false)
#716 := [rewrite]: #380
#715 := (iff #313 false)
#375 := [rewrite]: #715
#360 := [monotonicity #375 #716]: #717
#366 := [trans #360 #364]: #365
#643 := [monotonicity #366 #653]: #654
#640 := [trans #643 #645]: #646
#636 := [monotonicity #640]: #635
#638 := [trans #636 #633]: #635
#634 := [quant-inst #8 #10]: #632
#624 := [mp #634 #638]: #631
[unit-resolution #624 #67 #732]: false
unsat
5e68ab43f3201baeb2a0c0f495119aa80de32eb9 306 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#743 := (pattern #19)
#20 := 0::Int
#75 := -1::Int
#89 := (* -1::Int #18)
#85 := (* -1::Int #16)
#92 := (div #85 #89)
#243 := (* -1::Int #92)
#244 := (+ #19 #243)
#245 := (= #244 0::Int)
#30 := (div #16 #18)
#240 := (* -1::Int #30)
#241 := (+ #19 #240)
#242 := (= #241 0::Int)
#111 := (<= #18 0::Int)
#118 := (>= #16 0::Int)
#203 := (or #118 #111)
#204 := (not #203)
#107 := (<= #16 0::Int)
#201 := (or #107 #111)
#202 := (not #201)
#207 := (or #202 #204)
#246 := (if #207 #242 #245)
#239 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#247 := (if #23 #239 #246)
#744 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #743) #247)
#250 := (forall (vars (?v0 Int) (?v1 Int)) #247)
#747 := (iff #250 #744)
#745 := (iff #247 #247)
#746 := [refl]: #745
#748 := [quant-intro #746]: #747
#210 := (if #207 #30 #92)
#213 := (if #23 0::Int #210)
#216 := (= #19 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#251 := (iff #219 #250)
#248 := (iff #216 #247)
#249 := [rewrite]: #248
#252 := [quant-intro #249]: #251
#112 := (not #111)
#119 := (not #118)
#122 := (and #119 #112)
#108 := (not #107)
#115 := (and #108 #112)
#125 := (or #115 #122)
#128 := (if #125 #30 #92)
#131 := (if #23 0::Int #128)
#134 := (= #19 #131)
#137 := (forall (vars (?v0 Int) (?v1 Int)) #134)
#220 := (iff #137 #219)
#217 := (iff #134 #216)
#214 := (= #131 #213)
#211 := (= #128 #210)
#208 := (iff #125 #207)
#205 := (iff #122 #204)
#206 := [rewrite]: #205
#195 := (iff #115 #202)
#196 := [rewrite]: #195
#209 := [monotonicity #196 #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#199 := (~ #137 #137)
#197 := (~ #134 #134)
#198 := [refl]: #197
#200 := [nnf-pos #198]: #199
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#140 := (iff #37 #137)
#95 := (if #29 #30 #92)
#98 := (if #23 0::Int #95)
#101 := (= #19 #98)
#104 := (forall (vars (?v0 Int) (?v1 Int)) #101)
#138 := (iff #104 #137)
#135 := (iff #101 #134)
#132 := (= #98 #131)
#129 := (= #95 #128)
#126 := (iff #29 #125)
#123 := (iff #28 #122)
#113 := (iff #25 #112)
#114 := [rewrite]: #113
#120 := (iff #27 #119)
#121 := [rewrite]: #120
#124 := [monotonicity #121 #114]: #123
#116 := (iff #26 #115)
#109 := (iff #24 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#127 := [monotonicity #117 #124]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#136 := [monotonicity #133]: #135
#139 := [quant-intro #136]: #138
#105 := (iff #37 #104)
#102 := (iff #36 #101)
#99 := (= #35 #98)
#96 := (= #34 #95)
#93 := (= #33 #92)
#90 := (= #32 #89)
#91 := [rewrite]: #90
#87 := (= #31 #85)
#88 := [rewrite]: #87
#94 := [monotonicity #88 #91]: #93
#97 := [monotonicity #94]: #96
#100 := [monotonicity #97]: #99
#103 := [monotonicity #100]: #102
#106 := [quant-intro #103]: #105
#141 := [trans #106 #139]: #140
#84 := [asserted]: #37
#142 := [mp #84 #141]: #137
#191 := [mp~ #142 #200]: #137
#222 := [mp #191 #221]: #219
#253 := [mp #222 #252]: #250
#749 := [mp #253 #748]: #744
#69 := -3::Int
#8 := 1::Int
#9 := (f4 f5 1::Int)
#72 := (f3 #9 -3::Int)
#78 := (= #72 -1::Int)
#81 := (not #78)
#13 := (- 1::Int)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#14 := (= #12 #13)
#15 := (not #14)
#82 := (iff #15 #81)
#79 := (iff #14 #78)
#76 := (= #13 -1::Int)
#77 := [rewrite]: #76
#73 := (= #12 #72)
#70 := (= #11 -3::Int)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#83 := [monotonicity #80]: #82
#68 := [asserted]: #15
#86 := [mp #68 #83]: #81
#659 := (not #744)
#656 := (or #659 #78)
#406 := (* -1::Int -3::Int)
#405 := (* -1::Int 1::Int)
#738 := (div #405 #406)
#739 := (* -1::Int #738)
#740 := (+ #72 #739)
#741 := (= #740 0::Int)
#737 := (div 1::Int -3::Int)
#394 := (* -1::Int #737)
#524 := (+ #72 #394)
#731 := (= #524 0::Int)
#418 := (<= -3::Int 0::Int)
#417 := (>= 1::Int 0::Int)
#421 := (or #417 #418)
#400 := (not #421)
#407 := (<= 1::Int 0::Int)
#419 := (or #407 #418)
#420 := (not #419)
#735 := (or #420 #400)
#736 := (if #735 #731 #741)
#416 := (= #72 0::Int)
#414 := (= -3::Int 0::Int)
#330 := (= 1::Int 0::Int)
#415 := (or #330 #414)
#742 := (if #415 #416 #736)
#658 := (or #659 #742)
#669 := (iff #658 #656)
#666 := (iff #656 #656)
#671 := [rewrite]: #666
#665 := (iff #742 #78)
#572 := (if false #416 #78)
#582 := (iff #572 #78)
#583 := [rewrite]: #582
#674 := (iff #742 #572)
#584 := (iff #736 #78)
#580 := (iff #736 #572)
#578 := (iff #741 #78)
#567 := (+ 1::Int #72)
#672 := (= #567 0::Int)
#561 := (iff #672 #78)
#576 := [rewrite]: #561
#673 := (iff #741 #672)
#675 := (= #740 #567)
#681 := (+ #72 1::Int)
#568 := (= #681 #567)
#527 := [rewrite]: #568
#684 := (= #740 #681)
#682 := (= #739 1::Int)
#523 := (* -1::Int -1::Int)
#679 := (= #523 1::Int)
#680 := [rewrite]: #679
#525 := (= #739 #523)
#687 := (= #738 -1::Int)
#691 := (div -1::Int 3::Int)
#692 := (= #691 -1::Int)
#693 := [rewrite]: #692
#685 := (= #738 #691)
#689 := (= #406 3::Int)
#690 := [rewrite]: #689
#546 := (= #405 -1::Int)
#688 := [rewrite]: #546
#686 := [monotonicity #688 #690]: #685
#694 := [trans #686 #693]: #687
#526 := [monotonicity #694]: #525
#683 := [trans #526 #680]: #682
#566 := [monotonicity #683]: #684
#577 := [trans #566 #527]: #675
#676 := [monotonicity #577]: #673
#579 := [trans #676 #576]: #578
#544 := (iff #731 #416)
#697 := (= #524 #72)
#700 := (+ #72 0::Int)
#701 := (= #700 #72)
#702 := [rewrite]: #701
#695 := (= #524 #700)
#698 := (= #394 0::Int)
#422 := (* -1::Int 0::Int)
#705 := (= #422 0::Int)
#709 := [rewrite]: #705
#704 := (= #394 #422)
#706 := (= #737 0::Int)
#707 := [rewrite]: #706
#708 := [monotonicity #707]: #704
#699 := [trans #708 #709]: #698
#696 := [monotonicity #699]: #695
#703 := [trans #696 #702]: #697
#545 := [monotonicity #703]: #544
#427 := (iff #735 false)
#393 := (or false false)
#718 := (iff #393 false)
#381 := [rewrite]: #718
#425 := (iff #735 #393)
#711 := (iff #400 false)
#1 := true
#368 := (not true)
#727 := (iff #368 false)
#730 := [rewrite]: #727
#710 := (iff #400 #368)
#435 := (iff #421 true)
#441 := (or true true)
#712 := (iff #441 true)
#713 := [rewrite]: #712
#442 := (iff #421 #441)
#721 := (iff #418 true)
#722 := [rewrite]: #721
#439 := (iff #417 true)
#440 := [rewrite]: #439
#336 := [monotonicity #440 #722]: #442
#436 := [trans #336 #713]: #435
#714 := [monotonicity #436]: #710
#715 := [trans #714 #730]: #711
#716 := (iff #420 false)
#369 := (iff #420 #368)
#726 := (iff #419 true)
#723 := (or false true)
#725 := (iff #723 true)
#363 := [rewrite]: #725
#724 := (iff #419 #723)
#384 := (iff #407 false)
#720 := [rewrite]: #384
#719 := [monotonicity #720 #722]: #724
#728 := [trans #719 #363]: #726
#729 := [monotonicity #728]: #369
#717 := [trans #729 #730]: #716
#426 := [monotonicity #717 #715]: #425
#428 := [trans #426 #381]: #427
#581 := [monotonicity #428 #545 #579]: #580
#677 := [trans #581 #583]: #584
#382 := (iff #415 false)
#734 := (iff #415 #393)
#397 := (iff #414 false)
#733 := [rewrite]: #397
#732 := (iff #330 false)
#392 := [rewrite]: #732
#377 := [monotonicity #392 #733]: #734
#383 := [trans #377 #381]: #382
#678 := [monotonicity #383 #677]: #674
#667 := [trans #678 #583]: #665
#670 := [monotonicity #667]: #669
#660 := [trans #670 #671]: #669
#668 := [quant-inst #8 #69]: #658
#661 := [mp #668 #660]: #656
[unit-resolution #661 #86 #749]: false
unsat
96a820c8e0e11b411d8512a13b417469ec37ea05 305 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#743 := (pattern #19)
#20 := 0::Int
#75 := -1::Int
#89 := (* -1::Int #18)
#85 := (* -1::Int #16)
#92 := (div #85 #89)
#243 := (* -1::Int #92)
#244 := (+ #19 #243)
#245 := (= #244 0::Int)
#30 := (div #16 #18)
#240 := (* -1::Int #30)
#241 := (+ #19 #240)
#242 := (= #241 0::Int)
#111 := (<= #18 0::Int)
#118 := (>= #16 0::Int)
#203 := (or #118 #111)
#204 := (not #203)
#107 := (<= #16 0::Int)
#201 := (or #107 #111)
#202 := (not #201)
#207 := (or #202 #204)
#246 := (if #207 #242 #245)
#239 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#247 := (if #23 #239 #246)
#744 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #743) #247)
#250 := (forall (vars (?v0 Int) (?v1 Int)) #247)
#747 := (iff #250 #744)
#745 := (iff #247 #247)
#746 := [refl]: #745
#748 := [quant-intro #746]: #747
#210 := (if #207 #30 #92)
#213 := (if #23 0::Int #210)
#216 := (= #19 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#251 := (iff #219 #250)
#248 := (iff #216 #247)
#249 := [rewrite]: #248
#252 := [quant-intro #249]: #251
#112 := (not #111)
#119 := (not #118)
#122 := (and #119 #112)
#108 := (not #107)
#115 := (and #108 #112)
#125 := (or #115 #122)
#128 := (if #125 #30 #92)
#131 := (if #23 0::Int #128)
#134 := (= #19 #131)
#137 := (forall (vars (?v0 Int) (?v1 Int)) #134)
#220 := (iff #137 #219)
#217 := (iff #134 #216)
#214 := (= #131 #213)
#211 := (= #128 #210)
#208 := (iff #125 #207)
#205 := (iff #122 #204)
#206 := [rewrite]: #205
#195 := (iff #115 #202)
#196 := [rewrite]: #195
#209 := [monotonicity #196 #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#199 := (~ #137 #137)
#197 := (~ #134 #134)
#198 := [refl]: #197
#200 := [nnf-pos #198]: #199
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#140 := (iff #37 #137)
#95 := (if #29 #30 #92)
#98 := (if #23 0::Int #95)
#101 := (= #19 #98)
#104 := (forall (vars (?v0 Int) (?v1 Int)) #101)
#138 := (iff #104 #137)
#135 := (iff #101 #134)
#132 := (= #98 #131)
#129 := (= #95 #128)
#126 := (iff #29 #125)
#123 := (iff #28 #122)
#113 := (iff #25 #112)
#114 := [rewrite]: #113
#120 := (iff #27 #119)
#121 := [rewrite]: #120
#124 := [monotonicity #121 #114]: #123
#116 := (iff #26 #115)
#109 := (iff #24 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#127 := [monotonicity #117 #124]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#136 := [monotonicity #133]: #135
#139 := [quant-intro #136]: #138
#105 := (iff #37 #104)
#102 := (iff #36 #101)
#99 := (= #35 #98)
#96 := (= #34 #95)
#93 := (= #33 #92)
#90 := (= #32 #89)
#91 := [rewrite]: #90
#87 := (= #31 #85)
#88 := [rewrite]: #87
#94 := [monotonicity #88 #91]: #93
#97 := [monotonicity #94]: #96
#100 := [monotonicity #97]: #99
#103 := [monotonicity #100]: #102
#106 := [quant-intro #103]: #105
#141 := [trans #106 #139]: #140
#84 := [asserted]: #37
#142 := [mp #84 #141]: #137
#191 := [mp~ #142 #200]: #137
#222 := [mp #191 #221]: #219
#253 := [mp #222 #252]: #250
#749 := [mp #253 #748]: #744
#69 := -3::Int
#8 := 3::Int
#9 := (f4 f5 3::Int)
#72 := (f3 #9 -3::Int)
#78 := (= #72 -1::Int)
#81 := (not #78)
#12 := 1::Int
#13 := (- 1::Int)
#10 := (- 3::Int)
#11 := (f3 #9 #10)
#14 := (= #11 #13)
#15 := (not #14)
#82 := (iff #15 #81)
#79 := (iff #14 #78)
#76 := (= #13 -1::Int)
#77 := [rewrite]: #76
#73 := (= #11 #72)
#70 := (= #10 -3::Int)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#83 := [monotonicity #80]: #82
#68 := [asserted]: #15
#86 := [mp #68 #83]: #81
#667 := (not #744)
#659 := (or #667 #78)
#406 := (* -1::Int -3::Int)
#405 := (* -1::Int 3::Int)
#738 := (div #405 #406)
#739 := (* -1::Int #738)
#740 := (+ #72 #739)
#741 := (= #740 0::Int)
#737 := (div 3::Int -3::Int)
#394 := (* -1::Int #737)
#524 := (+ #72 #394)
#731 := (= #524 0::Int)
#418 := (<= -3::Int 0::Int)
#417 := (>= 3::Int 0::Int)
#421 := (or #417 #418)
#400 := (not #421)
#407 := (<= 3::Int 0::Int)
#419 := (or #407 #418)
#420 := (not #419)
#735 := (or #420 #400)
#736 := (if #735 #731 #741)
#416 := (= #72 0::Int)
#414 := (= -3::Int 0::Int)
#330 := (= 3::Int 0::Int)
#415 := (or #330 #414)
#742 := (if #415 #416 #736)
#656 := (or #667 #742)
#668 := (iff #656 #659)
#670 := (iff #659 #659)
#666 := [rewrite]: #670
#678 := (iff #742 #78)
#582 := (if false #416 #78)
#677 := (iff #582 #78)
#674 := [rewrite]: #677
#583 := (iff #742 #582)
#580 := (iff #736 #78)
#561 := (if false #78 #78)
#579 := (iff #561 #78)
#572 := [rewrite]: #579
#576 := (iff #736 #561)
#673 := (iff #741 #78)
#701 := (+ 1::Int #72)
#545 := (= #701 0::Int)
#689 := (iff #545 #78)
#690 := [rewrite]: #689
#577 := (iff #741 #545)
#527 := (= #740 #701)
#700 := (+ #72 1::Int)
#702 := (= #700 #701)
#697 := [rewrite]: #702
#567 := (= #740 #700)
#684 := (= #739 1::Int)
#422 := (* -1::Int -1::Int)
#705 := (= #422 1::Int)
#709 := [rewrite]: #705
#683 := (= #739 #422)
#680 := (= #738 -1::Int)
#694 := (div -3::Int 3::Int)
#526 := (= #694 -1::Int)
#679 := [rewrite]: #526
#523 := (= #738 #694)
#693 := (= #406 3::Int)
#687 := [rewrite]: #693
#686 := (= #405 -3::Int)
#692 := [rewrite]: #686
#525 := [monotonicity #692 #687]: #523
#682 := [trans #525 #679]: #680
#681 := [monotonicity #682]: #683
#566 := [trans #681 #709]: #684
#568 := [monotonicity #566]: #567
#675 := [trans #568 #697]: #527
#672 := [monotonicity #675]: #577
#676 := [trans #672 #690]: #673
#691 := (iff #731 #78)
#546 := (iff #731 #545)
#703 := (= #524 #701)
#695 := (= #524 #700)
#698 := (= #394 1::Int)
#704 := (= #394 #422)
#706 := (= #737 -1::Int)
#707 := [rewrite]: #706
#708 := [monotonicity #707]: #704
#699 := [trans #708 #709]: #698
#696 := [monotonicity #699]: #695
#544 := [trans #696 #697]: #703
#688 := [monotonicity #544]: #546
#685 := [trans #688 #690]: #691
#427 := (iff #735 false)
#393 := (or false false)
#718 := (iff #393 false)
#381 := [rewrite]: #718
#425 := (iff #735 #393)
#711 := (iff #400 false)
#1 := true
#368 := (not true)
#727 := (iff #368 false)
#730 := [rewrite]: #727
#710 := (iff #400 #368)
#435 := (iff #421 true)
#441 := (or true true)
#712 := (iff #441 true)
#713 := [rewrite]: #712
#442 := (iff #421 #441)
#721 := (iff #418 true)
#722 := [rewrite]: #721
#439 := (iff #417 true)
#440 := [rewrite]: #439
#336 := [monotonicity #440 #722]: #442
#436 := [trans #336 #713]: #435
#714 := [monotonicity #436]: #710
#715 := [trans #714 #730]: #711
#716 := (iff #420 false)
#369 := (iff #420 #368)
#726 := (iff #419 true)
#723 := (or false true)
#725 := (iff #723 true)
#363 := [rewrite]: #725
#724 := (iff #419 #723)
#384 := (iff #407 false)
#720 := [rewrite]: #384
#719 := [monotonicity #720 #722]: #724
#728 := [trans #719 #363]: #726
#729 := [monotonicity #728]: #369
#717 := [trans #729 #730]: #716
#426 := [monotonicity #717 #715]: #425
#428 := [trans #426 #381]: #427
#578 := [monotonicity #428 #685 #676]: #576
#581 := [trans #578 #572]: #580
#382 := (iff #415 false)
#734 := (iff #415 #393)
#397 := (iff #414 false)
#733 := [rewrite]: #397
#732 := (iff #330 false)
#392 := [rewrite]: #732
#377 := [monotonicity #392 #733]: #734
#383 := [trans #377 #381]: #382
#584 := [monotonicity #383 #581]: #583
#665 := [trans #584 #674]: #678
#669 := [monotonicity #665]: #668
#671 := [trans #669 #666]: #668
#658 := [quant-inst #8 #69]: #656
#660 := [mp #658 #671]: #659
[unit-resolution #660 #86 #749]: false
unsat
2a80a49785a4b459138949d07841039c329934c0 320 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#744 := (pattern #20)
#21 := 0::Int
#86 := -1::Int
#91 := (* -1::Int #19)
#88 := (* -1::Int #17)
#94 := (div #88 #91)
#245 := (* -1::Int #94)
#246 := (+ #20 #245)
#247 := (= #246 0::Int)
#31 := (div #17 #19)
#242 := (* -1::Int #31)
#243 := (+ #20 #242)
#244 := (= #243 0::Int)
#113 := (<= #19 0::Int)
#120 := (>= #17 0::Int)
#205 := (or #120 #113)
#206 := (not #205)
#109 := (<= #17 0::Int)
#203 := (or #109 #113)
#204 := (not #203)
#209 := (or #204 #206)
#248 := (if #209 #244 #247)
#241 := (= #20 0::Int)
#23 := (= #19 0::Int)
#22 := (= #17 0::Int)
#24 := (or #22 #23)
#249 := (if #24 #241 #248)
#745 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #744) #249)
#252 := (forall (vars (?v0 Int) (?v1 Int)) #249)
#748 := (iff #252 #745)
#746 := (iff #249 #249)
#747 := [refl]: #746
#749 := [quant-intro #747]: #748
#212 := (if #209 #31 #94)
#215 := (if #24 0::Int #212)
#218 := (= #20 #215)
#221 := (forall (vars (?v0 Int) (?v1 Int)) #218)
#253 := (iff #221 #252)
#250 := (iff #218 #249)
#251 := [rewrite]: #250
#254 := [quant-intro #251]: #253
#114 := (not #113)
#121 := (not #120)
#124 := (and #121 #114)
#110 := (not #109)
#117 := (and #110 #114)
#127 := (or #117 #124)
#130 := (if #127 #31 #94)
#133 := (if #24 0::Int #130)
#136 := (= #20 #133)
#139 := (forall (vars (?v0 Int) (?v1 Int)) #136)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#216 := (= #133 #215)
#213 := (= #130 #212)
#210 := (iff #127 #209)
#207 := (iff #124 #206)
#208 := [rewrite]: #207
#197 := (iff #117 #204)
#198 := [rewrite]: #197
#211 := [monotonicity #198 #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [monotonicity #217]: #219
#223 := [quant-intro #220]: #222
#201 := (~ #139 #139)
#199 := (~ #136 #136)
#200 := [refl]: #199
#202 := [nnf-pos #200]: #201
#33 := (- #19)
#32 := (- #17)
#34 := (div #32 #33)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (if #30 #31 #34)
#36 := (if #24 0::Int #35)
#37 := (= #20 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#142 := (iff #38 #139)
#97 := (if #30 #31 #94)
#100 := (if #24 0::Int #97)
#103 := (= #20 #100)
#106 := (forall (vars (?v0 Int) (?v1 Int)) #103)
#140 := (iff #106 #139)
#137 := (iff #103 #136)
#134 := (= #100 #133)
#131 := (= #97 #130)
#128 := (iff #30 #127)
#125 := (iff #29 #124)
#115 := (iff #26 #114)
#116 := [rewrite]: #115
#122 := (iff #28 #121)
#123 := [rewrite]: #122
#126 := [monotonicity #123 #116]: #125
#118 := (iff #27 #117)
#111 := (iff #25 #110)
#112 := [rewrite]: #111
#119 := [monotonicity #112 #116]: #118
#129 := [monotonicity #119 #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [quant-intro #138]: #140
#107 := (iff #38 #106)
#104 := (iff #37 #103)
#101 := (= #36 #100)
#98 := (= #35 #97)
#95 := (= #34 #94)
#92 := (= #33 #91)
#93 := [rewrite]: #92
#89 := (= #32 #88)
#90 := [rewrite]: #89
#96 := [monotonicity #90 #93]: #95
#99 := [monotonicity #96]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#108 := [quant-intro #105]: #107
#143 := [trans #108 #141]: #142
#85 := [asserted]: #38
#144 := [mp #85 #143]: #139
#193 := [mp~ #144 #202]: #139
#224 := [mp #193 #223]: #221
#255 := [mp #224 #254]: #252
#750 := [mp #255 #749]: #745
#76 := -2::Int
#70 := -3::Int
#8 := 5::Int
#9 := (f4 f5 5::Int)
#73 := (f3 #9 -3::Int)
#79 := (= #73 -2::Int)
#82 := (not #79)
#13 := 2::Int
#14 := (- 2::Int)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#15 := (= #12 #14)
#16 := (not #15)
#83 := (iff #16 #82)
#80 := (iff #15 #79)
#77 := (= #14 -2::Int)
#78 := [rewrite]: #77
#74 := (= #12 #73)
#71 := (= #11 -3::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#69 := [asserted]: #16
#87 := [mp #69 #84]: #82
#664 := (not #745)
#658 := (or #664 #79)
#407 := (* -1::Int -3::Int)
#406 := (* -1::Int 5::Int)
#739 := (div #406 #407)
#740 := (* -1::Int #739)
#741 := (+ #73 #740)
#742 := (= #741 0::Int)
#738 := (div 5::Int -3::Int)
#395 := (* -1::Int #738)
#525 := (+ #73 #395)
#732 := (= #525 0::Int)
#419 := (<= -3::Int 0::Int)
#418 := (>= 5::Int 0::Int)
#422 := (or #418 #419)
#401 := (not #422)
#408 := (<= 5::Int 0::Int)
#420 := (or #408 #419)
#421 := (not #420)
#736 := (or #421 #401)
#737 := (if #736 #732 #742)
#417 := (= #73 0::Int)
#415 := (= -3::Int 0::Int)
#331 := (= 5::Int 0::Int)
#416 := (or #331 #415)
#743 := (if #416 #417 #737)
#665 := (or #664 #743)
#650 := (iff #665 #658)
#653 := (iff #658 #658)
#654 := [rewrite]: #653
#662 := (iff #743 #79)
#670 := (if false #417 #79)
#672 := (iff #670 #79)
#661 := [rewrite]: #672
#671 := (iff #743 #670)
#659 := (iff #737 #79)
#690 := (= #73 -1::Int)
#679 := (if false #690 #79)
#660 := (iff #679 #79)
#657 := [rewrite]: #660
#666 := (iff #737 #679)
#678 := (iff #742 #79)
#562 := (+ 2::Int #73)
#581 := (= #562 0::Int)
#584 := (iff #581 #79)
#585 := [rewrite]: #584
#582 := (iff #742 #581)
#580 := (= #741 #562)
#673 := (+ #73 2::Int)
#577 := (= #673 #562)
#579 := [rewrite]: #577
#674 := (= #741 #673)
#676 := (= #740 2::Int)
#685 := (* -1::Int -2::Int)
#569 := (= #685 2::Int)
#528 := [rewrite]: #569
#567 := (= #740 #685)
#684 := (= #739 -2::Int)
#693 := -5::Int
#526 := (div -5::Int 3::Int)
#681 := (= #526 -2::Int)
#683 := [rewrite]: #681
#527 := (= #739 #526)
#695 := (= #407 3::Int)
#524 := [rewrite]: #695
#694 := (= #406 -5::Int)
#688 := [rewrite]: #694
#680 := [monotonicity #688 #524]: #527
#682 := [trans #680 #683]: #684
#568 := [monotonicity #682]: #567
#578 := [trans #568 #528]: #676
#677 := [monotonicity #578]: #674
#573 := [trans #677 #579]: #580
#583 := [monotonicity #573]: #582
#675 := [trans #583 #585]: #678
#686 := (iff #732 #690)
#284 := 1::Int
#702 := (+ 1::Int #73)
#546 := (= #702 0::Int)
#691 := (iff #546 #690)
#692 := [rewrite]: #691
#547 := (iff #732 #546)
#704 := (= #525 #702)
#701 := (+ #73 1::Int)
#703 := (= #701 #702)
#698 := [rewrite]: #703
#696 := (= #525 #701)
#699 := (= #395 1::Int)
#423 := (* -1::Int -1::Int)
#706 := (= #423 1::Int)
#710 := [rewrite]: #706
#705 := (= #395 #423)
#707 := (= #738 -1::Int)
#708 := [rewrite]: #707
#709 := [monotonicity #708]: #705
#700 := [trans #709 #710]: #699
#697 := [monotonicity #700]: #696
#545 := [trans #697 #698]: #704
#689 := [monotonicity #545]: #547
#687 := [trans #689 #692]: #686
#428 := (iff #736 false)
#394 := (or false false)
#719 := (iff #394 false)
#382 := [rewrite]: #719
#426 := (iff #736 #394)
#712 := (iff #401 false)
#1 := true
#369 := (not true)
#728 := (iff #369 false)
#731 := [rewrite]: #728
#711 := (iff #401 #369)
#436 := (iff #422 true)
#442 := (or true true)
#713 := (iff #442 true)
#714 := [rewrite]: #713
#443 := (iff #422 #442)
#722 := (iff #419 true)
#723 := [rewrite]: #722
#440 := (iff #418 true)
#441 := [rewrite]: #440
#337 := [monotonicity #441 #723]: #443
#437 := [trans #337 #714]: #436
#715 := [monotonicity #437]: #711
#716 := [trans #715 #731]: #712
#717 := (iff #421 false)
#370 := (iff #421 #369)
#727 := (iff #420 true)
#724 := (or false true)
#726 := (iff #724 true)
#364 := [rewrite]: #726
#725 := (iff #420 #724)
#385 := (iff #408 false)
#721 := [rewrite]: #385
#720 := [monotonicity #721 #723]: #725
#729 := [trans #720 #364]: #727
#730 := [monotonicity #729]: #370
#718 := [trans #730 #731]: #717
#427 := [monotonicity #718 #716]: #426
#429 := [trans #427 #382]: #428
#668 := [monotonicity #429 #687 #675]: #666
#669 := [trans #668 #657]: #659
#383 := (iff #416 false)
#735 := (iff #416 #394)
#398 := (iff #415 false)
#734 := [rewrite]: #398
#733 := (iff #331 false)
#393 := [rewrite]: #733
#378 := [monotonicity #393 #734]: #735
#384 := [trans #378 #382]: #383
#667 := [monotonicity #384 #669]: #671
#663 := [trans #667 #661]: #662
#652 := [monotonicity #663]: #650
#655 := [trans #652 #654]: #650
#649 := [quant-inst #8 #70]: #665
#651 := [mp #649 #655]: #658
[unit-resolution #651 #87 #750]: false
unsat
77ef498d73e559a8192af9250d4abc98f525f4cc 309 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#742 := (pattern #18)
#19 := 0::Int
#68 := -1::Int
#88 := (* -1::Int #17)
#84 := (* -1::Int #15)
#91 := (div #84 #88)
#242 := (* -1::Int #91)
#243 := (+ #18 #242)
#244 := (= #243 0::Int)
#29 := (div #15 #17)
#239 := (* -1::Int #29)
#240 := (+ #18 #239)
#241 := (= #240 0::Int)
#110 := (<= #17 0::Int)
#117 := (>= #15 0::Int)
#202 := (or #117 #110)
#203 := (not #202)
#106 := (<= #15 0::Int)
#200 := (or #106 #110)
#201 := (not #200)
#206 := (or #201 #203)
#245 := (if #206 #241 #244)
#238 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #15 0::Int)
#22 := (or #20 #21)
#246 := (if #22 #238 #245)
#743 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #742) #246)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#746 := (iff #249 #743)
#744 := (iff #246 #246)
#745 := [refl]: #744
#747 := [quant-intro #745]: #746
#209 := (if #206 #29 #91)
#212 := (if #22 0::Int #209)
#215 := (= #18 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#250 := (iff #218 #249)
#247 := (iff #215 #246)
#248 := [rewrite]: #247
#251 := [quant-intro #248]: #250
#111 := (not #110)
#118 := (not #117)
#121 := (and #118 #111)
#107 := (not #106)
#114 := (and #107 #111)
#124 := (or #114 #121)
#127 := (if #124 #29 #91)
#130 := (if #22 0::Int #127)
#133 := (= #18 #130)
#136 := (forall (vars (?v0 Int) (?v1 Int)) #133)
#219 := (iff #136 #218)
#216 := (iff #133 #215)
#213 := (= #130 #212)
#210 := (= #127 #209)
#207 := (iff #124 #206)
#204 := (iff #121 #203)
#205 := [rewrite]: #204
#194 := (iff #114 #201)
#195 := [rewrite]: #194
#208 := [monotonicity #195 #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#198 := (~ #136 #136)
#196 := (~ #133 #133)
#197 := [refl]: #196
#199 := [nnf-pos #197]: #198
#31 := (- #17)
#30 := (- #15)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (if #28 #29 #32)
#34 := (if #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#139 := (iff #36 #136)
#94 := (if #28 #29 #91)
#97 := (if #22 0::Int #94)
#100 := (= #18 #97)
#103 := (forall (vars (?v0 Int) (?v1 Int)) #100)
#137 := (iff #103 #136)
#134 := (iff #100 #133)
#131 := (= #97 #130)
#128 := (= #94 #127)
#125 := (iff #28 #124)
#122 := (iff #27 #121)
#112 := (iff #24 #111)
#113 := [rewrite]: #112
#119 := (iff #26 #118)
#120 := [rewrite]: #119
#123 := [monotonicity #120 #113]: #122
#115 := (iff #25 #114)
#108 := (iff #23 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#126 := [monotonicity #116 #123]: #125
#129 := [monotonicity #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [quant-intro #135]: #137
#104 := (iff #36 #103)
#101 := (iff #35 #100)
#98 := (= #34 #97)
#95 := (= #33 #94)
#92 := (= #32 #91)
#89 := (= #31 #88)
#90 := [rewrite]: #89
#86 := (= #30 #84)
#87 := [rewrite]: #86
#93 := [monotonicity #87 #90]: #92
#96 := [monotonicity #93]: #95
#99 := [monotonicity #96]: #98
#102 := [monotonicity #99]: #101
#105 := [quant-intro #102]: #104
#140 := [trans #105 #138]: #139
#83 := [asserted]: #36
#141 := [mp #83 #140]: #136
#190 := [mp~ #141 #199]: #136
#221 := [mp #190 #220]: #218
#252 := [mp #221 #251]: #249
#748 := [mp #252 #747]: #743
#11 := 3::Int
#71 := (f4 f5 -1::Int)
#74 := (f3 #71 3::Int)
#77 := (= #74 -1::Int)
#80 := (not #77)
#8 := 1::Int
#9 := (- 1::Int)
#10 := (f4 f5 #9)
#12 := (f3 #10 3::Int)
#13 := (= #12 #9)
#14 := (not #13)
#81 := (iff #14 #80)
#78 := (iff #13 #77)
#69 := (= #9 -1::Int)
#70 := [rewrite]: #69
#75 := (= #12 #74)
#72 := (= #10 #71)
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76 #70]: #78
#82 := [monotonicity #79]: #81
#67 := [asserted]: #14
#85 := [mp #67 #82]: #80
#668 := (not #743)
#669 := (or #668 #77)
#405 := (* -1::Int 3::Int)
#404 := (* -1::Int -1::Int)
#737 := (div #404 #405)
#738 := (* -1::Int #737)
#739 := (+ #74 #738)
#740 := (= #739 0::Int)
#736 := (div -1::Int 3::Int)
#393 := (* -1::Int #736)
#523 := (+ #74 #393)
#730 := (= #523 0::Int)
#417 := (<= 3::Int 0::Int)
#416 := (>= -1::Int 0::Int)
#420 := (or #416 #417)
#399 := (not #420)
#406 := (<= -1::Int 0::Int)
#418 := (or #406 #417)
#419 := (not #418)
#734 := (or #419 #399)
#735 := (if #734 #730 #740)
#415 := (= #74 0::Int)
#413 := (= 3::Int 0::Int)
#329 := (= -1::Int 0::Int)
#414 := (or #329 #413)
#741 := (if #414 #415 #735)
#665 := (or #668 #741)
#659 := (iff #665 #669)
#661 := (iff #669 #669)
#662 := [rewrite]: #661
#657 := (iff #741 #77)
#677 := (if false #415 #77)
#658 := (iff #677 #77)
#655 := [rewrite]: #658
#664 := (iff #741 #677)
#676 := (iff #735 #77)
#1 := true
#579 := (if true #77 #415)
#582 := (iff #579 #77)
#583 := [rewrite]: #582
#580 := (iff #735 #579)
#578 := (iff #740 #415)
#575 := (= #739 #74)
#576 := (+ #74 0::Int)
#675 := (= #576 #74)
#560 := [rewrite]: #675
#671 := (= #739 #576)
#526 := (= #738 0::Int)
#680 := (* -1::Int 0::Int)
#566 := (= #680 0::Int)
#567 := [rewrite]: #566
#683 := (= #738 #680)
#681 := (= #737 0::Int)
#692 := -3::Int
#522 := (div 1::Int -3::Int)
#678 := (= #522 0::Int)
#679 := [rewrite]: #678
#524 := (= #737 #522)
#686 := (= #405 -3::Int)
#693 := [rewrite]: #686
#697 := (= #404 1::Int)
#698 := [rewrite]: #697
#525 := [monotonicity #698 #693]: #524
#682 := [trans #525 #679]: #681
#565 := [monotonicity #682]: #683
#674 := [trans #565 #567]: #526
#672 := [monotonicity #674]: #671
#577 := [trans #672 #560]: #575
#571 := [monotonicity #577]: #578
#685 := (iff #730 #77)
#696 := (+ 1::Int #74)
#687 := (= #696 0::Int)
#690 := (iff #687 #77)
#684 := [rewrite]: #690
#688 := (iff #730 #687)
#544 := (= #523 #696)
#695 := (+ #74 1::Int)
#702 := (= #695 #696)
#543 := [rewrite]: #702
#700 := (= #523 #695)
#699 := (= #393 1::Int)
#704 := (= #393 #404)
#703 := (= #736 -1::Int)
#707 := [rewrite]: #703
#708 := [monotonicity #707]: #704
#694 := [trans #708 #698]: #699
#701 := [monotonicity #694]: #700
#545 := [trans #701 #543]: #544
#689 := [monotonicity #545]: #688
#691 := [trans #689 #684]: #685
#706 := (iff #734 true)
#424 := (or false true)
#427 := (iff #424 true)
#705 := [rewrite]: #427
#425 := (iff #734 #424)
#710 := (iff #399 true)
#712 := (not false)
#709 := (iff #712 true)
#713 := [rewrite]: #709
#434 := (iff #399 #712)
#335 := (iff #420 false)
#392 := (or false false)
#717 := (iff #392 false)
#380 := [rewrite]: #717
#440 := (iff #420 #392)
#720 := (iff #417 false)
#721 := [rewrite]: #720
#438 := (iff #416 false)
#439 := [rewrite]: #438
#441 := [monotonicity #439 #721]: #440
#711 := [trans #441 #380]: #335
#435 := [monotonicity #711]: #434
#714 := [trans #435 #713]: #710
#715 := (iff #419 false)
#367 := (not true)
#726 := (iff #367 false)
#729 := [rewrite]: #726
#368 := (iff #419 #367)
#725 := (iff #418 true)
#722 := (or true false)
#724 := (iff #722 true)
#362 := [rewrite]: #724
#723 := (iff #418 #722)
#383 := (iff #406 true)
#719 := [rewrite]: #383
#718 := [monotonicity #719 #721]: #723
#727 := [trans #718 #362]: #725
#728 := [monotonicity #727]: #368
#716 := [trans #728 #729]: #715
#426 := [monotonicity #716 #714]: #425
#421 := [trans #426 #705]: #706
#581 := [monotonicity #421 #691 #571]: #580
#673 := [trans #581 #583]: #676
#381 := (iff #414 false)
#733 := (iff #414 #392)
#396 := (iff #413 false)
#732 := [rewrite]: #396
#731 := (iff #329 false)
#391 := [rewrite]: #731
#376 := [monotonicity #391 #732]: #733
#382 := [trans #376 #380]: #381
#666 := [monotonicity #382 #673]: #664
#667 := [trans #666 #655]: #657
#660 := [monotonicity #667]: #659
#656 := [trans #660 #662]: #659
#670 := [quant-inst #68 #11]: #665
#663 := [mp #670 #656]: #669
[unit-resolution #663 #85 #748]: false
unsat
71da820ba222aeb0476106e772b16e56642782f7 311 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#746 := (pattern #19)
#20 := 0::Int
#78 := -1::Int
#92 := (* -1::Int #18)
#88 := (* -1::Int #16)
#95 := (div #88 #92)
#246 := (* -1::Int #95)
#247 := (+ #19 #246)
#248 := (= #247 0::Int)
#30 := (div #16 #18)
#243 := (* -1::Int #30)
#244 := (+ #19 #243)
#245 := (= #244 0::Int)
#114 := (<= #18 0::Int)
#121 := (>= #16 0::Int)
#206 := (or #121 #114)
#207 := (not #206)
#110 := (<= #16 0::Int)
#204 := (or #110 #114)
#205 := (not #204)
#210 := (or #205 #207)
#249 := (if #210 #245 #248)
#242 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#250 := (if #23 #242 #249)
#747 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #746) #250)
#253 := (forall (vars (?v0 Int) (?v1 Int)) #250)
#750 := (iff #253 #747)
#748 := (iff #250 #250)
#749 := [refl]: #748
#751 := [quant-intro #749]: #750
#213 := (if #210 #30 #95)
#216 := (if #23 0::Int #213)
#219 := (= #19 #216)
#222 := (forall (vars (?v0 Int) (?v1 Int)) #219)
#254 := (iff #222 #253)
#251 := (iff #219 #250)
#252 := [rewrite]: #251
#255 := [quant-intro #252]: #254
#115 := (not #114)
#122 := (not #121)
#125 := (and #122 #115)
#111 := (not #110)
#118 := (and #111 #115)
#128 := (or #118 #125)
#131 := (if #128 #30 #95)
#134 := (if #23 0::Int #131)
#137 := (= #19 #134)
#140 := (forall (vars (?v0 Int) (?v1 Int)) #137)
#223 := (iff #140 #222)
#220 := (iff #137 #219)
#217 := (= #134 #216)
#214 := (= #131 #213)
#211 := (iff #128 #210)
#208 := (iff #125 #207)
#209 := [rewrite]: #208
#198 := (iff #118 #205)
#199 := [rewrite]: #198
#212 := [monotonicity #199 #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [monotonicity #218]: #220
#224 := [quant-intro #221]: #223
#202 := (~ #140 #140)
#200 := (~ #137 #137)
#201 := [refl]: #200
#203 := [nnf-pos #201]: #202
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#143 := (iff #37 #140)
#98 := (if #29 #30 #95)
#101 := (if #23 0::Int #98)
#104 := (= #19 #101)
#107 := (forall (vars (?v0 Int) (?v1 Int)) #104)
#141 := (iff #107 #140)
#138 := (iff #104 #137)
#135 := (= #101 #134)
#132 := (= #98 #131)
#129 := (iff #29 #128)
#126 := (iff #28 #125)
#116 := (iff #25 #115)
#117 := [rewrite]: #116
#123 := (iff #27 #122)
#124 := [rewrite]: #123
#127 := [monotonicity #124 #117]: #126
#119 := (iff #26 #118)
#112 := (iff #24 #111)
#113 := [rewrite]: #112
#120 := [monotonicity #113 #117]: #119
#130 := [monotonicity #120 #127]: #129
#133 := [monotonicity #130]: #132
#136 := [monotonicity #133]: #135
#139 := [monotonicity #136]: #138
#142 := [quant-intro #139]: #141
#108 := (iff #37 #107)
#105 := (iff #36 #104)
#102 := (= #35 #101)
#99 := (= #34 #98)
#96 := (= #33 #95)
#93 := (= #32 #92)
#94 := [rewrite]: #93
#90 := (= #31 #88)
#91 := [rewrite]: #90
#97 := [monotonicity #91 #94]: #96
#100 := [monotonicity #97]: #99
#103 := [monotonicity #100]: #102
#106 := [monotonicity #103]: #105
#109 := [quant-intro #106]: #108
#144 := [trans #109 #142]: #143
#87 := [asserted]: #37
#145 := [mp #87 #144]: #140
#194 := [mp~ #145 #203]: #140
#225 := [mp #194 #224]: #222
#256 := [mp #225 #255]: #253
#752 := [mp #256 #751]: #747
#8 := 3::Int
#69 := -3::Int
#72 := (f4 f5 -3::Int)
#75 := (f3 #72 3::Int)
#81 := (= #75 -1::Int)
#84 := (not #81)
#12 := 1::Int
#13 := (- 1::Int)
#9 := (- 3::Int)
#10 := (f4 f5 #9)
#11 := (f3 #10 3::Int)
#14 := (= #11 #13)
#15 := (not #14)
#85 := (iff #15 #84)
#82 := (iff #14 #81)
#79 := (= #13 -1::Int)
#80 := [rewrite]: #79
#76 := (= #11 #75)
#73 := (= #10 #72)
#70 := (= #9 -3::Int)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#83 := [monotonicity #77 #80]: #82
#86 := [monotonicity #83]: #85
#68 := [asserted]: #15
#89 := [mp #68 #86]: #84
#661 := (not #747)
#671 := (or #661 #81)
#409 := (* -1::Int 3::Int)
#408 := (* -1::Int -3::Int)
#741 := (div #408 #409)
#742 := (* -1::Int #741)
#743 := (+ #75 #742)
#744 := (= #743 0::Int)
#740 := (div -3::Int 3::Int)
#397 := (* -1::Int #740)
#527 := (+ #75 #397)
#734 := (= #527 0::Int)
#421 := (<= 3::Int 0::Int)
#420 := (>= -3::Int 0::Int)
#424 := (or #420 #421)
#403 := (not #424)
#410 := (<= -3::Int 0::Int)
#422 := (or #410 #421)
#423 := (not #422)
#738 := (or #423 #403)
#739 := (if #738 #734 #744)
#419 := (= #75 0::Int)
#417 := (= 3::Int 0::Int)
#333 := (= -3::Int 0::Int)
#418 := (or #333 #417)
#745 := (if #418 #419 #739)
#672 := (or #661 #745)
#669 := (iff #672 #671)
#663 := (iff #671 #671)
#664 := [rewrite]: #663
#662 := (iff #745 #81)
#680 := (if false #419 #81)
#668 := (iff #680 #81)
#670 := [rewrite]: #668
#677 := (iff #745 #680)
#586 := (iff #739 #81)
#1 := true
#582 := (if true #81 #81)
#584 := (iff #582 #81)
#585 := [rewrite]: #584
#575 := (iff #739 #582)
#579 := (iff #744 #81)
#706 := (+ 1::Int #75)
#692 := (= #706 0::Int)
#688 := (iff #692 #81)
#689 := [rewrite]: #688
#679 := (iff #744 #692)
#675 := (= #743 #706)
#704 := (+ #75 1::Int)
#547 := (= #704 #706)
#548 := [rewrite]: #547
#678 := (= #743 #704)
#571 := (= #742 1::Int)
#708 := (* -1::Int -1::Int)
#702 := (= #708 1::Int)
#703 := [rewrite]: #702
#569 := (= #742 #708)
#684 := (= #741 -1::Int)
#529 := (div 3::Int -3::Int)
#685 := (= #529 -1::Int)
#686 := [rewrite]: #685
#682 := (= #741 #529)
#526 := (= #409 -3::Int)
#528 := [rewrite]: #526
#690 := (= #408 3::Int)
#697 := [rewrite]: #690
#683 := [monotonicity #697 #528]: #682
#687 := [trans #683 #686]: #684
#570 := [monotonicity #687]: #569
#530 := [trans #570 #703]: #571
#580 := [monotonicity #530]: #678
#676 := [trans #580 #548]: #675
#564 := [monotonicity #676]: #679
#581 := [trans #564 #689]: #579
#695 := (iff #734 #81)
#693 := (iff #734 #692)
#549 := (= #527 #706)
#705 := (= #527 #704)
#698 := (= #397 1::Int)
#712 := (= #397 #708)
#707 := (= #740 -1::Int)
#711 := [rewrite]: #707
#701 := [monotonicity #711]: #712
#699 := [trans #701 #703]: #698
#700 := [monotonicity #699]: #705
#691 := [trans #700 #548]: #549
#694 := [monotonicity #691]: #693
#696 := [trans #694 #689]: #695
#710 := (iff #738 true)
#428 := (or false true)
#431 := (iff #428 true)
#709 := [rewrite]: #431
#429 := (iff #738 #428)
#714 := (iff #403 true)
#716 := (not false)
#713 := (iff #716 true)
#717 := [rewrite]: #713
#438 := (iff #403 #716)
#339 := (iff #424 false)
#396 := (or false false)
#721 := (iff #396 false)
#384 := [rewrite]: #721
#444 := (iff #424 #396)
#724 := (iff #421 false)
#725 := [rewrite]: #724
#442 := (iff #420 false)
#443 := [rewrite]: #442
#445 := [monotonicity #443 #725]: #444
#715 := [trans #445 #384]: #339
#439 := [monotonicity #715]: #438
#718 := [trans #439 #717]: #714
#719 := (iff #423 false)
#371 := (not true)
#730 := (iff #371 false)
#733 := [rewrite]: #730
#372 := (iff #423 #371)
#729 := (iff #422 true)
#726 := (or true false)
#728 := (iff #726 true)
#366 := [rewrite]: #728
#727 := (iff #422 #726)
#387 := (iff #410 true)
#723 := [rewrite]: #387
#722 := [monotonicity #723 #725]: #727
#731 := [trans #722 #366]: #729
#732 := [monotonicity #731]: #372
#720 := [trans #732 #733]: #719
#430 := [monotonicity #720 #718]: #429
#425 := [trans #430 #709]: #710
#583 := [monotonicity #425 #696 #581]: #575
#587 := [trans #583 #585]: #586
#385 := (iff #418 false)
#737 := (iff #418 #396)
#400 := (iff #417 false)
#736 := [rewrite]: #400
#735 := (iff #333 false)
#395 := [rewrite]: #735
#380 := [monotonicity #395 #736]: #737
#386 := [trans #380 #384]: #385
#681 := [monotonicity #386 #587]: #677
#659 := [trans #681 #670]: #662
#674 := [monotonicity #659]: #669
#665 := [trans #674 #664]: #669
#673 := [quant-inst #69 #8]: #672
#666 := [mp #673 #665]: #671
[unit-resolution #666 #89 #752]: false
unsat
7926b7bb56c2a95b0f37b98542d8e6b331cd48e9 326 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#747 := (pattern #20)
#21 := 0::Int
#89 := -1::Int
#94 := (* -1::Int #19)
#91 := (* -1::Int #17)
#97 := (div #91 #94)
#248 := (* -1::Int #97)
#249 := (+ #20 #248)
#250 := (= #249 0::Int)
#31 := (div #17 #19)
#245 := (* -1::Int #31)
#246 := (+ #20 #245)
#247 := (= #246 0::Int)
#116 := (<= #19 0::Int)
#123 := (>= #17 0::Int)
#208 := (or #123 #116)
#209 := (not #208)
#112 := (<= #17 0::Int)
#206 := (or #112 #116)
#207 := (not #206)
#212 := (or #207 #209)
#251 := (if #212 #247 #250)
#244 := (= #20 0::Int)
#23 := (= #19 0::Int)
#22 := (= #17 0::Int)
#24 := (or #22 #23)
#252 := (if #24 #244 #251)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #252)
#255 := (forall (vars (?v0 Int) (?v1 Int)) #252)
#751 := (iff #255 #748)
#749 := (iff #252 #252)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#215 := (if #212 #31 #97)
#218 := (if #24 0::Int #215)
#221 := (= #20 #218)
#224 := (forall (vars (?v0 Int) (?v1 Int)) #221)
#256 := (iff #224 #255)
#253 := (iff #221 #252)
#254 := [rewrite]: #253
#257 := [quant-intro #254]: #256
#117 := (not #116)
#124 := (not #123)
#127 := (and #124 #117)
#113 := (not #112)
#120 := (and #113 #117)
#130 := (or #120 #127)
#133 := (if #130 #31 #97)
#136 := (if #24 0::Int #133)
#139 := (= #20 #136)
#142 := (forall (vars (?v0 Int) (?v1 Int)) #139)
#225 := (iff #142 #224)
#222 := (iff #139 #221)
#219 := (= #136 #218)
#216 := (= #133 #215)
#213 := (iff #130 #212)
#210 := (iff #127 #209)
#211 := [rewrite]: #210
#200 := (iff #120 #207)
#201 := [rewrite]: #200
#214 := [monotonicity #201 #211]: #213
#217 := [monotonicity #214]: #216
#220 := [monotonicity #217]: #219
#223 := [monotonicity #220]: #222
#226 := [quant-intro #223]: #225
#204 := (~ #142 #142)
#202 := (~ #139 #139)
#203 := [refl]: #202
#205 := [nnf-pos #203]: #204
#33 := (- #19)
#32 := (- #17)
#34 := (div #32 #33)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (if #30 #31 #34)
#36 := (if #24 0::Int #35)
#37 := (= #20 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#145 := (iff #38 #142)
#100 := (if #30 #31 #97)
#103 := (if #24 0::Int #100)
#106 := (= #20 #103)
#109 := (forall (vars (?v0 Int) (?v1 Int)) #106)
#143 := (iff #109 #142)
#140 := (iff #106 #139)
#137 := (= #103 #136)
#134 := (= #100 #133)
#131 := (iff #30 #130)
#128 := (iff #29 #127)
#118 := (iff #26 #117)
#119 := [rewrite]: #118
#125 := (iff #28 #124)
#126 := [rewrite]: #125
#129 := [monotonicity #126 #119]: #128
#121 := (iff #27 #120)
#114 := (iff #25 #113)
#115 := [rewrite]: #114
#122 := [monotonicity #115 #119]: #121
#132 := [monotonicity #122 #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#144 := [quant-intro #141]: #143
#110 := (iff #38 #109)
#107 := (iff #37 #106)
#104 := (= #36 #103)
#101 := (= #35 #100)
#98 := (= #34 #97)
#95 := (= #33 #94)
#96 := [rewrite]: #95
#92 := (= #32 #91)
#93 := [rewrite]: #92
#99 := [monotonicity #93 #96]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#108 := [monotonicity #105]: #107
#111 := [quant-intro #108]: #110
#146 := [trans #111 #144]: #145
#88 := [asserted]: #38
#147 := [mp #88 #146]: #142
#196 := [mp~ #147 #205]: #142
#227 := [mp #196 #226]: #224
#258 := [mp #227 #257]: #255
#753 := [mp #258 #752]: #748
#79 := -2::Int
#11 := 3::Int
#70 := -5::Int
#73 := (f4 f5 -5::Int)
#76 := (f3 #73 3::Int)
#82 := (= #76 -2::Int)
#85 := (not #82)
#13 := 2::Int
#14 := (- 2::Int)
#8 := 5::Int
#9 := (- 5::Int)
#10 := (f4 f5 #9)
#12 := (f3 #10 3::Int)
#15 := (= #12 #14)
#16 := (not #15)
#86 := (iff #16 #85)
#83 := (iff #15 #82)
#80 := (= #14 -2::Int)
#81 := [rewrite]: #80
#77 := (= #12 #76)
#74 := (= #10 #73)
#71 := (= #9 -5::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#84 := [monotonicity #78 #81]: #83
#87 := [monotonicity #84]: #86
#69 := [asserted]: #16
#90 := [mp #69 #87]: #85
#652 := (not #748)
#653 := (or #652 #82)
#410 := (* -1::Int 3::Int)
#409 := (* -1::Int -5::Int)
#742 := (div #409 #410)
#743 := (* -1::Int #742)
#744 := (+ #76 #743)
#745 := (= #744 0::Int)
#741 := (div -5::Int 3::Int)
#398 := (* -1::Int #741)
#528 := (+ #76 #398)
#735 := (= #528 0::Int)
#422 := (<= 3::Int 0::Int)
#421 := (>= -5::Int 0::Int)
#425 := (or #421 #422)
#404 := (not #425)
#411 := (<= -5::Int 0::Int)
#423 := (or #411 #422)
#424 := (not #423)
#739 := (or #424 #404)
#740 := (if #739 #735 #745)
#420 := (= #76 0::Int)
#418 := (= 3::Int 0::Int)
#334 := (= -5::Int 0::Int)
#419 := (or #334 #418)
#746 := (if #419 #420 #740)
#655 := (or #652 #746)
#657 := (iff #655 #653)
#654 := (iff #653 #653)
#659 := [rewrite]: #654
#661 := (iff #746 #82)
#675 := (if false #420 #82)
#666 := (iff #675 #82)
#667 := [rewrite]: #666
#664 := (iff #746 #675)
#674 := (iff #740 #82)
#681 := (= #76 -1::Int)
#1 := true
#663 := (if true #82 #681)
#672 := (iff #663 #82)
#673 := [rewrite]: #672
#660 := (iff #740 #663)
#669 := (iff #745 #681)
#287 := 1::Int
#582 := (+ 1::Int #76)
#586 := (= #582 0::Int)
#678 := (iff #586 #681)
#682 := [rewrite]: #678
#587 := (iff #745 #586)
#584 := (= #744 #582)
#680 := (+ #76 1::Int)
#583 := (= #680 #582)
#576 := [rewrite]: #583
#565 := (= #744 #680)
#676 := (= #743 1::Int)
#571 := (* -1::Int -1::Int)
#679 := (= #571 1::Int)
#581 := [rewrite]: #679
#572 := (= #743 #571)
#688 := (= #742 -1::Int)
#527 := -3::Int
#683 := (div 5::Int -3::Int)
#687 := (= #683 -1::Int)
#685 := [rewrite]: #687
#684 := (= #742 #683)
#529 := (= #410 -3::Int)
#530 := [rewrite]: #529
#691 := (= #409 5::Int)
#698 := [rewrite]: #691
#686 := [monotonicity #698 #530]: #684
#570 := [trans #686 #685]: #688
#531 := [monotonicity #570]: #572
#677 := [trans #531 #581]: #676
#580 := [monotonicity #677]: #565
#585 := [trans #580 #576]: #584
#588 := [monotonicity #585]: #587
#671 := [trans #588 #682]: #669
#696 := (iff #735 #82)
#707 := (+ 2::Int #76)
#693 := (= #707 0::Int)
#689 := (iff #693 #82)
#690 := [rewrite]: #689
#694 := (iff #735 #693)
#550 := (= #528 #707)
#705 := (+ #76 2::Int)
#548 := (= #705 #707)
#549 := [rewrite]: #548
#706 := (= #528 #705)
#699 := (= #398 2::Int)
#709 := (* -1::Int -2::Int)
#703 := (= #709 2::Int)
#704 := [rewrite]: #703
#713 := (= #398 #709)
#708 := (= #741 -2::Int)
#712 := [rewrite]: #708
#702 := [monotonicity #712]: #713
#700 := [trans #702 #704]: #699
#701 := [monotonicity #700]: #706
#692 := [trans #701 #549]: #550
#695 := [monotonicity #692]: #694
#697 := [trans #695 #690]: #696
#711 := (iff #739 true)
#429 := (or false true)
#432 := (iff #429 true)
#710 := [rewrite]: #432
#430 := (iff #739 #429)
#715 := (iff #404 true)
#717 := (not false)
#714 := (iff #717 true)
#718 := [rewrite]: #714
#439 := (iff #404 #717)
#340 := (iff #425 false)
#397 := (or false false)
#722 := (iff #397 false)
#385 := [rewrite]: #722
#445 := (iff #425 #397)
#725 := (iff #422 false)
#726 := [rewrite]: #725
#443 := (iff #421 false)
#444 := [rewrite]: #443
#446 := [monotonicity #444 #726]: #445
#716 := [trans #446 #385]: #340
#440 := [monotonicity #716]: #439
#719 := [trans #440 #718]: #715
#720 := (iff #424 false)
#372 := (not true)
#731 := (iff #372 false)
#734 := [rewrite]: #731
#373 := (iff #424 #372)
#730 := (iff #423 true)
#727 := (or true false)
#729 := (iff #727 true)
#367 := [rewrite]: #729
#728 := (iff #423 #727)
#388 := (iff #411 true)
#724 := [rewrite]: #388
#723 := [monotonicity #724 #726]: #728
#732 := [trans #723 #367]: #730
#733 := [monotonicity #732]: #373
#721 := [trans #733 #734]: #720
#431 := [monotonicity #721 #719]: #430
#426 := [trans #431 #710]: #711
#662 := [monotonicity #426 #697 #671]: #660
#670 := [trans #662 #673]: #674
#386 := (iff #419 false)
#738 := (iff #419 #397)
#401 := (iff #418 false)
#737 := [rewrite]: #401
#736 := (iff #334 false)
#396 := [rewrite]: #736
#381 := [monotonicity #396 #737]: #738
#387 := [trans #381 #385]: #386
#665 := [monotonicity #387 #670]: #664
#668 := [trans #665 #667]: #661
#658 := [monotonicity #668]: #657
#645 := [trans #658 #659]: #657
#656 := [quant-inst #70 #11]: #655
#646 := [mp #656 #645]: #653
[unit-resolution #646 #90 #753]: false
unsat
8fedb44b144cd0bde283f4741a534807a56eb96d 312 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#746 := (pattern #20)
#14 := 0::Int
#69 := -1::Int
#92 := (* -1::Int #19)
#88 := (* -1::Int #17)
#95 := (div #88 #92)
#246 := (* -1::Int #95)
#247 := (+ #20 #246)
#248 := (= #247 0::Int)
#30 := (div #17 #19)
#243 := (* -1::Int #30)
#244 := (+ #20 #243)
#245 := (= #244 0::Int)
#114 := (<= #19 0::Int)
#121 := (>= #17 0::Int)
#206 := (or #121 #114)
#207 := (not #206)
#110 := (<= #17 0::Int)
#204 := (or #110 #114)
#205 := (not #204)
#210 := (or #205 #207)
#249 := (if #210 #245 #248)
#242 := (= #20 0::Int)
#22 := (= #19 0::Int)
#21 := (= #17 0::Int)
#23 := (or #21 #22)
#250 := (if #23 #242 #249)
#747 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #746) #250)
#253 := (forall (vars (?v0 Int) (?v1 Int)) #250)
#750 := (iff #253 #747)
#748 := (iff #250 #250)
#749 := [refl]: #748
#751 := [quant-intro #749]: #750
#213 := (if #210 #30 #95)
#216 := (if #23 0::Int #213)
#219 := (= #20 #216)
#222 := (forall (vars (?v0 Int) (?v1 Int)) #219)
#254 := (iff #222 #253)
#251 := (iff #219 #250)
#252 := [rewrite]: #251
#255 := [quant-intro #252]: #254
#115 := (not #114)
#122 := (not #121)
#125 := (and #122 #115)
#111 := (not #110)
#118 := (and #111 #115)
#128 := (or #118 #125)
#131 := (if #128 #30 #95)
#134 := (if #23 0::Int #131)
#137 := (= #20 #134)
#140 := (forall (vars (?v0 Int) (?v1 Int)) #137)
#223 := (iff #140 #222)
#220 := (iff #137 #219)
#217 := (= #134 #216)
#214 := (= #131 #213)
#211 := (iff #128 #210)
#208 := (iff #125 #207)
#209 := [rewrite]: #208
#198 := (iff #118 #205)
#199 := [rewrite]: #198
#212 := [monotonicity #199 #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [monotonicity #218]: #220
#224 := [quant-intro #221]: #223
#202 := (~ #140 #140)
#200 := (~ #137 #137)
#201 := [refl]: #200
#203 := [nnf-pos #201]: #202
#32 := (- #19)
#31 := (- #17)
#33 := (div #31 #32)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #20 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#143 := (iff #37 #140)
#98 := (if #29 #30 #95)
#101 := (if #23 0::Int #98)
#104 := (= #20 #101)
#107 := (forall (vars (?v0 Int) (?v1 Int)) #104)
#141 := (iff #107 #140)
#138 := (iff #104 #137)
#135 := (= #101 #134)
#132 := (= #98 #131)
#129 := (iff #29 #128)
#126 := (iff #28 #125)
#116 := (iff #25 #115)
#117 := [rewrite]: #116
#123 := (iff #27 #122)
#124 := [rewrite]: #123
#127 := [monotonicity #124 #117]: #126
#119 := (iff #26 #118)
#112 := (iff #24 #111)
#113 := [rewrite]: #112
#120 := [monotonicity #113 #117]: #119
#130 := [monotonicity #120 #127]: #129
#133 := [monotonicity #130]: #132
#136 := [monotonicity #133]: #135
#139 := [monotonicity #136]: #138
#142 := [quant-intro #139]: #141
#108 := (iff #37 #107)
#105 := (iff #36 #104)
#102 := (= #35 #101)
#99 := (= #34 #98)
#96 := (= #33 #95)
#93 := (= #32 #92)
#94 := [rewrite]: #93
#90 := (= #31 #88)
#91 := [rewrite]: #90
#97 := [monotonicity #91 #94]: #96
#100 := [monotonicity #97]: #99
#103 := [monotonicity #100]: #102
#106 := [monotonicity #103]: #105
#109 := [quant-intro #106]: #108
#144 := [trans #109 #142]: #143
#87 := [asserted]: #37
#145 := [mp #87 #144]: #140
#194 := [mp~ #145 #203]: #140
#225 := [mp #194 #224]: #222
#256 := [mp #225 #255]: #253
#752 := [mp #256 #751]: #747
#75 := -3::Int
#72 := (f4 f5 -1::Int)
#78 := (f3 #72 -3::Int)
#81 := (= #78 0::Int)
#84 := (not #81)
#11 := 3::Int
#12 := (- 3::Int)
#8 := 1::Int
#9 := (- 1::Int)
#10 := (f4 f5 #9)
#13 := (f3 #10 #12)
#15 := (= #13 0::Int)
#16 := (not #15)
#85 := (iff #16 #84)
#82 := (iff #15 #81)
#79 := (= #13 #78)
#76 := (= #12 -3::Int)
#77 := [rewrite]: #76
#73 := (= #10 #72)
#70 := (= #9 -1::Int)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#68 := [asserted]: #16
#89 := [mp #68 #86]: #84
#671 := (not #747)
#672 := (or #671 #81)
#408 := (* -1::Int -3::Int)
#734 := (* -1::Int -1::Int)
#409 := (div #734 #408)
#741 := (* -1::Int #409)
#742 := (+ #78 #741)
#743 := (= #742 0::Int)
#738 := (div -1::Int -3::Int)
#740 := (* -1::Int #738)
#397 := (+ #78 #740)
#527 := (= #397 0::Int)
#410 := (<= -3::Int 0::Int)
#423 := (>= -1::Int 0::Int)
#420 := (or #423 #410)
#424 := (not #420)
#419 := (<= -1::Int 0::Int)
#421 := (or #419 #410)
#422 := (not #421)
#403 := (or #422 #424)
#744 := (if #403 #527 #743)
#417 := (= -3::Int 0::Int)
#333 := (= -1::Int 0::Int)
#418 := (or #333 #417)
#739 := (if #418 #81 #744)
#673 := (or #671 #739)
#674 := (iff #673 #672)
#664 := (iff #672 #672)
#665 := [rewrite]: #664
#659 := (iff #739 #81)
#677 := (if false #81 #81)
#670 := (iff #677 #81)
#662 := [rewrite]: #670
#681 := (iff #739 #677)
#587 := (iff #744 #81)
#691 := (= #78 1::Int)
#575 := (if false #691 #81)
#585 := (iff #575 #81)
#586 := [rewrite]: #585
#583 := (iff #744 #575)
#581 := (iff #743 #81)
#564 := (= #742 #78)
#678 := (+ #78 0::Int)
#676 := (= #678 #78)
#679 := [rewrite]: #676
#580 := (= #742 #678)
#571 := (= #741 0::Int)
#686 := (* -1::Int 0::Int)
#569 := (= #686 0::Int)
#570 := [rewrite]: #569
#684 := (= #741 #686)
#683 := (= #409 0::Int)
#697 := (div 1::Int 3::Int)
#529 := (= #697 0::Int)
#682 := [rewrite]: #529
#526 := (= #409 #697)
#696 := (= #408 3::Int)
#690 := [rewrite]: #696
#689 := (= #734 1::Int)
#695 := [rewrite]: #689
#528 := [monotonicity #695 #690]: #526
#685 := [trans #528 #682]: #683
#687 := [monotonicity #685]: #684
#530 := [trans #687 #570]: #571
#675 := [monotonicity #530]: #580
#579 := [trans #675 #679]: #564
#582 := [monotonicity #579]: #581
#694 := (iff #527 #691)
#699 := (+ -1::Int #78)
#547 := (= #699 0::Int)
#692 := (iff #547 #691)
#693 := [rewrite]: #692
#548 := (iff #527 #547)
#700 := (= #397 #699)
#702 := (+ #78 -1::Int)
#704 := (= #702 #699)
#705 := [rewrite]: #704
#703 := (= #397 #702)
#712 := (= #740 -1::Int)
#710 := (* -1::Int 1::Int)
#711 := (= #710 -1::Int)
#708 := [rewrite]: #711
#425 := (= #740 #710)
#431 := (= #738 1::Int)
#709 := [rewrite]: #431
#707 := [monotonicity #709]: #425
#701 := [trans #707 #708]: #712
#698 := [monotonicity #701]: #703
#706 := [trans #698 #705]: #700
#549 := [monotonicity #706]: #548
#688 := [trans #549 #693]: #694
#429 := (iff #403 false)
#736 := (or false false)
#380 := (iff #736 false)
#721 := [rewrite]: #380
#718 := (iff #403 #736)
#717 := (iff #424 false)
#1 := true
#731 := (not true)
#732 := (iff #731 false)
#730 := [rewrite]: #732
#439 := (iff #424 #731)
#716 := (iff #420 true)
#443 := (or false true)
#339 := (iff #443 true)
#715 := [rewrite]: #339
#444 := (iff #420 #443)
#723 := (iff #410 true)
#724 := [rewrite]: #723
#720 := (iff #423 false)
#442 := [rewrite]: #720
#445 := [monotonicity #442 #724]: #444
#438 := [trans #445 #715]: #716
#713 := [monotonicity #438]: #439
#714 := [trans #713 #730]: #717
#733 := (iff #422 false)
#371 := (iff #422 #731)
#366 := (iff #421 true)
#725 := (or true true)
#722 := (iff #725 true)
#728 := [rewrite]: #722
#726 := (iff #421 #725)
#386 := (iff #419 true)
#387 := [rewrite]: #386
#727 := [monotonicity #387 #724]: #726
#729 := [trans #727 #728]: #366
#372 := [monotonicity #729]: #371
#719 := [trans #372 #730]: #733
#428 := [monotonicity #719 #714]: #718
#430 := [trans #428 #721]: #429
#584 := [monotonicity #430 #688 #582]: #583
#680 := [trans #584 #586]: #587
#384 := (iff #418 false)
#396 := (iff #418 #736)
#395 := (iff #417 false)
#400 := [rewrite]: #395
#745 := (iff #333 false)
#735 := [rewrite]: #745
#737 := [monotonicity #735 #400]: #396
#385 := [trans #737 #721]: #384
#668 := [monotonicity #385 #680]: #681
#661 := [trans #668 #662]: #659
#663 := [monotonicity #661]: #674
#666 := [trans #663 #665]: #674
#669 := [quant-inst #69 #75]: #673
#660 := [mp #669 #666]: #672
[unit-resolution #660 #89 #752]: false
unsat
bb462ec316170c69257cf123bc5b6d6575fb0bf4 296 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#743 := (pattern #18)
#19 := 0::Int
#84 := -1::Int
#89 := (* -1::Int #17)
#86 := (* -1::Int #15)
#92 := (div #86 #89)
#243 := (* -1::Int #92)
#244 := (+ #18 #243)
#245 := (= #244 0::Int)
#29 := (div #15 #17)
#240 := (* -1::Int #29)
#241 := (+ #18 #240)
#242 := (= #241 0::Int)
#111 := (<= #17 0::Int)
#118 := (>= #15 0::Int)
#203 := (or #118 #111)
#204 := (not #203)
#107 := (<= #15 0::Int)
#201 := (or #107 #111)
#202 := (not #201)
#207 := (or #202 #204)
#246 := (if #207 #242 #245)
#239 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #15 0::Int)
#22 := (or #20 #21)
#247 := (if #22 #239 #246)
#744 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #743) #247)
#250 := (forall (vars (?v0 Int) (?v1 Int)) #247)
#747 := (iff #250 #744)
#745 := (iff #247 #247)
#746 := [refl]: #745
#748 := [quant-intro #746]: #747
#210 := (if #207 #29 #92)
#213 := (if #22 0::Int #210)
#216 := (= #18 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#251 := (iff #219 #250)
#248 := (iff #216 #247)
#249 := [rewrite]: #248
#252 := [quant-intro #249]: #251
#112 := (not #111)
#119 := (not #118)
#122 := (and #119 #112)
#108 := (not #107)
#115 := (and #108 #112)
#125 := (or #115 #122)
#128 := (if #125 #29 #92)
#131 := (if #22 0::Int #128)
#134 := (= #18 #131)
#137 := (forall (vars (?v0 Int) (?v1 Int)) #134)
#220 := (iff #137 #219)
#217 := (iff #134 #216)
#214 := (= #131 #213)
#211 := (= #128 #210)
#208 := (iff #125 #207)
#205 := (iff #122 #204)
#206 := [rewrite]: #205
#195 := (iff #115 #202)
#196 := [rewrite]: #195
#209 := [monotonicity #196 #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#199 := (~ #137 #137)
#197 := (~ #134 #134)
#198 := [refl]: #197
#200 := [nnf-pos #198]: #199
#31 := (- #17)
#30 := (- #15)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (if #28 #29 #32)
#34 := (if #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#140 := (iff #36 #137)
#95 := (if #28 #29 #92)
#98 := (if #22 0::Int #95)
#101 := (= #18 #98)
#104 := (forall (vars (?v0 Int) (?v1 Int)) #101)
#138 := (iff #104 #137)
#135 := (iff #101 #134)
#132 := (= #98 #131)
#129 := (= #95 #128)
#126 := (iff #28 #125)
#123 := (iff #27 #122)
#113 := (iff #24 #112)
#114 := [rewrite]: #113
#120 := (iff #26 #119)
#121 := [rewrite]: #120
#124 := [monotonicity #121 #114]: #123
#116 := (iff #25 #115)
#109 := (iff #23 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#127 := [monotonicity #117 #124]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#136 := [monotonicity #133]: #135
#139 := [quant-intro #136]: #138
#105 := (iff #36 #104)
#102 := (iff #35 #101)
#99 := (= #34 #98)
#96 := (= #33 #95)
#93 := (= #32 #92)
#90 := (= #31 #89)
#91 := [rewrite]: #90
#87 := (= #30 #86)
#88 := [rewrite]: #87
#94 := [monotonicity #88 #91]: #93
#97 := [monotonicity #94]: #96
#100 := [monotonicity #97]: #99
#103 := [monotonicity #100]: #102
#106 := [quant-intro #103]: #105
#141 := [trans #106 #139]: #140
#83 := [asserted]: #36
#142 := [mp #83 #141]: #137
#191 := [mp~ #142 #200]: #137
#222 := [mp #191 #221]: #219
#253 := [mp #222 #252]: #250
#749 := [mp #253 #748]: #744
#12 := 1::Int
#68 := -3::Int
#71 := (f4 f5 -3::Int)
#74 := (f3 #71 -3::Int)
#77 := (= #74 1::Int)
#80 := (not #77)
#8 := 3::Int
#9 := (- 3::Int)
#10 := (f4 f5 #9)
#11 := (f3 #10 #9)
#13 := (= #11 1::Int)
#14 := (not #13)
#81 := (iff #14 #80)
#78 := (iff #13 #77)
#75 := (= #11 #74)
#69 := (= #9 -3::Int)
#70 := [rewrite]: #69
#72 := (= #10 #71)
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73 #70]: #75
#79 := [monotonicity #76]: #78
#82 := [monotonicity #79]: #81
#67 := [asserted]: #14
#85 := [mp #67 #82]: #80
#580 := (not #744)
#581 := (or #580 #77)
#524 := (* -1::Int -3::Int)
#731 := (div #524 #524)
#405 := (* -1::Int #731)
#406 := (+ #74 #405)
#738 := (= #406 0::Int)
#400 := (div -3::Int -3::Int)
#735 := (* -1::Int #400)
#737 := (+ #74 #735)
#394 := (= #737 0::Int)
#416 := (<= -3::Int 0::Int)
#419 := (>= -3::Int 0::Int)
#420 := (or #419 #416)
#417 := (not #420)
#407 := (or #416 #416)
#418 := (not #407)
#421 := (or #418 #417)
#739 := (if #421 #394 #738)
#415 := (= #74 0::Int)
#330 := (= -3::Int 0::Int)
#414 := (or #330 #330)
#740 := (if #414 #415 #739)
#582 := (or #580 #740)
#584 := (iff #582 #581)
#674 := (iff #581 #581)
#678 := [rewrite]: #674
#579 := (iff #740 #77)
#673 := (if false #415 #77)
#576 := (iff #673 #77)
#578 := [rewrite]: #576
#676 := (iff #740 #673)
#577 := (iff #739 #77)
#566 := (if false #77 #77)
#527 := (iff #566 #77)
#675 := [rewrite]: #527
#567 := (iff #739 #566)
#681 := (iff #738 #77)
#705 := (+ -1::Int #74)
#695 := (= #705 0::Int)
#702 := (iff #695 #77)
#697 := [rewrite]: #702
#682 := (iff #738 #695)
#679 := (= #406 #705)
#422 := (+ #74 -1::Int)
#709 := (= #422 #705)
#698 := [rewrite]: #709
#525 := (= #406 #422)
#694 := (= #405 -1::Int)
#715 := (* -1::Int 1::Int)
#427 := (= #715 -1::Int)
#428 := [rewrite]: #427
#693 := (= #405 #715)
#686 := (= #731 1::Int)
#688 := (div 3::Int 3::Int)
#691 := (= #688 1::Int)
#685 := [rewrite]: #691
#689 := (= #731 #688)
#545 := (= #524 3::Int)
#546 := [rewrite]: #545
#690 := [monotonicity #546 #546]: #689
#692 := [trans #690 #685]: #686
#687 := [monotonicity #692]: #693
#523 := [trans #687 #428]: #694
#526 := [monotonicity #523]: #525
#680 := [trans #526 #698]: #679
#683 := [monotonicity #680]: #682
#684 := [trans #683 #697]: #681
#703 := (iff #394 #77)
#696 := (iff #394 #695)
#699 := (= #737 #705)
#704 := (= #737 #422)
#706 := (= #735 -1::Int)
#425 := (= #735 #715)
#714 := (= #400 1::Int)
#711 := [rewrite]: #714
#426 := [monotonicity #711]: #425
#707 := [trans #426 #428]: #706
#708 := [monotonicity #707]: #704
#700 := [trans #708 #698]: #699
#701 := [monotonicity #700]: #696
#544 := [trans #701 #697]: #703
#436 := (iff #421 false)
#742 := (or false false)
#397 := (iff #742 false)
#733 := [rewrite]: #397
#713 := (iff #421 #742)
#336 := (iff #417 false)
#1 := true
#723 := (not true)
#725 := (iff #723 false)
#363 := [rewrite]: #725
#441 := (iff #417 #723)
#439 := (iff #420 true)
#729 := (or false true)
#716 := (iff #729 true)
#717 := [rewrite]: #716
#727 := (iff #420 #729)
#377 := (iff #416 true)
#718 := [rewrite]: #377
#368 := (iff #419 false)
#369 := [rewrite]: #368
#730 := [monotonicity #369 #718]: #727
#440 := [trans #730 #717]: #439
#442 := [monotonicity #440]: #441
#712 := [trans #442 #363]: #336
#726 := (iff #418 false)
#724 := (iff #418 #723)
#721 := (iff #407 true)
#381 := (or true true)
#384 := (iff #381 true)
#720 := [rewrite]: #384
#382 := (iff #407 #381)
#383 := [monotonicity #718 #718]: #382
#722 := [trans #383 #720]: #721
#719 := [monotonicity #722]: #724
#728 := [trans #719 #363]: #726
#435 := [monotonicity #728 #712]: #713
#710 := [trans #435 #733]: #436
#568 := [monotonicity #710 #544 #684]: #567
#672 := [trans #568 #675]: #577
#393 := (iff #414 false)
#732 := (iff #414 #742)
#741 := (iff #330 false)
#736 := [rewrite]: #741
#392 := [monotonicity #736 #736]: #732
#734 := [trans #392 #733]: #393
#561 := [monotonicity #734 #672]: #676
#572 := [trans #561 #578]: #579
#677 := [monotonicity #572]: #584
#665 := [trans #677 #678]: #584
#583 := [quant-inst #68 #68]: #582
#667 := [mp #583 #665]: #581
[unit-resolution #667 #85 #749]: false
unsat
0b3a009851b606e94e7b0991d7f83ada2f7a2088 323 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#747 := (pattern #20)
#21 := 0::Int
#89 := -1::Int
#94 := (* -1::Int #19)
#91 := (* -1::Int #17)
#97 := (div #91 #94)
#248 := (* -1::Int #97)
#249 := (+ #20 #248)
#250 := (= #249 0::Int)
#31 := (div #17 #19)
#245 := (* -1::Int #31)
#246 := (+ #20 #245)
#247 := (= #246 0::Int)
#116 := (<= #19 0::Int)
#123 := (>= #17 0::Int)
#208 := (or #123 #116)
#209 := (not #208)
#112 := (<= #17 0::Int)
#206 := (or #112 #116)
#207 := (not #206)
#212 := (or #207 #209)
#251 := (if #212 #247 #250)
#244 := (= #20 0::Int)
#23 := (= #19 0::Int)
#22 := (= #17 0::Int)
#24 := (or #22 #23)
#252 := (if #24 #244 #251)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #252)
#255 := (forall (vars (?v0 Int) (?v1 Int)) #252)
#751 := (iff #255 #748)
#749 := (iff #252 #252)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#215 := (if #212 #31 #97)
#218 := (if #24 0::Int #215)
#221 := (= #20 #218)
#224 := (forall (vars (?v0 Int) (?v1 Int)) #221)
#256 := (iff #224 #255)
#253 := (iff #221 #252)
#254 := [rewrite]: #253
#257 := [quant-intro #254]: #256
#117 := (not #116)
#124 := (not #123)
#127 := (and #124 #117)
#113 := (not #112)
#120 := (and #113 #117)
#130 := (or #120 #127)
#133 := (if #130 #31 #97)
#136 := (if #24 0::Int #133)
#139 := (= #20 #136)
#142 := (forall (vars (?v0 Int) (?v1 Int)) #139)
#225 := (iff #142 #224)
#222 := (iff #139 #221)
#219 := (= #136 #218)
#216 := (= #133 #215)
#213 := (iff #130 #212)
#210 := (iff #127 #209)
#211 := [rewrite]: #210
#200 := (iff #120 #207)
#201 := [rewrite]: #200
#214 := [monotonicity #201 #211]: #213
#217 := [monotonicity #214]: #216
#220 := [monotonicity #217]: #219
#223 := [monotonicity #220]: #222
#226 := [quant-intro #223]: #225
#204 := (~ #142 #142)
#202 := (~ #139 #139)
#203 := [refl]: #202
#205 := [nnf-pos #203]: #204
#33 := (- #19)
#32 := (- #17)
#34 := (div #32 #33)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (if #30 #31 #34)
#36 := (if #24 0::Int #35)
#37 := (= #20 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#145 := (iff #38 #142)
#100 := (if #30 #31 #97)
#103 := (if #24 0::Int #100)
#106 := (= #20 #103)
#109 := (forall (vars (?v0 Int) (?v1 Int)) #106)
#143 := (iff #109 #142)
#140 := (iff #106 #139)
#137 := (= #103 #136)
#134 := (= #100 #133)
#131 := (iff #30 #130)
#128 := (iff #29 #127)
#118 := (iff #26 #117)
#119 := [rewrite]: #118
#125 := (iff #28 #124)
#126 := [rewrite]: #125
#129 := [monotonicity #126 #119]: #128
#121 := (iff #27 #120)
#114 := (iff #25 #113)
#115 := [rewrite]: #114
#122 := [monotonicity #115 #119]: #121
#132 := [monotonicity #122 #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#144 := [quant-intro #141]: #143
#110 := (iff #38 #109)
#107 := (iff #37 #106)
#104 := (= #36 #103)
#101 := (= #35 #100)
#98 := (= #34 #97)
#95 := (= #33 #94)
#96 := [rewrite]: #95
#92 := (= #32 #91)
#93 := [rewrite]: #92
#99 := [monotonicity #93 #96]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#108 := [monotonicity #105]: #107
#111 := [quant-intro #108]: #110
#146 := [trans #111 #144]: #145
#88 := [asserted]: #38
#147 := [mp #88 #146]: #142
#196 := [mp~ #147 #205]: #142
#227 := [mp #196 #226]: #224
#258 := [mp #227 #257]: #255
#753 := [mp #258 #752]: #748
#14 := 1::Int
#76 := -3::Int
#70 := -5::Int
#73 := (f4 f5 -5::Int)
#79 := (f3 #73 -3::Int)
#82 := (= #79 1::Int)
#85 := (not #82)
#11 := 3::Int
#12 := (- 3::Int)
#8 := 5::Int
#9 := (- 5::Int)
#10 := (f4 f5 #9)
#13 := (f3 #10 #12)
#15 := (= #13 1::Int)
#16 := (not #15)
#86 := (iff #16 #85)
#83 := (iff #15 #82)
#80 := (= #13 #79)
#77 := (= #12 -3::Int)
#78 := [rewrite]: #77
#74 := (= #10 #73)
#71 := (= #9 -5::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#69 := [asserted]: #16
#90 := [mp #69 #87]: #85
#667 := (not #748)
#661 := (or #667 #82)
#410 := (* -1::Int -3::Int)
#409 := (* -1::Int -5::Int)
#742 := (div #409 #410)
#743 := (* -1::Int #742)
#744 := (+ #79 #743)
#745 := (= #744 0::Int)
#741 := (div -5::Int -3::Int)
#398 := (* -1::Int #741)
#528 := (+ #79 #398)
#735 := (= #528 0::Int)
#422 := (<= -3::Int 0::Int)
#421 := (>= -5::Int 0::Int)
#425 := (or #421 #422)
#404 := (not #425)
#411 := (<= -5::Int 0::Int)
#423 := (or #411 #422)
#424 := (not #423)
#739 := (or #424 #404)
#740 := (if #739 #735 #745)
#420 := (= #79 0::Int)
#418 := (= -3::Int 0::Int)
#334 := (= -5::Int 0::Int)
#419 := (or #334 #418)
#746 := (if #419 #420 #740)
#668 := (or #667 #746)
#653 := (iff #668 #661)
#656 := (iff #661 #661)
#657 := [rewrite]: #656
#665 := (iff #746 #82)
#673 := (if false #420 #82)
#675 := (iff #673 #82)
#664 := [rewrite]: #675
#674 := (iff #746 #673)
#662 := (iff #740 #82)
#295 := 2::Int
#694 := (= #79 2::Int)
#682 := (if false #694 #82)
#663 := (iff #682 #82)
#660 := [rewrite]: #663
#669 := (iff #740 #682)
#681 := (iff #745 #82)
#565 := (+ -1::Int #79)
#584 := (= #565 0::Int)
#587 := (iff #584 #82)
#588 := [rewrite]: #587
#585 := (iff #745 #584)
#583 := (= #744 #565)
#676 := (+ #79 -1::Int)
#580 := (= #676 #565)
#582 := [rewrite]: #580
#677 := (= #744 #676)
#679 := (= #743 -1::Int)
#688 := (* -1::Int 1::Int)
#572 := (= #688 -1::Int)
#531 := [rewrite]: #572
#570 := (= #743 #688)
#687 := (= #742 1::Int)
#529 := (div 5::Int 3::Int)
#684 := (= #529 1::Int)
#686 := [rewrite]: #684
#530 := (= #742 #529)
#698 := (= #410 3::Int)
#527 := [rewrite]: #698
#697 := (= #409 5::Int)
#691 := [rewrite]: #697
#683 := [monotonicity #691 #527]: #530
#685 := [trans #683 #686]: #687
#571 := [monotonicity #685]: #570
#581 := [trans #571 #531]: #679
#680 := [monotonicity #581]: #677
#576 := [trans #680 #582]: #583
#586 := [monotonicity #576]: #585
#678 := [trans #586 #588]: #681
#690 := (iff #735 #694)
#709 := -2::Int
#706 := (+ -2::Int #79)
#550 := (= #706 0::Int)
#695 := (iff #550 #694)
#689 := [rewrite]: #695
#692 := (iff #735 #550)
#548 := (= #528 #706)
#699 := (+ #79 -2::Int)
#701 := (= #699 #706)
#707 := [rewrite]: #701
#700 := (= #528 #699)
#703 := (= #398 -2::Int)
#426 := (* -1::Int 2::Int)
#713 := (= #426 -2::Int)
#702 := [rewrite]: #713
#708 := (= #398 #426)
#710 := (= #741 2::Int)
#711 := [rewrite]: #710
#712 := [monotonicity #711]: #708
#704 := [trans #712 #702]: #703
#705 := [monotonicity #704]: #700
#549 := [trans #705 #707]: #548
#693 := [monotonicity #549]: #692
#696 := [trans #693 #689]: #690
#431 := (iff #739 false)
#397 := (or false false)
#722 := (iff #397 false)
#385 := [rewrite]: #722
#429 := (iff #739 #397)
#715 := (iff #404 false)
#1 := true
#372 := (not true)
#731 := (iff #372 false)
#734 := [rewrite]: #731
#714 := (iff #404 #372)
#439 := (iff #425 true)
#445 := (or false true)
#716 := (iff #445 true)
#717 := [rewrite]: #716
#446 := (iff #425 #445)
#725 := (iff #422 true)
#726 := [rewrite]: #725
#443 := (iff #421 false)
#444 := [rewrite]: #443
#340 := [monotonicity #444 #726]: #446
#440 := [trans #340 #717]: #439
#718 := [monotonicity #440]: #714
#719 := [trans #718 #734]: #715
#720 := (iff #424 false)
#373 := (iff #424 #372)
#730 := (iff #423 true)
#727 := (or true true)
#729 := (iff #727 true)
#367 := [rewrite]: #729
#728 := (iff #423 #727)
#388 := (iff #411 true)
#724 := [rewrite]: #388
#723 := [monotonicity #724 #726]: #728
#732 := [trans #723 #367]: #730
#733 := [monotonicity #732]: #373
#721 := [trans #733 #734]: #720
#430 := [monotonicity #721 #719]: #429
#432 := [trans #430 #385]: #431
#671 := [monotonicity #432 #696 #678]: #669
#672 := [trans #671 #660]: #662
#386 := (iff #419 false)
#738 := (iff #419 #397)
#401 := (iff #418 false)
#737 := [rewrite]: #401
#736 := (iff #334 false)
#396 := [rewrite]: #736
#381 := [monotonicity #396 #737]: #738
#387 := [trans #381 #385]: #386
#670 := [monotonicity #387 #672]: #674
#666 := [trans #670 #664]: #665
#655 := [monotonicity #666]: #653
#658 := [trans #655 #657]: #653
#652 := [quant-inst #70 #76]: #668
#654 := [mp #652 #658]: #661
[unit-resolution #654 #90 #753]: false
unsat
634111a9ccc777d6dea9f04f2dd68647c6110ae6 259 0
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#35 := (f4 f5 #14)
#36 := (f3 #35 #16)
#733 := (pattern #36)
#8 := 0::Int
#66 := -1::Int
#70 := (* -1::Int #16)
#67 := (* -1::Int #14)
#125 := (mod #67 #70)
#240 := (+ #36 #125)
#241 := (= #240 0::Int)
#37 := (mod #14 #16)
#237 := (* -1::Int #37)
#238 := (+ #36 #237)
#239 := (= #238 0::Int)
#92 := (<= #16 0::Int)
#99 := (>= #14 0::Int)
#184 := (or #99 #92)
#185 := (not #184)
#88 := (<= #14 0::Int)
#182 := (or #88 #92)
#183 := (not #182)
#188 := (or #183 #185)
#242 := (if #188 #239 #241)
#236 := (= #36 0::Int)
#18 := (= #14 0::Int)
#243 := (if #18 #236 #242)
#235 := (= #36 #14)
#19 := (= #16 0::Int)
#244 := (if #19 #235 #243)
#734 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #733) #244)
#247 := (forall (vars (?v0 Int) (?v1 Int)) #244)
#737 := (iff #247 #734)
#735 := (iff #244 #244)
#736 := [refl]: #735
#738 := [quant-intro #736]: #737
#131 := (* -1::Int #125)
#204 := (if #188 #37 #131)
#207 := (if #18 0::Int #204)
#210 := (if #19 #14 #207)
#213 := (= #36 #210)
#216 := (forall (vars (?v0 Int) (?v1 Int)) #213)
#248 := (iff #216 #247)
#245 := (iff #213 #244)
#246 := [rewrite]: #245
#249 := [quant-intro #246]: #248
#93 := (not #92)
#100 := (not #99)
#103 := (and #100 #93)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#151 := (if #106 #37 #131)
#154 := (if #18 0::Int #151)
#157 := (if #19 #14 #154)
#160 := (= #36 #157)
#163 := (forall (vars (?v0 Int) (?v1 Int)) #160)
#217 := (iff #163 #216)
#214 := (iff #160 #213)
#211 := (= #157 #210)
#208 := (= #154 #207)
#205 := (= #151 #204)
#189 := (iff #106 #188)
#186 := (iff #103 #185)
#187 := [rewrite]: #186
#176 := (iff #96 #183)
#177 := [rewrite]: #176
#190 := [monotonicity #177 #187]: #189
#206 := [monotonicity #190]: #205
#209 := [monotonicity #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [quant-intro #215]: #217
#174 := (~ #163 #163)
#173 := (~ #160 #160)
#170 := [refl]: #173
#175 := [nnf-pos #170]: #174
#29 := (- #16)
#28 := (- #14)
#38 := (mod #28 #29)
#39 := (- #38)
#22 := (< 0::Int #16)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#40 := (if #26 #37 #39)
#41 := (if #18 0::Int #40)
#42 := (if #19 #14 #41)
#43 := (= #36 #42)
#44 := (forall (vars (?v0 Int) (?v1 Int)) #43)
#166 := (iff #44 #163)
#136 := (if #26 #37 #131)
#139 := (if #18 0::Int #136)
#142 := (if #19 #14 #139)
#145 := (= #36 #142)
#148 := (forall (vars (?v0 Int) (?v1 Int)) #145)
#164 := (iff #148 #163)
#161 := (iff #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#152 := (= #136 #151)
#107 := (iff #26 #106)
#104 := (iff #25 #103)
#94 := (iff #22 #93)
#95 := [rewrite]: #94
#101 := (iff #24 #100)
#102 := [rewrite]: #101
#105 := [monotonicity #102 #95]: #104
#97 := (iff #23 #96)
#90 := (iff #21 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#153 := [monotonicity #108]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#149 := (iff #44 #148)
#146 := (iff #43 #145)
#143 := (= #42 #142)
#140 := (= #41 #139)
#137 := (= #40 #136)
#134 := (= #39 #131)
#128 := (- #125)
#132 := (= #128 #131)
#133 := [rewrite]: #132
#129 := (= #39 #128)
#126 := (= #38 #125)
#71 := (= #29 #70)
#72 := [rewrite]: #71
#68 := (= #28 #67)
#69 := [rewrite]: #68
#127 := [monotonicity #69 #72]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#167 := [trans #150 #165]: #166
#124 := [asserted]: #44
#168 := [mp #124 #167]: #163
#171 := [mp~ #168 #175]: #163
#219 := [mp #171 #218]: #216
#250 := [mp #219 #249]: #247
#739 := [mp #250 #738]: #734
#9 := (f4 f5 0::Int)
#10 := (f3 #9 0::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#64 := [asserted]: #12
#686 := (not #734)
#527 := (or #686 #11)
#720 := (* -1::Int 0::Int)
#377 := (mod #720 #720)
#507 := (+ #10 #377)
#714 := (= #507 0::Int)
#400 := (mod 0::Int 0::Int)
#404 := (* -1::Int #400)
#383 := (+ #10 #404)
#718 := (= #383 0::Int)
#397 := (<= 0::Int 0::Int)
#390 := (>= 0::Int 0::Int)
#401 := (or #390 #397)
#402 := (not #401)
#398 := (or #397 #397)
#399 := (not #398)
#403 := (or #399 #402)
#388 := (if #403 #718 #714)
#313 := (= 0::Int 0::Int)
#389 := (if #313 #11 #388)
#721 := (if #313 #11 #389)
#528 := (or #686 #721)
#671 := (iff #528 #527)
#673 := (iff #527 #527)
#674 := [rewrite]: #673
#685 := (iff #721 #11)
#1 := true
#682 := (if true #11 #11)
#679 := (iff #682 #11)
#684 := [rewrite]: #679
#683 := (iff #721 #682)
#692 := (iff #389 #11)
#695 := (+ #10 #400)
#419 := (= #695 0::Int)
#690 := (if true #11 #419)
#691 := (iff #690 #11)
#688 := [rewrite]: #691
#405 := (iff #389 #690)
#411 := (iff #388 #419)
#694 := (if false #718 #419)
#409 := (iff #694 #419)
#410 := [rewrite]: #409
#698 := (iff #388 #694)
#693 := (iff #714 #419)
#696 := (= #507 #695)
#425 := (= #377 #400)
#423 := (= #720 0::Int)
#424 := [rewrite]: #423
#319 := [monotonicity #424 #424]: #425
#418 := [monotonicity #319]: #696
#697 := [monotonicity #418]: #693
#700 := (iff #403 false)
#352 := (or false false)
#713 := (iff #352 false)
#699 := [rewrite]: #713
#712 := (iff #403 #352)
#711 := (iff #402 false)
#360 := (not true)
#365 := (iff #360 false)
#366 := [rewrite]: #365
#346 := (iff #402 #360)
#702 := (iff #401 true)
#725 := (or true true)
#380 := (iff #725 true)
#716 := [rewrite]: #380
#706 := (iff #401 #725)
#724 := (iff #397 true)
#719 := [rewrite]: #724
#704 := (iff #390 true)
#705 := [rewrite]: #704
#707 := [monotonicity #705 #719]: #706
#708 := [trans #707 #716]: #702
#709 := [monotonicity #708]: #346
#351 := [trans #709 #366]: #711
#367 := (iff #399 false)
#701 := (iff #399 #360)
#376 := (iff #398 true)
#715 := (iff #398 #725)
#375 := [monotonicity #719 #719]: #715
#717 := [trans #375 #716]: #376
#364 := [monotonicity #717]: #701
#703 := [trans #364 #366]: #367
#710 := [monotonicity #703 #351]: #712
#422 := [trans #710 #699]: #700
#408 := [monotonicity #422 #697]: #698
#689 := [trans #408 #410]: #411
#722 := (iff #313 true)
#723 := [rewrite]: #722
#687 := [monotonicity #723 #689]: #405
#681 := [trans #687 #688]: #692
#678 := [monotonicity #723 #681]: #683
#680 := [trans #678 #684]: #685
#672 := [monotonicity #680]: #671
#668 := [trans #672 #674]: #671
#529 := [quant-inst #8 #8]: #528
#669 := [mp #529 #668]: #527
[unit-resolution #669 #64 #739]: false
unsat
9b96f7ce486ea51d67fd20479a535702ca914b66 263 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#36 := (f4 f5 #15)
#37 := (f3 #36 #17)
#734 := (pattern #37)
#10 := 0::Int
#67 := -1::Int
#71 := (* -1::Int #17)
#68 := (* -1::Int #15)
#126 := (mod #68 #71)
#241 := (+ #37 #126)
#242 := (= #241 0::Int)
#38 := (mod #15 #17)
#238 := (* -1::Int #38)
#239 := (+ #37 #238)
#240 := (= #239 0::Int)
#93 := (<= #17 0::Int)
#100 := (>= #15 0::Int)
#185 := (or #100 #93)
#186 := (not #185)
#89 := (<= #15 0::Int)
#183 := (or #89 #93)
#184 := (not #183)
#189 := (or #184 #186)
#243 := (if #189 #240 #242)
#237 := (= #37 0::Int)
#19 := (= #15 0::Int)
#244 := (if #19 #237 #243)
#236 := (= #37 #15)
#20 := (= #17 0::Int)
#245 := (if #20 #236 #244)
#735 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #734) #245)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#738 := (iff #248 #735)
#736 := (iff #245 #245)
#737 := [refl]: #736
#739 := [quant-intro #737]: #738
#132 := (* -1::Int #126)
#205 := (if #189 #38 #132)
#208 := (if #19 0::Int #205)
#211 := (if #20 #15 #208)
#214 := (= #37 #211)
#217 := (forall (vars (?v0 Int) (?v1 Int)) #214)
#249 := (iff #217 #248)
#246 := (iff #214 #245)
#247 := [rewrite]: #246
#250 := [quant-intro #247]: #249
#94 := (not #93)
#101 := (not #100)
#104 := (and #101 #94)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#152 := (if #107 #38 #132)
#155 := (if #19 0::Int #152)
#158 := (if #20 #15 #155)
#161 := (= #37 #158)
#164 := (forall (vars (?v0 Int) (?v1 Int)) #161)
#218 := (iff #164 #217)
#215 := (iff #161 #214)
#212 := (= #158 #211)
#209 := (= #155 #208)
#206 := (= #152 #205)
#190 := (iff #107 #189)
#187 := (iff #104 #186)
#188 := [rewrite]: #187
#177 := (iff #97 #184)
#178 := [rewrite]: #177
#191 := [monotonicity #178 #188]: #190
#207 := [monotonicity #191]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [monotonicity #213]: #215
#219 := [quant-intro #216]: #218
#175 := (~ #164 #164)
#174 := (~ #161 #161)
#171 := [refl]: #174
#176 := [nnf-pos #171]: #175
#30 := (- #17)
#29 := (- #15)
#39 := (mod #29 #30)
#40 := (- #39)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#41 := (if #27 #38 #40)
#42 := (if #19 0::Int #41)
#43 := (if #20 #15 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#167 := (iff #45 #164)
#137 := (if #27 #38 #132)
#140 := (if #19 0::Int #137)
#143 := (if #20 #15 #140)
#146 := (= #37 #143)
#149 := (forall (vars (?v0 Int) (?v1 Int)) #146)
#165 := (iff #149 #164)
#162 := (iff #146 #161)
#159 := (= #143 #158)
#156 := (= #140 #155)
#153 := (= #137 #152)
#108 := (iff #27 #107)
#105 := (iff #26 #104)
#95 := (iff #23 #94)
#96 := [rewrite]: #95
#102 := (iff #25 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103 #96]: #105
#98 := (iff #24 #97)
#91 := (iff #22 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#154 := [monotonicity #109]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#150 := (iff #45 #149)
#147 := (iff #44 #146)
#144 := (= #43 #143)
#141 := (= #42 #140)
#138 := (= #41 #137)
#135 := (= #40 #132)
#129 := (- #126)
#133 := (= #129 #132)
#134 := [rewrite]: #133
#130 := (= #40 #129)
#127 := (= #39 #126)
#72 := (= #30 #71)
#73 := [rewrite]: #72
#69 := (= #29 #68)
#70 := [rewrite]: #69
#128 := [monotonicity #70 #73]: #127
#131 := [monotonicity #128]: #130
#136 := [trans #131 #134]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#168 := [trans #151 #166]: #167
#125 := [asserted]: #45
#169 := [mp #125 #168]: #164
#172 := [mp~ #169 #176]: #164
#220 := [mp #172 #219]: #217
#251 := [mp #220 #250]: #248
#740 := [mp #251 #739]: #735
decl f6 :: Int
#8 := f6
#9 := (f4 f5 f6)
#11 := (f3 #9 0::Int)
#12 := (= #11 f6)
#13 := (not #12)
#65 := [asserted]: #13
#529 := (not #735)
#530 := (or #529 #12)
#389 := (* -1::Int 0::Int)
#715 := (* -1::Int f6)
#390 := (mod #715 #389)
#722 := (+ #11 #390)
#723 := (= #722 0::Int)
#719 := (mod f6 0::Int)
#721 := (* -1::Int #719)
#378 := (+ #11 #721)
#508 := (= #378 0::Int)
#391 := (<= 0::Int 0::Int)
#404 := (>= f6 0::Int)
#401 := (or #404 #391)
#405 := (not #401)
#400 := (<= f6 0::Int)
#402 := (or #400 #391)
#403 := (not #402)
#384 := (or #403 #405)
#724 := (if #384 #508 #723)
#399 := (= #11 0::Int)
#398 := (= f6 0::Int)
#725 := (if #398 #399 #724)
#314 := (= 0::Int 0::Int)
#720 := (if #314 #12 #725)
#672 := (or #529 #720)
#674 := (iff #672 #530)
#669 := (iff #530 #530)
#670 := [rewrite]: #669
#687 := (iff #720 #12)
#420 := (mod #715 0::Int)
#695 := (+ #11 #420)
#410 := (= #695 0::Int)
#682 := (if #398 #399 #410)
#1 := true
#679 := (if true #12 #682)
#686 := (iff #679 #12)
#681 := [rewrite]: #686
#680 := (iff #720 #679)
#683 := (iff #725 #682)
#689 := (iff #724 #410)
#690 := (if false #508 #410)
#688 := (iff #690 #410)
#692 := [rewrite]: #688
#691 := (iff #724 #690)
#411 := (iff #723 #410)
#699 := (= #722 #695)
#694 := (= #390 #420)
#697 := (= #389 0::Int)
#419 := [rewrite]: #697
#698 := [monotonicity #419]: #694
#409 := [monotonicity #698]: #699
#412 := [monotonicity #409]: #411
#320 := (iff #384 false)
#701 := (or false false)
#425 := (iff #701 false)
#426 := [rewrite]: #425
#423 := (iff #384 #701)
#714 := (iff #405 false)
#367 := (not true)
#705 := (iff #367 false)
#706 := [rewrite]: #705
#713 := (iff #405 #367)
#352 := (iff #401 true)
#703 := (or #404 true)
#710 := (iff #703 true)
#712 := [rewrite]: #710
#709 := (iff #401 #703)
#376 := (iff #391 true)
#381 := [rewrite]: #376
#347 := [monotonicity #381]: #709
#353 := [trans #347 #712]: #352
#711 := [monotonicity #353]: #713
#700 := [trans #711 #706]: #714
#707 := (iff #403 false)
#368 := (iff #403 #367)
#365 := (iff #402 true)
#717 := (or #400 true)
#361 := (iff #717 true)
#702 := [rewrite]: #361
#377 := (iff #402 #717)
#718 := [monotonicity #381]: #377
#366 := [trans #718 #702]: #365
#704 := [monotonicity #366]: #368
#708 := [trans #704 #706]: #707
#424 := [monotonicity #708 #700]: #423
#696 := [trans #424 #426]: #320
#406 := [monotonicity #696 #412]: #691
#693 := [trans #406 #692]: #689
#684 := [monotonicity #693]: #683
#726 := (iff #314 true)
#716 := [rewrite]: #726
#685 := [monotonicity #716 #684]: #680
#528 := [trans #685 #681]: #687
#675 := [monotonicity #528]: #674
#676 := [trans #675 #670]: #674
#673 := [quant-inst #8 #10]: #672
#677 := [mp #673 #676]: #530
[unit-resolution #677 #65 #740]: false
unsat
2c958a27762c93737a9d33717a5efe8ed61ac548 286 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#36 := (f4 f5 #15)
#37 := (f3 #36 #17)
#733 := (pattern #37)
#8 := 0::Int
#67 := -1::Int
#71 := (* -1::Int #17)
#68 := (* -1::Int #15)
#126 := (mod #68 #71)
#241 := (+ #37 #126)
#242 := (= #241 0::Int)
#38 := (mod #15 #17)
#238 := (* -1::Int #38)
#239 := (+ #37 #238)
#240 := (= #239 0::Int)
#93 := (<= #17 0::Int)
#100 := (>= #15 0::Int)
#185 := (or #100 #93)
#186 := (not #185)
#89 := (<= #15 0::Int)
#183 := (or #89 #93)
#184 := (not #183)
#189 := (or #184 #186)
#243 := (if #189 #240 #242)
#237 := (= #37 0::Int)
#19 := (= #15 0::Int)
#244 := (if #19 #237 #243)
#236 := (= #37 #15)
#20 := (= #17 0::Int)
#245 := (if #20 #236 #244)
#734 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #733) #245)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#737 := (iff #248 #734)
#735 := (iff #245 #245)
#736 := [refl]: #735
#738 := [quant-intro #736]: #737
#132 := (* -1::Int #126)
#205 := (if #189 #38 #132)
#208 := (if #19 0::Int #205)
#211 := (if #20 #15 #208)
#214 := (= #37 #211)
#217 := (forall (vars (?v0 Int) (?v1 Int)) #214)
#249 := (iff #217 #248)
#246 := (iff #214 #245)
#247 := [rewrite]: #246
#250 := [quant-intro #247]: #249
#94 := (not #93)
#101 := (not #100)
#104 := (and #101 #94)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#152 := (if #107 #38 #132)
#155 := (if #19 0::Int #152)
#158 := (if #20 #15 #155)
#161 := (= #37 #158)
#164 := (forall (vars (?v0 Int) (?v1 Int)) #161)
#218 := (iff #164 #217)
#215 := (iff #161 #214)
#212 := (= #158 #211)
#209 := (= #155 #208)
#206 := (= #152 #205)
#190 := (iff #107 #189)
#187 := (iff #104 #186)
#188 := [rewrite]: #187
#177 := (iff #97 #184)
#178 := [rewrite]: #177
#191 := [monotonicity #178 #188]: #190
#207 := [monotonicity #191]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [monotonicity #213]: #215
#219 := [quant-intro #216]: #218
#175 := (~ #164 #164)
#174 := (~ #161 #161)
#171 := [refl]: #174
#176 := [nnf-pos #171]: #175
#30 := (- #17)
#29 := (- #15)
#39 := (mod #29 #30)
#40 := (- #39)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#41 := (if #27 #38 #40)
#42 := (if #19 0::Int #41)
#43 := (if #20 #15 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#167 := (iff #45 #164)
#137 := (if #27 #38 #132)
#140 := (if #19 0::Int #137)
#143 := (if #20 #15 #140)
#146 := (= #37 #143)
#149 := (forall (vars (?v0 Int) (?v1 Int)) #146)
#165 := (iff #149 #164)
#162 := (iff #146 #161)
#159 := (= #143 #158)
#156 := (= #140 #155)
#153 := (= #137 #152)
#108 := (iff #27 #107)
#105 := (iff #26 #104)
#95 := (iff #23 #94)
#96 := [rewrite]: #95
#102 := (iff #25 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103 #96]: #105
#98 := (iff #24 #97)
#91 := (iff #22 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#154 := [monotonicity #109]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#150 := (iff #45 #149)
#147 := (iff #44 #146)
#144 := (= #43 #143)
#141 := (= #42 #140)
#138 := (= #41 #137)
#135 := (= #40 #132)
#129 := (- #126)
#133 := (= #129 #132)
#134 := [rewrite]: #133
#130 := (= #40 #129)
#127 := (= #39 #126)
#72 := (= #30 #71)
#73 := [rewrite]: #72
#69 := (= #29 #68)
#70 := [rewrite]: #69
#128 := [monotonicity #70 #73]: #127
#131 := [monotonicity #128]: #130
#136 := [trans #131 #134]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#168 := [trans #151 #166]: #167
#125 := [asserted]: #45
#169 := [mp #125 #168]: #164
#172 := [mp~ #169 #176]: #164
#220 := [mp #172 #219]: #217
#251 := [mp #220 #250]: #248
#739 := [mp #251 #738]: #734
#10 := 1::Int
#9 := (f4 f5 0::Int)
#11 := (f3 #9 1::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#65 := [asserted]: #13
#510 := (not #734)
#658 := (or #510 #12)
#714 := (* -1::Int 1::Int)
#507 := (* -1::Int 0::Int)
#388 := (mod #507 #714)
#389 := (+ #11 #388)
#721 := (= #389 0::Int)
#383 := (mod 0::Int 1::Int)
#718 := (* -1::Int #383)
#720 := (+ #11 #718)
#377 := (= #720 0::Int)
#399 := (<= 1::Int 0::Int)
#402 := (>= 0::Int 0::Int)
#403 := (or #402 #399)
#400 := (not #403)
#398 := (<= 0::Int 0::Int)
#390 := (or #398 #399)
#401 := (not #390)
#404 := (or #401 #400)
#722 := (if #404 #377 #721)
#397 := (= 0::Int 0::Int)
#723 := (if #397 #12 #722)
#313 := (= 1::Int 0::Int)
#724 := (if #313 #12 #723)
#560 := (or #510 #724)
#656 := (iff #560 #658)
#544 := (iff #658 #658)
#559 := [rewrite]: #544
#550 := (iff #724 #12)
#668 := (if false #12 #12)
#676 := (iff #668 #12)
#670 := [rewrite]: #676
#667 := (iff #724 #668)
#666 := (iff #723 #12)
#1 := true
#508 := (if true #12 #12)
#663 := (iff #508 #12)
#665 := [rewrite]: #663
#509 := (iff #723 #508)
#677 := (iff #722 #12)
#669 := (iff #722 #668)
#673 := (iff #721 #12)
#671 := (= #389 #11)
#411 := (+ #11 0::Int)
#405 := (= #411 #11)
#687 := [rewrite]: #405
#528 := (= #389 #411)
#686 := (= #388 0::Int)
#678 := (mod 0::Int -1::Int)
#685 := (= #678 0::Int)
#680 := [rewrite]: #685
#679 := (= #388 #678)
#682 := (= #714 -1::Int)
#683 := [rewrite]: #682
#698 := (= #507 0::Int)
#408 := [rewrite]: #698
#684 := [monotonicity #408 #683]: #679
#527 := [trans #684 #680]: #686
#529 := [monotonicity #527]: #528
#672 := [trans #529 #687]: #671
#674 := [monotonicity #672]: #673
#692 := (iff #377 #12)
#691 := (= #720 #11)
#689 := (= #720 #411)
#409 := (= #718 0::Int)
#697 := (= #718 #507)
#419 := (= #383 0::Int)
#693 := [rewrite]: #419
#694 := [monotonicity #693]: #697
#410 := [trans #694 #408]: #409
#690 := [monotonicity #410]: #689
#688 := [trans #690 #687]: #691
#681 := [monotonicity #688]: #692
#696 := (iff #404 false)
#423 := (or false false)
#319 := (iff #423 false)
#695 := [rewrite]: #319
#424 := (iff #404 #423)
#700 := (iff #400 false)
#704 := (not true)
#707 := (iff #704 false)
#702 := [rewrite]: #707
#713 := (iff #400 #704)
#712 := (iff #403 true)
#360 := (or true false)
#365 := (iff #360 true)
#366 := [rewrite]: #365
#351 := (iff #403 #360)
#376 := (iff #399 false)
#717 := [rewrite]: #376
#709 := (iff #402 true)
#711 := [rewrite]: #709
#352 := [monotonicity #711 #717]: #351
#710 := [trans #352 #366]: #712
#699 := [monotonicity #710]: #713
#422 := [trans #699 #702]: #700
#708 := (iff #401 false)
#705 := (iff #401 #704)
#367 := (iff #390 true)
#701 := (iff #390 #360)
#380 := (iff #398 true)
#716 := [rewrite]: #380
#364 := [monotonicity #716 #717]: #701
#703 := [trans #364 #366]: #367
#706 := [monotonicity #703]: #705
#346 := [trans #706 #702]: #708
#425 := [monotonicity #346 #422]: #424
#418 := [trans #425 #695]: #696
#675 := [monotonicity #418 #681 #674]: #669
#506 := [trans #675 #670]: #677
#715 := (iff #397 true)
#375 := [rewrite]: #715
#662 := [monotonicity #375 #506]: #509
#664 := [trans #662 #665]: #666
#719 := (iff #313 false)
#725 := [rewrite]: #719
#549 := [monotonicity #725 #664]: #667
#551 := [trans #549 #670]: #550
#659 := [monotonicity #551]: #656
#561 := [trans #659 #559]: #656
#655 := [quant-inst #8 #10]: #560
#562 := [mp #655 #561]: #658
[unit-resolution #562 #65 #739]: false
unsat
364c5b9098e4b9b582f9064cb2808c3e5b97f78c 287 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#36 := (f4 f5 #15)
#37 := (f3 #36 #17)
#733 := (pattern #37)
#11 := 0::Int
#67 := -1::Int
#71 := (* -1::Int #17)
#68 := (* -1::Int #15)
#126 := (mod #68 #71)
#241 := (+ #37 #126)
#242 := (= #241 0::Int)
#38 := (mod #15 #17)
#238 := (* -1::Int #38)
#239 := (+ #37 #238)
#240 := (= #239 0::Int)
#93 := (<= #17 0::Int)
#100 := (>= #15 0::Int)
#185 := (or #100 #93)
#186 := (not #185)
#89 := (<= #15 0::Int)
#183 := (or #89 #93)
#184 := (not #183)
#189 := (or #184 #186)
#243 := (if #189 #240 #242)
#237 := (= #37 0::Int)
#19 := (= #15 0::Int)
#244 := (if #19 #237 #243)
#236 := (= #37 #15)
#20 := (= #17 0::Int)
#245 := (if #20 #236 #244)
#734 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #733) #245)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#737 := (iff #248 #734)
#735 := (iff #245 #245)
#736 := [refl]: #735
#738 := [quant-intro #736]: #737
#132 := (* -1::Int #126)
#205 := (if #189 #38 #132)
#208 := (if #19 0::Int #205)
#211 := (if #20 #15 #208)
#214 := (= #37 #211)
#217 := (forall (vars (?v0 Int) (?v1 Int)) #214)
#249 := (iff #217 #248)
#246 := (iff #214 #245)
#247 := [rewrite]: #246
#250 := [quant-intro #247]: #249
#94 := (not #93)
#101 := (not #100)
#104 := (and #101 #94)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#152 := (if #107 #38 #132)
#155 := (if #19 0::Int #152)
#158 := (if #20 #15 #155)
#161 := (= #37 #158)
#164 := (forall (vars (?v0 Int) (?v1 Int)) #161)
#218 := (iff #164 #217)
#215 := (iff #161 #214)
#212 := (= #158 #211)
#209 := (= #155 #208)
#206 := (= #152 #205)
#190 := (iff #107 #189)
#187 := (iff #104 #186)
#188 := [rewrite]: #187
#177 := (iff #97 #184)
#178 := [rewrite]: #177
#191 := [monotonicity #178 #188]: #190
#207 := [monotonicity #191]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [monotonicity #213]: #215
#219 := [quant-intro #216]: #218
#175 := (~ #164 #164)
#174 := (~ #161 #161)
#171 := [refl]: #174
#176 := [nnf-pos #171]: #175
#30 := (- #17)
#29 := (- #15)
#39 := (mod #29 #30)
#40 := (- #39)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#41 := (if #27 #38 #40)
#42 := (if #19 0::Int #41)
#43 := (if #20 #15 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#167 := (iff #45 #164)
#137 := (if #27 #38 #132)
#140 := (if #19 0::Int #137)
#143 := (if #20 #15 #140)
#146 := (= #37 #143)
#149 := (forall (vars (?v0 Int) (?v1 Int)) #146)
#165 := (iff #149 #164)
#162 := (iff #146 #161)
#159 := (= #143 #158)
#156 := (= #140 #155)
#153 := (= #137 #152)
#108 := (iff #27 #107)
#105 := (iff #26 #104)
#95 := (iff #23 #94)
#96 := [rewrite]: #95
#102 := (iff #25 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103 #96]: #105
#98 := (iff #24 #97)
#91 := (iff #22 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#154 := [monotonicity #109]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#150 := (iff #45 #149)
#147 := (iff #44 #146)
#144 := (= #43 #143)
#141 := (= #42 #140)
#138 := (= #41 #137)
#135 := (= #40 #132)
#129 := (- #126)
#133 := (= #129 #132)
#134 := [rewrite]: #133
#130 := (= #40 #129)
#127 := (= #39 #126)
#72 := (= #30 #71)
#73 := [rewrite]: #72
#69 := (= #29 #68)
#70 := [rewrite]: #69
#128 := [monotonicity #70 #73]: #127
#131 := [monotonicity #128]: #130
#136 := [trans #131 #134]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#168 := [trans #151 #166]: #167
#125 := [asserted]: #45
#169 := [mp #125 #168]: #164
#172 := [mp~ #169 #176]: #164
#220 := [mp #172 #219]: #217
#251 := [mp #220 #250]: #248
#739 := [mp #251 #738]: #734
#8 := 1::Int
#9 := (f4 f5 1::Int)
#10 := (f3 #9 1::Int)
#12 := (= #10 0::Int)
#13 := (not #12)
#65 := [asserted]: #13
#658 := (not #734)
#560 := (or #658 #12)
#377 := (* -1::Int 1::Int)
#507 := (mod #377 #377)
#714 := (+ #10 #507)
#388 := (= #714 0::Int)
#404 := (mod 1::Int 1::Int)
#383 := (* -1::Int #404)
#718 := (+ #10 #383)
#720 := (= #718 0::Int)
#398 := (<= 1::Int 0::Int)
#401 := (>= 1::Int 0::Int)
#402 := (or #401 #398)
#403 := (not #402)
#399 := (or #398 #398)
#390 := (not #399)
#400 := (or #390 #403)
#389 := (if #400 #720 #388)
#313 := (= 1::Int 0::Int)
#721 := (if #313 #12 #389)
#397 := (= #10 1::Int)
#722 := (if #313 #397 #721)
#655 := (or #658 #722)
#659 := (iff #655 #560)
#559 := (iff #560 #560)
#561 := [rewrite]: #559
#551 := (iff #722 #12)
#666 := (if false #397 #12)
#549 := (iff #666 #12)
#550 := [rewrite]: #549
#664 := (iff #722 #666)
#663 := (iff #721 #12)
#677 := (if false #12 #12)
#509 := (iff #677 #12)
#662 := [rewrite]: #509
#506 := (iff #721 #677)
#676 := (iff #389 #12)
#1 := true
#673 := (if true #12 #12)
#669 := (iff #673 #12)
#675 := [rewrite]: #669
#674 := (iff #389 #673)
#671 := (iff #388 #12)
#528 := (= #714 #10)
#409 := (+ #10 0::Int)
#689 := (= #409 #10)
#690 := [rewrite]: #689
#686 := (= #714 #409)
#685 := (= #507 0::Int)
#682 := (mod -1::Int -1::Int)
#679 := (= #682 0::Int)
#684 := [rewrite]: #679
#683 := (= #507 #682)
#692 := (= #377 -1::Int)
#681 := [rewrite]: #692
#678 := [monotonicity #681 #681]: #683
#680 := [trans #678 #684]: #685
#527 := [monotonicity #680]: #686
#529 := [trans #527 #690]: #528
#672 := [monotonicity #529]: #671
#691 := (iff #720 #12)
#405 := (= #718 #10)
#410 := (= #718 #409)
#698 := (= #383 0::Int)
#418 := (* -1::Int 0::Int)
#697 := (= #418 0::Int)
#694 := [rewrite]: #697
#419 := (= #383 #418)
#695 := (= #404 0::Int)
#696 := [rewrite]: #695
#693 := [monotonicity #696]: #419
#408 := [trans #693 #694]: #698
#411 := [monotonicity #408]: #410
#687 := [trans #411 #690]: #405
#688 := [monotonicity #687]: #691
#425 := (iff #400 true)
#707 := (or true false)
#346 := (iff #707 true)
#709 := [rewrite]: #346
#423 := (iff #400 #707)
#700 := (iff #403 false)
#352 := (not true)
#713 := (iff #352 false)
#699 := [rewrite]: #713
#712 := (iff #403 #352)
#711 := (iff #402 true)
#702 := (iff #402 #707)
#719 := (iff #398 false)
#725 := [rewrite]: #719
#705 := (iff #401 true)
#706 := [rewrite]: #705
#708 := [monotonicity #706 #725]: #702
#351 := [trans #708 #709]: #711
#710 := [monotonicity #351]: #712
#422 := [trans #710 #699]: #700
#703 := (iff #390 true)
#701 := (not false)
#366 := (iff #701 true)
#367 := [rewrite]: #366
#364 := (iff #390 #701)
#717 := (iff #399 false)
#715 := (or false false)
#716 := (iff #715 false)
#376 := [rewrite]: #716
#375 := (iff #399 #715)
#380 := [monotonicity #725 #725]: #375
#360 := [trans #380 #376]: #717
#365 := [monotonicity #360]: #364
#704 := [trans #365 #367]: #703
#424 := [monotonicity #704 #422]: #423
#319 := [trans #424 #709]: #425
#668 := [monotonicity #319 #688 #672]: #674
#670 := [trans #668 #675]: #676
#723 := (iff #313 false)
#724 := [rewrite]: #723
#508 := [monotonicity #724 #670]: #506
#665 := [trans #508 #662]: #663
#667 := [monotonicity #724 #665]: #664
#510 := [trans #667 #550]: #551
#544 := [monotonicity #510]: #659
#562 := [trans #544 #561]: #659
#656 := [quant-inst #8 #8]: #655
#555 := [mp #656 #562]: #560
[unit-resolution #555 #65 #739]: false
unsat
0efd40b813a31e70f41afd259192cc78d55d0047 298 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#733 := (pattern #38)
#12 := 0::Int
#68 := -1::Int
#72 := (* -1::Int #18)
#69 := (* -1::Int #16)
#127 := (mod #69 #72)
#242 := (+ #38 #127)
#243 := (= #242 0::Int)
#39 := (mod #16 #18)
#239 := (* -1::Int #39)
#240 := (+ #38 #239)
#241 := (= #240 0::Int)
#94 := (<= #18 0::Int)
#101 := (>= #16 0::Int)
#186 := (or #101 #94)
#187 := (not #186)
#90 := (<= #16 0::Int)
#184 := (or #90 #94)
#185 := (not #184)
#190 := (or #185 #187)
#244 := (if #190 #241 #243)
#238 := (= #38 0::Int)
#20 := (= #16 0::Int)
#245 := (if #20 #238 #244)
#237 := (= #38 #16)
#21 := (= #18 0::Int)
#246 := (if #21 #237 #245)
#734 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #733) #246)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#737 := (iff #249 #734)
#735 := (iff #246 #246)
#736 := [refl]: #735
#738 := [quant-intro #736]: #737
#133 := (* -1::Int #127)
#206 := (if #190 #39 #133)
#209 := (if #20 0::Int #206)
#212 := (if #21 #16 #209)
#215 := (= #38 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#250 := (iff #218 #249)
#247 := (iff #215 #246)
#248 := [rewrite]: #247
#251 := [quant-intro #248]: #250
#95 := (not #94)
#102 := (not #101)
#105 := (and #102 #95)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#153 := (if #108 #39 #133)
#156 := (if #20 0::Int #153)
#159 := (if #21 #16 #156)
#162 := (= #38 #159)
#165 := (forall (vars (?v0 Int) (?v1 Int)) #162)
#219 := (iff #165 #218)
#216 := (iff #162 #215)
#213 := (= #159 #212)
#210 := (= #156 #209)
#207 := (= #153 #206)
#191 := (iff #108 #190)
#188 := (iff #105 #187)
#189 := [rewrite]: #188
#178 := (iff #98 #185)
#179 := [rewrite]: #178
#192 := [monotonicity #179 #189]: #191
#208 := [monotonicity #192]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#176 := (~ #165 #165)
#175 := (~ #162 #162)
#172 := [refl]: #175
#177 := [nnf-pos #172]: #176
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#168 := (iff #46 #165)
#138 := (if #28 #39 #133)
#141 := (if #20 0::Int #138)
#144 := (if #21 #16 #141)
#147 := (= #38 #144)
#150 := (forall (vars (?v0 Int) (?v1 Int)) #147)
#166 := (iff #150 #165)
#163 := (iff #147 #162)
#160 := (= #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#109 := (iff #28 #108)
#106 := (iff #27 #105)
#96 := (iff #24 #95)
#97 := [rewrite]: #96
#103 := (iff #26 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104 #97]: #106
#99 := (iff #25 #98)
#92 := (iff #23 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#155 := [monotonicity #110]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [quant-intro #164]: #166
#151 := (iff #46 #150)
#148 := (iff #45 #147)
#145 := (= #44 #144)
#142 := (= #43 #141)
#139 := (= #42 #138)
#136 := (= #41 #133)
#130 := (- #127)
#134 := (= #130 #133)
#135 := [rewrite]: #134
#131 := (= #41 #130)
#128 := (= #40 #127)
#73 := (= #31 #72)
#74 := [rewrite]: #73
#70 := (= #30 #69)
#71 := [rewrite]: #70
#129 := [monotonicity #71 #74]: #128
#132 := [monotonicity #129]: #131
#137 := [trans #132 #135]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#169 := [trans #152 #167]: #168
#126 := [asserted]: #46
#170 := [mp #126 #169]: #165
#173 := [mp~ #170 #177]: #165
#221 := [mp #173 #220]: #218
#252 := [mp #221 #251]: #249
#739 := [mp #252 #738]: #734
#10 := 1::Int
#8 := 3::Int
#9 := (f4 f5 3::Int)
#11 := (f3 #9 1::Int)
#13 := (= #11 0::Int)
#14 := (not #13)
#66 := [asserted]: #14
#563 := (not #734)
#564 := (or #563 #13)
#388 := (* -1::Int 1::Int)
#714 := (* -1::Int 3::Int)
#389 := (mod #714 #388)
#721 := (+ #11 #389)
#722 := (= #721 0::Int)
#718 := (mod 3::Int 1::Int)
#720 := (* -1::Int #718)
#377 := (+ #11 #720)
#507 := (= #377 0::Int)
#390 := (<= 1::Int 0::Int)
#403 := (>= 3::Int 0::Int)
#400 := (or #403 #390)
#404 := (not #400)
#399 := (<= 3::Int 0::Int)
#401 := (or #399 #390)
#402 := (not #401)
#383 := (or #402 #404)
#723 := (if #383 #507 #722)
#398 := (= 3::Int 0::Int)
#724 := (if #398 #13 #723)
#397 := (= #11 3::Int)
#313 := (= 1::Int 0::Int)
#719 := (if #313 #397 #724)
#565 := (or #563 #719)
#567 := (iff #565 #564)
#657 := (iff #564 #564)
#661 := [rewrite]: #657
#562 := (iff #719 #13)
#656 := (if false #397 #13)
#559 := (iff #656 #13)
#561 := [rewrite]: #559
#659 := (iff #719 #656)
#560 := (iff #724 #13)
#549 := (if false #13 #13)
#510 := (iff #549 #13)
#658 := [rewrite]: #510
#550 := (iff #724 #549)
#664 := (iff #723 #13)
#1 := true
#509 := (if true #13 #13)
#665 := (iff #509 #13)
#666 := [rewrite]: #665
#662 := (iff #723 #509)
#506 := (iff #722 #13)
#670 := (= #721 #11)
#691 := (+ #11 0::Int)
#681 := (= #691 #11)
#682 := [rewrite]: #681
#675 := (= #721 #691)
#668 := (= #389 0::Int)
#685 := -3::Int
#529 := (mod -3::Int -1::Int)
#673 := (= #529 0::Int)
#674 := [rewrite]: #673
#671 := (= #389 #529)
#527 := (= #388 -1::Int)
#528 := [rewrite]: #527
#680 := (= #714 -3::Int)
#686 := [rewrite]: #680
#672 := [monotonicity #686 #528]: #671
#669 := [trans #672 #674]: #668
#676 := [monotonicity #669]: #675
#677 := [trans #676 #682]: #670
#508 := [monotonicity #677]: #506
#679 := (iff #507 #13)
#683 := (= #377 #11)
#688 := (= #377 #691)
#405 := (= #720 0::Int)
#409 := (* -1::Int 0::Int)
#689 := (= #409 0::Int)
#690 := [rewrite]: #689
#410 := (= #720 #409)
#698 := (= #718 0::Int)
#408 := [rewrite]: #698
#411 := [monotonicity #408]: #410
#687 := [trans #411 #690]: #405
#692 := [monotonicity #687]: #688
#678 := [trans #692 #682]: #683
#684 := [monotonicity #678]: #679
#697 := (iff #383 true)
#352 := (or true false)
#713 := (iff #352 true)
#699 := [rewrite]: #713
#419 := (iff #383 #352)
#696 := (iff #404 false)
#423 := (not true)
#319 := (iff #423 false)
#695 := [rewrite]: #319
#424 := (iff #404 #423)
#700 := (iff #400 true)
#712 := (iff #400 #352)
#717 := (iff #390 false)
#360 := [rewrite]: #717
#711 := (iff #403 true)
#351 := [rewrite]: #711
#710 := [monotonicity #351 #360]: #712
#422 := [trans #710 #699]: #700
#425 := [monotonicity #422]: #424
#418 := [trans #425 #695]: #696
#346 := (iff #402 true)
#705 := (not false)
#702 := (iff #705 true)
#708 := [rewrite]: #702
#706 := (iff #402 #705)
#703 := (iff #401 false)
#701 := (or false false)
#366 := (iff #701 false)
#367 := [rewrite]: #366
#364 := (iff #401 #701)
#716 := (iff #399 false)
#376 := [rewrite]: #716
#365 := [monotonicity #376 #360]: #364
#704 := [trans #365 #367]: #703
#707 := [monotonicity #704]: #706
#709 := [trans #707 #708]: #346
#693 := [monotonicity #709 #418]: #419
#694 := [trans #693 #699]: #697
#663 := [monotonicity #694 #684 #508]: #662
#667 := [trans #663 #666]: #664
#375 := (iff #398 false)
#380 := [rewrite]: #375
#551 := [monotonicity #380 #667]: #550
#655 := [trans #551 #658]: #560
#725 := (iff #313 false)
#715 := [rewrite]: #725
#544 := [monotonicity #715 #655]: #659
#555 := [trans #544 #561]: #562
#660 := [monotonicity #555]: #567
#648 := [trans #660 #661]: #567
#566 := [quant-inst #8 #10]: #565
#650 := [mp #566 #648]: #564
[unit-resolution #650 #66 #739]: false
unsat
1cff7727da7921a7ced79f03edcd1b205ac8b4b2 294 0
#2 := false
#12 := 0::Int
decl f6 :: Int
#8 := f6
#404 := (>= f6 0::Int)
#710 := (not #404)
#400 := (<= f6 0::Int)
#367 := (not #400)
#353 := (or #367 #710)
#665 := (not #353)
#68 := -1::Int
#715 := (* -1::Int f6)
#690 := (mod #715 -1::Int)
decl f3 :: (-> S2 Int Int)
#10 := 1::Int
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#9 := (f4 f5 f6)
#11 := (f3 #9 1::Int)
#688 := (+ #11 #690)
#693 := (= #688 0::Int)
#13 := (= #11 0::Int)
#684 := (if #353 #13 #693)
#399 := (= f6 0::Int)
#685 := (if #399 #13 #684)
#18 := (:var 0 Int)
#16 := (:var 1 Int)
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#734 := (pattern #38)
#72 := (* -1::Int #18)
#69 := (* -1::Int #16)
#127 := (mod #69 #72)
#242 := (+ #38 #127)
#243 := (= #242 0::Int)
#39 := (mod #16 #18)
#239 := (* -1::Int #39)
#240 := (+ #38 #239)
#241 := (= #240 0::Int)
#94 := (<= #18 0::Int)
#101 := (>= #16 0::Int)
#186 := (or #101 #94)
#187 := (not #186)
#90 := (<= #16 0::Int)
#184 := (or #90 #94)
#185 := (not #184)
#190 := (or #185 #187)
#244 := (if #190 #241 #243)
#238 := (= #38 0::Int)
#20 := (= #16 0::Int)
#245 := (if #20 #238 #244)
#237 := (= #38 #16)
#21 := (= #18 0::Int)
#246 := (if #21 #237 #245)
#735 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #734) #246)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#738 := (iff #249 #735)
#736 := (iff #246 #246)
#737 := [refl]: #736
#739 := [quant-intro #737]: #738
#133 := (* -1::Int #127)
#206 := (if #190 #39 #133)
#209 := (if #20 0::Int #206)
#212 := (if #21 #16 #209)
#215 := (= #38 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#250 := (iff #218 #249)
#247 := (iff #215 #246)
#248 := [rewrite]: #247
#251 := [quant-intro #248]: #250
#95 := (not #94)
#102 := (not #101)
#105 := (and #102 #95)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#153 := (if #108 #39 #133)
#156 := (if #20 0::Int #153)
#159 := (if #21 #16 #156)
#162 := (= #38 #159)
#165 := (forall (vars (?v0 Int) (?v1 Int)) #162)
#219 := (iff #165 #218)
#216 := (iff #162 #215)
#213 := (= #159 #212)
#210 := (= #156 #209)
#207 := (= #153 #206)
#191 := (iff #108 #190)
#188 := (iff #105 #187)
#189 := [rewrite]: #188
#178 := (iff #98 #185)
#179 := [rewrite]: #178
#192 := [monotonicity #179 #189]: #191
#208 := [monotonicity #192]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#176 := (~ #165 #165)
#175 := (~ #162 #162)
#172 := [refl]: #175
#177 := [nnf-pos #172]: #176
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#168 := (iff #46 #165)
#138 := (if #28 #39 #133)
#141 := (if #20 0::Int #138)
#144 := (if #21 #16 #141)
#147 := (= #38 #144)
#150 := (forall (vars (?v0 Int) (?v1 Int)) #147)
#166 := (iff #150 #165)
#163 := (iff #147 #162)
#160 := (= #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#109 := (iff #28 #108)
#106 := (iff #27 #105)
#96 := (iff #24 #95)
#97 := [rewrite]: #96
#103 := (iff #26 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104 #97]: #106
#99 := (iff #25 #98)
#92 := (iff #23 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#155 := [monotonicity #110]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [quant-intro #164]: #166
#151 := (iff #46 #150)
#148 := (iff #45 #147)
#145 := (= #44 #144)
#142 := (= #43 #141)
#139 := (= #42 #138)
#136 := (= #41 #133)
#130 := (- #127)
#134 := (= #130 #133)
#135 := [rewrite]: #134
#131 := (= #41 #130)
#128 := (= #40 #127)
#73 := (= #31 #72)
#74 := [rewrite]: #73
#70 := (= #30 #69)
#71 := [rewrite]: #70
#129 := [monotonicity #71 #74]: #128
#132 := [monotonicity #129]: #131
#137 := [trans #132 #135]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#169 := [trans #152 #167]: #168
#126 := [asserted]: #46
#170 := [mp #126 #169]: #165
#173 := [mp~ #170 #177]: #165
#221 := [mp #173 #220]: #218
#252 := [mp #221 #251]: #249
#740 := [mp #252 #739]: #735
#675 := (not #735)
#669 := (or #675 #685)
#389 := (* -1::Int 1::Int)
#390 := (mod #715 #389)
#722 := (+ #11 #390)
#723 := (= #722 0::Int)
#719 := (mod f6 1::Int)
#721 := (* -1::Int #719)
#378 := (+ #11 #721)
#508 := (= #378 0::Int)
#391 := (<= 1::Int 0::Int)
#401 := (or #404 #391)
#405 := (not #401)
#402 := (or #400 #391)
#403 := (not #402)
#384 := (or #403 #405)
#724 := (if #384 #508 #723)
#725 := (if #399 #13 #724)
#398 := (= #11 f6)
#314 := (= 1::Int 0::Int)
#720 := (if #314 #398 #725)
#670 := (or #675 #720)
#677 := (iff #670 #669)
#678 := (iff #669 #669)
#507 := [rewrite]: #678
#673 := (iff #720 #685)
#687 := (if false #398 #685)
#530 := (iff #687 #685)
#672 := [rewrite]: #530
#528 := (iff #720 #687)
#686 := (iff #725 #685)
#679 := (iff #724 #684)
#682 := (iff #723 #693)
#692 := (= #722 #688)
#691 := (= #390 #690)
#411 := (= #389 -1::Int)
#412 := [rewrite]: #411
#406 := [monotonicity #412]: #691
#689 := [monotonicity #406]: #692
#683 := [monotonicity #689]: #682
#409 := (iff #508 #13)
#695 := (= #378 #11)
#697 := (+ #11 0::Int)
#694 := (= #697 #11)
#698 := [rewrite]: #694
#419 := (= #378 #697)
#320 := (= #721 0::Int)
#701 := (* -1::Int 0::Int)
#425 := (= #701 0::Int)
#426 := [rewrite]: #425
#423 := (= #721 #701)
#714 := (= #719 0::Int)
#700 := [rewrite]: #714
#424 := [monotonicity #700]: #423
#696 := [trans #424 #426]: #320
#420 := [monotonicity #696]: #419
#699 := [trans #420 #698]: #695
#410 := [monotonicity #699]: #409
#713 := (iff #384 #353)
#712 := (iff #405 #710)
#709 := (iff #401 #404)
#705 := (or #404 false)
#708 := (iff #705 #404)
#703 := [rewrite]: #708
#706 := (iff #401 #705)
#376 := (iff #391 false)
#381 := [rewrite]: #376
#707 := [monotonicity #381]: #706
#347 := [trans #707 #703]: #709
#352 := [monotonicity #347]: #712
#368 := (iff #403 #367)
#365 := (iff #402 #400)
#717 := (or #400 false)
#361 := (iff #717 #400)
#702 := [rewrite]: #361
#377 := (iff #402 #717)
#718 := [monotonicity #381]: #377
#366 := [trans #718 #702]: #365
#704 := [monotonicity #366]: #368
#711 := [monotonicity #704 #352]: #713
#680 := [monotonicity #711 #410 #683]: #679
#681 := [monotonicity #680]: #686
#726 := (iff #314 false)
#716 := [rewrite]: #726
#529 := [monotonicity #716 #681]: #528
#674 := [trans #529 #672]: #673
#671 := [monotonicity #674]: #677
#509 := [trans #671 #507]: #677
#676 := [quant-inst #8 #10]: #670
#510 := [mp #676 #509]: #669
#607 := [unit-resolution #510 #740]: #685
#564 := (not #399)
#556 := (not #685)
#608 := (or #556 #564)
#14 := (not #13)
#66 := [asserted]: #14
#565 := (or #556 #564 #13)
#566 := [def-axiom]: #565
#609 := [unit-resolution #566 #66]: #608
#604 := [unit-resolution #609 #607]: #564
#567 := (or #556 #399 #684)
#568 := [def-axiom]: #567
#610 := [unit-resolution #568 #604 #607]: #684
#511 := (not #684)
#596 := (or #511 #665)
#659 := (or #511 #665 #13)
#561 := [def-axiom]: #659
#592 := [unit-resolution #561 #66]: #596
#593 := [unit-resolution #592 #610]: #665
#666 := (or #353 #404)
#667 := [def-axiom]: #666
#594 := [unit-resolution #667 #593]: #404
#663 := (or #353 #400)
#664 := [def-axiom]: #663
#597 := [unit-resolution #664 #593]: #400
#598 := (or #399 #367 #710)
#599 := [th-lemma arith triangle-eq]: #598
[unit-resolution #599 #604 #597 #594]: false
unsat
d419bb3e51a007e8e5acdc900beee4c77bd2d9be 299 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#746 := (pattern #38)
#8 := 0::Int
#67 := -1::Int
#84 := (* -1::Int #18)
#80 := (* -1::Int #16)
#139 := (mod #80 #84)
#254 := (+ #38 #139)
#255 := (= #254 0::Int)
#39 := (mod #16 #18)
#251 := (* -1::Int #39)
#252 := (+ #38 #251)
#253 := (= #252 0::Int)
#106 := (<= #18 0::Int)
#113 := (>= #16 0::Int)
#198 := (or #113 #106)
#199 := (not #198)
#102 := (<= #16 0::Int)
#196 := (or #102 #106)
#197 := (not #196)
#202 := (or #197 #199)
#256 := (if #202 #253 #255)
#250 := (= #38 0::Int)
#20 := (= #16 0::Int)
#257 := (if #20 #250 #256)
#249 := (= #38 #16)
#21 := (= #18 0::Int)
#258 := (if #21 #249 #257)
#747 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #746) #258)
#261 := (forall (vars (?v0 Int) (?v1 Int)) #258)
#750 := (iff #261 #747)
#748 := (iff #258 #258)
#749 := [refl]: #748
#751 := [quant-intro #749]: #750
#145 := (* -1::Int #139)
#218 := (if #202 #39 #145)
#221 := (if #20 0::Int #218)
#224 := (if #21 #16 #221)
#227 := (= #38 #224)
#230 := (forall (vars (?v0 Int) (?v1 Int)) #227)
#262 := (iff #230 #261)
#259 := (iff #227 #258)
#260 := [rewrite]: #259
#263 := [quant-intro #260]: #262
#107 := (not #106)
#114 := (not #113)
#117 := (and #114 #107)
#103 := (not #102)
#110 := (and #103 #107)
#120 := (or #110 #117)
#165 := (if #120 #39 #145)
#168 := (if #20 0::Int #165)
#171 := (if #21 #16 #168)
#174 := (= #38 #171)
#177 := (forall (vars (?v0 Int) (?v1 Int)) #174)
#231 := (iff #177 #230)
#228 := (iff #174 #227)
#225 := (= #171 #224)
#222 := (= #168 #221)
#219 := (= #165 #218)
#203 := (iff #120 #202)
#200 := (iff #117 #199)
#201 := [rewrite]: #200
#190 := (iff #110 #197)
#191 := [rewrite]: #190
#204 := [monotonicity #191 #201]: #203
#220 := [monotonicity #204]: #219
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#188 := (~ #177 #177)
#187 := (~ #174 #174)
#184 := [refl]: #187
#189 := [nnf-pos #184]: #188
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#180 := (iff #46 #177)
#150 := (if #28 #39 #145)
#153 := (if #20 0::Int #150)
#156 := (if #21 #16 #153)
#159 := (= #38 #156)
#162 := (forall (vars (?v0 Int) (?v1 Int)) #159)
#178 := (iff #162 #177)
#175 := (iff #159 #174)
#172 := (= #156 #171)
#169 := (= #153 #168)
#166 := (= #150 #165)
#121 := (iff #28 #120)
#118 := (iff #27 #117)
#108 := (iff #24 #107)
#109 := [rewrite]: #108
#115 := (iff #26 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116 #109]: #118
#111 := (iff #25 #110)
#104 := (iff #23 #103)
#105 := [rewrite]: #104
#112 := [monotonicity #105 #109]: #111
#122 := [monotonicity #112 #119]: #121
#167 := [monotonicity #122]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [quant-intro #176]: #178
#163 := (iff #46 #162)
#160 := (iff #45 #159)
#157 := (= #44 #156)
#154 := (= #43 #153)
#151 := (= #42 #150)
#148 := (= #41 #145)
#142 := (- #139)
#146 := (= #142 #145)
#147 := [rewrite]: #146
#143 := (= #41 #142)
#140 := (= #40 #139)
#85 := (= #31 #84)
#86 := [rewrite]: #85
#82 := (= #30 #80)
#83 := [rewrite]: #82
#141 := [monotonicity #83 #86]: #140
#144 := [monotonicity #141]: #143
#149 := [trans #144 #147]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [quant-intro #161]: #163
#181 := [trans #164 #179]: #180
#138 := [asserted]: #46
#182 := [mp #138 #181]: #177
#185 := [mp~ #182 #189]: #177
#233 := [mp #185 #232]: #230
#264 := [mp #233 #263]: #261
#752 := [mp #264 #751]: #747
#9 := (f4 f5 0::Int)
#70 := (f3 #9 -1::Int)
#73 := (= #70 0::Int)
#76 := (not #73)
#10 := 1::Int
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#13 := (= #12 0::Int)
#14 := (not #13)
#77 := (iff #14 #76)
#74 := (iff #13 #73)
#71 := (= #12 #70)
#68 := (= #11 -1::Int)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#66 := [asserted]: #14
#81 := [mp #66 #78]: #76
#523 := (not #747)
#671 := (or #523 #73)
#727 := (* -1::Int -1::Int)
#520 := (* -1::Int 0::Int)
#401 := (mod #520 #727)
#402 := (+ #70 #401)
#734 := (= #402 0::Int)
#396 := (mod 0::Int -1::Int)
#731 := (* -1::Int #396)
#733 := (+ #70 #731)
#390 := (= #733 0::Int)
#412 := (<= -1::Int 0::Int)
#415 := (>= 0::Int 0::Int)
#416 := (or #415 #412)
#413 := (not #416)
#411 := (<= 0::Int 0::Int)
#403 := (or #411 #412)
#414 := (not #403)
#417 := (or #414 #413)
#735 := (if #417 #390 #734)
#410 := (= 0::Int 0::Int)
#736 := (if #410 #73 #735)
#326 := (= -1::Int 0::Int)
#737 := (if #326 #73 #736)
#573 := (or #523 #737)
#669 := (iff #573 #671)
#557 := (iff #671 #671)
#572 := [rewrite]: #557
#563 := (iff #737 #73)
#681 := (if false #73 #73)
#689 := (iff #681 #73)
#683 := [rewrite]: #689
#680 := (iff #737 #681)
#679 := (iff #736 #73)
#1 := true
#521 := (if true #73 #73)
#676 := (iff #521 #73)
#678 := [rewrite]: #676
#522 := (iff #736 #521)
#690 := (iff #735 #73)
#682 := (iff #735 #681)
#686 := (iff #734 #73)
#684 := (= #402 #70)
#424 := (+ #70 0::Int)
#418 := (= #424 #70)
#700 := [rewrite]: #418
#541 := (= #402 #424)
#699 := (= #401 0::Int)
#691 := (mod 0::Int 1::Int)
#698 := (= #691 0::Int)
#693 := [rewrite]: #698
#692 := (= #401 #691)
#695 := (= #727 1::Int)
#696 := [rewrite]: #695
#711 := (= #520 0::Int)
#421 := [rewrite]: #711
#697 := [monotonicity #421 #696]: #692
#540 := [trans #697 #693]: #699
#542 := [monotonicity #540]: #541
#685 := [trans #542 #700]: #684
#687 := [monotonicity #685]: #686
#705 := (iff #390 #73)
#704 := (= #733 #70)
#702 := (= #733 #424)
#422 := (= #731 0::Int)
#710 := (= #731 #520)
#432 := (= #396 0::Int)
#706 := [rewrite]: #432
#707 := [monotonicity #706]: #710
#423 := [trans #707 #421]: #422
#703 := [monotonicity #423]: #702
#701 := [trans #703 #700]: #704
#694 := [monotonicity #701]: #705
#709 := (iff #417 false)
#436 := (or false false)
#332 := (iff #436 false)
#708 := [rewrite]: #332
#437 := (iff #417 #436)
#713 := (iff #413 false)
#717 := (not true)
#720 := (iff #717 false)
#715 := [rewrite]: #720
#726 := (iff #413 #717)
#725 := (iff #416 true)
#373 := (or true true)
#378 := (iff #373 true)
#379 := [rewrite]: #378
#364 := (iff #416 #373)
#389 := (iff #412 true)
#730 := [rewrite]: #389
#722 := (iff #415 true)
#724 := [rewrite]: #722
#365 := [monotonicity #724 #730]: #364
#723 := [trans #365 #379]: #725
#712 := [monotonicity #723]: #726
#435 := [trans #712 #715]: #713
#721 := (iff #414 false)
#718 := (iff #414 #717)
#380 := (iff #403 true)
#714 := (iff #403 #373)
#393 := (iff #411 true)
#729 := [rewrite]: #393
#377 := [monotonicity #729 #730]: #714
#716 := [trans #377 #379]: #380
#719 := [monotonicity #716]: #718
#359 := [trans #719 #715]: #721
#438 := [monotonicity #359 #435]: #437
#431 := [trans #438 #708]: #709
#688 := [monotonicity #431 #694 #687]: #682
#519 := [trans #688 #683]: #690
#728 := (iff #410 true)
#388 := [rewrite]: #728
#675 := [monotonicity #388 #519]: #522
#677 := [trans #675 #678]: #679
#732 := (iff #326 false)
#738 := [rewrite]: #732
#562 := [monotonicity #738 #677]: #680
#564 := [trans #562 #683]: #563
#672 := [monotonicity #564]: #669
#574 := [trans #672 #572]: #669
#668 := [quant-inst #8 #67]: #573
#575 := [mp #668 #574]: #671
[unit-resolution #575 #81 #752]: false
unsat
4af2a0ea6f463e71e2c4b38fde6ef00565f6fb9f 306 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#746 := (pattern #38)
#12 := 0::Int
#67 := -1::Int
#84 := (* -1::Int #18)
#80 := (* -1::Int #16)
#139 := (mod #80 #84)
#254 := (+ #38 #139)
#255 := (= #254 0::Int)
#39 := (mod #16 #18)
#251 := (* -1::Int #39)
#252 := (+ #38 #251)
#253 := (= #252 0::Int)
#106 := (<= #18 0::Int)
#113 := (>= #16 0::Int)
#198 := (or #113 #106)
#199 := (not #198)
#102 := (<= #16 0::Int)
#196 := (or #102 #106)
#197 := (not #196)
#202 := (or #197 #199)
#256 := (if #202 #253 #255)
#250 := (= #38 0::Int)
#20 := (= #16 0::Int)
#257 := (if #20 #250 #256)
#249 := (= #38 #16)
#21 := (= #18 0::Int)
#258 := (if #21 #249 #257)
#747 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #746) #258)
#261 := (forall (vars (?v0 Int) (?v1 Int)) #258)
#750 := (iff #261 #747)
#748 := (iff #258 #258)
#749 := [refl]: #748
#751 := [quant-intro #749]: #750
#145 := (* -1::Int #139)
#218 := (if #202 #39 #145)
#221 := (if #20 0::Int #218)
#224 := (if #21 #16 #221)
#227 := (= #38 #224)
#230 := (forall (vars (?v0 Int) (?v1 Int)) #227)
#262 := (iff #230 #261)
#259 := (iff #227 #258)
#260 := [rewrite]: #259
#263 := [quant-intro #260]: #262
#107 := (not #106)
#114 := (not #113)
#117 := (and #114 #107)
#103 := (not #102)
#110 := (and #103 #107)
#120 := (or #110 #117)
#165 := (if #120 #39 #145)
#168 := (if #20 0::Int #165)
#171 := (if #21 #16 #168)
#174 := (= #38 #171)
#177 := (forall (vars (?v0 Int) (?v1 Int)) #174)
#231 := (iff #177 #230)
#228 := (iff #174 #227)
#225 := (= #171 #224)
#222 := (= #168 #221)
#219 := (= #165 #218)
#203 := (iff #120 #202)
#200 := (iff #117 #199)
#201 := [rewrite]: #200
#190 := (iff #110 #197)
#191 := [rewrite]: #190
#204 := [monotonicity #191 #201]: #203
#220 := [monotonicity #204]: #219
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#188 := (~ #177 #177)
#187 := (~ #174 #174)
#184 := [refl]: #187
#189 := [nnf-pos #184]: #188
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#180 := (iff #46 #177)
#150 := (if #28 #39 #145)
#153 := (if #20 0::Int #150)
#156 := (if #21 #16 #153)
#159 := (= #38 #156)
#162 := (forall (vars (?v0 Int) (?v1 Int)) #159)
#178 := (iff #162 #177)
#175 := (iff #159 #174)
#172 := (= #156 #171)
#169 := (= #153 #168)
#166 := (= #150 #165)
#121 := (iff #28 #120)
#118 := (iff #27 #117)
#108 := (iff #24 #107)
#109 := [rewrite]: #108
#115 := (iff #26 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116 #109]: #118
#111 := (iff #25 #110)
#104 := (iff #23 #103)
#105 := [rewrite]: #104
#112 := [monotonicity #105 #109]: #111
#122 := [monotonicity #112 #119]: #121
#167 := [monotonicity #122]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [quant-intro #176]: #178
#163 := (iff #46 #162)
#160 := (iff #45 #159)
#157 := (= #44 #156)
#154 := (= #43 #153)
#151 := (= #42 #150)
#148 := (= #41 #145)
#142 := (- #139)
#146 := (= #142 #145)
#147 := [rewrite]: #146
#143 := (= #41 #142)
#140 := (= #40 #139)
#85 := (= #31 #84)
#86 := [rewrite]: #85
#82 := (= #30 #80)
#83 := [rewrite]: #82
#141 := [monotonicity #83 #86]: #140
#144 := [monotonicity #141]: #143
#149 := [trans #144 #147]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [quant-intro #161]: #163
#181 := [trans #164 #179]: #180
#138 := [asserted]: #46
#182 := [mp #138 #181]: #177
#185 := [mp~ #182 #189]: #177
#233 := [mp #185 #232]: #230
#264 := [mp #233 #263]: #261
#752 := [mp #264 #751]: #747
#8 := 1::Int
#9 := (f4 f5 1::Int)
#70 := (f3 #9 -1::Int)
#73 := (= #70 0::Int)
#76 := (not #73)
#10 := (- 1::Int)
#11 := (f3 #9 #10)
#13 := (= #11 0::Int)
#14 := (not #13)
#77 := (iff #14 #76)
#74 := (iff #13 #73)
#71 := (= #11 #70)
#68 := (= #10 -1::Int)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#66 := [asserted]: #14
#81 := [mp #66 #78]: #76
#572 := (not #747)
#574 := (or #572 #73)
#401 := (* -1::Int -1::Int)
#727 := (* -1::Int 1::Int)
#402 := (mod #727 #401)
#734 := (+ #70 #402)
#735 := (= #734 0::Int)
#731 := (mod 1::Int -1::Int)
#733 := (* -1::Int #731)
#390 := (+ #70 #733)
#520 := (= #390 0::Int)
#403 := (<= -1::Int 0::Int)
#416 := (>= 1::Int 0::Int)
#413 := (or #416 #403)
#417 := (not #413)
#412 := (<= 1::Int 0::Int)
#414 := (or #412 #403)
#415 := (not #414)
#396 := (or #415 #417)
#736 := (if #396 #520 #735)
#411 := (= 1::Int 0::Int)
#737 := (if #411 #73 #736)
#410 := (= #70 1::Int)
#326 := (= -1::Int 0::Int)
#732 := (if #326 #410 #737)
#575 := (or #572 #732)
#576 := (iff #575 #574)
#578 := (iff #574 #574)
#579 := [rewrite]: #578
#672 := (iff #732 #73)
#523 := (if false #410 #73)
#668 := (iff #523 #73)
#669 := [rewrite]: #668
#671 := (iff #732 #523)
#563 := (iff #737 #73)
#521 := (if false #73 #73)
#676 := (iff #521 #73)
#678 := [rewrite]: #676
#680 := (iff #737 #521)
#679 := (iff #736 #73)
#522 := (iff #736 #521)
#690 := (iff #735 #73)
#689 := (= #734 #70)
#704 := (+ #70 0::Int)
#694 := (= #704 #70)
#695 := [rewrite]: #694
#682 := (= #734 #704)
#687 := (= #402 0::Int)
#541 := (mod -1::Int 1::Int)
#685 := (= #541 0::Int)
#686 := [rewrite]: #685
#542 := (= #402 #541)
#699 := (= #401 1::Int)
#540 := [rewrite]: #699
#698 := (= #727 -1::Int)
#693 := [rewrite]: #698
#684 := [monotonicity #693 #540]: #542
#681 := [trans #684 #686]: #687
#688 := [monotonicity #681]: #682
#683 := [trans #688 #695]: #689
#519 := [monotonicity #683]: #690
#692 := (iff #520 #73)
#696 := (= #390 #70)
#701 := (= #390 #704)
#418 := (= #733 0::Int)
#422 := (* -1::Int 0::Int)
#702 := (= #422 0::Int)
#703 := [rewrite]: #702
#423 := (= #733 #422)
#711 := (= #731 0::Int)
#421 := [rewrite]: #711
#424 := [monotonicity #421]: #423
#700 := [trans #424 #703]: #418
#705 := [monotonicity #700]: #701
#691 := [trans #705 #695]: #696
#697 := [monotonicity #691]: #692
#710 := (iff #396 false)
#708 := (or false false)
#432 := (iff #708 false)
#706 := [rewrite]: #432
#709 := (iff #396 #708)
#438 := (iff #417 false)
#1 := true
#718 := (not true)
#715 := (iff #718 false)
#721 := [rewrite]: #715
#436 := (iff #417 #718)
#713 := (iff #413 true)
#365 := (or true true)
#726 := (iff #365 true)
#712 := [rewrite]: #726
#725 := (iff #413 #365)
#730 := (iff #403 true)
#373 := [rewrite]: #730
#724 := (iff #416 true)
#364 := [rewrite]: #724
#723 := [monotonicity #364 #373]: #725
#435 := [trans #723 #712]: #713
#437 := [monotonicity #435]: #436
#332 := [trans #437 #721]: #438
#359 := (iff #415 false)
#719 := (iff #415 #718)
#716 := (iff #414 true)
#714 := (or false true)
#379 := (iff #714 true)
#380 := [rewrite]: #379
#377 := (iff #414 #714)
#729 := (iff #412 false)
#389 := [rewrite]: #729
#378 := [monotonicity #389 #373]: #377
#717 := [trans #378 #380]: #716
#720 := [monotonicity #717]: #719
#722 := [trans #720 #721]: #359
#431 := [monotonicity #722 #332]: #709
#707 := [trans #431 #706]: #710
#675 := [monotonicity #707 #697 #519]: #522
#677 := [trans #675 #678]: #679
#388 := (iff #411 false)
#393 := [rewrite]: #388
#562 := [monotonicity #393 #677]: #680
#564 := [trans #562 #678]: #563
#738 := (iff #326 false)
#728 := [rewrite]: #738
#573 := [monotonicity #728 #564]: #671
#557 := [trans #573 #669]: #672
#577 := [monotonicity #557]: #576
#580 := [trans #577 #579]: #576
#568 := [quant-inst #8 #67]: #575
#673 := [mp #568 #580]: #574
[unit-resolution #673 #81 #752]: false
unsat
6e0487fe9c651d71e634cf8c64acf5989f144ad3 308 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#746 := (pattern #39)
#13 := 0::Int
#68 := -1::Int
#85 := (* -1::Int #19)
#81 := (* -1::Int #17)
#140 := (mod #81 #85)
#255 := (+ #39 #140)
#256 := (= #255 0::Int)
#40 := (mod #17 #19)
#252 := (* -1::Int #40)
#253 := (+ #39 #252)
#254 := (= #253 0::Int)
#107 := (<= #19 0::Int)
#114 := (>= #17 0::Int)
#199 := (or #114 #107)
#200 := (not #199)
#103 := (<= #17 0::Int)
#197 := (or #103 #107)
#198 := (not #197)
#203 := (or #198 #200)
#257 := (if #203 #254 #256)
#251 := (= #39 0::Int)
#21 := (= #17 0::Int)
#258 := (if #21 #251 #257)
#250 := (= #39 #17)
#22 := (= #19 0::Int)
#259 := (if #22 #250 #258)
#747 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #746) #259)
#262 := (forall (vars (?v0 Int) (?v1 Int)) #259)
#750 := (iff #262 #747)
#748 := (iff #259 #259)
#749 := [refl]: #748
#751 := [quant-intro #749]: #750
#146 := (* -1::Int #140)
#219 := (if #203 #40 #146)
#222 := (if #21 0::Int #219)
#225 := (if #22 #17 #222)
#228 := (= #39 #225)
#231 := (forall (vars (?v0 Int) (?v1 Int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#108 := (not #107)
#115 := (not #114)
#118 := (and #115 #108)
#104 := (not #103)
#111 := (and #104 #108)
#121 := (or #111 #118)
#166 := (if #121 #40 #146)
#169 := (if #21 0::Int #166)
#172 := (if #22 #17 #169)
#175 := (= #39 #172)
#178 := (forall (vars (?v0 Int) (?v1 Int)) #175)
#232 := (iff #178 #231)
#229 := (iff #175 #228)
#226 := (= #172 #225)
#223 := (= #169 #222)
#220 := (= #166 #219)
#204 := (iff #121 #203)
#201 := (iff #118 #200)
#202 := [rewrite]: #201
#191 := (iff #111 #198)
#192 := [rewrite]: #191
#205 := [monotonicity #192 #202]: #204
#221 := [monotonicity #205]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#189 := (~ #178 #178)
#188 := (~ #175 #175)
#185 := [refl]: #188
#190 := [nnf-pos #185]: #189
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (if #29 #40 #42)
#44 := (if #21 0::Int #43)
#45 := (if #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#181 := (iff #47 #178)
#151 := (if #29 #40 #146)
#154 := (if #21 0::Int #151)
#157 := (if #22 #17 #154)
#160 := (= #39 #157)
#163 := (forall (vars (?v0 Int) (?v1 Int)) #160)
#179 := (iff #163 #178)
#176 := (iff #160 #175)
#173 := (= #157 #172)
#170 := (= #154 #169)
#167 := (= #151 #166)
#122 := (iff #29 #121)
#119 := (iff #28 #118)
#109 := (iff #25 #108)
#110 := [rewrite]: #109
#116 := (iff #27 #115)
#117 := [rewrite]: #116
#120 := [monotonicity #117 #110]: #119
#112 := (iff #26 #111)
#105 := (iff #24 #104)
#106 := [rewrite]: #105
#113 := [monotonicity #106 #110]: #112
#123 := [monotonicity #113 #120]: #122
#168 := [monotonicity #123]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [quant-intro #177]: #179
#164 := (iff #47 #163)
#161 := (iff #46 #160)
#158 := (= #45 #157)
#155 := (= #44 #154)
#152 := (= #43 #151)
#149 := (= #42 #146)
#143 := (- #140)
#147 := (= #143 #146)
#148 := [rewrite]: #147
#144 := (= #42 #143)
#141 := (= #41 #140)
#86 := (= #32 #85)
#87 := [rewrite]: #86
#83 := (= #31 #81)
#84 := [rewrite]: #83
#142 := [monotonicity #84 #87]: #141
#145 := [monotonicity #142]: #144
#150 := [trans #145 #148]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#182 := [trans #165 #180]: #181
#139 := [asserted]: #47
#183 := [mp #139 #182]: #178
#186 := [mp~ #183 #190]: #178
#234 := [mp #186 #233]: #231
#265 := [mp #234 #264]: #262
#752 := [mp #265 #751]: #747
#8 := 3::Int
#9 := (f4 f5 3::Int)
#71 := (f3 #9 -1::Int)
#74 := (= #71 0::Int)
#77 := (not #74)
#10 := 1::Int
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#14 := (= #12 0::Int)
#15 := (not #14)
#78 := (iff #15 #77)
#75 := (iff #14 #74)
#72 := (= #12 #71)
#69 := (= #11 -1::Int)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#67 := [asserted]: #15
#82 := [mp #67 #79]: #77
#574 := (not #747)
#575 := (or #574 #74)
#401 := (* -1::Int -1::Int)
#727 := (* -1::Int 3::Int)
#402 := (mod #727 #401)
#734 := (+ #71 #402)
#735 := (= #734 0::Int)
#731 := (mod 3::Int -1::Int)
#733 := (* -1::Int #731)
#390 := (+ #71 #733)
#520 := (= #390 0::Int)
#403 := (<= -1::Int 0::Int)
#416 := (>= 3::Int 0::Int)
#413 := (or #416 #403)
#417 := (not #413)
#412 := (<= 3::Int 0::Int)
#414 := (or #412 #403)
#415 := (not #414)
#396 := (or #415 #417)
#736 := (if #396 #520 #735)
#411 := (= 3::Int 0::Int)
#737 := (if #411 #74 #736)
#410 := (= #71 3::Int)
#326 := (= -1::Int 0::Int)
#732 := (if #326 #410 #737)
#568 := (or #574 #732)
#577 := (iff #568 #575)
#579 := (iff #575 #575)
#580 := [rewrite]: #579
#557 := (iff #732 #74)
#671 := (if false #410 #74)
#669 := (iff #671 #74)
#672 := [rewrite]: #669
#573 := (iff #732 #671)
#564 := (iff #737 #74)
#522 := (if false #74 #74)
#678 := (iff #522 #74)
#679 := [rewrite]: #678
#562 := (iff #737 #522)
#677 := (iff #736 #74)
#675 := (iff #736 #522)
#519 := (iff #735 #74)
#683 := (= #734 #71)
#704 := (+ #71 0::Int)
#694 := (= #704 #71)
#695 := [rewrite]: #694
#688 := (= #734 #704)
#681 := (= #402 0::Int)
#698 := -3::Int
#542 := (mod -3::Int 1::Int)
#686 := (= #542 0::Int)
#687 := [rewrite]: #686
#684 := (= #402 #542)
#540 := (= #401 1::Int)
#541 := [rewrite]: #540
#693 := (= #727 -3::Int)
#699 := [rewrite]: #693
#685 := [monotonicity #699 #541]: #684
#682 := [trans #685 #687]: #681
#689 := [monotonicity #682]: #688
#690 := [trans #689 #695]: #683
#521 := [monotonicity #690]: #519
#692 := (iff #520 #74)
#696 := (= #390 #71)
#701 := (= #390 #704)
#418 := (= #733 0::Int)
#422 := (* -1::Int 0::Int)
#702 := (= #422 0::Int)
#703 := [rewrite]: #702
#423 := (= #733 #422)
#711 := (= #731 0::Int)
#421 := [rewrite]: #711
#424 := [monotonicity #421]: #423
#700 := [trans #424 #703]: #418
#705 := [monotonicity #700]: #701
#691 := [trans #705 #695]: #696
#697 := [monotonicity #691]: #692
#710 := (iff #396 false)
#708 := (or false false)
#432 := (iff #708 false)
#706 := [rewrite]: #432
#709 := (iff #396 #708)
#438 := (iff #417 false)
#1 := true
#718 := (not true)
#715 := (iff #718 false)
#721 := [rewrite]: #715
#436 := (iff #417 #718)
#713 := (iff #413 true)
#365 := (or true true)
#726 := (iff #365 true)
#712 := [rewrite]: #726
#725 := (iff #413 #365)
#730 := (iff #403 true)
#373 := [rewrite]: #730
#724 := (iff #416 true)
#364 := [rewrite]: #724
#723 := [monotonicity #364 #373]: #725
#435 := [trans #723 #712]: #713
#437 := [monotonicity #435]: #436
#332 := [trans #437 #721]: #438
#359 := (iff #415 false)
#719 := (iff #415 #718)
#716 := (iff #414 true)
#714 := (or false true)
#379 := (iff #714 true)
#380 := [rewrite]: #379
#377 := (iff #414 #714)
#729 := (iff #412 false)
#389 := [rewrite]: #729
#378 := [monotonicity #389 #373]: #377
#717 := [trans #378 #380]: #716
#720 := [monotonicity #717]: #719
#722 := [trans #720 #721]: #359
#431 := [monotonicity #722 #332]: #709
#707 := [trans #431 #706]: #710
#676 := [monotonicity #707 #697 #521]: #675
#680 := [trans #676 #679]: #677
#388 := (iff #411 false)
#393 := [rewrite]: #388
#563 := [monotonicity #393 #680]: #562
#523 := [trans #563 #679]: #564
#738 := (iff #326 false)
#728 := [rewrite]: #738
#668 := [monotonicity #728 #523]: #573
#572 := [trans #668 #672]: #557
#578 := [monotonicity #572]: #577
#673 := [trans #578 #580]: #577
#576 := [quant-inst #8 #68]: #568
#670 := [mp #576 #673]: #575
[unit-resolution #670 #82 #752]: false
unsat
cc50be1af933c0c97044d9c6c3e09dc4fd354986 288 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#747 := (pattern #39)
#13 := 0::Int
#68 := -1::Int
#85 := (* -1::Int #19)
#81 := (* -1::Int #17)
#140 := (mod #81 #85)
#255 := (+ #39 #140)
#256 := (= #255 0::Int)
#40 := (mod #17 #19)
#252 := (* -1::Int #40)
#253 := (+ #39 #252)
#254 := (= #253 0::Int)
#107 := (<= #19 0::Int)
#114 := (>= #17 0::Int)
#199 := (or #114 #107)
#200 := (not #199)
#103 := (<= #17 0::Int)
#197 := (or #103 #107)
#198 := (not #197)
#203 := (or #198 #200)
#257 := (if #203 #254 #256)
#251 := (= #39 0::Int)
#21 := (= #17 0::Int)
#258 := (if #21 #251 #257)
#250 := (= #39 #17)
#22 := (= #19 0::Int)
#259 := (if #22 #250 #258)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #259)
#262 := (forall (vars (?v0 Int) (?v1 Int)) #259)
#751 := (iff #262 #748)
#749 := (iff #259 #259)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#146 := (* -1::Int #140)
#219 := (if #203 #40 #146)
#222 := (if #21 0::Int #219)
#225 := (if #22 #17 #222)
#228 := (= #39 #225)
#231 := (forall (vars (?v0 Int) (?v1 Int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#108 := (not #107)
#115 := (not #114)
#118 := (and #115 #108)
#104 := (not #103)
#111 := (and #104 #108)
#121 := (or #111 #118)
#166 := (if #121 #40 #146)
#169 := (if #21 0::Int #166)
#172 := (if #22 #17 #169)
#175 := (= #39 #172)
#178 := (forall (vars (?v0 Int) (?v1 Int)) #175)
#232 := (iff #178 #231)
#229 := (iff #175 #228)
#226 := (= #172 #225)
#223 := (= #169 #222)
#220 := (= #166 #219)
#204 := (iff #121 #203)
#201 := (iff #118 #200)
#202 := [rewrite]: #201
#191 := (iff #111 #198)
#192 := [rewrite]: #191
#205 := [monotonicity #192 #202]: #204
#221 := [monotonicity #205]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#189 := (~ #178 #178)
#188 := (~ #175 #175)
#185 := [refl]: #188
#190 := [nnf-pos #185]: #189
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (if #29 #40 #42)
#44 := (if #21 0::Int #43)
#45 := (if #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#181 := (iff #47 #178)
#151 := (if #29 #40 #146)
#154 := (if #21 0::Int #151)
#157 := (if #22 #17 #154)
#160 := (= #39 #157)
#163 := (forall (vars (?v0 Int) (?v1 Int)) #160)
#179 := (iff #163 #178)
#176 := (iff #160 #175)
#173 := (= #157 #172)
#170 := (= #154 #169)
#167 := (= #151 #166)
#122 := (iff #29 #121)
#119 := (iff #28 #118)
#109 := (iff #25 #108)
#110 := [rewrite]: #109
#116 := (iff #27 #115)
#117 := [rewrite]: #116
#120 := [monotonicity #117 #110]: #119
#112 := (iff #26 #111)
#105 := (iff #24 #104)
#106 := [rewrite]: #105
#113 := [monotonicity #106 #110]: #112
#123 := [monotonicity #113 #120]: #122
#168 := [monotonicity #123]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [quant-intro #177]: #179
#164 := (iff #47 #163)
#161 := (iff #46 #160)
#158 := (= #45 #157)
#155 := (= #44 #154)
#152 := (= #43 #151)
#149 := (= #42 #146)
#143 := (- #140)
#147 := (= #143 #146)
#148 := [rewrite]: #147
#144 := (= #42 #143)
#141 := (= #41 #140)
#86 := (= #32 #85)
#87 := [rewrite]: #86
#83 := (= #31 #81)
#84 := [rewrite]: #83
#142 := [monotonicity #84 #87]: #141
#145 := [monotonicity #142]: #144
#150 := [trans #145 #148]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#182 := [trans #165 #180]: #181
#139 := [asserted]: #47
#183 := [mp #139 #182]: #178
#186 := [mp~ #183 #190]: #178
#234 := [mp #186 #233]: #231
#265 := [mp #234 #264]: #262
#753 := [mp #265 #752]: #748
decl f6 :: Int
#8 := f6
#9 := (f4 f5 f6)
#71 := (f3 #9 -1::Int)
#74 := (= #71 0::Int)
#77 := (not #74)
#10 := 1::Int
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#14 := (= #12 0::Int)
#15 := (not #14)
#78 := (iff #15 #77)
#75 := (iff #14 #74)
#72 := (= #12 #71)
#69 := (= #11 -1::Int)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#67 := [asserted]: #15
#82 := [mp #67 #79]: #77
#691 := (not #748)
#520 := (or #691 #74)
#402 := (* -1::Int -1::Int)
#728 := (* -1::Int f6)
#403 := (mod #728 #402)
#735 := (+ #71 #403)
#736 := (= #735 0::Int)
#732 := (mod f6 -1::Int)
#734 := (* -1::Int #732)
#391 := (+ #71 #734)
#521 := (= #391 0::Int)
#404 := (<= -1::Int 0::Int)
#417 := (>= f6 0::Int)
#414 := (or #417 #404)
#418 := (not #414)
#413 := (<= f6 0::Int)
#415 := (or #413 #404)
#416 := (not #415)
#397 := (or #416 #418)
#737 := (if #397 #521 #736)
#412 := (= f6 0::Int)
#738 := (if #412 #74 #737)
#411 := (= #71 f6)
#327 := (= -1::Int 0::Int)
#733 := (if #327 #411 #738)
#522 := (or #691 #733)
#676 := (iff #522 #520)
#679 := (iff #520 #520)
#680 := [rewrite]: #679
#690 := (iff #733 #74)
#687 := (if false #411 #74)
#683 := (iff #687 #74)
#689 := [rewrite]: #683
#688 := (iff #733 #687)
#685 := (iff #738 #74)
#694 := (if #412 #74 #74)
#542 := (iff #694 #74)
#543 := [rewrite]: #542
#700 := (iff #738 #694)
#698 := (iff #737 #74)
#695 := (if false #521 #74)
#692 := (iff #695 #74)
#693 := [rewrite]: #692
#696 := (iff #737 #695)
#702 := (iff #736 #74)
#701 := (= #735 #71)
#424 := (+ #71 0::Int)
#704 := (= #424 #71)
#419 := [rewrite]: #704
#425 := (= #735 #424)
#422 := (= #403 0::Int)
#433 := (mod #728 1::Int)
#708 := (= #433 0::Int)
#712 := [rewrite]: #708
#707 := (= #403 #433)
#710 := (= #402 1::Int)
#432 := [rewrite]: #710
#711 := [monotonicity #432]: #707
#423 := [trans #711 #712]: #422
#703 := [monotonicity #423]: #425
#705 := [trans #703 #419]: #701
#706 := [monotonicity #705]: #702
#333 := (iff #397 false)
#714 := (or false false)
#438 := (iff #714 false)
#439 := [rewrite]: #438
#436 := (iff #397 #714)
#727 := (iff #418 false)
#1 := true
#380 := (not true)
#718 := (iff #380 false)
#719 := [rewrite]: #718
#726 := (iff #418 #380)
#365 := (iff #414 true)
#716 := (or #417 true)
#723 := (iff #716 true)
#725 := [rewrite]: #723
#722 := (iff #414 #716)
#389 := (iff #404 true)
#394 := [rewrite]: #389
#360 := [monotonicity #394]: #722
#366 := [trans #360 #725]: #365
#724 := [monotonicity #366]: #726
#713 := [trans #724 #719]: #727
#720 := (iff #416 false)
#381 := (iff #416 #380)
#378 := (iff #415 true)
#730 := (or #413 true)
#374 := (iff #730 true)
#715 := [rewrite]: #374
#390 := (iff #415 #730)
#731 := [monotonicity #394]: #390
#379 := [trans #731 #715]: #378
#717 := [monotonicity #379]: #381
#721 := [trans #717 #719]: #720
#437 := [monotonicity #721 #713]: #436
#709 := [trans #437 #439]: #333
#697 := [monotonicity #709 #706]: #696
#699 := [trans #697 #693]: #698
#541 := [monotonicity #699]: #700
#686 := [trans #541 #543]: #685
#739 := (iff #327 false)
#729 := [rewrite]: #739
#682 := [monotonicity #729 #686]: #688
#684 := [trans #682 #689]: #690
#677 := [monotonicity #684]: #676
#678 := [trans #677 #680]: #676
#523 := [quant-inst #8 #68]: #522
#681 := [mp #523 #678]: #520
[unit-resolution #681 #82 #753]: false
unsat
7b2dc6ed2136e8f88a408eac485e7ff01d341877 287 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#36 := (f4 f5 #15)
#37 := (f3 #36 #17)
#733 := (pattern #37)
#8 := 0::Int
#67 := -1::Int
#71 := (* -1::Int #17)
#68 := (* -1::Int #15)
#126 := (mod #68 #71)
#241 := (+ #37 #126)
#242 := (= #241 0::Int)
#38 := (mod #15 #17)
#238 := (* -1::Int #38)
#239 := (+ #37 #238)
#240 := (= #239 0::Int)
#93 := (<= #17 0::Int)
#100 := (>= #15 0::Int)
#185 := (or #100 #93)
#186 := (not #185)
#89 := (<= #15 0::Int)
#183 := (or #89 #93)
#184 := (not #183)
#189 := (or #184 #186)
#243 := (if #189 #240 #242)
#237 := (= #37 0::Int)
#19 := (= #15 0::Int)
#244 := (if #19 #237 #243)
#236 := (= #37 #15)
#20 := (= #17 0::Int)
#245 := (if #20 #236 #244)
#734 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #733) #245)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#737 := (iff #248 #734)
#735 := (iff #245 #245)
#736 := [refl]: #735
#738 := [quant-intro #736]: #737
#132 := (* -1::Int #126)
#205 := (if #189 #38 #132)
#208 := (if #19 0::Int #205)
#211 := (if #20 #15 #208)
#214 := (= #37 #211)
#217 := (forall (vars (?v0 Int) (?v1 Int)) #214)
#249 := (iff #217 #248)
#246 := (iff #214 #245)
#247 := [rewrite]: #246
#250 := [quant-intro #247]: #249
#94 := (not #93)
#101 := (not #100)
#104 := (and #101 #94)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#152 := (if #107 #38 #132)
#155 := (if #19 0::Int #152)
#158 := (if #20 #15 #155)
#161 := (= #37 #158)
#164 := (forall (vars (?v0 Int) (?v1 Int)) #161)
#218 := (iff #164 #217)
#215 := (iff #161 #214)
#212 := (= #158 #211)
#209 := (= #155 #208)
#206 := (= #152 #205)
#190 := (iff #107 #189)
#187 := (iff #104 #186)
#188 := [rewrite]: #187
#177 := (iff #97 #184)
#178 := [rewrite]: #177
#191 := [monotonicity #178 #188]: #190
#207 := [monotonicity #191]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [monotonicity #213]: #215
#219 := [quant-intro #216]: #218
#175 := (~ #164 #164)
#174 := (~ #161 #161)
#171 := [refl]: #174
#176 := [nnf-pos #171]: #175
#30 := (- #17)
#29 := (- #15)
#39 := (mod #29 #30)
#40 := (- #39)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#41 := (if #27 #38 #40)
#42 := (if #19 0::Int #41)
#43 := (if #20 #15 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#167 := (iff #45 #164)
#137 := (if #27 #38 #132)
#140 := (if #19 0::Int #137)
#143 := (if #20 #15 #140)
#146 := (= #37 #143)
#149 := (forall (vars (?v0 Int) (?v1 Int)) #146)
#165 := (iff #149 #164)
#162 := (iff #146 #161)
#159 := (= #143 #158)
#156 := (= #140 #155)
#153 := (= #137 #152)
#108 := (iff #27 #107)
#105 := (iff #26 #104)
#95 := (iff #23 #94)
#96 := [rewrite]: #95
#102 := (iff #25 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103 #96]: #105
#98 := (iff #24 #97)
#91 := (iff #22 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#154 := [monotonicity #109]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#150 := (iff #45 #149)
#147 := (iff #44 #146)
#144 := (= #43 #143)
#141 := (= #42 #140)
#138 := (= #41 #137)
#135 := (= #40 #132)
#129 := (- #126)
#133 := (= #129 #132)
#134 := [rewrite]: #133
#130 := (= #40 #129)
#127 := (= #39 #126)
#72 := (= #30 #71)
#73 := [rewrite]: #72
#69 := (= #29 #68)
#70 := [rewrite]: #69
#128 := [monotonicity #70 #73]: #127
#131 := [monotonicity #128]: #130
#136 := [trans #131 #134]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#168 := [trans #151 #166]: #167
#125 := [asserted]: #45
#169 := [mp #125 #168]: #164
#172 := [mp~ #169 #176]: #164
#220 := [mp #172 #219]: #217
#251 := [mp #220 #250]: #248
#739 := [mp #251 #738]: #734
#10 := 3::Int
#9 := (f4 f5 0::Int)
#11 := (f3 #9 3::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#65 := [asserted]: #13
#658 := (not #734)
#560 := (or #658 #12)
#714 := (* -1::Int 3::Int)
#507 := (* -1::Int 0::Int)
#388 := (mod #507 #714)
#389 := (+ #11 #388)
#721 := (= #389 0::Int)
#383 := (mod 0::Int 3::Int)
#718 := (* -1::Int #383)
#720 := (+ #11 #718)
#377 := (= #720 0::Int)
#399 := (<= 3::Int 0::Int)
#402 := (>= 0::Int 0::Int)
#403 := (or #402 #399)
#400 := (not #403)
#398 := (<= 0::Int 0::Int)
#390 := (or #398 #399)
#401 := (not #390)
#404 := (or #401 #400)
#722 := (if #404 #377 #721)
#397 := (= 0::Int 0::Int)
#723 := (if #397 #12 #722)
#313 := (= 3::Int 0::Int)
#724 := (if #313 #12 #723)
#655 := (or #658 #724)
#659 := (iff #655 #560)
#559 := (iff #560 #560)
#561 := [rewrite]: #559
#551 := (iff #724 #12)
#669 := (if false #12 #12)
#670 := (iff #669 #12)
#677 := [rewrite]: #670
#549 := (iff #724 #669)
#664 := (iff #723 #12)
#1 := true
#509 := (if true #12 #12)
#665 := (iff #509 #12)
#666 := [rewrite]: #665
#662 := (iff #723 #509)
#506 := (iff #722 #12)
#675 := (iff #722 #669)
#674 := (iff #721 #12)
#672 := (= #389 #11)
#411 := (+ #11 0::Int)
#405 := (= #411 #11)
#687 := [rewrite]: #405
#529 := (= #389 #411)
#527 := (= #388 0::Int)
#682 := -3::Int
#679 := (mod 0::Int -3::Int)
#680 := (= #679 0::Int)
#686 := [rewrite]: #680
#684 := (= #388 #679)
#683 := (= #714 -3::Int)
#678 := [rewrite]: #683
#698 := (= #507 0::Int)
#408 := [rewrite]: #698
#685 := [monotonicity #408 #678]: #684
#528 := [trans #685 #686]: #527
#671 := [monotonicity #528]: #529
#673 := [trans #671 #687]: #672
#668 := [monotonicity #673]: #674
#692 := (iff #377 #12)
#691 := (= #720 #11)
#689 := (= #720 #411)
#409 := (= #718 0::Int)
#697 := (= #718 #507)
#419 := (= #383 0::Int)
#693 := [rewrite]: #419
#694 := [monotonicity #693]: #697
#410 := [trans #694 #408]: #409
#690 := [monotonicity #410]: #689
#688 := [trans #690 #687]: #691
#681 := [monotonicity #688]: #692
#696 := (iff #404 false)
#423 := (or false false)
#319 := (iff #423 false)
#695 := [rewrite]: #319
#424 := (iff #404 #423)
#700 := (iff #400 false)
#704 := (not true)
#707 := (iff #704 false)
#702 := [rewrite]: #707
#713 := (iff #400 #704)
#712 := (iff #403 true)
#360 := (or true false)
#365 := (iff #360 true)
#366 := [rewrite]: #365
#351 := (iff #403 #360)
#376 := (iff #399 false)
#717 := [rewrite]: #376
#709 := (iff #402 true)
#711 := [rewrite]: #709
#352 := [monotonicity #711 #717]: #351
#710 := [trans #352 #366]: #712
#699 := [monotonicity #710]: #713
#422 := [trans #699 #702]: #700
#708 := (iff #401 false)
#705 := (iff #401 #704)
#367 := (iff #390 true)
#701 := (iff #390 #360)
#380 := (iff #398 true)
#716 := [rewrite]: #380
#364 := [monotonicity #716 #717]: #701
#703 := [trans #364 #366]: #367
#706 := [monotonicity #703]: #705
#346 := [trans #706 #702]: #708
#425 := [monotonicity #346 #422]: #424
#418 := [trans #425 #695]: #696
#676 := [monotonicity #418 #681 #668]: #675
#508 := [trans #676 #677]: #506
#715 := (iff #397 true)
#375 := [rewrite]: #715
#663 := [monotonicity #375 #508]: #662
#667 := [trans #663 #666]: #664
#719 := (iff #313 false)
#725 := [rewrite]: #719
#550 := [monotonicity #725 #667]: #549
#510 := [trans #550 #677]: #551
#544 := [monotonicity #510]: #659
#562 := [trans #544 #561]: #659
#656 := [quant-inst #8 #10]: #655
#555 := [mp #656 #562]: #560
[unit-resolution #555 #65 #739]: false
unsat
022cbf4beb2e566dadff63f0d8408936ecfe6766 300 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#747 := (pattern #38)
#8 := 0::Int
#80 := -1::Int
#85 := (* -1::Int #18)
#82 := (* -1::Int #16)
#140 := (mod #82 #85)
#255 := (+ #38 #140)
#256 := (= #255 0::Int)
#39 := (mod #16 #18)
#252 := (* -1::Int #39)
#253 := (+ #38 #252)
#254 := (= #253 0::Int)
#107 := (<= #18 0::Int)
#114 := (>= #16 0::Int)
#199 := (or #114 #107)
#200 := (not #199)
#103 := (<= #16 0::Int)
#197 := (or #103 #107)
#198 := (not #197)
#203 := (or #198 #200)
#257 := (if #203 #254 #256)
#251 := (= #38 0::Int)
#20 := (= #16 0::Int)
#258 := (if #20 #251 #257)
#250 := (= #38 #16)
#21 := (= #18 0::Int)
#259 := (if #21 #250 #258)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #259)
#262 := (forall (vars (?v0 Int) (?v1 Int)) #259)
#751 := (iff #262 #748)
#749 := (iff #259 #259)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#146 := (* -1::Int #140)
#219 := (if #203 #39 #146)
#222 := (if #20 0::Int #219)
#225 := (if #21 #16 #222)
#228 := (= #38 #225)
#231 := (forall (vars (?v0 Int) (?v1 Int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#108 := (not #107)
#115 := (not #114)
#118 := (and #115 #108)
#104 := (not #103)
#111 := (and #104 #108)
#121 := (or #111 #118)
#166 := (if #121 #39 #146)
#169 := (if #20 0::Int #166)
#172 := (if #21 #16 #169)
#175 := (= #38 #172)
#178 := (forall (vars (?v0 Int) (?v1 Int)) #175)
#232 := (iff #178 #231)
#229 := (iff #175 #228)
#226 := (= #172 #225)
#223 := (= #169 #222)
#220 := (= #166 #219)
#204 := (iff #121 #203)
#201 := (iff #118 #200)
#202 := [rewrite]: #201
#191 := (iff #111 #198)
#192 := [rewrite]: #191
#205 := [monotonicity #192 #202]: #204
#221 := [monotonicity #205]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#189 := (~ #178 #178)
#188 := (~ #175 #175)
#185 := [refl]: #188
#190 := [nnf-pos #185]: #189
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#181 := (iff #46 #178)
#151 := (if #28 #39 #146)
#154 := (if #20 0::Int #151)
#157 := (if #21 #16 #154)
#160 := (= #38 #157)
#163 := (forall (vars (?v0 Int) (?v1 Int)) #160)
#179 := (iff #163 #178)
#176 := (iff #160 #175)
#173 := (= #157 #172)
#170 := (= #154 #169)
#167 := (= #151 #166)
#122 := (iff #28 #121)
#119 := (iff #27 #118)
#109 := (iff #24 #108)
#110 := [rewrite]: #109
#116 := (iff #26 #115)
#117 := [rewrite]: #116
#120 := [monotonicity #117 #110]: #119
#112 := (iff #25 #111)
#105 := (iff #23 #104)
#106 := [rewrite]: #105
#113 := [monotonicity #106 #110]: #112
#123 := [monotonicity #113 #120]: #122
#168 := [monotonicity #123]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [quant-intro #177]: #179
#164 := (iff #46 #163)
#161 := (iff #45 #160)
#158 := (= #44 #157)
#155 := (= #43 #154)
#152 := (= #42 #151)
#149 := (= #41 #146)
#143 := (- #140)
#147 := (= #143 #146)
#148 := [rewrite]: #147
#144 := (= #41 #143)
#141 := (= #40 #140)
#86 := (= #31 #85)
#87 := [rewrite]: #86
#83 := (= #30 #82)
#84 := [rewrite]: #83
#142 := [monotonicity #84 #87]: #141
#145 := [monotonicity #142]: #144
#150 := [trans #145 #148]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#182 := [trans #165 #180]: #181
#139 := [asserted]: #46
#183 := [mp #139 #182]: #178
#186 := [mp~ #183 #190]: #178
#234 := [mp #186 #233]: #231
#265 := [mp #234 #264]: #262
#753 := [mp #265 #752]: #748
#67 := -3::Int
#9 := (f4 f5 0::Int)
#70 := (f3 #9 -3::Int)
#73 := (= #70 0::Int)
#76 := (not #73)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#13 := (= #12 0::Int)
#14 := (not #13)
#77 := (iff #14 #76)
#74 := (iff #13 #73)
#71 := (= #12 #70)
#68 := (= #11 -3::Int)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#66 := [asserted]: #14
#81 := [mp #66 #78]: #76
#524 := (not #748)
#672 := (or #524 #73)
#728 := (* -1::Int -3::Int)
#521 := (* -1::Int 0::Int)
#402 := (mod #521 #728)
#403 := (+ #70 #402)
#735 := (= #403 0::Int)
#397 := (mod 0::Int -3::Int)
#732 := (* -1::Int #397)
#734 := (+ #70 #732)
#391 := (= #734 0::Int)
#413 := (<= -3::Int 0::Int)
#416 := (>= 0::Int 0::Int)
#417 := (or #416 #413)
#414 := (not #417)
#412 := (<= 0::Int 0::Int)
#404 := (or #412 #413)
#415 := (not #404)
#418 := (or #415 #414)
#736 := (if #418 #391 #735)
#411 := (= 0::Int 0::Int)
#737 := (if #411 #73 #736)
#327 := (= -3::Int 0::Int)
#738 := (if #327 #73 #737)
#574 := (or #524 #738)
#670 := (iff #574 #672)
#558 := (iff #672 #672)
#573 := [rewrite]: #558
#564 := (iff #738 #73)
#682 := (if false #73 #73)
#690 := (iff #682 #73)
#684 := [rewrite]: #690
#681 := (iff #738 #682)
#680 := (iff #737 #73)
#1 := true
#522 := (if true #73 #73)
#677 := (iff #522 #73)
#679 := [rewrite]: #677
#523 := (iff #737 #522)
#691 := (iff #736 #73)
#683 := (iff #736 #682)
#687 := (iff #735 #73)
#685 := (= #403 #70)
#425 := (+ #70 0::Int)
#419 := (= #425 #70)
#701 := [rewrite]: #419
#542 := (= #403 #425)
#700 := (= #402 0::Int)
#692 := (mod 0::Int 3::Int)
#699 := (= #692 0::Int)
#694 := [rewrite]: #699
#693 := (= #402 #692)
#696 := (= #728 3::Int)
#697 := [rewrite]: #696
#712 := (= #521 0::Int)
#422 := [rewrite]: #712
#698 := [monotonicity #422 #697]: #693
#541 := [trans #698 #694]: #700
#543 := [monotonicity #541]: #542
#686 := [trans #543 #701]: #685
#688 := [monotonicity #686]: #687
#706 := (iff #391 #73)
#705 := (= #734 #70)
#703 := (= #734 #425)
#423 := (= #732 0::Int)
#711 := (= #732 #521)
#433 := (= #397 0::Int)
#707 := [rewrite]: #433
#708 := [monotonicity #707]: #711
#424 := [trans #708 #422]: #423
#704 := [monotonicity #424]: #703
#702 := [trans #704 #701]: #705
#695 := [monotonicity #702]: #706
#710 := (iff #418 false)
#437 := (or false false)
#333 := (iff #437 false)
#709 := [rewrite]: #333
#438 := (iff #418 #437)
#714 := (iff #414 false)
#718 := (not true)
#721 := (iff #718 false)
#716 := [rewrite]: #721
#727 := (iff #414 #718)
#726 := (iff #417 true)
#374 := (or true true)
#379 := (iff #374 true)
#380 := [rewrite]: #379
#365 := (iff #417 #374)
#390 := (iff #413 true)
#731 := [rewrite]: #390
#723 := (iff #416 true)
#725 := [rewrite]: #723
#366 := [monotonicity #725 #731]: #365
#724 := [trans #366 #380]: #726
#713 := [monotonicity #724]: #727
#436 := [trans #713 #716]: #714
#722 := (iff #415 false)
#719 := (iff #415 #718)
#381 := (iff #404 true)
#715 := (iff #404 #374)
#394 := (iff #412 true)
#730 := [rewrite]: #394
#378 := [monotonicity #730 #731]: #715
#717 := [trans #378 #380]: #381
#720 := [monotonicity #717]: #719
#360 := [trans #720 #716]: #722
#439 := [monotonicity #360 #436]: #438
#432 := [trans #439 #709]: #710
#689 := [monotonicity #432 #695 #688]: #683
#520 := [trans #689 #684]: #691
#729 := (iff #411 true)
#389 := [rewrite]: #729
#676 := [monotonicity #389 #520]: #523
#678 := [trans #676 #679]: #680
#733 := (iff #327 false)
#739 := [rewrite]: #733
#563 := [monotonicity #739 #678]: #681
#565 := [trans #563 #684]: #564
#673 := [monotonicity #565]: #670
#575 := [trans #673 #573]: #670
#669 := [quant-inst #8 #67]: #574
#576 := [mp #669 #575]: #672
[unit-resolution #576 #81 #753]: false
unsat
2fdc36e59c59da56b5dc6125f7d3f633e77a3d9e 313 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #15)
#38 := (f3 #37 #17)
#733 := (pattern #38)
#19 := 0::Int
#68 := -1::Int
#72 := (* -1::Int #17)
#69 := (* -1::Int #15)
#127 := (mod #69 #72)
#242 := (+ #38 #127)
#243 := (= #242 0::Int)
#39 := (mod #15 #17)
#239 := (* -1::Int #39)
#240 := (+ #38 #239)
#241 := (= #240 0::Int)
#94 := (<= #17 0::Int)
#101 := (>= #15 0::Int)
#186 := (or #101 #94)
#187 := (not #186)
#90 := (<= #15 0::Int)
#184 := (or #90 #94)
#185 := (not #184)
#190 := (or #185 #187)
#244 := (if #190 #241 #243)
#238 := (= #38 0::Int)
#20 := (= #15 0::Int)
#245 := (if #20 #238 #244)
#237 := (= #38 #15)
#21 := (= #17 0::Int)
#246 := (if #21 #237 #245)
#734 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #733) #246)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#737 := (iff #249 #734)
#735 := (iff #246 #246)
#736 := [refl]: #735
#738 := [quant-intro #736]: #737
#133 := (* -1::Int #127)
#206 := (if #190 #39 #133)
#209 := (if #20 0::Int #206)
#212 := (if #21 #15 #209)
#215 := (= #38 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#250 := (iff #218 #249)
#247 := (iff #215 #246)
#248 := [rewrite]: #247
#251 := [quant-intro #248]: #250
#95 := (not #94)
#102 := (not #101)
#105 := (and #102 #95)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#153 := (if #108 #39 #133)
#156 := (if #20 0::Int #153)
#159 := (if #21 #15 #156)
#162 := (= #38 #159)
#165 := (forall (vars (?v0 Int) (?v1 Int)) #162)
#219 := (iff #165 #218)
#216 := (iff #162 #215)
#213 := (= #159 #212)
#210 := (= #156 #209)
#207 := (= #153 #206)
#191 := (iff #108 #190)
#188 := (iff #105 #187)
#189 := [rewrite]: #188
#178 := (iff #98 #185)
#179 := [rewrite]: #178
#192 := [monotonicity #179 #189]: #191
#208 := [monotonicity #192]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#176 := (~ #165 #165)
#175 := (~ #162 #162)
#172 := [refl]: #175
#177 := [nnf-pos #172]: #176
#31 := (- #17)
#30 := (- #15)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #15 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#168 := (iff #46 #165)
#138 := (if #28 #39 #133)
#141 := (if #20 0::Int #138)
#144 := (if #21 #15 #141)
#147 := (= #38 #144)
#150 := (forall (vars (?v0 Int) (?v1 Int)) #147)
#166 := (iff #150 #165)
#163 := (iff #147 #162)
#160 := (= #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#109 := (iff #28 #108)
#106 := (iff #27 #105)
#96 := (iff #24 #95)
#97 := [rewrite]: #96
#103 := (iff #26 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104 #97]: #106
#99 := (iff #25 #98)
#92 := (iff #23 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#155 := [monotonicity #110]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [quant-intro #164]: #166
#151 := (iff #46 #150)
#148 := (iff #45 #147)
#145 := (= #44 #144)
#142 := (= #43 #141)
#139 := (= #42 #138)
#136 := (= #41 #133)
#130 := (- #127)
#134 := (= #130 #133)
#135 := [rewrite]: #134
#131 := (= #41 #130)
#128 := (= #40 #127)
#73 := (= #31 #72)
#74 := [rewrite]: #73
#70 := (= #30 #69)
#71 := [rewrite]: #70
#129 := [monotonicity #71 #74]: #128
#132 := [monotonicity #129]: #131
#137 := [trans #132 #135]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#169 := [trans #152 #167]: #168
#126 := [asserted]: #46
#170 := [mp #126 #169]: #165
#173 := [mp~ #170 #177]: #165
#221 := [mp #173 #220]: #218
#252 := [mp #221 #251]: #249
#739 := [mp #252 #738]: #734
#8 := 1::Int
#10 := 3::Int
#9 := (f4 f5 1::Int)
#11 := (f3 #9 3::Int)
#12 := (= #11 1::Int)
#13 := (not #12)
#66 := [asserted]: #13
#652 := (not #734)
#653 := (or #652 #12)
#388 := (* -1::Int 3::Int)
#714 := (* -1::Int 1::Int)
#389 := (mod #714 #388)
#721 := (+ #11 #389)
#722 := (= #721 0::Int)
#718 := (mod 1::Int 3::Int)
#720 := (* -1::Int #718)
#377 := (+ #11 #720)
#507 := (= #377 0::Int)
#390 := (<= 3::Int 0::Int)
#403 := (>= 1::Int 0::Int)
#400 := (or #403 #390)
#404 := (not #400)
#399 := (<= 1::Int 0::Int)
#401 := (or #399 #390)
#402 := (not #401)
#383 := (or #402 #404)
#723 := (if #383 #507 #722)
#398 := (= #11 0::Int)
#397 := (= 1::Int 0::Int)
#724 := (if #397 #398 #723)
#313 := (= 3::Int 0::Int)
#719 := (if #313 #12 #724)
#649 := (or #652 #719)
#643 := (iff #649 #653)
#645 := (iff #653 #653)
#646 := [rewrite]: #645
#641 := (iff #719 #12)
#661 := (if false #12 #12)
#642 := (iff #661 #12)
#639 := [rewrite]: #642
#648 := (iff #719 #661)
#660 := (iff #724 #12)
#563 := (if false #398 #12)
#566 := (iff #563 #12)
#567 := [rewrite]: #566
#564 := (iff #724 #563)
#562 := (iff #723 #12)
#550 := -2::Int
#551 := (= #11 -2::Int)
#1 := true
#656 := (if true #12 #551)
#559 := (iff #656 #12)
#561 := [rewrite]: #559
#659 := (iff #723 #656)
#560 := (iff #722 #551)
#273 := 2::Int
#509 := (+ 2::Int #11)
#664 := (= #509 0::Int)
#510 := (iff #664 #551)
#658 := [rewrite]: #510
#667 := (iff #722 #664)
#665 := (= #721 #509)
#677 := (+ #11 2::Int)
#662 := (= #677 #509)
#663 := [rewrite]: #662
#506 := (= #721 #677)
#676 := (= #389 2::Int)
#529 := -3::Int
#673 := (mod -1::Int -3::Int)
#669 := (= #673 2::Int)
#675 := [rewrite]: #669
#674 := (= #389 #673)
#671 := (= #388 -3::Int)
#672 := [rewrite]: #671
#411 := (= #714 -1::Int)
#689 := [rewrite]: #411
#668 := [monotonicity #689 #672]: #674
#670 := [trans #668 #675]: #676
#508 := [monotonicity #670]: #506
#666 := [trans #508 #663]: #665
#549 := [monotonicity #666]: #667
#655 := [trans #549 #658]: #560
#527 := (iff #507 #12)
#692 := (+ -1::Int #11)
#679 := (= #692 0::Int)
#680 := (iff #679 #12)
#686 := [rewrite]: #680
#684 := (iff #507 #679)
#683 := (= #377 #692)
#687 := (+ #11 -1::Int)
#681 := (= #687 #692)
#682 := [rewrite]: #681
#691 := (= #377 #687)
#690 := (= #720 -1::Int)
#409 := (= #720 #714)
#698 := (= #718 1::Int)
#408 := [rewrite]: #698
#410 := [monotonicity #408]: #409
#405 := [trans #410 #689]: #690
#688 := [monotonicity #405]: #691
#678 := [trans #688 #682]: #683
#685 := [monotonicity #678]: #684
#528 := [trans #685 #686]: #527
#697 := (iff #383 true)
#352 := (or true false)
#713 := (iff #352 true)
#699 := [rewrite]: #713
#419 := (iff #383 #352)
#696 := (iff #404 false)
#423 := (not true)
#319 := (iff #423 false)
#695 := [rewrite]: #319
#424 := (iff #404 #423)
#700 := (iff #400 true)
#712 := (iff #400 #352)
#717 := (iff #390 false)
#360 := [rewrite]: #717
#711 := (iff #403 true)
#351 := [rewrite]: #711
#710 := [monotonicity #351 #360]: #712
#422 := [trans #710 #699]: #700
#425 := [monotonicity #422]: #424
#418 := [trans #425 #695]: #696
#346 := (iff #402 true)
#705 := (not false)
#702 := (iff #705 true)
#708 := [rewrite]: #702
#706 := (iff #402 #705)
#703 := (iff #401 false)
#701 := (or false false)
#366 := (iff #701 false)
#367 := [rewrite]: #366
#364 := (iff #401 #701)
#716 := (iff #399 false)
#376 := [rewrite]: #716
#365 := [monotonicity #376 #360]: #364
#704 := [trans #365 #367]: #703
#707 := [monotonicity #704]: #706
#709 := [trans #707 #708]: #346
#693 := [monotonicity #709 #418]: #419
#694 := [trans #693 #699]: #697
#544 := [monotonicity #694 #528 #655]: #659
#555 := [trans #544 #561]: #562
#375 := (iff #397 false)
#380 := [rewrite]: #375
#565 := [monotonicity #380 #555]: #564
#657 := [trans #565 #567]: #660
#725 := (iff #313 false)
#715 := [rewrite]: #725
#650 := [monotonicity #715 #657]: #648
#651 := [trans #650 #639]: #641
#644 := [monotonicity #651]: #643
#640 := [trans #644 #646]: #643
#654 := [quant-inst #8 #10]: #649
#647 := [mp #654 #640]: #653
[unit-resolution #647 #66 #739]: false
unsat
4ee9cc2bcab1ec5264a5fe09246eabd52d90f088 288 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#36 := (f4 f5 #15)
#37 := (f3 #36 #17)
#733 := (pattern #37)
#11 := 0::Int
#67 := -1::Int
#71 := (* -1::Int #17)
#68 := (* -1::Int #15)
#126 := (mod #68 #71)
#241 := (+ #37 #126)
#242 := (= #241 0::Int)
#38 := (mod #15 #17)
#238 := (* -1::Int #38)
#239 := (+ #37 #238)
#240 := (= #239 0::Int)
#93 := (<= #17 0::Int)
#100 := (>= #15 0::Int)
#185 := (or #100 #93)
#186 := (not #185)
#89 := (<= #15 0::Int)
#183 := (or #89 #93)
#184 := (not #183)
#189 := (or #184 #186)
#243 := (if #189 #240 #242)
#237 := (= #37 0::Int)
#19 := (= #15 0::Int)
#244 := (if #19 #237 #243)
#236 := (= #37 #15)
#20 := (= #17 0::Int)
#245 := (if #20 #236 #244)
#734 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #733) #245)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#737 := (iff #248 #734)
#735 := (iff #245 #245)
#736 := [refl]: #735
#738 := [quant-intro #736]: #737
#132 := (* -1::Int #126)
#205 := (if #189 #38 #132)
#208 := (if #19 0::Int #205)
#211 := (if #20 #15 #208)
#214 := (= #37 #211)
#217 := (forall (vars (?v0 Int) (?v1 Int)) #214)
#249 := (iff #217 #248)
#246 := (iff #214 #245)
#247 := [rewrite]: #246
#250 := [quant-intro #247]: #249
#94 := (not #93)
#101 := (not #100)
#104 := (and #101 #94)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#152 := (if #107 #38 #132)
#155 := (if #19 0::Int #152)
#158 := (if #20 #15 #155)
#161 := (= #37 #158)
#164 := (forall (vars (?v0 Int) (?v1 Int)) #161)
#218 := (iff #164 #217)
#215 := (iff #161 #214)
#212 := (= #158 #211)
#209 := (= #155 #208)
#206 := (= #152 #205)
#190 := (iff #107 #189)
#187 := (iff #104 #186)
#188 := [rewrite]: #187
#177 := (iff #97 #184)
#178 := [rewrite]: #177
#191 := [monotonicity #178 #188]: #190
#207 := [monotonicity #191]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [monotonicity #213]: #215
#219 := [quant-intro #216]: #218
#175 := (~ #164 #164)
#174 := (~ #161 #161)
#171 := [refl]: #174
#176 := [nnf-pos #171]: #175
#30 := (- #17)
#29 := (- #15)
#39 := (mod #29 #30)
#40 := (- #39)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#41 := (if #27 #38 #40)
#42 := (if #19 0::Int #41)
#43 := (if #20 #15 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#167 := (iff #45 #164)
#137 := (if #27 #38 #132)
#140 := (if #19 0::Int #137)
#143 := (if #20 #15 #140)
#146 := (= #37 #143)
#149 := (forall (vars (?v0 Int) (?v1 Int)) #146)
#165 := (iff #149 #164)
#162 := (iff #146 #161)
#159 := (= #143 #158)
#156 := (= #140 #155)
#153 := (= #137 #152)
#108 := (iff #27 #107)
#105 := (iff #26 #104)
#95 := (iff #23 #94)
#96 := [rewrite]: #95
#102 := (iff #25 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103 #96]: #105
#98 := (iff #24 #97)
#91 := (iff #22 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#154 := [monotonicity #109]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#150 := (iff #45 #149)
#147 := (iff #44 #146)
#144 := (= #43 #143)
#141 := (= #42 #140)
#138 := (= #41 #137)
#135 := (= #40 #132)
#129 := (- #126)
#133 := (= #129 #132)
#134 := [rewrite]: #133
#130 := (= #40 #129)
#127 := (= #39 #126)
#72 := (= #30 #71)
#73 := [rewrite]: #72
#69 := (= #29 #68)
#70 := [rewrite]: #69
#128 := [monotonicity #70 #73]: #127
#131 := [monotonicity #128]: #130
#136 := [trans #131 #134]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#168 := [trans #151 #166]: #167
#125 := [asserted]: #45
#169 := [mp #125 #168]: #164
#172 := [mp~ #169 #176]: #164
#220 := [mp #172 #219]: #217
#251 := [mp #220 #250]: #248
#739 := [mp #251 #738]: #734
#8 := 3::Int
#9 := (f4 f5 3::Int)
#10 := (f3 #9 3::Int)
#12 := (= #10 0::Int)
#13 := (not #12)
#65 := [asserted]: #13
#560 := (not #734)
#655 := (or #560 #12)
#377 := (* -1::Int 3::Int)
#507 := (mod #377 #377)
#714 := (+ #10 #507)
#388 := (= #714 0::Int)
#404 := (mod 3::Int 3::Int)
#383 := (* -1::Int #404)
#718 := (+ #10 #383)
#720 := (= #718 0::Int)
#398 := (<= 3::Int 0::Int)
#401 := (>= 3::Int 0::Int)
#402 := (or #401 #398)
#403 := (not #402)
#399 := (or #398 #398)
#390 := (not #399)
#400 := (or #390 #403)
#389 := (if #400 #720 #388)
#313 := (= 3::Int 0::Int)
#721 := (if #313 #12 #389)
#397 := (= #10 3::Int)
#722 := (if #313 #397 #721)
#656 := (or #560 #722)
#544 := (iff #656 #655)
#561 := (iff #655 #655)
#562 := [rewrite]: #561
#510 := (iff #722 #12)
#664 := (if false #397 #12)
#550 := (iff #664 #12)
#551 := [rewrite]: #550
#667 := (iff #722 #664)
#665 := (iff #721 #12)
#506 := (if false #12 #12)
#662 := (iff #506 #12)
#663 := [rewrite]: #662
#508 := (iff #721 #506)
#670 := (iff #389 #12)
#1 := true
#674 := (if true #12 #12)
#675 := (iff #674 #12)
#676 := [rewrite]: #675
#668 := (iff #389 #674)
#672 := (iff #388 #12)
#529 := (= #714 #10)
#409 := (+ #10 0::Int)
#689 := (= #409 #10)
#690 := [rewrite]: #689
#527 := (= #714 #409)
#680 := (= #507 0::Int)
#692 := -3::Int
#683 := (mod -3::Int -3::Int)
#684 := (= #683 0::Int)
#685 := [rewrite]: #684
#678 := (= #507 #683)
#681 := (= #377 -3::Int)
#682 := [rewrite]: #681
#679 := [monotonicity #682 #682]: #678
#686 := [trans #679 #685]: #680
#528 := [monotonicity #686]: #527
#671 := [trans #528 #690]: #529
#673 := [monotonicity #671]: #672
#691 := (iff #720 #12)
#405 := (= #718 #10)
#410 := (= #718 #409)
#698 := (= #383 0::Int)
#418 := (* -1::Int 0::Int)
#697 := (= #418 0::Int)
#694 := [rewrite]: #697
#419 := (= #383 #418)
#695 := (= #404 0::Int)
#696 := [rewrite]: #695
#693 := [monotonicity #696]: #419
#408 := [trans #693 #694]: #698
#411 := [monotonicity #408]: #410
#687 := [trans #411 #690]: #405
#688 := [monotonicity #687]: #691
#425 := (iff #400 true)
#707 := (or true false)
#346 := (iff #707 true)
#709 := [rewrite]: #346
#423 := (iff #400 #707)
#700 := (iff #403 false)
#352 := (not true)
#713 := (iff #352 false)
#699 := [rewrite]: #713
#712 := (iff #403 #352)
#711 := (iff #402 true)
#702 := (iff #402 #707)
#719 := (iff #398 false)
#725 := [rewrite]: #719
#705 := (iff #401 true)
#706 := [rewrite]: #705
#708 := [monotonicity #706 #725]: #702
#351 := [trans #708 #709]: #711
#710 := [monotonicity #351]: #712
#422 := [trans #710 #699]: #700
#703 := (iff #390 true)
#701 := (not false)
#366 := (iff #701 true)
#367 := [rewrite]: #366
#364 := (iff #390 #701)
#717 := (iff #399 false)
#715 := (or false false)
#716 := (iff #715 false)
#376 := [rewrite]: #716
#375 := (iff #399 #715)
#380 := [monotonicity #725 #725]: #375
#360 := [trans #380 #376]: #717
#365 := [monotonicity #360]: #364
#704 := [trans #365 #367]: #703
#424 := [monotonicity #704 #422]: #423
#319 := [trans #424 #709]: #425
#669 := [monotonicity #319 #688 #673]: #668
#677 := [trans #669 #676]: #670
#723 := (iff #313 false)
#724 := [rewrite]: #723
#509 := [monotonicity #724 #677]: #508
#666 := [trans #509 #663]: #665
#549 := [monotonicity #724 #666]: #667
#658 := [trans #549 #551]: #510
#559 := [monotonicity #658]: #544
#555 := [trans #559 #562]: #544
#659 := [quant-inst #8 #8]: #656
#563 := [mp #659 #555]: #655
[unit-resolution #563 #65 #739]: false
unsat
fcf9d10e8b8381a23681610013bef54bc4a13a37 319 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#38 := (f4 f5 #16)
#39 := (f3 #38 #18)
#733 := (pattern #39)
#20 := 0::Int
#69 := -1::Int
#73 := (* -1::Int #18)
#70 := (* -1::Int #16)
#128 := (mod #70 #73)
#243 := (+ #39 #128)
#244 := (= #243 0::Int)
#40 := (mod #16 #18)
#240 := (* -1::Int #40)
#241 := (+ #39 #240)
#242 := (= #241 0::Int)
#95 := (<= #18 0::Int)
#102 := (>= #16 0::Int)
#187 := (or #102 #95)
#188 := (not #187)
#91 := (<= #16 0::Int)
#185 := (or #91 #95)
#186 := (not #185)
#191 := (or #186 #188)
#245 := (if #191 #242 #244)
#239 := (= #39 0::Int)
#21 := (= #16 0::Int)
#246 := (if #21 #239 #245)
#238 := (= #39 #16)
#22 := (= #18 0::Int)
#247 := (if #22 #238 #246)
#734 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #733) #247)
#250 := (forall (vars (?v0 Int) (?v1 Int)) #247)
#737 := (iff #250 #734)
#735 := (iff #247 #247)
#736 := [refl]: #735
#738 := [quant-intro #736]: #737
#134 := (* -1::Int #128)
#207 := (if #191 #40 #134)
#210 := (if #21 0::Int #207)
#213 := (if #22 #16 #210)
#216 := (= #39 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#251 := (iff #219 #250)
#248 := (iff #216 #247)
#249 := [rewrite]: #248
#252 := [quant-intro #249]: #251
#96 := (not #95)
#103 := (not #102)
#106 := (and #103 #96)
#92 := (not #91)
#99 := (and #92 #96)
#109 := (or #99 #106)
#154 := (if #109 #40 #134)
#157 := (if #21 0::Int #154)
#160 := (if #22 #16 #157)
#163 := (= #39 #160)
#166 := (forall (vars (?v0 Int) (?v1 Int)) #163)
#220 := (iff #166 #219)
#217 := (iff #163 #216)
#214 := (= #160 #213)
#211 := (= #157 #210)
#208 := (= #154 #207)
#192 := (iff #109 #191)
#189 := (iff #106 #188)
#190 := [rewrite]: #189
#179 := (iff #99 #186)
#180 := [rewrite]: #179
#193 := [monotonicity #180 #190]: #192
#209 := [monotonicity #193]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#177 := (~ #166 #166)
#176 := (~ #163 #163)
#173 := [refl]: #176
#178 := [nnf-pos #173]: #177
#32 := (- #18)
#31 := (- #16)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (if #29 #40 #42)
#44 := (if #21 0::Int #43)
#45 := (if #22 #16 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#169 := (iff #47 #166)
#139 := (if #29 #40 #134)
#142 := (if #21 0::Int #139)
#145 := (if #22 #16 #142)
#148 := (= #39 #145)
#151 := (forall (vars (?v0 Int) (?v1 Int)) #148)
#167 := (iff #151 #166)
#164 := (iff #148 #163)
#161 := (= #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#110 := (iff #29 #109)
#107 := (iff #28 #106)
#97 := (iff #25 #96)
#98 := [rewrite]: #97
#104 := (iff #27 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105 #98]: #107
#100 := (iff #26 #99)
#93 := (iff #24 #92)
#94 := [rewrite]: #93
#101 := [monotonicity #94 #98]: #100
#111 := [monotonicity #101 #108]: #110
#156 := [monotonicity #111]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#152 := (iff #47 #151)
#149 := (iff #46 #148)
#146 := (= #45 #145)
#143 := (= #44 #142)
#140 := (= #43 #139)
#137 := (= #42 #134)
#131 := (- #128)
#135 := (= #131 #134)
#136 := [rewrite]: #135
#132 := (= #42 #131)
#129 := (= #41 #128)
#74 := (= #32 #73)
#75 := [rewrite]: #74
#71 := (= #31 #70)
#72 := [rewrite]: #71
#130 := [monotonicity #72 #75]: #129
#133 := [monotonicity #130]: #132
#138 := [trans #133 #136]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#170 := [trans #153 #168]: #169
#127 := [asserted]: #47
#171 := [mp #127 #170]: #166
#174 := [mp~ #171 #178]: #166
#222 := [mp #174 #221]: #219
#253 := [mp #222 #252]: #250
#739 := [mp #253 #738]: #734
#12 := 2::Int
#10 := 3::Int
#8 := 5::Int
#9 := (f4 f5 5::Int)
#11 := (f3 #9 3::Int)
#13 := (= #11 2::Int)
#14 := (not #13)
#67 := [asserted]: #14
#644 := (not #734)
#645 := (or #644 #13)
#389 := (* -1::Int 3::Int)
#388 := (* -1::Int 5::Int)
#721 := (mod #388 #389)
#722 := (+ #11 #721)
#723 := (= #722 0::Int)
#720 := (mod 5::Int 3::Int)
#377 := (* -1::Int #720)
#507 := (+ #11 #377)
#714 := (= #507 0::Int)
#401 := (<= 3::Int 0::Int)
#400 := (>= 5::Int 0::Int)
#404 := (or #400 #401)
#383 := (not #404)
#390 := (<= 5::Int 0::Int)
#402 := (or #390 #401)
#403 := (not #402)
#718 := (or #403 #383)
#724 := (if #718 #714 #723)
#399 := (= #11 0::Int)
#398 := (= 5::Int 0::Int)
#719 := (if #398 #399 #724)
#397 := (= #11 5::Int)
#313 := (= 3::Int 0::Int)
#725 := (if #313 #397 #719)
#646 := (or #644 #725)
#647 := (iff #646 #645)
#632 := (iff #645 #645)
#634 := [rewrite]: #632
#654 := (iff #725 #13)
#641 := (if false #397 #13)
#653 := (iff #641 #13)
#649 := [rewrite]: #653
#651 := (iff #725 #641)
#642 := (iff #719 #13)
#660 := (if false #399 #13)
#648 := (iff #660 #13)
#650 := [rewrite]: #648
#657 := (iff #719 #660)
#566 := (iff #724 #13)
#656 := (= #11 -1::Int)
#1 := true
#562 := (if true #13 #656)
#564 := (iff #562 #13)
#565 := [rewrite]: #564
#555 := (iff #724 #562)
#559 := (iff #723 #656)
#266 := 1::Int
#667 := (+ 1::Int #11)
#658 := (= #667 0::Int)
#659 := (iff #658 #656)
#544 := [rewrite]: #659
#560 := (iff #723 #658)
#551 := (= #722 #667)
#665 := (+ #11 1::Int)
#549 := (= #665 #667)
#550 := [rewrite]: #549
#666 := (= #722 #665)
#662 := (= #721 1::Int)
#669 := -3::Int
#673 := -5::Int
#670 := (mod -5::Int -3::Int)
#508 := (= #670 1::Int)
#509 := [rewrite]: #508
#677 := (= #721 #670)
#675 := (= #389 -3::Int)
#676 := [rewrite]: #675
#674 := (= #388 -5::Int)
#668 := [rewrite]: #674
#506 := [monotonicity #668 #676]: #677
#663 := [trans #506 #509]: #662
#664 := [monotonicity #663]: #666
#510 := [trans #664 #550]: #551
#655 := [monotonicity #510]: #560
#561 := [trans #655 #544]: #559
#671 := (iff #714 #13)
#690 := -2::Int
#683 := (+ -2::Int #11)
#680 := (= #683 0::Int)
#528 := (iff #680 #13)
#529 := [rewrite]: #528
#686 := (iff #714 #680)
#684 := (= #507 #683)
#692 := (+ #11 -2::Int)
#678 := (= #692 #683)
#679 := [rewrite]: #678
#681 := (= #507 #692)
#691 := (= #377 -2::Int)
#410 := (* -1::Int 2::Int)
#405 := (= #410 -2::Int)
#687 := [rewrite]: #405
#411 := (= #377 #410)
#408 := (= #720 2::Int)
#409 := [rewrite]: #408
#689 := [monotonicity #409]: #411
#688 := [trans #689 #687]: #691
#682 := [monotonicity #688]: #681
#685 := [trans #682 #679]: #684
#527 := [monotonicity #685]: #686
#672 := [trans #527 #529]: #671
#694 := (iff #718 true)
#712 := (or true false)
#699 := (iff #712 true)
#700 := [rewrite]: #699
#693 := (iff #718 #712)
#418 := (iff #383 false)
#424 := (not true)
#695 := (iff #424 false)
#696 := [rewrite]: #695
#425 := (iff #383 #424)
#422 := (iff #404 true)
#710 := (iff #404 #712)
#360 := (iff #401 false)
#701 := [rewrite]: #360
#351 := (iff #400 true)
#352 := [rewrite]: #351
#713 := [monotonicity #352 #701]: #710
#423 := [trans #713 #700]: #422
#319 := [monotonicity #423]: #425
#419 := [trans #319 #696]: #418
#709 := (iff #403 true)
#706 := (not false)
#708 := (iff #706 true)
#346 := [rewrite]: #708
#707 := (iff #403 #706)
#704 := (iff #402 false)
#364 := (or false false)
#367 := (iff #364 false)
#703 := [rewrite]: #367
#365 := (iff #402 #364)
#376 := (iff #390 false)
#717 := [rewrite]: #376
#366 := [monotonicity #717 #701]: #365
#705 := [trans #366 #703]: #704
#702 := [monotonicity #705]: #707
#711 := [trans #702 #346]: #709
#697 := [monotonicity #711 #419]: #693
#698 := [trans #697 #700]: #694
#563 := [monotonicity #698 #672 #561]: #555
#567 := [trans #563 #565]: #566
#380 := (iff #398 false)
#716 := [rewrite]: #380
#661 := [monotonicity #716 #567]: #657
#639 := [trans #661 #650]: #642
#715 := (iff #313 false)
#375 := [rewrite]: #715
#652 := [monotonicity #375 #639]: #651
#643 := [trans #652 #649]: #654
#631 := [monotonicity #643]: #647
#635 := [trans #631 #634]: #647
#640 := [quant-inst #8 #10]: #646
#636 := [mp #640 #635]: #645
[unit-resolution #636 #67 #739]: false
unsat
c497ff275eec9dfc0af1251e4c8516213924660f 326 0
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#40 := (f4 f5 #18)
#41 := (f3 #40 #20)
#751 := (pattern #41)
#22 := 0::Int
#86 := -1::Int
#91 := (* -1::Int #20)
#88 := (* -1::Int #18)
#146 := (mod #88 #91)
#261 := (+ #41 #146)
#262 := (= #261 0::Int)
#42 := (mod #18 #20)
#258 := (* -1::Int #42)
#259 := (+ #41 #258)
#260 := (= #259 0::Int)
#113 := (<= #20 0::Int)
#120 := (>= #18 0::Int)
#205 := (or #120 #113)
#206 := (not #205)
#109 := (<= #18 0::Int)
#203 := (or #109 #113)
#204 := (not #203)
#209 := (or #204 #206)
#263 := (if #209 #260 #262)
#257 := (= #41 0::Int)
#23 := (= #18 0::Int)
#264 := (if #23 #257 #263)
#256 := (= #41 #18)
#24 := (= #20 0::Int)
#265 := (if #24 #256 #264)
#752 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #751) #265)
#268 := (forall (vars (?v0 Int) (?v1 Int)) #265)
#755 := (iff #268 #752)
#753 := (iff #265 #265)
#754 := [refl]: #753
#756 := [quant-intro #754]: #755
#152 := (* -1::Int #146)
#225 := (if #209 #42 #152)
#228 := (if #23 0::Int #225)
#231 := (if #24 #18 #228)
#234 := (= #41 #231)
#237 := (forall (vars (?v0 Int) (?v1 Int)) #234)
#269 := (iff #237 #268)
#266 := (iff #234 #265)
#267 := [rewrite]: #266
#270 := [quant-intro #267]: #269
#114 := (not #113)
#121 := (not #120)
#124 := (and #121 #114)
#110 := (not #109)
#117 := (and #110 #114)
#127 := (or #117 #124)
#172 := (if #127 #42 #152)
#175 := (if #23 0::Int #172)
#178 := (if #24 #18 #175)
#181 := (= #41 #178)
#184 := (forall (vars (?v0 Int) (?v1 Int)) #181)
#238 := (iff #184 #237)
#235 := (iff #181 #234)
#232 := (= #178 #231)
#229 := (= #175 #228)
#226 := (= #172 #225)
#210 := (iff #127 #209)
#207 := (iff #124 #206)
#208 := [rewrite]: #207
#197 := (iff #117 #204)
#198 := [rewrite]: #197
#211 := [monotonicity #198 #208]: #210
#227 := [monotonicity #211]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [quant-intro #236]: #238
#195 := (~ #184 #184)
#194 := (~ #181 #181)
#191 := [refl]: #194
#196 := [nnf-pos #191]: #195
#34 := (- #20)
#33 := (- #18)
#43 := (mod #33 #34)
#44 := (- #43)
#27 := (< 0::Int #20)
#29 := (< #18 0::Int)
#30 := (and #29 #27)
#26 := (< 0::Int #18)
#28 := (and #26 #27)
#31 := (or #28 #30)
#45 := (if #31 #42 #44)
#46 := (if #23 0::Int #45)
#47 := (if #24 #18 #46)
#48 := (= #41 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#187 := (iff #49 #184)
#157 := (if #31 #42 #152)
#160 := (if #23 0::Int #157)
#163 := (if #24 #18 #160)
#166 := (= #41 #163)
#169 := (forall (vars (?v0 Int) (?v1 Int)) #166)
#185 := (iff #169 #184)
#182 := (iff #166 #181)
#179 := (= #163 #178)
#176 := (= #160 #175)
#173 := (= #157 #172)
#128 := (iff #31 #127)
#125 := (iff #30 #124)
#115 := (iff #27 #114)
#116 := [rewrite]: #115
#122 := (iff #29 #121)
#123 := [rewrite]: #122
#126 := [monotonicity #123 #116]: #125
#118 := (iff #28 #117)
#111 := (iff #26 #110)
#112 := [rewrite]: #111
#119 := [monotonicity #112 #116]: #118
#129 := [monotonicity #119 #126]: #128
#174 := [monotonicity #129]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [quant-intro #183]: #185
#170 := (iff #49 #169)
#167 := (iff #48 #166)
#164 := (= #47 #163)
#161 := (= #46 #160)
#158 := (= #45 #157)
#155 := (= #44 #152)
#149 := (- #146)
#153 := (= #149 #152)
#154 := [rewrite]: #153
#150 := (= #44 #149)
#147 := (= #43 #146)
#92 := (= #34 #91)
#93 := [rewrite]: #92
#89 := (= #33 #88)
#90 := [rewrite]: #89
#148 := [monotonicity #90 #93]: #147
#151 := [monotonicity #148]: #150
#156 := [trans #151 #154]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [monotonicity #165]: #167
#171 := [quant-intro #168]: #170
#188 := [trans #171 #186]: #187
#145 := [asserted]: #49
#189 := [mp #145 #188]: #184
#192 := [mp~ #189 #196]: #184
#240 := [mp #192 #239]: #237
#271 := [mp #240 #270]: #268
#757 := [mp #271 #756]: #752
#76 := -2::Int
#70 := -3::Int
#8 := 1::Int
#9 := (f4 f5 1::Int)
#73 := (f3 #9 -3::Int)
#79 := (= #73 -2::Int)
#82 := (not #79)
#13 := 2::Int
#14 := (- 2::Int)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#15 := (= #12 #14)
#16 := (not #15)
#83 := (iff #16 #82)
#80 := (iff #15 #79)
#77 := (= #14 -2::Int)
#78 := [rewrite]: #77
#74 := (= #12 #73)
#71 := (= #11 -3::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#69 := [asserted]: #16
#87 := [mp #69 #84]: #82
#668 := (not #752)
#660 := (or #668 #79)
#407 := (* -1::Int -3::Int)
#406 := (* -1::Int 1::Int)
#739 := (mod #406 #407)
#740 := (+ #73 #739)
#741 := (= #740 0::Int)
#738 := (mod 1::Int -3::Int)
#395 := (* -1::Int #738)
#525 := (+ #73 #395)
#732 := (= #525 0::Int)
#419 := (<= -3::Int 0::Int)
#418 := (>= 1::Int 0::Int)
#422 := (or #418 #419)
#401 := (not #422)
#408 := (<= 1::Int 0::Int)
#420 := (or #408 #419)
#421 := (not #420)
#736 := (or #421 #401)
#742 := (if #736 #732 #741)
#417 := (= #73 0::Int)
#416 := (= 1::Int 0::Int)
#737 := (if #416 #417 #742)
#415 := (= #73 1::Int)
#331 := (= -3::Int 0::Int)
#743 := (if #331 #415 #737)
#657 := (or #668 #743)
#669 := (iff #657 #660)
#671 := (iff #660 #660)
#667 := [rewrite]: #671
#679 := (iff #743 #79)
#578 := (if false #415 #79)
#677 := (iff #578 #79)
#562 := [rewrite]: #677
#678 := (iff #743 #578)
#584 := (iff #737 #79)
#580 := (if false #417 #79)
#582 := (iff #580 #79)
#583 := [rewrite]: #582
#573 := (iff #737 #580)
#577 := (iff #742 #79)
#673 := (iff #742 #578)
#528 := (iff #741 #79)
#527 := (+ 2::Int #73)
#682 := (= #527 0::Int)
#568 := (iff #682 #79)
#569 := [rewrite]: #568
#685 := (iff #741 #682)
#683 := (= #740 #527)
#695 := (+ #73 2::Int)
#680 := (= #695 #527)
#681 := [rewrite]: #680
#524 := (= #740 #695)
#694 := (= #739 2::Int)
#691 := (mod -1::Int 3::Int)
#687 := (= #691 2::Int)
#693 := [rewrite]: #687
#692 := (= #739 #691)
#689 := (= #407 3::Int)
#690 := [rewrite]: #689
#707 := (= #406 -1::Int)
#708 := [rewrite]: #707
#686 := [monotonicity #708 #690]: #692
#688 := [trans #686 #693]: #694
#526 := [monotonicity #688]: #524
#684 := [trans #526 #681]: #683
#567 := [monotonicity #684]: #685
#676 := [trans #567 #569]: #528
#546 := (iff #732 #415)
#699 := (+ -1::Int #73)
#702 := (= #699 0::Int)
#704 := (iff #702 #415)
#545 := [rewrite]: #704
#703 := (iff #732 #702)
#696 := (= #525 #699)
#709 := (+ #73 -1::Int)
#700 := (= #709 #699)
#701 := [rewrite]: #700
#706 := (= #525 #709)
#423 := (= #395 -1::Int)
#428 := (= #395 #406)
#426 := (= #738 1::Int)
#427 := [rewrite]: #426
#429 := [monotonicity #427]: #428
#705 := [trans #429 #708]: #423
#710 := [monotonicity #705]: #706
#697 := [trans #710 #701]: #696
#698 := [monotonicity #697]: #703
#547 := [trans #698 #545]: #546
#712 := (iff #736 false)
#714 := (or false false)
#711 := (iff #714 false)
#715 := [rewrite]: #711
#436 := (iff #736 #714)
#337 := (iff #401 false)
#1 := true
#724 := (not true)
#726 := (iff #724 false)
#364 := [rewrite]: #726
#442 := (iff #401 #724)
#440 := (iff #422 true)
#730 := (or true true)
#717 := (iff #730 true)
#718 := [rewrite]: #717
#728 := (iff #422 #730)
#378 := (iff #419 true)
#719 := [rewrite]: #378
#369 := (iff #418 true)
#370 := [rewrite]: #369
#731 := [monotonicity #370 #719]: #728
#441 := [trans #731 #718]: #440
#443 := [monotonicity #441]: #442
#713 := [trans #443 #364]: #337
#727 := (iff #421 false)
#725 := (iff #421 #724)
#722 := (iff #420 true)
#382 := (or false true)
#385 := (iff #382 true)
#721 := [rewrite]: #385
#383 := (iff #420 #382)
#394 := (iff #408 false)
#735 := [rewrite]: #394
#384 := [monotonicity #735 #719]: #383
#723 := [trans #384 #721]: #722
#720 := [monotonicity #723]: #725
#729 := [trans #720 #364]: #727
#437 := [monotonicity #729 #713]: #436
#716 := [trans #437 #715]: #712
#674 := [monotonicity #716 #547 #676]: #673
#579 := [trans #674 #562]: #577
#398 := (iff #416 false)
#734 := [rewrite]: #398
#581 := [monotonicity #734 #579]: #573
#585 := [trans #581 #583]: #584
#733 := (iff #331 false)
#393 := [rewrite]: #733
#675 := [monotonicity #393 #585]: #678
#666 := [trans #675 #562]: #679
#670 := [monotonicity #666]: #669
#672 := [trans #670 #667]: #669
#659 := [quant-inst #8 #70]: #657
#661 := [mp #659 #672]: #660
[unit-resolution #661 #87 #757]: false
unsat
a3271abc9f2ec03bd2af23f7e77d6fec07008813 307 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#747 := (pattern #38)
#12 := 0::Int
#80 := -1::Int
#85 := (* -1::Int #18)
#82 := (* -1::Int #16)
#140 := (mod #82 #85)
#255 := (+ #38 #140)
#256 := (= #255 0::Int)
#39 := (mod #16 #18)
#252 := (* -1::Int #39)
#253 := (+ #38 #252)
#254 := (= #253 0::Int)
#107 := (<= #18 0::Int)
#114 := (>= #16 0::Int)
#199 := (or #114 #107)
#200 := (not #199)
#103 := (<= #16 0::Int)
#197 := (or #103 #107)
#198 := (not #197)
#203 := (or #198 #200)
#257 := (if #203 #254 #256)
#251 := (= #38 0::Int)
#20 := (= #16 0::Int)
#258 := (if #20 #251 #257)
#250 := (= #38 #16)
#21 := (= #18 0::Int)
#259 := (if #21 #250 #258)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #259)
#262 := (forall (vars (?v0 Int) (?v1 Int)) #259)
#751 := (iff #262 #748)
#749 := (iff #259 #259)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#146 := (* -1::Int #140)
#219 := (if #203 #39 #146)
#222 := (if #20 0::Int #219)
#225 := (if #21 #16 #222)
#228 := (= #38 #225)
#231 := (forall (vars (?v0 Int) (?v1 Int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#108 := (not #107)
#115 := (not #114)
#118 := (and #115 #108)
#104 := (not #103)
#111 := (and #104 #108)
#121 := (or #111 #118)
#166 := (if #121 #39 #146)
#169 := (if #20 0::Int #166)
#172 := (if #21 #16 #169)
#175 := (= #38 #172)
#178 := (forall (vars (?v0 Int) (?v1 Int)) #175)
#232 := (iff #178 #231)
#229 := (iff #175 #228)
#226 := (= #172 #225)
#223 := (= #169 #222)
#220 := (= #166 #219)
#204 := (iff #121 #203)
#201 := (iff #118 #200)
#202 := [rewrite]: #201
#191 := (iff #111 #198)
#192 := [rewrite]: #191
#205 := [monotonicity #192 #202]: #204
#221 := [monotonicity #205]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#189 := (~ #178 #178)
#188 := (~ #175 #175)
#185 := [refl]: #188
#190 := [nnf-pos #185]: #189
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#181 := (iff #46 #178)
#151 := (if #28 #39 #146)
#154 := (if #20 0::Int #151)
#157 := (if #21 #16 #154)
#160 := (= #38 #157)
#163 := (forall (vars (?v0 Int) (?v1 Int)) #160)
#179 := (iff #163 #178)
#176 := (iff #160 #175)
#173 := (= #157 #172)
#170 := (= #154 #169)
#167 := (= #151 #166)
#122 := (iff #28 #121)
#119 := (iff #27 #118)
#109 := (iff #24 #108)
#110 := [rewrite]: #109
#116 := (iff #26 #115)
#117 := [rewrite]: #116
#120 := [monotonicity #117 #110]: #119
#112 := (iff #25 #111)
#105 := (iff #23 #104)
#106 := [rewrite]: #105
#113 := [monotonicity #106 #110]: #112
#123 := [monotonicity #113 #120]: #122
#168 := [monotonicity #123]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [quant-intro #177]: #179
#164 := (iff #46 #163)
#161 := (iff #45 #160)
#158 := (= #44 #157)
#155 := (= #43 #154)
#152 := (= #42 #151)
#149 := (= #41 #146)
#143 := (- #140)
#147 := (= #143 #146)
#148 := [rewrite]: #147
#144 := (= #41 #143)
#141 := (= #40 #140)
#86 := (= #31 #85)
#87 := [rewrite]: #86
#83 := (= #30 #82)
#84 := [rewrite]: #83
#142 := [monotonicity #84 #87]: #141
#145 := [monotonicity #142]: #144
#150 := [trans #145 #148]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#182 := [trans #165 #180]: #181
#139 := [asserted]: #46
#183 := [mp #139 #182]: #178
#186 := [mp~ #183 #190]: #178
#234 := [mp #186 #233]: #231
#265 := [mp #234 #264]: #262
#753 := [mp #265 #752]: #748
#67 := -3::Int
#8 := 3::Int
#9 := (f4 f5 3::Int)
#70 := (f3 #9 -3::Int)
#73 := (= #70 0::Int)
#76 := (not #73)
#10 := (- 3::Int)
#11 := (f3 #9 #10)
#13 := (= #11 0::Int)
#14 := (not #13)
#77 := (iff #14 #76)
#74 := (iff #13 #73)
#71 := (= #11 #70)
#68 := (= #10 -3::Int)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#66 := [asserted]: #14
#81 := [mp #66 #78]: #76
#573 := (not #748)
#575 := (or #573 #73)
#402 := (* -1::Int -3::Int)
#728 := (* -1::Int 3::Int)
#403 := (mod #728 #402)
#735 := (+ #70 #403)
#736 := (= #735 0::Int)
#732 := (mod 3::Int -3::Int)
#734 := (* -1::Int #732)
#391 := (+ #70 #734)
#521 := (= #391 0::Int)
#404 := (<= -3::Int 0::Int)
#417 := (>= 3::Int 0::Int)
#414 := (or #417 #404)
#418 := (not #414)
#413 := (<= 3::Int 0::Int)
#415 := (or #413 #404)
#416 := (not #415)
#397 := (or #416 #418)
#737 := (if #397 #521 #736)
#412 := (= 3::Int 0::Int)
#738 := (if #412 #73 #737)
#411 := (= #70 3::Int)
#327 := (= -3::Int 0::Int)
#733 := (if #327 #411 #738)
#576 := (or #573 #733)
#577 := (iff #576 #575)
#579 := (iff #575 #575)
#580 := [rewrite]: #579
#673 := (iff #733 #73)
#524 := (if false #411 #73)
#669 := (iff #524 #73)
#670 := [rewrite]: #669
#672 := (iff #733 #524)
#564 := (iff #738 #73)
#522 := (if false #73 #73)
#677 := (iff #522 #73)
#679 := [rewrite]: #677
#681 := (iff #738 #522)
#680 := (iff #737 #73)
#523 := (iff #737 #522)
#691 := (iff #736 #73)
#690 := (= #735 #70)
#705 := (+ #70 0::Int)
#695 := (= #705 #70)
#696 := [rewrite]: #695
#683 := (= #735 #705)
#688 := (= #403 0::Int)
#542 := (mod -3::Int 3::Int)
#686 := (= #542 0::Int)
#687 := [rewrite]: #686
#543 := (= #403 #542)
#700 := (= #402 3::Int)
#541 := [rewrite]: #700
#699 := (= #728 -3::Int)
#694 := [rewrite]: #699
#685 := [monotonicity #694 #541]: #543
#682 := [trans #685 #687]: #688
#689 := [monotonicity #682]: #683
#684 := [trans #689 #696]: #690
#520 := [monotonicity #684]: #691
#693 := (iff #521 #73)
#697 := (= #391 #70)
#702 := (= #391 #705)
#419 := (= #734 0::Int)
#423 := (* -1::Int 0::Int)
#703 := (= #423 0::Int)
#704 := [rewrite]: #703
#424 := (= #734 #423)
#712 := (= #732 0::Int)
#422 := [rewrite]: #712
#425 := [monotonicity #422]: #424
#701 := [trans #425 #704]: #419
#706 := [monotonicity #701]: #702
#692 := [trans #706 #696]: #697
#698 := [monotonicity #692]: #693
#711 := (iff #397 false)
#709 := (or false false)
#433 := (iff #709 false)
#707 := [rewrite]: #433
#710 := (iff #397 #709)
#439 := (iff #418 false)
#1 := true
#719 := (not true)
#716 := (iff #719 false)
#722 := [rewrite]: #716
#437 := (iff #418 #719)
#714 := (iff #414 true)
#366 := (or true true)
#727 := (iff #366 true)
#713 := [rewrite]: #727
#726 := (iff #414 #366)
#731 := (iff #404 true)
#374 := [rewrite]: #731
#725 := (iff #417 true)
#365 := [rewrite]: #725
#724 := [monotonicity #365 #374]: #726
#436 := [trans #724 #713]: #714
#438 := [monotonicity #436]: #437
#333 := [trans #438 #722]: #439
#360 := (iff #416 false)
#720 := (iff #416 #719)
#717 := (iff #415 true)
#715 := (or false true)
#380 := (iff #715 true)
#381 := [rewrite]: #380
#378 := (iff #415 #715)
#730 := (iff #413 false)
#390 := [rewrite]: #730
#379 := [monotonicity #390 #374]: #378
#718 := [trans #379 #381]: #717
#721 := [monotonicity #718]: #720
#723 := [trans #721 #722]: #360
#432 := [monotonicity #723 #333]: #710
#708 := [trans #432 #707]: #711
#676 := [monotonicity #708 #698 #520]: #523
#678 := [trans #676 #679]: #680
#389 := (iff #412 false)
#394 := [rewrite]: #389
#563 := [monotonicity #394 #678]: #681
#565 := [trans #563 #679]: #564
#739 := (iff #327 false)
#729 := [rewrite]: #739
#574 := [monotonicity #729 #565]: #672
#558 := [trans #574 #670]: #673
#578 := [monotonicity #558]: #577
#581 := [trans #578 #580]: #577
#569 := [quant-inst #8 #67]: #576
#674 := [mp #569 #581]: #575
[unit-resolution #674 #81 #753]: false
unsat
19af39eefe155fd5ea4a9cb81efe6bb66ad7e60b 335 0
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#40 := (f4 f5 #18)
#41 := (f3 #40 #20)
#750 := (pattern #41)
#22 := 0::Int
#76 := -1::Int
#90 := (* -1::Int #20)
#86 := (* -1::Int #18)
#145 := (mod #86 #90)
#260 := (+ #41 #145)
#261 := (= #260 0::Int)
#42 := (mod #18 #20)
#257 := (* -1::Int #42)
#258 := (+ #41 #257)
#259 := (= #258 0::Int)
#112 := (<= #20 0::Int)
#119 := (>= #18 0::Int)
#204 := (or #119 #112)
#205 := (not #204)
#108 := (<= #18 0::Int)
#202 := (or #108 #112)
#203 := (not #202)
#208 := (or #203 #205)
#262 := (if #208 #259 #261)
#256 := (= #41 0::Int)
#23 := (= #18 0::Int)
#263 := (if #23 #256 #262)
#255 := (= #41 #18)
#24 := (= #20 0::Int)
#264 := (if #24 #255 #263)
#751 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #750) #264)
#267 := (forall (vars (?v0 Int) (?v1 Int)) #264)
#754 := (iff #267 #751)
#752 := (iff #264 #264)
#753 := [refl]: #752
#755 := [quant-intro #753]: #754
#151 := (* -1::Int #145)
#224 := (if #208 #42 #151)
#227 := (if #23 0::Int #224)
#230 := (if #24 #18 #227)
#233 := (= #41 #230)
#236 := (forall (vars (?v0 Int) (?v1 Int)) #233)
#268 := (iff #236 #267)
#265 := (iff #233 #264)
#266 := [rewrite]: #265
#269 := [quant-intro #266]: #268
#113 := (not #112)
#120 := (not #119)
#123 := (and #120 #113)
#109 := (not #108)
#116 := (and #109 #113)
#126 := (or #116 #123)
#171 := (if #126 #42 #151)
#174 := (if #23 0::Int #171)
#177 := (if #24 #18 #174)
#180 := (= #41 #177)
#183 := (forall (vars (?v0 Int) (?v1 Int)) #180)
#237 := (iff #183 #236)
#234 := (iff #180 #233)
#231 := (= #177 #230)
#228 := (= #174 #227)
#225 := (= #171 #224)
#209 := (iff #126 #208)
#206 := (iff #123 #205)
#207 := [rewrite]: #206
#196 := (iff #116 #203)
#197 := [rewrite]: #196
#210 := [monotonicity #197 #207]: #209
#226 := [monotonicity #210]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [quant-intro #235]: #237
#194 := (~ #183 #183)
#193 := (~ #180 #180)
#190 := [refl]: #193
#195 := [nnf-pos #190]: #194
#34 := (- #20)
#33 := (- #18)
#43 := (mod #33 #34)
#44 := (- #43)
#27 := (< 0::Int #20)
#29 := (< #18 0::Int)
#30 := (and #29 #27)
#26 := (< 0::Int #18)
#28 := (and #26 #27)
#31 := (or #28 #30)
#45 := (if #31 #42 #44)
#46 := (if #23 0::Int #45)
#47 := (if #24 #18 #46)
#48 := (= #41 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#186 := (iff #49 #183)
#156 := (if #31 #42 #151)
#159 := (if #23 0::Int #156)
#162 := (if #24 #18 #159)
#165 := (= #41 #162)
#168 := (forall (vars (?v0 Int) (?v1 Int)) #165)
#184 := (iff #168 #183)
#181 := (iff #165 #180)
#178 := (= #162 #177)
#175 := (= #159 #174)
#172 := (= #156 #171)
#127 := (iff #31 #126)
#124 := (iff #30 #123)
#114 := (iff #27 #113)
#115 := [rewrite]: #114
#121 := (iff #29 #120)
#122 := [rewrite]: #121
#125 := [monotonicity #122 #115]: #124
#117 := (iff #28 #116)
#110 := (iff #26 #109)
#111 := [rewrite]: #110
#118 := [monotonicity #111 #115]: #117
#128 := [monotonicity #118 #125]: #127
#173 := [monotonicity #128]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [quant-intro #182]: #184
#169 := (iff #49 #168)
#166 := (iff #48 #165)
#163 := (= #47 #162)
#160 := (= #46 #159)
#157 := (= #45 #156)
#154 := (= #44 #151)
#148 := (- #145)
#152 := (= #148 #151)
#153 := [rewrite]: #152
#149 := (= #44 #148)
#146 := (= #43 #145)
#91 := (= #34 #90)
#92 := [rewrite]: #91
#88 := (= #33 #86)
#89 := [rewrite]: #88
#147 := [monotonicity #89 #92]: #146
#150 := [monotonicity #147]: #149
#155 := [trans #150 #153]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [quant-intro #167]: #169
#187 := [trans #170 #185]: #186
#144 := [asserted]: #49
#188 := [mp #144 #187]: #183
#191 := [mp~ #188 #195]: #183
#239 := [mp #191 #238]: #236
#270 := [mp #239 #269]: #267
#756 := [mp #270 #755]: #751
#70 := -3::Int
#8 := 5::Int
#9 := (f4 f5 5::Int)
#73 := (f3 #9 -3::Int)
#79 := (= #73 -1::Int)
#82 := (not #79)
#13 := 1::Int
#14 := (- 1::Int)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#15 := (= #12 #14)
#16 := (not #15)
#83 := (iff #16 #82)
#80 := (iff #15 #79)
#77 := (= #14 -1::Int)
#78 := [rewrite]: #77
#74 := (= #12 #73)
#71 := (= #11 -3::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#69 := [asserted]: #16
#87 := [mp #69 #84]: #82
#660 := (not #751)
#661 := (or #660 #79)
#406 := (* -1::Int -3::Int)
#405 := (* -1::Int 5::Int)
#738 := (mod #405 #406)
#739 := (+ #73 #738)
#740 := (= #739 0::Int)
#737 := (mod 5::Int -3::Int)
#394 := (* -1::Int #737)
#524 := (+ #73 #394)
#731 := (= #524 0::Int)
#418 := (<= -3::Int 0::Int)
#417 := (>= 5::Int 0::Int)
#421 := (or #417 #418)
#400 := (not #421)
#407 := (<= 5::Int 0::Int)
#419 := (or #407 #418)
#420 := (not #419)
#735 := (or #420 #400)
#741 := (if #735 #731 #740)
#416 := (= #73 0::Int)
#415 := (= 5::Int 0::Int)
#736 := (if #415 #416 #741)
#414 := (= #73 5::Int)
#330 := (= -3::Int 0::Int)
#742 := (if #330 #414 #736)
#662 := (or #660 #742)
#657 := (iff #662 #661)
#648 := (iff #661 #661)
#649 := [rewrite]: #648
#666 := (iff #742 #79)
#656 := (if false #414 #79)
#669 := (iff #656 #79)
#670 := [rewrite]: #669
#658 := (iff #742 #656)
#667 := (iff #736 #79)
#584 := (if false #416 #79)
#678 := (iff #584 #79)
#665 := [rewrite]: #678
#677 := (iff #736 #584)
#582 := (iff #741 #79)
#291 := 2::Int
#545 := (= #73 2::Int)
#578 := (if false #545 #79)
#580 := (iff #578 #79)
#581 := [rewrite]: #580
#579 := (iff #741 #578)
#561 := (iff #740 #79)
#684 := (+ 1::Int #73)
#675 := (= #684 0::Int)
#673 := (iff #675 #79)
#676 := [rewrite]: #673
#577 := (iff #740 #675)
#568 := (= #739 #684)
#682 := (+ #73 1::Int)
#566 := (= #682 #684)
#567 := [rewrite]: #566
#683 := (= #739 #682)
#679 := (= #738 1::Int)
#691 := -5::Int
#687 := (mod -5::Int 3::Int)
#525 := (= #687 1::Int)
#526 := [rewrite]: #525
#694 := (= #738 #687)
#692 := (= #406 3::Int)
#693 := [rewrite]: #692
#685 := (= #405 -5::Int)
#686 := [rewrite]: #685
#523 := [monotonicity #686 #693]: #694
#680 := [trans #523 #526]: #679
#681 := [monotonicity #680]: #683
#527 := [trans #681 #567]: #568
#672 := [monotonicity #527]: #577
#576 := [trans #672 #676]: #561
#689 := (iff #731 #545)
#707 := -2::Int
#700 := (+ -2::Int #73)
#697 := (= #700 0::Int)
#546 := (iff #697 #545)
#688 := [rewrite]: #546
#703 := (iff #731 #697)
#701 := (= #524 #700)
#709 := (+ #73 -2::Int)
#695 := (= #709 #700)
#696 := [rewrite]: #695
#698 := (= #524 #709)
#708 := (= #394 -2::Int)
#427 := (* -1::Int 2::Int)
#422 := (= #427 -2::Int)
#704 := [rewrite]: #422
#428 := (= #394 #427)
#425 := (= #737 2::Int)
#426 := [rewrite]: #425
#706 := [monotonicity #426]: #428
#705 := [trans #706 #704]: #708
#699 := [monotonicity #705]: #698
#702 := [trans #699 #696]: #701
#544 := [monotonicity #702]: #703
#690 := [trans #544 #688]: #689
#711 := (iff #735 false)
#713 := (or false false)
#710 := (iff #713 false)
#714 := [rewrite]: #710
#435 := (iff #735 #713)
#336 := (iff #400 false)
#1 := true
#723 := (not true)
#725 := (iff #723 false)
#363 := [rewrite]: #725
#441 := (iff #400 #723)
#439 := (iff #421 true)
#729 := (or true true)
#716 := (iff #729 true)
#717 := [rewrite]: #716
#727 := (iff #421 #729)
#377 := (iff #418 true)
#718 := [rewrite]: #377
#368 := (iff #417 true)
#369 := [rewrite]: #368
#730 := [monotonicity #369 #718]: #727
#440 := [trans #730 #717]: #439
#442 := [monotonicity #440]: #441
#712 := [trans #442 #363]: #336
#726 := (iff #420 false)
#724 := (iff #420 #723)
#721 := (iff #419 true)
#381 := (or false true)
#384 := (iff #381 true)
#720 := [rewrite]: #384
#382 := (iff #419 #381)
#393 := (iff #407 false)
#734 := [rewrite]: #393
#383 := [monotonicity #734 #718]: #382
#722 := [trans #383 #720]: #721
#719 := [monotonicity #722]: #724
#728 := [trans #719 #363]: #726
#436 := [monotonicity #728 #712]: #435
#715 := [trans #436 #714]: #711
#572 := [monotonicity #715 #690 #576]: #579
#583 := [trans #572 #581]: #582
#397 := (iff #415 false)
#733 := [rewrite]: #397
#674 := [monotonicity #733 #583]: #677
#659 := [trans #674 #665]: #667
#732 := (iff #330 false)
#392 := [rewrite]: #732
#668 := [monotonicity #392 #659]: #658
#671 := [trans #668 #670]: #666
#664 := [monotonicity #671]: #657
#651 := [trans #664 #649]: #657
#663 := [quant-inst #8 #70]: #662
#652 := [mp #663 #651]: #661
[unit-resolution #652 #87 #756]: false
unsat
a7fdbc0f19f952e6755be949d9ee0ea28b9c032d 335 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#39 := (f4 f5 #17)
#40 := (f3 #39 #19)
#749 := (pattern #40)
#21 := 0::Int
#69 := -1::Int
#89 := (* -1::Int #19)
#85 := (* -1::Int #17)
#144 := (mod #85 #89)
#259 := (+ #40 #144)
#260 := (= #259 0::Int)
#41 := (mod #17 #19)
#256 := (* -1::Int #41)
#257 := (+ #40 #256)
#258 := (= #257 0::Int)
#111 := (<= #19 0::Int)
#118 := (>= #17 0::Int)
#203 := (or #118 #111)
#204 := (not #203)
#107 := (<= #17 0::Int)
#201 := (or #107 #111)
#202 := (not #201)
#207 := (or #202 #204)
#261 := (if #207 #258 #260)
#255 := (= #40 0::Int)
#22 := (= #17 0::Int)
#262 := (if #22 #255 #261)
#254 := (= #40 #17)
#23 := (= #19 0::Int)
#263 := (if #23 #254 #262)
#750 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #749) #263)
#266 := (forall (vars (?v0 Int) (?v1 Int)) #263)
#753 := (iff #266 #750)
#751 := (iff #263 #263)
#752 := [refl]: #751
#754 := [quant-intro #752]: #753
#150 := (* -1::Int #144)
#223 := (if #207 #41 #150)
#226 := (if #22 0::Int #223)
#229 := (if #23 #17 #226)
#232 := (= #40 #229)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#112 := (not #111)
#119 := (not #118)
#122 := (and #119 #112)
#108 := (not #107)
#115 := (and #108 #112)
#125 := (or #115 #122)
#170 := (if #125 #41 #150)
#173 := (if #22 0::Int #170)
#176 := (if #23 #17 #173)
#179 := (= #40 #176)
#182 := (forall (vars (?v0 Int) (?v1 Int)) #179)
#236 := (iff #182 #235)
#233 := (iff #179 #232)
#230 := (= #176 #229)
#227 := (= #173 #226)
#224 := (= #170 #223)
#208 := (iff #125 #207)
#205 := (iff #122 #204)
#206 := [rewrite]: #205
#195 := (iff #115 #202)
#196 := [rewrite]: #195
#209 := [monotonicity #196 #206]: #208
#225 := [monotonicity #209]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#193 := (~ #182 #182)
#192 := (~ #179 #179)
#189 := [refl]: #192
#194 := [nnf-pos #189]: #193
#33 := (- #19)
#32 := (- #17)
#42 := (mod #32 #33)
#43 := (- #42)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#44 := (if #30 #41 #43)
#45 := (if #22 0::Int #44)
#46 := (if #23 #17 #45)
#47 := (= #40 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#185 := (iff #48 #182)
#155 := (if #30 #41 #150)
#158 := (if #22 0::Int #155)
#161 := (if #23 #17 #158)
#164 := (= #40 #161)
#167 := (forall (vars (?v0 Int) (?v1 Int)) #164)
#183 := (iff #167 #182)
#180 := (iff #164 #179)
#177 := (= #161 #176)
#174 := (= #158 #173)
#171 := (= #155 #170)
#126 := (iff #30 #125)
#123 := (iff #29 #122)
#113 := (iff #26 #112)
#114 := [rewrite]: #113
#120 := (iff #28 #119)
#121 := [rewrite]: #120
#124 := [monotonicity #121 #114]: #123
#116 := (iff #27 #115)
#109 := (iff #25 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#127 := [monotonicity #117 #124]: #126
#172 := [monotonicity #127]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [quant-intro #181]: #183
#168 := (iff #48 #167)
#165 := (iff #47 #164)
#162 := (= #46 #161)
#159 := (= #45 #158)
#156 := (= #44 #155)
#153 := (= #43 #150)
#147 := (- #144)
#151 := (= #147 #150)
#152 := [rewrite]: #151
#148 := (= #43 #147)
#145 := (= #42 #144)
#90 := (= #33 #89)
#91 := [rewrite]: #90
#87 := (= #32 #85)
#88 := [rewrite]: #87
#146 := [monotonicity #88 #91]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#186 := [trans #169 #184]: #185
#143 := [asserted]: #48
#187 := [mp #143 #186]: #182
#190 := [mp~ #187 #194]: #182
#238 := [mp #190 #237]: #235
#269 := [mp #238 #268]: #266
#755 := [mp #269 #754]: #750
#13 := 2::Int
#11 := 3::Int
#72 := (f4 f5 -1::Int)
#75 := (f3 #72 3::Int)
#78 := (= #75 2::Int)
#81 := (not #78)
#8 := 1::Int
#9 := (- 1::Int)
#10 := (f4 f5 #9)
#12 := (f3 #10 3::Int)
#14 := (= #12 2::Int)
#15 := (not #14)
#82 := (iff #15 #81)
#79 := (iff #14 #78)
#76 := (= #12 #75)
#73 := (= #10 #72)
#70 := (= #9 -1::Int)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#68 := [asserted]: #15
#86 := [mp #68 #83]: #81
#661 := (not #750)
#662 := (or #661 #78)
#405 := (* -1::Int 3::Int)
#404 := (* -1::Int -1::Int)
#737 := (mod #404 #405)
#738 := (+ #75 #737)
#739 := (= #738 0::Int)
#736 := (mod -1::Int 3::Int)
#393 := (* -1::Int #736)
#523 := (+ #75 #393)
#730 := (= #523 0::Int)
#417 := (<= 3::Int 0::Int)
#416 := (>= -1::Int 0::Int)
#420 := (or #416 #417)
#399 := (not #420)
#406 := (<= -1::Int 0::Int)
#418 := (or #406 #417)
#419 := (not #418)
#734 := (or #419 #399)
#740 := (if #734 #730 #739)
#415 := (= #75 0::Int)
#414 := (= -1::Int 0::Int)
#735 := (if #414 #415 #740)
#413 := (= #75 -1::Int)
#329 := (= 3::Int 0::Int)
#741 := (if #329 #413 #735)
#656 := (or #661 #741)
#647 := (iff #656 #662)
#650 := (iff #662 #662)
#651 := [rewrite]: #650
#659 := (iff #741 #78)
#667 := (if false #413 #78)
#665 := (iff #667 #78)
#670 := [rewrite]: #665
#668 := (iff #741 #667)
#655 := (iff #735 #78)
#673 := (if false #415 #78)
#666 := (iff #673 #78)
#658 := [rewrite]: #666
#677 := (iff #735 #673)
#583 := (iff #740 #78)
#1 := true
#571 := (if true #78 #413)
#581 := (iff #571 #78)
#582 := [rewrite]: #581
#579 := (iff #740 #571)
#577 := (iff #739 #413)
#566 := (+ 1::Int #75)
#671 := (= #566 0::Int)
#560 := (iff #671 #413)
#575 := [rewrite]: #560
#672 := (iff #739 #671)
#674 := (= #738 #566)
#680 := (+ #75 1::Int)
#567 := (= #680 #566)
#526 := [rewrite]: #567
#683 := (= #738 #680)
#681 := (= #737 1::Int)
#692 := -3::Int
#522 := (mod 1::Int -3::Int)
#678 := (= #522 1::Int)
#679 := [rewrite]: #678
#524 := (= #737 #522)
#686 := (= #405 -3::Int)
#693 := [rewrite]: #686
#685 := (= #404 1::Int)
#691 := [rewrite]: #685
#525 := [monotonicity #691 #693]: #524
#682 := [trans #525 #679]: #681
#565 := [monotonicity #682]: #683
#576 := [trans #565 #526]: #674
#675 := [monotonicity #576]: #672
#578 := [trans #675 #575]: #577
#690 := (iff #730 #78)
#707 := -2::Int
#700 := (+ -2::Int #75)
#544 := (= #700 0::Int)
#688 := (iff #544 #78)
#689 := [rewrite]: #688
#545 := (iff #730 #544)
#702 := (= #523 #700)
#699 := (+ #75 -2::Int)
#701 := (= #699 #700)
#696 := [rewrite]: #701
#694 := (= #523 #699)
#697 := (= #393 -2::Int)
#706 := (* -1::Int 2::Int)
#704 := (= #706 -2::Int)
#708 := [rewrite]: #704
#421 := (= #393 #706)
#427 := (= #736 2::Int)
#705 := [rewrite]: #427
#703 := [monotonicity #705]: #421
#698 := [trans #703 #708]: #697
#695 := [monotonicity #698]: #694
#543 := [trans #695 #696]: #702
#687 := [monotonicity #543]: #545
#684 := [trans #687 #689]: #690
#425 := (iff #734 true)
#709 := (or false true)
#714 := (iff #709 true)
#424 := [rewrite]: #714
#713 := (iff #734 #709)
#434 := (iff #399 true)
#440 := (not false)
#711 := (iff #440 true)
#712 := [rewrite]: #711
#441 := (iff #399 #440)
#438 := (iff #420 false)
#728 := (or false false)
#715 := (iff #728 false)
#716 := [rewrite]: #715
#726 := (iff #420 #728)
#376 := (iff #417 false)
#717 := [rewrite]: #376
#367 := (iff #416 false)
#368 := [rewrite]: #367
#729 := [monotonicity #368 #717]: #726
#439 := [trans #729 #716]: #438
#335 := [monotonicity #439]: #441
#435 := [trans #335 #712]: #434
#725 := (iff #419 false)
#722 := (not true)
#724 := (iff #722 false)
#362 := [rewrite]: #724
#723 := (iff #419 #722)
#720 := (iff #418 true)
#380 := (or true false)
#383 := (iff #380 true)
#719 := [rewrite]: #383
#381 := (iff #418 #380)
#392 := (iff #406 true)
#733 := [rewrite]: #392
#382 := [monotonicity #733 #717]: #381
#721 := [trans #382 #719]: #720
#718 := [monotonicity #721]: #723
#727 := [trans #718 #362]: #725
#710 := [monotonicity #727 #435]: #713
#426 := [trans #710 #424]: #425
#580 := [monotonicity #426 #684 #578]: #579
#676 := [trans #580 #582]: #583
#396 := (iff #414 false)
#732 := [rewrite]: #396
#664 := [monotonicity #732 #676]: #677
#657 := [trans #664 #658]: #655
#731 := (iff #329 false)
#391 := [rewrite]: #731
#669 := [monotonicity #391 #657]: #668
#660 := [trans #669 #670]: #659
#648 := [monotonicity #660]: #647
#652 := [trans #648 #651]: #647
#663 := [quant-inst #69 #11]: #656
#653 := [mp #663 #652]: #662
[unit-resolution #653 #86 #755]: false
unsat
e5eb6ef756ed3738c8596e457b2e9e48f554cfa6 316 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#750 := (pattern #38)
#12 := 0::Int
#83 := -1::Int
#88 := (* -1::Int #18)
#85 := (* -1::Int #16)
#143 := (mod #85 #88)
#258 := (+ #38 #143)
#259 := (= #258 0::Int)
#39 := (mod #16 #18)
#255 := (* -1::Int #39)
#256 := (+ #38 #255)
#257 := (= #256 0::Int)
#110 := (<= #18 0::Int)
#117 := (>= #16 0::Int)
#202 := (or #117 #110)
#203 := (not #202)
#106 := (<= #16 0::Int)
#200 := (or #106 #110)
#201 := (not #200)
#206 := (or #201 #203)
#260 := (if #206 #257 #259)
#254 := (= #38 0::Int)
#20 := (= #16 0::Int)
#261 := (if #20 #254 #260)
#253 := (= #38 #16)
#21 := (= #18 0::Int)
#262 := (if #21 #253 #261)
#751 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #750) #262)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#754 := (iff #265 #751)
#752 := (iff #262 #262)
#753 := [refl]: #752
#755 := [quant-intro #753]: #754
#149 := (* -1::Int #143)
#222 := (if #206 #39 #149)
#225 := (if #20 0::Int #222)
#228 := (if #21 #16 #225)
#231 := (= #38 #228)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#266 := (iff #234 #265)
#263 := (iff #231 #262)
#264 := [rewrite]: #263
#267 := [quant-intro #264]: #266
#111 := (not #110)
#118 := (not #117)
#121 := (and #118 #111)
#107 := (not #106)
#114 := (and #107 #111)
#124 := (or #114 #121)
#169 := (if #124 #39 #149)
#172 := (if #20 0::Int #169)
#175 := (if #21 #16 #172)
#178 := (= #38 #175)
#181 := (forall (vars (?v0 Int) (?v1 Int)) #178)
#235 := (iff #181 #234)
#232 := (iff #178 #231)
#229 := (= #175 #228)
#226 := (= #172 #225)
#223 := (= #169 #222)
#207 := (iff #124 #206)
#204 := (iff #121 #203)
#205 := [rewrite]: #204
#194 := (iff #114 #201)
#195 := [rewrite]: #194
#208 := [monotonicity #195 #205]: #207
#224 := [monotonicity #208]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#192 := (~ #181 #181)
#191 := (~ #178 #178)
#188 := [refl]: #191
#193 := [nnf-pos #188]: #192
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#184 := (iff #46 #181)
#154 := (if #28 #39 #149)
#157 := (if #20 0::Int #154)
#160 := (if #21 #16 #157)
#163 := (= #38 #160)
#166 := (forall (vars (?v0 Int) (?v1 Int)) #163)
#182 := (iff #166 #181)
#179 := (iff #163 #178)
#176 := (= #160 #175)
#173 := (= #157 #172)
#170 := (= #154 #169)
#125 := (iff #28 #124)
#122 := (iff #27 #121)
#112 := (iff #24 #111)
#113 := [rewrite]: #112
#119 := (iff #26 #118)
#120 := [rewrite]: #119
#123 := [monotonicity #120 #113]: #122
#115 := (iff #25 #114)
#108 := (iff #23 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#126 := [monotonicity #116 #123]: #125
#171 := [monotonicity #126]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#167 := (iff #46 #166)
#164 := (iff #45 #163)
#161 := (= #44 #160)
#158 := (= #43 #157)
#155 := (= #42 #154)
#152 := (= #41 #149)
#146 := (- #143)
#150 := (= #146 #149)
#151 := [rewrite]: #150
#147 := (= #41 #146)
#144 := (= #40 #143)
#89 := (= #31 #88)
#90 := [rewrite]: #89
#86 := (= #30 #85)
#87 := [rewrite]: #86
#145 := [monotonicity #87 #90]: #144
#148 := [monotonicity #145]: #147
#153 := [trans #148 #151]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#185 := [trans #168 #183]: #184
#142 := [asserted]: #46
#186 := [mp #142 #185]: #181
#189 := [mp~ #186 #193]: #181
#237 := [mp #189 #236]: #234
#268 := [mp #237 #267]: #265
#756 := [mp #268 #755]: #751
#8 := 3::Int
#67 := -3::Int
#70 := (f4 f5 -3::Int)
#73 := (f3 #70 3::Int)
#76 := (= #73 0::Int)
#79 := (not #76)
#9 := (- 3::Int)
#10 := (f4 f5 #9)
#11 := (f3 #10 3::Int)
#13 := (= #11 0::Int)
#14 := (not #13)
#80 := (iff #14 #79)
#77 := (iff #13 #76)
#74 := (= #11 #73)
#71 := (= #10 #70)
#68 := (= #9 -3::Int)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#66 := [asserted]: #14
#84 := [mp #66 #81]: #79
#582 := (not #751)
#583 := (or #582 #76)
#405 := (* -1::Int 3::Int)
#731 := (* -1::Int -3::Int)
#406 := (mod #731 #405)
#738 := (+ #73 #406)
#739 := (= #738 0::Int)
#735 := (mod -3::Int 3::Int)
#737 := (* -1::Int #735)
#394 := (+ #73 #737)
#524 := (= #394 0::Int)
#407 := (<= 3::Int 0::Int)
#420 := (>= -3::Int 0::Int)
#417 := (or #420 #407)
#421 := (not #417)
#416 := (<= -3::Int 0::Int)
#418 := (or #416 #407)
#419 := (not #418)
#400 := (or #419 #421)
#740 := (if #400 #524 #739)
#415 := (= -3::Int 0::Int)
#741 := (if #415 #76 #740)
#414 := (= #73 -3::Int)
#330 := (= 3::Int 0::Int)
#736 := (if #330 #414 #741)
#584 := (or #582 #736)
#674 := (iff #584 #583)
#665 := (iff #583 #583)
#667 := [rewrite]: #665
#580 := (iff #736 #76)
#561 := (if false #414 #76)
#579 := (iff #561 #76)
#572 := [rewrite]: #579
#576 := (iff #736 #561)
#673 := (iff #741 #76)
#568 := (if false #76 #76)
#577 := (iff #568 #76)
#672 := [rewrite]: #577
#527 := (iff #741 #568)
#566 := (iff #740 #76)
#1 := true
#680 := (if true #76 #76)
#681 := (iff #680 #76)
#684 := [rewrite]: #681
#682 := (iff #740 #680)
#526 := (iff #739 #76)
#523 := (= #738 #73)
#698 := (+ #73 0::Int)
#695 := (= #698 #73)
#696 := [rewrite]: #695
#687 := (= #738 #698)
#692 := (= #406 0::Int)
#689 := (mod 3::Int -3::Int)
#685 := (= #689 0::Int)
#686 := [rewrite]: #685
#690 := (= #406 #689)
#546 := (= #405 -3::Int)
#688 := [rewrite]: #546
#544 := (= #731 3::Int)
#545 := [rewrite]: #544
#691 := [monotonicity #545 #688]: #690
#693 := [trans #691 #686]: #692
#694 := [monotonicity #693]: #687
#525 := [trans #694 #696]: #523
#679 := [monotonicity #525]: #526
#697 := (iff #524 #76)
#701 := (= #394 #73)
#699 := (= #394 #698)
#705 := (= #737 0::Int)
#706 := (* -1::Int 0::Int)
#704 := (= #706 0::Int)
#708 := [rewrite]: #704
#707 := (= #737 #706)
#427 := (= #735 0::Int)
#428 := [rewrite]: #427
#422 := [monotonicity #428]: #707
#709 := [trans #422 #708]: #705
#700 := [monotonicity #709]: #699
#702 := [trans #700 #696]: #701
#703 := [monotonicity #702]: #697
#425 := (iff #400 true)
#436 := (or false true)
#711 := (iff #436 true)
#715 := [rewrite]: #711
#710 := (iff #400 #436)
#713 := (iff #421 true)
#440 := (not false)
#336 := (iff #440 true)
#712 := [rewrite]: #336
#441 := (iff #421 #440)
#717 := (iff #417 false)
#369 := (or false false)
#730 := (iff #369 false)
#716 := [rewrite]: #730
#729 := (iff #417 #369)
#734 := (iff #407 false)
#377 := [rewrite]: #734
#728 := (iff #420 false)
#368 := [rewrite]: #728
#727 := [monotonicity #368 #377]: #729
#439 := [trans #727 #716]: #717
#442 := [monotonicity #439]: #441
#435 := [trans #442 #712]: #713
#363 := (iff #419 false)
#722 := (not true)
#719 := (iff #722 false)
#725 := [rewrite]: #719
#723 := (iff #419 #722)
#720 := (iff #418 true)
#718 := (or true false)
#383 := (iff #718 true)
#384 := [rewrite]: #383
#381 := (iff #418 #718)
#733 := (iff #416 true)
#393 := [rewrite]: #733
#382 := [monotonicity #393 #377]: #381
#721 := [trans #382 #384]: #720
#724 := [monotonicity #721]: #723
#726 := [trans #724 #725]: #363
#714 := [monotonicity #726 #435]: #710
#426 := [trans #714 #715]: #425
#683 := [monotonicity #426 #703 #679]: #682
#567 := [trans #683 #684]: #566
#392 := (iff #415 false)
#397 := [rewrite]: #392
#675 := [monotonicity #397 #567]: #527
#676 := [trans #675 #672]: #673
#742 := (iff #330 false)
#732 := [rewrite]: #742
#578 := [monotonicity #732 #676]: #576
#581 := [trans #578 #572]: #580
#678 := [monotonicity #581]: #674
#659 := [trans #678 #667]: #674
#677 := [quant-inst #67 #8]: #584
#656 := [mp #677 #659]: #583
[unit-resolution #656 #84 #756]: false
unsat
2c8de94340a3f1759be7a084199a7b69b2a47b6e 338 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#39 := (f4 f5 #17)
#40 := (f3 #39 #19)
#750 := (pattern #40)
#21 := 0::Int
#85 := -1::Int
#90 := (* -1::Int #19)
#87 := (* -1::Int #17)
#145 := (mod #87 #90)
#260 := (+ #40 #145)
#261 := (= #260 0::Int)
#41 := (mod #17 #19)
#257 := (* -1::Int #41)
#258 := (+ #40 #257)
#259 := (= #258 0::Int)
#112 := (<= #19 0::Int)
#119 := (>= #17 0::Int)
#204 := (or #119 #112)
#205 := (not #204)
#108 := (<= #17 0::Int)
#202 := (or #108 #112)
#203 := (not #202)
#208 := (or #203 #205)
#262 := (if #208 #259 #261)
#256 := (= #40 0::Int)
#22 := (= #17 0::Int)
#263 := (if #22 #256 #262)
#255 := (= #40 #17)
#23 := (= #19 0::Int)
#264 := (if #23 #255 #263)
#751 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #750) #264)
#267 := (forall (vars (?v0 Int) (?v1 Int)) #264)
#754 := (iff #267 #751)
#752 := (iff #264 #264)
#753 := [refl]: #752
#755 := [quant-intro #753]: #754
#151 := (* -1::Int #145)
#224 := (if #208 #41 #151)
#227 := (if #22 0::Int #224)
#230 := (if #23 #17 #227)
#233 := (= #40 #230)
#236 := (forall (vars (?v0 Int) (?v1 Int)) #233)
#268 := (iff #236 #267)
#265 := (iff #233 #264)
#266 := [rewrite]: #265
#269 := [quant-intro #266]: #268
#113 := (not #112)
#120 := (not #119)
#123 := (and #120 #113)
#109 := (not #108)
#116 := (and #109 #113)
#126 := (or #116 #123)
#171 := (if #126 #41 #151)
#174 := (if #22 0::Int #171)
#177 := (if #23 #17 #174)
#180 := (= #40 #177)
#183 := (forall (vars (?v0 Int) (?v1 Int)) #180)
#237 := (iff #183 #236)
#234 := (iff #180 #233)
#231 := (= #177 #230)
#228 := (= #174 #227)
#225 := (= #171 #224)
#209 := (iff #126 #208)
#206 := (iff #123 #205)
#207 := [rewrite]: #206
#196 := (iff #116 #203)
#197 := [rewrite]: #196
#210 := [monotonicity #197 #207]: #209
#226 := [monotonicity #210]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [quant-intro #235]: #237
#194 := (~ #183 #183)
#193 := (~ #180 #180)
#190 := [refl]: #193
#195 := [nnf-pos #190]: #194
#33 := (- #19)
#32 := (- #17)
#42 := (mod #32 #33)
#43 := (- #42)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#44 := (if #30 #41 #43)
#45 := (if #22 0::Int #44)
#46 := (if #23 #17 #45)
#47 := (= #40 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#186 := (iff #48 #183)
#156 := (if #30 #41 #151)
#159 := (if #22 0::Int #156)
#162 := (if #23 #17 #159)
#165 := (= #40 #162)
#168 := (forall (vars (?v0 Int) (?v1 Int)) #165)
#184 := (iff #168 #183)
#181 := (iff #165 #180)
#178 := (= #162 #177)
#175 := (= #159 #174)
#172 := (= #156 #171)
#127 := (iff #30 #126)
#124 := (iff #29 #123)
#114 := (iff #26 #113)
#115 := [rewrite]: #114
#121 := (iff #28 #120)
#122 := [rewrite]: #121
#125 := [monotonicity #122 #115]: #124
#117 := (iff #27 #116)
#110 := (iff #25 #109)
#111 := [rewrite]: #110
#118 := [monotonicity #111 #115]: #117
#128 := [monotonicity #118 #125]: #127
#173 := [monotonicity #128]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [quant-intro #182]: #184
#169 := (iff #48 #168)
#166 := (iff #47 #165)
#163 := (= #46 #162)
#160 := (= #45 #159)
#157 := (= #44 #156)
#154 := (= #43 #151)
#148 := (- #145)
#152 := (= #148 #151)
#153 := [rewrite]: #152
#149 := (= #43 #148)
#146 := (= #42 #145)
#91 := (= #33 #90)
#92 := [rewrite]: #91
#88 := (= #32 #87)
#89 := [rewrite]: #88
#147 := [monotonicity #89 #92]: #146
#150 := [monotonicity #147]: #149
#155 := [trans #150 #153]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [quant-intro #167]: #169
#187 := [trans #170 #185]: #186
#144 := [asserted]: #48
#188 := [mp #144 #187]: #183
#191 := [mp~ #188 #195]: #183
#239 := [mp #191 #238]: #236
#270 := [mp #239 #269]: #267
#756 := [mp #270 #755]: #751
#13 := 1::Int
#11 := 3::Int
#69 := -5::Int
#72 := (f4 f5 -5::Int)
#75 := (f3 #72 3::Int)
#78 := (= #75 1::Int)
#81 := (not #78)
#8 := 5::Int
#9 := (- 5::Int)
#10 := (f4 f5 #9)
#12 := (f3 #10 3::Int)
#14 := (= #12 1::Int)
#15 := (not #14)
#82 := (iff #15 #81)
#79 := (iff #14 #78)
#76 := (= #12 #75)
#73 := (= #10 #72)
#70 := (= #9 -5::Int)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#68 := [asserted]: #15
#86 := [mp #68 #83]: #81
#663 := (not #751)
#657 := (or #663 #78)
#406 := (* -1::Int 3::Int)
#405 := (* -1::Int -5::Int)
#738 := (mod #405 #406)
#739 := (+ #75 #738)
#740 := (= #739 0::Int)
#737 := (mod -5::Int 3::Int)
#394 := (* -1::Int #737)
#524 := (+ #75 #394)
#731 := (= #524 0::Int)
#418 := (<= 3::Int 0::Int)
#417 := (>= -5::Int 0::Int)
#421 := (or #417 #418)
#400 := (not #421)
#407 := (<= -5::Int 0::Int)
#419 := (or #407 #418)
#420 := (not #419)
#735 := (or #420 #400)
#741 := (if #735 #731 #740)
#416 := (= #75 0::Int)
#415 := (= -5::Int 0::Int)
#736 := (if #415 #416 #741)
#414 := (= #75 -5::Int)
#330 := (= 3::Int 0::Int)
#742 := (if #330 #414 #736)
#664 := (or #663 #742)
#649 := (iff #664 #657)
#652 := (iff #657 #657)
#653 := [rewrite]: #652
#661 := (iff #742 #78)
#669 := (if false #414 #78)
#671 := (iff #669 #78)
#660 := [rewrite]: #671
#670 := (iff #742 #669)
#658 := (iff #736 #78)
#678 := (if false #416 #78)
#659 := (iff #678 #78)
#656 := [rewrite]: #659
#665 := (iff #736 #678)
#677 := (iff #741 #78)
#676 := -2::Int
#561 := (= #75 -2::Int)
#1 := true
#580 := (if true #78 #561)
#583 := (iff #580 #78)
#584 := [rewrite]: #583
#581 := (iff #741 #580)
#579 := (iff #740 #561)
#291 := 2::Int
#566 := (+ 2::Int #75)
#577 := (= #566 0::Int)
#576 := (iff #577 #561)
#578 := [rewrite]: #576
#672 := (iff #740 #577)
#527 := (= #739 #566)
#683 := (+ #75 2::Int)
#567 := (= #683 #566)
#568 := [rewrite]: #567
#681 := (= #739 #683)
#680 := (= #738 2::Int)
#692 := -3::Int
#694 := (mod 5::Int -3::Int)
#526 := (= #694 2::Int)
#679 := [rewrite]: #526
#523 := (= #738 #694)
#693 := (= #406 -3::Int)
#687 := [rewrite]: #693
#685 := (= #405 5::Int)
#686 := [rewrite]: #685
#525 := [monotonicity #686 #687]: #523
#682 := [trans #525 #679]: #680
#684 := [monotonicity #682]: #681
#675 := [trans #684 #568]: #527
#673 := [monotonicity #675]: #672
#572 := [trans #673 #578]: #579
#690 := (iff #731 #78)
#696 := (+ -1::Int #75)
#544 := (= #696 0::Int)
#688 := (iff #544 #78)
#689 := [rewrite]: #688
#545 := (iff #731 #544)
#697 := (= #524 #696)
#699 := (+ #75 -1::Int)
#701 := (= #699 #696)
#702 := [rewrite]: #701
#700 := (= #524 #699)
#709 := (= #394 -1::Int)
#707 := (* -1::Int 1::Int)
#708 := (= #707 -1::Int)
#705 := [rewrite]: #708
#422 := (= #394 #707)
#428 := (= #737 1::Int)
#706 := [rewrite]: #428
#704 := [monotonicity #706]: #422
#698 := [trans #704 #705]: #709
#695 := [monotonicity #698]: #700
#703 := [trans #695 #702]: #697
#546 := [monotonicity #703]: #545
#691 := [trans #546 #689]: #690
#426 := (iff #735 true)
#710 := (or false true)
#715 := (iff #710 true)
#425 := [rewrite]: #715
#714 := (iff #735 #710)
#435 := (iff #400 true)
#441 := (not false)
#712 := (iff #441 true)
#713 := [rewrite]: #712
#442 := (iff #400 #441)
#439 := (iff #421 false)
#729 := (or false false)
#716 := (iff #729 false)
#717 := [rewrite]: #716
#727 := (iff #421 #729)
#377 := (iff #418 false)
#718 := [rewrite]: #377
#368 := (iff #417 false)
#369 := [rewrite]: #368
#730 := [monotonicity #369 #718]: #727
#440 := [trans #730 #717]: #439
#336 := [monotonicity #440]: #442
#436 := [trans #336 #713]: #435
#726 := (iff #420 false)
#723 := (not true)
#725 := (iff #723 false)
#363 := [rewrite]: #725
#724 := (iff #420 #723)
#721 := (iff #419 true)
#381 := (or true false)
#384 := (iff #381 true)
#720 := [rewrite]: #384
#382 := (iff #419 #381)
#393 := (iff #407 true)
#734 := [rewrite]: #393
#383 := [monotonicity #734 #718]: #382
#722 := [trans #383 #720]: #721
#719 := [monotonicity #722]: #724
#728 := [trans #719 #363]: #726
#711 := [monotonicity #728 #436]: #714
#427 := [trans #711 #425]: #426
#582 := [monotonicity #427 #691 #572]: #581
#674 := [trans #582 #584]: #677
#397 := (iff #415 false)
#733 := [rewrite]: #397
#667 := [monotonicity #733 #674]: #665
#668 := [trans #667 #656]: #658
#732 := (iff #330 false)
#392 := [rewrite]: #732
#666 := [monotonicity #392 #668]: #670
#662 := [trans #666 #660]: #661
#651 := [monotonicity #662]: #649
#654 := [trans #651 #653]: #649
#648 := [quant-inst #69 #11]: #664
#650 := [mp #648 #654]: #657
[unit-resolution #650 #86 #756]: false
unsat
8ff94171ae81c6acb1105939644d44501cb6f57a 335 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#39 := (f4 f5 #17)
#40 := (f3 #39 #19)
#753 := (pattern #40)
#21 := 0::Int
#69 := -1::Int
#92 := (* -1::Int #19)
#88 := (* -1::Int #17)
#147 := (mod #88 #92)
#262 := (+ #40 #147)
#263 := (= #262 0::Int)
#41 := (mod #17 #19)
#259 := (* -1::Int #41)
#260 := (+ #40 #259)
#261 := (= #260 0::Int)
#114 := (<= #19 0::Int)
#121 := (>= #17 0::Int)
#206 := (or #121 #114)
#207 := (not #206)
#110 := (<= #17 0::Int)
#204 := (or #110 #114)
#205 := (not #204)
#210 := (or #205 #207)
#264 := (if #210 #261 #263)
#258 := (= #40 0::Int)
#22 := (= #17 0::Int)
#265 := (if #22 #258 #264)
#257 := (= #40 #17)
#23 := (= #19 0::Int)
#266 := (if #23 #257 #265)
#754 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #753) #266)
#269 := (forall (vars (?v0 Int) (?v1 Int)) #266)
#757 := (iff #269 #754)
#755 := (iff #266 #266)
#756 := [refl]: #755
#758 := [quant-intro #756]: #757
#153 := (* -1::Int #147)
#226 := (if #210 #41 #153)
#229 := (if #22 0::Int #226)
#232 := (if #23 #17 #229)
#235 := (= #40 #232)
#238 := (forall (vars (?v0 Int) (?v1 Int)) #235)
#270 := (iff #238 #269)
#267 := (iff #235 #266)
#268 := [rewrite]: #267
#271 := [quant-intro #268]: #270
#115 := (not #114)
#122 := (not #121)
#125 := (and #122 #115)
#111 := (not #110)
#118 := (and #111 #115)
#128 := (or #118 #125)
#173 := (if #128 #41 #153)
#176 := (if #22 0::Int #173)
#179 := (if #23 #17 #176)
#182 := (= #40 #179)
#185 := (forall (vars (?v0 Int) (?v1 Int)) #182)
#239 := (iff #185 #238)
#236 := (iff #182 #235)
#233 := (= #179 #232)
#230 := (= #176 #229)
#227 := (= #173 #226)
#211 := (iff #128 #210)
#208 := (iff #125 #207)
#209 := [rewrite]: #208
#198 := (iff #118 #205)
#199 := [rewrite]: #198
#212 := [monotonicity #199 #209]: #211
#228 := [monotonicity #212]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [monotonicity #234]: #236
#240 := [quant-intro #237]: #239
#196 := (~ #185 #185)
#195 := (~ #182 #182)
#192 := [refl]: #195
#197 := [nnf-pos #192]: #196
#33 := (- #19)
#32 := (- #17)
#42 := (mod #32 #33)
#43 := (- #42)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#44 := (if #30 #41 #43)
#45 := (if #22 0::Int #44)
#46 := (if #23 #17 #45)
#47 := (= #40 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#188 := (iff #48 #185)
#158 := (if #30 #41 #153)
#161 := (if #22 0::Int #158)
#164 := (if #23 #17 #161)
#167 := (= #40 #164)
#170 := (forall (vars (?v0 Int) (?v1 Int)) #167)
#186 := (iff #170 #185)
#183 := (iff #167 #182)
#180 := (= #164 #179)
#177 := (= #161 #176)
#174 := (= #158 #173)
#129 := (iff #30 #128)
#126 := (iff #29 #125)
#116 := (iff #26 #115)
#117 := [rewrite]: #116
#123 := (iff #28 #122)
#124 := [rewrite]: #123
#127 := [monotonicity #124 #117]: #126
#119 := (iff #27 #118)
#112 := (iff #25 #111)
#113 := [rewrite]: #112
#120 := [monotonicity #113 #117]: #119
#130 := [monotonicity #120 #127]: #129
#175 := [monotonicity #130]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [quant-intro #184]: #186
#171 := (iff #48 #170)
#168 := (iff #47 #167)
#165 := (= #46 #164)
#162 := (= #45 #161)
#159 := (= #44 #158)
#156 := (= #43 #153)
#150 := (- #147)
#154 := (= #150 #153)
#155 := [rewrite]: #154
#151 := (= #43 #150)
#148 := (= #42 #147)
#93 := (= #33 #92)
#94 := [rewrite]: #93
#90 := (= #32 #88)
#91 := [rewrite]: #90
#149 := [monotonicity #91 #94]: #148
#152 := [monotonicity #149]: #151
#157 := [trans #152 #155]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#172 := [quant-intro #169]: #171
#189 := [trans #172 #187]: #188
#146 := [asserted]: #48
#190 := [mp #146 #189]: #185
#193 := [mp~ #190 #197]: #185
#241 := [mp #193 #240]: #238
#272 := [mp #241 #271]: #269
#759 := [mp #272 #758]: #754
#75 := -3::Int
#72 := (f4 f5 -1::Int)
#78 := (f3 #72 -3::Int)
#81 := (= #78 -1::Int)
#84 := (not #81)
#8 := 1::Int
#9 := (- 1::Int)
#11 := 3::Int
#12 := (- 3::Int)
#10 := (f4 f5 #9)
#13 := (f3 #10 #12)
#14 := (= #13 #9)
#15 := (not #14)
#85 := (iff #15 #84)
#82 := (iff #14 #81)
#70 := (= #9 -1::Int)
#71 := [rewrite]: #70
#79 := (= #13 #78)
#76 := (= #12 -3::Int)
#77 := [rewrite]: #76
#73 := (= #10 #72)
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#83 := [monotonicity #80 #71]: #82
#86 := [monotonicity #83]: #85
#68 := [asserted]: #15
#89 := [mp #68 #86]: #84
#669 := (not #754)
#674 := (or #669 #81)
#408 := (* -1::Int -3::Int)
#734 := (* -1::Int -1::Int)
#409 := (mod #734 #408)
#741 := (+ #78 #409)
#742 := (= #741 0::Int)
#738 := (mod -1::Int -3::Int)
#740 := (* -1::Int #738)
#397 := (+ #78 #740)
#527 := (= #397 0::Int)
#410 := (<= -3::Int 0::Int)
#423 := (>= -1::Int 0::Int)
#420 := (or #423 #410)
#424 := (not #420)
#419 := (<= -1::Int 0::Int)
#421 := (or #419 #410)
#422 := (not #421)
#403 := (or #422 #424)
#743 := (if #403 #527 #742)
#418 := (= #78 0::Int)
#417 := (= -1::Int 0::Int)
#744 := (if #417 #418 #743)
#333 := (= -3::Int 0::Int)
#739 := (if #333 #81 #744)
#663 := (or #669 #739)
#665 := (iff #663 #674)
#660 := (iff #674 #674)
#667 := [rewrite]: #660
#672 := (iff #739 #81)
#670 := (if false #81 #81)
#661 := (iff #670 #81)
#671 := [rewrite]: #661
#662 := (iff #739 #670)
#681 := (iff #744 #81)
#585 := (if false #418 #81)
#680 := (iff #585 #81)
#677 := [rewrite]: #680
#586 := (iff #744 #585)
#583 := (iff #743 #81)
#293 := 2::Int
#547 := (= #78 2::Int)
#564 := (if false #547 #81)
#582 := (iff #564 #81)
#575 := [rewrite]: #582
#579 := (iff #743 #564)
#676 := (iff #742 #81)
#686 := (+ 1::Int #78)
#571 := (= #686 0::Int)
#580 := (iff #571 #81)
#675 := [rewrite]: #580
#530 := (iff #742 #571)
#569 := (= #741 #686)
#682 := (+ #78 1::Int)
#684 := (= #682 #686)
#687 := [rewrite]: #684
#683 := (= #741 #682)
#528 := (= #409 1::Int)
#695 := (mod 1::Int 3::Int)
#697 := (= #695 1::Int)
#526 := [rewrite]: #697
#696 := (= #409 #695)
#688 := (= #408 3::Int)
#689 := [rewrite]: #688
#693 := (= #734 1::Int)
#694 := [rewrite]: #693
#690 := [monotonicity #694 #689]: #696
#529 := [trans #690 #526]: #528
#685 := [monotonicity #529]: #683
#570 := [trans #685 #687]: #569
#678 := [monotonicity #570]: #530
#679 := [trans #678 #675]: #676
#691 := (iff #527 #547)
#709 := -2::Int
#702 := (+ -2::Int #78)
#705 := (= #702 0::Int)
#548 := (iff #705 #547)
#549 := [rewrite]: #548
#700 := (iff #527 #705)
#699 := (= #397 #702)
#708 := (+ #78 -2::Int)
#703 := (= #708 #702)
#698 := [rewrite]: #703
#712 := (= #397 #708)
#707 := (= #740 -2::Int)
#429 := (* -1::Int 2::Int)
#710 := (= #429 -2::Int)
#425 := [rewrite]: #710
#430 := (= #740 #429)
#718 := (= #738 2::Int)
#428 := [rewrite]: #718
#431 := [monotonicity #428]: #430
#711 := [trans #431 #425]: #707
#701 := [monotonicity #711]: #712
#704 := [trans #701 #698]: #699
#706 := [monotonicity #704]: #700
#692 := [trans #706 #549]: #691
#717 := (iff #403 false)
#715 := (or false false)
#439 := (iff #715 false)
#713 := [rewrite]: #439
#716 := (iff #403 #715)
#445 := (iff #424 false)
#1 := true
#725 := (not true)
#722 := (iff #725 false)
#728 := [rewrite]: #722
#443 := (iff #424 #725)
#720 := (iff #420 true)
#372 := (or false true)
#733 := (iff #372 true)
#719 := [rewrite]: #733
#732 := (iff #420 #372)
#737 := (iff #410 true)
#380 := [rewrite]: #737
#731 := (iff #423 false)
#371 := [rewrite]: #731
#730 := [monotonicity #371 #380]: #732
#442 := [trans #730 #719]: #720
#444 := [monotonicity #442]: #443
#339 := [trans #444 #728]: #445
#366 := (iff #422 false)
#726 := (iff #422 #725)
#723 := (iff #421 true)
#721 := (or true true)
#386 := (iff #721 true)
#387 := [rewrite]: #386
#384 := (iff #421 #721)
#736 := (iff #419 true)
#396 := [rewrite]: #736
#385 := [monotonicity #396 #380]: #384
#724 := [trans #385 #387]: #723
#727 := [monotonicity #724]: #726
#729 := [trans #727 #728]: #366
#438 := [monotonicity #729 #339]: #716
#714 := [trans #438 #713]: #717
#581 := [monotonicity #714 #692 #679]: #579
#584 := [trans #581 #575]: #583
#395 := (iff #417 false)
#400 := [rewrite]: #395
#587 := [monotonicity #400 #584]: #586
#668 := [trans #587 #677]: #681
#745 := (iff #333 false)
#735 := [rewrite]: #745
#659 := [monotonicity #735 #668]: #662
#673 := [trans #659 #671]: #672
#666 := [monotonicity #673]: #665
#651 := [trans #666 #667]: #665
#664 := [quant-inst #69 #75]: #663
#652 := [mp #664 #651]: #674
[unit-resolution #652 #89 #759]: false
unsat
fa0f3c13527e84e33e9431394773a66086612292 301 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#750 := (pattern #38)
#12 := 0::Int
#83 := -1::Int
#88 := (* -1::Int #18)
#85 := (* -1::Int #16)
#143 := (mod #85 #88)
#258 := (+ #38 #143)
#259 := (= #258 0::Int)
#39 := (mod #16 #18)
#255 := (* -1::Int #39)
#256 := (+ #38 #255)
#257 := (= #256 0::Int)
#110 := (<= #18 0::Int)
#117 := (>= #16 0::Int)
#202 := (or #117 #110)
#203 := (not #202)
#106 := (<= #16 0::Int)
#200 := (or #106 #110)
#201 := (not #200)
#206 := (or #201 #203)
#260 := (if #206 #257 #259)
#254 := (= #38 0::Int)
#20 := (= #16 0::Int)
#261 := (if #20 #254 #260)
#253 := (= #38 #16)
#21 := (= #18 0::Int)
#262 := (if #21 #253 #261)
#751 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #750) #262)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#754 := (iff #265 #751)
#752 := (iff #262 #262)
#753 := [refl]: #752
#755 := [quant-intro #753]: #754
#149 := (* -1::Int #143)
#222 := (if #206 #39 #149)
#225 := (if #20 0::Int #222)
#228 := (if #21 #16 #225)
#231 := (= #38 #228)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#266 := (iff #234 #265)
#263 := (iff #231 #262)
#264 := [rewrite]: #263
#267 := [quant-intro #264]: #266
#111 := (not #110)
#118 := (not #117)
#121 := (and #118 #111)
#107 := (not #106)
#114 := (and #107 #111)
#124 := (or #114 #121)
#169 := (if #124 #39 #149)
#172 := (if #20 0::Int #169)
#175 := (if #21 #16 #172)
#178 := (= #38 #175)
#181 := (forall (vars (?v0 Int) (?v1 Int)) #178)
#235 := (iff #181 #234)
#232 := (iff #178 #231)
#229 := (= #175 #228)
#226 := (= #172 #225)
#223 := (= #169 #222)
#207 := (iff #124 #206)
#204 := (iff #121 #203)
#205 := [rewrite]: #204
#194 := (iff #114 #201)
#195 := [rewrite]: #194
#208 := [monotonicity #195 #205]: #207
#224 := [monotonicity #208]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#192 := (~ #181 #181)
#191 := (~ #178 #178)
#188 := [refl]: #191
#193 := [nnf-pos #188]: #192
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#184 := (iff #46 #181)
#154 := (if #28 #39 #149)
#157 := (if #20 0::Int #154)
#160 := (if #21 #16 #157)
#163 := (= #38 #160)
#166 := (forall (vars (?v0 Int) (?v1 Int)) #163)
#182 := (iff #166 #181)
#179 := (iff #163 #178)
#176 := (= #160 #175)
#173 := (= #157 #172)
#170 := (= #154 #169)
#125 := (iff #28 #124)
#122 := (iff #27 #121)
#112 := (iff #24 #111)
#113 := [rewrite]: #112
#119 := (iff #26 #118)
#120 := [rewrite]: #119
#123 := [monotonicity #120 #113]: #122
#115 := (iff #25 #114)
#108 := (iff #23 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#126 := [monotonicity #116 #123]: #125
#171 := [monotonicity #126]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#167 := (iff #46 #166)
#164 := (iff #45 #163)
#161 := (= #44 #160)
#158 := (= #43 #157)
#155 := (= #42 #154)
#152 := (= #41 #149)
#146 := (- #143)
#150 := (= #146 #149)
#151 := [rewrite]: #150
#147 := (= #41 #146)
#144 := (= #40 #143)
#89 := (= #31 #88)
#90 := [rewrite]: #89
#86 := (= #30 #85)
#87 := [rewrite]: #86
#145 := [monotonicity #87 #90]: #144
#148 := [monotonicity #145]: #147
#153 := [trans #148 #151]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#185 := [trans #168 #183]: #184
#142 := [asserted]: #46
#186 := [mp #142 #185]: #181
#189 := [mp~ #186 #193]: #181
#237 := [mp #189 #236]: #234
#268 := [mp #237 #267]: #265
#756 := [mp #268 #755]: #751
#67 := -3::Int
#70 := (f4 f5 -3::Int)
#73 := (f3 #70 -3::Int)
#76 := (= #73 0::Int)
#79 := (not #76)
#8 := 3::Int
#9 := (- 3::Int)
#10 := (f4 f5 #9)
#11 := (f3 #10 #9)
#13 := (= #11 0::Int)
#14 := (not #13)
#80 := (iff #14 #79)
#77 := (iff #13 #76)
#74 := (= #11 #73)
#68 := (= #9 -3::Int)
#69 := [rewrite]: #68
#71 := (= #10 #70)
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72 #69]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#66 := [asserted]: #14
#84 := [mp #66 #81]: #79
#567 := (not #751)
#568 := (or #567 #76)
#394 := (* -1::Int -3::Int)
#524 := (mod #394 #394)
#731 := (+ #73 #524)
#405 := (= #731 0::Int)
#421 := (mod -3::Int -3::Int)
#400 := (* -1::Int #421)
#735 := (+ #73 #400)
#737 := (= #735 0::Int)
#415 := (<= -3::Int 0::Int)
#418 := (>= -3::Int 0::Int)
#419 := (or #418 #415)
#420 := (not #419)
#416 := (or #415 #415)
#407 := (not #416)
#417 := (or #407 #420)
#406 := (if #417 #737 #405)
#330 := (= -3::Int 0::Int)
#738 := (if #330 #76 #406)
#414 := (= #73 -3::Int)
#739 := (if #330 #414 #738)
#527 := (or #567 #739)
#577 := (iff #527 #568)
#673 := (iff #568 #568)
#676 := [rewrite]: #673
#684 := (iff #739 #76)
#679 := (if false #414 #76)
#683 := (iff #679 #76)
#681 := [rewrite]: #683
#680 := (iff #739 #679)
#525 := (iff #738 #76)
#690 := (if false #76 #76)
#686 := (iff #690 #76)
#692 := [rewrite]: #686
#694 := (iff #738 #690)
#693 := (iff #406 #76)
#691 := (iff #406 #690)
#688 := (iff #405 #76)
#545 := (= #731 #73)
#426 := (+ #73 0::Int)
#706 := (= #426 #73)
#707 := [rewrite]: #706
#703 := (= #731 #426)
#702 := (= #524 0::Int)
#699 := (mod 3::Int 3::Int)
#696 := (= #699 0::Int)
#701 := [rewrite]: #696
#700 := (= #524 #699)
#709 := (= #394 3::Int)
#698 := [rewrite]: #709
#695 := [monotonicity #698 #698]: #700
#697 := [trans #695 #701]: #702
#544 := [monotonicity #697]: #703
#546 := [trans #544 #707]: #545
#689 := [monotonicity #546]: #688
#708 := (iff #737 #76)
#422 := (= #735 #73)
#427 := (= #735 #426)
#715 := (= #400 0::Int)
#435 := (* -1::Int 0::Int)
#714 := (= #435 0::Int)
#711 := [rewrite]: #714
#436 := (= #400 #435)
#712 := (= #421 0::Int)
#713 := [rewrite]: #712
#710 := [monotonicity #713]: #436
#425 := [trans #710 #711]: #715
#428 := [monotonicity #425]: #427
#704 := [trans #428 #707]: #422
#705 := [monotonicity #704]: #708
#442 := (iff #417 false)
#716 := (or false false)
#440 := (iff #716 false)
#441 := [rewrite]: #440
#717 := (iff #417 #716)
#727 := (iff #420 false)
#1 := true
#718 := (not true)
#383 := (iff #718 false)
#384 := [rewrite]: #383
#369 := (iff #420 #718)
#728 := (iff #419 true)
#724 := (or false true)
#363 := (iff #724 true)
#726 := [rewrite]: #363
#719 := (iff #419 #724)
#736 := (iff #415 true)
#742 := [rewrite]: #736
#722 := (iff #418 false)
#723 := [rewrite]: #722
#725 := [monotonicity #723 #742]: #719
#368 := [trans #725 #726]: #728
#729 := [monotonicity #368]: #369
#730 := [trans #729 #384]: #727
#720 := (iff #407 false)
#381 := (iff #407 #718)
#734 := (iff #416 true)
#732 := (or true true)
#733 := (iff #732 true)
#393 := [rewrite]: #733
#392 := (iff #416 #732)
#397 := [monotonicity #742 #742]: #392
#377 := [trans #397 #393]: #734
#382 := [monotonicity #377]: #381
#721 := [trans #382 #384]: #720
#439 := [monotonicity #721 #730]: #717
#336 := [trans #439 #441]: #442
#685 := [monotonicity #336 #705 #689]: #691
#687 := [trans #685 #692]: #693
#740 := (iff #330 false)
#741 := [rewrite]: #740
#523 := [monotonicity #741 #687]: #694
#526 := [trans #523 #692]: #525
#682 := [monotonicity #741 #526]: #680
#566 := [trans #682 #681]: #684
#672 := [monotonicity #566]: #577
#561 := [trans #672 #676]: #577
#675 := [quant-inst #67 #67]: #527
#576 := [mp #675 #561]: #568
[unit-resolution #576 #84 #756]: false
unsat
78e98b360474b07bbe43f0216b8f59ecf8adcdd9 341 0
#2 := false
decl f3 :: (-> S2 Int Int)
#21 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#19 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#41 := (f4 f5 #19)
#42 := (f3 #41 #21)
#758 := (pattern #42)
#23 := 0::Int
#93 := -1::Int
#98 := (* -1::Int #21)
#95 := (* -1::Int #19)
#153 := (mod #95 #98)
#268 := (+ #42 #153)
#269 := (= #268 0::Int)
#43 := (mod #19 #21)
#265 := (* -1::Int #43)
#266 := (+ #42 #265)
#267 := (= #266 0::Int)
#120 := (<= #21 0::Int)
#127 := (>= #19 0::Int)
#212 := (or #127 #120)
#213 := (not #212)
#116 := (<= #19 0::Int)
#210 := (or #116 #120)
#211 := (not #210)
#216 := (or #211 #213)
#270 := (if #216 #267 #269)
#264 := (= #42 0::Int)
#24 := (= #19 0::Int)
#271 := (if #24 #264 #270)
#263 := (= #42 #19)
#25 := (= #21 0::Int)
#272 := (if #25 #263 #271)
#759 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #758) #272)
#275 := (forall (vars (?v0 Int) (?v1 Int)) #272)
#762 := (iff #275 #759)
#760 := (iff #272 #272)
#761 := [refl]: #760
#763 := [quant-intro #761]: #762
#159 := (* -1::Int #153)
#232 := (if #216 #43 #159)
#235 := (if #24 0::Int #232)
#238 := (if #25 #19 #235)
#241 := (= #42 #238)
#244 := (forall (vars (?v0 Int) (?v1 Int)) #241)
#276 := (iff #244 #275)
#273 := (iff #241 #272)
#274 := [rewrite]: #273
#277 := [quant-intro #274]: #276
#121 := (not #120)
#128 := (not #127)
#131 := (and #128 #121)
#117 := (not #116)
#124 := (and #117 #121)
#134 := (or #124 #131)
#179 := (if #134 #43 #159)
#182 := (if #24 0::Int #179)
#185 := (if #25 #19 #182)
#188 := (= #42 #185)
#191 := (forall (vars (?v0 Int) (?v1 Int)) #188)
#245 := (iff #191 #244)
#242 := (iff #188 #241)
#239 := (= #185 #238)
#236 := (= #182 #235)
#233 := (= #179 #232)
#217 := (iff #134 #216)
#214 := (iff #131 #213)
#215 := [rewrite]: #214
#204 := (iff #124 #211)
#205 := [rewrite]: #204
#218 := [monotonicity #205 #215]: #217
#234 := [monotonicity #218]: #233
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [quant-intro #243]: #245
#202 := (~ #191 #191)
#201 := (~ #188 #188)
#198 := [refl]: #201
#203 := [nnf-pos #198]: #202
#35 := (- #21)
#34 := (- #19)
#44 := (mod #34 #35)
#45 := (- #44)
#28 := (< 0::Int #21)
#30 := (< #19 0::Int)
#31 := (and #30 #28)
#27 := (< 0::Int #19)
#29 := (and #27 #28)
#32 := (or #29 #31)
#46 := (if #32 #43 #45)
#47 := (if #24 0::Int #46)
#48 := (if #25 #19 #47)
#49 := (= #42 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#194 := (iff #50 #191)
#164 := (if #32 #43 #159)
#167 := (if #24 0::Int #164)
#170 := (if #25 #19 #167)
#173 := (= #42 #170)
#176 := (forall (vars (?v0 Int) (?v1 Int)) #173)
#192 := (iff #176 #191)
#189 := (iff #173 #188)
#186 := (= #170 #185)
#183 := (= #167 #182)
#180 := (= #164 #179)
#135 := (iff #32 #134)
#132 := (iff #31 #131)
#122 := (iff #28 #121)
#123 := [rewrite]: #122
#129 := (iff #30 #128)
#130 := [rewrite]: #129
#133 := [monotonicity #130 #123]: #132
#125 := (iff #29 #124)
#118 := (iff #27 #117)
#119 := [rewrite]: #118
#126 := [monotonicity #119 #123]: #125
#136 := [monotonicity #126 #133]: #135
#181 := [monotonicity #136]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [monotonicity #187]: #189
#193 := [quant-intro #190]: #192
#177 := (iff #50 #176)
#174 := (iff #49 #173)
#171 := (= #48 #170)
#168 := (= #47 #167)
#165 := (= #46 #164)
#162 := (= #45 #159)
#156 := (- #153)
#160 := (= #156 #159)
#161 := [rewrite]: #160
#157 := (= #45 #156)
#154 := (= #44 #153)
#99 := (= #35 #98)
#100 := [rewrite]: #99
#96 := (= #34 #95)
#97 := [rewrite]: #96
#155 := [monotonicity #97 #100]: #154
#158 := [monotonicity #155]: #157
#163 := [trans #158 #161]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [quant-intro #175]: #177
#195 := [trans #178 #193]: #194
#152 := [asserted]: #50
#196 := [mp #152 #195]: #191
#199 := [mp~ #196 #203]: #191
#247 := [mp #199 #246]: #244
#278 := [mp #247 #277]: #275
#764 := [mp #278 #763]: #759
#83 := -2::Int
#77 := -3::Int
#71 := -5::Int
#74 := (f4 f5 -5::Int)
#80 := (f3 #74 -3::Int)
#86 := (= #80 -2::Int)
#89 := (not #86)
#14 := 2::Int
#15 := (- 2::Int)
#11 := 3::Int
#12 := (- 3::Int)
#8 := 5::Int
#9 := (- 5::Int)
#10 := (f4 f5 #9)
#13 := (f3 #10 #12)
#16 := (= #13 #15)
#17 := (not #16)
#90 := (iff #17 #89)
#87 := (iff #16 #86)
#84 := (= #15 -2::Int)
#85 := [rewrite]: #84
#81 := (= #13 #80)
#78 := (= #12 -3::Int)
#79 := [rewrite]: #78
#75 := (= #10 #74)
#72 := (= #9 -5::Int)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [monotonicity #76 #79]: #81
#88 := [monotonicity #82 #85]: #87
#91 := [monotonicity #88]: #90
#70 := [asserted]: #17
#94 := [mp #70 #91]: #89
#674 := (not #759)
#679 := (or #674 #86)
#414 := (* -1::Int -3::Int)
#413 := (* -1::Int -5::Int)
#746 := (mod #413 #414)
#747 := (+ #80 #746)
#748 := (= #747 0::Int)
#745 := (mod -5::Int -3::Int)
#402 := (* -1::Int #745)
#532 := (+ #80 #402)
#739 := (= #532 0::Int)
#426 := (<= -3::Int 0::Int)
#425 := (>= -5::Int 0::Int)
#429 := (or #425 #426)
#408 := (not #429)
#415 := (<= -5::Int 0::Int)
#427 := (or #415 #426)
#428 := (not #427)
#743 := (or #428 #408)
#749 := (if #743 #739 #748)
#424 := (= #80 0::Int)
#423 := (= -5::Int 0::Int)
#744 := (if #423 #424 #749)
#422 := (= #80 -5::Int)
#338 := (= -3::Int 0::Int)
#750 := (if #338 #422 #744)
#668 := (or #674 #750)
#670 := (iff #668 #679)
#665 := (iff #679 #679)
#672 := [rewrite]: #665
#677 := (iff #750 #86)
#675 := (if false #422 #86)
#666 := (iff #675 #86)
#676 := [rewrite]: #666
#667 := (iff #750 #675)
#686 := (iff #744 #86)
#590 := (if false #424 #86)
#685 := (iff #590 #86)
#682 := [rewrite]: #685
#591 := (iff #744 #590)
#588 := (iff #749 #86)
#291 := 1::Int
#552 := (= #80 1::Int)
#569 := (if false #552 #86)
#587 := (iff #569 #86)
#580 := [rewrite]: #587
#584 := (iff #749 #569)
#681 := (iff #748 #86)
#691 := (+ 2::Int #80)
#576 := (= #691 0::Int)
#585 := (iff #576 #86)
#680 := [rewrite]: #585
#535 := (iff #748 #576)
#574 := (= #747 #691)
#687 := (+ #80 2::Int)
#689 := (= #687 #691)
#692 := [rewrite]: #689
#688 := (= #747 #687)
#533 := (= #746 2::Int)
#700 := (mod 5::Int 3::Int)
#702 := (= #700 2::Int)
#531 := [rewrite]: #702
#701 := (= #746 #700)
#693 := (= #414 3::Int)
#694 := [rewrite]: #693
#698 := (= #413 5::Int)
#699 := [rewrite]: #698
#695 := [monotonicity #699 #694]: #701
#534 := [trans #695 #531]: #533
#690 := [monotonicity #534]: #688
#575 := [trans #690 #692]: #574
#683 := [monotonicity #575]: #535
#684 := [trans #683 #680]: #681
#696 := (iff #739 #552)
#707 := (+ -1::Int #80)
#710 := (= #707 0::Int)
#553 := (iff #710 #552)
#554 := [rewrite]: #553
#705 := (iff #739 #710)
#704 := (= #532 #707)
#713 := (+ #80 -1::Int)
#708 := (= #713 #707)
#703 := [rewrite]: #708
#717 := (= #532 #713)
#712 := (= #402 -1::Int)
#435 := (* -1::Int 1::Int)
#715 := (= #435 -1::Int)
#430 := [rewrite]: #715
#436 := (= #402 #435)
#433 := (= #745 1::Int)
#434 := [rewrite]: #433
#714 := [monotonicity #434]: #436
#716 := [trans #714 #430]: #712
#706 := [monotonicity #716]: #717
#709 := [trans #706 #703]: #704
#711 := [monotonicity #709]: #705
#697 := [trans #711 #554]: #696
#719 := (iff #743 false)
#721 := (or false false)
#718 := (iff #721 false)
#722 := [rewrite]: #718
#443 := (iff #743 #721)
#344 := (iff #408 false)
#1 := true
#731 := (not true)
#733 := (iff #731 false)
#371 := [rewrite]: #733
#449 := (iff #408 #731)
#447 := (iff #429 true)
#737 := (or false true)
#724 := (iff #737 true)
#725 := [rewrite]: #724
#735 := (iff #429 #737)
#385 := (iff #426 true)
#726 := [rewrite]: #385
#376 := (iff #425 false)
#377 := [rewrite]: #376
#738 := [monotonicity #377 #726]: #735
#448 := [trans #738 #725]: #447
#450 := [monotonicity #448]: #449
#720 := [trans #450 #371]: #344
#734 := (iff #428 false)
#732 := (iff #428 #731)
#729 := (iff #427 true)
#389 := (or true true)
#392 := (iff #389 true)
#728 := [rewrite]: #392
#390 := (iff #427 #389)
#401 := (iff #415 true)
#742 := [rewrite]: #401
#391 := [monotonicity #742 #726]: #390
#730 := [trans #391 #728]: #729
#727 := [monotonicity #730]: #732
#736 := [trans #727 #371]: #734
#444 := [monotonicity #736 #720]: #443
#723 := [trans #444 #722]: #719
#586 := [monotonicity #723 #697 #684]: #584
#589 := [trans #586 #580]: #588
#405 := (iff #423 false)
#741 := [rewrite]: #405
#592 := [monotonicity #741 #589]: #591
#673 := [trans #592 #682]: #686
#740 := (iff #338 false)
#400 := [rewrite]: #740
#664 := [monotonicity #400 #673]: #667
#678 := [trans #664 #676]: #677
#671 := [monotonicity #678]: #670
#656 := [trans #671 #672]: #670
#669 := [quant-inst #71 #77]: #668
#657 := [mp #669 #656]: #679
[unit-resolution #657 #94 #764]: false
unsat
f7f6dba4a50481c109b9d852231cbc0e5bd8ffbf 316 0
#2 := false
#19 := 0::Int
decl f6 :: Int
#8 := f6
#403 := (<= f6 0::Int)
#413 := (>= f6 0::Int)
#724 := (not #413)
#380 := (not #403)
#725 := (or #380 #724)
#687 := (not #725)
#10 := 3::Int
#733 := (mod f6 3::Int)
#68 := -1::Int
#390 := (* -1::Int #733)
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#9 := (f4 f5 f6)
#11 := (f3 #9 3::Int)
#520 := (+ #11 #390)
#727 := (= #520 0::Int)
#678 := (not #727)
#688 := (<= #520 0::Int)
#634 := (not #688)
#638 := (>= #733 3::Int)
#640 := (not #638)
#1 := true
#64 := [true-axiom]: true
#629 := (or false #640)
#630 := [th-lemma arith]: #629
#631 := [unit-resolution #630 #64]: #640
#632 := [hypothesis]: #688
#71 := (>= #11 3::Int)
#12 := (< #11 3::Int)
#13 := (not #12)
#78 := (iff #13 #71)
#69 := (not #71)
#73 := (not #69)
#76 := (iff #73 #71)
#77 := [rewrite]: #76
#74 := (iff #13 #73)
#70 := (iff #12 #69)
#72 := [rewrite]: #70
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#66 := [asserted]: #13
#80 := [mp #66 #79]: #71
#633 := [th-lemma arith farkas -1 1 1 #80 #632 #631]: false
#635 := [lemma #633]: #634
#623 := (or #678 #688)
#624 := [th-lemma arith triangle-eq]: #623
#626 := [unit-resolution #624 #635]: #678
#621 := (or #687 #727)
#712 := -3::Int
#401 := (* -1::Int f6)
#436 := (mod #401 -3::Int)
#332 := (+ #11 #436)
#431 := (= #332 0::Int)
#710 := (if #725 #727 #431)
#412 := (= #11 0::Int)
#411 := (= f6 0::Int)
#421 := (if #411 #412 #710)
#17 := (:var 0 Int)
#15 := (:var 1 Int)
#37 := (f4 f5 #15)
#38 := (f3 #37 #17)
#746 := (pattern #38)
#84 := (* -1::Int #17)
#81 := (* -1::Int #15)
#139 := (mod #81 #84)
#254 := (+ #38 #139)
#255 := (= #254 0::Int)
#39 := (mod #15 #17)
#251 := (* -1::Int #39)
#252 := (+ #38 #251)
#253 := (= #252 0::Int)
#106 := (<= #17 0::Int)
#113 := (>= #15 0::Int)
#198 := (or #113 #106)
#199 := (not #198)
#102 := (<= #15 0::Int)
#196 := (or #102 #106)
#197 := (not #196)
#202 := (or #197 #199)
#256 := (if #202 #253 #255)
#250 := (= #38 0::Int)
#20 := (= #15 0::Int)
#257 := (if #20 #250 #256)
#249 := (= #38 #15)
#21 := (= #17 0::Int)
#258 := (if #21 #249 #257)
#747 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #746) #258)
#261 := (forall (vars (?v0 Int) (?v1 Int)) #258)
#750 := (iff #261 #747)
#748 := (iff #258 #258)
#749 := [refl]: #748
#751 := [quant-intro #749]: #750
#145 := (* -1::Int #139)
#218 := (if #202 #39 #145)
#221 := (if #20 0::Int #218)
#224 := (if #21 #15 #221)
#227 := (= #38 #224)
#230 := (forall (vars (?v0 Int) (?v1 Int)) #227)
#262 := (iff #230 #261)
#259 := (iff #227 #258)
#260 := [rewrite]: #259
#263 := [quant-intro #260]: #262
#107 := (not #106)
#114 := (not #113)
#117 := (and #114 #107)
#103 := (not #102)
#110 := (and #103 #107)
#120 := (or #110 #117)
#165 := (if #120 #39 #145)
#168 := (if #20 0::Int #165)
#171 := (if #21 #15 #168)
#174 := (= #38 #171)
#177 := (forall (vars (?v0 Int) (?v1 Int)) #174)
#231 := (iff #177 #230)
#228 := (iff #174 #227)
#225 := (= #171 #224)
#222 := (= #168 #221)
#219 := (= #165 #218)
#203 := (iff #120 #202)
#200 := (iff #117 #199)
#201 := [rewrite]: #200
#190 := (iff #110 #197)
#191 := [rewrite]: #190
#204 := [monotonicity #191 #201]: #203
#220 := [monotonicity #204]: #219
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#188 := (~ #177 #177)
#187 := (~ #174 #174)
#184 := [refl]: #187
#189 := [nnf-pos #184]: #188
#31 := (- #17)
#30 := (- #15)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #15 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#180 := (iff #46 #177)
#150 := (if #28 #39 #145)
#153 := (if #20 0::Int #150)
#156 := (if #21 #15 #153)
#159 := (= #38 #156)
#162 := (forall (vars (?v0 Int) (?v1 Int)) #159)
#178 := (iff #162 #177)
#175 := (iff #159 #174)
#172 := (= #156 #171)
#169 := (= #153 #168)
#166 := (= #150 #165)
#121 := (iff #28 #120)
#118 := (iff #27 #117)
#108 := (iff #24 #107)
#109 := [rewrite]: #108
#115 := (iff #26 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116 #109]: #118
#111 := (iff #25 #110)
#104 := (iff #23 #103)
#105 := [rewrite]: #104
#112 := [monotonicity #105 #109]: #111
#122 := [monotonicity #112 #119]: #121
#167 := [monotonicity #122]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [quant-intro #176]: #178
#163 := (iff #46 #162)
#160 := (iff #45 #159)
#157 := (= #44 #156)
#154 := (= #43 #153)
#151 := (= #42 #150)
#148 := (= #41 #145)
#142 := (- #139)
#146 := (= #142 #145)
#147 := [rewrite]: #146
#143 := (= #41 #142)
#140 := (= #40 #139)
#85 := (= #31 #84)
#86 := [rewrite]: #85
#82 := (= #30 #81)
#83 := [rewrite]: #82
#141 := [monotonicity #83 #86]: #140
#144 := [monotonicity #141]: #143
#149 := [trans #144 #147]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [quant-intro #161]: #163
#181 := [trans #164 #179]: #180
#138 := [asserted]: #46
#182 := [mp #138 #181]: #177
#185 := [mp~ #182 #189]: #177
#233 := [mp #185 #232]: #230
#264 := [mp #233 #263]: #261
#752 := [mp #264 #751]: #747
#705 := (not #747)
#694 := (or #705 #421)
#402 := (* -1::Int 3::Int)
#734 := (mod #401 #402)
#735 := (+ #11 #734)
#736 := (= #735 0::Int)
#414 := (<= 3::Int 0::Int)
#417 := (or #413 #414)
#396 := (not #417)
#415 := (or #403 #414)
#416 := (not #415)
#731 := (or #416 #396)
#737 := (if #731 #727 #736)
#732 := (if #411 #412 #737)
#410 := (= #11 f6)
#326 := (= 3::Int 0::Int)
#738 := (if #326 #410 #732)
#695 := (or #705 #738)
#691 := (iff #695 #694)
#697 := (iff #694 #694)
#698 := [rewrite]: #697
#704 := (iff #738 #421)
#424 := (if false #410 #421)
#418 := (iff #424 #421)
#700 := [rewrite]: #418
#702 := (iff #738 #424)
#422 := (iff #732 #421)
#707 := (iff #737 #710)
#432 := (iff #736 #431)
#708 := (= #735 #332)
#437 := (= #734 #436)
#713 := (= #402 -3::Int)
#435 := [rewrite]: #713
#438 := [monotonicity #435]: #437
#709 := [monotonicity #438]: #708
#706 := [monotonicity #709]: #432
#723 := (iff #731 #725)
#364 := (iff #396 #724)
#359 := (iff #417 #413)
#718 := (or #413 false)
#715 := (iff #718 #413)
#721 := [rewrite]: #715
#719 := (iff #417 #718)
#393 := (iff #414 false)
#729 := [rewrite]: #393
#720 := [monotonicity #729]: #719
#722 := [trans #720 #721]: #359
#365 := [monotonicity #722]: #364
#716 := (iff #416 #380)
#378 := (iff #415 #403)
#389 := (or #403 false)
#714 := (iff #389 #403)
#377 := [rewrite]: #714
#730 := (iff #415 #389)
#373 := [monotonicity #729]: #730
#379 := [trans #373 #377]: #378
#717 := [monotonicity #379]: #716
#726 := [monotonicity #717 #365]: #723
#711 := [monotonicity #726 #706]: #707
#423 := [monotonicity #711]: #422
#728 := (iff #326 false)
#388 := [rewrite]: #728
#703 := [monotonicity #388 #423]: #702
#701 := [trans #703 #700]: #704
#692 := [monotonicity #701]: #691
#693 := [trans #692 #698]: #691
#696 := [quant-inst #8 #10]: #695
#699 := [mp #696 #693]: #694
#627 := [unit-resolution #699 #752]: #421
#523 := (not #411)
#564 := (not #421)
#617 := (or #564 #523)
#672 := (not #412)
#540 := (<= #11 0::Int)
#628 := (not #540)
#665 := (or #628 #69)
#666 := [th-lemma arith farkas 1 1]: #665
#625 := [unit-resolution #666 #80]: #628
#636 := (or #672 #540)
#614 := [th-lemma arith triangle-eq]: #636
#615 := [unit-resolution #614 #625]: #672
#671 := (or #564 #523 #412)
#573 := [def-axiom]: #671
#618 := [unit-resolution #573 #615]: #617
#619 := [unit-resolution #618 #627]: #523
#668 := (or #564 #411 #710)
#669 := [def-axiom]: #668
#620 := [unit-resolution #669 #619 #627]: #710
#519 := (not #710)
#521 := (or #519 #687 #727)
#522 := [def-axiom]: #521
#616 := [unit-resolution #522 #620]: #621
#622 := [unit-resolution #616 #626]: #687
#542 := (or #725 #403)
#684 := [def-axiom]: #542
#608 := [unit-resolution #684 #622]: #403
#685 := (or #725 #413)
#686 := [def-axiom]: #685
#604 := [unit-resolution #686 #622]: #413
#605 := (or #411 #380 #724)
#606 := [th-lemma arith triangle-eq]: #605
#609 := [unit-resolution #606 #619]: #725
[unit-resolution #609 #604 #608]: false
unsat
cbbba807c2c13814c06e13ca075bfb5d6e46a98c 320 0
#2 := false
#10 := 3::Int
decl f6 :: Int
#8 := f6
#743 := (mod f6 3::Int)
#658 := (>= #743 3::Int)
#663 := (not #658)
#1 := true
#66 := [true-axiom]: true
#645 := (or false #663)
#646 := [th-lemma arith]: #645
#647 := [unit-resolution #646 #66]: #663
#21 := 0::Int
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#9 := (f4 f5 f6)
#11 := (f3 #9 3::Int)
#92 := -1::Int
#639 := (* -1::Int #11)
#640 := (+ f6 #639)
#641 := (<= #640 0::Int)
#638 := (= f6 #11)
#12 := (= #11 f6)
#78 := (>= f6 3::Int)
#76 := (not #78)
#69 := (not #12)
#80 := (or #69 #76)
#83 := (not #80)
#13 := (< f6 3::Int)
#14 := (implies #12 #13)
#15 := (not #14)
#86 := (iff #15 #83)
#70 := (or #69 #13)
#73 := (not #70)
#84 := (iff #73 #83)
#81 := (iff #70 #80)
#77 := (iff #13 #76)
#79 := [rewrite]: #77
#82 := [monotonicity #79]: #81
#85 := [monotonicity #82]: #84
#74 := (iff #15 #73)
#71 := (iff #14 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#87 := [trans #75 #85]: #86
#68 := [asserted]: #15
#88 := [mp #68 #87]: #83
#89 := [not-or-elim #88]: #12
#637 := [symm #89]: #638
#648 := (not #638)
#626 := (or #648 #641)
#627 := [th-lemma arith triangle-eq]: #626
#629 := [unit-resolution #627 #637]: #641
#90 := [not-or-elim #88]: #78
#745 := (* -1::Int #743)
#402 := (+ #11 #745)
#699 := (<= #402 0::Int)
#532 := (= #402 0::Int)
#738 := -3::Int
#739 := (* -1::Int f6)
#447 := (mod #739 -3::Int)
#450 := (+ #11 #447)
#721 := (= #450 0::Int)
#428 := (>= f6 0::Int)
#734 := (not #428)
#424 := (<= f6 0::Int)
#391 := (not #424)
#377 := (or #391 #734)
#718 := (if #377 #532 #721)
#423 := (= #11 0::Int)
#422 := (= f6 0::Int)
#723 := (if #422 #423 #718)
#19 := (:var 0 Int)
#17 := (:var 1 Int)
#39 := (f4 f5 #17)
#40 := (f3 #39 #19)
#758 := (pattern #40)
#96 := (* -1::Int #19)
#93 := (* -1::Int #17)
#151 := (mod #93 #96)
#266 := (+ #40 #151)
#267 := (= #266 0::Int)
#41 := (mod #17 #19)
#263 := (* -1::Int #41)
#264 := (+ #40 #263)
#265 := (= #264 0::Int)
#118 := (<= #19 0::Int)
#125 := (>= #17 0::Int)
#210 := (or #125 #118)
#211 := (not #210)
#114 := (<= #17 0::Int)
#196 := (or #114 #118)
#197 := (not #196)
#214 := (or #197 #211)
#268 := (if #214 #265 #267)
#262 := (= #40 0::Int)
#22 := (= #17 0::Int)
#269 := (if #22 #262 #268)
#261 := (= #40 #17)
#23 := (= #19 0::Int)
#270 := (if #23 #261 #269)
#759 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #758) #270)
#273 := (forall (vars (?v0 Int) (?v1 Int)) #270)
#762 := (iff #273 #759)
#760 := (iff #270 #270)
#761 := [refl]: #760
#763 := [quant-intro #761]: #762
#157 := (* -1::Int #151)
#230 := (if #214 #41 #157)
#233 := (if #22 0::Int #230)
#236 := (if #23 #17 #233)
#239 := (= #40 #236)
#242 := (forall (vars (?v0 Int) (?v1 Int)) #239)
#274 := (iff #242 #273)
#271 := (iff #239 #270)
#272 := [rewrite]: #271
#275 := [quant-intro #272]: #274
#119 := (not #118)
#126 := (not #125)
#129 := (and #126 #119)
#115 := (not #114)
#122 := (and #115 #119)
#132 := (or #122 #129)
#177 := (if #132 #41 #157)
#180 := (if #22 0::Int #177)
#183 := (if #23 #17 #180)
#186 := (= #40 #183)
#189 := (forall (vars (?v0 Int) (?v1 Int)) #186)
#243 := (iff #189 #242)
#240 := (iff #186 #239)
#237 := (= #183 #236)
#234 := (= #180 #233)
#231 := (= #177 #230)
#215 := (iff #132 #214)
#212 := (iff #129 #211)
#213 := [rewrite]: #212
#204 := (iff #122 #197)
#205 := [rewrite]: #204
#216 := [monotonicity #205 #213]: #215
#232 := [monotonicity #216]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [monotonicity #238]: #240
#244 := [quant-intro #241]: #243
#202 := (~ #189 #189)
#201 := (~ #186 #186)
#198 := [refl]: #201
#203 := [nnf-pos #198]: #202
#33 := (- #19)
#32 := (- #17)
#42 := (mod #32 #33)
#43 := (- #42)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#44 := (if #30 #41 #43)
#45 := (if #22 0::Int #44)
#46 := (if #23 #17 #45)
#47 := (= #40 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#192 := (iff #48 #189)
#162 := (if #30 #41 #157)
#165 := (if #22 0::Int #162)
#168 := (if #23 #17 #165)
#171 := (= #40 #168)
#174 := (forall (vars (?v0 Int) (?v1 Int)) #171)
#190 := (iff #174 #189)
#187 := (iff #171 #186)
#184 := (= #168 #183)
#181 := (= #165 #180)
#178 := (= #162 #177)
#133 := (iff #30 #132)
#130 := (iff #29 #129)
#120 := (iff #26 #119)
#121 := [rewrite]: #120
#127 := (iff #28 #126)
#128 := [rewrite]: #127
#131 := [monotonicity #128 #121]: #130
#123 := (iff #27 #122)
#116 := (iff #25 #115)
#117 := [rewrite]: #116
#124 := [monotonicity #117 #121]: #123
#134 := [monotonicity #124 #131]: #133
#179 := [monotonicity #134]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185]: #187
#191 := [quant-intro #188]: #190
#175 := (iff #48 #174)
#172 := (iff #47 #171)
#169 := (= #46 #168)
#166 := (= #45 #165)
#163 := (= #44 #162)
#160 := (= #43 #157)
#154 := (- #151)
#158 := (= #154 #157)
#159 := [rewrite]: #158
#155 := (= #43 #154)
#152 := (= #42 #151)
#97 := (= #33 #96)
#98 := [rewrite]: #97
#94 := (= #32 #93)
#95 := [rewrite]: #94
#153 := [monotonicity #95 #98]: #152
#156 := [monotonicity #153]: #155
#161 := [trans #156 #159]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [quant-intro #173]: #175
#193 := [trans #176 #191]: #192
#150 := [asserted]: #48
#194 := [mp #150 #193]: #189
#199 := [mp~ #194 #203]: #189
#245 := [mp #199 #244]: #242
#276 := [mp #245 #275]: #273
#764 := [mp #276 #763]: #759
#713 := (not #759)
#717 := (or #713 #723)
#413 := (* -1::Int 3::Int)
#414 := (mod #739 #413)
#746 := (+ #11 #414)
#747 := (= #746 0::Int)
#415 := (<= 3::Int 0::Int)
#425 := (or #428 #415)
#429 := (not #425)
#426 := (or #424 #415)
#427 := (not #426)
#408 := (or #427 #429)
#748 := (if #408 #532 #747)
#749 := (if #422 #423 #748)
#338 := (= 3::Int 0::Int)
#744 := (if #338 #12 #749)
#706 := (or #713 #744)
#708 := (iff #706 #717)
#704 := (iff #717 #717)
#709 := [rewrite]: #704
#712 := (iff #744 #723)
#435 := (if false #12 #723)
#715 := (iff #435 #723)
#430 := [rewrite]: #715
#436 := (iff #744 #435)
#433 := (iff #749 #723)
#722 := (iff #748 #718)
#443 := (iff #747 #721)
#344 := (= #746 #450)
#448 := (= #414 #447)
#724 := (= #413 -3::Int)
#725 := [rewrite]: #724
#449 := [monotonicity #725]: #448
#720 := [monotonicity #449]: #344
#444 := [monotonicity #720]: #443
#737 := (iff #408 #377)
#736 := (iff #429 #734)
#733 := (iff #425 #428)
#729 := (or #428 false)
#732 := (iff #729 #428)
#727 := [rewrite]: #732
#730 := (iff #425 #729)
#400 := (iff #415 false)
#405 := [rewrite]: #400
#731 := [monotonicity #405]: #730
#371 := [trans #731 #727]: #733
#376 := [monotonicity #371]: #736
#392 := (iff #427 #391)
#389 := (iff #426 #424)
#741 := (or #424 false)
#385 := (iff #741 #424)
#726 := [rewrite]: #385
#401 := (iff #426 #741)
#742 := [monotonicity #405]: #401
#390 := [trans #742 #726]: #389
#728 := [monotonicity #390]: #392
#735 := [monotonicity #728 #376]: #737
#719 := [monotonicity #735 #444]: #722
#434 := [monotonicity #719]: #433
#750 := (iff #338 false)
#740 := [rewrite]: #750
#714 := [monotonicity #740 #434]: #436
#716 := [trans #714 #430]: #712
#703 := [monotonicity #716]: #708
#710 := [trans #703 #709]: #708
#707 := [quant-inst #8 #10]: #706
#705 := [mp #707 #710]: #717
#630 := [unit-resolution #705 #764]: #723
#692 := (not #723)
#616 := (or #692 #718)
#574 := (not #422)
#631 := (or #391 #76)
#632 := [th-lemma arith farkas 1 1]: #631
#633 := [unit-resolution #632 #90]: #391
#628 := (or #574 #424)
#634 := [th-lemma arith triangle-eq]: #628
#620 := [unit-resolution #634 #633]: #574
#535 := (or #692 #422 #718)
#683 := [def-axiom]: #535
#617 := [unit-resolution #683 #620]: #616
#618 := [unit-resolution #617 #630]: #718
#701 := (not #718)
#622 := (or #701 #532)
#711 := (or #377 #424)
#552 := [def-axiom]: #711
#621 := [unit-resolution #552 #633]: #377
#696 := (not #377)
#695 := (or #701 #696 #532)
#702 := [def-axiom]: #695
#623 := [unit-resolution #702 #621]: #622
#624 := [unit-resolution #623 #618]: #532
#534 := (not #532)
#619 := (or #534 #699)
#625 := [th-lemma arith triangle-eq]: #619
#598 := [unit-resolution #625 #624]: #699
[th-lemma arith farkas 1 -1 1 1 #598 #90 #629 #647]: false
unsat
2f21051636feadbefcb468a259b1c1e30b5de4ad 556 0
#2 := false
#23 := 0::Int
decl f4 :: (-> S2 Int Int)
#10 := 1::Int
decl f5 :: (-> S3 Int S2)
decl f3 :: Int
#7 := f3
decl f7 :: S3
#13 := f7
#14 := (f5 f7 f3)
#15 := (f4 #14 1::Int)
#82 := -1::Int
#84 := (* -1::Int #15)
decl f6 :: S3
#8 := f6
#9 := (f5 f6 f3)
#11 := (f4 #9 1::Int)
#83 := (* -1::Int #11)
#85 := (+ #83 #84)
#86 := (+ f3 #85)
#426 := (>= #86 0::Int)
#622 := (<= #15 0::Int)
#686 := (= #15 0::Int)
#427 := (= f3 0::Int)
#573 := (not #427)
#604 := (not #686)
#545 := [hypothesis]: #604
#581 := (or #573 #686)
#750 := (* -1::Int f3)
#691 := (mod #750 -1::Int)
#658 := (+ #15 #691)
#639 := (= #658 0::Int)
#412 := (>= f3 0::Int)
#452 := (not #412)
#431 := (<= f3 0::Int)
#738 := (not #431)
#348 := (or #738 #452)
#643 := (if #348 #686 #639)
#646 := (if #427 #686 #643)
#21 := (:var 0 Int)
#19 := (:var 1 Int)
#41 := (f5 f7 #19)
#42 := (f4 #41 #21)
#762 := (pattern #42)
#100 := (* -1::Int #21)
#97 := (* -1::Int #19)
#155 := (mod #97 #100)
#270 := (+ #42 #155)
#271 := (= #270 0::Int)
#43 := (mod #19 #21)
#267 := (* -1::Int #43)
#268 := (+ #42 #267)
#269 := (= #268 0::Int)
#122 := (<= #21 0::Int)
#129 := (>= #19 0::Int)
#214 := (or #129 #122)
#215 := (not #214)
#118 := (<= #19 0::Int)
#212 := (or #118 #122)
#213 := (not #212)
#218 := (or #213 #215)
#272 := (if #218 #269 #271)
#266 := (= #42 0::Int)
#24 := (= #19 0::Int)
#273 := (if #24 #266 #272)
#265 := (= #42 #19)
#25 := (= #21 0::Int)
#274 := (if #25 #265 #273)
#763 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #762) #274)
#277 := (forall (vars (?v0 Int) (?v1 Int)) #274)
#766 := (iff #277 #763)
#764 := (iff #274 #274)
#765 := [refl]: #764
#767 := [quant-intro #765]: #766
#161 := (* -1::Int #155)
#234 := (if #218 #43 #161)
#237 := (if #24 0::Int #234)
#240 := (if #25 #19 #237)
#243 := (= #42 #240)
#246 := (forall (vars (?v0 Int) (?v1 Int)) #243)
#278 := (iff #246 #277)
#275 := (iff #243 #274)
#276 := [rewrite]: #275
#279 := [quant-intro #276]: #278
#123 := (not #122)
#130 := (not #129)
#133 := (and #130 #123)
#119 := (not #118)
#126 := (and #119 #123)
#136 := (or #126 #133)
#181 := (if #136 #43 #161)
#184 := (if #24 0::Int #181)
#187 := (if #25 #19 #184)
#190 := (= #42 #187)
#193 := (forall (vars (?v0 Int) (?v1 Int)) #190)
#247 := (iff #193 #246)
#244 := (iff #190 #243)
#241 := (= #187 #240)
#238 := (= #184 #237)
#235 := (= #181 #234)
#219 := (iff #136 #218)
#216 := (iff #133 #215)
#217 := [rewrite]: #216
#206 := (iff #126 #213)
#207 := [rewrite]: #206
#220 := [monotonicity #207 #217]: #219
#236 := [monotonicity #220]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [quant-intro #245]: #247
#204 := (~ #193 #193)
#203 := (~ #190 #190)
#200 := [refl]: #203
#205 := [nnf-pos #200]: #204
#35 := (- #21)
#34 := (- #19)
#44 := (mod #34 #35)
#45 := (- #44)
#28 := (< 0::Int #21)
#30 := (< #19 0::Int)
#31 := (and #30 #28)
#27 := (< 0::Int #19)
#29 := (and #27 #28)
#32 := (or #29 #31)
#46 := (if #32 #43 #45)
#47 := (if #24 0::Int #46)
#48 := (if #25 #19 #47)
#49 := (= #42 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#196 := (iff #50 #193)
#166 := (if #32 #43 #161)
#169 := (if #24 0::Int #166)
#172 := (if #25 #19 #169)
#175 := (= #42 #172)
#178 := (forall (vars (?v0 Int) (?v1 Int)) #175)
#194 := (iff #178 #193)
#191 := (iff #175 #190)
#188 := (= #172 #187)
#185 := (= #169 #184)
#182 := (= #166 #181)
#137 := (iff #32 #136)
#134 := (iff #31 #133)
#124 := (iff #28 #123)
#125 := [rewrite]: #124
#131 := (iff #30 #130)
#132 := [rewrite]: #131
#135 := [monotonicity #132 #125]: #134
#127 := (iff #29 #126)
#120 := (iff #27 #119)
#121 := [rewrite]: #120
#128 := [monotonicity #121 #125]: #127
#138 := [monotonicity #128 #135]: #137
#183 := [monotonicity #138]: #182
#186 := [monotonicity #183]: #185
#189 := [monotonicity #186]: #188
#192 := [monotonicity #189]: #191
#195 := [quant-intro #192]: #194
#179 := (iff #50 #178)
#176 := (iff #49 #175)
#173 := (= #48 #172)
#170 := (= #47 #169)
#167 := (= #46 #166)
#164 := (= #45 #161)
#158 := (- #155)
#162 := (= #158 #161)
#163 := [rewrite]: #162
#159 := (= #45 #158)
#156 := (= #44 #155)
#101 := (= #35 #100)
#102 := [rewrite]: #101
#98 := (= #34 #97)
#99 := [rewrite]: #98
#157 := [monotonicity #99 #102]: #156
#160 := [monotonicity #157]: #159
#165 := [trans #160 #163]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [quant-intro #177]: #179
#197 := [trans #180 #195]: #196
#154 := [asserted]: #50
#198 := [mp #154 #197]: #193
#201 := [mp~ #198 #205]: #193
#249 := [mp #201 #248]: #246
#280 := [mp #249 #279]: #277
#768 := [mp #280 #767]: #763
#633 := (not #763)
#634 := (or #633 #646)
#751 := (* -1::Int 1::Int)
#671 := (mod #750 #751)
#668 := (+ #15 #671)
#670 := (= #668 0::Int)
#535 := (mod f3 1::Int)
#690 := (* -1::Int #535)
#677 := (+ #15 #690)
#679 := (= #677 0::Int)
#432 := (<= 1::Int 0::Int)
#747 := (or #412 #432)
#749 := (not #747)
#429 := (or #431 #432)
#433 := (not #429)
#406 := (or #433 #749)
#680 := (if #406 #679 #670)
#681 := (if #427 #686 #680)
#689 := (= #15 f3)
#428 := (= 1::Int 0::Int)
#682 := (if #428 #689 #681)
#635 := (or #633 #682)
#637 := (iff #635 #634)
#638 := (iff #634 #634)
#624 := [rewrite]: #638
#630 := (iff #682 #646)
#649 := (if false #689 #646)
#641 := (iff #649 #646)
#652 := [rewrite]: #641
#650 := (iff #682 #649)
#647 := (iff #681 #646)
#644 := (iff #680 #643)
#640 := (iff #670 #639)
#655 := (= #668 #658)
#656 := (= #671 #691)
#447 := (= #751 -1::Int)
#448 := [rewrite]: #447
#657 := [monotonicity #448]: #656
#659 := [monotonicity #657]: #655
#642 := [monotonicity #659]: #640
#653 := (iff #679 #686)
#662 := (= #677 #15)
#661 := (+ #15 0::Int)
#665 := (= #661 #15)
#666 := [rewrite]: #665
#663 := (= #677 #661)
#676 := (= #690 0::Int)
#672 := (* -1::Int 0::Int)
#675 := (= #672 0::Int)
#669 := [rewrite]: #675
#673 := (= #690 #672)
#678 := (= #535 0::Int)
#683 := [rewrite]: #678
#674 := [monotonicity #683]: #673
#660 := [trans #674 #669]: #676
#664 := [monotonicity #660]: #663
#667 := [trans #664 #666]: #662
#654 := [monotonicity #667]: #653
#724 := (iff #406 #348)
#453 := (iff #749 #452)
#729 := (iff #747 #412)
#381 := (or #412 false)
#742 := (iff #381 #412)
#728 := [rewrite]: #742
#741 := (iff #747 #381)
#396 := (iff #432 false)
#732 := [rewrite]: #396
#739 := [monotonicity #732]: #741
#451 := [trans #739 #728]: #729
#454 := [monotonicity #451]: #453
#740 := (iff #433 #738)
#737 := (iff #429 #431)
#733 := (or #431 false)
#736 := (iff #733 #431)
#731 := [rewrite]: #736
#734 := (iff #429 #733)
#735 := [monotonicity #732]: #734
#375 := [trans #735 #731]: #737
#380 := [monotonicity #375]: #740
#725 := [monotonicity #380 #454]: #724
#645 := [monotonicity #725 #654 #642]: #644
#648 := [monotonicity #645]: #647
#409 := (iff #428 false)
#745 := [rewrite]: #409
#651 := [monotonicity #745 #648]: #650
#631 := [trans #651 #652]: #630
#632 := [monotonicity #631]: #637
#620 := [trans #632 #624]: #637
#636 := [quant-inst #7 #10]: #635
#621 := [mp #636 #620]: #634
#600 := [unit-resolution #621 #768]: #646
#611 := (not #646)
#612 := (or #611 #573 #686)
#613 := [def-axiom]: #612
#605 := [unit-resolution #613 #600]: #581
#606 := [unit-resolution #605 #545]: #573
#705 := (not #348)
#601 := (or #427 #643)
#616 := (or #611 #427 #643)
#617 := [def-axiom]: #616
#607 := [unit-resolution #617 #600]: #601
#575 := [unit-resolution #607 #606]: #643
#628 := (not #643)
#623 := (or #628 #705 #686)
#629 := [def-axiom]: #623
#582 := [unit-resolution #629 #575 #545]: #705
#703 := (or #348 #431)
#697 := [def-axiom]: #703
#541 := [unit-resolution #697 #582]: #431
#698 := (or #348 #412)
#704 := [def-axiom]: #698
#572 := [unit-resolution #704 #582]: #412
#574 := (or #427 #738 #452)
#576 := [th-lemma arith triangle-eq]: #574
#583 := [unit-resolution #576 #572 #541 #606]: false
#585 := [lemma #583]: #686
#496 := (or #604 #622)
#498 := [th-lemma arith triangle-eq]: #496
#499 := [unit-resolution #498 #585]: #622
#701 := (<= #11 0::Int)
#430 := (= #11 0::Int)
#474 := [hypothesis]: #573
#536 := (div f3 1::Int)
#743 := (* -1::Int #536)
#417 := (+ #11 #743)
#418 := (= #417 0::Int)
#580 := (not #418)
#532 := (+ f3 #743)
#546 := (>= #532 0::Int)
#571 := (= #532 0::Int)
#1 := true
#68 := [true-axiom]: true
#509 := (or false #571)
#512 := [th-lemma arith]: #509
#514 := [unit-resolution #512 #68]: #571
#515 := (not #571)
#511 := (or #515 #546)
#516 := [th-lemma arith triangle-eq]: #511
#506 := [unit-resolution #516 #514]: #546
#537 := (<= #417 0::Int)
#502 := [hypothesis]: #418
#503 := (or #580 #537)
#507 := [th-lemma arith triangle-eq]: #503
#500 := [unit-resolution #507 #502]: #537
#504 := (not #546)
#501 := (not #537)
#508 := (not #622)
#505 := (or #426 #508 #501 #504)
#491 := [th-lemma arith assign-bounds 1 1 -1]: #505
#493 := [unit-resolution #491 #500 #499 #506]: #426
#342 := (<= #86 0::Int)
#544 := (<= #532 0::Int)
#494 := (or #515 #544)
#492 := [th-lemma arith triangle-eq]: #494
#495 := [unit-resolution #492 #514]: #544
#625 := (>= #15 0::Int)
#477 := (or #604 #625)
#479 := [th-lemma arith triangle-eq]: #477
#480 := [unit-resolution #479 #585]: #625
#538 := (>= #417 0::Int)
#481 := (or #580 #538)
#482 := [th-lemma arith triangle-eq]: #481
#483 := [unit-resolution #482 #502]: #538
#486 := (not #544)
#485 := (not #538)
#484 := (not #625)
#487 := (or #342 #484 #485 #486)
#488 := [th-lemma arith assign-bounds 1 1 -1]: #487
#489 := [unit-resolution #488 #483 #480 #495]: #342
#490 := (not #426)
#478 := (not #342)
#470 := (or #478 #490)
#87 := (= #86 0::Int)
#90 := (not #87)
#12 := (* #11 1::Int)
#16 := (+ #12 #15)
#17 := (= f3 #16)
#18 := (not #17)
#93 := (iff #18 #90)
#73 := (+ #11 #15)
#76 := (= f3 #73)
#79 := (not #76)
#91 := (iff #79 #90)
#88 := (iff #76 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#80 := (iff #18 #79)
#77 := (iff #17 #76)
#74 := (= #16 #73)
#71 := (= #12 #11)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#94 := [trans #81 #92]: #93
#70 := [asserted]: #18
#95 := [mp #70 #94]: #90
#467 := (or #87 #478 #490)
#469 := [th-lemma arith triangle-eq]: #467
#471 := [unit-resolution #469 #95]: #470
#472 := [unit-resolution #471 #489 #493]: false
#473 := [lemma #472]: #580
#722 := (div #750 -1::Int)
#727 := (* -1::Int #722)
#439 := (+ #11 #727)
#719 := (= #439 0::Int)
#720 := (if #348 #418 #719)
#468 := (or #427 #720)
#710 := (if #427 #430 #720)
#20 := (f5 f6 #19)
#22 := (f4 #20 #21)
#755 := (pattern #22)
#103 := (div #97 #100)
#254 := (* -1::Int #103)
#255 := (+ #22 #254)
#256 := (= #255 0::Int)
#33 := (div #19 #21)
#251 := (* -1::Int #33)
#252 := (+ #22 #251)
#253 := (= #252 0::Int)
#257 := (if #218 #253 #256)
#250 := (= #22 0::Int)
#26 := (or #24 #25)
#258 := (if #26 #250 #257)
#756 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #755) #258)
#261 := (forall (vars (?v0 Int) (?v1 Int)) #258)
#759 := (iff #261 #756)
#757 := (iff #258 #258)
#758 := [refl]: #757
#760 := [quant-intro #758]: #759
#221 := (if #218 #33 #103)
#224 := (if #26 0::Int #221)
#227 := (= #22 #224)
#230 := (forall (vars (?v0 Int) (?v1 Int)) #227)
#262 := (iff #230 #261)
#259 := (iff #227 #258)
#260 := [rewrite]: #259
#263 := [quant-intro #260]: #262
#139 := (if #136 #33 #103)
#142 := (if #26 0::Int #139)
#145 := (= #22 #142)
#148 := (forall (vars (?v0 Int) (?v1 Int)) #145)
#231 := (iff #148 #230)
#228 := (iff #145 #227)
#225 := (= #142 #224)
#222 := (= #139 #221)
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#210 := (~ #148 #148)
#208 := (~ #145 #145)
#209 := [refl]: #208
#211 := [nnf-pos #209]: #210
#36 := (div #34 #35)
#37 := (if #32 #33 #36)
#38 := (if #26 0::Int #37)
#39 := (= #22 #38)
#40 := (forall (vars (?v0 Int) (?v1 Int)) #39)
#151 := (iff #40 #148)
#106 := (if #32 #33 #103)
#109 := (if #26 0::Int #106)
#112 := (= #22 #109)
#115 := (forall (vars (?v0 Int) (?v1 Int)) #112)
#149 := (iff #115 #148)
#146 := (iff #112 #145)
#143 := (= #109 #142)
#140 := (= #106 #139)
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#116 := (iff #40 #115)
#113 := (iff #39 #112)
#110 := (= #38 #109)
#107 := (= #37 #106)
#104 := (= #36 #103)
#105 := [monotonicity #99 #102]: #104
#108 := [monotonicity #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [quant-intro #114]: #116
#152 := [trans #117 #150]: #151
#96 := [asserted]: #40
#153 := [mp #96 #152]: #148
#202 := [mp~ #153 #211]: #148
#233 := [mp #202 #232]: #230
#264 := [mp #233 #263]: #261
#761 := [mp #264 #760]: #756
#707 := (not #756)
#708 := (or #707 #710)
#752 := (div #750 #751)
#753 := (* -1::Int #752)
#748 := (+ #11 #753)
#754 := (= #748 0::Int)
#744 := (if #406 #418 #754)
#419 := (or #427 #428)
#404 := (if #419 #430 #744)
#713 := (or #707 #404)
#709 := (iff #713 #708)
#556 := (iff #708 #708)
#557 := [rewrite]: #556
#711 := (iff #404 #710)
#717 := (iff #744 #720)
#434 := (iff #754 #719)
#440 := (= #748 #439)
#437 := (= #753 #727)
#726 := (= #752 #722)
#723 := [monotonicity #448]: #726
#438 := [monotonicity #723]: #437
#718 := [monotonicity #438]: #440
#716 := [monotonicity #718]: #434
#721 := [monotonicity #725 #716]: #717
#394 := (iff #419 #427)
#405 := (or #427 false)
#730 := (iff #405 #427)
#393 := [rewrite]: #730
#746 := (iff #419 #405)
#389 := [monotonicity #745]: #746
#395 := [trans #389 #393]: #394
#712 := [monotonicity #395 #721]: #711
#715 := [monotonicity #712]: #709
#558 := [trans #715 #557]: #709
#714 := [quant-inst #7 #10]: #713
#700 := [mp #714 #558]: #708
#475 := [unit-resolution #700 #761]: #710
#688 := (not #710)
#591 := (or #688 #427 #720)
#584 := [def-axiom]: #591
#476 := [unit-resolution #584 #475]: #468
#461 := [unit-resolution #476 #474]: #720
#695 := (not #720)
#693 := (or #695 #705 #418)
#696 := [def-axiom]: #693
#462 := [unit-resolution #696 #461 #473]: #705
#463 := [unit-resolution #697 #462]: #431
#465 := [unit-resolution #704 #462]: #412
#464 := [unit-resolution #576 #465 #463 #474]: false
#466 := [lemma #464]: #427
#455 := (or #573 #430)
#588 := (or #688 #573 #430)
#590 := [def-axiom]: #588
#456 := [unit-resolution #590 #475]: #455
#457 := [unit-resolution #456 #466]: #430
#592 := (not #430)
#449 := (or #592 #701)
#458 := [th-lemma arith triangle-eq]: #449
#459 := [unit-resolution #458 #457]: #701
#450 := (or #573 #412)
#460 := [th-lemma arith triangle-eq]: #450
#441 := [unit-resolution #460 #466]: #412
#442 := (not #701)
#443 := (or #426 #442 #508 #452)
#435 := [th-lemma arith assign-bounds 1 1 -1]: #443
#444 := [unit-resolution #435 #441 #459 #499]: #426
#702 := (>= #11 0::Int)
#445 := (or #592 #702)
#436 := [th-lemma arith triangle-eq]: #445
#446 := [unit-resolution #436 #457]: #702
#413 := (or #573 #431)
#415 := [th-lemma arith triangle-eq]: #413
#416 := [unit-resolution #415 #466]: #431
#407 := (not #702)
#420 := (or #342 #407 #484 #738)
#421 := [th-lemma arith assign-bounds 1 1 -1]: #420
#422 := [unit-resolution #421 #416 #446 #480]: #342
[unit-resolution #471 #422 #444]: false
unsat
d22602bbee9e57cff02bea0b44e81e206f8f757f 546 0
#2 := false
#23 := 0::Int
decl f4 :: (-> S2 Int Int)
#10 := 3::Int
decl f5 :: (-> S3 Int S2)
decl f3 :: Int
#7 := f3
decl f6 :: S3
#8 := f6
#9 := (f5 f6 f3)
#11 := (f4 #9 3::Int)
#704 := (>= #11 0::Int)
#432 := (= #11 0::Int)
#429 := (= f3 0::Int)
#575 := (not #429)
#571 := [hypothesis]: #575
#433 := (<= f3 0::Int)
#414 := (>= f3 0::Int)
#454 := (not #414)
#740 := (not #433)
#350 := (or #740 #454)
#707 := (not #350)
#83 := -3::Int
#85 := -1::Int
#752 := (* -1::Int f3)
#724 := (div #752 -3::Int)
#729 := (* -1::Int #724)
#441 := (+ #11 #729)
#721 := (= #441 0::Int)
#538 := (div f3 3::Int)
#745 := (* -1::Int #538)
#419 := (+ #11 #745)
#420 := (= #419 0::Int)
#722 := (if #350 #420 #721)
#557 := (or #429 #722)
#712 := (if #429 #432 #722)
#21 := (:var 0 Int)
#19 := (:var 1 Int)
#20 := (f5 f6 #19)
#22 := (f4 #20 #21)
#757 := (pattern #22)
#102 := (* -1::Int #21)
#99 := (* -1::Int #19)
#105 := (div #99 #102)
#256 := (* -1::Int #105)
#257 := (+ #22 #256)
#258 := (= #257 0::Int)
#33 := (div #19 #21)
#253 := (* -1::Int #33)
#254 := (+ #22 #253)
#255 := (= #254 0::Int)
#124 := (<= #21 0::Int)
#131 := (>= #19 0::Int)
#216 := (or #131 #124)
#217 := (not #216)
#120 := (<= #19 0::Int)
#214 := (or #120 #124)
#215 := (not #214)
#220 := (or #215 #217)
#259 := (if #220 #255 #258)
#252 := (= #22 0::Int)
#25 := (= #21 0::Int)
#24 := (= #19 0::Int)
#26 := (or #24 #25)
#260 := (if #26 #252 #259)
#758 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #757) #260)
#263 := (forall (vars (?v0 Int) (?v1 Int)) #260)
#761 := (iff #263 #758)
#759 := (iff #260 #260)
#760 := [refl]: #759
#762 := [quant-intro #760]: #761
#223 := (if #220 #33 #105)
#226 := (if #26 0::Int #223)
#229 := (= #22 #226)
#232 := (forall (vars (?v0 Int) (?v1 Int)) #229)
#264 := (iff #232 #263)
#261 := (iff #229 #260)
#262 := [rewrite]: #261
#265 := [quant-intro #262]: #264
#125 := (not #124)
#132 := (not #131)
#135 := (and #132 #125)
#121 := (not #120)
#128 := (and #121 #125)
#138 := (or #128 #135)
#141 := (if #138 #33 #105)
#144 := (if #26 0::Int #141)
#147 := (= #22 #144)
#150 := (forall (vars (?v0 Int) (?v1 Int)) #147)
#233 := (iff #150 #232)
#230 := (iff #147 #229)
#227 := (= #144 #226)
#224 := (= #141 #223)
#221 := (iff #138 #220)
#218 := (iff #135 #217)
#219 := [rewrite]: #218
#208 := (iff #128 #215)
#209 := [rewrite]: #208
#222 := [monotonicity #209 #219]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [quant-intro #231]: #233
#212 := (~ #150 #150)
#210 := (~ #147 #147)
#211 := [refl]: #210
#213 := [nnf-pos #211]: #212
#35 := (- #21)
#34 := (- #19)
#36 := (div #34 #35)
#28 := (< 0::Int #21)
#30 := (< #19 0::Int)
#31 := (and #30 #28)
#27 := (< 0::Int #19)
#29 := (and #27 #28)
#32 := (or #29 #31)
#37 := (if #32 #33 #36)
#38 := (if #26 0::Int #37)
#39 := (= #22 #38)
#40 := (forall (vars (?v0 Int) (?v1 Int)) #39)
#153 := (iff #40 #150)
#108 := (if #32 #33 #105)
#111 := (if #26 0::Int #108)
#114 := (= #22 #111)
#117 := (forall (vars (?v0 Int) (?v1 Int)) #114)
#151 := (iff #117 #150)
#148 := (iff #114 #147)
#145 := (= #111 #144)
#142 := (= #108 #141)
#139 := (iff #32 #138)
#136 := (iff #31 #135)
#126 := (iff #28 #125)
#127 := [rewrite]: #126
#133 := (iff #30 #132)
#134 := [rewrite]: #133
#137 := [monotonicity #134 #127]: #136
#129 := (iff #29 #128)
#122 := (iff #27 #121)
#123 := [rewrite]: #122
#130 := [monotonicity #123 #127]: #129
#140 := [monotonicity #130 #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#118 := (iff #40 #117)
#115 := (iff #39 #114)
#112 := (= #38 #111)
#109 := (= #37 #108)
#106 := (= #36 #105)
#103 := (= #35 #102)
#104 := [rewrite]: #103
#100 := (= #34 #99)
#101 := [rewrite]: #100
#107 := [monotonicity #101 #104]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#154 := [trans #119 #152]: #153
#98 := [asserted]: #40
#155 := [mp #98 #154]: #150
#204 := [mp~ #155 #213]: #150
#235 := [mp #204 #234]: #232
#266 := [mp #235 #265]: #263
#763 := [mp #266 #762]: #758
#709 := (not #758)
#710 := (or #709 #712)
#753 := (* -1::Int 3::Int)
#754 := (div #752 #753)
#755 := (* -1::Int #754)
#750 := (+ #11 #755)
#756 := (= #750 0::Int)
#434 := (<= 3::Int 0::Int)
#749 := (or #414 #434)
#751 := (not #749)
#431 := (or #433 #434)
#435 := (not #431)
#408 := (or #435 #751)
#746 := (if #408 #420 #756)
#430 := (= 3::Int 0::Int)
#421 := (or #429 #430)
#406 := (if #421 #432 #746)
#715 := (or #709 #406)
#711 := (iff #715 #710)
#558 := (iff #710 #710)
#559 := [rewrite]: #558
#713 := (iff #406 #712)
#719 := (iff #746 #722)
#436 := (iff #756 #721)
#442 := (= #750 #441)
#439 := (= #755 #729)
#728 := (= #754 #724)
#449 := (= #753 -3::Int)
#450 := [rewrite]: #449
#725 := [monotonicity #450]: #728
#440 := [monotonicity #725]: #439
#720 := [monotonicity #440]: #442
#718 := [monotonicity #720]: #436
#726 := (iff #408 #350)
#455 := (iff #751 #454)
#731 := (iff #749 #414)
#383 := (or #414 false)
#744 := (iff #383 #414)
#730 := [rewrite]: #744
#743 := (iff #749 #383)
#398 := (iff #434 false)
#734 := [rewrite]: #398
#741 := [monotonicity #734]: #743
#453 := [trans #741 #730]: #731
#456 := [monotonicity #453]: #455
#742 := (iff #435 #740)
#739 := (iff #431 #433)
#735 := (or #433 false)
#738 := (iff #735 #433)
#733 := [rewrite]: #738
#736 := (iff #431 #735)
#737 := [monotonicity #734]: #736
#377 := [trans #737 #733]: #739
#382 := [monotonicity #377]: #742
#727 := [monotonicity #382 #456]: #726
#723 := [monotonicity #727 #718]: #719
#396 := (iff #421 #429)
#407 := (or #429 false)
#732 := (iff #407 #429)
#395 := [rewrite]: #732
#748 := (iff #421 #407)
#411 := (iff #430 false)
#747 := [rewrite]: #411
#391 := [monotonicity #747]: #748
#397 := [trans #391 #395]: #396
#714 := [monotonicity #397 #723]: #713
#717 := [monotonicity #714]: #711
#560 := [trans #717 #559]: #711
#716 := [quant-inst #7 #10]: #715
#702 := [mp #716 #560]: #710
#572 := [unit-resolution #702 #763]: #712
#690 := (not #712)
#593 := (or #690 #429 #722)
#586 := [def-axiom]: #593
#573 := [unit-resolution #586 #572]: #557
#534 := [unit-resolution #573 #571]: #722
#693 := (mod #752 -3::Int)
decl f7 :: S3
#13 := f7
#14 := (f5 f7 f3)
#15 := (f4 #14 3::Int)
#674 := (+ #15 #693)
#677 := (= #674 0::Int)
#537 := (mod f3 3::Int)
#692 := (* -1::Int #537)
#679 := (+ #15 #692)
#681 := (= #679 0::Int)
#662 := (if #350 #681 #677)
#533 := (or #429 #662)
#688 := (= #15 0::Int)
#666 := (if #429 #688 #662)
#41 := (f5 f7 #19)
#42 := (f4 #41 #21)
#764 := (pattern #42)
#157 := (mod #99 #102)
#272 := (+ #42 #157)
#273 := (= #272 0::Int)
#43 := (mod #19 #21)
#269 := (* -1::Int #43)
#270 := (+ #42 #269)
#271 := (= #270 0::Int)
#274 := (if #220 #271 #273)
#268 := (= #42 0::Int)
#275 := (if #24 #268 #274)
#267 := (= #42 #19)
#276 := (if #25 #267 #275)
#765 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #764) #276)
#279 := (forall (vars (?v0 Int) (?v1 Int)) #276)
#768 := (iff #279 #765)
#766 := (iff #276 #276)
#767 := [refl]: #766
#769 := [quant-intro #767]: #768
#163 := (* -1::Int #157)
#236 := (if #220 #43 #163)
#239 := (if #24 0::Int #236)
#242 := (if #25 #19 #239)
#245 := (= #42 #242)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#280 := (iff #248 #279)
#277 := (iff #245 #276)
#278 := [rewrite]: #277
#281 := [quant-intro #278]: #280
#183 := (if #138 #43 #163)
#186 := (if #24 0::Int #183)
#189 := (if #25 #19 #186)
#192 := (= #42 #189)
#195 := (forall (vars (?v0 Int) (?v1 Int)) #192)
#249 := (iff #195 #248)
#246 := (iff #192 #245)
#243 := (= #189 #242)
#240 := (= #186 #239)
#237 := (= #183 #236)
#238 := [monotonicity #222]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [quant-intro #247]: #249
#206 := (~ #195 #195)
#205 := (~ #192 #192)
#202 := [refl]: #205
#207 := [nnf-pos #202]: #206
#44 := (mod #34 #35)
#45 := (- #44)
#46 := (if #32 #43 #45)
#47 := (if #24 0::Int #46)
#48 := (if #25 #19 #47)
#49 := (= #42 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#198 := (iff #50 #195)
#168 := (if #32 #43 #163)
#171 := (if #24 0::Int #168)
#174 := (if #25 #19 #171)
#177 := (= #42 #174)
#180 := (forall (vars (?v0 Int) (?v1 Int)) #177)
#196 := (iff #180 #195)
#193 := (iff #177 #192)
#190 := (= #174 #189)
#187 := (= #171 #186)
#184 := (= #168 #183)
#185 := [monotonicity #140]: #184
#188 := [monotonicity #185]: #187
#191 := [monotonicity #188]: #190
#194 := [monotonicity #191]: #193
#197 := [quant-intro #194]: #196
#181 := (iff #50 #180)
#178 := (iff #49 #177)
#175 := (= #48 #174)
#172 := (= #47 #171)
#169 := (= #46 #168)
#166 := (= #45 #163)
#160 := (- #157)
#164 := (= #160 #163)
#165 := [rewrite]: #164
#161 := (= #45 #160)
#158 := (= #44 #157)
#159 := [monotonicity #101 #104]: #158
#162 := [monotonicity #159]: #161
#167 := [trans #162 #165]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#182 := [quant-intro #179]: #181
#199 := [trans #182 #197]: #198
#156 := [asserted]: #50
#200 := [mp #156 #199]: #195
#203 := [mp~ #200 #207]: #195
#251 := [mp #203 #250]: #248
#282 := [mp #251 #281]: #279
#770 := [mp #282 #769]: #765
#657 := (not #765)
#661 := (or #657 #666)
#673 := (mod #752 #753)
#670 := (+ #15 #673)
#672 := (= #670 0::Int)
#682 := (if #408 #681 #672)
#683 := (if #429 #688 #682)
#691 := (= #15 f3)
#684 := (if #430 #691 #683)
#641 := (or #657 #684)
#644 := (iff #641 #661)
#646 := (iff #661 #661)
#647 := [rewrite]: #646
#659 := (iff #684 #666)
#664 := (if false #691 #666)
#656 := (iff #664 #666)
#658 := [rewrite]: #656
#669 := (iff #684 #664)
#667 := (iff #683 #666)
#663 := (iff #682 #662)
#671 := (iff #672 #677)
#675 := (= #670 #674)
#680 := (= #673 #693)
#685 := [monotonicity #450]: #680
#676 := [monotonicity #685]: #675
#678 := [monotonicity #676]: #671
#665 := [monotonicity #727 #678]: #663
#668 := [monotonicity #665]: #667
#655 := [monotonicity #747 #668]: #669
#660 := [trans #655 #658]: #659
#645 := [monotonicity #660]: #644
#648 := [trans #645 #647]: #644
#642 := [quant-inst #7 #10]: #641
#649 := [mp #642 #648]: #661
#577 := [unit-resolution #649 #770]: #666
#623 := (not #666)
#628 := (or #623 #429 #662)
#629 := [def-axiom]: #628
#512 := [unit-resolution #629 #577]: #533
#515 := [unit-resolution #512 #571]: #662
#697 := (not #722)
#632 := (not #662)
#476 := (or #707 #632 #697)
#653 := (>= #679 0::Int)
#535 := [hypothesis]: #662
#542 := [hypothesis]: #350
#633 := (or #632 #707 #681)
#635 := [def-axiom]: #633
#544 := [unit-resolution #635 #542 #535]: #681
#638 := (not #681)
#484 := (or #638 #653)
#485 := [th-lemma arith triangle-eq]: #484
#486 := [unit-resolution #485 #544]: #653
#540 := (>= #419 0::Int)
#526 := [hypothesis]: #722
#695 := (or #697 #707 #420)
#698 := [def-axiom]: #695
#527 := [unit-resolution #698 #542 #526]: #420
#582 := (not #420)
#487 := (or #582 #540)
#488 := [th-lemma arith triangle-eq]: #487
#489 := [unit-resolution #488 #527]: #540
#86 := (* -1::Int #15)
#84 := (* -3::Int #11)
#87 := (+ #84 #86)
#88 := (+ f3 #87)
#344 := (<= #88 0::Int)
#490 := (not #344)
#428 := (>= #88 0::Int)
#549 := (not #428)
#550 := [hypothesis]: #549
#514 := (or #429 #428)
#532 := (or #707 #428 #632 #697)
#652 := (<= #679 0::Int)
#545 := (or #638 #652)
#546 := [th-lemma arith triangle-eq]: #545
#548 := [unit-resolution #546 #544]: #652
#547 := (* -3::Int #538)
#602 := (+ #692 #547)
#583 := (+ f3 #602)
#584 := (>= #583 0::Int)
#601 := (= #583 0::Int)
#1 := true
#68 := [true-axiom]: true
#551 := (or false #601)
#552 := [th-lemma arith]: #551
#553 := [unit-resolution #552 #68]: #601
#536 := (not #601)
#554 := (or #536 #584)
#524 := [th-lemma arith triangle-eq]: #554
#525 := [unit-resolution #524 #553]: #584
#539 := (<= #419 0::Int)
#529 := (or #582 #539)
#530 := [th-lemma arith triangle-eq]: #529
#531 := [unit-resolution #530 #527]: #539
#374 := [th-lemma arith farkas 3 -1 1 1 #531 #525 #550 #548]: false
#528 := [lemma #374]: #532
#519 := [unit-resolution #528 #515 #550 #534]: #707
#705 := (or #350 #433)
#699 := [def-axiom]: #705
#521 := [unit-resolution #699 #519]: #433
#700 := (or #350 #414)
#706 := [def-axiom]: #700
#522 := [unit-resolution #706 #519]: #414
#520 := (or #429 #740 #454)
#523 := [th-lemma arith triangle-eq]: #520
#511 := [unit-resolution #523 #522 #521 #571]: false
#516 := [lemma #511]: #514
#517 := [unit-resolution #516 #550]: #429
#513 := (or #575 #414)
#518 := [th-lemma arith triangle-eq]: #513
#508 := [unit-resolution #518 #517]: #414
#650 := (<= #15 0::Int)
#498 := (or #575 #688)
#624 := (or #623 #575 #688)
#627 := [def-axiom]: #624
#500 := [unit-resolution #627 #577]: #498
#501 := [unit-resolution #500 #517]: #688
#630 := (not #688)
#504 := (or #630 #650)
#505 := [th-lemma arith triangle-eq]: #504
#509 := [unit-resolution #505 #501]: #650
#703 := (<= #11 0::Int)
#502 := (or #575 #432)
#590 := (or #690 #575 #432)
#592 := [def-axiom]: #590
#510 := [unit-resolution #592 #572]: #502
#503 := [unit-resolution #510 #517]: #432
#594 := (not #432)
#506 := (or #594 #703)
#507 := [th-lemma arith triangle-eq]: #506
#493 := [unit-resolution #507 #503]: #703
#495 := [th-lemma arith farkas -3 -1 -1 1 #493 #509 #550 #508]: false
#496 := [lemma #495]: #428
#492 := (or #490 #549)
#89 := (= #88 0::Int)
#92 := (not #89)
#12 := (* #11 3::Int)
#16 := (+ #12 #15)
#17 := (= f3 #16)
#18 := (not #17)
#95 := (iff #18 #92)
#71 := (* 3::Int #11)
#74 := (+ #71 #15)
#77 := (= f3 #74)
#80 := (not #77)
#93 := (iff #80 #92)
#90 := (iff #77 #89)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#81 := (iff #18 #80)
#78 := (iff #17 #77)
#75 := (= #16 #74)
#72 := (= #12 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#82 := [monotonicity #79]: #81
#96 := [trans #82 #94]: #95
#70 := [asserted]: #18
#97 := [mp #70 #96]: #92
#491 := (or #89 #490 #549)
#480 := [th-lemma arith triangle-eq]: #491
#469 := [unit-resolution #480 #97]: #492
#471 := [unit-resolution #469 #496]: #490
#494 := (<= #583 0::Int)
#472 := (or #536 #494)
#473 := [th-lemma arith triangle-eq]: #472
#474 := [unit-resolution #473 #553]: #494
#475 := [th-lemma arith farkas -1 1 3 1 #474 #471 #489 #486]: false
#477 := [lemma #475]: #476
#497 := [unit-resolution #477 #515 #534]: #707
#479 := [unit-resolution #699 #497]: #433
#481 := [unit-resolution #706 #497]: #414
#482 := [unit-resolution #523 #481 #479 #571]: false
#483 := [lemma #482]: #429
#470 := [unit-resolution #510 #483]: #432
#478 := (or #594 #704)
#463 := [th-lemma arith triangle-eq]: #478
#464 := [unit-resolution #463 #470]: #704
#651 := (>= #15 0::Int)
#465 := [unit-resolution #500 #483]: #688
#467 := (or #630 #651)
#466 := [th-lemma arith triangle-eq]: #467
#468 := [unit-resolution #466 #465]: #651
#457 := (or #575 #433)
#458 := [th-lemma arith triangle-eq]: #457
#459 := [unit-resolution #458 #483]: #433
[th-lemma arith farkas -1/3 1/3 1/3 1 #459 #468 #471 #464]: false
unsat
c91002b99b758c3ccb28f44af2851bf6d5b6b3b9 75 0
#2 := false
#7 := 0::Int
decl f3 :: Int
#8 := f3
#34 := -1::Int
#35 := (* -1::Int f3)
#47 := (>= f3 0::Int)
#54 := (if #47 f3 #35)
#74 := (* -1::Int #54)
#83 := (+ #35 #74)
#92 := (<= #83 0::Int)
#79 := (= #35 #54)
#48 := (not #47)
#75 := (+ f3 #74)
#82 := (<= #75 0::Int)
#78 := (= f3 #54)
#84 := [hypothesis]: #47
#80 := (or #48 #78)
#81 := [def-axiom]: #80
#85 := [unit-resolution #81 #84]: #78
#86 := (not #78)
#87 := (or #86 #82)
#88 := [th-lemma arith triangle-eq]: #87
#89 := [unit-resolution #88 #85]: #82
#63 := (>= #54 0::Int)
#67 := (not #63)
#10 := (- f3)
#9 := (< f3 0::Int)
#11 := (if #9 #10 f3)
#12 := (<= 0::Int #11)
#13 := (not #12)
#70 := (iff #13 #67)
#38 := (if #9 #35 f3)
#41 := (<= 0::Int #38)
#44 := (not #41)
#68 := (iff #44 #67)
#65 := (iff #41 #63)
#59 := (<= 0::Int #54)
#62 := (iff #59 #63)
#64 := [rewrite]: #62
#60 := (iff #41 #59)
#57 := (= #38 #54)
#51 := (if #48 #35 f3)
#55 := (= #51 #54)
#56 := [rewrite]: #55
#52 := (= #38 #51)
#49 := (iff #9 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#58 := [trans #53 #56]: #57
#61 := [monotonicity #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (= #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#71 := [trans #46 #69]: #70
#33 := [asserted]: #13
#72 := [mp #33 #71]: #67
#90 := [th-lemma arith farkas -1 1 1 #84 #72 #89]: false
#91 := [lemma #90]: #48
#76 := (or #47 #79)
#77 := [def-axiom]: #76
#94 := [unit-resolution #77 #91]: #79
#95 := (not #79)
#96 := (or #95 #92)
#97 := [th-lemma arith triangle-eq]: #96
#98 := [unit-resolution #97 #94]: #92
[th-lemma arith farkas 1 1 1 #72 #91 #98]: false
unsat
f7d5d4604fbbb605eaa83e4616aa639b578e2c1f 103 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#7 := f3
#36 := -1::Int
#37 := (* -1::Int f3)
#58 := (>= f3 0::Int)
#65 := (if #58 f3 #37)
#70 := (= #65 0::Int)
#13 := (= f3 0::Int)
#118 := (iff #13 #70)
#87 := (= f3 #65)
#101 := (<= #37 0::Int)
#100 := (= #37 0::Int)
#84 := (not #13)
#59 := (not #58)
#103 := [hypothesis]: #59
#104 := (or #84 #58)
#105 := [th-lemma arith triangle-eq]: #104
#106 := [unit-resolution #105 #103]: #84
#98 := (or #70 #13)
#73 := (not #70)
#76 := (iff #73 #13)
#10 := (- f3)
#9 := (< f3 0::Int)
#11 := (if #9 #10 f3)
#12 := (= #11 0::Int)
#14 := (iff #12 #13)
#15 := (not #14)
#79 := (iff #15 #76)
#40 := (if #9 #37 f3)
#43 := (= #40 0::Int)
#52 := (not #43)
#53 := (iff #52 #13)
#77 := (iff #53 #76)
#74 := (iff #52 #73)
#71 := (iff #43 #70)
#68 := (= #40 #65)
#62 := (if #59 #37 f3)
#66 := (= #62 #65)
#67 := [rewrite]: #66
#63 := (= #40 #62)
#60 := (iff #9 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#56 := (iff #15 #53)
#46 := (iff #43 #13)
#49 := (not #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (= #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#80 := [trans #57 #78]: #79
#35 := [asserted]: #15
#81 := [mp #35 #80]: #76
#91 := (not #76)
#96 := (or #70 #13 #91)
#97 := [def-axiom]: #96
#99 := [unit-resolution #97 #81]: #98
#107 := [unit-resolution #99 #106]: #70
#88 := (= #37 #65)
#85 := (or #58 #88)
#86 := [def-axiom]: #85
#108 := [unit-resolution #86 #103]: #88
#109 := [trans #108 #107]: #100
#110 := (not #100)
#111 := (or #110 #101)
#112 := [th-lemma arith triangle-eq]: #111
#113 := [unit-resolution #112 #109]: #101
#114 := [th-lemma arith farkas 1 1 #103 #113]: false
#115 := [lemma #114]: #58
#89 := (or #59 #87)
#90 := [def-axiom]: #89
#117 := [unit-resolution #90 #115]: #87
#119 := [monotonicity #117]: #118
#120 := (iff #84 #73)
#121 := [monotonicity #119]: #120
#102 := [hypothesis]: #84
#122 := [mp #102 #121]: #73
#116 := [unit-resolution #99 #102]: #70
#123 := [unit-resolution #116 #122]: false
#124 := [lemma #123]: #13
#126 := [mp #124 #119]: #70
#94 := (or #73 #84)
#92 := (or #73 #84 #91)
#93 := [def-axiom]: #92
#95 := [unit-resolution #93 #81]: #94
#125 := [unit-resolution #95 #124]: #73
[unit-resolution #125 #126]: false
unsat
a86d5276873d6d3bf936c62241af1fdd8cbbc24a 102 0
#2 := false
#7 := 0::Int
decl f3 :: Int
#8 := f3
#36 := -1::Int
#37 := (* -1::Int f3)
#112 := (* -1::Int #37)
#113 := (+ f3 #112)
#115 := (>= #113 0::Int)
#111 := (= f3 #37)
#58 := (>= f3 0::Int)
#69 := (if #58 f3 #37)
#119 := (= #69 #37)
#89 := (= #37 #69)
#61 := (not #58)
#74 := (= #69 f3)
#88 := (= f3 #69)
#105 := (not #88)
#84 := (not #74)
#106 := (iff #84 #105)
#103 := (iff #74 #88)
#104 := [commutativity]: #103
#107 := [monotonicity #104]: #106
#100 := [hypothesis]: #84
#108 := [mp #100 #107]: #105
#98 := (or #58 #74)
#77 := (iff #61 #74)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (if #10 #11 f3)
#13 := (= #12 f3)
#9 := (<= 0::Int f3)
#14 := (iff #9 #13)
#15 := (not #14)
#80 := (iff #15 #77)
#40 := (if #10 #37 f3)
#43 := (= #40 f3)
#52 := (not #9)
#53 := (iff #52 #43)
#78 := (iff #53 #77)
#75 := (iff #43 #74)
#72 := (= #40 #69)
#66 := (if #61 #37 f3)
#70 := (= #66 #69)
#71 := [rewrite]: #70
#67 := (= #40 #66)
#64 := (iff #10 #61)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#76 := [monotonicity #73]: #75
#62 := (iff #52 #61)
#59 := (iff #9 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#79 := [monotonicity #63 #76]: #78
#56 := (iff #15 #53)
#46 := (iff #9 #43)
#49 := (not #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#41 := (= #12 #40)
#38 := (= #11 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#81 := [trans #57 #79]: #80
#35 := [asserted]: #15
#82 := [mp #35 #81]: #77
#85 := (not #77)
#96 := (or #58 #74 #85)
#97 := [def-axiom]: #96
#99 := [unit-resolution #97 #82]: #98
#101 := [unit-resolution #99 #100]: #58
#90 := (or #61 #88)
#91 := [def-axiom]: #90
#102 := [unit-resolution #91 #101]: #88
#109 := [unit-resolution #102 #108]: false
#110 := [lemma #109]: #74
#94 := (or #61 #84)
#92 := (or #61 #84 #85)
#93 := [def-axiom]: #92
#95 := [unit-resolution #93 #82]: #94
#116 := [unit-resolution #95 #110]: #61
#86 := (or #58 #89)
#87 := [def-axiom]: #86
#117 := [unit-resolution #87 #116]: #89
#120 := [symm #117]: #119
#118 := [symm #110]: #88
#121 := [trans #118 #120]: #111
#122 := (not #111)
#123 := (or #122 #115)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #115
[th-lemma arith farkas 2 1 #116 #125]: false
unsat
1d4370f4d13676652ec1fdf0e92ac69e5f27e6bc 143 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#7 := f3
#36 := -1::Int
#37 := (* -1::Int f3)
#58 := (>= f3 0::Int)
#65 := (if #58 f3 #37)
#104 := (* -1::Int #65)
#154 := (+ f3 #104)
#155 := (<= #154 0::Int)
#90 := (= f3 #65)
#105 := (+ #37 #104)
#107 := (>= #105 0::Int)
#91 := (= #37 #65)
#59 := (not #58)
#139 := [hypothesis]: #59
#88 := (or #58 #91)
#89 := [def-axiom]: #88
#140 := [unit-resolution #89 #139]: #91
#133 := (not #91)
#141 := (or #133 #107)
#142 := [th-lemma arith triangle-eq]: #141
#143 := [unit-resolution #142 #140]: #107
#73 := (+ f3 #65)
#86 := (<= #73 0::Int)
#148 := (not #86)
#87 := (>= #73 0::Int)
#106 := (<= #105 0::Int)
#74 := (= #73 0::Int)
#94 := (not #74)
#126 := (not #87)
#127 := [hypothesis]: #126
#128 := (or #94 #87)
#129 := [th-lemma arith triangle-eq]: #128
#130 := [unit-resolution #129 #127]: #94
#124 := (or #59 #74)
#111 := (= f3 0::Int)
#9 := (<= f3 0::Int)
#108 := [hypothesis]: #94
#102 := (or #9 #74)
#52 := (not #9)
#79 := (iff #52 #74)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (if #10 #11 f3)
#13 := (= #12 #11)
#14 := (iff #9 #13)
#15 := (not #14)
#82 := (iff #15 #79)
#40 := (if #10 #37 f3)
#43 := (= #40 #37)
#53 := (iff #52 #43)
#80 := (iff #53 #79)
#77 := (iff #43 #74)
#70 := (= #65 #37)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #43 #70)
#68 := (= #40 #65)
#62 := (if #59 #37 f3)
#66 := (= #62 #65)
#67 := [rewrite]: #66
#63 := (= #40 #62)
#60 := (iff #10 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#72 := [monotonicity #69]: #71
#78 := [trans #72 #76]: #77
#81 := [monotonicity #78]: #80
#56 := (iff #15 #53)
#46 := (iff #9 #43)
#49 := (not #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#38 := (= #11 #37)
#39 := [rewrite]: #38
#41 := (= #12 #40)
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42 #39]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#83 := [trans #57 #81]: #82
#35 := [asserted]: #15
#84 := [mp #35 #83]: #79
#95 := (not #79)
#100 := (or #9 #74 #95)
#101 := [def-axiom]: #100
#103 := [unit-resolution #101 #84]: #102
#109 := [unit-resolution #103 #108]: #9
#110 := [hypothesis]: #58
#112 := [th-lemma arith eq-propagate 0 0 #110 #109]: #111
#120 := (= #73 f3)
#118 := (= #65 f3)
#92 := (or #59 #90)
#93 := [def-axiom]: #92
#113 := [unit-resolution #93 #110]: #90
#119 := [symm #113]: #118
#116 := (= #73 #65)
#114 := (= #65 #73)
#115 := [th-lemma arith eq-propagate 1 1 #110 #109]: #114
#117 := [symm #115]: #116
#121 := [trans #117 #119]: #120
#122 := [trans #121 #112]: #74
#123 := [unit-resolution #108 #122]: false
#125 := [lemma #123]: #124
#131 := [unit-resolution #125 #130]: #59
#132 := [unit-resolution #89 #131]: #91
#134 := (or #133 #106)
#135 := [th-lemma arith triangle-eq]: #134
#136 := [unit-resolution #135 #132]: #106
#137 := [th-lemma arith farkas 1 1 #127 #136]: false
#138 := [lemma #137]: #87
#144 := (or #58 #9)
#145 := [th-lemma arith farkas 1 1]: #144
#146 := [unit-resolution #145 #139]: #9
#98 := (or #52 #94)
#96 := (or #52 #94 #95)
#97 := [def-axiom]: #96
#99 := [unit-resolution #97 #84]: #98
#147 := [unit-resolution #99 #146]: #94
#149 := (or #74 #148 #126)
#150 := [th-lemma arith triangle-eq]: #149
#151 := [unit-resolution #150 #147 #138]: #148
#152 := [th-lemma arith farkas 1 1 #151 #143]: false
#153 := [lemma #152]: #58
#157 := [unit-resolution #93 #153]: #90
#158 := (not #90)
#159 := (or #158 #155)
#160 := [th-lemma arith triangle-eq]: #159
#161 := [unit-resolution #160 #157]: #155
#162 := [unit-resolution #125 #153]: #74
#163 := (or #94 #86)
#164 := [th-lemma arith triangle-eq]: #163
#165 := [unit-resolution #164 #162]: #86
#166 := [unit-resolution #99 #162]: #52
[th-lemma arith farkas 2 1 1 #166 #165 #161]: false
unsat
2b84e732fcc2714735cd598d8c722a6eb6af2d0d 116 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#7 := f3
#37 := -1::Int
#38 := (* -1::Int f3)
#64 := (>= f3 0::Int)
#71 := (if #64 f3 #38)
#85 := (* -1::Int #71)
#125 := (+ #38 #85)
#141 := (<= #125 0::Int)
#113 := (= #38 #71)
#65 := (not #64)
#123 := (+ f3 #85)
#124 := (<= #123 0::Int)
#112 := (= f3 #71)
#126 := [hypothesis]: #64
#108 := (or #65 #112)
#109 := [def-axiom]: #108
#127 := [unit-resolution #109 #126]: #112
#128 := (not #112)
#129 := (or #128 #124)
#130 := [th-lemma arith triangle-eq]: #129
#131 := [unit-resolution #130 #127]: #124
#80 := (>= #71 0::Int)
#79 := (not #80)
#91 := (if #80 #71 #85)
#110 := (= #71 #91)
#134 := (not #110)
#96 := (= #91 #71)
#99 := (not #96)
#135 := (iff #99 #134)
#132 := (iff #96 #110)
#133 := [commutativity]: #132
#136 := [monotonicity #133]: #135
#10 := (- f3)
#9 := (< f3 0::Int)
#11 := (if #9 #10 f3)
#13 := (- #11)
#12 := (< #11 0::Int)
#14 := (if #12 #13 #11)
#15 := (= #14 #11)
#16 := (not #15)
#102 := (iff #16 #99)
#41 := (if #9 #38 f3)
#50 := (* -1::Int #41)
#44 := (< #41 0::Int)
#55 := (if #44 #50 #41)
#58 := (= #55 #41)
#61 := (not #58)
#100 := (iff #61 #99)
#97 := (iff #58 #96)
#74 := (= #41 #71)
#68 := (if #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #9 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#94 := (= #55 #91)
#88 := (if #79 #85 #71)
#92 := (= #88 #91)
#93 := [rewrite]: #92
#89 := (= #55 #88)
#86 := (= #50 #85)
#87 := [monotonicity #75]: #86
#83 := (iff #44 #79)
#76 := (< #71 0::Int)
#81 := (iff #76 #79)
#82 := [rewrite]: #81
#77 := (iff #44 #76)
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#90 := [monotonicity #84 #87 #75]: #89
#95 := [trans #90 #93]: #94
#98 := [monotonicity #95 #75]: #97
#101 := [monotonicity #98]: #100
#62 := (iff #16 #61)
#59 := (iff #15 #58)
#42 := (= #11 #41)
#39 := (= #10 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#56 := (= #14 #55)
#53 := (= #13 #50)
#47 := (- #41)
#51 := (= #47 #50)
#52 := [rewrite]: #51
#48 := (= #13 #47)
#49 := [monotonicity #43]: #48
#54 := [trans #49 #52]: #53
#45 := (iff #12 #44)
#46 := [monotonicity #43]: #45
#57 := [monotonicity #46 #54 #43]: #56
#60 := [monotonicity #57 #43]: #59
#63 := [monotonicity #60]: #62
#103 := [trans #63 #101]: #102
#36 := [asserted]: #16
#104 := [mp #36 #103]: #99
#137 := [mp #104 #136]: #134
#114 := (or #79 #110)
#115 := [def-axiom]: #114
#138 := [unit-resolution #115 #137]: #79
#139 := [th-lemma arith farkas -1 1 1 #126 #138 #131]: false
#140 := [lemma #139]: #65
#106 := (or #64 #113)
#107 := [def-axiom]: #106
#143 := [unit-resolution #107 #140]: #113
#144 := (not #113)
#145 := (or #144 #141)
#146 := [th-lemma arith triangle-eq]: #145
#147 := [unit-resolution #146 #143]: #141
[th-lemma arith farkas 1 1 1 #140 #138 #147]: false
unsat
9936c013aaffef1779de3d0aed544f8c88008f68 57 0
#2 := false
#14 := 0::Int
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Int)
#42 := (if #39 f3 f4)
#50 := (* -1::Int #42)
#59 := (+ f4 #50)
#73 := (>= #59 0::Int)
#63 := (= f4 #42)
#64 := (not #39)
#62 := (= f3 #42)
#67 := (not #62)
#51 := (+ f3 #50)
#49 := (>= #51 0::Int)
#55 := (not #49)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#11 := (<= #10 f3)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #49)
#45 := (<= #42 f3)
#48 := (iff #45 #49)
#52 := [rewrite]: #48
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#66 := [hypothesis]: #62
#68 := (or #67 #49)
#69 := [th-lemma arith triangle-eq]: #68
#70 := [unit-resolution #69 #66 #58]: false
#71 := [lemma #70]: #67
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#74 := [unit-resolution #60 #71]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#75 := [unit-resolution #35 #74]: #63
#76 := (not #63)
#77 := (or #76 #73)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #75]: #73
[th-lemma arith farkas 1 1 1 #58 #74 #79]: false
unsat
92b8d5040546ba1e7f64484d25bbbd4c81b10ebb 57 0
#2 := false
#14 := 0::Int
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Int)
#42 := (if #39 f3 f4)
#49 := (* -1::Int #42)
#50 := (+ f4 #49)
#48 := (>= #50 0::Int)
#55 := (not #48)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#11 := (<= #10 f4)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #48)
#45 := (<= #42 f4)
#51 := (iff #45 #48)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#63 := (= f4 #42)
#64 := (not #39)
#68 := [hypothesis]: #39
#59 := (+ f3 #49)
#67 := (>= #59 0::Int)
#62 := (= f3 #42)
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#69 := [unit-resolution #60 #68]: #62
#70 := (not #62)
#71 := (or #70 #67)
#72 := [th-lemma arith triangle-eq]: #71
#73 := [unit-resolution #72 #69]: #67
#74 := [th-lemma arith farkas -1 1 1 #73 #58 #68]: false
#75 := [lemma #74]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#76 := [unit-resolution #35 #75]: #63
#77 := (not #63)
#78 := (or #77 #48)
#79 := [th-lemma arith triangle-eq]: #78
[unit-resolution #79 #76 #58]: false
unsat
4790a8f58d0e5e129b7570eac05a8802b41105cc 103 0
#2 := false
#19 := 0::Int
decl f5 :: Int
#10 := f5
decl f4 :: Int
#8 := f4
#46 := -1::Int
#55 := (* -1::Int f5)
#65 := (+ f4 #55)
#66 := (<= #65 0::Int)
#69 := (if #66 f4 f5)
#77 := (* -1::Int #69)
decl f3 :: Int
#7 := f3
#78 := (+ f3 #77)
#76 := (>= #78 0::Int)
#75 := (not #76)
#56 := (+ f3 #55)
#54 := (>= #56 0::Int)
#53 := (not #54)
#49 := (* -1::Int f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Int)
#47 := (not #48)
#59 := (and #47 #53)
#62 := (not #59)
#83 := (or #62 #75)
#86 := (not #83)
#13 := (<= f4 f5)
#14 := (if #13 f4 f5)
#15 := (< f3 #14)
#11 := (< f3 f5)
#9 := (< f3 f4)
#12 := (and #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#89 := (iff #17 #86)
#39 := (not #12)
#40 := (or #39 #15)
#43 := (not #40)
#87 := (iff #43 #86)
#84 := (iff #40 #83)
#81 := (iff #15 #75)
#72 := (< f3 #69)
#79 := (iff #72 #75)
#80 := [rewrite]: #79
#73 := (iff #15 #72)
#70 := (= #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#82 := [trans #74 #80]: #81
#63 := (iff #39 #62)
#60 := (iff #12 #59)
#57 := (iff #11 #53)
#58 := [rewrite]: #57
#51 := (iff #9 #47)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#85 := [monotonicity #64 #82]: #84
#88 := [monotonicity #85]: #87
#44 := (iff #17 #43)
#41 := (iff #16 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#90 := [trans #45 #88]: #89
#38 := [asserted]: #17
#91 := [mp #38 #90]: #86
#95 := [not-or-elim #91]: #76
#92 := [not-or-elim #91]: #59
#94 := [and-elim #92]: #53
#100 := (+ f5 #77)
#117 := (<= #100 0::Int)
#106 := (= f5 #69)
#107 := (not #66)
#105 := (= f4 #69)
#112 := (not #105)
#102 := (+ f4 #77)
#99 := (<= #102 0::Int)
#109 := (not #99)
#93 := [and-elim #92]: #47
#97 := [hypothesis]: #99
#98 := [th-lemma arith farkas -1 -1 1 #97 #93 #95]: false
#110 := [lemma #98]: #109
#111 := [hypothesis]: #105
#113 := (or #112 #99)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111 #110]: false
#116 := [lemma #115]: #112
#108 := (or #107 #105)
#103 := [def-axiom]: #108
#119 := [unit-resolution #103 #116]: #107
#104 := (or #66 #106)
#101 := [def-axiom]: #104
#120 := [unit-resolution #101 #119]: #106
#121 := (not #106)
#122 := (or #121 #117)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #117
[th-lemma arith farkas -1 -1 1 #124 #94 #95]: false
unsat
3023c6408a65f8e0a7c485f4d2c4804457e87603 94 0
#2 := false
decl f3 :: Int
#7 := f3
decl f4 :: Int
#8 := f4
#16 := 0::Int
#38 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#48 := (>= #40 0::Int)
#50 := (if #48 f4 f3)
#41 := (<= #40 0::Int)
#44 := (if #41 f3 f4)
#53 := (= #44 #50)
#60 := (= f4 #50)
#65 := (not #41)
#63 := (= f3 #44)
#105 := (not #63)
#67 := (= f3 #50)
#74 := (not #67)
#75 := [hypothesis]: #74
#71 := (or #48 #67)
#72 := [def-axiom]: #71
#76 := [unit-resolution #72 #75]: #48
#68 := (not #48)
#69 := (or #68 #60)
#70 := [def-axiom]: #69
#77 := [unit-resolution #70 #76]: #60
#73 := (= f3 f4)
#64 := (= f4 #44)
#87 := (not #64)
#56 := (not #53)
#88 := (iff #56 #87)
#85 := (iff #53 #64)
#83 := (iff #64 #53)
#78 := (= #50 #44)
#81 := (iff #78 #53)
#82 := [commutativity]: #81
#79 := (iff #64 #78)
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#86 := [symm #84]: #85
#89 := [monotonicity #86]: #88
#11 := (<= f4 f3)
#12 := (if #11 f4 f3)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#57 := (iff #14 #56)
#54 := (iff #13 #53)
#51 := (= #12 #50)
#47 := (iff #11 #48)
#49 := [rewrite]: #47
#52 := [monotonicity #49]: #51
#45 := (= #10 #44)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#55 := [monotonicity #46 #52]: #54
#58 := [monotonicity #55]: #57
#35 := [asserted]: #14
#59 := [mp #35 #58]: #56
#90 := [mp #59 #89]: #87
#62 := (or #41 #64)
#37 := [def-axiom]: #62
#91 := [unit-resolution #37 #90]: #41
#94 := (or #73 #65)
#92 := (or #73 #65 #68)
#93 := [th-lemma arith triangle-eq]: #92
#95 := [unit-resolution #93 #76]: #94
#96 := [unit-resolution #95 #91]: #73
#97 := [trans #96 #77]: #67
#98 := [unit-resolution #75 #97]: false
#99 := [lemma #98]: #67
#101 := (= #44 f3)
#100 := [hypothesis]: #63
#102 := [symm #100]: #101
#103 := [trans #102 #99]: #53
#104 := [unit-resolution #59 #103]: false
#106 := [lemma #104]: #105
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#107 := [unit-resolution #61 #106]: #65
#109 := (or #48 #41)
#110 := [th-lemma arith farkas 1 1]: #109
#111 := [unit-resolution #110 #107]: #48
#112 := [unit-resolution #70 #111]: #60
#115 := (= #44 f4)
#108 := [unit-resolution #37 #107]: #64
#116 := [symm #108]: #115
#117 := [trans #116 #112]: #53
[unit-resolution #59 #117]: false
unsat
578d0e90251e6cdccfeca9dee8a741fa13906118 53 0
#2 := false
#7 := 0::Int
decl f3 :: Int
#8 := f3
#10 := (<= f3 0::Int)
#11 := (if #10 f3 0::Int)
#12 := (= #11 0::Int)
#63 := (= f3 0::Int)
#58 := (not #12)
#44 := (>= f3 0::Int)
#45 := (not #44)
#48 := (or #45 #12)
#51 := (not #48)
#9 := (<= 0::Int f3)
#13 := (implies #9 #12)
#14 := (not #13)
#54 := (iff #14 #51)
#35 := (not #9)
#36 := (or #35 #12)
#39 := (not #36)
#52 := (iff #39 #51)
#49 := (iff #36 #48)
#46 := (iff #35 #45)
#42 := (iff #9 #44)
#43 := [rewrite]: #42
#47 := [monotonicity #43]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#55 := [trans #41 #53]: #54
#34 := [asserted]: #14
#56 := [mp #34 #55]: #51
#59 := [not-or-elim #56]: #58
#65 := (or #10 #12)
#66 := [def-axiom]: #65
#64 := [unit-resolution #66 #59]: #10
#57 := [not-or-elim #56]: #44
#68 := (not #10)
#61 := (or #63 #68 #45)
#62 := [th-lemma arith triangle-eq]: #61
#71 := [unit-resolution #62 #57 #64]: #63
#73 := (= #11 f3)
#67 := (= f3 #11)
#69 := (or #68 #67)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #64]: #67
#74 := [symm #72]: #73
#75 := [trans #74 #71]: #12
[unit-resolution #59 #75]: false
unsat
269e3d24017640dc0306b86823b964d47dcf1328 124 0
#2 := false
#12 := 0::Int
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#38 := -1::Int
#40 := (* -1::Int f4)
#53 := (+ f3 #40)
#54 := (<= #53 0::Int)
#57 := (if #54 f3 f4)
#105 := (* -1::Int #57)
#106 := (+ f3 #105)
#108 := (>= #106 0::Int)
#93 := (= f3 #57)
#107 := (+ f4 #105)
#125 := (>= #107 0::Int)
#94 := (= f4 #57)
#95 := (not #54)
#136 := [hypothesis]: #95
#92 := (or #54 #94)
#89 := [def-axiom]: #92
#137 := [unit-resolution #89 #136]: #94
#128 := (not #94)
#129 := (or #128 #125)
#130 := [th-lemma arith triangle-eq]: #129
#138 := [unit-resolution #130 #137]: #125
#39 := (* -1::Int f3)
#41 := (+ #39 #40)
#11 := (+ f3 f4)
#60 := (>= #11 0::Int)
#67 := (if #60 #11 #41)
#75 := (* -1::Int #67)
#104 := (+ #41 #75)
#124 := (<= #104 0::Int)
#97 := (= #41 #67)
#61 := (not #60)
#109 := [hypothesis]: #60
#76 := (+ #57 #75)
#77 := (<= #76 0::Int)
#82 := (not #77)
#14 := (- #11)
#13 := (< #11 0::Int)
#15 := (if #13 #14 #11)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#16 := (<= #10 #15)
#17 := (not #16)
#85 := (iff #17 #82)
#44 := (if #13 #41 #11)
#47 := (<= #10 #44)
#50 := (not #47)
#83 := (iff #50 #82)
#80 := (iff #47 #77)
#72 := (<= #57 #67)
#78 := (iff #72 #77)
#79 := [rewrite]: #78
#73 := (iff #47 #72)
#70 := (= #44 #67)
#64 := (if #61 #41 #11)
#68 := (= #64 #67)
#69 := [rewrite]: #68
#65 := (= #44 #64)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#71 := [trans #66 #69]: #70
#58 := (= #10 #57)
#55 := (iff #9 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#74 := [monotonicity #59 #71]: #73
#81 := [trans #74 #79]: #80
#84 := [monotonicity #81]: #83
#51 := (iff #17 #50)
#48 := (iff #16 #47)
#45 := (= #15 #44)
#42 := (= #14 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#86 := [trans #52 #84]: #85
#37 := [asserted]: #17
#87 := [mp #37 #86]: #82
#122 := (or #95 #61)
#110 := [hypothesis]: #54
#96 := (or #95 #93)
#91 := [def-axiom]: #96
#111 := [unit-resolution #91 #110]: #93
#112 := (not #93)
#113 := (or #112 #108)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111]: #108
#102 := (+ #11 #75)
#103 := (<= #102 0::Int)
#90 := (= #11 #67)
#98 := (or #61 #90)
#99 := [def-axiom]: #98
#116 := [unit-resolution #99 #109]: #90
#117 := (not #90)
#118 := (or #117 #103)
#119 := [th-lemma arith triangle-eq]: #118
#120 := [unit-resolution #119 #116]: #103
#121 := [th-lemma arith farkas 2 2 2 1 1 #120 #115 #87 #110 #109]: false
#123 := [lemma #121]: #122
#126 := [unit-resolution #123 #109]: #95
#127 := [unit-resolution #89 #126]: #94
#131 := [unit-resolution #130 #127]: #125
#132 := [th-lemma arith farkas 2 2 1 2 1 #120 #131 #126 #87 #109]: false
#133 := [lemma #132]: #61
#100 := (or #60 #97)
#101 := [def-axiom]: #100
#139 := [unit-resolution #101 #133]: #97
#140 := (not #97)
#141 := (or #140 #124)
#142 := [th-lemma arith triangle-eq]: #141
#143 := [unit-resolution #142 #139]: #124
#144 := [th-lemma arith farkas 3/2 1/2 1 1 1 #133 #136 #87 #143 #138]: false
#145 := [lemma #144]: #54
#146 := [unit-resolution #91 #145]: #93
#147 := [unit-resolution #114 #146]: #108
[th-lemma arith farkas 1/2 3/2 1 1 1 #145 #133 #87 #143 #147]: false
unsat
1d8c0a442e62239de5b308a0ab90a7e051e0c053 57 0
#2 := false
#14 := 0::Int
decl f3 :: Int
#7 := f3
decl f4 :: Int
#8 := f4
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Int)
#42 := (if #39 f4 f3)
#48 := (* -1::Int #42)
#49 := (+ f3 #48)
#50 := (<= #49 0::Int)
#55 := (not #50)
#9 := (<= f3 f4)
#10 := (if #9 f4 f3)
#11 := (<= f3 #10)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #50)
#45 := (<= f3 #42)
#51 := (iff #45 #50)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#63 := (= f3 #42)
#64 := (not #39)
#68 := [hypothesis]: #39
#59 := (+ f4 #48)
#66 := (<= #59 0::Int)
#62 := (= f4 #42)
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#69 := [unit-resolution #60 #68]: #62
#70 := (not #62)
#71 := (or #70 #66)
#72 := [th-lemma arith triangle-eq]: #71
#73 := [unit-resolution #72 #69]: #66
#74 := [th-lemma arith farkas 1 -1 1 #73 #58 #68]: false
#75 := [lemma #74]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#76 := [unit-resolution #35 #75]: #63
#77 := (not #63)
#78 := (or #77 #50)
#79 := [th-lemma arith triangle-eq]: #78
[unit-resolution #79 #76 #58]: false
unsat
33356681256058514a33561c44762f0ba6ed5330 57 0
#2 := false
#14 := 0::Int
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#36 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#38 := (>= #40 0::Int)
#42 := (if #38 f3 f4)
#48 := (* -1::Int #42)
#59 := (+ f4 #48)
#72 := (<= #59 0::Int)
#63 := (= f4 #42)
#64 := (not #38)
#62 := (= f3 #42)
#67 := (not #62)
#49 := (+ f3 #48)
#50 := (<= #49 0::Int)
#55 := (not #50)
#9 := (<= f4 f3)
#10 := (if #9 f3 f4)
#11 := (<= f3 #10)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #50)
#45 := (<= f3 #42)
#51 := (iff #45 #50)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#37 := (iff #9 #38)
#41 := [rewrite]: #37
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#66 := [hypothesis]: #62
#68 := (or #67 #50)
#69 := [th-lemma arith triangle-eq]: #68
#70 := [unit-resolution #69 #66 #58]: false
#71 := [lemma #70]: #67
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#74 := [unit-resolution #60 #71]: #64
#61 := (or #38 #63)
#35 := [def-axiom]: #61
#75 := [unit-resolution #35 #74]: #63
#76 := (not #63)
#77 := (or #76 #72)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #75]: #72
[th-lemma arith farkas 1 1 1 #58 #74 #79]: false
unsat
f450c8992954aa7e8354d82bf2535ed9619b8684 103 0
#2 := false
#19 := 0::Int
decl f3 :: Int
#7 := f3
decl f5 :: Int
#10 := f5
#46 := -1::Int
#53 := (* -1::Int f5)
#65 := (+ f3 #53)
#66 := (<= #65 0::Int)
#69 := (if #66 f5 f3)
#75 := (* -1::Int #69)
decl f4 :: Int
#8 := f4
#76 := (+ f4 #75)
#77 := (<= #76 0::Int)
#78 := (not #77)
#54 := (+ f4 #53)
#55 := (<= #54 0::Int)
#56 := (not #55)
#49 := (* -1::Int f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Int)
#47 := (not #48)
#59 := (and #47 #56)
#62 := (not #59)
#83 := (or #62 #78)
#86 := (not #83)
#13 := (<= f3 f5)
#14 := (if #13 f5 f3)
#15 := (< #14 f4)
#11 := (< f5 f4)
#9 := (< f3 f4)
#12 := (and #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#89 := (iff #17 #86)
#39 := (not #12)
#40 := (or #39 #15)
#43 := (not #40)
#87 := (iff #43 #86)
#84 := (iff #40 #83)
#81 := (iff #15 #78)
#72 := (< #69 f4)
#79 := (iff #72 #78)
#80 := [rewrite]: #79
#73 := (iff #15 #72)
#70 := (= #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#82 := [trans #74 #80]: #81
#63 := (iff #39 #62)
#60 := (iff #12 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#51 := (iff #9 #47)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#85 := [monotonicity #64 #82]: #84
#88 := [monotonicity #85]: #87
#44 := (iff #17 #43)
#41 := (iff #16 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#90 := [trans #45 #88]: #89
#38 := [asserted]: #17
#91 := [mp #38 #90]: #86
#95 := [not-or-elim #91]: #77
#92 := [not-or-elim #91]: #59
#93 := [and-elim #92]: #47
#99 := (+ f3 #75)
#118 := (>= #99 0::Int)
#106 := (= f3 #69)
#107 := (not #66)
#105 := (= f5 #69)
#112 := (not #105)
#102 := (+ f5 #75)
#100 := (>= #102 0::Int)
#109 := (not #100)
#94 := [and-elim #92]: #56
#97 := [hypothesis]: #100
#98 := [th-lemma arith farkas -1 -1 1 #97 #94 #95]: false
#110 := [lemma #98]: #109
#111 := [hypothesis]: #105
#113 := (or #112 #100)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111 #110]: false
#116 := [lemma #115]: #112
#108 := (or #107 #105)
#103 := [def-axiom]: #108
#119 := [unit-resolution #103 #116]: #107
#104 := (or #66 #106)
#101 := [def-axiom]: #104
#120 := [unit-resolution #101 #119]: #106
#121 := (not #106)
#122 := (or #121 #118)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #118
[th-lemma arith farkas -1 1 1 #124 #93 #95]: false
unsat
dc09c2944521a51fac5d926e6bf8729bfa0f3e92 96 0
#2 := false
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#16 := 0::Int
#38 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#48 := (>= #40 0::Int)
#50 := (if #48 f3 f4)
#41 := (<= #40 0::Int)
#44 := (if #41 f4 f3)
#53 := (= #44 #50)
#60 := (= f3 #50)
#65 := (not #41)
#63 := (= f4 #44)
#107 := (not #63)
#67 := (= f4 #50)
#74 := (not #67)
#75 := [hypothesis]: #74
#71 := (or #48 #67)
#72 := [def-axiom]: #71
#76 := [unit-resolution #72 #75]: #48
#68 := (not #48)
#69 := (or #68 #60)
#70 := [def-axiom]: #69
#77 := [unit-resolution #70 #76]: #60
#97 := (= f4 f3)
#73 := (= f3 f4)
#64 := (= f3 #44)
#87 := (not #64)
#56 := (not #53)
#88 := (iff #56 #87)
#85 := (iff #53 #64)
#83 := (iff #64 #53)
#78 := (= #50 #44)
#81 := (iff #78 #53)
#82 := [commutativity]: #81
#79 := (iff #64 #78)
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#86 := [symm #84]: #85
#89 := [monotonicity #86]: #88
#11 := (<= f4 f3)
#12 := (if #11 f3 f4)
#9 := (<= f3 f4)
#10 := (if #9 f4 f3)
#13 := (= #10 #12)
#14 := (not #13)
#57 := (iff #14 #56)
#54 := (iff #13 #53)
#51 := (= #12 #50)
#47 := (iff #11 #48)
#49 := [rewrite]: #47
#52 := [monotonicity #49]: #51
#45 := (= #10 #44)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#55 := [monotonicity #46 #52]: #54
#58 := [monotonicity #55]: #57
#35 := [asserted]: #14
#59 := [mp #35 #58]: #56
#90 := [mp #59 #89]: #87
#62 := (or #41 #64)
#37 := [def-axiom]: #62
#91 := [unit-resolution #37 #90]: #41
#94 := (or #73 #65)
#92 := (or #73 #65 #68)
#93 := [th-lemma arith triangle-eq]: #92
#95 := [unit-resolution #93 #76]: #94
#96 := [unit-resolution #95 #91]: #73
#98 := [symm #96]: #97
#99 := [trans #98 #77]: #67
#100 := [unit-resolution #75 #99]: false
#101 := [lemma #100]: #67
#103 := (= #44 f4)
#102 := [hypothesis]: #63
#104 := [symm #102]: #103
#105 := [trans #104 #101]: #53
#106 := [unit-resolution #59 #105]: false
#108 := [lemma #106]: #107
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#109 := [unit-resolution #61 #108]: #65
#111 := (or #48 #41)
#112 := [th-lemma arith farkas 1 1]: #111
#113 := [unit-resolution #112 #109]: #48
#114 := [unit-resolution #70 #113]: #60
#117 := (= #44 f3)
#110 := [unit-resolution #37 #109]: #64
#118 := [symm #110]: #117
#119 := [trans #118 #114]: #53
[unit-resolution #59 #119]: false
unsat
3742caaf5383415a6af8d6cc983e20de965a2c95 60 0
#2 := false
decl f3 :: Int
#8 := f3
#7 := 0::Int
#10 := (<= f3 0::Int)
#11 := (if #10 0::Int f3)
#68 := (= f3 #11)
#80 := (= 0::Int #11)
#67 := (= #11 0::Int)
#71 := (not #68)
#12 := (= #11 f3)
#58 := (not #12)
#72 := (iff #58 #71)
#61 := (iff #12 #68)
#62 := [commutativity]: #61
#73 := [monotonicity #62]: #72
#44 := (>= f3 0::Int)
#45 := (not #44)
#48 := (or #45 #12)
#51 := (not #48)
#9 := (<= 0::Int f3)
#13 := (implies #9 #12)
#14 := (not #13)
#54 := (iff #14 #51)
#35 := (not #9)
#36 := (or #35 #12)
#39 := (not #36)
#52 := (iff #39 #51)
#49 := (iff #36 #48)
#46 := (iff #35 #45)
#42 := (iff #9 #44)
#43 := [rewrite]: #42
#47 := [monotonicity #43]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#55 := [trans #41 #53]: #54
#34 := [asserted]: #14
#56 := [mp #34 #55]: #51
#59 := [not-or-elim #56]: #58
#74 := [mp #59 #73]: #71
#66 := (or #10 #68)
#63 := [def-axiom]: #66
#75 := [unit-resolution #63 #74]: #10
#69 := (not #10)
#70 := (or #69 #67)
#65 := [def-axiom]: #70
#76 := [unit-resolution #65 #75]: #67
#81 := [symm #76]: #80
#64 := (= f3 0::Int)
#57 := [not-or-elim #56]: #44
#77 := (or #64 #69 #45)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #57 #75]: #64
#82 := [trans #79 #81]: #68
[unit-resolution #74 #82]: false
unsat
2fb3cafc864ef15c2b5fc68d255cca5586a02215 214 0
#2 := false
#8 := 0::Int
decl f4 :: Int
#13 := f4
#42 := -1::Int
#57 := (* -1::Int f4)
#93 := (>= f4 0::Int)
#100 := (if #93 f4 #57)
#105 := (* -1::Int #100)
#160 := (+ #57 #105)
#182 := (<= #160 0::Int)
#136 := (= #57 #100)
#94 := (not #93)
decl f3 :: Int
#7 := f3
#111 := (+ f3 #57)
#112 := (<= #111 0::Int)
#115 := (if #112 f4 f3)
#154 := (* -1::Int #115)
#155 := (+ f4 #154)
#156 := (<= #155 0::Int)
#157 := (+ f3 #154)
#192 := (<= #157 0::Int)
#148 := (= f3 #115)
#149 := (not #112)
#147 := (= f4 #115)
#194 := [hypothesis]: #112
#150 := (or #149 #147)
#151 := [def-axiom]: #150
#195 := [unit-resolution #151 #194]: #147
#196 := (not #147)
#197 := (or #196 #156)
#198 := [th-lemma arith triangle-eq]: #197
#199 := [unit-resolution #198 #195]: #156
#178 := (not #156)
#190 := (or #94 #178)
#158 := (+ f4 #105)
#159 := (<= #158 0::Int)
#135 := (= f4 #100)
#164 := [hypothesis]: #93
#143 := (or #94 #135)
#144 := [def-axiom]: #143
#165 := [unit-resolution #144 #164]: #135
#166 := (not #135)
#167 := (or #166 #159)
#168 := [th-lemma arith triangle-eq]: #167
#169 := [unit-resolution #168 #165]: #159
#78 := (>= f3 0::Int)
#79 := (not #78)
#176 := [hypothesis]: #156
#179 := (or #79 #94 #178)
#124 := (+ #100 #115)
#43 := (* -1::Int f3)
#85 := (if #78 f3 #43)
#125 := (+ #85 #124)
#122 := (>= #125 0::Int)
#128 := (not #122)
#18 := (<= f3 f4)
#19 := (if #18 f4 f3)
#15 := (- f4)
#14 := (< f4 0::Int)
#16 := (if #14 #15 f4)
#10 := (- f3)
#9 := (< f3 0::Int)
#11 := (if #9 #10 f3)
#12 := (- #11)
#17 := (- #12 #16)
#20 := (<= #17 #19)
#21 := (not #20)
#131 := (iff #21 #128)
#60 := (if #14 #57 f4)
#66 := (* -1::Int #60)
#46 := (if #9 #43 f3)
#52 := (* -1::Int #46)
#67 := (+ #52 #66)
#72 := (<= #67 #19)
#75 := (not #72)
#129 := (iff #75 #128)
#126 := (iff #72 #122)
#90 := (* -1::Int #85)
#108 := (+ #90 #105)
#118 := (<= #108 #115)
#121 := (iff #118 #122)
#123 := [rewrite]: #121
#119 := (iff #72 #118)
#116 := (= #19 #115)
#113 := (iff #18 #112)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#109 := (= #67 #108)
#106 := (= #66 #105)
#103 := (= #60 #100)
#97 := (if #94 #57 f4)
#101 := (= #97 #100)
#102 := [rewrite]: #101
#98 := (= #60 #97)
#95 := (iff #14 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#104 := [trans #99 #102]: #103
#107 := [monotonicity #104]: #106
#91 := (= #52 #90)
#88 := (= #46 #85)
#82 := (if #79 #43 f3)
#86 := (= #82 #85)
#87 := [rewrite]: #86
#83 := (= #46 #82)
#80 := (iff #9 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#110 := [monotonicity #92 #107]: #109
#120 := [monotonicity #110 #117]: #119
#127 := [trans #120 #123]: #126
#130 := [monotonicity #127]: #129
#76 := (iff #21 #75)
#73 := (iff #20 #72)
#70 := (= #17 #67)
#63 := (- #52 #60)
#68 := (= #63 #67)
#69 := [rewrite]: #68
#64 := (= #17 #63)
#61 := (= #16 #60)
#58 := (= #15 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#55 := (= #12 #52)
#49 := (- #46)
#53 := (= #49 #52)
#54 := [rewrite]: #53
#50 := (= #12 #49)
#47 := (= #11 #46)
#44 := (= #10 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#65 := [monotonicity #56 #62]: #64
#71 := [trans #65 #69]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#132 := [trans #77 #130]: #131
#41 := [asserted]: #21
#133 := [mp #41 #132]: #128
#161 := (+ f3 #90)
#162 := (<= #161 0::Int)
#139 := (= f3 #85)
#170 := [hypothesis]: #78
#141 := (or #79 #139)
#142 := [def-axiom]: #141
#171 := [unit-resolution #142 #170]: #139
#172 := (not #139)
#173 := (or #172 #162)
#174 := [th-lemma arith triangle-eq]: #173
#175 := [unit-resolution #174 #171]: #162
#177 := [th-lemma arith farkas -2 1 -1 1 1 1 #164 #176 #170 #175 #133 #169]: false
#180 := [lemma #177]: #179
#183 := [unit-resolution #180 #164 #176]: #79
#163 := (+ #43 #90)
#181 := (<= #163 0::Int)
#140 := (= #43 #85)
#137 := (or #78 #140)
#138 := [def-axiom]: #137
#184 := [unit-resolution #138 #183]: #140
#185 := (not #140)
#186 := (or #185 #181)
#187 := [th-lemma arith triangle-eq]: #186
#188 := [unit-resolution #187 #184]: #181
#189 := [th-lemma arith farkas 2 1 1 1 1 1 #164 #176 #133 #188 #183 #169]: false
#191 := [lemma #189]: #190
#200 := [unit-resolution #191 #199]: #94
#145 := (or #93 #136)
#146 := [def-axiom]: #145
#201 := [unit-resolution #146 #200]: #136
#202 := (not #136)
#203 := (or #202 #182)
#204 := [th-lemma arith triangle-eq]: #203
#205 := [unit-resolution #204 #201]: #182
#206 := (or #79 #149 #93)
#207 := [th-lemma arith assign-bounds 1 1]: #206
#208 := [unit-resolution #207 #200 #194]: #79
#209 := [unit-resolution #138 #208]: #140
#210 := [unit-resolution #187 #209]: #181
#211 := [th-lemma arith farkas 1 1 1 1 1 #199 #133 #210 #208 #205]: false
#212 := [lemma #211]: #149
#152 := (or #112 #148)
#153 := [def-axiom]: #152
#223 := [unit-resolution #153 #212]: #148
#224 := (not #148)
#225 := (or #224 #192)
#226 := [th-lemma arith triangle-eq]: #225
#227 := [unit-resolution #226 #223]: #192
#230 := (not #192)
#231 := (or #156 #112 #230)
#232 := [th-lemma arith assign-bounds 1 1]: #231
#233 := [unit-resolution #232 #212 #227]: #156
#234 := [unit-resolution #191 #233]: #94
#235 := [unit-resolution #146 #234]: #136
#236 := [unit-resolution #204 #235]: #182
#215 := [hypothesis]: #79
#216 := (or #94 #78 #112)
#217 := [th-lemma arith assign-bounds 1 1]: #216
#218 := [unit-resolution #217 #215 #212]: #94
#219 := [unit-resolution #146 #218]: #136
#220 := [unit-resolution #204 #219]: #182
#221 := [unit-resolution #138 #215]: #140
#222 := [unit-resolution #187 #221]: #181
#228 := [th-lemma arith farkas 1 1 1 1 1 1 #215 #212 #227 #133 #222 #220]: false
#229 := [lemma #228]: #78
#237 := [unit-resolution #142 #229]: #139
#238 := [unit-resolution #174 #237]: #162
[th-lemma arith farkas 1 1 1 1 1 1 #212 #227 #133 #229 #238 #236]: false
unsat
6d267e11bf9368fb47a07436e29a6e62106843a6 53 0
#2 := false
#10 := 1::Int
decl f3 :: Int
#8 := f3
#76 := (>= f3 1::Int)
#78 := (not #76)
#13 := (= f3 1::Int)
#65 := (not #13)
#11 := (<= f3 1::Int)
#7 := 0::Int
#43 := (<= f3 0::Int)
#44 := (not #43)
#47 := (and #44 #11)
#50 := (not #47)
#53 := (or #50 #13)
#56 := (not #53)
#9 := (< 0::Int f3)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#59 := (iff #15 #56)
#36 := (not #12)
#37 := (or #36 #13)
#40 := (not #37)
#57 := (iff #40 #56)
#54 := (iff #37 #53)
#51 := (iff #36 #50)
#48 := (iff #12 #47)
#45 := (iff #9 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#60 := [trans #42 #58]: #59
#35 := [asserted]: #15
#61 := [mp #35 #60]: #56
#66 := [not-or-elim #61]: #65
#75 := (or #13 #78)
#62 := [not-or-elim #61]: #47
#64 := [and-elim #62]: #11
#77 := (not #11)
#79 := (or #13 #77 #78)
#74 := [th-lemma arith triangle-eq]: #79
#72 := [unit-resolution #74 #64]: #75
#73 := [unit-resolution #72 #66]: #78
#63 := [and-elim #62]: #44
[th-lemma arith farkas 1 1 #63 #73]: false
unsat
fa8bb7c26f623612658531ec8179e791dc02e2b0 18 0
#2 := false
decl f3 :: Int
#7 := f3
#8 := (<= f3 f3)
#9 := (not #8)
#40 := (iff #9 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #9 #35)
#33 := (iff #8 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #9
[mp #30 #41]: false
unsat
c500db7a265d55897d1b4a11d5a17d5998ebe9ba 51 0
#2 := false
decl f4 :: Int
#8 := f4
#10 := 3::Int
#12 := (* 3::Int f4)
decl f3 :: Int
#7 := f3
#11 := (* 3::Int f3)
#13 := (<= #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#69 := (iff #15 false)
#37 := (not #9)
#38 := (or #37 #13)
#41 := (not #38)
#67 := (iff #41 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #41 #62)
#60 := (iff #38 true)
#17 := 0::Int
#44 := -1::Int
#45 := (* -1::Int f4)
#46 := (+ f3 #45)
#47 := (<= #46 0::Int)
#50 := (not #47)
#55 := (or #50 #47)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #38 #55)
#53 := (iff #13 #47)
#54 := [rewrite]: #53
#51 := (iff #37 #50)
#48 := (iff #9 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#57 := [monotonicity #52 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#70 := [trans #43 #68]: #69
#36 := [asserted]: #15
[mp #36 #70]: false
unsat
9ac1771d791a430d0a7637ac3d9b4ab1780df97b 56 0
#2 := false
decl f4 :: Int
#8 := f4
#10 := 3::Int
#12 := (* 3::Int f4)
decl f3 :: Int
#7 := f3
#11 := (* 3::Int f3)
#13 := (< #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#74 := (iff #15 false)
#37 := (not #9)
#38 := (or #37 #13)
#41 := (not #38)
#72 := (iff #41 false)
#1 := true
#67 := (not true)
#70 := (iff #67 false)
#71 := [rewrite]: #70
#68 := (iff #41 #67)
#65 := (iff #38 true)
#17 := 0::Int
#44 := -1::Int
#47 := (* -1::Int f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::Int)
#45 := (not #46)
#59 := (or #46 #45)
#63 := (iff #59 true)
#64 := [rewrite]: #63
#61 := (iff #38 #59)
#60 := (iff #13 #45)
#58 := [rewrite]: #60
#56 := (iff #37 #46)
#51 := (not #45)
#54 := (iff #51 #46)
#55 := [rewrite]: #54
#52 := (iff #37 #51)
#49 := (iff #9 #45)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#62 := [monotonicity #57 #58]: #61
#66 := [trans #62 #64]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#75 := [trans #43 #73]: #74
#36 := [asserted]: #15
[mp #36 #75]: false
unsat
0d0dc16c86e745f503bac8f1609551cac0dec35b 52 0
#2 := false
#14 := 0::Int
decl f4 :: Int
#8 := f4
#41 := -1::Int
#44 := (* -1::Int f4)
decl f3 :: Int
#7 := f3
#45 := (+ f3 #44)
#55 := (<= #45 0::Int)
#68 := (not #55)
#43 := (>= #45 0::Int)
#58 := (or #43 #55)
#61 := (not #58)
#10 := (<= f3 f4)
#9 := (< f3 f4)
#11 := (implies #9 #10)
#12 := (not #11)
#64 := (iff #12 #61)
#34 := (not #9)
#35 := (or #34 #10)
#38 := (not #35)
#62 := (iff #38 #61)
#59 := (iff #35 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#53 := (iff #34 #43)
#42 := (not #43)
#48 := (not #42)
#51 := (iff #48 #43)
#52 := [rewrite]: #51
#49 := (iff #34 #48)
#46 := (iff #9 #42)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#60 := [monotonicity #54 #57]: #59
#63 := [monotonicity #60]: #62
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#65 := [trans #40 #63]: #64
#33 := [asserted]: #12
#66 := [mp #33 #65]: #61
#69 := [not-or-elim #66]: #68
#67 := [not-or-elim #66]: #42
#77 := (or #55 #43)
#78 := [th-lemma arith farkas 1 1]: #77
#79 := [unit-resolution #78 #67]: #55
[unit-resolution #79 #69]: false
unsat
e17223976134e90d22d663b546f65c41ad005eb7 73 0
#2 := false
#54 := -1::Int
decl f4 :: Int
#8 := f4
#57 := (* -1::Int f4)
decl f3 :: Int
#7 := f3
#58 := (+ f3 #57)
#68 := (<= #58 -1::Int)
#16 := 0::Int
#56 := (>= #58 0::Int)
#55 := (not #56)
#82 := (not #68)
#88 := [hypothesis]: #82
#86 := (or #55 #68)
#71 := (iff #56 #68)
#10 := 1::Int
#11 := (+ f3 1::Int)
#12 := (<= #11 f4)
#9 := (< f3 f4)
#13 := (iff #9 #12)
#14 := (not #13)
#74 := (iff #14 #71)
#36 := (+ 1::Int f3)
#39 := (<= #36 f4)
#48 := (not #9)
#49 := (iff #48 #39)
#72 := (iff #49 #71)
#69 := (iff #39 #68)
#70 := [rewrite]: #69
#66 := (iff #48 #56)
#61 := (not #55)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #48 #61)
#59 := (iff #9 #55)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#73 := [monotonicity #67 #70]: #72
#52 := (iff #14 #49)
#42 := (iff #9 #39)
#45 := (not #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#75 := [trans #53 #73]: #74
#35 := [asserted]: #14
#76 := [mp #35 #75]: #71
#83 := (not #71)
#78 := (or #55 #68 #83)
#79 := [def-axiom]: #78
#87 := [unit-resolution #79 #76]: #86
#89 := [unit-resolution #87 #88]: #55
#90 := [th-lemma arith farkas 1 1 #88 #89]: false
#91 := [lemma #90]: #68
#92 := (or #82 #55)
#93 := [th-lemma arith farkas 1 1]: #92
#94 := [unit-resolution #93 #91]: #55
#80 := (or #56 #82)
#84 := (or #56 #82 #83)
#85 := [def-axiom]: #84
#81 := [unit-resolution #85 #76]: #80
[unit-resolution #81 #94 #91]: false
unsat
c2029d4b6a4d4114a4b031b834e2a253b97e4371 15 0
#2 := false
decl f3 :: Int
#7 := f3
#8 := (< f3 f3)
#9 := (not #8)
#10 := (not #9)
#36 := (iff #10 false)
#34 := (iff #8 false)
#35 := [rewrite]: #34
#32 := (iff #10 #8)
#33 := [rewrite]: #32
#37 := [trans #33 #35]: #36
#31 := [asserted]: #10
[mp #31 #37]: false
unsat
28e1620c910a232c81f0832f349f8c958506720d 75 0
#2 := false
#17 := 0::Int
decl f5 :: Int
#10 := f5
#53 := -1::Int
#54 := (* -1::Int f5)
decl f4 :: Int
#8 := f4
#55 := (+ f4 #54)
#56 := (<= #55 0::Int)
decl f3 :: Int
#7 := f3
#62 := (+ f3 #54)
#63 := (<= #62 0::Int)
#59 := (not #56)
#66 := (* -1::Int f4)
#67 := (+ f3 #66)
#68 := (<= #67 0::Int)
#71 := (not #68)
#80 := (or #71 #59 #63)
#85 := (not #80)
#12 := (<= f3 f5)
#11 := (<= f4 f5)
#13 := (implies #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#88 := (iff #15 #85)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#86 := (iff #50 #85)
#83 := (iff #45 #80)
#74 := (or #59 #63)
#77 := (or #71 #74)
#81 := (iff #77 #80)
#82 := [rewrite]: #81
#78 := (iff #45 #77)
#75 := (iff #38 #74)
#64 := (iff #12 #63)
#65 := [rewrite]: #64
#60 := (iff #37 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#76 := [monotonicity #61 #65]: #75
#72 := (iff #44 #71)
#69 := (iff #9 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#79 := [monotonicity #73 #76]: #78
#84 := [trans #79 #82]: #83
#87 := [monotonicity #84]: #86
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#89 := [trans #52 #87]: #88
#36 := [asserted]: #15
#90 := [mp #36 #89]: #85
#92 := [not-or-elim #90]: #56
#93 := (not #63)
#94 := [not-or-elim #90]: #93
#91 := [not-or-elim #90]: #68
[th-lemma arith farkas 1 -1 1 #91 #94 #92]: false
unsat
dac056ed6e93880024b69dbec647c1c9343924fe 80 0
#2 := false
#17 := 0::Int
decl f5 :: Int
#10 := f5
#53 := -1::Int
#54 := (* -1::Int f5)
decl f4 :: Int
#8 := f4
#55 := (+ f4 #54)
#56 := (<= #55 0::Int)
decl f3 :: Int
#7 := f3
#62 := (+ f3 #54)
#63 := (<= #62 0::Int)
#59 := (not #56)
#68 := (* -1::Int f4)
#69 := (+ f3 #68)
#67 := (>= #69 0::Int)
#85 := (or #67 #59 #63)
#90 := (not #85)
#12 := (<= f3 f5)
#11 := (<= f4 f5)
#13 := (implies #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#93 := (iff #15 #90)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#91 := (iff #50 #90)
#88 := (iff #45 #85)
#79 := (or #59 #63)
#82 := (or #67 #79)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #45 #82)
#80 := (iff #38 #79)
#64 := (iff #12 #63)
#65 := [rewrite]: #64
#60 := (iff #37 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#81 := [monotonicity #61 #65]: #80
#77 := (iff #44 #67)
#66 := (not #67)
#72 := (not #66)
#75 := (iff #72 #67)
#76 := [rewrite]: #75
#73 := (iff #44 #72)
#70 := (iff #9 #66)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#84 := [monotonicity #78 #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#94 := [trans #52 #92]: #93
#36 := [asserted]: #15
#95 := [mp #36 #94]: #90
#97 := [not-or-elim #95]: #56
#96 := [not-or-elim #95]: #66
#98 := (not #63)
#99 := [not-or-elim #95]: #98
[th-lemma arith farkas 1 1 1 #99 #96 #97]: false
unsat
a8974893df200f396c634d964eb984c48eec55db 80 0
#2 := false
#17 := 0::Int
decl f5 :: Int
#10 := f5
#53 := -1::Int
#56 := (* -1::Int f5)
decl f3 :: Int
#7 := f3
#67 := (+ f3 #56)
#68 := (<= #67 0::Int)
#98 := (not #68)
decl f4 :: Int
#8 := f4
#57 := (+ f4 #56)
#55 := (>= #57 0::Int)
#71 := (* -1::Int f4)
#72 := (+ f3 #71)
#73 := (<= #72 0::Int)
#76 := (not #73)
#85 := (or #76 #55 #68)
#90 := (not #85)
#12 := (<= f3 f5)
#11 := (< f4 f5)
#13 := (implies #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#93 := (iff #15 #90)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#91 := (iff #50 #90)
#88 := (iff #45 #85)
#79 := (or #55 #68)
#82 := (or #76 #79)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #45 #82)
#80 := (iff #38 #79)
#69 := (iff #12 #68)
#70 := [rewrite]: #69
#65 := (iff #37 #55)
#54 := (not #55)
#60 := (not #54)
#63 := (iff #60 #55)
#64 := [rewrite]: #63
#61 := (iff #37 #60)
#58 := (iff #11 #54)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#81 := [monotonicity #66 #70]: #80
#77 := (iff #44 #76)
#74 := (iff #9 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#84 := [monotonicity #78 #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#94 := [trans #52 #92]: #93
#36 := [asserted]: #15
#95 := [mp #36 #94]: #90
#99 := [not-or-elim #95]: #98
#97 := [not-or-elim #95]: #54
#96 := [not-or-elim #95]: #73
[th-lemma arith farkas 1 1 1 #96 #97 #99]: false
unsat
b7e0a4eabb9a618e1df287bffee02d5551032ee6 85 0
#2 := false
#17 := 0::Int
decl f5 :: Int
#10 := f5
#53 := -1::Int
#56 := (* -1::Int f5)
decl f3 :: Int
#7 := f3
#69 := (+ f3 #56)
#68 := (>= #69 0::Int)
#67 := (not #68)
decl f4 :: Int
#8 := f4
#57 := (+ f4 #56)
#55 := (>= #57 0::Int)
#74 := (* -1::Int f4)
#75 := (+ f3 #74)
#73 := (>= #75 0::Int)
#91 := (or #73 #55 #67)
#96 := (not #91)
#12 := (< f3 f5)
#11 := (< f4 f5)
#13 := (implies #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#99 := (iff #15 #96)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#97 := (iff #50 #96)
#94 := (iff #45 #91)
#85 := (or #55 #67)
#88 := (or #73 #85)
#92 := (iff #88 #91)
#93 := [rewrite]: #92
#89 := (iff #45 #88)
#86 := (iff #38 #85)
#70 := (iff #12 #67)
#71 := [rewrite]: #70
#65 := (iff #37 #55)
#54 := (not #55)
#60 := (not #54)
#63 := (iff #60 #55)
#64 := [rewrite]: #63
#61 := (iff #37 #60)
#58 := (iff #11 #54)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#87 := [monotonicity #66 #71]: #86
#83 := (iff #44 #73)
#72 := (not #73)
#78 := (not #72)
#81 := (iff #78 #73)
#82 := [rewrite]: #81
#79 := (iff #44 #78)
#76 := (iff #9 #72)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#90 := [monotonicity #84 #87]: #89
#95 := [trans #90 #93]: #94
#98 := [monotonicity #95]: #97
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#100 := [trans #52 #98]: #99
#36 := [asserted]: #15
#101 := [mp #36 #100]: #96
#104 := [not-or-elim #101]: #68
#103 := [not-or-elim #101]: #54
#102 := [not-or-elim #101]: #72
[th-lemma arith farkas 1 1 1 #102 #103 #104]: false
unsat
0d64561170d5f7666bfabd32ae1c1b5265d931e6 69 0
#2 := false
#18 := 0::Int
decl f5 :: Int
#10 := f5
#45 := -1::Int
#53 := (* -1::Int f5)
decl f3 :: Int
#7 := f3
#64 := (+ f3 #53)
#65 := (<= #64 0::Int)
#66 := (not #65)
decl f4 :: Int
#8 := f4
#54 := (+ f4 #53)
#52 := (>= #54 0::Int)
#55 := (not #52)
#48 := (* -1::Int f4)
#49 := (+ f3 #48)
#47 := (>= #49 0::Int)
#46 := (not #47)
#58 := (and #46 #55)
#61 := (not #58)
#76 := (or #61 #65)
#79 := (not #76)
#13 := (< f5 f3)
#14 := (not #13)
#11 := (< f4 f5)
#9 := (< f3 f4)
#12 := (and #9 #11)
#15 := (implies #12 #14)
#16 := (not #15)
#82 := (iff #16 #79)
#38 := (not #12)
#39 := (or #38 #14)
#42 := (not #39)
#80 := (iff #42 #79)
#77 := (iff #39 #76)
#74 := (iff #14 #65)
#69 := (not #66)
#72 := (iff #69 #65)
#73 := [rewrite]: #72
#70 := (iff #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#62 := (iff #38 #61)
#59 := (iff #12 #58)
#56 := (iff #11 #55)
#57 := [rewrite]: #56
#50 := (iff #9 #46)
#51 := [rewrite]: #50
#60 := [monotonicity #51 #57]: #59
#63 := [monotonicity #60]: #62
#78 := [monotonicity #63 #75]: #77
#81 := [monotonicity #78]: #80
#43 := (iff #16 #42)
#40 := (iff #15 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#83 := [trans #44 #81]: #82
#37 := [asserted]: #16
#84 := [mp #37 #83]: #79
#88 := [not-or-elim #84]: #66
#85 := [not-or-elim #84]: #58
#87 := [and-elim #85]: #55
#86 := [and-elim #85]: #46
[th-lemma arith farkas 1 1 1 #86 #87 #88]: false
unsat
af0350f575bb011825d92c6b725b23ef78ce1fa1 17 0
#2 := false
#7 := 0::Real
#8 := (= 0::Real 0::Real)
#9 := (not #8)
#37 := (iff #9 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
1ef636a83dafea60626dc36221ab0791106b1afd 25 0
#2 := false
#7 := 0::Real
#8 := (- 0::Real)
#9 := (= 0::Real #8)
#10 := (not #9)
#45 := (iff #10 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#38 := (iff #9 true)
#33 := (= 0::Real 0::Real)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (= #8 0::Real)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #10
[mp #30 #46]: false
unsat
40be88f85c9e0db481ad8ec82bd95178d7fea9fc 17 0
#2 := false
#7 := 1::Real
#8 := (= 1::Real 1::Real)
#9 := (not #8)
#38 := (iff #9 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #9
[mp #30 #39]: false
unsat
158b50cd7a5340c24e2fc62138c985348713654b 34 0
#2 := false
#7 := 1::Real
#8 := (- 1::Real)
#9 := (= #8 1::Real)
#10 := (not #9)
#11 := (not #10)
#55 := (iff #11 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #11 #50)
#48 := (iff #10 true)
#43 := (not false)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #10 #43)
#41 := (iff #9 false)
#33 := -1::Real
#36 := (= -1::Real 1::Real)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #9 #36)
#34 := (= #8 -1::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#32 := [asserted]: #11
[mp #32 #56]: false
unsat
6f5d484ec7cfad7af7977254dc019939ebd214cc 18 0
#2 := false
#8 := 1::Real
#7 := 0::Real
#9 := (< 0::Real 1::Real)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
e4647906bb792263dfef92dd4a04fd86cf8efa48 18 0
#2 := false
#8 := 1::Real
#7 := 0::Real
#9 := (<= 0::Real 1::Real)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
6c6a35c4c4c8290ce89a1005e8de2a68e38ab9f1 40 0
#2 := false
#11 := 567::Real
#9 := 345::Real
#7 := 123::Real
#8 := (- 123::Real)
#10 := (+ #8 345::Real)
#12 := (< #10 567::Real)
#13 := (not #12)
#61 := (iff #13 false)
#41 := 222::Real
#46 := (< 222::Real 567::Real)
#49 := (not #46)
#59 := (iff #49 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #49 #54)
#52 := (iff #46 true)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#50 := (iff #13 #49)
#47 := (iff #12 #46)
#44 := (= #10 222::Real)
#35 := -123::Real
#38 := (+ -123::Real 345::Real)
#42 := (= #38 222::Real)
#43 := [rewrite]: #42
#39 := (= #10 #38)
#36 := (= #8 -123::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#62 := [trans #51 #60]: #61
#34 := [asserted]: #13
[mp #34 #62]: false
unsat
6cd7f01d0158fe1b48c671f1634290b4c3d0362e 18 0
#2 := false
#8 := 2345678901::Real
#7 := 123456789::Real
#9 := (< 123456789::Real 2345678901::Real)
#10 := (not #9)
#41 := (iff #10 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (iff #9 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #10
[mp #31 #42]: false
unsat
bd73a6ae0433b55288108717d8c4076884cd2760 30 0
#2 := false
#9 := 2345678901::Real
#7 := 123456789::Real
#8 := (- 123456789::Real)
#10 := (< #8 2345678901::Real)
#11 := (not #10)
#51 := (iff #11 false)
#33 := -123456789::Real
#36 := (< -123456789::Real 2345678901::Real)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (= #8 -123456789::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #11
[mp #32 #52]: false
unsat
cb2f1c021f02a4a0896a377a14007ceda9f3dfef 26 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := 0::Real
#9 := (+ f3 0::Real)
#10 := (= #9 f3)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= f3 f3)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
df95853dfdf63ff909e7c1d6374a552556297148 26 0
#2 := false
decl f3 :: Real
#8 := f3
#7 := 0::Real
#9 := (+ 0::Real f3)
#10 := (= #9 f3)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= f3 f3)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
38e4ae2664df97269d895a97d6a0913820867eda 29 0
#2 := false
decl f3 :: Real
#7 := f3
decl f4 :: Real
#8 := f4
#10 := (+ f4 f3)
#9 := (+ f3 f4)
#11 := (= #9 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (= #9 #9)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (= #10 #9)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
fdc6d9651e9ea1edb706f73f48fa04bf1897ffad 33 0
#2 := false
decl f5 :: Real
#9 := f5
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#12 := (+ f3 f4)
#13 := (+ #12 f5)
#10 := (+ f4 f5)
#11 := (+ f3 #10)
#14 := (= #11 #13)
#15 := (not #14)
#51 := (iff #15 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #15 #46)
#44 := (iff #14 true)
#39 := (= #11 #11)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #14 #39)
#37 := (= #13 #11)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#36 := [asserted]: #15
[mp #36 #52]: false
unsat
b90b5c8c12f8e63f42b7158cdc22e7616d773fed 45 0
#2 := false
decl f4 :: Real
#8 := f4
#12 := (- f4)
decl f3 :: Real
#7 := f3
#13 := (= f3 #12)
#10 := 0::Real
#9 := (+ f3 f4)
#11 := (= #9 0::Real)
#14 := (iff #11 #13)
#15 := (not #14)
#64 := (iff #15 false)
#36 := -1::Real
#37 := (* -1::Real f4)
#40 := (= f3 #37)
#49 := (not #11)
#50 := (iff #49 #40)
#62 := (iff #50 false)
#57 := (iff #49 #11)
#60 := (iff #57 false)
#61 := [rewrite]: #60
#58 := (iff #50 #57)
#55 := (iff #40 #11)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#53 := (iff #15 #50)
#43 := (iff #11 #40)
#46 := (not #43)
#51 := (iff #46 #50)
#52 := [rewrite]: #51
#47 := (iff #15 #46)
#44 := (iff #14 #43)
#41 := (iff #13 #40)
#38 := (= #12 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#54 := [trans #48 #52]: #53
#65 := [trans #54 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
44508c3b99ed3ca47c812dcb3cd063b1955bb40d 26 0
#2 := false
#7 := 1::Real
#8 := (- 1::Real)
#9 := (= #8 #8)
#10 := (not #9)
#47 := (iff #10 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #10 #42)
#40 := (iff #9 true)
#32 := -1::Real
#35 := (= -1::Real -1::Real)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #9 #35)
#33 := (= #8 -1::Real)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #10
[mp #31 #48]: false
unsat
fce41356fa222cd0ad9967bcbb1e367080f22540 26 0
#2 := false
#7 := 3::Real
#8 := (- 3::Real)
#9 := (= #8 #8)
#10 := (not #9)
#47 := (iff #10 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #10 #42)
#40 := (iff #9 true)
#32 := -3::Real
#35 := (= -3::Real -3::Real)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #9 #35)
#33 := (= #8 -3::Real)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #10
[mp #31 #48]: false
unsat
f92b0a53b26261788a99f1f102e26adc2affa71b 53 0
#2 := false
decl f3 :: Real
#7 := f3
#9 := 0::Real
#11 := (< 0::Real f3)
#8 := (- f3)
#10 := (< #8 0::Real)
#12 := (iff #10 #11)
#13 := (not #12)
#73 := (iff #13 false)
#34 := -1::Real
#35 := (* -1::Real f3)
#38 := (< #35 0::Real)
#47 := (not #38)
#48 := (iff #47 #11)
#71 := (iff #48 false)
#53 := (<= f3 0::Real)
#54 := (not #53)
#66 := (iff #53 #54)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #48 #66)
#64 := (iff #11 #54)
#65 := [rewrite]: #64
#62 := (iff #47 #53)
#57 := (not #54)
#60 := (iff #57 #53)
#61 := [rewrite]: #60
#58 := (iff #47 #57)
#55 := (iff #38 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#51 := (iff #13 #48)
#41 := (iff #38 #11)
#44 := (not #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (iff #10 #38)
#36 := (= #8 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#74 := [trans #52 #72]: #73
#33 := [asserted]: #13
[mp #33 #74]: false
unsat
947dbc99dc836af0697bbc290f76c877a29a0775 61 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#10 := (- f3)
#11 := (< #10 0::Real)
#9 := (< 0::Real f3)
#12 := (implies #9 #11)
#13 := (not #12)
#80 := (iff #13 false)
#34 := -1::Real
#35 := (* -1::Real f3)
#38 := (< #35 0::Real)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#78 := (iff #50 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #50 #73)
#71 := (iff #45 true)
#53 := (<= f3 0::Real)
#54 := (not #53)
#66 := (or #53 #54)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #45 #66)
#64 := (iff #38 #54)
#65 := [rewrite]: #64
#62 := (iff #44 #53)
#57 := (not #54)
#60 := (iff #57 #53)
#61 := [rewrite]: #60
#58 := (iff #44 #57)
#55 := (iff #9 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := (iff #13 #50)
#48 := (iff #12 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#33 := [asserted]: #13
[mp #33 #81]: false
unsat
f85f7c93404a45994b3d3e795113b1a47ef37a6c 61 0
#2 := false
decl f3 :: Real
#7 := f3
#10 := (- f3)
#8 := 0::Real
#11 := (< 0::Real #10)
#9 := (< f3 0::Real)
#12 := (implies #9 #11)
#13 := (not #12)
#80 := (iff #13 false)
#34 := -1::Real
#35 := (* -1::Real f3)
#38 := (< 0::Real #35)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#78 := (iff #50 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #50 #73)
#71 := (iff #45 true)
#53 := (>= f3 0::Real)
#54 := (not #53)
#66 := (or #53 #54)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #45 #66)
#64 := (iff #38 #54)
#65 := [rewrite]: #64
#62 := (iff #44 #53)
#57 := (not #54)
#60 := (iff #57 #53)
#61 := [rewrite]: #60
#58 := (iff #44 #57)
#55 := (iff #9 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := (iff #13 #50)
#48 := (iff #12 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#33 := [asserted]: #13
[mp #33 #81]: false
unsat
d1707afef5a1121f793c4ae15ea4d8dd324a2ebb 26 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := 0::Real
#9 := (- f3 0::Real)
#10 := (= #9 f3)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= f3 f3)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
4d2d9e6632b13b50703c8241c824ac4bc60fa851 32 0
#2 := false
decl f3 :: Real
#8 := f3
#10 := (- f3)
#7 := 0::Real
#9 := (- 0::Real f3)
#11 := (= #9 #10)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := -1::Real
#34 := (* -1::Real f3)
#39 := (= #34 #34)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (= #10 #34)
#38 := [rewrite]: #37
#35 := (= #9 #34)
#36 := [rewrite]: #35
#41 := [monotonicity #36 #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
f26054cf9e6e46ab9f14eb8b4fa90c23c83e1e20 64 0
#2 := false
#11 := 0::Real
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#10 := (- f3 f4)
#12 := (< #10 0::Real)
#9 := (< f3 f4)
#13 := (implies #9 #12)
#14 := (not #13)
#82 := (iff #14 false)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#40 := (< #37 0::Real)
#46 := (not #9)
#47 := (or #46 #40)
#52 := (not #47)
#80 := (iff #52 false)
#1 := true
#75 := (not true)
#78 := (iff #75 false)
#79 := [rewrite]: #78
#76 := (iff #52 #75)
#73 := (iff #47 true)
#56 := (>= #37 0::Real)
#55 := (not #56)
#68 := (or #56 #55)
#71 := (iff #68 true)
#72 := [rewrite]: #71
#69 := (iff #47 #68)
#66 := (iff #40 #55)
#67 := [rewrite]: #66
#64 := (iff #46 #56)
#59 := (not #55)
#62 := (iff #59 #56)
#63 := [rewrite]: #62
#60 := (iff #46 #59)
#57 := (iff #9 #55)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#70 := [monotonicity #65 #67]: #69
#74 := [trans #70 #72]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#53 := (iff #14 #52)
#50 := (iff #13 #47)
#43 := (implies #9 #40)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #13 #43)
#41 := (iff #12 #40)
#38 := (= #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [monotonicity #51]: #53
#83 := [trans #54 #81]: #82
#34 := [asserted]: #14
[mp #34 #83]: false
unsat
34a1de7290f4c8a36751d89b547f21ddb0c0cada 44 0
#2 := false
decl f3 :: Real
#7 := f3
decl f4 :: Real
#8 := f4
#10 := (- f4 f3)
#11 := (- #10)
#9 := (- f3 f4)
#12 := (= #9 #11)
#13 := (not #12)
#63 := (iff #13 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #13 #58)
#56 := (iff #12 true)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#51 := (= #37 #37)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #12 #51)
#49 := (= #11 #37)
#40 := (* -1::Real f3)
#41 := (+ #40 f4)
#44 := (- #41)
#47 := (= #44 #37)
#48 := [rewrite]: #47
#45 := (= #11 #44)
#42 := (= #10 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#38 := (= #9 #37)
#39 := [rewrite]: #38
#53 := [monotonicity #39 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#34 := [asserted]: #13
[mp #34 #64]: false
unsat
431807e85783cee305c53c73752025f626bba5f5 42 0
#2 := false
decl f3 :: Real
#7 := f3
decl f4 :: Real
#8 := f4
#10 := (- f4)
#11 := (+ #10 f3)
#9 := (- f3 f4)
#12 := (= #9 #11)
#13 := (not #12)
#61 := (iff #13 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #13 #56)
#54 := (iff #12 true)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#49 := (= #37 #37)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #12 #49)
#47 := (= #11 #37)
#42 := (+ #36 f3)
#45 := (= #42 #37)
#46 := [rewrite]: #45
#43 := (= #11 #42)
#40 := (= #10 #36)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#38 := (= #9 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#34 := [asserted]: #13
[mp #34 #62]: false
unsat
8531d27b75ee018ed4f78df6ab158a7dfda20b74 48 0
#2 := false
decl f5 :: Real
#10 := f5
decl f4 :: Real
#8 := f4
#12 := (+ f4 f5)
decl f3 :: Real
#7 := f3
#13 := (- f3 #12)
#9 := (- f3 f4)
#11 := (- #9 f5)
#14 := (= #11 #13)
#15 := (not #14)
#66 := (iff #15 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #15 #61)
#59 := (iff #14 true)
#37 := -1::Real
#45 := (* -1::Real f5)
#38 := (* -1::Real f4)
#46 := (+ #38 #45)
#47 := (+ f3 #46)
#54 := (= #47 #47)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #14 #54)
#52 := (= #13 #47)
#53 := [rewrite]: #52
#50 := (= #11 #47)
#39 := (+ f3 #38)
#42 := (- #39 f5)
#48 := (= #42 #47)
#49 := [rewrite]: #48
#43 := (= #11 #42)
#40 := (= #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#51 := [trans #44 #49]: #50
#56 := [monotonicity #51 #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#36 := [asserted]: #15
[mp #36 #67]: false
unsat
091bb9dd524578370d5c755a79bf57f30adc2896 26 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#9 := (* f3 0::Real)
#10 := (= #9 0::Real)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= 0::Real 0::Real)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
11ee5f34d2e69fbb83f75a1ce8b20231b0b9ee4e 26 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#9 := (* 0::Real f3)
#10 := (= #9 0::Real)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= 0::Real 0::Real)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
c3a72c0601b8cbc5a12b6de3f04815e4023a22d9 26 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := 1::Real
#9 := (* f3 1::Real)
#10 := (= #9 f3)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#33 := [rewrite]: #10
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #11
[mp #32 #47]: false
unsat
d67f22dcf49dbce534730cc3548cbd6548413fe9 26 0
#2 := false
decl f3 :: Real
#8 := f3
#7 := 1::Real
#9 := (* 1::Real f3)
#10 := (= #9 f3)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#33 := [rewrite]: #10
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #11
[mp #32 #47]: false
unsat
da0267c834e2691ae6adb35657dd447f07a5ddb0 40 0
#2 := false
decl f3 :: Real
#7 := f3
#11 := (- f3)
#8 := 1::Real
#9 := (- 1::Real)
#10 := (* f3 #9)
#12 := (= #10 #11)
#13 := (not #12)
#60 := (iff #13 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #13 #55)
#53 := (iff #12 true)
#35 := -1::Real
#41 := (* -1::Real f3)
#48 := (= #41 #41)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #12 #48)
#46 := (= #11 #41)
#47 := [rewrite]: #46
#44 := (= #10 #41)
#38 := (* f3 -1::Real)
#42 := (= #38 #41)
#43 := [rewrite]: #42
#39 := (= #10 #38)
#36 := (= #9 -1::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#50 := [monotonicity #45 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#34 := [asserted]: #13
[mp #34 #61]: false
unsat
64b057a096fc36168819ce708a4a964a21d4a714 35 0
#2 := false
decl f3 :: Real
#9 := f3
#11 := (- f3)
#7 := 1::Real
#8 := (- 1::Real)
#10 := (* #8 f3)
#12 := (= #10 #11)
#13 := (not #12)
#55 := (iff #13 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #13 #50)
#48 := (iff #12 true)
#35 := -1::Real
#38 := (* -1::Real f3)
#43 := (= #38 #38)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (= #11 #38)
#42 := [rewrite]: #41
#39 := (= #10 #38)
#36 := (= #8 -1::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [monotonicity #40 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#34 := [asserted]: #13
[mp #34 #56]: false
unsat
c3e2eae4d4e8a5d34e7872b606228eba3fbea719 28 0
#2 := false
#7 := 3::Real
decl f3 :: Real
#8 := f3
#10 := (* f3 3::Real)
#9 := (* 3::Real f3)
#11 := (= #9 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (= #9 #9)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (= #10 #9)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
5e33e92f4c8750528f60b2e66569586bf0f0bb45 30 0
#2 := false
#7 := 1::Real
#8 := 2::Real
#9 := (/ 1::Real 2::Real)
#10 := (< #9 1::Real)
#11 := (not #10)
#51 := (iff #11 false)
#33 := 1/2::Real
#36 := (< 1/2::Real 1::Real)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (= #9 1/2::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #11
[mp #32 #52]: false
unsat
e08ba17aff2428243af5cf67f75ce9241dfd2567 27 0
#2 := false
#8 := 3::Real
#7 := 1::Real
#9 := (/ 1::Real 3::Real)
#10 := (= #9 #9)
#11 := (not #10)
#48 := (iff #11 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#41 := (iff #10 true)
#33 := 1/3::Real
#36 := (= 1/3::Real 1/3::Real)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (= #9 1/3::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#32 := [asserted]: #11
[mp #32 #49]: false
unsat
c23e6b58a553359eacf5eb208af7f8150bf293f2 48 0
#2 := false
#8 := 3::Real
#7 := 1::Real
#11 := (- 1::Real)
#12 := (/ #11 3::Real)
#9 := (- 3::Real)
#10 := (/ 1::Real #9)
#13 := (= #10 #12)
#14 := (not #13)
#69 := (iff #14 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #14 #64)
#62 := (iff #13 true)
#42 := -1/3::Real
#57 := (= -1/3::Real -1/3::Real)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #13 #57)
#55 := (= #12 -1/3::Real)
#47 := -1::Real
#50 := (/ -1::Real 3::Real)
#53 := (= #50 -1/3::Real)
#54 := [rewrite]: #53
#51 := (= #12 #50)
#48 := (= #11 -1::Real)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#45 := (= #10 -1/3::Real)
#36 := -3::Real
#39 := (/ 1::Real -3::Real)
#43 := (= #39 -1/3::Real)
#44 := [rewrite]: #43
#40 := (= #10 #39)
#37 := (= #9 -3::Real)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#59 := [monotonicity #46 #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#35 := [asserted]: #14
[mp #35 #70]: false
unsat
a1da7a34684e1a5bd561f100c0fa893afb3b7a5d 36 0
#2 := false
#9 := 3::Real
#7 := 1::Real
#8 := (- 1::Real)
#10 := (/ #8 3::Real)
#11 := (= #10 #10)
#12 := (not #11)
#57 := (iff #12 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #12 #52)
#50 := (iff #11 true)
#40 := -1/3::Real
#45 := (= -1/3::Real -1/3::Real)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #11 #45)
#43 := (= #10 -1/3::Real)
#34 := -1::Real
#37 := (/ -1::Real 3::Real)
#41 := (= #37 -1/3::Real)
#42 := [rewrite]: #41
#38 := (= #10 #37)
#35 := (= #8 -1::Real)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#44 := [trans #39 #42]: #43
#47 := [monotonicity #44 #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#33 := [asserted]: #12
[mp #33 #58]: false
unsat
a0d33d56932085d413a998104b0ae2bb7b556dd3 43 0
#2 := false
#9 := 3::Real
#7 := 1::Real
#12 := (/ 1::Real 3::Real)
#10 := (- 3::Real)
#8 := (- 1::Real)
#11 := (/ #8 #10)
#13 := (= #11 #12)
#14 := (not #13)
#64 := (iff #14 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #14 #59)
#57 := (iff #13 true)
#45 := 1/3::Real
#52 := (= 1/3::Real 1/3::Real)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #13 #52)
#50 := (= #12 1/3::Real)
#51 := [rewrite]: #50
#48 := (= #11 1/3::Real)
#39 := -3::Real
#36 := -1::Real
#42 := (/ -1::Real -3::Real)
#46 := (= #42 1/3::Real)
#47 := [rewrite]: #46
#43 := (= #11 #42)
#40 := (= #10 -3::Real)
#41 := [rewrite]: #40
#37 := (= #8 -1::Real)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #41]: #43
#49 := [trans #44 #47]: #48
#54 := [monotonicity #49 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #14
[mp #35 #65]: false
unsat
960788d4730f7f2adca59dd014a913eb2be28d68 26 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := 1::Real
#9 := (/ f3 1::Real)
#10 := (= #9 f3)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#33 := [rewrite]: #10
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #11
[mp #32 #47]: false
unsat
20774a51f9bccf7108652ad949f64111f5847f42 60 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#67 := 2/3::Real
#68 := (* 2/3::Real f3)
#69 := (<= #68 0::Real)
#65 := (not #69)
#54 := (<= f3 0::Real)
#71 := (or #54 #65)
#74 := (not #71)
#10 := 3::Real
#11 := (/ f3 3::Real)
#12 := (< #11 f3)
#9 := (< 0::Real f3)
#13 := (implies #9 #12)
#14 := (not #13)
#77 := (iff #14 #74)
#35 := 1/3::Real
#36 := (* 1/3::Real f3)
#39 := (< #36 f3)
#45 := (not #9)
#46 := (or #45 #39)
#51 := (not #46)
#75 := (iff #51 #74)
#72 := (iff #46 #71)
#66 := (iff #39 #65)
#70 := [rewrite]: #66
#63 := (iff #45 #54)
#55 := (not #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #9 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#73 := [monotonicity #64 #70]: #72
#76 := [monotonicity #73]: #75
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #9 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#78 := [trans #53 #76]: #77
#34 := [asserted]: #14
#79 := [mp #34 #78]: #74
#81 := [not-or-elim #79]: #69
#80 := [not-or-elim #79]: #55
[th-lemma arith farkas -2/3 1 #80 #81]: false
unsat
59ae2373184f370c17621f32898c84257dcf4466 60 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#69 := 2/3::Real
#70 := (* 2/3::Real f3)
#67 := (>= #70 0::Real)
#65 := (not #67)
#56 := (>= f3 0::Real)
#71 := (or #56 #65)
#74 := (not #71)
#10 := 3::Real
#11 := (/ f3 3::Real)
#12 := (< f3 #11)
#9 := (< f3 0::Real)
#13 := (implies #9 #12)
#14 := (not #13)
#77 := (iff #14 #74)
#35 := 1/3::Real
#36 := (* 1/3::Real f3)
#39 := (< f3 #36)
#45 := (not #9)
#46 := (or #45 #39)
#51 := (not #46)
#75 := (iff #51 #74)
#72 := (iff #46 #71)
#66 := (iff #39 #65)
#68 := [rewrite]: #66
#63 := (iff #45 #56)
#54 := (not #56)
#58 := (not #54)
#61 := (iff #58 #56)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#55 := (iff #9 #54)
#57 := [rewrite]: #55
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#73 := [monotonicity #64 #68]: #72
#76 := [monotonicity #73]: #75
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #9 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#78 := [trans #53 #76]: #77
#34 := [asserted]: #14
#79 := [mp #34 #78]: #74
#81 := [not-or-elim #79]: #67
#80 := [not-or-elim #79]: #54
[th-lemma arith farkas -2/3 1 #80 #81]: false
unsat
588ad60f0eef06c7d10b05e810713f52bae9fbac 36 0
#2 := false
decl f3 :: Real
#8 := f3
#7 := 3::Real
#9 := (/ f3 3::Real)
#10 := (* 3::Real #9)
#11 := (= #10 f3)
#12 := (not #11)
#56 := (iff #12 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #12 #51)
#49 := (iff #11 true)
#44 := (= f3 f3)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #11 #44)
#34 := 1/3::Real
#35 := (* 1/3::Real f3)
#38 := (* 3::Real #35)
#41 := (= #38 f3)
#42 := [rewrite]: #41
#39 := (= #10 #38)
#36 := (= #9 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [trans #40 #42]: #11
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#33 := [asserted]: #12
[mp #33 #57]: false
unsat
87491d527606c77b68ab29c99a67d25340955342 35 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := 3::Real
#9 := (* f3 3::Real)
#10 := (/ #9 3::Real)
#11 := (= #10 f3)
#12 := (not #11)
#55 := (iff #12 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#48 := (iff #11 true)
#43 := (= f3 f3)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#34 := (* 3::Real f3)
#37 := (/ #34 3::Real)
#40 := (= #37 f3)
#41 := [rewrite]: #40
#38 := (= #10 #37)
#35 := (= #9 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [trans #39 #41]: #11
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#33 := [asserted]: #12
[mp #33 #56]: false
unsat
fb3e7bcac57bdcb4f4b6e119fa415b4a8bf5c9e7 62 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#69 := 1/3::Real
#70 := (* 1/3::Real f3)
#71 := (<= #70 0::Real)
#67 := (not #71)
#56 := (<= f3 0::Real)
#73 := (or #56 #67)
#76 := (not #73)
#12 := 3::Real
#10 := 2::Real
#11 := (* 2::Real f3)
#13 := (/ #11 3::Real)
#14 := (< #13 f3)
#9 := (< 0::Real f3)
#15 := (implies #9 #14)
#16 := (not #15)
#79 := (iff #16 #76)
#38 := 2/3::Real
#39 := (* 2/3::Real f3)
#41 := (< #39 f3)
#47 := (not #9)
#48 := (or #47 #41)
#53 := (not #48)
#77 := (iff #53 #76)
#74 := (iff #48 #73)
#68 := (iff #41 #67)
#72 := [rewrite]: #68
#65 := (iff #47 #56)
#57 := (not #56)
#60 := (not #57)
#63 := (iff #60 #56)
#64 := [rewrite]: #63
#61 := (iff #47 #60)
#58 := (iff #9 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#75 := [monotonicity #66 #72]: #74
#78 := [monotonicity #75]: #77
#54 := (iff #16 #53)
#51 := (iff #15 #48)
#44 := (implies #9 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#37 := (= #13 #39)
#40 := [rewrite]: #37
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#80 := [trans #55 #78]: #79
#36 := [asserted]: #16
#81 := [mp #36 #80]: #76
#83 := [not-or-elim #81]: #71
#82 := [not-or-elim #81]: #57
[th-lemma arith farkas -1/3 1 #82 #83]: false
unsat
953412704db979090a4ca7b4441938d5b81412e0 62 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#71 := 1/3::Real
#72 := (* 1/3::Real f3)
#69 := (>= #72 0::Real)
#67 := (not #69)
#58 := (>= f3 0::Real)
#73 := (or #58 #67)
#76 := (not #73)
#12 := 3::Real
#10 := 2::Real
#11 := (* 2::Real f3)
#13 := (/ #11 3::Real)
#14 := (< f3 #13)
#9 := (< f3 0::Real)
#15 := (implies #9 #14)
#16 := (not #15)
#79 := (iff #16 #76)
#38 := 2/3::Real
#39 := (* 2/3::Real f3)
#41 := (< f3 #39)
#47 := (not #9)
#48 := (or #47 #41)
#53 := (not #48)
#77 := (iff #53 #76)
#74 := (iff #48 #73)
#68 := (iff #41 #67)
#70 := [rewrite]: #68
#65 := (iff #47 #58)
#56 := (not #58)
#60 := (not #56)
#63 := (iff #60 #58)
#64 := [rewrite]: #63
#61 := (iff #47 #60)
#57 := (iff #9 #56)
#59 := [rewrite]: #57
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#75 := [monotonicity #66 #70]: #74
#78 := [monotonicity #75]: #77
#54 := (iff #16 #53)
#51 := (iff #15 #48)
#44 := (implies #9 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#37 := (= #13 #39)
#40 := [rewrite]: #37
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#80 := [trans #55 #78]: #79
#36 := [asserted]: #16
#81 := [mp #36 #80]: #76
#83 := [not-or-elim #81]: #69
#82 := [not-or-elim #81]: #56
[th-lemma arith farkas -1/3 1 #82 #83]: false
unsat
1de1767601decde5f6a984aff8700035d237f520 75 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#34 := -1::Real
#35 := (* -1::Real f3)
#47 := (>= f3 0::Real)
#54 := (if #47 f3 #35)
#74 := (* -1::Real #54)
#83 := (+ #35 #74)
#92 := (<= #83 0::Real)
#79 := (= #35 #54)
#48 := (not #47)
#75 := (+ f3 #74)
#82 := (<= #75 0::Real)
#78 := (= f3 #54)
#84 := [hypothesis]: #47
#80 := (or #48 #78)
#81 := [def-axiom]: #80
#85 := [unit-resolution #81 #84]: #78
#86 := (not #78)
#87 := (or #86 #82)
#88 := [th-lemma arith triangle-eq]: #87
#89 := [unit-resolution #88 #85]: #82
#63 := (>= #54 0::Real)
#67 := (not #63)
#10 := (- f3)
#9 := (< f3 0::Real)
#11 := (if #9 #10 f3)
#12 := (<= 0::Real #11)
#13 := (not #12)
#70 := (iff #13 #67)
#38 := (if #9 #35 f3)
#41 := (<= 0::Real #38)
#44 := (not #41)
#68 := (iff #44 #67)
#65 := (iff #41 #63)
#59 := (<= 0::Real #54)
#62 := (iff #59 #63)
#64 := [rewrite]: #62
#60 := (iff #41 #59)
#57 := (= #38 #54)
#51 := (if #48 #35 f3)
#55 := (= #51 #54)
#56 := [rewrite]: #55
#52 := (= #38 #51)
#49 := (iff #9 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#58 := [trans #53 #56]: #57
#61 := [monotonicity #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (= #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#71 := [trans #46 #69]: #70
#33 := [asserted]: #13
#72 := [mp #33 #71]: #67
#90 := [th-lemma arith farkas -1 1 1 #84 #72 #89]: false
#91 := [lemma #90]: #48
#76 := (or #47 #79)
#77 := [def-axiom]: #76
#94 := [unit-resolution #77 #91]: #79
#95 := (not #79)
#96 := (or #95 #92)
#97 := [th-lemma arith triangle-eq]: #96
#98 := [unit-resolution #97 #94]: #92
[th-lemma arith farkas 1 1 1 #72 #91 #98]: false
unsat
97a92254fa3e068ea924e98693ea55400493d4bb 103 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#36 := -1::Real
#37 := (* -1::Real f3)
#58 := (>= f3 0::Real)
#65 := (if #58 f3 #37)
#70 := (= #65 0::Real)
#13 := (= f3 0::Real)
#118 := (iff #13 #70)
#87 := (= f3 #65)
#101 := (<= #37 0::Real)
#100 := (= #37 0::Real)
#84 := (not #13)
#59 := (not #58)
#103 := [hypothesis]: #59
#104 := (or #84 #58)
#105 := [th-lemma arith triangle-eq]: #104
#106 := [unit-resolution #105 #103]: #84
#98 := (or #70 #13)
#73 := (not #70)
#76 := (iff #73 #13)
#10 := (- f3)
#9 := (< f3 0::Real)
#11 := (if #9 #10 f3)
#12 := (= #11 0::Real)
#14 := (iff #12 #13)
#15 := (not #14)
#79 := (iff #15 #76)
#40 := (if #9 #37 f3)
#43 := (= #40 0::Real)
#52 := (not #43)
#53 := (iff #52 #13)
#77 := (iff #53 #76)
#74 := (iff #52 #73)
#71 := (iff #43 #70)
#68 := (= #40 #65)
#62 := (if #59 #37 f3)
#66 := (= #62 #65)
#67 := [rewrite]: #66
#63 := (= #40 #62)
#60 := (iff #9 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#56 := (iff #15 #53)
#46 := (iff #43 #13)
#49 := (not #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (= #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#80 := [trans #57 #78]: #79
#35 := [asserted]: #15
#81 := [mp #35 #80]: #76
#91 := (not #76)
#96 := (or #70 #13 #91)
#97 := [def-axiom]: #96
#99 := [unit-resolution #97 #81]: #98
#107 := [unit-resolution #99 #106]: #70
#88 := (= #37 #65)
#85 := (or #58 #88)
#86 := [def-axiom]: #85
#108 := [unit-resolution #86 #103]: #88
#109 := [trans #108 #107]: #100
#110 := (not #100)
#111 := (or #110 #101)
#112 := [th-lemma arith triangle-eq]: #111
#113 := [unit-resolution #112 #109]: #101
#114 := [th-lemma arith farkas 1 1 #103 #113]: false
#115 := [lemma #114]: #58
#89 := (or #59 #87)
#90 := [def-axiom]: #89
#117 := [unit-resolution #90 #115]: #87
#119 := [monotonicity #117]: #118
#120 := (iff #84 #73)
#121 := [monotonicity #119]: #120
#102 := [hypothesis]: #84
#122 := [mp #102 #121]: #73
#116 := [unit-resolution #99 #102]: #70
#123 := [unit-resolution #116 #122]: false
#124 := [lemma #123]: #13
#126 := [mp #124 #119]: #70
#94 := (or #73 #84)
#92 := (or #73 #84 #91)
#93 := [def-axiom]: #92
#95 := [unit-resolution #93 #81]: #94
#125 := [unit-resolution #95 #124]: #73
[unit-resolution #125 #126]: false
unsat
5eef55215a56f315e0597001f70244e2d6cbad2b 102 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#36 := -1::Real
#37 := (* -1::Real f3)
#112 := (* -1::Real #37)
#113 := (+ f3 #112)
#115 := (>= #113 0::Real)
#111 := (= f3 #37)
#58 := (>= f3 0::Real)
#69 := (if #58 f3 #37)
#119 := (= #69 #37)
#89 := (= #37 #69)
#61 := (not #58)
#74 := (= #69 f3)
#88 := (= f3 #69)
#105 := (not #88)
#84 := (not #74)
#106 := (iff #84 #105)
#103 := (iff #74 #88)
#104 := [commutativity]: #103
#107 := [monotonicity #104]: #106
#100 := [hypothesis]: #84
#108 := [mp #100 #107]: #105
#98 := (or #58 #74)
#77 := (iff #61 #74)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (if #10 #11 f3)
#13 := (= #12 f3)
#9 := (<= 0::Real f3)
#14 := (iff #9 #13)
#15 := (not #14)
#80 := (iff #15 #77)
#40 := (if #10 #37 f3)
#43 := (= #40 f3)
#52 := (not #9)
#53 := (iff #52 #43)
#78 := (iff #53 #77)
#75 := (iff #43 #74)
#72 := (= #40 #69)
#66 := (if #61 #37 f3)
#70 := (= #66 #69)
#71 := [rewrite]: #70
#67 := (= #40 #66)
#64 := (iff #10 #61)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#76 := [monotonicity #73]: #75
#62 := (iff #52 #61)
#59 := (iff #9 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#79 := [monotonicity #63 #76]: #78
#56 := (iff #15 #53)
#46 := (iff #9 #43)
#49 := (not #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#41 := (= #12 #40)
#38 := (= #11 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#81 := [trans #57 #79]: #80
#35 := [asserted]: #15
#82 := [mp #35 #81]: #77
#85 := (not #77)
#96 := (or #58 #74 #85)
#97 := [def-axiom]: #96
#99 := [unit-resolution #97 #82]: #98
#101 := [unit-resolution #99 #100]: #58
#90 := (or #61 #88)
#91 := [def-axiom]: #90
#102 := [unit-resolution #91 #101]: #88
#109 := [unit-resolution #102 #108]: false
#110 := [lemma #109]: #74
#94 := (or #61 #84)
#92 := (or #61 #84 #85)
#93 := [def-axiom]: #92
#95 := [unit-resolution #93 #82]: #94
#116 := [unit-resolution #95 #110]: #61
#86 := (or #58 #89)
#87 := [def-axiom]: #86
#117 := [unit-resolution #87 #116]: #89
#120 := [symm #117]: #119
#118 := [symm #110]: #88
#121 := [trans #118 #120]: #111
#122 := (not #111)
#123 := (or #122 #115)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #115
[th-lemma arith farkas 2 1 #116 #125]: false
unsat
45b14df2d2322e566d02d0db8c4a9bcfe19ad7c5 143 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#36 := -1::Real
#37 := (* -1::Real f3)
#58 := (>= f3 0::Real)
#65 := (if #58 f3 #37)
#104 := (* -1::Real #65)
#154 := (+ f3 #104)
#155 := (<= #154 0::Real)
#90 := (= f3 #65)
#105 := (+ #37 #104)
#107 := (>= #105 0::Real)
#91 := (= #37 #65)
#59 := (not #58)
#139 := [hypothesis]: #59
#88 := (or #58 #91)
#89 := [def-axiom]: #88
#140 := [unit-resolution #89 #139]: #91
#133 := (not #91)
#141 := (or #133 #107)
#142 := [th-lemma arith triangle-eq]: #141
#143 := [unit-resolution #142 #140]: #107
#73 := (+ f3 #65)
#86 := (<= #73 0::Real)
#148 := (not #86)
#87 := (>= #73 0::Real)
#106 := (<= #105 0::Real)
#74 := (= #73 0::Real)
#94 := (not #74)
#126 := (not #87)
#127 := [hypothesis]: #126
#128 := (or #94 #87)
#129 := [th-lemma arith triangle-eq]: #128
#130 := [unit-resolution #129 #127]: #94
#124 := (or #59 #74)
#111 := (= f3 0::Real)
#9 := (<= f3 0::Real)
#108 := [hypothesis]: #94
#102 := (or #9 #74)
#52 := (not #9)
#79 := (iff #52 #74)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (if #10 #11 f3)
#13 := (= #12 #11)
#14 := (iff #9 #13)
#15 := (not #14)
#82 := (iff #15 #79)
#40 := (if #10 #37 f3)
#43 := (= #40 #37)
#53 := (iff #52 #43)
#80 := (iff #53 #79)
#77 := (iff #43 #74)
#70 := (= #65 #37)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #43 #70)
#68 := (= #40 #65)
#62 := (if #59 #37 f3)
#66 := (= #62 #65)
#67 := [rewrite]: #66
#63 := (= #40 #62)
#60 := (iff #10 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#72 := [monotonicity #69]: #71
#78 := [trans #72 #76]: #77
#81 := [monotonicity #78]: #80
#56 := (iff #15 #53)
#46 := (iff #9 #43)
#49 := (not #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#38 := (= #11 #37)
#39 := [rewrite]: #38
#41 := (= #12 #40)
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42 #39]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#83 := [trans #57 #81]: #82
#35 := [asserted]: #15
#84 := [mp #35 #83]: #79
#95 := (not #79)
#100 := (or #9 #74 #95)
#101 := [def-axiom]: #100
#103 := [unit-resolution #101 #84]: #102
#109 := [unit-resolution #103 #108]: #9
#110 := [hypothesis]: #58
#112 := [th-lemma arith eq-propagate 0 0 #110 #109]: #111
#120 := (= #73 f3)
#118 := (= #65 f3)
#92 := (or #59 #90)
#93 := [def-axiom]: #92
#113 := [unit-resolution #93 #110]: #90
#119 := [symm #113]: #118
#116 := (= #73 #65)
#114 := (= #65 #73)
#115 := [th-lemma arith eq-propagate 1 1 #110 #109]: #114
#117 := [symm #115]: #116
#121 := [trans #117 #119]: #120
#122 := [trans #121 #112]: #74
#123 := [unit-resolution #108 #122]: false
#125 := [lemma #123]: #124
#131 := [unit-resolution #125 #130]: #59
#132 := [unit-resolution #89 #131]: #91
#134 := (or #133 #106)
#135 := [th-lemma arith triangle-eq]: #134
#136 := [unit-resolution #135 #132]: #106
#137 := [th-lemma arith farkas 1 1 #127 #136]: false
#138 := [lemma #137]: #87
#144 := (or #58 #9)
#145 := [th-lemma arith farkas 1 1]: #144
#146 := [unit-resolution #145 #139]: #9
#98 := (or #52 #94)
#96 := (or #52 #94 #95)
#97 := [def-axiom]: #96
#99 := [unit-resolution #97 #84]: #98
#147 := [unit-resolution #99 #146]: #94
#149 := (or #74 #148 #126)
#150 := [th-lemma arith triangle-eq]: #149
#151 := [unit-resolution #150 #147 #138]: #148
#152 := [th-lemma arith farkas 1 1 #151 #143]: false
#153 := [lemma #152]: #58
#157 := [unit-resolution #93 #153]: #90
#158 := (not #90)
#159 := (or #158 #155)
#160 := [th-lemma arith triangle-eq]: #159
#161 := [unit-resolution #160 #157]: #155
#162 := [unit-resolution #125 #153]: #74
#163 := (or #94 #86)
#164 := [th-lemma arith triangle-eq]: #163
#165 := [unit-resolution #164 #162]: #86
#166 := [unit-resolution #99 #162]: #52
[th-lemma arith farkas 2 1 1 #166 #165 #161]: false
unsat
5eef8e7d84fcda85aa27c59747fcf3f71dac1fdf 116 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#37 := -1::Real
#38 := (* -1::Real f3)
#64 := (>= f3 0::Real)
#71 := (if #64 f3 #38)
#85 := (* -1::Real #71)
#125 := (+ #38 #85)
#141 := (<= #125 0::Real)
#113 := (= #38 #71)
#65 := (not #64)
#123 := (+ f3 #85)
#124 := (<= #123 0::Real)
#112 := (= f3 #71)
#126 := [hypothesis]: #64
#108 := (or #65 #112)
#109 := [def-axiom]: #108
#127 := [unit-resolution #109 #126]: #112
#128 := (not #112)
#129 := (or #128 #124)
#130 := [th-lemma arith triangle-eq]: #129
#131 := [unit-resolution #130 #127]: #124
#80 := (>= #71 0::Real)
#79 := (not #80)
#91 := (if #80 #71 #85)
#110 := (= #71 #91)
#134 := (not #110)
#96 := (= #91 #71)
#99 := (not #96)
#135 := (iff #99 #134)
#132 := (iff #96 #110)
#133 := [commutativity]: #132
#136 := [monotonicity #133]: #135
#10 := (- f3)
#9 := (< f3 0::Real)
#11 := (if #9 #10 f3)
#13 := (- #11)
#12 := (< #11 0::Real)
#14 := (if #12 #13 #11)
#15 := (= #14 #11)
#16 := (not #15)
#102 := (iff #16 #99)
#41 := (if #9 #38 f3)
#50 := (* -1::Real #41)
#44 := (< #41 0::Real)
#55 := (if #44 #50 #41)
#58 := (= #55 #41)
#61 := (not #58)
#100 := (iff #61 #99)
#97 := (iff #58 #96)
#74 := (= #41 #71)
#68 := (if #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #9 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#94 := (= #55 #91)
#88 := (if #79 #85 #71)
#92 := (= #88 #91)
#93 := [rewrite]: #92
#89 := (= #55 #88)
#86 := (= #50 #85)
#87 := [monotonicity #75]: #86
#83 := (iff #44 #79)
#76 := (< #71 0::Real)
#81 := (iff #76 #79)
#82 := [rewrite]: #81
#77 := (iff #44 #76)
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#90 := [monotonicity #84 #87 #75]: #89
#95 := [trans #90 #93]: #94
#98 := [monotonicity #95 #75]: #97
#101 := [monotonicity #98]: #100
#62 := (iff #16 #61)
#59 := (iff #15 #58)
#42 := (= #11 #41)
#39 := (= #10 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#56 := (= #14 #55)
#53 := (= #13 #50)
#47 := (- #41)
#51 := (= #47 #50)
#52 := [rewrite]: #51
#48 := (= #13 #47)
#49 := [monotonicity #43]: #48
#54 := [trans #49 #52]: #53
#45 := (iff #12 #44)
#46 := [monotonicity #43]: #45
#57 := [monotonicity #46 #54 #43]: #56
#60 := [monotonicity #57 #43]: #59
#63 := [monotonicity #60]: #62
#103 := [trans #63 #101]: #102
#36 := [asserted]: #16
#104 := [mp #36 #103]: #99
#137 := [mp #104 #136]: #134
#114 := (or #79 #110)
#115 := [def-axiom]: #114
#138 := [unit-resolution #115 #137]: #79
#139 := [th-lemma arith farkas -1 1 1 #126 #138 #131]: false
#140 := [lemma #139]: #65
#106 := (or #64 #113)
#107 := [def-axiom]: #106
#143 := [unit-resolution #107 #140]: #113
#144 := (not #113)
#145 := (or #144 #141)
#146 := [th-lemma arith triangle-eq]: #145
#147 := [unit-resolution #146 #143]: #141
[th-lemma arith farkas 1 1 1 #140 #138 #147]: false
unsat
55bb89c7c767723007ed5956fcfa12830981af6f 57 0
#2 := false
#15 := 0::Real
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Real)
#42 := (if #39 f3 f4)
#50 := (* -1::Real #42)
#59 := (+ f4 #50)
#73 := (>= #59 0::Real)
#63 := (= f4 #42)
#64 := (not #39)
#62 := (= f3 #42)
#67 := (not #62)
#51 := (+ f3 #50)
#49 := (>= #51 0::Real)
#55 := (not #49)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#11 := (<= #10 f3)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #49)
#45 := (<= #42 f3)
#48 := (iff #45 #49)
#52 := [rewrite]: #48
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#66 := [hypothesis]: #62
#68 := (or #67 #49)
#69 := [th-lemma arith triangle-eq]: #68
#70 := [unit-resolution #69 #66 #58]: false
#71 := [lemma #70]: #67
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#74 := [unit-resolution #60 #71]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#75 := [unit-resolution #35 #74]: #63
#76 := (not #63)
#77 := (or #76 #73)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #75]: #73
[th-lemma arith farkas 1 1 1 #58 #74 #79]: false
unsat
792a7271106d55b993c9a30193c5dc7ee046972f 57 0
#2 := false
#15 := 0::Real
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Real)
#42 := (if #39 f3 f4)
#49 := (* -1::Real #42)
#50 := (+ f4 #49)
#48 := (>= #50 0::Real)
#55 := (not #48)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#11 := (<= #10 f4)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #48)
#45 := (<= #42 f4)
#51 := (iff #45 #48)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#63 := (= f4 #42)
#64 := (not #39)
#68 := [hypothesis]: #39
#59 := (+ f3 #49)
#67 := (>= #59 0::Real)
#62 := (= f3 #42)
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#69 := [unit-resolution #60 #68]: #62
#70 := (not #62)
#71 := (or #70 #67)
#72 := [th-lemma arith triangle-eq]: #71
#73 := [unit-resolution #72 #69]: #67
#74 := [th-lemma arith farkas -1 1 1 #73 #58 #68]: false
#75 := [lemma #74]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#76 := [unit-resolution #35 #75]: #63
#77 := (not #63)
#78 := (or #77 #48)
#79 := [th-lemma arith triangle-eq]: #78
[unit-resolution #79 #76 #58]: false
unsat
83b40ab4216a9b2572384a8e1f6d8b0f58fd50bf 103 0
#2 := false
#20 := 0::Real
decl f5 :: Real
#10 := f5
decl f4 :: Real
#8 := f4
#46 := -1::Real
#55 := (* -1::Real f5)
#65 := (+ f4 #55)
#66 := (<= #65 0::Real)
#69 := (if #66 f4 f5)
#77 := (* -1::Real #69)
decl f3 :: Real
#7 := f3
#78 := (+ f3 #77)
#76 := (>= #78 0::Real)
#75 := (not #76)
#56 := (+ f3 #55)
#54 := (>= #56 0::Real)
#53 := (not #54)
#49 := (* -1::Real f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Real)
#47 := (not #48)
#59 := (and #47 #53)
#62 := (not #59)
#83 := (or #62 #75)
#86 := (not #83)
#13 := (<= f4 f5)
#14 := (if #13 f4 f5)
#15 := (< f3 #14)
#11 := (< f3 f5)
#9 := (< f3 f4)
#12 := (and #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#89 := (iff #17 #86)
#39 := (not #12)
#40 := (or #39 #15)
#43 := (not #40)
#87 := (iff #43 #86)
#84 := (iff #40 #83)
#81 := (iff #15 #75)
#72 := (< f3 #69)
#79 := (iff #72 #75)
#80 := [rewrite]: #79
#73 := (iff #15 #72)
#70 := (= #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#82 := [trans #74 #80]: #81
#63 := (iff #39 #62)
#60 := (iff #12 #59)
#57 := (iff #11 #53)
#58 := [rewrite]: #57
#51 := (iff #9 #47)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#85 := [monotonicity #64 #82]: #84
#88 := [monotonicity #85]: #87
#44 := (iff #17 #43)
#41 := (iff #16 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#90 := [trans #45 #88]: #89
#38 := [asserted]: #17
#91 := [mp #38 #90]: #86
#95 := [not-or-elim #91]: #76
#92 := [not-or-elim #91]: #59
#94 := [and-elim #92]: #53
#100 := (+ f5 #77)
#117 := (<= #100 0::Real)
#106 := (= f5 #69)
#107 := (not #66)
#105 := (= f4 #69)
#112 := (not #105)
#102 := (+ f4 #77)
#99 := (<= #102 0::Real)
#109 := (not #99)
#93 := [and-elim #92]: #47
#97 := [hypothesis]: #99
#98 := [th-lemma arith farkas -1 -1 1 #97 #93 #95]: false
#110 := [lemma #98]: #109
#111 := [hypothesis]: #105
#113 := (or #112 #99)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111 #110]: false
#116 := [lemma #115]: #112
#108 := (or #107 #105)
#103 := [def-axiom]: #108
#119 := [unit-resolution #103 #116]: #107
#104 := (or #66 #106)
#101 := [def-axiom]: #104
#120 := [unit-resolution #101 #119]: #106
#121 := (not #106)
#122 := (or #121 #117)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #117
[th-lemma arith farkas -1 -1 1 #124 #94 #95]: false
unsat
c0fd50acd23f3d8d8def07a171c9f6d478ae387a 94 0
#2 := false
decl f3 :: Real
#7 := f3
decl f4 :: Real
#8 := f4
#17 := 0::Real
#38 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#48 := (>= #40 0::Real)
#50 := (if #48 f4 f3)
#41 := (<= #40 0::Real)
#44 := (if #41 f3 f4)
#53 := (= #44 #50)
#60 := (= f4 #50)
#65 := (not #41)
#63 := (= f3 #44)
#105 := (not #63)
#67 := (= f3 #50)
#74 := (not #67)
#75 := [hypothesis]: #74
#71 := (or #48 #67)
#72 := [def-axiom]: #71
#76 := [unit-resolution #72 #75]: #48
#68 := (not #48)
#69 := (or #68 #60)
#70 := [def-axiom]: #69
#77 := [unit-resolution #70 #76]: #60
#73 := (= f3 f4)
#64 := (= f4 #44)
#87 := (not #64)
#56 := (not #53)
#88 := (iff #56 #87)
#85 := (iff #53 #64)
#83 := (iff #64 #53)
#78 := (= #50 #44)
#81 := (iff #78 #53)
#82 := [commutativity]: #81
#79 := (iff #64 #78)
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#86 := [symm #84]: #85
#89 := [monotonicity #86]: #88
#11 := (<= f4 f3)
#12 := (if #11 f4 f3)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#57 := (iff #14 #56)
#54 := (iff #13 #53)
#51 := (= #12 #50)
#47 := (iff #11 #48)
#49 := [rewrite]: #47
#52 := [monotonicity #49]: #51
#45 := (= #10 #44)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#55 := [monotonicity #46 #52]: #54
#58 := [monotonicity #55]: #57
#35 := [asserted]: #14
#59 := [mp #35 #58]: #56
#90 := [mp #59 #89]: #87
#62 := (or #41 #64)
#37 := [def-axiom]: #62
#91 := [unit-resolution #37 #90]: #41
#94 := (or #73 #65)
#92 := (or #73 #65 #68)
#93 := [th-lemma arith triangle-eq]: #92
#95 := [unit-resolution #93 #76]: #94
#96 := [unit-resolution #95 #91]: #73
#97 := [trans #96 #77]: #67
#98 := [unit-resolution #75 #97]: false
#99 := [lemma #98]: #67
#101 := (= #44 f3)
#100 := [hypothesis]: #63
#102 := [symm #100]: #101
#103 := [trans #102 #99]: #53
#104 := [unit-resolution #59 #103]: false
#106 := [lemma #104]: #105
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#107 := [unit-resolution #61 #106]: #65
#109 := (or #48 #41)
#110 := [th-lemma arith farkas 1 1]: #109
#111 := [unit-resolution #110 #107]: #48
#112 := [unit-resolution #70 #111]: #60
#115 := (= #44 f4)
#108 := [unit-resolution #37 #107]: #64
#116 := [symm #108]: #115
#117 := [trans #116 #112]: #53
[unit-resolution #59 #117]: false
unsat
fb76c2d56cf2f934220975a9ef3ad26d44e0bbfc 53 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#10 := (<= f3 0::Real)
#11 := (if #10 f3 0::Real)
#12 := (= #11 0::Real)
#63 := (= f3 0::Real)
#58 := (not #12)
#44 := (>= f3 0::Real)
#45 := (not #44)
#48 := (or #45 #12)
#51 := (not #48)
#9 := (<= 0::Real f3)
#13 := (implies #9 #12)
#14 := (not #13)
#54 := (iff #14 #51)
#35 := (not #9)
#36 := (or #35 #12)
#39 := (not #36)
#52 := (iff #39 #51)
#49 := (iff #36 #48)
#46 := (iff #35 #45)
#42 := (iff #9 #44)
#43 := [rewrite]: #42
#47 := [monotonicity #43]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#55 := [trans #41 #53]: #54
#34 := [asserted]: #14
#56 := [mp #34 #55]: #51
#59 := [not-or-elim #56]: #58
#65 := (or #10 #12)
#66 := [def-axiom]: #65
#64 := [unit-resolution #66 #59]: #10
#57 := [not-or-elim #56]: #44
#68 := (not #10)
#61 := (or #63 #68 #45)
#62 := [th-lemma arith triangle-eq]: #61
#71 := [unit-resolution #62 #57 #64]: #63
#73 := (= #11 f3)
#67 := (= f3 #11)
#69 := (or #68 #67)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #64]: #67
#74 := [symm #72]: #73
#75 := [trans #74 #71]: #12
[unit-resolution #59 #75]: false
unsat
7237d883d9dd118244bec827b23fdc7f1b72fdce 124 0
#2 := false
#12 := 0::Real
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#38 := -1::Real
#40 := (* -1::Real f4)
#53 := (+ f3 #40)
#54 := (<= #53 0::Real)
#57 := (if #54 f3 f4)
#105 := (* -1::Real #57)
#106 := (+ f3 #105)
#108 := (>= #106 0::Real)
#93 := (= f3 #57)
#107 := (+ f4 #105)
#125 := (>= #107 0::Real)
#94 := (= f4 #57)
#95 := (not #54)
#136 := [hypothesis]: #95
#92 := (or #54 #94)
#89 := [def-axiom]: #92
#137 := [unit-resolution #89 #136]: #94
#128 := (not #94)
#129 := (or #128 #125)
#130 := [th-lemma arith triangle-eq]: #129
#138 := [unit-resolution #130 #137]: #125
#39 := (* -1::Real f3)
#41 := (+ #39 #40)
#11 := (+ f3 f4)
#60 := (>= #11 0::Real)
#67 := (if #60 #11 #41)
#75 := (* -1::Real #67)
#104 := (+ #41 #75)
#124 := (<= #104 0::Real)
#97 := (= #41 #67)
#61 := (not #60)
#109 := [hypothesis]: #60
#76 := (+ #57 #75)
#77 := (<= #76 0::Real)
#82 := (not #77)
#14 := (- #11)
#13 := (< #11 0::Real)
#15 := (if #13 #14 #11)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#16 := (<= #10 #15)
#17 := (not #16)
#85 := (iff #17 #82)
#44 := (if #13 #41 #11)
#47 := (<= #10 #44)
#50 := (not #47)
#83 := (iff #50 #82)
#80 := (iff #47 #77)
#72 := (<= #57 #67)
#78 := (iff #72 #77)
#79 := [rewrite]: #78
#73 := (iff #47 #72)
#70 := (= #44 #67)
#64 := (if #61 #41 #11)
#68 := (= #64 #67)
#69 := [rewrite]: #68
#65 := (= #44 #64)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#71 := [trans #66 #69]: #70
#58 := (= #10 #57)
#55 := (iff #9 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#74 := [monotonicity #59 #71]: #73
#81 := [trans #74 #79]: #80
#84 := [monotonicity #81]: #83
#51 := (iff #17 #50)
#48 := (iff #16 #47)
#45 := (= #15 #44)
#42 := (= #14 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#86 := [trans #52 #84]: #85
#37 := [asserted]: #17
#87 := [mp #37 #86]: #82
#122 := (or #95 #61)
#110 := [hypothesis]: #54
#96 := (or #95 #93)
#91 := [def-axiom]: #96
#111 := [unit-resolution #91 #110]: #93
#112 := (not #93)
#113 := (or #112 #108)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111]: #108
#102 := (+ #11 #75)
#103 := (<= #102 0::Real)
#90 := (= #11 #67)
#98 := (or #61 #90)
#99 := [def-axiom]: #98
#116 := [unit-resolution #99 #109]: #90
#117 := (not #90)
#118 := (or #117 #103)
#119 := [th-lemma arith triangle-eq]: #118
#120 := [unit-resolution #119 #116]: #103
#121 := [th-lemma arith farkas 2 2 2 1 1 #120 #115 #87 #110 #109]: false
#123 := [lemma #121]: #122
#126 := [unit-resolution #123 #109]: #95
#127 := [unit-resolution #89 #126]: #94
#131 := [unit-resolution #130 #127]: #125
#132 := [th-lemma arith farkas 2 2 1 2 1 #120 #131 #126 #87 #109]: false
#133 := [lemma #132]: #61
#100 := (or #60 #97)
#101 := [def-axiom]: #100
#139 := [unit-resolution #101 #133]: #97
#140 := (not #97)
#141 := (or #140 #124)
#142 := [th-lemma arith triangle-eq]: #141
#143 := [unit-resolution #142 #139]: #124
#144 := [th-lemma arith farkas 3/2 1/2 1 1 1 #133 #136 #87 #143 #138]: false
#145 := [lemma #144]: #54
#146 := [unit-resolution #91 #145]: #93
#147 := [unit-resolution #114 #146]: #108
[th-lemma arith farkas 1/2 3/2 1 1 1 #145 #133 #87 #143 #147]: false
unsat
20b2c8eb46b2776c1fa0854f9d43594550f591a7 57 0
#2 := false
#15 := 0::Real
decl f3 :: Real
#7 := f3
decl f4 :: Real
#8 := f4
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Real)
#42 := (if #39 f4 f3)
#48 := (* -1::Real #42)
#49 := (+ f3 #48)
#50 := (<= #49 0::Real)
#55 := (not #50)
#9 := (<= f3 f4)
#10 := (if #9 f4 f3)
#11 := (<= f3 #10)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #50)
#45 := (<= f3 #42)
#51 := (iff #45 #50)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#63 := (= f3 #42)
#64 := (not #39)
#68 := [hypothesis]: #39
#59 := (+ f4 #48)
#66 := (<= #59 0::Real)
#62 := (= f4 #42)
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#69 := [unit-resolution #60 #68]: #62
#70 := (not #62)
#71 := (or #70 #66)
#72 := [th-lemma arith triangle-eq]: #71
#73 := [unit-resolution #72 #69]: #66
#74 := [th-lemma arith farkas 1 -1 1 #73 #58 #68]: false
#75 := [lemma #74]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#76 := [unit-resolution #35 #75]: #63
#77 := (not #63)
#78 := (or #77 #50)
#79 := [th-lemma arith triangle-eq]: #78
[unit-resolution #79 #76 #58]: false
unsat
9b77594e0c04af6813ea9fe3eb19b0eebd98140f 57 0
#2 := false
#15 := 0::Real
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#36 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#38 := (>= #40 0::Real)
#42 := (if #38 f3 f4)
#48 := (* -1::Real #42)
#59 := (+ f4 #48)
#72 := (<= #59 0::Real)
#63 := (= f4 #42)
#64 := (not #38)
#62 := (= f3 #42)
#67 := (not #62)
#49 := (+ f3 #48)
#50 := (<= #49 0::Real)
#55 := (not #50)
#9 := (<= f4 f3)
#10 := (if #9 f3 f4)
#11 := (<= f3 #10)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #50)
#45 := (<= f3 #42)
#51 := (iff #45 #50)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#37 := (iff #9 #38)
#41 := [rewrite]: #37
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#66 := [hypothesis]: #62
#68 := (or #67 #50)
#69 := [th-lemma arith triangle-eq]: #68
#70 := [unit-resolution #69 #66 #58]: false
#71 := [lemma #70]: #67
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#74 := [unit-resolution #60 #71]: #64
#61 := (or #38 #63)
#35 := [def-axiom]: #61
#75 := [unit-resolution #35 #74]: #63
#76 := (not #63)
#77 := (or #76 #72)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #75]: #72
[th-lemma arith farkas 1 1 1 #58 #74 #79]: false
unsat
93b3508f44b6322ae09524c5a254ca2b1a5b26c3 103 0
#2 := false
#20 := 0::Real
decl f3 :: Real
#7 := f3
decl f5 :: Real
#10 := f5
#46 := -1::Real
#53 := (* -1::Real f5)
#65 := (+ f3 #53)
#66 := (<= #65 0::Real)
#69 := (if #66 f5 f3)
#75 := (* -1::Real #69)
decl f4 :: Real
#8 := f4
#76 := (+ f4 #75)
#77 := (<= #76 0::Real)
#78 := (not #77)
#54 := (+ f4 #53)
#55 := (<= #54 0::Real)
#56 := (not #55)
#49 := (* -1::Real f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Real)
#47 := (not #48)
#59 := (and #47 #56)
#62 := (not #59)
#83 := (or #62 #78)
#86 := (not #83)
#13 := (<= f3 f5)
#14 := (if #13 f5 f3)
#15 := (< #14 f4)
#11 := (< f5 f4)
#9 := (< f3 f4)
#12 := (and #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#89 := (iff #17 #86)
#39 := (not #12)
#40 := (or #39 #15)
#43 := (not #40)
#87 := (iff #43 #86)
#84 := (iff #40 #83)
#81 := (iff #15 #78)
#72 := (< #69 f4)
#79 := (iff #72 #78)
#80 := [rewrite]: #79
#73 := (iff #15 #72)
#70 := (= #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#82 := [trans #74 #80]: #81
#63 := (iff #39 #62)
#60 := (iff #12 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#51 := (iff #9 #47)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#85 := [monotonicity #64 #82]: #84
#88 := [monotonicity #85]: #87
#44 := (iff #17 #43)
#41 := (iff #16 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#90 := [trans #45 #88]: #89
#38 := [asserted]: #17
#91 := [mp #38 #90]: #86
#95 := [not-or-elim #91]: #77
#92 := [not-or-elim #91]: #59
#93 := [and-elim #92]: #47
#99 := (+ f3 #75)
#118 := (>= #99 0::Real)
#106 := (= f3 #69)
#107 := (not #66)
#105 := (= f5 #69)
#112 := (not #105)
#102 := (+ f5 #75)
#100 := (>= #102 0::Real)
#109 := (not #100)
#94 := [and-elim #92]: #56
#97 := [hypothesis]: #100
#98 := [th-lemma arith farkas -1 -1 1 #97 #94 #95]: false
#110 := [lemma #98]: #109
#111 := [hypothesis]: #105
#113 := (or #112 #100)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111 #110]: false
#116 := [lemma #115]: #112
#108 := (or #107 #105)
#103 := [def-axiom]: #108
#119 := [unit-resolution #103 #116]: #107
#104 := (or #66 #106)
#101 := [def-axiom]: #104
#120 := [unit-resolution #101 #119]: #106
#121 := (not #106)
#122 := (or #121 #118)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #118
[th-lemma arith farkas -1 1 1 #124 #93 #95]: false
unsat
7b686f77e111467a15fb3e7ff5fcf4bbb1a56717 96 0
#2 := false
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#17 := 0::Real
#38 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#48 := (>= #40 0::Real)
#50 := (if #48 f3 f4)
#41 := (<= #40 0::Real)
#44 := (if #41 f4 f3)
#53 := (= #44 #50)
#60 := (= f3 #50)
#65 := (not #41)
#63 := (= f4 #44)
#107 := (not #63)
#67 := (= f4 #50)
#74 := (not #67)
#75 := [hypothesis]: #74
#71 := (or #48 #67)
#72 := [def-axiom]: #71
#76 := [unit-resolution #72 #75]: #48
#68 := (not #48)
#69 := (or #68 #60)
#70 := [def-axiom]: #69
#77 := [unit-resolution #70 #76]: #60
#97 := (= f4 f3)
#73 := (= f3 f4)
#64 := (= f3 #44)
#87 := (not #64)
#56 := (not #53)
#88 := (iff #56 #87)
#85 := (iff #53 #64)
#83 := (iff #64 #53)
#78 := (= #50 #44)
#81 := (iff #78 #53)
#82 := [commutativity]: #81
#79 := (iff #64 #78)
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#86 := [symm #84]: #85
#89 := [monotonicity #86]: #88
#11 := (<= f4 f3)
#12 := (if #11 f3 f4)
#9 := (<= f3 f4)
#10 := (if #9 f4 f3)
#13 := (= #10 #12)
#14 := (not #13)
#57 := (iff #14 #56)
#54 := (iff #13 #53)
#51 := (= #12 #50)
#47 := (iff #11 #48)
#49 := [rewrite]: #47
#52 := [monotonicity #49]: #51
#45 := (= #10 #44)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#55 := [monotonicity #46 #52]: #54
#58 := [monotonicity #55]: #57
#35 := [asserted]: #14
#59 := [mp #35 #58]: #56
#90 := [mp #59 #89]: #87
#62 := (or #41 #64)
#37 := [def-axiom]: #62
#91 := [unit-resolution #37 #90]: #41
#94 := (or #73 #65)
#92 := (or #73 #65 #68)
#93 := [th-lemma arith triangle-eq]: #92
#95 := [unit-resolution #93 #76]: #94
#96 := [unit-resolution #95 #91]: #73
#98 := [symm #96]: #97
#99 := [trans #98 #77]: #67
#100 := [unit-resolution #75 #99]: false
#101 := [lemma #100]: #67
#103 := (= #44 f4)
#102 := [hypothesis]: #63
#104 := [symm #102]: #103
#105 := [trans #104 #101]: #53
#106 := [unit-resolution #59 #105]: false
#108 := [lemma #106]: #107
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#109 := [unit-resolution #61 #108]: #65
#111 := (or #48 #41)
#112 := [th-lemma arith farkas 1 1]: #111
#113 := [unit-resolution #112 #109]: #48
#114 := [unit-resolution #70 #113]: #60
#117 := (= #44 f3)
#110 := [unit-resolution #37 #109]: #64
#118 := [symm #110]: #117
#119 := [trans #118 #114]: #53
[unit-resolution #59 #119]: false
unsat
e7ef38b396887508c5c85846a0548164638b9e8d 60 0
#2 := false
decl f3 :: Real
#8 := f3
#7 := 0::Real
#10 := (<= f3 0::Real)
#11 := (if #10 0::Real f3)
#68 := (= f3 #11)
#80 := (= 0::Real #11)
#67 := (= #11 0::Real)
#71 := (not #68)
#12 := (= #11 f3)
#58 := (not #12)
#72 := (iff #58 #71)
#61 := (iff #12 #68)
#62 := [commutativity]: #61
#73 := [monotonicity #62]: #72
#44 := (>= f3 0::Real)
#45 := (not #44)
#48 := (or #45 #12)
#51 := (not #48)
#9 := (<= 0::Real f3)
#13 := (implies #9 #12)
#14 := (not #13)
#54 := (iff #14 #51)
#35 := (not #9)
#36 := (or #35 #12)
#39 := (not #36)
#52 := (iff #39 #51)
#49 := (iff #36 #48)
#46 := (iff #35 #45)
#42 := (iff #9 #44)
#43 := [rewrite]: #42
#47 := [monotonicity #43]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#55 := [trans #41 #53]: #54
#34 := [asserted]: #14
#56 := [mp #34 #55]: #51
#59 := [not-or-elim #56]: #58
#74 := [mp #59 #73]: #71
#66 := (or #10 #68)
#63 := [def-axiom]: #66
#75 := [unit-resolution #63 #74]: #10
#69 := (not #10)
#70 := (or #69 #67)
#65 := [def-axiom]: #70
#76 := [unit-resolution #65 #75]: #67
#81 := [symm #76]: #80
#64 := (= f3 0::Real)
#57 := [not-or-elim #56]: #44
#77 := (or #64 #69 #45)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #57 #75]: #64
#82 := [trans #79 #81]: #68
[unit-resolution #74 #82]: false
unsat
af8ce155afa78bf936e9e665a7def6acf5b7d81b 214 0
#2 := false
#8 := 0::Real
decl f4 :: Real
#13 := f4
#42 := -1::Real
#57 := (* -1::Real f4)
#93 := (>= f4 0::Real)
#100 := (if #93 f4 #57)
#105 := (* -1::Real #100)
#160 := (+ #57 #105)
#182 := (<= #160 0::Real)
#136 := (= #57 #100)
#94 := (not #93)
decl f3 :: Real
#7 := f3
#111 := (+ f3 #57)
#112 := (<= #111 0::Real)
#115 := (if #112 f4 f3)
#154 := (* -1::Real #115)
#155 := (+ f4 #154)
#156 := (<= #155 0::Real)
#157 := (+ f3 #154)
#192 := (<= #157 0::Real)
#148 := (= f3 #115)
#149 := (not #112)
#147 := (= f4 #115)
#194 := [hypothesis]: #112
#150 := (or #149 #147)
#151 := [def-axiom]: #150
#195 := [unit-resolution #151 #194]: #147
#196 := (not #147)
#197 := (or #196 #156)
#198 := [th-lemma arith triangle-eq]: #197
#199 := [unit-resolution #198 #195]: #156
#178 := (not #156)
#190 := (or #94 #178)
#158 := (+ f4 #105)
#159 := (<= #158 0::Real)
#135 := (= f4 #100)
#164 := [hypothesis]: #93
#143 := (or #94 #135)
#144 := [def-axiom]: #143
#165 := [unit-resolution #144 #164]: #135
#166 := (not #135)
#167 := (or #166 #159)
#168 := [th-lemma arith triangle-eq]: #167
#169 := [unit-resolution #168 #165]: #159
#78 := (>= f3 0::Real)
#79 := (not #78)
#176 := [hypothesis]: #156
#179 := (or #79 #94 #178)
#124 := (+ #100 #115)
#43 := (* -1::Real f3)
#85 := (if #78 f3 #43)
#125 := (+ #85 #124)
#122 := (>= #125 0::Real)
#128 := (not #122)
#18 := (<= f3 f4)
#19 := (if #18 f4 f3)
#15 := (- f4)
#14 := (< f4 0::Real)
#16 := (if #14 #15 f4)
#10 := (- f3)
#9 := (< f3 0::Real)
#11 := (if #9 #10 f3)
#12 := (- #11)
#17 := (- #12 #16)
#20 := (<= #17 #19)
#21 := (not #20)
#131 := (iff #21 #128)
#60 := (if #14 #57 f4)
#66 := (* -1::Real #60)
#46 := (if #9 #43 f3)
#52 := (* -1::Real #46)
#67 := (+ #52 #66)
#72 := (<= #67 #19)
#75 := (not #72)
#129 := (iff #75 #128)
#126 := (iff #72 #122)
#90 := (* -1::Real #85)
#108 := (+ #90 #105)
#118 := (<= #108 #115)
#121 := (iff #118 #122)
#123 := [rewrite]: #121
#119 := (iff #72 #118)
#116 := (= #19 #115)
#113 := (iff #18 #112)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#109 := (= #67 #108)
#106 := (= #66 #105)
#103 := (= #60 #100)
#97 := (if #94 #57 f4)
#101 := (= #97 #100)
#102 := [rewrite]: #101
#98 := (= #60 #97)
#95 := (iff #14 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#104 := [trans #99 #102]: #103
#107 := [monotonicity #104]: #106
#91 := (= #52 #90)
#88 := (= #46 #85)
#82 := (if #79 #43 f3)
#86 := (= #82 #85)
#87 := [rewrite]: #86
#83 := (= #46 #82)
#80 := (iff #9 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#110 := [monotonicity #92 #107]: #109
#120 := [monotonicity #110 #117]: #119
#127 := [trans #120 #123]: #126
#130 := [monotonicity #127]: #129
#76 := (iff #21 #75)
#73 := (iff #20 #72)
#70 := (= #17 #67)
#63 := (- #52 #60)
#68 := (= #63 #67)
#69 := [rewrite]: #68
#64 := (= #17 #63)
#61 := (= #16 #60)
#58 := (= #15 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#55 := (= #12 #52)
#49 := (- #46)
#53 := (= #49 #52)
#54 := [rewrite]: #53
#50 := (= #12 #49)
#47 := (= #11 #46)
#44 := (= #10 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#65 := [monotonicity #56 #62]: #64
#71 := [trans #65 #69]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#132 := [trans #77 #130]: #131
#41 := [asserted]: #21
#133 := [mp #41 #132]: #128
#161 := (+ f3 #90)
#162 := (<= #161 0::Real)
#139 := (= f3 #85)
#170 := [hypothesis]: #78
#141 := (or #79 #139)
#142 := [def-axiom]: #141
#171 := [unit-resolution #142 #170]: #139
#172 := (not #139)
#173 := (or #172 #162)
#174 := [th-lemma arith triangle-eq]: #173
#175 := [unit-resolution #174 #171]: #162
#177 := [th-lemma arith farkas -2 1 -1 1 1 1 #164 #176 #170 #175 #133 #169]: false
#180 := [lemma #177]: #179
#183 := [unit-resolution #180 #164 #176]: #79
#163 := (+ #43 #90)
#181 := (<= #163 0::Real)
#140 := (= #43 #85)
#137 := (or #78 #140)
#138 := [def-axiom]: #137
#184 := [unit-resolution #138 #183]: #140
#185 := (not #140)
#186 := (or #185 #181)
#187 := [th-lemma arith triangle-eq]: #186
#188 := [unit-resolution #187 #184]: #181
#189 := [th-lemma arith farkas 2 1 1 1 1 1 #164 #176 #133 #188 #183 #169]: false
#191 := [lemma #189]: #190
#200 := [unit-resolution #191 #199]: #94
#145 := (or #93 #136)
#146 := [def-axiom]: #145
#201 := [unit-resolution #146 #200]: #136
#202 := (not #136)
#203 := (or #202 #182)
#204 := [th-lemma arith triangle-eq]: #203
#205 := [unit-resolution #204 #201]: #182
#206 := (or #79 #149 #93)
#207 := [th-lemma arith assign-bounds 1 1]: #206
#208 := [unit-resolution #207 #200 #194]: #79
#209 := [unit-resolution #138 #208]: #140
#210 := [unit-resolution #187 #209]: #181
#211 := [th-lemma arith farkas 1 1 1 1 1 #199 #133 #210 #208 #205]: false
#212 := [lemma #211]: #149
#152 := (or #112 #148)
#153 := [def-axiom]: #152
#223 := [unit-resolution #153 #212]: #148
#224 := (not #148)
#225 := (or #224 #192)
#226 := [th-lemma arith triangle-eq]: #225
#227 := [unit-resolution #226 #223]: #192
#230 := (not #192)
#231 := (or #156 #112 #230)
#232 := [th-lemma arith assign-bounds 1 1]: #231
#233 := [unit-resolution #232 #212 #227]: #156
#234 := [unit-resolution #191 #233]: #94
#235 := [unit-resolution #146 #234]: #136
#236 := [unit-resolution #204 #235]: #182
#215 := [hypothesis]: #79
#216 := (or #94 #78 #112)
#217 := [th-lemma arith assign-bounds 1 1]: #216
#218 := [unit-resolution #217 #215 #212]: #94
#219 := [unit-resolution #146 #218]: #136
#220 := [unit-resolution #204 #219]: #182
#221 := [unit-resolution #138 #215]: #140
#222 := [unit-resolution #187 #221]: #181
#228 := [th-lemma arith farkas 1 1 1 1 1 1 #215 #212 #227 #133 #222 #220]: false
#229 := [lemma #228]: #78
#237 := [unit-resolution #142 #229]: #139
#238 := [unit-resolution #174 #237]: #162
[th-lemma arith farkas 1 1 1 1 1 1 #212 #227 #133 #229 #238 #236]: false
unsat
e807c28ea702b232e7c32bfa79cb58b47a16c570 18 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := (<= f3 f3)
#9 := (not #8)
#40 := (iff #9 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #9 #35)
#33 := (iff #8 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #9
[mp #30 #41]: false
unsat
4cad11a2b8747d7e662d4f469d31b851aa375cfb 50 0
#2 := false
#18 := 0::Real
decl f4 :: Real
#8 := f4
#44 := -1::Real
#45 := (* -1::Real f4)
decl f3 :: Real
#7 := f3
#46 := (+ f3 #45)
#47 := (<= #46 0::Real)
#53 := -3::Real
#54 := (* -3::Real f4)
#10 := 3::Real
#11 := (* 3::Real f3)
#55 := (+ #11 #54)
#56 := (<= #55 0::Real)
#50 := (not #47)
#59 := (or #50 #56)
#62 := (not #59)
#12 := (* 3::Real f4)
#13 := (<= #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#65 := (iff #15 #62)
#37 := (not #9)
#38 := (or #37 #13)
#41 := (not #38)
#63 := (iff #41 #62)
#60 := (iff #38 #59)
#57 := (iff #13 #56)
#58 := [rewrite]: #57
#51 := (iff #37 #50)
#48 := (iff #9 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#66 := [trans #43 #64]: #65
#36 := [asserted]: #15
#67 := [mp #36 #66]: #62
#68 := [not-or-elim #67]: #47
#69 := (not #56)
#70 := [not-or-elim #67]: #69
[th-lemma arith farkas -1/3 1 #70 #68]: false
unsat
092a6f5d63ab793d33d43f7284b78642e74e2334 55 0
#2 := false
#18 := 0::Real
decl f4 :: Real
#8 := f4
#58 := -3::Real
#61 := (* -3::Real f4)
decl f3 :: Real
#7 := f3
#10 := 3::Real
#11 := (* 3::Real f3)
#62 := (+ #11 #61)
#60 := (>= #62 0::Real)
#59 := (not #60)
#44 := -1::Real
#47 := (* -1::Real f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::Real)
#65 := (or #46 #59)
#68 := (not #65)
#12 := (* 3::Real f4)
#13 := (< #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#71 := (iff #15 #68)
#37 := (not #9)
#38 := (or #37 #13)
#41 := (not #38)
#69 := (iff #41 #68)
#66 := (iff #38 #65)
#63 := (iff #13 #59)
#64 := [rewrite]: #63
#56 := (iff #37 #46)
#45 := (not #46)
#51 := (not #45)
#54 := (iff #51 #46)
#55 := [rewrite]: #54
#52 := (iff #37 #51)
#49 := (iff #9 #45)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#67 := [monotonicity #57 #64]: #66
#70 := [monotonicity #67]: #69
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#72 := [trans #43 #70]: #71
#36 := [asserted]: #15
#73 := [mp #36 #72]: #68
#75 := [not-or-elim #73]: #60
#74 := [not-or-elim #73]: #45
[th-lemma arith farkas 3 1 #74 #75]: false
unsat
775858e4a5147699bba8b0137f62c6a4d4ac7293 52 0
#2 := false
#15 := 0::Real
decl f4 :: Real
#8 := f4
#41 := -1::Real
#44 := (* -1::Real f4)
decl f3 :: Real
#7 := f3
#45 := (+ f3 #44)
#55 := (<= #45 0::Real)
#68 := (not #55)
#43 := (>= #45 0::Real)
#58 := (or #43 #55)
#61 := (not #58)
#10 := (<= f3 f4)
#9 := (< f3 f4)
#11 := (implies #9 #10)
#12 := (not #11)
#64 := (iff #12 #61)
#34 := (not #9)
#35 := (or #34 #10)
#38 := (not #35)
#62 := (iff #38 #61)
#59 := (iff #35 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#53 := (iff #34 #43)
#42 := (not #43)
#48 := (not #42)
#51 := (iff #48 #43)
#52 := [rewrite]: #51
#49 := (iff #34 #48)
#46 := (iff #9 #42)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#60 := [monotonicity #54 #57]: #59
#63 := [monotonicity #60]: #62
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#65 := [trans #40 #63]: #64
#33 := [asserted]: #12
#66 := [mp #33 #65]: #61
#69 := [not-or-elim #66]: #68
#67 := [not-or-elim #66]: #42
#77 := (or #55 #43)
#78 := [th-lemma arith farkas 1 1]: #77
#79 := [unit-resolution #78 #67]: #55
[unit-resolution #79 #69]: false
unsat
49cc2e53f2afe91d793e2317f4c575f413ada734 15 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := (< f3 f3)
#9 := (not #8)
#10 := (not #9)
#36 := (iff #10 false)
#34 := (iff #8 false)
#35 := [rewrite]: #34
#32 := (iff #10 #8)
#33 := [rewrite]: #32
#37 := [trans #33 #35]: #36
#31 := [asserted]: #10
[mp #31 #37]: false
unsat
eb730fdf8b63348f25dbf613b5bd139042a0fc61 75 0
#2 := false
#18 := 0::Real
decl f5 :: Real
#10 := f5
#53 := -1::Real
#54 := (* -1::Real f5)
decl f4 :: Real
#8 := f4
#55 := (+ f4 #54)
#56 := (<= #55 0::Real)
decl f3 :: Real
#7 := f3
#62 := (+ f3 #54)
#63 := (<= #62 0::Real)
#59 := (not #56)
#66 := (* -1::Real f4)
#67 := (+ f3 #66)
#68 := (<= #67 0::Real)
#71 := (not #68)
#80 := (or #71 #59 #63)
#85 := (not #80)
#12 := (<= f3 f5)
#11 := (<= f4 f5)
#13 := (implies #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#88 := (iff #15 #85)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#86 := (iff #50 #85)
#83 := (iff #45 #80)
#74 := (or #59 #63)
#77 := (or #71 #74)
#81 := (iff #77 #80)
#82 := [rewrite]: #81
#78 := (iff #45 #77)
#75 := (iff #38 #74)
#64 := (iff #12 #63)
#65 := [rewrite]: #64
#60 := (iff #37 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#76 := [monotonicity #61 #65]: #75
#72 := (iff #44 #71)
#69 := (iff #9 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#79 := [monotonicity #73 #76]: #78
#84 := [trans #79 #82]: #83
#87 := [monotonicity #84]: #86
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#89 := [trans #52 #87]: #88
#36 := [asserted]: #15
#90 := [mp #36 #89]: #85
#92 := [not-or-elim #90]: #56
#93 := (not #63)
#94 := [not-or-elim #90]: #93
#91 := [not-or-elim #90]: #68
[th-lemma arith farkas 1 -1 1 #91 #94 #92]: false
unsat
c4e1cef39d74ef1da60772d29906445a2b8051f6 80 0
#2 := false
#18 := 0::Real
decl f5 :: Real
#10 := f5
#53 := -1::Real
#54 := (* -1::Real f5)
decl f4 :: Real
#8 := f4
#55 := (+ f4 #54)
#56 := (<= #55 0::Real)
decl f3 :: Real
#7 := f3
#62 := (+ f3 #54)
#63 := (<= #62 0::Real)
#59 := (not #56)
#68 := (* -1::Real f4)
#69 := (+ f3 #68)
#67 := (>= #69 0::Real)
#85 := (or #67 #59 #63)
#90 := (not #85)
#12 := (<= f3 f5)
#11 := (<= f4 f5)
#13 := (implies #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#93 := (iff #15 #90)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#91 := (iff #50 #90)
#88 := (iff #45 #85)
#79 := (or #59 #63)
#82 := (or #67 #79)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #45 #82)
#80 := (iff #38 #79)
#64 := (iff #12 #63)
#65 := [rewrite]: #64
#60 := (iff #37 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#81 := [monotonicity #61 #65]: #80
#77 := (iff #44 #67)
#66 := (not #67)
#72 := (not #66)
#75 := (iff #72 #67)
#76 := [rewrite]: #75
#73 := (iff #44 #72)
#70 := (iff #9 #66)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#84 := [monotonicity #78 #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#94 := [trans #52 #92]: #93
#36 := [asserted]: #15
#95 := [mp #36 #94]: #90
#97 := [not-or-elim #95]: #56
#96 := [not-or-elim #95]: #66
#98 := (not #63)
#99 := [not-or-elim #95]: #98
[th-lemma arith farkas 1 1 1 #99 #96 #97]: false
unsat
ee1c33aaa657ed33c96d59b6dc6de0701ab6de06 80 0
#2 := false
#18 := 0::Real
decl f5 :: Real
#10 := f5
#53 := -1::Real
#56 := (* -1::Real f5)
decl f3 :: Real
#7 := f3
#67 := (+ f3 #56)
#68 := (<= #67 0::Real)
#98 := (not #68)
decl f4 :: Real
#8 := f4
#57 := (+ f4 #56)
#55 := (>= #57 0::Real)
#71 := (* -1::Real f4)
#72 := (+ f3 #71)
#73 := (<= #72 0::Real)
#76 := (not #73)
#85 := (or #76 #55 #68)
#90 := (not #85)
#12 := (<= f3 f5)
#11 := (< f4 f5)
#13 := (implies #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#93 := (iff #15 #90)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#91 := (iff #50 #90)
#88 := (iff #45 #85)
#79 := (or #55 #68)
#82 := (or #76 #79)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #45 #82)
#80 := (iff #38 #79)
#69 := (iff #12 #68)
#70 := [rewrite]: #69
#65 := (iff #37 #55)
#54 := (not #55)
#60 := (not #54)
#63 := (iff #60 #55)
#64 := [rewrite]: #63
#61 := (iff #37 #60)
#58 := (iff #11 #54)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#81 := [monotonicity #66 #70]: #80
#77 := (iff #44 #76)
#74 := (iff #9 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#84 := [monotonicity #78 #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#94 := [trans #52 #92]: #93
#36 := [asserted]: #15
#95 := [mp #36 #94]: #90
#99 := [not-or-elim #95]: #98
#97 := [not-or-elim #95]: #54
#96 := [not-or-elim #95]: #73
[th-lemma arith farkas 1 1 1 #96 #97 #99]: false
unsat
f87b387d325f83aeb1ec75660e6d181565616c1a 85 0
#2 := false
#18 := 0::Real
decl f5 :: Real
#10 := f5
#53 := -1::Real
#56 := (* -1::Real f5)
decl f3 :: Real
#7 := f3
#69 := (+ f3 #56)
#68 := (>= #69 0::Real)
#67 := (not #68)
decl f4 :: Real
#8 := f4
#57 := (+ f4 #56)
#55 := (>= #57 0::Real)
#74 := (* -1::Real f4)
#75 := (+ f3 #74)
#73 := (>= #75 0::Real)
#91 := (or #73 #55 #67)
#96 := (not #91)
#12 := (< f3 f5)
#11 := (< f4 f5)
#13 := (implies #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#99 := (iff #15 #96)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#97 := (iff #50 #96)
#94 := (iff #45 #91)
#85 := (or #55 #67)
#88 := (or #73 #85)
#92 := (iff #88 #91)
#93 := [rewrite]: #92
#89 := (iff #45 #88)
#86 := (iff #38 #85)
#70 := (iff #12 #67)
#71 := [rewrite]: #70
#65 := (iff #37 #55)
#54 := (not #55)
#60 := (not #54)
#63 := (iff #60 #55)
#64 := [rewrite]: #63
#61 := (iff #37 #60)
#58 := (iff #11 #54)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#87 := [monotonicity #66 #71]: #86
#83 := (iff #44 #73)
#72 := (not #73)
#78 := (not #72)
#81 := (iff #78 #73)
#82 := [rewrite]: #81
#79 := (iff #44 #78)
#76 := (iff #9 #72)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#90 := [monotonicity #84 #87]: #89
#95 := [trans #90 #93]: #94
#98 := [monotonicity #95]: #97
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#100 := [trans #52 #98]: #99
#36 := [asserted]: #15
#101 := [mp #36 #100]: #96
#104 := [not-or-elim #101]: #68
#103 := [not-or-elim #101]: #54
#102 := [not-or-elim #101]: #72
[th-lemma arith farkas 1 1 1 #102 #103 #104]: false
unsat
cb8792748fe4720134d96a488ba91a6116c7639a 69 0
#2 := false
#19 := 0::Real
decl f5 :: Real
#10 := f5
#45 := -1::Real
#53 := (* -1::Real f5)
decl f3 :: Real
#7 := f3
#64 := (+ f3 #53)
#65 := (<= #64 0::Real)
#66 := (not #65)
decl f4 :: Real
#8 := f4
#54 := (+ f4 #53)
#52 := (>= #54 0::Real)
#55 := (not #52)
#48 := (* -1::Real f4)
#49 := (+ f3 #48)
#47 := (>= #49 0::Real)
#46 := (not #47)
#58 := (and #46 #55)
#61 := (not #58)
#76 := (or #61 #65)
#79 := (not #76)
#13 := (< f5 f3)
#14 := (not #13)
#11 := (< f4 f5)
#9 := (< f3 f4)
#12 := (and #9 #11)
#15 := (implies #12 #14)
#16 := (not #15)
#82 := (iff #16 #79)
#38 := (not #12)
#39 := (or #38 #14)
#42 := (not #39)
#80 := (iff #42 #79)
#77 := (iff #39 #76)
#74 := (iff #14 #65)
#69 := (not #66)
#72 := (iff #69 #65)
#73 := [rewrite]: #72
#70 := (iff #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#62 := (iff #38 #61)
#59 := (iff #12 #58)
#56 := (iff #11 #55)
#57 := [rewrite]: #56
#50 := (iff #9 #46)
#51 := [rewrite]: #50
#60 := [monotonicity #51 #57]: #59
#63 := [monotonicity #60]: #62
#78 := [monotonicity #63 #75]: #77
#81 := [monotonicity #78]: #80
#43 := (iff #16 #42)
#40 := (iff #15 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#83 := [trans #44 #81]: #82
#37 := [asserted]: #16
#84 := [mp #37 #83]: #79
#88 := [not-or-elim #84]: #66
#85 := [not-or-elim #84]: #58
#87 := [and-elim #85]: #55
#86 := [and-elim #85]: #46
[th-lemma arith farkas 1 1 1 #86 #87 #88]: false
unsat
f50e567111580fcf350e8f08b1127378c6cf44c1 46 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f10 :: S2
#29 := f10
decl f6 :: (-> S6 S2 S5)
decl f9 :: S2
#27 := f9
decl f7 :: S6
#8 := f7
#28 := (f6 f7 f9)
#30 := (f5 #28 f10)
decl f4 :: S3
#7 := f4
#31 := (f3 f4 #30)
#32 := (= f9 #31)
#136 := (= #31 f9)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#552 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#553 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #552) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#556 := (iff #15 #553)
#554 := (iff #14 #14)
#555 := [refl]: #554
#557 := [quant-intro #555]: #556
#71 := (~ #15 #15)
#69 := (~ #14 #14)
#70 := [refl]: #69
#72 := [nnf-pos #70]: #71
#54 := [asserted]: #15
#59 := [mp~ #54 #72]: #15
#558 := [mp #59 #557]: #553
#223 := (not #553)
#138 := (or #223 #136)
#224 := [quant-inst #27 #29]: #138
#208 := [unit-resolution #224 #558]: #136
#544 := [symm #208]: #32
#33 := (not #32)
#57 := [asserted]: #33
[unit-resolution #57 #544]: false
unsat
e847b4eb330cb98ec19557ff4729a4ee5eac5c07 46 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f9 :: S2
#27 := f9
decl f6 :: (-> S6 S2 S5)
decl f10 :: S2
#28 := f10
decl f7 :: S6
#8 := f7
#29 := (f6 f7 f10)
#30 := (f5 #29 f9)
decl f8 :: S3
#16 := f8
#31 := (f3 f8 #30)
#32 := (= f9 #31)
#137 := (= #31 f9)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#552 := (pattern #12)
#17 := (f3 f8 #12)
#18 := (= #17 #11)
#559 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #552) #18)
#19 := (forall (vars (?v0 S2) (?v1 S2)) #18)
#562 := (iff #19 #559)
#560 := (iff #18 #18)
#561 := [refl]: #560
#563 := [quant-intro #561]: #562
#61 := (~ #19 #19)
#60 := (~ #18 #18)
#73 := [refl]: #60
#62 := [nnf-pos #73]: #61
#55 := [asserted]: #19
#74 := [mp~ #55 #62]: #19
#564 := [mp #74 #563]: #559
#227 := (not #559)
#228 := (or #227 #137)
#225 := [quant-inst #28 #27]: #228
#208 := [unit-resolution #225 #564]: #137
#544 := [symm #208]: #32
#33 := (not #32)
#57 := [asserted]: #33
[unit-resolution #57 #544]: false
unsat
e15e69027875c204e11039aff6e36cce009f63f3 86 0
#2 := false
decl f5 :: (-> S5 S2 S4)
decl f9 :: S2
#27 := f9
decl f6 :: (-> S6 S2 S5)
decl f10 :: S2
#29 := f10
decl f7 :: S6
#8 := f7
#31 := (f6 f7 f10)
#32 := (f5 #31 f9)
#28 := (f6 f7 f9)
#30 := (f5 #28 f10)
#33 := (= #30 #32)
#541 := (= f10 f9)
#34 := (= f9 f10)
decl f3 :: (-> S3 S4 S2)
decl f4 :: S3
#7 := f4
#548 := (f3 f4 #32)
#221 := (= #548 f10)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#560 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#561 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #560) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#564 := (iff #15 #561)
#562 := (iff #14 #14)
#563 := [refl]: #562
#565 := [quant-intro #563]: #564
#79 := (~ #15 #15)
#77 := (~ #14 #14)
#78 := [refl]: #77
#80 := [nnf-pos #78]: #79
#57 := [asserted]: #15
#66 := [mp~ #57 #80]: #15
#566 := [mp #66 #565]: #561
#554 := (not #561)
#553 := (or #554 #221)
#559 := [quant-inst #29 #27]: #553
#208 := [unit-resolution #559 #566]: #221
#199 := (= f9 #548)
#233 := (f3 f4 #30)
#197 := (= #233 #548)
#144 := (not #34)
#549 := [hypothesis]: #144
#235 := (or #33 #34)
#61 := (not #33)
#62 := (iff #61 #34)
#35 := (iff #33 #34)
#36 := (not #35)
#63 := (iff #36 #62)
#64 := [rewrite]: #63
#60 := [asserted]: #36
#67 := [mp #60 #64]: #62
#230 := (not #62)
#223 := (or #33 #34 #230)
#234 := [def-axiom]: #223
#236 := [unit-resolution #234 #67]: #235
#209 := [unit-resolution #236 #549]: #33
#198 := [monotonicity #209]: #197
#193 := (= f9 #233)
#237 := (= #233 f9)
#210 := (or #554 #237)
#341 := [quant-inst #27 #29]: #210
#551 := [unit-resolution #341 #566]: #237
#535 := [symm #551]: #193
#200 := [trans #535 #198]: #199
#537 := [trans #200 #208]: #34
#538 := [unit-resolution #549 #537]: false
#539 := [lemma #538]: #34
#536 := [symm #539]: #541
#542 := (= #28 #31)
#179 := [monotonicity #539]: #542
#543 := [monotonicity #179 #536]: #33
#146 := (or #61 #144)
#145 := (or #61 #144 #230)
#231 := [def-axiom]: #145
#232 := [unit-resolution #231 #67]: #146
#540 := [unit-resolution #232 #539]: #61
[unit-resolution #540 #543]: false
unsat
072ec5311fec3c6e1f5e2d99691fb9ed86302245 147 0
#2 := false
decl f12 :: S2
#33 := f12
decl f10 :: S2
#29 := f10
#37 := (= f10 f12)
#91 := (not #37)
decl f11 :: S2
#31 := f11
decl f9 :: S2
#27 := f9
#36 := (= f9 f11)
#90 := (not #36)
#77 := (or #90 #91)
decl f5 :: (-> S5 S2 S4)
decl f6 :: (-> S6 S2 S5)
decl f7 :: S6
#8 := f7
#32 := (f6 f7 f11)
#34 := (f5 #32 f12)
#28 := (f6 f7 f9)
#30 := (f5 #28 f10)
#35 := (= #30 #34)
#78 := (not #77)
#570 := [hypothesis]: #78
#164 := (or #77 #37)
#250 := [def-axiom]: #164
#217 := [unit-resolution #250 #570]: #37
#219 := (= #28 #32)
#163 := (or #77 #36)
#249 := [def-axiom]: #163
#218 := [unit-resolution #249 #570]: #36
#556 := [monotonicity #218]: #219
#557 := [monotonicity #556 #217]: #35
#65 := (not #35)
#571 := (or #65 #77)
#95 := (iff #35 #77)
#38 := (and #36 #37)
#66 := (iff #65 #38)
#98 := (iff #66 #95)
#92 := (iff #65 #78)
#96 := (iff #92 #95)
#97 := [rewrite]: #96
#93 := (iff #66 #92)
#79 := (iff #38 #78)
#80 := [rewrite]: #79
#94 := [monotonicity #80]: #93
#99 := [trans #94 #97]: #98
#39 := (iff #35 #38)
#40 := (not #39)
#67 := (iff #40 #66)
#68 := [rewrite]: #67
#64 := [asserted]: #40
#71 := [mp #64 #68]: #66
#100 := [mp #71 #99]: #95
#242 := (not #95)
#256 := (or #65 #77 #242)
#235 := [def-axiom]: #256
#573 := [unit-resolution #235 #100]: #571
#212 := [unit-resolution #573 #570]: #65
#558 := [unit-resolution #212 #557]: false
#559 := [lemma #558]: #77
decl f3 :: (-> S3 S4 S2)
decl f4 :: S3
#7 := f4
#576 := (f3 f4 #34)
#577 := (= #576 f11)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#579 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#580 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #579) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#583 := (iff #15 #580)
#581 := (iff #14 #14)
#582 := [refl]: #581
#584 := [quant-intro #582]: #583
#83 := (~ #15 #15)
#81 := (~ #14 #14)
#82 := [refl]: #81
#84 := [nnf-pos #82]: #83
#61 := [asserted]: #15
#70 := [mp~ #61 #84]: #15
#585 := [mp #70 #584]: #580
#241 := (not #580)
#569 := (or #241 #577)
#228 := [quant-inst #31 #33]: #569
#560 := [unit-resolution #228 #585]: #577
#204 := (= f9 #576)
#229 := (f3 f4 #30)
#564 := (= #229 #576)
#255 := (or #35 #78)
#253 := (or #35 #78 #242)
#254 := [def-axiom]: #253
#252 := [unit-resolution #254 #100]: #255
#555 := [unit-resolution #252 #559]: #35
#203 := [monotonicity #555]: #564
#198 := (= f9 #229)
#360 := (= #229 f9)
#574 := (or #241 #360)
#575 := [quant-inst #27 #29]: #574
#561 := [unit-resolution #575 #585]: #360
#562 := [symm #561]: #198
#565 := [trans #562 #203]: #204
#563 := [trans #565 #560]: #36
decl f8 :: S3
#16 := f8
#227 := (f3 f8 #34)
#232 := (= #227 f12)
#17 := (f3 f8 #12)
#18 := (= #17 #11)
#586 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #579) #18)
#19 := (forall (vars (?v0 S2) (?v1 S2)) #18)
#589 := (iff #19 #586)
#587 := (iff #18 #18)
#588 := [refl]: #587
#590 := [quant-intro #588]: #589
#73 := (~ #19 #19)
#72 := (~ #18 #18)
#85 := [refl]: #72
#74 := [nnf-pos #85]: #73
#62 := [asserted]: #19
#86 := [mp~ #62 #74]: #19
#591 := [mp #86 #590]: #586
#572 := (not #586)
#554 := (or #572 #232)
#216 := [quant-inst #31 #33]: #554
#566 := [unit-resolution #216 #591]: #232
#277 := (= f10 #227)
#567 := (f3 f8 #30)
#275 := (= #567 #227)
#276 := [monotonicity #555]: #275
#553 := (= f10 #567)
#240 := (= #567 f10)
#578 := (or #572 #240)
#568 := [quant-inst #27 #29]: #578
#552 := [unit-resolution #568 #591]: #240
#260 := [symm #552]: #553
#278 := [trans #260 #276]: #277
#171 := [trans #278 #566]: #37
#165 := (or #78 #90 #91)
#251 := [def-axiom]: #165
[unit-resolution #251 #171 #563 #559]: false
unsat
2e4e9225ab02683d5a755c820a7cd4a4252a5720 97 0
#2 := false
decl f8 :: (-> S8 S9 S2)
decl f10 :: (-> S10 S5 S9)
decl f5 :: (-> S6 S3 S5)
decl f22 :: S3
#57 := f22
decl f6 :: (-> S7 S2 S6)
decl f21 :: S2
#55 := f21
decl f7 :: S7
#8 := f7
#56 := (f6 f7 f21)
#58 := (f5 #56 f22)
decl f11 :: (-> S11 S2 S10)
decl f20 :: S2
#53 := f20
decl f12 :: S11
#17 := f12
#54 := (f11 f12 f20)
#59 := (f10 #54 #58)
decl f9 :: S8
#16 := f9
#60 := (f8 f9 #59)
decl f19 :: S3
#49 := f19
decl f18 :: S2
#47 := f18
#48 := (f6 f7 f18)
#50 := (f5 #48 f19)
decl f17 :: S2
#45 := f17
#46 := (f11 f12 f17)
#51 := (f10 #46 #50)
#52 := (f8 f9 #51)
#61 := (= #52 #60)
#62 := (= f17 f20)
#198 := (iff #62 #61)
#63 := (iff #61 #62)
#243 := (= #60 f20)
#19 := (:var 0 S5)
#9 := (:var 1 S2)
#18 := (f11 f12 #9)
#20 := (f10 #18 #19)
#613 := (pattern #20)
#21 := (f8 f9 #20)
#22 := (= #21 #9)
#614 := (forall (vars (?v0 S2) (?v1 S5)) (:pat #613) #22)
#23 := (forall (vars (?v0 S2) (?v1 S5)) #22)
#617 := (iff #23 #614)
#615 := (iff #22 #22)
#616 := [refl]: #615
#618 := [quant-intro #616]: #617
#100 := (~ #23 #23)
#99 := (~ #22 #22)
#118 := [refl]: #99
#101 := [nnf-pos #118]: #100
#86 := [asserted]: #23
#119 := [mp~ #86 #101]: #23
#619 := [mp #119 #618]: #614
#597 := (not #614)
#585 := (or #597 #243)
#586 := [quant-inst #53 #58]: #585
#303 := [unit-resolution #586 #619]: #243
#595 := (= #52 f17)
#239 := (or #597 #595)
#581 := [quant-inst #45 #50]: #239
#304 := [unit-resolution #581 #619]: #595
#305 := [monotonicity #304 #303]: #63
#575 := [symm #305]: #198
#92 := (not #61)
#190 := (not #62)
#576 := (iff #190 #92)
#298 := [monotonicity #575]: #576
#579 := [hypothesis]: #190
#299 := [mp #579 #298]: #92
#281 := (or #61 #62)
#93 := (iff #92 #62)
#64 := (not #63)
#94 := (iff #64 #93)
#95 := [rewrite]: #94
#91 := [asserted]: #64
#98 := [mp #91 #95]: #93
#276 := (not #93)
#269 := (or #61 #62 #276)
#280 := [def-axiom]: #269
#282 := [unit-resolution #280 #98]: #281
#580 := [unit-resolution #282 #579]: #61
#573 := [unit-resolution #580 #299]: false
#577 := [lemma #573]: #62
#578 := [mp #577 #575]: #61
#192 := (or #92 #190)
#191 := (or #92 #190 #276)
#277 := [def-axiom]: #191
#278 := [unit-resolution #277 #98]: #192
#574 := [unit-resolution #278 #577]: #92
[unit-resolution #574 #578]: false
unsat
326c3cc9171e09e8a8be6ed6bdcf7e348fc9488e 204 0
#2 := false
decl f22 :: S8
#57 := f22
decl f19 :: S8
#49 := f19
#63 := (= f19 f22)
#135 := (not #63)
decl f21 :: S2
#55 := f21
decl f18 :: S2
#47 := f18
#62 := (= f18 f21)
#134 := (not #62)
#112 := (or #134 #135)
decl f15 :: (-> S13 S5 S3)
decl f5 :: (-> S6 S3 S5)
decl f10 :: (-> S10 S8 S3)
decl f11 :: (-> S11 S2 S10)
decl f12 :: S11
#17 := f12
#56 := (f11 f12 f21)
#58 := (f10 #56 f22)
decl f6 :: (-> S7 S2 S6)
decl f20 :: S2
#53 := f20
decl f7 :: S7
#8 := f7
#54 := (f6 f7 f20)
#59 := (f5 #54 #58)
decl f16 :: S13
#28 := f16
#60 := (f15 f16 #59)
#48 := (f11 f12 f18)
#50 := (f10 #48 f19)
decl f17 :: S2
#45 := f17
#46 := (f6 f7 f17)
#51 := (f5 #46 #50)
#52 := (f15 f16 #51)
#61 := (= #52 #60)
#306 := (= #58 #60)
#612 := (= #60 #58)
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#623 := (pattern #12)
#29 := (f15 f16 #12)
#30 := (= #29 #11)
#643 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #623) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3)) #30)
#646 := (iff #31 #643)
#644 := (iff #30 #30)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#106 := (~ #31 #31)
#125 := (~ #30 #30)
#126 := [refl]: #125
#107 := [nnf-pos #126]: #106
#90 := [asserted]: #31
#127 := [mp~ #90 #107]: #31
#648 := [mp #127 #647]: #643
#621 := (not #643)
#614 := (or #621 #612)
#256 := [quant-inst #53 #58]: #614
#593 := [unit-resolution #256 #648]: #612
#307 := [symm #593]: #306
#308 := (= #52 #58)
#595 := (= #50 #58)
#113 := (not #112)
#321 := [hypothesis]: #113
#208 := (or #112 #63)
#294 := [def-axiom]: #208
#315 := [unit-resolution #294 #321]: #63
#590 := (= #48 #56)
#207 := (or #112 #62)
#293 := [def-axiom]: #207
#316 := [unit-resolution #293 #321]: #62
#594 := [monotonicity #316]: #590
#305 := [monotonicity #594 #315]: #595
#611 := (= #52 #50)
#616 := (or #621 #611)
#622 := [quant-inst #45 #50]: #616
#591 := [unit-resolution #622 #648]: #611
#586 := [trans #591 #305]: #308
#587 := [trans #586 #307]: #61
#94 := (not #61)
#615 := (or #94 #112)
#139 := (iff #61 #112)
#64 := (and #62 #63)
#95 := (iff #94 #64)
#142 := (iff #95 #139)
#136 := (iff #94 #113)
#140 := (iff #136 #139)
#141 := [rewrite]: #140
#137 := (iff #95 #136)
#114 := (iff #64 #113)
#115 := [rewrite]: #114
#138 := [monotonicity #115]: #137
#143 := [trans #138 #141]: #142
#65 := (iff #61 #64)
#66 := (not #65)
#96 := (iff #66 #95)
#97 := [rewrite]: #96
#93 := [asserted]: #66
#100 := [mp #93 #97]: #95
#144 := [mp #100 #143]: #139
#286 := (not #139)
#300 := (or #94 #112 #286)
#279 := [def-axiom]: #300
#617 := [unit-resolution #279 #144]: #615
#322 := [unit-resolution #617 #321]: #94
#301 := [unit-resolution #322 #587]: false
#584 := [lemma #301]: #112
decl f8 :: (-> S9 S3 S2)
decl f9 :: S9
#16 := f9
#600 := (f8 f9 #58)
#601 := (= #600 f21)
#19 := (:var 0 S8)
#18 := (f11 f12 #9)
#20 := (f10 #18 #19)
#630 := (pattern #20)
#21 := (f8 f9 #20)
#22 := (= #21 #9)
#631 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #630) #22)
#23 := (forall (vars (?v0 S2) (?v1 S8)) #22)
#634 := (iff #23 #631)
#632 := (iff #22 #22)
#633 := [refl]: #632
#635 := [quant-intro #633]: #634
#102 := (~ #23 #23)
#101 := (~ #22 #22)
#120 := [refl]: #101
#103 := [nnf-pos #120]: #102
#88 := [asserted]: #23
#121 := [mp~ #88 #103]: #23
#636 := [mp #121 #635]: #631
#261 := (not #631)
#242 := (or #261 #601)
#606 := [quant-inst #55 #57]: #242
#588 := [unit-resolution #606 #636]: #601
#424 := (= f18 #600)
#271 := (f8 f9 #50)
#577 := (= #271 #600)
#579 := (= #50 #60)
#299 := (or #61 #113)
#297 := (or #61 #113 #286)
#298 := [def-axiom]: #297
#296 := [unit-resolution #298 #144]: #299
#585 := [unit-resolution #296 #584]: #61
#589 := (= #50 #52)
#578 := [symm #591]: #589
#580 := [trans #578 #585]: #579
#575 := [trans #580 #593]: #595
#583 := [monotonicity #575]: #577
#581 := (= f18 #271)
#272 := (= #271 f18)
#262 := (or #261 #272)
#263 := [quant-inst #47 #49]: #262
#576 := [unit-resolution #263 #636]: #272
#582 := [symm #576]: #581
#425 := [trans #582 #583]: #424
#426 := [trans #425 #588]: #62
decl f13 :: (-> S12 S3 S8)
decl f14 :: S12
#24 := f14
#599 := (f13 f14 #58)
#605 := (= #599 f22)
#25 := (f13 f14 #20)
#26 := (= #25 #19)
#637 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #630) #26)
#27 := (forall (vars (?v0 S2) (?v1 S8)) #26)
#640 := (iff #27 #637)
#638 := (iff #26 #26)
#639 := [refl]: #638
#641 := [quant-intro #639]: #640
#104 := (~ #27 #27)
#122 := (~ #26 #26)
#123 := [refl]: #122
#105 := [nnf-pos #123]: #104
#89 := [asserted]: #27
#124 := [mp~ #89 #105]: #27
#642 := [mp #124 #641]: #637
#602 := (not #637)
#248 := (or #602 #605)
#609 := [quant-inst #55 #57]: #248
#568 := [unit-resolution #609 #642]: #605
#572 := (= f19 #599)
#598 := (f13 f14 #50)
#565 := (= #598 #599)
#566 := [monotonicity #575]: #565
#570 := (= f19 #598)
#260 := (= #598 f19)
#603 := (or #602 #260)
#604 := [quant-inst #47 #49]: #603
#569 := [unit-resolution #604 #642]: #260
#571 := [symm #569]: #570
#573 := [trans #571 #566]: #572
#567 := [trans #573 #568]: #63
#209 := (or #113 #134 #135)
#295 := [def-axiom]: #209
[unit-resolution #295 #567 #426 #584]: false
unsat
bf4839d9633981e506c1be855f13b8a26192da1d 140 0
#2 := false
decl f8 :: (-> S9 S3 S2)
decl f15 :: (-> S13 S5 S3)
decl f5 :: (-> S6 S3 S5)
decl f10 :: (-> S10 S8 S3)
decl f22 :: S8
#58 := f22
decl f11 :: (-> S11 S2 S10)
decl f21 :: S2
#56 := f21
decl f12 :: S11
#17 := f12
#57 := (f11 f12 f21)
#59 := (f10 #57 f22)
decl f6 :: (-> S7 S2 S6)
decl f20 :: S2
#54 := f20
decl f7 :: S7
#8 := f7
#55 := (f6 f7 f20)
#60 := (f5 #55 #59)
decl f16 :: S13
#28 := f16
#61 := (f15 f16 #60)
decl f9 :: S9
#16 := f9
#62 := (f8 f9 #61)
decl f19 :: S8
#49 := f19
decl f18 :: S2
#47 := f18
#48 := (f11 f12 f18)
#50 := (f10 #48 f19)
decl f17 :: S2
#45 := f17
#46 := (f6 f7 f17)
#51 := (f5 #46 #50)
#52 := (f15 f16 #51)
#53 := (f8 f9 #52)
#63 := (= #53 #62)
#64 := (= f18 f21)
#560 := (iff #64 #63)
#65 := (iff #63 #64)
#572 := (= #62 f21)
#583 := (f8 f9 #59)
#245 := (= #583 f21)
#19 := (:var 0 S8)
#9 := (:var 1 S2)
#18 := (f11 f12 #9)
#20 := (f10 #18 #19)
#615 := (pattern #20)
#21 := (f8 f9 #20)
#22 := (= #21 #9)
#616 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #615) #22)
#23 := (forall (vars (?v0 S2) (?v1 S8)) #22)
#619 := (iff #23 #616)
#617 := (iff #22 #22)
#618 := [refl]: #617
#620 := [quant-intro #618]: #619
#102 := (~ #23 #23)
#101 := (~ #22 #22)
#120 := [refl]: #101
#103 := [nnf-pos #120]: #102
#88 := [asserted]: #23
#121 := [mp~ #88 #103]: #23
#621 := [mp #121 #620]: #616
#257 := (not #616)
#587 := (or #257 #245)
#588 := [quant-inst #56 #58]: #587
#291 := [unit-resolution #588 #621]: #245
#293 := (= #62 #583)
#604 := (= #61 #59)
#11 := (:var 0 S3)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#608 := (pattern #12)
#29 := (f15 f16 #12)
#30 := (= #29 #11)
#628 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #608) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3)) #30)
#631 := (iff #31 #628)
#629 := (iff #30 #30)
#630 := [refl]: #629
#632 := [quant-intro #630]: #631
#106 := (~ #31 #31)
#125 := (~ #30 #30)
#126 := [refl]: #125
#107 := [nnf-pos #126]: #106
#90 := [asserted]: #31
#127 := [mp~ #90 #107]: #31
#633 := [mp #127 #632]: #628
#269 := (not #628)
#597 := (or #269 #604)
#256 := [quant-inst #54 #59]: #597
#292 := [unit-resolution #256 #633]: #604
#571 := [monotonicity #292]: #293
#286 := [trans #571 #291]: #572
#563 := (= #53 f18)
#605 := (f8 f9 #50)
#607 := (= #605 f18)
#599 := (or #257 #607)
#241 := [quant-inst #47 #49]: #599
#569 := [unit-resolution #241 #621]: #607
#570 := (= #53 #605)
#264 := (= #52 #50)
#270 := (or #269 #264)
#603 := [quant-inst #45 #50]: #270
#573 := [unit-resolution #603 #633]: #264
#574 := [monotonicity #573]: #570
#564 := [trans #574 #569]: #563
#565 := [monotonicity #564 #286]: #65
#561 := [symm #565]: #560
#94 := (not #63)
#192 := (not #64)
#566 := (iff #192 #94)
#567 := [monotonicity #561]: #566
#579 := [hypothesis]: #192
#562 := [mp #579 #567]: #94
#283 := (or #63 #64)
#95 := (iff #94 #64)
#66 := (not #65)
#96 := (iff #66 #95)
#97 := [rewrite]: #96
#93 := [asserted]: #66
#100 := [mp #93 #97]: #95
#278 := (not #95)
#271 := (or #63 #64 #278)
#282 := [def-axiom]: #271
#284 := [unit-resolution #282 #100]: #283
#576 := [unit-resolution #284 #579]: #63
#568 := [unit-resolution #576 #562]: false
#409 := [lemma #568]: #64
#411 := [mp #409 #561]: #63
#194 := (or #94 #192)
#193 := (or #94 #192 #278)
#279 := [def-axiom]: #193
#280 := [unit-resolution #279 #100]: #194
#410 := [unit-resolution #280 #409]: #94
[unit-resolution #410 #411]: false
unsat
cf1f4336502ff8e78cd5bc19dd27179c762eaf09 140 0
#2 := false
decl f13 :: (-> S12 S3 S8)
decl f15 :: (-> S13 S5 S3)
decl f5 :: (-> S6 S3 S5)
decl f10 :: (-> S10 S8 S3)
decl f22 :: S8
#58 := f22
decl f11 :: (-> S11 S2 S10)
decl f21 :: S2
#56 := f21
decl f12 :: S11
#17 := f12
#57 := (f11 f12 f21)
#59 := (f10 #57 f22)
decl f6 :: (-> S7 S2 S6)
decl f20 :: S2
#54 := f20
decl f7 :: S7
#8 := f7
#55 := (f6 f7 f20)
#60 := (f5 #55 #59)
decl f16 :: S13
#28 := f16
#61 := (f15 f16 #60)
decl f14 :: S12
#24 := f14
#62 := (f13 f14 #61)
decl f19 :: S8
#49 := f19
decl f18 :: S2
#47 := f18
#48 := (f11 f12 f18)
#50 := (f10 #48 f19)
decl f17 :: S2
#45 := f17
#46 := (f6 f7 f17)
#51 := (f5 #46 #50)
#52 := (f15 f16 #51)
#53 := (f13 f14 #52)
#63 := (= #53 #62)
#64 := (= f19 f22)
#560 := (iff #64 #63)
#65 := (iff #63 #64)
#572 := (= #62 f22)
#585 := (f13 f14 #59)
#586 := (= #585 f22)
#19 := (:var 0 S8)
#9 := (:var 1 S2)
#18 := (f11 f12 #9)
#20 := (f10 #18 #19)
#615 := (pattern #20)
#25 := (f13 f14 #20)
#26 := (= #25 #19)
#622 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #615) #26)
#27 := (forall (vars (?v0 S2) (?v1 S8)) #26)
#625 := (iff #27 #622)
#623 := (iff #26 #26)
#624 := [refl]: #623
#626 := [quant-intro #624]: #625
#104 := (~ #27 #27)
#122 := (~ #26 #26)
#123 := [refl]: #122
#105 := [nnf-pos #123]: #104
#89 := [asserted]: #27
#124 := [mp~ #89 #105]: #27
#627 := [mp #124 #626]: #622
#246 := (not #622)
#590 := (or #246 #586)
#227 := [quant-inst #56 #58]: #590
#291 := [unit-resolution #227 #627]: #586
#293 := (= #62 #585)
#604 := (= #61 #59)
#11 := (:var 0 S3)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#608 := (pattern #12)
#29 := (f15 f16 #12)
#30 := (= #29 #11)
#628 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #608) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3)) #30)
#631 := (iff #31 #628)
#629 := (iff #30 #30)
#630 := [refl]: #629
#632 := [quant-intro #630]: #631
#106 := (~ #31 #31)
#125 := (~ #30 #30)
#126 := [refl]: #125
#107 := [nnf-pos #126]: #106
#90 := [asserted]: #31
#127 := [mp~ #90 #107]: #31
#633 := [mp #127 #632]: #628
#269 := (not #628)
#597 := (or #269 #604)
#256 := [quant-inst #54 #59]: #597
#292 := [unit-resolution #256 #633]: #604
#571 := [monotonicity #292]: #293
#286 := [trans #571 #291]: #572
#563 := (= #53 f19)
#261 := (f13 f14 #50)
#598 := (= #261 f19)
#247 := (or #246 #598)
#248 := [quant-inst #47 #49]: #247
#569 := [unit-resolution #248 #627]: #598
#570 := (= #53 #261)
#264 := (= #52 #50)
#270 := (or #269 #264)
#603 := [quant-inst #45 #50]: #270
#573 := [unit-resolution #603 #633]: #264
#574 := [monotonicity #573]: #570
#564 := [trans #574 #569]: #563
#565 := [monotonicity #564 #286]: #65
#561 := [symm #565]: #560
#94 := (not #63)
#192 := (not #64)
#566 := (iff #192 #94)
#567 := [monotonicity #561]: #566
#579 := [hypothesis]: #192
#562 := [mp #579 #567]: #94
#283 := (or #63 #64)
#95 := (iff #94 #64)
#66 := (not #65)
#96 := (iff #66 #95)
#97 := [rewrite]: #96
#93 := [asserted]: #66
#100 := [mp #93 #97]: #95
#278 := (not #95)
#271 := (or #63 #64 #278)
#282 := [def-axiom]: #271
#284 := [unit-resolution #282 #100]: #283
#576 := [unit-resolution #284 #579]: #63
#568 := [unit-resolution #576 #562]: false
#409 := [lemma #568]: #64
#411 := [mp #409 #561]: #63
#194 := (or #94 #192)
#193 := (or #94 #192 #278)
#279 := [def-axiom]: #193
#280 := [unit-resolution #279 #100]: #194
#410 := [unit-resolution #280 #409]: #94
[unit-resolution #410 #411]: false
unsat
b698de6114c960aedd429b35adfc1493851107e0 97 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f10 :: S2
#29 := f10
decl f6 :: (-> S6 S2 S5)
decl f9 :: S2
#27 := f9
decl f7 :: S6
#8 := f7
#28 := (f6 f7 f9)
#30 := (f5 #28 f10)
decl f8 :: S3
#16 := f8
#32 := (f3 f8 #30)
decl f4 :: S3
#7 := f4
#31 := (f3 f4 #30)
#33 := (= #31 #32)
#34 := (= f9 f10)
#550 := (iff #34 #33)
#35 := (iff #33 #34)
#237 := (= #32 f10)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#560 := (pattern #12)
#17 := (f3 f8 #12)
#18 := (= #17 #11)
#567 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #560) #18)
#19 := (forall (vars (?v0 S2) (?v1 S2)) #18)
#570 := (iff #19 #567)
#568 := (iff #18 #18)
#569 := [refl]: #568
#571 := [quant-intro #569]: #570
#69 := (~ #19 #19)
#68 := (~ #18 #18)
#81 := [refl]: #68
#70 := [nnf-pos #81]: #69
#58 := [asserted]: #19
#82 := [mp~ #58 #70]: #19
#572 := [mp #82 #571]: #567
#548 := (not #567)
#221 := (or #548 #237)
#222 := [quant-inst #27 #29]: #221
#549 := [unit-resolution #222 #572]: #237
#233 := (= #31 f9)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#561 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #560) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#564 := (iff #15 #561)
#562 := (iff #14 #14)
#563 := [refl]: #562
#565 := [quant-intro #563]: #564
#79 := (~ #15 #15)
#77 := (~ #14 #14)
#78 := [refl]: #77
#80 := [nnf-pos #78]: #79
#57 := [asserted]: #15
#66 := [mp~ #57 #80]: #15
#566 := [mp #66 #565]: #561
#552 := (not #561)
#554 := (or #552 #233)
#210 := [quant-inst #27 #29]: #554
#208 := [unit-resolution #210 #566]: #233
#213 := [monotonicity #208 #549]: #35
#209 := [symm #213]: #550
#61 := (not #33)
#144 := (not #34)
#551 := (iff #144 #61)
#193 := [monotonicity #209]: #551
#556 := [hypothesis]: #144
#535 := [mp #556 #193]: #61
#235 := (or #33 #34)
#62 := (iff #61 #34)
#36 := (not #35)
#63 := (iff #36 #62)
#64 := [rewrite]: #63
#60 := [asserted]: #36
#67 := [mp #60 #64]: #62
#230 := (not #62)
#223 := (or #33 #34 #230)
#234 := [def-axiom]: #223
#236 := [unit-resolution #234 #67]: #235
#557 := [unit-resolution #236 #556]: #33
#197 := [unit-resolution #557 #535]: false
#198 := [lemma #197]: #34
#200 := [mp #198 #209]: #33
#146 := (or #61 #144)
#145 := (or #61 #144 #230)
#231 := [def-axiom]: #145
#232 := [unit-resolution #231 #67]: #146
#199 := [unit-resolution #232 #198]: #61
[unit-resolution #199 #200]: false
unsat
6474d219388775f06b6327aa11f8df4ad2448f55 106 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f12 :: S4
#33 := f12
decl f8 :: S3
#16 := f8
#39 := (f3 f8 f12)
decl f9 :: S4
#27 := f9
decl f4 :: S3
#7 := f4
#38 := (f3 f4 f9)
#40 := (= #38 #39)
decl f5 :: (-> S5 S2 S4)
decl f10 :: S2
#28 := f10
decl f6 :: (-> S6 S2 S5)
decl f11 :: S2
#30 := f11
decl f7 :: S6
#8 := f7
#34 := (f6 f7 f11)
#35 := (f5 #34 f10)
#230 := (f3 f8 #35)
#214 := (= #230 #39)
#549 := (= #39 #230)
#36 := (= f12 #35)
#29 := (f6 f7 f10)
#31 := (f5 #29 f11)
#32 := (= f9 #31)
#37 := (and #32 #36)
#67 := (not #37)
#68 := (or #67 #40)
#71 := (not #68)
#41 := (implies #37 #40)
#42 := (not #41)
#72 := (iff #42 #71)
#69 := (iff #41 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#66 := [asserted]: #42
#76 := [mp #66 #73]: #71
#74 := [not-or-elim #76]: #37
#77 := [and-elim #74]: #36
#211 := [monotonicity #77]: #549
#551 := [symm #211]: #214
#554 := (= #38 #230)
#212 := (= f10 #230)
#566 := (= #230 f10)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#574 := (pattern #12)
#17 := (f3 f8 #12)
#18 := (= #17 #11)
#581 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #574) #18)
#19 := (forall (vars (?v0 S2) (?v1 S2)) #18)
#584 := (iff #19 #581)
#582 := (iff #18 #18)
#583 := [refl]: #582
#585 := [quant-intro #583]: #584
#83 := (~ #19 #19)
#82 := (~ #18 #18)
#99 := [refl]: #82
#84 := [nnf-pos #99]: #83
#64 := [asserted]: #19
#100 := [mp~ #64 #84]: #19
#586 := [mp #100 #585]: #581
#250 := (not #581)
#235 := (or #250 #566)
#236 := [quant-inst #30 #28]: #235
#222 := [unit-resolution #236 #586]: #566
#213 := [symm #222]: #212
#552 := (= #38 f10)
#158 := (f3 f4 #31)
#244 := (= #158 f10)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#575 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #574) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#578 := (iff #15 #575)
#576 := (iff #14 #14)
#577 := [refl]: #576
#579 := [quant-intro #577]: #578
#97 := (~ #15 #15)
#95 := (~ #14 #14)
#96 := [refl]: #95
#98 := [nnf-pos #96]: #97
#63 := [asserted]: #15
#81 := [mp~ #63 #98]: #15
#580 := [mp #81 #579]: #575
#160 := (not #575)
#246 := (or #160 #244)
#237 := [quant-inst #28 #30]: #246
#227 := [unit-resolution #237 #580]: #244
#565 := (= #38 #158)
#75 := [and-elim #74]: #32
#207 := [monotonicity #75]: #565
#553 := [trans #207 #227]: #552
#555 := [trans #553 #213]: #554
#550 := [trans #555 #551]: #40
#78 := (not #40)
#79 := [not-or-elim #76]: #78
[unit-resolution #79 #550]: false
unsat
4ebcb713a96f25289faf5874caac5699de053d9a 115 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f9 :: S4
#27 := f9
decl f8 :: S3
#16 := f8
#29 := (f3 f8 f9)
decl f4 :: S3
#7 := f4
#28 := (f3 f4 f9)
#30 := (= #28 #29)
decl f5 :: (-> S5 S2 S4)
decl f6 :: (-> S6 S2 S5)
decl f7 :: S6
#8 := f7
#31 := (f6 f7 #29)
#32 := (f5 #31 #28)
#232 := (f3 f4 #32)
#236 := (= #232 #29)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#559 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#560 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #559) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#563 := (iff #15 #560)
#561 := (iff #14 #14)
#562 := [refl]: #561
#564 := [quant-intro #562]: #563
#78 := (~ #15 #15)
#76 := (~ #14 #14)
#77 := [refl]: #76
#79 := [nnf-pos #77]: #78
#56 := [asserted]: #15
#65 := [mp~ #56 #79]: #15
#565 := [mp #65 #564]: #560
#553 := (not #560)
#209 := (or #553 #236)
#340 := [quant-inst #29 #28]: #209
#178 := [unit-resolution #340 #565]: #236
#545 := (= #28 #232)
#183 := (= #232 #28)
#535 := (= #32 f9)
#33 := (= f9 #32)
#547 := (f6 f7 #28)
#220 := (f5 #547 #29)
#199 := (= #220 #32)
#534 := (= #32 #220)
#143 := (not #33)
#557 := [hypothesis]: #143
#234 := (or #30 #33)
#60 := (not #30)
#61 := (iff #60 #33)
#34 := (iff #30 #33)
#35 := (not #34)
#62 := (iff #35 #61)
#63 := [rewrite]: #62
#59 := [asserted]: #35
#66 := [mp #59 #63]: #61
#229 := (not #61)
#222 := (or #30 #33 #229)
#233 := [def-axiom]: #222
#235 := [unit-resolution #233 #66]: #234
#212 := [unit-resolution #235 #557]: #30
#550 := (= #31 #547)
#549 := (= #547 #31)
#208 := [monotonicity #212]: #549
#192 := [symm #208]: #550
#196 := [monotonicity #192 #212]: #534
#536 := [symm #196]: #199
#197 := (= f9 #220)
#556 := (= #220 f9)
#20 := (:var 0 S4)
#23 := (f3 f8 #20)
#573 := (pattern #23)
#21 := (f3 f4 #20)
#572 := (pattern #21)
#22 := (f6 f7 #21)
#24 := (f5 #22 #23)
#25 := (= #24 #20)
#574 := (forall (vars (?v0 S4)) (:pat #572 #573) #25)
#26 := (forall (vars (?v0 S4)) #25)
#577 := (iff #26 #574)
#575 := (iff #25 #25)
#576 := [refl]: #575
#578 := [quant-intro #576]: #577
#70 := (~ #26 #26)
#82 := (~ #25 #25)
#83 := [refl]: #82
#71 := [nnf-pos #83]: #70
#58 := [asserted]: #26
#84 := [mp~ #58 #71]: #26
#579 := [mp #84 #578]: #574
#558 := (not #574)
#548 := (or #558 #556)
#207 := [quant-inst #27]: #548
#552 := [unit-resolution #207 #579]: #556
#198 := [symm #552]: #197
#537 := [trans #198 #536]: #33
#538 := [unit-resolution #557 #537]: false
#539 := [lemma #538]: #33
#541 := [symm #539]: #535
#184 := [monotonicity #541]: #183
#543 := [symm #184]: #545
#546 := [trans #543 #178]: #30
#145 := (or #60 #143)
#144 := (or #60 #143 #229)
#230 := [def-axiom]: #144
#231 := [unit-resolution #230 #66]: #145
#540 := [unit-resolution #231 #539]: #60
[unit-resolution #540 #546]: false
unsat
d463916fdbeb11527763c4fc4e327a5494ff68cb 43 0
#2 := false
decl f9 :: S3
#30 := f9
decl f5 :: (-> S5 S3 S3)
decl f6 :: (-> S6 S2 S5)
decl f21 :: S2
#71 := f21
decl f7 :: S6
#8 := f7
#72 := (f6 f7 f21)
#73 := (f5 #72 f9)
#74 := (= #73 f9)
#75 := (not #74)
#76 := (not #75)
#107 := (iff #76 #74)
#108 := [rewrite]: #107
#106 := [asserted]: #76
#111 := [mp #106 #108]: #74
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#647 := (pattern #12)
#34 := (= #12 f9)
#35 := (not #34)
#673 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #647) #35)
#36 := (forall (vars (?v0 S2) (?v1 S3)) #35)
#676 := (iff #36 #673)
#674 := (iff #35 #35)
#675 := [refl]: #674
#677 := [quant-intro #675]: #676
#119 := (~ #36 #36)
#145 := (~ #35 #35)
#146 := [refl]: #145
#120 := [nnf-pos #146]: #119
#101 := [asserted]: #36
#147 := [mp~ #101 #120]: #36
#678 := [mp #147 #677]: #673
#232 := (not #673)
#318 := (or #232 #75)
#233 := [quant-inst #71 #30]: #318
[unit-resolution #233 #678 #111]: false
unsat
a60f866ab8b0e8fbdd294bcb1172f7ffdcef9940 47 0
#2 := false
decl f9 :: S3
#30 := f9
decl f5 :: (-> S5 S3 S3)
decl f6 :: (-> S6 S2 S5)
decl f22 :: S2
#73 := f22
decl f7 :: S6
#8 := f7
#74 := (f6 f7 f22)
#75 := (f5 #74 f9)
decl f21 :: S2
#71 := f21
#72 := (f6 f7 f21)
#76 := (f5 #72 #75)
#77 := (= #76 f9)
#78 := (not #77)
#79 := (not #78)
#110 := (iff #79 #77)
#111 := [rewrite]: #110
#109 := [asserted]: #79
#114 := [mp #109 #111]: #77
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#650 := (pattern #12)
#34 := (= #12 f9)
#35 := (not #34)
#676 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #650) #35)
#36 := (forall (vars (?v0 S2) (?v1 S3)) #35)
#679 := (iff #36 #676)
#677 := (iff #35 #35)
#678 := [refl]: #677
#680 := [quant-intro #678]: #679
#122 := (~ #36 #36)
#148 := (~ #35 #35)
#149 := [refl]: #148
#123 := [nnf-pos #149]: #122
#104 := [asserted]: #36
#150 := [mp~ #104 #123]: #36
#681 := [mp #150 #680]: #676
#236 := (not #676)
#311 := (or #236 #78)
#312 := [quant-inst #71 #75]: #311
[unit-resolution #312 #681 #114]: false
unsat
fd1fe80b67edb2604eeb6ac16a3ead94827c31fa 119 0
#2 := false
decl f22 :: S2
#72 := f22
decl f21 :: S2
#71 := f21
#73 := (= f21 f22)
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#30 := f9
decl f6 :: (-> S6 S2 S5)
decl f7 :: S6
#8 := f7
#77 := (f6 f7 f22)
#78 := (f5 #77 f9)
#75 := (f6 f7 f21)
#76 := (f5 #75 f9)
#79 := (= #76 #78)
#634 := (iff #79 #73)
#642 := (not #634)
#80 := (not #79)
#113 := (or #73 #80)
#116 := (not #113)
#74 := (not #73)
#81 := (implies #74 #80)
#82 := (not #81)
#117 := (iff #82 #116)
#114 := (iff #81 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#112 := [asserted]: #82
#121 := [mp #112 #118]: #116
#120 := [not-or-elim #121]: #79
#119 := [not-or-elim #121]: #74
#284 := (or #642 #80 #73)
#645 := [def-axiom]: #284
#484 := [unit-resolution #645 #119 #120]: #642
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#22 := (:var 2 S3)
#20 := (:var 3 S2)
#21 := (f6 f7 #20)
#23 := (f5 #21 #22)
#672 := (pattern #23 #12)
#26 := (= #22 #11)
#175 := (not #26)
#25 := (= #20 #9)
#174 := (not #25)
#141 := (or #174 #175)
#142 := (not #141)
#24 := (= #23 #12)
#143 := (iff #24 #142)
#673 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2) (?v3 S3)) (:pat #672) #143)
#177 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2) (?v3 S3)) #143)
#676 := (iff #177 #673)
#674 := (iff #143 #143)
#675 := [refl]: #674
#677 := [quant-intro #675]: #676
#27 := (and #25 #26)
#28 := (iff #24 #27)
#29 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2) (?v3 S3)) #28)
#178 := (iff #29 #177)
#144 := (iff #28 #143)
#145 := (iff #27 #142)
#146 := [rewrite]: #145
#176 := [monotonicity #146]: #144
#179 := [quant-intro #176]: #178
#127 := (~ #29 #29)
#153 := (~ #28 #28)
#154 := [refl]: #153
#128 := [nnf-pos #154]: #127
#105 := [asserted]: #29
#155 := [mp~ #105 #128]: #29
#180 := [mp #155 #179]: #177
#678 := [mp #180 #677]: #673
#298 := (not #673)
#299 := (or #298 #634)
#244 := (= f9 f9)
#330 := (not #244)
#333 := (or #74 #330)
#334 := (not #333)
#335 := (iff #79 #334)
#636 := (or #298 #335)
#638 := (iff #636 #299)
#640 := (iff #299 #299)
#635 := [rewrite]: #640
#296 := (iff #335 #634)
#650 := (iff #334 #73)
#648 := (not #74)
#649 := (iff #648 #73)
#308 := [rewrite]: #649
#307 := (iff #334 #648)
#652 := (iff #333 #74)
#321 := (or #74 false)
#656 := (iff #321 #74)
#657 := [rewrite]: #656
#654 := (iff #333 #321)
#647 := (iff #330 false)
#1 := true
#315 := (not true)
#309 := (iff #315 false)
#440 := [rewrite]: #309
#651 := (iff #330 #315)
#332 := (iff #244 true)
#336 := [rewrite]: #332
#653 := [monotonicity #336]: #651
#320 := [trans #653 #440]: #647
#655 := [monotonicity #320]: #654
#658 := [trans #655 #657]: #652
#312 := [monotonicity #658]: #307
#292 := [trans #312 #308]: #650
#297 := [monotonicity #292]: #296
#639 := [monotonicity #297]: #638
#641 := [trans #639 #635]: #638
#637 := [quant-inst #71 #30 #72 #30]: #636
#278 := [mp #637 #641]: #299
[unit-resolution #278 #678 #484]: false
unsat
fe733bec7d455e3d40da889cac8d554d86dc35a2 43 0
#2 := false
decl f21 :: S2
#71 := f21
decl f3 :: (-> S4 S3 S2)
decl f5 :: (-> S5 S3 S3)
decl f22 :: S3
#73 := f22
decl f6 :: (-> S6 S2 S5)
decl f7 :: S6
#8 := f7
#72 := (f6 f7 f21)
#74 := (f5 #72 f22)
decl f4 :: S4
#7 := f4
#75 := (f3 f4 #74)
#76 := (= #75 f21)
#77 := (not #76)
#107 := [asserted]: #77
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#645 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#646 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #645) #14)
#15 := (forall (vars (?v0 S2) (?v1 S3)) #14)
#649 := (iff #15 #646)
#647 := (iff #14 #14)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#133 := (~ #15 #15)
#131 := (~ #14 #14)
#132 := [refl]: #131
#134 := [nnf-pos #132]: #133
#98 := [asserted]: #15
#109 := [mp~ #98 #134]: #15
#651 := [mp #109 #650]: #646
#320 := (not #646)
#321 := (or #320 #76)
#318 := [quant-inst #71 #73]: #321
[unit-resolution #318 #651 #107]: false
unsat
94935c8887f8b6d443c5b2bd496a539d3a28c865 42 0
#2 := false
decl f22 :: S3
#73 := f22
decl f5 :: (-> S5 S3 S3)
decl f6 :: (-> S6 S2 S5)
decl f21 :: S2
#71 := f21
decl f7 :: S6
#8 := f7
#72 := (f6 f7 f21)
#74 := (f5 #72 f22)
decl f8 :: S5
#16 := f8
#75 := (f5 f8 #74)
#76 := (= #75 f22)
#77 := (not #76)
#107 := [asserted]: #77
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#645 := (pattern #12)
#17 := (f5 f8 #12)
#18 := (= #17 #11)
#652 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #645) #18)
#19 := (forall (vars (?v0 S2) (?v1 S3)) #18)
#655 := (iff #19 #652)
#653 := (iff #18 #18)
#654 := [refl]: #653
#656 := [quant-intro #654]: #655
#111 := (~ #19 #19)
#110 := (~ #18 #18)
#135 := [refl]: #110
#112 := [nnf-pos #135]: #111
#99 := [asserted]: #19
#136 := [mp~ #99 #112]: #19
#657 := [mp #136 #656]: #652
#637 := (not #652)
#639 := (or #637 #76)
#295 := [quant-inst #71 #73]: #639
[unit-resolution #295 #657 #107]: false
unsat
6669da017744eefc6b42f0dcbe1d3e77a37840bc 51 0
#2 := false
decl f21 :: S2
#71 := f21
decl f3 :: (-> S4 S3 S2)
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#30 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#75 := f23
decl f7 :: S6
#8 := f7
#76 := (f6 f7 f23)
#77 := (f5 #76 f9)
decl f22 :: S2
#73 := f22
#74 := (f6 f7 f22)
#78 := (f5 #74 #77)
#72 := (f6 f7 f21)
#79 := (f5 #72 #78)
decl f4 :: S4
#7 := f4
#80 := (f3 f4 #79)
#81 := (= #80 f21)
#82 := (not #81)
#112 := [asserted]: #82
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#650 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#651 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #650) #14)
#15 := (forall (vars (?v0 S2) (?v1 S3)) #14)
#654 := (iff #15 #651)
#652 := (iff #14 #14)
#653 := [refl]: #652
#655 := [quant-intro #653]: #654
#138 := (~ #15 #15)
#136 := (~ #14 #14)
#137 := [refl]: #136
#139 := [nnf-pos #137]: #138
#103 := [asserted]: #15
#114 := [mp~ #103 #139]: #15
#656 := [mp #114 #655]: #651
#620 := (not #651)
#527 := (or #620 #81)
#533 := [quant-inst #71 #78]: #527
[unit-resolution #533 #656 #112]: false
unsat
6ba377e7ca086c9c3b645a03c4012a7ef2a8cbb4 50 0
#2 := false
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#30 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#75 := f23
decl f7 :: S6
#8 := f7
#76 := (f6 f7 f23)
#77 := (f5 #76 f9)
decl f22 :: S2
#73 := f22
#74 := (f6 f7 f22)
#78 := (f5 #74 #77)
decl f21 :: S2
#71 := f21
#72 := (f6 f7 f21)
#79 := (f5 #72 #78)
decl f8 :: S5
#16 := f8
#80 := (f5 f8 #79)
#81 := (= #80 #78)
#82 := (not #81)
#112 := [asserted]: #82
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#650 := (pattern #12)
#17 := (f5 f8 #12)
#18 := (= #17 #11)
#657 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #650) #18)
#19 := (forall (vars (?v0 S2) (?v1 S3)) #18)
#660 := (iff #19 #657)
#658 := (iff #18 #18)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#116 := (~ #19 #19)
#115 := (~ #18 #18)
#140 := [refl]: #115
#117 := [nnf-pos #140]: #116
#104 := [asserted]: #19
#141 := [mp~ #104 #117]: #19
#662 := [mp #141 #661]: #657
#618 := (not #657)
#516 := (or #618 #81)
#517 := [quant-inst #71 #78]: #516
[unit-resolution #517 #662 #112]: false
unsat
657f931be01b08a5325b20b63a8ffb0654fcebb2 80 0
#2 := false
decl f22 :: S2
#73 := f22
decl f3 :: (-> S4 S3 S2)
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#30 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#75 := f23
decl f7 :: S6
#8 := f7
#76 := (f6 f7 f23)
#77 := (f5 #76 f9)
#74 := (f6 f7 f22)
#78 := (f5 #74 #77)
decl f21 :: S2
#71 := f21
#72 := (f6 f7 f21)
#79 := (f5 #72 #78)
decl f8 :: S5
#16 := f8
#80 := (f5 f8 #79)
decl f4 :: S4
#7 := f4
#81 := (f3 f4 #80)
#82 := (= #81 f22)
#587 := (f3 f4 #78)
#588 := (= #587 f22)
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#651 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#652 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #651) #14)
#15 := (forall (vars (?v0 S2) (?v1 S3)) #14)
#655 := (iff #15 #652)
#653 := (iff #14 #14)
#654 := [refl]: #653
#656 := [quant-intro #654]: #655
#139 := (~ #15 #15)
#137 := (~ #14 #14)
#138 := [refl]: #137
#140 := [nnf-pos #138]: #139
#104 := [asserted]: #15
#115 := [mp~ #104 #140]: #15
#657 := [mp #115 #656]: #652
#621 := (not #652)
#490 := (or #621 #588)
#491 := [quant-inst #73 #77]: #490
#534 := [unit-resolution #491 #657]: #588
#522 := (= #81 #587)
#528 := (= #80 #78)
#17 := (f5 f8 #12)
#18 := (= #17 #11)
#658 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #651) #18)
#19 := (forall (vars (?v0 S2) (?v1 S3)) #18)
#661 := (iff #19 #658)
#659 := (iff #18 #18)
#660 := [refl]: #659
#662 := [quant-intro #660]: #661
#117 := (~ #19 #19)
#116 := (~ #18 #18)
#141 := [refl]: #116
#118 := [nnf-pos #141]: #117
#105 := [asserted]: #19
#142 := [mp~ #105 #118]: #19
#663 := [mp #142 #662]: #658
#619 := (not #658)
#518 := (or #619 #528)
#521 := [quant-inst #71 #78]: #518
#517 := [unit-resolution #521 #663]: #528
#523 := [monotonicity #517]: #522
#524 := [trans #523 #534]: #82
#83 := (not #82)
#113 := [asserted]: #83
[unit-resolution #113 #524]: false
unsat
6920dfa78509845f35572b72b18b16e15101305a 61 0
#2 := false
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#30 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#75 := f23
decl f7 :: S6
#8 := f7
#76 := (f6 f7 f23)
#77 := (f5 #76 f9)
decl f22 :: S2
#73 := f22
#74 := (f6 f7 f22)
#78 := (f5 #74 #77)
decl f21 :: S2
#71 := f21
#72 := (f6 f7 f21)
#79 := (f5 #72 #78)
decl f8 :: S5
#16 := f8
#80 := (f5 f8 #79)
#81 := (f5 f8 #80)
#82 := (= #81 #77)
#488 := (f5 f8 #78)
#489 := (= #488 #77)
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#651 := (pattern #12)
#17 := (f5 f8 #12)
#18 := (= #17 #11)
#658 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #651) #18)
#19 := (forall (vars (?v0 S2) (?v1 S3)) #18)
#661 := (iff #19 #658)
#659 := (iff #18 #18)
#660 := [refl]: #659
#662 := [quant-intro #660]: #661
#117 := (~ #19 #19)
#116 := (~ #18 #18)
#141 := [refl]: #116
#118 := [nnf-pos #141]: #117
#105 := [asserted]: #19
#142 := [mp~ #105 #118]: #19
#663 := [mp #142 #662]: #658
#619 := (not #658)
#582 := (or #619 #489)
#586 := [quant-inst #73 #77]: #582
#534 := [unit-resolution #586 #663]: #489
#522 := (= #81 #488)
#528 := (= #80 #78)
#518 := (or #619 #528)
#521 := [quant-inst #71 #78]: #518
#517 := [unit-resolution #521 #663]: #528
#523 := [monotonicity #517]: #522
#524 := [trans #523 #534]: #82
#83 := (not #82)
#113 := [asserted]: #83
[unit-resolution #113 #524]: false
unsat
67bfe0df82f77831c5b5d717df54021f63993553 86 0
#2 := false
decl f28 :: S2
#91 := f28
decl f3 :: (-> S4 S5 S2)
decl f10 :: (-> S10 S9 S5)
decl f12 :: (-> S11 S9 S9)
decl f16 :: S9
#50 := f16
decl f13 :: (-> S12 S5 S11)
decl f5 :: (-> S6 S3 S5)
decl f29 :: S3
#93 := f29
decl f6 :: (-> S7 S2 S6)
decl f7 :: S7
#8 := f7
#92 := (f6 f7 f28)
#94 := (f5 #92 f29)
decl f14 :: S12
#28 := f14
#95 := (f13 f14 #94)
#96 := (f12 #95 f16)
decl f11 :: S10
#27 := f11
#97 := (f10 f11 #96)
decl f4 :: S4
#7 := f4
#98 := (f3 f4 #97)
#99 := (= #98 f28)
#270 := (f3 f4 #94)
#356 := (= #270 f28)
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#686 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#687 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #686) #14)
#15 := (forall (vars (?v0 S2) (?v1 S3)) #14)
#690 := (iff #15 #687)
#688 := (iff #14 #14)
#689 := [refl]: #688
#691 := [quant-intro #689]: #690
#165 := (~ #15 #15)
#163 := (~ #14 #14)
#164 := [refl]: #163
#166 := [nnf-pos #164]: #165
#121 := [asserted]: #15
#135 := [mp~ #121 #166]: #15
#692 := [mp #135 #691]: #687
#272 := (not #687)
#358 := (or #272 #356)
#349 := [quant-inst #91 #93]: #358
#339 := [unit-resolution #349 #692]: #356
#324 := (= #98 #270)
#348 := (= #97 #94)
#31 := (:var 0 S9)
#29 := (:var 1 S5)
#30 := (f13 f14 #29)
#32 := (f12 #30 #31)
#707 := (pattern #32)
#33 := (f10 f11 #32)
#34 := (= #33 #29)
#708 := (forall (vars (?v0 S5) (?v1 S9)) (:pat #707) #34)
#35 := (forall (vars (?v0 S5) (?v1 S9)) #34)
#711 := (iff #35 #708)
#709 := (iff #34 #34)
#710 := [refl]: #709
#712 := [quant-intro #710]: #711
#141 := (~ #35 #35)
#172 := (~ #34 #34)
#173 := [refl]: #172
#142 := [nnf-pos #173]: #141
#124 := [asserted]: #35
#174 := [mp~ #124 #142]: #35
#713 := [mp #174 #712]: #708
#685 := (not #708)
#675 := (or #685 #348)
#334 := [quant-inst #94 #50]: #675
#676 := [unit-resolution #334 #713]: #348
#325 := [monotonicity #676]: #324
#326 := [trans #325 #339]: #99
#100 := (not #99)
#133 := [asserted]: #100
[unit-resolution #133 #326]: false
unsat
bc229616226a7711a5d4d576e0d0f4d5a078be1a 86 0
#2 := false
decl f29 :: S3
#93 := f29
decl f8 :: (-> S8 S5 S3)
decl f10 :: (-> S10 S9 S5)
decl f12 :: (-> S11 S9 S9)
decl f16 :: S9
#50 := f16
decl f13 :: (-> S12 S5 S11)
decl f5 :: (-> S6 S3 S5)
decl f6 :: (-> S7 S2 S6)
decl f28 :: S2
#91 := f28
decl f7 :: S7
#8 := f7
#92 := (f6 f7 f28)
#94 := (f5 #92 f29)
decl f14 :: S12
#28 := f14
#95 := (f13 f14 #94)
#96 := (f12 #95 f16)
decl f11 :: S10
#27 := f11
#97 := (f10 f11 #96)
decl f9 :: S8
#16 := f9
#98 := (f8 f9 #97)
#99 := (= #98 f29)
#271 := (f8 f9 #94)
#357 := (= #271 f29)
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#686 := (pattern #12)
#17 := (f8 f9 #12)
#18 := (= #17 #11)
#693 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #686) #18)
#19 := (forall (vars (?v0 S2) (?v1 S3)) #18)
#696 := (iff #19 #693)
#694 := (iff #18 #18)
#695 := [refl]: #694
#697 := [quant-intro #695]: #696
#137 := (~ #19 #19)
#136 := (~ #18 #18)
#167 := [refl]: #136
#138 := [nnf-pos #167]: #137
#122 := [asserted]: #19
#168 := [mp~ #122 #138]: #19
#698 := [mp #168 #697]: #693
#362 := (not #693)
#359 := (or #362 #357)
#363 := [quant-inst #91 #93]: #359
#339 := [unit-resolution #363 #698]: #357
#324 := (= #98 #271)
#348 := (= #97 #94)
#31 := (:var 0 S9)
#29 := (:var 1 S5)
#30 := (f13 f14 #29)
#32 := (f12 #30 #31)
#707 := (pattern #32)
#33 := (f10 f11 #32)
#34 := (= #33 #29)
#708 := (forall (vars (?v0 S5) (?v1 S9)) (:pat #707) #34)
#35 := (forall (vars (?v0 S5) (?v1 S9)) #34)
#711 := (iff #35 #708)
#709 := (iff #34 #34)
#710 := [refl]: #709
#712 := [quant-intro #710]: #711
#141 := (~ #35 #35)
#172 := (~ #34 #34)
#173 := [refl]: #172
#142 := [nnf-pos #173]: #141
#124 := [asserted]: #35
#174 := [mp~ #124 #142]: #35
#713 := [mp #174 #712]: #708
#685 := (not #708)
#675 := (or #685 #348)
#334 := [quant-inst #94 #50]: #675
#676 := [unit-resolution #334 #713]: #348
#325 := [monotonicity #676]: #324
#326 := [trans #325 #339]: #99
#100 := (not #99)
#133 := [asserted]: #100
[unit-resolution #133 #326]: false
unsat
d3a42b698bae47402c814f1b2f6f58cd7ebe4316 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#41 := f15
decl f4 :: S3
#7 := f4
#44 := (f3 f4 f15)
decl f14 :: S4
#40 := f14
#43 := (f3 f4 f14)
#45 := (= #43 #44)
#42 := (= f14 f15)
#75 := (not #42)
#76 := (or #75 #45)
#79 := (not #76)
#46 := (implies #42 #45)
#47 := (not #46)
#80 := (iff #47 #79)
#77 := (iff #46 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#74 := [asserted]: #47
#84 := [mp #74 #81]: #79
#82 := [not-or-elim #84]: #42
#263 := [monotonicity #82]: #45
#83 := (not #45)
#85 := [not-or-elim #84]: #83
[unit-resolution #85 #263]: false
unsat
f8f306e974a6666087b450cae3e82e5cd03defda 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#41 := f15
decl f6 :: S3
#15 := f6
#44 := (f3 f6 f15)
decl f14 :: S4
#40 := f14
#43 := (f3 f6 f14)
#45 := (= #43 #44)
#42 := (= f14 f15)
#75 := (not #42)
#76 := (or #75 #45)
#79 := (not #76)
#46 := (implies #42 #45)
#47 := (not #46)
#80 := (iff #47 #79)
#77 := (iff #46 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#74 := [asserted]: #47
#84 := [mp #74 #81]: #79
#82 := [not-or-elim #84]: #42
#263 := [monotonicity #82]: #45
#83 := (not #45)
#85 := [not-or-elim #84]: #83
[unit-resolution #85 #263]: false
unsat
c01d80ea8f25cbcdb60031023ba4082a204411e5 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#42 := f15
decl f4 :: S3
#7 := f4
#43 := (f3 f4 f15)
decl f14 :: S4
#40 := f14
#41 := (f3 f4 f14)
#44 := (= #41 #43)
#46 := (= f14 f15)
#47 := (not #46)
#77 := (or #44 #47)
#80 := (not #77)
#45 := (not #44)
#48 := (implies #45 #47)
#49 := (not #48)
#81 := (iff #49 #80)
#78 := (iff #48 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#76 := [asserted]: #49
#85 := [mp #76 #82]: #80
#84 := [not-or-elim #85]: #46
#263 := [monotonicity #84]: #44
#83 := [not-or-elim #85]: #45
[unit-resolution #83 #263]: false
unsat
290727ed1ecffbc64e78f5a8cac18f251acb752f 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#42 := f15
decl f6 :: S3
#15 := f6
#43 := (f3 f6 f15)
decl f14 :: S4
#40 := f14
#41 := (f3 f6 f14)
#44 := (= #41 #43)
#46 := (= f14 f15)
#47 := (not #46)
#77 := (or #44 #47)
#80 := (not #77)
#45 := (not #44)
#48 := (implies #45 #47)
#49 := (not #48)
#81 := (iff #49 #80)
#78 := (iff #48 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#76 := [asserted]: #49
#85 := [mp #76 #82]: #80
#84 := [not-or-elim #85]: #46
#263 := [monotonicity #84]: #44
#83 := [not-or-elim #85]: #45
[unit-resolution #83 #263]: false
unsat
d178969acccf74676532ed1f0d7dc4526faab060 39 0
#2 := false
#40 := 3::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f14 :: S2
#42 := f14
#41 := 4::Int
#43 := (f5 3::Int 4::Int f14)
decl f4 :: S3
#7 := f4
#44 := (f3 f4 #43)
#45 := (= #44 3::Int)
#46 := (not #45)
#73 := [asserted]: #46
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#165 := (pattern #11)
#12 := (f3 f4 #11)
#13 := (= #12 #8)
#166 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #165) #13)
#14 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #13)
#169 := (iff #14 #166)
#167 := (iff #13 #13)
#168 := [refl]: #167
#170 := [quant-intro #168]: #169
#77 := (~ #14 #14)
#75 := (~ #13 #13)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#67 := [asserted]: #14
#79 := [mp~ #67 #78]: #14
#171 := [mp #79 #170]: #166
#215 := (not #166)
#216 := (or #215 #45)
#217 := [quant-inst #40 #41 #42]: #216
[unit-resolution #217 #171 #73]: false
unsat
3eb6c851edd6fd9da06cca67794a3b348ac3058b 39 0
#2 := false
#41 := 4::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f14 :: S2
#42 := f14
#40 := 3::Int
#43 := (f5 3::Int 4::Int f14)
decl f6 :: S3
#15 := f6
#44 := (f3 f6 #43)
#45 := (= #44 4::Int)
#46 := (not #45)
#73 := [asserted]: #46
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#165 := (pattern #11)
#16 := (f3 f6 #11)
#17 := (= #16 #9)
#172 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #165) #17)
#18 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #17)
#175 := (iff #18 #172)
#173 := (iff #17 #17)
#174 := [refl]: #173
#176 := [quant-intro #174]: #175
#82 := (~ #18 #18)
#80 := (~ #17 #17)
#81 := [refl]: #80
#83 := [nnf-pos #81]: #82
#68 := [asserted]: #18
#84 := [mp~ #68 #83]: #18
#177 := [mp #84 #176]: #172
#220 := (not #172)
#221 := (or #220 #45)
#222 := [quant-inst #40 #41 #42]: #221
[unit-resolution #222 #177 #73]: false
unsat
81324eb3e1a2baf8f2353f71658e6c45eca7efde 78 0
#2 := false
#41 := 4::Int
#40 := 3::Int
#234 := (= 3::Int 4::Int)
#236 := (iff #234 false)
#237 := [rewrite]: #236
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f14 :: S2
#42 := f14
#43 := (f5 3::Int 4::Int f14)
decl f6 :: S3
#15 := f6
#45 := (f3 f6 #43)
#216 := (= #45 4::Int)
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#170 := (pattern #11)
#16 := (f3 f6 #11)
#17 := (= #16 #9)
#177 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #170) #17)
#18 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #17)
#180 := (iff #18 #177)
#178 := (iff #17 #17)
#179 := [refl]: #178
#181 := [quant-intro #179]: #180
#87 := (~ #18 #18)
#85 := (~ #17 #17)
#86 := [refl]: #85
#88 := [nnf-pos #86]: #87
#70 := [asserted]: #18
#89 := [mp~ #70 #88]: #18
#182 := [mp #89 #181]: #177
#225 := (not #177)
#226 := (or #225 #216)
#227 := [quant-inst #40 #41 #42]: #226
#220 := [unit-resolution #227 #182]: #216
#232 := (= 3::Int #45)
#230 := (= #45 3::Int)
decl f4 :: S3
#7 := f4
#44 := (f3 f4 #43)
#215 := (= #44 3::Int)
#12 := (f3 f4 #11)
#13 := (= #12 #8)
#171 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #170) #13)
#14 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #13)
#174 := (iff #14 #171)
#172 := (iff #13 #13)
#173 := [refl]: #172
#175 := [quant-intro #173]: #174
#82 := (~ #14 #14)
#79 := (~ #13 #13)
#81 := [refl]: #79
#83 := [nnf-pos #81]: #82
#69 := [asserted]: #14
#84 := [mp~ #69 #83]: #14
#176 := [mp #84 #175]: #171
#221 := (not #171)
#222 := (or #221 #215)
#223 := [quant-inst #40 #41 #42]: #222
#224 := [unit-resolution #223 #176]: #215
#228 := (= #45 #44)
#46 := (= #44 #45)
#47 := (not #46)
#48 := (not #47)
#76 := (iff #48 #46)
#77 := [rewrite]: #76
#75 := [asserted]: #48
#80 := [mp #75 #77]: #46
#229 := [symm #80]: #228
#231 := [trans #229 #224]: #230
#233 := [symm #231]: #232
#235 := [trans #233 #220]: #234
[mp #235 #237]: false
unsat
778cf00b027f7cbc8557b11fe4d2c6d98c19dbcf 73 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f15 :: S3
#49 := f15
#48 := 4::Int
#11 := 5::Int
#52 := (f7 5::Int 4::Int f15)
decl f11 :: (-> S2 S5 S5)
#47 := 3::Int
#50 := (f7 3::Int 4::Int f15)
decl f4 :: S2
#7 := f4
#51 := (f11 f4 #50)
#53 := (= #51 #52)
decl f3 :: (-> S2 Int Int)
#248 := (f3 f4 3::Int)
#249 := (f7 #248 4::Int f15)
#278 := (= #249 #52)
#276 := (= #52 #249)
#270 := (= 5::Int #248)
#266 := (= #248 5::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 5::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#86 := (~ #13 #13)
#84 := (~ #12 #12)
#85 := [refl]: #84
#87 := [nnf-pos #85]: #86
#75 := [asserted]: #13
#88 := [mp~ #75 #87]: #13
#271 := (not #13)
#272 := (or #271 #266)
#273 := [quant-inst #47]: #272
#267 := [unit-resolution #273 #88]: #266
#274 := [symm #267]: #270
#277 := [monotonicity #274]: #276
#279 := [symm #277]: #278
#252 := (= #51 #249)
#17 := (:var 0 S3)
#16 := (:var 1 Int)
#15 := (:var 2 Int)
#30 := (:var 3 S2)
#32 := (f3 #30 #15)
#33 := (f7 #32 #16 #17)
#198 := (pattern #33)
#18 := (f7 #15 #16 #17)
#31 := (f11 #30 #18)
#197 := (pattern #31)
#34 := (= #31 #33)
#199 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #197 #198) #34)
#35 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #34)
#202 := (iff #35 #199)
#200 := (iff #34 #34)
#201 := [refl]: #200
#203 := [quant-intro #201]: #202
#106 := (~ #35 #35)
#104 := (~ #34 #34)
#105 := [refl]: #104
#107 := [nnf-pos #105]: #106
#79 := [asserted]: #35
#108 := [mp~ #79 #107]: #35
#204 := [mp #108 #203]: #199
#255 := (not #199)
#256 := (or #255 #252)
#257 := [quant-inst #7 #47 #48 #49]: #256
#275 := [unit-resolution #257 #204]: #252
#280 := [trans #275 #279]: #53
#54 := (not #53)
#82 := [asserted]: #54
[unit-resolution #82 #280]: false
unsat
55dc0c2cede66f579f8fb4205f494991679ed411 73 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f15 :: S3
#49 := f15
#11 := 6::Int
#47 := 3::Int
#52 := (f7 3::Int 6::Int f15)
decl f12 :: (-> S2 S5 S5)
#48 := 4::Int
#50 := (f7 3::Int 4::Int f15)
decl f4 :: S2
#7 := f4
#51 := (f12 f4 #50)
#53 := (= #51 #52)
decl f3 :: (-> S2 Int Int)
#249 := (f3 f4 4::Int)
#250 := (f7 3::Int #249 f15)
#279 := (= #250 #52)
#277 := (= #52 #250)
#271 := (= 6::Int #249)
#267 := (= #249 6::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 6::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#86 := (~ #13 #13)
#84 := (~ #12 #12)
#85 := [refl]: #84
#87 := [nnf-pos #85]: #86
#75 := [asserted]: #13
#88 := [mp~ #75 #87]: #13
#272 := (not #13)
#273 := (or #272 #267)
#274 := [quant-inst #48]: #273
#268 := [unit-resolution #274 #88]: #267
#275 := [symm #268]: #271
#278 := [monotonicity #275]: #277
#280 := [symm #278]: #279
#253 := (= #51 #250)
#17 := (:var 0 S3)
#16 := (:var 1 Int)
#30 := (:var 3 S2)
#37 := (f3 #30 #16)
#15 := (:var 2 Int)
#38 := (f7 #15 #37 #17)
#207 := (pattern #38)
#18 := (f7 #15 #16 #17)
#36 := (f12 #30 #18)
#206 := (pattern #36)
#39 := (= #36 #38)
#208 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #206 #207) #39)
#40 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #39)
#211 := (iff #40 #208)
#209 := (iff #39 #39)
#210 := [refl]: #209
#212 := [quant-intro #210]: #211
#111 := (~ #40 #40)
#109 := (~ #39 #39)
#110 := [refl]: #109
#112 := [nnf-pos #110]: #111
#80 := [asserted]: #40
#113 := [mp~ #80 #112]: #40
#213 := [mp #113 #212]: #208
#256 := (not #208)
#257 := (or #256 #253)
#258 := [quant-inst #7 #47 #48 #49]: #257
#276 := [unit-resolution #258 #213]: #253
#281 := [trans #276 #280]: #53
#54 := (not #53)
#82 := [asserted]: #54
[unit-resolution #82 #281]: false
unsat
da8cf7e5a8bc928fda4951f71c6fd4dffe39e0c9 141 0
#2 := false
decl f16 :: S5
#53 := f16
decl f13 :: (-> S2 S5 S5)
decl f12 :: (-> S2 S5 S5)
decl f5 :: S2
#14 := f5
#57 := (f12 f5 f16)
decl f4 :: S2
#7 := f4
#58 := (f13 f4 #57)
#59 := (= #58 f16)
decl f8 :: (-> Int Int S3 S5)
decl f17 :: S3
#54 := f17
#11 := 4::Int
#17 := 3::Int
#55 := (f8 3::Int 4::Int f17)
#327 := (= #55 f16)
#56 := (= f16 #55)
#91 := (not #56)
#92 := (or #91 #59)
#95 := (not #92)
#60 := (implies #56 #59)
#61 := (not #60)
#96 := (iff #61 #95)
#93 := (iff #60 #92)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#90 := [asserted]: #61
#100 := [mp #90 #97]: #95
#98 := [not-or-elim #100]: #56
#328 := [symm #98]: #327
#331 := (= #58 #55)
decl f3 :: (-> S2 Int Int)
#285 := (f3 f4 4::Int)
#247 := (f3 f5 3::Int)
#289 := (f8 #247 #285 f17)
#325 := (= #289 #55)
#309 := (= #285 4::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 4::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#105 := (~ #13 #13)
#103 := (~ #12 #12)
#104 := [refl]: #103
#106 := [nnf-pos #104]: #105
#82 := [asserted]: #13
#107 := [mp~ #82 #106]: #13
#314 := (not #13)
#315 := (or #314 #309)
#316 := [quant-inst #11]: #315
#310 := [unit-resolution #316 #107]: #309
#281 := (= #247 3::Int)
#15 := (f3 f5 #8)
#16 := (pattern #15)
#18 := (= #15 3::Int)
#19 := (forall (vars (?v0 Int)) (:pat #16) #18)
#110 := (~ #19 #19)
#108 := (~ #18 #18)
#109 := [refl]: #108
#111 := [nnf-pos #109]: #110
#83 := [asserted]: #19
#112 := [mp~ #83 #111]: #19
#286 := (not #19)
#287 := (or #286 #281)
#288 := [quant-inst #17]: #287
#313 := [unit-resolution #288 #112]: #281
#326 := [monotonicity #313 #310]: #325
#329 := (= #58 #289)
#248 := (f8 #247 4::Int f17)
#282 := (f13 f4 #248)
#290 := (= #282 #289)
#23 := (:var 0 S3)
#22 := (:var 1 Int)
#36 := (:var 3 S2)
#43 := (f3 #36 #22)
#21 := (:var 2 Int)
#44 := (f8 #21 #43 #23)
#231 := (pattern #44)
#24 := (f8 #21 #22 #23)
#42 := (f13 #36 #24)
#230 := (pattern #42)
#45 := (= #42 #44)
#232 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #230 #231) #45)
#46 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #45)
#235 := (iff #46 #232)
#233 := (iff #45 #45)
#234 := [refl]: #233
#236 := [quant-intro #234]: #235
#135 := (~ #46 #46)
#133 := (~ #45 #45)
#134 := [refl]: #133
#136 := [nnf-pos #134]: #135
#88 := [asserted]: #46
#137 := [mp~ #88 #136]: #46
#237 := [mp #137 #236]: #232
#293 := (not #232)
#294 := (or #293 #290)
#295 := [quant-inst #7 #247 #11 #54]: #294
#317 := [unit-resolution #295 #237]: #290
#323 := (= #58 #282)
#321 := (= #57 #248)
#246 := (f12 f5 #55)
#252 := (= #246 #248)
#38 := (f3 #36 #21)
#39 := (f8 #38 #22 #23)
#223 := (pattern #39)
#37 := (f12 #36 #24)
#222 := (pattern #37)
#40 := (= #37 #39)
#224 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #222 #223) #40)
#41 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #40)
#227 := (iff #41 #224)
#225 := (iff #40 #40)
#226 := [refl]: #225
#228 := [quant-intro #226]: #227
#130 := (~ #41 #41)
#128 := (~ #40 #40)
#129 := [refl]: #128
#131 := [nnf-pos #129]: #130
#87 := [asserted]: #41
#132 := [mp~ #87 #131]: #41
#229 := [mp #132 #228]: #224
#255 := (not #224)
#256 := (or #255 #252)
#257 := [quant-inst #14 #17 #11 #54]: #256
#318 := [unit-resolution #257 #229]: #252
#319 := (= #57 #246)
#320 := [monotonicity #98]: #319
#322 := [trans #320 #318]: #321
#324 := [monotonicity #322]: #323
#330 := [trans #324 #317]: #329
#332 := [trans #330 #326]: #331
#333 := [trans #332 #328]: #59
#99 := (not #59)
#101 := [not-or-elim #100]: #99
[unit-resolution #101 #333]: false
unsat
d0a240ecffa93b4cb78f7dba7d0cec224dce11ff 141 0
#2 := false
decl f16 :: S5
#53 := f16
decl f12 :: (-> S2 S5 S5)
decl f13 :: (-> S2 S5 S5)
decl f4 :: S2
#7 := f4
#57 := (f13 f4 f16)
decl f5 :: S2
#14 := f5
#58 := (f12 f5 #57)
#59 := (= #58 f16)
decl f8 :: (-> Int Int S3 S5)
decl f17 :: S3
#54 := f17
#11 := 4::Int
#17 := 3::Int
#55 := (f8 3::Int 4::Int f17)
#327 := (= #55 f16)
#56 := (= f16 #55)
#91 := (not #56)
#92 := (or #91 #59)
#95 := (not #92)
#60 := (implies #56 #59)
#61 := (not #60)
#96 := (iff #61 #95)
#93 := (iff #60 #92)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#90 := [asserted]: #61
#100 := [mp #90 #97]: #95
#98 := [not-or-elim #100]: #56
#328 := [symm #98]: #327
#331 := (= #58 #55)
decl f3 :: (-> S2 Int Int)
#247 := (f3 f4 4::Int)
#285 := (f3 f5 3::Int)
#289 := (f8 #285 #247 f17)
#325 := (= #289 #55)
#281 := (= #247 4::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 4::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#105 := (~ #13 #13)
#103 := (~ #12 #12)
#104 := [refl]: #103
#106 := [nnf-pos #104]: #105
#82 := [asserted]: #13
#107 := [mp~ #82 #106]: #13
#286 := (not #13)
#287 := (or #286 #281)
#288 := [quant-inst #11]: #287
#310 := [unit-resolution #288 #107]: #281
#309 := (= #285 3::Int)
#15 := (f3 f5 #8)
#16 := (pattern #15)
#18 := (= #15 3::Int)
#19 := (forall (vars (?v0 Int)) (:pat #16) #18)
#110 := (~ #19 #19)
#108 := (~ #18 #18)
#109 := [refl]: #108
#111 := [nnf-pos #109]: #110
#83 := [asserted]: #19
#112 := [mp~ #83 #111]: #19
#314 := (not #19)
#315 := (or #314 #309)
#316 := [quant-inst #17]: #315
#313 := [unit-resolution #316 #112]: #309
#326 := [monotonicity #313 #310]: #325
#329 := (= #58 #289)
#248 := (f8 3::Int #247 f17)
#282 := (f12 f5 #248)
#290 := (= #282 #289)
#23 := (:var 0 S3)
#22 := (:var 1 Int)
#21 := (:var 2 Int)
#36 := (:var 3 S2)
#38 := (f3 #36 #21)
#39 := (f8 #38 #22 #23)
#223 := (pattern #39)
#24 := (f8 #21 #22 #23)
#37 := (f12 #36 #24)
#222 := (pattern #37)
#40 := (= #37 #39)
#224 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #222 #223) #40)
#41 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #40)
#227 := (iff #41 #224)
#225 := (iff #40 #40)
#226 := [refl]: #225
#228 := [quant-intro #226]: #227
#130 := (~ #41 #41)
#128 := (~ #40 #40)
#129 := [refl]: #128
#131 := [nnf-pos #129]: #130
#87 := [asserted]: #41
#132 := [mp~ #87 #131]: #41
#229 := [mp #132 #228]: #224
#293 := (not #224)
#294 := (or #293 #290)
#295 := [quant-inst #14 #17 #247 #54]: #294
#317 := [unit-resolution #295 #229]: #290
#323 := (= #58 #282)
#321 := (= #57 #248)
#246 := (f13 f4 #55)
#252 := (= #246 #248)
#43 := (f3 #36 #22)
#44 := (f8 #21 #43 #23)
#231 := (pattern #44)
#42 := (f13 #36 #24)
#230 := (pattern #42)
#45 := (= #42 #44)
#232 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #230 #231) #45)
#46 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #45)
#235 := (iff #46 #232)
#233 := (iff #45 #45)
#234 := [refl]: #233
#236 := [quant-intro #234]: #235
#135 := (~ #46 #46)
#133 := (~ #45 #45)
#134 := [refl]: #133
#136 := [nnf-pos #134]: #135
#88 := [asserted]: #46
#137 := [mp~ #88 #136]: #46
#237 := [mp #137 #236]: #232
#255 := (not #232)
#256 := (or #255 #252)
#257 := [quant-inst #7 #17 #11 #54]: #256
#318 := [unit-resolution #257 #237]: #252
#319 := (= #57 #246)
#320 := [monotonicity #98]: #319
#322 := [trans #320 #318]: #321
#324 := [monotonicity #322]: #323
#330 := [trans #324 #317]: #329
#332 := [trans #330 #326]: #331
#333 := [trans #332 #328]: #59
#99 := (not #59)
#101 := [not-or-elim #100]: #99
[unit-resolution #101 #333]: false
unsat
4836e6abfc464cb08dddd05f1d512ded74175de4 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#73 := f26
decl f4 :: S3
#7 := f4
#76 := (f3 f4 f26)
decl f25 :: S4
#72 := f25
#75 := (f3 f4 f25)
#77 := (= #75 #76)
#74 := (= f25 f26)
#111 := (not #74)
#112 := (or #111 #77)
#115 := (not #112)
#78 := (implies #74 #77)
#79 := (not #78)
#116 := (iff #79 #115)
#113 := (iff #78 #112)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#110 := [asserted]: #79
#120 := [mp #110 #117]: #115
#118 := [not-or-elim #120]: #74
#318 := [monotonicity #118]: #77
#119 := (not #77)
#121 := [not-or-elim #120]: #119
[unit-resolution #121 #318]: false
unsat
f99b4650b4bda1046395cb9c27fb7acec91a2f4f 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#73 := f26
decl f6 :: S3
#15 := f6
#76 := (f3 f6 f26)
decl f25 :: S4
#72 := f25
#75 := (f3 f6 f25)
#77 := (= #75 #76)
#74 := (= f25 f26)
#111 := (not #74)
#112 := (or #111 #77)
#115 := (not #112)
#78 := (implies #74 #77)
#79 := (not #78)
#116 := (iff #79 #115)
#113 := (iff #78 #112)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#110 := [asserted]: #79
#120 := [mp #110 #117]: #115
#118 := [not-or-elim #120]: #74
#318 := [monotonicity #118]: #77
#119 := (not #77)
#121 := [not-or-elim #120]: #119
[unit-resolution #121 #318]: false
unsat
1b3a7b1fc51d4c34ff662c61cf90322ecc09e078 61 0
#2 := false
decl f1 :: S1
#3 := f1
decl f14 :: (-> S9 S4 S1)
decl f25 :: S4
#72 := f25
decl f15 :: S9
#40 := f15
#75 := (f14 f15 f25)
#76 := (= #75 f1)
decl f26 :: S4
#73 := f26
#77 := (f14 f15 f26)
#78 := (= #77 f1)
#643 := (iff #78 #76)
#79 := (iff #76 #78)
#649 := (= #75 #77)
#74 := (= f25 f26)
#113 := (not #74)
#114 := (or #113 #79)
#117 := (not #114)
#80 := (implies #74 #79)
#81 := (not #80)
#118 := (iff #81 #117)
#115 := (iff #80 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#112 := [asserted]: #81
#122 := [mp #112 #119]: #117
#120 := [not-or-elim #122]: #74
#305 := [monotonicity #120]: #649
#436 := [monotonicity #305]: #79
#316 := [symm #436]: #643
#149 := (not #76)
#325 := (not #78)
#317 := (iff #325 #149)
#650 := [monotonicity #316]: #317
#311 := [hypothesis]: #325
#651 := [mp #311 #650]: #149
#328 := (or #76 #78)
#150 := (iff #149 #78)
#121 := (not #79)
#151 := (iff #121 #150)
#152 := [rewrite]: #151
#123 := [not-or-elim #122]: #121
#153 := [mp #123 #152]: #150
#326 := (not #150)
#330 := (or #76 #78 #326)
#331 := [def-axiom]: #330
#332 := [unit-resolution #331 #153]: #328
#647 := [unit-resolution #332 #311]: #76
#652 := [unit-resolution #647 #651]: false
#653 := [lemma #652]: #78
#654 := [mp #653 #316]: #76
#318 := (or #149 #325)
#242 := (or #149 #325 #326)
#327 := [def-axiom]: #242
#329 := [unit-resolution #327 #153]: #318
#648 := [unit-resolution #329 #653]: #149
[unit-resolution #648 #654]: false
unsat
58757bb2c94bdd593c9d8b0fbe00db43524398ac 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#74 := f26
decl f4 :: S3
#7 := f4
#75 := (f3 f4 f26)
decl f25 :: S4
#72 := f25
#73 := (f3 f4 f25)
#76 := (= #73 #75)
#78 := (= f25 f26)
#79 := (not #78)
#113 := (or #76 #79)
#116 := (not #113)
#77 := (not #76)
#80 := (implies #77 #79)
#81 := (not #80)
#117 := (iff #81 #116)
#114 := (iff #80 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#112 := [asserted]: #81
#121 := [mp #112 #118]: #116
#120 := [not-or-elim #121]: #78
#318 := [monotonicity #120]: #76
#119 := [not-or-elim #121]: #77
[unit-resolution #119 #318]: false
unsat
ef9a1a3fd0640f615d1a4ca50416456c2aafb0a5 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#74 := f26
decl f6 :: S3
#15 := f6
#75 := (f3 f6 f26)
decl f25 :: S4
#72 := f25
#73 := (f3 f6 f25)
#76 := (= #73 #75)
#78 := (= f25 f26)
#79 := (not #78)
#113 := (or #76 #79)
#116 := (not #113)
#77 := (not #76)
#80 := (implies #77 #79)
#81 := (not #80)
#117 := (iff #81 #116)
#114 := (iff #80 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#112 := [asserted]: #81
#121 := [mp #112 #118]: #116
#120 := [not-or-elim #121]: #78
#318 := [monotonicity #120]: #76
#119 := [not-or-elim #121]: #77
[unit-resolution #119 #318]: false
unsat
a0e1cfb251466df6713d328d9fc59e2beb3ff57a 66 0
#2 := false
decl f1 :: S1
#3 := f1
decl f14 :: (-> S9 S4 S1)
decl f25 :: S4
#72 := f25
decl f15 :: S9
#40 := f15
#73 := (f14 f15 f25)
#74 := (= #73 f1)
decl f26 :: S4
#75 := f26
#76 := (f14 f15 f26)
#77 := (= #76 f1)
#648 := (iff #77 #74)
#78 := (iff #74 #77)
#654 := (= #73 #76)
#80 := (= f25 f26)
#81 := (not #80)
#122 := (or #78 #81)
#127 := (not #122)
#79 := (not #78)
#82 := (implies #79 #81)
#83 := (not #82)
#128 := (iff #83 #127)
#125 := (iff #82 #122)
#115 := (not #74)
#116 := (iff #115 #77)
#119 := (implies #116 #81)
#123 := (iff #119 #122)
#124 := [rewrite]: #123
#120 := (iff #82 #119)
#117 := (iff #79 #116)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#126 := [trans #121 #124]: #125
#129 := [monotonicity #126]: #128
#114 := [asserted]: #83
#132 := [mp #114 #129]: #127
#131 := [not-or-elim #132]: #80
#310 := [monotonicity #131]: #654
#441 := [monotonicity #310]: #78
#321 := [symm #441]: #648
#330 := (not #77)
#322 := (iff #330 #115)
#655 := [monotonicity #321]: #322
#316 := [hypothesis]: #330
#656 := [mp #316 #655]: #115
#333 := (or #74 #77)
#130 := [not-or-elim #132]: #79
#156 := [mp #130 #118]: #116
#331 := (not #116)
#335 := (or #74 #77 #331)
#336 := [def-axiom]: #335
#337 := [unit-resolution #336 #156]: #333
#652 := [unit-resolution #337 #316]: #74
#657 := [unit-resolution #652 #656]: false
#658 := [lemma #657]: #77
#659 := [mp #658 #321]: #74
#323 := (or #115 #330)
#247 := (or #115 #330 #331)
#332 := [def-axiom]: #247
#334 := [unit-resolution #332 #156]: #323
#653 := [unit-resolution #334 #658]: #115
[unit-resolution #653 #659]: false
unsat
3008f68b045e8512a78630fd63e36767a288b498 47 0
#2 := false
#72 := 3::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#76 := f26
decl f17 :: (-> S11 S1 S10)
decl f25 :: S1
#74 := f25
decl f18 :: S11
#42 := f18
#75 := (f17 f18 f25)
#77 := (f16 #75 f26)
#73 := 4::Int
#78 := (f5 3::Int 4::Int #77)
decl f4 :: S3
#7 := f4
#79 := (f3 f4 #78)
#80 := (= #79 3::Int)
#81 := (not #80)
#112 := [asserted]: #81
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#224 := (pattern #11)
#12 := (f3 f4 #11)
#13 := (= #12 #8)
#225 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #224) #13)
#14 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #13)
#228 := (iff #14 #225)
#226 := (iff #13 #13)
#227 := [refl]: #226
#229 := [quant-intro #227]: #228
#116 := (~ #14 #14)
#114 := (~ #13 #13)
#115 := [refl]: #114
#117 := [nnf-pos #115]: #116
#102 := [asserted]: #14
#118 := [mp~ #102 #117]: #14
#230 := [mp #118 #229]: #225
#326 := (not #225)
#327 := (or #326 #80)
#328 := [quant-inst #72 #73 #77]: #327
[unit-resolution #328 #230 #112]: false
unsat
1c291f66407b060abd6570e3561e84cb6802694a 47 0
#2 := false
#73 := 4::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#76 := f26
decl f17 :: (-> S11 S1 S10)
decl f25 :: S1
#74 := f25
decl f18 :: S11
#42 := f18
#75 := (f17 f18 f25)
#77 := (f16 #75 f26)
#72 := 3::Int
#78 := (f5 3::Int 4::Int #77)
decl f6 :: S3
#15 := f6
#79 := (f3 f6 #78)
#80 := (= #79 4::Int)
#81 := (not #80)
#112 := [asserted]: #81
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#224 := (pattern #11)
#16 := (f3 f6 #11)
#17 := (= #16 #9)
#231 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #224) #17)
#18 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #17)
#234 := (iff #18 #231)
#232 := (iff #17 #17)
#233 := [refl]: #232
#235 := [quant-intro #233]: #234
#121 := (~ #18 #18)
#119 := (~ #17 #17)
#120 := [refl]: #119
#122 := [nnf-pos #120]: #121
#103 := [asserted]: #18
#123 := [mp~ #103 #122]: #18
#236 := [mp #123 #235]: #231
#331 := (not #231)
#332 := (or #331 #80)
#333 := [quant-inst #72 #73 #77]: #332
[unit-resolution #333 #236 #112]: false
unsat
5e951d88ba01a5b65915e3cf99e633951609c993 85 0
#2 := false
decl f1 :: S1
#3 := f1
decl f25 :: S1
#74 := f25
#81 := (= f25 f1)
#303 := (not #81)
#341 := [hypothesis]: #303
decl f14 :: (-> S9 S4 S1)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#76 := f26
decl f17 :: (-> S11 S1 S10)
decl f18 :: S11
#42 := f18
#75 := (f17 f18 f25)
#77 := (f16 #75 f26)
#73 := 4::Int
#72 := 3::Int
#78 := (f5 3::Int 4::Int #77)
decl f15 :: S9
#40 := f15
#79 := (f14 f15 #78)
#80 := (= #79 f1)
#311 := (or #80 #81)
#115 := (not #80)
#116 := (iff #115 #81)
#82 := (iff #80 #81)
#83 := (not #82)
#117 := (iff #83 #116)
#118 := [rewrite]: #117
#114 := [asserted]: #83
#121 := [mp #114 #118]: #116
#304 := (not #116)
#309 := (or #80 #81 #304)
#310 := [def-axiom]: #309
#312 := [unit-resolution #310 #121]: #311
#342 := [unit-resolution #312 #341]: #80
#347 := (or #115 #81)
#45 := (:var 0 S8)
#43 := (:var 1 S1)
#44 := (f17 f18 #43)
#46 := (f16 #44 #45)
#8 := (:var 2 Int)
#41 := (:var 3 Int)
#47 := (f5 #41 #8 #46)
#274 := (pattern #47)
#50 := (= #43 f1)
#48 := (f14 f15 #47)
#49 := (= #48 f1)
#51 := (iff #49 #50)
#275 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S8)) (:pat #274) #51)
#52 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S8)) #51)
#278 := (iff #52 #275)
#276 := (iff #51 #51)
#277 := [refl]: #276
#279 := [quant-intro #277]: #278
#153 := (~ #52 #52)
#151 := (~ #51 #51)
#152 := [refl]: #151
#154 := [nnf-pos #152]: #153
#110 := [asserted]: #52
#155 := [mp~ #110 #154]: #52
#280 := [mp #155 #279]: #275
#315 := (not #275)
#316 := (or #315 #82)
#317 := [quant-inst #72 #73 #74 #76]: #316
#346 := [unit-resolution #317 #280]: #82
#320 := (or #83 #115 #81)
#321 := [def-axiom]: #320
#348 := [unit-resolution #321 #346]: #347
#349 := [unit-resolution #348 #342 #341]: false
#350 := [lemma #349]: #81
#307 := (or #115 #303)
#305 := (or #115 #303 #304)
#306 := [def-axiom]: #305
#308 := [unit-resolution #306 #121]: #307
#351 := [unit-resolution #308 #350]: #115
#352 := (or #80 #303)
#318 := (or #83 #80 #303)
#319 := [def-axiom]: #318
#353 := [unit-resolution #319 #346]: #352
[unit-resolution #353 #351 #350]: false
unsat
812476a17a9a2871c9ebf2cc9391e374a71250ed 86 0
#2 := false
#73 := 4::Int
#72 := 3::Int
#345 := (= 3::Int 4::Int)
#347 := (iff #345 false)
#348 := [rewrite]: #347
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#76 := f26
decl f17 :: (-> S11 S1 S10)
decl f25 :: S1
#74 := f25
decl f18 :: S11
#42 := f18
#75 := (f17 f18 f25)
#77 := (f16 #75 f26)
#78 := (f5 3::Int 4::Int #77)
decl f6 :: S3
#15 := f6
#80 := (f3 f6 #78)
#327 := (= #80 4::Int)
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#229 := (pattern #11)
#16 := (f3 f6 #11)
#17 := (= #16 #9)
#236 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #229) #17)
#18 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #17)
#239 := (iff #18 #236)
#237 := (iff #17 #17)
#238 := [refl]: #237
#240 := [quant-intro #238]: #239
#126 := (~ #18 #18)
#124 := (~ #17 #17)
#125 := [refl]: #124
#127 := [nnf-pos #125]: #126
#105 := [asserted]: #18
#128 := [mp~ #105 #127]: #18
#241 := [mp #128 #240]: #236
#336 := (not #236)
#337 := (or #336 #327)
#338 := [quant-inst #72 #73 #77]: #337
#331 := [unit-resolution #338 #241]: #327
#343 := (= 3::Int #80)
#341 := (= #80 3::Int)
decl f4 :: S3
#7 := f4
#79 := (f3 f4 #78)
#326 := (= #79 3::Int)
#12 := (f3 f4 #11)
#13 := (= #12 #8)
#230 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #229) #13)
#14 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #13)
#233 := (iff #14 #230)
#231 := (iff #13 #13)
#232 := [refl]: #231
#234 := [quant-intro #232]: #233
#121 := (~ #14 #14)
#118 := (~ #13 #13)
#120 := [refl]: #118
#122 := [nnf-pos #120]: #121
#104 := [asserted]: #14
#123 := [mp~ #104 #122]: #14
#235 := [mp #123 #234]: #230
#332 := (not #230)
#333 := (or #332 #326)
#334 := [quant-inst #72 #73 #77]: #333
#335 := [unit-resolution #334 #235]: #326
#339 := (= #80 #79)
#81 := (= #79 #80)
#82 := (not #81)
#83 := (not #82)
#115 := (iff #83 #81)
#116 := [rewrite]: #115
#114 := [asserted]: #83
#119 := [mp #114 #116]: #81
#340 := [symm #119]: #339
#342 := [trans #340 #335]: #341
#344 := [symm #342]: #343
#346 := [trans #344 #331]: #345
[mp #346 #348]: false
unsat
fb3b468a9e0e9229a2ed6b6592a5795d32e0cbbf 81 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f17 :: (-> S10 S8 S3)
decl f27 :: S8
#83 := f27
decl f18 :: (-> S11 S1 S10)
decl f26 :: S1
#81 := f26
decl f19 :: S11
#49 := f19
#82 := (f18 f19 f26)
#84 := (f17 #82 f27)
#80 := 4::Int
#11 := 5::Int
#87 := (f7 5::Int 4::Int #84)
decl f11 :: (-> S2 S5 S5)
#79 := 3::Int
#85 := (f7 3::Int 4::Int #84)
decl f4 :: S2
#7 := f4
#86 := (f11 f4 #85)
#88 := (= #86 #87)
decl f3 :: (-> S2 Int Int)
#378 := (f3 f4 3::Int)
#379 := (f7 #378 4::Int #84)
#427 := (= #379 #87)
#425 := (= #87 #379)
#419 := (= 5::Int #378)
#415 := (= #378 5::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 5::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#125 := (~ #13 #13)
#123 := (~ #12 #12)
#124 := [refl]: #123
#126 := [nnf-pos #124]: #125
#110 := [asserted]: #13
#127 := [mp~ #110 #126]: #13
#420 := (not #13)
#421 := (or #420 #415)
#422 := [quant-inst #79]: #421
#416 := [unit-resolution #422 #127]: #415
#423 := [symm #416]: #419
#426 := [monotonicity #423]: #425
#428 := [symm #426]: #427
#382 := (= #86 #379)
#17 := (:var 0 S3)
#16 := (:var 1 Int)
#15 := (:var 2 Int)
#30 := (:var 3 S2)
#32 := (f3 #30 #15)
#33 := (f7 #32 #16 #17)
#257 := (pattern #33)
#18 := (f7 #15 #16 #17)
#31 := (f11 #30 #18)
#256 := (pattern #31)
#34 := (= #31 #33)
#258 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #256 #257) #34)
#35 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #34)
#261 := (iff #35 #258)
#259 := (iff #34 #34)
#260 := [refl]: #259
#262 := [quant-intro #260]: #261
#145 := (~ #35 #35)
#143 := (~ #34 #34)
#144 := [refl]: #143
#146 := [nnf-pos #144]: #145
#114 := [asserted]: #35
#147 := [mp~ #114 #146]: #35
#263 := [mp #147 #262]: #258
#385 := (not #258)
#386 := (or #385 #382)
#387 := [quant-inst #7 #79 #80 #84]: #386
#424 := [unit-resolution #387 #263]: #382
#429 := [trans #424 #428]: #88
#89 := (not #88)
#121 := [asserted]: #89
[unit-resolution #121 #429]: false
unsat
66c49b5e837d7faf6a74356e58d3b2fd5529a3d1 81 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f17 :: (-> S10 S8 S3)
decl f27 :: S8
#83 := f27
decl f18 :: (-> S11 S1 S10)
decl f26 :: S1
#81 := f26
decl f19 :: S11
#49 := f19
#82 := (f18 f19 f26)
#84 := (f17 #82 f27)
#11 := 6::Int
#79 := 3::Int
#87 := (f7 3::Int 6::Int #84)
decl f12 :: (-> S2 S5 S5)
#80 := 4::Int
#85 := (f7 3::Int 4::Int #84)
decl f4 :: S2
#7 := f4
#86 := (f12 f4 #85)
#88 := (= #86 #87)
decl f3 :: (-> S2 Int Int)
#379 := (f3 f4 4::Int)
#380 := (f7 3::Int #379 #84)
#428 := (= #380 #87)
#426 := (= #87 #380)
#420 := (= 6::Int #379)
#416 := (= #379 6::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 6::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#125 := (~ #13 #13)
#123 := (~ #12 #12)
#124 := [refl]: #123
#126 := [nnf-pos #124]: #125
#110 := [asserted]: #13
#127 := [mp~ #110 #126]: #13
#421 := (not #13)
#422 := (or #421 #416)
#423 := [quant-inst #80]: #422
#417 := [unit-resolution #423 #127]: #416
#424 := [symm #417]: #420
#427 := [monotonicity #424]: #426
#429 := [symm #427]: #428
#383 := (= #86 #380)
#17 := (:var 0 S3)
#16 := (:var 1 Int)
#30 := (:var 3 S2)
#37 := (f3 #30 #16)
#15 := (:var 2 Int)
#38 := (f7 #15 #37 #17)
#266 := (pattern #38)
#18 := (f7 #15 #16 #17)
#36 := (f12 #30 #18)
#265 := (pattern #36)
#39 := (= #36 #38)
#267 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #265 #266) #39)
#40 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #39)
#270 := (iff #40 #267)
#268 := (iff #39 #39)
#269 := [refl]: #268
#271 := [quant-intro #269]: #270
#150 := (~ #40 #40)
#148 := (~ #39 #39)
#149 := [refl]: #148
#151 := [nnf-pos #149]: #150
#115 := [asserted]: #40
#152 := [mp~ #115 #151]: #40
#272 := [mp #152 #271]: #267
#386 := (not #267)
#387 := (or #386 #383)
#388 := [quant-inst #7 #79 #80 #84]: #387
#425 := [unit-resolution #388 #272]: #383
#430 := [trans #425 #429]: #88
#89 := (not #88)
#121 := [asserted]: #89
[unit-resolution #121 #430]: false
unsat
9aa89ca1a2dffdf92e4644072316fccd998c9605 233 0
#2 := false
decl f28 :: S6
#92 := f28
decl f25 :: (-> S3 S6 S6)
decl f15 :: (-> S2 S6 S6)
decl f14 :: (-> S2 S6 S6)
decl f5 :: S2
#14 := f5
#98 := (f14 f5 f28)
decl f4 :: S2
#7 := f4
#99 := (f15 f4 #98)
decl f7 :: S3
#20 := f7
#100 := (f25 f7 #99)
#101 := (= #100 f28)
decl f10 :: (-> Int Int S4 S6)
decl f20 :: (-> S11 S9 S4)
decl f29 :: S9
#94 := f29
decl f21 :: (-> S12 S1 S11)
decl f1 :: S1
#3 := f1
decl f22 :: S12
#62 := f22
#93 := (f21 f22 f1)
#95 := (f20 #93 f29)
#11 := 4::Int
#17 := 3::Int
#96 := (f10 3::Int 4::Int #95)
#583 := (= #96 f28)
#97 := (= f28 #96)
#144 := (not #97)
#145 := (or #144 #101)
#148 := (not #145)
#102 := (implies #97 #101)
#103 := (not #102)
#149 := (iff #103 #148)
#146 := (iff #102 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#143 := [asserted]: #103
#153 := [mp #143 #150]: #148
#151 := [not-or-elim #153]: #97
#584 := [symm #151]: #583
#587 := (= #100 #96)
decl f6 :: (-> S3 S1 S1)
#496 := (f6 f7 f1)
#500 := (f21 f22 #496)
#501 := (f20 #500 f29)
decl f3 :: (-> S2 Int Int)
#445 := (f3 f4 4::Int)
#502 := (f10 3::Int #445 #501)
#581 := (= #502 #96)
#556 := (= #501 #95)
#549 := (= #500 #93)
#510 := (= #496 f1)
#21 := (:var 0 S1)
#22 := (f6 f7 #21)
#23 := (pattern #22)
#24 := (= #22 f1)
#129 := (forall (vars (?v0 S1)) (:pat #23) #24)
#168 := (~ #129 #129)
#166 := (~ #24 #24)
#167 := [refl]: #166
#169 := [nnf-pos #167]: #168
#1 := true
#25 := (iff #24 true)
#26 := (forall (vars (?v0 S1)) (:pat #23) #25)
#130 := (iff #26 #129)
#127 := (iff #25 #24)
#128 := [rewrite]: #127
#131 := [quant-intro #128]: #130
#126 := [asserted]: #26
#134 := [mp #126 #131]: #129
#170 := [mp~ #134 #169]: #129
#552 := (not #129)
#553 := (or #552 #510)
#554 := [quant-inst #3]: #553
#548 := [unit-resolution #554 #170]: #510
#555 := [monotonicity #548]: #549
#557 := [monotonicity #555]: #556
#492 := (= #445 4::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 4::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#158 := (~ #13 #13)
#156 := (~ #12 #12)
#157 := [refl]: #156
#159 := [nnf-pos #157]: #158
#124 := [asserted]: #13
#160 := [mp~ #124 #159]: #13
#497 := (not #13)
#498 := (or #497 #492)
#499 := [quant-inst #11]: #498
#558 := [unit-resolution #499 #160]: #492
#582 := [monotonicity #558 #557]: #581
#585 := (= #100 #502)
#451 := (f10 3::Int #445 #95)
#493 := (f25 f7 #451)
#503 := (= #493 #502)
#65 := (:var 0 S9)
#63 := (:var 1 S1)
#77 := (:var 4 S3)
#79 := (f6 #77 #63)
#80 := (f21 f22 #79)
#81 := (f20 #80 #65)
#28 := (:var 2 Int)
#61 := (:var 3 Int)
#82 := (f10 #61 #28 #81)
#338 := (pattern #82)
#64 := (f21 f22 #63)
#66 := (f20 #64 #65)
#67 := (f10 #61 #28 #66)
#78 := (f25 #77 #67)
#337 := (pattern #78)
#83 := (= #78 #82)
#339 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) (:pat #337 #338) #83)
#84 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) #83)
#342 := (iff #84 #339)
#340 := (iff #83 #83)
#341 := [refl]: #340
#343 := [quant-intro #341]: #342
#213 := (~ #84 #84)
#211 := (~ #83 #83)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#141 := [asserted]: #84
#215 := [mp~ #141 #214]: #84
#344 := [mp #215 #343]: #339
#506 := (not #339)
#507 := (or #506 #503)
#508 := [quant-inst #20 #17 #445 #3 #94]: #507
#559 := [unit-resolution #508 #344]: #503
#579 := (= #100 #493)
#577 := (= #99 #451)
#355 := (f3 f5 3::Int)
#449 := (f10 #355 #445 #95)
#573 := (= #449 #451)
#571 := (= #451 #449)
#561 := (= 3::Int #355)
#441 := (= #355 3::Int)
#15 := (f3 f5 #8)
#16 := (pattern #15)
#18 := (= #15 3::Int)
#19 := (forall (vars (?v0 Int)) (:pat #16) #18)
#163 := (~ #19 #19)
#161 := (~ #18 #18)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#125 := [asserted]: #19
#165 := [mp~ #125 #164]: #19
#446 := (not #19)
#447 := (or #446 #441)
#448 := [quant-inst #17]: #447
#560 := [unit-resolution #448 #165]: #441
#562 := [symm #560]: #561
#572 := [monotonicity #562]: #571
#574 := [symm #572]: #573
#575 := (= #99 #449)
#354 := (f10 #355 4::Int #95)
#442 := (f15 f4 #354)
#450 := (= #442 #449)
#30 := (:var 0 S4)
#29 := (:var 1 Int)
#43 := (:var 3 S2)
#50 := (f3 #43 #29)
#51 := (f10 #28 #50 #30)
#309 := (pattern #51)
#31 := (f10 #28 #29 #30)
#49 := (f15 #43 #31)
#308 := (pattern #49)
#52 := (= #49 #51)
#310 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #308 #309) #52)
#53 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #52)
#313 := (iff #53 #310)
#311 := (iff #52 #52)
#312 := [refl]: #311
#314 := [quant-intro #312]: #313
#193 := (~ #53 #53)
#191 := (~ #52 #52)
#192 := [refl]: #191
#194 := [nnf-pos #192]: #193
#137 := [asserted]: #53
#195 := [mp~ #137 #194]: #53
#315 := [mp #195 #314]: #310
#453 := (not #310)
#454 := (or #453 #450)
#455 := [quant-inst #7 #355 #11 #95]: #454
#563 := [unit-resolution #455 #315]: #450
#569 := (= #99 #442)
#567 := (= #98 #354)
#353 := (f14 f5 #96)
#361 := (= #353 #354)
#45 := (f3 #43 #28)
#46 := (f10 #45 #29 #30)
#301 := (pattern #46)
#44 := (f14 #43 #31)
#300 := (pattern #44)
#47 := (= #44 #46)
#302 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #300 #301) #47)
#48 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #47)
#305 := (iff #48 #302)
#303 := (iff #47 #47)
#304 := [refl]: #303
#306 := [quant-intro #304]: #305
#188 := (~ #48 #48)
#186 := (~ #47 #47)
#187 := [refl]: #186
#189 := [nnf-pos #187]: #188
#136 := [asserted]: #48
#190 := [mp~ #136 #189]: #48
#307 := [mp #190 #306]: #302
#364 := (not #302)
#365 := (or #364 #361)
#366 := [quant-inst #14 #17 #11 #95]: #365
#564 := [unit-resolution #366 #307]: #361
#565 := (= #98 #353)
#566 := [monotonicity #151]: #565
#568 := [trans #566 #564]: #567
#570 := [monotonicity #568]: #569
#576 := [trans #570 #563]: #575
#578 := [trans #576 #574]: #577
#580 := [monotonicity #578]: #579
#586 := [trans #580 #559]: #585
#588 := [trans #586 #582]: #587
#589 := [trans #588 #584]: #101
#152 := (not #101)
#154 := [not-or-elim #153]: #152
[unit-resolution #154 #589]: false
unsat
b7ee8e1470156257eed64bf3397227c8530efee0 233 0
#2 := false
decl f28 :: S6
#92 := f28
decl f14 :: (-> S2 S6 S6)
decl f25 :: (-> S3 S6 S6)
decl f15 :: (-> S2 S6 S6)
decl f4 :: S2
#7 := f4
#98 := (f15 f4 f28)
decl f7 :: S3
#20 := f7
#99 := (f25 f7 #98)
decl f5 :: S2
#14 := f5
#100 := (f14 f5 #99)
#101 := (= #100 f28)
decl f10 :: (-> Int Int S4 S6)
decl f20 :: (-> S11 S9 S4)
decl f29 :: S9
#94 := f29
decl f21 :: (-> S12 S1 S11)
decl f1 :: S1
#3 := f1
decl f22 :: S12
#62 := f22
#93 := (f21 f22 f1)
#95 := (f20 #93 f29)
#11 := 4::Int
#17 := 3::Int
#96 := (f10 3::Int 4::Int #95)
#583 := (= #96 f28)
#97 := (= f28 #96)
#144 := (not #97)
#145 := (or #144 #101)
#148 := (not #145)
#102 := (implies #97 #101)
#103 := (not #102)
#149 := (iff #103 #148)
#146 := (iff #102 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#143 := [asserted]: #103
#153 := [mp #143 #150]: #148
#151 := [not-or-elim #153]: #97
#584 := [symm #151]: #583
#587 := (= #100 #96)
decl f6 :: (-> S3 S1 S1)
#445 := (f6 f7 f1)
#449 := (f21 f22 #445)
#450 := (f20 #449 f29)
decl f3 :: (-> S2 Int Int)
#493 := (f3 f5 3::Int)
#499 := (f10 #493 4::Int #450)
#581 := (= #499 #96)
#556 := (= #450 #95)
#551 := (= #449 #93)
#459 := (= #445 f1)
#21 := (:var 0 S1)
#22 := (f6 f7 #21)
#23 := (pattern #22)
#24 := (= #22 f1)
#129 := (forall (vars (?v0 S1)) (:pat #23) #24)
#168 := (~ #129 #129)
#166 := (~ #24 #24)
#167 := [refl]: #166
#169 := [nnf-pos #167]: #168
#1 := true
#25 := (iff #24 true)
#26 := (forall (vars (?v0 S1)) (:pat #23) #25)
#130 := (iff #26 #129)
#127 := (iff #25 #24)
#128 := [rewrite]: #127
#131 := [quant-intro #128]: #130
#126 := [asserted]: #26
#134 := [mp #126 #131]: #129
#170 := [mp~ #134 #169]: #129
#496 := (not #129)
#497 := (or #496 #459)
#498 := [quant-inst #3]: #497
#548 := [unit-resolution #498 #170]: #459
#555 := [monotonicity #548]: #551
#557 := [monotonicity #555]: #556
#547 := (= #493 3::Int)
#8 := (:var 0 Int)
#15 := (f3 f5 #8)
#16 := (pattern #15)
#18 := (= #15 3::Int)
#19 := (forall (vars (?v0 Int)) (:pat #16) #18)
#163 := (~ #19 #19)
#161 := (~ #18 #18)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#125 := [asserted]: #19
#165 := [mp~ #125 #164]: #19
#552 := (not #19)
#553 := (or #552 #547)
#554 := [quant-inst #17]: #553
#558 := [unit-resolution #554 #165]: #547
#582 := [monotonicity #558 #557]: #581
#585 := (= #100 #499)
#453 := (f10 3::Int 4::Int #450)
#492 := (f14 f5 #453)
#500 := (= #492 #499)
#30 := (:var 0 S4)
#29 := (:var 1 Int)
#28 := (:var 2 Int)
#43 := (:var 3 S2)
#45 := (f3 #43 #28)
#46 := (f10 #45 #29 #30)
#301 := (pattern #46)
#31 := (f10 #28 #29 #30)
#44 := (f14 #43 #31)
#300 := (pattern #44)
#47 := (= #44 #46)
#302 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #300 #301) #47)
#48 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #47)
#305 := (iff #48 #302)
#303 := (iff #47 #47)
#304 := [refl]: #303
#306 := [quant-intro #304]: #305
#188 := (~ #48 #48)
#186 := (~ #47 #47)
#187 := [refl]: #186
#189 := [nnf-pos #187]: #188
#136 := [asserted]: #48
#190 := [mp~ #136 #189]: #48
#307 := [mp #190 #306]: #302
#503 := (not #302)
#504 := (or #503 #500)
#505 := [quant-inst #14 #17 #11 #450]: #504
#559 := [unit-resolution #505 #307]: #500
#579 := (= #100 #492)
#577 := (= #99 #453)
#355 := (f3 f4 4::Int)
#451 := (f10 3::Int #355 #450)
#573 := (= #451 #453)
#571 := (= #453 #451)
#561 := (= 4::Int #355)
#441 := (= #355 4::Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 4::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#158 := (~ #13 #13)
#156 := (~ #12 #12)
#157 := [refl]: #156
#159 := [nnf-pos #157]: #158
#124 := [asserted]: #13
#160 := [mp~ #124 #159]: #13
#446 := (not #13)
#447 := (or #446 #441)
#448 := [quant-inst #11]: #447
#560 := [unit-resolution #448 #160]: #441
#562 := [symm #560]: #561
#572 := [monotonicity #562]: #571
#574 := [symm #572]: #573
#575 := (= #99 #451)
#354 := (f10 3::Int #355 #95)
#442 := (f25 f7 #354)
#452 := (= #442 #451)
#65 := (:var 0 S9)
#63 := (:var 1 S1)
#77 := (:var 4 S3)
#79 := (f6 #77 #63)
#80 := (f21 f22 #79)
#81 := (f20 #80 #65)
#61 := (:var 3 Int)
#82 := (f10 #61 #28 #81)
#338 := (pattern #82)
#64 := (f21 f22 #63)
#66 := (f20 #64 #65)
#67 := (f10 #61 #28 #66)
#78 := (f25 #77 #67)
#337 := (pattern #78)
#83 := (= #78 #82)
#339 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) (:pat #337 #338) #83)
#84 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) #83)
#342 := (iff #84 #339)
#340 := (iff #83 #83)
#341 := [refl]: #340
#343 := [quant-intro #341]: #342
#213 := (~ #84 #84)
#211 := (~ #83 #83)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#141 := [asserted]: #84
#215 := [mp~ #141 #214]: #84
#344 := [mp #215 #343]: #339
#455 := (not #339)
#456 := (or #455 #452)
#457 := [quant-inst #20 #17 #355 #3 #94]: #456
#563 := [unit-resolution #457 #344]: #452
#569 := (= #99 #442)
#567 := (= #98 #354)
#353 := (f15 f4 #96)
#361 := (= #353 #354)
#50 := (f3 #43 #29)
#51 := (f10 #28 #50 #30)
#309 := (pattern #51)
#49 := (f15 #43 #31)
#308 := (pattern #49)
#52 := (= #49 #51)
#310 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #308 #309) #52)
#53 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #52)
#313 := (iff #53 #310)
#311 := (iff #52 #52)
#312 := [refl]: #311
#314 := [quant-intro #312]: #313
#193 := (~ #53 #53)
#191 := (~ #52 #52)
#192 := [refl]: #191
#194 := [nnf-pos #192]: #193
#137 := [asserted]: #53
#195 := [mp~ #137 #194]: #53
#315 := [mp #195 #314]: #310
#364 := (not #310)
#365 := (or #364 #361)
#366 := [quant-inst #7 #17 #11 #95]: #365
#564 := [unit-resolution #366 #315]: #361
#565 := (= #98 #353)
#566 := [monotonicity #151]: #565
#568 := [trans #566 #564]: #567
#570 := [monotonicity #568]: #569
#576 := [trans #570 #563]: #575
#578 := [trans #576 #574]: #577
#580 := [monotonicity #578]: #579
#586 := [trans #580 #559]: #585
#588 := [trans #586 #582]: #587
#589 := [trans #588 #584]: #101
#152 := (not #101)
#154 := [not-or-elim #153]: #152
[unit-resolution #154 #589]: false
unsat
41083c23e36988c33cc02e1eff5234558acdcb86 233 0
#2 := false
decl f28 :: S6
#92 := f28
decl f15 :: (-> S2 S6 S6)
decl f14 :: (-> S2 S6 S6)
decl f25 :: (-> S3 S6 S6)
decl f7 :: S3
#20 := f7
#98 := (f25 f7 f28)
decl f5 :: S2
#14 := f5
#99 := (f14 f5 #98)
decl f4 :: S2
#7 := f4
#100 := (f15 f4 #99)
#101 := (= #100 f28)
decl f10 :: (-> Int Int S4 S6)
decl f20 :: (-> S11 S9 S4)
decl f29 :: S9
#94 := f29
decl f21 :: (-> S12 S1 S11)
decl f1 :: S1
#3 := f1
decl f22 :: S12
#62 := f22
#93 := (f21 f22 f1)
#95 := (f20 #93 f29)
#11 := 4::Int
#17 := 3::Int
#96 := (f10 3::Int 4::Int #95)
#583 := (= #96 f28)
#97 := (= f28 #96)
#144 := (not #97)
#145 := (or #144 #101)
#148 := (not #145)
#102 := (implies #97 #101)
#103 := (not #102)
#149 := (iff #103 #148)
#146 := (iff #102 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#143 := [asserted]: #103
#153 := [mp #143 #150]: #148
#151 := [not-or-elim #153]: #97
#584 := [symm #151]: #583
#587 := (= #100 #96)
decl f3 :: (-> S2 Int Int)
#495 := (f3 f4 4::Int)
#442 := (f3 f5 3::Int)
#499 := (f10 #442 #495 #95)
#581 := (= #499 #96)
#547 := (= #495 4::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 4::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#158 := (~ #13 #13)
#156 := (~ #12 #12)
#157 := [refl]: #156
#159 := [nnf-pos #157]: #158
#124 := [asserted]: #13
#160 := [mp~ #124 #159]: #13
#552 := (not #13)
#553 := (or #552 #547)
#554 := [quant-inst #11]: #553
#548 := [unit-resolution #554 #160]: #547
#491 := (= #442 3::Int)
#15 := (f3 f5 #8)
#16 := (pattern #15)
#18 := (= #15 3::Int)
#19 := (forall (vars (?v0 Int)) (:pat #16) #18)
#163 := (~ #19 #19)
#161 := (~ #18 #18)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#125 := [asserted]: #19
#165 := [mp~ #125 #164]: #19
#496 := (not #19)
#497 := (or #496 #491)
#498 := [quant-inst #17]: #497
#551 := [unit-resolution #498 #165]: #491
#582 := [monotonicity #551 #548]: #581
#585 := (= #100 #499)
#450 := (f10 #442 4::Int #95)
#492 := (f15 f4 #450)
#500 := (= #492 #499)
#30 := (:var 0 S4)
#29 := (:var 1 Int)
#43 := (:var 3 S2)
#50 := (f3 #43 #29)
#28 := (:var 2 Int)
#51 := (f10 #28 #50 #30)
#309 := (pattern #51)
#31 := (f10 #28 #29 #30)
#49 := (f15 #43 #31)
#308 := (pattern #49)
#52 := (= #49 #51)
#310 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #308 #309) #52)
#53 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #52)
#313 := (iff #53 #310)
#311 := (iff #52 #52)
#312 := [refl]: #311
#314 := [quant-intro #312]: #313
#193 := (~ #53 #53)
#191 := (~ #52 #52)
#192 := [refl]: #191
#194 := [nnf-pos #192]: #193
#137 := [asserted]: #53
#195 := [mp~ #137 #194]: #53
#315 := [mp #195 #314]: #310
#503 := (not #310)
#504 := (or #503 #500)
#505 := [quant-inst #7 #442 #11 #95]: #504
#555 := [unit-resolution #505 #315]: #500
#579 := (= #100 #492)
#577 := (= #99 #450)
decl f6 :: (-> S3 S1 S1)
#355 := (f6 f7 f1)
#354 := (f21 f22 #355)
#361 := (f20 #354 f29)
#448 := (f10 #442 4::Int #361)
#573 := (= #448 #450)
#571 := (= #450 #448)
#561 := (= #95 #361)
#559 := (= #361 #95)
#557 := (= #354 #93)
#412 := (= #355 f1)
#21 := (:var 0 S1)
#22 := (f6 f7 #21)
#23 := (pattern #22)
#24 := (= #22 f1)
#129 := (forall (vars (?v0 S1)) (:pat #23) #24)
#168 := (~ #129 #129)
#166 := (~ #24 #24)
#167 := [refl]: #166
#169 := [nnf-pos #167]: #168
#1 := true
#25 := (iff #24 true)
#26 := (forall (vars (?v0 S1)) (:pat #23) #25)
#130 := (iff #26 #129)
#127 := (iff #25 #24)
#128 := [rewrite]: #127
#131 := [quant-intro #128]: #130
#126 := [asserted]: #26
#134 := [mp #126 #131]: #129
#170 := [mp~ #134 #169]: #129
#445 := (not #129)
#446 := (or #445 #412)
#447 := [quant-inst #3]: #446
#556 := [unit-resolution #447 #170]: #412
#558 := [monotonicity #556]: #557
#560 := [monotonicity #558]: #559
#562 := [symm #560]: #561
#572 := [monotonicity #562]: #571
#574 := [symm #572]: #573
#575 := (= #99 #448)
#362 := (f10 3::Int 4::Int #361)
#441 := (f14 f5 #362)
#449 := (= #441 #448)
#45 := (f3 #43 #28)
#46 := (f10 #45 #29 #30)
#301 := (pattern #46)
#44 := (f14 #43 #31)
#300 := (pattern #44)
#47 := (= #44 #46)
#302 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #300 #301) #47)
#48 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #47)
#305 := (iff #48 #302)
#303 := (iff #47 #47)
#304 := [refl]: #303
#306 := [quant-intro #304]: #305
#188 := (~ #48 #48)
#186 := (~ #47 #47)
#187 := [refl]: #186
#189 := [nnf-pos #187]: #188
#136 := [asserted]: #48
#190 := [mp~ #136 #189]: #48
#307 := [mp #190 #306]: #302
#452 := (not #302)
#453 := (or #452 #449)
#454 := [quant-inst #14 #17 #11 #361]: #453
#563 := [unit-resolution #454 #307]: #449
#569 := (= #99 #441)
#567 := (= #98 #362)
#353 := (f25 f7 #96)
#363 := (= #353 #362)
#65 := (:var 0 S9)
#63 := (:var 1 S1)
#77 := (:var 4 S3)
#79 := (f6 #77 #63)
#80 := (f21 f22 #79)
#81 := (f20 #80 #65)
#61 := (:var 3 Int)
#82 := (f10 #61 #28 #81)
#338 := (pattern #82)
#64 := (f21 f22 #63)
#66 := (f20 #64 #65)
#67 := (f10 #61 #28 #66)
#78 := (f25 #77 #67)
#337 := (pattern #78)
#83 := (= #78 #82)
#339 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) (:pat #337 #338) #83)
#84 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) #83)
#342 := (iff #84 #339)
#340 := (iff #83 #83)
#341 := [refl]: #340
#343 := [quant-intro #341]: #342
#213 := (~ #84 #84)
#211 := (~ #83 #83)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#141 := [asserted]: #84
#215 := [mp~ #141 #214]: #84
#344 := [mp #215 #343]: #339
#366 := (not #339)
#367 := (or #366 #363)
#368 := [quant-inst #20 #17 #11 #3 #94]: #367
#564 := [unit-resolution #368 #344]: #363
#565 := (= #98 #353)
#566 := [monotonicity #151]: #565
#568 := [trans #566 #564]: #567
#570 := [monotonicity #568]: #569
#576 := [trans #570 #563]: #575
#578 := [trans #576 #574]: #577
#580 := [monotonicity #578]: #579
#586 := [trans #580 #555]: #585
#588 := [trans #586 #582]: #587
#589 := [trans #588 #584]: #101
#152 := (not #101)
#154 := [not-or-elim #153]: #152
[unit-resolution #154 #589]: false
unsat
1dd70ea57d3666cb5aaa01a8ef0d758d0e424162 18 0
#2 := false
decl f3 :: S2
#7 := f3
#51 := (= f3 f3)
#52 := (not #51)
#106 := (iff #52 false)
#1 := true
#101 := (not true)
#104 := (iff #101 false)
#105 := [rewrite]: #104
#102 := (iff #52 #101)
#98 := (iff #51 true)
#100 := [rewrite]: #98
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#97 := [asserted]: #52
[mp #97 #107]: false
unsat
bdeca06ba44784eaf57a202bbea41e9cc79df1f4 18 0
#2 := false
decl f6 :: S2
#12 := f6
#51 := (= f6 f6)
#52 := (not #51)
#106 := (iff #52 false)
#1 := true
#101 := (not true)
#104 := (iff #101 false)
#105 := [rewrite]: #104
#102 := (iff #52 #101)
#98 := (iff #51 true)
#100 := [rewrite]: #98
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#97 := [asserted]: #52
[mp #97 #107]: false
unsat
1d9cdf8282138ea38f1106fe994e0979fa86c7e4 213 0
#2 := false
#13 := 2::Int
#9 := 1::Int
#243 := (= 1::Int 2::Int)
#255 := (iff #243 false)
#256 := [rewrite]: #255
decl f11 :: (-> S6 S2 Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#8 := f5
#14 := (f4 f5 2::Int)
decl f12 :: S6
#25 := f12
#227 := (f11 f12 #14)
#228 := (= #227 2::Int)
decl f1 :: S1
#3 := f1
decl f13 :: (-> Int S7 S1)
decl f14 :: S7
#33 := f14
#217 := (f13 2::Int f14)
#218 := (= #217 f1)
#226 := (not #218)
#366 := [hypothesis]: #226
#32 := (:var 0 Int)
#34 := (f13 #32 f14)
#190 := (pattern #34)
#17 := 3::Int
#38 := (= #32 3::Int)
#37 := (= #32 2::Int)
#36 := (= #32 1::Int)
#81 := (or #36 #37 #38)
#35 := (= #34 f1)
#84 := (iff #35 #81)
#191 := (forall (vars (?v0 Int)) (:pat #190) #84)
#87 := (forall (vars (?v0 Int)) #84)
#194 := (iff #87 #191)
#192 := (iff #84 #84)
#193 := [refl]: #192
#195 := [quant-intro #193]: #194
#111 := (~ #87 #87)
#109 := (~ #84 #84)
#110 := [refl]: #109
#112 := [nnf-pos #110]: #111
#39 := (or #37 #38)
#40 := (or #36 #39)
#41 := (iff #35 #40)
#42 := (forall (vars (?v0 Int)) #41)
#88 := (iff #42 #87)
#85 := (iff #41 #84)
#82 := (iff #40 #81)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#78 := [asserted]: #42
#90 := [mp #78 #89]: #87
#113 := [mp~ #90 #112]: #87
#196 := [mp #113 #195]: #191
#273 := (not #191)
#357 := (or #273 #218)
#334 := (= 2::Int 3::Int)
#331 := (= 2::Int 2::Int)
#330 := (= 2::Int 1::Int)
#335 := (or #330 #331 #334)
#336 := (iff #218 #335)
#358 := (or #273 #336)
#360 := (iff #358 #357)
#362 := (iff #357 #357)
#363 := [rewrite]: #362
#355 := (iff #336 #218)
#1 := true
#350 := (iff #218 true)
#353 := (iff #350 #218)
#354 := [rewrite]: #353
#351 := (iff #336 #350)
#348 := (iff #335 true)
#343 := (or false true false)
#346 := (iff #343 true)
#347 := [rewrite]: #346
#344 := (iff #335 #343)
#341 := (iff #334 false)
#342 := [rewrite]: #341
#339 := (iff #331 true)
#340 := [rewrite]: #339
#337 := (iff #330 false)
#338 := [rewrite]: #337
#345 := [monotonicity #338 #340 #342]: #344
#349 := [trans #345 #347]: #348
#352 := [monotonicity #349]: #351
#356 := [trans #352 #354]: #355
#361 := [monotonicity #356]: #360
#364 := [trans #361 #363]: #360
#359 := [quant-inst #13]: #358
#365 := [mp #359 #364]: #357
#367 := [unit-resolution #365 #196 #366]: false
#368 := [lemma #367]: #218
#229 := (or #226 #228)
#46 := (f4 f5 #32)
#204 := (pattern #46)
#47 := (f11 f12 #46)
#48 := (= #47 #32)
#91 := (not #35)
#92 := (or #91 #48)
#205 := (forall (vars (?v0 Int)) (:pat #190 #204) #92)
#95 := (forall (vars (?v0 Int)) #92)
#208 := (iff #95 #205)
#206 := (iff #92 #92)
#207 := [refl]: #206
#209 := [quant-intro #207]: #208
#121 := (~ #95 #95)
#119 := (~ #92 #92)
#120 := [refl]: #119
#122 := [nnf-pos #120]: #121
#49 := (implies #35 #48)
#50 := (forall (vars (?v0 Int)) #49)
#96 := (iff #50 #95)
#93 := (iff #49 #92)
#94 := [rewrite]: #93
#97 := [quant-intro #94]: #96
#80 := [asserted]: #50
#100 := [mp #80 #97]: #95
#123 := [mp~ #100 #122]: #95
#210 := [mp #123 #209]: #205
#219 := (not #205)
#232 := (or #219 #226 #228)
#233 := (or #219 #229)
#235 := (iff #233 #232)
#236 := [rewrite]: #235
#234 := [quant-inst #13]: #233
#237 := [mp #234 #236]: #232
#369 := [unit-resolution #237 #210]: #229
#370 := [unit-resolution #369 #368]: #228
#387 := (= 1::Int #227)
#385 := (= #227 1::Int)
#10 := (f4 f5 1::Int)
#214 := (f11 f12 #10)
#215 := (= #214 1::Int)
#211 := (f13 1::Int f14)
#212 := (= #211 f1)
#213 := (not #212)
#283 := [hypothesis]: #213
#274 := (or #273 #212)
#250 := (= 1::Int 3::Int)
#242 := (= 1::Int 1::Int)
#251 := (or #242 #243 #250)
#252 := (iff #212 #251)
#275 := (or #273 #252)
#277 := (iff #275 #274)
#279 := (iff #274 #274)
#280 := [rewrite]: #279
#271 := (iff #252 #212)
#266 := (iff #212 true)
#269 := (iff #266 #212)
#270 := [rewrite]: #269
#267 := (iff #252 #266)
#264 := (iff #251 true)
#259 := (or true false false)
#262 := (iff #259 true)
#263 := [rewrite]: #262
#260 := (iff #251 #259)
#257 := (iff #250 false)
#258 := [rewrite]: #257
#253 := (iff #242 true)
#254 := [rewrite]: #253
#261 := [monotonicity #254 #256 #258]: #260
#265 := [trans #261 #263]: #264
#268 := [monotonicity #265]: #267
#272 := [trans #268 #270]: #271
#278 := [monotonicity #272]: #277
#281 := [trans #278 #280]: #277
#276 := [quant-inst #9]: #275
#282 := [mp #276 #281]: #274
#284 := [unit-resolution #282 #196 #283]: false
#285 := [lemma #284]: #212
#216 := (or #213 #215)
#220 := (or #219 #213 #215)
#221 := (or #219 #216)
#223 := (iff #221 #220)
#224 := [rewrite]: #223
#222 := [quant-inst #9]: #221
#225 := [mp #222 #224]: #220
#371 := [unit-resolution #225 #210]: #216
#372 := [unit-resolution #371 #285]: #215
#383 := (= #227 #214)
#381 := (= #14 #10)
decl f3 :: S2
#7 := f3
#11 := (= f3 #10)
#74 := [asserted]: #11
#379 := (= #14 f3)
decl f6 :: S2
#12 := f6
#377 := (= f6 f3)
#51 := (= f3 f6)
#52 := (not #51)
#53 := (not #52)
#99 := (iff #53 #51)
#101 := [rewrite]: #99
#98 := [asserted]: #53
#104 := [mp #98 #101]: #51
#378 := [symm #104]: #377
#375 := (= #14 f6)
#15 := (= f6 #14)
#75 := [asserted]: #15
#376 := [symm #75]: #375
#380 := [trans #376 #378]: #379
#382 := [trans #380 #74]: #381
#384 := [monotonicity #382]: #383
#386 := [trans #384 #372]: #385
#388 := [symm #386]: #387
#389 := [trans #388 #370]: #243
[mp #389 #256]: false
unsat
0fc3293c114d86e86e5fda166c582f7031eda038 229 0
#2 := false
decl f6 :: S2
#12 := f6
decl f8 :: (-> S4 S2 S2)
decl f3 :: S2
#7 := f3
decl f9 :: (-> S5 S2 S4)
decl f10 :: S5
#20 := f10
#51 := (f9 f10 f3)
#52 := (f8 #51 f3)
#53 := (= #52 f6)
decl f4 :: (-> S3 Int S2)
#13 := 2::Int
decl f5 :: S3
#8 := f5
#14 := (f4 f5 2::Int)
#435 := (= #14 f6)
#15 := (= f6 #14)
#76 := [asserted]: #15
#436 := [symm #76]: #435
#439 := (= #52 #14)
decl f11 :: (-> S6 S2 Int)
#9 := 1::Int
#10 := (f4 f5 1::Int)
decl f12 :: S6
#25 := f12
#211 := (f11 f12 #10)
#215 := (* 2::Int #211)
#218 := (f4 f5 #215)
#433 := (= #218 #14)
#431 := (= #14 #218)
#420 := (= 2::Int #215)
#418 := (= #215 2::Int)
#248 := (<= #211 1::Int)
#237 := (= #211 1::Int)
decl f1 :: S1
#3 := f1
decl f13 :: (-> Int S7 S1)
decl f14 :: S7
#33 := f14
#234 := (f13 1::Int f14)
#235 := (= #234 f1)
#236 := (not #235)
#409 := [hypothesis]: #236
#32 := (:var 0 Int)
#34 := (f13 #32 f14)
#188 := (pattern #34)
#17 := 3::Int
#38 := (= #32 3::Int)
#37 := (= #32 2::Int)
#36 := (= #32 1::Int)
#82 := (or #36 #37 #38)
#35 := (= #34 f1)
#85 := (iff #35 #82)
#189 := (forall (vars (?v0 Int)) (:pat #188) #85)
#88 := (forall (vars (?v0 Int)) #85)
#192 := (iff #88 #189)
#190 := (iff #85 #85)
#191 := [refl]: #190
#193 := [quant-intro #191]: #192
#109 := (~ #88 #88)
#107 := (~ #85 #85)
#108 := [refl]: #107
#110 := [nnf-pos #108]: #109
#39 := (or #37 #38)
#40 := (or #36 #39)
#41 := (iff #35 #40)
#42 := (forall (vars (?v0 Int)) #41)
#89 := (iff #42 #88)
#86 := (iff #41 #85)
#83 := (iff #40 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#90 := [quant-intro #87]: #89
#79 := [asserted]: #42
#91 := [mp #79 #90]: #88
#111 := [mp~ #91 #110]: #88
#194 := [mp #111 #193]: #189
#311 := (not #189)
#400 := (or #311 #235)
#377 := (= 1::Int 3::Int)
#376 := (= 1::Int 2::Int)
#375 := (= 1::Int 1::Int)
#378 := (or #375 #376 #377)
#379 := (iff #235 #378)
#401 := (or #311 #379)
#403 := (iff #401 #400)
#405 := (iff #400 #400)
#406 := [rewrite]: #405
#398 := (iff #379 #235)
#1 := true
#393 := (iff #235 true)
#396 := (iff #393 #235)
#397 := [rewrite]: #396
#394 := (iff #379 #393)
#391 := (iff #378 true)
#386 := (or true false false)
#389 := (iff #386 true)
#390 := [rewrite]: #389
#387 := (iff #378 #386)
#384 := (iff #377 false)
#385 := [rewrite]: #384
#382 := (iff #376 false)
#383 := [rewrite]: #382
#380 := (iff #375 true)
#381 := [rewrite]: #380
#388 := [monotonicity #381 #383 #385]: #387
#392 := [trans #388 #390]: #391
#395 := [monotonicity #392]: #394
#399 := [trans #395 #397]: #398
#404 := [monotonicity #399]: #403
#407 := [trans #404 #406]: #403
#402 := [quant-inst #9]: #401
#408 := [mp #402 #407]: #400
#410 := [unit-resolution #408 #194 #409]: false
#411 := [lemma #410]: #235
#238 := (or #236 #237)
#46 := (f4 f5 #32)
#202 := (pattern #46)
#47 := (f11 f12 #46)
#48 := (= #47 #32)
#92 := (not #35)
#93 := (or #92 #48)
#203 := (forall (vars (?v0 Int)) (:pat #188 #202) #93)
#96 := (forall (vars (?v0 Int)) #93)
#206 := (iff #96 #203)
#204 := (iff #93 #93)
#205 := [refl]: #204
#207 := [quant-intro #205]: #206
#119 := (~ #96 #96)
#117 := (~ #93 #93)
#118 := [refl]: #117
#120 := [nnf-pos #118]: #119
#49 := (implies #35 #48)
#50 := (forall (vars (?v0 Int)) #49)
#97 := (iff #50 #96)
#94 := (iff #49 #93)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#81 := [asserted]: #50
#101 := [mp #81 #98]: #96
#121 := [mp~ #101 #120]: #96
#208 := [mp #121 #207]: #203
#241 := (not #203)
#242 := (or #241 #236 #237)
#243 := (or #241 #238)
#245 := (iff #243 #242)
#246 := [rewrite]: #245
#244 := [quant-inst #9]: #243
#247 := [mp #244 #246]: #242
#412 := [unit-resolution #247 #208]: #238
#413 := [unit-resolution #412 #411]: #237
#318 := (not #237)
#357 := (or #318 #248)
#358 := [th-lemma arith triangle-eq]: #357
#414 := [unit-resolution #358 #413]: #248
#249 := (>= #211 1::Int)
#415 := (or #318 #249)
#416 := [th-lemma arith triangle-eq]: #415
#417 := [unit-resolution #416 #413]: #249
#419 := [th-lemma arith eq-propagate -2 -2 #417 #414]: #418
#421 := [symm #419]: #420
#432 := [monotonicity #421]: #431
#434 := [symm #432]: #433
#437 := (= #52 #218)
#209 := (f9 f10 #10)
#210 := (f8 #209 #10)
#221 := (= #210 #218)
#23 := (:var 0 S2)
#21 := (:var 1 S2)
#22 := (f9 f10 #21)
#24 := (f8 #22 #23)
#181 := (pattern #24)
#27 := (f11 f12 #23)
#26 := (f11 f12 #21)
#28 := (+ #26 #27)
#29 := (f4 f5 #28)
#30 := (= #24 #29)
#182 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #181) #30)
#31 := (forall (vars (?v0 S2) (?v1 S2)) #30)
#185 := (iff #31 #182)
#183 := (iff #30 #30)
#184 := [refl]: #183
#186 := [quant-intro #184]: #185
#104 := (~ #31 #31)
#102 := (~ #30 #30)
#103 := [refl]: #102
#105 := [nnf-pos #103]: #104
#78 := [asserted]: #31
#106 := [mp~ #78 #105]: #31
#187 := [mp #106 #186]: #182
#224 := (not #182)
#225 := (or #224 #221)
#212 := (+ #211 #211)
#213 := (f4 f5 #212)
#214 := (= #210 #213)
#226 := (or #224 #214)
#228 := (iff #226 #225)
#230 := (iff #225 #225)
#231 := [rewrite]: #230
#222 := (iff #214 #221)
#219 := (= #213 #218)
#216 := (= #212 #215)
#217 := [rewrite]: #216
#220 := [monotonicity #217]: #219
#223 := [monotonicity #220]: #222
#229 := [monotonicity #223]: #228
#232 := [trans #229 #231]: #228
#227 := [quant-inst #10 #10]: #226
#233 := [mp #227 #232]: #225
#422 := [unit-resolution #233 #187]: #221
#429 := (= #52 #210)
#11 := (= f3 #10)
#75 := [asserted]: #11
#427 := (= #51 #209)
#425 := (= #209 #51)
#423 := (= #10 f3)
#424 := [symm #75]: #423
#426 := [monotonicity #424]: #425
#428 := [symm #426]: #427
#430 := [monotonicity #428 #75]: #429
#438 := [trans #430 #422]: #437
#440 := [trans #438 #434]: #439
#441 := [trans #440 #436]: #53
#54 := (not #53)
#99 := [asserted]: #54
[unit-resolution #99 #441]: false
unsat
e8662cdc68a4df85a63b9e4b41418ecf449034b2 340 0
#2 := false
decl f7 :: S2
#16 := f7
decl f8 :: (-> S4 S2 S2)
decl f6 :: S2
#12 := f6
decl f9 :: (-> S5 S2 S4)
decl f3 :: S2
#7 := f3
decl f10 :: S5
#20 := f10
#51 := (f9 f10 f3)
#52 := (f8 #51 f6)
#53 := (= #52 f7)
decl f4 :: (-> S3 Int S2)
#17 := 3::Int
decl f5 :: S3
#8 := f5
#18 := (f4 f5 3::Int)
#522 := (= #18 f7)
#19 := (= f7 #18)
#77 := [asserted]: #19
#523 := [symm #77]: #522
#526 := (= #52 #18)
decl f11 :: (-> S6 S2 Int)
#13 := 2::Int
#14 := (f4 f5 2::Int)
decl f12 :: S6
#25 := f12
#212 := (f11 f12 #14)
#9 := 1::Int
#10 := (f4 f5 1::Int)
#211 := (f11 f12 #10)
#213 := (+ #211 #212)
#214 := (f4 f5 #213)
#520 := (= #214 #18)
#518 := (= #18 #214)
#474 := (= 3::Int #213)
#383 := (= #213 3::Int)
#246 := (<= #212 2::Int)
#236 := (= #212 2::Int)
decl f1 :: S1
#3 := f1
decl f13 :: (-> Int S7 S1)
decl f14 :: S7
#33 := f14
#224 := (f13 2::Int f14)
#225 := (= #224 f1)
#235 := (not #225)
#513 := [hypothesis]: #235
#32 := (:var 0 Int)
#34 := (f13 #32 f14)
#188 := (pattern #34)
#38 := (= #32 3::Int)
#37 := (= #32 2::Int)
#36 := (= #32 1::Int)
#82 := (or #36 #37 #38)
#35 := (= #34 f1)
#85 := (iff #35 #82)
#189 := (forall (vars (?v0 Int)) (:pat #188) #85)
#88 := (forall (vars (?v0 Int)) #85)
#192 := (iff #88 #189)
#190 := (iff #85 #85)
#191 := [refl]: #190
#193 := [quant-intro #191]: #192
#109 := (~ #88 #88)
#107 := (~ #85 #85)
#108 := [refl]: #107
#110 := [nnf-pos #108]: #109
#39 := (or #37 #38)
#40 := (or #36 #39)
#41 := (iff #35 #40)
#42 := (forall (vars (?v0 Int)) #41)
#89 := (iff #42 #88)
#86 := (iff #41 #85)
#83 := (iff #40 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#90 := [quant-intro #87]: #89
#79 := [asserted]: #42
#91 := [mp #79 #90]: #88
#111 := [mp~ #91 #110]: #88
#194 := [mp #111 #193]: #189
#302 := (not #189)
#504 := (or #302 #225)
#481 := (= 2::Int 3::Int)
#451 := (= 2::Int 2::Int)
#450 := (= 2::Int 1::Int)
#482 := (or #450 #451 #481)
#483 := (iff #225 #482)
#505 := (or #302 #483)
#507 := (iff #505 #504)
#509 := (iff #504 #504)
#510 := [rewrite]: #509
#502 := (iff #483 #225)
#1 := true
#497 := (iff #225 true)
#500 := (iff #497 #225)
#501 := [rewrite]: #500
#498 := (iff #483 #497)
#495 := (iff #482 true)
#490 := (or false true false)
#493 := (iff #490 true)
#494 := [rewrite]: #493
#491 := (iff #482 #490)
#488 := (iff #481 false)
#489 := [rewrite]: #488
#486 := (iff #451 true)
#487 := [rewrite]: #486
#484 := (iff #450 false)
#485 := [rewrite]: #484
#492 := [monotonicity #485 #487 #489]: #491
#496 := [trans #492 #494]: #495
#499 := [monotonicity #496]: #498
#503 := [trans #499 #501]: #502
#508 := [monotonicity #503]: #507
#511 := [trans #508 #510]: #507
#506 := [quant-inst #13]: #505
#512 := [mp #506 #511]: #504
#514 := [unit-resolution #512 #194 #513]: false
#515 := [lemma #514]: #225
#237 := (or #235 #236)
#46 := (f4 f5 #32)
#202 := (pattern #46)
#47 := (f11 f12 #46)
#48 := (= #47 #32)
#92 := (not #35)
#93 := (or #92 #48)
#203 := (forall (vars (?v0 Int)) (:pat #188 #202) #93)
#96 := (forall (vars (?v0 Int)) #93)
#206 := (iff #96 #203)
#204 := (iff #93 #93)
#205 := [refl]: #204
#207 := [quant-intro #205]: #206
#119 := (~ #96 #96)
#117 := (~ #93 #93)
#118 := [refl]: #117
#120 := [nnf-pos #118]: #119
#49 := (implies #35 #48)
#50 := (forall (vars (?v0 Int)) #49)
#97 := (iff #50 #96)
#94 := (iff #49 #93)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#81 := [asserted]: #50
#101 := [mp #81 #98]: #96
#121 := [mp~ #101 #120]: #96
#208 := [mp #121 #207]: #203
#226 := (not #203)
#240 := (or #226 #235 #236)
#241 := (or #226 #237)
#243 := (iff #241 #240)
#244 := [rewrite]: #243
#242 := [quant-inst #13]: #241
#245 := [mp #242 #244]: #240
#460 := [unit-resolution #245 #208]: #237
#461 := [unit-resolution #460 #515]: #236
#312 := (not #236)
#462 := (or #312 #246)
#463 := [th-lemma arith triangle-eq]: #462
#464 := [unit-resolution #463 #461]: #246
#247 := (>= #212 2::Int)
#465 := (or #312 #247)
#466 := [th-lemma arith triangle-eq]: #465
#467 := [unit-resolution #466 #461]: #247
#233 := (<= #211 1::Int)
#222 := (= #211 1::Int)
#216 := (f13 1::Int f14)
#217 := (= #216 f1)
#221 := (not #217)
#447 := [hypothesis]: #221
#392 := (or #302 #217)
#398 := (= 1::Int 3::Int)
#397 := (= 1::Int 2::Int)
#396 := (= 1::Int 1::Int)
#399 := (or #396 #397 #398)
#400 := (iff #217 #399)
#393 := (or #302 #400)
#395 := (iff #393 #392)
#443 := (iff #392 #392)
#444 := [rewrite]: #443
#390 := (iff #400 #217)
#414 := (iff #217 true)
#388 := (iff #414 #217)
#389 := [rewrite]: #388
#415 := (iff #400 #414)
#412 := (iff #399 true)
#407 := (or true false false)
#410 := (iff #407 true)
#411 := [rewrite]: #410
#408 := (iff #399 #407)
#405 := (iff #398 false)
#406 := [rewrite]: #405
#403 := (iff #397 false)
#404 := [rewrite]: #403
#401 := (iff #396 true)
#402 := [rewrite]: #401
#409 := [monotonicity #402 #404 #406]: #408
#413 := [trans #409 #411]: #412
#416 := [monotonicity #413]: #415
#391 := [trans #416 #389]: #390
#442 := [monotonicity #391]: #395
#445 := [trans #442 #444]: #395
#394 := [quant-inst #9]: #393
#446 := [mp #394 #445]: #392
#448 := [unit-resolution #446 #194 #447]: false
#449 := [lemma #448]: #217
#223 := (or #221 #222)
#227 := (or #226 #221 #222)
#228 := (or #226 #223)
#230 := (iff #228 #227)
#231 := [rewrite]: #230
#229 := [quant-inst #9]: #228
#232 := [mp #229 #231]: #227
#468 := [unit-resolution #232 #208]: #223
#469 := [unit-resolution #468 #449]: #222
#351 := (not #222)
#470 := (or #351 #233)
#471 := [th-lemma arith triangle-eq]: #470
#472 := [unit-resolution #471 #469]: #233
#234 := (>= #211 1::Int)
#386 := (not #234)
#387 := [hypothesis]: #386
#417 := (or #351 #234)
#418 := [th-lemma arith triangle-eq]: #417
#419 := [unit-resolution #418 #387]: #351
#333 := (= #211 2::Int)
#354 := (not #333)
#348 := (>= #211 2::Int)
#420 := (not #348)
#421 := (or #420 #234)
#422 := [th-lemma arith farkas 1 1]: #421
#423 := [unit-resolution #422 #387]: #420
#424 := (or #354 #348)
#425 := [th-lemma arith triangle-eq]: #424
#426 := [unit-resolution #425 #423]: #354
#334 := (= #211 3::Int)
#357 := (not #334)
#350 := (>= #211 3::Int)
#427 := (not #350)
#428 := (or #427 #234)
#429 := [th-lemma arith farkas 1 1]: #428
#430 := [unit-resolution #429 #387]: #427
#431 := (or #357 #350)
#432 := [th-lemma arith triangle-eq]: #431
#433 := [unit-resolution #432 #430]: #357
#341 := (or #222 #333 #334)
#289 := (f13 #211 f14)
#290 := (= #289 f1)
#342 := (iff #290 #341)
#345 := (or #302 #342)
#346 := [quant-inst #211]: #345
#434 := [unit-resolution #346 #194]: #342
#363 := (not #342)
#436 := (or #363 #341)
#23 := (:var 0 S2)
#27 := (f11 f12 #23)
#195 := (pattern #27)
#43 := (f13 #27 f14)
#44 := (= #43 f1)
#196 := (forall (vars (?v0 S2)) (:pat #195) #44)
#45 := (forall (vars (?v0 S2)) #44)
#199 := (iff #45 #196)
#197 := (iff #44 #44)
#198 := [refl]: #197
#200 := [quant-intro #198]: #199
#114 := (~ #45 #45)
#112 := (~ #44 #44)
#113 := [refl]: #112
#115 := [nnf-pos #113]: #114
#80 := [asserted]: #45
#116 := [mp~ #80 #115]: #45
#201 := [mp #116 #200]: #196
#291 := (not #196)
#296 := (or #291 #290)
#297 := [quant-inst #10]: #296
#435 := [unit-resolution #297 #201]: #290
#366 := (not #290)
#367 := (or #363 #366 #341)
#368 := [def-axiom]: #367
#437 := [unit-resolution #368 #435]: #436
#438 := [unit-resolution #437 #434]: #341
#360 := (not #341)
#361 := (or #360 #222 #333 #334)
#362 := [def-axiom]: #361
#439 := [unit-resolution #362 #438]: #341
#440 := [unit-resolution #439 #433 #426 #419]: false
#441 := [lemma #440]: #234
#473 := [th-lemma arith eq-propagate -1 -1 -1 -1 #441 #472 #467 #464]: #383
#475 := [symm #473]: #474
#519 := [monotonicity #475]: #518
#521 := [symm #519]: #520
#524 := (= #52 #214)
#209 := (f9 f10 #10)
#210 := (f8 #209 #14)
#215 := (= #210 #214)
#21 := (:var 1 S2)
#22 := (f9 f10 #21)
#24 := (f8 #22 #23)
#181 := (pattern #24)
#26 := (f11 f12 #21)
#28 := (+ #26 #27)
#29 := (f4 f5 #28)
#30 := (= #24 #29)
#182 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #181) #30)
#31 := (forall (vars (?v0 S2) (?v1 S2)) #30)
#185 := (iff #31 #182)
#183 := (iff #30 #30)
#184 := [refl]: #183
#186 := [quant-intro #184]: #185
#104 := (~ #31 #31)
#102 := (~ #30 #30)
#103 := [refl]: #102
#105 := [nnf-pos #103]: #104
#78 := [asserted]: #31
#106 := [mp~ #78 #105]: #31
#187 := [mp #106 #186]: #182
#218 := (not #182)
#219 := (or #218 #215)
#220 := [quant-inst #10 #14]: #219
#476 := [unit-resolution #220 #187]: #215
#516 := (= #52 #210)
#15 := (= f6 #14)
#76 := [asserted]: #15
#452 := (= #51 #209)
#479 := (= #209 #51)
#477 := (= #10 f3)
#11 := (= f3 #10)
#75 := [asserted]: #11
#478 := [symm #75]: #477
#480 := [monotonicity #478]: #479
#453 := [symm #480]: #452
#517 := [monotonicity #453 #76]: #516
#525 := [trans #517 #476]: #524
#527 := [trans #525 #521]: #526
#528 := [trans #527 #523]: #53
#54 := (not #53)
#99 := [asserted]: #54
[unit-resolution #99 #528]: false
unsat
114113d4c28c25e534c670f47fca087183a5f8c8 1 0
unsat
494b946d69182e62cf2adb59a4908bcd2cc3c25f 1 0
unsat
846610dc3de8c529329029964342bed155b928be 1 0
unsat
c78972c2be9e010d564c219e8371a1e07b95e81b 1 0
unsat
6ebffc1a9d53b928532f7c058a376cb3c0716d92 1 0
unsat
bfcbce0fd0c787695b2cb81657f53a4e946de0f7 1 0
unsat
87c04d689bac52cec8b0c1a08d098942fd70d466 1 0
unsat
c290166c6fcbece0c64059bd0622a1d9dbb1c5e8 1 0
unsat
a2e1430a221557099dbbfaea91575c18c640d29c 1 0
unsat
2a17166993a82e94f975eebec87d116c80957ca3 1 0
unsat
59e681af5117de8711365345306b7aa17a425e95 1 0
unsat
5bc354c4cba9fa390e5a5b4fff48e724cd6a4ebf 1 0
unsat
0b4eaebaa1c7da0e8aacfa5a2eba079ece06e131 1 0
unsat
048b4d112d6dd41a60f998755f2db6b8efd86231 1 0
unsat
44b17af9b9a91745590d6ecb19c7206d98ab139a 1 0
unsat
3523e8d2bd307bbba5a32002f0ec6e28e5894143 1 0
unsat
6e8b6413930418b08c3489ea4eb22477eb9fad98 1 0
unsat
2ff6320af6e3da1595c21bde8e3d60f9f793b05e 1 0
unsat
c903ab15e32b62af335654e8c9787041ccb90f1d 1 0
unsat
626bc827bc367e9c39a2fe8c6f7c8a2681e74bce 1 0
unsat
8ef64ff3e519412fcade8a4d9a8bec98415d6a06 1 0
unsat
0e110597ee5fd59c05d2cfca519aa8eb04251546 1 0
unsat
7fd213cb5e600482169baaba3e41c80ffd02c436 1 0
unsat
885bfcca057c7a00c20747d601df50ad8423656f 1 0
unsat
a89a8374bf2ed246a6005542713c5d935dd6dfdc 1 0
unsat
876ed7294bbfc54103308ef6b14723c1148733bd 1 0
unsat
41d31522928c508669072711001a529f38867652 1 0
unsat
207ccab8c5caaba7048ab574dcdb91f4c1e73815 1 0
unsat
863ce4ac998f8311e2b7a27eadc176786183347f 1 0
unsat
0c7f2686d2381d34ae33481937606b55c3351e5e 1 0
unsat
c8c2c45b649fbbacff8b9a61badac4db22cb46c2 1 0
unsat
63761ff981670944c18e6dd437cfe4578c88fb15 1 0
unsat
55f1f6079a3e9b28fa8aecfb53cd816993999074 1 0
unsat
dd27e03a481e9d6d9ad7c5b84a5137b699e90735 1 0
unsat
d6059b26d228981814c293de9adcac3c10e56c06 1 0
unsat
4f91be474d91f53d29f3f2258bb7d273880ef8e6 1 0
unsat
fe0f4adcbca31458a44c9fa7c3a70eef3159899a 1 0
unsat
8a88bb45199657d7b93fb63596b175087ccee5b6 1 0
unsat
e9444ef1965eaddfc7689e8ddd3c142533cf3405 1 0
unsat
1cb7dac6ffcfcf174de9b93048f0d7b2e6695b47 1 0
unsat
bbaaddd8f857f1563ff57dbef0644812cb6b7217 1 0
unsat
bc866ccbb68526e04dbee31bfbf06c3c0c136997 1 0
unsat
a8a33441caa49095c09744f40e851e338d32aab0 1 0
unsat
69389e184ca843a40e122fe630100028f5d0dfe2 1 0
unsat
59f2b64f5b2d655f8fd50a111cc1bf73a7e32876 1 0
unsat
561b779e14608d5bf4b63c02d41e6f6e5d7bac92 1 0
unsat
197371e9402d0d463d6f937ba339cf72a8abf07b 1 0
unsat
702df5d383bb67100b0fc3f930d58d64c9e9a02d 1 0
unsat
edeb3362e6db1fa2b6f5bd97e4c1a396396f2282 1 0
unsat
bad693fed8d87da59fb794363aef6ae36b19bcf7 1 0
unsat
97fc736b0a2fffdd9e35ec8d6b184e53c9636024 1 0
unsat
38010eaae88cc69a2c26a2defbead948aaabd4f4 1 0
unsat
4cbb5558bd3975388e0fb974eb0c218f0d9e4a94 1 0
unsat
0f4d9605278da9fff8a3d692d173824bfbaa11e8 1 0
unsat
581ce35318bef5f170a152cb14de30b8e6da4277 1 0
unsat
476ae2a77ea015b7c4b5fa427ba5703e48cebd80 1 0
unsat
f8308b4ecb3d87177c35dbad8eba7c049e0cfc96 1 0
unsat
4f6185d7afc5cdb6870999c7155dd06a4abca6db 47 0
#2 := false
decl f10 :: S4
#34 := f10
decl f3 :: (-> S2 S3 S4)
decl f9 :: S3
#32 := f9
decl f4 :: (-> S5 S4 S2)
decl f5 :: (-> S6 S3 S5)
decl f6 :: (-> S7 S2 S6)
decl f8 :: S2
#30 := f8
decl f7 :: S7
#7 := f7
#31 := (f6 f7 f8)
#33 := (f5 #31 f9)
#35 := (f4 #33 f10)
#36 := (f3 #35 f9)
#37 := (= #36 f10)
#38 := (not #37)
#61 := [asserted]: #38
#12 := (:var 0 S4)
#10 := (:var 1 S3)
#8 := (:var 2 S2)
#9 := (f6 f7 #8)
#11 := (f5 #9 #10)
#13 := (f4 #11 #12)
#560 := (pattern #13)
#14 := (f3 #13 #10)
#15 := (= #14 #12)
#561 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #560) #15)
#16 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #15)
#564 := (iff #16 #561)
#562 := (iff #15 #15)
#563 := [refl]: #562
#565 := [quant-intro #563]: #564
#73 := (~ #16 #16)
#71 := (~ #15 #15)
#72 := [refl]: #71
#74 := [nnf-pos #72]: #73
#59 := [asserted]: #16
#63 := [mp~ #59 #74]: #16
#566 := [mp #63 #565]: #561
#145 := (not #561)
#231 := (or #145 #37)
#146 := [quant-inst #30 #32 #34]: #231
[unit-resolution #146 #566 #61]: false
unsat
5bafbb97f7efbe2d659f283d3886a5959ca6e520 87 0
#2 := false
decl f9 :: S3
#31 := f9
decl f8 :: S3
#30 := f8
#32 := (= f8 f9)
#160 := (= f9 f8)
decl f3 :: (-> S2 S3 S4)
decl f10 :: S2
#34 := f10
#40 := (f3 f10 f9)
decl f4 :: (-> S5 S4 S2)
decl f11 :: S4
#37 := f11
decl f5 :: (-> S6 S3 S5)
decl f6 :: (-> S7 S2 S6)
decl f7 :: S7
#7 := f7
#35 := (f6 f7 f10)
#36 := (f5 #35 f8)
#38 := (f4 #36 f11)
#39 := (f3 #38 f9)
#41 := (= #39 #40)
#246 := (= #39 f11)
#249 := (if #160 #246 #41)
#23 := (:var 0 S3)
#21 := (:var 1 S4)
#19 := (:var 2 S3)
#17 := (:var 3 S2)
#18 := (f6 f7 #17)
#20 := (f5 #18 #19)
#22 := (f4 #20 #21)
#24 := (f3 #22 #23)
#582 := (pattern #24)
#26 := (f3 #17 #23)
#95 := (= #24 #26)
#94 := (= #24 #21)
#25 := (= #23 #19)
#82 := (if #25 #94 #95)
#583 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #582) #82)
#87 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #82)
#586 := (iff #87 #583)
#584 := (iff #82 #82)
#585 := [refl]: #584
#587 := [quant-intro #585]: #586
#27 := (if #25 #21 #26)
#28 := (= #24 #27)
#29 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #28)
#84 := (iff #29 #87)
#83 := (iff #28 #82)
#86 := [rewrite]: #83
#85 := [quant-intro #86]: #84
#80 := (~ #29 #29)
#79 := (~ #28 #28)
#92 := [refl]: #79
#81 := [nnf-pos #92]: #80
#65 := [asserted]: #29
#93 := [mp~ #65 #81]: #29
#96 := [mp #93 #85]: #87
#588 := [mp #96 #587]: #583
#248 := (not #583)
#252 := (or #248 #249)
#231 := [quant-inst #34 #30 #37 #31]: #252
#250 := [unit-resolution #231 #588]: #249
#567 := (not #249)
#251 := (or #567 #160)
#74 := (not #41)
#67 := (or #32 #41)
#70 := (not #67)
#33 := (not #32)
#42 := (implies #33 #41)
#43 := (not #42)
#71 := (iff #43 #70)
#68 := (iff #42 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#66 := [asserted]: #43
#75 := [mp #66 #72]: #70
#76 := [not-or-elim #75]: #74
#563 := (or #567 #160 #41)
#236 := [def-axiom]: #563
#568 := [unit-resolution #236 #76]: #251
#574 := [unit-resolution #568 #250]: #160
#564 := [symm #574]: #32
#73 := [not-or-elim #75]: #33
[unit-resolution #73 #564]: false
unsat
84690766f80a9a99468eed8a8759374419b173e1 119 0
#2 := false
decl f11 :: S4
#37 := f11
decl f3 :: (-> S2 S3 S4)
decl f8 :: S3
#30 := f8
decl f4 :: (-> S5 S4 S2)
decl f12 :: S4
#41 := f12
decl f5 :: (-> S6 S3 S5)
decl f9 :: S3
#31 := f9
decl f6 :: (-> S7 S2 S6)
decl f10 :: S2
#34 := f10
decl f7 :: S7
#7 := f7
#35 := (f6 f7 f10)
#36 := (f5 #35 f8)
#38 := (f4 #36 f11)
#39 := (f6 f7 #38)
#40 := (f5 #39 f9)
#42 := (f4 #40 f12)
#43 := (f3 #42 f8)
#44 := (= #43 f11)
#162 := (f3 #38 f8)
#248 := (= #162 f11)
#12 := (:var 0 S4)
#10 := (:var 1 S3)
#8 := (:var 2 S2)
#9 := (f6 f7 #8)
#11 := (f5 #9 #10)
#13 := (f4 #11 #12)
#578 := (pattern #13)
#14 := (f3 #13 #10)
#15 := (= #14 #12)
#579 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #578) #15)
#16 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #15)
#582 := (iff #16 #579)
#580 := (iff #15 #15)
#581 := [refl]: #580
#583 := [quant-intro #581]: #582
#93 := (~ #16 #16)
#91 := (~ #15 #15)
#92 := [refl]: #91
#94 := [nnf-pos #92]: #93
#67 := [asserted]: #16
#81 := [mp~ #67 #94]: #16
#584 := [mp #81 #583]: #579
#164 := (not #579)
#250 := (or #164 #248)
#241 := [quant-inst #34 #30 #37]: #250
#234 := [unit-resolution #241 #584]: #248
#253 := (= #43 #162)
#252 := (= #43 f12)
#32 := (= f8 f9)
#255 := (if #32 #252 #253)
#23 := (:var 0 S3)
#21 := (:var 1 S4)
#19 := (:var 2 S3)
#17 := (:var 3 S2)
#18 := (f6 f7 #17)
#20 := (f5 #18 #19)
#22 := (f4 #20 #21)
#24 := (f3 #22 #23)
#585 := (pattern #24)
#26 := (f3 #17 #23)
#98 := (= #24 #26)
#97 := (= #24 #21)
#25 := (= #23 #19)
#85 := (if #25 #97 #98)
#586 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #585) #85)
#90 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #85)
#589 := (iff #90 #586)
#587 := (iff #85 #85)
#588 := [refl]: #587
#590 := [quant-intro #588]: #589
#27 := (if #25 #21 #26)
#28 := (= #24 #27)
#29 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #28)
#87 := (iff #29 #90)
#86 := (iff #28 #85)
#89 := [rewrite]: #86
#88 := [quant-intro #89]: #87
#83 := (~ #29 #29)
#82 := (~ #28 #28)
#95 := [refl]: #82
#84 := [nnf-pos #95]: #83
#68 := [asserted]: #29
#96 := [mp~ #68 #84]: #29
#99 := [mp #96 #88]: #90
#591 := [mp #99 #590]: #586
#572 := (not #586)
#228 := (or #572 #255)
#359 := [quant-inst #38 #31 #41 #30]: #228
#570 := [unit-resolution #359 #591]: #255
#566 := (not #255)
#231 := (or #566 #253)
#33 := (not #32)
#70 := (or #32 #44)
#73 := (not #70)
#45 := (implies #33 #44)
#46 := (not #45)
#74 := (iff #46 #73)
#71 := (iff #45 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#69 := [asserted]: #46
#78 := [mp #69 #75]: #73
#76 := [not-or-elim #78]: #33
#573 := (or #566 #32 #253)
#574 := [def-axiom]: #573
#568 := [unit-resolution #574 #76]: #231
#227 := [unit-resolution #568 #570]: #253
#569 := [trans #227 #234]: #44
#77 := (not #44)
#79 := [not-or-elim #78]: #77
[unit-resolution #79 #569]: false
unsat
d65e508e9f0986a9cadbe07239acdf7dea9f9cdd 66 0
#2 := false
decl f12 :: S4
#41 := f12
decl f3 :: (-> S2 S3 S4)
decl f9 :: S3
#31 := f9
decl f4 :: (-> S5 S4 S2)
decl f5 :: (-> S6 S3 S5)
decl f6 :: (-> S7 S2 S6)
decl f11 :: S4
#37 := f11
decl f8 :: S3
#30 := f8
decl f10 :: S2
#34 := f10
decl f7 :: S7
#7 := f7
#35 := (f6 f7 f10)
#36 := (f5 #35 f8)
#38 := (f4 #36 f11)
#39 := (f6 f7 #38)
#40 := (f5 #39 f9)
#42 := (f4 #40 f12)
#43 := (f3 #42 f9)
#44 := (= #43 f12)
#77 := (not #44)
#32 := (= f8 f9)
#70 := (or #32 #44)
#73 := (not #70)
#33 := (not #32)
#45 := (implies #33 #44)
#46 := (not #45)
#74 := (iff #46 #73)
#71 := (iff #45 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#69 := [asserted]: #46
#78 := [mp #69 #75]: #73
#79 := [not-or-elim #78]: #77
#12 := (:var 0 S4)
#10 := (:var 1 S3)
#8 := (:var 2 S2)
#9 := (f6 f7 #8)
#11 := (f5 #9 #10)
#13 := (f4 #11 #12)
#578 := (pattern #13)
#14 := (f3 #13 #10)
#15 := (= #14 #12)
#579 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #578) #15)
#16 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #15)
#582 := (iff #16 #579)
#580 := (iff #15 #15)
#581 := [refl]: #580
#583 := [quant-intro #581]: #582
#93 := (~ #16 #16)
#91 := (~ #15 #15)
#92 := [refl]: #91
#94 := [nnf-pos #92]: #93
#67 := [asserted]: #16
#81 := [mp~ #67 #94]: #16
#584 := [mp #81 #583]: #579
#164 := (not #579)
#252 := (or #164 #44)
#253 := [quant-inst #38 #31 #41]: #252
[unit-resolution #253 #584 #79]: false
unsat
0f758203e0be215aacd00c651e831f3fd6369edd 73 0
#2 := false
decl f12 :: S4
#40 := f12
decl f3 :: (-> S2 S3 S4)
decl f8 :: S3
#30 := f8
decl f4 :: (-> S5 S4 S2)
decl f5 :: (-> S6 S3 S5)
decl f9 :: S3
#31 := f9
decl f6 :: (-> S7 S2 S6)
decl f11 :: S4
#36 := f11
decl f10 :: S2
#33 := f10
decl f7 :: S7
#7 := f7
#34 := (f6 f7 f10)
#35 := (f5 #34 f8)
#37 := (f4 #35 f11)
#38 := (f6 f7 #37)
#39 := (f5 #38 f9)
#41 := (f4 #39 f12)
#42 := (f3 #41 f8)
#43 := (= #42 f12)
#164 := (f3 #41 f9)
#250 := (= #164 f12)
#12 := (:var 0 S4)
#10 := (:var 1 S3)
#8 := (:var 2 S2)
#9 := (f6 f7 #8)
#11 := (f5 #9 #10)
#13 := (f4 #11 #12)
#578 := (pattern #13)
#14 := (f3 #13 #10)
#15 := (= #14 #12)
#579 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #578) #15)
#16 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #15)
#582 := (iff #16 #579)
#580 := (iff #15 #15)
#581 := [refl]: #580
#583 := [quant-intro #581]: #582
#93 := (~ #16 #16)
#91 := (~ #15 #15)
#92 := [refl]: #91
#94 := [nnf-pos #92]: #93
#66 := [asserted]: #16
#81 := [mp~ #66 #94]: #16
#584 := [mp #81 #583]: #579
#241 := (not #579)
#255 := (or #241 #250)
#234 := [quant-inst #37 #31 #40]: #255
#215 := [unit-resolution #234 #584]: #250
#216 := (= #42 #164)
#32 := (= f8 f9)
#69 := (not #32)
#70 := (or #69 #43)
#73 := (not #70)
#44 := (implies #32 #43)
#45 := (not #44)
#74 := (iff #45 #73)
#71 := (iff #44 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#68 := [asserted]: #45
#78 := [mp #68 #75]: #73
#76 := [not-or-elim #78]: #32
#217 := [monotonicity #76]: #216
#218 := [trans #217 #215]: #43
#77 := (not #43)
#79 := [not-or-elim #78]: #77
[unit-resolution #79 #218]: false
unsat
147fa7b416ea80f4d0db2b821e5b7f09e2dd6767 152 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f10 :: S3
#34 := f10
decl f11 :: S2
#41 := f11
#51 := (f3 f11 f10)
decl f4 :: (-> S5 S4 S2)
decl f12 :: S4
#44 := f12
decl f5 :: (-> S6 S3 S5)
decl f8 :: S3
#30 := f8
decl f6 :: (-> S7 S2 S6)
decl f7 :: S7
#7 := f7
#42 := (f6 f7 f11)
#43 := (f5 #42 f8)
#45 := (f4 #43 f12)
#281 := (f3 #45 f10)
#282 := (= #281 #51)
#568 := (= #281 f12)
#567 := (= f10 f8)
#565 := (if #567 #568 #282)
#23 := (:var 0 S3)
#21 := (:var 1 S4)
#19 := (:var 2 S3)
#17 := (:var 3 S2)
#18 := (f6 f7 #17)
#20 := (f5 #18 #19)
#22 := (f4 #20 #21)
#24 := (f3 #22 #23)
#611 := (pattern #24)
#26 := (f3 #17 #23)
#128 := (= #24 #26)
#127 := (= #24 #21)
#25 := (= #23 #19)
#111 := (if #25 #127 #128)
#612 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #611) #111)
#120 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #111)
#615 := (iff #120 #612)
#613 := (iff #111 #111)
#614 := [refl]: #613
#616 := [quant-intro #614]: #615
#27 := (if #25 #21 #26)
#28 := (= #24 #27)
#29 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #28)
#117 := (iff #29 #120)
#112 := (iff #28 #111)
#119 := [rewrite]: #112
#118 := [quant-intro #119]: #117
#109 := (~ #29 #29)
#108 := (~ #28 #28)
#125 := [refl]: #108
#110 := [nnf-pos #125]: #109
#76 := [asserted]: #29
#126 := [mp~ #76 #110]: #29
#115 := [mp #126 #118]: #120
#617 := [mp #115 #616]: #612
#385 := (not #612)
#570 := (or #385 #565)
#559 := [quant-inst #41 #30 #44 #34]: #570
#569 := [unit-resolution #559 #617]: #565
#561 := (not #567)
#35 := (= f8 f10)
#36 := (not #35)
#546 := (iff #36 #561)
#551 := (iff #35 #567)
#566 := (iff #567 #35)
#550 := [commutativity]: #566
#552 := [symm #550]: #551
#547 := [monotonicity #552]: #546
decl f9 :: S3
#31 := f9
#37 := (= f9 f10)
#38 := (not #37)
#32 := (= f8 f9)
#33 := (not #32)
#85 := (and #33 #36 #38)
decl f13 :: S4
#48 := f13
#46 := (f6 f7 #45)
#47 := (f5 #46 f9)
#49 := (f4 #47 f13)
#50 := (f3 #49 f10)
#52 := (= #50 #51)
#88 := (not #85)
#91 := (or #88 #52)
#94 := (not #91)
#39 := (and #36 #38)
#40 := (and #33 #39)
#53 := (implies #40 #52)
#54 := (not #53)
#97 := (iff #54 #94)
#78 := (not #40)
#79 := (or #78 #52)
#82 := (not #79)
#95 := (iff #82 #94)
#92 := (iff #79 #91)
#89 := (iff #78 #88)
#86 := (iff #40 #85)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#93 := [monotonicity #90]: #92
#96 := [monotonicity #93]: #95
#83 := (iff #54 #82)
#80 := (iff #53 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#98 := [trans #84 #96]: #97
#77 := [asserted]: #54
#99 := [mp #77 #98]: #94
#100 := [not-or-elim #99]: #85
#102 := [and-elim #100]: #36
#553 := [mp #102 #547]: #561
#406 := (not #282)
#104 := (not #52)
#388 := (iff #104 #406)
#428 := (iff #52 #282)
#545 := (iff #282 #52)
#544 := (= #281 #50)
#260 := (= #50 #281)
#279 := (= #50 f13)
#278 := (= f10 f9)
#596 := (if #278 #279 #260)
#592 := (or #385 #596)
#265 := [quant-inst #45 #31 #48 #34]: #592
#554 := [unit-resolution #265 #617]: #596
#599 := (not #278)
#387 := (iff #38 #599)
#384 := (iff #37 #278)
#548 := (iff #278 #37)
#555 := [commutativity]: #548
#386 := [symm #555]: #384
#540 := [monotonicity #386]: #387
#103 := [and-elim #100]: #38
#541 := [mp #103 #540]: #599
#266 := (not #596)
#602 := (or #266 #278 #260)
#597 := [def-axiom]: #602
#543 := [unit-resolution #597 #541 #554]: #260
#542 := [symm #543]: #544
#427 := [monotonicity #542]: #545
#429 := [symm #427]: #428
#536 := [monotonicity #429]: #388
#105 := [not-or-elim #99]: #104
#438 := [mp #105 #536]: #406
#560 := (not #565)
#562 := (or #560 #567 #282)
#563 := [def-axiom]: #562
[unit-resolution #563 #438 #553 #569]: false
unsat
36b249aecd736f13331480916c503eb6e5909c98 39 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#8 := f4
decl f10 :: S2
#40 := f10
#41 := (f3 f10 f4)
#42 := (= #41 f1)
#43 := (not #42)
#44 := (not #43)
#70 := (iff #44 #42)
#71 := [rewrite]: #70
#69 := [asserted]: #44
#74 := [mp #69 #71]: #42
#7 := (:var 0 S2)
#9 := (f3 #7 f4)
#585 := (pattern #9)
#10 := (= #9 f1)
#11 := (not #10)
#586 := (forall (vars (?v0 S2)) (:pat #585) #11)
#12 := (forall (vars (?v0 S2)) #11)
#589 := (iff #12 #586)
#587 := (iff #11 #11)
#588 := [refl]: #587
#590 := [quant-intro #588]: #589
#88 := (~ #12 #12)
#86 := (~ #11 #11)
#87 := [refl]: #86
#89 := [nnf-pos #87]: #88
#65 := [asserted]: #12
#73 := [mp~ #65 #89]: #12
#591 := [mp #73 #590]: #586
#256 := (not #586)
#171 := (or #256 #43)
#257 := [quant-inst #40]: #171
[unit-resolution #257 #591 #74]: false
unsat
ab0a0cb55145e0e555c965d2dc39dc477d5c1fea 34 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#13 := f5
decl f10 :: S2
#40 := f10
#41 := (f3 f10 f5)
#42 := (= #41 f1)
#43 := (not #42)
#68 := [asserted]: #43
#7 := (:var 0 S2)
#14 := (f3 #7 f5)
#588 := (pattern #14)
#15 := (= #14 f1)
#589 := (forall (vars (?v0 S2)) (:pat #588) #15)
#16 := (forall (vars (?v0 S2)) #15)
#592 := (iff #16 #589)
#590 := (iff #15 #15)
#591 := [refl]: #590
#593 := [quant-intro #591]: #592
#72 := (~ #16 #16)
#71 := (~ #15 #15)
#86 := [refl]: #71
#73 := [nnf-pos #86]: #72
#65 := [asserted]: #16
#87 := [mp~ #65 #73]: #16
#594 := [mp #87 #593]: #589
#252 := (not #589)
#167 := (or #252 #42)
#253 := [quant-inst #40]: #167
[unit-resolution #253 #594 #68]: false
unsat
23c20a3f015d52f4e5090d65fc402473d21c2ff7 87 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#43 := f12
decl f10 :: S2
#40 := f10
#49 := (f3 f10 f12)
#50 := (= #49 f1)
decl f11 :: S3
#41 := f11
#47 := (f3 f10 f11)
#48 := (= #47 f1)
#51 := (or #48 #50)
#270 := (not #51)
#258 := [hypothesis]: #270
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#18 := f8
#42 := (f7 f8 f11)
#44 := (f6 #42 f12)
#45 := (f3 f10 #44)
#46 := (= #45 f1)
#584 := (or #46 #51)
#79 := (not #46)
#80 := (iff #79 #51)
#52 := (iff #46 #51)
#53 := (not #52)
#81 := (iff #53 #80)
#82 := [rewrite]: #81
#78 := [asserted]: #53
#85 := [mp #78 #82]: #80
#269 := (not #80)
#246 := (or #46 #51 #269)
#377 := [def-axiom]: #246
#257 := [unit-resolution #377 #85]: #584
#591 := [unit-resolution #257 #258]: #46
#571 := (or #79 #51)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#610 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#611 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #610) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#614 := (iff #31 #611)
#612 := (iff #30 #30)
#613 := [refl]: #612
#615 := [quant-intro #613]: #614
#89 := (~ #31 #31)
#103 := (~ #30 #30)
#104 := [refl]: #103
#90 := [nnf-pos #104]: #89
#76 := [asserted]: #31
#105 := [mp~ #76 #90]: #31
#616 := [mp #105 #615]: #611
#592 := (not #611)
#593 := (or #592 #52)
#594 := [quant-inst #40 #41 #43]: #593
#229 := [unit-resolution #594 #616]: #52
#585 := (or #53 #79 #51)
#244 := [def-axiom]: #585
#233 := [unit-resolution #244 #229]: #571
#234 := [unit-resolution #233 #591 #258]: false
#235 := [lemma #234]: #51
#588 := (or #79 #270)
#273 := (or #79 #270 #269)
#252 := [def-axiom]: #273
#590 := [unit-resolution #252 #85]: #588
#236 := [unit-resolution #590 #235]: #79
#573 := (or #46 #270)
#589 := (or #53 #46 #270)
#595 := [def-axiom]: #589
#574 := [unit-resolution #595 #229]: #573
[unit-resolution #574 #236 #235]: false
unsat
64da68860ea07cde955340b27fa12fa5f09a1695 121 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f4 :: S3
#8 := f4
decl f7 :: (-> S5 S3 S4)
decl f11 :: S3
#41 := f11
decl f8 :: S5
#18 := f8
#42 := (f7 f8 f11)
#43 := (f6 #42 f4)
decl f10 :: S2
#40 := f10
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#75 := (not #45)
#46 := (f3 f10 f11)
#47 := (= #46 f1)
#262 := (not #47)
#572 := [hypothesis]: #262
#268 := (or #45 #47)
#76 := (iff #75 #47)
#48 := (iff #45 #47)
#49 := (not #48)
#77 := (iff #49 #76)
#78 := [rewrite]: #77
#74 := [asserted]: #49
#81 := [mp #74 #78]: #76
#177 := (not #76)
#266 := (or #45 #47 #177)
#267 := [def-axiom]: #266
#265 := [unit-resolution #267 #81]: #268
#573 := [unit-resolution #265 #572]: #45
#269 := (f3 f10 f4)
#248 := (= #269 f1)
#584 := (or #47 #248)
#591 := (not #584)
#589 := (not #248)
#242 := [hypothesis]: #248
#7 := (:var 0 S2)
#9 := (f3 #7 f4)
#592 := (pattern #9)
#10 := (= #9 f1)
#11 := (not #10)
#593 := (forall (vars (?v0 S2)) (:pat #592) #11)
#12 := (forall (vars (?v0 S2)) #11)
#596 := (iff #12 #593)
#594 := (iff #11 #11)
#595 := [refl]: #594
#597 := [quant-intro #595]: #596
#95 := (~ #12 #12)
#93 := (~ #11 #11)
#94 := [refl]: #93
#96 := [nnf-pos #94]: #95
#70 := [asserted]: #12
#80 := [mp~ #70 #96]: #12
#598 := [mp #80 #597]: #593
#232 := (not #593)
#569 := (or #232 #589)
#570 := [quant-inst #40]: #569
#373 := [unit-resolution #570 #598 #242]: false
#571 := [lemma #373]: #589
#581 := (or #591 #47 #248)
#240 := [def-axiom]: #581
#568 := [unit-resolution #240 #572 #571]: #591
#211 := (or #75 #584)
#586 := (iff #45 #584)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#606 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#607 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #606) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#610 := (iff #31 #607)
#608 := (iff #30 #30)
#609 := [refl]: #608
#611 := [quant-intro #609]: #610
#85 := (~ #31 #31)
#99 := (~ #30 #30)
#100 := [refl]: #99
#86 := [nnf-pos #100]: #85
#72 := [asserted]: #31
#101 := [mp~ #72 #86]: #31
#612 := [mp #101 #611]: #607
#580 := (not #607)
#253 := (or #580 #586)
#254 := [quant-inst #40 #41 #8]: #253
#574 := [unit-resolution #254 #612]: #586
#245 := (not #586)
#583 := (or #245 #75 #584)
#225 := [def-axiom]: #583
#575 := [unit-resolution #225 #574]: #211
#577 := [unit-resolution #575 #568 #573]: false
#216 := [lemma #577]: #47
#264 := (or #75 #262)
#263 := (or #75 #262 #177)
#178 := [def-axiom]: #263
#255 := [unit-resolution #178 #81]: #264
#217 := [unit-resolution #255 #216]: #75
#587 := (or #584 #262)
#588 := [def-axiom]: #587
#578 := [unit-resolution #588 #216]: #584
#576 := (or #45 #591)
#582 := (or #245 #45 #591)
#241 := [def-axiom]: #582
#579 := [unit-resolution #241 #574]: #576
[unit-resolution #579 #578 #217]: false
unsat
5d2b2bd5b82e9b686873c91fbf34494378daa8ce 90 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#13 := f5
decl f10 :: S2
#40 := f10
#255 := (f3 f10 f5)
#170 := (= #255 f1)
#234 := (not #170)
decl f11 :: S3
#41 := f11
#254 := (f3 f10 f11)
#169 := (= #254 f1)
#256 := (or #169 #170)
#245 := (not #256)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#18 := f8
#42 := (f7 f8 f11)
#43 := (f6 #42 f5)
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#247 := (iff #45 #256)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#598 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#599 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #598) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#602 := (iff #31 #599)
#600 := (iff #30 #30)
#601 := [refl]: #600
#603 := [quant-intro #601]: #602
#77 := (~ #31 #31)
#91 := (~ #30 #30)
#92 := [refl]: #91
#78 := [nnf-pos #92]: #77
#69 := [asserted]: #31
#93 := [mp~ #69 #78]: #31
#604 := [mp #93 #603]: #599
#260 := (not #599)
#257 := (or #260 #247)
#261 := [quant-inst #40 #41 #13]: #257
#258 := [unit-resolution #261 #604]: #247
#580 := (not #247)
#259 := (or #580 #245)
#46 := (not #45)
#71 := [asserted]: #46
#581 := (or #580 #45 #245)
#582 := [def-axiom]: #581
#559 := [unit-resolution #582 #71]: #259
#221 := [unit-resolution #559 #258]: #245
#365 := (or #256 #234)
#572 := [def-axiom]: #365
#222 := [unit-resolution #572 #221]: #234
#7 := (:var 0 S2)
#14 := (f3 #7 f5)
#591 := (pattern #14)
#15 := (= #14 f1)
#592 := (forall (vars (?v0 S2)) (:pat #591) #15)
#16 := (forall (vars (?v0 S2)) #15)
#595 := (iff #16 #592)
#593 := (iff #15 #15)
#594 := [refl]: #593
#596 := [quant-intro #594]: #595
#75 := (~ #16 #16)
#74 := (~ #15 #15)
#89 := [refl]: #74
#76 := [nnf-pos #89]: #75
#68 := [asserted]: #16
#90 := [mp~ #68 #76]: #16
#597 := [mp #90 #596]: #592
#233 := (not #592)
#575 := (or #233 #170)
#217 := [quant-inst #40]: #575
[unit-resolution #217 #597 #222]: false
unsat
ede3dbc56e22f5b2950d014509e65a43a920f4de 131 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#41 := f11
decl f10 :: S2
#40 := f10
#272 := (f3 f10 f11)
#251 := (= #272 f1)
decl f12 :: S3
#43 := f12
#587 := (f3 f10 f12)
#589 := (= #587 f1)
#583 := (or #589 #251)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#18 := f8
#47 := (f7 f8 f12)
#48 := (f6 #47 f11)
#49 := (f3 f10 #48)
#50 := (= #49 f1)
#245 := (or #251 #589)
#42 := (f7 f8 f11)
#44 := (f6 #42 f12)
#45 := (f3 f10 #44)
#46 := (= #45 f1)
#265 := (not #50)
#574 := [hypothesis]: #265
#271 := (or #46 #50)
#78 := (not #46)
#79 := (iff #78 #50)
#51 := (iff #46 #50)
#52 := (not #51)
#80 := (iff #52 #79)
#81 := [rewrite]: #80
#77 := [asserted]: #52
#84 := [mp #77 #81]: #79
#180 := (not #79)
#269 := (or #46 #50 #180)
#270 := [def-axiom]: #269
#268 := [unit-resolution #270 #84]: #271
#575 := [unit-resolution #268 #574]: #46
#564 := (or #78 #245)
#376 := (iff #46 #245)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#609 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#610 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #609) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#613 := (iff #31 #610)
#611 := (iff #30 #30)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#88 := (~ #31 #31)
#102 := (~ #30 #30)
#103 := [refl]: #102
#89 := [nnf-pos #103]: #88
#75 := [asserted]: #31
#104 := [mp~ #75 #89]: #31
#615 := [mp #104 #614]: #610
#257 := (not #610)
#590 := (or #257 #376)
#591 := [quant-inst #40 #41 #43]: #590
#187 := [unit-resolution #591 #615]: #376
#586 := (not #376)
#232 := (or #586 #78 #245)
#233 := [def-axiom]: #232
#565 := [unit-resolution #233 #187]: #564
#287 := [unit-resolution #565 #575]: #245
#594 := (not #589)
#219 := (not #583)
#562 := (or #50 #219)
#256 := (iff #50 #583)
#576 := (or #257 #256)
#571 := [quant-inst #40 #43 #41]: #576
#288 := [unit-resolution #571 #615]: #256
#579 := (not #256)
#582 := (or #579 #50 #219)
#568 := [def-axiom]: #582
#566 := [unit-resolution #568 #288]: #562
#563 := [unit-resolution #566 #574]: #219
#577 := (or #583 #594)
#214 := [def-axiom]: #577
#567 := [unit-resolution #214 #563]: #594
#592 := (not #251)
#578 := (or #583 #592)
#580 := [def-axiom]: #578
#277 := [unit-resolution #580 #563]: #592
#248 := (not #245)
#585 := (or #248 #251 #589)
#244 := [def-axiom]: #585
#278 := [unit-resolution #244 #277 #567 #287]: false
#279 := [lemma #278]: #50
#280 := (or #265 #583)
#569 := (or #579 #265 #583)
#276 := [def-axiom]: #569
#558 := [unit-resolution #276 #288]: #280
#559 := [unit-resolution #558 #279]: #583
#267 := (or #78 #265)
#266 := (or #78 #265 #180)
#181 := [def-axiom]: #266
#258 := [unit-resolution #181 #84]: #267
#273 := [unit-resolution #258 #279]: #78
#556 := (or #46 #248)
#228 := (or #586 #46 #248)
#570 := [def-axiom]: #228
#560 := [unit-resolution #570 #187]: #556
#557 := [unit-resolution #560 #273]: #248
#593 := (or #245 #592)
#588 := [def-axiom]: #593
#561 := [unit-resolution #588 #557]: #592
#584 := (or #245 #594)
#243 := [def-axiom]: #584
#550 := [unit-resolution #243 #557]: #594
#220 := (or #219 #589 #251)
#581 := [def-axiom]: #220
[unit-resolution #581 #550 #561 #559]: false
unsat
36bb986beabfd5d2f2f59f2f22497a8981eb9126 95 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#41 := f11
decl f10 :: S2
#40 := f10
#46 := (f3 f10 f11)
#47 := (= #46 f1)
#262 := (not #47)
#230 := [hypothesis]: #262
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#18 := f8
#42 := (f7 f8 f11)
#43 := (f6 #42 f11)
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#268 := (or #45 #47)
#75 := (not #45)
#76 := (iff #75 #47)
#48 := (iff #45 #47)
#49 := (not #48)
#77 := (iff #49 #76)
#78 := [rewrite]: #77
#74 := [asserted]: #49
#81 := [mp #74 #78]: #76
#177 := (not #76)
#266 := (or #45 #47 #177)
#267 := [def-axiom]: #266
#265 := [unit-resolution #267 #81]: #268
#231 := [unit-resolution #265 #230]: #45
#569 := (or #75 #47)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#606 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#607 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #606) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#610 := (iff #31 #607)
#608 := (iff #30 #30)
#609 := [refl]: #608
#611 := [quant-intro #609]: #610
#85 := (~ #31 #31)
#99 := (~ #30 #30)
#100 := [refl]: #99
#86 := [nnf-pos #100]: #85
#72 := [asserted]: #31
#101 := [mp~ #72 #86]: #31
#612 := [mp #101 #611]: #607
#580 := (not #607)
#253 := (or #580 #48)
#269 := (or #47 #47)
#248 := (iff #45 #269)
#254 := (or #580 #248)
#588 := (iff #254 #253)
#590 := (iff #253 #253)
#585 := [rewrite]: #590
#242 := (iff #248 #48)
#584 := (iff #269 #47)
#586 := [rewrite]: #584
#373 := [monotonicity #586]: #242
#589 := [monotonicity #373]: #588
#591 := [trans #589 #585]: #588
#587 := [quant-inst #40 #41 #41]: #254
#581 := [mp #587 #591]: #253
#232 := [unit-resolution #581 #612]: #48
#582 := (or #49 #75 #47)
#241 := [def-axiom]: #582
#570 := [unit-resolution #241 #232]: #569
#571 := [unit-resolution #570 #231 #230]: false
#572 := [lemma #571]: #47
#264 := (or #75 #262)
#263 := (or #75 #262 #177)
#178 := [def-axiom]: #263
#255 := [unit-resolution #178 #81]: #264
#573 := [unit-resolution #255 #572]: #75
#568 := (or #45 #262)
#240 := (or #49 #45 #262)
#245 := [def-axiom]: #240
#574 := [unit-resolution #245 #232]: #568
[unit-resolution #574 #573 #572]: false
unsat
8bc88e5edfbcc5ec1dd0cfb089d9a4802a822e0a 194 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#43 := f12
decl f10 :: S2
#40 := f10
#581 := (f3 f10 f12)
#218 := (= #581 f1)
decl f11 :: S3
#41 := f11
#276 := (f3 f10 f11)
#255 := (= #276 f1)
#570 := (or #255 #218)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#18 := f8
#42 := (f7 f8 f11)
#50 := (f6 #42 f12)
#587 := (f3 f10 #50)
#260 := (= #587 f1)
#567 := (iff #260 #570)
#379 := (not #567)
#548 := (not #570)
#284 := (not #218)
decl f13 :: S3
#45 := f13
#578 := (f3 f10 f13)
#579 := (= #578 f1)
#571 := (or #218 #579)
#564 := (not #571)
#44 := (f7 f8 f12)
#46 := (f6 #44 f13)
#591 := (f3 f10 #46)
#593 := (= #591 f1)
#281 := (iff #593 #571)
#543 := (not #281)
#400 := [hypothesis]: #543
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#613 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#614 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #613) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#617 := (iff #31 #614)
#615 := (iff #30 #30)
#616 := [refl]: #615
#618 := [quant-intro #616]: #617
#92 := (~ #31 #31)
#106 := (~ #30 #30)
#107 := [refl]: #106
#93 := [nnf-pos #107]: #92
#79 := [asserted]: #31
#108 := [mp~ #79 #93]: #31
#619 := [mp #108 #618]: #614
#261 := (not #614)
#402 := (or #261 #281)
#544 := [quant-inst #40 #43 #45]: #402
#401 := [unit-resolution #544 #619 #400]: false
#537 := [lemma #401]: #281
#598 := (not #593)
#249 := (or #255 #593)
#252 := (not #249)
#47 := (f6 #42 #46)
#48 := (f3 f10 #47)
#49 := (= #48 f1)
#82 := (not #49)
#51 := (f7 f8 #50)
#52 := (f6 #51 f13)
#53 := (f3 f10 #52)
#54 := (= #53 f1)
#269 := (not #54)
#559 := [hypothesis]: #269
#275 := (or #49 #54)
#83 := (iff #82 #54)
#55 := (iff #49 #54)
#56 := (not #55)
#84 := (iff #56 #83)
#85 := [rewrite]: #84
#81 := [asserted]: #56
#88 := [mp #81 #85]: #83
#184 := (not #83)
#273 := (or #49 #54 #184)
#274 := [def-axiom]: #273
#272 := [unit-resolution #274 #88]: #275
#282 := [unit-resolution #272 #559]: #49
#424 := (or #82 #249)
#380 := (iff #49 #249)
#594 := (or #261 #380)
#595 := [quant-inst #40 #41 #46]: #594
#423 := [unit-resolution #595 #619]: #380
#590 := (not #380)
#236 := (or #590 #82 #249)
#237 := [def-axiom]: #236
#383 := [unit-resolution #237 #423]: #424
#531 := [unit-resolution #383 #282]: #249
#596 := (not #255)
#283 := (or #261 #567)
#545 := [quant-inst #40 #41 #43]: #283
#433 := [unit-resolution #545 #619]: #567
#434 := (or #379 #548)
#223 := (not #260)
#580 := (or #260 #579)
#573 := (not #580)
#529 := (or #54 #573)
#575 := (iff #54 #580)
#582 := (or #261 #575)
#584 := [quant-inst #40 #50 #45]: #582
#528 := [unit-resolution #584 #619]: #575
#296 := (not #575)
#297 := (or #296 #54 #573)
#298 := [def-axiom]: #297
#532 := [unit-resolution #298 #528]: #529
#417 := [unit-resolution #532 #559]: #573
#224 := (or #580 #223)
#585 := [def-axiom]: #224
#432 := [unit-resolution #585 #417]: #223
#381 := (or #379 #260 #548)
#382 := [def-axiom]: #381
#435 := [unit-resolution #382 #432]: #434
#428 := [unit-resolution #435 #433]: #548
#546 := (or #570 #596)
#547 := [def-axiom]: #546
#436 := [unit-resolution #547 #428]: #596
#589 := (or #252 #255 #593)
#248 := [def-axiom]: #589
#437 := [unit-resolution #248 #436 #531]: #593
#583 := (not #579)
#586 := (or #580 #583)
#572 := [def-axiom]: #586
#438 := [unit-resolution #572 #417]: #583
#541 := (or #570 #284)
#542 := [def-axiom]: #541
#439 := [unit-resolution #542 #428]: #284
#561 := (or #564 #218 #579)
#565 := [def-axiom]: #561
#440 := [unit-resolution #565 #439 #438]: #564
#556 := (or #543 #598 #571)
#551 := [def-axiom]: #556
#533 := [unit-resolution #551 #440 #437 #537]: false
#530 := [lemma #533]: #54
#271 := (or #82 #269)
#270 := (or #82 #269 #184)
#185 := [def-axiom]: #270
#262 := [unit-resolution #185 #88]: #271
#549 := [unit-resolution #262 #530]: #82
#550 := (or #49 #252)
#232 := (or #590 #49 #252)
#574 := [def-axiom]: #232
#523 := [unit-resolution #574 #423]: #550
#515 := [unit-resolution #523 #549]: #252
#588 := (or #249 #598)
#247 := [def-axiom]: #588
#512 := [unit-resolution #247 #515]: #598
#554 := (or #543 #593 #564)
#555 := [def-axiom]: #554
#514 := [unit-resolution #555 #512 #537]: #564
#562 := (or #571 #284)
#563 := [def-axiom]: #562
#524 := [unit-resolution #563 #514]: #284
#597 := (or #249 #596)
#592 := [def-axiom]: #597
#525 := [unit-resolution #592 #515]: #596
#535 := (or #548 #255 #218)
#536 := [def-axiom]: #535
#526 := [unit-resolution #536 #525 #524]: #548
#522 := (or #269 #580)
#191 := (or #296 #269 #580)
#568 := [def-axiom]: #191
#527 := [unit-resolution #568 #528]: #522
#516 := [unit-resolution #527 #530]: #580
#277 := (or #571 #583)
#560 := [def-axiom]: #277
#517 := [unit-resolution #560 #514]: #583
#280 := (or #573 #260 #579)
#295 := [def-axiom]: #280
#518 := [unit-resolution #295 #517 #516]: #260
#538 := (or #379 #223 #570)
#539 := [def-axiom]: #538
#519 := [unit-resolution #539 #518 #526]: #379
[unit-resolution #545 #619 #519]: false
unsat
471f8aa77fc4964daee60a13a5a92f756ac79683 116 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#43 := f12
decl f10 :: S2
#40 := f10
#49 := (f3 f10 f12)
#50 := (= #49 f1)
#119 := (not #50)
decl f11 :: S3
#41 := f11
#47 := (f3 f10 f11)
#48 := (= #47 f1)
#118 := (not #48)
#120 := (or #118 #119)
#121 := (not #120)
#599 := [hypothesis]: #121
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#42 := (f7 f9 f11)
#44 := (f6 #42 f12)
#45 := (f3 f10 #44)
#46 := (= #45 f1)
#79 := (not #46)
#605 := (or #79 #120)
#127 := (iff #46 #120)
#51 := (and #48 #50)
#80 := (iff #79 #51)
#130 := (iff #80 #127)
#124 := (iff #79 #121)
#128 := (iff #124 #127)
#129 := [rewrite]: #128
#125 := (iff #80 #124)
#122 := (iff #51 #121)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#131 := [trans #126 #129]: #130
#52 := (iff #46 #51)
#53 := (not #52)
#81 := (iff #53 #80)
#82 := [rewrite]: #81
#78 := [asserted]: #53
#85 := [mp #78 #82]: #80
#132 := [mp #85 #131]: #127
#285 := (not #127)
#267 := (or #79 #120 #285)
#603 := [def-axiom]: #267
#261 := [unit-resolution #603 #132]: #605
#272 := [unit-resolution #261 #599]: #79
#244 := (or #46 #120)
#392 := (iff #46 #121)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#632 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#110 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#109 := (not #26)
#93 := (or #109 #110)
#94 := (not #93)
#36 := (= #35 f1)
#111 := (iff #36 #94)
#633 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #632) #111)
#114 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #111)
#636 := (iff #114 #633)
#634 := (iff #111 #111)
#635 := [refl]: #634
#637 := [quant-intro #635]: #636
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#115 := (iff #39 #114)
#112 := (iff #38 #111)
#95 := (iff #37 #94)
#96 := [rewrite]: #95
#113 := [monotonicity #96]: #112
#116 := [quant-intro #113]: #115
#91 := (~ #39 #39)
#106 := (~ #38 #38)
#107 := [refl]: #106
#92 := [nnf-pos #107]: #91
#77 := [asserted]: #39
#108 := [mp~ #77 #92]: #39
#117 := [mp #108 #116]: #114
#638 := [mp #117 #637]: #633
#273 := (not #633)
#606 := (or #273 #392)
#607 := [quant-inst #40 #41 #43]: #606
#602 := [unit-resolution #607 #638]: #392
#608 := (not #392)
#609 := (or #608 #46 #120)
#604 := [def-axiom]: #609
#586 := [unit-resolution #604 #602]: #244
#248 := [unit-resolution #586 #272 #599]: false
#249 := [lemma #248]: #120
#284 := (or #46 #121)
#286 := (or #46 #121 #285)
#287 := [def-axiom]: #286
#288 := [unit-resolution #287 #132]: #284
#250 := [unit-resolution #288 #249]: #46
#251 := (or #79 #121)
#610 := (or #608 #79 #121)
#600 := [def-axiom]: #610
#588 := [unit-resolution #600 #602]: #251
[unit-resolution #588 #250 #249]: false
unsat
b2bab79e348dd40ef98e9c16bd8f27d0e66abe96 109 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#8 := f4
decl f10 :: S2
#40 := f10
#174 := (f3 f10 f4)
#260 := (= #174 f1)
#251 := (not #260)
decl f11 :: S3
#41 := f11
#258 := (f3 f10 f11)
#173 := (= #258 f1)
#259 := (not #173)
#262 := (or #259 #251)
#263 := (not #262)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#42 := (f7 f9 f11)
#43 := (f6 #42 f4)
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#264 := (iff #45 #263)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#609 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#102 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#101 := (not #26)
#85 := (or #101 #102)
#86 := (not #85)
#36 := (= #35 f1)
#103 := (iff #36 #86)
#610 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #609) #103)
#106 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #103)
#613 := (iff #106 #610)
#611 := (iff #103 #103)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#107 := (iff #39 #106)
#104 := (iff #38 #103)
#87 := (iff #37 #86)
#88 := [rewrite]: #87
#105 := [monotonicity #88]: #104
#108 := [quant-intro #105]: #107
#83 := (~ #39 #39)
#98 := (~ #38 #38)
#99 := [refl]: #98
#84 := [nnf-pos #99]: #83
#71 := [asserted]: #39
#100 := [mp~ #71 #84]: #39
#109 := [mp #100 #108]: #106
#615 := [mp #109 #614]: #610
#244 := (not #610)
#580 := (or #244 #264)
#582 := [quant-inst #40 #41 #8]: #580
#261 := [unit-resolution #582 #615]: #264
#584 := (not #264)
#265 := (or #584 #263)
#46 := (not #45)
#47 := (not #46)
#73 := (iff #47 #45)
#74 := [rewrite]: #73
#72 := [asserted]: #47
#77 := [mp #72 #74]: #45
#581 := (or #584 #46 #263)
#587 := [def-axiom]: #581
#563 := [unit-resolution #587 #77]: #265
#225 := [unit-resolution #563 #261]: #263
#576 := (or #262 #260)
#249 := [def-axiom]: #576
#226 := [unit-resolution #249 #225]: #260
#7 := (:var 0 S2)
#9 := (f3 #7 f4)
#588 := (pattern #9)
#10 := (= #9 f1)
#11 := (not #10)
#589 := (forall (vars (?v0 S2)) (:pat #588) #11)
#12 := (forall (vars (?v0 S2)) #11)
#592 := (iff #12 #589)
#590 := (iff #11 #11)
#591 := [refl]: #590
#593 := [quant-intro #591]: #592
#91 := (~ #12 #12)
#89 := (~ #11 #11)
#90 := [refl]: #89
#92 := [nnf-pos #90]: #91
#68 := [asserted]: #12
#76 := [mp~ #68 #92]: #12
#594 := [mp #76 #593]: #589
#237 := (not #589)
#579 := (or #237 #251)
#221 := [quant-inst #40]: #579
[unit-resolution #221 #594 #226]: false
unsat
dbeac9b623875d59b5f7c86d653da3da9cd2d29b 131 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#13 := f5
decl f10 :: S2
#40 := f10
#269 := (f3 f10 f5)
#248 := (= #269 f1)
#584 := (not #248)
decl f11 :: S3
#41 := f11
#46 := (f3 f10 f11)
#47 := (= #46 f1)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#42 := (f7 f9 f11)
#43 := (f6 #42 f5)
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#262 := (not #47)
#580 := [hypothesis]: #262
#268 := (or #45 #47)
#75 := (not #45)
#76 := (iff #75 #47)
#48 := (iff #45 #47)
#49 := (not #48)
#77 := (iff #49 #76)
#78 := [rewrite]: #77
#74 := [asserted]: #49
#81 := [mp #74 #78]: #76
#177 := (not #76)
#266 := (or #45 #47 #177)
#267 := [def-axiom]: #266
#265 := [unit-resolution #267 #81]: #268
#253 := [unit-resolution #265 #580]: #45
#586 := (or #262 #584)
#589 := (or #586 #47)
#590 := [def-axiom]: #589
#232 := [unit-resolution #590 #580]: #586
#242 := (not #586)
#570 := (or #75 #242)
#373 := (iff #45 #242)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#613 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#106 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#105 := (not #26)
#89 := (or #105 #106)
#90 := (not #89)
#36 := (= #35 f1)
#107 := (iff #36 #90)
#614 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #613) #107)
#110 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #107)
#617 := (iff #110 #614)
#615 := (iff #107 #107)
#616 := [refl]: #615
#618 := [quant-intro #616]: #617
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#111 := (iff #39 #110)
#108 := (iff #38 #107)
#91 := (iff #37 #90)
#92 := [rewrite]: #91
#109 := [monotonicity #92]: #108
#112 := [quant-intro #109]: #111
#87 := (~ #39 #39)
#102 := (~ #38 #38)
#103 := [refl]: #102
#88 := [nnf-pos #103]: #87
#73 := [asserted]: #39
#104 := [mp~ #73 #88]: #39
#113 := [mp #104 #112]: #110
#619 := [mp #113 #618]: #614
#254 := (not #614)
#587 := (or #254 #373)
#588 := [quant-inst #40 #41 #13]: #587
#569 := [unit-resolution #588 #619]: #373
#245 := (not #373)
#583 := (or #245 #75 #242)
#225 := [def-axiom]: #583
#571 := [unit-resolution #225 #569]: #570
#572 := [unit-resolution #571 #232 #253]: false
#573 := [lemma #572]: #47
#264 := (or #75 #262)
#263 := (or #75 #262 #177)
#178 := [def-axiom]: #263
#255 := [unit-resolution #178 #81]: #264
#568 := [unit-resolution #255 #573]: #75
#574 := (or #45 #586)
#582 := (or #245 #45 #586)
#241 := [def-axiom]: #582
#216 := [unit-resolution #241 #569]: #574
#217 := [unit-resolution #216 #568]: #586
#581 := (or #242 #262 #584)
#240 := [def-axiom]: #581
#578 := [unit-resolution #240 #217 #573]: #584
#7 := (:var 0 S2)
#14 := (f3 #7 f5)
#599 := (pattern #14)
#15 := (= #14 f1)
#600 := (forall (vars (?v0 S2)) (:pat #599) #15)
#16 := (forall (vars (?v0 S2)) #15)
#603 := (iff #16 #600)
#601 := (iff #15 #15)
#602 := [refl]: #601
#604 := [quant-intro #602]: #603
#83 := (~ #16 #16)
#82 := (~ #15 #15)
#97 := [refl]: #82
#84 := [nnf-pos #97]: #83
#71 := [asserted]: #16
#98 := [mp~ #71 #84]: #16
#605 := [mp #98 #604]: #600
#211 := (not #600)
#575 := (or #211 #248)
#577 := [quant-inst #40]: #575
[unit-resolution #577 #605 #578]: false
unsat
51ce95475567a2e196bafe1aa52fd86168910e25 144 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#41 := f11
decl f10 :: S2
#40 := f10
#272 := (f3 f10 f11)
#251 := (= #272 f1)
#587 := (not #251)
decl f12 :: S3
#43 := f12
#589 := (f3 f10 f12)
#245 := (= #589 f1)
#376 := (not #245)
#590 := (or #376 #587)
#591 := (not #590)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#47 := (f7 f9 f12)
#48 := (f6 #47 f11)
#49 := (f3 f10 #48)
#50 := (= #49 f1)
#265 := (not #50)
#575 := [hypothesis]: #265
#187 := (or #50 #590)
#574 := (iff #50 #591)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#616 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#109 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#108 := (not #26)
#92 := (or #108 #109)
#93 := (not #92)
#36 := (= #35 f1)
#110 := (iff #36 #93)
#617 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #616) #110)
#113 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #110)
#620 := (iff #113 #617)
#618 := (iff #110 #110)
#619 := [refl]: #618
#621 := [quant-intro #619]: #620
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#114 := (iff #39 #113)
#111 := (iff #38 #110)
#94 := (iff #37 #93)
#95 := [rewrite]: #94
#112 := [monotonicity #95]: #111
#115 := [quant-intro #112]: #114
#90 := (~ #39 #39)
#105 := (~ #38 #38)
#106 := [refl]: #105
#91 := [nnf-pos #106]: #90
#76 := [asserted]: #39
#107 := [mp~ #76 #91]: #39
#116 := [mp #107 #115]: #113
#622 := [mp #116 #621]: #617
#592 := (not #617)
#571 := (or #592 #574)
#577 := [quant-inst #40 #43 #41]: #571
#576 := [unit-resolution #577 #622]: #574
#579 := (not #574)
#582 := (or #579 #50 #590)
#568 := [def-axiom]: #582
#564 := [unit-resolution #568 #576]: #187
#565 := [unit-resolution #564 #575]: #590
#583 := (or #587 #376)
#256 := (not #583)
#42 := (f7 f9 f11)
#44 := (f6 #42 f12)
#45 := (f3 f10 #44)
#46 := (= #45 f1)
#271 := (or #46 #50)
#78 := (not #46)
#79 := (iff #78 #50)
#51 := (iff #46 #50)
#52 := (not #51)
#80 := (iff #52 #79)
#81 := [rewrite]: #80
#77 := [asserted]: #52
#84 := [mp #77 #81]: #79
#180 := (not #79)
#269 := (or #46 #50 #180)
#270 := [def-axiom]: #269
#268 := [unit-resolution #270 #84]: #271
#287 := [unit-resolution #268 #575]: #46
#562 := (or #78 #256)
#257 := (iff #46 #256)
#593 := (or #592 #257)
#588 := [quant-inst #40 #41 #43]: #593
#288 := [unit-resolution #588 #622]: #257
#586 := (not #257)
#232 := (or #586 #78 #256)
#233 := [def-axiom]: #232
#566 := [unit-resolution #233 #288]: #562
#563 := [unit-resolution #566 #287]: #256
#594 := (or #583 #251)
#584 := [def-axiom]: #594
#567 := [unit-resolution #584 #563]: #251
#243 := (or #583 #245)
#248 := [def-axiom]: #243
#277 := [unit-resolution #248 #563]: #245
#220 := (or #591 #376 #587)
#581 := [def-axiom]: #220
#278 := [unit-resolution #581 #277 #567 #565]: false
#279 := [lemma #278]: #50
#280 := (or #265 #591)
#569 := (or #579 #265 #591)
#276 := [def-axiom]: #569
#558 := [unit-resolution #276 #576]: #280
#559 := [unit-resolution #558 #279]: #591
#580 := (or #590 #251)
#219 := [def-axiom]: #580
#273 := [unit-resolution #219 #559]: #251
#267 := (or #78 #265)
#266 := (or #78 #265 #180)
#181 := [def-axiom]: #266
#258 := [unit-resolution #181 #84]: #267
#556 := [unit-resolution #258 #279]: #78
#560 := (or #46 #583)
#228 := (or #586 #46 #583)
#570 := [def-axiom]: #228
#557 := [unit-resolution #570 #288]: #560
#561 := [unit-resolution #557 #556]: #583
#214 := (or #590 #245)
#578 := [def-axiom]: #214
#550 := [unit-resolution #578 #559]: #245
#585 := (or #256 #587 #376)
#244 := [def-axiom]: #585
[unit-resolution #244 #550 #561 #273]: false
unsat
4830d9673cbce4109d7a294d06cddebfbef2b503 116 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#41 := f11
decl f10 :: S2
#40 := f10
#46 := (f3 f10 f11)
#47 := (= #46 f1)
#262 := (not #47)
#568 := [hypothesis]: #262
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#42 := (f7 f9 f11)
#43 := (f6 #42 f11)
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#268 := (or #45 #47)
#75 := (not #45)
#76 := (iff #75 #47)
#48 := (iff #45 #47)
#49 := (not #48)
#77 := (iff #49 #76)
#78 := [rewrite]: #77
#74 := [asserted]: #49
#81 := [mp #74 #78]: #76
#177 := (not #76)
#266 := (or #45 #47 #177)
#267 := [def-axiom]: #266
#265 := [unit-resolution #267 #81]: #268
#574 := [unit-resolution #265 #568]: #45
#575 := (or #75 #47)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#613 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#106 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#105 := (not #26)
#89 := (or #105 #106)
#90 := (not #89)
#36 := (= #35 f1)
#107 := (iff #36 #90)
#614 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #613) #107)
#110 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #107)
#617 := (iff #110 #614)
#615 := (iff #107 #107)
#616 := [refl]: #615
#618 := [quant-intro #616]: #617
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#111 := (iff #39 #110)
#108 := (iff #38 #107)
#91 := (iff #37 #90)
#92 := [rewrite]: #91
#109 := [monotonicity #92]: #108
#112 := [quant-intro #109]: #111
#87 := (~ #39 #39)
#102 := (~ #38 #38)
#103 := [refl]: #102
#88 := [nnf-pos #103]: #87
#73 := [asserted]: #39
#104 := [mp~ #73 #88]: #39
#113 := [mp #104 #112]: #110
#619 := [mp #113 #618]: #614
#591 := (not #614)
#581 := (or #591 #48)
#269 := (or #262 #262)
#248 := (not #269)
#584 := (iff #45 #248)
#240 := (or #591 #584)
#582 := (iff #240 #581)
#583 := (iff #581 #581)
#225 := [rewrite]: #583
#590 := (iff #584 #48)
#588 := (iff #248 #47)
#373 := (not #262)
#254 := (iff #373 #47)
#587 := [rewrite]: #254
#580 := (iff #248 #373)
#586 := (iff #269 #262)
#242 := [rewrite]: #586
#253 := [monotonicity #242]: #580
#589 := [trans #253 #587]: #588
#585 := [monotonicity #589]: #590
#241 := [monotonicity #585]: #582
#567 := [trans #241 #225]: #582
#245 := [quant-inst #40 #41 #41]: #240
#229 := [mp #245 #567]: #581
#211 := [unit-resolution #229 #619]: #48
#232 := (or #49 #75 #47)
#569 := [def-axiom]: #232
#577 := [unit-resolution #569 #211]: #575
#216 := [unit-resolution #577 #574 #568]: false
#217 := [lemma #216]: #47
#264 := (or #75 #262)
#263 := (or #75 #262 #177)
#178 := [def-axiom]: #263
#255 := [unit-resolution #178 #81]: #264
#578 := [unit-resolution #255 #217]: #75
#576 := (or #45 #262)
#230 := (or #49 #45 #262)
#231 := [def-axiom]: #230
#579 := [unit-resolution #231 #211]: #576
[unit-resolution #579 #578 #217]: false
unsat
204f9f43d50dba080fa0264b17e4ee9000821fb0 207 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f13 :: S3
#45 := f13
decl f10 :: S2
#40 := f10
#579 := (f3 f10 f13)
#580 := (= #579 f1)
#575 := (not #580)
decl f12 :: S3
#43 := f12
#584 := (f3 f10 f12)
#223 := (= #584 f1)
#570 := (not #223)
#567 := (or #570 #575)
#571 := (not #567)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#44 := (f7 f9 f12)
#46 := (f6 #44 f13)
#593 := (f3 f10 #46)
#249 := (= #593 f1)
#281 := (iff #249 #571)
#379 := (not #281)
decl f11 :: S3
#41 := f11
#276 := (f3 f10 f11)
#255 := (= #276 f1)
#591 := (not #255)
#282 := (or #591 #570)
#283 := (not #282)
#42 := (f7 f9 f11)
#50 := (f6 #42 f12)
#594 := (f3 f10 #50)
#595 := (= #594 f1)
#400 := (iff #595 #283)
#543 := (not #400)
#401 := [hypothesis]: #543
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#620 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#113 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#112 := (not #26)
#96 := (or #112 #113)
#97 := (not #96)
#36 := (= #35 f1)
#114 := (iff #36 #97)
#621 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #620) #114)
#117 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #114)
#624 := (iff #117 #621)
#622 := (iff #114 #114)
#623 := [refl]: #622
#625 := [quant-intro #623]: #624
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#118 := (iff #39 #117)
#115 := (iff #38 #114)
#98 := (iff #37 #97)
#99 := [rewrite]: #98
#116 := [monotonicity #99]: #115
#119 := [quant-intro #116]: #118
#94 := (~ #39 #39)
#109 := (~ #38 #38)
#110 := [refl]: #109
#95 := [nnf-pos #110]: #94
#80 := [asserted]: #39
#111 := [mp~ #80 #95]: #39
#120 := [mp #111 #119]: #117
#626 := [mp #120 #625]: #621
#596 := (not #621)
#544 := (or #596 #400)
#545 := [quant-inst #40 #41 #43]: #544
#402 := [unit-resolution #545 #626 #401]: false
#537 := [lemma #402]: #400
#578 := (not #595)
#581 := (or #578 #575)
#218 := (not #581)
#51 := (f7 f9 #50)
#52 := (f6 #51 f13)
#53 := (f3 f10 #52)
#54 := (= #53 f1)
#380 := (not #249)
#587 := (or #591 #380)
#260 := (not #587)
#47 := (f6 #42 #46)
#48 := (f3 f10 #47)
#49 := (= #48 f1)
#269 := (not #54)
#559 := [hypothesis]: #269
#275 := (or #49 #54)
#82 := (not #49)
#83 := (iff #82 #54)
#55 := (iff #49 #54)
#56 := (not #55)
#84 := (iff #56 #83)
#85 := [rewrite]: #84
#81 := [asserted]: #56
#88 := [mp #81 #85]: #83
#184 := (not #83)
#273 := (or #49 #54 #184)
#274 := [def-axiom]: #273
#272 := [unit-resolution #274 #88]: #275
#284 := [unit-resolution #272 #559]: #49
#424 := (or #82 #260)
#261 := (iff #49 #260)
#597 := (or #596 #261)
#592 := [quant-inst #40 #41 #46]: #597
#423 := [unit-resolution #592 #626]: #261
#590 := (not #261)
#236 := (or #590 #82 #260)
#237 := [def-axiom]: #236
#383 := [unit-resolution #237 #423]: #424
#531 := [unit-resolution #383 #284]: #260
#598 := (or #587 #255)
#588 := [def-axiom]: #598
#433 := [unit-resolution #588 #531]: #255
#562 := (or #596 #281)
#546 := [quant-inst #40 #43 #45]: #562
#528 := [unit-resolution #546 #626]: #281
#532 := (or #379 #571)
#247 := (or #587 #249)
#252 := [def-axiom]: #247
#529 := [unit-resolution #252 #531]: #249
#535 := (or #379 #380 #571)
#536 := [def-axiom]: #535
#417 := [unit-resolution #536 #529]: #532
#432 := [unit-resolution #417 #528]: #571
#547 := (or #567 #223)
#541 := [def-axiom]: #547
#434 := [unit-resolution #541 #432]: #223
#561 := (or #283 #591 #570)
#565 := [def-axiom]: #561
#435 := [unit-resolution #565 #434 #433]: #283
#436 := (or #54 #581)
#582 := (iff #54 #218)
#224 := (or #596 #582)
#585 := [quant-inst #40 #50 #45]: #224
#428 := [unit-resolution #585 #626]: #582
#296 := (not #582)
#297 := (or #296 #54 #581)
#298 := [def-axiom]: #297
#437 := [unit-resolution #298 #428]: #436
#438 := [unit-resolution #437 #559]: #581
#542 := (or #567 #580)
#548 := [def-axiom]: #542
#439 := [unit-resolution #548 #432]: #580
#280 := (or #218 #578 #575)
#295 := [def-axiom]: #280
#440 := [unit-resolution #295 #439 #438]: #578
#554 := (or #543 #595 #282)
#555 := [def-axiom]: #554
#533 := [unit-resolution #555 #440 #435 #537]: false
#530 := [lemma #533]: #54
#549 := (or #269 #218)
#191 := (or #296 #269 #218)
#568 := [def-axiom]: #191
#550 := [unit-resolution #568 #428]: #549
#523 := [unit-resolution #550 #530]: #218
#583 := (or #581 #595)
#586 := [def-axiom]: #583
#515 := [unit-resolution #586 #523]: #595
#556 := (or #543 #578 #283)
#551 := [def-axiom]: #556
#512 := [unit-resolution #551 #515 #537]: #283
#560 := (or #282 #223)
#564 := [def-axiom]: #560
#514 := [unit-resolution #564 #512]: #223
#572 := (or #581 #580)
#573 := [def-axiom]: #572
#524 := [unit-resolution #573 #523]: #580
#381 := (or #571 #570 #575)
#382 := [def-axiom]: #381
#525 := [unit-resolution #382 #524 #514]: #571
#271 := (or #82 #269)
#270 := (or #82 #269 #184)
#185 := [def-axiom]: #270
#262 := [unit-resolution #185 #88]: #271
#526 := [unit-resolution #262 #530]: #82
#522 := (or #49 #587)
#232 := (or #590 #49 #587)
#574 := [def-axiom]: #232
#527 := [unit-resolution #574 #423]: #522
#516 := [unit-resolution #527 #526]: #587
#563 := (or #282 #255)
#277 := [def-axiom]: #563
#517 := [unit-resolution #277 #512]: #255
#589 := (or #260 #591 #380)
#248 := [def-axiom]: #589
#518 := [unit-resolution #248 #517 #516]: #380
#538 := (or #379 #249 #567)
#539 := [def-axiom]: #538
#519 := [unit-resolution #539 #518 #525]: #379
[unit-resolution #546 #626 #519]: false
unsat
1dccf1446c06f99d08b664c523373d60beeb86a5 22 0
#2 := false
decl f13 :: (-> S7 S3 S4)
decl f4 :: S3
#7 := f4
decl f14 :: S7
#49 := f14
#50 := (f13 f14 f4)
#51 := (= #50 #50)
#52 := (not #51)
#86 := (iff #52 false)
#1 := true
#81 := (not true)
#84 := (iff #81 false)
#85 := [rewrite]: #84
#82 := (iff #52 #81)
#79 := (iff #51 true)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#87 := [trans #83 #85]: #86
#78 := [asserted]: #52
[mp #78 #87]: false
unsat
