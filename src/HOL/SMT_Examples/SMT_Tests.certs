8c0dd63633148cae631c41716f59fedf31aaf85f 8 0
#2 := false
#1 := true
#8 := (not true)
#29 := (iff #8 false)
#30 := [rewrite]: #29
#28 := [asserted]: #8
[mp #28 #30]: false
unsat
0e95eca2e0e7caa31aef537bbf293f83696bbe8a 16 0
#2 := false
#8 := (not false)
#9 := (not #8)
#37 := (iff #9 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
bbd400f7a6b516cc913f7b22468b7a0f5ab6d4ef 21 0
#2 := false
#1 := true
#8 := (not true)
#9 := (not #8)
#10 := (not #9)
#42 := (iff #10 false)
#31 := (iff #8 false)
#32 := [rewrite]: #31
#40 := (iff #10 #8)
#38 := (iff #9 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#41 := [monotonicity #39]: #40
#43 := [trans #41 #32]: #42
#30 := [asserted]: #10
[mp #30 #43]: false
unsat
218e23551f716b340d470b13088877ee41ffeabf 16 0
#2 := false
#1 := true
#8 := (and true true)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
4820ba699dfc46472702e8103b5f713f524239e1 16 0
#2 := false
#1 := true
#8 := (or true false)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
ee9714cb019befa9d851be80ac36f38d43541012 16 0
#2 := false
#1 := true
#8 := (implies false true)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
7869b66c1f04020ccc620174a1f0451e995f1abd 24 0
#2 := false
#1 := true
#8 := (iff false true)
#9 := (not #8)
#10 := (not #9)
#45 := (iff #10 false)
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#38 := (iff #9 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 false)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #10
[mp #30 #46]: false
unsat
4e759d02d4de42cc8b917c1ee399e500780bf8d9 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (or #9 #10)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := (= f1 f3)
#36 := (not #33)
#39 := (or #33 #36)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #35 #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
6f508687a1b8d851ff54bda8c3b55201243d9664 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (and #9 #10)
#12 := (not #11)
#13 := (not #12)
#59 := (iff #13 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#52 := (iff #12 true)
#47 := (not false)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 false)
#34 := (= f1 f3)
#37 := (not #34)
#40 := (and #34 #37)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #36 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#33 := [asserted]: #13
[mp #33 #60]: false
unsat
a570d829481d812db472649896375ed3e544b2a0 65 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and false #9)
#13 := (or #12 #9)
#11 := (not #9)
#14 := (or #11 #13)
#1 := true
#10 := (and true #9)
#15 := (or #10 #14)
#16 := (not #15)
#83 := (iff #16 false)
#78 := (not true)
#81 := (iff #78 false)
#82 := [rewrite]: #81
#79 := (iff #16 #78)
#76 := (iff #15 true)
#37 := (= f1 f3)
#71 := (or #37 true)
#74 := (iff #71 true)
#75 := [rewrite]: #74
#72 := (iff #15 #71)
#69 := (iff #14 true)
#47 := (not #37)
#64 := (or #47 #37)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #14 #64)
#62 := (iff #13 #37)
#57 := (or false #37)
#60 := (iff #57 #37)
#61 := [rewrite]: #60
#58 := (iff #13 #57)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#55 := (iff #12 false)
#50 := (and false #37)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#52 := [monotonicity #39]: #51
#56 := [trans #52 #54]: #55
#59 := [monotonicity #56 #39]: #58
#63 := [trans #59 #61]: #62
#48 := (iff #11 #47)
#49 := [monotonicity #39]: #48
#66 := [monotonicity #49 #63]: #65
#70 := [trans #66 #68]: #69
#45 := (iff #10 #37)
#40 := (and true #37)
#43 := (iff #40 #37)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#73 := [monotonicity #46 #70]: #72
#77 := [trans #73 #75]: #76
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#36 := [asserted]: #16
[mp #36 #84]: false
unsat
4cee40af08d20a91303cc3118e83d7eca7872920 29 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (implies #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := (= f1 f3)
#35 := (implies #32 #32)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 #32)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
0fe45fcdabd9bb3a2f80916a3d449a773092c058 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (and #9 #10)
#12 := (implies #11 false)
#13 := (not #12)
#59 := (iff #13 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#52 := (iff #12 true)
#47 := (implies false false)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 false)
#34 := (= f1 f3)
#37 := (not #34)
#40 := (and #34 #37)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #36 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#33 := [asserted]: #13
[mp #33 #60]: false
unsat
d63aa12ea1f62e0c634eee23e682ed847e82572d 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (and #11 #9)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (and #36 #39)
#52 := (implies #42 #42)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 #42)
#45 := (and #39 #36)
#48 := (iff #45 #42)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#47 := [monotonicity #41 #38]: #46
#51 := [trans #47 #49]: #50
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#54 := [monotonicity #44 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
ac9f8dfae9db87406db77382935caeb1212c8720 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (or #11 #9)
#12 := (or #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (or #36 #39)
#52 := (implies #42 #42)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 #42)
#45 := (or #39 #36)
#48 := (iff #45 #42)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#47 := [monotonicity #41 #38]: #46
#51 := [trans #47 #49]: #50
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#54 := [monotonicity #44 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
3ca7c9c03f9ec0a6bb70ba63fef8fe4be3fc1124 55 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#36 := (= f1 f3)
#79 := (iff #36 false)
#69 := (not #36)
decl f4 :: S1
#10 := f4
#39 := (= f1 f4)
#42 := (and #36 #39)
#51 := (not #42)
#60 := (or #36 #39 #51)
#63 := (not #60)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (or #9 #11)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#66 := (iff #15 #63)
#45 := (or #36 #39)
#52 := (or #51 #45)
#57 := (not #52)
#64 := (iff #57 #63)
#61 := (iff #52 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#58 := (iff #15 #57)
#55 := (iff #14 #52)
#48 := (implies #42 #45)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #14 #48)
#46 := (iff #13 #45)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#47 := [monotonicity #38 #41]: #46
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#50 := [monotonicity #44 #47]: #49
#56 := [trans #50 #54]: #55
#59 := [monotonicity #56]: #58
#67 := [trans #59 #65]: #66
#35 := [asserted]: #15
#68 := [mp #35 #67]: #63
#70 := [not-or-elim #68]: #69
#80 := [iff-false #70]: #79
#73 := [not-or-elim #68]: #42
#74 := [and-elim #73]: #36
[mp #74 #80]: false
unsat
520e744f261e775610c6856eddf3b7e384835c22 55 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (or #9 #11)
#13 := (not #12)
#15 := (implies #13 #14)
#16 := (not #15)
#72 := (iff #16 false)
#40 := (= f1 f4)
#37 := (= f1 f3)
#43 := (or #37 #40)
#49 := (not #37)
#55 := (or #49 #43)
#60 := (not #55)
#70 := (iff #60 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #60 #65)
#63 := (iff #55 true)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#46 := (not #43)
#52 := (implies #46 #49)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39]: #50
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #39 #42]: #44
#48 := [monotonicity #45]: #47
#54 := [monotonicity #48 #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#73 := [trans #62 #71]: #72
#36 := [asserted]: #16
[mp #36 #73]: false
unsat
a4cd863a4afcd8896c4557ed1f94e6b2e251460c 55 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#14 := (not #11)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (not #12)
#15 := (implies #13 #14)
#16 := (not #15)
#72 := (iff #16 false)
#40 := (= f1 f4)
#37 := (= f1 f3)
#43 := (or #37 #40)
#49 := (not #40)
#55 := (or #49 #43)
#60 := (not #55)
#70 := (iff #60 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #60 #65)
#63 := (iff #55 true)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#46 := (not #43)
#52 := (implies #46 #49)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#51 := [monotonicity #42]: #50
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#45 := [monotonicity #39 #42]: #44
#48 := [monotonicity #45]: #47
#54 := [monotonicity #48 #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#73 := [trans #62 #71]: #72
#36 := [asserted]: #16
[mp #36 #73]: false
unsat
971edb4251c21bd89bd88e455c303075d8fa8060 49 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#37 := (= f1 f3)
#71 := (iff #37 false)
#40 := (not #37)
decl f4 :: S1
#11 := f4
#43 := (= f1 f4)
#46 := (and #37 #43)
#49 := (not #46)
#55 := (or #37 #49)
#60 := (not #55)
#12 := (= f4 f1)
#9 := (= f3 f1)
#13 := (and #9 #12)
#14 := (not #13)
#10 := (not #9)
#15 := (implies #10 #14)
#16 := (not #15)
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#52 := (implies #40 #49)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39 #45]: #47
#51 := [monotonicity #48]: #50
#41 := (iff #10 #40)
#42 := [monotonicity #39]: #41
#54 := [monotonicity #42 #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#36 := [asserted]: #16
#65 := [mp #36 #62]: #60
#63 := [not-or-elim #65]: #40
#72 := [iff-false #63]: #71
#64 := [not-or-elim #65]: #46
#66 := [and-elim #64]: #37
[mp #66 #72]: false
unsat
f2ade1ff188c65975bec097c4372f4c2c6bf872d 54 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#37 := (= f1 f3)
#76 := (iff #37 false)
#40 := (not #37)
decl f4 :: S1
#11 := f4
#43 := (= f1 f4)
#49 := (and #37 #43)
#54 := (not #49)
#60 := (or #37 #54)
#65 := (not #60)
#9 := (= f3 f1)
#12 := (= f4 f1)
#13 := (and #12 #9)
#14 := (not #13)
#10 := (not #9)
#15 := (implies #10 #14)
#16 := (not #15)
#66 := (iff #16 #65)
#63 := (iff #15 #60)
#57 := (implies #40 #54)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (iff #13 #49)
#46 := (and #43 #37)
#50 := (iff #46 #49)
#51 := [rewrite]: #50
#47 := (iff #13 #46)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45 #39]: #47
#53 := [trans #48 #51]: #52
#56 := [monotonicity #53]: #55
#41 := (iff #10 #40)
#42 := [monotonicity #39]: #41
#59 := [monotonicity #42 #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#36 := [asserted]: #16
#70 := [mp #36 #67]: #65
#68 := [not-or-elim #70]: #40
#77 := [iff-false #68]: #76
#69 := [not-or-elim #70]: #49
#71 := [and-elim #69]: #37
[mp #71 #77]: false
unsat
682534b0f67b638e243f2eb512302b970aa41e32 60 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#42 := (= f1 f4)
#51 := (not #42)
decl f3 :: S1
#8 := f3
#39 := (= f1 f3)
#48 := (not #39)
#54 := (or #48 #51)
#45 := (and #39 #42)
#67 := (iff #45 #54)
#72 := (iff #67 false)
#57 := (not #54)
#78 := (iff #57 #54)
#75 := (iff #78 false)
#76 := [rewrite]: #75
#79 := (iff #67 #78)
#60 := (iff #45 #57)
#77 := [rewrite]: #60
#80 := [monotonicity #77]: #79
#74 := [trans #80 #76]: #72
#11 := (= f4 f1)
#14 := (not #11)
#9 := (= f3 f1)
#13 := (not #9)
#15 := (or #13 #14)
#16 := (not #15)
#12 := (and #9 #11)
#17 := (iff #12 #16)
#18 := (not #17)
#69 := (iff #18 #67)
#63 := (not #60)
#66 := (iff #63 #67)
#68 := [rewrite]: #66
#64 := (iff #18 #63)
#61 := (iff #17 #60)
#58 := (iff #16 #57)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#53 := [monotonicity #44]: #52
#49 := (iff #13 #48)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#50 := [monotonicity #41]: #49
#56 := [monotonicity #50 #53]: #55
#59 := [monotonicity #56]: #58
#46 := (iff #12 #45)
#47 := [monotonicity #41 #44]: #46
#62 := [monotonicity #47 #59]: #61
#65 := [monotonicity #62]: #64
#70 := [trans #65 #68]: #69
#38 := [asserted]: #18
#73 := [mp #38 #70]: #67
[mp #73 #74]: false
unsat
18c084b69ef057902c4f565daffb9414815edad2 79 0
#2 := false
decl f1 :: S1
#4 := f1
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#16 := (and #11 #14)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#17 := (and #9 #16)
#12 := (and #9 #11)
#15 := (and #12 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#95 := (iff #19 false)
#49 := (= f1 f5)
#43 := (= f1 f4)
#55 := (and #43 #49)
#40 := (= f1 f3)
#58 := (and #40 #55)
#46 := (and #40 #43)
#52 := (and #46 #49)
#64 := (not #52)
#65 := (or #64 #58)
#70 := (not #65)
#93 := (iff #70 false)
#1 := true
#88 := (not true)
#91 := (iff #88 false)
#92 := [rewrite]: #91
#89 := (iff #70 #88)
#86 := (iff #65 true)
#73 := (and #40 #43 #49)
#76 := (not #73)
#81 := (or #76 #73)
#84 := (iff #81 true)
#85 := [rewrite]: #84
#82 := (iff #65 #81)
#79 := (iff #58 #73)
#80 := [rewrite]: #79
#77 := (iff #64 #76)
#74 := (iff #52 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#83 := [monotonicity #78 #80]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #52 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#57 := [monotonicity #45 #51]: #56
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#60 := [monotonicity #42 #57]: #59
#53 := (iff #15 #52)
#47 := (iff #12 #46)
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#63 := [monotonicity #54 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#96 := [trans #72 #94]: #95
#39 := [asserted]: #19
[mp #39 #96]: false
unsat
b35caa01ace8f0712871ad8d5740788301cd45cb 94 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#49 := (= f1 f5)
decl f4 :: S1
#10 := f4
#43 := (= f1 f4)
decl f3 :: S1
#8 := f3
#40 := (= f1 f3)
#73 := (or #40 #43 #49)
#114 := (iff #73 false)
#109 := (or false false false)
#112 := (iff #109 false)
#113 := [rewrite]: #112
#110 := (iff #73 #109)
#107 := (iff #49 false)
#97 := (not #49)
#76 := (not #73)
#82 := (or #40 #43 #49 #76)
#87 := (not #82)
#14 := (= f5 f1)
#11 := (= f4 f1)
#16 := (or #11 #14)
#9 := (= f3 f1)
#17 := (or #9 #16)
#12 := (or #9 #11)
#15 := (or #12 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#90 := (iff #19 #87)
#55 := (or #43 #49)
#58 := (or #40 #55)
#46 := (or #40 #43)
#52 := (or #46 #49)
#64 := (not #52)
#65 := (or #64 #58)
#70 := (not #65)
#88 := (iff #70 #87)
#85 := (iff #65 #82)
#79 := (or #76 #58)
#83 := (iff #79 #82)
#84 := [rewrite]: #83
#80 := (iff #65 #79)
#77 := (iff #64 #76)
#74 := (iff #52 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#86 := [trans #81 #84]: #85
#89 := [monotonicity #86]: #88
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #52 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#57 := [monotonicity #45 #51]: #56
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#60 := [monotonicity #42 #57]: #59
#53 := (iff #15 #52)
#47 := (iff #12 #46)
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#63 := [monotonicity #54 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#91 := [trans #72 #89]: #90
#39 := [asserted]: #19
#92 := [mp #39 #91]: #87
#98 := [not-or-elim #92]: #97
#108 := [iff-false #98]: #107
#105 := (iff #43 false)
#95 := (not #43)
#96 := [not-or-elim #92]: #95
#106 := [iff-false #96]: #105
#103 := (iff #40 false)
#93 := (not #40)
#94 := [not-or-elim #92]: #93
#104 := [iff-false #94]: #103
#111 := [monotonicity #104 #106 #108]: #110
#115 := [trans #111 #113]: #114
#99 := [not-or-elim #92]: #73
[mp #99 #115]: false
unsat
644cc5c7eac6cad9197e62e1430e0caf631242de 114 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#50 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#56 := (or #41 #50)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#89 := (not #44)
#88 := (not #41)
#90 := (or #88 #89)
#91 := (not #90)
#119 := (not #50)
#130 := [hypothesis]: #50
#120 := (or #56 #119)
#121 := [def-axiom]: #120
#131 := [unit-resolution #121 #130]: #56
#59 := (or #44 #50)
#126 := (or #59 #119)
#127 := [def-axiom]: #126
#132 := [unit-resolution #127 #130]: #59
#98 := (not #59)
#97 := (not #56)
#99 := (or #97 #98)
#62 := (and #56 #59)
#78 := (not #62)
#108 := (iff #78 #99)
#100 := (not #99)
#103 := (not #100)
#106 := (iff #103 #99)
#107 := [rewrite]: #106
#104 := (iff #78 #103)
#101 := (iff #62 #100)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#109 := [trans #105 #107]: #108
#47 := (and #41 #44)
#53 := (or #47 #50)
#68 := (not #53)
#69 := (or #68 #62)
#74 := (not #69)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (or #11 #14)
#9 := (= f3 f1)
#16 := (or #9 #14)
#18 := (and #16 #17)
#12 := (and #9 #11)
#15 := (or #12 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#75 := (iff #20 #74)
#72 := (iff #19 #69)
#65 := (implies #53 #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #19 #65)
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#61 := [monotonicity #46 #52]: #60
#57 := (iff #16 #56)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#58 := [monotonicity #43 #52]: #57
#64 := [monotonicity #58 #61]: #63
#54 := (iff #15 #53)
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [monotonicity #49 #52]: #54
#67 := [monotonicity #55 #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#40 := [asserted]: #20
#79 := [mp #40 #76]: #74
#80 := [not-or-elim #79]: #78
#110 := [mp #80 #109]: #99
#133 := [unit-resolution #110 #132 #131]: false
#134 := [lemma #133]: #119
#83 := (or #50 #91)
#94 := (iff #53 #83)
#84 := (or #91 #50)
#92 := (iff #84 #83)
#93 := [rewrite]: #92
#85 := (iff #53 #84)
#86 := (iff #47 #91)
#87 := [rewrite]: #86
#82 := [monotonicity #87]: #85
#95 := [trans #82 #93]: #94
#77 := [not-or-elim #79]: #53
#96 := [mp #77 #95]: #83
#135 := [unit-resolution #96 #134]: #91
#111 := (or #90 #41)
#112 := [def-axiom]: #111
#136 := [unit-resolution #112 #135]: #41
#117 := (or #56 #88)
#118 := [def-axiom]: #117
#137 := [unit-resolution #118 #136]: #56
#113 := (or #90 #44)
#114 := [def-axiom]: #113
#138 := [unit-resolution #114 #135]: #44
#124 := (or #59 #89)
#125 := [def-axiom]: #124
#139 := [unit-resolution #125 #138]: #59
[unit-resolution #110 #139 #137]: false
unsat
93bc0888dce281b8a619c094f485437218f003bd 121 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#50 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#64 := (and #41 #50)
#101 := (not #64)
#140 := (iff #101 false)
#1 := true
#135 := (not true)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #101 #135)
#133 := (iff #64 true)
#128 := (and true true)
#131 := (iff #128 true)
#132 := [rewrite]: #131
#129 := (iff #64 #128)
#126 := (iff #50 true)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#56 := (or #44 #50)
#123 := (iff #56 #50)
#118 := (or false #50)
#121 := (iff #118 #50)
#122 := [rewrite]: #121
#119 := (iff #56 #118)
#106 := (iff #44 false)
#96 := (not #44)
#47 := (or #41 #44)
#61 := (and #47 #56)
#78 := (not #61)
#87 := (or #44 #78 #64)
#90 := (not #87)
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (and #9 #14)
#18 := (or #17 #11)
#15 := (or #14 #11)
#12 := (or #9 #11)
#16 := (and #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#93 := (iff #20 #90)
#70 := (or #44 #64)
#79 := (or #78 #70)
#84 := (not #79)
#91 := (iff #84 #90)
#88 := (iff #79 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#85 := (iff #20 #84)
#82 := (iff #19 #79)
#75 := (implies #61 #70)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #19 #75)
#73 := (iff #18 #70)
#67 := (or #64 #44)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #18 #67)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#65 := (iff #17 #64)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#66 := [monotonicity #43 #52]: #65
#69 := [monotonicity #66 #46]: #68
#74 := [trans #69 #72]: #73
#62 := (iff #16 #61)
#59 := (iff #15 #56)
#53 := (or #50 #44)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #15 #53)
#55 := [monotonicity #52 #46]: #54
#60 := [trans #55 #58]: #59
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#63 := [monotonicity #49 #60]: #62
#77 := [monotonicity #63 #74]: #76
#83 := [trans #77 #81]: #82
#86 := [monotonicity #83]: #85
#94 := [trans #86 #92]: #93
#40 := [asserted]: #20
#95 := [mp #40 #94]: #90
#97 := [not-or-elim #95]: #96
#107 := [iff-false #97]: #106
#120 := [monotonicity #107]: #119
#124 := [trans #120 #122]: #123
#98 := [not-or-elim #95]: #61
#100 := [and-elim #98]: #56
#125 := [mp #100 #124]: #50
#127 := [iff-true #125]: #126
#116 := (iff #41 true)
#113 := (iff #47 #41)
#108 := (or #41 false)
#111 := (iff #108 #41)
#112 := [rewrite]: #111
#109 := (iff #47 #108)
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#99 := [and-elim #98]: #47
#115 := [mp #99 #114]: #41
#117 := [iff-true #115]: #116
#130 := [monotonicity #117 #127]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134]: #136
#141 := [trans #137 #139]: #140
#102 := [not-or-elim #95]: #101
[mp #102 #141]: false
unsat
25b40c8c6dac4ff528a28853107efdd6966efb87 110 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#44 := (= f1 f4)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#47 := (or #41 #44)
#131 := (iff #47 false)
#126 := (or false false)
#129 := (iff #126 false)
#130 := [rewrite]: #129
#127 := (iff #47 #126)
#124 := (iff #44 false)
#120 := (not #44)
decl f5 :: S1
#13 := f5
#50 := (= f1 f5)
#59 := (and #44 #50)
#91 := (not #59)
#121 := (iff #91 #120)
#118 := (iff #59 #44)
#1 := true
#113 := (and #44 true)
#116 := (iff #113 #44)
#117 := [rewrite]: #116
#114 := (iff #59 #113)
#98 := (iff #50 true)
#53 := (and #47 #50)
#56 := (and #41 #50)
#68 := (not #53)
#77 := (or #68 #56 #59)
#80 := (not #77)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (and #11 #14)
#9 := (= f3 f1)
#16 := (and #9 #14)
#18 := (or #16 #17)
#12 := (or #9 #11)
#15 := (and #12 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#83 := (iff #20 #80)
#62 := (or #56 #59)
#69 := (or #68 #62)
#74 := (not #69)
#81 := (iff #74 #80)
#78 := (iff #69 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#75 := (iff #20 #74)
#72 := (iff #19 #69)
#65 := (implies #53 #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #19 #65)
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#61 := [monotonicity #46 #52]: #60
#57 := (iff #16 #56)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#58 := [monotonicity #43 #52]: #57
#64 := [monotonicity #58 #61]: #63
#54 := (iff #15 #53)
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [monotonicity #49 #52]: #54
#67 := [monotonicity #55 #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#84 := [trans #76 #82]: #83
#40 := [asserted]: #20
#85 := [mp #40 #84]: #80
#86 := [not-or-elim #85]: #53
#88 := [and-elim #86]: #50
#99 := [iff-true #88]: #98
#115 := [monotonicity #99]: #114
#119 := [trans #115 #117]: #118
#122 := [monotonicity #119]: #121
#92 := [not-or-elim #85]: #91
#123 := [mp #92 #122]: #120
#125 := [iff-false #123]: #124
#111 := (iff #41 false)
#107 := (not #41)
#89 := (not #56)
#108 := (iff #89 #107)
#105 := (iff #56 #41)
#100 := (and #41 true)
#103 := (iff #100 #41)
#104 := [rewrite]: #103
#101 := (iff #56 #100)
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#109 := [monotonicity #106]: #108
#90 := [not-or-elim #85]: #89
#110 := [mp #90 #109]: #107
#112 := [iff-false #110]: #111
#128 := [monotonicity #112 #125]: #127
#132 := [trans #128 #130]: #131
#87 := [and-elim #86]: #47
[mp #87 #132]: false
unsat
3be7256d2b13897c8029d9190e000fab6c7cea0c 127 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#50 := (= f1 f5)
#94 := (not #50)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#99 := (not #44)
#95 := (or #99 #94)
#92 := (not #95)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#98 := (not #41)
#100 := (or #98 #99)
#101 := (not #100)
#143 := [hypothesis]: #101
#133 := (or #100 #44)
#134 := [def-axiom]: #133
#144 := [unit-resolution #134 #143]: #44
#64 := (or #41 #50)
#131 := (or #100 #41)
#132 := [def-axiom]: #131
#145 := [unit-resolution #132 #143]: #41
#137 := (or #64 #98)
#138 := [def-axiom]: #137
#146 := [unit-resolution #138 #145]: #64
#112 := (not #64)
#113 := (or #99 #112)
#70 := (and #44 #64)
#88 := (not #70)
#122 := (iff #88 #113)
#114 := (not #113)
#117 := (not #114)
#120 := (iff #117 #113)
#121 := [rewrite]: #120
#118 := (iff #88 #117)
#115 := (iff #70 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#123 := [trans #119 #121]: #122
#56 := (and #44 #50)
#47 := (and #41 #44)
#61 := (or #47 #56)
#78 := (not #61)
#79 := (or #78 #70)
#84 := (not #79)
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (or #9 #14)
#18 := (and #17 #11)
#15 := (and #14 #11)
#12 := (and #9 #11)
#16 := (or #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#85 := (iff #20 #84)
#82 := (iff #19 #79)
#75 := (implies #61 #70)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #19 #75)
#73 := (iff #18 #70)
#67 := (and #64 #44)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #18 #67)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#65 := (iff #17 #64)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#66 := [monotonicity #43 #52]: #65
#69 := [monotonicity #66 #46]: #68
#74 := [trans #69 #72]: #73
#62 := (iff #16 #61)
#59 := (iff #15 #56)
#53 := (and #50 #44)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #15 #53)
#55 := [monotonicity #52 #46]: #54
#60 := [trans #55 #58]: #59
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#63 := [monotonicity #49 #60]: #62
#77 := [monotonicity #63 #74]: #76
#83 := [trans #77 #81]: #82
#86 := [monotonicity #83]: #85
#40 := [asserted]: #20
#89 := [mp #40 #86]: #84
#90 := [not-or-elim #89]: #88
#124 := [mp #90 #123]: #113
#147 := [unit-resolution #124 #146 #144]: false
#148 := [lemma #147]: #100
#106 := (or #92 #101)
#109 := (iff #61 #106)
#103 := (or #101 #92)
#107 := (iff #103 #106)
#108 := [rewrite]: #107
#104 := (iff #61 #103)
#93 := (iff #56 #92)
#102 := [rewrite]: #93
#96 := (iff #47 #101)
#97 := [rewrite]: #96
#105 := [monotonicity #97 #102]: #104
#110 := [trans #105 #108]: #109
#87 := [not-or-elim #89]: #61
#111 := [mp #87 #110]: #106
#149 := [unit-resolution #111 #148]: #92
#127 := (or #95 #50)
#128 := [def-axiom]: #127
#150 := [unit-resolution #128 #149]: #50
#125 := (or #95 #44)
#126 := [def-axiom]: #125
#151 := [unit-resolution #126 #149]: #44
#152 := [unit-resolution #124 #151]: #112
#139 := (or #64 #94)
#140 := [def-axiom]: #139
[unit-resolution #140 #152 #150]: false
unsat
e4d3d98d52d5e02451d4a933a7ae69eccde69dc7 66 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#36 := (= f1 f3)
decl f4 :: S1
#10 := f4
#39 := (= f1 f4)
#45 := (not #36)
#46 := (or #45 #39)
#54 := (not #46)
#55 := (or #36 #54)
#85 := (iff #55 #54)
#80 := (or false #54)
#83 := (iff #80 #54)
#84 := [rewrite]: #83
#81 := (iff #55 #80)
#78 := (iff #36 false)
#63 := (not #55)
#64 := (or #36 #63)
#69 := (not #64)
#9 := (= f3 f1)
#11 := (= f4 f1)
#12 := (implies #9 #11)
#13 := (implies #12 #9)
#14 := (implies #13 #9)
#15 := (not #14)
#70 := (iff #15 #69)
#67 := (iff #14 #64)
#60 := (implies #55 #36)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #14 #60)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#58 := (iff #13 #55)
#51 := (implies #46 #36)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #13 #51)
#49 := (iff #12 #46)
#42 := (implies #36 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #38 #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50 #38]: #52
#59 := [trans #53 #57]: #58
#62 := [monotonicity #59 #38]: #61
#68 := [trans #62 #66]: #67
#71 := [monotonicity #68]: #70
#35 := [asserted]: #15
#74 := [mp #35 #71]: #69
#72 := [not-or-elim #74]: #45
#79 := [iff-false #72]: #78
#82 := [monotonicity #79]: #81
#86 := [trans #82 #84]: #85
#73 := [not-or-elim #74]: #55
#87 := [mp #73 #86]: #54
#76 := [not-or-elim #87]: #36
[unit-resolution #72 #76]: false
unsat
19c46603d78602c88e567210d895a32ffee713db 157 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#56 := (= f1 f5)
#62 := (not #56)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#63 := (or #44 #62)
#102 := (not #63)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#50 := (not #41)
#51 := (or #50 #44)
#120 := (not #44)
#101 := (not #51)
#155 := [hypothesis]: #101
#130 := (or #51 #120)
#131 := [def-axiom]: #130
#156 := [unit-resolution #131 #155]: #120
#71 := (or #41 #56)
#128 := (or #51 #41)
#129 := [def-axiom]: #128
#157 := [unit-resolution #129 #155]: #41
#114 := (or #71 #50)
#115 := [def-axiom]: #114
#158 := [unit-resolution #115 #157]: #71
#77 := (not #71)
#78 := (or #44 #77)
#103 := (or #101 #102)
#140 := (or #103 #51)
#141 := [def-axiom]: #140
#159 := [unit-resolution #141 #155]: #103
#104 := (not #103)
#149 := (or #78 #104)
#110 := (iff #78 #103)
#68 := (and #51 #63)
#89 := (not #68)
#90 := (iff #78 #89)
#111 := (iff #90 #110)
#108 := (iff #89 #103)
#96 := (not #104)
#106 := (iff #96 #103)
#107 := [rewrite]: #106
#98 := (iff #89 #96)
#99 := (iff #68 #104)
#100 := [rewrite]: #99
#105 := [monotonicity #100]: #98
#109 := [trans #105 #107]: #108
#112 := [monotonicity #109]: #111
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (or #9 #14)
#18 := (implies #17 #11)
#15 := (implies #14 #11)
#12 := (implies #9 #11)
#16 := (and #12 #15)
#19 := (iff #16 #18)
#20 := (not #19)
#93 := (iff #20 #90)
#83 := (iff #68 #78)
#86 := (not #83)
#91 := (iff #86 #90)
#92 := [rewrite]: #91
#87 := (iff #20 #86)
#84 := (iff #19 #83)
#81 := (iff #18 #78)
#74 := (implies #71 #44)
#79 := (iff #74 #78)
#80 := [rewrite]: #79
#75 := (iff #18 #74)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#72 := (iff #17 #71)
#57 := (iff #14 #56)
#58 := [rewrite]: #57
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#73 := [monotonicity #43 #58]: #72
#76 := [monotonicity #73 #46]: #75
#82 := [trans #76 #80]: #81
#69 := (iff #16 #68)
#66 := (iff #15 #63)
#59 := (implies #56 #44)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #15 #59)
#61 := [monotonicity #58 #46]: #60
#67 := [trans #61 #65]: #66
#54 := (iff #12 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#70 := [monotonicity #55 #67]: #69
#85 := [monotonicity #70 #82]: #84
#88 := [monotonicity #85]: #87
#94 := [trans #88 #92]: #93
#40 := [asserted]: #20
#97 := [mp #40 #94]: #90
#113 := [mp #97 #112]: #110
#146 := (not #110)
#147 := (or #78 #104 #146)
#148 := [def-axiom]: #147
#150 := [unit-resolution #148 #113]: #149
#160 := [unit-resolution #150 #159]: #78
#125 := (not #78)
#126 := (or #125 #44 #77)
#127 := [def-axiom]: #126
#161 := [unit-resolution #127 #160 #158 #156]: false
#162 := [lemma #161]: #51
#163 := [hypothesis]: #125
#121 := (or #78 #120)
#122 := [def-axiom]: #121
#164 := [unit-resolution #122 #163]: #120
#165 := [unit-resolution #150 #163]: #104
#142 := (or #103 #63)
#143 := [def-axiom]: #142
#166 := [unit-resolution #143 #165]: #63
#123 := (or #78 #71)
#124 := [def-axiom]: #123
#167 := [unit-resolution #124 #163]: #71
#132 := (or #101 #50 #44)
#133 := [def-axiom]: #132
#168 := [unit-resolution #133 #164 #162]: #50
#118 := (or #77 #41 #56)
#119 := [def-axiom]: #118
#169 := [unit-resolution #119 #168 #167]: #56
#138 := (or #102 #44 #62)
#139 := [def-axiom]: #138
#170 := [unit-resolution #139 #169 #166 #164]: false
#171 := [lemma #170]: #78
#153 := (or #125 #103)
#151 := (or #125 #103 #146)
#152 := [def-axiom]: #151
#154 := [unit-resolution #152 #113]: #153
#172 := [unit-resolution #154 #171]: #103
#144 := (or #104 #101 #102)
#145 := [def-axiom]: #144
#173 := [unit-resolution #145 #172 #162]: #102
#136 := (or #63 #56)
#137 := [def-axiom]: #136
#174 := [unit-resolution #137 #173]: #56
#134 := (or #63 #120)
#135 := [def-axiom]: #134
#175 := [unit-resolution #135 #173]: #120
#176 := [unit-resolution #127 #175 #171]: #77
#116 := (or #71 #62)
#117 := [def-axiom]: #116
[unit-resolution #117 #176 #174]: false
unsat
9ca0ea6fd7baaf9ab5e21ea28520ab880b00ee9a 114 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#49 := (= f1 f5)
decl f4 :: S1
#10 := f4
#43 := (= f1 f4)
#64 := (not #43)
decl f3 :: S1
#8 := f3
#40 := (= f1 f3)
#73 := (not #40)
#91 := (or #73 #64 #49)
#46 := (and #40 #43)
#55 := (not #46)
#56 := (or #55 #49)
#85 := (not #56)
#97 := (iff #85 #91)
#132 := (iff #97 false)
#124 := (not #91)
#127 := (iff #124 #91)
#130 := (iff #127 false)
#131 := [rewrite]: #130
#128 := (iff #97 #127)
#125 := (iff #85 #124)
#122 := (iff #56 #91)
#110 := (or #73 #64)
#117 := (or #110 #49)
#120 := (iff #117 #91)
#121 := [rewrite]: #120
#118 := (iff #56 #117)
#115 := (iff #55 #110)
#111 := (not #110)
#108 := (not #111)
#107 := (iff #108 #110)
#114 := [rewrite]: #107
#109 := (iff #55 #108)
#112 := (iff #46 #111)
#113 := [rewrite]: #112
#106 := [monotonicity #113]: #109
#116 := [trans #106 #114]: #115
#119 := [monotonicity #116]: #118
#123 := [trans #119 #121]: #122
#126 := [monotonicity #123]: #125
#129 := [monotonicity #126]: #128
#133 := [trans #129 #131]: #132
#14 := (= f5 f1)
#11 := (= f4 f1)
#16 := (implies #11 #14)
#9 := (= f3 f1)
#17 := (implies #9 #16)
#12 := (and #9 #11)
#15 := (implies #12 #14)
#18 := (iff #15 #17)
#19 := (not #18)
#102 := (iff #19 #97)
#65 := (or #64 #49)
#74 := (or #73 #65)
#86 := (iff #74 #85)
#100 := (iff #86 #97)
#94 := (iff #91 #85)
#98 := (iff #94 #97)
#99 := [rewrite]: #98
#95 := (iff #86 #94)
#92 := (iff #74 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#101 := [trans #96 #99]: #100
#89 := (iff #19 #86)
#79 := (iff #56 #74)
#82 := (not #79)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #19 #82)
#80 := (iff #18 #79)
#77 := (iff #17 #74)
#70 := (implies #40 #65)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #17 #70)
#68 := (iff #16 #65)
#61 := (implies #43 #49)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #16 #61)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#63 := [monotonicity #45 #51]: #62
#69 := [trans #63 #67]: #68
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#72 := [monotonicity #42 #69]: #71
#78 := [trans #72 #76]: #77
#59 := (iff #15 #56)
#52 := (implies #46 #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #15 #52)
#47 := (iff #12 #46)
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#60 := [trans #54 #58]: #59
#81 := [monotonicity #60 #78]: #80
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#103 := [trans #90 #101]: #102
#39 := [asserted]: #19
#104 := [mp #39 #103]: #97
[mp #104 #133]: false
unsat
04315913425b7fdaa9756cb775e4e6e81e279b08 198 0
#2 := false
decl f5 :: S1
#14 := f5
decl f1 :: S1
#4 := f1
#68 := (= f1 f5)
decl f3 :: S1
#8 := f3
#44 := (= f1 f3)
#89 := (and #44 #68)
#95 := (not #89)
decl f4 :: S1
#10 := f4
#47 := (= f1 f4)
#96 := (or #47 #95)
#217 := (iff #96 false)
#212 := (or false false)
#215 := (iff #212 false)
#216 := [rewrite]: #215
#213 := (iff #96 #212)
#210 := (iff #95 false)
#1 := true
#205 := (not true)
#208 := (iff #205 false)
#209 := [rewrite]: #208
#206 := (iff #95 #205)
#203 := (iff #89 true)
#198 := (and true true)
#201 := (iff #198 true)
#202 := [rewrite]: #201
#199 := (iff #89 #198)
#196 := (iff #68 true)
#74 := (not #68)
#75 := (or #47 #74)
#83 := (not #75)
#84 := (or #47 #83)
#193 := (iff #84 #68)
#188 := (or false #68)
#191 := (iff #188 #68)
#192 := [rewrite]: #191
#189 := (iff #84 #188)
#186 := (iff #83 #68)
#181 := (not #74)
#184 := (iff #181 #68)
#185 := [rewrite]: #184
#182 := (iff #83 #181)
#179 := (iff #75 #74)
#174 := (or false #74)
#177 := (iff #174 #74)
#178 := [rewrite]: #177
#175 := (iff #75 #174)
#148 := (iff #47 false)
#140 := (not #47)
#104 := (not #96)
#113 := (not #84)
#53 := (not #44)
#54 := (or #53 #47)
#62 := (not #54)
#63 := (or #47 #62)
#122 := (not #63)
#131 := (or #47 #122 #113 #104)
#134 := (not #131)
#11 := (= f4 f1)
#15 := (= f5 f1)
#9 := (= f3 f1)
#18 := (and #9 #15)
#19 := (implies #18 #11)
#20 := (implies #19 #11)
#16 := (implies #15 #11)
#17 := (implies #16 #11)
#21 := (implies #17 #20)
#12 := (implies #9 #11)
#13 := (implies #12 #11)
#22 := (implies #13 #21)
#23 := (not #22)
#137 := (iff #23 #134)
#105 := (or #47 #104)
#114 := (or #113 #105)
#123 := (or #122 #114)
#128 := (not #123)
#135 := (iff #128 #134)
#132 := (iff #123 #131)
#133 := [rewrite]: #132
#136 := [monotonicity #133]: #135
#129 := (iff #23 #128)
#126 := (iff #22 #123)
#119 := (implies #63 #114)
#124 := (iff #119 #123)
#125 := [rewrite]: #124
#120 := (iff #22 #119)
#117 := (iff #21 #114)
#110 := (implies #84 #105)
#115 := (iff #110 #114)
#116 := [rewrite]: #115
#111 := (iff #21 #110)
#108 := (iff #20 #105)
#101 := (implies #96 #47)
#106 := (iff #101 #105)
#107 := [rewrite]: #106
#102 := (iff #20 #101)
#48 := (iff #11 #47)
#49 := [rewrite]: #48
#99 := (iff #19 #96)
#92 := (implies #89 #47)
#97 := (iff #92 #96)
#98 := [rewrite]: #97
#93 := (iff #19 #92)
#90 := (iff #18 #89)
#69 := (iff #15 #68)
#70 := [rewrite]: #69
#45 := (iff #9 #44)
#46 := [rewrite]: #45
#91 := [monotonicity #46 #70]: #90
#94 := [monotonicity #91 #49]: #93
#100 := [trans #94 #98]: #99
#103 := [monotonicity #100 #49]: #102
#109 := [trans #103 #107]: #108
#87 := (iff #17 #84)
#80 := (implies #75 #47)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #17 #80)
#78 := (iff #16 #75)
#71 := (implies #68 #47)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #16 #71)
#73 := [monotonicity #70 #49]: #72
#79 := [trans #73 #77]: #78
#82 := [monotonicity #79 #49]: #81
#88 := [trans #82 #86]: #87
#112 := [monotonicity #88 #109]: #111
#118 := [trans #112 #116]: #117
#66 := (iff #13 #63)
#59 := (implies #54 #47)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #13 #59)
#57 := (iff #12 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #12 #50)
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58 #49]: #60
#67 := [trans #61 #65]: #66
#121 := [monotonicity #67 #118]: #120
#127 := [trans #121 #125]: #126
#130 := [monotonicity #127]: #129
#138 := [trans #130 #136]: #137
#43 := [asserted]: #23
#139 := [mp #43 #138]: #134
#141 := [not-or-elim #139]: #140
#149 := [iff-false #141]: #148
#176 := [monotonicity #149]: #175
#180 := [trans #176 #178]: #179
#183 := [monotonicity #180]: #182
#187 := [trans #183 #185]: #186
#190 := [monotonicity #149 #187]: #189
#194 := [trans #190 #192]: #193
#143 := [not-or-elim #139]: #84
#195 := [mp #143 #194]: #68
#197 := [iff-true #195]: #196
#172 := (iff #44 true)
#169 := (iff #63 #44)
#164 := (or false #44)
#167 := (iff #164 #44)
#168 := [rewrite]: #167
#165 := (iff #63 #164)
#162 := (iff #62 #44)
#157 := (not #53)
#160 := (iff #157 #44)
#161 := [rewrite]: #160
#158 := (iff #62 #157)
#155 := (iff #54 #53)
#150 := (or #53 false)
#153 := (iff #150 #53)
#154 := [rewrite]: #153
#151 := (iff #54 #150)
#152 := [monotonicity #149]: #151
#156 := [trans #152 #154]: #155
#159 := [monotonicity #156]: #158
#163 := [trans #159 #161]: #162
#166 := [monotonicity #149 #163]: #165
#170 := [trans #166 #168]: #169
#142 := [not-or-elim #139]: #63
#171 := [mp #142 #170]: #44
#173 := [iff-true #171]: #172
#200 := [monotonicity #173 #197]: #199
#204 := [trans #200 #202]: #203
#207 := [monotonicity #204]: #206
#211 := [trans #207 #209]: #210
#214 := [monotonicity #149 #211]: #213
#218 := [trans #214 #216]: #217
#144 := [not-or-elim #139]: #96
[mp #144 #218]: false
unsat
a3110cebbaf91f1580f58fbd5e9552fa7ad95997 134 0
#2 := false
decl f5 :: S1
#14 := f5
decl f1 :: S1
#4 := f1
#62 := (= f1 f5)
decl f3 :: S1
#8 := f3
#44 := (= f1 f3)
#77 := (and #44 #62)
#83 := (not #77)
decl f4 :: S1
#10 := f4
#47 := (= f1 f4)
#84 := (or #47 #83)
#153 := (iff #84 false)
#148 := (or false false)
#151 := (iff #148 false)
#152 := [rewrite]: #151
#149 := (iff #84 #148)
#146 := (iff #83 false)
#1 := true
#141 := (not true)
#144 := (iff #141 false)
#145 := [rewrite]: #144
#142 := (iff #83 #141)
#139 := (iff #77 true)
#134 := (and true true)
#137 := (iff #134 true)
#138 := [rewrite]: #137
#135 := (iff #77 #134)
#132 := (iff #62 true)
#89 := (not #84)
#68 := (not #62)
#53 := (not #44)
#111 := (or #53 #47 #68 #89)
#114 := (not #111)
#11 := (= f4 f1)
#15 := (= f5 f1)
#9 := (= f3 f1)
#18 := (and #9 #15)
#19 := (implies #18 #11)
#20 := (not #19)
#16 := (implies #15 #11)
#17 := (not #16)
#21 := (implies #17 #20)
#12 := (implies #9 #11)
#13 := (not #12)
#22 := (implies #13 #21)
#23 := (not #22)
#117 := (iff #23 #114)
#69 := (or #47 #68)
#95 := (or #69 #89)
#54 := (or #53 #47)
#103 := (or #54 #95)
#108 := (not #103)
#115 := (iff #108 #114)
#112 := (iff #103 #111)
#113 := [rewrite]: #112
#116 := [monotonicity #113]: #115
#109 := (iff #23 #108)
#106 := (iff #22 #103)
#59 := (not #54)
#100 := (implies #59 #95)
#104 := (iff #100 #103)
#105 := [rewrite]: #104
#101 := (iff #22 #100)
#98 := (iff #21 #95)
#74 := (not #69)
#92 := (implies #74 #89)
#96 := (iff #92 #95)
#97 := [rewrite]: #96
#93 := (iff #21 #92)
#90 := (iff #20 #89)
#87 := (iff #19 #84)
#80 := (implies #77 #47)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #19 #80)
#48 := (iff #11 #47)
#49 := [rewrite]: #48
#78 := (iff #18 #77)
#63 := (iff #15 #62)
#64 := [rewrite]: #63
#45 := (iff #9 #44)
#46 := [rewrite]: #45
#79 := [monotonicity #46 #64]: #78
#82 := [monotonicity #79 #49]: #81
#88 := [trans #82 #86]: #87
#91 := [monotonicity #88]: #90
#75 := (iff #17 #74)
#72 := (iff #16 #69)
#65 := (implies #62 #47)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #16 #65)
#67 := [monotonicity #64 #49]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#94 := [monotonicity #76 #91]: #93
#99 := [trans #94 #97]: #98
#60 := (iff #13 #59)
#57 := (iff #12 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #12 #50)
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58]: #60
#102 := [monotonicity #61 #99]: #101
#107 := [trans #102 #105]: #106
#110 := [monotonicity #107]: #109
#118 := [trans #110 #116]: #117
#43 := [asserted]: #23
#119 := [mp #43 #118]: #114
#123 := [not-or-elim #119]: #62
#133 := [iff-true #123]: #132
#128 := (iff #44 true)
#120 := [not-or-elim #119]: #44
#129 := [iff-true #120]: #128
#136 := [monotonicity #129 #133]: #135
#140 := [trans #136 #138]: #139
#143 := [monotonicity #140]: #142
#147 := [trans #143 #145]: #146
#130 := (iff #47 false)
#121 := (not #47)
#122 := [not-or-elim #119]: #121
#131 := [iff-false #122]: #130
#150 := [monotonicity #131 #147]: #149
#154 := [trans #150 #152]: #153
#124 := [not-or-elim #119]: #84
[mp #124 #154]: false
unsat
d522bffbdc6af87260d2b830a506e89f66c0f6c5 162 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#56 := (not #41)
#73 := (or #56 #47)
#100 := (not #73)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#65 := (or #56 #44)
#99 := (not #65)
#101 := (or #99 #100)
#96 := (not #47)
#94 := (not #44)
#103 := (or #94 #96)
#104 := (not #103)
#107 := (or #56 #104)
#110 := (not #107)
#102 := (not #101)
#161 := [hypothesis]: #102
#155 := (or #101 #110)
#116 := (iff #101 #107)
#50 := (and #44 #47)
#57 := (or #56 #50)
#87 := (not #57)
#78 := (and #65 #73)
#88 := (iff #78 #87)
#119 := (iff #88 #116)
#113 := (iff #102 #110)
#117 := (iff #113 #116)
#118 := [rewrite]: #117
#114 := (iff #88 #113)
#111 := (iff #87 #110)
#108 := (iff #57 #107)
#105 := (iff #50 #104)
#106 := [rewrite]: #105
#109 := [monotonicity #106]: #108
#112 := [monotonicity #109]: #111
#97 := (iff #78 #102)
#98 := [rewrite]: #97
#115 := [monotonicity #98 #112]: #114
#120 := [trans #115 #118]: #119
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (and #16 #17)
#14 := (and #11 #13)
#15 := (implies #9 #14)
#19 := (iff #15 #18)
#20 := (not #19)
#91 := (iff #20 #88)
#81 := (iff #57 #78)
#84 := (not #81)
#89 := (iff #84 #88)
#90 := [rewrite]: #89
#85 := (iff #20 #84)
#82 := (iff #19 #81)
#79 := (iff #18 #78)
#76 := (iff #17 #73)
#70 := (implies #41 #47)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #17 #70)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#72 := [monotonicity #43 #49]: #71
#77 := [trans #72 #75]: #76
#68 := (iff #16 #65)
#62 := (implies #41 #44)
#66 := (iff #62 #65)
#67 := [rewrite]: #66
#63 := (iff #16 #62)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#64 := [monotonicity #43 #46]: #63
#69 := [trans #64 #67]: #68
#80 := [monotonicity #69 #77]: #79
#60 := (iff #15 #57)
#53 := (implies #41 #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [monotonicity #46 #49]: #51
#55 := [monotonicity #43 #52]: #54
#61 := [trans #55 #59]: #60
#83 := [monotonicity #61 #80]: #82
#86 := [monotonicity #83]: #85
#92 := [trans #86 #90]: #91
#40 := [asserted]: #20
#95 := [mp #40 #92]: #88
#121 := [mp #95 #120]: #116
#152 := (not #116)
#153 := (or #101 #110 #152)
#154 := [def-axiom]: #153
#156 := [unit-resolution #154 #121]: #155
#162 := [unit-resolution #156 #161]: #110
#148 := (or #107 #103)
#149 := [def-axiom]: #148
#163 := [unit-resolution #149 #162]: #103
#134 := (or #101 #65)
#135 := [def-axiom]: #134
#164 := [unit-resolution #135 #161]: #65
#146 := (or #107 #41)
#147 := [def-axiom]: #146
#165 := [unit-resolution #147 #162]: #41
#126 := (or #99 #56 #44)
#127 := [def-axiom]: #126
#166 := [unit-resolution #127 #165 #164]: #44
#136 := (or #101 #73)
#137 := [def-axiom]: #136
#167 := [unit-resolution #137 #161]: #73
#132 := (or #100 #56 #47)
#133 := [def-axiom]: #132
#168 := [unit-resolution #133 #165 #167]: #47
#144 := (or #104 #94 #96)
#145 := [def-axiom]: #144
#169 := [unit-resolution #145 #168 #166 #163]: false
#170 := [lemma #169]: #101
#159 := (or #102 #107)
#157 := (or #102 #107 #152)
#158 := [def-axiom]: #157
#160 := [unit-resolution #158 #121]: #159
#176 := [unit-resolution #160 #170]: #107
#171 := [hypothesis]: #56
#122 := (or #65 #41)
#123 := [def-axiom]: #122
#172 := [unit-resolution #123 #171]: #65
#128 := (or #73 #41)
#129 := [def-axiom]: #128
#173 := [unit-resolution #129 #171]: #73
#138 := (or #102 #99 #100)
#139 := [def-axiom]: #138
#174 := [unit-resolution #139 #173 #172 #170]: false
#175 := [lemma #174]: #41
#150 := (or #110 #56 #104)
#151 := [def-axiom]: #150
#177 := [unit-resolution #151 #175 #176]: #104
#140 := (or #103 #44)
#141 := [def-axiom]: #140
#178 := [unit-resolution #141 #177]: #44
#124 := (or #65 #94)
#125 := [def-axiom]: #124
#179 := [unit-resolution #125 #178]: #65
#142 := (or #103 #47)
#143 := [def-axiom]: #142
#180 := [unit-resolution #143 #177]: #47
#130 := (or #73 #96)
#131 := [def-axiom]: #130
#181 := [unit-resolution #131 #180]: #73
[unit-resolution #139 #181 #179 #170]: false
unsat
f29fbcc0ceaf6bd7f24274c3de5b8c954ec638b1 54 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (implies #11 #9)
#13 := (implies #9 #12)
#14 := (not #13)
#71 := (iff #14 false)
#38 := (= f1 f4)
#44 := (not #38)
#35 := (= f1 f3)
#45 := (or #35 #44)
#53 := (not #35)
#54 := (or #53 #45)
#59 := (not #54)
#69 := (iff #59 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #59 #64)
#62 := (iff #54 true)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#60 := (iff #14 #59)
#57 := (iff #13 #54)
#50 := (implies #35 #45)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #13 #50)
#48 := (iff #12 #45)
#41 := (implies #38 #35)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40 #37]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #37 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58]: #60
#72 := [trans #61 #70]: #71
#34 := [asserted]: #14
[mp #34 #72]: false
unsat
d58edad648d31ef919b96bbaf6580f1a23405517 144 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#53 := (not #44)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#62 := (not #41)
#105 := (or #62 #53 #47)
#163 := (iff #105 false)
#158 := (or false false false)
#161 := (iff #158 false)
#162 := [rewrite]: #161
#159 := (iff #105 #158)
#135 := (iff #47 false)
#126 := (not #47)
#108 := (not #105)
#71 := (or #62 #44)
#87 := (not #71)
#114 := (or #62 #47 #87 #108)
#119 := (not #114)
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (implies #16 #17)
#14 := (implies #11 #13)
#15 := (implies #9 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#122 := (iff #20 #119)
#79 := (or #62 #47)
#88 := (or #87 #79)
#54 := (or #53 #47)
#63 := (or #62 #54)
#96 := (not #63)
#97 := (or #96 #88)
#102 := (not #97)
#120 := (iff #102 #119)
#117 := (iff #97 #114)
#111 := (or #108 #88)
#115 := (iff #111 #114)
#116 := [rewrite]: #115
#112 := (iff #97 #111)
#109 := (iff #96 #108)
#106 := (iff #63 #105)
#107 := [rewrite]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#118 := [trans #113 #116]: #117
#121 := [monotonicity #118]: #120
#103 := (iff #20 #102)
#100 := (iff #19 #97)
#93 := (implies #63 #88)
#98 := (iff #93 #97)
#99 := [rewrite]: #98
#94 := (iff #19 #93)
#91 := (iff #18 #88)
#84 := (implies #71 #79)
#89 := (iff #84 #88)
#90 := [rewrite]: #89
#85 := (iff #18 #84)
#82 := (iff #17 #79)
#76 := (implies #41 #47)
#80 := (iff #76 #79)
#81 := [rewrite]: #80
#77 := (iff #17 #76)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#78 := [monotonicity #43 #49]: #77
#83 := [trans #78 #81]: #82
#74 := (iff #16 #71)
#68 := (implies #41 #44)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #16 #68)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#70 := [monotonicity #43 #46]: #69
#75 := [trans #70 #73]: #74
#86 := [monotonicity #75 #83]: #85
#92 := [trans #86 #90]: #91
#66 := (iff #15 #63)
#59 := (implies #41 #54)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #15 #59)
#57 := (iff #14 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #43 #58]: #60
#67 := [trans #61 #65]: #66
#95 := [monotonicity #67 #92]: #94
#101 := [trans #95 #99]: #100
#104 := [monotonicity #101]: #103
#123 := [trans #104 #121]: #122
#40 := [asserted]: #20
#124 := [mp #40 #123]: #119
#127 := [not-or-elim #124]: #126
#136 := [iff-false #127]: #135
#156 := (iff #53 false)
#1 := true
#137 := (not true)
#140 := (iff #137 false)
#141 := [rewrite]: #140
#154 := (iff #53 #137)
#152 := (iff #44 true)
#149 := (iff #71 #44)
#144 := (or false #44)
#147 := (iff #144 #44)
#148 := [rewrite]: #147
#145 := (iff #71 #144)
#142 := (iff #62 false)
#138 := (iff #62 #137)
#133 := (iff #41 true)
#125 := [not-or-elim #124]: #41
#134 := [iff-true #125]: #133
#139 := [monotonicity #134]: #138
#143 := [trans #139 #141]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#128 := [not-or-elim #124]: #71
#151 := [mp #128 #150]: #44
#153 := [iff-true #151]: #152
#155 := [monotonicity #153]: #154
#157 := [trans #155 #141]: #156
#160 := [monotonicity #143 #157 #136]: #159
#164 := [trans #160 #162]: #163
#129 := [not-or-elim #124]: #105
[mp #129 #164]: false
unsat
00d66332779f959f5155f96744316681d812ae6d 121 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#56 := (= f1 f5)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#50 := (not #41)
#93 := (or #50 #44 #56)
#140 := (iff #93 false)
#135 := (or false false false)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #93 #135)
#126 := (iff #56 false)
#116 := (not #56)
#96 := (not #93)
#102 := (or #50 #44 #56 #96)
#107 := (not #102)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (or #11 #14)
#9 := (= f3 f1)
#18 := (implies #9 #17)
#15 := (implies #9 #14)
#12 := (implies #9 #11)
#16 := (or #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#110 := (iff #20 #107)
#70 := (or #44 #56)
#76 := (or #50 #70)
#62 := (or #50 #56)
#51 := (or #50 #44)
#67 := (or #51 #62)
#84 := (not #67)
#85 := (or #84 #76)
#90 := (not #85)
#108 := (iff #90 #107)
#105 := (iff #85 #102)
#99 := (or #96 #76)
#103 := (iff #99 #102)
#104 := [rewrite]: #103
#100 := (iff #85 #99)
#97 := (iff #84 #96)
#94 := (iff #67 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#106 := [trans #101 #104]: #105
#109 := [monotonicity #106]: #108
#91 := (iff #20 #90)
#88 := (iff #19 #85)
#81 := (implies #67 #76)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #19 #81)
#79 := (iff #18 #76)
#73 := (implies #41 #70)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #18 #73)
#71 := (iff #17 #70)
#57 := (iff #14 #56)
#58 := [rewrite]: #57
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#72 := [monotonicity #46 #58]: #71
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#75 := [monotonicity #43 #72]: #74
#80 := [trans #75 #78]: #79
#68 := (iff #16 #67)
#65 := (iff #15 #62)
#59 := (implies #41 #56)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#61 := [monotonicity #43 #58]: #60
#66 := [trans #61 #64]: #65
#54 := (iff #12 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#69 := [monotonicity #55 #66]: #68
#83 := [monotonicity #69 #80]: #82
#89 := [trans #83 #87]: #88
#92 := [monotonicity #89]: #91
#111 := [trans #92 #109]: #110
#40 := [asserted]: #20
#112 := [mp #40 #111]: #107
#117 := [not-or-elim #112]: #116
#127 := [iff-false #117]: #126
#124 := (iff #44 false)
#114 := (not #44)
#115 := [not-or-elim #112]: #114
#125 := [iff-false #115]: #124
#133 := (iff #50 false)
#1 := true
#128 := (not true)
#131 := (iff #128 false)
#132 := [rewrite]: #131
#129 := (iff #50 #128)
#122 := (iff #41 true)
#113 := [not-or-elim #112]: #41
#123 := [iff-true #113]: #122
#130 := [monotonicity #123]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134 #125 #127]: #136
#141 := [trans #137 #139]: #140
#118 := [not-or-elim #112]: #93
[mp #118 #141]: false
unsat
e8da757bab2c8873de4c9abb00d9ba6b32efbf76 123 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#56 := (not #48)
#57 := (or #38 #56)
#65 := (not #57)
#66 := (or #38 #65)
#74 := (not #66)
#75 := (or #41 #74)
#143 := (iff #75 false)
#138 := (or false false)
#141 := (iff #138 false)
#142 := [rewrite]: #141
#139 := (iff #75 #138)
#136 := (iff #74 false)
#1 := true
#131 := (not true)
#134 := (iff #131 false)
#135 := [rewrite]: #134
#132 := (iff #74 #131)
#129 := (iff #66 true)
#124 := (or #38 #47)
#127 := (iff #124 true)
#128 := [rewrite]: #127
#125 := (iff #66 #124)
#122 := (iff #65 #47)
#120 := (iff #57 #38)
#115 := (or #38 #38)
#118 := (iff #115 #38)
#119 := [rewrite]: #118
#116 := (iff #57 #115)
#113 := (iff #56 #38)
#108 := (not #47)
#111 := (iff #108 #38)
#112 := [rewrite]: #111
#109 := (iff #56 #108)
#106 := (iff #48 #47)
#101 := (or #47 false)
#104 := (iff #101 #47)
#105 := [rewrite]: #104
#102 := (iff #48 #101)
#99 := (iff #41 false)
#92 := (not #41)
#83 := (not #75)
#84 := (or #41 #83)
#89 := (not #84)
#11 := (= f4 f1)
#9 := (= f3 f1)
#12 := (implies #9 #11)
#13 := (implies #12 #9)
#14 := (implies #13 #9)
#15 := (implies #14 #11)
#16 := (implies #15 #11)
#17 := (not #16)
#90 := (iff #17 #89)
#87 := (iff #16 #84)
#80 := (implies #75 #41)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #16 #80)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#78 := (iff #15 #75)
#71 := (implies #66 #41)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #15 #71)
#69 := (iff #14 #66)
#62 := (implies #57 #38)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #14 #62)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#60 := (iff #13 #57)
#53 := (implies #48 #38)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #13 #53)
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52 #40]: #54
#61 := [trans #55 #59]: #60
#64 := [monotonicity #61 #40]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70 #43]: #72
#79 := [trans #73 #77]: #78
#82 := [monotonicity #79 #43]: #81
#88 := [trans #82 #86]: #87
#91 := [monotonicity #88]: #90
#37 := [asserted]: #17
#94 := [mp #37 #91]: #89
#93 := [not-or-elim #94]: #92
#100 := [iff-false #93]: #99
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#117 := [monotonicity #114]: #116
#121 := [trans #117 #119]: #120
#123 := [monotonicity #121]: #122
#126 := [monotonicity #123]: #125
#130 := [trans #126 #128]: #129
#133 := [monotonicity #130]: #132
#137 := [trans #133 #135]: #136
#140 := [monotonicity #100 #137]: #139
#144 := [trans #140 #142]: #143
#95 := [not-or-elim #94]: #75
[mp #95 #144]: false
unsat
e9d35c7bb1cf28b044ff39158dac0d3feace74d2 60 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (not #11)
#15 := (implies #13 #14)
#12 := (implies #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#77 := (iff #17 false)
#1 := true
#72 := (not true)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #17 #72)
#70 := (iff #16 true)
#41 := (= f1 f4)
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#65 := (implies #48 #48)
#68 := (iff #65 true)
#69 := [rewrite]: #68
#66 := (iff #16 #65)
#63 := (iff #15 #48)
#53 := (not #41)
#58 := (implies #53 #47)
#61 := (iff #58 #48)
#62 := [rewrite]: #61
#59 := (iff #15 #58)
#56 := (iff #14 #47)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#57 := [monotonicity #40]: #56
#54 := (iff #13 #53)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#55 := [monotonicity #43]: #54
#60 := [monotonicity #55 #57]: #59
#64 := [trans #60 #62]: #63
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#67 := [monotonicity #52 #64]: #66
#71 := [trans #67 #69]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#37 := [asserted]: #17
[mp #37 #78]: false
unsat
ff95a56cf58e4b621d6e82e0aebf8b86faaedf39 121 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#56 := (not #41)
#93 := (or #56 #44 #47)
#140 := (iff #93 false)
#135 := (or false false false)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #93 #135)
#126 := (iff #47 false)
#116 := (not #47)
#96 := (not #93)
#102 := (or #56 #44 #47 #96)
#107 := (not #102)
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (or #16 #17)
#14 := (or #11 #13)
#15 := (implies #9 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#110 := (iff #20 #107)
#73 := (or #56 #47)
#65 := (or #56 #44)
#78 := (or #65 #73)
#50 := (or #44 #47)
#57 := (or #56 #50)
#84 := (not #57)
#85 := (or #84 #78)
#90 := (not #85)
#108 := (iff #90 #107)
#105 := (iff #85 #102)
#99 := (or #96 #78)
#103 := (iff #99 #102)
#104 := [rewrite]: #103
#100 := (iff #85 #99)
#97 := (iff #84 #96)
#94 := (iff #57 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#106 := [trans #101 #104]: #105
#109 := [monotonicity #106]: #108
#91 := (iff #20 #90)
#88 := (iff #19 #85)
#81 := (implies #57 #78)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #19 #81)
#79 := (iff #18 #78)
#76 := (iff #17 #73)
#70 := (implies #41 #47)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #17 #70)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#72 := [monotonicity #43 #49]: #71
#77 := [trans #72 #75]: #76
#68 := (iff #16 #65)
#62 := (implies #41 #44)
#66 := (iff #62 #65)
#67 := [rewrite]: #66
#63 := (iff #16 #62)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#64 := [monotonicity #43 #46]: #63
#69 := [trans #64 #67]: #68
#80 := [monotonicity #69 #77]: #79
#60 := (iff #15 #57)
#53 := (implies #41 #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [monotonicity #46 #49]: #51
#55 := [monotonicity #43 #52]: #54
#61 := [trans #55 #59]: #60
#83 := [monotonicity #61 #80]: #82
#89 := [trans #83 #87]: #88
#92 := [monotonicity #89]: #91
#111 := [trans #92 #109]: #110
#40 := [asserted]: #20
#112 := [mp #40 #111]: #107
#117 := [not-or-elim #112]: #116
#127 := [iff-false #117]: #126
#124 := (iff #44 false)
#114 := (not #44)
#115 := [not-or-elim #112]: #114
#125 := [iff-false #115]: #124
#133 := (iff #56 false)
#1 := true
#128 := (not true)
#131 := (iff #128 false)
#132 := [rewrite]: #131
#129 := (iff #56 #128)
#122 := (iff #41 true)
#113 := [not-or-elim #112]: #41
#123 := [iff-true #113]: #122
#130 := [monotonicity #123]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134 #125 #127]: #136
#141 := [trans #137 #139]: #140
#118 := [not-or-elim #112]: #93
[mp #118 #141]: false
unsat
47f13964ba3dfd91ee45da107e4d79352a28a5c5 84 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#41 := (= f1 f4)
#56 := (not #41)
#100 := [hypothesis]: #56
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#57 := (or #38 #56)
#62 := (and #48 #57)
#65 := (iff #38 #41)
#71 := (not #62)
#72 := (or #71 #65)
#77 := (not #72)
#11 := (= f4 f1)
#9 := (= f3 f1)
#15 := (iff #9 #11)
#13 := (implies #11 #9)
#12 := (implies #9 #11)
#14 := (and #12 #13)
#16 := (implies #14 #15)
#17 := (not #16)
#78 := (iff #17 #77)
#75 := (iff #16 #72)
#68 := (implies #62 #65)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #16 #68)
#66 := (iff #15 #65)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#67 := [monotonicity #40 #43]: #66
#63 := (iff #14 #62)
#60 := (iff #13 #57)
#53 := (implies #41 #38)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #13 #53)
#55 := [monotonicity #43 #40]: #54
#61 := [trans #55 #59]: #60
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#64 := [monotonicity #52 #61]: #63
#70 := [monotonicity #64 #67]: #69
#76 := [trans #70 #74]: #75
#79 := [monotonicity #76]: #78
#37 := [asserted]: #17
#82 := [mp #37 #79]: #77
#80 := [not-or-elim #82]: #62
#81 := [and-elim #80]: #48
#101 := [unit-resolution #81 #100]: #47
#92 := (or #41 #38)
#93 := (iff #41 #47)
#84 := (not #65)
#94 := (iff #84 #93)
#95 := [rewrite]: #94
#85 := [not-or-elim #82]: #84
#96 := [mp #85 #95]: #93
#97 := (not #93)
#98 := (or #41 #38 #97)
#91 := [def-axiom]: #98
#89 := [unit-resolution #91 #96]: #92
#102 := [unit-resolution #89 #101 #100]: false
#103 := [lemma #102]: #41
#83 := [and-elim #80]: #57
#104 := [unit-resolution #83 #103]: #38
#88 := (or #56 #47)
#90 := (or #56 #47 #97)
#87 := [def-axiom]: #90
#99 := [unit-resolution #87 #96]: #88
[unit-resolution #99 #104 #103]: false
unsat
67d0291df830bf23c2458b5c5d9ab7a1b7326290 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (iff #11 #9)
#12 := (iff #9 #11)
#14 := (iff #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (iff #36 #39)
#52 := (iff #42 #42)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 #42)
#45 := (iff #39 #36)
#48 := (iff #45 #42)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#47 := [monotonicity #41 #38]: #46
#51 := [trans #47 #49]: #50
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#54 := [monotonicity #44 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
6d227e1b0585e5b365b0d07f07d7c5708cbc3115 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (iff #9 #10)
#12 := (not #11)
#13 := (not #12)
#59 := (iff #13 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#52 := (iff #12 true)
#47 := (not false)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 false)
#34 := (= f1 f3)
#37 := (not #34)
#40 := (iff #34 #37)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #36 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#33 := [asserted]: #13
[mp #33 #60]: false
unsat
183781528451fe65de60bc2d2e22c1d75fff00de 60 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (not #11)
#15 := (implies #13 #14)
#12 := (implies #9 #11)
#16 := (iff #12 #15)
#17 := (not #16)
#77 := (iff #17 false)
#1 := true
#72 := (not true)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #17 #72)
#70 := (iff #16 true)
#41 := (= f1 f4)
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#65 := (iff #48 #48)
#68 := (iff #65 true)
#69 := [rewrite]: #68
#66 := (iff #16 #65)
#63 := (iff #15 #48)
#53 := (not #41)
#58 := (implies #53 #47)
#61 := (iff #58 #48)
#62 := [rewrite]: #61
#59 := (iff #15 #58)
#56 := (iff #14 #47)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#57 := [monotonicity #40]: #56
#54 := (iff #13 #53)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#55 := [monotonicity #43]: #54
#60 := [monotonicity #55 #57]: #59
#64 := [trans #60 #62]: #63
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#67 := [monotonicity #52 #64]: #66
#71 := [trans #67 #69]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#37 := [asserted]: #17
[mp #37 #78]: false
unsat
8a2f295cb26eb802daa0916270c630d0aae6a230 72 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (iff #9 #9)
#11 := (iff #9 #10)
#12 := (iff #9 #11)
#13 := (iff #9 #12)
#14 := (iff #9 #13)
#15 := (iff #9 #14)
#16 := (iff #9 #15)
#17 := (iff #9 #16)
#18 := (iff #9 #17)
#19 := (not #18)
#90 := (iff #19 false)
#1 := true
#85 := (not true)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #19 #85)
#83 := (iff #18 true)
#40 := (= f1 f3)
#43 := (iff #40 #40)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#81 := (iff #18 #43)
#79 := (iff #17 #40)
#50 := (iff #40 true)
#53 := (iff #50 #40)
#54 := [rewrite]: #53
#77 := (iff #17 #50)
#75 := (iff #16 true)
#73 := (iff #16 #43)
#71 := (iff #15 #40)
#69 := (iff #15 #50)
#67 := (iff #14 true)
#65 := (iff #14 #43)
#63 := (iff #13 #40)
#61 := (iff #13 #50)
#59 := (iff #12 true)
#57 := (iff #12 #43)
#55 := (iff #11 #40)
#51 := (iff #11 #50)
#48 := (iff #10 true)
#44 := (iff #10 #43)
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #42 #49]: #51
#56 := [trans #52 #54]: #55
#58 := [monotonicity #42 #56]: #57
#60 := [trans #58 #47]: #59
#62 := [monotonicity #42 #60]: #61
#64 := [trans #62 #54]: #63
#66 := [monotonicity #42 #64]: #65
#68 := [trans #66 #47]: #67
#70 := [monotonicity #42 #68]: #69
#72 := [trans #70 #54]: #71
#74 := [monotonicity #42 #72]: #73
#76 := [trans #74 #47]: #75
#78 := [monotonicity #42 #76]: #77
#80 := [trans #78 #54]: #79
#82 := [monotonicity #42 #80]: #81
#84 := [trans #82 #47]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#39 := [asserted]: #19
[mp #39 #91]: false
unsat
1c44d521ac456bc35b48a603c12488d178412b54 151 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#44 := (= f1 f4)
decl f5 :: S1
#12 := f5
#47 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#50 := (ite #41 #44 #47)
#67 := (or #41 #47)
#94 := (not #67)
#56 := (not #41)
#57 := (or #56 #44)
#93 := (not #57)
#95 := (or #93 #94)
#96 := (not #95)
#153 := [hypothesis]: #96
#133 := (or #95 #67)
#134 := [def-axiom]: #133
#154 := [unit-resolution #134 #153]: #67
#81 := (not #50)
#144 := (or #81 #95)
#103 := (iff #50 #95)
#72 := (and #57 #67)
#82 := (iff #72 #81)
#106 := (iff #82 #103)
#98 := (iff #95 #50)
#104 := (iff #98 #103)
#105 := [rewrite]: #104
#101 := (iff #82 #98)
#88 := (iff #96 #81)
#99 := (iff #88 #98)
#100 := [rewrite]: #99
#90 := (iff #82 #88)
#91 := (iff #72 #96)
#92 := [rewrite]: #91
#97 := [monotonicity #92]: #90
#102 := [trans #97 #100]: #101
#107 := [trans #102 #105]: #106
#13 := (= f5 f1)
#9 := (= f3 f1)
#16 := (not #9)
#17 := (implies #16 #13)
#11 := (= f4 f1)
#15 := (implies #9 #11)
#18 := (and #15 #17)
#14 := (ite #9 #11 #13)
#19 := (iff #14 #18)
#20 := (not #19)
#85 := (iff #20 #82)
#75 := (iff #50 #72)
#78 := (not #75)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #20 #78)
#76 := (iff #19 #75)
#73 := (iff #18 #72)
#70 := (iff #17 #67)
#64 := (implies #56 #47)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #17 #64)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#62 := (iff #16 #56)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#63 := [monotonicity #43]: #62
#66 := [monotonicity #63 #49]: #65
#71 := [trans #66 #69]: #70
#60 := (iff #15 #57)
#53 := (implies #41 #44)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #15 #53)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#55 := [monotonicity #43 #46]: #54
#61 := [trans #55 #59]: #60
#74 := [monotonicity #61 #71]: #73
#51 := (iff #14 #50)
#52 := [monotonicity #43 #46 #49]: #51
#77 := [monotonicity #52 #74]: #76
#80 := [monotonicity #77]: #79
#86 := [trans #80 #84]: #85
#40 := [asserted]: #20
#89 := [mp #40 #86]: #82
#108 := [mp #89 #107]: #103
#137 := (not #103)
#142 := (or #81 #95 #137)
#143 := [def-axiom]: #142
#145 := [unit-resolution #143 #108]: #144
#155 := [unit-resolution #145 #153]: #81
#131 := (or #95 #57)
#132 := [def-axiom]: #131
#156 := [unit-resolution #132 #153]: #57
#151 := (or #56 #93 #50)
#146 := [hypothesis]: #57
#147 := [hypothesis]: #41
#113 := (not #44)
#148 := [hypothesis]: #81
#114 := (or #50 #56 #113)
#115 := [def-axiom]: #114
#149 := [unit-resolution #115 #147 #148]: #113
#123 := (or #93 #56 #44)
#124 := [def-axiom]: #123
#150 := [unit-resolution #124 #149 #147 #146]: false
#152 := [lemma #150]: #151
#157 := [unit-resolution #152 #156 #155]: #56
#116 := (not #47)
#117 := (or #50 #41 #116)
#118 := [def-axiom]: #117
#158 := [unit-resolution #118 #157 #155]: #116
#129 := (or #94 #41 #47)
#130 := [def-axiom]: #129
#159 := [unit-resolution #130 #158 #157 #154]: false
#160 := [lemma #159]: #95
#140 := (or #50 #96)
#138 := (or #50 #96 #137)
#139 := [def-axiom]: #138
#141 := [unit-resolution #139 #108]: #140
#163 := [unit-resolution #141 #160]: #50
#161 := [hypothesis]: #56
#119 := (or #57 #41)
#120 := [def-axiom]: #119
#162 := [unit-resolution #120 #161]: #57
#111 := (or #81 #41 #47)
#112 := [def-axiom]: #111
#164 := [unit-resolution #112 #161 #163]: #47
#127 := (or #67 #116)
#128 := [def-axiom]: #127
#165 := [unit-resolution #128 #164]: #67
#135 := (or #96 #93 #94)
#136 := [def-axiom]: #135
#166 := [unit-resolution #136 #165 #162 #160]: false
#167 := [lemma #166]: #41
#109 := (or #81 #56 #44)
#110 := [def-axiom]: #109
#168 := [unit-resolution #110 #167 #163]: #44
#125 := (or #67 #56)
#126 := [def-axiom]: #125
#169 := [unit-resolution #126 #167]: #67
#170 := [unit-resolution #136 #169 #160]: #93
#121 := (or #57 #113)
#122 := [def-axiom]: #121
[unit-resolution #122 #170 #168]: false
unsat
643b93e1a561bfd028bc3792417378d161ef2e8a 66 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#36 := (= f1 f3)
#54 := (not #36)
#90 := [hypothesis]: #36
decl f4 :: S1
#10 := f4
#39 := (= f1 f4)
#45 := (not #39)
#46 := (or #36 #45)
#72 := (or #46 #54)
#73 := [def-axiom]: #72
#91 := [unit-resolution #73 #90]: #46
#70 := (not #46)
#92 := (or #54 #70)
#55 := (or #54 #39)
#60 := (ite #36 #46 #55)
#63 := (not #60)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (implies #9 #11)
#12 := (implies #11 #9)
#14 := (ite #9 #12 #13)
#15 := (not #14)
#64 := (iff #15 #63)
#61 := (iff #14 #60)
#58 := (iff #13 #55)
#51 := (implies #36 #39)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #13 #51)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#53 := [monotonicity #38 #41]: #52
#59 := [trans #53 #57]: #58
#49 := (iff #12 #46)
#42 := (implies #39 #36)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #12 #42)
#44 := [monotonicity #41 #38]: #43
#50 := [trans #44 #48]: #49
#62 := [monotonicity #38 #50 #59]: #61
#65 := [monotonicity #62]: #64
#35 := [asserted]: #15
#68 := [mp #35 #65]: #63
#86 := (or #60 #54 #70)
#87 := [def-axiom]: #86
#93 := [unit-resolution #87 #68]: #92
#94 := [unit-resolution #93 #91 #90]: false
#95 := [lemma #94]: #54
#69 := (or #55 #36)
#76 := [def-axiom]: #69
#96 := [unit-resolution #76 #95]: #55
#79 := (not #55)
#97 := (or #36 #79)
#88 := (or #60 #36 #79)
#89 := [def-axiom]: #88
#98 := [unit-resolution #89 #68]: #97
[unit-resolution #98 #96 #95]: false
unsat
8a97d35ae3bf1f06142ca3c295d9a54474a4bbad 67 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#18 := (ite #11 #14 #16)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#19 := (ite #9 #14 #18)
#12 := (or #9 #11)
#17 := (ite #12 #14 #16)
#20 := (iff #17 #19)
#21 := (not #20)
#82 := (iff #21 false)
#1 := true
#77 := (not true)
#80 := (iff #77 false)
#81 := [rewrite]: #80
#78 := (iff #21 #77)
#75 := (iff #20 true)
#54 := (= f1 f6)
#51 := (= f1 f5)
#45 := (= f1 f4)
#42 := (= f1 f3)
#48 := (or #42 #45)
#57 := (ite #48 #51 #54)
#70 := (iff #57 #57)
#73 := (iff #70 true)
#74 := [rewrite]: #73
#71 := (iff #20 #70)
#68 := (iff #19 #57)
#60 := (ite #45 #51 #54)
#63 := (ite #42 #51 #60)
#66 := (iff #63 #57)
#67 := [rewrite]: #66
#64 := (iff #19 #63)
#61 := (iff #18 #60)
#55 := (iff #16 #54)
#56 := [rewrite]: #55
#52 := (iff #14 #51)
#53 := [rewrite]: #52
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#62 := [monotonicity #47 #53 #56]: #61
#43 := (iff #9 #42)
#44 := [rewrite]: #43
#65 := [monotonicity #44 #53 #62]: #64
#69 := [trans #65 #67]: #68
#58 := (iff #17 #57)
#49 := (iff #12 #48)
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #53 #56]: #58
#72 := [monotonicity #59 #69]: #71
#76 := [trans #72 #74]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#41 := [asserted]: #21
[mp #41 #83]: false
unsat
d57ccd1bb5c7d6c6ba7796601f6907fb7769428b 67 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#18 := (ite #11 #14 #16)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#19 := (ite #9 #18 #16)
#12 := (and #9 #11)
#17 := (ite #12 #14 #16)
#20 := (iff #17 #19)
#21 := (not #20)
#82 := (iff #21 false)
#1 := true
#77 := (not true)
#80 := (iff #77 false)
#81 := [rewrite]: #80
#78 := (iff #21 #77)
#75 := (iff #20 true)
#54 := (= f1 f6)
#51 := (= f1 f5)
#45 := (= f1 f4)
#42 := (= f1 f3)
#48 := (and #42 #45)
#57 := (ite #48 #51 #54)
#70 := (iff #57 #57)
#73 := (iff #70 true)
#74 := [rewrite]: #73
#71 := (iff #20 #70)
#68 := (iff #19 #57)
#60 := (ite #45 #51 #54)
#63 := (ite #42 #60 #54)
#66 := (iff #63 #57)
#67 := [rewrite]: #66
#64 := (iff #19 #63)
#55 := (iff #16 #54)
#56 := [rewrite]: #55
#61 := (iff #18 #60)
#52 := (iff #14 #51)
#53 := [rewrite]: #52
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#62 := [monotonicity #47 #53 #56]: #61
#43 := (iff #9 #42)
#44 := [rewrite]: #43
#65 := [monotonicity #44 #62 #56]: #64
#69 := [trans #65 #67]: #68
#58 := (iff #17 #57)
#49 := (iff #12 #48)
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #53 #56]: #58
#72 := [monotonicity #59 #69]: #71
#76 := [trans #72 #74]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#41 := [asserted]: #21
[mp #41 #83]: false
unsat
cc825ea9100726025c75fca6a38c4c3107dd3158 181 0
#2 := false
decl f6 :: S1
#14 := f6
decl f1 :: S1
#4 := f1
#53 := (= f1 f6)
decl f5 :: S1
#12 := f5
#50 := (= f1 f5)
decl f4 :: S1
#10 := f4
#47 := (= f1 f4)
#56 := (ite #47 #50 #53)
decl f3 :: S1
#8 := f3
#44 := (= f1 f3)
#62 := (not #44)
#63 := (or #62 #56)
#101 := (not #63)
#176 := [hypothesis]: #101
#151 := (or #63 #44)
#152 := [def-axiom]: #151
#177 := [unit-resolution #152 #176]: #44
#87 := (or #62 #53)
#79 := (or #62 #50)
#71 := (or #62 #47)
#92 := (ite #71 #79 #87)
#160 := (or #92 #63)
#102 := (iff #92 #101)
#15 := (= f6 f1)
#9 := (= f3 f1)
#20 := (implies #9 #15)
#13 := (= f5 f1)
#19 := (implies #9 #13)
#11 := (= f4 f1)
#18 := (implies #9 #11)
#21 := (ite #18 #19 #20)
#16 := (ite #11 #13 #15)
#17 := (implies #9 #16)
#22 := (iff #17 #21)
#23 := (not #22)
#105 := (iff #23 #102)
#95 := (iff #63 #92)
#98 := (not #95)
#103 := (iff #98 #102)
#104 := [rewrite]: #103
#99 := (iff #23 #98)
#96 := (iff #22 #95)
#93 := (iff #21 #92)
#90 := (iff #20 #87)
#84 := (implies #44 #53)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #20 #84)
#54 := (iff #15 #53)
#55 := [rewrite]: #54
#45 := (iff #9 #44)
#46 := [rewrite]: #45
#86 := [monotonicity #46 #55]: #85
#91 := [trans #86 #89]: #90
#82 := (iff #19 #79)
#76 := (implies #44 #50)
#80 := (iff #76 #79)
#81 := [rewrite]: #80
#77 := (iff #19 #76)
#51 := (iff #13 #50)
#52 := [rewrite]: #51
#78 := [monotonicity #46 #52]: #77
#83 := [trans #78 #81]: #82
#74 := (iff #18 #71)
#68 := (implies #44 #47)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #18 #68)
#48 := (iff #11 #47)
#49 := [rewrite]: #48
#70 := [monotonicity #46 #49]: #69
#75 := [trans #70 #73]: #74
#94 := [monotonicity #75 #83 #91]: #93
#66 := (iff #17 #63)
#59 := (implies #44 #56)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #17 #59)
#57 := (iff #16 #56)
#58 := [monotonicity #49 #52 #55]: #57
#61 := [monotonicity #46 #58]: #60
#67 := [trans #61 #65]: #66
#97 := [monotonicity #67 #94]: #96
#100 := [monotonicity #97]: #99
#106 := [trans #100 #104]: #105
#43 := [asserted]: #23
#109 := [mp #43 #106]: #102
#157 := (not #102)
#158 := (or #92 #63 #157)
#159 := [def-axiom]: #158
#161 := [unit-resolution #159 #109]: #160
#178 := [unit-resolution #161 #176]: #92
#112 := (not #71)
#142 := (not #56)
#153 := (or #63 #142)
#154 := [def-axiom]: #153
#179 := [unit-resolution #154 #176]: #142
#133 := (not #92)
#174 := (or #112 #56 #62 #133)
#166 := [hypothesis]: #142
#167 := [hypothesis]: #44
#168 := [hypothesis]: #71
#108 := (or #112 #62 #47)
#110 := [def-axiom]: #108
#169 := [unit-resolution #110 #168 #167]: #47
#170 := [hypothesis]: #92
#134 := (or #133 #112 #79)
#135 := [def-axiom]: #134
#171 := [unit-resolution #135 #168 #170]: #79
#122 := (not #79)
#123 := (or #122 #62 #50)
#124 := [def-axiom]: #123
#172 := [unit-resolution #124 #171 #167]: #50
#119 := (not #50)
#115 := (not #47)
#147 := (or #56 #115 #119)
#148 := [def-axiom]: #147
#173 := [unit-resolution #148 #172 #169 #166]: false
#175 := [lemma #173]: #174
#180 := [unit-resolution #175 #179 #177 #178]: #112
#136 := (or #133 #71 #87)
#137 := [def-axiom]: #136
#181 := [unit-resolution #137 #180 #178]: #87
#127 := (not #53)
#116 := (or #71 #115)
#111 := [def-axiom]: #116
#182 := [unit-resolution #111 #180]: #115
#149 := (or #56 #47 #127)
#150 := [def-axiom]: #149
#183 := [unit-resolution #150 #182 #179]: #127
#130 := (not #87)
#131 := (or #130 #62 #53)
#132 := [def-axiom]: #131
#184 := [unit-resolution #132 #183 #181 #177]: false
#185 := [lemma #184]: #63
#164 := (or #133 #101)
#162 := (or #133 #101 #157)
#163 := [def-axiom]: #162
#165 := [unit-resolution #163 #109]: #164
#186 := [unit-resolution #165 #185]: #133
#187 := [hypothesis]: #62
#113 := (or #71 #44)
#114 := [def-axiom]: #113
#188 := [unit-resolution #114 #187]: #71
#117 := (or #79 #44)
#118 := [def-axiom]: #117
#189 := [unit-resolution #118 #187]: #79
#138 := (or #92 #112 #122)
#139 := [def-axiom]: #138
#190 := [unit-resolution #139 #189 #188 #186]: false
#191 := [lemma #190]: #44
#155 := (or #101 #62 #56)
#156 := [def-axiom]: #155
#194 := [unit-resolution #156 #191 #185]: #56
#192 := [hypothesis]: #112
#140 := (or #92 #71 #130)
#141 := [def-axiom]: #140
#193 := [unit-resolution #141 #192 #186]: #130
#195 := [unit-resolution #111 #192]: #115
#145 := (or #142 #47 #53)
#146 := [def-axiom]: #145
#196 := [unit-resolution #146 #195 #194]: #53
#128 := (or #87 #127)
#129 := [def-axiom]: #128
#197 := [unit-resolution #129 #196 #193]: false
#198 := [lemma #197]: #71
#199 := [unit-resolution #110 #198 #191]: #47
#200 := [unit-resolution #139 #198 #186]: #122
#120 := (or #79 #119)
#121 := [def-axiom]: #120
#201 := [unit-resolution #121 #200]: #119
#143 := (or #142 #115 #50)
#144 := [def-axiom]: #143
[unit-resolution #144 #201 #199 #194]: false
unsat
7ec9b76ddbd0690a0ae0e84f7aac32369b67562e 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (ite #9 #9 #10)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := (= f1 f3)
#36 := (not #33)
#39 := (ite #33 #33 #36)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #35 #35 #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
9a59901175f7c3f42e5be82db6a8df07aaf0199e 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (ite #10 #10 #9)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := (= f1 f3)
#36 := (not #33)
#39 := (ite #36 #36 #33)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#37 := (iff #10 #36)
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38 #38 #35]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
6758e928b7c8973f924b8c2c252430960344c442 18 0
#2 := false
decl f3 :: S2
#8 := f3
#9 := (= f3 f3)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
5cd924cc739389c12253492d422dfc6ac2f6d405 29 0
#2 := false
decl f3 :: S2
#8 := f3
decl f4 :: S2
#9 := f4
#11 := (= f4 f3)
#10 := (= f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (implies #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (iff #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
e82612aca334f7d47bdb5a90fdc8f5dfc017ae67 34 0
#2 := false
decl f5 :: S2
#11 := f5
decl f3 :: S2
#8 := f3
#14 := (= f3 f5)
decl f4 :: S2
#9 := f4
#12 := (= f4 f5)
#61 := (iff #12 #14)
#59 := (iff #14 #12)
#10 := (= f3 f4)
#13 := (and #10 #12)
#37 := (not #13)
#38 := (or #37 #14)
#41 := (not #38)
#15 := (implies #13 #14)
#16 := (not #15)
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#36 := [asserted]: #16
#46 := [mp #36 #43]: #41
#44 := [not-or-elim #46]: #13
#45 := [and-elim #44]: #10
#60 := [monotonicity #45]: #59
#62 := [symm #60]: #61
#47 := [and-elim #44]: #12
#57 := [mp #47 #62]: #14
#48 := (not #14)
#49 := [not-or-elim #46]: #48
[unit-resolution #49 #57]: false
unsat
450aaafd6173c5e6036fdec198da2898811d4211 27 0
#2 := false
decl f5 :: (-> S2 S2)
decl f4 :: S2
#9 := f4
#12 := (f5 f4)
decl f3 :: S2
#8 := f3
#11 := (f5 f3)
#13 := (= #11 #12)
#10 := (= f3 f4)
#36 := (not #10)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #10 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #10
#54 := [monotonicity #43]: #13
#44 := (not #13)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #54]: false
unsat
268885483340f29776e2c235da393d33273743e0 31 0
#2 := false
decl f5 :: (-> S2 S2 S3)
decl f3 :: S2
#8 := f3
decl f4 :: S2
#9 := f4
#12 := (f5 f4 f3)
#11 := (f5 f3 f4)
#13 := (= #11 #12)
#56 := (= #12 #11)
#10 := (= f3 f4)
#36 := (not #10)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #10 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #10
#54 := (= f4 f3)
#55 := [symm #43]: #54
#57 := [monotonicity #55 #43]: #56
#52 := [symm #57]: #13
#44 := (not #13)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #52]: false
unsat
b23fdcb8ecc896d99515b950a22874e320c73a5e 63 0
#2 := false
decl f3 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#49 := (= f4 #9)
#10 := (f3 #9)
#12 := (f3 #10)
#81 := (= #12 #9)
#79 := (= #9 #12)
#40 := (= f4 #10)
#13 := (f3 #12)
#14 := (f3 #13)
#43 := (= f4 #14)
#46 := (and #40 #43)
#55 := (not #46)
#56 := (or #55 #49)
#61 := (not #56)
#17 := (= #9 f4)
#15 := (= #14 f4)
#11 := (= #10 f4)
#16 := (and #11 #15)
#18 := (implies #16 #17)
#19 := (not #18)
#62 := (iff #19 #61)
#59 := (iff #18 #56)
#52 := (implies #46 #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #18 #52)
#50 := (iff #17 #49)
#51 := [rewrite]: #50
#47 := (iff #16 #46)
#44 := (iff #15 #43)
#45 := [rewrite]: #44
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#60 := [trans #54 #58]: #59
#63 := [monotonicity #60]: #62
#39 := [asserted]: #19
#66 := [mp #39 #63]: #61
#64 := [not-or-elim #66]: #46
#65 := [and-elim #64]: #40
#80 := [monotonicity #65]: #79
#82 := [symm #80]: #81
#84 := (= f4 #12)
#72 := (= #14 #12)
#73 := (= #12 #14)
#75 := (= #10 #13)
#77 := (= #13 #10)
#78 := [monotonicity #82]: #77
#76 := [symm #78]: #75
#74 := [monotonicity #76]: #73
#83 := [symm #74]: #72
#67 := [and-elim #64]: #43
#85 := [trans #67 #83]: #84
#86 := [trans #85 #82]: #49
#68 := (not #49)
#69 := [not-or-elim #66]: #68
[unit-resolution #69 #86]: false
unsat
bdf634420f64829e899fdad55dc280602f81f222 176 0
#2 := false
decl f5 :: S2
#11 := f5
decl f4 :: S2
#10 := f4
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#43 := (= f1 f3)
#46 := (ite #43 f4 f5)
decl f6 :: S2
#13 := f6
#52 := (= f6 #46)
#114 := (= f5 #46)
#60 := (not #43)
#15 := (= f4 f6)
#172 := (iff #52 #15)
#170 := (iff #15 #52)
#49 := (= #46 f6)
#53 := (iff #49 #52)
#169 := [commutativity]: #53
#167 := (iff #15 #49)
#113 := (= f4 #46)
#161 := [hypothesis]: #43
#115 := (or #60 #113)
#116 := [def-axiom]: #115
#166 := [unit-resolution #116 #161]: #113
#168 := [monotonicity #166]: #167
#171 := [trans #168 #169]: #170
#173 := [symm #171]: #172
#18 := (= f5 f6)
#71 := (or #18 #43)
#98 := (not #71)
#61 := (or #15 #60)
#97 := (not #61)
#99 := (or #97 #98)
#178 := (or #99 #60)
#119 := (not #15)
#85 := (not #52)
#174 := (iff #85 #119)
#175 := [monotonicity #173]: #174
#100 := (not #99)
#162 := [hypothesis]: #100
#146 := (or #85 #99)
#107 := (iff #52 #99)
#76 := (and #61 #71)
#86 := (iff #76 #85)
#110 := (iff #86 #107)
#102 := (iff #99 #52)
#108 := (iff #102 #107)
#109 := [rewrite]: #108
#105 := (iff #86 #102)
#92 := (iff #100 #85)
#103 := (iff #92 #102)
#104 := [rewrite]: #103
#94 := (iff #86 #92)
#95 := (iff #76 #100)
#96 := [rewrite]: #95
#101 := [monotonicity #96]: #94
#106 := [trans #101 #104]: #105
#111 := [trans #106 #109]: #110
#9 := (= f3 f1)
#17 := (not #9)
#19 := (implies #17 #18)
#16 := (implies #9 #15)
#20 := (and #16 #19)
#12 := (ite #9 f4 f5)
#14 := (= #12 f6)
#21 := (iff #14 #20)
#22 := (not #21)
#89 := (iff #22 #86)
#79 := (iff #52 #76)
#82 := (not #79)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #22 #82)
#80 := (iff #21 #79)
#77 := (iff #20 #76)
#74 := (iff #19 #71)
#68 := (implies #60 #18)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #19 #68)
#66 := (iff #17 #60)
#44 := (iff #9 #43)
#45 := [rewrite]: #44
#67 := [monotonicity #45]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#64 := (iff #16 #61)
#57 := (implies #43 #15)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #16 #57)
#59 := [monotonicity #45]: #58
#65 := [trans #59 #63]: #64
#78 := [monotonicity #65 #75]: #77
#55 := (iff #14 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (= #12 #46)
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#81 := [monotonicity #56 #78]: #80
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#42 := [asserted]: #22
#93 := [mp #42 #90]: #86
#112 := [mp #93 #111]: #107
#139 := (not #107)
#144 := (or #85 #99 #139)
#145 := [def-axiom]: #144
#147 := [unit-resolution #145 #112]: #146
#165 := [unit-resolution #147 #162]: #85
#176 := [mp #165 #175]: #119
#133 := (or #99 #61)
#134 := [def-axiom]: #133
#163 := [unit-resolution #134 #162]: #61
#124 := (or #97 #15 #60)
#125 := [def-axiom]: #124
#164 := [unit-resolution #125 #163 #161]: #15
#177 := [unit-resolution #164 #176]: false
#179 := [lemma #177]: #178
#180 := [unit-resolution #179 #161]: #99
#142 := (or #52 #100)
#140 := (or #52 #100 #139)
#141 := [def-axiom]: #140
#143 := [unit-resolution #141 #112]: #142
#183 := [unit-resolution #143 #180]: #52
#184 := [mp #183 #173]: #15
#156 := (iff #114 #18)
#154 := (iff #18 #114)
#148 := [hypothesis]: #98
#135 := (or #99 #71)
#136 := [def-axiom]: #135
#152 := [unit-resolution #136 #148]: #99
#153 := [unit-resolution #143 #152]: #52
#155 := [monotonicity #153]: #154
#157 := [symm #155]: #156
#129 := (or #71 #60)
#130 := [def-axiom]: #129
#150 := [unit-resolution #130 #148]: #60
#117 := (or #43 #114)
#118 := [def-axiom]: #117
#151 := [unit-resolution #118 #150]: #114
#158 := [mp #151 #157]: #18
#126 := (not #18)
#127 := (or #71 #126)
#128 := [def-axiom]: #127
#149 := [unit-resolution #128 #148]: #126
#159 := [unit-resolution #149 #158]: false
#160 := [lemma #159]: #71
#137 := (or #100 #97 #98)
#138 := [def-axiom]: #137
#181 := [unit-resolution #138 #180 #160]: #97
#120 := (or #61 #119)
#121 := [def-axiom]: #120
#182 := [unit-resolution #121 #181]: #119
#185 := [unit-resolution #182 #184]: false
#186 := [lemma #185]: #60
#190 := [unit-resolution #118 #186]: #114
#192 := (= f6 f5)
#131 := (or #98 #18 #43)
#132 := [def-axiom]: #131
#191 := [unit-resolution #132 #186 #160]: #18
#193 := [symm #191]: #192
#194 := [trans #193 #190]: #52
#122 := (or #61 #43)
#123 := [def-axiom]: #122
#187 := [unit-resolution #123 #186]: #61
#188 := [unit-resolution #138 #187 #160]: #100
#189 := [unit-resolution #147 #188]: #85
[unit-resolution #189 #194]: false
unsat
7caf561e8dba712e3313b4433e2a7d62033d4cc1 36 0
#2 := false
decl f5 :: S2
#10 := f5
decl f3 :: S2
#8 := f3
#12 := (= f3 f5)
#13 := (not #12)
decl f4 :: S2
#9 := f4
#11 := (distinct f3 f4 f5)
#36 := (not #11)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #11 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#44 := [not-or-elim #45]: #12
#55 := (= f4 f5)
#56 := (not #55)
#53 := (= f3 f4)
#54 := (not #53)
#51 := (and #54 #13 #56)
#43 := [not-or-elim #45]: #11
#61 := (or #36 #51)
#62 := [def-axiom]: #61
#65 := [unit-resolution #62 #43]: #51
#52 := (not #51)
#47 := (or #52 #13)
#48 := [def-axiom]: #47
[unit-resolution #48 #65 #44]: false
unsat
5d166c0e6b2d72dafe17b5b5de7117e70ffd077f 77 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#84 := (= f3 f4)
decl f6 :: S2
#12 := f6
#39 := (= f4 f6)
#103 := (iff #39 #84)
#101 := (iff #84 #39)
#13 := (= f6 f4)
#40 := (iff #13 #39)
#100 := [commutativity]: #40
#98 := (iff #84 #13)
#14 := (= f3 f6)
#45 := (not #39)
#15 := (not #14)
decl f5 :: S2
#10 := f5
#11 := (distinct f3 f4 f5)
#54 := (not #11)
#63 := (or #54 #15 #45)
#66 := (not #63)
#16 := (implies #13 #15)
#17 := (implies #11 #16)
#18 := (not #17)
#69 := (iff #18 #66)
#46 := (or #15 #45)
#55 := (or #54 #46)
#60 := (not #55)
#67 := (iff #60 #66)
#64 := (iff #55 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#61 := (iff #18 #60)
#58 := (iff #17 #55)
#51 := (implies #11 #46)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #17 #51)
#49 := (iff #16 #46)
#42 := (implies #39 #15)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #16 #42)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#59 := [trans #53 #57]: #58
#62 := [monotonicity #59]: #61
#70 := [trans #62 #68]: #69
#38 := [asserted]: #18
#71 := [mp #38 #70]: #66
#73 := [not-or-elim #71]: #14
#99 := [monotonicity #73]: #98
#102 := [trans #99 #100]: #101
#104 := [symm #102]: #103
#74 := [not-or-elim #71]: #39
#105 := [mp #74 #104]: #84
#85 := (not #84)
#82 := (= f4 f5)
#83 := (not #82)
#86 := (= f3 f5)
#87 := (not #86)
#80 := (and #85 #87 #83)
#72 := [not-or-elim #71]: #11
#92 := (or #54 #80)
#93 := [def-axiom]: #92
#96 := [unit-resolution #93 #72]: #80
#81 := (not #80)
#78 := (or #81 #85)
#79 := [def-axiom]: #78
#97 := [unit-resolution #79 #96]: #85
[unit-resolution #97 #105]: false
unsat
533428288e5c80da242f85265bdf0f4abb151e65 28 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#10 := (distinct f3 f4 f3 f4)
#11 := (not #10)
#12 := (not #11)
#47 := (iff #12 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #12 #42)
#40 := (iff #11 true)
#35 := (not false)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #11 #35)
#33 := (iff #10 false)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#32 := [asserted]: #12
[mp #32 #48]: false
unsat
017c0a2408f982087afab8f6a30c931842322a6a 38 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#11 := (distinct f3 f4)
#12 := (not #11)
#10 := (= f3 f4)
#13 := (implies #10 #12)
#14 := (not #13)
#57 := (iff #14 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 true)
#45 := (implies #10 #10)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#43 := (iff #12 #10)
#35 := (not #10)
#38 := (not #35)
#41 := (iff #38 #10)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#34 := [asserted]: #14
[mp #34 #58]: false
unsat
3d691d698b1a15f8a77e4e6f63eb68946744774b 40 0
#2 := false
decl f5 :: S2
#11 := f5
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#14 := (distinct f3 f4 f5)
#15 := (not #14)
#12 := (= f3 f5)
#10 := (= f3 f4)
#13 := (and #10 #12)
#38 := (not #13)
#39 := (or #38 #15)
#42 := (not #39)
#16 := (implies #13 #15)
#17 := (not #16)
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#37 := [asserted]: #17
#47 := [mp #37 #44]: #42
#49 := [not-or-elim #47]: #14
#61 := (= f4 f5)
#62 := (not #61)
#60 := (not #12)
#59 := (not #10)
#57 := (and #59 #60 #62)
#58 := (not #57)
#45 := [not-or-elim #47]: #13
#46 := [and-elim #45]: #10
#55 := (or #58 #59)
#56 := [def-axiom]: #55
#69 := [unit-resolution #56 #46]: #58
#65 := (or #15 #57)
#66 := [def-axiom]: #65
#70 := [unit-resolution #66 #69]: #15
[unit-resolution #70 #49]: false
unsat
91ca794ae2ea70dac95d2e0e4e034ae7338238ca 33 0
#2 := false
decl f3 :: S2
#8 := f3
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f6 :: S2
#11 := f6
#13 := (distinct f6 f4 f5 f3)
#12 := (distinct f3 f4 f5 f6)
#14 := (implies #12 #13)
#15 := (not #14)
#50 := (iff #15 false)
#1 := true
#45 := (not true)
#48 := (iff #45 false)
#49 := [rewrite]: #48
#46 := (iff #15 #45)
#43 := (iff #14 true)
#38 := (implies #12 #12)
#41 := (iff #38 true)
#42 := [rewrite]: #41
#39 := (iff #14 #38)
#36 := (iff #13 #12)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#35 := [asserted]: #15
[mp #35 #51]: false
unsat
213abf865430cd165dad7b08270c63f2d0321573 91 0
#2 := false
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#13 := (distinct f3 f4 f5)
#70 := (= f4 f5)
#71 := (not #70)
#66 := (= f3 f5)
#67 := (not #66)
#64 := (= f3 f4)
#65 := (not #64)
#96 := (and #65 #67 #71)
decl f6 :: S2
#11 := f6
#74 := (= f5 f6)
#75 := (not #74)
#72 := (= f4 f6)
#73 := (not #72)
#68 := (= f3 f6)
#69 := (not #68)
#76 := (and #65 #67 #69 #71 #73 #75)
#12 := (distinct f3 f4 f5 f6)
#14 := (distinct f4 f5 f6)
#15 := (and #13 #14)
#38 := (not #12)
#39 := (or #38 #15)
#42 := (not #39)
#16 := (implies #12 #15)
#17 := (not #16)
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#37 := [asserted]: #17
#47 := [mp #37 #44]: #42
#45 := [not-or-elim #47]: #12
#92 := (or #38 #76)
#93 := [def-axiom]: #92
#124 := [unit-resolution #93 #45]: #76
#77 := (not #76)
#78 := (or #77 #65)
#79 := [def-axiom]: #78
#125 := [unit-resolution #79 #124]: #65
#84 := (or #77 #71)
#85 := [def-axiom]: #84
#126 := [unit-resolution #85 #124]: #71
#80 := (or #77 #67)
#81 := [def-axiom]: #80
#127 := [unit-resolution #81 #124]: #67
#104 := (or #96 #64 #66 #70)
#105 := [def-axiom]: #104
#128 := [unit-resolution #105 #127 #126 #125]: #96
#97 := (not #96)
#108 := (or #13 #97)
#109 := [def-axiom]: #108
#129 := [unit-resolution #109 #128]: #13
#110 := (and #71 #73 #75)
#88 := (or #77 #75)
#89 := [def-axiom]: #88
#130 := [unit-resolution #89 #124]: #75
#86 := (or #77 #73)
#87 := [def-axiom]: #86
#131 := [unit-resolution #87 #124]: #73
#118 := (or #110 #70 #72 #74)
#119 := [def-axiom]: #118
#132 := [unit-resolution #119 #131 #130 #126]: #110
#111 := (not #110)
#122 := (or #14 #111)
#123 := [def-axiom]: #122
#133 := [unit-resolution #123 #132]: #14
#57 := (not #14)
#56 := (not #13)
#58 := (or #56 #57)
#46 := (not #15)
#61 := (iff #46 #58)
#59 := (not #58)
#52 := (not #59)
#51 := (iff #52 #58)
#60 := [rewrite]: #51
#53 := (iff #46 #52)
#54 := (iff #15 #59)
#55 := [rewrite]: #54
#50 := [monotonicity #55]: #53
#62 := [trans #50 #60]: #61
#48 := [not-or-elim #47]: #46
#63 := [mp #48 #62]: #58
[unit-resolution #63 #133 #129]: false
unsat
f1809e8489f94ca6f5ab262d227412571fae6063 25 0
#2 := false
#8 := (:var 0 S2)
#9 := (= #8 #8)
#10 := (forall (vars (?v0 S2)) #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (forall (vars (?v0 S2)) true)
#37 := (iff #34 true)
#38 := [elim-unused]: #37
#35 := (iff #10 #34)
#32 := (iff #9 true)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
d955ec6b7cfeeee07c53113d44b234b0343ba998 34 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (iff #11 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := (= f1 #9)
#37 := (forall (vars (?v0 S2)) #34)
#40 := (iff #37 #37)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#36 := [rewrite]: #35
#39 := [quant-intro #36]: #38
#42 := [monotonicity #39 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
ac9cb8d0afa0ef87b47bcfca90097c8127bbb5a7 95 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#77 := ?v0!0
#78 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#79 := (= f1 #78)
#74 := (not #79)
decl ?v1!1 :: S2
#88 := ?v1!1
#89 := (f3 ?v1!1)
#90 := (= f1 #89)
#108 := (or #79 #90)
#111 := (not #108)
#114 := (and #79 #111)
#91 := (or #90 #79)
#92 := (not #91)
#85 := (not #74)
#98 := (and #85 #92)
#115 := (iff #98 #114)
#112 := (iff #92 #111)
#109 := (iff #91 #108)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#106 := (iff #85 #79)
#107 := [rewrite]: #106
#116 := [monotonicity #107 #113]: #115
#11 := (:var 1 S2)
#12 := (f3 #11)
#42 := (= f1 #12)
#8 := (:var 0 S2)
#9 := (f3 #8)
#39 := (= f1 #9)
#48 := (or #39 #42)
#53 := (forall (vars (?v1 S2)) #48)
#59 := (not #39)
#60 := (or #59 #53)
#65 := (forall (vars (?v0 S2)) #60)
#68 := (not #65)
#101 := (~ #68 #98)
#80 := (or #39 #79)
#72 := (forall (vars (?v1 S2)) #80)
#81 := (or #74 #72)
#82 := (not #81)
#99 := (~ #82 #98)
#93 := (not #72)
#94 := (~ #93 #92)
#95 := [sk]: #94
#86 := (~ #85 #85)
#87 := [refl]: #86
#100 := [nnf-neg #87 #95]: #99
#83 := (~ #68 #82)
#84 := [sk]: #83
#102 := [trans #84 #100]: #101
#10 := (= #9 f1)
#13 := (= #12 f1)
#14 := (or #13 #10)
#15 := (forall (vars (?v1 S2)) #14)
#16 := (implies #10 #15)
#17 := (forall (vars (?v0 S2)) #16)
#18 := (not #17)
#69 := (iff #18 #68)
#66 := (iff #17 #65)
#63 := (iff #16 #60)
#56 := (implies #39 #53)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#45 := (or #42 #39)
#49 := (iff #45 #48)
#50 := [rewrite]: #49
#46 := (iff #14 #45)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44 #41]: #46
#52 := [trans #47 #50]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #41 #55]: #57
#64 := [trans #58 #62]: #63
#67 := [quant-intro #64]: #66
#70 := [monotonicity #67]: #69
#38 := [asserted]: #18
#73 := [mp #38 #70]: #68
#103 := [mp~ #73 #102]: #98
#104 := [mp #103 #116]: #114
#117 := [and-elim #104]: #111
#118 := [not-or-elim #117]: #74
#105 := [and-elim #104]: #79
[unit-resolution #105 #118]: false
unsat
049ea7d2d96c9794ec9b3845824fa548d49c024b 296 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#664 := (pattern #9)
decl f1 :: S1
#4 := f1
#40 := (= f1 #9)
#671 := (forall (vars (?v0 S2)) (:pat #664) #40)
decl f4 :: (-> S2 S1)
#11 := (f4 #8)
#665 := (pattern #11)
#43 := (= f1 #11)
#679 := (forall (vars (?v0 S2)) (:pat #665) #43)
#684 := (not #679)
#676 := (not #671)
#687 := (or #676 #684)
#690 := (not #687)
#173 := (not #43)
#172 := (not #40)
#174 := (or #172 #173)
#175 := (not #174)
#666 := (forall (vars (?v0 S2)) (:pat #664 #665) #175)
#445 := (not #666)
decl ?v0!1 :: S2
#95 := ?v0!1
#633 := (f4 ?v0!1)
#634 := (= f1 #633)
#356 := (not #634)
#96 := (f3 ?v0!1)
#97 := (= f1 #96)
#98 := (not #97)
#357 := (or #98 #356)
decl ?v0!2 :: S2
#104 := ?v0!2
#105 := (f4 ?v0!2)
#106 := (= f1 #105)
#326 := (f3 ?v0!2)
#337 := (= f1 #326)
#338 := (not #337)
#107 := (not #106)
#336 := (or #107 #338)
#656 := (not #336)
#639 := [hypothesis]: #666
#301 := (or #656 #445)
#296 := [hypothesis]: #336
#652 := (or #445 #656)
#266 := (or #338 #107)
#339 := (not #266)
#324 := (or #445 #339)
#659 := (iff #324 #652)
#661 := (iff #652 #652)
#662 := [rewrite]: #661
#658 := (iff #339 #656)
#340 := (iff #266 #336)
#319 := [rewrite]: #340
#313 := [monotonicity #319]: #658
#660 := [monotonicity #313]: #659
#657 := [trans #660 #662]: #659
#325 := [quant-inst #104]: #324
#663 := [mp #325 #657]: #652
#300 := [unit-resolution #663 #639 #296]: false
#302 := [lemma #300]: #301
#635 := [unit-resolution #302 #639]: #656
#653 := (or #336 #106)
#311 := [def-axiom]: #653
#632 := [unit-resolution #311 #635]: #106
decl ?v0!0 :: S2
#84 := ?v0!0
#85 := (f4 ?v0!0)
#86 := (= f1 #85)
#87 := (f3 ?v0!0)
#88 := (= f1 #87)
#103 := (not #88)
#102 := (not #86)
#93 := (or #102 #103)
#94 := (not #93)
#363 := (or #94 #445)
#362 := [hypothesis]: #93
#640 := (or #445 #94)
#303 := (or #103 #102)
#641 := (not #303)
#646 := (or #445 #641)
#647 := (iff #646 #640)
#287 := (iff #640 #640)
#288 := [rewrite]: #287
#644 := (iff #641 #94)
#642 := (iff #303 #93)
#643 := [rewrite]: #642
#645 := [monotonicity #643]: #644
#649 := [monotonicity #645]: #647
#650 := [trans #649 #288]: #647
#282 := [quant-inst #84]: #646
#648 := [mp #282 #650]: #640
#348 := [unit-resolution #648 #639 #362]: false
#254 := [lemma #348]: #363
#625 := [unit-resolution #254 #639]: #94
#651 := (or #93 #86)
#637 := [def-axiom]: #651
#629 := [unit-resolution #637 #625]: #86
#638 := (or #93 #88)
#344 := [def-axiom]: #638
#626 := [unit-resolution #344 #625]: #88
#166 := (or #102 #103 #98 #107)
#135 := (and #86 #88)
#138 := (not #135)
#144 := (or #98 #107 #138)
#169 := (iff #144 #166)
#163 := (or #98 #107 #93)
#167 := (iff #163 #166)
#168 := [rewrite]: #167
#164 := (iff #144 #163)
#161 := (iff #138 #93)
#156 := (not #94)
#159 := (iff #156 #93)
#160 := [rewrite]: #159
#157 := (iff #138 #156)
#111 := (iff #135 #94)
#112 := [rewrite]: #111
#158 := [monotonicity #112]: #157
#162 := [trans #158 #160]: #161
#165 := [monotonicity #162]: #164
#170 := [trans #165 #168]: #169
#55 := (forall (vars (?v0 S2)) #43)
#52 := (forall (vars (?v0 S2)) #40)
#58 := (and #52 #55)
#46 := (and #40 #43)
#49 := (forall (vars (?v0 S2)) #46)
#149 := (or #49 #58)
#152 := (and #144 #149)
#127 := (or #58 #49)
#89 := (and #88 #86)
#90 := (not #89)
#113 := (or #98 #107)
#128 := (or #113 #90)
#129 := (and #128 #127)
#153 := (iff #129 #152)
#150 := (iff #127 #149)
#151 := [rewrite]: #150
#147 := (iff #128 #144)
#141 := (or #113 #138)
#145 := (iff #141 #144)
#146 := [rewrite]: #145
#142 := (iff #128 #141)
#139 := (iff #90 #138)
#136 := (iff #89 #135)
#137 := [rewrite]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#148 := [trans #143 #146]: #147
#154 := [monotonicity #148 #151]: #153
#67 := (not #49)
#68 := (iff #58 #67)
#130 := (~ #68 #129)
#91 := (~ #67 #90)
#92 := [sk]: #91
#74 := (not #67)
#76 := (~ #74 #49)
#81 := (~ #49 #49)
#79 := (~ #46 #46)
#80 := [refl]: #79
#82 := [nnf-pos #80]: #81
#83 := [nnf-neg #82]: #76
#125 := (~ #58 #58)
#123 := (~ #55 #55)
#121 := (~ #43 #43)
#122 := [refl]: #121
#124 := [nnf-pos #122]: #123
#119 := (~ #52 #52)
#117 := (~ #40 #40)
#118 := [refl]: #117
#120 := [nnf-pos #118]: #119
#126 := [monotonicity #120 #124]: #125
#114 := (not #58)
#115 := (~ #114 #113)
#108 := (not #55)
#109 := (~ #108 #107)
#110 := [sk]: #109
#99 := (not #52)
#100 := (~ #99 #98)
#101 := [sk]: #100
#116 := [nnf-neg #101 #110]: #115
#131 := [nnf-pos #116 #126 #83 #92]: #130
#12 := (= #11 f1)
#16 := (forall (vars (?v0 S2)) #12)
#10 := (= #9 f1)
#15 := (forall (vars (?v0 S2)) #10)
#17 := (and #15 #16)
#13 := (and #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#18 := (iff #14 #17)
#19 := (not #18)
#71 := (iff #19 #68)
#61 := (iff #49 #58)
#64 := (not #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #19 #64)
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#57 := [quant-intro #45]: #56
#53 := (iff #15 #52)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#54 := [quant-intro #42]: #53
#60 := [monotonicity #54 #57]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#48 := [monotonicity #42 #45]: #47
#51 := [quant-intro #48]: #50
#63 := [monotonicity #51 #60]: #62
#66 := [monotonicity #63]: #65
#72 := [trans #66 #70]: #71
#39 := [asserted]: #19
#75 := [mp #39 #72]: #68
#132 := [mp~ #75 #131]: #129
#133 := [mp #132 #154]: #152
#134 := [and-elim #133]: #144
#171 := [mp #134 #170]: #166
#630 := [unit-resolution #171 #626 #629 #632]: #98
#346 := (or #357 #97)
#347 := [def-axiom]: #346
#619 := [unit-resolution #347 #630]: #357
#631 := (not #357)
#636 := (or #445 #631)
#345 := [quant-inst #95]: #636
#620 := [unit-resolution #345 #639 #619]: false
#621 := [lemma #620]: #445
#693 := (or #666 #690)
#181 := (or #99 #108)
#182 := (not #181)
#178 := (forall (vars (?v0 S2)) #175)
#185 := (or #178 #182)
#694 := (iff #185 #693)
#691 := (iff #182 #690)
#688 := (iff #181 #687)
#685 := (iff #108 #684)
#682 := (iff #55 #679)
#680 := (iff #43 #43)
#681 := [refl]: #680
#683 := [quant-intro #681]: #682
#686 := [monotonicity #683]: #685
#677 := (iff #99 #676)
#674 := (iff #52 #671)
#672 := (iff #40 #40)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#678 := [monotonicity #675]: #677
#689 := [monotonicity #678 #686]: #688
#692 := [monotonicity #689]: #691
#669 := (iff #178 #666)
#667 := (iff #175 #175)
#668 := [refl]: #667
#670 := [quant-intro #668]: #669
#695 := [monotonicity #670 #692]: #694
#186 := (iff #149 #185)
#183 := (iff #58 #182)
#184 := [rewrite]: #183
#179 := (iff #49 #178)
#176 := (iff #46 #175)
#177 := [rewrite]: #176
#180 := [quant-intro #177]: #179
#187 := [monotonicity #180 #184]: #186
#155 := [and-elim #133]: #149
#188 := [mp #155 #187]: #185
#696 := [mp #188 #695]: #693
#349 := [unit-resolution #696 #621]: #690
#246 := (or #687 #671)
#333 := [def-axiom]: #246
#627 := [unit-resolution #333 #349]: #671
#247 := (or #687 #679)
#334 := [def-axiom]: #247
#623 := [unit-resolution #334 #349]: #679
#618 := [hypothesis]: #102
#624 := (or #684 #86)
#465 := [quant-inst #84]: #624
#466 := [unit-resolution #465 #618 #623]: false
#467 := [lemma #466]: #86
#616 := [hypothesis]: #98
#628 := (or #676 #97)
#341 := [quant-inst #95]: #628
#617 := [unit-resolution #341 #616 #627]: false
#622 := [lemma #617]: #97
#609 := [hypothesis]: #107
#611 := (or #684 #106)
#612 := [quant-inst #104]: #611
#610 := [unit-resolution #612 #609 #623]: false
#606 := [lemma #610]: #106
#607 := [unit-resolution #171 #606 #622 #467]: #103
#614 := (or #676 #88)
#608 := [quant-inst #84]: #614
[unit-resolution #608 #607 #627]: false
unsat
3b618dd5f7cad6fec6bf71ac0425349f4d47cb2a 204 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#624 := (pattern #9)
decl f4 :: S1
#12 := f4
decl f1 :: S1
#4 := f1
#45 := (= f1 f4)
#39 := (= f1 #9)
#51 := (or #39 #45)
#630 := (forall (vars (?v0 S2)) (:pat #624) #51)
#93 := (not #45)
decl ?v0!0 :: S2
#84 := ?v0!0
#85 := (f3 ?v0!0)
#86 := (= f1 #85)
#91 := (or #45 #86)
#279 := [hypothesis]: #45
#206 := (or #91 #93)
#293 := [def-axiom]: #206
#616 := [unit-resolution #293 #279]: #91
decl ?v0!1 :: S2
#99 := ?v0!1
#100 := (f3 ?v0!1)
#101 := (= f1 #100)
#121 := (or #45 #101)
#286 := (or #121 #93)
#297 := [def-axiom]: #286
#618 := [unit-resolution #297 #279]: #121
#124 := (not #121)
#92 := (not #91)
#143 := (or #92 #124)
#87 := (not #86)
#127 := (and #93 #87)
#130 := (or #124 #127)
#146 := (iff #130 #143)
#140 := (or #124 #92)
#144 := (iff #140 #143)
#145 := [rewrite]: #144
#141 := (iff #130 #140)
#107 := (iff #127 #92)
#108 := [rewrite]: #107
#142 := [monotonicity #108]: #141
#147 := [trans #142 #145]: #146
#54 := (forall (vars (?v0 S2)) #51)
#42 := (forall (vars (?v0 S2)) #39)
#133 := (or #42 #45 #54)
#136 := (and #130 #133)
#48 := (or #42 #45)
#113 := (or #54 #48)
#96 := (and #87 #93)
#102 := (or #101 #45)
#103 := (not #102)
#114 := (or #103 #96)
#115 := (and #114 #113)
#137 := (iff #115 #136)
#134 := (iff #113 #133)
#135 := [rewrite]: #134
#131 := (iff #114 #130)
#128 := (iff #96 #127)
#129 := [rewrite]: #128
#125 := (iff #103 #124)
#122 := (iff #102 #121)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#132 := [monotonicity #126 #129]: #131
#138 := [monotonicity #132 #135]: #137
#63 := (not #48)
#64 := (iff #54 #63)
#116 := (~ #64 #115)
#97 := (~ #63 #96)
#94 := (~ #93 #93)
#95 := [refl]: #94
#88 := (not #42)
#89 := (~ #88 #87)
#90 := [sk]: #89
#98 := [nnf-neg #90 #95]: #97
#81 := (not #63)
#82 := (~ #81 #48)
#79 := (~ #48 #48)
#70 := (~ #45 #45)
#72 := [refl]: #70
#77 := (~ #42 #42)
#75 := (~ #39 #39)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#80 := [monotonicity #78 #72]: #79
#83 := [nnf-neg #80]: #82
#111 := (~ #54 #54)
#109 := (~ #51 #51)
#110 := [refl]: #109
#112 := [nnf-pos #110]: #111
#104 := (not #54)
#105 := (~ #104 #103)
#106 := [sk]: #105
#117 := [nnf-pos #106 #112 #83 #98]: #116
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (or #10 #13)
#16 := (forall (vars (?v0 S2)) #15)
#11 := (forall (vars (?v0 S2)) #10)
#14 := (or #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#67 := (iff #18 #64)
#57 := (iff #48 #54)
#60 := (not #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #51)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#53 := [monotonicity #41 #47]: #52
#56 := [quant-intro #53]: #55
#49 := (iff #14 #48)
#43 := (iff #11 #42)
#44 := [quant-intro #41]: #43
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#38 := [asserted]: #18
#71 := [mp #38 #68]: #64
#118 := [mp~ #71 #117]: #115
#119 := [mp #118 #138]: #136
#120 := [and-elim #119]: #130
#148 := [mp #120 #147]: #143
#273 := [unit-resolution #148 #618 #616]: false
#405 := [lemma #273]: #93
#625 := (forall (vars (?v0 S2)) (:pat #624) #39)
#262 := (not #625)
#604 := [hypothesis]: #625
#612 := (not #630)
#298 := (not #101)
#272 := [hypothesis]: #298
#256 := (or #612 #101)
#614 := [hypothesis]: #630
#284 := (or #612 #45 #101)
#285 := (or #612 #102)
#613 := (iff #285 #284)
#620 := (or #612 #121)
#617 := (iff #620 #284)
#623 := [rewrite]: #617
#621 := (iff #285 #620)
#622 := [monotonicity #123]: #621
#271 := [trans #622 #623]: #613
#619 := [quant-inst #99]: #285
#276 := [mp #619 #271]: #284
#615 := [unit-resolution #276 #405 #272 #614]: false
#599 := [lemma #615]: #256
#260 := [unit-resolution #599 #272]: #612
#635 := (or #625 #45 #630)
#636 := (iff #133 #635)
#633 := (iff #54 #630)
#631 := (iff #51 #51)
#632 := [refl]: #631
#634 := [quant-intro #632]: #633
#628 := (iff #42 #625)
#626 := (iff #39 #39)
#627 := [refl]: #626
#629 := [quant-intro #627]: #628
#637 := [monotonicity #629 #634]: #636
#139 := [and-elim #119]: #133
#638 := [mp #139 #637]: #635
#261 := [unit-resolution #638 #260 #405]: #625
#263 := (or #262 #101)
#601 := [quant-inst #99]: #263
#602 := [unit-resolution #601 #272 #261]: false
#603 := [lemma #602]: #101
#226 := (or #121 #298)
#299 := [def-axiom]: #226
#605 := [unit-resolution #299 #603]: #121
#242 := [unit-resolution #148 #605]: #92
#207 := (or #91 #87)
#294 := [def-axiom]: #207
#607 := [unit-resolution #294 #242]: #87
#600 := (or #262 #86)
#606 := [quant-inst #84]: #600
#609 := [unit-resolution #606 #607 #604]: false
#247 := [lemma #609]: #262
#594 := [unit-resolution #638 #247 #405]: #630
#611 := (or #612 #45 #86)
#248 := (or #86 #45)
#597 := (or #612 #248)
#323 := (iff #597 #611)
#304 := (or #612 #91)
#322 := (iff #304 #611)
#308 := [rewrite]: #322
#320 := (iff #597 #304)
#610 := (iff #248 #91)
#608 := [rewrite]: #610
#321 := [monotonicity #608]: #320
#214 := [trans #321 #308]: #323
#598 := [quant-inst #84]: #597
#593 := [mp #598 #214]: #611
[unit-resolution #593 #405 #607 #594]: false
unsat
d3ac39bb1c7a6d7418172a244d9e337158e1130d 249 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#650 := (pattern #9)
decl f1 :: S1
#4 := f1
#39 := (= f1 #9)
#651 := (forall (vars (?v0 S2)) (:pat #650) #39)
decl f4 :: S1
#12 := f4
#45 := (= f1 f4)
#93 := (not #45)
#656 := (not #651)
#659 := (or #656 #93)
#662 := (not #659)
#163 := (not #39)
#164 := (or #163 #93)
#165 := (not #164)
#665 := (forall (vars (?v0 S2)) (:pat #650) #165)
#310 := (not #665)
decl ?v0!1 :: S2
#99 := ?v0!1
#100 := (f3 ?v0!1)
#101 := (= f1 #100)
#91 := (not #101)
#92 := (or #93 #91)
decl ?v0!0 :: S2
#84 := ?v0!0
#85 := (f3 ?v0!0)
#86 := (= f1 #85)
#87 := (not #86)
#305 := (or #93 #87)
#323 := [hypothesis]: #87
#298 := (or #305 #86)
#641 := [def-axiom]: #298
#286 := [unit-resolution #641 #323]: #305
#324 := (or #656 #86)
#312 := [hypothesis]: #651
#252 := [quant-inst #84]: #324
#325 := [unit-resolution #252 #323 #312]: false
#322 := [lemma #325]: #324
#287 := [unit-resolution #322 #323]: #656
#232 := (or #659 #651)
#319 := [def-axiom]: #232
#288 := [unit-resolution #319 #287]: #659
#670 := (or #662 #665)
#168 := (forall (vars (?v0 S2)) #165)
#42 := (forall (vars (?v0 S2)) #39)
#88 := (not #42)
#159 := (or #88 #93)
#160 := (not #159)
#171 := (or #160 #168)
#671 := (iff #171 #670)
#668 := (iff #168 #665)
#666 := (iff #165 #165)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#663 := (iff #160 #662)
#660 := (iff #159 #659)
#657 := (iff #88 #656)
#654 := (iff #42 #651)
#652 := (iff #39 #39)
#653 := [refl]: #652
#655 := [quant-intro #653]: #654
#658 := [monotonicity #655]: #657
#661 := [monotonicity #658]: #660
#664 := [monotonicity #661]: #663
#672 := [monotonicity #664 #669]: #671
#51 := (and #39 #45)
#54 := (forall (vars (?v0 S2)) #51)
#48 := (and #42 #45)
#135 := (or #48 #54)
#172 := (iff #135 #171)
#169 := (iff #54 #168)
#166 := (iff #51 #165)
#167 := [rewrite]: #166
#170 := [quant-intro #167]: #169
#161 := (iff #48 #160)
#162 := [rewrite]: #161
#173 := [monotonicity #162 #170]: #172
#121 := (and #45 #101)
#124 := (not #121)
#130 := (or #93 #87 #124)
#138 := (and #130 #135)
#113 := (or #54 #48)
#96 := (or #87 #93)
#102 := (and #101 #45)
#103 := (not #102)
#114 := (or #103 #96)
#115 := (and #114 #113)
#139 := (iff #115 #138)
#136 := (iff #113 #135)
#137 := [rewrite]: #136
#133 := (iff #114 #130)
#127 := (or #124 #96)
#131 := (iff #127 #130)
#132 := [rewrite]: #131
#128 := (iff #114 #127)
#125 := (iff #103 #124)
#122 := (iff #102 #121)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#129 := [monotonicity #126]: #128
#134 := [trans #129 #132]: #133
#140 := [monotonicity #134 #137]: #139
#63 := (not #48)
#64 := (iff #54 #63)
#116 := (~ #64 #115)
#97 := (~ #63 #96)
#94 := (~ #93 #93)
#95 := [refl]: #94
#89 := (~ #88 #87)
#90 := [sk]: #89
#98 := [nnf-neg #90 #95]: #97
#81 := (not #63)
#82 := (~ #81 #48)
#79 := (~ #48 #48)
#70 := (~ #45 #45)
#72 := [refl]: #70
#77 := (~ #42 #42)
#75 := (~ #39 #39)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#80 := [monotonicity #78 #72]: #79
#83 := [nnf-neg #80]: #82
#111 := (~ #54 #54)
#109 := (~ #51 #51)
#110 := [refl]: #109
#112 := [nnf-pos #110]: #111
#104 := (not #54)
#105 := (~ #104 #103)
#106 := [sk]: #105
#117 := [nnf-pos #106 #112 #83 #98]: #116
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (and #10 #13)
#16 := (forall (vars (?v0 S2)) #15)
#11 := (forall (vars (?v0 S2)) #10)
#14 := (and #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#67 := (iff #18 #64)
#57 := (iff #48 #54)
#60 := (not #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #51)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#53 := [monotonicity #41 #47]: #52
#56 := [quant-intro #53]: #55
#49 := (iff #14 #48)
#43 := (iff #11 #42)
#44 := [quant-intro #41]: #43
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#38 := [asserted]: #18
#71 := [mp #38 #68]: #64
#118 := [mp~ #71 #117]: #115
#119 := [mp #118 #140]: #138
#141 := [and-elim #119]: #135
#174 := [mp #141 #173]: #171
#673 := [mp #174 #672]: #670
#289 := [unit-resolution #673 #288]: #665
#299 := (not #305)
#311 := (or #310 #299)
#326 := (not #96)
#645 := (or #310 #326)
#647 := (iff #645 #311)
#643 := (iff #311 #311)
#649 := [rewrite]: #643
#431 := (iff #326 #299)
#642 := (iff #96 #305)
#644 := [rewrite]: #642
#638 := [monotonicity #644]: #431
#648 := [monotonicity #638]: #647
#639 := [trans #648 #649]: #647
#646 := [quant-inst #84]: #645
#297 := [mp #646 #639]: #311
#627 := [unit-resolution #297 #289 #286]: false
#628 := [lemma #627]: #86
#107 := (not #92)
#619 := [hypothesis]: #107
#634 := (or #92 #45)
#637 := [def-axiom]: #634
#620 := [unit-resolution #637 #619]: #45
#623 := (or #92 #101)
#624 := [def-axiom]: #623
#342 := [unit-resolution #624 #619]: #101
#153 := (or #93 #87 #91)
#156 := (iff #130 #153)
#150 := (or #93 #87 #92)
#154 := (iff #150 #153)
#155 := [rewrite]: #154
#151 := (iff #130 #150)
#148 := (iff #124 #92)
#143 := (not #107)
#146 := (iff #143 #92)
#147 := [rewrite]: #146
#144 := (iff #124 #143)
#108 := (iff #121 #107)
#142 := [rewrite]: #108
#145 := [monotonicity #142]: #144
#149 := [trans #145 #147]: #148
#152 := [monotonicity #149]: #151
#157 := [trans #152 #155]: #156
#120 := [and-elim #119]: #130
#158 := [mp #120 #157]: #153
#343 := [unit-resolution #158 #342 #620 #628]: false
#617 := [lemma #343]: #92
#349 := (or #107 #310)
#347 := [hypothesis]: #92
#348 := [hypothesis]: #665
#631 := (or #310 #107)
#302 := (or #91 #93)
#640 := (not #302)
#626 := (or #310 #640)
#268 := (iff #626 #631)
#635 := (iff #631 #631)
#273 := [rewrite]: #635
#629 := (iff #640 #107)
#282 := (iff #302 #92)
#625 := [rewrite]: #282
#630 := [monotonicity #625]: #629
#633 := [monotonicity #630]: #268
#274 := [trans #633 #273]: #268
#632 := [quant-inst #99]: #626
#636 := [mp #632 #274]: #631
#334 := [unit-resolution #636 #348 #347]: false
#240 := [lemma #334]: #349
#621 := [unit-resolution #240 #617]: #310
#618 := [unit-resolution #673 #621]: #662
#332 := [unit-resolution #319 #618]: #651
#233 := (or #659 #45)
#320 := [def-axiom]: #233
#333 := [unit-resolution #320 #618]: #45
#335 := [unit-resolution #158 #333 #628]: #91
#622 := (or #656 #101)
#331 := [quant-inst #99]: #622
[unit-resolution #331 #335 #332]: false
unsat
44bf7cfb85eb1c4e00dce5a88ea0a349e1b59c09 49 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S2 S1)
#9 := (:var 0 S2)
#13 := (:var 1 S2)
#14 := (f3 #13 #9)
#15 := (= #14 f1)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#8 := (:var 2 S2)
#10 := (f3 #8 #9)
#11 := (= #10 f1)
#12 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #11)
#17 := (iff #12 #16)
#18 := (not #17)
#67 := (iff #18 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #18 #62)
#60 := (iff #17 true)
#45 := (= f1 #14)
#46 := (forall (vars (?v0 S2) (?v2 S2)) #45)
#55 := (iff #46 #46)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #17 #55)
#53 := (iff #16 #46)
#51 := (iff #15 #45)
#52 := [rewrite]: #51
#54 := [quant-intro #52]: #53
#49 := (iff #12 #46)
#39 := (= f1 #10)
#42 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #39)
#47 := (iff #42 #46)
#48 := [elim-unused]: #47
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#50 := [trans #44 #48]: #49
#57 := [monotonicity #50 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#38 := [asserted]: #18
[mp #38 #68]: false
unsat
07180efbff5a77042937fc4dee6db649992c0567 136 0
#2 := false
decl f3 :: (-> S2 S2 S1)
decl f4 :: S2
#16 := f4
decl f5 :: S2
#20 := f5
#175 := (f3 f5 f4)
decl f1 :: S1
#4 := f1
#262 := (= f1 #175)
#176 := (not #262)
#21 := (f3 f4 f5)
#70 := (= f1 #21)
#105 := (not #70)
#9 := (:var 0 S2)
#17 := (f3 #9 f4)
#64 := (= f1 #17)
#67 := (forall (vars (?v0 S2)) #64)
#76 := (not #67)
#8 := (:var 1 S2)
#12 := (f3 #9 #8)
#49 := (= f1 #12)
#10 := (f3 #8 #9)
#46 := (= f1 #10)
#55 := (not #46)
#56 := (or #55 #49)
#61 := (forall (vars (?v0 S2) (?v1 S2)) #56)
#85 := (not #61)
#94 := (or #85 #76 #70)
#97 := (not #94)
#22 := (= #21 f1)
#18 := (= #17 f1)
#19 := (forall (vars (?v0 S2)) #18)
#23 := (implies #19 #22)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#24 := (implies #15 #23)
#25 := (not #24)
#100 := (iff #25 #97)
#77 := (or #76 #70)
#86 := (or #85 #77)
#91 := (not #86)
#98 := (iff #91 #97)
#95 := (iff #86 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#92 := (iff #25 #91)
#89 := (iff #24 #86)
#82 := (implies #61 #77)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #24 #82)
#80 := (iff #23 #77)
#73 := (implies #67 #70)
#78 := (iff #73 #77)
#79 := [rewrite]: #78
#74 := (iff #23 #73)
#71 := (iff #22 #70)
#72 := [rewrite]: #71
#68 := (iff #19 #67)
#65 := (iff #18 #64)
#66 := [rewrite]: #65
#69 := [quant-intro #66]: #68
#75 := [monotonicity #69 #72]: #74
#81 := [trans #75 #79]: #80
#62 := (iff #15 #61)
#59 := (iff #14 #56)
#52 := (implies #46 #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #14 #52)
#50 := (iff #13 #49)
#51 := [rewrite]: #50
#47 := (iff #11 #46)
#48 := [rewrite]: #47
#54 := [monotonicity #48 #51]: #53
#60 := [trans #54 #58]: #59
#63 := [quant-intro #60]: #62
#84 := [monotonicity #63 #81]: #83
#90 := [trans #84 #88]: #89
#93 := [monotonicity #90]: #92
#101 := [trans #93 #99]: #100
#45 := [asserted]: #25
#102 := [mp #45 #101]: #97
#106 := [not-or-elim #102]: #105
#594 := (pattern #12)
#593 := (pattern #10)
#595 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #593 #594) #56)
#598 := (iff #61 #595)
#596 := (iff #56 #56)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#118 := (~ #61 #61)
#116 := (~ #56 #56)
#117 := [refl]: #116
#119 := [nnf-pos #117]: #118
#103 := [not-or-elim #102]: #61
#108 := [mp~ #103 #119]: #61
#600 := [mp #108 #599]: #595
#266 := (not #595)
#267 := (or #266 #70 #176)
#263 := (or #176 #70)
#195 := (or #266 #263)
#242 := (iff #195 #267)
#177 := (or #70 #176)
#265 := (or #266 #177)
#585 := (iff #265 #267)
#587 := [rewrite]: #585
#269 := (iff #195 #265)
#264 := (iff #263 #177)
#255 := [rewrite]: #264
#248 := [monotonicity #255]: #269
#374 := [trans #248 #587]: #242
#268 := [quant-inst #20 #16]: #195
#581 := [mp #268 #374]: #267
#253 := [unit-resolution #581 #600 #106]: #176
#601 := (pattern #17)
#602 := (forall (vars (?v0 S2)) (:pat #601) #64)
#605 := (iff #67 #602)
#603 := (iff #64 #64)
#604 := [refl]: #603
#606 := [quant-intro #604]: #605
#110 := (~ #67 #67)
#109 := (~ #64 #64)
#120 := [refl]: #109
#111 := [nnf-pos #120]: #110
#104 := [not-or-elim #102]: #67
#121 := [mp~ #104 #111]: #67
#607 := [mp #121 #606]: #602
#588 := (not #602)
#589 := (or #588 #262)
#590 := [quant-inst #20]: #589
[unit-resolution #590 #607 #253]: false
unsat
1406e48b72695c3b5437881f101d623930557601 124 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: (-> S2 S2)
decl f5 :: S2
#16 := f5
#20 := (f4 f5)
#21 := (f4 #20)
#157 := (f3 #21)
decl f1 :: S1
#4 := f1
#244 := (= f1 #157)
#155 := (f3 #20)
#242 := (= f1 #155)
#17 := (f3 f5)
#65 := (= f1 #17)
#8 := (:var 0 S2)
#11 := (f4 #8)
#12 := (f3 #11)
#50 := (= f1 #12)
#9 := (f3 #8)
#47 := (= f1 #9)
#56 := (not #47)
#57 := (or #56 #50)
#62 := (forall (vars (?v0 S2)) #57)
#68 := (and #62 #65)
#22 := (f4 #21)
#23 := (f3 #22)
#71 := (= f1 #23)
#77 := (not #68)
#78 := (or #77 #71)
#83 := (not #78)
#24 := (= #23 f1)
#18 := (= #17 f1)
#13 := (= #12 f1)
#10 := (= #9 f1)
#14 := (implies #10 #13)
#15 := (forall (vars (?v0 S2)) #14)
#19 := (and #15 #18)
#25 := (implies #19 #24)
#26 := (not #25)
#84 := (iff #26 #83)
#81 := (iff #25 #78)
#74 := (implies #68 #71)
#79 := (iff #74 #78)
#80 := [rewrite]: #79
#75 := (iff #25 #74)
#72 := (iff #24 #71)
#73 := [rewrite]: #72
#69 := (iff #19 #68)
#66 := (iff #18 #65)
#67 := [rewrite]: #66
#63 := (iff #15 #62)
#60 := (iff #14 #57)
#53 := (implies #47 #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #14 #53)
#51 := (iff #13 #50)
#52 := [rewrite]: #51
#48 := (iff #10 #47)
#49 := [rewrite]: #48
#55 := [monotonicity #49 #52]: #54
#61 := [trans #55 #59]: #60
#64 := [quant-intro #61]: #63
#70 := [monotonicity #64 #67]: #69
#76 := [monotonicity #70 #73]: #75
#82 := [trans #76 #80]: #81
#85 := [monotonicity #82]: #84
#46 := [asserted]: #26
#88 := [mp #46 #85]: #83
#86 := [not-or-elim #88]: #68
#89 := [and-elim #86]: #65
#573 := (pattern #11)
#574 := (forall (vars (?v0 S2)) (:pat #573) #57)
#577 := (iff #62 #574)
#575 := (iff #57 #57)
#576 := [refl]: #575
#578 := [quant-intro #576]: #577
#103 := (~ #62 #62)
#101 := (~ #57 #57)
#102 := [refl]: #101
#104 := [nnf-pos #102]: #103
#87 := [and-elim #86]: #62
#93 := [mp~ #87 #104]: #62
#579 := [mp #93 #578]: #574
#156 := (not #65)
#235 := (not #574)
#246 := (or #235 #156 #242)
#243 := (or #156 #242)
#247 := (or #235 #243)
#248 := (iff #247 #246)
#245 := [rewrite]: #248
#175 := [quant-inst #16]: #247
#249 := [mp #175 #245]: #246
#211 := [unit-resolution #249 #579 #89]: #242
#228 := (not #242)
#354 := (or #235 #228 #244)
#565 := (or #228 #244)
#561 := (or #235 #565)
#234 := (iff #561 #354)
#568 := [rewrite]: #234
#233 := [quant-inst #20]: #561
#569 := [mp #233 #568]: #354
#212 := [unit-resolution #569 #579 #211]: #244
#90 := (not #71)
#91 := [not-or-elim #88]: #90
#567 := (not #244)
#572 := (or #235 #71 #567)
#222 := (or #567 #71)
#562 := (or #235 #222)
#548 := (iff #562 #572)
#570 := (or #71 #567)
#225 := (or #235 #570)
#564 := (iff #225 #572)
#205 := [rewrite]: #564
#563 := (iff #562 #225)
#571 := (iff #222 #570)
#566 := [rewrite]: #571
#221 := [monotonicity #566]: #563
#209 := [trans #221 #205]: #548
#220 := [quant-inst #21]: #562
#210 := [mp #220 #209]: #572
[unit-resolution #210 #579 #91 #212]: false
unsat
13b01358656727e1edb81fc16730f2ee5b483b3e 64 0
#2 := false
decl f3 :: (-> S2 S2 S3)
decl f4 :: S2
#14 := f4
decl f5 :: S2
#16 := f5
#18 := (f3 f5 f4)
#17 := (f3 f4 f5)
#19 := (= #17 #18)
#65 := (not #19)
#8 := (:var 1 S2)
#9 := (:var 0 S2)
#11 := (f3 #9 #8)
#10 := (f3 #8 #9)
#12 := (= #10 #11)
#13 := (forall (vars (?v0 S2) (?v1 S2)) #12)
#55 := (not #13)
#56 := (or #55 #19)
#61 := (not #56)
#15 := (= f4 f4)
#20 := (and #15 #19)
#21 := (implies #13 #20)
#22 := (not #21)
#62 := (iff #22 #61)
#59 := (iff #21 #56)
#52 := (implies #13 #19)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #21 #52)
#50 := (iff #20 #19)
#1 := true
#45 := (and true #19)
#48 := (iff #45 #19)
#49 := [rewrite]: #48
#46 := (iff #20 #45)
#43 := (iff #15 true)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#63 := [monotonicity #60]: #62
#42 := [asserted]: #22
#66 := [mp #42 #63]: #61
#67 := [not-or-elim #66]: #65
#550 := (pattern #11)
#549 := (pattern #10)
#551 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #549 #550) #12)
#554 := (iff #13 #551)
#552 := (iff #12 #12)
#553 := [refl]: #552
#555 := [quant-intro #553]: #554
#77 := (~ #13 #13)
#75 := (~ #12 #12)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#64 := [not-or-elim #66]: #13
#69 := [mp~ #64 #78]: #13
#556 := [mp #69 #555]: #551
#132 := (not #551)
#219 := (or #132 #19)
#133 := [quant-inst #14 #16]: #219
[unit-resolution #133 #556 #67]: false
unsat
8729e6c9d45ca3f4162f872a23bbd60b4b1c3963 250 0
#2 := false
decl f3 :: (-> S2 S1)
decl f7 :: S2
#22 := f7
#25 := (f3 f7)
decl f1 :: S1
#4 := f1
#97 := (= f1 #25)
#286 := (not #97)
decl f4 :: (-> S2 S1)
#8 := (:var 0 S2)
#11 := (f4 #8)
#705 := (pattern #11)
#9 := (f3 #8)
#704 := (pattern #9)
#60 := (= f1 #11)
#57 := (= f1 #9)
#66 := (not #57)
#67 := (or #66 #60)
#706 := (forall (vars (?v0 S2)) (:pat #704 #705) #67)
#72 := (forall (vars (?v0 S2)) #67)
#709 := (iff #72 #706)
#707 := (iff #67 #67)
#708 := [refl]: #707
#710 := [quant-intro #708]: #709
#190 := (~ #72 #72)
#204 := (~ #67 #67)
#205 := [refl]: #204
#191 := [nnf-pos #205]: #190
decl f6 :: (-> S2 S1)
#23 := (f6 f7)
#94 := (= f1 #23)
#81 := (not #60)
#89 := (and #66 #81)
#106 := (not #89)
#139 := (or #106 #94 #97)
#142 := (forall (vars (?v0 S2)) #139)
decl f5 :: S2
#15 := f5
#16 := (f4 f5)
#75 := (= f1 #16)
#78 := (not #75)
#151 := (and #72 #78 #142)
#156 := (not #151)
#32 := (f4 f7)
#121 := (= f1 #32)
#162 := (or #94 #121 #156)
#167 := (not #162)
#33 := (= #32 f1)
#24 := (= #23 f1)
#34 := (or #24 #33)
#26 := (= #25 f1)
#27 := (or #24 #26)
#10 := (= #9 f1)
#20 := (not #10)
#12 := (= #11 f1)
#19 := (not #12)
#21 := (and #19 #20)
#28 := (implies #21 #27)
#29 := (forall (vars (?v0 S2)) #28)
#17 := (= #16 f1)
#18 := (not #17)
#30 := (and #18 #29)
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#31 := (and #14 #30)
#35 := (implies #31 #34)
#36 := (not #35)
#170 := (iff #36 #167)
#124 := (or #94 #121)
#100 := (or #94 #97)
#107 := (or #106 #100)
#112 := (forall (vars (?v0 S2)) #107)
#115 := (and #78 #112)
#118 := (and #72 #115)
#130 := (not #118)
#131 := (or #130 #124)
#136 := (not #131)
#168 := (iff #136 #167)
#165 := (iff #131 #162)
#159 := (or #156 #124)
#163 := (iff #159 #162)
#164 := [rewrite]: #163
#160 := (iff #131 #159)
#157 := (iff #130 #156)
#154 := (iff #118 #151)
#145 := (and #78 #142)
#148 := (and #72 #145)
#152 := (iff #148 #151)
#153 := [rewrite]: #152
#149 := (iff #118 #148)
#146 := (iff #115 #145)
#143 := (iff #112 #142)
#140 := (iff #107 #139)
#141 := [rewrite]: #140
#144 := [quant-intro #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#155 := [trans #150 #153]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#166 := [trans #161 #164]: #165
#169 := [monotonicity #166]: #168
#137 := (iff #36 #136)
#134 := (iff #35 #131)
#127 := (implies #118 #124)
#132 := (iff #127 #131)
#133 := [rewrite]: #132
#128 := (iff #35 #127)
#125 := (iff #34 #124)
#122 := (iff #33 #121)
#123 := [rewrite]: #122
#95 := (iff #24 #94)
#96 := [rewrite]: #95
#126 := [monotonicity #96 #123]: #125
#119 := (iff #31 #118)
#116 := (iff #30 #115)
#113 := (iff #29 #112)
#110 := (iff #28 #107)
#103 := (implies #89 #100)
#108 := (iff #103 #107)
#109 := [rewrite]: #108
#104 := (iff #28 #103)
#101 := (iff #27 #100)
#98 := (iff #26 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #96 #99]: #101
#92 := (iff #21 #89)
#86 := (and #81 #66)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #21 #86)
#84 := (iff #20 #66)
#58 := (iff #10 #57)
#59 := [rewrite]: #58
#85 := [monotonicity #59]: #84
#82 := (iff #19 #81)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#83 := [monotonicity #62]: #82
#88 := [monotonicity #83 #85]: #87
#93 := [trans #88 #91]: #92
#105 := [monotonicity #93 #102]: #104
#111 := [trans #105 #109]: #110
#114 := [quant-intro #111]: #113
#79 := (iff #18 #78)
#76 := (iff #17 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#117 := [monotonicity #80 #114]: #116
#73 := (iff #14 #72)
#70 := (iff #13 #67)
#63 := (implies #57 #60)
#68 := (iff #63 #67)
#69 := [rewrite]: #68
#64 := (iff #13 #63)
#65 := [monotonicity #59 #62]: #64
#71 := [trans #65 #69]: #70
#74 := [quant-intro #71]: #73
#120 := [monotonicity #74 #117]: #119
#129 := [monotonicity #120 #126]: #128
#135 := [trans #129 #133]: #134
#138 := [monotonicity #135]: #137
#171 := [trans #138 #169]: #170
#56 := [asserted]: #36
#172 := [mp #56 #171]: #167
#177 := [not-or-elim #172]: #151
#178 := [and-elim #177]: #72
#188 := [mp~ #178 #191]: #72
#711 := [mp #188 #710]: #706
#175 := (not #121)
#176 := [not-or-elim #172]: #175
#288 := (not #706)
#375 := (or #288 #286 #121)
#373 := (or #286 #121)
#366 := (or #288 #373)
#378 := (iff #366 #375)
#306 := [rewrite]: #378
#377 := [quant-inst #22]: #366
#379 := [mp #377 #306]: #375
#401 := [unit-resolution #379 #176 #711]: #286
#220 := (or #57 #60 #97)
#712 := (forall (vars (?v0 S2)) (:pat #704 #705) #220)
#225 := (forall (vars (?v0 S2)) #220)
#715 := (iff #225 #712)
#713 := (iff #220 #220)
#714 := [refl]: #713
#716 := [quant-intro #714]: #715
#195 := (or #106 #97)
#200 := (forall (vars (?v0 S2)) #195)
#226 := (iff #200 #225)
#223 := (iff #195 #220)
#206 := (or #57 #60)
#217 := (or #206 #97)
#221 := (iff #217 #220)
#222 := [rewrite]: #221
#218 := (iff #195 #217)
#215 := (iff #106 #206)
#207 := (not #206)
#210 := (not #207)
#213 := (iff #210 #206)
#214 := [rewrite]: #213
#211 := (iff #106 #210)
#208 := (iff #89 #207)
#209 := [rewrite]: #208
#212 := [monotonicity #209]: #211
#216 := [trans #212 #214]: #215
#219 := [monotonicity #216]: #218
#224 := [trans #219 #222]: #223
#227 := [quant-intro #224]: #226
#187 := (~ #200 #200)
#189 := (~ #195 #195)
#186 := [refl]: #189
#182 := [nnf-pos #186]: #187
#201 := (iff #142 #200)
#198 := (iff #139 #195)
#192 := (or #106 false #97)
#196 := (iff #192 #195)
#197 := [rewrite]: #196
#193 := (iff #139 #192)
#184 := (iff #94 false)
#173 := (not #94)
#174 := [not-or-elim #172]: #173
#185 := [iff-false #174]: #184
#194 := [monotonicity #185]: #193
#199 := [trans #194 #197]: #198
#202 := [quant-intro #199]: #201
#180 := [and-elim #177]: #142
#203 := [mp #180 #202]: #200
#183 := [mp~ #203 #182]: #200
#228 := [mp #183 #227]: #225
#717 := [mp #228 #716]: #712
#359 := (not #712)
#696 := (or #359 #97 #121)
#287 := (or #97 #121 #97)
#698 := (or #359 #287)
#700 := (iff #698 #696)
#374 := (or #97 #121)
#485 := (or #359 #374)
#365 := (iff #485 #696)
#699 := [rewrite]: #365
#692 := (iff #698 #485)
#376 := (iff #287 #374)
#380 := [rewrite]: #376
#364 := [monotonicity #380]: #692
#701 := [trans #364 #699]: #700
#353 := [quant-inst #22]: #698
#702 := [mp #353 #701]: #696
[unit-resolution #702 #176 #717 #401]: false
unsat
b2586fe221d4519a3bc11715a6afc923e5ff0b19 25 0
#2 := false
#8 := (:var 0 S2)
#9 := (= #8 #8)
#10 := (exists (vars (?v0 S2)) #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (exists (vars (?v0 S2)) true)
#37 := (iff #34 true)
#38 := [elim-unused]: #37
#35 := (iff #10 #34)
#32 := (iff #9 true)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
0b9b80c026d042a35c3971f59d4c9cc24f2e1be5 34 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (exists (vars (?v0 S2)) #10)
#12 := (iff #11 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := (= f1 #9)
#37 := (exists (vars (?v0 S2)) #34)
#40 := (iff #37 #37)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#36 := [rewrite]: #35
#39 := [quant-intro #36]: #38
#42 := [monotonicity #39 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
2ad5bfe4ae1a537e6115da5fac3d5e5fd857b08d 263 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#114 := ?v0!1
#115 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#116 := (= f1 #115)
decl f4 :: (-> S2 S1)
decl ?v0!2 :: S2
#121 := ?v0!2
#122 := (f4 ?v0!2)
#123 := (= f1 #122)
#602 := (not #123)
#595 := [hypothesis]: #123
#8 := (:var 0 S2)
#11 := (f4 #8)
#642 := (pattern #11)
#43 := (= f1 #11)
#103 := (not #43)
#643 := (forall (vars (?v0 S2)) (:pat #642) #103)
#648 := (not #643)
#9 := (f3 #8)
#633 := (pattern #9)
#40 := (= f1 #9)
#96 := (not #40)
#634 := (forall (vars (?v0 S2)) (:pat #633) #96)
#639 := (not #634)
#651 := (or #639 #648)
#654 := (not #651)
#46 := (or #40 #43)
#90 := (not #46)
#657 := (forall (vars (?v0 S2)) (:pat #633 #642) #90)
#282 := (not #657)
decl ?v0!0 :: S2
#79 := ?v0!0
#80 := (f4 ?v0!0)
#81 := (= f1 #80)
#82 := (f3 ?v0!0)
#74 := (= f1 #82)
#76 := (or #74 #81)
#265 := (not #116)
#628 := (f4 ?v0!1)
#629 := (= f1 #628)
#630 := (or #116 #629)
#631 := (not #630)
#623 := [hypothesis]: #657
#613 := (or #631 #282)
#626 := [hypothesis]: #630
#281 := (or #282 #631)
#624 := [quant-inst #114]: #281
#612 := [unit-resolution #624 #623 #626]: false
#614 := [lemma #612]: #613
#596 := [unit-resolution #614 #623]: #631
#608 := (or #630 #265)
#269 := [def-axiom]: #608
#597 := [unit-resolution #269 #596]: #265
#295 := (not #74)
#306 := [hypothesis]: #74
#293 := (or #76 #295)
#294 := [def-axiom]: #293
#625 := [unit-resolution #294 #306]: #76
#235 := (or #639 #295)
#307 := [hypothesis]: #634
#308 := [quant-inst #79]: #235
#305 := [unit-resolution #308 #307 #306]: false
#309 := [lemma #305]: #235
#627 := [unit-resolution #309 #306]: #639
#215 := (or #651 #634)
#302 := [def-axiom]: #215
#632 := [unit-resolution #302 #627]: #651
#662 := (or #654 #657)
#93 := (forall (vars (?v0 S2)) #90)
#106 := (forall (vars (?v0 S2)) #103)
#120 := (not #106)
#99 := (forall (vars (?v0 S2)) #96)
#119 := (not #99)
#85 := (or #119 #120)
#86 := (not #85)
#152 := (or #86 #93)
#663 := (iff #152 #662)
#660 := (iff #93 #657)
#658 := (iff #90 #90)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#655 := (iff #86 #654)
#652 := (iff #85 #651)
#649 := (iff #120 #648)
#646 := (iff #106 #643)
#644 := (iff #103 #103)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#650 := [monotonicity #647]: #649
#640 := (iff #119 #639)
#637 := (iff #99 #634)
#635 := (iff #96 #96)
#636 := [refl]: #635
#638 := [quant-intro #636]: #637
#641 := [monotonicity #638]: #640
#653 := [monotonicity #641 #650]: #652
#656 := [monotonicity #653]: #655
#664 := [monotonicity #656 #661]: #663
#110 := (and #99 #106)
#139 := (or #93 #110)
#155 := (iff #139 #152)
#149 := (or #93 #86)
#153 := (iff #149 #152)
#154 := [rewrite]: #153
#150 := (iff #139 #149)
#126 := (iff #110 #86)
#127 := [rewrite]: #126
#151 := [monotonicity #127]: #150
#156 := [trans #151 #154]: #155
#142 := (or #74 #81 #116 #123)
#145 := (and #139 #142)
#128 := (or #116 #123)
#131 := (or #128 #76)
#132 := (or #110 #93)
#133 := (and #132 #131)
#146 := (iff #133 #145)
#143 := (iff #131 #142)
#144 := [rewrite]: #143
#140 := (iff #132 #139)
#141 := [rewrite]: #140
#147 := [monotonicity #141 #144]: #146
#49 := (exists (vars (?v0 S2)) #46)
#67 := (not #49)
#55 := (exists (vars (?v0 S2)) #43)
#52 := (exists (vars (?v0 S2)) #40)
#58 := (or #52 #55)
#68 := (iff #58 #67)
#134 := (~ #68 #133)
#94 := (~ #67 #93)
#91 := (~ #90 #90)
#92 := [refl]: #91
#95 := [nnf-neg #92]: #94
#87 := (not #67)
#88 := (~ #87 #76)
#83 := (~ #49 #76)
#84 := [sk]: #83
#89 := [nnf-neg #84]: #88
#129 := (~ #58 #128)
#124 := (~ #55 #123)
#125 := [sk]: #124
#117 := (~ #52 #116)
#118 := [sk]: #117
#130 := [monotonicity #118 #125]: #129
#111 := (not #58)
#112 := (~ #111 #110)
#107 := (not #55)
#108 := (~ #107 #106)
#104 := (~ #103 #103)
#105 := [refl]: #104
#109 := [nnf-neg #105]: #108
#100 := (not #52)
#101 := (~ #100 #99)
#97 := (~ #96 #96)
#98 := [refl]: #97
#102 := [nnf-neg #98]: #101
#113 := [nnf-neg #102 #109]: #112
#135 := [nnf-pos #113 #130 #89 #95]: #134
#12 := (= #11 f1)
#16 := (exists (vars (?v0 S2)) #12)
#10 := (= #9 f1)
#15 := (exists (vars (?v0 S2)) #10)
#17 := (or #15 #16)
#13 := (or #10 #12)
#14 := (exists (vars (?v0 S2)) #13)
#18 := (iff #14 #17)
#19 := (not #18)
#71 := (iff #19 #68)
#61 := (iff #49 #58)
#64 := (not #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #19 #64)
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#57 := [quant-intro #45]: #56
#53 := (iff #15 #52)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#54 := [quant-intro #42]: #53
#60 := [monotonicity #54 #57]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#48 := [monotonicity #42 #45]: #47
#51 := [quant-intro #48]: #50
#63 := [monotonicity #51 #60]: #62
#66 := [monotonicity #63]: #65
#72 := [trans #66 #70]: #71
#39 := [asserted]: #19
#75 := [mp #39 #72]: #68
#136 := [mp~ #75 #135]: #133
#137 := [mp #136 #147]: #145
#138 := [and-elim #137]: #139
#157 := [mp #138 #156]: #152
#665 := [mp #157 #664]: #662
#622 := [unit-resolution #665 #632]: #657
#288 := (not #76)
#414 := (or #282 #288)
#621 := [quant-inst #79]: #414
#280 := [unit-resolution #621 #622 #625]: false
#285 := [lemma #280]: #295
#609 := (f3 ?v0!2)
#615 := (= f1 #609)
#618 := (or #123 #615)
#619 := (not #618)
#316 := (or #619 #282)
#314 := [hypothesis]: #618
#606 := (or #282 #619)
#251 := (or #615 #123)
#616 := (not #251)
#607 := (or #282 #616)
#329 := (iff #607 #606)
#331 := (iff #606 #606)
#317 := [rewrite]: #331
#617 := (iff #616 #619)
#256 := (iff #251 #618)
#257 := [rewrite]: #256
#620 := [monotonicity #257]: #617
#330 := [monotonicity #620]: #329
#332 := [trans #330 #317]: #329
#313 := [quant-inst #121]: #607
#223 := [mp #313 #332]: #606
#315 := [unit-resolution #223 #623 #314]: false
#318 := [lemma #315]: #316
#588 := [unit-resolution #318 #623]: #619
#603 := (or #618 #602)
#325 := [def-axiom]: #603
#589 := [unit-resolution #325 #588]: #602
#148 := [and-elim #137]: #142
#590 := [unit-resolution #148 #589 #285 #597]: #81
#310 := (not #81)
#594 := (or #76 #310)
#598 := [def-axiom]: #594
#585 := [unit-resolution #598 #590]: #76
#586 := [unit-resolution #621 #623 #585]: false
#591 := [lemma #586]: #282
#599 := [unit-resolution #665 #591]: #654
#216 := (or #651 #643)
#303 := [def-axiom]: #216
#593 := [unit-resolution #303 #599]: #643
#592 := (or #648 #602)
#587 := [quant-inst #121]: #592
#434 := [unit-resolution #587 #593 #595]: false
#435 := [lemma #434]: #602
#436 := [hypothesis]: #81
#579 := (or #648 #310)
#580 := [quant-inst #79]: #579
#578 := [unit-resolution #580 #593 #436]: false
#581 := [lemma #578]: #310
#575 := (or #81 #116 #123)
#576 := [unit-resolution #148 #285]: #575
#577 := [unit-resolution #576 #581 #435]: #116
#584 := [unit-resolution #302 #599]: #634
#582 := (or #639 #265)
#583 := [quant-inst #114]: #582
[unit-resolution #583 #584 #577]: false
unsat
49837552f1674d9522be923aa91cdae0b305a0be 222 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#108 := ?v0!1
#109 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#110 := (= f1 #109)
#154 := (not #110)
decl f4 :: S1
#12 := f4
#45 := (= f1 f4)
#95 := (not #45)
#155 := (or #95 #154)
#156 := (not #155)
decl ?v0!0 :: S2
#75 := ?v0!0
#76 := (f3 ?v0!0)
#77 := (= f1 #76)
#159 := (not #77)
#160 := (or #95 #159)
#161 := (not #160)
#618 := [hypothesis]: #161
#317 := (or #160 #77)
#245 := [def-axiom]: #317
#279 := [unit-resolution #245 #618]: #77
#8 := (:var 0 S2)
#9 := (f3 #8)
#643 := (pattern #9)
#39 := (= f1 #9)
#88 := (not #39)
#114 := (or #88 #95)
#649 := (forall (vars (?v0 S2)) (:pat #643) #114)
#305 := (or #160 #45)
#316 := [def-axiom]: #305
#280 := [unit-resolution #316 #618]: #45
#644 := (forall (vars (?v0 S2)) (:pat #643) #88)
#635 := (not #644)
#637 := (or #635 #159)
#319 := [hypothesis]: #77
#298 := [hypothesis]: #644
#292 := [quant-inst #75]: #637
#424 := [unit-resolution #292 #298 #319]: false
#631 := [lemma #424]: #637
#281 := [unit-resolution #631 #279]: #635
#654 := (or #95 #644 #649)
#147 := (forall (vars (?v0 S2)) #114)
#91 := (forall (vars (?v0 S2)) #88)
#150 := (or #95 #91 #147)
#655 := (iff #150 #654)
#652 := (iff #147 #649)
#650 := (iff #114 #114)
#651 := [refl]: #650
#653 := [quant-intro #651]: #652
#647 := (iff #91 #644)
#645 := (iff #88 #88)
#646 := [refl]: #645
#648 := [quant-intro #646]: #647
#656 := [monotonicity #648 #653]: #655
#51 := (and #39 #45)
#101 := (not #51)
#104 := (forall (vars (?v0 S2)) #101)
#124 := (or #95 #91 #104)
#151 := (iff #124 #150)
#148 := (iff #104 #147)
#145 := (iff #101 #114)
#115 := (not #114)
#140 := (not #115)
#143 := (iff #140 #114)
#144 := [rewrite]: #143
#141 := (iff #101 #140)
#72 := (iff #51 #115)
#79 := [rewrite]: #72
#142 := [monotonicity #79]: #141
#146 := [trans #142 #144]: #145
#149 := [quant-intro #146]: #148
#152 := [monotonicity #149]: #151
#130 := (and #45 #77)
#127 := (and #45 #110)
#133 := (or #127 #130)
#136 := (and #124 #133)
#82 := (and #77 #45)
#111 := (and #110 #45)
#116 := (or #111 #82)
#98 := (or #91 #95)
#117 := (or #104 #98)
#118 := (and #117 #116)
#137 := (iff #118 #136)
#134 := (iff #116 #133)
#131 := (iff #82 #130)
#132 := [rewrite]: #131
#128 := (iff #111 #127)
#129 := [rewrite]: #128
#135 := [monotonicity #129 #132]: #134
#125 := (iff #117 #124)
#126 := [rewrite]: #125
#138 := [monotonicity #126 #135]: #137
#42 := (exists (vars (?v0 S2)) #39)
#48 := (and #42 #45)
#63 := (not #48)
#54 := (exists (vars (?v0 S2)) #51)
#64 := (iff #54 #63)
#119 := (~ #64 #118)
#99 := (~ #63 #98)
#96 := (~ #95 #95)
#97 := [refl]: #96
#92 := (not #42)
#93 := (~ #92 #91)
#89 := (~ #88 #88)
#90 := [refl]: #89
#94 := [nnf-neg #90]: #93
#100 := [nnf-neg #94 #97]: #99
#85 := (not #63)
#86 := (~ #85 #82)
#83 := (~ #48 #82)
#80 := (~ #45 #45)
#81 := [refl]: #80
#78 := (~ #42 #77)
#70 := [sk]: #78
#84 := [monotonicity #70 #81]: #83
#87 := [nnf-neg #84]: #86
#112 := (~ #54 #111)
#113 := [sk]: #112
#105 := (not #54)
#106 := (~ #105 #104)
#102 := (~ #101 #101)
#103 := [refl]: #102
#107 := [nnf-neg #103]: #106
#120 := [nnf-pos #107 #113 #87 #100]: #119
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (and #10 #13)
#16 := (exists (vars (?v0 S2)) #15)
#11 := (exists (vars (?v0 S2)) #10)
#14 := (and #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#67 := (iff #18 #64)
#57 := (iff #48 #54)
#60 := (not #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #51)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#53 := [monotonicity #41 #47]: #52
#56 := [quant-intro #53]: #55
#49 := (iff #14 #48)
#43 := (iff #11 #42)
#44 := [quant-intro #41]: #43
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#38 := [asserted]: #18
#71 := [mp #38 #68]: #64
#121 := [mp~ #71 #120]: #118
#122 := [mp #121 #138]: #136
#123 := [and-elim #122]: #124
#153 := [mp #123 #152]: #150
#657 := [mp #153 #656]: #654
#282 := [unit-resolution #657 #281 #280]: #649
#639 := (not #649)
#640 := (or #639 #95 #159)
#303 := (or #159 #95)
#641 := (or #639 #303)
#291 := (iff #641 #640)
#642 := (or #639 #160)
#295 := (iff #642 #640)
#633 := [rewrite]: #295
#632 := (iff #641 #642)
#304 := (iff #303 #160)
#638 := [rewrite]: #304
#290 := [monotonicity #638]: #632
#634 := [trans #290 #633]: #291
#636 := [quant-inst #75]: #641
#275 := [mp #636 #634]: #640
#620 := [unit-resolution #275 #280 #282 #279]: false
#621 := [lemma #620]: #160
#164 := (or #156 #161)
#165 := (iff #133 #164)
#162 := (iff #130 #161)
#163 := [rewrite]: #162
#157 := (iff #127 #156)
#158 := [rewrite]: #157
#166 := [monotonicity #158 #163]: #165
#139 := [and-elim #122]: #133
#167 := [mp #139 #166]: #164
#617 := [unit-resolution #167 #621]: #156
#226 := (or #155 #110)
#313 := [def-axiom]: #226
#323 := [unit-resolution #313 #617]: #110
#225 := (or #155 #45)
#312 := [def-axiom]: #225
#340 := [unit-resolution #312 #617]: #45
#339 := [hypothesis]: #649
#619 := (or #639 #95 #154)
#622 := (or #154 #95)
#625 := (or #639 #622)
#627 := (iff #625 #619)
#626 := (or #639 #155)
#267 := (iff #626 #619)
#629 := [rewrite]: #267
#628 := (iff #625 #626)
#623 := (iff #622 #155)
#624 := [rewrite]: #623
#266 := [monotonicity #624]: #628
#630 := [trans #266 #629]: #627
#261 := [quant-inst #108]: #625
#616 := [mp #261 #630]: #619
#341 := [unit-resolution #616 #340 #339 #323]: false
#327 := [lemma #341]: #639
#342 := [unit-resolution #657 #327 #340]: #644
#612 := (or #635 #154)
#613 := [quant-inst #108]: #612
[unit-resolution #613 #342 #323]: false
unsat
ae4569403e4041d6e7e74864d4d8162485073321 49 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S4 S1)
#9 := (:var 0 S4)
#13 := (:var 1 S2)
#14 := (f3 #13 #9)
#15 := (= #14 f1)
#16 := (exists (vars (?v0 S2) (?v1 S4)) #15)
#8 := (:var 2 S2)
#10 := (f3 #8 #9)
#11 := (= #10 f1)
#12 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #11)
#17 := (iff #12 #16)
#18 := (not #17)
#67 := (iff #18 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #18 #62)
#60 := (iff #17 true)
#45 := (= f1 #14)
#46 := (exists (vars (?v0 S2) (?v2 S4)) #45)
#55 := (iff #46 #46)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #17 #55)
#53 := (iff #16 #46)
#51 := (iff #15 #45)
#52 := [rewrite]: #51
#54 := [quant-intro #52]: #53
#49 := (iff #12 #46)
#39 := (= f1 #10)
#42 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #39)
#47 := (iff #42 #46)
#48 := [elim-unused]: #47
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#50 := [trans #44 #48]: #49
#57 := [monotonicity #50 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#38 := [asserted]: #18
[mp #38 #68]: false
unsat
d1b3651883bd583f235d214bf142f4826c696167 122 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#125 := ?v0!1
#128 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#129 := (= f1 #128)
decl f4 :: (-> S2 S1)
#126 := (f4 ?v0!1)
#127 := (= f1 #126)
#138 := (and #127 #129)
#130 := (and #129 #127)
#139 := (iff #130 #138)
#140 := [rewrite]: #139
#8 := (:var 0 S2)
#14 := (f4 #8)
#56 := (= f1 #14)
#9 := (f3 #8)
#44 := (= f1 #9)
#59 := (and #44 #56)
#62 := (exists (vars (?v0 S2)) #59)
#131 := (~ #62 #130)
#132 := [sk]: #131
#53 := (exists (vars (?v0 S2)) #44)
#65 := (or #53 #62)
#113 := (iff #65 #62)
#108 := (or false #62)
#111 := (iff #108 #62)
#112 := [rewrite]: #111
#109 := (iff #65 #108)
#106 := (iff #53 false)
#68 := (not #53)
#47 := (not #44)
#50 := (exists (vars (?v0 S2)) #47)
#92 := (and #50 #68 #65)
#10 := (= #9 f1)
#13 := (exists (vars (?v0 S2)) #10)
#19 := (not #13)
#15 := (= #14 f1)
#16 := (and #10 #15)
#17 := (exists (vars (?v0 S2)) #16)
#18 := (or #13 #17)
#20 := (and #18 #19)
#11 := (not #10)
#12 := (exists (vars (?v0 S2)) #11)
#21 := (and #12 #20)
#22 := (not #21)
#23 := (not #22)
#95 := (iff #23 #92)
#74 := (and #68 #65)
#79 := (and #50 #74)
#93 := (iff #79 #92)
#94 := [rewrite]: #93
#90 := (iff #23 #79)
#82 := (not #79)
#85 := (not #82)
#88 := (iff #85 #79)
#89 := [rewrite]: #88
#86 := (iff #23 #85)
#83 := (iff #22 #82)
#80 := (iff #21 #79)
#77 := (iff #20 #74)
#71 := (and #65 #68)
#75 := (iff #71 #74)
#76 := [rewrite]: #75
#72 := (iff #20 #71)
#69 := (iff #19 #68)
#54 := (iff #13 #53)
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#55 := [quant-intro #46]: #54
#70 := [monotonicity #55]: #69
#66 := (iff #18 #65)
#63 := (iff #17 #62)
#60 := (iff #16 #59)
#57 := (iff #15 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #46 #58]: #60
#64 := [quant-intro #61]: #63
#67 := [monotonicity #55 #64]: #66
#73 := [monotonicity #67 #70]: #72
#78 := [trans #73 #76]: #77
#51 := (iff #12 #50)
#48 := (iff #11 #47)
#49 := [monotonicity #46]: #48
#52 := [quant-intro #49]: #51
#81 := [monotonicity #52 #78]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#96 := [trans #91 #94]: #95
#43 := [asserted]: #23
#97 := [mp #43 #96]: #92
#99 := [and-elim #97]: #68
#107 := [iff-false #99]: #106
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#100 := [and-elim #97]: #65
#115 := [mp #100 #114]: #62
#135 := [mp~ #115 #132]: #130
#136 := [mp #135 #140]: #138
#141 := [and-elim #136]: #129
#615 := (pattern #9)
#616 := (forall (vars (?v0 S2)) (:pat #615) #47)
#121 := (forall (vars (?v0 S2)) #47)
#619 := (iff #121 #616)
#617 := (iff #47 #47)
#618 := [refl]: #617
#620 := [quant-intro #618]: #619
#122 := (~ #68 #121)
#118 := (~ #47 #47)
#119 := [refl]: #118
#123 := [nnf-neg #119]: #122
#124 := [mp~ #99 #123]: #121
#621 := [mp #124 #620]: #616
#197 := (not #129)
#285 := (not #616)
#199 := (or #285 #197)
#286 := [quant-inst #125]: #199
[unit-resolution #286 #621 #141]: false
unsat
5dbb54e3f79f77198d3a0109880c6612eee2c993 1 2
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!10)

317998ded3ba09b3ca0b4841fddbf22609971173 1 0
unsat
5d41ec3d43526a42a83f6a2101e1fdacb01a1e18 1 0
unsat
4353868152099814cbf92f87fbe5cfd7c0e847d9 1 0
unsat
d1960c3de8c282f29b8966d1941c342d346c0824 1 0
unsat
0bb08ec8e7f02569dc9b5667cb6facd8b7ac2d68 1 0
unsat
94815111a97147cb14d9a6ed4a08e988cd5d7cba 105 0
#2 := false
decl f3 :: (-> S1 S1)
decl ?v0!1 :: S1
#83 := ?v0!1
#84 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#85 := (= f1 #84)
decl ?v0!0 :: S1
#69 := ?v0!0
#70 := (f3 ?v0!0)
#71 := (= f1 #70)
#72 := (not #71)
#167 := [hypothesis]: #71
#8 := (:var 0 S1)
#9 := (f3 #8)
#585 := (pattern #9)
#37 := (= f1 #9)
#46 := (not #37)
#586 := (forall (vars (?v0 S1)) (:pat #585) #46)
#49 := (forall (vars (?v0 S1)) #46)
#589 := (iff #49 #586)
#587 := (iff #46 #46)
#588 := [refl]: #587
#590 := [quant-intro #588]: #589
#105 := (or #71 #85)
#110 := (and #49 #105)
#64 := (not #72)
#90 := (or #85 #64)
#91 := (or #49 #49)
#92 := (and #91 #90)
#111 := (iff #92 #110)
#108 := (iff #90 #105)
#102 := (or #85 #71)
#106 := (iff #102 #105)
#107 := [rewrite]: #106
#103 := (iff #90 #102)
#100 := (iff #64 #71)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#109 := [trans #104 #107]: #108
#98 := (iff #91 #49)
#99 := [rewrite]: #98
#112 := [monotonicity #99 #109]: #111
#40 := (exists (vars (?v0 S1)) #37)
#58 := (iff #40 #49)
#93 := (~ #58 #92)
#79 := (~ #49 #49)
#77 := (~ #46 #46)
#78 := [refl]: #77
#80 := [nnf-pos #78]: #79
#66 := (not #49)
#73 := (~ #66 #64)
#74 := [sk]: #73
#86 := (~ #40 #85)
#87 := [sk]: #86
#43 := (not #40)
#81 := (~ #43 #49)
#82 := [nnf-neg #78]: #81
#94 := [nnf-pos #82 #87 #74 #80]: #93
#10 := (= #9 f1)
#13 := (not #10)
#14 := (forall (vars (?v0 S1)) #13)
#11 := (exists (vars (?v0 S1)) #10)
#12 := (not #11)
#15 := (iff #12 #14)
#16 := (not #15)
#61 := (iff #16 #58)
#52 := (iff #43 #49)
#55 := (not #52)
#59 := (iff #55 #58)
#60 := [rewrite]: #59
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39]: #47
#51 := [quant-intro #48]: #50
#44 := (iff #12 #43)
#41 := (iff #11 #40)
#42 := [quant-intro #39]: #41
#45 := [monotonicity #42]: #44
#54 := [monotonicity #45 #51]: #53
#57 := [monotonicity #54]: #56
#62 := [trans #57 #60]: #61
#36 := [asserted]: #16
#65 := [mp #36 #62]: #58
#95 := [mp~ #65 #94]: #92
#96 := [mp #95 #112]: #110
#97 := [and-elim #96]: #49
#591 := [mp #97 #590]: #586
#168 := (not #586)
#255 := (or #168 #72)
#169 := [quant-inst #69]: #255
#254 := [unit-resolution #169 #591 #167]: false
#256 := [lemma #254]: #72
#113 := [and-elim #96]: #105
#258 := [unit-resolution #113 #256]: #85
#247 := (not #85)
#187 := (or #168 #247)
#260 := [quant-inst #83]: #187
[unit-resolution #260 #591 #258]: false
unsat
ebdc89108806093e6794a177b157cfa4cf50cf95 226 0
#2 := false
decl f3 :: (-> S1 S1)
decl ?v0!0 :: S1
#87 := ?v0!0
#88 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#89 := (= f1 #88)
#90 := (not #89)
decl ?v0!1 :: S1
#119 := ?v0!1
#120 := (f3 ?v0!1)
#121 := (= f1 #120)
#122 := (not #121)
#254 := [hypothesis]: #122
#8 := (:var 0 S1)
#9 := (f3 #8)
#630 := (pattern #9)
#39 := (= f1 #9)
#631 := (forall (vars (?v0 S1)) (:pat #630) #39)
#636 := (not #631)
decl f4 :: S1
#11 := f4
#42 := (= f1 f4)
#639 := (or #42 #636)
#642 := (not #639)
#48 := (not #39)
#49 := (or #48 #42)
#97 := (not #49)
#645 := (forall (vars (?v0 S1)) (:pat #630) #97)
#285 := (not #645)
#266 := (or #42 #90)
#127 := (or #42 #122)
#305 := (not #127)
#620 := [hypothesis]: #645
#621 := (or #305 #285)
#282 := [hypothesis]: #127
#622 := (or #285 #305)
#292 := (or #122 #42)
#303 := (not #292)
#624 := (or #285 #303)
#411 := (iff #624 #622)
#290 := (iff #622 #622)
#291 := [rewrite]: #290
#302 := (iff #303 #305)
#304 := (iff #292 #127)
#232 := [rewrite]: #304
#306 := [monotonicity #232]: #302
#618 := [monotonicity #306]: #411
#625 := [trans #618 #291]: #411
#279 := [quant-inst #119]: #624
#626 := [mp #279 #625]: #622
#278 := [unit-resolution #626 #620 #282]: false
#262 := [lemma #278]: #621
#310 := [unit-resolution #262 #620]: #305
#623 := (or #127 #121)
#629 := [def-axiom]: #623
#326 := [unit-resolution #629 #310]: #121
#103 := (not #42)
#627 := (or #127 #103)
#628 := [def-axiom]: #627
#327 := [unit-resolution #628 #310]: #103
#141 := (or #42 #90 #122)
#57 := (forall (vars (?v0 S1)) #39)
#113 := (and #103 #57)
#100 := (forall (vars (?v0 S1)) #97)
#138 := (or #100 #113)
#144 := (and #138 #141)
#82 := (or #90 #42)
#130 := (or #127 #82)
#131 := (or #113 #100)
#132 := (and #131 #130)
#145 := (iff #132 #144)
#142 := (iff #130 #141)
#143 := [rewrite]: #142
#139 := (iff #131 #138)
#140 := [rewrite]: #139
#146 := [monotonicity #140 #143]: #145
#54 := (exists (vars (?v0 S1)) #49)
#75 := (not #54)
#63 := (not #57)
#64 := (or #42 #63)
#76 := (iff #64 #75)
#133 := (~ #76 #132)
#101 := (~ #75 #100)
#98 := (~ #97 #97)
#99 := [refl]: #98
#102 := [nnf-neg #99]: #101
#94 := (not #75)
#95 := (~ #94 #82)
#84 := (~ #54 #82)
#91 := [sk]: #84
#96 := [nnf-neg #91]: #95
#128 := (~ #64 #127)
#123 := (~ #63 #122)
#124 := [sk]: #123
#117 := (~ #42 #42)
#118 := [refl]: #117
#129 := [monotonicity #118 #124]: #128
#114 := (not #64)
#115 := (~ #114 #113)
#110 := (not #63)
#111 := (~ #110 #57)
#108 := (~ #57 #57)
#106 := (~ #39 #39)
#107 := [refl]: #106
#109 := [nnf-pos #107]: #108
#112 := [nnf-neg #109]: #111
#104 := (~ #103 #103)
#105 := [refl]: #104
#116 := [nnf-neg #105 #112]: #115
#134 := [nnf-pos #116 #129 #96 #102]: #133
#12 := (= f4 f1)
#10 := (= #9 f1)
#15 := (forall (vars (?v0 S1)) #10)
#16 := (implies #15 #12)
#13 := (implies #10 #12)
#14 := (exists (vars (?v0 S1)) #13)
#17 := (iff #14 #16)
#18 := (not #17)
#79 := (iff #18 #76)
#69 := (iff #54 #64)
#72 := (not #69)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #18 #72)
#70 := (iff #17 #69)
#67 := (iff #16 #64)
#60 := (implies #57 #42)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #16 #60)
#43 := (iff #12 #42)
#44 := [rewrite]: #43
#58 := (iff #15 #57)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#59 := [quant-intro #41]: #58
#62 := [monotonicity #59 #44]: #61
#68 := [trans #62 #66]: #67
#55 := (iff #14 #54)
#52 := (iff #13 #49)
#45 := (implies #39 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #13 #45)
#47 := [monotonicity #41 #44]: #46
#53 := [trans #47 #51]: #52
#56 := [quant-intro #53]: #55
#71 := [monotonicity #56 #68]: #70
#74 := [monotonicity #71]: #73
#80 := [trans #74 #78]: #79
#38 := [asserted]: #18
#83 := [mp #38 #80]: #76
#135 := [mp~ #83 #134]: #132
#136 := [mp #135 #146]: #144
#147 := [and-elim #136]: #141
#328 := [unit-resolution #147 #327 #326]: #90
#614 := (or #266 #89)
#617 := [def-axiom]: #614
#314 := [unit-resolution #617 #328]: #266
#269 := (not #266)
#609 := (or #285 #269)
#605 := (not #82)
#610 := (or #285 #605)
#606 := (iff #610 #609)
#248 := (iff #609 #609)
#613 := [rewrite]: #248
#607 := (iff #605 #269)
#267 := (iff #82 #266)
#268 := [rewrite]: #267
#608 := [monotonicity #268]: #607
#612 := [monotonicity #608]: #606
#615 := [trans #612 #613]: #606
#611 := [quant-inst #87]: #610
#253 := [mp #611 #615]: #609
#329 := [unit-resolution #253 #620 #314]: false
#220 := [lemma #329]: #285
#650 := (or #642 #645)
#149 := (or #114 #100)
#651 := (iff #149 #650)
#648 := (iff #100 #645)
#646 := (iff #97 #97)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#643 := (iff #114 #642)
#640 := (iff #64 #639)
#637 := (iff #63 #636)
#634 := (iff #57 #631)
#632 := (iff #39 #39)
#633 := [refl]: #632
#635 := [quant-intro #633]: #634
#638 := [monotonicity #635]: #637
#641 := [monotonicity #638]: #640
#644 := [monotonicity #641]: #643
#652 := [monotonicity #644 #649]: #651
#152 := (iff #138 #149)
#125 := (or #100 #114)
#150 := (iff #125 #149)
#151 := [rewrite]: #150
#126 := (iff #138 #125)
#92 := (iff #113 #114)
#93 := [rewrite]: #92
#148 := [monotonicity #93]: #126
#153 := [trans #148 #151]: #152
#137 := [and-elim #136]: #138
#154 := [mp #137 #153]: #149
#653 := [mp #154 #652]: #650
#616 := [unit-resolution #653 #220]: #642
#213 := (or #639 #631)
#300 := [def-axiom]: #213
#599 := [unit-resolution #300 #616]: #631
#603 := (or #636 #121)
#604 := [quant-inst #119]: #603
#600 := [unit-resolution #604 #599 #254]: false
#322 := [lemma #600]: #121
#597 := (or #90 #122)
#212 := (or #639 #103)
#299 := [def-axiom]: #212
#323 := [unit-resolution #299 #616]: #103
#602 := [unit-resolution #147 #323]: #597
#311 := [unit-resolution #602 #322]: #90
#601 := (or #636 #89)
#598 := [quant-inst #87]: #601
[unit-resolution #598 #599 #311]: false
unsat
797f3bc02d63ecc5168af260ca5e6bfbc4eb39d0 156 0
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f4 :: S1
#15 := f4
#16 := (f3 f4 #9)
#609 := (pattern #16)
decl f1 :: S1
#4 := f1
#57 := (= f1 #16)
#106 := (not #57)
#610 := (forall (vars (?v0 S2)) (:pat #609) #106)
decl f5 :: S2
#19 := f5
#20 := (f3 f4 f5)
#63 := (= f1 #20)
#184 := (= f1 f4)
#185 := (iff #63 #184)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#602 := (pattern #10)
#48 := (= f1 #8)
#45 := (= f1 #10)
#51 := (iff #45 #48)
#603 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #602) #51)
#54 := (forall (vars (?v0 S1) (?v1 S2)) #51)
#606 := (iff #54 #603)
#604 := (iff #51 #51)
#605 := [refl]: #604
#607 := [quant-intro #605]: #606
#88 := (~ #54 #54)
#95 := (~ #51 #51)
#96 := [refl]: #95
#89 := [nnf-pos #96]: #88
#60 := (exists (vars (?v0 S2)) #57)
#66 := (iff #60 #63)
#72 := (not #54)
#73 := (or #72 #66)
#78 := (not #73)
#21 := (= #20 f1)
#17 := (= #16 f1)
#18 := (exists (vars (?v0 S2)) #17)
#22 := (iff #18 #21)
#12 := (= #8 f1)
#11 := (= #10 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#23 := (implies #14 #22)
#24 := (not #23)
#79 := (iff #24 #78)
#76 := (iff #23 #73)
#69 := (implies #54 #66)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #23 #69)
#67 := (iff #22 #66)
#64 := (iff #21 #63)
#65 := [rewrite]: #64
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#68 := [monotonicity #62 #65]: #67
#55 := (iff #14 #54)
#52 := (iff #13 #51)
#49 := (iff #12 #48)
#50 := [rewrite]: #49
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#53 := [monotonicity #47 #50]: #52
#56 := [quant-intro #53]: #55
#71 := [monotonicity #56 #68]: #70
#77 := [trans #71 #75]: #76
#80 := [monotonicity #77]: #79
#44 := [asserted]: #24
#83 := [mp #44 #80]: #78
#81 := [not-or-elim #83]: #54
#86 := [mp~ #81 #89]: #54
#608 := [mp #86 #607]: #603
#186 := (not #603)
#262 := (or #186 #185)
#263 := [quant-inst #15 #19]: #262
#272 := [unit-resolution #263 #608]: #185
decl ?v0!0 :: S2
#87 := ?v0!0
#97 := (f3 f4 ?v0!0)
#98 := (= f1 #97)
#271 := (iff #98 #184)
#273 := (or #186 #271)
#264 := [quant-inst #15 #87]: #273
#590 := [unit-resolution #264 #608]: #271
#275 := (not #271)
#593 := (or #275 #184)
#112 := (not #63)
#592 := [hypothesis]: #112
#117 := (or #63 #98)
#109 := (forall (vars (?v0 S2)) #106)
#118 := (or #112 #109)
#125 := (and #117 #118)
#119 := (and #118 #117)
#126 := (iff #119 #125)
#127 := [rewrite]: #126
#90 := (not #60)
#91 := (iff #63 #90)
#120 := (~ #91 #119)
#110 := (~ #90 #109)
#107 := (~ #106 #106)
#108 := [refl]: #107
#111 := [nnf-neg #108]: #110
#103 := (not #90)
#104 := (~ #103 #98)
#99 := (~ #60 #98)
#100 := [sk]: #99
#105 := [nnf-neg #100]: #104
#115 := (~ #63 #63)
#116 := [refl]: #115
#113 := (~ #112 #112)
#114 := [refl]: #113
#121 := [nnf-pos #114 #116 #105 #111]: #120
#82 := (not #66)
#92 := (iff #82 #91)
#93 := [rewrite]: #92
#84 := [not-or-elim #83]: #82
#94 := [mp #84 #93]: #91
#122 := [mp~ #94 #121]: #119
#123 := [mp #122 #127]: #125
#124 := [and-elim #123]: #117
#250 := [unit-resolution #124 #592]: #98
#274 := (not #98)
#278 := (or #275 #274 #184)
#257 := [def-axiom]: #278
#234 := [unit-resolution #257 #250]: #593
#577 := [unit-resolution #234 #590]: #184
#276 := (not #184)
#597 := (not #185)
#238 := (or #597 #276)
#598 := (or #597 #63 #276)
#599 := [def-axiom]: #598
#239 := [unit-resolution #599 #592]: #238
#240 := [unit-resolution #239 #577 #272]: false
#241 := [lemma #240]: #63
#615 := (or #112 #610)
#616 := (iff #118 #615)
#613 := (iff #109 #610)
#611 := (iff #106 #106)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#617 := [monotonicity #614]: #616
#128 := [and-elim #123]: #118
#618 := [mp #128 #617]: #615
#204 := [unit-resolution #618 #241]: #610
#601 := (not #610)
#591 := (or #601 #112)
#249 := [quant-inst #19]: #591
[unit-resolution #249 #241 #204]: false
unsat
c5bac93463cdcf5247c83e8a4ad5b209aa936d19 108 0
#2 := false
decl f3 :: (-> S1 S1)
#11 := (:var 0 S1)
#12 := (f3 #11)
#594 := (pattern #12)
decl f1 :: S1
#4 := f1
#48 := (= f1 #12)
#57 := (not #48)
#595 := (forall (vars (?v0 S1)) (:pat #594) #57)
#60 := (forall (vars (?v0 S1)) #57)
#598 := (iff #60 #595)
#596 := (iff #57 #57)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#51 := (exists (vars (?v0 S1)) #48)
#54 := (not #51)
#116 := (~ #54 #60)
#118 := (~ #57 #57)
#119 := [refl]: #118
#117 := [nnf-neg #119]: #116
decl f4 :: S1
#8 := f4
#9 := (f3 f4)
#45 := (= f1 #9)
#63 := (ite #45 #54 #60)
#113 := (iff #63 #54)
#1 := true
#108 := (ite true #54 #60)
#111 := (iff #108 #54)
#112 := [rewrite]: #111
#109 := (iff #63 #108)
#106 := (iff #45 true)
decl f5 :: S1
#19 := f5
#20 := (f3 f5)
#66 := (= f1 #20)
#81 := (not #63)
#72 := (not #45)
#90 := (or #72 #81 #66)
#93 := (not #90)
#21 := (= #20 f1)
#10 := (= #9 f1)
#22 := (implies #10 #21)
#13 := (= #12 f1)
#16 := (not #13)
#17 := (forall (vars (?v0 S1)) #16)
#14 := (exists (vars (?v0 S1)) #13)
#15 := (not #14)
#18 := (ite #10 #15 #17)
#23 := (implies #18 #22)
#24 := (not #23)
#96 := (iff #24 #93)
#73 := (or #72 #66)
#82 := (or #81 #73)
#87 := (not #82)
#94 := (iff #87 #93)
#91 := (iff #82 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#88 := (iff #24 #87)
#85 := (iff #23 #82)
#78 := (implies #63 #73)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #23 #78)
#76 := (iff #22 #73)
#69 := (implies #45 #66)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #22 #69)
#67 := (iff #21 #66)
#68 := [rewrite]: #67
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#71 := [monotonicity #47 #68]: #70
#77 := [trans #71 #75]: #76
#64 := (iff #18 #63)
#61 := (iff #17 #60)
#58 := (iff #16 #57)
#49 := (iff #13 #48)
#50 := [rewrite]: #49
#59 := [monotonicity #50]: #58
#62 := [quant-intro #59]: #61
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#53 := [quant-intro #50]: #52
#56 := [monotonicity #53]: #55
#65 := [monotonicity #47 #56 #62]: #64
#80 := [monotonicity #65 #77]: #79
#86 := [trans #80 #84]: #85
#89 := [monotonicity #86]: #88
#97 := [trans #89 #95]: #96
#44 := [asserted]: #24
#98 := [mp #44 #97]: #93
#99 := [not-or-elim #98]: #45
#107 := [iff-true #99]: #106
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#100 := [not-or-elim #98]: #63
#115 := [mp #100 #114]: #54
#104 := [mp~ #115 #117]: #60
#600 := [mp #104 #599]: #595
#177 := (not #595)
#264 := (or #177 #72)
#178 := [quant-inst #8]: #264
[unit-resolution #178 #99 #600]: false
unsat
b90e8903a4ebccab3cc9334859f67c0dd9c9e46e 183 2
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f5 :: S1
#24 := f5
#25 := (f3 f5 #9)
#706 := (pattern #25)
decl f1 :: S1
#4 := f1
#83 := (= f1 #25)
#187 := (not #83)
#707 := (forall (vars (?v0 S2)) (:pat #706) #187)
decl f4 :: S2
#18 := f4
#28 := (f3 f5 f4)
#89 := (= f1 #28)
#265 := (= f1 f5)
#266 := (iff #89 #265)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#683 := (pattern #10)
#56 := (= f1 #8)
#53 := (= f1 #10)
#59 := (iff #53 #56)
#684 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #683) #59)
#62 := (forall (vars (?v0 S1) (?v1 S2)) #59)
#687 := (iff #62 #684)
#685 := (iff #59 #59)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#118 := (~ #62 #62)
#125 := (~ #59 #59)
#126 := [refl]: #125
#119 := [nnf-pos #126]: #118
#17 := (:var 0 S1)
#19 := (f3 #17 f4)
#71 := (= f1 #19)
#74 := (forall (vars (?v0 S1)) #71)
#65 := (exists (vars (?v1 S2)) #53)
#68 := (forall (vars (?v0 S1)) #65)
#77 := (iff #68 #74)
#80 := (and #62 #77)
#86 := (exists (vars (?v0 S2)) #83)
#92 := (iff #86 #89)
#98 := (not #80)
#99 := (or #98 #92)
#104 := (not #99)
#29 := (= #28 f1)
#26 := (= #25 f1)
#27 := (exists (vars (?v0 S2)) #26)
#30 := (iff #27 #29)
#20 := (= #19 f1)
#21 := (forall (vars (?v0 S1)) #20)
#11 := (= #10 f1)
#15 := (exists (vars (?v1 S2)) #11)
#16 := (forall (vars (?v0 S1)) #15)
#22 := (iff #16 #21)
#12 := (= #8 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#23 := (and #14 #22)
#31 := (implies #23 #30)
#32 := (not #31)
#105 := (iff #32 #104)
#102 := (iff #31 #99)
#95 := (implies #80 #92)
#100 := (iff #95 #99)
#101 := [rewrite]: #100
#96 := (iff #31 #95)
#93 := (iff #30 #92)
#90 := (iff #29 #89)
#91 := [rewrite]: #90
#87 := (iff #27 #86)
#84 := (iff #26 #83)
#85 := [rewrite]: #84
#88 := [quant-intro #85]: #87
#94 := [monotonicity #88 #91]: #93
#81 := (iff #23 #80)
#78 := (iff #22 #77)
#75 := (iff #21 #74)
#72 := (iff #20 #71)
#73 := [rewrite]: #72
#76 := [quant-intro #73]: #75
#69 := (iff #16 #68)
#66 := (iff #15 #65)
#54 := (iff #11 #53)
#55 := [rewrite]: #54
#67 := [quant-intro #55]: #66
#70 := [quant-intro #67]: #69
#79 := [monotonicity #70 #76]: #78
#63 := (iff #14 #62)
#60 := (iff #13 #59)
#57 := (iff #12 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #55 #58]: #60
#64 := [quant-intro #61]: #63
#82 := [monotonicity #64 #79]: #81
#97 := [monotonicity #82 #94]: #96
#103 := [trans #97 #101]: #102
#106 := [monotonicity #103]: #105
#52 := [asserted]: #32
#109 := [mp #52 #106]: #104
#107 := [not-or-elim #109]: #80
#108 := [and-elim #107]: #62
#116 := [mp~ #108 #119]: #62
#689 := [mp #116 #688]: #684
#267 := (not #684)
#343 := (or #267 #266)
#344 := [quant-inst #24 #18]: #343
#353 := [unit-resolution #344 #689]: #266
decl ?v0!3 :: S2
#158 := ?v0!3
#159 := (f3 f5 ?v0!3)
#131 := (= f1 #159)
#352 := (iff #131 #265)
#354 := (or #267 #352)
#345 := [quant-inst #24 #158]: #354
#671 := [unit-resolution #345 #689]: #352
#356 := (not #352)
#674 := (or #356 #265)
#193 := (not #89)
#673 := [hypothesis]: #193
#198 := (or #89 #131)
#190 := (forall (vars (?v0 S2)) #187)
#199 := (or #193 #190)
#206 := (and #198 #199)
#200 := (and #199 #198)
#207 := (iff #200 #206)
#208 := [rewrite]: #207
#120 := (not #86)
#121 := (iff #89 #120)
#201 := (~ #121 #200)
#191 := (~ #120 #190)
#188 := (~ #187 #187)
#189 := [refl]: #188
#192 := [nnf-neg #189]: #191
#184 := (not #120)
#185 := (~ #184 #131)
#132 := (~ #86 #131)
#181 := [sk]: #132
#186 := [nnf-neg #181]: #185
#196 := (~ #89 #89)
#197 := [refl]: #196
#194 := (~ #193 #193)
#195 := [refl]: #194
#202 := [nnf-pos #195 #197 #186 #192]: #201
#111 := (not #92)
#122 := (iff #111 #121)
#123 := [rewrite]: #122
#112 := [not-or-elim #109]: #111
#124 := [mp #112 #123]: #121
#203 := [mp~ #124 #202]: #200
#204 := [mp #203 #208]: #206
#205 := [and-elim #204]: #198
#331 := [unit-resolution #205 #673]: #131
#355 := (not #131)
#359 := (or #356 #355 #265)
#338 := [def-axiom]: #359
#315 := [unit-resolution #338 #331]: #674
#658 := [unit-resolution #315 #671]: #265
#357 := (not #265)
#678 := (not #266)
#319 := (or #678 #357)
#679 := (or #678 #89 #357)
#680 := [def-axiom]: #679
#320 := [unit-resolution #680 #673]: #319
#321 := [unit-resolution #320 #658 #353]: false
#322 := [lemma #321]: #89
#712 := (or #193 #707)
#713 := (iff #199 #712)
#710 := (iff #190 #707)
#708 := (iff #187 #187)
#709 := [refl]: #708
#711 := [quant-intro #709]: #710
#714 := [monotonicity #711]: #713
#209 := [and-elim #204]: #199
#715 := [mp #209 #714]: #712
#285 := [unit-resolution #715 #322]: #707
#682 := (not #707)
#672 := (or #682 #193)
#330 := [quant-inst #18]: #672
[unit-resolution #330 #322 #285]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!13)

cf98925786c68d5a17b4ee8fe1163a0f1d843aa1 1 0
unsat
626a766d3e6816fc4d39780448f9c6b7965da15c 1 0
unsat
68ad5c1894eaab883254275ec13820f7e76ea225 1 2
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!13)

ee9f8da531dcfedbb294b056035428c17f32aedf 1 0
unsat
2a5b706bf84284386d7f4c39da1625c2ab4e3778 1 0
unsat
f010ef4b805535e5ca8fec6afaee63fc30f4e69e 1 0
unsat
9cb750c0f8a06bad91d2052f6046dd5974818efe 1 0
unsat
08358038248416355849cc7ae66f2673721af28b 1 0
unsat
ac618ea2f315b87a071d15251b68179d70f7a036 107 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#597 := (pattern #9)
decl f1 :: S1
#4 := f1
#40 := (= f1 #9)
#46 := (not #40)
#604 := (forall (vars (?v0 S2)) (:pat #597) #46)
#118 := (forall (vars (?v0 S2)) #46)
#607 := (iff #118 #604)
#605 := (iff #46 #46)
#606 := [refl]: #605
#608 := [quant-intro #606]: #607
#61 := (exists (vars (?v0 S2)) #40)
#77 := (not #61)
#119 := (~ #77 #118)
#116 := (~ #46 #46)
#117 := [refl]: #116
#120 := [nnf-neg #117]: #119
#11 := (:var 1 S2)
#12 := (= #8 #11)
#47 := (or #12 #46)
#52 := (forall (vars (?v1 S2)) #47)
#55 := (and #40 #52)
#58 := (exists (vars (?v0 S2)) #55)
#67 := (not #58)
#68 := (or #67 #61)
#73 := (not #68)
#10 := (= #9 f1)
#17 := (exists (vars (?v0 S2)) #10)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#16 := (exists (vars (?v0 S2)) #15)
#18 := (implies #16 #17)
#19 := (not #18)
#74 := (iff #19 #73)
#71 := (iff #18 #68)
#64 := (implies #58 #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #18 #64)
#62 := (iff #17 #61)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#63 := [quant-intro #42]: #62
#59 := (iff #16 #58)
#56 := (iff #15 #55)
#53 := (iff #14 #52)
#50 := (iff #13 #47)
#43 := (implies #40 #12)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #13 #43)
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [quant-intro #51]: #53
#57 := [monotonicity #42 #54]: #56
#60 := [quant-intro #57]: #59
#66 := [monotonicity #60 #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#39 := [asserted]: #19
#78 := [mp #39 #75]: #73
#79 := [not-or-elim #78]: #77
#121 := [mp~ #79 #120]: #118
#609 := [mp #121 #608]: #604
decl ?v0!0 :: S2
#87 := ?v0!0
#81 := (f3 ?v0!0)
#82 := (= f1 #81)
#88 := (= #8 ?v0!0)
#106 := (or #46 #88)
#109 := (forall (vars (?v1 S2)) #106)
#112 := (and #82 #109)
#89 := (or #88 #46)
#90 := (forall (vars (?v1 S2)) #89)
#91 := (and #82 #90)
#113 := (iff #91 #112)
#110 := (iff #90 #109)
#107 := (iff #89 #106)
#108 := [rewrite]: #107
#111 := [quant-intro #108]: #110
#114 := [monotonicity #111]: #113
#92 := (~ #58 #91)
#100 := (~ #91 #91)
#98 := (~ #90 #90)
#96 := (~ #89 #89)
#97 := [refl]: #96
#99 := [nnf-pos #97]: #98
#94 := (~ #82 #82)
#95 := [refl]: #94
#101 := [monotonicity #95 #99]: #100
#93 := [sk]: #92
#102 := [trans #93 #101]: #92
#76 := [not-or-elim #78]: #58
#103 := [mp~ #76 #102]: #91
#104 := [mp #103 #114]: #112
#105 := [and-elim #104]: #82
#179 := (not #82)
#267 := (not #604)
#181 := (or #267 #179)
#268 := [quant-inst #87]: #181
[unit-resolution #268 #105 #609]: false
unsat
c1764d5fdaaf5fcd099b25c4b805ce423c186fa4 75 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#18 := (not #10)
#11 := (:var 1 S2)
#12 := (= #8 #11)
#17 := (not #12)
#19 := (implies #17 #18)
#20 := (forall (vars (?v1 S2)) #19)
#21 := (and #10 #20)
#22 := (exists (vars (?v0 S2)) #21)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#16 := (exists (vars (?v0 S2)) #15)
#23 := (iff #16 #22)
#24 := (not #23)
#93 := (iff #24 false)
#1 := true
#88 := (not true)
#91 := (iff #88 false)
#92 := [rewrite]: #91
#89 := (iff #24 #88)
#86 := (iff #23 true)
#45 := (= f1 #9)
#51 := (not #45)
#52 := (or #12 #51)
#57 := (forall (vars (?v1 S2)) #52)
#60 := (and #45 #57)
#63 := (exists (vars (?v0 S2)) #60)
#81 := (iff #63 #63)
#84 := (iff #81 true)
#85 := [rewrite]: #84
#82 := (iff #23 #81)
#79 := (iff #22 #63)
#77 := (iff #21 #60)
#75 := (iff #20 #57)
#73 := (iff #19 #52)
#68 := (implies #17 #51)
#71 := (iff #68 #52)
#72 := [rewrite]: #71
#69 := (iff #19 #68)
#66 := (iff #18 #51)
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#67 := [monotonicity #47]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#76 := [quant-intro #74]: #75
#78 := [monotonicity #47 #76]: #77
#80 := [quant-intro #78]: #79
#64 := (iff #16 #63)
#61 := (iff #15 #60)
#58 := (iff #14 #57)
#55 := (iff #13 #52)
#48 := (implies #45 #12)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #13 #48)
#50 := [monotonicity #47]: #49
#56 := [trans #50 #54]: #55
#59 := [quant-intro #56]: #58
#62 := [monotonicity #47 #59]: #61
#65 := [quant-intro #62]: #64
#83 := [monotonicity #65 #80]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#44 := [asserted]: #24
[mp #44 #94]: false
unsat
39e6e981f54bfbbd33de190a32e637bca3addace 207 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!0 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#224 := (?v1!0 f4)
#225 := (f3 #224)
decl f1 :: S1
#4 := f1
#312 := (= f1 #225)
#226 := (not #312)
#311 := (= f4 #224)
#316 := (or #311 #226)
#314 := (not #316)
#11 := (:var 0 S2)
#12 := (f3 #11)
#642 := (pattern #12)
#123 := (?v1!0 #11)
#150 := (= #11 #123)
#124 := (f3 #123)
#120 := (= f1 #124)
#131 := (not #120)
#156 := (or #131 #150)
#161 := (not #156)
#49 := (= f1 #12)
#58 := (not #49)
#164 := (or #58 #161)
#649 := (forall (vars (?v0 S2)) (:pat #642) #164)
#167 := (forall (vars (?v0 S2)) #164)
#652 := (iff #167 #649)
#650 := (iff #164 #164)
#651 := [refl]: #650
#653 := [quant-intro #651]: #652
#132 := (= #123 #11)
#133 := (or #132 #131)
#134 := (not #133)
#140 := (or #58 #134)
#144 := (forall (vars (?v0 S2)) #140)
#168 := (iff #144 #167)
#165 := (iff #140 #164)
#162 := (iff #134 #161)
#159 := (iff #133 #156)
#153 := (or #150 #131)
#157 := (iff #153 #156)
#158 := [rewrite]: #157
#154 := (iff #133 #153)
#151 := (iff #132 #150)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#160 := [trans #155 #158]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#17 := (:var 1 S2)
#18 := (= #11 #17)
#70 := (or #18 #58)
#75 := (forall (vars (?v1 S2)) #70)
#78 := (and #49 #75)
#81 := (exists (vars (?v0 S2)) #78)
#116 := (not #81)
#145 := (~ #116 #144)
#141 := (not #78)
#142 := (~ #141 #140)
#135 := (not #75)
#136 := (~ #135 #134)
#137 := [sk]: #136
#122 := (~ #58 #58)
#119 := [refl]: #122
#143 := [nnf-neg #119 #137]: #142
#146 := [nnf-neg #143]: #145
#52 := (= f4 #11)
#59 := (or #58 #52)
#64 := (forall (vars (?v0 S2)) #59)
#87 := (not #64)
#9 := (f3 f4)
#46 := (= f1 #9)
#96 := (not #46)
#105 := (or #96 #87 #81)
#108 := (not #105)
#13 := (= #12 f1)
#19 := (implies #13 #18)
#20 := (forall (vars (?v1 S2)) #19)
#21 := (and #13 #20)
#22 := (exists (vars (?v0 S2)) #21)
#14 := (= #11 f4)
#15 := (implies #13 #14)
#16 := (forall (vars (?v0 S2)) #15)
#23 := (implies #16 #22)
#10 := (= #9 f1)
#24 := (implies #10 #23)
#25 := (not #24)
#111 := (iff #25 #108)
#88 := (or #87 #81)
#97 := (or #96 #88)
#102 := (not #97)
#109 := (iff #102 #108)
#106 := (iff #97 #105)
#107 := [rewrite]: #106
#110 := [monotonicity #107]: #109
#103 := (iff #25 #102)
#100 := (iff #24 #97)
#93 := (implies #46 #88)
#98 := (iff #93 #97)
#99 := [rewrite]: #98
#94 := (iff #24 #93)
#91 := (iff #23 #88)
#84 := (implies #64 #81)
#89 := (iff #84 #88)
#90 := [rewrite]: #89
#85 := (iff #23 #84)
#82 := (iff #22 #81)
#79 := (iff #21 #78)
#76 := (iff #20 #75)
#73 := (iff #19 #70)
#67 := (implies #49 #18)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #19 #67)
#50 := (iff #13 #49)
#51 := [rewrite]: #50
#69 := [monotonicity #51]: #68
#74 := [trans #69 #72]: #73
#77 := [quant-intro #74]: #76
#80 := [monotonicity #51 #77]: #79
#83 := [quant-intro #80]: #82
#65 := (iff #16 #64)
#62 := (iff #15 #59)
#55 := (implies #49 #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #15 #55)
#53 := (iff #14 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #51 #54]: #56
#63 := [trans #57 #61]: #62
#66 := [quant-intro #63]: #65
#86 := [monotonicity #66 #83]: #85
#92 := [trans #86 #90]: #91
#47 := (iff #10 #46)
#48 := [rewrite]: #47
#95 := [monotonicity #48 #92]: #94
#101 := [trans #95 #99]: #100
#104 := [monotonicity #101]: #103
#112 := [trans #104 #110]: #111
#45 := [asserted]: #25
#113 := [mp #45 #112]: #108
#117 := [not-or-elim #113]: #116
#147 := [mp~ #117 #146]: #144
#148 := [mp #147 #169]: #167
#654 := [mp #148 #653]: #649
#114 := [not-or-elim #113]: #46
#423 := (not #649)
#630 := (or #423 #96 #314)
#313 := (or #226 #311)
#304 := (not #313)
#315 := (or #96 #304)
#302 := (or #423 #315)
#641 := (iff #302 #630)
#634 := (or #96 #314)
#637 := (or #423 #634)
#640 := (iff #637 #630)
#635 := [rewrite]: #640
#638 := (iff #302 #637)
#636 := (iff #315 #634)
#318 := (iff #304 #314)
#244 := (iff #313 #316)
#317 := [rewrite]: #244
#297 := [monotonicity #317]: #318
#291 := [monotonicity #297]: #636
#639 := [monotonicity #291]: #638
#631 := [trans #639 #635]: #641
#303 := [quant-inst #8]: #302
#289 := [mp #303 #631]: #630
#598 := [unit-resolution #289 #114 #654]: #314
#633 := (or #316 #312)
#274 := [def-axiom]: #633
#599 := [unit-resolution #274 #598]: #312
#294 := (not #311)
#632 := (or #316 #294)
#290 := [def-axiom]: #632
#594 := [unit-resolution #290 #598]: #294
#643 := (forall (vars (?v0 S2)) (:pat #642) #59)
#646 := (iff #64 #643)
#644 := (iff #59 #59)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#129 := (~ #64 #64)
#127 := (~ #59 #59)
#128 := [refl]: #127
#130 := [nnf-pos #128]: #129
#115 := [not-or-elim #113]: #64
#121 := [mp~ #115 #130]: #64
#648 := [mp #121 #647]: #643
#279 := (not #643)
#280 := (or #279 #311 #226)
#281 := (or #279 #313)
#624 := (iff #281 #280)
#620 := (or #279 #316)
#623 := (iff #620 #280)
#618 := [rewrite]: #623
#621 := (iff #281 #620)
#622 := [monotonicity #317]: #621
#260 := [trans #622 #618]: #624
#619 := [quant-inst #224]: #281
#625 := [mp #619 #260]: #280
[unit-resolution #625 #648 #594 #599]: false
unsat
4b1b63f9918482e3acffbd2b8d473f76fd800caf 250 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!1 :: (-> S2 S2)
decl ?v0!0 :: S2
#126 := ?v0!0
#255 := (?v1!1 ?v0!0)
#256 := (f3 #255)
decl f1 :: S1
#4 := f1
#343 := (= f1 #256)
#257 := (not #343)
#342 := (= ?v0!0 #255)
#275 := (or #342 #257)
#349 := (not #275)
#8 := (:var 0 S2)
#9 := (f3 #8)
#680 := (pattern #9)
#122 := (?v1!1 #8)
#157 := (= #8 #122)
#123 := (f3 #122)
#137 := (= f1 #123)
#138 := (not #137)
#163 := (or #138 #157)
#168 := (not #163)
#47 := (= f1 #9)
#84 := (not #47)
#171 := (or #84 #168)
#681 := (forall (vars (?v0 S2)) (:pat #680) #171)
#174 := (forall (vars (?v0 S2)) #171)
#684 := (iff #174 #681)
#682 := (iff #171 #171)
#683 := [refl]: #682
#685 := [quant-intro #683]: #684
#139 := (= #122 #8)
#140 := (or #139 #138)
#141 := (not #140)
#147 := (or #84 #141)
#151 := (forall (vars (?v0 S2)) #147)
#175 := (iff #151 #174)
#172 := (iff #147 #171)
#169 := (iff #141 #168)
#166 := (iff #140 #163)
#160 := (or #157 #138)
#164 := (iff #160 #163)
#165 := [rewrite]: #164
#161 := (iff #140 #160)
#158 := (iff #139 #157)
#159 := [rewrite]: #158
#162 := [monotonicity #159]: #161
#167 := [trans #162 #165]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [quant-intro #173]: #175
#12 := (:var 1 S2)
#20 := (= #8 #12)
#85 := (or #20 #84)
#90 := (forall (vars (?v1 S2)) #85)
#93 := (and #47 #90)
#96 := (exists (vars (?v0 S2)) #93)
#115 := (not #96)
#152 := (~ #115 #151)
#148 := (not #93)
#149 := (~ #148 #147)
#142 := (not #90)
#143 := (~ #142 #141)
#144 := [sk]: #143
#135 := (~ #84 #84)
#136 := [refl]: #135
#150 := [nnf-neg #136 #144]: #149
#153 := [nnf-neg #150]: #152
#13 := (f3 #12)
#53 := (= f1 #13)
#59 := (and #47 #53)
#69 := (not #59)
#70 := (or #20 #69)
#75 := (forall (vars (?v0 S2) (?v1 S2)) #70)
#50 := (exists (vars (?v0 S2)) #47)
#78 := (and #50 #75)
#102 := (not #78)
#103 := (or #102 #96)
#108 := (not #103)
#10 := (= #9 f1)
#21 := (implies #10 #20)
#22 := (forall (vars (?v1 S2)) #21)
#23 := (and #10 #22)
#24 := (exists (vars (?v0 S2)) #23)
#16 := (= #12 #8)
#14 := (= #13 f1)
#15 := (and #14 #10)
#17 := (implies #15 #16)
#18 := (forall (vars (?v0 S2) (?v1 S2)) #17)
#11 := (exists (vars (?v0 S2)) #10)
#19 := (and #11 #18)
#25 := (implies #19 #24)
#26 := (not #25)
#109 := (iff #26 #108)
#106 := (iff #25 #103)
#99 := (implies #78 #96)
#104 := (iff #99 #103)
#105 := [rewrite]: #104
#100 := (iff #25 #99)
#97 := (iff #24 #96)
#94 := (iff #23 #93)
#91 := (iff #22 #90)
#88 := (iff #21 #85)
#81 := (implies #47 #20)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #21 #81)
#48 := (iff #10 #47)
#49 := [rewrite]: #48
#83 := [monotonicity #49]: #82
#89 := [trans #83 #87]: #88
#92 := [quant-intro #89]: #91
#95 := [monotonicity #49 #92]: #94
#98 := [quant-intro #95]: #97
#79 := (iff #19 #78)
#76 := (iff #18 #75)
#73 := (iff #17 #70)
#66 := (implies #59 #20)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #17 #66)
#64 := (iff #16 #20)
#65 := [rewrite]: #64
#62 := (iff #15 #59)
#56 := (and #53 #47)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #15 #56)
#54 := (iff #14 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55 #49]: #57
#63 := [trans #58 #61]: #62
#68 := [monotonicity #63 #65]: #67
#74 := [trans #68 #72]: #73
#77 := [quant-intro #74]: #76
#51 := (iff #11 #50)
#52 := [quant-intro #49]: #51
#80 := [monotonicity #52 #77]: #79
#101 := [monotonicity #80 #98]: #100
#107 := [trans #101 #105]: #106
#110 := [monotonicity #107]: #109
#46 := [asserted]: #26
#113 := [mp #46 #110]: #108
#116 := [not-or-elim #113]: #115
#154 := [mp~ #116 #153]: #151
#155 := [mp #154 #176]: #174
#686 := [mp #155 #685]: #681
#127 := (f3 ?v0!0)
#128 := (= f1 #127)
#129 := (~ #50 #128)
#118 := [sk]: #129
#111 := [not-or-elim #113]: #78
#112 := [and-elim #111]: #50
#131 := [mp~ #112 #118]: #128
#346 := (not #128)
#661 := (not #681)
#333 := (or #661 #346 #349)
#344 := (or #257 #342)
#335 := (not #344)
#347 := (or #346 #335)
#334 := (or #661 #347)
#662 := (iff #334 #333)
#667 := (or #346 #349)
#669 := (or #661 #667)
#666 := (iff #669 #333)
#672 := [rewrite]: #666
#670 := (iff #334 #669)
#322 := (iff #347 #667)
#328 := (iff #335 #349)
#348 := (iff #344 #275)
#345 := [rewrite]: #348
#665 := [monotonicity #345]: #328
#454 := [monotonicity #665]: #322
#671 := [monotonicity #454]: #670
#320 := [trans #671 #672]: #662
#668 := [quant-inst #126]: #334
#325 := [mp #668 #320]: #333
#456 := [unit-resolution #325 #131 #686]: #349
#305 := (or #275 #343)
#648 := [def-axiom]: #305
#609 := [unit-resolution #648 #456]: #343
#663 := (not #342)
#321 := (or #275 #663)
#664 := [def-axiom]: #321
#610 := [unit-resolution #664 #456]: #663
#673 := (pattern #9 #13)
#145 := (not #53)
#189 := (or #20 #84 #145)
#674 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #673) #189)
#194 := (forall (vars (?v0 S2) (?v1 S2)) #189)
#677 := (iff #194 #674)
#675 := (iff #189 #189)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#195 := (iff #75 #194)
#192 := (iff #70 #189)
#146 := (or #84 #145)
#186 := (or #20 #146)
#190 := (iff #186 #189)
#191 := [rewrite]: #190
#187 := (iff #70 #186)
#184 := (iff #69 #146)
#156 := (not #146)
#179 := (not #156)
#182 := (iff #179 #146)
#183 := [rewrite]: #182
#180 := (iff #69 #179)
#177 := (iff #59 #156)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#185 := [trans #181 #183]: #184
#188 := [monotonicity #185]: #187
#193 := [trans #188 #191]: #192
#196 := [quant-intro #193]: #195
#132 := (~ #75 #75)
#119 := (~ #70 #70)
#130 := [refl]: #119
#133 := [nnf-pos #130]: #132
#114 := [and-elim #111]: #75
#134 := [mp~ #114 #133]: #75
#197 := [mp #134 #196]: #194
#679 := [mp #197 #678]: #674
#630 := (not #674)
#625 := (or #630 #346 #342 #257)
#355 := (= #255 ?v0!0)
#356 := (or #355 #257 #346)
#626 := (or #630 #356)
#476 := (iff #626 #625)
#638 := (or #346 #342 #257)
#632 := (or #630 #638)
#474 := (iff #632 #625)
#475 := [rewrite]: #474
#627 := (iff #626 #632)
#628 := (iff #356 #638)
#637 := (or #342 #257 #346)
#635 := (iff #637 #638)
#639 := [rewrite]: #635
#350 := (iff #356 #637)
#358 := (iff #355 #342)
#636 := [rewrite]: #358
#634 := [monotonicity #636]: #350
#629 := [trans #634 #639]: #628
#633 := [monotonicity #629]: #627
#618 := [trans #633 #475]: #476
#631 := [quant-inst #126 #255]: #626
#619 := [mp #631 #618]: #625
[unit-resolution #619 #131 #679 #610 #609]: false
unsat
414b387cf896c5f2a72e6de8d5c3cc3d003f29bc 238 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!1 :: (-> S2 S2)
decl ?v0!0 :: S2
#119 := ?v0!0
#243 := (?v1!1 ?v0!0)
#244 := (f3 #243)
decl f1 :: S1
#4 := f1
#331 := (= f1 #244)
#245 := (not #331)
#330 := (= ?v0!0 #243)
#263 := (or #330 #245)
#337 := (not #263)
#8 := (:var 0 S2)
#9 := (f3 #8)
#661 := (pattern #9)
#148 := (?v1!1 #8)
#169 := (= #8 #148)
#149 := (f3 #148)
#150 := (= f1 #149)
#151 := (not #150)
#175 := (or #151 #169)
#180 := (not #175)
#44 := (= f1 #9)
#50 := (not #44)
#183 := (or #50 #180)
#668 := (forall (vars (?v0 S2)) (:pat #661) #183)
#186 := (forall (vars (?v0 S2)) #183)
#671 := (iff #186 #668)
#669 := (iff #183 #183)
#670 := [refl]: #669
#672 := [quant-intro #670]: #671
#152 := (= #148 #8)
#153 := (or #152 #151)
#154 := (not #153)
#160 := (or #50 #154)
#163 := (forall (vars (?v0 S2)) #160)
#187 := (iff #163 #186)
#184 := (iff #160 #183)
#181 := (iff #154 #180)
#178 := (iff #153 #175)
#172 := (or #169 #151)
#176 := (iff #172 #175)
#177 := [rewrite]: #176
#173 := (iff #153 #172)
#170 := (iff #152 #169)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#179 := [trans #174 #177]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#11 := (:var 1 S2)
#12 := (= #8 #11)
#51 := (or #12 #50)
#56 := (forall (vars (?v1 S2)) #51)
#59 := (and #44 #56)
#71 := (not #59)
#115 := (forall (vars (?v0 S2)) #71)
#164 := (~ #115 #163)
#161 := (~ #71 #160)
#155 := (not #56)
#156 := (~ #155 #154)
#157 := [sk]: #156
#146 := (~ #50 #50)
#147 := [refl]: #146
#162 := [nnf-neg #147 #157]: #161
#165 := [nnf-pos #162]: #164
decl f4 :: S1
#17 := f4
#65 := (= f1 f4)
#72 := (or #71 #65)
#77 := (forall (vars (?v0 S2)) #72)
#116 := (iff #77 #115)
#113 := (iff #72 #71)
#108 := (or #71 false)
#111 := (iff #108 #71)
#112 := [rewrite]: #111
#109 := (iff #72 #108)
#104 := (iff #65 false)
#95 := (not #65)
#62 := (exists (vars (?v0 S2)) #59)
#80 := (and #62 #77)
#86 := (not #80)
#87 := (or #65 #86)
#92 := (not #87)
#18 := (= f4 f1)
#10 := (= #9 f1)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 S2)) #19)
#16 := (exists (vars (?v0 S2)) #15)
#21 := (and #16 #20)
#22 := (implies #21 #18)
#23 := (not #22)
#93 := (iff #23 #92)
#90 := (iff #22 #87)
#83 := (implies #80 #65)
#88 := (iff #83 #87)
#89 := [rewrite]: #88
#84 := (iff #22 #83)
#66 := (iff #18 #65)
#67 := [rewrite]: #66
#81 := (iff #21 #80)
#78 := (iff #20 #77)
#75 := (iff #19 #72)
#68 := (implies #59 #65)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #19 #68)
#60 := (iff #15 #59)
#57 := (iff #14 #56)
#54 := (iff #13 #51)
#47 := (implies #44 #12)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #13 #47)
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#58 := [quant-intro #55]: #57
#61 := [monotonicity #46 #58]: #60
#70 := [monotonicity #61 #67]: #69
#76 := [trans #70 #74]: #75
#79 := [quant-intro #76]: #78
#63 := (iff #16 #62)
#64 := [quant-intro #61]: #63
#82 := [monotonicity #64 #79]: #81
#85 := [monotonicity #82 #67]: #84
#91 := [trans #85 #89]: #90
#94 := [monotonicity #91]: #93
#43 := [asserted]: #23
#97 := [mp #43 #94]: #92
#96 := [not-or-elim #97]: #95
#105 := [iff-false #96]: #104
#110 := [monotonicity #105]: #109
#114 := [trans #110 #112]: #113
#117 := [quant-intro #114]: #116
#98 := [not-or-elim #97]: #80
#100 := [and-elim #98]: #77
#118 := [mp #100 #117]: #115
#166 := [mp~ #118 #165]: #163
#167 := [mp #166 #188]: #186
#673 := [mp #167 #672]: #668
#102 := (f3 ?v0!0)
#103 := (= f1 #102)
#120 := (= #8 ?v0!0)
#136 := (or #50 #120)
#139 := (forall (vars (?v1 S2)) #136)
#142 := (and #103 #139)
#106 := (or #120 #50)
#107 := (forall (vars (?v1 S2)) #106)
#121 := (and #103 #107)
#143 := (iff #121 #142)
#140 := (iff #107 #139)
#137 := (iff #106 #136)
#138 := [rewrite]: #137
#141 := [quant-intro #138]: #140
#144 := [monotonicity #141]: #143
#122 := (~ #62 #121)
#130 := (~ #121 #121)
#128 := (~ #107 #107)
#126 := (~ #106 #106)
#127 := [refl]: #126
#129 := [nnf-pos #127]: #128
#124 := (~ #103 #103)
#125 := [refl]: #124
#131 := [monotonicity #125 #129]: #130
#123 := [sk]: #122
#132 := [trans #123 #131]: #122
#99 := [and-elim #98]: #62
#133 := [mp~ #99 #132]: #121
#134 := [mp #133 #144]: #142
#135 := [and-elim #134]: #103
#334 := (not #103)
#649 := (not #668)
#321 := (or #649 #334 #337)
#332 := (or #245 #330)
#323 := (not #332)
#335 := (or #334 #323)
#322 := (or #649 #335)
#650 := (iff #322 #321)
#655 := (or #334 #337)
#657 := (or #649 #655)
#654 := (iff #657 #321)
#660 := [rewrite]: #654
#658 := (iff #322 #657)
#310 := (iff #335 #655)
#316 := (iff #323 #337)
#336 := (iff #332 #263)
#333 := [rewrite]: #336
#653 := [monotonicity #333]: #316
#442 := [monotonicity #653]: #310
#659 := [monotonicity #442]: #658
#308 := [trans #659 #660]: #650
#656 := [quant-inst #119]: #322
#313 := [mp #656 #308]: #321
#614 := [unit-resolution #313 #135 #673]: #337
#293 := (or #263 #331)
#636 := [def-axiom]: #293
#619 := [unit-resolution #636 #614]: #331
#651 := (not #330)
#309 := (or #263 #651)
#652 := [def-axiom]: #309
#620 := [unit-resolution #652 #614]: #651
#662 := (forall (vars (?v1 S2)) (:pat #661) #136)
#665 := (iff #139 #662)
#663 := (iff #136 #136)
#664 := [refl]: #663
#666 := [quant-intro #664]: #665
#145 := [and-elim #134]: #139
#667 := [mp #145 #666]: #662
#643 := (not #662)
#279 := (or #643 #330 #245)
#299 := (= #243 ?v0!0)
#300 := (or #245 #299)
#644 := (or #643 #300)
#634 := (iff #644 #279)
#284 := (or #643 #263)
#645 := (iff #284 #279)
#648 := [rewrite]: #645
#285 := (iff #644 #284)
#642 := (iff #300 #263)
#640 := (iff #300 #332)
#638 := (iff #299 #330)
#639 := [rewrite]: #638
#641 := [monotonicity #639]: #640
#637 := [trans #641 #333]: #642
#647 := [monotonicity #637]: #285
#635 := [trans #647 #648]: #634
#646 := [quant-inst #243]: #644
#341 := [mp #646 #635]: #279
[unit-resolution #341 #667 #620 #619]: false
unsat
43a06f7db71bb40e30122f32a94b922612b5b5ed 93 0
#2 := false
decl f5 :: (-> S2 S1)
decl f6 :: S2
#16 := f6
#20 := (f5 f6)
decl f1 :: S1
#4 := f1
#68 := (= f1 #20)
#87 := (not #68)
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
#17 := (f3 f6 f4)
#62 := (= f1 #17)
#8 := (:var 0 S2)
#12 := (f5 #8)
#47 := (= f1 #12)
#10 := (f3 #8 f4)
#44 := (= f1 #10)
#53 := (not #44)
#54 := (or #53 #47)
#59 := (forall (vars (?v0 S2)) #54)
#65 := (and #59 #62)
#74 := (not #65)
#75 := (or #74 #68)
#80 := (not #75)
#21 := (= #20 f1)
#18 := (= #17 f1)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2)) #14)
#19 := (and #15 #18)
#22 := (implies #19 #21)
#23 := (not #22)
#81 := (iff #23 #80)
#78 := (iff #22 #75)
#71 := (implies #65 #68)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #22 #71)
#69 := (iff #21 #68)
#70 := [rewrite]: #69
#66 := (iff #19 #65)
#63 := (iff #18 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#57 := (iff #14 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [quant-intro #58]: #60
#67 := [monotonicity #61 #64]: #66
#73 := [monotonicity #67 #70]: #72
#79 := [trans #73 #77]: #78
#82 := [monotonicity #79]: #81
#43 := [asserted]: #23
#85 := [mp #43 #82]: #80
#88 := [not-or-elim #85]: #87
#83 := [not-or-elim #85]: #65
#86 := [and-elim #83]: #62
#571 := (pattern #12)
#570 := (pattern #10)
#572 := (forall (vars (?v0 S2)) (:pat #570 #571) #54)
#575 := (iff #59 #572)
#573 := (iff #54 #54)
#574 := [refl]: #573
#576 := [quant-intro #574]: #575
#100 := (~ #59 #59)
#98 := (~ #54 #54)
#99 := [refl]: #98
#101 := [nnf-pos #99]: #100
#84 := [and-elim #83]: #59
#90 := [mp~ #84 #101]: #59
#577 := [mp #90 #576]: #572
#152 := (not #62)
#154 := (not #572)
#241 := (or #154 #152 #68)
#239 := (or #152 #68)
#232 := (or #154 #239)
#244 := (iff #232 #241)
#172 := [rewrite]: #244
#243 := [quant-inst #16]: #232
#245 := [mp #243 #172]: #241
[unit-resolution #245 #577 #86 #88]: false
unsat
10b0ad71f1792bc4343d482448bd439666bec7e5 113 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f6 :: S2
#16 := f6
#19 := (f3 f6 f4)
decl f1 :: S1
#4 := f1
#60 := (= f1 #19)
decl f5 :: (-> S2 S1)
#17 := (f5 f6)
#57 := (= f1 #17)
#63 := (and #57 #60)
#66 := (not #63)
#8 := (:var 0 S2)
#12 := (f5 #8)
#48 := (= f1 #12)
#10 := (f3 #8 f4)
#45 := (= f1 #10)
#51 := (and #45 #48)
#54 := (exists (vars (?v0 S2)) #51)
#69 := (or #54 #66)
#72 := (not #69)
#20 := (= #19 f1)
#18 := (= #17 f1)
#21 := (and #18 #20)
#22 := (not #21)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (and #11 #13)
#15 := (exists (vars (?v0 S2)) #14)
#23 := (or #15 #22)
#24 := (not #23)
#73 := (iff #24 #72)
#70 := (iff #23 #69)
#67 := (iff #22 #66)
#64 := (iff #21 #63)
#61 := (iff #20 #60)
#62 := [rewrite]: #61
#58 := (iff #18 #57)
#59 := [rewrite]: #58
#65 := [monotonicity #59 #62]: #64
#68 := [monotonicity #65]: #67
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (iff #13 #48)
#50 := [rewrite]: #49
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#53 := [monotonicity #47 #50]: #52
#56 := [quant-intro #53]: #55
#71 := [monotonicity #56 #68]: #70
#74 := [monotonicity #71]: #73
#44 := [asserted]: #24
#77 := [mp #44 #74]: #72
#78 := [not-or-elim #77]: #63
#80 := [and-elim #78]: #60
#79 := [and-elim #78]: #57
#584 := (pattern #12)
#583 := (pattern #10)
#96 := (not #48)
#95 := (not #45)
#97 := (or #95 #96)
#585 := (forall (vars (?v0 S2)) (:pat #583 #584) #97)
#104 := (forall (vars (?v0 S2)) #97)
#588 := (iff #104 #585)
#586 := (iff #97 #97)
#587 := [refl]: #586
#589 := [quant-intro #587]: #588
#90 := (not #51)
#93 := (forall (vars (?v0 S2)) #90)
#105 := (iff #93 #104)
#102 := (iff #90 #97)
#98 := (not #97)
#86 := (not #98)
#100 := (iff #86 #97)
#101 := [rewrite]: #100
#87 := (iff #90 #86)
#88 := (iff #51 #98)
#89 := [rewrite]: #88
#99 := [monotonicity #89]: #87
#103 := [trans #99 #101]: #102
#106 := [quant-intro #103]: #105
#75 := (not #54)
#82 := (~ #75 #93)
#91 := (~ #90 #90)
#92 := [refl]: #91
#83 := [nnf-neg #92]: #82
#76 := [not-or-elim #77]: #75
#94 := [mp~ #76 #83]: #93
#107 := [mp #94 #106]: #104
#590 := [mp #107 #589]: #585
#252 := (not #60)
#165 := (not #57)
#245 := (not #585)
#256 := (or #245 #165 #252)
#166 := (or #252 #165)
#257 := (or #245 #166)
#577 := (iff #257 #256)
#253 := (or #165 #252)
#258 := (or #245 #253)
#238 := (iff #258 #256)
#575 := [rewrite]: #238
#255 := (iff #257 #258)
#167 := (iff #166 #253)
#254 := [rewrite]: #167
#259 := [monotonicity #254]: #255
#232 := [trans #259 #575]: #577
#185 := [quant-inst #16]: #257
#364 := [mp #185 #232]: #256
[unit-resolution #364 #590 #79 #80]: false
unsat
1ea0edf79c861d93e0b6cff855e43197b6927af2 43 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (not #12)
#14 := (or #12 #13)
#15 := (not #14)
#60 := (iff #15 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #15 #55)
#53 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (or #36 #39)
#45 := (not #42)
#48 := (or #42 #45)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #14 #48)
#46 := (iff #13 #45)
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #41]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #44 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#35 := [asserted]: #15
[mp #35 #61]: false
unsat
2efe31821fea4e444f1f58e423b1a3e1ab9b4cac 27 0
#2 := false
#1 := true
#9 := (or false true)
#8 := (and true false)
#10 := (implies #8 #9)
#11 := (not #10)
#48 := (iff #11 false)
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#41 := (iff #10 true)
#36 := (implies false true)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (iff #9 true)
#35 := [rewrite]: #34
#32 := (iff #8 false)
#33 := [rewrite]: #32
#38 := [monotonicity #33 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#31 := [asserted]: #11
[mp #31 #49]: false
unsat
eee4a504043afccce3195787f9f287f21c12ec9e 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (iff #10 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#33 := (= f1 #9)
#36 := (iff #33 #33)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#32 := [asserted]: #12
[mp #32 #49]: false
unsat
278fae448e44a4b7b524e9ac29b485b32979de5b 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#11 := (= #10 f1)
#12 := (iff #11 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#34 := (= f1 #10)
#37 := (iff #34 #34)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (iff #11 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#33 := [asserted]: #13
[mp #33 #50]: false
unsat
543fe903b7fa43c36b6d0fa84d517158fd95fbda 38 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (not #11)
#13 := (ite #11 #11 #12)
#14 := (not #13)
#56 := (iff #14 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #14 #51)
#49 := (iff #13 true)
#35 := (= f1 #9)
#38 := (forall (vars (?v0 S2)) #35)
#41 := (not #38)
#44 := (ite #38 #38 #41)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#36 := (iff #10 #35)
#37 := [rewrite]: #36
#40 := [quant-intro #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #40 #40 #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#34 := [asserted]: #14
[mp #34 #57]: false
unsat
3aff166df9d8da7d607b1c699d438273dc2fad39 38 0
#2 := false
decl f3 :: (-> S2 S2)
decl f4 :: S2
#13 := f4
#14 := (f3 f4)
#44 := (= f4 #14)
#48 := (not #44)
#15 := (= #14 f4)
#16 := (not #15)
#49 := (iff #16 #48)
#46 := (iff #15 #44)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#43 := [asserted]: #16
#53 := [mp #43 #50]: #48
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (pattern #9)
#37 := (= #8 #9)
#40 := (forall (vars (?v0 S2)) (:pat #10) #37)
#61 := (~ #40 #40)
#59 := (~ #37 #37)
#60 := [refl]: #59
#62 := [nnf-pos #60]: #61
#11 := (= #9 #8)
#12 := (forall (vars (?v0 S2)) (:pat #10) #11)
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#42 := [quant-intro #39]: #41
#36 := [asserted]: #12
#45 := [mp #36 #42]: #40
#52 := [mp~ #45 #62]: #40
#116 := (not #40)
#203 := (or #116 #44)
#117 := [quant-inst #13]: #203
[unit-resolution #117 #52 #53]: false
unsat
2afe1df1902e39168c29e6c56b5c35b4e9df2334 36 0
#2 := false
decl f4 :: (-> S3 S4)
decl f6 :: (-> Int S3)
decl f7 :: (-> Int Int)
decl f8 :: (-> Int Int)
decl f9 :: Int
#17 := f9
#18 := (f8 f9)
#19 := (f7 #18)
#20 := (f6 #19)
#21 := (f4 #20)
decl f3 :: (-> S2 S4)
decl f5 :: S2
#15 := f5
#16 := (f3 f5)
#22 := (= #16 #21)
#23 := (not #22)
#44 := [asserted]: #23
#10 := (:var 0 S3)
#11 := (f4 #10)
#8 := (:var 1 S2)
#9 := (f3 #8)
#12 := (pattern #9 #11)
#13 := (= #9 #11)
#14 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #12) #13)
#54 := (~ #14 #14)
#52 := (~ #13 #13)
#53 := [refl]: #52
#55 := [nnf-pos #53]: #54
#43 := [asserted]: #14
#46 := [mp~ #43 #55]: #14
#109 := (not #14)
#196 := (or #109 #22)
#110 := [quant-inst #15 #20]: #196
[unit-resolution #110 #46 #44]: false
unsat
2e896cd9a2fe5bb207857c1a092e502ece669e01 16 0
#2 := false
#1 := true
#8 := (implies true true)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
a79bf9f4931711426a169989fc9caedc89cfa1a4 16 0
#2 := false
#8 := (implies false false)
#9 := (not #8)
#37 := (iff #9 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
1be840005f8a5d8a9ad842fa8ca7ecbce8bcb124 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (implies #10 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#33 := (= f1 #9)
#36 := (implies #33 #33)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#32 := [asserted]: #12
[mp #32 #49]: false
unsat
ff912d650aac3afb164b55e5753273823fac2c2b 48 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (implies #9 #12)
#14 := (not #13)
#65 := (iff #14 false)
#38 := (= f1 f4)
#35 := (= f1 f3)
#41 := (or #35 #38)
#47 := (not #35)
#48 := (or #47 #41)
#53 := (not #48)
#63 := (iff #53 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #53 #58)
#56 := (iff #48 true)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#54 := (iff #14 #53)
#51 := (iff #13 #48)
#44 := (implies #35 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#43 := [monotonicity #37 #40]: #42
#46 := [monotonicity #37 #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#66 := [trans #55 #64]: #65
#34 := [asserted]: #14
[mp #34 #66]: false
unsat
4edc7ae478dc44e520d7e30a938c9581ab4e2a19 53 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (or #11 #9)
#13 := (implies #9 #12)
#14 := (not #13)
#70 := (iff #14 false)
#38 := (= f1 f4)
#35 := (= f1 f3)
#44 := (or #35 #38)
#52 := (not #35)
#53 := (or #52 #44)
#58 := (not #53)
#68 := (iff #58 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #58 #63)
#61 := (iff #53 true)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#59 := (iff #14 #58)
#56 := (iff #13 #53)
#49 := (implies #35 #44)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #13 #49)
#47 := (iff #12 #44)
#41 := (or #38 #35)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #12 #41)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40 #37]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #37 #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#71 := [trans #60 #69]: #70
#34 := [asserted]: #14
[mp #34 #71]: false
unsat
efb9f6518fd6418e28f5a875349db177d5fe4ceb 56 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#11 := f4
#12 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#13 := (implies #9 #12)
#10 := (not #9)
#14 := (implies #10 #13)
#15 := (not #14)
#73 := (iff #15 false)
#42 := (= f1 f4)
#36 := (= f1 f3)
#39 := (not #36)
#48 := (or #39 #42)
#56 := (or #36 #48)
#61 := (not #56)
#71 := (iff #61 false)
#1 := true
#66 := (not true)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #61 #66)
#64 := (iff #56 true)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#62 := (iff #15 #61)
#59 := (iff #14 #56)
#53 := (implies #39 #48)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #14 #53)
#51 := (iff #13 #48)
#45 := (implies #36 #42)
#49 := (iff #45 #48)
#50 := [rewrite]: #49
#46 := (iff #13 #45)
#43 := (iff #12 #42)
#44 := [rewrite]: #43
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#47 := [monotonicity #38 #44]: #46
#52 := [trans #47 #50]: #51
#40 := (iff #10 #39)
#41 := [monotonicity #38]: #40
#55 := [monotonicity #41 #52]: #54
#60 := [trans #55 #58]: #59
#63 := [monotonicity #60]: #62
#74 := [trans #63 #72]: #73
#35 := [asserted]: #15
[mp #35 #74]: false
unsat
741dce5f3cb8845f3e976710e82077b71b6e3b48 89 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#50 := (not #38)
#51 := (or #50 #41)
#109 := (iff #51 false)
#104 := (or false false)
#107 := (iff #104 false)
#108 := [rewrite]: #107
#105 := (iff #51 #104)
#95 := (iff #41 false)
#44 := (not #41)
#56 := (not #51)
#78 := (or #50 #41 #56)
#81 := (not #78)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (implies #9 #11)
#14 := (not #13)
#12 := (not #11)
#15 := (implies #12 #14)
#16 := (implies #9 #15)
#17 := (not #16)
#84 := (iff #17 #81)
#62 := (or #41 #56)
#70 := (or #50 #62)
#75 := (not #70)
#82 := (iff #75 #81)
#79 := (iff #70 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#76 := (iff #17 #75)
#73 := (iff #16 #70)
#67 := (implies #38 #62)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #16 #67)
#65 := (iff #15 #62)
#59 := (implies #44 #56)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#57 := (iff #14 #56)
#54 := (iff #13 #51)
#47 := (implies #38 #41)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #13 #47)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#49 := [monotonicity #40 #43]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #55]: #57
#45 := (iff #12 #44)
#46 := [monotonicity #43]: #45
#61 := [monotonicity #46 #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #40 #66]: #68
#74 := [trans #69 #72]: #73
#77 := [monotonicity #74]: #76
#85 := [trans #77 #83]: #84
#37 := [asserted]: #17
#86 := [mp #37 #85]: #81
#88 := [not-or-elim #86]: #44
#96 := [iff-false #88]: #95
#102 := (iff #50 false)
#1 := true
#97 := (not true)
#100 := (iff #97 false)
#101 := [rewrite]: #100
#98 := (iff #50 #97)
#93 := (iff #38 true)
#87 := [not-or-elim #86]: #38
#94 := [iff-true #87]: #93
#99 := [monotonicity #94]: #98
#103 := [trans #99 #101]: #102
#106 := [monotonicity #103 #96]: #105
#110 := [trans #106 #108]: #109
#89 := [not-or-elim #86]: #51
[mp #89 #110]: false
unsat
0f2e31d8ce8759346cad7c733d7f6d64c22635fd 57 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
decl f1 :: S1
#4 := f1
#36 := (= f1 #9)
#48 := (not #36)
decl f5 :: (-> S2 S1)
#11 := (f5 f4)
#39 := (= f1 #11)
#49 := (iff #39 #48)
#61 := (not #49)
#76 := (iff #61 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #61 #71)
#69 := (iff #49 true)
#42 := (iff #36 #39)
#58 := (not #42)
#66 := (iff #58 #49)
#67 := [rewrite]: #66
#50 := (or #42 #49)
#55 := (not #50)
#12 := (= #11 f1)
#10 := (= #9 f1)
#13 := (iff #10 #12)
#14 := (implies #13 #13)
#15 := (not #14)
#56 := (iff #15 #55)
#53 := (iff #14 #50)
#45 := (implies #42 #42)
#51 := (iff #45 #50)
#52 := [rewrite]: #51
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#41 := [rewrite]: #40
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #41]: #43
#47 := [monotonicity #44 #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#35 := [asserted]: #15
#60 := [mp #35 #57]: #55
#59 := [not-or-elim #60]: #58
#68 := [mp #59 #67]: #49
#70 := [iff-true #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#62 := [not-or-elim #60]: #61
[mp #62 #77]: false
unsat
1f5e449bae0893dc762768fde0ab33c8f0ed64d8 50 0
#2 := false
decl f5 :: S2
#11 := f5
decl f3 :: S2
#8 := f3
#13 := (= f3 f5)
decl f4 :: S2
#9 := f4
#12 := (= f4 f5)
#77 := (iff #12 #13)
#75 := (iff #13 #12)
#10 := (= f3 f4)
#37 := (not #12)
#44 := (not #10)
#53 := (or #44 #37 #13)
#56 := (not #53)
#14 := (implies #12 #13)
#15 := (implies #10 #14)
#16 := (not #15)
#59 := (iff #16 #56)
#38 := (or #37 #13)
#45 := (or #44 #38)
#50 := (not #45)
#57 := (iff #50 #56)
#54 := (iff #45 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#60 := [trans #52 #58]: #59
#36 := [asserted]: #16
#61 := [mp #36 #60]: #56
#62 := [not-or-elim #61]: #10
#76 := [monotonicity #62]: #75
#78 := [symm #76]: #77
#63 := [not-or-elim #61]: #12
#73 := [mp #63 #78]: #13
#64 := (not #13)
#65 := [not-or-elim #61]: #64
[unit-resolution #65 #73]: false
unsat
4e0b37ec3c792ee4a851a10d652496a1aab77e5d 27 0
#2 := false
decl f5 :: (-> S2 S3)
decl f4 :: S2
#9 := f4
#12 := (f5 f4)
decl f3 :: S2
#8 := f3
#11 := (f5 f3)
#13 := (= #11 #12)
#10 := (= f3 f4)
#36 := (not #10)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #10 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #10
#54 := [monotonicity #43]: #13
#44 := (not #13)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #54]: false
unsat
acbbaa6eb92188382535c4667d023d44e750edc6 73 0
#2 := false
decl f3 :: (-> S1 S1)
decl f4 :: S1
#12 := f4
#13 := (f3 f4)
decl f1 :: S1
#4 := f1
#45 := (= f1 #13)
#76 := (not #45)
#48 := (= f1 f4)
#8 := (:var 0 S1)
#9 := (f3 #8)
#39 := (= f1 #9)
#42 := (forall (vars (?v0 S1)) #39)
#57 := (not #42)
#66 := (or #57 #45 #48)
#69 := (not #66)
#15 := (= f4 f1)
#14 := (= #13 f1)
#16 := (or #14 #15)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S1)) #10)
#17 := (implies #11 #16)
#18 := (not #17)
#72 := (iff #18 #69)
#51 := (or #45 #48)
#58 := (or #57 #51)
#63 := (not #58)
#70 := (iff #63 #69)
#67 := (iff #58 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#64 := (iff #18 #63)
#61 := (iff #17 #58)
#54 := (implies #42 #51)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #17 #54)
#52 := (iff #16 #51)
#49 := (iff #15 #48)
#50 := [rewrite]: #49
#46 := (iff #14 #45)
#47 := [rewrite]: #46
#53 := [monotonicity #47 #50]: #52
#43 := (iff #11 #42)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#56 := [monotonicity #44 #53]: #55
#62 := [trans #56 #60]: #61
#65 := [monotonicity #62]: #64
#73 := [trans #65 #71]: #72
#38 := [asserted]: #18
#74 := [mp #38 #73]: #69
#77 := [not-or-elim #74]: #76
#561 := (pattern #9)
#562 := (forall (vars (?v0 S1)) (:pat #561) #39)
#565 := (iff #42 #562)
#563 := (iff #39 #39)
#564 := [refl]: #563
#566 := [quant-intro #564]: #565
#91 := (~ #42 #42)
#89 := (~ #39 #39)
#90 := [refl]: #89
#92 := [nnf-pos #90]: #91
#75 := [not-or-elim #74]: #42
#81 := [mp~ #75 #92]: #42
#567 := [mp #81 #566]: #562
#144 := (not #562)
#231 := (or #144 #45)
#145 := [quant-inst #12]: #231
[unit-resolution #145 #567 #77]: false
unsat
58e0c0ea4309865900675d68ad0e58b939e134fe 106 0
#2 := false
decl f3 :: (-> S2 S2 S1)
decl ?v0!0 :: S2
#77 := ?v0!0
#86 := (f3 ?v0!0 ?v0!0)
decl f1 :: S1
#4 := f1
#78 := (= f1 #86)
#79 := (not #78)
#9 := (:var 0 S2)
#16 := (f3 #9 #9)
#53 := (= f1 #16)
#56 := (forall (vars (?v0 S2)) #53)
#72 := (not #56)
#87 := (~ #72 #79)
#88 := [sk]: #87
#8 := (:var 1 S2)
#12 := (f3 #9 #8)
#44 := (= f1 #12)
#10 := (f3 #8 #9)
#41 := (= f1 #10)
#47 := (and #41 #44)
#50 := (forall (vars (?v0 S2) (?v1 S2)) #47)
#62 := (not #50)
#63 := (or #62 #56)
#68 := (not #63)
#17 := (= #16 f1)
#18 := (forall (vars (?v0 S2)) #17)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (and #11 #13)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#19 := (implies #15 #18)
#20 := (not #19)
#69 := (iff #20 #68)
#66 := (iff #19 #63)
#59 := (implies #50 #56)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #19 #59)
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#55 := [rewrite]: #54
#58 := [quant-intro #55]: #57
#51 := (iff #15 #50)
#48 := (iff #14 #47)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#52 := [quant-intro #49]: #51
#61 := [monotonicity #52 #58]: #60
#67 := [trans #61 #65]: #66
#70 := [monotonicity #67]: #69
#40 := [asserted]: #20
#73 := [mp #40 #70]: #68
#74 := [not-or-elim #73]: #72
#91 := [mp~ #74 #88]: #79
#576 := (pattern #12)
#575 := (pattern #10)
#90 := (not #44)
#89 := (not #41)
#92 := (or #89 #90)
#93 := (not #92)
#577 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #575 #576) #93)
#96 := (forall (vars (?v0 S2) (?v1 S2)) #93)
#580 := (iff #96 #577)
#578 := (iff #93 #93)
#579 := [refl]: #578
#581 := [quant-intro #579]: #580
#97 := (iff #50 #96)
#94 := (iff #47 #93)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#84 := (~ #50 #50)
#82 := (~ #47 #47)
#83 := [refl]: #82
#85 := [nnf-pos #83]: #84
#71 := [not-or-elim #73]: #50
#76 := [mp~ #71 #85]: #50
#99 := [mp #76 #98]: #96
#582 := [mp #99 #581]: #577
#247 := (not #577)
#251 := (or #247 #78)
#157 := (or #79 #79)
#244 := (not #157)
#230 := (or #247 #244)
#569 := (iff #230 #251)
#356 := (iff #251 #251)
#563 := [rewrite]: #356
#177 := (iff #244 #78)
#159 := (not #79)
#248 := (iff #159 #78)
#249 := [rewrite]: #248
#246 := (iff #244 #159)
#158 := (iff #157 #79)
#245 := [rewrite]: #158
#237 := [monotonicity #245]: #246
#250 := [trans #237 #249]: #177
#224 := [monotonicity #250]: #569
#235 := [trans #224 #563]: #569
#567 := [quant-inst #77 #77]: #230
#236 := [mp #567 #235]: #251
[unit-resolution #236 #582 #91]: false
unsat
6f5c195ed8186ea009f805e2f8ea8ad3b1ee6432 66 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#40 := (= f1 f4)
decl f3 :: S1
#8 := f3
#37 := (= f1 f3)
#43 := (or #37 #40)
#87 := (iff #43 false)
#82 := (or false false)
#85 := (iff #82 false)
#86 := [rewrite]: #85
#83 := (iff #43 #82)
#78 := (iff #40 false)
#69 := (not #40)
#46 := (not #37)
#52 := (and #46 #43)
#60 := (not #52)
#61 := (or #40 #60)
#66 := (not #61)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (not #9)
#12 := (or #9 #11)
#14 := (and #12 #13)
#15 := (implies #14 #11)
#16 := (not #15)
#67 := (iff #16 #66)
#64 := (iff #15 #61)
#57 := (implies #52 #40)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #15 #57)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#55 := (iff #14 #52)
#49 := (and #43 #46)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39]: #47
#44 := (iff #12 #43)
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56 #42]: #58
#65 := [trans #59 #63]: #64
#68 := [monotonicity #65]: #67
#36 := [asserted]: #16
#71 := [mp #36 #68]: #66
#70 := [not-or-elim #71]: #69
#79 := [iff-false #70]: #78
#80 := (iff #37 false)
#72 := [not-or-elim #71]: #52
#73 := [and-elim #72]: #46
#81 := [iff-false #73]: #80
#84 := [monotonicity #81 #79]: #83
#88 := [trans #84 #86]: #87
#74 := [and-elim #72]: #43
[mp #74 #88]: false
unsat
bc6de36d6c86b416e91711bb23067cc8250ac153 59 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
#17 := (and #14 #16)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and #9 #11)
#18 := (or #12 #17)
#19 := (implies #18 #18)
#20 := (not #19)
#74 := (iff #20 false)
#1 := true
#69 := (not true)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #20 #69)
#67 := (iff #19 true)
#53 := (= f1 f6)
#50 := (= f1 f5)
#56 := (and #50 #53)
#44 := (= f1 f4)
#41 := (= f1 f3)
#47 := (and #41 #44)
#59 := (or #47 #56)
#62 := (implies #59 #59)
#65 := (iff #62 true)
#66 := [rewrite]: #65
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#54 := (iff #16 #53)
#55 := [rewrite]: #54
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#58 := [monotonicity #52 #55]: #57
#48 := (iff #12 #47)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#61 := [monotonicity #49 #58]: #60
#64 := [monotonicity #61 #61]: #63
#68 := [trans #64 #66]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#40 := [asserted]: #20
[mp #40 #75]: false
unsat
c820d022f24e2baa1299dcbea0f2d3f3d8f6dd72 19 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#9 := (f3 0::Int)
#10 := (= #9 #9)
#11 := (not #10)
#55 := (iff #11 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #11 #50)
#48 := (iff #10 true)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#47 := [asserted]: #11
[mp #47 #56]: false
unsat
7b3c8049956bdd5721dd20460eb60a9ebe89e5eb 19 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 1::Int
#9 := (f3 1::Int)
#10 := (= #9 #9)
#11 := (not #10)
#56 := (iff #11 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #11 #51)
#49 := (iff #10 true)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#48 := [asserted]: #11
[mp #48 #57]: false
unsat
fb370925ef9917dad66e0244200f67eedf11b6cf 18 0
#2 := false
#9 := 1::Int
#8 := 0::Int
#10 := (< 0::Int 1::Int)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
3e975ce36aa1bd6d92c534a802e4e9206e497829 18 0
#2 := false
#9 := 1::Int
#8 := 0::Int
#10 := (<= 0::Int 1::Int)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
a8dfb9a9f38e5293ee803fd471ebee346a686963 18 0
#2 := false
#9 := 2345678901::Int
#8 := 123456789::Int
#10 := (< 123456789::Int 2345678901::Int)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
389b2e8cab048d0cb042010db3ed5e5d4e058a76 30 0
#2 := false
decl f3 :: (-> Int S2)
#9 := 1::Int
#12 := (f3 1::Int)
#8 := 0::Int
#10 := (+ 0::Int 1::Int)
#11 := (f3 #10)
#13 := (= #11 #12)
#14 := (not #13)
#66 := (iff #14 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #14 #61)
#59 := (iff #13 true)
#54 := (= #12 #12)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#51 := (= #10 1::Int)
#52 := [rewrite]: #51
#53 := [monotonicity #52]: #13
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#50 := [asserted]: #14
[mp #50 #67]: false
unsat
69b8844d592bea5e5302a7f15c44b4ae5e4ec06b 35 0
#2 := false
decl f3 :: (-> Int S2)
#10 := 1::Int
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#11 := (+ #9 1::Int)
#12 := (f3 #11)
#13 := (= #12 #12)
#14 := (not #13)
#70 := (iff #14 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #14 #65)
#63 := (iff #13 true)
#52 := (+ 1::Int #9)
#55 := (f3 #52)
#58 := (= #55 #55)
#61 := (iff #58 true)
#62 := [rewrite]: #61
#59 := (iff #13 #58)
#56 := (= #12 #55)
#53 := (= #11 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57 #57]: #59
#64 := [trans #60 #62]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#51 := [asserted]: #14
[mp #51 #71]: false
unsat
1565411bbd184837a8e8294d25b8f04388cd838e 33 0
#2 := false
#10 := 1::Int
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#11 := (+ #9 1::Int)
#12 := (< #9 #11)
#13 := (not #12)
#69 := (iff #13 false)
#51 := (+ 1::Int #9)
#54 := (< #9 #51)
#57 := (not #54)
#67 := (iff #57 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #57 #62)
#60 := (iff #54 true)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#58 := (iff #13 #57)
#55 := (iff #12 #54)
#52 := (= #11 #51)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#59 := [monotonicity #56]: #58
#70 := [trans #59 #68]: #69
#50 := [asserted]: #13
[mp #50 #70]: false
unsat
fa7e6fd7546c88bfe99ee359f459c00d80bf91c0 488 0
#2 := false
decl f4 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
#14 := (f4 f6)
#10 := 1::Int
#64 := (+ 1::Int #14)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#58 := (+ 1::Int #9)
#414 := (= #58 #64)
#382 := (not #414)
decl f3 :: (-> Int S2)
#67 := (f3 #64)
#61 := (f3 #58)
#70 := (= #61 #67)
#661 := (f4 #61)
#433 := (f3 #661)
#378 := (= #433 #67)
#399 := (= #67 #433)
#397 := (= #64 #661)
#662 := (= #58 #661)
#663 := -1::Int
#653 := (* -1::Int #661)
#312 := (+ #9 #653)
#651 := (<= #312 -1::Int)
#317 := (= #312 -1::Int)
#655 := (>= #9 -1::Int)
#26 := 0::Int
#504 := (>= #9 0::Int)
#432 := (= #9 0::Int)
#341 := (f3 #9)
#505 := (f4 #341)
#598 := (= #505 0::Int)
#434 := (not #504)
#436 := [hypothesis]: #434
#599 := (or #504 #598)
#27 := (:var 0 Int)
#29 := (f3 #27)
#672 := (pattern #29)
#117 := (>= #27 0::Int)
#30 := (f4 #29)
#35 := (= #30 0::Int)
#165 := (or #35 #117)
#679 := (forall (vars (?v0 Int)) (:pat #672) #165)
#170 := (forall (vars (?v0 Int)) #165)
#682 := (iff #170 #679)
#680 := (iff #165 #165)
#681 := [refl]: #680
#683 := [quant-intro #681]: #682
#183 := (~ #170 #170)
#191 := (~ #165 #165)
#192 := [refl]: #191
#184 := [nnf-pos #192]: #183
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#173 := (iff #37 #170)
#136 := (= 0::Int #30)
#142 := (not #34)
#143 := (or #142 #136)
#148 := (forall (vars (?v0 Int)) #143)
#171 := (iff #148 #170)
#168 := (iff #143 #165)
#162 := (or #117 #35)
#166 := (iff #162 #165)
#167 := [rewrite]: #166
#163 := (iff #143 #162)
#160 := (iff #136 #35)
#161 := [rewrite]: #160
#158 := (iff #142 #117)
#118 := (not #117)
#153 := (not #118)
#156 := (iff #153 #117)
#157 := [rewrite]: #156
#154 := (iff #142 #153)
#151 := (iff #34 #118)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#159 := [trans #155 #157]: #158
#164 := [monotonicity #159 #161]: #163
#169 := [trans #164 #167]: #168
#172 := [quant-intro #169]: #171
#149 := (iff #37 #148)
#146 := (iff #36 #143)
#139 := (implies #34 #136)
#144 := (iff #139 #143)
#145 := [rewrite]: #144
#140 := (iff #36 #139)
#137 := (iff #35 #136)
#138 := [rewrite]: #137
#141 := [monotonicity #138]: #140
#147 := [trans #141 #145]: #146
#150 := [quant-intro #147]: #149
#174 := [trans #150 #172]: #173
#135 := [asserted]: #37
#175 := [mp #135 #174]: #170
#193 := [mp~ #175 #184]: #170
#684 := [mp #193 #683]: #679
#363 := (not #679)
#580 := (or #363 #504 #598)
#595 := (or #598 #504)
#577 := (or #363 #595)
#581 := (iff #577 #580)
#589 := (or #363 #599)
#587 := (iff #589 #580)
#592 := [rewrite]: #587
#590 := (iff #577 #589)
#586 := (iff #595 #599)
#588 := [rewrite]: #586
#591 := [monotonicity #588]: #590
#582 := [trans #591 #592]: #581
#579 := [quant-inst #9]: #577
#583 := [mp #579 #582]: #580
#437 := [unit-resolution #583 #684]: #599
#438 := [unit-resolution #437 #436]: #598
#435 := (= #9 #505)
#320 := (= f5 #341)
#21 := (:var 0 S2)
#22 := (f4 #21)
#664 := (pattern #22)
#23 := (f3 #22)
#91 := (= #21 #23)
#665 := (forall (vars (?v0 S2)) (:pat #664) #91)
#95 := (forall (vars (?v0 S2)) #91)
#666 := (iff #95 #665)
#668 := (iff #665 #665)
#669 := [rewrite]: #668
#667 := [rewrite]: #666
#670 := [trans #667 #669]: #666
#189 := (~ #95 #95)
#187 := (~ #91 #91)
#188 := [refl]: #187
#190 := [nnf-pos #188]: #189
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S2)) #24)
#96 := (iff #25 #95)
#93 := (iff #24 #91)
#94 := [rewrite]: #93
#97 := [quant-intro #94]: #96
#90 := [asserted]: #25
#100 := [mp #90 #97]: #95
#179 := [mp~ #100 #190]: #95
#671 := [mp #179 #670]: #665
#314 := (not #665)
#445 := (or #314 #320)
#652 := [quant-inst #8]: #445
#442 := [unit-resolution #652 #671]: #320
#440 := [monotonicity #442]: #435
#419 := [trans #440 #438]: #432
#422 := (not #432)
#426 := (or #422 #504)
#428 := [th-lemma arith triangle-eq]: #426
#429 := [unit-resolution #428 #436 #419]: false
#427 := [lemma #429]: #504
#386 := (or #434 #655)
#388 := [th-lemma arith farkas 1 1]: #386
#389 := [unit-resolution #388 #427]: #655
#301 := (not #655)
#304 := (or #317 #301)
#99 := (= #27 #30)
#124 := (or #99 #118)
#673 := (forall (vars (?v0 Int)) (:pat #672) #124)
#129 := (forall (vars (?v0 Int)) #124)
#676 := (iff #129 #673)
#674 := (iff #124 #124)
#675 := [refl]: #674
#677 := [quant-intro #675]: #676
#181 := (~ #129 #129)
#180 := (~ #124 #124)
#177 := [refl]: #180
#182 := [nnf-pos #177]: #181
#31 := (= #30 #27)
#28 := (<= 0::Int #27)
#32 := (implies #28 #31)
#33 := (forall (vars (?v0 Int)) #32)
#132 := (iff #33 #129)
#106 := (not #28)
#107 := (or #106 #99)
#112 := (forall (vars (?v0 Int)) #107)
#130 := (iff #112 #129)
#127 := (iff #107 #124)
#121 := (or #118 #99)
#125 := (iff #121 #124)
#126 := [rewrite]: #125
#122 := (iff #107 #121)
#119 := (iff #106 #118)
#115 := (iff #28 #117)
#116 := [rewrite]: #115
#120 := [monotonicity #116]: #119
#123 := [monotonicity #120]: #122
#128 := [trans #123 #126]: #127
#131 := [quant-intro #128]: #130
#113 := (iff #33 #112)
#110 := (iff #32 #107)
#103 := (implies #28 #99)
#108 := (iff #103 #107)
#109 := [rewrite]: #108
#104 := (iff #32 #103)
#101 := (iff #31 #99)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#111 := [trans #105 #109]: #110
#114 := [quant-intro #111]: #113
#133 := [trans #114 #131]: #132
#98 := [asserted]: #33
#134 := [mp #98 #133]: #129
#178 := [mp~ #134 #182]: #129
#678 := [mp #178 #677]: #673
#643 := (not #673)
#644 := (or #643 #317 #301)
#325 := (>= #58 0::Int)
#326 := (not #325)
#657 := (or #662 #326)
#645 := (or #643 #657)
#289 := (iff #645 #644)
#646 := (or #643 #304)
#649 := (iff #646 #644)
#288 := [rewrite]: #649
#283 := (iff #645 #646)
#641 := (iff #657 #304)
#302 := (iff #326 #301)
#297 := (iff #325 #655)
#639 := [rewrite]: #297
#303 := [monotonicity #639]: #302
#654 := (iff #662 #317)
#313 := [rewrite]: #654
#642 := [monotonicity #313 #303]: #641
#647 := [monotonicity #642]: #283
#650 := [trans #647 #288]: #289
#640 := [quant-inst #58]: #645
#648 := [mp #640 #650]: #644
#472 := [unit-resolution #648 #678]: #304
#390 := [unit-resolution #472 #389]: #317
#474 := (not #317)
#475 := (or #474 #651)
#476 := [th-lemma arith triangle-eq]: #475
#391 := [unit-resolution #476 #390]: #651
#637 := (>= #312 -1::Int)
#478 := (or #474 #637)
#479 := [th-lemma arith triangle-eq]: #478
#392 := [unit-resolution #479 #390]: #637
#393 := [th-lemma arith eq-propagate -1 -1 #392 #391]: #662
#395 := (= #64 #58)
#394 := [hypothesis]: #414
#396 := [symm #394]: #395
#398 := [trans #396 #393]: #397
#376 := [monotonicity #398]: #399
#379 := [symm #376]: #378
#280 := (= #61 #433)
#418 := (or #314 #280)
#421 := [quant-inst #61]: #418
#387 := [unit-resolution #421 #671]: #280
#380 := [trans #387 #379]: #70
#327 := (not #70)
#18 := (= f5 f6)
#656 := (f3 #14)
#452 := (= #656 f6)
#658 := (= f6 #656)
#659 := (or #314 #658)
#660 := [quant-inst #13]: #659
#547 := [unit-resolution #660 #671]: #658
#453 := [symm #547]: #452
#455 := (= f5 #656)
#449 := (= #341 #656)
#480 := (= #9 #14)
#342 := (f4 #67)
#626 := (* -1::Int #342)
#630 := (+ #14 #626)
#604 := (<= #630 -1::Int)
#619 := (= #630 -1::Int)
#616 := (>= #14 -1::Int)
#584 := (>= #14 0::Int)
#548 := (= #14 0::Int)
#578 := (f4 #656)
#585 := (= #578 0::Int)
#551 := (not #584)
#552 := [hypothesis]: #551
#570 := (or #584 #585)
#574 := (or #363 #584 #585)
#569 := (or #585 #584)
#575 := (or #363 #569)
#567 := (iff #575 #574)
#576 := (or #363 #570)
#565 := (iff #576 #574)
#566 := [rewrite]: #565
#562 := (iff #575 #576)
#572 := (iff #569 #570)
#573 := [rewrite]: #572
#563 := [monotonicity #573]: #562
#564 := [trans #563 #566]: #567
#571 := [quant-inst #14]: #575
#568 := [mp #571 #564]: #574
#546 := [unit-resolution #568 #684]: #570
#541 := [unit-resolution #546 #552]: #585
#533 := (= #14 #578)
#529 := [monotonicity #547]: #533
#530 := [trans #529 #541]: #548
#531 := (not #548)
#534 := (or #531 #584)
#535 := [th-lemma arith triangle-eq]: #534
#536 := [unit-resolution #535 #552 #530]: false
#537 := [lemma #536]: #584
#519 := (or #551 #616)
#524 := [th-lemma arith farkas 1 1]: #519
#520 := [unit-resolution #524 #537]: #616
#623 := (not #616)
#609 := (or #623 #619)
#607 := (or #643 #623 #619)
#627 := (>= #64 0::Int)
#628 := (not #627)
#625 := (= #64 #342)
#629 := (or #625 #628)
#613 := (or #643 #629)
#600 := (iff #613 #607)
#608 := (or #643 #609)
#446 := (iff #608 #607)
#447 := [rewrite]: #446
#615 := (iff #613 #608)
#612 := (iff #629 #609)
#465 := (or #619 #623)
#610 := (iff #465 #609)
#611 := [rewrite]: #610
#466 := (iff #629 #465)
#618 := (iff #628 #623)
#617 := (iff #627 #616)
#622 := [rewrite]: #617
#624 := [monotonicity #622]: #618
#620 := (iff #625 #619)
#621 := [rewrite]: #620
#467 := [monotonicity #621 #624]: #466
#606 := [trans #467 #611]: #612
#444 := [monotonicity #606]: #615
#601 := [trans #444 #447]: #600
#614 := [quant-inst #64]: #613
#603 := [mp #614 #601]: #607
#550 := [unit-resolution #603 #678]: #609
#521 := [unit-resolution #550 #520]: #619
#539 := (not #619)
#540 := (or #539 #604)
#542 := [th-lemma arith triangle-eq]: #540
#522 := [unit-resolution #542 #521]: #604
#602 := (>= #630 -1::Int)
#525 := (or #539 #602)
#526 := [th-lemma arith triangle-eq]: #525
#527 := [unit-resolution #526 #521]: #602
#511 := (+ #342 #653)
#406 := (<= #511 0::Int)
#538 := (= #342 #661)
#528 := (= #661 #342)
#84 := (not #18)
#518 := [hypothesis]: #84
#335 := (or #70 #18)
#85 := (iff #70 #84)
#15 := (+ #14 1::Int)
#16 := (f3 #15)
#11 := (+ #9 1::Int)
#12 := (f3 #11)
#17 := (= #12 #16)
#19 := (iff #17 #18)
#20 := (not #19)
#88 := (iff #20 #85)
#76 := (iff #18 #70)
#81 := (not #76)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #20 #81)
#79 := (iff #19 #76)
#73 := (iff #70 #18)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #19 #73)
#71 := (iff #17 #70)
#68 := (= #16 #67)
#65 := (= #15 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#62 := (= #12 #61)
#59 := (= #11 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#72 := [monotonicity #63 #69]: #71
#75 := [monotonicity #72]: #74
#80 := [trans #75 #78]: #79
#83 := [monotonicity #80]: #82
#89 := [trans #83 #87]: #88
#57 := [asserted]: #20
#92 := [mp #57 #89]: #85
#249 := (not #85)
#334 := (or #70 #18 #249)
#250 := [def-axiom]: #334
#336 := [unit-resolution #250 #92]: #335
#523 := [unit-resolution #336 #518]: #70
#508 := [monotonicity #523]: #528
#454 := [symm #508]: #538
#509 := (not #538)
#490 := (or #509 #406)
#514 := [th-lemma arith triangle-eq]: #490
#515 := [unit-resolution #514 #454]: #406
#517 := (>= #511 0::Int)
#510 := (or #509 #517)
#516 := [th-lemma arith triangle-eq]: #510
#484 := [unit-resolution #516 #454]: #517
#638 := (= #661 0::Int)
#462 := (not #638)
#605 := (= #342 0::Int)
#555 := (not #605)
#463 := (iff #555 #462)
#486 := (iff #605 #638)
#496 := (iff #638 #605)
#506 := [monotonicity #508]: #496
#507 := [symm #506]: #486
#468 := [monotonicity #507]: #463
#502 := (<= #342 0::Int)
#491 := (not #502)
#450 := (not #604)
#481 := (or #491 #551 #450)
#483 := [th-lemma arith assign-bounds -1 1]: #481
#485 := [unit-resolution #483 #522 #537]: #491
#492 := (or #555 #502)
#494 := [th-lemma arith triangle-eq]: #492
#495 := [unit-resolution #494 #485]: #555
#469 := [mp #495 #468]: #462
#360 := (or #638 #655)
#256 := (or #363 #638 #655)
#345 := (or #638 #325)
#633 := (or #363 #345)
#636 := (iff #633 #256)
#356 := (or #363 #360)
#635 := (iff #356 #256)
#632 := [rewrite]: #635
#357 := (iff #633 #356)
#361 := (iff #345 #360)
#362 := [monotonicity #639]: #361
#631 := [monotonicity #362]: #357
#346 := [trans #631 #632]: #636
#634 := [quant-inst #58]: #633
#347 := [mp #634 #346]: #256
#470 := [unit-resolution #347 #684]: #360
#471 := [unit-resolution #470 #469]: #655
#473 := [unit-resolution #472 #471]: #317
#477 := [unit-resolution #476 #473]: #651
#464 := [unit-resolution #479 #473]: #637
#441 := [th-lemma arith eq-propagate -1 -1 1 1 1 1 #464 #477 #484 #515 #527 #522]: #480
#451 := [monotonicity #441]: #449
#456 := [trans #442 #451]: #455
#457 := [trans #456 #453]: #18
#458 := [unit-resolution #518 #457]: false
#459 := [lemma #458]: #18
#340 := (or #327 #84)
#338 := (or #327 #84 #249)
#339 := [def-axiom]: #338
#337 := [unit-resolution #339 #92]: #340
#404 := [unit-resolution #337 #459]: #327
#381 := [unit-resolution #404 #380]: false
#383 := [lemma #381]: #382
#400 := (* -1::Int #64)
#402 := (+ #58 #400)
#403 := (<= #402 0::Int)
#460 := (* -1::Int #14)
#443 := (+ #9 #460)
#461 := (<= #443 0::Int)
#384 := [monotonicity #459]: #480
#377 := (not #480)
#385 := (or #377 #461)
#370 := [th-lemma arith triangle-eq]: #385
#371 := [unit-resolution #370 #384]: #461
#372 := (not #461)
#374 := (or #403 #372)
#373 := [th-lemma arith assign-bounds -1]: #374
#375 := [unit-resolution #373 #371]: #403
#401 := (>= #402 0::Int)
#431 := (>= #443 0::Int)
#364 := (or #377 #431)
#365 := [th-lemma arith triangle-eq]: #364
#366 := [unit-resolution #365 #384]: #431
#358 := (not #431)
#367 := (or #401 #358)
#368 := [th-lemma arith assign-bounds -1]: #367
#359 := [unit-resolution #368 #366]: #401
#350 := (not #401)
#369 := (not #403)
#351 := (or #414 #369 #350)
#352 := [th-lemma arith triangle-eq]: #351
#343 := [unit-resolution #352 #359 #375]: #414
[unit-resolution #343 #383]: false
unsat
c7585538b7dc0dc5de4e2c9b3dc037ecb098d49f 55 0
#2 := false
#13 := 1::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#16 := (+ #11 1::Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#15 := (+ #9 1::Int)
#17 := (+ #15 #16)
#12 := (+ #9 #11)
#14 := (+ #12 1::Int)
#18 := (< #14 #17)
#19 := (not #18)
#90 := (iff #19 false)
#69 := 2::Int
#70 := (+ 2::Int #12)
#57 := (+ 1::Int #12)
#75 := (< #57 #70)
#78 := (not #75)
#88 := (iff #78 false)
#1 := true
#82 := (not true)
#86 := (iff #82 false)
#87 := [rewrite]: #86
#84 := (iff #78 #82)
#81 := (iff #75 true)
#83 := [rewrite]: #81
#85 := [monotonicity #83]: #84
#89 := [trans #85 #87]: #88
#79 := (iff #19 #78)
#76 := (iff #18 #75)
#73 := (= #17 #70)
#63 := (+ 1::Int #11)
#60 := (+ 1::Int #9)
#66 := (+ #60 #63)
#71 := (= #66 #70)
#72 := [rewrite]: #71
#67 := (= #17 #66)
#64 := (= #16 #63)
#65 := [rewrite]: #64
#61 := (= #15 #60)
#62 := [rewrite]: #61
#68 := [monotonicity #62 #65]: #67
#74 := [trans #68 #72]: #73
#58 := (= #14 #57)
#59 := [rewrite]: #58
#77 := [monotonicity #59 #74]: #76
#80 := [monotonicity #77]: #79
#91 := [trans #80 #89]: #90
#56 := [asserted]: #19
[mp #56 #91]: false
unsat
4d316aeea49b4a8a62b04895dd872840d80b8e15 60 0
#2 := false
decl f4 :: (-> S2 Int)
#15 := (:var 0 S2)
#16 := (f4 #15)
#642 := (pattern #16)
decl f3 :: (-> Int S2)
#17 := (f3 #16)
#68 := (= #15 #17)
#643 := (forall (vars (?v0 S2)) (:pat #642) #68)
#72 := (forall (vars (?v0 S2)) #68)
#644 := (iff #72 #643)
#646 := (iff #643 #643)
#647 := [rewrite]: #646
#645 := [rewrite]: #644
#648 := [trans #645 #647]: #644
#166 := (~ #72 #72)
#164 := (~ #68 #68)
#165 := [refl]: #164
#167 := [nnf-pos #165]: #166
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#73 := (iff #19 #72)
#70 := (iff #18 #68)
#71 := [rewrite]: #70
#74 := [quant-intro #71]: #73
#67 := [asserted]: #19
#77 := [mp #67 #74]: #72
#156 := [mp~ #77 #167]: #72
#649 := [mp #156 #648]: #643
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#53 := (f3 #9)
#59 := (= f5 #53)
#64 := (not #59)
#10 := 0::Int
#11 := (+ #9 0::Int)
#12 := (f3 #11)
#13 := (= #12 f5)
#14 := (not #13)
#65 := (iff #14 #64)
#62 := (iff #13 #59)
#56 := (= #53 f5)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #13 #56)
#54 := (= #12 #53)
#51 := (= #11 #9)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#50 := [asserted]: #14
#69 := [mp #50 #66]: #64
#227 := (not #643)
#313 := (or #227 #59)
#314 := [quant-inst #8]: #313
[unit-resolution #314 #69 #649]: false
unsat
939bb60ace9d5eb975ab8e08c8ab792b8bba8477 60 0
#2 := false
decl f4 :: (-> S2 Int)
#15 := (:var 0 S2)
#16 := (f4 #15)
#642 := (pattern #16)
decl f3 :: (-> Int S2)
#17 := (f3 #16)
#68 := (= #15 #17)
#643 := (forall (vars (?v0 S2)) (:pat #642) #68)
#72 := (forall (vars (?v0 S2)) #68)
#644 := (iff #72 #643)
#646 := (iff #643 #643)
#647 := [rewrite]: #646
#645 := [rewrite]: #644
#648 := [trans #645 #647]: #644
#166 := (~ #72 #72)
#164 := (~ #68 #68)
#165 := [refl]: #164
#167 := [nnf-pos #165]: #166
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#73 := (iff #19 #72)
#70 := (iff #18 #68)
#71 := [rewrite]: #70
#74 := [quant-intro #71]: #73
#67 := [asserted]: #19
#77 := [mp #67 #74]: #72
#156 := [mp~ #77 #167]: #72
#649 := [mp #156 #648]: #643
decl f5 :: S2
#9 := f5
#10 := (f4 f5)
#53 := (f3 #10)
#59 := (= f5 #53)
#64 := (not #59)
#8 := 0::Int
#11 := (+ 0::Int #10)
#12 := (f3 #11)
#13 := (= #12 f5)
#14 := (not #13)
#65 := (iff #14 #64)
#62 := (iff #13 #59)
#56 := (= #53 f5)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #13 #56)
#54 := (= #12 #53)
#51 := (= #11 #10)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#50 := [asserted]: #14
#69 := [mp #50 #66]: #64
#227 := (not #643)
#313 := (or #227 #59)
#314 := [quant-inst #9]: #313
[unit-resolution #314 #69 #649]: false
unsat
9e3ffb81c0c24d6643947cc7653c5d14f3615839 37 0
#2 := false
decl f3 :: (-> Int S2)
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
decl f6 :: S2
#10 := f6
#11 := (f4 f6)
#14 := (+ #11 #9)
#15 := (f3 #14)
#12 := (+ #9 #11)
#13 := (f3 #12)
#16 := (= #13 #15)
#17 := (not #16)
#71 := (iff #17 false)
#1 := true
#66 := (not true)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #17 #66)
#64 := (iff #16 true)
#59 := (= #13 #13)
#62 := (iff #59 true)
#63 := [rewrite]: #62
#60 := (iff #16 #59)
#57 := (= #15 #13)
#55 := (= #14 #12)
#56 := [rewrite]: #55
#58 := [monotonicity #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#54 := [asserted]: #17
[mp #54 #72]: false
unsat
2434a86faf31ed58c07b03f69dd984962cd1a46d 42 0
#2 := false
decl f3 :: (-> Int S2)
decl f4 :: (-> S2 Int)
decl f7 :: S2
#12 := f7
#13 := (f4 f7)
decl f6 :: S2
#10 := f6
#11 := (f4 f6)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#17 := (+ #9 #11)
#18 := (+ #17 #13)
#19 := (f3 #18)
#14 := (+ #11 #13)
#15 := (+ #9 #14)
#16 := (f3 #15)
#20 := (= #16 #19)
#21 := (not #20)
#75 := (iff #21 false)
#1 := true
#70 := (not true)
#73 := (iff #70 false)
#74 := [rewrite]: #73
#71 := (iff #21 #70)
#68 := (iff #20 true)
#63 := (= #16 #16)
#66 := (iff #63 true)
#67 := [rewrite]: #66
#64 := (iff #20 #63)
#61 := (= #19 #16)
#59 := (= #18 #15)
#60 := [rewrite]: #59
#62 := [monotonicity #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#58 := [asserted]: #21
[mp #58 #76]: false
unsat
9d17883fbf3f3e7801d8a83bdd2f87e74ba0ad84 462 0
#2 := false
#14 := 0::Int
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#473 := (= #9 0::Int)
decl f3 :: (-> Int S2)
#307 := (f3 #9)
#594 := (f4 #307)
#596 := (= #594 0::Int)
decl f6 :: S2
#10 := f6
#11 := (f4 f6)
#645 := (f3 #11)
#486 := (f4 #645)
#494 := (= #486 0::Int)
#593 := (>= #9 0::Int)
#446 := (not #596)
#450 := [hypothesis]: #446
#595 := (or #593 #596)
#27 := (:var 0 Int)
#29 := (f3 #27)
#665 := (pattern #29)
#89 := (>= #27 0::Int)
#30 := (f4 #29)
#35 := (= #30 0::Int)
#137 := (or #35 #89)
#672 := (forall (vars (?v0 Int)) (:pat #665) #137)
#142 := (forall (vars (?v0 Int)) #137)
#675 := (iff #142 #672)
#673 := (iff #137 #137)
#674 := [refl]: #673
#676 := [quant-intro #674]: #675
#155 := (~ #142 #142)
#163 := (~ #137 #137)
#164 := [refl]: #163
#156 := [nnf-pos #164]: #155
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#145 := (iff #37 #142)
#108 := (= 0::Int #30)
#114 := (not #34)
#115 := (or #114 #108)
#120 := (forall (vars (?v0 Int)) #115)
#143 := (iff #120 #142)
#140 := (iff #115 #137)
#134 := (or #89 #35)
#138 := (iff #134 #137)
#139 := [rewrite]: #138
#135 := (iff #115 #134)
#132 := (iff #108 #35)
#133 := [rewrite]: #132
#130 := (iff #114 #89)
#90 := (not #89)
#125 := (not #90)
#128 := (iff #125 #89)
#129 := [rewrite]: #128
#126 := (iff #114 #125)
#123 := (iff #34 #90)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#131 := [trans #127 #129]: #130
#136 := [monotonicity #131 #133]: #135
#141 := [trans #136 #139]: #140
#144 := [quant-intro #141]: #143
#121 := (iff #37 #120)
#118 := (iff #36 #115)
#111 := (implies #34 #108)
#116 := (iff #111 #115)
#117 := [rewrite]: #116
#112 := (iff #36 #111)
#109 := (iff #35 #108)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#119 := [trans #113 #117]: #118
#122 := [quant-intro #119]: #121
#146 := [trans #122 #144]: #145
#107 := [asserted]: #37
#147 := [mp #107 #146]: #142
#165 := [mp~ #147 #156]: #142
#677 := [mp #165 #676]: #672
#354 := (not #672)
#481 := (or #354 #593 #596)
#597 := (or #596 #593)
#482 := (or #354 #597)
#475 := (iff #482 #481)
#589 := (or #354 #595)
#587 := (iff #589 #481)
#590 := [rewrite]: #587
#491 := (iff #482 #589)
#598 := (iff #597 #595)
#480 := [rewrite]: #598
#586 := [monotonicity #480]: #491
#490 := [trans #586 #590]: #475
#441 := [quant-inst #9]: #482
#492 := [mp #441 #490]: #481
#451 := [unit-resolution #492 #677]: #595
#452 := [unit-resolution #451 #450]: #593
#518 := (not #593)
#467 := (or #518 #494)
#580 := (= #11 0::Int)
#12 := (+ #9 #11)
#13 := (f3 #12)
#646 := (f4 #13)
#647 := -1::Int
#306 := (* -1::Int #646)
#648 := (+ #11 #306)
#290 := (+ #9 #648)
#641 := (<= #290 0::Int)
#632 := (= #290 0::Int)
#654 := (>= #12 0::Int)
#493 := (>= #11 0::Int)
#524 := (not #494)
#516 := [hypothesis]: #524
#496 := (or #493 #494)
#591 := (or #354 #493 #494)
#495 := (or #494 #493)
#588 := (or #354 #495)
#582 := (iff #588 #591)
#579 := (or #354 #496)
#570 := (iff #579 #591)
#572 := [rewrite]: #570
#581 := (iff #588 #579)
#497 := (iff #495 #496)
#498 := [rewrite]: #497
#573 := [monotonicity #498]: #581
#583 := [trans #573 #572]: #582
#592 := [quant-inst #11]: #588
#584 := [mp #592 #583]: #591
#521 := [unit-resolution #584 #677]: #496
#501 := [unit-resolution #521 #516]: #493
#530 := [hypothesis]: #593
#447 := (not #493)
#502 := (or #654 #518 #447)
#483 := [th-lemma arith assign-bounds -1 -1]: #502
#507 := [unit-resolution #483 #530 #501]: #654
#655 := (not #654)
#296 := (or #632 #655)
#71 := (= #27 #30)
#96 := (or #71 #90)
#666 := (forall (vars (?v0 Int)) (:pat #665) #96)
#101 := (forall (vars (?v0 Int)) #96)
#669 := (iff #101 #666)
#667 := (iff #96 #96)
#668 := [refl]: #667
#670 := [quant-intro #668]: #669
#153 := (~ #101 #101)
#152 := (~ #96 #96)
#149 := [refl]: #152
#154 := [nnf-pos #149]: #153
#31 := (= #30 #27)
#28 := (<= 0::Int #27)
#32 := (implies #28 #31)
#33 := (forall (vars (?v0 Int)) #32)
#104 := (iff #33 #101)
#78 := (not #28)
#79 := (or #78 #71)
#84 := (forall (vars (?v0 Int)) #79)
#102 := (iff #84 #101)
#99 := (iff #79 #96)
#93 := (or #90 #71)
#97 := (iff #93 #96)
#98 := [rewrite]: #97
#94 := (iff #79 #93)
#91 := (iff #78 #90)
#87 := (iff #28 #89)
#88 := [rewrite]: #87
#92 := [monotonicity #88]: #91
#95 := [monotonicity #92]: #94
#100 := [trans #95 #98]: #99
#103 := [quant-intro #100]: #102
#85 := (iff #33 #84)
#82 := (iff #32 #79)
#75 := (implies #28 #71)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #32 #75)
#73 := (iff #31 #71)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#83 := [trans #77 #81]: #82
#86 := [quant-intro #83]: #85
#105 := [trans #86 #103]: #104
#70 := [asserted]: #33
#106 := [mp #70 #105]: #101
#150 := [mp~ #106 #154]: #101
#671 := [mp #150 #670]: #666
#635 := (not #666)
#636 := (or #635 #632 #655)
#305 := (= #12 #646)
#310 := (or #305 #655)
#637 := (or #635 #310)
#281 := (iff #637 #636)
#633 := (or #635 #296)
#640 := (iff #633 #636)
#642 := [rewrite]: #640
#639 := (iff #637 #633)
#297 := (iff #310 #296)
#294 := (iff #305 #632)
#295 := [rewrite]: #294
#634 := [monotonicity #295]: #297
#276 := [monotonicity #634]: #639
#282 := [trans #276 #642]: #281
#638 := [quant-inst #12]: #637
#643 := [mp #638 #282]: #636
#508 := [unit-resolution #643 #671]: #296
#503 := [unit-resolution #508 #507]: #632
#509 := (not #632)
#477 := (or #509 #641)
#484 := [th-lemma arith triangle-eq]: #477
#443 := [unit-resolution #484 #503]: #641
#644 := (>= #290 0::Int)
#350 := (<= #646 0::Int)
#630 := (= #646 0::Int)
#15 := (f3 0::Int)
#628 := (f4 #15)
#340 := (= #628 0::Int)
#617 := (or #635 #340)
#338 := (>= 0::Int 0::Int)
#353 := (not #338)
#625 := (= 0::Int #628)
#629 := (or #625 #353)
#458 := (or #635 #629)
#460 := (iff #458 #617)
#603 := (iff #617 #617)
#604 := [rewrite]: #603
#616 := (iff #629 #340)
#613 := (or #340 false)
#610 := (iff #613 #340)
#615 := [rewrite]: #610
#614 := (iff #629 #613)
#623 := (iff #353 false)
#1 := true
#621 := (not true)
#622 := (iff #621 false)
#619 := [rewrite]: #622
#335 := (iff #353 #621)
#342 := (iff #338 true)
#620 := [rewrite]: #342
#618 := [monotonicity #620]: #335
#612 := [trans #618 #619]: #623
#339 := (iff #625 #340)
#341 := [rewrite]: #339
#609 := [monotonicity #341 #612]: #614
#611 := [trans #609 #615]: #616
#602 := [monotonicity #611]: #460
#605 := [trans #602 #604]: #460
#459 := [quant-inst #14]: #458
#599 := [mp #459 #605]: #617
#563 := [unit-resolution #599 #671]: #340
#506 := (= #646 #628)
#16 := (= #13 #15)
#18 := (= f6 #15)
#167 := (not #18)
#17 := (= f5 #15)
#166 := (not #17)
#157 := (or #166 #167)
#543 := (= #12 0::Int)
#552 := (= #12 #628)
#555 := (= #11 #628)
#158 := (not #157)
#578 := [hypothesis]: #158
#242 := (or #157 #18)
#328 := [def-axiom]: #242
#565 := [unit-resolution #328 #578]: #18
#556 := [monotonicity #565]: #555
#550 := (= #12 #11)
#574 := (= #9 #11)
#564 := (= f5 f6)
#566 := (= #15 f6)
#567 := [symm #565]: #566
#241 := (or #157 #17)
#327 := [def-axiom]: #241
#568 := [unit-resolution #327 #578]: #17
#569 := [trans #568 #567]: #564
#549 := [monotonicity #569]: #574
#547 := (= #12 #9)
#545 := (= #9 #12)
#585 := (<= #11 0::Int)
#558 := [trans #556 #563]: #580
#559 := (not #580)
#560 := (or #559 #585)
#557 := [th-lemma arith triangle-eq]: #560
#561 := [unit-resolution #557 #558]: #585
#541 := (or #559 #493)
#542 := [th-lemma arith triangle-eq]: #541
#544 := [unit-resolution #542 #558]: #493
#546 := [th-lemma arith eq-propagate -1 -1 #544 #561]: #545
#548 := [symm #546]: #547
#551 := [trans #548 #549]: #550
#553 := [trans #551 #556]: #552
#554 := [trans #553 #563]: #543
#532 := [monotonicity #554]: #16
#58 := (not #16)
#649 := (or #58 #157)
#178 := (iff #16 #157)
#19 := (and #17 #18)
#59 := (iff #19 #58)
#181 := (iff #59 #178)
#173 := (iff #157 #16)
#179 := (iff #173 #178)
#180 := [rewrite]: #179
#176 := (iff #59 #173)
#170 := (iff #158 #58)
#174 := (iff #170 #173)
#175 := [rewrite]: #174
#171 := (iff #59 #170)
#168 := (iff #19 #158)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#177 := [trans #172 #175]: #176
#182 := [trans #177 #180]: #181
#20 := (iff #16 #19)
#21 := (not #20)
#60 := (iff #21 #59)
#61 := [rewrite]: #60
#57 := [asserted]: #21
#64 := [mp #57 #61]: #59
#183 := [mp #64 #182]: #178
#331 := (not #178)
#334 := (or #58 #157 #331)
#313 := [def-axiom]: #334
#651 := [unit-resolution #313 #183]: #649
#562 := [unit-resolution #651 #578]: #58
#533 := [unit-resolution #562 #532]: false
#535 := [lemma #533]: #157
#333 := (or #16 #158)
#332 := (or #16 #158 #331)
#260 := [def-axiom]: #332
#330 := [unit-resolution #260 #183]: #333
#505 := [unit-resolution #330 #535]: #16
#399 := [monotonicity #505]: #506
#510 := [trans #399 #563]: #630
#511 := (not #630)
#512 := (or #511 #350)
#517 := [th-lemma arith triangle-eq]: #512
#513 := [unit-resolution #517 #510]: #350
#474 := (not #350)
#476 := (or #644 #518 #447 #474)
#478 := [th-lemma arith assign-bounds -1 -1 1]: #476
#485 := [unit-resolution #478 #530 #513 #501]: #644
#624 := (>= #646 0::Int)
#487 := (or #511 #624)
#488 := [th-lemma arith triangle-eq]: #487
#489 := [unit-resolution #488 #510]: #624
#575 := (* -1::Int #11)
#576 := (+ #9 #575)
#529 := (<= #576 0::Int)
#515 := (not #641)
#499 := (or #529 #447 #474 #515)
#479 := [th-lemma arith assign-bounds 1 -1/2 -1/2]: #499
#500 := [unit-resolution #479 #443 #501 #513]: #529
#571 := (>= #576 0::Int)
#519 := (or #571 #515 #518)
#525 := (not #571)
#531 := [hypothesis]: #525
#504 := [hypothesis]: #641
#514 := [th-lemma arith farkas -1/2 -1/2 -1/2 1 #513 #504 #531 #530]: false
#520 := [lemma #514]: #519
#455 := [unit-resolution #520 #443 #530]: #571
#456 := [th-lemma arith eq-propagate 1/2 1/2 -1/2 -1/2 -1/2 -1/2 #455 #500 #489 #513 #485 #443]: #580
#463 := (= #486 #11)
#461 := (= #645 f6)
#318 := (= f6 #645)
#22 := (:var 0 S2)
#23 := (f4 #22)
#657 := (pattern #23)
#24 := (f3 #23)
#63 := (= #22 #24)
#658 := (forall (vars (?v0 S2)) (:pat #657) #63)
#67 := (forall (vars (?v0 S2)) #63)
#659 := (iff #67 #658)
#661 := (iff #658 #658)
#662 := [rewrite]: #661
#660 := [rewrite]: #659
#663 := [trans #660 #662]: #659
#161 := (~ #67 #67)
#159 := (~ #63 #63)
#160 := [refl]: #159
#162 := [nnf-pos #160]: #161
#25 := (= #24 #22)
#26 := (forall (vars (?v0 S2)) #25)
#68 := (iff #26 #67)
#65 := (iff #25 #63)
#66 := [rewrite]: #65
#69 := [quant-intro #66]: #68
#62 := [asserted]: #26
#72 := [mp #62 #69]: #67
#151 := [mp~ #72 #162]: #67
#664 := [mp #151 #663]: #658
#319 := (not #658)
#650 := (or #319 #318)
#656 := [quant-inst #10]: #650
#537 := [unit-resolution #656 #664]: #318
#462 := [symm #537]: #461
#464 := [monotonicity #462]: #463
#465 := [trans #464 #456]: #494
#466 := [unit-resolution #516 #465]: false
#468 := [lemma #466]: #467
#453 := [unit-resolution #468 #452]: #494
#422 := (= #594 #486)
#538 := (= #11 #486)
#539 := [monotonicity #537]: #538
#419 := (= #594 #11)
#436 := [trans #539 #453]: #580
#454 := [unit-resolution #542 #436]: #493
#424 := [unit-resolution #483 #454 #452]: #654
#425 := [unit-resolution #508 #424]: #632
#426 := [unit-resolution #484 #425]: #641
#427 := [unit-resolution #479 #426 #454 #513]: #529
#429 := [unit-resolution #520 #426 #452]: #571
#430 := (not #529)
#431 := (or #574 #430 #525)
#273 := [th-lemma arith triangle-eq]: #431
#432 := [unit-resolution #273 #429 #427]: #574
#412 := (= #594 #9)
#428 := (= #307 f5)
#438 := (= f5 #307)
#652 := (or #319 #438)
#653 := [quant-inst #8]: #652
#471 := [unit-resolution #653 #664]: #438
#433 := [symm #471]: #428
#415 := [monotonicity #433]: #412
#421 := [trans #415 #432]: #419
#420 := [trans #421 #539]: #422
#423 := [trans #420 #453]: #596
#411 := [unit-resolution #450 #423]: false
#414 := [lemma #411]: #596
#472 := (= #9 #594)
#457 := [monotonicity #471]: #472
#417 := [trans #457 #414]: #473
#448 := (or #446 #17)
#435 := (= #307 #15)
#470 := [hypothesis]: #596
#434 := [trans #457 #470]: #473
#442 := [monotonicity #434]: #435
#444 := [trans #471 #442]: #17
#469 := [hypothesis]: #166
#445 := [unit-resolution #469 #444]: false
#449 := [lemma #445]: #448
#413 := [unit-resolution #449 #414]: #17
#329 := (or #158 #166 #167)
#320 := [def-axiom]: #329
#418 := [unit-resolution #320 #413 #535]: #167
#527 := (or #524 #18)
#540 := (= #645 #15)
#536 := [hypothesis]: #494
#534 := [trans #539 #536]: #580
#526 := [monotonicity #534]: #540
#522 := [trans #537 #526]: #18
#577 := [hypothesis]: #167
#523 := [unit-resolution #577 #522]: false
#528 := [lemma #523]: #527
#408 := [unit-resolution #528 #418]: #524
#398 := [unit-resolution #468 #408]: #518
#400 := (not #473)
#401 := (or #400 #593)
#404 := [th-lemma arith triangle-eq]: #401
[unit-resolution #404 #398 #417]: false
unsat
553acdc910f0fdb22c85eb345e54f82d0edbe969 60 0
#2 := false
decl f4 :: (-> S2 Int)
#15 := (:var 0 S2)
#16 := (f4 #15)
#642 := (pattern #16)
decl f3 :: (-> Int S2)
#17 := (f3 #16)
#68 := (= #15 #17)
#643 := (forall (vars (?v0 S2)) (:pat #642) #68)
#72 := (forall (vars (?v0 S2)) #68)
#644 := (iff #72 #643)
#646 := (iff #643 #643)
#647 := [rewrite]: #646
#645 := [rewrite]: #644
#648 := [trans #645 #647]: #644
#166 := (~ #72 #72)
#164 := (~ #68 #68)
#165 := [refl]: #164
#167 := [nnf-pos #165]: #166
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#73 := (iff #19 #72)
#70 := (iff #18 #68)
#71 := [rewrite]: #70
#74 := [quant-intro #71]: #73
#67 := [asserted]: #19
#77 := [mp #67 #74]: #72
#156 := [mp~ #77 #167]: #72
#649 := [mp #156 #648]: #643
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#53 := (f3 #9)
#59 := (= f5 #53)
#64 := (not #59)
#10 := 0::Int
#11 := (- #9 0::Int)
#12 := (f3 #11)
#13 := (= #12 f5)
#14 := (not #13)
#65 := (iff #14 #64)
#62 := (iff #13 #59)
#56 := (= #53 f5)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #13 #56)
#54 := (= #12 #53)
#51 := (= #11 #9)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#50 := [asserted]: #14
#69 := [mp #50 #66]: #64
#227 := (not #643)
#313 := (or #227 #59)
#314 := [quant-inst #8]: #313
[unit-resolution #314 #69 #649]: false
unsat
e50c0621b7e6bc56abfb22151bf216b6e4b0368f 196 0
#2 := false
decl f6 :: (-> Int S2)
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#58 := (+ #9 #57)
#61 := (f6 #58)
#15 := 0::Int
#16 := (f6 0::Int)
#67 := (= #16 #61)
#669 := (f3 #61)
#617 := (f6 #669)
#616 := (= #617 #61)
#519 := (= #61 #617)
#20 := (:var 0 S2)
#21 := (f3 #20)
#685 := (pattern #21)
#22 := (f6 #21)
#113 := (= #20 #22)
#686 := (forall (vars (?v0 S2)) (:pat #685) #113)
#116 := (forall (vars (?v0 S2)) #113)
#687 := (iff #116 #686)
#689 := (iff #686 #686)
#690 := [rewrite]: #689
#688 := [rewrite]: #687
#691 := [trans #688 #690]: #687
#212 := (~ #116 #116)
#210 := (~ #113 #113)
#211 := [refl]: #210
#213 := [nnf-pos #211]: #212
#23 := (= #22 #20)
#24 := (forall (vars (?v0 S2)) #23)
#117 := (iff #24 #116)
#114 := (iff #23 #113)
#115 := [rewrite]: #114
#118 := [quant-intro #115]: #117
#112 := [asserted]: #24
#121 := [mp #112 #118]: #116
#202 := [mp~ #121 #213]: #116
#692 := [mp #202 #691]: #686
#358 := (not #686)
#522 := (or #358 #519)
#523 := [quant-inst #61]: #522
#521 := [unit-resolution #523 #692]: #519
#620 := [symm #521]: #616
#526 := (= #16 #617)
#524 := (= 0::Int #669)
#642 := (= #669 0::Int)
#25 := (:var 0 Int)
#27 := (f6 #25)
#693 := (pattern #27)
#137 := (>= #25 0::Int)
#28 := (f3 #27)
#33 := (= #28 0::Int)
#186 := (or #33 #137)
#700 := (forall (vars (?v0 Int)) (:pat #693) #186)
#191 := (forall (vars (?v0 Int)) #186)
#703 := (iff #191 #700)
#701 := (iff #186 #186)
#702 := [refl]: #701
#704 := [quant-intro #702]: #703
#206 := (~ #191 #191)
#198 := (~ #186 #186)
#199 := [refl]: #198
#207 := [nnf-pos #199]: #206
#32 := (< #25 0::Int)
#34 := (implies #32 #33)
#35 := (forall (vars (?v0 Int)) #34)
#194 := (iff #35 #191)
#157 := (= 0::Int #28)
#163 := (not #32)
#164 := (or #163 #157)
#169 := (forall (vars (?v0 Int)) #164)
#192 := (iff #169 #191)
#189 := (iff #164 #186)
#183 := (or #137 #33)
#187 := (iff #183 #186)
#188 := [rewrite]: #187
#184 := (iff #164 #183)
#181 := (iff #157 #33)
#182 := [rewrite]: #181
#179 := (iff #163 #137)
#139 := (not #137)
#174 := (not #139)
#177 := (iff #174 #137)
#178 := [rewrite]: #177
#175 := (iff #163 #174)
#172 := (iff #32 #139)
#173 := [rewrite]: #172
#176 := [monotonicity #173]: #175
#180 := [trans #176 #178]: #179
#185 := [monotonicity #180 #182]: #184
#190 := [trans #185 #188]: #189
#193 := [quant-intro #190]: #192
#170 := (iff #35 #169)
#167 := (iff #34 #164)
#160 := (implies #32 #157)
#165 := (iff #160 #164)
#166 := [rewrite]: #165
#161 := (iff #34 #160)
#158 := (iff #33 #157)
#159 := [rewrite]: #158
#162 := [monotonicity #159]: #161
#168 := [trans #162 #166]: #167
#171 := [quant-intro #168]: #170
#195 := [trans #171 #193]: #194
#156 := [asserted]: #35
#196 := [mp #156 #195]: #191
#214 := [mp~ #196 #207]: #191
#705 := [mp #214 #704]: #700
#85 := (>= #58 0::Int)
#84 := (not #85)
#98 := (or #67 #85)
#103 := (not #98)
#13 := (- #9 #11)
#14 := (f6 #13)
#17 := (= #14 #16)
#12 := (< #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#106 := (iff #19 #103)
#75 := (not #12)
#76 := (or #75 #67)
#81 := (not #76)
#104 := (iff #81 #103)
#101 := (iff #76 #98)
#95 := (or #85 #67)
#99 := (iff #95 #98)
#100 := [rewrite]: #99
#96 := (iff #76 #95)
#93 := (iff #75 #85)
#88 := (not #84)
#91 := (iff #88 #85)
#92 := [rewrite]: #91
#89 := (iff #75 #88)
#86 := (iff #12 #84)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#97 := [monotonicity #94]: #96
#102 := [trans #97 #100]: #101
#105 := [monotonicity #102]: #104
#82 := (iff #19 #81)
#79 := (iff #18 #76)
#72 := (implies #12 #67)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #18 #72)
#70 := (iff #17 #67)
#64 := (= #61 #16)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #17 #64)
#62 := (= #14 #61)
#59 := (= #13 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#71 := [trans #66 #69]: #70
#74 := [monotonicity #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80]: #82
#107 := [trans #83 #105]: #106
#55 := [asserted]: #19
#108 := [mp #55 #107]: #103
#111 := [not-or-elim #108]: #84
#639 := (not #700)
#645 := (or #639 #85 #642)
#637 := (or #642 #85)
#486 := (or #639 #637)
#627 := (iff #486 #645)
#638 := (or #85 #642)
#488 := (or #639 #638)
#632 := (iff #488 #645)
#633 := [rewrite]: #632
#630 := (iff #486 #488)
#643 := (iff #637 #638)
#644 := [rewrite]: #643
#631 := [monotonicity #644]: #630
#628 := [trans #631 #633]: #627
#487 := [quant-inst #58]: #486
#634 := [mp #487 #628]: #645
#514 := [unit-resolution #634 #111 #705]: #642
#525 := [symm #514]: #524
#619 := [monotonicity #525]: #526
#607 := [trans #619 #620]: #67
#109 := (not #67)
#110 := [not-or-elim #108]: #109
[unit-resolution #110 #607]: false
unsat
cdc8e9a4d81e24ad5deddad57803ed137bea3298 319 0
#2 := false
decl f3 :: (-> Int S2)
decl f4 :: (-> S2 Int)
decl f6 :: S2
#10 := f6
#11 := (f4 f6)
#58 := -1::Int
#59 := (* -1::Int #11)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#60 := (+ #9 #59)
#63 := (f3 #60)
#14 := 0::Int
#15 := (f3 0::Int)
#69 := (= #15 #63)
#646 := (f4 #63)
#548 := (f3 #646)
#477 := (= #548 #63)
#549 := (= #63 #548)
#22 := (:var 0 S2)
#23 := (f4 #22)
#673 := (pattern #23)
#24 := (f3 #23)
#101 := (= #22 #24)
#674 := (forall (vars (?v0 S2)) (:pat #673) #101)
#104 := (forall (vars (?v0 S2)) #101)
#675 := (iff #104 #674)
#677 := (iff #674 #674)
#678 := [rewrite]: #677
#676 := [rewrite]: #675
#679 := [trans #676 #678]: #675
#200 := (~ #104 #104)
#198 := (~ #101 #101)
#199 := [refl]: #198
#201 := [nnf-pos #199]: #200
#25 := (= #24 #22)
#26 := (forall (vars (?v0 S2)) #25)
#105 := (iff #26 #104)
#102 := (iff #25 #101)
#103 := [rewrite]: #102
#106 := [quant-intro #103]: #105
#100 := [asserted]: #26
#109 := [mp #100 #106]: #104
#190 := [mp~ #109 #201]: #104
#680 := [mp #190 #679]: #674
#346 := (not #674)
#529 := (or #346 #549)
#530 := [quant-inst #63]: #529
#520 := [unit-resolution #530 #680]: #549
#478 := [symm #520]: #477
#471 := (= #15 #548)
#495 := (= 0::Int #646)
#639 := (= #646 0::Int)
#657 := (>= #60 0::Int)
#660 := (not #657)
#74 := (* -1::Int #9)
#75 := (+ #74 #11)
#78 := (f3 #75)
#618 := (f4 #78)
#598 := (<= #618 0::Int)
#524 := (not #598)
#508 := (= #618 0::Int)
#546 := (not #508)
#84 := (= #15 #78)
#559 := (f3 #618)
#540 := (= #559 #78)
#570 := (= #78 #559)
#551 := (or #346 #570)
#552 := [quant-inst #78]: #551
#553 := [unit-resolution #552 #680]: #570
#543 := [symm #553]: #540
#538 := (= #15 #559)
#556 := (= 0::Int #618)
#554 := [hypothesis]: #508
#542 := [symm #554]: #556
#539 := [monotonicity #542]: #538
#544 := [trans #539 #543]: #84
#98 := (not #84)
#89 := (or #69 #84)
#92 := (not #89)
#17 := (- #11 #9)
#18 := (f3 #17)
#19 := (= #18 #15)
#12 := (- #9 #11)
#13 := (f3 #12)
#16 := (= #13 #15)
#20 := (or #16 #19)
#21 := (not #20)
#93 := (iff #21 #92)
#90 := (iff #20 #89)
#87 := (iff #19 #84)
#81 := (= #78 #15)
#85 := (iff #81 #84)
#86 := [rewrite]: #85
#82 := (iff #19 #81)
#79 := (= #18 #78)
#76 := (= #17 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#88 := [trans #83 #86]: #87
#72 := (iff #16 #69)
#66 := (= #63 #15)
#70 := (iff #66 #69)
#71 := [rewrite]: #70
#67 := (iff #16 #66)
#64 := (= #13 #63)
#61 := (= #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#91 := [monotonicity #73 #88]: #90
#94 := [monotonicity #91]: #93
#57 := [asserted]: #21
#97 := [mp #57 #94]: #92
#99 := [not-or-elim #97]: #98
#545 := [unit-resolution #99 #544]: false
#541 := [lemma #545]: #546
#599 := (>= #618 0::Int)
#622 := (+ #59 #618)
#623 := (+ #9 #622)
#506 := (>= #623 0::Int)
#615 := (= #623 0::Int)
#617 := (<= #60 0::Int)
#502 := (or #508 #617)
#27 := (:var 0 Int)
#29 := (f3 #27)
#681 := (pattern #29)
#125 := (>= #27 0::Int)
#30 := (f4 #29)
#35 := (= #30 0::Int)
#174 := (or #35 #125)
#688 := (forall (vars (?v0 Int)) (:pat #681) #174)
#179 := (forall (vars (?v0 Int)) #174)
#691 := (iff #179 #688)
#689 := (iff #174 #174)
#690 := [refl]: #689
#692 := [quant-intro #690]: #691
#194 := (~ #179 #179)
#186 := (~ #174 #174)
#187 := [refl]: #186
#195 := [nnf-pos #187]: #194
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#182 := (iff #37 #179)
#145 := (= 0::Int #30)
#151 := (not #34)
#152 := (or #151 #145)
#157 := (forall (vars (?v0 Int)) #152)
#180 := (iff #157 #179)
#177 := (iff #152 #174)
#171 := (or #125 #35)
#175 := (iff #171 #174)
#176 := [rewrite]: #175
#172 := (iff #152 #171)
#169 := (iff #145 #35)
#170 := [rewrite]: #169
#167 := (iff #151 #125)
#127 := (not #125)
#162 := (not #127)
#165 := (iff #162 #125)
#166 := [rewrite]: #165
#163 := (iff #151 #162)
#160 := (iff #34 #127)
#161 := [rewrite]: #160
#164 := [monotonicity #161]: #163
#168 := [trans #164 #166]: #167
#173 := [monotonicity #168 #170]: #172
#178 := [trans #173 #176]: #177
#181 := [quant-intro #178]: #180
#158 := (iff #37 #157)
#155 := (iff #36 #152)
#148 := (implies #34 #145)
#153 := (iff #148 #152)
#154 := [rewrite]: #153
#149 := (iff #36 #148)
#146 := (iff #35 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#156 := [trans #150 #154]: #155
#159 := [quant-intro #156]: #158
#183 := [trans #159 #181]: #182
#144 := [asserted]: #37
#184 := [mp #144 #183]: #179
#202 := [mp~ #184 #195]: #179
#693 := [mp #202 #692]: #688
#625 := (not #688)
#512 := (or #625 #508 #617)
#629 := (>= #75 0::Int)
#509 := (or #508 #629)
#513 := (or #625 #509)
#589 := (iff #513 #512)
#607 := (or #625 #502)
#595 := (iff #607 #512)
#597 := [rewrite]: #595
#604 := (iff #513 #607)
#510 := (iff #509 #502)
#624 := (iff #629 #617)
#453 := [rewrite]: #624
#511 := [monotonicity #453]: #510
#608 := [monotonicity #511]: #604
#586 := [trans #608 #597]: #589
#514 := [quant-inst #75]: #513
#588 := [mp #514 #586]: #512
#521 := [unit-resolution #588 #693]: #502
#531 := [unit-resolution #521 #541]: #617
#455 := (not #617)
#610 := (or #615 #455)
#108 := (= #27 #30)
#133 := (or #108 #127)
#682 := (forall (vars (?v0 Int)) (:pat #681) #133)
#138 := (forall (vars (?v0 Int)) #133)
#685 := (iff #138 #682)
#683 := (iff #133 #133)
#684 := [refl]: #683
#686 := [quant-intro #684]: #685
#192 := (~ #138 #138)
#191 := (~ #133 #133)
#188 := [refl]: #191
#193 := [nnf-pos #188]: #192
#31 := (= #30 #27)
#28 := (<= 0::Int #27)
#32 := (implies #28 #31)
#33 := (forall (vars (?v0 Int)) #32)
#141 := (iff #33 #138)
#115 := (not #28)
#116 := (or #115 #108)
#121 := (forall (vars (?v0 Int)) #116)
#139 := (iff #121 #138)
#136 := (iff #116 #133)
#130 := (or #127 #108)
#134 := (iff #130 #133)
#135 := [rewrite]: #134
#131 := (iff #116 #130)
#128 := (iff #115 #127)
#124 := (iff #28 #125)
#126 := [rewrite]: #124
#129 := [monotonicity #126]: #128
#132 := [monotonicity #129]: #131
#137 := [trans #132 #135]: #136
#140 := [quant-intro #137]: #139
#122 := (iff #33 #121)
#119 := (iff #32 #116)
#112 := (implies #28 #108)
#117 := (iff #112 #116)
#118 := [rewrite]: #117
#113 := (iff #32 #112)
#110 := (iff #31 #108)
#111 := [rewrite]: #110
#114 := [monotonicity #111]: #113
#120 := [trans #114 #118]: #119
#123 := [quant-intro #120]: #122
#142 := [trans #123 #140]: #141
#107 := [asserted]: #33
#143 := [mp #107 #142]: #138
#189 := [mp~ #143 #193]: #138
#687 := [mp #189 #686]: #682
#648 := (not #682)
#611 := (or #648 #615 #455)
#630 := (not #629)
#619 := (= #75 #618)
#620 := (or #619 #630)
#614 := (or #648 #620)
#602 := (iff #614 #611)
#497 := (or #648 #610)
#605 := (iff #497 #611)
#507 := [rewrite]: #605
#498 := (iff #614 #497)
#612 := (iff #620 #610)
#456 := (iff #630 #455)
#609 := [monotonicity #453]: #456
#621 := (iff #619 #615)
#616 := [rewrite]: #621
#613 := [monotonicity #616 #609]: #612
#457 := [monotonicity #613]: #498
#603 := [trans #457 #507]: #602
#496 := [quant-inst #75]: #614
#606 := [mp #496 #603]: #611
#534 := [unit-resolution #606 #687]: #610
#535 := [unit-resolution #534 #531]: #615
#536 := (not #615)
#532 := (or #536 #506)
#537 := [th-lemma arith triangle-eq]: #532
#517 := [unit-resolution #537 #535]: #506
#463 := (not #506)
#518 := (or #599 #463 #455)
#499 := [th-lemma arith assign-bounds 1 -1]: #518
#523 := [unit-resolution #499 #531 #517]: #599
#519 := (not #599)
#525 := (or #508 #524 #519)
#493 := [th-lemma arith triangle-eq]: #525
#500 := [unit-resolution #493 #523 #541]: #524
#491 := (<= #623 0::Int)
#459 := (or #536 #491)
#490 := [th-lemma arith triangle-eq]: #459
#492 := [unit-resolution #490 #535]: #491
#494 := (not #491)
#501 := (or #660 #598 #494)
#503 := [th-lemma arith assign-bounds 1 -1]: #501
#504 := [unit-resolution #503 #492 #500]: #660
#628 := (or #639 #657)
#626 := (or #625 #639 #657)
#631 := (or #625 #628)
#627 := (iff #631 #626)
#633 := [rewrite]: #627
#632 := [quant-inst #60]: #631
#474 := [mp #632 #633]: #626
#505 := [unit-resolution #474 #693]: #628
#515 := [unit-resolution #505 #504]: #639
#516 := [symm #515]: #495
#472 := [monotonicity #516]: #471
#479 := [trans #472 #478]: #69
#95 := (not #69)
#96 := [not-or-elim #97]: #95
[unit-resolution #96 #479]: false
unsat
fb3139173a4905cad5bb69f844c2f635a2490c63 329 0
#2 := false
decl f6 :: S2
#10 := f6
decl f5 :: S2
#8 := f5
#26 := 0::Int
decl f4 :: (-> S2 Int)
#11 := (f4 f6)
#58 := -1::Int
#59 := (* -1::Int #11)
#9 := (f4 f5)
#60 := (+ #9 #59)
#92 := (>= #60 0::Int)
#98 := (ite #92 f5 f6)
decl f3 :: (-> Int S2)
#63 := (f3 #60)
#66 := (f4 #63)
#72 := (+ #11 #66)
#77 := (f3 #72)
#106 := (= #77 #98)
#361 := (= f6 #98)
#91 := (not #92)
#275 := (= f5 #98)
#592 := [hypothesis]: #92
#276 := (or #91 #275)
#362 := [def-axiom]: #276
#593 := [unit-resolution #362 #592]: #275
#510 := (= #77 f5)
#294 := (f3 #9)
#536 := (= #294 f5)
#367 := (= f5 #294)
#21 := (:var 0 S2)
#22 := (f4 #21)
#690 := (pattern #22)
#23 := (f3 #22)
#118 := (= #21 #23)
#691 := (forall (vars (?v0 S2)) (:pat #690) #118)
#121 := (forall (vars (?v0 S2)) #118)
#692 := (iff #121 #691)
#694 := (iff #691 #691)
#695 := [rewrite]: #694
#693 := [rewrite]: #692
#696 := [trans #693 #695]: #692
#215 := (~ #121 #121)
#213 := (~ #118 #118)
#214 := [refl]: #213
#216 := [nnf-pos #214]: #215
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S2)) #24)
#122 := (iff #25 #121)
#119 := (iff #24 #118)
#120 := [rewrite]: #119
#123 := [quant-intro #120]: #122
#117 := [asserted]: #25
#126 := [mp #117 #123]: #121
#205 := [mp~ #126 #216]: #121
#697 := [mp #205 #696]: #691
#364 := (not #691)
#341 := (or #364 #367)
#471 := [quant-inst #8]: #341
#583 := [unit-resolution #471 #697]: #367
#542 := [symm #583]: #536
#535 := (= #77 #294)
#556 := (= #72 #9)
#585 := (= #9 #72)
#686 := (* -1::Int #66)
#687 := (+ #59 #686)
#688 := (+ #9 #687)
#675 := (<= #688 0::Int)
#683 := (= #688 0::Int)
#340 := (or #91 #683)
#27 := (:var 0 Int)
#29 := (f3 #27)
#698 := (pattern #29)
#142 := (>= #27 0::Int)
#144 := (not #142)
#30 := (f4 #29)
#125 := (= #27 #30)
#150 := (or #125 #144)
#699 := (forall (vars (?v0 Int)) (:pat #698) #150)
#155 := (forall (vars (?v0 Int)) #150)
#702 := (iff #155 #699)
#700 := (iff #150 #150)
#701 := [refl]: #700
#703 := [quant-intro #701]: #702
#207 := (~ #155 #155)
#206 := (~ #150 #150)
#203 := [refl]: #206
#208 := [nnf-pos #203]: #207
#31 := (= #30 #27)
#28 := (<= 0::Int #27)
#32 := (implies #28 #31)
#33 := (forall (vars (?v0 Int)) #32)
#158 := (iff #33 #155)
#132 := (not #28)
#133 := (or #132 #125)
#138 := (forall (vars (?v0 Int)) #133)
#156 := (iff #138 #155)
#153 := (iff #133 #150)
#147 := (or #144 #125)
#151 := (iff #147 #150)
#152 := [rewrite]: #151
#148 := (iff #133 #147)
#145 := (iff #132 #144)
#141 := (iff #28 #142)
#143 := [rewrite]: #141
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#157 := [quant-intro #154]: #156
#139 := (iff #33 #138)
#136 := (iff #32 #133)
#129 := (implies #28 #125)
#134 := (iff #129 #133)
#135 := [rewrite]: #134
#130 := (iff #32 #129)
#127 := (iff #31 #125)
#128 := [rewrite]: #127
#131 := [monotonicity #128]: #130
#137 := [trans #131 #135]: #136
#140 := [quant-intro #137]: #139
#159 := [trans #140 #157]: #158
#124 := [asserted]: #33
#160 := [mp #124 #159]: #155
#204 := [mp~ #160 #208]: #155
#704 := [mp #204 #703]: #699
#329 := (not #699)
#330 := (or #329 #91 #683)
#678 := (= #60 #66)
#352 := (or #678 #91)
#331 := (or #329 #352)
#672 := (iff #331 #330)
#668 := (or #329 #340)
#671 := (iff #668 #330)
#666 := [rewrite]: #671
#669 := (iff #331 #668)
#665 := (iff #352 #340)
#339 := (or #683 #91)
#681 := (iff #339 #340)
#324 := [rewrite]: #681
#344 := (iff #352 #339)
#689 := (iff #678 #683)
#679 := [rewrite]: #689
#680 := [monotonicity #679]: #344
#328 := [trans #680 #324]: #665
#670 := [monotonicity #328]: #669
#310 := [trans #670 #666]: #672
#667 := [quant-inst #60]: #331
#673 := [mp #667 #310]: #330
#550 := [unit-resolution #673 #704]: #340
#546 := [unit-resolution #550 #592]: #683
#547 := (not #683)
#548 := (or #547 #675)
#551 := [th-lemma arith triangle-eq]: #548
#552 := [unit-resolution #551 #546]: #675
#315 := (>= #688 0::Int)
#553 := (or #547 #315)
#549 := [th-lemma arith triangle-eq]: #553
#554 := [unit-resolution #549 #546]: #315
#534 := [th-lemma arith eq-propagate -1 -1 #554 #552]: #585
#480 := [symm #534]: #556
#516 := [monotonicity #480]: #535
#517 := [trans #516 #542]: #510
#476 := [trans #517 #593]: #106
#111 := (not #106)
#17 := (< #9 #11)
#18 := (ite #17 f6 f5)
#12 := (- #9 #11)
#13 := (f3 #12)
#14 := (f4 #13)
#15 := (+ #14 #11)
#16 := (f3 #15)
#19 := (= #16 #18)
#20 := (not #19)
#114 := (iff #20 #111)
#83 := (= #18 #77)
#88 := (not #83)
#112 := (iff #88 #111)
#109 := (iff #83 #106)
#103 := (= #98 #77)
#107 := (iff #103 #106)
#108 := [rewrite]: #107
#104 := (iff #83 #103)
#101 := (= #18 #98)
#95 := (ite #91 f6 f5)
#99 := (= #95 #98)
#100 := [rewrite]: #99
#96 := (= #18 #95)
#93 := (iff #17 #91)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#102 := [trans #97 #100]: #101
#105 := [monotonicity #102]: #104
#110 := [trans #105 #108]: #109
#113 := [monotonicity #110]: #112
#89 := (iff #20 #88)
#86 := (iff #19 #83)
#80 := (= #77 #18)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #19 #80)
#78 := (= #16 #77)
#75 := (= #15 #72)
#69 := (+ #66 #11)
#73 := (= #69 #72)
#74 := [rewrite]: #73
#70 := (= #15 #69)
#67 := (= #14 #66)
#64 := (= #13 #63)
#61 := (= #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#76 := [trans #71 #74]: #75
#79 := [monotonicity #76]: #78
#82 := [monotonicity #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#115 := [trans #90 #113]: #114
#57 := [asserted]: #20
#116 := [mp #57 #115]: #111
#507 := [unit-resolution #116 #476]: false
#509 := [lemma #507]: #91
#363 := (or #92 #361)
#354 := [def-axiom]: #363
#545 := [unit-resolution #354 #509]: #361
#501 := (= #77 f6)
#365 := (f3 #11)
#499 := (= #365 f6)
#366 := (= f6 #365)
#368 := (or #364 #366)
#347 := [quant-inst #10]: #368
#544 := [unit-resolution #347 #697]: #366
#500 := [symm #544]: #499
#495 := (= #77 #365)
#489 := (= #72 #11)
#533 := (= #11 #72)
#658 := (<= #66 0::Int)
#316 := (= #66 0::Int)
#674 := (or #92 #316)
#35 := (= #30 0::Int)
#191 := (or #35 #142)
#705 := (forall (vars (?v0 Int)) (:pat #698) #191)
#196 := (forall (vars (?v0 Int)) #191)
#708 := (iff #196 #705)
#706 := (iff #191 #191)
#707 := [refl]: #706
#709 := [quant-intro #707]: #708
#209 := (~ #196 #196)
#217 := (~ #191 #191)
#218 := [refl]: #217
#210 := [nnf-pos #218]: #209
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#199 := (iff #37 #196)
#162 := (= 0::Int #30)
#168 := (not #34)
#169 := (or #168 #162)
#174 := (forall (vars (?v0 Int)) #169)
#197 := (iff #174 #196)
#194 := (iff #169 #191)
#188 := (or #142 #35)
#192 := (iff #188 #191)
#193 := [rewrite]: #192
#189 := (iff #169 #188)
#186 := (iff #162 #35)
#187 := [rewrite]: #186
#184 := (iff #168 #142)
#179 := (not #144)
#182 := (iff #179 #142)
#183 := [rewrite]: #182
#180 := (iff #168 #179)
#177 := (iff #34 #144)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#185 := [trans #181 #183]: #184
#190 := [monotonicity #185 #187]: #189
#195 := [trans #190 #193]: #194
#198 := [quant-intro #195]: #197
#175 := (iff #37 #174)
#172 := (iff #36 #169)
#165 := (implies #34 #162)
#170 := (iff #165 #169)
#171 := [rewrite]: #170
#166 := (iff #36 #165)
#163 := (iff #35 #162)
#164 := [rewrite]: #163
#167 := [monotonicity #164]: #166
#173 := [trans #167 #171]: #172
#176 := [quant-intro #173]: #175
#200 := [trans #176 #198]: #199
#161 := [asserted]: #37
#201 := [mp #161 #200]: #196
#219 := [mp~ #201 #210]: #196
#710 := [mp #219 #709]: #705
#664 := (not #705)
#386 := (or #664 #92 #316)
#676 := (or #316 #92)
#387 := (or #664 #676)
#383 := (iff #387 #386)
#389 := (or #664 #674)
#660 := (iff #389 #386)
#382 := [rewrite]: #660
#282 := (iff #387 #389)
#677 := (iff #676 #674)
#663 := [rewrite]: #677
#659 := [monotonicity #663]: #282
#657 := [trans #659 #382]: #383
#388 := [quant-inst #60]: #387
#661 := [mp #388 #657]: #386
#540 := [unit-resolution #661 #710]: #674
#541 := [unit-resolution #540 #509]: #316
#511 := (not #316)
#518 := (or #511 #658)
#520 := [th-lemma arith triangle-eq]: #518
#521 := [unit-resolution #520 #541]: #658
#662 := (>= #66 0::Int)
#522 := (or #511 #662)
#532 := [th-lemma arith triangle-eq]: #522
#512 := [unit-resolution #532 #541]: #662
#488 := [th-lemma arith eq-propagate 1 1 #512 #521]: #533
#494 := [symm #488]: #489
#496 := [monotonicity #494]: #495
#502 := [trans #496 #500]: #501
#503 := [trans #502 #545]: #106
[unit-resolution #116 #503]: false
unsat
73c940c8179ac801bce76e81a90860d953343b64 534 0
#2 := false
#29 := 0::Int
decl f4 :: (-> S2 Int)
decl f3 :: (-> Int S2)
decl f6 :: S2
#10 := f6
#11 := (f4 f6)
#61 := -1::Int
#62 := (* -1::Int #11)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#63 := (+ #9 #62)
#66 := (f3 #63)
#69 := (f4 #66)
#667 := (* -1::Int #69)
#668 := (+ #62 #667)
#669 := (+ #9 #668)
#664 := (= #669 0::Int)
#466 := (not #664)
#296 := (>= #669 0::Int)
#316 := (not #296)
decl f7 :: S2
#15 := f7
#16 := (f4 f7)
#75 := (* -1::Int #16)
#84 := (+ #62 #75)
#85 := (+ #9 #84)
#506 := (>= #85 0::Int)
#507 := (not #506)
#88 := (f3 #85)
#76 := (+ #75 #69)
#81 := (f3 #76)
#91 := (= #81 #88)
#500 := (f4 #88)
#503 := (f3 #500)
#432 := (= #503 #88)
#513 := (= #88 #503)
#24 := (:var 0 S2)
#25 := (f4 #24)
#671 := (pattern #25)
#26 := (f3 #25)
#98 := (= #24 #26)
#672 := (forall (vars (?v0 S2)) (:pat #671) #98)
#102 := (forall (vars (?v0 S2)) #98)
#673 := (iff #102 #672)
#675 := (iff #672 #672)
#676 := [rewrite]: #675
#674 := [rewrite]: #673
#677 := [trans #674 #676]: #673
#196 := (~ #102 #102)
#194 := (~ #98 #98)
#195 := [refl]: #194
#197 := [nnf-pos #195]: #196
#27 := (= #26 #24)
#28 := (forall (vars (?v0 S2)) #27)
#103 := (iff #28 #102)
#100 := (iff #27 #98)
#101 := [rewrite]: #100
#104 := [quant-intro #101]: #103
#97 := [asserted]: #28
#107 := [mp #97 #104]: #102
#186 := [mp~ #107 #197]: #102
#678 := [mp #186 #677]: #672
#344 := (not #672)
#426 := (or #344 #513)
#429 := [quant-inst #88]: #426
#437 := [unit-resolution #429 #678]: #513
#422 := [symm #437]: #432
#412 := (= #81 #503)
#329 := (= #76 #500)
#510 := (* -1::Int #500)
#511 := (+ #75 #510)
#512 := (+ #62 #511)
#605 := (+ #9 #512)
#581 := (<= #605 0::Int)
#602 := (= #605 0::Int)
#403 := [hypothesis]: #506
#586 := (or #507 #602)
#30 := (:var 0 Int)
#32 := (f3 #30)
#679 := (pattern #32)
#123 := (>= #30 0::Int)
#125 := (not #123)
#33 := (f4 #32)
#106 := (= #30 #33)
#131 := (or #106 #125)
#680 := (forall (vars (?v0 Int)) (:pat #679) #131)
#136 := (forall (vars (?v0 Int)) #131)
#683 := (iff #136 #680)
#681 := (iff #131 #131)
#682 := [refl]: #681
#684 := [quant-intro #682]: #683
#188 := (~ #136 #136)
#187 := (~ #131 #131)
#184 := [refl]: #187
#189 := [nnf-pos #184]: #188
#34 := (= #33 #30)
#31 := (<= 0::Int #30)
#35 := (implies #31 #34)
#36 := (forall (vars (?v0 Int)) #35)
#139 := (iff #36 #136)
#113 := (not #31)
#114 := (or #113 #106)
#119 := (forall (vars (?v0 Int)) #114)
#137 := (iff #119 #136)
#134 := (iff #114 #131)
#128 := (or #125 #106)
#132 := (iff #128 #131)
#133 := [rewrite]: #132
#129 := (iff #114 #128)
#126 := (iff #113 #125)
#122 := (iff #31 #123)
#124 := [rewrite]: #122
#127 := [monotonicity #124]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#138 := [quant-intro #135]: #137
#120 := (iff #36 #119)
#117 := (iff #35 #114)
#110 := (implies #31 #106)
#115 := (iff #110 #114)
#116 := [rewrite]: #115
#111 := (iff #35 #110)
#108 := (iff #34 #106)
#109 := [rewrite]: #108
#112 := [monotonicity #109]: #111
#118 := [trans #112 #116]: #117
#121 := [quant-intro #118]: #120
#140 := [trans #121 #138]: #139
#105 := [asserted]: #36
#141 := [mp #105 #140]: #136
#185 := [mp~ #141 #189]: #136
#685 := [mp #185 #684]: #680
#310 := (not #680)
#599 := (or #310 #507 #602)
#508 := (= #85 #500)
#509 := (or #508 #507)
#588 := (or #310 #509)
#577 := (iff #588 #599)
#590 := (or #310 #586)
#592 := (iff #590 #599)
#576 := [rewrite]: #592
#591 := (iff #588 #590)
#598 := (iff #509 #586)
#595 := (or #602 #507)
#596 := (iff #595 #586)
#597 := [rewrite]: #596
#587 := (iff #509 #595)
#606 := (iff #508 #602)
#593 := [rewrite]: #606
#584 := [monotonicity #593]: #587
#594 := [trans #584 #597]: #598
#585 := [monotonicity #594]: #591
#579 := [trans #585 #576]: #577
#589 := [quant-inst #85]: #588
#580 := [mp #589 #579]: #599
#471 := [unit-resolution #580 #685]: #586
#382 := [unit-resolution #471 #403]: #602
#448 := (not #602)
#409 := (or #448 #581)
#410 := [th-lemma arith triangle-eq]: #409
#371 := [unit-resolution #410 #382]: #581
#582 := (>= #605 0::Int)
#449 := (or #448 #582)
#456 := [th-lemma arith triangle-eq]: #449
#372 := [unit-resolution #456 #382]: #582
#656 := (<= #669 0::Int)
#322 := (>= #63 0::Int)
#564 := (>= #500 0::Int)
#373 := (not #581)
#365 := (or #564 #373 #507)
#374 := [th-lemma arith assign-bounds 1 -1]: #365
#375 := [unit-resolution #374 #371 #403]: #564
#462 := (not #582)
#460 := (not #564)
#357 := (or #322 #460 #462)
#565 := (>= #16 0::Int)
#402 := (= #16 0::Int)
#256 := (f3 #16)
#566 := (f4 #256)
#567 := (= #566 0::Int)
#386 := (not #565)
#387 := [hypothesis]: #386
#568 := (or #565 #567)
#38 := (= #33 0::Int)
#172 := (or #38 #123)
#686 := (forall (vars (?v0 Int)) (:pat #679) #172)
#177 := (forall (vars (?v0 Int)) #172)
#689 := (iff #177 #686)
#687 := (iff #172 #172)
#688 := [refl]: #687
#690 := [quant-intro #688]: #689
#190 := (~ #177 #177)
#198 := (~ #172 #172)
#199 := [refl]: #198
#191 := [nnf-pos #199]: #190
#37 := (< #30 0::Int)
#39 := (implies #37 #38)
#40 := (forall (vars (?v0 Int)) #39)
#180 := (iff #40 #177)
#143 := (= 0::Int #33)
#149 := (not #37)
#150 := (or #149 #143)
#155 := (forall (vars (?v0 Int)) #150)
#178 := (iff #155 #177)
#175 := (iff #150 #172)
#169 := (or #123 #38)
#173 := (iff #169 #172)
#174 := [rewrite]: #173
#170 := (iff #150 #169)
#167 := (iff #143 #38)
#168 := [rewrite]: #167
#165 := (iff #149 #123)
#160 := (not #125)
#163 := (iff #160 #123)
#164 := [rewrite]: #163
#161 := (iff #149 #160)
#158 := (iff #37 #125)
#159 := [rewrite]: #158
#162 := [monotonicity #159]: #161
#166 := [trans #162 #164]: #165
#171 := [monotonicity #166 #168]: #170
#176 := [trans #171 #174]: #175
#179 := [quant-intro #176]: #178
#156 := (iff #40 #155)
#153 := (iff #39 #150)
#146 := (implies #37 #143)
#151 := (iff #146 #150)
#152 := [rewrite]: #151
#147 := (iff #39 #146)
#144 := (iff #38 #143)
#145 := [rewrite]: #144
#148 := [monotonicity #145]: #147
#154 := [trans #148 #152]: #153
#157 := [quant-intro #154]: #156
#181 := [trans #157 #179]: #180
#142 := [asserted]: #40
#182 := [mp #142 #181]: #177
#200 := [mp~ #182 #191]: #177
#691 := [mp #200 #690]: #686
#644 := (not #686)
#549 := (or #644 #565 #567)
#557 := (or #567 #565)
#550 := (or #644 #557)
#536 := (iff #550 #549)
#552 := (or #644 #568)
#554 := (iff #552 #549)
#540 := [rewrite]: #554
#553 := (iff #550 #552)
#546 := (iff #557 #568)
#547 := [rewrite]: #546
#548 := [monotonicity #547]: #553
#537 := [trans #548 #540]: #536
#551 := [quant-inst #16]: #550
#538 := [mp #551 #537]: #549
#388 := [unit-resolution #538 #691]: #568
#389 := [unit-resolution #388 #387]: #567
#391 := (= #16 #566)
#342 := (= f7 #256)
#335 := (or #344 #342)
#346 := [quant-inst #15]: #335
#390 := [unit-resolution #346 #678]: #342
#384 := [monotonicity #390]: #391
#392 := [trans #384 #389]: #402
#377 := (not #402)
#378 := (or #377 #565)
#379 := [th-lemma arith triangle-eq]: #378
#381 := [unit-resolution #379 #387 #392]: false
#380 := [lemma #381]: #565
#366 := (or #386 #322 #460 #462)
#376 := [th-lemma arith assign-bounds 1 1 1]: #366
#358 := [unit-resolution #376 #380]: #357
#359 := [unit-resolution #358 #375 #372]: #322
#452 := (not #322)
#321 := (or #452 #664)
#311 := (or #310 #452 #664)
#334 := (= #63 #69)
#666 := (or #334 #452)
#312 := (or #310 #666)
#653 := (iff #312 #311)
#649 := (or #310 #321)
#652 := (iff #649 #311)
#647 := [rewrite]: #652
#650 := (iff #312 #649)
#646 := (iff #666 #321)
#320 := (or #664 #452)
#662 := (iff #320 #321)
#305 := [rewrite]: #662
#325 := (iff #666 #320)
#670 := (iff #334 #664)
#660 := [rewrite]: #670
#661 := [monotonicity #660]: #325
#309 := [trans #661 #305]: #646
#651 := [monotonicity #309]: #650
#291 := [trans #651 #647]: #653
#648 := [quant-inst #63]: #312
#654 := [mp #648 #291]: #311
#438 := [unit-resolution #654 #685]: #321
#351 := [unit-resolution #438 #359]: #664
#467 := (or #466 #656)
#450 := [th-lemma arith triangle-eq]: #467
#360 := [unit-resolution #450 #351]: #656
#361 := (or #466 #296)
#352 := [th-lemma arith triangle-eq]: #361
#362 := [unit-resolution #352 #351]: #296
#331 := [th-lemma arith eq-propagate 1 1 -1 -1 #362 #360 #372 #371]: #329
#332 := [monotonicity #331]: #412
#323 := [trans #332 #422]: #91
#94 := (not #91)
#19 := (+ #11 #16)
#20 := (- #9 #19)
#21 := (f3 #20)
#12 := (- #9 #11)
#13 := (f3 #12)
#14 := (f4 #13)
#17 := (- #14 #16)
#18 := (f3 #17)
#22 := (= #18 #21)
#23 := (not #22)
#95 := (iff #23 #94)
#92 := (iff #22 #91)
#89 := (= #21 #88)
#86 := (= #20 #85)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#82 := (= #18 #81)
#79 := (= #17 #76)
#72 := (- #69 #16)
#77 := (= #72 #76)
#78 := [rewrite]: #77
#73 := (= #17 #72)
#70 := (= #14 #69)
#67 := (= #13 #66)
#64 := (= #12 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80]: #82
#93 := [monotonicity #83 #90]: #92
#96 := [monotonicity #93]: #95
#60 := [asserted]: #23
#99 := [mp #60 #96]: #94
#336 := [unit-resolution #99 #323]: false
#337 := [lemma #336]: #507
#363 := (f4 #81)
#504 := (>= #363 0::Int)
#355 := (+ #16 #667)
#356 := (<= #355 0::Int)
#578 := (= #500 0::Int)
#481 := (not #578)
#621 := (= #363 0::Int)
#350 := (not #356)
#480 := [hypothesis]: #350
#454 := (or #356 #621)
#609 := (or #644 #356 #621)
#655 := (>= #76 0::Int)
#615 := (or #621 #655)
#612 := (or #644 #615)
#600 := (iff #612 #609)
#495 := (or #644 #454)
#603 := (iff #495 #609)
#505 := [rewrite]: #603
#496 := (iff #612 #495)
#610 := (iff #615 #454)
#622 := (or #621 #356)
#607 := (iff #622 #454)
#608 := [rewrite]: #607
#451 := (iff #615 #622)
#634 := (iff #655 #356)
#635 := [rewrite]: #634
#453 := [monotonicity #635]: #451
#611 := [trans #453 #608]: #610
#455 := [monotonicity #611]: #496
#601 := [trans #455 #505]: #600
#494 := [quant-inst #76]: #612
#604 := [mp #494 #601]: #609
#424 := [unit-resolution #604 #691]: #454
#417 := [unit-resolution #424 #480]: #621
#419 := (not #621)
#423 := (or #481 #419)
#498 := (f3 #363)
#431 := (= #498 #503)
#428 := (= #503 #498)
#436 := (= #500 #363)
#433 := (= 0::Int #363)
#475 := [hypothesis]: #621
#435 := [symm #475]: #433
#476 := [hypothesis]: #578
#434 := [trans #476 #435]: #436
#430 := [monotonicity #434]: #428
#427 := [symm #430]: #431
#457 := (= #81 #498)
#493 := (or #344 #457)
#514 := [quant-inst #81]: #493
#425 := [unit-resolution #514 #678]: #457
#414 := [trans #425 #427]: #412
#415 := [trans #414 #422]: #91
#418 := [unit-resolution #99 #415]: false
#416 := [lemma #418]: #423
#420 := [unit-resolution #416 #417]: #481
#569 := (or #506 #578)
#573 := (or #644 #506 #578)
#583 := (or #578 #506)
#574 := (or #644 #583)
#560 := (iff #574 #573)
#575 := (or #644 #569)
#558 := (iff #575 #573)
#559 := [rewrite]: #558
#555 := (iff #574 #575)
#570 := (iff #583 #569)
#572 := [rewrite]: #570
#556 := [monotonicity #572]: #555
#561 := [trans #556 #559]: #560
#571 := [quant-inst #85]: #574
#562 := [mp #571 #561]: #573
#485 := [unit-resolution #562 #691]: #569
#421 := [unit-resolution #485 #420]: #506
#407 := [unit-resolution #471 #421]: #602
#408 := [unit-resolution #410 #407]: #581
#563 := (<= #500 0::Int)
#442 := (or #563 #356)
#641 := (>= #69 0::Int)
#297 := (= #69 0::Int)
#459 := (not #656)
#469 := (not #563)
#470 := [hypothesis]: #469
#477 := (or #564 #563)
#478 := [th-lemma arith farkas 1 1]: #477
#479 := [unit-resolution #478 #470]: #564
#482 := (or #481 #563)
#483 := [th-lemma arith triangle-eq]: #482
#484 := [unit-resolution #483 #470]: #481
#486 := [unit-resolution #485 #484]: #506
#487 := [unit-resolution #471 #486]: #602
#458 := [unit-resolution #456 #487]: #582
#463 := (or #459 #356 #460 #462)
#464 := [th-lemma arith assign-bounds 1 1 -1]: #463
#465 := [unit-resolution #464 #458 #480 #479]: #459
#468 := [unit-resolution #450 #465]: #466
#439 := [unit-resolution #438 #468]: #452
#657 := (or #297 #322)
#645 := (or #644 #297 #322)
#367 := (or #644 #657)
#369 := (iff #367 #645)
#370 := [rewrite]: #369
#368 := [quant-inst #63]: #367
#263 := [mp #368 #370]: #645
#440 := [unit-resolution #263 #691]: #657
#441 := [unit-resolution #440 #439]: #297
#443 := (not #297)
#444 := (or #443 #641)
#445 := [th-lemma arith triangle-eq]: #444
#288 := [unit-resolution #445 #441]: #641
#446 := [th-lemma arith farkas 1 1 1 1 1 #480 #439 #479 #458 #288]: false
#447 := [lemma #446]: #442
#411 := [unit-resolution #447 #480]: #563
#393 := (or #578 #469 #460)
#395 := [th-lemma arith triangle-eq]: #393
#396 := [unit-resolution #395 #420 #411]: #460
#397 := [th-lemma arith farkas 1 -1 1 #396 #421 #408]: false
#398 := [lemma #397]: #356
#353 := (+ #667 #363)
#354 := (+ #16 #353)
#620 := (>= #354 0::Int)
#639 := (= #354 0::Int)
#627 := (or #350 #639)
#630 := (or #310 #350 #639)
#658 := (not #655)
#364 := (= #76 #363)
#638 := (or #364 #658)
#625 := (or #310 #638)
#618 := (iff #625 #630)
#472 := (or #310 #627)
#616 := (iff #472 #630)
#617 := [rewrite]: #616
#473 := (iff #625 #472)
#624 := (iff #638 #627)
#633 := (or #639 #350)
#628 := (iff #633 #627)
#623 := [rewrite]: #628
#637 := (iff #638 #633)
#632 := (iff #658 #350)
#636 := [monotonicity #635]: #632
#642 := (iff #364 #639)
#643 := [rewrite]: #642
#626 := [monotonicity #643 #636]: #637
#629 := [trans #626 #623]: #624
#474 := [monotonicity #629]: #473
#619 := [trans #474 #617]: #618
#631 := [quant-inst #76]: #625
#613 := [mp #631 #619]: #630
#338 := [unit-resolution #613 #685]: #627
#339 := [unit-resolution #338 #398]: #639
#340 := (not #639)
#330 := (or #340 #620)
#341 := [th-lemma arith triangle-eq]: #330
#324 := [unit-resolution #341 #339]: #620
#326 := (not #620)
#327 := (or #504 #326 #350)
#306 := [th-lemma arith assign-bounds 1 -1]: #327
#308 := [unit-resolution #306 #324 #398]: #504
#614 := (<= #354 0::Int)
#313 := (or #340 #614)
#314 := [th-lemma arith triangle-eq]: #313
#315 := [unit-resolution #314 #339]: #614
#318 := (not #614)
#317 := (not #504)
#307 := (or #316 #506 #317 #318)
#319 := [th-lemma arith assign-bounds 1 1 -1]: #307
#300 := [unit-resolution #319 #315 #308 #337]: #316
#302 := [unit-resolution #352 #300]: #466
#640 := (<= #69 0::Int)
#299 := (not #640)
#489 := (<= #363 0::Int)
#304 := (not #489)
#303 := [unit-resolution #485 #337]: #578
#301 := [unit-resolution #416 #303]: #419
#295 := (or #621 #304)
#292 := (or #621 #304 #317)
#294 := [th-lemma arith triangle-eq]: #292
#298 := [unit-resolution #294 #308]: #295
#293 := [unit-resolution #298 #301]: #304
#273 := (or #299 #386 #489 #318)
#278 := [th-lemma arith assign-bounds -1 -1 1]: #273
#279 := [unit-resolution #278 #315 #293 #380]: #299
#284 := (or #443 #640)
#286 := [th-lemma arith triangle-eq]: #284
#287 := [unit-resolution #286 #279]: #443
#289 := [unit-resolution #440 #287]: #322
[unit-resolution #438 #289 #302]: false
unsat
34227136b3e635e49e4bd2c36ebe9baea671313c 33 0
#2 := false
decl f3 :: (-> Int S2)
#10 := 0::Int
#13 := (f3 0::Int)
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#11 := (* #9 0::Int)
#12 := (f3 #11)
#14 := (= #12 #13)
#15 := (not #14)
#67 := (iff #15 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #15 #62)
#60 := (iff #14 true)
#55 := (= #13 #13)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#52 := (= #11 0::Int)
#53 := [rewrite]: #52
#54 := [monotonicity #53]: #14
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#51 := [asserted]: #15
[mp #51 #68]: false
unsat
5f53219a938672e87feb759aff16c7e606dae494 33 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#13 := (f3 0::Int)
decl f4 :: (-> S2 Int)
decl f5 :: S2
#9 := f5
#10 := (f4 f5)
#11 := (* 0::Int #10)
#12 := (f3 #11)
#14 := (= #12 #13)
#15 := (not #14)
#67 := (iff #15 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #15 #62)
#60 := (iff #14 true)
#55 := (= #13 #13)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#52 := (= #11 0::Int)
#53 := [rewrite]: #52
#54 := [monotonicity #53]: #14
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#51 := [asserted]: #15
[mp #51 #68]: false
unsat
bcbe65ed23887ebf767f986a377eb5d5d4329334 60 0
#2 := false
decl f4 :: (-> S2 Int)
#15 := (:var 0 S2)
#16 := (f4 #15)
#642 := (pattern #16)
decl f3 :: (-> Int S2)
#17 := (f3 #16)
#69 := (= #15 #17)
#643 := (forall (vars (?v0 S2)) (:pat #642) #69)
#73 := (forall (vars (?v0 S2)) #69)
#644 := (iff #73 #643)
#646 := (iff #643 #643)
#647 := [rewrite]: #646
#645 := [rewrite]: #644
#648 := [trans #645 #647]: #644
#167 := (~ #73 #73)
#165 := (~ #69 #69)
#166 := [refl]: #165
#168 := [nnf-pos #166]: #167
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#74 := (iff #19 #73)
#71 := (iff #18 #69)
#72 := [rewrite]: #71
#75 := [quant-intro #72]: #74
#68 := [asserted]: #19
#78 := [mp #68 #75]: #73
#157 := [mp~ #78 #168]: #73
#649 := [mp #157 #648]: #643
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#54 := (f3 #9)
#60 := (= f5 #54)
#65 := (not #60)
#10 := 1::Int
#11 := (* #9 1::Int)
#12 := (f3 #11)
#13 := (= #12 f5)
#14 := (not #13)
#66 := (iff #14 #65)
#63 := (iff #13 #60)
#57 := (= #54 f5)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #13 #57)
#55 := (= #12 #54)
#52 := (= #11 #9)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#51 := [asserted]: #14
#70 := [mp #51 #67]: #65
#228 := (not #643)
#313 := (or #228 #60)
#314 := [quant-inst #8]: #313
[unit-resolution #314 #70 #649]: false
unsat
e4bab5727353f9f21d2db9b237337f965134bab9 60 0
#2 := false
decl f4 :: (-> S2 Int)
#15 := (:var 0 S2)
#16 := (f4 #15)
#642 := (pattern #16)
decl f3 :: (-> Int S2)
#17 := (f3 #16)
#69 := (= #15 #17)
#643 := (forall (vars (?v0 S2)) (:pat #642) #69)
#73 := (forall (vars (?v0 S2)) #69)
#644 := (iff #73 #643)
#646 := (iff #643 #643)
#647 := [rewrite]: #646
#645 := [rewrite]: #644
#648 := [trans #645 #647]: #644
#167 := (~ #73 #73)
#165 := (~ #69 #69)
#166 := [refl]: #165
#168 := [nnf-pos #166]: #167
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#74 := (iff #19 #73)
#71 := (iff #18 #69)
#72 := [rewrite]: #71
#75 := [quant-intro #72]: #74
#68 := [asserted]: #19
#78 := [mp #68 #75]: #73
#157 := [mp~ #78 #168]: #73
#649 := [mp #157 #648]: #643
decl f5 :: S2
#9 := f5
#10 := (f4 f5)
#54 := (f3 #10)
#60 := (= f5 #54)
#65 := (not #60)
#8 := 1::Int
#11 := (* 1::Int #10)
#12 := (f3 #11)
#13 := (= #12 f5)
#14 := (not #13)
#66 := (iff #14 #65)
#63 := (iff #13 #60)
#57 := (= #54 f5)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #13 #57)
#55 := (= #12 #54)
#52 := (= #11 #10)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#51 := [asserted]: #14
#70 := [mp #51 #67]: #65
#228 := (not #643)
#313 := (or #228 #60)
#314 := [quant-inst #9]: #313
[unit-resolution #314 #70 #649]: false
unsat
58f4f4aabe0e5d2dd886a62e9ee338d17e831e5a 35 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 3::Int
decl f4 :: (-> S2 Int)
decl f5 :: S2
#9 := f5
#10 := (f4 f5)
#13 := (* #10 3::Int)
#14 := (f3 #13)
#11 := (* 3::Int #10)
#12 := (f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#70 := (iff #16 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #16 #65)
#63 := (iff #15 true)
#58 := (= #12 #12)
#61 := (iff #58 true)
#62 := [rewrite]: #61
#59 := (iff #15 #58)
#56 := (= #14 #12)
#54 := (= #13 #11)
#55 := [rewrite]: #54
#57 := [monotonicity #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#53 := [asserted]: #16
[mp #53 #71]: false
unsat
6610e16f7eb0fe91ddb9c3e14cbb3397d007ccfb 260 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#11 := (f3 0::Int)
decl f4 :: (-> Int Int Int)
#9 := (f4 0::Int 0::Int)
#10 := (f3 #9)
#12 := (= #10 #11)
#798 := (= #9 0::Int)
#19 := (:var 0 Int)
#30 := (:var 1 Int)
#31 := (f4 #30 #19)
#877 := (pattern #31)
#179 := -1::Int
#183 := (* -1::Int #19)
#180 := (* -1::Int #30)
#186 := (div #180 #183)
#358 := (* -1::Int #186)
#359 := (+ #31 #358)
#360 := (= #359 0::Int)
#41 := (div #30 #19)
#355 := (* -1::Int #41)
#356 := (+ #31 #355)
#357 := (= #356 0::Int)
#218 := (>= #30 0::Int)
#211 := (<= #19 0::Int)
#318 := (or #211 #218)
#319 := (not #318)
#207 := (<= #30 0::Int)
#316 := (or #207 #211)
#317 := (not #316)
#322 := (or #317 #319)
#361 := (ite #322 #357 #360)
#354 := (= #31 0::Int)
#33 := (= #19 0::Int)
#32 := (= #30 0::Int)
#34 := (or #32 #33)
#362 := (ite #34 #354 #361)
#878 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #877) #362)
#365 := (forall (vars (?v0 Int) (?v1 Int)) #362)
#881 := (iff #365 #878)
#879 := (iff #362 #362)
#880 := [refl]: #879
#882 := [quant-intro #880]: #881
#325 := (ite #322 #41 #186)
#328 := (ite #34 0::Int #325)
#331 := (= #31 #328)
#334 := (forall (vars (?v0 Int) (?v1 Int)) #331)
#366 := (iff #334 #365)
#363 := (iff #331 #362)
#364 := [rewrite]: #363
#367 := [quant-intro #364]: #366
#219 := (not #218)
#212 := (not #211)
#222 := (and #212 #219)
#208 := (not #207)
#215 := (and #208 #212)
#225 := (or #215 #222)
#228 := (ite #225 #41 #186)
#231 := (ite #34 0::Int #228)
#234 := (= #31 #231)
#237 := (forall (vars (?v0 Int) (?v1 Int)) #234)
#335 := (iff #237 #334)
#332 := (iff #234 #331)
#329 := (= #231 #328)
#326 := (= #228 #325)
#323 := (iff #225 #322)
#320 := (iff #222 #319)
#321 := [rewrite]: #320
#301 := (iff #215 #317)
#302 := [rewrite]: #301
#324 := [monotonicity #302 #321]: #323
#327 := [monotonicity #324]: #326
#330 := [monotonicity #327]: #329
#333 := [monotonicity #330]: #332
#336 := [quant-intro #333]: #335
#297 := (~ #237 #237)
#310 := (~ #234 #234)
#311 := [refl]: #310
#298 := [nnf-pos #311]: #297
#43 := (- #19)
#42 := (- #30)
#44 := (div #42 #43)
#36 := (< 0::Int #19)
#38 := (< #30 0::Int)
#39 := (and #38 #36)
#35 := (< 0::Int #30)
#37 := (and #35 #36)
#40 := (or #37 #39)
#45 := (ite #40 #41 #44)
#46 := (ite #34 0::Int #45)
#47 := (= #31 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#240 := (iff #48 #237)
#173 := (and #36 #38)
#176 := (or #37 #173)
#189 := (ite #176 #41 #186)
#167 := (= 0::Int #19)
#164 := (= 0::Int #30)
#170 := (or #164 #167)
#192 := (ite #170 0::Int #189)
#195 := (= #31 #192)
#198 := (forall (vars (?v0 Int) (?v1 Int)) #195)
#238 := (iff #198 #237)
#235 := (iff #195 #234)
#232 := (= #192 #231)
#229 := (= #189 #228)
#226 := (iff #176 #225)
#223 := (iff #173 #222)
#220 := (iff #38 #219)
#221 := [rewrite]: #220
#213 := (iff #36 #212)
#214 := [rewrite]: #213
#224 := [monotonicity #214 #221]: #223
#216 := (iff #37 #215)
#209 := (iff #35 #208)
#210 := [rewrite]: #209
#217 := [monotonicity #210 #214]: #216
#227 := [monotonicity #217 #224]: #226
#230 := [monotonicity #227]: #229
#205 := (iff #170 #34)
#203 := (iff #167 #33)
#204 := [rewrite]: #203
#201 := (iff #164 #32)
#202 := [rewrite]: #201
#206 := [monotonicity #202 #204]: #205
#233 := [monotonicity #206 #230]: #232
#236 := [monotonicity #233]: #235
#239 := [quant-intro #236]: #238
#199 := (iff #48 #198)
#196 := (iff #47 #195)
#193 := (= #46 #192)
#190 := (= #45 #189)
#187 := (= #44 #186)
#184 := (= #43 #183)
#185 := [rewrite]: #184
#181 := (= #42 #180)
#182 := [rewrite]: #181
#188 := [monotonicity #182 #185]: #187
#177 := (iff #40 #176)
#174 := (iff #39 #173)
#175 := [rewrite]: #174
#178 := [monotonicity #175]: #177
#191 := [monotonicity #178 #188]: #190
#171 := (iff #34 #170)
#168 := (iff #33 #167)
#169 := [rewrite]: #168
#165 := (iff #32 #164)
#166 := [rewrite]: #165
#172 := [monotonicity #166 #169]: #171
#194 := [monotonicity #172 #191]: #193
#197 := [monotonicity #194]: #196
#200 := [quant-intro #197]: #199
#241 := [trans #200 #239]: #240
#163 := [asserted]: #48
#242 := [mp #163 #241]: #237
#312 := [mp~ #242 #298]: #237
#337 := [mp #312 #336]: #334
#368 := [mp #337 #367]: #365
#883 := [mp #368 #882]: #878
#755 := (not #878)
#757 := (or #755 #798)
#811 := (* -1::Int 0::Int)
#812 := (div #811 #811)
#813 := (* -1::Int #812)
#808 := (+ #9 #813)
#809 := (= #808 0::Int)
#814 := (div 0::Int 0::Int)
#815 := (* -1::Int #814)
#810 := (+ #9 #815)
#816 := (= #810 0::Int)
#833 := (>= 0::Int 0::Int)
#657 := (<= 0::Int 0::Int)
#658 := (or #657 #833)
#659 := (not #658)
#801 := (or #657 #657)
#802 := (not #801)
#803 := (or #802 #659)
#804 := (ite #803 #816 #809)
#799 := (= 0::Int 0::Int)
#805 := (or #799 #799)
#806 := (ite #805 #798 #804)
#758 := (or #755 #806)
#756 := (iff #758 #757)
#740 := (iff #757 #757)
#741 := [rewrite]: #740
#768 := (iff #806 #798)
#1 := true
#764 := (ite true #798 #816)
#767 := (iff #764 #798)
#763 := [rewrite]: #767
#765 := (iff #806 #764)
#761 := (iff #804 #816)
#774 := (ite false #816 #816)
#770 := (iff #774 #816)
#777 := [rewrite]: #770
#775 := (iff #804 #774)
#784 := (iff #809 #816)
#783 := (= #808 #810)
#781 := (= #813 #815)
#769 := (= #812 #814)
#780 := (= #811 0::Int)
#772 := [rewrite]: #780
#771 := [monotonicity #772 #772]: #769
#782 := [monotonicity #771]: #781
#779 := [monotonicity #782]: #783
#773 := [monotonicity #779]: #784
#791 := (iff #803 false)
#695 := (or false false)
#790 := (iff #695 false)
#787 := [rewrite]: #790
#696 := (iff #803 #695)
#693 := (iff #659 false)
#481 := (not true)
#840 := (iff #481 false)
#843 := [rewrite]: #840
#692 := (iff #659 #481)
#689 := (iff #658 true)
#636 := (or true true)
#792 := (iff #636 true)
#793 := [rewrite]: #792
#789 := (iff #658 #636)
#839 := (iff #833 true)
#841 := [rewrite]: #839
#794 := (iff #657 true)
#797 := [rewrite]: #794
#674 := [monotonicity #797 #841]: #789
#691 := [trans #674 #793]: #689
#685 := [monotonicity #691]: #692
#694 := [trans #685 #843]: #693
#785 := (iff #802 false)
#788 := (iff #802 #481)
#681 := (iff #801 true)
#679 := (iff #801 #636)
#680 := [monotonicity #797 #797]: #679
#640 := [trans #680 #793]: #681
#690 := [monotonicity #640]: #788
#786 := [trans #690 #843]: #785
#697 := [monotonicity #786 #694]: #696
#778 := [trans #697 #787]: #791
#776 := [monotonicity #778 #773]: #775
#762 := [trans #776 #777]: #761
#795 := (iff #805 true)
#638 := (iff #805 #636)
#800 := (iff #799 true)
#807 := [rewrite]: #800
#639 := [monotonicity #807 #807]: #638
#796 := [trans #639 #793]: #795
#766 := [monotonicity #796 #762]: #765
#754 := [trans #766 #763]: #768
#760 := [monotonicity #754]: #756
#743 := [trans #760 #741]: #756
#759 := [quant-inst #8 #8]: #758
#744 := [mp #759 #743]: #757
#746 := [unit-resolution #744 #883]: #798
#747 := [monotonicity #746]: #12
#13 := (not #12)
#77 := [asserted]: #13
[unit-resolution #77 #747]: false
unsat
3797d02b9c4cbb9f278d97dba12e1e356411933c 275 0
#2 := false
decl f3 :: (-> Int S2)
#10 := 0::Int
#13 := (f3 0::Int)
decl f4 :: (-> Int Int Int)
decl f5 :: (-> S2 Int)
decl f6 :: S2
#8 := f6
#9 := (f5 f6)
#11 := (f4 #9 0::Int)
#12 := (f3 #11)
#14 := (= #12 #13)
#641 := (= #11 0::Int)
#21 := (:var 0 Int)
#32 := (:var 1 Int)
#33 := (f4 #32 #21)
#879 := (pattern #33)
#181 := -1::Int
#185 := (* -1::Int #21)
#182 := (* -1::Int #32)
#188 := (div #182 #185)
#360 := (* -1::Int #188)
#361 := (+ #33 #360)
#362 := (= #361 0::Int)
#43 := (div #32 #21)
#357 := (* -1::Int #43)
#358 := (+ #33 #357)
#359 := (= #358 0::Int)
#220 := (>= #32 0::Int)
#213 := (<= #21 0::Int)
#320 := (or #213 #220)
#321 := (not #320)
#209 := (<= #32 0::Int)
#318 := (or #209 #213)
#319 := (not #318)
#324 := (or #319 #321)
#363 := (ite #324 #359 #362)
#356 := (= #33 0::Int)
#35 := (= #21 0::Int)
#34 := (= #32 0::Int)
#36 := (or #34 #35)
#364 := (ite #36 #356 #363)
#880 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #879) #364)
#367 := (forall (vars (?v0 Int) (?v1 Int)) #364)
#883 := (iff #367 #880)
#881 := (iff #364 #364)
#882 := [refl]: #881
#884 := [quant-intro #882]: #883
#327 := (ite #324 #43 #188)
#330 := (ite #36 0::Int #327)
#333 := (= #33 #330)
#336 := (forall (vars (?v0 Int) (?v1 Int)) #333)
#368 := (iff #336 #367)
#365 := (iff #333 #364)
#366 := [rewrite]: #365
#369 := [quant-intro #366]: #368
#221 := (not #220)
#214 := (not #213)
#224 := (and #214 #221)
#210 := (not #209)
#217 := (and #210 #214)
#227 := (or #217 #224)
#230 := (ite #227 #43 #188)
#233 := (ite #36 0::Int #230)
#236 := (= #33 #233)
#239 := (forall (vars (?v0 Int) (?v1 Int)) #236)
#337 := (iff #239 #336)
#334 := (iff #236 #333)
#331 := (= #233 #330)
#328 := (= #230 #327)
#325 := (iff #227 #324)
#322 := (iff #224 #321)
#323 := [rewrite]: #322
#303 := (iff #217 #319)
#304 := [rewrite]: #303
#326 := [monotonicity #304 #323]: #325
#329 := [monotonicity #326]: #328
#332 := [monotonicity #329]: #331
#335 := [monotonicity #332]: #334
#338 := [quant-intro #335]: #337
#299 := (~ #239 #239)
#312 := (~ #236 #236)
#313 := [refl]: #312
#300 := [nnf-pos #313]: #299
#45 := (- #21)
#44 := (- #32)
#46 := (div #44 #45)
#38 := (< 0::Int #21)
#40 := (< #32 0::Int)
#41 := (and #40 #38)
#37 := (< 0::Int #32)
#39 := (and #37 #38)
#42 := (or #39 #41)
#47 := (ite #42 #43 #46)
#48 := (ite #36 0::Int #47)
#49 := (= #33 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#242 := (iff #50 #239)
#175 := (and #38 #40)
#178 := (or #39 #175)
#191 := (ite #178 #43 #188)
#169 := (= 0::Int #21)
#166 := (= 0::Int #32)
#172 := (or #166 #169)
#194 := (ite #172 0::Int #191)
#197 := (= #33 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#240 := (iff #200 #239)
#237 := (iff #197 #236)
#234 := (= #194 #233)
#231 := (= #191 #230)
#228 := (iff #178 #227)
#225 := (iff #175 #224)
#222 := (iff #40 #221)
#223 := [rewrite]: #222
#215 := (iff #38 #214)
#216 := [rewrite]: #215
#226 := [monotonicity #216 #223]: #225
#218 := (iff #39 #217)
#211 := (iff #37 #210)
#212 := [rewrite]: #211
#219 := [monotonicity #212 #216]: #218
#229 := [monotonicity #219 #226]: #228
#232 := [monotonicity #229]: #231
#207 := (iff #172 #36)
#205 := (iff #169 #35)
#206 := [rewrite]: #205
#203 := (iff #166 #34)
#204 := [rewrite]: #203
#208 := [monotonicity #204 #206]: #207
#235 := [monotonicity #208 #232]: #234
#238 := [monotonicity #235]: #237
#241 := [quant-intro #238]: #240
#201 := (iff #50 #200)
#198 := (iff #49 #197)
#195 := (= #48 #194)
#192 := (= #47 #191)
#189 := (= #46 #188)
#186 := (= #45 #185)
#187 := [rewrite]: #186
#183 := (= #44 #182)
#184 := [rewrite]: #183
#190 := [monotonicity #184 #187]: #189
#179 := (iff #42 #178)
#176 := (iff #41 #175)
#177 := [rewrite]: #176
#180 := [monotonicity #177]: #179
#193 := [monotonicity #180 #190]: #192
#173 := (iff #36 #172)
#170 := (iff #35 #169)
#171 := [rewrite]: #170
#167 := (iff #34 #166)
#168 := [rewrite]: #167
#174 := [monotonicity #168 #171]: #173
#196 := [monotonicity #174 #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#243 := [trans #202 #241]: #242
#165 := [asserted]: #50
#244 := [mp #165 #243]: #239
#314 := [mp~ #244 #300]: #239
#339 := [mp #314 #338]: #336
#370 := [mp #339 #369]: #367
#885 := [mp #370 #884]: #880
#755 := (not #880)
#733 := (or #755 #641)
#816 := (* -1::Int 0::Int)
#817 := (* -1::Int #9)
#812 := (div #817 #816)
#818 := (* -1::Int #812)
#659 := (+ #11 #818)
#660 := (= #659 0::Int)
#661 := (div #9 0::Int)
#803 := (* -1::Int #661)
#804 := (+ #11 #803)
#805 := (= #804 0::Int)
#806 := (>= #9 0::Int)
#800 := (<= 0::Int 0::Int)
#801 := (or #800 #806)
#807 := (not #801)
#808 := (<= #9 0::Int)
#802 := (or #808 #800)
#809 := (not #802)
#638 := (or #809 #807)
#640 := (ite #638 #805 #660)
#794 := (= 0::Int 0::Int)
#795 := (= #9 0::Int)
#797 := (or #795 #794)
#798 := (ite #797 #641 #640)
#734 := (or #755 #798)
#737 := (iff #734 #733)
#739 := (iff #733 #733)
#740 := [rewrite]: #739
#754 := (iff #798 #641)
#766 := (div #817 0::Int)
#769 := (* -1::Int #766)
#756 := (+ #11 #769)
#760 := (= #756 0::Int)
#1 := true
#749 := (ite true #641 #760)
#752 := (iff #749 #641)
#753 := [rewrite]: #752
#750 := (iff #798 #749)
#747 := (iff #640 #760)
#762 := (ite false #805 #760)
#745 := (iff #762 #760)
#746 := [rewrite]: #745
#742 := (iff #640 #762)
#761 := (iff #660 #760)
#757 := (= #659 #756)
#765 := (= #818 #769)
#767 := (= #812 #766)
#763 := (= #816 0::Int)
#764 := [rewrite]: #763
#768 := [monotonicity #764]: #767
#770 := [monotonicity #768]: #765
#759 := [monotonicity #770]: #757
#758 := [monotonicity #759]: #761
#772 := (iff #638 false)
#786 := (or false false)
#777 := (iff #786 false)
#778 := [rewrite]: #777
#775 := (iff #638 #786)
#785 := (iff #807 false)
#831 := (not true)
#555 := (iff #831 false)
#556 := [rewrite]: #555
#783 := (iff #807 #831)
#771 := (iff #801 true)
#789 := (or true #806)
#782 := (iff #789 true)
#774 := [rewrite]: #782
#793 := (iff #801 #789)
#788 := (iff #800 true)
#791 := [rewrite]: #788
#780 := [monotonicity #791]: #793
#773 := [trans #780 #774]: #771
#784 := [monotonicity #773]: #783
#781 := [trans #784 #556]: #785
#699 := (iff #809 false)
#697 := (iff #809 #831)
#695 := (iff #802 true)
#676 := (or #808 true)
#694 := (iff #676 true)
#687 := [rewrite]: #694
#691 := (iff #802 #676)
#693 := [monotonicity #791]: #691
#696 := [trans #693 #687]: #695
#698 := [monotonicity #696]: #697
#792 := [trans #698 #556]: #699
#776 := [monotonicity #792 #781]: #775
#779 := [trans #776 #778]: #772
#743 := [monotonicity #779 #758]: #742
#748 := [trans #743 #746]: #747
#692 := (iff #797 true)
#681 := (or #795 true)
#642 := (iff #681 true)
#790 := [rewrite]: #642
#682 := (iff #797 #681)
#796 := (iff #794 true)
#799 := [rewrite]: #796
#683 := [monotonicity #799]: #682
#787 := [trans #683 #790]: #692
#751 := [monotonicity #787 #748]: #750
#744 := [trans #751 #753]: #754
#738 := [monotonicity #744]: #737
#735 := [trans #738 #740]: #737
#736 := [quant-inst #9 #10]: #734
#741 := [mp #736 #735]: #733
#723 := [unit-resolution #741 #885]: #641
#724 := [monotonicity #723]: #14
#15 := (not #14)
#79 := [asserted]: #15
[unit-resolution #79 #724]: false
unsat
589d59789d263d5382384d3b16ffc9ff725b6206 297 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#12 := (f3 0::Int)
decl f4 :: (-> Int Int Int)
#9 := 1::Int
#10 := (f4 0::Int 1::Int)
#11 := (f3 #10)
#13 := (= #11 #12)
#806 := (= #10 0::Int)
#20 := (:var 0 Int)
#31 := (:var 1 Int)
#32 := (f4 #31 #20)
#877 := (pattern #32)
#180 := -1::Int
#184 := (* -1::Int #20)
#181 := (* -1::Int #31)
#187 := (div #181 #184)
#359 := (* -1::Int #187)
#360 := (+ #32 #359)
#361 := (= #360 0::Int)
#42 := (div #31 #20)
#356 := (* -1::Int #42)
#357 := (+ #32 #356)
#358 := (= #357 0::Int)
#219 := (>= #31 0::Int)
#212 := (<= #20 0::Int)
#319 := (or #212 #219)
#320 := (not #319)
#208 := (<= #31 0::Int)
#317 := (or #208 #212)
#318 := (not #317)
#323 := (or #318 #320)
#362 := (ite #323 #358 #361)
#355 := (= #32 0::Int)
#34 := (= #20 0::Int)
#33 := (= #31 0::Int)
#35 := (or #33 #34)
#363 := (ite #35 #355 #362)
#878 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #877) #363)
#366 := (forall (vars (?v0 Int) (?v1 Int)) #363)
#881 := (iff #366 #878)
#879 := (iff #363 #363)
#880 := [refl]: #879
#882 := [quant-intro #880]: #881
#326 := (ite #323 #42 #187)
#329 := (ite #35 0::Int #326)
#332 := (= #32 #329)
#335 := (forall (vars (?v0 Int) (?v1 Int)) #332)
#367 := (iff #335 #366)
#364 := (iff #332 #363)
#365 := [rewrite]: #364
#368 := [quant-intro #365]: #367
#220 := (not #219)
#213 := (not #212)
#223 := (and #213 #220)
#209 := (not #208)
#216 := (and #209 #213)
#226 := (or #216 #223)
#229 := (ite #226 #42 #187)
#232 := (ite #35 0::Int #229)
#235 := (= #32 #232)
#238 := (forall (vars (?v0 Int) (?v1 Int)) #235)
#336 := (iff #238 #335)
#333 := (iff #235 #332)
#330 := (= #232 #329)
#327 := (= #229 #326)
#324 := (iff #226 #323)
#321 := (iff #223 #320)
#322 := [rewrite]: #321
#302 := (iff #216 #318)
#303 := [rewrite]: #302
#325 := [monotonicity #303 #322]: #324
#328 := [monotonicity #325]: #327
#331 := [monotonicity #328]: #330
#334 := [monotonicity #331]: #333
#337 := [quant-intro #334]: #336
#298 := (~ #238 #238)
#311 := (~ #235 #235)
#312 := [refl]: #311
#299 := [nnf-pos #312]: #298
#44 := (- #20)
#43 := (- #31)
#45 := (div #43 #44)
#37 := (< 0::Int #20)
#39 := (< #31 0::Int)
#40 := (and #39 #37)
#36 := (< 0::Int #31)
#38 := (and #36 #37)
#41 := (or #38 #40)
#46 := (ite #41 #42 #45)
#47 := (ite #35 0::Int #46)
#48 := (= #32 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#241 := (iff #49 #238)
#174 := (and #37 #39)
#177 := (or #38 #174)
#190 := (ite #177 #42 #187)
#168 := (= 0::Int #20)
#165 := (= 0::Int #31)
#171 := (or #165 #168)
#193 := (ite #171 0::Int #190)
#196 := (= #32 #193)
#199 := (forall (vars (?v0 Int) (?v1 Int)) #196)
#239 := (iff #199 #238)
#236 := (iff #196 #235)
#233 := (= #193 #232)
#230 := (= #190 #229)
#227 := (iff #177 #226)
#224 := (iff #174 #223)
#221 := (iff #39 #220)
#222 := [rewrite]: #221
#214 := (iff #37 #213)
#215 := [rewrite]: #214
#225 := [monotonicity #215 #222]: #224
#217 := (iff #38 #216)
#210 := (iff #36 #209)
#211 := [rewrite]: #210
#218 := [monotonicity #211 #215]: #217
#228 := [monotonicity #218 #225]: #227
#231 := [monotonicity #228]: #230
#206 := (iff #171 #35)
#204 := (iff #168 #34)
#205 := [rewrite]: #204
#202 := (iff #165 #33)
#203 := [rewrite]: #202
#207 := [monotonicity #203 #205]: #206
#234 := [monotonicity #207 #231]: #233
#237 := [monotonicity #234]: #236
#240 := [quant-intro #237]: #239
#200 := (iff #49 #199)
#197 := (iff #48 #196)
#194 := (= #47 #193)
#191 := (= #46 #190)
#188 := (= #45 #187)
#185 := (= #44 #184)
#186 := [rewrite]: #185
#182 := (= #43 #181)
#183 := [rewrite]: #182
#189 := [monotonicity #183 #186]: #188
#178 := (iff #41 #177)
#175 := (iff #40 #174)
#176 := [rewrite]: #175
#179 := [monotonicity #176]: #178
#192 := [monotonicity #179 #189]: #191
#172 := (iff #35 #171)
#169 := (iff #34 #168)
#170 := [rewrite]: #169
#166 := (iff #33 #165)
#167 := [rewrite]: #166
#173 := [monotonicity #167 #170]: #172
#195 := [monotonicity #173 #192]: #194
#198 := [monotonicity #195]: #197
#201 := [quant-intro #198]: #200
#242 := [trans #201 #240]: #241
#164 := [asserted]: #49
#243 := [mp #164 #242]: #238
#313 := [mp~ #243 #299]: #238
#338 := [mp #313 #337]: #335
#369 := [mp #338 #368]: #366
#883 := [mp #369 #882]: #878
#724 := (not #878)
#730 := (or #724 #806)
#812 := (* -1::Int 1::Int)
#813 := (* -1::Int 0::Int)
#808 := (div #813 #812)
#809 := (* -1::Int #808)
#814 := (+ #10 #809)
#815 := (= #814 0::Int)
#810 := (div 0::Int 1::Int)
#816 := (* -1::Int #810)
#657 := (+ #10 #816)
#658 := (= #657 0::Int)
#834 := (>= 0::Int 0::Int)
#659 := (<= 1::Int 0::Int)
#801 := (or #659 #834)
#802 := (not #801)
#803 := (<= 0::Int 0::Int)
#804 := (or #803 #659)
#798 := (not #804)
#799 := (or #798 #802)
#805 := (ite #799 #658 #815)
#800 := (= 1::Int 0::Int)
#807 := (= 0::Int 0::Int)
#636 := (or #807 #800)
#638 := (ite #636 #806 #805)
#703 := (or #724 #638)
#705 := (iff #703 #730)
#709 := (iff #730 #730)
#710 := [rewrite]: #709
#728 := (iff #638 #806)
#1 := true
#721 := (ite true #806 #806)
#726 := (iff #721 #806)
#727 := [rewrite]: #726
#722 := (iff #638 #721)
#739 := (iff #805 #806)
#735 := (ite false #806 #806)
#738 := (iff #735 #806)
#733 := [rewrite]: #738
#736 := (iff #805 #735)
#732 := (iff #815 #806)
#753 := (= #814 #10)
#766 := (+ #10 0::Int)
#768 := (= #766 #10)
#754 := [rewrite]: #768
#752 := (= #814 #766)
#750 := (= #809 0::Int)
#761 := (= #813 0::Int)
#762 := [rewrite]: #761
#748 := (= #809 #813)
#746 := (= #808 0::Int)
#740 := (div 0::Int -1::Int)
#744 := (= #740 0::Int)
#745 := [rewrite]: #744
#741 := (= #808 #740)
#756 := (= #812 -1::Int)
#760 := [rewrite]: #756
#743 := [monotonicity #762 #760]: #741
#747 := [trans #743 #745]: #746
#749 := [monotonicity #747]: #748
#751 := [trans #749 #762]: #750
#742 := [monotonicity #751]: #752
#731 := [trans #742 #754]: #753
#734 := [monotonicity #731]: #732
#758 := (iff #658 #806)
#755 := (= #657 #10)
#767 := (= #657 #766)
#764 := (= #816 0::Int)
#770 := (= #816 #813)
#775 := (= #810 0::Int)
#776 := [rewrite]: #775
#777 := [monotonicity #776]: #770
#765 := [trans #777 #762]: #764
#763 := [monotonicity #765]: #767
#757 := [trans #763 #754]: #755
#759 := [monotonicity #757]: #758
#773 := (iff #799 false)
#781 := (or false false)
#779 := (iff #781 false)
#784 := [rewrite]: #779
#782 := (iff #799 #781)
#769 := (iff #802 false)
#482 := (not true)
#843 := (iff #482 false)
#829 := [rewrite]: #843
#780 := (iff #802 #482)
#791 := (iff #801 true)
#695 := (or false true)
#790 := (iff #695 true)
#787 := [rewrite]: #790
#696 := (iff #801 #695)
#841 := (iff #834 true)
#481 := [rewrite]: #841
#785 := (iff #659 false)
#786 := [rewrite]: #785
#697 := [monotonicity #786 #481]: #696
#778 := [trans #697 #787]: #791
#772 := [monotonicity #778]: #780
#771 := [trans #772 #829]: #769
#693 := (iff #798 false)
#692 := (iff #798 #482)
#689 := (iff #804 true)
#796 := (or true false)
#679 := (iff #796 true)
#680 := [rewrite]: #679
#789 := (iff #804 #796)
#788 := (iff #803 true)
#690 := [rewrite]: #788
#674 := [monotonicity #690 #786]: #789
#691 := [trans #674 #680]: #689
#685 := [monotonicity #691]: #692
#694 := [trans #685 #829]: #693
#783 := [monotonicity #694 #771]: #782
#774 := [trans #783 #784]: #773
#737 := [monotonicity #774 #759 #734]: #736
#725 := [trans #737 #733]: #739
#681 := (iff #636 true)
#794 := (iff #636 #796)
#793 := (iff #800 false)
#795 := [rewrite]: #793
#639 := (iff #807 true)
#792 := [rewrite]: #639
#797 := [monotonicity #792 #795]: #794
#640 := [trans #797 #680]: #681
#723 := [monotonicity #640 #725]: #722
#729 := [trans #723 #727]: #728
#598 := [monotonicity #729]: #705
#711 := [trans #598 #710]: #705
#704 := [quant-inst #8 #9]: #703
#716 := [mp #704 #711]: #730
#713 := [unit-resolution #716 #883]: #806
#714 := [monotonicity #713]: #13
#14 := (not #13)
#78 := [asserted]: #14
[unit-resolution #78 #714]: false
unsat
009cf27bd16a3881b93b6b7959195f72499a5829 300 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 1::Int
#11 := (f3 1::Int)
decl f4 :: (-> Int Int Int)
#9 := (f4 1::Int 1::Int)
#10 := (f3 #9)
#12 := (= #10 #11)
#759 := (= #9 1::Int)
#20 := (:var 0 Int)
#31 := (:var 1 Int)
#32 := (f4 #31 #20)
#877 := (pattern #32)
#19 := 0::Int
#180 := -1::Int
#184 := (* -1::Int #20)
#181 := (* -1::Int #31)
#187 := (div #181 #184)
#359 := (* -1::Int #187)
#360 := (+ #32 #359)
#361 := (= #360 0::Int)
#42 := (div #31 #20)
#356 := (* -1::Int #42)
#357 := (+ #32 #356)
#358 := (= #357 0::Int)
#219 := (>= #31 0::Int)
#212 := (<= #20 0::Int)
#319 := (or #212 #219)
#320 := (not #319)
#208 := (<= #31 0::Int)
#317 := (or #208 #212)
#318 := (not #317)
#323 := (or #318 #320)
#362 := (ite #323 #358 #361)
#355 := (= #32 0::Int)
#34 := (= #20 0::Int)
#33 := (= #31 0::Int)
#35 := (or #33 #34)
#363 := (ite #35 #355 #362)
#878 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #877) #363)
#366 := (forall (vars (?v0 Int) (?v1 Int)) #363)
#881 := (iff #366 #878)
#879 := (iff #363 #363)
#880 := [refl]: #879
#882 := [quant-intro #880]: #881
#326 := (ite #323 #42 #187)
#329 := (ite #35 0::Int #326)
#332 := (= #32 #329)
#335 := (forall (vars (?v0 Int) (?v1 Int)) #332)
#367 := (iff #335 #366)
#364 := (iff #332 #363)
#365 := [rewrite]: #364
#368 := [quant-intro #365]: #367
#220 := (not #219)
#213 := (not #212)
#223 := (and #213 #220)
#209 := (not #208)
#216 := (and #209 #213)
#226 := (or #216 #223)
#229 := (ite #226 #42 #187)
#232 := (ite #35 0::Int #229)
#235 := (= #32 #232)
#238 := (forall (vars (?v0 Int) (?v1 Int)) #235)
#336 := (iff #238 #335)
#333 := (iff #235 #332)
#330 := (= #232 #329)
#327 := (= #229 #326)
#324 := (iff #226 #323)
#321 := (iff #223 #320)
#322 := [rewrite]: #321
#302 := (iff #216 #318)
#303 := [rewrite]: #302
#325 := [monotonicity #303 #322]: #324
#328 := [monotonicity #325]: #327
#331 := [monotonicity #328]: #330
#334 := [monotonicity #331]: #333
#337 := [quant-intro #334]: #336
#298 := (~ #238 #238)
#311 := (~ #235 #235)
#312 := [refl]: #311
#299 := [nnf-pos #312]: #298
#44 := (- #20)
#43 := (- #31)
#45 := (div #43 #44)
#37 := (< 0::Int #20)
#39 := (< #31 0::Int)
#40 := (and #39 #37)
#36 := (< 0::Int #31)
#38 := (and #36 #37)
#41 := (or #38 #40)
#46 := (ite #41 #42 #45)
#47 := (ite #35 0::Int #46)
#48 := (= #32 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#241 := (iff #49 #238)
#174 := (and #37 #39)
#177 := (or #38 #174)
#190 := (ite #177 #42 #187)
#168 := (= 0::Int #20)
#165 := (= 0::Int #31)
#171 := (or #165 #168)
#193 := (ite #171 0::Int #190)
#196 := (= #32 #193)
#199 := (forall (vars (?v0 Int) (?v1 Int)) #196)
#239 := (iff #199 #238)
#236 := (iff #196 #235)
#233 := (= #193 #232)
#230 := (= #190 #229)
#227 := (iff #177 #226)
#224 := (iff #174 #223)
#221 := (iff #39 #220)
#222 := [rewrite]: #221
#214 := (iff #37 #213)
#215 := [rewrite]: #214
#225 := [monotonicity #215 #222]: #224
#217 := (iff #38 #216)
#210 := (iff #36 #209)
#211 := [rewrite]: #210
#218 := [monotonicity #211 #215]: #217
#228 := [monotonicity #218 #225]: #227
#231 := [monotonicity #228]: #230
#206 := (iff #171 #35)
#204 := (iff #168 #34)
#205 := [rewrite]: #204
#202 := (iff #165 #33)
#203 := [rewrite]: #202
#207 := [monotonicity #203 #205]: #206
#234 := [monotonicity #207 #231]: #233
#237 := [monotonicity #234]: #236
#240 := [quant-intro #237]: #239
#200 := (iff #49 #199)
#197 := (iff #48 #196)
#194 := (= #47 #193)
#191 := (= #46 #190)
#188 := (= #45 #187)
#185 := (= #44 #184)
#186 := [rewrite]: #185
#182 := (= #43 #181)
#183 := [rewrite]: #182
#189 := [monotonicity #183 #186]: #188
#178 := (iff #41 #177)
#175 := (iff #40 #174)
#176 := [rewrite]: #175
#179 := [monotonicity #176]: #178
#192 := [monotonicity #179 #189]: #191
#172 := (iff #35 #171)
#169 := (iff #34 #168)
#170 := [rewrite]: #169
#166 := (iff #33 #165)
#167 := [rewrite]: #166
#173 := [monotonicity #167 #170]: #172
#195 := [monotonicity #173 #192]: #194
#198 := [monotonicity #195]: #197
#201 := [quant-intro #198]: #200
#242 := [trans #201 #240]: #241
#164 := [asserted]: #49
#243 := [mp #164 #242]: #238
#313 := [mp~ #243 #299]: #238
#338 := [mp #313 #337]: #335
#369 := [mp #338 #368]: #366
#883 := [mp #369 #882]: #878
#705 := (not #878)
#598 := (or #705 #759)
#813 := (* -1::Int 1::Int)
#808 := (div #813 #813)
#809 := (* -1::Int #808)
#814 := (+ #9 #809)
#815 := (= #814 0::Int)
#810 := (div 1::Int 1::Int)
#816 := (* -1::Int #810)
#657 := (+ #9 #816)
#658 := (= #657 0::Int)
#834 := (>= 1::Int 0::Int)
#659 := (<= 1::Int 0::Int)
#801 := (or #659 #834)
#802 := (not #801)
#803 := (or #659 #659)
#804 := (not #803)
#798 := (or #804 #802)
#799 := (ite #798 #658 #815)
#805 := (= #9 0::Int)
#806 := (= 1::Int 0::Int)
#800 := (or #806 #806)
#807 := (ite #800 #805 #799)
#709 := (or #705 #807)
#711 := (iff #709 #598)
#712 := (iff #598 #598)
#713 := [rewrite]: #712
#703 := (iff #807 #759)
#727 := (ite false #805 #759)
#724 := (iff #727 #759)
#730 := [rewrite]: #724
#728 := (iff #807 #727)
#723 := (iff #799 #759)
#1 := true
#733 := (ite true #759 #759)
#721 := (iff #733 #759)
#722 := [rewrite]: #721
#739 := (iff #799 #733)
#737 := (iff #815 #759)
#766 := (+ -1::Int #9)
#755 := (= #766 0::Int)
#756 := (iff #755 #759)
#760 := [rewrite]: #756
#735 := (iff #815 #755)
#732 := (= #814 #766)
#762 := (+ #9 -1::Int)
#767 := (= #762 #766)
#763 := [rewrite]: #767
#753 := (= #814 #762)
#752 := (= #809 -1::Int)
#776 := (= #813 -1::Int)
#770 := [rewrite]: #776
#750 := (= #809 #813)
#748 := (= #808 1::Int)
#743 := (div -1::Int -1::Int)
#746 := (= #743 1::Int)
#747 := [rewrite]: #746
#744 := (= #808 #743)
#745 := [monotonicity #770 #770]: #744
#749 := [trans #745 #747]: #748
#751 := [monotonicity #749]: #750
#742 := [trans #751 #770]: #752
#731 := [monotonicity #742]: #753
#734 := [trans #731 #763]: #732
#736 := [monotonicity #734]: #735
#738 := [trans #736 #760]: #737
#740 := (iff #658 #759)
#757 := (iff #658 #755)
#768 := (= #657 #766)
#764 := (= #657 #762)
#777 := (= #816 -1::Int)
#774 := (= #816 #813)
#784 := (= #810 1::Int)
#773 := [rewrite]: #784
#775 := [monotonicity #773]: #774
#761 := [trans #775 #770]: #777
#765 := [monotonicity #761]: #764
#754 := [trans #765 #763]: #768
#758 := [monotonicity #754]: #757
#741 := [trans #758 #760]: #740
#783 := (iff #798 true)
#772 := (or true false)
#781 := (iff #772 true)
#782 := [rewrite]: #781
#769 := (iff #798 #772)
#778 := (iff #802 false)
#482 := (not true)
#843 := (iff #482 false)
#829 := [rewrite]: #843
#787 := (iff #802 #482)
#697 := (iff #801 true)
#685 := (or false true)
#695 := (iff #685 true)
#696 := [rewrite]: #695
#693 := (iff #801 #685)
#841 := (iff #834 true)
#481 := [rewrite]: #841
#679 := (iff #659 false)
#680 := [rewrite]: #679
#694 := [monotonicity #680 #481]: #693
#790 := [trans #694 #696]: #697
#791 := [monotonicity #790]: #787
#780 := [trans #791 #829]: #778
#691 := (iff #804 true)
#785 := (not false)
#674 := (iff #785 true)
#689 := [rewrite]: #674
#786 := (iff #804 #785)
#788 := (iff #803 false)
#639 := (or false false)
#795 := (iff #639 false)
#796 := [rewrite]: #795
#681 := (iff #803 #639)
#640 := [monotonicity #680 #680]: #681
#690 := [trans #640 #796]: #788
#789 := [monotonicity #690]: #786
#692 := [trans #789 #689]: #691
#771 := [monotonicity #692 #780]: #769
#779 := [trans #771 #782]: #783
#725 := [monotonicity #779 #741 #738]: #739
#726 := [trans #725 #722]: #723
#794 := (iff #800 false)
#792 := (iff #800 #639)
#636 := (iff #806 false)
#638 := [rewrite]: #636
#793 := [monotonicity #638 #638]: #792
#797 := [trans #793 #796]: #794
#729 := [monotonicity #797 #726]: #728
#704 := [trans #729 #730]: #703
#716 := [monotonicity #704]: #711
#714 := [trans #716 #713]: #711
#710 := [quant-inst #8 #8]: #709
#717 := [mp #710 #714]: #598
#715 := [unit-resolution #717 #883]: #759
#720 := [monotonicity #715]: #12
#13 := (not #12)
#78 := [asserted]: #13
[unit-resolution #78 #720]: false
unsat
ec9d2fe48d42e5d40fd0739c3491a43f0bf8c69d 311 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 3::Int
#12 := (f3 3::Int)
decl f4 :: (-> Int Int Int)
#9 := 1::Int
#10 := (f4 3::Int 1::Int)
#11 := (f3 #10)
#13 := (= #11 #12)
#747 := (= #10 3::Int)
#21 := (:var 0 Int)
#32 := (:var 1 Int)
#33 := (f4 #32 #21)
#878 := (pattern #33)
#20 := 0::Int
#181 := -1::Int
#185 := (* -1::Int #21)
#182 := (* -1::Int #32)
#188 := (div #182 #185)
#360 := (* -1::Int #188)
#361 := (+ #33 #360)
#362 := (= #361 0::Int)
#43 := (div #32 #21)
#357 := (* -1::Int #43)
#358 := (+ #33 #357)
#359 := (= #358 0::Int)
#220 := (>= #32 0::Int)
#213 := (<= #21 0::Int)
#320 := (or #213 #220)
#321 := (not #320)
#209 := (<= #32 0::Int)
#318 := (or #209 #213)
#319 := (not #318)
#324 := (or #319 #321)
#363 := (ite #324 #359 #362)
#356 := (= #33 0::Int)
#35 := (= #21 0::Int)
#34 := (= #32 0::Int)
#36 := (or #34 #35)
#364 := (ite #36 #356 #363)
#879 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #878) #364)
#367 := (forall (vars (?v0 Int) (?v1 Int)) #364)
#882 := (iff #367 #879)
#880 := (iff #364 #364)
#881 := [refl]: #880
#883 := [quant-intro #881]: #882
#327 := (ite #324 #43 #188)
#330 := (ite #36 0::Int #327)
#333 := (= #33 #330)
#336 := (forall (vars (?v0 Int) (?v1 Int)) #333)
#368 := (iff #336 #367)
#365 := (iff #333 #364)
#366 := [rewrite]: #365
#369 := [quant-intro #366]: #368
#221 := (not #220)
#214 := (not #213)
#224 := (and #214 #221)
#210 := (not #209)
#217 := (and #210 #214)
#227 := (or #217 #224)
#230 := (ite #227 #43 #188)
#233 := (ite #36 0::Int #230)
#236 := (= #33 #233)
#239 := (forall (vars (?v0 Int) (?v1 Int)) #236)
#337 := (iff #239 #336)
#334 := (iff #236 #333)
#331 := (= #233 #330)
#328 := (= #230 #327)
#325 := (iff #227 #324)
#322 := (iff #224 #321)
#323 := [rewrite]: #322
#303 := (iff #217 #319)
#304 := [rewrite]: #303
#326 := [monotonicity #304 #323]: #325
#329 := [monotonicity #326]: #328
#332 := [monotonicity #329]: #331
#335 := [monotonicity #332]: #334
#338 := [quant-intro #335]: #337
#299 := (~ #239 #239)
#312 := (~ #236 #236)
#313 := [refl]: #312
#300 := [nnf-pos #313]: #299
#45 := (- #21)
#44 := (- #32)
#46 := (div #44 #45)
#38 := (< 0::Int #21)
#40 := (< #32 0::Int)
#41 := (and #40 #38)
#37 := (< 0::Int #32)
#39 := (and #37 #38)
#42 := (or #39 #41)
#47 := (ite #42 #43 #46)
#48 := (ite #36 0::Int #47)
#49 := (= #33 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#242 := (iff #50 #239)
#175 := (and #38 #40)
#178 := (or #39 #175)
#191 := (ite #178 #43 #188)
#169 := (= 0::Int #21)
#166 := (= 0::Int #32)
#172 := (or #166 #169)
#194 := (ite #172 0::Int #191)
#197 := (= #33 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#240 := (iff #200 #239)
#237 := (iff #197 #236)
#234 := (= #194 #233)
#231 := (= #191 #230)
#228 := (iff #178 #227)
#225 := (iff #175 #224)
#222 := (iff #40 #221)
#223 := [rewrite]: #222
#215 := (iff #38 #214)
#216 := [rewrite]: #215
#226 := [monotonicity #216 #223]: #225
#218 := (iff #39 #217)
#211 := (iff #37 #210)
#212 := [rewrite]: #211
#219 := [monotonicity #212 #216]: #218
#229 := [monotonicity #219 #226]: #228
#232 := [monotonicity #229]: #231
#207 := (iff #172 #36)
#205 := (iff #169 #35)
#206 := [rewrite]: #205
#203 := (iff #166 #34)
#204 := [rewrite]: #203
#208 := [monotonicity #204 #206]: #207
#235 := [monotonicity #208 #232]: #234
#238 := [monotonicity #235]: #237
#241 := [quant-intro #238]: #240
#201 := (iff #50 #200)
#198 := (iff #49 #197)
#195 := (= #48 #194)
#192 := (= #47 #191)
#189 := (= #46 #188)
#186 := (= #45 #185)
#187 := [rewrite]: #186
#183 := (= #44 #182)
#184 := [rewrite]: #183
#190 := [monotonicity #184 #187]: #189
#179 := (iff #42 #178)
#176 := (iff #41 #175)
#177 := [rewrite]: #176
#180 := [monotonicity #177]: #179
#193 := [monotonicity #180 #190]: #192
#173 := (iff #36 #172)
#170 := (iff #35 #169)
#171 := [rewrite]: #170
#167 := (iff #34 #166)
#168 := [rewrite]: #167
#174 := [monotonicity #168 #171]: #173
#196 := [monotonicity #174 #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#243 := [trans #202 #241]: #242
#165 := [asserted]: #50
#244 := [mp #165 #243]: #239
#314 := [mp~ #244 #300]: #239
#339 := [mp #314 #338]: #336
#370 := [mp #339 #369]: #367
#884 := [mp #370 #883]: #879
#719 := (not #879)
#720 := (or #719 #747)
#814 := (* -1::Int 1::Int)
#809 := (* -1::Int 3::Int)
#810 := (div #809 #814)
#815 := (* -1::Int #810)
#816 := (+ #10 #815)
#811 := (= #816 0::Int)
#817 := (div 3::Int 1::Int)
#658 := (* -1::Int #817)
#659 := (+ #10 #658)
#660 := (= #659 0::Int)
#835 := (>= 3::Int 0::Int)
#802 := (<= 1::Int 0::Int)
#803 := (or #802 #835)
#804 := (not #803)
#805 := (<= 3::Int 0::Int)
#799 := (or #805 #802)
#800 := (not #799)
#806 := (or #800 #804)
#807 := (ite #806 #660 #811)
#801 := (= #10 0::Int)
#808 := (= 1::Int 0::Int)
#637 := (= 3::Int 0::Int)
#639 := (or #637 #808)
#640 := (ite #639 #801 #807)
#716 := (or #719 #640)
#701 := (iff #716 #720)
#702 := (iff #720 #720)
#683 := [rewrite]: #702
#715 := (iff #640 #747)
#711 := (ite false #801 #747)
#713 := (iff #711 #747)
#714 := [rewrite]: #713
#712 := (iff #640 #711)
#599 := (iff #807 #747)
#1 := true
#725 := (ite true #747 #747)
#705 := (iff #725 #747)
#706 := [rewrite]: #705
#731 := (iff #807 #725)
#729 := (iff #811 #747)
#767 := -3::Int
#760 := (+ -3::Int #10)
#744 := (= #760 0::Int)
#748 := (iff #744 #747)
#749 := [rewrite]: #748
#727 := (iff #811 #744)
#723 := (= #816 #760)
#756 := (+ #10 -3::Int)
#757 := (= #756 #760)
#761 := [rewrite]: #757
#726 := (= #816 #756)
#734 := (= #815 -3::Int)
#768 := (= #809 -3::Int)
#764 := [rewrite]: #768
#738 := (= #815 #809)
#736 := (= #810 3::Int)
#743 := (div -3::Int -1::Int)
#733 := (= #743 3::Int)
#735 := [rewrite]: #733
#754 := (= #810 #743)
#752 := (= #814 -1::Int)
#753 := [rewrite]: #752
#732 := [monotonicity #764 #753]: #754
#737 := [trans #732 #735]: #736
#739 := [monotonicity #737]: #738
#740 := [trans #739 #764]: #734
#722 := [monotonicity #740]: #726
#724 := [trans #722 #761]: #723
#728 := [monotonicity #724]: #727
#730 := [trans #728 #749]: #729
#750 := (iff #660 #747)
#745 := (iff #660 #744)
#741 := (= #659 #760)
#758 := (= #659 #756)
#769 := (= #658 -3::Int)
#765 := (= #658 #809)
#762 := (= #817 3::Int)
#763 := [rewrite]: #762
#766 := [monotonicity #763]: #765
#755 := [trans #766 #764]: #769
#759 := [monotonicity #755]: #758
#742 := [trans #759 #761]: #741
#746 := [monotonicity #742]: #745
#751 := [trans #746 #749]: #750
#771 := (iff #806 true)
#785 := (or true false)
#776 := (iff #785 true)
#777 := [rewrite]: #776
#774 := (iff #806 #785)
#784 := (iff #804 false)
#483 := (not true)
#844 := (iff #483 false)
#830 := [rewrite]: #844
#782 := (iff #804 #483)
#770 := (iff #803 true)
#788 := (or false true)
#781 := (iff #788 true)
#773 := [rewrite]: #781
#792 := (iff #803 #788)
#842 := (iff #835 true)
#482 := [rewrite]: #842
#787 := (iff #802 false)
#790 := [rewrite]: #787
#779 := [monotonicity #790 #482]: #792
#772 := [trans #779 #773]: #770
#783 := [monotonicity #772]: #782
#780 := [trans #783 #830]: #784
#698 := (iff #800 true)
#686 := (not false)
#696 := (iff #686 true)
#697 := [rewrite]: #696
#694 := (iff #800 #686)
#692 := (iff #799 false)
#795 := (or false false)
#681 := (iff #795 false)
#682 := [rewrite]: #681
#675 := (iff #799 #795)
#691 := (iff #805 false)
#786 := [rewrite]: #691
#690 := [monotonicity #786 #790]: #675
#693 := [trans #690 #682]: #692
#695 := [monotonicity #693]: #694
#791 := [trans #695 #697]: #698
#775 := [monotonicity #791 #780]: #774
#778 := [trans #775 #777]: #771
#704 := [monotonicity #778 #751 #730]: #731
#710 := [trans #704 #706]: #599
#641 := (iff #639 false)
#798 := (iff #639 #795)
#796 := (iff #808 false)
#797 := [rewrite]: #796
#793 := (iff #637 false)
#794 := [rewrite]: #793
#680 := [monotonicity #794 #797]: #798
#789 := [trans #680 #682]: #641
#717 := [monotonicity #789 #710]: #712
#718 := [trans #717 #714]: #715
#647 := [monotonicity #718]: #701
#707 := [trans #647 #683]: #701
#721 := [quant-inst #8 #9]: #716
#708 := [mp #721 #707]: #720
#677 := [unit-resolution #708 #884]: #747
#684 := [monotonicity #677]: #13
#14 := (not #13)
#79 := [asserted]: #14
[unit-resolution #79 #684]: false
unsat
3563b0bf363f404d85eb515efc0ea6c63953194a 378 0
#2 := false
decl f3 :: (-> Int S2)
decl f4 :: (-> Int Int Int)
#10 := 1::Int
decl f5 :: (-> S2 Int)
decl f6 :: S2
#8 := f6
#9 := (f5 f6)
#11 := (f4 #9 1::Int)
#12 := (f3 #11)
#80 := (= f6 #12)
#451 := (f3 #9)
#669 := (= #451 #12)
#663 := (= #12 #451)
#731 := (= #11 #9)
#845 := (div #9 1::Int)
#660 := (= #845 #9)
#598 := (= #9 #845)
#20 := 0::Int
#188 := -1::Int
#840 := (* -1::Int #845)
#632 := (+ #9 #840)
#638 := (<= #632 0::Int)
#631 := (= #632 0::Int)
#1 := true
#77 := [true-axiom]: true
#588 := (or false #631)
#589 := [th-lemma arith]: #588
#590 := [unit-resolution #589 #77]: #631
#591 := (not #631)
#592 := (or #591 #638)
#593 := [th-lemma arith triangle-eq]: #592
#594 := [unit-resolution #593 #590]: #638
#481 := (>= #632 0::Int)
#595 := (or #591 #481)
#596 := [th-lemma arith triangle-eq]: #595
#597 := [unit-resolution #596 #590]: #481
#587 := [th-lemma arith eq-propagate 1 1 #597 #594]: #598
#578 := [symm #587]: #660
#604 := (= #11 #845)
#846 := (+ #11 #840)
#790 := (<= #846 0::Int)
#484 := (= #846 0::Int)
#562 := (= #9 0::Int)
#776 := (not #562)
#715 := (= 0::Int #9)
#654 := [hypothesis]: #562
#730 := [symm #654]: #715
#560 := (= #11 0::Int)
#709 := (or #776 #560)
#514 := (* -1::Int #9)
#644 := (div #514 -1::Int)
#800 := (* -1::Int #644)
#804 := (+ #11 #800)
#687 := (= #804 0::Int)
#850 := (<= #9 0::Int)
#830 := (not #850)
#847 := (>= #9 0::Int)
#665 := (not #847)
#812 := (or #665 #830)
#648 := (ite #812 #484 #687)
#793 := (ite #562 #560 #648)
#21 := (:var 0 Int)
#32 := (:var 1 Int)
#33 := (f4 #32 #21)
#885 := (pattern #33)
#192 := (* -1::Int #21)
#189 := (* -1::Int #32)
#195 := (div #189 #192)
#367 := (* -1::Int #195)
#368 := (+ #33 #367)
#369 := (= #368 0::Int)
#43 := (div #32 #21)
#364 := (* -1::Int #43)
#365 := (+ #33 #364)
#366 := (= #365 0::Int)
#227 := (>= #32 0::Int)
#220 := (<= #21 0::Int)
#327 := (or #220 #227)
#328 := (not #327)
#216 := (<= #32 0::Int)
#325 := (or #216 #220)
#326 := (not #325)
#331 := (or #326 #328)
#370 := (ite #331 #366 #369)
#363 := (= #33 0::Int)
#35 := (= #21 0::Int)
#34 := (= #32 0::Int)
#36 := (or #34 #35)
#371 := (ite #36 #363 #370)
#886 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #885) #371)
#374 := (forall (vars (?v0 Int) (?v1 Int)) #371)
#889 := (iff #374 #886)
#887 := (iff #371 #371)
#888 := [refl]: #887
#890 := [quant-intro #888]: #889
#334 := (ite #331 #43 #195)
#337 := (ite #36 0::Int #334)
#340 := (= #33 #337)
#343 := (forall (vars (?v0 Int) (?v1 Int)) #340)
#375 := (iff #343 #374)
#372 := (iff #340 #371)
#373 := [rewrite]: #372
#376 := [quant-intro #373]: #375
#228 := (not #227)
#221 := (not #220)
#231 := (and #221 #228)
#217 := (not #216)
#224 := (and #217 #221)
#234 := (or #224 #231)
#237 := (ite #234 #43 #195)
#240 := (ite #36 0::Int #237)
#243 := (= #33 #240)
#246 := (forall (vars (?v0 Int) (?v1 Int)) #243)
#344 := (iff #246 #343)
#341 := (iff #243 #340)
#338 := (= #240 #337)
#335 := (= #237 #334)
#332 := (iff #234 #331)
#329 := (iff #231 #328)
#330 := [rewrite]: #329
#310 := (iff #224 #326)
#311 := [rewrite]: #310
#333 := [monotonicity #311 #330]: #332
#336 := [monotonicity #333]: #335
#339 := [monotonicity #336]: #338
#342 := [monotonicity #339]: #341
#345 := [quant-intro #342]: #344
#306 := (~ #246 #246)
#319 := (~ #243 #243)
#320 := [refl]: #319
#307 := [nnf-pos #320]: #306
#45 := (- #21)
#44 := (- #32)
#46 := (div #44 #45)
#38 := (< 0::Int #21)
#40 := (< #32 0::Int)
#41 := (and #40 #38)
#37 := (< 0::Int #32)
#39 := (and #37 #38)
#42 := (or #39 #41)
#47 := (ite #42 #43 #46)
#48 := (ite #36 0::Int #47)
#49 := (= #33 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#249 := (iff #50 #246)
#182 := (and #38 #40)
#185 := (or #39 #182)
#198 := (ite #185 #43 #195)
#176 := (= 0::Int #21)
#173 := (= 0::Int #32)
#179 := (or #173 #176)
#201 := (ite #179 0::Int #198)
#204 := (= #33 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#247 := (iff #207 #246)
#244 := (iff #204 #243)
#241 := (= #201 #240)
#238 := (= #198 #237)
#235 := (iff #185 #234)
#232 := (iff #182 #231)
#229 := (iff #40 #228)
#230 := [rewrite]: #229
#222 := (iff #38 #221)
#223 := [rewrite]: #222
#233 := [monotonicity #223 #230]: #232
#225 := (iff #39 #224)
#218 := (iff #37 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#236 := [monotonicity #226 #233]: #235
#239 := [monotonicity #236]: #238
#214 := (iff #179 #36)
#212 := (iff #176 #35)
#213 := [rewrite]: #212
#210 := (iff #173 #34)
#211 := [rewrite]: #210
#215 := [monotonicity #211 #213]: #214
#242 := [monotonicity #215 #239]: #241
#245 := [monotonicity #242]: #244
#248 := [quant-intro #245]: #247
#208 := (iff #50 #207)
#205 := (iff #49 #204)
#202 := (= #48 #201)
#199 := (= #47 #198)
#196 := (= #46 #195)
#193 := (= #45 #192)
#194 := [rewrite]: #193
#190 := (= #44 #189)
#191 := [rewrite]: #190
#197 := [monotonicity #191 #194]: #196
#186 := (iff #42 #185)
#183 := (iff #41 #182)
#184 := [rewrite]: #183
#187 := [monotonicity #184]: #186
#200 := [monotonicity #187 #197]: #199
#180 := (iff #36 #179)
#177 := (iff #35 #176)
#178 := [rewrite]: #177
#174 := (iff #34 #173)
#175 := [rewrite]: #174
#181 := [monotonicity #175 #178]: #180
#203 := [monotonicity #181 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#250 := [trans #209 #248]: #249
#172 := [asserted]: #50
#251 := [mp #172 #250]: #246
#321 := [mp~ #251 #307]: #246
#346 := [mp #321 #345]: #343
#377 := [mp #346 #376]: #374
#891 := [mp #377 #890]: #886
#682 := (not #886)
#697 := (or #682 #793)
#854 := (* -1::Int 1::Int)
#841 := (div #514 #854)
#842 := (* -1::Int #841)
#843 := (+ #11 #842)
#844 := (= #843 0::Int)
#849 := (<= 1::Int 0::Int)
#489 := (or #849 #847)
#490 := (not #489)
#848 := (or #850 #849)
#851 := (not #848)
#837 := (or #851 #490)
#838 := (ite #837 #484 #844)
#561 := (= 1::Int 0::Int)
#563 := (or #562 #561)
#457 := (ite #563 #560 #838)
#699 := (or #682 #457)
#693 := (iff #699 #697)
#702 := (iff #697 #697)
#703 := [rewrite]: #702
#794 := (iff #457 #793)
#796 := (iff #838 #648)
#688 := (iff #844 #687)
#802 := (= #843 #804)
#801 := (= #842 #800)
#646 := (= #841 #644)
#808 := (= #854 -1::Int)
#815 := [rewrite]: #808
#647 := [monotonicity #815]: #646
#803 := [monotonicity #647]: #801
#805 := [monotonicity #803]: #802
#689 := [monotonicity #805]: #688
#813 := (iff #837 #812)
#809 := (or #830 #665)
#806 := (iff #809 #812)
#807 := [rewrite]: #806
#810 := (iff #837 #809)
#666 := (iff #490 #665)
#818 := (iff #489 #847)
#821 := (or false #847)
#822 := (iff #821 #847)
#823 := [rewrite]: #822
#816 := (iff #489 #821)
#547 := (iff #849 false)
#548 := [rewrite]: #547
#817 := [monotonicity #548]: #816
#824 := [trans #817 #823]: #818
#667 := [monotonicity #824]: #666
#819 := (iff #851 #830)
#829 := (iff #848 #850)
#549 := (or #850 false)
#543 := (iff #549 #850)
#825 := [rewrite]: #543
#827 := (iff #848 #549)
#828 := [monotonicity #548]: #827
#826 := [trans #828 #825]: #829
#820 := [monotonicity #826]: #819
#811 := [monotonicity #820 #667]: #810
#814 := [trans #811 #807]: #813
#698 := [monotonicity #814 #689]: #796
#836 := (iff #563 #562)
#556 := (or #562 false)
#835 := (iff #556 #562)
#832 := [rewrite]: #835
#557 := (iff #563 #556)
#833 := (iff #561 false)
#834 := [rewrite]: #833
#831 := [monotonicity #834]: #557
#546 := [trans #831 #832]: #836
#797 := [monotonicity #546 #698]: #794
#701 := [monotonicity #797]: #693
#704 := [trans #701 #703]: #693
#700 := [quant-inst #9 #10]: #699
#705 := [mp #700 #704]: #697
#684 := [unit-resolution #705 #891]: #793
#771 := (not #793)
#762 := (or #771 #776 #560)
#763 := [def-axiom]: #762
#690 := [unit-resolution #763 #684]: #709
#714 := [unit-resolution #690 #654]: #560
#707 := [trans #714 #730]: #731
#668 := [monotonicity #707]: #663
#670 := [symm #668]: #669
#535 := (= f6 #451)
#15 := (:var 0 S2)
#16 := (f5 #15)
#864 := (pattern #16)
#17 := (f3 #16)
#87 := (= #15 #17)
#865 := (forall (vars (?v0 S2)) (:pat #864) #87)
#91 := (forall (vars (?v0 S2)) #87)
#866 := (iff #91 #865)
#868 := (iff #865 #865)
#869 := [rewrite]: #868
#867 := [rewrite]: #866
#870 := [trans #867 #869]: #866
#314 := (~ #91 #91)
#312 := (~ #87 #87)
#313 := [refl]: #312
#315 := [nnf-pos #313]: #314
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#92 := (iff #19 #91)
#89 := (iff #18 #87)
#90 := [rewrite]: #89
#93 := [quant-intro #90]: #92
#86 := [asserted]: #19
#96 := [mp #86 #93]: #91
#300 := [mp~ #96 #315]: #91
#871 := [mp #300 #870]: #865
#528 := (not #865)
#539 := (or #528 #535)
#540 := [quant-inst #8]: #539
#662 := [unit-resolution #540 #871]: #535
#671 := [trans #662 #670]: #80
#83 := (not #80)
#13 := (= #12 f6)
#14 := (not #13)
#84 := (iff #14 #83)
#81 := (iff #13 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#79 := [asserted]: #14
#88 := [mp #79 #85]: #83
#672 := [unit-resolution #88 #671]: false
#673 := [lemma #672]: #776
#706 := (or #562 #484)
#780 := (not #812)
#769 := (not #484)
#710 := [hypothesis]: #769
#716 := [hypothesis]: #776
#691 := (or #562 #648)
#765 := (or #771 #562 #648)
#766 := [def-axiom]: #765
#650 := [unit-resolution #766 #684]: #691
#681 := [unit-resolution #650 #716]: #648
#782 := (not #648)
#783 := (or #782 #780 #484)
#784 := [def-axiom]: #783
#683 := [unit-resolution #784 #681 #710]: #780
#786 := (or #812 #850)
#788 := [def-axiom]: #786
#685 := [unit-resolution #788 #683]: #850
#795 := (or #812 #847)
#799 := [def-axiom]: #795
#692 := [unit-resolution #799 #683]: #847
#694 := (or #562 #830 #665)
#695 := [th-lemma arith triangle-eq]: #694
#696 := [unit-resolution #695 #716 #692 #685]: false
#686 := [lemma #696]: #706
#610 := [unit-resolution #686 #673]: #484
#613 := (or #769 #790)
#614 := [th-lemma arith triangle-eq]: #613
#600 := [unit-resolution #614 #610]: #790
#791 := (>= #846 0::Int)
#602 := (or #769 #791)
#603 := [th-lemma arith triangle-eq]: #602
#601 := [unit-resolution #603 #610]: #791
#586 := [th-lemma arith eq-propagate 1 1 #601 #600]: #604
#579 := [trans #586 #578]: #731
#580 := [monotonicity #579]: #663
#581 := [symm #580]: #669
#582 := [trans #662 #581]: #80
[unit-resolution #88 #582]: false
unsat
84bb282eead031ef4ff9718b6ca086d90bb4eefb 298 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#12 := (f3 0::Int)
decl f4 :: (-> Int Int Int)
#9 := 3::Int
#10 := (f4 0::Int 3::Int)
#11 := (f3 #10)
#13 := (= #11 #12)
#806 := (= #10 0::Int)
#20 := (:var 0 Int)
#31 := (:var 1 Int)
#32 := (f4 #31 #20)
#878 := (pattern #32)
#180 := -1::Int
#184 := (* -1::Int #20)
#181 := (* -1::Int #31)
#187 := (div #181 #184)
#359 := (* -1::Int #187)
#360 := (+ #32 #359)
#361 := (= #360 0::Int)
#42 := (div #31 #20)
#356 := (* -1::Int #42)
#357 := (+ #32 #356)
#358 := (= #357 0::Int)
#219 := (>= #31 0::Int)
#212 := (<= #20 0::Int)
#319 := (or #212 #219)
#320 := (not #319)
#208 := (<= #31 0::Int)
#317 := (or #208 #212)
#318 := (not #317)
#323 := (or #318 #320)
#362 := (ite #323 #358 #361)
#355 := (= #32 0::Int)
#34 := (= #20 0::Int)
#33 := (= #31 0::Int)
#35 := (or #33 #34)
#363 := (ite #35 #355 #362)
#879 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #878) #363)
#366 := (forall (vars (?v0 Int) (?v1 Int)) #363)
#882 := (iff #366 #879)
#880 := (iff #363 #363)
#881 := [refl]: #880
#883 := [quant-intro #881]: #882
#326 := (ite #323 #42 #187)
#329 := (ite #35 0::Int #326)
#332 := (= #32 #329)
#335 := (forall (vars (?v0 Int) (?v1 Int)) #332)
#367 := (iff #335 #366)
#364 := (iff #332 #363)
#365 := [rewrite]: #364
#368 := [quant-intro #365]: #367
#220 := (not #219)
#213 := (not #212)
#223 := (and #213 #220)
#209 := (not #208)
#216 := (and #209 #213)
#226 := (or #216 #223)
#229 := (ite #226 #42 #187)
#232 := (ite #35 0::Int #229)
#235 := (= #32 #232)
#238 := (forall (vars (?v0 Int) (?v1 Int)) #235)
#336 := (iff #238 #335)
#333 := (iff #235 #332)
#330 := (= #232 #329)
#327 := (= #229 #326)
#324 := (iff #226 #323)
#321 := (iff #223 #320)
#322 := [rewrite]: #321
#302 := (iff #216 #318)
#303 := [rewrite]: #302
#325 := [monotonicity #303 #322]: #324
#328 := [monotonicity #325]: #327
#331 := [monotonicity #328]: #330
#334 := [monotonicity #331]: #333
#337 := [quant-intro #334]: #336
#298 := (~ #238 #238)
#311 := (~ #235 #235)
#312 := [refl]: #311
#299 := [nnf-pos #312]: #298
#44 := (- #20)
#43 := (- #31)
#45 := (div #43 #44)
#37 := (< 0::Int #20)
#39 := (< #31 0::Int)
#40 := (and #39 #37)
#36 := (< 0::Int #31)
#38 := (and #36 #37)
#41 := (or #38 #40)
#46 := (ite #41 #42 #45)
#47 := (ite #35 0::Int #46)
#48 := (= #32 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#241 := (iff #49 #238)
#174 := (and #37 #39)
#177 := (or #38 #174)
#190 := (ite #177 #42 #187)
#168 := (= 0::Int #20)
#165 := (= 0::Int #31)
#171 := (or #165 #168)
#193 := (ite #171 0::Int #190)
#196 := (= #32 #193)
#199 := (forall (vars (?v0 Int) (?v1 Int)) #196)
#239 := (iff #199 #238)
#236 := (iff #196 #235)
#233 := (= #193 #232)
#230 := (= #190 #229)
#227 := (iff #177 #226)
#224 := (iff #174 #223)
#221 := (iff #39 #220)
#222 := [rewrite]: #221
#214 := (iff #37 #213)
#215 := [rewrite]: #214
#225 := [monotonicity #215 #222]: #224
#217 := (iff #38 #216)
#210 := (iff #36 #209)
#211 := [rewrite]: #210
#218 := [monotonicity #211 #215]: #217
#228 := [monotonicity #218 #225]: #227
#231 := [monotonicity #228]: #230
#206 := (iff #171 #35)
#204 := (iff #168 #34)
#205 := [rewrite]: #204
#202 := (iff #165 #33)
#203 := [rewrite]: #202
#207 := [monotonicity #203 #205]: #206
#234 := [monotonicity #207 #231]: #233
#237 := [monotonicity #234]: #236
#240 := [quant-intro #237]: #239
#200 := (iff #49 #199)
#197 := (iff #48 #196)
#194 := (= #47 #193)
#191 := (= #46 #190)
#188 := (= #45 #187)
#185 := (= #44 #184)
#186 := [rewrite]: #185
#182 := (= #43 #181)
#183 := [rewrite]: #182
#189 := [monotonicity #183 #186]: #188
#178 := (iff #41 #177)
#175 := (iff #40 #174)
#176 := [rewrite]: #175
#179 := [monotonicity #176]: #178
#192 := [monotonicity #179 #189]: #191
#172 := (iff #35 #171)
#169 := (iff #34 #168)
#170 := [rewrite]: #169
#166 := (iff #33 #165)
#167 := [rewrite]: #166
#173 := [monotonicity #167 #170]: #172
#195 := [monotonicity #173 #192]: #194
#198 := [monotonicity #195]: #197
#201 := [quant-intro #198]: #200
#242 := [trans #201 #240]: #241
#164 := [asserted]: #49
#243 := [mp #164 #242]: #238
#313 := [mp~ #243 #299]: #238
#338 := [mp #313 #337]: #335
#369 := [mp #338 #368]: #366
#884 := [mp #369 #883]: #879
#725 := (not #879)
#731 := (or #725 #806)
#812 := (* -1::Int 3::Int)
#813 := (* -1::Int 0::Int)
#814 := (div #813 #812)
#809 := (* -1::Int #814)
#810 := (+ #10 #809)
#815 := (= #810 0::Int)
#816 := (div 0::Int 3::Int)
#811 := (* -1::Int #816)
#817 := (+ #10 #811)
#658 := (= #817 0::Int)
#834 := (>= 0::Int 0::Int)
#659 := (<= 3::Int 0::Int)
#660 := (or #659 #834)
#802 := (not #660)
#803 := (<= 0::Int 0::Int)
#804 := (or #803 #659)
#805 := (not #804)
#799 := (or #805 #802)
#800 := (ite #799 #658 #815)
#807 := (= 3::Int 0::Int)
#801 := (= 0::Int 0::Int)
#808 := (or #801 #807)
#637 := (ite #808 #806 #800)
#704 := (or #725 #637)
#706 := (iff #704 #731)
#710 := (iff #731 #731)
#711 := [rewrite]: #710
#729 := (iff #637 #806)
#1 := true
#722 := (ite true #806 #806)
#727 := (iff #722 #806)
#728 := [rewrite]: #727
#723 := (iff #637 #722)
#740 := (iff #800 #806)
#736 := (ite false #806 #806)
#739 := (iff #736 #806)
#734 := [rewrite]: #739
#737 := (iff #800 #736)
#733 := (iff #815 #806)
#754 := (= #810 #10)
#766 := (+ #10 0::Int)
#764 := (= #766 #10)
#769 := [rewrite]: #764
#753 := (= #810 #766)
#751 := (= #809 0::Int)
#778 := (= #813 0::Int)
#762 := [rewrite]: #778
#749 := (= #809 #813)
#747 := (= #814 0::Int)
#760 := -3::Int
#741 := (div 0::Int -3::Int)
#745 := (= #741 0::Int)
#746 := [rewrite]: #745
#742 := (= #814 #741)
#757 := (= #812 -3::Int)
#761 := [rewrite]: #757
#744 := [monotonicity #762 #761]: #742
#748 := [trans #744 #746]: #747
#750 := [monotonicity #748]: #749
#752 := [trans #750 #762]: #751
#743 := [monotonicity #752]: #753
#732 := [trans #743 #769]: #754
#735 := [monotonicity #732]: #733
#758 := (iff #658 #806)
#755 := (= #817 #10)
#767 := (= #817 #766)
#763 := (= #811 0::Int)
#777 := (= #811 #813)
#775 := (= #816 0::Int)
#776 := [rewrite]: #775
#771 := [monotonicity #776]: #777
#765 := [trans #771 #762]: #763
#768 := [monotonicity #765]: #767
#756 := [trans #768 #769]: #755
#759 := [monotonicity #756]: #758
#785 := (iff #799 false)
#772 := (or false false)
#784 := (iff #772 false)
#780 := [rewrite]: #784
#782 := (iff #799 #772)
#773 := (iff #802 false)
#482 := (not true)
#841 := (iff #482 false)
#844 := [rewrite]: #841
#779 := (iff #802 #482)
#788 := (iff #660 true)
#695 := (or false true)
#698 := (iff #695 true)
#791 := [rewrite]: #698
#696 := (iff #660 #695)
#840 := (iff #834 true)
#842 := [rewrite]: #840
#691 := (iff #659 false)
#786 := [rewrite]: #691
#697 := [monotonicity #786 #842]: #696
#792 := [trans #697 #791]: #788
#781 := [monotonicity #792]: #779
#770 := [trans #781 #844]: #773
#686 := (iff #805 false)
#692 := (iff #805 #482)
#675 := (iff #804 true)
#796 := (or true false)
#798 := (iff #796 true)
#680 := [rewrite]: #798
#787 := (iff #804 #796)
#641 := (iff #803 true)
#789 := [rewrite]: #641
#790 := [monotonicity #789 #786]: #787
#690 := [trans #790 #680]: #675
#693 := [monotonicity #690]: #692
#694 := [trans #693 #844]: #686
#783 := [monotonicity #694 #770]: #782
#774 := [trans #783 #780]: #785
#738 := [monotonicity #774 #759 #735]: #737
#726 := [trans #738 #734]: #740
#681 := (iff #808 true)
#797 := (iff #808 #796)
#793 := (iff #807 false)
#794 := [rewrite]: #793
#639 := (iff #801 true)
#640 := [rewrite]: #639
#795 := [monotonicity #640 #794]: #797
#682 := [trans #795 #680]: #681
#724 := [monotonicity #682 #726]: #723
#730 := [trans #724 #728]: #729
#599 := [monotonicity #730]: #706
#712 := [trans #599 #711]: #706
#705 := [quant-inst #8 #9]: #704
#717 := [mp #705 #712]: #731
#714 := [unit-resolution #717 #884]: #806
#715 := [monotonicity #714]: #13
#14 := (not #13)
#78 := [asserted]: #14
[unit-resolution #78 #715]: false
unsat
753372d6275197bbef48a8ecc32b53d9fd3d1075 315 0
#2 := false
decl f3 :: (-> Int S2)
#12 := 0::Int
#13 := (f3 0::Int)
decl f4 :: (-> Int Int Int)
#9 := 3::Int
#8 := 1::Int
#10 := (f4 1::Int 3::Int)
#11 := (f3 #10)
#14 := (= #11 #13)
#801 := (= #10 0::Int)
#21 := (:var 0 Int)
#32 := (:var 1 Int)
#33 := (f4 #32 #21)
#878 := (pattern #33)
#181 := -1::Int
#185 := (* -1::Int #21)
#182 := (* -1::Int #32)
#188 := (div #182 #185)
#360 := (* -1::Int #188)
#361 := (+ #33 #360)
#362 := (= #361 0::Int)
#43 := (div #32 #21)
#357 := (* -1::Int #43)
#358 := (+ #33 #357)
#359 := (= #358 0::Int)
#220 := (>= #32 0::Int)
#213 := (<= #21 0::Int)
#320 := (or #213 #220)
#321 := (not #320)
#209 := (<= #32 0::Int)
#318 := (or #209 #213)
#319 := (not #318)
#324 := (or #319 #321)
#363 := (ite #324 #359 #362)
#356 := (= #33 0::Int)
#35 := (= #21 0::Int)
#34 := (= #32 0::Int)
#36 := (or #34 #35)
#364 := (ite #36 #356 #363)
#879 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #878) #364)
#367 := (forall (vars (?v0 Int) (?v1 Int)) #364)
#882 := (iff #367 #879)
#880 := (iff #364 #364)
#881 := [refl]: #880
#883 := [quant-intro #881]: #882
#327 := (ite #324 #43 #188)
#330 := (ite #36 0::Int #327)
#333 := (= #33 #330)
#336 := (forall (vars (?v0 Int) (?v1 Int)) #333)
#368 := (iff #336 #367)
#365 := (iff #333 #364)
#366 := [rewrite]: #365
#369 := [quant-intro #366]: #368
#221 := (not #220)
#214 := (not #213)
#224 := (and #214 #221)
#210 := (not #209)
#217 := (and #210 #214)
#227 := (or #217 #224)
#230 := (ite #227 #43 #188)
#233 := (ite #36 0::Int #230)
#236 := (= #33 #233)
#239 := (forall (vars (?v0 Int) (?v1 Int)) #236)
#337 := (iff #239 #336)
#334 := (iff #236 #333)
#331 := (= #233 #330)
#328 := (= #230 #327)
#325 := (iff #227 #324)
#322 := (iff #224 #321)
#323 := [rewrite]: #322
#303 := (iff #217 #319)
#304 := [rewrite]: #303
#326 := [monotonicity #304 #323]: #325
#329 := [monotonicity #326]: #328
#332 := [monotonicity #329]: #331
#335 := [monotonicity #332]: #334
#338 := [quant-intro #335]: #337
#299 := (~ #239 #239)
#312 := (~ #236 #236)
#313 := [refl]: #312
#300 := [nnf-pos #313]: #299
#45 := (- #21)
#44 := (- #32)
#46 := (div #44 #45)
#38 := (< 0::Int #21)
#40 := (< #32 0::Int)
#41 := (and #40 #38)
#37 := (< 0::Int #32)
#39 := (and #37 #38)
#42 := (or #39 #41)
#47 := (ite #42 #43 #46)
#48 := (ite #36 0::Int #47)
#49 := (= #33 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#242 := (iff #50 #239)
#175 := (and #38 #40)
#178 := (or #39 #175)
#191 := (ite #178 #43 #188)
#169 := (= 0::Int #21)
#166 := (= 0::Int #32)
#172 := (or #166 #169)
#194 := (ite #172 0::Int #191)
#197 := (= #33 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#240 := (iff #200 #239)
#237 := (iff #197 #236)
#234 := (= #194 #233)
#231 := (= #191 #230)
#228 := (iff #178 #227)
#225 := (iff #175 #224)
#222 := (iff #40 #221)
#223 := [rewrite]: #222
#215 := (iff #38 #214)
#216 := [rewrite]: #215
#226 := [monotonicity #216 #223]: #225
#218 := (iff #39 #217)
#211 := (iff #37 #210)
#212 := [rewrite]: #211
#219 := [monotonicity #212 #216]: #218
#229 := [monotonicity #219 #226]: #228
#232 := [monotonicity #229]: #231
#207 := (iff #172 #36)
#205 := (iff #169 #35)
#206 := [rewrite]: #205
#203 := (iff #166 #34)
#204 := [rewrite]: #203
#208 := [monotonicity #204 #206]: #207
#235 := [monotonicity #208 #232]: #234
#238 := [monotonicity #235]: #237
#241 := [quant-intro #238]: #240
#201 := (iff #50 #200)
#198 := (iff #49 #197)
#195 := (= #48 #194)
#192 := (= #47 #191)
#189 := (= #46 #188)
#186 := (= #45 #185)
#187 := [rewrite]: #186
#183 := (= #44 #182)
#184 := [rewrite]: #183
#190 := [monotonicity #184 #187]: #189
#179 := (iff #42 #178)
#176 := (iff #41 #175)
#177 := [rewrite]: #176
#180 := [monotonicity #177]: #179
#193 := [monotonicity #180 #190]: #192
#173 := (iff #36 #172)
#170 := (iff #35 #169)
#171 := [rewrite]: #170
#167 := (iff #34 #166)
#168 := [rewrite]: #167
#174 := [monotonicity #168 #171]: #173
#196 := [monotonicity #174 #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#243 := [trans #202 #241]: #242
#165 := [asserted]: #50
#244 := [mp #165 #243]: #239
#314 := [mp~ #244 #300]: #239
#339 := [mp #314 #338]: #336
#370 := [mp #339 #369]: #367
#884 := [mp #370 #883]: #879
#702 := (not #879)
#683 := (or #702 #801)
#813 := (* -1::Int 3::Int)
#814 := (* -1::Int 1::Int)
#809 := (div #814 #813)
#810 := (* -1::Int #809)
#815 := (+ #10 #810)
#816 := (= #815 0::Int)
#811 := (div 1::Int 3::Int)
#817 := (* -1::Int #811)
#658 := (+ #10 #817)
#659 := (= #658 0::Int)
#660 := (>= 1::Int 0::Int)
#802 := (<= 3::Int 0::Int)
#803 := (or #802 #660)
#804 := (not #803)
#805 := (<= 1::Int 0::Int)
#799 := (or #805 #802)
#800 := (not #799)
#806 := (or #800 #804)
#807 := (ite #806 #659 #816)
#808 := (= 3::Int 0::Int)
#637 := (= 1::Int 0::Int)
#639 := (or #637 #808)
#640 := (ite #639 #801 #807)
#707 := (or #702 #640)
#703 := (iff #707 #683)
#677 := (iff #683 #683)
#684 := [rewrite]: #677
#701 := (iff #640 #801)
#718 := (ite false #801 #801)
#716 := (iff #718 #801)
#721 := [rewrite]: #716
#719 := (iff #640 #718)
#714 := (iff #807 #801)
#731 := (= #10 1::Int)
#1 := true
#710 := (ite true #801 #731)
#717 := (iff #710 #801)
#713 := [rewrite]: #717
#711 := (iff #807 #710)
#706 := (iff #816 #731)
#722 := (+ -1::Int #10)
#729 := (= #722 0::Int)
#704 := (iff #729 #731)
#705 := [rewrite]: #704
#730 := (iff #816 #729)
#727 := (= #815 #722)
#734 := (+ #10 -1::Int)
#723 := (= #734 #722)
#724 := [rewrite]: #723
#740 := (= #815 #734)
#738 := (= #810 -1::Int)
#747 := (= #814 -1::Int)
#748 := [rewrite]: #747
#736 := (= #810 #814)
#733 := (= #809 1::Int)
#749 := -3::Int
#752 := (div -1::Int -3::Int)
#754 := (= #752 1::Int)
#732 := [rewrite]: #754
#753 := (= #809 #752)
#750 := (= #813 -3::Int)
#751 := [rewrite]: #750
#743 := [monotonicity #748 #751]: #753
#735 := [trans #743 #732]: #733
#737 := [monotonicity #735]: #736
#739 := [trans #737 #748]: #738
#726 := [monotonicity #739]: #740
#728 := [trans #726 #724]: #727
#725 := [monotonicity #728]: #730
#599 := [trans #725 #705]: #706
#745 := (iff #659 #801)
#742 := (= #658 #10)
#759 := (+ #10 0::Int)
#761 := (= #759 #10)
#741 := [rewrite]: #761
#760 := (= #658 #759)
#756 := (= #817 0::Int)
#767 := (* -1::Int 0::Int)
#769 := (= #767 0::Int)
#755 := [rewrite]: #769
#768 := (= #817 #767)
#765 := (= #811 0::Int)
#766 := [rewrite]: #765
#764 := [monotonicity #766]: #768
#758 := [trans #764 #755]: #756
#757 := [monotonicity #758]: #760
#744 := [trans #757 #741]: #742
#746 := [monotonicity #744]: #745
#762 := (iff #806 true)
#775 := (or true false)
#771 := (iff #775 true)
#778 := [rewrite]: #771
#776 := (iff #806 #775)
#785 := (iff #804 false)
#483 := (not true)
#844 := (iff #483 false)
#830 := [rewrite]: #844
#784 := (iff #804 #483)
#782 := (iff #803 true)
#779 := (or false true)
#770 := (iff #779 true)
#772 := [rewrite]: #770
#781 := (iff #803 #779)
#788 := (iff #660 true)
#792 := [rewrite]: #788
#787 := (iff #802 false)
#790 := [rewrite]: #787
#773 := [monotonicity #790 #792]: #781
#783 := [trans #773 #772]: #782
#780 := [monotonicity #783]: #784
#774 := [trans #780 #830]: #785
#698 := (iff #800 true)
#686 := (not false)
#696 := (iff #686 true)
#697 := [rewrite]: #696
#694 := (iff #800 #686)
#692 := (iff #799 false)
#795 := (or false false)
#681 := (iff #795 false)
#682 := [rewrite]: #681
#675 := (iff #799 #795)
#691 := (iff #805 false)
#786 := [rewrite]: #691
#690 := [monotonicity #786 #790]: #675
#693 := [trans #690 #682]: #692
#695 := [monotonicity #693]: #694
#791 := [trans #695 #697]: #698
#777 := [monotonicity #791 #774]: #776
#763 := [trans #777 #778]: #762
#712 := [monotonicity #763 #746 #599]: #711
#715 := [trans #712 #713]: #714
#641 := (iff #639 false)
#798 := (iff #639 #795)
#796 := (iff #808 false)
#797 := [rewrite]: #796
#793 := (iff #637 false)
#794 := [rewrite]: #793
#680 := [monotonicity #794 #797]: #798
#789 := [trans #680 #682]: #641
#720 := [monotonicity #789 #715]: #719
#647 := [trans #720 #721]: #701
#709 := [monotonicity #647]: #703
#643 := [trans #709 #684]: #703
#708 := [quant-inst #8 #9]: #707
#674 := [mp #708 #643]: #683
#678 := [unit-resolution #674 #884]: #801
#685 := [monotonicity #678]: #14
#15 := (not #14)
#79 := [asserted]: #15
[unit-resolution #79 #685]: false
unsat
c4211064b5728b62240cb2d0bc31b06836a1e3c1 305 0
#2 := false
decl f3 :: (-> Int S2)
#11 := 1::Int
#12 := (f3 1::Int)
decl f4 :: (-> Int Int Int)
#8 := 3::Int
#9 := (f4 3::Int 3::Int)
#10 := (f3 #9)
#13 := (= #10 #12)
#742 := (= #9 1::Int)
#21 := (:var 0 Int)
#32 := (:var 1 Int)
#33 := (f4 #32 #21)
#878 := (pattern #33)
#20 := 0::Int
#181 := -1::Int
#185 := (* -1::Int #21)
#182 := (* -1::Int #32)
#188 := (div #182 #185)
#360 := (* -1::Int #188)
#361 := (+ #33 #360)
#362 := (= #361 0::Int)
#43 := (div #32 #21)
#357 := (* -1::Int #43)
#358 := (+ #33 #357)
#359 := (= #358 0::Int)
#220 := (>= #32 0::Int)
#213 := (<= #21 0::Int)
#320 := (or #213 #220)
#321 := (not #320)
#209 := (<= #32 0::Int)
#318 := (or #209 #213)
#319 := (not #318)
#324 := (or #319 #321)
#363 := (ite #324 #359 #362)
#356 := (= #33 0::Int)
#35 := (= #21 0::Int)
#34 := (= #32 0::Int)
#36 := (or #34 #35)
#364 := (ite #36 #356 #363)
#879 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #878) #364)
#367 := (forall (vars (?v0 Int) (?v1 Int)) #364)
#882 := (iff #367 #879)
#880 := (iff #364 #364)
#881 := [refl]: #880
#883 := [quant-intro #881]: #882
#327 := (ite #324 #43 #188)
#330 := (ite #36 0::Int #327)
#333 := (= #33 #330)
#336 := (forall (vars (?v0 Int) (?v1 Int)) #333)
#368 := (iff #336 #367)
#365 := (iff #333 #364)
#366 := [rewrite]: #365
#369 := [quant-intro #366]: #368
#221 := (not #220)
#214 := (not #213)
#224 := (and #214 #221)
#210 := (not #209)
#217 := (and #210 #214)
#227 := (or #217 #224)
#230 := (ite #227 #43 #188)
#233 := (ite #36 0::Int #230)
#236 := (= #33 #233)
#239 := (forall (vars (?v0 Int) (?v1 Int)) #236)
#337 := (iff #239 #336)
#334 := (iff #236 #333)
#331 := (= #233 #330)
#328 := (= #230 #327)
#325 := (iff #227 #324)
#322 := (iff #224 #321)
#323 := [rewrite]: #322
#303 := (iff #217 #319)
#304 := [rewrite]: #303
#326 := [monotonicity #304 #323]: #325
#329 := [monotonicity #326]: #328
#332 := [monotonicity #329]: #331
#335 := [monotonicity #332]: #334
#338 := [quant-intro #335]: #337
#299 := (~ #239 #239)
#312 := (~ #236 #236)
#313 := [refl]: #312
#300 := [nnf-pos #313]: #299
#45 := (- #21)
#44 := (- #32)
#46 := (div #44 #45)
#38 := (< 0::Int #21)
#40 := (< #32 0::Int)
#41 := (and #40 #38)
#37 := (< 0::Int #32)
#39 := (and #37 #38)
#42 := (or #39 #41)
#47 := (ite #42 #43 #46)
#48 := (ite #36 0::Int #47)
#49 := (= #33 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#242 := (iff #50 #239)
#175 := (and #38 #40)
#178 := (or #39 #175)
#191 := (ite #178 #43 #188)
#169 := (= 0::Int #21)
#166 := (= 0::Int #32)
#172 := (or #166 #169)
#194 := (ite #172 0::Int #191)
#197 := (= #33 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#240 := (iff #200 #239)
#237 := (iff #197 #236)
#234 := (= #194 #233)
#231 := (= #191 #230)
#228 := (iff #178 #227)
#225 := (iff #175 #224)
#222 := (iff #40 #221)
#223 := [rewrite]: #222
#215 := (iff #38 #214)
#216 := [rewrite]: #215
#226 := [monotonicity #216 #223]: #225
#218 := (iff #39 #217)
#211 := (iff #37 #210)
#212 := [rewrite]: #211
#219 := [monotonicity #212 #216]: #218
#229 := [monotonicity #219 #226]: #228
#232 := [monotonicity #229]: #231
#207 := (iff #172 #36)
#205 := (iff #169 #35)
#206 := [rewrite]: #205
#203 := (iff #166 #34)
#204 := [rewrite]: #203
#208 := [monotonicity #204 #206]: #207
#235 := [monotonicity #208 #232]: #234
#238 := [monotonicity #235]: #237
#241 := [quant-intro #238]: #240
#201 := (iff #50 #200)
#198 := (iff #49 #197)
#195 := (= #48 #194)
#192 := (= #47 #191)
#189 := (= #46 #188)
#186 := (= #45 #185)
#187 := [rewrite]: #186
#183 := (= #44 #182)
#184 := [rewrite]: #183
#190 := [monotonicity #184 #187]: #189
#179 := (iff #42 #178)
#176 := (iff #41 #175)
#177 := [rewrite]: #176
#180 := [monotonicity #177]: #179
#193 := [monotonicity #180 #190]: #192
#173 := (iff #36 #172)
#170 := (iff #35 #169)
#171 := [rewrite]: #170
#167 := (iff #34 #166)
#168 := [rewrite]: #167
#174 := [monotonicity #168 #171]: #173
#196 := [monotonicity #174 #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#243 := [trans #202 #241]: #242
#165 := [asserted]: #50
#244 := [mp #165 #243]: #239
#314 := [mp~ #244 #300]: #239
#339 := [mp #314 #338]: #336
#370 := [mp #339 #369]: #367
#884 := [mp #370 #883]: #879
#714 := (not #879)
#715 := (or #714 #742)
#814 := (* -1::Int 3::Int)
#809 := (div #814 #814)
#810 := (* -1::Int #809)
#815 := (+ #9 #810)
#816 := (= #815 0::Int)
#811 := (div 3::Int 3::Int)
#817 := (* -1::Int #811)
#658 := (+ #9 #817)
#659 := (= #658 0::Int)
#660 := (>= 3::Int 0::Int)
#802 := (<= 3::Int 0::Int)
#803 := (or #802 #660)
#804 := (not #803)
#805 := (or #802 #802)
#799 := (not #805)
#800 := (or #799 #804)
#806 := (ite #800 #659 #816)
#807 := (= #9 0::Int)
#801 := (= 3::Int 0::Int)
#808 := (or #801 #801)
#637 := (ite #808 #807 #806)
#718 := (or #714 #637)
#720 := (iff #718 #715)
#721 := (iff #715 #715)
#701 := [rewrite]: #721
#717 := (iff #637 #742)
#706 := (ite false #807 #742)
#711 := (iff #706 #742)
#712 := [rewrite]: #711
#599 := (iff #637 #706)
#704 := (iff #806 #742)
#1 := true
#728 := (ite true #742 #742)
#725 := (iff #728 #742)
#731 := [rewrite]: #725
#729 := (iff #806 #728)
#724 := (iff #816 #742)
#755 := (+ -1::Int #9)
#757 := (= #755 0::Int)
#744 := (iff #757 #742)
#745 := [rewrite]: #744
#722 := (iff #816 #757)
#740 := (= #815 #755)
#768 := (+ #9 -1::Int)
#756 := (= #768 #755)
#758 := [rewrite]: #756
#739 := (= #815 #768)
#737 := (= #810 -1::Int)
#771 := (* -1::Int 1::Int)
#763 := (= #771 -1::Int)
#765 := [rewrite]: #763
#735 := (= #810 #771)
#732 := (= #809 1::Int)
#748 := -3::Int
#751 := (div -3::Int -3::Int)
#743 := (= #751 1::Int)
#754 := [rewrite]: #743
#752 := (= #809 #751)
#749 := (= #814 -3::Int)
#750 := [rewrite]: #749
#753 := [monotonicity #750 #750]: #752
#733 := [trans #753 #754]: #732
#736 := [monotonicity #733]: #735
#738 := [trans #736 #765]: #737
#734 := [monotonicity #738]: #739
#726 := [trans #734 #758]: #740
#723 := [monotonicity #726]: #722
#727 := [trans #723 #745]: #724
#746 := (iff #659 #742)
#761 := (iff #659 #757)
#759 := (= #658 #755)
#764 := (= #658 #768)
#766 := (= #817 -1::Int)
#778 := (= #817 #771)
#776 := (= #811 1::Int)
#777 := [rewrite]: #776
#762 := [monotonicity #777]: #778
#767 := [trans #762 #765]: #766
#769 := [monotonicity #767]: #764
#760 := [trans #769 #758]: #759
#741 := [monotonicity #760]: #761
#747 := [trans #741 #745]: #746
#774 := (iff #800 true)
#782 := (or true false)
#780 := (iff #782 true)
#785 := [rewrite]: #780
#783 := (iff #800 #782)
#770 := (iff #804 false)
#483 := (not true)
#844 := (iff #483 false)
#830 := [rewrite]: #844
#781 := (iff #804 #483)
#792 := (iff #803 true)
#696 := (or false true)
#791 := (iff #696 true)
#788 := [rewrite]: #791
#697 := (iff #803 #696)
#694 := (iff #660 true)
#695 := [rewrite]: #694
#681 := (iff #802 false)
#682 := [rewrite]: #681
#698 := [monotonicity #682 #695]: #697
#779 := [trans #698 #788]: #792
#773 := [monotonicity #779]: #781
#772 := [trans #773 #830]: #770
#693 := (iff #799 true)
#787 := (not false)
#690 := (iff #787 true)
#692 := [rewrite]: #690
#790 := (iff #799 #787)
#691 := (iff #805 false)
#793 := (or false false)
#797 := (iff #793 false)
#795 := [rewrite]: #797
#641 := (iff #805 #793)
#789 := [monotonicity #682 #682]: #641
#786 := [trans #789 #795]: #691
#675 := [monotonicity #786]: #790
#686 := [trans #675 #692]: #693
#784 := [monotonicity #686 #772]: #783
#775 := [trans #784 #785]: #774
#730 := [monotonicity #775 #747 #727]: #729
#705 := [trans #730 #731]: #704
#798 := (iff #808 false)
#794 := (iff #808 #793)
#639 := (iff #801 false)
#640 := [rewrite]: #639
#796 := [monotonicity #640 #640]: #794
#680 := [trans #796 #795]: #798
#710 := [monotonicity #680 #705]: #599
#713 := [trans #710 #712]: #717
#716 := [monotonicity #713]: #720
#647 := [trans #716 #701]: #720
#719 := [quant-inst #8 #8]: #718
#702 := [mp #719 #647]: #715
#708 := [unit-resolution #702 #884]: #742
#703 := [monotonicity #708]: #13
#14 := (not #13)
#79 := [asserted]: #14
[unit-resolution #79 #703]: false
unsat
c8c3466ffe36eb7d0f579df3f5c17ffb47bc161f 459 0
#2 := false
#19 := 0::Int
#10 := 3::Int
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#807 := (mod #9 3::Int)
#81 := -1::Int
#753 := (* -1::Int #807)
#523 := (div #9 3::Int)
#549 := -3::Int
#751 := (* -3::Int #523)
#754 := (+ #751 #753)
#755 := (+ #9 #754)
#750 := (= #755 0::Int)
#1 := true
#76 := [true-axiom]: true
#719 := (or false #750)
#720 := [th-lemma arith]: #719
#721 := [unit-resolution #720 #76]: #750
#759 := (>= #755 0::Int)
#662 := (not #759)
#760 := (>= #807 0::Int)
#664 := (or false #760)
#665 := [th-lemma arith]: #664
#670 := [unit-resolution #665 #76]: #760
decl f3 :: (-> Int Int Int)
#11 := (f3 #9 3::Int)
#84 := (* -1::Int #11)
#85 := (+ #9 #84)
#83 := (>= #85 0::Int)
#87 := (not #83)
#12 := (<= #11 #9)
#13 := (not #12)
#88 := (iff #13 #87)
#82 := (iff #12 #83)
#86 := [rewrite]: #82
#89 := [monotonicity #86]: #88
#78 := [asserted]: #13
#90 := [mp #78 #89]: #87
#858 := (* -1::Int #523)
#860 := (+ #11 #858)
#689 := (<= #860 0::Int)
#517 := (= #860 0::Int)
#539 := (* -1::Int #9)
#829 := (div #539 -3::Int)
#827 := (* -1::Int #829)
#832 := (+ #11 #827)
#823 := (= #832 0::Int)
#861 := (<= #9 0::Int)
#491 := (not #861)
#647 := (>= #9 0::Int)
#565 := (not #647)
#833 := (or #565 #491)
#824 := (ite #833 #517 #823)
#515 := (= #9 0::Int)
#706 := (not #515)
#817 := (<= #11 0::Int)
#865 := (= #11 0::Int)
#740 := [hypothesis]: #515
#713 := (or #706 #865)
#826 := (ite #515 #865 #824)
#20 := (:var 0 Int)
#31 := (:var 1 Int)
#32 := (f3 #31 #20)
#887 := (pattern #32)
#193 := (* -1::Int #20)
#190 := (* -1::Int #31)
#196 := (div #190 #193)
#368 := (* -1::Int #196)
#369 := (+ #32 #368)
#370 := (= #369 0::Int)
#42 := (div #31 #20)
#365 := (* -1::Int #42)
#366 := (+ #32 #365)
#367 := (= #366 0::Int)
#228 := (>= #31 0::Int)
#221 := (<= #20 0::Int)
#328 := (or #221 #228)
#329 := (not #328)
#217 := (<= #31 0::Int)
#326 := (or #217 #221)
#327 := (not #326)
#332 := (or #327 #329)
#371 := (ite #332 #367 #370)
#364 := (= #32 0::Int)
#34 := (= #20 0::Int)
#33 := (= #31 0::Int)
#35 := (or #33 #34)
#372 := (ite #35 #364 #371)
#888 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #887) #372)
#375 := (forall (vars (?v0 Int) (?v1 Int)) #372)
#891 := (iff #375 #888)
#889 := (iff #372 #372)
#890 := [refl]: #889
#892 := [quant-intro #890]: #891
#335 := (ite #332 #42 #196)
#338 := (ite #35 0::Int #335)
#341 := (= #32 #338)
#344 := (forall (vars (?v0 Int) (?v1 Int)) #341)
#376 := (iff #344 #375)
#373 := (iff #341 #372)
#374 := [rewrite]: #373
#377 := [quant-intro #374]: #376
#229 := (not #228)
#222 := (not #221)
#232 := (and #222 #229)
#218 := (not #217)
#225 := (and #218 #222)
#235 := (or #225 #232)
#238 := (ite #235 #42 #196)
#241 := (ite #35 0::Int #238)
#244 := (= #32 #241)
#247 := (forall (vars (?v0 Int) (?v1 Int)) #244)
#345 := (iff #247 #344)
#342 := (iff #244 #341)
#339 := (= #241 #338)
#336 := (= #238 #335)
#333 := (iff #235 #332)
#330 := (iff #232 #329)
#331 := [rewrite]: #330
#311 := (iff #225 #327)
#312 := [rewrite]: #311
#334 := [monotonicity #312 #331]: #333
#337 := [monotonicity #334]: #336
#340 := [monotonicity #337]: #339
#343 := [monotonicity #340]: #342
#346 := [quant-intro #343]: #345
#307 := (~ #247 #247)
#320 := (~ #244 #244)
#321 := [refl]: #320
#308 := [nnf-pos #321]: #307
#44 := (- #20)
#43 := (- #31)
#45 := (div #43 #44)
#37 := (< 0::Int #20)
#39 := (< #31 0::Int)
#40 := (and #39 #37)
#36 := (< 0::Int #31)
#38 := (and #36 #37)
#41 := (or #38 #40)
#46 := (ite #41 #42 #45)
#47 := (ite #35 0::Int #46)
#48 := (= #32 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#250 := (iff #49 #247)
#184 := (and #37 #39)
#187 := (or #38 #184)
#199 := (ite #187 #42 #196)
#178 := (= 0::Int #20)
#175 := (= 0::Int #31)
#181 := (or #175 #178)
#202 := (ite #181 0::Int #199)
#205 := (= #32 #202)
#208 := (forall (vars (?v0 Int) (?v1 Int)) #205)
#248 := (iff #208 #247)
#245 := (iff #205 #244)
#242 := (= #202 #241)
#239 := (= #199 #238)
#236 := (iff #187 #235)
#233 := (iff #184 #232)
#230 := (iff #39 #229)
#231 := [rewrite]: #230
#223 := (iff #37 #222)
#224 := [rewrite]: #223
#234 := [monotonicity #224 #231]: #233
#226 := (iff #38 #225)
#219 := (iff #36 #218)
#220 := [rewrite]: #219
#227 := [monotonicity #220 #224]: #226
#237 := [monotonicity #227 #234]: #236
#240 := [monotonicity #237]: #239
#215 := (iff #181 #35)
#213 := (iff #178 #34)
#214 := [rewrite]: #213
#211 := (iff #175 #33)
#212 := [rewrite]: #211
#216 := [monotonicity #212 #214]: #215
#243 := [monotonicity #216 #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#209 := (iff #49 #208)
#206 := (iff #48 #205)
#203 := (= #47 #202)
#200 := (= #46 #199)
#197 := (= #45 #196)
#194 := (= #44 #193)
#195 := [rewrite]: #194
#191 := (= #43 #190)
#192 := [rewrite]: #191
#198 := [monotonicity #192 #195]: #197
#188 := (iff #41 #187)
#185 := (iff #40 #184)
#186 := [rewrite]: #185
#189 := [monotonicity #186]: #188
#201 := [monotonicity #189 #198]: #200
#182 := (iff #35 #181)
#179 := (iff #34 #178)
#180 := [rewrite]: #179
#176 := (iff #33 #175)
#177 := [rewrite]: #176
#183 := [monotonicity #177 #180]: #182
#204 := [monotonicity #183 #201]: #203
#207 := [monotonicity #204]: #206
#210 := [quant-intro #207]: #209
#251 := [trans #210 #249]: #250
#174 := [asserted]: #49
#252 := [mp #174 #251]: #247
#322 := [mp~ #252 #308]: #247
#347 := [mp #322 #346]: #344
#378 := [mp #347 #377]: #375
#893 := [mp #378 #892]: #888
#669 := (not #888)
#811 := (or #669 #826)
#538 := (* -1::Int 3::Int)
#470 := (div #539 #538)
#543 := (* -1::Int #470)
#540 := (+ #11 #543)
#544 := (= #540 0::Int)
#854 := (<= 3::Int 0::Int)
#528 := (or #854 #647)
#529 := (not #528)
#862 := (or #861 #854)
#863 := (not #862)
#864 := (or #863 #529)
#859 := (ite #864 #517 #544)
#855 := (= 3::Int 0::Int)
#520 := (or #515 #855)
#856 := (ite #520 #865 #859)
#812 := (or #669 #856)
#814 := (iff #812 #811)
#809 := (iff #811 #811)
#815 := [rewrite]: #809
#667 := (iff #856 #826)
#825 := (iff #859 #824)
#818 := (iff #544 #823)
#821 := (= #540 #832)
#831 := (= #543 #827)
#830 := (= #470 #829)
#550 := (= #538 -3::Int)
#551 := [rewrite]: #550
#545 := [monotonicity #551]: #830
#828 := [monotonicity #545]: #831
#822 := [monotonicity #828]: #821
#819 := [monotonicity #822]: #818
#838 := (iff #864 #833)
#836 := (or #491 #565)
#837 := (iff #836 #833)
#834 := [rewrite]: #837
#558 := (iff #864 #836)
#458 := (iff #529 #565)
#563 := (iff #528 #647)
#850 := (or false #647)
#840 := (iff #850 #647)
#562 := [rewrite]: #840
#853 := (iff #528 #850)
#844 := (iff #854 false)
#845 := [rewrite]: #844
#839 := [monotonicity #845]: #853
#564 := [trans #839 #562]: #563
#835 := [monotonicity #564]: #458
#492 := (iff #863 #491)
#849 := (iff #862 #861)
#846 := (or #861 false)
#848 := (iff #846 #861)
#486 := [rewrite]: #848
#847 := (iff #862 #846)
#842 := [monotonicity #845]: #847
#851 := [trans #842 #486]: #849
#852 := [monotonicity #851]: #492
#559 := [monotonicity #852 #835]: #558
#548 := [trans #559 #834]: #838
#820 := [monotonicity #548 #819]: #825
#507 := (iff #520 #515)
#500 := (or #515 false)
#505 := (iff #500 #515)
#506 := [rewrite]: #505
#841 := (iff #520 #500)
#516 := (iff #855 false)
#857 := [rewrite]: #516
#504 := [monotonicity #857]: #841
#843 := [trans #504 #506]: #507
#668 := [monotonicity #843 #820]: #667
#808 := [monotonicity #668]: #814
#816 := [trans #808 #815]: #814
#813 := [quant-inst #9 #10]: #812
#810 := [mp #813 #816]: #811
#728 := [unit-resolution #810 #893]: #826
#705 := (not #826)
#707 := (or #705 #706 #865)
#800 := [def-axiom]: #707
#714 := [unit-resolution #800 #728]: #713
#715 := [unit-resolution #714 #740]: #865
#788 := (not #865)
#608 := (or #788 #817)
#758 := [th-lemma arith triangle-eq]: #608
#674 := [unit-resolution #758 #715]: #817
#675 := (or #706 #647)
#676 := [th-lemma arith triangle-eq]: #675
#677 := [unit-resolution #676 #740]: #647
#678 := [th-lemma arith farkas -1 1 1 #677 #90 #674]: false
#679 := [lemma #678]: #706
#729 := (or #515 #824)
#797 := (or #705 #515 #824)
#801 := [def-axiom]: #797
#725 := [unit-resolution #801 #728]: #729
#651 := [unit-resolution #725 #679]: #824
decl f6 :: (-> Int S2)
#452 := (f6 #9)
#791 := (f4 #452)
#792 := (= #791 0::Int)
#696 := (not #792)
#697 := (iff #706 #696)
#687 := (iff #515 #792)
#683 := (iff #792 #515)
#693 := (= #791 #9)
#718 := (= #452 f5)
#537 := (= f5 #452)
#14 := (:var 0 S2)
#15 := (f4 #14)
#866 := (pattern #15)
#16 := (f6 #15)
#80 := (= #14 #16)
#867 := (forall (vars (?v0 S2)) (:pat #866) #80)
#93 := (forall (vars (?v0 S2)) #80)
#868 := (iff #93 #867)
#870 := (iff #867 #867)
#871 := [rewrite]: #870
#869 := [rewrite]: #868
#872 := [trans #869 #871]: #868
#315 := (~ #93 #93)
#313 := (~ #80 #80)
#314 := [refl]: #313
#316 := [nnf-pos #314]: #315
#17 := (= #16 #14)
#18 := (forall (vars (?v0 S2)) #17)
#94 := (iff #18 #93)
#91 := (iff #17 #80)
#92 := [rewrite]: #91
#95 := [quant-intro #92]: #94
#79 := [asserted]: #18
#98 := [mp #79 #95]: #93
#301 := [mp~ #98 #316]: #93
#873 := [mp #301 #872]: #867
#530 := (not #867)
#541 := (or #530 #537)
#542 := [quant-inst #8]: #541
#712 := [unit-resolution #542 #873]: #537
#686 := [symm #712]: #718
#652 := [monotonicity #686]: #693
#685 := [monotonicity #652]: #683
#694 := [symm #685]: #687
#698 := [monotonicity #694]: #697
#653 := [mp #679 #698]: #696
#789 := (or #647 #792)
#22 := (f6 #20)
#874 := (pattern #22)
#114 := (>= #20 0::Int)
#23 := (f4 #22)
#28 := (= #23 0::Int)
#163 := (or #28 #114)
#881 := (forall (vars (?v0 Int)) (:pat #874) #163)
#168 := (forall (vars (?v0 Int)) #163)
#884 := (iff #168 #881)
#882 := (iff #163 #163)
#883 := [refl]: #882
#885 := [quant-intro #883]: #884
#305 := (~ #168 #168)
#317 := (~ #163 #163)
#318 := [refl]: #317
#306 := [nnf-pos #318]: #305
#27 := (< #20 0::Int)
#29 := (implies #27 #28)
#30 := (forall (vars (?v0 Int)) #29)
#171 := (iff #30 #168)
#134 := (= 0::Int #23)
#140 := (not #27)
#141 := (or #140 #134)
#146 := (forall (vars (?v0 Int)) #141)
#169 := (iff #146 #168)
#166 := (iff #141 #163)
#160 := (or #114 #28)
#164 := (iff #160 #163)
#165 := [rewrite]: #164
#161 := (iff #141 #160)
#158 := (iff #134 #28)
#159 := [rewrite]: #158
#156 := (iff #140 #114)
#116 := (not #114)
#151 := (not #116)
#154 := (iff #151 #114)
#155 := [rewrite]: #154
#152 := (iff #140 #151)
#149 := (iff #27 #116)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#157 := [trans #153 #155]: #156
#162 := [monotonicity #157 #159]: #161
#167 := [trans #162 #165]: #166
#170 := [quant-intro #167]: #169
#147 := (iff #30 #146)
#144 := (iff #29 #141)
#137 := (implies #27 #134)
#142 := (iff #137 #141)
#143 := [rewrite]: #142
#138 := (iff #29 #137)
#135 := (iff #28 #134)
#136 := [rewrite]: #135
#139 := [monotonicity #136]: #138
#145 := [trans #139 #143]: #144
#148 := [quant-intro #145]: #147
#172 := [trans #148 #170]: #171
#133 := [asserted]: #30
#173 := [mp #133 #172]: #168
#319 := [mp~ #173 #306]: #168
#886 := [mp #319 #885]: #881
#784 := (not #881)
#785 := (or #784 #647 #792)
#793 := (or #792 #647)
#786 := (or #784 #793)
#776 := (iff #786 #785)
#787 := (or #784 #789)
#774 := (iff #787 #785)
#775 := [rewrite]: #774
#771 := (iff #786 #787)
#794 := (iff #793 #789)
#783 := [rewrite]: #794
#772 := [monotonicity #783]: #771
#777 := [trans #772 #775]: #776
#780 := [quant-inst #9]: #786
#773 := [mp #780 #777]: #785
#688 := [unit-resolution #773 #886]: #789
#654 := [unit-resolution #688 #653]: #647
#655 := (or #515 #491 #565)
#657 := [th-lemma arith triangle-eq]: #655
#658 := [unit-resolution #657 #654 #679]: #491
#802 := (or #833 #861)
#803 := [def-axiom]: #802
#659 := [unit-resolution #803 #658]: #833
#805 := (not #833)
#700 := (not #824)
#795 := (or #700 #805 #517)
#796 := [def-axiom]: #795
#660 := [unit-resolution #796 #659 #651]: #517
#699 := (not #517)
#692 := (or #699 #689)
#716 := [th-lemma arith triangle-eq]: #692
#661 := [unit-resolution #716 #660]: #689
#663 := (not #689)
#645 := (not #760)
#633 := (or #662 #565 #645 #663 #83)
#634 := [th-lemma arith assign-bounds 2 1 3 3]: #633
#635 := [unit-resolution #634 #654 #661 #90 #670]: #662
#726 := (not #750)
#722 := (or #726 #759)
#723 := [th-lemma arith triangle-eq]: #722
[unit-resolution #723 #635 #721]: false
unsat
f4adf2827c5540d070c2e622505c61938b50a2ed 636 0
#2 := false
decl f3 :: (-> Int S2)
decl f4 :: (-> Int Int Int)
#10 := 3::Int
decl f5 :: (-> S2 Int)
decl f6 :: S2
#8 := f6
#9 := (f5 f6)
#11 := (f4 #9 3::Int)
#12 := (f3 #11)
#83 := (= f6 #12)
#14 := 0::Int
#15 := (f3 0::Int)
#932 := (= #15 #12)
#930 := (= #12 #15)
#819 := (= #11 0::Int)
#822 := (= #9 0::Int)
#867 := (f5 #15)
#866 := (= #867 0::Int)
#24 := (:var 0 Int)
#26 := (f3 #24)
#890 := (pattern #26)
#130 := (>= #24 0::Int)
#131 := (not #130)
#27 := (f5 #26)
#112 := (= #24 #27)
#137 := (or #112 #131)
#891 := (forall (vars (?v0 Int)) (:pat #890) #137)
#142 := (forall (vars (?v0 Int)) #137)
#894 := (iff #142 #891)
#892 := (iff #137 #137)
#893 := [refl]: #892
#895 := [quant-intro #893]: #894
#319 := (~ #142 #142)
#318 := (~ #137 #137)
#315 := [refl]: #318
#320 := [nnf-pos #315]: #319
#28 := (= #27 #24)
#25 := (<= 0::Int #24)
#29 := (implies #25 #28)
#30 := (forall (vars (?v0 Int)) #29)
#145 := (iff #30 #142)
#119 := (not #25)
#120 := (or #119 #112)
#125 := (forall (vars (?v0 Int)) #120)
#143 := (iff #125 #142)
#140 := (iff #120 #137)
#134 := (or #131 #112)
#138 := (iff #134 #137)
#139 := [rewrite]: #138
#135 := (iff #120 #134)
#132 := (iff #119 #131)
#128 := (iff #25 #130)
#129 := [rewrite]: #128
#133 := [monotonicity #129]: #132
#136 := [monotonicity #133]: #135
#141 := [trans #136 #139]: #140
#144 := [quant-intro #141]: #143
#126 := (iff #30 #125)
#123 := (iff #29 #120)
#116 := (implies #25 #112)
#121 := (iff #116 #120)
#122 := [rewrite]: #121
#117 := (iff #29 #116)
#114 := (iff #28 #112)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#124 := [trans #118 #122]: #123
#127 := [quant-intro #124]: #126
#146 := [trans #127 #144]: #145
#111 := [asserted]: #30
#147 := [mp #111 #146]: #142
#316 := [mp~ #147 #320]: #142
#896 := [mp #316 #895]: #891
#880 := (not #891)
#565 := (or #880 #866)
#502 := (>= 0::Int 0::Int)
#865 := (not #502)
#507 := (= 0::Int #867)
#508 := (or #507 #865)
#566 := (or #880 #508)
#845 := (iff #566 #565)
#561 := (iff #565 #565)
#843 := [rewrite]: #561
#854 := (iff #508 #866)
#574 := (or #866 false)
#853 := (iff #574 #866)
#850 := [rewrite]: #853
#575 := (iff #508 #574)
#851 := (iff #865 false)
#1 := true
#578 := (not true)
#581 := (iff #578 false)
#474 := [rewrite]: #581
#579 := (iff #865 #578)
#855 := (iff #502 true)
#856 := [rewrite]: #855
#580 := [monotonicity #856]: #579
#852 := [trans #580 #474]: #851
#868 := (iff #507 #866)
#869 := [rewrite]: #868
#849 := [monotonicity #869 #852]: #575
#564 := [trans #849 #850]: #854
#846 := [monotonicity #564]: #845
#847 := [trans #846 #843]: #845
#567 := [quant-inst #14]: #566
#844 := [mp #567 #847]: #565
#923 := [unit-resolution #844 #896]: #866
#926 := (= #9 #867)
#16 := (= f6 #15)
#560 := (f3 #9)
#918 := (= #560 #15)
#473 := (= #15 #560)
#471 := (= 0::Int #9)
#544 := (f5 #12)
#626 := (= #544 #9)
#497 := (= #9 #544)
#97 := (not #16)
#570 := [hypothesis]: #97
#555 := (or #83 #16)
#98 := (iff #83 #97)
#13 := (= #12 f6)
#17 := (iff #13 #16)
#18 := (not #17)
#101 := (iff #18 #98)
#89 := (iff #16 #83)
#94 := (not #89)
#99 := (iff #94 #98)
#100 := [rewrite]: #99
#95 := (iff #18 #94)
#92 := (iff #17 #89)
#86 := (iff #83 #16)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #17 #86)
#84 := (iff #13 #83)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#96 := [monotonicity #93]: #95
#102 := [trans #96 #100]: #101
#82 := [asserted]: #18
#105 := [mp #82 #102]: #98
#468 := (not #98)
#553 := (or #83 #16 #468)
#554 := [def-axiom]: #553
#546 := [unit-resolution #554 #105]: #555
#562 := [unit-resolution #546 #570]: #83
#498 := [monotonicity #562]: #497
#477 := [symm #498]: #626
#482 := (= 0::Int #544)
#545 := (= #11 #544)
#874 := (>= #11 0::Int)
#557 := (not #83)
#628 := (or #874 #557)
#878 := (= #544 0::Int)
#630 := (iff #878 #822)
#623 := [hypothesis]: #83
#625 := [symm #623]: #13
#629 := [monotonicity #625]: #626
#634 := [monotonicity #629]: #630
#876 := (not #874)
#647 := [hypothesis]: #876
#532 := (or #874 #878)
#32 := (= #27 0::Int)
#178 := (or #32 #130)
#897 := (forall (vars (?v0 Int)) (:pat #890) #178)
#183 := (forall (vars (?v0 Int)) #178)
#900 := (iff #183 #897)
#898 := (iff #178 #178)
#899 := [refl]: #898
#901 := [quant-intro #899]: #900
#321 := (~ #183 #183)
#333 := (~ #178 #178)
#334 := [refl]: #333
#322 := [nnf-pos #334]: #321
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#186 := (iff #34 #183)
#149 := (= 0::Int #27)
#155 := (not #31)
#156 := (or #155 #149)
#161 := (forall (vars (?v0 Int)) #156)
#184 := (iff #161 #183)
#181 := (iff #156 #178)
#175 := (or #130 #32)
#179 := (iff #175 #178)
#180 := [rewrite]: #179
#176 := (iff #156 #175)
#173 := (iff #149 #32)
#174 := [rewrite]: #173
#171 := (iff #155 #130)
#166 := (not #131)
#169 := (iff #166 #130)
#170 := [rewrite]: #169
#167 := (iff #155 #166)
#164 := (iff #31 #131)
#165 := [rewrite]: #164
#168 := [monotonicity #165]: #167
#172 := [trans #168 #170]: #171
#177 := [monotonicity #172 #174]: #176
#182 := [trans #177 #180]: #181
#185 := [quant-intro #182]: #184
#162 := (iff #34 #161)
#159 := (iff #33 #156)
#152 := (implies #31 #149)
#157 := (iff #152 #156)
#158 := [rewrite]: #157
#153 := (iff #33 #152)
#150 := (iff #32 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#160 := [trans #154 #158]: #159
#163 := [quant-intro #160]: #162
#187 := [trans #163 #185]: #186
#148 := [asserted]: #34
#188 := [mp #148 #187]: #183
#335 := [mp~ #188 #322]: #183
#902 := [mp #335 #901]: #897
#857 := (not #897)
#520 := (or #857 #874 #878)
#879 := (or #878 #874)
#521 := (or #857 #879)
#863 := (iff #521 #520)
#523 := (or #857 #532)
#861 := (iff #523 #520)
#862 := [rewrite]: #861
#859 := (iff #521 #523)
#873 := (iff #879 #532)
#516 := [rewrite]: #873
#860 := [monotonicity #516]: #859
#858 := [trans #860 #862]: #863
#522 := [quant-inst #11]: #521
#864 := [mp #522 #858]: #520
#643 := [unit-resolution #864 #902]: #532
#633 := [unit-resolution #643 #647]: #878
#627 := [mp #633 #634]: #822
#740 := (not #822)
#746 := (not #819)
#645 := (or #746 #874)
#648 := [th-lemma arith triangle-eq]: #645
#636 := [unit-resolution #648 #647]: #746
#641 := (or #740 #819)
#788 := -3::Int
#205 := -1::Int
#842 := (* -1::Int #9)
#792 := (div #842 -3::Int)
#794 := (* -1::Int #792)
#783 := (+ #11 #794)
#782 := (= #783 0::Int)
#828 := (div #9 3::Int)
#829 := (* -1::Int #828)
#830 := (+ #11 #829)
#824 := (= #830 0::Int)
#833 := (<= #9 0::Int)
#723 := (not #833)
#825 := (>= #9 0::Int)
#808 := (not #825)
#801 := (or #808 #723)
#767 := (ite #801 #824 #782)
#771 := (ite #822 #819 #767)
#35 := (:var 1 Int)
#36 := (f4 #35 #24)
#903 := (pattern #36)
#209 := (* -1::Int #24)
#206 := (* -1::Int #35)
#212 := (div #206 #209)
#384 := (* -1::Int #212)
#385 := (+ #36 #384)
#386 := (= #385 0::Int)
#46 := (div #35 #24)
#381 := (* -1::Int #46)
#382 := (+ #36 #381)
#383 := (= #382 0::Int)
#244 := (>= #35 0::Int)
#237 := (<= #24 0::Int)
#344 := (or #237 #244)
#345 := (not #344)
#233 := (<= #35 0::Int)
#342 := (or #233 #237)
#343 := (not #342)
#348 := (or #343 #345)
#387 := (ite #348 #383 #386)
#380 := (= #36 0::Int)
#38 := (= #24 0::Int)
#37 := (= #35 0::Int)
#39 := (or #37 #38)
#388 := (ite #39 #380 #387)
#904 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #903) #388)
#391 := (forall (vars (?v0 Int) (?v1 Int)) #388)
#907 := (iff #391 #904)
#905 := (iff #388 #388)
#906 := [refl]: #905
#908 := [quant-intro #906]: #907
#351 := (ite #348 #46 #212)
#354 := (ite #39 0::Int #351)
#357 := (= #36 #354)
#360 := (forall (vars (?v0 Int) (?v1 Int)) #357)
#392 := (iff #360 #391)
#389 := (iff #357 #388)
#390 := [rewrite]: #389
#393 := [quant-intro #390]: #392
#245 := (not #244)
#238 := (not #237)
#248 := (and #238 #245)
#234 := (not #233)
#241 := (and #234 #238)
#251 := (or #241 #248)
#254 := (ite #251 #46 #212)
#257 := (ite #39 0::Int #254)
#260 := (= #36 #257)
#263 := (forall (vars (?v0 Int) (?v1 Int)) #260)
#361 := (iff #263 #360)
#358 := (iff #260 #357)
#355 := (= #257 #354)
#352 := (= #254 #351)
#349 := (iff #251 #348)
#346 := (iff #248 #345)
#347 := [rewrite]: #346
#327 := (iff #241 #343)
#328 := [rewrite]: #327
#350 := [monotonicity #328 #347]: #349
#353 := [monotonicity #350]: #352
#356 := [monotonicity #353]: #355
#359 := [monotonicity #356]: #358
#362 := [quant-intro #359]: #361
#323 := (~ #263 #263)
#336 := (~ #260 #260)
#337 := [refl]: #336
#324 := [nnf-pos #337]: #323
#48 := (- #24)
#47 := (- #35)
#49 := (div #47 #48)
#41 := (< 0::Int #24)
#43 := (< #35 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #35)
#42 := (and #40 #41)
#45 := (or #42 #44)
#50 := (ite #45 #46 #49)
#51 := (ite #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#266 := (iff #53 #263)
#199 := (and #41 #43)
#202 := (or #42 #199)
#215 := (ite #202 #46 #212)
#193 := (= 0::Int #24)
#190 := (= 0::Int #35)
#196 := (or #190 #193)
#218 := (ite #196 0::Int #215)
#221 := (= #36 #218)
#224 := (forall (vars (?v0 Int) (?v1 Int)) #221)
#264 := (iff #224 #263)
#261 := (iff #221 #260)
#258 := (= #218 #257)
#255 := (= #215 #254)
#252 := (iff #202 #251)
#249 := (iff #199 #248)
#246 := (iff #43 #245)
#247 := [rewrite]: #246
#239 := (iff #41 #238)
#240 := [rewrite]: #239
#250 := [monotonicity #240 #247]: #249
#242 := (iff #42 #241)
#235 := (iff #40 #234)
#236 := [rewrite]: #235
#243 := [monotonicity #236 #240]: #242
#253 := [monotonicity #243 #250]: #252
#256 := [monotonicity #253]: #255
#231 := (iff #196 #39)
#229 := (iff #193 #38)
#230 := [rewrite]: #229
#227 := (iff #190 #37)
#228 := [rewrite]: #227
#232 := [monotonicity #228 #230]: #231
#259 := [monotonicity #232 #256]: #258
#262 := [monotonicity #259]: #261
#265 := [quant-intro #262]: #264
#225 := (iff #53 #224)
#222 := (iff #52 #221)
#219 := (= #51 #218)
#216 := (= #50 #215)
#213 := (= #49 #212)
#210 := (= #48 #209)
#211 := [rewrite]: #210
#207 := (= #47 #206)
#208 := [rewrite]: #207
#214 := [monotonicity #208 #211]: #213
#203 := (iff #45 #202)
#200 := (iff #44 #199)
#201 := [rewrite]: #200
#204 := [monotonicity #201]: #203
#217 := [monotonicity #204 #214]: #216
#197 := (iff #39 #196)
#194 := (iff #38 #193)
#195 := [rewrite]: #194
#191 := (iff #37 #190)
#192 := [rewrite]: #191
#198 := [monotonicity #192 #195]: #197
#220 := [monotonicity #198 #217]: #219
#223 := [monotonicity #220]: #222
#226 := [quant-intro #223]: #225
#267 := [trans #226 #265]: #266
#189 := [asserted]: #53
#268 := [mp #189 #267]: #263
#338 := [mp~ #268 #324]: #263
#363 := [mp #338 #362]: #360
#394 := [mp #363 #393]: #391
#909 := [mp #394 #908]: #904
#774 := (not #904)
#775 := (or #774 #771)
#836 := (* -1::Int 3::Int)
#683 := (div #842 #836)
#684 := (* -1::Int #683)
#685 := (+ #11 #684)
#827 := (= #685 0::Int)
#831 := (<= 3::Int 0::Int)
#832 := (or #831 #825)
#826 := (not #832)
#662 := (or #833 #831)
#664 := (not #662)
#665 := (or #664 #826)
#818 := (ite #665 #824 #827)
#821 := (= 3::Int 0::Int)
#820 := (or #822 #821)
#823 := (ite #820 #819 #818)
#776 := (or #774 #823)
#778 := (iff #776 #775)
#779 := (iff #775 #775)
#757 := [rewrite]: #779
#772 := (iff #823 #771)
#769 := (iff #818 #767)
#786 := (iff #827 #782)
#784 := (= #685 #783)
#780 := (= #684 #794)
#793 := (= #683 #792)
#790 := (= #836 -3::Int)
#791 := [rewrite]: #790
#789 := [monotonicity #791]: #793
#781 := [monotonicity #789]: #780
#785 := [monotonicity #781]: #784
#766 := [monotonicity #785]: #786
#803 := (iff #665 #801)
#810 := (or #723 #808)
#802 := (iff #810 #801)
#796 := [rewrite]: #802
#799 := (iff #665 #810)
#809 := (iff #826 #808)
#797 := (iff #832 #825)
#817 := (or false #825)
#798 := (iff #817 #825)
#795 := [rewrite]: #798
#804 := (iff #832 #817)
#700 := (iff #831 false)
#715 := [rewrite]: #700
#806 := [monotonicity #715]: #804
#807 := [trans #806 #795]: #797
#805 := [monotonicity #807]: #809
#816 := (iff #664 #723)
#721 := (iff #662 #833)
#717 := (or #833 false)
#719 := (iff #717 #833)
#720 := [rewrite]: #719
#718 := (iff #662 #717)
#711 := [monotonicity #715]: #718
#722 := [trans #711 #720]: #721
#813 := [monotonicity #722]: #816
#800 := [monotonicity #813 #805]: #799
#787 := [trans #800 #796]: #803
#770 := [monotonicity #787 #766]: #769
#812 := (iff #820 #822)
#707 := (or #822 false)
#716 := (iff #707 #822)
#811 := [rewrite]: #716
#666 := (iff #820 #707)
#705 := (iff #821 false)
#706 := [rewrite]: #705
#814 := [monotonicity #706]: #666
#815 := [trans #814 #811]: #812
#773 := [monotonicity #815 #770]: #772
#768 := [monotonicity #773]: #778
#758 := [trans #768 #757]: #778
#777 := [quant-inst #9 #10]: #776
#760 := [mp #777 #758]: #775
#639 := [unit-resolution #760 #909]: #771
#739 := (not #771)
#743 := (or #739 #740 #819)
#744 := [def-axiom]: #743
#642 := [unit-resolution #744 #639]: #641
#638 := [unit-resolution #642 #636]: #740
#635 := [unit-resolution #638 #627]: false
#631 := [lemma #635]: #628
#571 := [unit-resolution #631 #562]: #874
#877 := (or #545 #876)
#875 := (or #880 #545 #876)
#881 := (or #880 #877)
#531 := (iff #881 #875)
#536 := [rewrite]: #531
#871 := [quant-inst #11]: #881
#872 := [mp #871 #536]: #875
#572 := [unit-resolution #872 #896]: #877
#563 := [unit-resolution #572 #571]: #545
#480 := (= 0::Int #11)
#637 := (* -1::Int #11)
#640 := (+ #9 #637)
#646 := (>= #640 0::Int)
#658 := (= #9 #11)
#500 := (= #544 #11)
#496 := [symm #563]: #500
#501 := [trans #498 #496]: #658
#483 := (not #658)
#487 := (or #483 #646)
#488 := [th-lemma arith triangle-eq]: #487
#491 := [unit-resolution #488 #501]: #646
#492 := (not #646)
#493 := (or #825 #876 #492)
#485 := [th-lemma arith assign-bounds 1 1]: #493
#494 := [unit-resolution #485 #571 #491]: #825
#644 := (<= #640 0::Int)
#478 := (or #483 #644)
#475 := [th-lemma arith triangle-eq]: #478
#476 := [unit-resolution #475 #501]: #644
#512 := (not #644)
#489 := (or #819 #512 #808 #876)
#613 := (* -3::Int #828)
#748 := (mod #9 3::Int)
#612 := (* -1::Int #748)
#614 := (+ #612 #613)
#615 := (+ #9 #614)
#611 := (= #615 0::Int)
#80 := [true-axiom]: true
#573 := (or false #611)
#540 := [th-lemma arith]: #573
#542 := [unit-resolution #540 #80]: #611
#597 := (>= #615 0::Int)
#513 := (not #597)
#598 := (>= #748 0::Int)
#543 := (or false #598)
#534 := [th-lemma arith]: #543
#547 := [unit-resolution #534 #80]: #598
#761 := (<= #11 0::Int)
#550 := (not #761)
#548 := [hypothesis]: #874
#549 := [hypothesis]: #746
#551 := (or #819 #550 #876)
#541 := [th-lemma arith triangle-eq]: #551
#552 := [unit-resolution #541 #549 #548]: #550
#535 := [hypothesis]: #644
#749 := (<= #830 0::Int)
#537 := [unit-resolution #642 #549]: #740
#538 := (or #822 #767)
#745 := (or #739 #822 #767)
#741 := [def-axiom]: #745
#517 := [unit-resolution #741 #639]: #538
#519 := [unit-resolution #517 #537]: #767
#524 := [hypothesis]: #825
#525 := (or #822 #723 #808)
#526 := [th-lemma arith triangle-eq]: #525
#527 := [unit-resolution #526 #537 #524]: #723
#764 := (or #801 #833)
#759 := [def-axiom]: #764
#528 := [unit-resolution #759 #527]: #801
#765 := (not #801)
#750 := (not #767)
#756 := (or #750 #765 #824)
#729 := [def-axiom]: #756
#529 := [unit-resolution #729 #528 #519]: #824
#624 := (not #824)
#518 := (or #624 #749)
#530 := [th-lemma arith triangle-eq]: #518
#511 := [unit-resolution #530 #529]: #749
#515 := (not #749)
#514 := (not #598)
#503 := (or #513 #514 #761 #512 #515)
#505 := [th-lemma arith assign-bounds 1 2 1 3]: #503
#506 := [unit-resolution #505 #511 #535 #552 #547]: #513
#509 := (not #611)
#504 := (or #509 #597)
#510 := [th-lemma arith triangle-eq]: #504
#484 := [unit-resolution #510 #506 #542]: false
#490 := [lemma #484]: #489
#479 := [unit-resolution #490 #476 #494 #571]: #819
#481 := [symm #479]: #480
#469 := [trans #481 #563]: #482
#472 := [trans #469 #477]: #471
#917 := [monotonicity #472]: #473
#919 := [symm #917]: #918
#539 := (= f6 #560)
#19 := (:var 0 S2)
#20 := (f5 #19)
#882 := (pattern #20)
#21 := (f3 #20)
#104 := (= #19 #21)
#883 := (forall (vars (?v0 S2)) (:pat #882) #104)
#108 := (forall (vars (?v0 S2)) #104)
#884 := (iff #108 #883)
#886 := (iff #883 #883)
#887 := [rewrite]: #886
#885 := [rewrite]: #884
#888 := [trans #885 #887]: #884
#331 := (~ #108 #108)
#329 := (~ #104 #104)
#330 := [refl]: #329
#332 := [nnf-pos #330]: #331
#22 := (= #21 #19)
#23 := (forall (vars (?v0 S2)) #22)
#109 := (iff #23 #108)
#106 := (iff #22 #104)
#107 := [rewrite]: #106
#110 := [quant-intro #107]: #109
#103 := [asserted]: #23
#113 := [mp #103 #110]: #108
#317 := [mp~ #113 #332]: #108
#889 := [mp #317 #888]: #883
#533 := (not #883)
#663 := (or #533 #539)
#870 := [quant-inst #8]: #663
#470 := [unit-resolution #870 #889]: #539
#920 := [trans #470 #919]: #16
#921 := [unit-resolution #570 #920]: false
#922 := [lemma #921]: #16
#927 := [monotonicity #922]: #926
#928 := [trans #927 #923]: #822
#929 := [unit-resolution #642 #928]: #819
#931 := [monotonicity #929]: #930
#933 := [symm #931]: #932
#934 := [trans #922 #933]: #83
#559 := (or #557 #97)
#558 := (or #557 #97 #468)
#486 := [def-axiom]: #558
#556 := [unit-resolution #486 #105]: #559
#495 := [unit-resolution #556 #922]: #557
[unit-resolution #495 #934]: false
unsat
2e39fe3f9575e15a240203df63c5032154a66535 279 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#11 := (f3 0::Int)
decl f4 :: (-> Int Int Int)
#9 := (f4 0::Int 0::Int)
#10 := (f3 #9)
#12 := (= #10 #11)
#804 := (= #9 0::Int)
#19 := (:var 0 Int)
#30 := (:var 1 Int)
#49 := (f4 #30 #19)
#884 := (pattern #49)
#179 := -1::Int
#183 := (* -1::Int #19)
#180 := (* -1::Int #30)
#244 := (mod #180 #183)
#374 := (+ #49 #244)
#375 := (= #374 0::Int)
#50 := (mod #30 #19)
#371 := (* -1::Int #50)
#372 := (+ #49 #371)
#373 := (= #372 0::Int)
#218 := (>= #30 0::Int)
#211 := (<= #19 0::Int)
#318 := (or #211 #218)
#319 := (not #318)
#207 := (<= #30 0::Int)
#316 := (or #207 #211)
#317 := (not #316)
#322 := (or #317 #319)
#376 := (ite #322 #373 #375)
#370 := (= #49 0::Int)
#32 := (= #30 0::Int)
#377 := (ite #32 #370 #376)
#369 := (= #30 #49)
#33 := (= #19 0::Int)
#378 := (ite #33 #369 #377)
#885 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #884) #378)
#381 := (forall (vars (?v0 Int) (?v1 Int)) #378)
#888 := (iff #381 #885)
#886 := (iff #378 #378)
#887 := [refl]: #886
#889 := [quant-intro #887]: #888
#250 := (* -1::Int #244)
#338 := (ite #322 #50 #250)
#341 := (ite #32 0::Int #338)
#344 := (ite #33 #30 #341)
#347 := (= #49 #344)
#350 := (forall (vars (?v0 Int) (?v1 Int)) #347)
#382 := (iff #350 #381)
#379 := (iff #347 #378)
#380 := [rewrite]: #379
#383 := [quant-intro #380]: #382
#219 := (not #218)
#212 := (not #211)
#222 := (and #212 #219)
#208 := (not #207)
#215 := (and #208 #212)
#225 := (or #215 #222)
#270 := (ite #225 #50 #250)
#273 := (ite #32 0::Int #270)
#276 := (ite #33 #30 #273)
#279 := (= #49 #276)
#282 := (forall (vars (?v0 Int) (?v1 Int)) #279)
#351 := (iff #282 #350)
#348 := (iff #279 #347)
#345 := (= #276 #344)
#342 := (= #273 #341)
#339 := (= #270 #338)
#323 := (iff #225 #322)
#320 := (iff #222 #319)
#321 := [rewrite]: #320
#301 := (iff #215 #317)
#302 := [rewrite]: #301
#324 := [monotonicity #302 #321]: #323
#340 := [monotonicity #324]: #339
#343 := [monotonicity #340]: #342
#346 := [monotonicity #343]: #345
#349 := [monotonicity #346]: #348
#352 := [quant-intro #349]: #351
#299 := (~ #282 #282)
#313 := (~ #279 #279)
#314 := [refl]: #313
#300 := [nnf-pos #314]: #299
#43 := (- #19)
#42 := (- #30)
#51 := (mod #42 #43)
#52 := (- #51)
#36 := (< 0::Int #19)
#38 := (< #30 0::Int)
#39 := (and #38 #36)
#35 := (< 0::Int #30)
#37 := (and #35 #36)
#40 := (or #37 #39)
#53 := (ite #40 #50 #52)
#54 := (ite #32 0::Int #53)
#55 := (ite #33 #30 #54)
#56 := (= #49 #55)
#57 := (forall (vars (?v0 Int) (?v1 Int)) #56)
#285 := (iff #57 #282)
#173 := (and #36 #38)
#176 := (or #37 #173)
#255 := (ite #176 #50 #250)
#164 := (= 0::Int #30)
#258 := (ite #164 0::Int #255)
#167 := (= 0::Int #19)
#261 := (ite #167 #30 #258)
#264 := (= #49 #261)
#267 := (forall (vars (?v0 Int) (?v1 Int)) #264)
#283 := (iff #267 #282)
#280 := (iff #264 #279)
#277 := (= #261 #276)
#274 := (= #258 #273)
#271 := (= #255 #270)
#226 := (iff #176 #225)
#223 := (iff #173 #222)
#220 := (iff #38 #219)
#221 := [rewrite]: #220
#213 := (iff #36 #212)
#214 := [rewrite]: #213
#224 := [monotonicity #214 #221]: #223
#216 := (iff #37 #215)
#209 := (iff #35 #208)
#210 := [rewrite]: #209
#217 := [monotonicity #210 #214]: #216
#227 := [monotonicity #217 #224]: #226
#272 := [monotonicity #227]: #271
#201 := (iff #164 #32)
#202 := [rewrite]: #201
#275 := [monotonicity #202 #272]: #274
#203 := (iff #167 #33)
#204 := [rewrite]: #203
#278 := [monotonicity #204 #275]: #277
#281 := [monotonicity #278]: #280
#284 := [quant-intro #281]: #283
#268 := (iff #57 #267)
#265 := (iff #56 #264)
#262 := (= #55 #261)
#259 := (= #54 #258)
#256 := (= #53 #255)
#253 := (= #52 #250)
#247 := (- #244)
#251 := (= #247 #250)
#252 := [rewrite]: #251
#248 := (= #52 #247)
#245 := (= #51 #244)
#184 := (= #43 #183)
#185 := [rewrite]: #184
#181 := (= #42 #180)
#182 := [rewrite]: #181
#246 := [monotonicity #182 #185]: #245
#249 := [monotonicity #246]: #248
#254 := [trans #249 #252]: #253
#177 := (iff #40 #176)
#174 := (iff #39 #173)
#175 := [rewrite]: #174
#178 := [monotonicity #175]: #177
#257 := [monotonicity #178 #254]: #256
#165 := (iff #32 #164)
#166 := [rewrite]: #165
#260 := [monotonicity #166 #257]: #259
#168 := (iff #33 #167)
#169 := [rewrite]: #168
#263 := [monotonicity #169 #260]: #262
#266 := [monotonicity #263]: #265
#269 := [quant-intro #266]: #268
#286 := [trans #269 #284]: #285
#243 := [asserted]: #57
#287 := [mp #243 #286]: #282
#315 := [mp~ #287 #300]: #282
#353 := [mp #315 #352]: #350
#384 := [mp #353 #383]: #381
#890 := [mp #384 #889]: #885
#760 := (not #885)
#740 := (or #760 #804)
#811 := (* -1::Int 0::Int)
#812 := (mod #811 #811)
#813 := (+ #9 #812)
#808 := (= #813 0::Int)
#809 := (mod 0::Int 0::Int)
#814 := (* -1::Int #809)
#815 := (+ #9 #814)
#810 := (= #815 0::Int)
#833 := (>= 0::Int 0::Int)
#816 := (<= 0::Int 0::Int)
#657 := (or #816 #833)
#658 := (not #657)
#659 := (or #816 #816)
#801 := (not #659)
#802 := (or #801 #658)
#803 := (ite #802 #810 #808)
#798 := (= 0::Int 0::Int)
#799 := (ite #798 #804 #803)
#805 := (= 0::Int #9)
#806 := (ite #798 #805 #799)
#741 := (or #760 #806)
#744 := (iff #741 #740)
#746 := (iff #740 #740)
#747 := [rewrite]: #746
#759 := (iff #806 #804)
#1 := true
#768 := (ite true #804 #804)
#757 := (iff #768 #804)
#758 := [rewrite]: #757
#754 := (iff #806 #768)
#767 := (iff #799 #804)
#769 := (+ #9 #809)
#782 := (= #769 0::Int)
#761 := (ite true #804 #782)
#765 := (iff #761 #804)
#766 := [rewrite]: #765
#762 := (iff #799 #761)
#770 := (iff #803 #782)
#784 := (ite false #810 #782)
#775 := (iff #784 #782)
#776 := [rewrite]: #775
#773 := (iff #803 #784)
#783 := (iff #808 #782)
#771 := (= #813 #769)
#780 := (= #812 #809)
#791 := (= #811 0::Int)
#778 := [rewrite]: #791
#772 := [monotonicity #778 #778]: #780
#781 := [monotonicity #772]: #771
#779 := [monotonicity #781]: #783
#790 := (iff #802 false)
#693 := (or false false)
#696 := (iff #693 false)
#697 := [rewrite]: #696
#694 := (iff #802 #693)
#692 := (iff #658 false)
#481 := (not true)
#840 := (iff #481 false)
#843 := [rewrite]: #840
#689 := (iff #658 #481)
#789 := (iff #657 true)
#793 := (or true true)
#794 := (iff #793 true)
#797 := [rewrite]: #794
#785 := (iff #657 #793)
#839 := (iff #833 true)
#841 := [rewrite]: #839
#639 := (iff #816 true)
#792 := [rewrite]: #639
#786 := [monotonicity #792 #841]: #785
#674 := [trans #786 #797]: #789
#691 := [monotonicity #674]: #689
#685 := [trans #691 #843]: #692
#788 := (iff #801 false)
#681 := (iff #801 #481)
#679 := (iff #659 true)
#795 := (iff #659 #793)
#796 := [monotonicity #792 #792]: #795
#680 := [trans #796 #797]: #679
#640 := [monotonicity #680]: #681
#690 := [trans #640 #843]: #788
#695 := [monotonicity #690 #685]: #694
#787 := [trans #695 #697]: #790
#774 := [monotonicity #787 #779]: #773
#777 := [trans #774 #776]: #770
#800 := (iff #798 true)
#807 := [rewrite]: #800
#764 := [monotonicity #807 #777]: #762
#763 := [trans #764 #766]: #767
#636 := (iff #805 #804)
#638 := [rewrite]: #636
#755 := [monotonicity #807 #638 #763]: #754
#756 := [trans #755 #758]: #759
#745 := [monotonicity #756]: #744
#748 := [trans #745 #747]: #744
#743 := [quant-inst #8 #8]: #741
#749 := [mp #743 #748]: #740
#751 := [unit-resolution #749 #890]: #804
#752 := [monotonicity #751]: #12
#13 := (not #12)
#77 := [asserted]: #13
[unit-resolution #77 #752]: false
unsat
eaf623ea6157604982b5732ebda9f473145c7bd3 326 0
#2 := false
decl f3 :: (-> Int S2)
decl f4 :: (-> Int Int Int)
#10 := 0::Int
decl f5 :: (-> S2 Int)
decl f6 :: S2
#8 := f6
#9 := (f5 f6)
#11 := (f4 #9 0::Int)
#12 := (f3 #11)
#79 := (= f6 #12)
#450 := (f3 #9)
#785 := (= #450 #12)
#784 := (= #12 #450)
#781 := (= #11 #9)
#831 := (= #9 #11)
#20 := (:var 0 Int)
#31 := (:var 1 Int)
#50 := (f4 #31 #20)
#892 := (pattern #50)
#187 := -1::Int
#191 := (* -1::Int #20)
#188 := (* -1::Int #31)
#252 := (mod #188 #191)
#382 := (+ #50 #252)
#383 := (= #382 0::Int)
#51 := (mod #31 #20)
#379 := (* -1::Int #51)
#380 := (+ #50 #379)
#381 := (= #380 0::Int)
#226 := (>= #31 0::Int)
#219 := (<= #20 0::Int)
#326 := (or #219 #226)
#327 := (not #326)
#215 := (<= #31 0::Int)
#324 := (or #215 #219)
#325 := (not #324)
#330 := (or #325 #327)
#384 := (ite #330 #381 #383)
#378 := (= #50 0::Int)
#33 := (= #31 0::Int)
#385 := (ite #33 #378 #384)
#377 := (= #31 #50)
#34 := (= #20 0::Int)
#386 := (ite #34 #377 #385)
#893 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #892) #386)
#389 := (forall (vars (?v0 Int) (?v1 Int)) #386)
#896 := (iff #389 #893)
#894 := (iff #386 #386)
#895 := [refl]: #894
#897 := [quant-intro #895]: #896
#258 := (* -1::Int #252)
#346 := (ite #330 #51 #258)
#349 := (ite #33 0::Int #346)
#352 := (ite #34 #31 #349)
#355 := (= #50 #352)
#358 := (forall (vars (?v0 Int) (?v1 Int)) #355)
#390 := (iff #358 #389)
#387 := (iff #355 #386)
#388 := [rewrite]: #387
#391 := [quant-intro #388]: #390
#227 := (not #226)
#220 := (not #219)
#230 := (and #220 #227)
#216 := (not #215)
#223 := (and #216 #220)
#233 := (or #223 #230)
#278 := (ite #233 #51 #258)
#281 := (ite #33 0::Int #278)
#284 := (ite #34 #31 #281)
#287 := (= #50 #284)
#290 := (forall (vars (?v0 Int) (?v1 Int)) #287)
#359 := (iff #290 #358)
#356 := (iff #287 #355)
#353 := (= #284 #352)
#350 := (= #281 #349)
#347 := (= #278 #346)
#331 := (iff #233 #330)
#328 := (iff #230 #327)
#329 := [rewrite]: #328
#309 := (iff #223 #325)
#310 := [rewrite]: #309
#332 := [monotonicity #310 #329]: #331
#348 := [monotonicity #332]: #347
#351 := [monotonicity #348]: #350
#354 := [monotonicity #351]: #353
#357 := [monotonicity #354]: #356
#360 := [quant-intro #357]: #359
#307 := (~ #290 #290)
#321 := (~ #287 #287)
#322 := [refl]: #321
#308 := [nnf-pos #322]: #307
#44 := (- #20)
#43 := (- #31)
#52 := (mod #43 #44)
#53 := (- #52)
#37 := (< 0::Int #20)
#39 := (< #31 0::Int)
#40 := (and #39 #37)
#36 := (< 0::Int #31)
#38 := (and #36 #37)
#41 := (or #38 #40)
#54 := (ite #41 #51 #53)
#55 := (ite #33 0::Int #54)
#56 := (ite #34 #31 #55)
#57 := (= #50 #56)
#58 := (forall (vars (?v0 Int) (?v1 Int)) #57)
#293 := (iff #58 #290)
#181 := (and #37 #39)
#184 := (or #38 #181)
#263 := (ite #184 #51 #258)
#172 := (= 0::Int #31)
#266 := (ite #172 0::Int #263)
#175 := (= 0::Int #20)
#269 := (ite #175 #31 #266)
#272 := (= #50 #269)
#275 := (forall (vars (?v0 Int) (?v1 Int)) #272)
#291 := (iff #275 #290)
#288 := (iff #272 #287)
#285 := (= #269 #284)
#282 := (= #266 #281)
#279 := (= #263 #278)
#234 := (iff #184 #233)
#231 := (iff #181 #230)
#228 := (iff #39 #227)
#229 := [rewrite]: #228
#221 := (iff #37 #220)
#222 := [rewrite]: #221
#232 := [monotonicity #222 #229]: #231
#224 := (iff #38 #223)
#217 := (iff #36 #216)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#235 := [monotonicity #225 #232]: #234
#280 := [monotonicity #235]: #279
#209 := (iff #172 #33)
#210 := [rewrite]: #209
#283 := [monotonicity #210 #280]: #282
#211 := (iff #175 #34)
#212 := [rewrite]: #211
#286 := [monotonicity #212 #283]: #285
#289 := [monotonicity #286]: #288
#292 := [quant-intro #289]: #291
#276 := (iff #58 #275)
#273 := (iff #57 #272)
#270 := (= #56 #269)
#267 := (= #55 #266)
#264 := (= #54 #263)
#261 := (= #53 #258)
#255 := (- #252)
#259 := (= #255 #258)
#260 := [rewrite]: #259
#256 := (= #53 #255)
#253 := (= #52 #252)
#192 := (= #44 #191)
#193 := [rewrite]: #192
#189 := (= #43 #188)
#190 := [rewrite]: #189
#254 := [monotonicity #190 #193]: #253
#257 := [monotonicity #254]: #256
#262 := [trans #257 #260]: #261
#185 := (iff #41 #184)
#182 := (iff #40 #181)
#183 := [rewrite]: #182
#186 := [monotonicity #183]: #185
#265 := [monotonicity #186 #262]: #264
#173 := (iff #33 #172)
#174 := [rewrite]: #173
#268 := [monotonicity #174 #265]: #267
#176 := (iff #34 #175)
#177 := [rewrite]: #176
#271 := [monotonicity #177 #268]: #270
#274 := [monotonicity #271]: #273
#277 := [quant-intro #274]: #276
#294 := [trans #277 #292]: #293
#251 := [asserted]: #58
#295 := [mp #251 #294]: #290
#323 := [mp~ #295 #308]: #290
#361 := [mp #323 #360]: #358
#392 := [mp #361 #391]: #389
#898 := [mp #392 #897]: #893
#799 := (not #893)
#786 := (or #799 #831)
#840 := (* -1::Int 0::Int)
#846 := (* -1::Int #9)
#484 := (mod #846 #840)
#847 := (+ #11 #484)
#849 := (= #847 0::Int)
#489 := (mod #9 0::Int)
#490 := (* -1::Int #489)
#850 := (+ #11 #490)
#848 := (= #850 0::Int)
#851 := (>= #9 0::Int)
#837 := (<= 0::Int 0::Int)
#838 := (or #837 #851)
#560 := (not #838)
#561 := (<= #9 0::Int)
#562 := (or #561 #837)
#563 := (not #562)
#456 := (or #563 #560)
#833 := (ite #456 #848 #849)
#834 := (= #11 0::Int)
#556 := (= #9 0::Int)
#557 := (ite #556 #834 #833)
#835 := (= 0::Int 0::Int)
#832 := (ite #835 #831 #557)
#788 := (or #799 #832)
#777 := (iff #788 #786)
#789 := (iff #786 #786)
#790 := [rewrite]: #789
#798 := (iff #832 #831)
#801 := (mod #846 0::Int)
#802 := (+ #11 #801)
#688 := (= #802 0::Int)
#699 := (ite #556 #834 #688)
#1 := true
#701 := (ite true #831 #699)
#704 := (iff #701 #831)
#705 := [rewrite]: #704
#702 := (iff #832 #701)
#700 := (iff #557 #699)
#682 := (iff #833 #688)
#796 := (ite false #848 #688)
#794 := (iff #796 #688)
#797 := [rewrite]: #794
#698 := (iff #833 #796)
#689 := (iff #849 #688)
#805 := (= #847 #802)
#803 := (= #484 #801)
#647 := (= #840 0::Int)
#800 := [rewrite]: #647
#804 := [monotonicity #800]: #803
#687 := [monotonicity #804]: #805
#648 := [monotonicity #687]: #689
#644 := (iff #456 false)
#807 := (or false false)
#808 := (iff #807 false)
#815 := [rewrite]: #808
#813 := (iff #456 #807)
#812 := (iff #560 false)
#830 := (not true)
#821 := (iff #830 false)
#816 := [rewrite]: #821
#810 := (iff #560 #830)
#667 := (iff #838 true)
#823 := (or true #851)
#665 := (iff #823 true)
#666 := [rewrite]: #665
#818 := (iff #838 #823)
#547 := (iff #837 true)
#548 := [rewrite]: #547
#824 := [monotonicity #548]: #818
#809 := [trans #824 #666]: #667
#811 := [monotonicity #809]: #810
#806 := [trans #811 #816]: #812
#817 := (iff #563 false)
#819 := (iff #563 #830)
#829 := (iff #562 true)
#549 := (or #561 true)
#543 := (iff #549 true)
#825 := [rewrite]: #543
#827 := (iff #562 #549)
#828 := [monotonicity #548]: #827
#826 := [trans #828 #825]: #829
#820 := [monotonicity #826]: #819
#822 := [trans #820 #816]: #817
#814 := [monotonicity #822 #806]: #813
#646 := [trans #814 #815]: #644
#793 := [monotonicity #646 #648]: #698
#697 := [trans #793 #797]: #682
#693 := [monotonicity #697]: #700
#836 := (iff #835 true)
#546 := [rewrite]: #836
#703 := [monotonicity #546 #693]: #702
#795 := [trans #703 #705]: #798
#779 := [monotonicity #795]: #777
#791 := [trans #779 #790]: #777
#780 := [quant-inst #9 #10]: #788
#787 := [mp #780 #791]: #786
#792 := [unit-resolution #787 #898]: #831
#782 := [symm #792]: #781
#778 := [monotonicity #782]: #784
#769 := [symm #778]: #785
#535 := (= f6 #450)
#15 := (:var 0 S2)
#16 := (f5 #15)
#864 := (pattern #16)
#17 := (f3 #16)
#86 := (= #15 #17)
#865 := (forall (vars (?v0 S2)) (:pat #864) #86)
#90 := (forall (vars (?v0 S2)) #86)
#866 := (iff #90 #865)
#868 := (iff #865 #865)
#869 := [rewrite]: #868
#867 := [rewrite]: #866
#870 := [trans #867 #869]: #866
#313 := (~ #90 #90)
#311 := (~ #86 #86)
#312 := [refl]: #311
#314 := [nnf-pos #312]: #313
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#91 := (iff #19 #90)
#88 := (iff #18 #86)
#89 := [rewrite]: #88
#92 := [quant-intro #89]: #91
#85 := [asserted]: #19
#95 := [mp #85 #92]: #90
#299 := [mp~ #95 #314]: #90
#871 := [mp #299 #870]: #865
#528 := (not #865)
#539 := (or #528 #535)
#540 := [quant-inst #8]: #539
#783 := [unit-resolution #540 #871]: #535
#770 := [trans #783 #769]: #79
#82 := (not #79)
#13 := (= #12 f6)
#14 := (not #13)
#83 := (iff #14 #82)
#80 := (iff #13 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#78 := [asserted]: #14
#87 := [mp #78 #84]: #82
[unit-resolution #87 #770]: false
unsat
acd2d715307b02a82f8d3d25d1935b122a84c3b3 309 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#12 := (f3 0::Int)
decl f4 :: (-> Int Int Int)
#9 := 1::Int
#10 := (f4 0::Int 1::Int)
#11 := (f3 #10)
#13 := (= #11 #12)
#805 := (= #10 0::Int)
#20 := (:var 0 Int)
#31 := (:var 1 Int)
#50 := (f4 #31 #20)
#884 := (pattern #50)
#180 := -1::Int
#184 := (* -1::Int #20)
#181 := (* -1::Int #31)
#245 := (mod #181 #184)
#375 := (+ #50 #245)
#376 := (= #375 0::Int)
#51 := (mod #31 #20)
#372 := (* -1::Int #51)
#373 := (+ #50 #372)
#374 := (= #373 0::Int)
#219 := (>= #31 0::Int)
#212 := (<= #20 0::Int)
#319 := (or #212 #219)
#320 := (not #319)
#208 := (<= #31 0::Int)
#317 := (or #208 #212)
#318 := (not #317)
#323 := (or #318 #320)
#377 := (ite #323 #374 #376)
#371 := (= #50 0::Int)
#33 := (= #31 0::Int)
#378 := (ite #33 #371 #377)
#370 := (= #31 #50)
#34 := (= #20 0::Int)
#379 := (ite #34 #370 #378)
#885 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #884) #379)
#382 := (forall (vars (?v0 Int) (?v1 Int)) #379)
#888 := (iff #382 #885)
#886 := (iff #379 #379)
#887 := [refl]: #886
#889 := [quant-intro #887]: #888
#251 := (* -1::Int #245)
#339 := (ite #323 #51 #251)
#342 := (ite #33 0::Int #339)
#345 := (ite #34 #31 #342)
#348 := (= #50 #345)
#351 := (forall (vars (?v0 Int) (?v1 Int)) #348)
#383 := (iff #351 #382)
#380 := (iff #348 #379)
#381 := [rewrite]: #380
#384 := [quant-intro #381]: #383
#220 := (not #219)
#213 := (not #212)
#223 := (and #213 #220)
#209 := (not #208)
#216 := (and #209 #213)
#226 := (or #216 #223)
#271 := (ite #226 #51 #251)
#274 := (ite #33 0::Int #271)
#277 := (ite #34 #31 #274)
#280 := (= #50 #277)
#283 := (forall (vars (?v0 Int) (?v1 Int)) #280)
#352 := (iff #283 #351)
#349 := (iff #280 #348)
#346 := (= #277 #345)
#343 := (= #274 #342)
#340 := (= #271 #339)
#324 := (iff #226 #323)
#321 := (iff #223 #320)
#322 := [rewrite]: #321
#302 := (iff #216 #318)
#303 := [rewrite]: #302
#325 := [monotonicity #303 #322]: #324
#341 := [monotonicity #325]: #340
#344 := [monotonicity #341]: #343
#347 := [monotonicity #344]: #346
#350 := [monotonicity #347]: #349
#353 := [quant-intro #350]: #352
#300 := (~ #283 #283)
#314 := (~ #280 #280)
#315 := [refl]: #314
#301 := [nnf-pos #315]: #300
#44 := (- #20)
#43 := (- #31)
#52 := (mod #43 #44)
#53 := (- #52)
#37 := (< 0::Int #20)
#39 := (< #31 0::Int)
#40 := (and #39 #37)
#36 := (< 0::Int #31)
#38 := (and #36 #37)
#41 := (or #38 #40)
#54 := (ite #41 #51 #53)
#55 := (ite #33 0::Int #54)
#56 := (ite #34 #31 #55)
#57 := (= #50 #56)
#58 := (forall (vars (?v0 Int) (?v1 Int)) #57)
#286 := (iff #58 #283)
#174 := (and #37 #39)
#177 := (or #38 #174)
#256 := (ite #177 #51 #251)
#165 := (= 0::Int #31)
#259 := (ite #165 0::Int #256)
#168 := (= 0::Int #20)
#262 := (ite #168 #31 #259)
#265 := (= #50 #262)
#268 := (forall (vars (?v0 Int) (?v1 Int)) #265)
#284 := (iff #268 #283)
#281 := (iff #265 #280)
#278 := (= #262 #277)
#275 := (= #259 #274)
#272 := (= #256 #271)
#227 := (iff #177 #226)
#224 := (iff #174 #223)
#221 := (iff #39 #220)
#222 := [rewrite]: #221
#214 := (iff #37 #213)
#215 := [rewrite]: #214
#225 := [monotonicity #215 #222]: #224
#217 := (iff #38 #216)
#210 := (iff #36 #209)
#211 := [rewrite]: #210
#218 := [monotonicity #211 #215]: #217
#228 := [monotonicity #218 #225]: #227
#273 := [monotonicity #228]: #272
#202 := (iff #165 #33)
#203 := [rewrite]: #202
#276 := [monotonicity #203 #273]: #275
#204 := (iff #168 #34)
#205 := [rewrite]: #204
#279 := [monotonicity #205 #276]: #278
#282 := [monotonicity #279]: #281
#285 := [quant-intro #282]: #284
#269 := (iff #58 #268)
#266 := (iff #57 #265)
#263 := (= #56 #262)
#260 := (= #55 #259)
#257 := (= #54 #256)
#254 := (= #53 #251)
#248 := (- #245)
#252 := (= #248 #251)
#253 := [rewrite]: #252
#249 := (= #53 #248)
#246 := (= #52 #245)
#185 := (= #44 #184)
#186 := [rewrite]: #185
#182 := (= #43 #181)
#183 := [rewrite]: #182
#247 := [monotonicity #183 #186]: #246
#250 := [monotonicity #247]: #249
#255 := [trans #250 #253]: #254
#178 := (iff #41 #177)
#175 := (iff #40 #174)
#176 := [rewrite]: #175
#179 := [monotonicity #176]: #178
#258 := [monotonicity #179 #255]: #257
#166 := (iff #33 #165)
#167 := [rewrite]: #166
#261 := [monotonicity #167 #258]: #260
#169 := (iff #34 #168)
#170 := [rewrite]: #169
#264 := [monotonicity #170 #261]: #263
#267 := [monotonicity #264]: #266
#270 := [quant-intro #267]: #269
#287 := [trans #270 #285]: #286
#244 := [asserted]: #58
#288 := [mp #244 #287]: #283
#316 := [mp~ #288 #301]: #283
#354 := [mp #316 #353]: #351
#385 := [mp #354 #384]: #382
#890 := [mp #385 #889]: #885
#728 := (not #885)
#729 := (or #728 #805)
#812 := (* -1::Int 1::Int)
#813 := (* -1::Int 0::Int)
#808 := (mod #813 #812)
#809 := (+ #10 #808)
#814 := (= #809 0::Int)
#815 := (mod 0::Int 1::Int)
#810 := (* -1::Int #815)
#816 := (+ #10 #810)
#657 := (= #816 0::Int)
#834 := (>= 0::Int 0::Int)
#658 := (<= 1::Int 0::Int)
#659 := (or #658 #834)
#801 := (not #659)
#802 := (<= 0::Int 0::Int)
#803 := (or #802 #658)
#804 := (not #803)
#798 := (or #804 #801)
#799 := (ite #798 #657 #814)
#806 := (= 0::Int 0::Int)
#800 := (ite #806 #805 #799)
#807 := (= 0::Int #10)
#636 := (= 1::Int 0::Int)
#638 := (ite #636 #807 #800)
#724 := (or #728 #638)
#703 := (iff #724 #729)
#705 := (iff #729 #729)
#598 := [rewrite]: #705
#726 := (iff #638 #805)
#752 := (ite false #805 #805)
#731 := (iff #752 #805)
#732 := [rewrite]: #731
#722 := (iff #638 #752)
#725 := (iff #800 #805)
#1 := true
#736 := (ite true #805 #805)
#733 := (iff #736 #805)
#739 := [rewrite]: #733
#737 := (iff #800 #736)
#734 := (iff #799 #805)
#742 := (iff #799 #752)
#750 := (iff #814 #805)
#748 := (= #809 #10)
#764 := (+ #10 0::Int)
#767 := (= #764 #10)
#763 := [rewrite]: #767
#746 := (= #809 #764)
#744 := (= #808 0::Int)
#756 := (mod 0::Int -1::Int)
#741 := (= #756 0::Int)
#743 := [rewrite]: #741
#760 := (= #808 #756)
#758 := (= #812 -1::Int)
#759 := [rewrite]: #758
#770 := (= #813 0::Int)
#777 := [rewrite]: #770
#740 := [monotonicity #777 #759]: #760
#745 := [trans #740 #743]: #744
#747 := [monotonicity #745]: #746
#749 := [trans #747 #763]: #748
#751 := [monotonicity #749]: #750
#755 := (iff #657 #805)
#768 := (= #816 #10)
#765 := (= #816 #764)
#761 := (= #810 0::Int)
#775 := (= #810 #813)
#773 := (= #815 0::Int)
#774 := [rewrite]: #773
#776 := [monotonicity #774]: #775
#762 := [trans #776 #777]: #761
#766 := [monotonicity #762]: #765
#754 := [trans #766 #763]: #768
#757 := [monotonicity #754]: #755
#779 := (iff #798 false)
#769 := (or false false)
#782 := (iff #769 false)
#783 := [rewrite]: #782
#771 := (iff #798 #769)
#780 := (iff #801 false)
#482 := (not true)
#843 := (iff #482 false)
#829 := [rewrite]: #843
#791 := (iff #801 #482)
#790 := (iff #659 true)
#693 := (or false true)
#696 := (iff #693 true)
#697 := [rewrite]: #696
#694 := (iff #659 #693)
#841 := (iff #834 true)
#481 := [rewrite]: #841
#680 := (iff #658 false)
#681 := [rewrite]: #680
#695 := [monotonicity #681 #481]: #694
#787 := [trans #695 #697]: #790
#778 := [monotonicity #787]: #791
#772 := [trans #778 #829]: #780
#692 := (iff #804 false)
#689 := (iff #804 #482)
#789 := (iff #803 true)
#640 := (or true false)
#785 := (iff #640 true)
#786 := [rewrite]: #785
#788 := (iff #803 #640)
#797 := (iff #802 true)
#679 := [rewrite]: #797
#690 := [monotonicity #679 #681]: #788
#674 := [trans #690 #786]: #789
#691 := [monotonicity #674]: #689
#685 := [trans #691 #829]: #692
#781 := [monotonicity #685 #772]: #771
#784 := [trans #781 #783]: #779
#753 := [monotonicity #784 #757 #751]: #742
#735 := [trans #753 #732]: #734
#796 := (iff #806 true)
#794 := [rewrite]: #796
#738 := [monotonicity #794 #735]: #737
#721 := [trans #738 #739]: #725
#793 := (iff #807 #805)
#795 := [rewrite]: #793
#639 := (iff #636 false)
#792 := [rewrite]: #639
#723 := [monotonicity #792 #795 #721]: #722
#727 := [trans #723 #732]: #726
#704 := [monotonicity #727]: #703
#709 := [trans #704 #598]: #703
#730 := [quant-inst #8 #9]: #724
#710 := [mp #730 #709]: #729
#716 := [unit-resolution #710 #890]: #805
#712 := [monotonicity #716]: #13
#14 := (not #13)
#78 := [asserted]: #14
[unit-resolution #78 #712]: false
unsat
a77f50b29c69935853b053858b12886e75a3e1af 310 0
#2 := false
decl f3 :: (-> Int S2)
#11 := 0::Int
#12 := (f3 0::Int)
decl f4 :: (-> Int Int Int)
#8 := 1::Int
#9 := (f4 1::Int 1::Int)
#10 := (f3 #9)
#13 := (= #10 #12)
#799 := (= #9 0::Int)
#20 := (:var 0 Int)
#31 := (:var 1 Int)
#50 := (f4 #31 #20)
#884 := (pattern #50)
#180 := -1::Int
#184 := (* -1::Int #20)
#181 := (* -1::Int #31)
#245 := (mod #181 #184)
#375 := (+ #50 #245)
#376 := (= #375 0::Int)
#51 := (mod #31 #20)
#372 := (* -1::Int #51)
#373 := (+ #50 #372)
#374 := (= #373 0::Int)
#219 := (>= #31 0::Int)
#212 := (<= #20 0::Int)
#319 := (or #212 #219)
#320 := (not #319)
#208 := (<= #31 0::Int)
#317 := (or #208 #212)
#318 := (not #317)
#323 := (or #318 #320)
#377 := (ite #323 #374 #376)
#371 := (= #50 0::Int)
#33 := (= #31 0::Int)
#378 := (ite #33 #371 #377)
#370 := (= #31 #50)
#34 := (= #20 0::Int)
#379 := (ite #34 #370 #378)
#885 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #884) #379)
#382 := (forall (vars (?v0 Int) (?v1 Int)) #379)
#888 := (iff #382 #885)
#886 := (iff #379 #379)
#887 := [refl]: #886
#889 := [quant-intro #887]: #888
#251 := (* -1::Int #245)
#339 := (ite #323 #51 #251)
#342 := (ite #33 0::Int #339)
#345 := (ite #34 #31 #342)
#348 := (= #50 #345)
#351 := (forall (vars (?v0 Int) (?v1 Int)) #348)
#383 := (iff #351 #382)
#380 := (iff #348 #379)
#381 := [rewrite]: #380
#384 := [quant-intro #381]: #383
#220 := (not #219)
#213 := (not #212)
#223 := (and #213 #220)
#209 := (not #208)
#216 := (and #209 #213)
#226 := (or #216 #223)
#271 := (ite #226 #51 #251)
#274 := (ite #33 0::Int #271)
#277 := (ite #34 #31 #274)
#280 := (= #50 #277)
#283 := (forall (vars (?v0 Int) (?v1 Int)) #280)
#352 := (iff #283 #351)
#349 := (iff #280 #348)
#346 := (= #277 #345)
#343 := (= #274 #342)
#340 := (= #271 #339)
#324 := (iff #226 #323)
#321 := (iff #223 #320)
#322 := [rewrite]: #321
#302 := (iff #216 #318)
#303 := [rewrite]: #302
#325 := [monotonicity #303 #322]: #324
#341 := [monotonicity #325]: #340
#344 := [monotonicity #341]: #343
#347 := [monotonicity #344]: #346
#350 := [monotonicity #347]: #349
#353 := [quant-intro #350]: #352
#300 := (~ #283 #283)
#314 := (~ #280 #280)
#315 := [refl]: #314
#301 := [nnf-pos #315]: #300
#44 := (- #20)
#43 := (- #31)
#52 := (mod #43 #44)
#53 := (- #52)
#37 := (< 0::Int #20)
#39 := (< #31 0::Int)
#40 := (and #39 #37)
#36 := (< 0::Int #31)
#38 := (and #36 #37)
#41 := (or #38 #40)
#54 := (ite #41 #51 #53)
#55 := (ite #33 0::Int #54)
#56 := (ite #34 #31 #55)
#57 := (= #50 #56)
#58 := (forall (vars (?v0 Int) (?v1 Int)) #57)
#286 := (iff #58 #283)
#174 := (and #37 #39)
#177 := (or #38 #174)
#256 := (ite #177 #51 #251)
#165 := (= 0::Int #31)
#259 := (ite #165 0::Int #256)
#168 := (= 0::Int #20)
#262 := (ite #168 #31 #259)
#265 := (= #50 #262)
#268 := (forall (vars (?v0 Int) (?v1 Int)) #265)
#284 := (iff #268 #283)
#281 := (iff #265 #280)
#278 := (= #262 #277)
#275 := (= #259 #274)
#272 := (= #256 #271)
#227 := (iff #177 #226)
#224 := (iff #174 #223)
#221 := (iff #39 #220)
#222 := [rewrite]: #221
#214 := (iff #37 #213)
#215 := [rewrite]: #214
#225 := [monotonicity #215 #222]: #224
#217 := (iff #38 #216)
#210 := (iff #36 #209)
#211 := [rewrite]: #210
#218 := [monotonicity #211 #215]: #217
#228 := [monotonicity #218 #225]: #227
#273 := [monotonicity #228]: #272
#202 := (iff #165 #33)
#203 := [rewrite]: #202
#276 := [monotonicity #203 #273]: #275
#204 := (iff #168 #34)
#205 := [rewrite]: #204
#279 := [monotonicity #205 #276]: #278
#282 := [monotonicity #279]: #281
#285 := [quant-intro #282]: #284
#269 := (iff #58 #268)
#266 := (iff #57 #265)
#263 := (= #56 #262)
#260 := (= #55 #259)
#257 := (= #54 #256)
#254 := (= #53 #251)
#248 := (- #245)
#252 := (= #248 #251)
#253 := [rewrite]: #252
#249 := (= #53 #248)
#246 := (= #52 #245)
#185 := (= #44 #184)
#186 := [rewrite]: #185
#182 := (= #43 #181)
#183 := [rewrite]: #182
#247 := [monotonicity #183 #186]: #246
#250 := [monotonicity #247]: #249
#255 := [trans #250 #253]: #254
#178 := (iff #41 #177)
#175 := (iff #40 #174)
#176 := [rewrite]: #175
#179 := [monotonicity #176]: #178
#258 := [monotonicity #179 #255]: #257
#166 := (iff #33 #165)
#167 := [rewrite]: #166
#261 := [monotonicity #167 #258]: #260
#169 := (iff #34 #168)
#170 := [rewrite]: #169
#264 := [monotonicity #170 #261]: #263
#267 := [monotonicity #264]: #266
#270 := [quant-intro #267]: #269
#287 := [trans #270 #285]: #286
#244 := [asserted]: #58
#288 := [mp #244 #287]: #283
#316 := [mp~ #288 #301]: #283
#354 := [mp #316 #353]: #351
#385 := [mp #354 #384]: #382
#890 := [mp #385 #889]: #885
#703 := (not #885)
#704 := (or #703 #799)
#812 := (* -1::Int 1::Int)
#813 := (mod #812 #812)
#808 := (+ #9 #813)
#809 := (= #808 0::Int)
#814 := (mod 1::Int 1::Int)
#815 := (* -1::Int #814)
#810 := (+ #9 #815)
#816 := (= #810 0::Int)
#657 := (>= 1::Int 0::Int)
#658 := (<= 1::Int 0::Int)
#659 := (or #658 #657)
#801 := (not #659)
#802 := (or #658 #658)
#803 := (not #802)
#804 := (or #803 #801)
#798 := (ite #804 #816 #809)
#805 := (= 1::Int 0::Int)
#806 := (ite #805 #799 #798)
#800 := (= 1::Int #9)
#807 := (ite #805 #800 #806)
#705 := (or #703 #807)
#709 := (iff #705 #704)
#711 := (iff #704 #704)
#716 := [rewrite]: #711
#724 := (iff #807 #799)
#792 := (= #9 1::Int)
#723 := (ite false #792 #799)
#728 := (iff #723 #799)
#729 := [rewrite]: #728
#726 := (iff #807 #723)
#721 := (iff #806 #799)
#737 := (ite false #799 #799)
#739 := (iff #737 #799)
#725 := [rewrite]: #739
#738 := (iff #806 #737)
#735 := (iff #798 #799)
#1 := true
#742 := (ite true #799 #799)
#732 := (iff #742 #799)
#734 := [rewrite]: #732
#753 := (iff #798 #742)
#751 := (iff #809 #799)
#749 := (= #808 #9)
#765 := (+ #9 0::Int)
#763 := (= #765 #9)
#768 := [rewrite]: #763
#747 := (= #808 #765)
#745 := (= #813 0::Int)
#760 := (mod -1::Int -1::Int)
#743 := (= #760 0::Int)
#744 := [rewrite]: #743
#740 := (= #813 #760)
#759 := (= #812 -1::Int)
#756 := [rewrite]: #759
#741 := [monotonicity #756 #756]: #740
#746 := [trans #741 #744]: #745
#748 := [monotonicity #746]: #747
#750 := [trans #748 #768]: #749
#752 := [monotonicity #750]: #751
#757 := (iff #816 #799)
#754 := (= #810 #9)
#766 := (= #810 #765)
#762 := (= #815 0::Int)
#775 := (* -1::Int 0::Int)
#777 := (= #775 0::Int)
#761 := [rewrite]: #777
#776 := (= #815 #775)
#773 := (= #814 0::Int)
#774 := [rewrite]: #773
#770 := [monotonicity #774]: #776
#764 := [trans #770 #761]: #762
#767 := [monotonicity #764]: #766
#755 := [trans #767 #768]: #754
#758 := [monotonicity #755]: #757
#779 := (iff #804 true)
#769 := (or true false)
#782 := (iff #769 true)
#783 := [rewrite]: #782
#771 := (iff #804 #769)
#780 := (iff #801 false)
#482 := (not true)
#843 := (iff #482 false)
#829 := [rewrite]: #843
#791 := (iff #801 #482)
#790 := (iff #659 true)
#693 := (or false true)
#696 := (iff #693 true)
#697 := [rewrite]: #696
#694 := (iff #659 #693)
#692 := (iff #657 true)
#685 := [rewrite]: #692
#795 := (iff #658 false)
#796 := [rewrite]: #795
#695 := [monotonicity #796 #685]: #694
#787 := [trans #695 #697]: #790
#778 := [monotonicity #787]: #791
#772 := [trans #778 #829]: #780
#689 := (iff #803 true)
#690 := (not false)
#789 := (iff #690 true)
#674 := [rewrite]: #789
#785 := (iff #803 #690)
#640 := (iff #802 false)
#794 := (or false false)
#680 := (iff #794 false)
#681 := [rewrite]: #680
#797 := (iff #802 #794)
#679 := [monotonicity #796 #796]: #797
#788 := [trans #679 #681]: #640
#786 := [monotonicity #788]: #785
#691 := [trans #786 #674]: #689
#781 := [monotonicity #691 #772]: #771
#784 := [trans #781 #783]: #779
#731 := [monotonicity #784 #758 #752]: #753
#736 := [trans #731 #734]: #735
#636 := (iff #805 false)
#638 := [rewrite]: #636
#733 := [monotonicity #638 #736]: #738
#722 := [trans #733 #725]: #721
#639 := (iff #800 #792)
#793 := [rewrite]: #639
#727 := [monotonicity #638 #793 #722]: #726
#730 := [trans #727 #729]: #724
#710 := [monotonicity #730]: #709
#712 := [trans #710 #716]: #709
#598 := [quant-inst #8 #8]: #705
#713 := [mp #598 #712]: #704
#717 := [unit-resolution #713 #890]: #799
#718 := [monotonicity #717]: #13
#14 := (not #13)
#78 := [asserted]: #14
[unit-resolution #78 #718]: false
unsat
0b8020dc224bc16c2ca4d4c9672c839314b04736 321 0
#2 := false
decl f3 :: (-> Int S2)
#12 := 0::Int
#13 := (f3 0::Int)
decl f4 :: (-> Int Int Int)
#9 := 1::Int
#8 := 3::Int
#10 := (f4 3::Int 1::Int)
#11 := (f3 #10)
#14 := (= #11 #13)
#807 := (= #10 0::Int)
#21 := (:var 0 Int)
#32 := (:var 1 Int)
#51 := (f4 #32 #21)
#885 := (pattern #51)
#181 := -1::Int
#185 := (* -1::Int #21)
#182 := (* -1::Int #32)
#246 := (mod #182 #185)
#376 := (+ #51 #246)
#377 := (= #376 0::Int)
#52 := (mod #32 #21)
#373 := (* -1::Int #52)
#374 := (+ #51 #373)
#375 := (= #374 0::Int)
#220 := (>= #32 0::Int)
#213 := (<= #21 0::Int)
#320 := (or #213 #220)
#321 := (not #320)
#209 := (<= #32 0::Int)
#318 := (or #209 #213)
#319 := (not #318)
#324 := (or #319 #321)
#378 := (ite #324 #375 #377)
#372 := (= #51 0::Int)
#34 := (= #32 0::Int)
#379 := (ite #34 #372 #378)
#371 := (= #32 #51)
#35 := (= #21 0::Int)
#380 := (ite #35 #371 #379)
#886 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #885) #380)
#383 := (forall (vars (?v0 Int) (?v1 Int)) #380)
#889 := (iff #383 #886)
#887 := (iff #380 #380)
#888 := [refl]: #887
#890 := [quant-intro #888]: #889
#252 := (* -1::Int #246)
#340 := (ite #324 #52 #252)
#343 := (ite #34 0::Int #340)
#346 := (ite #35 #32 #343)
#349 := (= #51 #346)
#352 := (forall (vars (?v0 Int) (?v1 Int)) #349)
#384 := (iff #352 #383)
#381 := (iff #349 #380)
#382 := [rewrite]: #381
#385 := [quant-intro #382]: #384
#221 := (not #220)
#214 := (not #213)
#224 := (and #214 #221)
#210 := (not #209)
#217 := (and #210 #214)
#227 := (or #217 #224)
#272 := (ite #227 #52 #252)
#275 := (ite #34 0::Int #272)
#278 := (ite #35 #32 #275)
#281 := (= #51 #278)
#284 := (forall (vars (?v0 Int) (?v1 Int)) #281)
#353 := (iff #284 #352)
#350 := (iff #281 #349)
#347 := (= #278 #346)
#344 := (= #275 #343)
#341 := (= #272 #340)
#325 := (iff #227 #324)
#322 := (iff #224 #321)
#323 := [rewrite]: #322
#303 := (iff #217 #319)
#304 := [rewrite]: #303
#326 := [monotonicity #304 #323]: #325
#342 := [monotonicity #326]: #341
#345 := [monotonicity #342]: #344
#348 := [monotonicity #345]: #347
#351 := [monotonicity #348]: #350
#354 := [quant-intro #351]: #353
#301 := (~ #284 #284)
#315 := (~ #281 #281)
#316 := [refl]: #315
#302 := [nnf-pos #316]: #301
#45 := (- #21)
#44 := (- #32)
#53 := (mod #44 #45)
#54 := (- #53)
#38 := (< 0::Int #21)
#40 := (< #32 0::Int)
#41 := (and #40 #38)
#37 := (< 0::Int #32)
#39 := (and #37 #38)
#42 := (or #39 #41)
#55 := (ite #42 #52 #54)
#56 := (ite #34 0::Int #55)
#57 := (ite #35 #32 #56)
#58 := (= #51 #57)
#59 := (forall (vars (?v0 Int) (?v1 Int)) #58)
#287 := (iff #59 #284)
#175 := (and #38 #40)
#178 := (or #39 #175)
#257 := (ite #178 #52 #252)
#166 := (= 0::Int #32)
#260 := (ite #166 0::Int #257)
#169 := (= 0::Int #21)
#263 := (ite #169 #32 #260)
#266 := (= #51 #263)
#269 := (forall (vars (?v0 Int) (?v1 Int)) #266)
#285 := (iff #269 #284)
#282 := (iff #266 #281)
#279 := (= #263 #278)
#276 := (= #260 #275)
#273 := (= #257 #272)
#228 := (iff #178 #227)
#225 := (iff #175 #224)
#222 := (iff #40 #221)
#223 := [rewrite]: #222
#215 := (iff #38 #214)
#216 := [rewrite]: #215
#226 := [monotonicity #216 #223]: #225
#218 := (iff #39 #217)
#211 := (iff #37 #210)
#212 := [rewrite]: #211
#219 := [monotonicity #212 #216]: #218
#229 := [monotonicity #219 #226]: #228
#274 := [monotonicity #229]: #273
#203 := (iff #166 #34)
#204 := [rewrite]: #203
#277 := [monotonicity #204 #274]: #276
#205 := (iff #169 #35)
#206 := [rewrite]: #205
#280 := [monotonicity #206 #277]: #279
#283 := [monotonicity #280]: #282
#286 := [quant-intro #283]: #285
#270 := (iff #59 #269)
#267 := (iff #58 #266)
#264 := (= #57 #263)
#261 := (= #56 #260)
#258 := (= #55 #257)
#255 := (= #54 #252)
#249 := (- #246)
#253 := (= #249 #252)
#254 := [rewrite]: #253
#250 := (= #54 #249)
#247 := (= #53 #246)
#186 := (= #45 #185)
#187 := [rewrite]: #186
#183 := (= #44 #182)
#184 := [rewrite]: #183
#248 := [monotonicity #184 #187]: #247
#251 := [monotonicity #248]: #250
#256 := [trans #251 #254]: #255
#179 := (iff #42 #178)
#176 := (iff #41 #175)
#177 := [rewrite]: #176
#180 := [monotonicity #177]: #179
#259 := [monotonicity #180 #256]: #258
#167 := (iff #34 #166)
#168 := [rewrite]: #167
#262 := [monotonicity #168 #259]: #261
#170 := (iff #35 #169)
#171 := [rewrite]: #170
#265 := [monotonicity #171 #262]: #264
#268 := [monotonicity #265]: #267
#271 := [quant-intro #268]: #270
#288 := [trans #271 #286]: #287
#245 := [asserted]: #59
#289 := [mp #245 #288]: #284
#317 := [mp~ #289 #302]: #284
#355 := [mp #317 #354]: #352
#386 := [mp #355 #385]: #383
#891 := [mp #386 #890]: #886
#715 := (not #886)
#718 := (or #715 #807)
#813 := (* -1::Int 1::Int)
#814 := (* -1::Int 3::Int)
#809 := (mod #814 #813)
#810 := (+ #10 #809)
#815 := (= #810 0::Int)
#816 := (mod 3::Int 1::Int)
#811 := (* -1::Int #816)
#817 := (+ #10 #811)
#658 := (= #817 0::Int)
#659 := (>= 3::Int 0::Int)
#660 := (<= 1::Int 0::Int)
#802 := (or #660 #659)
#803 := (not #802)
#804 := (<= 3::Int 0::Int)
#805 := (or #804 #660)
#799 := (not #805)
#800 := (or #799 #803)
#806 := (ite #800 #658 #815)
#801 := (= 3::Int 0::Int)
#808 := (ite #801 #807 #806)
#637 := (= 3::Int #10)
#639 := (= 1::Int 0::Int)
#640 := (ite #639 #637 #808)
#719 := (or #715 #640)
#716 := (iff #719 #718)
#701 := (iff #718 #718)
#647 := [rewrite]: #701
#713 := (iff #640 #807)
#797 := (= #10 3::Int)
#599 := (ite false #797 #807)
#712 := (iff #599 #807)
#717 := [rewrite]: #712
#710 := (iff #640 #599)
#705 := (iff #808 #807)
#729 := (ite false #807 #807)
#731 := (iff #729 #807)
#704 := [rewrite]: #731
#730 := (iff #808 #729)
#727 := (iff #806 #807)
#1 := true
#740 := (ite true #807 #807)
#723 := (iff #740 #807)
#724 := [rewrite]: #723
#726 := (iff #806 #740)
#739 := (iff #815 #807)
#737 := (= #810 #10)
#758 := (+ #10 0::Int)
#757 := (= #758 #10)
#761 := [rewrite]: #757
#735 := (= #810 #758)
#732 := (= #809 0::Int)
#746 := -3::Int
#751 := (mod -3::Int -1::Int)
#743 := (= #751 0::Int)
#754 := [rewrite]: #743
#752 := (= #809 #751)
#749 := (= #813 -1::Int)
#750 := [rewrite]: #749
#747 := (= #814 -3::Int)
#748 := [rewrite]: #747
#753 := [monotonicity #748 #750]: #752
#733 := [trans #753 #754]: #732
#736 := [monotonicity #733]: #735
#738 := [trans #736 #761]: #737
#734 := [monotonicity #738]: #739
#744 := (iff #658 #807)
#741 := (= #817 #10)
#759 := (= #817 #758)
#755 := (= #811 0::Int)
#766 := (* -1::Int 0::Int)
#764 := (= #766 0::Int)
#769 := [rewrite]: #764
#767 := (= #811 #766)
#763 := (= #816 0::Int)
#765 := [rewrite]: #763
#768 := [monotonicity #765]: #767
#756 := [trans #768 #769]: #755
#760 := [monotonicity #756]: #759
#742 := [trans #760 #761]: #741
#745 := [monotonicity #742]: #744
#778 := (iff #800 true)
#774 := (or true false)
#777 := (iff #774 true)
#771 := [rewrite]: #777
#775 := (iff #800 #774)
#780 := (iff #803 false)
#483 := (not true)
#844 := (iff #483 false)
#830 := [rewrite]: #844
#783 := (iff #803 #483)
#772 := (iff #802 true)
#792 := (or false true)
#773 := (iff #792 true)
#770 := [rewrite]: #773
#779 := (iff #802 #792)
#791 := (iff #659 true)
#788 := [rewrite]: #791
#641 := (iff #660 false)
#789 := [rewrite]: #641
#781 := [monotonicity #789 #788]: #779
#782 := [trans #781 #770]: #772
#784 := [monotonicity #782]: #783
#785 := [trans #784 #830]: #780
#697 := (iff #799 true)
#693 := (not false)
#695 := (iff #693 true)
#696 := [rewrite]: #695
#686 := (iff #799 #693)
#690 := (iff #805 false)
#691 := (or false false)
#790 := (iff #691 false)
#675 := [rewrite]: #790
#786 := (iff #805 #691)
#681 := (iff #804 false)
#682 := [rewrite]: #681
#787 := [monotonicity #682 #789]: #786
#692 := [trans #787 #675]: #690
#694 := [monotonicity #692]: #686
#698 := [trans #694 #696]: #697
#776 := [monotonicity #698 #785]: #775
#762 := [trans #776 #771]: #778
#722 := [monotonicity #762 #745 #734]: #726
#728 := [trans #722 #724]: #727
#798 := (iff #801 false)
#680 := [rewrite]: #798
#725 := [monotonicity #680 #728]: #730
#706 := [trans #725 #704]: #705
#796 := (iff #637 #797)
#795 := [rewrite]: #796
#793 := (iff #639 false)
#794 := [rewrite]: #793
#711 := [monotonicity #794 #795 #706]: #710
#714 := [trans #711 #717]: #713
#721 := [monotonicity #714]: #716
#702 := [trans #721 #647]: #716
#720 := [quant-inst #8 #9]: #719
#683 := [mp #720 #702]: #718
#708 := [unit-resolution #683 #891]: #807
#703 := [monotonicity #708]: #14
#15 := (not #14)
#79 := [asserted]: #15
[unit-resolution #79 #703]: false
unsat
beef9b82cbe8a31ac2e4568749757bdaef5ecf77 324 0
#2 := false
#13 := 0::Int
decl f5 :: (-> S2 Int)
decl f6 :: S2
#8 := f6
#9 := (f5 f6)
#812 := (>= #9 0::Int)
#694 := (not #812)
#801 := (= #9 0::Int)
#661 := (<= #9 0::Int)
#683 := (not #661)
#755 := (or #683 #801 #694)
#712 := (not #755)
decl f4 :: (-> Int Int Int)
#10 := 1::Int
#11 := (f4 #9 1::Int)
#800 := (= #11 0::Int)
#702 := (not #800)
decl f3 :: (-> Int S2)
#14 := (f3 0::Int)
#12 := (f3 #11)
#15 := (= #12 #14)
#685 := [hypothesis]: #800
#644 := [monotonicity #685]: #15
#16 := (not #15)
#80 := [asserted]: #16
#690 := [unit-resolution #80 #644]: false
#700 := [lemma #690]: #702
#701 := (or #712 #800)
#182 := -1::Int
#824 := (* -1::Int #9)
#763 := (mod #824 -1::Int)
#767 := (+ #11 #763)
#765 := (= #767 0::Int)
#736 := (ite #755 #800 #765)
#22 := (:var 0 Int)
#33 := (:var 1 Int)
#52 := (f4 #33 #22)
#886 := (pattern #52)
#186 := (* -1::Int #22)
#183 := (* -1::Int #33)
#247 := (mod #183 #186)
#377 := (+ #52 #247)
#378 := (= #377 0::Int)
#53 := (mod #33 #22)
#374 := (* -1::Int #53)
#375 := (+ #52 #374)
#376 := (= #375 0::Int)
#221 := (>= #33 0::Int)
#214 := (<= #22 0::Int)
#321 := (or #214 #221)
#322 := (not #321)
#210 := (<= #33 0::Int)
#319 := (or #210 #214)
#320 := (not #319)
#325 := (or #320 #322)
#379 := (ite #325 #376 #378)
#373 := (= #52 0::Int)
#35 := (= #33 0::Int)
#380 := (ite #35 #373 #379)
#372 := (= #33 #52)
#36 := (= #22 0::Int)
#381 := (ite #36 #372 #380)
#887 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #886) #381)
#384 := (forall (vars (?v0 Int) (?v1 Int)) #381)
#890 := (iff #384 #887)
#888 := (iff #381 #381)
#889 := [refl]: #888
#891 := [quant-intro #889]: #890
#253 := (* -1::Int #247)
#341 := (ite #325 #53 #253)
#344 := (ite #35 0::Int #341)
#347 := (ite #36 #33 #344)
#350 := (= #52 #347)
#353 := (forall (vars (?v0 Int) (?v1 Int)) #350)
#385 := (iff #353 #384)
#382 := (iff #350 #381)
#383 := [rewrite]: #382
#386 := [quant-intro #383]: #385
#222 := (not #221)
#215 := (not #214)
#225 := (and #215 #222)
#211 := (not #210)
#218 := (and #211 #215)
#228 := (or #218 #225)
#273 := (ite #228 #53 #253)
#276 := (ite #35 0::Int #273)
#279 := (ite #36 #33 #276)
#282 := (= #52 #279)
#285 := (forall (vars (?v0 Int) (?v1 Int)) #282)
#354 := (iff #285 #353)
#351 := (iff #282 #350)
#348 := (= #279 #347)
#345 := (= #276 #344)
#342 := (= #273 #341)
#326 := (iff #228 #325)
#323 := (iff #225 #322)
#324 := [rewrite]: #323
#304 := (iff #218 #320)
#305 := [rewrite]: #304
#327 := [monotonicity #305 #324]: #326
#343 := [monotonicity #327]: #342
#346 := [monotonicity #343]: #345
#349 := [monotonicity #346]: #348
#352 := [monotonicity #349]: #351
#355 := [quant-intro #352]: #354
#302 := (~ #285 #285)
#316 := (~ #282 #282)
#317 := [refl]: #316
#303 := [nnf-pos #317]: #302
#46 := (- #22)
#45 := (- #33)
#54 := (mod #45 #46)
#55 := (- #54)
#39 := (< 0::Int #22)
#41 := (< #33 0::Int)
#42 := (and #41 #39)
#38 := (< 0::Int #33)
#40 := (and #38 #39)
#43 := (or #40 #42)
#56 := (ite #43 #53 #55)
#57 := (ite #35 0::Int #56)
#58 := (ite #36 #33 #57)
#59 := (= #52 #58)
#60 := (forall (vars (?v0 Int) (?v1 Int)) #59)
#288 := (iff #60 #285)
#176 := (and #39 #41)
#179 := (or #40 #176)
#258 := (ite #179 #53 #253)
#167 := (= 0::Int #33)
#261 := (ite #167 0::Int #258)
#170 := (= 0::Int #22)
#264 := (ite #170 #33 #261)
#267 := (= #52 #264)
#270 := (forall (vars (?v0 Int) (?v1 Int)) #267)
#286 := (iff #270 #285)
#283 := (iff #267 #282)
#280 := (= #264 #279)
#277 := (= #261 #276)
#274 := (= #258 #273)
#229 := (iff #179 #228)
#226 := (iff #176 #225)
#223 := (iff #41 #222)
#224 := [rewrite]: #223
#216 := (iff #39 #215)
#217 := [rewrite]: #216
#227 := [monotonicity #217 #224]: #226
#219 := (iff #40 #218)
#212 := (iff #38 #211)
#213 := [rewrite]: #212
#220 := [monotonicity #213 #217]: #219
#230 := [monotonicity #220 #227]: #229
#275 := [monotonicity #230]: #274
#204 := (iff #167 #35)
#205 := [rewrite]: #204
#278 := [monotonicity #205 #275]: #277
#206 := (iff #170 #36)
#207 := [rewrite]: #206
#281 := [monotonicity #207 #278]: #280
#284 := [monotonicity #281]: #283
#287 := [quant-intro #284]: #286
#271 := (iff #60 #270)
#268 := (iff #59 #267)
#265 := (= #58 #264)
#262 := (= #57 #261)
#259 := (= #56 #258)
#256 := (= #55 #253)
#250 := (- #247)
#254 := (= #250 #253)
#255 := [rewrite]: #254
#251 := (= #55 #250)
#248 := (= #54 #247)
#187 := (= #46 #186)
#188 := [rewrite]: #187
#184 := (= #45 #183)
#185 := [rewrite]: #184
#249 := [monotonicity #185 #188]: #248
#252 := [monotonicity #249]: #251
#257 := [trans #252 #255]: #256
#180 := (iff #43 #179)
#177 := (iff #42 #176)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#260 := [monotonicity #181 #257]: #259
#168 := (iff #35 #167)
#169 := [rewrite]: #168
#263 := [monotonicity #169 #260]: #262
#171 := (iff #36 #170)
#172 := [rewrite]: #171
#266 := [monotonicity #172 #263]: #265
#269 := [monotonicity #266]: #268
#272 := [quant-intro #269]: #271
#289 := [trans #272 #287]: #288
#246 := [asserted]: #60
#290 := [mp #246 #289]: #285
#318 := [mp~ #290 #303]: #285
#356 := [mp #318 #355]: #353
#387 := [mp #356 #386]: #384
#892 := [mp #387 #891]: #887
#735 := (not #887)
#741 := (or #735 #736)
#820 := (* -1::Int 1::Int)
#813 := (mod #824 #820)
#814 := (+ #11 #813)
#815 := (= #814 0::Int)
#810 := (mod #9 1::Int)
#811 := (* -1::Int #810)
#816 := (+ #11 #811)
#817 := (= #816 0::Int)
#818 := (<= 1::Int 0::Int)
#659 := (or #818 #812)
#660 := (not #659)
#803 := (or #661 #818)
#804 := (not #803)
#805 := (or #804 #660)
#806 := (ite #805 #817 #815)
#807 := (ite #801 #800 #806)
#808 := (= #9 #11)
#802 := (= 1::Int 0::Int)
#809 := (ite #802 #808 #807)
#727 := (or #735 #809)
#724 := (iff #727 #741)
#728 := (iff #741 #741)
#729 := [rewrite]: #728
#739 := (iff #809 #736)
#696 := (or #683 #694)
#742 := (or #696 #801)
#743 := (ite #742 #800 #765)
#737 := (iff #743 #736)
#733 := (iff #742 #755)
#734 := [rewrite]: #733
#738 := [monotonicity #734]: #737
#754 := (iff #809 #743)
#749 := (ite false #808 #743)
#752 := (iff #749 #743)
#753 := [rewrite]: #752
#750 := (iff #809 #749)
#747 := (iff #807 #743)
#757 := (ite #696 #800 #765)
#761 := (ite #801 #800 #757)
#745 := (iff #761 #743)
#746 := [rewrite]: #745
#758 := (iff #807 #761)
#759 := (iff #806 #757)
#770 := (iff #815 #765)
#768 := (= #814 #767)
#764 := (= #813 #763)
#772 := (= #820 -1::Int)
#779 := [rewrite]: #772
#766 := [monotonicity #779]: #764
#769 := [monotonicity #766]: #768
#756 := [monotonicity #769]: #770
#777 := (iff #817 #800)
#775 := (= #816 #11)
#783 := (+ #11 0::Int)
#781 := (= #783 #11)
#786 := [rewrite]: #781
#784 := (= #816 #783)
#771 := (= #811 0::Int)
#789 := (* -1::Int 0::Int)
#782 := (= #789 0::Int)
#774 := [rewrite]: #782
#793 := (= #811 #789)
#699 := (= #810 0::Int)
#792 := [rewrite]: #699
#780 := [monotonicity #792]: #793
#773 := [trans #780 #774]: #771
#785 := [monotonicity #773]: #784
#776 := [trans #785 #786]: #775
#778 := [monotonicity #776]: #777
#697 := (iff #805 #696)
#687 := (iff #660 #694)
#691 := (iff #659 #812)
#692 := (or false #812)
#791 := (iff #692 #812)
#676 := [rewrite]: #791
#787 := (iff #659 #692)
#641 := (iff #818 false)
#794 := [rewrite]: #641
#788 := [monotonicity #794]: #787
#693 := [trans #788 #676]: #691
#695 := [monotonicity #693]: #687
#642 := (iff #804 #683)
#681 := (iff #803 #661)
#795 := (or #661 false)
#796 := (iff #795 #661)
#799 := [rewrite]: #796
#797 := (iff #803 #795)
#798 := [monotonicity #794]: #797
#682 := [trans #798 #799]: #681
#790 := [monotonicity #682]: #642
#698 := [monotonicity #790 #695]: #697
#760 := [monotonicity #698 #778 #756]: #759
#762 := [monotonicity #760]: #758
#748 := [trans #762 #746]: #747
#638 := (iff #802 false)
#640 := [rewrite]: #638
#751 := [monotonicity #640 #748]: #750
#744 := [trans #751 #753]: #754
#740 := [trans #744 #738]: #739
#725 := [monotonicity #740]: #724
#730 := [trans #725 #729]: #724
#723 := [quant-inst #9 #10]: #727
#731 := [mp #723 #730]: #741
#680 := [unit-resolution #731 #892]: #736
#719 := (not #736)
#720 := (or #719 #712 #800)
#721 := [def-axiom]: #720
#656 := [unit-resolution #721 #680]: #701
#657 := [unit-resolution #656 #700]: #712
#600 := (or #755 #812)
#711 := [def-axiom]: #600
#662 := [unit-resolution #711 #657]: #812
#726 := (or #755 #661)
#732 := [def-axiom]: #726
#663 := [unit-resolution #732 #657]: #661
#705 := (not #801)
#706 := (or #755 #705)
#707 := [def-axiom]: #706
#664 := [unit-resolution #707 #657]: #705
#665 := (or #801 #683 #694)
#666 := [th-lemma arith triangle-eq]: #665
[unit-resolution #666 #664 #663 #662]: false
unsat
9fbefb874a9c8d1ffb3917c9db0286d637e8beaf 310 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#12 := (f3 0::Int)
decl f4 :: (-> Int Int Int)
#9 := 3::Int
#10 := (f4 0::Int 3::Int)
#11 := (f3 #10)
#13 := (= #11 #12)
#800 := (= #10 0::Int)
#20 := (:var 0 Int)
#31 := (:var 1 Int)
#50 := (f4 #31 #20)
#885 := (pattern #50)
#180 := -1::Int
#184 := (* -1::Int #20)
#181 := (* -1::Int #31)
#245 := (mod #181 #184)
#375 := (+ #50 #245)
#376 := (= #375 0::Int)
#51 := (mod #31 #20)
#372 := (* -1::Int #51)
#373 := (+ #50 #372)
#374 := (= #373 0::Int)
#219 := (>= #31 0::Int)
#212 := (<= #20 0::Int)
#319 := (or #212 #219)
#320 := (not #319)
#208 := (<= #31 0::Int)
#317 := (or #208 #212)
#318 := (not #317)
#323 := (or #318 #320)
#377 := (ite #323 #374 #376)
#371 := (= #50 0::Int)
#33 := (= #31 0::Int)
#378 := (ite #33 #371 #377)
#370 := (= #31 #50)
#34 := (= #20 0::Int)
#379 := (ite #34 #370 #378)
#886 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #885) #379)
#382 := (forall (vars (?v0 Int) (?v1 Int)) #379)
#889 := (iff #382 #886)
#887 := (iff #379 #379)
#888 := [refl]: #887
#890 := [quant-intro #888]: #889
#251 := (* -1::Int #245)
#339 := (ite #323 #51 #251)
#342 := (ite #33 0::Int #339)
#345 := (ite #34 #31 #342)
#348 := (= #50 #345)
#351 := (forall (vars (?v0 Int) (?v1 Int)) #348)
#383 := (iff #351 #382)
#380 := (iff #348 #379)
#381 := [rewrite]: #380
#384 := [quant-intro #381]: #383
#220 := (not #219)
#213 := (not #212)
#223 := (and #213 #220)
#209 := (not #208)
#216 := (and #209 #213)
#226 := (or #216 #223)
#271 := (ite #226 #51 #251)
#274 := (ite #33 0::Int #271)
#277 := (ite #34 #31 #274)
#280 := (= #50 #277)
#283 := (forall (vars (?v0 Int) (?v1 Int)) #280)
#352 := (iff #283 #351)
#349 := (iff #280 #348)
#346 := (= #277 #345)
#343 := (= #274 #342)
#340 := (= #271 #339)
#324 := (iff #226 #323)
#321 := (iff #223 #320)
#322 := [rewrite]: #321
#302 := (iff #216 #318)
#303 := [rewrite]: #302
#325 := [monotonicity #303 #322]: #324
#341 := [monotonicity #325]: #340
#344 := [monotonicity #341]: #343
#347 := [monotonicity #344]: #346
#350 := [monotonicity #347]: #349
#353 := [quant-intro #350]: #352
#300 := (~ #283 #283)
#314 := (~ #280 #280)
#315 := [refl]: #314
#301 := [nnf-pos #315]: #300
#44 := (- #20)
#43 := (- #31)
#52 := (mod #43 #44)
#53 := (- #52)
#37 := (< 0::Int #20)
#39 := (< #31 0::Int)
#40 := (and #39 #37)
#36 := (< 0::Int #31)
#38 := (and #36 #37)
#41 := (or #38 #40)
#54 := (ite #41 #51 #53)
#55 := (ite #33 0::Int #54)
#56 := (ite #34 #31 #55)
#57 := (= #50 #56)
#58 := (forall (vars (?v0 Int) (?v1 Int)) #57)
#286 := (iff #58 #283)
#174 := (and #37 #39)
#177 := (or #38 #174)
#256 := (ite #177 #51 #251)
#165 := (= 0::Int #31)
#259 := (ite #165 0::Int #256)
#168 := (= 0::Int #20)
#262 := (ite #168 #31 #259)
#265 := (= #50 #262)
#268 := (forall (vars (?v0 Int) (?v1 Int)) #265)
#284 := (iff #268 #283)
#281 := (iff #265 #280)
#278 := (= #262 #277)
#275 := (= #259 #274)
#272 := (= #256 #271)
#227 := (iff #177 #226)
#224 := (iff #174 #223)
#221 := (iff #39 #220)
#222 := [rewrite]: #221
#214 := (iff #37 #213)
#215 := [rewrite]: #214
#225 := [monotonicity #215 #222]: #224
#217 := (iff #38 #216)
#210 := (iff #36 #209)
#211 := [rewrite]: #210
#218 := [monotonicity #211 #215]: #217
#228 := [monotonicity #218 #225]: #227
#273 := [monotonicity #228]: #272
#202 := (iff #165 #33)
#203 := [rewrite]: #202
#276 := [monotonicity #203 #273]: #275
#204 := (iff #168 #34)
#205 := [rewrite]: #204
#279 := [monotonicity #205 #276]: #278
#282 := [monotonicity #279]: #281
#285 := [quant-intro #282]: #284
#269 := (iff #58 #268)
#266 := (iff #57 #265)
#263 := (= #56 #262)
#260 := (= #55 #259)
#257 := (= #54 #256)
#254 := (= #53 #251)
#248 := (- #245)
#252 := (= #248 #251)
#253 := [rewrite]: #252
#249 := (= #53 #248)
#246 := (= #52 #245)
#185 := (= #44 #184)
#186 := [rewrite]: #185
#182 := (= #43 #181)
#183 := [rewrite]: #182
#247 := [monotonicity #183 #186]: #246
#250 := [monotonicity #247]: #249
#255 := [trans #250 #253]: #254
#178 := (iff #41 #177)
#175 := (iff #40 #174)
#176 := [rewrite]: #175
#179 := [monotonicity #176]: #178
#258 := [monotonicity #179 #255]: #257
#166 := (iff #33 #165)
#167 := [rewrite]: #166
#261 := [monotonicity #167 #258]: #260
#169 := (iff #34 #168)
#170 := [rewrite]: #169
#264 := [monotonicity #170 #261]: #263
#267 := [monotonicity #264]: #266
#270 := [quant-intro #267]: #269
#287 := [trans #270 #285]: #286
#244 := [asserted]: #58
#288 := [mp #244 #287]: #283
#316 := [mp~ #288 #301]: #283
#354 := [mp #316 #353]: #351
#385 := [mp #354 #384]: #382
#891 := [mp #385 #890]: #886
#729 := (not #886)
#730 := (or #729 #800)
#812 := (* -1::Int 3::Int)
#813 := (* -1::Int 0::Int)
#814 := (mod #813 #812)
#809 := (+ #10 #814)
#810 := (= #809 0::Int)
#815 := (mod 0::Int 3::Int)
#816 := (* -1::Int #815)
#811 := (+ #10 #816)
#817 := (= #811 0::Int)
#834 := (>= 0::Int 0::Int)
#658 := (<= 3::Int 0::Int)
#659 := (or #658 #834)
#660 := (not #659)
#802 := (<= 0::Int 0::Int)
#803 := (or #802 #658)
#804 := (not #803)
#805 := (or #804 #660)
#799 := (ite #805 #817 #810)
#806 := (= 0::Int 0::Int)
#807 := (ite #806 #800 #799)
#801 := (= 0::Int #10)
#808 := (= 3::Int 0::Int)
#637 := (ite #808 #801 #807)
#725 := (or #729 #637)
#704 := (iff #725 #730)
#706 := (iff #730 #730)
#599 := [rewrite]: #706
#727 := (iff #637 #800)
#753 := (ite false #800 #800)
#732 := (iff #753 #800)
#733 := [rewrite]: #732
#723 := (iff #637 #753)
#726 := (iff #807 #800)
#1 := true
#737 := (ite true #800 #800)
#734 := (iff #737 #800)
#740 := [rewrite]: #734
#738 := (iff #807 #737)
#735 := (iff #799 #800)
#743 := (iff #799 #753)
#751 := (iff #810 #800)
#749 := (= #809 #10)
#763 := (+ #10 0::Int)
#767 := (= #763 #10)
#768 := [rewrite]: #767
#747 := (= #809 #763)
#745 := (= #814 0::Int)
#758 := -3::Int
#757 := (mod 0::Int -3::Int)
#742 := (= #757 0::Int)
#744 := [rewrite]: #742
#761 := (= #814 #757)
#759 := (= #812 -3::Int)
#760 := [rewrite]: #759
#777 := (= #813 0::Int)
#771 := [rewrite]: #777
#741 := [monotonicity #771 #760]: #761
#746 := [trans #741 #744]: #745
#748 := [monotonicity #746]: #747
#750 := [trans #748 #768]: #749
#752 := [monotonicity #750]: #751
#755 := (iff #817 #800)
#764 := (= #811 #10)
#765 := (= #811 #763)
#778 := (= #816 0::Int)
#775 := (= #816 #813)
#785 := (= #815 0::Int)
#774 := [rewrite]: #785
#776 := [monotonicity #774]: #775
#762 := [trans #776 #771]: #778
#766 := [monotonicity #762]: #765
#769 := [trans #766 #768]: #764
#756 := [monotonicity #769]: #755
#784 := (iff #805 false)
#773 := (or false false)
#782 := (iff #773 false)
#783 := [rewrite]: #782
#770 := (iff #805 #773)
#779 := (iff #660 false)
#482 := (not true)
#841 := (iff #482 false)
#844 := [rewrite]: #841
#788 := (iff #660 #482)
#698 := (iff #659 true)
#686 := (or false true)
#696 := (iff #686 true)
#697 := [rewrite]: #696
#694 := (iff #659 #686)
#840 := (iff #834 true)
#842 := [rewrite]: #840
#680 := (iff #658 false)
#681 := [rewrite]: #680
#695 := [monotonicity #681 #842]: #694
#791 := [trans #695 #697]: #698
#792 := [monotonicity #791]: #788
#781 := [trans #792 #844]: #779
#692 := (iff #804 false)
#675 := (iff #804 #482)
#787 := (iff #803 true)
#682 := (or true false)
#691 := (iff #682 true)
#786 := [rewrite]: #691
#641 := (iff #803 #682)
#795 := (iff #802 true)
#798 := [rewrite]: #795
#789 := [monotonicity #798 #681]: #641
#790 := [trans #789 #786]: #787
#690 := [monotonicity #790]: #675
#693 := [trans #690 #844]: #692
#772 := [monotonicity #693 #781]: #770
#780 := [trans #772 #783]: #784
#754 := [monotonicity #780 #756 #752]: #743
#736 := [trans #754 #733]: #735
#796 := (iff #806 true)
#797 := [rewrite]: #796
#739 := [monotonicity #797 #736]: #738
#722 := [trans #739 #740]: #726
#793 := (iff #801 #800)
#794 := [rewrite]: #793
#639 := (iff #808 false)
#640 := [rewrite]: #639
#724 := [monotonicity #640 #794 #722]: #723
#728 := [trans #724 #733]: #727
#705 := [monotonicity #728]: #704
#710 := [trans #705 #599]: #704
#731 := [quant-inst #8 #9]: #725
#711 := [mp #731 #710]: #730
#717 := [unit-resolution #711 #891]: #800
#713 := [monotonicity #717]: #13
#14 := (not #13)
#78 := [asserted]: #14
[unit-resolution #78 #713]: false
unsat
e4bde0ae05cc3d53da641b07fe2928d0ca73206a 336 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 1::Int
#12 := (f3 1::Int)
decl f4 :: (-> Int Int Int)
#9 := 3::Int
#10 := (f4 1::Int 3::Int)
#11 := (f3 #10)
#13 := (= #11 #12)
#797 := (= #10 1::Int)
#21 := (:var 0 Int)
#32 := (:var 1 Int)
#51 := (f4 #32 #21)
#885 := (pattern #51)
#20 := 0::Int
#181 := -1::Int
#185 := (* -1::Int #21)
#182 := (* -1::Int #32)
#246 := (mod #182 #185)
#376 := (+ #51 #246)
#377 := (= #376 0::Int)
#52 := (mod #32 #21)
#373 := (* -1::Int #52)
#374 := (+ #51 #373)
#375 := (= #374 0::Int)
#220 := (>= #32 0::Int)
#213 := (<= #21 0::Int)
#320 := (or #213 #220)
#321 := (not #320)
#209 := (<= #32 0::Int)
#318 := (or #209 #213)
#319 := (not #318)
#324 := (or #319 #321)
#378 := (ite #324 #375 #377)
#372 := (= #51 0::Int)
#34 := (= #32 0::Int)
#379 := (ite #34 #372 #378)
#371 := (= #32 #51)
#35 := (= #21 0::Int)
#380 := (ite #35 #371 #379)
#886 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #885) #380)
#383 := (forall (vars (?v0 Int) (?v1 Int)) #380)
#889 := (iff #383 #886)
#887 := (iff #380 #380)
#888 := [refl]: #887
#890 := [quant-intro #888]: #889
#252 := (* -1::Int #246)
#340 := (ite #324 #52 #252)
#343 := (ite #34 0::Int #340)
#346 := (ite #35 #32 #343)
#349 := (= #51 #346)
#352 := (forall (vars (?v0 Int) (?v1 Int)) #349)
#384 := (iff #352 #383)
#381 := (iff #349 #380)
#382 := [rewrite]: #381
#385 := [quant-intro #382]: #384
#221 := (not #220)
#214 := (not #213)
#224 := (and #214 #221)
#210 := (not #209)
#217 := (and #210 #214)
#227 := (or #217 #224)
#272 := (ite #227 #52 #252)
#275 := (ite #34 0::Int #272)
#278 := (ite #35 #32 #275)
#281 := (= #51 #278)
#284 := (forall (vars (?v0 Int) (?v1 Int)) #281)
#353 := (iff #284 #352)
#350 := (iff #281 #349)
#347 := (= #278 #346)
#344 := (= #275 #343)
#341 := (= #272 #340)
#325 := (iff #227 #324)
#322 := (iff #224 #321)
#323 := [rewrite]: #322
#303 := (iff #217 #319)
#304 := [rewrite]: #303
#326 := [monotonicity #304 #323]: #325
#342 := [monotonicity #326]: #341
#345 := [monotonicity #342]: #344
#348 := [monotonicity #345]: #347
#351 := [monotonicity #348]: #350
#354 := [quant-intro #351]: #353
#301 := (~ #284 #284)
#315 := (~ #281 #281)
#316 := [refl]: #315
#302 := [nnf-pos #316]: #301
#45 := (- #21)
#44 := (- #32)
#53 := (mod #44 #45)
#54 := (- #53)
#38 := (< 0::Int #21)
#40 := (< #32 0::Int)
#41 := (and #40 #38)
#37 := (< 0::Int #32)
#39 := (and #37 #38)
#42 := (or #39 #41)
#55 := (ite #42 #52 #54)
#56 := (ite #34 0::Int #55)
#57 := (ite #35 #32 #56)
#58 := (= #51 #57)
#59 := (forall (vars (?v0 Int) (?v1 Int)) #58)
#287 := (iff #59 #284)
#175 := (and #38 #40)
#178 := (or #39 #175)
#257 := (ite #178 #52 #252)
#166 := (= 0::Int #32)
#260 := (ite #166 0::Int #257)
#169 := (= 0::Int #21)
#263 := (ite #169 #32 #260)
#266 := (= #51 #263)
#269 := (forall (vars (?v0 Int) (?v1 Int)) #266)
#285 := (iff #269 #284)
#282 := (iff #266 #281)
#279 := (= #263 #278)
#276 := (= #260 #275)
#273 := (= #257 #272)
#228 := (iff #178 #227)
#225 := (iff #175 #224)
#222 := (iff #40 #221)
#223 := [rewrite]: #222
#215 := (iff #38 #214)
#216 := [rewrite]: #215
#226 := [monotonicity #216 #223]: #225
#218 := (iff #39 #217)
#211 := (iff #37 #210)
#212 := [rewrite]: #211
#219 := [monotonicity #212 #216]: #218
#229 := [monotonicity #219 #226]: #228
#274 := [monotonicity #229]: #273
#203 := (iff #166 #34)
#204 := [rewrite]: #203
#277 := [monotonicity #204 #274]: #276
#205 := (iff #169 #35)
#206 := [rewrite]: #205
#280 := [monotonicity #206 #277]: #279
#283 := [monotonicity #280]: #282
#286 := [quant-intro #283]: #285
#270 := (iff #59 #269)
#267 := (iff #58 #266)
#264 := (= #57 #263)
#261 := (= #56 #260)
#258 := (= #55 #257)
#255 := (= #54 #252)
#249 := (- #246)
#253 := (= #249 #252)
#254 := [rewrite]: #253
#250 := (= #54 #249)
#247 := (= #53 #246)
#186 := (= #45 #185)
#187 := [rewrite]: #186
#183 := (= #44 #182)
#184 := [rewrite]: #183
#248 := [monotonicity #184 #187]: #247
#251 := [monotonicity #248]: #250
#256 := [trans #251 #254]: #255
#179 := (iff #42 #178)
#176 := (iff #41 #175)
#177 := [rewrite]: #176
#180 := [monotonicity #177]: #179
#259 := [monotonicity #180 #256]: #258
#167 := (iff #34 #166)
#168 := [rewrite]: #167
#262 := [monotonicity #168 #259]: #261
#170 := (iff #35 #169)
#171 := [rewrite]: #170
#265 := [monotonicity #171 #262]: #264
#268 := [monotonicity #265]: #267
#271 := [quant-intro #268]: #270
#288 := [trans #271 #286]: #287
#245 := [asserted]: #59
#289 := [mp #245 #288]: #284
#317 := [mp~ #289 #302]: #284
#355 := [mp #317 #354]: #352
#386 := [mp #355 #385]: #383
#891 := [mp #386 #890]: #886
#709 := (not #886)
#677 := (or #709 #797)
#814 := (* -1::Int 3::Int)
#809 := (* -1::Int 1::Int)
#810 := (mod #809 #814)
#815 := (+ #10 #810)
#816 := (= #815 0::Int)
#811 := (mod 1::Int 3::Int)
#817 := (* -1::Int #811)
#658 := (+ #10 #817)
#659 := (= #658 0::Int)
#835 := (>= 1::Int 0::Int)
#660 := (<= 3::Int 0::Int)
#802 := (or #660 #835)
#803 := (not #802)
#804 := (<= 1::Int 0::Int)
#805 := (or #804 #660)
#799 := (not #805)
#800 := (or #799 #803)
#806 := (ite #800 #659 #816)
#807 := (= #10 0::Int)
#801 := (= 1::Int 0::Int)
#808 := (ite #801 #807 #806)
#637 := (= 1::Int #10)
#639 := (= 3::Int 0::Int)
#640 := (ite #639 #637 #808)
#684 := (or #709 #640)
#674 := (iff #684 #677)
#678 := (iff #677 #677)
#685 := [rewrite]: #678
#708 := (iff #640 #797)
#701 := (ite false #797 #797)
#683 := (iff #701 #797)
#707 := [rewrite]: #683
#647 := (iff #640 #701)
#716 := (iff #808 #797)
#714 := (ite false #807 #797)
#719 := (iff #714 #797)
#720 := [rewrite]: #719
#715 := (iff #808 #714)
#717 := (iff #806 #797)
#729 := -2::Int
#730 := (= #10 -2::Int)
#1 := true
#706 := (ite true #797 #730)
#711 := (iff #706 #797)
#712 := [rewrite]: #711
#599 := (iff #806 #706)
#704 := (iff #816 #730)
#754 := 2::Int
#734 := (+ 2::Int #10)
#724 := (= #734 0::Int)
#725 := (iff #724 #730)
#731 := [rewrite]: #725
#727 := (iff #816 #724)
#722 := (= #815 #734)
#737 := (+ #10 2::Int)
#740 := (= #737 #734)
#726 := [rewrite]: #740
#738 := (= #815 #737)
#735 := (= #810 2::Int)
#749 := -3::Int
#752 := (mod -1::Int -3::Int)
#732 := (= #752 2::Int)
#733 := [rewrite]: #732
#753 := (= #810 #752)
#750 := (= #814 -3::Int)
#751 := [rewrite]: #750
#766 := (= #809 -1::Int)
#767 := [rewrite]: #766
#743 := [monotonicity #767 #751]: #753
#736 := [trans #743 #733]: #735
#739 := [monotonicity #736]: #738
#723 := [trans #739 #726]: #722
#728 := [monotonicity #723]: #727
#705 := [trans #728 #731]: #704
#747 := (iff #659 #797)
#758 := (+ -1::Int #10)
#741 := (= #758 0::Int)
#745 := (iff #741 #797)
#746 := [rewrite]: #745
#742 := (iff #659 #741)
#757 := (= #658 #758)
#769 := (+ #10 -1::Int)
#759 := (= #769 #758)
#760 := [rewrite]: #759
#755 := (= #658 #769)
#768 := (= #817 -1::Int)
#763 := (= #817 #809)
#778 := (= #811 1::Int)
#762 := [rewrite]: #778
#765 := [monotonicity #762]: #763
#764 := [trans #765 #767]: #768
#756 := [monotonicity #764]: #755
#761 := [trans #756 #760]: #757
#744 := [monotonicity #761]: #742
#748 := [trans #744 #746]: #747
#777 := (iff #800 true)
#780 := (or true false)
#775 := (iff #780 true)
#776 := [rewrite]: #775
#785 := (iff #800 #780)
#783 := (iff #803 false)
#483 := (not true)
#844 := (iff #483 false)
#830 := [rewrite]: #844
#772 := (iff #803 #483)
#773 := (iff #802 true)
#791 := (or false true)
#779 := (iff #791 true)
#781 := [rewrite]: #779
#788 := (iff #802 #791)
#842 := (iff #835 true)
#482 := [rewrite]: #842
#641 := (iff #660 false)
#789 := [rewrite]: #641
#792 := [monotonicity #789 #482]: #788
#770 := [trans #792 #781]: #773
#782 := [monotonicity #770]: #772
#784 := [trans #782 #830]: #783
#697 := (iff #799 true)
#693 := (not false)
#695 := (iff #693 true)
#696 := [rewrite]: #695
#686 := (iff #799 #693)
#690 := (iff #805 false)
#691 := (or false false)
#790 := (iff #691 false)
#675 := [rewrite]: #790
#786 := (iff #805 #691)
#681 := (iff #804 false)
#682 := [rewrite]: #681
#787 := [monotonicity #682 #789]: #786
#692 := [trans #787 #675]: #690
#694 := [monotonicity #692]: #686
#698 := [trans #694 #696]: #697
#774 := [monotonicity #698 #784]: #785
#771 := [trans #774 #776]: #777
#710 := [monotonicity #771 #748 #705]: #599
#713 := [trans #710 #712]: #717
#798 := (iff #801 false)
#680 := [rewrite]: #798
#718 := [monotonicity #680 #713]: #715
#721 := [trans #718 #720]: #716
#796 := (iff #637 #797)
#795 := [rewrite]: #796
#793 := (iff #639 false)
#794 := [rewrite]: #793
#702 := [monotonicity #794 #795 #721]: #647
#703 := [trans #702 #707]: #708
#676 := [monotonicity #703]: #674
#687 := [trans #676 #685]: #674
#643 := [quant-inst #8 #9]: #684
#688 := [mp #643 #687]: #677
#679 := [unit-resolution #688 #891]: #797
#700 := [monotonicity #679]: #13
#14 := (not #13)
#79 := [asserted]: #14
[unit-resolution #79 #700]: false
unsat
1120ebc08fbef118a46bc94c7a17d1ff3c4dbb08 311 0
#2 := false
decl f3 :: (-> Int S2)
#11 := 0::Int
#12 := (f3 0::Int)
decl f4 :: (-> Int Int Int)
#8 := 3::Int
#9 := (f4 3::Int 3::Int)
#10 := (f3 #9)
#13 := (= #10 #12)
#799 := (= #9 0::Int)
#20 := (:var 0 Int)
#31 := (:var 1 Int)
#50 := (f4 #31 #20)
#885 := (pattern #50)
#180 := -1::Int
#184 := (* -1::Int #20)
#181 := (* -1::Int #31)
#245 := (mod #181 #184)
#375 := (+ #50 #245)
#376 := (= #375 0::Int)
#51 := (mod #31 #20)
#372 := (* -1::Int #51)
#373 := (+ #50 #372)
#374 := (= #373 0::Int)
#219 := (>= #31 0::Int)
#212 := (<= #20 0::Int)
#319 := (or #212 #219)
#320 := (not #319)
#208 := (<= #31 0::Int)
#317 := (or #208 #212)
#318 := (not #317)
#323 := (or #318 #320)
#377 := (ite #323 #374 #376)
#371 := (= #50 0::Int)
#33 := (= #31 0::Int)
#378 := (ite #33 #371 #377)
#370 := (= #31 #50)
#34 := (= #20 0::Int)
#379 := (ite #34 #370 #378)
#886 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #885) #379)
#382 := (forall (vars (?v0 Int) (?v1 Int)) #379)
#889 := (iff #382 #886)
#887 := (iff #379 #379)
#888 := [refl]: #887
#890 := [quant-intro #888]: #889
#251 := (* -1::Int #245)
#339 := (ite #323 #51 #251)
#342 := (ite #33 0::Int #339)
#345 := (ite #34 #31 #342)
#348 := (= #50 #345)
#351 := (forall (vars (?v0 Int) (?v1 Int)) #348)
#383 := (iff #351 #382)
#380 := (iff #348 #379)
#381 := [rewrite]: #380
#384 := [quant-intro #381]: #383
#220 := (not #219)
#213 := (not #212)
#223 := (and #213 #220)
#209 := (not #208)
#216 := (and #209 #213)
#226 := (or #216 #223)
#271 := (ite #226 #51 #251)
#274 := (ite #33 0::Int #271)
#277 := (ite #34 #31 #274)
#280 := (= #50 #277)
#283 := (forall (vars (?v0 Int) (?v1 Int)) #280)
#352 := (iff #283 #351)
#349 := (iff #280 #348)
#346 := (= #277 #345)
#343 := (= #274 #342)
#340 := (= #271 #339)
#324 := (iff #226 #323)
#321 := (iff #223 #320)
#322 := [rewrite]: #321
#302 := (iff #216 #318)
#303 := [rewrite]: #302
#325 := [monotonicity #303 #322]: #324
#341 := [monotonicity #325]: #340
#344 := [monotonicity #341]: #343
#347 := [monotonicity #344]: #346
#350 := [monotonicity #347]: #349
#353 := [quant-intro #350]: #352
#300 := (~ #283 #283)
#314 := (~ #280 #280)
#315 := [refl]: #314
#301 := [nnf-pos #315]: #300
#44 := (- #20)
#43 := (- #31)
#52 := (mod #43 #44)
#53 := (- #52)
#37 := (< 0::Int #20)
#39 := (< #31 0::Int)
#40 := (and #39 #37)
#36 := (< 0::Int #31)
#38 := (and #36 #37)
#41 := (or #38 #40)
#54 := (ite #41 #51 #53)
#55 := (ite #33 0::Int #54)
#56 := (ite #34 #31 #55)
#57 := (= #50 #56)
#58 := (forall (vars (?v0 Int) (?v1 Int)) #57)
#286 := (iff #58 #283)
#174 := (and #37 #39)
#177 := (or #38 #174)
#256 := (ite #177 #51 #251)
#165 := (= 0::Int #31)
#259 := (ite #165 0::Int #256)
#168 := (= 0::Int #20)
#262 := (ite #168 #31 #259)
#265 := (= #50 #262)
#268 := (forall (vars (?v0 Int) (?v1 Int)) #265)
#284 := (iff #268 #283)
#281 := (iff #265 #280)
#278 := (= #262 #277)
#275 := (= #259 #274)
#272 := (= #256 #271)
#227 := (iff #177 #226)
#224 := (iff #174 #223)
#221 := (iff #39 #220)
#222 := [rewrite]: #221
#214 := (iff #37 #213)
#215 := [rewrite]: #214
#225 := [monotonicity #215 #222]: #224
#217 := (iff #38 #216)
#210 := (iff #36 #209)
#211 := [rewrite]: #210
#218 := [monotonicity #211 #215]: #217
#228 := [monotonicity #218 #225]: #227
#273 := [monotonicity #228]: #272
#202 := (iff #165 #33)
#203 := [rewrite]: #202
#276 := [monotonicity #203 #273]: #275
#204 := (iff #168 #34)
#205 := [rewrite]: #204
#279 := [monotonicity #205 #276]: #278
#282 := [monotonicity #279]: #281
#285 := [quant-intro #282]: #284
#269 := (iff #58 #268)
#266 := (iff #57 #265)
#263 := (= #56 #262)
#260 := (= #55 #259)
#257 := (= #54 #256)
#254 := (= #53 #251)
#248 := (- #245)
#252 := (= #248 #251)
#253 := [rewrite]: #252
#249 := (= #53 #248)
#246 := (= #52 #245)
#185 := (= #44 #184)
#186 := [rewrite]: #185
#182 := (= #43 #181)
#183 := [rewrite]: #182
#247 := [monotonicity #183 #186]: #246
#250 := [monotonicity #247]: #249
#255 := [trans #250 #253]: #254
#178 := (iff #41 #177)
#175 := (iff #40 #174)
#176 := [rewrite]: #175
#179 := [monotonicity #176]: #178
#258 := [monotonicity #179 #255]: #257
#166 := (iff #33 #165)
#167 := [rewrite]: #166
#261 := [monotonicity #167 #258]: #260
#169 := (iff #34 #168)
#170 := [rewrite]: #169
#264 := [monotonicity #170 #261]: #263
#267 := [monotonicity #264]: #266
#270 := [quant-intro #267]: #269
#287 := [trans #270 #285]: #286
#244 := [asserted]: #58
#288 := [mp #244 #287]: #283
#316 := [mp~ #288 #301]: #283
#354 := [mp #316 #353]: #351
#385 := [mp #354 #384]: #382
#891 := [mp #385 #890]: #886
#704 := (not #886)
#705 := (or #704 #799)
#812 := (* -1::Int 3::Int)
#813 := (mod #812 #812)
#814 := (+ #9 #813)
#809 := (= #814 0::Int)
#810 := (mod 3::Int 3::Int)
#815 := (* -1::Int #810)
#816 := (+ #9 #815)
#811 := (= #816 0::Int)
#817 := (>= 3::Int 0::Int)
#658 := (<= 3::Int 0::Int)
#659 := (or #658 #817)
#660 := (not #659)
#802 := (or #658 #658)
#803 := (not #802)
#804 := (or #803 #660)
#805 := (ite #804 #811 #809)
#800 := (= 3::Int 0::Int)
#806 := (ite #800 #799 #805)
#807 := (= 3::Int #9)
#801 := (ite #800 #807 #806)
#706 := (or #704 #801)
#710 := (iff #706 #705)
#712 := (iff #705 #705)
#717 := [rewrite]: #712
#725 := (iff #801 #799)
#640 := (= #9 3::Int)
#724 := (ite false #640 #799)
#729 := (iff #724 #799)
#730 := [rewrite]: #729
#727 := (iff #801 #724)
#722 := (iff #806 #799)
#738 := (ite false #799 #799)
#740 := (iff #738 #799)
#726 := [rewrite]: #740
#739 := (iff #806 #738)
#736 := (iff #805 #799)
#1 := true
#743 := (ite true #799 #799)
#733 := (iff #743 #799)
#735 := [rewrite]: #733
#754 := (iff #805 #743)
#752 := (iff #809 #799)
#750 := (= #814 #9)
#765 := (+ #9 0::Int)
#768 := (= #765 #9)
#764 := [rewrite]: #768
#748 := (= #814 #765)
#746 := (= #813 0::Int)
#759 := -3::Int
#761 := (mod -3::Int -3::Int)
#744 := (= #761 0::Int)
#745 := [rewrite]: #744
#741 := (= #813 #761)
#760 := (= #812 -3::Int)
#757 := [rewrite]: #760
#742 := [monotonicity #757 #757]: #741
#747 := [trans #742 #745]: #746
#749 := [monotonicity #747]: #748
#751 := [trans #749 #764]: #750
#753 := [monotonicity #751]: #752
#756 := (iff #811 #799)
#769 := (= #816 #9)
#766 := (= #816 #765)
#762 := (= #815 0::Int)
#775 := (* -1::Int 0::Int)
#771 := (= #775 0::Int)
#778 := [rewrite]: #771
#776 := (= #815 #775)
#785 := (= #810 0::Int)
#774 := [rewrite]: #785
#777 := [monotonicity #774]: #776
#763 := [trans #777 #778]: #762
#767 := [monotonicity #763]: #766
#755 := [trans #767 #764]: #769
#758 := [monotonicity #755]: #756
#784 := (iff #804 true)
#773 := (or true false)
#782 := (iff #773 true)
#783 := [rewrite]: #782
#770 := (iff #804 #773)
#779 := (iff #660 false)
#482 := (not true)
#841 := (iff #482 false)
#844 := [rewrite]: #841
#788 := (iff #660 #482)
#698 := (iff #659 true)
#686 := (or false true)
#696 := (iff #686 true)
#697 := [rewrite]: #696
#694 := (iff #659 #686)
#692 := (iff #817 true)
#693 := [rewrite]: #692
#794 := (iff #658 false)
#796 := [rewrite]: #794
#695 := [monotonicity #796 #693]: #694
#791 := [trans #695 #697]: #698
#792 := [monotonicity #791]: #788
#781 := [trans #792 #844]: #779
#675 := (iff #803 true)
#789 := (not false)
#787 := (iff #789 true)
#790 := [rewrite]: #787
#691 := (iff #803 #789)
#682 := (iff #802 false)
#797 := (or false false)
#680 := (iff #797 false)
#681 := [rewrite]: #680
#795 := (iff #802 #797)
#798 := [monotonicity #796 #796]: #795
#641 := [trans #798 #681]: #682
#786 := [monotonicity #641]: #691
#690 := [trans #786 #790]: #675
#772 := [monotonicity #690 #781]: #770
#780 := [trans #772 #783]: #784
#732 := [monotonicity #780 #758 #753]: #754
#737 := [trans #732 #735]: #736
#808 := (iff #800 false)
#637 := [rewrite]: #808
#734 := [monotonicity #637 #737]: #739
#723 := [trans #734 #726]: #722
#639 := (iff #807 #640)
#793 := [rewrite]: #639
#728 := [monotonicity #637 #793 #723]: #727
#731 := [trans #728 #730]: #725
#711 := [monotonicity #731]: #710
#713 := [trans #711 #717]: #710
#599 := [quant-inst #8 #8]: #706
#714 := [mp #599 #713]: #705
#718 := [unit-resolution #714 #891]: #799
#719 := [monotonicity #718]: #13
#14 := (not #13)
#78 := [asserted]: #14
[unit-resolution #78 #719]: false
unsat
f05688f0b5f9f483f17f9e461ed5ff3d814bfbb3 452 0
#2 := false
#10 := 3::Int
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#547 := (mod #9 3::Int)
#741 := (>= #547 3::Int)
#742 := (not #741)
#1 := true
#76 := [true-axiom]: true
#729 := (or false #742)
#725 := [th-lemma arith]: #729
#726 := [unit-resolution #725 #76]: #742
#19 := 0::Int
#192 := -1::Int
#526 := (* -1::Int #547)
decl f3 :: (-> Int Int Int)
#11 := (f3 #9 3::Int)
#861 := (+ #11 #526)
#808 := (<= #861 0::Int)
#863 := (= #861 0::Int)
#561 := -3::Int
#542 := (* -1::Int #9)
#840 := (mod #542 -3::Int)
#551 := (+ #11 #840)
#554 := (= #551 0::Int)
#532 := (<= #9 0::Int)
#849 := (not #532)
#520 := (>= #9 0::Int)
#853 := (not #520)
#567 := (or #853 #849)
#548 := (ite #567 #863 #554)
#862 := (= #11 0::Int)
#868 := (= #9 0::Int)
#831 := (ite #868 #862 #548)
#20 := (:var 0 Int)
#31 := (:var 1 Int)
#50 := (f3 #31 #20)
#897 := (pattern #50)
#196 := (* -1::Int #20)
#193 := (* -1::Int #31)
#257 := (mod #193 #196)
#387 := (+ #50 #257)
#388 := (= #387 0::Int)
#51 := (mod #31 #20)
#384 := (* -1::Int #51)
#385 := (+ #50 #384)
#386 := (= #385 0::Int)
#231 := (>= #31 0::Int)
#224 := (<= #20 0::Int)
#331 := (or #224 #231)
#332 := (not #331)
#220 := (<= #31 0::Int)
#329 := (or #220 #224)
#330 := (not #329)
#335 := (or #330 #332)
#389 := (ite #335 #386 #388)
#383 := (= #50 0::Int)
#33 := (= #31 0::Int)
#390 := (ite #33 #383 #389)
#382 := (= #31 #50)
#34 := (= #20 0::Int)
#391 := (ite #34 #382 #390)
#898 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #897) #391)
#394 := (forall (vars (?v0 Int) (?v1 Int)) #391)
#901 := (iff #394 #898)
#899 := (iff #391 #391)
#900 := [refl]: #899
#902 := [quant-intro #900]: #901
#263 := (* -1::Int #257)
#351 := (ite #335 #51 #263)
#354 := (ite #33 0::Int #351)
#357 := (ite #34 #31 #354)
#360 := (= #50 #357)
#363 := (forall (vars (?v0 Int) (?v1 Int)) #360)
#395 := (iff #363 #394)
#392 := (iff #360 #391)
#393 := [rewrite]: #392
#396 := [quant-intro #393]: #395
#232 := (not #231)
#225 := (not #224)
#235 := (and #225 #232)
#221 := (not #220)
#228 := (and #221 #225)
#238 := (or #228 #235)
#283 := (ite #238 #51 #263)
#286 := (ite #33 0::Int #283)
#289 := (ite #34 #31 #286)
#292 := (= #50 #289)
#295 := (forall (vars (?v0 Int) (?v1 Int)) #292)
#364 := (iff #295 #363)
#361 := (iff #292 #360)
#358 := (= #289 #357)
#355 := (= #286 #354)
#352 := (= #283 #351)
#336 := (iff #238 #335)
#333 := (iff #235 #332)
#334 := [rewrite]: #333
#314 := (iff #228 #330)
#315 := [rewrite]: #314
#337 := [monotonicity #315 #334]: #336
#353 := [monotonicity #337]: #352
#356 := [monotonicity #353]: #355
#359 := [monotonicity #356]: #358
#362 := [monotonicity #359]: #361
#365 := [quant-intro #362]: #364
#312 := (~ #295 #295)
#326 := (~ #292 #292)
#327 := [refl]: #326
#313 := [nnf-pos #327]: #312
#44 := (- #20)
#43 := (- #31)
#52 := (mod #43 #44)
#53 := (- #52)
#37 := (< 0::Int #20)
#39 := (< #31 0::Int)
#40 := (and #39 #37)
#36 := (< 0::Int #31)
#38 := (and #36 #37)
#41 := (or #38 #40)
#54 := (ite #41 #51 #53)
#55 := (ite #33 0::Int #54)
#56 := (ite #34 #31 #55)
#57 := (= #50 #56)
#58 := (forall (vars (?v0 Int) (?v1 Int)) #57)
#298 := (iff #58 #295)
#186 := (and #37 #39)
#189 := (or #38 #186)
#268 := (ite #189 #51 #263)
#177 := (= 0::Int #31)
#271 := (ite #177 0::Int #268)
#180 := (= 0::Int #20)
#274 := (ite #180 #31 #271)
#277 := (= #50 #274)
#280 := (forall (vars (?v0 Int) (?v1 Int)) #277)
#296 := (iff #280 #295)
#293 := (iff #277 #292)
#290 := (= #274 #289)
#287 := (= #271 #286)
#284 := (= #268 #283)
#239 := (iff #189 #238)
#236 := (iff #186 #235)
#233 := (iff #39 #232)
#234 := [rewrite]: #233
#226 := (iff #37 #225)
#227 := [rewrite]: #226
#237 := [monotonicity #227 #234]: #236
#229 := (iff #38 #228)
#222 := (iff #36 #221)
#223 := [rewrite]: #222
#230 := [monotonicity #223 #227]: #229
#240 := [monotonicity #230 #237]: #239
#285 := [monotonicity #240]: #284
#214 := (iff #177 #33)
#215 := [rewrite]: #214
#288 := [monotonicity #215 #285]: #287
#216 := (iff #180 #34)
#217 := [rewrite]: #216
#291 := [monotonicity #217 #288]: #290
#294 := [monotonicity #291]: #293
#297 := [quant-intro #294]: #296
#281 := (iff #58 #280)
#278 := (iff #57 #277)
#275 := (= #56 #274)
#272 := (= #55 #271)
#269 := (= #54 #268)
#266 := (= #53 #263)
#260 := (- #257)
#264 := (= #260 #263)
#265 := [rewrite]: #264
#261 := (= #53 #260)
#258 := (= #52 #257)
#197 := (= #44 #196)
#198 := [rewrite]: #197
#194 := (= #43 #193)
#195 := [rewrite]: #194
#259 := [monotonicity #195 #198]: #258
#262 := [monotonicity #259]: #261
#267 := [trans #262 #265]: #266
#190 := (iff #41 #189)
#187 := (iff #40 #186)
#188 := [rewrite]: #187
#191 := [monotonicity #188]: #190
#270 := [monotonicity #191 #267]: #269
#178 := (iff #33 #177)
#179 := [rewrite]: #178
#273 := [monotonicity #179 #270]: #272
#181 := (iff #34 #180)
#182 := [rewrite]: #181
#276 := [monotonicity #182 #273]: #275
#279 := [monotonicity #276]: #278
#282 := [quant-intro #279]: #281
#299 := [trans #282 #297]: #298
#256 := [asserted]: #58
#300 := [mp #256 #299]: #295
#328 := [mp~ #300 #313]: #295
#366 := [mp #328 #365]: #363
#397 := [mp #366 #396]: #394
#903 := [mp #397 #902]: #898
#829 := (not #898)
#670 := (or #829 #831)
#541 := (* -1::Int 3::Int)
#473 := (mod #542 #541)
#546 := (+ #11 #473)
#543 := (= #546 0::Int)
#650 := (<= 3::Int 0::Int)
#857 := (or #650 #520)
#531 := (not #857)
#864 := (or #532 #650)
#865 := (not #864)
#866 := (or #865 #531)
#867 := (ite #866 #863 #543)
#858 := (ite #868 #862 #867)
#518 := (= #9 #11)
#523 := (= 3::Int 0::Int)
#859 := (ite #523 #518 #858)
#671 := (or #829 #859)
#814 := (iff #671 #670)
#816 := (iff #670 #670)
#817 := [rewrite]: #816
#828 := (iff #859 #831)
#825 := (ite false #518 #831)
#822 := (iff #825 #831)
#827 := [rewrite]: #822
#826 := (iff #859 #825)
#835 := (iff #858 #831)
#830 := (iff #867 #548)
#832 := (iff #543 #554)
#552 := (= #546 #551)
#837 := (= #473 #840)
#562 := (= #541 -3::Int)
#836 := [rewrite]: #562
#841 := [monotonicity #836]: #837
#553 := [monotonicity #841]: #552
#833 := [monotonicity #553]: #832
#838 := (iff #866 #567)
#843 := (or #849 #853)
#568 := (iff #843 #567)
#461 := [rewrite]: #568
#565 := (iff #866 #843)
#856 := (iff #531 #853)
#495 := (iff #857 #520)
#851 := (or false #520)
#854 := (iff #851 #520)
#494 := [rewrite]: #854
#489 := (iff #857 #851)
#503 := (iff #650 false)
#844 := [rewrite]: #503
#852 := [monotonicity #844]: #489
#855 := [trans #852 #494]: #495
#842 := [monotonicity #855]: #856
#850 := (iff #865 #849)
#847 := (iff #864 #532)
#507 := (or #532 false)
#510 := (iff #507 #532)
#846 := [rewrite]: #510
#508 := (iff #864 #507)
#509 := [monotonicity #844]: #508
#848 := [trans #509 #846]: #847
#845 := [monotonicity #848]: #850
#566 := [monotonicity #845 #842]: #565
#839 := [trans #566 #461]: #838
#834 := [monotonicity #839 #833]: #830
#824 := [monotonicity #834]: #835
#519 := (iff #523 false)
#860 := [rewrite]: #519
#821 := [monotonicity #860 #824]: #826
#823 := [trans #821 #827]: #828
#815 := [monotonicity #823]: #814
#811 := [trans #815 #817]: #814
#672 := [quant-inst #9 #10]: #671
#812 := [mp #672 #811]: #670
#727 := [unit-resolution #812 #903]: #831
#705 := (not #868)
#704 := (not #831)
#714 := (or #704 #705)
#709 := (not #862)
#818 := (<= #11 0::Int)
#730 := (not #818)
#83 := (>= #11 3::Int)
#12 := (< #11 3::Int)
#13 := (not #12)
#90 := (iff #13 #83)
#81 := (not #83)
#85 := (not #81)
#88 := (iff #85 #83)
#89 := [rewrite]: #88
#86 := (iff #13 #85)
#82 := (iff #12 #81)
#84 := [rewrite]: #82
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#78 := [asserted]: #13
#92 := [mp #78 #91]: #83
#731 := (or #730 #81)
#732 := [th-lemma arith farkas 1 1]: #731
#728 := [unit-resolution #732 #92]: #730
#733 := (or #709 #818)
#713 := [th-lemma arith triangle-eq]: #733
#659 := [unit-resolution #713 #728]: #709
#698 := (or #704 #705 #862)
#706 := [def-axiom]: #698
#695 := [unit-resolution #706 #659]: #714
#719 := [unit-resolution #695 #727]: #705
#707 := (or #704 #868 #548)
#708 := [def-axiom]: #707
#720 := [unit-resolution #708 #719 #727]: #548
decl f6 :: (-> Int S2)
#455 := (f6 #9)
#791 := (f4 #455)
#793 := (= #791 0::Int)
#699 := (not #793)
#700 := (iff #705 #699)
#690 := (iff #868 #793)
#686 := (iff #793 #868)
#696 := (= #791 #9)
#721 := (= #455 f5)
#540 := (= f5 #455)
#14 := (:var 0 S2)
#15 := (f4 #14)
#869 := (pattern #15)
#16 := (f6 #15)
#80 := (= #14 #16)
#870 := (forall (vars (?v0 S2)) (:pat #869) #80)
#95 := (forall (vars (?v0 S2)) #80)
#871 := (iff #95 #870)
#873 := (iff #870 #870)
#874 := [rewrite]: #873
#872 := [rewrite]: #871
#875 := [trans #872 #874]: #871
#318 := (~ #95 #95)
#316 := (~ #80 #80)
#317 := [refl]: #316
#319 := [nnf-pos #317]: #318
#17 := (= #16 #14)
#18 := (forall (vars (?v0 S2)) #17)
#96 := (iff #18 #95)
#93 := (iff #17 #80)
#94 := [rewrite]: #93
#97 := [quant-intro #94]: #96
#79 := [asserted]: #18
#100 := [mp #79 #97]: #95
#304 := [mp~ #100 #319]: #95
#876 := [mp #304 #875]: #870
#533 := (not #870)
#544 := (or #533 #540)
#545 := [quant-inst #8]: #544
#715 := [unit-resolution #545 #876]: #540
#689 := [symm #715]: #721
#655 := [monotonicity #689]: #696
#688 := [monotonicity #655]: #686
#697 := [symm #688]: #690
#701 := [monotonicity #697]: #700
#711 := [mp #719 #701]: #699
#782 := (or #520 #793)
#22 := (f6 #20)
#877 := (pattern #22)
#117 := (>= #20 0::Int)
#23 := (f4 #22)
#28 := (= #23 0::Int)
#165 := (or #28 #117)
#884 := (forall (vars (?v0 Int)) (:pat #877) #165)
#170 := (forall (vars (?v0 Int)) #165)
#887 := (iff #170 #884)
#885 := (iff #165 #165)
#886 := [refl]: #885
#888 := [quant-intro #886]: #887
#308 := (~ #170 #170)
#320 := (~ #165 #165)
#321 := [refl]: #320
#309 := [nnf-pos #321]: #308
#27 := (< #20 0::Int)
#29 := (implies #27 #28)
#30 := (forall (vars (?v0 Int)) #29)
#173 := (iff #30 #170)
#136 := (= 0::Int #23)
#142 := (not #27)
#143 := (or #142 #136)
#148 := (forall (vars (?v0 Int)) #143)
#171 := (iff #148 #170)
#168 := (iff #143 #165)
#162 := (or #117 #28)
#166 := (iff #162 #165)
#167 := [rewrite]: #166
#163 := (iff #143 #162)
#160 := (iff #136 #28)
#161 := [rewrite]: #160
#158 := (iff #142 #117)
#118 := (not #117)
#153 := (not #118)
#156 := (iff #153 #117)
#157 := [rewrite]: #156
#154 := (iff #142 #153)
#151 := (iff #27 #118)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#159 := [trans #155 #157]: #158
#164 := [monotonicity #159 #161]: #163
#169 := [trans #164 #167]: #168
#172 := [quant-intro #169]: #171
#149 := (iff #30 #148)
#146 := (iff #29 #143)
#139 := (implies #27 #136)
#144 := (iff #139 #143)
#145 := [rewrite]: #144
#140 := (iff #29 #139)
#137 := (iff #28 #136)
#138 := [rewrite]: #137
#141 := [monotonicity #138]: #140
#147 := [trans #141 #145]: #146
#150 := [quant-intro #147]: #149
#174 := [trans #150 #172]: #173
#135 := [asserted]: #30
#175 := [mp #135 #174]: #170
#322 := [mp~ #175 #309]: #170
#889 := [mp #322 #888]: #884
#795 := (not #884)
#796 := (or #795 #520 #793)
#785 := (or #793 #520)
#792 := (or #795 #785)
#790 := (iff #792 #796)
#786 := (or #795 #782)
#789 := (iff #786 #796)
#783 := [rewrite]: #789
#787 := (iff #792 #786)
#784 := (iff #785 #782)
#794 := [rewrite]: #784
#788 := [monotonicity #794]: #787
#774 := [trans #788 #783]: #790
#797 := [quant-inst #9]: #792
#775 := [mp #797 #774]: #796
#691 := [unit-resolution #775 #889]: #782
#712 := [unit-resolution #691 #711]: #520
#667 := (or #868 #849 #853)
#668 := [th-lemma arith triangle-eq]: #667
#673 := [unit-resolution #668 #719]: #843
#674 := [unit-resolution #673 #712]: #849
#649 := (or #567 #532)
#651 := [def-axiom]: #649
#675 := [unit-resolution #651 #674]: #567
#652 := (not #567)
#692 := (not #548)
#693 := (or #692 #652 #863)
#694 := [def-axiom]: #693
#676 := [unit-resolution #694 #675 #720]: #863
#703 := (not #863)
#677 := (or #703 #808)
#678 := [th-lemma arith triangle-eq]: #677
#679 := [unit-resolution #678 #676]: #808
[th-lemma arith farkas -1 1 1 #92 #679 #726]: false
unsat
318d5be50bbd50da7b7b7962a11c2c98ae8be85c 662 0
#2 := false
#10 := 3::Int
decl f5 :: (-> S2 Int)
decl f6 :: S2
#8 := f6
#9 := (f5 f6)
#883 := (mod #9 3::Int)
#706 := (>= #883 3::Int)
#707 := (not #706)
#1 := true
#79 := [true-axiom]: true
#666 := (or false #707)
#667 := [th-lemma arith]: #666
#669 := [unit-resolution #667 #79]: #707
#104 := (>= #9 3::Int)
#102 := (not #104)
#619 := [hypothesis]: #102
#22 := 0::Int
#220 := -1::Int
#881 := (* -1::Int #883)
decl f4 :: (-> Int Int Int)
#11 := (f4 #9 3::Int)
#884 := (+ #11 #881)
#824 := (<= #884 0::Int)
#870 := (= #884 0::Int)
#864 := (= #9 0::Int)
#809 := (not #864)
decl f3 :: (-> Int S2)
#12 := (f3 #11)
#82 := (= f6 #12)
#572 := (not #82)
#574 := (or #572 #104)
#113 := (iff #82 #104)
#14 := (< #9 3::Int)
#13 := (= #12 f6)
#15 := (iff #13 #14)
#16 := (not #15)
#116 := (iff #16 #113)
#96 := (not #14)
#97 := (iff #82 #96)
#114 := (iff #97 #113)
#111 := (iff #96 #104)
#106 := (not #102)
#109 := (iff #106 #104)
#110 := [rewrite]: #109
#107 := (iff #96 #106)
#103 := (iff #14 #102)
#105 := [rewrite]: #103
#108 := [monotonicity #105]: #107
#112 := [trans #108 #110]: #111
#115 := [monotonicity #112]: #114
#100 := (iff #16 #97)
#88 := (iff #14 #82)
#93 := (not #88)
#98 := (iff #93 #97)
#99 := [rewrite]: #98
#94 := (iff #16 #93)
#91 := (iff #15 #88)
#85 := (iff #82 #14)
#89 := (iff #85 #88)
#90 := [rewrite]: #89
#86 := (iff #15 #85)
#83 := (iff #13 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#92 := [trans #87 #90]: #91
#95 := [monotonicity #92]: #94
#101 := [trans #95 #99]: #100
#117 := [trans #101 #115]: #116
#81 := [asserted]: #16
#118 := [mp #81 #117]: #113
#483 := (not #113)
#573 := (or #572 #104 #483)
#501 := [def-axiom]: #573
#571 := [unit-resolution #501 #118]: #574
#636 := [unit-resolution #571 #619]: #572
#753 := (or #809 #82)
#575 := (f3 #9)
#750 := (= #575 #12)
#746 := (= #12 #575)
#771 := (= #11 #9)
#770 := (= 0::Int #9)
#764 := [hypothesis]: #864
#765 := [symm #764]: #770
#590 := (= #11 0::Int)
#767 := (or #809 #590)
#840 := -3::Int
#880 := (* -1::Int #9)
#841 := (mod #880 -3::Int)
#679 := (+ #11 #841)
#834 := (= #679 0::Int)
#871 := (>= #9 0::Int)
#700 := (not #871)
#596 := (<= #9 0::Int)
#853 := (not #596)
#844 := (or #853 #700)
#835 := (ite #844 #870 #834)
#721 := (ite #864 #590 #835)
#23 := (:var 0 Int)
#34 := (:var 1 Int)
#53 := (f4 #34 #23)
#925 := (pattern #53)
#224 := (* -1::Int #23)
#221 := (* -1::Int #34)
#285 := (mod #221 #224)
#415 := (+ #53 #285)
#416 := (= #415 0::Int)
#54 := (mod #34 #23)
#412 := (* -1::Int #54)
#413 := (+ #53 #412)
#414 := (= #413 0::Int)
#259 := (>= #34 0::Int)
#252 := (<= #23 0::Int)
#359 := (or #252 #259)
#360 := (not #359)
#248 := (<= #34 0::Int)
#357 := (or #248 #252)
#358 := (not #357)
#363 := (or #358 #360)
#417 := (ite #363 #414 #416)
#411 := (= #53 0::Int)
#36 := (= #34 0::Int)
#418 := (ite #36 #411 #417)
#410 := (= #34 #53)
#37 := (= #23 0::Int)
#419 := (ite #37 #410 #418)
#926 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #925) #419)
#422 := (forall (vars (?v0 Int) (?v1 Int)) #419)
#929 := (iff #422 #926)
#927 := (iff #419 #419)
#928 := [refl]: #927
#930 := [quant-intro #928]: #929
#291 := (* -1::Int #285)
#379 := (ite #363 #54 #291)
#382 := (ite #36 0::Int #379)
#385 := (ite #37 #34 #382)
#388 := (= #53 #385)
#391 := (forall (vars (?v0 Int) (?v1 Int)) #388)
#423 := (iff #391 #422)
#420 := (iff #388 #419)
#421 := [rewrite]: #420
#424 := [quant-intro #421]: #423
#260 := (not #259)
#253 := (not #252)
#263 := (and #253 #260)
#249 := (not #248)
#256 := (and #249 #253)
#266 := (or #256 #263)
#311 := (ite #266 #54 #291)
#314 := (ite #36 0::Int #311)
#317 := (ite #37 #34 #314)
#320 := (= #53 #317)
#323 := (forall (vars (?v0 Int) (?v1 Int)) #320)
#392 := (iff #323 #391)
#389 := (iff #320 #388)
#386 := (= #317 #385)
#383 := (= #314 #382)
#380 := (= #311 #379)
#364 := (iff #266 #363)
#361 := (iff #263 #360)
#362 := [rewrite]: #361
#342 := (iff #256 #358)
#343 := [rewrite]: #342
#365 := [monotonicity #343 #362]: #364
#381 := [monotonicity #365]: #380
#384 := [monotonicity #381]: #383
#387 := [monotonicity #384]: #386
#390 := [monotonicity #387]: #389
#393 := [quant-intro #390]: #392
#340 := (~ #323 #323)
#354 := (~ #320 #320)
#355 := [refl]: #354
#341 := [nnf-pos #355]: #340
#47 := (- #23)
#46 := (- #34)
#55 := (mod #46 #47)
#56 := (- #55)
#40 := (< 0::Int #23)
#42 := (< #34 0::Int)
#43 := (and #42 #40)
#39 := (< 0::Int #34)
#41 := (and #39 #40)
#44 := (or #41 #43)
#57 := (ite #44 #54 #56)
#58 := (ite #36 0::Int #57)
#59 := (ite #37 #34 #58)
#60 := (= #53 #59)
#61 := (forall (vars (?v0 Int) (?v1 Int)) #60)
#326 := (iff #61 #323)
#214 := (and #40 #42)
#217 := (or #41 #214)
#296 := (ite #217 #54 #291)
#205 := (= 0::Int #34)
#299 := (ite #205 0::Int #296)
#208 := (= 0::Int #23)
#302 := (ite #208 #34 #299)
#305 := (= #53 #302)
#308 := (forall (vars (?v0 Int) (?v1 Int)) #305)
#324 := (iff #308 #323)
#321 := (iff #305 #320)
#318 := (= #302 #317)
#315 := (= #299 #314)
#312 := (= #296 #311)
#267 := (iff #217 #266)
#264 := (iff #214 #263)
#261 := (iff #42 #260)
#262 := [rewrite]: #261
#254 := (iff #40 #253)
#255 := [rewrite]: #254
#265 := [monotonicity #255 #262]: #264
#257 := (iff #41 #256)
#250 := (iff #39 #249)
#251 := [rewrite]: #250
#258 := [monotonicity #251 #255]: #257
#268 := [monotonicity #258 #265]: #267
#313 := [monotonicity #268]: #312
#242 := (iff #205 #36)
#243 := [rewrite]: #242
#316 := [monotonicity #243 #313]: #315
#244 := (iff #208 #37)
#245 := [rewrite]: #244
#319 := [monotonicity #245 #316]: #318
#322 := [monotonicity #319]: #321
#325 := [quant-intro #322]: #324
#309 := (iff #61 #308)
#306 := (iff #60 #305)
#303 := (= #59 #302)
#300 := (= #58 #299)
#297 := (= #57 #296)
#294 := (= #56 #291)
#288 := (- #285)
#292 := (= #288 #291)
#293 := [rewrite]: #292
#289 := (= #56 #288)
#286 := (= #55 #285)
#225 := (= #47 #224)
#226 := [rewrite]: #225
#222 := (= #46 #221)
#223 := [rewrite]: #222
#287 := [monotonicity #223 #226]: #286
#290 := [monotonicity #287]: #289
#295 := [trans #290 #293]: #294
#218 := (iff #44 #217)
#215 := (iff #43 #214)
#216 := [rewrite]: #215
#219 := [monotonicity #216]: #218
#298 := [monotonicity #219 #295]: #297
#206 := (iff #36 #205)
#207 := [rewrite]: #206
#301 := [monotonicity #207 #298]: #300
#209 := (iff #37 #208)
#210 := [rewrite]: #209
#304 := [monotonicity #210 #301]: #303
#307 := [monotonicity #304]: #306
#310 := [quant-intro #307]: #309
#327 := [trans #310 #325]: #326
#284 := [asserted]: #61
#328 := [mp #284 #327]: #323
#356 := [mp~ #328 #341]: #323
#394 := [mp #356 #393]: #391
#425 := [mp #394 #424]: #422
#931 := [mp #425 #930]: #926
#732 := (not #926)
#733 := (or #732 #721)
#517 := (* -1::Int 3::Int)
#882 := (mod #880 #517)
#522 := (+ #11 #882)
#523 := (= #522 0::Int)
#593 := (<= 3::Int 0::Int)
#594 := (or #593 #871)
#595 := (not #594)
#489 := (or #596 #593)
#866 := (not #489)
#867 := (or #866 #595)
#589 := (ite #867 #870 #523)
#868 := (ite #864 #590 #589)
#865 := (= #9 #11)
#869 := (= 3::Int 0::Int)
#579 := (ite #869 #865 #868)
#726 := (or #732 #579)
#735 := (iff #726 #733)
#737 := (iff #733 #733)
#738 := [rewrite]: #737
#715 := (iff #579 #721)
#829 := (ite false #865 #721)
#827 := (iff #829 #721)
#830 := [rewrite]: #827
#731 := (iff #579 #829)
#722 := (iff #868 #721)
#838 := (iff #589 #835)
#836 := (iff #523 #834)
#680 := (= #522 #679)
#848 := (= #882 #841)
#846 := (= #517 -3::Int)
#847 := [rewrite]: #846
#677 := [monotonicity #847]: #848
#833 := [monotonicity #677]: #680
#837 := [monotonicity #833]: #836
#845 := (iff #867 #844)
#842 := (iff #595 #700)
#698 := (iff #594 #871)
#850 := (or false #871)
#851 := (iff #850 #871)
#857 := [rewrite]: #851
#855 := (iff #594 #850)
#582 := (iff #593 false)
#860 := [rewrite]: #582
#856 := [monotonicity #860]: #855
#699 := [trans #856 #857]: #698
#843 := [monotonicity #699]: #842
#854 := (iff #866 #853)
#863 := (iff #489 #596)
#861 := (or #596 false)
#862 := (iff #861 #596)
#859 := [rewrite]: #862
#576 := (iff #489 #861)
#858 := [monotonicity #860]: #576
#852 := [trans #858 #859]: #863
#849 := [monotonicity #852]: #854
#839 := [monotonicity #849 #843]: #845
#720 := [monotonicity #839 #837]: #838
#681 := [monotonicity #720]: #722
#580 := (iff #869 false)
#581 := [rewrite]: #580
#826 := [monotonicity #581 #681]: #731
#730 := [trans #826 #830]: #715
#736 := [monotonicity #730]: #735
#831 := [trans #736 #738]: #735
#734 := [quant-inst #9 #10]: #726
#828 := [mp #734 #831]: #733
#794 := [unit-resolution #828 #931]: #721
#804 := (not #721)
#795 := (or #804 #809 #590)
#796 := [def-axiom]: #795
#768 := [unit-resolution #796 #794]: #767
#769 := [unit-resolution #768 #764]: #590
#744 := [trans #769 #765]: #771
#639 := [monotonicity #744]: #746
#751 := [symm #639]: #750
#554 := (= f6 #575)
#17 := (:var 0 S2)
#18 := (f5 #17)
#897 := (pattern #18)
#19 := (f3 #18)
#120 := (= #17 #19)
#898 := (forall (vars (?v0 S2)) (:pat #897) #120)
#123 := (forall (vars (?v0 S2)) #120)
#899 := (iff #123 #898)
#901 := (iff #898 #898)
#902 := [rewrite]: #901
#900 := [rewrite]: #899
#903 := [trans #900 #902]: #899
#346 := (~ #123 #123)
#344 := (~ #120 #120)
#345 := [refl]: #344
#347 := [nnf-pos #345]: #346
#20 := (= #19 #17)
#21 := (forall (vars (?v0 S2)) #20)
#124 := (iff #21 #123)
#121 := (iff #20 #120)
#122 := [rewrite]: #121
#125 := [quant-intro #122]: #124
#119 := [asserted]: #21
#128 := [mp #119 #125]: #123
#332 := [mp~ #128 #347]: #123
#904 := [mp #332 #903]: #898
#548 := (not #898)
#678 := (or #548 #554)
#885 := [quant-inst #8]: #678
#745 := [unit-resolution #885 #904]: #554
#752 := [trans #745 #751]: #82
#763 := [hypothesis]: #572
#757 := [unit-resolution #763 #752]: false
#754 := [lemma #757]: #753
#634 := [unit-resolution #754 #636]: #809
#766 := (or #864 #870)
#787 := [hypothesis]: #809
#812 := (not #844)
#802 := (not #870)
#788 := [hypothesis]: #802
#772 := (or #864 #835)
#798 := (or #804 #864 #835)
#799 := [def-axiom]: #798
#773 := [unit-resolution #799 #794]: #772
#775 := [unit-resolution #773 #787]: #835
#815 := (not #835)
#816 := (or #815 #812 #870)
#817 := [def-axiom]: #816
#776 := [unit-resolution #817 #775 #788]: #812
#819 := (or #844 #596)
#821 := [def-axiom]: #819
#777 := [unit-resolution #821 #776]: #596
#813 := (or #844 #871)
#810 := [def-axiom]: #813
#778 := [unit-resolution #810 #776]: #871
#779 := (or #864 #853 #700)
#774 := [th-lemma arith triangle-eq]: #779
#780 := [unit-resolution #774 #778 #777 #787]: false
#762 := [lemma #780]: #766
#623 := [unit-resolution #762 #634]: #870
#624 := (or #802 #824)
#625 := [th-lemma arith triangle-eq]: #624
#626 := [unit-resolution #625 #623]: #824
#755 := (div #9 3::Int)
#747 := (* -3::Int #755)
#748 := (+ #747 #881)
#743 := (+ #9 #748)
#724 := (<= #743 0::Int)
#723 := (= #743 0::Int)
#670 := (or false #723)
#671 := [th-lemma arith]: #670
#514 := [unit-resolution #671 #79]: #723
#672 := (not #723)
#668 := (or #672 #724)
#673 := [th-lemma arith triangle-eq]: #668
#652 := [unit-resolution #673 #514]: #724
#630 := 1::Int
#621 := -2::Int
#627 := (* -2::Int #755)
#628 := (+ #627 #881)
#629 := (+ #9 #628)
#631 := (>= #629 1::Int)
#682 := (* -1::Int #11)
#684 := (+ #9 #682)
#685 := (<= #684 0::Int)
#614 := (not #685)
#676 := (not #865)
#694 := (or #676 #82)
#688 := [hypothesis]: #865
#689 := [symm #688]: #771
#690 := [monotonicity #689]: #746
#691 := [symm #690]: #750
#692 := [trans #745 #691]: #82
#693 := [unit-resolution #763 #692]: false
#664 := [lemma #693]: #694
#608 := [unit-resolution #664 #636]: #676
#686 := (>= #684 0::Int)
#665 := (>= #755 0::Int)
#784 := (f5 #575)
#785 := (= #784 0::Int)
#600 := (not #785)
#601 := (iff #809 #600)
#599 := (iff #864 #785)
#597 := (iff #785 #864)
#604 := (= #784 #9)
#607 := (= #575 f6)
#606 := [symm #745]: #607
#605 := [monotonicity #606]: #604
#598 := [monotonicity #605]: #597
#591 := [symm #598]: #599
#592 := [monotonicity #591]: #601
#602 := [mp #634 #592]: #600
#786 := (or #785 #871)
#25 := (f3 #23)
#905 := (pattern #25)
#145 := (>= #23 0::Int)
#26 := (f5 #25)
#31 := (= #26 0::Int)
#193 := (or #31 #145)
#912 := (forall (vars (?v0 Int)) (:pat #905) #193)
#198 := (forall (vars (?v0 Int)) #193)
#915 := (iff #198 #912)
#913 := (iff #193 #193)
#914 := [refl]: #913
#916 := [quant-intro #914]: #915
#336 := (~ #198 #198)
#348 := (~ #193 #193)
#349 := [refl]: #348
#337 := [nnf-pos #349]: #336
#30 := (< #23 0::Int)
#32 := (implies #30 #31)
#33 := (forall (vars (?v0 Int)) #32)
#201 := (iff #33 #198)
#164 := (= 0::Int #26)
#170 := (not #30)
#171 := (or #170 #164)
#176 := (forall (vars (?v0 Int)) #171)
#199 := (iff #176 #198)
#196 := (iff #171 #193)
#190 := (or #145 #31)
#194 := (iff #190 #193)
#195 := [rewrite]: #194
#191 := (iff #171 #190)
#188 := (iff #164 #31)
#189 := [rewrite]: #188
#186 := (iff #170 #145)
#146 := (not #145)
#181 := (not #146)
#184 := (iff #181 #145)
#185 := [rewrite]: #184
#182 := (iff #170 #181)
#179 := (iff #30 #146)
#180 := [rewrite]: #179
#183 := [monotonicity #180]: #182
#187 := [trans #183 #185]: #186
#192 := [monotonicity #187 #189]: #191
#197 := [trans #192 #195]: #196
#200 := [quant-intro #197]: #199
#177 := (iff #33 #176)
#174 := (iff #32 #171)
#167 := (implies #30 #164)
#172 := (iff #167 #171)
#173 := [rewrite]: #172
#168 := (iff #32 #167)
#165 := (iff #31 #164)
#166 := [rewrite]: #165
#169 := [monotonicity #166]: #168
#175 := [trans #169 #173]: #174
#178 := [quant-intro #175]: #177
#202 := [trans #178 #200]: #201
#163 := [asserted]: #33
#203 := [mp #163 #202]: #198
#350 := [mp~ #203 #337]: #198
#917 := [mp #350 #916]: #912
#872 := (not #912)
#789 := (or #872 #785 #871)
#790 := (or #872 #786)
#792 := (iff #790 #789)
#793 := [rewrite]: #792
#791 := [quant-inst #9]: #790
#783 := [mp #791 #793]: #789
#583 := [unit-resolution #783 #917]: #786
#584 := [unit-resolution #583 #602]: #871
#660 := (or #665 #700)
#655 := (not #665)
#659 := [hypothesis]: #655
#661 := [hypothesis]: #871
#662 := [th-lemma arith farkas 1 3 1 1 #661 #659 #652 #669]: false
#663 := [lemma #662]: #660
#585 := [unit-resolution #663 #584]: #665
#648 := (not #824)
#633 := (or #686 #648 #655)
#656 := (not #686)
#657 := [hypothesis]: #656
#683 := (>= #743 0::Int)
#642 := (or #672 #683)
#650 := [th-lemma arith triangle-eq]: #642
#643 := [unit-resolution #650 #514]: #683
#646 := [hypothesis]: #665
#654 := [hypothesis]: #824
#647 := [th-lemma arith farkas 1 -3 -1 1 #654 #646 #643 #657]: false
#635 := [lemma #647]: #633
#577 := [unit-resolution #635 #626 #585]: #686
#586 := (or #865 #614 #656)
#587 := [th-lemma arith triangle-eq]: #586
#578 := [unit-resolution #587 #577 #608]: #614
#820 := (>= #884 0::Int)
#588 := (or #802 #820)
#555 := [th-lemma arith triangle-eq]: #588
#557 := [unit-resolution #555 #623]: #820
#610 := (not #820)
#618 := (or #631 #610 #685)
#609 := (not #631)
#613 := [hypothesis]: #609
#615 := [hypothesis]: #614
#616 := [hypothesis]: #820
#617 := [th-lemma arith farkas -2/3 -1/3 -1/3 1 #643 #616 #615 #613]: false
#603 := [lemma #617]: #618
#558 := [unit-resolution #603 #557 #578]: #631
#889 := (>= #11 0::Int)
#714 := (>= #883 0::Int)
#549 := (or false #714)
#562 := [th-lemma arith]: #549
#563 := [unit-resolution #562 #79]: #714
#564 := (not #714)
#565 := (or #889 #564 #610)
#566 := [th-lemma arith assign-bounds 1 1]: #565
#556 := [unit-resolution #566 #557 #563]: #889
#567 := [th-lemma arith farkas -1 -3 2 1 1 #556 #558 #652 #626 #619]: false
#550 := [lemma #567]: #104
#559 := (f5 #12)
#560 := (= #11 #559)
#521 := (iff #560 #865)
#518 := (iff #771 #865)
#520 := [commutativity]: #518
#527 := (iff #560 #771)
#528 := (= #559 #9)
#570 := (or #82 #102)
#568 := (or #82 #102 #483)
#569 := [def-axiom]: #568
#561 := [unit-resolution #569 #118]: #570
#545 := [unit-resolution #561 #550]: #82
#526 := [symm #545]: #13
#529 := [monotonicity #526]: #528
#530 := [monotonicity #529]: #527
#524 := [trans #530 #520]: #521
#552 := (or #853 #102)
#553 := [th-lemma arith farkas 1 1]: #552
#532 := [unit-resolution #553 #550]: #853
#534 := (or #809 #596)
#539 := [th-lemma arith triangle-eq]: #534
#540 := [unit-resolution #539 #532]: #809
#541 := [unit-resolution #762 #540]: #870
#542 := [unit-resolution #555 #541]: #820
#543 := [unit-resolution #566 #542 #563]: #889
#891 := (not #889)
#892 := (or #560 #891)
#127 := (= #23 #26)
#152 := (or #127 #146)
#906 := (forall (vars (?v0 Int)) (:pat #905) #152)
#157 := (forall (vars (?v0 Int)) #152)
#909 := (iff #157 #906)
#907 := (iff #152 #152)
#908 := [refl]: #907
#910 := [quant-intro #908]: #909
#334 := (~ #157 #157)
#333 := (~ #152 #152)
#330 := [refl]: #333
#335 := [nnf-pos #330]: #334
#27 := (= #26 #23)
#24 := (<= 0::Int #23)
#28 := (implies #24 #27)
#29 := (forall (vars (?v0 Int)) #28)
#160 := (iff #29 #157)
#134 := (not #24)
#135 := (or #134 #127)
#140 := (forall (vars (?v0 Int)) #135)
#158 := (iff #140 #157)
#155 := (iff #135 #152)
#149 := (or #146 #127)
#153 := (iff #149 #152)
#154 := [rewrite]: #153
#150 := (iff #135 #149)
#147 := (iff #134 #146)
#143 := (iff #24 #145)
#144 := [rewrite]: #143
#148 := [monotonicity #144]: #147
#151 := [monotonicity #148]: #150
#156 := [trans #151 #154]: #155
#159 := [quant-intro #156]: #158
#141 := (iff #29 #140)
#138 := (iff #28 #135)
#131 := (implies #24 #127)
#136 := (iff #131 #135)
#137 := [rewrite]: #136
#132 := (iff #28 #131)
#129 := (iff #27 #127)
#130 := [rewrite]: #129
#133 := [monotonicity #130]: #132
#139 := [trans #133 #137]: #138
#142 := [quant-intro #139]: #141
#161 := [trans #142 #159]: #160
#126 := [asserted]: #29
#162 := [mp #126 #161]: #157
#331 := [mp~ #162 #335]: #157
#911 := [mp #331 #910]: #906
#895 := (not #906)
#890 := (or #895 #560 #891)
#896 := (or #895 #892)
#546 := (iff #896 #890)
#551 := [rewrite]: #546
#886 := [quant-inst #11]: #896
#887 := [mp #886 #551]: #890
#544 := [unit-resolution #887 #911]: #892
#533 := [unit-resolution #544 #543]: #560
#519 := [mp #533 #524]: #865
#525 := (or #676 #685)
#499 := [th-lemma arith triangle-eq]: #525
#504 := [unit-resolution #499 #519]: #685
#505 := [unit-resolution #625 #541]: #824
[th-lemma arith farkas 1 1 -1 1 #505 #504 #550 #669]: false
unsat
bf4ed7a0c67dc55dd17034c099d4eaab353230e6 827 0
#2 := false
decl f4 :: (-> Int S2)
decl f7 :: (-> Int Int Int)
#10 := 1::Int
decl f6 :: (-> S2 Int)
decl f3 :: S2
#8 := f3
#9 := (f6 f3)
#13 := (f7 #9 1::Int)
decl f5 :: (-> Int Int Int)
#11 := (f5 #9 1::Int)
#85 := (+ #11 #13)
#88 := (f4 #85)
#91 := (= f3 #88)
#552 := (f6 #88)
#470 := (f4 #552)
#983 := (= #470 #88)
#473 := (= #88 #470)
#18 := (:var 0 S2)
#19 := (f6 #18)
#875 := (pattern #19)
#20 := (f4 #19)
#98 := (= #18 #20)
#876 := (forall (vars (?v0 S2)) (:pat #875) #98)
#102 := (forall (vars (?v0 S2)) #98)
#877 := (iff #102 #876)
#879 := (iff #876 #876)
#880 := [rewrite]: #879
#878 := [rewrite]: #877
#881 := [trans #878 #880]: #877
#325 := (~ #102 #102)
#323 := (~ #98 #98)
#324 := [refl]: #323
#326 := [nnf-pos #324]: #325
#21 := (= #20 #18)
#22 := (forall (vars (?v0 S2)) #21)
#103 := (iff #22 #102)
#100 := (iff #21 #98)
#101 := [rewrite]: #100
#104 := [quant-intro #101]: #103
#97 := [asserted]: #22
#107 := [mp #97 #104]: #102
#311 := [mp~ #107 #326]: #102
#882 := [mp #311 #881]: #876
#539 := (not #876)
#931 := (or #539 #473)
#932 := [quant-inst #88]: #931
#978 := [unit-resolution #932 #882]: #473
#984 := [symm #978]: #983
#985 := (= f3 #470)
#462 := (f4 #9)
#981 := (= #462 #470)
#979 := (= #470 #462)
#976 := (= #552 #9)
#23 := 0::Int
#974 := (= 0::Int #9)
#847 := (= #9 0::Int)
#935 := (= #462 #88)
#933 := (= #9 #85)
#916 := (= #11 #85)
#670 := (<= #13 0::Int)
#757 := (= #13 0::Int)
#844 := (<= #9 0::Int)
#676 := (not #844)
#572 := (>= #9 0::Int)
#825 := (not #572)
#718 := (or #825 #676 #847)
#494 := [hypothesis]: #825
#630 := (f6 #462)
#633 := (= #630 0::Int)
#510 := (iff #633 #847)
#530 := (= #630 #9)
#480 := (= #9 #630)
#546 := (= f3 #462)
#550 := (or #539 #546)
#551 := [quant-inst #8]: #550
#534 := [unit-resolution #551 #882]: #546
#481 := [monotonicity #534]: #480
#484 := [symm #481]: #530
#485 := [monotonicity #484]: #510
#639 := (or #572 #633)
#24 := (:var 0 Int)
#26 := (f4 #24)
#883 := (pattern #26)
#124 := (>= #24 0::Int)
#27 := (f6 #26)
#32 := (= #27 0::Int)
#172 := (or #32 #124)
#890 := (forall (vars (?v0 Int)) (:pat #883) #172)
#177 := (forall (vars (?v0 Int)) #172)
#893 := (iff #177 #890)
#891 := (iff #172 #172)
#892 := [refl]: #891
#894 := [quant-intro #892]: #893
#315 := (~ #177 #177)
#327 := (~ #172 #172)
#328 := [refl]: #327
#316 := [nnf-pos #328]: #315
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#180 := (iff #34 #177)
#143 := (= 0::Int #27)
#149 := (not #31)
#150 := (or #149 #143)
#155 := (forall (vars (?v0 Int)) #150)
#178 := (iff #155 #177)
#175 := (iff #150 #172)
#169 := (or #124 #32)
#173 := (iff #169 #172)
#174 := [rewrite]: #173
#170 := (iff #150 #169)
#167 := (iff #143 #32)
#168 := [rewrite]: #167
#165 := (iff #149 #124)
#125 := (not #124)
#160 := (not #125)
#163 := (iff #160 #124)
#164 := [rewrite]: #163
#161 := (iff #149 #160)
#158 := (iff #31 #125)
#159 := [rewrite]: #158
#162 := [monotonicity #159]: #161
#166 := [trans #162 #164]: #165
#171 := [monotonicity #166 #168]: #170
#176 := [trans #171 #174]: #175
#179 := [quant-intro #176]: #178
#156 := (iff #34 #155)
#153 := (iff #33 #150)
#146 := (implies #31 #143)
#151 := (iff #146 #150)
#152 := [rewrite]: #151
#147 := (iff #33 #146)
#144 := (iff #32 #143)
#145 := [rewrite]: #144
#148 := [monotonicity #145]: #147
#154 := [trans #148 #152]: #153
#157 := [quant-intro #154]: #156
#181 := [trans #157 #179]: #180
#142 := [asserted]: #34
#182 := [mp #142 #181]: #177
#329 := [mp~ #182 #316]: #177
#895 := [mp #329 #894]: #890
#853 := (not #890)
#641 := (or #853 #572 #633)
#637 := (or #633 #572)
#629 := (or #853 #637)
#616 := (iff #629 #641)
#634 := (or #853 #639)
#636 := (iff #634 #641)
#626 := [rewrite]: #636
#635 := (iff #629 #634)
#640 := (iff #637 #639)
#638 := [rewrite]: #640
#631 := [monotonicity #638]: #635
#618 := [trans #631 #626]: #616
#632 := [quant-inst #9]: #629
#619 := [mp #632 #618]: #641
#511 := [unit-resolution #619 #895]: #639
#477 := [unit-resolution #511 #494]: #633
#486 := [mp #477 #485]: #847
#763 := (not #847)
#479 := (or #763 #572)
#487 := [th-lemma arith triangle-eq]: #479
#472 := [unit-resolution #487 #486 #494]: false
#469 := [lemma #472]: #572
#474 := [hypothesis]: #763
#504 := (or #847 #676 #825)
#506 := [th-lemma arith triangle-eq]: #504
#475 := [unit-resolution #506 #474 #469]: #676
#662 := (or #718 #844)
#663 := [def-axiom]: #662
#463 := [unit-resolution #663 #475]: #718
#667 := (not #718)
#466 := (or #667 #757)
#199 := -1::Int
#852 := (* -1::Int #9)
#784 := (mod #852 -1::Int)
#736 := (+ #13 #784)
#734 := (= #736 0::Int)
#679 := (ite #718 #757 #734)
#35 := (:var 1 Int)
#54 := (f7 #35 #24)
#903 := (pattern #54)
#203 := (* -1::Int #24)
#200 := (* -1::Int #35)
#264 := (mod #200 #203)
#394 := (+ #54 #264)
#395 := (= #394 0::Int)
#55 := (mod #35 #24)
#391 := (* -1::Int #55)
#392 := (+ #54 #391)
#393 := (= #392 0::Int)
#238 := (>= #35 0::Int)
#231 := (<= #24 0::Int)
#338 := (or #231 #238)
#339 := (not #338)
#227 := (<= #35 0::Int)
#336 := (or #227 #231)
#337 := (not #336)
#342 := (or #337 #339)
#396 := (ite #342 #393 #395)
#390 := (= #54 0::Int)
#37 := (= #35 0::Int)
#397 := (ite #37 #390 #396)
#389 := (= #35 #54)
#38 := (= #24 0::Int)
#398 := (ite #38 #389 #397)
#904 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #903) #398)
#401 := (forall (vars (?v0 Int) (?v1 Int)) #398)
#907 := (iff #401 #904)
#905 := (iff #398 #398)
#906 := [refl]: #905
#908 := [quant-intro #906]: #907
#270 := (* -1::Int #264)
#358 := (ite #342 #55 #270)
#361 := (ite #37 0::Int #358)
#364 := (ite #38 #35 #361)
#367 := (= #54 #364)
#370 := (forall (vars (?v0 Int) (?v1 Int)) #367)
#402 := (iff #370 #401)
#399 := (iff #367 #398)
#400 := [rewrite]: #399
#403 := [quant-intro #400]: #402
#239 := (not #238)
#232 := (not #231)
#242 := (and #232 #239)
#228 := (not #227)
#235 := (and #228 #232)
#245 := (or #235 #242)
#290 := (ite #245 #55 #270)
#293 := (ite #37 0::Int #290)
#296 := (ite #38 #35 #293)
#299 := (= #54 #296)
#302 := (forall (vars (?v0 Int) (?v1 Int)) #299)
#371 := (iff #302 #370)
#368 := (iff #299 #367)
#365 := (= #296 #364)
#362 := (= #293 #361)
#359 := (= #290 #358)
#343 := (iff #245 #342)
#340 := (iff #242 #339)
#341 := [rewrite]: #340
#321 := (iff #235 #337)
#322 := [rewrite]: #321
#344 := [monotonicity #322 #341]: #343
#360 := [monotonicity #344]: #359
#363 := [monotonicity #360]: #362
#366 := [monotonicity #363]: #365
#369 := [monotonicity #366]: #368
#372 := [quant-intro #369]: #371
#319 := (~ #302 #302)
#333 := (~ #299 #299)
#334 := [refl]: #333
#320 := [nnf-pos #334]: #319
#48 := (- #24)
#47 := (- #35)
#56 := (mod #47 #48)
#57 := (- #56)
#41 := (< 0::Int #24)
#43 := (< #35 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #35)
#42 := (and #40 #41)
#45 := (or #42 #44)
#58 := (ite #45 #55 #57)
#59 := (ite #37 0::Int #58)
#60 := (ite #38 #35 #59)
#61 := (= #54 #60)
#62 := (forall (vars (?v0 Int) (?v1 Int)) #61)
#305 := (iff #62 #302)
#193 := (and #41 #43)
#196 := (or #42 #193)
#275 := (ite #196 #55 #270)
#184 := (= 0::Int #35)
#278 := (ite #184 0::Int #275)
#187 := (= 0::Int #24)
#281 := (ite #187 #35 #278)
#284 := (= #54 #281)
#287 := (forall (vars (?v0 Int) (?v1 Int)) #284)
#303 := (iff #287 #302)
#300 := (iff #284 #299)
#297 := (= #281 #296)
#294 := (= #278 #293)
#291 := (= #275 #290)
#246 := (iff #196 #245)
#243 := (iff #193 #242)
#240 := (iff #43 #239)
#241 := [rewrite]: #240
#233 := (iff #41 #232)
#234 := [rewrite]: #233
#244 := [monotonicity #234 #241]: #243
#236 := (iff #42 #235)
#229 := (iff #40 #228)
#230 := [rewrite]: #229
#237 := [monotonicity #230 #234]: #236
#247 := [monotonicity #237 #244]: #246
#292 := [monotonicity #247]: #291
#221 := (iff #184 #37)
#222 := [rewrite]: #221
#295 := [monotonicity #222 #292]: #294
#223 := (iff #187 #38)
#224 := [rewrite]: #223
#298 := [monotonicity #224 #295]: #297
#301 := [monotonicity #298]: #300
#304 := [quant-intro #301]: #303
#288 := (iff #62 #287)
#285 := (iff #61 #284)
#282 := (= #60 #281)
#279 := (= #59 #278)
#276 := (= #58 #275)
#273 := (= #57 #270)
#267 := (- #264)
#271 := (= #267 #270)
#272 := [rewrite]: #271
#268 := (= #57 #267)
#265 := (= #56 #264)
#204 := (= #48 #203)
#205 := [rewrite]: #204
#201 := (= #47 #200)
#202 := [rewrite]: #201
#266 := [monotonicity #202 #205]: #265
#269 := [monotonicity #266]: #268
#274 := [trans #269 #272]: #273
#197 := (iff #45 #196)
#194 := (iff #44 #193)
#195 := [rewrite]: #194
#198 := [monotonicity #195]: #197
#277 := [monotonicity #198 #274]: #276
#185 := (iff #37 #184)
#186 := [rewrite]: #185
#280 := [monotonicity #186 #277]: #279
#188 := (iff #38 #187)
#189 := [rewrite]: #188
#283 := [monotonicity #189 #280]: #282
#286 := [monotonicity #283]: #285
#289 := [quant-intro #286]: #288
#306 := [trans #289 #304]: #305
#263 := [asserted]: #62
#307 := [mp #263 #306]: #302
#335 := [mp~ #307 #320]: #302
#373 := [mp #335 #372]: #370
#404 := [mp #373 #403]: #401
#909 := [mp #404 #908]: #904
#684 := (not #904)
#685 := (or #684 #679)
#516 := (* -1::Int 1::Int)
#772 := (mod #852 #516)
#750 := (+ #13 #772)
#751 := (= #750 0::Int)
#780 := (mod #9 1::Int)
#753 := (* -1::Int #780)
#754 := (+ #13 #753)
#755 := (= #754 0::Int)
#573 := (<= 1::Int 0::Int)
#574 := (or #573 #572)
#468 := (not #574)
#845 := (or #844 #573)
#567 := (not #845)
#568 := (or #567 #468)
#756 := (ite #568 #755 #751)
#752 := (ite #847 #757 #756)
#758 := (= #9 #13)
#843 := (= 1::Int 0::Int)
#744 := (ite #843 #758 #752)
#686 := (or #684 #744)
#688 := (iff #686 #685)
#690 := (iff #685 #685)
#675 := [rewrite]: #690
#682 := (iff #744 #679)
#811 := (or #825 #676)
#727 := (or #811 #847)
#695 := (ite #727 #757 #734)
#680 := (iff #695 #679)
#673 := (iff #727 #718)
#674 := [rewrite]: #673
#681 := [monotonicity #674]: #680
#717 := (iff #744 #695)
#696 := (ite false #758 #695)
#706 := (iff #696 #695)
#707 := [rewrite]: #706
#703 := (iff #744 #696)
#692 := (iff #752 #695)
#665 := (ite #811 #757 #734)
#725 := (ite #847 #757 #665)
#702 := (iff #725 #695)
#661 := [rewrite]: #702
#726 := (iff #752 #725)
#720 := (iff #756 #665)
#739 := (iff #751 #734)
#737 := (= #750 #736)
#732 := (= #772 #784)
#816 := (= #516 -1::Int)
#698 := [rewrite]: #816
#733 := [monotonicity #698]: #732
#738 := [monotonicity #733]: #737
#719 := [monotonicity #738]: #739
#735 := (iff #755 #757)
#729 := (= #754 #13)
#722 := (+ #13 0::Int)
#617 := (= #722 #13)
#728 := [rewrite]: #617
#723 := (= #754 #722)
#743 := (= #753 0::Int)
#742 := (* -1::Int 0::Int)
#747 := (= #742 0::Int)
#748 := [rewrite]: #747
#745 := (= #753 #742)
#740 := (= #780 0::Int)
#741 := [rewrite]: #740
#746 := [monotonicity #741]: #745
#749 := [trans #746 #748]: #743
#724 := [monotonicity #749]: #723
#730 := [trans #724 #728]: #729
#731 := [monotonicity #730]: #735
#815 := (iff #568 #811)
#655 := (or #676 #825)
#812 := (iff #655 #811)
#814 := [rewrite]: #812
#657 := (iff #568 #655)
#819 := (iff #468 #825)
#818 := (iff #574 #572)
#820 := (or false #572)
#823 := (iff #820 #572)
#817 := [rewrite]: #823
#821 := (iff #574 #820)
#830 := (iff #573 false)
#831 := [rewrite]: #830
#822 := [monotonicity #831]: #821
#824 := [trans #822 #817]: #818
#826 := [monotonicity #824]: #819
#677 := (iff #567 #676)
#829 := (iff #845 #844)
#832 := (or #844 false)
#833 := (iff #832 #844)
#834 := [rewrite]: #833
#827 := (iff #845 #832)
#828 := [monotonicity #831]: #827
#835 := [trans #828 #834]: #829
#678 := [monotonicity #835]: #677
#658 := [monotonicity #678 #826]: #657
#813 := [trans #658 #814]: #815
#701 := [monotonicity #813 #731 #719]: #720
#721 := [monotonicity #701]: #726
#694 := [trans #721 #661]: #692
#559 := (iff #843 false)
#560 := [rewrite]: #559
#705 := [monotonicity #560 #694]: #703
#697 := [trans #705 #707]: #717
#683 := [trans #697 #681]: #682
#689 := [monotonicity #683]: #688
#691 := [trans #689 #675]: #688
#687 := [quant-inst #9 #10]: #686
#652 := [mp #687 #691]: #685
#465 := [unit-resolution #652 #909]: #679
#642 := (not #679)
#643 := (or #642 #667 #757)
#644 := [def-axiom]: #643
#464 := [unit-resolution #644 #465]: #466
#467 := [unit-resolution #464 #463]: #757
#648 := (not #757)
#910 := (or #648 #670)
#911 := [th-lemma arith triangle-eq]: #910
#912 := [unit-resolution #911 #467]: #670
#671 := (>= #13 0::Int)
#913 := (or #648 #671)
#914 := [th-lemma arith triangle-eq]: #913
#915 := [unit-resolution #914 #467]: #671
#917 := [th-lemma arith eq-propagate -1 -1 #915 #912]: #916
#929 := (= #9 #11)
#862 := (div #9 1::Int)
#848 := (* -1::Int #862)
#849 := (+ #11 #848)
#781 := (<= #849 0::Int)
#571 := (= #849 0::Int)
#793 := (or #811 #844)
#794 := [def-axiom]: #793
#918 := [unit-resolution #794 #475]: #811
#699 := (div #852 -1::Int)
#807 := (* -1::Int #699)
#805 := (+ #11 #807)
#708 := (= #805 0::Int)
#704 := (ite #811 #571 #708)
#542 := (or #847 #704)
#846 := (= #11 0::Int)
#714 := (ite #847 #846 #704)
#36 := (f5 #35 #24)
#896 := (pattern #36)
#206 := (div #200 #203)
#378 := (* -1::Int #206)
#379 := (+ #36 #378)
#380 := (= #379 0::Int)
#46 := (div #35 #24)
#375 := (* -1::Int #46)
#376 := (+ #36 #375)
#377 := (= #376 0::Int)
#381 := (ite #342 #377 #380)
#374 := (= #36 0::Int)
#39 := (or #37 #38)
#382 := (ite #39 #374 #381)
#897 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #896) #382)
#385 := (forall (vars (?v0 Int) (?v1 Int)) #382)
#900 := (iff #385 #897)
#898 := (iff #382 #382)
#899 := [refl]: #898
#901 := [quant-intro #899]: #900
#345 := (ite #342 #46 #206)
#348 := (ite #39 0::Int #345)
#351 := (= #36 #348)
#354 := (forall (vars (?v0 Int) (?v1 Int)) #351)
#386 := (iff #354 #385)
#383 := (iff #351 #382)
#384 := [rewrite]: #383
#387 := [quant-intro #384]: #386
#248 := (ite #245 #46 #206)
#251 := (ite #39 0::Int #248)
#254 := (= #36 #251)
#257 := (forall (vars (?v0 Int) (?v1 Int)) #254)
#355 := (iff #257 #354)
#352 := (iff #254 #351)
#349 := (= #251 #348)
#346 := (= #248 #345)
#347 := [monotonicity #344]: #346
#350 := [monotonicity #347]: #349
#353 := [monotonicity #350]: #352
#356 := [quant-intro #353]: #355
#317 := (~ #257 #257)
#330 := (~ #254 #254)
#331 := [refl]: #330
#318 := [nnf-pos #331]: #317
#49 := (div #47 #48)
#50 := (ite #45 #46 #49)
#51 := (ite #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#260 := (iff #53 #257)
#209 := (ite #196 #46 #206)
#190 := (or #184 #187)
#212 := (ite #190 0::Int #209)
#215 := (= #36 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#258 := (iff #218 #257)
#255 := (iff #215 #254)
#252 := (= #212 #251)
#249 := (= #209 #248)
#250 := [monotonicity #247]: #249
#225 := (iff #190 #39)
#226 := [monotonicity #222 #224]: #225
#253 := [monotonicity #226 #250]: #252
#256 := [monotonicity #253]: #255
#259 := [quant-intro #256]: #258
#219 := (iff #53 #218)
#216 := (iff #52 #215)
#213 := (= #51 #212)
#210 := (= #50 #209)
#207 := (= #49 #206)
#208 := [monotonicity #202 #205]: #207
#211 := [monotonicity #198 #208]: #210
#191 := (iff #39 #190)
#192 := [monotonicity #186 #189]: #191
#214 := [monotonicity #192 #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#261 := [trans #220 #259]: #260
#183 := [asserted]: #53
#262 := [mp #183 #261]: #257
#332 := [mp~ #262 #318]: #257
#357 := [mp #332 #356]: #354
#388 := [mp #357 #387]: #385
#902 := [mp #388 #901]: #897
#809 := (not #897)
#806 := (or #809 #714)
#500 := (div #852 #516)
#501 := (* -1::Int #500)
#861 := (+ #11 #501)
#859 := (= #861 0::Int)
#842 := (ite #568 #571 #859)
#557 := (or #847 #843)
#558 := (ite #557 #846 #842)
#810 := (or #809 #558)
#799 := (iff #810 #806)
#788 := (iff #806 #806)
#790 := [rewrite]: #788
#715 := (iff #558 #714)
#712 := (iff #842 #704)
#710 := (iff #859 #708)
#808 := (= #861 #805)
#709 := (= #501 #807)
#700 := (= #500 #699)
#659 := [monotonicity #698]: #700
#804 := [monotonicity #659]: #709
#693 := [monotonicity #804]: #808
#711 := [monotonicity #693]: #710
#713 := [monotonicity #813 #711]: #712
#837 := (iff #557 #847)
#838 := (or #847 false)
#836 := (iff #838 #847)
#840 := [rewrite]: #836
#839 := (iff #557 #838)
#554 := [monotonicity #560]: #839
#841 := [trans #554 #840]: #837
#716 := [monotonicity #841 #713]: #715
#791 := [monotonicity #716]: #799
#800 := [trans #791 #790]: #799
#797 := [quant-inst #9 #10]: #810
#801 := [mp #797 #800]: #806
#536 := [unit-resolution #801 #902]: #714
#762 := (not #714)
#766 := (or #762 #847 #704)
#767 := [def-axiom]: #766
#543 := [unit-resolution #767 #536]: #542
#919 := [unit-resolution #543 #474]: #704
#795 := (not #811)
#782 := (not #704)
#787 := (or #782 #795 #571)
#773 := [def-axiom]: #787
#920 := [unit-resolution #773 #919 #918]: #571
#777 := (not #571)
#921 := (or #777 #781)
#922 := [th-lemma arith triangle-eq]: #921
#923 := [unit-resolution #922 #920]: #781
#783 := (>= #849 0::Int)
#498 := (or #777 #783)
#499 := [th-lemma arith triangle-eq]: #498
#924 := [unit-resolution #499 #920]: #783
#606 := (+ #9 #848)
#610 := (<= #606 0::Int)
#605 := (= #606 0::Int)
#1 := true
#80 := [true-axiom]: true
#563 := (or false #605)
#555 := [th-lemma arith]: #563
#564 := [unit-resolution #555 #80]: #605
#488 := (not #605)
#490 := (or #488 #610)
#491 := [th-lemma arith triangle-eq]: #490
#925 := [unit-resolution #491 #564]: #610
#587 := (>= #606 0::Int)
#926 := (or #488 #587)
#927 := [th-lemma arith triangle-eq]: #926
#928 := [unit-resolution #927 #564]: #587
#930 := [th-lemma arith eq-propagate 1 1 -1 -1 #928 #925 #924 #923]: #929
#934 := [trans #930 #917]: #933
#936 := [monotonicity #934]: #935
#937 := [trans #534 #936]: #91
#94 := (not #91)
#12 := (* #11 1::Int)
#14 := (+ #12 #13)
#15 := (f4 #14)
#16 := (= f3 #15)
#17 := (not #16)
#95 := (iff #17 #94)
#92 := (iff #16 #91)
#89 := (= #15 #88)
#86 := (= #14 #85)
#83 := (= #12 #11)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#90 := [monotonicity #87]: #89
#93 := [monotonicity #90]: #92
#96 := [monotonicity #93]: #95
#82 := [asserted]: #17
#99 := [mp #82 #96]: #94
#938 := [unit-resolution #99 #937]: false
#939 := [lemma #938]: #847
#975 := [symm #939]: #974
#514 := (= #552 0::Int)
#860 := (>= #552 0::Int)
#664 := (or #718 #763)
#666 := [def-axiom]: #664
#471 := [unit-resolution #666 #939]: #718
#476 := [unit-resolution #464 #471]: #757
#940 := [unit-resolution #914 #476]: #671
#798 := (>= #11 0::Int)
#497 := (not #610)
#565 := (not #798)
#556 := [hypothesis]: #565
#768 := (not #846)
#566 := (or #768 #798)
#533 := [th-lemma arith triangle-eq]: #566
#535 := [unit-resolution #533 #556]: #768
#527 := (or #763 #846)
#764 := (or #762 #763 #846)
#765 := [def-axiom]: #764
#540 := [unit-resolution #765 #536]: #527
#541 := [unit-resolution #540 #535]: #763
#544 := [unit-resolution #543 #541]: #704
#519 := (not #633)
#520 := (iff #763 #519)
#517 := (iff #847 #633)
#545 := (= #462 f3)
#528 := [symm #534]: #545
#531 := [monotonicity #528]: #530
#512 := [monotonicity #531]: #510
#518 := [symm #512]: #517
#521 := [monotonicity #518]: #520
#522 := [mp #541 #521]: #519
#523 := [unit-resolution #511 #522]: #572
#507 := [unit-resolution #506 #541]: #655
#505 := [unit-resolution #507 #523]: #676
#508 := [unit-resolution #794 #505]: #811
#496 := [unit-resolution #773 #508 #544]: #571
#502 := [unit-resolution #499 #496]: #783
#503 := (not #783)
#478 := (or #497 #825 #798 #503)
#482 := [th-lemma arith assign-bounds 1 1 -1]: #478
#483 := [unit-resolution #482 #523 #502 #556]: #497
#493 := [unit-resolution #491 #483 #564]: false
#489 := [lemma #493]: #798
#532 := (* -1::Int #552)
#867 := (+ #13 #532)
#869 := (+ #11 #867)
#850 := (<= #869 0::Int)
#526 := (= #869 0::Int)
#547 := (>= #85 0::Int)
#941 := (not #671)
#942 := (or #547 #565 #941)
#943 := [th-lemma arith assign-bounds -1 -1]: #942
#944 := [unit-resolution #943 #940 #489]: #547
#548 := (not #547)
#537 := (or #526 #548)
#106 := (= #24 #27)
#131 := (or #106 #125)
#884 := (forall (vars (?v0 Int)) (:pat #883) #131)
#136 := (forall (vars (?v0 Int)) #131)
#887 := (iff #136 #884)
#885 := (iff #131 #131)
#886 := [refl]: #885
#888 := [quant-intro #886]: #887
#313 := (~ #136 #136)
#312 := (~ #131 #131)
#309 := [refl]: #312
#314 := [nnf-pos #309]: #313
#28 := (= #27 #24)
#25 := (<= 0::Int #24)
#29 := (implies #25 #28)
#30 := (forall (vars (?v0 Int)) #29)
#139 := (iff #30 #136)
#113 := (not #25)
#114 := (or #113 #106)
#119 := (forall (vars (?v0 Int)) #114)
#137 := (iff #119 #136)
#134 := (iff #114 #131)
#128 := (or #125 #106)
#132 := (iff #128 #131)
#133 := [rewrite]: #132
#129 := (iff #114 #128)
#126 := (iff #113 #125)
#122 := (iff #25 #124)
#123 := [rewrite]: #122
#127 := [monotonicity #123]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#138 := [quant-intro #135]: #137
#120 := (iff #30 #119)
#117 := (iff #29 #114)
#110 := (implies #25 #106)
#115 := (iff #110 #114)
#116 := [rewrite]: #115
#111 := (iff #29 #110)
#108 := (iff #28 #106)
#109 := [rewrite]: #108
#112 := [monotonicity #109]: #111
#118 := [trans #112 #116]: #117
#121 := [quant-intro #118]: #120
#140 := [trans #121 #138]: #139
#105 := [asserted]: #30
#141 := [mp #105 #140]: #136
#310 := [mp~ #141 #314]: #136
#889 := [mp #310 #888]: #884
#871 := (not #884)
#872 := (or #871 #526 #548)
#549 := (= #85 #552)
#553 := (or #549 #548)
#873 := (or #871 #553)
#525 := (iff #873 #872)
#874 := (or #871 #537)
#529 := (iff #874 #872)
#865 := [rewrite]: #529
#864 := (iff #873 #874)
#538 := (iff #553 #537)
#656 := (iff #549 #526)
#863 := [rewrite]: #656
#870 := [monotonicity #863]: #538
#524 := [monotonicity #870]: #864
#866 := [trans #524 #865]: #525
#868 := [quant-inst #85]: #873
#509 := [mp #868 #866]: #872
#945 := [unit-resolution #509 #889]: #537
#946 := [unit-resolution #945 #944]: #526
#947 := (not #526)
#948 := (or #947 #850)
#949 := [th-lemma arith triangle-eq]: #948
#950 := [unit-resolution #949 #946]: #850
#951 := (not #850)
#952 := (or #860 #941 #951 #565)
#953 := [th-lemma arith assign-bounds -1 1 -1]: #952
#954 := [unit-resolution #953 #950 #489 #940]: #860
#858 := (<= #552 0::Int)
#955 := [unit-resolution #911 #476]: #670
#802 := (<= #11 0::Int)
#956 := [unit-resolution #540 #939]: #846
#957 := (or #768 #802)
#958 := [th-lemma arith triangle-eq]: #957
#959 := [unit-resolution #958 #956]: #802
#513 := (>= #869 0::Int)
#960 := (or #947 #513)
#961 := [th-lemma arith triangle-eq]: #960
#962 := [unit-resolution #961 #946]: #513
#965 := (not #802)
#964 := (not #513)
#963 := (not #670)
#966 := (or #858 #963 #964 #965)
#967 := [th-lemma arith assign-bounds -1 1 -1]: #966
#968 := [unit-resolution #967 #962 #959 #955]: #858
#970 := (not #860)
#969 := (not #858)
#971 := (or #514 #969 #970)
#972 := [th-lemma arith triangle-eq]: #971
#973 := [unit-resolution #972 #968 #954]: #514
#977 := [trans #973 #975]: #976
#980 := [monotonicity #977]: #979
#982 := [symm #980]: #981
#986 := [trans #534 #982]: #985
#987 := [trans #986 #984]: #91
[unit-resolution #99 #987]: false
unsat
14ea837cc40eb6dd6a11b7a7e54b897ec75d15ed 873 0
#2 := false
decl f4 :: (-> Int S2)
decl f7 :: (-> Int Int Int)
#10 := 3::Int
decl f6 :: (-> S2 Int)
decl f3 :: S2
#8 := f3
#9 := (f6 f3)
#13 := (f7 #9 3::Int)
decl f5 :: (-> Int Int Int)
#11 := (f5 #9 3::Int)
#83 := (* 3::Int #11)
#86 := (+ #83 #13)
#89 := (f4 #86)
#92 := (= f3 #89)
#463 := (f4 #9)
#1031 := (= #463 #89)
#1029 := (= #89 #463)
#1027 := (= #86 #9)
#23 := 0::Int
#1023 := (= 0::Int #9)
#832 := (= #9 0::Int)
#481 := (f6 #89)
#554 := (= #86 #481)
#943 := (not #554)
#844 := (div #9 3::Int)
#200 := -1::Int
#848 := (* -1::Int #844)
#845 := (+ #11 #848)
#781 := (<= #845 0::Int)
#849 := (= #845 0::Int)
#840 := (<= #9 0::Int)
#828 := (not #840)
#559 := (>= #9 0::Int)
#700 := (not #559)
#806 := (or #700 #828)
#594 := [hypothesis]: #700
#671 := (f6 #463)
#672 := (= #671 0::Int)
#535 := (iff #672 #832)
#558 := (= #671 #9)
#596 := (= #9 #671)
#548 := (= f3 #463)
#18 := (:var 0 S2)
#19 := (f6 #18)
#877 := (pattern #19)
#20 := (f4 #19)
#99 := (= #18 #20)
#878 := (forall (vars (?v0 S2)) (:pat #877) #99)
#103 := (forall (vars (?v0 S2)) #99)
#879 := (iff #103 #878)
#881 := (iff #878 #878)
#882 := [rewrite]: #881
#880 := [rewrite]: #879
#883 := [trans #880 #882]: #879
#326 := (~ #103 #103)
#324 := (~ #99 #99)
#325 := [refl]: #324
#327 := [nnf-pos #325]: #326
#21 := (= #20 #18)
#22 := (forall (vars (?v0 S2)) #21)
#104 := (iff #22 #103)
#101 := (iff #21 #99)
#102 := [rewrite]: #101
#105 := [quant-intro #102]: #104
#98 := [asserted]: #22
#108 := [mp #98 #105]: #103
#312 := [mp~ #108 #327]: #103
#884 := [mp #312 #883]: #878
#541 := (not #878)
#552 := (or #541 #548)
#553 := [quant-inst #8]: #552
#557 := [unit-resolution #553 #884]: #548
#597 := [monotonicity #557]: #596
#590 := [symm #597]: #558
#498 := [monotonicity #590]: #535
#656 := (or #559 #672)
#24 := (:var 0 Int)
#26 := (f4 #24)
#885 := (pattern #26)
#125 := (>= #24 0::Int)
#27 := (f6 #26)
#32 := (= #27 0::Int)
#173 := (or #32 #125)
#892 := (forall (vars (?v0 Int)) (:pat #885) #173)
#178 := (forall (vars (?v0 Int)) #173)
#895 := (iff #178 #892)
#893 := (iff #173 #173)
#894 := [refl]: #893
#896 := [quant-intro #894]: #895
#316 := (~ #178 #178)
#328 := (~ #173 #173)
#329 := [refl]: #328
#317 := [nnf-pos #329]: #316
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#181 := (iff #34 #178)
#144 := (= 0::Int #27)
#150 := (not #31)
#151 := (or #150 #144)
#156 := (forall (vars (?v0 Int)) #151)
#179 := (iff #156 #178)
#176 := (iff #151 #173)
#170 := (or #125 #32)
#174 := (iff #170 #173)
#175 := [rewrite]: #174
#171 := (iff #151 #170)
#168 := (iff #144 #32)
#169 := [rewrite]: #168
#166 := (iff #150 #125)
#126 := (not #125)
#161 := (not #126)
#164 := (iff #161 #125)
#165 := [rewrite]: #164
#162 := (iff #150 #161)
#159 := (iff #31 #126)
#160 := [rewrite]: #159
#163 := [monotonicity #160]: #162
#167 := [trans #163 #165]: #166
#172 := [monotonicity #167 #169]: #171
#177 := [trans #172 #175]: #176
#180 := [quant-intro #177]: #179
#157 := (iff #34 #156)
#154 := (iff #33 #151)
#147 := (implies #31 #144)
#152 := (iff #147 #151)
#153 := [rewrite]: #152
#148 := (iff #33 #147)
#145 := (iff #32 #144)
#146 := [rewrite]: #145
#149 := [monotonicity #146]: #148
#155 := [trans #149 #153]: #154
#158 := [quant-intro #155]: #157
#182 := [trans #158 #180]: #181
#143 := [asserted]: #34
#183 := [mp #143 #182]: #178
#330 := [mp~ #183 #317]: #178
#897 := [mp #330 #896]: #892
#859 := (not #892)
#645 := (or #859 #559 #672)
#673 := (or #672 #559)
#646 := (or #859 #673)
#648 := (iff #646 #645)
#649 := (or #859 #656)
#494 := (iff #649 #645)
#652 := [rewrite]: #494
#650 := (iff #646 #649)
#674 := (iff #673 #656)
#644 := [rewrite]: #674
#651 := [monotonicity #644]: #650
#653 := [trans #651 #652]: #648
#647 := [quant-inst #9]: #646
#632 := [mp #647 #653]: #645
#546 := [unit-resolution #632 #897]: #656
#595 := [unit-resolution #546 #594]: #672
#500 := [mp #595 #498]: #832
#755 := (not #832)
#501 := (or #755 #559)
#504 := [th-lemma arith triangle-eq]: #501
#499 := [unit-resolution #504 #500 #594]: false
#505 := [lemma #499]: #559
#480 := [hypothesis]: #755
#547 := (or #832 #828 #700)
#530 := [th-lemma arith triangle-eq]: #547
#489 := [unit-resolution #530 #480 #505]: #828
#775 := (or #806 #840)
#776 := [def-axiom]: #775
#488 := [unit-resolution #776 #489]: #806
#712 := -3::Int
#469 := (* -1::Int #9)
#714 := (div #469 -3::Int)
#717 := (* -1::Int #714)
#808 := (+ #11 #717)
#801 := (= #808 0::Int)
#792 := (ite #806 #849 #801)
#563 := (or #832 #792)
#839 := (= #11 0::Int)
#804 := (ite #832 #839 #792)
#35 := (:var 1 Int)
#36 := (f5 #35 #24)
#898 := (pattern #36)
#204 := (* -1::Int #24)
#201 := (* -1::Int #35)
#207 := (div #201 #204)
#379 := (* -1::Int #207)
#380 := (+ #36 #379)
#381 := (= #380 0::Int)
#46 := (div #35 #24)
#376 := (* -1::Int #46)
#377 := (+ #36 #376)
#378 := (= #377 0::Int)
#239 := (>= #35 0::Int)
#232 := (<= #24 0::Int)
#339 := (or #232 #239)
#340 := (not #339)
#228 := (<= #35 0::Int)
#337 := (or #228 #232)
#338 := (not #337)
#343 := (or #338 #340)
#382 := (ite #343 #378 #381)
#375 := (= #36 0::Int)
#38 := (= #24 0::Int)
#37 := (= #35 0::Int)
#39 := (or #37 #38)
#383 := (ite #39 #375 #382)
#899 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #898) #383)
#386 := (forall (vars (?v0 Int) (?v1 Int)) #383)
#902 := (iff #386 #899)
#900 := (iff #383 #383)
#901 := [refl]: #900
#903 := [quant-intro #901]: #902
#346 := (ite #343 #46 #207)
#349 := (ite #39 0::Int #346)
#352 := (= #36 #349)
#355 := (forall (vars (?v0 Int) (?v1 Int)) #352)
#387 := (iff #355 #386)
#384 := (iff #352 #383)
#385 := [rewrite]: #384
#388 := [quant-intro #385]: #387
#240 := (not #239)
#233 := (not #232)
#243 := (and #233 #240)
#229 := (not #228)
#236 := (and #229 #233)
#246 := (or #236 #243)
#249 := (ite #246 #46 #207)
#252 := (ite #39 0::Int #249)
#255 := (= #36 #252)
#258 := (forall (vars (?v0 Int) (?v1 Int)) #255)
#356 := (iff #258 #355)
#353 := (iff #255 #352)
#350 := (= #252 #349)
#347 := (= #249 #346)
#344 := (iff #246 #343)
#341 := (iff #243 #340)
#342 := [rewrite]: #341
#322 := (iff #236 #338)
#323 := [rewrite]: #322
#345 := [monotonicity #323 #342]: #344
#348 := [monotonicity #345]: #347
#351 := [monotonicity #348]: #350
#354 := [monotonicity #351]: #353
#357 := [quant-intro #354]: #356
#318 := (~ #258 #258)
#331 := (~ #255 #255)
#332 := [refl]: #331
#319 := [nnf-pos #332]: #318
#48 := (- #24)
#47 := (- #35)
#49 := (div #47 #48)
#41 := (< 0::Int #24)
#43 := (< #35 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #35)
#42 := (and #40 #41)
#45 := (or #42 #44)
#50 := (ite #45 #46 #49)
#51 := (ite #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#261 := (iff #53 #258)
#194 := (and #41 #43)
#197 := (or #42 #194)
#210 := (ite #197 #46 #207)
#188 := (= 0::Int #24)
#185 := (= 0::Int #35)
#191 := (or #185 #188)
#213 := (ite #191 0::Int #210)
#216 := (= #36 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#259 := (iff #219 #258)
#256 := (iff #216 #255)
#253 := (= #213 #252)
#250 := (= #210 #249)
#247 := (iff #197 #246)
#244 := (iff #194 #243)
#241 := (iff #43 #240)
#242 := [rewrite]: #241
#234 := (iff #41 #233)
#235 := [rewrite]: #234
#245 := [monotonicity #235 #242]: #244
#237 := (iff #42 #236)
#230 := (iff #40 #229)
#231 := [rewrite]: #230
#238 := [monotonicity #231 #235]: #237
#248 := [monotonicity #238 #245]: #247
#251 := [monotonicity #248]: #250
#226 := (iff #191 #39)
#224 := (iff #188 #38)
#225 := [rewrite]: #224
#222 := (iff #185 #37)
#223 := [rewrite]: #222
#227 := [monotonicity #223 #225]: #226
#254 := [monotonicity #227 #251]: #253
#257 := [monotonicity #254]: #256
#260 := [quant-intro #257]: #259
#220 := (iff #53 #219)
#217 := (iff #52 #216)
#214 := (= #51 #213)
#211 := (= #50 #210)
#208 := (= #49 #207)
#205 := (= #48 #204)
#206 := [rewrite]: #205
#202 := (= #47 #201)
#203 := [rewrite]: #202
#209 := [monotonicity #203 #206]: #208
#198 := (iff #45 #197)
#195 := (iff #44 #194)
#196 := [rewrite]: #195
#199 := [monotonicity #196]: #198
#212 := [monotonicity #199 #209]: #211
#192 := (iff #39 #191)
#189 := (iff #38 #188)
#190 := [rewrite]: #189
#186 := (iff #37 #185)
#187 := [rewrite]: #186
#193 := [monotonicity #187 #190]: #192
#215 := [monotonicity #193 #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#262 := [trans #221 #260]: #261
#184 := [asserted]: #53
#263 := [mp #184 #262]: #258
#333 := [mp~ #263 #319]: #258
#358 := [mp #333 #357]: #355
#389 := [mp #358 #388]: #386
#904 := [mp #389 #903]: #899
#794 := (not #899)
#795 := (or #794 #804)
#576 := (* -1::Int 3::Int)
#846 := (div #469 #576)
#847 := (* -1::Int #846)
#569 := (+ #11 #847)
#570 := (= #569 0::Int)
#560 := (<= 3::Int 0::Int)
#561 := (or #560 #559)
#562 := (not #561)
#841 := (or #840 #560)
#556 := (not #841)
#838 := (or #556 #562)
#842 := (ite #838 #849 #570)
#843 := (= 3::Int 0::Int)
#833 := (or #832 #843)
#834 := (ite #833 #839 #842)
#796 := (or #794 #834)
#791 := (iff #796 #795)
#782 := (iff #795 #795)
#783 := [rewrite]: #782
#800 := (iff #834 #804)
#802 := (iff #842 #792)
#793 := (iff #570 #801)
#812 := (= #569 #808)
#718 := (= #847 #717)
#715 := (= #846 #714)
#713 := (= #576 -3::Int)
#706 := [rewrite]: #713
#716 := [monotonicity #706]: #715
#811 := [monotonicity #716]: #718
#799 := [monotonicity #811]: #812
#790 := [monotonicity #799]: #793
#695 := (iff #838 #806)
#661 := (or #828 #700)
#807 := (iff #661 #806)
#810 := [rewrite]: #807
#809 := (iff #838 #661)
#701 := (iff #562 #700)
#815 := (iff #561 #559)
#660 := (or false #559)
#816 := (iff #660 #559)
#817 := [rewrite]: #816
#813 := (iff #561 #660)
#822 := (iff #560 false)
#823 := [rewrite]: #822
#814 := [monotonicity #823]: #813
#818 := [trans #814 #817]: #815
#702 := [monotonicity #818]: #701
#657 := (iff #556 #828)
#827 := (iff #841 #840)
#824 := (or #840 false)
#820 := (iff #824 #840)
#826 := [rewrite]: #820
#825 := (iff #841 #824)
#819 := [monotonicity #823]: #825
#821 := [trans #819 #826]: #827
#659 := [monotonicity #821]: #657
#711 := [monotonicity #659 #702]: #809
#710 := [trans #711 #810]: #695
#803 := [monotonicity #710 #790]: #802
#679 := (iff #833 #832)
#835 := (or #832 false)
#837 := (iff #835 #832)
#678 := [rewrite]: #837
#836 := (iff #833 #835)
#829 := (iff #843 false)
#830 := [rewrite]: #829
#831 := [monotonicity #830]: #836
#680 := [trans #831 #678]: #679
#805 := [monotonicity #680 #803]: #800
#798 := [monotonicity #805]: #791
#785 := [trans #798 #783]: #791
#797 := [quant-inst #9 #10]: #796
#786 := [mp #797 #785]: #795
#580 := [unit-resolution #786 #904]: #804
#753 := (not #804)
#758 := (or #753 #832 #792)
#759 := [def-axiom]: #758
#564 := [unit-resolution #759 #580]: #563
#473 := [unit-resolution #564 #480]: #792
#778 := (not #806)
#766 := (not #792)
#767 := (or #766 #778 #849)
#768 := [def-axiom]: #767
#470 := [unit-resolution #768 #473 #488]: #849
#771 := (not #849)
#471 := (or #771 #781)
#946 := [th-lemma arith triangle-eq]: #471
#947 := [unit-resolution #946 #470]: #781
#777 := (mod #9 3::Int)
#749 := (* -1::Int #777)
#750 := (+ #13 #749)
#675 := (<= #750 0::Int)
#745 := (= #750 0::Int)
#762 := (mod #469 -3::Int)
#732 := (+ #13 #762)
#734 := (= #732 0::Int)
#739 := (ite #806 #745 #734)
#949 := (or #832 #739)
#724 := (= #13 0::Int)
#741 := (ite #832 #724 #739)
#54 := (f7 #35 #24)
#905 := (pattern #54)
#265 := (mod #201 #204)
#395 := (+ #54 #265)
#396 := (= #395 0::Int)
#55 := (mod #35 #24)
#392 := (* -1::Int #55)
#393 := (+ #54 #392)
#394 := (= #393 0::Int)
#397 := (ite #343 #394 #396)
#391 := (= #54 0::Int)
#398 := (ite #37 #391 #397)
#390 := (= #35 #54)
#399 := (ite #38 #390 #398)
#906 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #905) #399)
#402 := (forall (vars (?v0 Int) (?v1 Int)) #399)
#909 := (iff #402 #906)
#907 := (iff #399 #399)
#908 := [refl]: #907
#910 := [quant-intro #908]: #909
#271 := (* -1::Int #265)
#359 := (ite #343 #55 #271)
#362 := (ite #37 0::Int #359)
#365 := (ite #38 #35 #362)
#368 := (= #54 #365)
#371 := (forall (vars (?v0 Int) (?v1 Int)) #368)
#403 := (iff #371 #402)
#400 := (iff #368 #399)
#401 := [rewrite]: #400
#404 := [quant-intro #401]: #403
#291 := (ite #246 #55 #271)
#294 := (ite #37 0::Int #291)
#297 := (ite #38 #35 #294)
#300 := (= #54 #297)
#303 := (forall (vars (?v0 Int) (?v1 Int)) #300)
#372 := (iff #303 #371)
#369 := (iff #300 #368)
#366 := (= #297 #365)
#363 := (= #294 #362)
#360 := (= #291 #359)
#361 := [monotonicity #345]: #360
#364 := [monotonicity #361]: #363
#367 := [monotonicity #364]: #366
#370 := [monotonicity #367]: #369
#373 := [quant-intro #370]: #372
#320 := (~ #303 #303)
#334 := (~ #300 #300)
#335 := [refl]: #334
#321 := [nnf-pos #335]: #320
#56 := (mod #47 #48)
#57 := (- #56)
#58 := (ite #45 #55 #57)
#59 := (ite #37 0::Int #58)
#60 := (ite #38 #35 #59)
#61 := (= #54 #60)
#62 := (forall (vars (?v0 Int) (?v1 Int)) #61)
#306 := (iff #62 #303)
#276 := (ite #197 #55 #271)
#279 := (ite #185 0::Int #276)
#282 := (ite #188 #35 #279)
#285 := (= #54 #282)
#288 := (forall (vars (?v0 Int) (?v1 Int)) #285)
#304 := (iff #288 #303)
#301 := (iff #285 #300)
#298 := (= #282 #297)
#295 := (= #279 #294)
#292 := (= #276 #291)
#293 := [monotonicity #248]: #292
#296 := [monotonicity #223 #293]: #295
#299 := [monotonicity #225 #296]: #298
#302 := [monotonicity #299]: #301
#305 := [quant-intro #302]: #304
#289 := (iff #62 #288)
#286 := (iff #61 #285)
#283 := (= #60 #282)
#280 := (= #59 #279)
#277 := (= #58 #276)
#274 := (= #57 #271)
#268 := (- #265)
#272 := (= #268 #271)
#273 := [rewrite]: #272
#269 := (= #57 #268)
#266 := (= #56 #265)
#267 := [monotonicity #203 #206]: #266
#270 := [monotonicity #267]: #269
#275 := [trans #270 #273]: #274
#278 := [monotonicity #199 #275]: #277
#281 := [monotonicity #187 #278]: #280
#284 := [monotonicity #190 #281]: #283
#287 := [monotonicity #284]: #286
#290 := [quant-intro #287]: #289
#307 := [trans #290 #305]: #306
#264 := [asserted]: #62
#308 := [mp #264 #307]: #303
#336 := [mp~ #308 #321]: #303
#374 := [mp #336 #373]: #371
#405 := [mp #374 #404]: #402
#911 := [mp #405 #910]: #906
#704 := (not #906)
#663 := (or #704 #741)
#744 := (mod #469 #576)
#747 := (+ #13 #744)
#748 := (= #747 0::Int)
#751 := (ite #838 #745 #748)
#725 := (ite #832 #724 #751)
#726 := (= #9 #13)
#619 := (ite #843 #726 #725)
#694 := (or #704 #619)
#698 := (iff #694 #663)
#707 := (iff #663 #663)
#708 := [rewrite]: #707
#729 := (iff #619 #741)
#722 := (ite false #726 #741)
#728 := (iff #722 #741)
#723 := [rewrite]: #728
#703 := (iff #619 #722)
#721 := (iff #725 #741)
#740 := (iff #751 #739)
#735 := (iff #748 #734)
#737 := (= #747 #732)
#730 := (= #744 #762)
#731 := [monotonicity #706]: #730
#733 := [monotonicity #731]: #737
#738 := [monotonicity #733]: #735
#736 := [monotonicity #710 #738]: #740
#667 := [monotonicity #736]: #721
#727 := [monotonicity #830 #667]: #703
#697 := [trans #727 #723]: #729
#705 := [monotonicity #697]: #698
#709 := [trans #705 #708]: #698
#696 := [quant-inst #9 #10]: #694
#719 := [mp #696 #709]: #663
#948 := [unit-resolution #719 #911]: #741
#693 := (not #741)
#662 := (or #693 #832 #739)
#664 := [def-axiom]: #662
#950 := [unit-resolution #664 #948]: #949
#951 := [unit-resolution #950 #480]: #739
#683 := (not #739)
#684 := (or #683 #778 #745)
#685 := [def-axiom]: #684
#952 := [unit-resolution #685 #951 #488]: #745
#688 := (not #745)
#953 := (or #688 #675)
#954 := [th-lemma arith triangle-eq]: #953
#955 := [unit-resolution #954 #952]: #675
#761 := (>= #845 0::Int)
#519 := (or #771 #761)
#520 := [th-lemma arith triangle-eq]: #519
#956 := [unit-resolution #520 #470]: #761
#676 := (>= #750 0::Int)
#957 := (or #688 #676)
#958 := [th-lemma arith triangle-eq]: #957
#959 := [unit-resolution #958 #952]: #676
#916 := (not #781)
#917 := (not #675)
#523 := (not #761)
#924 := (not #676)
#944 := (or #943 #924 #523 #917 #916)
#493 := (f4 #481)
#937 := (= #493 #89)
#495 := (= #89 #493)
#478 := (or #541 #495)
#482 := [quant-inst #89]: #478
#466 := [unit-resolution #482 #884]: #495
#938 := [symm #466]: #937
#939 := (= f3 #493)
#935 := (= #463 #493)
#933 := (= #9 #481)
#467 := [hypothesis]: #554
#475 := (= #9 #86)
#476 := (* -1::Int #86)
#472 := (+ #9 #476)
#464 := (>= #472 0::Int)
#465 := [hypothesis]: #781
#621 := (* -3::Int #844)
#624 := (+ #749 #621)
#625 := (+ #9 #624)
#627 := (>= #625 0::Int)
#620 := (= #625 0::Int)
#1 := true
#80 := [true-axiom]: true
#598 := (or false #620)
#583 := [th-lemma arith]: #598
#584 := [unit-resolution #583 #80]: #620
#506 := (not #620)
#468 := (or #506 #627)
#912 := [th-lemma arith triangle-eq]: #468
#913 := [unit-resolution #912 #584]: #627
#914 := [hypothesis]: #675
#915 := (not #627)
#918 := (or #464 #915 #916 #917)
#919 := [th-lemma arith assign-bounds -1 3 1]: #918
#920 := [unit-resolution #919 #914 #913 #465]: #464
#477 := (<= #472 0::Int)
#921 := [hypothesis]: #761
#626 := (<= #625 0::Int)
#508 := (or #506 #626)
#509 := [th-lemma arith triangle-eq]: #508
#922 := [unit-resolution #509 #584]: #626
#923 := [hypothesis]: #676
#522 := (not #626)
#925 := (or #477 #522 #523 #924)
#926 := [th-lemma arith assign-bounds -1 3 1]: #925
#927 := [unit-resolution #926 #923 #922 #921]: #477
#929 := (not #464)
#928 := (not #477)
#930 := (or #475 #928 #929)
#931 := [th-lemma arith triangle-eq]: #930
#932 := [unit-resolution #931 #927 #920]: #475
#934 := [trans #932 #467]: #933
#936 := [monotonicity #934]: #935
#940 := [trans #557 #936]: #939
#941 := [trans #940 #938]: #92
#95 := (not #92)
#12 := (* #11 3::Int)
#14 := (+ #12 #13)
#15 := (f4 #14)
#16 := (= f3 #15)
#17 := (not #16)
#96 := (iff #17 #95)
#93 := (iff #16 #92)
#90 := (= #15 #89)
#87 := (= #14 #86)
#84 := (= #12 #83)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#91 := [monotonicity #88]: #90
#94 := [monotonicity #91]: #93
#97 := [monotonicity #94]: #96
#82 := [asserted]: #17
#100 := [mp #82 #97]: #95
#942 := [unit-resolution #100 #941]: false
#945 := [lemma #942]: #944
#960 := [unit-resolution #945 #959 #956 #955 #947]: #943
#555 := (* -1::Int #481)
#486 := (+ #86 #555)
#487 := (<= #486 0::Int)
#534 := (+ #13 #555)
#869 := (+ #83 #534)
#518 := (<= #869 0::Int)
#871 := (= #869 0::Int)
#549 := (>= #86 0::Int)
#788 := (>= #11 0::Int)
#600 := (>= #777 3::Int)
#612 := (not #600)
#585 := (or false #612)
#587 := [th-lemma arith]: #585
#586 := [unit-resolution #587 #80]: #612
#588 := (not #788)
#577 := [hypothesis]: #588
#754 := (not #839)
#578 := (or #754 #788)
#579 := [th-lemma arith triangle-eq]: #578
#571 := [unit-resolution #579 #577]: #754
#581 := (or #755 #839)
#756 := (or #753 #755 #839)
#757 := [def-axiom]: #756
#572 := [unit-resolution #757 #580]: #581
#582 := [unit-resolution #572 #571]: #755
#565 := [unit-resolution #564 #582]: #792
#542 := (not #672)
#543 := (iff #755 #542)
#538 := (iff #832 #672)
#566 := (= #463 f3)
#567 := [symm #557]: #566
#568 := [monotonicity #567]: #558
#537 := [monotonicity #568]: #535
#529 := [symm #537]: #538
#544 := [monotonicity #529]: #543
#545 := [mp #582 #544]: #542
#536 := [unit-resolution #546 #545]: #559
#532 := [unit-resolution #530 #582]: #661
#533 := [unit-resolution #532 #536]: #828
#512 := [unit-resolution #776 #533]: #806
#514 := [unit-resolution #768 #512 #565]: #849
#521 := [unit-resolution #520 #514]: #761
#524 := (or #522 #700 #600 #788 #523)
#513 := [th-lemma arith assign-bounds 1 1 3 -3]: #524
#525 := [unit-resolution #513 #536 #521 #577 #586]: #522
#507 := [unit-resolution #509 #525 #584]: false
#510 := [lemma #507]: #788
#720 := (>= #13 0::Int)
#613 := (>= #777 0::Int)
#961 := (or false #613)
#962 := [th-lemma arith]: #961
#963 := [unit-resolution #962 #80]: #613
#964 := (not #613)
#965 := (or #720 #964 #924)
#966 := [th-lemma arith assign-bounds 1 1]: #965
#967 := [unit-resolution #966 #959 #963]: #720
#968 := (not #720)
#969 := (or #549 #968 #588)
#970 := [th-lemma arith assign-bounds 1 3]: #969
#971 := [unit-resolution #970 #967 #510]: #549
#550 := (not #549)
#872 := (or #550 #871)
#107 := (= #24 #27)
#132 := (or #107 #126)
#886 := (forall (vars (?v0 Int)) (:pat #885) #132)
#137 := (forall (vars (?v0 Int)) #132)
#889 := (iff #137 #886)
#887 := (iff #132 #132)
#888 := [refl]: #887
#890 := [quant-intro #888]: #889
#314 := (~ #137 #137)
#313 := (~ #132 #132)
#310 := [refl]: #313
#315 := [nnf-pos #310]: #314
#28 := (= #27 #24)
#25 := (<= 0::Int #24)
#29 := (implies #25 #28)
#30 := (forall (vars (?v0 Int)) #29)
#140 := (iff #30 #137)
#114 := (not #25)
#115 := (or #114 #107)
#120 := (forall (vars (?v0 Int)) #115)
#138 := (iff #120 #137)
#135 := (iff #115 #132)
#129 := (or #126 #107)
#133 := (iff #129 #132)
#134 := [rewrite]: #133
#130 := (iff #115 #129)
#127 := (iff #114 #126)
#123 := (iff #25 #125)
#124 := [rewrite]: #123
#128 := [monotonicity #124]: #127
#131 := [monotonicity #128]: #130
#136 := [trans #131 #134]: #135
#139 := [quant-intro #136]: #138
#121 := (iff #30 #120)
#118 := (iff #29 #115)
#111 := (implies #25 #107)
#116 := (iff #111 #115)
#117 := [rewrite]: #116
#112 := (iff #29 #111)
#109 := (iff #28 #107)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#119 := [trans #113 #117]: #118
#122 := [quant-intro #119]: #121
#141 := [trans #122 #139]: #140
#106 := [asserted]: #30
#142 := [mp #106 #141]: #137
#311 := [mp~ #142 #315]: #137
#891 := [mp #311 #890]: #886
#876 := (not #886)
#866 := (or #876 #550 #871)
#551 := (or #554 #550)
#526 := (or #876 #551)
#515 := (iff #526 #866)
#867 := (or #876 #872)
#511 := (iff #867 #866)
#852 := [rewrite]: #511
#527 := (iff #526 #867)
#875 := (iff #551 #872)
#865 := (or #871 #550)
#873 := (iff #865 #872)
#874 := [rewrite]: #873
#539 := (iff #551 #865)
#528 := (iff #554 #871)
#658 := [rewrite]: #528
#540 := [monotonicity #658]: #539
#870 := [trans #540 #874]: #875
#868 := [monotonicity #870]: #527
#516 := [trans #868 #852]: #515
#531 := [quant-inst #86]: #526
#517 := [mp #531 #516]: #866
#972 := [unit-resolution #517 #891]: #872
#973 := [unit-resolution #972 #971]: #871
#974 := (not #871)
#975 := (or #974 #518)
#976 := [th-lemma arith triangle-eq]: #975
#977 := [unit-resolution #976 #973]: #518
#978 := (not #518)
#979 := (or #487 #978)
#980 := [th-lemma arith assign-bounds -1]: #979
#981 := [unit-resolution #980 #977]: #487
#474 := (>= #486 0::Int)
#854 := (>= #869 0::Int)
#982 := (or #974 #854)
#983 := [th-lemma arith triangle-eq]: #982
#984 := [unit-resolution #983 #973]: #854
#985 := (not #854)
#986 := (or #474 #985)
#987 := [th-lemma arith assign-bounds -1]: #986
#988 := [unit-resolution #987 #984]: #474
#990 := (not #474)
#989 := (not #487)
#991 := (or #554 #989 #990)
#992 := [th-lemma arith triangle-eq]: #991
#993 := [unit-resolution #992 #988 #981 #960]: false
#994 := [lemma #993]: #832
#1024 := [symm #994]: #1023
#1025 := (= #86 0::Int)
#855 := (= #481 0::Int)
#575 := (>= #481 0::Int)
#479 := (or #755 #724)
#654 := (or #693 #755 #724)
#655 := [def-axiom]: #654
#484 := [unit-resolution #655 #948]: #479
#485 := [unit-resolution #484 #994]: #724
#665 := (not #724)
#490 := (or #665 #720)
#492 := [th-lemma arith triangle-eq]: #490
#995 := [unit-resolution #492 #485]: #720
#996 := [unit-resolution #970 #995 #510]: #549
#997 := [unit-resolution #972 #996]: #871
#998 := [unit-resolution #976 #997]: #518
#999 := (or #575 #968 #978 #588)
#1000 := [th-lemma arith assign-bounds 1 1 3]: #999
#1001 := [unit-resolution #1000 #998 #510 #995]: #575
#574 := (<= #481 0::Int)
#699 := (<= #13 0::Int)
#1002 := (or #665 #699)
#1003 := [th-lemma arith triangle-eq]: #1002
#1004 := [unit-resolution #1003 #485]: #699
#787 := (<= #11 0::Int)
#1005 := [unit-resolution #572 #994]: #839
#1006 := (or #754 #787)
#1007 := [th-lemma arith triangle-eq]: #1006
#1008 := [unit-resolution #1007 #1005]: #787
#1009 := [unit-resolution #983 #997]: #854
#1011 := (not #787)
#1010 := (not #699)
#1012 := (or #574 #1010 #985 #1011)
#1013 := [th-lemma arith assign-bounds -1 1 -3]: #1012
#1014 := [unit-resolution #1013 #1009 #1008 #1004]: #574
#1016 := (not #575)
#1015 := (not #574)
#1017 := (or #855 #1015 #1016)
#1018 := [th-lemma arith triangle-eq]: #1017
#1019 := [unit-resolution #1018 #1014 #1001]: #855
#1020 := [unit-resolution #980 #998]: #487
#1021 := [unit-resolution #987 #1009]: #474
#1022 := [unit-resolution #992 #1021 #1020]: #554
#1026 := [trans #1022 #1019]: #1025
#1028 := [trans #1026 #1024]: #1027
#1030 := [monotonicity #1028]: #1029
#1032 := [symm #1030]: #1031
#1033 := [trans #557 #1032]: #92
[unit-resolution #100 #1033]: false
unsat
34a7ceb02d535a80474ebf3499258caaaf0b3c6d 74 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
decl f4 :: S2
#8 := f4
#11 := (f3 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
#9 := (f3 f4)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (ite #59 f4 f5)
#65 := (f3 #62)
#73 := (* -1::Int #65)
#605 := (+ #11 #73)
#611 := (>= #605 0::Int)
#610 := (= #11 #65)
#324 := (= f5 #62)
#239 := (not #59)
#238 := (= f4 #62)
#608 := (not #238)
#623 := (= #9 #65)
#618 := [hypothesis]: #238
#615 := [monotonicity #618]: #623
#337 := (not #623)
#74 := (+ #9 #73)
#72 := (>= #74 0::Int)
#78 := (not #72)
#12 := (<= #9 #11)
#13 := (ite #12 f4 f5)
#14 := (f3 #13)
#15 := (<= #14 #9)
#16 := (not #15)
#79 := (iff #16 #78)
#76 := (iff #15 #72)
#68 := (<= #65 #9)
#71 := (iff #68 #72)
#75 := [rewrite]: #71
#69 := (iff #15 #68)
#66 := (= #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#77 := [trans #70 #75]: #76
#80 := [monotonicity #77]: #79
#53 := [asserted]: #16
#81 := [mp #53 #80]: #78
#338 := (or #337 #72)
#616 := [th-lemma arith triangle-eq]: #338
#614 := [unit-resolution #616 #81]: #337
#619 := [unit-resolution #614 #615]: false
#609 := [lemma #619]: #608
#325 := (or #239 #238)
#326 := [def-axiom]: #325
#612 := [unit-resolution #326 #609]: #239
#317 := (or #59 #324)
#328 := [def-axiom]: #317
#607 := [unit-resolution #328 #612]: #324
#613 := [monotonicity #607]: #610
#454 := (not #610)
#455 := (or #454 #611)
#456 := [th-lemma arith triangle-eq]: #455
#598 := [unit-resolution #456 #613]: #611
#345 := (<= #74 0::Int)
#599 := (or #345 #72)
#600 := [th-lemma arith farkas 1 1]: #599
#601 := [unit-resolution #600 #81]: #345
[th-lemma arith farkas 1 1 1 #601 #612 #598]: false
unsat
5688b1f40e77ff02f54bc9b4a677983c538630cc 68 0
#2 := false
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
decl f4 :: S2
#8 := f4
#22 := 0::Int
#11 := (f3 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
#9 := (f3 f4)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (ite #59 f4 f5)
#65 := (f3 #62)
#336 := (= #11 #65)
#324 := (= f5 #62)
#239 := (not #59)
#338 := [hypothesis]: #59
#72 := (* -1::Int #65)
#73 := (+ #11 #72)
#71 := (>= #73 0::Int)
#78 := (not #71)
#12 := (<= #9 #11)
#13 := (ite #12 f4 f5)
#14 := (f3 #13)
#15 := (<= #14 #11)
#16 := (not #15)
#79 := (iff #16 #78)
#76 := (iff #15 #71)
#68 := (<= #65 #11)
#74 := (iff #68 #71)
#75 := [rewrite]: #74
#69 := (iff #15 #68)
#66 := (= #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#77 := [trans #70 #75]: #76
#80 := [monotonicity #77]: #79
#53 := [asserted]: #16
#81 := [mp #53 #80]: #78
#345 := (+ #9 #72)
#337 := (>= #345 0::Int)
#623 := (= #9 #65)
#238 := (= f4 #62)
#325 := (or #239 #238)
#326 := [def-axiom]: #325
#616 := [unit-resolution #326 #338]: #238
#617 := [monotonicity #616]: #623
#332 := (not #623)
#614 := (or #332 #337)
#618 := [th-lemma arith triangle-eq]: #614
#615 := [unit-resolution #618 #617]: #337
#619 := [th-lemma arith farkas -1 1 1 #615 #81 #338]: false
#608 := [lemma #619]: #239
#317 := (or #59 #324)
#328 := [def-axiom]: #317
#610 := [unit-resolution #328 #608]: #324
#605 := [monotonicity #610]: #336
#606 := (not #336)
#611 := (or #606 #71)
#612 := [th-lemma arith triangle-eq]: #611
[unit-resolution #612 #81 #605]: false
unsat
c0ff73a34838bf4027c6c6a69afb1f2b3f234fe5 274 0
#2 := false
#23 := 0::Int
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#338 := (= #9 0::Int)
decl f6 :: (-> Int S2)
#331 := (f6 #9)
#318 := (f3 #331)
#652 := (= #318 0::Int)
#317 := (>= #9 0::Int)
#570 := (not #317)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#57 := -1::Int
#58 := (* -1::Int #11)
#59 := (+ #9 #58)
#60 := (<= #59 0::Int)
#63 := (ite #60 f4 f5)
#66 := (f3 #63)
#75 := (* -1::Int #66)
#76 := (+ #11 #75)
#77 := (+ #9 #76)
#73 := (>= #77 0::Int)
#80 := (not #73)
#15 := (+ #9 #11)
#12 := (<= #9 #11)
#13 := (ite #12 f4 f5)
#14 := (f3 #13)
#16 := (<= #14 #15)
#17 := (not #16)
#81 := (iff #17 #80)
#78 := (iff #16 #73)
#69 := (<= #66 #15)
#72 := (iff #69 #73)
#74 := [rewrite]: #72
#70 := (iff #16 #69)
#67 := (= #14 #66)
#64 := (= #13 #63)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#79 := [trans #71 #74]: #78
#82 := [monotonicity #79]: #81
#54 := [asserted]: #17
#83 := [mp #54 #82]: #80
#588 := (>= #76 0::Int)
#595 := (= #11 #66)
#326 := (= f5 #63)
#649 := (f6 #66)
#479 := (= #649 #63)
#306 := (= #63 #649)
#18 := (:var 0 S2)
#19 := (f3 #18)
#655 := (pattern #19)
#20 := (f6 #19)
#56 := (= #18 #20)
#656 := (forall (vars (?v0 S2)) (:pat #655) #56)
#86 := (forall (vars (?v0 S2)) #56)
#657 := (iff #86 #656)
#659 := (iff #656 #656)
#660 := [rewrite]: #659
#658 := [rewrite]: #657
#661 := [trans #658 #660]: #657
#180 := (~ #86 #86)
#178 := (~ #56 #56)
#179 := [refl]: #178
#181 := [nnf-pos #179]: #180
#21 := (= #20 #18)
#22 := (forall (vars (?v0 S2)) #21)
#87 := (iff #22 #86)
#84 := (iff #21 #56)
#85 := [rewrite]: #84
#88 := [quant-intro #85]: #87
#55 := [asserted]: #22
#91 := [mp #55 #88]: #86
#170 := [mp~ #91 #181]: #86
#662 := [mp #170 #661]: #656
#333 := (not #656)
#650 := (or #333 #306)
#651 := [quant-inst #63]: #650
#619 := [unit-resolution #651 #662]: #306
#480 := [symm #619]: #479
#439 := (= f5 #649)
#332 := (f6 #11)
#596 := (= #332 #649)
#354 := (f3 #649)
#435 := (= #354 #66)
#604 := (= #66 #354)
#605 := [monotonicity #619]: #604
#437 := [symm #605]: #435
#592 := (= #11 #354)
#599 := (= 0::Int #354)
#247 := (= #354 0::Int)
#353 := (>= #66 0::Int)
#612 := (not #353)
#347 := (+ #9 #75)
#339 := (>= #347 0::Int)
#625 := (= #9 #66)
#240 := (= f4 #63)
#340 := (not #326)
#618 := [hypothesis]: #340
#319 := (or #60 #326)
#330 := [def-axiom]: #319
#334 := [unit-resolution #330 #618]: #60
#241 := (not #60)
#327 := (or #241 #240)
#328 := [def-axiom]: #327
#616 := [unit-resolution #328 #334]: #240
#620 := [monotonicity #616]: #625
#617 := (not #625)
#621 := (or #617 #339)
#610 := [th-lemma arith triangle-eq]: #621
#611 := [unit-resolution #610 #620]: #339
#607 := (not #339)
#608 := (or #612 #607 #241 #73)
#613 := [th-lemma arith assign-bounds 2 -1 -1]: #608
#614 := [unit-resolution #613 #334 #83 #611]: #612
#624 := (or #247 #353)
#24 := (:var 0 Int)
#26 := (f6 #24)
#663 := (pattern #26)
#107 := (>= #24 0::Int)
#27 := (f3 #26)
#32 := (= #27 0::Int)
#156 := (or #32 #107)
#670 := (forall (vars (?v0 Int)) (:pat #663) #156)
#161 := (forall (vars (?v0 Int)) #156)
#673 := (iff #161 #670)
#671 := (iff #156 #156)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#174 := (~ #161 #161)
#182 := (~ #156 #156)
#183 := [refl]: #182
#175 := [nnf-pos #183]: #174
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#164 := (iff #34 #161)
#127 := (= 0::Int #27)
#133 := (not #31)
#134 := (or #133 #127)
#139 := (forall (vars (?v0 Int)) #134)
#162 := (iff #139 #161)
#159 := (iff #134 #156)
#153 := (or #107 #32)
#157 := (iff #153 #156)
#158 := [rewrite]: #157
#154 := (iff #134 #153)
#151 := (iff #127 #32)
#152 := [rewrite]: #151
#149 := (iff #133 #107)
#109 := (not #107)
#144 := (not #109)
#147 := (iff #144 #107)
#148 := [rewrite]: #147
#145 := (iff #133 #144)
#142 := (iff #31 #109)
#143 := [rewrite]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#155 := [monotonicity #150 #152]: #154
#160 := [trans #155 #158]: #159
#163 := [quant-intro #160]: #162
#140 := (iff #34 #139)
#137 := (iff #33 #134)
#130 := (implies #31 #127)
#135 := (iff #130 #134)
#136 := [rewrite]: #135
#131 := (iff #33 #130)
#128 := (iff #32 #127)
#129 := [rewrite]: #128
#132 := [monotonicity #129]: #131
#138 := [trans #132 #136]: #137
#141 := [quant-intro #138]: #140
#165 := [trans #141 #163]: #164
#126 := [asserted]: #34
#166 := [mp #126 #165]: #161
#184 := [mp~ #166 #175]: #161
#675 := [mp #184 #674]: #670
#304 := (not #670)
#348 := (or #304 #247 #353)
#622 := (or #304 #624)
#623 := (iff #622 #348)
#627 := [rewrite]: #623
#626 := [quant-inst #66]: #622
#337 := [mp #626 #627]: #348
#609 := [unit-resolution #337 #675]: #624
#615 := [unit-resolution #609 #614]: #247
#606 := [symm #615]: #599
#438 := (= #11 0::Int)
#634 := (f3 #332)
#635 := (= #634 0::Int)
#633 := (>= #11 0::Int)
#456 := (not #633)
#457 := (or #456 #607 #73)
#458 := [th-lemma arith assign-bounds 1 -1]: #457
#600 := [unit-resolution #458 #611 #83]: #456
#631 := (or #633 #635)
#638 := (or #304 #633 #635)
#636 := (or #635 #633)
#640 := (or #304 #636)
#629 := (iff #640 #638)
#281 := (or #304 #631)
#642 := (iff #281 #638)
#628 := [rewrite]: #642
#641 := (iff #640 #281)
#637 := (iff #636 #631)
#275 := [rewrite]: #637
#639 := [monotonicity #275]: #641
#351 := [trans #639 #628]: #629
#280 := [quant-inst #11]: #640
#352 := [mp #280 #351]: #638
#601 := [unit-resolution #352 #675]: #631
#602 := [unit-resolution #601 #600]: #635
#597 := (= #11 #634)
#329 := (= f5 #332)
#436 := (or #333 #329)
#643 := [quant-inst #10]: #436
#603 := [unit-resolution #643 #662]: #329
#598 := [monotonicity #603]: #597
#591 := [trans #598 #602]: #438
#594 := [trans #591 #606]: #592
#593 := [trans #594 #437]: #595
#478 := [monotonicity #593]: #596
#587 := [trans #603 #478]: #439
#489 := [trans #587 #480]: #326
#584 := [unit-resolution #618 #489]: false
#585 := [lemma #584]: #326
#473 := [monotonicity #585]: #595
#491 := (not #588)
#484 := [hypothesis]: #491
#586 := (not #595)
#590 := (or #586 #588)
#577 := [th-lemma arith triangle-eq]: #590
#579 := [unit-resolution #577 #484 #473]: false
#571 := [lemma #579]: #588
#580 := (or #570 #491 #73)
#581 := [th-lemma arith assign-bounds 1 -1]: #580
#582 := [unit-resolution #581 #571 #83]: #570
#648 := (or #317 #652)
#309 := (or #304 #317 #652)
#653 := (or #652 #317)
#645 := (or #304 #653)
#295 := (iff #645 #309)
#646 := (or #304 #648)
#293 := (iff #646 #309)
#294 := [rewrite]: #293
#289 := (iff #645 #646)
#654 := (iff #653 #648)
#644 := [rewrite]: #654
#630 := [monotonicity #644]: #289
#296 := [trans #630 #294]: #295
#305 := [quant-inst #9]: #645
#632 := [mp #305 #296]: #309
#578 := [unit-resolution #632 #675]: #648
#583 := [unit-resolution #578 #582]: #652
#575 := (= #9 #318)
#259 := (= f4 #331)
#312 := (or #333 #259)
#647 := [quant-inst #8]: #312
#572 := [unit-resolution #647 #662]: #259
#569 := [monotonicity #572]: #575
#576 := [trans #569 #583]: #338
#560 := (not #338)
#561 := (or #560 #317)
#563 := [th-lemma arith triangle-eq]: #561
[unit-resolution #563 #582 #576]: false
unsat
e247d094800838c81ff9c1c1fc1185aa59b905e4 121 0
#2 := false
decl f3 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
decl f5 :: S2
#10 := f5
#28 := 0::Int
#14 := (f3 f6)
#67 := -1::Int
#76 := (* -1::Int #14)
#11 := (f3 f5)
#86 := (+ #11 #76)
#87 := (<= #86 0::Int)
#90 := (ite #87 f5 f6)
#93 := (f3 #90)
#650 := (= #11 #93)
#278 := (= f5 #90)
#364 := (= f6 #90)
#477 := (not #364)
#635 := (= #14 #93)
#516 := [hypothesis]: #364
#517 := [monotonicity #516]: #635
#629 := (not #635)
#101 := (* -1::Int #93)
#636 := (+ #14 #101)
#642 := (<= #636 0::Int)
#473 := (not #642)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#102 := (+ #9 #101)
#100 := (>= #102 0::Int)
#99 := (not #100)
#77 := (+ #9 #76)
#75 := (>= #77 0::Int)
#74 := (not #75)
#70 := (* -1::Int #11)
#71 := (+ #9 #70)
#69 := (>= #71 0::Int)
#68 := (not #69)
#80 := (and #68 #74)
#83 := (not #80)
#107 := (or #83 #99)
#110 := (not #107)
#17 := (<= #11 #14)
#18 := (ite #17 f5 f6)
#19 := (f3 #18)
#20 := (< #9 #19)
#15 := (< #9 #14)
#12 := (< #9 #11)
#16 := (and #12 #15)
#21 := (implies #16 #20)
#22 := (not #21)
#113 := (iff #22 #110)
#60 := (not #16)
#61 := (or #60 #20)
#64 := (not #61)
#111 := (iff #64 #110)
#108 := (iff #61 #107)
#105 := (iff #20 #99)
#96 := (< #9 #93)
#103 := (iff #96 #99)
#104 := [rewrite]: #103
#97 := (iff #20 #96)
#94 := (= #19 #93)
#91 := (= #18 #90)
#88 := (iff #17 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#106 := [trans #98 #104]: #105
#84 := (iff #60 #83)
#81 := (iff #16 #80)
#78 := (iff #15 #74)
#79 := [rewrite]: #78
#72 := (iff #12 #68)
#73 := [rewrite]: #72
#82 := [monotonicity #73 #79]: #81
#85 := [monotonicity #82]: #84
#109 := [monotonicity #85 #106]: #108
#112 := [monotonicity #109]: #111
#65 := (iff #22 #64)
#62 := (iff #21 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#114 := [trans #66 #112]: #113
#59 := [asserted]: #22
#115 := [mp #59 #114]: #110
#119 := [not-or-elim #115]: #100
#116 := [not-or-elim #115]: #80
#118 := [and-elim #116]: #74
#637 := [hypothesis]: #642
#644 := [th-lemma arith farkas -1 -1 1 #637 #118 #119]: false
#475 := [lemma #644]: #473
#630 := (or #629 #642)
#632 := [th-lemma arith triangle-eq]: #630
#634 := [unit-resolution #632 #475]: #629
#518 := [unit-resolution #634 #517]: false
#625 := [lemma #518]: #477
#357 := (or #87 #364)
#368 := [def-axiom]: #357
#622 := [unit-resolution #368 #625]: #87
#279 := (not #87)
#365 := (or #279 #278)
#366 := [def-axiom]: #365
#623 := [unit-resolution #366 #622]: #278
#626 := [monotonicity #623]: #650
#496 := (not #650)
#645 := (+ #11 #101)
#646 := (<= #645 0::Int)
#653 := (not #646)
#117 := [and-elim #116]: #68
#652 := [hypothesis]: #646
#647 := [th-lemma arith farkas -1 -1 1 #652 #117 #119]: false
#494 := [lemma #647]: #653
#638 := (or #496 #646)
#639 := [th-lemma arith triangle-eq]: #638
#527 := [unit-resolution #639 #494]: #496
[unit-resolution #527 #626]: false
unsat
17d63589ff73a77b888aa8effc14d380fc26d98a 155 0
#2 := false
decl f4 :: S2
#8 := f4
decl f5 :: S2
#10 := f5
#23 := 0::Int
decl f3 :: (-> S2 Int)
#11 := (f3 f5)
#57 := -1::Int
#58 := (* -1::Int #11)
#9 := (f3 f4)
#59 := (+ #9 #58)
#67 := (>= #59 0::Int)
#69 := (ite #67 f5 f4)
#60 := (<= #59 0::Int)
#63 := (ite #60 f4 f5)
#72 := (= #63 #69)
#326 := (= f5 #69)
#486 := (iff #326 #72)
#483 := (iff #72 #326)
#618 := (= #63 f5)
#321 := (= f5 #63)
#236 := (not #60)
#235 := (= f4 #63)
#474 := (not #235)
#590 := (iff #235 #72)
#587 := (iff #72 #235)
#601 := (= #63 f4)
#433 := (iff #601 #235)
#586 := [commutativity]: #433
#430 := (iff #72 #601)
#600 := (= #69 f4)
#254 := (= f4 #69)
#619 := (not #254)
#620 := [hypothesis]: #619
#307 := (or #67 #254)
#642 := [def-axiom]: #307
#342 := [unit-resolution #642 #620]: #67
#327 := (not #67)
#324 := (or #327 #326)
#328 := [def-axiom]: #324
#343 := [unit-resolution #328 #342]: #326
#596 := (= f4 f5)
decl f6 :: (-> Int S2)
#431 := (f6 #11)
#451 := (= #431 f5)
#638 := (= f5 #431)
#18 := (:var 0 S2)
#19 := (f3 #18)
#650 := (pattern #19)
#20 := (f6 #19)
#56 := (= #18 #20)
#651 := (forall (vars (?v0 S2)) (:pat #650) #56)
#81 := (forall (vars (?v0 S2)) #56)
#652 := (iff #81 #651)
#654 := (iff #651 #651)
#655 := [rewrite]: #654
#653 := [rewrite]: #652
#656 := [trans #653 #655]: #652
#175 := (~ #81 #81)
#173 := (~ #56 #56)
#174 := [refl]: #173
#176 := [nnf-pos #174]: #175
#21 := (= #20 #18)
#22 := (forall (vars (?v0 S2)) #21)
#82 := (iff #22 #81)
#79 := (iff #21 #56)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#55 := [asserted]: #22
#86 := [mp #55 #83]: #81
#165 := [mp~ #86 #176]: #81
#657 := [mp #165 #656]: #651
#312 := (not #651)
#648 := (or #312 #638)
#643 := [quant-inst #10]: #648
#602 := [unit-resolution #643 #657]: #638
#452 := [symm #602]: #451
#453 := (= f4 #431)
#644 := (f6 #9)
#604 := (= #644 #431)
#608 := (= #431 #644)
#606 := (= #11 #9)
#616 := (= #9 #11)
#614 := (not #321)
#75 := (not #72)
#329 := (iff #75 #614)
#335 := (iff #72 #321)
#333 := (iff #618 #321)
#334 := [commutativity]: #333
#622 := (iff #72 #618)
#617 := (= #69 f5)
#621 := [symm #343]: #617
#332 := [monotonicity #621]: #622
#613 := [trans #332 #334]: #335
#611 := [monotonicity #613]: #329
#14 := (<= #11 #9)
#15 := (ite #14 f5 f4)
#12 := (<= #9 #11)
#13 := (ite #12 f4 f5)
#16 := (= #13 #15)
#17 := (not #16)
#76 := (iff #17 #75)
#73 := (iff #16 #72)
#70 := (= #15 #69)
#66 := (iff #14 #67)
#68 := [rewrite]: #66
#71 := [monotonicity #68]: #70
#64 := (= #13 #63)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#74 := [monotonicity #65 #71]: #73
#77 := [monotonicity #74]: #76
#54 := [asserted]: #17
#78 := [mp #54 #77]: #75
#615 := [mp #78 #611]: #614
#314 := (or #60 #321)
#325 := [def-axiom]: #314
#612 := [unit-resolution #325 #615]: #60
#605 := [th-lemma arith eq-propagate 1 1 #342 #612]: #616
#607 := [symm #605]: #606
#609 := [monotonicity #607]: #608
#610 := [symm #609]: #604
#301 := (= f4 #644)
#313 := (or #312 #301)
#645 := [quant-inst #8]: #313
#603 := [unit-resolution #645 #657]: #301
#595 := [trans #603 #610]: #453
#597 := [trans #595 #452]: #596
#598 := [trans #597 #343]: #254
#592 := [unit-resolution #620 #598]: false
#593 := [lemma #592]: #254
#594 := [symm #593]: #600
#432 := [monotonicity #594]: #430
#589 := [trans #432 #586]: #587
#588 := [symm #589]: #590
#599 := [hypothesis]: #235
#591 := [mp #599 #588]: #72
#473 := [unit-resolution #78 #591]: false
#475 := [lemma #473]: #474
#322 := (or #236 #235)
#323 := [def-axiom]: #322
#434 := [unit-resolution #323 #475]: #236
#583 := [unit-resolution #325 #434]: #321
#468 := [symm #583]: #618
#485 := [monotonicity #468]: #483
#479 := [symm #485]: #486
#582 := (or #67 #60)
#484 := [th-lemma arith farkas 1 1]: #582
#579 := [unit-resolution #484 #434]: #67
#580 := [unit-resolution #328 #579]: #326
#487 := [mp #580 #479]: #72
[unit-resolution #78 #487]: false
unsat
42493be889faac3085f414fe327745c6dc7e65ef 303 0
#2 := false
decl f5 :: (-> Int S2)
#10 := 0::Int
#11 := (f5 0::Int)
decl f4 :: S2
#8 := f4
decl f3 :: (-> S2 Int)
#12 := (f3 #11)
#59 := -1::Int
#60 := (* -1::Int #12)
#9 := (f3 f4)
#61 := (+ #9 #60)
#62 := (<= #61 0::Int)
#65 := (ite #62 f4 #11)
#68 := (= #11 #65)
#325 := (f3 #65)
#326 := (f5 #325)
#591 := (= #326 #65)
#254 := (= #65 #326)
#17 := (:var 0 S2)
#18 := (f3 #17)
#650 := (pattern #18)
#19 := (f5 #18)
#78 := (= #17 #19)
#651 := (forall (vars (?v0 S2)) (:pat #650) #78)
#81 := (forall (vars (?v0 S2)) #78)
#652 := (iff #81 #651)
#654 := (iff #651 #651)
#655 := [rewrite]: #654
#653 := [rewrite]: #652
#656 := [trans #653 #655]: #652
#175 := (~ #81 #81)
#173 := (~ #78 #78)
#174 := [refl]: #173
#176 := [nnf-pos #174]: #175
#20 := (= #19 #17)
#21 := (forall (vars (?v0 S2)) #20)
#82 := (iff #21 #81)
#79 := (iff #20 #78)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#77 := [asserted]: #21
#86 := [mp #77 #83]: #81
#165 := [mp~ #86 #176]: #81
#657 := [mp #165 #656]: #651
#328 := (not #651)
#307 := (or #328 #254)
#642 := [quant-inst #65]: #307
#601 := [unit-resolution #642 #657]: #254
#473 := [symm #601]: #591
#563 := (= #11 #326)
#574 := (= 0::Int #325)
#587 := (= #9 #325)
#433 := (= #325 #9)
#430 := (= #65 f4)
#235 := (= f4 #65)
#71 := (not #68)
#13 := (<= #9 #12)
#14 := (ite #13 f4 #11)
#15 := (= #14 #11)
#16 := (not #15)
#74 := (iff #16 #71)
#53 := (= #11 #14)
#56 := (not #53)
#72 := (iff #56 #71)
#69 := (iff #53 #68)
#66 := (= #14 #65)
#63 := (iff #13 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#75 := [trans #58 #73]: #74
#52 := [asserted]: #16
#76 := [mp #52 #75]: #71
#323 := (or #62 #68)
#314 := [def-axiom]: #323
#607 := [unit-resolution #314 #76]: #62
#321 := (not #62)
#236 := (or #321 #235)
#322 := [def-axiom]: #236
#594 := [unit-resolution #322 #607]: #235
#432 := [symm #594]: #430
#586 := [monotonicity #432]: #433
#589 := [symm #586]: #587
#585 := (= 0::Int #9)
#619 := (f5 #9)
#620 := (f3 #619)
#484 := (= #620 #9)
#489 := (= #9 #620)
#487 := (= f4 #619)
#483 := (= #326 #619)
#590 := (= #619 #326)
#588 := [monotonicity #589]: #590
#485 := [symm #588]: #483
#486 := (= f4 #326)
#479 := [trans #594 #601]: #486
#488 := [trans #479 #485]: #487
#490 := [monotonicity #488]: #489
#581 := [symm #490]: #484
#491 := (= 0::Int #620)
#342 := (= #620 0::Int)
#605 := (= #9 0::Int)
#606 := (<= #9 0::Int)
#276 := (<= #12 0::Int)
#645 := (= #12 0::Int)
#22 := (:var 0 Int)
#24 := (f5 #22)
#658 := (pattern #24)
#102 := (>= #22 0::Int)
#104 := (not #102)
#25 := (f3 #24)
#85 := (= #22 #25)
#110 := (or #85 #104)
#659 := (forall (vars (?v0 Int)) (:pat #658) #110)
#115 := (forall (vars (?v0 Int)) #110)
#662 := (iff #115 #659)
#660 := (iff #110 #110)
#661 := [refl]: #660
#663 := [quant-intro #661]: #662
#167 := (~ #115 #115)
#166 := (~ #110 #110)
#163 := [refl]: #166
#168 := [nnf-pos #163]: #167
#26 := (= #25 #22)
#23 := (<= 0::Int #22)
#27 := (implies #23 #26)
#28 := (forall (vars (?v0 Int)) #27)
#118 := (iff #28 #115)
#92 := (not #23)
#93 := (or #92 #85)
#98 := (forall (vars (?v0 Int)) #93)
#116 := (iff #98 #115)
#113 := (iff #93 #110)
#107 := (or #104 #85)
#111 := (iff #107 #110)
#112 := [rewrite]: #111
#108 := (iff #93 #107)
#105 := (iff #92 #104)
#101 := (iff #23 #102)
#103 := [rewrite]: #101
#106 := [monotonicity #103]: #105
#109 := [monotonicity #106]: #108
#114 := [trans #109 #112]: #113
#117 := [quant-intro #114]: #116
#99 := (iff #28 #98)
#96 := (iff #27 #93)
#89 := (implies #23 #85)
#94 := (iff #89 #93)
#95 := [rewrite]: #94
#90 := (iff #27 #89)
#87 := (iff #26 #85)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#97 := [trans #91 #95]: #96
#100 := [quant-intro #97]: #99
#119 := [trans #100 #117]: #118
#84 := [asserted]: #28
#120 := [mp #84 #119]: #115
#164 := [mp~ #120 #168]: #115
#664 := [mp #164 #663]: #659
#628 := (not #659)
#629 := (or #628 #645)
#644 := (>= 0::Int 0::Int)
#301 := (not #644)
#312 := (= 0::Int #12)
#313 := (or #312 #301)
#630 := (or #628 #313)
#626 := (iff #630 #629)
#270 := (iff #629 #629)
#633 := [rewrite]: #270
#291 := (iff #313 #645)
#284 := (or #645 false)
#289 := (iff #284 #645)
#290 := [rewrite]: #289
#625 := (iff #313 #284)
#300 := (iff #301 false)
#1 := true
#649 := (not true)
#304 := (iff #649 false)
#640 := [rewrite]: #304
#639 := (iff #301 #649)
#648 := (iff #644 true)
#643 := [rewrite]: #648
#299 := [monotonicity #643]: #639
#641 := [trans #299 #640]: #300
#646 := (iff #312 #645)
#647 := [rewrite]: #646
#288 := [monotonicity #647 #641]: #625
#627 := [trans #288 #290]: #291
#632 := [monotonicity #627]: #626
#635 := [trans #632 #633]: #626
#631 := [quant-inst #10]: #630
#275 := [mp #631 #635]: #629
#602 := [unit-resolution #275 #664]: #645
#603 := (not #645)
#608 := (or #603 #276)
#609 := [th-lemma arith triangle-eq]: #608
#604 := [unit-resolution #609 #602]: #276
#610 := (not #606)
#451 := [hypothesis]: #610
#452 := [th-lemma arith farkas -1 1 1 #451 #604 #607]: false
#453 := [lemma #452]: #606
#242 := (>= #9 0::Int)
#595 := (not #342)
#596 := [hypothesis]: #595
#617 := (or #242 #342)
#30 := (= #25 0::Int)
#151 := (or #30 #102)
#665 := (forall (vars (?v0 Int)) (:pat #658) #151)
#156 := (forall (vars (?v0 Int)) #151)
#668 := (iff #156 #665)
#666 := (iff #151 #151)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#169 := (~ #156 #156)
#177 := (~ #151 #151)
#178 := [refl]: #177
#170 := [nnf-pos #178]: #169
#29 := (< #22 0::Int)
#31 := (implies #29 #30)
#32 := (forall (vars (?v0 Int)) #31)
#159 := (iff #32 #156)
#122 := (= 0::Int #25)
#128 := (not #29)
#129 := (or #128 #122)
#134 := (forall (vars (?v0 Int)) #129)
#157 := (iff #134 #156)
#154 := (iff #129 #151)
#148 := (or #102 #30)
#152 := (iff #148 #151)
#153 := [rewrite]: #152
#149 := (iff #129 #148)
#146 := (iff #122 #30)
#147 := [rewrite]: #146
#144 := (iff #128 #102)
#139 := (not #104)
#142 := (iff #139 #102)
#143 := [rewrite]: #142
#140 := (iff #128 #139)
#137 := (iff #29 #104)
#138 := [rewrite]: #137
#141 := [monotonicity #138]: #140
#145 := [trans #141 #143]: #144
#150 := [monotonicity #145 #147]: #149
#155 := [trans #150 #153]: #154
#158 := [quant-intro #155]: #157
#135 := (iff #32 #134)
#132 := (iff #31 #129)
#125 := (implies #29 #122)
#130 := (iff #125 #129)
#131 := [rewrite]: #130
#126 := (iff #31 #125)
#123 := (iff #30 #122)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#133 := [trans #127 #131]: #132
#136 := [quant-intro #133]: #135
#160 := [trans #136 #158]: #159
#121 := [asserted]: #32
#161 := [mp #121 #160]: #156
#179 := [mp~ #161 #170]: #156
#670 := [mp #179 #669]: #665
#622 := (not #665)
#332 := (or #622 #242 #342)
#343 := (or #342 #242)
#333 := (or #622 #343)
#615 := (iff #333 #332)
#335 := (or #622 #617)
#329 := (iff #335 #332)
#611 := [rewrite]: #329
#613 := (iff #333 #335)
#621 := (iff #343 #617)
#618 := [rewrite]: #621
#614 := [monotonicity #618]: #613
#612 := [trans #614 #611]: #615
#334 := [quant-inst #9]: #333
#616 := [mp #334 #612]: #332
#597 := [unit-resolution #616 #670]: #617
#598 := [unit-resolution #597 #596]: #242
#592 := (not #242)
#593 := (or #605 #610 #592)
#599 := [th-lemma arith triangle-eq]: #593
#600 := [unit-resolution #599 #598 #453]: #605
#434 := (= #619 f4)
#474 := (= #619 #65)
#475 := [trans #588 #473]: #474
#582 := [trans #475 #432]: #434
#579 := [monotonicity #582]: #484
#580 := [trans #579 #600]: #342
#583 := [unit-resolution #596 #580]: false
#468 := [lemma #583]: #342
#584 := [symm #468]: #491
#572 := [trans #584 #581]: #585
#566 := [trans #572 #589]: #574
#565 := [monotonicity #566]: #563
#575 := [trans #565 #473]: #68
[unit-resolution #76 #575]: false
unsat
1037c58409b89c16f34d65158c467c932b087bd4 68 0
#2 := false
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
decl f5 :: S2
#10 := f5
#22 := 0::Int
#11 := (f3 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
#9 := (f3 f4)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (ite #59 f5 f4)
#65 := (f3 #62)
#337 := (= #9 #65)
#324 := (= f4 #62)
#239 := (not #59)
#338 := [hypothesis]: #59
#71 := (* -1::Int #65)
#72 := (+ #9 #71)
#73 := (<= #72 0::Int)
#78 := (not #73)
#12 := (<= #9 #11)
#13 := (ite #12 f5 f4)
#14 := (f3 #13)
#15 := (<= #9 #14)
#16 := (not #15)
#79 := (iff #16 #78)
#76 := (iff #15 #73)
#68 := (<= #9 #65)
#74 := (iff #68 #73)
#75 := [rewrite]: #74
#69 := (iff #15 #68)
#66 := (= #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#77 := [trans #70 #75]: #76
#80 := [monotonicity #77]: #79
#53 := [asserted]: #16
#81 := [mp #53 #80]: #78
#345 := (+ #11 #71)
#336 := (<= #345 0::Int)
#623 := (= #11 #65)
#238 := (= f5 #62)
#325 := (or #239 #238)
#326 := [def-axiom]: #325
#616 := [unit-resolution #326 #338]: #238
#617 := [monotonicity #616]: #623
#332 := (not #623)
#614 := (or #332 #336)
#618 := [th-lemma arith triangle-eq]: #614
#615 := [unit-resolution #618 #617]: #336
#619 := [th-lemma arith farkas 1 -1 1 #615 #81 #338]: false
#608 := [lemma #619]: #239
#317 := (or #59 #324)
#328 := [def-axiom]: #317
#610 := [unit-resolution #328 #608]: #324
#605 := [monotonicity #610]: #337
#606 := (not #337)
#611 := (or #606 #73)
#612 := [th-lemma arith triangle-eq]: #611
[unit-resolution #612 #81 #605]: false
unsat
607381f465ca29229d6d64af7dd9ecf1938d80f8 74 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
decl f4 :: S2
#8 := f4
#11 := (f3 f5)
#56 := -1::Int
#59 := (* -1::Int #11)
#9 := (f3 f4)
#60 := (+ #9 #59)
#58 := (>= #60 0::Int)
#62 := (ite #58 f4 f5)
#65 := (f3 #62)
#71 := (* -1::Int #65)
#605 := (+ #11 #71)
#606 := (<= #605 0::Int)
#610 := (= #11 #65)
#324 := (= f5 #62)
#239 := (not #58)
#238 := (= f4 #62)
#608 := (not #238)
#623 := (= #9 #65)
#618 := [hypothesis]: #238
#615 := [monotonicity #618]: #623
#337 := (not #623)
#72 := (+ #9 #71)
#73 := (<= #72 0::Int)
#78 := (not #73)
#12 := (<= #11 #9)
#13 := (ite #12 f4 f5)
#14 := (f3 #13)
#15 := (<= #9 #14)
#16 := (not #15)
#79 := (iff #16 #78)
#76 := (iff #15 #73)
#68 := (<= #9 #65)
#74 := (iff #68 #73)
#75 := [rewrite]: #74
#69 := (iff #15 #68)
#66 := (= #14 #65)
#63 := (= #13 #62)
#57 := (iff #12 #58)
#61 := [rewrite]: #57
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#77 := [trans #70 #75]: #76
#80 := [monotonicity #77]: #79
#53 := [asserted]: #16
#81 := [mp #53 #80]: #78
#338 := (or #337 #73)
#616 := [th-lemma arith triangle-eq]: #338
#614 := [unit-resolution #616 #81]: #337
#619 := [unit-resolution #614 #615]: false
#609 := [lemma #619]: #608
#325 := (or #239 #238)
#326 := [def-axiom]: #325
#612 := [unit-resolution #326 #609]: #239
#317 := (or #58 #324)
#328 := [def-axiom]: #317
#607 := [unit-resolution #328 #612]: #324
#613 := [monotonicity #607]: #610
#454 := (not #610)
#455 := (or #454 #606)
#456 := [th-lemma arith triangle-eq]: #455
#598 := [unit-resolution #456 #613]: #606
#345 := (>= #72 0::Int)
#599 := (or #345 #73)
#600 := [th-lemma arith farkas 1 1]: #599
#601 := [unit-resolution #600 #81]: #345
[th-lemma arith farkas 1 1 1 #601 #612 #598]: false
unsat
7e1dd181145bad16dc98a08ac13cd302270a61b8 462 0
#2 := false
decl f3 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
decl f6 :: S2
#10 := f6
#29 := 0::Int
#11 := (f3 f6)
#61 := -1::Int
#62 := (* -1::Int #11)
#9 := (f3 f5)
#63 := (+ #9 #62)
#91 := (<= #63 0::Int)
#94 := (ite #91 f6 f5)
#97 := (f3 #94)
#469 := (= #9 #97)
#361 := (= f5 #94)
#276 := (not #91)
#564 := (= #11 #97)
#275 := (= f6 #94)
#418 := [hypothesis]: #91
#362 := (or #276 #275)
#363 := [def-axiom]: #362
#419 := [unit-resolution #363 #418]: #275
#420 := [monotonicity #419]: #564
#103 := (* -1::Int #97)
#539 := (+ #11 #103)
#506 := (<= #539 0::Int)
#464 := (not #506)
decl f4 :: (-> Int S2)
#66 := (f4 #63)
#69 := (f3 #66)
#658 := (<= #69 0::Int)
#324 := (* -1::Int #69)
#665 := (+ #62 #324)
#328 := (+ #9 #665)
#664 := (>= #328 0::Int)
#329 := (= #328 0::Int)
#679 := (>= #63 0::Int)
#339 := (not #679)
#445 := [hypothesis]: #339
#441 := (or #679 #91)
#431 := [th-lemma arith farkas 1 1]: #441
#433 := [unit-resolution #431 #445]: #91
#434 := [unit-resolution #363 #433]: #275
#437 := [monotonicity #434]: #564
#386 := (= #69 0::Int)
#387 := (or #386 #679)
#30 := (:var 0 Int)
#32 := (f4 #30)
#698 := (pattern #32)
#142 := (>= #30 0::Int)
#33 := (f3 #32)
#38 := (= #33 0::Int)
#191 := (or #38 #142)
#705 := (forall (vars (?v0 Int)) (:pat #698) #191)
#196 := (forall (vars (?v0 Int)) #191)
#708 := (iff #196 #705)
#706 := (iff #191 #191)
#707 := [refl]: #706
#709 := [quant-intro #707]: #708
#209 := (~ #196 #196)
#217 := (~ #191 #191)
#218 := [refl]: #217
#210 := [nnf-pos #218]: #209
#37 := (< #30 0::Int)
#39 := (implies #37 #38)
#40 := (forall (vars (?v0 Int)) #39)
#199 := (iff #40 #196)
#162 := (= 0::Int #33)
#168 := (not #37)
#169 := (or #168 #162)
#174 := (forall (vars (?v0 Int)) #169)
#197 := (iff #174 #196)
#194 := (iff #169 #191)
#188 := (or #142 #38)
#192 := (iff #188 #191)
#193 := [rewrite]: #192
#189 := (iff #169 #188)
#186 := (iff #162 #38)
#187 := [rewrite]: #186
#184 := (iff #168 #142)
#144 := (not #142)
#179 := (not #144)
#182 := (iff #179 #142)
#183 := [rewrite]: #182
#180 := (iff #168 #179)
#177 := (iff #37 #144)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#185 := [trans #181 #183]: #184
#190 := [monotonicity #185 #187]: #189
#195 := [trans #190 #193]: #194
#198 := [quant-intro #195]: #197
#175 := (iff #40 #174)
#172 := (iff #39 #169)
#165 := (implies #37 #162)
#170 := (iff #165 #169)
#171 := [rewrite]: #170
#166 := (iff #39 #165)
#163 := (iff #38 #162)
#164 := [rewrite]: #163
#167 := [monotonicity #164]: #166
#173 := [trans #167 #171]: #172
#176 := [quant-intro #173]: #175
#200 := [trans #176 #198]: #199
#161 := [asserted]: #40
#201 := [mp #161 #200]: #196
#219 := [mp~ #201 #210]: #196
#710 := [mp #219 #709]: #705
#282 := (not #705)
#659 := (or #282 #386 #679)
#660 := (or #282 #387)
#383 := (iff #660 #659)
#657 := [rewrite]: #383
#382 := [quant-inst #63]: #660
#661 := [mp #382 #657]: #659
#438 := [unit-resolution #661 #710]: #387
#442 := [unit-resolution #438 #445]: #386
#550 := (not #386)
#435 := (or #550 #658)
#443 := [th-lemma arith triangle-eq]: #435
#436 := [unit-resolution #443 #442]: #658
#519 := (>= #9 0::Int)
#466 := (= #9 0::Int)
#366 := (f4 #9)
#527 := (f3 #366)
#528 := (= #527 0::Int)
#462 := (not #519)
#448 := [hypothesis]: #462
#530 := (or #519 #528)
#621 := (or #282 #519 #528)
#529 := (or #528 #519)
#625 := (or #282 #529)
#616 := (iff #625 #621)
#614 := (or #282 #530)
#605 := (iff #614 #621)
#615 := [rewrite]: #605
#606 := (iff #625 #614)
#531 := (iff #529 #530)
#624 := [rewrite]: #531
#603 := [monotonicity #624]: #606
#617 := [trans #603 #615]: #616
#612 := [quant-inst #9]: #625
#613 := [mp #612 #617]: #621
#452 := [unit-resolution #613 #710]: #530
#454 := [unit-resolution #452 #448]: #528
#453 := (= #9 #527)
#294 := (= f5 #366)
#24 := (:var 0 S2)
#25 := (f3 #24)
#690 := (pattern #25)
#26 := (f4 #25)
#118 := (= #24 #26)
#691 := (forall (vars (?v0 S2)) (:pat #690) #118)
#121 := (forall (vars (?v0 S2)) #118)
#692 := (iff #121 #691)
#694 := (iff #691 #691)
#695 := [rewrite]: #694
#693 := [rewrite]: #692
#696 := [trans #693 #695]: #692
#215 := (~ #121 #121)
#213 := (~ #118 #118)
#214 := [refl]: #213
#216 := [nnf-pos #214]: #215
#27 := (= #26 #24)
#28 := (forall (vars (?v0 S2)) #27)
#122 := (iff #28 #121)
#119 := (iff #27 #118)
#120 := [rewrite]: #119
#123 := [quant-intro #120]: #122
#117 := [asserted]: #28
#126 := [mp #117 #123]: #121
#205 := [mp~ #126 #216]: #121
#697 := [mp #205 #696]: #691
#368 := (not #691)
#347 := (or #368 #294)
#682 := [quant-inst #8]: #347
#455 := [unit-resolution #682 #697]: #294
#456 := [monotonicity #455]: #453
#444 := [trans #456 #454]: #466
#447 := (not #466)
#449 := (or #447 #519)
#450 := [th-lemma arith triangle-eq]: #449
#446 := [unit-resolution #450 #448 #444]: false
#451 := [lemma #446]: #519
#72 := (* -1::Int #9)
#73 := (+ #72 #11)
#76 := (f4 #73)
#79 := (f3 #76)
#654 := (+ #62 #79)
#369 := (+ #9 #654)
#640 := (<= #369 0::Int)
#375 := (= #369 0::Int)
#642 := (or #276 #375)
#125 := (= #30 #33)
#150 := (or #125 #144)
#699 := (forall (vars (?v0 Int)) (:pat #698) #150)
#155 := (forall (vars (?v0 Int)) #150)
#702 := (iff #155 #699)
#700 := (iff #150 #150)
#701 := [refl]: #700
#703 := [quant-intro #701]: #702
#207 := (~ #155 #155)
#206 := (~ #150 #150)
#203 := [refl]: #206
#208 := [nnf-pos #203]: #207
#34 := (= #33 #30)
#31 := (<= 0::Int #30)
#35 := (implies #31 #34)
#36 := (forall (vars (?v0 Int)) #35)
#158 := (iff #36 #155)
#132 := (not #31)
#133 := (or #132 #125)
#138 := (forall (vars (?v0 Int)) #133)
#156 := (iff #138 #155)
#153 := (iff #133 #150)
#147 := (or #144 #125)
#151 := (iff #147 #150)
#152 := [rewrite]: #151
#148 := (iff #133 #147)
#145 := (iff #132 #144)
#141 := (iff #31 #142)
#143 := [rewrite]: #141
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#157 := [quant-intro #154]: #156
#139 := (iff #36 #138)
#136 := (iff #35 #133)
#129 := (implies #31 #125)
#134 := (iff #129 #133)
#135 := [rewrite]: #134
#130 := (iff #35 #129)
#127 := (iff #34 #125)
#128 := [rewrite]: #127
#131 := [monotonicity #128]: #130
#137 := [trans #131 #135]: #136
#140 := [quant-intro #137]: #139
#159 := [trans #140 #157]: #158
#124 := [asserted]: #36
#160 := [mp #124 #159]: #155
#204 := [mp~ #160 #208]: #155
#704 := [mp #204 #703]: #699
#670 := (not #699)
#650 := (or #670 #276 #375)
#388 := (>= #73 0::Int)
#389 := (not #388)
#372 := (= #73 #79)
#373 := (or #372 #389)
#491 := (or #670 #373)
#632 := (iff #491 #650)
#493 := (or #670 #642)
#637 := (iff #493 #650)
#638 := [rewrite]: #637
#635 := (iff #491 #493)
#649 := (iff #373 #642)
#645 := (or #375 #276)
#643 := (iff #645 #642)
#648 := [rewrite]: #643
#646 := (iff #373 #645)
#652 := (iff #389 #276)
#651 := (iff #388 #91)
#655 := [rewrite]: #651
#656 := [monotonicity #655]: #652
#374 := (iff #372 #375)
#653 := [rewrite]: #374
#647 := [monotonicity #653 #656]: #646
#644 := [trans #647 #648]: #649
#636 := [monotonicity #644]: #635
#633 := [trans #636 #638]: #632
#492 := [quant-inst #73]: #491
#639 := [mp #492 #633]: #650
#439 := [unit-resolution #639 #704]: #642
#440 := [unit-resolution #439 #433]: #375
#426 := (not #375)
#428 := (or #426 #640)
#429 := [th-lemma arith triangle-eq]: #428
#427 := [unit-resolution #429 #440]: #640
#307 := (not #640)
#463 := (not #658)
#465 := (or #462 #463 #464 #307)
#487 := [hypothesis]: #640
#457 := [hypothesis]: #519
#458 := [hypothesis]: #506
#459 := [hypothesis]: #658
#104 := (+ #79 #103)
#105 := (+ #69 #104)
#106 := (<= #105 0::Int)
#111 := (not #106)
#19 := (<= #9 #11)
#20 := (ite #19 f6 f5)
#21 := (f3 #20)
#15 := (- #11 #9)
#16 := (f4 #15)
#17 := (f3 #16)
#12 := (- #9 #11)
#13 := (f4 #12)
#14 := (f3 #13)
#18 := (+ #14 #17)
#22 := (<= #18 #21)
#23 := (not #22)
#114 := (iff #23 #111)
#82 := (+ #69 #79)
#85 := (<= #82 #21)
#88 := (not #85)
#112 := (iff #88 #111)
#109 := (iff #85 #106)
#100 := (<= #82 #97)
#107 := (iff #100 #106)
#108 := [rewrite]: #107
#101 := (iff #85 #100)
#98 := (= #21 #97)
#95 := (= #20 #94)
#92 := (iff #19 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#99 := [monotonicity #96]: #98
#102 := [monotonicity #99]: #101
#110 := [trans #102 #108]: #109
#113 := [monotonicity #110]: #112
#89 := (iff #23 #88)
#86 := (iff #22 #85)
#83 := (= #18 #82)
#80 := (= #17 #79)
#77 := (= #16 #76)
#74 := (= #15 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#70 := (= #14 #69)
#67 := (= #13 #66)
#64 := (= #12 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#84 := [monotonicity #71 #81]: #83
#87 := [monotonicity #84]: #86
#90 := [monotonicity #87]: #89
#115 := [trans #90 #113]: #114
#60 := [asserted]: #23
#116 := [mp #60 #115]: #111
#460 := [th-lemma arith farkas -1 1 1 -1 1 #116 #459 #458 #457 #487]: false
#461 := [lemma #460]: #465
#430 := [unit-resolution #461 #427 #451 #436]: #464
#412 := (not #564)
#414 := (or #412 #506)
#415 := [th-lemma arith triangle-eq]: #414
#416 := [unit-resolution #415 #430 #437]: false
#417 := [lemma #416]: #679
#667 := (or #329 #339)
#671 := (or #670 #329 #339)
#340 := (= #63 #69)
#681 := (or #340 #339)
#666 := (or #670 #681)
#676 := (iff #666 #671)
#310 := (or #670 #667)
#315 := (iff #310 #671)
#316 := [rewrite]: #315
#673 := (iff #666 #310)
#668 := (iff #681 #667)
#330 := (iff #340 #329)
#331 := [rewrite]: #330
#669 := [monotonicity #331]: #668
#675 := [monotonicity #669]: #673
#674 := [trans #675 #316]: #676
#672 := [quant-inst #63]: #666
#677 := [mp #672 #674]: #671
#421 := [unit-resolution #677 #704]: #667
#422 := [unit-resolution #421 #417]: #329
#423 := (not #329)
#424 := (or #423 #664)
#413 := [th-lemma arith triangle-eq]: #424
#425 := [unit-resolution #413 #422]: #664
#502 := (not #664)
#402 := (or #276 #658 #502)
#404 := [th-lemma arith assign-bounds -1 -1]: #402
#405 := [unit-resolution #404 #418 #425]: #658
#406 := [unit-resolution #439 #418]: #375
#407 := [unit-resolution #429 #406]: #640
#408 := [unit-resolution #461 #407 #451 #405]: #464
#409 := [unit-resolution #415 #408 #420]: false
#410 := [lemma #409]: #276
#354 := (or #91 #361)
#365 := [def-axiom]: #354
#411 := [unit-resolution #365 #410]: #361
#396 := [monotonicity #411]: #469
#537 := (+ #9 #103)
#538 := (<= #537 0::Int)
#503 := (not #538)
#525 := (<= #79 0::Int)
#641 := (= #79 0::Int)
#627 := (or #91 #641)
#513 := (or #282 #91 #641)
#470 := (or #641 #388)
#514 := (or #282 #470)
#623 := (iff #514 #513)
#474 := (or #282 #627)
#619 := (iff #474 #513)
#620 := [rewrite]: #619
#622 := (iff #514 #474)
#628 := (iff #470 #627)
#472 := (or #641 #91)
#629 := (iff #472 #627)
#630 := [rewrite]: #629
#473 := (iff #470 #472)
#626 := [monotonicity #655]: #473
#631 := [trans #626 #630]: #628
#524 := [monotonicity #631]: #622
#508 := [trans #524 #620]: #623
#515 := [quant-inst #73]: #514
#523 := [mp #515 #508]: #513
#397 := [unit-resolution #523 #710]: #627
#398 := [unit-resolution #397 #410]: #641
#400 := (not #641)
#399 := (or #400 #525)
#401 := [th-lemma arith triangle-eq]: #399
#390 := [unit-resolution #401 #398]: #525
#501 := (not #525)
#391 := (or #501 #502 #503)
#618 := (>= #11 0::Int)
#490 := (= #11 0::Int)
#367 := (f4 #11)
#607 := (f3 #367)
#608 := (= #607 0::Int)
#500 := (not #618)
#467 := [hypothesis]: #500
#609 := (or #608 #618)
#611 := (or #282 #608 #618)
#595 := (or #282 #609)
#598 := (iff #595 #611)
#599 := [rewrite]: #598
#596 := [quant-inst #11]: #595
#600 := [mp #596 #599]: #611
#468 := [unit-resolution #600 #710]: #609
#475 := [unit-resolution #468 #467]: #608
#478 := (= #11 #607)
#364 := (= f6 #367)
#471 := (or #368 #364)
#678 := [quant-inst #10]: #471
#477 := [unit-resolution #678 #697]: #364
#479 := [monotonicity #477]: #478
#481 := [trans #479 #475]: #490
#482 := (not #490)
#483 := (or #482 #618)
#484 := [th-lemma arith triangle-eq]: #483
#485 := [unit-resolution #484 #467 #481]: false
#486 := [lemma #485]: #618
#504 := (or #500 #501 #502 #503)
#507 := [hypothesis]: #538
#496 := [hypothesis]: #664
#497 := [hypothesis]: #618
#498 := [hypothesis]: #525
#499 := [th-lemma arith farkas 1 -1 -1 -1 1 #498 #116 #497 #496 #507]: false
#505 := [lemma #499]: #504
#392 := [unit-resolution #505 #486]: #391
#384 := [unit-resolution #392 #390 #425]: #503
#393 := (not #469)
#394 := (or #393 #538)
#385 := [th-lemma arith triangle-eq]: #394
[unit-resolution #385 #384 #396]: false
unsat
43ad330c8a628ae1380016f60355abf621751ae2 121 0
#2 := false
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
decl f6 :: S2
#13 := f6
#28 := 0::Int
#14 := (f3 f6)
#67 := -1::Int
#74 := (* -1::Int #14)
#9 := (f3 f4)
#86 := (+ #9 #74)
#87 := (<= #86 0::Int)
#90 := (ite #87 f6 f4)
#93 := (f3 #90)
#635 := (= #9 #93)
#364 := (= f4 #90)
#279 := (not #87)
#278 := (= f6 #90)
#477 := (not #278)
#650 := (= #14 #93)
#516 := [hypothesis]: #278
#517 := [monotonicity #516]: #650
#496 := (not #650)
#99 := (* -1::Int #93)
#645 := (+ #14 #99)
#651 := (>= #645 0::Int)
#653 := (not #651)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#100 := (+ #11 #99)
#101 := (<= #100 0::Int)
#102 := (not #101)
#75 := (+ #11 #74)
#76 := (<= #75 0::Int)
#77 := (not #76)
#70 := (* -1::Int #11)
#71 := (+ #9 #70)
#69 := (>= #71 0::Int)
#68 := (not #69)
#80 := (and #68 #77)
#83 := (not #80)
#107 := (or #83 #102)
#110 := (not #107)
#17 := (<= #9 #14)
#18 := (ite #17 f6 f4)
#19 := (f3 #18)
#20 := (< #19 #11)
#15 := (< #14 #11)
#12 := (< #9 #11)
#16 := (and #12 #15)
#21 := (implies #16 #20)
#22 := (not #21)
#113 := (iff #22 #110)
#60 := (not #16)
#61 := (or #60 #20)
#64 := (not #61)
#111 := (iff #64 #110)
#108 := (iff #61 #107)
#105 := (iff #20 #102)
#96 := (< #93 #11)
#103 := (iff #96 #102)
#104 := [rewrite]: #103
#97 := (iff #20 #96)
#94 := (= #19 #93)
#91 := (= #18 #90)
#88 := (iff #17 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#106 := [trans #98 #104]: #105
#84 := (iff #60 #83)
#81 := (iff #16 #80)
#78 := (iff #15 #77)
#79 := [rewrite]: #78
#72 := (iff #12 #68)
#73 := [rewrite]: #72
#82 := [monotonicity #73 #79]: #81
#85 := [monotonicity #82]: #84
#109 := [monotonicity #85 #106]: #108
#112 := [monotonicity #109]: #111
#65 := (iff #22 #64)
#62 := (iff #21 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#114 := [trans #66 #112]: #113
#59 := [asserted]: #22
#115 := [mp #59 #114]: #110
#119 := [not-or-elim #115]: #101
#116 := [not-or-elim #115]: #80
#118 := [and-elim #116]: #77
#652 := [hypothesis]: #651
#647 := [th-lemma arith farkas -1 -1 1 #652 #118 #119]: false
#494 := [lemma #647]: #653
#638 := (or #496 #651)
#639 := [th-lemma arith triangle-eq]: #638
#634 := [unit-resolution #639 #494]: #496
#518 := [unit-resolution #634 #517]: false
#625 := [lemma #518]: #477
#365 := (or #279 #278)
#366 := [def-axiom]: #365
#622 := [unit-resolution #366 #625]: #279
#357 := (or #87 #364)
#368 := [def-axiom]: #357
#623 := [unit-resolution #368 #622]: #364
#626 := [monotonicity #623]: #635
#629 := (not #635)
#636 := (+ #9 #99)
#643 := (>= #636 0::Int)
#473 := (not #643)
#117 := [and-elim #116]: #68
#637 := [hypothesis]: #643
#644 := [th-lemma arith farkas -1 1 1 #637 #117 #119]: false
#475 := [lemma #644]: #473
#630 := (or #629 #643)
#632 := [th-lemma arith triangle-eq]: #630
#527 := [unit-resolution #632 #475]: #629
[unit-resolution #527 #626]: false
unsat
c73d1b046bda60b29e0d2c985905bdcf9c72a5d3 153 0
#2 := false
decl f5 :: S2
#10 := f5
decl f4 :: S2
#8 := f4
#23 := 0::Int
decl f3 :: (-> S2 Int)
#11 := (f3 f5)
#57 := -1::Int
#58 := (* -1::Int #11)
#9 := (f3 f4)
#59 := (+ #9 #58)
#67 := (>= #59 0::Int)
#69 := (ite #67 f4 f5)
#60 := (<= #59 0::Int)
#63 := (ite #60 f5 f4)
#72 := (= #63 #69)
#326 := (= f4 #69)
#483 := (iff #326 #72)
#583 := (iff #72 #326)
#622 := (= #63 f4)
#321 := (= f4 #63)
#236 := (not #60)
#235 := (= f5 #63)
#591 := (not #235)
#587 := (iff #235 #72)
#433 := (iff #72 #235)
#600 := (= #63 f5)
#430 := (iff #600 #235)
#432 := [commutativity]: #430
#594 := (iff #72 #600)
#593 := (= #69 f5)
#254 := (= f5 #69)
#619 := (not #254)
#620 := [hypothesis]: #619
#307 := (or #67 #254)
#642 := [def-axiom]: #307
#343 := [unit-resolution #642 #620]: #67
#327 := (not #67)
#324 := (or #327 #326)
#328 := [def-axiom]: #324
#617 := [unit-resolution #328 #343]: #326
#453 := (= f5 f4)
decl f6 :: (-> Int S2)
#644 := (f6 #9)
#604 := (= #644 f4)
#301 := (= f4 #644)
#18 := (:var 0 S2)
#19 := (f3 #18)
#650 := (pattern #19)
#20 := (f6 #19)
#56 := (= #18 #20)
#651 := (forall (vars (?v0 S2)) (:pat #650) #56)
#81 := (forall (vars (?v0 S2)) #56)
#652 := (iff #81 #651)
#654 := (iff #651 #651)
#655 := [rewrite]: #654
#653 := [rewrite]: #652
#656 := [trans #653 #655]: #652
#175 := (~ #81 #81)
#173 := (~ #56 #56)
#174 := [refl]: #173
#176 := [nnf-pos #174]: #175
#21 := (= #20 #18)
#22 := (forall (vars (?v0 S2)) #21)
#82 := (iff #22 #81)
#79 := (iff #21 #56)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#55 := [asserted]: #22
#86 := [mp #55 #83]: #81
#165 := [mp~ #86 #176]: #81
#657 := [mp #165 #656]: #651
#312 := (not #651)
#313 := (or #312 #301)
#645 := [quant-inst #8]: #313
#342 := [unit-resolution #645 #657]: #301
#610 := [symm #342]: #604
#451 := (= f5 #644)
#431 := (f6 #11)
#608 := (= #431 #644)
#607 := (= #11 #9)
#605 := (= #9 #11)
#329 := (not #321)
#75 := (not #72)
#611 := (iff #75 #329)
#613 := (iff #72 #321)
#334 := (iff #622 #321)
#335 := [commutativity]: #334
#332 := (iff #72 #622)
#621 := (= #69 f4)
#618 := [symm #617]: #621
#333 := [monotonicity #618]: #332
#614 := [trans #333 #335]: #613
#615 := [monotonicity #614]: #611
#14 := (<= #11 #9)
#15 := (ite #14 f4 f5)
#12 := (<= #9 #11)
#13 := (ite #12 f5 f4)
#16 := (= #13 #15)
#17 := (not #16)
#76 := (iff #17 #75)
#73 := (iff #16 #72)
#70 := (= #15 #69)
#66 := (iff #14 #67)
#68 := [rewrite]: #66
#71 := [monotonicity #68]: #70
#64 := (= #13 #63)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#74 := [monotonicity #65 #71]: #73
#77 := [monotonicity #74]: #76
#54 := [asserted]: #17
#78 := [mp #54 #77]: #75
#612 := [mp #78 #615]: #329
#314 := (or #60 #321)
#325 := [def-axiom]: #314
#616 := [unit-resolution #325 #612]: #60
#606 := [th-lemma arith eq-propagate 1 1 #343 #616]: #605
#602 := [symm #606]: #607
#609 := [monotonicity #602]: #608
#638 := (= f5 #431)
#648 := (or #312 #638)
#643 := [quant-inst #10]: #648
#603 := [unit-resolution #643 #657]: #638
#452 := [trans #603 #609]: #451
#595 := [trans #452 #610]: #453
#596 := [trans #595 #617]: #254
#597 := [unit-resolution #620 #596]: false
#598 := [lemma #597]: #254
#599 := [symm #598]: #593
#601 := [monotonicity #599]: #594
#586 := [trans #601 #432]: #433
#589 := [symm #586]: #587
#592 := [hypothesis]: #235
#590 := [mp #592 #589]: #72
#588 := [unit-resolution #78 #590]: false
#473 := [lemma #588]: #591
#322 := (or #236 #235)
#323 := [def-axiom]: #322
#474 := [unit-resolution #323 #473]: #236
#579 := [unit-resolution #325 #474]: #321
#580 := [symm #579]: #622
#468 := [monotonicity #580]: #583
#485 := [symm #468]: #483
#475 := (or #67 #60)
#434 := [th-lemma arith farkas 1 1]: #475
#582 := [unit-resolution #434 #474]: #67
#484 := [unit-resolution #328 #582]: #326
#486 := [mp #484 #485]: #72
[unit-resolution #78 #486]: false
unsat
b97d947e66a9977dcd86c14c12d3e44c5033e56b 279 0
#2 := false
decl f4 :: S2
#8 := f4
decl f5 :: (-> Int S2)
#10 := 0::Int
#11 := (f5 0::Int)
decl f3 :: (-> S2 Int)
#12 := (f3 #11)
#59 := -1::Int
#60 := (* -1::Int #12)
#9 := (f3 f4)
#61 := (+ #9 #60)
#62 := (<= #61 0::Int)
#65 := (ite #62 #11 f4)
#68 := (= f4 #65)
#235 := (= #11 #65)
#71 := (not #68)
#13 := (<= #9 #12)
#14 := (ite #13 #11 f4)
#15 := (= #14 f4)
#16 := (not #15)
#74 := (iff #16 #71)
#53 := (= f4 #14)
#56 := (not #53)
#72 := (iff #56 #71)
#69 := (iff #53 #68)
#66 := (= #14 #65)
#63 := (iff #13 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#75 := [trans #58 #73]: #74
#52 := [asserted]: #16
#76 := [mp #52 #75]: #71
#323 := (or #62 #68)
#314 := [def-axiom]: #323
#606 := [unit-resolution #314 #76]: #62
#321 := (not #62)
#236 := (or #321 #235)
#322 := [def-axiom]: #236
#589 := [unit-resolution #322 #606]: #235
#475 := (= f4 #11)
#325 := (f5 #9)
#473 := (= #325 #11)
#616 := (= #9 0::Int)
#619 := (f3 #325)
#620 := (= #619 0::Int)
#605 := (<= #9 0::Int)
#276 := (<= #12 0::Int)
#645 := (= #12 0::Int)
#22 := (:var 0 Int)
#24 := (f5 #22)
#658 := (pattern #24)
#102 := (>= #22 0::Int)
#104 := (not #102)
#25 := (f3 #24)
#85 := (= #22 #25)
#110 := (or #85 #104)
#659 := (forall (vars (?v0 Int)) (:pat #658) #110)
#115 := (forall (vars (?v0 Int)) #110)
#662 := (iff #115 #659)
#660 := (iff #110 #110)
#661 := [refl]: #660
#663 := [quant-intro #661]: #662
#167 := (~ #115 #115)
#166 := (~ #110 #110)
#163 := [refl]: #166
#168 := [nnf-pos #163]: #167
#26 := (= #25 #22)
#23 := (<= 0::Int #22)
#27 := (implies #23 #26)
#28 := (forall (vars (?v0 Int)) #27)
#118 := (iff #28 #115)
#92 := (not #23)
#93 := (or #92 #85)
#98 := (forall (vars (?v0 Int)) #93)
#116 := (iff #98 #115)
#113 := (iff #93 #110)
#107 := (or #104 #85)
#111 := (iff #107 #110)
#112 := [rewrite]: #111
#108 := (iff #93 #107)
#105 := (iff #92 #104)
#101 := (iff #23 #102)
#103 := [rewrite]: #101
#106 := [monotonicity #103]: #105
#109 := [monotonicity #106]: #108
#114 := [trans #109 #112]: #113
#117 := [quant-intro #114]: #116
#99 := (iff #28 #98)
#96 := (iff #27 #93)
#89 := (implies #23 #85)
#94 := (iff #89 #93)
#95 := [rewrite]: #94
#90 := (iff #27 #89)
#87 := (iff #26 #85)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#97 := [trans #91 #95]: #96
#100 := [quant-intro #97]: #99
#119 := [trans #100 #117]: #118
#84 := [asserted]: #28
#120 := [mp #84 #119]: #115
#164 := [mp~ #120 #168]: #115
#664 := [mp #164 #663]: #659
#628 := (not #659)
#629 := (or #628 #645)
#644 := (>= 0::Int 0::Int)
#301 := (not #644)
#312 := (= 0::Int #12)
#313 := (or #312 #301)
#630 := (or #628 #313)
#626 := (iff #630 #629)
#270 := (iff #629 #629)
#633 := [rewrite]: #270
#291 := (iff #313 #645)
#284 := (or #645 false)
#289 := (iff #284 #645)
#290 := [rewrite]: #289
#625 := (iff #313 #284)
#300 := (iff #301 false)
#1 := true
#649 := (not true)
#304 := (iff #649 false)
#640 := [rewrite]: #304
#639 := (iff #301 #649)
#648 := (iff #644 true)
#643 := [rewrite]: #648
#299 := [monotonicity #643]: #639
#641 := [trans #299 #640]: #300
#646 := (iff #312 #645)
#647 := [rewrite]: #646
#288 := [monotonicity #647 #641]: #625
#627 := [trans #288 #290]: #291
#632 := [monotonicity #627]: #626
#635 := [trans #632 #633]: #626
#631 := [quant-inst #10]: #630
#275 := [mp #631 #635]: #629
#607 := [unit-resolution #275 #664]: #645
#602 := (not #645)
#603 := (or #602 #276)
#608 := [th-lemma arith triangle-eq]: #603
#609 := [unit-resolution #608 #607]: #276
#604 := (not #605)
#610 := [hypothesis]: #604
#451 := [th-lemma arith farkas -1 1 1 #610 #609 #606]: false
#452 := [lemma #451]: #605
#242 := (>= #9 0::Int)
#453 := (not #620)
#595 := [hypothesis]: #453
#343 := (or #242 #620)
#30 := (= #25 0::Int)
#151 := (or #30 #102)
#665 := (forall (vars (?v0 Int)) (:pat #658) #151)
#156 := (forall (vars (?v0 Int)) #151)
#668 := (iff #156 #665)
#666 := (iff #151 #151)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#169 := (~ #156 #156)
#177 := (~ #151 #151)
#178 := [refl]: #177
#170 := [nnf-pos #178]: #169
#29 := (< #22 0::Int)
#31 := (implies #29 #30)
#32 := (forall (vars (?v0 Int)) #31)
#159 := (iff #32 #156)
#122 := (= 0::Int #25)
#128 := (not #29)
#129 := (or #128 #122)
#134 := (forall (vars (?v0 Int)) #129)
#157 := (iff #134 #156)
#154 := (iff #129 #151)
#148 := (or #102 #30)
#152 := (iff #148 #151)
#153 := [rewrite]: #152
#149 := (iff #129 #148)
#146 := (iff #122 #30)
#147 := [rewrite]: #146
#144 := (iff #128 #102)
#139 := (not #104)
#142 := (iff #139 #102)
#143 := [rewrite]: #142
#140 := (iff #128 #139)
#137 := (iff #29 #104)
#138 := [rewrite]: #137
#141 := [monotonicity #138]: #140
#145 := [trans #141 #143]: #144
#150 := [monotonicity #145 #147]: #149
#155 := [trans #150 #153]: #154
#158 := [quant-intro #155]: #157
#135 := (iff #32 #134)
#132 := (iff #31 #129)
#125 := (implies #29 #122)
#130 := (iff #125 #129)
#131 := [rewrite]: #130
#126 := (iff #31 #125)
#123 := (iff #30 #122)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#133 := [trans #127 #131]: #132
#136 := [quant-intro #133]: #135
#160 := [trans #136 #158]: #159
#121 := [asserted]: #32
#161 := [mp #121 #160]: #156
#179 := [mp~ #161 #170]: #156
#670 := [mp #179 #669]: #665
#618 := (not #665)
#622 := (or #618 #242 #620)
#342 := (or #620 #242)
#332 := (or #618 #342)
#611 := (iff #332 #622)
#334 := (or #618 #343)
#614 := (iff #334 #622)
#329 := [rewrite]: #614
#335 := (iff #332 #334)
#617 := (iff #342 #343)
#621 := [rewrite]: #617
#613 := [monotonicity #621]: #335
#615 := [trans #613 #329]: #611
#333 := [quant-inst #9]: #332
#612 := [mp #333 #615]: #622
#596 := [unit-resolution #612 #670]: #343
#597 := [unit-resolution #596 #595]: #242
#598 := (not #242)
#592 := (or #616 #604 #598)
#593 := [th-lemma arith triangle-eq]: #592
#599 := [unit-resolution #593 #597 #452]: #616
#430 := (= #619 #9)
#594 := (= #325 f4)
#326 := (= f4 #325)
#17 := (:var 0 S2)
#18 := (f3 #17)
#650 := (pattern #18)
#19 := (f5 #18)
#78 := (= #17 #19)
#651 := (forall (vars (?v0 S2)) (:pat #650) #78)
#81 := (forall (vars (?v0 S2)) #78)
#652 := (iff #81 #651)
#654 := (iff #651 #651)
#655 := [rewrite]: #654
#653 := [rewrite]: #652
#656 := [trans #653 #655]: #652
#175 := (~ #81 #81)
#173 := (~ #78 #78)
#174 := [refl]: #173
#176 := [nnf-pos #174]: #175
#20 := (= #19 #17)
#21 := (forall (vars (?v0 S2)) #20)
#82 := (iff #21 #81)
#79 := (iff #20 #78)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#77 := [asserted]: #21
#86 := [mp #77 #83]: #81
#165 := [mp~ #86 #176]: #81
#657 := [mp #165 #656]: #651
#324 := (not #651)
#328 := (or #324 #326)
#307 := [quant-inst #8]: #328
#600 := [unit-resolution #307 #657]: #326
#601 := [symm #600]: #594
#432 := [monotonicity #601]: #430
#433 := [trans #432 #599]: #620
#586 := [unit-resolution #595 #433]: false
#587 := [lemma #586]: #620
#590 := (= #9 #619)
#588 := [monotonicity #600]: #590
#591 := [trans #588 #587]: #616
#474 := [monotonicity #591]: #473
#434 := [trans #600 #474]: #475
#582 := [trans #434 #589]: #68
[unit-resolution #76 #582]: false
unsat
44bedd059f2fe5d2be1978674d27658c79da82ad 139 0
#2 := false
#8 := 0::Int
decl f3 :: (-> S2 Int)
decl f4 :: S2
#9 := f4
#10 := (f3 f4)
#628 := (= #10 0::Int)
decl f5 :: (-> Int S2)
#214 := (f5 #10)
#215 := (f3 #214)
#301 := (= #215 0::Int)
#18 := (:var 0 Int)
#20 := (f5 #18)
#638 := (pattern #20)
#82 := (>= #18 0::Int)
#21 := (f3 #20)
#26 := (= #21 0::Int)
#130 := (or #26 #82)
#645 := (forall (vars (?v0 Int)) (:pat #638) #130)
#135 := (forall (vars (?v0 Int)) #130)
#648 := (iff #135 #645)
#646 := (iff #130 #130)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#148 := (~ #135 #135)
#156 := (~ #130 #130)
#157 := [refl]: #156
#149 := [nnf-pos #157]: #148
#25 := (< #18 0::Int)
#27 := (implies #25 #26)
#28 := (forall (vars (?v0 Int)) #27)
#138 := (iff #28 #135)
#101 := (= 0::Int #21)
#107 := (not #25)
#108 := (or #107 #101)
#113 := (forall (vars (?v0 Int)) #108)
#136 := (iff #113 #135)
#133 := (iff #108 #130)
#127 := (or #82 #26)
#131 := (iff #127 #130)
#132 := [rewrite]: #131
#128 := (iff #108 #127)
#125 := (iff #101 #26)
#126 := [rewrite]: #125
#123 := (iff #107 #82)
#83 := (not #82)
#118 := (not #83)
#121 := (iff #118 #82)
#122 := [rewrite]: #121
#119 := (iff #107 #118)
#116 := (iff #25 #83)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#124 := [trans #120 #122]: #123
#129 := [monotonicity #124 #126]: #128
#134 := [trans #129 #132]: #133
#137 := [quant-intro #134]: #136
#114 := (iff #28 #113)
#111 := (iff #27 #108)
#104 := (implies #25 #101)
#109 := (iff #104 #108)
#110 := [rewrite]: #109
#105 := (iff #27 #104)
#102 := (iff #26 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#112 := [trans #106 #110]: #111
#115 := [quant-intro #112]: #114
#139 := [trans #115 #137]: #138
#100 := [asserted]: #28
#140 := [mp #100 #139]: #135
#158 := [mp~ #140 #149]: #135
#650 := [mp #158 #649]: #645
#53 := (>= #10 0::Int)
#54 := (not #53)
#11 := (<= 0::Int #10)
#12 := (not #11)
#55 := (iff #12 #54)
#51 := (iff #11 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#48 := [asserted]: #12
#57 := [mp #48 #56]: #54
#307 := (not #645)
#286 := (or #307 #53 #301)
#305 := (or #301 #53)
#622 := (or #307 #305)
#625 := (iff #622 #286)
#233 := (or #53 #301)
#280 := (or #307 #233)
#291 := (iff #280 #286)
#292 := [rewrite]: #291
#411 := (iff #622 #280)
#306 := (iff #305 #233)
#303 := [rewrite]: #306
#618 := [monotonicity #303]: #411
#626 := [trans #618 #292]: #625
#624 := [quant-inst #10]: #622
#627 := [mp #624 #626]: #286
#629 := [unit-resolution #627 #57 #650]: #301
#278 := (= #10 #215)
#300 := (= f4 #214)
#13 := (:var 0 S2)
#14 := (f3 #13)
#630 := (pattern #14)
#15 := (f5 #14)
#50 := (= #13 #15)
#631 := (forall (vars (?v0 S2)) (:pat #630) #50)
#60 := (forall (vars (?v0 S2)) #50)
#632 := (iff #60 #631)
#634 := (iff #631 #631)
#635 := [rewrite]: #634
#633 := [rewrite]: #632
#636 := [trans #633 #635]: #632
#154 := (~ #60 #60)
#152 := (~ #50 #50)
#153 := [refl]: #152
#155 := [nnf-pos #153]: #154
#16 := (= #15 #13)
#17 := (forall (vars (?v0 S2)) #16)
#61 := (iff #17 #60)
#58 := (iff #16 #50)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#49 := [asserted]: #17
#65 := [mp #49 #62]: #60
#144 := [mp~ #65 #155]: #60
#637 := [mp #144 #636]: #631
#302 := (not #631)
#293 := (or #302 #300)
#304 := [quant-inst #9]: #293
#619 := [unit-resolution #304 #637]: #300
#283 := [monotonicity #619]: #278
#620 := [trans #283 #629]: #628
#279 := (not #628)
#621 := (or #279 #53)
#263 := [th-lemma arith triangle-eq]: #621
[unit-resolution #263 #57 #620]: false
unsat
edc42ed387023af87c705dd6f98de39e3238ed82 100 0
#2 := false
decl f5 :: (-> Int S2)
#12 := 1::Int
#15 := (f5 1::Int)
decl f4 :: S2
#9 := f4
#16 := (= f4 #15)
decl f3 :: (-> S2 Int)
#10 := (f3 f4)
#254 := (f5 #10)
#365 := (= #254 #15)
#643 := (= #15 #254)
#653 := (= 1::Int #10)
#294 := (= #10 1::Int)
#13 := (<= #10 1::Int)
#8 := 0::Int
#62 := (<= #10 0::Int)
#63 := (not #62)
#69 := (and #13 #63)
#74 := (not #69)
#80 := (or #16 #74)
#85 := (not #80)
#11 := (< 0::Int #10)
#14 := (and #11 #13)
#17 := (implies #14 #16)
#18 := (not #17)
#88 := (iff #18 #85)
#55 := (not #14)
#56 := (or #55 #16)
#59 := (not #56)
#86 := (iff #59 #85)
#83 := (iff #56 #80)
#77 := (or #74 #16)
#81 := (iff #77 #80)
#82 := [rewrite]: #81
#78 := (iff #56 #77)
#75 := (iff #55 #74)
#72 := (iff #14 #69)
#66 := (and #63 #13)
#70 := (iff #66 #69)
#71 := [rewrite]: #70
#67 := (iff #14 #66)
#64 := (iff #11 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#84 := [trans #79 #82]: #83
#87 := [monotonicity #84]: #86
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#89 := [trans #61 #87]: #88
#54 := [asserted]: #18
#90 := [mp #54 #89]: #85
#93 := [not-or-elim #90]: #69
#94 := [and-elim #93]: #13
#95 := [and-elim #93]: #63
#655 := [th-lemma arith eq-propagate 0 0 #95 #94]: #294
#656 := [symm #655]: #653
#350 := [monotonicity #656]: #643
#366 := [symm #350]: #365
#339 := (= f4 #254)
#19 := (:var 0 S2)
#20 := (f3 #19)
#669 := (pattern #20)
#21 := (f5 #20)
#97 := (= #19 #21)
#670 := (forall (vars (?v0 S2)) (:pat #669) #97)
#100 := (forall (vars (?v0 S2)) #97)
#671 := (iff #100 #670)
#673 := (iff #670 #670)
#674 := [rewrite]: #673
#672 := [rewrite]: #671
#675 := [trans #672 #674]: #671
#198 := (~ #100 #100)
#196 := (~ #97 #97)
#197 := [refl]: #196
#199 := [nnf-pos #197]: #198
#22 := (= #21 #19)
#23 := (forall (vars (?v0 S2)) #22)
#101 := (iff #23 #100)
#98 := (iff #22 #97)
#99 := [rewrite]: #98
#102 := [quant-intro #99]: #101
#96 := [asserted]: #23
#105 := [mp #96 #102]: #100
#188 := [mp~ #105 #199]: #100
#676 := [mp #188 #675]: #670
#341 := (not #670)
#332 := (or #341 #339)
#343 := [quant-inst #9]: #332
#642 := [unit-resolution #343 #676]: #339
#367 := [trans #642 #366]: #16
#91 := (not #16)
#92 := [not-or-elim #90]: #91
[unit-resolution #92 #367]: false
unsat
b9679bb727cbc438f48c6a4dec5b8b2daf2b7218 20 0
#2 := false
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (<= #9 #9)
#11 := (not #10)
#58 := (iff #11 false)
#1 := true
#53 := (not true)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #11 #53)
#51 := (iff #10 true)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#48 := [asserted]: #11
[mp #48 #59]: false
unsat
b9301bd3b0ee53e0a92bebd76d84147d60874860 54 0
#2 := false
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#13 := 3::Int
#15 := (* 3::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#14 := (* 3::Int #9)
#16 := (<= #14 #15)
#12 := (<= #9 #11)
#17 := (implies #12 #16)
#18 := (not #17)
#88 := (iff #18 false)
#56 := (not #12)
#57 := (or #56 #16)
#60 := (not #57)
#86 := (iff #60 false)
#1 := true
#81 := (not true)
#84 := (iff #81 false)
#85 := [rewrite]: #84
#82 := (iff #60 #81)
#79 := (iff #57 true)
#24 := 0::Int
#63 := -1::Int
#64 := (* -1::Int #11)
#65 := (+ #9 #64)
#66 := (<= #65 0::Int)
#69 := (not #66)
#74 := (or #69 #66)
#77 := (iff #74 true)
#78 := [rewrite]: #77
#75 := (iff #57 #74)
#72 := (iff #16 #66)
#73 := [rewrite]: #72
#70 := (iff #56 #69)
#67 := (iff #12 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#76 := [monotonicity #71 #73]: #75
#80 := [trans #76 #78]: #79
#83 := [monotonicity #80]: #82
#87 := [trans #83 #85]: #86
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#89 := [trans #62 #87]: #88
#55 := [asserted]: #18
[mp #55 #89]: false
unsat
c4a330894a70d3f881160029887465aa3141c214 59 0
#2 := false
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#13 := 3::Int
#15 := (* 3::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#14 := (* 3::Int #9)
#16 := (< #14 #15)
#12 := (< #9 #11)
#17 := (implies #12 #16)
#18 := (not #17)
#93 := (iff #18 false)
#56 := (not #12)
#57 := (or #56 #16)
#60 := (not #57)
#91 := (iff #60 false)
#1 := true
#86 := (not true)
#89 := (iff #86 false)
#90 := [rewrite]: #89
#87 := (iff #60 #86)
#84 := (iff #57 true)
#24 := 0::Int
#63 := -1::Int
#66 := (* -1::Int #11)
#67 := (+ #9 #66)
#65 := (>= #67 0::Int)
#64 := (not #65)
#78 := (or #65 #64)
#82 := (iff #78 true)
#83 := [rewrite]: #82
#80 := (iff #57 #78)
#79 := (iff #16 #64)
#77 := [rewrite]: #79
#75 := (iff #56 #65)
#70 := (not #64)
#73 := (iff #70 #65)
#74 := [rewrite]: #73
#71 := (iff #56 #70)
#68 := (iff #12 #64)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#81 := [monotonicity #76 #77]: #80
#85 := [trans #81 #83]: #84
#88 := [monotonicity #85]: #87
#92 := [trans #88 #90]: #91
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#94 := [trans #62 #92]: #93
#55 := [asserted]: #18
[mp #55 #94]: false
unsat
2bed53712dbbe16227edc09bc45ecffcb1d2f5df 55 0
#2 := false
#21 := 0::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#60 := -1::Int
#63 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#64 := (+ #9 #63)
#74 := (<= #64 0::Int)
#87 := (not #74)
#62 := (>= #64 0::Int)
#77 := (or #62 #74)
#80 := (not #77)
#13 := (<= #9 #11)
#12 := (< #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#83 := (iff #15 #80)
#53 := (not #12)
#54 := (or #53 #13)
#57 := (not #54)
#81 := (iff #57 #80)
#78 := (iff #54 #77)
#75 := (iff #13 #74)
#76 := [rewrite]: #75
#72 := (iff #53 #62)
#61 := (not #62)
#67 := (not #61)
#70 := (iff #67 #62)
#71 := [rewrite]: #70
#68 := (iff #53 #67)
#65 := (iff #12 #61)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#79 := [monotonicity #73 #76]: #78
#82 := [monotonicity #79]: #81
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#84 := [trans #59 #82]: #83
#52 := [asserted]: #15
#85 := [mp #52 #84]: #80
#88 := [not-or-elim #85]: #87
#86 := [not-or-elim #85]: #61
#247 := (or #74 #62)
#333 := [th-lemma arith farkas 1 1]: #247
#248 := [unit-resolution #333 #86]: #74
[unit-resolution #248 #88]: false
unsat
9cf9e7b2664431b1fdbd4f06158a61574edebcdb 76 0
#2 := false
#23 := 0::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#73 := -1::Int
#74 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#75 := (+ #9 #74)
#80 := (>= #75 0::Int)
#76 := (<= #75 -1::Int)
#332 := (not #76)
#79 := (not #80)
#366 := [hypothesis]: #79
#345 := (or #332 #80)
#90 := (iff #76 #80)
#13 := 1::Int
#14 := (+ #9 1::Int)
#15 := (<= #14 #11)
#12 := (< #9 #11)
#16 := (iff #12 #15)
#17 := (not #16)
#93 := (iff #17 #90)
#67 := (not #12)
#55 := (+ 1::Int #9)
#58 := (<= #55 #11)
#68 := (iff #58 #67)
#91 := (iff #68 #90)
#88 := (iff #67 #80)
#83 := (not #79)
#86 := (iff #83 #80)
#87 := [rewrite]: #86
#84 := (iff #67 #83)
#81 := (iff #12 #79)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#89 := [trans #85 #87]: #88
#77 := (iff #58 #76)
#78 := [rewrite]: #77
#92 := [monotonicity #78 #89]: #91
#71 := (iff #17 #68)
#61 := (iff #12 #58)
#64 := (not #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #17 #64)
#62 := (iff #16 #61)
#59 := (iff #15 #58)
#56 := (= #14 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#72 := [trans #66 #70]: #71
#94 := [trans #72 #92]: #93
#54 := [asserted]: #17
#95 := [mp #54 #94]: #90
#254 := (not #90)
#343 := (or #332 #80 #254)
#344 := [def-axiom]: #343
#342 := [unit-resolution #344 #95]: #345
#367 := [unit-resolution #342 #366]: #332
#261 := [th-lemma arith farkas 1 1 #366 #367]: false
#637 := [lemma #261]: #80
#638 := (or #79 #332)
#360 := [th-lemma arith farkas 1 1]: #638
#361 := [unit-resolution #360 #637]: #332
#340 := (or #76 #79)
#339 := (or #76 #79 #254)
#255 := [def-axiom]: #339
#341 := [unit-resolution #255 #95]: #340
[unit-resolution #341 #361 #637]: false
unsat
f7777bc3670f2a6e6a453e3903eb4ea7d041a411 17 0
#2 := false
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (< #9 #9)
#11 := (not #10)
#12 := (not #11)
#54 := (iff #12 false)
#52 := (iff #10 false)
#53 := [rewrite]: #52
#50 := (iff #12 #10)
#51 := [rewrite]: #50
#55 := [trans #51 #53]: #54
#49 := [asserted]: #12
[mp #49 #55]: false
unsat
ac912717c3b3e386cbd43673c73b0e304d1f9d81 79 0
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
#14 := (f3 f6)
#73 := -1::Int
#74 := (* -1::Int #14)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#75 := (+ #11 #74)
#76 := (<= #75 0::Int)
#86 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#87 := (+ #9 #86)
#88 := (<= #87 0::Int)
#91 := (not #88)
#82 := (+ #9 #74)
#83 := (<= #82 0::Int)
#79 := (not #76)
#100 := (or #79 #83 #91)
#105 := (not #100)
#16 := (<= #9 #14)
#15 := (<= #11 #14)
#17 := (implies #15 #16)
#12 := (<= #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#108 := (iff #19 #105)
#57 := (not #15)
#58 := (or #57 #16)
#64 := (not #12)
#65 := (or #64 #58)
#70 := (not #65)
#106 := (iff #70 #105)
#103 := (iff #65 #100)
#94 := (or #79 #83)
#97 := (or #91 #94)
#101 := (iff #97 #100)
#102 := [rewrite]: #101
#98 := (iff #65 #97)
#95 := (iff #58 #94)
#84 := (iff #16 #83)
#85 := [rewrite]: #84
#80 := (iff #57 #79)
#77 := (iff #15 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#96 := [monotonicity #81 #85]: #95
#92 := (iff #64 #91)
#89 := (iff #12 #88)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#99 := [monotonicity #93 #96]: #98
#104 := [trans #99 #102]: #103
#107 := [monotonicity #104]: #106
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #12 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#109 := [trans #72 #107]: #108
#56 := [asserted]: #19
#110 := [mp #56 #109]: #105
#111 := [not-or-elim #110]: #76
#112 := (not #83)
#113 := [not-or-elim #110]: #112
#114 := [not-or-elim #110]: #88
[th-lemma arith farkas 1 -1 1 #114 #113 #111]: false
unsat
365ff6b1c9b578eb42fa66aaa5d0aea486a2eddc 84 0
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
#14 := (f3 f6)
#73 := -1::Int
#74 := (* -1::Int #14)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#75 := (+ #11 #74)
#76 := (<= #75 0::Int)
#88 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#89 := (+ #9 #88)
#87 := (>= #89 0::Int)
#82 := (+ #9 #74)
#83 := (<= #82 0::Int)
#79 := (not #76)
#105 := (or #79 #83 #87)
#110 := (not #105)
#16 := (<= #9 #14)
#15 := (<= #11 #14)
#17 := (implies #15 #16)
#12 := (< #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#113 := (iff #19 #110)
#57 := (not #15)
#58 := (or #57 #16)
#64 := (not #12)
#65 := (or #64 #58)
#70 := (not #65)
#111 := (iff #70 #110)
#108 := (iff #65 #105)
#99 := (or #79 #83)
#102 := (or #87 #99)
#106 := (iff #102 #105)
#107 := [rewrite]: #106
#103 := (iff #65 #102)
#100 := (iff #58 #99)
#84 := (iff #16 #83)
#85 := [rewrite]: #84
#80 := (iff #57 #79)
#77 := (iff #15 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#101 := [monotonicity #81 #85]: #100
#97 := (iff #64 #87)
#86 := (not #87)
#92 := (not #86)
#95 := (iff #92 #87)
#96 := [rewrite]: #95
#93 := (iff #64 #92)
#90 := (iff #12 #86)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#98 := [trans #94 #96]: #97
#104 := [monotonicity #98 #101]: #103
#109 := [trans #104 #107]: #108
#112 := [monotonicity #109]: #111
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #12 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#114 := [trans #72 #112]: #113
#56 := [asserted]: #19
#115 := [mp #56 #114]: #110
#116 := [not-or-elim #115]: #76
#117 := (not #83)
#118 := [not-or-elim #115]: #117
#119 := [not-or-elim #115]: #86
[th-lemma arith farkas 1 1 1 #119 #118 #116]: false
unsat
e12622a9e47df4adc7f79d99b52b09f638c77731 84 0
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#73 := -1::Int
#91 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#92 := (+ #9 #91)
#93 := (<= #92 0::Int)
#96 := (not #93)
decl f6 :: S2
#13 := f6
#14 := (f3 f6)
#76 := (* -1::Int #14)
#87 := (+ #9 #76)
#88 := (<= #87 0::Int)
#77 := (+ #11 #76)
#75 := (>= #77 0::Int)
#105 := (or #75 #88 #96)
#110 := (not #105)
#16 := (<= #9 #14)
#15 := (< #11 #14)
#17 := (implies #15 #16)
#12 := (<= #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#113 := (iff #19 #110)
#57 := (not #15)
#58 := (or #57 #16)
#64 := (not #12)
#65 := (or #64 #58)
#70 := (not #65)
#111 := (iff #70 #110)
#108 := (iff #65 #105)
#99 := (or #75 #88)
#102 := (or #96 #99)
#106 := (iff #102 #105)
#107 := [rewrite]: #106
#103 := (iff #65 #102)
#100 := (iff #58 #99)
#89 := (iff #16 #88)
#90 := [rewrite]: #89
#85 := (iff #57 #75)
#74 := (not #75)
#80 := (not #74)
#83 := (iff #80 #75)
#84 := [rewrite]: #83
#81 := (iff #57 #80)
#78 := (iff #15 #74)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#86 := [trans #82 #84]: #85
#101 := [monotonicity #86 #90]: #100
#97 := (iff #64 #96)
#94 := (iff #12 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#104 := [monotonicity #98 #101]: #103
#109 := [trans #104 #107]: #108
#112 := [monotonicity #109]: #111
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #12 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#114 := [trans #72 #112]: #113
#56 := [asserted]: #19
#115 := [mp #56 #114]: #110
#119 := [not-or-elim #115]: #93
#117 := (not #88)
#118 := [not-or-elim #115]: #117
#116 := [not-or-elim #115]: #74
[th-lemma arith farkas 1 1 1 #116 #118 #119]: false
unsat
ebcd832e06109faf50094f84d5df0d23229689c7 89 0
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
#14 := (f3 f6)
#73 := -1::Int
#76 := (* -1::Int #14)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#89 := (+ #9 #76)
#88 := (>= #89 0::Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#94 := (* -1::Int #11)
#95 := (+ #9 #94)
#93 := (>= #95 0::Int)
#87 := (not #88)
#77 := (+ #11 #76)
#75 := (>= #77 0::Int)
#111 := (or #75 #87 #93)
#116 := (not #111)
#16 := (< #9 #14)
#15 := (< #11 #14)
#17 := (implies #15 #16)
#12 := (< #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#119 := (iff #19 #116)
#57 := (not #15)
#58 := (or #57 #16)
#64 := (not #12)
#65 := (or #64 #58)
#70 := (not #65)
#117 := (iff #70 #116)
#114 := (iff #65 #111)
#105 := (or #75 #87)
#108 := (or #93 #105)
#112 := (iff #108 #111)
#113 := [rewrite]: #112
#109 := (iff #65 #108)
#106 := (iff #58 #105)
#90 := (iff #16 #87)
#91 := [rewrite]: #90
#85 := (iff #57 #75)
#74 := (not #75)
#80 := (not #74)
#83 := (iff #80 #75)
#84 := [rewrite]: #83
#81 := (iff #57 #80)
#78 := (iff #15 #74)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#86 := [trans #82 #84]: #85
#107 := [monotonicity #86 #91]: #106
#103 := (iff #64 #93)
#92 := (not #93)
#98 := (not #92)
#101 := (iff #98 #93)
#102 := [rewrite]: #101
#99 := (iff #64 #98)
#96 := (iff #12 #92)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#104 := [trans #100 #102]: #103
#110 := [monotonicity #104 #107]: #109
#115 := [trans #110 #113]: #114
#118 := [monotonicity #115]: #117
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #12 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#120 := [trans #72 #118]: #119
#56 := [asserted]: #19
#121 := [mp #56 #120]: #116
#123 := [not-or-elim #121]: #88
#122 := [not-or-elim #121]: #74
#124 := [not-or-elim #121]: #92
[th-lemma arith farkas 1 1 1 #124 #122 #123]: false
unsat
6a10eea7e2df496adabc8a3fce58fc3e10eefb8c 73 0
#2 := false
#26 := 0::Int
decl f3 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
#14 := (f3 f6)
#65 := -1::Int
#73 := (* -1::Int #14)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#84 := (+ #9 #73)
#85 := (<= #84 0::Int)
#86 := (not #85)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#74 := (+ #11 #73)
#72 := (>= #74 0::Int)
#75 := (not #72)
#68 := (* -1::Int #11)
#69 := (+ #9 #68)
#67 := (>= #69 0::Int)
#66 := (not #67)
#78 := (and #66 #75)
#81 := (not #78)
#96 := (or #81 #85)
#99 := (not #96)
#17 := (< #14 #9)
#18 := (not #17)
#15 := (< #11 #14)
#12 := (< #9 #11)
#16 := (and #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#102 := (iff #20 #99)
#58 := (not #16)
#59 := (or #58 #18)
#62 := (not #59)
#100 := (iff #62 #99)
#97 := (iff #59 #96)
#94 := (iff #18 #85)
#89 := (not #86)
#92 := (iff #89 #85)
#93 := [rewrite]: #92
#90 := (iff #18 #89)
#87 := (iff #17 #86)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#95 := [trans #91 #93]: #94
#82 := (iff #58 #81)
#79 := (iff #16 #78)
#76 := (iff #15 #75)
#77 := [rewrite]: #76
#70 := (iff #12 #66)
#71 := [rewrite]: #70
#80 := [monotonicity #71 #77]: #79
#83 := [monotonicity #80]: #82
#98 := [monotonicity #83 #95]: #97
#101 := [monotonicity #98]: #100
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#103 := [trans #64 #101]: #102
#57 := [asserted]: #20
#104 := [mp #57 #103]: #99
#108 := [not-or-elim #104]: #86
#105 := [not-or-elim #104]: #78
#107 := [and-elim #105]: #75
#106 := [and-elim #105]: #66
[th-lemma arith farkas 1 1 1 #106 #107 #108]: false
unsat
13113e7e58018c6880ea2f28cb5993925582157c 17 0
#2 := false
#8 := 0::Int
#9 := (= 0::Int 0::Int)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
1056717a1a09b6c4176c8b78807918dcff0f057a 25 0
#2 := false
#8 := 0::Int
#9 := (- 0::Int)
#10 := (= 0::Int #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= 0::Int 0::Int)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#32 := (= #9 0::Int)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
52057012d500bf36246da2f6fe0e5f4fead2daa8 17 0
#2 := false
#8 := 1::Int
#9 := (= 1::Int 1::Int)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
3896508560f827467603181397afe4ea7af60b1b 34 0
#2 := false
#8 := 1::Int
#9 := (- 1::Int)
#10 := (= #9 1::Int)
#11 := (not #10)
#12 := (not #11)
#55 := (iff #12 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#48 := (iff #11 true)
#43 := (not false)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#41 := (iff #10 false)
#33 := -1::Int
#36 := (= -1::Int 1::Int)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (= #9 -1::Int)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#32 := [asserted]: #12
[mp #32 #56]: false
unsat
abda142ed88ecbb996b79ee8162fe49b344031b3 40 0
#2 := false
#12 := 567::Int
#10 := 345::Int
#8 := 123::Int
#9 := (- 123::Int)
#11 := (+ #9 345::Int)
#13 := (< #11 567::Int)
#14 := (not #13)
#61 := (iff #14 false)
#41 := 222::Int
#46 := (< 222::Int 567::Int)
#49 := (not #46)
#59 := (iff #49 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #49 #54)
#52 := (iff #46 true)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#44 := (= #11 222::Int)
#35 := -123::Int
#38 := (+ -123::Int 345::Int)
#42 := (= #38 222::Int)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #9 -123::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#62 := [trans #51 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
52ee66296beec0b85b106a54f57287052dcd7f89 30 0
#2 := false
#10 := 2345678901::Int
#8 := 123456789::Int
#9 := (- 123456789::Int)
#11 := (< #9 2345678901::Int)
#12 := (not #11)
#51 := (iff #12 false)
#33 := -123456789::Int
#36 := (< -123456789::Int 2345678901::Int)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#34 := (= #9 -123456789::Int)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
cc3c0a2b103dc2bb6601e0a4c48514f8376c297a 26 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := 0::Int
#10 := (+ f3 0::Int)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
fd47edbfbac88ee3d94d488f80d6a8ea5bf561a8 26 0
#2 := false
decl f3 :: Int
#9 := f3
#8 := 0::Int
#10 := (+ 0::Int f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
567ac5e5181b99e579edcd5a30f3a17097bdc207 29 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#11 := (+ f4 f3)
#10 := (+ f3 f4)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
2fe26988f5a773923b0b53e62aca5ed502114903 33 0
#2 := false
decl f5 :: Int
#10 := f5
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#13 := (+ f3 f4)
#14 := (+ #13 f5)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#51 := (iff #16 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #16 #46)
#44 := (iff #15 true)
#39 := (= #12 #12)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #15 #39)
#37 := (= #14 #12)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#36 := [asserted]: #16
[mp #36 #52]: false
unsat
aa9232285ab331eb0061966d9cc17b455a15a8b2 45 0
#2 := false
decl f4 :: Int
#9 := f4
#13 := (- f4)
decl f3 :: Int
#8 := f3
#14 := (= f3 #13)
#11 := 0::Int
#10 := (+ f3 f4)
#12 := (= #10 0::Int)
#15 := (iff #12 #14)
#16 := (not #15)
#65 := (iff #16 false)
#50 := (not #12)
#37 := -1::Int
#38 := (* -1::Int f4)
#41 := (= f3 #38)
#51 := (iff #41 #50)
#63 := (iff #51 false)
#58 := (iff #12 #50)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #51 #58)
#56 := (iff #41 #12)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#54 := (iff #16 #51)
#44 := (iff #12 #41)
#47 := (not #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #16 #47)
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#39 := (= #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#66 := [trans #55 #64]: #65
#36 := [asserted]: #16
[mp #36 #66]: false
unsat
3f272fd1319f78b4692aa5dda96df513e4645a9a 26 0
#2 := false
#8 := 1::Int
#9 := (- 1::Int)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -1::Int
#35 := (= -1::Int -1::Int)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -1::Int)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
e2a7b8949fe3993d5fd2b8dd48b8d65ca6a5debe 26 0
#2 := false
#8 := 3::Int
#9 := (- 3::Int)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -3::Int
#35 := (= -3::Int -3::Int)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -3::Int)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
6f4d8de64d01428967bef903e3d6b1e134e99c36 58 0
#2 := false
decl f3 :: Int
#8 := f3
#10 := 0::Int
#12 := (< 0::Int f3)
#9 := (- f3)
#11 := (< #9 0::Int)
#13 := (iff #11 #12)
#14 := (not #13)
#79 := (iff #14 false)
#53 := (not #12)
#35 := -1::Int
#36 := (* -1::Int f3)
#39 := (< #36 0::Int)
#54 := (iff #39 #53)
#77 := (iff #54 false)
#59 := (<= f3 0::Int)
#60 := (not #59)
#72 := (iff #60 #59)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #54 #72)
#70 := (iff #53 #59)
#65 := (not #60)
#68 := (iff #65 #59)
#69 := [rewrite]: #68
#66 := (iff #53 #65)
#63 := (iff #12 #60)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #39 #60)
#62 := [rewrite]: #61
#74 := [monotonicity #62 #71]: #73
#78 := [trans #74 #76]: #77
#57 := (iff #14 #54)
#45 := (iff #12 #39)
#50 := (not #45)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #45)
#42 := (iff #39 #12)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #13 #42)
#40 := (iff #11 #39)
#37 := (= #9 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#49 := [trans #44 #47]: #48
#52 := [monotonicity #49]: #51
#58 := [trans #52 #56]: #57
#80 := [trans #58 #78]: #79
#34 := [asserted]: #14
[mp #34 #80]: false
unsat
564c0a73934063d90154f68605ccc2409e9fa075 61 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#11 := (- f3)
#12 := (< #11 0::Int)
#10 := (< 0::Int f3)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Int
#36 := (* -1::Int f3)
#39 := (< #36 0::Int)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (<= f3 0::Int)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
62e66d279aac101c29ec561e3c1aa729670803a3 61 0
#2 := false
decl f3 :: Int
#8 := f3
#11 := (- f3)
#9 := 0::Int
#12 := (< 0::Int #11)
#10 := (< f3 0::Int)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Int
#36 := (* -1::Int f3)
#39 := (< 0::Int #36)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (>= f3 0::Int)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
36e3e0be50e13bfd349cb4dd2f24507689560060 26 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := 0::Int
#10 := (- f3 0::Int)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
967752e39c59bb7230849d17d3298eda01ba97f0 32 0
#2 := false
decl f3 :: Int
#9 := f3
#11 := (- f3)
#8 := 0::Int
#10 := (- 0::Int f3)
#12 := (= #10 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := -1::Int
#35 := (* -1::Int f3)
#40 := (= #35 #35)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (= #11 #35)
#39 := [rewrite]: #38
#36 := (= #10 #35)
#37 := [rewrite]: #36
#42 := [monotonicity #37 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
d66c19efaea02c4da5b9f725e7d8d3733e147b06 64 0
#2 := false
#12 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#11 := (- f3 f4)
#13 := (< #11 0::Int)
#10 := (< f3 f4)
#14 := (implies #10 #13)
#15 := (not #14)
#83 := (iff #15 false)
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#41 := (< #38 0::Int)
#47 := (not #10)
#48 := (or #47 #41)
#53 := (not #48)
#81 := (iff #53 false)
#1 := true
#76 := (not true)
#79 := (iff #76 false)
#80 := [rewrite]: #79
#77 := (iff #53 #76)
#74 := (iff #48 true)
#57 := (>= #38 0::Int)
#56 := (not #57)
#69 := (or #57 #56)
#72 := (iff #69 true)
#73 := [rewrite]: #72
#70 := (iff #48 #69)
#67 := (iff #41 #56)
#68 := [rewrite]: #67
#65 := (iff #47 #57)
#60 := (not #56)
#63 := (iff #60 #57)
#64 := [rewrite]: #63
#61 := (iff #47 #60)
#58 := (iff #10 #56)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#71 := [monotonicity #66 #68]: #70
#75 := [trans #71 #73]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#44 := (implies #10 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #14 #44)
#42 := (iff #13 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#84 := [trans #55 #82]: #83
#35 := [asserted]: #15
[mp #35 #84]: false
unsat
b4a0e97ac26aaa849b0de7e06daad43acc3105c3 44 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#11 := (- f4 f3)
#12 := (- #11)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#63 := (iff #14 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #14 #58)
#56 := (iff #13 true)
#35 := -1::Int
#36 := (* -1::Int f4)
#37 := (+ f3 #36)
#51 := (= #37 #37)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (= #12 #37)
#40 := (* -1::Int f3)
#41 := (+ #40 f4)
#44 := (- #41)
#47 := (= #44 #37)
#48 := [rewrite]: #47
#45 := (= #12 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#38 := (= #10 #37)
#39 := [rewrite]: #38
#53 := [monotonicity #39 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#34 := [asserted]: #14
[mp #34 #64]: false
unsat
f0c92a75694daf72953722c261a7985603bb0bf1 42 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#11 := (- f4)
#12 := (+ #11 f3)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#61 := (iff #14 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #14 #56)
#54 := (iff #13 true)
#35 := -1::Int
#36 := (* -1::Int f4)
#37 := (+ f3 #36)
#49 := (= #37 #37)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #13 #49)
#47 := (= #12 #37)
#42 := (+ #36 f3)
#45 := (= #42 #37)
#46 := [rewrite]: #45
#43 := (= #12 #42)
#40 := (= #11 #36)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#38 := (= #10 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
8923322f057ed7cee840582974da3314f48d3c1d 48 0
#2 := false
decl f5 :: Int
#11 := f5
decl f4 :: Int
#9 := f4
#13 := (+ f4 f5)
decl f3 :: Int
#8 := f3
#14 := (- f3 #13)
#10 := (- f3 f4)
#12 := (- #10 f5)
#15 := (= #12 #14)
#16 := (not #15)
#66 := (iff #16 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #16 #61)
#59 := (iff #15 true)
#37 := -1::Int
#45 := (* -1::Int f5)
#38 := (* -1::Int f4)
#46 := (+ #38 #45)
#47 := (+ f3 #46)
#54 := (= #47 #47)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #15 #54)
#52 := (= #14 #47)
#53 := [rewrite]: #52
#50 := (= #12 #47)
#39 := (+ f3 #38)
#42 := (- #39 f5)
#48 := (= #42 #47)
#49 := [rewrite]: #48
#43 := (= #12 #42)
#40 := (= #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#51 := [trans #44 #49]: #50
#56 := [monotonicity #51 #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#36 := [asserted]: #16
[mp #36 #67]: false
unsat
1d827628bfc865305d062976dd88c9223e790cae 26 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#10 := (* f3 0::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Int 0::Int)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
268dc80516cad8e0537058bf237f1fac47b44dd9 26 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#10 := (* 0::Int f3)
#11 := (= #10 0::Int)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Int 0::Int)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
d2498e6f1e4e863ac89298e0d00130df98aa8bf9 26 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := 1::Int
#10 := (* f3 1::Int)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
d26161837b1f05cfdb35001c90ead1460ca18bec 26 0
#2 := false
decl f3 :: Int
#9 := f3
#8 := 1::Int
#10 := (* 1::Int f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
855f0121ef7db6c69742bc5a6c6901549956abdf 40 0
#2 := false
decl f3 :: Int
#8 := f3
#12 := (- f3)
#9 := 1::Int
#10 := (- 1::Int)
#11 := (* f3 #10)
#13 := (= #11 #12)
#14 := (not #13)
#60 := (iff #14 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#35 := -1::Int
#41 := (* -1::Int f3)
#48 := (= #41 #41)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (= #12 #41)
#47 := [rewrite]: #46
#44 := (= #11 #41)
#38 := (* f3 -1::Int)
#42 := (= #38 #41)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #10 -1::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#50 := [monotonicity #45 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#34 := [asserted]: #14
[mp #34 #61]: false
unsat
5d21e0de4aaaaeca789bd4695bdd117eea163e38 35 0
#2 := false
decl f3 :: Int
#10 := f3
#12 := (- f3)
#8 := 1::Int
#9 := (- 1::Int)
#11 := (* #9 f3)
#13 := (= #11 #12)
#14 := (not #13)
#55 := (iff #14 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #14 #50)
#48 := (iff #13 true)
#35 := -1::Int
#38 := (* -1::Int f3)
#43 := (= #38 #38)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (= #12 #38)
#42 := [rewrite]: #41
#39 := (= #11 #38)
#36 := (= #9 -1::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [monotonicity #40 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#34 := [asserted]: #14
[mp #34 #56]: false
unsat
9d12a5c7c6846be4a5b4be5e467c3f4cb34e4d39 28 0
#2 := false
#8 := 3::Int
decl f3 :: Int
#9 := f3
#11 := (* f3 3::Int)
#10 := (* 3::Int f3)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
9ce15ee2c485c15c28a4c003e8c335d04c1523a1 254 0
#2 := false
decl f3 :: (-> Int Int Int)
#13 := (:var 0 Int)
#12 := (:var 1 Int)
#14 := (f3 #12 #13)
#749 := (pattern #14)
#8 := 0::Int
#87 := -1::Int
#91 := (* -1::Int #13)
#88 := (* -1::Int #12)
#94 := (div #88 #91)
#251 := (* -1::Int #94)
#252 := (+ #14 #251)
#253 := (= #252 0::Int)
#24 := (div #12 #13)
#248 := (* -1::Int #24)
#249 := (+ #14 #248)
#250 := (= #249 0::Int)
#126 := (>= #12 0::Int)
#119 := (<= #13 0::Int)
#211 := (or #119 #126)
#212 := (not #211)
#115 := (<= #12 0::Int)
#209 := (or #115 #119)
#210 := (not #209)
#215 := (or #210 #212)
#254 := (ite #215 #250 #253)
#247 := (= #14 0::Int)
#16 := (= #13 0::Int)
#15 := (= #12 0::Int)
#17 := (or #15 #16)
#255 := (ite #17 #247 #254)
#750 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #749) #255)
#258 := (forall (vars (?v0 Int) (?v1 Int)) #255)
#753 := (iff #258 #750)
#751 := (iff #255 #255)
#752 := [refl]: #751
#754 := [quant-intro #752]: #753
#218 := (ite #215 #24 #94)
#221 := (ite #17 0::Int #218)
#224 := (= #14 #221)
#227 := (forall (vars (?v0 Int) (?v1 Int)) #224)
#259 := (iff #227 #258)
#256 := (iff #224 #255)
#257 := [rewrite]: #256
#260 := [quant-intro #257]: #259
#127 := (not #126)
#120 := (not #119)
#130 := (and #120 #127)
#116 := (not #115)
#123 := (and #116 #120)
#133 := (or #123 #130)
#136 := (ite #133 #24 #94)
#139 := (ite #17 0::Int #136)
#142 := (= #14 #139)
#145 := (forall (vars (?v0 Int) (?v1 Int)) #142)
#228 := (iff #145 #227)
#225 := (iff #142 #224)
#222 := (= #139 #221)
#219 := (= #136 #218)
#216 := (iff #133 #215)
#213 := (iff #130 #212)
#214 := [rewrite]: #213
#203 := (iff #123 #210)
#204 := [rewrite]: #203
#217 := [monotonicity #204 #214]: #216
#220 := [monotonicity #217]: #219
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [quant-intro #226]: #228
#207 := (~ #145 #145)
#205 := (~ #142 #142)
#206 := [refl]: #205
#208 := [nnf-pos #206]: #207
#26 := (- #13)
#25 := (- #12)
#27 := (div #25 #26)
#19 := (< 0::Int #13)
#21 := (< #12 0::Int)
#22 := (and #21 #19)
#18 := (< 0::Int #12)
#20 := (and #18 #19)
#23 := (or #20 #22)
#28 := (ite #23 #24 #27)
#29 := (ite #17 0::Int #28)
#30 := (= #14 #29)
#31 := (forall (vars (?v0 Int) (?v1 Int)) #30)
#148 := (iff #31 #145)
#81 := (and #19 #21)
#84 := (or #20 #81)
#97 := (ite #84 #24 #94)
#75 := (= 0::Int #13)
#72 := (= 0::Int #12)
#78 := (or #72 #75)
#100 := (ite #78 0::Int #97)
#103 := (= #14 #100)
#106 := (forall (vars (?v0 Int) (?v1 Int)) #103)
#146 := (iff #106 #145)
#143 := (iff #103 #142)
#140 := (= #100 #139)
#137 := (= #97 #136)
#134 := (iff #84 #133)
#131 := (iff #81 #130)
#128 := (iff #21 #127)
#129 := [rewrite]: #128
#121 := (iff #19 #120)
#122 := [rewrite]: #121
#132 := [monotonicity #122 #129]: #131
#124 := (iff #20 #123)
#117 := (iff #18 #116)
#118 := [rewrite]: #117
#125 := [monotonicity #118 #122]: #124
#135 := [monotonicity #125 #132]: #134
#138 := [monotonicity #135]: #137
#113 := (iff #78 #17)
#111 := (iff #75 #16)
#112 := [rewrite]: #111
#109 := (iff #72 #15)
#110 := [rewrite]: #109
#114 := [monotonicity #110 #112]: #113
#141 := [monotonicity #114 #138]: #140
#144 := [monotonicity #141]: #143
#147 := [quant-intro #144]: #146
#107 := (iff #31 #106)
#104 := (iff #30 #103)
#101 := (= #29 #100)
#98 := (= #28 #97)
#95 := (= #27 #94)
#92 := (= #26 #91)
#93 := [rewrite]: #92
#89 := (= #25 #88)
#90 := [rewrite]: #89
#96 := [monotonicity #90 #93]: #95
#85 := (iff #23 #84)
#82 := (iff #22 #81)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#99 := [monotonicity #86 #96]: #98
#79 := (iff #17 #78)
#76 := (iff #16 #75)
#77 := [rewrite]: #76
#73 := (iff #15 #72)
#74 := [rewrite]: #73
#80 := [monotonicity #74 #77]: #79
#102 := [monotonicity #80 #99]: #101
#105 := [monotonicity #102]: #104
#108 := [quant-intro #105]: #107
#149 := [trans #108 #147]: #148
#71 := [asserted]: #31
#150 := [mp #71 #149]: #145
#199 := [mp~ #150 #208]: #145
#230 := [mp #199 #229]: #227
#261 := [mp #230 #260]: #258
#755 := [mp #261 #754]: #750
#9 := (f3 0::Int 0::Int)
#10 := (= #9 0::Int)
#11 := (not #10)
#60 := [asserted]: #11
#707 := (not #750)
#708 := (or #707 #10)
#335 := (* -1::Int 0::Int)
#420 := (div #335 #335)
#421 := (* -1::Int #420)
#422 := (+ #9 #421)
#413 := (= #422 0::Int)
#424 := (div 0::Int 0::Int)
#425 := (* -1::Int #424)
#353 := (+ #9 #425)
#426 := (= #353 0::Int)
#423 := (>= 0::Int 0::Int)
#427 := (<= 0::Int 0::Int)
#406 := (or #427 #423)
#741 := (not #406)
#743 := (or #427 #427)
#400 := (not #743)
#530 := (or #400 #741)
#737 := (ite #530 #426 #413)
#411 := (= 0::Int 0::Int)
#412 := (or #411 #411)
#744 := (ite #412 #10 #737)
#703 := (or #707 #744)
#550 := (iff #703 #708)
#552 := (iff #708 #708)
#694 := [rewrite]: #552
#701 := (iff #744 #10)
#1 := true
#711 := (ite true #10 #426)
#705 := (iff #711 #10)
#706 := [rewrite]: #705
#715 := (iff #744 #711)
#710 := (iff #737 #426)
#433 := (ite false #426 #426)
#713 := (iff #433 #426)
#428 := [rewrite]: #713
#434 := (iff #737 #433)
#431 := (iff #413 #426)
#717 := (= #422 #353)
#716 := (= #421 #425)
#441 := (= #420 #424)
#718 := (= #335 0::Int)
#719 := [rewrite]: #718
#442 := [monotonicity #719 #719]: #441
#720 := [monotonicity #442]: #716
#721 := [monotonicity #720]: #717
#432 := [monotonicity #721]: #431
#448 := (iff #530 false)
#722 := (or false false)
#446 := (iff #722 false)
#447 := [rewrite]: #446
#723 := (iff #530 #722)
#733 := (iff #741 false)
#389 := (not true)
#727 := (iff #389 false)
#728 := [rewrite]: #727
#375 := (iff #741 #389)
#734 := (iff #406 true)
#747 := (or true true)
#738 := (iff #747 true)
#398 := [rewrite]: #738
#369 := (iff #406 #747)
#725 := (iff #423 true)
#731 := [rewrite]: #725
#399 := (iff #427 true)
#740 := [rewrite]: #399
#732 := [monotonicity #740 #731]: #369
#374 := [trans #732 #398]: #734
#735 := [monotonicity #374]: #375
#736 := [trans #735 #728]: #733
#729 := (iff #400 false)
#390 := (iff #400 #389)
#387 := (iff #743 true)
#383 := (iff #743 #747)
#724 := [monotonicity #740 #740]: #383
#388 := [trans #724 #398]: #387
#726 := [monotonicity #388]: #390
#730 := [trans #726 #728]: #729
#445 := [monotonicity #730 #736]: #723
#341 := [trans #445 #447]: #448
#712 := [monotonicity #341 #432]: #434
#714 := [trans #712 #428]: #710
#403 := (iff #412 true)
#742 := (iff #412 #747)
#745 := (iff #411 true)
#746 := [rewrite]: #745
#748 := [monotonicity #746 #746]: #742
#739 := [trans #748 #398]: #403
#704 := [monotonicity #739 #714]: #715
#702 := [trans #704 #706]: #701
#551 := [monotonicity #702]: #550
#695 := [trans #551 #694]: #550
#709 := [quant-inst #8 #8]: #703
#696 := [mp #709 #695]: #708
[unit-resolution #696 #60 #755]: false
unsat
8c864635f2131bf56f7aae6736c04969e8015d95 267 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#15 := (f3 #13 #14)
#750 := (pattern #15)
#9 := 0::Int
#88 := -1::Int
#92 := (* -1::Int #14)
#89 := (* -1::Int #13)
#95 := (div #89 #92)
#252 := (* -1::Int #95)
#253 := (+ #15 #252)
#254 := (= #253 0::Int)
#25 := (div #13 #14)
#249 := (* -1::Int #25)
#250 := (+ #15 #249)
#251 := (= #250 0::Int)
#127 := (>= #13 0::Int)
#120 := (<= #14 0::Int)
#212 := (or #120 #127)
#213 := (not #212)
#116 := (<= #13 0::Int)
#210 := (or #116 #120)
#211 := (not #210)
#216 := (or #211 #213)
#255 := (ite #216 #251 #254)
#248 := (= #15 0::Int)
#17 := (= #14 0::Int)
#16 := (= #13 0::Int)
#18 := (or #16 #17)
#256 := (ite #18 #248 #255)
#751 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #750) #256)
#259 := (forall (vars (?v0 Int) (?v1 Int)) #256)
#754 := (iff #259 #751)
#752 := (iff #256 #256)
#753 := [refl]: #752
#755 := [quant-intro #753]: #754
#219 := (ite #216 #25 #95)
#222 := (ite #18 0::Int #219)
#225 := (= #15 #222)
#228 := (forall (vars (?v0 Int) (?v1 Int)) #225)
#260 := (iff #228 #259)
#257 := (iff #225 #256)
#258 := [rewrite]: #257
#261 := [quant-intro #258]: #260
#128 := (not #127)
#121 := (not #120)
#131 := (and #121 #128)
#117 := (not #116)
#124 := (and #117 #121)
#134 := (or #124 #131)
#137 := (ite #134 #25 #95)
#140 := (ite #18 0::Int #137)
#143 := (= #15 #140)
#146 := (forall (vars (?v0 Int) (?v1 Int)) #143)
#229 := (iff #146 #228)
#226 := (iff #143 #225)
#223 := (= #140 #222)
#220 := (= #137 #219)
#217 := (iff #134 #216)
#214 := (iff #131 #213)
#215 := [rewrite]: #214
#204 := (iff #124 #211)
#205 := [rewrite]: #204
#218 := [monotonicity #205 #215]: #217
#221 := [monotonicity #218]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [quant-intro #227]: #229
#208 := (~ #146 #146)
#206 := (~ #143 #143)
#207 := [refl]: #206
#209 := [nnf-pos #207]: #208
#27 := (- #14)
#26 := (- #13)
#28 := (div #26 #27)
#20 := (< 0::Int #14)
#22 := (< #13 0::Int)
#23 := (and #22 #20)
#19 := (< 0::Int #13)
#21 := (and #19 #20)
#24 := (or #21 #23)
#29 := (ite #24 #25 #28)
#30 := (ite #18 0::Int #29)
#31 := (= #15 #30)
#32 := (forall (vars (?v0 Int) (?v1 Int)) #31)
#149 := (iff #32 #146)
#82 := (and #20 #22)
#85 := (or #21 #82)
#98 := (ite #85 #25 #95)
#76 := (= 0::Int #14)
#73 := (= 0::Int #13)
#79 := (or #73 #76)
#101 := (ite #79 0::Int #98)
#104 := (= #15 #101)
#107 := (forall (vars (?v0 Int) (?v1 Int)) #104)
#147 := (iff #107 #146)
#144 := (iff #104 #143)
#141 := (= #101 #140)
#138 := (= #98 #137)
#135 := (iff #85 #134)
#132 := (iff #82 #131)
#129 := (iff #22 #128)
#130 := [rewrite]: #129
#122 := (iff #20 #121)
#123 := [rewrite]: #122
#133 := [monotonicity #123 #130]: #132
#125 := (iff #21 #124)
#118 := (iff #19 #117)
#119 := [rewrite]: #118
#126 := [monotonicity #119 #123]: #125
#136 := [monotonicity #126 #133]: #135
#139 := [monotonicity #136]: #138
#114 := (iff #79 #18)
#112 := (iff #76 #17)
#113 := [rewrite]: #112
#110 := (iff #73 #16)
#111 := [rewrite]: #110
#115 := [monotonicity #111 #113]: #114
#142 := [monotonicity #115 #139]: #141
#145 := [monotonicity #142]: #144
#148 := [quant-intro #145]: #147
#108 := (iff #32 #107)
#105 := (iff #31 #104)
#102 := (= #30 #101)
#99 := (= #29 #98)
#96 := (= #28 #95)
#93 := (= #27 #92)
#94 := [rewrite]: #93
#90 := (= #26 #89)
#91 := [rewrite]: #90
#97 := [monotonicity #91 #94]: #96
#86 := (iff #24 #85)
#83 := (iff #23 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#100 := [monotonicity #87 #97]: #99
#80 := (iff #18 #79)
#77 := (iff #17 #76)
#78 := [rewrite]: #77
#74 := (iff #16 #73)
#75 := [rewrite]: #74
#81 := [monotonicity #75 #78]: #80
#103 := [monotonicity #81 #100]: #102
#106 := [monotonicity #103]: #105
#109 := [quant-intro #106]: #108
#150 := [trans #109 #148]: #149
#72 := [asserted]: #32
#151 := [mp #72 #150]: #146
#200 := [mp~ #151 #209]: #146
#231 := [mp #200 #230]: #228
#262 := [mp #231 #261]: #259
#756 := [mp #262 #755]: #751
decl f4 :: Int
#8 := f4
#10 := (f3 f4 0::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#61 := [asserted]: #12
#692 := (not #751)
#693 := (or #692 #11)
#336 := (* -1::Int 0::Int)
#421 := (* -1::Int f4)
#422 := (div #421 #336)
#423 := (* -1::Int #422)
#414 := (+ #10 #423)
#425 := (= #414 0::Int)
#426 := (div f4 0::Int)
#354 := (* -1::Int #426)
#427 := (+ #10 #354)
#424 := (= #427 0::Int)
#428 := (>= f4 0::Int)
#407 := (<= 0::Int 0::Int)
#742 := (or #407 #428)
#744 := (not #742)
#401 := (<= f4 0::Int)
#531 := (or #401 #407)
#738 := (not #531)
#412 := (or #738 #744)
#413 := (ite #412 #424 #425)
#745 := (= 0::Int 0::Int)
#746 := (= f4 0::Int)
#747 := (or #746 #745)
#748 := (ite #747 #11 #413)
#699 := (or #692 #748)
#694 := (iff #699 #693)
#530 := (iff #693 #693)
#532 := [rewrite]: #530
#697 := (iff #748 #11)
#433 := (div #421 0::Int)
#713 := (* -1::Int #433)
#711 := (+ #10 #713)
#716 := (= #711 0::Int)
#1 := true
#551 := (ite true #11 #716)
#695 := (iff #551 #11)
#696 := [rewrite]: #695
#552 := (iff #748 #551)
#704 := (iff #413 #716)
#707 := (ite false #424 #716)
#708 := (iff #707 #716)
#709 := [rewrite]: #708
#702 := (iff #413 #707)
#705 := (iff #425 #716)
#715 := (= #414 #711)
#714 := (= #423 #713)
#434 := (= #422 #433)
#722 := (= #336 0::Int)
#432 := [rewrite]: #722
#435 := [monotonicity #432]: #434
#429 := [monotonicity #435]: #714
#712 := [monotonicity #429]: #715
#706 := [monotonicity #712]: #705
#721 := (iff #412 false)
#719 := (or false false)
#443 := (iff #719 false)
#717 := [rewrite]: #443
#720 := (iff #412 #719)
#449 := (iff #744 false)
#731 := (not true)
#370 := (iff #731 false)
#733 := [rewrite]: #370
#447 := (iff #744 #731)
#724 := (iff #742 true)
#376 := (or true #428)
#737 := (iff #376 true)
#723 := [rewrite]: #737
#736 := (iff #742 #376)
#725 := (iff #407 true)
#388 := [rewrite]: #725
#734 := [monotonicity #388]: #736
#446 := [trans #734 #723]: #724
#448 := [monotonicity #446]: #447
#342 := [trans #448 #733]: #449
#735 := (iff #738 false)
#726 := (iff #738 #731)
#729 := (iff #531 true)
#389 := (or #401 true)
#727 := (iff #389 true)
#728 := [rewrite]: #727
#390 := (iff #531 #389)
#391 := [monotonicity #388]: #390
#730 := [trans #391 #728]: #729
#732 := [monotonicity #730]: #726
#375 := [trans #732 #733]: #735
#442 := [monotonicity #375 #342]: #720
#718 := [trans #442 #717]: #721
#703 := [monotonicity #718 #706]: #702
#710 := [trans #703 #709]: #704
#741 := (iff #747 true)
#739 := (or #746 true)
#740 := (iff #739 true)
#400 := [rewrite]: #740
#399 := (iff #747 #739)
#743 := (iff #745 true)
#749 := [rewrite]: #743
#404 := [monotonicity #749]: #399
#384 := [trans #404 #400]: #741
#553 := [monotonicity #384 #710]: #552
#698 := [trans #553 #696]: #697
#701 := [monotonicity #698]: #694
#533 := [trans #701 #532]: #694
#700 := [quant-inst #8 #9]: #699
#686 := [mp #700 #533]: #693
[unit-resolution #686 #61 #756]: false
unsat
5b04feaa787b42fcdecf376c99ee15421d3ebc84 291 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#15 := (f3 #13 #14)
#749 := (pattern #15)
#8 := 0::Int
#88 := -1::Int
#92 := (* -1::Int #14)
#89 := (* -1::Int #13)
#95 := (div #89 #92)
#252 := (* -1::Int #95)
#253 := (+ #15 #252)
#254 := (= #253 0::Int)
#25 := (div #13 #14)
#249 := (* -1::Int #25)
#250 := (+ #15 #249)
#251 := (= #250 0::Int)
#127 := (>= #13 0::Int)
#120 := (<= #14 0::Int)
#212 := (or #120 #127)
#213 := (not #212)
#116 := (<= #13 0::Int)
#210 := (or #116 #120)
#211 := (not #210)
#216 := (or #211 #213)
#255 := (ite #216 #251 #254)
#248 := (= #15 0::Int)
#17 := (= #14 0::Int)
#16 := (= #13 0::Int)
#18 := (or #16 #17)
#256 := (ite #18 #248 #255)
#750 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #749) #256)
#259 := (forall (vars (?v0 Int) (?v1 Int)) #256)
#753 := (iff #259 #750)
#751 := (iff #256 #256)
#752 := [refl]: #751
#754 := [quant-intro #752]: #753
#219 := (ite #216 #25 #95)
#222 := (ite #18 0::Int #219)
#225 := (= #15 #222)
#228 := (forall (vars (?v0 Int) (?v1 Int)) #225)
#260 := (iff #228 #259)
#257 := (iff #225 #256)
#258 := [rewrite]: #257
#261 := [quant-intro #258]: #260
#128 := (not #127)
#121 := (not #120)
#131 := (and #121 #128)
#117 := (not #116)
#124 := (and #117 #121)
#134 := (or #124 #131)
#137 := (ite #134 #25 #95)
#140 := (ite #18 0::Int #137)
#143 := (= #15 #140)
#146 := (forall (vars (?v0 Int) (?v1 Int)) #143)
#229 := (iff #146 #228)
#226 := (iff #143 #225)
#223 := (= #140 #222)
#220 := (= #137 #219)
#217 := (iff #134 #216)
#214 := (iff #131 #213)
#215 := [rewrite]: #214
#204 := (iff #124 #211)
#205 := [rewrite]: #204
#218 := [monotonicity #205 #215]: #217
#221 := [monotonicity #218]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [quant-intro #227]: #229
#208 := (~ #146 #146)
#206 := (~ #143 #143)
#207 := [refl]: #206
#209 := [nnf-pos #207]: #208
#27 := (- #14)
#26 := (- #13)
#28 := (div #26 #27)
#20 := (< 0::Int #14)
#22 := (< #13 0::Int)
#23 := (and #22 #20)
#19 := (< 0::Int #13)
#21 := (and #19 #20)
#24 := (or #21 #23)
#29 := (ite #24 #25 #28)
#30 := (ite #18 0::Int #29)
#31 := (= #15 #30)
#32 := (forall (vars (?v0 Int) (?v1 Int)) #31)
#149 := (iff #32 #146)
#82 := (and #20 #22)
#85 := (or #21 #82)
#98 := (ite #85 #25 #95)
#76 := (= 0::Int #14)
#73 := (= 0::Int #13)
#79 := (or #73 #76)
#101 := (ite #79 0::Int #98)
#104 := (= #15 #101)
#107 := (forall (vars (?v0 Int) (?v1 Int)) #104)
#147 := (iff #107 #146)
#144 := (iff #104 #143)
#141 := (= #101 #140)
#138 := (= #98 #137)
#135 := (iff #85 #134)
#132 := (iff #82 #131)
#129 := (iff #22 #128)
#130 := [rewrite]: #129
#122 := (iff #20 #121)
#123 := [rewrite]: #122
#133 := [monotonicity #123 #130]: #132
#125 := (iff #21 #124)
#118 := (iff #19 #117)
#119 := [rewrite]: #118
#126 := [monotonicity #119 #123]: #125
#136 := [monotonicity #126 #133]: #135
#139 := [monotonicity #136]: #138
#114 := (iff #79 #18)
#112 := (iff #76 #17)
#113 := [rewrite]: #112
#110 := (iff #73 #16)
#111 := [rewrite]: #110
#115 := [monotonicity #111 #113]: #114
#142 := [monotonicity #115 #139]: #141
#145 := [monotonicity #142]: #144
#148 := [quant-intro #145]: #147
#108 := (iff #32 #107)
#105 := (iff #31 #104)
#102 := (= #30 #101)
#99 := (= #29 #98)
#96 := (= #28 #95)
#93 := (= #27 #92)
#94 := [rewrite]: #93
#90 := (= #26 #89)
#91 := [rewrite]: #90
#97 := [monotonicity #91 #94]: #96
#86 := (iff #24 #85)
#83 := (iff #23 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#100 := [monotonicity #87 #97]: #99
#80 := (iff #18 #79)
#77 := (iff #17 #76)
#78 := [rewrite]: #77
#74 := (iff #16 #73)
#75 := [rewrite]: #74
#81 := [monotonicity #75 #78]: #80
#103 := [monotonicity #81 #100]: #102
#106 := [monotonicity #103]: #105
#109 := [quant-intro #106]: #108
#150 := [trans #109 #148]: #149
#72 := [asserted]: #32
#151 := [mp #72 #150]: #146
#200 := [mp~ #151 #209]: #146
#231 := [mp #200 #230]: #228
#262 := [mp #231 #261]: #259
#755 := [mp #262 #754]: #750
#9 := 1::Int
#10 := (f3 0::Int 1::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#61 := [asserted]: #12
#584 := (not #750)
#585 := (or #584 #11)
#336 := (* -1::Int 1::Int)
#420 := (* -1::Int 0::Int)
#421 := (div #420 #336)
#422 := (* -1::Int #421)
#413 := (+ #10 #422)
#424 := (= #413 0::Int)
#425 := (div 0::Int 1::Int)
#426 := (* -1::Int #425)
#423 := (+ #10 #426)
#427 := (= #423 0::Int)
#406 := (>= 0::Int 0::Int)
#741 := (<= 1::Int 0::Int)
#743 := (or #741 #406)
#400 := (not #743)
#530 := (<= 0::Int 0::Int)
#737 := (or #530 #741)
#411 := (not #737)
#412 := (or #411 #400)
#744 := (ite #412 #427 #424)
#745 := (= 1::Int 0::Int)
#746 := (= 0::Int 0::Int)
#747 := (or #746 #745)
#742 := (ite #747 #11 #744)
#578 := (or #584 #742)
#587 := (iff #578 #585)
#589 := (iff #585 #585)
#590 := [rewrite]: #589
#567 := (iff #742 #11)
#1 := true
#681 := (ite true #11 #11)
#679 := (iff #681 #11)
#682 := [rewrite]: #679
#583 := (iff #742 #681)
#574 := (iff #744 #11)
#689 := (ite false #11 #11)
#572 := (iff #689 #11)
#573 := [rewrite]: #572
#687 := (iff #744 #689)
#686 := (iff #424 #11)
#532 := (= #413 #10)
#704 := (+ #10 0::Int)
#701 := (= #704 #10)
#702 := [rewrite]: #701
#529 := (= #413 #704)
#693 := (= #422 0::Int)
#710 := (= #420 0::Int)
#714 := [rewrite]: #710
#698 := (= #422 #420)
#691 := (= #421 0::Int)
#552 := (div 0::Int -1::Int)
#696 := (= #552 0::Int)
#697 := [rewrite]: #696
#694 := (= #421 #552)
#550 := (= #336 -1::Int)
#551 := [rewrite]: #550
#695 := [monotonicity #714 #551]: #694
#692 := [trans #695 #697]: #691
#699 := [monotonicity #692]: #698
#700 := [trans #699 #714]: #693
#531 := [monotonicity #700]: #529
#685 := [trans #531 #702]: #532
#688 := [monotonicity #685]: #686
#703 := (iff #427 #11)
#707 := (= #423 #10)
#705 := (= #423 #704)
#711 := (= #426 0::Int)
#713 := (= #426 #420)
#434 := (= #425 0::Int)
#712 := [rewrite]: #434
#428 := [monotonicity #712]: #713
#715 := [trans #428 #714]: #711
#706 := [monotonicity #715]: #705
#708 := [trans #706 #702]: #707
#709 := [monotonicity #708]: #703
#432 := (iff #412 false)
#716 := (or false false)
#721 := (iff #716 false)
#431 := [rewrite]: #721
#720 := (iff #412 #716)
#441 := (iff #400 false)
#731 := (not true)
#734 := (iff #731 false)
#374 := [rewrite]: #734
#718 := (iff #400 #731)
#448 := (iff #743 true)
#722 := (or false true)
#446 := (iff #722 true)
#447 := [rewrite]: #446
#723 := (iff #743 #722)
#733 := (iff #406 true)
#736 := [rewrite]: #733
#726 := (iff #741 false)
#727 := [rewrite]: #726
#445 := [monotonicity #727 #736]: #723
#342 := [trans #445 #447]: #448
#719 := [monotonicity #342]: #718
#442 := [trans #719 #374]: #441
#375 := (iff #411 false)
#369 := (iff #411 #731)
#730 := (iff #737 true)
#739 := (or true false)
#383 := (iff #739 true)
#724 := [rewrite]: #383
#728 := (iff #737 #739)
#389 := (iff #530 true)
#390 := [rewrite]: #389
#729 := [monotonicity #390 #727]: #728
#725 := [trans #729 #724]: #730
#732 := [monotonicity #725]: #369
#735 := [trans #732 #374]: #375
#717 := [monotonicity #735 #442]: #720
#433 := [trans #717 #431]: #432
#690 := [monotonicity #433 #709 #688]: #687
#533 := [trans #690 #573]: #574
#387 := (iff #747 true)
#399 := (iff #747 #739)
#398 := (iff #745 false)
#403 := [rewrite]: #398
#748 := (iff #746 true)
#738 := [rewrite]: #748
#740 := [monotonicity #738 #403]: #399
#388 := [trans #740 #724]: #387
#678 := [monotonicity #388 #533]: #583
#582 := [trans #678 #682]: #567
#588 := [monotonicity #582]: #587
#683 := [trans #588 #590]: #587
#586 := [quant-inst #8 #9]: #578
#680 := [mp #586 #683]: #585
[unit-resolution #680 #61 #755]: false
unsat
ca32959e06f9134641deb61724af7aaee2701280 279 0
#2 := false
decl f3 :: (-> Int Int Int)
#13 := (:var 0 Int)
#12 := (:var 1 Int)
#14 := (f3 #12 #13)
#734 := (pattern #14)
#15 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #13)
#80 := (* -1::Int #12)
#86 := (div #80 #83)
#237 := (* -1::Int #86)
#238 := (+ #14 #237)
#239 := (= #238 0::Int)
#25 := (div #12 #13)
#234 := (* -1::Int #25)
#235 := (+ #14 #234)
#236 := (= #235 0::Int)
#112 := (>= #12 0::Int)
#105 := (<= #13 0::Int)
#197 := (or #105 #112)
#198 := (not #197)
#101 := (<= #12 0::Int)
#195 := (or #101 #105)
#196 := (not #195)
#201 := (or #196 #198)
#240 := (ite #201 #236 #239)
#233 := (= #14 0::Int)
#17 := (= #13 0::Int)
#16 := (= #12 0::Int)
#18 := (or #16 #17)
#241 := (ite #18 #233 #240)
#735 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #734) #241)
#244 := (forall (vars (?v0 Int) (?v1 Int)) #241)
#738 := (iff #244 #735)
#736 := (iff #241 #241)
#737 := [refl]: #736
#739 := [quant-intro #737]: #738
#204 := (ite #201 #25 #86)
#207 := (ite #18 0::Int #204)
#210 := (= #14 #207)
#213 := (forall (vars (?v0 Int) (?v1 Int)) #210)
#245 := (iff #213 #244)
#242 := (iff #210 #241)
#243 := [rewrite]: #242
#246 := [quant-intro #243]: #245
#113 := (not #112)
#106 := (not #105)
#116 := (and #106 #113)
#102 := (not #101)
#109 := (and #102 #106)
#119 := (or #109 #116)
#122 := (ite #119 #25 #86)
#125 := (ite #18 0::Int #122)
#128 := (= #14 #125)
#131 := (forall (vars (?v0 Int) (?v1 Int)) #128)
#214 := (iff #131 #213)
#211 := (iff #128 #210)
#208 := (= #125 #207)
#205 := (= #122 #204)
#202 := (iff #119 #201)
#199 := (iff #116 #198)
#200 := [rewrite]: #199
#189 := (iff #109 #196)
#190 := [rewrite]: #189
#203 := [monotonicity #190 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [monotonicity #206]: #208
#212 := [monotonicity #209]: #211
#215 := [quant-intro #212]: #214
#193 := (~ #131 #131)
#191 := (~ #128 #128)
#192 := [refl]: #191
#194 := [nnf-pos #192]: #193
#27 := (- #13)
#26 := (- #12)
#28 := (div #26 #27)
#20 := (< 0::Int #13)
#22 := (< #12 0::Int)
#23 := (and #22 #20)
#19 := (< 0::Int #12)
#21 := (and #19 #20)
#24 := (or #21 #23)
#29 := (ite #24 #25 #28)
#30 := (ite #18 0::Int #29)
#31 := (= #14 #30)
#32 := (forall (vars (?v0 Int) (?v1 Int)) #31)
#134 := (iff #32 #131)
#73 := (and #20 #22)
#76 := (or #21 #73)
#89 := (ite #76 #25 #86)
#92 := (ite #18 0::Int #89)
#95 := (= #14 #92)
#98 := (forall (vars (?v0 Int) (?v1 Int)) #95)
#132 := (iff #98 #131)
#129 := (iff #95 #128)
#126 := (= #92 #125)
#123 := (= #89 #122)
#120 := (iff #76 #119)
#117 := (iff #73 #116)
#114 := (iff #22 #113)
#115 := [rewrite]: #114
#107 := (iff #20 #106)
#108 := [rewrite]: #107
#118 := [monotonicity #108 #115]: #117
#110 := (iff #21 #109)
#103 := (iff #19 #102)
#104 := [rewrite]: #103
#111 := [monotonicity #104 #108]: #110
#121 := [monotonicity #111 #118]: #120
#124 := [monotonicity #121]: #123
#127 := [monotonicity #124]: #126
#130 := [monotonicity #127]: #129
#133 := [quant-intro #130]: #132
#99 := (iff #32 #98)
#96 := (iff #31 #95)
#93 := (= #30 #92)
#90 := (= #29 #89)
#87 := (= #28 #86)
#84 := (= #27 #83)
#85 := [rewrite]: #84
#81 := (= #26 #80)
#82 := [rewrite]: #81
#88 := [monotonicity #82 #85]: #87
#77 := (iff #24 #76)
#74 := (iff #23 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#91 := [monotonicity #78 #88]: #90
#94 := [monotonicity #91]: #93
#97 := [monotonicity #94]: #96
#100 := [quant-intro #97]: #99
#135 := [trans #100 #133]: #134
#72 := [asserted]: #32
#136 := [mp #72 #135]: #131
#185 := [mp~ #136 #194]: #131
#216 := [mp #185 #215]: #213
#247 := [mp #216 #246]: #244
#740 := [mp #247 #739]: #735
#8 := 1::Int
#9 := (f3 1::Int 1::Int)
#10 := (= #9 1::Int)
#11 := (not #10)
#61 := [asserted]: #11
#571 := (not #735)
#572 := (or #571 #10)
#321 := (* -1::Int 1::Int)
#405 := (div #321 #321)
#406 := (* -1::Int #405)
#407 := (+ #9 #406)
#398 := (= #407 0::Int)
#409 := (div 1::Int 1::Int)
#410 := (* -1::Int #409)
#411 := (+ #9 #410)
#408 := (= #411 0::Int)
#412 := (>= 1::Int 0::Int)
#391 := (<= 1::Int 0::Int)
#726 := (or #391 #412)
#728 := (not #726)
#385 := (or #391 #391)
#515 := (not #385)
#722 := (or #515 #728)
#396 := (ite #722 #408 #398)
#397 := (= #9 0::Int)
#729 := (= 1::Int 0::Int)
#730 := (or #729 #729)
#731 := (ite #730 #397 #396)
#573 := (or #571 #731)
#575 := (iff #573 #572)
#665 := (iff #572 #572)
#669 := [rewrite]: #665
#570 := (iff #731 #10)
#664 := (ite false #397 #10)
#567 := (iff #664 #10)
#569 := [rewrite]: #567
#667 := (iff #731 #664)
#568 := (iff #396 #10)
#1 := true
#557 := (ite true #10 #10)
#518 := (iff #557 #10)
#666 := [rewrite]: #518
#558 := (iff #396 #557)
#672 := (iff #398 #10)
#689 := (+ -1::Int #9)
#692 := (= #689 0::Int)
#694 := (iff #692 #10)
#535 := [rewrite]: #694
#673 := (iff #398 #692)
#670 := (= #407 #689)
#699 := (+ #9 -1::Int)
#690 := (= #699 #689)
#691 := [rewrite]: #690
#516 := (= #407 #699)
#685 := (= #406 -1::Int)
#697 := (= #321 -1::Int)
#698 := [rewrite]: #697
#684 := (= #406 #321)
#677 := (= #405 1::Int)
#679 := (div -1::Int -1::Int)
#682 := (= #679 1::Int)
#676 := [rewrite]: #682
#680 := (= #405 #679)
#681 := [monotonicity #698 #698]: #680
#683 := [trans #681 #676]: #677
#678 := [monotonicity #683]: #684
#514 := [trans #678 #698]: #685
#517 := [monotonicity #514]: #516
#671 := [trans #517 #691]: #670
#674 := [monotonicity #671]: #673
#675 := [trans #674 #535]: #672
#536 := (iff #408 #10)
#693 := (iff #408 #692)
#686 := (= #411 #689)
#696 := (= #411 #699)
#413 := (= #410 -1::Int)
#418 := (= #410 #321)
#416 := (= #409 1::Int)
#417 := [rewrite]: #416
#419 := [monotonicity #417]: #418
#695 := [trans #419 #698]: #413
#700 := [monotonicity #695]: #696
#687 := [trans #700 #691]: #686
#688 := [monotonicity #687]: #693
#537 := [trans #688 #535]: #536
#702 := (iff #722 true)
#704 := (or true false)
#701 := (iff #704 true)
#705 := [rewrite]: #701
#426 := (iff #722 #704)
#327 := (iff #728 false)
#708 := (not true)
#432 := (iff #708 false)
#433 := [rewrite]: #432
#430 := (iff #728 #708)
#721 := (iff #726 true)
#719 := (or false true)
#720 := (iff #719 true)
#718 := [rewrite]: #720
#359 := (iff #726 #719)
#354 := (iff #412 true)
#717 := [rewrite]: #354
#368 := (iff #391 false)
#709 := [rewrite]: #368
#360 := [monotonicity #709 #717]: #359
#707 := [trans #360 #718]: #721
#431 := [monotonicity #707]: #430
#703 := [trans #431 #433]: #327
#710 := (iff #515 true)
#711 := (not false)
#714 := (iff #711 true)
#715 := [rewrite]: #714
#712 := (iff #515 #711)
#374 := (iff #385 false)
#733 := (or false false)
#388 := (iff #733 false)
#724 := [rewrite]: #388
#372 := (iff #385 #733)
#373 := [monotonicity #709 #709]: #372
#375 := [trans #373 #724]: #374
#713 := [monotonicity #375]: #712
#716 := [trans #713 #715]: #710
#427 := [monotonicity #716 #703]: #426
#706 := [trans #427 #705]: #702
#559 := [monotonicity #706 #537 #675]: #558
#663 := [trans #559 #666]: #568
#384 := (iff #730 false)
#723 := (iff #730 #733)
#732 := (iff #729 false)
#727 := [rewrite]: #732
#383 := [monotonicity #727 #727]: #723
#725 := [trans #383 #724]: #384
#552 := [monotonicity #725 #663]: #667
#563 := [trans #552 #569]: #570
#668 := [monotonicity #563]: #575
#656 := [trans #668 #669]: #575
#574 := [quant-inst #8 #8]: #573
#658 := [mp #574 #656]: #572
[unit-resolution #658 #61 #740]: false
unsat
4e490baf730f7c2e9689bb8a2892f4f8f052ba53 290 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#15 := (f3 #13 #14)
#735 := (pattern #15)
#16 := 0::Int
#80 := -1::Int
#84 := (* -1::Int #14)
#81 := (* -1::Int #13)
#87 := (div #81 #84)
#238 := (* -1::Int #87)
#239 := (+ #15 #238)
#240 := (= #239 0::Int)
#26 := (div #13 #14)
#235 := (* -1::Int #26)
#236 := (+ #15 #235)
#237 := (= #236 0::Int)
#113 := (>= #13 0::Int)
#106 := (<= #14 0::Int)
#198 := (or #106 #113)
#199 := (not #198)
#102 := (<= #13 0::Int)
#196 := (or #102 #106)
#197 := (not #196)
#202 := (or #197 #199)
#241 := (ite #202 #237 #240)
#234 := (= #15 0::Int)
#18 := (= #14 0::Int)
#17 := (= #13 0::Int)
#19 := (or #17 #18)
#242 := (ite #19 #234 #241)
#736 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #735) #242)
#245 := (forall (vars (?v0 Int) (?v1 Int)) #242)
#739 := (iff #245 #736)
#737 := (iff #242 #242)
#738 := [refl]: #737
#740 := [quant-intro #738]: #739
#205 := (ite #202 #26 #87)
#208 := (ite #19 0::Int #205)
#211 := (= #15 #208)
#214 := (forall (vars (?v0 Int) (?v1 Int)) #211)
#246 := (iff #214 #245)
#243 := (iff #211 #242)
#244 := [rewrite]: #243
#247 := [quant-intro #244]: #246
#114 := (not #113)
#107 := (not #106)
#117 := (and #107 #114)
#103 := (not #102)
#110 := (and #103 #107)
#120 := (or #110 #117)
#123 := (ite #120 #26 #87)
#126 := (ite #19 0::Int #123)
#129 := (= #15 #126)
#132 := (forall (vars (?v0 Int) (?v1 Int)) #129)
#215 := (iff #132 #214)
#212 := (iff #129 #211)
#209 := (= #126 #208)
#206 := (= #123 #205)
#203 := (iff #120 #202)
#200 := (iff #117 #199)
#201 := [rewrite]: #200
#190 := (iff #110 #197)
#191 := [rewrite]: #190
#204 := [monotonicity #191 #201]: #203
#207 := [monotonicity #204]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [quant-intro #213]: #215
#194 := (~ #132 #132)
#192 := (~ #129 #129)
#193 := [refl]: #192
#195 := [nnf-pos #193]: #194
#28 := (- #14)
#27 := (- #13)
#29 := (div #27 #28)
#21 := (< 0::Int #14)
#23 := (< #13 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #13)
#22 := (and #20 #21)
#25 := (or #22 #24)
#30 := (ite #25 #26 #29)
#31 := (ite #19 0::Int #30)
#32 := (= #15 #31)
#33 := (forall (vars (?v0 Int) (?v1 Int)) #32)
#135 := (iff #33 #132)
#74 := (and #21 #23)
#77 := (or #22 #74)
#90 := (ite #77 #26 #87)
#93 := (ite #19 0::Int #90)
#96 := (= #15 #93)
#99 := (forall (vars (?v0 Int) (?v1 Int)) #96)
#133 := (iff #99 #132)
#130 := (iff #96 #129)
#127 := (= #93 #126)
#124 := (= #90 #123)
#121 := (iff #77 #120)
#118 := (iff #74 #117)
#115 := (iff #23 #114)
#116 := [rewrite]: #115
#108 := (iff #21 #107)
#109 := [rewrite]: #108
#119 := [monotonicity #109 #116]: #118
#111 := (iff #22 #110)
#104 := (iff #20 #103)
#105 := [rewrite]: #104
#112 := [monotonicity #105 #109]: #111
#122 := [monotonicity #112 #119]: #121
#125 := [monotonicity #122]: #124
#128 := [monotonicity #125]: #127
#131 := [monotonicity #128]: #130
#134 := [quant-intro #131]: #133
#100 := (iff #33 #99)
#97 := (iff #32 #96)
#94 := (= #31 #93)
#91 := (= #30 #90)
#88 := (= #29 #87)
#85 := (= #28 #84)
#86 := [rewrite]: #85
#82 := (= #27 #81)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#78 := (iff #25 #77)
#75 := (iff #24 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#92 := [monotonicity #79 #89]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#101 := [quant-intro #98]: #100
#136 := [trans #101 #134]: #135
#73 := [asserted]: #33
#137 := [mp #73 #136]: #132
#186 := [mp~ #137 #195]: #132
#217 := [mp #186 #216]: #214
#248 := [mp #217 #247]: #245
#741 := [mp #248 #740]: #736
#8 := 3::Int
#9 := 1::Int
#10 := (f3 3::Int 1::Int)
#11 := (= #10 3::Int)
#12 := (not #11)
#62 := [asserted]: #12
#651 := (not #736)
#648 := (or #651 #11)
#322 := (* -1::Int 1::Int)
#406 := (* -1::Int 3::Int)
#407 := (div #406 #322)
#408 := (* -1::Int #407)
#399 := (+ #10 #408)
#410 := (= #399 0::Int)
#411 := (div 3::Int 1::Int)
#412 := (* -1::Int #411)
#409 := (+ #10 #412)
#413 := (= #409 0::Int)
#392 := (>= 3::Int 0::Int)
#727 := (<= 1::Int 0::Int)
#729 := (or #727 #392)
#386 := (not #729)
#516 := (<= 3::Int 0::Int)
#723 := (or #516 #727)
#397 := (not #723)
#398 := (or #397 #386)
#730 := (ite #398 #413 #410)
#731 := (= #10 0::Int)
#732 := (= 1::Int 0::Int)
#733 := (= 3::Int 0::Int)
#728 := (or #733 #732)
#734 := (ite #728 #731 #730)
#650 := (or #651 #734)
#661 := (iff #650 #648)
#658 := (iff #648 #648)
#663 := [rewrite]: #658
#657 := (iff #734 #11)
#575 := (ite false #731 #11)
#666 := (iff #575 #11)
#670 := [rewrite]: #666
#576 := (iff #734 #575)
#573 := (iff #730 #11)
#1 := true
#568 := (ite true #11 #11)
#564 := (iff #568 #11)
#572 := [rewrite]: #564
#570 := (iff #730 #568)
#668 := (iff #410 #11)
#690 := -3::Int
#695 := (+ -3::Int #10)
#681 := (= #695 0::Int)
#677 := (iff #681 #11)
#678 := [rewrite]: #677
#664 := (iff #410 #681)
#667 := (= #399 #695)
#693 := (+ #10 -3::Int)
#536 := (= #693 #695)
#537 := [rewrite]: #536
#560 := (= #399 #693)
#558 := (= #408 -3::Int)
#691 := (= #406 -3::Int)
#692 := [rewrite]: #691
#673 := (= #408 #406)
#674 := (= #407 3::Int)
#515 := (div -3::Int -1::Int)
#671 := (= #515 3::Int)
#672 := [rewrite]: #671
#517 := (= #407 #515)
#679 := (= #322 -1::Int)
#686 := [rewrite]: #679
#518 := [monotonicity #692 #686]: #517
#675 := [trans #518 #672]: #674
#676 := [monotonicity #675]: #673
#559 := [trans #676 #692]: #558
#519 := [monotonicity #559]: #560
#569 := [trans #519 #537]: #667
#665 := [monotonicity #569]: #664
#553 := [trans #665 #678]: #668
#684 := (iff #413 #11)
#682 := (iff #413 #681)
#538 := (= #409 #695)
#694 := (= #409 #693)
#687 := (= #412 -3::Int)
#697 := (= #412 #406)
#696 := (= #411 3::Int)
#700 := [rewrite]: #696
#701 := [monotonicity #700]: #697
#688 := [trans #701 #692]: #687
#689 := [monotonicity #688]: #694
#680 := [trans #689 #537]: #538
#683 := [monotonicity #680]: #682
#685 := [trans #683 #678]: #684
#699 := (iff #398 true)
#417 := (or true false)
#420 := (iff #417 true)
#698 := [rewrite]: #420
#418 := (iff #398 #417)
#703 := (iff #386 false)
#705 := (not true)
#702 := (iff #705 false)
#706 := [rewrite]: #702
#427 := (iff #386 #705)
#328 := (iff #729 true)
#709 := (or false true)
#433 := (iff #709 true)
#434 := [rewrite]: #433
#431 := (iff #729 #709)
#722 := (iff #392 true)
#708 := [rewrite]: #722
#713 := (iff #727 false)
#714 := [rewrite]: #713
#432 := [monotonicity #714 #708]: #431
#704 := [trans #432 #434]: #328
#428 := [monotonicity #704]: #427
#707 := [trans #428 #706]: #703
#721 := (iff #397 true)
#355 := (not false)
#360 := (iff #355 true)
#361 := [rewrite]: #360
#718 := (iff #397 #355)
#711 := (iff #723 false)
#385 := (or false false)
#710 := (iff #385 false)
#373 := [rewrite]: #710
#715 := (iff #723 #385)
#376 := (iff #516 false)
#712 := [rewrite]: #376
#716 := [monotonicity #712 #714]: #715
#717 := [trans #716 #373]: #711
#720 := [monotonicity #717]: #718
#719 := [trans #720 #361]: #721
#419 := [monotonicity #719 #707]: #418
#414 := [trans #419 #698]: #699
#571 := [monotonicity #414 #685 #553]: #570
#574 := [trans #571 #572]: #573
#374 := (iff #728 false)
#726 := (iff #728 #385)
#389 := (iff #732 false)
#725 := [rewrite]: #389
#724 := (iff #733 false)
#384 := [rewrite]: #724
#369 := [monotonicity #384 #725]: #726
#375 := [trans #369 #373]: #374
#669 := [monotonicity #375 #574]: #576
#659 := [trans #669 #670]: #657
#662 := [monotonicity #659]: #661
#652 := [trans #662 #663]: #661
#660 := [quant-inst #8 #9]: #650
#653 := [mp #660 #652]: #648
[unit-resolution #653 #62 #741]: false
unsat
3af8b375b2f7758b71c609be3059c3c3f068c4d0 327 0
#2 := false
decl f3 :: (-> Int Int Int)
#9 := 1::Int
decl f4 :: Int
#8 := f4
#10 := (f3 f4 1::Int)
#63 := (= f4 #10)
#16 := 0::Int
#728 := (= #10 0::Int)
#543 := (iff #728 #63)
#541 := (iff #63 #728)
#536 := (= 0::Int #10)
#539 := (iff #536 #728)
#540 := [commutativity]: #539
#537 := (iff #63 #536)
#730 := (= f4 0::Int)
#408 := (div f4 1::Int)
#77 := -1::Int
#409 := (* -1::Int #408)
#406 := (+ #10 #409)
#410 := (= #406 0::Int)
#516 := (not #410)
#552 := (= #408 #10)
#590 := (= #10 #408)
#515 := (<= #406 0::Int)
#474 := [hypothesis]: #410
#585 := (or #516 #515)
#586 := [th-lemma arith triangle-eq]: #585
#587 := [unit-resolution #586 #474]: #515
#668 := (>= #406 0::Int)
#592 := (or #516 #668)
#588 := [th-lemma arith triangle-eq]: #592
#589 := [unit-resolution #588 #474]: #668
#593 := [th-lemma arith eq-propagate 1 1 #589 #587]: #590
#559 := [symm #593]: #552
#578 := (= f4 #408)
#621 := (+ f4 #409)
#626 := (<= #621 0::Int)
#620 := (= #621 0::Int)
#1 := true
#60 := [true-axiom]: true
#594 := (or false #620)
#595 := [th-lemma arith]: #594
#591 := [unit-resolution #595 #60]: #620
#596 := (not #620)
#576 := (or #596 #626)
#522 := [th-lemma arith triangle-eq]: #576
#577 := [unit-resolution #522 #591]: #626
#627 := (>= #621 0::Int)
#558 := (or #596 #627)
#582 := [th-lemma arith triangle-eq]: #558
#583 := [unit-resolution #582 #591]: #627
#584 := [th-lemma arith eq-propagate 1 1 #583 #577]: #578
#518 := [trans #584 #559]: #63
#66 := (not #63)
#11 := (= #10 f4)
#12 := (not #11)
#67 := (iff #12 #66)
#64 := (iff #11 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#62 := [asserted]: #12
#71 := [mp #62 #68]: #66
#549 := [unit-resolution #71 #518]: false
#551 := [lemma #549]: #516
#403 := (* -1::Int f4)
#704 := (div #403 -1::Int)
#416 := (* -1::Int #704)
#696 := (+ #10 #416)
#697 := (= #696 0::Int)
#513 := (<= f4 0::Int)
#714 := (not #513)
#389 := (>= f4 0::Int)
#706 := (not #389)
#701 := (or #706 #714)
#687 := (ite #701 #410 #697)
#565 := (not #730)
#657 := [hypothesis]: #565
#560 := (or #730 #687)
#684 := (ite #730 #728 #687)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#15 := (f3 #13 #14)
#732 := (pattern #15)
#81 := (* -1::Int #14)
#78 := (* -1::Int #13)
#84 := (div #78 #81)
#235 := (* -1::Int #84)
#236 := (+ #15 #235)
#237 := (= #236 0::Int)
#26 := (div #13 #14)
#232 := (* -1::Int #26)
#233 := (+ #15 #232)
#234 := (= #233 0::Int)
#110 := (>= #13 0::Int)
#103 := (<= #14 0::Int)
#195 := (or #103 #110)
#196 := (not #195)
#99 := (<= #13 0::Int)
#193 := (or #99 #103)
#194 := (not #193)
#199 := (or #194 #196)
#238 := (ite #199 #234 #237)
#231 := (= #15 0::Int)
#18 := (= #14 0::Int)
#17 := (= #13 0::Int)
#19 := (or #17 #18)
#239 := (ite #19 #231 #238)
#733 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #732) #239)
#242 := (forall (vars (?v0 Int) (?v1 Int)) #239)
#736 := (iff #242 #733)
#734 := (iff #239 #239)
#735 := [refl]: #734
#737 := [quant-intro #735]: #736
#202 := (ite #199 #26 #84)
#205 := (ite #19 0::Int #202)
#208 := (= #15 #205)
#211 := (forall (vars (?v0 Int) (?v1 Int)) #208)
#243 := (iff #211 #242)
#240 := (iff #208 #239)
#241 := [rewrite]: #240
#244 := [quant-intro #241]: #243
#111 := (not #110)
#104 := (not #103)
#114 := (and #104 #111)
#100 := (not #99)
#107 := (and #100 #104)
#117 := (or #107 #114)
#120 := (ite #117 #26 #84)
#123 := (ite #19 0::Int #120)
#126 := (= #15 #123)
#129 := (forall (vars (?v0 Int) (?v1 Int)) #126)
#212 := (iff #129 #211)
#209 := (iff #126 #208)
#206 := (= #123 #205)
#203 := (= #120 #202)
#200 := (iff #117 #199)
#197 := (iff #114 #196)
#198 := [rewrite]: #197
#187 := (iff #107 #194)
#188 := [rewrite]: #187
#201 := [monotonicity #188 #198]: #200
#204 := [monotonicity #201]: #203
#207 := [monotonicity #204]: #206
#210 := [monotonicity #207]: #209
#213 := [quant-intro #210]: #212
#191 := (~ #129 #129)
#189 := (~ #126 #126)
#190 := [refl]: #189
#192 := [nnf-pos #190]: #191
#28 := (- #14)
#27 := (- #13)
#29 := (div #27 #28)
#21 := (< 0::Int #14)
#23 := (< #13 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #13)
#22 := (and #20 #21)
#25 := (or #22 #24)
#30 := (ite #25 #26 #29)
#31 := (ite #19 0::Int #30)
#32 := (= #15 #31)
#33 := (forall (vars (?v0 Int) (?v1 Int)) #32)
#132 := (iff #33 #129)
#70 := (and #21 #23)
#74 := (or #22 #70)
#87 := (ite #74 #26 #84)
#90 := (ite #19 0::Int #87)
#93 := (= #15 #90)
#96 := (forall (vars (?v0 Int) (?v1 Int)) #93)
#130 := (iff #96 #129)
#127 := (iff #93 #126)
#124 := (= #90 #123)
#121 := (= #87 #120)
#118 := (iff #74 #117)
#115 := (iff #70 #114)
#112 := (iff #23 #111)
#113 := [rewrite]: #112
#105 := (iff #21 #104)
#106 := [rewrite]: #105
#116 := [monotonicity #106 #113]: #115
#108 := (iff #22 #107)
#101 := (iff #20 #100)
#102 := [rewrite]: #101
#109 := [monotonicity #102 #106]: #108
#119 := [monotonicity #109 #116]: #118
#122 := [monotonicity #119]: #121
#125 := [monotonicity #122]: #124
#128 := [monotonicity #125]: #127
#131 := [quant-intro #128]: #130
#97 := (iff #33 #96)
#94 := (iff #32 #93)
#91 := (= #31 #90)
#88 := (= #30 #87)
#85 := (= #29 #84)
#82 := (= #28 #81)
#83 := [rewrite]: #82
#79 := (= #27 #78)
#80 := [rewrite]: #79
#86 := [monotonicity #80 #83]: #85
#75 := (iff #25 #74)
#72 := (iff #24 #70)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#89 := [monotonicity #76 #86]: #88
#92 := [monotonicity #89]: #91
#95 := [monotonicity #92]: #94
#98 := [quant-intro #95]: #97
#133 := [trans #98 #131]: #132
#69 := [asserted]: #33
#134 := [mp #69 #133]: #129
#183 := [mp~ #134 #192]: #129
#214 := [mp #183 #213]: #211
#245 := [mp #214 #244]: #242
#738 := [mp #245 #737]: #733
#691 := (not #733)
#686 := (or #691 #684)
#319 := (* -1::Int 1::Int)
#404 := (div #403 #319)
#405 := (* -1::Int #404)
#396 := (+ #10 #405)
#407 := (= #396 0::Int)
#724 := (<= 1::Int 0::Int)
#726 := (or #724 #389)
#383 := (not #726)
#720 := (or #513 #724)
#394 := (not #720)
#395 := (or #394 #383)
#727 := (ite #395 #410 #407)
#729 := (= 1::Int 0::Int)
#725 := (or #730 #729)
#731 := (ite #725 #728 #727)
#692 := (or #691 #731)
#534 := (iff #692 #686)
#677 := (iff #686 #686)
#678 := [rewrite]: #677
#685 := (iff #731 #684)
#688 := (iff #727 #687)
#694 := (iff #407 #697)
#411 := (= #396 #696)
#417 := (= #405 #416)
#414 := (= #404 #704)
#703 := (= #319 -1::Int)
#700 := [rewrite]: #703
#415 := [monotonicity #700]: #414
#695 := [monotonicity #415]: #417
#693 := [monotonicity #695]: #411
#698 := [monotonicity #693]: #694
#425 := (iff #395 #701)
#430 := (or #714 #706)
#702 := (iff #430 #701)
#424 := [rewrite]: #702
#431 := (iff #395 #430)
#428 := (iff #383 #706)
#719 := (iff #726 #389)
#717 := (or false #389)
#718 := (iff #717 #389)
#716 := [rewrite]: #718
#357 := (iff #726 #717)
#371 := (iff #724 false)
#372 := [rewrite]: #371
#358 := [monotonicity #372]: #357
#705 := [trans #358 #716]: #719
#429 := [monotonicity #705]: #428
#352 := (iff #394 #714)
#713 := (iff #720 #513)
#373 := (or #513 false)
#711 := (iff #373 #513)
#712 := [rewrite]: #711
#709 := (iff #720 #373)
#710 := [monotonicity #372]: #709
#708 := [trans #710 #712]: #713
#715 := [monotonicity #708]: #352
#325 := [monotonicity #715 #429]: #431
#699 := [trans #325 #424]: #425
#689 := [monotonicity #699 #698]: #688
#707 := (iff #725 #730)
#386 := (or #730 false)
#723 := (iff #386 #730)
#366 := [rewrite]: #723
#722 := (iff #725 #386)
#721 := (iff #729 false)
#381 := [rewrite]: #721
#382 := [monotonicity #381]: #722
#370 := [trans #382 #366]: #707
#690 := [monotonicity #370 #689]: #685
#535 := [monotonicity #690]: #534
#679 := [trans #535 #678]: #534
#533 := [quant-inst #8 #9]: #692
#680 := [mp #533 #679]: #686
#553 := [unit-resolution #680 #738]: #684
#550 := (not #684)
#561 := (or #550 #730 #687)
#569 := [def-axiom]: #561
#562 := [unit-resolution #569 #553]: #560
#563 := [unit-resolution #562 #657]: #687
#649 := (or #701 #730)
#676 := (not #701)
#648 := [hypothesis]: #676
#674 := (or #701 #389)
#675 := [def-axiom]: #674
#645 := [unit-resolution #675 #648]: #389
#681 := (or #701 #513)
#682 := [def-axiom]: #681
#647 := [unit-resolution #682 #648]: #513
#658 := (or #730 #714 #706)
#659 := [th-lemma arith triangle-eq]: #658
#655 := [unit-resolution #659 #657]: #430
#660 := [unit-resolution #655 #647 #645]: false
#650 := [lemma #660]: #649
#564 := [unit-resolution #650 #657]: #701
#670 := (not #687)
#673 := (or #670 #676 #410)
#555 := [def-axiom]: #673
#574 := [unit-resolution #555 #564 #563 #551]: false
#554 := [lemma #574]: #730
#538 := [monotonicity #554]: #537
#542 := [trans #538 #540]: #541
#544 := [symm #542]: #543
#575 := (or #565 #728)
#567 := (or #550 #565 #728)
#568 := [def-axiom]: #567
#530 := [unit-resolution #568 #553]: #575
#531 := [unit-resolution #530 #554]: #728
#545 := [mp #531 #544]: #63
[unit-resolution #71 #545]: false
unsat
6a8ee4256f7c15262363d462bd2dccb9364bb175 316 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#16 := (f3 #14 #15)
#764 := (pattern #16)
#8 := 0::Int
#63 := -1::Int
#107 := (* -1::Int #15)
#104 := (* -1::Int #14)
#110 := (div #104 #107)
#267 := (* -1::Int #110)
#268 := (+ #16 #267)
#269 := (= #268 0::Int)
#26 := (div #14 #15)
#264 := (* -1::Int #26)
#265 := (+ #16 #264)
#266 := (= #265 0::Int)
#142 := (>= #14 0::Int)
#135 := (<= #15 0::Int)
#227 := (or #135 #142)
#228 := (not #227)
#131 := (<= #14 0::Int)
#225 := (or #131 #135)
#226 := (not #225)
#231 := (or #226 #228)
#270 := (ite #231 #266 #269)
#263 := (= #16 0::Int)
#18 := (= #15 0::Int)
#17 := (= #14 0::Int)
#19 := (or #17 #18)
#271 := (ite #19 #263 #270)
#765 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #764) #271)
#274 := (forall (vars (?v0 Int) (?v1 Int)) #271)
#768 := (iff #274 #765)
#766 := (iff #271 #271)
#767 := [refl]: #766
#769 := [quant-intro #767]: #768
#234 := (ite #231 #26 #110)
#237 := (ite #19 0::Int #234)
#240 := (= #16 #237)
#243 := (forall (vars (?v0 Int) (?v1 Int)) #240)
#275 := (iff #243 #274)
#272 := (iff #240 #271)
#273 := [rewrite]: #272
#276 := [quant-intro #273]: #275
#143 := (not #142)
#136 := (not #135)
#146 := (and #136 #143)
#132 := (not #131)
#139 := (and #132 #136)
#149 := (or #139 #146)
#152 := (ite #149 #26 #110)
#155 := (ite #19 0::Int #152)
#158 := (= #16 #155)
#161 := (forall (vars (?v0 Int) (?v1 Int)) #158)
#244 := (iff #161 #243)
#241 := (iff #158 #240)
#238 := (= #155 #237)
#235 := (= #152 #234)
#232 := (iff #149 #231)
#229 := (iff #146 #228)
#230 := [rewrite]: #229
#219 := (iff #139 #226)
#220 := [rewrite]: #219
#233 := [monotonicity #220 #230]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [quant-intro #242]: #244
#223 := (~ #161 #161)
#221 := (~ #158 #158)
#222 := [refl]: #221
#224 := [nnf-pos #222]: #223
#28 := (- #15)
#27 := (- #14)
#29 := (div #27 #28)
#21 := (< 0::Int #15)
#23 := (< #14 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #14)
#22 := (and #20 #21)
#25 := (or #22 #24)
#30 := (ite #25 #26 #29)
#31 := (ite #19 0::Int #30)
#32 := (= #16 #31)
#33 := (forall (vars (?v0 Int) (?v1 Int)) #32)
#164 := (iff #33 #161)
#98 := (and #21 #23)
#101 := (or #22 #98)
#113 := (ite #101 #26 #110)
#92 := (= 0::Int #15)
#89 := (= 0::Int #14)
#95 := (or #89 #92)
#116 := (ite #95 0::Int #113)
#119 := (= #16 #116)
#122 := (forall (vars (?v0 Int) (?v1 Int)) #119)
#162 := (iff #122 #161)
#159 := (iff #119 #158)
#156 := (= #116 #155)
#153 := (= #113 #152)
#150 := (iff #101 #149)
#147 := (iff #98 #146)
#144 := (iff #23 #143)
#145 := [rewrite]: #144
#137 := (iff #21 #136)
#138 := [rewrite]: #137
#148 := [monotonicity #138 #145]: #147
#140 := (iff #22 #139)
#133 := (iff #20 #132)
#134 := [rewrite]: #133
#141 := [monotonicity #134 #138]: #140
#151 := [monotonicity #141 #148]: #150
#154 := [monotonicity #151]: #153
#129 := (iff #95 #19)
#127 := (iff #92 #18)
#128 := [rewrite]: #127
#125 := (iff #89 #17)
#126 := [rewrite]: #125
#130 := [monotonicity #126 #128]: #129
#157 := [monotonicity #130 #154]: #156
#160 := [monotonicity #157]: #159
#163 := [quant-intro #160]: #162
#123 := (iff #33 #122)
#120 := (iff #32 #119)
#117 := (= #31 #116)
#114 := (= #30 #113)
#111 := (= #29 #110)
#108 := (= #28 #107)
#109 := [rewrite]: #108
#105 := (= #27 #104)
#106 := [rewrite]: #105
#112 := [monotonicity #106 #109]: #111
#102 := (iff #25 #101)
#99 := (iff #24 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#115 := [monotonicity #103 #112]: #114
#96 := (iff #19 #95)
#93 := (iff #18 #92)
#94 := [rewrite]: #93
#90 := (iff #17 #89)
#91 := [rewrite]: #90
#97 := [monotonicity #91 #94]: #96
#118 := [monotonicity #97 #115]: #117
#121 := [monotonicity #118]: #120
#124 := [quant-intro #121]: #123
#165 := [trans #124 #163]: #164
#88 := [asserted]: #33
#166 := [mp #88 #165]: #161
#215 := [mp~ #166 #224]: #161
#246 := [mp #215 #245]: #243
#277 := [mp #246 #276]: #274
#770 := [mp #277 #769]: #765
#66 := (f3 0::Int -1::Int)
#69 := (= #66 0::Int)
#82 := (not #69)
#9 := 1::Int
#10 := (- 1::Int)
#11 := (f3 0::Int #10)
#12 := (= #11 0::Int)
#13 := (not #12)
#85 := (iff #13 #82)
#72 := (= 0::Int #66)
#77 := (not #72)
#83 := (iff #77 #82)
#80 := (iff #72 #69)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#78 := (iff #13 #77)
#75 := (iff #12 #72)
#73 := (iff #69 #72)
#74 := [rewrite]: #73
#70 := (iff #12 #69)
#67 := (= #11 #66)
#64 := (= #10 -1::Int)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#76 := [trans #71 #74]: #75
#79 := [monotonicity #76]: #78
#86 := [trans #79 #84]: #85
#62 := [asserted]: #13
#87 := [mp #62 #86]: #82
#599 := (not #765)
#600 := (or #599 #69)
#351 := (* -1::Int -1::Int)
#435 := (* -1::Int 0::Int)
#436 := (div #435 #351)
#437 := (* -1::Int #436)
#428 := (+ #66 #437)
#439 := (= #428 0::Int)
#440 := (div 0::Int -1::Int)
#441 := (* -1::Int #440)
#438 := (+ #66 #441)
#442 := (= #438 0::Int)
#421 := (>= 0::Int 0::Int)
#756 := (<= -1::Int 0::Int)
#758 := (or #756 #421)
#415 := (not #758)
#545 := (<= 0::Int 0::Int)
#752 := (or #545 #756)
#426 := (not #752)
#427 := (or #426 #415)
#759 := (ite #427 #442 #439)
#760 := (= -1::Int 0::Int)
#761 := (= 0::Int 0::Int)
#762 := (or #761 #760)
#757 := (ite #762 #69 #759)
#593 := (or #599 #757)
#602 := (iff #593 #600)
#604 := (iff #600 #600)
#605 := [rewrite]: #604
#582 := (iff #757 #69)
#1 := true
#696 := (ite true #69 #69)
#694 := (iff #696 #69)
#697 := [rewrite]: #694
#598 := (iff #757 #696)
#589 := (iff #759 #69)
#704 := (ite false #69 #69)
#587 := (iff #704 #69)
#588 := [rewrite]: #587
#702 := (iff #759 #704)
#701 := (iff #439 #69)
#547 := (= #428 #66)
#719 := (+ #66 0::Int)
#716 := (= #719 #66)
#717 := [rewrite]: #716
#544 := (= #428 #719)
#708 := (= #437 0::Int)
#725 := (= #435 0::Int)
#729 := [rewrite]: #725
#713 := (= #437 #435)
#706 := (= #436 0::Int)
#567 := (div 0::Int 1::Int)
#711 := (= #567 0::Int)
#712 := [rewrite]: #711
#709 := (= #436 #567)
#565 := (= #351 1::Int)
#566 := [rewrite]: #565
#710 := [monotonicity #729 #566]: #709
#707 := [trans #710 #712]: #706
#714 := [monotonicity #707]: #713
#715 := [trans #714 #729]: #708
#546 := [monotonicity #715]: #544
#700 := [trans #546 #717]: #547
#703 := [monotonicity #700]: #701
#718 := (iff #442 #69)
#722 := (= #438 #66)
#720 := (= #438 #719)
#726 := (= #441 0::Int)
#728 := (= #441 #435)
#449 := (= #440 0::Int)
#727 := [rewrite]: #449
#443 := [monotonicity #727]: #728
#730 := [trans #443 #729]: #726
#721 := [monotonicity #730]: #720
#723 := [trans #721 #717]: #722
#724 := [monotonicity #723]: #718
#447 := (iff #427 false)
#731 := (or false false)
#736 := (iff #731 false)
#446 := [rewrite]: #736
#735 := (iff #427 #731)
#456 := (iff #415 false)
#749 := (not true)
#750 := (iff #749 false)
#748 := [rewrite]: #750
#733 := (iff #415 #749)
#463 := (iff #758 true)
#743 := (or true true)
#740 := (iff #743 true)
#746 := [rewrite]: #740
#461 := (iff #758 #743)
#738 := (iff #421 true)
#460 := [rewrite]: #738
#741 := (iff #756 true)
#742 := [rewrite]: #741
#462 := [monotonicity #742 #460]: #461
#357 := [trans #462 #746]: #463
#734 := [monotonicity #357]: #733
#457 := [trans #734 #748]: #456
#751 := (iff #426 false)
#389 := (iff #426 #749)
#384 := (iff #752 true)
#744 := (iff #752 #743)
#404 := (iff #545 true)
#405 := [rewrite]: #404
#745 := [monotonicity #405 #742]: #744
#747 := [trans #745 #746]: #384
#390 := [monotonicity #747]: #389
#737 := [trans #390 #748]: #751
#732 := [monotonicity #737 #457]: #735
#448 := [trans #732 #446]: #447
#705 := [monotonicity #448 #724 #703]: #702
#548 := [trans #705 #588]: #589
#402 := (iff #762 true)
#754 := (or true false)
#398 := (iff #754 true)
#739 := [rewrite]: #398
#414 := (iff #762 #754)
#413 := (iff #760 false)
#418 := [rewrite]: #413
#763 := (iff #761 true)
#753 := [rewrite]: #763
#755 := [monotonicity #753 #418]: #414
#403 := [trans #755 #739]: #402
#693 := [monotonicity #403 #548]: #598
#597 := [trans #693 #697]: #582
#603 := [monotonicity #597]: #602
#698 := [trans #603 #605]: #602
#601 := [quant-inst #8 #63]: #593
#695 := [mp #601 #698]: #600
[unit-resolution #695 #87 #770]: false
unsat
beaa0a62fe76b86ad510bf8c2d69fe2ce8dbdc5f 310 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#15 := (f3 #13 #14)
#749 := (pattern #15)
#16 := 0::Int
#63 := -1::Int
#98 := (* -1::Int #14)
#95 := (* -1::Int #13)
#101 := (div #95 #98)
#252 := (* -1::Int #101)
#253 := (+ #15 #252)
#254 := (= #253 0::Int)
#26 := (div #13 #14)
#249 := (* -1::Int #26)
#250 := (+ #15 #249)
#251 := (= #250 0::Int)
#127 := (>= #13 0::Int)
#120 := (<= #14 0::Int)
#212 := (or #120 #127)
#213 := (not #212)
#116 := (<= #13 0::Int)
#210 := (or #116 #120)
#211 := (not #210)
#216 := (or #211 #213)
#255 := (ite #216 #251 #254)
#248 := (= #15 0::Int)
#18 := (= #14 0::Int)
#17 := (= #13 0::Int)
#19 := (or #17 #18)
#256 := (ite #19 #248 #255)
#750 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #749) #256)
#259 := (forall (vars (?v0 Int) (?v1 Int)) #256)
#753 := (iff #259 #750)
#751 := (iff #256 #256)
#752 := [refl]: #751
#754 := [quant-intro #752]: #753
#219 := (ite #216 #26 #101)
#222 := (ite #19 0::Int #219)
#225 := (= #15 #222)
#228 := (forall (vars (?v0 Int) (?v1 Int)) #225)
#260 := (iff #228 #259)
#257 := (iff #225 #256)
#258 := [rewrite]: #257
#261 := [quant-intro #258]: #260
#128 := (not #127)
#121 := (not #120)
#131 := (and #121 #128)
#117 := (not #116)
#124 := (and #117 #121)
#134 := (or #124 #131)
#137 := (ite #134 #26 #101)
#140 := (ite #19 0::Int #137)
#143 := (= #15 #140)
#146 := (forall (vars (?v0 Int) (?v1 Int)) #143)
#229 := (iff #146 #228)
#226 := (iff #143 #225)
#223 := (= #140 #222)
#220 := (= #137 #219)
#217 := (iff #134 #216)
#214 := (iff #131 #213)
#215 := [rewrite]: #214
#204 := (iff #124 #211)
#205 := [rewrite]: #204
#218 := [monotonicity #205 #215]: #217
#221 := [monotonicity #218]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [quant-intro #227]: #229
#208 := (~ #146 #146)
#206 := (~ #143 #143)
#207 := [refl]: #206
#209 := [nnf-pos #207]: #208
#28 := (- #14)
#27 := (- #13)
#29 := (div #27 #28)
#21 := (< 0::Int #14)
#23 := (< #13 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #13)
#22 := (and #20 #21)
#25 := (or #22 #24)
#30 := (ite #25 #26 #29)
#31 := (ite #19 0::Int #30)
#32 := (= #15 #31)
#33 := (forall (vars (?v0 Int) (?v1 Int)) #32)
#149 := (iff #33 #146)
#89 := (and #21 #23)
#92 := (or #22 #89)
#104 := (ite #92 #26 #101)
#107 := (ite #19 0::Int #104)
#110 := (= #15 #107)
#113 := (forall (vars (?v0 Int) (?v1 Int)) #110)
#147 := (iff #113 #146)
#144 := (iff #110 #143)
#141 := (= #107 #140)
#138 := (= #104 #137)
#135 := (iff #92 #134)
#132 := (iff #89 #131)
#129 := (iff #23 #128)
#130 := [rewrite]: #129
#122 := (iff #21 #121)
#123 := [rewrite]: #122
#133 := [monotonicity #123 #130]: #132
#125 := (iff #22 #124)
#118 := (iff #20 #117)
#119 := [rewrite]: #118
#126 := [monotonicity #119 #123]: #125
#136 := [monotonicity #126 #133]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [quant-intro #145]: #147
#114 := (iff #33 #113)
#111 := (iff #32 #110)
#108 := (= #31 #107)
#105 := (= #30 #104)
#102 := (= #29 #101)
#99 := (= #28 #98)
#100 := [rewrite]: #99
#96 := (= #27 #95)
#97 := [rewrite]: #96
#103 := [monotonicity #97 #100]: #102
#93 := (iff #25 #92)
#90 := (iff #24 #89)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#106 := [monotonicity #94 #103]: #105
#109 := [monotonicity #106]: #108
#112 := [monotonicity #109]: #111
#115 := [quant-intro #112]: #114
#150 := [trans #115 #148]: #149
#88 := [asserted]: #33
#151 := [mp #88 #150]: #146
#200 := [mp~ #151 #209]: #146
#231 := [mp #200 #230]: #228
#262 := [mp #231 #261]: #259
#755 := [mp #262 #754]: #750
#8 := 1::Int
#66 := (f3 1::Int -1::Int)
#69 := (= #66 -1::Int)
#82 := (not #69)
#9 := (- 1::Int)
#10 := (f3 1::Int #9)
#11 := (= #10 #9)
#12 := (not #11)
#85 := (iff #12 #82)
#72 := (= -1::Int #66)
#77 := (not #72)
#83 := (iff #77 #82)
#80 := (iff #72 #69)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#78 := (iff #12 #77)
#75 := (iff #11 #72)
#73 := (iff #69 #72)
#74 := [rewrite]: #73
#70 := (iff #11 #69)
#64 := (= #9 -1::Int)
#65 := [rewrite]: #64
#67 := (= #10 #66)
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68 #65]: #70
#76 := [trans #71 #74]: #75
#79 := [monotonicity #76]: #78
#86 := [trans #79 #84]: #85
#62 := [asserted]: #12
#87 := [mp #62 #86]: #82
#680 := (not #750)
#684 := (or #680 #69)
#336 := (* -1::Int -1::Int)
#420 := (* -1::Int 1::Int)
#421 := (div #420 #336)
#422 := (* -1::Int #421)
#413 := (+ #66 #422)
#424 := (= #413 0::Int)
#425 := (div 1::Int -1::Int)
#426 := (* -1::Int #425)
#423 := (+ #66 #426)
#427 := (= #423 0::Int)
#406 := (>= 1::Int 0::Int)
#741 := (<= -1::Int 0::Int)
#743 := (or #741 #406)
#400 := (not #743)
#530 := (<= 1::Int 0::Int)
#737 := (or #530 #741)
#411 := (not #737)
#412 := (or #411 #400)
#744 := (ite #412 #427 #424)
#745 := (= #66 0::Int)
#746 := (= -1::Int 0::Int)
#747 := (= 1::Int 0::Int)
#742 := (or #747 #746)
#748 := (ite #742 #745 #744)
#671 := (or #680 #748)
#665 := (iff #671 #684)
#664 := (iff #684 #684)
#674 := [rewrite]: #664
#590 := (iff #748 #69)
#578 := (ite false #745 #69)
#588 := (iff #578 #69)
#589 := [rewrite]: #588
#586 := (iff #748 #578)
#584 := (iff #744 #69)
#678 := (ite false #69 #69)
#567 := (iff #678 #69)
#582 := [rewrite]: #567
#679 := (iff #744 #678)
#681 := (iff #424 #69)
#702 := (+ 1::Int #66)
#550 := (= #702 0::Int)
#694 := (iff #550 #69)
#695 := [rewrite]: #694
#574 := (iff #424 #550)
#572 := (= #413 #702)
#705 := (+ #66 1::Int)
#707 := (= #705 #702)
#708 := [rewrite]: #707
#687 := (= #413 #705)
#688 := (= #422 1::Int)
#714 := (= #336 1::Int)
#711 := [rewrite]: #714
#685 := (= #422 #336)
#531 := (= #421 -1::Int)
#698 := (div -1::Int 1::Int)
#700 := (= #698 -1::Int)
#529 := [rewrite]: #700
#699 := (= #421 #698)
#691 := (= #420 -1::Int)
#692 := [rewrite]: #691
#693 := [monotonicity #692 #711]: #699
#532 := [trans #693 #529]: #531
#686 := [monotonicity #532]: #685
#689 := [trans #686 #711]: #688
#690 := [monotonicity #689]: #687
#573 := [trans #690 #708]: #572
#533 := [monotonicity #573]: #574
#583 := [trans #533 #695]: #681
#696 := (iff #427 #69)
#551 := (iff #427 #550)
#703 := (= #423 #702)
#706 := (= #423 #705)
#715 := (= #426 1::Int)
#428 := (= #426 #336)
#712 := (= #425 -1::Int)
#713 := [rewrite]: #712
#710 := [monotonicity #713]: #428
#704 := [trans #710 #711]: #715
#701 := [monotonicity #704]: #706
#709 := [trans #701 #708]: #703
#552 := [monotonicity #709]: #551
#697 := [trans #552 #695]: #696
#433 := (iff #412 false)
#399 := (or false false)
#724 := (iff #399 false)
#387 := [rewrite]: #724
#431 := (iff #412 #399)
#717 := (iff #400 false)
#1 := true
#374 := (not true)
#733 := (iff #374 false)
#736 := [rewrite]: #733
#716 := (iff #400 #374)
#441 := (iff #743 true)
#447 := (or true true)
#718 := (iff #447 true)
#719 := [rewrite]: #718
#448 := (iff #743 #447)
#445 := (iff #406 true)
#446 := [rewrite]: #445
#727 := (iff #741 true)
#728 := [rewrite]: #727
#342 := [monotonicity #728 #446]: #448
#442 := [trans #342 #719]: #441
#720 := [monotonicity #442]: #716
#721 := [trans #720 #736]: #717
#722 := (iff #411 false)
#375 := (iff #411 #374)
#732 := (iff #737 true)
#729 := (or false true)
#731 := (iff #729 true)
#369 := [rewrite]: #731
#730 := (iff #737 #729)
#390 := (iff #530 false)
#726 := [rewrite]: #390
#725 := [monotonicity #726 #728]: #730
#734 := [trans #725 #369]: #732
#735 := [monotonicity #734]: #375
#723 := [trans #735 #736]: #722
#432 := [monotonicity #723 #721]: #431
#434 := [trans #432 #387]: #433
#682 := [monotonicity #434 #697 #583]: #679
#585 := [trans #682 #582]: #584
#388 := (iff #742 false)
#740 := (iff #742 #399)
#403 := (iff #746 false)
#739 := [rewrite]: #403
#738 := (iff #747 false)
#398 := [rewrite]: #738
#383 := [monotonicity #398 #739]: #740
#389 := [trans #383 #387]: #388
#587 := [monotonicity #389 #585]: #586
#683 := [trans #587 #589]: #590
#662 := [monotonicity #683]: #665
#675 := [trans #662 #674]: #665
#673 := [quant-inst #8 #63]: #671
#676 := [mp #673 #675]: #684
[unit-resolution #676 #87 #755]: false
unsat
d7870bb48e209893f272c06c1d45c5a7c1765225 306 0
#2 := false
decl f3 :: (-> Int Int Int)
#16 := (:var 0 Int)
#15 := (:var 1 Int)
#17 := (f3 #15 #16)
#742 := (pattern #17)
#18 := 0::Int
#65 := -1::Int
#91 := (* -1::Int #16)
#88 := (* -1::Int #15)
#94 := (div #88 #91)
#245 := (* -1::Int #94)
#246 := (+ #17 #245)
#247 := (= #246 0::Int)
#28 := (div #15 #16)
#242 := (* -1::Int #28)
#243 := (+ #17 #242)
#244 := (= #243 0::Int)
#120 := (>= #15 0::Int)
#113 := (<= #16 0::Int)
#205 := (or #113 #120)
#206 := (not #205)
#109 := (<= #15 0::Int)
#203 := (or #109 #113)
#204 := (not #203)
#209 := (or #204 #206)
#248 := (ite #209 #244 #247)
#241 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#249 := (ite #21 #241 #248)
#743 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #742) #249)
#252 := (forall (vars (?v0 Int) (?v1 Int)) #249)
#746 := (iff #252 #743)
#744 := (iff #249 #249)
#745 := [refl]: #744
#747 := [quant-intro #745]: #746
#212 := (ite #209 #28 #94)
#215 := (ite #21 0::Int #212)
#218 := (= #17 #215)
#221 := (forall (vars (?v0 Int) (?v1 Int)) #218)
#253 := (iff #221 #252)
#250 := (iff #218 #249)
#251 := [rewrite]: #250
#254 := [quant-intro #251]: #253
#121 := (not #120)
#114 := (not #113)
#124 := (and #114 #121)
#110 := (not #109)
#117 := (and #110 #114)
#127 := (or #117 #124)
#130 := (ite #127 #28 #94)
#133 := (ite #21 0::Int #130)
#136 := (= #17 #133)
#139 := (forall (vars (?v0 Int) (?v1 Int)) #136)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#216 := (= #133 #215)
#213 := (= #130 #212)
#210 := (iff #127 #209)
#207 := (iff #124 #206)
#208 := [rewrite]: #207
#197 := (iff #117 #204)
#198 := [rewrite]: #197
#211 := [monotonicity #198 #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [monotonicity #217]: #219
#223 := [quant-intro #220]: #222
#201 := (~ #139 #139)
#199 := (~ #136 #136)
#200 := [refl]: #199
#202 := [nnf-pos #200]: #201
#30 := (- #16)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (ite #27 #28 #31)
#33 := (ite #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#142 := (iff #35 #139)
#81 := (and #23 #25)
#85 := (or #24 #81)
#97 := (ite #85 #28 #94)
#100 := (ite #21 0::Int #97)
#103 := (= #17 #100)
#106 := (forall (vars (?v0 Int) (?v1 Int)) #103)
#140 := (iff #106 #139)
#137 := (iff #103 #136)
#134 := (= #100 #133)
#131 := (= #97 #130)
#128 := (iff #85 #127)
#125 := (iff #81 #124)
#122 := (iff #25 #121)
#123 := [rewrite]: #122
#115 := (iff #23 #114)
#116 := [rewrite]: #115
#126 := [monotonicity #116 #123]: #125
#118 := (iff #24 #117)
#111 := (iff #22 #110)
#112 := [rewrite]: #111
#119 := [monotonicity #112 #116]: #118
#129 := [monotonicity #119 #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [quant-intro #138]: #140
#107 := (iff #35 #106)
#104 := (iff #34 #103)
#101 := (= #33 #100)
#98 := (= #32 #97)
#95 := (= #31 #94)
#92 := (= #30 #91)
#93 := [rewrite]: #92
#89 := (= #29 #88)
#90 := [rewrite]: #89
#96 := [monotonicity #90 #93]: #95
#86 := (iff #27 #85)
#83 := (iff #26 #81)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#99 := [monotonicity #87 #96]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#108 := [quant-intro #105]: #107
#143 := [trans #108 #141]: #142
#80 := [asserted]: #35
#144 := [mp #80 #143]: #139
#193 := [mp~ #144 #202]: #139
#224 := [mp #193 #223]: #221
#255 := [mp #224 #254]: #252
#748 := [mp #255 #747]: #743
#71 := -3::Int
#8 := 3::Int
#68 := (f3 3::Int -1::Int)
#74 := (= #68 -3::Int)
#77 := (not #74)
#12 := (- 3::Int)
#9 := 1::Int
#10 := (- 1::Int)
#11 := (f3 3::Int #10)
#13 := (= #11 #12)
#14 := (not #13)
#78 := (iff #14 #77)
#75 := (iff #13 #74)
#72 := (= #12 -3::Int)
#73 := [rewrite]: #72
#69 := (= #11 #68)
#66 := (= #10 -1::Int)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [monotonicity #70 #73]: #75
#79 := [monotonicity #76]: #78
#64 := [asserted]: #14
#82 := [mp #64 #79]: #77
#666 := (not #743)
#658 := (or #666 #74)
#329 := (* -1::Int -1::Int)
#413 := (* -1::Int 3::Int)
#414 := (div #413 #329)
#415 := (* -1::Int #414)
#406 := (+ #68 #415)
#417 := (= #406 0::Int)
#418 := (div 3::Int -1::Int)
#419 := (* -1::Int #418)
#416 := (+ #68 #419)
#420 := (= #416 0::Int)
#399 := (>= 3::Int 0::Int)
#734 := (<= -1::Int 0::Int)
#736 := (or #734 #399)
#393 := (not #736)
#523 := (<= 3::Int 0::Int)
#730 := (or #523 #734)
#404 := (not #730)
#405 := (or #404 #393)
#737 := (ite #405 #420 #417)
#738 := (= #68 0::Int)
#739 := (= -1::Int 0::Int)
#740 := (= 3::Int 0::Int)
#735 := (or #740 #739)
#741 := (ite #735 #738 #737)
#655 := (or #666 #741)
#667 := (iff #655 #658)
#669 := (iff #658 #658)
#665 := [rewrite]: #669
#677 := (iff #741 #74)
#581 := (ite false #738 #74)
#676 := (iff #581 #74)
#673 := [rewrite]: #676
#582 := (iff #741 #581)
#579 := (iff #737 #74)
#560 := (ite false #74 #74)
#578 := (iff #560 #74)
#571 := [rewrite]: #578
#575 := (iff #737 #560)
#672 := (iff #417 #74)
#700 := (+ 3::Int #68)
#544 := (= #700 0::Int)
#688 := (iff #544 #74)
#689 := [rewrite]: #688
#576 := (iff #417 #544)
#526 := (= #406 #700)
#699 := (+ #68 3::Int)
#701 := (= #699 #700)
#696 := [rewrite]: #701
#566 := (= #406 #699)
#683 := (= #415 3::Int)
#421 := (* -1::Int -3::Int)
#704 := (= #421 3::Int)
#708 := [rewrite]: #704
#682 := (= #415 #421)
#679 := (= #414 -3::Int)
#693 := (div -3::Int 1::Int)
#525 := (= #693 -3::Int)
#678 := [rewrite]: #525
#522 := (= #414 #693)
#692 := (= #329 1::Int)
#686 := [rewrite]: #692
#685 := (= #413 -3::Int)
#691 := [rewrite]: #685
#524 := [monotonicity #691 #686]: #522
#681 := [trans #524 #678]: #679
#680 := [monotonicity #681]: #682
#565 := [trans #680 #708]: #683
#567 := [monotonicity #565]: #566
#674 := [trans #567 #696]: #526
#671 := [monotonicity #674]: #576
#675 := [trans #671 #689]: #672
#690 := (iff #420 #74)
#545 := (iff #420 #544)
#702 := (= #416 #700)
#694 := (= #416 #699)
#697 := (= #419 3::Int)
#703 := (= #419 #421)
#705 := (= #418 -3::Int)
#706 := [rewrite]: #705
#707 := [monotonicity #706]: #703
#698 := [trans #707 #708]: #697
#695 := [monotonicity #698]: #694
#543 := [trans #695 #696]: #702
#687 := [monotonicity #543]: #545
#684 := [trans #687 #689]: #690
#426 := (iff #405 false)
#392 := (or false false)
#717 := (iff #392 false)
#380 := [rewrite]: #717
#424 := (iff #405 #392)
#710 := (iff #393 false)
#1 := true
#367 := (not true)
#726 := (iff #367 false)
#729 := [rewrite]: #726
#709 := (iff #393 #367)
#434 := (iff #736 true)
#440 := (or true true)
#711 := (iff #440 true)
#712 := [rewrite]: #711
#441 := (iff #736 #440)
#438 := (iff #399 true)
#439 := [rewrite]: #438
#720 := (iff #734 true)
#721 := [rewrite]: #720
#335 := [monotonicity #721 #439]: #441
#435 := [trans #335 #712]: #434
#713 := [monotonicity #435]: #709
#714 := [trans #713 #729]: #710
#715 := (iff #404 false)
#368 := (iff #404 #367)
#725 := (iff #730 true)
#722 := (or false true)
#724 := (iff #722 true)
#362 := [rewrite]: #724
#723 := (iff #730 #722)
#383 := (iff #523 false)
#719 := [rewrite]: #383
#718 := [monotonicity #719 #721]: #723
#727 := [trans #718 #362]: #725
#728 := [monotonicity #727]: #368
#716 := [trans #728 #729]: #715
#425 := [monotonicity #716 #714]: #424
#427 := [trans #425 #380]: #426
#577 := [monotonicity #427 #684 #675]: #575
#580 := [trans #577 #571]: #579
#381 := (iff #735 false)
#733 := (iff #735 #392)
#396 := (iff #739 false)
#732 := [rewrite]: #396
#731 := (iff #740 false)
#391 := [rewrite]: #731
#376 := [monotonicity #391 #732]: #733
#382 := [trans #376 #380]: #381
#583 := [monotonicity #382 #580]: #582
#664 := [trans #583 #673]: #677
#668 := [monotonicity #664]: #667
#670 := [trans #668 #665]: #667
#657 := [quant-inst #8 #65]: #655
#659 := [mp #657 #670]: #658
[unit-resolution #659 #82 #748]: false
unsat
5ee37b7887579207f198e2d96f811691f176d723 350 0
#2 := false
#18 := 0::Int
#9 := 1::Int
decl f4 :: Int
#8 := f4
#65 := -1::Int
#71 := (* -1::Int f4)
#714 := (div #71 1::Int)
#712 := (* -1::Int #714)
decl f3 :: (-> Int Int Int)
#68 := (f3 f4 -1::Int)
#717 := (+ #68 #712)
#691 := (<= #717 0::Int)
#708 := (= #717 0::Int)
#744 := (= f4 0::Int)
#574 := (not #744)
#739 := (<= f4 0::Int)
#615 := [hypothesis]: #744
#595 := (or #574 #739)
#541 := [th-lemma arith triangle-eq]: #595
#596 := [unit-resolution #541 #615]: #739
#80 := (+ f4 #68)
#338 := (<= #80 0::Int)
#577 := (not #338)
#422 := (>= #80 0::Int)
#743 := (>= f4 0::Int)
#684 := (not #708)
#689 := (>= #717 0::Int)
#621 := (not #689)
#630 := (not #422)
#631 := [hypothesis]: #630
#622 := (or #621 #422)
#629 := [hypothesis]: #689
#665 := (+ f4 #714)
#662 := (>= #665 0::Int)
#672 := (= #665 0::Int)
#1 := true
#62 := [true-axiom]: true
#632 := (or false #672)
#633 := [th-lemma arith]: #632
#628 := [unit-resolution #633 #62]: #672
#634 := (not #672)
#620 := (or #634 #662)
#616 := [th-lemma arith triangle-eq]: #620
#617 := [unit-resolution #616 #628]: #662
#618 := [th-lemma arith farkas 1 -1 1 #617 #631 #629]: false
#623 := [lemma #618]: #622
#661 := [unit-resolution #623 #631]: #621
#624 := (or #684 #689)
#619 := [th-lemma arith triangle-eq]: #624
#625 := [unit-resolution #619 #661]: #684
#599 := (or #744 #708)
#748 := (= #68 0::Int)
#696 := (ite #744 #748 #708)
#16 := (:var 0 Int)
#15 := (:var 1 Int)
#17 := (f3 #15 #16)
#751 := (pattern #17)
#100 := (* -1::Int #16)
#97 := (* -1::Int #15)
#103 := (div #97 #100)
#254 := (* -1::Int #103)
#255 := (+ #17 #254)
#256 := (= #255 0::Int)
#28 := (div #15 #16)
#251 := (* -1::Int #28)
#252 := (+ #17 #251)
#253 := (= #252 0::Int)
#129 := (>= #15 0::Int)
#122 := (<= #16 0::Int)
#214 := (or #122 #129)
#215 := (not #214)
#118 := (<= #15 0::Int)
#212 := (or #118 #122)
#213 := (not #212)
#218 := (or #213 #215)
#257 := (ite #218 #253 #256)
#250 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#258 := (ite #21 #250 #257)
#752 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #751) #258)
#261 := (forall (vars (?v0 Int) (?v1 Int)) #258)
#755 := (iff #261 #752)
#753 := (iff #258 #258)
#754 := [refl]: #753
#756 := [quant-intro #754]: #755
#221 := (ite #218 #28 #103)
#224 := (ite #21 0::Int #221)
#227 := (= #17 #224)
#230 := (forall (vars (?v0 Int) (?v1 Int)) #227)
#262 := (iff #230 #261)
#259 := (iff #227 #258)
#260 := [rewrite]: #259
#263 := [quant-intro #260]: #262
#130 := (not #129)
#123 := (not #122)
#133 := (and #123 #130)
#119 := (not #118)
#126 := (and #119 #123)
#136 := (or #126 #133)
#139 := (ite #136 #28 #103)
#142 := (ite #21 0::Int #139)
#145 := (= #17 #142)
#148 := (forall (vars (?v0 Int) (?v1 Int)) #145)
#231 := (iff #148 #230)
#228 := (iff #145 #227)
#225 := (= #142 #224)
#222 := (= #139 #221)
#219 := (iff #136 #218)
#216 := (iff #133 #215)
#217 := [rewrite]: #216
#206 := (iff #126 #213)
#207 := [rewrite]: #206
#220 := [monotonicity #207 #217]: #219
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#210 := (~ #148 #148)
#208 := (~ #145 #145)
#209 := [refl]: #208
#211 := [nnf-pos #209]: #210
#30 := (- #16)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (ite #27 #28 #31)
#33 := (ite #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#151 := (iff #35 #148)
#91 := (and #23 #25)
#94 := (or #24 #91)
#106 := (ite #94 #28 #103)
#109 := (ite #21 0::Int #106)
#112 := (= #17 #109)
#115 := (forall (vars (?v0 Int) (?v1 Int)) #112)
#149 := (iff #115 #148)
#146 := (iff #112 #145)
#143 := (= #109 #142)
#140 := (= #106 #139)
#137 := (iff #94 #136)
#134 := (iff #91 #133)
#131 := (iff #25 #130)
#132 := [rewrite]: #131
#124 := (iff #23 #123)
#125 := [rewrite]: #124
#135 := [monotonicity #125 #132]: #134
#127 := (iff #24 #126)
#120 := (iff #22 #119)
#121 := [rewrite]: #120
#128 := [monotonicity #121 #125]: #127
#138 := [monotonicity #128 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#116 := (iff #35 #115)
#113 := (iff #34 #112)
#110 := (= #33 #109)
#107 := (= #32 #106)
#104 := (= #31 #103)
#101 := (= #30 #100)
#102 := [rewrite]: #101
#98 := (= #29 #97)
#99 := [rewrite]: #98
#105 := [monotonicity #99 #102]: #104
#95 := (iff #27 #94)
#92 := (iff #26 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#108 := [monotonicity #96 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [quant-intro #114]: #116
#152 := [trans #117 #150]: #151
#90 := [asserted]: #35
#153 := [mp #90 #152]: #148
#202 := [mp~ #153 #211]: #148
#233 := [mp #202 #232]: #230
#264 := [mp #233 #263]: #261
#757 := [mp #264 #756]: #752
#699 := (not #752)
#693 := (or #699 #696)
#423 := (* -1::Int -1::Int)
#424 := (div #71 #423)
#415 := (* -1::Int #424)
#426 := (+ #68 #415)
#427 := (= #426 0::Int)
#428 := (div f4 -1::Int)
#425 := (* -1::Int #428)
#429 := (+ #68 #425)
#408 := (= #429 0::Int)
#745 := (<= -1::Int 0::Int)
#402 := (or #745 #743)
#532 := (not #402)
#413 := (or #739 #745)
#414 := (not #413)
#746 := (or #414 #532)
#747 := (ite #746 #408 #427)
#749 := (= -1::Int 0::Int)
#750 := (or #744 #749)
#740 := (ite #750 #748 #747)
#694 := (or #699 #740)
#701 := (iff #694 #693)
#702 := (iff #693 #693)
#531 := [rewrite]: #702
#697 := (iff #740 #696)
#553 := (iff #747 #708)
#709 := (ite false #408 #708)
#711 := (iff #709 #708)
#552 := [rewrite]: #711
#710 := (iff #747 #709)
#703 := (iff #427 #708)
#706 := (= #426 #717)
#716 := (= #415 #712)
#715 := (= #424 #714)
#435 := (= #423 1::Int)
#436 := [rewrite]: #435
#430 := [monotonicity #436]: #715
#713 := [monotonicity #430]: #716
#707 := [monotonicity #713]: #706
#704 := [monotonicity #707]: #703
#433 := (iff #746 false)
#444 := (or false false)
#719 := (iff #444 false)
#723 := [rewrite]: #719
#718 := (iff #746 #444)
#721 := (iff #532 false)
#371 := (not true)
#376 := (iff #371 false)
#377 := [rewrite]: #376
#344 := (iff #532 #371)
#449 := (iff #402 true)
#738 := (or true #743)
#447 := (iff #738 true)
#448 := [rewrite]: #447
#724 := (iff #402 #738)
#391 := (iff #745 true)
#392 := [rewrite]: #391
#725 := [monotonicity #392]: #724
#450 := [trans #725 #448]: #449
#720 := [monotonicity #450]: #344
#443 := [trans #720 #377]: #721
#737 := (iff #414 false)
#734 := (iff #414 #371)
#727 := (iff #413 true)
#728 := (or #739 true)
#731 := (iff #728 true)
#732 := [rewrite]: #731
#729 := (iff #413 #728)
#730 := [monotonicity #392]: #729
#733 := [trans #730 #732]: #727
#736 := [monotonicity #733]: #734
#735 := [trans #736 #377]: #737
#722 := [monotonicity #735 #443]: #718
#434 := [trans #722 #723]: #433
#705 := [monotonicity #434 #704]: #710
#554 := [trans #705 #552]: #553
#389 := (iff #750 #744)
#741 := (or #744 false)
#385 := (iff #741 #744)
#726 := [rewrite]: #385
#401 := (iff #750 #741)
#400 := (iff #749 false)
#405 := [rewrite]: #400
#742 := [monotonicity #405]: #401
#390 := [trans #742 #726]: #389
#698 := [monotonicity #390 #554]: #697
#695 := [monotonicity #698]: #701
#533 := [trans #695 #531]: #701
#700 := [quant-inst #8 #65]: #694
#534 := [mp #700 #533]: #693
#598 := [unit-resolution #534 #757]: #696
#692 := (not #696)
#535 := (or #692 #744 #708)
#683 := [def-axiom]: #535
#600 := [unit-resolution #683 #598]: #599
#493 := [unit-resolution #600 #625]: #744
#604 := (or #574 #743)
#605 := [th-lemma arith triangle-eq]: #604
#606 := [unit-resolution #605 #493]: #743
#688 := (>= #68 0::Int)
#611 := (or #574 #748)
#575 := (or #692 #574 #748)
#576 := [def-axiom]: #575
#607 := [unit-resolution #576 #598]: #611
#608 := [unit-resolution #607 #493]: #748
#585 := (not #748)
#609 := (or #585 #688)
#612 := [th-lemma arith triangle-eq]: #609
#613 := [unit-resolution #612 #608]: #688
#614 := [th-lemma arith farkas 1 -1 1 #613 #631 #606]: false
#610 := [lemma #614]: #422
#597 := (or #577 #630)
#81 := (= #80 0::Int)
#84 := (not #81)
#12 := (- f4)
#10 := (- 1::Int)
#11 := (f3 f4 #10)
#13 := (= #11 #12)
#14 := (not #13)
#87 := (iff #14 #84)
#74 := (= #68 #71)
#77 := (not #74)
#85 := (iff #77 #84)
#82 := (iff #74 #81)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#78 := (iff #14 #77)
#75 := (iff #13 #74)
#72 := (= #12 #71)
#73 := [rewrite]: #72
#69 := (= #11 #68)
#66 := (= #10 -1::Int)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [monotonicity #70 #73]: #75
#79 := [monotonicity #76]: #78
#88 := [trans #79 #86]: #87
#64 := [asserted]: #14
#89 := [mp #64 #88]: #84
#601 := (or #81 #577 #630)
#602 := [th-lemma arith triangle-eq]: #601
#603 := [unit-resolution #602 #89]: #597
#571 := [unit-resolution #603 #610]: #577
#687 := (<= #68 0::Int)
#578 := [unit-resolution #607 #615]: #748
#537 := (or #585 #687)
#568 := [th-lemma arith triangle-eq]: #537
#570 := [unit-resolution #568 #578]: #687
#572 := [th-lemma arith farkas 1 -1 1 #570 #571 #596]: false
#579 := [lemma #572]: #574
#582 := [unit-resolution #600 #579]: #708
#583 := (or #684 #691)
#593 := [th-lemma arith triangle-eq]: #583
#573 := [unit-resolution #593 #582]: #691
#581 := (<= #665 0::Int)
#594 := (or #634 #581)
#549 := [th-lemma arith triangle-eq]: #594
#550 := [unit-resolution #549 #628]: #581
[th-lemma arith farkas 1 -1 1 #550 #571 #573]: false
unsat
8db711c99a743e7c5b35063fc01bbf7e9119b29e 292 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#15 := (f3 #13 #14)
#750 := (pattern #15)
#8 := 0::Int
#88 := -1::Int
#92 := (* -1::Int #14)
#89 := (* -1::Int #13)
#95 := (div #89 #92)
#252 := (* -1::Int #95)
#253 := (+ #15 #252)
#254 := (= #253 0::Int)
#25 := (div #13 #14)
#249 := (* -1::Int #25)
#250 := (+ #15 #249)
#251 := (= #250 0::Int)
#127 := (>= #13 0::Int)
#120 := (<= #14 0::Int)
#212 := (or #120 #127)
#213 := (not #212)
#116 := (<= #13 0::Int)
#210 := (or #116 #120)
#211 := (not #210)
#216 := (or #211 #213)
#255 := (ite #216 #251 #254)
#248 := (= #15 0::Int)
#17 := (= #14 0::Int)
#16 := (= #13 0::Int)
#18 := (or #16 #17)
#256 := (ite #18 #248 #255)
#751 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #750) #256)
#259 := (forall (vars (?v0 Int) (?v1 Int)) #256)
#754 := (iff #259 #751)
#752 := (iff #256 #256)
#753 := [refl]: #752
#755 := [quant-intro #753]: #754
#219 := (ite #216 #25 #95)
#222 := (ite #18 0::Int #219)
#225 := (= #15 #222)
#228 := (forall (vars (?v0 Int) (?v1 Int)) #225)
#260 := (iff #228 #259)
#257 := (iff #225 #256)
#258 := [rewrite]: #257
#261 := [quant-intro #258]: #260
#128 := (not #127)
#121 := (not #120)
#131 := (and #121 #128)
#117 := (not #116)
#124 := (and #117 #121)
#134 := (or #124 #131)
#137 := (ite #134 #25 #95)
#140 := (ite #18 0::Int #137)
#143 := (= #15 #140)
#146 := (forall (vars (?v0 Int) (?v1 Int)) #143)
#229 := (iff #146 #228)
#226 := (iff #143 #225)
#223 := (= #140 #222)
#220 := (= #137 #219)
#217 := (iff #134 #216)
#214 := (iff #131 #213)
#215 := [rewrite]: #214
#204 := (iff #124 #211)
#205 := [rewrite]: #204
#218 := [monotonicity #205 #215]: #217
#221 := [monotonicity #218]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [quant-intro #227]: #229
#208 := (~ #146 #146)
#206 := (~ #143 #143)
#207 := [refl]: #206
#209 := [nnf-pos #207]: #208
#27 := (- #14)
#26 := (- #13)
#28 := (div #26 #27)
#20 := (< 0::Int #14)
#22 := (< #13 0::Int)
#23 := (and #22 #20)
#19 := (< 0::Int #13)
#21 := (and #19 #20)
#24 := (or #21 #23)
#29 := (ite #24 #25 #28)
#30 := (ite #18 0::Int #29)
#31 := (= #15 #30)
#32 := (forall (vars (?v0 Int) (?v1 Int)) #31)
#149 := (iff #32 #146)
#82 := (and #20 #22)
#85 := (or #21 #82)
#98 := (ite #85 #25 #95)
#76 := (= 0::Int #14)
#73 := (= 0::Int #13)
#79 := (or #73 #76)
#101 := (ite #79 0::Int #98)
#104 := (= #15 #101)
#107 := (forall (vars (?v0 Int) (?v1 Int)) #104)
#147 := (iff #107 #146)
#144 := (iff #104 #143)
#141 := (= #101 #140)
#138 := (= #98 #137)
#135 := (iff #85 #134)
#132 := (iff #82 #131)
#129 := (iff #22 #128)
#130 := [rewrite]: #129
#122 := (iff #20 #121)
#123 := [rewrite]: #122
#133 := [monotonicity #123 #130]: #132
#125 := (iff #21 #124)
#118 := (iff #19 #117)
#119 := [rewrite]: #118
#126 := [monotonicity #119 #123]: #125
#136 := [monotonicity #126 #133]: #135
#139 := [monotonicity #136]: #138
#114 := (iff #79 #18)
#112 := (iff #76 #17)
#113 := [rewrite]: #112
#110 := (iff #73 #16)
#111 := [rewrite]: #110
#115 := [monotonicity #111 #113]: #114
#142 := [monotonicity #115 #139]: #141
#145 := [monotonicity #142]: #144
#148 := [quant-intro #145]: #147
#108 := (iff #32 #107)
#105 := (iff #31 #104)
#102 := (= #30 #101)
#99 := (= #29 #98)
#96 := (= #28 #95)
#93 := (= #27 #92)
#94 := [rewrite]: #93
#90 := (= #26 #89)
#91 := [rewrite]: #90
#97 := [monotonicity #91 #94]: #96
#86 := (iff #24 #85)
#83 := (iff #23 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#100 := [monotonicity #87 #97]: #99
#80 := (iff #18 #79)
#77 := (iff #17 #76)
#78 := [rewrite]: #77
#74 := (iff #16 #73)
#75 := [rewrite]: #74
#81 := [monotonicity #75 #78]: #80
#103 := [monotonicity #81 #100]: #102
#106 := [monotonicity #103]: #105
#109 := [quant-intro #106]: #108
#150 := [trans #109 #148]: #149
#72 := [asserted]: #32
#151 := [mp #72 #150]: #146
#200 := [mp~ #151 #209]: #146
#231 := [mp #200 #230]: #228
#262 := [mp #231 #261]: #259
#756 := [mp #262 #755]: #751
#9 := 3::Int
#10 := (f3 0::Int 3::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#61 := [asserted]: #12
#585 := (not #751)
#586 := (or #585 #11)
#336 := (* -1::Int 3::Int)
#421 := (* -1::Int 0::Int)
#422 := (div #421 #336)
#423 := (* -1::Int #422)
#414 := (+ #10 #423)
#425 := (= #414 0::Int)
#426 := (div 0::Int 3::Int)
#354 := (* -1::Int #426)
#427 := (+ #10 #354)
#424 := (= #427 0::Int)
#428 := (>= 0::Int 0::Int)
#407 := (<= 3::Int 0::Int)
#742 := (or #407 #428)
#744 := (not #742)
#401 := (<= 0::Int 0::Int)
#531 := (or #401 #407)
#738 := (not #531)
#412 := (or #738 #744)
#413 := (ite #412 #424 #425)
#745 := (= 3::Int 0::Int)
#746 := (= 0::Int 0::Int)
#747 := (or #746 #745)
#748 := (ite #747 #11 #413)
#579 := (or #585 #748)
#588 := (iff #579 #586)
#590 := (iff #586 #586)
#591 := [rewrite]: #590
#568 := (iff #748 #11)
#1 := true
#682 := (ite true #11 #11)
#680 := (iff #682 #11)
#683 := [rewrite]: #680
#584 := (iff #748 #682)
#575 := (iff #413 #11)
#690 := (ite false #11 #11)
#573 := (iff #690 #11)
#574 := [rewrite]: #573
#688 := (iff #413 #690)
#687 := (iff #425 #11)
#533 := (= #414 #10)
#716 := (+ #10 0::Int)
#707 := (= #716 #10)
#702 := [rewrite]: #707
#530 := (= #414 #716)
#694 := (= #423 0::Int)
#429 := (= #421 0::Int)
#711 := [rewrite]: #429
#699 := (= #423 #421)
#692 := (= #422 0::Int)
#710 := -3::Int
#553 := (div 0::Int -3::Int)
#697 := (= #553 0::Int)
#698 := [rewrite]: #697
#695 := (= #422 #553)
#551 := (= #336 -3::Int)
#552 := [rewrite]: #551
#696 := [monotonicity #711 #552]: #695
#693 := [trans #696 #698]: #692
#700 := [monotonicity #693]: #699
#701 := [trans #700 #711]: #694
#532 := [monotonicity #701]: #530
#686 := [trans #532 #702]: #533
#689 := [monotonicity #686]: #687
#709 := (iff #424 #11)
#703 := (= #427 #10)
#705 := (= #427 #716)
#715 := (= #354 0::Int)
#713 := (= #354 #421)
#434 := (= #426 0::Int)
#435 := [rewrite]: #434
#714 := [monotonicity #435]: #713
#712 := [trans #714 #711]: #715
#706 := [monotonicity #712]: #705
#708 := [trans #706 #702]: #703
#704 := [monotonicity #708]: #709
#432 := (iff #412 false)
#443 := (or false false)
#718 := (iff #443 false)
#722 := [rewrite]: #718
#717 := (iff #412 #443)
#720 := (iff #744 false)
#726 := (not true)
#733 := (iff #726 false)
#735 := [rewrite]: #733
#342 := (iff #744 #726)
#448 := (iff #742 true)
#737 := (or false true)
#446 := (iff #737 true)
#447 := [rewrite]: #446
#723 := (iff #742 #737)
#736 := (iff #428 true)
#734 := [rewrite]: #736
#391 := (iff #407 false)
#727 := [rewrite]: #391
#724 := [monotonicity #727 #734]: #723
#449 := [trans #724 #447]: #448
#719 := [monotonicity #449]: #342
#442 := [trans #719 #735]: #720
#375 := (iff #738 false)
#732 := (iff #738 #726)
#730 := (iff #531 true)
#404 := (or true false)
#741 := (iff #404 true)
#384 := [rewrite]: #741
#728 := (iff #531 #404)
#389 := (iff #401 true)
#390 := [rewrite]: #389
#729 := [monotonicity #390 #727]: #728
#731 := [trans #729 #384]: #730
#370 := [monotonicity #731]: #732
#376 := [trans #370 #735]: #375
#721 := [monotonicity #376 #442]: #717
#433 := [trans #721 #722]: #432
#691 := [monotonicity #433 #704 #689]: #688
#534 := [trans #691 #574]: #575
#725 := (iff #747 true)
#740 := (iff #747 #404)
#739 := (iff #745 false)
#399 := [rewrite]: #739
#743 := (iff #746 true)
#749 := [rewrite]: #743
#400 := [monotonicity #749 #399]: #740
#388 := [trans #400 #384]: #725
#679 := [monotonicity #388 #534]: #584
#583 := [trans #679 #683]: #568
#589 := [monotonicity #583]: #588
#684 := [trans #589 #591]: #588
#587 := [quant-inst #8 #9]: #579
#681 := [mp #587 #684]: #586
[unit-resolution #681 #61 #756]: false
unsat
6aeb136b7e9b0d9bd350f376d5db91cb7cdd5fa1 317 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#16 := (f3 #14 #15)
#766 := (pattern #16)
#8 := 0::Int
#104 := -1::Int
#108 := (* -1::Int #15)
#105 := (* -1::Int #14)
#111 := (div #105 #108)
#268 := (* -1::Int #111)
#269 := (+ #16 #268)
#270 := (= #269 0::Int)
#26 := (div #14 #15)
#265 := (* -1::Int #26)
#266 := (+ #16 #265)
#267 := (= #266 0::Int)
#143 := (>= #14 0::Int)
#136 := (<= #15 0::Int)
#228 := (or #136 #143)
#229 := (not #228)
#132 := (<= #14 0::Int)
#226 := (or #132 #136)
#227 := (not #226)
#232 := (or #227 #229)
#271 := (ite #232 #267 #270)
#264 := (= #16 0::Int)
#18 := (= #15 0::Int)
#17 := (= #14 0::Int)
#19 := (or #17 #18)
#272 := (ite #19 #264 #271)
#767 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #766) #272)
#275 := (forall (vars (?v0 Int) (?v1 Int)) #272)
#770 := (iff #275 #767)
#768 := (iff #272 #272)
#769 := [refl]: #768
#771 := [quant-intro #769]: #770
#235 := (ite #232 #26 #111)
#238 := (ite #19 0::Int #235)
#241 := (= #16 #238)
#244 := (forall (vars (?v0 Int) (?v1 Int)) #241)
#276 := (iff #244 #275)
#273 := (iff #241 #272)
#274 := [rewrite]: #273
#277 := [quant-intro #274]: #276
#144 := (not #143)
#137 := (not #136)
#147 := (and #137 #144)
#133 := (not #132)
#140 := (and #133 #137)
#150 := (or #140 #147)
#153 := (ite #150 #26 #111)
#156 := (ite #19 0::Int #153)
#159 := (= #16 #156)
#162 := (forall (vars (?v0 Int) (?v1 Int)) #159)
#245 := (iff #162 #244)
#242 := (iff #159 #241)
#239 := (= #156 #238)
#236 := (= #153 #235)
#233 := (iff #150 #232)
#230 := (iff #147 #229)
#231 := [rewrite]: #230
#220 := (iff #140 #227)
#221 := [rewrite]: #220
#234 := [monotonicity #221 #231]: #233
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [quant-intro #243]: #245
#224 := (~ #162 #162)
#222 := (~ #159 #159)
#223 := [refl]: #222
#225 := [nnf-pos #223]: #224
#28 := (- #15)
#27 := (- #14)
#29 := (div #27 #28)
#21 := (< 0::Int #15)
#23 := (< #14 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #14)
#22 := (and #20 #21)
#25 := (or #22 #24)
#30 := (ite #25 #26 #29)
#31 := (ite #19 0::Int #30)
#32 := (= #16 #31)
#33 := (forall (vars (?v0 Int) (?v1 Int)) #32)
#165 := (iff #33 #162)
#98 := (and #21 #23)
#101 := (or #22 #98)
#114 := (ite #101 #26 #111)
#92 := (= 0::Int #15)
#89 := (= 0::Int #14)
#95 := (or #89 #92)
#117 := (ite #95 0::Int #114)
#120 := (= #16 #117)
#123 := (forall (vars (?v0 Int) (?v1 Int)) #120)
#163 := (iff #123 #162)
#160 := (iff #120 #159)
#157 := (= #117 #156)
#154 := (= #114 #153)
#151 := (iff #101 #150)
#148 := (iff #98 #147)
#145 := (iff #23 #144)
#146 := [rewrite]: #145
#138 := (iff #21 #137)
#139 := [rewrite]: #138
#149 := [monotonicity #139 #146]: #148
#141 := (iff #22 #140)
#134 := (iff #20 #133)
#135 := [rewrite]: #134
#142 := [monotonicity #135 #139]: #141
#152 := [monotonicity #142 #149]: #151
#155 := [monotonicity #152]: #154
#130 := (iff #95 #19)
#128 := (iff #92 #18)
#129 := [rewrite]: #128
#126 := (iff #89 #17)
#127 := [rewrite]: #126
#131 := [monotonicity #127 #129]: #130
#158 := [monotonicity #131 #155]: #157
#161 := [monotonicity #158]: #160
#164 := [quant-intro #161]: #163
#124 := (iff #33 #123)
#121 := (iff #32 #120)
#118 := (= #31 #117)
#115 := (= #30 #114)
#112 := (= #29 #111)
#109 := (= #28 #108)
#110 := [rewrite]: #109
#106 := (= #27 #105)
#107 := [rewrite]: #106
#113 := [monotonicity #107 #110]: #112
#102 := (iff #25 #101)
#99 := (iff #24 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#116 := [monotonicity #103 #113]: #115
#96 := (iff #19 #95)
#93 := (iff #18 #92)
#94 := [rewrite]: #93
#90 := (iff #17 #89)
#91 := [rewrite]: #90
#97 := [monotonicity #91 #94]: #96
#119 := [monotonicity #97 #116]: #118
#122 := [monotonicity #119]: #121
#125 := [quant-intro #122]: #124
#166 := [trans #125 #164]: #165
#88 := [asserted]: #33
#167 := [mp #88 #166]: #162
#216 := [mp~ #167 #225]: #162
#247 := [mp #216 #246]: #244
#278 := [mp #247 #277]: #275
#772 := [mp #278 #771]: #767
#63 := -3::Int
#66 := (f3 0::Int -3::Int)
#69 := (= #66 0::Int)
#82 := (not #69)
#9 := 3::Int
#10 := (- 3::Int)
#11 := (f3 0::Int #10)
#12 := (= #11 0::Int)
#13 := (not #12)
#85 := (iff #13 #82)
#72 := (= 0::Int #66)
#77 := (not #72)
#83 := (iff #77 #82)
#80 := (iff #72 #69)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#78 := (iff #13 #77)
#75 := (iff #12 #72)
#73 := (iff #69 #72)
#74 := [rewrite]: #73
#70 := (iff #12 #69)
#67 := (= #11 #66)
#64 := (= #10 -3::Int)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#76 := [trans #71 #74]: #75
#79 := [monotonicity #76]: #78
#86 := [trans #79 #84]: #85
#62 := [asserted]: #13
#87 := [mp #62 #86]: #82
#599 := (not #767)
#601 := (or #599 #69)
#352 := (* -1::Int -3::Int)
#437 := (* -1::Int 0::Int)
#438 := (div #437 #352)
#439 := (* -1::Int #438)
#430 := (+ #66 #439)
#441 := (= #430 0::Int)
#442 := (div 0::Int -3::Int)
#370 := (* -1::Int #442)
#443 := (+ #66 #370)
#440 := (= #443 0::Int)
#444 := (>= 0::Int 0::Int)
#423 := (<= -3::Int 0::Int)
#758 := (or #423 #444)
#760 := (not #758)
#417 := (<= 0::Int 0::Int)
#547 := (or #417 #423)
#754 := (not #547)
#428 := (or #754 #760)
#429 := (ite #428 #440 #441)
#761 := (= -3::Int 0::Int)
#762 := (= 0::Int 0::Int)
#763 := (or #762 #761)
#764 := (ite #763 #69 #429)
#602 := (or #599 #764)
#603 := (iff #602 #601)
#605 := (iff #601 #601)
#606 := [rewrite]: #605
#699 := (iff #764 #69)
#1 := true
#550 := (ite true #69 #69)
#695 := (iff #550 #69)
#696 := [rewrite]: #695
#698 := (iff #764 #550)
#590 := (iff #429 #69)
#705 := (ite false #69 #69)
#707 := (iff #705 #69)
#589 := [rewrite]: #707
#706 := (iff #429 #705)
#702 := (iff #441 #69)
#548 := (= #430 #66)
#732 := (+ #66 0::Int)
#723 := (= #732 #66)
#718 := [rewrite]: #723
#717 := (= #430 #732)
#716 := (= #439 0::Int)
#445 := (= #437 0::Int)
#727 := [rewrite]: #445
#709 := (= #439 #437)
#714 := (= #438 0::Int)
#568 := (div 0::Int 3::Int)
#712 := (= #568 0::Int)
#713 := [rewrite]: #712
#569 := (= #438 #568)
#726 := (= #352 3::Int)
#567 := [rewrite]: #726
#711 := [monotonicity #727 #567]: #569
#708 := [trans #711 #713]: #714
#715 := [monotonicity #708]: #709
#710 := [trans #715 #727]: #716
#546 := [monotonicity #710]: #717
#549 := [trans #546 #718]: #548
#703 := [monotonicity #549]: #702
#725 := (iff #440 #69)
#719 := (= #443 #66)
#721 := (= #443 #732)
#731 := (= #370 0::Int)
#729 := (= #370 #437)
#450 := (= #442 0::Int)
#451 := [rewrite]: #450
#730 := [monotonicity #451]: #729
#728 := [trans #730 #727]: #731
#722 := [monotonicity #728]: #721
#724 := [trans #722 #718]: #719
#720 := [monotonicity #724]: #725
#448 := (iff #428 false)
#459 := (or false false)
#734 := (iff #459 false)
#738 := [rewrite]: #734
#733 := (iff #428 #459)
#736 := (iff #760 false)
#749 := (not true)
#392 := (iff #749 false)
#752 := [rewrite]: #392
#358 := (iff #760 #749)
#464 := (iff #758 true)
#744 := (or true true)
#747 := (iff #744 true)
#742 := [rewrite]: #747
#462 := (iff #758 #744)
#739 := (iff #444 true)
#740 := [rewrite]: #739
#407 := (iff #423 true)
#743 := [rewrite]: #407
#463 := [monotonicity #743 #740]: #462
#465 := [trans #463 #742]: #464
#735 := [monotonicity #465]: #358
#458 := [trans #735 #752]: #736
#750 := (iff #754 false)
#751 := (iff #754 #749)
#748 := (iff #547 true)
#745 := (iff #547 #744)
#405 := (iff #417 true)
#406 := [rewrite]: #405
#746 := [monotonicity #406 #743]: #745
#386 := [trans #746 #742]: #748
#391 := [monotonicity #386]: #751
#753 := [trans #391 #752]: #750
#737 := [monotonicity #753 #458]: #733
#449 := [trans #737 #738]: #448
#704 := [monotonicity #449 #720 #703]: #706
#591 := [trans #704 #589]: #590
#741 := (iff #763 true)
#420 := (or true false)
#757 := (iff #420 true)
#400 := [rewrite]: #757
#756 := (iff #763 #420)
#755 := (iff #761 false)
#415 := [rewrite]: #755
#759 := (iff #762 true)
#765 := [rewrite]: #759
#416 := [monotonicity #765 #415]: #756
#404 := [trans #416 #400]: #741
#600 := [monotonicity #404 #591]: #698
#584 := [trans #600 #696]: #699
#604 := [monotonicity #584]: #603
#607 := [trans #604 #606]: #603
#595 := [quant-inst #8 #63]: #602
#700 := [mp #595 #607]: #601
[unit-resolution #700 #87 #772]: false
unsat
a6a62a3b765435aa1a5f654ae0aa2e6502518a55 309 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#16 := (f3 #14 #15)
#740 := (pattern #16)
#11 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #15)
#80 := (* -1::Int #14)
#86 := (div #80 #83)
#243 := (* -1::Int #86)
#244 := (+ #16 #243)
#245 := (= #244 0::Int)
#26 := (div #14 #15)
#240 := (* -1::Int #26)
#241 := (+ #16 #240)
#242 := (= #241 0::Int)
#118 := (>= #14 0::Int)
#111 := (<= #15 0::Int)
#203 := (or #111 #118)
#204 := (not #203)
#107 := (<= #14 0::Int)
#201 := (or #107 #111)
#202 := (not #201)
#207 := (or #202 #204)
#246 := (ite #207 #242 #245)
#239 := (= #16 0::Int)
#18 := (= #15 0::Int)
#17 := (= #14 0::Int)
#19 := (or #17 #18)
#247 := (ite #19 #239 #246)
#741 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #740) #247)
#250 := (forall (vars (?v0 Int) (?v1 Int)) #247)
#744 := (iff #250 #741)
#742 := (iff #247 #247)
#743 := [refl]: #742
#745 := [quant-intro #743]: #744
#210 := (ite #207 #26 #86)
#213 := (ite #19 0::Int #210)
#216 := (= #16 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#251 := (iff #219 #250)
#248 := (iff #216 #247)
#249 := [rewrite]: #248
#252 := [quant-intro #249]: #251
#119 := (not #118)
#112 := (not #111)
#122 := (and #112 #119)
#108 := (not #107)
#115 := (and #108 #112)
#125 := (or #115 #122)
#128 := (ite #125 #26 #86)
#131 := (ite #19 0::Int #128)
#134 := (= #16 #131)
#137 := (forall (vars (?v0 Int) (?v1 Int)) #134)
#220 := (iff #137 #219)
#217 := (iff #134 #216)
#214 := (= #131 #213)
#211 := (= #128 #210)
#208 := (iff #125 #207)
#205 := (iff #122 #204)
#206 := [rewrite]: #205
#195 := (iff #115 #202)
#196 := [rewrite]: #195
#209 := [monotonicity #196 #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#199 := (~ #137 #137)
#197 := (~ #134 #134)
#198 := [refl]: #197
#200 := [nnf-pos #198]: #199
#28 := (- #15)
#27 := (- #14)
#29 := (div #27 #28)
#21 := (< 0::Int #15)
#23 := (< #14 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #14)
#22 := (and #20 #21)
#25 := (or #22 #24)
#30 := (ite #25 #26 #29)
#31 := (ite #19 0::Int #30)
#32 := (= #16 #31)
#33 := (forall (vars (?v0 Int) (?v1 Int)) #32)
#140 := (iff #33 #137)
#73 := (and #21 #23)
#76 := (or #22 #73)
#89 := (ite #76 #26 #86)
#67 := (= 0::Int #15)
#64 := (= 0::Int #14)
#70 := (or #64 #67)
#92 := (ite #70 0::Int #89)
#95 := (= #16 #92)
#98 := (forall (vars (?v0 Int) (?v1 Int)) #95)
#138 := (iff #98 #137)
#135 := (iff #95 #134)
#132 := (= #92 #131)
#129 := (= #89 #128)
#126 := (iff #76 #125)
#123 := (iff #73 #122)
#120 := (iff #23 #119)
#121 := [rewrite]: #120
#113 := (iff #21 #112)
#114 := [rewrite]: #113
#124 := [monotonicity #114 #121]: #123
#116 := (iff #22 #115)
#109 := (iff #20 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#127 := [monotonicity #117 #124]: #126
#130 := [monotonicity #127]: #129
#105 := (iff #70 #19)
#103 := (iff #67 #18)
#104 := [rewrite]: #103
#101 := (iff #64 #17)
#102 := [rewrite]: #101
#106 := [monotonicity #102 #104]: #105
#133 := [monotonicity #106 #130]: #132
#136 := [monotonicity #133]: #135
#139 := [quant-intro #136]: #138
#99 := (iff #33 #98)
#96 := (iff #32 #95)
#93 := (= #31 #92)
#90 := (= #30 #89)
#87 := (= #29 #86)
#84 := (= #28 #83)
#85 := [rewrite]: #84
#81 := (= #27 #80)
#82 := [rewrite]: #81
#88 := [monotonicity #82 #85]: #87
#77 := (iff #25 #76)
#74 := (iff #24 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#91 := [monotonicity #78 #88]: #90
#71 := (iff #19 #70)
#68 := (iff #18 #67)
#69 := [rewrite]: #68
#65 := (iff #17 #64)
#66 := [rewrite]: #65
#72 := [monotonicity #66 #69]: #71
#94 := [monotonicity #72 #91]: #93
#97 := [monotonicity #94]: #96
#100 := [quant-intro #97]: #99
#141 := [trans #100 #139]: #140
#63 := [asserted]: #33
#142 := [mp #63 #141]: #137
#191 := [mp~ #142 #200]: #137
#222 := [mp #191 #221]: #219
#253 := [mp #222 #252]: #250
#746 := [mp #253 #745]: #741
#9 := 3::Int
#8 := 1::Int
#10 := (f3 1::Int 3::Int)
#12 := (= #10 0::Int)
#13 := (not #12)
#62 := [asserted]: #13
#666 := (not #741)
#667 := (or #666 #12)
#327 := (* -1::Int 3::Int)
#411 := (* -1::Int 1::Int)
#412 := (div #411 #327)
#413 := (* -1::Int #412)
#404 := (+ #10 #413)
#415 := (= #404 0::Int)
#416 := (div 1::Int 3::Int)
#417 := (* -1::Int #416)
#414 := (+ #10 #417)
#418 := (= #414 0::Int)
#397 := (>= 1::Int 0::Int)
#732 := (<= 3::Int 0::Int)
#734 := (or #732 #397)
#391 := (not #734)
#521 := (<= 1::Int 0::Int)
#728 := (or #521 #732)
#402 := (not #728)
#403 := (or #402 #391)
#735 := (ite #403 #418 #415)
#736 := (= 3::Int 0::Int)
#737 := (= 1::Int 0::Int)
#738 := (or #737 #736)
#733 := (ite #738 #12 #735)
#663 := (or #666 #733)
#657 := (iff #663 #667)
#659 := (iff #667 #667)
#660 := [rewrite]: #659
#655 := (iff #733 #12)
#675 := (ite false #12 #12)
#656 := (iff #675 #12)
#653 := [rewrite]: #656
#662 := (iff #733 #675)
#674 := (iff #735 #12)
#558 := (= #10 1::Int)
#1 := true
#577 := (ite true #12 #558)
#580 := (iff #577 #12)
#581 := [rewrite]: #580
#578 := (iff #735 #577)
#576 := (iff #415 #558)
#564 := (+ -1::Int #10)
#669 := (= #564 0::Int)
#573 := (iff #669 #558)
#575 := [rewrite]: #573
#670 := (iff #415 #669)
#672 := (= #404 #564)
#678 := (+ #10 -1::Int)
#565 := (= #678 #564)
#524 := [rewrite]: #565
#681 := (= #404 #678)
#679 := (= #413 -1::Int)
#686 := (= #411 -1::Int)
#687 := [rewrite]: #686
#676 := (= #413 #411)
#522 := (= #412 1::Int)
#688 := -3::Int
#689 := (div -1::Int -3::Int)
#691 := (= #689 1::Int)
#520 := [rewrite]: #691
#690 := (= #412 #689)
#682 := (= #327 -3::Int)
#683 := [rewrite]: #682
#684 := [monotonicity #687 #683]: #690
#523 := [trans #684 #520]: #522
#677 := [monotonicity #523]: #676
#680 := [trans #677 #687]: #679
#563 := [monotonicity #680]: #681
#574 := [trans #563 #524]: #672
#673 := [monotonicity #574]: #670
#569 := [trans #673 #575]: #576
#543 := (iff #418 #12)
#541 := (= #414 #10)
#693 := (+ #10 0::Int)
#694 := (= #693 #10)
#700 := [rewrite]: #694
#698 := (= #414 #693)
#697 := (= #417 0::Int)
#705 := (* -1::Int 0::Int)
#695 := (= #705 0::Int)
#696 := [rewrite]: #695
#702 := (= #417 #705)
#419 := (= #416 0::Int)
#701 := [rewrite]: #419
#706 := [monotonicity #701]: #702
#692 := [trans #706 #696]: #697
#699 := [monotonicity #692]: #698
#542 := [trans #699 #700]: #541
#685 := [monotonicity #542]: #543
#703 := (iff #403 true)
#712 := (or true false)
#424 := (iff #712 true)
#425 := [rewrite]: #424
#422 := (iff #403 #712)
#711 := (iff #391 false)
#709 := (not true)
#433 := (iff #709 false)
#707 := [rewrite]: #433
#710 := (iff #391 #709)
#439 := (iff #734 true)
#713 := (or false true)
#437 := (iff #713 true)
#438 := [rewrite]: #437
#714 := (iff #734 #713)
#724 := (iff #397 true)
#727 := [rewrite]: #724
#717 := (iff #732 false)
#718 := [rewrite]: #717
#436 := [monotonicity #718 #727]: #714
#333 := [trans #436 #438]: #439
#432 := [monotonicity #333]: #710
#708 := [trans #432 #707]: #711
#366 := (iff #402 true)
#722 := (not false)
#725 := (iff #722 true)
#365 := [rewrite]: #725
#360 := (iff #402 #722)
#721 := (iff #728 false)
#730 := (or false false)
#374 := (iff #730 false)
#715 := [rewrite]: #374
#719 := (iff #728 #730)
#380 := (iff #521 false)
#381 := [rewrite]: #380
#720 := [monotonicity #381 #718]: #719
#716 := [trans #720 #715]: #721
#723 := [monotonicity #716]: #360
#726 := [trans #723 #365]: #366
#423 := [monotonicity #726 #708]: #422
#704 := [trans #423 #425]: #703
#579 := [monotonicity #704 #685 #569]: #578
#671 := [trans #579 #581]: #674
#378 := (iff #738 false)
#390 := (iff #738 #730)
#389 := (iff #736 false)
#394 := [rewrite]: #389
#739 := (iff #737 false)
#729 := [rewrite]: #739
#731 := [monotonicity #729 #394]: #390
#379 := [trans #731 #715]: #378
#664 := [monotonicity #379 #671]: #662
#665 := [trans #664 #653]: #655
#658 := [monotonicity #665]: #657
#654 := [trans #658 #660]: #657
#668 := [quant-inst #8 #9]: #663
#661 := [mp #668 #654]: #667
[unit-resolution #661 #62 #746]: false
unsat
e8bc05d54be641b4942beaff512e603a9cfaa4dd 284 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#15 := (f3 #13 #14)
#725 := (pattern #15)
#16 := 0::Int
#70 := -1::Int
#74 := (* -1::Int #14)
#71 := (* -1::Int #13)
#77 := (div #71 #74)
#228 := (* -1::Int #77)
#229 := (+ #15 #228)
#230 := (= #229 0::Int)
#26 := (div #13 #14)
#225 := (* -1::Int #26)
#226 := (+ #15 #225)
#227 := (= #226 0::Int)
#103 := (>= #13 0::Int)
#96 := (<= #14 0::Int)
#188 := (or #96 #103)
#189 := (not #188)
#92 := (<= #13 0::Int)
#186 := (or #92 #96)
#187 := (not #186)
#192 := (or #187 #189)
#231 := (ite #192 #227 #230)
#224 := (= #15 0::Int)
#18 := (= #14 0::Int)
#17 := (= #13 0::Int)
#19 := (or #17 #18)
#232 := (ite #19 #224 #231)
#726 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #725) #232)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#729 := (iff #235 #726)
#727 := (iff #232 #232)
#728 := [refl]: #727
#730 := [quant-intro #728]: #729
#195 := (ite #192 #26 #77)
#198 := (ite #19 0::Int #195)
#201 := (= #15 #198)
#204 := (forall (vars (?v0 Int) (?v1 Int)) #201)
#236 := (iff #204 #235)
#233 := (iff #201 #232)
#234 := [rewrite]: #233
#237 := [quant-intro #234]: #236
#104 := (not #103)
#97 := (not #96)
#107 := (and #97 #104)
#93 := (not #92)
#100 := (and #93 #97)
#110 := (or #100 #107)
#113 := (ite #110 #26 #77)
#116 := (ite #19 0::Int #113)
#119 := (= #15 #116)
#122 := (forall (vars (?v0 Int) (?v1 Int)) #119)
#205 := (iff #122 #204)
#202 := (iff #119 #201)
#199 := (= #116 #198)
#196 := (= #113 #195)
#193 := (iff #110 #192)
#190 := (iff #107 #189)
#191 := [rewrite]: #190
#180 := (iff #100 #187)
#181 := [rewrite]: #180
#194 := [monotonicity #181 #191]: #193
#197 := [monotonicity #194]: #196
#200 := [monotonicity #197]: #199
#203 := [monotonicity #200]: #202
#206 := [quant-intro #203]: #205
#184 := (~ #122 #122)
#182 := (~ #119 #119)
#183 := [refl]: #182
#185 := [nnf-pos #183]: #184
#28 := (- #14)
#27 := (- #13)
#29 := (div #27 #28)
#21 := (< 0::Int #14)
#23 := (< #13 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #13)
#22 := (and #20 #21)
#25 := (or #22 #24)
#30 := (ite #25 #26 #29)
#31 := (ite #19 0::Int #30)
#32 := (= #15 #31)
#33 := (forall (vars (?v0 Int) (?v1 Int)) #32)
#125 := (iff #33 #122)
#64 := (and #21 #23)
#67 := (or #22 #64)
#80 := (ite #67 #26 #77)
#83 := (ite #19 0::Int #80)
#86 := (= #15 #83)
#89 := (forall (vars (?v0 Int) (?v1 Int)) #86)
#123 := (iff #89 #122)
#120 := (iff #86 #119)
#117 := (= #83 #116)
#114 := (= #80 #113)
#111 := (iff #67 #110)
#108 := (iff #64 #107)
#105 := (iff #23 #104)
#106 := [rewrite]: #105
#98 := (iff #21 #97)
#99 := [rewrite]: #98
#109 := [monotonicity #99 #106]: #108
#101 := (iff #22 #100)
#94 := (iff #20 #93)
#95 := [rewrite]: #94
#102 := [monotonicity #95 #99]: #101
#112 := [monotonicity #102 #109]: #111
#115 := [monotonicity #112]: #114
#118 := [monotonicity #115]: #117
#121 := [monotonicity #118]: #120
#124 := [quant-intro #121]: #123
#90 := (iff #33 #89)
#87 := (iff #32 #86)
#84 := (= #31 #83)
#81 := (= #30 #80)
#78 := (= #29 #77)
#75 := (= #28 #74)
#76 := [rewrite]: #75
#72 := (= #27 #71)
#73 := [rewrite]: #72
#79 := [monotonicity #73 #76]: #78
#68 := (iff #25 #67)
#65 := (iff #24 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#82 := [monotonicity #69 #79]: #81
#85 := [monotonicity #82]: #84
#88 := [monotonicity #85]: #87
#91 := [quant-intro #88]: #90
#126 := [trans #91 #124]: #125
#63 := [asserted]: #33
#127 := [mp #63 #126]: #122
#176 := [mp~ #127 #185]: #122
#207 := [mp #176 #206]: #204
#238 := [mp #207 #237]: #235
#731 := [mp #238 #730]: #726
#10 := 1::Int
#8 := 3::Int
#9 := (f3 3::Int 3::Int)
#11 := (= #9 1::Int)
#12 := (not #11)
#62 := [asserted]: #12
#566 := (not #726)
#659 := (or #566 #11)
#312 := (* -1::Int 3::Int)
#396 := (div #312 #312)
#397 := (* -1::Int #396)
#398 := (+ #9 #397)
#389 := (= #398 0::Int)
#400 := (div 3::Int 3::Int)
#401 := (* -1::Int #400)
#402 := (+ #9 #401)
#399 := (= #402 0::Int)
#403 := (>= 3::Int 0::Int)
#382 := (<= 3::Int 0::Int)
#717 := (or #382 #403)
#719 := (not #717)
#376 := (or #382 #382)
#506 := (not #376)
#713 := (or #506 #719)
#387 := (ite #713 #399 #389)
#388 := (= #9 0::Int)
#720 := (= 3::Int 0::Int)
#721 := (or #720 #720)
#722 := (ite #721 #388 #387)
#656 := (or #566 #722)
#647 := (iff #656 #659)
#641 := (iff #659 #659)
#638 := [rewrite]: #641
#564 := (iff #722 #11)
#560 := (ite false #388 #11)
#562 := (iff #560 #11)
#563 := [rewrite]: #562
#561 := (iff #722 #560)
#543 := (iff #387 #11)
#1 := true
#657 := (ite true #11 #11)
#655 := (iff #657 #11)
#658 := [rewrite]: #655
#559 := (iff #387 #657)
#550 := (iff #389 #11)
#681 := (+ -1::Int #9)
#684 := (= #681 0::Int)
#526 := (iff #684 #11)
#527 := [rewrite]: #526
#548 := (iff #389 #684)
#663 := (= #398 #681)
#687 := (+ #9 -1::Int)
#682 := (= #687 #681)
#677 := [rewrite]: #682
#664 := (= #398 #687)
#661 := (= #397 -1::Int)
#409 := (* -1::Int 1::Int)
#689 := (= #409 -1::Int)
#404 := [rewrite]: #689
#507 := (= #397 #409)
#676 := (= #396 1::Int)
#671 := -3::Int
#667 := (div -3::Int -3::Int)
#675 := (= #667 1::Int)
#669 := [rewrite]: #675
#668 := (= #396 #667)
#672 := (= #312 -3::Int)
#673 := [rewrite]: #672
#674 := [monotonicity #673 #673]: #668
#505 := [trans #674 #669]: #676
#508 := [monotonicity #505]: #507
#662 := [trans #508 #404]: #661
#665 := [monotonicity #662]: #664
#666 := [trans #665 #677]: #663
#549 := [monotonicity #666]: #548
#509 := [trans #549 #527]: #550
#528 := (iff #399 #11)
#679 := (iff #399 #684)
#678 := (= #402 #681)
#691 := (= #402 #687)
#686 := (= #401 -1::Int)
#410 := (= #401 #409)
#407 := (= #400 1::Int)
#408 := [rewrite]: #407
#688 := [monotonicity #408]: #410
#690 := [trans #688 #404]: #686
#680 := [monotonicity #690]: #691
#683 := [trans #680 #677]: #678
#685 := [monotonicity #683]: #679
#670 := [trans #685 #527]: #528
#693 := (iff #713 true)
#695 := (or true false)
#692 := (iff #695 true)
#696 := [rewrite]: #692
#417 := (iff #713 #695)
#318 := (iff #719 false)
#699 := (not true)
#423 := (iff #699 false)
#424 := [rewrite]: #423
#421 := (iff #719 #699)
#712 := (iff #717 true)
#710 := (or false true)
#711 := (iff #710 true)
#709 := [rewrite]: #711
#350 := (iff #717 #710)
#345 := (iff #403 true)
#708 := [rewrite]: #345
#359 := (iff #382 false)
#700 := [rewrite]: #359
#351 := [monotonicity #700 #708]: #350
#698 := [trans #351 #709]: #712
#422 := [monotonicity #698]: #421
#694 := [trans #422 #424]: #318
#701 := (iff #506 true)
#702 := (not false)
#705 := (iff #702 true)
#706 := [rewrite]: #705
#703 := (iff #506 #702)
#365 := (iff #376 false)
#724 := (or false false)
#379 := (iff #724 false)
#715 := [rewrite]: #379
#363 := (iff #376 #724)
#364 := [monotonicity #700 #700]: #363
#366 := [trans #364 #715]: #365
#704 := [monotonicity #366]: #703
#707 := [trans #704 #706]: #701
#418 := [monotonicity #707 #694]: #417
#697 := [trans #418 #696]: #693
#654 := [monotonicity #697 #670 #509]: #559
#558 := [trans #654 #658]: #543
#375 := (iff #721 false)
#714 := (iff #721 #724)
#723 := (iff #720 false)
#718 := [rewrite]: #723
#374 := [monotonicity #718 #718]: #714
#716 := [trans #374 #715]: #375
#554 := [monotonicity #716 #558]: #561
#565 := [trans #554 #563]: #564
#649 := [monotonicity #565]: #647
#640 := [trans #649 #638]: #647
#660 := [quant-inst #8 #8]: #656
#650 := [mp #660 #640]: #659
[unit-resolution #650 #62 #731]: false
unsat
e5eddbef23d1553e8639810f42b39c3055238ad5 308 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#16 := (f3 #14 #15)
#726 := (pattern #16)
#17 := 0::Int
#71 := -1::Int
#75 := (* -1::Int #15)
#72 := (* -1::Int #14)
#78 := (div #72 #75)
#229 := (* -1::Int #78)
#230 := (+ #16 #229)
#231 := (= #230 0::Int)
#27 := (div #14 #15)
#226 := (* -1::Int #27)
#227 := (+ #16 #226)
#228 := (= #227 0::Int)
#104 := (>= #14 0::Int)
#97 := (<= #15 0::Int)
#189 := (or #97 #104)
#190 := (not #189)
#93 := (<= #14 0::Int)
#187 := (or #93 #97)
#188 := (not #187)
#193 := (or #188 #190)
#232 := (ite #193 #228 #231)
#225 := (= #16 0::Int)
#19 := (= #15 0::Int)
#18 := (= #14 0::Int)
#20 := (or #18 #19)
#233 := (ite #20 #225 #232)
#727 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #726) #233)
#236 := (forall (vars (?v0 Int) (?v1 Int)) #233)
#730 := (iff #236 #727)
#728 := (iff #233 #233)
#729 := [refl]: #728
#731 := [quant-intro #729]: #730
#196 := (ite #193 #27 #78)
#199 := (ite #20 0::Int #196)
#202 := (= #16 #199)
#205 := (forall (vars (?v0 Int) (?v1 Int)) #202)
#237 := (iff #205 #236)
#234 := (iff #202 #233)
#235 := [rewrite]: #234
#238 := [quant-intro #235]: #237
#105 := (not #104)
#98 := (not #97)
#108 := (and #98 #105)
#94 := (not #93)
#101 := (and #94 #98)
#111 := (or #101 #108)
#114 := (ite #111 #27 #78)
#117 := (ite #20 0::Int #114)
#120 := (= #16 #117)
#123 := (forall (vars (?v0 Int) (?v1 Int)) #120)
#206 := (iff #123 #205)
#203 := (iff #120 #202)
#200 := (= #117 #199)
#197 := (= #114 #196)
#194 := (iff #111 #193)
#191 := (iff #108 #190)
#192 := [rewrite]: #191
#181 := (iff #101 #188)
#182 := [rewrite]: #181
#195 := [monotonicity #182 #192]: #194
#198 := [monotonicity #195]: #197
#201 := [monotonicity #198]: #200
#204 := [monotonicity #201]: #203
#207 := [quant-intro #204]: #206
#185 := (~ #123 #123)
#183 := (~ #120 #120)
#184 := [refl]: #183
#186 := [nnf-pos #184]: #185
#29 := (- #15)
#28 := (- #14)
#30 := (div #28 #29)
#22 := (< 0::Int #15)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (ite #26 #27 #30)
#32 := (ite #20 0::Int #31)
#33 := (= #16 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#126 := (iff #34 #123)
#65 := (and #22 #24)
#68 := (or #23 #65)
#81 := (ite #68 #27 #78)
#84 := (ite #20 0::Int #81)
#87 := (= #16 #84)
#90 := (forall (vars (?v0 Int) (?v1 Int)) #87)
#124 := (iff #90 #123)
#121 := (iff #87 #120)
#118 := (= #84 #117)
#115 := (= #81 #114)
#112 := (iff #68 #111)
#109 := (iff #65 #108)
#106 := (iff #24 #105)
#107 := [rewrite]: #106
#99 := (iff #22 #98)
#100 := [rewrite]: #99
#110 := [monotonicity #100 #107]: #109
#102 := (iff #23 #101)
#95 := (iff #21 #94)
#96 := [rewrite]: #95
#103 := [monotonicity #96 #100]: #102
#113 := [monotonicity #103 #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [monotonicity #119]: #121
#125 := [quant-intro #122]: #124
#91 := (iff #34 #90)
#88 := (iff #33 #87)
#85 := (= #32 #84)
#82 := (= #31 #81)
#79 := (= #30 #78)
#76 := (= #29 #75)
#77 := [rewrite]: #76
#73 := (= #28 #72)
#74 := [rewrite]: #73
#80 := [monotonicity #74 #77]: #79
#69 := (iff #26 #68)
#66 := (iff #25 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#83 := [monotonicity #70 #80]: #82
#86 := [monotonicity #83]: #85
#89 := [monotonicity #86]: #88
#92 := [quant-intro #89]: #91
#127 := [trans #92 #125]: #126
#64 := [asserted]: #34
#128 := [mp #64 #127]: #123
#177 := [mp~ #128 #186]: #123
#208 := [mp #177 #207]: #205
#239 := [mp #208 #238]: #236
#732 := [mp #239 #731]: #727
#11 := 1::Int
#9 := 3::Int
#8 := 5::Int
#10 := (f3 5::Int 3::Int)
#12 := (= #10 1::Int)
#13 := (not #12)
#63 := [asserted]: #13
#635 := (not #727)
#636 := (or #635 #12)
#313 := (* -1::Int 3::Int)
#397 := (* -1::Int 5::Int)
#398 := (div #397 #313)
#399 := (* -1::Int #398)
#390 := (+ #10 #399)
#401 := (= #390 0::Int)
#402 := (div 5::Int 3::Int)
#403 := (* -1::Int #402)
#400 := (+ #10 #403)
#404 := (= #400 0::Int)
#383 := (>= 5::Int 0::Int)
#718 := (<= 3::Int 0::Int)
#720 := (or #718 #383)
#377 := (not #720)
#507 := (<= 5::Int 0::Int)
#714 := (or #507 #718)
#388 := (not #714)
#389 := (or #388 #377)
#721 := (ite #389 #404 #401)
#722 := (= #10 0::Int)
#723 := (= 3::Int 0::Int)
#724 := (= 5::Int 0::Int)
#719 := (or #724 #723)
#725 := (ite #719 #722 #721)
#637 := (or #635 #725)
#638 := (iff #637 #636)
#625 := (iff #636 #636)
#627 := [rewrite]: #625
#632 := (iff #725 #12)
#645 := (ite false #722 #12)
#647 := (iff #645 #12)
#631 := [rewrite]: #647
#646 := (iff #725 #645)
#643 := (iff #721 #12)
#664 := 2::Int
#648 := (= #10 2::Int)
#1 := true
#651 := (ite true #12 #648)
#649 := (iff #651 #12)
#654 := [rewrite]: #649
#652 := (iff #721 #651)
#639 := (iff #401 #648)
#655 := -2::Int
#563 := (+ -2::Int #10)
#660 := (= #563 0::Int)
#650 := (iff #660 #648)
#642 := [rewrite]: #650
#657 := (iff #401 #660)
#566 := (= #390 #563)
#561 := (+ #10 -2::Int)
#564 := (= #561 #563)
#565 := [rewrite]: #564
#562 := (= #390 #561)
#544 := (= #399 -2::Int)
#510 := (* -1::Int 2::Int)
#656 := (= #510 -2::Int)
#659 := [rewrite]: #656
#658 := (= #399 #510)
#550 := (= #398 2::Int)
#508 := -3::Int
#670 := -5::Int
#663 := (div -5::Int -3::Int)
#667 := (= #663 2::Int)
#549 := [rewrite]: #667
#665 := (= #398 #663)
#509 := (= #313 -3::Int)
#662 := [rewrite]: #509
#677 := (= #397 -5::Int)
#506 := [rewrite]: #677
#666 := [monotonicity #506 #662]: #665
#551 := [trans #666 #549]: #550
#560 := [monotonicity #551]: #658
#559 := [trans #560 #659]: #544
#555 := [monotonicity #559]: #562
#567 := [trans #555 #565]: #566
#661 := [monotonicity #567]: #657
#641 := [trans #661 #642]: #639
#675 := (iff #404 #12)
#686 := (+ -1::Int #10)
#672 := (= #686 0::Int)
#668 := (iff #672 #12)
#669 := [rewrite]: #668
#673 := (iff #404 #672)
#529 := (= #400 #686)
#684 := (+ #10 -1::Int)
#527 := (= #684 #686)
#528 := [rewrite]: #527
#685 := (= #400 #684)
#678 := (= #403 -1::Int)
#688 := (* -1::Int 1::Int)
#682 := (= #688 -1::Int)
#683 := [rewrite]: #682
#692 := (= #403 #688)
#687 := (= #402 1::Int)
#691 := [rewrite]: #687
#681 := [monotonicity #691]: #692
#679 := [trans #681 #683]: #678
#680 := [monotonicity #679]: #685
#671 := [trans #680 #528]: #529
#674 := [monotonicity #671]: #673
#676 := [trans #674 #669]: #675
#690 := (iff #389 true)
#408 := (or true false)
#411 := (iff #408 true)
#689 := [rewrite]: #411
#409 := (iff #389 #408)
#694 := (iff #377 false)
#696 := (not true)
#693 := (iff #696 false)
#697 := [rewrite]: #693
#418 := (iff #377 #696)
#319 := (iff #720 true)
#700 := (or false true)
#424 := (iff #700 true)
#425 := [rewrite]: #424
#422 := (iff #720 #700)
#713 := (iff #383 true)
#699 := [rewrite]: #713
#704 := (iff #718 false)
#705 := [rewrite]: #704
#423 := [monotonicity #705 #699]: #422
#695 := [trans #423 #425]: #319
#419 := [monotonicity #695]: #418
#698 := [trans #419 #697]: #694
#712 := (iff #388 true)
#346 := (not false)
#351 := (iff #346 true)
#352 := [rewrite]: #351
#709 := (iff #388 #346)
#702 := (iff #714 false)
#376 := (or false false)
#701 := (iff #376 false)
#364 := [rewrite]: #701
#706 := (iff #714 #376)
#367 := (iff #507 false)
#703 := [rewrite]: #367
#707 := [monotonicity #703 #705]: #706
#708 := [trans #707 #364]: #702
#711 := [monotonicity #708]: #709
#710 := [trans #711 #352]: #712
#410 := [monotonicity #710 #698]: #409
#405 := [trans #410 #689]: #690
#653 := [monotonicity #405 #676 #641]: #652
#644 := [trans #653 #654]: #643
#365 := (iff #719 false)
#717 := (iff #719 #376)
#380 := (iff #723 false)
#716 := [rewrite]: #380
#715 := (iff #724 false)
#375 := [rewrite]: #715
#360 := [monotonicity #375 #716]: #717
#366 := [trans #360 #364]: #365
#640 := [monotonicity #366 #644]: #646
#634 := [trans #640 #631]: #632
#624 := [monotonicity #634]: #638
#628 := [trans #624 #627]: #638
#633 := [quant-inst #8 #9]: #637
#629 := [mp #633 #628]: #636
[unit-resolution #629 #63 #732]: false
unsat
191c033321d69fed907f76825c4e08dd5071fdbf 307 0
#2 := false
decl f3 :: (-> Int Int Int)
#16 := (:var 0 Int)
#15 := (:var 1 Int)
#17 := (f3 #15 #16)
#742 := (pattern #17)
#18 := 0::Int
#71 := -1::Int
#91 := (* -1::Int #16)
#88 := (* -1::Int #15)
#94 := (div #88 #91)
#245 := (* -1::Int #94)
#246 := (+ #17 #245)
#247 := (= #246 0::Int)
#28 := (div #15 #16)
#242 := (* -1::Int #28)
#243 := (+ #17 #242)
#244 := (= #243 0::Int)
#120 := (>= #15 0::Int)
#113 := (<= #16 0::Int)
#205 := (or #113 #120)
#206 := (not #205)
#109 := (<= #15 0::Int)
#203 := (or #109 #113)
#204 := (not #203)
#209 := (or #204 #206)
#248 := (ite #209 #244 #247)
#241 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#249 := (ite #21 #241 #248)
#743 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #742) #249)
#252 := (forall (vars (?v0 Int) (?v1 Int)) #249)
#746 := (iff #252 #743)
#744 := (iff #249 #249)
#745 := [refl]: #744
#747 := [quant-intro #745]: #746
#212 := (ite #209 #28 #94)
#215 := (ite #21 0::Int #212)
#218 := (= #17 #215)
#221 := (forall (vars (?v0 Int) (?v1 Int)) #218)
#253 := (iff #221 #252)
#250 := (iff #218 #249)
#251 := [rewrite]: #250
#254 := [quant-intro #251]: #253
#121 := (not #120)
#114 := (not #113)
#124 := (and #114 #121)
#110 := (not #109)
#117 := (and #110 #114)
#127 := (or #117 #124)
#130 := (ite #127 #28 #94)
#133 := (ite #21 0::Int #130)
#136 := (= #17 #133)
#139 := (forall (vars (?v0 Int) (?v1 Int)) #136)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#216 := (= #133 #215)
#213 := (= #130 #212)
#210 := (iff #127 #209)
#207 := (iff #124 #206)
#208 := [rewrite]: #207
#197 := (iff #117 #204)
#198 := [rewrite]: #197
#211 := [monotonicity #198 #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [monotonicity #217]: #219
#223 := [quant-intro #220]: #222
#201 := (~ #139 #139)
#199 := (~ #136 #136)
#200 := [refl]: #199
#202 := [nnf-pos #200]: #201
#30 := (- #16)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (ite #27 #28 #31)
#33 := (ite #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#142 := (iff #35 #139)
#81 := (and #23 #25)
#85 := (or #24 #81)
#97 := (ite #85 #28 #94)
#100 := (ite #21 0::Int #97)
#103 := (= #17 #100)
#106 := (forall (vars (?v0 Int) (?v1 Int)) #103)
#140 := (iff #106 #139)
#137 := (iff #103 #136)
#134 := (= #100 #133)
#131 := (= #97 #130)
#128 := (iff #85 #127)
#125 := (iff #81 #124)
#122 := (iff #25 #121)
#123 := [rewrite]: #122
#115 := (iff #23 #114)
#116 := [rewrite]: #115
#126 := [monotonicity #116 #123]: #125
#118 := (iff #24 #117)
#111 := (iff #22 #110)
#112 := [rewrite]: #111
#119 := [monotonicity #112 #116]: #118
#129 := [monotonicity #119 #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [quant-intro #138]: #140
#107 := (iff #35 #106)
#104 := (iff #34 #103)
#101 := (= #33 #100)
#98 := (= #32 #97)
#95 := (= #31 #94)
#92 := (= #30 #91)
#93 := [rewrite]: #92
#89 := (= #29 #88)
#90 := [rewrite]: #89
#96 := [monotonicity #90 #93]: #95
#86 := (iff #27 #85)
#83 := (iff #26 #81)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#99 := [monotonicity #87 #96]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#108 := [quant-intro #105]: #107
#143 := [trans #108 #141]: #142
#80 := [asserted]: #35
#144 := [mp #80 #143]: #139
#193 := [mp~ #144 #202]: #139
#224 := [mp #193 #223]: #221
#255 := [mp #224 #254]: #252
#748 := [mp #255 #747]: #743
#65 := -3::Int
#8 := 1::Int
#68 := (f3 1::Int -3::Int)
#74 := (= #68 -1::Int)
#77 := (not #74)
#12 := (- 1::Int)
#9 := 3::Int
#10 := (- 3::Int)
#11 := (f3 1::Int #10)
#13 := (= #11 #12)
#14 := (not #13)
#78 := (iff #14 #77)
#75 := (iff #13 #74)
#72 := (= #12 -1::Int)
#73 := [rewrite]: #72
#69 := (= #11 #68)
#66 := (= #10 -3::Int)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [monotonicity #70 #73]: #75
#79 := [monotonicity #76]: #78
#64 := [asserted]: #14
#82 := [mp #64 #79]: #77
#658 := (not #743)
#655 := (or #658 #74)
#329 := (* -1::Int -3::Int)
#413 := (* -1::Int 1::Int)
#414 := (div #413 #329)
#415 := (* -1::Int #414)
#406 := (+ #68 #415)
#417 := (= #406 0::Int)
#418 := (div 1::Int -3::Int)
#419 := (* -1::Int #418)
#416 := (+ #68 #419)
#420 := (= #416 0::Int)
#399 := (>= 1::Int 0::Int)
#734 := (<= -3::Int 0::Int)
#736 := (or #734 #399)
#393 := (not #736)
#523 := (<= 1::Int 0::Int)
#730 := (or #523 #734)
#404 := (not #730)
#405 := (or #404 #393)
#737 := (ite #405 #420 #417)
#738 := (= #68 0::Int)
#739 := (= -3::Int 0::Int)
#740 := (= 1::Int 0::Int)
#735 := (or #740 #739)
#741 := (ite #735 #738 #737)
#657 := (or #658 #741)
#668 := (iff #657 #655)
#665 := (iff #655 #655)
#670 := [rewrite]: #665
#664 := (iff #741 #74)
#571 := (ite false #738 #74)
#581 := (iff #571 #74)
#582 := [rewrite]: #581
#673 := (iff #741 #571)
#583 := (iff #737 #74)
#579 := (iff #737 #571)
#577 := (iff #417 #74)
#566 := (+ 1::Int #68)
#671 := (= #566 0::Int)
#560 := (iff #671 #74)
#575 := [rewrite]: #560
#672 := (iff #417 #671)
#674 := (= #406 #566)
#680 := (+ #68 1::Int)
#567 := (= #680 #566)
#526 := [rewrite]: #567
#683 := (= #406 #680)
#681 := (= #415 1::Int)
#522 := (* -1::Int -1::Int)
#678 := (= #522 1::Int)
#679 := [rewrite]: #678
#524 := (= #415 #522)
#686 := (= #414 -1::Int)
#690 := (div -1::Int 3::Int)
#691 := (= #690 -1::Int)
#692 := [rewrite]: #691
#684 := (= #414 #690)
#688 := (= #329 3::Int)
#689 := [rewrite]: #688
#545 := (= #413 -1::Int)
#687 := [rewrite]: #545
#685 := [monotonicity #687 #689]: #684
#693 := [trans #685 #692]: #686
#525 := [monotonicity #693]: #524
#682 := [trans #525 #679]: #681
#565 := [monotonicity #682]: #683
#576 := [trans #565 #526]: #674
#675 := [monotonicity #576]: #672
#578 := [trans #675 #575]: #577
#543 := (iff #420 #738)
#696 := (= #416 #68)
#699 := (+ #68 0::Int)
#700 := (= #699 #68)
#701 := [rewrite]: #700
#694 := (= #416 #699)
#697 := (= #419 0::Int)
#421 := (* -1::Int 0::Int)
#704 := (= #421 0::Int)
#708 := [rewrite]: #704
#703 := (= #419 #421)
#705 := (= #418 0::Int)
#706 := [rewrite]: #705
#707 := [monotonicity #706]: #703
#698 := [trans #707 #708]: #697
#695 := [monotonicity #698]: #694
#702 := [trans #695 #701]: #696
#544 := [monotonicity #702]: #543
#426 := (iff #405 false)
#392 := (or false false)
#717 := (iff #392 false)
#380 := [rewrite]: #717
#424 := (iff #405 #392)
#710 := (iff #393 false)
#1 := true
#367 := (not true)
#726 := (iff #367 false)
#729 := [rewrite]: #726
#709 := (iff #393 #367)
#434 := (iff #736 true)
#440 := (or true true)
#711 := (iff #440 true)
#712 := [rewrite]: #711
#441 := (iff #736 #440)
#438 := (iff #399 true)
#439 := [rewrite]: #438
#720 := (iff #734 true)
#721 := [rewrite]: #720
#335 := [monotonicity #721 #439]: #441
#435 := [trans #335 #712]: #434
#713 := [monotonicity #435]: #709
#714 := [trans #713 #729]: #710
#715 := (iff #404 false)
#368 := (iff #404 #367)
#725 := (iff #730 true)
#722 := (or false true)
#724 := (iff #722 true)
#362 := [rewrite]: #724
#723 := (iff #730 #722)
#383 := (iff #523 false)
#719 := [rewrite]: #383
#718 := [monotonicity #719 #721]: #723
#727 := [trans #718 #362]: #725
#728 := [monotonicity #727]: #368
#716 := [trans #728 #729]: #715
#425 := [monotonicity #716 #714]: #424
#427 := [trans #425 #380]: #426
#580 := [monotonicity #427 #544 #578]: #579
#676 := [trans #580 #582]: #583
#381 := (iff #735 false)
#733 := (iff #735 #392)
#396 := (iff #739 false)
#732 := [rewrite]: #396
#731 := (iff #740 false)
#391 := [rewrite]: #731
#376 := [monotonicity #391 #732]: #733
#382 := [trans #376 #380]: #381
#677 := [monotonicity #382 #676]: #673
#666 := [trans #677 #582]: #664
#669 := [monotonicity #666]: #668
#659 := [trans #669 #670]: #668
#667 := [quant-inst #8 #65]: #657
#660 := [mp #667 #659]: #655
[unit-resolution #660 #82 #748]: false
unsat
5ac842dfccd0a130b836d32f5bc0e4f0b730d4cf 306 0
#2 := false
decl f3 :: (-> Int Int Int)
#16 := (:var 0 Int)
#15 := (:var 1 Int)
#17 := (f3 #15 #16)
#742 := (pattern #17)
#18 := 0::Int
#71 := -1::Int
#91 := (* -1::Int #16)
#88 := (* -1::Int #15)
#94 := (div #88 #91)
#245 := (* -1::Int #94)
#246 := (+ #17 #245)
#247 := (= #246 0::Int)
#28 := (div #15 #16)
#242 := (* -1::Int #28)
#243 := (+ #17 #242)
#244 := (= #243 0::Int)
#120 := (>= #15 0::Int)
#113 := (<= #16 0::Int)
#205 := (or #113 #120)
#206 := (not #205)
#109 := (<= #15 0::Int)
#203 := (or #109 #113)
#204 := (not #203)
#209 := (or #204 #206)
#248 := (ite #209 #244 #247)
#241 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#249 := (ite #21 #241 #248)
#743 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #742) #249)
#252 := (forall (vars (?v0 Int) (?v1 Int)) #249)
#746 := (iff #252 #743)
#744 := (iff #249 #249)
#745 := [refl]: #744
#747 := [quant-intro #745]: #746
#212 := (ite #209 #28 #94)
#215 := (ite #21 0::Int #212)
#218 := (= #17 #215)
#221 := (forall (vars (?v0 Int) (?v1 Int)) #218)
#253 := (iff #221 #252)
#250 := (iff #218 #249)
#251 := [rewrite]: #250
#254 := [quant-intro #251]: #253
#121 := (not #120)
#114 := (not #113)
#124 := (and #114 #121)
#110 := (not #109)
#117 := (and #110 #114)
#127 := (or #117 #124)
#130 := (ite #127 #28 #94)
#133 := (ite #21 0::Int #130)
#136 := (= #17 #133)
#139 := (forall (vars (?v0 Int) (?v1 Int)) #136)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#216 := (= #133 #215)
#213 := (= #130 #212)
#210 := (iff #127 #209)
#207 := (iff #124 #206)
#208 := [rewrite]: #207
#197 := (iff #117 #204)
#198 := [rewrite]: #197
#211 := [monotonicity #198 #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [monotonicity #217]: #219
#223 := [quant-intro #220]: #222
#201 := (~ #139 #139)
#199 := (~ #136 #136)
#200 := [refl]: #199
#202 := [nnf-pos #200]: #201
#30 := (- #16)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (ite #27 #28 #31)
#33 := (ite #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#142 := (iff #35 #139)
#81 := (and #23 #25)
#85 := (or #24 #81)
#97 := (ite #85 #28 #94)
#100 := (ite #21 0::Int #97)
#103 := (= #17 #100)
#106 := (forall (vars (?v0 Int) (?v1 Int)) #103)
#140 := (iff #106 #139)
#137 := (iff #103 #136)
#134 := (= #100 #133)
#131 := (= #97 #130)
#128 := (iff #85 #127)
#125 := (iff #81 #124)
#122 := (iff #25 #121)
#123 := [rewrite]: #122
#115 := (iff #23 #114)
#116 := [rewrite]: #115
#126 := [monotonicity #116 #123]: #125
#118 := (iff #24 #117)
#111 := (iff #22 #110)
#112 := [rewrite]: #111
#119 := [monotonicity #112 #116]: #118
#129 := [monotonicity #119 #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [quant-intro #138]: #140
#107 := (iff #35 #106)
#104 := (iff #34 #103)
#101 := (= #33 #100)
#98 := (= #32 #97)
#95 := (= #31 #94)
#92 := (= #30 #91)
#93 := [rewrite]: #92
#89 := (= #29 #88)
#90 := [rewrite]: #89
#96 := [monotonicity #90 #93]: #95
#86 := (iff #27 #85)
#83 := (iff #26 #81)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#99 := [monotonicity #87 #96]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#108 := [quant-intro #105]: #107
#143 := [trans #108 #141]: #142
#80 := [asserted]: #35
#144 := [mp #80 #143]: #139
#193 := [mp~ #144 #202]: #139
#224 := [mp #193 #223]: #221
#255 := [mp #224 #254]: #252
#748 := [mp #255 #747]: #743
#65 := -3::Int
#8 := 3::Int
#68 := (f3 3::Int -3::Int)
#74 := (= #68 -1::Int)
#77 := (not #74)
#11 := 1::Int
#12 := (- 1::Int)
#9 := (- 3::Int)
#10 := (f3 3::Int #9)
#13 := (= #10 #12)
#14 := (not #13)
#78 := (iff #14 #77)
#75 := (iff #13 #74)
#72 := (= #12 -1::Int)
#73 := [rewrite]: #72
#69 := (= #10 #68)
#66 := (= #9 -3::Int)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [monotonicity #70 #73]: #75
#79 := [monotonicity #76]: #78
#64 := [asserted]: #14
#82 := [mp #64 #79]: #77
#666 := (not #743)
#658 := (or #666 #74)
#329 := (* -1::Int -3::Int)
#413 := (* -1::Int 3::Int)
#414 := (div #413 #329)
#415 := (* -1::Int #414)
#406 := (+ #68 #415)
#417 := (= #406 0::Int)
#418 := (div 3::Int -3::Int)
#419 := (* -1::Int #418)
#416 := (+ #68 #419)
#420 := (= #416 0::Int)
#399 := (>= 3::Int 0::Int)
#734 := (<= -3::Int 0::Int)
#736 := (or #734 #399)
#393 := (not #736)
#523 := (<= 3::Int 0::Int)
#730 := (or #523 #734)
#404 := (not #730)
#405 := (or #404 #393)
#737 := (ite #405 #420 #417)
#738 := (= #68 0::Int)
#739 := (= -3::Int 0::Int)
#740 := (= 3::Int 0::Int)
#735 := (or #740 #739)
#741 := (ite #735 #738 #737)
#655 := (or #666 #741)
#667 := (iff #655 #658)
#669 := (iff #658 #658)
#665 := [rewrite]: #669
#677 := (iff #741 #74)
#581 := (ite false #738 #74)
#676 := (iff #581 #74)
#673 := [rewrite]: #676
#582 := (iff #741 #581)
#579 := (iff #737 #74)
#560 := (ite false #74 #74)
#578 := (iff #560 #74)
#571 := [rewrite]: #578
#575 := (iff #737 #560)
#672 := (iff #417 #74)
#700 := (+ 1::Int #68)
#544 := (= #700 0::Int)
#688 := (iff #544 #74)
#689 := [rewrite]: #688
#576 := (iff #417 #544)
#526 := (= #406 #700)
#699 := (+ #68 1::Int)
#701 := (= #699 #700)
#696 := [rewrite]: #701
#566 := (= #406 #699)
#683 := (= #415 1::Int)
#421 := (* -1::Int -1::Int)
#704 := (= #421 1::Int)
#708 := [rewrite]: #704
#682 := (= #415 #421)
#679 := (= #414 -1::Int)
#693 := (div -3::Int 3::Int)
#525 := (= #693 -1::Int)
#678 := [rewrite]: #525
#522 := (= #414 #693)
#692 := (= #329 3::Int)
#686 := [rewrite]: #692
#685 := (= #413 -3::Int)
#691 := [rewrite]: #685
#524 := [monotonicity #691 #686]: #522
#681 := [trans #524 #678]: #679
#680 := [monotonicity #681]: #682
#565 := [trans #680 #708]: #683
#567 := [monotonicity #565]: #566
#674 := [trans #567 #696]: #526
#671 := [monotonicity #674]: #576
#675 := [trans #671 #689]: #672
#690 := (iff #420 #74)
#545 := (iff #420 #544)
#702 := (= #416 #700)
#694 := (= #416 #699)
#697 := (= #419 1::Int)
#703 := (= #419 #421)
#705 := (= #418 -1::Int)
#706 := [rewrite]: #705
#707 := [monotonicity #706]: #703
#698 := [trans #707 #708]: #697
#695 := [monotonicity #698]: #694
#543 := [trans #695 #696]: #702
#687 := [monotonicity #543]: #545
#684 := [trans #687 #689]: #690
#426 := (iff #405 false)
#392 := (or false false)
#717 := (iff #392 false)
#380 := [rewrite]: #717
#424 := (iff #405 #392)
#710 := (iff #393 false)
#1 := true
#367 := (not true)
#726 := (iff #367 false)
#729 := [rewrite]: #726
#709 := (iff #393 #367)
#434 := (iff #736 true)
#440 := (or true true)
#711 := (iff #440 true)
#712 := [rewrite]: #711
#441 := (iff #736 #440)
#438 := (iff #399 true)
#439 := [rewrite]: #438
#720 := (iff #734 true)
#721 := [rewrite]: #720
#335 := [monotonicity #721 #439]: #441
#435 := [trans #335 #712]: #434
#713 := [monotonicity #435]: #709
#714 := [trans #713 #729]: #710
#715 := (iff #404 false)
#368 := (iff #404 #367)
#725 := (iff #730 true)
#722 := (or false true)
#724 := (iff #722 true)
#362 := [rewrite]: #724
#723 := (iff #730 #722)
#383 := (iff #523 false)
#719 := [rewrite]: #383
#718 := [monotonicity #719 #721]: #723
#727 := [trans #718 #362]: #725
#728 := [monotonicity #727]: #368
#716 := [trans #728 #729]: #715
#425 := [monotonicity #716 #714]: #424
#427 := [trans #425 #380]: #426
#577 := [monotonicity #427 #684 #675]: #575
#580 := [trans #577 #571]: #579
#381 := (iff #735 false)
#733 := (iff #735 #392)
#396 := (iff #739 false)
#732 := [rewrite]: #396
#731 := (iff #740 false)
#391 := [rewrite]: #731
#376 := [monotonicity #391 #732]: #733
#382 := [trans #376 #380]: #381
#583 := [monotonicity #382 #580]: #582
#664 := [trans #583 #673]: #677
#668 := [monotonicity #664]: #667
#670 := [trans #668 #665]: #667
#657 := [quant-inst #8 #65]: #655
#659 := [mp #657 #670]: #658
[unit-resolution #659 #82 #748]: false
unsat
ff5c5d19f29597667640ddc4ac233d7f220d9f19 321 0
#2 := false
decl f3 :: (-> Int Int Int)
#17 := (:var 0 Int)
#16 := (:var 1 Int)
#18 := (f3 #16 #17)
#745 := (pattern #18)
#19 := 0::Int
#89 := -1::Int
#93 := (* -1::Int #17)
#90 := (* -1::Int #16)
#96 := (div #90 #93)
#247 := (* -1::Int #96)
#248 := (+ #18 #247)
#249 := (= #248 0::Int)
#29 := (div #16 #17)
#244 := (* -1::Int #29)
#245 := (+ #18 #244)
#246 := (= #245 0::Int)
#122 := (>= #16 0::Int)
#115 := (<= #17 0::Int)
#207 := (or #115 #122)
#208 := (not #207)
#111 := (<= #16 0::Int)
#205 := (or #111 #115)
#206 := (not #205)
#211 := (or #206 #208)
#250 := (ite #211 #246 #249)
#243 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #16 0::Int)
#22 := (or #20 #21)
#251 := (ite #22 #243 #250)
#746 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #745) #251)
#254 := (forall (vars (?v0 Int) (?v1 Int)) #251)
#749 := (iff #254 #746)
#747 := (iff #251 #251)
#748 := [refl]: #747
#750 := [quant-intro #748]: #749
#214 := (ite #211 #29 #96)
#217 := (ite #22 0::Int #214)
#220 := (= #18 #217)
#223 := (forall (vars (?v0 Int) (?v1 Int)) #220)
#255 := (iff #223 #254)
#252 := (iff #220 #251)
#253 := [rewrite]: #252
#256 := [quant-intro #253]: #255
#123 := (not #122)
#116 := (not #115)
#126 := (and #116 #123)
#112 := (not #111)
#119 := (and #112 #116)
#129 := (or #119 #126)
#132 := (ite #129 #29 #96)
#135 := (ite #22 0::Int #132)
#138 := (= #18 #135)
#141 := (forall (vars (?v0 Int) (?v1 Int)) #138)
#224 := (iff #141 #223)
#221 := (iff #138 #220)
#218 := (= #135 #217)
#215 := (= #132 #214)
#212 := (iff #129 #211)
#209 := (iff #126 #208)
#210 := [rewrite]: #209
#199 := (iff #119 #206)
#200 := [rewrite]: #199
#213 := [monotonicity #200 #210]: #212
#216 := [monotonicity #213]: #215
#219 := [monotonicity #216]: #218
#222 := [monotonicity #219]: #221
#225 := [quant-intro #222]: #224
#203 := (~ #141 #141)
#201 := (~ #138 #138)
#202 := [refl]: #201
#204 := [nnf-pos #202]: #203
#31 := (- #17)
#30 := (- #16)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#144 := (iff #36 #141)
#82 := (and #24 #26)
#86 := (or #25 #82)
#99 := (ite #86 #29 #96)
#102 := (ite #22 0::Int #99)
#105 := (= #18 #102)
#108 := (forall (vars (?v0 Int) (?v1 Int)) #105)
#142 := (iff #108 #141)
#139 := (iff #105 #138)
#136 := (= #102 #135)
#133 := (= #99 #132)
#130 := (iff #86 #129)
#127 := (iff #82 #126)
#124 := (iff #26 #123)
#125 := [rewrite]: #124
#117 := (iff #24 #116)
#118 := [rewrite]: #117
#128 := [monotonicity #118 #125]: #127
#120 := (iff #25 #119)
#113 := (iff #23 #112)
#114 := [rewrite]: #113
#121 := [monotonicity #114 #118]: #120
#131 := [monotonicity #121 #128]: #130
#134 := [monotonicity #131]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#143 := [quant-intro #140]: #142
#109 := (iff #36 #108)
#106 := (iff #35 #105)
#103 := (= #34 #102)
#100 := (= #33 #99)
#97 := (= #32 #96)
#94 := (= #31 #93)
#95 := [rewrite]: #94
#91 := (= #30 #90)
#92 := [rewrite]: #91
#98 := [monotonicity #92 #95]: #97
#87 := (iff #28 #86)
#84 := (iff #27 #82)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#101 := [monotonicity #88 #98]: #100
#104 := [monotonicity #101]: #103
#107 := [monotonicity #104]: #106
#110 := [quant-intro #107]: #109
#145 := [trans #110 #143]: #144
#81 := [asserted]: #36
#146 := [mp #81 #145]: #141
#195 := [mp~ #146 #204]: #141
#226 := [mp #195 #225]: #223
#257 := [mp #226 #256]: #254
#751 := [mp #257 #750]: #746
#72 := -2::Int
#66 := -3::Int
#8 := 5::Int
#69 := (f3 5::Int -3::Int)
#75 := (= #69 -2::Int)
#78 := (not #75)
#12 := 2::Int
#13 := (- 2::Int)
#9 := 3::Int
#10 := (- 3::Int)
#11 := (f3 5::Int #10)
#14 := (= #11 #13)
#15 := (not #14)
#79 := (iff #15 #78)
#76 := (iff #14 #75)
#73 := (= #13 -2::Int)
#74 := [rewrite]: #73
#70 := (= #11 #69)
#67 := (= #10 -3::Int)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [monotonicity #71 #74]: #76
#80 := [monotonicity #77]: #79
#65 := [asserted]: #15
#83 := [mp #65 #80]: #78
#665 := (not #746)
#659 := (or #665 #75)
#331 := (* -1::Int -3::Int)
#416 := (* -1::Int 5::Int)
#417 := (div #416 #331)
#418 := (* -1::Int #417)
#409 := (+ #69 #418)
#420 := (= #409 0::Int)
#421 := (div 5::Int -3::Int)
#349 := (* -1::Int #421)
#422 := (+ #69 #349)
#419 := (= #422 0::Int)
#423 := (>= 5::Int 0::Int)
#402 := (<= -3::Int 0::Int)
#737 := (or #402 #423)
#739 := (not #737)
#396 := (<= 5::Int 0::Int)
#526 := (or #396 #402)
#733 := (not #526)
#407 := (or #733 #739)
#408 := (ite #407 #419 #420)
#740 := (= #69 0::Int)
#741 := (= -3::Int 0::Int)
#742 := (= 5::Int 0::Int)
#743 := (or #742 #741)
#738 := (ite #743 #740 #408)
#666 := (or #665 #738)
#651 := (iff #666 #659)
#654 := (iff #659 #659)
#655 := [rewrite]: #654
#663 := (iff #738 #75)
#671 := (ite false #740 #75)
#673 := (iff #671 #75)
#662 := [rewrite]: #673
#672 := (iff #738 #671)
#660 := (iff #408 #75)
#691 := (= #69 -1::Int)
#680 := (ite false #691 #75)
#661 := (iff #680 #75)
#658 := [rewrite]: #661
#667 := (iff #408 #680)
#679 := (iff #420 #75)
#563 := (+ 2::Int #69)
#582 := (= #563 0::Int)
#585 := (iff #582 #75)
#586 := [rewrite]: #585
#583 := (iff #420 #582)
#581 := (= #409 #563)
#674 := (+ #69 2::Int)
#578 := (= #674 #563)
#580 := [rewrite]: #578
#675 := (= #409 #674)
#677 := (= #418 2::Int)
#686 := (* -1::Int -2::Int)
#570 := (= #686 2::Int)
#529 := [rewrite]: #570
#568 := (= #418 #686)
#685 := (= #417 -2::Int)
#694 := -5::Int
#527 := (div -5::Int 3::Int)
#682 := (= #527 -2::Int)
#684 := [rewrite]: #682
#528 := (= #417 #527)
#696 := (= #331 3::Int)
#525 := [rewrite]: #696
#695 := (= #416 -5::Int)
#689 := [rewrite]: #695
#681 := [monotonicity #689 #525]: #528
#683 := [trans #681 #684]: #685
#569 := [monotonicity #683]: #568
#579 := [trans #569 #529]: #677
#678 := [monotonicity #579]: #675
#574 := [trans #678 #580]: #581
#584 := [monotonicity #574]: #583
#676 := [trans #584 #586]: #679
#687 := (iff #419 #691)
#710 := 1::Int
#703 := (+ 1::Int #69)
#547 := (= #703 0::Int)
#692 := (iff #547 #691)
#693 := [rewrite]: #692
#548 := (iff #419 #547)
#705 := (= #422 #703)
#702 := (+ #69 1::Int)
#704 := (= #702 #703)
#699 := [rewrite]: #704
#697 := (= #422 #702)
#700 := (= #349 1::Int)
#709 := (* -1::Int -1::Int)
#707 := (= #709 1::Int)
#711 := [rewrite]: #707
#424 := (= #349 #709)
#430 := (= #421 -1::Int)
#708 := [rewrite]: #430
#706 := [monotonicity #708]: #424
#701 := [trans #706 #711]: #700
#698 := [monotonicity #701]: #697
#546 := [trans #698 #699]: #705
#690 := [monotonicity #546]: #548
#688 := [trans #690 #693]: #687
#428 := (iff #407 false)
#735 := (or false false)
#379 := (iff #735 false)
#720 := [rewrite]: #379
#717 := (iff #407 #735)
#716 := (iff #739 false)
#1 := true
#730 := (not true)
#731 := (iff #730 false)
#729 := [rewrite]: #731
#438 := (iff #739 #730)
#715 := (iff #737 true)
#442 := (or true true)
#337 := (iff #442 true)
#714 := [rewrite]: #337
#443 := (iff #737 #442)
#719 := (iff #423 true)
#441 := [rewrite]: #719
#722 := (iff #402 true)
#723 := [rewrite]: #722
#444 := [monotonicity #723 #441]: #443
#437 := [trans #444 #714]: #715
#712 := [monotonicity #437]: #438
#713 := [trans #712 #729]: #716
#732 := (iff #733 false)
#370 := (iff #733 #730)
#365 := (iff #526 true)
#724 := (or false true)
#721 := (iff #724 true)
#727 := [rewrite]: #721
#725 := (iff #526 #724)
#385 := (iff #396 false)
#386 := [rewrite]: #385
#726 := [monotonicity #386 #723]: #725
#728 := [trans #726 #727]: #365
#371 := [monotonicity #728]: #370
#718 := [trans #371 #729]: #732
#427 := [monotonicity #718 #713]: #717
#429 := [trans #427 #720]: #428
#669 := [monotonicity #429 #688 #676]: #667
#670 := [trans #669 #658]: #660
#383 := (iff #743 false)
#395 := (iff #743 #735)
#394 := (iff #741 false)
#399 := [rewrite]: #394
#744 := (iff #742 false)
#734 := [rewrite]: #744
#736 := [monotonicity #734 #399]: #395
#384 := [trans #736 #720]: #383
#668 := [monotonicity #384 #670]: #672
#664 := [trans #668 #662]: #663
#653 := [monotonicity #664]: #651
#656 := [trans #653 #655]: #651
#650 := [quant-inst #8 #66]: #666
#652 := [mp #650 #656]: #659
[unit-resolution #652 #83 #751]: false
unsat
3b09e93d3eb1701446a8a6f0f64071b3ee25d56a 319 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#16 := (f3 #14 #15)
#750 := (pattern #16)
#17 := 0::Int
#64 := -1::Int
#99 := (* -1::Int #15)
#96 := (* -1::Int #14)
#102 := (div #96 #99)
#253 := (* -1::Int #102)
#254 := (+ #16 #253)
#255 := (= #254 0::Int)
#27 := (div #14 #15)
#250 := (* -1::Int #27)
#251 := (+ #16 #250)
#252 := (= #251 0::Int)
#128 := (>= #14 0::Int)
#121 := (<= #15 0::Int)
#213 := (or #121 #128)
#214 := (not #213)
#117 := (<= #14 0::Int)
#211 := (or #117 #121)
#212 := (not #211)
#217 := (or #212 #214)
#256 := (ite #217 #252 #255)
#249 := (= #16 0::Int)
#19 := (= #15 0::Int)
#18 := (= #14 0::Int)
#20 := (or #18 #19)
#257 := (ite #20 #249 #256)
#751 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #750) #257)
#260 := (forall (vars (?v0 Int) (?v1 Int)) #257)
#754 := (iff #260 #751)
#752 := (iff #257 #257)
#753 := [refl]: #752
#755 := [quant-intro #753]: #754
#220 := (ite #217 #27 #102)
#223 := (ite #20 0::Int #220)
#226 := (= #16 #223)
#229 := (forall (vars (?v0 Int) (?v1 Int)) #226)
#261 := (iff #229 #260)
#258 := (iff #226 #257)
#259 := [rewrite]: #258
#262 := [quant-intro #259]: #261
#129 := (not #128)
#122 := (not #121)
#132 := (and #122 #129)
#118 := (not #117)
#125 := (and #118 #122)
#135 := (or #125 #132)
#138 := (ite #135 #27 #102)
#141 := (ite #20 0::Int #138)
#144 := (= #16 #141)
#147 := (forall (vars (?v0 Int) (?v1 Int)) #144)
#230 := (iff #147 #229)
#227 := (iff #144 #226)
#224 := (= #141 #223)
#221 := (= #138 #220)
#218 := (iff #135 #217)
#215 := (iff #132 #214)
#216 := [rewrite]: #215
#205 := (iff #125 #212)
#206 := [rewrite]: #205
#219 := [monotonicity #206 #216]: #218
#222 := [monotonicity #219]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [quant-intro #228]: #230
#209 := (~ #147 #147)
#207 := (~ #144 #144)
#208 := [refl]: #207
#210 := [nnf-pos #208]: #209
#29 := (- #15)
#28 := (- #14)
#30 := (div #28 #29)
#22 := (< 0::Int #15)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (ite #26 #27 #30)
#32 := (ite #20 0::Int #31)
#33 := (= #16 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#150 := (iff #34 #147)
#90 := (and #22 #24)
#93 := (or #23 #90)
#105 := (ite #93 #27 #102)
#108 := (ite #20 0::Int #105)
#111 := (= #16 #108)
#114 := (forall (vars (?v0 Int) (?v1 Int)) #111)
#148 := (iff #114 #147)
#145 := (iff #111 #144)
#142 := (= #108 #141)
#139 := (= #105 #138)
#136 := (iff #93 #135)
#133 := (iff #90 #132)
#130 := (iff #24 #129)
#131 := [rewrite]: #130
#123 := (iff #22 #122)
#124 := [rewrite]: #123
#134 := [monotonicity #124 #131]: #133
#126 := (iff #23 #125)
#119 := (iff #21 #118)
#120 := [rewrite]: #119
#127 := [monotonicity #120 #124]: #126
#137 := [monotonicity #127 #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [quant-intro #146]: #148
#115 := (iff #34 #114)
#112 := (iff #33 #111)
#109 := (= #32 #108)
#106 := (= #31 #105)
#103 := (= #30 #102)
#100 := (= #29 #99)
#101 := [rewrite]: #100
#97 := (= #28 #96)
#98 := [rewrite]: #97
#104 := [monotonicity #98 #101]: #103
#94 := (iff #26 #93)
#91 := (iff #25 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#107 := [monotonicity #95 #104]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#116 := [quant-intro #113]: #115
#151 := [trans #116 #149]: #150
#89 := [asserted]: #34
#152 := [mp #89 #151]: #147
#201 := [mp~ #152 #210]: #147
#232 := [mp #201 #231]: #229
#263 := [mp #232 #262]: #260
#756 := [mp #263 #755]: #751
#10 := 3::Int
#67 := (f3 -1::Int 3::Int)
#70 := (= #67 -1::Int)
#83 := (not #70)
#8 := 1::Int
#9 := (- 1::Int)
#11 := (f3 #9 3::Int)
#12 := (= #11 #9)
#13 := (not #12)
#86 := (iff #13 #83)
#73 := (= -1::Int #67)
#78 := (not #73)
#84 := (iff #78 #83)
#81 := (iff #73 #70)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#79 := (iff #13 #78)
#76 := (iff #12 #73)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #12 #70)
#65 := (= #9 -1::Int)
#66 := [rewrite]: #65
#68 := (= #11 #67)
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69 #66]: #71
#77 := [trans #72 #75]: #76
#80 := [monotonicity #77]: #79
#87 := [trans #80 #85]: #86
#63 := [asserted]: #13
#88 := [mp #63 #87]: #83
#676 := (not #751)
#677 := (or #676 #70)
#337 := (* -1::Int 3::Int)
#421 := (* -1::Int -1::Int)
#422 := (div #421 #337)
#423 := (* -1::Int #422)
#414 := (+ #67 #423)
#425 := (= #414 0::Int)
#426 := (div -1::Int 3::Int)
#427 := (* -1::Int #426)
#424 := (+ #67 #427)
#428 := (= #424 0::Int)
#407 := (>= -1::Int 0::Int)
#742 := (<= 3::Int 0::Int)
#744 := (or #742 #407)
#401 := (not #744)
#531 := (<= -1::Int 0::Int)
#738 := (or #531 #742)
#412 := (not #738)
#413 := (or #412 #401)
#745 := (ite #413 #428 #425)
#746 := (= #67 0::Int)
#747 := (= 3::Int 0::Int)
#748 := (= -1::Int 0::Int)
#743 := (or #748 #747)
#749 := (ite #743 #746 #745)
#673 := (or #676 #749)
#667 := (iff #673 #677)
#669 := (iff #677 #677)
#670 := [rewrite]: #669
#665 := (iff #749 #70)
#685 := (ite false #746 #70)
#666 := (iff #685 #70)
#663 := [rewrite]: #666
#672 := (iff #749 #685)
#684 := (iff #745 #70)
#1 := true
#587 := (ite true #70 #746)
#590 := (iff #587 #70)
#591 := [rewrite]: #590
#588 := (iff #745 #587)
#586 := (iff #425 #746)
#583 := (= #414 #67)
#584 := (+ #67 0::Int)
#683 := (= #584 #67)
#568 := [rewrite]: #683
#679 := (= #414 #584)
#534 := (= #423 0::Int)
#688 := (* -1::Int 0::Int)
#574 := (= #688 0::Int)
#575 := [rewrite]: #574
#691 := (= #423 #688)
#689 := (= #422 0::Int)
#700 := -3::Int
#530 := (div 1::Int -3::Int)
#686 := (= #530 0::Int)
#687 := [rewrite]: #686
#532 := (= #422 #530)
#694 := (= #337 -3::Int)
#701 := [rewrite]: #694
#705 := (= #421 1::Int)
#706 := [rewrite]: #705
#533 := [monotonicity #706 #701]: #532
#690 := [trans #533 #687]: #689
#573 := [monotonicity #690]: #691
#682 := [trans #573 #575]: #534
#680 := [monotonicity #682]: #679
#585 := [trans #680 #568]: #583
#579 := [monotonicity #585]: #586
#693 := (iff #428 #70)
#704 := (+ 1::Int #67)
#695 := (= #704 0::Int)
#698 := (iff #695 #70)
#692 := [rewrite]: #698
#696 := (iff #428 #695)
#552 := (= #424 #704)
#703 := (+ #67 1::Int)
#710 := (= #703 #704)
#551 := [rewrite]: #710
#708 := (= #424 #703)
#707 := (= #427 1::Int)
#712 := (= #427 #421)
#711 := (= #426 -1::Int)
#715 := [rewrite]: #711
#716 := [monotonicity #715]: #712
#702 := [trans #716 #706]: #707
#709 := [monotonicity #702]: #708
#553 := [trans #709 #551]: #552
#697 := [monotonicity #553]: #696
#699 := [trans #697 #692]: #693
#714 := (iff #413 true)
#432 := (or false true)
#435 := (iff #432 true)
#713 := [rewrite]: #435
#433 := (iff #413 #432)
#718 := (iff #401 true)
#720 := (not false)
#717 := (iff #720 true)
#721 := [rewrite]: #717
#442 := (iff #401 #720)
#343 := (iff #744 false)
#400 := (or false false)
#725 := (iff #400 false)
#388 := [rewrite]: #725
#448 := (iff #744 #400)
#446 := (iff #407 false)
#447 := [rewrite]: #446
#728 := (iff #742 false)
#729 := [rewrite]: #728
#449 := [monotonicity #729 #447]: #448
#719 := [trans #449 #388]: #343
#443 := [monotonicity #719]: #442
#722 := [trans #443 #721]: #718
#723 := (iff #412 false)
#375 := (not true)
#734 := (iff #375 false)
#737 := [rewrite]: #734
#376 := (iff #412 #375)
#733 := (iff #738 true)
#730 := (or true false)
#732 := (iff #730 true)
#370 := [rewrite]: #732
#731 := (iff #738 #730)
#391 := (iff #531 true)
#727 := [rewrite]: #391
#726 := [monotonicity #727 #729]: #731
#735 := [trans #726 #370]: #733
#736 := [monotonicity #735]: #376
#724 := [trans #736 #737]: #723
#434 := [monotonicity #724 #722]: #433
#429 := [trans #434 #713]: #714
#589 := [monotonicity #429 #699 #579]: #588
#681 := [trans #589 #591]: #684
#389 := (iff #743 false)
#741 := (iff #743 #400)
#404 := (iff #747 false)
#740 := [rewrite]: #404
#739 := (iff #748 false)
#399 := [rewrite]: #739
#384 := [monotonicity #399 #740]: #741
#390 := [trans #384 #388]: #389
#674 := [monotonicity #390 #681]: #672
#675 := [trans #674 #663]: #665
#668 := [monotonicity #675]: #667
#664 := [trans #668 #670]: #667
#678 := [quant-inst #64 #10]: #673
#671 := [mp #678 #664]: #677
[unit-resolution #671 #88 #756]: false
unsat
896650ef8f75fd8ef47b1c1a736049dce2114a91 309 0
#2 := false
decl f3 :: (-> Int Int Int)
#16 := (:var 0 Int)
#15 := (:var 1 Int)
#17 := (f3 #15 #16)
#742 := (pattern #17)
#18 := 0::Int
#71 := -1::Int
#91 := (* -1::Int #16)
#88 := (* -1::Int #15)
#94 := (div #88 #91)
#245 := (* -1::Int #94)
#246 := (+ #17 #245)
#247 := (= #246 0::Int)
#28 := (div #15 #16)
#242 := (* -1::Int #28)
#243 := (+ #17 #242)
#244 := (= #243 0::Int)
#120 := (>= #15 0::Int)
#113 := (<= #16 0::Int)
#205 := (or #113 #120)
#206 := (not #205)
#109 := (<= #15 0::Int)
#203 := (or #109 #113)
#204 := (not #203)
#209 := (or #204 #206)
#248 := (ite #209 #244 #247)
#241 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#249 := (ite #21 #241 #248)
#743 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #742) #249)
#252 := (forall (vars (?v0 Int) (?v1 Int)) #249)
#746 := (iff #252 #743)
#744 := (iff #249 #249)
#745 := [refl]: #744
#747 := [quant-intro #745]: #746
#212 := (ite #209 #28 #94)
#215 := (ite #21 0::Int #212)
#218 := (= #17 #215)
#221 := (forall (vars (?v0 Int) (?v1 Int)) #218)
#253 := (iff #221 #252)
#250 := (iff #218 #249)
#251 := [rewrite]: #250
#254 := [quant-intro #251]: #253
#121 := (not #120)
#114 := (not #113)
#124 := (and #114 #121)
#110 := (not #109)
#117 := (and #110 #114)
#127 := (or #117 #124)
#130 := (ite #127 #28 #94)
#133 := (ite #21 0::Int #130)
#136 := (= #17 #133)
#139 := (forall (vars (?v0 Int) (?v1 Int)) #136)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#216 := (= #133 #215)
#213 := (= #130 #212)
#210 := (iff #127 #209)
#207 := (iff #124 #206)
#208 := [rewrite]: #207
#197 := (iff #117 #204)
#198 := [rewrite]: #197
#211 := [monotonicity #198 #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [monotonicity #217]: #219
#223 := [quant-intro #220]: #222
#201 := (~ #139 #139)
#199 := (~ #136 #136)
#200 := [refl]: #199
#202 := [nnf-pos #200]: #201
#30 := (- #16)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (ite #27 #28 #31)
#33 := (ite #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#142 := (iff #35 #139)
#81 := (and #23 #25)
#85 := (or #24 #81)
#97 := (ite #85 #28 #94)
#100 := (ite #21 0::Int #97)
#103 := (= #17 #100)
#106 := (forall (vars (?v0 Int) (?v1 Int)) #103)
#140 := (iff #106 #139)
#137 := (iff #103 #136)
#134 := (= #100 #133)
#131 := (= #97 #130)
#128 := (iff #85 #127)
#125 := (iff #81 #124)
#122 := (iff #25 #121)
#123 := [rewrite]: #122
#115 := (iff #23 #114)
#116 := [rewrite]: #115
#126 := [monotonicity #116 #123]: #125
#118 := (iff #24 #117)
#111 := (iff #22 #110)
#112 := [rewrite]: #111
#119 := [monotonicity #112 #116]: #118
#129 := [monotonicity #119 #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [quant-intro #138]: #140
#107 := (iff #35 #106)
#104 := (iff #34 #103)
#101 := (= #33 #100)
#98 := (= #32 #97)
#95 := (= #31 #94)
#92 := (= #30 #91)
#93 := [rewrite]: #92
#89 := (= #29 #88)
#90 := [rewrite]: #89
#96 := [monotonicity #90 #93]: #95
#86 := (iff #27 #85)
#83 := (iff #26 #81)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#99 := [monotonicity #87 #96]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#108 := [quant-intro #105]: #107
#143 := [trans #108 #141]: #142
#80 := [asserted]: #35
#144 := [mp #80 #143]: #139
#193 := [mp~ #144 #202]: #139
#224 := [mp #193 #223]: #221
#255 := [mp #224 #254]: #252
#748 := [mp #255 #747]: #743
#8 := 3::Int
#65 := -3::Int
#68 := (f3 -3::Int 3::Int)
#74 := (= #68 -1::Int)
#77 := (not #74)
#11 := 1::Int
#12 := (- 1::Int)
#9 := (- 3::Int)
#10 := (f3 #9 3::Int)
#13 := (= #10 #12)
#14 := (not #13)
#78 := (iff #14 #77)
#75 := (iff #13 #74)
#72 := (= #12 -1::Int)
#73 := [rewrite]: #72
#69 := (= #10 #68)
#66 := (= #9 -3::Int)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [monotonicity #70 #73]: #75
#79 := [monotonicity #76]: #78
#64 := [asserted]: #14
#82 := [mp #64 #79]: #77
#657 := (not #743)
#667 := (or #657 #74)
#329 := (* -1::Int 3::Int)
#413 := (* -1::Int -3::Int)
#414 := (div #413 #329)
#415 := (* -1::Int #414)
#406 := (+ #68 #415)
#417 := (= #406 0::Int)
#418 := (div -3::Int 3::Int)
#419 := (* -1::Int #418)
#416 := (+ #68 #419)
#420 := (= #416 0::Int)
#399 := (>= -3::Int 0::Int)
#734 := (<= 3::Int 0::Int)
#736 := (or #734 #399)
#393 := (not #736)
#523 := (<= -3::Int 0::Int)
#730 := (or #523 #734)
#404 := (not #730)
#405 := (or #404 #393)
#737 := (ite #405 #420 #417)
#738 := (= #68 0::Int)
#739 := (= 3::Int 0::Int)
#740 := (= -3::Int 0::Int)
#735 := (or #740 #739)
#741 := (ite #735 #738 #737)
#668 := (or #657 #741)
#665 := (iff #668 #667)
#659 := (iff #667 #667)
#660 := [rewrite]: #659
#658 := (iff #741 #74)
#676 := (ite false #738 #74)
#664 := (iff #676 #74)
#666 := [rewrite]: #664
#673 := (iff #741 #676)
#582 := (iff #737 #74)
#1 := true
#578 := (ite true #74 #74)
#580 := (iff #578 #74)
#581 := [rewrite]: #580
#571 := (iff #737 #578)
#575 := (iff #417 #74)
#702 := (+ 1::Int #68)
#688 := (= #702 0::Int)
#684 := (iff #688 #74)
#685 := [rewrite]: #684
#675 := (iff #417 #688)
#671 := (= #406 #702)
#700 := (+ #68 1::Int)
#543 := (= #700 #702)
#544 := [rewrite]: #543
#674 := (= #406 #700)
#567 := (= #415 1::Int)
#704 := (* -1::Int -1::Int)
#698 := (= #704 1::Int)
#699 := [rewrite]: #698
#565 := (= #415 #704)
#680 := (= #414 -1::Int)
#525 := (div 3::Int -3::Int)
#681 := (= #525 -1::Int)
#682 := [rewrite]: #681
#678 := (= #414 #525)
#522 := (= #329 -3::Int)
#524 := [rewrite]: #522
#686 := (= #413 3::Int)
#693 := [rewrite]: #686
#679 := [monotonicity #693 #524]: #678
#683 := [trans #679 #682]: #680
#566 := [monotonicity #683]: #565
#526 := [trans #566 #699]: #567
#576 := [monotonicity #526]: #674
#672 := [trans #576 #544]: #671
#560 := [monotonicity #672]: #675
#577 := [trans #560 #685]: #575
#691 := (iff #420 #74)
#689 := (iff #420 #688)
#545 := (= #416 #702)
#701 := (= #416 #700)
#694 := (= #419 1::Int)
#708 := (= #419 #704)
#703 := (= #418 -1::Int)
#707 := [rewrite]: #703
#697 := [monotonicity #707]: #708
#695 := [trans #697 #699]: #694
#696 := [monotonicity #695]: #701
#687 := [trans #696 #544]: #545
#690 := [monotonicity #687]: #689
#692 := [trans #690 #685]: #691
#706 := (iff #405 true)
#424 := (or false true)
#427 := (iff #424 true)
#705 := [rewrite]: #427
#425 := (iff #405 #424)
#710 := (iff #393 true)
#712 := (not false)
#709 := (iff #712 true)
#713 := [rewrite]: #709
#434 := (iff #393 #712)
#335 := (iff #736 false)
#392 := (or false false)
#717 := (iff #392 false)
#380 := [rewrite]: #717
#440 := (iff #736 #392)
#438 := (iff #399 false)
#439 := [rewrite]: #438
#720 := (iff #734 false)
#721 := [rewrite]: #720
#441 := [monotonicity #721 #439]: #440
#711 := [trans #441 #380]: #335
#435 := [monotonicity #711]: #434
#714 := [trans #435 #713]: #710
#715 := (iff #404 false)
#367 := (not true)
#726 := (iff #367 false)
#729 := [rewrite]: #726
#368 := (iff #404 #367)
#725 := (iff #730 true)
#722 := (or true false)
#724 := (iff #722 true)
#362 := [rewrite]: #724
#723 := (iff #730 #722)
#383 := (iff #523 true)
#719 := [rewrite]: #383
#718 := [monotonicity #719 #721]: #723
#727 := [trans #718 #362]: #725
#728 := [monotonicity #727]: #368
#716 := [trans #728 #729]: #715
#426 := [monotonicity #716 #714]: #425
#421 := [trans #426 #705]: #706
#579 := [monotonicity #421 #692 #577]: #571
#583 := [trans #579 #581]: #582
#381 := (iff #735 false)
#733 := (iff #735 #392)
#396 := (iff #739 false)
#732 := [rewrite]: #396
#731 := (iff #740 false)
#391 := [rewrite]: #731
#376 := [monotonicity #391 #732]: #733
#382 := [trans #376 #380]: #381
#677 := [monotonicity #382 #583]: #673
#655 := [trans #677 #666]: #658
#670 := [monotonicity #655]: #665
#661 := [trans #670 #660]: #665
#669 := [quant-inst #65 #8]: #668
#662 := [mp #669 #661]: #667
[unit-resolution #662 #82 #748]: false
unsat
5e9e5ffc31aa8934508da0815460298eed868a8c 324 0
#2 := false
decl f3 :: (-> Int Int Int)
#17 := (:var 0 Int)
#16 := (:var 1 Int)
#18 := (f3 #16 #17)
#745 := (pattern #18)
#19 := 0::Int
#89 := -1::Int
#93 := (* -1::Int #17)
#90 := (* -1::Int #16)
#96 := (div #90 #93)
#247 := (* -1::Int #96)
#248 := (+ #18 #247)
#249 := (= #248 0::Int)
#29 := (div #16 #17)
#244 := (* -1::Int #29)
#245 := (+ #18 #244)
#246 := (= #245 0::Int)
#122 := (>= #16 0::Int)
#115 := (<= #17 0::Int)
#207 := (or #115 #122)
#208 := (not #207)
#111 := (<= #16 0::Int)
#205 := (or #111 #115)
#206 := (not #205)
#211 := (or #206 #208)
#250 := (ite #211 #246 #249)
#243 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #16 0::Int)
#22 := (or #20 #21)
#251 := (ite #22 #243 #250)
#746 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #745) #251)
#254 := (forall (vars (?v0 Int) (?v1 Int)) #251)
#749 := (iff #254 #746)
#747 := (iff #251 #251)
#748 := [refl]: #747
#750 := [quant-intro #748]: #749
#214 := (ite #211 #29 #96)
#217 := (ite #22 0::Int #214)
#220 := (= #18 #217)
#223 := (forall (vars (?v0 Int) (?v1 Int)) #220)
#255 := (iff #223 #254)
#252 := (iff #220 #251)
#253 := [rewrite]: #252
#256 := [quant-intro #253]: #255
#123 := (not #122)
#116 := (not #115)
#126 := (and #116 #123)
#112 := (not #111)
#119 := (and #112 #116)
#129 := (or #119 #126)
#132 := (ite #129 #29 #96)
#135 := (ite #22 0::Int #132)
#138 := (= #18 #135)
#141 := (forall (vars (?v0 Int) (?v1 Int)) #138)
#224 := (iff #141 #223)
#221 := (iff #138 #220)
#218 := (= #135 #217)
#215 := (= #132 #214)
#212 := (iff #129 #211)
#209 := (iff #126 #208)
#210 := [rewrite]: #209
#199 := (iff #119 #206)
#200 := [rewrite]: #199
#213 := [monotonicity #200 #210]: #212
#216 := [monotonicity #213]: #215
#219 := [monotonicity #216]: #218
#222 := [monotonicity #219]: #221
#225 := [quant-intro #222]: #224
#203 := (~ #141 #141)
#201 := (~ #138 #138)
#202 := [refl]: #201
#204 := [nnf-pos #202]: #203
#31 := (- #17)
#30 := (- #16)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#144 := (iff #36 #141)
#82 := (and #24 #26)
#86 := (or #25 #82)
#99 := (ite #86 #29 #96)
#102 := (ite #22 0::Int #99)
#105 := (= #18 #102)
#108 := (forall (vars (?v0 Int) (?v1 Int)) #105)
#142 := (iff #108 #141)
#139 := (iff #105 #138)
#136 := (= #102 #135)
#133 := (= #99 #132)
#130 := (iff #86 #129)
#127 := (iff #82 #126)
#124 := (iff #26 #123)
#125 := [rewrite]: #124
#117 := (iff #24 #116)
#118 := [rewrite]: #117
#128 := [monotonicity #118 #125]: #127
#120 := (iff #25 #119)
#113 := (iff #23 #112)
#114 := [rewrite]: #113
#121 := [monotonicity #114 #118]: #120
#131 := [monotonicity #121 #128]: #130
#134 := [monotonicity #131]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#143 := [quant-intro #140]: #142
#109 := (iff #36 #108)
#106 := (iff #35 #105)
#103 := (= #34 #102)
#100 := (= #33 #99)
#97 := (= #32 #96)
#94 := (= #31 #93)
#95 := [rewrite]: #94
#91 := (= #30 #90)
#92 := [rewrite]: #91
#98 := [monotonicity #92 #95]: #97
#87 := (iff #28 #86)
#84 := (iff #27 #82)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#101 := [monotonicity #88 #98]: #100
#104 := [monotonicity #101]: #103
#107 := [monotonicity #104]: #106
#110 := [quant-intro #107]: #109
#145 := [trans #110 #143]: #144
#81 := [asserted]: #36
#146 := [mp #81 #145]: #141
#195 := [mp~ #146 #204]: #141
#226 := [mp #195 #225]: #223
#257 := [mp #226 #256]: #254
#751 := [mp #257 #750]: #746
#72 := -2::Int
#10 := 3::Int
#66 := -5::Int
#69 := (f3 -5::Int 3::Int)
#75 := (= #69 -2::Int)
#78 := (not #75)
#12 := 2::Int
#13 := (- 2::Int)
#8 := 5::Int
#9 := (- 5::Int)
#11 := (f3 #9 3::Int)
#14 := (= #11 #13)
#15 := (not #14)
#79 := (iff #15 #78)
#76 := (iff #14 #75)
#73 := (= #13 -2::Int)
#74 := [rewrite]: #73
#70 := (= #11 #69)
#67 := (= #9 -5::Int)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [monotonicity #71 #74]: #76
#80 := [monotonicity #77]: #79
#65 := [asserted]: #15
#83 := [mp #65 #80]: #78
#650 := (not #746)
#651 := (or #650 #75)
#331 := (* -1::Int 3::Int)
#416 := (* -1::Int -5::Int)
#417 := (div #416 #331)
#418 := (* -1::Int #417)
#409 := (+ #69 #418)
#420 := (= #409 0::Int)
#421 := (div -5::Int 3::Int)
#349 := (* -1::Int #421)
#422 := (+ #69 #349)
#419 := (= #422 0::Int)
#423 := (>= -5::Int 0::Int)
#402 := (<= 3::Int 0::Int)
#737 := (or #402 #423)
#739 := (not #737)
#396 := (<= -5::Int 0::Int)
#526 := (or #396 #402)
#733 := (not #526)
#407 := (or #733 #739)
#408 := (ite #407 #419 #420)
#740 := (= #69 0::Int)
#741 := (= 3::Int 0::Int)
#742 := (= -5::Int 0::Int)
#743 := (or #742 #741)
#738 := (ite #743 #740 #408)
#653 := (or #650 #738)
#655 := (iff #653 #651)
#652 := (iff #651 #651)
#657 := [rewrite]: #652
#659 := (iff #738 #75)
#673 := (ite false #740 #75)
#664 := (iff #673 #75)
#665 := [rewrite]: #664
#662 := (iff #738 #673)
#672 := (iff #408 #75)
#679 := (= #69 -1::Int)
#1 := true
#661 := (ite true #75 #679)
#670 := (iff #661 #75)
#671 := [rewrite]: #670
#658 := (iff #408 #661)
#667 := (iff #420 #679)
#529 := 1::Int
#580 := (+ 1::Int #69)
#584 := (= #580 0::Int)
#676 := (iff #584 #679)
#680 := [rewrite]: #676
#585 := (iff #420 #584)
#582 := (= #409 #580)
#678 := (+ #69 1::Int)
#581 := (= #678 #580)
#574 := [rewrite]: #581
#563 := (= #409 #678)
#674 := (= #418 1::Int)
#568 := (* -1::Int -1::Int)
#677 := (= #568 1::Int)
#579 := [rewrite]: #677
#569 := (= #418 #568)
#683 := (= #417 -1::Int)
#696 := -3::Int
#528 := (div 5::Int -3::Int)
#684 := (= #528 -1::Int)
#685 := [rewrite]: #684
#681 := (= #417 #528)
#525 := (= #331 -3::Int)
#527 := [rewrite]: #525
#695 := (= #416 5::Int)
#689 := [rewrite]: #695
#682 := [monotonicity #689 #527]: #681
#686 := [trans #682 #685]: #683
#570 := [monotonicity #686]: #569
#675 := [trans #570 #579]: #674
#578 := [monotonicity #675]: #563
#583 := [trans #578 #574]: #582
#586 := [monotonicity #583]: #585
#669 := [trans #586 #680]: #667
#688 := (iff #419 #75)
#699 := (+ 2::Int #69)
#690 := (= #699 0::Int)
#693 := (iff #690 #75)
#687 := [rewrite]: #693
#691 := (iff #419 #690)
#547 := (= #422 #699)
#698 := (+ #69 2::Int)
#705 := (= #698 #699)
#546 := [rewrite]: #705
#703 := (= #422 #698)
#702 := (= #349 2::Int)
#710 := (* -1::Int -2::Int)
#700 := (= #710 2::Int)
#701 := [rewrite]: #700
#707 := (= #349 #710)
#424 := (= #421 -2::Int)
#706 := [rewrite]: #424
#711 := [monotonicity #706]: #707
#697 := [trans #711 #701]: #702
#704 := [monotonicity #697]: #703
#548 := [trans #704 #546]: #547
#692 := [monotonicity #548]: #691
#694 := [trans #692 #687]: #688
#708 := (iff #407 true)
#717 := (or false true)
#429 := (iff #717 true)
#430 := [rewrite]: #429
#427 := (iff #407 #717)
#716 := (iff #739 true)
#714 := (not false)
#438 := (iff #714 true)
#712 := [rewrite]: #438
#715 := (iff #739 #714)
#444 := (iff #737 false)
#735 := (or false false)
#379 := (iff #735 false)
#720 := [rewrite]: #379
#442 := (iff #737 #735)
#719 := (iff #423 false)
#441 := [rewrite]: #719
#722 := (iff #402 false)
#723 := [rewrite]: #722
#443 := [monotonicity #723 #441]: #442
#337 := [trans #443 #720]: #444
#437 := [monotonicity #337]: #715
#713 := [trans #437 #712]: #716
#732 := (iff #733 false)
#730 := (not true)
#731 := (iff #730 false)
#729 := [rewrite]: #731
#370 := (iff #733 #730)
#365 := (iff #526 true)
#724 := (or true false)
#721 := (iff #724 true)
#727 := [rewrite]: #721
#725 := (iff #526 #724)
#385 := (iff #396 true)
#386 := [rewrite]: #385
#726 := [monotonicity #386 #723]: #725
#728 := [trans #726 #727]: #365
#371 := [monotonicity #728]: #370
#718 := [trans #371 #729]: #732
#428 := [monotonicity #718 #713]: #427
#709 := [trans #428 #430]: #708
#660 := [monotonicity #709 #694 #669]: #658
#668 := [trans #660 #671]: #672
#383 := (iff #743 false)
#395 := (iff #743 #735)
#394 := (iff #741 false)
#399 := [rewrite]: #394
#744 := (iff #742 false)
#734 := [rewrite]: #744
#736 := [monotonicity #734 #399]: #395
#384 := [trans #736 #720]: #383
#663 := [monotonicity #384 #668]: #662
#666 := [trans #663 #665]: #659
#656 := [monotonicity #666]: #655
#643 := [trans #656 #657]: #655
#654 := [quant-inst #66 #10]: #653
#644 := [mp #654 #643]: #651
[unit-resolution #644 #83 #751]: false
unsat
7de568581f12c6417657495045816e0055a747d5 337 0
#2 := false
decl f3 :: (-> Int Int Int)
#17 := (:var 0 Int)
#16 := (:var 1 Int)
#18 := (f3 #16 #17)
#769 := (pattern #18)
#13 := 0::Int
#65 := -1::Int
#112 := (* -1::Int #17)
#109 := (* -1::Int #16)
#115 := (div #109 #112)
#272 := (* -1::Int #115)
#273 := (+ #18 #272)
#274 := (= #273 0::Int)
#28 := (div #16 #17)
#269 := (* -1::Int #28)
#270 := (+ #18 #269)
#271 := (= #270 0::Int)
#147 := (>= #16 0::Int)
#140 := (<= #17 0::Int)
#232 := (or #140 #147)
#233 := (not #232)
#136 := (<= #16 0::Int)
#230 := (or #136 #140)
#231 := (not #230)
#236 := (or #231 #233)
#275 := (ite #236 #271 #274)
#268 := (= #18 0::Int)
#20 := (= #17 0::Int)
#19 := (= #16 0::Int)
#21 := (or #19 #20)
#276 := (ite #21 #268 #275)
#770 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #769) #276)
#279 := (forall (vars (?v0 Int) (?v1 Int)) #276)
#773 := (iff #279 #770)
#771 := (iff #276 #276)
#772 := [refl]: #771
#774 := [quant-intro #772]: #773
#239 := (ite #236 #28 #115)
#242 := (ite #21 0::Int #239)
#245 := (= #18 #242)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#280 := (iff #248 #279)
#277 := (iff #245 #276)
#278 := [rewrite]: #277
#281 := [quant-intro #278]: #280
#148 := (not #147)
#141 := (not #140)
#151 := (and #141 #148)
#137 := (not #136)
#144 := (and #137 #141)
#154 := (or #144 #151)
#157 := (ite #154 #28 #115)
#160 := (ite #21 0::Int #157)
#163 := (= #18 #160)
#166 := (forall (vars (?v0 Int) (?v1 Int)) #163)
#249 := (iff #166 #248)
#246 := (iff #163 #245)
#243 := (= #160 #242)
#240 := (= #157 #239)
#237 := (iff #154 #236)
#234 := (iff #151 #233)
#235 := [rewrite]: #234
#224 := (iff #144 #231)
#225 := [rewrite]: #224
#238 := [monotonicity #225 #235]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [quant-intro #247]: #249
#228 := (~ #166 #166)
#226 := (~ #163 #163)
#227 := [refl]: #226
#229 := [nnf-pos #227]: #228
#30 := (- #17)
#29 := (- #16)
#31 := (div #29 #30)
#23 := (< 0::Int #17)
#25 := (< #16 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #16)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (ite #27 #28 #31)
#33 := (ite #21 0::Int #32)
#34 := (= #18 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#169 := (iff #35 #166)
#103 := (and #23 #25)
#106 := (or #24 #103)
#118 := (ite #106 #28 #115)
#97 := (= 0::Int #17)
#94 := (= 0::Int #16)
#100 := (or #94 #97)
#121 := (ite #100 0::Int #118)
#124 := (= #18 #121)
#127 := (forall (vars (?v0 Int) (?v1 Int)) #124)
#167 := (iff #127 #166)
#164 := (iff #124 #163)
#161 := (= #121 #160)
#158 := (= #118 #157)
#155 := (iff #106 #154)
#152 := (iff #103 #151)
#149 := (iff #25 #148)
#150 := [rewrite]: #149
#142 := (iff #23 #141)
#143 := [rewrite]: #142
#153 := [monotonicity #143 #150]: #152
#145 := (iff #24 #144)
#138 := (iff #22 #137)
#139 := [rewrite]: #138
#146 := [monotonicity #139 #143]: #145
#156 := [monotonicity #146 #153]: #155
#159 := [monotonicity #156]: #158
#134 := (iff #100 #21)
#132 := (iff #97 #20)
#133 := [rewrite]: #132
#130 := (iff #94 #19)
#131 := [rewrite]: #130
#135 := [monotonicity #131 #133]: #134
#162 := [monotonicity #135 #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#128 := (iff #35 #127)
#125 := (iff #34 #124)
#122 := (= #33 #121)
#119 := (= #32 #118)
#116 := (= #31 #115)
#113 := (= #30 #112)
#114 := [rewrite]: #113
#110 := (= #29 #109)
#111 := [rewrite]: #110
#117 := [monotonicity #111 #114]: #116
#107 := (iff #27 #106)
#104 := (iff #26 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105]: #107
#120 := [monotonicity #108 #117]: #119
#101 := (iff #21 #100)
#98 := (iff #20 #97)
#99 := [rewrite]: #98
#95 := (iff #19 #94)
#96 := [rewrite]: #95
#102 := [monotonicity #96 #99]: #101
#123 := [monotonicity #102 #120]: #122
#126 := [monotonicity #123]: #125
#129 := [quant-intro #126]: #128
#170 := [trans #129 #168]: #169
#93 := [asserted]: #35
#171 := [mp #93 #170]: #166
#220 := [mp~ #171 #229]: #166
#251 := [mp #220 #250]: #248
#282 := [mp #251 #281]: #279
#775 := [mp #282 #774]: #770
#68 := -3::Int
#71 := (f3 -1::Int -3::Int)
#74 := (= #71 0::Int)
#87 := (not #74)
#10 := 3::Int
#11 := (- 3::Int)
#8 := 1::Int
#9 := (- 1::Int)
#12 := (f3 #9 #11)
#14 := (= #12 0::Int)
#15 := (not #14)
#90 := (iff #15 #87)
#77 := (= 0::Int #71)
#82 := (not #77)
#88 := (iff #82 #87)
#85 := (iff #77 #74)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#83 := (iff #15 #82)
#80 := (iff #14 #77)
#78 := (iff #74 #77)
#79 := [rewrite]: #78
#75 := (iff #14 #74)
#72 := (= #12 #71)
#69 := (= #11 -3::Int)
#70 := [rewrite]: #69
#66 := (= #9 -1::Int)
#67 := [rewrite]: #66
#73 := [monotonicity #67 #70]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#84 := [monotonicity #81]: #83
#91 := [trans #84 #89]: #90
#64 := [asserted]: #15
#92 := [mp #64 #91]: #87
#694 := (not #770)
#695 := (or #694 #74)
#356 := (* -1::Int -3::Int)
#440 := (* -1::Int -1::Int)
#441 := (div #440 #356)
#442 := (* -1::Int #441)
#433 := (+ #71 #442)
#444 := (= #433 0::Int)
#445 := (div -1::Int -3::Int)
#446 := (* -1::Int #445)
#443 := (+ #71 #446)
#447 := (= #443 0::Int)
#426 := (>= -1::Int 0::Int)
#761 := (<= -3::Int 0::Int)
#763 := (or #761 #426)
#420 := (not #763)
#550 := (<= -1::Int 0::Int)
#757 := (or #550 #761)
#431 := (not #757)
#432 := (or #431 #420)
#764 := (ite #432 #447 #444)
#765 := (= -3::Int 0::Int)
#766 := (= -1::Int 0::Int)
#767 := (or #766 #765)
#762 := (ite #767 #74 #764)
#696 := (or #694 #762)
#697 := (iff #696 #695)
#687 := (iff #695 #695)
#688 := [rewrite]: #687
#682 := (iff #762 #74)
#700 := (ite false #74 #74)
#693 := (iff #700 #74)
#685 := [rewrite]: #693
#704 := (iff #762 #700)
#610 := (iff #764 #74)
#714 := (= #71 1::Int)
#598 := (ite false #714 #74)
#608 := (iff #598 #74)
#609 := [rewrite]: #608
#606 := (iff #764 #598)
#604 := (iff #444 #74)
#587 := (= #433 #71)
#701 := (+ #71 0::Int)
#699 := (= #701 #71)
#702 := [rewrite]: #699
#603 := (= #433 #701)
#594 := (= #442 0::Int)
#709 := (* -1::Int 0::Int)
#592 := (= #709 0::Int)
#593 := [rewrite]: #592
#707 := (= #442 #709)
#706 := (= #441 0::Int)
#720 := (div 1::Int 3::Int)
#552 := (= #720 0::Int)
#705 := [rewrite]: #552
#549 := (= #441 #720)
#719 := (= #356 3::Int)
#713 := [rewrite]: #719
#712 := (= #440 1::Int)
#718 := [rewrite]: #712
#551 := [monotonicity #718 #713]: #549
#708 := [trans #551 #705]: #706
#710 := [monotonicity #708]: #707
#553 := [trans #710 #593]: #594
#698 := [monotonicity #553]: #603
#602 := [trans #698 #702]: #587
#605 := [monotonicity #602]: #604
#717 := (iff #447 #714)
#722 := (+ -1::Int #71)
#570 := (= #722 0::Int)
#715 := (iff #570 #714)
#716 := [rewrite]: #715
#571 := (iff #447 #570)
#723 := (= #443 #722)
#725 := (+ #71 -1::Int)
#727 := (= #725 #722)
#728 := [rewrite]: #727
#726 := (= #443 #725)
#735 := (= #446 -1::Int)
#733 := (* -1::Int 1::Int)
#734 := (= #733 -1::Int)
#731 := [rewrite]: #734
#448 := (= #446 #733)
#454 := (= #445 1::Int)
#732 := [rewrite]: #454
#730 := [monotonicity #732]: #448
#724 := [trans #730 #731]: #735
#721 := [monotonicity #724]: #726
#729 := [trans #721 #728]: #723
#572 := [monotonicity #729]: #571
#711 := [trans #572 #716]: #717
#452 := (iff #432 false)
#759 := (or false false)
#403 := (iff #759 false)
#744 := [rewrite]: #403
#741 := (iff #432 #759)
#740 := (iff #420 false)
#1 := true
#754 := (not true)
#755 := (iff #754 false)
#753 := [rewrite]: #755
#462 := (iff #420 #754)
#739 := (iff #763 true)
#466 := (or true false)
#362 := (iff #466 true)
#738 := [rewrite]: #362
#467 := (iff #763 #466)
#743 := (iff #426 false)
#465 := [rewrite]: #743
#746 := (iff #761 true)
#747 := [rewrite]: #746
#468 := [monotonicity #747 #465]: #467
#461 := [trans #468 #738]: #739
#736 := [monotonicity #461]: #462
#737 := [trans #736 #753]: #740
#756 := (iff #431 false)
#394 := (iff #431 #754)
#389 := (iff #757 true)
#748 := (or true true)
#745 := (iff #748 true)
#751 := [rewrite]: #745
#749 := (iff #757 #748)
#409 := (iff #550 true)
#410 := [rewrite]: #409
#750 := [monotonicity #410 #747]: #749
#752 := [trans #750 #751]: #389
#395 := [monotonicity #752]: #394
#742 := [trans #395 #753]: #756
#451 := [monotonicity #742 #737]: #741
#453 := [trans #451 #744]: #452
#607 := [monotonicity #453 #711 #605]: #606
#703 := [trans #607 #609]: #610
#407 := (iff #767 false)
#419 := (iff #767 #759)
#418 := (iff #765 false)
#423 := [rewrite]: #418
#768 := (iff #766 false)
#758 := [rewrite]: #768
#760 := [monotonicity #758 #423]: #419
#408 := [trans #760 #744]: #407
#691 := [monotonicity #408 #703]: #704
#684 := [trans #691 #685]: #682
#686 := [monotonicity #684]: #697
#689 := [trans #686 #688]: #697
#692 := [quant-inst #65 #68]: #696
#683 := [mp #692 #689]: #695
[unit-resolution #683 #92 #775]: false
unsat
67c5769d49bd3d505a24355d203b30bb2a6d4f8d 306 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#16 := (f3 #14 #15)
#751 := (pattern #16)
#17 := 0::Int
#96 := -1::Int
#100 := (* -1::Int #15)
#97 := (* -1::Int #14)
#103 := (div #97 #100)
#254 := (* -1::Int #103)
#255 := (+ #16 #254)
#256 := (= #255 0::Int)
#27 := (div #14 #15)
#251 := (* -1::Int #27)
#252 := (+ #16 #251)
#253 := (= #252 0::Int)
#129 := (>= #14 0::Int)
#122 := (<= #15 0::Int)
#214 := (or #122 #129)
#215 := (not #214)
#118 := (<= #14 0::Int)
#212 := (or #118 #122)
#213 := (not #212)
#218 := (or #213 #215)
#257 := (ite #218 #253 #256)
#250 := (= #16 0::Int)
#19 := (= #15 0::Int)
#18 := (= #14 0::Int)
#20 := (or #18 #19)
#258 := (ite #20 #250 #257)
#752 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #751) #258)
#261 := (forall (vars (?v0 Int) (?v1 Int)) #258)
#755 := (iff #261 #752)
#753 := (iff #258 #258)
#754 := [refl]: #753
#756 := [quant-intro #754]: #755
#221 := (ite #218 #27 #103)
#224 := (ite #20 0::Int #221)
#227 := (= #16 #224)
#230 := (forall (vars (?v0 Int) (?v1 Int)) #227)
#262 := (iff #230 #261)
#259 := (iff #227 #258)
#260 := [rewrite]: #259
#263 := [quant-intro #260]: #262
#130 := (not #129)
#123 := (not #122)
#133 := (and #123 #130)
#119 := (not #118)
#126 := (and #119 #123)
#136 := (or #126 #133)
#139 := (ite #136 #27 #103)
#142 := (ite #20 0::Int #139)
#145 := (= #16 #142)
#148 := (forall (vars (?v0 Int) (?v1 Int)) #145)
#231 := (iff #148 #230)
#228 := (iff #145 #227)
#225 := (= #142 #224)
#222 := (= #139 #221)
#219 := (iff #136 #218)
#216 := (iff #133 #215)
#217 := [rewrite]: #216
#206 := (iff #126 #213)
#207 := [rewrite]: #206
#220 := [monotonicity #207 #217]: #219
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#210 := (~ #148 #148)
#208 := (~ #145 #145)
#209 := [refl]: #208
#211 := [nnf-pos #209]: #210
#29 := (- #15)
#28 := (- #14)
#30 := (div #28 #29)
#22 := (< 0::Int #15)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (ite #26 #27 #30)
#32 := (ite #20 0::Int #31)
#33 := (= #16 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#151 := (iff #34 #148)
#90 := (and #22 #24)
#93 := (or #23 #90)
#106 := (ite #93 #27 #103)
#109 := (ite #20 0::Int #106)
#112 := (= #16 #109)
#115 := (forall (vars (?v0 Int) (?v1 Int)) #112)
#149 := (iff #115 #148)
#146 := (iff #112 #145)
#143 := (= #109 #142)
#140 := (= #106 #139)
#137 := (iff #93 #136)
#134 := (iff #90 #133)
#131 := (iff #24 #130)
#132 := [rewrite]: #131
#124 := (iff #22 #123)
#125 := [rewrite]: #124
#135 := [monotonicity #125 #132]: #134
#127 := (iff #23 #126)
#120 := (iff #21 #119)
#121 := [rewrite]: #120
#128 := [monotonicity #121 #125]: #127
#138 := [monotonicity #128 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#116 := (iff #34 #115)
#113 := (iff #33 #112)
#110 := (= #32 #109)
#107 := (= #31 #106)
#104 := (= #30 #103)
#101 := (= #29 #100)
#102 := [rewrite]: #101
#98 := (= #28 #97)
#99 := [rewrite]: #98
#105 := [monotonicity #99 #102]: #104
#94 := (iff #26 #93)
#91 := (iff #25 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#108 := [monotonicity #95 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [quant-intro #114]: #116
#152 := [trans #117 #150]: #151
#89 := [asserted]: #34
#153 := [mp #89 #152]: #148
#202 := [mp~ #153 #211]: #148
#233 := [mp #202 #232]: #230
#264 := [mp #233 #263]: #261
#757 := [mp #264 #756]: #752
#11 := 1::Int
#64 := -3::Int
#67 := (f3 -3::Int -3::Int)
#70 := (= #67 1::Int)
#83 := (not #70)
#8 := 3::Int
#9 := (- 3::Int)
#10 := (f3 #9 #9)
#12 := (= #10 1::Int)
#13 := (not #12)
#86 := (iff #13 #83)
#73 := (= 1::Int #67)
#78 := (not #73)
#84 := (iff #78 #83)
#81 := (iff #73 #70)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#79 := (iff #13 #78)
#76 := (iff #12 #73)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #12 #70)
#68 := (= #10 #67)
#65 := (= #9 -3::Int)
#66 := [rewrite]: #65
#69 := [monotonicity #66 #66]: #68
#72 := [monotonicity #69]: #71
#77 := [trans #72 #75]: #76
#80 := [monotonicity #77]: #79
#87 := [trans #80 #85]: #86
#63 := [asserted]: #13
#88 := [mp #63 #87]: #83
#588 := (not #752)
#589 := (or #588 #70)
#338 := (* -1::Int -3::Int)
#422 := (div #338 #338)
#423 := (* -1::Int #422)
#424 := (+ #67 #423)
#415 := (= #424 0::Int)
#426 := (div -3::Int -3::Int)
#427 := (* -1::Int #426)
#428 := (+ #67 #427)
#425 := (= #428 0::Int)
#429 := (>= -3::Int 0::Int)
#408 := (<= -3::Int 0::Int)
#743 := (or #408 #429)
#745 := (not #743)
#402 := (or #408 #408)
#532 := (not #402)
#739 := (or #532 #745)
#413 := (ite #739 #425 #415)
#414 := (= #67 0::Int)
#746 := (= -3::Int 0::Int)
#747 := (or #746 #746)
#748 := (ite #747 #414 #413)
#590 := (or #588 #748)
#592 := (iff #590 #589)
#682 := (iff #589 #589)
#686 := [rewrite]: #682
#587 := (iff #748 #70)
#681 := (ite false #414 #70)
#584 := (iff #681 #70)
#586 := [rewrite]: #584
#684 := (iff #748 #681)
#585 := (iff #413 #70)
#574 := (ite false #70 #70)
#535 := (iff #574 #70)
#683 := [rewrite]: #535
#575 := (iff #413 #574)
#689 := (iff #415 #70)
#713 := (+ -1::Int #67)
#703 := (= #713 0::Int)
#710 := (iff #703 #70)
#705 := [rewrite]: #710
#690 := (iff #415 #703)
#687 := (= #424 #713)
#430 := (+ #67 -1::Int)
#717 := (= #430 #713)
#706 := [rewrite]: #717
#533 := (= #424 #430)
#702 := (= #423 -1::Int)
#723 := (* -1::Int 1::Int)
#435 := (= #723 -1::Int)
#436 := [rewrite]: #435
#701 := (= #423 #723)
#694 := (= #422 1::Int)
#696 := (div 3::Int 3::Int)
#699 := (= #696 1::Int)
#693 := [rewrite]: #699
#697 := (= #422 #696)
#553 := (= #338 3::Int)
#554 := [rewrite]: #553
#698 := [monotonicity #554 #554]: #697
#700 := [trans #698 #693]: #694
#695 := [monotonicity #700]: #701
#531 := [trans #695 #436]: #702
#534 := [monotonicity #531]: #533
#688 := [trans #534 #706]: #687
#691 := [monotonicity #688]: #690
#692 := [trans #691 #705]: #689
#711 := (iff #425 #70)
#704 := (iff #425 #703)
#707 := (= #428 #713)
#712 := (= #428 #430)
#714 := (= #427 -1::Int)
#433 := (= #427 #723)
#722 := (= #426 1::Int)
#719 := [rewrite]: #722
#434 := [monotonicity #719]: #433
#715 := [trans #434 #436]: #714
#716 := [monotonicity #715]: #712
#708 := [trans #716 #706]: #707
#709 := [monotonicity #708]: #704
#552 := [trans #709 #705]: #711
#444 := (iff #739 false)
#750 := (or false false)
#405 := (iff #750 false)
#741 := [rewrite]: #405
#721 := (iff #739 #750)
#344 := (iff #745 false)
#1 := true
#731 := (not true)
#733 := (iff #731 false)
#371 := [rewrite]: #733
#449 := (iff #745 #731)
#447 := (iff #743 true)
#737 := (or true false)
#724 := (iff #737 true)
#725 := [rewrite]: #724
#735 := (iff #743 #737)
#376 := (iff #429 false)
#377 := [rewrite]: #376
#385 := (iff #408 true)
#726 := [rewrite]: #385
#738 := [monotonicity #726 #377]: #735
#448 := [trans #738 #725]: #447
#450 := [monotonicity #448]: #449
#720 := [trans #450 #371]: #344
#734 := (iff #532 false)
#732 := (iff #532 #731)
#729 := (iff #402 true)
#389 := (or true true)
#392 := (iff #389 true)
#728 := [rewrite]: #392
#390 := (iff #402 #389)
#391 := [monotonicity #726 #726]: #390
#730 := [trans #391 #728]: #729
#727 := [monotonicity #730]: #732
#736 := [trans #727 #371]: #734
#443 := [monotonicity #736 #720]: #721
#718 := [trans #443 #741]: #444
#576 := [monotonicity #718 #552 #692]: #575
#680 := [trans #576 #683]: #585
#401 := (iff #747 false)
#740 := (iff #747 #750)
#749 := (iff #746 false)
#744 := [rewrite]: #749
#400 := [monotonicity #744 #744]: #740
#742 := [trans #400 #741]: #401
#569 := [monotonicity #742 #680]: #684
#580 := [trans #569 #586]: #587
#685 := [monotonicity #580]: #592
#673 := [trans #685 #686]: #592
#591 := [quant-inst #64 #64]: #590
#675 := [mp #591 #673]: #589
[unit-resolution #675 #88 #757]: false
unsat
602bd1c64454e63be2273eaf718ba5b3413f9555 333 0
#2 := false
decl f3 :: (-> Int Int Int)
#17 := (:var 0 Int)
#16 := (:var 1 Int)
#18 := (f3 #16 #17)
#756 := (pattern #18)
#19 := 0::Int
#101 := -1::Int
#105 := (* -1::Int #17)
#102 := (* -1::Int #16)
#108 := (div #102 #105)
#259 := (* -1::Int #108)
#260 := (+ #18 #259)
#261 := (= #260 0::Int)
#29 := (div #16 #17)
#256 := (* -1::Int #29)
#257 := (+ #18 #256)
#258 := (= #257 0::Int)
#134 := (>= #16 0::Int)
#127 := (<= #17 0::Int)
#219 := (or #127 #134)
#220 := (not #219)
#123 := (<= #16 0::Int)
#217 := (or #123 #127)
#218 := (not #217)
#223 := (or #218 #220)
#262 := (ite #223 #258 #261)
#255 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #16 0::Int)
#22 := (or #20 #21)
#263 := (ite #22 #255 #262)
#757 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #756) #263)
#266 := (forall (vars (?v0 Int) (?v1 Int)) #263)
#760 := (iff #266 #757)
#758 := (iff #263 #263)
#759 := [refl]: #758
#761 := [quant-intro #759]: #760
#226 := (ite #223 #29 #108)
#229 := (ite #22 0::Int #226)
#232 := (= #18 #229)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#135 := (not #134)
#128 := (not #127)
#138 := (and #128 #135)
#124 := (not #123)
#131 := (and #124 #128)
#141 := (or #131 #138)
#144 := (ite #141 #29 #108)
#147 := (ite #22 0::Int #144)
#150 := (= #18 #147)
#153 := (forall (vars (?v0 Int) (?v1 Int)) #150)
#236 := (iff #153 #235)
#233 := (iff #150 #232)
#230 := (= #147 #229)
#227 := (= #144 #226)
#224 := (iff #141 #223)
#221 := (iff #138 #220)
#222 := [rewrite]: #221
#211 := (iff #131 #218)
#212 := [rewrite]: #211
#225 := [monotonicity #212 #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#215 := (~ #153 #153)
#213 := (~ #150 #150)
#214 := [refl]: #213
#216 := [nnf-pos #214]: #215
#31 := (- #17)
#30 := (- #16)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#156 := (iff #36 #153)
#95 := (and #24 #26)
#98 := (or #25 #95)
#111 := (ite #98 #29 #108)
#114 := (ite #22 0::Int #111)
#117 := (= #18 #114)
#120 := (forall (vars (?v0 Int) (?v1 Int)) #117)
#154 := (iff #120 #153)
#151 := (iff #117 #150)
#148 := (= #114 #147)
#145 := (= #111 #144)
#142 := (iff #98 #141)
#139 := (iff #95 #138)
#136 := (iff #26 #135)
#137 := [rewrite]: #136
#129 := (iff #24 #128)
#130 := [rewrite]: #129
#140 := [monotonicity #130 #137]: #139
#132 := (iff #25 #131)
#125 := (iff #23 #124)
#126 := [rewrite]: #125
#133 := [monotonicity #126 #130]: #132
#143 := [monotonicity #133 #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#155 := [quant-intro #152]: #154
#121 := (iff #36 #120)
#118 := (iff #35 #117)
#115 := (= #34 #114)
#112 := (= #33 #111)
#109 := (= #32 #108)
#106 := (= #31 #105)
#107 := [rewrite]: #106
#103 := (= #30 #102)
#104 := [rewrite]: #103
#110 := [monotonicity #104 #107]: #109
#99 := (iff #28 #98)
#96 := (iff #27 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#113 := [monotonicity #100 #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#157 := [trans #122 #155]: #156
#94 := [asserted]: #36
#158 := [mp #94 #157]: #153
#207 := [mp~ #158 #216]: #153
#238 := [mp #207 #237]: #235
#269 := [mp #238 #268]: #266
#762 := [mp #269 #761]: #757
#13 := 1::Int
#69 := -3::Int
#66 := -5::Int
#72 := (f3 -5::Int -3::Int)
#75 := (= #72 1::Int)
#88 := (not #75)
#10 := 3::Int
#11 := (- 3::Int)
#8 := 5::Int
#9 := (- 5::Int)
#12 := (f3 #9 #11)
#14 := (= #12 1::Int)
#15 := (not #14)
#91 := (iff #15 #88)
#78 := (= 1::Int #72)
#83 := (not #78)
#89 := (iff #83 #88)
#86 := (iff #78 #75)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#84 := (iff #15 #83)
#81 := (iff #14 #78)
#79 := (iff #75 #78)
#80 := [rewrite]: #79
#76 := (iff #14 #75)
#73 := (= #12 #72)
#70 := (= #11 -3::Int)
#71 := [rewrite]: #70
#67 := (= #9 -5::Int)
#68 := [rewrite]: #67
#74 := [monotonicity #68 #71]: #73
#77 := [monotonicity #74]: #76
#82 := [trans #77 #80]: #81
#85 := [monotonicity #82]: #84
#92 := [trans #85 #90]: #91
#65 := [asserted]: #15
#93 := [mp #65 #92]: #88
#670 := (not #757)
#677 := (or #670 #75)
#343 := (* -1::Int -3::Int)
#427 := (* -1::Int -5::Int)
#428 := (div #427 #343)
#429 := (* -1::Int #428)
#420 := (+ #72 #429)
#431 := (= #420 0::Int)
#432 := (div -5::Int -3::Int)
#433 := (* -1::Int #432)
#430 := (+ #72 #433)
#434 := (= #430 0::Int)
#413 := (>= -5::Int 0::Int)
#748 := (<= -3::Int 0::Int)
#750 := (or #748 #413)
#407 := (not #750)
#537 := (<= -5::Int 0::Int)
#744 := (or #537 #748)
#418 := (not #744)
#419 := (or #418 #407)
#751 := (ite #419 #434 #431)
#752 := (= #72 0::Int)
#753 := (= -3::Int 0::Int)
#754 := (= -5::Int 0::Int)
#749 := (or #754 #753)
#755 := (ite #749 #752 #751)
#661 := (or #670 #755)
#664 := (iff #661 #677)
#666 := (iff #677 #677)
#667 := [rewrite]: #666
#675 := (iff #755 #75)
#683 := (ite false #752 #75)
#673 := (iff #683 #75)
#674 := [rewrite]: #673
#679 := (iff #755 #683)
#681 := (iff #751 #75)
#719 := 2::Int
#704 := (= #72 2::Int)
#678 := (ite false #704 #75)
#669 := (iff #678 #75)
#671 := [rewrite]: #669
#680 := (iff #751 #678)
#687 := (iff #431 #75)
#589 := (+ -1::Int #72)
#594 := (= #589 0::Int)
#597 := (iff #594 #75)
#690 := [rewrite]: #597
#595 := (iff #431 #594)
#585 := (= #420 #589)
#686 := (+ #72 -1::Int)
#591 := (= #686 #589)
#592 := [rewrite]: #591
#689 := (= #420 #686)
#590 := (= #429 -1::Int)
#579 := (* -1::Int 1::Int)
#540 := (= #579 -1::Int)
#688 := [rewrite]: #540
#580 := (= #429 #579)
#694 := (= #428 1::Int)
#539 := (div 5::Int 3::Int)
#695 := (= #539 1::Int)
#696 := [rewrite]: #695
#692 := (= #428 #539)
#536 := (= #343 3::Int)
#538 := [rewrite]: #536
#700 := (= #427 5::Int)
#707 := [rewrite]: #700
#693 := [monotonicity #707 #538]: #692
#697 := [trans #693 #696]: #694
#581 := [monotonicity #697]: #580
#685 := [trans #581 #688]: #590
#574 := [monotonicity #685]: #689
#593 := [trans #574 #592]: #585
#596 := [monotonicity #593]: #595
#691 := [trans #596 #690]: #687
#705 := (iff #434 #704)
#722 := -2::Int
#710 := (+ -2::Int #72)
#701 := (= #710 0::Int)
#698 := (iff #701 #704)
#699 := [rewrite]: #698
#702 := (iff #434 #701)
#558 := (= #430 #710)
#709 := (+ #72 -2::Int)
#716 := (= #709 #710)
#557 := [rewrite]: #716
#714 := (= #430 #709)
#713 := (= #433 -2::Int)
#717 := (* -1::Int 2::Int)
#711 := (= #717 -2::Int)
#712 := [rewrite]: #711
#721 := (= #433 #717)
#720 := (= #432 2::Int)
#435 := [rewrite]: #720
#718 := [monotonicity #435]: #721
#708 := [trans #718 #712]: #713
#715 := [monotonicity #708]: #714
#559 := [trans #715 #557]: #558
#703 := [monotonicity #559]: #702
#706 := [trans #703 #699]: #705
#440 := (iff #419 false)
#406 := (or false false)
#731 := (iff #406 false)
#394 := [rewrite]: #731
#438 := (iff #419 #406)
#724 := (iff #407 false)
#1 := true
#381 := (not true)
#740 := (iff #381 false)
#743 := [rewrite]: #740
#723 := (iff #407 #381)
#448 := (iff #750 true)
#454 := (or true false)
#725 := (iff #454 true)
#726 := [rewrite]: #725
#455 := (iff #750 #454)
#452 := (iff #413 false)
#453 := [rewrite]: #452
#734 := (iff #748 true)
#735 := [rewrite]: #734
#349 := [monotonicity #735 #453]: #455
#449 := [trans #349 #726]: #448
#727 := [monotonicity #449]: #723
#728 := [trans #727 #743]: #724
#729 := (iff #418 false)
#382 := (iff #418 #381)
#739 := (iff #744 true)
#736 := (or true true)
#738 := (iff #736 true)
#376 := [rewrite]: #738
#737 := (iff #744 #736)
#397 := (iff #537 true)
#733 := [rewrite]: #397
#732 := [monotonicity #733 #735]: #737
#741 := [trans #732 #376]: #739
#742 := [monotonicity #741]: #382
#730 := [trans #742 #743]: #729
#439 := [monotonicity #730 #728]: #438
#441 := [trans #439 #394]: #440
#672 := [monotonicity #441 #706 #691]: #680
#682 := [trans #672 #671]: #681
#395 := (iff #749 false)
#747 := (iff #749 #406)
#410 := (iff #753 false)
#746 := [rewrite]: #410
#745 := (iff #754 false)
#405 := [rewrite]: #745
#390 := [monotonicity #405 #746]: #747
#396 := [trans #390 #394]: #395
#684 := [monotonicity #396 #682]: #679
#676 := [trans #684 #674]: #675
#665 := [monotonicity #676]: #664
#663 := [trans #665 #667]: #664
#662 := [quant-inst #66 #69]: #661
#668 := [mp #662 #663]: #677
[unit-resolution #668 #93 #762]: false
unsat
9d955d673529089780c55958aa0742a5b1471d68 273 0
#2 := false
decl f3 :: (-> Int Int Int)
#13 := (:var 0 Int)
#12 := (:var 1 Int)
#32 := (f3 #12 #13)
#756 := (pattern #32)
#8 := 0::Int
#87 := -1::Int
#91 := (* -1::Int #13)
#88 := (* -1::Int #12)
#152 := (mod #88 #91)
#267 := (+ #32 #152)
#268 := (= #267 0::Int)
#33 := (mod #12 #13)
#264 := (* -1::Int #33)
#265 := (+ #32 #264)
#266 := (= #265 0::Int)
#126 := (>= #12 0::Int)
#119 := (<= #13 0::Int)
#211 := (or #119 #126)
#212 := (not #211)
#115 := (<= #12 0::Int)
#209 := (or #115 #119)
#210 := (not #209)
#215 := (or #210 #212)
#269 := (ite #215 #266 #268)
#263 := (= #32 0::Int)
#15 := (= #12 0::Int)
#270 := (ite #15 #263 #269)
#262 := (= #12 #32)
#16 := (= #13 0::Int)
#271 := (ite #16 #262 #270)
#757 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #756) #271)
#274 := (forall (vars (?v0 Int) (?v1 Int)) #271)
#760 := (iff #274 #757)
#758 := (iff #271 #271)
#759 := [refl]: #758
#761 := [quant-intro #759]: #760
#158 := (* -1::Int #152)
#231 := (ite #215 #33 #158)
#234 := (ite #15 0::Int #231)
#237 := (ite #16 #12 #234)
#240 := (= #32 #237)
#243 := (forall (vars (?v0 Int) (?v1 Int)) #240)
#275 := (iff #243 #274)
#272 := (iff #240 #271)
#273 := [rewrite]: #272
#276 := [quant-intro #273]: #275
#127 := (not #126)
#120 := (not #119)
#130 := (and #120 #127)
#116 := (not #115)
#123 := (and #116 #120)
#133 := (or #123 #130)
#178 := (ite #133 #33 #158)
#181 := (ite #15 0::Int #178)
#184 := (ite #16 #12 #181)
#187 := (= #32 #184)
#190 := (forall (vars (?v0 Int) (?v1 Int)) #187)
#244 := (iff #190 #243)
#241 := (iff #187 #240)
#238 := (= #184 #237)
#235 := (= #181 #234)
#232 := (= #178 #231)
#216 := (iff #133 #215)
#213 := (iff #130 #212)
#214 := [rewrite]: #213
#203 := (iff #123 #210)
#204 := [rewrite]: #203
#217 := [monotonicity #204 #214]: #216
#233 := [monotonicity #217]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [quant-intro #242]: #244
#201 := (~ #190 #190)
#200 := (~ #187 #187)
#197 := [refl]: #200
#202 := [nnf-pos #197]: #201
#26 := (- #13)
#25 := (- #12)
#34 := (mod #25 #26)
#35 := (- #34)
#19 := (< 0::Int #13)
#21 := (< #12 0::Int)
#22 := (and #21 #19)
#18 := (< 0::Int #12)
#20 := (and #18 #19)
#23 := (or #20 #22)
#36 := (ite #23 #33 #35)
#37 := (ite #15 0::Int #36)
#38 := (ite #16 #12 #37)
#39 := (= #32 #38)
#40 := (forall (vars (?v0 Int) (?v1 Int)) #39)
#193 := (iff #40 #190)
#81 := (and #19 #21)
#84 := (or #20 #81)
#163 := (ite #84 #33 #158)
#72 := (= 0::Int #12)
#166 := (ite #72 0::Int #163)
#75 := (= 0::Int #13)
#169 := (ite #75 #12 #166)
#172 := (= #32 #169)
#175 := (forall (vars (?v0 Int) (?v1 Int)) #172)
#191 := (iff #175 #190)
#188 := (iff #172 #187)
#185 := (= #169 #184)
#182 := (= #166 #181)
#179 := (= #163 #178)
#134 := (iff #84 #133)
#131 := (iff #81 #130)
#128 := (iff #21 #127)
#129 := [rewrite]: #128
#121 := (iff #19 #120)
#122 := [rewrite]: #121
#132 := [monotonicity #122 #129]: #131
#124 := (iff #20 #123)
#117 := (iff #18 #116)
#118 := [rewrite]: #117
#125 := [monotonicity #118 #122]: #124
#135 := [monotonicity #125 #132]: #134
#180 := [monotonicity #135]: #179
#109 := (iff #72 #15)
#110 := [rewrite]: #109
#183 := [monotonicity #110 #180]: #182
#111 := (iff #75 #16)
#112 := [rewrite]: #111
#186 := [monotonicity #112 #183]: #185
#189 := [monotonicity #186]: #188
#192 := [quant-intro #189]: #191
#176 := (iff #40 #175)
#173 := (iff #39 #172)
#170 := (= #38 #169)
#167 := (= #37 #166)
#164 := (= #36 #163)
#161 := (= #35 #158)
#155 := (- #152)
#159 := (= #155 #158)
#160 := [rewrite]: #159
#156 := (= #35 #155)
#153 := (= #34 #152)
#92 := (= #26 #91)
#93 := [rewrite]: #92
#89 := (= #25 #88)
#90 := [rewrite]: #89
#154 := [monotonicity #90 #93]: #153
#157 := [monotonicity #154]: #156
#162 := [trans #157 #160]: #161
#85 := (iff #23 #84)
#82 := (iff #22 #81)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#165 := [monotonicity #86 #162]: #164
#73 := (iff #15 #72)
#74 := [rewrite]: #73
#168 := [monotonicity #74 #165]: #167
#76 := (iff #16 #75)
#77 := [rewrite]: #76
#171 := [monotonicity #77 #168]: #170
#174 := [monotonicity #171]: #173
#177 := [quant-intro #174]: #176
#194 := [trans #177 #192]: #193
#151 := [asserted]: #40
#195 := [mp #151 #194]: #190
#198 := [mp~ #195 #202]: #190
#246 := [mp #198 #245]: #243
#277 := [mp #246 #276]: #274
#762 := [mp #277 #761]: #757
#9 := (f3 0::Int 0::Int)
#10 := (= #9 0::Int)
#11 := (not #10)
#60 := [asserted]: #11
#703 := (not #757)
#709 := (or #703 #10)
#335 := (* -1::Int 0::Int)
#420 := (mod #335 #335)
#421 := (+ #9 #420)
#422 := (= #421 0::Int)
#413 := (mod 0::Int 0::Int)
#424 := (* -1::Int #413)
#425 := (+ #9 #424)
#353 := (= #425 0::Int)
#426 := (>= 0::Int 0::Int)
#423 := (<= 0::Int 0::Int)
#427 := (or #423 #426)
#406 := (not #427)
#741 := (or #423 #423)
#743 := (not #741)
#400 := (or #743 #406)
#530 := (ite #400 #353 #422)
#737 := (= 0::Int 0::Int)
#411 := (ite #737 #10 #530)
#61 := (= 0::Int #9)
#412 := (ite #737 #61 #411)
#550 := (or #703 #412)
#552 := (iff #550 #709)
#695 := (iff #709 #709)
#696 := [rewrite]: #695
#707 := (iff #412 #10)
#1 := true
#704 := (ite true #10 #10)
#701 := (iff #704 #10)
#702 := [rewrite]: #701
#705 := (iff #412 #704)
#711 := (iff #411 #10)
#341 := (+ #9 #413)
#441 := (= #341 0::Int)
#712 := (ite true #10 #441)
#710 := (iff #712 #10)
#714 := [rewrite]: #710
#713 := (iff #411 #712)
#433 := (iff #530 #441)
#720 := (ite false #353 #441)
#431 := (iff #720 #441)
#432 := [rewrite]: #431
#717 := (iff #530 #720)
#442 := (iff #422 #441)
#718 := (= #421 #341)
#447 := (= #420 #413)
#445 := (= #335 0::Int)
#446 := [rewrite]: #445
#448 := [monotonicity #446 #446]: #447
#719 := [monotonicity #448]: #718
#716 := [monotonicity #719]: #442
#722 := (iff #400 false)
#374 := (or false false)
#733 := (iff #374 false)
#736 := [rewrite]: #733
#375 := (iff #400 #374)
#732 := (iff #406 false)
#740 := (not true)
#387 := (iff #740 false)
#388 := [rewrite]: #387
#731 := (iff #406 #740)
#730 := (iff #427 true)
#742 := (or true true)
#398 := (iff #742 true)
#403 := [rewrite]: #398
#728 := (iff #427 #742)
#726 := (iff #426 true)
#727 := [rewrite]: #726
#746 := (iff #423 true)
#747 := [rewrite]: #746
#729 := [monotonicity #747 #727]: #728
#725 := [trans #729 #403]: #730
#369 := [monotonicity #725]: #731
#734 := [trans #369 #388]: #732
#389 := (iff #743 false)
#383 := (iff #743 #740)
#739 := (iff #741 true)
#748 := (iff #741 #742)
#738 := [monotonicity #747 #747]: #748
#399 := [trans #738 #403]: #739
#724 := [monotonicity #399]: #383
#390 := [trans #724 #388]: #389
#735 := [monotonicity #390 #734]: #375
#723 := [trans #735 #736]: #722
#721 := [monotonicity #723 #716]: #717
#434 := [trans #721 #432]: #433
#744 := (iff #737 true)
#745 := [rewrite]: #744
#428 := [monotonicity #745 #434]: #713
#715 := [trans #428 #714]: #711
#67 := (iff #61 #10)
#68 := [rewrite]: #67
#706 := [monotonicity #745 #68 #715]: #705
#708 := [trans #706 #702]: #707
#694 := [monotonicity #708]: #552
#697 := [trans #694 #696]: #552
#551 := [quant-inst #8 #8]: #550
#691 := [mp #551 #697]: #709
[unit-resolution #691 #60 #762]: false
unsat
ea8997dddba0ea4cee2a7011c7fb001434f88f23 281 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#33 := (f3 #13 #14)
#754 := (pattern #33)
#9 := 0::Int
#85 := -1::Int
#89 := (* -1::Int #14)
#86 := (* -1::Int #13)
#150 := (mod #86 #89)
#265 := (+ #33 #150)
#266 := (= #265 0::Int)
#34 := (mod #13 #14)
#262 := (* -1::Int #34)
#263 := (+ #33 #262)
#264 := (= #263 0::Int)
#124 := (>= #13 0::Int)
#117 := (<= #14 0::Int)
#209 := (or #117 #124)
#210 := (not #209)
#113 := (<= #13 0::Int)
#207 := (or #113 #117)
#208 := (not #207)
#213 := (or #208 #210)
#267 := (ite #213 #264 #266)
#261 := (= #33 0::Int)
#16 := (= #13 0::Int)
#268 := (ite #16 #261 #267)
#260 := (= #13 #33)
#17 := (= #14 0::Int)
#269 := (ite #17 #260 #268)
#755 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #754) #269)
#272 := (forall (vars (?v0 Int) (?v1 Int)) #269)
#758 := (iff #272 #755)
#756 := (iff #269 #269)
#757 := [refl]: #756
#759 := [quant-intro #757]: #758
#156 := (* -1::Int #150)
#229 := (ite #213 #34 #156)
#232 := (ite #16 0::Int #229)
#235 := (ite #17 #13 #232)
#238 := (= #33 #235)
#241 := (forall (vars (?v0 Int) (?v1 Int)) #238)
#273 := (iff #241 #272)
#270 := (iff #238 #269)
#271 := [rewrite]: #270
#274 := [quant-intro #271]: #273
#125 := (not #124)
#118 := (not #117)
#128 := (and #118 #125)
#114 := (not #113)
#121 := (and #114 #118)
#131 := (or #121 #128)
#176 := (ite #131 #34 #156)
#179 := (ite #16 0::Int #176)
#182 := (ite #17 #13 #179)
#185 := (= #33 #182)
#188 := (forall (vars (?v0 Int) (?v1 Int)) #185)
#242 := (iff #188 #241)
#239 := (iff #185 #238)
#236 := (= #182 #235)
#233 := (= #179 #232)
#230 := (= #176 #229)
#214 := (iff #131 #213)
#211 := (iff #128 #210)
#212 := [rewrite]: #211
#201 := (iff #121 #208)
#202 := [rewrite]: #201
#215 := [monotonicity #202 #212]: #214
#231 := [monotonicity #215]: #230
#234 := [monotonicity #231]: #233
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [quant-intro #240]: #242
#199 := (~ #188 #188)
#198 := (~ #185 #185)
#195 := [refl]: #198
#200 := [nnf-pos #195]: #199
#27 := (- #14)
#26 := (- #13)
#35 := (mod #26 #27)
#36 := (- #35)
#20 := (< 0::Int #14)
#22 := (< #13 0::Int)
#23 := (and #22 #20)
#19 := (< 0::Int #13)
#21 := (and #19 #20)
#24 := (or #21 #23)
#37 := (ite #24 #34 #36)
#38 := (ite #16 0::Int #37)
#39 := (ite #17 #13 #38)
#40 := (= #33 #39)
#41 := (forall (vars (?v0 Int) (?v1 Int)) #40)
#191 := (iff #41 #188)
#79 := (and #20 #22)
#82 := (or #21 #79)
#161 := (ite #82 #34 #156)
#69 := (= 0::Int #13)
#164 := (ite #69 0::Int #161)
#73 := (= 0::Int #14)
#167 := (ite #73 #13 #164)
#170 := (= #33 #167)
#173 := (forall (vars (?v0 Int) (?v1 Int)) #170)
#189 := (iff #173 #188)
#186 := (iff #170 #185)
#183 := (= #167 #182)
#180 := (= #164 #179)
#177 := (= #161 #176)
#132 := (iff #82 #131)
#129 := (iff #79 #128)
#126 := (iff #22 #125)
#127 := [rewrite]: #126
#119 := (iff #20 #118)
#120 := [rewrite]: #119
#130 := [monotonicity #120 #127]: #129
#122 := (iff #21 #121)
#115 := (iff #19 #114)
#116 := [rewrite]: #115
#123 := [monotonicity #116 #120]: #122
#133 := [monotonicity #123 #130]: #132
#178 := [monotonicity #133]: #177
#107 := (iff #69 #16)
#108 := [rewrite]: #107
#181 := [monotonicity #108 #178]: #180
#109 := (iff #73 #17)
#110 := [rewrite]: #109
#184 := [monotonicity #110 #181]: #183
#187 := [monotonicity #184]: #186
#190 := [quant-intro #187]: #189
#174 := (iff #41 #173)
#171 := (iff #40 #170)
#168 := (= #39 #167)
#165 := (= #38 #164)
#162 := (= #37 #161)
#159 := (= #36 #156)
#153 := (- #150)
#157 := (= #153 #156)
#158 := [rewrite]: #157
#154 := (= #36 #153)
#151 := (= #35 #150)
#90 := (= #27 #89)
#91 := [rewrite]: #90
#87 := (= #26 #86)
#88 := [rewrite]: #87
#152 := [monotonicity #88 #91]: #151
#155 := [monotonicity #152]: #154
#160 := [trans #155 #158]: #159
#83 := (iff #24 #82)
#80 := (iff #23 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#163 := [monotonicity #84 #160]: #162
#71 := (iff #16 #69)
#72 := [rewrite]: #71
#166 := [monotonicity #72 #163]: #165
#74 := (iff #17 #73)
#75 := [rewrite]: #74
#169 := [monotonicity #75 #166]: #168
#172 := [monotonicity #169]: #171
#175 := [quant-intro #172]: #174
#192 := [trans #175 #190]: #191
#149 := [asserted]: #41
#193 := [mp #149 #192]: #188
#196 := [mp~ #193 #200]: #188
#244 := [mp #196 #243]: #241
#275 := [mp #244 #274]: #272
#760 := [mp #275 #759]: #755
decl f4 :: Int
#8 := f4
#10 := (f3 f4 0::Int)
#62 := (= f4 #10)
#65 := (not #62)
#11 := (= #10 f4)
#12 := (not #11)
#66 := (iff #12 #65)
#63 := (iff #11 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#61 := [asserted]: #12
#70 := [mp #61 #67]: #65
#548 := (not #755)
#549 := (or #548 #62)
#333 := (* -1::Int 0::Int)
#418 := (* -1::Int f4)
#419 := (mod #418 #333)
#420 := (+ #10 #419)
#411 := (= #420 0::Int)
#422 := (mod f4 0::Int)
#423 := (* -1::Int #422)
#351 := (+ #10 #423)
#424 := (= #351 0::Int)
#421 := (>= f4 0::Int)
#425 := (<= 0::Int 0::Int)
#404 := (or #425 #421)
#739 := (not #404)
#741 := (<= f4 0::Int)
#398 := (or #741 #425)
#528 := (not #398)
#735 := (or #528 #739)
#409 := (ite #735 #424 #411)
#410 := (= #10 0::Int)
#742 := (= f4 0::Int)
#743 := (ite #742 #410 #409)
#744 := (= 0::Int 0::Int)
#745 := (ite #744 #62 #743)
#550 := (or #548 #745)
#693 := (iff #550 #549)
#695 := (iff #549 #549)
#689 := [rewrite]: #695
#701 := (iff #745 #62)
#439 := (mod #418 0::Int)
#718 := (+ #10 #439)
#429 := (= #718 0::Int)
#713 := (ite #742 #410 #429)
#1 := true
#704 := (ite true #62 #713)
#705 := (iff #704 #62)
#706 := [rewrite]: #705
#699 := (iff #745 #704)
#702 := (iff #743 #713)
#712 := (iff #409 #429)
#432 := (ite false #424 #429)
#426 := (iff #432 #429)
#708 := [rewrite]: #426
#710 := (iff #409 #432)
#430 := (iff #411 #429)
#715 := (= #420 #718)
#440 := (= #419 #439)
#716 := (= #333 0::Int)
#717 := [rewrite]: #716
#714 := [monotonicity #717]: #440
#719 := [monotonicity #714]: #715
#431 := [monotonicity #719]: #430
#446 := (iff #735 false)
#720 := (or false false)
#444 := (iff #720 false)
#445 := [rewrite]: #444
#721 := (iff #735 #720)
#731 := (iff #739 false)
#386 := (not true)
#724 := (iff #386 false)
#725 := [rewrite]: #724
#373 := (iff #739 #386)
#732 := (iff #404 true)
#728 := (or true #421)
#367 := (iff #728 true)
#730 := [rewrite]: #367
#723 := (iff #404 #728)
#736 := (iff #425 true)
#396 := [rewrite]: #736
#729 := [monotonicity #396]: #723
#372 := [trans #729 #730]: #732
#733 := [monotonicity #372]: #373
#734 := [trans #733 #725]: #731
#726 := (iff #528 false)
#387 := (iff #528 #386)
#722 := (iff #398 true)
#401 := (or #741 true)
#738 := (iff #401 true)
#381 := [rewrite]: #738
#737 := (iff #398 #401)
#397 := [monotonicity #396]: #737
#385 := [trans #397 #381]: #722
#388 := [monotonicity #385]: #387
#727 := [trans #388 #725]: #726
#443 := [monotonicity #727 #734]: #721
#339 := [trans #443 #445]: #446
#711 := [monotonicity #339 #431]: #710
#709 := [trans #711 #708]: #712
#703 := [monotonicity #709]: #702
#740 := (iff #744 true)
#746 := [rewrite]: #740
#700 := [monotonicity #746 #703]: #699
#707 := [trans #700 #706]: #701
#694 := [monotonicity #707]: #693
#690 := [trans #694 #689]: #693
#692 := [quant-inst #8 #9]: #550
#696 := [mp #692 #690]: #549
[unit-resolution #696 #70 #760]: false
unsat
b2456294470b5bb8cf71e8629c4adcc89dacf753 303 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#33 := (f3 #13 #14)
#756 := (pattern #33)
#8 := 0::Int
#88 := -1::Int
#92 := (* -1::Int #14)
#89 := (* -1::Int #13)
#153 := (mod #89 #92)
#268 := (+ #33 #153)
#269 := (= #268 0::Int)
#34 := (mod #13 #14)
#265 := (* -1::Int #34)
#266 := (+ #33 #265)
#267 := (= #266 0::Int)
#127 := (>= #13 0::Int)
#120 := (<= #14 0::Int)
#212 := (or #120 #127)
#213 := (not #212)
#116 := (<= #13 0::Int)
#210 := (or #116 #120)
#211 := (not #210)
#216 := (or #211 #213)
#270 := (ite #216 #267 #269)
#264 := (= #33 0::Int)
#16 := (= #13 0::Int)
#271 := (ite #16 #264 #270)
#263 := (= #13 #33)
#17 := (= #14 0::Int)
#272 := (ite #17 #263 #271)
#757 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #756) #272)
#275 := (forall (vars (?v0 Int) (?v1 Int)) #272)
#760 := (iff #275 #757)
#758 := (iff #272 #272)
#759 := [refl]: #758
#761 := [quant-intro #759]: #760
#159 := (* -1::Int #153)
#232 := (ite #216 #34 #159)
#235 := (ite #16 0::Int #232)
#238 := (ite #17 #13 #235)
#241 := (= #33 #238)
#244 := (forall (vars (?v0 Int) (?v1 Int)) #241)
#276 := (iff #244 #275)
#273 := (iff #241 #272)
#274 := [rewrite]: #273
#277 := [quant-intro #274]: #276
#128 := (not #127)
#121 := (not #120)
#131 := (and #121 #128)
#117 := (not #116)
#124 := (and #117 #121)
#134 := (or #124 #131)
#179 := (ite #134 #34 #159)
#182 := (ite #16 0::Int #179)
#185 := (ite #17 #13 #182)
#188 := (= #33 #185)
#191 := (forall (vars (?v0 Int) (?v1 Int)) #188)
#245 := (iff #191 #244)
#242 := (iff #188 #241)
#239 := (= #185 #238)
#236 := (= #182 #235)
#233 := (= #179 #232)
#217 := (iff #134 #216)
#214 := (iff #131 #213)
#215 := [rewrite]: #214
#204 := (iff #124 #211)
#205 := [rewrite]: #204
#218 := [monotonicity #205 #215]: #217
#234 := [monotonicity #218]: #233
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [quant-intro #243]: #245
#202 := (~ #191 #191)
#201 := (~ #188 #188)
#198 := [refl]: #201
#203 := [nnf-pos #198]: #202
#27 := (- #14)
#26 := (- #13)
#35 := (mod #26 #27)
#36 := (- #35)
#20 := (< 0::Int #14)
#22 := (< #13 0::Int)
#23 := (and #22 #20)
#19 := (< 0::Int #13)
#21 := (and #19 #20)
#24 := (or #21 #23)
#37 := (ite #24 #34 #36)
#38 := (ite #16 0::Int #37)
#39 := (ite #17 #13 #38)
#40 := (= #33 #39)
#41 := (forall (vars (?v0 Int) (?v1 Int)) #40)
#194 := (iff #41 #191)
#82 := (and #20 #22)
#85 := (or #21 #82)
#164 := (ite #85 #34 #159)
#73 := (= 0::Int #13)
#167 := (ite #73 0::Int #164)
#76 := (= 0::Int #14)
#170 := (ite #76 #13 #167)
#173 := (= #33 #170)
#176 := (forall (vars (?v0 Int) (?v1 Int)) #173)
#192 := (iff #176 #191)
#189 := (iff #173 #188)
#186 := (= #170 #185)
#183 := (= #167 #182)
#180 := (= #164 #179)
#135 := (iff #85 #134)
#132 := (iff #82 #131)
#129 := (iff #22 #128)
#130 := [rewrite]: #129
#122 := (iff #20 #121)
#123 := [rewrite]: #122
#133 := [monotonicity #123 #130]: #132
#125 := (iff #21 #124)
#118 := (iff #19 #117)
#119 := [rewrite]: #118
#126 := [monotonicity #119 #123]: #125
#136 := [monotonicity #126 #133]: #135
#181 := [monotonicity #136]: #180
#110 := (iff #73 #16)
#111 := [rewrite]: #110
#184 := [monotonicity #111 #181]: #183
#112 := (iff #76 #17)
#113 := [rewrite]: #112
#187 := [monotonicity #113 #184]: #186
#190 := [monotonicity #187]: #189
#193 := [quant-intro #190]: #192
#177 := (iff #41 #176)
#174 := (iff #40 #173)
#171 := (= #39 #170)
#168 := (= #38 #167)
#165 := (= #37 #164)
#162 := (= #36 #159)
#156 := (- #153)
#160 := (= #156 #159)
#161 := [rewrite]: #160
#157 := (= #36 #156)
#154 := (= #35 #153)
#93 := (= #27 #92)
#94 := [rewrite]: #93
#90 := (= #26 #89)
#91 := [rewrite]: #90
#155 := [monotonicity #91 #94]: #154
#158 := [monotonicity #155]: #157
#163 := [trans #158 #161]: #162
#86 := (iff #24 #85)
#83 := (iff #23 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#166 := [monotonicity #87 #163]: #165
#74 := (iff #16 #73)
#75 := [rewrite]: #74
#169 := [monotonicity #75 #166]: #168
#77 := (iff #17 #76)
#78 := [rewrite]: #77
#172 := [monotonicity #78 #169]: #171
#175 := [monotonicity #172]: #174
#178 := [quant-intro #175]: #177
#195 := [trans #178 #193]: #194
#152 := [asserted]: #41
#196 := [mp #152 #195]: #191
#199 := [mp~ #196 #203]: #191
#247 := [mp #199 #246]: #244
#278 := [mp #247 #277]: #275
#762 := [mp #278 #761]: #757
#9 := 1::Int
#10 := (f3 0::Int 1::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#61 := [asserted]: #12
#678 := (not #757)
#679 := (or #678 #11)
#336 := (* -1::Int 1::Int)
#420 := (* -1::Int 0::Int)
#421 := (mod #420 #336)
#422 := (+ #10 #421)
#413 := (= #422 0::Int)
#424 := (mod 0::Int 1::Int)
#425 := (* -1::Int #424)
#426 := (+ #10 #425)
#423 := (= #426 0::Int)
#427 := (>= 0::Int 0::Int)
#406 := (<= 1::Int 0::Int)
#741 := (or #406 #427)
#743 := (not #741)
#400 := (<= 0::Int 0::Int)
#530 := (or #400 #406)
#737 := (not #530)
#411 := (or #737 #743)
#412 := (ite #411 #423 #413)
#744 := (= 0::Int 0::Int)
#745 := (ite #744 #11 #412)
#62 := (= 0::Int #10)
#746 := (= 1::Int 0::Int)
#747 := (ite #746 #62 #745)
#682 := (or #678 #747)
#582 := (iff #682 #679)
#585 := (iff #679 #679)
#578 := [rewrite]: #585
#681 := (iff #747 #11)
#699 := (ite false #11 #11)
#529 := (iff #699 #11)
#531 := [rewrite]: #529
#574 := (iff #747 #699)
#572 := (iff #745 #11)
#1 := true
#686 := (ite true #11 #11)
#687 := (iff #686 #11)
#690 := [rewrite]: #687
#688 := (iff #745 #686)
#532 := (iff #412 #11)
#693 := (iff #412 #699)
#692 := (iff #413 #11)
#697 := (= #422 #10)
#428 := (+ #10 0::Int)
#711 := (= #428 #10)
#715 := [rewrite]: #711
#695 := (= #422 #428)
#552 := (= #421 0::Int)
#708 := (mod 0::Int -1::Int)
#550 := (= #708 0::Int)
#551 := [rewrite]: #550
#703 := (= #421 #708)
#702 := (= #336 -1::Int)
#707 := [rewrite]: #702
#433 := (= #420 0::Int)
#434 := [rewrite]: #433
#709 := [monotonicity #434 #707]: #703
#694 := [trans #709 #551]: #552
#696 := [monotonicity #694]: #695
#691 := [trans #696 #715]: #697
#698 := [monotonicity #691]: #692
#706 := (iff #423 #11)
#704 := (= #426 #10)
#710 := (= #426 #428)
#712 := (= #425 0::Int)
#431 := (= #425 #420)
#717 := (= #424 0::Int)
#721 := [rewrite]: #717
#432 := [monotonicity #721]: #431
#713 := [trans #432 #434]: #712
#714 := [monotonicity #713]: #710
#705 := [trans #714 #715]: #704
#701 := [monotonicity #705]: #706
#716 := (iff #411 false)
#342 := (or false false)
#441 := (iff #342 false)
#442 := [rewrite]: #441
#718 := (iff #411 #342)
#447 := (iff #743 false)
#727 := (not true)
#730 := (iff #727 false)
#725 := [rewrite]: #730
#445 := (iff #743 #727)
#722 := (iff #741 true)
#374 := (or false true)
#733 := (iff #374 true)
#736 := [rewrite]: #733
#375 := (iff #741 #374)
#732 := (iff #427 true)
#734 := [rewrite]: #732
#399 := (iff #406 false)
#740 := [rewrite]: #399
#735 := [monotonicity #740 #734]: #375
#723 := [trans #735 #736]: #722
#446 := [monotonicity #723]: #445
#448 := [trans #446 #725]: #447
#731 := (iff #737 false)
#728 := (iff #737 #727)
#390 := (iff #530 true)
#383 := (or true false)
#388 := (iff #383 true)
#389 := [rewrite]: #388
#724 := (iff #530 #383)
#403 := (iff #400 true)
#739 := [rewrite]: #403
#387 := [monotonicity #739 #740]: #724
#726 := [trans #387 #389]: #390
#729 := [monotonicity #726]: #728
#369 := [trans #729 #725]: #731
#719 := [monotonicity #369 #448]: #718
#720 := [trans #719 #442]: #716
#700 := [monotonicity #720 #701 #698]: #693
#685 := [trans #700 #531]: #532
#738 := (iff #744 true)
#398 := [rewrite]: #738
#689 := [monotonicity #398 #685]: #688
#573 := [trans #689 #690]: #572
#68 := (iff #62 #11)
#69 := [rewrite]: #68
#742 := (iff #746 false)
#748 := [rewrite]: #742
#533 := [monotonicity #748 #69 #573]: #574
#583 := [trans #533 #531]: #681
#584 := [monotonicity #583]: #582
#586 := [trans #584 #578]: #582
#567 := [quant-inst #8 #9]: #682
#587 := [mp #567 #586]: #679
[unit-resolution #587 #61 #762]: false
unsat
e9db2756594c83e73847951deaad9e2f60acdae2 304 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#33 := (f3 #13 #14)
#746 := (pattern #33)
#10 := 0::Int
#78 := -1::Int
#82 := (* -1::Int #14)
#79 := (* -1::Int #13)
#143 := (mod #79 #82)
#258 := (+ #33 #143)
#259 := (= #258 0::Int)
#34 := (mod #13 #14)
#255 := (* -1::Int #34)
#256 := (+ #33 #255)
#257 := (= #256 0::Int)
#117 := (>= #13 0::Int)
#110 := (<= #14 0::Int)
#202 := (or #110 #117)
#203 := (not #202)
#106 := (<= #13 0::Int)
#200 := (or #106 #110)
#201 := (not #200)
#206 := (or #201 #203)
#260 := (ite #206 #257 #259)
#254 := (= #33 0::Int)
#16 := (= #13 0::Int)
#261 := (ite #16 #254 #260)
#253 := (= #13 #33)
#17 := (= #14 0::Int)
#262 := (ite #17 #253 #261)
#747 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #746) #262)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#750 := (iff #265 #747)
#748 := (iff #262 #262)
#749 := [refl]: #748
#751 := [quant-intro #749]: #750
#149 := (* -1::Int #143)
#222 := (ite #206 #34 #149)
#225 := (ite #16 0::Int #222)
#228 := (ite #17 #13 #225)
#231 := (= #33 #228)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#266 := (iff #234 #265)
#263 := (iff #231 #262)
#264 := [rewrite]: #263
#267 := [quant-intro #264]: #266
#118 := (not #117)
#111 := (not #110)
#121 := (and #111 #118)
#107 := (not #106)
#114 := (and #107 #111)
#124 := (or #114 #121)
#169 := (ite #124 #34 #149)
#172 := (ite #16 0::Int #169)
#175 := (ite #17 #13 #172)
#178 := (= #33 #175)
#181 := (forall (vars (?v0 Int) (?v1 Int)) #178)
#235 := (iff #181 #234)
#232 := (iff #178 #231)
#229 := (= #175 #228)
#226 := (= #172 #225)
#223 := (= #169 #222)
#207 := (iff #124 #206)
#204 := (iff #121 #203)
#205 := [rewrite]: #204
#194 := (iff #114 #201)
#195 := [rewrite]: #194
#208 := [monotonicity #195 #205]: #207
#224 := [monotonicity #208]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#192 := (~ #181 #181)
#191 := (~ #178 #178)
#188 := [refl]: #191
#193 := [nnf-pos #188]: #192
#27 := (- #14)
#26 := (- #13)
#35 := (mod #26 #27)
#36 := (- #35)
#20 := (< 0::Int #14)
#22 := (< #13 0::Int)
#23 := (and #22 #20)
#19 := (< 0::Int #13)
#21 := (and #19 #20)
#24 := (or #21 #23)
#37 := (ite #24 #34 #36)
#38 := (ite #16 0::Int #37)
#39 := (ite #17 #13 #38)
#40 := (= #33 #39)
#41 := (forall (vars (?v0 Int) (?v1 Int)) #40)
#184 := (iff #41 #181)
#72 := (and #20 #22)
#75 := (or #21 #72)
#154 := (ite #75 #34 #149)
#63 := (= 0::Int #13)
#157 := (ite #63 0::Int #154)
#66 := (= 0::Int #14)
#160 := (ite #66 #13 #157)
#163 := (= #33 #160)
#166 := (forall (vars (?v0 Int) (?v1 Int)) #163)
#182 := (iff #166 #181)
#179 := (iff #163 #178)
#176 := (= #160 #175)
#173 := (= #157 #172)
#170 := (= #154 #169)
#125 := (iff #75 #124)
#122 := (iff #72 #121)
#119 := (iff #22 #118)
#120 := [rewrite]: #119
#112 := (iff #20 #111)
#113 := [rewrite]: #112
#123 := [monotonicity #113 #120]: #122
#115 := (iff #21 #114)
#108 := (iff #19 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#126 := [monotonicity #116 #123]: #125
#171 := [monotonicity #126]: #170
#100 := (iff #63 #16)
#101 := [rewrite]: #100
#174 := [monotonicity #101 #171]: #173
#102 := (iff #66 #17)
#103 := [rewrite]: #102
#177 := [monotonicity #103 #174]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#167 := (iff #41 #166)
#164 := (iff #40 #163)
#161 := (= #39 #160)
#158 := (= #38 #157)
#155 := (= #37 #154)
#152 := (= #36 #149)
#146 := (- #143)
#150 := (= #146 #149)
#151 := [rewrite]: #150
#147 := (= #36 #146)
#144 := (= #35 #143)
#83 := (= #27 #82)
#84 := [rewrite]: #83
#80 := (= #26 #79)
#81 := [rewrite]: #80
#145 := [monotonicity #81 #84]: #144
#148 := [monotonicity #145]: #147
#153 := [trans #148 #151]: #152
#76 := (iff #24 #75)
#73 := (iff #23 #72)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#156 := [monotonicity #77 #153]: #155
#64 := (iff #16 #63)
#65 := [rewrite]: #64
#159 := [monotonicity #65 #156]: #158
#67 := (iff #17 #66)
#68 := [rewrite]: #67
#162 := [monotonicity #68 #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#185 := [trans #168 #183]: #184
#142 := [asserted]: #41
#186 := [mp #142 #185]: #181
#189 := [mp~ #186 #193]: #181
#237 := [mp #189 #236]: #234
#268 := [mp #237 #267]: #265
#752 := [mp #268 #751]: #747
#8 := 1::Int
#9 := (f3 1::Int 1::Int)
#11 := (= #9 0::Int)
#12 := (not #11)
#61 := [asserted]: #12
#572 := (not #747)
#574 := (or #572 #11)
#326 := (* -1::Int 1::Int)
#410 := (mod #326 #326)
#411 := (+ #9 #410)
#412 := (= #411 0::Int)
#403 := (mod 1::Int 1::Int)
#414 := (* -1::Int #403)
#415 := (+ #9 #414)
#416 := (= #415 0::Int)
#413 := (>= 1::Int 0::Int)
#417 := (<= 1::Int 0::Int)
#396 := (or #417 #413)
#731 := (not #396)
#733 := (or #417 #417)
#390 := (not #733)
#520 := (or #390 #731)
#727 := (ite #520 #416 #412)
#401 := (= 1::Int 0::Int)
#402 := (ite #401 #11 #727)
#734 := (= 1::Int #9)
#735 := (ite #401 #734 #402)
#575 := (or #572 #735)
#576 := (iff #575 #574)
#578 := (iff #574 #574)
#579 := [rewrite]: #578
#672 := (iff #735 #11)
#738 := (= #9 1::Int)
#523 := (ite false #738 #11)
#668 := (iff #523 #11)
#669 := [rewrite]: #668
#671 := (iff #735 #523)
#563 := (iff #402 #11)
#678 := (ite false #11 #11)
#680 := (iff #678 #11)
#562 := [rewrite]: #680
#679 := (iff #402 #678)
#675 := (iff #727 #11)
#1 := true
#683 := (ite true #11 #11)
#521 := (iff #683 #11)
#522 := [rewrite]: #521
#690 := (iff #727 #683)
#688 := (iff #412 #11)
#681 := (= #411 #9)
#700 := (+ #9 0::Int)
#705 := (= #700 #9)
#694 := [rewrite]: #705
#686 := (= #411 #700)
#684 := (= #410 0::Int)
#693 := (mod -1::Int -1::Int)
#541 := (= #693 0::Int)
#542 := [rewrite]: #541
#699 := (= #410 #693)
#697 := (= #326 -1::Int)
#698 := [rewrite]: #697
#540 := [monotonicity #698 #698]: #699
#685 := [trans #540 #542]: #684
#687 := [monotonicity #685]: #686
#682 := [trans #687 #694]: #681
#689 := [monotonicity #682]: #688
#691 := (iff #416 #11)
#695 := (= #415 #9)
#704 := (= #415 #700)
#703 := (= #414 0::Int)
#421 := (* -1::Int 0::Int)
#424 := (= #421 0::Int)
#702 := [rewrite]: #424
#422 := (= #414 #421)
#707 := (= #403 0::Int)
#711 := [rewrite]: #707
#423 := [monotonicity #711]: #422
#418 := [trans #423 #702]: #703
#701 := [monotonicity #418]: #704
#696 := [trans #701 #694]: #695
#692 := [monotonicity #696]: #691
#706 := (iff #520 true)
#332 := (or true false)
#431 := (iff #332 true)
#432 := [rewrite]: #431
#708 := (iff #520 #332)
#437 := (iff #731 false)
#726 := (not true)
#435 := (iff #726 false)
#436 := [rewrite]: #435
#712 := (iff #731 #726)
#725 := (iff #396 true)
#359 := (or false true)
#364 := (iff #359 true)
#365 := [rewrite]: #364
#722 := (iff #396 #359)
#715 := (iff #413 true)
#721 := [rewrite]: #715
#388 := (iff #417 false)
#393 := [rewrite]: #388
#724 := [monotonicity #393 #721]: #722
#723 := [trans #724 #365]: #725
#713 := [monotonicity #723]: #712
#438 := [trans #713 #436]: #437
#719 := (iff #390 true)
#379 := (not false)
#717 := (iff #379 true)
#718 := [rewrite]: #717
#380 := (iff #390 #379)
#377 := (iff #733 false)
#729 := (or false false)
#373 := (iff #729 false)
#714 := [rewrite]: #373
#389 := (iff #733 #729)
#730 := [monotonicity #393 #393]: #389
#378 := [trans #730 #714]: #377
#716 := [monotonicity #378]: #380
#720 := [trans #716 #718]: #719
#709 := [monotonicity #720 #438]: #708
#710 := [trans #709 #432]: #706
#519 := [monotonicity #710 #692 #689]: #690
#676 := [trans #519 #522]: #675
#736 := (iff #401 false)
#737 := [rewrite]: #736
#677 := [monotonicity #737 #676]: #679
#564 := [trans #677 #562]: #563
#732 := (iff #734 #738)
#728 := [rewrite]: #732
#573 := [monotonicity #737 #728 #564]: #671
#557 := [trans #573 #669]: #672
#577 := [monotonicity #557]: #576
#580 := [trans #577 #579]: #576
#568 := [quant-inst #8 #8]: #575
#673 := [mp #568 #580]: #574
[unit-resolution #673 #61 #752]: false
unsat
5a27e28e4534905d80bae8170a2a6b87f8d4215e 315 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#34 := (f3 #14 #15)
#747 := (pattern #34)
#11 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #15)
#80 := (* -1::Int #14)
#144 := (mod #80 #83)
#259 := (+ #34 #144)
#260 := (= #259 0::Int)
#35 := (mod #14 #15)
#256 := (* -1::Int #35)
#257 := (+ #34 #256)
#258 := (= #257 0::Int)
#118 := (>= #14 0::Int)
#111 := (<= #15 0::Int)
#203 := (or #111 #118)
#204 := (not #203)
#107 := (<= #14 0::Int)
#201 := (or #107 #111)
#202 := (not #201)
#207 := (or #202 #204)
#261 := (ite #207 #258 #260)
#255 := (= #34 0::Int)
#17 := (= #14 0::Int)
#262 := (ite #17 #255 #261)
#254 := (= #14 #34)
#18 := (= #15 0::Int)
#263 := (ite #18 #254 #262)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #263)
#266 := (forall (vars (?v0 Int) (?v1 Int)) #263)
#751 := (iff #266 #748)
#749 := (iff #263 #263)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#150 := (* -1::Int #144)
#223 := (ite #207 #35 #150)
#226 := (ite #17 0::Int #223)
#229 := (ite #18 #14 #226)
#232 := (= #34 #229)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#119 := (not #118)
#112 := (not #111)
#122 := (and #112 #119)
#108 := (not #107)
#115 := (and #108 #112)
#125 := (or #115 #122)
#170 := (ite #125 #35 #150)
#173 := (ite #17 0::Int #170)
#176 := (ite #18 #14 #173)
#179 := (= #34 #176)
#182 := (forall (vars (?v0 Int) (?v1 Int)) #179)
#236 := (iff #182 #235)
#233 := (iff #179 #232)
#230 := (= #176 #229)
#227 := (= #173 #226)
#224 := (= #170 #223)
#208 := (iff #125 #207)
#205 := (iff #122 #204)
#206 := [rewrite]: #205
#195 := (iff #115 #202)
#196 := [rewrite]: #195
#209 := [monotonicity #196 #206]: #208
#225 := [monotonicity #209]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#193 := (~ #182 #182)
#192 := (~ #179 #179)
#189 := [refl]: #192
#194 := [nnf-pos #189]: #193
#28 := (- #15)
#27 := (- #14)
#36 := (mod #27 #28)
#37 := (- #36)
#21 := (< 0::Int #15)
#23 := (< #14 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #14)
#22 := (and #20 #21)
#25 := (or #22 #24)
#38 := (ite #25 #35 #37)
#39 := (ite #17 0::Int #38)
#40 := (ite #18 #14 #39)
#41 := (= #34 #40)
#42 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#185 := (iff #42 #182)
#73 := (and #21 #23)
#76 := (or #22 #73)
#155 := (ite #76 #35 #150)
#64 := (= 0::Int #14)
#158 := (ite #64 0::Int #155)
#67 := (= 0::Int #15)
#161 := (ite #67 #14 #158)
#164 := (= #34 #161)
#167 := (forall (vars (?v0 Int) (?v1 Int)) #164)
#183 := (iff #167 #182)
#180 := (iff #164 #179)
#177 := (= #161 #176)
#174 := (= #158 #173)
#171 := (= #155 #170)
#126 := (iff #76 #125)
#123 := (iff #73 #122)
#120 := (iff #23 #119)
#121 := [rewrite]: #120
#113 := (iff #21 #112)
#114 := [rewrite]: #113
#124 := [monotonicity #114 #121]: #123
#116 := (iff #22 #115)
#109 := (iff #20 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#127 := [monotonicity #117 #124]: #126
#172 := [monotonicity #127]: #171
#101 := (iff #64 #17)
#102 := [rewrite]: #101
#175 := [monotonicity #102 #172]: #174
#103 := (iff #67 #18)
#104 := [rewrite]: #103
#178 := [monotonicity #104 #175]: #177
#181 := [monotonicity #178]: #180
#184 := [quant-intro #181]: #183
#168 := (iff #42 #167)
#165 := (iff #41 #164)
#162 := (= #40 #161)
#159 := (= #39 #158)
#156 := (= #38 #155)
#153 := (= #37 #150)
#147 := (- #144)
#151 := (= #147 #150)
#152 := [rewrite]: #151
#148 := (= #37 #147)
#145 := (= #36 #144)
#84 := (= #28 #83)
#85 := [rewrite]: #84
#81 := (= #27 #80)
#82 := [rewrite]: #81
#146 := [monotonicity #82 #85]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#77 := (iff #25 #76)
#74 := (iff #24 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#157 := [monotonicity #78 #154]: #156
#65 := (iff #17 #64)
#66 := [rewrite]: #65
#160 := [monotonicity #66 #157]: #159
#68 := (iff #18 #67)
#69 := [rewrite]: #68
#163 := [monotonicity #69 #160]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#186 := [trans #169 #184]: #185
#143 := [asserted]: #42
#187 := [mp #143 #186]: #182
#190 := [mp~ #187 #194]: #182
#238 := [mp #190 #237]: #235
#269 := [mp #238 #268]: #266
#753 := [mp #269 #752]: #748
#9 := 1::Int
#8 := 3::Int
#10 := (f3 3::Int 1::Int)
#12 := (= #10 0::Int)
#13 := (not #12)
#62 := [asserted]: #13
#671 := (not #748)
#675 := (or #671 #12)
#327 := (* -1::Int 1::Int)
#411 := (* -1::Int 3::Int)
#412 := (mod #411 #327)
#413 := (+ #10 #412)
#404 := (= #413 0::Int)
#415 := (mod 3::Int 1::Int)
#416 := (* -1::Int #415)
#417 := (+ #10 #416)
#414 := (= #417 0::Int)
#418 := (>= 3::Int 0::Int)
#397 := (<= 1::Int 0::Int)
#732 := (or #397 #418)
#734 := (not #732)
#391 := (<= 3::Int 0::Int)
#521 := (or #391 #397)
#728 := (not #521)
#402 := (or #728 #734)
#403 := (ite #402 #414 #404)
#735 := (= 3::Int 0::Int)
#736 := (ite #735 #12 #403)
#737 := (= 3::Int #10)
#738 := (= 1::Int 0::Int)
#733 := (ite #738 #737 #736)
#662 := (or #671 #733)
#656 := (iff #662 #675)
#655 := (iff #675 #675)
#665 := [rewrite]: #655
#581 := (iff #733 #12)
#394 := (= #10 3::Int)
#569 := (ite false #394 #12)
#579 := (iff #569 #12)
#580 := [rewrite]: #579
#577 := (iff #733 #569)
#575 := (iff #736 #12)
#669 := (ite false #12 #12)
#558 := (iff #669 #12)
#573 := [rewrite]: #558
#670 := (iff #736 #669)
#672 := (iff #403 #12)
#1 := true
#681 := (ite true #12 #12)
#565 := (iff #681 #12)
#524 := [rewrite]: #565
#563 := (iff #403 #681)
#680 := (iff #404 #12)
#677 := (= #413 #10)
#692 := (+ #10 0::Int)
#699 := (= #692 #10)
#694 := [rewrite]: #699
#523 := (= #413 #692)
#520 := (= #412 0::Int)
#685 := -3::Int
#683 := (mod -3::Int -1::Int)
#684 := (= #683 0::Int)
#691 := [rewrite]: #684
#689 := (= #412 #683)
#688 := (= #327 -1::Int)
#682 := [rewrite]: #688
#686 := (= #411 -3::Int)
#687 := [rewrite]: #686
#690 := [monotonicity #687 #682]: #689
#522 := [trans #690 #691]: #520
#676 := [monotonicity #522]: #523
#679 := [trans #676 #694]: #677
#678 := [monotonicity #679]: #680
#542 := (iff #414 #12)
#700 := (= #417 #10)
#693 := (= #417 #692)
#696 := (= #416 0::Int)
#701 := (* -1::Int 0::Int)
#706 := (= #701 0::Int)
#695 := [rewrite]: #706
#705 := (= #416 #701)
#704 := (= #415 0::Int)
#419 := [rewrite]: #704
#702 := [monotonicity #419]: #705
#697 := [trans #702 #695]: #696
#698 := [monotonicity #697]: #693
#541 := [trans #698 #694]: #700
#543 := [monotonicity #541]: #542
#425 := (iff #402 true)
#708 := (or true false)
#423 := (iff #708 true)
#424 := [rewrite]: #423
#712 := (iff #402 #708)
#707 := (iff #734 false)
#333 := (not true)
#432 := (iff #333 false)
#433 := [rewrite]: #432
#709 := (iff #734 #333)
#438 := (iff #732 true)
#727 := (or false true)
#436 := (iff #727 true)
#437 := [rewrite]: #436
#713 := (iff #732 #727)
#726 := (iff #418 true)
#724 := [rewrite]: #726
#378 := (iff #397 false)
#379 := [rewrite]: #378
#714 := [monotonicity #379 #724]: #713
#439 := [trans #714 #437]: #438
#710 := [monotonicity #439]: #709
#711 := [trans #710 #433]: #707
#365 := (iff #728 true)
#716 := (not false)
#723 := (iff #716 true)
#725 := [rewrite]: #723
#722 := (iff #728 #716)
#720 := (iff #521 false)
#380 := (or false false)
#718 := (iff #380 false)
#719 := [rewrite]: #718
#381 := (iff #521 #380)
#374 := (iff #391 false)
#715 := [rewrite]: #374
#717 := [monotonicity #715 #379]: #381
#721 := [trans #717 #719]: #720
#360 := [monotonicity #721]: #722
#366 := [trans #360 #725]: #365
#422 := [monotonicity #366 #711]: #712
#703 := [trans #422 #424]: #425
#564 := [monotonicity #703 #543 #678]: #563
#574 := [trans #564 #524]: #672
#390 := (iff #735 false)
#731 := [rewrite]: #390
#673 := [monotonicity #731 #574]: #670
#576 := [trans #673 #573]: #575
#389 := (iff #737 #394)
#730 := [rewrite]: #389
#739 := (iff #738 false)
#729 := [rewrite]: #739
#578 := [monotonicity #729 #730 #576]: #577
#674 := [trans #578 #580]: #581
#653 := [monotonicity #674]: #656
#666 := [trans #653 #665]: #656
#664 := [quant-inst #8 #9]: #662
#667 := [mp #664 #666]: #675
[unit-resolution #667 #62 #753]: false
unsat
1b99f23affb0dadf3316102e865176c5efc38d4f 313 0
#2 := false
#11 := 0::Int
decl f4 :: Int
#8 := f4
#735 := (= f4 0::Int)
#576 := (not #735)
#418 := (>= f4 0::Int)
#723 := (not #418)
#391 := (<= f4 0::Int)
#380 := (not #391)
#691 := (or #380 #723 #735)
#578 := (not #691)
#79 := -1::Int
#411 := (* -1::Int f4)
#703 := (mod #411 -1::Int)
decl f3 :: (-> Int Int Int)
#9 := 1::Int
#10 := (f3 f4 1::Int)
#701 := (+ #10 #703)
#706 := (= #701 0::Int)
#12 := (= #10 0::Int)
#523 := (ite #691 #12 #706)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#34 := (f3 #14 #15)
#747 := (pattern #34)
#83 := (* -1::Int #15)
#80 := (* -1::Int #14)
#144 := (mod #80 #83)
#259 := (+ #34 #144)
#260 := (= #259 0::Int)
#35 := (mod #14 #15)
#256 := (* -1::Int #35)
#257 := (+ #34 #256)
#258 := (= #257 0::Int)
#118 := (>= #14 0::Int)
#111 := (<= #15 0::Int)
#203 := (or #111 #118)
#204 := (not #203)
#107 := (<= #14 0::Int)
#201 := (or #107 #111)
#202 := (not #201)
#207 := (or #202 #204)
#261 := (ite #207 #258 #260)
#255 := (= #34 0::Int)
#17 := (= #14 0::Int)
#262 := (ite #17 #255 #261)
#254 := (= #14 #34)
#18 := (= #15 0::Int)
#263 := (ite #18 #254 #262)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #263)
#266 := (forall (vars (?v0 Int) (?v1 Int)) #263)
#751 := (iff #266 #748)
#749 := (iff #263 #263)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#150 := (* -1::Int #144)
#223 := (ite #207 #35 #150)
#226 := (ite #17 0::Int #223)
#229 := (ite #18 #14 #226)
#232 := (= #34 #229)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#119 := (not #118)
#112 := (not #111)
#122 := (and #112 #119)
#108 := (not #107)
#115 := (and #108 #112)
#125 := (or #115 #122)
#170 := (ite #125 #35 #150)
#173 := (ite #17 0::Int #170)
#176 := (ite #18 #14 #173)
#179 := (= #34 #176)
#182 := (forall (vars (?v0 Int) (?v1 Int)) #179)
#236 := (iff #182 #235)
#233 := (iff #179 #232)
#230 := (= #176 #229)
#227 := (= #173 #226)
#224 := (= #170 #223)
#208 := (iff #125 #207)
#205 := (iff #122 #204)
#206 := [rewrite]: #205
#195 := (iff #115 #202)
#196 := [rewrite]: #195
#209 := [monotonicity #196 #206]: #208
#225 := [monotonicity #209]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#193 := (~ #182 #182)
#192 := (~ #179 #179)
#189 := [refl]: #192
#194 := [nnf-pos #189]: #193
#28 := (- #15)
#27 := (- #14)
#36 := (mod #27 #28)
#37 := (- #36)
#21 := (< 0::Int #15)
#23 := (< #14 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #14)
#22 := (and #20 #21)
#25 := (or #22 #24)
#38 := (ite #25 #35 #37)
#39 := (ite #17 0::Int #38)
#40 := (ite #18 #14 #39)
#41 := (= #34 #40)
#42 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#185 := (iff #42 #182)
#73 := (and #21 #23)
#76 := (or #22 #73)
#155 := (ite #76 #35 #150)
#64 := (= 0::Int #14)
#158 := (ite #64 0::Int #155)
#67 := (= 0::Int #15)
#161 := (ite #67 #14 #158)
#164 := (= #34 #161)
#167 := (forall (vars (?v0 Int) (?v1 Int)) #164)
#183 := (iff #167 #182)
#180 := (iff #164 #179)
#177 := (= #161 #176)
#174 := (= #158 #173)
#171 := (= #155 #170)
#126 := (iff #76 #125)
#123 := (iff #73 #122)
#120 := (iff #23 #119)
#121 := [rewrite]: #120
#113 := (iff #21 #112)
#114 := [rewrite]: #113
#124 := [monotonicity #114 #121]: #123
#116 := (iff #22 #115)
#109 := (iff #20 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#127 := [monotonicity #117 #124]: #126
#172 := [monotonicity #127]: #171
#101 := (iff #64 #17)
#102 := [rewrite]: #101
#175 := [monotonicity #102 #172]: #174
#103 := (iff #67 #18)
#104 := [rewrite]: #103
#178 := [monotonicity #104 #175]: #177
#181 := [monotonicity #178]: #180
#184 := [quant-intro #181]: #183
#168 := (iff #42 #167)
#165 := (iff #41 #164)
#162 := (= #40 #161)
#159 := (= #39 #158)
#156 := (= #38 #155)
#153 := (= #37 #150)
#147 := (- #144)
#151 := (= #147 #150)
#152 := [rewrite]: #151
#148 := (= #37 #147)
#145 := (= #36 #144)
#84 := (= #28 #83)
#85 := [rewrite]: #84
#81 := (= #27 #80)
#82 := [rewrite]: #81
#146 := [monotonicity #82 #85]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#77 := (iff #25 #76)
#74 := (iff #24 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#157 := [monotonicity #78 #154]: #156
#65 := (iff #17 #64)
#66 := [rewrite]: #65
#160 := [monotonicity #66 #157]: #159
#68 := (iff #18 #67)
#69 := [rewrite]: #68
#163 := [monotonicity #69 #160]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#186 := [trans #169 #184]: #185
#143 := [asserted]: #42
#187 := [mp #143 #186]: #182
#190 := [mp~ #187 #194]: #182
#238 := [mp #190 #237]: #235
#269 := [mp #238 #268]: #266
#753 := [mp #269 #752]: #748
#678 := (not #748)
#681 := (or #678 #523)
#327 := (* -1::Int 1::Int)
#412 := (mod #411 #327)
#413 := (+ #10 #412)
#404 := (= #413 0::Int)
#415 := (mod f4 1::Int)
#416 := (* -1::Int #415)
#417 := (+ #10 #416)
#414 := (= #417 0::Int)
#397 := (<= 1::Int 0::Int)
#732 := (or #397 #418)
#734 := (not #732)
#521 := (or #391 #397)
#728 := (not #521)
#402 := (or #728 #734)
#403 := (ite #402 #414 #404)
#736 := (ite #735 #12 #403)
#737 := (= f4 #10)
#738 := (= 1::Int 0::Int)
#733 := (ite #738 #737 #736)
#563 := (or #678 #733)
#565 := (iff #563 #681)
#672 := (iff #681 #681)
#574 := [rewrite]: #672
#679 := (iff #733 #523)
#366 := (or #380 #723)
#700 := (or #366 #735)
#541 := (ite #700 #12 #706)
#676 := (iff #541 #523)
#520 := (iff #700 #691)
#522 := [rewrite]: #520
#677 := [monotonicity #522]: #676
#690 := (iff #733 #541)
#687 := (ite false #737 #541)
#683 := (iff #687 #541)
#689 := [rewrite]: #683
#688 := (iff #733 #687)
#685 := (iff #736 #541)
#697 := (ite #366 #12 #706)
#698 := (ite #735 #12 #697)
#542 := (iff #698 #541)
#543 := [rewrite]: #542
#699 := (iff #736 #698)
#692 := (iff #403 #697)
#695 := (iff #404 #706)
#705 := (= #413 #701)
#704 := (= #412 #703)
#424 := (= #327 -1::Int)
#425 := [rewrite]: #424
#419 := [monotonicity #425]: #704
#702 := [monotonicity #419]: #705
#696 := [monotonicity #702]: #695
#422 := (iff #414 #12)
#708 := (= #417 #10)
#710 := (+ #10 0::Int)
#707 := (= #710 #10)
#711 := [rewrite]: #707
#432 := (= #417 #710)
#333 := (= #416 0::Int)
#714 := (* -1::Int 0::Int)
#438 := (= #714 0::Int)
#439 := [rewrite]: #438
#436 := (= #416 #714)
#727 := (= #415 0::Int)
#713 := [rewrite]: #727
#437 := [monotonicity #713]: #436
#709 := [trans #437 #439]: #333
#433 := [monotonicity #709]: #432
#712 := [trans #433 #711]: #708
#423 := [monotonicity #712]: #422
#726 := (iff #402 #366)
#725 := (iff #734 #723)
#722 := (iff #732 #418)
#718 := (or false #418)
#721 := (iff #718 #418)
#716 := [rewrite]: #721
#719 := (iff #732 #718)
#389 := (iff #397 false)
#394 := [rewrite]: #389
#720 := [monotonicity #394]: #719
#360 := [trans #720 #716]: #722
#365 := [monotonicity #360]: #725
#381 := (iff #728 #380)
#378 := (iff #521 #391)
#730 := (or #391 false)
#374 := (iff #730 #391)
#715 := [rewrite]: #374
#390 := (iff #521 #730)
#731 := [monotonicity #394]: #390
#379 := [trans #731 #715]: #378
#717 := [monotonicity #379]: #381
#724 := [monotonicity #717 #365]: #726
#693 := [monotonicity #724 #423 #696]: #692
#694 := [monotonicity #693]: #699
#686 := [trans #694 #543]: #685
#739 := (iff #738 false)
#729 := [rewrite]: #739
#682 := [monotonicity #729 #686]: #688
#684 := [trans #682 #689]: #690
#680 := [trans #684 #677]: #679
#524 := [monotonicity #680]: #565
#669 := [trans #524 #574]: #565
#564 := [quant-inst #8 #9]: #563
#670 := [mp #564 #669]: #681
#663 := [unit-resolution #670 #753]: #523
#671 := (not #523)
#668 := (or #671 #578)
#13 := (not #12)
#62 := [asserted]: #13
#675 := (or #671 #578 #12)
#662 := [def-axiom]: #675
#657 := [unit-resolution #662 #62]: #668
#658 := [unit-resolution #657 #663]: #578
#569 := (or #691 #576)
#577 := [def-axiom]: #569
#659 := [unit-resolution #577 #658]: #576
#673 := (or #691 #391)
#558 := [def-axiom]: #673
#660 := [unit-resolution #558 #658]: #391
#573 := (or #691 #418)
#575 := [def-axiom]: #573
#654 := [unit-resolution #575 #658]: #418
#661 := (or #735 #380 #723)
#645 := [th-lemma arith triangle-eq]: #661
[unit-resolution #645 #654 #660 #659]: false
unsat
b6f64755653a305b62fdd8df3fd24f1d40f3cc04 322 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#34 := (f3 #14 #15)
#771 := (pattern #34)
#8 := 0::Int
#63 := -1::Int
#107 := (* -1::Int #15)
#104 := (* -1::Int #14)
#168 := (mod #104 #107)
#283 := (+ #34 #168)
#284 := (= #283 0::Int)
#35 := (mod #14 #15)
#280 := (* -1::Int #35)
#281 := (+ #34 #280)
#282 := (= #281 0::Int)
#142 := (>= #14 0::Int)
#135 := (<= #15 0::Int)
#227 := (or #135 #142)
#228 := (not #227)
#131 := (<= #14 0::Int)
#225 := (or #131 #135)
#226 := (not #225)
#231 := (or #226 #228)
#285 := (ite #231 #282 #284)
#279 := (= #34 0::Int)
#17 := (= #14 0::Int)
#286 := (ite #17 #279 #285)
#278 := (= #14 #34)
#18 := (= #15 0::Int)
#287 := (ite #18 #278 #286)
#772 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #771) #287)
#290 := (forall (vars (?v0 Int) (?v1 Int)) #287)
#775 := (iff #290 #772)
#773 := (iff #287 #287)
#774 := [refl]: #773
#776 := [quant-intro #774]: #775
#174 := (* -1::Int #168)
#247 := (ite #231 #35 #174)
#250 := (ite #17 0::Int #247)
#253 := (ite #18 #14 #250)
#256 := (= #34 #253)
#259 := (forall (vars (?v0 Int) (?v1 Int)) #256)
#291 := (iff #259 #290)
#288 := (iff #256 #287)
#289 := [rewrite]: #288
#292 := [quant-intro #289]: #291
#143 := (not #142)
#136 := (not #135)
#146 := (and #136 #143)
#132 := (not #131)
#139 := (and #132 #136)
#149 := (or #139 #146)
#194 := (ite #149 #35 #174)
#197 := (ite #17 0::Int #194)
#200 := (ite #18 #14 #197)
#203 := (= #34 #200)
#206 := (forall (vars (?v0 Int) (?v1 Int)) #203)
#260 := (iff #206 #259)
#257 := (iff #203 #256)
#254 := (= #200 #253)
#251 := (= #197 #250)
#248 := (= #194 #247)
#232 := (iff #149 #231)
#229 := (iff #146 #228)
#230 := [rewrite]: #229
#219 := (iff #139 #226)
#220 := [rewrite]: #219
#233 := [monotonicity #220 #230]: #232
#249 := [monotonicity #233]: #248
#252 := [monotonicity #249]: #251
#255 := [monotonicity #252]: #254
#258 := [monotonicity #255]: #257
#261 := [quant-intro #258]: #260
#217 := (~ #206 #206)
#216 := (~ #203 #203)
#213 := [refl]: #216
#218 := [nnf-pos #213]: #217
#28 := (- #15)
#27 := (- #14)
#36 := (mod #27 #28)
#37 := (- #36)
#21 := (< 0::Int #15)
#23 := (< #14 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #14)
#22 := (and #20 #21)
#25 := (or #22 #24)
#38 := (ite #25 #35 #37)
#39 := (ite #17 0::Int #38)
#40 := (ite #18 #14 #39)
#41 := (= #34 #40)
#42 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#209 := (iff #42 #206)
#98 := (and #21 #23)
#101 := (or #22 #98)
#179 := (ite #101 #35 #174)
#89 := (= 0::Int #14)
#182 := (ite #89 0::Int #179)
#92 := (= 0::Int #15)
#185 := (ite #92 #14 #182)
#188 := (= #34 #185)
#191 := (forall (vars (?v0 Int) (?v1 Int)) #188)
#207 := (iff #191 #206)
#204 := (iff #188 #203)
#201 := (= #185 #200)
#198 := (= #182 #197)
#195 := (= #179 #194)
#150 := (iff #101 #149)
#147 := (iff #98 #146)
#144 := (iff #23 #143)
#145 := [rewrite]: #144
#137 := (iff #21 #136)
#138 := [rewrite]: #137
#148 := [monotonicity #138 #145]: #147
#140 := (iff #22 #139)
#133 := (iff #20 #132)
#134 := [rewrite]: #133
#141 := [monotonicity #134 #138]: #140
#151 := [monotonicity #141 #148]: #150
#196 := [monotonicity #151]: #195
#125 := (iff #89 #17)
#126 := [rewrite]: #125
#199 := [monotonicity #126 #196]: #198
#127 := (iff #92 #18)
#128 := [rewrite]: #127
#202 := [monotonicity #128 #199]: #201
#205 := [monotonicity #202]: #204
#208 := [quant-intro #205]: #207
#192 := (iff #42 #191)
#189 := (iff #41 #188)
#186 := (= #40 #185)
#183 := (= #39 #182)
#180 := (= #38 #179)
#177 := (= #37 #174)
#171 := (- #168)
#175 := (= #171 #174)
#176 := [rewrite]: #175
#172 := (= #37 #171)
#169 := (= #36 #168)
#108 := (= #28 #107)
#109 := [rewrite]: #108
#105 := (= #27 #104)
#106 := [rewrite]: #105
#170 := [monotonicity #106 #109]: #169
#173 := [monotonicity #170]: #172
#178 := [trans #173 #176]: #177
#102 := (iff #25 #101)
#99 := (iff #24 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#181 := [monotonicity #103 #178]: #180
#90 := (iff #17 #89)
#91 := [rewrite]: #90
#184 := [monotonicity #91 #181]: #183
#93 := (iff #18 #92)
#94 := [rewrite]: #93
#187 := [monotonicity #94 #184]: #186
#190 := [monotonicity #187]: #189
#193 := [quant-intro #190]: #192
#210 := [trans #193 #208]: #209
#167 := [asserted]: #42
#211 := [mp #167 #210]: #206
#214 := [mp~ #211 #218]: #206
#262 := [mp #214 #261]: #259
#293 := [mp #262 #292]: #290
#777 := [mp #293 #776]: #772
#66 := (f3 0::Int -1::Int)
#69 := (= #66 0::Int)
#82 := (not #69)
#9 := 1::Int
#10 := (- 1::Int)
#11 := (f3 0::Int #10)
#12 := (= #11 0::Int)
#13 := (not #12)
#85 := (iff #13 #82)
#72 := (= 0::Int #66)
#77 := (not #72)
#83 := (iff #77 #82)
#80 := (iff #72 #69)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#78 := (iff #13 #77)
#75 := (iff #12 #72)
#73 := (iff #69 #72)
#74 := [rewrite]: #73
#70 := (iff #12 #69)
#67 := (= #11 #66)
#64 := (= #10 -1::Int)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#76 := [trans #71 #74]: #75
#79 := [monotonicity #76]: #78
#86 := [trans #79 #84]: #85
#62 := [asserted]: #13
#87 := [mp #62 #86]: #82
#548 := (not #772)
#696 := (or #548 #69)
#351 := (* -1::Int -1::Int)
#435 := (* -1::Int 0::Int)
#436 := (mod #435 #351)
#437 := (+ #66 #436)
#428 := (= #437 0::Int)
#439 := (mod 0::Int -1::Int)
#440 := (* -1::Int #439)
#441 := (+ #66 #440)
#438 := (= #441 0::Int)
#442 := (>= 0::Int 0::Int)
#421 := (<= -1::Int 0::Int)
#756 := (or #421 #442)
#758 := (not #756)
#415 := (<= 0::Int 0::Int)
#545 := (or #415 #421)
#752 := (not #545)
#426 := (or #752 #758)
#427 := (ite #426 #438 #428)
#759 := (= 0::Int 0::Int)
#760 := (ite #759 #69 #427)
#761 := (= -1::Int 0::Int)
#762 := (ite #761 #72 #760)
#598 := (or #548 #762)
#694 := (iff #598 #696)
#582 := (iff #696 #696)
#597 := [rewrite]: #582
#588 := (iff #762 #69)
#706 := (ite false #69 #69)
#714 := (iff #706 #69)
#708 := [rewrite]: #714
#705 := (iff #762 #706)
#704 := (iff #760 #69)
#1 := true
#546 := (ite true #69 #69)
#701 := (iff #546 #69)
#703 := [rewrite]: #701
#547 := (iff #760 #546)
#715 := (iff #427 #69)
#707 := (iff #427 #706)
#711 := (iff #428 #69)
#709 := (= #437 #66)
#449 := (+ #66 0::Int)
#443 := (= #449 #66)
#725 := [rewrite]: #443
#566 := (= #437 #449)
#724 := (= #436 0::Int)
#716 := (mod 0::Int 1::Int)
#723 := (= #716 0::Int)
#718 := [rewrite]: #723
#717 := (= #436 #716)
#720 := (= #351 1::Int)
#721 := [rewrite]: #720
#736 := (= #435 0::Int)
#446 := [rewrite]: #736
#722 := [monotonicity #446 #721]: #717
#565 := [trans #722 #718]: #724
#567 := [monotonicity #565]: #566
#710 := [trans #567 #725]: #709
#712 := [monotonicity #710]: #711
#730 := (iff #438 #69)
#729 := (= #441 #66)
#727 := (= #441 #449)
#447 := (= #440 0::Int)
#735 := (= #440 #435)
#457 := (= #439 0::Int)
#731 := [rewrite]: #457
#732 := [monotonicity #731]: #735
#448 := [trans #732 #446]: #447
#728 := [monotonicity #448]: #727
#726 := [trans #728 #725]: #729
#719 := [monotonicity #726]: #730
#734 := (iff #426 false)
#461 := (or false false)
#357 := (iff #461 false)
#733 := [rewrite]: #357
#462 := (iff #426 #461)
#738 := (iff #758 false)
#742 := (not true)
#745 := (iff #742 false)
#740 := [rewrite]: #745
#751 := (iff #758 #742)
#750 := (iff #756 true)
#398 := (or true true)
#403 := (iff #398 true)
#404 := [rewrite]: #403
#389 := (iff #756 #398)
#747 := (iff #442 true)
#749 := [rewrite]: #747
#414 := (iff #421 true)
#755 := [rewrite]: #414
#390 := [monotonicity #755 #749]: #389
#748 := [trans #390 #404]: #750
#737 := [monotonicity #748]: #751
#460 := [trans #737 #740]: #738
#746 := (iff #752 false)
#743 := (iff #752 #742)
#405 := (iff #545 true)
#739 := (iff #545 #398)
#418 := (iff #415 true)
#754 := [rewrite]: #418
#402 := [monotonicity #754 #755]: #739
#741 := [trans #402 #404]: #405
#744 := [monotonicity #741]: #743
#384 := [trans #744 #740]: #746
#463 := [monotonicity #384 #460]: #462
#456 := [trans #463 #733]: #734
#713 := [monotonicity #456 #719 #712]: #707
#544 := [trans #713 #708]: #715
#753 := (iff #759 true)
#413 := [rewrite]: #753
#700 := [monotonicity #413 #544]: #547
#702 := [trans #700 #703]: #704
#757 := (iff #761 false)
#763 := [rewrite]: #757
#587 := [monotonicity #763 #81 #702]: #705
#589 := [trans #587 #708]: #588
#697 := [monotonicity #589]: #694
#599 := [trans #697 #597]: #694
#693 := [quant-inst #8 #63]: #598
#600 := [mp #693 #599]: #696
[unit-resolution #600 #87 #777]: false
unsat
7554e53ad4bbf50aa6cebedfca61c8a301b15856 332 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#34 := (f3 #14 #15)
#771 := (pattern #34)
#11 := 0::Int
#63 := -1::Int
#107 := (* -1::Int #15)
#104 := (* -1::Int #14)
#168 := (mod #104 #107)
#283 := (+ #34 #168)
#284 := (= #283 0::Int)
#35 := (mod #14 #15)
#280 := (* -1::Int #35)
#281 := (+ #34 #280)
#282 := (= #281 0::Int)
#142 := (>= #14 0::Int)
#135 := (<= #15 0::Int)
#227 := (or #135 #142)
#228 := (not #227)
#131 := (<= #14 0::Int)
#225 := (or #131 #135)
#226 := (not #225)
#231 := (or #226 #228)
#285 := (ite #231 #282 #284)
#279 := (= #34 0::Int)
#17 := (= #14 0::Int)
#286 := (ite #17 #279 #285)
#278 := (= #14 #34)
#18 := (= #15 0::Int)
#287 := (ite #18 #278 #286)
#772 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #771) #287)
#290 := (forall (vars (?v0 Int) (?v1 Int)) #287)
#775 := (iff #290 #772)
#773 := (iff #287 #287)
#774 := [refl]: #773
#776 := [quant-intro #774]: #775
#174 := (* -1::Int #168)
#247 := (ite #231 #35 #174)
#250 := (ite #17 0::Int #247)
#253 := (ite #18 #14 #250)
#256 := (= #34 #253)
#259 := (forall (vars (?v0 Int) (?v1 Int)) #256)
#291 := (iff #259 #290)
#288 := (iff #256 #287)
#289 := [rewrite]: #288
#292 := [quant-intro #289]: #291
#143 := (not #142)
#136 := (not #135)
#146 := (and #136 #143)
#132 := (not #131)
#139 := (and #132 #136)
#149 := (or #139 #146)
#194 := (ite #149 #35 #174)
#197 := (ite #17 0::Int #194)
#200 := (ite #18 #14 #197)
#203 := (= #34 #200)
#206 := (forall (vars (?v0 Int) (?v1 Int)) #203)
#260 := (iff #206 #259)
#257 := (iff #203 #256)
#254 := (= #200 #253)
#251 := (= #197 #250)
#248 := (= #194 #247)
#232 := (iff #149 #231)
#229 := (iff #146 #228)
#230 := [rewrite]: #229
#219 := (iff #139 #226)
#220 := [rewrite]: #219
#233 := [monotonicity #220 #230]: #232
#249 := [monotonicity #233]: #248
#252 := [monotonicity #249]: #251
#255 := [monotonicity #252]: #254
#258 := [monotonicity #255]: #257
#261 := [quant-intro #258]: #260
#217 := (~ #206 #206)
#216 := (~ #203 #203)
#213 := [refl]: #216
#218 := [nnf-pos #213]: #217
#28 := (- #15)
#27 := (- #14)
#36 := (mod #27 #28)
#37 := (- #36)
#21 := (< 0::Int #15)
#23 := (< #14 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #14)
#22 := (and #20 #21)
#25 := (or #22 #24)
#38 := (ite #25 #35 #37)
#39 := (ite #17 0::Int #38)
#40 := (ite #18 #14 #39)
#41 := (= #34 #40)
#42 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#209 := (iff #42 #206)
#98 := (and #21 #23)
#101 := (or #22 #98)
#179 := (ite #101 #35 #174)
#89 := (= 0::Int #14)
#182 := (ite #89 0::Int #179)
#92 := (= 0::Int #15)
#185 := (ite #92 #14 #182)
#188 := (= #34 #185)
#191 := (forall (vars (?v0 Int) (?v1 Int)) #188)
#207 := (iff #191 #206)
#204 := (iff #188 #203)
#201 := (= #185 #200)
#198 := (= #182 #197)
#195 := (= #179 #194)
#150 := (iff #101 #149)
#147 := (iff #98 #146)
#144 := (iff #23 #143)
#145 := [rewrite]: #144
#137 := (iff #21 #136)
#138 := [rewrite]: #137
#148 := [monotonicity #138 #145]: #147
#140 := (iff #22 #139)
#133 := (iff #20 #132)
#134 := [rewrite]: #133
#141 := [monotonicity #134 #138]: #140
#151 := [monotonicity #141 #148]: #150
#196 := [monotonicity #151]: #195
#125 := (iff #89 #17)
#126 := [rewrite]: #125
#199 := [monotonicity #126 #196]: #198
#127 := (iff #92 #18)
#128 := [rewrite]: #127
#202 := [monotonicity #128 #199]: #201
#205 := [monotonicity #202]: #204
#208 := [quant-intro #205]: #207
#192 := (iff #42 #191)
#189 := (iff #41 #188)
#186 := (= #40 #185)
#183 := (= #39 #182)
#180 := (= #38 #179)
#177 := (= #37 #174)
#171 := (- #168)
#175 := (= #171 #174)
#176 := [rewrite]: #175
#172 := (= #37 #171)
#169 := (= #36 #168)
#108 := (= #28 #107)
#109 := [rewrite]: #108
#105 := (= #27 #104)
#106 := [rewrite]: #105
#170 := [monotonicity #106 #109]: #169
#173 := [monotonicity #170]: #172
#178 := [trans #173 #176]: #177
#102 := (iff #25 #101)
#99 := (iff #24 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#181 := [monotonicity #103 #178]: #180
#90 := (iff #17 #89)
#91 := [rewrite]: #90
#184 := [monotonicity #91 #181]: #183
#93 := (iff #18 #92)
#94 := [rewrite]: #93
#187 := [monotonicity #94 #184]: #186
#190 := [monotonicity #187]: #189
#193 := [quant-intro #190]: #192
#210 := [trans #193 #208]: #209
#167 := [asserted]: #42
#211 := [mp #167 #210]: #206
#214 := [mp~ #211 #218]: #206
#262 := [mp #214 #261]: #259
#293 := [mp #262 #292]: #290
#777 := [mp #293 #776]: #772
#8 := 1::Int
#66 := (f3 1::Int -1::Int)
#69 := (= #66 0::Int)
#82 := (not #69)
#9 := (- 1::Int)
#10 := (f3 1::Int #9)
#12 := (= #10 0::Int)
#13 := (not #12)
#85 := (iff #13 #82)
#72 := (= 0::Int #66)
#77 := (not #72)
#83 := (iff #77 #82)
#80 := (iff #72 #69)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#78 := (iff #13 #77)
#75 := (iff #12 #72)
#73 := (iff #69 #72)
#74 := [rewrite]: #73
#70 := (iff #12 #69)
#67 := (= #10 #66)
#64 := (= #9 -1::Int)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#76 := [trans #71 #74]: #75
#79 := [monotonicity #76]: #78
#86 := [trans #79 #84]: #85
#62 := [asserted]: #13
#87 := [mp #62 #86]: #82
#593 := (not #772)
#601 := (or #593 #69)
#351 := (* -1::Int -1::Int)
#435 := (* -1::Int 1::Int)
#436 := (mod #435 #351)
#437 := (+ #66 #436)
#428 := (= #437 0::Int)
#439 := (mod 1::Int -1::Int)
#440 := (* -1::Int #439)
#441 := (+ #66 #440)
#438 := (= #441 0::Int)
#442 := (>= 1::Int 0::Int)
#421 := (<= -1::Int 0::Int)
#756 := (or #421 #442)
#758 := (not #756)
#415 := (<= 1::Int 0::Int)
#545 := (or #415 #421)
#752 := (not #545)
#426 := (or #752 #758)
#427 := (ite #426 #438 #428)
#759 := (= 1::Int 0::Int)
#760 := (ite #759 #69 #427)
#761 := (= 1::Int #66)
#762 := (= -1::Int 0::Int)
#757 := (ite #762 #761 #760)
#602 := (or #593 #757)
#604 := (iff #602 #601)
#698 := (iff #601 #601)
#695 := [rewrite]: #698
#599 := (iff #757 #69)
#418 := (= #66 1::Int)
#693 := (ite false #418 #69)
#582 := (iff #693 #69)
#597 := [rewrite]: #582
#694 := (iff #757 #693)
#696 := (iff #760 #69)
#701 := (ite false #69 #69)
#702 := (iff #701 #69)
#705 := [rewrite]: #702
#589 := (iff #760 #701)
#587 := (iff #427 #69)
#703 := (iff #427 #701)
#547 := (iff #428 #69)
#544 := (= #437 #66)
#719 := (+ #66 0::Int)
#716 := (= #719 #66)
#717 := [rewrite]: #716
#708 := (= #437 #719)
#713 := (= #436 0::Int)
#710 := (mod -1::Int 1::Int)
#706 := (= #710 0::Int)
#707 := [rewrite]: #706
#711 := (= #436 #710)
#567 := (= #351 1::Int)
#709 := [rewrite]: #567
#565 := (= #435 -1::Int)
#566 := [rewrite]: #565
#712 := [monotonicity #566 #709]: #711
#714 := [trans #712 #707]: #713
#715 := [monotonicity #714]: #708
#546 := [trans #715 #717]: #544
#700 := [monotonicity #546]: #547
#718 := (iff #438 #69)
#722 := (= #441 #66)
#720 := (= #441 #719)
#726 := (= #440 0::Int)
#727 := (* -1::Int 0::Int)
#725 := (= #727 0::Int)
#729 := [rewrite]: #725
#728 := (= #440 #727)
#448 := (= #439 0::Int)
#449 := [rewrite]: #448
#443 := [monotonicity #449]: #728
#730 := [trans #443 #729]: #726
#721 := [monotonicity #730]: #720
#723 := [trans #721 #717]: #722
#724 := [monotonicity #723]: #718
#446 := (iff #426 false)
#457 := (or false false)
#732 := (iff #457 false)
#736 := [rewrite]: #732
#731 := (iff #426 #457)
#734 := (iff #758 false)
#1 := true
#740 := (not true)
#747 := (iff #740 false)
#749 := [rewrite]: #747
#357 := (iff #758 #740)
#462 := (iff #756 true)
#751 := (or true true)
#460 := (iff #751 true)
#461 := [rewrite]: #460
#737 := (iff #756 #751)
#750 := (iff #442 true)
#748 := [rewrite]: #750
#402 := (iff #421 true)
#403 := [rewrite]: #402
#738 := [monotonicity #403 #748]: #737
#463 := [trans #738 #461]: #462
#733 := [monotonicity #463]: #357
#456 := [trans #733 #749]: #734
#389 := (iff #752 false)
#746 := (iff #752 #740)
#744 := (iff #545 true)
#404 := (or false true)
#742 := (iff #404 true)
#743 := [rewrite]: #742
#405 := (iff #545 #404)
#398 := (iff #415 false)
#739 := [rewrite]: #398
#741 := [monotonicity #739 #403]: #405
#745 := [trans #741 #743]: #744
#384 := [monotonicity #745]: #746
#390 := [trans #384 #749]: #389
#735 := [monotonicity #390 #456]: #731
#447 := [trans #735 #736]: #446
#704 := [monotonicity #447 #724 #700]: #703
#588 := [trans #704 #705]: #587
#414 := (iff #759 false)
#755 := [rewrite]: #414
#548 := [monotonicity #755 #588]: #589
#598 := [trans #548 #705]: #696
#413 := (iff #761 #418)
#754 := [rewrite]: #413
#763 := (iff #762 false)
#753 := [rewrite]: #763
#697 := [monotonicity #753 #754 #598]: #694
#600 := [trans #697 #597]: #599
#605 := [monotonicity #600]: #604
#699 := [trans #605 #695]: #604
#603 := [quant-inst #8 #63]: #602
#686 := [mp #603 #699]: #601
[unit-resolution #686 #87 #777]: false
unsat
768cdc3a48375ab653481018d34501c9146cb16e 334 0
#2 := false
decl f3 :: (-> Int Int Int)
#16 := (:var 0 Int)
#15 := (:var 1 Int)
#35 := (f3 #15 #16)
#772 := (pattern #35)
#12 := 0::Int
#64 := -1::Int
#108 := (* -1::Int #16)
#105 := (* -1::Int #15)
#169 := (mod #105 #108)
#284 := (+ #35 #169)
#285 := (= #284 0::Int)
#36 := (mod #15 #16)
#281 := (* -1::Int #36)
#282 := (+ #35 #281)
#283 := (= #282 0::Int)
#143 := (>= #15 0::Int)
#136 := (<= #16 0::Int)
#228 := (or #136 #143)
#229 := (not #228)
#132 := (<= #15 0::Int)
#226 := (or #132 #136)
#227 := (not #226)
#232 := (or #227 #229)
#286 := (ite #232 #283 #285)
#280 := (= #35 0::Int)
#18 := (= #15 0::Int)
#287 := (ite #18 #280 #286)
#279 := (= #15 #35)
#19 := (= #16 0::Int)
#288 := (ite #19 #279 #287)
#773 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #772) #288)
#291 := (forall (vars (?v0 Int) (?v1 Int)) #288)
#776 := (iff #291 #773)
#774 := (iff #288 #288)
#775 := [refl]: #774
#777 := [quant-intro #775]: #776
#175 := (* -1::Int #169)
#248 := (ite #232 #36 #175)
#251 := (ite #18 0::Int #248)
#254 := (ite #19 #15 #251)
#257 := (= #35 #254)
#260 := (forall (vars (?v0 Int) (?v1 Int)) #257)
#292 := (iff #260 #291)
#289 := (iff #257 #288)
#290 := [rewrite]: #289
#293 := [quant-intro #290]: #292
#144 := (not #143)
#137 := (not #136)
#147 := (and #137 #144)
#133 := (not #132)
#140 := (and #133 #137)
#150 := (or #140 #147)
#195 := (ite #150 #36 #175)
#198 := (ite #18 0::Int #195)
#201 := (ite #19 #15 #198)
#204 := (= #35 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#261 := (iff #207 #260)
#258 := (iff #204 #257)
#255 := (= #201 #254)
#252 := (= #198 #251)
#249 := (= #195 #248)
#233 := (iff #150 #232)
#230 := (iff #147 #229)
#231 := [rewrite]: #230
#220 := (iff #140 #227)
#221 := [rewrite]: #220
#234 := [monotonicity #221 #231]: #233
#250 := [monotonicity #234]: #249
#253 := [monotonicity #250]: #252
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [quant-intro #259]: #261
#218 := (~ #207 #207)
#217 := (~ #204 #204)
#214 := [refl]: #217
#219 := [nnf-pos #214]: #218
#29 := (- #16)
#28 := (- #15)
#37 := (mod #28 #29)
#38 := (- #37)
#22 := (< 0::Int #16)
#24 := (< #15 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #15)
#23 := (and #21 #22)
#26 := (or #23 #25)
#39 := (ite #26 #36 #38)
#40 := (ite #18 0::Int #39)
#41 := (ite #19 #15 #40)
#42 := (= #35 #41)
#43 := (forall (vars (?v0 Int) (?v1 Int)) #42)
#210 := (iff #43 #207)
#99 := (and #22 #24)
#102 := (or #23 #99)
#180 := (ite #102 #36 #175)
#90 := (= 0::Int #15)
#183 := (ite #90 0::Int #180)
#93 := (= 0::Int #16)
#186 := (ite #93 #15 #183)
#189 := (= #35 #186)
#192 := (forall (vars (?v0 Int) (?v1 Int)) #189)
#208 := (iff #192 #207)
#205 := (iff #189 #204)
#202 := (= #186 #201)
#199 := (= #183 #198)
#196 := (= #180 #195)
#151 := (iff #102 #150)
#148 := (iff #99 #147)
#145 := (iff #24 #144)
#146 := [rewrite]: #145
#138 := (iff #22 #137)
#139 := [rewrite]: #138
#149 := [monotonicity #139 #146]: #148
#141 := (iff #23 #140)
#134 := (iff #21 #133)
#135 := [rewrite]: #134
#142 := [monotonicity #135 #139]: #141
#152 := [monotonicity #142 #149]: #151
#197 := [monotonicity #152]: #196
#126 := (iff #90 #18)
#127 := [rewrite]: #126
#200 := [monotonicity #127 #197]: #199
#128 := (iff #93 #19)
#129 := [rewrite]: #128
#203 := [monotonicity #129 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#193 := (iff #43 #192)
#190 := (iff #42 #189)
#187 := (= #41 #186)
#184 := (= #40 #183)
#181 := (= #39 #180)
#178 := (= #38 #175)
#172 := (- #169)
#176 := (= #172 #175)
#177 := [rewrite]: #176
#173 := (= #38 #172)
#170 := (= #37 #169)
#109 := (= #29 #108)
#110 := [rewrite]: #109
#106 := (= #28 #105)
#107 := [rewrite]: #106
#171 := [monotonicity #107 #110]: #170
#174 := [monotonicity #171]: #173
#179 := [trans #174 #177]: #178
#103 := (iff #26 #102)
#100 := (iff #25 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#182 := [monotonicity #104 #179]: #181
#91 := (iff #18 #90)
#92 := [rewrite]: #91
#185 := [monotonicity #92 #182]: #184
#94 := (iff #19 #93)
#95 := [rewrite]: #94
#188 := [monotonicity #95 #185]: #187
#191 := [monotonicity #188]: #190
#194 := [quant-intro #191]: #193
#211 := [trans #194 #209]: #210
#168 := [asserted]: #43
#212 := [mp #168 #211]: #207
#215 := [mp~ #212 #219]: #207
#263 := [mp #215 #262]: #260
#294 := [mp #263 #293]: #291
#778 := [mp #294 #777]: #773
#8 := 3::Int
#67 := (f3 3::Int -1::Int)
#70 := (= #67 0::Int)
#83 := (not #70)
#9 := 1::Int
#10 := (- 1::Int)
#11 := (f3 3::Int #10)
#13 := (= #11 0::Int)
#14 := (not #13)
#86 := (iff #14 #83)
#73 := (= 0::Int #67)
#78 := (not #73)
#84 := (iff #78 #83)
#81 := (iff #73 #70)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#79 := (iff #14 #78)
#76 := (iff #13 #73)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #13 #70)
#68 := (= #11 #67)
#65 := (= #10 -1::Int)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#77 := [trans #72 #75]: #76
#80 := [monotonicity #77]: #79
#87 := [trans #80 #85]: #86
#63 := [asserted]: #14
#88 := [mp #63 #87]: #83
#602 := (not #773)
#603 := (or #602 #70)
#352 := (* -1::Int -1::Int)
#436 := (* -1::Int 3::Int)
#437 := (mod #436 #352)
#438 := (+ #67 #437)
#429 := (= #438 0::Int)
#440 := (mod 3::Int -1::Int)
#441 := (* -1::Int #440)
#442 := (+ #67 #441)
#439 := (= #442 0::Int)
#443 := (>= 3::Int 0::Int)
#422 := (<= -1::Int 0::Int)
#757 := (or #422 #443)
#759 := (not #757)
#416 := (<= 3::Int 0::Int)
#546 := (or #416 #422)
#753 := (not #546)
#427 := (or #753 #759)
#428 := (ite #427 #439 #429)
#760 := (= 3::Int 0::Int)
#761 := (ite #760 #70 #428)
#762 := (= 3::Int #67)
#763 := (= -1::Int 0::Int)
#758 := (ite #763 #762 #761)
#604 := (or #602 #758)
#606 := (iff #604 #603)
#696 := (iff #603 #603)
#700 := [rewrite]: #696
#601 := (iff #758 #70)
#419 := (= #67 3::Int)
#695 := (ite false #419 #70)
#598 := (iff #695 #70)
#600 := [rewrite]: #598
#698 := (iff #758 #695)
#599 := (iff #761 #70)
#704 := (ite false #70 #70)
#706 := (iff #704 #70)
#588 := [rewrite]: #706
#549 := (iff #761 #704)
#589 := (iff #428 #70)
#705 := (iff #428 #704)
#701 := (iff #429 #70)
#547 := (= #438 #67)
#720 := (+ #67 0::Int)
#717 := (= #720 #67)
#718 := [rewrite]: #717
#716 := (= #438 #720)
#715 := (= #437 0::Int)
#566 := -3::Int
#712 := (mod -3::Int 1::Int)
#708 := (= #712 0::Int)
#714 := [rewrite]: #708
#713 := (= #437 #712)
#710 := (= #352 1::Int)
#711 := [rewrite]: #710
#567 := (= #436 -3::Int)
#568 := [rewrite]: #567
#707 := [monotonicity #568 #711]: #713
#709 := [trans #707 #714]: #715
#545 := [monotonicity #709]: #716
#548 := [trans #545 #718]: #547
#702 := [monotonicity #548]: #701
#719 := (iff #439 #70)
#723 := (= #442 #67)
#721 := (= #442 #720)
#727 := (= #441 0::Int)
#728 := (* -1::Int 0::Int)
#726 := (= #728 0::Int)
#730 := [rewrite]: #726
#729 := (= #441 #728)
#449 := (= #440 0::Int)
#450 := [rewrite]: #449
#444 := [monotonicity #450]: #729
#731 := [trans #444 #730]: #727
#722 := [monotonicity #731]: #721
#724 := [trans #722 #718]: #723
#725 := [monotonicity #724]: #719
#447 := (iff #427 false)
#458 := (or false false)
#733 := (iff #458 false)
#737 := [rewrite]: #733
#732 := (iff #427 #458)
#735 := (iff #759 false)
#1 := true
#741 := (not true)
#748 := (iff #741 false)
#750 := [rewrite]: #748
#358 := (iff #759 #741)
#463 := (iff #757 true)
#752 := (or true true)
#461 := (iff #752 true)
#462 := [rewrite]: #461
#738 := (iff #757 #752)
#751 := (iff #443 true)
#749 := [rewrite]: #751
#403 := (iff #422 true)
#404 := [rewrite]: #403
#739 := [monotonicity #404 #749]: #738
#464 := [trans #739 #462]: #463
#734 := [monotonicity #464]: #358
#457 := [trans #734 #750]: #735
#390 := (iff #753 false)
#747 := (iff #753 #741)
#745 := (iff #546 true)
#405 := (or false true)
#743 := (iff #405 true)
#744 := [rewrite]: #743
#406 := (iff #546 #405)
#399 := (iff #416 false)
#740 := [rewrite]: #399
#742 := [monotonicity #740 #404]: #406
#746 := [trans #742 #744]: #745
#385 := [monotonicity #746]: #747
#391 := [trans #385 #750]: #390
#736 := [monotonicity #391 #457]: #732
#448 := [trans #736 #737]: #447
#703 := [monotonicity #448 #725 #702]: #705
#590 := [trans #703 #588]: #589
#415 := (iff #760 false)
#756 := [rewrite]: #415
#697 := [monotonicity #756 #590]: #549
#694 := [trans #697 #588]: #599
#414 := (iff #762 #419)
#755 := [rewrite]: #414
#764 := (iff #763 false)
#754 := [rewrite]: #764
#583 := [monotonicity #754 #755 #694]: #698
#594 := [trans #583 #600]: #601
#699 := [monotonicity #594]: #606
#687 := [trans #699 #700]: #606
#605 := [quant-inst #8 #64]: #604
#689 := [mp #605 #687]: #603
[unit-resolution #689 #88 #778]: false
unsat
d313c8803fd67ab7c81ae803664ddc96f0a1cd58 311 0
#2 := false
decl f3 :: (-> Int Int Int)
#16 := (:var 0 Int)
#15 := (:var 1 Int)
#35 := (f3 #15 #16)
#772 := (pattern #35)
#12 := 0::Int
#64 := -1::Int
#108 := (* -1::Int #16)
#105 := (* -1::Int #15)
#169 := (mod #105 #108)
#284 := (+ #35 #169)
#285 := (= #284 0::Int)
#36 := (mod #15 #16)
#281 := (* -1::Int #36)
#282 := (+ #35 #281)
#283 := (= #282 0::Int)
#143 := (>= #15 0::Int)
#136 := (<= #16 0::Int)
#228 := (or #136 #143)
#229 := (not #228)
#132 := (<= #15 0::Int)
#226 := (or #132 #136)
#227 := (not #226)
#232 := (or #227 #229)
#286 := (ite #232 #283 #285)
#280 := (= #35 0::Int)
#18 := (= #15 0::Int)
#287 := (ite #18 #280 #286)
#279 := (= #15 #35)
#19 := (= #16 0::Int)
#288 := (ite #19 #279 #287)
#773 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #772) #288)
#291 := (forall (vars (?v0 Int) (?v1 Int)) #288)
#776 := (iff #291 #773)
#774 := (iff #288 #288)
#775 := [refl]: #774
#777 := [quant-intro #775]: #776
#175 := (* -1::Int #169)
#248 := (ite #232 #36 #175)
#251 := (ite #18 0::Int #248)
#254 := (ite #19 #15 #251)
#257 := (= #35 #254)
#260 := (forall (vars (?v0 Int) (?v1 Int)) #257)
#292 := (iff #260 #291)
#289 := (iff #257 #288)
#290 := [rewrite]: #289
#293 := [quant-intro #290]: #292
#144 := (not #143)
#137 := (not #136)
#147 := (and #137 #144)
#133 := (not #132)
#140 := (and #133 #137)
#150 := (or #140 #147)
#195 := (ite #150 #36 #175)
#198 := (ite #18 0::Int #195)
#201 := (ite #19 #15 #198)
#204 := (= #35 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#261 := (iff #207 #260)
#258 := (iff #204 #257)
#255 := (= #201 #254)
#252 := (= #198 #251)
#249 := (= #195 #248)
#233 := (iff #150 #232)
#230 := (iff #147 #229)
#231 := [rewrite]: #230
#220 := (iff #140 #227)
#221 := [rewrite]: #220
#234 := [monotonicity #221 #231]: #233
#250 := [monotonicity #234]: #249
#253 := [monotonicity #250]: #252
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [quant-intro #259]: #261
#218 := (~ #207 #207)
#217 := (~ #204 #204)
#214 := [refl]: #217
#219 := [nnf-pos #214]: #218
#29 := (- #16)
#28 := (- #15)
#37 := (mod #28 #29)
#38 := (- #37)
#22 := (< 0::Int #16)
#24 := (< #15 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #15)
#23 := (and #21 #22)
#26 := (or #23 #25)
#39 := (ite #26 #36 #38)
#40 := (ite #18 0::Int #39)
#41 := (ite #19 #15 #40)
#42 := (= #35 #41)
#43 := (forall (vars (?v0 Int) (?v1 Int)) #42)
#210 := (iff #43 #207)
#99 := (and #22 #24)
#102 := (or #23 #99)
#180 := (ite #102 #36 #175)
#90 := (= 0::Int #15)
#183 := (ite #90 0::Int #180)
#93 := (= 0::Int #16)
#186 := (ite #93 #15 #183)
#189 := (= #35 #186)
#192 := (forall (vars (?v0 Int) (?v1 Int)) #189)
#208 := (iff #192 #207)
#205 := (iff #189 #204)
#202 := (= #186 #201)
#199 := (= #183 #198)
#196 := (= #180 #195)
#151 := (iff #102 #150)
#148 := (iff #99 #147)
#145 := (iff #24 #144)
#146 := [rewrite]: #145
#138 := (iff #22 #137)
#139 := [rewrite]: #138
#149 := [monotonicity #139 #146]: #148
#141 := (iff #23 #140)
#134 := (iff #21 #133)
#135 := [rewrite]: #134
#142 := [monotonicity #135 #139]: #141
#152 := [monotonicity #142 #149]: #151
#197 := [monotonicity #152]: #196
#126 := (iff #90 #18)
#127 := [rewrite]: #126
#200 := [monotonicity #127 #197]: #199
#128 := (iff #93 #19)
#129 := [rewrite]: #128
#203 := [monotonicity #129 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#193 := (iff #43 #192)
#190 := (iff #42 #189)
#187 := (= #41 #186)
#184 := (= #40 #183)
#181 := (= #39 #180)
#178 := (= #38 #175)
#172 := (- #169)
#176 := (= #172 #175)
#177 := [rewrite]: #176
#173 := (= #38 #172)
#170 := (= #37 #169)
#109 := (= #29 #108)
#110 := [rewrite]: #109
#106 := (= #28 #105)
#107 := [rewrite]: #106
#171 := [monotonicity #107 #110]: #170
#174 := [monotonicity #171]: #173
#179 := [trans #174 #177]: #178
#103 := (iff #26 #102)
#100 := (iff #25 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#182 := [monotonicity #104 #179]: #181
#91 := (iff #18 #90)
#92 := [rewrite]: #91
#185 := [monotonicity #92 #182]: #184
#94 := (iff #19 #93)
#95 := [rewrite]: #94
#188 := [monotonicity #95 #185]: #187
#191 := [monotonicity #188]: #190
#194 := [quant-intro #191]: #193
#211 := [trans #194 #209]: #210
#168 := [asserted]: #43
#212 := [mp #168 #211]: #207
#215 := [mp~ #212 #219]: #207
#263 := [mp #215 #262]: #260
#294 := [mp #263 #293]: #291
#778 := [mp #294 #777]: #773
decl f4 :: Int
#8 := f4
#67 := (f3 f4 -1::Int)
#70 := (= #67 0::Int)
#83 := (not #70)
#9 := 1::Int
#10 := (- 1::Int)
#11 := (f3 f4 #10)
#13 := (= #11 0::Int)
#14 := (not #13)
#86 := (iff #14 #83)
#73 := (= 0::Int #67)
#78 := (not #73)
#84 := (iff #78 #83)
#81 := (iff #73 #70)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#79 := (iff #14 #78)
#76 := (iff #13 #73)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #13 #70)
#68 := (= #11 #67)
#65 := (= #10 -1::Int)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#77 := [trans #72 #75]: #76
#80 := [monotonicity #77]: #79
#87 := [trans #80 #85]: #86
#63 := [asserted]: #14
#88 := [mp #63 #87]: #83
#716 := (not #773)
#545 := (or #716 #70)
#352 := (* -1::Int -1::Int)
#436 := (* -1::Int f4)
#437 := (mod #436 #352)
#438 := (+ #67 #437)
#429 := (= #438 0::Int)
#440 := (mod f4 -1::Int)
#441 := (* -1::Int #440)
#442 := (+ #67 #441)
#439 := (= #442 0::Int)
#443 := (>= f4 0::Int)
#422 := (<= -1::Int 0::Int)
#757 := (or #422 #443)
#759 := (not #757)
#416 := (<= f4 0::Int)
#546 := (or #416 #422)
#753 := (not #546)
#427 := (or #753 #759)
#428 := (ite #427 #439 #429)
#760 := (= f4 0::Int)
#761 := (ite #760 #70 #428)
#762 := (= f4 #67)
#763 := (= -1::Int 0::Int)
#758 := (ite #763 #762 #761)
#547 := (or #716 #758)
#701 := (iff #547 #545)
#704 := (iff #545 #545)
#705 := [rewrite]: #704
#715 := (iff #758 #70)
#712 := (ite false #762 #70)
#708 := (iff #712 #70)
#714 := [rewrite]: #708
#713 := (iff #758 #712)
#710 := (iff #761 #70)
#719 := (ite #760 #70 #70)
#567 := (iff #719 #70)
#568 := [rewrite]: #567
#725 := (iff #761 #719)
#723 := (iff #428 #70)
#720 := (ite false #439 #70)
#717 := (iff #720 #70)
#718 := [rewrite]: #717
#721 := (iff #428 #720)
#727 := (iff #429 #70)
#726 := (= #438 #67)
#449 := (+ #67 0::Int)
#729 := (= #449 #67)
#444 := [rewrite]: #729
#450 := (= #438 #449)
#447 := (= #437 0::Int)
#458 := (mod #436 1::Int)
#733 := (= #458 0::Int)
#737 := [rewrite]: #733
#732 := (= #437 #458)
#735 := (= #352 1::Int)
#457 := [rewrite]: #735
#736 := [monotonicity #457]: #732
#448 := [trans #736 #737]: #447
#728 := [monotonicity #448]: #450
#730 := [trans #728 #444]: #726
#731 := [monotonicity #730]: #727
#358 := (iff #427 false)
#739 := (or false false)
#463 := (iff #739 false)
#464 := [rewrite]: #463
#461 := (iff #427 #739)
#752 := (iff #759 false)
#1 := true
#405 := (not true)
#743 := (iff #405 false)
#744 := [rewrite]: #743
#751 := (iff #759 #405)
#390 := (iff #757 true)
#741 := (or true #443)
#748 := (iff #741 true)
#750 := [rewrite]: #748
#747 := (iff #757 #741)
#414 := (iff #422 true)
#419 := [rewrite]: #414
#385 := [monotonicity #419]: #747
#391 := [trans #385 #750]: #390
#749 := [monotonicity #391]: #751
#738 := [trans #749 #744]: #752
#745 := (iff #753 false)
#406 := (iff #753 #405)
#403 := (iff #546 true)
#755 := (or #416 true)
#399 := (iff #755 true)
#740 := [rewrite]: #399
#415 := (iff #546 #755)
#756 := [monotonicity #419]: #415
#404 := [trans #756 #740]: #403
#742 := [monotonicity #404]: #406
#746 := [trans #742 #744]: #745
#462 := [monotonicity #746 #738]: #461
#734 := [trans #462 #464]: #358
#722 := [monotonicity #734 #731]: #721
#724 := [trans #722 #718]: #723
#566 := [monotonicity #724]: #725
#711 := [trans #566 #568]: #710
#764 := (iff #763 false)
#754 := [rewrite]: #764
#707 := [monotonicity #754 #711]: #713
#709 := [trans #707 #714]: #715
#702 := [monotonicity #709]: #701
#703 := [trans #702 #705]: #701
#548 := [quant-inst #8 #64]: #547
#706 := [mp #548 #703]: #545
[unit-resolution #706 #88 #778]: false
unsat
4e6d1a0d0e4d1e5ccd22f2801665c723ffc6cafc 304 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#33 := (f3 #13 #14)
#757 := (pattern #33)
#8 := 0::Int
#88 := -1::Int
#92 := (* -1::Int #14)
#89 := (* -1::Int #13)
#153 := (mod #89 #92)
#268 := (+ #33 #153)
#269 := (= #268 0::Int)
#34 := (mod #13 #14)
#265 := (* -1::Int #34)
#266 := (+ #33 #265)
#267 := (= #266 0::Int)
#127 := (>= #13 0::Int)
#120 := (<= #14 0::Int)
#212 := (or #120 #127)
#213 := (not #212)
#116 := (<= #13 0::Int)
#210 := (or #116 #120)
#211 := (not #210)
#216 := (or #211 #213)
#270 := (ite #216 #267 #269)
#264 := (= #33 0::Int)
#16 := (= #13 0::Int)
#271 := (ite #16 #264 #270)
#263 := (= #13 #33)
#17 := (= #14 0::Int)
#272 := (ite #17 #263 #271)
#758 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #757) #272)
#275 := (forall (vars (?v0 Int) (?v1 Int)) #272)
#761 := (iff #275 #758)
#759 := (iff #272 #272)
#760 := [refl]: #759
#762 := [quant-intro #760]: #761
#159 := (* -1::Int #153)
#232 := (ite #216 #34 #159)
#235 := (ite #16 0::Int #232)
#238 := (ite #17 #13 #235)
#241 := (= #33 #238)
#244 := (forall (vars (?v0 Int) (?v1 Int)) #241)
#276 := (iff #244 #275)
#273 := (iff #241 #272)
#274 := [rewrite]: #273
#277 := [quant-intro #274]: #276
#128 := (not #127)
#121 := (not #120)
#131 := (and #121 #128)
#117 := (not #116)
#124 := (and #117 #121)
#134 := (or #124 #131)
#179 := (ite #134 #34 #159)
#182 := (ite #16 0::Int #179)
#185 := (ite #17 #13 #182)
#188 := (= #33 #185)
#191 := (forall (vars (?v0 Int) (?v1 Int)) #188)
#245 := (iff #191 #244)
#242 := (iff #188 #241)
#239 := (= #185 #238)
#236 := (= #182 #235)
#233 := (= #179 #232)
#217 := (iff #134 #216)
#214 := (iff #131 #213)
#215 := [rewrite]: #214
#204 := (iff #124 #211)
#205 := [rewrite]: #204
#218 := [monotonicity #205 #215]: #217
#234 := [monotonicity #218]: #233
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [quant-intro #243]: #245
#202 := (~ #191 #191)
#201 := (~ #188 #188)
#198 := [refl]: #201
#203 := [nnf-pos #198]: #202
#27 := (- #14)
#26 := (- #13)
#35 := (mod #26 #27)
#36 := (- #35)
#20 := (< 0::Int #14)
#22 := (< #13 0::Int)
#23 := (and #22 #20)
#19 := (< 0::Int #13)
#21 := (and #19 #20)
#24 := (or #21 #23)
#37 := (ite #24 #34 #36)
#38 := (ite #16 0::Int #37)
#39 := (ite #17 #13 #38)
#40 := (= #33 #39)
#41 := (forall (vars (?v0 Int) (?v1 Int)) #40)
#194 := (iff #41 #191)
#82 := (and #20 #22)
#85 := (or #21 #82)
#164 := (ite #85 #34 #159)
#73 := (= 0::Int #13)
#167 := (ite #73 0::Int #164)
#76 := (= 0::Int #14)
#170 := (ite #76 #13 #167)
#173 := (= #33 #170)
#176 := (forall (vars (?v0 Int) (?v1 Int)) #173)
#192 := (iff #176 #191)
#189 := (iff #173 #188)
#186 := (= #170 #185)
#183 := (= #167 #182)
#180 := (= #164 #179)
#135 := (iff #85 #134)
#132 := (iff #82 #131)
#129 := (iff #22 #128)
#130 := [rewrite]: #129
#122 := (iff #20 #121)
#123 := [rewrite]: #122
#133 := [monotonicity #123 #130]: #132
#125 := (iff #21 #124)
#118 := (iff #19 #117)
#119 := [rewrite]: #118
#126 := [monotonicity #119 #123]: #125
#136 := [monotonicity #126 #133]: #135
#181 := [monotonicity #136]: #180
#110 := (iff #73 #16)
#111 := [rewrite]: #110
#184 := [monotonicity #111 #181]: #183
#112 := (iff #76 #17)
#113 := [rewrite]: #112
#187 := [monotonicity #113 #184]: #186
#190 := [monotonicity #187]: #189
#193 := [quant-intro #190]: #192
#177 := (iff #41 #176)
#174 := (iff #40 #173)
#171 := (= #39 #170)
#168 := (= #38 #167)
#165 := (= #37 #164)
#162 := (= #36 #159)
#156 := (- #153)
#160 := (= #156 #159)
#161 := [rewrite]: #160
#157 := (= #36 #156)
#154 := (= #35 #153)
#93 := (= #27 #92)
#94 := [rewrite]: #93
#90 := (= #26 #89)
#91 := [rewrite]: #90
#155 := [monotonicity #91 #94]: #154
#158 := [monotonicity #155]: #157
#163 := [trans #158 #161]: #162
#86 := (iff #24 #85)
#83 := (iff #23 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#166 := [monotonicity #87 #163]: #165
#74 := (iff #16 #73)
#75 := [rewrite]: #74
#169 := [monotonicity #75 #166]: #168
#77 := (iff #17 #76)
#78 := [rewrite]: #77
#172 := [monotonicity #78 #169]: #171
#175 := [monotonicity #172]: #174
#178 := [quant-intro #175]: #177
#195 := [trans #178 #193]: #194
#152 := [asserted]: #41
#196 := [mp #152 #195]: #191
#199 := [mp~ #196 #203]: #191
#247 := [mp #199 #246]: #244
#278 := [mp #247 #277]: #275
#763 := [mp #278 #762]: #758
#9 := 3::Int
#10 := (f3 0::Int 3::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#61 := [asserted]: #12
#679 := (not #758)
#680 := (or #679 #11)
#336 := (* -1::Int 3::Int)
#421 := (* -1::Int 0::Int)
#422 := (mod #421 #336)
#423 := (+ #10 #422)
#414 := (= #423 0::Int)
#425 := (mod 0::Int 3::Int)
#426 := (* -1::Int #425)
#354 := (+ #10 #426)
#427 := (= #354 0::Int)
#424 := (>= 0::Int 0::Int)
#428 := (<= 3::Int 0::Int)
#407 := (or #428 #424)
#742 := (not #407)
#744 := (<= 0::Int 0::Int)
#401 := (or #744 #428)
#531 := (not #401)
#738 := (or #531 #742)
#412 := (ite #738 #427 #414)
#413 := (= 0::Int 0::Int)
#745 := (ite #413 #11 #412)
#62 := (= 0::Int #10)
#746 := (= 3::Int 0::Int)
#747 := (ite #746 #62 #745)
#683 := (or #679 #747)
#583 := (iff #683 #680)
#586 := (iff #680 #680)
#579 := [rewrite]: #586
#682 := (iff #747 #11)
#700 := (ite false #11 #11)
#530 := (iff #700 #11)
#532 := [rewrite]: #530
#575 := (iff #747 #700)
#573 := (iff #745 #11)
#1 := true
#687 := (ite true #11 #11)
#688 := (iff #687 #11)
#691 := [rewrite]: #688
#689 := (iff #745 #687)
#533 := (iff #412 #11)
#694 := (iff #412 #700)
#693 := (iff #414 #11)
#698 := (= #423 #10)
#714 := (+ #10 0::Int)
#715 := (= #714 #10)
#712 := [rewrite]: #715
#696 := (= #423 #714)
#553 := (= #422 0::Int)
#702 := -3::Int
#709 := (mod 0::Int -3::Int)
#551 := (= #709 0::Int)
#552 := [rewrite]: #551
#704 := (= #422 #709)
#703 := (= #336 -3::Int)
#708 := [rewrite]: #703
#433 := (= #421 0::Int)
#434 := [rewrite]: #433
#710 := [monotonicity #434 #708]: #704
#695 := [trans #710 #552]: #553
#697 := [monotonicity #695]: #696
#692 := [trans #697 #712]: #698
#699 := [monotonicity #692]: #693
#706 := (iff #427 #11)
#716 := (= #354 #10)
#429 := (= #354 #714)
#435 := (= #426 0::Int)
#722 := (= #426 #421)
#721 := (= #425 0::Int)
#718 := [rewrite]: #721
#432 := [monotonicity #718]: #722
#713 := [trans #432 #434]: #435
#711 := [monotonicity #713]: #429
#705 := [trans #711 #712]: #716
#707 := [monotonicity #705]: #706
#443 := (iff #738 false)
#449 := (or false false)
#720 := (iff #449 false)
#442 := [rewrite]: #720
#342 := (iff #738 #449)
#447 := (iff #742 false)
#727 := (not true)
#730 := (iff #727 false)
#731 := [rewrite]: #730
#724 := (iff #742 #727)
#737 := (iff #407 true)
#735 := (or false true)
#736 := (iff #735 true)
#734 := [rewrite]: #736
#375 := (iff #407 #735)
#370 := (iff #424 true)
#733 := [rewrite]: #370
#740 := (iff #428 false)
#400 := [rewrite]: #740
#376 := [monotonicity #400 #733]: #375
#723 := [trans #376 #734]: #737
#446 := [monotonicity #723]: #724
#448 := [trans #446 #731]: #447
#726 := (iff #531 false)
#728 := (iff #531 #727)
#390 := (iff #401 true)
#741 := (or true false)
#388 := (iff #741 true)
#389 := [rewrite]: #388
#384 := (iff #401 #741)
#399 := (iff #744 true)
#404 := [rewrite]: #399
#725 := [monotonicity #404 #400]: #384
#391 := [trans #725 #389]: #390
#729 := [monotonicity #391]: #728
#732 := [trans #729 #731]: #726
#719 := [monotonicity #732 #448]: #342
#717 := [trans #719 #442]: #443
#701 := [monotonicity #717 #707 #699]: #694
#686 := [trans #701 #532]: #533
#749 := (iff #413 true)
#739 := [rewrite]: #749
#690 := [monotonicity #739 #686]: #689
#574 := [trans #690 #691]: #573
#68 := (iff #62 #11)
#69 := [rewrite]: #68
#748 := (iff #746 false)
#743 := [rewrite]: #748
#534 := [monotonicity #743 #69 #574]: #575
#584 := [trans #534 #532]: #682
#585 := [monotonicity #584]: #583
#587 := [trans #585 #579]: #583
#568 := [quant-inst #8 #9]: #683
#588 := [mp #568 #587]: #680
[unit-resolution #588 #61 #763]: false
unsat
8c07fa0d73a756ba84d0fe9fed90f7b86f2beac8 323 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#34 := (f3 #14 #15)
#773 := (pattern #34)
#8 := 0::Int
#104 := -1::Int
#108 := (* -1::Int #15)
#105 := (* -1::Int #14)
#169 := (mod #105 #108)
#284 := (+ #34 #169)
#285 := (= #284 0::Int)
#35 := (mod #14 #15)
#281 := (* -1::Int #35)
#282 := (+ #34 #281)
#283 := (= #282 0::Int)
#143 := (>= #14 0::Int)
#136 := (<= #15 0::Int)
#228 := (or #136 #143)
#229 := (not #228)
#132 := (<= #14 0::Int)
#226 := (or #132 #136)
#227 := (not #226)
#232 := (or #227 #229)
#286 := (ite #232 #283 #285)
#280 := (= #34 0::Int)
#17 := (= #14 0::Int)
#287 := (ite #17 #280 #286)
#279 := (= #14 #34)
#18 := (= #15 0::Int)
#288 := (ite #18 #279 #287)
#774 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #773) #288)
#291 := (forall (vars (?v0 Int) (?v1 Int)) #288)
#777 := (iff #291 #774)
#775 := (iff #288 #288)
#776 := [refl]: #775
#778 := [quant-intro #776]: #777
#175 := (* -1::Int #169)
#248 := (ite #232 #35 #175)
#251 := (ite #17 0::Int #248)
#254 := (ite #18 #14 #251)
#257 := (= #34 #254)
#260 := (forall (vars (?v0 Int) (?v1 Int)) #257)
#292 := (iff #260 #291)
#289 := (iff #257 #288)
#290 := [rewrite]: #289
#293 := [quant-intro #290]: #292
#144 := (not #143)
#137 := (not #136)
#147 := (and #137 #144)
#133 := (not #132)
#140 := (and #133 #137)
#150 := (or #140 #147)
#195 := (ite #150 #35 #175)
#198 := (ite #17 0::Int #195)
#201 := (ite #18 #14 #198)
#204 := (= #34 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#261 := (iff #207 #260)
#258 := (iff #204 #257)
#255 := (= #201 #254)
#252 := (= #198 #251)
#249 := (= #195 #248)
#233 := (iff #150 #232)
#230 := (iff #147 #229)
#231 := [rewrite]: #230
#220 := (iff #140 #227)
#221 := [rewrite]: #220
#234 := [monotonicity #221 #231]: #233
#250 := [monotonicity #234]: #249
#253 := [monotonicity #250]: #252
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [quant-intro #259]: #261
#218 := (~ #207 #207)
#217 := (~ #204 #204)
#214 := [refl]: #217
#219 := [nnf-pos #214]: #218
#28 := (- #15)
#27 := (- #14)
#36 := (mod #27 #28)
#37 := (- #36)
#21 := (< 0::Int #15)
#23 := (< #14 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #14)
#22 := (and #20 #21)
#25 := (or #22 #24)
#38 := (ite #25 #35 #37)
#39 := (ite #17 0::Int #38)
#40 := (ite #18 #14 #39)
#41 := (= #34 #40)
#42 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#210 := (iff #42 #207)
#98 := (and #21 #23)
#101 := (or #22 #98)
#180 := (ite #101 #35 #175)
#89 := (= 0::Int #14)
#183 := (ite #89 0::Int #180)
#92 := (= 0::Int #15)
#186 := (ite #92 #14 #183)
#189 := (= #34 #186)
#192 := (forall (vars (?v0 Int) (?v1 Int)) #189)
#208 := (iff #192 #207)
#205 := (iff #189 #204)
#202 := (= #186 #201)
#199 := (= #183 #198)
#196 := (= #180 #195)
#151 := (iff #101 #150)
#148 := (iff #98 #147)
#145 := (iff #23 #144)
#146 := [rewrite]: #145
#138 := (iff #21 #137)
#139 := [rewrite]: #138
#149 := [monotonicity #139 #146]: #148
#141 := (iff #22 #140)
#134 := (iff #20 #133)
#135 := [rewrite]: #134
#142 := [monotonicity #135 #139]: #141
#152 := [monotonicity #142 #149]: #151
#197 := [monotonicity #152]: #196
#126 := (iff #89 #17)
#127 := [rewrite]: #126
#200 := [monotonicity #127 #197]: #199
#128 := (iff #92 #18)
#129 := [rewrite]: #128
#203 := [monotonicity #129 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#193 := (iff #42 #192)
#190 := (iff #41 #189)
#187 := (= #40 #186)
#184 := (= #39 #183)
#181 := (= #38 #180)
#178 := (= #37 #175)
#172 := (- #169)
#176 := (= #172 #175)
#177 := [rewrite]: #176
#173 := (= #37 #172)
#170 := (= #36 #169)
#109 := (= #28 #108)
#110 := [rewrite]: #109
#106 := (= #27 #105)
#107 := [rewrite]: #106
#171 := [monotonicity #107 #110]: #170
#174 := [monotonicity #171]: #173
#179 := [trans #174 #177]: #178
#102 := (iff #25 #101)
#99 := (iff #24 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#182 := [monotonicity #103 #179]: #181
#90 := (iff #17 #89)
#91 := [rewrite]: #90
#185 := [monotonicity #91 #182]: #184
#93 := (iff #18 #92)
#94 := [rewrite]: #93
#188 := [monotonicity #94 #185]: #187
#191 := [monotonicity #188]: #190
#194 := [quant-intro #191]: #193
#211 := [trans #194 #209]: #210
#168 := [asserted]: #42
#212 := [mp #168 #211]: #207
#215 := [mp~ #212 #219]: #207
#263 := [mp #215 #262]: #260
#294 := [mp #263 #293]: #291
#779 := [mp #294 #778]: #774
#63 := -3::Int
#66 := (f3 0::Int -3::Int)
#69 := (= #66 0::Int)
#82 := (not #69)
#9 := 3::Int
#10 := (- 3::Int)
#11 := (f3 0::Int #10)
#12 := (= #11 0::Int)
#13 := (not #12)
#85 := (iff #13 #82)
#72 := (= 0::Int #66)
#77 := (not #72)
#83 := (iff #77 #82)
#80 := (iff #72 #69)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#78 := (iff #13 #77)
#75 := (iff #12 #72)
#73 := (iff #69 #72)
#74 := [rewrite]: #73
#70 := (iff #12 #69)
#67 := (= #11 #66)
#64 := (= #10 -3::Int)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#76 := [trans #71 #74]: #75
#79 := [monotonicity #76]: #78
#86 := [trans #79 #84]: #85
#62 := [asserted]: #13
#87 := [mp #62 #86]: #82
#591 := (not #774)
#550 := (or #591 #69)
#352 := (* -1::Int -3::Int)
#437 := (* -1::Int 0::Int)
#438 := (mod #437 #352)
#439 := (+ #66 #438)
#430 := (= #439 0::Int)
#441 := (mod 0::Int -3::Int)
#442 := (* -1::Int #441)
#370 := (+ #66 #442)
#443 := (= #370 0::Int)
#440 := (>= 0::Int 0::Int)
#444 := (<= -3::Int 0::Int)
#423 := (or #444 #440)
#758 := (not #423)
#760 := (<= 0::Int 0::Int)
#417 := (or #760 #444)
#547 := (not #417)
#754 := (or #547 #758)
#428 := (ite #754 #443 #430)
#429 := (= 0::Int 0::Int)
#761 := (ite #429 #69 #428)
#762 := (= -3::Int 0::Int)
#763 := (ite #762 #72 #761)
#698 := (or #591 #763)
#695 := (iff #698 #550)
#699 := (iff #550 #550)
#584 := [rewrite]: #699
#589 := (iff #763 #69)
#714 := (ite false #69 #69)
#715 := (iff #714 #69)
#716 := [rewrite]: #715
#704 := (iff #763 #714)
#705 := (iff #761 #69)
#1 := true
#546 := (ite true #69 #69)
#702 := (iff #546 #69)
#703 := [rewrite]: #702
#548 := (iff #761 #546)
#710 := (iff #428 #69)
#708 := (iff #428 #714)
#712 := (iff #430 #69)
#569 := (= #439 #66)
#450 := (+ #66 0::Int)
#730 := (= #450 #66)
#445 := [rewrite]: #730
#567 := (= #439 #450)
#720 := (= #438 0::Int)
#723 := (mod 0::Int 3::Int)
#724 := (= #723 0::Int)
#725 := [rewrite]: #724
#718 := (= #438 #723)
#721 := (= #352 3::Int)
#722 := [rewrite]: #721
#734 := (= #437 0::Int)
#738 := [rewrite]: #734
#719 := [monotonicity #738 #722]: #718
#726 := [trans #719 #725]: #720
#568 := [monotonicity #726]: #567
#711 := [trans #568 #445]: #569
#713 := [monotonicity #711]: #712
#728 := (iff #443 #69)
#727 := (= #370 #66)
#451 := (= #370 #450)
#448 := (= #442 0::Int)
#733 := (= #442 #437)
#458 := (= #441 0::Int)
#459 := [rewrite]: #458
#737 := [monotonicity #459]: #733
#449 := [trans #737 #738]: #448
#729 := [monotonicity #449]: #451
#731 := [trans #729 #445]: #727
#732 := [monotonicity #731]: #728
#735 := (iff #754 false)
#462 := (or false false)
#465 := (iff #462 false)
#358 := [rewrite]: #465
#463 := (iff #754 #462)
#739 := (iff #758 false)
#743 := (not true)
#746 := (iff #743 false)
#747 := [rewrite]: #746
#750 := (iff #758 #743)
#392 := (iff #423 true)
#757 := (or true true)
#404 := (iff #757 true)
#405 := [rewrite]: #404
#751 := (iff #423 #757)
#386 := (iff #440 true)
#749 := [rewrite]: #386
#756 := (iff #444 true)
#416 := [rewrite]: #756
#391 := [monotonicity #416 #749]: #751
#752 := [trans #391 #405]: #392
#753 := [monotonicity #752]: #750
#740 := [trans #753 #747]: #739
#742 := (iff #547 false)
#744 := (iff #547 #743)
#406 := (iff #417 true)
#400 := (iff #417 #757)
#415 := (iff #760 true)
#420 := [rewrite]: #415
#741 := [monotonicity #420 #416]: #400
#407 := [trans #741 #405]: #406
#745 := [monotonicity #407]: #744
#748 := [trans #745 #747]: #742
#464 := [monotonicity #748 #740]: #463
#736 := [trans #464 #358]: #735
#709 := [monotonicity #736 #732 #713]: #708
#717 := [trans #709 #716]: #710
#765 := (iff #429 true)
#755 := [rewrite]: #765
#549 := [monotonicity #755 #717]: #548
#706 := [trans #549 #703]: #705
#764 := (iff #762 false)
#759 := [rewrite]: #764
#707 := [monotonicity #759 #81 #706]: #704
#590 := [trans #707 #716]: #589
#696 := [monotonicity #590]: #695
#599 := [trans #696 #584]: #695
#600 := [quant-inst #8 #63]: #698
#601 := [mp #600 #599]: #550
[unit-resolution #601 #87 #779]: false
unsat
4b125b55545fc1a8ed3851433e86bbecb0071f7b 320 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#34 := (f3 #13 #14)
#742 := (pattern #34)
#16 := 0::Int
#80 := -1::Int
#84 := (* -1::Int #14)
#81 := (* -1::Int #13)
#139 := (mod #81 #84)
#254 := (+ #34 #139)
#255 := (= #254 0::Int)
#35 := (mod #13 #14)
#251 := (* -1::Int #35)
#252 := (+ #34 #251)
#253 := (= #252 0::Int)
#113 := (>= #13 0::Int)
#106 := (<= #14 0::Int)
#198 := (or #106 #113)
#199 := (not #198)
#102 := (<= #13 0::Int)
#196 := (or #102 #106)
#197 := (not #196)
#202 := (or #197 #199)
#256 := (ite #202 #253 #255)
#250 := (= #34 0::Int)
#17 := (= #13 0::Int)
#257 := (ite #17 #250 #256)
#249 := (= #13 #34)
#18 := (= #14 0::Int)
#258 := (ite #18 #249 #257)
#743 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #742) #258)
#261 := (forall (vars (?v0 Int) (?v1 Int)) #258)
#746 := (iff #261 #743)
#744 := (iff #258 #258)
#745 := [refl]: #744
#747 := [quant-intro #745]: #746
#145 := (* -1::Int #139)
#218 := (ite #202 #35 #145)
#221 := (ite #17 0::Int #218)
#224 := (ite #18 #13 #221)
#227 := (= #34 #224)
#230 := (forall (vars (?v0 Int) (?v1 Int)) #227)
#262 := (iff #230 #261)
#259 := (iff #227 #258)
#260 := [rewrite]: #259
#263 := [quant-intro #260]: #262
#114 := (not #113)
#107 := (not #106)
#117 := (and #107 #114)
#103 := (not #102)
#110 := (and #103 #107)
#120 := (or #110 #117)
#165 := (ite #120 #35 #145)
#168 := (ite #17 0::Int #165)
#171 := (ite #18 #13 #168)
#174 := (= #34 #171)
#177 := (forall (vars (?v0 Int) (?v1 Int)) #174)
#231 := (iff #177 #230)
#228 := (iff #174 #227)
#225 := (= #171 #224)
#222 := (= #168 #221)
#219 := (= #165 #218)
#203 := (iff #120 #202)
#200 := (iff #117 #199)
#201 := [rewrite]: #200
#190 := (iff #110 #197)
#191 := [rewrite]: #190
#204 := [monotonicity #191 #201]: #203
#220 := [monotonicity #204]: #219
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#188 := (~ #177 #177)
#187 := (~ #174 #174)
#184 := [refl]: #187
#189 := [nnf-pos #184]: #188
#28 := (- #14)
#27 := (- #13)
#36 := (mod #27 #28)
#37 := (- #36)
#21 := (< 0::Int #14)
#23 := (< #13 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #13)
#22 := (and #20 #21)
#25 := (or #22 #24)
#38 := (ite #25 #35 #37)
#39 := (ite #17 0::Int #38)
#40 := (ite #18 #13 #39)
#41 := (= #34 #40)
#42 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#180 := (iff #42 #177)
#74 := (and #21 #23)
#77 := (or #22 #74)
#150 := (ite #77 #35 #145)
#153 := (ite #17 0::Int #150)
#156 := (ite #18 #13 #153)
#159 := (= #34 #156)
#162 := (forall (vars (?v0 Int) (?v1 Int)) #159)
#178 := (iff #162 #177)
#175 := (iff #159 #174)
#172 := (= #156 #171)
#169 := (= #153 #168)
#166 := (= #150 #165)
#121 := (iff #77 #120)
#118 := (iff #74 #117)
#115 := (iff #23 #114)
#116 := [rewrite]: #115
#108 := (iff #21 #107)
#109 := [rewrite]: #108
#119 := [monotonicity #109 #116]: #118
#111 := (iff #22 #110)
#104 := (iff #20 #103)
#105 := [rewrite]: #104
#112 := [monotonicity #105 #109]: #111
#122 := [monotonicity #112 #119]: #121
#167 := [monotonicity #122]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [quant-intro #176]: #178
#163 := (iff #42 #162)
#160 := (iff #41 #159)
#157 := (= #40 #156)
#154 := (= #39 #153)
#151 := (= #38 #150)
#148 := (= #37 #145)
#142 := (- #139)
#146 := (= #142 #145)
#147 := [rewrite]: #146
#143 := (= #37 #142)
#140 := (= #36 #139)
#85 := (= #28 #84)
#86 := [rewrite]: #85
#82 := (= #27 #81)
#83 := [rewrite]: #82
#141 := [monotonicity #83 #86]: #140
#144 := [monotonicity #141]: #143
#149 := [trans #144 #147]: #148
#78 := (iff #25 #77)
#75 := (iff #24 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#152 := [monotonicity #79 #149]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [quant-intro #161]: #163
#181 := [trans #164 #179]: #180
#138 := [asserted]: #42
#182 := [mp #138 #181]: #177
#185 := [mp~ #182 #189]: #177
#233 := [mp #185 #232]: #230
#264 := [mp #233 #263]: #261
#748 := [mp #264 #747]: #743
#8 := 1::Int
#9 := 3::Int
#10 := (f3 1::Int 3::Int)
#11 := (= #10 1::Int)
#12 := (not #11)
#62 := [asserted]: #12
#652 := (not #743)
#653 := (or #652 #11)
#322 := (* -1::Int 3::Int)
#406 := (* -1::Int 1::Int)
#407 := (mod #406 #322)
#408 := (+ #10 #407)
#399 := (= #408 0::Int)
#410 := (mod 1::Int 3::Int)
#411 := (* -1::Int #410)
#412 := (+ #10 #411)
#409 := (= #412 0::Int)
#413 := (>= 1::Int 0::Int)
#392 := (<= 3::Int 0::Int)
#727 := (or #392 #413)
#729 := (not #727)
#386 := (<= 1::Int 0::Int)
#516 := (or #386 #392)
#723 := (not #516)
#397 := (or #723 #729)
#398 := (ite #397 #409 #399)
#730 := (= #10 0::Int)
#731 := (= 1::Int 0::Int)
#732 := (ite #731 #730 #398)
#63 := (= 1::Int #10)
#733 := (= 3::Int 0::Int)
#728 := (ite #733 #63 #732)
#654 := (or #652 #728)
#649 := (iff #654 #653)
#640 := (iff #653 #653)
#641 := [rewrite]: #640
#658 := (iff #728 #11)
#648 := (ite false #11 #11)
#661 := (iff #648 #11)
#662 := [rewrite]: #661
#650 := (iff #728 #648)
#659 := (iff #732 #11)
#576 := (ite false #730 #11)
#670 := (iff #576 #11)
#657 := [rewrite]: #670
#669 := (iff #732 #576)
#574 := (iff #398 #11)
#569 := -2::Int
#664 := (= #10 -2::Int)
#1 := true
#570 := (ite true #11 #664)
#572 := (iff #570 #11)
#573 := [rewrite]: #572
#571 := (iff #398 #570)
#553 := (iff #399 #664)
#679 := 2::Int
#675 := (+ 2::Int #10)
#560 := (= #675 0::Int)
#665 := (iff #560 #664)
#668 := [rewrite]: #665
#519 := (iff #399 #560)
#558 := (= #408 #675)
#671 := (+ #10 2::Int)
#673 := (= #671 #675)
#676 := [rewrite]: #673
#672 := (= #408 #671)
#517 := (= #407 2::Int)
#682 := -3::Int
#678 := (mod -1::Int -3::Int)
#686 := (= #678 2::Int)
#515 := [rewrite]: #686
#684 := (= #407 #678)
#683 := (= #322 -3::Int)
#677 := [rewrite]: #683
#414 := (= #406 -1::Int)
#696 := [rewrite]: #414
#685 := [monotonicity #696 #677]: #684
#518 := [trans #685 #515]: #517
#674 := [monotonicity #518]: #672
#559 := [trans #674 #676]: #558
#667 := [monotonicity #559]: #519
#568 := [trans #667 #668]: #553
#680 := (iff #409 #11)
#692 := (+ -1::Int #10)
#689 := (= #692 0::Int)
#537 := (iff #689 #11)
#538 := [rewrite]: #537
#695 := (iff #409 #689)
#693 := (= #412 #692)
#701 := (+ #10 -1::Int)
#687 := (= #701 #692)
#688 := [rewrite]: #687
#690 := (= #412 #701)
#700 := (= #411 -1::Int)
#698 := (= #411 #406)
#419 := (= #410 1::Int)
#420 := [rewrite]: #419
#699 := [monotonicity #420]: #698
#697 := [trans #699 #696]: #700
#691 := [monotonicity #697]: #690
#694 := [trans #691 #688]: #693
#536 := [monotonicity #694]: #695
#681 := [trans #536 #538]: #680
#417 := (iff #397 true)
#428 := (or true false)
#703 := (iff #428 true)
#707 := [rewrite]: #703
#702 := (iff #397 #428)
#705 := (iff #729 false)
#432 := (not true)
#328 := (iff #432 false)
#704 := [rewrite]: #328
#433 := (iff #729 #432)
#709 := (iff #727 true)
#361 := (or false true)
#722 := (iff #361 true)
#708 := [rewrite]: #722
#721 := (iff #727 #361)
#720 := (iff #413 true)
#360 := [rewrite]: #720
#726 := (iff #392 false)
#369 := [rewrite]: #726
#719 := [monotonicity #369 #360]: #721
#431 := [trans #719 #708]: #709
#434 := [monotonicity #431]: #433
#427 := [trans #434 #704]: #705
#355 := (iff #723 true)
#714 := (not false)
#711 := (iff #714 true)
#717 := [rewrite]: #711
#715 := (iff #723 #714)
#712 := (iff #516 false)
#710 := (or false false)
#375 := (iff #710 false)
#376 := [rewrite]: #375
#373 := (iff #516 #710)
#725 := (iff #386 false)
#385 := [rewrite]: #725
#374 := [monotonicity #385 #369]: #373
#713 := [trans #374 #376]: #712
#716 := [monotonicity #713]: #715
#718 := [trans #716 #717]: #355
#706 := [monotonicity #718 #427]: #702
#418 := [trans #706 #707]: #417
#564 := [monotonicity #418 #681 #568]: #571
#575 := [trans #564 #573]: #574
#384 := (iff #731 false)
#389 := [rewrite]: #384
#666 := [monotonicity #389 #575]: #669
#651 := [trans #666 #657]: #659
#69 := (iff #63 #11)
#70 := [rewrite]: #69
#734 := (iff #733 false)
#724 := [rewrite]: #734
#660 := [monotonicity #724 #70 #651]: #650
#663 := [trans #660 #662]: #658
#656 := [monotonicity #663]: #649
#643 := [trans #656 #641]: #649
#655 := [quant-inst #8 #9]: #654
#644 := [mp #655 #643]: #653
[unit-resolution #644 #62 #748]: false
unsat
8af900968418033d3c8752b20b45c64c00fb3744 305 0
#2 := false
decl f3 :: (-> Int Int Int)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#33 := (f3 #13 #14)
#747 := (pattern #33)
#10 := 0::Int
#78 := -1::Int
#82 := (* -1::Int #14)
#79 := (* -1::Int #13)
#143 := (mod #79 #82)
#258 := (+ #33 #143)
#259 := (= #258 0::Int)
#34 := (mod #13 #14)
#255 := (* -1::Int #34)
#256 := (+ #33 #255)
#257 := (= #256 0::Int)
#117 := (>= #13 0::Int)
#110 := (<= #14 0::Int)
#202 := (or #110 #117)
#203 := (not #202)
#106 := (<= #13 0::Int)
#200 := (or #106 #110)
#201 := (not #200)
#206 := (or #201 #203)
#260 := (ite #206 #257 #259)
#254 := (= #33 0::Int)
#16 := (= #13 0::Int)
#261 := (ite #16 #254 #260)
#253 := (= #13 #33)
#17 := (= #14 0::Int)
#262 := (ite #17 #253 #261)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #262)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#751 := (iff #265 #748)
#749 := (iff #262 #262)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#149 := (* -1::Int #143)
#222 := (ite #206 #34 #149)
#225 := (ite #16 0::Int #222)
#228 := (ite #17 #13 #225)
#231 := (= #33 #228)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#266 := (iff #234 #265)
#263 := (iff #231 #262)
#264 := [rewrite]: #263
#267 := [quant-intro #264]: #266
#118 := (not #117)
#111 := (not #110)
#121 := (and #111 #118)
#107 := (not #106)
#114 := (and #107 #111)
#124 := (or #114 #121)
#169 := (ite #124 #34 #149)
#172 := (ite #16 0::Int #169)
#175 := (ite #17 #13 #172)
#178 := (= #33 #175)
#181 := (forall (vars (?v0 Int) (?v1 Int)) #178)
#235 := (iff #181 #234)
#232 := (iff #178 #231)
#229 := (= #175 #228)
#226 := (= #172 #225)
#223 := (= #169 #222)
#207 := (iff #124 #206)
#204 := (iff #121 #203)
#205 := [rewrite]: #204
#194 := (iff #114 #201)
#195 := [rewrite]: #194
#208 := [monotonicity #195 #205]: #207
#224 := [monotonicity #208]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#192 := (~ #181 #181)
#191 := (~ #178 #178)
#188 := [refl]: #191
#193 := [nnf-pos #188]: #192
#27 := (- #14)
#26 := (- #13)
#35 := (mod #26 #27)
#36 := (- #35)
#20 := (< 0::Int #14)
#22 := (< #13 0::Int)
#23 := (and #22 #20)
#19 := (< 0::Int #13)
#21 := (and #19 #20)
#24 := (or #21 #23)
#37 := (ite #24 #34 #36)
#38 := (ite #16 0::Int #37)
#39 := (ite #17 #13 #38)
#40 := (= #33 #39)
#41 := (forall (vars (?v0 Int) (?v1 Int)) #40)
#184 := (iff #41 #181)
#72 := (and #20 #22)
#75 := (or #21 #72)
#154 := (ite #75 #34 #149)
#63 := (= 0::Int #13)
#157 := (ite #63 0::Int #154)
#66 := (= 0::Int #14)
#160 := (ite #66 #13 #157)
#163 := (= #33 #160)
#166 := (forall (vars (?v0 Int) (?v1 Int)) #163)
#182 := (iff #166 #181)
#179 := (iff #163 #178)
#176 := (= #160 #175)
#173 := (= #157 #172)
#170 := (= #154 #169)
#125 := (iff #75 #124)
#122 := (iff #72 #121)
#119 := (iff #22 #118)
#120 := [rewrite]: #119
#112 := (iff #20 #111)
#113 := [rewrite]: #112
#123 := [monotonicity #113 #120]: #122
#115 := (iff #21 #114)
#108 := (iff #19 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#126 := [monotonicity #116 #123]: #125
#171 := [monotonicity #126]: #170
#100 := (iff #63 #16)
#101 := [rewrite]: #100
#174 := [monotonicity #101 #171]: #173
#102 := (iff #66 #17)
#103 := [rewrite]: #102
#177 := [monotonicity #103 #174]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#167 := (iff #41 #166)
#164 := (iff #40 #163)
#161 := (= #39 #160)
#158 := (= #38 #157)
#155 := (= #37 #154)
#152 := (= #36 #149)
#146 := (- #143)
#150 := (= #146 #149)
#151 := [rewrite]: #150
#147 := (= #36 #146)
#144 := (= #35 #143)
#83 := (= #27 #82)
#84 := [rewrite]: #83
#80 := (= #26 #79)
#81 := [rewrite]: #80
#145 := [monotonicity #81 #84]: #144
#148 := [monotonicity #145]: #147
#153 := [trans #148 #151]: #152
#76 := (iff #24 #75)
#73 := (iff #23 #72)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#156 := [monotonicity #77 #153]: #155
#64 := (iff #16 #63)
#65 := [rewrite]: #64
#159 := [monotonicity #65 #156]: #158
#67 := (iff #17 #66)
#68 := [rewrite]: #67
#162 := [monotonicity #68 #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#185 := [trans #168 #183]: #184
#142 := [asserted]: #41
#186 := [mp #142 #185]: #181
#189 := [mp~ #186 #193]: #181
#237 := [mp #189 #236]: #234
#268 := [mp #237 #267]: #265
#753 := [mp #268 #752]: #748
#8 := 3::Int
#9 := (f3 3::Int 3::Int)
#11 := (= #9 0::Int)
#12 := (not #11)
#61 := [asserted]: #12
#573 := (not #748)
#575 := (or #573 #11)
#326 := (* -1::Int 3::Int)
#411 := (mod #326 #326)
#412 := (+ #9 #411)
#413 := (= #412 0::Int)
#404 := (mod 3::Int 3::Int)
#415 := (* -1::Int #404)
#416 := (+ #9 #415)
#344 := (= #416 0::Int)
#417 := (>= 3::Int 0::Int)
#414 := (<= 3::Int 0::Int)
#418 := (or #414 #417)
#397 := (not #418)
#732 := (or #414 #414)
#734 := (not #732)
#391 := (or #734 #397)
#521 := (ite #391 #344 #413)
#728 := (= 3::Int 0::Int)
#402 := (ite #728 #11 #521)
#403 := (= 3::Int #9)
#735 := (ite #728 #403 #402)
#576 := (or #573 #735)
#577 := (iff #576 #575)
#579 := (iff #575 #575)
#580 := [rewrite]: #579
#673 := (iff #735 #11)
#733 := (= #9 3::Int)
#524 := (ite false #733 #11)
#669 := (iff #524 #11)
#670 := [rewrite]: #669
#672 := (iff #735 #524)
#564 := (iff #402 #11)
#679 := (ite false #11 #11)
#681 := (iff #679 #11)
#563 := [rewrite]: #681
#680 := (iff #402 #679)
#676 := (iff #521 #11)
#1 := true
#684 := (ite true #11 #11)
#522 := (iff #684 #11)
#523 := [rewrite]: #522
#691 := (iff #521 #684)
#689 := (iff #413 #11)
#682 := (= #412 #9)
#419 := (+ #9 0::Int)
#702 := (= #419 #9)
#706 := [rewrite]: #702
#687 := (= #412 #419)
#685 := (= #411 0::Int)
#693 := -3::Int
#694 := (mod -3::Int -3::Int)
#542 := (= #694 0::Int)
#543 := [rewrite]: #542
#700 := (= #411 #694)
#698 := (= #326 -3::Int)
#699 := [rewrite]: #698
#541 := [monotonicity #699 #699]: #700
#686 := [trans #541 #543]: #685
#688 := [monotonicity #686]: #687
#683 := [trans #688 #706]: #682
#690 := [monotonicity #683]: #689
#697 := (iff #344 #11)
#695 := (= #416 #9)
#701 := (= #416 #419)
#703 := (= #415 0::Int)
#712 := (* -1::Int 0::Int)
#424 := (= #712 0::Int)
#425 := [rewrite]: #424
#422 := (= #415 #712)
#711 := (= #404 0::Int)
#708 := [rewrite]: #711
#423 := [monotonicity #708]: #422
#704 := [trans #423 #425]: #703
#705 := [monotonicity #704]: #701
#696 := [trans #705 #706]: #695
#692 := [monotonicity #696]: #697
#433 := (iff #391 true)
#439 := (or true false)
#710 := (iff #439 true)
#432 := [rewrite]: #710
#332 := (iff #391 #439)
#437 := (iff #397 false)
#724 := (not true)
#714 := (iff #724 false)
#436 := [rewrite]: #714
#727 := (iff #397 #724)
#366 := (iff #418 true)
#722 := (or false true)
#725 := (iff #722 true)
#365 := [rewrite]: #725
#360 := (iff #418 #722)
#721 := (iff #417 true)
#716 := [rewrite]: #721
#729 := (iff #414 false)
#389 := [rewrite]: #729
#723 := [monotonicity #389 #716]: #360
#726 := [trans #723 #365]: #366
#713 := [monotonicity #726]: #727
#438 := [trans #713 #436]: #437
#719 := (iff #734 true)
#379 := (not false)
#717 := (iff #379 true)
#718 := [rewrite]: #717
#380 := (iff #734 #379)
#715 := (iff #732 false)
#394 := (or false false)
#731 := (iff #394 false)
#374 := [rewrite]: #731
#730 := (iff #732 #394)
#390 := [monotonicity #389 #389]: #730
#378 := [trans #390 #374]: #715
#381 := [monotonicity #378]: #380
#720 := [trans #381 #718]: #719
#709 := [monotonicity #720 #438]: #332
#707 := [trans #709 #432]: #433
#520 := [monotonicity #707 #692 #690]: #691
#677 := [trans #520 #523]: #676
#736 := (iff #728 false)
#737 := [rewrite]: #736
#678 := [monotonicity #737 #677]: #680
#565 := [trans #678 #563]: #564
#738 := (iff #403 #733)
#739 := [rewrite]: #738
#574 := [monotonicity #737 #739 #565]: #672
#558 := [trans #574 #670]: #673
#578 := [monotonicity #558]: #577
#581 := [trans #578 #580]: #577
#569 := [quant-inst #8 #8]: #576
#674 := [mp #569 #581]: #575
[unit-resolution #674 #61 #753]: false
unsat
e06ff93350d55c82e0187108fc1a1d48234a7767 326 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#35 := (f3 #14 #15)
#734 := (pattern #35)
#17 := 0::Int
#71 := -1::Int
#75 := (* -1::Int #15)
#72 := (* -1::Int #14)
#130 := (mod #72 #75)
#245 := (+ #35 #130)
#246 := (= #245 0::Int)
#36 := (mod #14 #15)
#242 := (* -1::Int #36)
#243 := (+ #35 #242)
#244 := (= #243 0::Int)
#104 := (>= #14 0::Int)
#97 := (<= #15 0::Int)
#189 := (or #97 #104)
#190 := (not #189)
#93 := (<= #14 0::Int)
#187 := (or #93 #97)
#188 := (not #187)
#193 := (or #188 #190)
#247 := (ite #193 #244 #246)
#241 := (= #35 0::Int)
#18 := (= #14 0::Int)
#248 := (ite #18 #241 #247)
#240 := (= #14 #35)
#19 := (= #15 0::Int)
#249 := (ite #19 #240 #248)
#735 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #734) #249)
#252 := (forall (vars (?v0 Int) (?v1 Int)) #249)
#738 := (iff #252 #735)
#736 := (iff #249 #249)
#737 := [refl]: #736
#739 := [quant-intro #737]: #738
#136 := (* -1::Int #130)
#209 := (ite #193 #36 #136)
#212 := (ite #18 0::Int #209)
#215 := (ite #19 #14 #212)
#218 := (= #35 #215)
#221 := (forall (vars (?v0 Int) (?v1 Int)) #218)
#253 := (iff #221 #252)
#250 := (iff #218 #249)
#251 := [rewrite]: #250
#254 := [quant-intro #251]: #253
#105 := (not #104)
#98 := (not #97)
#108 := (and #98 #105)
#94 := (not #93)
#101 := (and #94 #98)
#111 := (or #101 #108)
#156 := (ite #111 #36 #136)
#159 := (ite #18 0::Int #156)
#162 := (ite #19 #14 #159)
#165 := (= #35 #162)
#168 := (forall (vars (?v0 Int) (?v1 Int)) #165)
#222 := (iff #168 #221)
#219 := (iff #165 #218)
#216 := (= #162 #215)
#213 := (= #159 #212)
#210 := (= #156 #209)
#194 := (iff #111 #193)
#191 := (iff #108 #190)
#192 := [rewrite]: #191
#181 := (iff #101 #188)
#182 := [rewrite]: #181
#195 := [monotonicity #182 #192]: #194
#211 := [monotonicity #195]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [monotonicity #217]: #219
#223 := [quant-intro #220]: #222
#179 := (~ #168 #168)
#178 := (~ #165 #165)
#175 := [refl]: #178
#180 := [nnf-pos #175]: #179
#29 := (- #15)
#28 := (- #14)
#37 := (mod #28 #29)
#38 := (- #37)
#22 := (< 0::Int #15)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#39 := (ite #26 #36 #38)
#40 := (ite #18 0::Int #39)
#41 := (ite #19 #14 #40)
#42 := (= #35 #41)
#43 := (forall (vars (?v0 Int) (?v1 Int)) #42)
#171 := (iff #43 #168)
#65 := (and #22 #24)
#68 := (or #23 #65)
#141 := (ite #68 #36 #136)
#144 := (ite #18 0::Int #141)
#147 := (ite #19 #14 #144)
#150 := (= #35 #147)
#153 := (forall (vars (?v0 Int) (?v1 Int)) #150)
#169 := (iff #153 #168)
#166 := (iff #150 #165)
#163 := (= #147 #162)
#160 := (= #144 #159)
#157 := (= #141 #156)
#112 := (iff #68 #111)
#109 := (iff #65 #108)
#106 := (iff #24 #105)
#107 := [rewrite]: #106
#99 := (iff #22 #98)
#100 := [rewrite]: #99
#110 := [monotonicity #100 #107]: #109
#102 := (iff #23 #101)
#95 := (iff #21 #94)
#96 := [rewrite]: #95
#103 := [monotonicity #96 #100]: #102
#113 := [monotonicity #103 #110]: #112
#158 := [monotonicity #113]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [quant-intro #167]: #169
#154 := (iff #43 #153)
#151 := (iff #42 #150)
#148 := (= #41 #147)
#145 := (= #40 #144)
#142 := (= #39 #141)
#139 := (= #38 #136)
#133 := (- #130)
#137 := (= #133 #136)
#138 := [rewrite]: #137
#134 := (= #38 #133)
#131 := (= #37 #130)
#76 := (= #29 #75)
#77 := [rewrite]: #76
#73 := (= #28 #72)
#74 := [rewrite]: #73
#132 := [monotonicity #74 #77]: #131
#135 := [monotonicity #132]: #134
#140 := [trans #135 #138]: #139
#69 := (iff #26 #68)
#66 := (iff #25 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#143 := [monotonicity #70 #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#155 := [quant-intro #152]: #154
#172 := [trans #155 #170]: #171
#129 := [asserted]: #43
#173 := [mp #129 #172]: #168
#176 := [mp~ #173 #180]: #168
#224 := [mp #176 #223]: #221
#255 := [mp #224 #254]: #252
#740 := [mp #255 #739]: #735
#11 := 2::Int
#9 := 3::Int
#8 := 5::Int
#10 := (f3 5::Int 3::Int)
#12 := (= #10 2::Int)
#13 := (not #12)
#63 := [asserted]: #13
#633 := (not #735)
#635 := (or #633 #12)
#313 := (* -1::Int 3::Int)
#398 := (* -1::Int 5::Int)
#399 := (mod #398 #313)
#400 := (+ #10 #399)
#391 := (= #400 0::Int)
#402 := (mod 5::Int 3::Int)
#403 := (* -1::Int #402)
#331 := (+ #10 #403)
#404 := (= #331 0::Int)
#401 := (>= 5::Int 0::Int)
#405 := (<= 3::Int 0::Int)
#384 := (or #405 #401)
#719 := (not #384)
#721 := (<= 5::Int 0::Int)
#378 := (or #721 #405)
#508 := (not #378)
#715 := (or #508 #719)
#389 := (ite #715 #404 #391)
#390 := (= #10 0::Int)
#722 := (= 5::Int 0::Int)
#723 := (ite #722 #390 #389)
#724 := (= 5::Int #10)
#725 := (= 3::Int 0::Int)
#720 := (ite #725 #724 #723)
#636 := (or #633 #720)
#638 := (iff #636 #635)
#639 := (iff #635 #635)
#625 := [rewrite]: #639
#648 := (iff #720 #12)
#381 := (= #10 5::Int)
#644 := (ite false #381 #12)
#647 := (iff #644 #12)
#641 := [rewrite]: #647
#645 := (iff #720 #644)
#650 := (iff #723 #12)
#640 := (ite false #390 #12)
#653 := (iff #640 #12)
#654 := [rewrite]: #653
#642 := (iff #723 #640)
#651 := (iff #389 #12)
#556 := (= #10 -1::Int)
#1 := true
#568 := (ite true #12 #556)
#662 := (iff #568 #12)
#649 := [rewrite]: #662
#661 := (iff #389 #568)
#566 := (iff #391 #556)
#667 := 1::Int
#561 := (+ 1::Int #10)
#560 := (= #561 0::Int)
#564 := (iff #560 #556)
#565 := [rewrite]: #564
#562 := (iff #391 #560)
#660 := (= #400 #561)
#552 := (+ #10 1::Int)
#656 := (= #552 #561)
#657 := [rewrite]: #656
#511 := (= #400 #552)
#550 := (= #399 1::Int)
#507 := -3::Int
#677 := -5::Int
#663 := (mod -5::Int -3::Int)
#665 := (= #663 1::Int)
#668 := [rewrite]: #665
#664 := (= #399 #663)
#509 := (= #313 -3::Int)
#510 := [rewrite]: #509
#671 := (= #398 -5::Int)
#678 := [rewrite]: #671
#666 := [monotonicity #678 #510]: #664
#551 := [trans #666 #668]: #550
#659 := [monotonicity #551]: #511
#545 := [trans #659 #657]: #660
#563 := [monotonicity #545]: #562
#567 := [trans #563 #565]: #566
#670 := (iff #404 #12)
#693 := -2::Int
#681 := (+ -2::Int #10)
#672 := (= #681 0::Int)
#675 := (iff #672 #12)
#669 := [rewrite]: #675
#673 := (iff #404 #672)
#529 := (= #331 #681)
#680 := (+ #10 -2::Int)
#687 := (= #680 #681)
#528 := [rewrite]: #687
#685 := (= #331 #680)
#684 := (= #403 -2::Int)
#688 := (* -1::Int 2::Int)
#682 := (= #688 -2::Int)
#683 := [rewrite]: #682
#692 := (= #403 #688)
#691 := (= #402 2::Int)
#406 := [rewrite]: #691
#689 := [monotonicity #406]: #692
#679 := [trans #689 #683]: #684
#686 := [monotonicity #679]: #685
#530 := [trans #686 #528]: #529
#674 := [monotonicity #530]: #673
#676 := [trans #674 #669]: #670
#412 := (iff #715 true)
#695 := (or true false)
#410 := (iff #695 true)
#411 := [rewrite]: #410
#699 := (iff #715 #695)
#694 := (iff #719 false)
#319 := (not true)
#419 := (iff #319 false)
#420 := [rewrite]: #419
#696 := (iff #719 #319)
#425 := (iff #384 true)
#714 := (or false true)
#423 := (iff #714 true)
#424 := [rewrite]: #423
#700 := (iff #384 #714)
#713 := (iff #401 true)
#711 := [rewrite]: #713
#365 := (iff #405 false)
#366 := [rewrite]: #365
#701 := [monotonicity #366 #711]: #700
#426 := [trans #701 #424]: #425
#697 := [monotonicity #426]: #696
#698 := [trans #697 #420]: #694
#352 := (iff #508 true)
#703 := (not false)
#710 := (iff #703 true)
#712 := [rewrite]: #710
#709 := (iff #508 #703)
#707 := (iff #378 false)
#367 := (or false false)
#705 := (iff #367 false)
#706 := [rewrite]: #705
#368 := (iff #378 #367)
#361 := (iff #721 false)
#702 := [rewrite]: #361
#704 := [monotonicity #702 #366]: #368
#708 := [trans #704 #706]: #707
#347 := [monotonicity #708]: #709
#353 := [trans #347 #712]: #352
#409 := [monotonicity #353 #698]: #699
#690 := [trans #409 #411]: #412
#658 := [monotonicity #690 #676 #567]: #661
#643 := [trans #658 #649]: #651
#377 := (iff #722 false)
#718 := [rewrite]: #377
#652 := [monotonicity #718 #643]: #642
#655 := [trans #652 #654]: #650
#376 := (iff #724 #381)
#717 := [rewrite]: #376
#726 := (iff #725 false)
#716 := [rewrite]: #726
#646 := [monotonicity #716 #717 #655]: #645
#632 := [trans #646 #641]: #648
#634 := [monotonicity #632]: #638
#626 := [trans #634 #625]: #638
#637 := [quant-inst #8 #9]: #636
#628 := [mp #637 #626]: #635
[unit-resolution #628 #63 #740]: false
unsat
216c9ba1da8ff35ffdfffd11994f68f93a59b859 330 0
#2 := false
decl f3 :: (-> Int Int Int)
#17 := (:var 0 Int)
#16 := (:var 1 Int)
#37 := (f3 #16 #17)
#751 := (pattern #37)
#19 := 0::Int
#89 := -1::Int
#93 := (* -1::Int #17)
#90 := (* -1::Int #16)
#148 := (mod #90 #93)
#263 := (+ #37 #148)
#264 := (= #263 0::Int)
#38 := (mod #16 #17)
#260 := (* -1::Int #38)
#261 := (+ #37 #260)
#262 := (= #261 0::Int)
#122 := (>= #16 0::Int)
#115 := (<= #17 0::Int)
#207 := (or #115 #122)
#208 := (not #207)
#111 := (<= #16 0::Int)
#205 := (or #111 #115)
#206 := (not #205)
#211 := (or #206 #208)
#265 := (ite #211 #262 #264)
#259 := (= #37 0::Int)
#20 := (= #16 0::Int)
#266 := (ite #20 #259 #265)
#258 := (= #16 #37)
#21 := (= #17 0::Int)
#267 := (ite #21 #258 #266)
#752 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #751) #267)
#270 := (forall (vars (?v0 Int) (?v1 Int)) #267)
#755 := (iff #270 #752)
#753 := (iff #267 #267)
#754 := [refl]: #753
#756 := [quant-intro #754]: #755
#154 := (* -1::Int #148)
#227 := (ite #211 #38 #154)
#230 := (ite #20 0::Int #227)
#233 := (ite #21 #16 #230)
#236 := (= #37 #233)
#239 := (forall (vars (?v0 Int) (?v1 Int)) #236)
#271 := (iff #239 #270)
#268 := (iff #236 #267)
#269 := [rewrite]: #268
#272 := [quant-intro #269]: #271
#123 := (not #122)
#116 := (not #115)
#126 := (and #116 #123)
#112 := (not #111)
#119 := (and #112 #116)
#129 := (or #119 #126)
#174 := (ite #129 #38 #154)
#177 := (ite #20 0::Int #174)
#180 := (ite #21 #16 #177)
#183 := (= #37 #180)
#186 := (forall (vars (?v0 Int) (?v1 Int)) #183)
#240 := (iff #186 #239)
#237 := (iff #183 #236)
#234 := (= #180 #233)
#231 := (= #177 #230)
#228 := (= #174 #227)
#212 := (iff #129 #211)
#209 := (iff #126 #208)
#210 := [rewrite]: #209
#199 := (iff #119 #206)
#200 := [rewrite]: #199
#213 := [monotonicity #200 #210]: #212
#229 := [monotonicity #213]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [quant-intro #238]: #240
#197 := (~ #186 #186)
#196 := (~ #183 #183)
#193 := [refl]: #196
#198 := [nnf-pos #193]: #197
#31 := (- #17)
#30 := (- #16)
#39 := (mod #30 #31)
#40 := (- #39)
#24 := (< 0::Int #17)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#41 := (ite #28 #38 #40)
#42 := (ite #20 0::Int #41)
#43 := (ite #21 #16 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#189 := (iff #45 #186)
#82 := (and #24 #26)
#86 := (or #25 #82)
#159 := (ite #86 #38 #154)
#162 := (ite #20 0::Int #159)
#165 := (ite #21 #16 #162)
#168 := (= #37 #165)
#171 := (forall (vars (?v0 Int) (?v1 Int)) #168)
#187 := (iff #171 #186)
#184 := (iff #168 #183)
#181 := (= #165 #180)
#178 := (= #162 #177)
#175 := (= #159 #174)
#130 := (iff #86 #129)
#127 := (iff #82 #126)
#124 := (iff #26 #123)
#125 := [rewrite]: #124
#117 := (iff #24 #116)
#118 := [rewrite]: #117
#128 := [monotonicity #118 #125]: #127
#120 := (iff #25 #119)
#113 := (iff #23 #112)
#114 := [rewrite]: #113
#121 := [monotonicity #114 #118]: #120
#131 := [monotonicity #121 #128]: #130
#176 := [monotonicity #131]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#172 := (iff #45 #171)
#169 := (iff #44 #168)
#166 := (= #43 #165)
#163 := (= #42 #162)
#160 := (= #41 #159)
#157 := (= #40 #154)
#151 := (- #148)
#155 := (= #151 #154)
#156 := [rewrite]: #155
#152 := (= #40 #151)
#149 := (= #39 #148)
#94 := (= #31 #93)
#95 := [rewrite]: #94
#91 := (= #30 #90)
#92 := [rewrite]: #91
#150 := [monotonicity #92 #95]: #149
#153 := [monotonicity #150]: #152
#158 := [trans #153 #156]: #157
#87 := (iff #28 #86)
#84 := (iff #27 #82)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#161 := [monotonicity #88 #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [quant-intro #170]: #172
#190 := [trans #173 #188]: #189
#147 := [asserted]: #45
#191 := [mp #147 #190]: #186
#194 := [mp~ #191 #198]: #186
#242 := [mp #194 #241]: #239
#273 := [mp #242 #272]: #270
#757 := [mp #273 #756]: #752
#72 := -2::Int
#66 := -3::Int
#8 := 1::Int
#69 := (f3 1::Int -3::Int)
#75 := (= #69 -2::Int)
#78 := (not #75)
#12 := 2::Int
#13 := (- 2::Int)
#9 := 3::Int
#10 := (- 3::Int)
#11 := (f3 1::Int #10)
#14 := (= #11 #13)
#15 := (not #14)
#79 := (iff #15 #78)
#76 := (iff #14 #75)
#73 := (= #13 -2::Int)
#74 := [rewrite]: #73
#70 := (= #11 #69)
#67 := (= #10 -3::Int)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [monotonicity #71 #74]: #76
#80 := [monotonicity #77]: #79
#65 := [asserted]: #15
#83 := [mp #65 #80]: #78
#659 := (not #752)
#669 := (or #659 #75)
#331 := (* -1::Int -3::Int)
#415 := (* -1::Int 1::Int)
#416 := (mod #415 #331)
#417 := (+ #69 #416)
#408 := (= #417 0::Int)
#419 := (mod 1::Int -3::Int)
#420 := (* -1::Int #419)
#421 := (+ #69 #420)
#418 := (= #421 0::Int)
#422 := (>= 1::Int 0::Int)
#401 := (<= -3::Int 0::Int)
#736 := (or #401 #422)
#738 := (not #736)
#395 := (<= 1::Int 0::Int)
#525 := (or #395 #401)
#732 := (not #525)
#406 := (or #732 #738)
#407 := (ite #406 #418 #408)
#739 := (= #69 0::Int)
#740 := (= 1::Int 0::Int)
#741 := (ite #740 #739 #407)
#742 := (= 1::Int #69)
#737 := (= -3::Int 0::Int)
#743 := (ite #737 #742 #741)
#670 := (or #659 #743)
#667 := (iff #670 #669)
#661 := (iff #669 #669)
#662 := [rewrite]: #661
#660 := (iff #743 #75)
#734 := (= #69 1::Int)
#677 := (ite false #734 #75)
#579 := (iff #677 #75)
#580 := [rewrite]: #579
#666 := (iff #743 #677)
#675 := (iff #741 #75)
#582 := (ite false #739 #75)
#585 := (iff #582 #75)
#678 := [rewrite]: #585
#583 := (iff #741 #582)
#573 := (iff #407 #75)
#562 := (iff #407 #677)
#673 := (iff #408 #75)
#683 := (+ 2::Int #69)
#568 := (= #683 0::Int)
#676 := (iff #568 #75)
#578 := [rewrite]: #676
#569 := (iff #408 #568)
#685 := (= #417 #683)
#527 := (+ #69 2::Int)
#684 := (= #527 #683)
#682 := [rewrite]: #684
#680 := (= #417 #527)
#524 := (= #416 2::Int)
#687 := (mod -1::Int 3::Int)
#688 := (= #687 2::Int)
#695 := [rewrite]: #688
#693 := (= #416 #687)
#692 := (= #331 3::Int)
#686 := [rewrite]: #692
#705 := (= #415 -1::Int)
#709 := [rewrite]: #705
#694 := [monotonicity #709 #686]: #693
#526 := [trans #694 #695]: #524
#681 := [monotonicity #526]: #680
#567 := [trans #681 #682]: #685
#528 := [monotonicity #567]: #569
#674 := [trans #528 #578]: #673
#690 := (iff #418 #734)
#696 := (+ -1::Int #69)
#704 := (= #696 0::Int)
#547 := (iff #704 #734)
#689 := [rewrite]: #547
#545 := (iff #418 #704)
#703 := (= #421 #696)
#699 := (+ #69 -1::Int)
#697 := (= #699 #696)
#702 := [rewrite]: #697
#700 := (= #421 #699)
#706 := (= #420 -1::Int)
#708 := (= #420 #415)
#429 := (= #419 1::Int)
#707 := [rewrite]: #429
#423 := [monotonicity #707]: #708
#710 := [trans #423 #709]: #706
#701 := [monotonicity #710]: #700
#698 := [trans #701 #702]: #703
#546 := [monotonicity #698]: #545
#691 := [trans #546 #689]: #690
#427 := (iff #406 false)
#711 := (or false false)
#716 := (iff #711 false)
#426 := [rewrite]: #716
#715 := (iff #406 #711)
#436 := (iff #738 false)
#1 := true
#726 := (not true)
#729 := (iff #726 false)
#369 := [rewrite]: #729
#713 := (iff #738 #726)
#443 := (iff #736 true)
#717 := (or true true)
#441 := (iff #717 true)
#442 := [rewrite]: #441
#718 := (iff #736 #717)
#728 := (iff #422 true)
#731 := [rewrite]: #728
#383 := (iff #401 true)
#384 := [rewrite]: #383
#440 := [monotonicity #384 #731]: #718
#337 := [trans #440 #442]: #443
#714 := [monotonicity #337]: #713
#437 := [trans #714 #369]: #436
#370 := (iff #732 false)
#364 := (iff #732 #726)
#725 := (iff #525 true)
#385 := (or false true)
#723 := (iff #385 true)
#724 := [rewrite]: #723
#721 := (iff #525 #385)
#719 := (iff #395 false)
#382 := [rewrite]: #719
#722 := [monotonicity #382 #384]: #721
#720 := [trans #722 #724]: #725
#727 := [monotonicity #720]: #364
#730 := [trans #727 #369]: #370
#712 := [monotonicity #730 #437]: #715
#428 := [trans #712 #426]: #427
#577 := [monotonicity #428 #691 #674]: #562
#581 := [trans #577 #580]: #573
#735 := (iff #740 false)
#378 := [rewrite]: #735
#584 := [monotonicity #378 #581]: #583
#679 := [trans #584 #678]: #675
#398 := (iff #742 #734)
#394 := [rewrite]: #398
#733 := (iff #737 false)
#393 := [rewrite]: #733
#668 := [monotonicity #393 #394 #679]: #666
#657 := [trans #668 #580]: #660
#672 := [monotonicity #657]: #667
#663 := [trans #672 #662]: #667
#671 := [quant-inst #8 #66]: #670
#664 := [mp #671 #663]: #669
[unit-resolution #664 #83 #757]: false
unsat
e4d7746f48f3d604f4d6994a010e44b10b471dbd 333 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#34 := (f3 #14 #15)
#773 := (pattern #34)
#11 := 0::Int
#104 := -1::Int
#108 := (* -1::Int #15)
#105 := (* -1::Int #14)
#169 := (mod #105 #108)
#284 := (+ #34 #169)
#285 := (= #284 0::Int)
#35 := (mod #14 #15)
#281 := (* -1::Int #35)
#282 := (+ #34 #281)
#283 := (= #282 0::Int)
#143 := (>= #14 0::Int)
#136 := (<= #15 0::Int)
#228 := (or #136 #143)
#229 := (not #228)
#132 := (<= #14 0::Int)
#226 := (or #132 #136)
#227 := (not #226)
#232 := (or #227 #229)
#286 := (ite #232 #283 #285)
#280 := (= #34 0::Int)
#17 := (= #14 0::Int)
#287 := (ite #17 #280 #286)
#279 := (= #14 #34)
#18 := (= #15 0::Int)
#288 := (ite #18 #279 #287)
#774 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #773) #288)
#291 := (forall (vars (?v0 Int) (?v1 Int)) #288)
#777 := (iff #291 #774)
#775 := (iff #288 #288)
#776 := [refl]: #775
#778 := [quant-intro #776]: #777
#175 := (* -1::Int #169)
#248 := (ite #232 #35 #175)
#251 := (ite #17 0::Int #248)
#254 := (ite #18 #14 #251)
#257 := (= #34 #254)
#260 := (forall (vars (?v0 Int) (?v1 Int)) #257)
#292 := (iff #260 #291)
#289 := (iff #257 #288)
#290 := [rewrite]: #289
#293 := [quant-intro #290]: #292
#144 := (not #143)
#137 := (not #136)
#147 := (and #137 #144)
#133 := (not #132)
#140 := (and #133 #137)
#150 := (or #140 #147)
#195 := (ite #150 #35 #175)
#198 := (ite #17 0::Int #195)
#201 := (ite #18 #14 #198)
#204 := (= #34 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#261 := (iff #207 #260)
#258 := (iff #204 #257)
#255 := (= #201 #254)
#252 := (= #198 #251)
#249 := (= #195 #248)
#233 := (iff #150 #232)
#230 := (iff #147 #229)
#231 := [rewrite]: #230
#220 := (iff #140 #227)
#221 := [rewrite]: #220
#234 := [monotonicity #221 #231]: #233
#250 := [monotonicity #234]: #249
#253 := [monotonicity #250]: #252
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [quant-intro #259]: #261
#218 := (~ #207 #207)
#217 := (~ #204 #204)
#214 := [refl]: #217
#219 := [nnf-pos #214]: #218
#28 := (- #15)
#27 := (- #14)
#36 := (mod #27 #28)
#37 := (- #36)
#21 := (< 0::Int #15)
#23 := (< #14 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #14)
#22 := (and #20 #21)
#25 := (or #22 #24)
#38 := (ite #25 #35 #37)
#39 := (ite #17 0::Int #38)
#40 := (ite #18 #14 #39)
#41 := (= #34 #40)
#42 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#210 := (iff #42 #207)
#98 := (and #21 #23)
#101 := (or #22 #98)
#180 := (ite #101 #35 #175)
#89 := (= 0::Int #14)
#183 := (ite #89 0::Int #180)
#92 := (= 0::Int #15)
#186 := (ite #92 #14 #183)
#189 := (= #34 #186)
#192 := (forall (vars (?v0 Int) (?v1 Int)) #189)
#208 := (iff #192 #207)
#205 := (iff #189 #204)
#202 := (= #186 #201)
#199 := (= #183 #198)
#196 := (= #180 #195)
#151 := (iff #101 #150)
#148 := (iff #98 #147)
#145 := (iff #23 #144)
#146 := [rewrite]: #145
#138 := (iff #21 #137)
#139 := [rewrite]: #138
#149 := [monotonicity #139 #146]: #148
#141 := (iff #22 #140)
#134 := (iff #20 #133)
#135 := [rewrite]: #134
#142 := [monotonicity #135 #139]: #141
#152 := [monotonicity #142 #149]: #151
#197 := [monotonicity #152]: #196
#126 := (iff #89 #17)
#127 := [rewrite]: #126
#200 := [monotonicity #127 #197]: #199
#128 := (iff #92 #18)
#129 := [rewrite]: #128
#203 := [monotonicity #129 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#193 := (iff #42 #192)
#190 := (iff #41 #189)
#187 := (= #40 #186)
#184 := (= #39 #183)
#181 := (= #38 #180)
#178 := (= #37 #175)
#172 := (- #169)
#176 := (= #172 #175)
#177 := [rewrite]: #176
#173 := (= #37 #172)
#170 := (= #36 #169)
#109 := (= #28 #108)
#110 := [rewrite]: #109
#106 := (= #27 #105)
#107 := [rewrite]: #106
#171 := [monotonicity #107 #110]: #170
#174 := [monotonicity #171]: #173
#179 := [trans #174 #177]: #178
#102 := (iff #25 #101)
#99 := (iff #24 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#182 := [monotonicity #103 #179]: #181
#90 := (iff #17 #89)
#91 := [rewrite]: #90
#185 := [monotonicity #91 #182]: #184
#93 := (iff #18 #92)
#94 := [rewrite]: #93
#188 := [monotonicity #94 #185]: #187
#191 := [monotonicity #188]: #190
#194 := [quant-intro #191]: #193
#211 := [trans #194 #209]: #210
#168 := [asserted]: #42
#212 := [mp #168 #211]: #207
#215 := [mp~ #212 #219]: #207
#263 := [mp #215 #262]: #260
#294 := [mp #263 #293]: #291
#779 := [mp #294 #778]: #774
#63 := -3::Int
#8 := 3::Int
#66 := (f3 3::Int -3::Int)
#69 := (= #66 0::Int)
#82 := (not #69)
#9 := (- 3::Int)
#10 := (f3 3::Int #9)
#12 := (= #10 0::Int)
#13 := (not #12)
#85 := (iff #13 #82)
#72 := (= 0::Int #66)
#77 := (not #72)
#83 := (iff #77 #82)
#80 := (iff #72 #69)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#78 := (iff #13 #77)
#75 := (iff #12 #72)
#73 := (iff #69 #72)
#74 := [rewrite]: #73
#70 := (iff #12 #69)
#67 := (= #10 #66)
#64 := (= #9 -3::Int)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#76 := [trans #71 #74]: #75
#79 := [monotonicity #76]: #78
#86 := [trans #79 #84]: #85
#62 := [asserted]: #13
#87 := [mp #62 #86]: #82
#602 := (not #774)
#595 := (or #602 #69)
#352 := (* -1::Int -3::Int)
#437 := (* -1::Int 3::Int)
#438 := (mod #437 #352)
#439 := (+ #66 #438)
#430 := (= #439 0::Int)
#441 := (mod 3::Int -3::Int)
#442 := (* -1::Int #441)
#370 := (+ #66 #442)
#443 := (= #370 0::Int)
#440 := (>= 3::Int 0::Int)
#444 := (<= -3::Int 0::Int)
#423 := (or #444 #440)
#758 := (not #423)
#760 := (<= 3::Int 0::Int)
#417 := (or #760 #444)
#547 := (not #417)
#754 := (or #547 #758)
#428 := (ite #754 #443 #430)
#429 := (= 3::Int 0::Int)
#761 := (ite #429 #69 #428)
#762 := (= 3::Int #66)
#763 := (= -3::Int 0::Int)
#764 := (ite #763 #762 #761)
#603 := (or #602 #764)
#605 := (iff #603 #595)
#607 := (iff #595 #595)
#700 := [rewrite]: #607
#599 := (iff #764 #69)
#415 := (= #66 3::Int)
#600 := (ite false #415 #69)
#699 := (iff #600 #69)
#584 := [rewrite]: #699
#695 := (iff #764 #600)
#550 := (iff #761 #69)
#702 := (ite false #69 #69)
#706 := (iff #702 #69)
#704 := [rewrite]: #706
#590 := (iff #761 #702)
#707 := (iff #428 #69)
#703 := (iff #428 #702)
#548 := (iff #430 #69)
#717 := (= #439 #66)
#732 := (+ #66 0::Int)
#723 := (= #732 #66)
#718 := [rewrite]: #723
#716 := (= #439 #732)
#709 := (= #438 0::Int)
#711 := (mod -3::Int 3::Int)
#714 := (= #711 0::Int)
#708 := [rewrite]: #714
#712 := (= #438 #711)
#568 := (= #352 3::Int)
#569 := [rewrite]: #568
#726 := (= #437 -3::Int)
#567 := [rewrite]: #726
#713 := [monotonicity #567 #569]: #712
#715 := [trans #713 #708]: #709
#710 := [monotonicity #715]: #716
#546 := [trans #710 #718]: #717
#549 := [monotonicity #546]: #548
#725 := (iff #443 #69)
#719 := (= #370 #66)
#721 := (= #370 #732)
#731 := (= #442 0::Int)
#451 := (* -1::Int 0::Int)
#445 := (= #451 0::Int)
#727 := [rewrite]: #445
#729 := (= #442 #451)
#449 := (= #441 0::Int)
#450 := [rewrite]: #449
#730 := [monotonicity #450]: #729
#728 := [trans #730 #727]: #731
#722 := [monotonicity #728]: #721
#724 := [trans #722 #718]: #719
#720 := [monotonicity #724]: #725
#738 := (iff #754 false)
#458 := (or false false)
#737 := (iff #458 false)
#734 := [rewrite]: #737
#459 := (iff #754 #458)
#735 := (iff #758 false)
#1 := true
#747 := (not true)
#386 := (iff #747 false)
#749 := [rewrite]: #386
#465 := (iff #758 #747)
#463 := (iff #423 true)
#750 := (or true true)
#740 := (iff #750 true)
#462 := [rewrite]: #740
#753 := (iff #423 #750)
#392 := (iff #440 true)
#752 := [rewrite]: #392
#741 := (iff #444 true)
#404 := [rewrite]: #741
#739 := [monotonicity #404 #752]: #753
#464 := [trans #739 #462]: #463
#358 := [monotonicity #464]: #465
#736 := [trans #358 #749]: #735
#751 := (iff #547 false)
#742 := (iff #547 #747)
#745 := (iff #417 true)
#405 := (or false true)
#743 := (iff #405 true)
#744 := [rewrite]: #743
#406 := (iff #417 #405)
#757 := (iff #760 false)
#400 := [rewrite]: #757
#407 := [monotonicity #400 #404]: #406
#746 := [trans #407 #744]: #745
#748 := [monotonicity #746]: #742
#391 := [trans #748 #749]: #751
#733 := [monotonicity #391 #736]: #459
#448 := [trans #733 #734]: #738
#705 := [monotonicity #448 #720 #549]: #703
#589 := [trans #705 #704]: #707
#756 := (iff #429 false)
#416 := [rewrite]: #756
#591 := [monotonicity #416 #589]: #590
#698 := [trans #591 #704]: #550
#755 := (iff #762 #415)
#420 := [rewrite]: #755
#759 := (iff #763 false)
#765 := [rewrite]: #759
#696 := [monotonicity #765 #420 #698]: #695
#601 := [trans #696 #584]: #599
#606 := [monotonicity #601]: #605
#697 := [trans #606 #700]: #605
#604 := [quant-inst #8 #63]: #603
#701 := [mp #604 #697]: #595
[unit-resolution #701 #87 #779]: false
unsat
62dc22cc0a1f11a224be0520d214fcdfef9b8378 339 0
#2 := false
decl f3 :: (-> Int Int Int)
#17 := (:var 0 Int)
#16 := (:var 1 Int)
#37 := (f3 #16 #17)
#750 := (pattern #37)
#19 := 0::Int
#72 := -1::Int
#92 := (* -1::Int #17)
#89 := (* -1::Int #16)
#147 := (mod #89 #92)
#262 := (+ #37 #147)
#263 := (= #262 0::Int)
#38 := (mod #16 #17)
#259 := (* -1::Int #38)
#260 := (+ #37 #259)
#261 := (= #260 0::Int)
#121 := (>= #16 0::Int)
#114 := (<= #17 0::Int)
#206 := (or #114 #121)
#207 := (not #206)
#110 := (<= #16 0::Int)
#204 := (or #110 #114)
#205 := (not #204)
#210 := (or #205 #207)
#264 := (ite #210 #261 #263)
#258 := (= #37 0::Int)
#20 := (= #16 0::Int)
#265 := (ite #20 #258 #264)
#257 := (= #16 #37)
#21 := (= #17 0::Int)
#266 := (ite #21 #257 #265)
#751 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #750) #266)
#269 := (forall (vars (?v0 Int) (?v1 Int)) #266)
#754 := (iff #269 #751)
#752 := (iff #266 #266)
#753 := [refl]: #752
#755 := [quant-intro #753]: #754
#153 := (* -1::Int #147)
#226 := (ite #210 #38 #153)
#229 := (ite #20 0::Int #226)
#232 := (ite #21 #16 #229)
#235 := (= #37 #232)
#238 := (forall (vars (?v0 Int) (?v1 Int)) #235)
#270 := (iff #238 #269)
#267 := (iff #235 #266)
#268 := [rewrite]: #267
#271 := [quant-intro #268]: #270
#122 := (not #121)
#115 := (not #114)
#125 := (and #115 #122)
#111 := (not #110)
#118 := (and #111 #115)
#128 := (or #118 #125)
#173 := (ite #128 #38 #153)
#176 := (ite #20 0::Int #173)
#179 := (ite #21 #16 #176)
#182 := (= #37 #179)
#185 := (forall (vars (?v0 Int) (?v1 Int)) #182)
#239 := (iff #185 #238)
#236 := (iff #182 #235)
#233 := (= #179 #232)
#230 := (= #176 #229)
#227 := (= #173 #226)
#211 := (iff #128 #210)
#208 := (iff #125 #207)
#209 := [rewrite]: #208
#198 := (iff #118 #205)
#199 := [rewrite]: #198
#212 := [monotonicity #199 #209]: #211
#228 := [monotonicity #212]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [monotonicity #234]: #236
#240 := [quant-intro #237]: #239
#196 := (~ #185 #185)
#195 := (~ #182 #182)
#192 := [refl]: #195
#197 := [nnf-pos #192]: #196
#31 := (- #17)
#30 := (- #16)
#39 := (mod #30 #31)
#40 := (- #39)
#24 := (< 0::Int #17)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#41 := (ite #28 #38 #40)
#42 := (ite #20 0::Int #41)
#43 := (ite #21 #16 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#188 := (iff #45 #185)
#82 := (and #24 #26)
#86 := (or #25 #82)
#158 := (ite #86 #38 #153)
#161 := (ite #20 0::Int #158)
#164 := (ite #21 #16 #161)
#167 := (= #37 #164)
#170 := (forall (vars (?v0 Int) (?v1 Int)) #167)
#186 := (iff #170 #185)
#183 := (iff #167 #182)
#180 := (= #164 #179)
#177 := (= #161 #176)
#174 := (= #158 #173)
#129 := (iff #86 #128)
#126 := (iff #82 #125)
#123 := (iff #26 #122)
#124 := [rewrite]: #123
#116 := (iff #24 #115)
#117 := [rewrite]: #116
#127 := [monotonicity #117 #124]: #126
#119 := (iff #25 #118)
#112 := (iff #23 #111)
#113 := [rewrite]: #112
#120 := [monotonicity #113 #117]: #119
#130 := [monotonicity #120 #127]: #129
#175 := [monotonicity #130]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [quant-intro #184]: #186
#171 := (iff #45 #170)
#168 := (iff #44 #167)
#165 := (= #43 #164)
#162 := (= #42 #161)
#159 := (= #41 #158)
#156 := (= #40 #153)
#150 := (- #147)
#154 := (= #150 #153)
#155 := [rewrite]: #154
#151 := (= #40 #150)
#148 := (= #39 #147)
#93 := (= #31 #92)
#94 := [rewrite]: #93
#90 := (= #30 #89)
#91 := [rewrite]: #90
#149 := [monotonicity #91 #94]: #148
#152 := [monotonicity #149]: #151
#157 := [trans #152 #155]: #156
#87 := (iff #28 #86)
#84 := (iff #27 #82)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#160 := [monotonicity #88 #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#172 := [quant-intro #169]: #171
#189 := [trans #172 #187]: #188
#146 := [asserted]: #45
#190 := [mp #146 #189]: #185
#193 := [mp~ #190 #197]: #185
#241 := [mp #193 #240]: #238
#272 := [mp #241 #271]: #269
#756 := [mp #272 #755]: #751
#66 := -3::Int
#8 := 5::Int
#69 := (f3 5::Int -3::Int)
#75 := (= #69 -1::Int)
#78 := (not #75)
#12 := 1::Int
#13 := (- 1::Int)
#9 := 3::Int
#10 := (- 3::Int)
#11 := (f3 5::Int #10)
#14 := (= #11 #13)
#15 := (not #14)
#79 := (iff #15 #78)
#76 := (iff #14 #75)
#73 := (= #13 -1::Int)
#74 := [rewrite]: #73
#70 := (= #11 #69)
#67 := (= #10 -3::Int)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [monotonicity #71 #74]: #76
#80 := [monotonicity #77]: #79
#65 := [asserted]: #15
#83 := [mp #65 #80]: #78
#657 := (not #751)
#664 := (or #657 #75)
#330 := (* -1::Int -3::Int)
#414 := (* -1::Int 5::Int)
#415 := (mod #414 #330)
#416 := (+ #69 #415)
#407 := (= #416 0::Int)
#418 := (mod 5::Int -3::Int)
#419 := (* -1::Int #418)
#420 := (+ #69 #419)
#417 := (= #420 0::Int)
#421 := (>= 5::Int 0::Int)
#400 := (<= -3::Int 0::Int)
#735 := (or #400 #421)
#737 := (not #735)
#394 := (<= 5::Int 0::Int)
#524 := (or #394 #400)
#731 := (not #524)
#405 := (or #731 #737)
#406 := (ite #405 #417 #407)
#738 := (= #69 0::Int)
#739 := (= 5::Int 0::Int)
#740 := (ite #739 #738 #406)
#741 := (= 5::Int #69)
#736 := (= -3::Int 0::Int)
#742 := (ite #736 #741 #740)
#648 := (or #657 #742)
#651 := (iff #648 #664)
#653 := (iff #664 #664)
#654 := [rewrite]: #653
#662 := (iff #742 #75)
#733 := (= #69 5::Int)
#670 := (ite false #733 #75)
#660 := (iff #670 #75)
#661 := [rewrite]: #660
#666 := (iff #742 #670)
#668 := (iff #740 #75)
#665 := (ite false #738 #75)
#656 := (iff #665 #75)
#658 := [rewrite]: #656
#667 := (iff #740 #665)
#674 := (iff #406 #75)
#428 := 2::Int
#690 := (= #69 2::Int)
#581 := (ite false #690 #75)
#584 := (iff #581 #75)
#677 := [rewrite]: #584
#582 := (iff #406 #581)
#572 := (iff #407 #75)
#527 := (+ 1::Int #69)
#676 := (= #527 0::Int)
#578 := (iff #676 #75)
#579 := [rewrite]: #578
#561 := (iff #407 #676)
#672 := (= #416 #527)
#566 := (+ #69 1::Int)
#675 := (= #566 #527)
#577 := [rewrite]: #675
#567 := (= #416 #566)
#681 := (= #415 1::Int)
#693 := -5::Int
#526 := (mod -5::Int 3::Int)
#682 := (= #526 1::Int)
#683 := [rewrite]: #682
#679 := (= #415 #526)
#523 := (= #330 3::Int)
#525 := [rewrite]: #523
#687 := (= #414 -5::Int)
#694 := [rewrite]: #687
#680 := [monotonicity #694 #525]: #679
#684 := [trans #680 #683]: #681
#568 := [monotonicity #684]: #567
#673 := [trans #568 #577]: #672
#576 := [monotonicity #673]: #561
#580 := [trans #576 #579]: #572
#686 := (iff #417 #690)
#705 := -2::Int
#702 := (+ -2::Int #69)
#546 := (= #702 0::Int)
#691 := (iff #546 #690)
#685 := [rewrite]: #691
#688 := (iff #417 #546)
#544 := (= #420 #702)
#695 := (+ #69 -2::Int)
#697 := (= #695 #702)
#703 := [rewrite]: #697
#696 := (= #420 #695)
#699 := (= #419 -2::Int)
#422 := (* -1::Int 2::Int)
#709 := (= #422 -2::Int)
#698 := [rewrite]: #709
#704 := (= #419 #422)
#706 := (= #418 2::Int)
#707 := [rewrite]: #706
#708 := [monotonicity #707]: #704
#700 := [trans #708 #698]: #699
#701 := [monotonicity #700]: #696
#545 := [trans #701 #703]: #544
#689 := [monotonicity #545]: #688
#692 := [trans #689 #685]: #686
#426 := (iff #405 false)
#710 := (or false false)
#715 := (iff #710 false)
#425 := [rewrite]: #715
#714 := (iff #405 #710)
#435 := (iff #737 false)
#1 := true
#725 := (not true)
#728 := (iff #725 false)
#368 := [rewrite]: #728
#712 := (iff #737 #725)
#442 := (iff #735 true)
#716 := (or true true)
#440 := (iff #716 true)
#441 := [rewrite]: #440
#717 := (iff #735 #716)
#727 := (iff #421 true)
#730 := [rewrite]: #727
#382 := (iff #400 true)
#383 := [rewrite]: #382
#439 := [monotonicity #383 #730]: #717
#336 := [trans #439 #441]: #442
#713 := [monotonicity #336]: #712
#436 := [trans #713 #368]: #435
#369 := (iff #731 false)
#363 := (iff #731 #725)
#724 := (iff #524 true)
#384 := (or false true)
#722 := (iff #384 true)
#723 := [rewrite]: #722
#720 := (iff #524 #384)
#718 := (iff #394 false)
#381 := [rewrite]: #718
#721 := [monotonicity #381 #383]: #720
#719 := [trans #721 #723]: #724
#726 := [monotonicity #719]: #363
#729 := [trans #726 #368]: #369
#711 := [monotonicity #729 #436]: #714
#427 := [trans #711 #425]: #426
#583 := [monotonicity #427 #692 #580]: #582
#678 := [trans #583 #677]: #674
#734 := (iff #739 false)
#377 := [rewrite]: #734
#659 := [monotonicity #377 #678]: #667
#669 := [trans #659 #658]: #668
#397 := (iff #741 #733)
#393 := [rewrite]: #397
#732 := (iff #736 false)
#392 := [rewrite]: #732
#671 := [monotonicity #392 #393 #669]: #666
#663 := [trans #671 #661]: #662
#652 := [monotonicity #663]: #651
#650 := [trans #652 #654]: #651
#649 := [quant-inst #8 #66]: #648
#655 := [mp #649 #650]: #664
[unit-resolution #655 #83 #756]: false
unsat
5d7ad299834cafeb0e7528443dd40353cb086137 348 0
#2 := false
decl f3 :: (-> Int Int Int)
#16 := (:var 0 Int)
#15 := (:var 1 Int)
#36 := (f3 #15 #16)
#758 := (pattern #36)
#18 := 0::Int
#65 := -1::Int
#100 := (* -1::Int #16)
#97 := (* -1::Int #15)
#155 := (mod #97 #100)
#270 := (+ #36 #155)
#271 := (= #270 0::Int)
#37 := (mod #15 #16)
#267 := (* -1::Int #37)
#268 := (+ #36 #267)
#269 := (= #268 0::Int)
#129 := (>= #15 0::Int)
#122 := (<= #16 0::Int)
#214 := (or #122 #129)
#215 := (not #214)
#118 := (<= #15 0::Int)
#212 := (or #118 #122)
#213 := (not #212)
#218 := (or #213 #215)
#272 := (ite #218 #269 #271)
#266 := (= #36 0::Int)
#19 := (= #15 0::Int)
#273 := (ite #19 #266 #272)
#265 := (= #15 #36)
#20 := (= #16 0::Int)
#274 := (ite #20 #265 #273)
#759 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #758) #274)
#277 := (forall (vars (?v0 Int) (?v1 Int)) #274)
#762 := (iff #277 #759)
#760 := (iff #274 #274)
#761 := [refl]: #760
#763 := [quant-intro #761]: #762
#161 := (* -1::Int #155)
#234 := (ite #218 #37 #161)
#237 := (ite #19 0::Int #234)
#240 := (ite #20 #15 #237)
#243 := (= #36 #240)
#246 := (forall (vars (?v0 Int) (?v1 Int)) #243)
#278 := (iff #246 #277)
#275 := (iff #243 #274)
#276 := [rewrite]: #275
#279 := [quant-intro #276]: #278
#130 := (not #129)
#123 := (not #122)
#133 := (and #123 #130)
#119 := (not #118)
#126 := (and #119 #123)
#136 := (or #126 #133)
#181 := (ite #136 #37 #161)
#184 := (ite #19 0::Int #181)
#187 := (ite #20 #15 #184)
#190 := (= #36 #187)
#193 := (forall (vars (?v0 Int) (?v1 Int)) #190)
#247 := (iff #193 #246)
#244 := (iff #190 #243)
#241 := (= #187 #240)
#238 := (= #184 #237)
#235 := (= #181 #234)
#219 := (iff #136 #218)
#216 := (iff #133 #215)
#217 := [rewrite]: #216
#206 := (iff #126 #213)
#207 := [rewrite]: #206
#220 := [monotonicity #207 #217]: #219
#236 := [monotonicity #220]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [quant-intro #245]: #247
#204 := (~ #193 #193)
#203 := (~ #190 #190)
#200 := [refl]: #203
#205 := [nnf-pos #200]: #204
#30 := (- #16)
#29 := (- #15)
#38 := (mod #29 #30)
#39 := (- #38)
#23 := (< 0::Int #16)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#40 := (ite #27 #37 #39)
#41 := (ite #19 0::Int #40)
#42 := (ite #20 #15 #41)
#43 := (= #36 #42)
#44 := (forall (vars (?v0 Int) (?v1 Int)) #43)
#196 := (iff #44 #193)
#91 := (and #23 #25)
#94 := (or #24 #91)
#166 := (ite #94 #37 #161)
#169 := (ite #19 0::Int #166)
#172 := (ite #20 #15 #169)
#175 := (= #36 #172)
#178 := (forall (vars (?v0 Int) (?v1 Int)) #175)
#194 := (iff #178 #193)
#191 := (iff #175 #190)
#188 := (= #172 #187)
#185 := (= #169 #184)
#182 := (= #166 #181)
#137 := (iff #94 #136)
#134 := (iff #91 #133)
#131 := (iff #25 #130)
#132 := [rewrite]: #131
#124 := (iff #23 #123)
#125 := [rewrite]: #124
#135 := [monotonicity #125 #132]: #134
#127 := (iff #24 #126)
#120 := (iff #22 #119)
#121 := [rewrite]: #120
#128 := [monotonicity #121 #125]: #127
#138 := [monotonicity #128 #135]: #137
#183 := [monotonicity #138]: #182
#186 := [monotonicity #183]: #185
#189 := [monotonicity #186]: #188
#192 := [monotonicity #189]: #191
#195 := [quant-intro #192]: #194
#179 := (iff #44 #178)
#176 := (iff #43 #175)
#173 := (= #42 #172)
#170 := (= #41 #169)
#167 := (= #40 #166)
#164 := (= #39 #161)
#158 := (- #155)
#162 := (= #158 #161)
#163 := [rewrite]: #162
#159 := (= #39 #158)
#156 := (= #38 #155)
#101 := (= #30 #100)
#102 := [rewrite]: #101
#98 := (= #29 #97)
#99 := [rewrite]: #98
#157 := [monotonicity #99 #102]: #156
#160 := [monotonicity #157]: #159
#165 := [trans #160 #163]: #164
#95 := (iff #27 #94)
#92 := (iff #26 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#168 := [monotonicity #96 #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [quant-intro #177]: #179
#197 := [trans #180 #195]: #196
#154 := [asserted]: #44
#198 := [mp #154 #197]: #193
#201 := [mp~ #198 #205]: #193
#249 := [mp #201 #248]: #246
#280 := [mp #249 #279]: #277
#764 := [mp #280 #763]: #759
#12 := 2::Int
#10 := 3::Int
#68 := (f3 -1::Int 3::Int)
#71 := (= #68 2::Int)
#84 := (not #71)
#8 := 1::Int
#9 := (- 1::Int)
#11 := (f3 #9 3::Int)
#13 := (= #11 2::Int)
#14 := (not #13)
#87 := (iff #14 #84)
#74 := (= 2::Int #68)
#79 := (not #74)
#85 := (iff #79 #84)
#82 := (iff #74 #71)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#80 := (iff #14 #79)
#77 := (iff #13 #74)
#75 := (iff #71 #74)
#76 := [rewrite]: #75
#72 := (iff #13 #71)
#69 := (= #11 #68)
#66 := (= #9 -1::Int)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#78 := [trans #73 #76]: #77
#81 := [monotonicity #78]: #80
#88 := [trans #81 #86]: #87
#64 := [asserted]: #14
#89 := [mp #64 #88]: #84
#672 := (not #759)
#656 := (or #672 #71)
#338 := (* -1::Int 3::Int)
#422 := (* -1::Int -1::Int)
#423 := (mod #422 #338)
#424 := (+ #68 #423)
#415 := (= #424 0::Int)
#426 := (mod -1::Int 3::Int)
#427 := (* -1::Int #426)
#428 := (+ #68 #427)
#425 := (= #428 0::Int)
#429 := (>= -1::Int 0::Int)
#408 := (<= 3::Int 0::Int)
#743 := (or #408 #429)
#745 := (not #743)
#402 := (<= -1::Int 0::Int)
#532 := (or #402 #408)
#739 := (not #532)
#413 := (or #739 #745)
#414 := (ite #413 #425 #415)
#746 := (= #68 0::Int)
#747 := (= -1::Int 0::Int)
#748 := (ite #747 #746 #414)
#749 := (= -1::Int #68)
#744 := (= 3::Int 0::Int)
#750 := (ite #744 #749 #748)
#657 := (or #672 #750)
#660 := (iff #657 #656)
#662 := (iff #656 #656)
#658 := [rewrite]: #662
#671 := (iff #750 #71)
#741 := (= #68 -1::Int)
#674 := (ite false #741 #71)
#669 := (iff #674 #71)
#670 := [rewrite]: #669
#679 := (iff #750 #674)
#677 := (iff #748 #71)
#675 := (ite false #746 #71)
#666 := (iff #675 #71)
#676 := [rewrite]: #666
#667 := (iff #748 #675)
#686 := (iff #414 #71)
#1 := true
#590 := (ite true #71 #741)
#685 := (iff #590 #71)
#682 := [rewrite]: #685
#591 := (iff #414 #590)
#588 := (iff #415 #741)
#683 := (+ 1::Int #68)
#569 := (= #683 0::Int)
#587 := (iff #569 #741)
#580 := [rewrite]: #587
#584 := (iff #415 #569)
#681 := (= #424 #683)
#575 := (+ #68 1::Int)
#585 := (= #575 #683)
#680 := [rewrite]: #585
#576 := (= #424 #575)
#692 := (= #423 1::Int)
#531 := -3::Int
#687 := (mod 1::Int -3::Int)
#691 := (= #687 1::Int)
#689 := [rewrite]: #691
#688 := (= #423 #687)
#533 := (= #338 -3::Int)
#534 := [rewrite]: #533
#695 := (= #422 1::Int)
#702 := [rewrite]: #695
#690 := [monotonicity #702 #534]: #688
#574 := [trans #690 #689]: #692
#535 := [monotonicity #574]: #576
#684 := [trans #535 #680]: #681
#586 := [monotonicity #684]: #584
#589 := [trans #586 #580]: #588
#700 := (iff #425 #71)
#706 := -2::Int
#711 := (+ -2::Int #68)
#697 := (= #711 0::Int)
#693 := (iff #697 #71)
#694 := [rewrite]: #693
#698 := (iff #425 #697)
#554 := (= #428 #711)
#709 := (+ #68 -2::Int)
#552 := (= #709 #711)
#553 := [rewrite]: #552
#710 := (= #428 #709)
#703 := (= #427 -2::Int)
#716 := (* -1::Int 2::Int)
#707 := (= #716 -2::Int)
#708 := [rewrite]: #707
#713 := (= #427 #716)
#430 := (= #426 2::Int)
#712 := [rewrite]: #430
#717 := [monotonicity #712]: #713
#704 := [trans #717 #708]: #703
#705 := [monotonicity #704]: #710
#696 := [trans #705 #553]: #554
#699 := [monotonicity #696]: #698
#701 := [trans #699 #694]: #700
#714 := (iff #413 true)
#723 := (or false true)
#435 := (iff #723 true)
#436 := [rewrite]: #435
#433 := (iff #413 #723)
#722 := (iff #745 true)
#720 := (not false)
#444 := (iff #720 true)
#718 := [rewrite]: #444
#721 := (iff #745 #720)
#450 := (iff #743 false)
#724 := (or false false)
#448 := (iff #724 false)
#449 := [rewrite]: #448
#725 := (iff #743 #724)
#735 := (iff #429 false)
#738 := [rewrite]: #735
#390 := (iff #408 false)
#391 := [rewrite]: #390
#447 := [monotonicity #391 #738]: #725
#344 := [trans #447 #449]: #450
#443 := [monotonicity #344]: #721
#719 := [trans #443 #718]: #722
#377 := (iff #739 false)
#733 := (not true)
#736 := (iff #733 false)
#376 := [rewrite]: #736
#371 := (iff #739 #733)
#732 := (iff #532 true)
#392 := (or true false)
#730 := (iff #392 true)
#731 := [rewrite]: #730
#728 := (iff #532 #392)
#726 := (iff #402 true)
#389 := [rewrite]: #726
#729 := [monotonicity #389 #391]: #728
#727 := [trans #729 #731]: #732
#734 := [monotonicity #727]: #371
#737 := [trans #734 #376]: #377
#434 := [monotonicity #737 #719]: #433
#715 := [trans #434 #436]: #714
#592 := [monotonicity #715 #701 #589]: #591
#673 := [trans #592 #682]: #686
#742 := (iff #747 false)
#385 := [rewrite]: #742
#664 := [monotonicity #385 #673]: #667
#678 := [trans #664 #676]: #677
#405 := (iff #749 #741)
#401 := [rewrite]: #405
#740 := (iff #744 false)
#400 := [rewrite]: #740
#668 := [monotonicity #400 #401 #678]: #679
#665 := [trans #668 #670]: #671
#661 := [monotonicity #665]: #660
#663 := [trans #661 #658]: #660
#659 := [quant-inst #65 #10]: #657
#649 := [mp #659 #663]: #656
[unit-resolution #649 #89 #764]: false
unsat
513cb6376361794229c618f4dacebc2dcd3ef34a 339 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#34 := (f3 #14 #15)
#773 := (pattern #34)
#11 := 0::Int
#104 := -1::Int
#108 := (* -1::Int #15)
#105 := (* -1::Int #14)
#169 := (mod #105 #108)
#284 := (+ #34 #169)
#285 := (= #284 0::Int)
#35 := (mod #14 #15)
#281 := (* -1::Int #35)
#282 := (+ #34 #281)
#283 := (= #282 0::Int)
#143 := (>= #14 0::Int)
#136 := (<= #15 0::Int)
#228 := (or #136 #143)
#229 := (not #228)
#132 := (<= #14 0::Int)
#226 := (or #132 #136)
#227 := (not #226)
#232 := (or #227 #229)
#286 := (ite #232 #283 #285)
#280 := (= #34 0::Int)
#17 := (= #14 0::Int)
#287 := (ite #17 #280 #286)
#279 := (= #14 #34)
#18 := (= #15 0::Int)
#288 := (ite #18 #279 #287)
#774 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #773) #288)
#291 := (forall (vars (?v0 Int) (?v1 Int)) #288)
#777 := (iff #291 #774)
#775 := (iff #288 #288)
#776 := [refl]: #775
#778 := [quant-intro #776]: #777
#175 := (* -1::Int #169)
#248 := (ite #232 #35 #175)
#251 := (ite #17 0::Int #248)
#254 := (ite #18 #14 #251)
#257 := (= #34 #254)
#260 := (forall (vars (?v0 Int) (?v1 Int)) #257)
#292 := (iff #260 #291)
#289 := (iff #257 #288)
#290 := [rewrite]: #289
#293 := [quant-intro #290]: #292
#144 := (not #143)
#137 := (not #136)
#147 := (and #137 #144)
#133 := (not #132)
#140 := (and #133 #137)
#150 := (or #140 #147)
#195 := (ite #150 #35 #175)
#198 := (ite #17 0::Int #195)
#201 := (ite #18 #14 #198)
#204 := (= #34 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#261 := (iff #207 #260)
#258 := (iff #204 #257)
#255 := (= #201 #254)
#252 := (= #198 #251)
#249 := (= #195 #248)
#233 := (iff #150 #232)
#230 := (iff #147 #229)
#231 := [rewrite]: #230
#220 := (iff #140 #227)
#221 := [rewrite]: #220
#234 := [monotonicity #221 #231]: #233
#250 := [monotonicity #234]: #249
#253 := [monotonicity #250]: #252
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [quant-intro #259]: #261
#218 := (~ #207 #207)
#217 := (~ #204 #204)
#214 := [refl]: #217
#219 := [nnf-pos #214]: #218
#28 := (- #15)
#27 := (- #14)
#36 := (mod #27 #28)
#37 := (- #36)
#21 := (< 0::Int #15)
#23 := (< #14 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #14)
#22 := (and #20 #21)
#25 := (or #22 #24)
#38 := (ite #25 #35 #37)
#39 := (ite #17 0::Int #38)
#40 := (ite #18 #14 #39)
#41 := (= #34 #40)
#42 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#210 := (iff #42 #207)
#98 := (and #21 #23)
#101 := (or #22 #98)
#180 := (ite #101 #35 #175)
#89 := (= 0::Int #14)
#183 := (ite #89 0::Int #180)
#92 := (= 0::Int #15)
#186 := (ite #92 #14 #183)
#189 := (= #34 #186)
#192 := (forall (vars (?v0 Int) (?v1 Int)) #189)
#208 := (iff #192 #207)
#205 := (iff #189 #204)
#202 := (= #186 #201)
#199 := (= #183 #198)
#196 := (= #180 #195)
#151 := (iff #101 #150)
#148 := (iff #98 #147)
#145 := (iff #23 #144)
#146 := [rewrite]: #145
#138 := (iff #21 #137)
#139 := [rewrite]: #138
#149 := [monotonicity #139 #146]: #148
#141 := (iff #22 #140)
#134 := (iff #20 #133)
#135 := [rewrite]: #134
#142 := [monotonicity #135 #139]: #141
#152 := [monotonicity #142 #149]: #151
#197 := [monotonicity #152]: #196
#126 := (iff #89 #17)
#127 := [rewrite]: #126
#200 := [monotonicity #127 #197]: #199
#128 := (iff #92 #18)
#129 := [rewrite]: #128
#203 := [monotonicity #129 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#193 := (iff #42 #192)
#190 := (iff #41 #189)
#187 := (= #40 #186)
#184 := (= #39 #183)
#181 := (= #38 #180)
#178 := (= #37 #175)
#172 := (- #169)
#176 := (= #172 #175)
#177 := [rewrite]: #176
#173 := (= #37 #172)
#170 := (= #36 #169)
#109 := (= #28 #108)
#110 := [rewrite]: #109
#106 := (= #27 #105)
#107 := [rewrite]: #106
#171 := [monotonicity #107 #110]: #170
#174 := [monotonicity #171]: #173
#179 := [trans #174 #177]: #178
#102 := (iff #25 #101)
#99 := (iff #24 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#182 := [monotonicity #103 #179]: #181
#90 := (iff #17 #89)
#91 := [rewrite]: #90
#185 := [monotonicity #91 #182]: #184
#93 := (iff #18 #92)
#94 := [rewrite]: #93
#188 := [monotonicity #94 #185]: #187
#191 := [monotonicity #188]: #190
#194 := [quant-intro #191]: #193
#211 := [trans #194 #209]: #210
#168 := [asserted]: #42
#212 := [mp #168 #211]: #207
#215 := [mp~ #212 #219]: #207
#263 := [mp #215 #262]: #260
#294 := [mp #263 #293]: #291
#779 := [mp #294 #778]: #774
#8 := 3::Int
#63 := -3::Int
#66 := (f3 -3::Int 3::Int)
#69 := (= #66 0::Int)
#82 := (not #69)
#9 := (- 3::Int)
#10 := (f3 #9 3::Int)
#12 := (= #10 0::Int)
#13 := (not #12)
#85 := (iff #13 #82)
#72 := (= 0::Int #66)
#77 := (not #72)
#83 := (iff #77 #82)
#80 := (iff #72 #69)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#78 := (iff #13 #77)
#75 := (iff #12 #72)
#73 := (iff #69 #72)
#74 := [rewrite]: #73
#70 := (iff #12 #69)
#67 := (= #10 #66)
#64 := (= #9 -3::Int)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#76 := [trans #71 #74]: #75
#79 := [monotonicity #76]: #78
#86 := [trans #79 #84]: #85
#62 := [asserted]: #13
#87 := [mp #62 #86]: #82
#607 := (not #774)
#700 := (or #607 #69)
#352 := (* -1::Int 3::Int)
#437 := (* -1::Int -3::Int)
#438 := (mod #437 #352)
#439 := (+ #66 #438)
#430 := (= #439 0::Int)
#441 := (mod -3::Int 3::Int)
#442 := (* -1::Int #441)
#370 := (+ #66 #442)
#443 := (= #370 0::Int)
#440 := (>= -3::Int 0::Int)
#444 := (<= 3::Int 0::Int)
#423 := (or #444 #440)
#758 := (not #423)
#760 := (<= -3::Int 0::Int)
#417 := (or #760 #444)
#547 := (not #417)
#754 := (or #547 #758)
#428 := (ite #754 #443 #430)
#429 := (= -3::Int 0::Int)
#761 := (ite #429 #69 #428)
#762 := (= -3::Int #66)
#763 := (= 3::Int 0::Int)
#764 := (ite #763 #762 #761)
#697 := (or #607 #764)
#688 := (iff #697 #700)
#682 := (iff #700 #700)
#679 := [rewrite]: #682
#605 := (iff #764 #69)
#415 := (= #66 -3::Int)
#601 := (ite false #415 #69)
#603 := (iff #601 #69)
#604 := [rewrite]: #603
#602 := (iff #764 #601)
#584 := (iff #761 #69)
#698 := (ite false #69 #69)
#696 := (iff #698 #69)
#699 := [rewrite]: #696
#600 := (iff #761 #698)
#591 := (iff #428 #69)
#1 := true
#706 := (ite true #69 #69)
#589 := (iff #706 #69)
#590 := [rewrite]: #589
#704 := (iff #428 #706)
#703 := (iff #430 #69)
#549 := (= #439 #66)
#723 := (+ #66 0::Int)
#724 := (= #723 #66)
#725 := [rewrite]: #724
#546 := (= #439 #723)
#710 := (= #438 0::Int)
#714 := (mod 3::Int -3::Int)
#715 := (= #714 0::Int)
#716 := [rewrite]: #715
#708 := (= #438 #714)
#712 := (= #352 -3::Int)
#713 := [rewrite]: #712
#569 := (= #437 3::Int)
#711 := [rewrite]: #569
#709 := [monotonicity #711 #713]: #708
#717 := [trans #709 #716]: #710
#548 := [monotonicity #717]: #546
#702 := [trans #548 #725]: #549
#705 := [monotonicity #702]: #703
#567 := (iff #443 #69)
#720 := (= #370 #66)
#718 := (= #370 #723)
#721 := (= #442 0::Int)
#445 := (* -1::Int 0::Int)
#728 := (= #445 0::Int)
#732 := [rewrite]: #728
#727 := (= #442 #445)
#729 := (= #441 0::Int)
#730 := [rewrite]: #729
#731 := [monotonicity #730]: #727
#722 := [trans #731 #732]: #721
#719 := [monotonicity #722]: #718
#726 := [trans #719 #725]: #720
#568 := [monotonicity #726]: #567
#450 := (iff #754 true)
#737 := (or false true)
#448 := (iff #737 true)
#449 := [rewrite]: #448
#734 := (iff #754 #737)
#459 := (iff #758 true)
#465 := (not false)
#736 := (iff #465 true)
#458 := [rewrite]: #736
#358 := (iff #758 #465)
#463 := (iff #423 false)
#750 := (or false false)
#740 := (iff #750 false)
#462 := [rewrite]: #740
#753 := (iff #423 #750)
#392 := (iff #440 false)
#752 := [rewrite]: #392
#741 := (iff #444 false)
#404 := [rewrite]: #741
#739 := [monotonicity #404 #752]: #753
#464 := [trans #739 #462]: #463
#735 := [monotonicity #464]: #358
#733 := [trans #735 #458]: #459
#751 := (iff #547 false)
#747 := (not true)
#386 := (iff #747 false)
#749 := [rewrite]: #386
#742 := (iff #547 #747)
#745 := (iff #417 true)
#405 := (or true false)
#743 := (iff #405 true)
#744 := [rewrite]: #743
#406 := (iff #417 #405)
#757 := (iff #760 true)
#400 := [rewrite]: #757
#407 := [monotonicity #400 #404]: #406
#746 := [trans #407 #744]: #745
#748 := [monotonicity #746]: #742
#391 := [trans #748 #749]: #751
#738 := [monotonicity #391 #733]: #734
#451 := [trans #738 #449]: #450
#707 := [monotonicity #451 #568 #705]: #704
#550 := [trans #707 #590]: #591
#756 := (iff #429 false)
#416 := [rewrite]: #756
#695 := [monotonicity #416 #550]: #600
#599 := [trans #695 #699]: #584
#755 := (iff #762 #415)
#420 := [rewrite]: #755
#759 := (iff #763 false)
#765 := [rewrite]: #759
#595 := [monotonicity #765 #420 #599]: #602
#606 := [trans #595 #604]: #605
#690 := [monotonicity #606]: #688
#681 := [trans #690 #679]: #688
#701 := [quant-inst #63 #8]: #697
#691 := [mp #701 #681]: #700
[unit-resolution #691 #87 #779]: false
unsat
117ddb585bc1c6246f02758b44ec466b148da99c 351 0
#2 := false
decl f3 :: (-> Int Int Int)
#16 := (:var 0 Int)
#15 := (:var 1 Int)
#36 := (f3 #15 #16)
#759 := (pattern #36)
#18 := 0::Int
#97 := -1::Int
#101 := (* -1::Int #16)
#98 := (* -1::Int #15)
#156 := (mod #98 #101)
#271 := (+ #36 #156)
#272 := (= #271 0::Int)
#37 := (mod #15 #16)
#268 := (* -1::Int #37)
#269 := (+ #36 #268)
#270 := (= #269 0::Int)
#130 := (>= #15 0::Int)
#123 := (<= #16 0::Int)
#215 := (or #123 #130)
#216 := (not #215)
#119 := (<= #15 0::Int)
#213 := (or #119 #123)
#214 := (not #213)
#219 := (or #214 #216)
#273 := (ite #219 #270 #272)
#267 := (= #36 0::Int)
#19 := (= #15 0::Int)
#274 := (ite #19 #267 #273)
#266 := (= #15 #36)
#20 := (= #16 0::Int)
#275 := (ite #20 #266 #274)
#760 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #759) #275)
#278 := (forall (vars (?v0 Int) (?v1 Int)) #275)
#763 := (iff #278 #760)
#761 := (iff #275 #275)
#762 := [refl]: #761
#764 := [quant-intro #762]: #763
#162 := (* -1::Int #156)
#235 := (ite #219 #37 #162)
#238 := (ite #19 0::Int #235)
#241 := (ite #20 #15 #238)
#244 := (= #36 #241)
#247 := (forall (vars (?v0 Int) (?v1 Int)) #244)
#279 := (iff #247 #278)
#276 := (iff #244 #275)
#277 := [rewrite]: #276
#280 := [quant-intro #277]: #279
#131 := (not #130)
#124 := (not #123)
#134 := (and #124 #131)
#120 := (not #119)
#127 := (and #120 #124)
#137 := (or #127 #134)
#182 := (ite #137 #37 #162)
#185 := (ite #19 0::Int #182)
#188 := (ite #20 #15 #185)
#191 := (= #36 #188)
#194 := (forall (vars (?v0 Int) (?v1 Int)) #191)
#248 := (iff #194 #247)
#245 := (iff #191 #244)
#242 := (= #188 #241)
#239 := (= #185 #238)
#236 := (= #182 #235)
#220 := (iff #137 #219)
#217 := (iff #134 #216)
#218 := [rewrite]: #217
#207 := (iff #127 #214)
#208 := [rewrite]: #207
#221 := [monotonicity #208 #218]: #220
#237 := [monotonicity #221]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#205 := (~ #194 #194)
#204 := (~ #191 #191)
#201 := [refl]: #204
#206 := [nnf-pos #201]: #205
#30 := (- #16)
#29 := (- #15)
#38 := (mod #29 #30)
#39 := (- #38)
#23 := (< 0::Int #16)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#40 := (ite #27 #37 #39)
#41 := (ite #19 0::Int #40)
#42 := (ite #20 #15 #41)
#43 := (= #36 #42)
#44 := (forall (vars (?v0 Int) (?v1 Int)) #43)
#197 := (iff #44 #194)
#91 := (and #23 #25)
#94 := (or #24 #91)
#167 := (ite #94 #37 #162)
#170 := (ite #19 0::Int #167)
#173 := (ite #20 #15 #170)
#176 := (= #36 #173)
#179 := (forall (vars (?v0 Int) (?v1 Int)) #176)
#195 := (iff #179 #194)
#192 := (iff #176 #191)
#189 := (= #173 #188)
#186 := (= #170 #185)
#183 := (= #167 #182)
#138 := (iff #94 #137)
#135 := (iff #91 #134)
#132 := (iff #25 #131)
#133 := [rewrite]: #132
#125 := (iff #23 #124)
#126 := [rewrite]: #125
#136 := [monotonicity #126 #133]: #135
#128 := (iff #24 #127)
#121 := (iff #22 #120)
#122 := [rewrite]: #121
#129 := [monotonicity #122 #126]: #128
#139 := [monotonicity #129 #136]: #138
#184 := [monotonicity #139]: #183
#187 := [monotonicity #184]: #186
#190 := [monotonicity #187]: #189
#193 := [monotonicity #190]: #192
#196 := [quant-intro #193]: #195
#180 := (iff #44 #179)
#177 := (iff #43 #176)
#174 := (= #42 #173)
#171 := (= #41 #170)
#168 := (= #40 #167)
#165 := (= #39 #162)
#159 := (- #156)
#163 := (= #159 #162)
#164 := [rewrite]: #163
#160 := (= #39 #159)
#157 := (= #38 #156)
#102 := (= #30 #101)
#103 := [rewrite]: #102
#99 := (= #29 #98)
#100 := [rewrite]: #99
#158 := [monotonicity #100 #103]: #157
#161 := [monotonicity #158]: #160
#166 := [trans #161 #164]: #165
#95 := (iff #27 #94)
#92 := (iff #26 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#169 := [monotonicity #96 #166]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [quant-intro #178]: #180
#198 := [trans #181 #196]: #197
#155 := [asserted]: #44
#199 := [mp #155 #198]: #194
#202 := [mp~ #199 #206]: #194
#250 := [mp #202 #249]: #247
#281 := [mp #250 #280]: #278
#765 := [mp #281 #764]: #760
#12 := 1::Int
#10 := 3::Int
#65 := -5::Int
#68 := (f3 -5::Int 3::Int)
#71 := (= #68 1::Int)
#84 := (not #71)
#8 := 5::Int
#9 := (- 5::Int)
#11 := (f3 #9 3::Int)
#13 := (= #11 1::Int)
#14 := (not #13)
#87 := (iff #14 #84)
#74 := (= 1::Int #68)
#79 := (not #74)
#85 := (iff #79 #84)
#82 := (iff #74 #71)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#80 := (iff #14 #79)
#77 := (iff #13 #74)
#75 := (iff #71 #74)
#76 := [rewrite]: #75
#72 := (iff #13 #71)
#69 := (= #11 #68)
#66 := (= #9 -5::Int)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#78 := [trans #73 #76]: #77
#81 := [monotonicity #78]: #80
#88 := [trans #81 #86]: #87
#64 := [asserted]: #14
#89 := [mp #64 #88]: #84
#658 := (not #760)
#660 := (or #658 #71)
#339 := (* -1::Int 3::Int)
#423 := (* -1::Int -5::Int)
#424 := (mod #423 #339)
#425 := (+ #68 #424)
#416 := (= #425 0::Int)
#427 := (mod -5::Int 3::Int)
#428 := (* -1::Int #427)
#429 := (+ #68 #428)
#426 := (= #429 0::Int)
#430 := (>= -5::Int 0::Int)
#409 := (<= 3::Int 0::Int)
#744 := (or #409 #430)
#746 := (not #744)
#403 := (<= -5::Int 0::Int)
#533 := (or #403 #409)
#740 := (not #533)
#414 := (or #740 #746)
#415 := (ite #414 #426 #416)
#747 := (= #68 0::Int)
#748 := (= -5::Int 0::Int)
#749 := (ite #748 #747 #415)
#750 := (= -5::Int #68)
#745 := (= 3::Int 0::Int)
#751 := (ite #745 #750 #749)
#661 := (or #658 #751)
#663 := (iff #661 #660)
#664 := (iff #660 #660)
#650 := [rewrite]: #664
#673 := (iff #751 #71)
#742 := (= #68 -5::Int)
#669 := (ite false #742 #71)
#672 := (iff #669 #71)
#666 := [rewrite]: #672
#670 := (iff #751 #669)
#675 := (iff #749 #71)
#665 := (ite false #747 #71)
#678 := (iff #665 #71)
#679 := [rewrite]: #678
#667 := (iff #749 #665)
#676 := (iff #415 #71)
#588 := -2::Int
#581 := (= #68 -2::Int)
#1 := true
#593 := (ite true #71 #581)
#687 := (iff #593 #71)
#674 := [rewrite]: #687
#686 := (iff #415 #593)
#591 := (iff #416 #581)
#691 := 2::Int
#684 := (+ 2::Int #68)
#570 := (= #684 0::Int)
#589 := (iff #570 #581)
#590 := [rewrite]: #589
#585 := (iff #416 #570)
#682 := (= #425 #684)
#576 := (+ #68 2::Int)
#586 := (= #576 #684)
#681 := [rewrite]: #586
#577 := (= #425 #576)
#693 := (= #424 2::Int)
#703 := -3::Int
#535 := (mod 5::Int -3::Int)
#692 := (= #535 2::Int)
#690 := [rewrite]: #692
#688 := (= #424 #535)
#532 := (= #339 -3::Int)
#534 := [rewrite]: #532
#702 := (= #423 5::Int)
#696 := [rewrite]: #702
#689 := [monotonicity #696 #534]: #688
#575 := [trans #689 #690]: #693
#536 := [monotonicity #575]: #577
#685 := [trans #536 #681]: #682
#587 := [monotonicity #685]: #585
#592 := [trans #587 #590]: #591
#695 := (iff #426 #71)
#706 := (+ -1::Int #68)
#697 := (= #706 0::Int)
#700 := (iff #697 #71)
#694 := [rewrite]: #700
#698 := (iff #426 #697)
#554 := (= #429 #706)
#705 := (+ #68 -1::Int)
#712 := (= #705 #706)
#553 := [rewrite]: #712
#710 := (= #429 #705)
#709 := (= #428 -1::Int)
#717 := (* -1::Int 1::Int)
#707 := (= #717 -1::Int)
#708 := [rewrite]: #707
#714 := (= #428 #717)
#431 := (= #427 1::Int)
#713 := [rewrite]: #431
#718 := [monotonicity #713]: #714
#704 := [trans #718 #708]: #709
#711 := [monotonicity #704]: #710
#555 := [trans #711 #553]: #554
#699 := [monotonicity #555]: #698
#701 := [trans #699 #694]: #695
#715 := (iff #414 true)
#724 := (or false true)
#436 := (iff #724 true)
#437 := [rewrite]: #436
#434 := (iff #414 #724)
#723 := (iff #746 true)
#721 := (not false)
#445 := (iff #721 true)
#719 := [rewrite]: #445
#722 := (iff #746 #721)
#451 := (iff #744 false)
#725 := (or false false)
#449 := (iff #725 false)
#450 := [rewrite]: #449
#726 := (iff #744 #725)
#736 := (iff #430 false)
#739 := [rewrite]: #736
#391 := (iff #409 false)
#392 := [rewrite]: #391
#448 := [monotonicity #392 #739]: #726
#345 := [trans #448 #450]: #451
#444 := [monotonicity #345]: #722
#720 := [trans #444 #719]: #723
#378 := (iff #740 false)
#734 := (not true)
#737 := (iff #734 false)
#377 := [rewrite]: #737
#372 := (iff #740 #734)
#733 := (iff #533 true)
#393 := (or true false)
#731 := (iff #393 true)
#732 := [rewrite]: #731
#729 := (iff #533 #393)
#727 := (iff #403 true)
#390 := [rewrite]: #727
#730 := [monotonicity #390 #392]: #729
#728 := [trans #730 #732]: #733
#735 := [monotonicity #728]: #372
#738 := [trans #735 #377]: #378
#435 := [monotonicity #738 #720]: #434
#716 := [trans #435 #437]: #715
#683 := [monotonicity #716 #701 #592]: #686
#668 := [trans #683 #674]: #676
#743 := (iff #748 false)
#386 := [rewrite]: #743
#677 := [monotonicity #386 #668]: #667
#680 := [trans #677 #679]: #675
#406 := (iff #750 #742)
#402 := [rewrite]: #406
#741 := (iff #745 false)
#401 := [rewrite]: #741
#671 := [monotonicity #401 #402 #680]: #670
#657 := [trans #671 #666]: #673
#659 := [monotonicity #657]: #663
#651 := [trans #659 #650]: #663
#662 := [quant-inst #65 #10]: #661
#653 := [mp #662 #651]: #660
[unit-resolution #653 #89 #765]: false
unsat
e49f7307606e8c00bbcb83b5fb72cc73d56a411b 345 0
#2 := false
decl f3 :: (-> Int Int Int)
#16 := (:var 0 Int)
#15 := (:var 1 Int)
#36 := (f3 #15 #16)
#761 := (pattern #36)
#18 := 0::Int
#65 := -1::Int
#103 := (* -1::Int #16)
#100 := (* -1::Int #15)
#158 := (mod #100 #103)
#273 := (+ #36 #158)
#274 := (= #273 0::Int)
#37 := (mod #15 #16)
#270 := (* -1::Int #37)
#271 := (+ #36 #270)
#272 := (= #271 0::Int)
#132 := (>= #15 0::Int)
#125 := (<= #16 0::Int)
#217 := (or #125 #132)
#218 := (not #217)
#121 := (<= #15 0::Int)
#215 := (or #121 #125)
#216 := (not #215)
#221 := (or #216 #218)
#275 := (ite #221 #272 #274)
#269 := (= #36 0::Int)
#19 := (= #15 0::Int)
#276 := (ite #19 #269 #275)
#268 := (= #15 #36)
#20 := (= #16 0::Int)
#277 := (ite #20 #268 #276)
#762 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #761) #277)
#280 := (forall (vars (?v0 Int) (?v1 Int)) #277)
#765 := (iff #280 #762)
#763 := (iff #277 #277)
#764 := [refl]: #763
#766 := [quant-intro #764]: #765
#164 := (* -1::Int #158)
#237 := (ite #221 #37 #164)
#240 := (ite #19 0::Int #237)
#243 := (ite #20 #15 #240)
#246 := (= #36 #243)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#281 := (iff #249 #280)
#278 := (iff #246 #277)
#279 := [rewrite]: #278
#282 := [quant-intro #279]: #281
#133 := (not #132)
#126 := (not #125)
#136 := (and #126 #133)
#122 := (not #121)
#129 := (and #122 #126)
#139 := (or #129 #136)
#184 := (ite #139 #37 #164)
#187 := (ite #19 0::Int #184)
#190 := (ite #20 #15 #187)
#193 := (= #36 #190)
#196 := (forall (vars (?v0 Int) (?v1 Int)) #193)
#250 := (iff #196 #249)
#247 := (iff #193 #246)
#244 := (= #190 #243)
#241 := (= #187 #240)
#238 := (= #184 #237)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#220 := [rewrite]: #219
#209 := (iff #129 #216)
#210 := [rewrite]: #209
#223 := [monotonicity #210 #220]: #222
#239 := [monotonicity #223]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [monotonicity #245]: #247
#251 := [quant-intro #248]: #250
#207 := (~ #196 #196)
#206 := (~ #193 #193)
#203 := [refl]: #206
#208 := [nnf-pos #203]: #207
#30 := (- #16)
#29 := (- #15)
#38 := (mod #29 #30)
#39 := (- #38)
#23 := (< 0::Int #16)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#40 := (ite #27 #37 #39)
#41 := (ite #19 0::Int #40)
#42 := (ite #20 #15 #41)
#43 := (= #36 #42)
#44 := (forall (vars (?v0 Int) (?v1 Int)) #43)
#199 := (iff #44 #196)
#94 := (and #23 #25)
#97 := (or #24 #94)
#169 := (ite #97 #37 #164)
#172 := (ite #19 0::Int #169)
#175 := (ite #20 #15 #172)
#178 := (= #36 #175)
#181 := (forall (vars (?v0 Int) (?v1 Int)) #178)
#197 := (iff #181 #196)
#194 := (iff #178 #193)
#191 := (= #175 #190)
#188 := (= #172 #187)
#185 := (= #169 #184)
#140 := (iff #97 #139)
#137 := (iff #94 #136)
#134 := (iff #25 #133)
#135 := [rewrite]: #134
#127 := (iff #23 #126)
#128 := [rewrite]: #127
#138 := [monotonicity #128 #135]: #137
#130 := (iff #24 #129)
#123 := (iff #22 #122)
#124 := [rewrite]: #123
#131 := [monotonicity #124 #128]: #130
#141 := [monotonicity #131 #138]: #140
#186 := [monotonicity #141]: #185
#189 := [monotonicity #186]: #188
#192 := [monotonicity #189]: #191
#195 := [monotonicity #192]: #194
#198 := [quant-intro #195]: #197
#182 := (iff #44 #181)
#179 := (iff #43 #178)
#176 := (= #42 #175)
#173 := (= #41 #172)
#170 := (= #40 #169)
#167 := (= #39 #164)
#161 := (- #158)
#165 := (= #161 #164)
#166 := [rewrite]: #165
#162 := (= #39 #161)
#159 := (= #38 #158)
#104 := (= #30 #103)
#105 := [rewrite]: #104
#101 := (= #29 #100)
#102 := [rewrite]: #101
#160 := [monotonicity #102 #105]: #159
#163 := [monotonicity #160]: #162
#168 := [trans #163 #166]: #167
#98 := (iff #27 #97)
#95 := (iff #26 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#171 := [monotonicity #99 #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#200 := [trans #183 #198]: #199
#157 := [asserted]: #44
#201 := [mp #157 #200]: #196
#204 := [mp~ #201 #208]: #196
#252 := [mp #204 #251]: #249
#283 := [mp #252 #282]: #280
#767 := [mp #283 #766]: #762
#68 := -3::Int
#71 := (f3 -1::Int -3::Int)
#74 := (= #71 -1::Int)
#87 := (not #74)
#8 := 1::Int
#9 := (- 1::Int)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#13 := (= #12 #9)
#14 := (not #13)
#90 := (iff #14 #87)
#77 := (= -1::Int #71)
#82 := (not #77)
#88 := (iff #82 #87)
#85 := (iff #77 #74)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#83 := (iff #14 #82)
#80 := (iff #13 #77)
#78 := (iff #74 #77)
#79 := [rewrite]: #78
#75 := (iff #13 #74)
#66 := (= #9 -1::Int)
#67 := [rewrite]: #66
#72 := (= #12 #71)
#69 := (= #11 -3::Int)
#70 := [rewrite]: #69
#73 := [monotonicity #67 #70]: #72
#76 := [monotonicity #73 #67]: #75
#81 := [trans #76 #79]: #80
#84 := [monotonicity #81]: #83
#91 := [trans #84 #89]: #90
#64 := [asserted]: #14
#92 := [mp #64 #91]: #87
#682 := (not #762)
#671 := (or #682 #74)
#341 := (* -1::Int -3::Int)
#425 := (* -1::Int -1::Int)
#426 := (mod #425 #341)
#427 := (+ #71 #426)
#418 := (= #427 0::Int)
#429 := (mod -1::Int -3::Int)
#430 := (* -1::Int #429)
#431 := (+ #71 #430)
#428 := (= #431 0::Int)
#432 := (>= -1::Int 0::Int)
#411 := (<= -3::Int 0::Int)
#746 := (or #411 #432)
#748 := (not #746)
#405 := (<= -1::Int 0::Int)
#535 := (or #405 #411)
#742 := (not #535)
#416 := (or #742 #748)
#417 := (ite #416 #428 #418)
#749 := (= #71 0::Int)
#750 := (= -1::Int 0::Int)
#751 := (ite #750 #749 #417)
#752 := (= -3::Int 0::Int)
#747 := (ite #752 #77 #751)
#672 := (or #682 #747)
#674 := (iff #672 #671)
#675 := (iff #671 #671)
#659 := [rewrite]: #675
#681 := (iff #747 #74)
#670 := (ite false #74 #74)
#679 := (iff #670 #74)
#680 := [rewrite]: #679
#667 := (iff #747 #670)
#676 := (iff #751 #74)
#594 := (ite false #749 #74)
#685 := (iff #594 #74)
#689 := [rewrite]: #685
#595 := (iff #751 #594)
#592 := (iff #417 #74)
#726 := 2::Int
#556 := (= #71 2::Int)
#587 := (ite false #556 #74)
#583 := (iff #587 #74)
#591 := [rewrite]: #583
#589 := (iff #417 #587)
#687 := (iff #418 #74)
#692 := (+ 1::Int #71)
#538 := (= #692 0::Int)
#683 := (iff #538 #74)
#684 := [rewrite]: #683
#686 := (iff #418 #538)
#578 := (= #427 #692)
#691 := (+ #71 1::Int)
#695 := (= #691 #692)
#577 := [rewrite]: #695
#693 := (= #427 #691)
#537 := (= #426 1::Int)
#704 := (mod 1::Int 3::Int)
#534 := (= #704 1::Int)
#536 := [rewrite]: #534
#698 := (= #426 #704)
#697 := (= #341 3::Int)
#703 := [rewrite]: #697
#702 := (= #425 1::Int)
#696 := [rewrite]: #702
#705 := [monotonicity #696 #703]: #698
#690 := [trans #705 #536]: #537
#694 := [monotonicity #690]: #693
#579 := [trans #694 #577]: #578
#588 := [monotonicity #579]: #686
#572 := [trans #588 #684]: #687
#700 := (iff #428 #556)
#718 := -2::Int
#711 := (+ -2::Int #71)
#708 := (= #711 0::Int)
#557 := (iff #708 #556)
#699 := [rewrite]: #557
#714 := (iff #428 #708)
#712 := (= #431 #711)
#720 := (+ #71 -2::Int)
#706 := (= #720 #711)
#707 := [rewrite]: #706
#709 := (= #431 #720)
#719 := (= #430 -2::Int)
#438 := (* -1::Int 2::Int)
#433 := (= #438 -2::Int)
#715 := [rewrite]: #433
#439 := (= #430 #438)
#436 := (= #429 2::Int)
#437 := [rewrite]: #436
#717 := [monotonicity #437]: #439
#716 := [trans #717 #715]: #719
#710 := [monotonicity #716]: #709
#713 := [trans #710 #707]: #712
#555 := [monotonicity #713]: #714
#701 := [trans #555 #699]: #700
#725 := (iff #416 false)
#723 := (or false false)
#447 := (iff #723 false)
#721 := [rewrite]: #447
#724 := (iff #416 #723)
#453 := (iff #748 false)
#1 := true
#733 := (not true)
#730 := (iff #733 false)
#736 := [rewrite]: #730
#451 := (iff #748 #733)
#728 := (iff #746 true)
#380 := (or true false)
#741 := (iff #380 true)
#727 := [rewrite]: #741
#740 := (iff #746 #380)
#739 := (iff #432 false)
#379 := [rewrite]: #739
#745 := (iff #411 true)
#388 := [rewrite]: #745
#738 := [monotonicity #388 #379]: #740
#450 := [trans #738 #727]: #728
#452 := [monotonicity #450]: #451
#347 := [trans #452 #736]: #453
#374 := (iff #742 false)
#734 := (iff #742 #733)
#731 := (iff #535 true)
#729 := (or true true)
#394 := (iff #729 true)
#395 := [rewrite]: #394
#392 := (iff #535 #729)
#744 := (iff #405 true)
#404 := [rewrite]: #744
#393 := [monotonicity #404 #388]: #392
#732 := [trans #393 #395]: #731
#735 := [monotonicity #732]: #734
#737 := [trans #735 #736]: #374
#446 := [monotonicity #737 #347]: #724
#722 := [trans #446 #721]: #725
#590 := [monotonicity #722 #701 #572]: #589
#593 := [trans #590 #591]: #592
#403 := (iff #750 false)
#408 := [rewrite]: #403
#688 := [monotonicity #408 #593]: #595
#678 := [trans #688 #689]: #676
#753 := (iff #752 false)
#743 := [rewrite]: #753
#669 := [monotonicity #743 #86 #678]: #667
#677 := [trans #669 #680]: #681
#668 := [monotonicity #677]: #674
#660 := [trans #668 #659]: #674
#673 := [quant-inst #65 #68]: #672
#662 := [mp #673 #660]: #671
[unit-resolution #662 #92 #767]: false
unsat
a8f315f795d8dc3da5b76a3fe9d6ebfef481af33 324 0
#2 := false
decl f3 :: (-> Int Int Int)
#15 := (:var 0 Int)
#14 := (:var 1 Int)
#34 := (f3 #14 #15)
#773 := (pattern #34)
#11 := 0::Int
#104 := -1::Int
#108 := (* -1::Int #15)
#105 := (* -1::Int #14)
#169 := (mod #105 #108)
#284 := (+ #34 #169)
#285 := (= #284 0::Int)
#35 := (mod #14 #15)
#281 := (* -1::Int #35)
#282 := (+ #34 #281)
#283 := (= #282 0::Int)
#143 := (>= #14 0::Int)
#136 := (<= #15 0::Int)
#228 := (or #136 #143)
#229 := (not #228)
#132 := (<= #14 0::Int)
#226 := (or #132 #136)
#227 := (not #226)
#232 := (or #227 #229)
#286 := (ite #232 #283 #285)
#280 := (= #34 0::Int)
#17 := (= #14 0::Int)
#287 := (ite #17 #280 #286)
#279 := (= #14 #34)
#18 := (= #15 0::Int)
#288 := (ite #18 #279 #287)
#774 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #773) #288)
#291 := (forall (vars (?v0 Int) (?v1 Int)) #288)
#777 := (iff #291 #774)
#775 := (iff #288 #288)
#776 := [refl]: #775
#778 := [quant-intro #776]: #777
#175 := (* -1::Int #169)
#248 := (ite #232 #35 #175)
#251 := (ite #17 0::Int #248)
#254 := (ite #18 #14 #251)
#257 := (= #34 #254)
#260 := (forall (vars (?v0 Int) (?v1 Int)) #257)
#292 := (iff #260 #291)
#289 := (iff #257 #288)
#290 := [rewrite]: #289
#293 := [quant-intro #290]: #292
#144 := (not #143)
#137 := (not #136)
#147 := (and #137 #144)
#133 := (not #132)
#140 := (and #133 #137)
#150 := (or #140 #147)
#195 := (ite #150 #35 #175)
#198 := (ite #17 0::Int #195)
#201 := (ite #18 #14 #198)
#204 := (= #34 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#261 := (iff #207 #260)
#258 := (iff #204 #257)
#255 := (= #201 #254)
#252 := (= #198 #251)
#249 := (= #195 #248)
#233 := (iff #150 #232)
#230 := (iff #147 #229)
#231 := [rewrite]: #230
#220 := (iff #140 #227)
#221 := [rewrite]: #220
#234 := [monotonicity #221 #231]: #233
#250 := [monotonicity #234]: #249
#253 := [monotonicity #250]: #252
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [quant-intro #259]: #261
#218 := (~ #207 #207)
#217 := (~ #204 #204)
#214 := [refl]: #217
#219 := [nnf-pos #214]: #218
#28 := (- #15)
#27 := (- #14)
#36 := (mod #27 #28)
#37 := (- #36)
#21 := (< 0::Int #15)
#23 := (< #14 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #14)
#22 := (and #20 #21)
#25 := (or #22 #24)
#38 := (ite #25 #35 #37)
#39 := (ite #17 0::Int #38)
#40 := (ite #18 #14 #39)
#41 := (= #34 #40)
#42 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#210 := (iff #42 #207)
#98 := (and #21 #23)
#101 := (or #22 #98)
#180 := (ite #101 #35 #175)
#89 := (= 0::Int #14)
#183 := (ite #89 0::Int #180)
#92 := (= 0::Int #15)
#186 := (ite #92 #14 #183)
#189 := (= #34 #186)
#192 := (forall (vars (?v0 Int) (?v1 Int)) #189)
#208 := (iff #192 #207)
#205 := (iff #189 #204)
#202 := (= #186 #201)
#199 := (= #183 #198)
#196 := (= #180 #195)
#151 := (iff #101 #150)
#148 := (iff #98 #147)
#145 := (iff #23 #144)
#146 := [rewrite]: #145
#138 := (iff #21 #137)
#139 := [rewrite]: #138
#149 := [monotonicity #139 #146]: #148
#141 := (iff #22 #140)
#134 := (iff #20 #133)
#135 := [rewrite]: #134
#142 := [monotonicity #135 #139]: #141
#152 := [monotonicity #142 #149]: #151
#197 := [monotonicity #152]: #196
#126 := (iff #89 #17)
#127 := [rewrite]: #126
#200 := [monotonicity #127 #197]: #199
#128 := (iff #92 #18)
#129 := [rewrite]: #128
#203 := [monotonicity #129 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#193 := (iff #42 #192)
#190 := (iff #41 #189)
#187 := (= #40 #186)
#184 := (= #39 #183)
#181 := (= #38 #180)
#178 := (= #37 #175)
#172 := (- #169)
#176 := (= #172 #175)
#177 := [rewrite]: #176
#173 := (= #37 #172)
#170 := (= #36 #169)
#109 := (= #28 #108)
#110 := [rewrite]: #109
#106 := (= #27 #105)
#107 := [rewrite]: #106
#171 := [monotonicity #107 #110]: #170
#174 := [monotonicity #171]: #173
#179 := [trans #174 #177]: #178
#102 := (iff #25 #101)
#99 := (iff #24 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#182 := [monotonicity #103 #179]: #181
#90 := (iff #17 #89)
#91 := [rewrite]: #90
#185 := [monotonicity #91 #182]: #184
#93 := (iff #18 #92)
#94 := [rewrite]: #93
#188 := [monotonicity #94 #185]: #187
#191 := [monotonicity #188]: #190
#194 := [quant-intro #191]: #193
#211 := [trans #194 #209]: #210
#168 := [asserted]: #42
#212 := [mp #168 #211]: #207
#215 := [mp~ #212 #219]: #207
#263 := [mp #215 #262]: #260
#294 := [mp #263 #293]: #291
#779 := [mp #294 #778]: #774
#63 := -3::Int
#66 := (f3 -3::Int -3::Int)
#69 := (= #66 0::Int)
#82 := (not #69)
#8 := 3::Int
#9 := (- 3::Int)
#10 := (f3 #9 #9)
#12 := (= #10 0::Int)
#13 := (not #12)
#85 := (iff #13 #82)
#72 := (= 0::Int #66)
#77 := (not #72)
#83 := (iff #77 #82)
#80 := (iff #72 #69)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#78 := (iff #13 #77)
#75 := (iff #12 #72)
#73 := (iff #69 #72)
#74 := [rewrite]: #73
#70 := (iff #12 #69)
#67 := (= #10 #66)
#64 := (= #9 -3::Int)
#65 := [rewrite]: #64
#68 := [monotonicity #65 #65]: #67
#71 := [monotonicity #68]: #70
#76 := [trans #71 #74]: #75
#79 := [monotonicity #76]: #78
#86 := [trans #79 #84]: #85
#62 := [asserted]: #13
#87 := [mp #62 #86]: #82
#550 := (not #774)
#698 := (or #550 #69)
#352 := (* -1::Int -3::Int)
#437 := (mod #352 #352)
#438 := (+ #66 #437)
#439 := (= #438 0::Int)
#430 := (mod -3::Int -3::Int)
#441 := (* -1::Int #430)
#442 := (+ #66 #441)
#370 := (= #442 0::Int)
#443 := (>= -3::Int 0::Int)
#440 := (<= -3::Int 0::Int)
#444 := (or #440 #443)
#423 := (not #444)
#758 := (or #440 #440)
#760 := (not #758)
#417 := (or #760 #423)
#547 := (ite #417 #370 #439)
#754 := (= -3::Int 0::Int)
#428 := (ite #754 #69 #547)
#429 := (= -3::Int #66)
#761 := (ite #754 #429 #428)
#600 := (or #550 #761)
#696 := (iff #600 #698)
#584 := (iff #698 #698)
#599 := [rewrite]: #584
#590 := (iff #761 #69)
#759 := (= #66 -3::Int)
#705 := (ite false #759 #69)
#707 := (iff #705 #69)
#589 := [rewrite]: #707
#706 := (iff #761 #705)
#702 := (iff #428 #69)
#708 := (ite false #69 #69)
#716 := (iff #708 #69)
#710 := [rewrite]: #716
#548 := (iff #428 #708)
#717 := (iff #547 #69)
#709 := (iff #547 #708)
#713 := (iff #439 #69)
#711 := (= #438 #66)
#451 := (+ #66 0::Int)
#445 := (= #451 #66)
#727 := [rewrite]: #445
#568 := (= #438 #451)
#726 := (= #437 0::Int)
#718 := (mod 3::Int 3::Int)
#725 := (= #718 0::Int)
#720 := [rewrite]: #725
#719 := (= #437 #718)
#722 := (= #352 3::Int)
#723 := [rewrite]: #722
#724 := [monotonicity #723 #723]: #719
#567 := [trans #724 #720]: #726
#569 := [monotonicity #567]: #568
#712 := [trans #569 #727]: #711
#714 := [monotonicity #712]: #713
#732 := (iff #370 #69)
#731 := (= #442 #66)
#729 := (= #442 #451)
#449 := (= #441 0::Int)
#733 := (* -1::Int 0::Int)
#738 := (= #733 0::Int)
#448 := [rewrite]: #738
#737 := (= #441 #733)
#458 := (= #430 0::Int)
#459 := [rewrite]: #458
#734 := [monotonicity #459]: #737
#450 := [trans #734 #448]: #449
#730 := [monotonicity #450]: #729
#728 := [trans #730 #727]: #731
#721 := [monotonicity #728]: #732
#735 := (iff #417 false)
#462 := (or false false)
#465 := (iff #462 false)
#358 := [rewrite]: #465
#463 := (iff #417 #462)
#739 := (iff #423 false)
#1 := true
#405 := (not true)
#743 := (iff #405 false)
#744 := [rewrite]: #743
#750 := (iff #423 #405)
#392 := (iff #444 true)
#748 := (or true false)
#751 := (iff #748 true)
#391 := [rewrite]: #751
#386 := (iff #444 #748)
#747 := (iff #443 false)
#742 := [rewrite]: #747
#755 := (iff #440 true)
#415 := [rewrite]: #755
#749 := [monotonicity #415 #742]: #386
#752 := [trans #749 #391]: #392
#753 := [monotonicity #752]: #750
#740 := [trans #753 #744]: #739
#745 := (iff #760 false)
#406 := (iff #760 #405)
#741 := (iff #758 true)
#420 := (or true true)
#757 := (iff #420 true)
#400 := [rewrite]: #757
#756 := (iff #758 #420)
#416 := [monotonicity #415 #415]: #756
#404 := [trans #416 #400]: #741
#407 := [monotonicity #404]: #406
#746 := [trans #407 #744]: #745
#464 := [monotonicity #746 #740]: #463
#736 := [trans #464 #358]: #735
#715 := [monotonicity #736 #721 #714]: #709
#546 := [trans #715 #710]: #717
#762 := (iff #754 false)
#763 := [rewrite]: #762
#549 := [monotonicity #763 #546]: #548
#703 := [trans #549 #710]: #702
#764 := (iff #429 #759)
#765 := [rewrite]: #764
#704 := [monotonicity #763 #765 #703]: #706
#591 := [trans #704 #589]: #590
#699 := [monotonicity #591]: #696
#601 := [trans #699 #599]: #696
#695 := [quant-inst #63 #63]: #600
#602 := [mp #695 #601]: #698
[unit-resolution #602 #87 #779]: false
unsat
ab60a5d229f921e05cbaa6708d883c31816e3a4a 342 0
#2 := false
decl f3 :: (-> Int Int Int)
#18 := (:var 0 Int)
#17 := (:var 1 Int)
#38 := (f3 #17 #18)
#756 := (pattern #38)
#20 := 0::Int
#93 := -1::Int
#97 := (* -1::Int #18)
#94 := (* -1::Int #17)
#152 := (mod #94 #97)
#267 := (+ #38 #152)
#268 := (= #267 0::Int)
#39 := (mod #17 #18)
#264 := (* -1::Int #39)
#265 := (+ #38 #264)
#266 := (= #265 0::Int)
#126 := (>= #17 0::Int)
#119 := (<= #18 0::Int)
#211 := (or #119 #126)
#212 := (not #211)
#115 := (<= #17 0::Int)
#209 := (or #115 #119)
#210 := (not #209)
#215 := (or #210 #212)
#269 := (ite #215 #266 #268)
#263 := (= #38 0::Int)
#21 := (= #17 0::Int)
#270 := (ite #21 #263 #269)
#262 := (= #17 #38)
#22 := (= #18 0::Int)
#271 := (ite #22 #262 #270)
#757 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #756) #271)
#274 := (forall (vars (?v0 Int) (?v1 Int)) #271)
#760 := (iff #274 #757)
#758 := (iff #271 #271)
#759 := [refl]: #758
#761 := [quant-intro #759]: #760
#158 := (* -1::Int #152)
#231 := (ite #215 #39 #158)
#234 := (ite #21 0::Int #231)
#237 := (ite #22 #17 #234)
#240 := (= #38 #237)
#243 := (forall (vars (?v0 Int) (?v1 Int)) #240)
#275 := (iff #243 #274)
#272 := (iff #240 #271)
#273 := [rewrite]: #272
#276 := [quant-intro #273]: #275
#127 := (not #126)
#120 := (not #119)
#130 := (and #120 #127)
#116 := (not #115)
#123 := (and #116 #120)
#133 := (or #123 #130)
#178 := (ite #133 #39 #158)
#181 := (ite #21 0::Int #178)
#184 := (ite #22 #17 #181)
#187 := (= #38 #184)
#190 := (forall (vars (?v0 Int) (?v1 Int)) #187)
#244 := (iff #190 #243)
#241 := (iff #187 #240)
#238 := (= #184 #237)
#235 := (= #181 #234)
#232 := (= #178 #231)
#216 := (iff #133 #215)
#213 := (iff #130 #212)
#214 := [rewrite]: #213
#203 := (iff #123 #210)
#204 := [rewrite]: #203
#217 := [monotonicity #204 #214]: #216
#233 := [monotonicity #217]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [quant-intro #242]: #244
#201 := (~ #190 #190)
#200 := (~ #187 #187)
#197 := [refl]: #200
#202 := [nnf-pos #197]: #201
#32 := (- #18)
#31 := (- #17)
#40 := (mod #31 #32)
#41 := (- #40)
#25 := (< 0::Int #18)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#42 := (ite #29 #39 #41)
#43 := (ite #21 0::Int #42)
#44 := (ite #22 #17 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#193 := (iff #46 #190)
#86 := (and #25 #27)
#90 := (or #26 #86)
#163 := (ite #90 #39 #158)
#166 := (ite #21 0::Int #163)
#169 := (ite #22 #17 #166)
#172 := (= #38 #169)
#175 := (forall (vars (?v0 Int) (?v1 Int)) #172)
#191 := (iff #175 #190)
#188 := (iff #172 #187)
#185 := (= #169 #184)
#182 := (= #166 #181)
#179 := (= #163 #178)
#134 := (iff #90 #133)
#131 := (iff #86 #130)
#128 := (iff #27 #127)
#129 := [rewrite]: #128
#121 := (iff #25 #120)
#122 := [rewrite]: #121
#132 := [monotonicity #122 #129]: #131
#124 := (iff #26 #123)
#117 := (iff #24 #116)
#118 := [rewrite]: #117
#125 := [monotonicity #118 #122]: #124
#135 := [monotonicity #125 #132]: #134
#180 := [monotonicity #135]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [monotonicity #186]: #188
#192 := [quant-intro #189]: #191
#176 := (iff #46 #175)
#173 := (iff #45 #172)
#170 := (= #44 #169)
#167 := (= #43 #166)
#164 := (= #42 #163)
#161 := (= #41 #158)
#155 := (- #152)
#159 := (= #155 #158)
#160 := [rewrite]: #159
#156 := (= #41 #155)
#153 := (= #40 #152)
#98 := (= #32 #97)
#99 := [rewrite]: #98
#95 := (= #31 #94)
#96 := [rewrite]: #95
#154 := [monotonicity #96 #99]: #153
#157 := [monotonicity #154]: #156
#162 := [trans #157 #160]: #161
#91 := (iff #29 #90)
#88 := (iff #28 #86)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#165 := [monotonicity #92 #162]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [quant-intro #174]: #176
#194 := [trans #177 #192]: #193
#151 := [asserted]: #46
#195 := [mp #151 #194]: #190
#198 := [mp~ #195 #202]: #190
#246 := [mp #198 #245]: #243
#277 := [mp #246 #276]: #274
#762 := [mp #277 #761]: #757
#76 := -2::Int
#70 := -3::Int
#67 := -5::Int
#73 := (f3 -5::Int -3::Int)
#79 := (= #73 -2::Int)
#82 := (not #79)
#13 := 2::Int
#14 := (- 2::Int)
#10 := 3::Int
#11 := (- 3::Int)
#8 := 5::Int
#9 := (- 5::Int)
#12 := (f3 #9 #11)
#15 := (= #12 #14)
#16 := (not #15)
#83 := (iff #16 #82)
#80 := (iff #15 #79)
#77 := (= #14 -2::Int)
#78 := [rewrite]: #77
#74 := (= #12 #73)
#71 := (= #11 -3::Int)
#72 := [rewrite]: #71
#68 := (= #9 -5::Int)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#66 := [asserted]: #16
#87 := [mp #66 #84]: #82
#667 := (not #757)
#668 := (or #667 #79)
#335 := (* -1::Int -3::Int)
#420 := (* -1::Int -5::Int)
#421 := (mod #420 #335)
#422 := (+ #73 #421)
#413 := (= #422 0::Int)
#424 := (mod -5::Int -3::Int)
#425 := (* -1::Int #424)
#353 := (+ #73 #425)
#426 := (= #353 0::Int)
#423 := (>= -5::Int 0::Int)
#427 := (<= -3::Int 0::Int)
#406 := (or #427 #423)
#741 := (not #406)
#743 := (<= -5::Int 0::Int)
#400 := (or #743 #427)
#530 := (not #400)
#737 := (or #530 #741)
#411 := (ite #737 #426 #413)
#412 := (= #73 0::Int)
#744 := (= -5::Int 0::Int)
#745 := (ite #744 #412 #411)
#746 := (= -5::Int #73)
#747 := (= -3::Int 0::Int)
#742 := (ite #747 #746 #745)
#669 := (or #667 #742)
#670 := (iff #669 #668)
#655 := (iff #668 #668)
#657 := [rewrite]: #655
#677 := (iff #742 #79)
#403 := (= #73 -5::Int)
#664 := (ite false #403 #79)
#676 := (iff #664 #79)
#672 := [rewrite]: #676
#674 := (iff #742 #664)
#665 := (iff #745 #79)
#683 := (ite false #412 #79)
#671 := (iff #683 #79)
#673 := [rewrite]: #671
#680 := (iff #745 #683)
#589 := (iff #411 #79)
#433 := 1::Int
#694 := (= #73 1::Int)
#585 := (ite false #694 #79)
#587 := (iff #585 #79)
#588 := [rewrite]: #587
#578 := (iff #411 #585)
#582 := (iff #413 #79)
#572 := (+ 2::Int #73)
#583 := (= #572 0::Int)
#682 := (iff #583 #79)
#567 := [rewrite]: #682
#678 := (iff #413 #583)
#533 := (= #422 #572)
#689 := (+ #73 2::Int)
#573 := (= #689 #572)
#574 := [rewrite]: #573
#687 := (= #422 #689)
#686 := (= #421 2::Int)
#700 := (mod 5::Int 3::Int)
#532 := (= #700 2::Int)
#685 := [rewrite]: #532
#529 := (= #421 #700)
#699 := (= #335 3::Int)
#693 := [rewrite]: #699
#692 := (= #420 5::Int)
#698 := [rewrite]: #692
#531 := [monotonicity #698 #693]: #529
#688 := [trans #531 #685]: #686
#690 := [monotonicity #688]: #687
#681 := [trans #690 #574]: #533
#679 := [monotonicity #681]: #678
#584 := [trans #679 #567]: #582
#697 := (iff #426 #694)
#702 := (+ -1::Int #73)
#550 := (= #702 0::Int)
#695 := (iff #550 #694)
#696 := [rewrite]: #695
#551 := (iff #426 #550)
#703 := (= #353 #702)
#705 := (+ #73 -1::Int)
#707 := (= #705 #702)
#708 := [rewrite]: #707
#706 := (= #353 #705)
#715 := (= #425 -1::Int)
#713 := (* -1::Int 1::Int)
#714 := (= #713 -1::Int)
#711 := [rewrite]: #714
#428 := (= #425 #713)
#434 := (= #424 1::Int)
#712 := [rewrite]: #434
#710 := [monotonicity #712]: #428
#704 := [trans #710 #711]: #715
#701 := [monotonicity #704]: #706
#709 := [trans #701 #708]: #703
#552 := [monotonicity #709]: #551
#691 := [trans #552 #696]: #697
#431 := (iff #737 false)
#442 := (or false false)
#717 := (iff #442 false)
#721 := [rewrite]: #717
#716 := (iff #737 #442)
#719 := (iff #741 false)
#1 := true
#725 := (not true)
#732 := (iff #725 false)
#734 := [rewrite]: #732
#341 := (iff #741 #725)
#447 := (iff #406 true)
#736 := (or true false)
#445 := (iff #736 true)
#446 := [rewrite]: #445
#722 := (iff #406 #736)
#735 := (iff #423 false)
#733 := [rewrite]: #735
#387 := (iff #427 true)
#388 := [rewrite]: #387
#723 := [monotonicity #388 #733]: #722
#448 := [trans #723 #446]: #447
#718 := [monotonicity #448]: #341
#441 := [trans #718 #734]: #719
#374 := (iff #530 false)
#731 := (iff #530 #725)
#729 := (iff #400 true)
#389 := (or true true)
#727 := (iff #389 true)
#728 := [rewrite]: #727
#390 := (iff #400 #389)
#383 := (iff #743 true)
#724 := [rewrite]: #383
#726 := [monotonicity #724 #388]: #390
#730 := [trans #726 #728]: #729
#369 := [monotonicity #730]: #731
#375 := [trans #369 #734]: #374
#720 := [monotonicity #375 #441]: #716
#432 := [trans #720 #721]: #431
#586 := [monotonicity #432 #691 #584]: #578
#590 := [trans #586 #588]: #589
#399 := (iff #744 false)
#740 := [rewrite]: #399
#684 := [monotonicity #740 #590]: #680
#662 := [trans #684 #673]: #665
#398 := (iff #746 #403)
#739 := [rewrite]: #398
#748 := (iff #747 false)
#738 := [rewrite]: #748
#675 := [monotonicity #738 #739 #662]: #674
#666 := [trans #675 #672]: #677
#654 := [monotonicity #666]: #670
#658 := [trans #654 #657]: #670
#663 := [quant-inst #67 #70]: #669
#659 := [mp #663 #658]: #668
[unit-resolution #659 #87 #762]: false
unsat
0c710ae5525793136d2145b7da68378d3667fa91 322 0
#2 := false
#16 := 0::Int
decl f4 :: Int
#8 := f4
#412 := (>= f4 0::Int)
#732 := (<= f4 0::Int)
#378 := (not #732)
#721 := (not #412)
#725 := (or #721 #378)
#688 := (not #725)
#9 := 3::Int
#413 := (mod f4 3::Int)
#82 := -1::Int
#414 := (* -1::Int #413)
decl f3 :: (-> Int Int Int)
#10 := (f3 f4 3::Int)
#342 := (+ #10 #414)
#415 := (= #342 0::Int)
#561 := (not #415)
#518 := (<= #342 0::Int)
#621 := (not #518)
#629 := (>= #413 3::Int)
#630 := (not #629)
#1 := true
#60 := [true-axiom]: true
#617 := (or false #630)
#618 := [th-lemma arith]: #617
#619 := [unit-resolution #618 #60]: #630
#620 := [hypothesis]: #518
#67 := (>= #10 3::Int)
#11 := (< #10 3::Int)
#12 := (not #11)
#74 := (iff #12 #67)
#65 := (not #67)
#69 := (not #65)
#72 := (iff #69 #67)
#73 := [rewrite]: #72
#70 := (iff #12 #69)
#66 := (iff #11 #65)
#68 := [rewrite]: #66
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#62 := [asserted]: #12
#76 := [mp #62 #75]: #67
#615 := [th-lemma arith farkas -1 1 1 #76 #620 #619]: false
#607 := [lemma #615]: #621
#624 := (or #561 #518)
#635 := [th-lemma arith triangle-eq]: #624
#613 := [unit-resolution #635 #607]: #561
#612 := (or #688 #415)
#436 := -3::Int
#409 := (* -1::Int f4)
#707 := (mod #409 -3::Int)
#431 := (+ #10 #707)
#706 := (= #431 0::Int)
#421 := (ite #725 #415 #706)
#401 := (= #10 0::Int)
#733 := (= f4 0::Int)
#701 := (ite #733 #401 #421)
#14 := (:var 0 Int)
#13 := (:var 1 Int)
#34 := (f3 #13 #14)
#745 := (pattern #34)
#86 := (* -1::Int #14)
#83 := (* -1::Int #13)
#141 := (mod #83 #86)
#256 := (+ #34 #141)
#257 := (= #256 0::Int)
#35 := (mod #13 #14)
#253 := (* -1::Int #35)
#254 := (+ #34 #253)
#255 := (= #254 0::Int)
#115 := (>= #13 0::Int)
#108 := (<= #14 0::Int)
#200 := (or #108 #115)
#201 := (not #200)
#104 := (<= #13 0::Int)
#198 := (or #104 #108)
#199 := (not #198)
#204 := (or #199 #201)
#258 := (ite #204 #255 #257)
#252 := (= #34 0::Int)
#17 := (= #13 0::Int)
#259 := (ite #17 #252 #258)
#251 := (= #13 #34)
#18 := (= #14 0::Int)
#260 := (ite #18 #251 #259)
#746 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #745) #260)
#263 := (forall (vars (?v0 Int) (?v1 Int)) #260)
#749 := (iff #263 #746)
#747 := (iff #260 #260)
#748 := [refl]: #747
#750 := [quant-intro #748]: #749
#147 := (* -1::Int #141)
#220 := (ite #204 #35 #147)
#223 := (ite #17 0::Int #220)
#226 := (ite #18 #13 #223)
#229 := (= #34 #226)
#232 := (forall (vars (?v0 Int) (?v1 Int)) #229)
#264 := (iff #232 #263)
#261 := (iff #229 #260)
#262 := [rewrite]: #261
#265 := [quant-intro #262]: #264
#116 := (not #115)
#109 := (not #108)
#119 := (and #109 #116)
#105 := (not #104)
#112 := (and #105 #109)
#122 := (or #112 #119)
#167 := (ite #122 #35 #147)
#170 := (ite #17 0::Int #167)
#173 := (ite #18 #13 #170)
#176 := (= #34 #173)
#179 := (forall (vars (?v0 Int) (?v1 Int)) #176)
#233 := (iff #179 #232)
#230 := (iff #176 #229)
#227 := (= #173 #226)
#224 := (= #170 #223)
#221 := (= #167 #220)
#205 := (iff #122 #204)
#202 := (iff #119 #201)
#203 := [rewrite]: #202
#192 := (iff #112 #199)
#193 := [rewrite]: #192
#206 := [monotonicity #193 #203]: #205
#222 := [monotonicity #206]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [quant-intro #231]: #233
#190 := (~ #179 #179)
#189 := (~ #176 #176)
#186 := [refl]: #189
#191 := [nnf-pos #186]: #190
#28 := (- #14)
#27 := (- #13)
#36 := (mod #27 #28)
#37 := (- #36)
#21 := (< 0::Int #14)
#23 := (< #13 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #13)
#22 := (and #20 #21)
#25 := (or #22 #24)
#38 := (ite #25 #35 #37)
#39 := (ite #17 0::Int #38)
#40 := (ite #18 #13 #39)
#41 := (= #34 #40)
#42 := (forall (vars (?v0 Int) (?v1 Int)) #41)
#182 := (iff #42 #179)
#64 := (and #21 #23)
#79 := (or #22 #64)
#152 := (ite #79 #35 #147)
#155 := (ite #17 0::Int #152)
#158 := (ite #18 #13 #155)
#161 := (= #34 #158)
#164 := (forall (vars (?v0 Int) (?v1 Int)) #161)
#180 := (iff #164 #179)
#177 := (iff #161 #176)
#174 := (= #158 #173)
#171 := (= #155 #170)
#168 := (= #152 #167)
#123 := (iff #79 #122)
#120 := (iff #64 #119)
#117 := (iff #23 #116)
#118 := [rewrite]: #117
#110 := (iff #21 #109)
#111 := [rewrite]: #110
#121 := [monotonicity #111 #118]: #120
#113 := (iff #22 #112)
#106 := (iff #20 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#124 := [monotonicity #114 #121]: #123
#169 := [monotonicity #124]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [quant-intro #178]: #180
#165 := (iff #42 #164)
#162 := (iff #41 #161)
#159 := (= #40 #158)
#156 := (= #39 #155)
#153 := (= #38 #152)
#150 := (= #37 #147)
#144 := (- #141)
#148 := (= #144 #147)
#149 := [rewrite]: #148
#145 := (= #37 #144)
#142 := (= #36 #141)
#87 := (= #28 #86)
#88 := [rewrite]: #87
#84 := (= #27 #83)
#85 := [rewrite]: #84
#143 := [monotonicity #85 #88]: #142
#146 := [monotonicity #143]: #145
#151 := [trans #146 #149]: #150
#80 := (iff #25 #79)
#77 := (iff #24 #64)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#154 := [monotonicity #81 #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#183 := [trans #166 #181]: #182
#140 := [asserted]: #42
#184 := [mp #140 #183]: #179
#187 := [mp~ #184 #191]: #179
#235 := [mp #187 #234]: #232
#266 := [mp #235 #265]: #263
#751 := [mp #266 #750]: #746
#690 := (not #746)
#691 := (or #690 #701)
#324 := (* -1::Int 3::Int)
#410 := (mod #409 #324)
#411 := (+ #10 #410)
#402 := (= #411 0::Int)
#416 := (<= 3::Int 0::Int)
#395 := (or #416 #412)
#730 := (not #395)
#389 := (or #732 #416)
#519 := (not #389)
#726 := (or #519 #730)
#400 := (ite #726 #415 #402)
#734 := (ite #733 #401 #400)
#735 := (= f4 #10)
#736 := (= 3::Int 0::Int)
#731 := (ite #736 #735 #734)
#696 := (or #690 #731)
#692 := (iff #696 #691)
#539 := (iff #691 #691)
#540 := [rewrite]: #539
#694 := (iff #731 #701)
#699 := (ite false #735 #701)
#704 := (iff #699 #701)
#693 := [rewrite]: #704
#703 := (iff #731 #699)
#702 := (iff #734 #701)
#422 := (iff #400 #421)
#710 := (iff #402 #706)
#705 := (= #411 #431)
#708 := (= #410 #707)
#437 := (= #324 -3::Int)
#330 := [rewrite]: #437
#430 := [monotonicity #330]: #708
#709 := [monotonicity #430]: #705
#420 := [monotonicity #709]: #710
#434 := (iff #726 #725)
#364 := (or #378 #721)
#711 := (iff #364 #725)
#712 := [rewrite]: #711
#724 := (iff #726 #364)
#723 := (iff #730 #721)
#720 := (iff #395 #412)
#716 := (or false #412)
#719 := (iff #716 #412)
#714 := [rewrite]: #719
#717 := (iff #395 #716)
#387 := (iff #416 false)
#392 := [rewrite]: #387
#718 := [monotonicity #392]: #717
#358 := [trans #718 #714]: #720
#363 := [monotonicity #358]: #723
#379 := (iff #519 #378)
#376 := (iff #389 #732)
#728 := (or #732 false)
#372 := (iff #728 #732)
#713 := [rewrite]: #372
#388 := (iff #389 #728)
#729 := [monotonicity #392]: #388
#377 := [trans #729 #713]: #376
#715 := [monotonicity #377]: #379
#722 := [monotonicity #715 #363]: #724
#435 := [trans #722 #712]: #434
#423 := [monotonicity #435 #420]: #422
#417 := [monotonicity #423]: #702
#737 := (iff #736 false)
#727 := [rewrite]: #737
#700 := [monotonicity #727 #417]: #703
#695 := [trans #700 #693]: #694
#698 := [monotonicity #695]: #692
#541 := [trans #698 #540]: #692
#697 := [quant-inst #8 #9]: #696
#683 := [mp #697 #541]: #691
#614 := [unit-resolution #683 #751]: #701
#668 := (not #733)
#667 := (not #701)
#609 := (or #667 #668)
#574 := (not #401)
#684 := (<= #10 0::Int)
#616 := (not #684)
#646 := (or #616 #65)
#647 := [th-lemma arith farkas 1 1]: #646
#603 := [unit-resolution #647 #76]: #616
#604 := (or #574 #684)
#605 := [th-lemma arith triangle-eq]: #604
#608 := [unit-resolution #605 #603]: #574
#671 := (or #667 #668 #401)
#556 := [def-axiom]: #671
#610 := [unit-resolution #556 #608]: #609
#611 := [unit-resolution #610 #614]: #668
#571 := (or #667 #733 #421)
#573 := [def-axiom]: #571
#606 := [unit-resolution #573 #611 #614]: #421
#675 := (not #421)
#677 := (or #675 #688 #415)
#678 := [def-axiom]: #677
#585 := [unit-resolution #678 #606]: #612
#586 := [unit-resolution #585 #613]: #688
#686 := (or #725 #412)
#680 := [def-axiom]: #686
#587 := [unit-resolution #680 #586]: #412
#681 := (or #725 #732)
#687 := [def-axiom]: #681
#480 := [unit-resolution #687 #586]: #732
#591 := (or #733 #378 #721)
#592 := [th-lemma arith triangle-eq]: #591
#593 := [unit-resolution #592 #611]: #364
[unit-resolution #593 #480 #587]: false
unsat
8e1905429e143174e0fcdce59027187ea0e3224c 340 0
#2 := false
#9 := 3::Int
decl f3 :: (-> Int Int Int)
decl f4 :: Int
#8 := f4
#10 := (f3 f4 3::Int)
#439 := (mod #10 3::Int)
#655 := (>= #439 3::Int)
#656 := (not #655)
#1 := true
#62 := [true-axiom]: true
#645 := (or false #656)
#640 := [th-lemma arith]: #645
#646 := [unit-resolution #640 #62]: #656
#18 := 0::Int
#107 := -1::Int
#434 := (* -1::Int #10)
#598 := (+ f4 #434)
#599 := (<= #598 0::Int)
#65 := (= f4 #10)
#82 := (>= f4 3::Int)
#80 := (not #82)
#71 := (not #65)
#87 := (or #71 #80)
#92 := (not #87)
#12 := (< f4 3::Int)
#11 := (= #10 f4)
#13 := (implies #11 #12)
#14 := (not #13)
#95 := (iff #14 #92)
#72 := (or #12 #71)
#77 := (not #72)
#93 := (iff #77 #92)
#90 := (iff #72 #87)
#84 := (or #80 #71)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #72 #84)
#81 := (iff #12 #80)
#83 := [rewrite]: #81
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [monotonicity #91]: #93
#78 := (iff #14 #77)
#75 := (iff #13 #72)
#68 := (implies #65 #12)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #13 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [trans #70 #74]: #75
#79 := [monotonicity #76]: #78
#96 := [trans #79 #94]: #95
#64 := [asserted]: #14
#97 := [mp #64 #96]: #92
#98 := [not-or-elim #97]: #65
#632 := (or #71 #599)
#628 := [th-lemma arith triangle-eq]: #632
#629 := [unit-resolution #628 #98]: #599
#99 := [not-or-elim #97]: #82
#436 := (f3 #10 3::Int)
#600 := (* -1::Int #436)
#601 := (+ #10 #600)
#602 := (<= #601 0::Int)
#761 := (= #10 #436)
#633 := (= #436 #10)
#630 := [symm #98]: #11
#634 := [monotonicity #630]: #633
#635 := [symm #634]: #761
#636 := (not #761)
#631 := (or #636 #602)
#637 := [th-lemma arith triangle-eq]: #631
#610 := [unit-resolution #637 #635]: #602
#367 := (* -1::Int #439)
#440 := (+ #436 #367)
#705 := (<= #440 0::Int)
#437 := (= #440 0::Int)
#736 := -3::Int
#460 := (mod #434 -3::Int)
#355 := (+ #436 #460)
#455 := (= #355 0::Int)
#441 := (>= #10 0::Int)
#748 := (not #441)
#414 := (<= #10 0::Int)
#404 := (not #414)
#749 := (or #404 #748)
#734 := (ite #749 #437 #455)
#758 := (= #436 0::Int)
#759 := (= #10 0::Int)
#445 := (ite #759 #758 #734)
#16 := (:var 0 Int)
#15 := (:var 1 Int)
#36 := (f3 #15 #16)
#770 := (pattern #36)
#111 := (* -1::Int #16)
#108 := (* -1::Int #15)
#166 := (mod #108 #111)
#281 := (+ #36 #166)
#282 := (= #281 0::Int)
#37 := (mod #15 #16)
#278 := (* -1::Int #37)
#279 := (+ #36 #278)
#280 := (= #279 0::Int)
#140 := (>= #15 0::Int)
#133 := (<= #16 0::Int)
#225 := (or #133 #140)
#226 := (not #225)
#129 := (<= #15 0::Int)
#211 := (or #129 #133)
#212 := (not #211)
#229 := (or #212 #226)
#283 := (ite #229 #280 #282)
#277 := (= #36 0::Int)
#19 := (= #15 0::Int)
#284 := (ite #19 #277 #283)
#276 := (= #15 #36)
#20 := (= #16 0::Int)
#285 := (ite #20 #276 #284)
#771 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #770) #285)
#288 := (forall (vars (?v0 Int) (?v1 Int)) #285)
#774 := (iff #288 #771)
#772 := (iff #285 #285)
#773 := [refl]: #772
#775 := [quant-intro #773]: #774
#172 := (* -1::Int #166)
#245 := (ite #229 #37 #172)
#248 := (ite #19 0::Int #245)
#251 := (ite #20 #15 #248)
#254 := (= #36 #251)
#257 := (forall (vars (?v0 Int) (?v1 Int)) #254)
#289 := (iff #257 #288)
#286 := (iff #254 #285)
#287 := [rewrite]: #286
#290 := [quant-intro #287]: #289
#141 := (not #140)
#134 := (not #133)
#144 := (and #134 #141)
#130 := (not #129)
#137 := (and #130 #134)
#147 := (or #137 #144)
#192 := (ite #147 #37 #172)
#195 := (ite #19 0::Int #192)
#198 := (ite #20 #15 #195)
#201 := (= #36 #198)
#204 := (forall (vars (?v0 Int) (?v1 Int)) #201)
#258 := (iff #204 #257)
#255 := (iff #201 #254)
#252 := (= #198 #251)
#249 := (= #195 #248)
#246 := (= #192 #245)
#230 := (iff #147 #229)
#227 := (iff #144 #226)
#228 := [rewrite]: #227
#219 := (iff #137 #212)
#220 := [rewrite]: #219
#231 := [monotonicity #220 #228]: #230
#247 := [monotonicity #231]: #246
#250 := [monotonicity #247]: #249
#253 := [monotonicity #250]: #252
#256 := [monotonicity #253]: #255
#259 := [quant-intro #256]: #258
#217 := (~ #204 #204)
#216 := (~ #201 #201)
#213 := [refl]: #216
#218 := [nnf-pos #213]: #217
#30 := (- #16)
#29 := (- #15)
#38 := (mod #29 #30)
#39 := (- #38)
#23 := (< 0::Int #16)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#40 := (ite #27 #37 #39)
#41 := (ite #19 0::Int #40)
#42 := (ite #20 #15 #41)
#43 := (= #36 #42)
#44 := (forall (vars (?v0 Int) (?v1 Int)) #43)
#207 := (iff #44 #204)
#101 := (and #23 #25)
#104 := (or #24 #101)
#177 := (ite #104 #37 #172)
#180 := (ite #19 0::Int #177)
#183 := (ite #20 #15 #180)
#186 := (= #36 #183)
#189 := (forall (vars (?v0 Int) (?v1 Int)) #186)
#205 := (iff #189 #204)
#202 := (iff #186 #201)
#199 := (= #183 #198)
#196 := (= #180 #195)
#193 := (= #177 #192)
#148 := (iff #104 #147)
#145 := (iff #101 #144)
#142 := (iff #25 #141)
#143 := [rewrite]: #142
#135 := (iff #23 #134)
#136 := [rewrite]: #135
#146 := [monotonicity #136 #143]: #145
#138 := (iff #24 #137)
#131 := (iff #22 #130)
#132 := [rewrite]: #131
#139 := [monotonicity #132 #136]: #138
#149 := [monotonicity #139 #146]: #148
#194 := [monotonicity #149]: #193
#197 := [monotonicity #194]: #196
#200 := [monotonicity #197]: #199
#203 := [monotonicity #200]: #202
#206 := [quant-intro #203]: #205
#190 := (iff #44 #189)
#187 := (iff #43 #186)
#184 := (= #42 #183)
#181 := (= #41 #180)
#178 := (= #40 #177)
#175 := (= #39 #172)
#169 := (- #166)
#173 := (= #169 #172)
#174 := [rewrite]: #173
#170 := (= #39 #169)
#167 := (= #38 #166)
#112 := (= #30 #111)
#113 := [rewrite]: #112
#109 := (= #29 #108)
#110 := [rewrite]: #109
#168 := [monotonicity #110 #113]: #167
#171 := [monotonicity #168]: #170
#176 := [trans #171 #174]: #175
#105 := (iff #27 #104)
#102 := (iff #26 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#179 := [monotonicity #106 #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185]: #187
#191 := [quant-intro #188]: #190
#208 := [trans #191 #206]: #207
#165 := [asserted]: #44
#209 := [mp #165 #208]: #204
#214 := [mp~ #209 #218]: #204
#260 := [mp #214 #259]: #257
#291 := [mp #260 #290]: #288
#776 := [mp #291 #775]: #771
#729 := (not #771)
#718 := (or #729 #445)
#349 := (* -1::Int 3::Int)
#435 := (mod #434 #349)
#427 := (+ #436 #435)
#438 := (= #427 0::Int)
#420 := (<= 3::Int 0::Int)
#755 := (or #420 #441)
#757 := (not #755)
#544 := (or #414 #420)
#751 := (not #544)
#425 := (or #751 #757)
#426 := (ite #425 #437 #438)
#760 := (ite #759 #758 #426)
#756 := (= 3::Int 0::Int)
#762 := (ite #756 #761 #760)
#719 := (or #729 #762)
#715 := (iff #719 #718)
#721 := (iff #718 #718)
#722 := [rewrite]: #721
#728 := (iff #762 #445)
#448 := (ite false #761 #445)
#442 := (iff #448 #445)
#724 := [rewrite]: #442
#726 := (iff #762 #448)
#446 := (iff #760 #445)
#731 := (iff #426 #734)
#456 := (iff #438 #455)
#732 := (= #427 #355)
#461 := (= #435 #460)
#737 := (= #349 -3::Int)
#459 := [rewrite]: #737
#462 := [monotonicity #459]: #461
#733 := [monotonicity #462]: #732
#730 := [monotonicity #733]: #456
#747 := (iff #425 #749)
#388 := (iff #757 #748)
#383 := (iff #755 #441)
#742 := (or false #441)
#739 := (iff #742 #441)
#745 := [rewrite]: #739
#743 := (iff #755 #742)
#417 := (iff #420 false)
#753 := [rewrite]: #417
#744 := [monotonicity #753]: #743
#746 := [trans #744 #745]: #383
#389 := [monotonicity #746]: #388
#740 := (iff #751 #404)
#402 := (iff #544 #414)
#413 := (or #414 false)
#738 := (iff #413 #414)
#401 := [rewrite]: #738
#754 := (iff #544 #413)
#397 := [monotonicity #753]: #754
#403 := [trans #397 #401]: #402
#741 := [monotonicity #403]: #740
#750 := [monotonicity #741 #389]: #747
#735 := [monotonicity #750 #730]: #731
#447 := [monotonicity #735]: #446
#752 := (iff #756 false)
#412 := [rewrite]: #752
#727 := [monotonicity #412 #447]: #726
#725 := [trans #727 #724]: #728
#716 := [monotonicity #725]: #715
#717 := [trans #716 #722]: #715
#720 := [quant-inst #10 #9]: #719
#723 := [mp #720 #717]: #718
#611 := [unit-resolution #723 #776]: #445
#587 := (not #759)
#612 := (not #599)
#505 := (or #404 #80 #612)
#616 := [th-lemma arith assign-bounds 1 1]: #505
#617 := [unit-resolution #616 #99 #629]: #404
#618 := (or #587 #414)
#623 := [th-lemma arith triangle-eq]: #618
#619 := [unit-resolution #623 #617]: #587
#586 := (not #445)
#695 := (or #586 #759 #734)
#597 := [def-axiom]: #695
#620 := [unit-resolution #597 #619 #611]: #734
#564 := (or #749 #414)
#565 := [def-axiom]: #564
#621 := [unit-resolution #565 #617]: #749
#709 := (not #749)
#707 := (not #734)
#714 := (or #707 #709 #437)
#543 := [def-axiom]: #714
#624 := [unit-resolution #543 #621 #620]: #437
#699 := (not #437)
#625 := (or #699 #705)
#626 := [th-lemma arith triangle-eq]: #625
#622 := [unit-resolution #626 #624]: #705
[th-lemma arith farkas 1 1 -1 1 1 #622 #610 #99 #629 #646]: false
unsat
554a2c1ef3c9bdd0bc388bdfa3186ab7a764500e 567 0
#2 := false
#19 := 0::Int
decl f5 :: (-> Int Int Int)
#9 := 1::Int
decl f3 :: Int
#8 := f3
#12 := (f5 f3 1::Int)
#77 := -1::Int
#79 := (* -1::Int #12)
decl f4 :: (-> Int Int Int)
#10 := (f4 f3 1::Int)
#78 := (* -1::Int #10)
#80 := (+ #78 #79)
#81 := (+ f3 #80)
#423 := (>= #81 0::Int)
#596 := (<= #12 0::Int)
#667 := (= #12 0::Int)
#751 := (= f3 0::Int)
#746 := (>= f3 0::Int)
#449 := (not #746)
#414 := (<= f3 0::Int)
#735 := (not #414)
#635 := (or #735 #449 #751)
#615 := (not #635)
#582 := [hypothesis]: #615
#609 := (or #635 #746)
#610 := [def-axiom]: #609
#583 := [unit-resolution #610 #582]: #746
#612 := (or #635 #414)
#608 := [def-axiom]: #612
#584 := [unit-resolution #608 #582]: #414
#570 := (not #751)
#613 := (or #635 #570)
#614 := [def-axiom]: #613
#594 := [unit-resolution #614 #582]: #570
#574 := (or #751 #735 #449)
#595 := [th-lemma arith triangle-eq]: #574
#550 := [unit-resolution #595 #594 #584 #583]: false
#551 := [lemma #550]: #635
#498 := (or #615 #667)
#425 := (* -1::Int f3)
#688 := (mod #425 -1::Int)
#655 := (+ #12 #688)
#636 := (= #655 0::Int)
#618 := (ite #635 #667 #636)
#17 := (:var 0 Int)
#16 := (:var 1 Int)
#37 := (f5 #16 #17)
#759 := (pattern #37)
#101 := (* -1::Int #17)
#98 := (* -1::Int #16)
#156 := (mod #98 #101)
#271 := (+ #37 #156)
#272 := (= #271 0::Int)
#38 := (mod #16 #17)
#268 := (* -1::Int #38)
#269 := (+ #37 #268)
#270 := (= #269 0::Int)
#130 := (>= #16 0::Int)
#123 := (<= #17 0::Int)
#215 := (or #123 #130)
#216 := (not #215)
#119 := (<= #16 0::Int)
#213 := (or #119 #123)
#214 := (not #213)
#219 := (or #214 #216)
#273 := (ite #219 #270 #272)
#267 := (= #37 0::Int)
#20 := (= #16 0::Int)
#274 := (ite #20 #267 #273)
#266 := (= #16 #37)
#21 := (= #17 0::Int)
#275 := (ite #21 #266 #274)
#760 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #759) #275)
#278 := (forall (vars (?v0 Int) (?v1 Int)) #275)
#763 := (iff #278 #760)
#761 := (iff #275 #275)
#762 := [refl]: #761
#764 := [quant-intro #762]: #763
#162 := (* -1::Int #156)
#235 := (ite #219 #38 #162)
#238 := (ite #20 0::Int #235)
#241 := (ite #21 #16 #238)
#244 := (= #37 #241)
#247 := (forall (vars (?v0 Int) (?v1 Int)) #244)
#279 := (iff #247 #278)
#276 := (iff #244 #275)
#277 := [rewrite]: #276
#280 := [quant-intro #277]: #279
#131 := (not #130)
#124 := (not #123)
#134 := (and #124 #131)
#120 := (not #119)
#127 := (and #120 #124)
#137 := (or #127 #134)
#182 := (ite #137 #38 #162)
#185 := (ite #20 0::Int #182)
#188 := (ite #21 #16 #185)
#191 := (= #37 #188)
#194 := (forall (vars (?v0 Int) (?v1 Int)) #191)
#248 := (iff #194 #247)
#245 := (iff #191 #244)
#242 := (= #188 #241)
#239 := (= #185 #238)
#236 := (= #182 #235)
#220 := (iff #137 #219)
#217 := (iff #134 #216)
#218 := [rewrite]: #217
#207 := (iff #127 #214)
#208 := [rewrite]: #207
#221 := [monotonicity #208 #218]: #220
#237 := [monotonicity #221]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#205 := (~ #194 #194)
#204 := (~ #191 #191)
#201 := [refl]: #204
#206 := [nnf-pos #201]: #205
#31 := (- #17)
#30 := (- #16)
#39 := (mod #30 #31)
#40 := (- #39)
#24 := (< 0::Int #17)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#41 := (ite #28 #38 #40)
#42 := (ite #20 0::Int #41)
#43 := (ite #21 #16 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#197 := (iff #45 #194)
#92 := (and #24 #26)
#95 := (or #25 #92)
#167 := (ite #95 #38 #162)
#170 := (ite #20 0::Int #167)
#173 := (ite #21 #16 #170)
#176 := (= #37 #173)
#179 := (forall (vars (?v0 Int) (?v1 Int)) #176)
#195 := (iff #179 #194)
#192 := (iff #176 #191)
#189 := (= #173 #188)
#186 := (= #170 #185)
#183 := (= #167 #182)
#138 := (iff #95 #137)
#135 := (iff #92 #134)
#132 := (iff #26 #131)
#133 := [rewrite]: #132
#125 := (iff #24 #124)
#126 := [rewrite]: #125
#136 := [monotonicity #126 #133]: #135
#128 := (iff #25 #127)
#121 := (iff #23 #120)
#122 := [rewrite]: #121
#129 := [monotonicity #122 #126]: #128
#139 := [monotonicity #129 #136]: #138
#184 := [monotonicity #139]: #183
#187 := [monotonicity #184]: #186
#190 := [monotonicity #187]: #189
#193 := [monotonicity #190]: #192
#196 := [quant-intro #193]: #195
#180 := (iff #45 #179)
#177 := (iff #44 #176)
#174 := (= #43 #173)
#171 := (= #42 #170)
#168 := (= #41 #167)
#165 := (= #40 #162)
#159 := (- #156)
#163 := (= #159 #162)
#164 := [rewrite]: #163
#160 := (= #40 #159)
#157 := (= #39 #156)
#102 := (= #31 #101)
#103 := [rewrite]: #102
#99 := (= #30 #98)
#100 := [rewrite]: #99
#158 := [monotonicity #100 #103]: #157
#161 := [monotonicity #158]: #160
#166 := [trans #161 #164]: #165
#96 := (iff #28 #95)
#93 := (iff #27 #92)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#169 := [monotonicity #97 #166]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [quant-intro #178]: #180
#198 := [trans #181 #196]: #197
#155 := [asserted]: #45
#199 := [mp #155 #198]: #194
#202 := [mp~ #199 #206]: #194
#250 := [mp #202 #249]: #247
#281 := [mp #250 #280]: #278
#765 := [mp #281 #764]: #760
#625 := (not #760)
#620 := (or #625 #618)
#424 := (* -1::Int 1::Int)
#686 := (mod #425 #424)
#683 := (+ #12 #686)
#687 := (= #683 0::Int)
#532 := (mod f3 1::Int)
#674 := (* -1::Int #532)
#676 := (+ #12 #674)
#668 := (= #676 0::Int)
#403 := (<= 1::Int 0::Int)
#533 := (or #403 #746)
#740 := (not #533)
#415 := (or #414 #403)
#747 := (not #415)
#748 := (or #747 #740)
#665 := (ite #748 #668 #687)
#677 := (ite #751 #667 #665)
#678 := (= f3 #12)
#745 := (= 1::Int 0::Int)
#679 := (ite #745 #678 #677)
#626 := (or #625 #679)
#600 := (iff #626 #620)
#494 := (iff #620 #620)
#605 := [rewrite]: #494
#623 := (iff #679 #618)
#345 := (or #735 #449)
#646 := (or #345 #751)
#647 := (ite #646 #667 #636)
#619 := (iff #647 #618)
#621 := (iff #646 #635)
#617 := [rewrite]: #621
#622 := [monotonicity #617]: #619
#634 := (iff #679 #647)
#628 := (ite false #678 #647)
#632 := (iff #628 #647)
#633 := [rewrite]: #632
#630 := (iff #679 #628)
#649 := (iff #677 #647)
#640 := (ite #345 #667 #636)
#643 := (ite #751 #667 #640)
#648 := (iff #643 #647)
#638 := [rewrite]: #648
#644 := (iff #677 #643)
#641 := (iff #665 #640)
#637 := (iff #687 #636)
#652 := (= #683 #655)
#653 := (= #686 #688)
#444 := (= #424 -1::Int)
#445 := [rewrite]: #444
#654 := [monotonicity #445]: #653
#656 := [monotonicity #654]: #652
#639 := [monotonicity #656]: #637
#650 := (iff #668 #667)
#659 := (= #676 #12)
#658 := (+ #12 0::Int)
#662 := (= #658 #12)
#663 := [rewrite]: #662
#660 := (= #676 #658)
#673 := (= #674 0::Int)
#669 := (* -1::Int 0::Int)
#672 := (= #669 0::Int)
#666 := [rewrite]: #672
#670 := (= #674 #669)
#675 := (= #532 0::Int)
#680 := [rewrite]: #675
#671 := [monotonicity #680]: #670
#657 := [trans #671 #666]: #673
#661 := [monotonicity #657]: #660
#664 := [trans #661 #663]: #659
#651 := [monotonicity #664]: #650
#721 := (iff #748 #345)
#450 := (iff #740 #449)
#726 := (iff #533 #746)
#378 := (or false #746)
#739 := (iff #378 #746)
#725 := [rewrite]: #739
#738 := (iff #533 #378)
#393 := (iff #403 false)
#729 := [rewrite]: #393
#736 := [monotonicity #729]: #738
#448 := [trans #736 #725]: #726
#451 := [monotonicity #448]: #450
#737 := (iff #747 #735)
#734 := (iff #415 #414)
#730 := (or #414 false)
#733 := (iff #730 #414)
#728 := [rewrite]: #733
#731 := (iff #415 #730)
#732 := [monotonicity #729]: #731
#372 := [trans #732 #728]: #734
#377 := [monotonicity #372]: #737
#722 := [monotonicity #377 #451]: #721
#642 := [monotonicity #722 #651 #639]: #641
#645 := [monotonicity #642]: #644
#627 := [trans #645 #638]: #649
#406 := (iff #745 false)
#742 := [rewrite]: #406
#631 := [monotonicity #742 #627]: #630
#629 := [trans #631 #633]: #634
#624 := [trans #629 #622]: #623
#601 := [monotonicity #624]: #600
#606 := [trans #601 #605]: #600
#599 := [quant-inst #8 #9]: #626
#607 := [mp #599 #606]: #620
#505 := [unit-resolution #607 #765]: #618
#602 := (not #618)
#603 := (or #602 #615 #667)
#598 := [def-axiom]: #603
#501 := [unit-resolution #598 #505]: #498
#502 := [unit-resolution #501 #551]: #667
#579 := (not #667)
#488 := (or #579 #596)
#490 := [th-lemma arith triangle-eq]: #488
#491 := [unit-resolution #490 #502]: #596
#698 := (<= #10 0::Int)
#750 := (= #10 0::Int)
#453 := [hypothesis]: #570
#702 := (not #345)
#426 := (div f3 1::Int)
#430 := (* -1::Int #426)
#409 := (+ #10 #430)
#744 := (= #409 0::Int)
#577 := (not #744)
#544 := (+ f3 #430)
#549 := (>= #544 0::Int)
#543 := (= #544 0::Int)
#1 := true
#63 := [true-axiom]: true
#493 := (or false #543)
#495 := [th-lemma arith]: #493
#496 := [unit-resolution #495 #63]: #543
#499 := (not #543)
#500 := (or #499 #549)
#504 := [th-lemma arith triangle-eq]: #500
#497 := [unit-resolution #504 #496]: #549
#534 := (<= #409 0::Int)
#489 := [hypothesis]: #744
#492 := (or #577 #534)
#474 := [th-lemma arith triangle-eq]: #492
#476 := [unit-resolution #474 #489]: #534
#479 := (not #549)
#478 := (not #534)
#477 := (not #596)
#480 := (or #423 #477 #478 #479)
#481 := [th-lemma arith assign-bounds 1 1 -1]: #480
#482 := [unit-resolution #481 #476 #491 #497]: #423
#339 := (<= #81 0::Int)
#531 := (<= #544 0::Int)
#483 := (or #499 #531)
#484 := [th-lemma arith triangle-eq]: #483
#485 := [unit-resolution #484 #496]: #531
#542 := (>= #12 0::Int)
#486 := (or #579 #542)
#475 := [th-lemma arith triangle-eq]: #486
#487 := [unit-resolution #475 #502]: #542
#535 := (>= #409 0::Int)
#464 := (or #577 #535)
#466 := [th-lemma arith triangle-eq]: #464
#467 := [unit-resolution #466 #489]: #535
#470 := (not #531)
#469 := (not #535)
#468 := (not #542)
#471 := (or #339 #468 #469 #470)
#472 := [th-lemma arith assign-bounds 1 1 -1]: #471
#465 := [unit-resolution #472 #467 #487 #485]: #339
#458 := (not #423)
#473 := (not #339)
#462 := (or #473 #458)
#82 := (= #81 0::Int)
#85 := (not #82)
#11 := (* #10 1::Int)
#13 := (+ #11 #12)
#14 := (= f3 #13)
#15 := (not #14)
#88 := (iff #15 #85)
#68 := (+ #10 #12)
#71 := (= f3 #68)
#74 := (not #71)
#86 := (iff #74 #85)
#83 := (iff #71 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#75 := (iff #15 #74)
#72 := (iff #14 #71)
#69 := (= #13 #68)
#66 := (= #11 #10)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#89 := [trans #76 #87]: #88
#65 := [asserted]: #15
#90 := [mp #65 #89]: #85
#459 := (or #82 #473 #458)
#460 := [th-lemma arith triangle-eq]: #459
#461 := [unit-resolution #460 #90]: #462
#463 := [unit-resolution #461 #465 #482]: false
#452 := [lemma #463]: #577
#719 := (div #425 -1::Int)
#724 := (* -1::Int #719)
#436 := (+ #10 #724)
#716 := (= #436 0::Int)
#717 := (ite #345 #744 #716)
#446 := (or #751 #717)
#707 := (ite #751 #750 #717)
#18 := (f4 #16 #17)
#752 := (pattern #18)
#104 := (div #98 #101)
#255 := (* -1::Int #104)
#256 := (+ #18 #255)
#257 := (= #256 0::Int)
#29 := (div #16 #17)
#252 := (* -1::Int #29)
#253 := (+ #18 #252)
#254 := (= #253 0::Int)
#258 := (ite #219 #254 #257)
#251 := (= #18 0::Int)
#22 := (or #20 #21)
#259 := (ite #22 #251 #258)
#753 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #752) #259)
#262 := (forall (vars (?v0 Int) (?v1 Int)) #259)
#756 := (iff #262 #753)
#754 := (iff #259 #259)
#755 := [refl]: #754
#757 := [quant-intro #755]: #756
#222 := (ite #219 #29 #104)
#225 := (ite #22 0::Int #222)
#228 := (= #18 #225)
#231 := (forall (vars (?v0 Int) (?v1 Int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#140 := (ite #137 #29 #104)
#143 := (ite #22 0::Int #140)
#146 := (= #18 #143)
#149 := (forall (vars (?v0 Int) (?v1 Int)) #146)
#232 := (iff #149 #231)
#229 := (iff #146 #228)
#226 := (= #143 #225)
#223 := (= #140 #222)
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#211 := (~ #149 #149)
#209 := (~ #146 #146)
#210 := [refl]: #209
#212 := [nnf-pos #210]: #211
#32 := (div #30 #31)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#152 := (iff #36 #149)
#107 := (ite #95 #29 #104)
#110 := (ite #22 0::Int #107)
#113 := (= #18 #110)
#116 := (forall (vars (?v0 Int) (?v1 Int)) #113)
#150 := (iff #116 #149)
#147 := (iff #113 #146)
#144 := (= #110 #143)
#141 := (= #107 #140)
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#117 := (iff #36 #116)
#114 := (iff #35 #113)
#111 := (= #34 #110)
#108 := (= #33 #107)
#105 := (= #32 #104)
#106 := [monotonicity #100 #103]: #105
#109 := [monotonicity #97 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [quant-intro #115]: #117
#153 := [trans #118 #151]: #152
#91 := [asserted]: #36
#154 := [mp #91 #153]: #149
#203 := [mp~ #154 #212]: #149
#234 := [mp #203 #233]: #231
#265 := [mp #234 #264]: #262
#758 := [mp #265 #757]: #753
#704 := (not #753)
#705 := (or #704 #707)
#416 := (div #425 #424)
#427 := (* -1::Int #416)
#428 := (+ #10 #427)
#429 := (= #428 0::Int)
#749 := (ite #748 #744 #429)
#741 := (or #751 #745)
#401 := (ite #741 #750 #749)
#710 := (or #704 #401)
#706 := (iff #710 #705)
#553 := (iff #705 #705)
#554 := [rewrite]: #553
#708 := (iff #401 #707)
#714 := (iff #749 #717)
#431 := (iff #429 #716)
#437 := (= #428 #436)
#434 := (= #427 #724)
#723 := (= #416 #719)
#720 := [monotonicity #445]: #723
#435 := [monotonicity #720]: #434
#715 := [monotonicity #435]: #437
#713 := [monotonicity #715]: #431
#718 := [monotonicity #722 #713]: #714
#391 := (iff #741 #751)
#402 := (or #751 false)
#727 := (iff #402 #751)
#390 := [rewrite]: #727
#743 := (iff #741 #402)
#386 := [monotonicity #742]: #743
#392 := [trans #386 #390]: #391
#709 := [monotonicity #392 #718]: #708
#712 := [monotonicity #709]: #706
#555 := [trans #712 #554]: #706
#711 := [quant-inst #8 #9]: #710
#697 := [mp #711 #555]: #705
#454 := [unit-resolution #697 #758]: #707
#685 := (not #707)
#588 := (or #685 #751 #717)
#581 := [def-axiom]: #588
#455 := [unit-resolution #581 #454]: #446
#456 := [unit-resolution #455 #453]: #717
#692 := (not #717)
#690 := (or #692 #702 #744)
#693 := [def-axiom]: #690
#447 := [unit-resolution #693 #456 #452]: #702
#700 := (or #345 #414)
#694 := [def-axiom]: #700
#457 := [unit-resolution #694 #447]: #414
#695 := (or #345 #746)
#701 := [def-axiom]: #695
#438 := [unit-resolution #701 #447]: #746
#439 := [unit-resolution #595 #438 #457 #453]: false
#440 := [lemma #439]: #751
#432 := (or #570 #750)
#585 := (or #685 #570 #750)
#587 := [def-axiom]: #585
#441 := [unit-resolution #587 #454]: #432
#442 := [unit-resolution #441 #440]: #750
#589 := (not #750)
#433 := (or #589 #698)
#443 := [th-lemma arith triangle-eq]: #433
#410 := [unit-resolution #443 #442]: #698
#412 := (or #570 #746)
#413 := [th-lemma arith triangle-eq]: #412
#404 := [unit-resolution #413 #440]: #746
#417 := (not #698)
#418 := (or #423 #417 #477 #449)
#419 := [th-lemma arith assign-bounds 1 1 -1]: #418
#420 := [unit-resolution #419 #404 #410 #491]: #423
#699 := (>= #10 0::Int)
#421 := (or #589 #699)
#411 := [th-lemma arith triangle-eq]: #421
#422 := [unit-resolution #411 #442]: #699
#405 := (or #570 #414)
#407 := [th-lemma arith triangle-eq]: #405
#408 := [unit-resolution #407 #440]: #414
#387 := (not #699)
#389 := (or #339 #387 #468 #735)
#394 := [th-lemma arith assign-bounds 1 1 -1]: #389
#395 := [unit-resolution #394 #408 #422 #487]: #339
[unit-resolution #461 #395 #420]: false
unsat
b7566ab9692699d99b59e9354d5e78d5af5e3d40 544 0
#2 := false
#19 := 0::Int
decl f4 :: (-> Int Int Int)
#9 := 3::Int
decl f3 :: Int
#8 := f3
#10 := (f4 f3 3::Int)
#701 := (>= #10 0::Int)
#752 := (= #10 0::Int)
#748 := (= f3 0::Int)
#688 := (not #748)
#560 := [hypothesis]: #688
#743 := (<= f3 0::Int)
#747 := (>= f3 0::Int)
#451 := (not #747)
#375 := (not #743)
#454 := (or #375 #451)
#704 := (not #454)
#78 := -3::Int
#80 := -1::Int
#428 := (* -1::Int f3)
#448 := (div #428 -3::Int)
#723 := (* -1::Int #448)
#438 := (+ #10 #723)
#718 := (= #438 0::Int)
#432 := (div f3 3::Int)
#429 := (* -1::Int #432)
#433 := (+ #10 #429)
#412 := (= #433 0::Int)
#716 := (ite #454 #412 #718)
#562 := (or #748 #716)
#721 := (ite #748 #752 #716)
#17 := (:var 0 Int)
#16 := (:var 1 Int)
#18 := (f4 #16 #17)
#755 := (pattern #18)
#103 := (* -1::Int #17)
#100 := (* -1::Int #16)
#106 := (div #100 #103)
#257 := (* -1::Int #106)
#258 := (+ #18 #257)
#259 := (= #258 0::Int)
#29 := (div #16 #17)
#254 := (* -1::Int #29)
#255 := (+ #18 #254)
#256 := (= #255 0::Int)
#132 := (>= #16 0::Int)
#125 := (<= #17 0::Int)
#217 := (or #125 #132)
#218 := (not #217)
#121 := (<= #16 0::Int)
#215 := (or #121 #125)
#216 := (not #215)
#221 := (or #216 #218)
#260 := (ite #221 #256 #259)
#253 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #16 0::Int)
#22 := (or #20 #21)
#261 := (ite #22 #253 #260)
#756 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #755) #261)
#264 := (forall (vars (?v0 Int) (?v1 Int)) #261)
#759 := (iff #264 #756)
#757 := (iff #261 #261)
#758 := [refl]: #757
#760 := [quant-intro #758]: #759
#224 := (ite #221 #29 #106)
#227 := (ite #22 0::Int #224)
#230 := (= #18 #227)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#265 := (iff #233 #264)
#262 := (iff #230 #261)
#263 := [rewrite]: #262
#266 := [quant-intro #263]: #265
#133 := (not #132)
#126 := (not #125)
#136 := (and #126 #133)
#122 := (not #121)
#129 := (and #122 #126)
#139 := (or #129 #136)
#142 := (ite #139 #29 #106)
#145 := (ite #22 0::Int #142)
#148 := (= #18 #145)
#151 := (forall (vars (?v0 Int) (?v1 Int)) #148)
#234 := (iff #151 #233)
#231 := (iff #148 #230)
#228 := (= #145 #227)
#225 := (= #142 #224)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#220 := [rewrite]: #219
#209 := (iff #129 #216)
#210 := [rewrite]: #209
#223 := [monotonicity #210 #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#213 := (~ #151 #151)
#211 := (~ #148 #148)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#31 := (- #17)
#30 := (- #16)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#154 := (iff #36 #151)
#94 := (and #24 #26)
#97 := (or #25 #94)
#109 := (ite #97 #29 #106)
#112 := (ite #22 0::Int #109)
#115 := (= #18 #112)
#118 := (forall (vars (?v0 Int) (?v1 Int)) #115)
#152 := (iff #118 #151)
#149 := (iff #115 #148)
#146 := (= #112 #145)
#143 := (= #109 #142)
#140 := (iff #97 #139)
#137 := (iff #94 #136)
#134 := (iff #26 #133)
#135 := [rewrite]: #134
#127 := (iff #24 #126)
#128 := [rewrite]: #127
#138 := [monotonicity #128 #135]: #137
#130 := (iff #25 #129)
#123 := (iff #23 #122)
#124 := [rewrite]: #123
#131 := [monotonicity #124 #128]: #130
#141 := [monotonicity #131 #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#119 := (iff #36 #118)
#116 := (iff #35 #115)
#113 := (= #34 #112)
#110 := (= #33 #109)
#107 := (= #32 #106)
#104 := (= #31 #103)
#105 := [rewrite]: #104
#101 := (= #30 #100)
#102 := [rewrite]: #101
#108 := [monotonicity #102 #105]: #107
#98 := (iff #28 #97)
#95 := (iff #27 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#111 := [monotonicity #99 #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [quant-intro #117]: #119
#155 := [trans #120 #153]: #154
#93 := [asserted]: #36
#156 := [mp #93 #155]: #151
#205 := [mp~ #156 #214]: #151
#236 := [mp #205 #235]: #233
#267 := [mp #236 #266]: #264
#761 := [mp #267 #760]: #756
#712 := (not #756)
#707 := (or #712 #721)
#427 := (* -1::Int 3::Int)
#419 := (div #428 #427)
#430 := (* -1::Int #419)
#431 := (+ #10 #430)
#359 := (= #431 0::Int)
#749 := (<= 3::Int 0::Int)
#406 := (or #749 #747)
#536 := (not #406)
#417 := (or #743 #749)
#418 := (not #417)
#750 := (or #418 #536)
#751 := (ite #750 #412 #359)
#753 := (= 3::Int 0::Int)
#754 := (or #748 #753)
#744 := (ite #754 #752 #751)
#708 := (or #712 #744)
#714 := (iff #708 #707)
#715 := (iff #707 #707)
#556 := [rewrite]: #715
#710 := (iff #744 #721)
#720 := (iff #751 #716)
#719 := (iff #359 #718)
#439 := (= #431 #438)
#727 := (= #430 #723)
#722 := (= #419 #448)
#725 := (= #427 -3::Int)
#447 := [rewrite]: #725
#726 := [monotonicity #447]: #722
#437 := [monotonicity #726]: #727
#440 := [monotonicity #437]: #439
#434 := [monotonicity #440]: #719
#347 := (iff #750 #454)
#452 := (iff #536 #451)
#728 := (iff #406 #747)
#380 := (or false #747)
#739 := (iff #380 #747)
#742 := [rewrite]: #739
#381 := (iff #406 #380)
#395 := (iff #749 false)
#396 := [rewrite]: #395
#741 := [monotonicity #396]: #381
#729 := [trans #741 #742]: #728
#453 := [monotonicity #729]: #452
#738 := (iff #418 #375)
#731 := (iff #417 #743)
#732 := (or #743 false)
#735 := (iff #732 #743)
#736 := [rewrite]: #735
#733 := (iff #417 #732)
#734 := [monotonicity #396]: #733
#737 := [trans #734 #736]: #731
#740 := [monotonicity #737]: #738
#724 := [monotonicity #740 #453]: #347
#717 := [monotonicity #724 #434]: #720
#393 := (iff #754 #748)
#745 := (or #748 false)
#389 := (iff #745 #748)
#730 := [rewrite]: #389
#405 := (iff #754 #745)
#404 := (iff #753 false)
#409 := [rewrite]: #404
#746 := [monotonicity #409]: #405
#394 := [trans #746 #730]: #393
#711 := [monotonicity #394 #717]: #710
#709 := [monotonicity #711]: #714
#557 := [trans #709 #556]: #714
#713 := [quant-inst #8 #9]: #708
#558 := [mp #713 #557]: #707
#561 := [unit-resolution #558 #761]: #721
#685 := (not #721)
#590 := (or #685 #748 #716)
#591 := [def-axiom]: #590
#563 := [unit-resolution #591 #561]: #562
#564 := [unit-resolution #563 #560]: #716
#538 := (mod #428 -3::Int)
decl f5 :: (-> Int Int Int)
#12 := (f5 f3 3::Int)
#683 := (+ #12 #538)
#674 := (= #683 0::Int)
#706 := (mod f3 3::Int)
#690 := (* -1::Int #706)
#677 := (+ #12 #690)
#679 := (= #677 0::Int)
#676 := (ite #454 #679 #674)
#523 := (or #748 #676)
#668 := (= #12 0::Int)
#663 := (ite #748 #668 #676)
#37 := (f5 #16 #17)
#762 := (pattern #37)
#158 := (mod #100 #103)
#273 := (+ #37 #158)
#274 := (= #273 0::Int)
#38 := (mod #16 #17)
#270 := (* -1::Int #38)
#271 := (+ #37 #270)
#272 := (= #271 0::Int)
#275 := (ite #221 #272 #274)
#269 := (= #37 0::Int)
#276 := (ite #20 #269 #275)
#268 := (= #16 #37)
#277 := (ite #21 #268 #276)
#763 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #762) #277)
#280 := (forall (vars (?v0 Int) (?v1 Int)) #277)
#766 := (iff #280 #763)
#764 := (iff #277 #277)
#765 := [refl]: #764
#767 := [quant-intro #765]: #766
#164 := (* -1::Int #158)
#237 := (ite #221 #38 #164)
#240 := (ite #20 0::Int #237)
#243 := (ite #21 #16 #240)
#246 := (= #37 #243)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#281 := (iff #249 #280)
#278 := (iff #246 #277)
#279 := [rewrite]: #278
#282 := [quant-intro #279]: #281
#184 := (ite #139 #38 #164)
#187 := (ite #20 0::Int #184)
#190 := (ite #21 #16 #187)
#193 := (= #37 #190)
#196 := (forall (vars (?v0 Int) (?v1 Int)) #193)
#250 := (iff #196 #249)
#247 := (iff #193 #246)
#244 := (= #190 #243)
#241 := (= #187 #240)
#238 := (= #184 #237)
#239 := [monotonicity #223]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [monotonicity #245]: #247
#251 := [quant-intro #248]: #250
#207 := (~ #196 #196)
#206 := (~ #193 #193)
#203 := [refl]: #206
#208 := [nnf-pos #203]: #207
#39 := (mod #30 #31)
#40 := (- #39)
#41 := (ite #28 #38 #40)
#42 := (ite #20 0::Int #41)
#43 := (ite #21 #16 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#199 := (iff #45 #196)
#169 := (ite #97 #38 #164)
#172 := (ite #20 0::Int #169)
#175 := (ite #21 #16 #172)
#178 := (= #37 #175)
#181 := (forall (vars (?v0 Int) (?v1 Int)) #178)
#197 := (iff #181 #196)
#194 := (iff #178 #193)
#191 := (= #175 #190)
#188 := (= #172 #187)
#185 := (= #169 #184)
#186 := [monotonicity #141]: #185
#189 := [monotonicity #186]: #188
#192 := [monotonicity #189]: #191
#195 := [monotonicity #192]: #194
#198 := [quant-intro #195]: #197
#182 := (iff #45 #181)
#179 := (iff #44 #178)
#176 := (= #43 #175)
#173 := (= #42 #172)
#170 := (= #41 #169)
#167 := (= #40 #164)
#161 := (- #158)
#165 := (= #161 #164)
#166 := [rewrite]: #165
#162 := (= #40 #161)
#159 := (= #39 #158)
#160 := [monotonicity #102 #105]: #159
#163 := [monotonicity #160]: #162
#168 := [trans #163 #166]: #167
#171 := [monotonicity #99 #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#200 := [trans #183 #198]: #199
#157 := [asserted]: #45
#201 := [mp #157 #200]: #196
#204 := [mp~ #201 #208]: #196
#252 := [mp #204 #251]: #249
#283 := [mp #252 #282]: #280
#768 := [mp #283 #767]: #763
#658 := (not #763)
#655 := (or #658 #663)
#596 := (mod #428 #427)
#689 := (+ #12 #596)
#686 := (= #689 0::Int)
#671 := (ite #750 #679 #686)
#670 := (ite #748 #668 #671)
#680 := (= f3 #12)
#681 := (ite #753 #680 #670)
#659 := (or #658 #681)
#640 := (iff #659 #655)
#643 := (iff #655 #655)
#644 := [rewrite]: #643
#656 := (iff #681 #663)
#666 := (ite false #680 #663)
#653 := (iff #666 #663)
#654 := [rewrite]: #653
#662 := (iff #681 #666)
#664 := (iff #670 #663)
#660 := (iff #671 #676)
#675 := (iff #686 #674)
#672 := (= #689 #683)
#682 := (= #596 #538)
#678 := [monotonicity #447]: #682
#673 := [monotonicity #678]: #672
#669 := [monotonicity #673]: #675
#661 := [monotonicity #724 #669]: #660
#665 := [monotonicity #661]: #664
#667 := [monotonicity #409 #665]: #662
#657 := [trans #667 #654]: #656
#642 := [monotonicity #657]: #640
#645 := [trans #642 #644]: #640
#639 := [quant-inst #8 #9]: #659
#646 := [mp #639 #645]: #655
#619 := [unit-resolution #646 #768]: #663
#620 := (not #663)
#625 := (or #620 #748 #676)
#626 := [def-axiom]: #625
#524 := [unit-resolution #626 #619]: #523
#525 := [unit-resolution #524 #560]: #676
#694 := (not #716)
#652 := (not #676)
#489 := (or #704 #652 #694)
#650 := (>= #677 0::Int)
#565 := [hypothesis]: #676
#566 := [hypothesis]: #454
#630 := (or #652 #704 #679)
#631 := [def-axiom]: #630
#567 := [unit-resolution #631 #566 #565]: #679
#635 := (not #679)
#491 := (or #635 #650)
#493 := [th-lemma arith triangle-eq]: #491
#494 := [unit-resolution #493 #567]: #650
#537 := (>= #433 0::Int)
#547 := [hypothesis]: #716
#695 := (or #694 #704 #412)
#693 := [def-axiom]: #695
#548 := [unit-resolution #693 #566 #547]: #412
#579 := (not #412)
#492 := (or #579 #537)
#495 := [th-lemma arith triangle-eq]: #492
#477 := [unit-resolution #495 #548]: #537
#81 := (* -1::Int #12)
#79 := (* -3::Int #10)
#82 := (+ #79 #81)
#83 := (+ f3 #82)
#341 := (<= #83 0::Int)
#479 := (not #341)
#426 := (>= #83 0::Int)
#555 := (not #426)
#571 := [hypothesis]: #555
#531 := (or #748 #426)
#552 := (or #704 #426 #652 #694)
#649 := (<= #677 0::Int)
#568 := (or #635 #649)
#569 := [th-lemma arith triangle-eq]: #568
#570 := [unit-resolution #569 #567]: #649
#613 := (* -3::Int #432)
#616 := (+ #613 #690)
#617 := (+ f3 #616)
#599 := (>= #617 0::Int)
#612 := (= #617 0::Int)
#1 := true
#63 := [true-axiom]: true
#532 := (or false #612)
#533 := [th-lemma arith]: #532
#540 := [unit-resolution #533 #63]: #612
#542 := (not #612)
#543 := (or #542 #599)
#544 := [th-lemma arith triangle-eq]: #543
#546 := [unit-resolution #544 #540]: #599
#535 := (<= #433 0::Int)
#549 := (or #579 #535)
#550 := [th-lemma arith triangle-eq]: #549
#551 := [unit-resolution #550 #548]: #535
#534 := [th-lemma arith farkas 3 -1 1 1 #551 #546 #571 #570]: false
#522 := [lemma #534]: #552
#527 := [unit-resolution #522 #525 #571 #564]: #704
#702 := (or #454 #743)
#703 := [def-axiom]: #702
#528 := [unit-resolution #703 #527]: #743
#697 := (or #454 #747)
#698 := [def-axiom]: #697
#529 := [unit-resolution #698 #527]: #747
#372 := (or #748 #375 #451)
#530 := [th-lemma arith triangle-eq]: #372
#526 := [unit-resolution #530 #529 #528 #560]: false
#510 := [lemma #526]: #531
#513 := [unit-resolution #510 #571]: #748
#517 := (or #688 #747)
#519 := [th-lemma arith triangle-eq]: #517
#520 := [unit-resolution #519 #513]: #747
#647 := (<= #12 0::Int)
#518 := (or #688 #668)
#621 := (or #620 #688 #668)
#622 := [def-axiom]: #621
#521 := [unit-resolution #622 #619]: #518
#509 := [unit-resolution #521 #513]: #668
#627 := (not #668)
#512 := (or #627 #647)
#514 := [th-lemma arith triangle-eq]: #512
#515 := [unit-resolution #514 #509]: #647
#700 := (<= #10 0::Int)
#511 := (or #688 #752)
#573 := (or #685 #688 #752)
#588 := [def-axiom]: #573
#516 := [unit-resolution #588 #561]: #511
#506 := [unit-resolution #516 #513]: #752
#584 := (not #752)
#496 := (or #584 #700)
#498 := [th-lemma arith triangle-eq]: #496
#499 := [unit-resolution #498 #506]: #700
#502 := [th-lemma arith farkas -3 -1 -1 1 #499 #515 #571 #520]: false
#503 := [lemma #502]: #426
#482 := (or #479 #555)
#84 := (= #83 0::Int)
#87 := (not #84)
#11 := (* #10 3::Int)
#13 := (+ #11 #12)
#14 := (= f3 #13)
#15 := (not #14)
#90 := (iff #15 #87)
#66 := (* 3::Int #10)
#69 := (+ #66 #12)
#72 := (= f3 #69)
#75 := (not #72)
#88 := (iff #75 #87)
#85 := (iff #72 #84)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#76 := (iff #15 #75)
#73 := (iff #14 #72)
#70 := (= #13 #69)
#67 := (= #11 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#91 := [trans #77 #89]: #90
#65 := [asserted]: #15
#92 := [mp #65 #91]: #87
#480 := (or #84 #479 #555)
#481 := [th-lemma arith triangle-eq]: #480
#483 := [unit-resolution #481 #92]: #482
#484 := [unit-resolution #483 #503]: #479
#507 := (<= #617 0::Int)
#485 := (or #542 #507)
#486 := [th-lemma arith triangle-eq]: #485
#487 := [unit-resolution #486 #540]: #507
#488 := [th-lemma arith farkas -1 1 3 1 #487 #484 #477 #494]: false
#478 := [lemma #488]: #489
#500 := [unit-resolution #478 #525 #564]: #704
#508 := [unit-resolution #703 #500]: #743
#501 := [unit-resolution #698 #500]: #747
#504 := [unit-resolution #530 #501 #508 #560]: false
#505 := [lemma #504]: #748
#490 := [unit-resolution #516 #505]: #752
#467 := (or #584 #701)
#469 := [th-lemma arith triangle-eq]: #467
#470 := [unit-resolution #469 #490]: #701
#648 := (>= #12 0::Int)
#471 := [unit-resolution #521 #505]: #668
#472 := (or #627 #648)
#473 := [th-lemma arith triangle-eq]: #472
#474 := [unit-resolution #473 #471]: #648
#475 := (or #688 #743)
#468 := [th-lemma arith triangle-eq]: #475
#476 := [unit-resolution #468 #505]: #743
[th-lemma arith farkas -1/3 1/3 1/3 1 #476 #474 #484 #470]: false
unsat
cacbb4776a876130daed2cf13657b41ab1c7df25 75 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#35 := -1::Int
#36 := (* -1::Int f3)
#48 := (>= f3 0::Int)
#55 := (ite #48 f3 #36)
#75 := (* -1::Int #55)
#84 := (+ #36 #75)
#93 := (<= #84 0::Int)
#80 := (= #36 #55)
#49 := (not #48)
#76 := (+ f3 #75)
#83 := (<= #76 0::Int)
#79 := (= f3 #55)
#85 := [hypothesis]: #48
#81 := (or #49 #79)
#82 := [def-axiom]: #81
#86 := [unit-resolution #82 #85]: #79
#87 := (not #79)
#88 := (or #87 #83)
#89 := [th-lemma arith triangle-eq]: #88
#90 := [unit-resolution #89 #86]: #83
#64 := (>= #55 0::Int)
#68 := (not #64)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#13 := (<= 0::Int #12)
#14 := (not #13)
#71 := (iff #14 #68)
#39 := (ite #10 #36 f3)
#42 := (<= 0::Int #39)
#45 := (not #42)
#69 := (iff #45 #68)
#66 := (iff #42 #64)
#60 := (<= 0::Int #55)
#63 := (iff #60 #64)
#65 := [rewrite]: #63
#61 := (iff #42 #60)
#58 := (= #39 #55)
#52 := (ite #49 #36 f3)
#56 := (= #52 #55)
#57 := [rewrite]: #56
#53 := (= #39 #52)
#50 := (iff #10 #49)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#67 := [trans #62 #65]: #66
#70 := [monotonicity #67]: #69
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (= #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#72 := [trans #47 #70]: #71
#34 := [asserted]: #14
#73 := [mp #34 #72]: #68
#91 := [th-lemma arith farkas -1 1 1 #85 #73 #90]: false
#92 := [lemma #91]: #49
#77 := (or #48 #80)
#78 := [def-axiom]: #77
#95 := [unit-resolution #78 #92]: #80
#96 := (not #80)
#97 := (or #96 #93)
#98 := [th-lemma arith triangle-eq]: #97
#99 := [unit-resolution #98 #95]: #93
[th-lemma arith farkas 1 1 1 #92 #73 #99]: false
unsat
72eab31a3a69b2d560f65ab53e94b5e0f28ca228 128 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#37 := -1::Int
#38 := (* -1::Int f3)
#137 := (<= #38 0::Int)
#136 := (= #38 0::Int)
#69 := (>= f3 0::Int)
#76 := (ite #69 f3 #38)
#85 := (= #76 0::Int)
#105 := (= f3 #76)
#127 := (not #105)
#101 := (not #85)
#128 := (iff #101 #127)
#125 := (iff #85 #105)
#123 := (iff #105 #85)
#81 := (= 0::Int #76)
#84 := (iff #81 #85)
#122 := [commutativity]: #84
#120 := (iff #105 #81)
#14 := (= f3 0::Int)
#118 := [hypothesis]: #101
#115 := (or #14 #85)
#63 := (not #14)
#92 := (iff #63 #85)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#13 := (= #12 0::Int)
#15 := (iff #13 #14)
#16 := (not #15)
#97 := (iff #16 #92)
#41 := (ite #10 #38 f3)
#47 := (= 0::Int #41)
#64 := (iff #47 #63)
#95 := (iff #64 #92)
#89 := (iff #85 #63)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #64 #89)
#87 := (iff #47 #85)
#86 := [rewrite]: #84
#82 := (iff #47 #81)
#79 := (= #41 #76)
#70 := (not #69)
#73 := (ite #70 #38 f3)
#77 := (= #73 #76)
#78 := [rewrite]: #77
#74 := (= #41 #73)
#71 := (iff #10 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#80 := [trans #75 #78]: #79
#83 := [monotonicity #80]: #82
#88 := [trans #83 #86]: #87
#91 := [monotonicity #88]: #90
#96 := [trans #91 #94]: #95
#67 := (iff #16 #64)
#55 := (iff #14 #47)
#60 := (not #55)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#52 := (iff #47 #14)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #13 #47)
#44 := (= #41 0::Int)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #13 #44)
#42 := (= #12 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#98 := [trans #68 #96]: #97
#36 := [asserted]: #16
#99 := [mp #36 #98]: #92
#102 := (not #92)
#113 := (or #14 #85 #102)
#114 := [def-axiom]: #113
#116 := [unit-resolution #114 #99]: #115
#119 := [unit-resolution #116 #118]: #14
#121 := [monotonicity #119]: #120
#124 := [trans #121 #122]: #123
#126 := [symm #124]: #125
#129 := [monotonicity #126]: #128
#130 := [mp #118 #129]: #127
#131 := (or #63 #69)
#132 := [th-lemma arith triangle-eq]: #131
#133 := [unit-resolution #132 #119]: #69
#107 := (or #70 #105)
#108 := [def-axiom]: #107
#134 := [unit-resolution #108 #133 #130]: false
#135 := [lemma #134]: #85
#106 := (= #38 #76)
#144 := (iff #63 #127)
#142 := (iff #14 #105)
#140 := (iff #105 #14)
#141 := [monotonicity #135]: #140
#143 := [symm #141]: #142
#145 := [monotonicity #143]: #144
#111 := (or #63 #101)
#109 := (or #63 #101 #102)
#110 := [def-axiom]: #109
#112 := [unit-resolution #110 #99]: #111
#139 := [unit-resolution #112 #135]: #63
#146 := [mp #139 #145]: #127
#147 := [unit-resolution #108 #146]: #70
#103 := (or #69 #106)
#104 := [def-axiom]: #103
#148 := [unit-resolution #104 #147]: #106
#149 := [trans #148 #135]: #136
#150 := (not #136)
#151 := (or #150 #137)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #149]: #137
[th-lemma arith farkas 1 1 #147 #153]: false
unsat
65683f244c3b3437d2ff4b46228877d5d6db1b1c 103 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#64 := (>= f3 0::Int)
#37 := -1::Int
#38 := (* -1::Int f3)
#111 := (* -1::Int #38)
#112 := (+ f3 #111)
#114 := (>= #112 0::Int)
#110 := (= f3 #38)
#71 := (ite #64 f3 #38)
#118 := (= #71 #38)
#99 := (= #38 #71)
#65 := (not #64)
#115 := [hypothesis]: #65
#102 := (or #64 #99)
#97 := [def-axiom]: #102
#116 := [unit-resolution #97 #115]: #99
#119 := [symm #116]: #118
#76 := (= f3 #71)
#108 := (or #64 #76)
#86 := (iff #65 #76)
#12 := (- f3)
#11 := (< f3 0::Int)
#13 := (ite #11 #12 f3)
#14 := (= #13 f3)
#10 := (<= 0::Int f3)
#15 := (iff #10 #14)
#16 := (not #15)
#91 := (iff #16 #86)
#58 := (not #10)
#41 := (ite #11 #38 f3)
#47 := (= f3 #41)
#59 := (iff #47 #58)
#89 := (iff #59 #86)
#83 := (iff #76 #65)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #59 #83)
#81 := (iff #58 #65)
#79 := (iff #10 #64)
#80 := [rewrite]: #79
#82 := [monotonicity #80]: #81
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#85 := [monotonicity #78 #82]: #84
#90 := [trans #85 #88]: #89
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 f3)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#42 := (= #13 #41)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#92 := [trans #63 #90]: #91
#36 := [asserted]: #16
#93 := [mp #36 #92]: #86
#95 := (not #86)
#106 := (or #64 #76 #95)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #93]: #108
#117 := [unit-resolution #109 #115]: #76
#120 := [trans #117 #119]: #110
#121 := (not #110)
#122 := (or #121 #114)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #114
#125 := [th-lemma arith farkas 2 1 #115 #124]: false
#126 := [lemma #125]: #64
#100 := (or #65 #76)
#101 := [def-axiom]: #100
#113 := [unit-resolution #101 #126]: #76
#98 := (not #76)
#104 := (or #65 #98)
#96 := (or #65 #98 #95)
#103 := [def-axiom]: #96
#105 := [unit-resolution #103 #93]: #104
[unit-resolution #105 #113 #126]: false
unsat
6706cda989499422594f4bdacb2cec77f1d7ef2e 152 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#37 := -1::Int
#38 := (* -1::Int f3)
#64 := (>= f3 0::Int)
#71 := (ite #64 f3 #38)
#114 := (* -1::Int #71)
#164 := (+ f3 #114)
#165 := (<= #164 0::Int)
#101 := (= f3 #71)
#115 := (+ #38 #114)
#117 := (>= #115 0::Int)
#76 := (= #38 #71)
#65 := (not #64)
#149 := [hypothesis]: #65
#104 := (or #64 #76)
#99 := [def-axiom]: #104
#150 := [unit-resolution #99 #149]: #76
#143 := (not #76)
#151 := (or #143 #117)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #150]: #117
#81 := (+ f3 #71)
#100 := (<= #81 0::Int)
#158 := (not #100)
#97 := (>= #81 0::Int)
#116 := (<= #115 0::Int)
#80 := (= #81 0::Int)
#98 := (not #80)
#136 := (not #97)
#137 := [hypothesis]: #136
#138 := (or #98 #97)
#139 := [th-lemma arith triangle-eq]: #138
#140 := [unit-resolution #139 #137]: #98
#134 := (or #65 #80)
#121 := (= f3 0::Int)
#10 := (<= f3 0::Int)
#118 := [hypothesis]: #98
#112 := (or #10 #80)
#58 := (not #10)
#88 := (iff #58 #80)
#12 := (- f3)
#11 := (< f3 0::Int)
#13 := (ite #11 #12 f3)
#14 := (= #13 #12)
#15 := (iff #10 #14)
#16 := (not #15)
#93 := (iff #16 #88)
#41 := (ite #11 #38 f3)
#47 := (= #38 #41)
#59 := (iff #47 #58)
#91 := (iff #59 #88)
#85 := (iff #80 #58)
#89 := (iff #85 #88)
#90 := [rewrite]: #89
#86 := (iff #59 #85)
#83 := (iff #47 #80)
#79 := (iff #76 #80)
#82 := [rewrite]: #79
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#87 := [monotonicity #84]: #86
#92 := [trans #87 #90]: #91
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 #38)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#42 := (= #13 #41)
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43 #40]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#94 := [trans #63 #92]: #93
#36 := [asserted]: #16
#95 := [mp #36 #94]: #88
#105 := (not #88)
#110 := (or #10 #80 #105)
#111 := [def-axiom]: #110
#113 := [unit-resolution #111 #95]: #112
#119 := [unit-resolution #113 #118]: #10
#120 := [hypothesis]: #64
#122 := [th-lemma arith eq-propagate 0 0 #120 #119]: #121
#130 := (= #81 f3)
#128 := (= #71 f3)
#102 := (or #65 #101)
#103 := [def-axiom]: #102
#123 := [unit-resolution #103 #120]: #101
#129 := [symm #123]: #128
#126 := (= #81 #71)
#124 := (= #71 #81)
#125 := [th-lemma arith eq-propagate 1 1 #120 #119]: #124
#127 := [symm #125]: #126
#131 := [trans #127 #129]: #130
#132 := [trans #131 #122]: #80
#133 := [unit-resolution #118 #132]: false
#135 := [lemma #133]: #134
#141 := [unit-resolution #135 #140]: #65
#142 := [unit-resolution #99 #141]: #76
#144 := (or #143 #116)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #116
#147 := [th-lemma arith farkas 1 1 #137 #146]: false
#148 := [lemma #147]: #97
#154 := (or #64 #10)
#155 := [th-lemma arith farkas 1 1]: #154
#156 := [unit-resolution #155 #149]: #10
#108 := (or #58 #98)
#106 := (or #58 #98 #105)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #95]: #108
#157 := [unit-resolution #109 #156]: #98
#159 := (or #80 #158 #136)
#160 := [th-lemma arith triangle-eq]: #159
#161 := [unit-resolution #160 #157 #148]: #158
#162 := [th-lemma arith farkas 1 1 #161 #153]: false
#163 := [lemma #162]: #64
#167 := [unit-resolution #103 #163]: #101
#168 := (not #101)
#169 := (or #168 #165)
#170 := [th-lemma arith triangle-eq]: #169
#171 := [unit-resolution #170 #167]: #165
#172 := [unit-resolution #135 #163]: #80
#173 := (or #98 #100)
#174 := [th-lemma arith triangle-eq]: #173
#175 := [unit-resolution #174 #172]: #100
#176 := [unit-resolution #109 #172]: #58
[th-lemma arith farkas 2 1 1 #176 #175 #171]: false
unsat
7937f47574f63ba7fda8d181035eac5a04f1804b 114 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#38 := -1::Int
#39 := (* -1::Int f3)
#70 := (>= f3 0::Int)
#77 := (ite #70 f3 #39)
#91 := (* -1::Int #77)
#130 := (+ #39 #91)
#140 := (<= #130 0::Int)
#117 := (= #39 #77)
#71 := (not #70)
#128 := (+ f3 #91)
#129 := (<= #128 0::Int)
#116 := (= f3 #77)
#131 := [hypothesis]: #70
#118 := (or #71 #116)
#119 := [def-axiom]: #118
#132 := [unit-resolution #119 #131]: #116
#133 := (not #116)
#134 := (or #133 #129)
#135 := [th-lemma arith triangle-eq]: #134
#136 := [unit-resolution #135 #132]: #129
#86 := (>= #77 0::Int)
#85 := (not #86)
#97 := (ite #86 #77 #91)
#102 := (= #77 #97)
#105 := (not #102)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#14 := (- #12)
#13 := (< #12 0::Int)
#15 := (ite #13 #14 #12)
#16 := (= #15 #12)
#17 := (not #16)
#108 := (iff #17 #105)
#42 := (ite #10 #39 f3)
#51 := (* -1::Int #42)
#45 := (< #42 0::Int)
#56 := (ite #45 #51 #42)
#62 := (= #42 #56)
#67 := (not #62)
#106 := (iff #67 #105)
#103 := (iff #62 #102)
#100 := (= #56 #97)
#94 := (ite #85 #91 #77)
#98 := (= #94 #97)
#99 := [rewrite]: #98
#95 := (= #56 #94)
#80 := (= #42 #77)
#74 := (ite #71 #39 f3)
#78 := (= #74 #77)
#79 := [rewrite]: #78
#75 := (= #42 #74)
#72 := (iff #10 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#92 := (= #51 #91)
#93 := [monotonicity #81]: #92
#89 := (iff #45 #85)
#82 := (< #77 0::Int)
#87 := (iff #82 #85)
#88 := [rewrite]: #87
#83 := (iff #45 #82)
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#96 := [monotonicity #90 #93 #81]: #95
#101 := [trans #96 #99]: #100
#104 := [monotonicity #81 #101]: #103
#107 := [monotonicity #104]: #106
#68 := (iff #17 #67)
#65 := (iff #16 #62)
#59 := (= #56 #42)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #16 #59)
#43 := (= #12 #42)
#40 := (= #11 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#57 := (= #15 #56)
#54 := (= #14 #51)
#48 := (- #42)
#52 := (= #48 #51)
#53 := [rewrite]: #52
#49 := (= #14 #48)
#50 := [monotonicity #44]: #49
#55 := [trans #50 #53]: #54
#46 := (iff #13 #45)
#47 := [monotonicity #44]: #46
#58 := [monotonicity #47 #55 #44]: #57
#61 := [monotonicity #58 #44]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#109 := [trans #69 #107]: #108
#37 := [asserted]: #17
#110 := [mp #37 #109]: #105
#113 := (or #85 #102)
#120 := [def-axiom]: #113
#137 := [unit-resolution #120 #110]: #85
#138 := [th-lemma arith farkas -1 1 1 #131 #137 #136]: false
#139 := [lemma #138]: #71
#114 := (or #70 #117)
#115 := [def-axiom]: #114
#142 := [unit-resolution #115 #139]: #117
#143 := (not #117)
#144 := (or #143 #140)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #140
[th-lemma arith farkas 1 1 1 #139 #137 #146]: false
unsat
a868efa9f7901f51a029173b2123a5ae296196e1 57 0
#2 := false
#39 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Int)
#43 := (ite #40 f3 f4)
#51 := (* -1::Int #43)
#60 := (+ f4 #51)
#74 := (>= #60 0::Int)
#64 := (= f4 #43)
#65 := (not #40)
#63 := (= f3 #43)
#68 := (not #63)
#52 := (+ f3 #51)
#50 := (>= #52 0::Int)
#56 := (not #50)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f3)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #50)
#46 := (<= #43 f3)
#49 := (iff #46 #50)
#53 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #50)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #74)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #74
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
82b647da9fab0aa64c094a4662b5883d9bc7b999 57 0
#2 := false
#39 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Int)
#43 := (ite #40 f3 f4)
#50 := (* -1::Int #43)
#51 := (+ f4 #50)
#49 := (>= #51 0::Int)
#56 := (not #49)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f4)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #49)
#46 := (<= #43 f4)
#52 := (iff #46 #49)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f4 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f3 #50)
#68 := (>= #60 0::Int)
#63 := (= f3 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #68)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #68
#75 := [th-lemma arith farkas -1 1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #49)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
9b46d108c41d783ae69f553dfb50c9b551e3e4dc 103 0
#2 := false
#48 := 0::Int
decl f5 :: Int
#11 := f5
decl f4 :: Int
#9 := f4
#46 := -1::Int
#56 := (* -1::Int f5)
#66 := (+ f4 #56)
#67 := (<= #66 0::Int)
#70 := (ite #67 f4 f5)
#78 := (* -1::Int #70)
decl f3 :: Int
#8 := f3
#79 := (+ f3 #78)
#77 := (>= #79 0::Int)
#76 := (not #77)
#57 := (+ f3 #56)
#55 := (>= #57 0::Int)
#54 := (not #55)
#50 := (* -1::Int f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Int)
#47 := (not #49)
#60 := (and #47 #54)
#63 := (not #60)
#84 := (or #63 #76)
#87 := (not #84)
#14 := (<= f4 f5)
#15 := (ite #14 f4 f5)
#16 := (< f3 #15)
#12 := (< f3 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #76)
#73 := (< f3 #70)
#80 := (iff #73 #76)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #54)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #77
#93 := [not-or-elim #92]: #60
#95 := [and-elim #93]: #54
#101 := (+ f5 #78)
#118 := (<= #101 0::Int)
#107 := (= f5 #70)
#108 := (not #67)
#106 := (= f4 #70)
#113 := (not #106)
#103 := (+ f4 #78)
#100 := (<= #103 0::Int)
#110 := (not #100)
#94 := [and-elim #93]: #47
#98 := [hypothesis]: #100
#99 := [th-lemma arith farkas -1 -1 1 #98 #94 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #100)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #118)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #118
[th-lemma arith farkas -1 -1 1 #125 #95 #96]: false
unsat
384d72c036cb4a504daa40b92a17937fc9e8eeef 94 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#41 := 0::Int
#38 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Int)
#51 := (ite #49 f4 f3)
#42 := (<= #40 0::Int)
#45 := (ite #42 f3 f4)
#54 := (= #45 #51)
#61 := (= f4 #51)
#66 := (not #42)
#64 := (= f3 #45)
#106 := (not #64)
#68 := (= f3 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#74 := (= f3 f4)
#65 := (= f4 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f4 f3)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#98 := [trans #97 #78]: #68
#99 := [unit-resolution #76 #98]: false
#100 := [lemma #99]: #68
#102 := (= #45 f3)
#101 := [hypothesis]: #64
#103 := [symm #101]: #102
#104 := [trans #103 #100]: #54
#105 := [unit-resolution #60 #104]: false
#107 := [lemma #105]: #106
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#108 := [unit-resolution #62 #107]: #66
#110 := (or #49 #42)
#111 := [th-lemma arith farkas 1 1]: #110
#112 := [unit-resolution #111 #108]: #49
#113 := [unit-resolution #71 #112]: #61
#116 := (= #45 f4)
#109 := [unit-resolution #37 #108]: #65
#117 := [symm #109]: #116
#118 := [trans #117 #113]: #54
[unit-resolution #60 #118]: false
unsat
5df6354637212a118c8e9d3b4d92806fed1f414a 68 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#11 := (<= f3 0::Int)
#12 := (ite #11 f3 0::Int)
#13 := (= #12 0::Int)
#79 := (= f3 0::Int)
#53 := (>= f3 0::Int)
#54 := (not #53)
#62 := (or #13 #54)
#67 := (not #62)
#10 := (<= 0::Int f3)
#14 := (implies #10 #13)
#15 := (not #14)
#70 := (iff #15 #67)
#36 := (= 0::Int #12)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#68 := (iff #48 #67)
#65 := (iff #43 #62)
#59 := (or #54 #13)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #43 #59)
#57 := (iff #36 #13)
#58 := [rewrite]: #57
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#61 := [monotonicity #56 #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#71 := [trans #50 #69]: #70
#35 := [asserted]: #15
#72 := [mp #35 #71]: #67
#75 := [not-or-elim #72]: #53
#73 := (not #13)
#74 := [not-or-elim #72]: #73
#81 := (or #11 #13)
#82 := [def-axiom]: #81
#80 := [unit-resolution #82 #74]: #11
#84 := (not #11)
#77 := (or #79 #84 #54)
#78 := [th-lemma arith triangle-eq]: #77
#87 := [unit-resolution #78 #80 #75]: #79
#89 := (= #12 f3)
#83 := (= f3 #12)
#85 := (or #84 #83)
#86 := [def-axiom]: #85
#88 := [unit-resolution #86 #80]: #83
#90 := [symm #88]: #89
#91 := [trans #90 #87]: #13
[unit-resolution #74 #91]: false
unsat
830a0546cfefe0a710f523435755e68520136af4 124 0
#2 := false
#13 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#39 := -1::Int
#41 := (* -1::Int f4)
#54 := (+ f3 #41)
#55 := (<= #54 0::Int)
#58 := (ite #55 f3 f4)
#106 := (* -1::Int #58)
#107 := (+ f3 #106)
#109 := (>= #107 0::Int)
#94 := (= f3 #58)
#108 := (+ f4 #106)
#126 := (>= #108 0::Int)
#95 := (= f4 #58)
#96 := (not #55)
#137 := [hypothesis]: #96
#93 := (or #55 #95)
#90 := [def-axiom]: #93
#138 := [unit-resolution #90 #137]: #95
#129 := (not #95)
#130 := (or #129 #126)
#131 := [th-lemma arith triangle-eq]: #130
#139 := [unit-resolution #131 #138]: #126
#40 := (* -1::Int f3)
#42 := (+ #40 #41)
#12 := (+ f3 f4)
#61 := (>= #12 0::Int)
#68 := (ite #61 #12 #42)
#76 := (* -1::Int #68)
#105 := (+ #42 #76)
#125 := (<= #105 0::Int)
#98 := (= #42 #68)
#62 := (not #61)
#110 := [hypothesis]: #61
#77 := (+ #58 #76)
#78 := (<= #77 0::Int)
#83 := (not #78)
#15 := (- #12)
#14 := (< #12 0::Int)
#16 := (ite #14 #15 #12)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#17 := (<= #11 #16)
#18 := (not #17)
#86 := (iff #18 #83)
#45 := (ite #14 #42 #12)
#48 := (<= #11 #45)
#51 := (not #48)
#84 := (iff #51 #83)
#81 := (iff #48 #78)
#73 := (<= #58 #68)
#79 := (iff #73 #78)
#80 := [rewrite]: #79
#74 := (iff #48 #73)
#71 := (= #45 #68)
#65 := (ite #62 #42 #12)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #45 #65)
#63 := (iff #14 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#59 := (= #11 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#75 := [monotonicity #60 #72]: #74
#82 := [trans #75 #80]: #81
#85 := [monotonicity #82]: #84
#52 := (iff #18 #51)
#49 := (iff #17 #48)
#46 := (= #16 #45)
#43 := (= #15 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#87 := [trans #53 #85]: #86
#38 := [asserted]: #18
#88 := [mp #38 #87]: #83
#123 := (or #96 #62)
#111 := [hypothesis]: #55
#97 := (or #96 #94)
#92 := [def-axiom]: #97
#112 := [unit-resolution #92 #111]: #94
#113 := (not #94)
#114 := (or #113 #109)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112]: #109
#103 := (+ #12 #76)
#104 := (<= #103 0::Int)
#91 := (= #12 #68)
#99 := (or #62 #91)
#100 := [def-axiom]: #99
#117 := [unit-resolution #100 #110]: #91
#118 := (not #91)
#119 := (or #118 #104)
#120 := [th-lemma arith triangle-eq]: #119
#121 := [unit-resolution #120 #117]: #104
#122 := [th-lemma arith farkas 2 2 2 1 1 #121 #116 #88 #111 #110]: false
#124 := [lemma #122]: #123
#127 := [unit-resolution #124 #110]: #96
#128 := [unit-resolution #90 #127]: #95
#132 := [unit-resolution #131 #128]: #126
#133 := [th-lemma arith farkas 2 2 1 2 1 #121 #132 #127 #88 #110]: false
#134 := [lemma #133]: #62
#101 := (or #61 #98)
#102 := [def-axiom]: #101
#140 := [unit-resolution #102 #134]: #98
#141 := (not #98)
#142 := (or #141 #125)
#143 := [th-lemma arith triangle-eq]: #142
#144 := [unit-resolution #143 #140]: #125
#145 := [th-lemma arith farkas 3/2 1/2 1 1 1 #134 #137 #88 #144 #139]: false
#146 := [lemma #145]: #55
#147 := [unit-resolution #92 #146]: #94
#148 := [unit-resolution #115 #147]: #109
[th-lemma arith farkas 1/2 3/2 1 1 1 #146 #134 #88 #144 #148]: false
unsat
52f99700756069f984cbcf7e031ad81024526b39 57 0
#2 := false
#39 := 0::Int
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Int)
#43 := (ite #40 f4 f3)
#49 := (* -1::Int #43)
#50 := (+ f3 #49)
#51 := (<= #50 0::Int)
#56 := (not #51)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f3 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f4 #49)
#67 := (<= #60 0::Int)
#63 := (= f4 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #67)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #67
#75 := [th-lemma arith farkas 1 -1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #51)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
f0391470173f42c2f425051fb44610cd0d3f11da 57 0
#2 := false
#38 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#36 := -1::Int
#40 := (* -1::Int f4)
#41 := (+ f3 #40)
#39 := (>= #41 0::Int)
#43 := (ite #39 f3 f4)
#49 := (* -1::Int #43)
#60 := (+ f4 #49)
#73 := (<= #60 0::Int)
#64 := (= f4 #43)
#65 := (not #39)
#63 := (= f3 #43)
#68 := (not #63)
#50 := (+ f3 #49)
#51 := (<= #50 0::Int)
#56 := (not #51)
#10 := (<= f4 f3)
#11 := (ite #10 f3 f4)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#37 := (iff #10 #39)
#42 := [rewrite]: #37
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #51)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #39 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #73)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #73
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
3fca82fbf91597dcaf0c89ff56d31758ef9aa446 103 0
#2 := false
#48 := 0::Int
decl f3 :: Int
#8 := f3
decl f5 :: Int
#11 := f5
#46 := -1::Int
#54 := (* -1::Int f5)
#66 := (+ f3 #54)
#67 := (<= #66 0::Int)
#70 := (ite #67 f5 f3)
#76 := (* -1::Int #70)
decl f4 :: Int
#9 := f4
#77 := (+ f4 #76)
#78 := (<= #77 0::Int)
#79 := (not #78)
#55 := (+ f4 #54)
#56 := (<= #55 0::Int)
#57 := (not #56)
#50 := (* -1::Int f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Int)
#47 := (not #49)
#60 := (and #47 #57)
#63 := (not #60)
#84 := (or #63 #79)
#87 := (not #84)
#14 := (<= f3 f5)
#15 := (ite #14 f5 f3)
#16 := (< #15 f4)
#12 := (< f5 f4)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #79)
#73 := (< #70 f4)
#80 := (iff #73 #79)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #78
#93 := [not-or-elim #92]: #60
#94 := [and-elim #93]: #47
#100 := (+ f3 #76)
#119 := (>= #100 0::Int)
#107 := (= f3 #70)
#108 := (not #67)
#106 := (= f5 #70)
#113 := (not #106)
#103 := (+ f5 #76)
#101 := (>= #103 0::Int)
#110 := (not #101)
#95 := [and-elim #93]: #57
#98 := [hypothesis]: #101
#99 := [th-lemma arith farkas -1 -1 1 #98 #95 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #101)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #119)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #119
[th-lemma arith farkas -1 1 1 #125 #94 #96]: false
unsat
4cc8abc1cb14abf886035d59247a2facd4c8905d 96 0
#2 := false
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#41 := 0::Int
#38 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Int)
#51 := (ite #49 f3 f4)
#42 := (<= #40 0::Int)
#45 := (ite #42 f4 f3)
#54 := (= #45 #51)
#61 := (= f3 #51)
#66 := (not #42)
#64 := (= f4 #45)
#108 := (not #64)
#68 := (= f4 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#98 := (= f4 f3)
#74 := (= f3 f4)
#65 := (= f3 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f3 f4)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#99 := [symm #97]: #98
#100 := [trans #99 #78]: #68
#101 := [unit-resolution #76 #100]: false
#102 := [lemma #101]: #68
#104 := (= #45 f4)
#103 := [hypothesis]: #64
#105 := [symm #103]: #104
#106 := [trans #105 #102]: #54
#107 := [unit-resolution #60 #106]: false
#109 := [lemma #107]: #108
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#110 := [unit-resolution #62 #109]: #66
#112 := (or #49 #42)
#113 := [th-lemma arith farkas 1 1]: #112
#114 := [unit-resolution #113 #110]: #49
#115 := [unit-resolution #71 #114]: #61
#118 := (= #45 f3)
#111 := [unit-resolution #37 #110]: #65
#119 := [symm #111]: #118
#120 := [trans #119 #115]: #54
[unit-resolution #60 #120]: false
unsat
0dd105910a740ba84e327a554c15807cfbb51e90 66 0
#2 := false
decl f3 :: Int
#9 := f3
#8 := 0::Int
#11 := (<= f3 0::Int)
#12 := (ite #11 0::Int f3)
#36 := (= f3 #12)
#87 := (= 0::Int #12)
#81 := (= #12 0::Int)
#71 := (not #36)
#53 := (>= f3 0::Int)
#54 := (not #53)
#60 := (or #36 #54)
#65 := (not #60)
#13 := (= #12 f3)
#10 := (<= 0::Int f3)
#14 := (implies #10 #13)
#15 := (not #14)
#68 := (iff #15 #65)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#66 := (iff #48 #65)
#63 := (iff #43 #60)
#57 := (or #54 #36)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #43 #57)
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#69 := [trans #50 #67]: #68
#35 := [asserted]: #15
#70 := [mp #35 #69]: #65
#72 := [not-or-elim #70]: #71
#79 := (or #11 #36)
#80 := [def-axiom]: #79
#78 := [unit-resolution #80 #72]: #11
#82 := (not #11)
#83 := (or #82 #81)
#84 := [def-axiom]: #83
#75 := [unit-resolution #84 #78]: #81
#88 := [symm #75]: #87
#77 := (= f3 0::Int)
#73 := [not-or-elim #70]: #53
#76 := (or #77 #82 #54)
#85 := [th-lemma arith triangle-eq]: #76
#86 := [unit-resolution #85 #78 #73]: #77
#89 := [trans #86 #88]: #36
[unit-resolution #72 #89]: false
unsat
6d096cc8e5aead61fa59d3a9e14375705bde559e 214 0
#2 := false
#9 := 0::Int
decl f4 :: Int
#14 := f4
#43 := -1::Int
#58 := (* -1::Int f4)
#94 := (>= f4 0::Int)
#101 := (ite #94 f4 #58)
#106 := (* -1::Int #101)
#161 := (+ #58 #106)
#183 := (<= #161 0::Int)
#137 := (= #58 #101)
#95 := (not #94)
decl f3 :: Int
#8 := f3
#112 := (+ f3 #58)
#113 := (<= #112 0::Int)
#116 := (ite #113 f4 f3)
#155 := (* -1::Int #116)
#156 := (+ f4 #155)
#157 := (<= #156 0::Int)
#158 := (+ f3 #155)
#193 := (<= #158 0::Int)
#149 := (= f3 #116)
#150 := (not #113)
#148 := (= f4 #116)
#195 := [hypothesis]: #113
#151 := (or #150 #148)
#152 := [def-axiom]: #151
#196 := [unit-resolution #152 #195]: #148
#197 := (not #148)
#198 := (or #197 #157)
#199 := [th-lemma arith triangle-eq]: #198
#200 := [unit-resolution #199 #196]: #157
#179 := (not #157)
#191 := (or #95 #179)
#159 := (+ f4 #106)
#160 := (<= #159 0::Int)
#136 := (= f4 #101)
#165 := [hypothesis]: #94
#144 := (or #95 #136)
#145 := [def-axiom]: #144
#166 := [unit-resolution #145 #165]: #136
#167 := (not #136)
#168 := (or #167 #160)
#169 := [th-lemma arith triangle-eq]: #168
#170 := [unit-resolution #169 #166]: #160
#44 := (* -1::Int f3)
#79 := (>= f3 0::Int)
#86 := (ite #79 f3 #44)
#91 := (* -1::Int #86)
#164 := (+ #44 #91)
#182 := (<= #164 0::Int)
#141 := (= #44 #86)
#80 := (not #79)
#177 := [hypothesis]: #157
#180 := (or #80 #95 #179)
#125 := (+ #101 #116)
#126 := (+ #86 #125)
#123 := (>= #126 0::Int)
#129 := (not #123)
#19 := (<= f3 f4)
#20 := (ite #19 f4 f3)
#16 := (- f4)
#15 := (< f4 0::Int)
#17 := (ite #15 #16 f4)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#13 := (- #12)
#18 := (- #13 #17)
#21 := (<= #18 #20)
#22 := (not #21)
#132 := (iff #22 #129)
#61 := (ite #15 #58 f4)
#67 := (* -1::Int #61)
#47 := (ite #10 #44 f3)
#53 := (* -1::Int #47)
#68 := (+ #53 #67)
#73 := (<= #68 #20)
#76 := (not #73)
#130 := (iff #76 #129)
#127 := (iff #73 #123)
#109 := (+ #91 #106)
#119 := (<= #109 #116)
#122 := (iff #119 #123)
#124 := [rewrite]: #122
#120 := (iff #73 #119)
#117 := (= #20 #116)
#114 := (iff #19 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#110 := (= #68 #109)
#107 := (= #67 #106)
#104 := (= #61 #101)
#98 := (ite #95 #58 f4)
#102 := (= #98 #101)
#103 := [rewrite]: #102
#99 := (= #61 #98)
#96 := (iff #15 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#105 := [trans #100 #103]: #104
#108 := [monotonicity #105]: #107
#92 := (= #53 #91)
#89 := (= #47 #86)
#83 := (ite #80 #44 f3)
#87 := (= #83 #86)
#88 := [rewrite]: #87
#84 := (= #47 #83)
#81 := (iff #10 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#111 := [monotonicity #93 #108]: #110
#121 := [monotonicity #111 #118]: #120
#128 := [trans #121 #124]: #127
#131 := [monotonicity #128]: #130
#77 := (iff #22 #76)
#74 := (iff #21 #73)
#71 := (= #18 #68)
#64 := (- #53 #61)
#69 := (= #64 #68)
#70 := [rewrite]: #69
#65 := (= #18 #64)
#62 := (= #17 #61)
#59 := (= #16 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#56 := (= #13 #53)
#50 := (- #47)
#54 := (= #50 #53)
#55 := [rewrite]: #54
#51 := (= #13 #50)
#48 := (= #12 #47)
#45 := (= #11 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#57 := [trans #52 #55]: #56
#66 := [monotonicity #57 #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#133 := [trans #78 #131]: #132
#42 := [asserted]: #22
#134 := [mp #42 #133]: #129
#162 := (+ f3 #91)
#163 := (<= #162 0::Int)
#140 := (= f3 #86)
#171 := [hypothesis]: #79
#142 := (or #80 #140)
#143 := [def-axiom]: #142
#172 := [unit-resolution #143 #171]: #140
#173 := (not #140)
#174 := (or #173 #163)
#175 := [th-lemma arith triangle-eq]: #174
#176 := [unit-resolution #175 #172]: #163
#178 := [th-lemma arith farkas -2 1 -1 1 1 1 #165 #177 #171 #176 #134 #170]: false
#181 := [lemma #178]: #180
#184 := [unit-resolution #181 #165 #177]: #80
#138 := (or #79 #141)
#139 := [def-axiom]: #138
#185 := [unit-resolution #139 #184]: #141
#186 := (not #141)
#187 := (or #186 #182)
#188 := [th-lemma arith triangle-eq]: #187
#189 := [unit-resolution #188 #185]: #182
#190 := [th-lemma arith farkas 2 1 1 1 1 1 #165 #177 #134 #184 #189 #170]: false
#192 := [lemma #190]: #191
#201 := [unit-resolution #192 #200]: #95
#146 := (or #94 #137)
#147 := [def-axiom]: #146
#202 := [unit-resolution #147 #201]: #137
#203 := (not #137)
#204 := (or #203 #183)
#205 := [th-lemma arith triangle-eq]: #204
#206 := [unit-resolution #205 #202]: #183
#207 := (or #80 #94 #150)
#208 := [th-lemma arith assign-bounds 1 1]: #207
#209 := [unit-resolution #208 #201 #195]: #80
#210 := [unit-resolution #139 #209]: #141
#211 := [unit-resolution #188 #210]: #182
#212 := [th-lemma arith farkas 1 1 1 1 1 #200 #134 #209 #211 #206]: false
#213 := [lemma #212]: #150
#153 := (or #113 #149)
#154 := [def-axiom]: #153
#224 := [unit-resolution #154 #213]: #149
#225 := (not #149)
#226 := (or #225 #193)
#227 := [th-lemma arith triangle-eq]: #226
#228 := [unit-resolution #227 #224]: #193
#231 := (not #193)
#232 := (or #157 #113 #231)
#233 := [th-lemma arith assign-bounds 1 1]: #232
#234 := [unit-resolution #233 #213 #228]: #157
#235 := [unit-resolution #192 #234]: #95
#236 := [unit-resolution #147 #235]: #137
#237 := [unit-resolution #205 #236]: #183
#216 := [hypothesis]: #80
#217 := (or #95 #79 #113)
#218 := [th-lemma arith assign-bounds 1 1]: #217
#219 := [unit-resolution #218 #216 #213]: #95
#220 := [unit-resolution #147 #219]: #137
#221 := [unit-resolution #205 #220]: #183
#222 := [unit-resolution #139 #216]: #141
#223 := [unit-resolution #188 #222]: #182
#229 := [th-lemma arith farkas 1 1 1 1 1 1 #216 #213 #228 #134 #223 #221]: false
#230 := [lemma #229]: #79
#238 := [unit-resolution #143 #230]: #140
#239 := [unit-resolution #175 #238]: #163
[th-lemma arith farkas 1 1 1 1 1 1 #213 #228 #134 #230 #239 #237]: false
unsat
670f014c1852b6081232410eed442ca5e4374561 56 0
#2 := false
#11 := 1::Int
decl f3 :: Int
#9 := f3
#14 := (= f3 1::Int)
#12 := (<= f3 1::Int)
#8 := 0::Int
#44 := (<= f3 0::Int)
#45 := (not #44)
#51 := (and #12 #45)
#56 := (not #51)
#62 := (or #14 #56)
#67 := (not #62)
#10 := (< 0::Int f3)
#13 := (and #10 #12)
#15 := (implies #13 #14)
#16 := (not #15)
#70 := (iff #16 #67)
#37 := (not #13)
#38 := (or #37 #14)
#41 := (not #38)
#68 := (iff #41 #67)
#65 := (iff #38 #62)
#59 := (or #56 #14)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #38 #59)
#57 := (iff #37 #56)
#54 := (iff #13 #51)
#48 := (and #45 #12)
#52 := (iff #48 #51)
#53 := [rewrite]: #52
#49 := (iff #13 #48)
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#55 := [trans #50 #53]: #54
#58 := [monotonicity #55]: #57
#61 := [monotonicity #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#71 := [trans #43 #69]: #70
#36 := [asserted]: #16
#72 := [mp #36 #71]: #67
#75 := [not-or-elim #72]: #51
#76 := [and-elim #75]: #12
#77 := [and-elim #75]: #45
#88 := [th-lemma arith eq-propagate 0 0 #77 #76]: #14
#73 := (not #14)
#74 := [not-or-elim #72]: #73
[unit-resolution #74 #88]: false
unsat
2c89038e9e5248b9d7775a1c2cccda0081ae4afd 18 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := (<= f3 f3)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
ce89535ab1564731d3a25470ddb514abb6a5df0e 51 0
#2 := false
decl f4 :: Int
#9 := f4
#11 := 3::Int
#13 := (* 3::Int f4)
decl f3 :: Int
#8 := f3
#12 := (* 3::Int f3)
#14 := (<= #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#70 := (iff #16 false)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#68 := (iff #41 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #41 #63)
#61 := (iff #38 true)
#47 := 0::Int
#44 := -1::Int
#45 := (* -1::Int f4)
#46 := (+ f3 #45)
#48 := (<= #46 0::Int)
#51 := (not #48)
#56 := (or #51 #48)
#59 := (iff #56 true)
#60 := [rewrite]: #59
#57 := (iff #38 #56)
#54 := (iff #14 #48)
#55 := [rewrite]: #54
#52 := (iff #37 #51)
#49 := (iff #10 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#58 := [monotonicity #53 #55]: #57
#62 := [trans #58 #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#71 := [trans #43 #69]: #70
#36 := [asserted]: #16
[mp #36 #71]: false
unsat
6ee55a0087180d6d5b23379fd148c763bbe9469a 56 0
#2 := false
decl f4 :: Int
#9 := f4
#11 := 3::Int
#13 := (* 3::Int f4)
decl f3 :: Int
#8 := f3
#12 := (* 3::Int f3)
#14 := (< #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#75 := (iff #16 false)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#73 := (iff #41 false)
#1 := true
#68 := (not true)
#71 := (iff #68 false)
#72 := [rewrite]: #71
#69 := (iff #41 #68)
#66 := (iff #38 true)
#46 := 0::Int
#44 := -1::Int
#48 := (* -1::Int f4)
#49 := (+ f3 #48)
#47 := (>= #49 0::Int)
#45 := (not #47)
#60 := (or #47 #45)
#64 := (iff #60 true)
#65 := [rewrite]: #64
#62 := (iff #38 #60)
#61 := (iff #14 #45)
#59 := [rewrite]: #61
#57 := (iff #37 #47)
#52 := (not #45)
#55 := (iff #52 #47)
#56 := [rewrite]: #55
#53 := (iff #37 #52)
#50 := (iff #10 #45)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#63 := [monotonicity #58 #59]: #62
#67 := [trans #63 #65]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#76 := [trans #43 #74]: #75
#36 := [asserted]: #16
[mp #36 #76]: false
unsat
8db8a95cca6e7fe17cb2a4cd6041ce96b6b7f6c4 52 0
#2 := false
#43 := 0::Int
decl f4 :: Int
#9 := f4
#41 := -1::Int
#45 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#46 := (+ f3 #45)
#56 := (<= #46 0::Int)
#69 := (not #56)
#44 := (>= #46 0::Int)
#59 := (or #44 #56)
#62 := (not #59)
#11 := (<= f3 f4)
#10 := (< f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#65 := (iff #13 #62)
#34 := (not #10)
#35 := (or #34 #11)
#38 := (not #35)
#63 := (iff #38 #62)
#60 := (iff #35 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#54 := (iff #34 #44)
#42 := (not #44)
#49 := (not #42)
#52 := (iff #49 #44)
#53 := [rewrite]: #52
#50 := (iff #34 #49)
#47 := (iff #10 #42)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#61 := [monotonicity #55 #58]: #60
#64 := [monotonicity #61]: #63
#39 := (iff #13 #38)
#36 := (iff #12 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#66 := [trans #40 #64]: #65
#33 := [asserted]: #13
#67 := [mp #33 #66]: #62
#70 := [not-or-elim #67]: #69
#68 := [not-or-elim #67]: #42
#78 := (or #56 #44)
#79 := [th-lemma arith farkas 1 1]: #78
#80 := [unit-resolution #79 #68]: #56
[unit-resolution #80 #70]: false
unsat
520cf64d6077f711a93c13c6d282b3380025b7de 73 0
#2 := false
#61 := 0::Int
decl f4 :: Int
#9 := f4
#54 := -1::Int
#55 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#56 := (+ f3 #55)
#62 := (>= #56 0::Int)
#57 := (<= #56 -1::Int)
#82 := (not #57)
#60 := (not #62)
#89 := [hypothesis]: #60
#87 := (or #82 #62)
#72 := (iff #57 #62)
#11 := 1::Int
#12 := (+ f3 1::Int)
#13 := (<= #12 f4)
#10 := (< f3 f4)
#14 := (iff #10 #13)
#15 := (not #14)
#75 := (iff #15 #72)
#48 := (not #10)
#36 := (+ 1::Int f3)
#39 := (<= #36 f4)
#49 := (iff #39 #48)
#73 := (iff #49 #72)
#70 := (iff #48 #62)
#65 := (not #60)
#68 := (iff #65 #62)
#69 := [rewrite]: #68
#66 := (iff #48 #65)
#63 := (iff #10 #60)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#58 := (iff #39 #57)
#59 := [rewrite]: #58
#74 := [monotonicity #59 #71]: #73
#52 := (iff #15 #49)
#42 := (iff #10 #39)
#45 := (not #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #15 #45)
#43 := (iff #14 #42)
#40 := (iff #13 #39)
#37 := (= #12 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#76 := [trans #53 #74]: #75
#35 := [asserted]: #15
#77 := [mp #35 #76]: #72
#83 := (not #72)
#79 := (or #82 #62 #83)
#80 := [def-axiom]: #79
#88 := [unit-resolution #80 #77]: #87
#90 := [unit-resolution #88 #89]: #82
#91 := [th-lemma arith farkas 1 1 #89 #90]: false
#92 := [lemma #91]: #62
#93 := (or #60 #82)
#94 := [th-lemma arith farkas 1 1]: #93
#95 := [unit-resolution #94 #92]: #82
#86 := (or #57 #60)
#84 := (or #57 #60 #83)
#85 := [def-axiom]: #84
#81 := [unit-resolution #85 #77]: #86
[unit-resolution #81 #95 #92]: false
unsat
6728a1b6710185d5f5ea081e6ce67e8aed169134 15 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := (< f3 f3)
#10 := (not #9)
#11 := (not #10)
#36 := (iff #11 false)
#34 := (iff #9 false)
#35 := [rewrite]: #34
#32 := (iff #11 #9)
#33 := [rewrite]: #32
#37 := [trans #33 #35]: #36
#31 := [asserted]: #11
[mp #31 #37]: false
unsat
520ba5bbc17bf10c5d1972b6fdcb0044f080e0c0 75 0
#2 := false
#56 := 0::Int
decl f5 :: Int
#11 := f5
#53 := -1::Int
#54 := (* -1::Int f5)
decl f4 :: Int
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Int)
#67 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#68 := (+ f3 #67)
#69 := (<= #68 0::Int)
#72 := (not #69)
#63 := (+ f3 #54)
#64 := (<= #63 0::Int)
#60 := (not #57)
#81 := (or #60 #64 #72)
#86 := (not #81)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#89 := (iff #16 #86)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#87 := (iff #50 #86)
#84 := (iff #45 #81)
#75 := (or #60 #64)
#78 := (or #72 #75)
#82 := (iff #78 #81)
#83 := [rewrite]: #82
#79 := (iff #45 #78)
#76 := (iff #38 #75)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#77 := [monotonicity #62 #66]: #76
#73 := (iff #44 #72)
#70 := (iff #10 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#90 := [trans #52 #88]: #89
#36 := [asserted]: #16
#91 := [mp #36 #90]: #86
#92 := [not-or-elim #91]: #57
#93 := (not #64)
#94 := [not-or-elim #91]: #93
#95 := [not-or-elim #91]: #69
[th-lemma arith farkas 1 -1 1 #95 #94 #92]: false
unsat
dcf1c788b6911dd9d0d36f4c26d7c585e6116ff5 80 0
#2 := false
#56 := 0::Int
decl f5 :: Int
#11 := f5
#53 := -1::Int
#54 := (* -1::Int f5)
decl f4 :: Int
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Int)
#69 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#70 := (+ f3 #69)
#68 := (>= #70 0::Int)
#63 := (+ f3 #54)
#64 := (<= #63 0::Int)
#60 := (not #57)
#86 := (or #60 #64 #68)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #60 #64)
#83 := (or #68 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#82 := [monotonicity #62 #66]: #81
#78 := (iff #44 #68)
#67 := (not #68)
#73 := (not #67)
#76 := (iff #73 #68)
#77 := [rewrite]: #76
#74 := (iff #44 #73)
#71 := (iff #10 #67)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#97 := [not-or-elim #96]: #57
#98 := (not #64)
#99 := [not-or-elim #96]: #98
#100 := [not-or-elim #96]: #67
[th-lemma arith farkas 1 1 1 #100 #99 #97]: false
unsat
c158570854bd04b541514c1e42ef7c6a80910ace 80 0
#2 := false
#55 := 0::Int
decl f4 :: Int
#9 := f4
#53 := -1::Int
#72 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#73 := (+ f3 #72)
#74 := (<= #73 0::Int)
#77 := (not #74)
decl f5 :: Int
#11 := f5
#57 := (* -1::Int f5)
#68 := (+ f3 #57)
#69 := (<= #68 0::Int)
#58 := (+ f4 #57)
#56 := (>= #58 0::Int)
#86 := (or #56 #69 #77)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #56 #69)
#83 := (or #77 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#70 := (iff #13 #69)
#71 := [rewrite]: #70
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#82 := [monotonicity #67 #71]: #81
#78 := (iff #44 #77)
#75 := (iff #10 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#100 := [not-or-elim #96]: #74
#98 := (not #69)
#99 := [not-or-elim #96]: #98
#97 := [not-or-elim #96]: #54
[th-lemma arith farkas 1 1 1 #97 #99 #100]: false
unsat
e80ef8fa1f5f7f731207887aafb3d73399a22a53 85 0
#2 := false
#55 := 0::Int
decl f5 :: Int
#11 := f5
#53 := -1::Int
#57 := (* -1::Int f5)
decl f3 :: Int
#8 := f3
#70 := (+ f3 #57)
#69 := (>= #70 0::Int)
decl f4 :: Int
#9 := f4
#75 := (* -1::Int f4)
#76 := (+ f3 #75)
#74 := (>= #76 0::Int)
#68 := (not #69)
#58 := (+ f4 #57)
#56 := (>= #58 0::Int)
#92 := (or #56 #68 #74)
#97 := (not #92)
#13 := (< f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#100 := (iff #16 #97)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#98 := (iff #50 #97)
#95 := (iff #45 #92)
#86 := (or #56 #68)
#89 := (or #74 #86)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #45 #89)
#87 := (iff #38 #86)
#71 := (iff #13 #68)
#72 := [rewrite]: #71
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#88 := [monotonicity #67 #72]: #87
#84 := (iff #44 #74)
#73 := (not #74)
#79 := (not #73)
#82 := (iff #79 #74)
#83 := [rewrite]: #82
#80 := (iff #44 #79)
#77 := (iff #10 #73)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#91 := [monotonicity #85 #88]: #90
#96 := [trans #91 #94]: #95
#99 := [monotonicity #96]: #98
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#101 := [trans #52 #99]: #100
#36 := [asserted]: #16
#102 := [mp #36 #101]: #97
#104 := [not-or-elim #102]: #69
#103 := [not-or-elim #102]: #54
#105 := [not-or-elim #102]: #73
[th-lemma arith farkas 1 1 1 #105 #103 #104]: false
unsat
dc84c7d91507b2575d96fd3dc930644975196557 69 0
#2 := false
#47 := 0::Int
decl f5 :: Int
#11 := f5
#45 := -1::Int
#54 := (* -1::Int f5)
decl f3 :: Int
#8 := f3
#65 := (+ f3 #54)
#66 := (<= #65 0::Int)
#67 := (not #66)
decl f4 :: Int
#9 := f4
#55 := (+ f4 #54)
#53 := (>= #55 0::Int)
#56 := (not #53)
#49 := (* -1::Int f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Int)
#46 := (not #48)
#59 := (and #46 #56)
#62 := (not #59)
#77 := (or #62 #66)
#80 := (not #77)
#14 := (< f5 f3)
#15 := (not #14)
#12 := (< f4 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (not #16)
#83 := (iff #17 #80)
#38 := (not #13)
#39 := (or #38 #15)
#42 := (not #39)
#81 := (iff #42 #80)
#78 := (iff #39 #77)
#75 := (iff #15 #66)
#70 := (not #67)
#73 := (iff #70 #66)
#74 := [rewrite]: #73
#71 := (iff #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#63 := (iff #38 #62)
#60 := (iff #13 #59)
#57 := (iff #12 #56)
#58 := [rewrite]: #57
#51 := (iff #10 #46)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#79 := [monotonicity #64 #76]: #78
#82 := [monotonicity #79]: #81
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#84 := [trans #44 #82]: #83
#37 := [asserted]: #17
#85 := [mp #37 #84]: #80
#89 := [not-or-elim #85]: #67
#86 := [not-or-elim #85]: #59
#88 := [and-elim #86]: #56
#87 := [and-elim #86]: #46
[th-lemma arith farkas 1 1 1 #87 #88 #89]: false
unsat
f773d363f37e932f4532a69daff94825fd8ced7d 17 0
#2 := false
#8 := 0::Real
#9 := (= 0::Real 0::Real)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
22555a704748c0627782ea8aab11b16b25bd4dbb 25 0
#2 := false
#8 := 0::Real
#9 := (- 0::Real)
#10 := (= 0::Real #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= 0::Real 0::Real)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#32 := (= #9 0::Real)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
0f47740e84f3a80bb9157630977b548c62848ac2 17 0
#2 := false
#8 := 1::Real
#9 := (= 1::Real 1::Real)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
267141fda78839fe6990cc2abf9a17976b208b6d 34 0
#2 := false
#8 := 1::Real
#9 := (- 1::Real)
#10 := (= #9 1::Real)
#11 := (not #10)
#12 := (not #11)
#55 := (iff #12 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#48 := (iff #11 true)
#43 := (not false)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#41 := (iff #10 false)
#33 := -1::Real
#36 := (= -1::Real 1::Real)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (= #9 -1::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#32 := [asserted]: #12
[mp #32 #56]: false
unsat
1cceccf830fba7a0f6a7b417cdb35acf58e3b386 18 0
#2 := false
#9 := 1::Real
#8 := 0::Real
#10 := (< 0::Real 1::Real)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
cd5f0992fc4c2527863e91d7965d5cd43f959c45 18 0
#2 := false
#9 := 1::Real
#8 := 0::Real
#10 := (<= 0::Real 1::Real)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
d3dc3081a8407dc4d182c64981740ecde7c13dde 40 0
#2 := false
#12 := 567::Real
#10 := 345::Real
#8 := 123::Real
#9 := (- 123::Real)
#11 := (+ #9 345::Real)
#13 := (< #11 567::Real)
#14 := (not #13)
#61 := (iff #14 false)
#41 := 222::Real
#46 := (< 222::Real 567::Real)
#49 := (not #46)
#59 := (iff #49 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #49 #54)
#52 := (iff #46 true)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#44 := (= #11 222::Real)
#35 := -123::Real
#38 := (+ -123::Real 345::Real)
#42 := (= #38 222::Real)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #9 -123::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#62 := [trans #51 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
a9f49d44404eb27b3a936d2ae021bcf936255755 18 0
#2 := false
#9 := 2345678901::Real
#8 := 123456789::Real
#10 := (< 123456789::Real 2345678901::Real)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
a5a30c12b002b073c6704cbd0e9c0bff0c2be9ce 30 0
#2 := false
#10 := 2345678901::Real
#8 := 123456789::Real
#9 := (- 123456789::Real)
#11 := (< #9 2345678901::Real)
#12 := (not #11)
#51 := (iff #12 false)
#33 := -123456789::Real
#36 := (< -123456789::Real 2345678901::Real)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#34 := (= #9 -123456789::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
503a960ec2242e052830c7ef31b928dcfd2a74cf 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 0::Real
#10 := (+ f3 0::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
770f240de3310b0d6a8016479beff839eb224176 26 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 0::Real
#10 := (+ 0::Real f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
5d138ec76d5878a62b190baf9223adf9c458ea69 29 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#11 := (+ f4 f3)
#10 := (+ f3 f4)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
9e4deb91672100910bd4e78f0dd93df4413e0265 33 0
#2 := false
decl f5 :: Real
#10 := f5
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#13 := (+ f3 f4)
#14 := (+ #13 f5)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#51 := (iff #16 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #16 #46)
#44 := (iff #15 true)
#39 := (= #12 #12)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #15 #39)
#37 := (= #14 #12)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#36 := [asserted]: #16
[mp #36 #52]: false
unsat
fa5df4da5927766ac24749e94b2f4590c5f1f525 45 0
#2 := false
decl f4 :: Real
#9 := f4
#13 := (- f4)
decl f3 :: Real
#8 := f3
#14 := (= f3 #13)
#11 := 0::Real
#10 := (+ f3 f4)
#12 := (= #10 0::Real)
#15 := (iff #12 #14)
#16 := (not #15)
#65 := (iff #16 false)
#50 := (not #12)
#37 := -1::Real
#38 := (* -1::Real f4)
#41 := (= f3 #38)
#51 := (iff #41 #50)
#63 := (iff #51 false)
#58 := (iff #12 #50)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #51 #58)
#56 := (iff #41 #12)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#54 := (iff #16 #51)
#44 := (iff #12 #41)
#47 := (not #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #16 #47)
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#39 := (= #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#66 := [trans #55 #64]: #65
#36 := [asserted]: #16
[mp #36 #66]: false
unsat
780bbf25f5cec016b113005169e826e8a8b1ab35 26 0
#2 := false
#8 := 1::Real
#9 := (- 1::Real)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -1::Real
#35 := (= -1::Real -1::Real)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -1::Real)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
605574d3c38169fc6d9055703879e99ec228f28e 26 0
#2 := false
#8 := 3::Real
#9 := (- 3::Real)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -3::Real
#35 := (= -3::Real -3::Real)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -3::Real)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
3decedf8f758750dd070188834780bf7cdda6699 58 0
#2 := false
decl f3 :: Real
#8 := f3
#10 := 0::Real
#12 := (< 0::Real f3)
#9 := (- f3)
#11 := (< #9 0::Real)
#13 := (iff #11 #12)
#14 := (not #13)
#79 := (iff #14 false)
#53 := (not #12)
#35 := -1::Real
#36 := (* -1::Real f3)
#39 := (< #36 0::Real)
#54 := (iff #39 #53)
#77 := (iff #54 false)
#59 := (<= f3 0::Real)
#60 := (not #59)
#72 := (iff #60 #59)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #54 #72)
#70 := (iff #53 #59)
#65 := (not #60)
#68 := (iff #65 #59)
#69 := [rewrite]: #68
#66 := (iff #53 #65)
#63 := (iff #12 #60)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #39 #60)
#62 := [rewrite]: #61
#74 := [monotonicity #62 #71]: #73
#78 := [trans #74 #76]: #77
#57 := (iff #14 #54)
#45 := (iff #12 #39)
#50 := (not #45)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #45)
#42 := (iff #39 #12)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #13 #42)
#40 := (iff #11 #39)
#37 := (= #9 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#49 := [trans #44 #47]: #48
#52 := [monotonicity #49]: #51
#58 := [trans #52 #56]: #57
#80 := [trans #58 #78]: #79
#34 := [asserted]: #14
[mp #34 #80]: false
unsat
48e8235cc2ab6c0c7ee0a64720a7854069344306 61 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#11 := (- f3)
#12 := (< #11 0::Real)
#10 := (< 0::Real f3)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Real
#36 := (* -1::Real f3)
#39 := (< #36 0::Real)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (<= f3 0::Real)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
101fc723faf759de5c8555614c6008d7a3b2f51c 61 0
#2 := false
decl f3 :: Real
#8 := f3
#11 := (- f3)
#9 := 0::Real
#12 := (< 0::Real #11)
#10 := (< f3 0::Real)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Real
#36 := (* -1::Real f3)
#39 := (< 0::Real #36)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (>= f3 0::Real)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
283d9e9fd5ac4371653f698859bf2cc218d93907 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 0::Real
#10 := (- f3 0::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
377a985423ac0b4a4878b6539f76e0f6387ebc74 32 0
#2 := false
decl f3 :: Real
#9 := f3
#11 := (- f3)
#8 := 0::Real
#10 := (- 0::Real f3)
#12 := (= #10 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := -1::Real
#35 := (* -1::Real f3)
#40 := (= #35 #35)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (= #11 #35)
#39 := [rewrite]: #38
#36 := (= #10 #35)
#37 := [rewrite]: #36
#42 := [monotonicity #37 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
17b8ad92fed9af085980d2ab3e2bbe7070317afb 64 0
#2 := false
#12 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#11 := (- f3 f4)
#13 := (< #11 0::Real)
#10 := (< f3 f4)
#14 := (implies #10 #13)
#15 := (not #14)
#83 := (iff #15 false)
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#41 := (< #38 0::Real)
#47 := (not #10)
#48 := (or #47 #41)
#53 := (not #48)
#81 := (iff #53 false)
#1 := true
#76 := (not true)
#79 := (iff #76 false)
#80 := [rewrite]: #79
#77 := (iff #53 #76)
#74 := (iff #48 true)
#57 := (>= #38 0::Real)
#56 := (not #57)
#69 := (or #57 #56)
#72 := (iff #69 true)
#73 := [rewrite]: #72
#70 := (iff #48 #69)
#67 := (iff #41 #56)
#68 := [rewrite]: #67
#65 := (iff #47 #57)
#60 := (not #56)
#63 := (iff #60 #57)
#64 := [rewrite]: #63
#61 := (iff #47 #60)
#58 := (iff #10 #56)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#71 := [monotonicity #66 #68]: #70
#75 := [trans #71 #73]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#44 := (implies #10 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #14 #44)
#42 := (iff #13 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#84 := [trans #55 #82]: #83
#35 := [asserted]: #15
[mp #35 #84]: false
unsat
f9d032808f895312ecd1abf7bac4681d8af02f4c 44 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#11 := (- f4 f3)
#12 := (- #11)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#63 := (iff #14 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #14 #58)
#56 := (iff #13 true)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#51 := (= #37 #37)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (= #12 #37)
#40 := (* -1::Real f3)
#41 := (+ #40 f4)
#44 := (- #41)
#47 := (= #44 #37)
#48 := [rewrite]: #47
#45 := (= #12 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#38 := (= #10 #37)
#39 := [rewrite]: #38
#53 := [monotonicity #39 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#34 := [asserted]: #14
[mp #34 #64]: false
unsat
f5fd5763c194a7060b7d3c31354e945c4bbe4814 42 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#11 := (- f4)
#12 := (+ #11 f3)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#61 := (iff #14 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #14 #56)
#54 := (iff #13 true)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#49 := (= #37 #37)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #13 #49)
#47 := (= #12 #37)
#42 := (+ #36 f3)
#45 := (= #42 #37)
#46 := [rewrite]: #45
#43 := (= #12 #42)
#40 := (= #11 #36)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#38 := (= #10 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
95caa8e9312490ba9ace8256d848ea1af589c930 48 0
#2 := false
decl f5 :: Real
#11 := f5
decl f4 :: Real
#9 := f4
#13 := (+ f4 f5)
decl f3 :: Real
#8 := f3
#14 := (- f3 #13)
#10 := (- f3 f4)
#12 := (- #10 f5)
#15 := (= #12 #14)
#16 := (not #15)
#66 := (iff #16 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #16 #61)
#59 := (iff #15 true)
#37 := -1::Real
#45 := (* -1::Real f5)
#38 := (* -1::Real f4)
#46 := (+ #38 #45)
#47 := (+ f3 #46)
#54 := (= #47 #47)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #15 #54)
#52 := (= #14 #47)
#53 := [rewrite]: #52
#50 := (= #12 #47)
#39 := (+ f3 #38)
#42 := (- #39 f5)
#48 := (= #42 #47)
#49 := [rewrite]: #48
#43 := (= #12 #42)
#40 := (= #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#51 := [trans #44 #49]: #50
#56 := [monotonicity #51 #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#36 := [asserted]: #16
[mp #36 #67]: false
unsat
9268db787809f0a583b8abe2865d617f6de5f8b3 26 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#10 := (* f3 0::Real)
#11 := (= #10 0::Real)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Real 0::Real)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
cfd2d609b4c2acdff8e2c92b7abeb35796f42074 26 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#10 := (* 0::Real f3)
#11 := (= #10 0::Real)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Real 0::Real)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
47353b900bc68ce2e886059dcd04ac50fb7094fa 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 1::Real
#10 := (* f3 1::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
8040bc6506c5d4dcc023aa72dae05d2d6e32e35f 26 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 1::Real
#10 := (* 1::Real f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
4677e87ab7e0b998d5363f7ebb364e3f3c6ab1e8 40 0
#2 := false
decl f3 :: Real
#8 := f3
#12 := (- f3)
#9 := 1::Real
#10 := (- 1::Real)
#11 := (* f3 #10)
#13 := (= #11 #12)
#14 := (not #13)
#60 := (iff #14 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#35 := -1::Real
#41 := (* -1::Real f3)
#48 := (= #41 #41)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (= #12 #41)
#47 := [rewrite]: #46
#44 := (= #11 #41)
#38 := (* f3 -1::Real)
#42 := (= #38 #41)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #10 -1::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#50 := [monotonicity #45 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#34 := [asserted]: #14
[mp #34 #61]: false
unsat
492e40909f53004b845757b180e8cdede75e5952 35 0
#2 := false
decl f3 :: Real
#10 := f3
#12 := (- f3)
#8 := 1::Real
#9 := (- 1::Real)
#11 := (* #9 f3)
#13 := (= #11 #12)
#14 := (not #13)
#55 := (iff #14 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #14 #50)
#48 := (iff #13 true)
#35 := -1::Real
#38 := (* -1::Real f3)
#43 := (= #38 #38)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (= #12 #38)
#42 := [rewrite]: #41
#39 := (= #11 #38)
#36 := (= #9 -1::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [monotonicity #40 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#34 := [asserted]: #14
[mp #34 #56]: false
unsat
b2af4404d7b254702c70ed75613252bd5ca4ca66 28 0
#2 := false
#8 := 3::Real
decl f3 :: Real
#9 := f3
#11 := (* f3 3::Real)
#10 := (* 3::Real f3)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
7f36309c810a189f03d30657a767073413e0a633 30 0
#2 := false
#8 := 1::Real
#9 := 2::Real
#10 := (/ 1::Real 2::Real)
#11 := (< #10 1::Real)
#12 := (not #11)
#51 := (iff #12 false)
#33 := 1/2::Real
#36 := (< 1/2::Real 1::Real)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#34 := (= #10 1/2::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
ccf056a1d000a2f5db9acd154a1e12ae03fe47c3 27 0
#2 := false
#9 := 3::Real
#8 := 1::Real
#10 := (/ 1::Real 3::Real)
#11 := (= #10 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#33 := 1/3::Real
#36 := (= 1/3::Real 1/3::Real)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (= #10 1/3::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#32 := [asserted]: #12
[mp #32 #49]: false
unsat
0561d9f0efd34ebe23cfd267e2f9c9ab1b730a91 48 0
#2 := false
#9 := 3::Real
#8 := 1::Real
#12 := (- 1::Real)
#13 := (/ #12 3::Real)
#10 := (- 3::Real)
#11 := (/ 1::Real #10)
#14 := (= #11 #13)
#15 := (not #14)
#69 := (iff #15 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #15 #64)
#62 := (iff #14 true)
#42 := -1/3::Real
#57 := (= -1/3::Real -1/3::Real)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #14 #57)
#55 := (= #13 -1/3::Real)
#47 := -1::Real
#50 := (/ -1::Real 3::Real)
#53 := (= #50 -1/3::Real)
#54 := [rewrite]: #53
#51 := (= #13 #50)
#48 := (= #12 -1::Real)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#45 := (= #11 -1/3::Real)
#36 := -3::Real
#39 := (/ 1::Real -3::Real)
#43 := (= #39 -1/3::Real)
#44 := [rewrite]: #43
#40 := (= #11 #39)
#37 := (= #10 -3::Real)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#59 := [monotonicity #46 #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#35 := [asserted]: #15
[mp #35 #70]: false
unsat
36baa91bad72cdcdeb69c09cae275d7dd51d0ec0 36 0
#2 := false
#10 := 3::Real
#8 := 1::Real
#9 := (- 1::Real)
#11 := (/ #9 3::Real)
#12 := (= #11 #11)
#13 := (not #12)
#57 := (iff #13 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #13 #52)
#50 := (iff #12 true)
#40 := -1/3::Real
#45 := (= -1/3::Real -1/3::Real)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #12 #45)
#43 := (= #11 -1/3::Real)
#34 := -1::Real
#37 := (/ -1::Real 3::Real)
#41 := (= #37 -1/3::Real)
#42 := [rewrite]: #41
#38 := (= #11 #37)
#35 := (= #9 -1::Real)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#44 := [trans #39 #42]: #43
#47 := [monotonicity #44 #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#33 := [asserted]: #13
[mp #33 #58]: false
unsat
27179242be2af6441aee8a632ff4f9f46f4559e7 43 0
#2 := false
#10 := 3::Real
#8 := 1::Real
#13 := (/ 1::Real 3::Real)
#11 := (- 3::Real)
#9 := (- 1::Real)
#12 := (/ #9 #11)
#14 := (= #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#45 := 1/3::Real
#52 := (= 1/3::Real 1/3::Real)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (= #13 1/3::Real)
#51 := [rewrite]: #50
#48 := (= #12 1/3::Real)
#39 := -3::Real
#36 := -1::Real
#42 := (/ -1::Real -3::Real)
#46 := (= #42 1/3::Real)
#47 := [rewrite]: #46
#43 := (= #12 #42)
#40 := (= #11 -3::Real)
#41 := [rewrite]: #40
#37 := (= #9 -1::Real)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #41]: #43
#49 := [trans #44 #47]: #48
#54 := [monotonicity #49 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
f8feec24442a22841814d6bc2bb6f89a1a5ccdca 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 1::Real
#10 := (/ f3 1::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
c05f02963ca1f0c7b2cf36a8d547885cab5aa79a 60 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#68 := 2/3::Real
#69 := (* 2/3::Real f3)
#70 := (<= #69 0::Real)
#66 := (not #70)
#55 := (<= f3 0::Real)
#72 := (or #55 #66)
#75 := (not #72)
#11 := 3::Real
#12 := (/ f3 3::Real)
#13 := (< #12 f3)
#10 := (< 0::Real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#78 := (iff #15 #75)
#36 := 1/3::Real
#37 := (* 1/3::Real f3)
#40 := (< #37 f3)
#46 := (not #10)
#47 := (or #46 #40)
#52 := (not #47)
#76 := (iff #52 #75)
#73 := (iff #47 #72)
#67 := (iff #40 #66)
#71 := [rewrite]: #67
#64 := (iff #46 #55)
#56 := (not #55)
#59 := (not #56)
#62 := (iff #59 #55)
#63 := [rewrite]: #62
#60 := (iff #46 #59)
#57 := (iff #10 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#74 := [monotonicity #65 #71]: #73
#77 := [monotonicity #74]: #76
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#43 := (implies #10 #40)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #14 #43)
#41 := (iff #13 #40)
#38 := (= #12 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [monotonicity #51]: #53
#79 := [trans #54 #77]: #78
#35 := [asserted]: #15
#80 := [mp #35 #79]: #75
#82 := [not-or-elim #80]: #70
#81 := [not-or-elim #80]: #56
[th-lemma arith farkas -2/3 1 #81 #82]: false
unsat
9b3f58b1809134cb88eb2695df7f6a346a6afe80 60 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#70 := 2/3::Real
#71 := (* 2/3::Real f3)
#68 := (>= #71 0::Real)
#66 := (not #68)
#57 := (>= f3 0::Real)
#72 := (or #57 #66)
#75 := (not #72)
#11 := 3::Real
#12 := (/ f3 3::Real)
#13 := (< f3 #12)
#10 := (< f3 0::Real)
#14 := (implies #10 #13)
#15 := (not #14)
#78 := (iff #15 #75)
#36 := 1/3::Real
#37 := (* 1/3::Real f3)
#40 := (< f3 #37)
#46 := (not #10)
#47 := (or #46 #40)
#52 := (not #47)
#76 := (iff #52 #75)
#73 := (iff #47 #72)
#67 := (iff #40 #66)
#69 := [rewrite]: #67
#64 := (iff #46 #57)
#55 := (not #57)
#59 := (not #55)
#62 := (iff #59 #57)
#63 := [rewrite]: #62
#60 := (iff #46 #59)
#56 := (iff #10 #55)
#58 := [rewrite]: #56
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#74 := [monotonicity #65 #69]: #73
#77 := [monotonicity #74]: #76
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#43 := (implies #10 #40)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #14 #43)
#41 := (iff #13 #40)
#38 := (= #12 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [monotonicity #51]: #53
#79 := [trans #54 #77]: #78
#35 := [asserted]: #15
#80 := [mp #35 #79]: #75
#82 := [not-or-elim #80]: #68
#81 := [not-or-elim #80]: #55
[th-lemma arith farkas -2/3 1 #81 #82]: false
unsat
445e35b9311219b2f5634562f77afc853349ceea 36 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 3::Real
#10 := (/ f3 3::Real)
#11 := (* 3::Real #10)
#12 := (= #11 f3)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#44 := (= f3 f3)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #12 #44)
#34 := 1/3::Real
#35 := (* 1/3::Real f3)
#38 := (* 3::Real #35)
#41 := (= #38 f3)
#42 := [rewrite]: #41
#39 := (= #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [trans #40 #42]: #12
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#33 := [asserted]: #13
[mp #33 #57]: false
unsat
c9d4409876d543b534cb12358001a3188eb10d21 35 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 3::Real
#10 := (* f3 3::Real)
#11 := (/ #10 3::Real)
#12 := (= #11 f3)
#13 := (not #12)
#55 := (iff #13 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #13 #50)
#48 := (iff #12 true)
#43 := (= f3 f3)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#34 := (* 3::Real f3)
#37 := (/ #34 3::Real)
#40 := (= #37 f3)
#41 := [rewrite]: #40
#38 := (= #11 #37)
#35 := (= #10 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [trans #39 #41]: #12
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#33 := [asserted]: #13
[mp #33 #56]: false
unsat
b7467d5d6041c1b17f2b5e32374743df439ee2c2 62 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#70 := 1/3::Real
#71 := (* 1/3::Real f3)
#72 := (<= #71 0::Real)
#68 := (not #72)
#57 := (<= f3 0::Real)
#74 := (or #57 #68)
#77 := (not #74)
#13 := 3::Real
#11 := 2::Real
#12 := (* 2::Real f3)
#14 := (/ #12 3::Real)
#15 := (< #14 f3)
#10 := (< 0::Real f3)
#16 := (implies #10 #15)
#17 := (not #16)
#80 := (iff #17 #77)
#39 := 2/3::Real
#40 := (* 2/3::Real f3)
#42 := (< #40 f3)
#48 := (not #10)
#49 := (or #48 #42)
#54 := (not #49)
#78 := (iff #54 #77)
#75 := (iff #49 #74)
#69 := (iff #42 #68)
#73 := [rewrite]: #69
#66 := (iff #48 #57)
#58 := (not #57)
#61 := (not #58)
#64 := (iff #61 #57)
#65 := [rewrite]: #64
#62 := (iff #48 #61)
#59 := (iff #10 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#76 := [monotonicity #67 #73]: #75
#79 := [monotonicity #76]: #78
#55 := (iff #17 #54)
#52 := (iff #16 #49)
#45 := (implies #10 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #16 #45)
#43 := (iff #15 #42)
#38 := (= #14 #40)
#41 := [rewrite]: #38
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#56 := [monotonicity #53]: #55
#81 := [trans #56 #79]: #80
#37 := [asserted]: #17
#82 := [mp #37 #81]: #77
#84 := [not-or-elim #82]: #72
#83 := [not-or-elim #82]: #58
[th-lemma arith farkas -1/3 1 #83 #84]: false
unsat
3b59732be5ac2fe610c9e2843a63e7a1830b9838 62 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#72 := 1/3::Real
#73 := (* 1/3::Real f3)
#70 := (>= #73 0::Real)
#68 := (not #70)
#59 := (>= f3 0::Real)
#74 := (or #59 #68)
#77 := (not #74)
#13 := 3::Real
#11 := 2::Real
#12 := (* 2::Real f3)
#14 := (/ #12 3::Real)
#15 := (< f3 #14)
#10 := (< f3 0::Real)
#16 := (implies #10 #15)
#17 := (not #16)
#80 := (iff #17 #77)
#39 := 2/3::Real
#40 := (* 2/3::Real f3)
#42 := (< f3 #40)
#48 := (not #10)
#49 := (or #48 #42)
#54 := (not #49)
#78 := (iff #54 #77)
#75 := (iff #49 #74)
#69 := (iff #42 #68)
#71 := [rewrite]: #69
#66 := (iff #48 #59)
#57 := (not #59)
#61 := (not #57)
#64 := (iff #61 #59)
#65 := [rewrite]: #64
#62 := (iff #48 #61)
#58 := (iff #10 #57)
#60 := [rewrite]: #58
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#76 := [monotonicity #67 #71]: #75
#79 := [monotonicity #76]: #78
#55 := (iff #17 #54)
#52 := (iff #16 #49)
#45 := (implies #10 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #16 #45)
#43 := (iff #15 #42)
#38 := (= #14 #40)
#41 := [rewrite]: #38
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#56 := [monotonicity #53]: #55
#81 := [trans #56 #79]: #80
#37 := [asserted]: #17
#82 := [mp #37 #81]: #77
#84 := [not-or-elim #82]: #70
#83 := [not-or-elim #82]: #57
[th-lemma arith farkas -1/3 1 #83 #84]: false
unsat
78ae7121e195bacc5f4b6db83b123df8490f9dac 75 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#35 := -1::Real
#36 := (* -1::Real f3)
#48 := (>= f3 0::Real)
#55 := (ite #48 f3 #36)
#75 := (* -1::Real #55)
#84 := (+ #36 #75)
#93 := (<= #84 0::Real)
#80 := (= #36 #55)
#49 := (not #48)
#76 := (+ f3 #75)
#83 := (<= #76 0::Real)
#79 := (= f3 #55)
#85 := [hypothesis]: #48
#81 := (or #49 #79)
#82 := [def-axiom]: #81
#86 := [unit-resolution #82 #85]: #79
#87 := (not #79)
#88 := (or #87 #83)
#89 := [th-lemma arith triangle-eq]: #88
#90 := [unit-resolution #89 #86]: #83
#64 := (>= #55 0::Real)
#68 := (not #64)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#13 := (<= 0::Real #12)
#14 := (not #13)
#71 := (iff #14 #68)
#39 := (ite #10 #36 f3)
#42 := (<= 0::Real #39)
#45 := (not #42)
#69 := (iff #45 #68)
#66 := (iff #42 #64)
#60 := (<= 0::Real #55)
#63 := (iff #60 #64)
#65 := [rewrite]: #63
#61 := (iff #42 #60)
#58 := (= #39 #55)
#52 := (ite #49 #36 f3)
#56 := (= #52 #55)
#57 := [rewrite]: #56
#53 := (= #39 #52)
#50 := (iff #10 #49)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#67 := [trans #62 #65]: #66
#70 := [monotonicity #67]: #69
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (= #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#72 := [trans #47 #70]: #71
#34 := [asserted]: #14
#73 := [mp #34 #72]: #68
#91 := [th-lemma arith farkas -1 1 1 #85 #73 #90]: false
#92 := [lemma #91]: #49
#77 := (or #48 #80)
#78 := [def-axiom]: #77
#95 := [unit-resolution #78 #92]: #80
#96 := (not #80)
#97 := (or #96 #93)
#98 := [th-lemma arith triangle-eq]: #97
#99 := [unit-resolution #98 #95]: #93
[th-lemma arith farkas 1 1 1 #92 #73 #99]: false
unsat
ff789d0b06f4e86f73b38d800d6fea471c529be0 128 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#37 := -1::Real
#38 := (* -1::Real f3)
#137 := (<= #38 0::Real)
#136 := (= #38 0::Real)
#69 := (>= f3 0::Real)
#76 := (ite #69 f3 #38)
#85 := (= #76 0::Real)
#105 := (= f3 #76)
#127 := (not #105)
#101 := (not #85)
#128 := (iff #101 #127)
#125 := (iff #85 #105)
#123 := (iff #105 #85)
#81 := (= 0::Real #76)
#84 := (iff #81 #85)
#122 := [commutativity]: #84
#120 := (iff #105 #81)
#14 := (= f3 0::Real)
#118 := [hypothesis]: #101
#115 := (or #14 #85)
#63 := (not #14)
#92 := (iff #63 #85)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#13 := (= #12 0::Real)
#15 := (iff #13 #14)
#16 := (not #15)
#97 := (iff #16 #92)
#41 := (ite #10 #38 f3)
#47 := (= 0::Real #41)
#64 := (iff #47 #63)
#95 := (iff #64 #92)
#89 := (iff #85 #63)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #64 #89)
#87 := (iff #47 #85)
#86 := [rewrite]: #84
#82 := (iff #47 #81)
#79 := (= #41 #76)
#70 := (not #69)
#73 := (ite #70 #38 f3)
#77 := (= #73 #76)
#78 := [rewrite]: #77
#74 := (= #41 #73)
#71 := (iff #10 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#80 := [trans #75 #78]: #79
#83 := [monotonicity #80]: #82
#88 := [trans #83 #86]: #87
#91 := [monotonicity #88]: #90
#96 := [trans #91 #94]: #95
#67 := (iff #16 #64)
#55 := (iff #14 #47)
#60 := (not #55)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#52 := (iff #47 #14)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #13 #47)
#44 := (= #41 0::Real)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #13 #44)
#42 := (= #12 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#98 := [trans #68 #96]: #97
#36 := [asserted]: #16
#99 := [mp #36 #98]: #92
#102 := (not #92)
#113 := (or #14 #85 #102)
#114 := [def-axiom]: #113
#116 := [unit-resolution #114 #99]: #115
#119 := [unit-resolution #116 #118]: #14
#121 := [monotonicity #119]: #120
#124 := [trans #121 #122]: #123
#126 := [symm #124]: #125
#129 := [monotonicity #126]: #128
#130 := [mp #118 #129]: #127
#131 := (or #63 #69)
#132 := [th-lemma arith triangle-eq]: #131
#133 := [unit-resolution #132 #119]: #69
#107 := (or #70 #105)
#108 := [def-axiom]: #107
#134 := [unit-resolution #108 #133 #130]: false
#135 := [lemma #134]: #85
#106 := (= #38 #76)
#144 := (iff #63 #127)
#142 := (iff #14 #105)
#140 := (iff #105 #14)
#141 := [monotonicity #135]: #140
#143 := [symm #141]: #142
#145 := [monotonicity #143]: #144
#111 := (or #63 #101)
#109 := (or #63 #101 #102)
#110 := [def-axiom]: #109
#112 := [unit-resolution #110 #99]: #111
#139 := [unit-resolution #112 #135]: #63
#146 := [mp #139 #145]: #127
#147 := [unit-resolution #108 #146]: #70
#103 := (or #69 #106)
#104 := [def-axiom]: #103
#148 := [unit-resolution #104 #147]: #106
#149 := [trans #148 #135]: #136
#150 := (not #136)
#151 := (or #150 #137)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #149]: #137
[th-lemma arith farkas 1 1 #147 #153]: false
unsat
a4051d759a69912da335fbbe489e426099dc4c5c 103 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#64 := (>= f3 0::Real)
#37 := -1::Real
#38 := (* -1::Real f3)
#111 := (* -1::Real #38)
#112 := (+ f3 #111)
#114 := (>= #112 0::Real)
#110 := (= f3 #38)
#71 := (ite #64 f3 #38)
#118 := (= #71 #38)
#99 := (= #38 #71)
#65 := (not #64)
#115 := [hypothesis]: #65
#102 := (or #64 #99)
#97 := [def-axiom]: #102
#116 := [unit-resolution #97 #115]: #99
#119 := [symm #116]: #118
#76 := (= f3 #71)
#108 := (or #64 #76)
#86 := (iff #65 #76)
#12 := (- f3)
#11 := (< f3 0::Real)
#13 := (ite #11 #12 f3)
#14 := (= #13 f3)
#10 := (<= 0::Real f3)
#15 := (iff #10 #14)
#16 := (not #15)
#91 := (iff #16 #86)
#58 := (not #10)
#41 := (ite #11 #38 f3)
#47 := (= f3 #41)
#59 := (iff #47 #58)
#89 := (iff #59 #86)
#83 := (iff #76 #65)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #59 #83)
#81 := (iff #58 #65)
#79 := (iff #10 #64)
#80 := [rewrite]: #79
#82 := [monotonicity #80]: #81
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#85 := [monotonicity #78 #82]: #84
#90 := [trans #85 #88]: #89
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 f3)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#42 := (= #13 #41)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#92 := [trans #63 #90]: #91
#36 := [asserted]: #16
#93 := [mp #36 #92]: #86
#95 := (not #86)
#106 := (or #64 #76 #95)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #93]: #108
#117 := [unit-resolution #109 #115]: #76
#120 := [trans #117 #119]: #110
#121 := (not #110)
#122 := (or #121 #114)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #114
#125 := [th-lemma arith farkas 2 1 #115 #124]: false
#126 := [lemma #125]: #64
#100 := (or #65 #76)
#101 := [def-axiom]: #100
#113 := [unit-resolution #101 #126]: #76
#98 := (not #76)
#104 := (or #65 #98)
#96 := (or #65 #98 #95)
#103 := [def-axiom]: #96
#105 := [unit-resolution #103 #93]: #104
[unit-resolution #105 #113 #126]: false
unsat
571ce5e288c8e7c603db7dc5836a06cad2fe7128 152 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#37 := -1::Real
#38 := (* -1::Real f3)
#64 := (>= f3 0::Real)
#71 := (ite #64 f3 #38)
#114 := (* -1::Real #71)
#164 := (+ f3 #114)
#165 := (<= #164 0::Real)
#101 := (= f3 #71)
#115 := (+ #38 #114)
#117 := (>= #115 0::Real)
#76 := (= #38 #71)
#65 := (not #64)
#149 := [hypothesis]: #65
#104 := (or #64 #76)
#99 := [def-axiom]: #104
#150 := [unit-resolution #99 #149]: #76
#143 := (not #76)
#151 := (or #143 #117)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #150]: #117
#81 := (+ f3 #71)
#100 := (<= #81 0::Real)
#158 := (not #100)
#97 := (>= #81 0::Real)
#116 := (<= #115 0::Real)
#80 := (= #81 0::Real)
#98 := (not #80)
#136 := (not #97)
#137 := [hypothesis]: #136
#138 := (or #98 #97)
#139 := [th-lemma arith triangle-eq]: #138
#140 := [unit-resolution #139 #137]: #98
#134 := (or #65 #80)
#121 := (= f3 0::Real)
#10 := (<= f3 0::Real)
#118 := [hypothesis]: #98
#112 := (or #10 #80)
#58 := (not #10)
#88 := (iff #58 #80)
#12 := (- f3)
#11 := (< f3 0::Real)
#13 := (ite #11 #12 f3)
#14 := (= #13 #12)
#15 := (iff #10 #14)
#16 := (not #15)
#93 := (iff #16 #88)
#41 := (ite #11 #38 f3)
#47 := (= #38 #41)
#59 := (iff #47 #58)
#91 := (iff #59 #88)
#85 := (iff #80 #58)
#89 := (iff #85 #88)
#90 := [rewrite]: #89
#86 := (iff #59 #85)
#83 := (iff #47 #80)
#79 := (iff #76 #80)
#82 := [rewrite]: #79
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#87 := [monotonicity #84]: #86
#92 := [trans #87 #90]: #91
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 #38)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#42 := (= #13 #41)
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43 #40]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#94 := [trans #63 #92]: #93
#36 := [asserted]: #16
#95 := [mp #36 #94]: #88
#105 := (not #88)
#110 := (or #10 #80 #105)
#111 := [def-axiom]: #110
#113 := [unit-resolution #111 #95]: #112
#119 := [unit-resolution #113 #118]: #10
#120 := [hypothesis]: #64
#122 := [th-lemma arith eq-propagate 0 0 #120 #119]: #121
#130 := (= #81 f3)
#128 := (= #71 f3)
#102 := (or #65 #101)
#103 := [def-axiom]: #102
#123 := [unit-resolution #103 #120]: #101
#129 := [symm #123]: #128
#126 := (= #81 #71)
#124 := (= #71 #81)
#125 := [th-lemma arith eq-propagate 1 1 #120 #119]: #124
#127 := [symm #125]: #126
#131 := [trans #127 #129]: #130
#132 := [trans #131 #122]: #80
#133 := [unit-resolution #118 #132]: false
#135 := [lemma #133]: #134
#141 := [unit-resolution #135 #140]: #65
#142 := [unit-resolution #99 #141]: #76
#144 := (or #143 #116)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #116
#147 := [th-lemma arith farkas 1 1 #137 #146]: false
#148 := [lemma #147]: #97
#154 := (or #64 #10)
#155 := [th-lemma arith farkas 1 1]: #154
#156 := [unit-resolution #155 #149]: #10
#108 := (or #58 #98)
#106 := (or #58 #98 #105)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #95]: #108
#157 := [unit-resolution #109 #156]: #98
#159 := (or #80 #158 #136)
#160 := [th-lemma arith triangle-eq]: #159
#161 := [unit-resolution #160 #157 #148]: #158
#162 := [th-lemma arith farkas 1 1 #161 #153]: false
#163 := [lemma #162]: #64
#167 := [unit-resolution #103 #163]: #101
#168 := (not #101)
#169 := (or #168 #165)
#170 := [th-lemma arith triangle-eq]: #169
#171 := [unit-resolution #170 #167]: #165
#172 := [unit-resolution #135 #163]: #80
#173 := (or #98 #100)
#174 := [th-lemma arith triangle-eq]: #173
#175 := [unit-resolution #174 #172]: #100
#176 := [unit-resolution #109 #172]: #58
[th-lemma arith farkas 2 1 1 #176 #175 #171]: false
unsat
f4a9c9097a96542eacf222bbd562a802c9ede1c1 114 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#38 := -1::Real
#39 := (* -1::Real f3)
#70 := (>= f3 0::Real)
#77 := (ite #70 f3 #39)
#91 := (* -1::Real #77)
#130 := (+ #39 #91)
#140 := (<= #130 0::Real)
#117 := (= #39 #77)
#71 := (not #70)
#128 := (+ f3 #91)
#129 := (<= #128 0::Real)
#116 := (= f3 #77)
#131 := [hypothesis]: #70
#118 := (or #71 #116)
#119 := [def-axiom]: #118
#132 := [unit-resolution #119 #131]: #116
#133 := (not #116)
#134 := (or #133 #129)
#135 := [th-lemma arith triangle-eq]: #134
#136 := [unit-resolution #135 #132]: #129
#86 := (>= #77 0::Real)
#85 := (not #86)
#97 := (ite #86 #77 #91)
#102 := (= #77 #97)
#105 := (not #102)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#14 := (- #12)
#13 := (< #12 0::Real)
#15 := (ite #13 #14 #12)
#16 := (= #15 #12)
#17 := (not #16)
#108 := (iff #17 #105)
#42 := (ite #10 #39 f3)
#51 := (* -1::Real #42)
#45 := (< #42 0::Real)
#56 := (ite #45 #51 #42)
#62 := (= #42 #56)
#67 := (not #62)
#106 := (iff #67 #105)
#103 := (iff #62 #102)
#100 := (= #56 #97)
#94 := (ite #85 #91 #77)
#98 := (= #94 #97)
#99 := [rewrite]: #98
#95 := (= #56 #94)
#80 := (= #42 #77)
#74 := (ite #71 #39 f3)
#78 := (= #74 #77)
#79 := [rewrite]: #78
#75 := (= #42 #74)
#72 := (iff #10 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#92 := (= #51 #91)
#93 := [monotonicity #81]: #92
#89 := (iff #45 #85)
#82 := (< #77 0::Real)
#87 := (iff #82 #85)
#88 := [rewrite]: #87
#83 := (iff #45 #82)
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#96 := [monotonicity #90 #93 #81]: #95
#101 := [trans #96 #99]: #100
#104 := [monotonicity #81 #101]: #103
#107 := [monotonicity #104]: #106
#68 := (iff #17 #67)
#65 := (iff #16 #62)
#59 := (= #56 #42)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #16 #59)
#43 := (= #12 #42)
#40 := (= #11 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#57 := (= #15 #56)
#54 := (= #14 #51)
#48 := (- #42)
#52 := (= #48 #51)
#53 := [rewrite]: #52
#49 := (= #14 #48)
#50 := [monotonicity #44]: #49
#55 := [trans #50 #53]: #54
#46 := (iff #13 #45)
#47 := [monotonicity #44]: #46
#58 := [monotonicity #47 #55 #44]: #57
#61 := [monotonicity #58 #44]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#109 := [trans #69 #107]: #108
#37 := [asserted]: #17
#110 := [mp #37 #109]: #105
#113 := (or #85 #102)
#120 := [def-axiom]: #113
#137 := [unit-resolution #120 #110]: #85
#138 := [th-lemma arith farkas -1 1 1 #131 #137 #136]: false
#139 := [lemma #138]: #71
#114 := (or #70 #117)
#115 := [def-axiom]: #114
#142 := [unit-resolution #115 #139]: #117
#143 := (not #117)
#144 := (or #143 #140)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #140
[th-lemma arith farkas 1 1 1 #139 #137 #146]: false
unsat
d767bb2fd46823ea99ed2a2f48afd14fa043b714 57 0
#2 := false
#39 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Real)
#43 := (ite #40 f3 f4)
#51 := (* -1::Real #43)
#60 := (+ f4 #51)
#74 := (>= #60 0::Real)
#64 := (= f4 #43)
#65 := (not #40)
#63 := (= f3 #43)
#68 := (not #63)
#52 := (+ f3 #51)
#50 := (>= #52 0::Real)
#56 := (not #50)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f3)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #50)
#46 := (<= #43 f3)
#49 := (iff #46 #50)
#53 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #50)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #74)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #74
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
a0d049d55a4b6d63a7a4486a6dd0f26ecaa6ada7 57 0
#2 := false
#39 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Real)
#43 := (ite #40 f3 f4)
#50 := (* -1::Real #43)
#51 := (+ f4 #50)
#49 := (>= #51 0::Real)
#56 := (not #49)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f4)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #49)
#46 := (<= #43 f4)
#52 := (iff #46 #49)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f4 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f3 #50)
#68 := (>= #60 0::Real)
#63 := (= f3 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #68)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #68
#75 := [th-lemma arith farkas -1 1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #49)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
9c0695856bacfb99d21d573df84afab5e5b181f4 103 0
#2 := false
#48 := 0::Real
decl f5 :: Real
#11 := f5
decl f4 :: Real
#9 := f4
#46 := -1::Real
#56 := (* -1::Real f5)
#66 := (+ f4 #56)
#67 := (<= #66 0::Real)
#70 := (ite #67 f4 f5)
#78 := (* -1::Real #70)
decl f3 :: Real
#8 := f3
#79 := (+ f3 #78)
#77 := (>= #79 0::Real)
#76 := (not #77)
#57 := (+ f3 #56)
#55 := (>= #57 0::Real)
#54 := (not #55)
#50 := (* -1::Real f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Real)
#47 := (not #49)
#60 := (and #47 #54)
#63 := (not #60)
#84 := (or #63 #76)
#87 := (not #84)
#14 := (<= f4 f5)
#15 := (ite #14 f4 f5)
#16 := (< f3 #15)
#12 := (< f3 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #76)
#73 := (< f3 #70)
#80 := (iff #73 #76)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #54)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #77
#93 := [not-or-elim #92]: #60
#95 := [and-elim #93]: #54
#101 := (+ f5 #78)
#118 := (<= #101 0::Real)
#107 := (= f5 #70)
#108 := (not #67)
#106 := (= f4 #70)
#113 := (not #106)
#103 := (+ f4 #78)
#100 := (<= #103 0::Real)
#110 := (not #100)
#94 := [and-elim #93]: #47
#98 := [hypothesis]: #100
#99 := [th-lemma arith farkas -1 -1 1 #98 #94 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #100)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #118)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #118
[th-lemma arith farkas -1 -1 1 #125 #95 #96]: false
unsat
b696c36b14d9aa5d8537f0123bf4636c0a97e771 94 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#41 := 0::Real
#38 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Real)
#51 := (ite #49 f4 f3)
#42 := (<= #40 0::Real)
#45 := (ite #42 f3 f4)
#54 := (= #45 #51)
#61 := (= f4 #51)
#66 := (not #42)
#64 := (= f3 #45)
#106 := (not #64)
#68 := (= f3 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#74 := (= f3 f4)
#65 := (= f4 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f4 f3)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#98 := [trans #97 #78]: #68
#99 := [unit-resolution #76 #98]: false
#100 := [lemma #99]: #68
#102 := (= #45 f3)
#101 := [hypothesis]: #64
#103 := [symm #101]: #102
#104 := [trans #103 #100]: #54
#105 := [unit-resolution #60 #104]: false
#107 := [lemma #105]: #106
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#108 := [unit-resolution #62 #107]: #66
#110 := (or #49 #42)
#111 := [th-lemma arith farkas 1 1]: #110
#112 := [unit-resolution #111 #108]: #49
#113 := [unit-resolution #71 #112]: #61
#116 := (= #45 f4)
#109 := [unit-resolution #37 #108]: #65
#117 := [symm #109]: #116
#118 := [trans #117 #113]: #54
[unit-resolution #60 #118]: false
unsat
71758f92000b4f0bd1ce8b23e790788bff528cd0 68 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#11 := (<= f3 0::Real)
#12 := (ite #11 f3 0::Real)
#13 := (= #12 0::Real)
#79 := (= f3 0::Real)
#53 := (>= f3 0::Real)
#54 := (not #53)
#62 := (or #13 #54)
#67 := (not #62)
#10 := (<= 0::Real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#70 := (iff #15 #67)
#36 := (= 0::Real #12)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#68 := (iff #48 #67)
#65 := (iff #43 #62)
#59 := (or #54 #13)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #43 #59)
#57 := (iff #36 #13)
#58 := [rewrite]: #57
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#61 := [monotonicity #56 #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#71 := [trans #50 #69]: #70
#35 := [asserted]: #15
#72 := [mp #35 #71]: #67
#75 := [not-or-elim #72]: #53
#73 := (not #13)
#74 := [not-or-elim #72]: #73
#81 := (or #11 #13)
#82 := [def-axiom]: #81
#80 := [unit-resolution #82 #74]: #11
#84 := (not #11)
#77 := (or #79 #84 #54)
#78 := [th-lemma arith triangle-eq]: #77
#87 := [unit-resolution #78 #80 #75]: #79
#89 := (= #12 f3)
#83 := (= f3 #12)
#85 := (or #84 #83)
#86 := [def-axiom]: #85
#88 := [unit-resolution #86 #80]: #83
#90 := [symm #88]: #89
#91 := [trans #90 #87]: #13
[unit-resolution #74 #91]: false
unsat
944eddc125ab4f02dc35653f414c25fd1dfc289a 124 0
#2 := false
#13 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#39 := -1::Real
#41 := (* -1::Real f4)
#54 := (+ f3 #41)
#55 := (<= #54 0::Real)
#58 := (ite #55 f3 f4)
#106 := (* -1::Real #58)
#107 := (+ f3 #106)
#109 := (>= #107 0::Real)
#94 := (= f3 #58)
#108 := (+ f4 #106)
#126 := (>= #108 0::Real)
#95 := (= f4 #58)
#96 := (not #55)
#137 := [hypothesis]: #96
#93 := (or #55 #95)
#90 := [def-axiom]: #93
#138 := [unit-resolution #90 #137]: #95
#129 := (not #95)
#130 := (or #129 #126)
#131 := [th-lemma arith triangle-eq]: #130
#139 := [unit-resolution #131 #138]: #126
#40 := (* -1::Real f3)
#42 := (+ #40 #41)
#12 := (+ f3 f4)
#61 := (>= #12 0::Real)
#68 := (ite #61 #12 #42)
#76 := (* -1::Real #68)
#105 := (+ #42 #76)
#125 := (<= #105 0::Real)
#98 := (= #42 #68)
#62 := (not #61)
#110 := [hypothesis]: #61
#77 := (+ #58 #76)
#78 := (<= #77 0::Real)
#83 := (not #78)
#15 := (- #12)
#14 := (< #12 0::Real)
#16 := (ite #14 #15 #12)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#17 := (<= #11 #16)
#18 := (not #17)
#86 := (iff #18 #83)
#45 := (ite #14 #42 #12)
#48 := (<= #11 #45)
#51 := (not #48)
#84 := (iff #51 #83)
#81 := (iff #48 #78)
#73 := (<= #58 #68)
#79 := (iff #73 #78)
#80 := [rewrite]: #79
#74 := (iff #48 #73)
#71 := (= #45 #68)
#65 := (ite #62 #42 #12)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #45 #65)
#63 := (iff #14 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#59 := (= #11 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#75 := [monotonicity #60 #72]: #74
#82 := [trans #75 #80]: #81
#85 := [monotonicity #82]: #84
#52 := (iff #18 #51)
#49 := (iff #17 #48)
#46 := (= #16 #45)
#43 := (= #15 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#87 := [trans #53 #85]: #86
#38 := [asserted]: #18
#88 := [mp #38 #87]: #83
#123 := (or #96 #62)
#111 := [hypothesis]: #55
#97 := (or #96 #94)
#92 := [def-axiom]: #97
#112 := [unit-resolution #92 #111]: #94
#113 := (not #94)
#114 := (or #113 #109)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112]: #109
#103 := (+ #12 #76)
#104 := (<= #103 0::Real)
#91 := (= #12 #68)
#99 := (or #62 #91)
#100 := [def-axiom]: #99
#117 := [unit-resolution #100 #110]: #91
#118 := (not #91)
#119 := (or #118 #104)
#120 := [th-lemma arith triangle-eq]: #119
#121 := [unit-resolution #120 #117]: #104
#122 := [th-lemma arith farkas 2 2 2 1 1 #121 #116 #88 #111 #110]: false
#124 := [lemma #122]: #123
#127 := [unit-resolution #124 #110]: #96
#128 := [unit-resolution #90 #127]: #95
#132 := [unit-resolution #131 #128]: #126
#133 := [th-lemma arith farkas 2 2 1 2 1 #121 #132 #127 #88 #110]: false
#134 := [lemma #133]: #62
#101 := (or #61 #98)
#102 := [def-axiom]: #101
#140 := [unit-resolution #102 #134]: #98
#141 := (not #98)
#142 := (or #141 #125)
#143 := [th-lemma arith triangle-eq]: #142
#144 := [unit-resolution #143 #140]: #125
#145 := [th-lemma arith farkas 3/2 1/2 1 1 1 #134 #137 #88 #144 #139]: false
#146 := [lemma #145]: #55
#147 := [unit-resolution #92 #146]: #94
#148 := [unit-resolution #115 #147]: #109
[th-lemma arith farkas 1/2 3/2 1 1 1 #146 #134 #88 #144 #148]: false
unsat
c6a40e55705377f4a18787e86ca1381bc32f9048 57 0
#2 := false
#39 := 0::Real
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Real)
#43 := (ite #40 f4 f3)
#49 := (* -1::Real #43)
#50 := (+ f3 #49)
#51 := (<= #50 0::Real)
#56 := (not #51)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f3 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f4 #49)
#67 := (<= #60 0::Real)
#63 := (= f4 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #67)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #67
#75 := [th-lemma arith farkas 1 -1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #51)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
08f86b81fe9ac7c3b38ce6a48d6dd15649d787f7 57 0
#2 := false
#38 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#36 := -1::Real
#40 := (* -1::Real f4)
#41 := (+ f3 #40)
#39 := (>= #41 0::Real)
#43 := (ite #39 f3 f4)
#49 := (* -1::Real #43)
#60 := (+ f4 #49)
#73 := (<= #60 0::Real)
#64 := (= f4 #43)
#65 := (not #39)
#63 := (= f3 #43)
#68 := (not #63)
#50 := (+ f3 #49)
#51 := (<= #50 0::Real)
#56 := (not #51)
#10 := (<= f4 f3)
#11 := (ite #10 f3 f4)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#37 := (iff #10 #39)
#42 := [rewrite]: #37
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #51)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #39 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #73)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #73
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
a8742c9687e5f318c69c4d286746cf373c1fed40 103 0
#2 := false
#48 := 0::Real
decl f3 :: Real
#8 := f3
decl f5 :: Real
#11 := f5
#46 := -1::Real
#54 := (* -1::Real f5)
#66 := (+ f3 #54)
#67 := (<= #66 0::Real)
#70 := (ite #67 f5 f3)
#76 := (* -1::Real #70)
decl f4 :: Real
#9 := f4
#77 := (+ f4 #76)
#78 := (<= #77 0::Real)
#79 := (not #78)
#55 := (+ f4 #54)
#56 := (<= #55 0::Real)
#57 := (not #56)
#50 := (* -1::Real f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Real)
#47 := (not #49)
#60 := (and #47 #57)
#63 := (not #60)
#84 := (or #63 #79)
#87 := (not #84)
#14 := (<= f3 f5)
#15 := (ite #14 f5 f3)
#16 := (< #15 f4)
#12 := (< f5 f4)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #79)
#73 := (< #70 f4)
#80 := (iff #73 #79)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #78
#93 := [not-or-elim #92]: #60
#94 := [and-elim #93]: #47
#100 := (+ f3 #76)
#119 := (>= #100 0::Real)
#107 := (= f3 #70)
#108 := (not #67)
#106 := (= f5 #70)
#113 := (not #106)
#103 := (+ f5 #76)
#101 := (>= #103 0::Real)
#110 := (not #101)
#95 := [and-elim #93]: #57
#98 := [hypothesis]: #101
#99 := [th-lemma arith farkas -1 -1 1 #98 #95 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #101)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #119)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #119
[th-lemma arith farkas -1 1 1 #125 #94 #96]: false
unsat
cf9d7301e2783e3a9529677f7376e191e2553752 96 0
#2 := false
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#41 := 0::Real
#38 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Real)
#51 := (ite #49 f3 f4)
#42 := (<= #40 0::Real)
#45 := (ite #42 f4 f3)
#54 := (= #45 #51)
#61 := (= f3 #51)
#66 := (not #42)
#64 := (= f4 #45)
#108 := (not #64)
#68 := (= f4 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#98 := (= f4 f3)
#74 := (= f3 f4)
#65 := (= f3 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f3 f4)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#99 := [symm #97]: #98
#100 := [trans #99 #78]: #68
#101 := [unit-resolution #76 #100]: false
#102 := [lemma #101]: #68
#104 := (= #45 f4)
#103 := [hypothesis]: #64
#105 := [symm #103]: #104
#106 := [trans #105 #102]: #54
#107 := [unit-resolution #60 #106]: false
#109 := [lemma #107]: #108
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#110 := [unit-resolution #62 #109]: #66
#112 := (or #49 #42)
#113 := [th-lemma arith farkas 1 1]: #112
#114 := [unit-resolution #113 #110]: #49
#115 := [unit-resolution #71 #114]: #61
#118 := (= #45 f3)
#111 := [unit-resolution #37 #110]: #65
#119 := [symm #111]: #118
#120 := [trans #119 #115]: #54
[unit-resolution #60 #120]: false
unsat
d5aa9479bc1880b81fc3a8f2f0ffecc7788dfa18 66 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 0::Real
#11 := (<= f3 0::Real)
#12 := (ite #11 0::Real f3)
#36 := (= f3 #12)
#87 := (= 0::Real #12)
#81 := (= #12 0::Real)
#71 := (not #36)
#53 := (>= f3 0::Real)
#54 := (not #53)
#60 := (or #36 #54)
#65 := (not #60)
#13 := (= #12 f3)
#10 := (<= 0::Real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#68 := (iff #15 #65)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#66 := (iff #48 #65)
#63 := (iff #43 #60)
#57 := (or #54 #36)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #43 #57)
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#69 := [trans #50 #67]: #68
#35 := [asserted]: #15
#70 := [mp #35 #69]: #65
#72 := [not-or-elim #70]: #71
#79 := (or #11 #36)
#80 := [def-axiom]: #79
#78 := [unit-resolution #80 #72]: #11
#82 := (not #11)
#83 := (or #82 #81)
#84 := [def-axiom]: #83
#75 := [unit-resolution #84 #78]: #81
#88 := [symm #75]: #87
#77 := (= f3 0::Real)
#73 := [not-or-elim #70]: #53
#76 := (or #77 #82 #54)
#85 := [th-lemma arith triangle-eq]: #76
#86 := [unit-resolution #85 #78 #73]: #77
#89 := [trans #86 #88]: #36
[unit-resolution #72 #89]: false
unsat
7f8cef3bf22a3ab0ad21a7a5668eaf6fccce9da2 214 0
#2 := false
#9 := 0::Real
decl f4 :: Real
#14 := f4
#43 := -1::Real
#58 := (* -1::Real f4)
#94 := (>= f4 0::Real)
#101 := (ite #94 f4 #58)
#106 := (* -1::Real #101)
#161 := (+ #58 #106)
#183 := (<= #161 0::Real)
#137 := (= #58 #101)
#95 := (not #94)
decl f3 :: Real
#8 := f3
#112 := (+ f3 #58)
#113 := (<= #112 0::Real)
#116 := (ite #113 f4 f3)
#155 := (* -1::Real #116)
#156 := (+ f4 #155)
#157 := (<= #156 0::Real)
#158 := (+ f3 #155)
#193 := (<= #158 0::Real)
#149 := (= f3 #116)
#150 := (not #113)
#148 := (= f4 #116)
#195 := [hypothesis]: #113
#151 := (or #150 #148)
#152 := [def-axiom]: #151
#196 := [unit-resolution #152 #195]: #148
#197 := (not #148)
#198 := (or #197 #157)
#199 := [th-lemma arith triangle-eq]: #198
#200 := [unit-resolution #199 #196]: #157
#179 := (not #157)
#191 := (or #95 #179)
#159 := (+ f4 #106)
#160 := (<= #159 0::Real)
#136 := (= f4 #101)
#165 := [hypothesis]: #94
#144 := (or #95 #136)
#145 := [def-axiom]: #144
#166 := [unit-resolution #145 #165]: #136
#167 := (not #136)
#168 := (or #167 #160)
#169 := [th-lemma arith triangle-eq]: #168
#170 := [unit-resolution #169 #166]: #160
#44 := (* -1::Real f3)
#79 := (>= f3 0::Real)
#86 := (ite #79 f3 #44)
#91 := (* -1::Real #86)
#164 := (+ #44 #91)
#182 := (<= #164 0::Real)
#141 := (= #44 #86)
#80 := (not #79)
#177 := [hypothesis]: #157
#180 := (or #80 #95 #179)
#125 := (+ #101 #116)
#126 := (+ #86 #125)
#123 := (>= #126 0::Real)
#129 := (not #123)
#19 := (<= f3 f4)
#20 := (ite #19 f4 f3)
#16 := (- f4)
#15 := (< f4 0::Real)
#17 := (ite #15 #16 f4)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#13 := (- #12)
#18 := (- #13 #17)
#21 := (<= #18 #20)
#22 := (not #21)
#132 := (iff #22 #129)
#61 := (ite #15 #58 f4)
#67 := (* -1::Real #61)
#47 := (ite #10 #44 f3)
#53 := (* -1::Real #47)
#68 := (+ #53 #67)
#73 := (<= #68 #20)
#76 := (not #73)
#130 := (iff #76 #129)
#127 := (iff #73 #123)
#109 := (+ #91 #106)
#119 := (<= #109 #116)
#122 := (iff #119 #123)
#124 := [rewrite]: #122
#120 := (iff #73 #119)
#117 := (= #20 #116)
#114 := (iff #19 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#110 := (= #68 #109)
#107 := (= #67 #106)
#104 := (= #61 #101)
#98 := (ite #95 #58 f4)
#102 := (= #98 #101)
#103 := [rewrite]: #102
#99 := (= #61 #98)
#96 := (iff #15 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#105 := [trans #100 #103]: #104
#108 := [monotonicity #105]: #107
#92 := (= #53 #91)
#89 := (= #47 #86)
#83 := (ite #80 #44 f3)
#87 := (= #83 #86)
#88 := [rewrite]: #87
#84 := (= #47 #83)
#81 := (iff #10 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#111 := [monotonicity #93 #108]: #110
#121 := [monotonicity #111 #118]: #120
#128 := [trans #121 #124]: #127
#131 := [monotonicity #128]: #130
#77 := (iff #22 #76)
#74 := (iff #21 #73)
#71 := (= #18 #68)
#64 := (- #53 #61)
#69 := (= #64 #68)
#70 := [rewrite]: #69
#65 := (= #18 #64)
#62 := (= #17 #61)
#59 := (= #16 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#56 := (= #13 #53)
#50 := (- #47)
#54 := (= #50 #53)
#55 := [rewrite]: #54
#51 := (= #13 #50)
#48 := (= #12 #47)
#45 := (= #11 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#57 := [trans #52 #55]: #56
#66 := [monotonicity #57 #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#133 := [trans #78 #131]: #132
#42 := [asserted]: #22
#134 := [mp #42 #133]: #129
#162 := (+ f3 #91)
#163 := (<= #162 0::Real)
#140 := (= f3 #86)
#171 := [hypothesis]: #79
#142 := (or #80 #140)
#143 := [def-axiom]: #142
#172 := [unit-resolution #143 #171]: #140
#173 := (not #140)
#174 := (or #173 #163)
#175 := [th-lemma arith triangle-eq]: #174
#176 := [unit-resolution #175 #172]: #163
#178 := [th-lemma arith farkas -2 1 -1 1 1 1 #165 #177 #171 #176 #134 #170]: false
#181 := [lemma #178]: #180
#184 := [unit-resolution #181 #165 #177]: #80
#138 := (or #79 #141)
#139 := [def-axiom]: #138
#185 := [unit-resolution #139 #184]: #141
#186 := (not #141)
#187 := (or #186 #182)
#188 := [th-lemma arith triangle-eq]: #187
#189 := [unit-resolution #188 #185]: #182
#190 := [th-lemma arith farkas 2 1 1 1 1 1 #165 #177 #134 #184 #189 #170]: false
#192 := [lemma #190]: #191
#201 := [unit-resolution #192 #200]: #95
#146 := (or #94 #137)
#147 := [def-axiom]: #146
#202 := [unit-resolution #147 #201]: #137
#203 := (not #137)
#204 := (or #203 #183)
#205 := [th-lemma arith triangle-eq]: #204
#206 := [unit-resolution #205 #202]: #183
#207 := (or #80 #94 #150)
#208 := [th-lemma arith assign-bounds 1 1]: #207
#209 := [unit-resolution #208 #201 #195]: #80
#210 := [unit-resolution #139 #209]: #141
#211 := [unit-resolution #188 #210]: #182
#212 := [th-lemma arith farkas 1 1 1 1 1 #200 #134 #209 #211 #206]: false
#213 := [lemma #212]: #150
#153 := (or #113 #149)
#154 := [def-axiom]: #153
#224 := [unit-resolution #154 #213]: #149
#225 := (not #149)
#226 := (or #225 #193)
#227 := [th-lemma arith triangle-eq]: #226
#228 := [unit-resolution #227 #224]: #193
#231 := (not #193)
#232 := (or #157 #113 #231)
#233 := [th-lemma arith assign-bounds 1 1]: #232
#234 := [unit-resolution #233 #213 #228]: #157
#235 := [unit-resolution #192 #234]: #95
#236 := [unit-resolution #147 #235]: #137
#237 := [unit-resolution #205 #236]: #183
#216 := [hypothesis]: #80
#217 := (or #95 #79 #113)
#218 := [th-lemma arith assign-bounds 1 1]: #217
#219 := [unit-resolution #218 #216 #213]: #95
#220 := [unit-resolution #147 #219]: #137
#221 := [unit-resolution #205 #220]: #183
#222 := [unit-resolution #139 #216]: #141
#223 := [unit-resolution #188 #222]: #182
#229 := [th-lemma arith farkas 1 1 1 1 1 1 #216 #213 #228 #134 #223 #221]: false
#230 := [lemma #229]: #79
#238 := [unit-resolution #143 #230]: #140
#239 := [unit-resolution #175 #238]: #163
[th-lemma arith farkas 1 1 1 1 1 1 #213 #228 #134 #230 #239 #237]: false
unsat
aa55c98f65865ce1fb459036f5d6d595375e9913 18 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := (<= f3 f3)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
881af9588484ddb06449bbce47773b99bf77b5e8 50 0
#2 := false
#47 := 0::Real
decl f4 :: Real
#9 := f4
#44 := -1::Real
#45 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#46 := (+ f3 #45)
#48 := (<= #46 0::Real)
#54 := -3::Real
#55 := (* -3::Real f4)
#11 := 3::Real
#12 := (* 3::Real f3)
#56 := (+ #12 #55)
#57 := (<= #56 0::Real)
#51 := (not #48)
#60 := (or #51 #57)
#63 := (not #60)
#13 := (* 3::Real f4)
#14 := (<= #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#66 := (iff #16 #63)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#64 := (iff #41 #63)
#61 := (iff #38 #60)
#58 := (iff #14 #57)
#59 := [rewrite]: #58
#52 := (iff #37 #51)
#49 := (iff #10 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#67 := [trans #43 #65]: #66
#36 := [asserted]: #16
#68 := [mp #36 #67]: #63
#69 := [not-or-elim #68]: #48
#70 := (not #57)
#71 := [not-or-elim #68]: #70
[th-lemma arith farkas -1/3 1 #71 #69]: false
unsat
afc3a7275e2a12cddf1eb01b0e78b5320cfe3bbf 55 0
#2 := false
#46 := 0::Real
decl f4 :: Real
#9 := f4
#59 := -3::Real
#62 := (* -3::Real f4)
decl f3 :: Real
#8 := f3
#11 := 3::Real
#12 := (* 3::Real f3)
#63 := (+ #12 #62)
#61 := (>= #63 0::Real)
#60 := (not #61)
#44 := -1::Real
#48 := (* -1::Real f4)
#49 := (+ f3 #48)
#47 := (>= #49 0::Real)
#66 := (or #47 #60)
#69 := (not #66)
#13 := (* 3::Real f4)
#14 := (< #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#72 := (iff #16 #69)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#70 := (iff #41 #69)
#67 := (iff #38 #66)
#64 := (iff #14 #60)
#65 := [rewrite]: #64
#57 := (iff #37 #47)
#45 := (not #47)
#52 := (not #45)
#55 := (iff #52 #47)
#56 := [rewrite]: #55
#53 := (iff #37 #52)
#50 := (iff #10 #45)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#68 := [monotonicity #58 #65]: #67
#71 := [monotonicity #68]: #70
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#73 := [trans #43 #71]: #72
#36 := [asserted]: #16
#74 := [mp #36 #73]: #69
#76 := [not-or-elim #74]: #61
#75 := [not-or-elim #74]: #45
[th-lemma arith farkas 3 1 #75 #76]: false
unsat
a47b8f528836ea6757883cbcf031d400004e56c0 52 0
#2 := false
#43 := 0::Real
decl f4 :: Real
#9 := f4
#41 := -1::Real
#45 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#46 := (+ f3 #45)
#56 := (<= #46 0::Real)
#69 := (not #56)
#44 := (>= #46 0::Real)
#59 := (or #44 #56)
#62 := (not #59)
#11 := (<= f3 f4)
#10 := (< f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#65 := (iff #13 #62)
#34 := (not #10)
#35 := (or #34 #11)
#38 := (not #35)
#63 := (iff #38 #62)
#60 := (iff #35 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#54 := (iff #34 #44)
#42 := (not #44)
#49 := (not #42)
#52 := (iff #49 #44)
#53 := [rewrite]: #52
#50 := (iff #34 #49)
#47 := (iff #10 #42)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#61 := [monotonicity #55 #58]: #60
#64 := [monotonicity #61]: #63
#39 := (iff #13 #38)
#36 := (iff #12 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#66 := [trans #40 #64]: #65
#33 := [asserted]: #13
#67 := [mp #33 #66]: #62
#70 := [not-or-elim #67]: #69
#68 := [not-or-elim #67]: #42
#78 := (or #56 #44)
#79 := [th-lemma arith farkas 1 1]: #78
#80 := [unit-resolution #79 #68]: #56
[unit-resolution #80 #70]: false
unsat
1c7cd0067170dad35b430a2211d9d52ff14ffc78 15 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := (< f3 f3)
#10 := (not #9)
#11 := (not #10)
#36 := (iff #11 false)
#34 := (iff #9 false)
#35 := [rewrite]: #34
#32 := (iff #11 #9)
#33 := [rewrite]: #32
#37 := [trans #33 #35]: #36
#31 := [asserted]: #11
[mp #31 #37]: false
unsat
ae8743955951475c05ecf14ad6f216d2f85844fd 75 0
#2 := false
#56 := 0::Real
decl f5 :: Real
#11 := f5
#53 := -1::Real
#54 := (* -1::Real f5)
decl f4 :: Real
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Real)
#67 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#68 := (+ f3 #67)
#69 := (<= #68 0::Real)
#72 := (not #69)
#63 := (+ f3 #54)
#64 := (<= #63 0::Real)
#60 := (not #57)
#81 := (or #60 #64 #72)
#86 := (not #81)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#89 := (iff #16 #86)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#87 := (iff #50 #86)
#84 := (iff #45 #81)
#75 := (or #60 #64)
#78 := (or #72 #75)
#82 := (iff #78 #81)
#83 := [rewrite]: #82
#79 := (iff #45 #78)
#76 := (iff #38 #75)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#77 := [monotonicity #62 #66]: #76
#73 := (iff #44 #72)
#70 := (iff #10 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#90 := [trans #52 #88]: #89
#36 := [asserted]: #16
#91 := [mp #36 #90]: #86
#92 := [not-or-elim #91]: #57
#93 := (not #64)
#94 := [not-or-elim #91]: #93
#95 := [not-or-elim #91]: #69
[th-lemma arith farkas 1 -1 1 #95 #94 #92]: false
unsat
787bdcef7a733082f1b18886b52fc521c0ed8560 80 0
#2 := false
#56 := 0::Real
decl f5 :: Real
#11 := f5
#53 := -1::Real
#54 := (* -1::Real f5)
decl f4 :: Real
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Real)
#69 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#70 := (+ f3 #69)
#68 := (>= #70 0::Real)
#63 := (+ f3 #54)
#64 := (<= #63 0::Real)
#60 := (not #57)
#86 := (or #60 #64 #68)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #60 #64)
#83 := (or #68 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#82 := [monotonicity #62 #66]: #81
#78 := (iff #44 #68)
#67 := (not #68)
#73 := (not #67)
#76 := (iff #73 #68)
#77 := [rewrite]: #76
#74 := (iff #44 #73)
#71 := (iff #10 #67)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#97 := [not-or-elim #96]: #57
#98 := (not #64)
#99 := [not-or-elim #96]: #98
#100 := [not-or-elim #96]: #67
[th-lemma arith farkas 1 1 1 #100 #99 #97]: false
unsat
b3f48d3d4ae5df26c230c46ec0af407248139694 80 0
#2 := false
#55 := 0::Real
decl f4 :: Real
#9 := f4
#53 := -1::Real
#72 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#73 := (+ f3 #72)
#74 := (<= #73 0::Real)
#77 := (not #74)
decl f5 :: Real
#11 := f5
#57 := (* -1::Real f5)
#68 := (+ f3 #57)
#69 := (<= #68 0::Real)
#58 := (+ f4 #57)
#56 := (>= #58 0::Real)
#86 := (or #56 #69 #77)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #56 #69)
#83 := (or #77 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#70 := (iff #13 #69)
#71 := [rewrite]: #70
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#82 := [monotonicity #67 #71]: #81
#78 := (iff #44 #77)
#75 := (iff #10 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#100 := [not-or-elim #96]: #74
#98 := (not #69)
#99 := [not-or-elim #96]: #98
#97 := [not-or-elim #96]: #54
[th-lemma arith farkas 1 1 1 #97 #99 #100]: false
unsat
ca2cf358a9693d3f8c3ab7c0c2862ca77ccd856e 85 0
#2 := false
#55 := 0::Real
decl f5 :: Real
#11 := f5
#53 := -1::Real
#57 := (* -1::Real f5)
decl f3 :: Real
#8 := f3
#70 := (+ f3 #57)
#69 := (>= #70 0::Real)
decl f4 :: Real
#9 := f4
#75 := (* -1::Real f4)
#76 := (+ f3 #75)
#74 := (>= #76 0::Real)
#68 := (not #69)
#58 := (+ f4 #57)
#56 := (>= #58 0::Real)
#92 := (or #56 #68 #74)
#97 := (not #92)
#13 := (< f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#100 := (iff #16 #97)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#98 := (iff #50 #97)
#95 := (iff #45 #92)
#86 := (or #56 #68)
#89 := (or #74 #86)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #45 #89)
#87 := (iff #38 #86)
#71 := (iff #13 #68)
#72 := [rewrite]: #71
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#88 := [monotonicity #67 #72]: #87
#84 := (iff #44 #74)
#73 := (not #74)
#79 := (not #73)
#82 := (iff #79 #74)
#83 := [rewrite]: #82
#80 := (iff #44 #79)
#77 := (iff #10 #73)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#91 := [monotonicity #85 #88]: #90
#96 := [trans #91 #94]: #95
#99 := [monotonicity #96]: #98
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#101 := [trans #52 #99]: #100
#36 := [asserted]: #16
#102 := [mp #36 #101]: #97
#104 := [not-or-elim #102]: #69
#103 := [not-or-elim #102]: #54
#105 := [not-or-elim #102]: #73
[th-lemma arith farkas 1 1 1 #105 #103 #104]: false
unsat
f171037adc5d16b4f868a5116f823085196df83e 69 0
#2 := false
#47 := 0::Real
decl f5 :: Real
#11 := f5
#45 := -1::Real
#54 := (* -1::Real f5)
decl f3 :: Real
#8 := f3
#65 := (+ f3 #54)
#66 := (<= #65 0::Real)
#67 := (not #66)
decl f4 :: Real
#9 := f4
#55 := (+ f4 #54)
#53 := (>= #55 0::Real)
#56 := (not #53)
#49 := (* -1::Real f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Real)
#46 := (not #48)
#59 := (and #46 #56)
#62 := (not #59)
#77 := (or #62 #66)
#80 := (not #77)
#14 := (< f5 f3)
#15 := (not #14)
#12 := (< f4 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (not #16)
#83 := (iff #17 #80)
#38 := (not #13)
#39 := (or #38 #15)
#42 := (not #39)
#81 := (iff #42 #80)
#78 := (iff #39 #77)
#75 := (iff #15 #66)
#70 := (not #67)
#73 := (iff #70 #66)
#74 := [rewrite]: #73
#71 := (iff #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#63 := (iff #38 #62)
#60 := (iff #13 #59)
#57 := (iff #12 #56)
#58 := [rewrite]: #57
#51 := (iff #10 #46)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#79 := [monotonicity #64 #76]: #78
#82 := [monotonicity #79]: #81
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#84 := [trans #44 #82]: #83
#37 := [asserted]: #17
#85 := [mp #37 #84]: #80
#89 := [not-or-elim #85]: #67
#86 := [not-or-elim #85]: #59
#88 := [and-elim #86]: #56
#87 := [and-elim #86]: #46
[th-lemma arith farkas 1 1 1 #87 #88 #89]: false
unsat
dc92b7d4afd6ba08cfa13227dfc8532cdbeb39b8 43 0
#2 := false
decl f4 :: (-> S2 S3)
decl f3 :: (-> S3 S3 S2)
decl f7 :: S3
#24 := f7
decl f6 :: S3
#23 := f6
#25 := (f3 f6 f7)
#26 := (f4 #25)
#27 := (= f6 #26)
#28 := (not #27)
#71 := [asserted]: #28
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#572 := (pattern #16)
#20 := (f4 #16)
#64 := (= #14 #20)
#579 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #572) #64)
#68 := (forall (vars (?v0 S3) (?v1 S3)) #64)
#582 := (iff #68 #579)
#580 := (iff #64 #64)
#581 := [refl]: #580
#583 := [quant-intro #581]: #582
#78 := (~ #68 #68)
#90 := (~ #64 #64)
#91 := [refl]: #90
#79 := [nnf-pos #91]: #78
#21 := (= #20 #14)
#22 := (forall (vars (?v0 S3) (?v1 S3)) #21)
#69 := (iff #22 #68)
#66 := (iff #21 #64)
#67 := [rewrite]: #66
#70 := [quant-intro #67]: #69
#63 := [asserted]: #22
#73 := [mp #63 #70]: #68
#92 := [mp~ #73 #79]: #68
#584 := [mp #92 #583]: #579
#240 := (not #579)
#219 := (or #240 #27)
#556 := [quant-inst #23 #24]: #219
[unit-resolution #556 #584 #71]: false
unsat
78a9d9bd4030219f6f6fc3a3d77e6844fcb4a19d 43 0
#2 := false
decl f5 :: (-> S2 S3)
decl f3 :: (-> S3 S3 S2)
decl f6 :: S3
#23 := f6
decl f7 :: S3
#24 := f7
#25 := (f3 f7 f6)
#26 := (f5 #25)
#27 := (= f6 #26)
#28 := (not #27)
#71 := [asserted]: #28
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#572 := (pattern #16)
#17 := (f5 #16)
#56 := (= #15 #17)
#573 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #572) #56)
#60 := (forall (vars (?v0 S3) (?v1 S3)) #56)
#576 := (iff #60 #573)
#574 := (iff #56 #56)
#575 := [refl]: #574
#577 := [quant-intro #575]: #576
#76 := (~ #60 #60)
#75 := (~ #56 #56)
#88 := [refl]: #75
#77 := [nnf-pos #88]: #76
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#61 := (iff #19 #60)
#58 := (iff #18 #56)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#55 := [asserted]: #19
#65 := [mp #55 #62]: #60
#89 := [mp~ #65 #77]: #60
#578 := [mp #89 #577]: #573
#238 := (not #573)
#166 := (or #238 #27)
#239 := [quant-inst #24 #23]: #166
[unit-resolution #239 #578 #71]: false
unsat
5b1fa50c4a946d66cbeae41049a8c24d25af0430 87 0
#2 := false
decl f7 :: S3
#24 := f7
decl f6 :: S3
#23 := f6
#28 := (= f6 f7)
decl f5 :: (-> S2 S3)
decl f3 :: (-> S3 S3 S2)
#25 := (f3 f6 f7)
#246 := (f5 #25)
#189 := (= #246 f7)
#243 := (= f7 #246)
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#579 := (pattern #16)
#17 := (f5 #16)
#58 := (= #15 #17)
#580 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #579) #58)
#62 := (forall (vars (?v0 S3) (?v1 S3)) #58)
#583 := (iff #62 #580)
#581 := (iff #58 #58)
#582 := [refl]: #581
#584 := [quant-intro #582]: #583
#83 := (~ #62 #62)
#82 := (~ #58 #58)
#95 := [refl]: #82
#84 := [nnf-pos #95]: #83
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#63 := (iff #19 #62)
#60 := (iff #18 #58)
#61 := [rewrite]: #60
#64 := [quant-intro #61]: #63
#57 := [asserted]: #19
#67 := [mp #57 #64]: #62
#96 := [mp~ #67 #84]: #62
#585 := [mp #96 #584]: #580
#563 := (not #580)
#565 := (or #563 #243)
#220 := [quant-inst #23 #24]: #565
#548 := [unit-resolution #220 #585]: #243
#554 := [symm #548]: #189
#556 := (= f6 #246)
#26 := (f3 f7 f6)
#352 := (f5 #26)
#547 := (= #352 #246)
#549 := (= #246 #352)
#27 := (= #25 #26)
#562 := (= #26 #25)
#74 := (not #27)
#570 := [hypothesis]: #74
#241 := (or #28 #27)
#76 := (iff #28 #74)
#29 := (iff #27 #28)
#30 := (not #29)
#77 := (iff #30 #76)
#78 := [rewrite]: #77
#73 := [asserted]: #30
#81 := [mp #73 #78]: #76
#153 := (not #76)
#240 := (or #28 #27 #153)
#154 := [def-axiom]: #240
#155 := [unit-resolution #154 #81]: #241
#560 := [unit-resolution #155 #570]: #28
#561 := (= f7 f6)
#219 := [symm #560]: #561
#203 := [monotonicity #219 #560]: #562
#546 := [symm #203]: #27
#207 := [unit-resolution #570 #546]: false
#208 := [lemma #207]: #27
#550 := [monotonicity #208]: #549
#553 := [symm #550]: #547
#559 := (= f6 #352)
#569 := (or #563 #559)
#564 := [quant-inst #24 #23]: #569
#210 := [unit-resolution #564 #585]: #559
#194 := [trans #210 #553]: #556
#195 := [trans #194 #554]: #28
#242 := (not #28)
#245 := (or #242 #74)
#233 := (or #242 #74 #153)
#244 := [def-axiom]: #233
#173 := [unit-resolution #244 #81]: #245
#209 := [unit-resolution #173 #208]: #242
[unit-resolution #209 #195]: false
unsat
55451993392a339d9aeab45ab57333ada99d25e7 155 0
#2 := false
decl f9 :: S3
#27 := f9
decl f7 :: S3
#24 := f7
#31 := (= f7 f9)
#105 := (not #31)
decl f8 :: S3
#26 := f8
decl f6 :: S3
#23 := f6
#30 := (= f6 f8)
#104 := (not #30)
#91 := (or #104 #105)
decl f3 :: (-> S3 S3 S2)
#28 := (f3 f8 f9)
#25 := (f3 f6 f7)
#29 := (= #25 #28)
#92 := (not #91)
#243 := [hypothesis]: #92
#178 := (or #91 #31)
#265 := [def-axiom]: #178
#231 := [unit-resolution #265 #243]: #31
#177 := (or #91 #30)
#264 := [def-axiom]: #177
#232 := [unit-resolution #264 #243]: #30
#233 := [monotonicity #232 #231]: #29
#78 := (not #29)
#250 := (or #78 #91)
#114 := (iff #29 #91)
#32 := (and #30 #31)
#80 := (iff #32 #78)
#117 := (iff #80 #114)
#109 := (iff #91 #29)
#115 := (iff #109 #114)
#116 := [rewrite]: #115
#112 := (iff #80 #109)
#106 := (iff #92 #78)
#110 := (iff #106 #109)
#111 := [rewrite]: #110
#107 := (iff #80 #106)
#93 := (iff #32 #92)
#94 := [rewrite]: #93
#108 := [monotonicity #94]: #107
#113 := [trans #108 #111]: #112
#118 := [trans #113 #116]: #117
#33 := (iff #29 #32)
#34 := (not #33)
#81 := (iff #34 #80)
#82 := [rewrite]: #81
#77 := [asserted]: #34
#85 := [mp #77 #82]: #80
#119 := [mp #85 #118]: #114
#257 := (not #114)
#267 := (or #78 #91 #257)
#271 := [def-axiom]: #267
#587 := [unit-resolution #271 #119]: #250
#586 := [unit-resolution #587 #243]: #78
#234 := [unit-resolution #586 #233]: false
#572 := [lemma #234]: #91
decl f5 :: (-> S2 S3)
#591 := (f5 #28)
#577 := (= #591 f9)
#592 := (= f9 #591)
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#603 := (pattern #16)
#17 := (f5 #16)
#62 := (= #15 #17)
#604 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #603) #62)
#66 := (forall (vars (?v0 S3) (?v1 S3)) #62)
#607 := (iff #66 #604)
#605 := (iff #62 #62)
#606 := [refl]: #605
#608 := [quant-intro #606]: #607
#87 := (~ #66 #66)
#86 := (~ #62 #62)
#99 := [refl]: #86
#88 := [nnf-pos #99]: #87
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#67 := (iff #19 #66)
#64 := (iff #18 #62)
#65 := [rewrite]: #64
#68 := [quant-intro #65]: #67
#61 := [asserted]: #19
#71 := [mp #61 #68]: #66
#100 := [mp~ #71 #88]: #66
#609 := [mp #100 #608]: #604
#255 := (not #604)
#247 := (or #255 #592)
#585 := [quant-inst #26 #27]: #247
#573 := [unit-resolution #585 #609]: #592
#213 := [symm #573]: #577
#578 := (= f7 #591)
#589 := (f5 #25)
#576 := (= #589 #591)
#197 := (or #29 #92)
#268 := (or #29 #92 #257)
#269 := [def-axiom]: #268
#270 := [unit-resolution #269 #119]: #197
#574 := [unit-resolution #270 #572]: #29
#571 := [monotonicity #574]: #576
#244 := (= f7 #589)
#256 := (or #255 #244)
#590 := [quant-inst #23 #24]: #256
#575 := [unit-resolution #590 #609]: #244
#580 := [trans #575 #571]: #578
#218 := [trans #580 #213]: #31
decl f4 :: (-> S2 S3)
#584 := (f4 #28)
#568 := (= #584 f8)
#242 := (= f8 #584)
#20 := (f4 #16)
#70 := (= #14 #20)
#610 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #603) #70)
#74 := (forall (vars (?v0 S3) (?v1 S3)) #70)
#613 := (iff #74 #610)
#611 := (iff #70 #70)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#89 := (~ #74 #74)
#101 := (~ #70 #70)
#102 := [refl]: #101
#90 := [nnf-pos #102]: #89
#21 := (= #20 #14)
#22 := (forall (vars (?v0 S3) (?v1 S3)) #21)
#75 := (iff #22 #74)
#72 := (iff #21 #70)
#73 := [rewrite]: #72
#76 := [quant-intro #73]: #75
#69 := [asserted]: #22
#79 := [mp #69 #76]: #74
#103 := [mp~ #79 #90]: #74
#615 := [mp #103 #614]: #610
#593 := (not #610)
#227 := (or #593 #242)
#570 := [quant-inst #26 #27]: #227
#219 := [unit-resolution #570 #615]: #242
#569 := [symm #219]: #568
#275 := (= f6 #584)
#376 := (f4 #25)
#579 := (= #376 #584)
#582 := [monotonicity #574]: #579
#583 := (= f6 #376)
#588 := (or #593 #583)
#594 := [quant-inst #23 #24]: #588
#581 := [unit-resolution #594 #615]: #583
#291 := [trans #581 #582]: #275
#292 := [trans #291 #569]: #30
#179 := (or #92 #104 #105)
#266 := [def-axiom]: #179
[unit-resolution #266 #292 #218 #572]: false
unsat
be42530dd2762a091effcef8ad846d02ec16506c 91 0
#2 := false
decl f12 :: S3
#42 := f12
decl f9 :: S3
#36 := f9
#49 := (= f9 f12)
decl f7 :: (-> S5 S3)
decl f6 :: (-> S3 S2 S5)
decl f3 :: (-> S3 S4 S2)
decl f14 :: S4
#44 := f14
decl f13 :: S3
#43 := f13
#45 := (f3 f13 f14)
#46 := (f6 f12 #45)
#47 := (f7 #46)
decl f11 :: S4
#38 := f11
decl f10 :: S3
#37 := f10
#39 := (f3 f10 f11)
#40 := (f6 f9 #39)
#41 := (f7 #40)
#48 := (= #41 #47)
#50 := (iff #48 #49)
#327 := (iff #49 #48)
#613 := (= f12 #47)
#8 := (:var 0 S2)
#20 := (:var 1 S3)
#26 := (f6 #20 #8)
#654 := (pattern #26)
#33 := (f7 #26)
#111 := (= #20 #33)
#667 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #654) #111)
#115 := (forall (vars (?v0 S3) (?v1 S2)) #111)
#670 := (iff #115 #667)
#668 := (iff #111 #111)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#136 := (~ #115 #115)
#157 := (~ #111 #111)
#158 := [refl]: #157
#137 := [nnf-pos #158]: #136
#34 := (= #33 #20)
#35 := (forall (vars (?v0 S3) (?v1 S2)) #34)
#116 := (iff #35 #115)
#113 := (iff #34 #111)
#114 := [rewrite]: #113
#117 := [quant-intro #114]: #116
#110 := [asserted]: #35
#120 := [mp #110 #117]: #115
#159 := [mp~ #120 #137]: #115
#672 := [mp #159 #671]: #667
#249 := (not #667)
#618 := (or #249 #613)
#604 := [quant-inst #42 #45]: #618
#605 := [unit-resolution #604 #672]: #613
#270 := (= f9 #41)
#614 := (or #249 #270)
#616 := [quant-inst #36 #39]: #614
#311 := [unit-resolution #616 #672]: #270
#328 := [monotonicity #311 #605]: #327
#329 := [symm #328]: #50
#302 := (not #49)
#119 := (not #48)
#315 := (iff #119 #302)
#330 := [monotonicity #329]: #315
#254 := [hypothesis]: #119
#221 := [mp #254 #330]: #302
#301 := (or #49 #48)
#121 := (iff #49 #119)
#51 := (not #50)
#122 := (iff #51 #121)
#123 := [rewrite]: #122
#118 := [asserted]: #51
#126 := [mp #118 #123]: #121
#213 := (not #121)
#300 := (or #49 #48 #213)
#214 := [def-axiom]: #300
#215 := [unit-resolution #214 #126]: #301
#615 := [unit-resolution #215 #254]: #49
#600 := [unit-resolution #615 #221]: false
#601 := [lemma #600]: #48
#324 := [mp #601 #329]: #49
#305 := (or #302 #119)
#293 := (or #302 #119 #213)
#304 := [def-axiom]: #293
#233 := [unit-resolution #304 #126]: #305
#323 := [unit-resolution #233 #601]: #302
[unit-resolution #323 #324]: false
unsat
703ada2cefd34540ab26d41eac317697843d015a 210 0
#2 := false
decl f14 :: S4
#44 := f14
decl f11 :: S4
#38 := f11
#50 := (= f11 f14)
#163 := (not #50)
decl f13 :: S3
#43 := f13
decl f10 :: S3
#37 := f10
#49 := (= f10 f13)
#162 := (not #49)
#140 := (or #162 #163)
decl f8 :: (-> S5 S2)
decl f6 :: (-> S3 S2 S5)
decl f3 :: (-> S3 S4 S2)
#45 := (f3 f13 f14)
decl f12 :: S3
#42 := f12
#46 := (f6 f12 #45)
#47 := (f8 #46)
#39 := (f3 f10 f11)
decl f9 :: S3
#36 := f9
#40 := (f6 f9 #39)
#41 := (f8 #40)
#48 := (= #41 #47)
#271 := (= #45 #47)
#8 := (:var 0 S2)
#20 := (:var 1 S3)
#26 := (f6 #20 #8)
#676 := (pattern #26)
#27 := (f8 #26)
#97 := (= #8 #27)
#677 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #676) #97)
#101 := (forall (vars (?v0 S3) (?v1 S2)) #97)
#680 := (iff #101 #677)
#678 := (iff #97 #97)
#679 := [refl]: #678
#681 := [quant-intro #679]: #680
#134 := (~ #101 #101)
#153 := (~ #97 #97)
#154 := [refl]: #153
#135 := [nnf-pos #154]: #134
#28 := (= #27 #8)
#29 := (forall (vars (?v0 S3) (?v1 S2)) #28)
#102 := (iff #29 #101)
#99 := (iff #28 #97)
#100 := [rewrite]: #99
#103 := [quant-intro #100]: #102
#96 := [asserted]: #29
#106 := [mp #96 #103]: #101
#155 := [mp~ #106 #135]: #101
#682 := [mp #155 #681]: #677
#636 := (not #677)
#627 := (or #636 #271)
#333 := [quant-inst #42 #45]: #627
#337 := [unit-resolution #333 #682]: #271
#624 := (= #41 #45)
#346 := (= #39 #45)
#141 := (not #140)
#626 := [hypothesis]: #141
#236 := (or #140 #50)
#323 := [def-axiom]: #236
#352 := [unit-resolution #323 #626]: #50
#235 := (or #140 #49)
#322 := [def-axiom]: #235
#243 := [unit-resolution #322 #626]: #49
#620 := [monotonicity #243 #352]: #346
#623 := (= #41 #39)
#633 := (= #39 #41)
#638 := (or #636 #633)
#276 := [quant-inst #36 #39]: #638
#622 := [unit-resolution #276 #682]: #633
#345 := [symm #622]: #623
#621 := [trans #345 #620]: #624
#625 := [trans #621 #337]: #48
#121 := (not #48)
#308 := (or #121 #140)
#172 := (iff #48 #140)
#51 := (and #49 #50)
#123 := (iff #51 #121)
#175 := (iff #123 #172)
#167 := (iff #140 #48)
#173 := (iff #167 #172)
#174 := [rewrite]: #173
#170 := (iff #123 #167)
#164 := (iff #141 #121)
#168 := (iff #164 #167)
#169 := [rewrite]: #168
#165 := (iff #123 #164)
#142 := (iff #51 #141)
#143 := [rewrite]: #142
#166 := [monotonicity #143]: #165
#171 := [trans #166 #169]: #170
#176 := [trans #171 #174]: #175
#52 := (iff #48 #51)
#53 := (not #52)
#124 := (iff #53 #123)
#125 := [rewrite]: #124
#120 := [asserted]: #53
#128 := [mp #120 #125]: #123
#177 := [mp #128 #176]: #172
#315 := (not #172)
#325 := (or #121 #140 #315)
#329 := [def-axiom]: #325
#645 := [unit-resolution #329 #177]: #308
#349 := [unit-resolution #645 #626]: #121
#334 := [unit-resolution #349 #625]: false
#335 := [lemma #334]: #140
decl f5 :: (-> S2 S4)
#285 := (f5 #45)
#609 := (= #285 f14)
#628 := (= f14 #285)
#21 := (:var 0 S4)
#22 := (f3 #20 #21)
#669 := (pattern #22)
#23 := (f5 #22)
#89 := (= #21 #23)
#670 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #669) #89)
#93 := (forall (vars (?v0 S3) (?v1 S4)) #89)
#673 := (iff #93 #670)
#671 := (iff #89 #89)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#132 := (~ #93 #93)
#150 := (~ #89 #89)
#151 := [refl]: #150
#133 := [nnf-pos #151]: #132
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S3) (?v1 S4)) #24)
#94 := (iff #25 #93)
#91 := (iff #24 #89)
#92 := [rewrite]: #91
#95 := [quant-intro #92]: #94
#88 := [asserted]: #25
#98 := [mp #88 #95]: #93
#152 := [mp~ #98 #133]: #93
#675 := [mp #152 #674]: #670
#643 := (not #670)
#631 := (or #643 #628)
#632 := [quant-inst #43 #44]: #631
#336 := [unit-resolution #632 #675]: #628
#610 := [symm #336]: #609
#605 := (= f11 #285)
#651 := (f5 #39)
#619 := (= #651 #285)
#616 := (= #47 #45)
#617 := [symm #337]: #616
#330 := (= #39 #47)
#255 := (or #48 #141)
#326 := (or #48 #141 #315)
#327 := [def-axiom]: #326
#328 := [unit-resolution #327 #177]: #255
#338 := [unit-resolution #328 #335]: #48
#614 := [trans #622 #338]: #330
#618 := [trans #614 #617]: #346
#608 := [monotonicity #618]: #619
#646 := (= f11 #651)
#301 := (or #643 #646)
#644 := [quant-inst #37 #38]: #301
#615 := [unit-resolution #644 #675]: #646
#606 := [trans #615 #608]: #605
#611 := [trans #606 #610]: #50
decl f4 :: (-> S2 S3)
#292 := (f4 #45)
#455 := (= #292 f13)
#630 := (= f13 #292)
#30 := (f4 #22)
#105 := (= #20 #30)
#683 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #669) #105)
#109 := (forall (vars (?v0 S3) (?v1 S4)) #105)
#686 := (iff #109 #683)
#684 := (iff #105 #105)
#685 := [refl]: #684
#687 := [quant-intro #685]: #686
#136 := (~ #109 #109)
#156 := (~ #105 #105)
#157 := [refl]: #156
#137 := [nnf-pos #157]: #136
#31 := (= #30 #20)
#32 := (forall (vars (?v0 S3) (?v1 S4)) #31)
#110 := (iff #32 #109)
#107 := (iff #31 #105)
#108 := [rewrite]: #107
#111 := [quant-intro #108]: #110
#104 := [asserted]: #32
#114 := [mp #104 #111]: #109
#158 := [mp~ #114 #137]: #109
#688 := [mp #158 #687]: #683
#289 := (not #683)
#629 := (or #289 #630)
#635 := [quant-inst #43 #44]: #629
#612 := [unit-resolution #635 #688]: #630
#456 := [symm #612]: #455
#598 := (= f10 #292)
#300 := (f4 #39)
#613 := (= #300 #292)
#454 := [monotonicity #618]: #613
#305 := (= f10 #300)
#290 := (or #289 #305)
#291 := [quant-inst #37 #38]: #290
#607 := [unit-resolution #291 #688]: #305
#599 := [trans #607 #454]: #598
#600 := [trans #599 #456]: #49
#237 := (or #141 #162 #163)
#324 := [def-axiom]: #237
[unit-resolution #324 #600 #611 #335]: false
unsat
b85ad566d41295cad233b645b03aa0d599f756ba 144 0
#2 := false
decl f13 :: S3
#44 := f13
decl f10 :: S3
#37 := f10
#51 := (= f10 f13)
decl f4 :: (-> S2 S3)
decl f8 :: (-> S5 S2)
decl f6 :: (-> S3 S2 S5)
decl f3 :: (-> S3 S4 S2)
decl f14 :: S4
#45 := f14
#46 := (f3 f13 f14)
decl f12 :: S3
#43 := f12
#47 := (f6 f12 #46)
#48 := (f8 #47)
#49 := (f4 #48)
decl f11 :: S4
#38 := f11
#39 := (f3 f10 f11)
decl f9 :: S3
#36 := f9
#40 := (f6 f9 #39)
#41 := (f8 #40)
#42 := (f4 #41)
#50 := (= #42 #49)
#52 := (iff #50 #51)
#318 := (= #49 f13)
#609 := (f4 #46)
#315 := (= #609 f13)
#615 := (= f13 #609)
#21 := (:var 0 S4)
#20 := (:var 1 S3)
#22 := (f3 #20 #21)
#649 := (pattern #22)
#30 := (f4 #22)
#105 := (= #20 #30)
#663 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #649) #105)
#109 := (forall (vars (?v0 S3) (?v1 S4)) #105)
#666 := (iff #109 #663)
#664 := (iff #105 #105)
#665 := [refl]: #664
#667 := [quant-intro #665]: #666
#136 := (~ #109 #109)
#156 := (~ #105 #105)
#157 := [refl]: #156
#137 := [nnf-pos #157]: #136
#31 := (= #30 #20)
#32 := (forall (vars (?v0 S3) (?v1 S4)) #31)
#110 := (iff #32 #109)
#107 := (iff #31 #105)
#108 := [rewrite]: #107
#111 := [quant-intro #108]: #110
#104 := [asserted]: #32
#114 := [mp #104 #111]: #109
#158 := [mp~ #114 #137]: #109
#668 := [mp #158 #667]: #663
#612 := (not #663)
#257 := (or #612 #615)
#619 := [quant-inst #44 #45]: #257
#326 := [unit-resolution #619 #668]: #615
#316 := [symm #326]: #315
#605 := (= #49 #609)
#604 := (= #48 #46)
#617 := (= #46 #48)
#8 := (:var 0 S2)
#26 := (f6 #20 #8)
#656 := (pattern #26)
#27 := (f8 #26)
#97 := (= #8 #27)
#657 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #656) #97)
#101 := (forall (vars (?v0 S3) (?v1 S2)) #97)
#660 := (iff #101 #657)
#658 := (iff #97 #97)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#134 := (~ #101 #101)
#153 := (~ #97 #97)
#154 := [refl]: #153
#135 := [nnf-pos #154]: #134
#28 := (= #27 #8)
#29 := (forall (vars (?v0 S3) (?v1 S2)) #28)
#102 := (iff #29 #101)
#99 := (iff #28 #97)
#100 := [rewrite]: #99
#103 := [quant-intro #100]: #102
#96 := [asserted]: #29
#106 := [mp #96 #103]: #101
#155 := [mp~ #106 #135]: #101
#662 := [mp #155 #661]: #657
#620 := (not #657)
#332 := (or #620 #617)
#223 := [quant-inst #43 #46]: #332
#600 := [unit-resolution #223 #662]: #617
#601 := [symm #600]: #604
#314 := [monotonicity #601]: #605
#596 := [trans #314 #316]: #318
#590 := (= #42 f10)
#608 := (f4 #39)
#588 := (= #608 f10)
#269 := (= f10 #608)
#613 := (or #612 #269)
#614 := [quant-inst #37 #38]: #613
#597 := [unit-resolution #614 #668]: #269
#589 := [symm #597]: #588
#595 := (= #42 #608)
#594 := (= #41 #39)
#618 := (= #39 #41)
#606 := (or #620 #618)
#607 := [quant-inst #36 #39]: #606
#310 := [unit-resolution #607 #662]: #618
#598 := [symm #310]: #594
#599 := [monotonicity #598]: #595
#585 := [trans #599 #589]: #590
#586 := [monotonicity #585 #596]: #52
#304 := (not #51)
#121 := (not #50)
#591 := (iff #121 #304)
#592 := [monotonicity #586]: #591
#317 := [hypothesis]: #121
#587 := [mp #317 #592]: #304
#303 := (or #51 #50)
#123 := (iff #51 #121)
#53 := (not #52)
#124 := (iff #53 #123)
#125 := [rewrite]: #124
#120 := [asserted]: #53
#128 := [mp #120 #125]: #123
#215 := (not #123)
#302 := (or #51 #50 #215)
#216 := [def-axiom]: #302
#217 := [unit-resolution #216 #128]: #303
#602 := [unit-resolution #217 #317]: #51
#593 := [unit-resolution #602 #587]: false
#434 := [lemma #593]: #50
#436 := [mp #434 #586]: #51
#307 := (or #304 #121)
#295 := (or #304 #121 #215)
#306 := [def-axiom]: #295
#235 := [unit-resolution #306 #128]: #307
#435 := [unit-resolution #235 #434]: #304
[unit-resolution #435 #436]: false
unsat
b6231ad6e1765a00bbbe9f66100da15b0775b711 144 0
#2 := false
decl f14 :: S4
#45 := f14
decl f11 :: S4
#38 := f11
#51 := (= f11 f14)
decl f5 :: (-> S2 S4)
decl f8 :: (-> S5 S2)
decl f6 :: (-> S3 S2 S5)
decl f3 :: (-> S3 S4 S2)
decl f13 :: S3
#44 := f13
#46 := (f3 f13 f14)
decl f12 :: S3
#43 := f12
#47 := (f6 f12 #46)
#48 := (f8 #47)
#49 := (f5 #48)
decl f10 :: S3
#37 := f10
#39 := (f3 f10 f11)
decl f9 :: S3
#36 := f9
#40 := (f6 f9 #39)
#41 := (f8 #40)
#42 := (f5 #41)
#50 := (= #42 #49)
#52 := (iff #50 #51)
#318 := (= #49 f14)
#610 := (f5 #46)
#315 := (= #610 f14)
#611 := (= f14 #610)
#21 := (:var 0 S4)
#20 := (:var 1 S3)
#22 := (f3 #20 #21)
#649 := (pattern #22)
#23 := (f5 #22)
#89 := (= #21 #23)
#650 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #649) #89)
#93 := (forall (vars (?v0 S3) (?v1 S4)) #89)
#653 := (iff #93 #650)
#651 := (iff #89 #89)
#652 := [refl]: #651
#654 := [quant-intro #652]: #653
#132 := (~ #93 #93)
#150 := (~ #89 #89)
#151 := [refl]: #150
#133 := [nnf-pos #151]: #132
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S3) (?v1 S4)) #24)
#94 := (iff #25 #93)
#91 := (iff #24 #89)
#92 := [rewrite]: #91
#95 := [quant-intro #92]: #94
#88 := [asserted]: #25
#98 := [mp #88 #95]: #93
#152 := [mp~ #98 #133]: #93
#655 := [mp #152 #654]: #650
#270 := (not #650)
#251 := (or #270 #611)
#616 := [quant-inst #44 #45]: #251
#326 := [unit-resolution #616 #655]: #611
#316 := [symm #326]: #315
#605 := (= #49 #610)
#604 := (= #48 #46)
#617 := (= #46 #48)
#8 := (:var 0 S2)
#26 := (f6 #20 #8)
#656 := (pattern #26)
#27 := (f8 #26)
#97 := (= #8 #27)
#657 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #656) #97)
#101 := (forall (vars (?v0 S3) (?v1 S2)) #97)
#660 := (iff #101 #657)
#658 := (iff #97 #97)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#134 := (~ #101 #101)
#153 := (~ #97 #97)
#154 := [refl]: #153
#135 := [nnf-pos #154]: #134
#28 := (= #27 #8)
#29 := (forall (vars (?v0 S3) (?v1 S2)) #28)
#102 := (iff #29 #101)
#99 := (iff #28 #97)
#100 := [rewrite]: #99
#103 := [quant-intro #100]: #102
#96 := [asserted]: #29
#106 := [mp #96 #103]: #101
#155 := [mp~ #106 #135]: #101
#662 := [mp #155 #661]: #657
#620 := (not #657)
#332 := (or #620 #617)
#223 := [quant-inst #43 #46]: #332
#600 := [unit-resolution #223 #662]: #617
#601 := [symm #600]: #604
#314 := [monotonicity #601]: #605
#596 := [trans #314 #316]: #318
#590 := (= #42 f11)
#623 := (f5 #39)
#588 := (= #623 f11)
#281 := (= f11 #623)
#271 := (or #270 #281)
#272 := [quant-inst #37 #38]: #271
#597 := [unit-resolution #272 #655]: #281
#589 := [symm #597]: #588
#595 := (= #42 #623)
#594 := (= #41 #39)
#618 := (= #39 #41)
#606 := (or #620 #618)
#607 := [quant-inst #36 #39]: #606
#310 := [unit-resolution #607 #662]: #618
#598 := [symm #310]: #594
#599 := [monotonicity #598]: #595
#585 := [trans #599 #589]: #590
#586 := [monotonicity #585 #596]: #52
#304 := (not #51)
#121 := (not #50)
#591 := (iff #121 #304)
#592 := [monotonicity #586]: #591
#317 := [hypothesis]: #121
#587 := [mp #317 #592]: #304
#303 := (or #51 #50)
#123 := (iff #51 #121)
#53 := (not #52)
#124 := (iff #53 #123)
#125 := [rewrite]: #124
#120 := [asserted]: #53
#128 := [mp #120 #125]: #123
#215 := (not #123)
#302 := (or #51 #50 #215)
#216 := [def-axiom]: #302
#217 := [unit-resolution #216 #128]: #303
#602 := [unit-resolution #217 #317]: #51
#593 := [unit-resolution #602 #587]: false
#434 := [lemma #593]: #50
#436 := [mp #434 #586]: #51
#307 := (or #304 #121)
#295 := (or #304 #121 #215)
#306 := [def-axiom]: #295
#235 := [unit-resolution #306 #128]: #307
#435 := [unit-resolution #235 #434]: #304
[unit-resolution #435 #436]: false
unsat
8157d199c7019faf223d954e5ed37245ebb98783 103 0
#2 := false
decl f7 :: S3
#24 := f7
decl f6 :: S3
#23 := f6
#29 := (= f6 f7)
decl f5 :: (-> S2 S3)
decl f3 :: (-> S3 S3 S2)
#25 := (f3 f6 f7)
#27 := (f5 #25)
decl f4 :: (-> S2 S3)
#26 := (f4 #25)
#28 := (= #26 #27)
#30 := (iff #28 #29)
#561 := (iff #29 #28)
#248 := (= f7 #27)
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#580 := (pattern #16)
#17 := (f5 #16)
#59 := (= #15 #17)
#581 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #580) #59)
#63 := (forall (vars (?v0 S3) (?v1 S3)) #59)
#584 := (iff #63 #581)
#582 := (iff #59 #59)
#583 := [refl]: #582
#585 := [quant-intro #583]: #584
#84 := (~ #63 #63)
#83 := (~ #59 #59)
#96 := [refl]: #83
#85 := [nnf-pos #96]: #84
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#64 := (iff #19 #63)
#61 := (iff #18 #59)
#62 := [rewrite]: #61
#65 := [quant-intro #62]: #64
#58 := [asserted]: #19
#68 := [mp #58 #65]: #63
#97 := [mp~ #68 #85]: #63
#586 := [mp #97 #585]: #581
#560 := (not #581)
#232 := (or #560 #248)
#233 := [quant-inst #23 #24]: #232
#565 := [unit-resolution #233 #586]: #248
#227 := (= f6 #26)
#20 := (f4 #16)
#67 := (= #14 #20)
#587 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #580) #67)
#71 := (forall (vars (?v0 S3) (?v1 S3)) #67)
#590 := (iff #71 #587)
#588 := (iff #67 #67)
#589 := [refl]: #588
#591 := [quant-intro #589]: #590
#86 := (~ #71 #71)
#98 := (~ #67 #67)
#99 := [refl]: #98
#87 := [nnf-pos #99]: #86
#21 := (= #20 #14)
#22 := (forall (vars (?v0 S3) (?v1 S3)) #21)
#72 := (iff #22 #71)
#69 := (iff #21 #67)
#70 := [rewrite]: #69
#73 := [quant-intro #70]: #72
#66 := [asserted]: #22
#76 := [mp #66 #73]: #71
#100 := [mp~ #76 #87]: #71
#592 := [mp #100 #591]: #587
#568 := (not #587)
#569 := (or #568 #227)
#570 := [quant-inst #23 #24]: #569
#571 := [unit-resolution #570 #592]: #227
#219 := [monotonicity #571 #565]: #561
#224 := [symm #219]: #30
#243 := (not #29)
#75 := (not #28)
#562 := (iff #75 #243)
#220 := [monotonicity #224]: #562
#353 := [hypothesis]: #75
#563 := [mp #353 #220]: #243
#242 := (or #29 #28)
#77 := (iff #29 #75)
#31 := (not #30)
#78 := (iff #31 #77)
#79 := [rewrite]: #78
#74 := [asserted]: #31
#82 := [mp #74 #79]: #77
#154 := (not #77)
#241 := (or #29 #28 #154)
#155 := [def-axiom]: #241
#156 := [unit-resolution #155 #82]: #242
#567 := [unit-resolution #156 #353]: #29
#204 := [unit-resolution #567 #563]: false
#547 := [lemma #204]: #28
#209 := [mp #547 #224]: #29
#246 := (or #243 #75)
#234 := (or #243 #75 #154)
#245 := [def-axiom]: #234
#174 := [unit-resolution #245 #82]: #246
#208 := [unit-resolution #174 #547]: #243
[unit-resolution #208 #209]: false
unsat
14ec8583ed83b806bed26d093fab6c858f541eb6 111 0
#2 := false
decl f5 :: (-> S2 S3)
decl f9 :: S2
#28 := f9
#33 := (f5 f9)
decl f4 :: (-> S2 S3)
decl f6 :: S2
#23 := f6
#32 := (f4 f6)
#34 := (= #32 #33)
decl f3 :: (-> S3 S3 S2)
decl f7 :: S3
#24 := f7
decl f8 :: S3
#25 := f8
#29 := (f3 f8 f7)
#169 := (f5 #29)
#223 := (= #169 #33)
#233 := (= #33 #169)
#30 := (= f9 #29)
#26 := (f3 f7 f8)
#27 := (= f6 #26)
#31 := (and #27 #30)
#80 := (not #31)
#82 := (or #80 #34)
#85 := (not #82)
#35 := (implies #31 #34)
#36 := (not #35)
#86 := (iff #36 #85)
#83 := (iff #35 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#79 := [asserted]: #36
#90 := [mp #79 #87]: #85
#88 := [not-or-elim #90]: #31
#91 := [and-elim #88]: #30
#576 := [monotonicity #91]: #233
#224 := [symm #576]: #223
#564 := (= #32 #169)
#579 := (= f7 #169)
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#593 := (pattern #16)
#17 := (f5 #16)
#64 := (= #15 #17)
#594 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #593) #64)
#68 := (forall (vars (?v0 S3) (?v1 S3)) #64)
#597 := (iff #68 #594)
#595 := (iff #64 #64)
#596 := [refl]: #595
#598 := [quant-intro #596]: #597
#97 := (~ #68 #68)
#96 := (~ #64 #64)
#113 := [refl]: #96
#98 := [nnf-pos #113]: #97
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#69 := (iff #19 #68)
#66 := (iff #18 #64)
#67 := [rewrite]: #66
#70 := [quant-intro #67]: #69
#63 := [asserted]: #19
#73 := [mp #63 #70]: #68
#114 := [mp~ #73 #98]: #68
#599 := [mp #114 #598]: #594
#234 := (not #594)
#583 := (or #234 #579)
#578 := [quant-inst #25 #24]: #583
#584 := [unit-resolution #578 #599]: #579
#562 := (= #32 f7)
#254 := (f4 #26)
#221 := (= #254 f7)
#261 := (= f7 #254)
#20 := (f4 #16)
#72 := (= #14 #20)
#600 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #593) #72)
#76 := (forall (vars (?v0 S3) (?v1 S3)) #72)
#603 := (iff #76 #600)
#601 := (iff #72 #72)
#602 := [refl]: #601
#604 := [quant-intro #602]: #603
#99 := (~ #76 #76)
#115 := (~ #72 #72)
#116 := [refl]: #115
#100 := [nnf-pos #116]: #99
#21 := (= #20 #14)
#22 := (forall (vars (?v0 S3) (?v1 S3)) #21)
#77 := (iff #22 #76)
#74 := (iff #21 #72)
#75 := [rewrite]: #74
#78 := [quant-intro #75]: #77
#71 := [asserted]: #22
#81 := [mp #71 #78]: #76
#117 := [mp~ #81 #100]: #76
#605 := [mp #117 #604]: #600
#246 := (not #600)
#580 := (or #246 #261)
#581 := [quant-inst #24 #25]: #580
#582 := [unit-resolution #581 #605]: #261
#222 := [symm #582]: #221
#237 := (= #32 #254)
#89 := [and-elim #88]: #27
#575 := [monotonicity #89]: #237
#563 := [trans #575 #222]: #562
#565 := [trans #563 #584]: #564
#566 := [trans #565 #224]: #34
#92 := (not #34)
#93 := [not-or-elim #90]: #92
[unit-resolution #93 #566]: false
unsat
139963e49c370526a172ba9c7501eab1a4a7d779 113 0
#2 := false
decl f3 :: (-> S3 S3 S2)
decl f4 :: (-> S2 S3)
decl f6 :: S2
#23 := f6
#24 := (f4 f6)
decl f5 :: (-> S2 S3)
#25 := (f5 f6)
#27 := (f3 #25 #24)
#28 := (= f6 #27)
#246 := (f3 #24 #25)
#550 := (= #246 #27)
#548 := (= #27 #246)
#26 := (= #24 #25)
#247 := (f5 #27)
#561 := (= #247 #25)
#560 := (= #27 f6)
#74 := (not #26)
#567 := [hypothesis]: #74
#241 := (or #28 #26)
#76 := (iff #28 #74)
#29 := (iff #26 #28)
#30 := (not #29)
#77 := (iff #30 #76)
#78 := [rewrite]: #77
#73 := [asserted]: #30
#81 := [mp #73 #78]: #76
#153 := (not #76)
#240 := (or #28 #26 #153)
#154 := [def-axiom]: #240
#155 := [unit-resolution #154 #81]: #241
#568 := [unit-resolution #155 #567]: #28
#218 := [symm #568]: #560
#219 := [monotonicity #218]: #561
#226 := (= #24 #247)
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#579 := (pattern #16)
#17 := (f5 #16)
#58 := (= #15 #17)
#580 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #579) #58)
#62 := (forall (vars (?v0 S3) (?v1 S3)) #58)
#583 := (iff #62 #580)
#581 := (iff #58 #58)
#582 := [refl]: #581
#584 := [quant-intro #582]: #583
#83 := (~ #62 #62)
#82 := (~ #58 #58)
#95 := [refl]: #82
#84 := [nnf-pos #95]: #83
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#63 := (iff #19 #62)
#60 := (iff #18 #58)
#61 := [rewrite]: #60
#64 := [quant-intro #61]: #63
#57 := [asserted]: #19
#67 := [mp #57 #64]: #62
#96 := [mp~ #67 #84]: #62
#585 := [mp #96 #584]: #580
#231 := (not #580)
#232 := (or #231 #226)
#566 := [quant-inst #25 #24]: #232
#223 := [unit-resolution #566 #585]: #226
#562 := [trans #223 #219]: #26
#203 := [unit-resolution #567 #562]: false
#546 := [lemma #203]: #26
#208 := (= #25 #24)
#209 := [symm #546]: #208
#549 := [monotonicity #209 #546]: #548
#551 := [symm #549]: #550
#243 := (= f6 #246)
#8 := (:var 0 S2)
#10 := (f5 #8)
#572 := (pattern #10)
#9 := (f4 #8)
#571 := (pattern #9)
#11 := (f3 #9 #10)
#51 := (= #8 #11)
#573 := (forall (vars (?v0 S2)) (:pat #571 #572) #51)
#54 := (forall (vars (?v0 S2)) #51)
#576 := (iff #54 #573)
#574 := (iff #51 #51)
#575 := [refl]: #574
#577 := [quant-intro #575]: #576
#93 := (~ #54 #54)
#91 := (~ #51 #51)
#92 := [refl]: #91
#94 := [nnf-pos #92]: #93
#12 := (= #11 #8)
#13 := (forall (vars (?v0 S2)) #12)
#55 := (iff #13 #54)
#52 := (iff #12 #51)
#53 := [rewrite]: #52
#56 := [quant-intro #53]: #55
#50 := [asserted]: #13
#59 := [mp #50 #56]: #54
#80 := [mp~ #59 #94]: #54
#578 := [mp #80 #577]: #573
#563 := (not #573)
#565 := (or #563 #243)
#220 := [quant-inst #23]: #565
#210 := [unit-resolution #220 #578]: #243
#552 := [trans #210 #551]: #28
#242 := (not #28)
#245 := (or #242 #74)
#233 := (or #242 #74 #153)
#244 := [def-axiom]: #233
#173 := [unit-resolution #244 #81]: #245
#207 := [unit-resolution #173 #546]: #242
[unit-resolution #207 #552]: false
unsat
49afcc0d7e8a703cc498df193e407add0e832e10 72 0
#2 := false
decl f4 :: (-> S4 S5 S5)
decl f9 :: S5
#22 := f9
decl f16 :: S4
#59 := f16
#60 := (f4 f16 f9)
#270 := (f4 f16 #60)
#343 := (= f9 #270)
#320 := (= #60 #270)
#336 := (= #270 #60)
#61 := (= #60 f9)
#146 := (= f9 #60)
#62 := (not #61)
#63 := (not #62)
#158 := (iff #63 #146)
#150 := (not #146)
#153 := (not #150)
#156 := (iff #153 #146)
#157 := [rewrite]: #156
#154 := (iff #63 #153)
#151 := (iff #62 #150)
#148 := (iff #61 #146)
#149 := [rewrite]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#159 := [trans #155 #157]: #158
#145 := [asserted]: #63
#162 := [mp #145 #159]: #146
#678 := [symm #162]: #61
#679 := [monotonicity #678]: #336
#663 := [symm #679]: #320
#324 := [trans #162 #663]: #343
#337 := (not #343)
#11 := (:var 0 S5)
#10 := (:var 1 S4)
#12 := (f4 #10 #11)
#717 := (pattern #12)
#38 := (= #12 f9)
#39 := (not #38)
#718 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #717) #39)
#40 := (forall (vars (?v0 S4) (?v1 S5)) #39)
#721 := (iff #40 #718)
#719 := (iff #39 #39)
#720 := [refl]: #719
#722 := [quant-intro #720]: #721
#165 := (~ #40 #40)
#167 := (~ #39 #39)
#164 := [refl]: #167
#161 := [nnf-pos #164]: #165
#100 := [asserted]: #40
#163 := [mp~ #100 #161]: #40
#723 := [mp #163 #722]: #718
#348 := (not #718)
#349 := (or #348 #337)
#362 := (= #270 f9)
#290 := (not #362)
#683 := (or #348 #290)
#685 := (iff #683 #349)
#681 := (iff #349 #349)
#687 := [rewrite]: #681
#469 := (iff #290 #337)
#680 := (iff #362 #343)
#682 := [rewrite]: #680
#676 := [monotonicity #682]: #469
#686 := [monotonicity #676]: #685
#677 := [trans #686 #687]: #685
#684 := [quant-inst #59 #60]: #683
#335 := [mp #684 #677]: #349
#340 := [unit-resolution #335 #723]: #337
[unit-resolution #340 #324]: false
unsat
04befb37cbbc5695f38171536eac721870f8c5ee 59 0
#2 := false
decl f4 :: (-> S4 S5 S5)
decl f9 :: S5
#22 := f9
decl f17 :: S4
#60 := f17
#61 := (f4 f17 f9)
decl f16 :: S4
#59 := f16
#62 := (f4 f16 #61)
#148 := (= f9 #62)
#63 := (= #62 f9)
#64 := (not #63)
#65 := (not #64)
#160 := (iff #65 #148)
#152 := (not #148)
#155 := (not #152)
#158 := (iff #155 #148)
#159 := [rewrite]: #158
#156 := (iff #65 #155)
#153 := (iff #64 #152)
#150 := (iff #63 #148)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#161 := [trans #157 #159]: #160
#147 := [asserted]: #65
#164 := [mp #147 #161]: #148
#11 := (:var 0 S5)
#10 := (:var 1 S4)
#12 := (f4 #10 #11)
#719 := (pattern #12)
#38 := (= #12 f9)
#39 := (not #38)
#720 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #719) #39)
#40 := (forall (vars (?v0 S4) (?v1 S5)) #39)
#723 := (iff #40 #720)
#721 := (iff #39 #39)
#722 := [refl]: #721
#724 := [quant-intro #722]: #723
#167 := (~ #40 #40)
#169 := (~ #39 #39)
#166 := [refl]: #169
#163 := [nnf-pos #166]: #167
#102 := [asserted]: #40
#165 := [mp~ #102 #163]: #40
#725 := [mp #165 #724]: #720
#351 := (not #720)
#635 := (or #351 #152)
#636 := (or #351 #64)
#633 := (iff #636 #635)
#640 := (iff #635 #635)
#634 := [rewrite]: #640
#639 := [monotonicity #154]: #633
#641 := [trans #639 #634]: #633
#632 := [quant-inst #59 #61]: #636
#470 := [mp #632 #641]: #635
[unit-resolution #470 #725 #164]: false
unsat
b0341ff23e5abb796f1191ac954b55a496b57644 136 0
#2 := false
decl f4 :: (-> S4 S5 S5)
decl f9 :: S5
#22 := f9
decl f17 :: S4
#60 := f17
#64 := (f4 f17 f9)
decl f16 :: S4
#59 := f16
#63 := (f4 f16 f9)
#65 := (= #63 #64)
#61 := (= f16 f17)
#386 := (iff #61 #65)
#373 := (not #386)
#66 := (not #65)
#151 := (or #61 #66)
#155 := (not #151)
#62 := (not #61)
#67 := (implies #62 #66)
#68 := (not #67)
#156 := (iff #68 #155)
#153 := (iff #67 #151)
#154 := [rewrite]: #153
#157 := [monotonicity #154]: #156
#150 := [asserted]: #68
#160 := [mp #150 #157]: #155
#159 := [not-or-elim #160]: #65
#158 := [not-or-elim #160]: #62
#651 := (or #373 #61 #66)
#652 := [def-axiom]: #651
#621 := [unit-resolution #652 #158 #159]: #373
#45 := (:var 2 S5)
#44 := (:var 3 S4)
#46 := (f4 #44 #45)
#11 := (:var 0 S5)
#10 := (:var 1 S4)
#12 := (f4 #10 #11)
#724 := (pattern #12 #46)
#122 := (= #11 #45)
#201 := (not #122)
#119 := (= #10 #44)
#200 := (not #119)
#202 := (or #200 #201)
#203 := (not #202)
#115 := (= #12 #46)
#206 := (iff #115 #203)
#725 := (forall (vars (?v0 S4) (?v1 S5) (?v2 S4) (?v3 S5)) (:pat #724) #206)
#209 := (forall (vars (?v0 S4) (?v1 S5) (?v2 S4) (?v3 S5)) #206)
#728 := (iff #209 #725)
#726 := (iff #206 #206)
#727 := [refl]: #726
#729 := [quant-intro #727]: #728
#125 := (and #119 #122)
#128 := (iff #115 #125)
#131 := (forall (vars (?v0 S4) (?v1 S5) (?v2 S4) (?v3 S5)) #128)
#210 := (iff #131 #209)
#207 := (iff #128 #206)
#204 := (iff #125 #203)
#205 := [rewrite]: #204
#208 := [monotonicity #205]: #207
#211 := [quant-intro #208]: #210
#187 := (~ #131 #131)
#162 := (~ #128 #128)
#163 := [refl]: #162
#188 := [nnf-pos #163]: #187
#49 := (= #45 #11)
#48 := (= #44 #10)
#50 := (and #48 #49)
#47 := (= #46 #12)
#51 := (iff #47 #50)
#52 := (forall (vars (?v0 S4) (?v1 S5) (?v2 S4) (?v3 S5)) #51)
#132 := (iff #52 #131)
#129 := (iff #51 #128)
#126 := (iff #50 #125)
#123 := (iff #49 #122)
#124 := [rewrite]: #123
#120 := (iff #48 #119)
#121 := [rewrite]: #120
#127 := [monotonicity #121 #124]: #126
#117 := (iff #47 #115)
#118 := [rewrite]: #117
#130 := [monotonicity #118 #127]: #129
#133 := [quant-intro #130]: #132
#114 := [asserted]: #52
#136 := [mp #114 #133]: #131
#189 := [mp~ #136 #188]: #131
#212 := [mp #189 #211]: #209
#730 := [mp #212 #729]: #725
#658 := (not #725)
#380 := (or #658 #386)
#335 := (= f9 f9)
#340 := (not #335)
#678 := (or #62 #340)
#336 := (not #678)
#679 := (iff #65 #336)
#381 := (or #658 #679)
#659 := (iff #381 #380)
#660 := (iff #380 #380)
#369 := [rewrite]: #660
#278 := (iff #679 #386)
#368 := (iff #65 #61)
#372 := (iff #368 #386)
#387 := [rewrite]: #372
#384 := (iff #679 #368)
#661 := (iff #336 #61)
#311 := (not #62)
#672 := (iff #311 #61)
#675 := [rewrite]: #672
#312 := (iff #336 #311)
#671 := (iff #678 #62)
#668 := (or #62 false)
#670 := (iff #668 #62)
#306 := [rewrite]: #670
#669 := (iff #678 #668)
#666 := (iff #340 false)
#1 := true
#324 := (not true)
#327 := (iff #324 false)
#665 := [rewrite]: #327
#325 := (iff #340 #324)
#320 := (iff #335 true)
#663 := [rewrite]: #320
#326 := [monotonicity #663]: #325
#667 := [trans #326 #665]: #666
#664 := [monotonicity #667]: #669
#673 := [trans #664 #306]: #671
#674 := [monotonicity #673]: #312
#662 := [trans #674 #675]: #661
#385 := [monotonicity #662]: #384
#657 := [trans #385 #387]: #278
#656 := [monotonicity #657]: #659
#370 := [trans #656 #369]: #659
#655 := [quant-inst #60 #22 #59 #22]: #381
#371 := [mp #655 #370]: #380
[unit-resolution #371 #730 #621]: false
unsat
fff2cbf089f9102929d14127f6531c5541969006 50 0
#2 := false
decl f15 :: (-> S5 S4)
decl f4 :: (-> S4 S5 S5)
decl f17 :: S5
#60 := f17
decl f16 :: S4
#59 := f16
#61 := (f4 f16 f17)
#62 := (f15 #61)
#147 := (= f16 #62)
#151 := (not #147)
#63 := (= #62 f16)
#64 := (not #63)
#152 := (iff #64 #151)
#149 := (iff #63 #147)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#146 := [asserted]: #64
#156 := [mp #146 #153]: #151
#11 := (:var 0 S5)
#10 := (:var 1 S4)
#12 := (f4 #10 #11)
#711 := (pattern #12)
#56 := (f15 #12)
#139 := (= #10 #56)
#731 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #711) #139)
#143 := (forall (vars (?v0 S4) (?v1 S5)) #139)
#734 := (iff #143 #731)
#732 := (iff #139 #139)
#733 := [refl]: #732
#735 := [quant-intro #733]: #734
#191 := (~ #143 #143)
#189 := (~ #139 #139)
#190 := [refl]: #189
#192 := [nnf-pos #190]: #191
#57 := (= #56 #10)
#58 := (forall (vars (?v0 S4) (?v1 S5)) #57)
#144 := (iff #58 #143)
#141 := (iff #57 #139)
#142 := [rewrite]: #141
#145 := [quant-intro #142]: #144
#138 := [asserted]: #58
#148 := [mp #138 #145]: #143
#193 := [mp~ #148 #192]: #143
#736 := [mp #193 #735]: #731
#265 := (not #731)
#352 := (or #265 #147)
#266 := [quant-inst #59 #60]: #352
[unit-resolution #266 #736 #156]: false
unsat
affee22ddd78a2e982940d231a35763dd8db5ff1 50 0
#2 := false
decl f14 :: (-> S5 S5)
decl f4 :: (-> S4 S5 S5)
decl f17 :: S5
#60 := f17
decl f16 :: S4
#59 := f16
#61 := (f4 f16 f17)
#62 := (f14 #61)
#147 := (= f17 #62)
#151 := (not #147)
#63 := (= #62 f17)
#64 := (not #63)
#152 := (iff #64 #151)
#149 := (iff #63 #147)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#146 := [asserted]: #64
#156 := [mp #146 #153]: #151
#11 := (:var 0 S5)
#10 := (:var 1 S4)
#12 := (f4 #10 #11)
#711 := (pattern #12)
#53 := (f14 #12)
#131 := (= #11 #53)
#725 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #711) #131)
#135 := (forall (vars (?v0 S4) (?v1 S5)) #131)
#728 := (iff #135 #725)
#726 := (iff #131 #131)
#727 := [refl]: #726
#729 := [quant-intro #727]: #728
#186 := (~ #135 #135)
#184 := (~ #131 #131)
#185 := [refl]: #184
#187 := [nnf-pos #185]: #186
#54 := (= #53 #11)
#55 := (forall (vars (?v0 S4) (?v1 S5)) #54)
#136 := (iff #55 #135)
#133 := (iff #54 #131)
#134 := [rewrite]: #133
#137 := [quant-intro #134]: #136
#130 := [asserted]: #55
#140 := [mp #130 #137]: #135
#188 := [mp~ #140 #187]: #135
#730 := [mp #188 #729]: #725
#355 := (not #725)
#356 := (or #355 #147)
#284 := [quant-inst #59 #60]: #356
[unit-resolution #284 #730 #156]: false
unsat
9aafa835b8aaa001d18bcde9a4c11eddfa9c9649 56 0
#2 := false
decl f15 :: (-> S5 S4)
decl f4 :: (-> S4 S5 S5)
decl f9 :: S5
#22 := f9
decl f18 :: S4
#61 := f18
#62 := (f4 f18 f9)
decl f17 :: S4
#60 := f17
#63 := (f4 f17 #62)
decl f16 :: S4
#59 := f16
#64 := (f4 f16 #63)
#65 := (f15 #64)
#150 := (= f16 #65)
#154 := (not #150)
#66 := (= #65 f16)
#67 := (not #66)
#155 := (iff #67 #154)
#152 := (iff #66 #150)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#149 := [asserted]: #67
#159 := [mp #149 #156]: #154
#11 := (:var 0 S5)
#10 := (:var 1 S4)
#12 := (f4 #10 #11)
#714 := (pattern #12)
#56 := (f15 #12)
#142 := (= #10 #56)
#734 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #714) #142)
#146 := (forall (vars (?v0 S4) (?v1 S5)) #142)
#737 := (iff #146 #734)
#735 := (iff #142 #142)
#736 := [refl]: #735
#738 := [quant-intro #736]: #737
#194 := (~ #146 #146)
#192 := (~ #142 #142)
#193 := [refl]: #192
#195 := [nnf-pos #193]: #194
#57 := (= #56 #10)
#58 := (forall (vars (?v0 S4) (?v1 S5)) #57)
#147 := (iff #58 #146)
#144 := (iff #57 #142)
#145 := [rewrite]: #144
#148 := [quant-intro #145]: #147
#141 := [asserted]: #58
#151 := [mp #141 #148]: #146
#196 := [mp~ #151 #195]: #146
#739 := [mp #196 #738]: #734
#269 := (not #734)
#516 := (or #269 #150)
#517 := [quant-inst #59 #63]: #516
[unit-resolution #517 #739 #159]: false
unsat
5f1277eca9b4949514eac16a5c81e154e20379e5 56 0
#2 := false
decl f14 :: (-> S5 S5)
decl f4 :: (-> S4 S5 S5)
decl f9 :: S5
#22 := f9
decl f18 :: S4
#61 := f18
#62 := (f4 f18 f9)
decl f17 :: S4
#60 := f17
#63 := (f4 f17 #62)
decl f16 :: S4
#59 := f16
#64 := (f4 f16 #63)
#65 := (f14 #64)
#150 := (= #63 #65)
#154 := (not #150)
#66 := (= #65 #63)
#67 := (not #66)
#155 := (iff #67 #154)
#152 := (iff #66 #150)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#149 := [asserted]: #67
#159 := [mp #149 #156]: #154
#11 := (:var 0 S5)
#10 := (:var 1 S4)
#12 := (f4 #10 #11)
#714 := (pattern #12)
#53 := (f14 #12)
#134 := (= #11 #53)
#728 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #714) #134)
#138 := (forall (vars (?v0 S4) (?v1 S5)) #134)
#731 := (iff #138 #728)
#729 := (iff #134 #134)
#730 := [refl]: #729
#732 := [quant-intro #730]: #731
#189 := (~ #138 #138)
#187 := (~ #134 #134)
#188 := [refl]: #187
#190 := [nnf-pos #188]: #189
#54 := (= #53 #11)
#55 := (forall (vars (?v0 S4) (?v1 S5)) #54)
#139 := (iff #55 #138)
#136 := (iff #54 #134)
#137 := [rewrite]: #136
#140 := [quant-intro #137]: #139
#133 := [asserted]: #55
#143 := [mp #133 #140]: #138
#191 := [mp~ #143 #190]: #138
#733 := [mp #191 #732]: #728
#287 := (not #728)
#528 := (or #287 #150)
#483 := [quant-inst #59 #63]: #528
[unit-resolution #483 #733 #159]: false
unsat
3d958afb574f2b777d342f1a937e466d602feddd 95 0
#2 := false
decl f15 :: (-> S5 S4)
decl f14 :: (-> S5 S5)
decl f4 :: (-> S4 S5 S5)
decl f9 :: S5
#22 := f9
decl f18 :: S4
#61 := f18
#62 := (f4 f18 f9)
decl f17 :: S4
#60 := f17
#63 := (f4 f17 #62)
decl f16 :: S4
#59 := f16
#64 := (f4 f16 #63)
#65 := (f14 #64)
#66 := (f15 #65)
#151 := (= f17 #66)
#617 := (f15 #63)
#435 := (= #617 #66)
#439 := (= #66 #617)
#434 := (= #65 #63)
#517 := (= #63 #65)
#11 := (:var 0 S5)
#10 := (:var 1 S4)
#12 := (f4 #10 #11)
#715 := (pattern #12)
#53 := (f14 #12)
#135 := (= #11 #53)
#729 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #715) #135)
#139 := (forall (vars (?v0 S4) (?v1 S5)) #135)
#732 := (iff #139 #729)
#730 := (iff #135 #135)
#731 := [refl]: #730
#733 := [quant-intro #731]: #732
#190 := (~ #139 #139)
#188 := (~ #135 #135)
#189 := [refl]: #188
#191 := [nnf-pos #189]: #190
#54 := (= #53 #11)
#55 := (forall (vars (?v0 S4) (?v1 S5)) #54)
#140 := (iff #55 #139)
#137 := (iff #54 #135)
#138 := [rewrite]: #137
#141 := [quant-intro #138]: #140
#134 := [asserted]: #55
#144 := [mp #134 #141]: #139
#192 := [mp~ #144 #191]: #139
#734 := [mp #192 #733]: #729
#288 := (not #729)
#484 := (or #288 #517)
#485 := [quant-inst #59 #63]: #484
#433 := [unit-resolution #485 #734]: #517
#438 := [symm #433]: #434
#432 := [monotonicity #438]: #439
#436 := [symm #432]: #435
#621 := (= f17 #617)
#56 := (f15 #12)
#143 := (= #10 #56)
#735 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #715) #143)
#147 := (forall (vars (?v0 S4) (?v1 S5)) #143)
#738 := (iff #147 #735)
#736 := (iff #143 #143)
#737 := [refl]: #736
#739 := [quant-intro #737]: #738
#195 := (~ #147 #147)
#193 := (~ #143 #143)
#194 := [refl]: #193
#196 := [nnf-pos #194]: #195
#57 := (= #56 #10)
#58 := (forall (vars (?v0 S4) (?v1 S5)) #57)
#148 := (iff #58 #147)
#145 := (iff #57 #143)
#146 := [rewrite]: #145
#149 := [quant-intro #146]: #148
#142 := [asserted]: #58
#152 := [mp #142 #149]: #147
#197 := [mp~ #152 #196]: #147
#740 := [mp #197 #739]: #735
#270 := (not #735)
#602 := (or #270 #621)
#599 := [quant-inst #60 #62]: #602
#431 := [unit-resolution #599 #740]: #621
#422 := [trans #431 #436]: #151
#155 := (not #151)
#67 := (= #66 f17)
#68 := (not #67)
#156 := (iff #68 #155)
#153 := (iff #67 #151)
#154 := [rewrite]: #153
#157 := [monotonicity #154]: #156
#150 := [asserted]: #68
#160 := [mp #150 #157]: #155
[unit-resolution #160 #422]: false
unsat
27c15c60b6aaec6351efe83812dce879a8ad44d1 71 0
#2 := false
decl f14 :: (-> S5 S5)
decl f4 :: (-> S4 S5 S5)
decl f9 :: S5
#22 := f9
decl f18 :: S4
#61 := f18
#62 := (f4 f18 f9)
decl f17 :: S4
#60 := f17
#63 := (f4 f17 #62)
decl f16 :: S4
#59 := f16
#64 := (f4 f16 #63)
#65 := (f14 #64)
#66 := (f14 #65)
#151 := (= #62 #66)
#608 := (f14 #63)
#435 := (= #608 #66)
#439 := (= #66 #608)
#434 := (= #65 #63)
#517 := (= #63 #65)
#11 := (:var 0 S5)
#10 := (:var 1 S4)
#12 := (f4 #10 #11)
#715 := (pattern #12)
#53 := (f14 #12)
#135 := (= #11 #53)
#729 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #715) #135)
#139 := (forall (vars (?v0 S4) (?v1 S5)) #135)
#732 := (iff #139 #729)
#730 := (iff #135 #135)
#731 := [refl]: #730
#733 := [quant-intro #731]: #732
#190 := (~ #139 #139)
#188 := (~ #135 #135)
#189 := [refl]: #188
#191 := [nnf-pos #189]: #190
#54 := (= #53 #11)
#55 := (forall (vars (?v0 S4) (?v1 S5)) #54)
#140 := (iff #55 #139)
#137 := (iff #54 #135)
#138 := [rewrite]: #137
#141 := [quant-intro #138]: #140
#134 := [asserted]: #55
#144 := [mp #134 #141]: #139
#192 := [mp~ #144 #191]: #139
#734 := [mp #192 #733]: #729
#288 := (not #729)
#484 := (or #288 #517)
#485 := [quant-inst #59 #63]: #484
#433 := [unit-resolution #485 #734]: #517
#438 := [symm #433]: #434
#432 := [monotonicity #438]: #439
#436 := [symm #432]: #435
#610 := (= #62 #608)
#612 := (or #288 #610)
#613 := [quant-inst #60 #62]: #612
#431 := [unit-resolution #613 #734]: #610
#422 := [trans #431 #436]: #151
#155 := (not #151)
#67 := (= #66 #62)
#68 := (not #67)
#156 := (iff #68 #155)
#153 := (iff #67 #151)
#154 := [rewrite]: #153
#157 := [monotonicity #154]: #156
#150 := [asserted]: #68
#160 := [mp #150 #157]: #155
[unit-resolution #160 #422]: false
unsat
a98c8f96e82461af4b3fef055b4043eba1bf782f 97 0
#2 := false
decl f17 :: (-> S4 S15)
decl f15 :: (-> S5 S4)
decl f4 :: (-> S4 S5 S5)
decl f9 :: S5
#22 := f9
decl f16 :: (-> S15 S16 S4)
decl f20 :: S16
#75 := f20
decl f19 :: S15
#74 := f19
#76 := (f16 f19 f20)
#77 := (f4 #76 f9)
#78 := (f15 #77)
#79 := (f17 #78)
#188 := (= f19 #79)
#374 := (f17 #76)
#361 := (= #374 #79)
#721 := (= #79 #374)
#717 := (= #78 #76)
#320 := (= #76 #78)
#11 := (:var 0 S5)
#10 := (:var 1 S4)
#12 := (f4 #10 #11)
#767 := (pattern #12)
#56 := (f15 #12)
#156 := (= #10 #56)
#787 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #767) #156)
#160 := (forall (vars (?v0 S4) (?v1 S5)) #156)
#790 := (iff #160 #787)
#788 := (iff #156 #156)
#789 := [refl]: #788
#791 := [quant-intro #789]: #790
#232 := (~ #160 #160)
#230 := (~ #156 #156)
#231 := [refl]: #230
#233 := [nnf-pos #231]: #232
#57 := (= #56 #10)
#58 := (forall (vars (?v0 S4) (?v1 S5)) #57)
#161 := (iff #58 #160)
#158 := (iff #57 #156)
#159 := [rewrite]: #158
#162 := [quant-intro #159]: #161
#155 := [asserted]: #58
#165 := [mp #155 #162]: #160
#234 := [mp~ #165 #233]: #160
#792 := [mp #234 #791]: #787
#408 := (not #787)
#322 := (or #408 #320)
#409 := [quant-inst #76 #22]: #322
#716 := [unit-resolution #409 #792]: #320
#720 := [symm #716]: #717
#723 := [monotonicity #720]: #721
#362 := [symm #723]: #361
#375 := (= f19 #374)
#66 := (:var 0 S16)
#65 := (:var 1 S15)
#67 := (f16 #65 #66)
#801 := (pattern #67)
#71 := (f17 #67)
#180 := (= #65 #71)
#808 := (forall (vars (?v0 S15) (?v1 S16)) (:pat #801) #180)
#184 := (forall (vars (?v0 S15) (?v1 S16)) #180)
#811 := (iff #184 #808)
#809 := (iff #180 #180)
#810 := [refl]: #809
#812 := [quant-intro #810]: #811
#247 := (~ #184 #184)
#245 := (~ #180 #180)
#246 := [refl]: #245
#248 := [nnf-pos #246]: #247
#72 := (= #71 #65)
#73 := (forall (vars (?v0 S15) (?v1 S16)) #72)
#185 := (iff #73 #184)
#182 := (iff #72 #180)
#183 := [rewrite]: #182
#186 := [quant-intro #183]: #185
#179 := [asserted]: #73
#189 := [mp #179 #186]: #184
#249 := [mp~ #189 #248]: #184
#813 := [mp #249 #812]: #808
#718 := (not #808)
#719 := (or #718 #375)
#714 := [quant-inst #74 #75]: #719
#356 := [unit-resolution #714 #813]: #375
#724 := [trans #356 #362]: #188
#192 := (not #188)
#80 := (= #79 f19)
#81 := (not #80)
#193 := (iff #81 #192)
#190 := (iff #80 #188)
#191 := [rewrite]: #190
#194 := [monotonicity #191]: #193
#187 := [asserted]: #81
#197 := [mp #187 #194]: #192
[unit-resolution #197 #724]: false
unsat
81664cdfae8156255b7987f37aef4ab63fd862c1 97 0
#2 := false
decl f18 :: (-> S4 S16)
decl f15 :: (-> S5 S4)
decl f4 :: (-> S4 S5 S5)
decl f9 :: S5
#22 := f9
decl f16 :: (-> S15 S16 S4)
decl f20 :: S16
#75 := f20
decl f19 :: S15
#74 := f19
#76 := (f16 f19 f20)
#77 := (f4 #76 f9)
#78 := (f15 #77)
#79 := (f18 #78)
#188 := (= f20 #79)
#728 := (f18 #76)
#361 := (= #728 #79)
#721 := (= #79 #728)
#717 := (= #78 #76)
#320 := (= #76 #78)
#11 := (:var 0 S5)
#10 := (:var 1 S4)
#12 := (f4 #10 #11)
#767 := (pattern #12)
#56 := (f15 #12)
#156 := (= #10 #56)
#787 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #767) #156)
#160 := (forall (vars (?v0 S4) (?v1 S5)) #156)
#790 := (iff #160 #787)
#788 := (iff #156 #156)
#789 := [refl]: #788
#791 := [quant-intro #789]: #790
#232 := (~ #160 #160)
#230 := (~ #156 #156)
#231 := [refl]: #230
#233 := [nnf-pos #231]: #232
#57 := (= #56 #10)
#58 := (forall (vars (?v0 S4) (?v1 S5)) #57)
#161 := (iff #58 #160)
#158 := (iff #57 #156)
#159 := [rewrite]: #158
#162 := [quant-intro #159]: #161
#155 := [asserted]: #58
#165 := [mp #155 #162]: #160
#234 := [mp~ #165 #233]: #160
#792 := [mp #234 #791]: #787
#408 := (not #787)
#322 := (or #408 #320)
#409 := [quant-inst #76 #22]: #322
#716 := [unit-resolution #409 #792]: #320
#720 := [symm #716]: #717
#723 := [monotonicity #720]: #721
#362 := [symm #723]: #361
#386 := (= f20 #728)
#66 := (:var 0 S16)
#65 := (:var 1 S15)
#67 := (f16 #65 #66)
#801 := (pattern #67)
#68 := (f18 #67)
#172 := (= #66 #68)
#802 := (forall (vars (?v0 S15) (?v1 S16)) (:pat #801) #172)
#176 := (forall (vars (?v0 S15) (?v1 S16)) #172)
#805 := (iff #176 #802)
#803 := (iff #172 #172)
#804 := [refl]: #803
#806 := [quant-intro #804]: #805
#242 := (~ #176 #176)
#240 := (~ #172 #172)
#241 := [refl]: #240
#243 := [nnf-pos #241]: #242
#69 := (= #68 #66)
#70 := (forall (vars (?v0 S15) (?v1 S16)) #69)
#177 := (iff #70 #176)
#174 := (iff #69 #172)
#175 := [rewrite]: #174
#178 := [quant-intro #175]: #177
#171 := [asserted]: #70
#181 := [mp #171 #178]: #176
#244 := [mp~ #181 #243]: #176
#807 := [mp #244 #806]: #802
#376 := (not #802)
#377 := (or #376 #386)
#715 := [quant-inst #74 #75]: #377
#356 := [unit-resolution #715 #807]: #386
#724 := [trans #356 #362]: #188
#192 := (not #188)
#80 := (= #79 f20)
#81 := (not #80)
#193 := (iff #81 #192)
#190 := (iff #80 #188)
#191 := [rewrite]: #190
#194 := [monotonicity #191]: #193
#187 := [asserted]: #81
#197 := [mp #187 #194]: #192
[unit-resolution #197 #724]: false
unsat
cf613377475a54ad92f6fa8003d09874c4dd987e 27 0
#2 := false
decl f11 :: (-> S4 Int)
decl f13 :: S4
#39 := f13
#42 := (f11 f13)
decl f12 :: S4
#38 := f12
#41 := (f11 f12)
#43 := (= #41 #42)
#40 := (= f12 f13)
#92 := (not #40)
#94 := (or #92 #43)
#97 := (not #94)
#44 := (implies #40 #43)
#45 := (not #44)
#98 := (iff #45 #97)
#95 := (iff #44 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#91 := [asserted]: #45
#102 := [mp #91 #99]: #97
#100 := [not-or-elim #102]: #40
#277 := [monotonicity #100]: #43
#101 := (not #43)
#103 := [not-or-elim #102]: #101
[unit-resolution #103 #277]: false
unsat
6d6860bfe81ec3edbe1c99a18aabbf9ae1253e74 27 0
#2 := false
decl f10 :: (-> S4 Int)
decl f13 :: S4
#39 := f13
#42 := (f10 f13)
decl f12 :: S4
#38 := f12
#41 := (f10 f12)
#43 := (= #41 #42)
#40 := (= f12 f13)
#92 := (not #40)
#94 := (or #92 #43)
#97 := (not #94)
#44 := (implies #40 #43)
#45 := (not #44)
#98 := (iff #45 #97)
#95 := (iff #44 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#91 := [asserted]: #45
#102 := [mp #91 #99]: #97
#100 := [not-or-elim #102]: #40
#277 := [monotonicity #100]: #43
#101 := (not #43)
#103 := [not-or-elim #102]: #101
[unit-resolution #103 #277]: false
unsat
ef081363dddbf9a4a6afa336a6060e79996228d7 27 0
#2 := false
decl f11 :: (-> S4 Int)
decl f13 :: S4
#40 := f13
#41 := (f11 f13)
decl f12 :: S4
#38 := f12
#39 := (f11 f12)
#42 := (= #39 #41)
#44 := (= f12 f13)
#45 := (not #44)
#94 := (or #42 #45)
#98 := (not #94)
#43 := (not #42)
#46 := (implies #43 #45)
#47 := (not #46)
#99 := (iff #47 #98)
#96 := (iff #46 #94)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#93 := [asserted]: #47
#103 := [mp #93 #100]: #98
#102 := [not-or-elim #103]: #44
#277 := [monotonicity #102]: #42
#101 := [not-or-elim #103]: #43
[unit-resolution #101 #277]: false
unsat
903c4f7ca1d07607d314979b3f7a41a8fc46e4c9 27 0
#2 := false
decl f10 :: (-> S4 Int)
decl f13 :: S4
#40 := f13
#41 := (f10 f13)
decl f12 :: S4
#38 := f12
#39 := (f10 f12)
#42 := (= #39 #41)
#44 := (= f12 f13)
#45 := (not #44)
#94 := (or #42 #45)
#98 := (not #94)
#43 := (not #42)
#46 := (implies #43 #45)
#47 := (not #46)
#99 := (iff #47 #98)
#96 := (iff #46 #94)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#93 := [asserted]: #47
#103 := [mp #93 #100]: #98
#102 := [not-or-elim #103]: #44
#277 := [monotonicity #102]: #42
#101 := [not-or-elim #103]: #43
[unit-resolution #101 #277]: false
unsat
c2ddf97e343f0f179028b651e27488b381d9b232 54 0
#2 := false
#38 := 3::Int
decl f11 :: (-> S4 Int)
decl f4 :: (-> Int Int S3 S4)
decl f12 :: S3
#40 := f12
#39 := 4::Int
#41 := (f4 3::Int 4::Int f12)
#42 := (f11 #41)
#43 := (= #42 3::Int)
#44 := (not #43)
#90 := [asserted]: #44
#11 := (:var 0 S3)
#10 := (:var 1 Int)
#9 := (:var 2 Int)
#12 := (f4 #9 #10 #11)
#214 := (pattern #12)
#35 := (f11 #12)
#83 := (= #9 #35)
#227 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) (:pat #214) #83)
#87 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #83)
#230 := (iff #87 #227)
#228 := (iff #83 #83)
#229 := [refl]: #228
#231 := [quant-intro #229]: #230
#130 := (~ #87 #87)
#128 := (~ #83 #83)
#129 := [refl]: #128
#131 := [nnf-pos #129]: #130
#36 := (= #35 #9)
#37 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #36)
#88 := (iff #37 #87)
#85 := (iff #36 #83)
#86 := [rewrite]: #85
#89 := [quant-intro #86]: #88
#82 := [asserted]: #37
#92 := [mp #82 #89]: #87
#132 := [mp~ #92 #131]: #87
#232 := [mp #132 #231]: #227
#233 := (not #227)
#234 := (or #233 #43)
#91 := (= 3::Int #42)
#235 := (or #233 #91)
#237 := (iff #235 #234)
#239 := (iff #234 #234)
#240 := [rewrite]: #239
#98 := (iff #91 #43)
#99 := [rewrite]: #98
#238 := [monotonicity #99]: #237
#241 := [trans #238 #240]: #237
#236 := [quant-inst #38 #39 #40]: #235
#242 := [mp #236 #241]: #234
[unit-resolution #242 #232 #90]: false
unsat
57a3abfe79abd00a70bcda611ae3d757ad63951c 54 0
#2 := false
#39 := 4::Int
decl f10 :: (-> S4 Int)
decl f4 :: (-> Int Int S3 S4)
decl f12 :: S3
#40 := f12
#38 := 3::Int
#41 := (f4 3::Int 4::Int f12)
#42 := (f10 #41)
#43 := (= #42 4::Int)
#44 := (not #43)
#90 := [asserted]: #44
#11 := (:var 0 S3)
#10 := (:var 1 Int)
#9 := (:var 2 Int)
#12 := (f4 #9 #10 #11)
#214 := (pattern #12)
#32 := (f10 #12)
#75 := (= #10 #32)
#221 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) (:pat #214) #75)
#79 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #75)
#224 := (iff #79 #221)
#222 := (iff #75 #75)
#223 := [refl]: #222
#225 := [quant-intro #223]: #224
#125 := (~ #79 #79)
#123 := (~ #75 #75)
#124 := [refl]: #123
#126 := [nnf-pos #124]: #125
#33 := (= #32 #10)
#34 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #33)
#80 := (iff #34 #79)
#77 := (iff #33 #75)
#78 := [rewrite]: #77
#81 := [quant-intro #78]: #80
#74 := [asserted]: #34
#84 := [mp #74 #81]: #79
#127 := [mp~ #84 #126]: #79
#226 := [mp #127 #225]: #221
#248 := (not #221)
#249 := (or #248 #43)
#91 := (= 4::Int #42)
#250 := (or #248 #91)
#252 := (iff #250 #249)
#254 := (iff #249 #249)
#255 := [rewrite]: #254
#98 := (iff #91 #43)
#99 := [rewrite]: #98
#253 := [monotonicity #99]: #252
#256 := [trans #253 #255]: #252
#251 := [quant-inst #38 #39 #40]: #250
#257 := [mp #251 #256]: #249
[unit-resolution #257 #226 #90]: false
unsat
1627078085337168675bc7c62614c7f389cf7cb9 109 0
#2 := false
#39 := 4::Int
#38 := 3::Int
#269 := (= 3::Int 4::Int)
#271 := (iff #269 false)
#272 := [rewrite]: #271
decl f10 :: (-> S4 Int)
decl f4 :: (-> Int Int S3 S4)
decl f12 :: S3
#40 := f12
#41 := (f4 3::Int 4::Int f12)
#43 := (f10 #41)
#245 := (= #43 4::Int)
#11 := (:var 0 S3)
#10 := (:var 1 Int)
#9 := (:var 2 Int)
#12 := (f4 #9 #10 #11)
#209 := (pattern #12)
#32 := (f10 #12)
#77 := (= #10 #32)
#216 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) (:pat #209) #77)
#81 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #77)
#219 := (iff #81 #216)
#217 := (iff #77 #77)
#218 := [refl]: #217
#220 := [quant-intro #218]: #219
#120 := (~ #81 #81)
#118 := (~ #77 #77)
#119 := [refl]: #118
#121 := [nnf-pos #119]: #120
#33 := (= #32 #10)
#34 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #33)
#82 := (iff #34 #81)
#79 := (iff #33 #77)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#76 := [asserted]: #34
#86 := [mp #76 #83]: #81
#122 := [mp~ #86 #121]: #81
#221 := [mp #122 #220]: #216
#246 := (not #216)
#247 := (or #246 #245)
#242 := (= 4::Int #43)
#248 := (or #246 #242)
#250 := (iff #248 #247)
#252 := (iff #247 #247)
#253 := [rewrite]: #252
#243 := (iff #242 #245)
#244 := [rewrite]: #243
#251 := [monotonicity #244]: #250
#254 := [trans #251 #253]: #250
#249 := [quant-inst #38 #39 #40]: #248
#255 := [mp #249 #254]: #247
#258 := [unit-resolution #255 #221]: #245
#267 := (= 3::Int #43)
#265 := (= #43 3::Int)
decl f11 :: (-> S4 Int)
#42 := (f11 #41)
#231 := (= #42 3::Int)
#35 := (f11 #12)
#85 := (= #9 #35)
#222 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) (:pat #209) #85)
#89 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #85)
#225 := (iff #89 #222)
#223 := (iff #85 #85)
#224 := [refl]: #223
#226 := [quant-intro #224]: #225
#125 := (~ #89 #89)
#123 := (~ #85 #85)
#124 := [refl]: #123
#126 := [nnf-pos #124]: #125
#36 := (= #35 #9)
#37 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #36)
#90 := (iff #37 #89)
#87 := (iff #36 #85)
#88 := [rewrite]: #87
#91 := [quant-intro #88]: #90
#84 := [asserted]: #37
#94 := [mp #84 #91]: #89
#127 := [mp~ #94 #126]: #89
#227 := [mp #127 #226]: #222
#232 := (not #222)
#233 := (or #232 #231)
#228 := (= 3::Int #42)
#234 := (or #232 #228)
#236 := (iff #234 #233)
#238 := (iff #233 #233)
#239 := [rewrite]: #238
#229 := (iff #228 #231)
#230 := [rewrite]: #229
#237 := [monotonicity #230]: #236
#240 := [trans #237 #239]: #236
#235 := [quant-inst #38 #39 #40]: #234
#241 := [mp #235 #240]: #233
#259 := [unit-resolution #241 #227]: #231
#263 := (= #43 #42)
#44 := (= #42 #43)
#45 := (not #44)
#46 := (not #45)
#93 := (iff #46 #44)
#95 := [rewrite]: #93
#92 := [asserted]: #46
#98 := [mp #92 #95]: #44
#264 := [symm #98]: #263
#266 := [trans #264 #259]: #265
#268 := [symm #266]: #267
#270 := [trans #268 #258]: #269
[mp #270 #272]: false
unsat
5633d72176578081af78ab5b81311524f1bf4c82 73 0
#2 := false
decl f6 :: (-> Int Int S4 S5)
decl f13 :: S4
#47 := f13
#46 := 4::Int
#12 := 5::Int
#50 := (f6 5::Int 4::Int f13)
decl f9 :: (-> S2 S5 S5)
#45 := 3::Int
#48 := (f6 3::Int 4::Int f13)
decl f4 :: S2
#8 := f4
#49 := (f9 f4 #48)
#51 := (= #49 #50)
decl f3 :: (-> S2 Int Int)
#302 := (f3 f4 3::Int)
#303 := (f6 #302 4::Int f13)
#343 := (= #303 #50)
#341 := (= #50 #303)
#335 := (= 5::Int #302)
#331 := (= #302 5::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 5::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#104 := (~ #14 #14)
#102 := (~ #13 #13)
#103 := [refl]: #102
#105 := [nnf-pos #103]: #104
#72 := [asserted]: #14
#106 := [mp~ #72 #105]: #14
#336 := (not #14)
#337 := (or #336 #331)
#338 := [quant-inst #45]: #337
#332 := [unit-resolution #338 #106]: #331
#339 := [symm #332]: #335
#342 := [monotonicity #339]: #341
#344 := [symm #342]: #343
#306 := (= #49 #303)
#18 := (:var 0 S4)
#17 := (:var 1 Int)
#16 := (:var 2 Int)
#25 := (:var 3 S2)
#32 := (f3 #25 #16)
#33 := (f6 #32 #17 #18)
#211 := (pattern #33)
#19 := (f6 #16 #17 #18)
#31 := (f9 #25 #19)
#210 := (pattern #31)
#34 := (= #31 #33)
#212 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #210 #211) #34)
#35 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #34)
#215 := (iff #35 #212)
#213 := (iff #34 #34)
#214 := [refl]: #213
#216 := [quant-intro #214]: #215
#119 := (~ #35 #35)
#117 := (~ #34 #34)
#118 := [refl]: #117
#120 := [nnf-pos #118]: #119
#75 := [asserted]: #35
#121 := [mp~ #75 #120]: #35
#217 := [mp #121 #216]: #212
#309 := (not #212)
#310 := (or #309 #306)
#311 := [quant-inst #8 #45 #46 #47]: #310
#340 := [unit-resolution #311 #217]: #306
#345 := [trans #340 #344]: #51
#52 := (not #51)
#99 := [asserted]: #52
[unit-resolution #99 #345]: false
unsat
5ea02bfc9534897f0d6e70c9e3473bb7ef10a30a 73 0
#2 := false
decl f6 :: (-> Int Int S4 S5)
decl f13 :: S4
#47 := f13
#12 := 6::Int
#45 := 3::Int
#50 := (f6 3::Int 6::Int f13)
decl f8 :: (-> S2 S5 S5)
#46 := 4::Int
#48 := (f6 3::Int 4::Int f13)
decl f4 :: S2
#8 := f4
#49 := (f8 f4 #48)
#51 := (= #49 #50)
decl f3 :: (-> S2 Int Int)
#302 := (f3 f4 4::Int)
#303 := (f6 3::Int #302 f13)
#343 := (= #303 #50)
#341 := (= #50 #303)
#335 := (= 6::Int #302)
#331 := (= #302 6::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 6::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#104 := (~ #14 #14)
#102 := (~ #13 #13)
#103 := [refl]: #102
#105 := [nnf-pos #103]: #104
#72 := [asserted]: #14
#106 := [mp~ #72 #105]: #14
#336 := (not #14)
#337 := (or #336 #331)
#338 := [quant-inst #46]: #337
#332 := [unit-resolution #338 #106]: #331
#339 := [symm #332]: #335
#342 := [monotonicity #339]: #341
#344 := [symm #342]: #343
#306 := (= #49 #303)
#18 := (:var 0 S4)
#17 := (:var 1 Int)
#25 := (:var 3 S2)
#27 := (f3 #25 #17)
#16 := (:var 2 Int)
#28 := (f6 #16 #27 #18)
#203 := (pattern #28)
#19 := (f6 #16 #17 #18)
#26 := (f8 #25 #19)
#202 := (pattern #26)
#29 := (= #26 #28)
#204 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #202 #203) #29)
#30 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #29)
#207 := (iff #30 #204)
#205 := (iff #29 #29)
#206 := [refl]: #205
#208 := [quant-intro #206]: #207
#114 := (~ #30 #30)
#112 := (~ #29 #29)
#113 := [refl]: #112
#115 := [nnf-pos #113]: #114
#74 := [asserted]: #30
#116 := [mp~ #74 #115]: #30
#209 := [mp #116 #208]: #204
#309 := (not #204)
#310 := (or #309 #306)
#311 := [quant-inst #8 #45 #46 #47]: #310
#340 := [unit-resolution #311 #209]: #306
#345 := [trans #340 #344]: #51
#52 := (not #51)
#99 := [asserted]: #52
[unit-resolution #99 #345]: false
unsat
0ea4cdefb3e3290c8d99d636ae708d57bfa0c66f 211 0
#2 := false
decl f9 :: (-> S2 S5 S5)
decl f10 :: (-> S2 S5 S5)
decl f14 :: S5
#51 := f14
decl f5 :: S2
#15 := f5
#55 := (f10 f5 f14)
decl f4 :: S2
#8 := f4
#56 := (f9 f4 #55)
#108 := (= f14 #56)
decl f7 :: (-> Int Int S4 S5)
decl f11 :: (-> S5 S4)
decl f15 :: S4
#52 := f15
#12 := 4::Int
#18 := 3::Int
#53 := (f7 3::Int 4::Int f15)
#316 := (f11 #53)
decl f3 :: (-> S2 Int Int)
#269 := (f3 f5 3::Int)
#318 := (f7 #269 4::Int #316)
#350 := (f9 f4 #318)
#431 := (= #350 #56)
#424 := (= #56 #350)
#422 := (= #55 #318)
#270 := (f7 #269 4::Int f15)
#418 := (= #270 #318)
#415 := (= #318 #270)
#404 := (= #316 f15)
#317 := (= f15 #316)
#24 := (:var 0 S4)
#23 := (:var 1 Int)
#22 := (:var 2 Int)
#25 := (f7 #22 #23 #24)
#250 := (pattern #25)
#42 := (f11 #25)
#85 := (= #24 #42)
#251 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) (:pat #250) #85)
#88 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) #85)
#254 := (iff #88 #251)
#252 := (iff #85 #85)
#253 := [refl]: #252
#255 := [quant-intro #253]: #254
#156 := (~ #88 #88)
#154 := (~ #85 #85)
#155 := [refl]: #154
#157 := [nnf-pos #155]: #156
#43 := (= #42 #24)
#44 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) #43)
#89 := (iff #44 #88)
#86 := (iff #43 #85)
#87 := [rewrite]: #86
#90 := [quant-intro #87]: #89
#84 := [asserted]: #44
#93 := [mp #84 #90]: #88
#158 := [mp~ #93 #157]: #88
#256 := [mp #158 #255]: #251
#320 := (not #251)
#321 := (or #320 #317)
#322 := [quant-inst #18 #12 #52]: #321
#403 := [unit-resolution #322 #256]: #317
#408 := [symm #403]: #404
#416 := [monotonicity #408]: #415
#419 := [symm #416]: #418
#420 := (= #55 #270)
#271 := (f10 f5 #53)
#272 := (= #271 #270)
#273 := (= #270 #271)
#31 := (:var 3 S2)
#38 := (f3 #31 #22)
#39 := (f7 #38 #23 #24)
#243 := (pattern #39)
#37 := (f10 #31 #25)
#242 := (pattern #37)
#40 := (= #37 #39)
#244 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #242 #243) #40)
#41 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #40)
#247 := (iff #41 #244)
#245 := (iff #40 #40)
#246 := [refl]: #245
#248 := [quant-intro #246]: #247
#151 := (~ #41 #41)
#149 := (~ #40 #40)
#150 := [refl]: #149
#152 := [nnf-pos #150]: #151
#83 := [asserted]: #41
#153 := [mp~ #83 #152]: #41
#249 := [mp #153 #248]: #244
#276 := (not #244)
#277 := (or #276 #273)
#278 := (or #276 #272)
#280 := (iff #278 #277)
#282 := (iff #277 #277)
#283 := [rewrite]: #282
#274 := (iff #272 #273)
#275 := [rewrite]: #274
#281 := [monotonicity #275]: #280
#284 := [trans #281 #283]: #280
#279 := [quant-inst #15 #18 #12 #52]: #278
#285 := [mp #279 #284]: #277
#412 := [unit-resolution #285 #249]: #273
#417 := [symm #412]: #272
#413 := (= #55 #271)
#54 := (= f14 #53)
#115 := (not #54)
#116 := (or #115 #108)
#121 := (not #116)
#57 := (= #56 f14)
#58 := (implies #54 #57)
#59 := (not #58)
#122 := (iff #59 #121)
#119 := (iff #58 #116)
#112 := (implies #54 #108)
#117 := (iff #112 #116)
#118 := [rewrite]: #117
#113 := (iff #58 #112)
#110 := (iff #57 #108)
#111 := [rewrite]: #110
#114 := [monotonicity #111]: #113
#120 := [trans #114 #118]: #119
#123 := [monotonicity #120]: #122
#107 := [asserted]: #59
#126 := [mp #107 #123]: #121
#124 := [not-or-elim #126]: #54
#414 := [monotonicity #124]: #413
#421 := [trans #414 #417]: #420
#423 := [trans #421 #419]: #422
#425 := [monotonicity #423]: #424
#432 := [symm #425]: #431
#435 := (= f14 #350)
#343 := (f3 f4 4::Int)
#346 := (f7 #269 #343 #316)
#352 := (= #346 #350)
#33 := (f3 #31 #23)
#34 := (f7 #22 #33 #24)
#235 := (pattern #34)
#32 := (f9 #31 #25)
#234 := (pattern #32)
#35 := (= #32 #34)
#236 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #234 #235) #35)
#36 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #35)
#239 := (iff #36 #236)
#237 := (iff #35 #35)
#238 := [refl]: #237
#240 := [quant-intro #238]: #239
#146 := (~ #36 #36)
#144 := (~ #35 #35)
#145 := [refl]: #144
#147 := [nnf-pos #145]: #146
#82 := [asserted]: #36
#148 := [mp~ #82 #147]: #36
#241 := [mp #148 #240]: #236
#355 := (not #236)
#356 := (or #355 #352)
#351 := (= #350 #346)
#357 := (or #355 #351)
#359 := (iff #357 #356)
#361 := (iff #356 #356)
#362 := [rewrite]: #361
#353 := (iff #351 #352)
#354 := [rewrite]: #353
#360 := [monotonicity #354]: #359
#363 := [trans #360 #362]: #359
#358 := [quant-inst #8 #269 #12 #316]: #357
#364 := [mp #358 #363]: #356
#411 := [unit-resolution #364 #241]: #352
#433 := (= f14 #346)
#429 := (= #53 #346)
#427 := (= #346 #53)
#402 := (= #343 4::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 4::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#131 := (~ #14 #14)
#129 := (~ #13 #13)
#130 := [refl]: #129
#132 := [nnf-pos #130]: #131
#79 := [asserted]: #14
#133 := [mp~ #79 #132]: #14
#405 := (not #14)
#406 := (or #405 #402)
#407 := [quant-inst #12]: #406
#409 := [unit-resolution #407 #133]: #402
#342 := (= #269 3::Int)
#16 := (f3 f5 #9)
#17 := (pattern #16)
#19 := (= #16 3::Int)
#20 := (forall (vars (?v0 Int)) (:pat #17) #19)
#136 := (~ #20 #20)
#134 := (~ #19 #19)
#135 := [refl]: #134
#137 := [nnf-pos #135]: #136
#80 := [asserted]: #20
#138 := [mp~ #80 #137]: #20
#347 := (not #20)
#348 := (or #347 #342)
#349 := [quant-inst #18]: #348
#410 := [unit-resolution #349 #138]: #342
#428 := [monotonicity #410 #409 #408]: #427
#430 := [symm #428]: #429
#434 := [trans #124 #430]: #433
#436 := [trans #434 #411]: #435
#437 := [trans #436 #432]: #108
#125 := (not #108)
#127 := [not-or-elim #126]: #125
[unit-resolution #127 #437]: false
unsat
18733e050cdd31352b0648b5596d94a4afc48033 211 0
#2 := false
decl f10 :: (-> S2 S5 S5)
decl f9 :: (-> S2 S5 S5)
decl f14 :: S5
#51 := f14
decl f4 :: S2
#8 := f4
#55 := (f9 f4 f14)
decl f5 :: S2
#15 := f5
#56 := (f10 f5 #55)
#108 := (= f14 #56)
decl f7 :: (-> Int Int S4 S5)
decl f11 :: (-> S5 S4)
decl f15 :: S4
#52 := f15
#12 := 4::Int
#18 := 3::Int
#53 := (f7 3::Int 4::Int f15)
#316 := (f11 #53)
decl f3 :: (-> S2 Int Int)
#269 := (f3 f4 4::Int)
#318 := (f7 3::Int #269 #316)
#350 := (f10 f5 #318)
#431 := (= #350 #56)
#424 := (= #56 #350)
#422 := (= #55 #318)
#270 := (f7 3::Int #269 f15)
#418 := (= #270 #318)
#415 := (= #318 #270)
#404 := (= #316 f15)
#317 := (= f15 #316)
#24 := (:var 0 S4)
#23 := (:var 1 Int)
#22 := (:var 2 Int)
#25 := (f7 #22 #23 #24)
#250 := (pattern #25)
#42 := (f11 #25)
#85 := (= #24 #42)
#251 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) (:pat #250) #85)
#88 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) #85)
#254 := (iff #88 #251)
#252 := (iff #85 #85)
#253 := [refl]: #252
#255 := [quant-intro #253]: #254
#156 := (~ #88 #88)
#154 := (~ #85 #85)
#155 := [refl]: #154
#157 := [nnf-pos #155]: #156
#43 := (= #42 #24)
#44 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) #43)
#89 := (iff #44 #88)
#86 := (iff #43 #85)
#87 := [rewrite]: #86
#90 := [quant-intro #87]: #89
#84 := [asserted]: #44
#93 := [mp #84 #90]: #88
#158 := [mp~ #93 #157]: #88
#256 := [mp #158 #255]: #251
#320 := (not #251)
#321 := (or #320 #317)
#322 := [quant-inst #18 #12 #52]: #321
#403 := [unit-resolution #322 #256]: #317
#408 := [symm #403]: #404
#416 := [monotonicity #408]: #415
#419 := [symm #416]: #418
#420 := (= #55 #270)
#271 := (f9 f4 #53)
#272 := (= #271 #270)
#273 := (= #270 #271)
#31 := (:var 3 S2)
#33 := (f3 #31 #23)
#34 := (f7 #22 #33 #24)
#235 := (pattern #34)
#32 := (f9 #31 #25)
#234 := (pattern #32)
#35 := (= #32 #34)
#236 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #234 #235) #35)
#36 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #35)
#239 := (iff #36 #236)
#237 := (iff #35 #35)
#238 := [refl]: #237
#240 := [quant-intro #238]: #239
#146 := (~ #36 #36)
#144 := (~ #35 #35)
#145 := [refl]: #144
#147 := [nnf-pos #145]: #146
#82 := [asserted]: #36
#148 := [mp~ #82 #147]: #36
#241 := [mp #148 #240]: #236
#276 := (not #236)
#277 := (or #276 #273)
#278 := (or #276 #272)
#280 := (iff #278 #277)
#282 := (iff #277 #277)
#283 := [rewrite]: #282
#274 := (iff #272 #273)
#275 := [rewrite]: #274
#281 := [monotonicity #275]: #280
#284 := [trans #281 #283]: #280
#279 := [quant-inst #8 #18 #12 #52]: #278
#285 := [mp #279 #284]: #277
#412 := [unit-resolution #285 #241]: #273
#417 := [symm #412]: #272
#413 := (= #55 #271)
#54 := (= f14 #53)
#115 := (not #54)
#116 := (or #115 #108)
#121 := (not #116)
#57 := (= #56 f14)
#58 := (implies #54 #57)
#59 := (not #58)
#122 := (iff #59 #121)
#119 := (iff #58 #116)
#112 := (implies #54 #108)
#117 := (iff #112 #116)
#118 := [rewrite]: #117
#113 := (iff #58 #112)
#110 := (iff #57 #108)
#111 := [rewrite]: #110
#114 := [monotonicity #111]: #113
#120 := [trans #114 #118]: #119
#123 := [monotonicity #120]: #122
#107 := [asserted]: #59
#126 := [mp #107 #123]: #121
#124 := [not-or-elim #126]: #54
#414 := [monotonicity #124]: #413
#421 := [trans #414 #417]: #420
#423 := [trans #421 #419]: #422
#425 := [monotonicity #423]: #424
#432 := [symm #425]: #431
#435 := (= f14 #350)
#343 := (f3 f5 3::Int)
#346 := (f7 #343 #269 #316)
#352 := (= #346 #350)
#38 := (f3 #31 #22)
#39 := (f7 #38 #23 #24)
#243 := (pattern #39)
#37 := (f10 #31 #25)
#242 := (pattern #37)
#40 := (= #37 #39)
#244 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #242 #243) #40)
#41 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #40)
#247 := (iff #41 #244)
#245 := (iff #40 #40)
#246 := [refl]: #245
#248 := [quant-intro #246]: #247
#151 := (~ #41 #41)
#149 := (~ #40 #40)
#150 := [refl]: #149
#152 := [nnf-pos #150]: #151
#83 := [asserted]: #41
#153 := [mp~ #83 #152]: #41
#249 := [mp #153 #248]: #244
#355 := (not #244)
#356 := (or #355 #352)
#351 := (= #350 #346)
#357 := (or #355 #351)
#359 := (iff #357 #356)
#361 := (iff #356 #356)
#362 := [rewrite]: #361
#353 := (iff #351 #352)
#354 := [rewrite]: #353
#360 := [monotonicity #354]: #359
#363 := [trans #360 #362]: #359
#358 := [quant-inst #15 #18 #269 #316]: #357
#364 := [mp #358 #363]: #356
#411 := [unit-resolution #364 #249]: #352
#433 := (= f14 #346)
#429 := (= #53 #346)
#427 := (= #346 #53)
#342 := (= #269 4::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 4::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#131 := (~ #14 #14)
#129 := (~ #13 #13)
#130 := [refl]: #129
#132 := [nnf-pos #130]: #131
#79 := [asserted]: #14
#133 := [mp~ #79 #132]: #14
#347 := (not #14)
#348 := (or #347 #342)
#349 := [quant-inst #12]: #348
#409 := [unit-resolution #349 #133]: #342
#402 := (= #343 3::Int)
#16 := (f3 f5 #9)
#17 := (pattern #16)
#19 := (= #16 3::Int)
#20 := (forall (vars (?v0 Int)) (:pat #17) #19)
#136 := (~ #20 #20)
#134 := (~ #19 #19)
#135 := [refl]: #134
#137 := [nnf-pos #135]: #136
#80 := [asserted]: #20
#138 := [mp~ #80 #137]: #20
#405 := (not #20)
#406 := (or #405 #402)
#407 := [quant-inst #18]: #406
#410 := [unit-resolution #407 #138]: #402
#428 := [monotonicity #410 #409 #408]: #427
#430 := [symm #428]: #429
#434 := [trans #124 #430]: #433
#436 := [trans #434 #411]: #435
#437 := [trans #436 #432]: #108
#125 := (not #108)
#127 := [not-or-elim #126]: #125
[unit-resolution #127 #437]: false
unsat
034f1b430cea4d797df825ad65ed44ba0879f423 27 0
#2 := false
decl f18 :: (-> S4 Int)
decl f20 :: S4
#66 := f20
#69 := (f18 f20)
decl f19 :: S4
#65 := f19
#68 := (f18 f19)
#70 := (= #68 #69)
#67 := (= f19 f20)
#143 := (not #67)
#145 := (or #143 #70)
#148 := (not #145)
#71 := (implies #67 #70)
#72 := (not #71)
#149 := (iff #72 #148)
#146 := (iff #71 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#142 := [asserted]: #72
#153 := [mp #142 #150]: #148
#151 := [not-or-elim #153]: #67
#347 := [monotonicity #151]: #70
#152 := (not #70)
#154 := [not-or-elim #153]: #152
[unit-resolution #154 #347]: false
unsat
abd2ff3a1f4279c6df17226a8ab8bfa529a1ad2f 27 0
#2 := false
decl f17 :: (-> S4 Int)
decl f20 :: S4
#66 := f20
#69 := (f17 f20)
decl f19 :: S4
#65 := f19
#68 := (f17 f19)
#70 := (= #68 #69)
#67 := (= f19 f20)
#143 := (not #67)
#145 := (or #143 #70)
#148 := (not #145)
#71 := (implies #67 #70)
#72 := (not #71)
#149 := (iff #72 #148)
#146 := (iff #71 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#142 := [asserted]: #72
#153 := [mp #142 #150]: #148
#151 := [not-or-elim #153]: #67
#347 := [monotonicity #151]: #70
#152 := (not #70)
#154 := [not-or-elim #153]: #152
[unit-resolution #154 #347]: false
unsat
bcb488b65c53b04f7a912c4badcb5fcbbb811c48 71 0
#2 := false
decl f10 :: (-> S4 S1)
decl f20 :: S4
#66 := f20
#70 := (f10 f20)
decl f1 :: S1
#4 := f1
#149 := (= f1 #70)
decl f19 :: S4
#65 := f19
#68 := (f10 f19)
#145 := (= f1 #68)
#152 := (iff #145 #149)
#691 := (= #68 #70)
#67 := (= f19 f20)
#158 := (not #67)
#159 := (or #158 #152)
#164 := (not #159)
#71 := (= #70 f1)
#69 := (= #68 f1)
#72 := (iff #69 #71)
#73 := (implies #67 #72)
#74 := (not #73)
#165 := (iff #74 #164)
#162 := (iff #73 #159)
#155 := (implies #67 #152)
#160 := (iff #155 #159)
#161 := [rewrite]: #160
#156 := (iff #73 #155)
#153 := (iff #72 #152)
#150 := (iff #71 #149)
#151 := [rewrite]: #150
#147 := (iff #69 #145)
#148 := [rewrite]: #147
#154 := [monotonicity #148 #151]: #153
#157 := [monotonicity #154]: #156
#163 := [trans #157 #161]: #162
#166 := [monotonicity #163]: #165
#144 := [asserted]: #74
#169 := [mp #144 #166]: #164
#167 := [not-or-elim #169]: #67
#693 := [monotonicity #167]: #691
#348 := [monotonicity #693]: #152
#372 := (not #149)
#196 := (not #145)
#480 := (iff #196 #372)
#687 := [monotonicity #348]: #480
#375 := [hypothesis]: #196
#359 := [mp #375 #687]: #372
#370 := (or #149 #145)
#197 := (iff #149 #196)
#168 := (not #152)
#198 := (iff #168 #197)
#199 := [rewrite]: #198
#170 := [not-or-elim #169]: #168
#200 := [mp #170 #199]: #197
#368 := (not #197)
#369 := (or #149 #145 #368)
#284 := [def-axiom]: #369
#361 := [unit-resolution #284 #200]: #370
#354 := [unit-resolution #361 #375]: #149
#360 := [unit-resolution #354 #359]: false
#694 := [lemma #360]: #145
#696 := [mp #694 #348]: #149
#374 := (or #372 #196)
#373 := (or #372 #196 #368)
#301 := [def-axiom]: #373
#371 := [unit-resolution #301 #200]: #374
#695 := [unit-resolution #371 #694]: #372
[unit-resolution #695 #696]: false
unsat
692be396fb86f21c3efb4c10b7720c21916ee57c 27 0
#2 := false
decl f18 :: (-> S4 Int)
decl f20 :: S4
#67 := f20
#68 := (f18 f20)
decl f19 :: S4
#65 := f19
#66 := (f18 f19)
#69 := (= #66 #68)
#71 := (= f19 f20)
#72 := (not #71)
#145 := (or #69 #72)
#149 := (not #145)
#70 := (not #69)
#73 := (implies #70 #72)
#74 := (not #73)
#150 := (iff #74 #149)
#147 := (iff #73 #145)
#148 := [rewrite]: #147
#151 := [monotonicity #148]: #150
#144 := [asserted]: #74
#154 := [mp #144 #151]: #149
#153 := [not-or-elim #154]: #71
#347 := [monotonicity #153]: #69
#152 := [not-or-elim #154]: #70
[unit-resolution #152 #347]: false
unsat
8c59e0b3bbed886482ee7c694f7985c4332c80bd 27 0
#2 := false
decl f17 :: (-> S4 Int)
decl f20 :: S4
#67 := f20
#68 := (f17 f20)
decl f19 :: S4
#65 := f19
#66 := (f17 f19)
#69 := (= #66 #68)
#71 := (= f19 f20)
#72 := (not #71)
#145 := (or #69 #72)
#149 := (not #145)
#70 := (not #69)
#73 := (implies #70 #72)
#74 := (not #73)
#150 := (iff #74 #149)
#147 := (iff #73 #145)
#148 := [rewrite]: #147
#151 := [monotonicity #148]: #150
#144 := [asserted]: #74
#154 := [mp #144 #151]: #149
#153 := [not-or-elim #154]: #71
#347 := [monotonicity #153]: #69
#152 := [not-or-elim #154]: #70
[unit-resolution #152 #347]: false
unsat
ec34ee7bf3443acccceee16793505089997d4233 87 0
#2 := false
decl f10 :: (-> S4 S1)
decl f20 :: S4
#68 := f20
#69 := (f10 f20)
decl f1 :: S1
#4 := f1
#151 := (= f1 #69)
decl f19 :: S4
#65 := f19
#66 := (f10 f19)
#147 := (= f1 #66)
#154 := (iff #147 #151)
#707 := (= #66 #69)
#73 := (= f19 f20)
#74 := (not #73)
#180 := (or #74 #154)
#183 := (not #180)
#70 := (= #69 f1)
#67 := (= #66 f1)
#71 := (iff #67 #70)
#72 := (not #71)
#75 := (implies #72 #74)
#76 := (not #75)
#186 := (iff #76 #183)
#170 := (iff #151 #147)
#169 := (or #74 #170)
#175 := (not #169)
#184 := (iff #175 #183)
#181 := (iff #169 #180)
#178 := (iff #170 #154)
#179 := [rewrite]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#176 := (iff #76 #175)
#173 := (iff #75 #169)
#160 := (not #147)
#161 := (iff #151 #160)
#166 := (implies #161 #74)
#171 := (iff #166 #169)
#172 := [rewrite]: #171
#167 := (iff #75 #166)
#164 := (iff #72 #161)
#157 := (not #154)
#162 := (iff #157 #161)
#163 := [rewrite]: #162
#158 := (iff #72 #157)
#155 := (iff #71 #154)
#152 := (iff #70 #151)
#153 := [rewrite]: #152
#149 := (iff #67 #147)
#150 := [rewrite]: #149
#156 := [monotonicity #150 #153]: #155
#159 := [monotonicity #156]: #158
#165 := [trans #159 #163]: #164
#168 := [monotonicity #165]: #167
#174 := [trans #168 #172]: #173
#177 := [monotonicity #174]: #176
#187 := [trans #177 #185]: #186
#146 := [asserted]: #76
#190 := [mp #146 #187]: #183
#188 := [not-or-elim #190]: #73
#709 := [monotonicity #188]: #707
#364 := [monotonicity #709]: #154
#388 := (not #151)
#496 := (iff #160 #388)
#703 := [monotonicity #364]: #496
#391 := [hypothesis]: #160
#375 := [mp #391 #703]: #388
#386 := (or #151 #147)
#189 := [not-or-elim #190]: #157
#216 := [mp #189 #163]: #161
#384 := (not #161)
#385 := (or #151 #147 #384)
#300 := [def-axiom]: #385
#377 := [unit-resolution #300 #216]: #386
#370 := [unit-resolution #377 #391]: #151
#376 := [unit-resolution #370 #375]: false
#710 := [lemma #376]: #147
#712 := [mp #710 #364]: #151
#390 := (or #388 #160)
#389 := (or #388 #160 #384)
#317 := [def-axiom]: #389
#387 := [unit-resolution #317 #216]: #390
#711 := [unit-resolution #387 #710]: #388
[unit-resolution #711 #712]: false
unsat
c2545d9068e0d6accd875f4379ed4317f0c0b477 58 0
#2 := false
#65 := 3::Int
decl f18 :: (-> S4 Int)
decl f4 :: (-> Int Int S5 S4)
decl f5 :: (-> S1 S3 S5)
decl f20 :: S3
#68 := f20
decl f19 :: S1
#67 := f19
#69 := (f5 f19 f20)
#66 := 4::Int
#70 := (f4 3::Int 4::Int #69)
#71 := (f18 #70)
#72 := (= #71 3::Int)
#73 := (not #72)
#143 := [asserted]: #73
#38 := (:var 0 S5)
#37 := (:var 1 Int)
#10 := (:var 2 Int)
#39 := (f4 #10 #37 #38)
#316 := (pattern #39)
#62 := (f18 #39)
#136 := (= #10 #62)
#329 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) (:pat #316) #136)
#140 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) #136)
#332 := (iff #140 #329)
#330 := (iff #136 #136)
#331 := [refl]: #330
#333 := [quant-intro #331]: #332
#203 := (~ #140 #140)
#201 := (~ #136 #136)
#202 := [refl]: #201
#204 := [nnf-pos #202]: #203
#63 := (= #62 #10)
#64 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) #63)
#141 := (iff #64 #140)
#138 := (iff #63 #136)
#139 := [rewrite]: #138
#142 := [quant-intro #139]: #141
#135 := [asserted]: #64
#145 := [mp #135 #142]: #140
#205 := [mp~ #145 #204]: #140
#334 := [mp #205 #333]: #329
#335 := (not #329)
#336 := (or #335 #72)
#144 := (= 3::Int #71)
#337 := (or #335 #144)
#339 := (iff #337 #336)
#341 := (iff #336 #336)
#342 := [rewrite]: #341
#151 := (iff #144 #72)
#152 := [rewrite]: #151
#340 := [monotonicity #152]: #339
#343 := [trans #340 #342]: #339
#338 := [quant-inst #65 #66 #69]: #337
#344 := [mp #338 #343]: #336
[unit-resolution #344 #334 #143]: false
unsat
e3bb9ab1eb53aa14b85baa6b04545cdb6811e412 58 0
#2 := false
#66 := 4::Int
decl f17 :: (-> S4 Int)
decl f4 :: (-> Int Int S5 S4)
decl f5 :: (-> S1 S3 S5)
decl f20 :: S3
#68 := f20
decl f19 :: S1
#67 := f19
#69 := (f5 f19 f20)
#65 := 3::Int
#70 := (f4 3::Int 4::Int #69)
#71 := (f17 #70)
#72 := (= #71 4::Int)
#73 := (not #72)
#143 := [asserted]: #73
#38 := (:var 0 S5)
#37 := (:var 1 Int)
#10 := (:var 2 Int)
#39 := (f4 #10 #37 #38)
#316 := (pattern #39)
#59 := (f17 #39)
#128 := (= #37 #59)
#323 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) (:pat #316) #128)
#132 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) #128)
#326 := (iff #132 #323)
#324 := (iff #128 #128)
#325 := [refl]: #324
#327 := [quant-intro #325]: #326
#198 := (~ #132 #132)
#196 := (~ #128 #128)
#197 := [refl]: #196
#199 := [nnf-pos #197]: #198
#60 := (= #59 #37)
#61 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) #60)
#133 := (iff #61 #132)
#130 := (iff #60 #128)
#131 := [rewrite]: #130
#134 := [quant-intro #131]: #133
#127 := [asserted]: #61
#137 := [mp #127 #134]: #132
#200 := [mp~ #137 #199]: #132
#328 := [mp #200 #327]: #323
#350 := (not #323)
#351 := (or #350 #72)
#144 := (= 4::Int #71)
#352 := (or #350 #144)
#354 := (iff #352 #351)
#356 := (iff #351 #351)
#357 := [rewrite]: #356
#151 := (iff #144 #72)
#152 := [rewrite]: #151
#355 := [monotonicity #152]: #354
#358 := [trans #355 #357]: #354
#353 := [quant-inst #65 #66 #69]: #352
#359 := [mp #353 #358]: #351
[unit-resolution #359 #328 #143]: false
unsat
6296fe8461e452d749fb761ed56ebcfb1fc552d0 105 0
#2 := false
decl f10 :: (-> S4 S1)
decl f4 :: (-> Int Int S5 S4)
decl f5 :: (-> S1 S3 S5)
decl f20 :: S3
#68 := f20
decl f19 :: S1
#67 := f19
#69 := (f5 f19 f20)
#66 := 4::Int
#65 := 3::Int
#70 := (f4 3::Int 4::Int #69)
#71 := (f10 #70)
decl f1 :: S1
#4 := f1
#146 := (= f1 #71)
#159 := (not #146)
#404 := [hypothesis]: #159
#150 := (= f1 f19)
#349 := (or #150 #146)
#160 := (iff #150 #159)
#73 := (= f19 f1)
#72 := (= #71 f1)
#74 := (iff #72 #73)
#75 := (not #74)
#163 := (iff #75 #160)
#153 := (iff #146 #150)
#156 := (not #153)
#161 := (iff #156 #160)
#162 := [rewrite]: #161
#157 := (iff #75 #156)
#154 := (iff #74 #153)
#151 := (iff #73 #150)
#152 := [rewrite]: #151
#148 := (iff #72 #146)
#149 := [rewrite]: #148
#155 := [monotonicity #149 #152]: #154
#158 := [monotonicity #155]: #157
#164 := [trans #158 #162]: #163
#145 := [asserted]: #75
#167 := [mp #145 #164]: #160
#346 := (not #160)
#347 := (or #150 #146 #346)
#348 := [def-axiom]: #347
#350 := [unit-resolution #348 #167]: #349
#405 := [unit-resolution #350 #404]: #150
#351 := (not #150)
#410 := (or #146 #351)
#12 := (:var 0 S3)
#11 := (:var 1 S1)
#13 := (f5 #11 #12)
#10 := (:var 2 Int)
#9 := (:var 3 Int)
#14 := (f4 #9 #10 #13)
#290 := (pattern #14)
#109 := (= f1 #11)
#31 := (f10 #14)
#105 := (= f1 #31)
#112 := (iff #105 #109)
#297 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S3)) (:pat #290) #112)
#115 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S3)) #112)
#300 := (iff #115 #297)
#298 := (iff #112 #112)
#299 := [refl]: #298
#301 := [quant-intro #299]: #300
#184 := (~ #115 #115)
#182 := (~ #112 #112)
#183 := [refl]: #182
#185 := [nnf-pos #183]: #184
#33 := (= #11 f1)
#32 := (= #31 f1)
#34 := (iff #32 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S3)) #34)
#116 := (iff #35 #115)
#113 := (iff #34 #112)
#110 := (iff #33 #109)
#111 := [rewrite]: #110
#107 := (iff #32 #105)
#108 := [rewrite]: #107
#114 := [monotonicity #108 #111]: #113
#117 := [quant-intro #114]: #116
#104 := [asserted]: #35
#120 := [mp #104 #117]: #115
#186 := [mp~ #120 #185]: #115
#302 := [mp #186 #301]: #297
#393 := (not #297)
#394 := (or #393 #153)
#395 := [quant-inst #65 #66 #67 #68]: #394
#409 := [unit-resolution #395 #302]: #153
#396 := (or #156 #146 #351)
#397 := [def-axiom]: #396
#411 := [unit-resolution #397 #409]: #410
#412 := [unit-resolution #411 #405 #404]: false
#413 := [lemma #412]: #146
#354 := (or #351 #159)
#352 := (or #351 #159 #346)
#353 := [def-axiom]: #352
#355 := [unit-resolution #353 #167]: #354
#414 := [unit-resolution #355 #413]: #351
#415 := (or #159 #150)
#398 := (or #156 #159 #150)
#399 := [def-axiom]: #398
#416 := [unit-resolution #399 #409]: #415
[unit-resolution #416 #414 #413]: false
unsat
da58db0437f12c2e8d1330c20990ed8cbae3b7f4 113 0
#2 := false
#66 := 4::Int
#65 := 3::Int
#404 := (= 3::Int 4::Int)
#406 := (iff #404 false)
#407 := [rewrite]: #406
decl f17 :: (-> S4 Int)
decl f4 :: (-> Int Int S5 S4)
decl f5 :: (-> S1 S3 S5)
decl f20 :: S3
#68 := f20
decl f19 :: S1
#67 := f19
#69 := (f5 f19 f20)
#70 := (f4 3::Int 4::Int #69)
#72 := (f17 #70)
#347 := (= #72 4::Int)
#38 := (:var 0 S5)
#37 := (:var 1 Int)
#10 := (:var 2 Int)
#39 := (f4 #10 #37 #38)
#311 := (pattern #39)
#59 := (f17 #39)
#130 := (= #37 #59)
#318 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) (:pat #311) #130)
#134 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) #130)
#321 := (iff #134 #318)
#319 := (iff #130 #130)
#320 := [refl]: #319
#322 := [quant-intro #320]: #321
#193 := (~ #134 #134)
#191 := (~ #130 #130)
#192 := [refl]: #191
#194 := [nnf-pos #192]: #193
#60 := (= #59 #37)
#61 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) #60)
#135 := (iff #61 #134)
#132 := (iff #60 #130)
#133 := [rewrite]: #132
#136 := [quant-intro #133]: #135
#129 := [asserted]: #61
#139 := [mp #129 #136]: #134
#195 := [mp~ #139 #194]: #134
#323 := [mp #195 #322]: #318
#348 := (not #318)
#349 := (or #348 #347)
#344 := (= 4::Int #72)
#350 := (or #348 #344)
#352 := (iff #350 #349)
#354 := (iff #349 #349)
#355 := [rewrite]: #354
#345 := (iff #344 #347)
#346 := [rewrite]: #345
#353 := [monotonicity #346]: #352
#356 := [trans #353 #355]: #352
#351 := [quant-inst #65 #66 #69]: #350
#357 := [mp #351 #356]: #349
#393 := [unit-resolution #357 #323]: #347
#402 := (= 3::Int #72)
#400 := (= #72 3::Int)
decl f18 :: (-> S4 Int)
#71 := (f18 #70)
#333 := (= #71 3::Int)
#62 := (f18 #39)
#138 := (= #10 #62)
#324 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) (:pat #311) #138)
#142 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) #138)
#327 := (iff #142 #324)
#325 := (iff #138 #138)
#326 := [refl]: #325
#328 := [quant-intro #326]: #327
#198 := (~ #142 #142)
#196 := (~ #138 #138)
#197 := [refl]: #196
#199 := [nnf-pos #197]: #198
#63 := (= #62 #10)
#64 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S5)) #63)
#143 := (iff #64 #142)
#140 := (iff #63 #138)
#141 := [rewrite]: #140
#144 := [quant-intro #141]: #143
#137 := [asserted]: #64
#147 := [mp #137 #144]: #142
#200 := [mp~ #147 #199]: #142
#329 := [mp #200 #328]: #324
#334 := (not #324)
#335 := (or #334 #333)
#330 := (= 3::Int #71)
#336 := (or #334 #330)
#338 := (iff #336 #335)
#340 := (iff #335 #335)
#341 := [rewrite]: #340
#331 := (iff #330 #333)
#332 := [rewrite]: #331
#339 := [monotonicity #332]: #338
#342 := [trans #339 #341]: #338
#337 := [quant-inst #65 #66 #69]: #336
#343 := [mp #337 #342]: #335
#394 := [unit-resolution #343 #329]: #333
#398 := (= #72 #71)
#73 := (= #71 #72)
#74 := (not #73)
#75 := (not #74)
#146 := (iff #75 #73)
#148 := [rewrite]: #146
#145 := [asserted]: #75
#151 := [mp #145 #148]: #73
#399 := [symm #151]: #398
#401 := [trans #399 #394]: #400
#403 := [symm #401]: #402
#405 := [trans #403 #393]: #404
[mp #405 #407]: false
unsat
b782d188626a2e0381f5b576a0374250a8df82c5 77 0
#2 := false
decl f6 :: (-> Int Int S6 S5)
decl f7 :: (-> S1 S4 S6)
decl f21 :: S4
#75 := f21
decl f20 :: S1
#74 := f20
#76 := (f7 f20 f21)
#73 := 4::Int
#12 := 5::Int
#79 := (f6 5::Int 4::Int #76)
decl f16 :: (-> S2 S5 S5)
#72 := 3::Int
#77 := (f6 3::Int 4::Int #76)
decl f4 :: S2
#8 := f4
#78 := (f16 f4 #77)
#80 := (= #78 #79)
decl f3 :: (-> S2 Int Int)
#466 := (f3 f4 3::Int)
#467 := (f6 #466 4::Int #76)
#538 := (= #467 #79)
#536 := (= #79 #467)
#530 := (= 5::Int #466)
#526 := (= #466 5::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 5::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#157 := (~ #14 #14)
#155 := (~ #13 #13)
#156 := [refl]: #155
#158 := [nnf-pos #156]: #157
#101 := [asserted]: #14
#159 := [mp~ #101 #158]: #14
#531 := (not #14)
#532 := (or #531 #526)
#533 := [quant-inst #72]: #532
#527 := [unit-resolution #533 #159]: #526
#534 := [symm #527]: #530
#537 := [monotonicity #534]: #536
#539 := [symm #537]: #538
#470 := (= #78 #467)
#45 := (:var 0 S6)
#44 := (:var 1 Int)
#17 := (:var 2 Int)
#52 := (:var 3 S2)
#59 := (f3 #52 #17)
#60 := (f6 #59 #44 #45)
#313 := (pattern #60)
#46 := (f6 #17 #44 #45)
#58 := (f16 #52 #46)
#312 := (pattern #58)
#61 := (= #58 #60)
#314 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S6)) (:pat #312 #313) #61)
#62 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S6)) #61)
#317 := (iff #62 #314)
#315 := (iff #61 #61)
#316 := [refl]: #315
#318 := [quant-intro #316]: #317
#192 := (~ #62 #62)
#190 := (~ #61 #61)
#191 := [refl]: #190
#193 := [nnf-pos #191]: #192
#128 := [asserted]: #62
#194 := [mp~ #128 #193]: #62
#319 := [mp #194 #318]: #314
#473 := (not #314)
#474 := (or #473 #470)
#475 := [quant-inst #8 #72 #73 #76]: #474
#535 := [unit-resolution #475 #319]: #470
#540 := [trans #535 #539]: #80
#81 := (not #80)
#152 := [asserted]: #81
[unit-resolution #152 #540]: false
unsat
a4d93eb089616c7c0d14a8c862a8b98919dd97bb 77 0
#2 := false
decl f6 :: (-> Int Int S6 S5)
decl f7 :: (-> S1 S4 S6)
decl f21 :: S4
#75 := f21
decl f20 :: S1
#74 := f20
#76 := (f7 f20 f21)
#12 := 6::Int
#72 := 3::Int
#79 := (f6 3::Int 6::Int #76)
decl f15 :: (-> S2 S5 S5)
#73 := 4::Int
#77 := (f6 3::Int 4::Int #76)
decl f4 :: S2
#8 := f4
#78 := (f15 f4 #77)
#80 := (= #78 #79)
decl f3 :: (-> S2 Int Int)
#466 := (f3 f4 4::Int)
#467 := (f6 3::Int #466 #76)
#538 := (= #467 #79)
#536 := (= #79 #467)
#530 := (= 6::Int #466)
#526 := (= #466 6::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 6::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#157 := (~ #14 #14)
#155 := (~ #13 #13)
#156 := [refl]: #155
#158 := [nnf-pos #156]: #157
#101 := [asserted]: #14
#159 := [mp~ #101 #158]: #14
#531 := (not #14)
#532 := (or #531 #526)
#533 := [quant-inst #73]: #532
#527 := [unit-resolution #533 #159]: #526
#534 := [symm #527]: #530
#537 := [monotonicity #534]: #536
#539 := [symm #537]: #538
#470 := (= #78 #467)
#45 := (:var 0 S6)
#44 := (:var 1 Int)
#52 := (:var 3 S2)
#54 := (f3 #52 #44)
#17 := (:var 2 Int)
#55 := (f6 #17 #54 #45)
#305 := (pattern #55)
#46 := (f6 #17 #44 #45)
#53 := (f15 #52 #46)
#304 := (pattern #53)
#56 := (= #53 #55)
#306 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S6)) (:pat #304 #305) #56)
#57 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S6)) #56)
#309 := (iff #57 #306)
#307 := (iff #56 #56)
#308 := [refl]: #307
#310 := [quant-intro #308]: #309
#187 := (~ #57 #57)
#185 := (~ #56 #56)
#186 := [refl]: #185
#188 := [nnf-pos #186]: #187
#126 := [asserted]: #57
#189 := [mp~ #126 #188]: #57
#311 := [mp #189 #310]: #306
#473 := (not #306)
#474 := (or #473 #470)
#475 := [quant-inst #8 #72 #73 #76]: #474
#535 := [unit-resolution #475 #311]: #470
#540 := [trans #535 #539]: #80
#81 := (not #80)
#152 := [asserted]: #81
[unit-resolution #152 #540]: false
unsat
9b928998cfefb8ac92745f24b207e3b96bdec398 409 0
#2 := false
decl f12 :: (-> S3 S6 S6)
decl f17 :: (-> S2 S6 S6)
decl f18 :: (-> S2 S6 S6)
decl f22 :: S6
#85 := f22
decl f5 :: S2
#15 := f5
#90 := (f18 f5 f22)
decl f4 :: S2
#8 := f4
#91 := (f17 f4 #90)
decl f7 :: S3
#21 := f7
#92 := (f12 f7 #91)
#183 := (= f22 #92)
decl f9 :: (-> Int Int S7 S6)
decl f10 :: (-> S1 S5 S7)
decl f13 :: (-> S6 S5)
decl f23 :: S5
#86 := f23
decl f1 :: S1
#4 := f1
#87 := (f10 f1 f23)
#12 := 4::Int
#18 := 3::Int
#88 := (f9 3::Int 4::Int #87)
#473 := (f13 #88)
decl f14 :: (-> S6 S1)
#448 := (f14 #88)
#499 := (f10 #448 #473)
decl f3 :: (-> S2 Int Int)
#532 := (f3 f4 4::Int)
#591 := (f9 3::Int #532 #499)
#628 := (f12 f7 #591)
#793 := (= #628 #92)
#786 := (= #92 #628)
#784 := (= #91 #591)
decl f19 :: (-> S6 S7)
#445 := (f19 #88)
#398 := (f3 f5 3::Int)
#535 := (f9 #398 #532 #445)
#780 := (= #535 #591)
#778 := (= #591 #535)
#755 := (= #499 #445)
#446 := (= #87 #445)
#58 := (:var 0 S7)
#57 := (:var 1 Int)
#30 := (:var 2 Int)
#59 := (f9 #30 #57 #58)
#379 := (pattern #59)
#76 := (f19 #59)
#160 := (= #58 #76)
#380 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S7)) (:pat #379) #160)
#163 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S7)) #160)
#383 := (iff #163 #380)
#381 := (iff #160 #160)
#382 := [refl]: #381
#384 := [quant-intro #382]: #383
#256 := (~ #163 #163)
#254 := (~ #160 #160)
#255 := [refl]: #254
#257 := [nnf-pos #255]: #256
#77 := (= #76 #58)
#78 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S7)) #77)
#164 := (iff #78 #163)
#161 := (iff #77 #160)
#162 := [rewrite]: #161
#165 := [quant-intro #162]: #164
#159 := [asserted]: #78
#168 := [mp #159 #165]: #163
#258 := [mp~ #168 #257]: #163
#385 := [mp #258 #384]: #380
#449 := (not #380)
#450 := (or #449 #446)
#451 := [quant-inst #18 #12 #87]: #450
#749 := [unit-resolution #451 #385]: #446
#753 := (= #499 #87)
#737 := (= #473 f23)
#474 := (= f23 #473)
#32 := (:var 0 S5)
#31 := (:var 1 S1)
#33 := (f10 #31 #32)
#29 := (:var 3 Int)
#34 := (f9 #29 #30 #33)
#342 := (pattern #34)
#48 := (f13 #34)
#135 := (= #32 #48)
#343 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) (:pat #342) #135)
#138 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) #135)
#346 := (iff #138 #343)
#344 := (iff #135 #135)
#345 := [refl]: #344
#347 := [quant-intro #345]: #346
#231 := (~ #138 #138)
#229 := (~ #135 #135)
#230 := [refl]: #229
#232 := [nnf-pos #230]: #231
#49 := (= #48 #32)
#50 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) #49)
#139 := (iff #50 #138)
#136 := (iff #49 #135)
#137 := [rewrite]: #136
#140 := [quant-intro #137]: #139
#134 := [asserted]: #50
#143 := [mp #134 #140]: #138
#233 := [mp~ #143 #232]: #138
#348 := [mp #233 #347]: #343
#477 := (not #343)
#478 := (or #477 #474)
#479 := [quant-inst #18 #12 #4 #86]: #478
#736 := [unit-resolution #479 #348]: #474
#741 := [symm #736]: #737
#751 := (= #448 f1)
#452 := (= f1 #448)
#146 := (= f1 #31)
#51 := (f14 #34)
#142 := (= f1 #51)
#149 := (iff #142 #146)
#349 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) (:pat #342) #149)
#152 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) #149)
#352 := (iff #152 #349)
#350 := (iff #149 #149)
#351 := [refl]: #350
#353 := [quant-intro #351]: #352
#236 := (~ #152 #152)
#234 := (~ #149 #149)
#235 := [refl]: #234
#237 := [nnf-pos #235]: #236
#53 := (= #31 f1)
#52 := (= #51 f1)
#54 := (iff #52 #53)
#55 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) #54)
#153 := (iff #55 #152)
#150 := (iff #54 #149)
#147 := (iff #53 #146)
#148 := [rewrite]: #147
#144 := (iff #52 #142)
#145 := [rewrite]: #144
#151 := [monotonicity #145 #148]: #150
#154 := [quant-intro #151]: #153
#141 := [asserted]: #55
#157 := [mp #141 #154]: #152
#238 := [mp~ #157 #237]: #152
#354 := [mp #238 #353]: #349
#463 := (not #349)
#464 := (or #463 #452)
#447 := (= f1 f1)
#453 := (iff #452 #447)
#465 := (or #463 #453)
#467 := (iff #465 #464)
#469 := (iff #464 #464)
#470 := [rewrite]: #469
#461 := (iff #453 #452)
#1 := true
#456 := (iff #452 true)
#459 := (iff #456 #452)
#460 := [rewrite]: #459
#457 := (iff #453 #456)
#454 := (iff #447 true)
#455 := [rewrite]: #454
#458 := [monotonicity #455]: #457
#462 := [trans #458 #460]: #461
#468 := [monotonicity #462]: #467
#471 := [trans #468 #470]: #467
#466 := [quant-inst #18 #12 #4 #86]: #465
#472 := [mp #466 #471]: #464
#750 := [unit-resolution #472 #354]: #452
#752 := [symm #750]: #751
#754 := [monotonicity #752 #741]: #753
#756 := [trans #754 #749]: #755
#758 := (= 3::Int #398)
#531 := (= #398 3::Int)
#9 := (:var 0 Int)
#16 := (f3 f5 #9)
#17 := (pattern #16)
#19 := (= #16 3::Int)
#20 := (forall (vars (?v0 Int)) (:pat #17) #19)
#211 := (~ #20 #20)
#209 := (~ #19 #19)
#210 := [refl]: #209
#212 := [nnf-pos #210]: #211
#116 := [asserted]: #20
#213 := [mp~ #116 #212]: #20
#536 := (not #20)
#537 := (or #536 #531)
#538 := [quant-inst #18]: #537
#757 := [unit-resolution #538 #213]: #531
#759 := [symm #757]: #758
#779 := [monotonicity #759 #756]: #778
#781 := [symm #779]: #780
#782 := (= #91 #535)
#475 := (f9 #398 4::Int #445)
#539 := (f17 f4 #475)
#540 := (= #539 #535)
#541 := (= #535 #539)
#65 := (:var 3 S2)
#67 := (f3 #65 #57)
#68 := (f9 #30 #67 #58)
#364 := (pattern #68)
#66 := (f17 #65 #59)
#363 := (pattern #66)
#69 := (= #66 #68)
#365 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) (:pat #363 #364) #69)
#70 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) #69)
#368 := (iff #70 #365)
#366 := (iff #69 #69)
#367 := [refl]: #366
#369 := [quant-intro #367]: #368
#246 := (~ #70 #70)
#244 := (~ #69 #69)
#245 := [refl]: #244
#247 := [nnf-pos #245]: #246
#156 := [asserted]: #70
#248 := [mp~ #156 #247]: #70
#370 := [mp #248 #369]: #365
#544 := (not #365)
#545 := (or #544 #541)
#546 := (or #544 #540)
#548 := (iff #546 #545)
#550 := (iff #545 #545)
#551 := [rewrite]: #550
#542 := (iff #540 #541)
#543 := [rewrite]: #542
#549 := [monotonicity #543]: #548
#552 := [trans #549 #551]: #548
#547 := [quant-inst #8 #398 #12 #445]: #546
#553 := [mp #547 #552]: #545
#760 := [unit-resolution #553 #370]: #541
#777 := [symm #760]: #540
#775 := (= #91 #539)
#773 := (= #90 #475)
#399 := (f9 #398 4::Int #87)
#769 := (= #399 #475)
#766 := (= #475 #399)
#762 := (= #445 #87)
#763 := [symm #749]: #762
#767 := [monotonicity #763]: #766
#770 := [symm #767]: #769
#771 := (= #90 #399)
#400 := (f18 f5 #88)
#401 := (= #400 #399)
#402 := (= #399 #400)
#72 := (f3 #65 #30)
#73 := (f9 #72 #57 #58)
#372 := (pattern #73)
#71 := (f18 #65 #59)
#371 := (pattern #71)
#74 := (= #71 #73)
#373 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) (:pat #371 #372) #74)
#75 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) #74)
#376 := (iff #75 #373)
#374 := (iff #74 #74)
#375 := [refl]: #374
#377 := [quant-intro #375]: #376
#251 := (~ #75 #75)
#249 := (~ #74 #74)
#250 := [refl]: #249
#252 := [nnf-pos #250]: #251
#158 := [asserted]: #75
#253 := [mp~ #158 #252]: #75
#378 := [mp #253 #377]: #373
#405 := (not #373)
#406 := (or #405 #402)
#407 := (or #405 #401)
#409 := (iff #407 #406)
#411 := (iff #406 #406)
#412 := [rewrite]: #411
#403 := (iff #401 #402)
#404 := [rewrite]: #403
#410 := [monotonicity #404]: #409
#413 := [trans #410 #412]: #409
#408 := [quant-inst #15 #18 #12 #87]: #407
#414 := [mp #408 #413]: #406
#761 := [unit-resolution #414 #378]: #402
#768 := [symm #761]: #401
#764 := (= #90 #400)
#89 := (= f22 #88)
#190 := (not #89)
#191 := (or #190 #183)
#196 := (not #191)
#93 := (= #92 f22)
#94 := (implies #89 #93)
#95 := (not #94)
#197 := (iff #95 #196)
#194 := (iff #94 #191)
#187 := (implies #89 #183)
#192 := (iff #187 #191)
#193 := [rewrite]: #192
#188 := (iff #94 #187)
#185 := (iff #93 #183)
#186 := [rewrite]: #185
#189 := [monotonicity #186]: #188
#195 := [trans #189 #193]: #194
#198 := [monotonicity #195]: #197
#182 := [asserted]: #95
#201 := [mp #182 #198]: #196
#199 := [not-or-elim #201]: #89
#765 := [monotonicity #199]: #764
#772 := [trans #765 #768]: #771
#774 := [trans #772 #770]: #773
#776 := [monotonicity #774]: #775
#783 := [trans #776 #777]: #782
#785 := [trans #783 #781]: #784
#787 := [monotonicity #785]: #786
#794 := [symm #787]: #793
#797 := (= f22 #628)
decl f6 :: (-> S3 S1 S1)
#620 := (f6 f7 #448)
#623 := (f10 #620 #473)
#627 := (f9 3::Int #532 #623)
#630 := (= #627 #628)
#41 := (:var 4 S3)
#43 := (f6 #41 #31)
#44 := (f10 #43 #32)
#45 := (f9 #29 #30 #44)
#335 := (pattern #45)
#42 := (f12 #41 #34)
#334 := (pattern #42)
#46 := (= #42 #45)
#336 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S5)) (:pat #334 #335) #46)
#47 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S5)) #46)
#339 := (iff #47 #336)
#337 := (iff #46 #46)
#338 := [refl]: #337
#340 := [quant-intro #338]: #339
#226 := (~ #47 #47)
#224 := (~ #46 #46)
#225 := [refl]: #224
#227 := [nnf-pos #225]: #226
#132 := [asserted]: #47
#228 := [mp~ #132 #227]: #47
#341 := [mp #228 #340]: #336
#633 := (not #336)
#634 := (or #633 #630)
#629 := (= #628 #627)
#635 := (or #633 #629)
#637 := (iff #635 #634)
#639 := (iff #634 #634)
#640 := [rewrite]: #639
#631 := (iff #629 #630)
#632 := [rewrite]: #631
#638 := [monotonicity #632]: #637
#641 := [trans #638 #640]: #637
#636 := [quant-inst #21 #18 #532 #448 #473]: #635
#642 := [mp #636 #641]: #634
#748 := [unit-resolution #642 #341]: #630
#795 := (= f22 #627)
#791 := (= #88 #627)
#789 := (= #627 #88)
#745 := (= #623 #87)
#743 := (= #620 f1)
#691 := (= f1 #620)
#22 := (:var 0 S1)
#23 := (f6 f7 #22)
#24 := (pattern #23)
#118 := (= f1 #23)
#128 := (forall (vars (?v0 S1)) (:pat #24) #118)
#216 := (~ #128 #128)
#214 := (~ #118 #118)
#215 := [refl]: #214
#217 := [nnf-pos #215]: #216
#25 := (= #23 f1)
#26 := (iff #25 true)
#27 := (forall (vars (?v0 S1)) (:pat #24) #26)
#129 := (iff #27 #128)
#126 := (iff #26 #118)
#121 := (iff #118 true)
#124 := (iff #121 #118)
#125 := [rewrite]: #124
#122 := (iff #26 #121)
#119 := (iff #25 #118)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#130 := [quant-intro #127]: #129
#117 := [asserted]: #27
#133 := [mp #117 #130]: #128
#218 := [mp~ #133 #217]: #128
#738 := (not #128)
#739 := (or #738 #691)
#740 := [quant-inst #448]: #739
#742 := [unit-resolution #740 #218]: #691
#744 := [symm #742]: #743
#746 := [monotonicity #744 #741]: #745
#619 := (= #532 4::Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 4::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#206 := (~ #14 #14)
#204 := (~ #13 #13)
#205 := [refl]: #204
#207 := [nnf-pos #205]: #206
#115 := [asserted]: #14
#208 := [mp~ #115 #207]: #14
#624 := (not #14)
#625 := (or #624 #619)
#626 := [quant-inst #12]: #625
#747 := [unit-resolution #626 #208]: #619
#790 := [monotonicity #747 #746]: #789
#792 := [symm #790]: #791
#796 := [trans #199 #792]: #795
#798 := [trans #796 #748]: #797
#799 := [trans #798 #794]: #183
#200 := (not #183)
#202 := [not-or-elim #201]: #200
[unit-resolution #202 #799]: false
unsat
4e5bdb146605ddee0e865e055a144749744ef3dd 381 0
#2 := false
decl f18 :: (-> S2 S6 S6)
decl f12 :: (-> S3 S6 S6)
decl f17 :: (-> S2 S6 S6)
decl f22 :: S6
#85 := f22
decl f4 :: S2
#8 := f4
#90 := (f17 f4 f22)
decl f7 :: S3
#21 := f7
#91 := (f12 f7 #90)
decl f5 :: S2
#15 := f5
#92 := (f18 f5 #91)
#183 := (= f22 #92)
decl f9 :: (-> Int Int S7 S6)
decl f10 :: (-> S1 S5 S7)
decl f13 :: (-> S6 S5)
decl f23 :: S5
#86 := f23
decl f1 :: S1
#4 := f1
#87 := (f10 f1 f23)
#12 := 4::Int
#18 := 3::Int
#88 := (f9 3::Int 4::Int #87)
#473 := (f13 #88)
decl f6 :: (-> S3 S1 S1)
decl f14 :: (-> S6 S1)
#448 := (f14 #88)
#532 := (f6 f7 #448)
#535 := (f10 #532 #473)
#555 := (f9 3::Int 4::Int #535)
#638 := (f18 f5 #555)
#794 := (= #638 #92)
#787 := (= #92 #638)
#785 := (= #91 #555)
decl f3 :: (-> S2 Int Int)
#398 := (f3 f4 4::Int)
#539 := (f9 3::Int #398 #535)
#781 := (= #539 #555)
#779 := (= #555 #539)
#750 := (= 4::Int #398)
#531 := (= #398 4::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 4::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#206 := (~ #14 #14)
#204 := (~ #13 #13)
#205 := [refl]: #204
#207 := [nnf-pos #205]: #206
#115 := [asserted]: #14
#208 := [mp~ #115 #207]: #14
#536 := (not #14)
#537 := (or #536 #531)
#538 := [quant-inst #12]: #537
#749 := [unit-resolution #538 #208]: #531
#751 := [symm #749]: #750
#780 := [monotonicity #751]: #779
#782 := [symm #780]: #781
#783 := (= #91 #539)
#499 := (f10 #448 #473)
#500 := (f9 3::Int #398 #499)
#540 := (f12 f7 #500)
#541 := (= #540 #539)
#542 := (= #539 #540)
#32 := (:var 0 S5)
#31 := (:var 1 S1)
#41 := (:var 4 S3)
#43 := (f6 #41 #31)
#44 := (f10 #43 #32)
#30 := (:var 2 Int)
#29 := (:var 3 Int)
#45 := (f9 #29 #30 #44)
#335 := (pattern #45)
#33 := (f10 #31 #32)
#34 := (f9 #29 #30 #33)
#42 := (f12 #41 #34)
#334 := (pattern #42)
#46 := (= #42 #45)
#336 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S5)) (:pat #334 #335) #46)
#47 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S5)) #46)
#339 := (iff #47 #336)
#337 := (iff #46 #46)
#338 := [refl]: #337
#340 := [quant-intro #338]: #339
#226 := (~ #47 #47)
#224 := (~ #46 #46)
#225 := [refl]: #224
#227 := [nnf-pos #225]: #226
#132 := [asserted]: #47
#228 := [mp~ #132 #227]: #47
#341 := [mp #228 #340]: #336
#545 := (not #336)
#546 := (or #545 #542)
#547 := (or #545 #541)
#549 := (iff #547 #546)
#551 := (iff #546 #546)
#552 := [rewrite]: #551
#543 := (iff #541 #542)
#544 := [rewrite]: #543
#550 := [monotonicity #544]: #549
#553 := [trans #550 #552]: #549
#548 := [quant-inst #21 #18 #398 #448 #473]: #547
#554 := [mp #548 #553]: #546
#752 := [unit-resolution #554 #341]: #542
#778 := [symm #752]: #541
#776 := (= #91 #540)
#774 := (= #90 #500)
#768 := (= #88 #500)
#761 := (= #500 #88)
#757 := (= #499 #87)
#737 := (= #473 f23)
#474 := (= f23 #473)
#342 := (pattern #34)
#48 := (f13 #34)
#135 := (= #32 #48)
#343 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) (:pat #342) #135)
#138 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) #135)
#346 := (iff #138 #343)
#344 := (iff #135 #135)
#345 := [refl]: #344
#347 := [quant-intro #345]: #346
#231 := (~ #138 #138)
#229 := (~ #135 #135)
#230 := [refl]: #229
#232 := [nnf-pos #230]: #231
#49 := (= #48 #32)
#50 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) #49)
#139 := (iff #50 #138)
#136 := (iff #49 #135)
#137 := [rewrite]: #136
#140 := [quant-intro #137]: #139
#134 := [asserted]: #50
#143 := [mp #134 #140]: #138
#233 := [mp~ #143 #232]: #138
#348 := [mp #233 #347]: #343
#477 := (not #343)
#478 := (or #477 #474)
#479 := [quant-inst #18 #12 #4 #86]: #478
#736 := [unit-resolution #479 #348]: #474
#741 := [symm #736]: #737
#755 := (= #448 f1)
#452 := (= f1 #448)
#146 := (= f1 #31)
#51 := (f14 #34)
#142 := (= f1 #51)
#149 := (iff #142 #146)
#349 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) (:pat #342) #149)
#152 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) #149)
#352 := (iff #152 #349)
#350 := (iff #149 #149)
#351 := [refl]: #350
#353 := [quant-intro #351]: #352
#236 := (~ #152 #152)
#234 := (~ #149 #149)
#235 := [refl]: #234
#237 := [nnf-pos #235]: #236
#53 := (= #31 f1)
#52 := (= #51 f1)
#54 := (iff #52 #53)
#55 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) #54)
#153 := (iff #55 #152)
#150 := (iff #54 #149)
#147 := (iff #53 #146)
#148 := [rewrite]: #147
#144 := (iff #52 #142)
#145 := [rewrite]: #144
#151 := [monotonicity #145 #148]: #150
#154 := [quant-intro #151]: #153
#141 := [asserted]: #55
#157 := [mp #141 #154]: #152
#238 := [mp~ #157 #237]: #152
#354 := [mp #238 #353]: #349
#463 := (not #349)
#464 := (or #463 #452)
#447 := (= f1 f1)
#453 := (iff #452 #447)
#465 := (or #463 #453)
#467 := (iff #465 #464)
#469 := (iff #464 #464)
#470 := [rewrite]: #469
#461 := (iff #453 #452)
#1 := true
#456 := (iff #452 true)
#459 := (iff #456 #452)
#460 := [rewrite]: #459
#457 := (iff #453 #456)
#454 := (iff #447 true)
#455 := [rewrite]: #454
#458 := [monotonicity #455]: #457
#462 := [trans #458 #460]: #461
#468 := [monotonicity #462]: #467
#471 := [trans #468 #470]: #467
#466 := [quant-inst #18 #12 #4 #86]: #465
#472 := [mp #466 #471]: #464
#754 := [unit-resolution #472 #354]: #452
#756 := [symm #754]: #755
#758 := [monotonicity #756 #741]: #757
#762 := [monotonicity #749 #758]: #761
#769 := [symm #762]: #768
#772 := (= #90 #88)
#399 := (f9 3::Int #398 #87)
#766 := (= #399 #88)
#763 := (= #88 #399)
#764 := [monotonicity #751]: #763
#767 := [symm #764]: #766
#770 := (= #90 #399)
#400 := (f17 f4 #88)
#401 := (= #400 #399)
#402 := (= #399 #400)
#58 := (:var 0 S7)
#57 := (:var 1 Int)
#65 := (:var 3 S2)
#67 := (f3 #65 #57)
#68 := (f9 #30 #67 #58)
#364 := (pattern #68)
#59 := (f9 #30 #57 #58)
#66 := (f17 #65 #59)
#363 := (pattern #66)
#69 := (= #66 #68)
#365 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) (:pat #363 #364) #69)
#70 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) #69)
#368 := (iff #70 #365)
#366 := (iff #69 #69)
#367 := [refl]: #366
#369 := [quant-intro #367]: #368
#246 := (~ #70 #70)
#244 := (~ #69 #69)
#245 := [refl]: #244
#247 := [nnf-pos #245]: #246
#156 := [asserted]: #70
#248 := [mp~ #156 #247]: #70
#370 := [mp #248 #369]: #365
#405 := (not #365)
#406 := (or #405 #402)
#407 := (or #405 #401)
#409 := (iff #407 #406)
#411 := (iff #406 #406)
#412 := [rewrite]: #411
#403 := (iff #401 #402)
#404 := [rewrite]: #403
#410 := [monotonicity #404]: #409
#413 := [trans #410 #412]: #409
#408 := [quant-inst #8 #18 #12 #87]: #407
#414 := [mp #408 #413]: #406
#753 := [unit-resolution #414 #370]: #402
#765 := [symm #753]: #401
#759 := (= #90 #400)
#89 := (= f22 #88)
#190 := (not #89)
#191 := (or #190 #183)
#196 := (not #191)
#93 := (= #92 f22)
#94 := (implies #89 #93)
#95 := (not #94)
#197 := (iff #95 #196)
#194 := (iff #94 #191)
#187 := (implies #89 #183)
#192 := (iff #187 #191)
#193 := [rewrite]: #192
#188 := (iff #94 #187)
#185 := (iff #93 #183)
#186 := [rewrite]: #185
#189 := [monotonicity #186]: #188
#195 := [trans #189 #193]: #194
#198 := [monotonicity #195]: #197
#182 := [asserted]: #95
#201 := [mp #182 #198]: #196
#199 := [not-or-elim #201]: #89
#760 := [monotonicity #199]: #759
#771 := [trans #760 #765]: #770
#773 := [trans #771 #767]: #772
#775 := [trans #773 #769]: #774
#777 := [monotonicity #775]: #776
#784 := [trans #777 #778]: #783
#786 := [trans #784 #782]: #785
#788 := [monotonicity #786]: #787
#795 := [symm #788]: #794
#798 := (= f22 #638)
#633 := (f3 f5 3::Int)
#634 := (f9 #633 4::Int #535)
#640 := (= #634 #638)
#72 := (f3 #65 #30)
#73 := (f9 #72 #57 #58)
#372 := (pattern #73)
#71 := (f18 #65 #59)
#371 := (pattern #71)
#74 := (= #71 #73)
#373 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) (:pat #371 #372) #74)
#75 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) #74)
#376 := (iff #75 #373)
#374 := (iff #74 #74)
#375 := [refl]: #374
#377 := [quant-intro #375]: #376
#251 := (~ #75 #75)
#249 := (~ #74 #74)
#250 := [refl]: #249
#252 := [nnf-pos #250]: #251
#158 := [asserted]: #75
#253 := [mp~ #158 #252]: #75
#378 := [mp #253 #377]: #373
#643 := (not #373)
#644 := (or #643 #640)
#639 := (= #638 #634)
#645 := (or #643 #639)
#647 := (iff #645 #644)
#649 := (iff #644 #644)
#650 := [rewrite]: #649
#641 := (iff #639 #640)
#642 := [rewrite]: #641
#648 := [monotonicity #642]: #647
#651 := [trans #648 #650]: #647
#646 := [quant-inst #15 #18 #12 #535]: #645
#652 := [mp #646 #651]: #644
#748 := [unit-resolution #652 #378]: #640
#796 := (= f22 #634)
#792 := (= #88 #634)
#790 := (= #634 #88)
#745 := (= #535 #87)
#743 := (= #532 f1)
#586 := (= f1 #532)
#22 := (:var 0 S1)
#23 := (f6 f7 #22)
#24 := (pattern #23)
#118 := (= f1 #23)
#128 := (forall (vars (?v0 S1)) (:pat #24) #118)
#216 := (~ #128 #128)
#214 := (~ #118 #118)
#215 := [refl]: #214
#217 := [nnf-pos #215]: #216
#25 := (= #23 f1)
#26 := (iff #25 true)
#27 := (forall (vars (?v0 S1)) (:pat #24) #26)
#129 := (iff #27 #128)
#126 := (iff #26 #118)
#121 := (iff #118 true)
#124 := (iff #121 #118)
#125 := [rewrite]: #124
#122 := (iff #26 #121)
#119 := (iff #25 #118)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#130 := [quant-intro #127]: #129
#117 := [asserted]: #27
#133 := [mp #117 #130]: #128
#218 := [mp~ #133 #217]: #128
#635 := (not #128)
#636 := (or #635 #586)
#637 := [quant-inst #448]: #636
#742 := [unit-resolution #637 #218]: #586
#744 := [symm #742]: #743
#746 := [monotonicity #744 #741]: #745
#735 := (= #633 3::Int)
#16 := (f3 f5 #9)
#17 := (pattern #16)
#19 := (= #16 3::Int)
#20 := (forall (vars (?v0 Int)) (:pat #17) #19)
#211 := (~ #20 #20)
#209 := (~ #19 #19)
#210 := [refl]: #209
#212 := [nnf-pos #210]: #211
#116 := [asserted]: #20
#213 := [mp~ #116 #212]: #20
#738 := (not #20)
#739 := (or #738 #735)
#740 := [quant-inst #18]: #739
#747 := [unit-resolution #740 #213]: #735
#791 := [monotonicity #747 #746]: #790
#793 := [symm #791]: #792
#797 := [trans #199 #793]: #796
#799 := [trans #797 #748]: #798
#800 := [trans #799 #795]: #183
#200 := (not #183)
#202 := [not-or-elim #201]: #200
[unit-resolution #202 #800]: false
unsat
28647514baf56d812f754250e53a79198fbce4ff 371 0
#2 := false
decl f17 :: (-> S2 S6 S6)
decl f18 :: (-> S2 S6 S6)
decl f12 :: (-> S3 S6 S6)
decl f22 :: S6
#85 := f22
decl f7 :: S3
#21 := f7
#90 := (f12 f7 f22)
decl f5 :: S2
#15 := f5
#91 := (f18 f5 #90)
decl f4 :: S2
#8 := f4
#92 := (f17 f4 #91)
#183 := (= f22 #92)
decl f9 :: (-> Int Int S7 S6)
decl f19 :: (-> S6 S7)
decl f10 :: (-> S1 S5 S7)
decl f23 :: S5
#86 := f23
decl f6 :: (-> S3 S1 S1)
decl f1 :: S1
#4 := f1
#398 := (f6 f7 f1)
#399 := (f10 #398 f23)
#12 := 4::Int
#18 := 3::Int
#400 := (f9 3::Int 4::Int #399)
#507 := (f19 #400)
decl f3 :: (-> S2 Int Int)
#546 := (f3 f5 3::Int)
#566 := (f9 #546 4::Int #507)
#643 := (f17 f4 #566)
#788 := (= #643 #92)
#781 := (= #92 #643)
#766 := (= #91 #566)
#547 := (f9 #546 4::Int #399)
#762 := (= #547 #566)
#760 := (= #566 #547)
#742 := (= #507 #399)
#508 := (= #399 #507)
#58 := (:var 0 S7)
#57 := (:var 1 Int)
#30 := (:var 2 Int)
#59 := (f9 #30 #57 #58)
#379 := (pattern #59)
#76 := (f19 #59)
#160 := (= #58 #76)
#380 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S7)) (:pat #379) #160)
#163 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S7)) #160)
#383 := (iff #163 #380)
#381 := (iff #160 #160)
#382 := [refl]: #381
#384 := [quant-intro #382]: #383
#256 := (~ #163 #163)
#254 := (~ #160 #160)
#255 := [refl]: #254
#257 := [nnf-pos #255]: #256
#77 := (= #76 #58)
#78 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S7)) #77)
#164 := (iff #78 #163)
#161 := (iff #77 #160)
#162 := [rewrite]: #161
#165 := [quant-intro #162]: #164
#159 := [asserted]: #78
#168 := [mp #159 #165]: #163
#258 := [mp~ #168 #257]: #163
#385 := [mp #258 #384]: #380
#450 := (not #380)
#511 := (or #450 #508)
#512 := [quant-inst #18 #12 #399]: #511
#741 := [unit-resolution #512 #385]: #508
#746 := [symm #741]: #742
#761 := [monotonicity #746]: #760
#763 := [symm #761]: #762
#764 := (= #91 #547)
#551 := (f18 f5 #400)
#552 := (= #551 #547)
#553 := (= #547 #551)
#65 := (:var 3 S2)
#72 := (f3 #65 #30)
#73 := (f9 #72 #57 #58)
#372 := (pattern #73)
#71 := (f18 #65 #59)
#371 := (pattern #71)
#74 := (= #71 #73)
#373 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) (:pat #371 #372) #74)
#75 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) #74)
#376 := (iff #75 #373)
#374 := (iff #74 #74)
#375 := [refl]: #374
#377 := [quant-intro #375]: #376
#251 := (~ #75 #75)
#249 := (~ #74 #74)
#250 := [refl]: #249
#252 := [nnf-pos #250]: #251
#158 := [asserted]: #75
#253 := [mp~ #158 #252]: #75
#378 := [mp #253 #377]: #373
#556 := (not #373)
#557 := (or #556 #553)
#558 := (or #556 #552)
#560 := (iff #558 #557)
#562 := (iff #557 #557)
#563 := [rewrite]: #562
#554 := (iff #552 #553)
#555 := [rewrite]: #554
#561 := [monotonicity #555]: #560
#564 := [trans #561 #563]: #560
#559 := [quant-inst #15 #18 #12 #399]: #558
#565 := [mp #559 #564]: #557
#750 := [unit-resolution #565 #378]: #553
#759 := [symm #750]: #552
#757 := (= #91 #551)
#755 := (= #90 #400)
#87 := (f10 f1 f23)
#88 := (f9 3::Int 4::Int #87)
#401 := (f12 f7 #88)
#402 := (= #401 #400)
#403 := (= #400 #401)
#32 := (:var 0 S5)
#31 := (:var 1 S1)
#41 := (:var 4 S3)
#43 := (f6 #41 #31)
#44 := (f10 #43 #32)
#29 := (:var 3 Int)
#45 := (f9 #29 #30 #44)
#335 := (pattern #45)
#33 := (f10 #31 #32)
#34 := (f9 #29 #30 #33)
#42 := (f12 #41 #34)
#334 := (pattern #42)
#46 := (= #42 #45)
#336 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S5)) (:pat #334 #335) #46)
#47 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S5)) #46)
#339 := (iff #47 #336)
#337 := (iff #46 #46)
#338 := [refl]: #337
#340 := [quant-intro #338]: #339
#226 := (~ #47 #47)
#224 := (~ #46 #46)
#225 := [refl]: #224
#227 := [nnf-pos #225]: #226
#132 := [asserted]: #47
#228 := [mp~ #132 #227]: #47
#341 := [mp #228 #340]: #336
#406 := (not #336)
#407 := (or #406 #403)
#408 := (or #406 #402)
#410 := (iff #408 #407)
#412 := (iff #407 #407)
#413 := [rewrite]: #412
#404 := (iff #402 #403)
#405 := [rewrite]: #404
#411 := [monotonicity #405]: #410
#414 := [trans #411 #413]: #410
#409 := [quant-inst #21 #18 #12 #4 #86]: #408
#415 := [mp #409 #414]: #407
#751 := [unit-resolution #415 #341]: #403
#754 := [symm #751]: #402
#752 := (= #90 #401)
#89 := (= f22 #88)
#190 := (not #89)
#191 := (or #190 #183)
#196 := (not #191)
#93 := (= #92 f22)
#94 := (implies #89 #93)
#95 := (not #94)
#197 := (iff #95 #196)
#194 := (iff #94 #191)
#187 := (implies #89 #183)
#192 := (iff #187 #191)
#193 := [rewrite]: #192
#188 := (iff #94 #187)
#185 := (iff #93 #183)
#186 := [rewrite]: #185
#189 := [monotonicity #186]: #188
#195 := [trans #189 #193]: #194
#198 := [monotonicity #195]: #197
#182 := [asserted]: #95
#201 := [mp #182 #198]: #196
#199 := [not-or-elim #201]: #89
#753 := [monotonicity #199]: #752
#756 := [trans #753 #754]: #755
#758 := [monotonicity #756]: #757
#765 := [trans #758 #759]: #764
#767 := [trans #765 #763]: #766
#782 := [monotonicity #767]: #781
#789 := [symm #782]: #788
#794 := (= f22 #643)
#638 := (f3 f4 4::Int)
#639 := (f9 #546 #638 #507)
#645 := (= #639 #643)
#67 := (f3 #65 #57)
#68 := (f9 #30 #67 #58)
#364 := (pattern #68)
#66 := (f17 #65 #59)
#363 := (pattern #66)
#69 := (= #66 #68)
#365 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) (:pat #363 #364) #69)
#70 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S7)) #69)
#368 := (iff #70 #365)
#366 := (iff #69 #69)
#367 := [refl]: #366
#369 := [quant-intro #367]: #368
#246 := (~ #70 #70)
#244 := (~ #69 #69)
#245 := [refl]: #244
#247 := [nnf-pos #245]: #246
#156 := [asserted]: #70
#248 := [mp~ #156 #247]: #70
#370 := [mp #248 #369]: #365
#648 := (not #365)
#649 := (or #648 #645)
#644 := (= #643 #639)
#650 := (or #648 #644)
#652 := (iff #650 #649)
#654 := (iff #649 #649)
#655 := [rewrite]: #654
#646 := (iff #644 #645)
#647 := [rewrite]: #646
#653 := [monotonicity #647]: #652
#656 := [trans #653 #655]: #652
#651 := [quant-inst #8 #546 #12 #507]: #650
#657 := [mp #651 #656]: #649
#749 := [unit-resolution #657 #370]: #645
#792 := (= f22 #639)
#786 := (= #400 #639)
#784 := (= #639 #400)
#740 := (= #638 4::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 4::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#206 := (~ #14 #14)
#204 := (~ #13 #13)
#205 := [refl]: #204
#207 := [nnf-pos #205]: #206
#115 := [asserted]: #14
#208 := [mp~ #115 #207]: #14
#743 := (not #14)
#744 := (or #743 #740)
#745 := [quant-inst #12]: #744
#747 := [unit-resolution #745 #208]: #740
#637 := (= #546 3::Int)
#16 := (f3 f5 #9)
#17 := (pattern #16)
#19 := (= #16 3::Int)
#20 := (forall (vars (?v0 Int)) (:pat #17) #19)
#211 := (~ #20 #20)
#209 := (~ #19 #19)
#210 := [refl]: #209
#212 := [nnf-pos #210]: #211
#116 := [asserted]: #20
#213 := [mp~ #116 #212]: #20
#640 := (not #20)
#641 := (or #640 #637)
#642 := [quant-inst #18]: #641
#748 := [unit-resolution #642 #213]: #637
#785 := [monotonicity #748 #747 #746]: #784
#787 := [symm #785]: #786
#790 := (= f22 #400)
#779 := (= #88 #400)
#777 := (= #87 #399)
#509 := (= f1 #398)
decl f14 :: (-> S6 S1)
#449 := (f14 #88)
#542 := (f6 f7 #449)
#774 := (= #542 #398)
#770 := (= #398 #542)
#453 := (= f1 #449)
#342 := (pattern #34)
#146 := (= f1 #31)
#51 := (f14 #34)
#142 := (= f1 #51)
#149 := (iff #142 #146)
#349 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) (:pat #342) #149)
#152 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) #149)
#352 := (iff #152 #349)
#350 := (iff #149 #149)
#351 := [refl]: #350
#353 := [quant-intro #351]: #352
#236 := (~ #152 #152)
#234 := (~ #149 #149)
#235 := [refl]: #234
#237 := [nnf-pos #235]: #236
#53 := (= #31 f1)
#52 := (= #51 f1)
#54 := (iff #52 #53)
#55 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S5)) #54)
#153 := (iff #55 #152)
#150 := (iff #54 #149)
#147 := (iff #53 #146)
#148 := [rewrite]: #147
#144 := (iff #52 #142)
#145 := [rewrite]: #144
#151 := [monotonicity #145 #148]: #150
#154 := [quant-intro #151]: #153
#141 := [asserted]: #55
#157 := [mp #141 #154]: #152
#238 := [mp~ #157 #237]: #152
#354 := [mp #238 #353]: #349
#464 := (not #349)
#465 := (or #464 #453)
#448 := (= f1 f1)
#454 := (iff #453 #448)
#466 := (or #464 #454)
#468 := (iff #466 #465)
#470 := (iff #465 #465)
#471 := [rewrite]: #470
#462 := (iff #454 #453)
#1 := true
#457 := (iff #453 true)
#460 := (iff #457 #453)
#461 := [rewrite]: #460
#458 := (iff #454 #457)
#455 := (iff #448 true)
#456 := [rewrite]: #455
#459 := [monotonicity #456]: #458
#463 := [trans #459 #461]: #462
#469 := [monotonicity #463]: #468
#472 := [trans #469 #471]: #468
#467 := [quant-inst #18 #12 #4 #86]: #466
#473 := [mp #467 #472]: #465
#769 := [unit-resolution #473 #354]: #453
#771 := [monotonicity #769]: #770
#775 := [symm #771]: #774
#543 := (= f1 #542)
#22 := (:var 0 S1)
#23 := (f6 f7 #22)
#24 := (pattern #23)
#118 := (= f1 #23)
#128 := (forall (vars (?v0 S1)) (:pat #24) #118)
#216 := (~ #128 #128)
#214 := (~ #118 #118)
#215 := [refl]: #214
#217 := [nnf-pos #215]: #216
#25 := (= #23 f1)
#26 := (iff #25 true)
#27 := (forall (vars (?v0 S1)) (:pat #24) #26)
#129 := (iff #27 #128)
#126 := (iff #26 #118)
#121 := (iff #118 true)
#124 := (iff #121 #118)
#125 := [rewrite]: #124
#122 := (iff #26 #121)
#119 := (iff #25 #118)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#130 := [quant-intro #127]: #129
#117 := [asserted]: #27
#133 := [mp #117 #130]: #128
#218 := [mp~ #133 #217]: #128
#548 := (not #128)
#549 := (or #548 #543)
#550 := [quant-inst #449]: #549
#768 := [unit-resolution #550 #218]: #543
#776 := [trans #768 #775]: #509
#778 := [monotonicity #776]: #777
#780 := [monotonicity #778]: #779
#791 := [trans #199 #780]: #790
#793 := [trans #791 #787]: #792
#795 := [trans #793 #749]: #794
#796 := [trans #795 #789]: #183
#200 := (not #183)
#202 := [not-or-elim #201]: #200
[unit-resolution #202 #796]: false
unsat
32bed77391f2e5bd3429d275156eab0436b0859c 18 0
#2 := false
decl f3 :: S2
#8 := f3
#48 := (= f3 f3)
#49 := (not #48)
#155 := (iff #49 false)
#1 := true
#150 := (not true)
#153 := (iff #150 false)
#154 := [rewrite]: #153
#151 := (iff #49 #150)
#147 := (iff #48 true)
#149 := [rewrite]: #147
#152 := [monotonicity #149]: #151
#156 := [trans #152 #154]: #155
#146 := [asserted]: #49
[mp #146 #156]: false
unsat
3c1ec477ccf1b2909c916c4e5bde25988097c01d 18 0
#2 := false
decl f5 :: S2
#12 := f5
#48 := (= f5 f5)
#49 := (not #48)
#155 := (iff #49 false)
#1 := true
#150 := (not true)
#153 := (iff #150 false)
#154 := [rewrite]: #153
#151 := (iff #49 #150)
#147 := (iff #48 true)
#149 := [rewrite]: #147
#152 := [monotonicity #149]: #151
#156 := [trans #152 #154]: #155
#146 := [asserted]: #49
[mp #146 #156]: false
unsat
fc393122d71ac475e5b68121edf0d1d7e9737e48 277 0
#2 := false
#13 := 2::Int
#9 := 1::Int
#330 := (= 1::Int 2::Int)
#335 := (iff #330 false)
#336 := [rewrite]: #335
decl f8 :: (-> S2 Int)
decl f4 :: (-> Int S2)
#14 := (f4 2::Int)
#282 := (f8 #14)
#290 := (= #282 2::Int)
decl f9 :: (-> Int S3 S1)
decl f10 :: S3
#30 := f10
#284 := (f9 2::Int f10)
decl f1 :: S1
#4 := f1
#285 := (= f1 #284)
#286 := (not #285)
#446 := [hypothesis]: #286
#29 := (:var 0 Int)
#31 := (f9 #29 f10)
#237 := (pattern #31)
#17 := 3::Int
#35 := (= #29 3::Int)
#34 := (= #29 2::Int)
#33 := (= #29 1::Int)
#109 := (or #33 #34 #35)
#75 := (= f1 #31)
#114 := (iff #75 #109)
#238 := (forall (vars (?v0 Int)) (:pat #237) #114)
#117 := (forall (vars (?v0 Int)) #114)
#241 := (iff #117 #238)
#239 := (iff #114 #114)
#240 := [refl]: #239
#242 := [quant-intro #240]: #241
#160 := (~ #117 #117)
#158 := (~ #114 #114)
#159 := [refl]: #158
#161 := [nnf-pos #159]: #160
#36 := (or #34 #35)
#37 := (or #33 #36)
#32 := (= #31 f1)
#38 := (iff #32 #37)
#39 := (forall (vars (?v0 Int)) #38)
#120 := (iff #39 #117)
#84 := (= 3::Int #29)
#81 := (= 2::Int #29)
#87 := (or #81 #84)
#78 := (= 1::Int #29)
#90 := (or #78 #87)
#93 := (iff #75 #90)
#96 := (forall (vars (?v0 Int)) #93)
#118 := (iff #96 #117)
#115 := (iff #93 #114)
#112 := (iff #90 #109)
#110 := (iff #37 #109)
#111 := [rewrite]: #110
#107 := (iff #90 #37)
#105 := (iff #87 #36)
#101 := (iff #84 #35)
#102 := [rewrite]: #101
#99 := (iff #81 #34)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #102]: #105
#103 := (iff #78 #33)
#104 := [rewrite]: #103
#108 := [monotonicity #104 #106]: #107
#113 := [trans #108 #111]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#97 := (iff #39 #96)
#94 := (iff #38 #93)
#91 := (iff #37 #90)
#88 := (iff #36 #87)
#85 := (iff #35 #84)
#86 := [rewrite]: #85
#82 := (iff #34 #81)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#79 := (iff #33 #78)
#80 := [rewrite]: #79
#92 := [monotonicity #80 #89]: #91
#76 := (iff #32 #75)
#77 := [rewrite]: #76
#95 := [monotonicity #77 #92]: #94
#98 := [quant-intro #95]: #97
#121 := [trans #98 #119]: #120
#74 := [asserted]: #39
#122 := [mp #74 #121]: #117
#162 := [mp~ #122 #161]: #117
#243 := [mp #162 #242]: #238
#353 := (not #238)
#437 := (or #353 #285)
#411 := (= 2::Int 3::Int)
#414 := (= 2::Int 2::Int)
#410 := (= 2::Int 1::Int)
#415 := (or #410 #414 #411)
#416 := (iff #285 #415)
#438 := (or #353 #416)
#440 := (iff #438 #437)
#442 := (iff #437 #437)
#443 := [rewrite]: #442
#435 := (iff #416 #285)
#1 := true
#430 := (iff #285 true)
#433 := (iff #430 #285)
#434 := [rewrite]: #433
#431 := (iff #416 #430)
#428 := (iff #415 true)
#423 := (or false true false)
#426 := (iff #423 true)
#427 := [rewrite]: #426
#424 := (iff #415 #423)
#421 := (iff #411 false)
#422 := [rewrite]: #421
#419 := (iff #414 true)
#420 := [rewrite]: #419
#417 := (iff #410 false)
#418 := [rewrite]: #417
#425 := [monotonicity #418 #420 #422]: #424
#429 := [trans #425 #427]: #428
#432 := [monotonicity #429]: #431
#436 := [trans #432 #434]: #435
#441 := [monotonicity #436]: #440
#444 := [trans #441 #443]: #440
#439 := [quant-inst #13]: #438
#445 := [mp #439 #444]: #437
#447 := [unit-resolution #445 #243 #446]: false
#448 := [lemma #447]: #285
#291 := (or #286 #290)
#43 := (f4 #29)
#251 := (pattern #43)
#44 := (f8 #43)
#131 := (= #29 #44)
#138 := (not #75)
#139 := (or #138 #131)
#252 := (forall (vars (?v0 Int)) (:pat #237 #251) #139)
#144 := (forall (vars (?v0 Int)) #139)
#255 := (iff #144 #252)
#253 := (iff #139 #139)
#254 := [refl]: #253
#256 := [quant-intro #254]: #255
#170 := (~ #144 #144)
#168 := (~ #139 #139)
#169 := [refl]: #168
#171 := [nnf-pos #169]: #170
#45 := (= #44 #29)
#46 := (implies #32 #45)
#47 := (forall (vars (?v0 Int)) #46)
#145 := (iff #47 #144)
#142 := (iff #46 #139)
#135 := (implies #75 #131)
#140 := (iff #135 #139)
#141 := [rewrite]: #140
#136 := (iff #46 #135)
#133 := (iff #45 #131)
#134 := [rewrite]: #133
#137 := [monotonicity #77 #134]: #136
#143 := [trans #137 #141]: #142
#146 := [quant-intro #143]: #145
#130 := [asserted]: #47
#149 := [mp #130 #146]: #144
#172 := [mp~ #149 #171]: #144
#257 := [mp #172 #256]: #252
#270 := (not #252)
#294 := (or #270 #286 #290)
#283 := (= 2::Int #282)
#287 := (or #286 #283)
#295 := (or #270 #287)
#302 := (iff #295 #294)
#297 := (or #270 #291)
#300 := (iff #297 #294)
#301 := [rewrite]: #300
#298 := (iff #295 #297)
#292 := (iff #287 #291)
#288 := (iff #283 #290)
#289 := [rewrite]: #288
#293 := [monotonicity #289]: #292
#299 := [monotonicity #293]: #298
#303 := [trans #299 #301]: #302
#296 := [quant-inst #13]: #295
#304 := [mp #296 #303]: #294
#449 := [unit-resolution #304 #257]: #291
#450 := [unit-resolution #449 #448]: #290
#467 := (= 1::Int #282)
#465 := (= #282 1::Int)
#10 := (f4 1::Int)
#258 := (f8 #10)
#266 := (= #258 1::Int)
#260 := (f9 1::Int f10)
#261 := (= f1 #260)
#262 := (not #261)
#363 := [hypothesis]: #262
#354 := (or #353 #261)
#329 := (= 1::Int 3::Int)
#328 := (= 1::Int 1::Int)
#331 := (or #328 #330 #329)
#332 := (iff #261 #331)
#355 := (or #353 #332)
#357 := (iff #355 #354)
#359 := (iff #354 #354)
#360 := [rewrite]: #359
#351 := (iff #332 #261)
#346 := (iff #261 true)
#349 := (iff #346 #261)
#350 := [rewrite]: #349
#347 := (iff #332 #346)
#344 := (iff #331 true)
#339 := (or true false false)
#342 := (iff #339 true)
#343 := [rewrite]: #342
#340 := (iff #331 #339)
#337 := (iff #329 false)
#338 := [rewrite]: #337
#333 := (iff #328 true)
#334 := [rewrite]: #333
#341 := [monotonicity #334 #336 #338]: #340
#345 := [trans #341 #343]: #344
#348 := [monotonicity #345]: #347
#352 := [trans #348 #350]: #351
#358 := [monotonicity #352]: #357
#361 := [trans #358 #360]: #357
#356 := [quant-inst #9]: #355
#362 := [mp #356 #361]: #354
#364 := [unit-resolution #362 #243 #363]: false
#365 := [lemma #364]: #261
#267 := (or #262 #266)
#271 := (or #270 #262 #266)
#259 := (= 1::Int #258)
#263 := (or #262 #259)
#272 := (or #270 #263)
#279 := (iff #272 #271)
#274 := (or #270 #267)
#277 := (iff #274 #271)
#278 := [rewrite]: #277
#275 := (iff #272 #274)
#268 := (iff #263 #267)
#264 := (iff #259 #266)
#265 := [rewrite]: #264
#269 := [monotonicity #265]: #268
#276 := [monotonicity #269]: #275
#280 := [trans #276 #278]: #279
#273 := [quant-inst #9]: #272
#281 := [mp #273 #280]: #271
#451 := [unit-resolution #281 #257]: #267
#452 := [unit-resolution #451 #365]: #266
#463 := (= #282 #258)
#461 := (= #14 #10)
decl f3 :: S2
#8 := f3
#11 := (= f3 #10)
#70 := [asserted]: #11
#459 := (= #14 f3)
decl f5 :: S2
#12 := f5
#457 := (= f5 f3)
#48 := (= f3 f5)
#49 := (not #48)
#50 := (not #49)
#148 := (iff #50 #48)
#150 := [rewrite]: #148
#147 := [asserted]: #50
#153 := [mp #147 #150]: #48
#458 := [symm #153]: #457
#455 := (= #14 f5)
#15 := (= f5 #14)
#71 := [asserted]: #15
#456 := [symm #71]: #455
#460 := [trans #456 #458]: #459
#462 := [trans #460 #70]: #461
#464 := [monotonicity #462]: #463
#466 := [trans #464 #452]: #465
#468 := [symm #466]: #467
#469 := [trans #468 #450]: #330
[mp #469 #336]: false
unsat
3eced97a83aec74943eda175c04a4dc551f95874 277 0
#2 := false
decl f7 :: (-> S2 S2 S2)
decl f3 :: S2
#8 := f3
#48 := (f7 f3 f3)
decl f5 :: S2
#12 := f5
#148 := (= f5 #48)
decl f4 :: (-> Int S2)
#9 := 1::Int
#10 := (f4 1::Int)
#265 := (f7 #10 #10)
#503 := (= #265 #48)
#499 := (= #48 #265)
#11 := (= f3 #10)
#70 := [asserted]: #11
#500 := [monotonicity #70 #70]: #499
#504 := [symm #500]: #503
#507 := (= f5 #265)
decl f8 :: (-> S2 Int)
#262 := (f8 #10)
#13 := 2::Int
#267 := (* 2::Int #262)
#270 := (f4 #267)
#501 := (= #270 #265)
#273 := (= #265 #270)
#21 := (:var 0 S2)
#20 := (:var 1 S2)
#22 := (f7 #20 #21)
#234 := (pattern #22)
#24 := (f8 #21)
#23 := (f8 #20)
#25 := (+ #23 #24)
#26 := (f4 #25)
#27 := (= #22 #26)
#235 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #234) #27)
#28 := (forall (vars (?v0 S2) (?v1 S2)) #27)
#238 := (iff #28 #235)
#236 := (iff #27 #27)
#237 := [refl]: #236
#239 := [quant-intro #237]: #238
#159 := (~ #28 #28)
#156 := (~ #27 #27)
#158 := [refl]: #156
#160 := [nnf-pos #158]: #159
#73 := [asserted]: #28
#161 := [mp~ #73 #160]: #28
#240 := [mp #161 #239]: #235
#276 := (not #235)
#277 := (or #276 #273)
#263 := (+ #262 #262)
#264 := (f4 #263)
#266 := (= #265 #264)
#278 := (or #276 #266)
#280 := (iff #278 #277)
#282 := (iff #277 #277)
#283 := [rewrite]: #282
#274 := (iff #266 #273)
#271 := (= #264 #270)
#268 := (= #263 #267)
#269 := [rewrite]: #268
#272 := [monotonicity #269]: #271
#275 := [monotonicity #272]: #274
#281 := [monotonicity #275]: #280
#284 := [trans #281 #283]: #280
#279 := [quant-inst #10 #10]: #278
#285 := [mp #279 #284]: #277
#484 := [unit-resolution #285 #240]: #273
#502 := [symm #484]: #501
#505 := (= f5 #270)
#14 := (f4 2::Int)
#497 := (= #14 #270)
#495 := (= 2::Int #267)
#493 := (= #267 2::Int)
#309 := (<= #262 1::Int)
#293 := (= #262 1::Int)
decl f9 :: (-> Int S3 S1)
decl f10 :: S3
#30 := f10
#287 := (f9 1::Int f10)
decl f1 :: S1
#4 := f1
#288 := (= f1 #287)
#289 := (not #288)
#481 := [hypothesis]: #289
#29 := (:var 0 Int)
#31 := (f9 #29 f10)
#241 := (pattern #31)
#17 := 3::Int
#35 := (= #29 3::Int)
#34 := (= #29 2::Int)
#33 := (= #29 1::Int)
#109 := (or #33 #34 #35)
#75 := (= f1 #31)
#114 := (iff #75 #109)
#242 := (forall (vars (?v0 Int)) (:pat #241) #114)
#117 := (forall (vars (?v0 Int)) #114)
#245 := (iff #117 #242)
#243 := (iff #114 #114)
#244 := [refl]: #243
#246 := [quant-intro #244]: #245
#164 := (~ #117 #117)
#162 := (~ #114 #114)
#163 := [refl]: #162
#165 := [nnf-pos #163]: #164
#36 := (or #34 #35)
#37 := (or #33 #36)
#32 := (= #31 f1)
#38 := (iff #32 #37)
#39 := (forall (vars (?v0 Int)) #38)
#120 := (iff #39 #117)
#84 := (= 3::Int #29)
#81 := (= 2::Int #29)
#87 := (or #81 #84)
#78 := (= 1::Int #29)
#90 := (or #78 #87)
#93 := (iff #75 #90)
#96 := (forall (vars (?v0 Int)) #93)
#118 := (iff #96 #117)
#115 := (iff #93 #114)
#112 := (iff #90 #109)
#110 := (iff #37 #109)
#111 := [rewrite]: #110
#107 := (iff #90 #37)
#105 := (iff #87 #36)
#101 := (iff #84 #35)
#102 := [rewrite]: #101
#99 := (iff #81 #34)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #102]: #105
#103 := (iff #78 #33)
#104 := [rewrite]: #103
#108 := [monotonicity #104 #106]: #107
#113 := [trans #108 #111]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#97 := (iff #39 #96)
#94 := (iff #38 #93)
#91 := (iff #37 #90)
#88 := (iff #36 #87)
#85 := (iff #35 #84)
#86 := [rewrite]: #85
#82 := (iff #34 #81)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#79 := (iff #33 #78)
#80 := [rewrite]: #79
#92 := [monotonicity #80 #89]: #91
#76 := (iff #32 #75)
#77 := [rewrite]: #76
#95 := [monotonicity #77 #92]: #94
#98 := [quant-intro #95]: #97
#121 := [trans #98 #119]: #120
#74 := [asserted]: #39
#122 := [mp #74 #121]: #117
#166 := [mp~ #122 #165]: #117
#247 := [mp #166 #246]: #242
#401 := (not #242)
#472 := (or #401 #288)
#442 := (= 1::Int 3::Int)
#449 := (= 1::Int 2::Int)
#441 := (= 1::Int 1::Int)
#450 := (or #441 #449 #442)
#451 := (iff #288 #450)
#473 := (or #401 #451)
#475 := (iff #473 #472)
#477 := (iff #472 #472)
#478 := [rewrite]: #477
#470 := (iff #451 #288)
#1 := true
#465 := (iff #288 true)
#468 := (iff #465 #288)
#469 := [rewrite]: #468
#466 := (iff #451 #465)
#463 := (iff #450 true)
#458 := (or true false false)
#461 := (iff #458 true)
#462 := [rewrite]: #461
#459 := (iff #450 #458)
#456 := (iff #442 false)
#457 := [rewrite]: #456
#454 := (iff #449 false)
#455 := [rewrite]: #454
#452 := (iff #441 true)
#453 := [rewrite]: #452
#460 := [monotonicity #453 #455 #457]: #459
#464 := [trans #460 #462]: #463
#467 := [monotonicity #464]: #466
#471 := [trans #467 #469]: #470
#476 := [monotonicity #471]: #475
#479 := [trans #476 #478]: #475
#474 := [quant-inst #9]: #473
#480 := [mp #474 #479]: #472
#482 := [unit-resolution #480 #247 #481]: false
#483 := [lemma #482]: #288
#294 := (or #289 #293)
#43 := (f4 #29)
#255 := (pattern #43)
#44 := (f8 #43)
#131 := (= #29 #44)
#138 := (not #75)
#139 := (or #138 #131)
#256 := (forall (vars (?v0 Int)) (:pat #241 #255) #139)
#144 := (forall (vars (?v0 Int)) #139)
#259 := (iff #144 #256)
#257 := (iff #139 #139)
#258 := [refl]: #257
#260 := [quant-intro #258]: #259
#174 := (~ #144 #144)
#172 := (~ #139 #139)
#173 := [refl]: #172
#175 := [nnf-pos #173]: #174
#45 := (= #44 #29)
#46 := (implies #32 #45)
#47 := (forall (vars (?v0 Int)) #46)
#145 := (iff #47 #144)
#142 := (iff #46 #139)
#135 := (implies #75 #131)
#140 := (iff #135 #139)
#141 := [rewrite]: #140
#136 := (iff #46 #135)
#133 := (iff #45 #131)
#134 := [rewrite]: #133
#137 := [monotonicity #77 #134]: #136
#143 := [trans #137 #141]: #142
#146 := [quant-intro #143]: #145
#130 := [asserted]: #47
#149 := [mp #130 #146]: #144
#176 := [mp~ #149 #175]: #144
#261 := [mp #176 #260]: #256
#297 := (not #256)
#298 := (or #297 #289 #293)
#286 := (= 1::Int #262)
#290 := (or #289 #286)
#299 := (or #297 #290)
#306 := (iff #299 #298)
#301 := (or #297 #294)
#304 := (iff #301 #298)
#305 := [rewrite]: #304
#302 := (iff #299 #301)
#295 := (iff #290 #294)
#291 := (iff #286 #293)
#292 := [rewrite]: #291
#296 := [monotonicity #292]: #295
#303 := [monotonicity #296]: #302
#307 := [trans #303 #305]: #306
#300 := [quant-inst #9]: #299
#308 := [mp #300 #307]: #298
#485 := [unit-resolution #308 #261]: #294
#486 := [unit-resolution #485 #483]: #293
#415 := (not #293)
#487 := (or #415 #309)
#488 := [th-lemma arith triangle-eq]: #487
#489 := [unit-resolution #488 #486]: #309
#310 := (>= #262 1::Int)
#490 := (or #415 #310)
#491 := [th-lemma arith triangle-eq]: #490
#492 := [unit-resolution #491 #486]: #310
#494 := [th-lemma arith eq-propagate -2 -2 #492 #489]: #493
#496 := [symm #494]: #495
#498 := [monotonicity #496]: #497
#15 := (= f5 #14)
#71 := [asserted]: #15
#506 := [trans #71 #498]: #505
#508 := [trans #506 #502]: #507
#509 := [trans #508 #504]: #148
#152 := (not #148)
#49 := (= #48 f5)
#50 := (not #49)
#153 := (iff #50 #152)
#150 := (iff #49 #148)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#147 := [asserted]: #50
#157 := [mp #147 #154]: #152
[unit-resolution #157 #509]: false
unsat
430c03c5c26128e8a75bc59c68cc6da929b262eb 435 0
#2 := false
decl f7 :: (-> S2 S2 S2)
decl f5 :: S2
#12 := f5
decl f3 :: S2
#8 := f3
#48 := (f7 f3 f5)
decl f6 :: S2
#16 := f6
#148 := (= f6 #48)
decl f4 :: (-> Int S2)
#13 := 2::Int
#14 := (f4 2::Int)
#9 := 1::Int
#10 := (f4 1::Int)
#266 := (f7 #10 #14)
#584 := (= #266 #48)
#618 := (= #48 #266)
#15 := (= f5 #14)
#71 := [asserted]: #15
#11 := (= f3 #10)
#70 := [asserted]: #11
#619 := [monotonicity #70 #71]: #618
#587 := [symm #619]: #584
#590 := (= f6 #266)
decl f8 :: (-> S2 Int)
#263 := (f8 #10)
#262 := (f8 #14)
#268 := (+ #262 #263)
#271 := (f4 #268)
#585 := (= #271 #266)
#274 := (= #266 #271)
#21 := (:var 0 S2)
#20 := (:var 1 S2)
#22 := (f7 #20 #21)
#234 := (pattern #22)
#24 := (f8 #21)
#23 := (f8 #20)
#25 := (+ #23 #24)
#26 := (f4 #25)
#27 := (= #22 #26)
#235 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #234) #27)
#28 := (forall (vars (?v0 S2) (?v1 S2)) #27)
#238 := (iff #28 #235)
#236 := (iff #27 #27)
#237 := [refl]: #236
#239 := [quant-intro #237]: #238
#159 := (~ #28 #28)
#156 := (~ #27 #27)
#158 := [refl]: #156
#160 := [nnf-pos #158]: #159
#73 := [asserted]: #28
#161 := [mp~ #73 #160]: #28
#240 := [mp #161 #239]: #235
#277 := (not #235)
#278 := (or #277 #274)
#264 := (+ #263 #262)
#265 := (f4 #264)
#267 := (= #266 #265)
#279 := (or #277 #267)
#281 := (iff #279 #278)
#283 := (iff #278 #278)
#284 := [rewrite]: #283
#275 := (iff #267 #274)
#272 := (= #265 #271)
#269 := (= #264 #268)
#270 := [rewrite]: #269
#273 := [monotonicity #270]: #272
#276 := [monotonicity #273]: #275
#282 := [monotonicity #276]: #281
#285 := [trans #282 #284]: #281
#280 := [quant-inst #10 #14]: #279
#286 := [mp #280 #285]: #278
#599 := [unit-resolution #286 #240]: #274
#586 := [symm #599]: #585
#588 := (= f6 #271)
#17 := 3::Int
#18 := (f4 3::Int)
#616 := (= #18 #271)
#614 := (= 3::Int #268)
#504 := (= #268 3::Int)
#310 := (<= #263 1::Int)
#294 := (= #263 1::Int)
decl f9 :: (-> Int S3 S1)
decl f10 :: S3
#30 := f10
#288 := (f9 1::Int f10)
decl f1 :: S1
#4 := f1
#289 := (= f1 #288)
#290 := (not #289)
#533 := [hypothesis]: #290
#29 := (:var 0 Int)
#31 := (f9 #29 f10)
#241 := (pattern #31)
#35 := (= #29 3::Int)
#34 := (= #29 2::Int)
#33 := (= #29 1::Int)
#109 := (or #33 #34 #35)
#75 := (= f1 #31)
#114 := (iff #75 #109)
#242 := (forall (vars (?v0 Int)) (:pat #241) #114)
#117 := (forall (vars (?v0 Int)) #114)
#245 := (iff #117 #242)
#243 := (iff #114 #114)
#244 := [refl]: #243
#246 := [quant-intro #244]: #245
#164 := (~ #117 #117)
#162 := (~ #114 #114)
#163 := [refl]: #162
#165 := [nnf-pos #163]: #164
#36 := (or #34 #35)
#37 := (or #33 #36)
#32 := (= #31 f1)
#38 := (iff #32 #37)
#39 := (forall (vars (?v0 Int)) #38)
#120 := (iff #39 #117)
#84 := (= 3::Int #29)
#81 := (= 2::Int #29)
#87 := (or #81 #84)
#78 := (= 1::Int #29)
#90 := (or #78 #87)
#93 := (iff #75 #90)
#96 := (forall (vars (?v0 Int)) #93)
#118 := (iff #96 #117)
#115 := (iff #93 #114)
#112 := (iff #90 #109)
#110 := (iff #37 #109)
#111 := [rewrite]: #110
#107 := (iff #90 #37)
#105 := (iff #87 #36)
#101 := (iff #84 #35)
#102 := [rewrite]: #101
#99 := (iff #81 #34)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #102]: #105
#103 := (iff #78 #33)
#104 := [rewrite]: #103
#108 := [monotonicity #104 #106]: #107
#113 := [trans #108 #111]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#97 := (iff #39 #96)
#94 := (iff #38 #93)
#91 := (iff #37 #90)
#88 := (iff #36 #87)
#85 := (iff #35 #84)
#86 := [rewrite]: #85
#82 := (iff #34 #81)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#79 := (iff #33 #78)
#80 := [rewrite]: #79
#92 := [monotonicity #80 #89]: #91
#76 := (iff #32 #75)
#77 := [rewrite]: #76
#95 := [monotonicity #77 #92]: #94
#98 := [quant-intro #95]: #97
#121 := [trans #98 #119]: #120
#74 := [asserted]: #39
#122 := [mp #74 #121]: #117
#166 := [mp~ #122 #165]: #117
#247 := [mp #166 #246]: #242
#408 := (not #242)
#524 := (or #408 #289)
#536 := (= 1::Int 3::Int)
#537 := (= 1::Int 2::Int)
#535 := (= 1::Int 1::Int)
#538 := (or #535 #537 #536)
#539 := (iff #289 #538)
#525 := (or #408 #539)
#527 := (iff #525 #524)
#529 := (iff #524 #524)
#530 := [rewrite]: #529
#520 := (iff #539 #289)
#1 := true
#553 := (iff #289 true)
#521 := (iff #553 #289)
#522 := [rewrite]: #521
#554 := (iff #539 #553)
#551 := (iff #538 true)
#546 := (or true false false)
#549 := (iff #546 true)
#550 := [rewrite]: #549
#547 := (iff #538 #546)
#544 := (iff #536 false)
#545 := [rewrite]: #544
#542 := (iff #537 false)
#543 := [rewrite]: #542
#540 := (iff #535 true)
#541 := [rewrite]: #540
#548 := [monotonicity #541 #543 #545]: #547
#552 := [trans #548 #550]: #551
#555 := [monotonicity #552]: #554
#523 := [trans #555 #522]: #520
#528 := [monotonicity #523]: #527
#531 := [trans #528 #530]: #527
#526 := [quant-inst #9]: #525
#532 := [mp #526 #531]: #524
#534 := [unit-resolution #532 #247 #533]: false
#583 := [lemma #534]: #289
#295 := (or #290 #294)
#43 := (f4 #29)
#255 := (pattern #43)
#44 := (f8 #43)
#131 := (= #29 #44)
#138 := (not #75)
#139 := (or #138 #131)
#256 := (forall (vars (?v0 Int)) (:pat #241 #255) #139)
#144 := (forall (vars (?v0 Int)) #139)
#259 := (iff #144 #256)
#257 := (iff #139 #139)
#258 := [refl]: #257
#260 := [quant-intro #258]: #259
#174 := (~ #144 #144)
#172 := (~ #139 #139)
#173 := [refl]: #172
#175 := [nnf-pos #173]: #174
#45 := (= #44 #29)
#46 := (implies #32 #45)
#47 := (forall (vars (?v0 Int)) #46)
#145 := (iff #47 #144)
#142 := (iff #46 #139)
#135 := (implies #75 #131)
#140 := (iff #135 #139)
#141 := [rewrite]: #140
#136 := (iff #46 #135)
#133 := (iff #45 #131)
#134 := [rewrite]: #133
#137 := [monotonicity #77 #134]: #136
#143 := [trans #137 #141]: #142
#146 := [quant-intro #143]: #145
#130 := [asserted]: #47
#149 := [mp #130 #146]: #144
#176 := [mp~ #149 #175]: #144
#261 := [mp #176 #260]: #256
#298 := (not #256)
#299 := (or #298 #290 #294)
#287 := (= 1::Int #263)
#291 := (or #290 #287)
#300 := (or #298 #291)
#307 := (iff #300 #299)
#302 := (or #298 #295)
#305 := (iff #302 #299)
#306 := [rewrite]: #305
#303 := (iff #300 #302)
#296 := (iff #291 #295)
#292 := (iff #287 #294)
#293 := [rewrite]: #292
#297 := [monotonicity #293]: #296
#304 := [monotonicity #297]: #303
#308 := [trans #304 #306]: #307
#301 := [quant-inst #9]: #300
#309 := [mp #301 #308]: #299
#600 := [unit-resolution #309 #261]: #295
#601 := [unit-resolution #600 #583]: #294
#422 := (not #294)
#602 := (or #422 #310)
#603 := [th-lemma arith triangle-eq]: #602
#604 := [unit-resolution #603 #601]: #310
#311 := (>= #263 1::Int)
#556 := (not #311)
#557 := [hypothesis]: #556
#558 := (or #422 #311)
#559 := [th-lemma arith triangle-eq]: #558
#560 := [unit-resolution #559 #557]: #422
#396 := (= #263 3::Int)
#425 := (not #396)
#419 := (>= #263 3::Int)
#561 := (not #419)
#562 := (or #561 #311)
#563 := [th-lemma arith farkas 1 1]: #562
#564 := [unit-resolution #563 #557]: #561
#565 := (or #425 #419)
#566 := [th-lemma arith triangle-eq]: #565
#567 := [unit-resolution #566 #564]: #425
#397 := (= #263 2::Int)
#428 := (not #397)
#421 := (>= #263 2::Int)
#568 := (not #421)
#569 := (or #568 #311)
#570 := [th-lemma arith farkas 1 1]: #569
#571 := [unit-resolution #570 #557]: #568
#572 := (or #428 #421)
#573 := [th-lemma arith triangle-eq]: #572
#574 := [unit-resolution #573 #571]: #428
#402 := (or #294 #396 #397)
#389 := (f9 #263 f10)
#390 := (= f1 #389)
#405 := (iff #390 #402)
#409 := (or #408 #405)
#400 := (or #294 #397 #396)
#401 := (iff #390 #400)
#410 := (or #408 #401)
#412 := (iff #410 #409)
#414 := (iff #409 #409)
#415 := [rewrite]: #414
#406 := (iff #401 #405)
#403 := (iff #400 #402)
#404 := [rewrite]: #403
#407 := [monotonicity #404]: #406
#413 := [monotonicity #407]: #412
#416 := [trans #413 #415]: #412
#411 := [quant-inst #263]: #410
#417 := [mp #411 #416]: #409
#575 := [unit-resolution #417 #247]: #405
#434 := (not #405)
#577 := (or #434 #402)
#248 := (pattern #24)
#40 := (f9 #24 f10)
#124 := (= f1 #40)
#249 := (forall (vars (?v0 S2)) (:pat #248) #124)
#127 := (forall (vars (?v0 S2)) #124)
#252 := (iff #127 #249)
#250 := (iff #124 #124)
#251 := [refl]: #250
#253 := [quant-intro #251]: #252
#169 := (~ #127 #127)
#167 := (~ #124 #124)
#168 := [refl]: #167
#170 := [nnf-pos #168]: #169
#41 := (= #40 f1)
#42 := (forall (vars (?v0 S2)) #41)
#128 := (iff #42 #127)
#125 := (iff #41 #124)
#126 := [rewrite]: #125
#129 := [quant-intro #126]: #128
#123 := [asserted]: #42
#132 := [mp #123 #129]: #127
#171 := [mp~ #132 #170]: #127
#254 := [mp #171 #253]: #249
#393 := (not #249)
#394 := (or #393 #390)
#395 := [quant-inst #10]: #394
#576 := [unit-resolution #395 #254]: #390
#437 := (not #390)
#438 := (or #434 #437 #402)
#439 := [def-axiom]: #438
#578 := [unit-resolution #439 #576]: #577
#579 := [unit-resolution #578 #575]: #402
#431 := (not #402)
#432 := (or #431 #294 #396 #397)
#433 := [def-axiom]: #432
#580 := [unit-resolution #433 #579]: #402
#581 := [unit-resolution #580 #574 #567 #560]: false
#582 := [lemma #581]: #311
#334 := (<= #262 2::Int)
#319 := (= #262 2::Int)
#313 := (f9 2::Int f10)
#314 := (= f1 #313)
#315 := (not #314)
#654 := [hypothesis]: #315
#645 := (or #408 #314)
#621 := (= 2::Int 3::Int)
#622 := (= 2::Int 2::Int)
#620 := (= 2::Int 1::Int)
#623 := (or #620 #622 #621)
#624 := (iff #314 #623)
#646 := (or #408 #624)
#648 := (iff #646 #645)
#650 := (iff #645 #645)
#651 := [rewrite]: #650
#643 := (iff #624 #314)
#638 := (iff #314 true)
#641 := (iff #638 #314)
#642 := [rewrite]: #641
#639 := (iff #624 #638)
#636 := (iff #623 true)
#631 := (or false true false)
#634 := (iff #631 true)
#635 := [rewrite]: #634
#632 := (iff #623 #631)
#629 := (iff #621 false)
#630 := [rewrite]: #629
#627 := (iff #622 true)
#628 := [rewrite]: #627
#625 := (iff #620 false)
#626 := [rewrite]: #625
#633 := [monotonicity #626 #628 #630]: #632
#637 := [trans #633 #635]: #636
#640 := [monotonicity #637]: #639
#644 := [trans #640 #642]: #643
#649 := [monotonicity #644]: #648
#652 := [trans #649 #651]: #648
#647 := [quant-inst #13]: #646
#653 := [mp #647 #652]: #645
#655 := [unit-resolution #653 #247 #654]: false
#656 := [lemma #655]: #314
#320 := (or #315 #319)
#323 := (or #298 #315 #319)
#312 := (= 2::Int #262)
#316 := (or #315 #312)
#324 := (or #298 #316)
#331 := (iff #324 #323)
#326 := (or #298 #320)
#329 := (iff #326 #323)
#330 := [rewrite]: #329
#327 := (iff #324 #326)
#321 := (iff #316 #320)
#317 := (iff #312 #319)
#318 := [rewrite]: #317
#322 := [monotonicity #318]: #321
#328 := [monotonicity #322]: #327
#332 := [trans #328 #330]: #331
#325 := [quant-inst #13]: #324
#333 := [mp #325 #332]: #323
#605 := [unit-resolution #333 #261]: #320
#606 := [unit-resolution #605 #656]: #319
#477 := (not #319)
#607 := (or #477 #334)
#608 := [th-lemma arith triangle-eq]: #607
#609 := [unit-resolution #608 #606]: #334
#335 := (>= #262 2::Int)
#610 := (or #477 #335)
#611 := [th-lemma arith triangle-eq]: #610
#612 := [unit-resolution #611 #606]: #335
#613 := [th-lemma arith eq-propagate -1 -1 -1 -1 #612 #609 #582 #604]: #504
#615 := [symm #613]: #614
#617 := [monotonicity #615]: #616
#19 := (= f6 #18)
#72 := [asserted]: #19
#589 := [trans #72 #617]: #588
#591 := [trans #589 #586]: #590
#592 := [trans #591 #587]: #148
#152 := (not #148)
#49 := (= #48 f6)
#50 := (not #49)
#153 := (iff #50 #152)
#150 := (iff #49 #148)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#147 := [asserted]: #50
#157 := [mp #147 #154]: #152
[unit-resolution #157 #592]: false
unsat
e90da59d7c0ef5b4100b7b5941ef59b730edfa8b 1 0
unsat
b8fa35f9ffb93b572016b3a7093d90ff2dc40803 1 0
unsat
67a18ee4a41e7117d729538d363dd01cbfa4400f 1 0
unsat
29980cc57d37b1e6a91568b59eb645177c64332b 1 0
unsat
dd72068dbc111520c8cda49beba061234668dba7 1 0
unsat
bb1b1bf771dfd4a69322f6b2c9c31e57298bea9e 1 0
unsat
f591b022c531a1890a327600010c782c78467eea 1 0
unsat
09e7a23356dd5244a2517b62d3c6c28d99ae59e0 1 0
unsat
7e5bac87b0ad340d97ecc55bcd3e3e6d37b536c9 1 0
unsat
353f7e426c920cff9e100b30ce094cb37c8e66ef 1 0
unsat
f963333a6744a2101618437d210242d060c0ac5f 1 0
unsat
d01b3542d6a35de6bfb4aabf081dc52de8396d03 1 0
unsat
e4b3e00cd29c16e895ffff3cac3d892b78dd9d59 1 0
unsat
92350fc2dc39b61c7b65a45e3abab78db9321ed5 1 0
unsat
d1a2878c51a9f44dc2f50ee9dd016f837f75dee3 1 0
unsat
4b51e5348b328fdbe195bfc6dbb2d5f6e8e086af 1 0
unsat
9960e2fa518de05dd4c22ebef61695106b67bab7 1 0
unsat
d76cad4f4fe52cdb217d0d7a4c83030e5fa9bc16 1 0
unsat
7701f25b2b2e492d6188369ec45f452bde984707 1 0
unsat
9a74b65514398a03fd5460e9b464fc4f5bb5b307 1 0
unsat
f80447a4f9b0f86fa11f2153b5158216a61f7a84 1 0
unsat
458218ced7c9e0f75f06741e621b45de73ff0cd1 1 0
unsat
14345cc17c0b30096f6adb793fe85b488a534926 1 0
unsat
aef4860d2ed0c8d87f72946dc202dcd55f3ca531 1 0
unsat
8257b3938dcc8cb19f272f67be8d362ad144f382 1 0
unsat
60a21c8506be79a307d9799d9dfff80c0c772737 1 0
unsat
83d73aee1e57b6bce6f0ec35dfd1ee35d30d33a1 1 0
unsat
553daa4feeb8e9fdfd2f7bcfa581d9f0c1549602 1 0
unsat
d403b2341400efa6e1957a6278e319822955eb05 1 0
unsat
33032b5811c88e9f094d892b2a819fd19687b4da 1 0
unsat
af7864ebe2c19275b1474fcca68f68b40df07ee6 1 0
unsat
f0be9c3035095639c56feef5476f5ff5d0ee0300 1 0
unsat
be181562b775b67e969c16b78a52a45719fecfc8 1 0
unsat
e4212f39c43f0c68b93f2fa581abc8dc5b04f3dc 1 0
unsat
45a80c71e5479b14c918c2ca636ce6a9093c7d91 1 0
unsat
5c358740eab4a6d03dfdc04d4f4ace62d00a397c 1 0
unsat
0cb2094ef75f1257300f2250bf51922ba0fc3eb4 1 0
unsat
ee7744e271c9a6a2fec104da7e0da7381f74a42b 1 0
unsat
509b9e96fe074cbcbee283f62b2e6df84f698cac 1 0
unsat
817280eb269b77adcbb4245ba3f6e9840888526e 1 0
unsat
9f0e8a08f3bda5c750992a9feaa96f513f7e38ad 1 0
unsat
93dac8884c5cd6ad5574a943f98c41bd92476bb2 1 0
unsat
46f948909b4f895c551d3cd1088294f8741c9b04 1 0
unsat
199918281288b75f2e2685c34a7c9417c1a0fe8f 1 0
unsat
182c59ee9cff8516467bee4139ec0b725d34bea4 1 0
unsat
82ca1ca20ab4808c4ae7a1caec7420902013622a 1 0
unsat
6e3dbdb2dcf0542a229dae87275558c052685051 1 0
unsat
a55f212df57bb2f04fc56139adb1e6560632f9d3 1 0
unsat
1a8fb5088e7f67909ddfef3f916ce9a46f24aa6e 1 0
unsat
0d6c154e2af0c7b5235b4452bd2ff759befe4467 1 0
unsat
782376c8bcd4bfd5ff0740cfd50cd7d65b48e694 1 0
unsat
2fa5afe46742045fc9ae2c785161c40cd3eca8b0 1 0
unsat
49462927b92e2fe852e19ddabb722de885a6169e 1 0
unsat
4f884cc648fe339fa52f195bb2ef09de0043846d 1 0
unsat
11d8c5d16e3dccca0ac06212a5289df04eac0cf0 1 0
unsat
030f4a4becd7bcd4096d97c72b2c9fcdad6c8545 1 0
unsat
67cb8659b90bbf301d02aab19df117412048c996 1 0
unsat
f647fab40fc301b72eb10ef98660c1294aab2896 91 0
#2 := false
decl f3 :: (-> S2 S3 S4 S3 S4)
decl f6 :: S3
#25 := f6
decl f7 :: S4
#26 := f7
decl f5 :: S2
#24 := f5
#27 := (f3 f5 f6 f7 f6)
#71 := (= f7 #27)
#75 := (not #71)
#28 := (= #27 f7)
#29 := (not #28)
#76 := (iff #29 #75)
#73 := (iff #28 #71)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#70 := [asserted]: #29
#80 := [mp #70 #77]: #75
#11 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#12 := (f3 #8 #9 #10 #11)
#574 := (pattern #12)
decl f4 :: (-> S2 S3 S4)
#14 := (f4 #8 #11)
#95 := (= #12 #14)
#94 := (= #10 #12)
#50 := (= #9 #11)
#84 := (ite #50 #94 #95)
#575 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #574) #84)
#87 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #84)
#578 := (iff #87 #575)
#576 := (iff #84 #84)
#577 := [refl]: #576
#579 := [quant-intro #577]: #578
#53 := (ite #50 #10 #14)
#56 := (= #12 #53)
#59 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #56)
#96 := (iff #59 #87)
#85 := (iff #56 #84)
#86 := [rewrite]: #85
#97 := [quant-intro #86]: #96
#90 := (~ #59 #59)
#88 := (~ #56 #56)
#89 := [refl]: #88
#91 := [nnf-pos #89]: #90
#13 := (= #11 #9)
#15 := (ite #13 #10 #14)
#16 := (= #12 #15)
#17 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #16)
#60 := (iff #17 #59)
#57 := (iff #16 #56)
#54 := (= #15 #53)
#51 := (iff #13 #50)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#61 := [quant-intro #58]: #60
#49 := [asserted]: #17
#64 := [mp #49 #61]: #59
#79 := [mp~ #64 #91]: #59
#98 := [mp #79 #97]: #87
#580 := [mp #98 #579]: #575
#229 := (not #575)
#566 := (or #229 #71)
#156 := (f4 f5 f6)
#243 := (= #27 #156)
#157 := (= f6 f6)
#244 := (ite #157 #71 #243)
#568 := (or #229 #244)
#355 := (iff #568 #566)
#234 := (iff #566 #566)
#235 := [rewrite]: #234
#246 := (iff #244 #71)
#1 := true
#236 := (ite true #71 #243)
#176 := (iff #236 #71)
#249 := [rewrite]: #176
#247 := (iff #244 #236)
#158 := (iff #157 true)
#245 := [rewrite]: #158
#248 := [monotonicity #245]: #247
#250 := [trans #248 #249]: #246
#562 := [monotonicity #250]: #355
#569 := [trans #562 #235]: #355
#223 := [quant-inst #24 #25 #26 #25]: #568
#570 := [mp #223 #569]: #566
[unit-resolution #570 #580 #80]: false
unsat
af1534012c3020b480c853afaac6d90a71a2c734 85 0
#2 := false
decl f4 :: (-> S2 S3 S4)
decl f6 :: S3
#25 := f6
decl f7 :: S2
#28 := f7
#31 := (f4 f7 f6)
decl f3 :: (-> S2 S3 S4 S3 S4)
decl f8 :: S4
#29 := f8
decl f5 :: S3
#24 := f5
#30 := (f3 f7 f5 f8 f6)
#32 := (= #30 #31)
#164 := (= f8 #30)
#26 := (= f5 f6)
#251 := (ite #26 #164 #32)
#255 := (not #251)
#84 := (not #32)
#76 := (or #26 #32)
#80 := (not #76)
#27 := (not #26)
#33 := (implies #27 #32)
#34 := (not #33)
#81 := (iff #34 #80)
#78 := (iff #33 #76)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#75 := [asserted]: #34
#85 := [mp #75 #82]: #80
#86 := [not-or-elim #85]: #84
#83 := [not-or-elim #85]: #27
#257 := (or #255 #26 #32)
#254 := [def-axiom]: #257
#165 := [unit-resolution #254 #83 #86]: #255
#11 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#12 := (f3 #8 #9 #10 #11)
#582 := (pattern #12)
#14 := (f4 #8 #11)
#105 := (= #12 #14)
#104 := (= #10 #12)
#55 := (= #9 #11)
#92 := (ite #55 #104 #105)
#583 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #582) #92)
#97 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #92)
#586 := (iff #97 #583)
#584 := (iff #92 #92)
#585 := [refl]: #584
#587 := [quant-intro #585]: #586
#58 := (ite #55 #10 #14)
#61 := (= #12 #58)
#64 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #61)
#94 := (iff #64 #97)
#93 := (iff #61 #92)
#96 := [rewrite]: #93
#95 := [quant-intro #96]: #94
#100 := (~ #64 #64)
#98 := (~ #61 #61)
#99 := [refl]: #98
#101 := [nnf-pos #99]: #100
#13 := (= #11 #9)
#15 := (ite #13 #10 #14)
#16 := (= #12 #15)
#17 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #16)
#65 := (iff #17 #64)
#62 := (iff #16 #61)
#59 := (= #15 #58)
#56 := (iff #13 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#66 := [quant-intro #63]: #65
#54 := [asserted]: #17
#69 := [mp #54 #66]: #64
#88 := [mp~ #69 #101]: #64
#106 := [mp #88 #95]: #97
#588 := [mp #106 #587]: #583
#166 := (not #583)
#253 := (or #166 #251)
#244 := [quant-inst #28 #24 #29 #25]: #253
[unit-resolution #244 #588 #165]: false
unsat
57b1778e367cf6f6921505d440f3fc4fb8332587 158 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f5 :: S3
#26 := f5
decl f4 :: (-> S2 S3 S4 S2)
decl f9 :: S4
#33 := f9
decl f6 :: S3
#27 := f6
decl f8 :: S4
#31 := f8
decl f7 :: S2
#30 := f7
#32 := (f4 f7 f5 f8)
#34 := (f4 #32 f6 f9)
#35 := (f3 #34 f5)
#80 := (= f8 #35)
#176 := (f3 #32 f5)
#263 := (= #35 #176)
#580 := (iff #263 #80)
#217 := (iff #80 #263)
#570 := (= #176 #35)
#577 := (iff #570 #263)
#579 := [commutativity]: #577
#576 := (iff #80 #570)
#242 := (= f8 #176)
#21 := (:var 0 S4)
#20 := (:var 1 S3)
#19 := (:var 2 S2)
#22 := (f4 #19 #20 #21)
#601 := (pattern #22)
#23 := (f3 #22 #20)
#72 := (= #21 #23)
#603 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #601) #72)
#76 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #72)
#602 := (iff #76 #603)
#605 := (iff #603 #603)
#606 := [rewrite]: #605
#604 := [rewrite]: #602
#607 := [trans #604 #606]: #602
#102 := (~ #76 #76)
#101 := (~ #72 #72)
#114 := [refl]: #101
#103 := [nnf-pos #114]: #102
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #24)
#77 := (iff #25 #76)
#74 := (iff #24 #72)
#75 := [rewrite]: #74
#78 := [quant-intro #75]: #77
#71 := [asserted]: #25
#81 := [mp #71 #78]: #76
#115 := [mp~ #81 #103]: #76
#608 := [mp #115 #607]: #603
#569 := (not #603)
#230 := (or #569 #242)
#231 := [quant-inst #30 #26 #31]: #230
#575 := [unit-resolution #231 #608]: #242
#212 := [monotonicity #575]: #576
#218 := [trans #212 #579]: #217
#578 := [symm #218]: #580
#177 := (= f9 #35)
#28 := (= f5 f6)
#267 := (ite #28 #177 #263)
#12 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#11 := (f4 #8 #9 #10)
#13 := (f3 #11 #12)
#594 := (pattern #13)
#15 := (f3 #8 #12)
#117 := (= #13 #15)
#116 := (= #10 #13)
#59 := (= #9 #12)
#104 := (ite #59 #116 #117)
#595 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #594) #104)
#109 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #104)
#598 := (iff #109 #595)
#596 := (iff #104 #104)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#62 := (ite #59 #10 #15)
#65 := (= #13 #62)
#68 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #65)
#106 := (iff #68 #109)
#105 := (iff #65 #104)
#108 := [rewrite]: #105
#107 := [quant-intro #108]: #106
#112 := (~ #68 #68)
#110 := (~ #65 #65)
#111 := [refl]: #110
#113 := [nnf-pos #111]: #112
#14 := (= #12 #9)
#16 := (ite #14 #10 #15)
#17 := (= #13 #16)
#18 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #17)
#69 := (iff #18 #68)
#66 := (iff #17 #65)
#63 := (= #16 #62)
#60 := (iff #14 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [quant-intro #67]: #69
#58 := [asserted]: #18
#73 := [mp #58 #70]: #68
#100 := [mp~ #73 #113]: #68
#118 := [mp #100 #107]: #109
#600 := [mp #118 #599]: #595
#269 := (not #595)
#266 := (or #269 #267)
#264 := (= f6 f5)
#178 := (ite #264 #177 #263)
#270 := (or #269 #178)
#586 := (iff #270 #266)
#243 := (iff #266 #266)
#375 := [rewrite]: #243
#268 := (iff #178 #267)
#265 := (iff #264 #28)
#256 := [rewrite]: #265
#196 := [monotonicity #256]: #268
#588 := [monotonicity #196]: #586
#582 := [trans #588 #375]: #586
#249 := [quant-inst #32 #27 #33 #26]: #270
#254 := [mp #249 #582]: #266
#232 := [unit-resolution #254 #600]: #267
#255 := (not #267)
#233 := (or #255 #263)
#29 := (not #28)
#87 := (or #28 #80)
#92 := (not #87)
#36 := (= #35 f8)
#37 := (implies #29 #36)
#38 := (not #37)
#93 := (iff #38 #92)
#90 := (iff #37 #87)
#84 := (implies #29 #80)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #37 #84)
#82 := (iff #36 #80)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [monotonicity #91]: #93
#79 := [asserted]: #38
#97 := [mp #79 #94]: #92
#95 := [not-or-elim #97]: #29
#591 := (or #255 #28 #263)
#592 := [def-axiom]: #591
#573 := [unit-resolution #592 #95]: #233
#574 := [unit-resolution #573 #232]: #263
#581 := [mp #574 #578]: #80
#96 := (not #80)
#98 := [not-or-elim #97]: #96
[unit-resolution #98 #581]: false
unsat
c5924477e9186eb5df53c29cfb676c83a60e811c 111 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f6 :: S3
#27 := f6
decl f4 :: (-> S2 S3 S4 S2)
decl f9 :: S4
#33 := f9
decl f8 :: S4
#31 := f8
decl f5 :: S3
#26 := f5
decl f7 :: S2
#30 := f7
#32 := (f4 f7 f5 f8)
#34 := (f4 #32 f6 f9)
#35 := (f3 #34 f6)
#80 := (= f9 #35)
#96 := (not #80)
#28 := (= f5 f6)
#87 := (or #28 #80)
#92 := (not #87)
#36 := (= #35 f9)
#29 := (not #28)
#37 := (implies #29 #36)
#38 := (not #37)
#93 := (iff #38 #92)
#90 := (iff #37 #87)
#84 := (implies #29 #80)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #37 #84)
#82 := (iff #36 #80)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [monotonicity #91]: #93
#79 := [asserted]: #38
#97 := [mp #79 #94]: #92
#98 := [not-or-elim #97]: #96
#12 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#11 := (f4 #8 #9 #10)
#13 := (f3 #11 #12)
#594 := (pattern #13)
#15 := (f3 #8 #12)
#117 := (= #13 #15)
#116 := (= #10 #13)
#59 := (= #9 #12)
#104 := (ite #59 #116 #117)
#595 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #594) #104)
#109 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #104)
#598 := (iff #109 #595)
#596 := (iff #104 #104)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#62 := (ite #59 #10 #15)
#65 := (= #13 #62)
#68 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #65)
#106 := (iff #68 #109)
#105 := (iff #65 #104)
#108 := [rewrite]: #105
#107 := [quant-intro #108]: #106
#112 := (~ #68 #68)
#110 := (~ #65 #65)
#111 := [refl]: #110
#113 := [nnf-pos #111]: #112
#14 := (= #12 #9)
#16 := (ite #14 #10 #15)
#17 := (= #13 #16)
#18 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #17)
#69 := (iff #18 #68)
#66 := (iff #17 #65)
#63 := (= #16 #62)
#60 := (iff #14 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [quant-intro #67]: #69
#58 := [asserted]: #18
#73 := [mp #58 #70]: #68
#100 := [mp~ #73 #113]: #68
#118 := [mp #100 #107]: #109
#600 := [mp #118 #599]: #595
#249 := (not #595)
#586 := (or #249 #80)
#176 := (f3 #32 f6)
#263 := (= #35 #176)
#177 := (= f6 f6)
#264 := (ite #177 #80 #263)
#588 := (or #249 #264)
#375 := (iff #588 #586)
#254 := (iff #586 #586)
#255 := [rewrite]: #254
#266 := (iff #264 #80)
#1 := true
#256 := (ite true #80 #263)
#196 := (iff #256 #80)
#269 := [rewrite]: #196
#267 := (iff #264 #256)
#178 := (iff #177 true)
#265 := [rewrite]: #178
#268 := [monotonicity #265]: #267
#270 := [trans #268 #269]: #266
#582 := [monotonicity #270]: #375
#589 := [trans #582 #255]: #375
#243 := [quant-inst #32 #27 #33 #27]: #588
#590 := [mp #243 #589]: #586
[unit-resolution #590 #600 #98]: false
unsat
7e28540fd0d4f5814439be9d6e362d0c1457f76e 123 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f5 :: S3
#26 := f5
decl f4 :: (-> S2 S3 S4 S2)
decl f9 :: S4
#32 := f9
decl f6 :: S3
#27 := f6
decl f8 :: S4
#30 := f8
decl f7 :: S2
#29 := f7
#31 := (f4 f7 f5 f8)
#33 := (f4 #31 f6 f9)
#34 := (f3 #33 f5)
#79 := (= f9 #34)
#263 := (f3 #33 f6)
#571 := (= #263 #34)
#585 := (= #34 #263)
#28 := (= f5 f6)
#86 := (not #28)
#87 := (or #86 #79)
#92 := (not #87)
#35 := (= #34 f9)
#36 := (implies #28 #35)
#37 := (not #36)
#93 := (iff #37 #92)
#90 := (iff #36 #87)
#83 := (implies #28 #79)
#88 := (iff #83 #87)
#89 := [rewrite]: #88
#84 := (iff #36 #83)
#81 := (iff #35 #79)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#91 := [trans #85 #89]: #90
#94 := [monotonicity #91]: #93
#78 := [asserted]: #37
#97 := [mp #78 #94]: #92
#95 := [not-or-elim #97]: #28
#233 := [monotonicity #95]: #585
#572 := [symm #233]: #571
#264 := (= f9 #263)
#12 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#11 := (f4 #8 #9 #10)
#13 := (f3 #11 #12)
#594 := (pattern #13)
#15 := (f3 #8 #12)
#117 := (= #13 #15)
#116 := (= #10 #13)
#58 := (= #9 #12)
#104 := (ite #58 #116 #117)
#595 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #594) #104)
#109 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #104)
#598 := (iff #109 #595)
#596 := (iff #104 #104)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#61 := (ite #58 #10 #15)
#64 := (= #13 #61)
#67 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #64)
#106 := (iff #67 #109)
#105 := (iff #64 #104)
#108 := [rewrite]: #105
#107 := [quant-intro #108]: #106
#112 := (~ #67 #67)
#110 := (~ #64 #64)
#111 := [refl]: #110
#113 := [nnf-pos #111]: #112
#14 := (= #12 #9)
#16 := (ite #14 #10 #15)
#17 := (= #13 #16)
#18 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #17)
#68 := (iff #18 #67)
#65 := (iff #17 #64)
#62 := (= #16 #61)
#59 := (iff #14 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#69 := [quant-intro #66]: #68
#57 := [asserted]: #18
#72 := [mp #57 #69]: #67
#100 := [mp~ #72 #113]: #67
#118 := [mp #100 #107]: #109
#600 := [mp #118 #599]: #595
#582 := (not #595)
#254 := (or #582 #264)
#176 := (f3 #31 f6)
#177 := (= #263 #176)
#178 := (= f6 f6)
#265 := (ite #178 #264 #177)
#255 := (or #582 #265)
#590 := (iff #255 #254)
#592 := (iff #254 #254)
#587 := [rewrite]: #592
#243 := (iff #265 #264)
#268 := (= #176 #263)
#1 := true
#266 := (ite true #264 #268)
#586 := (iff #266 #264)
#588 := [rewrite]: #586
#270 := (iff #265 #266)
#196 := (iff #177 #268)
#269 := [rewrite]: #196
#256 := (iff #178 true)
#267 := [rewrite]: #256
#249 := [monotonicity #267 #269]: #270
#375 := [trans #249 #588]: #243
#591 := [monotonicity #375]: #590
#593 := [trans #591 #587]: #590
#589 := [quant-inst #31 #27 #32 #27]: #255
#583 := [mp #589 #593]: #254
#242 := [unit-resolution #583 #600]: #264
#573 := [trans #242 #572]: #79
#96 := (not #79)
#98 := [not-or-elim #97]: #96
[unit-resolution #98 #573]: false
unsat
6e80c9c78d8fedc6d33345078567183b7c70457d 190 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f7 :: S3
#28 := f7
decl f8 :: S2
#30 := f8
#36 := (f3 f8 f7)
decl f4 :: (-> S2 S3 S4 S2)
decl f10 :: S4
#33 := f10
decl f6 :: S3
#27 := f6
decl f9 :: S4
#31 := f9
decl f5 :: S3
#26 := f5
#32 := (f4 f8 f5 f9)
#34 := (f4 #32 f6 f10)
#35 := (f3 #34 f7)
#37 := (= #35 #36)
#586 := (f3 #32 f5)
#570 := (f4 f8 f5 #586)
#206 := (f3 #570 f7)
#211 := (= #206 #36)
#562 := (= #36 #206)
#572 := (= #206 #586)
#171 := (= f5 f7)
#285 := (ite #171 #572 #562)
#12 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#11 := (f4 #8 #9 #10)
#13 := (f3 #11 #12)
#588 := (pattern #13)
#15 := (f3 #8 #12)
#111 := (= #13 #15)
#110 := (= #10 #13)
#60 := (= #9 #12)
#98 := (ite #60 #110 #111)
#589 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #588) #98)
#103 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #98)
#592 := (iff #103 #589)
#590 := (iff #98 #98)
#591 := [refl]: #590
#593 := [quant-intro #591]: #592
#63 := (ite #60 #10 #15)
#66 := (= #13 #63)
#69 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #66)
#100 := (iff #69 #103)
#99 := (iff #66 #98)
#102 := [rewrite]: #99
#101 := [quant-intro #102]: #100
#106 := (~ #69 #69)
#104 := (~ #66 #66)
#105 := [refl]: #104
#107 := [nnf-pos #105]: #106
#14 := (= #12 #9)
#16 := (ite #14 #10 #15)
#17 := (= #13 #16)
#18 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #17)
#70 := (iff #18 #69)
#67 := (iff #17 #66)
#64 := (= #16 #63)
#61 := (iff #14 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#71 := [quant-intro #68]: #70
#59 := [asserted]: #18
#74 := [mp #59 #71]: #69
#94 := [mp~ #74 #107]: #69
#112 := [mp #94 #101]: #103
#594 := [mp #112 #593]: #589
#587 := (not #589)
#287 := (or #587 #285)
#212 := (= #586 #206)
#574 := (ite #171 #212 #211)
#178 := (or #587 #574)
#558 := (iff #178 #287)
#281 := (iff #287 #287)
#555 := [rewrite]: #281
#286 := (iff #574 #285)
#268 := (iff #211 #562)
#284 := [rewrite]: #268
#575 := (iff #212 #572)
#561 := [rewrite]: #575
#272 := [monotonicity #561 #284]: #286
#280 := [monotonicity #272]: #558
#559 := [trans #280 #555]: #558
#557 := [quant-inst #30 #26 #586 #28]: #178
#556 := [mp #557 #559]: #287
#516 := [unit-resolution #556 #594]: #285
#560 := (not #285)
#507 := (or #560 #562)
#258 := (not #171)
#172 := (= f6 f7)
#259 := (not #172)
#170 := (= f5 f6)
#257 := (not #170)
#250 := (and #257 #258 #259)
#29 := (distinct f5 f6 f7)
#81 := (not #29)
#83 := (or #81 #37)
#86 := (not #83)
#38 := (implies #29 #37)
#39 := (not #38)
#87 := (iff #39 #86)
#84 := (iff #38 #83)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#80 := [asserted]: #39
#91 := [mp #80 #88]: #86
#89 := [not-or-elim #91]: #29
#237 := (or #81 #250)
#369 := [def-axiom]: #237
#505 := [unit-resolution #369 #89]: #250
#261 := (not #250)
#263 := (or #261 #258)
#260 := [def-axiom]: #263
#506 := [unit-resolution #260 #505]: #258
#271 := (or #560 #171 #562)
#273 := [def-axiom]: #271
#508 := [unit-resolution #273 #506]: #507
#502 := [unit-resolution #508 #516]: #562
#486 := [symm #502]: #211
#487 := (= #35 #206)
#249 := (f3 #32 f7)
#495 := (= #249 #206)
#498 := (= #206 #249)
#515 := (= #570 #32)
#513 := (= #586 f9)
#581 := (= f9 #586)
#21 := (:var 0 S4)
#20 := (:var 1 S3)
#19 := (:var 2 S2)
#22 := (f4 #19 #20 #21)
#595 := (pattern #22)
#23 := (f3 #22 #20)
#73 := (= #21 #23)
#597 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #595) #73)
#77 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #73)
#596 := (iff #77 #597)
#599 := (iff #597 #597)
#600 := [rewrite]: #599
#598 := [rewrite]: #596
#601 := [trans #598 #600]: #596
#96 := (~ #77 #77)
#95 := (~ #73 #73)
#108 := [refl]: #95
#97 := [nnf-pos #108]: #96
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #24)
#78 := (iff #25 #77)
#75 := (iff #24 #73)
#76 := [rewrite]: #75
#79 := [quant-intro #76]: #78
#72 := [asserted]: #25
#82 := [mp #72 #79]: #77
#109 := [mp~ #82 #97]: #77
#602 := [mp #109 #601]: #597
#568 := (not #597)
#569 := (or #568 #581)
#564 := [quant-inst #30 #26 #31]: #569
#503 := [unit-resolution #564 #602]: #581
#514 := [symm #503]: #513
#511 := [monotonicity #514]: #515
#499 := [monotonicity #511]: #498
#500 := [symm #499]: #495
#583 := (= #35 #249)
#584 := (= f10 #35)
#585 := (ite #172 #584 #583)
#577 := (or #587 #585)
#235 := [quant-inst #32 #27 #33 #28]: #577
#509 := [unit-resolution #235 #594]: #585
#240 := (not #585)
#494 := (or #240 #583)
#264 := (or #261 #259)
#243 := [def-axiom]: #264
#493 := [unit-resolution #243 #505]: #259
#579 := (or #240 #172 #583)
#220 := [def-axiom]: #579
#496 := [unit-resolution #220 #493]: #494
#497 := [unit-resolution #496 #509]: #583
#489 := [trans #497 #500]: #487
#490 := [trans #489 #486]: #37
#90 := (not #37)
#92 := [not-or-elim #91]: #90
[unit-resolution #92 #490]: false
unsat
a8479ddc219a8a1f70834d2e3bfa9595c2e54d48 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f9 :: (-> S8 S1)
decl f10 :: S8
#41 := f10
#42 := (f9 f10)
#43 := (= #42 f1)
#44 := (iff #43 #43)
#45 := (not #44)
#140 := (iff #45 false)
#1 := true
#135 := (not true)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #45 #135)
#133 := (iff #44 true)
#124 := (= f1 #42)
#128 := (iff #124 #124)
#131 := (iff #128 true)
#132 := [rewrite]: #131
#129 := (iff #44 #128)
#126 := (iff #43 #124)
#127 := [rewrite]: #126
#130 := [monotonicity #127 #127]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134]: #136
#141 := [trans #137 #139]: #140
#123 := [asserted]: #45
[mp #123 #141]: false
unsat
4a8e2abc2ad72bd9865553c33c10577508b41462 58 0
#2 := false
decl f8 :: (-> S7 S1)
decl f9 :: S7
#41 := f9
#42 := (f8 f9)
decl f1 :: S1
#4 := f1
#124 := (= f1 #42)
#43 := (= #42 f1)
#44 := (not #43)
#45 := (not #44)
#136 := (iff #45 #124)
#128 := (not #124)
#131 := (not #128)
#134 := (iff #131 #124)
#135 := [rewrite]: #134
#132 := (iff #45 #131)
#129 := (iff #44 #128)
#126 := (iff #43 #124)
#127 := [rewrite]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#137 := [trans #133 #135]: #136
#123 := [asserted]: #45
#140 := [mp #123 #137]: #124
#36 := (:var 0 S7)
#37 := (f8 #36)
#669 := (pattern #37)
#113 := (= f1 #37)
#117 := (not #113)
#670 := (forall (vars (?v0 S7)) (:pat #669) #117)
#120 := (forall (vars (?v0 S7)) #117)
#673 := (iff #120 #670)
#671 := (iff #117 #117)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#146 := (~ #120 #120)
#161 := (~ #117 #117)
#162 := [refl]: #161
#147 := [nnf-pos #162]: #146
#38 := (= #37 f1)
#39 := (not #38)
#40 := (forall (vars (?v0 S7)) #39)
#121 := (iff #40 #120)
#118 := (iff #39 #117)
#115 := (iff #38 #113)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#112 := [asserted]: #40
#125 := [mp #112 #122]: #120
#163 := [mp~ #125 #147]: #120
#675 := [mp #163 #674]: #670
#231 := (not #670)
#318 := (or #231 #128)
#232 := [quant-inst #41]: #318
[unit-resolution #232 #675 #140]: false
unsat
091bf3e425fe9e8c8440218eb2682fa4e6096563 46 0
#2 := false
decl f7 :: (-> S6 S1)
decl f9 :: S6
#41 := f9
#42 := (f7 f9)
decl f1 :: S1
#4 := f1
#123 := (= f1 #42)
#127 := (not #123)
#43 := (= #42 f1)
#44 := (not #43)
#128 := (iff #44 #127)
#125 := (iff #43 #123)
#126 := [rewrite]: #125
#129 := [monotonicity #126]: #128
#122 := [asserted]: #44
#132 := [mp #122 #129]: #127
#32 := (:var 0 S6)
#33 := (f7 #32)
#654 := (pattern #33)
#104 := (= f1 #33)
#655 := (forall (vars (?v0 S6)) (:pat #654) #104)
#108 := (forall (vars (?v0 S6)) #104)
#658 := (iff #108 #655)
#656 := (iff #104 #104)
#657 := [refl]: #656
#659 := [quant-intro #657]: #658
#136 := (~ #108 #108)
#150 := (~ #104 #104)
#151 := [refl]: #150
#137 := [nnf-pos #151]: #136
#34 := (= #33 f1)
#35 := (forall (vars (?v0 S6)) #34)
#109 := (iff #35 #108)
#106 := (iff #34 #104)
#107 := [rewrite]: #106
#110 := [quant-intro #107]: #109
#103 := [asserted]: #35
#113 := [mp #103 #110]: #108
#152 := [mp~ #113 #137]: #108
#660 := [mp #152 #659]: #655
#223 := (not #655)
#310 := (or #223 #123)
#224 := [quant-inst #41]: #310
[unit-resolution #224 #660 #132]: false
unsat
fd9a6405dcfcd8a8d48113910424b839f41afe7c 119 0
#2 := false
decl f5 :: (-> S4 S4 S5 S1)
decl f11 :: S5
#43 := f11
decl f10 :: S4
#42 := f10
decl f9 :: S4
#41 := f9
#44 := (f5 f9 f10 f11)
decl f1 :: S1
#4 := f1
#131 := (= f1 #44)
#150 := (not #131)
#654 := [hypothesis]: #150
decl f6 :: (-> S4 S5 S1)
#48 := (f6 f10 f11)
#138 := (= f1 #48)
#46 := (f6 f9 f11)
#135 := (= f1 #46)
#141 := (or #135 #138)
#342 := (or #141 #131)
#151 := (iff #141 #150)
#49 := (= #48 f1)
#47 := (= #46 f1)
#50 := (or #47 #49)
#45 := (= #44 f1)
#51 := (iff #45 #50)
#52 := (not #51)
#154 := (iff #52 #151)
#144 := (iff #131 #141)
#147 := (not #144)
#152 := (iff #147 #151)
#153 := [rewrite]: #152
#148 := (iff #52 #147)
#145 := (iff #51 #144)
#142 := (iff #50 #141)
#139 := (iff #49 #138)
#140 := [rewrite]: #139
#136 := (iff #47 #135)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#133 := (iff #45 #131)
#134 := [rewrite]: #133
#146 := [monotonicity #134 #143]: #145
#149 := [monotonicity #146]: #148
#155 := [trans #149 #153]: #154
#130 := [asserted]: #52
#158 := [mp #130 #155]: #151
#268 := (not #151)
#341 := (or #141 #131 #268)
#338 := [def-axiom]: #341
#321 := [unit-resolution #338 #158]: #342
#326 := [unit-resolution #321 #654]: #141
#328 := (not #141)
#657 := (or #131 #328)
#22 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#23 := (f5 #20 #21 #22)
#673 := (pattern #23)
#27 := (f6 #21 #22)
#99 := (= f1 #27)
#25 := (f6 #20 #22)
#96 := (= f1 #25)
#102 := (or #96 #99)
#92 := (= f1 #23)
#105 := (iff #92 #102)
#674 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #673) #105)
#108 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #105)
#677 := (iff #108 #674)
#675 := (iff #105 #105)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#160 := (~ #108 #108)
#159 := (~ #105 #105)
#174 := [refl]: #159
#161 := [nnf-pos #174]: #160
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #30)
#109 := (iff #31 #108)
#106 := (iff #30 #105)
#103 := (iff #29 #102)
#100 := (iff #28 #99)
#101 := [rewrite]: #100
#97 := (iff #26 #96)
#98 := [rewrite]: #97
#104 := [monotonicity #98 #101]: #103
#94 := (iff #24 #92)
#95 := [rewrite]: #94
#107 := [monotonicity #95 #104]: #106
#110 := [quant-intro #107]: #109
#91 := [asserted]: #31
#113 := [mp #91 #110]: #108
#175 := [mp~ #113 #161]: #108
#679 := [mp #175 #678]: #674
#327 := (not #674)
#661 := (or #327 #144)
#662 := [quant-inst #41 #42 #43]: #661
#314 := [unit-resolution #662 #679]: #144
#663 := (or #147 #131 #328)
#664 := [def-axiom]: #663
#298 := [unit-resolution #664 #314]: #657
#641 := [unit-resolution #298 #326 #654]: false
#302 := [lemma #641]: #131
#315 := (or #328 #150)
#658 := (or #328 #150 #268)
#660 := [def-axiom]: #658
#447 := [unit-resolution #660 #158]: #315
#303 := [unit-resolution #447 #302]: #328
#304 := (or #150 #141)
#659 := (or #147 #150 #141)
#665 := [def-axiom]: #659
#305 := [unit-resolution #665 #314]: #304
[unit-resolution #305 #303 #302]: false
unsat
1323dc787bd70f2161bb2e81688bf85b58b24887 154 0
#2 := false
decl f6 :: (-> S4 S5 S1)
decl f10 :: S5
#42 := f10
decl f8 :: S4
#36 := f8
#331 := (f6 f8 f10)
decl f1 :: S1
#4 := f1
#328 := (= f1 #331)
decl f9 :: S4
#41 := f9
#45 := (f6 f9 f10)
#131 := (= f1 #45)
#332 := (or #131 #328)
decl f5 :: (-> S4 S4 S5 S1)
#43 := (f5 f9 f8 f10)
#127 := (= f1 #43)
#140 := (not #127)
#648 := [hypothesis]: #140
#326 := (or #131 #127)
#141 := (iff #131 #140)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#144 := (iff #48 #141)
#134 := (iff #127 #131)
#137 := (not #134)
#142 := (iff #137 #141)
#143 := [rewrite]: #142
#138 := (iff #48 #137)
#135 := (iff #47 #134)
#132 := (iff #46 #131)
#133 := [rewrite]: #132
#129 := (iff #44 #127)
#130 := [rewrite]: #129
#136 := [monotonicity #130 #133]: #135
#139 := [monotonicity #136]: #138
#145 := [trans #139 #143]: #144
#126 := [asserted]: #48
#148 := [mp #126 #145]: #141
#238 := (not #141)
#325 := (or #131 #127 #238)
#239 := [def-axiom]: #325
#240 := [unit-resolution #239 #148]: #326
#650 := [unit-resolution #240 #648]: #131
#654 := (not #332)
#294 := (or #127 #654)
#311 := (iff #127 #332)
#22 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#23 := (f5 #20 #21 #22)
#663 := (pattern #23)
#27 := (f6 #21 #22)
#95 := (= f1 #27)
#25 := (f6 #20 #22)
#92 := (= f1 #25)
#98 := (or #92 #95)
#88 := (= f1 #23)
#101 := (iff #88 #98)
#664 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #663) #101)
#104 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #101)
#667 := (iff #104 #664)
#665 := (iff #101 #101)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#150 := (~ #104 #104)
#149 := (~ #101 #101)
#164 := [refl]: #149
#151 := [nnf-pos #164]: #150
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #30)
#105 := (iff #31 #104)
#102 := (iff #30 #101)
#99 := (iff #29 #98)
#96 := (iff #28 #95)
#97 := [rewrite]: #96
#93 := (iff #26 #92)
#94 := [rewrite]: #93
#100 := [monotonicity #94 #97]: #99
#90 := (iff #24 #88)
#91 := [rewrite]: #90
#103 := [monotonicity #91 #100]: #102
#106 := [quant-intro #103]: #105
#87 := [asserted]: #31
#109 := [mp #87 #106]: #104
#165 := [mp~ #109 #151]: #104
#669 := [mp #165 #668]: #664
#305 := (not #664)
#437 := (or #305 #311)
#644 := [quant-inst #41 #36 #42]: #437
#293 := [unit-resolution #644 #669]: #311
#645 := (not #311)
#303 := (or #645 #127 #654)
#308 := [def-axiom]: #303
#295 := [unit-resolution #308 #293]: #294
#633 := [unit-resolution #295 #648]: #654
#327 := (not #131)
#316 := (or #332 #327)
#317 := [def-axiom]: #316
#634 := [unit-resolution #317 #633 #650]: false
#635 := [lemma #634]: #127
#636 := (or #140 #332)
#646 := (or #645 #140 #332)
#304 := [def-axiom]: #646
#637 := [unit-resolution #304 #293]: #636
#639 := [unit-resolution #637 #635]: #332
#330 := (or #327 #140)
#318 := (or #327 #140 #238)
#329 := [def-axiom]: #318
#258 := [unit-resolution #329 #148]: #330
#641 := [unit-resolution #258 #635]: #327
#649 := (or #654 #131 #328)
#655 := [def-axiom]: #649
#279 := [unit-resolution #655 #641 #639]: #328
#37 := (f6 f8 #22)
#677 := (pattern #37)
#116 := (= f1 #37)
#120 := (not #116)
#678 := (forall (vars (?v0 S5)) (:pat #677) #120)
#123 := (forall (vars (?v0 S5)) #120)
#681 := (iff #123 #678)
#679 := (iff #120 #120)
#680 := [refl]: #679
#682 := [quant-intro #680]: #681
#154 := (~ #123 #123)
#169 := (~ #120 #120)
#170 := [refl]: #169
#155 := [nnf-pos #170]: #154
#38 := (= #37 f1)
#39 := (not #38)
#40 := (forall (vars (?v0 S5)) #39)
#124 := (iff #40 #123)
#121 := (iff #39 #120)
#118 := (iff #38 #116)
#119 := [rewrite]: #118
#122 := [monotonicity #119]: #121
#125 := [quant-intro #122]: #124
#115 := [asserted]: #40
#128 := [mp #115 #125]: #123
#171 := [mp~ #128 #155]: #123
#683 := [mp #171 #682]: #678
#651 := (not #328)
#632 := (not #678)
#638 := (or #632 #651)
#274 := [quant-inst #42]: #638
[unit-resolution #274 #683 #279]: false
unsat
c8b1c55953a13602e2fa8c1b144b5f14c7db8217 128 0
#2 := false
decl f6 :: (-> S4 S5 S1)
decl f10 :: S5
#42 := f10
decl f7 :: S4
#32 := f7
#223 := (f6 f7 f10)
decl f1 :: S1
#4 := f1
#310 := (= f1 #223)
#637 := (not #310)
decl f9 :: S4
#41 := f9
#224 := (f6 f9 f10)
#311 := (= f1 #224)
#303 := (or #310 #311)
#288 := (not #303)
decl f5 :: (-> S4 S4 S5 S1)
#43 := (f5 f9 f7 f10)
#124 := (= f1 #43)
#243 := (iff #124 #303)
#22 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#23 := (f5 #20 #21 #22)
#648 := (pattern #23)
#27 := (f6 #21 #22)
#92 := (= f1 #27)
#25 := (f6 #20 #22)
#89 := (= f1 #25)
#95 := (or #89 #92)
#85 := (= f1 #23)
#98 := (iff #85 #95)
#649 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #648) #98)
#101 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #98)
#652 := (iff #101 #649)
#650 := (iff #98 #98)
#651 := [refl]: #650
#653 := [quant-intro #651]: #652
#135 := (~ #101 #101)
#134 := (~ #98 #98)
#149 := [refl]: #134
#136 := [nnf-pos #149]: #135
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #30)
#102 := (iff #31 #101)
#99 := (iff #30 #98)
#96 := (iff #29 #95)
#93 := (iff #28 #92)
#94 := [rewrite]: #93
#90 := (iff #26 #89)
#91 := [rewrite]: #90
#97 := [monotonicity #91 #94]: #96
#87 := (iff #24 #85)
#88 := [rewrite]: #87
#100 := [monotonicity #88 #97]: #99
#103 := [quant-intro #100]: #102
#84 := [asserted]: #31
#106 := [mp #84 #103]: #101
#150 := [mp~ #106 #136]: #101
#654 := [mp #150 #653]: #649
#317 := (not #649)
#296 := (or #317 #243)
#225 := (or #311 #310)
#312 := (iff #124 #225)
#633 := (or #317 #312)
#290 := (iff #633 #296)
#629 := (iff #296 #296)
#301 := [rewrite]: #629
#316 := (iff #312 #243)
#314 := (iff #225 #303)
#315 := [rewrite]: #314
#313 := [monotonicity #315]: #316
#422 := [monotonicity #313]: #290
#302 := [trans #422 #301]: #290
#635 := [quant-inst #41 #32 #42]: #633
#636 := [mp #635 #302]: #296
#619 := [unit-resolution #636 #654]: #243
#289 := (not #243)
#620 := (or #289 #288)
#128 := (not #124)
#44 := (= #43 f1)
#45 := (not #44)
#129 := (iff #45 #128)
#126 := (iff #44 #124)
#127 := [rewrite]: #126
#130 := [monotonicity #127]: #129
#123 := [asserted]: #45
#133 := [mp #123 #130]: #128
#632 := (or #289 #124 #288)
#273 := [def-axiom]: #632
#623 := [unit-resolution #273 #133]: #620
#259 := [unit-resolution #623 #619]: #288
#638 := (or #303 #637)
#639 := [def-axiom]: #638
#624 := [unit-resolution #639 #259]: #637
#33 := (f6 f7 #22)
#655 := (pattern #33)
#105 := (= f1 #33)
#656 := (forall (vars (?v0 S5)) (:pat #655) #105)
#109 := (forall (vars (?v0 S5)) #105)
#659 := (iff #109 #656)
#657 := (iff #105 #105)
#658 := [refl]: #657
#660 := [quant-intro #658]: #659
#137 := (~ #109 #109)
#151 := (~ #105 #105)
#152 := [refl]: #151
#138 := [nnf-pos #152]: #137
#34 := (= #33 f1)
#35 := (forall (vars (?v0 S5)) #34)
#110 := (iff #35 #109)
#107 := (iff #34 #105)
#108 := [rewrite]: #107
#111 := [quant-intro #108]: #110
#104 := [asserted]: #35
#114 := [mp #104 #111]: #109
#153 := [mp~ #114 #138]: #109
#661 := [mp #153 #660]: #656
#621 := (not #656)
#622 := (or #621 #310)
#617 := [quant-inst #42]: #622
[unit-resolution #617 #661 #624]: false
unsat
0fceb45afe271c647688273babe303962581fbf2 146 0
#2 := false
decl f5 :: (-> S4 S4 S5 S1)
decl f11 :: S5
#43 := f11
decl f9 :: S4
#41 := f9
decl f10 :: S4
#42 := f10
#46 := (f5 f10 f9 f11)
decl f1 :: S1
#4 := f1
#132 := (= f1 #46)
#328 := (not #132)
#44 := (f5 f9 f10 f11)
#128 := (= f1 #44)
#141 := (not #128)
#247 := [hypothesis]: #141
#327 := (or #132 #128)
#142 := (iff #132 #141)
#47 := (= #46 f1)
#45 := (= #44 f1)
#48 := (iff #45 #47)
#49 := (not #48)
#145 := (iff #49 #142)
#135 := (iff #128 #132)
#138 := (not #135)
#143 := (iff #138 #142)
#144 := [rewrite]: #143
#139 := (iff #49 #138)
#136 := (iff #48 #135)
#133 := (iff #47 #132)
#134 := [rewrite]: #133
#130 := (iff #45 #128)
#131 := [rewrite]: #130
#137 := [monotonicity #131 #134]: #136
#140 := [monotonicity #137]: #139
#146 := [trans #140 #144]: #145
#127 := [asserted]: #49
#149 := [mp #127 #146]: #142
#239 := (not #142)
#326 := (or #132 #128 #239)
#240 := [def-axiom]: #326
#241 := [unit-resolution #240 #149]: #327
#626 := [unit-resolution #241 #247]: #132
decl f6 :: (-> S4 S5 S1)
#332 := (f6 f9 f11)
#329 := (= f1 #332)
#333 := (f6 f10 f11)
#312 := (= f1 #333)
#649 := (or #312 #329)
#646 := (not #649)
#349 := (or #128 #646)
#636 := (iff #128 #649)
#22 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#23 := (f5 #20 #21 #22)
#664 := (pattern #23)
#27 := (f6 #21 #22)
#96 := (= f1 #27)
#25 := (f6 #20 #22)
#93 := (= f1 #25)
#99 := (or #93 #96)
#89 := (= f1 #23)
#102 := (iff #89 #99)
#665 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #664) #102)
#105 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #102)
#668 := (iff #105 #665)
#666 := (iff #102 #102)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#151 := (~ #105 #105)
#150 := (~ #102 #102)
#165 := [refl]: #150
#152 := [nnf-pos #165]: #151
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #30)
#106 := (iff #31 #105)
#103 := (iff #30 #102)
#100 := (iff #29 #99)
#97 := (iff #28 #96)
#98 := [rewrite]: #97
#94 := (iff #26 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #24 #89)
#92 := [rewrite]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [quant-intro #104]: #106
#88 := [asserted]: #31
#110 := [mp #88 #107]: #105
#166 := [mp~ #110 #152]: #105
#670 := [mp #166 #669]: #665
#645 := (not #665)
#633 := (or #645 #636)
#306 := (or #329 #312)
#438 := (iff #128 #306)
#639 := (or #645 #438)
#640 := (iff #639 #633)
#280 := (iff #633 #633)
#281 := [rewrite]: #280
#637 := (iff #438 #636)
#634 := (iff #306 #649)
#635 := [rewrite]: #634
#638 := [monotonicity #635]: #637
#642 := [monotonicity #638]: #640
#643 := [trans #642 #281]: #640
#275 := [quant-inst #41 #42 #43]: #639
#641 := [mp #275 #643]: #633
#627 := [unit-resolution #641 #670]: #636
#644 := (not #636)
#630 := (or #644 #128 #646)
#631 := [def-axiom]: #630
#350 := [unit-resolution #631 #627]: #349
#624 := [unit-resolution #350 #247]: #646
#625 := (or #328 #649)
#651 := (iff #132 #649)
#317 := (or #645 #651)
#318 := [quant-inst #42 #41 #43]: #317
#628 := [unit-resolution #318 #670]: #651
#647 := (not #651)
#289 := (or #647 #328 #649)
#632 := [def-axiom]: #289
#629 := [unit-resolution #632 #628]: #625
#338 := [unit-resolution #629 #624 #626]: false
#339 := [lemma #338]: #128
#331 := (or #328 #141)
#319 := (or #328 #141 #239)
#330 := [def-axiom]: #319
#259 := [unit-resolution #330 #149]: #331
#340 := [unit-resolution #259 #339]: #328
#342 := (or #141 #649)
#337 := (or #644 #141 #649)
#353 := [def-axiom]: #337
#620 := [unit-resolution #353 #627]: #342
#621 := [unit-resolution #620 #339]: #649
#334 := (or #132 #646)
#305 := (or #647 #132 #646)
#648 := [def-axiom]: #305
#618 := [unit-resolution #648 #628]: #334
[unit-resolution #618 #621 #340]: false
unsat
dd5a8039aacd6c3fcf9f486d31684a5899cfecfc 121 0
#2 := false
decl f5 :: (-> S4 S4 S5 S1)
decl f10 :: S5
#42 := f10
decl f9 :: S4
#41 := f9
#43 := (f5 f9 f9 f10)
decl f1 :: S1
#4 := f1
#127 := (= f1 #43)
#140 := (not #127)
#631 := [hypothesis]: #140
decl f6 :: (-> S4 S5 S1)
#45 := (f6 f9 f10)
#131 := (= f1 #45)
#326 := (or #131 #127)
#141 := (iff #131 #140)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#144 := (iff #48 #141)
#134 := (iff #127 #131)
#137 := (not #134)
#142 := (iff #137 #141)
#143 := [rewrite]: #142
#138 := (iff #48 #137)
#135 := (iff #47 #134)
#132 := (iff #46 #131)
#133 := [rewrite]: #132
#129 := (iff #44 #127)
#130 := [rewrite]: #129
#136 := [monotonicity #130 #133]: #135
#139 := [monotonicity #136]: #138
#145 := [trans #139 #143]: #144
#126 := [asserted]: #48
#148 := [mp #126 #145]: #141
#238 := (not #141)
#325 := (or #131 #127 #238)
#239 := [def-axiom]: #325
#240 := [unit-resolution #239 #148]: #326
#292 := [unit-resolution #240 #631]: #131
#327 := (not #131)
#294 := (or #127 #327)
#22 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#23 := (f5 #20 #21 #22)
#663 := (pattern #23)
#27 := (f6 #21 #22)
#95 := (= f1 #27)
#25 := (f6 #20 #22)
#92 := (= f1 #25)
#98 := (or #92 #95)
#88 := (= f1 #23)
#101 := (iff #88 #98)
#664 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #663) #101)
#104 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #101)
#667 := (iff #104 #664)
#665 := (iff #101 #101)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#150 := (~ #104 #104)
#149 := (~ #101 #101)
#164 := [refl]: #149
#151 := [nnf-pos #164]: #150
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #30)
#105 := (iff #31 #104)
#102 := (iff #30 #101)
#99 := (iff #29 #98)
#96 := (iff #28 #95)
#97 := [rewrite]: #96
#93 := (iff #26 #92)
#94 := [rewrite]: #93
#100 := [monotonicity #94 #97]: #99
#90 := (iff #24 #88)
#91 := [rewrite]: #90
#103 := [monotonicity #91 #100]: #102
#106 := [quant-intro #103]: #105
#87 := [asserted]: #31
#109 := [mp #87 #106]: #104
#165 := [mp~ #109 #151]: #104
#669 := [mp #165 #668]: #664
#305 := (not #664)
#437 := (or #305 #134)
#331 := (or #131 #131)
#328 := (iff #127 #331)
#644 := (or #305 #328)
#317 := (iff #644 #437)
#652 := (iff #437 #437)
#653 := [rewrite]: #652
#648 := (iff #328 #134)
#332 := (iff #331 #131)
#311 := [rewrite]: #332
#650 := [monotonicity #311]: #648
#651 := [monotonicity #650]: #317
#654 := [trans #651 #653]: #317
#316 := [quant-inst #41 #41 #42]: #644
#649 := [mp #316 #654]: #437
#293 := [unit-resolution #649 #669]: #134
#655 := (or #137 #127 #327)
#645 := [def-axiom]: #655
#295 := [unit-resolution #645 #293]: #294
#633 := [unit-resolution #295 #292 #631]: false
#634 := [lemma #633]: #127
#330 := (or #327 #140)
#318 := (or #327 #140 #238)
#329 := [def-axiom]: #318
#258 := [unit-resolution #329 #148]: #330
#635 := [unit-resolution #258 #634]: #327
#636 := (or #140 #131)
#303 := (or #137 #140 #131)
#308 := [def-axiom]: #303
#637 := [unit-resolution #308 #293]: #636
[unit-resolution #637 #635 #634]: false
unsat
8df9cadd28b79979ba76c3dfed467a1319648283 259 0
#2 := false
decl f5 :: (-> S4 S5 S1)
decl f12 :: S5
#47 := f12
decl f10 :: S4
#43 := f10
#627 := (f5 f10 f12)
decl f1 :: S1
#4 := f1
#340 := (= f1 #627)
decl f11 :: S4
#44 := f11
#338 := (f5 f11 f12)
#335 := (= f1 #338)
#625 := (or #335 #340)
decl f6 :: (-> S4 S4 S4)
#45 := (f6 f10 f11)
#312 := (f5 #45 f12)
#444 := (= f1 #312)
#619 := (iff #444 #625)
#585 := (not #619)
#597 := (not #625)
#609 := (not #340)
decl f9 :: S4
#42 := f9
#640 := (f5 f9 f12)
#641 := (= f1 #640)
#487 := (or #340 #641)
#612 := (not #487)
#50 := (f6 f9 f10)
#339 := (f5 #50 f12)
#318 := (= f1 #339)
#595 := (iff #318 #487)
#587 := (not #595)
#580 := [hypothesis]: #587
#23 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#22 := (f6 #20 #21)
#24 := (f5 #22 #23)
#670 := (pattern #24)
#28 := (f5 #21 #23)
#102 := (= f1 #28)
#26 := (f5 #20 #23)
#99 := (= f1 #26)
#105 := (or #99 #102)
#95 := (= f1 #24)
#108 := (iff #95 #105)
#671 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #670) #108)
#111 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #108)
#674 := (iff #111 #671)
#672 := (iff #108 #108)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#157 := (~ #111 #111)
#156 := (~ #108 #108)
#171 := [refl]: #156
#158 := [nnf-pos #171]: #157
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #31)
#112 := (iff #32 #111)
#109 := (iff #31 #108)
#106 := (iff #30 #105)
#103 := (iff #29 #102)
#104 := [rewrite]: #103
#100 := (iff #27 #99)
#101 := [rewrite]: #100
#107 := [monotonicity #101 #104]: #106
#97 := (iff #25 #95)
#98 := [rewrite]: #97
#110 := [monotonicity #98 #107]: #109
#113 := [quant-intro #110]: #112
#94 := [asserted]: #32
#116 := [mp #94 #113]: #111
#172 := [mp~ #116 #158]: #111
#676 := [mp #172 #675]: #671
#651 := (not #671)
#593 := (or #651 #595)
#604 := (or #641 #340)
#486 := (iff #318 #604)
#596 := (or #651 #486)
#496 := (iff #596 #593)
#499 := (iff #593 #593)
#492 := [rewrite]: #499
#497 := (iff #486 #595)
#488 := (iff #604 #487)
#447 := [rewrite]: #488
#592 := [monotonicity #447]: #497
#498 := [monotonicity #592]: #496
#500 := [trans #498 #492]: #496
#481 := [quant-inst #42 #43 #47]: #596
#501 := [mp #481 #500]: #593
#581 := [unit-resolution #501 #676 #580]: false
#582 := [lemma #581]: #595
#658 := (not #318)
#655 := (or #318 #335)
#652 := (not #655)
#51 := (f6 #50 f11)
#52 := (f5 #51 f12)
#138 := (= f1 #52)
#334 := (not #138)
#46 := (f6 f9 #45)
#48 := (f5 #46 f12)
#134 := (= f1 #48)
#147 := (not #134)
#583 := [hypothesis]: #147
#333 := (or #138 #134)
#148 := (iff #138 #147)
#53 := (= #52 f1)
#49 := (= #48 f1)
#54 := (iff #49 #53)
#55 := (not #54)
#151 := (iff #55 #148)
#141 := (iff #134 #138)
#144 := (not #141)
#149 := (iff #144 #148)
#150 := [rewrite]: #149
#145 := (iff #55 #144)
#142 := (iff #54 #141)
#139 := (iff #53 #138)
#140 := [rewrite]: #139
#136 := (iff #49 #134)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#146 := [monotonicity #143]: #145
#152 := [trans #146 #150]: #151
#133 := [asserted]: #55
#155 := [mp #133 #152]: #148
#245 := (not #148)
#332 := (or #138 #134 #245)
#246 := [def-axiom]: #332
#247 := [unit-resolution #246 #155]: #333
#577 := [unit-resolution #247 #583]: #138
#568 := (or #334 #655)
#657 := (iff #138 #655)
#323 := (or #651 #657)
#324 := [quant-inst #50 #44 #47]: #323
#584 := [unit-resolution #324 #676]: #657
#653 := (not #657)
#295 := (or #653 #334 #655)
#638 := [def-axiom]: #295
#569 := [unit-resolution #638 #584]: #568
#571 := [unit-resolution #569 #577]: #655
#661 := (not #335)
#601 := (or #651 #619)
#624 := (or #340 #335)
#628 := (iff #444 #624)
#621 := (or #651 #628)
#616 := (iff #621 #601)
#623 := (iff #601 #601)
#464 := [rewrite]: #623
#620 := (iff #628 #619)
#629 := (iff #624 #625)
#618 := [rewrite]: #629
#615 := [monotonicity #618]: #620
#617 := [monotonicity #615]: #616
#465 := [trans #617 #464]: #616
#622 := [quant-inst #43 #44 #47]: #621
#466 := [mp #622 #465]: #601
#572 := [unit-resolution #466 #676]: #619
#562 := (or #585 #597)
#360 := (not #444)
#644 := (or #444 #641)
#633 := (not #644)
#574 := (or #134 #633)
#281 := (iff #134 #644)
#286 := (or #651 #281)
#642 := (or #641 #444)
#643 := (iff #134 #642)
#287 := (or #651 #643)
#647 := (iff #287 #286)
#636 := (iff #286 #286)
#637 := [rewrite]: #636
#646 := (iff #643 #281)
#639 := (iff #642 #644)
#645 := [rewrite]: #639
#648 := [monotonicity #645]: #646
#650 := [monotonicity #648]: #647
#343 := [trans #650 #637]: #647
#649 := [quant-inst #42 #45 #47]: #287
#359 := [mp #649 #343]: #286
#573 := [unit-resolution #359 #676]: #281
#630 := (not #281)
#634 := (or #630 #134 #633)
#631 := [def-axiom]: #634
#570 := [unit-resolution #631 #573]: #574
#575 := [unit-resolution #570 #583]: #633
#361 := (or #644 #360)
#347 := [def-axiom]: #361
#561 := [unit-resolution #347 #575]: #360
#579 := (or #585 #444 #597)
#576 := [def-axiom]: #579
#564 := [unit-resolution #576 #561]: #562
#565 := [unit-resolution #564 #572]: #597
#608 := (or #625 #661)
#502 := [def-axiom]: #608
#566 := [unit-resolution #502 #565]: #661
#310 := (or #652 #318 #335)
#315 := [def-axiom]: #310
#563 := [unit-resolution #315 #566 #571]: #318
#362 := (not #641)
#253 := (or #644 #362)
#632 := [def-axiom]: #253
#567 := [unit-resolution #632 #575]: #362
#503 := (or #625 #609)
#504 := [def-axiom]: #503
#547 := [unit-resolution #504 #565]: #609
#613 := (or #612 #340 #641)
#607 := [def-axiom]: #613
#548 := [unit-resolution #607 #547 #567]: #612
#445 := (or #587 #658 #487)
#446 := [def-axiom]: #445
#550 := [unit-resolution #446 #548 #563 #582]: false
#551 := [lemma #550]: #134
#337 := (or #334 #147)
#325 := (or #334 #147 #245)
#336 := [def-axiom]: #325
#265 := [unit-resolution #336 #155]: #337
#552 := [unit-resolution #265 #551]: #334
#553 := (or #138 #652)
#311 := (or #653 #138 #652)
#654 := [def-axiom]: #311
#554 := [unit-resolution #654 #584]: #553
#555 := [unit-resolution #554 #552]: #652
#659 := (or #655 #658)
#660 := [def-axiom]: #659
#556 := [unit-resolution #660 #555]: #658
#614 := (or #587 #318 #612)
#443 := [def-axiom]: #614
#557 := [unit-resolution #443 #556 #582]: #612
#610 := (or #487 #609)
#611 := [def-axiom]: #610
#558 := [unit-resolution #611 #557]: #609
#656 := (or #655 #661)
#662 := [def-axiom]: #656
#559 := [unit-resolution #662 #555]: #661
#594 := (or #597 #335 #340)
#598 := [def-axiom]: #594
#549 := [unit-resolution #598 #559 #558]: #597
#560 := (or #147 #644)
#635 := (or #630 #147 #644)
#344 := [def-axiom]: #635
#538 := [unit-resolution #344 #573]: #560
#539 := [unit-resolution #538 #551]: #644
#605 := (or #487 #362)
#606 := [def-axiom]: #605
#541 := [unit-resolution #606 #557]: #362
#355 := (or #633 #444 #641)
#356 := [def-axiom]: #355
#542 := [unit-resolution #356 #541 #539]: #444
#578 := (or #585 #360 #625)
#588 := [def-axiom]: #578
#543 := [unit-resolution #588 #542 #549]: #585
[unit-resolution #466 #676 #543]: false
unsat
e18331b7b676705a2856a4af405fce965b0fd82f 153 0
#2 := false
decl f4 :: (-> S2 S3 S1)
decl f11 :: S3
#43 := f11
decl f10 :: S2
#42 := f10
#48 := (f4 f10 f11)
decl f1 :: S1
#4 := f1
#138 := (= f1 #48)
#192 := (not #138)
decl f9 :: S2
#41 := f9
#46 := (f4 f9 f11)
#135 := (= f1 #46)
#191 := (not #135)
#193 := (or #191 #192)
#194 := (not #193)
#335 := [hypothesis]: #194
decl f3 :: (-> S2 S2 S3 S1)
#44 := (f3 f9 f10 f11)
#131 := (= f1 #44)
#150 := (not #131)
#341 := (or #150 #193)
#205 := (iff #131 #193)
#141 := (and #135 #138)
#151 := (iff #141 #150)
#208 := (iff #151 #205)
#200 := (iff #193 #131)
#206 := (iff #200 #205)
#207 := [rewrite]: #206
#203 := (iff #151 #200)
#197 := (iff #194 #150)
#201 := (iff #197 #200)
#202 := [rewrite]: #201
#198 := (iff #151 #197)
#195 := (iff #141 #194)
#196 := [rewrite]: #195
#199 := [monotonicity #196]: #198
#204 := [trans #199 #202]: #203
#209 := [trans #204 #207]: #208
#49 := (= #48 f1)
#47 := (= #46 f1)
#50 := (and #47 #49)
#45 := (= #44 f1)
#51 := (iff #45 #50)
#52 := (not #51)
#154 := (iff #52 #151)
#144 := (iff #131 #141)
#147 := (not #144)
#152 := (iff #147 #151)
#153 := [rewrite]: #152
#148 := (iff #52 #147)
#145 := (iff #51 #144)
#142 := (iff #50 #141)
#139 := (iff #49 #138)
#140 := [rewrite]: #139
#136 := (iff #47 #135)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#133 := (iff #45 #131)
#134 := [rewrite]: #133
#146 := [monotonicity #134 #143]: #145
#149 := [monotonicity #146]: #148
#155 := [trans #149 #153]: #154
#130 := [asserted]: #52
#158 := [mp #130 #155]: #151
#210 := [mp #158 #209]: #205
#348 := (not #205)
#358 := (or #150 #193 #348)
#362 := [def-axiom]: #358
#678 := [unit-resolution #362 #210]: #341
#467 := [unit-resolution #678 #335]: #150
#334 := (or #131 #193)
#680 := (iff #131 #194)
#10 := (:var 0 S3)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#11 := (f3 #8 #9 #10)
#686 := (pattern #11)
#15 := (f4 #9 #10)
#79 := (= f1 #15)
#183 := (not #79)
#13 := (f4 #8 #10)
#76 := (= f1 #13)
#182 := (not #76)
#166 := (or #182 #183)
#167 := (not #166)
#73 := (= f1 #11)
#184 := (iff #73 #167)
#687 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #686) #184)
#187 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #184)
#690 := (iff #187 #687)
#688 := (iff #184 #184)
#689 := [refl]: #688
#691 := [quant-intro #689]: #690
#82 := (and #76 #79)
#85 := (iff #73 #82)
#88 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #85)
#188 := (iff #88 #187)
#185 := (iff #85 #184)
#168 := (iff #82 #167)
#169 := [rewrite]: #168
#186 := [monotonicity #169]: #185
#189 := [quant-intro #186]: #188
#172 := (~ #88 #88)
#170 := (~ #85 #85)
#171 := [refl]: #170
#173 := [nnf-pos #171]: #172
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (and #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #18)
#89 := (iff #19 #88)
#86 := (iff #18 #85)
#83 := (iff #17 #82)
#80 := (iff #16 #79)
#81 := [rewrite]: #80
#77 := (iff #14 #76)
#78 := [rewrite]: #77
#84 := [monotonicity #78 #81]: #83
#74 := (iff #12 #73)
#75 := [rewrite]: #74
#87 := [monotonicity #75 #84]: #86
#90 := [quant-intro #87]: #89
#72 := [asserted]: #19
#93 := [mp #72 #90]: #88
#157 := [mp~ #93 #173]: #88
#190 := [mp #157 #189]: #187
#692 := [mp #190 #691]: #687
#674 := (not #687)
#346 := (or #674 #680)
#347 := [quant-inst #41 #42 #43]: #346
#676 := [unit-resolution #347 #692]: #680
#681 := (not #680)
#682 := (or #681 #131 #193)
#683 := [def-axiom]: #682
#677 := [unit-resolution #683 #676]: #334
#318 := [unit-resolution #677 #467 #335]: false
#661 := [lemma #318]: #193
#288 := (or #131 #194)
#359 := (or #131 #194 #348)
#360 := [def-axiom]: #359
#361 := [unit-resolution #360 #210]: #288
#322 := [unit-resolution #361 #661]: #131
#323 := (or #150 #194)
#684 := (or #681 #150 #194)
#679 := [def-axiom]: #684
#324 := [unit-resolution #679 #676]: #323
[unit-resolution #324 #322 #661]: false
unsat
2f40e8acf872d44aceb8e8d3d683e7b0a1b857ff 141 0
#2 := false
decl f4 :: (-> S2 S3 S1)
decl f10 :: S3
#42 := f10
decl f8 :: S2
#36 := f8
#231 := (f4 f8 f10)
decl f1 :: S1
#4 := f1
#318 := (= f1 #231)
#232 := (not #318)
decl f9 :: S2
#41 := f9
#319 := (f4 f9 f10)
#233 := (= f1 #319)
#320 := (not #233)
#311 := (or #320 #232)
#322 := (not #311)
decl f3 :: (-> S2 S2 S3 S1)
#43 := (f3 f9 f8 f10)
#125 := (= f1 #43)
#323 := (iff #125 #322)
#10 := (:var 0 S3)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#11 := (f3 #8 #9 #10)
#649 := (pattern #11)
#15 := (f4 #9 #10)
#73 := (= f1 #15)
#166 := (not #73)
#13 := (f4 #8 #10)
#70 := (= f1 #13)
#165 := (not #70)
#149 := (or #165 #166)
#150 := (not #149)
#67 := (= f1 #11)
#167 := (iff #67 #150)
#650 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #649) #167)
#170 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #167)
#653 := (iff #170 #650)
#651 := (iff #167 #167)
#652 := [refl]: #651
#654 := [quant-intro #652]: #653
#76 := (and #70 #73)
#79 := (iff #67 #76)
#82 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #79)
#171 := (iff #82 #170)
#168 := (iff #79 #167)
#151 := (iff #76 #150)
#152 := [rewrite]: #151
#169 := [monotonicity #152]: #168
#172 := [quant-intro #169]: #171
#155 := (~ #82 #82)
#153 := (~ #79 #79)
#154 := [refl]: #153
#156 := [nnf-pos #154]: #155
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (and #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #18)
#83 := (iff #19 #82)
#80 := (iff #18 #79)
#77 := (iff #17 #76)
#74 := (iff #16 #73)
#75 := [rewrite]: #74
#71 := (iff #14 #70)
#72 := [rewrite]: #71
#78 := [monotonicity #72 #75]: #77
#68 := (iff #12 #67)
#69 := [rewrite]: #68
#81 := [monotonicity #69 #78]: #80
#84 := [quant-intro #81]: #83
#66 := [asserted]: #19
#87 := [mp #66 #84]: #82
#140 := [mp~ #87 #156]: #82
#173 := [mp #140 #172]: #170
#655 := [mp #173 #654]: #650
#321 := (not #650)
#325 := (or #321 #323)
#304 := [quant-inst #41 #36 #42]: #325
#251 := [unit-resolution #304 #655]: #323
#310 := (not #323)
#324 := (or #310 #322)
#44 := (= #43 f1)
#45 := (not #44)
#46 := (not #45)
#137 := (iff #46 #125)
#129 := (not #125)
#132 := (not #129)
#135 := (iff #132 #125)
#136 := [rewrite]: #135
#133 := (iff #46 #132)
#130 := (iff #45 #129)
#127 := (iff #44 #125)
#128 := [rewrite]: #127
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#138 := [trans #134 #136]: #137
#124 := [asserted]: #46
#141 := [mp #124 #138]: #125
#646 := (or #310 #129 #322)
#647 := [def-axiom]: #646
#640 := [unit-resolution #647 #141]: #324
#281 := [unit-resolution #640 #251]: #322
#298 := (or #311 #318)
#430 := [def-axiom]: #298
#624 := [unit-resolution #430 #281]: #318
#37 := (f4 f8 #10)
#670 := (pattern #37)
#114 := (= f1 #37)
#118 := (not #114)
#671 := (forall (vars (?v0 S3)) (:pat #670) #118)
#121 := (forall (vars (?v0 S3)) #118)
#674 := (iff #121 #671)
#672 := (iff #118 #118)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#147 := (~ #121 #121)
#162 := (~ #118 #118)
#163 := [refl]: #162
#148 := [nnf-pos #163]: #147
#38 := (= #37 f1)
#39 := (not #38)
#40 := (forall (vars (?v0 S3)) #39)
#122 := (iff #40 #121)
#119 := (iff #39 #118)
#116 := (iff #38 #114)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#123 := [quant-intro #120]: #122
#113 := [asserted]: #40
#126 := [mp #113 #123]: #121
#164 := [mp~ #126 #148]: #121
#676 := [mp #164 #675]: #671
#301 := (not #671)
#639 := (or #301 #232)
#297 := [quant-inst #42]: #639
[unit-resolution #297 #676 #624]: false
unsat
fc29248879b25eb4ac36871e75531b9c02a89803 165 0
#2 := false
decl f4 :: (-> S2 S3 S1)
decl f10 :: S3
#42 := f10
decl f9 :: S2
#41 := f9
#45 := (f4 f9 f10)
decl f1 :: S1
#4 := f1
#131 := (= f1 #45)
#327 := (not #131)
decl f3 :: (-> S2 S2 S3 S1)
decl f7 :: S2
#32 := f7
#43 := (f3 f9 f7 f10)
#127 := (= f1 #43)
#331 := (f4 f7 f10)
#328 := (= f1 #331)
#332 := (not #328)
#305 := [hypothesis]: #332
#10 := (:var 0 S3)
#33 := (f4 f7 #10)
#670 := (pattern #33)
#108 := (= f1 #33)
#671 := (forall (vars (?v0 S3)) (:pat #670) #108)
#112 := (forall (vars (?v0 S3)) #108)
#674 := (iff #112 #671)
#672 := (iff #108 #108)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#152 := (~ #112 #112)
#166 := (~ #108 #108)
#167 := [refl]: #166
#153 := [nnf-pos #167]: #152
#34 := (= #33 f1)
#35 := (forall (vars (?v0 S3)) #34)
#113 := (iff #35 #112)
#110 := (iff #34 #108)
#111 := [rewrite]: #110
#114 := [quant-intro #111]: #113
#107 := [asserted]: #35
#117 := [mp #107 #114]: #112
#168 := [mp~ #117 #153]: #112
#676 := [mp #168 #675]: #671
#293 := (not #671)
#294 := (or #293 #328)
#295 := [quant-inst #42]: #294
#437 := [unit-resolution #295 #676 #305]: false
#633 := [lemma #437]: #328
#140 := (not #127)
#634 := [hypothesis]: #140
#326 := (or #131 #127)
#141 := (iff #131 #140)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#144 := (iff #48 #141)
#134 := (iff #127 #131)
#137 := (not #134)
#142 := (iff #137 #141)
#143 := [rewrite]: #142
#138 := (iff #48 #137)
#135 := (iff #47 #134)
#132 := (iff #46 #131)
#133 := [rewrite]: #132
#129 := (iff #44 #127)
#130 := [rewrite]: #129
#136 := [monotonicity #130 #133]: #135
#139 := [monotonicity #136]: #138
#145 := [trans #139 #143]: #144
#126 := [asserted]: #48
#148 := [mp #126 #145]: #141
#238 := (not #141)
#325 := (or #131 #127 #238)
#239 := [def-axiom]: #325
#240 := [unit-resolution #239 #148]: #326
#635 := [unit-resolution #240 #634]: #131
#311 := (or #327 #332)
#637 := (or #127 #311)
#648 := (not #311)
#650 := (iff #127 #648)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#11 := (f3 #8 #9 #10)
#656 := (pattern #11)
#15 := (f4 #9 #10)
#75 := (= f1 #15)
#173 := (not #75)
#13 := (f4 #8 #10)
#72 := (= f1 #13)
#172 := (not #72)
#156 := (or #172 #173)
#157 := (not #156)
#69 := (= f1 #11)
#174 := (iff #69 #157)
#657 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #656) #174)
#177 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #174)
#660 := (iff #177 #657)
#658 := (iff #174 #174)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#78 := (and #72 #75)
#81 := (iff #69 #78)
#84 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #81)
#178 := (iff #84 #177)
#175 := (iff #81 #174)
#158 := (iff #78 #157)
#159 := [rewrite]: #158
#176 := [monotonicity #159]: #175
#179 := [quant-intro #176]: #178
#162 := (~ #84 #84)
#160 := (~ #81 #81)
#161 := [refl]: #160
#163 := [nnf-pos #161]: #162
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (and #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #18)
#85 := (iff #19 #84)
#82 := (iff #18 #81)
#79 := (iff #17 #78)
#76 := (iff #16 #75)
#77 := [rewrite]: #76
#73 := (iff #14 #72)
#74 := [rewrite]: #73
#80 := [monotonicity #74 #77]: #79
#70 := (iff #12 #69)
#71 := [rewrite]: #70
#83 := [monotonicity #71 #80]: #82
#86 := [quant-intro #83]: #85
#68 := [asserted]: #19
#89 := [mp #68 #86]: #84
#147 := [mp~ #89 #163]: #84
#180 := [mp #147 #179]: #177
#662 := [mp #180 #661]: #657
#644 := (not #657)
#316 := (or #644 #650)
#317 := [quant-inst #41 #32 #42]: #316
#636 := [unit-resolution #317 #662]: #650
#645 := (not #650)
#303 := (or #645 #127 #311)
#308 := [def-axiom]: #303
#632 := [unit-resolution #308 #636]: #637
#638 := [unit-resolution #632 #634]: #311
#649 := (or #648 #327 #332)
#655 := [def-axiom]: #649
#274 := [unit-resolution #655 #638 #635 #633]: false
#639 := [lemma #274]: #127
#330 := (or #327 #140)
#318 := (or #327 #140 #238)
#329 := [def-axiom]: #318
#258 := [unit-resolution #329 #148]: #330
#641 := [unit-resolution #258 #639]: #327
#279 := (or #140 #648)
#646 := (or #645 #140 #648)
#304 := [def-axiom]: #646
#280 := [unit-resolution #304 #636]: #279
#642 := [unit-resolution #280 #639]: #648
#651 := (or #311 #131)
#652 := [def-axiom]: #651
[unit-resolution #652 #642 #641]: false
unsat
cde3f1655461765c0379419d9bc70392d3f61227 164 0
#2 := false
decl f3 :: (-> S2 S2 S3 S1)
decl f11 :: S3
#43 := f11
decl f9 :: S2
#41 := f9
decl f10 :: S2
#42 := f10
#46 := (f3 f10 f9 f11)
decl f1 :: S1
#4 := f1
#132 := (= f1 #46)
#328 := (not #132)
#44 := (f3 f9 f10 f11)
#128 := (= f1 #44)
#141 := (not #128)
#630 := [hypothesis]: #141
#327 := (or #132 #128)
#142 := (iff #132 #141)
#47 := (= #46 f1)
#45 := (= #44 f1)
#48 := (iff #45 #47)
#49 := (not #48)
#145 := (iff #49 #142)
#135 := (iff #128 #132)
#138 := (not #135)
#143 := (iff #138 #142)
#144 := [rewrite]: #143
#139 := (iff #49 #138)
#136 := (iff #48 #135)
#133 := (iff #47 #132)
#134 := [rewrite]: #133
#130 := (iff #45 #128)
#131 := [rewrite]: #130
#137 := [monotonicity #131 #134]: #136
#140 := [monotonicity #137]: #139
#146 := [trans #140 #144]: #145
#127 := [asserted]: #49
#149 := [mp #127 #146]: #142
#239 := (not #142)
#326 := (or #132 #128 #239)
#240 := [def-axiom]: #326
#241 := [unit-resolution #240 #149]: #327
#631 := [unit-resolution #241 #630]: #132
decl f4 :: (-> S2 S3 S1)
#312 := (f4 f10 f11)
#649 := (= f1 #312)
#651 := (not #649)
#332 := (f4 f9 f11)
#329 := (= f1 #332)
#333 := (not #329)
#317 := (or #333 #651)
#628 := (or #128 #317)
#653 := (not #317)
#644 := (iff #128 #653)
#10 := (:var 0 S3)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#11 := (f3 #8 #9 #10)
#657 := (pattern #11)
#15 := (f4 #9 #10)
#76 := (= f1 #15)
#174 := (not #76)
#13 := (f4 #8 #10)
#73 := (= f1 #13)
#173 := (not #73)
#157 := (or #173 #174)
#158 := (not #157)
#70 := (= f1 #11)
#175 := (iff #70 #158)
#658 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #657) #175)
#178 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #175)
#661 := (iff #178 #658)
#659 := (iff #175 #175)
#660 := [refl]: #659
#662 := [quant-intro #660]: #661
#79 := (and #73 #76)
#82 := (iff #70 #79)
#85 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #82)
#179 := (iff #85 #178)
#176 := (iff #82 #175)
#159 := (iff #79 #158)
#160 := [rewrite]: #159
#177 := [monotonicity #160]: #176
#180 := [quant-intro #177]: #179
#163 := (~ #85 #85)
#161 := (~ #82 #82)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (and #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #18)
#86 := (iff #19 #85)
#83 := (iff #18 #82)
#80 := (iff #17 #79)
#77 := (iff #16 #76)
#78 := [rewrite]: #77
#74 := (iff #14 #73)
#75 := [rewrite]: #74
#81 := [monotonicity #75 #78]: #80
#71 := (iff #12 #70)
#72 := [rewrite]: #71
#84 := [monotonicity #72 #81]: #83
#87 := [quant-intro #84]: #86
#69 := [asserted]: #19
#90 := [mp #69 #87]: #85
#148 := [mp~ #90 #164]: #85
#181 := [mp #148 #180]: #178
#663 := [mp #181 #662]: #658
#304 := (not #658)
#337 := (or #304 #644)
#353 := [quant-inst #41 #42 #43]: #337
#624 := [unit-resolution #353 #663]: #644
#354 := (not #644)
#355 := (or #354 #128 #317)
#341 := [def-axiom]: #355
#625 := [unit-resolution #341 #624]: #628
#629 := [unit-resolution #625 #630]: #317
#339 := (or #328 #653)
#650 := (iff #132 #653)
#309 := (or #304 #650)
#306 := (or #651 #333)
#438 := (not #306)
#645 := (iff #132 #438)
#647 := (or #304 #645)
#648 := (iff #647 #309)
#632 := (iff #309 #309)
#293 := [rewrite]: #632
#656 := (iff #645 #650)
#654 := (iff #438 #653)
#318 := (iff #306 #317)
#652 := [rewrite]: #318
#655 := [monotonicity #652]: #654
#646 := [monotonicity #655]: #656
#289 := [monotonicity #646]: #648
#294 := [trans #289 #293]: #648
#305 := [quant-inst #42 #41 #43]: #647
#295 := [mp #305 #294]: #309
#338 := [unit-resolution #295 #663]: #650
#633 := (not #650)
#640 := (or #633 #328 #653)
#642 := [def-axiom]: #640
#340 := [unit-resolution #642 #338]: #339
#342 := [unit-resolution #340 #629 #631]: false
#620 := [lemma #342]: #128
#331 := (or #328 #141)
#319 := (or #328 #141 #239)
#330 := [def-axiom]: #319
#259 := [unit-resolution #330 #149]: #331
#621 := [unit-resolution #259 #620]: #328
#334 := (or #141 #653)
#356 := (or #354 #141 #653)
#247 := [def-axiom]: #356
#618 := [unit-resolution #247 #624]: #334
#622 := [unit-resolution #618 #620]: #653
#619 := (or #132 #317)
#639 := (or #633 #132 #317)
#275 := [def-axiom]: #639
#623 := [unit-resolution #275 #338]: #619
[unit-resolution #623 #622 #621]: false
unsat
0602b5dc7726bda4b36d0dee5a2dbb8b5b433e1c 142 0
#2 := false
decl f3 :: (-> S2 S2 S3 S1)
decl f10 :: S3
#42 := f10
decl f9 :: S2
#41 := f9
#43 := (f3 f9 f9 f10)
decl f1 :: S1
#4 := f1
#127 := (= f1 #43)
#140 := (not #127)
#636 := [hypothesis]: #140
decl f4 :: (-> S2 S3 S1)
#45 := (f4 f9 f10)
#131 := (= f1 #45)
#326 := (or #131 #127)
#141 := (iff #131 #140)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#144 := (iff #48 #141)
#134 := (iff #127 #131)
#137 := (not #134)
#142 := (iff #137 #141)
#143 := [rewrite]: #142
#138 := (iff #48 #137)
#135 := (iff #47 #134)
#132 := (iff #46 #131)
#133 := [rewrite]: #132
#129 := (iff #44 #127)
#130 := [rewrite]: #129
#136 := [monotonicity #130 #133]: #135
#139 := [monotonicity #136]: #138
#145 := [trans #139 #143]: #144
#126 := [asserted]: #48
#148 := [mp #126 #145]: #141
#238 := (not #141)
#325 := (or #131 #127 #238)
#239 := [def-axiom]: #325
#240 := [unit-resolution #239 #148]: #326
#637 := [unit-resolution #240 #636]: #131
#327 := (not #131)
#638 := (or #127 #327)
#10 := (:var 0 S3)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#11 := (f3 #8 #9 #10)
#656 := (pattern #11)
#15 := (f4 #9 #10)
#75 := (= f1 #15)
#173 := (not #75)
#13 := (f4 #8 #10)
#72 := (= f1 #13)
#172 := (not #72)
#156 := (or #172 #173)
#157 := (not #156)
#69 := (= f1 #11)
#174 := (iff #69 #157)
#657 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #656) #174)
#177 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #174)
#660 := (iff #177 #657)
#658 := (iff #174 #174)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#78 := (and #72 #75)
#81 := (iff #69 #78)
#84 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #81)
#178 := (iff #84 #177)
#175 := (iff #81 #174)
#158 := (iff #78 #157)
#159 := [rewrite]: #158
#176 := [monotonicity #159]: #175
#179 := [quant-intro #176]: #178
#162 := (~ #84 #84)
#160 := (~ #81 #81)
#161 := [refl]: #160
#163 := [nnf-pos #161]: #162
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (and #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #18)
#85 := (iff #19 #84)
#82 := (iff #18 #81)
#79 := (iff #17 #78)
#76 := (iff #16 #75)
#77 := [rewrite]: #76
#73 := (iff #14 #72)
#74 := [rewrite]: #73
#80 := [monotonicity #74 #77]: #79
#70 := (iff #12 #69)
#71 := [rewrite]: #70
#83 := [monotonicity #71 #80]: #82
#86 := [quant-intro #83]: #85
#68 := [asserted]: #19
#89 := [mp #68 #86]: #84
#147 := [mp~ #89 #163]: #84
#180 := [mp #147 #179]: #177
#662 := [mp #180 #661]: #657
#654 := (not #657)
#649 := (or #654 #134)
#331 := (or #327 #327)
#328 := (not #331)
#332 := (iff #127 #328)
#655 := (or #654 #332)
#303 := (iff #655 #649)
#646 := (iff #649 #649)
#304 := [rewrite]: #646
#652 := (iff #332 #134)
#317 := (iff #328 #131)
#650 := (not #327)
#644 := (iff #650 #131)
#316 := [rewrite]: #644
#305 := (iff #328 #650)
#311 := (iff #331 #327)
#648 := [rewrite]: #311
#437 := [monotonicity #648]: #305
#651 := [trans #437 #316]: #317
#653 := [monotonicity #651]: #652
#308 := [monotonicity #653]: #303
#647 := [trans #308 #304]: #303
#645 := [quant-inst #41 #41 #42]: #655
#288 := [mp #645 #647]: #649
#632 := [unit-resolution #288 #662]: #134
#631 := (or #137 #127 #327)
#292 := [def-axiom]: #631
#274 := [unit-resolution #292 #632]: #638
#639 := [unit-resolution #274 #637 #636]: false
#641 := [lemma #639]: #127
#330 := (or #327 #140)
#318 := (or #327 #140 #238)
#329 := [def-axiom]: #318
#258 := [unit-resolution #329 #148]: #330
#279 := [unit-resolution #258 #641]: #327
#280 := (or #140 #131)
#293 := (or #137 #140 #131)
#294 := [def-axiom]: #293
#642 := [unit-resolution #294 #632]: #280
[unit-resolution #642 #279 #641]: false
unsat
2197c1dae16f488eb4bfcbae6c35e5ab268a4235 280 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#47 := f12
decl f4 :: (-> S2 S2 S2)
decl f10 :: S2
#43 := f10
decl f9 :: S2
#42 := f9
#50 := (f4 f9 f10)
#318 := (f3 #50 f12)
decl f1 :: S1
#4 := f1
#655 := (= f1 #318)
#253 := (f3 f10 f12)
#632 := (= f1 #253)
#629 := (not #632)
#343 := (f3 f9 f12)
#359 := (= f1 #343)
#360 := (not #359)
#618 := (or #360 #629)
#619 := (not #618)
#615 := (iff #619 #655)
#586 := (not #615)
decl f11 :: S2
#44 := f11
#338 := (f3 f11 f12)
#335 := (= f1 #338)
#339 := (not #335)
#488 := (or #339 #629)
#497 := (not #488)
#45 := (f4 f10 f11)
#650 := (f3 #45 f12)
#636 := (= f1 #650)
#498 := (iff #497 #636)
#591 := (not #498)
#571 := [hypothesis]: #591
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#10 := (f4 #8 #9)
#12 := (f3 #10 #11)
#663 := (pattern #12)
#16 := (f3 #9 #11)
#82 := (= f1 #16)
#180 := (not #82)
#14 := (f3 #8 #11)
#79 := (= f1 #14)
#179 := (not #79)
#163 := (or #179 #180)
#164 := (not #163)
#76 := (= f1 #12)
#181 := (iff #76 #164)
#664 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #663) #181)
#184 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #181)
#667 := (iff #184 #664)
#665 := (iff #181 #181)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#85 := (and #79 #82)
#88 := (iff #76 #85)
#91 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #88)
#185 := (iff #91 #184)
#182 := (iff #88 #181)
#165 := (iff #85 #164)
#166 := [rewrite]: #165
#183 := [monotonicity #166]: #182
#186 := [quant-intro #183]: #185
#169 := (~ #91 #91)
#167 := (~ #88 #88)
#168 := [refl]: #167
#170 := [nnf-pos #168]: #169
#17 := (= #16 f1)
#15 := (= #14 f1)
#18 := (and #15 #17)
#13 := (= #12 f1)
#19 := (iff #13 #18)
#20 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #19)
#92 := (iff #20 #91)
#89 := (iff #19 #88)
#86 := (iff #18 #85)
#83 := (iff #17 #82)
#84 := [rewrite]: #83
#80 := (iff #15 #79)
#81 := [rewrite]: #80
#87 := [monotonicity #81 #84]: #86
#77 := (iff #13 #76)
#78 := [rewrite]: #77
#90 := [monotonicity #78 #87]: #89
#93 := [quant-intro #90]: #92
#75 := [asserted]: #20
#96 := [mp #75 #93]: #91
#154 := [mp~ #96 #170]: #91
#187 := [mp #154 #186]: #184
#669 := [mp #187 #668]: #664
#310 := (not #664)
#502 := (or #310 #498)
#604 := (or #629 #339)
#486 := (not #604)
#487 := (iff #636 #486)
#503 := (or #310 #487)
#597 := (iff #503 #502)
#598 := (iff #502 #502)
#585 := [rewrite]: #598
#500 := (iff #487 #498)
#596 := (iff #636 #497)
#499 := (iff #596 #498)
#492 := [rewrite]: #499
#481 := (iff #487 #596)
#592 := (iff #486 #497)
#447 := (iff #604 #488)
#595 := [rewrite]: #447
#593 := [monotonicity #595]: #592
#496 := [monotonicity #593]: #481
#501 := [trans #496 #492]: #500
#594 := [monotonicity #501]: #597
#587 := [trans #594 #585]: #597
#504 := [quant-inst #43 #44 #47]: #503
#579 := [mp #504 #587]: #502
#572 := [unit-resolution #579 #669 #571]: false
#573 := [lemma #572]: #498
#637 := (not #636)
#361 := (or #360 #637)
#347 := (not #361)
#46 := (f4 f9 #45)
#48 := (f3 #46 f12)
#134 := (= f1 #48)
#147 := (not #134)
#574 := [hypothesis]: #147
#575 := (or #134 #361)
#362 := (iff #134 #347)
#633 := (or #310 #362)
#355 := [quant-inst #42 #45 #47]: #633
#570 := [unit-resolution #355 #669]: #362
#345 := (not #362)
#346 := (or #345 #134 #361)
#348 := [def-axiom]: #346
#561 := [unit-resolution #348 #570]: #575
#562 := [unit-resolution #561 #574]: #361
#601 := (or #310 #615)
#620 := (iff #655 #619)
#617 := (or #310 #620)
#622 := (iff #617 #601)
#465 := (iff #601 #601)
#466 := [rewrite]: #465
#616 := (iff #620 #615)
#621 := [rewrite]: #616
#464 := [monotonicity #621]: #622
#608 := [trans #464 #466]: #622
#623 := [quant-inst #42 #43 #47]: #617
#609 := [mp #623 #608]: #601
#564 := [unit-resolution #609 #669]: #615
#550 := (or #586 #619)
#657 := (not #655)
#323 := (or #339 #657)
#659 := (not #323)
#51 := (f4 #50 f11)
#52 := (f3 #51 f12)
#138 := (= f1 #52)
#333 := (or #138 #134)
#148 := (iff #138 #147)
#53 := (= #52 f1)
#49 := (= #48 f1)
#54 := (iff #49 #53)
#55 := (not #54)
#151 := (iff #55 #148)
#141 := (iff #134 #138)
#144 := (not #141)
#149 := (iff #144 #148)
#150 := [rewrite]: #149
#145 := (iff #55 #144)
#142 := (iff #54 #141)
#139 := (iff #53 #138)
#140 := [rewrite]: #139
#136 := (iff #49 #134)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#146 := [monotonicity #143]: #145
#152 := [trans #146 #150]: #151
#133 := [asserted]: #55
#155 := [mp #133 #152]: #148
#245 := (not #148)
#332 := (or #138 #134 #245)
#246 := [def-axiom]: #332
#247 := [unit-resolution #246 #155]: #333
#565 := [unit-resolution #247 #574]: #138
#334 := (not #138)
#563 := (or #334 #659)
#656 := (iff #138 #659)
#315 := (or #310 #656)
#312 := (or #657 #339)
#444 := (not #312)
#651 := (iff #138 #444)
#653 := (or #310 #651)
#654 := (iff #653 #315)
#638 := (iff #315 #315)
#299 := [rewrite]: #638
#662 := (iff #651 #656)
#660 := (iff #444 #659)
#324 := (iff #312 #323)
#658 := [rewrite]: #324
#661 := [monotonicity #658]: #660
#652 := [monotonicity #661]: #662
#295 := [monotonicity #652]: #654
#300 := [trans #295 #299]: #654
#311 := [quant-inst #50 #44 #47]: #653
#301 := [mp #311 #300]: #315
#566 := [unit-resolution #301 #669]: #656
#639 := (not #656)
#646 := (or #639 #334 #659)
#648 := [def-axiom]: #646
#567 := [unit-resolution #648 #566]: #563
#547 := [unit-resolution #567 #565]: #659
#641 := (or #323 #655)
#642 := [def-axiom]: #641
#548 := [unit-resolution #642 #547]: #655
#580 := (or #586 #619 #657)
#581 := [def-axiom]: #580
#551 := [unit-resolution #581 #548]: #550
#552 := [unit-resolution #551 #564]: #619
#610 := (or #618 #359)
#576 := [def-axiom]: #610
#553 := [unit-resolution #576 #552]: #359
#635 := (or #347 #360 #637)
#344 := [def-axiom]: #635
#554 := [unit-resolution #344 #553 #562]: #637
#302 := (or #323 #335)
#640 := [def-axiom]: #302
#555 := [unit-resolution #640 #547]: #335
#578 := (or #618 #632)
#588 := [def-axiom]: #578
#556 := [unit-resolution #588 #552]: #632
#613 := (or #497 #339 #629)
#607 := [def-axiom]: #613
#557 := [unit-resolution #607 #556 #555]: #497
#445 := (or #591 #488 #636)
#446 := [def-axiom]: #445
#558 := [unit-resolution #446 #557 #554 #573]: false
#559 := [lemma #558]: #134
#549 := (or #147 #347)
#626 := (or #345 #147 #347)
#627 := [def-axiom]: #626
#560 := [unit-resolution #627 #570]: #549
#538 := [unit-resolution #560 #559]: #347
#634 := (or #361 #636)
#631 := [def-axiom]: #634
#539 := [unit-resolution #631 #538]: #636
#614 := (or #591 #497 #637)
#443 := [def-axiom]: #614
#541 := [unit-resolution #443 #539 #573]: #497
#606 := (or #488 #632)
#612 := [def-axiom]: #606
#542 := [unit-resolution #612 #541]: #632
#356 := (or #361 #359)
#630 := [def-axiom]: #356
#543 := [unit-resolution #630 #538]: #359
#589 := (or #619 #360 #629)
#590 := [def-axiom]: #589
#544 := [unit-resolution #590 #543 #542]: #619
#337 := (or #334 #147)
#325 := (or #334 #147 #245)
#336 := [def-axiom]: #325
#265 := [unit-resolution #336 #155]: #337
#545 := [unit-resolution #265 #559]: #334
#540 := (or #138 #323)
#645 := (or #639 #138 #323)
#281 := [def-axiom]: #645
#546 := [unit-resolution #281 #566]: #540
#532 := [unit-resolution #546 #545]: #323
#611 := (or #488 #335)
#605 := [def-axiom]: #611
#528 := [unit-resolution #605 #541]: #335
#643 := (or #659 #339 #657)
#644 := [def-axiom]: #643
#529 := [unit-resolution #644 #528 #532]: #657
#582 := (or #586 #618 #655)
#583 := [def-axiom]: #582
#530 := [unit-resolution #583 #529 #544]: #586
[unit-resolution #609 #669 #530]: false
unsat
2b2ce778241d0cd9017eb9658fd16ee31fe3f28e 18 0
#2 := false
decl f9 :: S8
#41 := f9
#42 := (= f9 f9)
#43 := (not #42)
#130 := (iff #43 false)
#1 := true
#125 := (not true)
#128 := (iff #125 false)
#129 := [rewrite]: #128
#126 := (iff #43 #125)
#122 := (iff #42 true)
#124 := [rewrite]: #122
#127 := [monotonicity #124]: #126
#131 := [trans #127 #129]: #130
#121 := [asserted]: #43
[mp #121 #131]: false
unsat
