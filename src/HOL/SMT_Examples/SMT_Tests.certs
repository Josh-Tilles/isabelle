32bb24b231f8ef17d3b0def6817d84cc062a6d75 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (or #9 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#30 := (= f1 f3)
#33 := (not #30)
#36 := (or #30 #33)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 #33)
#31 := (iff #9 #30)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#38 := [monotonicity #32 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
d296070a9a1ad4678f3ec56cd19a634e50fd638a 8 0
#2 := false
#1 := true
#8 := (not true)
#26 := (iff #8 false)
#27 := [rewrite]: #26
#25 := [asserted]: #8
[mp #25 #27]: false
unsat
ae7e7a13c311c9f3e926d7f4a9307c3954711112 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (and #9 #10)
#12 := (not #11)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#44 := (not false)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #12 #44)
#42 := (iff #11 false)
#31 := (= f1 f3)
#34 := (not #31)
#37 := (and #31 #34)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#32 := (iff #9 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#39 := [monotonicity #33 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#30 := [asserted]: #13
[mp #30 #57]: false
unsat
5a2fbe7eaa720a0d1634e4c8ad246283132e9cb9 16 0
#2 := false
#8 := (not false)
#9 := (not #8)
#34 := (iff #9 false)
#1 := true
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
1818aabb2eeb93cf072a1c54b65c5fbc8da59afb 21 0
#2 := false
#1 := true
#8 := (not true)
#9 := (not #8)
#10 := (not #9)
#39 := (iff #10 false)
#28 := (iff #8 false)
#29 := [rewrite]: #28
#37 := (iff #10 #8)
#35 := (iff #9 true)
#30 := (not false)
#33 := (iff #30 true)
#34 := [rewrite]: #33
#31 := (iff #9 #30)
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#38 := [monotonicity #36]: #37
#40 := [trans #38 #29]: #39
#27 := [asserted]: #10
[mp #27 #40]: false
unsat
07720e913d13e1bf2c9278ea9348b2924d764925 65 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and false #9)
#13 := (or #12 #9)
#11 := (not #9)
#14 := (or #11 #13)
#1 := true
#10 := (and true #9)
#15 := (or #10 #14)
#16 := (not #15)
#80 := (iff #16 false)
#75 := (not true)
#78 := (iff #75 false)
#79 := [rewrite]: #78
#76 := (iff #16 #75)
#73 := (iff #15 true)
#34 := (= f1 f3)
#68 := (or #34 true)
#71 := (iff #68 true)
#72 := [rewrite]: #71
#69 := (iff #15 #68)
#66 := (iff #14 true)
#44 := (not #34)
#61 := (or #44 #34)
#64 := (iff #61 true)
#65 := [rewrite]: #64
#62 := (iff #14 #61)
#59 := (iff #13 #34)
#54 := (or false #34)
#57 := (iff #54 #34)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#52 := (iff #12 false)
#47 := (and false #34)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#49 := [monotonicity #36]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53 #36]: #55
#60 := [trans #56 #58]: #59
#45 := (iff #11 #44)
#46 := [monotonicity #36]: #45
#63 := [monotonicity #46 #60]: #62
#67 := [trans #63 #65]: #66
#42 := (iff #10 #34)
#37 := (and true #34)
#40 := (iff #37 #34)
#41 := [rewrite]: #40
#38 := (iff #10 #37)
#39 := [monotonicity #36]: #38
#43 := [trans #39 #41]: #42
#70 := [monotonicity #43 #67]: #69
#74 := [trans #70 #72]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#33 := [asserted]: #16
[mp #33 #81]: false
unsat
d3b6081bc1c34a0421e641acff757eaaefbf5bdf 16 0
#2 := false
#1 := true
#8 := (and true true)
#9 := (not #8)
#34 := (iff #9 false)
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
4613b1a9286522197f6752544018c3ecaea8838a 29 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (implies #9 #9)
#11 := (not #10)
#44 := (iff #11 false)
#1 := true
#39 := (not true)
#42 := (iff #39 false)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 true)
#29 := (= f1 f3)
#32 := (implies #29 #29)
#35 := (iff #32 true)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#30 := (iff #9 #29)
#31 := [rewrite]: #30
#34 := [monotonicity #31 #31]: #33
#38 := [trans #34 #36]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#28 := [asserted]: #11
[mp #28 #45]: false
unsat
3c555028924c0617a48e7816899f81fd171e8cc6 16 0
#2 := false
#1 := true
#8 := (or true false)
#9 := (not #8)
#34 := (iff #9 false)
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
280e0943c88a9613c460fbcd9ed182ff9d6c1d83 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (and #9 #10)
#12 := (implies #11 false)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#44 := (implies false false)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #12 #44)
#42 := (iff #11 false)
#31 := (= f1 f3)
#34 := (not #31)
#37 := (and #31 #34)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#32 := (iff #9 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#39 := [monotonicity #33 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#30 := [asserted]: #13
[mp #30 #57]: false
unsat
acdb6c4646d2fb215f71d2ce5c6780077ae4ef74 16 0
#2 := false
#1 := true
#8 := (implies false true)
#9 := (not #8)
#34 := (iff #9 false)
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
a6b55bc9321a8285602719107ebdeb043021388b 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (and #11 #9)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#61 := (iff #15 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #15 #56)
#54 := (iff #14 true)
#36 := (= f1 f4)
#33 := (= f1 f3)
#39 := (and #33 #36)
#49 := (implies #39 #39)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #14 #49)
#47 := (iff #13 #39)
#42 := (and #36 #33)
#45 := (iff #42 #39)
#46 := [rewrite]: #45
#43 := (iff #13 #42)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #35]: #43
#48 := [trans #44 #46]: #47
#40 := (iff #12 #39)
#41 := [monotonicity #35 #38]: #40
#51 := [monotonicity #41 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#32 := [asserted]: #15
[mp #32 #62]: false
unsat
09a1c146e8c9fb89362c0920e2565ce27aabf746 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (or #11 #9)
#12 := (or #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#61 := (iff #15 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #15 #56)
#54 := (iff #14 true)
#36 := (= f1 f4)
#33 := (= f1 f3)
#39 := (or #33 #36)
#49 := (implies #39 #39)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #14 #49)
#47 := (iff #13 #39)
#42 := (or #36 #33)
#45 := (iff #42 #39)
#46 := [rewrite]: #45
#43 := (iff #13 #42)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #35]: #43
#48 := [trans #44 #46]: #47
#40 := (iff #12 #39)
#41 := [monotonicity #35 #38]: #40
#51 := [monotonicity #41 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#32 := [asserted]: #15
[mp #32 #62]: false
unsat
fdcaeb48c0fe060c788599c1819f3c817e8284ea 55 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#33 := (= f1 f3)
#76 := (iff #33 false)
#66 := (not #33)
decl f4 :: S1
#10 := f4
#36 := (= f1 f4)
#39 := (and #33 #36)
#48 := (not #39)
#57 := (or #33 #36 #48)
#60 := (not #57)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (or #9 #11)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#63 := (iff #15 #60)
#42 := (or #33 #36)
#49 := (or #48 #42)
#54 := (not #49)
#61 := (iff #54 #60)
#58 := (iff #49 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#55 := (iff #15 #54)
#52 := (iff #14 #49)
#45 := (implies #39 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#44 := [monotonicity #35 #38]: #43
#40 := (iff #12 #39)
#41 := [monotonicity #35 #38]: #40
#47 := [monotonicity #41 #44]: #46
#53 := [trans #47 #51]: #52
#56 := [monotonicity #53]: #55
#64 := [trans #56 #62]: #63
#32 := [asserted]: #15
#65 := [mp #32 #64]: #60
#67 := [not-or-elim #65]: #66
#77 := [iff-false #67]: #76
#70 := [not-or-elim #65]: #39
#71 := [and-elim #70]: #33
[mp #71 #77]: false
unsat
c40695de865e974fcc0b75b4d6410d1fe4a01cbd 149 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#44 := (= f1 f5)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (ite #38 #41 #44)
#53 := (not #38)
#54 := (or #53 #41)
#64 := (or #38 #44)
#91 := (not #64)
#90 := (not #54)
#92 := (or #90 #91)
#143 := [hypothesis]: #90
#128 := (or #92 #54)
#129 := [def-axiom]: #128
#144 := [unit-resolution #129 #143]: #92
#78 := (not #47)
#116 := (or #54 #38)
#117 := [def-axiom]: #116
#145 := [unit-resolution #117 #143]: #38
#110 := (not #41)
#118 := (or #54 #110)
#119 := [def-axiom]: #118
#146 := [unit-resolution #119 #143]: #110
#106 := (or #78 #53 #41)
#107 := [def-axiom]: #106
#147 := [unit-resolution #107 #146 #145]: #78
#93 := (not #92)
#137 := (or #47 #93)
#100 := (iff #47 #92)
#69 := (and #54 #64)
#79 := (iff #69 #78)
#103 := (iff #79 #100)
#95 := (iff #92 #47)
#101 := (iff #95 #100)
#102 := [rewrite]: #101
#98 := (iff #79 #95)
#87 := (iff #93 #78)
#96 := (iff #87 #95)
#97 := [rewrite]: #96
#84 := (iff #79 #87)
#88 := (iff #69 #93)
#89 := [rewrite]: #88
#94 := [monotonicity #89]: #84
#99 := [trans #94 #97]: #98
#104 := [trans #99 #102]: #103
#13 := (= f5 f1)
#9 := (= f3 f1)
#16 := (not #9)
#17 := (implies #16 #13)
#11 := (= f4 f1)
#15 := (implies #9 #11)
#18 := (and #15 #17)
#14 := (ite #9 #11 #13)
#19 := (iff #14 #18)
#20 := (not #19)
#82 := (iff #20 #79)
#72 := (iff #47 #69)
#75 := (not #72)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #20 #75)
#73 := (iff #19 #72)
#70 := (iff #18 #69)
#67 := (iff #17 #64)
#61 := (implies #53 #44)
#65 := (iff #61 #64)
#66 := [rewrite]: #65
#62 := (iff #17 #61)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#59 := (iff #16 #53)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#60 := [monotonicity #40]: #59
#63 := [monotonicity #60 #46]: #62
#68 := [trans #63 #66]: #67
#57 := (iff #15 #54)
#50 := (implies #38 #41)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #15 #50)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#52 := [monotonicity #40 #43]: #51
#58 := [trans #52 #56]: #57
#71 := [monotonicity #58 #68]: #70
#48 := (iff #14 #47)
#49 := [monotonicity #40 #43 #46]: #48
#74 := [monotonicity #49 #71]: #73
#77 := [monotonicity #74]: #76
#83 := [trans #77 #81]: #82
#37 := [asserted]: #20
#86 := [mp #37 #83]: #79
#105 := [mp #86 #104]: #100
#134 := (not #100)
#135 := (or #47 #93 #134)
#136 := [def-axiom]: #135
#138 := [unit-resolution #136 #105]: #137
#148 := [unit-resolution #138 #147 #144]: false
#149 := [lemma #148]: #54
#150 := [hypothesis]: #78
#156 := (or #38 #47)
#151 := [unit-resolution #138 #150]: #93
#130 := (or #92 #64)
#131 := [def-axiom]: #130
#152 := [unit-resolution #131 #151]: #64
#153 := [hypothesis]: #53
#113 := (not #44)
#114 := (or #47 #38 #113)
#115 := [def-axiom]: #114
#154 := [unit-resolution #115 #153 #150]: #113
#126 := (or #91 #38 #44)
#127 := [def-axiom]: #126
#155 := [unit-resolution #127 #154 #153 #152]: false
#157 := [lemma #155]: #156
#158 := [unit-resolution #157 #150]: #38
#111 := (or #47 #53 #110)
#112 := [def-axiom]: #111
#159 := [unit-resolution #112 #158 #150]: #110
#120 := (or #90 #53 #41)
#121 := [def-axiom]: #120
#160 := [unit-resolution #121 #159 #158 #149]: false
#161 := [lemma #160]: #47
#141 := (or #78 #92)
#139 := (or #78 #92 #134)
#140 := [def-axiom]: #139
#142 := [unit-resolution #140 #105]: #141
#162 := [unit-resolution #142 #161]: #92
#132 := (or #93 #90 #91)
#133 := [def-axiom]: #132
#163 := [unit-resolution #133 #162 #149]: #91
#122 := (or #64 #53)
#123 := [def-axiom]: #122
#164 := [unit-resolution #123 #163]: #53
#124 := (or #64 #113)
#125 := [def-axiom]: #124
#165 := [unit-resolution #125 #163]: #113
#108 := (or #78 #38 #44)
#109 := [def-axiom]: #108
[unit-resolution #109 #165 #164 #161]: false
unsat
909eac5ac94649616c92660c5d2f8b06874b48dc 55 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (or #9 #11)
#13 := (not #12)
#15 := (implies #13 #14)
#16 := (not #15)
#69 := (iff #16 false)
#37 := (= f1 f4)
#34 := (= f1 f3)
#40 := (or #34 #37)
#46 := (not #34)
#52 := (or #46 #40)
#57 := (not #52)
#67 := (iff #57 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #57 #62)
#60 := (iff #52 true)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#58 := (iff #16 #57)
#55 := (iff #15 #52)
#43 := (not #40)
#49 := (implies #43 #46)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#48 := [monotonicity #36]: #47
#44 := (iff #13 #43)
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #36 #39]: #41
#45 := [monotonicity #42]: #44
#51 := [monotonicity #45 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#70 := [trans #59 #68]: #69
#33 := [asserted]: #16
[mp #33 #70]: false
unsat
4559f9cf103133ca42ad9e775fb6027fe7dbf044 66 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#33 := (= f1 f3)
#51 := (not #33)
#87 := [hypothesis]: #33
decl f4 :: S1
#10 := f4
#36 := (= f1 f4)
#42 := (not #36)
#43 := (or #33 #42)
#69 := (or #43 #51)
#70 := [def-axiom]: #69
#88 := [unit-resolution #70 #87]: #43
#67 := (not #43)
#89 := (or #51 #67)
#52 := (or #51 #36)
#57 := (ite #33 #43 #52)
#60 := (not #57)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (implies #9 #11)
#12 := (implies #11 #9)
#14 := (ite #9 #12 #13)
#15 := (not #14)
#61 := (iff #15 #60)
#58 := (iff #14 #57)
#55 := (iff #13 #52)
#48 := (implies #33 #36)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #13 #48)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#50 := [monotonicity #35 #38]: #49
#56 := [trans #50 #54]: #55
#46 := (iff #12 #43)
#39 := (implies #36 #33)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #12 #39)
#41 := [monotonicity #38 #35]: #40
#47 := [trans #41 #45]: #46
#59 := [monotonicity #35 #47 #56]: #58
#62 := [monotonicity #59]: #61
#32 := [asserted]: #15
#65 := [mp #32 #62]: #60
#83 := (or #57 #51 #67)
#84 := [def-axiom]: #83
#90 := [unit-resolution #84 #65]: #89
#91 := [unit-resolution #90 #88 #87]: false
#92 := [lemma #91]: #51
#63 := (or #52 #33)
#73 := [def-axiom]: #63
#93 := [unit-resolution #73 #92]: #52
#76 := (not #52)
#94 := (or #33 #76)
#85 := (or #57 #33 #76)
#86 := [def-axiom]: #85
#95 := [unit-resolution #86 #65]: #94
[unit-resolution #95 #93 #92]: false
unsat
70a5da534a7b49a4247fac1cedcc4b2d2d172e2d 55 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#14 := (not #11)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (not #12)
#15 := (implies #13 #14)
#16 := (not #15)
#69 := (iff #16 false)
#37 := (= f1 f4)
#34 := (= f1 f3)
#40 := (or #34 #37)
#46 := (not #37)
#52 := (or #46 #40)
#57 := (not #52)
#67 := (iff #57 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #57 #62)
#60 := (iff #52 true)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#58 := (iff #16 #57)
#55 := (iff #15 #52)
#43 := (not #40)
#49 := (implies #43 #46)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39]: #47
#44 := (iff #13 #43)
#41 := (iff #12 #40)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#42 := [monotonicity #36 #39]: #41
#45 := [monotonicity #42]: #44
#51 := [monotonicity #45 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#70 := [trans #59 #68]: #69
#33 := [asserted]: #16
[mp #33 #70]: false
unsat
453c8097706770edcac8e1bbb9fbf7c33a26c5af 67 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#18 := (ite #11 #14 #16)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#19 := (ite #9 #14 #18)
#12 := (or #9 #11)
#17 := (ite #12 #14 #16)
#20 := (iff #17 #19)
#21 := (not #20)
#79 := (iff #21 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #21 #74)
#72 := (iff #20 true)
#51 := (= f1 f6)
#48 := (= f1 f5)
#42 := (= f1 f4)
#39 := (= f1 f3)
#45 := (or #39 #42)
#54 := (ite #45 #48 #51)
#67 := (iff #54 #54)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #20 #67)
#65 := (iff #19 #54)
#57 := (ite #42 #48 #51)
#60 := (ite #39 #48 #57)
#63 := (iff #60 #54)
#64 := [rewrite]: #63
#61 := (iff #19 #60)
#58 := (iff #18 #57)
#52 := (iff #16 #51)
#53 := [rewrite]: #52
#49 := (iff #14 #48)
#50 := [rewrite]: #49
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#59 := [monotonicity #44 #50 #53]: #58
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#62 := [monotonicity #41 #50 #59]: #61
#66 := [trans #62 #64]: #65
#55 := (iff #17 #54)
#46 := (iff #12 #45)
#47 := [monotonicity #41 #44]: #46
#56 := [monotonicity #47 #50 #53]: #55
#69 := [monotonicity #56 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#38 := [asserted]: #21
[mp #38 #80]: false
unsat
66bc415bc7b672ad9bd08a5cad7193639ca92341 49 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#34 := (= f1 f3)
#68 := (iff #34 false)
#37 := (not #34)
decl f4 :: S1
#11 := f4
#40 := (= f1 f4)
#43 := (and #34 #40)
#46 := (not #43)
#52 := (or #34 #46)
#57 := (not #52)
#12 := (= f4 f1)
#9 := (= f3 f1)
#13 := (and #9 #12)
#14 := (not #13)
#10 := (not #9)
#15 := (implies #10 #14)
#16 := (not #15)
#58 := (iff #16 #57)
#55 := (iff #15 #52)
#49 := (implies #37 #46)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#41 := (iff #12 #40)
#42 := [rewrite]: #41
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#45 := [monotonicity #36 #42]: #44
#48 := [monotonicity #45]: #47
#38 := (iff #10 #37)
#39 := [monotonicity #36]: #38
#51 := [monotonicity #39 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#33 := [asserted]: #16
#62 := [mp #33 #59]: #57
#60 := [not-or-elim #62]: #37
#69 := [iff-false #60]: #68
#61 := [not-or-elim #62]: #43
#63 := [and-elim #61]: #34
[mp #63 #69]: false
unsat
a89676df4461617062c6e78fd5ffdff83f5ac142 54 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#34 := (= f1 f3)
#73 := (iff #34 false)
#37 := (not #34)
decl f4 :: S1
#11 := f4
#40 := (= f1 f4)
#46 := (and #34 #40)
#51 := (not #46)
#57 := (or #34 #51)
#62 := (not #57)
#9 := (= f3 f1)
#12 := (= f4 f1)
#13 := (and #12 #9)
#14 := (not #13)
#10 := (not #9)
#15 := (implies #10 #14)
#16 := (not #15)
#63 := (iff #16 #62)
#60 := (iff #15 #57)
#54 := (implies #37 #51)
#58 := (iff #54 #57)
#59 := [rewrite]: #58
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#43 := (and #40 #34)
#47 := (iff #43 #46)
#48 := [rewrite]: #47
#44 := (iff #13 #43)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#41 := (iff #12 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42 #36]: #44
#50 := [trans #45 #48]: #49
#53 := [monotonicity #50]: #52
#38 := (iff #10 #37)
#39 := [monotonicity #36]: #38
#56 := [monotonicity #39 #53]: #55
#61 := [trans #56 #59]: #60
#64 := [monotonicity #61]: #63
#33 := [asserted]: #16
#67 := [mp #33 #64]: #62
#65 := [not-or-elim #67]: #37
#74 := [iff-false #65]: #73
#66 := [not-or-elim #67]: #46
#68 := [and-elim #66]: #34
[mp #68 #74]: false
unsat
650ce0aefeedeac8455717747dd9f90168da27bb 67 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#18 := (ite #11 #14 #16)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#19 := (ite #9 #18 #16)
#12 := (and #9 #11)
#17 := (ite #12 #14 #16)
#20 := (iff #17 #19)
#21 := (not #20)
#79 := (iff #21 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #21 #74)
#72 := (iff #20 true)
#51 := (= f1 f6)
#48 := (= f1 f5)
#42 := (= f1 f4)
#39 := (= f1 f3)
#45 := (and #39 #42)
#54 := (ite #45 #48 #51)
#67 := (iff #54 #54)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #20 #67)
#65 := (iff #19 #54)
#57 := (ite #42 #48 #51)
#60 := (ite #39 #57 #51)
#63 := (iff #60 #54)
#64 := [rewrite]: #63
#61 := (iff #19 #60)
#52 := (iff #16 #51)
#53 := [rewrite]: #52
#58 := (iff #18 #57)
#49 := (iff #14 #48)
#50 := [rewrite]: #49
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#59 := [monotonicity #44 #50 #53]: #58
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#62 := [monotonicity #41 #59 #53]: #61
#66 := [trans #62 #64]: #65
#55 := (iff #17 #54)
#46 := (iff #12 #45)
#47 := [monotonicity #41 #44]: #46
#56 := [monotonicity #47 #50 #53]: #55
#69 := [monotonicity #56 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#38 := [asserted]: #21
[mp #38 #80]: false
unsat
36f523bdbc2a966d0da47f8c8e1a18b288089cd4 60 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#39 := (= f1 f4)
#48 := (not #39)
decl f3 :: S1
#8 := f3
#36 := (= f1 f3)
#45 := (not #36)
#51 := (or #45 #48)
#42 := (and #36 #39)
#64 := (iff #42 #51)
#71 := (iff #64 false)
#54 := (not #51)
#75 := (iff #54 #51)
#72 := (iff #75 false)
#73 := [rewrite]: #72
#76 := (iff #64 #75)
#57 := (iff #42 #54)
#74 := [rewrite]: #57
#77 := [monotonicity #74]: #76
#68 := [trans #77 #73]: #71
#11 := (= f4 f1)
#14 := (not #11)
#9 := (= f3 f1)
#13 := (not #9)
#15 := (or #13 #14)
#16 := (not #15)
#12 := (and #9 #11)
#17 := (iff #12 #16)
#18 := (not #17)
#66 := (iff #18 #64)
#60 := (not #57)
#63 := (iff #60 #64)
#65 := [rewrite]: #63
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #51)
#49 := (iff #14 #48)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#50 := [monotonicity #41]: #49
#46 := (iff #13 #45)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#47 := [monotonicity #38]: #46
#53 := [monotonicity #47 #50]: #52
#56 := [monotonicity #53]: #55
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#59 := [monotonicity #44 #56]: #58
#62 := [monotonicity #59]: #61
#67 := [trans #62 #65]: #66
#35 := [asserted]: #18
#70 := [mp #35 #67]: #64
[mp #70 #68]: false
unsat
ee0014e770bb12c9a43047b17bc55a374085eace 186 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#59 := (not #41)
#76 := (or #59 #47)
#119 := (not #76)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#68 := (or #59 #44)
decl f6 :: S1
#14 := f6
#50 := (= f1 f6)
#84 := (or #59 #50)
#89 := (ite #68 #76 #84)
#130 := (not #89)
#53 := (ite #44 #47 #50)
#60 := (or #59 #53)
#112 := (not #44)
#165 := [hypothesis]: #112
#172 := (or #60 #44)
#98 := (not #60)
#163 := [hypothesis]: #98
#148 := (or #60 #41)
#149 := [def-axiom]: #148
#164 := [unit-resolution #149 #163]: #41
#124 := (not #50)
#139 := (not #53)
#150 := (or #60 #139)
#151 := [def-axiom]: #150
#166 := [unit-resolution #151 #163]: #139
#146 := (or #53 #44 #124)
#147 := [def-axiom]: #146
#167 := [unit-resolution #147 #166 #165]: #124
#157 := (or #89 #60)
#99 := (iff #89 #98)
#15 := (= f6 f1)
#9 := (= f3 f1)
#20 := (implies #9 #15)
#13 := (= f5 f1)
#19 := (implies #9 #13)
#11 := (= f4 f1)
#18 := (implies #9 #11)
#21 := (ite #18 #19 #20)
#16 := (ite #11 #13 #15)
#17 := (implies #9 #16)
#22 := (iff #17 #21)
#23 := (not #22)
#102 := (iff #23 #99)
#92 := (iff #60 #89)
#95 := (not #92)
#100 := (iff #95 #99)
#101 := [rewrite]: #100
#96 := (iff #23 #95)
#93 := (iff #22 #92)
#90 := (iff #21 #89)
#87 := (iff #20 #84)
#81 := (implies #41 #50)
#85 := (iff #81 #84)
#86 := [rewrite]: #85
#82 := (iff #20 #81)
#51 := (iff #15 #50)
#52 := [rewrite]: #51
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#83 := [monotonicity #43 #52]: #82
#88 := [trans #83 #86]: #87
#79 := (iff #19 #76)
#73 := (implies #41 #47)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #19 #73)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#75 := [monotonicity #43 #49]: #74
#80 := [trans #75 #78]: #79
#71 := (iff #18 #68)
#65 := (implies #41 #44)
#69 := (iff #65 #68)
#70 := [rewrite]: #69
#66 := (iff #18 #65)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#67 := [monotonicity #43 #46]: #66
#72 := [trans #67 #70]: #71
#91 := [monotonicity #72 #80 #88]: #90
#63 := (iff #17 #60)
#56 := (implies #41 #53)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #17 #56)
#54 := (iff #16 #53)
#55 := [monotonicity #46 #49 #52]: #54
#58 := [monotonicity #43 #55]: #57
#64 := [trans #58 #62]: #63
#94 := [monotonicity #64 #91]: #93
#97 := [monotonicity #94]: #96
#103 := [trans #97 #101]: #102
#40 := [asserted]: #23
#106 := [mp #40 #103]: #99
#154 := (not #99)
#155 := (or #89 #60 #154)
#156 := [def-axiom]: #155
#158 := [unit-resolution #156 #106]: #157
#168 := [unit-resolution #158 #163]: #89
#109 := (not #68)
#107 := (or #109 #59 #44)
#104 := [def-axiom]: #107
#169 := [unit-resolution #104 #164 #165]: #109
#133 := (or #130 #68 #84)
#134 := [def-axiom]: #133
#170 := [unit-resolution #134 #169 #168]: #84
#127 := (not #84)
#128 := (or #127 #59 #50)
#129 := [def-axiom]: #128
#171 := [unit-resolution #129 #170 #167 #164]: false
#173 := [lemma #171]: #172
#176 := [unit-resolution #173 #165]: #60
#161 := (or #130 #98)
#159 := (or #130 #98 #154)
#160 := [def-axiom]: #159
#162 := [unit-resolution #160 #106]: #161
#182 := [unit-resolution #162 #176]: #130
#180 := (or #84 #44)
#174 := [hypothesis]: #127
#125 := (or #84 #124)
#126 := [def-axiom]: #125
#175 := [unit-resolution #126 #174]: #124
#122 := (or #84 #41)
#123 := [def-axiom]: #122
#177 := [unit-resolution #123 #174]: #41
#152 := (or #98 #59 #53)
#153 := [def-axiom]: #152
#178 := [unit-resolution #153 #177 #176]: #53
#142 := (or #139 #44 #50)
#143 := [def-axiom]: #142
#179 := [unit-resolution #143 #178 #175 #165]: false
#181 := [lemma #179]: #180
#183 := [unit-resolution #181 #165]: #84
#137 := (or #89 #68 #127)
#138 := [def-axiom]: #137
#184 := [unit-resolution #138 #183 #182]: #68
#135 := (or #89 #109 #119)
#136 := [def-axiom]: #135
#185 := [unit-resolution #136 #184 #182]: #119
#186 := [unit-resolution #104 #184 #165]: #59
#114 := (or #76 #41)
#115 := [def-axiom]: #114
#187 := [unit-resolution #115 #186 #185]: false
#188 := [lemma #187]: #44
#113 := (or #68 #112)
#108 := [def-axiom]: #113
#191 := [unit-resolution #108 #188]: #68
#189 := [hypothesis]: #59
#190 := [unit-resolution #149 #189]: #60
#192 := [unit-resolution #115 #189]: #76
#193 := [unit-resolution #136 #192 #191]: #89
#194 := [unit-resolution #162 #193 #190]: false
#195 := [lemma #194]: #41
#116 := (not #47)
#144 := (or #53 #112 #116)
#145 := [def-axiom]: #144
#196 := [unit-resolution #145 #166 #188]: #116
#131 := (or #130 #109 #76)
#132 := [def-axiom]: #131
#197 := [unit-resolution #132 #168 #191]: #76
#120 := (or #119 #59 #47)
#121 := [def-axiom]: #120
#198 := [unit-resolution #121 #197 #196 #195]: false
#199 := [lemma #198]: #60
#200 := [unit-resolution #162 #199]: #130
#201 := [unit-resolution #136 #200 #191]: #119
#202 := [unit-resolution #153 #199 #195]: #53
#140 := (or #139 #112 #47)
#141 := [def-axiom]: #140
#203 := [unit-resolution #141 #202 #188]: #47
#117 := (or #76 #116)
#118 := [def-axiom]: #117
[unit-resolution #118 #203 #201]: false
unsat
39e898ce622db033d98d0949c6c78d8d13333283 79 0
#2 := false
decl f1 :: S1
#4 := f1
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#16 := (and #11 #14)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#17 := (and #9 #16)
#12 := (and #9 #11)
#15 := (and #12 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#92 := (iff #19 false)
#46 := (= f1 f5)
#40 := (= f1 f4)
#52 := (and #40 #46)
#37 := (= f1 f3)
#55 := (and #37 #52)
#43 := (and #37 #40)
#49 := (and #43 #46)
#61 := (not #49)
#62 := (or #61 #55)
#67 := (not #62)
#90 := (iff #67 false)
#1 := true
#85 := (not true)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #67 #85)
#83 := (iff #62 true)
#70 := (and #37 #40 #46)
#73 := (not #70)
#78 := (or #73 #70)
#81 := (iff #78 true)
#82 := [rewrite]: #81
#79 := (iff #62 #78)
#76 := (iff #55 #70)
#77 := [rewrite]: #76
#74 := (iff #61 #73)
#71 := (iff #49 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#80 := [monotonicity #75 #77]: #79
#84 := [trans #80 #82]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#68 := (iff #19 #67)
#65 := (iff #18 #62)
#58 := (implies #49 #55)
#63 := (iff #58 #62)
#64 := [rewrite]: #63
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#53 := (iff #16 #52)
#47 := (iff #14 #46)
#48 := [rewrite]: #47
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#54 := [monotonicity #42 #48]: #53
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#57 := [monotonicity #39 #54]: #56
#50 := (iff #15 #49)
#44 := (iff #12 #43)
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#60 := [monotonicity #51 #57]: #59
#66 := [trans #60 #64]: #65
#69 := [monotonicity #66]: #68
#93 := [trans #69 #91]: #92
#36 := [asserted]: #19
[mp #36 #93]: false
unsat
412649a38963841ee4cc1fd44ea953cb67369cff 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (ite #9 #9 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#30 := (= f1 f3)
#33 := (not #30)
#36 := (ite #30 #30 #33)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 #33)
#31 := (iff #9 #30)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#38 := [monotonicity #32 #32 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
3d76513bcca35d0b89ae8be9bed98213f01644cc 94 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#46 := (= f1 f5)
decl f4 :: S1
#10 := f4
#40 := (= f1 f4)
decl f3 :: S1
#8 := f3
#37 := (= f1 f3)
#70 := (or #37 #40 #46)
#111 := (iff #70 false)
#106 := (or false false false)
#109 := (iff #106 false)
#110 := [rewrite]: #109
#107 := (iff #70 #106)
#104 := (iff #46 false)
#94 := (not #46)
#73 := (not #70)
#79 := (or #37 #40 #46 #73)
#84 := (not #79)
#14 := (= f5 f1)
#11 := (= f4 f1)
#16 := (or #11 #14)
#9 := (= f3 f1)
#17 := (or #9 #16)
#12 := (or #9 #11)
#15 := (or #12 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#87 := (iff #19 #84)
#52 := (or #40 #46)
#55 := (or #37 #52)
#43 := (or #37 #40)
#49 := (or #43 #46)
#61 := (not #49)
#62 := (or #61 #55)
#67 := (not #62)
#85 := (iff #67 #84)
#82 := (iff #62 #79)
#76 := (or #73 #55)
#80 := (iff #76 #79)
#81 := [rewrite]: #80
#77 := (iff #62 #76)
#74 := (iff #61 #73)
#71 := (iff #49 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#83 := [trans #78 #81]: #82
#86 := [monotonicity #83]: #85
#68 := (iff #19 #67)
#65 := (iff #18 #62)
#58 := (implies #49 #55)
#63 := (iff #58 #62)
#64 := [rewrite]: #63
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#53 := (iff #16 #52)
#47 := (iff #14 #46)
#48 := [rewrite]: #47
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#54 := [monotonicity #42 #48]: #53
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#57 := [monotonicity #39 #54]: #56
#50 := (iff #15 #49)
#44 := (iff #12 #43)
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#60 := [monotonicity #51 #57]: #59
#66 := [trans #60 #64]: #65
#69 := [monotonicity #66]: #68
#88 := [trans #69 #86]: #87
#36 := [asserted]: #19
#89 := [mp #36 #88]: #84
#95 := [not-or-elim #89]: #94
#105 := [iff-false #95]: #104
#102 := (iff #40 false)
#92 := (not #40)
#93 := [not-or-elim #89]: #92
#103 := [iff-false #93]: #102
#100 := (iff #37 false)
#90 := (not #37)
#91 := [not-or-elim #89]: #90
#101 := [iff-false #91]: #100
#108 := [monotonicity #101 #103 #105]: #107
#112 := [trans #108 #110]: #111
#96 := [not-or-elim #89]: #70
[mp #96 #112]: false
unsat
cdb5c3594738ea620a30a8c35e72deba5b933ff1 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (ite #10 #10 #9)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#30 := (= f1 f3)
#33 := (not #30)
#36 := (ite #33 #33 #30)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#31 := (iff #9 #30)
#32 := [rewrite]: #31
#34 := (iff #10 #33)
#35 := [monotonicity #32]: #34
#38 := [monotonicity #35 #35 #32]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
e872baf26281e471c8aad88c06ade50a163a8bf9 114 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
#116 := (not #47)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#53 := (or #38 #47)
#94 := (not #53)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#56 := (or #41 #47)
#95 := (not #56)
#127 := [hypothesis]: #95
#123 := (or #56 #116)
#124 := [def-axiom]: #123
#128 := [unit-resolution #124 #127]: #116
#86 := (not #41)
#85 := (not #38)
#87 := (or #85 #86)
#121 := (or #56 #86)
#122 := [def-axiom]: #121
#129 := [unit-resolution #122 #127]: #86
#110 := (or #87 #41)
#111 := [def-axiom]: #110
#130 := [unit-resolution #111 #129]: #87
#88 := (not #87)
#78 := (or #47 #88)
#44 := (and #38 #41)
#50 := (or #44 #47)
#91 := (iff #50 #78)
#81 := (or #88 #47)
#89 := (iff #81 #78)
#90 := [rewrite]: #89
#82 := (iff #50 #81)
#83 := (iff #44 #88)
#84 := [rewrite]: #83
#80 := [monotonicity #84]: #82
#92 := [trans #80 #90]: #91
#59 := (and #53 #56)
#65 := (not #50)
#66 := (or #65 #59)
#71 := (not #66)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (or #11 #14)
#9 := (= f3 f1)
#16 := (or #9 #14)
#18 := (and #16 #17)
#12 := (and #9 #11)
#15 := (or #12 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#72 := (iff #20 #71)
#69 := (iff #19 #66)
#62 := (implies #50 #59)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#58 := [monotonicity #43 #49]: #57
#54 := (iff #16 #53)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#55 := [monotonicity #40 #49]: #54
#61 := [monotonicity #55 #58]: #60
#51 := (iff #15 #50)
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [monotonicity #46 #49]: #51
#64 := [monotonicity #52 #61]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70]: #72
#37 := [asserted]: #20
#76 := [mp #37 #73]: #71
#74 := [not-or-elim #76]: #50
#93 := [mp #74 #92]: #78
#131 := [unit-resolution #93 #130 #128]: false
#132 := [lemma #131]: #56
#96 := (or #94 #95)
#75 := (not #59)
#105 := (iff #75 #96)
#97 := (not #96)
#100 := (not #97)
#103 := (iff #100 #96)
#104 := [rewrite]: #103
#101 := (iff #75 #100)
#98 := (iff #59 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#77 := [not-or-elim #76]: #75
#107 := [mp #77 #106]: #96
#133 := [unit-resolution #107 #132]: #94
#117 := (or #53 #116)
#118 := [def-axiom]: #117
#134 := [unit-resolution #118 #133]: #116
#114 := (or #53 #85)
#115 := [def-axiom]: #114
#135 := [unit-resolution #115 #133]: #85
#108 := (or #87 #38)
#109 := [def-axiom]: #108
#136 := [unit-resolution #109 #135]: #87
[unit-resolution #93 #136 #134]: false
unsat
b64bc0bcf45eb1767f3ac5eb748f88080f2b2bee 121 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#61 := (and #38 #47)
#98 := (not #61)
#137 := (iff #98 false)
#1 := true
#132 := (not true)
#135 := (iff #132 false)
#136 := [rewrite]: #135
#133 := (iff #98 #132)
#130 := (iff #61 true)
#125 := (and true true)
#128 := (iff #125 true)
#129 := [rewrite]: #128
#126 := (iff #61 #125)
#123 := (iff #47 true)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#53 := (or #41 #47)
#120 := (iff #53 #47)
#115 := (or false #47)
#118 := (iff #115 #47)
#119 := [rewrite]: #118
#116 := (iff #53 #115)
#103 := (iff #41 false)
#93 := (not #41)
#44 := (or #38 #41)
#58 := (and #44 #53)
#75 := (not #58)
#84 := (or #41 #75 #61)
#87 := (not #84)
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (and #9 #14)
#18 := (or #17 #11)
#15 := (or #14 #11)
#12 := (or #9 #11)
#16 := (and #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#90 := (iff #20 #87)
#67 := (or #41 #61)
#76 := (or #75 #67)
#81 := (not #76)
#88 := (iff #81 #87)
#85 := (iff #76 #84)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#82 := (iff #20 #81)
#79 := (iff #19 #76)
#72 := (implies #58 #67)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #19 #72)
#70 := (iff #18 #67)
#64 := (or #61 #41)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #18 #64)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#62 := (iff #17 #61)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#63 := [monotonicity #40 #49]: #62
#66 := [monotonicity #63 #43]: #65
#71 := [trans #66 #69]: #70
#59 := (iff #16 #58)
#56 := (iff #15 #53)
#50 := (or #47 #41)
#54 := (iff #50 #53)
#55 := [rewrite]: #54
#51 := (iff #15 #50)
#52 := [monotonicity #49 #43]: #51
#57 := [trans #52 #55]: #56
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#60 := [monotonicity #46 #57]: #59
#74 := [monotonicity #60 #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80]: #82
#91 := [trans #83 #89]: #90
#37 := [asserted]: #20
#92 := [mp #37 #91]: #87
#94 := [not-or-elim #92]: #93
#104 := [iff-false #94]: #103
#117 := [monotonicity #104]: #116
#121 := [trans #117 #119]: #120
#95 := [not-or-elim #92]: #58
#97 := [and-elim #95]: #53
#122 := [mp #97 #121]: #47
#124 := [iff-true #122]: #123
#113 := (iff #38 true)
#110 := (iff #44 #38)
#105 := (or #38 false)
#108 := (iff #105 #38)
#109 := [rewrite]: #108
#106 := (iff #44 #105)
#107 := [monotonicity #104]: #106
#111 := [trans #107 #109]: #110
#96 := [and-elim #95]: #44
#112 := [mp #96 #111]: #38
#114 := [iff-true #112]: #113
#127 := [monotonicity #114 #124]: #126
#131 := [trans #127 #129]: #130
#134 := [monotonicity #131]: #133
#138 := [trans #134 #136]: #137
#99 := [not-or-elim #92]: #98
[mp #99 #138]: false
unsat
3fdfe28cd079db59b06011ec3a9e5833720e3939 18 0
#2 := false
decl f3 :: S2
#8 := f3
#9 := (= f3 f3)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
138a3ace8cb85475ff652dca20ea653b9ddc0574 29 0
#2 := false
decl f3 :: S2
#8 := f3
decl f4 :: S2
#9 := f4
#11 := (= f4 f3)
#10 := (= f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#45 := (iff #13 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #13 #40)
#38 := (iff #12 true)
#33 := (implies #10 #10)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #12 #33)
#31 := (iff #11 #10)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #13
[mp #30 #46]: false
unsat
c9da60152fdcf3358171ced892606def006be235 110 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#44 := (or #38 #41)
#128 := (iff #44 false)
#123 := (or false false)
#126 := (iff #123 false)
#127 := [rewrite]: #126
#124 := (iff #44 #123)
#121 := (iff #41 false)
#117 := (not #41)
decl f5 :: S1
#13 := f5
#47 := (= f1 f5)
#56 := (and #41 #47)
#88 := (not #56)
#118 := (iff #88 #117)
#115 := (iff #56 #41)
#1 := true
#110 := (and #41 true)
#113 := (iff #110 #41)
#114 := [rewrite]: #113
#111 := (iff #56 #110)
#95 := (iff #47 true)
#50 := (and #44 #47)
#53 := (and #38 #47)
#65 := (not #50)
#74 := (or #65 #53 #56)
#77 := (not #74)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (and #11 #14)
#9 := (= f3 f1)
#16 := (and #9 #14)
#18 := (or #16 #17)
#12 := (or #9 #11)
#15 := (and #12 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#80 := (iff #20 #77)
#59 := (or #53 #56)
#66 := (or #65 #59)
#71 := (not #66)
#78 := (iff #71 #77)
#75 := (iff #66 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#72 := (iff #20 #71)
#69 := (iff #19 #66)
#62 := (implies #50 #59)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#58 := [monotonicity #43 #49]: #57
#54 := (iff #16 #53)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#55 := [monotonicity #40 #49]: #54
#61 := [monotonicity #55 #58]: #60
#51 := (iff #15 #50)
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [monotonicity #46 #49]: #51
#64 := [monotonicity #52 #61]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70]: #72
#81 := [trans #73 #79]: #80
#37 := [asserted]: #20
#82 := [mp #37 #81]: #77
#83 := [not-or-elim #82]: #50
#85 := [and-elim #83]: #47
#96 := [iff-true #85]: #95
#112 := [monotonicity #96]: #111
#116 := [trans #112 #114]: #115
#119 := [monotonicity #116]: #118
#89 := [not-or-elim #82]: #88
#120 := [mp #89 #119]: #117
#122 := [iff-false #120]: #121
#108 := (iff #38 false)
#104 := (not #38)
#86 := (not #53)
#105 := (iff #86 #104)
#102 := (iff #53 #38)
#97 := (and #38 true)
#100 := (iff #97 #38)
#101 := [rewrite]: #100
#98 := (iff #53 #97)
#99 := [monotonicity #96]: #98
#103 := [trans #99 #101]: #102
#106 := [monotonicity #103]: #105
#87 := [not-or-elim #82]: #86
#107 := [mp #87 #106]: #104
#109 := [iff-false #107]: #108
#125 := [monotonicity #109 #122]: #124
#129 := [trans #125 #127]: #128
#84 := [and-elim #83]: #44
[mp #84 #129]: false
unsat
2aab8007d3f04ab47357a32e4f86dbadd477fa43 34 0
#2 := false
decl f5 :: S2
#11 := f5
decl f3 :: S2
#8 := f3
#14 := (= f3 f5)
decl f4 :: S2
#9 := f4
#12 := (= f4 f5)
#58 := (iff #12 #14)
#56 := (iff #14 #12)
#10 := (= f3 f4)
#13 := (and #10 #12)
#34 := (not #13)
#35 := (or #34 #14)
#38 := (not #35)
#15 := (implies #13 #14)
#16 := (not #15)
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#33 := [asserted]: #16
#43 := [mp #33 #40]: #38
#41 := [not-or-elim #43]: #13
#42 := [and-elim #41]: #10
#57 := [monotonicity #42]: #56
#59 := [symm #57]: #58
#44 := [and-elim #41]: #12
#54 := [mp #44 #59]: #14
#45 := (not #14)
#46 := [not-or-elim #43]: #45
[unit-resolution #46 #54]: false
unsat
1f8e71f0583db493868b682b87713e9591cb7a07 127 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
#91 := (not #47)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#96 := (not #41)
#92 := (or #96 #91)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#61 := (or #38 #47)
#95 := (not #38)
#97 := (or #95 #96)
#109 := (not #61)
#140 := [hypothesis]: #109
#134 := (or #61 #95)
#135 := [def-axiom]: #134
#141 := [unit-resolution #135 #140]: #95
#128 := (or #97 #38)
#129 := [def-axiom]: #128
#142 := [unit-resolution #129 #141]: #97
#136 := (or #61 #91)
#137 := [def-axiom]: #136
#143 := [unit-resolution #137 #140]: #91
#124 := (or #92 #47)
#125 := [def-axiom]: #124
#144 := [unit-resolution #125 #143]: #92
#98 := (not #97)
#90 := (not #92)
#103 := (or #90 #98)
#53 := (and #41 #47)
#44 := (and #38 #41)
#58 := (or #44 #53)
#106 := (iff #58 #103)
#100 := (or #98 #90)
#104 := (iff #100 #103)
#105 := [rewrite]: #104
#101 := (iff #58 #100)
#88 := (iff #53 #90)
#99 := [rewrite]: #88
#93 := (iff #44 #98)
#94 := [rewrite]: #93
#102 := [monotonicity #94 #99]: #101
#107 := [trans #102 #105]: #106
#67 := (and #41 #61)
#75 := (not #58)
#76 := (or #75 #67)
#81 := (not #76)
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (or #9 #14)
#18 := (and #17 #11)
#15 := (and #14 #11)
#12 := (and #9 #11)
#16 := (or #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#82 := (iff #20 #81)
#79 := (iff #19 #76)
#72 := (implies #58 #67)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #19 #72)
#70 := (iff #18 #67)
#64 := (and #61 #41)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #18 #64)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#62 := (iff #17 #61)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#63 := [monotonicity #40 #49]: #62
#66 := [monotonicity #63 #43]: #65
#71 := [trans #66 #69]: #70
#59 := (iff #16 #58)
#56 := (iff #15 #53)
#50 := (and #47 #41)
#54 := (iff #50 #53)
#55 := [rewrite]: #54
#51 := (iff #15 #50)
#52 := [monotonicity #49 #43]: #51
#57 := [trans #52 #55]: #56
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#60 := [monotonicity #46 #57]: #59
#74 := [monotonicity #60 #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80]: #82
#37 := [asserted]: #20
#86 := [mp #37 #83]: #81
#84 := [not-or-elim #86]: #58
#108 := [mp #84 #107]: #103
#145 := [unit-resolution #108 #144 #142]: false
#146 := [lemma #145]: #61
#110 := (or #96 #109)
#85 := (not #67)
#119 := (iff #85 #110)
#111 := (not #110)
#114 := (not #111)
#117 := (iff #114 #110)
#118 := [rewrite]: #117
#115 := (iff #85 #114)
#112 := (iff #67 #111)
#113 := [rewrite]: #112
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#87 := [not-or-elim #86]: #85
#121 := [mp #87 #120]: #110
#147 := [unit-resolution #121 #146]: #96
#122 := (or #92 #41)
#123 := [def-axiom]: #122
#148 := [unit-resolution #123 #147]: #92
#130 := (or #97 #41)
#131 := [def-axiom]: #130
#149 := [unit-resolution #131 #147]: #97
[unit-resolution #108 #149 #148]: false
unsat
5aeacb8767661e0089f1bee00da51c74406606e7 27 0
#2 := false
decl f5 :: (-> S2 S2)
decl f4 :: S2
#9 := f4
#12 := (f5 f4)
decl f3 :: S2
#8 := f3
#11 := (f5 f3)
#13 := (= #11 #12)
#10 := (= f3 f4)
#33 := (not #10)
#34 := (or #33 #13)
#37 := (not #34)
#14 := (implies #10 #13)
#15 := (not #14)
#38 := (iff #15 #37)
#35 := (iff #14 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#32 := [asserted]: #15
#42 := [mp #32 #39]: #37
#40 := [not-or-elim #42]: #10
#51 := [monotonicity #40]: #13
#41 := (not #13)
#43 := [not-or-elim #42]: #41
[unit-resolution #43 #51]: false
unsat
818dc7a805c1fc0df63db969a20606d71bab3c5a 66 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#33 := (= f1 f3)
decl f4 :: S1
#10 := f4
#36 := (= f1 f4)
#42 := (not #33)
#43 := (or #42 #36)
#51 := (not #43)
#52 := (or #33 #51)
#82 := (iff #52 #51)
#77 := (or false #51)
#80 := (iff #77 #51)
#81 := [rewrite]: #80
#78 := (iff #52 #77)
#75 := (iff #33 false)
#60 := (not #52)
#61 := (or #33 #60)
#66 := (not #61)
#9 := (= f3 f1)
#11 := (= f4 f1)
#12 := (implies #9 #11)
#13 := (implies #12 #9)
#14 := (implies #13 #9)
#15 := (not #14)
#67 := (iff #15 #66)
#64 := (iff #14 #61)
#57 := (implies #52 #33)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #14 #57)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#55 := (iff #13 #52)
#48 := (implies #43 #33)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #13 #48)
#46 := (iff #12 #43)
#39 := (implies #33 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #35 #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47 #35]: #49
#56 := [trans #50 #54]: #55
#59 := [monotonicity #56 #35]: #58
#65 := [trans #59 #63]: #64
#68 := [monotonicity #65]: #67
#32 := [asserted]: #15
#71 := [mp #32 #68]: #66
#69 := [not-or-elim #71]: #42
#76 := [iff-false #69]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#70 := [not-or-elim #71]: #52
#84 := [mp #70 #83]: #51
#74 := [not-or-elim #84]: #33
[unit-resolution #69 #74]: false
unsat
0192b9e7527c6d595018662e41e3d823b138754c 31 0
#2 := false
decl f5 :: (-> S2 S2 S3)
decl f3 :: S2
#8 := f3
decl f4 :: S2
#9 := f4
#12 := (f5 f4 f3)
#11 := (f5 f3 f4)
#13 := (= #11 #12)
#53 := (= #12 #11)
#10 := (= f3 f4)
#33 := (not #10)
#34 := (or #33 #13)
#37 := (not #34)
#14 := (implies #10 #13)
#15 := (not #14)
#38 := (iff #15 #37)
#35 := (iff #14 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#32 := [asserted]: #15
#42 := [mp #32 #39]: #37
#40 := [not-or-elim #42]: #10
#51 := (= f4 f3)
#52 := [symm #40]: #51
#54 := [monotonicity #52 #40]: #53
#49 := [symm #54]: #13
#41 := (not #13)
#43 := [not-or-elim #42]: #41
[unit-resolution #43 #49]: false
unsat
46fff20b4c094da53ae081e33798e8a693ab62ec 156 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#53 := (= f1 f5)
#59 := (not #53)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#60 := (or #41 #59)
#99 := (not #60)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#98 := (not #48)
#100 := (or #98 #99)
#68 := (or #38 #53)
#74 := (not #68)
#75 := (or #41 #74)
#122 := (not #75)
#101 := (not #100)
#152 := [hypothesis]: #101
#150 := (or #122 #100)
#107 := (iff #75 #100)
#65 := (and #48 #60)
#86 := (not #65)
#87 := (iff #75 #86)
#108 := (iff #87 #107)
#105 := (iff #86 #100)
#95 := (not #101)
#103 := (iff #95 #100)
#104 := [rewrite]: #103
#92 := (iff #86 #95)
#96 := (iff #65 #101)
#97 := [rewrite]: #96
#102 := [monotonicity #97]: #92
#106 := [trans #102 #104]: #105
#109 := [monotonicity #106]: #108
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (or #9 #14)
#18 := (implies #17 #11)
#15 := (implies #14 #11)
#12 := (implies #9 #11)
#16 := (and #12 #15)
#19 := (iff #16 #18)
#20 := (not #19)
#90 := (iff #20 #87)
#80 := (iff #65 #75)
#83 := (not #80)
#88 := (iff #83 #87)
#89 := [rewrite]: #88
#84 := (iff #20 #83)
#81 := (iff #19 #80)
#78 := (iff #18 #75)
#71 := (implies #68 #41)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #18 #71)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#69 := (iff #17 #68)
#54 := (iff #14 #53)
#55 := [rewrite]: #54
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#70 := [monotonicity #40 #55]: #69
#73 := [monotonicity #70 #43]: #72
#79 := [trans #73 #77]: #78
#66 := (iff #16 #65)
#63 := (iff #15 #60)
#56 := (implies #53 #41)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #15 #56)
#58 := [monotonicity #55 #43]: #57
#64 := [trans #58 #62]: #63
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#67 := [monotonicity #52 #64]: #66
#82 := [monotonicity #67 #79]: #81
#85 := [monotonicity #82]: #84
#91 := [trans #85 #89]: #90
#37 := [asserted]: #20
#94 := [mp #37 #91]: #87
#110 := [mp #94 #109]: #107
#143 := (not #107)
#148 := (or #122 #100 #143)
#149 := [def-axiom]: #148
#151 := [unit-resolution #149 #110]: #150
#153 := [unit-resolution #151 #152]: #122
#120 := (or #75 #68)
#121 := [def-axiom]: #120
#154 := [unit-resolution #121 #153]: #68
#137 := (or #100 #48)
#138 := [def-axiom]: #137
#155 := [unit-resolution #138 #152]: #48
#117 := (not #41)
#118 := (or #75 #117)
#119 := [def-axiom]: #118
#156 := [unit-resolution #119 #153]: #117
#129 := (or #98 #47 #41)
#130 := [def-axiom]: #129
#157 := [unit-resolution #130 #156 #155]: #47
#139 := (or #100 #60)
#140 := [def-axiom]: #139
#158 := [unit-resolution #140 #152]: #60
#135 := (or #99 #41 #59)
#136 := [def-axiom]: #135
#159 := [unit-resolution #136 #156 #158]: #59
#115 := (or #74 #38 #53)
#116 := [def-axiom]: #115
#160 := [unit-resolution #116 #159 #157 #154]: false
#161 := [lemma #160]: #100
#146 := (or #75 #101)
#144 := (or #75 #101 #143)
#145 := [def-axiom]: #144
#147 := [unit-resolution #145 #110]: #146
#162 := [unit-resolution #147 #161]: #75
#163 := [hypothesis]: #98
#127 := (or #48 #117)
#128 := [def-axiom]: #127
#164 := [unit-resolution #128 #163]: #117
#125 := (or #48 #38)
#126 := [def-axiom]: #125
#165 := [unit-resolution #126 #163]: #38
#111 := (or #68 #47)
#112 := [def-axiom]: #111
#166 := [unit-resolution #112 #165]: #68
#123 := (or #122 #41 #74)
#124 := [def-axiom]: #123
#167 := [unit-resolution #124 #166 #164 #162]: false
#168 := [lemma #167]: #48
#141 := (or #101 #98 #99)
#142 := [def-axiom]: #141
#169 := [unit-resolution #142 #168 #161]: #99
#133 := (or #60 #53)
#134 := [def-axiom]: #133
#170 := [unit-resolution #134 #169]: #53
#131 := (or #60 #117)
#132 := [def-axiom]: #131
#171 := [unit-resolution #132 #169]: #117
#172 := [unit-resolution #124 #171 #162]: #74
#113 := (or #68 #59)
#114 := [def-axiom]: #113
[unit-resolution #114 #172 #170]: false
unsat
a4fc389fafe13e91a7fdc713fbb6f0ce7029805d 63 0
#2 := false
decl f3 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#46 := (= f4 #9)
#10 := (f3 #9)
#12 := (f3 #10)
#78 := (= #12 #9)
#76 := (= #9 #12)
#37 := (= f4 #10)
#13 := (f3 #12)
#14 := (f3 #13)
#40 := (= f4 #14)
#43 := (and #37 #40)
#52 := (not #43)
#53 := (or #52 #46)
#58 := (not #53)
#17 := (= #9 f4)
#15 := (= #14 f4)
#11 := (= #10 f4)
#16 := (and #11 #15)
#18 := (implies #16 #17)
#19 := (not #18)
#59 := (iff #19 #58)
#56 := (iff #18 #53)
#49 := (implies #43 #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #18 #49)
#47 := (iff #17 #46)
#48 := [rewrite]: #47
#44 := (iff #16 #43)
#41 := (iff #15 #40)
#42 := [rewrite]: #41
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#36 := [asserted]: #19
#63 := [mp #36 #60]: #58
#61 := [not-or-elim #63]: #43
#62 := [and-elim #61]: #37
#77 := [monotonicity #62]: #76
#79 := [symm #77]: #78
#81 := (= f4 #12)
#67 := (= #14 #12)
#70 := (= #12 #14)
#72 := (= #10 #13)
#74 := (= #13 #10)
#75 := [monotonicity #79]: #74
#73 := [symm #75]: #72
#71 := [monotonicity #73]: #70
#80 := [symm #71]: #67
#64 := [and-elim #61]: #40
#82 := [trans #64 #80]: #81
#83 := [trans #82 #79]: #46
#65 := (not #46)
#66 := [not-or-elim #63]: #65
[unit-resolution #66 #83]: false
unsat
2f15e9d90b4b089f8a2562ce56366a555231ff22 114 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#46 := (= f1 f5)
decl f4 :: S1
#10 := f4
#40 := (= f1 f4)
#61 := (not #40)
decl f3 :: S1
#8 := f3
#37 := (= f1 f3)
#70 := (not #37)
#88 := (or #70 #61 #46)
#43 := (and #37 #40)
#52 := (not #43)
#53 := (or #52 #46)
#82 := (not #53)
#94 := (iff #82 #88)
#129 := (iff #94 false)
#121 := (not #88)
#124 := (iff #121 #88)
#127 := (iff #124 false)
#128 := [rewrite]: #127
#125 := (iff #94 #124)
#122 := (iff #82 #121)
#119 := (iff #53 #88)
#107 := (or #70 #61)
#114 := (or #107 #46)
#117 := (iff #114 #88)
#118 := [rewrite]: #117
#115 := (iff #53 #114)
#112 := (iff #52 #107)
#108 := (not #107)
#105 := (not #108)
#102 := (iff #105 #107)
#111 := [rewrite]: #102
#106 := (iff #52 #105)
#109 := (iff #43 #108)
#110 := [rewrite]: #109
#104 := [monotonicity #110]: #106
#113 := [trans #104 #111]: #112
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#123 := [monotonicity #120]: #122
#126 := [monotonicity #123]: #125
#130 := [trans #126 #128]: #129
#14 := (= f5 f1)
#11 := (= f4 f1)
#16 := (implies #11 #14)
#9 := (= f3 f1)
#17 := (implies #9 #16)
#12 := (and #9 #11)
#15 := (implies #12 #14)
#18 := (iff #15 #17)
#19 := (not #18)
#99 := (iff #19 #94)
#62 := (or #61 #46)
#71 := (or #70 #62)
#83 := (iff #71 #82)
#97 := (iff #83 #94)
#91 := (iff #88 #82)
#95 := (iff #91 #94)
#96 := [rewrite]: #95
#92 := (iff #83 #91)
#89 := (iff #71 #88)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#98 := [trans #93 #96]: #97
#86 := (iff #19 #83)
#76 := (iff #53 #71)
#79 := (not #76)
#84 := (iff #79 #83)
#85 := [rewrite]: #84
#80 := (iff #19 #79)
#77 := (iff #18 #76)
#74 := (iff #17 #71)
#67 := (implies #37 #62)
#72 := (iff #67 #71)
#73 := [rewrite]: #72
#68 := (iff #17 #67)
#65 := (iff #16 #62)
#58 := (implies #40 #46)
#63 := (iff #58 #62)
#64 := [rewrite]: #63
#59 := (iff #16 #58)
#47 := (iff #14 #46)
#48 := [rewrite]: #47
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#60 := [monotonicity #42 #48]: #59
#66 := [trans #60 #64]: #65
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#69 := [monotonicity #39 #66]: #68
#75 := [trans #69 #73]: #74
#56 := (iff #15 #53)
#49 := (implies #43 #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#44 := (iff #12 #43)
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#57 := [trans #51 #55]: #56
#78 := [monotonicity #57 #75]: #77
#81 := [monotonicity #78]: #80
#87 := [trans #81 #85]: #86
#100 := [trans #87 #98]: #99
#36 := [asserted]: #19
#101 := [mp #36 #100]: #94
[mp #101 #130]: false
unsat
5a01b8711c838d753166b92be13bae6fe9cd2136 195 0
#2 := false
decl f6 :: S2
#13 := f6
decl f4 :: S2
#10 := f4
#15 := (= f4 f6)
decl f5 :: S2
#11 := f5
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#40 := (= f1 f3)
#43 := (ite #40 f4 f5)
#49 := (= f6 #43)
#200 := (iff #49 #15)
#198 := (iff #15 #49)
#46 := (= #43 f6)
#50 := (iff #46 #49)
#197 := [commutativity]: #50
#195 := (iff #15 #46)
#110 := (= f4 #43)
#111 := (= f5 #43)
#57 := (not #40)
#180 := [hypothesis]: #57
#114 := (or #40 #111)
#115 := [def-axiom]: #114
#184 := [unit-resolution #115 #180]: #111
#185 := (= f6 f5)
#18 := (= f5 f6)
#174 := (iff #110 #15)
#172 := (iff #15 #110)
#68 := (or #18 #40)
#95 := (not #68)
#58 := (or #15 #57)
#94 := (not #58)
#96 := (or #94 #95)
#123 := (not #18)
#147 := [hypothesis]: #123
#157 := (or #96 #18)
#97 := (not #96)
#145 := [hypothesis]: #97
#132 := (or #96 #68)
#133 := [def-axiom]: #132
#148 := [unit-resolution #133 #145]: #68
#128 := (or #95 #18 #40)
#129 := [def-axiom]: #128
#149 := [unit-resolution #129 #148 #147]: #40
#112 := (or #57 #110)
#113 := [def-axiom]: #112
#150 := [unit-resolution #113 #149]: #110
#153 := (= f6 f4)
#130 := (or #96 #58)
#131 := [def-axiom]: #130
#151 := [unit-resolution #131 #145]: #58
#121 := (or #94 #15 #57)
#122 := [def-axiom]: #121
#152 := [unit-resolution #122 #149 #151]: #15
#154 := [symm #152]: #153
#155 := [trans #154 #150]: #49
#82 := (not #49)
#143 := (or #82 #96)
#104 := (iff #49 #96)
#73 := (and #58 #68)
#83 := (iff #73 #82)
#107 := (iff #83 #104)
#99 := (iff #96 #49)
#105 := (iff #99 #104)
#106 := [rewrite]: #105
#102 := (iff #83 #99)
#91 := (iff #97 #82)
#100 := (iff #91 #99)
#101 := [rewrite]: #100
#88 := (iff #83 #91)
#92 := (iff #73 #97)
#93 := [rewrite]: #92
#98 := [monotonicity #93]: #88
#103 := [trans #98 #101]: #102
#108 := [trans #103 #106]: #107
#9 := (= f3 f1)
#17 := (not #9)
#19 := (implies #17 #18)
#16 := (implies #9 #15)
#20 := (and #16 #19)
#12 := (ite #9 f4 f5)
#14 := (= #12 f6)
#21 := (iff #14 #20)
#22 := (not #21)
#86 := (iff #22 #83)
#76 := (iff #49 #73)
#79 := (not #76)
#84 := (iff #79 #83)
#85 := [rewrite]: #84
#80 := (iff #22 #79)
#77 := (iff #21 #76)
#74 := (iff #20 #73)
#71 := (iff #19 #68)
#65 := (implies #57 #18)
#69 := (iff #65 #68)
#70 := [rewrite]: #69
#66 := (iff #19 #65)
#63 := (iff #17 #57)
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#64 := [monotonicity #42]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#61 := (iff #16 #58)
#54 := (implies #40 #15)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #16 #54)
#56 := [monotonicity #42]: #55
#62 := [trans #56 #60]: #61
#75 := [monotonicity #62 #72]: #74
#52 := (iff #14 #49)
#51 := [rewrite]: #50
#47 := (iff #14 #46)
#44 := (= #12 #43)
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#53 := [trans #48 #51]: #52
#78 := [monotonicity #53 #75]: #77
#81 := [monotonicity #78]: #80
#87 := [trans #81 #85]: #86
#39 := [asserted]: #22
#90 := [mp #39 #87]: #83
#109 := [mp #90 #108]: #104
#136 := (not #104)
#141 := (or #82 #96 #136)
#142 := [def-axiom]: #141
#144 := [unit-resolution #142 #109]: #143
#146 := [unit-resolution #144 #145]: #82
#156 := [unit-resolution #146 #155]: false
#158 := [lemma #156]: #157
#159 := [unit-resolution #158 #147]: #96
#139 := (or #49 #97)
#137 := (or #49 #97 #136)
#138 := [def-axiom]: #137
#140 := [unit-resolution #138 #109]: #139
#160 := [unit-resolution #140 #159]: #49
#173 := [monotonicity #160]: #172
#175 := [symm #173]: #174
#163 := (not #111)
#164 := (iff #123 #163)
#161 := (iff #18 #111)
#162 := [monotonicity #160]: #161
#165 := [monotonicity #162]: #164
#166 := [mp #147 #165]: #163
#167 := [unit-resolution #115 #166]: #40
#171 := [unit-resolution #113 #167]: #110
#176 := [mp #171 #175]: #15
#116 := (not #15)
#126 := (or #68 #57)
#127 := [def-axiom]: #126
#168 := [unit-resolution #127 #167]: #68
#134 := (or #97 #94 #95)
#135 := [def-axiom]: #134
#169 := [unit-resolution #135 #168 #159]: #94
#117 := (or #58 #116)
#118 := [def-axiom]: #117
#170 := [unit-resolution #118 #169]: #116
#177 := [unit-resolution #170 #176]: false
#178 := [lemma #177]: #18
#186 := [symm #178]: #185
#187 := [trans #186 #184]: #49
#124 := (or #68 #123)
#125 := [def-axiom]: #124
#179 := [unit-resolution #125 #178]: #68
#119 := (or #58 #40)
#120 := [def-axiom]: #119
#181 := [unit-resolution #120 #180]: #58
#182 := [unit-resolution #135 #181 #179]: #97
#183 := [unit-resolution #144 #182]: #82
#188 := [unit-resolution #183 #187]: false
#189 := [lemma #188]: #40
#194 := [unit-resolution #113 #189]: #110
#196 := [monotonicity #194]: #195
#199 := [trans #196 #197]: #198
#201 := [symm #199]: #200
#202 := (iff #82 #116)
#203 := [monotonicity #201]: #202
#190 := [hypothesis]: #82
#204 := [mp #190 #203]: #116
#191 := [unit-resolution #140 #190]: #97
#192 := [unit-resolution #131 #191]: #58
#193 := [unit-resolution #122 #192 #189]: #15
#205 := [unit-resolution #193 #204]: false
#206 := [lemma #205]: #49
#210 := [mp #206 #201]: #15
#207 := [unit-resolution #144 #206]: #96
#208 := [unit-resolution #135 #207 #179]: #94
#209 := [unit-resolution #118 #208]: #116
[unit-resolution #209 #210]: false
unsat
00473b4aff1959d5177fa5825ae6319bbb679c00 198 0
#2 := false
decl f5 :: S1
#14 := f5
decl f1 :: S1
#4 := f1
#65 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#86 := (and #41 #65)
#92 := (not #86)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#93 := (or #44 #92)
#214 := (iff #93 false)
#209 := (or false false)
#212 := (iff #209 false)
#213 := [rewrite]: #212
#210 := (iff #93 #209)
#207 := (iff #92 false)
#1 := true
#202 := (not true)
#205 := (iff #202 false)
#206 := [rewrite]: #205
#203 := (iff #92 #202)
#200 := (iff #86 true)
#195 := (and true true)
#198 := (iff #195 true)
#199 := [rewrite]: #198
#196 := (iff #86 #195)
#193 := (iff #65 true)
#71 := (not #65)
#72 := (or #44 #71)
#80 := (not #72)
#81 := (or #44 #80)
#190 := (iff #81 #65)
#185 := (or false #65)
#188 := (iff #185 #65)
#189 := [rewrite]: #188
#186 := (iff #81 #185)
#183 := (iff #80 #65)
#178 := (not #71)
#181 := (iff #178 #65)
#182 := [rewrite]: #181
#179 := (iff #80 #178)
#176 := (iff #72 #71)
#171 := (or false #71)
#174 := (iff #171 #71)
#175 := [rewrite]: #174
#172 := (iff #72 #171)
#145 := (iff #44 false)
#137 := (not #44)
#101 := (not #93)
#110 := (not #81)
#50 := (not #41)
#51 := (or #50 #44)
#59 := (not #51)
#60 := (or #44 #59)
#119 := (not #60)
#128 := (or #44 #119 #110 #101)
#131 := (not #128)
#11 := (= f4 f1)
#15 := (= f5 f1)
#9 := (= f3 f1)
#18 := (and #9 #15)
#19 := (implies #18 #11)
#20 := (implies #19 #11)
#16 := (implies #15 #11)
#17 := (implies #16 #11)
#21 := (implies #17 #20)
#12 := (implies #9 #11)
#13 := (implies #12 #11)
#22 := (implies #13 #21)
#23 := (not #22)
#134 := (iff #23 #131)
#102 := (or #44 #101)
#111 := (or #110 #102)
#120 := (or #119 #111)
#125 := (not #120)
#132 := (iff #125 #131)
#129 := (iff #120 #128)
#130 := [rewrite]: #129
#133 := [monotonicity #130]: #132
#126 := (iff #23 #125)
#123 := (iff #22 #120)
#116 := (implies #60 #111)
#121 := (iff #116 #120)
#122 := [rewrite]: #121
#117 := (iff #22 #116)
#114 := (iff #21 #111)
#107 := (implies #81 #102)
#112 := (iff #107 #111)
#113 := [rewrite]: #112
#108 := (iff #21 #107)
#105 := (iff #20 #102)
#98 := (implies #93 #44)
#103 := (iff #98 #102)
#104 := [rewrite]: #103
#99 := (iff #20 #98)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#96 := (iff #19 #93)
#89 := (implies #86 #44)
#94 := (iff #89 #93)
#95 := [rewrite]: #94
#90 := (iff #19 #89)
#87 := (iff #18 #86)
#66 := (iff #15 #65)
#67 := [rewrite]: #66
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#88 := [monotonicity #43 #67]: #87
#91 := [monotonicity #88 #46]: #90
#97 := [trans #91 #95]: #96
#100 := [monotonicity #97 #46]: #99
#106 := [trans #100 #104]: #105
#84 := (iff #17 #81)
#77 := (implies #72 #44)
#82 := (iff #77 #81)
#83 := [rewrite]: #82
#78 := (iff #17 #77)
#75 := (iff #16 #72)
#68 := (implies #65 #44)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #16 #68)
#70 := [monotonicity #67 #46]: #69
#76 := [trans #70 #74]: #75
#79 := [monotonicity #76 #46]: #78
#85 := [trans #79 #83]: #84
#109 := [monotonicity #85 #106]: #108
#115 := [trans #109 #113]: #114
#63 := (iff #13 #60)
#56 := (implies #51 #44)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #55 #46]: #57
#64 := [trans #58 #62]: #63
#118 := [monotonicity #64 #115]: #117
#124 := [trans #118 #122]: #123
#127 := [monotonicity #124]: #126
#135 := [trans #127 #133]: #134
#40 := [asserted]: #23
#136 := [mp #40 #135]: #131
#138 := [not-or-elim #136]: #137
#146 := [iff-false #138]: #145
#173 := [monotonicity #146]: #172
#177 := [trans #173 #175]: #176
#180 := [monotonicity #177]: #179
#184 := [trans #180 #182]: #183
#187 := [monotonicity #146 #184]: #186
#191 := [trans #187 #189]: #190
#140 := [not-or-elim #136]: #81
#192 := [mp #140 #191]: #65
#194 := [iff-true #192]: #193
#169 := (iff #41 true)
#166 := (iff #60 #41)
#161 := (or false #41)
#164 := (iff #161 #41)
#165 := [rewrite]: #164
#162 := (iff #60 #161)
#159 := (iff #59 #41)
#154 := (not #50)
#157 := (iff #154 #41)
#158 := [rewrite]: #157
#155 := (iff #59 #154)
#152 := (iff #51 #50)
#147 := (or #50 false)
#150 := (iff #147 #50)
#151 := [rewrite]: #150
#148 := (iff #51 #147)
#149 := [monotonicity #146]: #148
#153 := [trans #149 #151]: #152
#156 := [monotonicity #153]: #155
#160 := [trans #156 #158]: #159
#163 := [monotonicity #146 #160]: #162
#167 := [trans #163 #165]: #166
#139 := [not-or-elim #136]: #60
#168 := [mp #139 #167]: #41
#170 := [iff-true #168]: #169
#197 := [monotonicity #170 #194]: #196
#201 := [trans #197 #199]: #200
#204 := [monotonicity #201]: #203
#208 := [trans #204 #206]: #207
#211 := [monotonicity #146 #208]: #210
#215 := [trans #211 #213]: #214
#141 := [not-or-elim #136]: #93
[mp #141 #215]: false
unsat
2cfe9308ab7f394e846bed2379142398e01d0e8d 134 0
#2 := false
decl f5 :: S1
#14 := f5
decl f1 :: S1
#4 := f1
#59 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#74 := (and #41 #59)
#80 := (not #74)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#81 := (or #44 #80)
#150 := (iff #81 false)
#145 := (or false false)
#148 := (iff #145 false)
#149 := [rewrite]: #148
#146 := (iff #81 #145)
#143 := (iff #80 false)
#1 := true
#138 := (not true)
#141 := (iff #138 false)
#142 := [rewrite]: #141
#139 := (iff #80 #138)
#136 := (iff #74 true)
#131 := (and true true)
#134 := (iff #131 true)
#135 := [rewrite]: #134
#132 := (iff #74 #131)
#129 := (iff #59 true)
#86 := (not #81)
#65 := (not #59)
#50 := (not #41)
#108 := (or #50 #44 #65 #86)
#111 := (not #108)
#11 := (= f4 f1)
#15 := (= f5 f1)
#9 := (= f3 f1)
#18 := (and #9 #15)
#19 := (implies #18 #11)
#20 := (not #19)
#16 := (implies #15 #11)
#17 := (not #16)
#21 := (implies #17 #20)
#12 := (implies #9 #11)
#13 := (not #12)
#22 := (implies #13 #21)
#23 := (not #22)
#114 := (iff #23 #111)
#66 := (or #44 #65)
#92 := (or #66 #86)
#51 := (or #50 #44)
#100 := (or #51 #92)
#105 := (not #100)
#112 := (iff #105 #111)
#109 := (iff #100 #108)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#106 := (iff #23 #105)
#103 := (iff #22 #100)
#56 := (not #51)
#97 := (implies #56 #92)
#101 := (iff #97 #100)
#102 := [rewrite]: #101
#98 := (iff #22 #97)
#95 := (iff #21 #92)
#71 := (not #66)
#89 := (implies #71 #86)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #21 #89)
#87 := (iff #20 #86)
#84 := (iff #19 #81)
#77 := (implies #74 #44)
#82 := (iff #77 #81)
#83 := [rewrite]: #82
#78 := (iff #19 #77)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#75 := (iff #18 #74)
#60 := (iff #15 #59)
#61 := [rewrite]: #60
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#76 := [monotonicity #43 #61]: #75
#79 := [monotonicity #76 #46]: #78
#85 := [trans #79 #83]: #84
#88 := [monotonicity #85]: #87
#72 := (iff #17 #71)
#69 := (iff #16 #66)
#62 := (implies #59 #44)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #16 #62)
#64 := [monotonicity #61 #46]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70]: #72
#91 := [monotonicity #73 #88]: #90
#96 := [trans #91 #94]: #95
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #55]: #57
#99 := [monotonicity #58 #96]: #98
#104 := [trans #99 #102]: #103
#107 := [monotonicity #104]: #106
#115 := [trans #107 #113]: #114
#40 := [asserted]: #23
#116 := [mp #40 #115]: #111
#120 := [not-or-elim #116]: #59
#130 := [iff-true #120]: #129
#125 := (iff #41 true)
#117 := [not-or-elim #116]: #41
#126 := [iff-true #117]: #125
#133 := [monotonicity #126 #130]: #132
#137 := [trans #133 #135]: #136
#140 := [monotonicity #137]: #139
#144 := [trans #140 #142]: #143
#127 := (iff #44 false)
#118 := (not #44)
#119 := [not-or-elim #116]: #118
#128 := [iff-false #119]: #127
#147 := [monotonicity #128 #144]: #146
#151 := [trans #147 #149]: #150
#121 := [not-or-elim #116]: #81
[mp #121 #151]: false
unsat
ec4d1a12b3f23ddd6f880458ababd57fd69399e9 36 0
#2 := false
decl f5 :: S2
#10 := f5
decl f3 :: S2
#8 := f3
#12 := (= f3 f5)
#13 := (not #12)
decl f4 :: S2
#9 := f4
#11 := (distinct f3 f4 f5)
#33 := (not #11)
#34 := (or #33 #13)
#37 := (not #34)
#14 := (implies #11 #13)
#15 := (not #14)
#38 := (iff #15 #37)
#35 := (iff #14 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#32 := [asserted]: #15
#42 := [mp #32 #39]: #37
#41 := [not-or-elim #42]: #12
#52 := (= f4 f5)
#53 := (not #52)
#50 := (= f3 f4)
#51 := (not #50)
#48 := (and #51 #13 #53)
#40 := [not-or-elim #42]: #11
#58 := (or #33 #48)
#59 := [def-axiom]: #58
#62 := [unit-resolution #59 #40]: #48
#49 := (not #48)
#45 := (or #49 #13)
#43 := [def-axiom]: #45
[unit-resolution #43 #62 #41]: false
unsat
d49a2aa891a4e97785d87ae0852efd8c830df7dd 162 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#44 := (= f1 f5)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#53 := (not #38)
#70 := (or #53 #44)
#97 := (not #70)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#62 := (or #53 #41)
#96 := (not #62)
#98 := (or #96 #97)
#90 := (not #44)
#93 := (not #41)
#100 := (or #93 #90)
#101 := (not #100)
#104 := (or #53 #101)
#107 := (not #104)
#158 := [hypothesis]: #107
#145 := (or #104 #100)
#146 := [def-axiom]: #145
#159 := [unit-resolution #146 #158]: #100
#143 := (or #104 #38)
#144 := [def-axiom]: #143
#160 := [unit-resolution #144 #158]: #38
#99 := (not #98)
#156 := (or #99 #104)
#113 := (iff #98 #104)
#47 := (and #41 #44)
#54 := (or #53 #47)
#84 := (not #54)
#75 := (and #62 #70)
#85 := (iff #75 #84)
#116 := (iff #85 #113)
#110 := (iff #99 #107)
#114 := (iff #110 #113)
#115 := [rewrite]: #114
#111 := (iff #85 #110)
#108 := (iff #84 #107)
#105 := (iff #54 #104)
#102 := (iff #47 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#109 := [monotonicity #106]: #108
#94 := (iff #75 #99)
#95 := [rewrite]: #94
#112 := [monotonicity #95 #109]: #111
#117 := [trans #112 #115]: #116
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (and #16 #17)
#14 := (and #11 #13)
#15 := (implies #9 #14)
#19 := (iff #15 #18)
#20 := (not #19)
#88 := (iff #20 #85)
#78 := (iff #54 #75)
#81 := (not #78)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #20 #81)
#79 := (iff #19 #78)
#76 := (iff #18 #75)
#73 := (iff #17 #70)
#67 := (implies #38 #44)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #17 #67)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#69 := [monotonicity #40 #46]: #68
#74 := [trans #69 #72]: #73
#65 := (iff #16 #62)
#59 := (implies #38 #41)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #16 #59)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#61 := [monotonicity #40 #43]: #60
#66 := [trans #61 #64]: #65
#77 := [monotonicity #66 #74]: #76
#57 := (iff #15 #54)
#50 := (implies #38 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #15 #50)
#48 := (iff #14 #47)
#49 := [monotonicity #43 #46]: #48
#52 := [monotonicity #40 #49]: #51
#58 := [trans #52 #56]: #57
#80 := [monotonicity #58 #77]: #79
#83 := [monotonicity #80]: #82
#89 := [trans #83 #87]: #88
#37 := [asserted]: #20
#92 := [mp #37 #89]: #85
#118 := [mp #92 #117]: #113
#149 := (not #113)
#154 := (or #99 #104 #149)
#155 := [def-axiom]: #154
#157 := [unit-resolution #155 #118]: #156
#161 := [unit-resolution #157 #158]: #99
#131 := (or #98 #62)
#132 := [def-axiom]: #131
#162 := [unit-resolution #132 #161]: #62
#123 := (or #96 #53 #41)
#124 := [def-axiom]: #123
#163 := [unit-resolution #124 #162 #160]: #41
#133 := (or #98 #70)
#134 := [def-axiom]: #133
#164 := [unit-resolution #134 #161]: #70
#129 := (or #97 #53 #44)
#130 := [def-axiom]: #129
#165 := [unit-resolution #130 #164 #160]: #44
#141 := (or #101 #93 #90)
#142 := [def-axiom]: #141
#166 := [unit-resolution #142 #165 #163 #159]: false
#167 := [lemma #166]: #104
#152 := (or #98 #107)
#150 := (or #98 #107 #149)
#151 := [def-axiom]: #150
#153 := [unit-resolution #151 #118]: #152
#168 := [unit-resolution #153 #167]: #98
#169 := [hypothesis]: #53
#119 := (or #62 #38)
#120 := [def-axiom]: #119
#170 := [unit-resolution #120 #169]: #62
#125 := (or #70 #38)
#126 := [def-axiom]: #125
#171 := [unit-resolution #126 #169]: #70
#135 := (or #99 #96 #97)
#136 := [def-axiom]: #135
#172 := [unit-resolution #136 #171 #170 #168]: false
#173 := [lemma #172]: #38
#147 := (or #107 #53 #101)
#148 := [def-axiom]: #147
#174 := [unit-resolution #148 #173 #167]: #101
#137 := (or #100 #41)
#138 := [def-axiom]: #137
#175 := [unit-resolution #138 #174]: #41
#121 := (or #62 #93)
#122 := [def-axiom]: #121
#176 := [unit-resolution #122 #175]: #62
#139 := (or #100 #44)
#140 := [def-axiom]: #139
#177 := [unit-resolution #140 #174]: #44
#127 := (or #70 #90)
#128 := [def-axiom]: #127
#178 := [unit-resolution #128 #177]: #70
[unit-resolution #136 #178 #176 #168]: false
unsat
bb1f7f82c156e4b85608a3fcfce6206c30c1bb93 77 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#81 := (= f3 f4)
decl f6 :: S2
#12 := f6
#36 := (= f4 f6)
#100 := (iff #36 #81)
#98 := (iff #81 #36)
#13 := (= f6 f4)
#37 := (iff #13 #36)
#97 := [commutativity]: #37
#95 := (iff #81 #13)
#14 := (= f3 f6)
#42 := (not #36)
#15 := (not #14)
decl f5 :: S2
#10 := f5
#11 := (distinct f3 f4 f5)
#51 := (not #11)
#60 := (or #51 #15 #42)
#63 := (not #60)
#16 := (implies #13 #15)
#17 := (implies #11 #16)
#18 := (not #17)
#66 := (iff #18 #63)
#43 := (or #15 #42)
#52 := (or #51 #43)
#57 := (not #52)
#64 := (iff #57 #63)
#61 := (iff #52 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#58 := (iff #18 #57)
#55 := (iff #17 #52)
#48 := (implies #11 #43)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #17 #48)
#46 := (iff #16 #43)
#39 := (implies #36 #15)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #16 #39)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#56 := [trans #50 #54]: #55
#59 := [monotonicity #56]: #58
#67 := [trans #59 #65]: #66
#35 := [asserted]: #18
#68 := [mp #35 #67]: #63
#70 := [not-or-elim #68]: #14
#96 := [monotonicity #70]: #95
#99 := [trans #96 #97]: #98
#101 := [symm #99]: #100
#71 := [not-or-elim #68]: #36
#102 := [mp #71 #101]: #81
#82 := (not #81)
#79 := (= f4 f5)
#80 := (not #79)
#83 := (= f3 f5)
#84 := (not #83)
#77 := (and #82 #84 #80)
#69 := [not-or-elim #68]: #11
#89 := (or #51 #77)
#90 := [def-axiom]: #89
#93 := [unit-resolution #90 #69]: #77
#78 := (not #77)
#75 := (or #78 #82)
#76 := [def-axiom]: #75
#94 := [unit-resolution #76 #93]: #82
[unit-resolution #94 #102]: false
unsat
a32448a76e7c2238050b2242f58c388f5af4bb0b 54 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (implies #11 #9)
#13 := (implies #9 #12)
#14 := (not #13)
#68 := (iff #14 false)
#35 := (= f1 f4)
#41 := (not #35)
#32 := (= f1 f3)
#42 := (or #32 #41)
#50 := (not #32)
#51 := (or #50 #42)
#56 := (not #51)
#66 := (iff #56 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #56 #61)
#59 := (iff #51 true)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#57 := (iff #14 #56)
#54 := (iff #13 #51)
#47 := (implies #32 #42)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #13 #47)
#45 := (iff #12 #42)
#38 := (implies #35 #32)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #12 #38)
#33 := (iff #9 #32)
#34 := [rewrite]: #33
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37 #34]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #34 #46]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #55]: #57
#69 := [trans #58 #67]: #68
#31 := [asserted]: #14
[mp #31 #69]: false
unsat
f708f93eff4fe8de6618caf7ad2da4c76f2e075e 28 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#10 := (distinct f3 f4 f3 f4)
#11 := (not #10)
#12 := (not #11)
#44 := (iff #12 false)
#1 := true
#39 := (not true)
#42 := (iff #39 false)
#43 := [rewrite]: #42
#40 := (iff #12 #39)
#37 := (iff #11 true)
#32 := (not false)
#35 := (iff #32 true)
#36 := [rewrite]: #35
#33 := (iff #11 #32)
#30 := (iff #10 false)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#29 := [asserted]: #12
[mp #29 #45]: false
unsat
bdc1bdcbb661b97af9742dbe35f1e882a21fc3b1 30 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#10 := (= f3 f4)
#11 := (not #10)
#12 := (not #11)
#13 := (implies #10 #12)
#14 := (not #13)
#46 := (iff #14 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #14 #41)
#39 := (iff #13 true)
#34 := (implies #10 #10)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #13 #34)
#32 := (iff #12 #10)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #14
[mp #31 #47]: false
unsat
4beee0db11f1f0218a1c8845ad7dc8b072a3465b 144 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#44 := (= f1 f5)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#50 := (not #41)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#59 := (not #38)
#102 := (or #59 #50 #44)
#160 := (iff #102 false)
#155 := (or false false false)
#158 := (iff #155 false)
#159 := [rewrite]: #158
#156 := (iff #102 #155)
#132 := (iff #44 false)
#123 := (not #44)
#105 := (not #102)
#68 := (or #59 #41)
#84 := (not #68)
#111 := (or #59 #44 #84 #105)
#116 := (not #111)
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (implies #16 #17)
#14 := (implies #11 #13)
#15 := (implies #9 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#119 := (iff #20 #116)
#76 := (or #59 #44)
#85 := (or #84 #76)
#51 := (or #50 #44)
#60 := (or #59 #51)
#93 := (not #60)
#94 := (or #93 #85)
#99 := (not #94)
#117 := (iff #99 #116)
#114 := (iff #94 #111)
#108 := (or #105 #85)
#112 := (iff #108 #111)
#113 := [rewrite]: #112
#109 := (iff #94 #108)
#106 := (iff #93 #105)
#103 := (iff #60 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#110 := [monotonicity #107]: #109
#115 := [trans #110 #113]: #114
#118 := [monotonicity #115]: #117
#100 := (iff #20 #99)
#97 := (iff #19 #94)
#90 := (implies #60 #85)
#95 := (iff #90 #94)
#96 := [rewrite]: #95
#91 := (iff #19 #90)
#88 := (iff #18 #85)
#81 := (implies #68 #76)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #18 #81)
#79 := (iff #17 #76)
#73 := (implies #38 #44)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #17 #73)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#75 := [monotonicity #40 #46]: #74
#80 := [trans #75 #78]: #79
#71 := (iff #16 #68)
#65 := (implies #38 #41)
#69 := (iff #65 #68)
#70 := [rewrite]: #69
#66 := (iff #16 #65)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#67 := [monotonicity #40 #43]: #66
#72 := [trans #67 #70]: #71
#83 := [monotonicity #72 #80]: #82
#89 := [trans #83 #87]: #88
#63 := (iff #15 #60)
#56 := (implies #38 #51)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #15 #56)
#54 := (iff #14 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #14 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #40 #55]: #57
#64 := [trans #58 #62]: #63
#92 := [monotonicity #64 #89]: #91
#98 := [trans #92 #96]: #97
#101 := [monotonicity #98]: #100
#120 := [trans #101 #118]: #119
#37 := [asserted]: #20
#121 := [mp #37 #120]: #116
#124 := [not-or-elim #121]: #123
#133 := [iff-false #124]: #132
#153 := (iff #50 false)
#1 := true
#134 := (not true)
#137 := (iff #134 false)
#138 := [rewrite]: #137
#151 := (iff #50 #134)
#149 := (iff #41 true)
#146 := (iff #68 #41)
#141 := (or false #41)
#144 := (iff #141 #41)
#145 := [rewrite]: #144
#142 := (iff #68 #141)
#139 := (iff #59 false)
#135 := (iff #59 #134)
#130 := (iff #38 true)
#122 := [not-or-elim #121]: #38
#131 := [iff-true #122]: #130
#136 := [monotonicity #131]: #135
#140 := [trans #136 #138]: #139
#143 := [monotonicity #140]: #142
#147 := [trans #143 #145]: #146
#125 := [not-or-elim #121]: #68
#148 := [mp #125 #147]: #41
#150 := [iff-true #148]: #149
#152 := [monotonicity #150]: #151
#154 := [trans #152 #138]: #153
#157 := [monotonicity #140 #154 #133]: #156
#161 := [trans #157 #159]: #160
#126 := [not-or-elim #121]: #102
[mp #126 #161]: false
unsat
b39d61834fdb48ccd6c976fd127ad9ad2b57765f 40 0
#2 := false
decl f5 :: S2
#11 := f5
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#14 := (distinct f3 f4 f5)
#15 := (not #14)
#12 := (= f3 f5)
#10 := (= f3 f4)
#13 := (and #10 #12)
#35 := (not #13)
#36 := (or #35 #15)
#39 := (not #36)
#16 := (implies #13 #15)
#17 := (not #16)
#40 := (iff #17 #39)
#37 := (iff #16 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#34 := [asserted]: #17
#44 := [mp #34 #41]: #39
#46 := [not-or-elim #44]: #14
#58 := (= f4 f5)
#59 := (not #58)
#57 := (not #12)
#56 := (not #10)
#54 := (and #56 #57 #59)
#55 := (not #54)
#42 := [not-or-elim #44]: #13
#43 := [and-elim #42]: #10
#52 := (or #55 #56)
#53 := [def-axiom]: #52
#66 := [unit-resolution #53 #43]: #55
#62 := (or #15 #54)
#63 := [def-axiom]: #62
#67 := [unit-resolution #63 #66]: #15
[unit-resolution #67 #46]: false
unsat
06703092b87ad607f1fc183aeaf2318c5fc95140 121 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#53 := (= f1 f5)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (not #38)
#90 := (or #47 #41 #53)
#137 := (iff #90 false)
#132 := (or false false false)
#135 := (iff #132 false)
#136 := [rewrite]: #135
#133 := (iff #90 #132)
#123 := (iff #53 false)
#113 := (not #53)
#93 := (not #90)
#99 := (or #47 #41 #53 #93)
#104 := (not #99)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (or #11 #14)
#9 := (= f3 f1)
#18 := (implies #9 #17)
#15 := (implies #9 #14)
#12 := (implies #9 #11)
#16 := (or #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#107 := (iff #20 #104)
#67 := (or #41 #53)
#73 := (or #47 #67)
#59 := (or #47 #53)
#48 := (or #47 #41)
#64 := (or #48 #59)
#81 := (not #64)
#82 := (or #81 #73)
#87 := (not #82)
#105 := (iff #87 #104)
#102 := (iff #82 #99)
#96 := (or #93 #73)
#100 := (iff #96 #99)
#101 := [rewrite]: #100
#97 := (iff #82 #96)
#94 := (iff #81 #93)
#91 := (iff #64 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#103 := [trans #98 #101]: #102
#106 := [monotonicity #103]: #105
#88 := (iff #20 #87)
#85 := (iff #19 #82)
#78 := (implies #64 #73)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #19 #78)
#76 := (iff #18 #73)
#70 := (implies #38 #67)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #18 #70)
#68 := (iff #17 #67)
#54 := (iff #14 #53)
#55 := [rewrite]: #54
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#69 := [monotonicity #43 #55]: #68
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#72 := [monotonicity #40 #69]: #71
#77 := [trans #72 #75]: #76
#65 := (iff #16 #64)
#62 := (iff #15 #59)
#56 := (implies #38 #53)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #15 #56)
#58 := [monotonicity #40 #55]: #57
#63 := [trans #58 #61]: #62
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#66 := [monotonicity #52 #63]: #65
#80 := [monotonicity #66 #77]: #79
#86 := [trans #80 #84]: #85
#89 := [monotonicity #86]: #88
#108 := [trans #89 #106]: #107
#37 := [asserted]: #20
#109 := [mp #37 #108]: #104
#114 := [not-or-elim #109]: #113
#124 := [iff-false #114]: #123
#121 := (iff #41 false)
#111 := (not #41)
#112 := [not-or-elim #109]: #111
#122 := [iff-false #112]: #121
#130 := (iff #47 false)
#1 := true
#125 := (not true)
#128 := (iff #125 false)
#129 := [rewrite]: #128
#126 := (iff #47 #125)
#119 := (iff #38 true)
#110 := [not-or-elim #109]: #38
#120 := [iff-true #110]: #119
#127 := [monotonicity #120]: #126
#131 := [trans #127 #129]: #130
#134 := [monotonicity #131 #122 #124]: #133
#138 := [trans #134 #136]: #137
#115 := [not-or-elim #109]: #90
[mp #115 #138]: false
unsat
f12c3118f1895363634ae08d5e1cb8290b015c56 33 0
#2 := false
decl f3 :: S2
#8 := f3
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f6 :: S2
#11 := f6
#13 := (distinct f6 f4 f5 f3)
#12 := (distinct f3 f4 f5 f6)
#14 := (implies #12 #13)
#15 := (not #14)
#47 := (iff #15 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #15 #42)
#40 := (iff #14 true)
#35 := (implies #12 #12)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #14 #35)
#33 := (iff #13 #12)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#32 := [asserted]: #15
[mp #32 #48]: false
unsat
9a5a01706e8f03de5459124543d7c655f9eae121 123 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#38 := (= f1 f4)
decl f3 :: S1
#8 := f3
#35 := (= f1 f3)
#44 := (not #35)
#45 := (or #44 #38)
#53 := (not #45)
#54 := (or #35 #53)
#62 := (not #54)
#63 := (or #35 #62)
#71 := (not #63)
#72 := (or #38 #71)
#140 := (iff #72 false)
#135 := (or false false)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #72 #135)
#133 := (iff #71 false)
#1 := true
#128 := (not true)
#131 := (iff #128 false)
#132 := [rewrite]: #131
#129 := (iff #71 #128)
#126 := (iff #63 true)
#121 := (or #35 #44)
#124 := (iff #121 true)
#125 := [rewrite]: #124
#122 := (iff #63 #121)
#119 := (iff #62 #44)
#117 := (iff #54 #35)
#112 := (or #35 #35)
#115 := (iff #112 #35)
#116 := [rewrite]: #115
#113 := (iff #54 #112)
#110 := (iff #53 #35)
#105 := (not #44)
#108 := (iff #105 #35)
#109 := [rewrite]: #108
#106 := (iff #53 #105)
#103 := (iff #45 #44)
#98 := (or #44 false)
#101 := (iff #98 #44)
#102 := [rewrite]: #101
#99 := (iff #45 #98)
#96 := (iff #38 false)
#89 := (not #38)
#80 := (not #72)
#81 := (or #38 #80)
#86 := (not #81)
#11 := (= f4 f1)
#9 := (= f3 f1)
#12 := (implies #9 #11)
#13 := (implies #12 #9)
#14 := (implies #13 #9)
#15 := (implies #14 #11)
#16 := (implies #15 #11)
#17 := (not #16)
#87 := (iff #17 #86)
#84 := (iff #16 #81)
#77 := (implies #72 #38)
#82 := (iff #77 #81)
#83 := [rewrite]: #82
#78 := (iff #16 #77)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#75 := (iff #15 #72)
#68 := (implies #63 #38)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #15 #68)
#66 := (iff #14 #63)
#59 := (implies #54 #35)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #14 #59)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#57 := (iff #13 #54)
#50 := (implies #45 #35)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #13 #50)
#48 := (iff #12 #45)
#41 := (implies #35 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#43 := [monotonicity #37 #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49 #37]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58 #37]: #60
#67 := [trans #61 #65]: #66
#70 := [monotonicity #67 #40]: #69
#76 := [trans #70 #74]: #75
#79 := [monotonicity #76 #40]: #78
#85 := [trans #79 #83]: #84
#88 := [monotonicity #85]: #87
#34 := [asserted]: #17
#91 := [mp #34 #88]: #86
#90 := [not-or-elim #91]: #89
#97 := [iff-false #90]: #96
#100 := [monotonicity #97]: #99
#104 := [trans #100 #102]: #103
#107 := [monotonicity #104]: #106
#111 := [trans #107 #109]: #110
#114 := [monotonicity #111]: #113
#118 := [trans #114 #116]: #117
#120 := [monotonicity #118]: #119
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#130 := [monotonicity #127]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #97 #134]: #136
#141 := [trans #137 #139]: #140
#92 := [not-or-elim #91]: #72
[mp #92 #141]: false
unsat
224b51e5f287ef2e8191401ac84c3c58a0aead45 91 0
#2 := false
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#13 := (distinct f3 f4 f5)
#67 := (= f4 f5)
#68 := (not #67)
#63 := (= f3 f5)
#64 := (not #63)
#61 := (= f3 f4)
#62 := (not #61)
#93 := (and #62 #64 #68)
decl f6 :: S2
#11 := f6
#71 := (= f5 f6)
#72 := (not #71)
#69 := (= f4 f6)
#70 := (not #69)
#65 := (= f3 f6)
#66 := (not #65)
#73 := (and #62 #64 #66 #68 #70 #72)
#12 := (distinct f3 f4 f5 f6)
#14 := (distinct f4 f5 f6)
#15 := (and #13 #14)
#35 := (not #12)
#36 := (or #35 #15)
#39 := (not #36)
#16 := (implies #12 #15)
#17 := (not #16)
#40 := (iff #17 #39)
#37 := (iff #16 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#34 := [asserted]: #17
#44 := [mp #34 #41]: #39
#42 := [not-or-elim #44]: #12
#89 := (or #35 #73)
#90 := [def-axiom]: #89
#121 := [unit-resolution #90 #42]: #73
#74 := (not #73)
#75 := (or #74 #62)
#76 := [def-axiom]: #75
#122 := [unit-resolution #76 #121]: #62
#81 := (or #74 #68)
#82 := [def-axiom]: #81
#123 := [unit-resolution #82 #121]: #68
#77 := (or #74 #64)
#78 := [def-axiom]: #77
#124 := [unit-resolution #78 #121]: #64
#101 := (or #93 #61 #63 #67)
#102 := [def-axiom]: #101
#125 := [unit-resolution #102 #124 #123 #122]: #93
#94 := (not #93)
#105 := (or #13 #94)
#106 := [def-axiom]: #105
#126 := [unit-resolution #106 #125]: #13
#107 := (and #68 #70 #72)
#85 := (or #74 #72)
#86 := [def-axiom]: #85
#127 := [unit-resolution #86 #121]: #72
#83 := (or #74 #70)
#84 := [def-axiom]: #83
#128 := [unit-resolution #84 #121]: #70
#115 := (or #107 #67 #69 #71)
#116 := [def-axiom]: #115
#129 := [unit-resolution #116 #128 #127 #123]: #107
#108 := (not #107)
#119 := (or #14 #108)
#120 := [def-axiom]: #119
#130 := [unit-resolution #120 #129]: #14
#54 := (not #14)
#53 := (not #13)
#55 := (or #53 #54)
#43 := (not #15)
#58 := (iff #43 #55)
#56 := (not #55)
#49 := (not #56)
#46 := (iff #49 #55)
#57 := [rewrite]: #46
#50 := (iff #43 #49)
#51 := (iff #15 #56)
#52 := [rewrite]: #51
#48 := [monotonicity #52]: #50
#59 := [trans #48 #57]: #58
#45 := [not-or-elim #44]: #43
#60 := [mp #45 #59]: #55
[unit-resolution #60 #130 #126]: false
unsat
d71c48b66a95c7e63c038fd93ab853e5968a14b6 60 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (not #11)
#15 := (implies #13 #14)
#12 := (implies #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#74 := (iff #17 false)
#1 := true
#69 := (not true)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #17 #69)
#67 := (iff #16 true)
#38 := (= f1 f4)
#35 := (= f1 f3)
#44 := (not #35)
#45 := (or #44 #38)
#62 := (implies #45 #45)
#65 := (iff #62 true)
#66 := [rewrite]: #65
#63 := (iff #16 #62)
#60 := (iff #15 #45)
#50 := (not #38)
#55 := (implies #50 #44)
#58 := (iff #55 #45)
#59 := [rewrite]: #58
#56 := (iff #15 #55)
#53 := (iff #14 #44)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#54 := [monotonicity #37]: #53
#51 := (iff #13 #50)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#52 := [monotonicity #40]: #51
#57 := [monotonicity #52 #54]: #56
#61 := [trans #57 #59]: #60
#48 := (iff #12 #45)
#41 := (implies #35 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#43 := [monotonicity #37 #40]: #42
#49 := [trans #43 #47]: #48
#64 := [monotonicity #49 #61]: #63
#68 := [trans #64 #66]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#34 := [asserted]: #17
[mp #34 #75]: false
unsat
af465ab181f70f3a841319fb8648514b03dc0f84 121 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#44 := (= f1 f5)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#53 := (not #38)
#90 := (or #53 #41 #44)
#137 := (iff #90 false)
#132 := (or false false false)
#135 := (iff #132 false)
#136 := [rewrite]: #135
#133 := (iff #90 #132)
#123 := (iff #44 false)
#113 := (not #44)
#93 := (not #90)
#99 := (or #53 #41 #44 #93)
#104 := (not #99)
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (or #16 #17)
#14 := (or #11 #13)
#15 := (implies #9 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#107 := (iff #20 #104)
#70 := (or #53 #44)
#62 := (or #53 #41)
#75 := (or #62 #70)
#47 := (or #41 #44)
#54 := (or #53 #47)
#81 := (not #54)
#82 := (or #81 #75)
#87 := (not #82)
#105 := (iff #87 #104)
#102 := (iff #82 #99)
#96 := (or #93 #75)
#100 := (iff #96 #99)
#101 := [rewrite]: #100
#97 := (iff #82 #96)
#94 := (iff #81 #93)
#91 := (iff #54 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#103 := [trans #98 #101]: #102
#106 := [monotonicity #103]: #105
#88 := (iff #20 #87)
#85 := (iff #19 #82)
#78 := (implies #54 #75)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #19 #78)
#76 := (iff #18 #75)
#73 := (iff #17 #70)
#67 := (implies #38 #44)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #17 #67)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#69 := [monotonicity #40 #46]: #68
#74 := [trans #69 #72]: #73
#65 := (iff #16 #62)
#59 := (implies #38 #41)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #16 #59)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#61 := [monotonicity #40 #43]: #60
#66 := [trans #61 #64]: #65
#77 := [monotonicity #66 #74]: #76
#57 := (iff #15 #54)
#50 := (implies #38 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #15 #50)
#48 := (iff #14 #47)
#49 := [monotonicity #43 #46]: #48
#52 := [monotonicity #40 #49]: #51
#58 := [trans #52 #56]: #57
#80 := [monotonicity #58 #77]: #79
#86 := [trans #80 #84]: #85
#89 := [monotonicity #86]: #88
#108 := [trans #89 #106]: #107
#37 := [asserted]: #20
#109 := [mp #37 #108]: #104
#114 := [not-or-elim #109]: #113
#124 := [iff-false #114]: #123
#121 := (iff #41 false)
#111 := (not #41)
#112 := [not-or-elim #109]: #111
#122 := [iff-false #112]: #121
#130 := (iff #53 false)
#1 := true
#125 := (not true)
#128 := (iff #125 false)
#129 := [rewrite]: #128
#126 := (iff #53 #125)
#119 := (iff #38 true)
#110 := [not-or-elim #109]: #38
#120 := [iff-true #110]: #119
#127 := [monotonicity #120]: #126
#131 := [trans #127 #129]: #130
#134 := [monotonicity #131 #122 #124]: #133
#138 := [trans #134 #136]: #137
#115 := [not-or-elim #109]: #90
[mp #115 #138]: false
unsat
18979f676bf3221a4e87326c6af281445b312b2a 25 0
#2 := false
#8 := (:var 0 S2)
#9 := (= #8 #8)
#10 := (forall (vars (?v0 S2)) #9)
#11 := (not #10)
#43 := (iff #11 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #11 #38)
#36 := (iff #10 true)
#31 := (forall (vars (?v0 S2)) true)
#34 := (iff #31 true)
#35 := [elim-unused]: #34
#32 := (iff #10 #31)
#29 := (iff #9 true)
#30 := [rewrite]: #29
#33 := [quant-intro #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#28 := [asserted]: #11
[mp #28 #44]: false
unsat
e51be74b693abe9c8e61291306ec53588644e492 34 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (iff #11 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#31 := (= f1 #9)
#34 := (forall (vars (?v0 S2)) #31)
#37 := (iff #34 #34)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (iff #11 #34)
#32 := (iff #10 #31)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#39 := [monotonicity #36 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#30 := [asserted]: #13
[mp #30 #50]: false
unsat
4125d60d3582e621620fa3548de9c8eca203e184 84 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#38 := (= f1 f4)
#53 := (not #38)
#97 := [hypothesis]: #53
decl f3 :: S1
#8 := f3
#35 := (= f1 f3)
#44 := (not #35)
#45 := (or #44 #38)
#54 := (or #35 #53)
#59 := (and #45 #54)
#62 := (iff #35 #38)
#68 := (not #59)
#69 := (or #68 #62)
#74 := (not #69)
#11 := (= f4 f1)
#9 := (= f3 f1)
#15 := (iff #9 #11)
#13 := (implies #11 #9)
#12 := (implies #9 #11)
#14 := (and #12 #13)
#16 := (implies #14 #15)
#17 := (not #16)
#75 := (iff #17 #74)
#72 := (iff #16 #69)
#65 := (implies #59 #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #16 #65)
#63 := (iff #15 #62)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#64 := [monotonicity #37 #40]: #63
#60 := (iff #14 #59)
#57 := (iff #13 #54)
#50 := (implies #38 #35)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #13 #50)
#52 := [monotonicity #40 #37]: #51
#58 := [trans #52 #56]: #57
#48 := (iff #12 #45)
#41 := (implies #35 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#43 := [monotonicity #37 #40]: #42
#49 := [trans #43 #47]: #48
#61 := [monotonicity #49 #58]: #60
#67 := [monotonicity #61 #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#34 := [asserted]: #17
#79 := [mp #34 #76]: #74
#77 := [not-or-elim #79]: #59
#78 := [and-elim #77]: #45
#98 := [unit-resolution #78 #97]: #44
#89 := (or #38 #35)
#90 := (iff #38 #44)
#81 := (not #62)
#91 := (iff #81 #90)
#92 := [rewrite]: #91
#82 := [not-or-elim #79]: #81
#93 := [mp #82 #92]: #90
#94 := (not #90)
#95 := (or #38 #35 #94)
#88 := [def-axiom]: #95
#86 := [unit-resolution #88 #93]: #89
#99 := [unit-resolution #86 #98 #97]: false
#100 := [lemma #99]: #38
#80 := [and-elim #77]: #54
#101 := [unit-resolution #80 #100]: #35
#83 := (or #53 #44)
#87 := (or #53 #44 #94)
#85 := [def-axiom]: #87
#96 := [unit-resolution #85 #93]: #83
[unit-resolution #96 #101 #100]: false
unsat
116ce428b94097a0edc4fc87aad57e0632b1fc20 95 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#74 := ?v0!0
#75 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#76 := (= f1 #75)
#68 := (not #76)
decl ?v1!1 :: S2
#85 := ?v1!1
#86 := (f3 ?v1!1)
#87 := (= f1 #86)
#105 := (or #76 #87)
#108 := (not #105)
#111 := (and #76 #108)
#88 := (or #87 #76)
#89 := (not #88)
#82 := (not #68)
#95 := (and #82 #89)
#112 := (iff #95 #111)
#109 := (iff #89 #108)
#106 := (iff #88 #105)
#107 := [rewrite]: #106
#110 := [monotonicity #107]: #109
#103 := (iff #82 #76)
#104 := [rewrite]: #103
#113 := [monotonicity #104 #110]: #112
#11 := (:var 1 S2)
#12 := (f3 #11)
#39 := (= f1 #12)
#8 := (:var 0 S2)
#9 := (f3 #8)
#36 := (= f1 #9)
#45 := (or #36 #39)
#50 := (forall (vars (?v1 S2)) #45)
#56 := (not #36)
#57 := (or #56 #50)
#62 := (forall (vars (?v0 S2)) #57)
#65 := (not #62)
#98 := (~ #65 #95)
#77 := (or #36 #76)
#71 := (forall (vars (?v1 S2)) #77)
#78 := (or #68 #71)
#79 := (not #78)
#96 := (~ #79 #95)
#90 := (not #71)
#91 := (~ #90 #89)
#92 := [sk]: #91
#83 := (~ #82 #82)
#84 := [refl]: #83
#97 := [nnf-neg #84 #92]: #96
#80 := (~ #65 #79)
#81 := [sk]: #80
#99 := [trans #81 #97]: #98
#10 := (= #9 f1)
#13 := (= #12 f1)
#14 := (or #13 #10)
#15 := (forall (vars (?v1 S2)) #14)
#16 := (implies #10 #15)
#17 := (forall (vars (?v0 S2)) #16)
#18 := (not #17)
#66 := (iff #18 #65)
#63 := (iff #17 #62)
#60 := (iff #16 #57)
#53 := (implies #36 #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #16 #53)
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#42 := (or #39 #36)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #14 #42)
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#40 := (iff #13 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41 #38]: #43
#49 := [trans #44 #47]: #48
#52 := [quant-intro #49]: #51
#55 := [monotonicity #38 #52]: #54
#61 := [trans #55 #59]: #60
#64 := [quant-intro #61]: #63
#67 := [monotonicity #64]: #66
#35 := [asserted]: #18
#70 := [mp #35 #67]: #65
#100 := [mp~ #70 #99]: #95
#101 := [mp #100 #113]: #111
#114 := [and-elim #101]: #108
#115 := [not-or-elim #114]: #68
#102 := [and-elim #101]: #76
[unit-resolution #102 #115]: false
unsat
a2e87bf3803d076628f087b9dbfba9370da7f50c 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (iff #11 #9)
#12 := (iff #9 #11)
#14 := (iff #12 #13)
#15 := (not #14)
#61 := (iff #15 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #15 #56)
#54 := (iff #14 true)
#36 := (= f1 f4)
#33 := (= f1 f3)
#39 := (iff #33 #36)
#49 := (iff #39 #39)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #14 #49)
#47 := (iff #13 #39)
#42 := (iff #36 #33)
#45 := (iff #42 #39)
#46 := [rewrite]: #45
#43 := (iff #13 #42)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #35]: #43
#48 := [trans #44 #46]: #47
#40 := (iff #12 #39)
#41 := [monotonicity #35 #38]: #40
#51 := [monotonicity #41 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#32 := [asserted]: #15
[mp #32 #62]: false
unsat
f55eb15b91cf1e1bc8132b15462149132c31c5f3 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (iff #9 #10)
#12 := (not #11)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#44 := (not false)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #12 #44)
#42 := (iff #11 false)
#31 := (= f1 f3)
#34 := (not #31)
#37 := (iff #31 #34)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#32 := (iff #9 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#39 := [monotonicity #33 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#30 := [asserted]: #13
[mp #30 #57]: false
unsat
f881fcb495cf85502e136be773cb13849da22fee 300 0
#2 := false
decl f4 :: (-> S2 S1)
decl ?v0!1 :: S2
#92 := ?v0!1
#610 := (f4 ?v0!1)
decl f1 :: S1
#4 := f1
#611 := (= f1 #610)
#612 := (not #611)
decl f3 :: (-> S2 S1)
#93 := (f3 ?v0!1)
#94 := (= f1 #93)
#95 := (not #94)
#613 := (or #95 #612)
decl ?v0!0 :: S2
#81 := ?v0!0
#82 := (f4 ?v0!0)
#83 := (= f1 #82)
#84 := (f3 ?v0!0)
#85 := (= f1 #84)
#91 := (not #85)
#90 := (not #83)
#99 := (or #90 #91)
#100 := (not #99)
#364 := [hypothesis]: #99
#8 := (:var 0 S2)
#11 := (f4 #8)
#666 := (pattern #11)
#9 := (f3 #8)
#665 := (pattern #9)
#40 := (= f1 #11)
#170 := (not #40)
#37 := (= f1 #9)
#169 := (not #37)
#171 := (or #169 #170)
#172 := (not #171)
#667 := (forall (vars (?v0 S2)) (:pat #665 #666) #172)
#680 := (forall (vars (?v0 S2)) (:pat #666) #40)
#685 := (not #680)
#672 := (forall (vars (?v0 S2)) (:pat #665) #37)
#677 := (not #672)
#688 := (or #677 #685)
#691 := (not #688)
#664 := [hypothesis]: #691
#249 := (or #688 #672)
#336 := [def-axiom]: #249
#654 := [unit-resolution #336 #664]: #672
decl ?v0!2 :: S2
#101 := ?v0!2
#102 := (f4 ?v0!2)
#103 := (= f1 #102)
#250 := (or #688 #680)
#337 := [def-axiom]: #250
#655 := [unit-resolution #337 #664]: #680
#339 := (or #103 #685)
#329 := [hypothesis]: #680
#104 := (not #103)
#340 := [hypothesis]: #104
#341 := (or #685 #103)
#269 := [quant-inst]: #341
#342 := [unit-resolution #269 #340 #329]: false
#343 := [lemma #342]: #339
#315 := [unit-resolution #343 #655]: #103
#653 := (or #85 #677)
#322 := [hypothesis]: #672
#657 := [hypothesis]: #91
#659 := (or #677 #85)
#316 := [quant-inst]: #659
#446 := [unit-resolution #316 #657 #322]: false
#327 := [lemma #446]: #653
#656 := [unit-resolution #327 #654]: #85
#663 := (or #83 #685)
#328 := [hypothesis]: #90
#661 := (or #685 #83)
#662 := [quant-inst]: #661
#660 := [unit-resolution #662 #328 #329]: false
#658 := [lemma #660]: #663
#299 := [unit-resolution #658 #655]: #83
#163 := (or #90 #91 #95 #104)
#132 := (and #83 #85)
#135 := (not #132)
#141 := (or #95 #104 #135)
#166 := (iff #141 #163)
#160 := (or #95 #104 #99)
#164 := (iff #160 #163)
#165 := [rewrite]: #164
#161 := (iff #141 #160)
#158 := (iff #135 #99)
#153 := (not #100)
#156 := (iff #153 #99)
#157 := [rewrite]: #156
#154 := (iff #135 #153)
#108 := (iff #132 #100)
#109 := [rewrite]: #108
#155 := [monotonicity #109]: #154
#159 := [trans #155 #157]: #158
#162 := [monotonicity #159]: #161
#167 := [trans #162 #165]: #166
#52 := (forall (vars (?v0 S2)) #40)
#49 := (forall (vars (?v0 S2)) #37)
#55 := (and #49 #52)
#43 := (and #37 #40)
#46 := (forall (vars (?v0 S2)) #43)
#146 := (or #46 #55)
#149 := (and #141 #146)
#124 := (or #55 #46)
#86 := (and #85 #83)
#87 := (not #86)
#110 := (or #95 #104)
#125 := (or #110 #87)
#126 := (and #125 #124)
#150 := (iff #126 #149)
#147 := (iff #124 #146)
#148 := [rewrite]: #147
#144 := (iff #125 #141)
#138 := (or #110 #135)
#142 := (iff #138 #141)
#143 := [rewrite]: #142
#139 := (iff #125 #138)
#136 := (iff #87 #135)
#133 := (iff #86 #132)
#134 := [rewrite]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#145 := [trans #140 #143]: #144
#151 := [monotonicity #145 #148]: #150
#64 := (not #46)
#65 := (iff #55 #64)
#127 := (~ #65 #126)
#88 := (~ #64 #87)
#89 := [sk]: #88
#73 := (not #64)
#70 := (~ #73 #46)
#78 := (~ #46 #46)
#76 := (~ #43 #43)
#77 := [refl]: #76
#79 := [nnf-pos #77]: #78
#80 := [nnf-neg #79]: #70
#122 := (~ #55 #55)
#120 := (~ #52 #52)
#118 := (~ #40 #40)
#119 := [refl]: #118
#121 := [nnf-pos #119]: #120
#116 := (~ #49 #49)
#114 := (~ #37 #37)
#115 := [refl]: #114
#117 := [nnf-pos #115]: #116
#123 := [monotonicity #117 #121]: #122
#111 := (not #55)
#112 := (~ #111 #110)
#105 := (not #52)
#106 := (~ #105 #104)
#107 := [sk]: #106
#96 := (not #49)
#97 := (~ #96 #95)
#98 := [sk]: #97
#113 := [nnf-neg #98 #107]: #112
#128 := [nnf-pos #113 #123 #80 #89]: #127
#12 := (= #11 f1)
#16 := (forall (vars (?v0 S2)) #12)
#10 := (= #9 f1)
#15 := (forall (vars (?v0 S2)) #10)
#17 := (and #15 #16)
#13 := (and #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#18 := (iff #14 #17)
#19 := (not #18)
#68 := (iff #19 #65)
#58 := (iff #46 #55)
#61 := (not #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #19 #61)
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#53 := (iff #16 #52)
#41 := (iff #12 #40)
#42 := [rewrite]: #41
#54 := [quant-intro #42]: #53
#50 := (iff #15 #49)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#51 := [quant-intro #39]: #50
#57 := [monotonicity #51 #54]: #56
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#45 := [monotonicity #39 #42]: #44
#48 := [quant-intro #45]: #47
#60 := [monotonicity #48 #57]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#36 := [asserted]: #19
#72 := [mp #36 #69]: #65
#129 := [mp~ #72 #128]: #126
#130 := [mp #129 #151]: #149
#131 := [and-elim #130]: #141
#168 := [mp #131 #167]: #163
#640 := [unit-resolution #168 #299 #656 #315]: #95
#314 := (or #677 #94)
#319 := [quant-inst]: #314
#303 := [unit-resolution #319 #640 #654]: false
#304 := [lemma #303]: #688
#694 := (or #667 #691)
#178 := (or #96 #105)
#179 := (not #178)
#175 := (forall (vars (?v0 S2)) #172)
#182 := (or #175 #179)
#695 := (iff #182 #694)
#692 := (iff #179 #691)
#689 := (iff #178 #688)
#686 := (iff #105 #685)
#683 := (iff #52 #680)
#681 := (iff #40 #40)
#682 := [refl]: #681
#684 := [quant-intro #682]: #683
#687 := [monotonicity #684]: #686
#678 := (iff #96 #677)
#675 := (iff #49 #672)
#673 := (iff #37 #37)
#674 := [refl]: #673
#676 := [quant-intro #674]: #675
#679 := [monotonicity #676]: #678
#690 := [monotonicity #679 #687]: #689
#693 := [monotonicity #690]: #692
#670 := (iff #175 #667)
#668 := (iff #172 #172)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#696 := [monotonicity #671 #693]: #695
#183 := (iff #146 #182)
#180 := (iff #55 #179)
#181 := [rewrite]: #180
#176 := (iff #46 #175)
#173 := (iff #43 #172)
#174 := [rewrite]: #173
#177 := [quant-intro #174]: #176
#184 := [monotonicity #177 #181]: #183
#152 := [and-elim #130]: #146
#185 := [mp #152 #184]: #182
#697 := [mp #185 #696]: #694
#257 := [unit-resolution #697 #304]: #667
#646 := (not #667)
#641 := (or #646 #100)
#305 := (or #91 #90)
#306 := (not #305)
#647 := (or #646 #306)
#648 := (iff #647 #641)
#290 := (iff #641 #641)
#291 := [rewrite]: #290
#644 := (iff #306 #100)
#642 := (iff #305 #99)
#643 := [rewrite]: #642
#645 := [monotonicity #643]: #644
#650 := [monotonicity #645]: #648
#651 := [trans #650 #291]: #648
#285 := [quant-inst]: #647
#649 := [mp #285 #651]: #641
#634 := [unit-resolution #649 #257 #364]: false
#635 := [lemma #634]: #100
#652 := (or #99 #83)
#638 := [def-axiom]: #652
#608 := [unit-resolution #638 #635]: #83
#639 := (or #99 #85)
#361 := [def-axiom]: #639
#614 := [unit-resolution #361 #635]: #85
#357 := (f3 ?v0!2)
#358 := (= f1 #357)
#632 := (not #358)
#637 := (or #104 #632)
#349 := (not #637)
#466 := [hypothesis]: #637
#629 := (or #646 #349)
#636 := (or #632 #104)
#633 := (not #636)
#344 := (or #646 #633)
#630 := (iff #344 #629)
#631 := (iff #629 #629)
#620 := [rewrite]: #631
#350 := (iff #633 #349)
#347 := (iff #636 #637)
#348 := [rewrite]: #347
#628 := [monotonicity #348]: #350
#627 := [monotonicity #628]: #630
#621 := [trans #627 #620]: #630
#626 := [quant-inst]: #344
#622 := [mp #626 #621]: #629
#467 := [unit-resolution #622 #257 #466]: false
#468 := [lemma #467]: #349
#617 := (or #637 #103)
#618 := [def-axiom]: #617
#604 := [unit-resolution #618 #468]: #103
#605 := [unit-resolution #168 #604 #614 #608]: #95
#616 := (or #613 #94)
#445 := [def-axiom]: #616
#603 := [unit-resolution #445 #605]: #613
#607 := (not #613)
#615 := (or #646 #607)
#609 := [quant-inst]: #615
[unit-resolution #609 #257 #603]: false
unsat
9f209003251b1e93d2b18400dbce611ea9c89175 60 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (not #11)
#15 := (implies #13 #14)
#12 := (implies #9 #11)
#16 := (iff #12 #15)
#17 := (not #16)
#74 := (iff #17 false)
#1 := true
#69 := (not true)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #17 #69)
#67 := (iff #16 true)
#38 := (= f1 f4)
#35 := (= f1 f3)
#44 := (not #35)
#45 := (or #44 #38)
#62 := (iff #45 #45)
#65 := (iff #62 true)
#66 := [rewrite]: #65
#63 := (iff #16 #62)
#60 := (iff #15 #45)
#50 := (not #38)
#55 := (implies #50 #44)
#58 := (iff #55 #45)
#59 := [rewrite]: #58
#56 := (iff #15 #55)
#53 := (iff #14 #44)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#54 := [monotonicity #37]: #53
#51 := (iff #13 #50)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#52 := [monotonicity #40]: #51
#57 := [monotonicity #52 #54]: #56
#61 := [trans #57 #59]: #60
#48 := (iff #12 #45)
#41 := (implies #35 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#43 := [monotonicity #37 #40]: #42
#49 := [trans #43 #47]: #48
#64 := [monotonicity #49 #61]: #63
#68 := [trans #64 #66]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#34 := [asserted]: #17
[mp #34 #75]: false
unsat
233dd705a1a2cd04e17693dd59c653e2f289128d 72 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (iff #9 #9)
#11 := (iff #9 #10)
#12 := (iff #9 #11)
#13 := (iff #9 #12)
#14 := (iff #9 #13)
#15 := (iff #9 #14)
#16 := (iff #9 #15)
#17 := (iff #9 #16)
#18 := (iff #9 #17)
#19 := (not #18)
#87 := (iff #19 false)
#1 := true
#82 := (not true)
#85 := (iff #82 false)
#86 := [rewrite]: #85
#83 := (iff #19 #82)
#80 := (iff #18 true)
#37 := (= f1 f3)
#40 := (iff #37 #37)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#78 := (iff #18 #40)
#76 := (iff #17 #37)
#47 := (iff #37 true)
#50 := (iff #47 #37)
#51 := [rewrite]: #50
#74 := (iff #17 #47)
#72 := (iff #16 true)
#70 := (iff #16 #40)
#68 := (iff #15 #37)
#66 := (iff #15 #47)
#64 := (iff #14 true)
#62 := (iff #14 #40)
#60 := (iff #13 #37)
#58 := (iff #13 #47)
#56 := (iff #12 true)
#54 := (iff #12 #40)
#52 := (iff #11 #37)
#48 := (iff #11 #47)
#45 := (iff #10 true)
#41 := (iff #10 #40)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #39 #46]: #48
#53 := [trans #49 #51]: #52
#55 := [monotonicity #39 #53]: #54
#57 := [trans #55 #44]: #56
#59 := [monotonicity #39 #57]: #58
#61 := [trans #59 #51]: #60
#63 := [monotonicity #39 #61]: #62
#65 := [trans #63 #44]: #64
#67 := [monotonicity #39 #65]: #66
#69 := [trans #67 #51]: #68
#71 := [monotonicity #39 #69]: #70
#73 := [trans #71 #44]: #72
#75 := [monotonicity #39 #73]: #74
#77 := [trans #75 #51]: #76
#79 := [monotonicity #39 #77]: #78
#81 := [trans #79 #44]: #80
#84 := [monotonicity #81]: #83
#88 := [trans #84 #86]: #87
#36 := [asserted]: #19
[mp #36 #88]: false
unsat
15ca2c1c3840e8c9f4b2011d8b0b39ef04345936 201 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#621 := (pattern #9)
decl f1 :: S1
#4 := f1
#36 := (= f1 #9)
#622 := (forall (vars (?v0 S2)) (:pat #621) #36)
decl f4 :: S1
#12 := f4
#42 := (= f1 f4)
#90 := (not #42)
decl ?v0!0 :: S2
#81 := ?v0!0
#82 := (f3 ?v0!0)
#83 := (= f1 #82)
#104 := (or #42 #83)
#105 := (not #104)
decl ?v0!1 :: S2
#96 := ?v0!1
#97 := (f3 ?v0!1)
#98 := (= f1 #97)
#118 := (or #42 #98)
#48 := (or #36 #42)
#627 := (forall (vars (?v0 S2)) (:pat #621) #48)
#121 := (not #118)
#612 := [hypothesis]: #121
#283 := (or #118 #90)
#294 := [def-axiom]: #283
#253 := [unit-resolution #294 #612]: #90
#615 := (not #622)
#295 := (not #98)
#223 := (or #118 #295)
#296 := [def-axiom]: #223
#596 := [unit-resolution #296 #612]: #295
#270 := (or #615 #98)
#276 := [hypothesis]: #622
#613 := [hypothesis]: #295
#402 := [quant-inst]: #270
#609 := [unit-resolution #402 #613 #276]: false
#281 := [lemma #609]: #270
#257 := [unit-resolution #281 #596]: #615
#632 := (or #622 #42 #627)
#51 := (forall (vars (?v0 S2)) #48)
#39 := (forall (vars (?v0 S2)) #36)
#130 := (or #39 #42 #51)
#633 := (iff #130 #632)
#630 := (iff #51 #627)
#628 := (iff #48 #48)
#629 := [refl]: #628
#631 := [quant-intro #629]: #630
#625 := (iff #39 #622)
#623 := (iff #36 #36)
#624 := [refl]: #623
#626 := [quant-intro #624]: #625
#634 := [monotonicity #626 #631]: #633
#84 := (not #83)
#124 := (and #90 #84)
#127 := (or #121 #124)
#133 := (and #127 #130)
#45 := (or #39 #42)
#110 := (or #51 #45)
#93 := (and #84 #90)
#99 := (or #98 #42)
#100 := (not #99)
#111 := (or #100 #93)
#112 := (and #111 #110)
#134 := (iff #112 #133)
#131 := (iff #110 #130)
#132 := [rewrite]: #131
#128 := (iff #111 #127)
#125 := (iff #93 #124)
#126 := [rewrite]: #125
#122 := (iff #100 #121)
#119 := (iff #99 #118)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#129 := [monotonicity #123 #126]: #128
#135 := [monotonicity #129 #132]: #134
#60 := (not #45)
#61 := (iff #51 #60)
#113 := (~ #61 #112)
#94 := (~ #60 #93)
#91 := (~ #90 #90)
#92 := [refl]: #91
#85 := (not #39)
#86 := (~ #85 #84)
#87 := [sk]: #86
#95 := [nnf-neg #87 #92]: #94
#78 := (not #60)
#79 := (~ #78 #45)
#76 := (~ #45 #45)
#69 := (~ #42 #42)
#66 := [refl]: #69
#74 := (~ #39 #39)
#72 := (~ #36 #36)
#73 := [refl]: #72
#75 := [nnf-pos #73]: #74
#77 := [monotonicity #75 #66]: #76
#80 := [nnf-neg #77]: #79
#108 := (~ #51 #51)
#106 := (~ #48 #48)
#107 := [refl]: #106
#109 := [nnf-pos #107]: #108
#101 := (not #51)
#102 := (~ #101 #100)
#103 := [sk]: #102
#114 := [nnf-pos #103 #109 #80 #95]: #113
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (or #10 #13)
#16 := (forall (vars (?v0 S2)) #15)
#11 := (forall (vars (?v0 S2)) #10)
#14 := (or #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#64 := (iff #18 #61)
#54 := (iff #45 #51)
#57 := (not #54)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #18 #57)
#55 := (iff #17 #54)
#52 := (iff #16 #51)
#49 := (iff #15 #48)
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#50 := [monotonicity #38 #44]: #49
#53 := [quant-intro #50]: #52
#46 := (iff #14 #45)
#40 := (iff #11 #39)
#41 := [quant-intro #38]: #40
#47 := [monotonicity #41 #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#35 := [asserted]: #18
#68 := [mp #35 #65]: #61
#115 := [mp~ #68 #114]: #112
#116 := [mp #115 #135]: #133
#136 := [and-elim #116]: #130
#635 := [mp #136 #634]: #632
#258 := [unit-resolution #635 #257 #253]: #627
#282 := (not #627)
#616 := (or #282 #42 #98)
#617 := (or #282 #99)
#273 := (iff #617 #616)
#619 := (or #282 #118)
#610 := (iff #619 #616)
#268 := [rewrite]: #610
#614 := (iff #617 #619)
#620 := [monotonicity #120]: #614
#611 := [trans #620 #268]: #273
#618 := [quant-inst]: #617
#269 := [mp #618 #611]: #616
#259 := [unit-resolution #269 #253 #596 #258]: false
#260 := [lemma #259]: #118
#140 := (or #105 #121)
#143 := (iff #127 #140)
#137 := (or #121 #105)
#141 := (iff #137 #140)
#142 := [rewrite]: #141
#138 := (iff #127 #137)
#88 := (iff #124 #105)
#89 := [rewrite]: #88
#139 := [monotonicity #89]: #138
#144 := [trans #139 #142]: #143
#117 := [and-elim #116]: #127
#145 := [mp #117 #144]: #140
#594 := [unit-resolution #145 #260]: #105
#203 := (or #104 #90)
#290 := [def-axiom]: #203
#301 := [unit-resolution #290 #594]: #90
#608 := [hypothesis]: #627
#204 := (or #104 #84)
#291 := [def-axiom]: #204
#595 := [unit-resolution #291 #594]: #84
#601 := (or #282 #42 #83)
#598 := (or #83 #42)
#602 := (or #282 #598)
#245 := (iff #602 #601)
#603 := (or #282 #104)
#606 := (iff #603 #601)
#244 := [rewrite]: #606
#239 := (iff #602 #603)
#599 := (iff #598 #104)
#600 := [rewrite]: #599
#604 := [monotonicity #600]: #239
#607 := [trans #604 #244]: #245
#597 := [quant-inst]: #602
#605 := [mp #597 #607]: #601
#317 := [unit-resolution #605 #301 #595 #608]: false
#318 := [lemma #317]: #282
#319 := [unit-resolution #635 #318 #301]: #622
#320 := (or #615 #83)
#211 := [quant-inst]: #320
[unit-resolution #211 #595 #319]: false
unsat
39e227ccd01de1131a3c129a5a992e4af88b7e62 244 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#81 := ?v0!0
#82 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#83 := (= f1 #82)
#84 := (not #83)
decl f4 :: S1
#12 := f4
#42 := (= f1 f4)
#90 := (not #42)
#270 := (or #90 #84)
decl ?v0!1 :: S2
#96 := ?v0!1
#97 := (f3 ?v0!1)
#98 := (= f1 #97)
#104 := (not #98)
#105 := (or #90 #104)
#88 := (not #105)
#623 := [hypothesis]: #105
#8 := (:var 0 S2)
#9 := (f3 #8)
#647 := (pattern #9)
#36 := (= f1 #9)
#160 := (not #36)
#161 := (or #160 #90)
#162 := (not #161)
#662 := (forall (vars (?v0 S2)) (:pat #647) #162)
#648 := (forall (vars (?v0 S2)) (:pat #647) #36)
#653 := (not #648)
#656 := (or #653 #90)
#659 := (not #656)
#302 := [hypothesis]: #659
#229 := (or #656 #648)
#316 := [def-axiom]: #229
#639 := [unit-resolution #316 #302]: #648
#230 := (or #656 #42)
#317 := [def-axiom]: #230
#428 := [unit-resolution #317 #302]: #42
#319 := (or #98 #653)
#309 := [hypothesis]: #648
#320 := [hypothesis]: #104
#321 := (or #653 #98)
#249 := [quant-inst]: #321
#322 := [unit-resolution #249 #320 #309]: false
#323 := [lemma #322]: #319
#635 := [unit-resolution #323 #639]: #98
#150 := (or #90 #84 #104)
#118 := (and #42 #98)
#121 := (not #118)
#127 := (or #90 #84 #121)
#153 := (iff #127 #150)
#147 := (or #90 #84 #105)
#151 := (iff #147 #150)
#152 := [rewrite]: #151
#148 := (iff #127 #147)
#145 := (iff #121 #105)
#140 := (not #88)
#143 := (iff #140 #105)
#144 := [rewrite]: #143
#141 := (iff #121 #140)
#89 := (iff #118 #88)
#139 := [rewrite]: #89
#142 := [monotonicity #139]: #141
#146 := [trans #142 #144]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#48 := (and #36 #42)
#51 := (forall (vars (?v0 S2)) #48)
#39 := (forall (vars (?v0 S2)) #36)
#45 := (and #39 #42)
#132 := (or #45 #51)
#135 := (and #127 #132)
#110 := (or #51 #45)
#93 := (or #84 #90)
#99 := (and #98 #42)
#100 := (not #99)
#111 := (or #100 #93)
#112 := (and #111 #110)
#136 := (iff #112 #135)
#133 := (iff #110 #132)
#134 := [rewrite]: #133
#130 := (iff #111 #127)
#124 := (or #121 #93)
#128 := (iff #124 #127)
#129 := [rewrite]: #128
#125 := (iff #111 #124)
#122 := (iff #100 #121)
#119 := (iff #99 #118)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#126 := [monotonicity #123]: #125
#131 := [trans #126 #129]: #130
#137 := [monotonicity #131 #134]: #136
#60 := (not #45)
#61 := (iff #51 #60)
#113 := (~ #61 #112)
#94 := (~ #60 #93)
#91 := (~ #90 #90)
#92 := [refl]: #91
#85 := (not #39)
#86 := (~ #85 #84)
#87 := [sk]: #86
#95 := [nnf-neg #87 #92]: #94
#78 := (not #60)
#79 := (~ #78 #45)
#76 := (~ #45 #45)
#69 := (~ #42 #42)
#66 := [refl]: #69
#74 := (~ #39 #39)
#72 := (~ #36 #36)
#73 := [refl]: #72
#75 := [nnf-pos #73]: #74
#77 := [monotonicity #75 #66]: #76
#80 := [nnf-neg #77]: #79
#108 := (~ #51 #51)
#106 := (~ #48 #48)
#107 := [refl]: #106
#109 := [nnf-pos #107]: #108
#101 := (not #51)
#102 := (~ #101 #100)
#103 := [sk]: #102
#114 := [nnf-pos #103 #109 #80 #95]: #113
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (and #10 #13)
#16 := (forall (vars (?v0 S2)) #15)
#11 := (forall (vars (?v0 S2)) #10)
#14 := (and #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#64 := (iff #18 #61)
#54 := (iff #45 #51)
#57 := (not #54)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #18 #57)
#55 := (iff #17 #54)
#52 := (iff #16 #51)
#49 := (iff #15 #48)
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#50 := [monotonicity #38 #44]: #49
#53 := [quant-intro #50]: #52
#46 := (iff #14 #45)
#40 := (iff #11 #39)
#41 := [quant-intro #38]: #40
#47 := [monotonicity #41 #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#35 := [asserted]: #18
#68 := [mp #35 #65]: #61
#115 := [mp~ #68 #114]: #112
#116 := [mp #115 #137]: #135
#117 := [and-elim #116]: #127
#155 := [mp #117 #154]: #150
#307 := [unit-resolution #155 #635 #428]: #84
#641 := (or #653 #83)
#296 := [quant-inst]: #641
#308 := [unit-resolution #296 #307 #639]: false
#642 := [lemma #308]: #656
#667 := (or #659 #662)
#165 := (forall (vars (?v0 S2)) #162)
#156 := (or #85 #90)
#157 := (not #156)
#168 := (or #157 #165)
#668 := (iff #168 #667)
#665 := (iff #165 #662)
#663 := (iff #162 #162)
#664 := [refl]: #663
#666 := [quant-intro #664]: #665
#660 := (iff #157 #659)
#657 := (iff #156 #656)
#654 := (iff #85 #653)
#651 := (iff #39 #648)
#649 := (iff #36 #36)
#650 := [refl]: #649
#652 := [quant-intro #650]: #651
#655 := [monotonicity #652]: #654
#658 := [monotonicity #655]: #657
#661 := [monotonicity #658]: #660
#669 := [monotonicity #661 #666]: #668
#169 := (iff #132 #168)
#166 := (iff #51 #165)
#163 := (iff #48 #162)
#164 := [rewrite]: #163
#167 := [quant-intro #164]: #166
#158 := (iff #45 #157)
#159 := [rewrite]: #158
#170 := [monotonicity #159 #167]: #169
#138 := [and-elim #116]: #132
#171 := [mp #138 #170]: #168
#670 := [mp #171 #669]: #667
#629 := [unit-resolution #670 #642]: #662
#294 := (not #662)
#299 := (or #294 #88)
#643 := (or #104 #90)
#644 := (not #643)
#637 := (or #294 #644)
#638 := (iff #637 #299)
#622 := (iff #299 #299)
#283 := [rewrite]: #622
#646 := (iff #644 #88)
#645 := (iff #643 #105)
#640 := [rewrite]: #645
#636 := [monotonicity #640]: #646
#279 := [monotonicity #636]: #638
#284 := [trans #279 #283]: #638
#295 := [quant-inst]: #637
#285 := [mp #295 #284]: #299
#265 := [unit-resolution #285 #629 #623]: false
#630 := [lemma #265]: #88
#286 := (or #105 #42)
#624 := [def-axiom]: #286
#619 := [unit-resolution #624 #630]: #42
#625 := (or #105 #98)
#626 := [def-axiom]: #625
#328 := [unit-resolution #626 #630]: #98
#329 := [unit-resolution #155 #328 #619]: #84
#340 := (or #270 #83)
#614 := [def-axiom]: #340
#330 := [unit-resolution #614 #329]: #270
#631 := (not #270)
#621 := (or #294 #631)
#632 := (not #93)
#327 := (or #294 #632)
#344 := (iff #327 #621)
#331 := (iff #621 #621)
#346 := [rewrite]: #331
#634 := (iff #632 #631)
#271 := (iff #93 #270)
#633 := [rewrite]: #271
#620 := [monotonicity #633]: #634
#345 := [monotonicity #620]: #344
#237 := [trans #345 #346]: #344
#343 := [quant-inst]: #327
#616 := [mp #343 #237]: #621
[unit-resolution #616 #629 #330]: false
unsat
293275a96c0f9a6369c5c63237687d458f6817d7 25 0
#2 := false
#8 := (:var 0 S2)
#9 := (= #8 #8)
#10 := (exists (vars (?v0 S2)) #9)
#11 := (not #10)
#43 := (iff #11 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #11 #38)
#36 := (iff #10 true)
#31 := (exists (vars (?v0 S2)) true)
#34 := (iff #31 true)
#35 := [elim-unused]: #34
#32 := (iff #10 #31)
#29 := (iff #9 true)
#30 := [rewrite]: #29
#33 := [quant-intro #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#28 := [asserted]: #11
[mp #28 #44]: false
unsat
cb32f55c5bc6bd5f823005e6422725f9e998da2f 34 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (exists (vars (?v0 S2)) #10)
#12 := (iff #11 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#31 := (= f1 #9)
#34 := (exists (vars (?v0 S2)) #31)
#37 := (iff #34 #34)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (iff #11 #34)
#32 := (iff #10 #31)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#39 := [monotonicity #36 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#30 := [asserted]: #13
[mp #30 #50]: false
unsat
01fcfe482cd417aecd358af024dc175a0edc268e 49 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S2 S1)
#9 := (:var 0 S2)
#13 := (:var 1 S2)
#14 := (f3 #13 #9)
#15 := (= #14 f1)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#8 := (:var 2 S2)
#10 := (f3 #8 #9)
#11 := (= #10 f1)
#12 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #11)
#17 := (iff #12 #16)
#18 := (not #17)
#64 := (iff #18 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #18 #59)
#57 := (iff #17 true)
#42 := (= f1 #14)
#43 := (forall (vars (?v0 S2) (?v2 S2)) #42)
#52 := (iff #43 #43)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #17 #52)
#50 := (iff #16 #43)
#48 := (iff #15 #42)
#49 := [rewrite]: #48
#51 := [quant-intro #49]: #50
#46 := (iff #12 #43)
#36 := (= f1 #10)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #36)
#44 := (iff #39 #43)
#45 := [elim-unused]: #44
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#41 := [quant-intro #38]: #40
#47 := [trans #41 #45]: #46
#54 := [monotonicity #47 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #18
[mp #35 #65]: false
unsat
b43b0d1e4a922ebd6679eaa136d5464c794bec63 258 0
#2 := false
decl f4 :: (-> S2 S1)
decl ?v0!2 :: S2
#118 := ?v0!2
#119 := (f4 ?v0!2)
decl f1 :: S1
#4 := f1
#120 := (= f1 #119)
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#111 := ?v0!1
#112 := (f3 ?v0!1)
#113 := (= f1 #112)
#610 := (not #113)
#308 := [hypothesis]: #113
#8 := (:var 0 S2)
#9 := (f3 #8)
#629 := (pattern #9)
#37 := (= f1 #9)
#93 := (not #37)
#636 := (forall (vars (?v0 S2)) (:pat #629) #93)
#11 := (f4 #8)
#630 := (pattern #11)
#40 := (= f1 #11)
#100 := (not #40)
#644 := (forall (vars (?v0 S2)) (:pat #630) #100)
#649 := (not #644)
#641 := (not #636)
#652 := (or #641 #649)
#655 := (not #652)
#43 := (or #37 #40)
#87 := (not #43)
#631 := (forall (vars (?v0 S2)) (:pat #629 #630) #87)
#280 := (not #631)
#616 := (f3 ?v0!2)
#602 := (= f1 #616)
#326 := (or #120 #602)
decl ?v0!0 :: S2
#76 := ?v0!0
#77 := (f4 ?v0!0)
#78 := (= f1 #77)
#626 := (not #78)
#79 := (f3 ?v0!0)
#73 := (= f1 #79)
#70 := (or #73 #78)
#286 := (not #70)
#625 := [hypothesis]: #631
#263 := (or #286 #280)
#624 := [hypothesis]: #70
#410 := (or #280 #286)
#617 := [quant-inst]: #410
#620 := [unit-resolution #617 #625 #624]: false
#604 := [lemma #620]: #263
#584 := [unit-resolution #604 #625]: #286
#627 := (or #70 #626)
#622 := [def-axiom]: #627
#585 := [unit-resolution #622 #584]: #626
#293 := (not #73)
#304 := [hypothesis]: #73
#291 := (or #70 #293)
#292 := [def-axiom]: #291
#621 := [unit-resolution #292 #304]: #70
#233 := (or #641 #293)
#305 := [hypothesis]: #636
#306 := [quant-inst]: #233
#303 := [unit-resolution #306 #305 #304]: false
#307 := [lemma #303]: #233
#623 := [unit-resolution #307 #304]: #641
#213 := (or #652 #636)
#300 := [def-axiom]: #213
#628 := [unit-resolution #300 #623]: #652
#658 := (or #631 #655)
#103 := (forall (vars (?v0 S2)) #100)
#117 := (not #103)
#96 := (forall (vars (?v0 S2)) #93)
#116 := (not #96)
#123 := (or #116 #117)
#124 := (not #123)
#90 := (forall (vars (?v0 S2)) #87)
#146 := (or #90 #124)
#659 := (iff #146 #658)
#656 := (iff #124 #655)
#653 := (iff #123 #652)
#650 := (iff #117 #649)
#647 := (iff #103 #644)
#645 := (iff #100 #100)
#646 := [refl]: #645
#648 := [quant-intro #646]: #647
#651 := [monotonicity #648]: #650
#642 := (iff #116 #641)
#639 := (iff #96 #636)
#637 := (iff #93 #93)
#638 := [refl]: #637
#640 := [quant-intro #638]: #639
#643 := [monotonicity #640]: #642
#654 := [monotonicity #643 #651]: #653
#657 := [monotonicity #654]: #656
#634 := (iff #90 #631)
#632 := (iff #87 #87)
#633 := [refl]: #632
#635 := [quant-intro #633]: #634
#660 := [monotonicity #635 #657]: #659
#107 := (and #96 #103)
#136 := (or #90 #107)
#147 := (iff #136 #146)
#82 := (iff #107 #124)
#83 := [rewrite]: #82
#148 := [monotonicity #83]: #147
#139 := (or #73 #78 #113 #120)
#142 := (and #136 #139)
#125 := (or #113 #120)
#128 := (or #125 #70)
#129 := (or #107 #90)
#130 := (and #129 #128)
#143 := (iff #130 #142)
#140 := (iff #128 #139)
#141 := [rewrite]: #140
#137 := (iff #129 #136)
#138 := [rewrite]: #137
#144 := [monotonicity #138 #141]: #143
#46 := (exists (vars (?v0 S2)) #43)
#64 := (not #46)
#52 := (exists (vars (?v0 S2)) #40)
#49 := (exists (vars (?v0 S2)) #37)
#55 := (or #49 #52)
#65 := (iff #55 #64)
#131 := (~ #65 #130)
#91 := (~ #64 #90)
#88 := (~ #87 #87)
#89 := [refl]: #88
#92 := [nnf-neg #89]: #91
#84 := (not #64)
#85 := (~ #84 #70)
#80 := (~ #46 #70)
#81 := [sk]: #80
#86 := [nnf-neg #81]: #85
#126 := (~ #55 #125)
#121 := (~ #52 #120)
#122 := [sk]: #121
#114 := (~ #49 #113)
#115 := [sk]: #114
#127 := [monotonicity #115 #122]: #126
#108 := (not #55)
#109 := (~ #108 #107)
#104 := (not #52)
#105 := (~ #104 #103)
#101 := (~ #100 #100)
#102 := [refl]: #101
#106 := [nnf-neg #102]: #105
#97 := (not #49)
#98 := (~ #97 #96)
#94 := (~ #93 #93)
#95 := [refl]: #94
#99 := [nnf-neg #95]: #98
#110 := [nnf-neg #99 #106]: #109
#132 := [nnf-pos #110 #127 #86 #92]: #131
#12 := (= #11 f1)
#16 := (exists (vars (?v0 S2)) #12)
#10 := (= #9 f1)
#15 := (exists (vars (?v0 S2)) #10)
#17 := (or #15 #16)
#13 := (or #10 #12)
#14 := (exists (vars (?v0 S2)) #13)
#18 := (iff #14 #17)
#19 := (not #18)
#68 := (iff #19 #65)
#58 := (iff #46 #55)
#61 := (not #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #19 #61)
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#53 := (iff #16 #52)
#41 := (iff #12 #40)
#42 := [rewrite]: #41
#54 := [quant-intro #42]: #53
#50 := (iff #15 #49)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#51 := [quant-intro #39]: #50
#57 := [monotonicity #51 #54]: #56
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#45 := [monotonicity #39 #42]: #44
#48 := [quant-intro #45]: #47
#60 := [monotonicity #48 #57]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#36 := [asserted]: #19
#72 := [mp #36 #69]: #65
#133 := [mp~ #72 #132]: #130
#134 := [mp #133 #144]: #142
#135 := [and-elim #134]: #136
#149 := [mp #135 #148]: #146
#661 := [mp #149 #660]: #658
#618 := [unit-resolution #661 #628]: #631
#278 := [unit-resolution #617 #618 #621]: false
#283 := [lemma #278]: #293
#267 := (f4 ?v0!1)
#268 := (= f1 #267)
#269 := (or #113 #268)
#270 := (not #269)
#615 := (or #270 #280)
#606 := [hypothesis]: #269
#608 := (or #280 #270)
#609 := [quant-inst]: #608
#607 := [unit-resolution #609 #625 #606]: false
#613 := [lemma #607]: #615
#586 := [unit-resolution #613 #625]: #270
#605 := (or #269 #610)
#611 := [def-axiom]: #605
#581 := [unit-resolution #611 #586]: #610
#145 := [and-elim #134]: #139
#582 := [unit-resolution #145 #581 #283 #585]: #120
#314 := (not #120)
#592 := (or #326 #314)
#593 := [def-axiom]: #592
#587 := [unit-resolution #593 #582]: #326
#221 := (not #326)
#321 := (or #280 #221)
#603 := (or #602 #120)
#325 := (not #603)
#322 := (or #280 #325)
#600 := (iff #322 #321)
#601 := (iff #321 #321)
#311 := [rewrite]: #601
#598 := (iff #325 #221)
#327 := (iff #603 #326)
#328 := [rewrite]: #327
#599 := [monotonicity #328]: #598
#597 := [monotonicity #599]: #600
#312 := [trans #597 #311]: #600
#596 := [quant-inst]: #322
#313 := [mp #596 #312]: #321
#588 := [unit-resolution #313 #625 #587]: false
#583 := [lemma #588]: #280
#590 := [unit-resolution #661 #583]: #655
#595 := [unit-resolution #300 #590]: #636
#594 := (or #641 #610)
#591 := [quant-inst]: #594
#589 := [unit-resolution #591 #595 #308]: false
#430 := [lemma #589]: #610
#431 := [hypothesis]: #78
#214 := (or #652 #644)
#301 := [def-axiom]: #214
#432 := [unit-resolution #301 #590]: #644
#574 := (or #649 #626)
#575 := [quant-inst]: #574
#576 := [unit-resolution #575 #432 #431]: false
#577 := [lemma #576]: #626
#571 := (or #78 #113 #120)
#572 := [unit-resolution #145 #283]: #571
#573 := [unit-resolution #572 #577 #430]: #120
#578 := (or #649 #314)
#579 := [quant-inst]: #578
[unit-resolution #579 #432 #573]: false
unsat
157e9ba0de5d7f3b7a1453e2a11927d703beea38 136 0
#2 := false
decl f3 :: (-> S2 S2 S1)
decl f4 :: S2
#16 := f4
decl f5 :: S2
#20 := f5
#180 := (f3 f5 f4)
decl f1 :: S1
#4 := f1
#267 := (= f1 #180)
#181 := (not #267)
#21 := (f3 f4 f5)
#67 := (= f1 #21)
#102 := (not #67)
#9 := (:var 0 S2)
#17 := (f3 #9 f4)
#61 := (= f1 #17)
#64 := (forall (vars (?v0 S2)) #61)
#73 := (not #64)
#8 := (:var 1 S2)
#12 := (f3 #9 #8)
#46 := (= f1 #12)
#10 := (f3 #8 #9)
#43 := (= f1 #10)
#52 := (not #43)
#53 := (or #52 #46)
#58 := (forall (vars (?v0 S2) (?v1 S2)) #53)
#82 := (not #58)
#91 := (or #82 #73 #67)
#94 := (not #91)
#22 := (= #21 f1)
#18 := (= #17 f1)
#19 := (forall (vars (?v0 S2)) #18)
#23 := (implies #19 #22)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#24 := (implies #15 #23)
#25 := (not #24)
#97 := (iff #25 #94)
#74 := (or #73 #67)
#83 := (or #82 #74)
#88 := (not #83)
#95 := (iff #88 #94)
#92 := (iff #83 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#89 := (iff #25 #88)
#86 := (iff #24 #83)
#79 := (implies #58 #74)
#84 := (iff #79 #83)
#85 := [rewrite]: #84
#80 := (iff #24 #79)
#77 := (iff #23 #74)
#70 := (implies #64 #67)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #23 #70)
#68 := (iff #22 #67)
#69 := [rewrite]: #68
#65 := (iff #19 #64)
#62 := (iff #18 #61)
#63 := [rewrite]: #62
#66 := [quant-intro #63]: #65
#72 := [monotonicity #66 #69]: #71
#78 := [trans #72 #76]: #77
#59 := (iff #15 #58)
#56 := (iff #14 #53)
#49 := (implies #43 #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#48 := [rewrite]: #47
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#51 := [monotonicity #45 #48]: #50
#57 := [trans #51 #55]: #56
#60 := [quant-intro #57]: #59
#81 := [monotonicity #60 #78]: #80
#87 := [trans #81 #85]: #86
#90 := [monotonicity #87]: #89
#98 := [trans #90 #96]: #97
#42 := [asserted]: #25
#99 := [mp #42 #98]: #94
#103 := [not-or-elim #99]: #102
#597 := (pattern #12)
#596 := (pattern #10)
#598 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #596 #597) #53)
#601 := (iff #58 #598)
#599 := (iff #53 #53)
#600 := [refl]: #599
#602 := [quant-intro #600]: #601
#115 := (~ #58 #58)
#113 := (~ #53 #53)
#114 := [refl]: #113
#116 := [nnf-pos #114]: #115
#100 := [not-or-elim #99]: #58
#106 := [mp~ #100 #116]: #58
#603 := [mp #106 #602]: #598
#271 := (not #598)
#272 := (or #271 #67 #181)
#268 := (or #181 #67)
#200 := (or #271 #268)
#247 := (iff #200 #272)
#182 := (or #67 #181)
#270 := (or #271 #182)
#588 := (iff #270 #272)
#590 := [rewrite]: #588
#274 := (iff #200 #270)
#269 := (iff #268 #182)
#260 := [rewrite]: #269
#253 := [monotonicity #260]: #274
#377 := [trans #253 #590]: #247
#273 := [quant-inst]: #200
#584 := [mp #273 #377]: #272
#258 := [unit-resolution #584 #603 #103]: #181
#604 := (pattern #17)
#605 := (forall (vars (?v0 S2)) (:pat #604) #61)
#608 := (iff #64 #605)
#606 := (iff #61 #61)
#607 := [refl]: #606
#609 := [quant-intro #607]: #608
#107 := (~ #64 #64)
#104 := (~ #61 #61)
#117 := [refl]: #104
#108 := [nnf-pos #117]: #107
#101 := [not-or-elim #99]: #64
#118 := [mp~ #101 #108]: #64
#610 := [mp #118 #609]: #605
#591 := (not #605)
#592 := (or #591 #267)
#593 := [quant-inst]: #592
[unit-resolution #593 #610 #258]: false
unsat
b13823d6af0970648680336d47e5ac31c5900b24 124 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: (-> S2 S2)
decl f5 :: S2
#16 := f5
#20 := (f4 f5)
#21 := (f4 #20)
#154 := (f3 #21)
decl f1 :: S1
#4 := f1
#241 := (= f1 #154)
#152 := (f3 #20)
#239 := (= f1 #152)
#17 := (f3 f5)
#62 := (= f1 #17)
#8 := (:var 0 S2)
#11 := (f4 #8)
#12 := (f3 #11)
#47 := (= f1 #12)
#9 := (f3 #8)
#44 := (= f1 #9)
#53 := (not #44)
#54 := (or #53 #47)
#59 := (forall (vars (?v0 S2)) #54)
#65 := (and #59 #62)
#22 := (f4 #21)
#23 := (f3 #22)
#68 := (= f1 #23)
#74 := (not #65)
#75 := (or #74 #68)
#80 := (not #75)
#24 := (= #23 f1)
#18 := (= #17 f1)
#13 := (= #12 f1)
#10 := (= #9 f1)
#14 := (implies #10 #13)
#15 := (forall (vars (?v0 S2)) #14)
#19 := (and #15 #18)
#25 := (implies #19 #24)
#26 := (not #25)
#81 := (iff #26 #80)
#78 := (iff #25 #75)
#71 := (implies #65 #68)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #25 #71)
#69 := (iff #24 #68)
#70 := [rewrite]: #69
#66 := (iff #19 #65)
#63 := (iff #18 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#57 := (iff #14 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [quant-intro #58]: #60
#67 := [monotonicity #61 #64]: #66
#73 := [monotonicity #67 #70]: #72
#79 := [trans #73 #77]: #78
#82 := [monotonicity #79]: #81
#43 := [asserted]: #26
#85 := [mp #43 #82]: #80
#83 := [not-or-elim #85]: #65
#86 := [and-elim #83]: #62
#570 := (pattern #11)
#571 := (forall (vars (?v0 S2)) (:pat #570) #54)
#574 := (iff #59 #571)
#572 := (iff #54 #54)
#573 := [refl]: #572
#575 := [quant-intro #573]: #574
#100 := (~ #59 #59)
#98 := (~ #54 #54)
#99 := [refl]: #98
#101 := [nnf-pos #99]: #100
#84 := [and-elim #83]: #59
#91 := [mp~ #84 #101]: #59
#576 := [mp #91 #575]: #571
#153 := (not #62)
#232 := (not #571)
#243 := (or #232 #153 #239)
#240 := (or #153 #239)
#244 := (or #232 #240)
#245 := (iff #244 #243)
#242 := [rewrite]: #245
#172 := [quant-inst]: #244
#246 := [mp #172 #242]: #243
#208 := [unit-resolution #246 #576 #86]: #239
#225 := (not #239)
#351 := (or #232 #225 #241)
#562 := (or #225 #241)
#558 := (or #232 #562)
#231 := (iff #558 #351)
#565 := [rewrite]: #231
#230 := [quant-inst]: #558
#566 := [mp #230 #565]: #351
#209 := [unit-resolution #566 #576 #208]: #241
#87 := (not #68)
#88 := [not-or-elim #85]: #87
#564 := (not #241)
#569 := (or #232 #68 #564)
#219 := (or #564 #68)
#559 := (or #232 #219)
#545 := (iff #559 #569)
#567 := (or #68 #564)
#222 := (or #232 #567)
#561 := (iff #222 #569)
#202 := [rewrite]: #561
#560 := (iff #559 #222)
#568 := (iff #219 #567)
#563 := [rewrite]: #568
#218 := [monotonicity #563]: #560
#206 := [trans #218 #202]: #545
#217 := [quant-inst]: #559
#207 := [mp #217 #206]: #569
[unit-resolution #207 #576 #88 #209]: false
unsat
efa58136de82c8b5811ff6cbc9ea6e3a0dfa88b3 222 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#72 := ?v0!0
#73 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#74 := (= f1 #73)
#156 := (not #74)
decl f4 :: S1
#12 := f4
#42 := (= f1 f4)
#92 := (not #42)
#157 := (or #92 #156)
#158 := (not #157)
decl ?v0!1 :: S2
#105 := ?v0!1
#106 := (f3 ?v0!1)
#107 := (= f1 #106)
#151 := (not #107)
#152 := (or #92 #151)
#153 := (not #152)
#615 := [hypothesis]: #153
#223 := (or #152 #107)
#310 := [def-axiom]: #223
#276 := [unit-resolution #310 #615]: #107
#8 := (:var 0 S2)
#9 := (f3 #8)
#640 := (pattern #9)
#36 := (= f1 #9)
#85 := (not #36)
#111 := (or #85 #92)
#646 := (forall (vars (?v0 S2)) (:pat #640) #111)
#222 := (or #152 #42)
#309 := [def-axiom]: #222
#277 := [unit-resolution #309 #615]: #42
#641 := (forall (vars (?v0 S2)) (:pat #640) #85)
#632 := (not #641)
#634 := (or #632 #151)
#316 := [hypothesis]: #107
#295 := [hypothesis]: #641
#289 := [quant-inst]: #634
#421 := [unit-resolution #289 #295 #316]: false
#628 := [lemma #421]: #634
#278 := [unit-resolution #628 #276]: #632
#651 := (or #92 #641 #646)
#144 := (forall (vars (?v0 S2)) #111)
#88 := (forall (vars (?v0 S2)) #85)
#147 := (or #92 #88 #144)
#652 := (iff #147 #651)
#649 := (iff #144 #646)
#647 := (iff #111 #111)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#644 := (iff #88 #641)
#642 := (iff #85 #85)
#643 := [refl]: #642
#645 := [quant-intro #643]: #644
#653 := [monotonicity #645 #650]: #652
#48 := (and #36 #42)
#98 := (not #48)
#101 := (forall (vars (?v0 S2)) #98)
#121 := (or #92 #88 #101)
#148 := (iff #121 #147)
#145 := (iff #101 #144)
#142 := (iff #98 #111)
#112 := (not #111)
#137 := (not #112)
#140 := (iff #137 #111)
#141 := [rewrite]: #140
#138 := (iff #98 #137)
#66 := (iff #48 #112)
#76 := [rewrite]: #66
#139 := [monotonicity #76]: #138
#143 := [trans #139 #141]: #142
#146 := [quant-intro #143]: #145
#149 := [monotonicity #146]: #148
#127 := (and #42 #74)
#124 := (and #42 #107)
#130 := (or #124 #127)
#133 := (and #121 #130)
#79 := (and #74 #42)
#108 := (and #107 #42)
#113 := (or #108 #79)
#95 := (or #88 #92)
#114 := (or #101 #95)
#115 := (and #114 #113)
#134 := (iff #115 #133)
#131 := (iff #113 #130)
#128 := (iff #79 #127)
#129 := [rewrite]: #128
#125 := (iff #108 #124)
#126 := [rewrite]: #125
#132 := [monotonicity #126 #129]: #131
#122 := (iff #114 #121)
#123 := [rewrite]: #122
#135 := [monotonicity #123 #132]: #134
#39 := (exists (vars (?v0 S2)) #36)
#45 := (and #39 #42)
#60 := (not #45)
#51 := (exists (vars (?v0 S2)) #48)
#61 := (iff #51 #60)
#116 := (~ #61 #115)
#96 := (~ #60 #95)
#93 := (~ #92 #92)
#94 := [refl]: #93
#89 := (not #39)
#90 := (~ #89 #88)
#86 := (~ #85 #85)
#87 := [refl]: #86
#91 := [nnf-neg #87]: #90
#97 := [nnf-neg #91 #94]: #96
#82 := (not #60)
#83 := (~ #82 #79)
#80 := (~ #45 #79)
#77 := (~ #42 #42)
#78 := [refl]: #77
#75 := (~ #39 #74)
#69 := [sk]: #75
#81 := [monotonicity #69 #78]: #80
#84 := [nnf-neg #81]: #83
#109 := (~ #51 #108)
#110 := [sk]: #109
#102 := (not #51)
#103 := (~ #102 #101)
#99 := (~ #98 #98)
#100 := [refl]: #99
#104 := [nnf-neg #100]: #103
#117 := [nnf-pos #104 #110 #84 #97]: #116
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (and #10 #13)
#16 := (exists (vars (?v0 S2)) #15)
#11 := (exists (vars (?v0 S2)) #10)
#14 := (and #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#64 := (iff #18 #61)
#54 := (iff #45 #51)
#57 := (not #54)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #18 #57)
#55 := (iff #17 #54)
#52 := (iff #16 #51)
#49 := (iff #15 #48)
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#50 := [monotonicity #38 #44]: #49
#53 := [quant-intro #50]: #52
#46 := (iff #14 #45)
#40 := (iff #11 #39)
#41 := [quant-intro #38]: #40
#47 := [monotonicity #41 #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#35 := [asserted]: #18
#68 := [mp #35 #65]: #61
#118 := [mp~ #68 #117]: #115
#119 := [mp #118 #135]: #133
#120 := [and-elim #119]: #121
#150 := [mp #120 #149]: #147
#654 := [mp #150 #653]: #651
#279 := [unit-resolution #654 #278 #277]: #646
#636 := (not #646)
#637 := (or #636 #92 #151)
#300 := (or #151 #92)
#638 := (or #636 #300)
#288 := (iff #638 #637)
#639 := (or #636 #152)
#292 := (iff #639 #637)
#630 := [rewrite]: #292
#629 := (iff #638 #639)
#301 := (iff #300 #152)
#635 := [rewrite]: #301
#287 := [monotonicity #635]: #629
#631 := [trans #287 #630]: #288
#633 := [quant-inst]: #638
#272 := [mp #633 #631]: #637
#617 := [unit-resolution #272 #277 #279 #276]: false
#618 := [lemma #617]: #152
#161 := (or #153 #158)
#162 := (iff #130 #161)
#159 := (iff #127 #158)
#160 := [rewrite]: #159
#154 := (iff #124 #153)
#155 := [rewrite]: #154
#163 := [monotonicity #155 #160]: #162
#136 := [and-elim #119]: #130
#164 := [mp #136 #163]: #161
#614 := [unit-resolution #164 #618]: #158
#314 := (or #157 #74)
#242 := [def-axiom]: #314
#320 := [unit-resolution #242 #614]: #74
#302 := (or #157 #42)
#313 := [def-axiom]: #302
#337 := [unit-resolution #313 #614]: #42
#336 := [hypothesis]: #646
#616 := (or #636 #92 #156)
#619 := (or #156 #92)
#622 := (or #636 #619)
#624 := (iff #622 #616)
#623 := (or #636 #157)
#264 := (iff #623 #616)
#626 := [rewrite]: #264
#625 := (iff #622 #623)
#620 := (iff #619 #157)
#621 := [rewrite]: #620
#263 := [monotonicity #621]: #625
#627 := [trans #263 #626]: #624
#258 := [quant-inst]: #622
#613 := [mp #258 #627]: #616
#338 := [unit-resolution #613 #337 #336 #320]: false
#324 := [lemma #338]: #636
#339 := [unit-resolution #654 #324 #337]: #641
#609 := (or #632 #156)
#610 := [quant-inst]: #609
[unit-resolution #610 #339 #320]: false
unsat
27f0d36fd6c0929bba5c83b80c0b177e808eb0e9 64 0
#2 := false
decl f3 :: (-> S2 S2 S3)
decl f4 :: S2
#14 := f4
decl f5 :: S2
#16 := f5
#18 := (f3 f5 f4)
#17 := (f3 f4 f5)
#19 := (= #17 #18)
#62 := (not #19)
#8 := (:var 1 S2)
#9 := (:var 0 S2)
#11 := (f3 #9 #8)
#10 := (f3 #8 #9)
#12 := (= #10 #11)
#13 := (forall (vars (?v0 S2) (?v1 S2)) #12)
#52 := (not #13)
#53 := (or #52 #19)
#58 := (not #53)
#15 := (= f4 f4)
#20 := (and #15 #19)
#21 := (implies #13 #20)
#22 := (not #21)
#59 := (iff #22 #58)
#56 := (iff #21 #53)
#49 := (implies #13 #19)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #21 #49)
#47 := (iff #20 #19)
#1 := true
#42 := (and true #19)
#45 := (iff #42 #19)
#46 := [rewrite]: #45
#43 := (iff #20 #42)
#40 := (iff #15 true)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#39 := [asserted]: #22
#63 := [mp #39 #60]: #58
#64 := [not-or-elim #63]: #62
#547 := (pattern #11)
#546 := (pattern #10)
#548 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #546 #547) #12)
#551 := (iff #13 #548)
#549 := (iff #12 #12)
#550 := [refl]: #549
#552 := [quant-intro #550]: #551
#74 := (~ #13 #13)
#72 := (~ #12 #12)
#73 := [refl]: #72
#75 := [nnf-pos #73]: #74
#61 := [not-or-elim #63]: #13
#67 := [mp~ #61 #75]: #13
#553 := [mp #67 #552]: #548
#129 := (not #548)
#216 := (or #129 #19)
#130 := [quant-inst]: #216
[unit-resolution #130 #553 #64]: false
unsat
ab7c9224394921a685740971ba6d77f051f292c6 49 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S4 S1)
#9 := (:var 0 S4)
#13 := (:var 1 S2)
#14 := (f3 #13 #9)
#15 := (= #14 f1)
#16 := (exists (vars (?v0 S2) (?v1 S4)) #15)
#8 := (:var 2 S2)
#10 := (f3 #8 #9)
#11 := (= #10 f1)
#12 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #11)
#17 := (iff #12 #16)
#18 := (not #17)
#64 := (iff #18 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #18 #59)
#57 := (iff #17 true)
#42 := (= f1 #14)
#43 := (exists (vars (?v0 S2) (?v2 S4)) #42)
#52 := (iff #43 #43)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #17 #52)
#50 := (iff #16 #43)
#48 := (iff #15 #42)
#49 := [rewrite]: #48
#51 := [quant-intro #49]: #50
#46 := (iff #12 #43)
#36 := (= f1 #10)
#39 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #36)
#44 := (iff #39 #43)
#45 := [elim-unused]: #44
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#41 := [quant-intro #38]: #40
#47 := [trans #41 #45]: #46
#54 := [monotonicity #47 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #18
[mp #35 #65]: false
unsat
a2a7a4fb33d8eca0ac67dbe7e0b63fde0e7908a5 250 0
#2 := false
decl f3 :: (-> S2 S1)
decl f7 :: S2
#22 := f7
#25 := (f3 f7)
decl f1 :: S1
#4 := f1
#94 := (= f1 #25)
#283 := (not #94)
decl f4 :: (-> S2 S1)
#8 := (:var 0 S2)
#11 := (f4 #8)
#702 := (pattern #11)
#9 := (f3 #8)
#701 := (pattern #9)
#57 := (= f1 #11)
#54 := (= f1 #9)
#63 := (not #54)
#64 := (or #63 #57)
#703 := (forall (vars (?v0 S2)) (:pat #701 #702) #64)
#69 := (forall (vars (?v0 S2)) #64)
#706 := (iff #69 #703)
#704 := (iff #64 #64)
#705 := [refl]: #704
#707 := [quant-intro #705]: #706
#187 := (~ #69 #69)
#201 := (~ #64 #64)
#202 := [refl]: #201
#188 := [nnf-pos #202]: #187
decl f6 :: (-> S2 S1)
#23 := (f6 f7)
#91 := (= f1 #23)
#78 := (not #57)
#86 := (and #63 #78)
#103 := (not #86)
#136 := (or #103 #91 #94)
#139 := (forall (vars (?v0 S2)) #136)
decl f5 :: S2
#15 := f5
#16 := (f4 f5)
#72 := (= f1 #16)
#75 := (not #72)
#148 := (and #69 #75 #139)
#153 := (not #148)
#32 := (f4 f7)
#118 := (= f1 #32)
#159 := (or #91 #118 #153)
#164 := (not #159)
#33 := (= #32 f1)
#24 := (= #23 f1)
#34 := (or #24 #33)
#26 := (= #25 f1)
#27 := (or #24 #26)
#10 := (= #9 f1)
#20 := (not #10)
#12 := (= #11 f1)
#19 := (not #12)
#21 := (and #19 #20)
#28 := (implies #21 #27)
#29 := (forall (vars (?v0 S2)) #28)
#17 := (= #16 f1)
#18 := (not #17)
#30 := (and #18 #29)
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#31 := (and #14 #30)
#35 := (implies #31 #34)
#36 := (not #35)
#167 := (iff #36 #164)
#121 := (or #91 #118)
#97 := (or #91 #94)
#104 := (or #103 #97)
#109 := (forall (vars (?v0 S2)) #104)
#112 := (and #75 #109)
#115 := (and #69 #112)
#127 := (not #115)
#128 := (or #127 #121)
#133 := (not #128)
#165 := (iff #133 #164)
#162 := (iff #128 #159)
#156 := (or #153 #121)
#160 := (iff #156 #159)
#161 := [rewrite]: #160
#157 := (iff #128 #156)
#154 := (iff #127 #153)
#151 := (iff #115 #148)
#142 := (and #75 #139)
#145 := (and #69 #142)
#149 := (iff #145 #148)
#150 := [rewrite]: #149
#146 := (iff #115 #145)
#143 := (iff #112 #142)
#140 := (iff #109 #139)
#137 := (iff #104 #136)
#138 := [rewrite]: #137
#141 := [quant-intro #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#152 := [trans #147 #150]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#163 := [trans #158 #161]: #162
#166 := [monotonicity #163]: #165
#134 := (iff #36 #133)
#131 := (iff #35 #128)
#124 := (implies #115 #121)
#129 := (iff #124 #128)
#130 := [rewrite]: #129
#125 := (iff #35 #124)
#122 := (iff #34 #121)
#119 := (iff #33 #118)
#120 := [rewrite]: #119
#92 := (iff #24 #91)
#93 := [rewrite]: #92
#123 := [monotonicity #93 #120]: #122
#116 := (iff #31 #115)
#113 := (iff #30 #112)
#110 := (iff #29 #109)
#107 := (iff #28 #104)
#100 := (implies #86 #97)
#105 := (iff #100 #104)
#106 := [rewrite]: #105
#101 := (iff #28 #100)
#98 := (iff #27 #97)
#95 := (iff #26 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #93 #96]: #98
#89 := (iff #21 #86)
#83 := (and #78 #63)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #21 #83)
#81 := (iff #20 #63)
#55 := (iff #10 #54)
#56 := [rewrite]: #55
#82 := [monotonicity #56]: #81
#79 := (iff #19 #78)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#80 := [monotonicity #59]: #79
#85 := [monotonicity #80 #82]: #84
#90 := [trans #85 #88]: #89
#102 := [monotonicity #90 #99]: #101
#108 := [trans #102 #106]: #107
#111 := [quant-intro #108]: #110
#76 := (iff #18 #75)
#73 := (iff #17 #72)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#114 := [monotonicity #77 #111]: #113
#70 := (iff #14 #69)
#67 := (iff #13 #64)
#60 := (implies #54 #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #13 #60)
#62 := [monotonicity #56 #59]: #61
#68 := [trans #62 #66]: #67
#71 := [quant-intro #68]: #70
#117 := [monotonicity #71 #114]: #116
#126 := [monotonicity #117 #123]: #125
#132 := [trans #126 #130]: #131
#135 := [monotonicity #132]: #134
#168 := [trans #135 #166]: #167
#53 := [asserted]: #36
#169 := [mp #53 #168]: #164
#174 := [not-or-elim #169]: #148
#175 := [and-elim #174]: #69
#185 := [mp~ #175 #188]: #69
#708 := [mp #185 #707]: #703
#172 := (not #118)
#173 := [not-or-elim #169]: #172
#285 := (not #703)
#372 := (or #285 #283 #118)
#370 := (or #283 #118)
#363 := (or #285 #370)
#375 := (iff #363 #372)
#303 := [rewrite]: #375
#374 := [quant-inst]: #363
#376 := [mp #374 #303]: #372
#398 := [unit-resolution #376 #173 #708]: #283
#217 := (or #54 #57 #94)
#709 := (forall (vars (?v0 S2)) (:pat #701 #702) #217)
#222 := (forall (vars (?v0 S2)) #217)
#712 := (iff #222 #709)
#710 := (iff #217 #217)
#711 := [refl]: #710
#713 := [quant-intro #711]: #712
#192 := (or #103 #94)
#197 := (forall (vars (?v0 S2)) #192)
#223 := (iff #197 #222)
#220 := (iff #192 #217)
#203 := (or #54 #57)
#214 := (or #203 #94)
#218 := (iff #214 #217)
#219 := [rewrite]: #218
#215 := (iff #192 #214)
#212 := (iff #103 #203)
#204 := (not #203)
#207 := (not #204)
#210 := (iff #207 #203)
#211 := [rewrite]: #210
#208 := (iff #103 #207)
#205 := (iff #86 #204)
#206 := [rewrite]: #205
#209 := [monotonicity #206]: #208
#213 := [trans #209 #211]: #212
#216 := [monotonicity #213]: #215
#221 := [trans #216 #219]: #220
#224 := [quant-intro #221]: #223
#184 := (~ #197 #197)
#186 := (~ #192 #192)
#183 := [refl]: #186
#180 := [nnf-pos #183]: #184
#198 := (iff #139 #197)
#195 := (iff #136 #192)
#189 := (or #103 false #94)
#193 := (iff #189 #192)
#194 := [rewrite]: #193
#190 := (iff #136 #189)
#181 := (iff #91 false)
#170 := (not #91)
#171 := [not-or-elim #169]: #170
#182 := [iff-false #171]: #181
#191 := [monotonicity #182]: #190
#196 := [trans #191 #194]: #195
#199 := [quant-intro #196]: #198
#177 := [and-elim #174]: #139
#200 := [mp #177 #199]: #197
#178 := [mp~ #200 #180]: #197
#225 := [mp #178 #224]: #222
#714 := [mp #225 #713]: #709
#356 := (not #709)
#693 := (or #356 #94 #118)
#284 := (or #94 #118 #94)
#695 := (or #356 #284)
#697 := (iff #695 #693)
#371 := (or #94 #118)
#482 := (or #356 #371)
#362 := (iff #482 #693)
#696 := [rewrite]: #362
#689 := (iff #695 #482)
#373 := (iff #284 #371)
#377 := [rewrite]: #373
#361 := [monotonicity #377]: #689
#698 := [trans #361 #696]: #697
#350 := [quant-inst]: #695
#699 := [mp #350 #698]: #693
[unit-resolution #699 #173 #714 #398]: false
unsat
e5bab80a17d61a903fd3b91d7b964fb77f0aeb5f 122 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#122 := ?v0!1
#125 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#126 := (= f1 #125)
decl f4 :: (-> S2 S1)
#123 := (f4 ?v0!1)
#124 := (= f1 #123)
#135 := (and #124 #126)
#127 := (and #126 #124)
#136 := (iff #127 #135)
#137 := [rewrite]: #136
#8 := (:var 0 S2)
#14 := (f4 #8)
#53 := (= f1 #14)
#9 := (f3 #8)
#41 := (= f1 #9)
#56 := (and #41 #53)
#59 := (exists (vars (?v0 S2)) #56)
#128 := (~ #59 #127)
#129 := [sk]: #128
#50 := (exists (vars (?v0 S2)) #41)
#62 := (or #50 #59)
#110 := (iff #62 #59)
#105 := (or false #59)
#108 := (iff #105 #59)
#109 := [rewrite]: #108
#106 := (iff #62 #105)
#103 := (iff #50 false)
#65 := (not #50)
#44 := (not #41)
#47 := (exists (vars (?v0 S2)) #44)
#89 := (and #47 #65 #62)
#10 := (= #9 f1)
#13 := (exists (vars (?v0 S2)) #10)
#19 := (not #13)
#15 := (= #14 f1)
#16 := (and #10 #15)
#17 := (exists (vars (?v0 S2)) #16)
#18 := (or #13 #17)
#20 := (and #18 #19)
#11 := (not #10)
#12 := (exists (vars (?v0 S2)) #11)
#21 := (and #12 #20)
#22 := (not #21)
#23 := (not #22)
#92 := (iff #23 #89)
#71 := (and #65 #62)
#76 := (and #47 #71)
#90 := (iff #76 #89)
#91 := [rewrite]: #90
#87 := (iff #23 #76)
#79 := (not #76)
#82 := (not #79)
#85 := (iff #82 #76)
#86 := [rewrite]: #85
#83 := (iff #23 #82)
#80 := (iff #22 #79)
#77 := (iff #21 #76)
#74 := (iff #20 #71)
#68 := (and #62 #65)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #20 #68)
#66 := (iff #19 #65)
#51 := (iff #13 #50)
#42 := (iff #10 #41)
#43 := [rewrite]: #42
#52 := [quant-intro #43]: #51
#67 := [monotonicity #52]: #66
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #43 #55]: #57
#61 := [quant-intro #58]: #60
#64 := [monotonicity #52 #61]: #63
#70 := [monotonicity #64 #67]: #69
#75 := [trans #70 #73]: #74
#48 := (iff #12 #47)
#45 := (iff #11 #44)
#46 := [monotonicity #43]: #45
#49 := [quant-intro #46]: #48
#78 := [monotonicity #49 #75]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#88 := [trans #84 #86]: #87
#93 := [trans #88 #91]: #92
#40 := [asserted]: #23
#94 := [mp #40 #93]: #89
#96 := [and-elim #94]: #65
#104 := [iff-false #96]: #103
#107 := [monotonicity #104]: #106
#111 := [trans #107 #109]: #110
#97 := [and-elim #94]: #62
#112 := [mp #97 #111]: #59
#132 := [mp~ #112 #129]: #127
#133 := [mp #132 #137]: #135
#138 := [and-elim #133]: #126
#614 := (pattern #9)
#615 := (forall (vars (?v0 S2)) (:pat #614) #44)
#118 := (forall (vars (?v0 S2)) #44)
#618 := (iff #118 #615)
#616 := (iff #44 #44)
#617 := [refl]: #616
#619 := [quant-intro #617]: #618
#119 := (~ #65 #118)
#115 := (~ #44 #44)
#116 := [refl]: #115
#120 := [nnf-neg #116]: #119
#121 := [mp~ #96 #120]: #118
#620 := [mp #121 #619]: #615
#198 := (not #126)
#286 := (not #615)
#200 := (or #286 #198)
#287 := [quant-inst]: #200
[unit-resolution #287 #620 #138]: false
unsat
35a55494d50e2bb6e11852505e00f0a8eda3690b 105 0
#2 := false
decl f3 :: (-> S1 S1)
decl ?v0!1 :: S1
#80 := ?v0!1
#81 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#82 := (= f1 #81)
decl ?v0!0 :: S1
#66 := ?v0!0
#67 := (f3 ?v0!0)
#68 := (= f1 #67)
#69 := (not #68)
#168 := [hypothesis]: #68
#8 := (:var 0 S1)
#9 := (f3 #8)
#584 := (pattern #9)
#34 := (= f1 #9)
#43 := (not #34)
#585 := (forall (vars (?v0 S1)) (:pat #584) #43)
#46 := (forall (vars (?v0 S1)) #43)
#588 := (iff #46 #585)
#586 := (iff #43 #43)
#587 := [refl]: #586
#589 := [quant-intro #587]: #588
#102 := (or #68 #82)
#107 := (and #46 #102)
#63 := (not #69)
#87 := (or #82 #63)
#88 := (or #46 #46)
#89 := (and #88 #87)
#108 := (iff #89 #107)
#105 := (iff #87 #102)
#99 := (or #82 #68)
#103 := (iff #99 #102)
#104 := [rewrite]: #103
#100 := (iff #87 #99)
#97 := (iff #63 #68)
#98 := [rewrite]: #97
#101 := [monotonicity #98]: #100
#106 := [trans #101 #104]: #105
#95 := (iff #88 #46)
#96 := [rewrite]: #95
#109 := [monotonicity #96 #106]: #108
#37 := (exists (vars (?v0 S1)) #34)
#55 := (iff #37 #46)
#90 := (~ #55 #89)
#76 := (~ #46 #46)
#74 := (~ #43 #43)
#75 := [refl]: #74
#77 := [nnf-pos #75]: #76
#60 := (not #46)
#70 := (~ #60 #63)
#71 := [sk]: #70
#83 := (~ #37 #82)
#84 := [sk]: #83
#40 := (not #37)
#78 := (~ #40 #46)
#79 := [nnf-neg #75]: #78
#91 := [nnf-pos #79 #84 #71 #77]: #90
#10 := (= #9 f1)
#13 := (not #10)
#14 := (forall (vars (?v0 S1)) #13)
#11 := (exists (vars (?v0 S1)) #10)
#12 := (not #11)
#15 := (iff #12 #14)
#16 := (not #15)
#58 := (iff #16 #55)
#49 := (iff #40 #46)
#52 := (not #49)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #16 #52)
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#35 := (iff #10 #34)
#36 := [rewrite]: #35
#45 := [monotonicity #36]: #44
#48 := [quant-intro #45]: #47
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#39 := [quant-intro #36]: #38
#42 := [monotonicity #39]: #41
#51 := [monotonicity #42 #48]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#33 := [asserted]: #16
#62 := [mp #33 #59]: #55
#92 := [mp~ #62 #91]: #89
#93 := [mp #92 #109]: #107
#94 := [and-elim #93]: #46
#590 := [mp #94 #589]: #585
#169 := (not #585)
#256 := (or #169 #69)
#170 := [quant-inst]: #256
#255 := [unit-resolution #170 #590 #168]: false
#257 := [lemma #255]: #69
#110 := [and-elim #93]: #102
#259 := [unit-resolution #110 #257]: #82
#248 := (not #82)
#188 := (or #169 #248)
#261 := [quant-inst]: #188
[unit-resolution #261 #590 #259]: false
unsat
3a3572162e189d1dd3faf86450c29af14c3f5775 1 2
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!9)

90e400384b7659617fb2ac3414efca4ad4acb82b 230 0
#2 := false
decl f3 :: (-> S1 S1)
decl ?v0!0 :: S1
#84 := ?v0!0
#85 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#86 := (= f1 #85)
#87 := (not #86)
decl ?v0!1 :: S1
#116 := ?v0!1
#117 := (f3 ?v0!1)
#118 := (= f1 #117)
#119 := (not #118)
decl f4 :: S1
#11 := f4
#39 := (= f1 f4)
#124 := (or #39 #119)
#289 := [hypothesis]: #119
#275 := (or #124 #118)
#618 := [def-axiom]: #275
#263 := [unit-resolution #618 #289]: #124
#8 := (:var 0 S1)
#9 := (f3 #8)
#627 := (pattern #9)
#36 := (= f1 #9)
#45 := (not #36)
#46 := (or #45 #39)
#94 := (not #46)
#642 := (forall (vars (?v0 S1)) (:pat #627) #94)
#628 := (forall (vars (?v0 S1)) (:pat #627) #36)
#633 := (not #628)
#636 := (or #39 #633)
#301 := (or #633 #118)
#300 := [hypothesis]: #628
#229 := [quant-inst]: #301
#302 := [unit-resolution #229 #300 #289]: false
#299 := [lemma #302]: #301
#264 := [unit-resolution #299 #289]: #633
#210 := (or #636 #628)
#297 := [def-axiom]: #210
#265 := [unit-resolution #297 #264]: #636
#639 := (not #636)
#647 := (or #639 #642)
#97 := (forall (vars (?v0 S1)) #94)
#54 := (forall (vars (?v0 S1)) #36)
#60 := (not #54)
#61 := (or #39 #60)
#111 := (not #61)
#146 := (or #111 #97)
#648 := (iff #146 #647)
#645 := (iff #97 #642)
#643 := (iff #94 #94)
#644 := [refl]: #643
#646 := [quant-intro #644]: #645
#640 := (iff #111 #639)
#637 := (iff #61 #636)
#634 := (iff #60 #633)
#631 := (iff #54 #628)
#629 := (iff #36 #36)
#630 := [refl]: #629
#632 := [quant-intro #630]: #631
#635 := [monotonicity #632]: #634
#638 := [monotonicity #635]: #637
#641 := [monotonicity #638]: #640
#649 := [monotonicity #641 #646]: #648
#100 := (not #39)
#110 := (and #100 #54)
#135 := (or #97 #110)
#149 := (iff #135 #146)
#122 := (or #97 #111)
#147 := (iff #122 #146)
#148 := [rewrite]: #147
#123 := (iff #135 #122)
#89 := (iff #110 #111)
#90 := [rewrite]: #89
#145 := [monotonicity #90]: #123
#150 := [trans #145 #148]: #149
#138 := (or #39 #87 #119)
#141 := (and #135 #138)
#81 := (or #87 #39)
#127 := (or #124 #81)
#128 := (or #110 #97)
#129 := (and #128 #127)
#142 := (iff #129 #141)
#139 := (iff #127 #138)
#140 := [rewrite]: #139
#136 := (iff #128 #135)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#51 := (exists (vars (?v0 S1)) #46)
#72 := (not #51)
#73 := (iff #61 #72)
#130 := (~ #73 #129)
#98 := (~ #72 #97)
#95 := (~ #94 #94)
#96 := [refl]: #95
#99 := [nnf-neg #96]: #98
#91 := (not #72)
#92 := (~ #91 #81)
#78 := (~ #51 #81)
#88 := [sk]: #78
#93 := [nnf-neg #88]: #92
#125 := (~ #61 #124)
#120 := (~ #60 #119)
#121 := [sk]: #120
#114 := (~ #39 #39)
#115 := [refl]: #114
#126 := [monotonicity #115 #121]: #125
#112 := (~ #111 #110)
#107 := (not #60)
#108 := (~ #107 #54)
#105 := (~ #54 #54)
#103 := (~ #36 #36)
#104 := [refl]: #103
#106 := [nnf-pos #104]: #105
#109 := [nnf-neg #106]: #108
#101 := (~ #100 #100)
#102 := [refl]: #101
#113 := [nnf-neg #102 #109]: #112
#131 := [nnf-pos #113 #126 #93 #99]: #130
#12 := (= f4 f1)
#10 := (= #9 f1)
#15 := (forall (vars (?v0 S1)) #10)
#16 := (implies #15 #12)
#13 := (implies #10 #12)
#14 := (exists (vars (?v0 S1)) #13)
#17 := (iff #14 #16)
#18 := (not #17)
#76 := (iff #18 #73)
#66 := (iff #51 #61)
#69 := (not #66)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #18 #69)
#67 := (iff #17 #66)
#64 := (iff #16 #61)
#57 := (implies #54 #39)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #16 #57)
#40 := (iff #12 #39)
#41 := [rewrite]: #40
#55 := (iff #15 #54)
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#56 := [quant-intro #38]: #55
#59 := [monotonicity #56 #41]: #58
#65 := [trans #59 #63]: #64
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #36 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#44 := [monotonicity #38 #41]: #43
#50 := [trans #44 #48]: #49
#53 := [quant-intro #50]: #52
#68 := [monotonicity #53 #65]: #67
#71 := [monotonicity #68]: #70
#77 := [trans #71 #75]: #76
#35 := [asserted]: #18
#80 := [mp #35 #77]: #73
#132 := [mp~ #80 #131]: #129
#133 := [mp #132 #143]: #141
#134 := [and-elim #133]: #135
#151 := [mp #134 #150]: #146
#650 := [mp #151 #649]: #647
#266 := [unit-resolution #650 #265]: #642
#276 := (not #124)
#287 := (not #642)
#288 := (or #287 #276)
#303 := (or #119 #39)
#282 := (not #303)
#622 := (or #287 #282)
#624 := (iff #622 #288)
#620 := (iff #288 #288)
#626 := [rewrite]: #620
#408 := (iff #282 #276)
#619 := (iff #303 #124)
#621 := [rewrite]: #619
#615 := [monotonicity #621]: #408
#625 := [monotonicity #615]: #624
#616 := [trans #625 #626]: #624
#623 := [quant-inst]: #622
#274 := [mp #623 #616]: #288
#604 := [unit-resolution #274 #266 #263]: false
#605 := [lemma #604]: #118
#617 := (or #39 #87)
#606 := (not #617)
#597 := [hypothesis]: #606
#614 := (or #617 #100)
#600 := [def-axiom]: #614
#319 := [unit-resolution #600 #597]: #100
#601 := (or #617 #86)
#307 := [def-axiom]: #601
#320 := [unit-resolution #307 #597]: #86
#144 := [and-elim #133]: #138
#594 := [unit-resolution #144 #320 #319 #605]: false
#598 := [lemma #594]: #617
#217 := (or #606 #287)
#325 := [hypothesis]: #617
#311 := [hypothesis]: #642
#603 := (or #287 #606)
#279 := (not #81)
#609 := (or #287 #279)
#610 := (iff #609 #603)
#250 := (iff #603 #603)
#251 := [rewrite]: #250
#607 := (iff #279 #606)
#259 := (iff #81 #617)
#602 := [rewrite]: #259
#608 := [monotonicity #602]: #607
#612 := [monotonicity #608]: #610
#613 := [trans #612 #251]: #610
#245 := [quant-inst]: #609
#611 := [mp #245 #613]: #603
#326 := [unit-resolution #611 #311 #325]: false
#596 := [lemma #326]: #217
#595 := [unit-resolution #596 #598]: #287
#599 := [unit-resolution #650 #595]: #639
#209 := (or #636 #100)
#296 := [def-axiom]: #209
#310 := [unit-resolution #296 #599]: #100
#312 := [unit-resolution #144 #310 #605]: #87
#590 := [unit-resolution #297 #599]: #628
#308 := (or #633 #86)
#309 := [quant-inst]: #308
[unit-resolution #309 #590 #312]: false
unsat
a110a216a9eb767753bdb8e6565cd9f3828f13c3 1 0
unsat
d3e1c4f171290bbc43cf7b8ed3f52dcaba02ad2a 156 0
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f4 :: S1
#15 := f4
#16 := (f3 f4 #9)
#622 := (pattern #16)
decl f1 :: S1
#4 := f1
#54 := (= f1 #16)
#103 := (not #54)
#623 := (forall (vars (?v0 S2)) (:pat #622) #103)
decl f5 :: S2
#19 := f5
#20 := (f3 f4 f5)
#60 := (= f1 #20)
#200 := (= f1 f4)
#201 := (iff #60 #200)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#615 := (pattern #10)
#45 := (= f1 #8)
#42 := (= f1 #10)
#48 := (iff #42 #45)
#616 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #615) #48)
#51 := (forall (vars (?v0 S1) (?v1 S2)) #48)
#619 := (iff #51 #616)
#617 := (iff #48 #48)
#618 := [refl]: #617
#620 := [quant-intro #618]: #619
#85 := (~ #51 #51)
#92 := (~ #48 #48)
#93 := [refl]: #92
#86 := [nnf-pos #93]: #85
#57 := (exists (vars (?v0 S2)) #54)
#63 := (iff #57 #60)
#69 := (not #51)
#70 := (or #69 #63)
#75 := (not #70)
#21 := (= #20 f1)
#17 := (= #16 f1)
#18 := (exists (vars (?v0 S2)) #17)
#22 := (iff #18 #21)
#12 := (= #8 f1)
#11 := (= #10 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#23 := (implies #14 #22)
#24 := (not #23)
#76 := (iff #24 #75)
#73 := (iff #23 #70)
#66 := (implies #51 #63)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #23 #66)
#64 := (iff #22 #63)
#61 := (iff #21 #60)
#62 := [rewrite]: #61
#58 := (iff #18 #57)
#55 := (iff #17 #54)
#56 := [rewrite]: #55
#59 := [quant-intro #56]: #58
#65 := [monotonicity #59 #62]: #64
#52 := (iff #14 #51)
#49 := (iff #13 #48)
#46 := (iff #12 #45)
#47 := [rewrite]: #46
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#50 := [monotonicity #44 #47]: #49
#53 := [quant-intro #50]: #52
#68 := [monotonicity #53 #65]: #67
#74 := [trans #68 #72]: #73
#77 := [monotonicity #74]: #76
#41 := [asserted]: #24
#80 := [mp #41 #77]: #75
#78 := [not-or-elim #80]: #51
#84 := [mp~ #78 #86]: #51
#621 := [mp #84 #620]: #616
#202 := (not #616)
#278 := (or #202 #201)
#610 := [quant-inst]: #278
#287 := [unit-resolution #610 #621]: #201
decl ?v0!0 :: S2
#82 := ?v0!0
#94 := (f3 f4 ?v0!0)
#95 := (= f1 #94)
#286 := (iff #95 #200)
#288 := (or #202 #286)
#279 := [quant-inst]: #288
#277 := [unit-resolution #279 #621]: #286
#290 := (not #286)
#249 := (or #290 #200)
#109 := (not #60)
#265 := [hypothesis]: #109
#114 := (or #60 #95)
#106 := (forall (vars (?v0 S2)) #103)
#115 := (or #109 #106)
#122 := (and #114 #115)
#116 := (and #115 #114)
#123 := (iff #116 #122)
#124 := [rewrite]: #123
#87 := (not #57)
#88 := (iff #60 #87)
#117 := (~ #88 #116)
#107 := (~ #87 #106)
#104 := (~ #103 #103)
#105 := [refl]: #104
#108 := [nnf-neg #105]: #107
#100 := (not #87)
#101 := (~ #100 #95)
#96 := (~ #57 #95)
#97 := [sk]: #96
#102 := [nnf-neg #97]: #101
#112 := (~ #60 #60)
#113 := [refl]: #112
#110 := (~ #109 #109)
#111 := [refl]: #110
#118 := [nnf-pos #111 #113 #102 #108]: #117
#79 := (not #63)
#89 := (iff #79 #88)
#90 := [rewrite]: #89
#81 := [not-or-elim #80]: #79
#91 := [mp #81 #90]: #88
#119 := [mp~ #91 #118]: #116
#120 := [mp #119 #124]: #122
#121 := [and-elim #120]: #114
#606 := [unit-resolution #121 #265]: #95
#293 := (not #95)
#272 := (or #290 #293 #200)
#607 := [def-axiom]: #272
#590 := [unit-resolution #607 #606]: #249
#253 := [unit-resolution #590 #277]: #200
#291 := (not #200)
#611 := (not #201)
#254 := (or #611 #291)
#612 := (or #611 #60 #291)
#613 := [def-axiom]: #612
#255 := [unit-resolution #613 #265]: #254
#256 := [unit-resolution #255 #253 #287]: false
#592 := [lemma #256]: #60
#628 := (or #109 #623)
#629 := (iff #115 #628)
#626 := (iff #106 #623)
#624 := (iff #103 #103)
#625 := [refl]: #624
#627 := [quant-intro #625]: #626
#630 := [monotonicity #627]: #629
#125 := [and-elim #120]: #115
#631 := [mp #125 #630]: #628
#292 := [unit-resolution #631 #592]: #623
#604 := (not #623)
#264 := (or #604 #109)
#269 := [quant-inst]: #264
[unit-resolution #269 #592 #292]: false
unsat
021e717ac601dc07adaa2b5fdaab95b121236a15 1 0
unsat
c6a1ba7fcbcc63d35bcb3c6d55963f5db1b0ec4a 74 0
#2 := false
decl f3 :: (-> S2 S3 S4)
#9 := (:var 0 S3)
decl ?v0!0 :: S2
#39 := ?v0!0
#42 := (f3 ?v0!0 #9)
#542 := (pattern #42)
decl f4 :: (-> S2 S3)
#40 := (f4 ?v0!0)
#41 := (f3 ?v0!0 #40)
#57 := (= #41 #42)
#60 := (not #57)
#543 := (forall (vars (?v1 S3)) (:pat #542) #60)
#216 := (not #543)
#126 := (= #41 #41)
#213 := (not #126)
#220 := (or #216 #213)
#204 := (iff #220 #216)
#534 := (or #216 false)
#323 := (iff #534 #216)
#530 := [rewrite]: #323
#536 := (iff #220 #534)
#146 := (iff #213 false)
#1 := true
#128 := (not true)
#217 := (iff #128 false)
#218 := [rewrite]: #217
#215 := (iff #213 #128)
#127 := (iff #126 true)
#214 := [rewrite]: #127
#206 := [monotonicity #214]: #215
#219 := [trans #206 #218]: #146
#193 := [monotonicity #219]: #536
#205 := [trans #193 #530]: #204
#199 := [quant-inst]: #220
#537 := [mp #199 #205]: #216
#63 := (forall (vars (?v1 S3)) #60)
#546 := (iff #63 #543)
#544 := (iff #60 #60)
#545 := [refl]: #544
#547 := [quant-intro #545]: #546
#36 := (= #42 #41)
#46 := (not #36)
#49 := (forall (vars (?v1 S3)) #46)
#64 := (iff #49 #63)
#61 := (iff #46 #60)
#58 := (iff #36 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#65 := [quant-intro #62]: #64
#8 := (:var 1 S2)
#11 := (f4 #8)
#12 := (f3 #8 #11)
#10 := (f3 #8 #9)
#13 := (= #10 #12)
#14 := (exists (vars (?v1 S3)) #13)
#15 := (forall (vars (?v0 S2)) #14)
#16 := (not #15)
#52 := (~ #16 #49)
#34 := (exists (vars (?v1 S3)) #36)
#43 := (not #34)
#50 := (~ #43 #49)
#47 := (~ #46 #46)
#48 := [refl]: #47
#51 := [nnf-neg #48]: #50
#44 := (~ #16 #43)
#45 := [sk]: #44
#53 := [trans #45 #51]: #52
#33 := [asserted]: #16
#54 := [mp~ #33 #53]: #49
#55 := [mp #54 #65]: #63
#548 := [mp #55 #547]: #543
[unit-resolution #548 #537]: false
unsat
227a4d38b650c5d656f4f2d1c6a5a4b38be4fdb6 1 0
unsat
0639f8bc4c0a97519f12b710ca2c55df172f2bff 108 0
#2 := false
decl f3 :: (-> S1 S1)
#11 := (:var 0 S1)
#12 := (f3 #11)
#593 := (pattern #12)
decl f1 :: S1
#4 := f1
#45 := (= f1 #12)
#54 := (not #45)
#594 := (forall (vars (?v0 S1)) (:pat #593) #54)
#57 := (forall (vars (?v0 S1)) #54)
#597 := (iff #57 #594)
#595 := (iff #54 #54)
#596 := [refl]: #595
#598 := [quant-intro #596]: #597
#48 := (exists (vars (?v0 S1)) #45)
#51 := (not #48)
#113 := (~ #51 #57)
#115 := (~ #54 #54)
#116 := [refl]: #115
#114 := [nnf-neg #116]: #113
decl f4 :: S1
#8 := f4
#9 := (f3 f4)
#42 := (= f1 #9)
#60 := (ite #42 #51 #57)
#110 := (iff #60 #51)
#1 := true
#105 := (ite true #51 #57)
#108 := (iff #105 #51)
#109 := [rewrite]: #108
#106 := (iff #60 #105)
#103 := (iff #42 true)
decl f5 :: S1
#19 := f5
#20 := (f3 f5)
#63 := (= f1 #20)
#78 := (not #60)
#69 := (not #42)
#87 := (or #69 #78 #63)
#90 := (not #87)
#21 := (= #20 f1)
#10 := (= #9 f1)
#22 := (implies #10 #21)
#13 := (= #12 f1)
#16 := (not #13)
#17 := (forall (vars (?v0 S1)) #16)
#14 := (exists (vars (?v0 S1)) #13)
#15 := (not #14)
#18 := (ite #10 #15 #17)
#23 := (implies #18 #22)
#24 := (not #23)
#93 := (iff #24 #90)
#70 := (or #69 #63)
#79 := (or #78 #70)
#84 := (not #79)
#91 := (iff #84 #90)
#88 := (iff #79 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#85 := (iff #24 #84)
#82 := (iff #23 #79)
#75 := (implies #60 #70)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #23 #75)
#73 := (iff #22 #70)
#66 := (implies #42 #63)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #22 #66)
#64 := (iff #21 #63)
#65 := [rewrite]: #64
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#68 := [monotonicity #44 #65]: #67
#74 := [trans #68 #72]: #73
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#56 := [monotonicity #47]: #55
#59 := [quant-intro #56]: #58
#52 := (iff #15 #51)
#49 := (iff #14 #48)
#50 := [quant-intro #47]: #49
#53 := [monotonicity #50]: #52
#62 := [monotonicity #44 #53 #59]: #61
#77 := [monotonicity #62 #74]: #76
#83 := [trans #77 #81]: #82
#86 := [monotonicity #83]: #85
#94 := [trans #86 #92]: #93
#41 := [asserted]: #24
#95 := [mp #41 #94]: #90
#96 := [not-or-elim #95]: #42
#104 := [iff-true #96]: #103
#107 := [monotonicity #104]: #106
#111 := [trans #107 #109]: #110
#97 := [not-or-elim #95]: #60
#112 := [mp #97 #111]: #51
#102 := [mp~ #112 #114]: #57
#599 := [mp #102 #598]: #594
#178 := (not #594)
#265 := (or #178 #69)
#179 := [quant-inst]: #265
[unit-resolution #179 #96 #599]: false
unsat
24b3734d5c956814c73081ebdb8796337ed9a903 1 0
unsat
44518bbe9d91ef8d978f243d28c5ab98d20e8e24 183 2
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f5 :: S1
#24 := f5
#25 := (f3 f5 #9)
#703 := (pattern #25)
decl f1 :: S1
#4 := f1
#80 := (= f1 #25)
#184 := (not #80)
#704 := (forall (vars (?v0 S2)) (:pat #703) #184)
decl f4 :: S2
#18 := f4
#28 := (f3 f5 f4)
#86 := (= f1 #28)
#262 := (= f1 f5)
#263 := (iff #86 #262)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#680 := (pattern #10)
#53 := (= f1 #8)
#50 := (= f1 #10)
#56 := (iff #50 #53)
#681 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #680) #56)
#59 := (forall (vars (?v0 S1) (?v1 S2)) #56)
#684 := (iff #59 #681)
#682 := (iff #56 #56)
#683 := [refl]: #682
#685 := [quant-intro #683]: #684
#115 := (~ #59 #59)
#122 := (~ #56 #56)
#123 := [refl]: #122
#116 := [nnf-pos #123]: #115
#17 := (:var 0 S1)
#19 := (f3 #17 f4)
#68 := (= f1 #19)
#71 := (forall (vars (?v0 S1)) #68)
#62 := (exists (vars (?v1 S2)) #50)
#65 := (forall (vars (?v0 S1)) #62)
#74 := (iff #65 #71)
#77 := (and #59 #74)
#83 := (exists (vars (?v0 S2)) #80)
#89 := (iff #83 #86)
#95 := (not #77)
#96 := (or #95 #89)
#101 := (not #96)
#29 := (= #28 f1)
#26 := (= #25 f1)
#27 := (exists (vars (?v0 S2)) #26)
#30 := (iff #27 #29)
#20 := (= #19 f1)
#21 := (forall (vars (?v0 S1)) #20)
#11 := (= #10 f1)
#15 := (exists (vars (?v1 S2)) #11)
#16 := (forall (vars (?v0 S1)) #15)
#22 := (iff #16 #21)
#12 := (= #8 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#23 := (and #14 #22)
#31 := (implies #23 #30)
#32 := (not #31)
#102 := (iff #32 #101)
#99 := (iff #31 #96)
#92 := (implies #77 #89)
#97 := (iff #92 #96)
#98 := [rewrite]: #97
#93 := (iff #31 #92)
#90 := (iff #30 #89)
#87 := (iff #29 #86)
#88 := [rewrite]: #87
#84 := (iff #27 #83)
#81 := (iff #26 #80)
#82 := [rewrite]: #81
#85 := [quant-intro #82]: #84
#91 := [monotonicity #85 #88]: #90
#78 := (iff #23 #77)
#75 := (iff #22 #74)
#72 := (iff #21 #71)
#69 := (iff #20 #68)
#70 := [rewrite]: #69
#73 := [quant-intro #70]: #72
#66 := (iff #16 #65)
#63 := (iff #15 #62)
#51 := (iff #11 #50)
#52 := [rewrite]: #51
#64 := [quant-intro #52]: #63
#67 := [quant-intro #64]: #66
#76 := [monotonicity #67 #73]: #75
#60 := (iff #14 #59)
#57 := (iff #13 #56)
#54 := (iff #12 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #52 #55]: #57
#61 := [quant-intro #58]: #60
#79 := [monotonicity #61 #76]: #78
#94 := [monotonicity #79 #91]: #93
#100 := [trans #94 #98]: #99
#103 := [monotonicity #100]: #102
#49 := [asserted]: #32
#106 := [mp #49 #103]: #101
#104 := [not-or-elim #106]: #77
#105 := [and-elim #104]: #59
#113 := [mp~ #105 #116]: #59
#686 := [mp #113 #685]: #681
#264 := (not #681)
#340 := (or #264 #263)
#341 := [quant-inst]: #340
#350 := [unit-resolution #341 #686]: #263
decl ?v0!3 :: S2
#155 := ?v0!3
#156 := (f3 f5 ?v0!3)
#128 := (= f1 #156)
#349 := (iff #128 #262)
#351 := (or #264 #349)
#342 := [quant-inst]: #351
#668 := [unit-resolution #342 #686]: #349
#353 := (not #349)
#671 := (or #353 #262)
#190 := (not #86)
#670 := [hypothesis]: #190
#195 := (or #86 #128)
#187 := (forall (vars (?v0 S2)) #184)
#196 := (or #190 #187)
#203 := (and #195 #196)
#197 := (and #196 #195)
#204 := (iff #197 #203)
#205 := [rewrite]: #204
#117 := (not #83)
#118 := (iff #86 #117)
#198 := (~ #118 #197)
#188 := (~ #117 #187)
#185 := (~ #184 #184)
#186 := [refl]: #185
#189 := [nnf-neg #186]: #188
#181 := (not #117)
#182 := (~ #181 #128)
#129 := (~ #83 #128)
#178 := [sk]: #129
#183 := [nnf-neg #178]: #182
#193 := (~ #86 #86)
#194 := [refl]: #193
#191 := (~ #190 #190)
#192 := [refl]: #191
#199 := [nnf-pos #192 #194 #183 #189]: #198
#108 := (not #89)
#119 := (iff #108 #118)
#120 := [rewrite]: #119
#109 := [not-or-elim #106]: #108
#121 := [mp #109 #120]: #118
#200 := [mp~ #121 #199]: #197
#201 := [mp #200 #205]: #203
#202 := [and-elim #201]: #195
#328 := [unit-resolution #202 #670]: #128
#352 := (not #128)
#356 := (or #353 #352 #262)
#335 := [def-axiom]: #356
#312 := [unit-resolution #335 #328]: #671
#655 := [unit-resolution #312 #668]: #262
#354 := (not #262)
#675 := (not #263)
#316 := (or #675 #354)
#676 := (or #675 #86 #354)
#677 := [def-axiom]: #676
#317 := [unit-resolution #677 #670]: #316
#318 := [unit-resolution #317 #655 #350]: false
#319 := [lemma #318]: #86
#709 := (or #190 #704)
#710 := (iff #196 #709)
#707 := (iff #187 #704)
#705 := (iff #184 #184)
#706 := [refl]: #705
#708 := [quant-intro #706]: #707
#711 := [monotonicity #708]: #710
#206 := [and-elim #201]: #196
#712 := [mp #206 #711]: #709
#282 := [unit-resolution #712 #319]: #704
#679 := (not #704)
#669 := (or #679 #190)
#327 := [quant-inst]: #669
[unit-resolution #327 #319 #282]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!12)

dda61842424d25cb559a3f8991ef4e1e4903a499 1 0
unsat
7f10599800da74136cc3f9154a1eba3209948357 1 0
unsat
247ac7268dd0509d03e61fc965462ece3eca85cc 107 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#606 := (pattern #9)
decl f1 :: S1
#4 := f1
#37 := (= f1 #9)
#43 := (not #37)
#613 := (forall (vars (?v0 S2)) (:pat #606) #43)
#115 := (forall (vars (?v0 S2)) #43)
#616 := (iff #115 #613)
#614 := (iff #43 #43)
#615 := [refl]: #614
#617 := [quant-intro #615]: #616
#58 := (exists (vars (?v0 S2)) #37)
#74 := (not #58)
#116 := (~ #74 #115)
#113 := (~ #43 #43)
#114 := [refl]: #113
#117 := [nnf-neg #114]: #116
#11 := (:var 1 S2)
#12 := (= #8 #11)
#44 := (or #12 #43)
#49 := (forall (vars (?v1 S2)) #44)
#52 := (and #37 #49)
#55 := (exists (vars (?v0 S2)) #52)
#64 := (not #55)
#65 := (or #64 #58)
#70 := (not #65)
#10 := (= #9 f1)
#17 := (exists (vars (?v0 S2)) #10)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#16 := (exists (vars (?v0 S2)) #15)
#18 := (implies #16 #17)
#19 := (not #18)
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #55 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#60 := [quant-intro #39]: #59
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#47 := (iff #13 #44)
#40 := (implies #37 #12)
#45 := (iff #40 #44)
#46 := [rewrite]: #45
#41 := (iff #13 #40)
#42 := [monotonicity #39]: #41
#48 := [trans #42 #46]: #47
#51 := [quant-intro #48]: #50
#54 := [monotonicity #39 #51]: #53
#57 := [quant-intro #54]: #56
#63 := [monotonicity #57 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#36 := [asserted]: #19
#75 := [mp #36 #72]: #70
#76 := [not-or-elim #75]: #74
#118 := [mp~ #76 #117]: #115
#618 := [mp #118 #617]: #613
decl ?v0!0 :: S2
#84 := ?v0!0
#79 := (f3 ?v0!0)
#77 := (= f1 #79)
#85 := (= #8 ?v0!0)
#103 := (or #43 #85)
#106 := (forall (vars (?v1 S2)) #103)
#109 := (and #77 #106)
#86 := (or #85 #43)
#87 := (forall (vars (?v1 S2)) #86)
#88 := (and #77 #87)
#110 := (iff #88 #109)
#107 := (iff #87 #106)
#104 := (iff #86 #103)
#105 := [rewrite]: #104
#108 := [quant-intro #105]: #107
#111 := [monotonicity #108]: #110
#89 := (~ #55 #88)
#97 := (~ #88 #88)
#95 := (~ #87 #87)
#93 := (~ #86 #86)
#94 := [refl]: #93
#96 := [nnf-pos #94]: #95
#91 := (~ #77 #77)
#92 := [refl]: #91
#98 := [monotonicity #92 #96]: #97
#90 := [sk]: #89
#99 := [trans #90 #98]: #89
#73 := [not-or-elim #75]: #55
#100 := [mp~ #73 #99]: #88
#101 := [mp #100 #111]: #109
#102 := [and-elim #101]: #77
#191 := (not #77)
#278 := (not #613)
#193 := (or #278 #191)
#279 := [quant-inst]: #193
[unit-resolution #279 #102 #618]: false
unsat
27b043a98368fb44835af50bddf282a2d59b4391 1 2
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!12)

9fff5372d7dcf3c6868fd1efde54974ccaa78891 1 0
unsat
150dd0a5cf6fbd2bec23fe99d00ba9baec864264 75 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#18 := (not #10)
#11 := (:var 1 S2)
#12 := (= #8 #11)
#17 := (not #12)
#19 := (implies #17 #18)
#20 := (forall (vars (?v1 S2)) #19)
#21 := (and #10 #20)
#22 := (exists (vars (?v0 S2)) #21)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#16 := (exists (vars (?v0 S2)) #15)
#23 := (iff #16 #22)
#24 := (not #23)
#90 := (iff #24 false)
#1 := true
#85 := (not true)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #24 #85)
#83 := (iff #23 true)
#42 := (= f1 #9)
#48 := (not #42)
#49 := (or #12 #48)
#54 := (forall (vars (?v1 S2)) #49)
#57 := (and #42 #54)
#60 := (exists (vars (?v0 S2)) #57)
#78 := (iff #60 #60)
#81 := (iff #78 true)
#82 := [rewrite]: #81
#79 := (iff #23 #78)
#76 := (iff #22 #60)
#74 := (iff #21 #57)
#72 := (iff #20 #54)
#70 := (iff #19 #49)
#65 := (implies #17 #48)
#68 := (iff #65 #49)
#69 := [rewrite]: #68
#66 := (iff #19 #65)
#63 := (iff #18 #48)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#64 := [monotonicity #44]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#73 := [quant-intro #71]: #72
#75 := [monotonicity #44 #73]: #74
#77 := [quant-intro #75]: #76
#61 := (iff #16 #60)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (iff #13 #49)
#45 := (implies #42 #12)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #13 #45)
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#56 := [quant-intro #53]: #55
#59 := [monotonicity #44 #56]: #58
#62 := [quant-intro #59]: #61
#80 := [monotonicity #62 #77]: #79
#84 := [trans #80 #82]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#41 := [asserted]: #24
[mp #41 #91]: false
unsat
23f1460031fa3216d5ae34bab8e296aaa1bb42d0 1 0
unsat
060c3042ee22e19c83c26af2e895e991251857c3 207 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!0 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#221 := (?v1!0 f4)
#222 := (f3 #221)
decl f1 :: S1
#4 := f1
#309 := (= f1 #222)
#223 := (not #309)
#308 := (= f4 #221)
#313 := (or #308 #223)
#311 := (not #313)
#11 := (:var 0 S2)
#12 := (f3 #11)
#639 := (pattern #12)
#120 := (?v1!0 #11)
#147 := (= #11 #120)
#121 := (f3 #120)
#115 := (= f1 #121)
#128 := (not #115)
#153 := (or #128 #147)
#158 := (not #153)
#46 := (= f1 #12)
#55 := (not #46)
#161 := (or #55 #158)
#646 := (forall (vars (?v0 S2)) (:pat #639) #161)
#164 := (forall (vars (?v0 S2)) #161)
#649 := (iff #164 #646)
#647 := (iff #161 #161)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#129 := (= #120 #11)
#130 := (or #129 #128)
#131 := (not #130)
#137 := (or #55 #131)
#141 := (forall (vars (?v0 S2)) #137)
#165 := (iff #141 #164)
#162 := (iff #137 #161)
#159 := (iff #131 #158)
#156 := (iff #130 #153)
#150 := (or #147 #128)
#154 := (iff #150 #153)
#155 := [rewrite]: #154
#151 := (iff #130 #150)
#148 := (iff #129 #147)
#149 := [rewrite]: #148
#152 := [monotonicity #149]: #151
#157 := [trans #152 #155]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#17 := (:var 1 S2)
#18 := (= #11 #17)
#67 := (or #18 #55)
#72 := (forall (vars (?v1 S2)) #67)
#75 := (and #46 #72)
#78 := (exists (vars (?v0 S2)) #75)
#113 := (not #78)
#142 := (~ #113 #141)
#138 := (not #75)
#139 := (~ #138 #137)
#132 := (not #72)
#133 := (~ #132 #131)
#134 := [sk]: #133
#119 := (~ #55 #55)
#117 := [refl]: #119
#140 := [nnf-neg #117 #134]: #139
#143 := [nnf-neg #140]: #142
#49 := (= f4 #11)
#56 := (or #55 #49)
#61 := (forall (vars (?v0 S2)) #56)
#84 := (not #61)
#9 := (f3 f4)
#43 := (= f1 #9)
#93 := (not #43)
#102 := (or #93 #84 #78)
#105 := (not #102)
#13 := (= #12 f1)
#19 := (implies #13 #18)
#20 := (forall (vars (?v1 S2)) #19)
#21 := (and #13 #20)
#22 := (exists (vars (?v0 S2)) #21)
#14 := (= #11 f4)
#15 := (implies #13 #14)
#16 := (forall (vars (?v0 S2)) #15)
#23 := (implies #16 #22)
#10 := (= #9 f1)
#24 := (implies #10 #23)
#25 := (not #24)
#108 := (iff #25 #105)
#85 := (or #84 #78)
#94 := (or #93 #85)
#99 := (not #94)
#106 := (iff #99 #105)
#103 := (iff #94 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#100 := (iff #25 #99)
#97 := (iff #24 #94)
#90 := (implies #43 #85)
#95 := (iff #90 #94)
#96 := [rewrite]: #95
#91 := (iff #24 #90)
#88 := (iff #23 #85)
#81 := (implies #61 #78)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #23 #81)
#79 := (iff #22 #78)
#76 := (iff #21 #75)
#73 := (iff #20 #72)
#70 := (iff #19 #67)
#64 := (implies #46 #18)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #19 #64)
#47 := (iff #13 #46)
#48 := [rewrite]: #47
#66 := [monotonicity #48]: #65
#71 := [trans #66 #69]: #70
#74 := [quant-intro #71]: #73
#77 := [monotonicity #48 #74]: #76
#80 := [quant-intro #77]: #79
#62 := (iff #16 #61)
#59 := (iff #15 #56)
#52 := (implies #46 #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#54 := [monotonicity #48 #51]: #53
#60 := [trans #54 #58]: #59
#63 := [quant-intro #60]: #62
#83 := [monotonicity #63 #80]: #82
#89 := [trans #83 #87]: #88
#44 := (iff #10 #43)
#45 := [rewrite]: #44
#92 := [monotonicity #45 #89]: #91
#98 := [trans #92 #96]: #97
#101 := [monotonicity #98]: #100
#109 := [trans #101 #107]: #108
#42 := [asserted]: #25
#110 := [mp #42 #109]: #105
#114 := [not-or-elim #110]: #113
#144 := [mp~ #114 #143]: #141
#145 := [mp #144 #166]: #164
#651 := [mp #145 #650]: #646
#111 := [not-or-elim #110]: #43
#420 := (not #646)
#627 := (or #420 #93 #311)
#310 := (or #223 #308)
#301 := (not #310)
#312 := (or #93 #301)
#299 := (or #420 #312)
#638 := (iff #299 #627)
#631 := (or #93 #311)
#634 := (or #420 #631)
#637 := (iff #634 #627)
#632 := [rewrite]: #637
#635 := (iff #299 #634)
#633 := (iff #312 #631)
#315 := (iff #301 #311)
#241 := (iff #310 #313)
#314 := [rewrite]: #241
#294 := [monotonicity #314]: #315
#288 := [monotonicity #294]: #633
#636 := [monotonicity #288]: #635
#628 := [trans #636 #632]: #638
#300 := [quant-inst]: #299
#286 := [mp #300 #628]: #627
#595 := [unit-resolution #286 #111 #651]: #311
#630 := (or #313 #309)
#271 := [def-axiom]: #630
#596 := [unit-resolution #271 #595]: #309
#291 := (not #308)
#629 := (or #313 #291)
#287 := [def-axiom]: #629
#591 := [unit-resolution #287 #595]: #291
#640 := (forall (vars (?v0 S2)) (:pat #639) #56)
#643 := (iff #61 #640)
#641 := (iff #56 #56)
#642 := [refl]: #641
#644 := [quant-intro #642]: #643
#126 := (~ #61 #61)
#124 := (~ #56 #56)
#125 := [refl]: #124
#127 := [nnf-pos #125]: #126
#112 := [not-or-elim #110]: #61
#118 := [mp~ #112 #127]: #61
#645 := [mp #118 #644]: #640
#276 := (not #640)
#277 := (or #276 #308 #223)
#278 := (or #276 #310)
#621 := (iff #278 #277)
#617 := (or #276 #313)
#620 := (iff #617 #277)
#615 := [rewrite]: #620
#618 := (iff #278 #617)
#619 := [monotonicity #314]: #618
#257 := [trans #619 #615]: #621
#616 := [quant-inst]: #278
#622 := [mp #616 #257]: #277
[unit-resolution #622 #645 #591 #596]: false
unsat
f2b2af5a9a8fe9ebf2adc96a482b15f0491a9fa9 1 0
unsat
7a325dc7f60f1d704b700244e345b2bb3c006973 250 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!1 :: (-> S2 S2)
decl ?v0!0 :: S2
#123 := ?v0!0
#252 := (?v1!1 ?v0!0)
#253 := (f3 #252)
decl f1 :: S1
#4 := f1
#340 := (= f1 #253)
#254 := (not #340)
#339 := (= ?v0!0 #252)
#272 := (or #339 #254)
#346 := (not #272)
#8 := (:var 0 S2)
#9 := (f3 #8)
#677 := (pattern #9)
#119 := (?v1!1 #8)
#154 := (= #8 #119)
#120 := (f3 #119)
#134 := (= f1 #120)
#135 := (not #134)
#160 := (or #135 #154)
#165 := (not #160)
#44 := (= f1 #9)
#81 := (not #44)
#168 := (or #81 #165)
#678 := (forall (vars (?v0 S2)) (:pat #677) #168)
#171 := (forall (vars (?v0 S2)) #168)
#681 := (iff #171 #678)
#679 := (iff #168 #168)
#680 := [refl]: #679
#682 := [quant-intro #680]: #681
#136 := (= #119 #8)
#137 := (or #136 #135)
#138 := (not #137)
#144 := (or #81 #138)
#148 := (forall (vars (?v0 S2)) #144)
#172 := (iff #148 #171)
#169 := (iff #144 #168)
#166 := (iff #138 #165)
#163 := (iff #137 #160)
#157 := (or #154 #135)
#161 := (iff #157 #160)
#162 := [rewrite]: #161
#158 := (iff #137 #157)
#155 := (iff #136 #154)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#164 := [trans #159 #162]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [quant-intro #170]: #172
#12 := (:var 1 S2)
#20 := (= #8 #12)
#82 := (or #20 #81)
#87 := (forall (vars (?v1 S2)) #82)
#90 := (and #44 #87)
#93 := (exists (vars (?v0 S2)) #90)
#112 := (not #93)
#149 := (~ #112 #148)
#145 := (not #90)
#146 := (~ #145 #144)
#139 := (not #87)
#140 := (~ #139 #138)
#141 := [sk]: #140
#132 := (~ #81 #81)
#133 := [refl]: #132
#147 := [nnf-neg #133 #141]: #146
#150 := [nnf-neg #147]: #149
#13 := (f3 #12)
#50 := (= f1 #13)
#56 := (and #44 #50)
#66 := (not #56)
#67 := (or #20 #66)
#72 := (forall (vars (?v0 S2) (?v1 S2)) #67)
#47 := (exists (vars (?v0 S2)) #44)
#75 := (and #47 #72)
#99 := (not #75)
#100 := (or #99 #93)
#105 := (not #100)
#10 := (= #9 f1)
#21 := (implies #10 #20)
#22 := (forall (vars (?v1 S2)) #21)
#23 := (and #10 #22)
#24 := (exists (vars (?v0 S2)) #23)
#16 := (= #12 #8)
#14 := (= #13 f1)
#15 := (and #14 #10)
#17 := (implies #15 #16)
#18 := (forall (vars (?v0 S2) (?v1 S2)) #17)
#11 := (exists (vars (?v0 S2)) #10)
#19 := (and #11 #18)
#25 := (implies #19 #24)
#26 := (not #25)
#106 := (iff #26 #105)
#103 := (iff #25 #100)
#96 := (implies #75 #93)
#101 := (iff #96 #100)
#102 := [rewrite]: #101
#97 := (iff #25 #96)
#94 := (iff #24 #93)
#91 := (iff #23 #90)
#88 := (iff #22 #87)
#85 := (iff #21 #82)
#78 := (implies #44 #20)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #21 #78)
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#80 := [monotonicity #46]: #79
#86 := [trans #80 #84]: #85
#89 := [quant-intro #86]: #88
#92 := [monotonicity #46 #89]: #91
#95 := [quant-intro #92]: #94
#76 := (iff #19 #75)
#73 := (iff #18 #72)
#70 := (iff #17 #67)
#63 := (implies #56 #20)
#68 := (iff #63 #67)
#69 := [rewrite]: #68
#64 := (iff #17 #63)
#61 := (iff #16 #20)
#62 := [rewrite]: #61
#59 := (iff #15 #56)
#53 := (and #50 #44)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#55 := [monotonicity #52 #46]: #54
#60 := [trans #55 #58]: #59
#65 := [monotonicity #60 #62]: #64
#71 := [trans #65 #69]: #70
#74 := [quant-intro #71]: #73
#48 := (iff #11 #47)
#49 := [quant-intro #46]: #48
#77 := [monotonicity #49 #74]: #76
#98 := [monotonicity #77 #95]: #97
#104 := [trans #98 #102]: #103
#107 := [monotonicity #104]: #106
#43 := [asserted]: #26
#110 := [mp #43 #107]: #105
#113 := [not-or-elim #110]: #112
#151 := [mp~ #113 #150]: #148
#152 := [mp #151 #173]: #171
#683 := [mp #152 #682]: #678
#124 := (f3 ?v0!0)
#125 := (= f1 #124)
#126 := (~ #47 #125)
#116 := [sk]: #126
#108 := [not-or-elim #110]: #75
#109 := [and-elim #108]: #47
#128 := [mp~ #109 #116]: #125
#343 := (not #125)
#658 := (not #678)
#330 := (or #658 #343 #346)
#341 := (or #254 #339)
#332 := (not #341)
#344 := (or #343 #332)
#331 := (or #658 #344)
#659 := (iff #331 #330)
#664 := (or #343 #346)
#666 := (or #658 #664)
#663 := (iff #666 #330)
#669 := [rewrite]: #663
#667 := (iff #331 #666)
#319 := (iff #344 #664)
#325 := (iff #332 #346)
#345 := (iff #341 #272)
#342 := [rewrite]: #345
#662 := [monotonicity #342]: #325
#451 := [monotonicity #662]: #319
#668 := [monotonicity #451]: #667
#317 := [trans #668 #669]: #659
#665 := [quant-inst]: #331
#322 := [mp #665 #317]: #330
#453 := [unit-resolution #322 #128 #683]: #346
#302 := (or #272 #340)
#645 := [def-axiom]: #302
#606 := [unit-resolution #645 #453]: #340
#660 := (not #339)
#318 := (or #272 #660)
#661 := [def-axiom]: #318
#607 := [unit-resolution #661 #453]: #660
#670 := (pattern #9 #13)
#142 := (not #50)
#186 := (or #20 #81 #142)
#671 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #670) #186)
#191 := (forall (vars (?v0 S2) (?v1 S2)) #186)
#674 := (iff #191 #671)
#672 := (iff #186 #186)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#192 := (iff #72 #191)
#189 := (iff #67 #186)
#143 := (or #81 #142)
#183 := (or #20 #143)
#187 := (iff #183 #186)
#188 := [rewrite]: #187
#184 := (iff #67 #183)
#181 := (iff #66 #143)
#153 := (not #143)
#176 := (not #153)
#179 := (iff #176 #143)
#180 := [rewrite]: #179
#177 := (iff #66 #176)
#174 := (iff #56 #153)
#175 := [rewrite]: #174
#178 := [monotonicity #175]: #177
#182 := [trans #178 #180]: #181
#185 := [monotonicity #182]: #184
#190 := [trans #185 #188]: #189
#193 := [quant-intro #190]: #192
#129 := (~ #72 #72)
#114 := (~ #67 #67)
#127 := [refl]: #114
#130 := [nnf-pos #127]: #129
#111 := [and-elim #108]: #72
#131 := [mp~ #111 #130]: #72
#194 := [mp #131 #193]: #191
#676 := [mp #194 #675]: #671
#627 := (not #671)
#622 := (or #627 #343 #339 #254)
#352 := (= #252 ?v0!0)
#353 := (or #352 #254 #343)
#623 := (or #627 #353)
#473 := (iff #623 #622)
#635 := (or #343 #339 #254)
#629 := (or #627 #635)
#471 := (iff #629 #622)
#472 := [rewrite]: #471
#624 := (iff #623 #629)
#625 := (iff #353 #635)
#634 := (or #339 #254 #343)
#632 := (iff #634 #635)
#636 := [rewrite]: #632
#347 := (iff #353 #634)
#355 := (iff #352 #339)
#633 := [rewrite]: #355
#631 := [monotonicity #633]: #347
#626 := [trans #631 #636]: #625
#630 := [monotonicity #626]: #624
#615 := [trans #630 #472]: #473
#628 := [quant-inst]: #623
#616 := [mp #628 #615]: #622
[unit-resolution #616 #128 #676 #607 #606]: false
unsat
a6ccb14f7a73c3d3f2c9c2bbc93d8537ee62f62b 1 0
unsat
0aa1c3973c008a0548a3cef61cdea0cbbc71f686 238 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!1 :: (-> S2 S2)
decl ?v0!0 :: S2
#116 := ?v0!0
#240 := (?v1!1 ?v0!0)
#241 := (f3 #240)
decl f1 :: S1
#4 := f1
#328 := (= f1 #241)
#242 := (not #328)
#327 := (= ?v0!0 #240)
#260 := (or #327 #242)
#334 := (not #260)
#8 := (:var 0 S2)
#9 := (f3 #8)
#658 := (pattern #9)
#145 := (?v1!1 #8)
#166 := (= #8 #145)
#146 := (f3 #145)
#147 := (= f1 #146)
#148 := (not #147)
#172 := (or #148 #166)
#177 := (not #172)
#41 := (= f1 #9)
#47 := (not #41)
#180 := (or #47 #177)
#665 := (forall (vars (?v0 S2)) (:pat #658) #180)
#183 := (forall (vars (?v0 S2)) #180)
#668 := (iff #183 #665)
#666 := (iff #180 #180)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#149 := (= #145 #8)
#150 := (or #149 #148)
#151 := (not #150)
#157 := (or #47 #151)
#160 := (forall (vars (?v0 S2)) #157)
#184 := (iff #160 #183)
#181 := (iff #157 #180)
#178 := (iff #151 #177)
#175 := (iff #150 #172)
#169 := (or #166 #148)
#173 := (iff #169 #172)
#174 := [rewrite]: #173
#170 := (iff #150 #169)
#167 := (iff #149 #166)
#168 := [rewrite]: #167
#171 := [monotonicity #168]: #170
#176 := [trans #171 #174]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [quant-intro #182]: #184
#11 := (:var 1 S2)
#12 := (= #8 #11)
#48 := (or #12 #47)
#53 := (forall (vars (?v1 S2)) #48)
#56 := (and #41 #53)
#68 := (not #56)
#112 := (forall (vars (?v0 S2)) #68)
#161 := (~ #112 #160)
#158 := (~ #68 #157)
#152 := (not #53)
#153 := (~ #152 #151)
#154 := [sk]: #153
#143 := (~ #47 #47)
#144 := [refl]: #143
#159 := [nnf-neg #144 #154]: #158
#162 := [nnf-pos #159]: #161
decl f4 :: S1
#17 := f4
#62 := (= f1 f4)
#69 := (or #68 #62)
#74 := (forall (vars (?v0 S2)) #69)
#113 := (iff #74 #112)
#110 := (iff #69 #68)
#105 := (or #68 false)
#108 := (iff #105 #68)
#109 := [rewrite]: #108
#106 := (iff #69 #105)
#101 := (iff #62 false)
#92 := (not #62)
#59 := (exists (vars (?v0 S2)) #56)
#77 := (and #59 #74)
#83 := (not #77)
#84 := (or #62 #83)
#89 := (not #84)
#18 := (= f4 f1)
#10 := (= #9 f1)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 S2)) #19)
#16 := (exists (vars (?v0 S2)) #15)
#21 := (and #16 #20)
#22 := (implies #21 #18)
#23 := (not #22)
#90 := (iff #23 #89)
#87 := (iff #22 #84)
#80 := (implies #77 #62)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #22 #80)
#63 := (iff #18 #62)
#64 := [rewrite]: #63
#78 := (iff #21 #77)
#75 := (iff #20 #74)
#72 := (iff #19 #69)
#65 := (implies #56 #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #19 #65)
#57 := (iff #15 #56)
#54 := (iff #14 #53)
#51 := (iff #13 #48)
#44 := (implies #41 #12)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #13 #44)
#42 := (iff #10 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #43 #55]: #57
#67 := [monotonicity #58 #64]: #66
#73 := [trans #67 #71]: #72
#76 := [quant-intro #73]: #75
#60 := (iff #16 #59)
#61 := [quant-intro #58]: #60
#79 := [monotonicity #61 #76]: #78
#82 := [monotonicity #79 #64]: #81
#88 := [trans #82 #86]: #87
#91 := [monotonicity #88]: #90
#40 := [asserted]: #23
#94 := [mp #40 #91]: #89
#93 := [not-or-elim #94]: #92
#102 := [iff-false #93]: #101
#107 := [monotonicity #102]: #106
#111 := [trans #107 #109]: #110
#114 := [quant-intro #111]: #113
#95 := [not-or-elim #94]: #77
#97 := [and-elim #95]: #74
#115 := [mp #97 #114]: #112
#163 := [mp~ #115 #162]: #160
#164 := [mp #163 #185]: #183
#670 := [mp #164 #669]: #665
#100 := (f3 ?v0!0)
#98 := (= f1 #100)
#117 := (= #8 ?v0!0)
#133 := (or #47 #117)
#136 := (forall (vars (?v1 S2)) #133)
#139 := (and #98 #136)
#103 := (or #117 #47)
#104 := (forall (vars (?v1 S2)) #103)
#118 := (and #98 #104)
#140 := (iff #118 #139)
#137 := (iff #104 #136)
#134 := (iff #103 #133)
#135 := [rewrite]: #134
#138 := [quant-intro #135]: #137
#141 := [monotonicity #138]: #140
#119 := (~ #59 #118)
#127 := (~ #118 #118)
#125 := (~ #104 #104)
#123 := (~ #103 #103)
#124 := [refl]: #123
#126 := [nnf-pos #124]: #125
#121 := (~ #98 #98)
#122 := [refl]: #121
#128 := [monotonicity #122 #126]: #127
#120 := [sk]: #119
#129 := [trans #120 #128]: #119
#96 := [and-elim #95]: #59
#130 := [mp~ #96 #129]: #118
#131 := [mp #130 #141]: #139
#132 := [and-elim #131]: #98
#331 := (not #98)
#646 := (not #665)
#318 := (or #646 #331 #334)
#329 := (or #242 #327)
#320 := (not #329)
#332 := (or #331 #320)
#319 := (or #646 #332)
#647 := (iff #319 #318)
#652 := (or #331 #334)
#654 := (or #646 #652)
#651 := (iff #654 #318)
#657 := [rewrite]: #651
#655 := (iff #319 #654)
#307 := (iff #332 #652)
#313 := (iff #320 #334)
#333 := (iff #329 #260)
#330 := [rewrite]: #333
#650 := [monotonicity #330]: #313
#439 := [monotonicity #650]: #307
#656 := [monotonicity #439]: #655
#305 := [trans #656 #657]: #647
#653 := [quant-inst]: #319
#310 := [mp #653 #305]: #318
#611 := [unit-resolution #310 #132 #670]: #334
#290 := (or #260 #328)
#633 := [def-axiom]: #290
#616 := [unit-resolution #633 #611]: #328
#648 := (not #327)
#306 := (or #260 #648)
#649 := [def-axiom]: #306
#617 := [unit-resolution #649 #611]: #648
#659 := (forall (vars (?v1 S2)) (:pat #658) #133)
#662 := (iff #136 #659)
#660 := (iff #133 #133)
#661 := [refl]: #660
#663 := [quant-intro #661]: #662
#142 := [and-elim #131]: #136
#664 := [mp #142 #663]: #659
#640 := (not #659)
#276 := (or #640 #327 #242)
#296 := (= #240 ?v0!0)
#297 := (or #242 #296)
#641 := (or #640 #297)
#631 := (iff #641 #276)
#281 := (or #640 #260)
#642 := (iff #281 #276)
#645 := [rewrite]: #642
#282 := (iff #641 #281)
#639 := (iff #297 #260)
#637 := (iff #297 #329)
#635 := (iff #296 #327)
#636 := [rewrite]: #635
#638 := [monotonicity #636]: #637
#634 := [trans #638 #330]: #639
#644 := [monotonicity #634]: #282
#632 := [trans #644 #645]: #631
#643 := [quant-inst]: #641
#338 := [mp #643 #632]: #276
[unit-resolution #338 #664 #617 #616]: false
unsat
a737d0c51ac36aed8a1a9cd55178cff9a96ed018 1 0
unsat
ad3f70e4b510752c5e78466bcf850b69675f0748 43 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (not #12)
#14 := (or #12 #13)
#15 := (not #14)
#57 := (iff #15 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #15 #52)
#50 := (iff #14 true)
#36 := (= f1 f4)
#33 := (= f1 f3)
#39 := (or #33 #36)
#42 := (not #39)
#45 := (or #39 #42)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#41 := [monotonicity #35 #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #41 #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#32 := [asserted]: #15
[mp #32 #58]: false
unsat
da888d49fe89088ba7fe71a85968b4f0e39a7aba 16 0
#2 := false
#1 := true
#8 := (implies true true)
#9 := (not #8)
#34 := (iff #9 false)
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
7f48a57f233df5237b79dd57ce30e63bdf44eb5b 27 0
#2 := false
#1 := true
#9 := (or false true)
#8 := (and true false)
#10 := (implies #8 #9)
#11 := (not #10)
#45 := (iff #11 false)
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (implies false true)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#29 := (iff #8 false)
#30 := [rewrite]: #29
#35 := [monotonicity #30 #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#28 := [asserted]: #11
[mp #28 #46]: false
unsat
fc8df43e2cfbdb1c49bd1e2ca05690556717ae56 16 0
#2 := false
#8 := (implies false false)
#9 := (not #8)
#34 := (iff #9 false)
#1 := true
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
4c412f5bcb05790d5fda803ce6123f178d77c3bc 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (iff #10 #10)
#12 := (not #11)
#45 := (iff #12 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 true)
#30 := (= f1 #9)
#33 := (iff #30 #30)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 #30)
#32 := [rewrite]: #31
#35 := [monotonicity #32 #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#29 := [asserted]: #12
[mp #29 #46]: false
unsat
6c85c042209c5bf364cb8360ac464d560331ff7c 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (implies #10 #10)
#12 := (not #11)
#45 := (iff #12 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 true)
#30 := (= f1 #9)
#33 := (implies #30 #30)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 #30)
#32 := [rewrite]: #31
#35 := [monotonicity #32 #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#29 := [asserted]: #12
[mp #29 #46]: false
unsat
7f6ad9f295b79d026cc84da045d8a49404f906c2 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#11 := (= #10 f1)
#12 := (iff #11 #11)
#13 := (not #12)
#46 := (iff #13 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #13 #41)
#39 := (iff #12 true)
#31 := (= f1 #10)
#34 := (iff #31 #31)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #12 #34)
#32 := (iff #11 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33 #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#30 := [asserted]: #13
[mp #30 #47]: false
unsat
7aa85f1d84eee91f0a6d904666dbb90dd37fe476 48 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (implies #9 #12)
#14 := (not #13)
#62 := (iff #14 false)
#35 := (= f1 f4)
#32 := (= f1 f3)
#38 := (or #32 #35)
#44 := (not #32)
#45 := (or #44 #38)
#50 := (not #45)
#60 := (iff #50 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #50 #55)
#53 := (iff #45 true)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#51 := (iff #14 #50)
#48 := (iff #13 #45)
#41 := (implies #32 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #13 #41)
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#33 := (iff #9 #32)
#34 := [rewrite]: #33
#40 := [monotonicity #34 #37]: #39
#43 := [monotonicity #34 #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#63 := [trans #52 #61]: #62
#31 := [asserted]: #14
[mp #31 #63]: false
unsat
058976b8c2e64c1e2ac12f9c692acba51ae0cd04 35 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (not #10)
#12 := (ite #10 #10 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#31 := (= f1 #9)
#34 := (not #31)
#37 := (ite #31 #31 #34)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (iff #11 #34)
#32 := (iff #10 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#39 := [monotonicity #33 #33 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#30 := [asserted]: #13
[mp #30 #50]: false
unsat
643e3befcc368aa36d51d58e2d963c26629d80a2 53 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (or #11 #9)
#13 := (implies #9 #12)
#14 := (not #13)
#67 := (iff #14 false)
#35 := (= f1 f4)
#32 := (= f1 f3)
#41 := (or #32 #35)
#49 := (not #32)
#50 := (or #49 #41)
#55 := (not #50)
#65 := (iff #55 false)
#1 := true
#60 := (not true)
#63 := (iff #60 false)
#64 := [rewrite]: #63
#61 := (iff #55 #60)
#58 := (iff #50 true)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#56 := (iff #14 #55)
#53 := (iff #13 #50)
#46 := (implies #32 #41)
#51 := (iff #46 #50)
#52 := [rewrite]: #51
#47 := (iff #13 #46)
#44 := (iff #12 #41)
#38 := (or #35 #32)
#42 := (iff #38 #41)
#43 := [rewrite]: #42
#39 := (iff #12 #38)
#33 := (iff #9 #32)
#34 := [rewrite]: #33
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37 #34]: #39
#45 := [trans #40 #43]: #44
#48 := [monotonicity #34 #45]: #47
#54 := [trans #48 #52]: #53
#57 := [monotonicity #54]: #56
#68 := [trans #57 #66]: #67
#31 := [asserted]: #14
[mp #31 #68]: false
unsat
afa454836bb1ada63b9eb89ea6c38269311b8712 56 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#11 := f4
#12 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#13 := (implies #9 #12)
#10 := (not #9)
#14 := (implies #10 #13)
#15 := (not #14)
#70 := (iff #15 false)
#39 := (= f1 f4)
#33 := (= f1 f3)
#36 := (not #33)
#45 := (or #36 #39)
#53 := (or #33 #45)
#58 := (not #53)
#68 := (iff #58 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #58 #63)
#61 := (iff #53 true)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#59 := (iff #15 #58)
#56 := (iff #14 #53)
#50 := (implies #36 #45)
#54 := (iff #50 #53)
#55 := [rewrite]: #54
#51 := (iff #14 #50)
#48 := (iff #13 #45)
#42 := (implies #33 #39)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#41 := [rewrite]: #40
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#44 := [monotonicity #35 #41]: #43
#49 := [trans #44 #47]: #48
#37 := (iff #10 #36)
#38 := [monotonicity #35]: #37
#52 := [monotonicity #38 #49]: #51
#57 := [trans #52 #55]: #56
#60 := [monotonicity #57]: #59
#71 := [trans #60 #69]: #70
#32 := [asserted]: #15
[mp #32 #71]: false
unsat
a96584af88e2b610042d1242f930cc6c51587530 54 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (implies #11 #9)
#13 := (implies #9 #12)
#14 := (not #13)
#68 := (iff #14 false)
#35 := (= f1 f4)
#41 := (not #35)
#32 := (= f1 f3)
#42 := (or #32 #41)
#50 := (not #32)
#51 := (or #50 #42)
#56 := (not #51)
#66 := (iff #56 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #56 #61)
#59 := (iff #51 true)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#57 := (iff #14 #56)
#54 := (iff #13 #51)
#47 := (implies #32 #42)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #13 #47)
#45 := (iff #12 #42)
#38 := (implies #35 #32)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #12 #38)
#33 := (iff #9 #32)
#34 := [rewrite]: #33
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37 #34]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #34 #46]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #55]: #57
#69 := [trans #58 #67]: #68
#31 := [asserted]: #14
[mp #31 #69]: false
unsat
5c717bc0664ca45c994a6287285cf080d3a78d66 3 0
#2 := false
[asserted]: false
unsat
7a045a1848b4b2a8d896e622d8b797488f2ae65b 89 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#38 := (= f1 f4)
decl f3 :: S1
#8 := f3
#35 := (= f1 f3)
#47 := (not #35)
#48 := (or #47 #38)
#106 := (iff #48 false)
#101 := (or false false)
#104 := (iff #101 false)
#105 := [rewrite]: #104
#102 := (iff #48 #101)
#92 := (iff #38 false)
#41 := (not #38)
#53 := (not #48)
#75 := (or #47 #38 #53)
#78 := (not #75)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (implies #9 #11)
#14 := (not #13)
#12 := (not #11)
#15 := (implies #12 #14)
#16 := (implies #9 #15)
#17 := (not #16)
#81 := (iff #17 #78)
#59 := (or #38 #53)
#67 := (or #47 #59)
#72 := (not #67)
#79 := (iff #72 #78)
#76 := (iff #67 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#73 := (iff #17 #72)
#70 := (iff #16 #67)
#64 := (implies #35 #59)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #16 #64)
#62 := (iff #15 #59)
#56 := (implies #41 #53)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #15 #56)
#54 := (iff #14 #53)
#51 := (iff #13 #48)
#44 := (implies #35 #38)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #13 #44)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#46 := [monotonicity #37 #40]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#42 := (iff #12 #41)
#43 := [monotonicity #40]: #42
#58 := [monotonicity #43 #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #37 #63]: #65
#71 := [trans #66 #69]: #70
#74 := [monotonicity #71]: #73
#82 := [trans #74 #80]: #81
#34 := [asserted]: #17
#83 := [mp #34 #82]: #78
#85 := [not-or-elim #83]: #41
#93 := [iff-false #85]: #92
#99 := (iff #47 false)
#1 := true
#94 := (not true)
#97 := (iff #94 false)
#98 := [rewrite]: #97
#95 := (iff #47 #94)
#90 := (iff #35 true)
#84 := [not-or-elim #83]: #35
#91 := [iff-true #84]: #90
#96 := [monotonicity #91]: #95
#100 := [trans #96 #98]: #99
#103 := [monotonicity #100 #93]: #102
#107 := [trans #103 #105]: #106
#86 := [not-or-elim #83]: #48
[mp #86 #107]: false
unsat
053f09fab3ab7dadcbb50216d87e6bbc9c52b970 18 0
#2 := false
#9 := 1::int
#8 := 0::int
#10 := (< 0::int 1::int)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
0e7bbb17f9ad81b8c781d5e0b8798e9474d3fd3d 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (iff #10 #10)
#12 := (not #11)
#45 := (iff #12 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 true)
#30 := (= f1 #9)
#33 := (iff #30 #30)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 #30)
#32 := [rewrite]: #31
#35 := [monotonicity #32 #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#29 := [asserted]: #12
[mp #29 #46]: false
unsat
4c7b1fbd03c5846dd635cd3b84120a6da09efeaf 18 0
#2 := false
#9 := 1::int
#8 := 0::int
#10 := (<= 0::int 1::int)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
5ae11eff5645b77b5c2e32c0104eec8daf365335 57 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
decl f1 :: S1
#4 := f1
#33 := (= f1 #9)
#45 := (not #33)
decl f5 :: (-> S2 S1)
#11 := (f5 f4)
#36 := (= f1 #11)
#46 := (iff #36 #45)
#58 := (not #46)
#73 := (iff #58 false)
#1 := true
#68 := (not true)
#71 := (iff #68 false)
#72 := [rewrite]: #71
#69 := (iff #58 #68)
#66 := (iff #46 true)
#39 := (iff #33 #36)
#55 := (not #39)
#63 := (iff #55 #46)
#64 := [rewrite]: #63
#47 := (or #39 #46)
#52 := (not #47)
#12 := (= #11 f1)
#10 := (= #9 f1)
#13 := (iff #10 #12)
#14 := (implies #13 #13)
#15 := (not #14)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#42 := (implies #39 #39)
#48 := (iff #42 #47)
#49 := [rewrite]: #48
#43 := (iff #14 #42)
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#38 := [rewrite]: #37
#34 := (iff #10 #33)
#35 := [rewrite]: #34
#41 := [monotonicity #35 #38]: #40
#44 := [monotonicity #41 #41]: #43
#51 := [trans #44 #49]: #50
#54 := [monotonicity #51]: #53
#32 := [asserted]: #15
#57 := [mp #32 #54]: #52
#56 := [not-or-elim #57]: #55
#65 := [mp #56 #64]: #46
#67 := [iff-true #65]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#59 := [not-or-elim #57]: #58
[mp #59 #74]: false
unsat
0e8cf46a62144e97d595936465b386e89d7c65da 18 0
#2 := false
#9 := 2345678901::int
#8 := 123456789::int
#10 := (< 123456789::int 2345678901::int)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
3dd3fd8b3a088daf54f3fd06483c978f1b0a5c94 50 0
#2 := false
decl f5 :: S2
#11 := f5
decl f3 :: S2
#8 := f3
#13 := (= f3 f5)
decl f4 :: S2
#9 := f4
#12 := (= f4 f5)
#74 := (iff #12 #13)
#72 := (iff #13 #12)
#10 := (= f3 f4)
#34 := (not #12)
#41 := (not #10)
#50 := (or #41 #34 #13)
#53 := (not #50)
#14 := (implies #12 #13)
#15 := (implies #10 #14)
#16 := (not #15)
#56 := (iff #16 #53)
#35 := (or #34 #13)
#42 := (or #41 #35)
#47 := (not #42)
#54 := (iff #47 #53)
#51 := (iff #42 #50)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#57 := [trans #49 #55]: #56
#33 := [asserted]: #16
#58 := [mp #33 #57]: #53
#59 := [not-or-elim #58]: #10
#73 := [monotonicity #59]: #72
#75 := [symm #73]: #74
#60 := [not-or-elim #58]: #12
#70 := [mp #60 #75]: #13
#61 := (not #13)
#62 := [not-or-elim #58]: #61
[unit-resolution #62 #70]: false
unsat
def4bedc74a497f81535120f8eb3d73a2126f39d 30 0
#2 := false
decl f3 :: (-> int S2)
#25 := 1::int
#28 := (f3 1::int)
#13 := 0::int
#26 := (+ 0::int 1::int)
#27 := (f3 #26)
#29 := (= #27 #28)
#30 := (not #29)
#148 := (iff #30 false)
#1 := true
#143 := (not true)
#146 := (iff #143 false)
#147 := [rewrite]: #146
#144 := (iff #30 #143)
#141 := (iff #29 true)
#136 := (= #28 #28)
#139 := (iff #136 true)
#140 := [rewrite]: #139
#137 := (iff #29 #136)
#133 := (= #26 1::int)
#134 := [rewrite]: #133
#135 := [monotonicity #134]: #29
#138 := [monotonicity #135]: #137
#142 := [trans #138 #140]: #141
#145 := [monotonicity #142]: #144
#149 := [trans #145 #147]: #148
#132 := [asserted]: #30
[mp #132 #149]: false
unsat
aff8e33d3cf01d5044aa16af4e5d375f7bc7128f 27 0
#2 := false
decl f5 :: (-> S2 S3)
decl f4 :: S2
#9 := f4
#12 := (f5 f4)
decl f3 :: S2
#8 := f3
#11 := (f5 f3)
#13 := (= #11 #12)
#10 := (= f3 f4)
#33 := (not #10)
#34 := (or #33 #13)
#37 := (not #34)
#14 := (implies #10 #13)
#15 := (not #14)
#38 := (iff #15 #37)
#35 := (iff #14 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#32 := [asserted]: #15
#42 := [mp #32 #39]: #37
#40 := [not-or-elim #42]: #10
#51 := [monotonicity #40]: #13
#41 := (not #13)
#43 := [not-or-elim #42]: #41
[unit-resolution #43 #51]: false
unsat
a7cad8328ffe36efffb86c5a300175a81ec9473e 225 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := 1::int
#135 := (+ 1::int #26)
#138 := (f3 #135)
#141 := (f4 #138)
#150 := -1::int
#153 := (* -1::int #141)
#154 := (+ #26 #153)
#152 := (>= #154 0::int)
#28 := (+ #26 1::int)
#29 := (f3 #28)
#30 := (f4 #29)
#31 := (< #26 #30)
#32 := (not #31)
#164 := (iff #32 #152)
#144 := (< #26 #141)
#147 := (not #144)
#162 := (iff #147 #152)
#151 := (not #152)
#157 := (not #151)
#160 := (iff #157 #152)
#161 := [rewrite]: #160
#158 := (iff #147 #157)
#155 := (iff #144 #151)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#163 := [trans #159 #161]: #162
#148 := (iff #32 #147)
#145 := (iff #31 #144)
#142 := (= #30 #141)
#139 := (= #29 #138)
#136 := (= #28 #135)
#137 := [rewrite]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#165 := [trans #149 #163]: #164
#134 := [asserted]: #32
#166 := [mp #134 #165]: #152
#347 := (>= #141 0::int)
#274 := (= #141 0::int)
#642 := (>= #26 -1::int)
#649 := (not #642)
#648 := (= #154 -1::int)
#336 := (not #648)
#630 := (<= #154 -1::int)
#621 := (not #630)
#625 := (or #621 #151)
#622 := [th-lemma]: #625
#626 := [unit-resolution #622 #166]: #621
#337 := (or #336 #630)
#338 := [th-lemma]: #337
#339 := [unit-resolution #338 #626]: #336
#14 := (:var 0 int)
#16 := (f3 #14)
#662 := (pattern #16)
#75 := (>= #14 0::int)
#76 := (not #75)
#17 := (f4 #16)
#57 := (= #14 #17)
#82 := (or #57 #76)
#663 := (forall (vars (?v0 int)) (:pat #662) #82)
#87 := (forall (vars (?v0 int)) #82)
#666 := (iff #87 #663)
#664 := (iff #82 #82)
#665 := [refl]: #664
#667 := [quant-intro #665]: #666
#170 := (~ #87 #87)
#167 := (~ #82 #82)
#182 := [refl]: #167
#171 := [nnf-pos #182]: #170
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#90 := (iff #20 #87)
#64 := (not #15)
#65 := (or #64 #57)
#70 := (forall (vars (?v0 int)) #65)
#88 := (iff #70 #87)
#85 := (iff #65 #82)
#79 := (or #76 #57)
#83 := (iff #79 #82)
#84 := [rewrite]: #83
#80 := (iff #65 #79)
#77 := (iff #64 #76)
#73 := (iff #15 #75)
#74 := [rewrite]: #73
#78 := [monotonicity #74]: #77
#81 := [monotonicity #78]: #80
#86 := [trans #81 #84]: #85
#89 := [quant-intro #86]: #88
#71 := (iff #20 #70)
#68 := (iff #19 #65)
#61 := (implies #15 #57)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #19 #61)
#59 := (iff #18 #57)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [quant-intro #69]: #71
#91 := [trans #72 #89]: #90
#56 := [asserted]: #20
#92 := [mp #56 #91]: #87
#183 := [mp~ #92 #171]: #87
#668 := [mp #183 #667]: #663
#645 := (not #663)
#288 := (or #645 #649 #648)
#330 := (>= #135 0::int)
#331 := (not #330)
#311 := (= #135 #141)
#646 := (or #311 #331)
#629 := (or #645 #646)
#633 := (iff #629 #288)
#643 := (or #649 #648)
#293 := (or #645 #643)
#631 := (iff #293 #288)
#632 := [rewrite]: #631
#294 := (iff #629 #293)
#644 := (iff #646 #643)
#652 := (or #648 #649)
#303 := (iff #652 #643)
#308 := [rewrite]: #303
#647 := (iff #646 #652)
#650 := (iff #331 #649)
#316 := (iff #330 #642)
#317 := [rewrite]: #316
#651 := [monotonicity #317]: #650
#305 := (iff #311 #648)
#435 := [rewrite]: #305
#653 := [monotonicity #435 #651]: #647
#304 := [trans #653 #308]: #644
#295 := [monotonicity #304]: #294
#634 := [trans #295 #632]: #633
#292 := [quant-inst]: #629
#635 := [mp #292 #634]: #288
#617 := [unit-resolution #635 #668 #339]: #649
#22 := (= #17 0::int)
#123 := (or #22 #75)
#669 := (forall (vars (?v0 int)) (:pat #662) #123)
#128 := (forall (vars (?v0 int)) #123)
#672 := (iff #128 #669)
#670 := (iff #123 #123)
#671 := [refl]: #670
#673 := [quant-intro #671]: #672
#172 := (~ #128 #128)
#184 := (~ #123 #123)
#185 := [refl]: #184
#173 := [nnf-pos #185]: #172
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#131 := (iff #24 #128)
#94 := (= 0::int #17)
#100 := (not #21)
#101 := (or #100 #94)
#106 := (forall (vars (?v0 int)) #101)
#129 := (iff #106 #128)
#126 := (iff #101 #123)
#120 := (or #75 #22)
#124 := (iff #120 #123)
#125 := [rewrite]: #124
#121 := (iff #101 #120)
#118 := (iff #94 #22)
#119 := [rewrite]: #118
#116 := (iff #100 #75)
#111 := (not #76)
#114 := (iff #111 #75)
#115 := [rewrite]: #114
#112 := (iff #100 #111)
#109 := (iff #21 #76)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#117 := [trans #113 #115]: #116
#122 := [monotonicity #117 #119]: #121
#127 := [trans #122 #125]: #126
#130 := [quant-intro #127]: #129
#107 := (iff #24 #106)
#104 := (iff #23 #101)
#97 := (implies #21 #94)
#102 := (iff #97 #101)
#103 := [rewrite]: #102
#98 := (iff #23 #97)
#95 := (iff #22 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#105 := [trans #99 #103]: #104
#108 := [quant-intro #105]: #107
#132 := [trans #108 #130]: #131
#93 := [asserted]: #24
#133 := [mp #93 #132]: #128
#186 := [mp~ #133 #173]: #128
#674 := [mp #186 #673]: #669
#640 := (not #669)
#638 := (or #640 #274 #642)
#637 := (or #274 #330)
#641 := (or #640 #637)
#247 := (iff #641 #638)
#639 := (or #274 #642)
#628 := (or #640 #639)
#352 := (iff #628 #638)
#353 := [rewrite]: #352
#350 := (iff #641 #628)
#279 := (iff #637 #639)
#280 := [monotonicity #317]: #279
#351 := [monotonicity #280]: #350
#623 := [trans #351 #353]: #247
#627 := [quant-inst]: #641
#624 := [mp #627 #623]: #638
#618 := [unit-resolution #624 #674 #617]: #274
#333 := (not #274)
#615 := (or #333 #347)
#619 := [th-lemma]: #615
#616 := [unit-resolution #619 #618]: #347
[th-lemma #617 #616 #166]: false
unsat
38d6568bcb3518204f41c136744fc9a94ac2289f 73 0
#2 := false
decl f3 :: (-> S1 S1)
decl f4 :: S1
#12 := f4
#13 := (f3 f4)
decl f1 :: S1
#4 := f1
#42 := (= f1 #13)
#73 := (not #42)
#45 := (= f1 f4)
#8 := (:var 0 S1)
#9 := (f3 #8)
#36 := (= f1 #9)
#39 := (forall (vars (?v0 S1)) #36)
#54 := (not #39)
#63 := (or #54 #42 #45)
#66 := (not #63)
#15 := (= f4 f1)
#14 := (= #13 f1)
#16 := (or #14 #15)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S1)) #10)
#17 := (implies #11 #16)
#18 := (not #17)
#69 := (iff #18 #66)
#48 := (or #42 #45)
#55 := (or #54 #48)
#60 := (not #55)
#67 := (iff #60 #66)
#64 := (iff #55 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#61 := (iff #18 #60)
#58 := (iff #17 #55)
#51 := (implies #39 #48)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #17 #51)
#49 := (iff #16 #48)
#46 := (iff #15 #45)
#47 := [rewrite]: #46
#43 := (iff #14 #42)
#44 := [rewrite]: #43
#50 := [monotonicity #44 #47]: #49
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#41 := [quant-intro #38]: #40
#53 := [monotonicity #41 #50]: #52
#59 := [trans #53 #57]: #58
#62 := [monotonicity #59]: #61
#70 := [trans #62 #68]: #69
#35 := [asserted]: #18
#71 := [mp #35 #70]: #66
#74 := [not-or-elim #71]: #73
#560 := (pattern #9)
#561 := (forall (vars (?v0 S1)) (:pat #560) #36)
#564 := (iff #39 #561)
#562 := (iff #36 #36)
#563 := [refl]: #562
#565 := [quant-intro #563]: #564
#88 := (~ #39 #39)
#86 := (~ #36 #36)
#87 := [refl]: #86
#89 := [nnf-pos #87]: #88
#72 := [not-or-elim #71]: #39
#79 := [mp~ #72 #89]: #39
#566 := [mp #79 #565]: #561
#145 := (not #561)
#232 := (or #145 #42)
#146 := [quant-inst]: #232
[unit-resolution #146 #566 #74]: false
unsat
efee40d670c214f978e2ecbd05f202f54d2c08ae 106 0
#2 := false
decl f3 :: (-> S2 S2 S1)
decl ?v0!0 :: S2
#72 := ?v0!0
#83 := (f3 ?v0!0 ?v0!0)
decl f1 :: S1
#4 := f1
#75 := (= f1 #83)
#76 := (not #75)
#9 := (:var 0 S2)
#16 := (f3 #9 #9)
#50 := (= f1 #16)
#53 := (forall (vars (?v0 S2)) #50)
#69 := (not #53)
#84 := (~ #69 #76)
#85 := [sk]: #84
#8 := (:var 1 S2)
#12 := (f3 #9 #8)
#41 := (= f1 #12)
#10 := (f3 #8 #9)
#38 := (= f1 #10)
#44 := (and #38 #41)
#47 := (forall (vars (?v0 S2) (?v1 S2)) #44)
#59 := (not #47)
#60 := (or #59 #53)
#65 := (not #60)
#17 := (= #16 f1)
#18 := (forall (vars (?v0 S2)) #17)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (and #11 #13)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#19 := (implies #15 #18)
#20 := (not #19)
#66 := (iff #20 #65)
#63 := (iff #19 #60)
#56 := (implies #47 #53)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #19 #56)
#54 := (iff #18 #53)
#51 := (iff #17 #50)
#52 := [rewrite]: #51
#55 := [quant-intro #52]: #54
#48 := (iff #15 #47)
#45 := (iff #14 #44)
#42 := (iff #13 #41)
#43 := [rewrite]: #42
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#46 := [monotonicity #40 #43]: #45
#49 := [quant-intro #46]: #48
#58 := [monotonicity #49 #55]: #57
#64 := [trans #58 #62]: #63
#67 := [monotonicity #64]: #66
#37 := [asserted]: #20
#70 := [mp #37 #67]: #65
#71 := [not-or-elim #70]: #69
#88 := [mp~ #71 #85]: #76
#577 := (pattern #12)
#576 := (pattern #10)
#87 := (not #41)
#86 := (not #38)
#89 := (or #86 #87)
#90 := (not #89)
#578 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #576 #577) #90)
#93 := (forall (vars (?v0 S2) (?v1 S2)) #90)
#581 := (iff #93 #578)
#579 := (iff #90 #90)
#580 := [refl]: #579
#582 := [quant-intro #580]: #581
#94 := (iff #47 #93)
#91 := (iff #44 #90)
#92 := [rewrite]: #91
#95 := [quant-intro #92]: #94
#81 := (~ #47 #47)
#79 := (~ #44 #44)
#80 := [refl]: #79
#82 := [nnf-pos #80]: #81
#68 := [not-or-elim #70]: #47
#74 := [mp~ #68 #82]: #47
#96 := [mp #74 #95]: #93
#583 := [mp #96 #582]: #578
#250 := (not #578)
#254 := (or #250 #75)
#160 := (or #76 #76)
#247 := (not #160)
#233 := (or #250 #247)
#570 := (iff #233 #254)
#357 := (iff #254 #254)
#564 := [rewrite]: #357
#180 := (iff #247 #75)
#162 := (not #76)
#251 := (iff #162 #75)
#252 := [rewrite]: #251
#249 := (iff #247 #162)
#161 := (iff #160 #76)
#248 := [rewrite]: #161
#240 := [monotonicity #248]: #249
#253 := [trans #240 #252]: #180
#227 := [monotonicity #253]: #570
#238 := [trans #227 #564]: #570
#568 := [quant-inst]: #233
#239 := [mp #568 #238]: #254
[unit-resolution #239 #583 #88]: false
unsat
592c5fbbffdc88780deea852b5e3007b86266cec 428 0
#2 := false
decl f4 :: (-> S2 int)
decl f6 :: S2
#30 := f6
#31 := (f4 f6)
#27 := 1::int
#146 := (+ 1::int #31)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#140 := (+ 1::int #26)
#443 := (= #140 #146)
#422 := (not #443)
decl f3 :: (-> int S2)
#149 := (f3 #146)
#143 := (f3 #140)
#152 := (= #143 #149)
#419 := [hypothesis]: #443
#420 := [monotonicity #419]: #152
#237 := (not #152)
#35 := (= f5 f6)
#644 := (f3 #31)
#463 := (= #644 f6)
#646 := (= f6 #644)
#8 := (:var 0 S2)
#9 := (f4 #8)
#652 := (pattern #9)
#10 := (f3 #9)
#55 := (= #8 #10)
#653 := (forall (vars (?v0 S2)) (:pat #652) #55)
#58 := (forall (vars (?v0 S2)) #55)
#654 := (iff #58 #653)
#656 := (iff #653 #653)
#657 := [rewrite]: #656
#655 := [rewrite]: #654
#658 := [trans #655 #657]: #654
#177 := (~ #58 #58)
#175 := (~ #55 #55)
#176 := [refl]: #175
#178 := [nnf-pos #176]: #177
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#59 := (iff #12 #58)
#56 := (iff #11 #55)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#54 := [asserted]: #12
#63 := [mp #54 #60]: #58
#166 := [mp~ #63 #178]: #58
#659 := [mp #166 #658]: #653
#302 := (not #653)
#647 := (or #302 #646)
#648 := [quant-inst]: #647
#548 := [unit-resolution #648 #659]: #646
#464 := [symm #548]: #463
#465 := (= f5 #644)
#329 := (f3 #26)
#461 := (= #329 #644)
#458 := (= #26 #31)
#651 := -1::int
#649 := (f4 #143)
#641 := (* -1::int #649)
#300 := (+ #26 #641)
#639 := (<= #300 -1::int)
#305 := (= #300 -1::int)
#643 := (>= #26 -1::int)
#13 := 0::int
#626 := (= #649 0::int)
#516 := (not #626)
#330 := (f4 #149)
#593 := (= #330 0::int)
#505 := (not #593)
#496 := (iff #505 #516)
#515 := (iff #593 #626)
#513 := (iff #626 #593)
#509 := (= #649 #330)
#36 := (not #35)
#535 := [hypothesis]: #36
#328 := (or #35 #152)
#158 := (iff #36 #152)
#32 := (+ #31 1::int)
#33 := (f3 #32)
#28 := (+ #26 1::int)
#29 := (f3 #28)
#34 := (= #29 #33)
#37 := (iff #34 #36)
#161 := (iff #37 #158)
#155 := (iff #152 #36)
#159 := (iff #155 #158)
#160 := [rewrite]: #159
#156 := (iff #37 #155)
#153 := (iff #34 #152)
#150 := (= #33 #149)
#147 := (= #32 #146)
#148 := [rewrite]: #147
#151 := [monotonicity #148]: #150
#144 := (= #29 #143)
#141 := (= #28 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#154 := [monotonicity #145 #151]: #153
#157 := [monotonicity #154]: #156
#162 := [trans #157 #160]: #161
#139 := [asserted]: #37
#165 := [mp #139 #162]: #158
#322 := (not #158)
#326 := (or #35 #152 #322)
#327 := [def-axiom]: #326
#325 := [unit-resolution #327 #165]: #328
#508 := [unit-resolution #325 #535]: #152
#510 := [monotonicity #508]: #509
#514 := [monotonicity #510]: #513
#511 := [symm #514]: #515
#442 := [monotonicity #511]: #496
#490 := (<= #330 0::int)
#526 := (not #490)
#572 := (>= #31 0::int)
#542 := (= #31 0::int)
#566 := (f4 #644)
#573 := (= #566 0::int)
#544 := (not #572)
#545 := [hypothesis]: #544
#558 := (or #572 #573)
#14 := (:var 0 int)
#16 := (f3 #14)
#660 := (pattern #16)
#80 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#128 := (or #22 #80)
#667 := (forall (vars (?v0 int)) (:pat #660) #128)
#133 := (forall (vars (?v0 int)) #128)
#670 := (iff #133 #667)
#668 := (iff #128 #128)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#169 := (~ #133 #133)
#181 := (~ #128 #128)
#182 := [refl]: #181
#170 := [nnf-pos #182]: #169
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#136 := (iff #24 #133)
#99 := (= 0::int #17)
#105 := (not #21)
#106 := (or #105 #99)
#111 := (forall (vars (?v0 int)) #106)
#134 := (iff #111 #133)
#131 := (iff #106 #128)
#125 := (or #80 #22)
#129 := (iff #125 #128)
#130 := [rewrite]: #129
#126 := (iff #106 #125)
#123 := (iff #99 #22)
#124 := [rewrite]: #123
#121 := (iff #105 #80)
#81 := (not #80)
#116 := (not #81)
#119 := (iff #116 #80)
#120 := [rewrite]: #119
#117 := (iff #105 #116)
#114 := (iff #21 #81)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#122 := [trans #118 #120]: #121
#127 := [monotonicity #122 #124]: #126
#132 := [trans #127 #130]: #131
#135 := [quant-intro #132]: #134
#112 := (iff #24 #111)
#109 := (iff #23 #106)
#102 := (implies #21 #99)
#107 := (iff #102 #106)
#108 := [rewrite]: #107
#103 := (iff #23 #102)
#100 := (iff #22 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#110 := [trans #104 #108]: #109
#113 := [quant-intro #110]: #112
#137 := [trans #113 #135]: #136
#98 := [asserted]: #24
#138 := [mp #98 #137]: #133
#183 := [mp~ #138 #170]: #133
#672 := [mp #183 #671]: #667
#351 := (not #667)
#562 := (or #351 #572 #573)
#557 := (or #573 #572)
#563 := (or #351 #557)
#555 := (iff #563 #562)
#564 := (or #351 #558)
#553 := (iff #564 #562)
#554 := [rewrite]: #553
#550 := (iff #563 #564)
#560 := (iff #557 #558)
#561 := [rewrite]: #560
#551 := [monotonicity #561]: #550
#552 := [trans #551 #554]: #555
#559 := [quant-inst]: #563
#556 := [mp #559 #552]: #562
#546 := [unit-resolution #556 #672]: #558
#547 := [unit-resolution #546 #545]: #573
#538 := (= #31 #566)
#549 := [monotonicity #548]: #538
#527 := [trans #549 #547]: #542
#528 := (not #542)
#530 := (or #528 #572)
#531 := [th-lemma]: #530
#532 := [unit-resolution #531 #545 #527]: false
#533 := [lemma #532]: #572
#614 := (* -1::int #330)
#618 := (+ #31 #614)
#592 := (<= #618 -1::int)
#607 := (= #618 -1::int)
#604 := (>= #31 -1::int)
#521 := (or #544 #604)
#517 := [th-lemma]: #521
#518 := [unit-resolution #517 #533]: #604
#611 := (not #604)
#597 := (or #611 #607)
#62 := (= #14 #17)
#87 := (or #62 #81)
#661 := (forall (vars (?v0 int)) (:pat #660) #87)
#92 := (forall (vars (?v0 int)) #87)
#664 := (iff #92 #661)
#662 := (iff #87 #87)
#663 := [refl]: #662
#665 := [quant-intro #663]: #664
#167 := (~ #92 #92)
#163 := (~ #87 #87)
#179 := [refl]: #163
#168 := [nnf-pos #179]: #167
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#95 := (iff #20 #92)
#69 := (not #15)
#70 := (or #69 #62)
#75 := (forall (vars (?v0 int)) #70)
#93 := (iff #75 #92)
#90 := (iff #70 #87)
#84 := (or #81 #62)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #70 #84)
#82 := (iff #69 #81)
#78 := (iff #15 #80)
#79 := [rewrite]: #78
#83 := [monotonicity #79]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [quant-intro #91]: #93
#76 := (iff #20 #75)
#73 := (iff #19 #70)
#66 := (implies #15 #62)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #19 #66)
#64 := (iff #18 #62)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#74 := [trans #68 #72]: #73
#77 := [quant-intro #74]: #76
#96 := [trans #77 #94]: #95
#61 := [asserted]: #20
#97 := [mp #61 #96]: #92
#180 := [mp~ #97 #168]: #92
#666 := [mp #180 #665]: #661
#631 := (not #661)
#595 := (or #631 #611 #607)
#615 := (>= #146 0::int)
#616 := (not #615)
#613 := (= #146 #330)
#617 := (or #613 #616)
#601 := (or #631 #617)
#588 := (iff #601 #595)
#596 := (or #631 #597)
#434 := (iff #596 #595)
#435 := [rewrite]: #434
#603 := (iff #601 #596)
#600 := (iff #617 #597)
#453 := (or #607 #611)
#598 := (iff #453 #597)
#599 := [rewrite]: #598
#454 := (iff #617 #453)
#606 := (iff #616 #611)
#605 := (iff #615 #604)
#610 := [rewrite]: #605
#612 := [monotonicity #610]: #606
#608 := (iff #613 #607)
#609 := [rewrite]: #608
#455 := [monotonicity #609 #612]: #454
#594 := [trans #455 #599]: #600
#432 := [monotonicity #594]: #603
#589 := [trans #432 #435]: #588
#602 := [quant-inst]: #601
#591 := [mp #602 #589]: #595
#519 := [unit-resolution #591 #666]: #597
#522 := [unit-resolution #519 #518]: #607
#523 := (not #607)
#524 := (or #523 #592)
#525 := [th-lemma]: #524
#520 := [unit-resolution #525 #522]: #592
#499 := (not #592)
#500 := (or #526 #544 #499)
#501 := [th-lemma]: #500
#394 := [unit-resolution #501 #520 #533]: #526
#506 := (or #505 #490)
#507 := [th-lemma]: #506
#512 := [unit-resolution #507 #394]: #505
#497 := [mp #512 #442]: #516
#348 := (or #626 #643)
#244 := (or #351 #626 #643)
#313 := (>= #140 0::int)
#333 := (or #626 #313)
#621 := (or #351 #333)
#624 := (iff #621 #244)
#344 := (or #351 #348)
#623 := (iff #344 #244)
#620 := [rewrite]: #623
#345 := (iff #621 #344)
#349 := (iff #333 #348)
#285 := (iff #313 #643)
#627 := [rewrite]: #285
#350 := [monotonicity #627]: #349
#619 := [monotonicity #350]: #345
#334 := [trans #619 #620]: #624
#622 := [quant-inst]: #621
#335 := [mp #622 #334]: #244
#478 := [unit-resolution #335 #672]: #348
#502 := [unit-resolution #478 #497]: #643
#289 := (not #643)
#292 := (or #305 #289)
#632 := (or #631 #305 #289)
#314 := (not #313)
#650 := (= #140 #649)
#645 := (or #650 #314)
#633 := (or #631 #645)
#277 := (iff #633 #632)
#634 := (or #631 #292)
#637 := (iff #634 #632)
#276 := [rewrite]: #637
#271 := (iff #633 #634)
#629 := (iff #645 #292)
#290 := (iff #314 #289)
#291 := [monotonicity #627]: #290
#642 := (iff #650 #305)
#301 := [rewrite]: #642
#630 := [monotonicity #301 #291]: #629
#635 := [monotonicity #630]: #271
#638 := [trans #635 #276]: #277
#628 := [quant-inst]: #633
#636 := [mp #628 #638]: #632
#503 := [unit-resolution #636 #666]: #292
#498 := [unit-resolution #503 #502]: #305
#504 := (not #305)
#472 := (or #504 #639)
#479 := [th-lemma]: #472
#438 := [unit-resolution #479 #498]: #639
#625 := (>= #300 -1::int)
#469 := (or #504 #625)
#471 := [th-lemma]: #469
#473 := [unit-resolution #471 #498]: #625
#590 := (>= #618 -1::int)
#480 := (or #523 #590)
#482 := [th-lemma]: #480
#483 := [unit-resolution #482 #522]: #590
#540 := (+ #330 #641)
#534 := (<= #540 0::int)
#539 := (= #330 #649)
#484 := [symm #510]: #539
#494 := (not #539)
#474 := (or #494 #534)
#495 := [th-lemma]: #474
#450 := [unit-resolution #495 #484]: #534
#529 := (>= #540 0::int)
#451 := (or #494 #529)
#456 := [th-lemma]: #451
#457 := [unit-resolution #456 #484]: #529
#459 := [th-lemma #457 #450 #483 #520 #473 #438]: #458
#462 := [monotonicity #459]: #461
#308 := (= f5 #329)
#433 := (or #302 #308)
#640 := [quant-inst]: #433
#460 := [unit-resolution #640 #659]: #308
#466 := [trans #460 #462]: #465
#467 := [trans #466 #464]: #35
#452 := [unit-resolution #535 #467]: false
#468 := [lemma #452]: #35
#324 := (or #36 #237)
#238 := (or #36 #237 #322)
#323 := [def-axiom]: #238
#315 := [unit-resolution #323 #165]: #324
#449 := [unit-resolution #315 #468]: #237
#421 := [unit-resolution #449 #420]: false
#424 := [lemma #421]: #422
#444 := (* -1::int #146)
#447 := (+ #140 #444)
#448 := (<= #447 0::int)
#429 := (* -1::int #31)
#430 := (+ #26 #429)
#437 := (<= #430 0::int)
#425 := [monotonicity #468]: #458
#426 := (not #458)
#268 := (or #426 #437)
#427 := [th-lemma]: #268
#423 := [unit-resolution #427 #425]: #437
#428 := (not #437)
#407 := (or #448 #428)
#410 := [th-lemma]: #407
#414 := [unit-resolution #410 #423]: #448
#431 := (>= #447 0::int)
#439 := (>= #430 0::int)
#416 := (or #426 #439)
#417 := [th-lemma]: #416
#415 := [unit-resolution #417 #425]: #439
#418 := (not #439)
#406 := (or #431 #418)
#409 := [th-lemma]: #406
#411 := [unit-resolution #409 #415]: #431
#408 := (not #431)
#412 := (not #448)
#413 := (or #443 #412 #408)
#403 := [th-lemma]: #413
#393 := [unit-resolution #403 #411 #414]: #443
[unit-resolution #393 #424]: false
unsat
8ef67dc17184cdb997c34c282ec976aab91f0c9d 66 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#37 := (= f1 f4)
decl f3 :: S1
#8 := f3
#34 := (= f1 f3)
#40 := (or #34 #37)
#84 := (iff #40 false)
#79 := (or false false)
#82 := (iff #79 false)
#83 := [rewrite]: #82
#80 := (iff #40 #79)
#75 := (iff #37 false)
#66 := (not #37)
#43 := (not #34)
#49 := (and #43 #40)
#57 := (not #49)
#58 := (or #37 #57)
#63 := (not #58)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (not #9)
#12 := (or #9 #11)
#14 := (and #12 #13)
#15 := (implies #14 #11)
#16 := (not #15)
#64 := (iff #16 #63)
#61 := (iff #15 #58)
#54 := (implies #49 #37)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #15 #54)
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#52 := (iff #14 #49)
#46 := (and #40 #43)
#50 := (iff #46 #49)
#51 := [rewrite]: #50
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#45 := [monotonicity #36]: #44
#41 := (iff #12 #40)
#42 := [monotonicity #36 #39]: #41
#48 := [monotonicity #42 #45]: #47
#53 := [trans #48 #51]: #52
#56 := [monotonicity #53 #39]: #55
#62 := [trans #56 #60]: #61
#65 := [monotonicity #62]: #64
#33 := [asserted]: #16
#68 := [mp #33 #65]: #63
#67 := [not-or-elim #68]: #66
#76 := [iff-false #67]: #75
#77 := (iff #34 false)
#69 := [not-or-elim #68]: #49
#70 := [and-elim #69]: #43
#78 := [iff-false #70]: #77
#81 := [monotonicity #78 #76]: #80
#85 := [trans #81 #83]: #84
#71 := [and-elim #69]: #40
[mp #71 #85]: false
unsat
850ee68a24d436c0e8f0323d0c7b40aadee077ac 59 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
#17 := (and #14 #16)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and #9 #11)
#18 := (or #12 #17)
#19 := (implies #18 #18)
#20 := (not #19)
#71 := (iff #20 false)
#1 := true
#66 := (not true)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #20 #66)
#64 := (iff #19 true)
#50 := (= f1 f6)
#47 := (= f1 f5)
#53 := (and #47 #50)
#41 := (= f1 f4)
#38 := (= f1 f3)
#44 := (and #38 #41)
#56 := (or #44 #53)
#59 := (implies #56 #56)
#62 := (iff #59 true)
#63 := [rewrite]: #62
#60 := (iff #19 #59)
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#51 := (iff #16 #50)
#52 := [rewrite]: #51
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#55 := [monotonicity #49 #52]: #54
#45 := (iff #12 #44)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#46 := [monotonicity #40 #43]: #45
#58 := [monotonicity #46 #55]: #57
#61 := [monotonicity #58 #58]: #60
#65 := [trans #61 #63]: #64
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#37 := [asserted]: #20
[mp #37 #72]: false
unsat
ed4c7cfe878e23843083428f8a6f715fbfe495d3 409 0
#2 := false
#181 := -1::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#29 := (+ #26 #28)
#30 := 1::int
#145 := (+ 1::int #29)
#148 := (f3 #145)
#151 := (f4 #148)
#676 := (* -1::int #151)
#336 := (+ #28 #676)
#341 := (+ #26 #336)
#280 := (>= #341 -1::int)
#426 := (not #280)
#163 := (+ 1::int #28)
#166 := (f3 #163)
#169 := (f4 #166)
#185 := (* -1::int #169)
#602 := (+ #28 #185)
#574 := (<= #602 -1::int)
#612 := (= #602 -1::int)
#610 := (>= #28 -1::int)
#13 := 0::int
#554 := (>= #28 0::int)
#479 := (= #28 0::int)
#274 := (f3 #28)
#557 := (f4 #274)
#535 := (= #557 0::int)
#462 := (not #554)
#458 := [hypothesis]: #462
#536 := (or #535 #554)
#14 := (:var 0 int)
#16 := (f3 #14)
#695 := (pattern #16)
#85 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#133 := (or #22 #85)
#702 := (forall (vars (?v0 int)) (:pat #695) #133)
#138 := (forall (vars (?v0 int)) #133)
#705 := (iff #138 #702)
#703 := (iff #133 #133)
#704 := [refl]: #703
#706 := [quant-intro #704]: #705
#205 := (~ #138 #138)
#217 := (~ #133 #133)
#218 := [refl]: #217
#206 := [nnf-pos #218]: #205
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#141 := (iff #24 #138)
#104 := (= 0::int #17)
#110 := (not #21)
#111 := (or #110 #104)
#116 := (forall (vars (?v0 int)) #111)
#139 := (iff #116 #138)
#136 := (iff #111 #133)
#130 := (or #85 #22)
#134 := (iff #130 #133)
#135 := [rewrite]: #134
#131 := (iff #111 #130)
#128 := (iff #104 #22)
#129 := [rewrite]: #128
#126 := (iff #110 #85)
#86 := (not #85)
#121 := (not #86)
#124 := (iff #121 #85)
#125 := [rewrite]: #124
#122 := (iff #110 #121)
#119 := (iff #21 #86)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#132 := [monotonicity #127 #129]: #131
#137 := [trans #132 #135]: #136
#140 := [quant-intro #137]: #139
#117 := (iff #24 #116)
#114 := (iff #23 #111)
#107 := (implies #21 #104)
#112 := (iff #107 #111)
#113 := [rewrite]: #112
#108 := (iff #23 #107)
#105 := (iff #22 #104)
#106 := [rewrite]: #105
#109 := [monotonicity #106]: #108
#115 := [trans #109 #113]: #114
#118 := [quant-intro #115]: #117
#142 := [trans #118 #140]: #141
#103 := [asserted]: #24
#143 := [mp #103 #142]: #138
#219 := [mp~ #143 #206]: #138
#707 := [mp #219 #706]: #702
#371 := (not #702)
#541 := (or #371 #535 #554)
#542 := (or #371 #536)
#543 := (iff #542 #541)
#544 := [rewrite]: #543
#547 := [quant-inst]: #542
#545 := [mp #547 #544]: #541
#463 := [unit-resolution #545 #707]: #536
#442 := [unit-resolution #463 #458]: #535
#449 := (= #28 #557)
#359 := (= f6 #274)
#8 := (:var 0 S2)
#9 := (f4 #8)
#687 := (pattern #9)
#10 := (f3 #9)
#60 := (= #8 #10)
#688 := (forall (vars (?v0 S2)) (:pat #687) #60)
#63 := (forall (vars (?v0 S2)) #60)
#689 := (iff #63 #688)
#691 := (iff #688 #688)
#692 := [rewrite]: #691
#690 := [rewrite]: #689
#693 := [trans #690 #692]: #689
#213 := (~ #63 #63)
#211 := (~ #60 #60)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#64 := (iff #12 #63)
#61 := (iff #11 #60)
#62 := [rewrite]: #61
#65 := [quant-intro #62]: #64
#59 := [asserted]: #12
#68 := [mp #59 #65]: #63
#202 := [mp~ #68 #214]: #63
#694 := [mp #202 #693]: #688
#360 := (not #688)
#361 := (or #360 #359)
#365 := [quant-inst]: #361
#445 := [unit-resolution #365 #694]: #359
#451 := [monotonicity #445]: #449
#452 := [trans #451 #442]: #479
#450 := (not #479)
#453 := (or #450 #554)
#441 := [th-lemma]: #453
#444 := [unit-resolution #441 #458 #452]: false
#446 := [lemma #444]: #554
#304 := (or #462 #610)
#447 := [th-lemma]: #304
#443 := [unit-resolution #447 #446]: #610
#605 := (not #610)
#593 := (or #605 #612)
#67 := (= #14 #17)
#92 := (or #67 #86)
#696 := (forall (vars (?v0 int)) (:pat #695) #92)
#97 := (forall (vars (?v0 int)) #92)
#699 := (iff #97 #696)
#697 := (iff #92 #92)
#698 := [refl]: #697
#700 := [quant-intro #698]: #699
#203 := (~ #97 #97)
#200 := (~ #92 #92)
#215 := [refl]: #200
#204 := [nnf-pos #215]: #203
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#100 := (iff #20 #97)
#74 := (not #15)
#75 := (or #74 #67)
#80 := (forall (vars (?v0 int)) #75)
#98 := (iff #80 #97)
#95 := (iff #75 #92)
#89 := (or #86 #67)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #75 #89)
#87 := (iff #74 #86)
#83 := (iff #15 #85)
#84 := [rewrite]: #83
#88 := [monotonicity #84]: #87
#91 := [monotonicity #88]: #90
#96 := [trans #91 #94]: #95
#99 := [quant-intro #96]: #98
#81 := (iff #20 #80)
#78 := (iff #19 #75)
#71 := (implies #15 #67)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #19 #71)
#69 := (iff #18 #67)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#79 := [trans #73 #77]: #78
#82 := [quant-intro #79]: #81
#101 := [trans #82 #99]: #100
#66 := [asserted]: #20
#102 := [mp #66 #101]: #97
#216 := [mp~ #102 #204]: #97
#701 := [mp #216 #700]: #696
#670 := (not #696)
#594 := (or #670 #605 #612)
#609 := (>= #163 0::int)
#611 := (not #609)
#603 := (= #163 #169)
#600 := (or #603 #611)
#599 := (or #670 #600)
#591 := (iff #599 #594)
#586 := (or #670 #593)
#590 := (iff #586 #594)
#587 := [rewrite]: #590
#588 := (iff #599 #586)
#597 := (iff #600 #593)
#601 := (or #612 #605)
#595 := (iff #601 #593)
#596 := [rewrite]: #595
#608 := (iff #600 #601)
#606 := (iff #611 #605)
#615 := (iff #609 #610)
#604 := [rewrite]: #615
#607 := [monotonicity #604]: #606
#613 := (iff #603 #612)
#614 := [rewrite]: #613
#592 := [monotonicity #614 #607]: #608
#598 := [trans #592 #596]: #597
#589 := [monotonicity #598]: #588
#571 := [trans #589 #587]: #591
#585 := [quant-inst]: #599
#572 := [mp #585 #571]: #594
#448 := [unit-resolution #572 #701]: #593
#438 := [unit-resolution #448 #443]: #612
#428 := (not #612)
#430 := (or #428 #574)
#431 := [th-lemma]: #430
#434 := [unit-resolution #431 #438]: #574
#154 := (+ 1::int #26)
#157 := (f3 #154)
#160 := (f4 #157)
#184 := (* -1::int #160)
#488 := (+ #26 #184)
#512 := (<= #488 -1::int)
#489 := (= #488 -1::int)
#633 := (>= #26 -1::int)
#570 := (>= #26 0::int)
#478 := (= #26 0::int)
#273 := (f3 #26)
#556 := (f4 #273)
#552 := (= #556 0::int)
#480 := (not #570)
#481 := [hypothesis]: #480
#553 := (or #552 #570)
#558 := (or #371 #552 #570)
#559 := (or #371 #553)
#555 := (iff #559 #558)
#561 := [rewrite]: #555
#560 := [quant-inst]: #559
#534 := [mp #560 #561]: #558
#482 := [unit-resolution #534 #707]: #553
#483 := [unit-resolution #482 #481]: #552
#484 := (= #26 #556)
#358 := (= f5 #273)
#351 := (or #360 #358)
#362 := [quant-inst]: #351
#466 := [unit-resolution #362 #694]: #358
#454 := [monotonicity #466]: #484
#455 := [trans #454 #483]: #478
#456 := (not #478)
#457 := (or #456 #570)
#459 := [th-lemma]: #457
#460 := [unit-resolution #459 #481 #455]: false
#461 := [lemma #460]: #570
#435 := (or #480 #633)
#439 := [th-lemma]: #435
#432 := [unit-resolution #439 #461]: #633
#629 := (not #633)
#637 := (or #489 #629)
#467 := (or #670 #489 #629)
#645 := (>= #154 0::int)
#646 := (not #645)
#641 := (= #154 #160)
#647 := (or #641 #646)
#469 := (or #670 #647)
#628 := (iff #469 #467)
#623 := (or #670 #637)
#627 := (iff #623 #467)
#625 := [rewrite]: #627
#624 := (iff #469 #623)
#631 := (iff #647 #637)
#630 := (iff #646 #629)
#634 := (iff #645 #633)
#635 := [rewrite]: #634
#636 := [monotonicity #635]: #630
#490 := (iff #641 #489)
#632 := [rewrite]: #490
#638 := [monotonicity #632 #636]: #631
#626 := [monotonicity #638]: #624
#510 := [trans #626 #625]: #628
#470 := [quant-inst]: #469
#511 := [mp #470 #510]: #467
#440 := [unit-resolution #511 #701]: #637
#433 := [unit-resolution #440 #432]: #489
#436 := (not #489)
#437 := (or #436 #512)
#423 := [th-lemma]: #437
#425 := [unit-resolution #423 #433]: #512
#186 := (+ #184 #185)
#187 := (+ #151 #186)
#183 := (>= #187 0::int)
#37 := (+ #28 1::int)
#38 := (f3 #37)
#39 := (f4 #38)
#34 := (+ #26 1::int)
#35 := (f3 #34)
#36 := (f4 #35)
#40 := (+ #36 #39)
#31 := (+ #29 1::int)
#32 := (f3 #31)
#33 := (f4 #32)
#41 := (< #33 #40)
#42 := (not #41)
#197 := (iff #42 #183)
#172 := (+ #160 #169)
#175 := (< #151 #172)
#178 := (not #175)
#195 := (iff #178 #183)
#182 := (not #183)
#190 := (not #182)
#193 := (iff #190 #183)
#194 := [rewrite]: #193
#191 := (iff #178 #190)
#188 := (iff #175 #182)
#189 := [rewrite]: #188
#192 := [monotonicity #189]: #191
#196 := [trans #192 #194]: #195
#179 := (iff #42 #178)
#176 := (iff #41 #175)
#173 := (= #40 #172)
#170 := (= #39 #169)
#167 := (= #38 #166)
#164 := (= #37 #163)
#165 := [rewrite]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#161 := (= #36 #160)
#158 := (= #35 #157)
#155 := (= #34 #154)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#174 := [monotonicity #162 #171]: #173
#152 := (= #33 #151)
#149 := (= #32 #148)
#146 := (= #31 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#153 := [monotonicity #150]: #152
#177 := [monotonicity #153 #174]: #176
#180 := [monotonicity #177]: #179
#198 := [trans #180 #196]: #197
#144 := [asserted]: #42
#199 := [mp #144 #198]: #183
#427 := (not #574)
#424 := (not #512)
#409 := (or #426 #182 #424 #427)
#411 := [th-lemma]: #409
#412 := [unit-resolution #411 #199 #425 #434]: #426
#677 := (= #341 -1::int)
#321 := (>= #29 -1::int)
#413 := (or #321 #629 #462)
#414 := [th-lemma]: #413
#415 := [unit-resolution #414 #432 #446]: #321
#326 := (not #321)
#667 := (or #326 #677)
#672 := (or #670 #326 #677)
#682 := (>= #145 0::int)
#683 := (not #682)
#680 := (= #145 #151)
#686 := (or #680 #683)
#312 := (or #670 #686)
#383 := (iff #312 #672)
#673 := (or #670 #667)
#660 := (iff #673 #672)
#661 := [rewrite]: #660
#671 := (iff #312 #673)
#669 := (iff #686 #667)
#664 := (or #677 #326)
#668 := (iff #664 #667)
#663 := [rewrite]: #668
#665 := (iff #686 #664)
#327 := (iff #683 #326)
#662 := (iff #682 #321)
#325 := [rewrite]: #662
#328 := [monotonicity #325]: #327
#337 := (iff #680 #677)
#678 := [rewrite]: #337
#666 := [monotonicity #678 #328]: #665
#307 := [trans #666 #663]: #669
#674 := [monotonicity #307]: #671
#384 := [trans #674 #661]: #383
#313 := [quant-inst]: #312
#385 := [mp #313 #384]: #672
#416 := [unit-resolution #385 #701]: #667
#417 := [unit-resolution #416 #415]: #677
#418 := (not #677)
#419 := (or #418 #280)
#420 := [th-lemma]: #419
[unit-resolution #420 #417 #412]: false
unsat
9221620b197e212b4efb9528416b5d35a8c52049 60 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#135 := (f3 #26)
#141 := (= f5 #135)
#146 := (not #141)
#13 := 0::int
#27 := (+ #26 0::int)
#28 := (f3 #27)
#29 := (= #28 f5)
#30 := (not #29)
#147 := (iff #30 #146)
#144 := (iff #29 #141)
#138 := (= #135 f5)
#142 := (iff #138 #141)
#143 := [rewrite]: #142
#139 := (iff #29 #138)
#136 := (= #28 #135)
#133 := (= #27 #26)
#134 := [rewrite]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#145 := [trans #140 #143]: #144
#148 := [monotonicity #145]: #147
#132 := [asserted]: #30
#151 := [mp #132 #148]: #146
#8 := (:var 0 S2)
#9 := (f4 #8)
#639 := (pattern #9)
#10 := (f3 #9)
#48 := (= #8 #10)
#640 := (forall (vars (?v0 S2)) (:pat #639) #48)
#51 := (forall (vars (?v0 S2)) #48)
#641 := (iff #51 #640)
#643 := (iff #640 #640)
#644 := [rewrite]: #643
#642 := [rewrite]: #641
#645 := [trans #642 #644]: #641
#163 := (~ #51 #51)
#161 := (~ #48 #48)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#52 := (iff #12 #51)
#49 := (iff #11 #48)
#50 := [rewrite]: #49
#53 := [quant-intro #50]: #52
#47 := [asserted]: #12
#56 := [mp #47 #53]: #51
#152 := [mp~ #56 #164]: #51
#646 := [mp #152 #645]: #640
#224 := (not #640)
#310 := (or #224 #141)
#311 := [quant-inst]: #310
[unit-resolution #311 #646 #151]: false
unsat
c3f498b2ca679db6f24e3361991b9cdacf7c1adc 60 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#135 := (f3 #26)
#141 := (= f5 #135)
#146 := (not #141)
#13 := 0::int
#27 := (+ 0::int #26)
#28 := (f3 #27)
#29 := (= #28 f5)
#30 := (not #29)
#147 := (iff #30 #146)
#144 := (iff #29 #141)
#138 := (= #135 f5)
#142 := (iff #138 #141)
#143 := [rewrite]: #142
#139 := (iff #29 #138)
#136 := (= #28 #135)
#133 := (= #27 #26)
#134 := [rewrite]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#145 := [trans #140 #143]: #144
#148 := [monotonicity #145]: #147
#132 := [asserted]: #30
#151 := [mp #132 #148]: #146
#8 := (:var 0 S2)
#9 := (f4 #8)
#639 := (pattern #9)
#10 := (f3 #9)
#48 := (= #8 #10)
#640 := (forall (vars (?v0 S2)) (:pat #639) #48)
#51 := (forall (vars (?v0 S2)) #48)
#641 := (iff #51 #640)
#643 := (iff #640 #640)
#644 := [rewrite]: #643
#642 := [rewrite]: #641
#645 := [trans #642 #644]: #641
#163 := (~ #51 #51)
#161 := (~ #48 #48)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#52 := (iff #12 #51)
#49 := (iff #11 #48)
#50 := [rewrite]: #49
#53 := [quant-intro #50]: #52
#47 := [asserted]: #12
#56 := [mp #47 #53]: #51
#152 := [mp~ #56 #164]: #51
#646 := [mp #152 #645]: #640
#224 := (not #640)
#310 := (or #224 #141)
#311 := [quant-inst]: #310
[unit-resolution #311 #646 #151]: false
unsat
cbe4e74b79c5e538e779d1562e52667175af768a 37 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#31 := (+ #28 #26)
#32 := (f3 #31)
#29 := (+ #26 #28)
#30 := (f3 #29)
#33 := (= #30 #32)
#34 := (not #33)
#153 := (iff #34 false)
#1 := true
#148 := (not true)
#151 := (iff #148 false)
#152 := [rewrite]: #151
#149 := (iff #34 #148)
#146 := (iff #33 true)
#141 := (= #30 #30)
#144 := (iff #141 true)
#145 := [rewrite]: #144
#142 := (iff #33 #141)
#139 := (= #32 #30)
#137 := (= #31 #29)
#138 := [rewrite]: #137
#140 := [monotonicity #138]: #139
#143 := [monotonicity #140]: #142
#147 := [trans #143 #145]: #146
#150 := [monotonicity #147]: #149
#154 := [trans #150 #152]: #153
#136 := [asserted]: #34
[mp #136 #154]: false
unsat
8ed55f0689626a8564aca25cbd530e9ad72be6f4 42 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f7 :: S2
#29 := f7
#30 := (f4 f7)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#34 := (+ #26 #28)
#35 := (+ #34 #30)
#36 := (f3 #35)
#31 := (+ #28 #30)
#32 := (+ #26 #31)
#33 := (f3 #32)
#37 := (= #33 #36)
#38 := (not #37)
#157 := (iff #38 false)
#1 := true
#152 := (not true)
#155 := (iff #152 false)
#156 := [rewrite]: #155
#153 := (iff #38 #152)
#150 := (iff #37 true)
#145 := (= #33 #33)
#148 := (iff #145 true)
#149 := [rewrite]: #148
#146 := (iff #37 #145)
#143 := (= #36 #33)
#141 := (= #35 #32)
#142 := [rewrite]: #141
#144 := [monotonicity #142]: #143
#147 := [monotonicity #144]: #146
#151 := [trans #147 #149]: #150
#154 := [monotonicity #151]: #153
#158 := [trans #154 #156]: #157
#140 := [asserted]: #38
[mp #140 #158]: false
unsat
e513816199779fdd08259cbaa721d9be6ce61ce8 438 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#625 := (f3 #26)
#577 := (f4 #625)
#575 := (= #577 0::int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#299 := (f3 #28)
#461 := (f4 #299)
#570 := (= #461 0::int)
#576 := (>= #26 0::int)
#508 := (= #26 0::int)
#463 := (not #576)
#424 := [hypothesis]: #463
#578 := (or #575 #576)
#14 := (:var 0 int)
#16 := (f3 #14)
#645 := (pattern #16)
#80 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#128 := (or #22 #80)
#652 := (forall (vars (?v0 int)) (:pat #645) #128)
#133 := (forall (vars (?v0 int)) #128)
#655 := (iff #133 #652)
#653 := (iff #128 #128)
#654 := [refl]: #653
#656 := [quant-intro #654]: #655
#153 := (~ #133 #133)
#165 := (~ #128 #128)
#166 := [refl]: #165
#154 := [nnf-pos #166]: #153
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#136 := (iff #24 #133)
#99 := (= 0::int #17)
#105 := (not #21)
#106 := (or #105 #99)
#111 := (forall (vars (?v0 int)) #106)
#134 := (iff #111 #133)
#131 := (iff #106 #128)
#125 := (or #80 #22)
#129 := (iff #125 #128)
#130 := [rewrite]: #129
#126 := (iff #106 #125)
#123 := (iff #99 #22)
#124 := [rewrite]: #123
#121 := (iff #105 #80)
#81 := (not #80)
#116 := (not #81)
#119 := (iff #116 #80)
#120 := [rewrite]: #119
#117 := (iff #105 #116)
#114 := (iff #21 #81)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#122 := [trans #118 #120]: #121
#127 := [monotonicity #122 #124]: #126
#132 := [trans #127 #130]: #131
#135 := [quant-intro #132]: #134
#112 := (iff #24 #111)
#109 := (iff #23 #106)
#102 := (implies #21 #99)
#107 := (iff #102 #106)
#108 := [rewrite]: #107
#103 := (iff #23 #102)
#100 := (iff #22 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#110 := [trans #104 #108]: #109
#113 := [quant-intro #110]: #112
#137 := [trans #113 #135]: #136
#98 := [asserted]: #24
#138 := [mp #98 #137]: #133
#167 := [mp~ #138 #154]: #133
#657 := [mp #167 #656]: #652
#336 := (not #652)
#462 := (or #336 #575 #576)
#421 := (or #336 #578)
#471 := (iff #421 #462)
#566 := [rewrite]: #471
#569 := [quant-inst]: #421
#567 := [mp #569 #566]: #462
#425 := [unit-resolution #567 #657]: #578
#426 := [unit-resolution #425 #424]: #575
#504 := (= #26 #577)
#298 := (= f5 #625)
#8 := (:var 0 S2)
#9 := (f4 #8)
#637 := (pattern #9)
#10 := (f3 #9)
#55 := (= #8 #10)
#638 := (forall (vars (?v0 S2)) (:pat #637) #55)
#58 := (forall (vars (?v0 S2)) #55)
#639 := (iff #58 #638)
#641 := (iff #638 #638)
#642 := [rewrite]: #641
#640 := [rewrite]: #639
#643 := [trans #640 #642]: #639
#161 := (~ #58 #58)
#159 := (~ #55 #55)
#160 := [refl]: #159
#162 := [nnf-pos #160]: #161
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#59 := (iff #12 #58)
#56 := (iff #11 #55)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#54 := [asserted]: #12
#63 := [mp #54 #60]: #58
#150 := [mp~ #63 #162]: #58
#644 := [mp #150 #643]: #638
#633 := (not #638)
#634 := (or #633 #298)
#635 := [quant-inst]: #634
#503 := [unit-resolution #635 #644]: #298
#507 := [monotonicity #503]: #504
#428 := [trans #507 #426]: #508
#429 := (not #508)
#430 := (or #429 #576)
#431 := [th-lemma]: #430
#432 := [unit-resolution #431 #424 #428]: false
#433 := [lemma #432]: #576
#414 := (or #463 #570)
#553 := (= #28 0::int)
#29 := (+ #26 #28)
#30 := (f3 #29)
#290 := (f4 #30)
#628 := -1::int
#270 := (* -1::int #290)
#612 := (+ #28 #270)
#274 := (+ #26 #612)
#610 := (<= #274 0::int)
#275 := (= #274 0::int)
#630 := (>= #29 0::int)
#460 := (>= #28 0::int)
#519 := (not #570)
#483 := [hypothesis]: #519
#470 := (or #460 #570)
#466 := (or #336 #460 #570)
#455 := (or #570 #460)
#474 := (or #336 #455)
#572 := (iff #474 #466)
#476 := (or #336 #470)
#571 := (iff #476 #466)
#568 := [rewrite]: #571
#477 := (iff #474 #476)
#472 := (iff #455 #470)
#473 := [rewrite]: #472
#478 := [monotonicity #473]: #477
#559 := [trans #478 #568]: #572
#475 := [quant-inst]: #474
#561 := [mp #475 #559]: #466
#489 := [unit-resolution #561 #657]: #470
#457 := [unit-resolution #489 #483]: #460
#491 := [hypothesis]: #576
#464 := (not #460)
#423 := (or #630 #463 #464)
#454 := [th-lemma]: #423
#456 := [unit-resolution #454 #491 #457]: #630
#636 := (not #630)
#614 := (or #275 #636)
#62 := (= #14 #17)
#87 := (or #62 #81)
#646 := (forall (vars (?v0 int)) (:pat #645) #87)
#92 := (forall (vars (?v0 int)) #87)
#649 := (iff #92 #646)
#647 := (iff #87 #87)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#151 := (~ #92 #92)
#147 := (~ #87 #87)
#163 := [refl]: #147
#152 := [nnf-pos #163]: #151
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#95 := (iff #20 #92)
#69 := (not #15)
#70 := (or #69 #62)
#75 := (forall (vars (?v0 int)) #70)
#93 := (iff #75 #92)
#90 := (iff #70 #87)
#84 := (or #81 #62)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #70 #84)
#82 := (iff #69 #81)
#78 := (iff #15 #80)
#79 := [rewrite]: #78
#83 := [monotonicity #79]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [quant-intro #91]: #93
#76 := (iff #20 #75)
#73 := (iff #19 #70)
#66 := (implies #15 #62)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #19 #66)
#64 := (iff #18 #62)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#74 := [trans #68 #72]: #73
#77 := [quant-intro #74]: #76
#96 := [trans #77 #94]: #95
#61 := [asserted]: #20
#97 := [mp #61 #96]: #92
#164 := [mp~ #97 #152]: #92
#651 := [mp #164 #650]: #646
#617 := (not #646)
#618 := (or #617 #275 #636)
#627 := (= #29 #290)
#286 := (or #627 #636)
#613 := (or #617 #286)
#623 := (iff #613 #618)
#256 := (or #617 #614)
#261 := (iff #256 #618)
#262 := [rewrite]: #261
#620 := (iff #613 #256)
#615 := (iff #286 #614)
#276 := (iff #627 #275)
#277 := [rewrite]: #276
#616 := [monotonicity #277]: #615
#622 := [monotonicity #616]: #620
#621 := [trans #622 #262]: #623
#619 := [quant-inst]: #613
#624 := [mp #619 #621]: #618
#458 := [unit-resolution #624 #651]: #614
#465 := [unit-resolution #458 #456]: #275
#467 := (not #275)
#468 := (or #467 #610)
#469 := [th-lemma]: #468
#479 := [unit-resolution #469 #465]: #610
#611 := (>= #274 0::int)
#608 := (<= #290 0::int)
#318 := (= #290 0::int)
#31 := (f3 0::int)
#609 := (f4 #31)
#322 := (= #609 0::int)
#439 := (or #617 #322)
#334 := (>= 0::int 0::int)
#335 := (not #334)
#319 := (= 0::int #609)
#320 := (or #319 #335)
#440 := (or #617 #320)
#583 := (iff #440 #439)
#585 := (iff #439 #439)
#579 := [rewrite]: #585
#597 := (iff #320 #322)
#589 := (or #322 false)
#596 := (iff #589 #322)
#591 := [rewrite]: #596
#590 := (iff #320 #589)
#593 := (iff #335 false)
#1 := true
#598 := (not true)
#603 := (iff #598 false)
#592 := [rewrite]: #603
#602 := (iff #335 #598)
#601 := (iff #334 true)
#315 := [rewrite]: #601
#599 := [monotonicity #315]: #602
#594 := [trans #599 #592]: #593
#321 := (iff #319 #322)
#600 := [rewrite]: #321
#595 := [monotonicity #600 #594]: #590
#438 := [trans #595 #591]: #597
#584 := [monotonicity #438]: #583
#580 := [trans #584 #579]: #583
#582 := [quant-inst]: #440
#586 := [mp #582 #580]: #439
#555 := [unit-resolution #586 #651]: #322
#495 := (= #290 #609)
#32 := (= #30 #31)
#34 := (= f6 #31)
#35 := (not #34)
#33 := (= f5 #31)
#140 := (not #33)
#141 := (or #140 #35)
#528 := (= #29 0::int)
#526 := (= #29 #609)
#545 := (= #28 #609)
#309 := (not #141)
#565 := [hypothesis]: #309
#222 := (or #141 #34)
#308 := [def-axiom]: #222
#556 := [unit-resolution #308 #565]: #34
#546 := [monotonicity #556]: #545
#524 := (= #29 #28)
#552 := (= #26 #28)
#542 := (= f5 f6)
#557 := (= #31 f6)
#551 := [symm #556]: #557
#221 := (or #141 #33)
#307 := [def-axiom]: #221
#558 := [unit-resolution #307 #565]: #33
#543 := [trans #558 #551]: #542
#522 := [monotonicity #543]: #552
#541 := (= #29 #26)
#540 := (= #26 #29)
#550 := (<= #28 0::int)
#547 := [trans #546 #555]: #553
#548 := (not #553)
#544 := (or #548 #550)
#549 := [th-lemma]: #544
#535 := [unit-resolution #549 #547]: #550
#536 := (or #548 #460)
#538 := [th-lemma]: #536
#539 := [unit-resolution #538 #547]: #460
#537 := [th-lemma #539 #535]: #540
#521 := [symm #537]: #541
#525 := [trans #521 #522]: #524
#527 := [trans #525 #546]: #526
#529 := [trans #527 #555]: #528
#530 := [monotonicity #529]: #32
#293 := (not #32)
#287 := (or #293 #141)
#144 := (iff #32 #141)
#36 := (implies #33 #35)
#37 := (iff #32 #36)
#145 := (iff #37 #144)
#142 := (iff #36 #141)
#143 := [rewrite]: #142
#146 := [monotonicity #143]: #145
#139 := [asserted]: #37
#149 := [mp #139 #146]: #144
#312 := (not #144)
#629 := (or #293 #141 #312)
#631 := [def-axiom]: #629
#418 := [unit-resolution #631 #149]: #287
#554 := [unit-resolution #418 #565]: #293
#531 := [unit-resolution #554 #530]: false
#532 := [lemma #531]: #141
#310 := (or #32 #309)
#240 := (or #32 #309 #312)
#313 := [def-axiom]: #240
#314 := [unit-resolution #313 #149]: #310
#494 := [unit-resolution #314 #532]: #32
#498 := [monotonicity #494]: #495
#499 := [trans #498 #555]: #318
#500 := (not #318)
#496 := (or #500 #608)
#501 := [th-lemma]: #496
#481 := [unit-resolution #501 #499]: #608
#459 := (not #608)
#480 := (or #611 #463 #464 #459)
#435 := [th-lemma]: #480
#436 := [unit-resolution #435 #491 #481 #457]: #611
#605 := (>= #290 0::int)
#441 := (or #500 #605)
#442 := [th-lemma]: #441
#443 := [unit-resolution #442 #499]: #605
#562 := (* -1::int #28)
#563 := (+ #26 #562)
#490 := (<= #563 0::int)
#482 := (not #610)
#444 := (or #490 #464 #459 #482)
#445 := [th-lemma]: #444
#446 := [unit-resolution #445 #479 #457 #481]: #490
#560 := (>= #563 0::int)
#487 := (or #560 #482 #463)
#492 := (not #560)
#497 := [hypothesis]: #492
#493 := [hypothesis]: #610
#427 := [th-lemma #481 #493 #497 #491]: false
#488 := [lemma #427]: #487
#447 := [unit-resolution #488 #479 #491]: #560
#448 := [th-lemma #447 #446 #443 #481 #436 #479]: #553
#451 := (= #461 #28)
#449 := (= #299 f6)
#632 := (= f6 #299)
#626 := (or #633 #632)
#285 := [quant-inst]: #626
#523 := [unit-resolution #285 #644]: #632
#450 := [symm #523]: #449
#452 := [monotonicity #450]: #451
#437 := [trans #452 #448]: #570
#453 := [unit-resolution #483 #437]: false
#415 := [lemma #453]: #414
#422 := [unit-resolution #415 #433]: #570
#391 := (= #577 #461)
#534 := (= #28 #461)
#512 := [monotonicity #523]: #534
#400 := (= #577 #28)
#405 := [trans #512 #422]: #553
#406 := [unit-resolution #538 #405]: #460
#407 := [unit-resolution #454 #406 #433]: #630
#409 := [unit-resolution #458 #407]: #275
#410 := [unit-resolution #469 #409]: #610
#411 := [unit-resolution #445 #410 #406 #481]: #490
#253 := [unit-resolution #488 #410 #433]: #560
#412 := (not #490)
#408 := (or #552 #412 #492)
#413 := [th-lemma]: #408
#392 := [unit-resolution #413 #253 #411]: #552
#401 := (= #577 #26)
#395 := (= #625 f5)
#399 := [symm #503]: #395
#402 := [monotonicity #399]: #401
#403 := [trans #402 #392]: #400
#394 := [trans #403 #512]: #391
#396 := [trans #394 #422]: #575
#485 := (not #575)
#514 := (or #519 #34)
#515 := (= #299 #31)
#533 := [hypothesis]: #570
#513 := [trans #512 #533]: #553
#516 := [monotonicity #513]: #515
#517 := [trans #523 #516]: #34
#564 := [hypothesis]: #35
#518 := [unit-resolution #564 #517]: false
#520 := [lemma #518]: #514
#416 := [unit-resolution #520 #422]: #34
#300 := (or #309 #140 #35)
#311 := [def-axiom]: #300
#434 := [unit-resolution #311 #416 #532]: #140
#486 := (or #485 #33)
#510 := (= #625 #31)
#502 := [hypothesis]: #575
#509 := [trans #507 #502]: #508
#505 := [monotonicity #509]: #510
#511 := [trans #503 #505]: #33
#506 := [hypothesis]: #140
#484 := [unit-resolution #506 #511]: false
#379 := [lemma #484]: #486
#404 := [unit-resolution #379 #434]: #485
[unit-resolution #404 #396]: false
unsat
247007e25d142d8e92de60bbb406994a174b3a43 60 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#135 := (f3 #26)
#141 := (= f5 #135)
#146 := (not #141)
#13 := 0::int
#27 := (- #26 0::int)
#28 := (f3 #27)
#29 := (= #28 f5)
#30 := (not #29)
#147 := (iff #30 #146)
#144 := (iff #29 #141)
#138 := (= #135 f5)
#142 := (iff #138 #141)
#143 := [rewrite]: #142
#139 := (iff #29 #138)
#136 := (= #28 #135)
#133 := (= #27 #26)
#134 := [rewrite]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#145 := [trans #140 #143]: #144
#148 := [monotonicity #145]: #147
#132 := [asserted]: #30
#151 := [mp #132 #148]: #146
#8 := (:var 0 S2)
#9 := (f4 #8)
#639 := (pattern #9)
#10 := (f3 #9)
#48 := (= #8 #10)
#640 := (forall (vars (?v0 S2)) (:pat #639) #48)
#51 := (forall (vars (?v0 S2)) #48)
#641 := (iff #51 #640)
#643 := (iff #640 #640)
#644 := [rewrite]: #643
#642 := [rewrite]: #641
#645 := [trans #642 #644]: #641
#163 := (~ #51 #51)
#161 := (~ #48 #48)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#52 := (iff #12 #51)
#49 := (iff #11 #48)
#50 := [rewrite]: #49
#53 := [quant-intro #50]: #52
#47 := [asserted]: #12
#56 := [mp #47 #53]: #51
#152 := [mp~ #56 #164]: #51
#646 := [mp #152 #645]: #640
#224 := (not #640)
#310 := (or #224 #141)
#311 := [quant-inst]: #310
[unit-resolution #311 #646 #151]: false
unsat
d93a98dfeff0cecc9d144da28466836fbdae0214 179 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#138 := -1::int
#139 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#140 := (+ #26 #139)
#143 := (f3 #140)
#13 := 0::int
#32 := (f3 0::int)
#149 := (= #32 #143)
#649 := (f4 #143)
#597 := (f3 #649)
#596 := (= #597 #143)
#499 := (= #143 #597)
#8 := (:var 0 S2)
#9 := (f4 #8)
#665 := (pattern #9)
#10 := (f3 #9)
#53 := (= #8 #10)
#666 := (forall (vars (?v0 S2)) (:pat #665) #53)
#56 := (forall (vars (?v0 S2)) #53)
#667 := (iff #56 #666)
#669 := (iff #666 #666)
#670 := [rewrite]: #669
#668 := [rewrite]: #667
#671 := [trans #668 #670]: #667
#192 := (~ #56 #56)
#190 := (~ #53 #53)
#191 := [refl]: #190
#193 := [nnf-pos #191]: #192
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#57 := (iff #12 #56)
#54 := (iff #11 #53)
#55 := [rewrite]: #54
#58 := [quant-intro #55]: #57
#52 := [asserted]: #12
#61 := [mp #52 #58]: #56
#179 := [mp~ #61 #193]: #56
#672 := [mp #179 #671]: #666
#338 := (not #666)
#502 := (or #338 #499)
#503 := [quant-inst]: #502
#501 := [unit-resolution #503 #672]: #499
#600 := [symm #501]: #596
#506 := (= #32 #597)
#504 := (= 0::int #649)
#622 := (= #649 0::int)
#161 := (>= #140 0::int)
#160 := (not #161)
#154 := (not #149)
#167 := (and #154 #160)
#30 := (- #26 #28)
#31 := (f3 #30)
#33 := (= #31 #32)
#34 := (not #33)
#29 := (< #26 #28)
#35 := (and #29 #34)
#172 := (iff #35 #167)
#157 := (and #29 #154)
#170 := (iff #157 #167)
#164 := (and #160 #154)
#168 := (iff #164 #167)
#169 := [rewrite]: #168
#165 := (iff #157 #164)
#162 := (iff #29 #160)
#163 := [rewrite]: #162
#166 := [monotonicity #163]: #165
#171 := [trans #166 #169]: #170
#158 := (iff #35 #157)
#155 := (iff #34 #154)
#152 := (iff #33 #149)
#146 := (= #143 #32)
#150 := (iff #146 #149)
#151 := [rewrite]: #150
#147 := (iff #33 #146)
#144 := (= #31 #143)
#141 := (= #30 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#153 := [trans #148 #151]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#173 := [trans #159 #171]: #172
#137 := [asserted]: #35
#174 := [mp #137 #173]: #167
#176 := [and-elim #174]: #160
#14 := (:var 0 int)
#16 := (f3 #14)
#673 := (pattern #16)
#78 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#126 := (or #22 #78)
#680 := (forall (vars (?v0 int)) (:pat #673) #126)
#131 := (forall (vars (?v0 int)) #126)
#683 := (iff #131 #680)
#681 := (iff #126 #126)
#682 := [refl]: #681
#684 := [quant-intro #682]: #683
#182 := (~ #131 #131)
#196 := (~ #126 #126)
#197 := [refl]: #196
#183 := [nnf-pos #197]: #182
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#134 := (iff #24 #131)
#97 := (= 0::int #17)
#103 := (not #21)
#104 := (or #103 #97)
#109 := (forall (vars (?v0 int)) #104)
#132 := (iff #109 #131)
#129 := (iff #104 #126)
#123 := (or #78 #22)
#127 := (iff #123 #126)
#128 := [rewrite]: #127
#124 := (iff #104 #123)
#121 := (iff #97 #22)
#122 := [rewrite]: #121
#119 := (iff #103 #78)
#79 := (not #78)
#114 := (not #79)
#117 := (iff #114 #78)
#118 := [rewrite]: #117
#115 := (iff #103 #114)
#112 := (iff #21 #79)
#113 := [rewrite]: #112
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#125 := [monotonicity #120 #122]: #124
#130 := [trans #125 #128]: #129
#133 := [quant-intro #130]: #132
#110 := (iff #24 #109)
#107 := (iff #23 #104)
#100 := (implies #21 #97)
#105 := (iff #100 #104)
#106 := [rewrite]: #105
#101 := (iff #23 #100)
#98 := (iff #22 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#108 := [trans #102 #106]: #107
#111 := [quant-intro #108]: #110
#135 := [trans #111 #133]: #134
#96 := [asserted]: #24
#136 := [mp #96 #135]: #131
#198 := [mp~ #136 #183]: #131
#685 := [mp #198 #684]: #680
#619 := (not #680)
#625 := (or #619 #161 #622)
#617 := (or #622 #161)
#466 := (or #619 #617)
#607 := (iff #466 #625)
#618 := (or #161 #622)
#468 := (or #619 #618)
#612 := (iff #468 #625)
#613 := [rewrite]: #612
#610 := (iff #466 #468)
#623 := (iff #617 #618)
#624 := [rewrite]: #623
#611 := [monotonicity #624]: #610
#608 := [trans #611 #613]: #607
#467 := [quant-inst]: #466
#614 := [mp #467 #608]: #625
#494 := [unit-resolution #614 #685 #176]: #622
#505 := [symm #494]: #504
#599 := [monotonicity #505]: #506
#587 := [trans #599 #600]: #149
#175 := [and-elim #174]: #154
[unit-resolution #175 #587]: false
unsat
eee95e43cf8f5bef80fbd286784baba8f5cb9a33 321 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#141 := -1::int
#142 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#143 := (+ #26 #142)
#146 := (f3 #143)
#13 := 0::int
#31 := (f3 0::int)
#152 := (= #31 #146)
#645 := (f4 #146)
#547 := (f3 #645)
#476 := (= #547 #146)
#548 := (= #146 #547)
#8 := (:var 0 S2)
#9 := (f4 #8)
#672 := (pattern #9)
#10 := (f3 #9)
#56 := (= #8 #10)
#673 := (forall (vars (?v0 S2)) (:pat #672) #56)
#59 := (forall (vars (?v0 S2)) #56)
#674 := (iff #59 #673)
#676 := (iff #673 #673)
#677 := [rewrite]: #676
#675 := [rewrite]: #674
#678 := [trans #675 #677]: #674
#199 := (~ #59 #59)
#197 := (~ #56 #56)
#198 := [refl]: #197
#200 := [nnf-pos #198]: #199
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#60 := (iff #12 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#61 := [quant-intro #58]: #60
#55 := [asserted]: #12
#64 := [mp #55 #61]: #59
#186 := [mp~ #64 #200]: #59
#679 := [mp #186 #678]: #673
#345 := (not #673)
#528 := (or #345 #548)
#529 := [quant-inst]: #528
#519 := [unit-resolution #529 #679]: #548
#477 := [symm #519]: #476
#470 := (= #31 #547)
#494 := (= 0::int #645)
#638 := (= #645 0::int)
#656 := (>= #143 0::int)
#659 := (not #656)
#160 := (* -1::int #26)
#161 := (+ #160 #28)
#164 := (f3 #161)
#617 := (f4 #164)
#597 := (<= #617 0::int)
#523 := (not #597)
#507 := (= #617 0::int)
#545 := (not #507)
#170 := (= #31 #164)
#558 := (f3 #617)
#539 := (= #558 #164)
#569 := (= #164 #558)
#550 := (or #345 #569)
#551 := [quant-inst]: #550
#552 := [unit-resolution #551 #679]: #569
#542 := [symm #552]: #539
#537 := (= #31 #558)
#555 := (= 0::int #617)
#553 := [hypothesis]: #507
#541 := [symm #553]: #555
#538 := [monotonicity #541]: #537
#543 := [trans #538 #542]: #170
#175 := (not #170)
#157 := (not #152)
#178 := (and #157 #175)
#34 := (- #28 #26)
#35 := (f3 #34)
#36 := (= #35 #31)
#37 := (not #36)
#29 := (- #26 #28)
#30 := (f3 #29)
#32 := (= #30 #31)
#33 := (not #32)
#38 := (and #33 #37)
#179 := (iff #38 #178)
#176 := (iff #37 #175)
#173 := (iff #36 #170)
#167 := (= #164 #31)
#171 := (iff #167 #170)
#172 := [rewrite]: #171
#168 := (iff #36 #167)
#165 := (= #35 #164)
#162 := (= #34 #161)
#163 := [rewrite]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#174 := [trans #169 #172]: #173
#177 := [monotonicity #174]: #176
#158 := (iff #33 #157)
#155 := (iff #32 #152)
#149 := (= #146 #31)
#153 := (iff #149 #152)
#154 := [rewrite]: #153
#150 := (iff #32 #149)
#147 := (= #30 #146)
#144 := (= #29 #143)
#145 := [rewrite]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#156 := [trans #151 #154]: #155
#159 := [monotonicity #156]: #158
#180 := [monotonicity #159 #177]: #179
#140 := [asserted]: #38
#183 := [mp #140 #180]: #178
#182 := [and-elim #183]: #175
#544 := [unit-resolution #182 #543]: false
#540 := [lemma #544]: #545
#598 := (>= #617 0::int)
#621 := (+ #142 #617)
#622 := (+ #26 #621)
#505 := (>= #622 0::int)
#614 := (= #622 0::int)
#616 := (<= #143 0::int)
#501 := (or #507 #616)
#14 := (:var 0 int)
#16 := (f3 #14)
#680 := (pattern #16)
#81 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#129 := (or #22 #81)
#687 := (forall (vars (?v0 int)) (:pat #680) #129)
#134 := (forall (vars (?v0 int)) #129)
#690 := (iff #134 #687)
#688 := (iff #129 #129)
#689 := [refl]: #688
#691 := [quant-intro #689]: #690
#189 := (~ #134 #134)
#203 := (~ #129 #129)
#204 := [refl]: #203
#190 := [nnf-pos #204]: #189
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#137 := (iff #24 #134)
#100 := (= 0::int #17)
#106 := (not #21)
#107 := (or #106 #100)
#112 := (forall (vars (?v0 int)) #107)
#135 := (iff #112 #134)
#132 := (iff #107 #129)
#126 := (or #81 #22)
#130 := (iff #126 #129)
#131 := [rewrite]: #130
#127 := (iff #107 #126)
#124 := (iff #100 #22)
#125 := [rewrite]: #124
#122 := (iff #106 #81)
#82 := (not #81)
#117 := (not #82)
#120 := (iff #117 #81)
#121 := [rewrite]: #120
#118 := (iff #106 #117)
#115 := (iff #21 #82)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#123 := [trans #119 #121]: #122
#128 := [monotonicity #123 #125]: #127
#133 := [trans #128 #131]: #132
#136 := [quant-intro #133]: #135
#113 := (iff #24 #112)
#110 := (iff #23 #107)
#103 := (implies #21 #100)
#108 := (iff #103 #107)
#109 := [rewrite]: #108
#104 := (iff #23 #103)
#101 := (iff #22 #100)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#111 := [trans #105 #109]: #110
#114 := [quant-intro #111]: #113
#138 := [trans #114 #136]: #137
#99 := [asserted]: #24
#139 := [mp #99 #138]: #134
#205 := [mp~ #139 #190]: #134
#692 := [mp #205 #691]: #687
#624 := (not #687)
#511 := (or #624 #507 #616)
#628 := (>= #161 0::int)
#508 := (or #507 #628)
#512 := (or #624 #508)
#588 := (iff #512 #511)
#606 := (or #624 #501)
#594 := (iff #606 #511)
#596 := [rewrite]: #594
#603 := (iff #512 #606)
#509 := (iff #508 #501)
#623 := (iff #628 #616)
#452 := [rewrite]: #623
#510 := [monotonicity #452]: #509
#607 := [monotonicity #510]: #603
#585 := [trans #607 #596]: #588
#513 := [quant-inst]: #512
#587 := [mp #513 #585]: #511
#520 := [unit-resolution #587 #692]: #501
#530 := [unit-resolution #520 #540]: #616
#454 := (not #616)
#609 := (or #614 #454)
#63 := (= #14 #17)
#88 := (or #63 #82)
#681 := (forall (vars (?v0 int)) (:pat #680) #88)
#93 := (forall (vars (?v0 int)) #88)
#684 := (iff #93 #681)
#682 := (iff #88 #88)
#683 := [refl]: #682
#685 := [quant-intro #683]: #684
#187 := (~ #93 #93)
#184 := (~ #88 #88)
#201 := [refl]: #184
#188 := [nnf-pos #201]: #187
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#96 := (iff #20 #93)
#70 := (not #15)
#71 := (or #70 #63)
#76 := (forall (vars (?v0 int)) #71)
#94 := (iff #76 #93)
#91 := (iff #71 #88)
#85 := (or #82 #63)
#89 := (iff #85 #88)
#90 := [rewrite]: #89
#86 := (iff #71 #85)
#83 := (iff #70 #82)
#79 := (iff #15 #81)
#80 := [rewrite]: #79
#84 := [monotonicity #80]: #83
#87 := [monotonicity #84]: #86
#92 := [trans #87 #90]: #91
#95 := [quant-intro #92]: #94
#77 := (iff #20 #76)
#74 := (iff #19 #71)
#67 := (implies #15 #63)
#72 := (iff #67 #71)
#73 := [rewrite]: #72
#68 := (iff #19 #67)
#65 := (iff #18 #63)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#75 := [trans #69 #73]: #74
#78 := [quant-intro #75]: #77
#97 := [trans #78 #95]: #96
#62 := [asserted]: #20
#98 := [mp #62 #97]: #93
#202 := [mp~ #98 #188]: #93
#686 := [mp #202 #685]: #681
#647 := (not #681)
#610 := (or #647 #614 #454)
#629 := (not #628)
#618 := (= #161 #617)
#619 := (or #618 #629)
#613 := (or #647 #619)
#601 := (iff #613 #610)
#496 := (or #647 #609)
#604 := (iff #496 #610)
#506 := [rewrite]: #604
#497 := (iff #613 #496)
#611 := (iff #619 #609)
#455 := (iff #629 #454)
#608 := [monotonicity #452]: #455
#620 := (iff #618 #614)
#615 := [rewrite]: #620
#612 := [monotonicity #615 #608]: #611
#456 := [monotonicity #612]: #497
#602 := [trans #456 #506]: #601
#495 := [quant-inst]: #613
#605 := [mp #495 #602]: #610
#533 := [unit-resolution #605 #686]: #609
#534 := [unit-resolution #533 #530]: #614
#535 := (not #614)
#531 := (or #535 #505)
#536 := [th-lemma]: #531
#516 := [unit-resolution #536 #534]: #505
#462 := (not #505)
#517 := (or #598 #462 #454)
#498 := [th-lemma]: #517
#522 := [unit-resolution #498 #530 #516]: #598
#518 := (not #598)
#524 := (or #507 #523 #518)
#492 := [th-lemma]: #524
#499 := [unit-resolution #492 #522 #540]: #523
#490 := (<= #622 0::int)
#458 := (or #535 #490)
#489 := [th-lemma]: #458
#491 := [unit-resolution #489 #534]: #490
#493 := (not #490)
#500 := (or #659 #597 #493)
#502 := [th-lemma]: #500
#503 := [unit-resolution #502 #491 #499]: #659
#627 := (or #638 #656)
#625 := (or #624 #638 #656)
#630 := (or #624 #627)
#626 := (iff #630 #625)
#632 := [rewrite]: #626
#631 := [quant-inst]: #630
#473 := [mp #631 #632]: #625
#504 := [unit-resolution #473 #692]: #627
#514 := [unit-resolution #504 #503]: #638
#515 := [symm #514]: #494
#471 := [monotonicity #515]: #470
#478 := [trans #471 #477]: #152
#181 := [and-elim #183]: #157
[unit-resolution #181 #478]: false
unsat
206fdc571c96e857b861e47f6915cc8941eb6161 33 0
#2 := false
decl f3 :: (-> int S2)
#13 := 0::int
#29 := (f3 0::int)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := (* #26 0::int)
#28 := (f3 #27)
#30 := (= #28 #29)
#31 := (not #30)
#149 := (iff #31 false)
#1 := true
#144 := (not true)
#147 := (iff #144 false)
#148 := [rewrite]: #147
#145 := (iff #31 #144)
#142 := (iff #30 true)
#137 := (= #29 #29)
#140 := (iff #137 true)
#141 := [rewrite]: #140
#138 := (iff #30 #137)
#134 := (= #27 0::int)
#135 := [rewrite]: #134
#136 := [monotonicity #135]: #30
#139 := [monotonicity #136]: #138
#143 := [trans #139 #141]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#133 := [asserted]: #31
[mp #133 #150]: false
unsat
ee33631d0954fd84f61d52487d899741e6b2c604 33 0
#2 := false
decl f3 :: (-> int S2)
#13 := 0::int
#29 := (f3 0::int)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := (* 0::int #26)
#28 := (f3 #27)
#30 := (= #28 #29)
#31 := (not #30)
#149 := (iff #31 false)
#1 := true
#144 := (not true)
#147 := (iff #144 false)
#148 := [rewrite]: #147
#145 := (iff #31 #144)
#142 := (iff #30 true)
#137 := (= #29 #29)
#140 := (iff #137 true)
#141 := [rewrite]: #140
#138 := (iff #30 #137)
#134 := (= #27 0::int)
#135 := [rewrite]: #134
#136 := [monotonicity #135]: #30
#139 := [monotonicity #136]: #138
#143 := [trans #139 #141]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#133 := [asserted]: #31
[mp #133 #150]: false
unsat
a52f3d3f145bed3b2ad2f7ee15aba0955eef027c 329 0
#2 := false
decl f6 :: S2
#27 := f6
decl f5 :: S2
#25 := f5
#13 := 0::int
decl f4 :: (-> S2 int)
#28 := (f4 f6)
#140 := -1::int
#141 := (* -1::int #28)
#26 := (f4 f5)
#142 := (+ #26 #141)
#174 := (>= #142 0::int)
#180 := (ite #174 f5 f6)
decl f3 :: (-> int S2)
#145 := (f3 #142)
#148 := (f4 #145)
#154 := (+ #28 #148)
#159 := (f3 #154)
#188 := (= #159 #180)
#358 := (= f6 #180)
#173 := (not #174)
#272 := (= f5 #180)
#589 := [hypothesis]: #174
#273 := (or #173 #272)
#359 := [def-axiom]: #273
#590 := [unit-resolution #359 #589]: #272
#507 := (= #159 f5)
#291 := (f3 #26)
#533 := (= #291 f5)
#364 := (= f5 #291)
#8 := (:var 0 S2)
#9 := (f4 #8)
#687 := (pattern #9)
#10 := (f3 #9)
#55 := (= #8 #10)
#688 := (forall (vars (?v0 S2)) (:pat #687) #55)
#58 := (forall (vars (?v0 S2)) #55)
#689 := (iff #58 #688)
#691 := (iff #688 #688)
#692 := [rewrite]: #691
#690 := [rewrite]: #689
#693 := [trans #690 #692]: #689
#212 := (~ #58 #58)
#210 := (~ #55 #55)
#211 := [refl]: #210
#213 := [nnf-pos #211]: #212
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#59 := (iff #12 #58)
#56 := (iff #11 #55)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#54 := [asserted]: #12
#63 := [mp #54 #60]: #58
#201 := [mp~ #63 #213]: #58
#694 := [mp #201 #693]: #688
#361 := (not #688)
#338 := (or #361 #364)
#468 := [quant-inst]: #338
#580 := [unit-resolution #468 #694]: #364
#539 := [symm #580]: #533
#532 := (= #159 #291)
#553 := (= #154 #26)
#582 := (= #26 #154)
#683 := (* -1::int #148)
#684 := (+ #141 #683)
#685 := (+ #26 #684)
#672 := (<= #685 0::int)
#680 := (= #685 0::int)
#337 := (or #173 #680)
#14 := (:var 0 int)
#16 := (f3 #14)
#695 := (pattern #16)
#80 := (>= #14 0::int)
#81 := (not #80)
#17 := (f4 #16)
#62 := (= #14 #17)
#87 := (or #62 #81)
#696 := (forall (vars (?v0 int)) (:pat #695) #87)
#92 := (forall (vars (?v0 int)) #87)
#699 := (iff #92 #696)
#697 := (iff #87 #87)
#698 := [refl]: #697
#700 := [quant-intro #698]: #699
#202 := (~ #92 #92)
#199 := (~ #87 #87)
#214 := [refl]: #199
#203 := [nnf-pos #214]: #202
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#95 := (iff #20 #92)
#69 := (not #15)
#70 := (or #69 #62)
#75 := (forall (vars (?v0 int)) #70)
#93 := (iff #75 #92)
#90 := (iff #70 #87)
#84 := (or #81 #62)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #70 #84)
#82 := (iff #69 #81)
#78 := (iff #15 #80)
#79 := [rewrite]: #78
#83 := [monotonicity #79]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [quant-intro #91]: #93
#76 := (iff #20 #75)
#73 := (iff #19 #70)
#66 := (implies #15 #62)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #19 #66)
#64 := (iff #18 #62)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#74 := [trans #68 #72]: #73
#77 := [quant-intro #74]: #76
#96 := [trans #77 #94]: #95
#61 := [asserted]: #20
#97 := [mp #61 #96]: #92
#215 := [mp~ #97 #203]: #92
#701 := [mp #215 #700]: #696
#326 := (not #696)
#327 := (or #326 #173 #680)
#675 := (= #142 #148)
#349 := (or #675 #173)
#328 := (or #326 #349)
#669 := (iff #328 #327)
#665 := (or #326 #337)
#668 := (iff #665 #327)
#663 := [rewrite]: #668
#666 := (iff #328 #665)
#662 := (iff #349 #337)
#336 := (or #680 #173)
#678 := (iff #336 #337)
#321 := [rewrite]: #678
#341 := (iff #349 #336)
#686 := (iff #675 #680)
#676 := [rewrite]: #686
#677 := [monotonicity #676]: #341
#325 := [trans #677 #321]: #662
#667 := [monotonicity #325]: #666
#307 := [trans #667 #663]: #669
#664 := [quant-inst]: #328
#670 := [mp #664 #307]: #327
#547 := [unit-resolution #670 #701]: #337
#543 := [unit-resolution #547 #589]: #680
#544 := (not #680)
#545 := (or #544 #672)
#548 := [th-lemma]: #545
#549 := [unit-resolution #548 #543]: #672
#312 := (>= #685 0::int)
#550 := (or #544 #312)
#546 := [th-lemma]: #550
#551 := [unit-resolution #546 #543]: #312
#531 := [th-lemma #551 #549]: #582
#477 := [symm #531]: #553
#513 := [monotonicity #477]: #532
#514 := [trans #513 #539]: #507
#473 := [trans #514 #590]: #188
#193 := (not #188)
#34 := (< #26 #28)
#35 := (ite #34 f6 f5)
#29 := (- #26 #28)
#30 := (f3 #29)
#31 := (f4 #30)
#32 := (+ #31 #28)
#33 := (f3 #32)
#36 := (= #33 #35)
#37 := (not #36)
#196 := (iff #37 #193)
#165 := (= #35 #159)
#170 := (not #165)
#194 := (iff #170 #193)
#191 := (iff #165 #188)
#185 := (= #180 #159)
#189 := (iff #185 #188)
#190 := [rewrite]: #189
#186 := (iff #165 #185)
#183 := (= #35 #180)
#177 := (ite #173 f6 f5)
#181 := (= #177 #180)
#182 := [rewrite]: #181
#178 := (= #35 #177)
#175 := (iff #34 #173)
#176 := [rewrite]: #175
#179 := [monotonicity #176]: #178
#184 := [trans #179 #182]: #183
#187 := [monotonicity #184]: #186
#192 := [trans #187 #190]: #191
#195 := [monotonicity #192]: #194
#171 := (iff #37 #170)
#168 := (iff #36 #165)
#162 := (= #159 #35)
#166 := (iff #162 #165)
#167 := [rewrite]: #166
#163 := (iff #36 #162)
#160 := (= #33 #159)
#157 := (= #32 #154)
#151 := (+ #148 #28)
#155 := (= #151 #154)
#156 := [rewrite]: #155
#152 := (= #32 #151)
#149 := (= #31 #148)
#146 := (= #30 #145)
#143 := (= #29 #142)
#144 := [rewrite]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [monotonicity #150]: #152
#158 := [trans #153 #156]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#169 := [trans #164 #167]: #168
#172 := [monotonicity #169]: #171
#197 := [trans #172 #195]: #196
#139 := [asserted]: #37
#198 := [mp #139 #197]: #193
#504 := [unit-resolution #198 #473]: false
#506 := [lemma #504]: #173
#360 := (or #174 #358)
#351 := [def-axiom]: #360
#542 := [unit-resolution #351 #506]: #358
#498 := (= #159 f6)
#362 := (f3 #28)
#496 := (= #362 f6)
#363 := (= f6 #362)
#365 := (or #361 #363)
#344 := [quant-inst]: #365
#541 := [unit-resolution #344 #694]: #363
#497 := [symm #541]: #496
#492 := (= #159 #362)
#486 := (= #154 #28)
#530 := (= #28 #154)
#655 := (<= #148 0::int)
#313 := (= #148 0::int)
#671 := (or #174 #313)
#22 := (= #17 0::int)
#128 := (or #22 #80)
#702 := (forall (vars (?v0 int)) (:pat #695) #128)
#133 := (forall (vars (?v0 int)) #128)
#705 := (iff #133 #702)
#703 := (iff #128 #128)
#704 := [refl]: #703
#706 := [quant-intro #704]: #705
#204 := (~ #133 #133)
#216 := (~ #128 #128)
#217 := [refl]: #216
#205 := [nnf-pos #217]: #204
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#136 := (iff #24 #133)
#99 := (= 0::int #17)
#105 := (not #21)
#106 := (or #105 #99)
#111 := (forall (vars (?v0 int)) #106)
#134 := (iff #111 #133)
#131 := (iff #106 #128)
#125 := (or #80 #22)
#129 := (iff #125 #128)
#130 := [rewrite]: #129
#126 := (iff #106 #125)
#123 := (iff #99 #22)
#124 := [rewrite]: #123
#121 := (iff #105 #80)
#116 := (not #81)
#119 := (iff #116 #80)
#120 := [rewrite]: #119
#117 := (iff #105 #116)
#114 := (iff #21 #81)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#122 := [trans #118 #120]: #121
#127 := [monotonicity #122 #124]: #126
#132 := [trans #127 #130]: #131
#135 := [quant-intro #132]: #134
#112 := (iff #24 #111)
#109 := (iff #23 #106)
#102 := (implies #21 #99)
#107 := (iff #102 #106)
#108 := [rewrite]: #107
#103 := (iff #23 #102)
#100 := (iff #22 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#110 := [trans #104 #108]: #109
#113 := [quant-intro #110]: #112
#137 := [trans #113 #135]: #136
#98 := [asserted]: #24
#138 := [mp #98 #137]: #133
#218 := [mp~ #138 #205]: #133
#707 := [mp #218 #706]: #702
#661 := (not #702)
#383 := (or #661 #174 #313)
#673 := (or #313 #174)
#384 := (or #661 #673)
#380 := (iff #384 #383)
#386 := (or #661 #671)
#657 := (iff #386 #383)
#379 := [rewrite]: #657
#279 := (iff #384 #386)
#674 := (iff #673 #671)
#660 := [rewrite]: #674
#656 := [monotonicity #660]: #279
#654 := [trans #656 #379]: #380
#385 := [quant-inst]: #384
#658 := [mp #385 #654]: #383
#537 := [unit-resolution #658 #707]: #671
#538 := [unit-resolution #537 #506]: #313
#508 := (not #313)
#515 := (or #508 #655)
#517 := [th-lemma]: #515
#518 := [unit-resolution #517 #538]: #655
#659 := (>= #148 0::int)
#519 := (or #508 #659)
#529 := [th-lemma]: #519
#509 := [unit-resolution #529 #538]: #659
#485 := [th-lemma #509 #518]: #530
#491 := [symm #485]: #486
#493 := [monotonicity #491]: #492
#499 := [trans #493 #497]: #498
#500 := [trans #499 #542]: #188
[unit-resolution #198 #500]: false
unsat
71a8731b24573e8c3f19635efbc778a168d7006c 60 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#136 := (f3 #26)
#142 := (= f5 #136)
#147 := (not #142)
#27 := 1::int
#28 := (* #26 1::int)
#29 := (f3 #28)
#30 := (= #29 f5)
#31 := (not #30)
#148 := (iff #31 #147)
#145 := (iff #30 #142)
#139 := (= #136 f5)
#143 := (iff #139 #142)
#144 := [rewrite]: #143
#140 := (iff #30 #139)
#137 := (= #29 #136)
#134 := (= #28 #26)
#135 := [rewrite]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#146 := [trans #141 #144]: #145
#149 := [monotonicity #146]: #148
#133 := [asserted]: #31
#152 := [mp #133 #149]: #147
#8 := (:var 0 S2)
#9 := (f4 #8)
#639 := (pattern #9)
#10 := (f3 #9)
#49 := (= #8 #10)
#640 := (forall (vars (?v0 S2)) (:pat #639) #49)
#52 := (forall (vars (?v0 S2)) #49)
#641 := (iff #52 #640)
#643 := (iff #640 #640)
#644 := [rewrite]: #643
#642 := [rewrite]: #641
#645 := [trans #642 #644]: #641
#164 := (~ #52 #52)
#162 := (~ #49 #49)
#163 := [refl]: #162
#165 := [nnf-pos #163]: #164
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#53 := (iff #12 #52)
#50 := (iff #11 #49)
#51 := [rewrite]: #50
#54 := [quant-intro #51]: #53
#48 := [asserted]: #12
#57 := [mp #48 #54]: #52
#153 := [mp~ #57 #165]: #52
#646 := [mp #153 #645]: #640
#225 := (not #640)
#310 := (or #225 #142)
#311 := [quant-inst]: #310
[unit-resolution #311 #646 #152]: false
unsat
be5efb86f9b9b267348d77366692337b5c5df35f 517 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#143 := -1::int
#144 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#145 := (+ #26 #144)
#148 := (f3 #145)
#151 := (f4 #148)
#664 := (* -1::int #151)
#665 := (+ #144 #664)
#666 := (+ #26 #665)
#661 := (= #666 0::int)
#422 := (not #661)
#293 := (>= #666 0::int)
#314 := (not #293)
decl f7 :: S2
#32 := f7
#33 := (f4 f7)
#157 := (* -1::int #33)
#166 := (+ #144 #157)
#167 := (+ #26 #166)
#503 := (>= #167 0::int)
#504 := (not #503)
#170 := (f3 #167)
#158 := (+ #157 #151)
#163 := (f3 #158)
#173 := (= #163 #170)
#497 := (f4 #170)
#490 := (f3 #497)
#447 := (= #490 #170)
#511 := (= #170 #490)
#8 := (:var 0 S2)
#9 := (f4 #8)
#668 := (pattern #9)
#10 := (f3 #9)
#58 := (= #8 #10)
#669 := (forall (vars (?v0 S2)) (:pat #668) #58)
#61 := (forall (vars (?v0 S2)) #58)
#670 := (iff #61 #669)
#672 := (iff #669 #669)
#673 := [rewrite]: #672
#671 := [rewrite]: #670
#674 := [trans #671 #673]: #670
#193 := (~ #61 #61)
#191 := (~ #58 #58)
#192 := [refl]: #191
#194 := [nnf-pos #192]: #193
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#62 := (iff #12 #61)
#59 := (iff #11 #58)
#60 := [rewrite]: #59
#63 := [quant-intro #60]: #62
#57 := [asserted]: #12
#66 := [mp #57 #63]: #61
#182 := [mp~ #66 #194]: #61
#675 := [mp #182 #674]: #669
#341 := (not #669)
#445 := (or #341 #511)
#446 := [quant-inst]: #445
#459 := [unit-resolution #446 #675]: #511
#465 := [symm #459]: #447
#435 := (= #163 #490)
#360 := (f4 #163)
#495 := (f3 #360)
#463 := (= #495 #490)
#327 := (= #360 #497)
#507 := (* -1::int #497)
#508 := (+ #157 #507)
#509 := (+ #144 #508)
#602 := (+ #26 #509)
#578 := (<= #602 0::int)
#599 := (= #602 0::int)
#400 := [hypothesis]: #503
#583 := (or #504 #599)
#14 := (:var 0 int)
#16 := (f3 #14)
#676 := (pattern #16)
#83 := (>= #14 0::int)
#84 := (not #83)
#17 := (f4 #16)
#65 := (= #14 #17)
#90 := (or #65 #84)
#677 := (forall (vars (?v0 int)) (:pat #676) #90)
#95 := (forall (vars (?v0 int)) #90)
#680 := (iff #95 #677)
#678 := (iff #90 #90)
#679 := [refl]: #678
#681 := [quant-intro #679]: #680
#183 := (~ #95 #95)
#179 := (~ #90 #90)
#195 := [refl]: #179
#184 := [nnf-pos #195]: #183
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#98 := (iff #20 #95)
#72 := (not #15)
#73 := (or #72 #65)
#78 := (forall (vars (?v0 int)) #73)
#96 := (iff #78 #95)
#93 := (iff #73 #90)
#87 := (or #84 #65)
#91 := (iff #87 #90)
#92 := [rewrite]: #91
#88 := (iff #73 #87)
#85 := (iff #72 #84)
#81 := (iff #15 #83)
#82 := [rewrite]: #81
#86 := [monotonicity #82]: #85
#89 := [monotonicity #86]: #88
#94 := [trans #89 #92]: #93
#97 := [quant-intro #94]: #96
#79 := (iff #20 #78)
#76 := (iff #19 #73)
#69 := (implies #15 #65)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #19 #69)
#67 := (iff #18 #65)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [trans #71 #75]: #76
#80 := [quant-intro #77]: #79
#99 := [trans #80 #97]: #98
#64 := [asserted]: #20
#100 := [mp #64 #99]: #95
#196 := [mp~ #100 #184]: #95
#682 := [mp #196 #681]: #677
#307 := (not #677)
#596 := (or #307 #504 #599)
#505 := (= #167 #497)
#506 := (or #505 #504)
#585 := (or #307 #506)
#574 := (iff #585 #596)
#587 := (or #307 #583)
#589 := (iff #587 #596)
#573 := [rewrite]: #589
#588 := (iff #585 #587)
#595 := (iff #506 #583)
#592 := (or #599 #504)
#593 := (iff #592 #583)
#594 := [rewrite]: #593
#584 := (iff #506 #592)
#603 := (iff #505 #599)
#590 := [rewrite]: #603
#581 := [monotonicity #590]: #584
#591 := [trans #581 #594]: #595
#582 := [monotonicity #591]: #588
#576 := [trans #582 #573]: #574
#586 := [quant-inst]: #585
#577 := [mp #586 #576]: #596
#401 := [unit-resolution #577 #682]: #583
#399 := [unit-resolution #401 #400]: #599
#402 := (not #599)
#391 := (or #402 #578)
#403 := [th-lemma]: #391
#398 := [unit-resolution #403 #399]: #578
#579 := (>= #602 0::int)
#378 := (or #402 #579)
#377 := [th-lemma]: #378
#379 := [unit-resolution #377 #399]: #579
#653 := (<= #666 0::int)
#319 := (>= #145 0::int)
#561 := (>= #497 0::int)
#368 := (not #578)
#369 := (or #561 #368 #504)
#370 := [th-lemma]: #369
#362 := [unit-resolution #370 #398 #400]: #561
#372 := (not #579)
#371 := (not #561)
#354 := (or #319 #371 #372)
#562 := (>= #33 0::int)
#397 := (= #33 0::int)
#253 := (f3 #33)
#563 := (f4 #253)
#564 := (= #563 0::int)
#380 := (not #562)
#382 := [hypothesis]: #380
#565 := (or #562 #564)
#22 := (= #17 0::int)
#131 := (or #22 #83)
#683 := (forall (vars (?v0 int)) (:pat #676) #131)
#136 := (forall (vars (?v0 int)) #131)
#686 := (iff #136 #683)
#684 := (iff #131 #131)
#685 := [refl]: #684
#687 := [quant-intro #685]: #686
#185 := (~ #136 #136)
#197 := (~ #131 #131)
#198 := [refl]: #197
#186 := [nnf-pos #198]: #185
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#139 := (iff #24 #136)
#102 := (= 0::int #17)
#108 := (not #21)
#109 := (or #108 #102)
#114 := (forall (vars (?v0 int)) #109)
#137 := (iff #114 #136)
#134 := (iff #109 #131)
#128 := (or #83 #22)
#132 := (iff #128 #131)
#133 := [rewrite]: #132
#129 := (iff #109 #128)
#126 := (iff #102 #22)
#127 := [rewrite]: #126
#124 := (iff #108 #83)
#119 := (not #84)
#122 := (iff #119 #83)
#123 := [rewrite]: #122
#120 := (iff #108 #119)
#117 := (iff #21 #84)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#125 := [trans #121 #123]: #124
#130 := [monotonicity #125 #127]: #129
#135 := [trans #130 #133]: #134
#138 := [quant-intro #135]: #137
#115 := (iff #24 #114)
#112 := (iff #23 #109)
#105 := (implies #21 #102)
#110 := (iff #105 #109)
#111 := [rewrite]: #110
#106 := (iff #23 #105)
#103 := (iff #22 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#113 := [trans #107 #111]: #112
#116 := [quant-intro #113]: #115
#140 := [trans #116 #138]: #139
#101 := [asserted]: #24
#141 := [mp #101 #140]: #136
#199 := [mp~ #141 #186]: #136
#688 := [mp #199 #687]: #683
#641 := (not #683)
#546 := (or #641 #562 #564)
#554 := (or #564 #562)
#547 := (or #641 #554)
#533 := (iff #547 #546)
#549 := (or #641 #565)
#551 := (iff #549 #546)
#537 := [rewrite]: #551
#550 := (iff #547 #549)
#543 := (iff #554 #565)
#544 := [rewrite]: #543
#545 := [monotonicity #544]: #550
#534 := [trans #545 #537]: #533
#548 := [quant-inst]: #547
#535 := [mp #548 #534]: #546
#383 := [unit-resolution #535 #688]: #565
#384 := [unit-resolution #383 #382]: #564
#386 := (= #33 #563)
#339 := (= f7 #253)
#332 := (or #341 #339)
#343 := [quant-inst]: #332
#385 := [unit-resolution #343 #675]: #339
#387 := [monotonicity #385]: #386
#388 := [trans #387 #384]: #397
#381 := (not #397)
#389 := (or #381 #562)
#374 := [th-lemma]: #389
#375 := [unit-resolution #374 #382 #388]: false
#376 := [lemma #375]: #562
#363 := (or #380 #319 #371 #372)
#373 := [th-lemma]: #363
#355 := [unit-resolution #373 #376]: #354
#356 := [unit-resolution #355 #362 #379]: #319
#449 := (not #319)
#318 := (or #449 #661)
#308 := (or #307 #449 #661)
#331 := (= #145 #151)
#663 := (or #331 #449)
#309 := (or #307 #663)
#650 := (iff #309 #308)
#646 := (or #307 #318)
#649 := (iff #646 #308)
#644 := [rewrite]: #649
#647 := (iff #309 #646)
#643 := (iff #663 #318)
#317 := (or #661 #449)
#659 := (iff #317 #318)
#302 := [rewrite]: #659
#322 := (iff #663 #317)
#667 := (iff #331 #661)
#657 := [rewrite]: #667
#658 := [monotonicity #657]: #322
#306 := [trans #658 #302]: #643
#648 := [monotonicity #306]: #647
#288 := [trans #648 #644]: #650
#645 := [quant-inst]: #309
#651 := [mp #645 #288]: #308
#424 := [unit-resolution #651 #682]: #318
#348 := [unit-resolution #424 #356]: #661
#425 := (or #422 #653)
#427 := [th-lemma]: #425
#357 := [unit-resolution #427 #348]: #653
#358 := (or #422 #293)
#349 := [th-lemma]: #358
#359 := [unit-resolution #349 #348]: #293
#350 := (+ #664 #360)
#351 := (+ #33 #350)
#611 := (<= #351 0::int)
#636 := (= #351 0::int)
#352 := (+ #33 #664)
#353 := (<= #352 0::int)
#294 := (= #151 0::int)
#432 := (not #653)
#575 := (= #497 0::int)
#440 := (not #575)
#618 := (= #360 0::int)
#347 := (not #353)
#443 := [hypothesis]: #347
#451 := (or #353 #618)
#606 := (or #641 #353 #618)
#652 := (>= #158 0::int)
#612 := (or #618 #652)
#609 := (or #641 #612)
#597 := (iff #609 #606)
#492 := (or #641 #451)
#600 := (iff #492 #606)
#502 := [rewrite]: #600
#493 := (iff #609 #492)
#607 := (iff #612 #451)
#619 := (or #618 #353)
#604 := (iff #619 #451)
#605 := [rewrite]: #604
#448 := (iff #612 #619)
#631 := (iff #652 #353)
#632 := [rewrite]: #631
#450 := [monotonicity #632]: #448
#608 := [trans #450 #605]: #607
#452 := [monotonicity #608]: #493
#598 := [trans #452 #502]: #597
#491 := [quant-inst]: #609
#601 := [mp #491 #598]: #606
#439 := [unit-resolution #601 #688]: #451
#444 := [unit-resolution #439 #443]: #618
#441 := (not #618)
#442 := (or #440 #441)
#461 := (= #490 #495)
#456 := (= #497 #360)
#453 := (= 0::int #360)
#468 := [hypothesis]: #618
#455 := [symm #468]: #453
#484 := [hypothesis]: #575
#457 := [trans #484 #455]: #456
#462 := [monotonicity #457]: #461
#464 := [symm #462]: #463
#454 := (= #163 #495)
#510 := (or #341 #454)
#483 := [quant-inst]: #510
#460 := [unit-resolution #483 #675]: #454
#436 := [trans #460 #464]: #435
#437 := [trans #436 #465]: #173
#176 := (not #173)
#36 := (+ #28 #33)
#37 := (- #26 #36)
#38 := (f3 #37)
#29 := (- #26 #28)
#30 := (f3 #29)
#31 := (f4 #30)
#34 := (- #31 #33)
#35 := (f3 #34)
#39 := (= #35 #38)
#40 := (not #39)
#177 := (iff #40 #176)
#174 := (iff #39 #173)
#171 := (= #38 #170)
#168 := (= #37 #167)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#164 := (= #35 #163)
#161 := (= #34 #158)
#154 := (- #151 #33)
#159 := (= #154 #158)
#160 := [rewrite]: #159
#155 := (= #34 #154)
#152 := (= #31 #151)
#149 := (= #30 #148)
#146 := (= #29 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#162 := [trans #156 #160]: #161
#165 := [monotonicity #162]: #164
#175 := [monotonicity #165 #172]: #174
#178 := [monotonicity #175]: #177
#142 := [asserted]: #40
#181 := [mp #142 #178]: #176
#438 := [unit-resolution #181 #437]: false
#285 := [lemma #438]: #442
#423 := [unit-resolution #285 #444]: #440
#566 := (or #503 #575)
#570 := (or #641 #503 #575)
#580 := (or #575 #503)
#571 := (or #641 #580)
#557 := (iff #571 #570)
#572 := (or #641 #566)
#555 := (iff #572 #570)
#556 := [rewrite]: #555
#552 := (iff #571 #572)
#567 := (iff #580 #566)
#569 := [rewrite]: #567
#553 := [monotonicity #569]: #552
#558 := [trans #553 #556]: #557
#568 := [quant-inst]: #571
#559 := [mp #568 #558]: #570
#426 := [unit-resolution #559 #688]: #566
#430 := [unit-resolution #426 #423]: #503
#433 := (or #432 #504 #353)
#431 := [th-lemma]: #433
#434 := [unit-resolution #431 #443 #430]: #432
#428 := [unit-resolution #427 #434]: #422
#429 := [unit-resolution #424 #428]: #449
#654 := (or #294 #319)
#642 := (or #641 #294 #319)
#364 := (or #641 #654)
#366 := (iff #364 #642)
#367 := [rewrite]: #366
#365 := [quant-inst]: #364
#260 := [mp #365 #367]: #642
#419 := [unit-resolution #260 #688]: #654
#409 := [unit-resolution #419 #429]: #294
#638 := (>= #151 0::int)
#411 := (not #638)
#412 := (or #504 #319 #411 #353)
#415 := [th-lemma]: #412
#416 := [unit-resolution #415 #429 #443 #430]: #411
#420 := (not #294)
#413 := (or #420 #638)
#421 := [th-lemma]: #413
#414 := [unit-resolution #421 #416 #409]: false
#417 := [lemma #414]: #353
#624 := (or #347 #636)
#627 := (or #307 #347 #636)
#655 := (not #652)
#361 := (= #158 #360)
#635 := (or #361 #655)
#622 := (or #307 #635)
#615 := (iff #622 #627)
#469 := (or #307 #624)
#613 := (iff #469 #627)
#614 := [rewrite]: #613
#470 := (iff #622 #469)
#621 := (iff #635 #624)
#630 := (or #636 #347)
#625 := (iff #630 #624)
#620 := [rewrite]: #625
#634 := (iff #635 #630)
#629 := (iff #655 #347)
#633 := [monotonicity #632]: #629
#639 := (iff #361 #636)
#640 := [rewrite]: #639
#623 := [monotonicity #640 #633]: #634
#626 := [trans #623 #620]: #621
#471 := [monotonicity #626]: #470
#616 := [trans #471 #614]: #615
#628 := [quant-inst]: #622
#610 := [mp #628 #616]: #627
#326 := [unit-resolution #610 #682]: #624
#328 := [unit-resolution #326 #417]: #636
#329 := (not #636)
#320 := (or #329 #611)
#333 := [th-lemma]: #320
#334 := [unit-resolution #333 #328]: #611
#617 := (>= #351 0::int)
#335 := (or #329 #617)
#336 := [th-lemma]: #335
#337 := [unit-resolution #336 #328]: #617
#338 := [th-lemma #337 #334 #359 #357 #379 #398]: #327
#321 := [monotonicity #338]: #463
#323 := [trans #460 #321]: #435
#324 := [trans #323 #465]: #173
#303 := [unit-resolution #181 #324]: false
#305 := [lemma #303]: #504
#501 := (>= #360 0::int)
#310 := (not #617)
#311 := (or #501 #310 #347)
#312 := [th-lemma]: #311
#313 := [unit-resolution #312 #337 #417]: #501
#304 := (not #611)
#315 := (not #501)
#316 := (or #314 #503 #315 #304)
#297 := [th-lemma]: #316
#299 := [unit-resolution #297 #334 #313 #305]: #314
#300 := [unit-resolution #349 #299]: #422
#637 := (<= #151 0::int)
#270 := (not #637)
#486 := (<= #360 0::int)
#289 := (not #486)
#298 := [unit-resolution #426 #305]: #575
#301 := [unit-resolution #285 #298]: #441
#295 := (or #618 #289)
#291 := (or #618 #289 #315)
#292 := [th-lemma]: #291
#290 := [unit-resolution #292 #313]: #295
#296 := [unit-resolution #290 #301]: #289
#275 := (or #270 #380 #486 #304)
#276 := [th-lemma]: #275
#281 := [unit-resolution #276 #334 #296 #376]: #270
#283 := (or #420 #637)
#284 := [th-lemma]: #283
#286 := [unit-resolution #284 #281]: #420
#282 := [unit-resolution #419 #286]: #319
[unit-resolution #424 #282 #300]: false
unsat
32c022ad17c4cf631a4452767891ed2e2599b6b6 60 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#26 := f5
#27 := (f4 f5)
#136 := (f3 #27)
#142 := (= f5 #136)
#147 := (not #142)
#25 := 1::int
#28 := (* 1::int #27)
#29 := (f3 #28)
#30 := (= #29 f5)
#31 := (not #30)
#148 := (iff #31 #147)
#145 := (iff #30 #142)
#139 := (= #136 f5)
#143 := (iff #139 #142)
#144 := [rewrite]: #143
#140 := (iff #30 #139)
#137 := (= #29 #136)
#134 := (= #28 #27)
#135 := [rewrite]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#146 := [trans #141 #144]: #145
#149 := [monotonicity #146]: #148
#133 := [asserted]: #31
#152 := [mp #133 #149]: #147
#8 := (:var 0 S2)
#9 := (f4 #8)
#639 := (pattern #9)
#10 := (f3 #9)
#49 := (= #8 #10)
#640 := (forall (vars (?v0 S2)) (:pat #639) #49)
#52 := (forall (vars (?v0 S2)) #49)
#641 := (iff #52 #640)
#643 := (iff #640 #640)
#644 := [rewrite]: #643
#642 := [rewrite]: #641
#645 := [trans #642 #644]: #641
#164 := (~ #52 #52)
#162 := (~ #49 #49)
#163 := [refl]: #162
#165 := [nnf-pos #163]: #164
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#53 := (iff #12 #52)
#50 := (iff #11 #49)
#51 := [rewrite]: #50
#54 := [quant-intro #51]: #53
#48 := [asserted]: #12
#57 := [mp #48 #54]: #52
#153 := [mp~ #57 #165]: #52
#646 := [mp #153 #645]: #640
#225 := (not #640)
#310 := (or #225 #142)
#311 := [quant-inst]: #310
[unit-resolution #311 #646 #152]: false
unsat
2ac54103a8769196595536554467f2a8a0f9df5d 35 0
#2 := false
decl f3 :: (-> int S2)
#25 := 3::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#26 := f5
#27 := (f4 f5)
#30 := (* #27 3::int)
#31 := (f3 #30)
#28 := (* 3::int #27)
#29 := (f3 #28)
#32 := (= #29 #31)
#33 := (not #32)
#152 := (iff #33 false)
#1 := true
#147 := (not true)
#150 := (iff #147 false)
#151 := [rewrite]: #150
#148 := (iff #33 #147)
#145 := (iff #32 true)
#140 := (= #29 #29)
#143 := (iff #140 true)
#144 := [rewrite]: #143
#141 := (iff #32 #140)
#138 := (= #31 #29)
#136 := (= #30 #28)
#137 := [rewrite]: #136
#139 := [monotonicity #137]: #138
#142 := [monotonicity #139]: #141
#146 := [trans #142 #144]: #145
#149 := [monotonicity #146]: #148
#153 := [trans #149 #151]: #152
#135 := [asserted]: #33
[mp #135 #153]: false
unsat
9f38d775fa2d48952160d8de09d7750a63b8d751 60 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#137 := -1::int
#138 := (* -1::int #28)
#139 := (+ #26 #138)
#140 := (<= #139 0::int)
#143 := (ite #140 #26 #28)
#151 := (* -1::int #143)
#637 := (+ #28 #151)
#266 := (>= #637 0::int)
#317 := (= #28 #143)
#232 := (not #140)
#231 := (= #26 #143)
#624 := (not #231)
#152 := (+ #26 #151)
#150 := (>= #152 0::int)
#156 := (not #150)
#29 := (<= #26 #28)
#30 := (ite #29 #26 #28)
#31 := (<= #30 #26)
#32 := (not #31)
#157 := (iff #32 #156)
#154 := (iff #31 #150)
#146 := (<= #143 #26)
#149 := (iff #146 #150)
#153 := [rewrite]: #149
#147 := (iff #31 #146)
#144 := (= #30 #143)
#141 := (iff #29 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#155 := [trans #148 #153]: #154
#158 := [monotonicity #155]: #157
#134 := [asserted]: #32
#159 := [mp #134 #158]: #156
#280 := [hypothesis]: #231
#625 := (or #624 #150)
#626 := [th-lemma]: #625
#627 := [unit-resolution #626 #280 #159]: false
#622 := [lemma #627]: #624
#318 := (or #232 #231)
#319 := [def-axiom]: #318
#629 := [unit-resolution #319 #622]: #232
#310 := (or #140 #317)
#321 := [def-axiom]: #310
#631 := [unit-resolution #321 #629]: #317
#271 := (not #317)
#272 := (or #271 #266)
#632 := [th-lemma]: #272
#630 := [unit-resolution #632 #631]: #266
[th-lemma #159 #629 #630]: false
unsat
4a98bcbed5ad69511a5cad5cf29dba7132d6fdfc 60 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#137 := -1::int
#138 := (* -1::int #28)
#139 := (+ #26 #138)
#140 := (<= #139 0::int)
#143 := (ite #140 #26 #28)
#150 := (* -1::int #143)
#151 := (+ #28 #150)
#149 := (>= #151 0::int)
#156 := (not #149)
#29 := (<= #26 #28)
#30 := (ite #29 #26 #28)
#31 := (<= #30 #28)
#32 := (not #31)
#157 := (iff #32 #156)
#154 := (iff #31 #149)
#146 := (<= #143 #28)
#152 := (iff #146 #149)
#153 := [rewrite]: #152
#147 := (iff #31 #146)
#144 := (= #30 #143)
#141 := (iff #29 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#155 := [trans #148 #153]: #154
#158 := [monotonicity #155]: #157
#134 := [asserted]: #32
#159 := [mp #134 #158]: #156
#317 := (= #28 #143)
#232 := (not #140)
#625 := [hypothesis]: #140
#637 := (+ #26 #150)
#624 := (>= #637 0::int)
#231 := (= #26 #143)
#318 := (or #232 #231)
#319 := [def-axiom]: #318
#626 := [unit-resolution #319 #625]: #231
#627 := (not #231)
#622 := (or #627 #624)
#628 := [th-lemma]: #622
#266 := [unit-resolution #628 #626]: #624
#629 := [th-lemma #266 #159 #625]: false
#631 := [lemma #629]: #232
#310 := (or #140 #317)
#321 := [def-axiom]: #310
#271 := [unit-resolution #321 #631]: #317
#272 := (not #317)
#632 := (or #272 #149)
#630 := [th-lemma]: #632
[unit-resolution #630 #271 #159]: false
unsat
d8f08e2943c080c0d03c02c5a3f03bf5fa773cee 253 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#138 := -1::int
#139 := (* -1::int #28)
#140 := (+ #26 #139)
#141 := (<= #140 0::int)
#144 := (ite #141 #26 #28)
#153 := (* -1::int #144)
#639 := (+ #26 #153)
#626 := (>= #639 0::int)
#274 := (not #626)
#643 := (>= #28 0::int)
#333 := (= #28 0::int)
decl f3 :: (-> int S2)
#325 := (f3 #28)
#644 := (f4 #325)
#638 := (= #644 0::int)
#340 := (not #643)
#580 := [hypothesis]: #340
#298 := (or #638 #643)
#14 := (:var 0 int)
#16 := (f3 #14)
#656 := (pattern #16)
#76 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#124 := (or #22 #76)
#663 := (forall (vars (?v0 int)) (:pat #656) #124)
#129 := (forall (vars (?v0 int)) #124)
#666 := (iff #129 #663)
#664 := (iff #124 #124)
#665 := [refl]: #664
#667 := [quant-intro #665]: #666
#165 := (~ #129 #129)
#177 := (~ #124 #124)
#178 := [refl]: #177
#166 := [nnf-pos #178]: #165
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#132 := (iff #24 #129)
#95 := (= 0::int #17)
#101 := (not #21)
#102 := (or #101 #95)
#107 := (forall (vars (?v0 int)) #102)
#130 := (iff #107 #129)
#127 := (iff #102 #124)
#121 := (or #76 #22)
#125 := (iff #121 #124)
#126 := [rewrite]: #125
#122 := (iff #102 #121)
#119 := (iff #95 #22)
#120 := [rewrite]: #119
#117 := (iff #101 #76)
#77 := (not #76)
#112 := (not #77)
#115 := (iff #112 #76)
#116 := [rewrite]: #115
#113 := (iff #101 #112)
#110 := (iff #21 #77)
#111 := [rewrite]: #110
#114 := [monotonicity #111]: #113
#118 := [trans #114 #116]: #117
#123 := [monotonicity #118 #120]: #122
#128 := [trans #123 #126]: #127
#131 := [quant-intro #128]: #130
#108 := (iff #24 #107)
#105 := (iff #23 #102)
#98 := (implies #21 #95)
#103 := (iff #98 #102)
#104 := [rewrite]: #103
#99 := (iff #23 #98)
#96 := (iff #22 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#106 := [trans #100 #104]: #105
#109 := [quant-intro #106]: #108
#133 := [trans #109 #131]: #132
#94 := [asserted]: #24
#134 := [mp #94 #133]: #129
#179 := [mp~ #134 #166]: #129
#668 := [mp #179 #667]: #663
#645 := (not #663)
#623 := (or #645 #638 #643)
#286 := (or #645 #298)
#288 := (iff #286 #623)
#289 := [rewrite]: #288
#287 := [quant-inst]: #286
#625 := [mp #287 #289]: #623
#616 := [unit-resolution #625 #668]: #298
#482 := [unit-resolution #616 #580]: #638
#331 := (= #28 #644)
#322 := (= f6 #325)
#8 := (:var 0 S2)
#9 := (f4 #8)
#648 := (pattern #9)
#10 := (f3 #9)
#51 := (= #8 #10)
#649 := (forall (vars (?v0 S2)) (:pat #648) #51)
#54 := (forall (vars (?v0 S2)) #51)
#650 := (iff #54 #649)
#652 := (iff #649 #649)
#653 := [rewrite]: #652
#651 := [rewrite]: #650
#654 := [trans #651 #653]: #650
#173 := (~ #54 #54)
#171 := (~ #51 #51)
#172 := [refl]: #171
#174 := [nnf-pos #172]: #173
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#55 := (iff #12 #54)
#52 := (iff #11 #51)
#53 := [rewrite]: #52
#56 := [quant-intro #53]: #55
#50 := [asserted]: #12
#59 := [mp #50 #56]: #54
#162 := [mp~ #59 #174]: #54
#655 := [mp #162 #654]: #649
#326 := (not #649)
#429 := (or #326 #322)
#636 := [quant-inst]: #429
#330 := [unit-resolution #636 #655]: #322
#332 := [monotonicity #330]: #331
#577 := [trans #332 #482]: #333
#578 := (not #333)
#581 := (or #578 #643)
#466 := [th-lemma]: #581
#481 := [unit-resolution #466 #580 #577]: false
#483 := [lemma #481]: #643
#485 := (or #340 #274)
#154 := (+ #28 #153)
#155 := (+ #26 #154)
#151 := (>= #155 0::int)
#158 := (not #151)
#31 := (+ #26 #28)
#29 := (<= #26 #28)
#30 := (ite #29 #26 #28)
#32 := (<= #30 #31)
#33 := (not #32)
#159 := (iff #33 #158)
#156 := (iff #32 #151)
#147 := (<= #144 #31)
#150 := (iff #147 #151)
#152 := [rewrite]: #150
#148 := (iff #32 #147)
#145 := (= #30 #144)
#142 := (iff #29 #141)
#143 := [rewrite]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#157 := [trans #149 #152]: #156
#160 := [monotonicity #157]: #159
#135 := [asserted]: #33
#161 := [mp #135 #160]: #158
#341 := (or #340 #274 #151)
#615 := [th-lemma]: #341
#486 := [unit-resolution #615 #161]: #485
#487 := [unit-resolution #486 #483]: #274
#233 := (= #26 #144)
#324 := (f3 #26)
#299 := (f4 #324)
#310 := (= #299 0::int)
#586 := (iff #310 #233)
#587 := (iff #233 #310)
#584 := (= #144 0::int)
#607 := (>= #154 0::int)
#319 := (= #28 #144)
#604 := (iff #310 #319)
#614 := (iff #319 #310)
#612 := (= 0::int #299)
#613 := (iff #612 #310)
#610 := [commutativity]: #613
#327 := (iff #319 #612)
#617 := (= #144 #299)
#347 := (= #26 #299)
#252 := (= f5 #324)
#305 := (or #326 #252)
#640 := [quant-inst]: #305
#344 := [unit-resolution #640 #655]: #252
#240 := [monotonicity #344]: #347
#345 := (= #144 #26)
#627 := (not #319)
#628 := [hypothesis]: #627
#312 := (or #141 #319)
#323 := [def-axiom]: #312
#629 := [unit-resolution #323 #628]: #141
#234 := (not #141)
#320 := (or #234 #233)
#321 := [def-axiom]: #320
#624 := [unit-resolution #321 #629]: #233
#346 := [symm #624]: #345
#618 := [trans #346 #240]: #617
#630 := (not #233)
#268 := (or #630 #626)
#631 := [th-lemma]: #268
#633 := [unit-resolution #631 #624]: #626
#619 := [unit-resolution #615 #633 #161]: #340
#620 := [unit-resolution #616 #619]: #638
#611 := [trans #332 #620]: #333
#609 := [monotonicity #611 #618]: #327
#603 := [trans #609 #610]: #614
#605 := [symm #603]: #604
#642 := (>= #26 0::int)
#273 := (not #642)
#634 := (or #273 #234 #274 #151)
#632 := [th-lemma]: #634
#635 := [unit-resolution #632 #629 #161 #633]: #273
#311 := (or #310 #642)
#646 := (or #645 #310 #642)
#641 := (or #645 #311)
#637 := (iff #641 #646)
#297 := [rewrite]: #637
#647 := [quant-inst]: #641
#302 := [mp #647 #297]: #646
#621 := [unit-resolution #302 #668]: #311
#622 := [unit-resolution #621 #635]: #310
#600 := [mp #622 #605]: #319
#601 := [unit-resolution #628 #600]: false
#606 := [lemma #601]: #319
#608 := (or #627 #607)
#449 := [th-lemma]: #608
#450 := [unit-resolution #449 #606]: #607
#602 := [hypothesis]: #630
#590 := [unit-resolution #321 #602]: #234
#451 := (not #607)
#591 := (or #340 #451 #141 #151)
#597 := [th-lemma]: #591
#598 := [unit-resolution #597 #590 #161 #450]: #340
#592 := [unit-resolution #616 #598]: #638
#430 := (= #144 #644)
#599 := (= #144 #28)
#428 := [symm #606]: #599
#431 := [trans #428 #332]: #430
#585 := [trans #431 #592]: #584
#588 := [monotonicity #240 #585]: #587
#589 := [symm #588]: #586
#593 := (or #273 #451 #151)
#594 := [th-lemma]: #593
#595 := [unit-resolution #594 #450 #161]: #273
#596 := [unit-resolution #621 #595]: #310
#471 := [mp #596 #589]: #233
#472 := [unit-resolution #602 #471]: false
#473 := [lemma #472]: #233
[unit-resolution #631 #473 #487]: false
unsat
9645c7f91c8b74fcb674b8c2a12640172b195c7f 103 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#143 := -1::int
#146 := (* -1::int #31)
#150 := (+ #28 #146)
#151 := (<= #150 0::int)
#154 := (ite #151 #28 #31)
#162 := (* -1::int #154)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#163 := (+ #26 #162)
#161 := (>= #163 0::int)
#177 := (* -1::int #28)
#178 := (+ #26 #177)
#176 := (>= #178 0::int)
#175 := (not #176)
#147 := (+ #26 #146)
#145 := (>= #147 0::int)
#144 := (not #145)
#187 := (and #144 #161 #175)
#33 := (<= #28 #31)
#34 := (ite #33 #28 #31)
#35 := (< #26 #34)
#36 := (not #35)
#32 := (< #26 #31)
#37 := (and #32 #36)
#29 := (< #26 #28)
#38 := (and #29 #37)
#190 := (iff #38 #187)
#181 := (and #144 #161)
#184 := (and #175 #181)
#188 := (iff #184 #187)
#189 := [rewrite]: #188
#185 := (iff #38 #184)
#182 := (iff #37 #181)
#173 := (iff #36 #161)
#160 := (not #161)
#168 := (not #160)
#171 := (iff #168 #161)
#172 := [rewrite]: #171
#169 := (iff #36 #168)
#166 := (iff #35 #160)
#157 := (< #26 #154)
#164 := (iff #157 #160)
#165 := [rewrite]: #164
#158 := (iff #35 #157)
#155 := (= #34 #154)
#152 := (iff #33 #151)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#167 := [trans #159 #165]: #166
#170 := [monotonicity #167]: #169
#174 := [trans #170 #172]: #173
#148 := (iff #32 #144)
#149 := [rewrite]: #148
#183 := [monotonicity #149 #174]: #182
#179 := (iff #29 #175)
#180 := [rewrite]: #179
#186 := [monotonicity #180 #183]: #185
#191 := [trans #186 #189]: #190
#140 := [asserted]: #38
#192 := [mp #140 #191]: #187
#194 := [and-elim #192]: #161
#193 := [and-elim #192]: #144
#365 := (+ #31 #162)
#638 := (<= #365 0::int)
#353 := (= #31 #154)
#268 := (not #151)
#267 := (= #28 #154)
#643 := (not #267)
#652 := (+ #28 #162)
#374 := (<= #652 0::int)
#645 := (not #374)
#195 := [and-elim #192]: #175
#366 := [hypothesis]: #374
#367 := [th-lemma #366 #195 #194]: false
#646 := [lemma #367]: #645
#361 := [hypothesis]: #267
#647 := (or #643 #374)
#644 := [th-lemma]: #647
#648 := [unit-resolution #644 #361 #646]: false
#637 := [lemma #648]: #643
#354 := (or #268 #267)
#355 := [def-axiom]: #354
#634 := [unit-resolution #355 #637]: #268
#346 := (or #151 #353)
#357 := [def-axiom]: #346
#635 := [unit-resolution #357 #634]: #353
#640 := (not #353)
#641 := (or #640 #638)
#636 := [th-lemma]: #641
#642 := [unit-resolution #636 #635]: #638
[th-lemma #642 #193 #194]: false
unsat
fa8e0a2694e045a39788da23e6dc3bda6b4f57dc 117 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#13 := 0::int
#141 := -1::int
#142 := (* -1::int #28)
#143 := (+ #26 #142)
#154 := (>= #143 0::int)
#156 := (ite #154 #28 #26)
#159 := (f3 #156)
#144 := (<= #143 0::int)
#147 := (ite #144 #26 #28)
#150 := (f3 #147)
#162 := (= #150 #159)
#649 := (f3 #26)
#558 := (= #649 #159)
#556 := (= #159 #649)
#564 := (= #156 #26)
#259 := (= #26 #156)
#436 := (f3 #28)
#577 := (= #436 #159)
#586 := (= #159 #436)
#479 := (= #156 #28)
#331 := (= #28 #156)
#489 := (not #259)
#584 := [hypothesis]: #489
#312 := (or #154 #259)
#647 := [def-axiom]: #312
#588 := [unit-resolution #647 #584]: #154
#332 := (not #154)
#329 := (or #332 #331)
#333 := [def-axiom]: #329
#490 := [unit-resolution #333 #588]: #331
#480 := [symm #490]: #479
#590 := [monotonicity #480]: #586
#579 := [symm #590]: #577
#491 := (= #150 #436)
#492 := (= #147 #28)
#326 := (= #28 #147)
#241 := (not #144)
#496 := (or #241 #259)
#473 := (= #26 #28)
#585 := [hypothesis]: #144
#488 := [th-lemma #588 #585]: #473
#494 := [trans #488 #490]: #259
#495 := [unit-resolution #584 #494]: false
#589 := [lemma #495]: #496
#439 := [unit-resolution #589 #584]: #241
#319 := (or #144 #326)
#330 := [def-axiom]: #319
#587 := [unit-resolution #330 #439]: #326
#493 := [symm #587]: #492
#484 := [monotonicity #493]: #491
#571 := [trans #484 #579]: #162
#165 := (not #162)
#32 := (<= #28 #26)
#33 := (ite #32 #28 #26)
#34 := (f3 #33)
#29 := (<= #26 #28)
#30 := (ite #29 #26 #28)
#31 := (f3 #30)
#35 := (= #31 #34)
#36 := (not #35)
#166 := (iff #36 #165)
#163 := (iff #35 #162)
#160 := (= #34 #159)
#157 := (= #33 #156)
#153 := (iff #32 #154)
#155 := [rewrite]: #153
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#151 := (= #31 #150)
#148 := (= #30 #147)
#145 := (iff #29 #144)
#146 := [rewrite]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#164 := [monotonicity #152 #161]: #163
#167 := [monotonicity #164]: #166
#138 := [asserted]: #36
#168 := [mp #138 #167]: #165
#568 := [unit-resolution #168 #571]: false
#570 := [lemma #568]: #259
#565 := [symm #570]: #564
#557 := [monotonicity #565]: #556
#555 := [symm #557]: #558
#553 := (= #150 #649)
#562 := (= #147 #26)
#240 := (= #26 #147)
#435 := [hypothesis]: #241
#437 := (or #154 #144)
#596 := [th-lemma]: #437
#478 := [unit-resolution #596 #435]: #154
#580 := [unit-resolution #333 #478]: #331
#581 := [symm #580]: #479
#572 := [monotonicity #581]: #586
#573 := [symm #572]: #577
#582 := [unit-resolution #330 #435]: #326
#578 := [symm #582]: #492
#583 := [monotonicity #578]: #491
#574 := [trans #583 #573]: #162
#575 := [unit-resolution #168 #574]: false
#569 := [lemma #575]: #144
#327 := (or #241 #240)
#328 := [def-axiom]: #327
#566 := [unit-resolution #328 #569]: #240
#567 := [symm #566]: #562
#554 := [monotonicity #567]: #553
#559 := [trans #554 #555]: #162
[unit-resolution #168 #559]: false
unsat
da2ff9ef6139e0a66caeccee0485bd5a70c1edcc 156 0
#2 := false
decl f3 :: (-> int S2)
#13 := 0::int
#30 := (f3 0::int)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := (<= #26 0::int)
#28 := (ite #27 #26 0::int)
#29 := (f3 #28)
#31 := (= #29 #30)
#294 := (= #28 0::int)
#299 := (f3 #26)
#576 := (f4 #299)
#577 := (= #576 0::int)
#442 := (= #26 0::int)
#567 := (not #294)
#573 := [hypothesis]: #567
#287 := (or #27 #294)
#298 := [def-axiom]: #287
#404 := [unit-resolution #298 #573]: #27
#581 := (>= #26 0::int)
#408 := (not #577)
#556 := (iff #567 #408)
#448 := (iff #294 #577)
#565 := (= #28 #576)
#564 := (= #26 #576)
#561 := (= #576 #26)
#568 := (= #299 f5)
#227 := (= f5 #299)
#8 := (:var 0 S2)
#9 := (f4 #8)
#624 := (pattern #9)
#10 := (f3 #9)
#50 := (= #8 #10)
#625 := (forall (vars (?v0 S2)) (:pat #624) #50)
#53 := (forall (vars (?v0 S2)) #50)
#626 := (iff #53 #625)
#628 := (iff #625 #625)
#629 := [rewrite]: #628
#627 := [rewrite]: #626
#630 := [trans #627 #629]: #626
#148 := (~ #53 #53)
#146 := (~ #50 #50)
#147 := [refl]: #146
#149 := [nnf-pos #147]: #148
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#54 := (iff #12 #53)
#51 := (iff #11 #50)
#52 := [rewrite]: #51
#55 := [quant-intro #52]: #54
#49 := [asserted]: #12
#58 := [mp #49 #55]: #53
#137 := [mp~ #58 #149]: #53
#631 := [mp #137 #630]: #625
#301 := (not #625)
#280 := (or #301 #227)
#616 := [quant-inst]: #280
#574 := [unit-resolution #616 #631]: #227
#575 := [symm #574]: #568
#563 := [monotonicity #575]: #561
#562 := [symm #563]: #564
#407 := (= #28 #26)
#208 := (= #26 #28)
#209 := (not #27)
#295 := (or #209 #208)
#296 := [def-axiom]: #295
#406 := [unit-resolution #296 #404]: #208
#560 := [symm #406]: #407
#447 := [trans #560 #562]: #565
#449 := [monotonicity #447]: #448
#458 := [monotonicity #449]: #556
#553 := [mp #573 #458]: #408
#582 := (or #577 #581)
#14 := (:var 0 int)
#16 := (f3 #14)
#632 := (pattern #16)
#75 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#123 := (or #22 #75)
#639 := (forall (vars (?v0 int)) (:pat #632) #123)
#128 := (forall (vars (?v0 int)) #123)
#642 := (iff #128 #639)
#640 := (iff #123 #123)
#641 := [refl]: #640
#643 := [quant-intro #641]: #642
#140 := (~ #128 #128)
#152 := (~ #123 #123)
#153 := [refl]: #152
#141 := [nnf-pos #153]: #140
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#131 := (iff #24 #128)
#94 := (= 0::int #17)
#100 := (not #21)
#101 := (or #100 #94)
#106 := (forall (vars (?v0 int)) #101)
#129 := (iff #106 #128)
#126 := (iff #101 #123)
#120 := (or #75 #22)
#124 := (iff #120 #123)
#125 := [rewrite]: #124
#121 := (iff #101 #120)
#118 := (iff #94 #22)
#119 := [rewrite]: #118
#116 := (iff #100 #75)
#76 := (not #75)
#111 := (not #76)
#114 := (iff #111 #75)
#115 := [rewrite]: #114
#112 := (iff #100 #111)
#109 := (iff #21 #76)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#117 := [trans #113 #115]: #116
#122 := [monotonicity #117 #119]: #121
#127 := [trans #122 #125]: #126
#130 := [quant-intro #127]: #129
#107 := (iff #24 #106)
#104 := (iff #23 #101)
#97 := (implies #21 #94)
#102 := (iff #97 #101)
#103 := [rewrite]: #102
#98 := (iff #23 #97)
#95 := (iff #22 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#105 := [trans #99 #103]: #104
#108 := [quant-intro #105]: #107
#132 := [trans #108 #130]: #131
#93 := [asserted]: #24
#133 := [mp #93 #132]: #128
#154 := [mp~ #133 #141]: #128
#644 := [mp #154 #643]: #639
#614 := (not #639)
#584 := (or #614 #577 #581)
#425 := (or #614 #582)
#427 := (iff #425 #584)
#569 := [rewrite]: #427
#426 := [quant-inst]: #425
#570 := [mp #426 #569]: #584
#554 := [unit-resolution #570 #644]: #582
#557 := [unit-resolution #554 #553]: #581
#457 := [th-lemma #557 #404]: #442
#459 := [trans #563 #457]: #577
#460 := [unit-resolution #553 #459]: false
#453 := [lemma #460]: #294
#583 := [monotonicity #453]: #31
#32 := (not #31)
#134 := [asserted]: #32
[unit-resolution #134 #583]: false
unsat
88cc1cfdc9ecc3f2138c9180ec327ce09b9116c5 60 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#137 := -1::int
#138 := (* -1::int #28)
#139 := (+ #26 #138)
#140 := (<= #139 0::int)
#143 := (ite #140 #28 #26)
#149 := (* -1::int #143)
#150 := (+ #26 #149)
#151 := (<= #150 0::int)
#156 := (not #151)
#29 := (<= #26 #28)
#30 := (ite #29 #28 #26)
#31 := (<= #26 #30)
#32 := (not #31)
#157 := (iff #32 #156)
#154 := (iff #31 #151)
#146 := (<= #26 #143)
#152 := (iff #146 #151)
#153 := [rewrite]: #152
#147 := (iff #31 #146)
#144 := (= #30 #143)
#141 := (iff #29 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#155 := [trans #148 #153]: #154
#158 := [monotonicity #155]: #157
#134 := [asserted]: #32
#159 := [mp #134 #158]: #156
#317 := (= #26 #143)
#232 := (not #140)
#625 := [hypothesis]: #140
#637 := (+ #28 #149)
#280 := (<= #637 0::int)
#231 := (= #28 #143)
#318 := (or #232 #231)
#319 := [def-axiom]: #318
#626 := [unit-resolution #319 #625]: #231
#627 := (not #231)
#622 := (or #627 #280)
#628 := [th-lemma]: #622
#266 := [unit-resolution #628 #626]: #280
#629 := [th-lemma #266 #159 #625]: false
#631 := [lemma #629]: #232
#310 := (or #140 #317)
#321 := [def-axiom]: #310
#271 := [unit-resolution #321 #631]: #317
#272 := (not #317)
#632 := (or #272 #151)
#630 := [th-lemma]: #632
[unit-resolution #630 #271 #159]: false
unsat
0122efc10e38b5cd510be1952412037a9414e10c 60 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#137 := -1::int
#140 := (* -1::int #28)
#141 := (+ #26 #140)
#139 := (>= #141 0::int)
#143 := (ite #139 #26 #28)
#149 := (* -1::int #143)
#637 := (+ #28 #149)
#628 := (<= #637 0::int)
#317 := (= #28 #143)
#232 := (not #139)
#231 := (= #26 #143)
#624 := (not #231)
#150 := (+ #26 #149)
#151 := (<= #150 0::int)
#156 := (not #151)
#29 := (<= #28 #26)
#30 := (ite #29 #26 #28)
#31 := (<= #26 #30)
#32 := (not #31)
#157 := (iff #32 #156)
#154 := (iff #31 #151)
#146 := (<= #26 #143)
#152 := (iff #146 #151)
#153 := [rewrite]: #152
#147 := (iff #31 #146)
#144 := (= #30 #143)
#138 := (iff #29 #139)
#142 := [rewrite]: #138
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#155 := [trans #148 #153]: #154
#158 := [monotonicity #155]: #157
#134 := [asserted]: #32
#159 := [mp #134 #158]: #156
#280 := [hypothesis]: #231
#625 := (or #624 #151)
#626 := [th-lemma]: #625
#627 := [unit-resolution #626 #280 #159]: false
#622 := [lemma #627]: #624
#318 := (or #232 #231)
#319 := [def-axiom]: #318
#629 := [unit-resolution #319 #622]: #232
#310 := (or #139 #317)
#321 := [def-axiom]: #310
#631 := [unit-resolution #321 #629]: #317
#271 := (not #317)
#272 := (or #271 #628)
#632 := [th-lemma]: #272
#630 := [unit-resolution #632 #631]: #628
[th-lemma #159 #629 #630]: false
unsat
7c9e3abcd68f2ba67093ec54bd9616e29dfd7553 437 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#142 := -1::int
#143 := (* -1::int #28)
#144 := (+ #26 #143)
#172 := (<= #144 0::int)
#175 := (ite #172 #28 #26)
#181 := (* -1::int #175)
#565 := (+ #26 #181)
#496 := (<= #565 0::int)
#354 := (= #26 #175)
#269 := (not #172)
#566 := [hypothesis]: #172
decl f3 :: (-> int S2)
#147 := (f3 #144)
#150 := (f4 #147)
#375 := (<= #150 0::int)
#504 := (not #375)
#153 := (* -1::int #26)
#154 := (+ #153 #28)
#157 := (f3 #154)
#160 := (f4 #157)
#182 := (+ #160 #181)
#183 := (+ #150 #182)
#184 := (<= #183 0::int)
#189 := (not #184)
#36 := (<= #26 #28)
#37 := (ite #36 #28 #26)
#32 := (- #28 #26)
#33 := (f3 #32)
#34 := (f4 #33)
#29 := (- #26 #28)
#30 := (f3 #29)
#31 := (f4 #30)
#35 := (+ #31 #34)
#38 := (<= #35 #37)
#39 := (not #38)
#192 := (iff #39 #189)
#163 := (+ #150 #160)
#166 := (<= #163 #37)
#169 := (not #166)
#190 := (iff #169 #189)
#187 := (iff #166 #184)
#178 := (<= #163 #175)
#185 := (iff #178 #184)
#186 := [rewrite]: #185
#179 := (iff #166 #178)
#176 := (= #37 #175)
#173 := (iff #36 #172)
#174 := [rewrite]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#188 := [trans #180 #186]: #187
#191 := [monotonicity #188]: #190
#170 := (iff #39 #169)
#167 := (iff #38 #166)
#164 := (= #35 #163)
#161 := (= #34 #160)
#158 := (= #33 #157)
#155 := (= #32 #154)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#151 := (= #31 #150)
#148 := (= #30 #147)
#145 := (= #29 #144)
#146 := [rewrite]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#165 := [monotonicity #152 #162]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#193 := [trans #171 #191]: #192
#141 := [asserted]: #39
#194 := [mp #141 #193]: #189
#366 := (+ #143 #160)
#367 := (+ #26 #366)
#631 := (<= #367 0::int)
#655 := (= #367 0::int)
#649 := (or #269 #655)
#14 := (:var 0 int)
#16 := (f3 #14)
#691 := (pattern #16)
#82 := (>= #14 0::int)
#83 := (not #82)
#17 := (f4 #16)
#64 := (= #14 #17)
#89 := (or #64 #83)
#692 := (forall (vars (?v0 int)) (:pat #691) #89)
#94 := (forall (vars (?v0 int)) #89)
#695 := (iff #94 #692)
#693 := (iff #89 #89)
#694 := [refl]: #693
#696 := [quant-intro #694]: #695
#198 := (~ #94 #94)
#195 := (~ #89 #89)
#210 := [refl]: #195
#199 := [nnf-pos #210]: #198
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#97 := (iff #20 #94)
#71 := (not #15)
#72 := (or #71 #64)
#77 := (forall (vars (?v0 int)) #72)
#95 := (iff #77 #94)
#92 := (iff #72 #89)
#86 := (or #83 #64)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #72 #86)
#84 := (iff #71 #83)
#80 := (iff #15 #82)
#81 := [rewrite]: #80
#85 := [monotonicity #81]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#96 := [quant-intro #93]: #95
#78 := (iff #20 #77)
#75 := (iff #19 #72)
#68 := (implies #15 #64)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #19 #68)
#66 := (iff #18 #64)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [trans #70 #74]: #75
#79 := [quant-intro #76]: #78
#98 := [trans #79 #96]: #97
#63 := [asserted]: #20
#99 := [mp #63 #98]: #94
#211 := [mp~ #99 #199]: #94
#697 := [mp #211 #696]: #692
#324 := (not #692)
#636 := (or #324 #269 #655)
#656 := (>= #154 0::int)
#657 := (not #656)
#650 := (= #154 #160)
#654 := (or #650 #657)
#641 := (or #324 #654)
#628 := (iff #641 #636)
#637 := (or #324 #649)
#485 := (iff #637 #636)
#486 := [rewrite]: #485
#643 := (iff #641 #637)
#640 := (iff #654 #649)
#644 := (or #655 #269)
#638 := (iff #644 #649)
#639 := [rewrite]: #638
#648 := (iff #654 #644)
#647 := (iff #657 #269)
#368 := (iff #656 #172)
#646 := [rewrite]: #368
#362 := [monotonicity #646]: #647
#651 := (iff #650 #655)
#365 := [rewrite]: #651
#645 := [monotonicity #365 #362]: #648
#635 := [trans #645 #639]: #640
#484 := [monotonicity #635]: #643
#629 := [trans #484 #486]: #628
#642 := [quant-inst]: #641
#630 := [mp #642 #629]: #636
#425 := [unit-resolution #630 #697]: #649
#537 := [unit-resolution #425 #566]: #655
#509 := (not #655)
#533 := (or #509 #631)
#534 := [th-lemma]: #533
#529 := [unit-resolution #534 #537]: #631
#501 := (>= #26 0::int)
#560 := (= #26 0::int)
#359 := (f3 #26)
#516 := (f4 #359)
#518 := (= #516 0::int)
#552 := (not #501)
#548 := [hypothesis]: #552
#512 := (or #501 #518)
#22 := (= #17 0::int)
#130 := (or #22 #82)
#698 := (forall (vars (?v0 int)) (:pat #691) #130)
#135 := (forall (vars (?v0 int)) #130)
#701 := (iff #135 #698)
#699 := (iff #130 #130)
#700 := [refl]: #699
#702 := [quant-intro #700]: #701
#200 := (~ #135 #135)
#212 := (~ #130 #130)
#213 := [refl]: #212
#201 := [nnf-pos #213]: #200
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#138 := (iff #24 #135)
#101 := (= 0::int #17)
#107 := (not #21)
#108 := (or #107 #101)
#113 := (forall (vars (?v0 int)) #108)
#136 := (iff #113 #135)
#133 := (iff #108 #130)
#127 := (or #82 #22)
#131 := (iff #127 #130)
#132 := [rewrite]: #131
#128 := (iff #108 #127)
#125 := (iff #101 #22)
#126 := [rewrite]: #125
#123 := (iff #107 #82)
#118 := (not #83)
#121 := (iff #118 #82)
#122 := [rewrite]: #121
#119 := (iff #107 #118)
#116 := (iff #21 #83)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#124 := [trans #120 #122]: #123
#129 := [monotonicity #124 #126]: #128
#134 := [trans #129 #132]: #133
#137 := [quant-intro #134]: #136
#114 := (iff #24 #113)
#111 := (iff #23 #108)
#104 := (implies #21 #101)
#109 := (iff #104 #108)
#110 := [rewrite]: #109
#105 := (iff #23 #104)
#102 := (iff #22 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#112 := [trans #106 #110]: #111
#115 := [quant-intro #112]: #114
#139 := [trans #115 #137]: #138
#100 := [asserted]: #24
#140 := [mp #100 #139]: #135
#214 := [mp~ #140 #201]: #135
#703 := [mp #214 #702]: #698
#379 := (not #698)
#522 := (or #379 #501 #518)
#519 := (or #518 #501)
#523 := (or #379 #519)
#599 := (iff #523 #522)
#617 := (or #379 #512)
#605 := (iff #617 #522)
#607 := [rewrite]: #605
#614 := (iff #523 #617)
#520 := (iff #519 #512)
#521 := [rewrite]: #520
#618 := [monotonicity #521]: #614
#596 := [trans #618 #607]: #599
#524 := [quant-inst]: #523
#598 := [mp #524 #596]: #522
#549 := [unit-resolution #598 #703]: #512
#550 := [unit-resolution #549 #548]: #518
#554 := (= #26 #516)
#287 := (= f5 #359)
#8 := (:var 0 S2)
#9 := (f4 #8)
#683 := (pattern #9)
#10 := (f3 #9)
#57 := (= #8 #10)
#684 := (forall (vars (?v0 S2)) (:pat #683) #57)
#60 := (forall (vars (?v0 S2)) #57)
#685 := (iff #60 #684)
#687 := (iff #684 #684)
#688 := [rewrite]: #687
#686 := [rewrite]: #685
#689 := [trans #686 #688]: #685
#208 := (~ #60 #60)
#206 := (~ #57 #57)
#207 := [refl]: #206
#209 := [nnf-pos #207]: #208
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#61 := (iff #12 #60)
#58 := (iff #11 #57)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#56 := [asserted]: #12
#65 := [mp #56 #62]: #60
#197 := [mp~ #65 #209]: #60
#690 := [mp #197 #689]: #684
#361 := (not #684)
#340 := (or #361 #287)
#675 := [quant-inst]: #340
#553 := [unit-resolution #675 #690]: #287
#555 := [monotonicity #553]: #554
#556 := [trans #555 #550]: #560
#551 := (not #560)
#557 := (or #551 #501)
#530 := [th-lemma]: #557
#531 := [unit-resolution #530 #548 #556]: false
#532 := [lemma #531]: #501
#569 := (+ #28 #181)
#580 := (<= #569 0::int)
#268 := (= #28 #175)
#355 := (or #269 #268)
#356 := [def-axiom]: #355
#535 := [unit-resolution #356 #566]: #268
#503 := (not #268)
#510 := (or #503 #580)
#469 := [th-lemma]: #510
#500 := [unit-resolution #469 #535]: #580
#511 := (not #631)
#502 := (not #580)
#513 := (or #552 #502 #504 #184 #511)
#514 := [th-lemma]: #513
#515 := [unit-resolution #514 #500 #532 #529 #194]: #504
#337 := (* -1::int #150)
#673 := (+ #143 #337)
#333 := (+ #26 #673)
#669 := (>= #333 0::int)
#674 := (= #333 0::int)
#680 := (>= #144 0::int)
#667 := (= #150 0::int)
#525 := (not #667)
#505 := (or #525 #375)
#526 := [th-lemma]: #505
#481 := [unit-resolution #526 #515]: #525
#670 := (or #667 #680)
#380 := (or #379 #667 #680)
#381 := (or #379 #670)
#275 := (iff #381 #380)
#652 := [rewrite]: #275
#382 := [quant-inst]: #381
#653 := [mp #382 #652]: #380
#482 := [unit-resolution #653 #703]: #670
#487 := [unit-resolution #482 #481]: #680
#681 := (not #680)
#321 := (or #674 #681)
#660 := (or #324 #674 #681)
#672 := (= #144 #150)
#332 := (or #672 #681)
#661 := (or #324 #332)
#666 := (iff #661 #660)
#663 := (or #324 #321)
#665 := (iff #663 #660)
#303 := [rewrite]: #665
#664 := (iff #661 #663)
#322 := (iff #332 #321)
#317 := (iff #672 #674)
#658 := [rewrite]: #317
#323 := [monotonicity #658]: #322
#659 := [monotonicity #323]: #664
#668 := [trans #659 #303]: #666
#662 := [quant-inst]: #661
#308 := [mp #662 #668]: #660
#488 := [unit-resolution #308 #697]: #321
#489 := [unit-resolution #488 #487]: #674
#490 := (not #674)
#491 := (or #490 #669)
#492 := [th-lemma]: #491
#493 := [unit-resolution #492 #489]: #669
#494 := [th-lemma #493 #515 #566]: false
#495 := [lemma #494]: #269
#347 := (or #172 #354)
#358 := [def-axiom]: #347
#498 := [unit-resolution #358 #495]: #354
#483 := (not #354)
#499 := (or #483 #496)
#460 := [th-lemma]: #499
#461 := [unit-resolution #460 #498]: #496
#613 := (<= #160 0::int)
#626 := (= #160 0::int)
#463 := (or #172 #626)
#622 := (or #379 #172 #626)
#632 := (or #626 #656)
#623 := (or #379 #632)
#615 := (iff #623 #622)
#624 := (or #379 #463)
#508 := (iff #624 #622)
#467 := [rewrite]: #508
#506 := (iff #623 #624)
#619 := (iff #632 #463)
#633 := (or #626 #172)
#465 := (iff #633 #463)
#466 := [rewrite]: #465
#627 := (iff #632 #633)
#634 := [monotonicity #646]: #627
#620 := [trans #634 #466]: #619
#507 := [monotonicity #620]: #506
#517 := [trans #507 #467]: #615
#621 := [quant-inst]: #623
#612 := [mp #621 #517]: #622
#468 := [unit-resolution #612 #703]: #463
#470 := [unit-resolution #468 #495]: #626
#471 := (not #626)
#472 := (or #471 #613)
#474 := [th-lemma]: #472
#475 := [unit-resolution #474 #470]: #613
#608 := (>= #28 0::int)
#536 := (= #28 0::int)
#360 := (f3 #28)
#609 := (f4 #360)
#610 := (= #609 0::int)
#538 := (not #608)
#543 := [hypothesis]: #538
#611 := (or #608 #610)
#602 := (or #379 #608 #610)
#606 := (or #610 #608)
#603 := (or #379 #606)
#593 := (iff #603 #602)
#604 := (or #379 #611)
#591 := (iff #604 #602)
#592 := [rewrite]: #591
#588 := (iff #603 #604)
#600 := (iff #606 #611)
#601 := [rewrite]: #600
#589 := [monotonicity #601]: #588
#594 := [trans #589 #592]: #593
#597 := [quant-inst]: #603
#590 := [mp #597 #594]: #602
#539 := [unit-resolution #590 #703]: #611
#540 := [unit-resolution #539 #543]: #610
#544 := (= #28 #609)
#357 := (= f6 #360)
#464 := (or #361 #357)
#671 := [quant-inst]: #464
#541 := [unit-resolution #671 #690]: #357
#545 := [monotonicity #541]: #544
#546 := [trans #545 #540]: #536
#542 := (not #536)
#547 := (or #542 #608)
#527 := [th-lemma]: #547
#473 := [unit-resolution #527 #543 #546]: false
#528 := [lemma #473]: #608
#476 := (or #680 #172)
#477 := [th-lemma]: #476
#478 := [unit-resolution #477 #495]: #680
#479 := [unit-resolution #488 #478]: #674
#462 := [unit-resolution #492 #479]: #669
[th-lemma #462 #528 #194 #475 #461]: false
unsat
76ee9f1370ee47b53f6c11c1682ef1e7a8911478 103 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#143 := -1::int
#144 := (* -1::int #31)
#150 := (+ #26 #144)
#151 := (<= #150 0::int)
#154 := (ite #151 #31 #26)
#160 := (* -1::int #154)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#161 := (+ #28 #160)
#162 := (<= #161 0::int)
#177 := (* -1::int #28)
#178 := (+ #26 #177)
#176 := (>= #178 0::int)
#175 := (not #176)
#145 := (+ #28 #144)
#146 := (<= #145 0::int)
#147 := (not #146)
#187 := (and #147 #162 #175)
#33 := (<= #26 #31)
#34 := (ite #33 #31 #26)
#35 := (< #34 #28)
#36 := (not #35)
#32 := (< #31 #28)
#37 := (and #32 #36)
#29 := (< #26 #28)
#38 := (and #29 #37)
#190 := (iff #38 #187)
#181 := (and #147 #162)
#184 := (and #175 #181)
#188 := (iff #184 #187)
#189 := [rewrite]: #188
#185 := (iff #38 #184)
#182 := (iff #37 #181)
#173 := (iff #36 #162)
#163 := (not #162)
#168 := (not #163)
#171 := (iff #168 #162)
#172 := [rewrite]: #171
#169 := (iff #36 #168)
#166 := (iff #35 #163)
#157 := (< #154 #28)
#164 := (iff #157 #163)
#165 := [rewrite]: #164
#158 := (iff #35 #157)
#155 := (= #34 #154)
#152 := (iff #33 #151)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#167 := [trans #159 #165]: #166
#170 := [monotonicity #167]: #169
#174 := [trans #170 #172]: #173
#148 := (iff #32 #147)
#149 := [rewrite]: #148
#183 := [monotonicity #149 #174]: #182
#179 := (iff #29 #175)
#180 := [rewrite]: #179
#186 := [monotonicity #180 #183]: #185
#191 := [trans #186 #189]: #190
#140 := [asserted]: #38
#192 := [mp #140 #191]: #187
#194 := [and-elim #192]: #162
#195 := [and-elim #192]: #175
#374 := (+ #26 #160)
#639 := (>= #374 0::int)
#353 := (= #26 #154)
#268 := (not #151)
#267 := (= #31 #154)
#643 := (not #267)
#652 := (+ #31 #160)
#365 := (>= #652 0::int)
#645 := (not #365)
#193 := [and-elim #192]: #147
#366 := [hypothesis]: #365
#367 := [th-lemma #366 #193 #194]: false
#646 := [lemma #367]: #645
#361 := [hypothesis]: #267
#647 := (or #643 #365)
#644 := [th-lemma]: #647
#648 := [unit-resolution #644 #361 #646]: false
#637 := [lemma #648]: #643
#354 := (or #268 #267)
#355 := [def-axiom]: #354
#634 := [unit-resolution #355 #637]: #268
#346 := (or #151 #353)
#357 := [def-axiom]: #346
#635 := [unit-resolution #357 #634]: #353
#640 := (not #353)
#641 := (or #640 #639)
#636 := [th-lemma]: #641
#642 := [unit-resolution #636 #635]: #639
[th-lemma #642 #195 #194]: false
unsat
18b47c81a9d452efdc99018694a5a7712659d793 119 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#13 := 0::int
#141 := -1::int
#142 := (* -1::int #28)
#143 := (+ #26 #142)
#154 := (>= #143 0::int)
#156 := (ite #154 #26 #28)
#159 := (f3 #156)
#144 := (<= #143 0::int)
#147 := (ite #144 #28 #26)
#150 := (f3 #147)
#162 := (= #150 #159)
#436 := (f3 #28)
#559 := (= #436 #159)
#558 := (= #159 #436)
#566 := (= #156 #28)
#259 := (= #28 #156)
#649 := (f3 #26)
#571 := (= #649 #159)
#577 := (= #159 #649)
#479 := (= #156 #26)
#331 := (= #26 #156)
#489 := (not #259)
#584 := [hypothesis]: #489
#312 := (or #154 #259)
#647 := [def-axiom]: #312
#585 := [unit-resolution #647 #584]: #154
#332 := (not #154)
#329 := (or #332 #331)
#333 := [def-axiom]: #329
#588 := [unit-resolution #333 #585]: #331
#480 := [symm #588]: #479
#579 := [monotonicity #480]: #577
#568 := [symm #579]: #571
#586 := (= #150 #649)
#492 := (= #147 #26)
#326 := (= #26 #147)
#241 := (not #144)
#496 := (or #241 #259)
#491 := (= #28 #26)
#488 := (= #26 #28)
#473 := [hypothesis]: #144
#490 := [th-lemma #585 #473]: #488
#484 := [symm #490]: #491
#494 := [trans #484 #588]: #259
#495 := [unit-resolution #584 #494]: false
#589 := [lemma #495]: #496
#439 := [unit-resolution #589 #584]: #241
#319 := (or #144 #326)
#330 := [def-axiom]: #319
#587 := [unit-resolution #330 #439]: #326
#493 := [symm #587]: #492
#590 := [monotonicity #493]: #586
#570 := [trans #590 #568]: #162
#165 := (not #162)
#32 := (<= #28 #26)
#33 := (ite #32 #26 #28)
#34 := (f3 #33)
#29 := (<= #26 #28)
#30 := (ite #29 #28 #26)
#31 := (f3 #30)
#35 := (= #31 #34)
#36 := (not #35)
#166 := (iff #36 #165)
#163 := (iff #35 #162)
#160 := (= #34 #159)
#157 := (= #33 #156)
#153 := (iff #32 #154)
#155 := [rewrite]: #153
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#151 := (= #31 #150)
#148 := (= #30 #147)
#145 := (iff #29 #144)
#146 := [rewrite]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#164 := [monotonicity #152 #161]: #163
#167 := [monotonicity #164]: #166
#138 := [asserted]: #36
#168 := [mp #138 #167]: #165
#580 := [unit-resolution #168 #570]: false
#581 := [lemma #580]: #259
#562 := [symm #581]: #566
#555 := [monotonicity #562]: #558
#539 := [symm #555]: #559
#556 := (= #150 #436)
#553 := (= #147 #28)
#240 := (= #28 #147)
#435 := [hypothesis]: #241
#437 := (or #154 #144)
#596 := [th-lemma]: #437
#478 := [unit-resolution #596 #435]: #154
#582 := [unit-resolution #333 #478]: #331
#578 := [symm #582]: #479
#574 := [monotonicity #578]: #577
#575 := [symm #574]: #571
#583 := [unit-resolution #330 #435]: #326
#572 := [symm #583]: #492
#573 := [monotonicity #572]: #586
#569 := [trans #573 #575]: #162
#576 := [unit-resolution #168 #569]: false
#560 := [lemma #576]: #144
#327 := (or #241 #240)
#328 := [def-axiom]: #327
#567 := [unit-resolution #328 #560]: #240
#554 := [symm #567]: #553
#557 := [monotonicity #554]: #556
#540 := [trans #557 #539]: #162
[unit-resolution #168 #540]: false
unsat
aeb27ae732eb5ade79f0b082530ea53b942db1bc 164 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#13 := 0::int
#27 := (<= #26 0::int)
#28 := (ite #27 0::int #26)
#29 := (f3 #28)
#134 := (= f5 #29)
#305 := (f3 #26)
#596 := (= #305 #29)
#595 := (= #29 #305)
#249 := (= #28 #26)
#300 := (= #26 #28)
#611 := (f4 #305)
#606 := (= #611 0::int)
#314 := (= #26 0::int)
#613 := (not #300)
#603 := [hypothesis]: #613
#293 := (or #27 #300)
#304 := [def-axiom]: #293
#604 := [unit-resolution #304 #603]: #27
#610 := (>= #26 0::int)
#597 := (not #606)
#601 := (iff #613 #597)
#322 := (iff #300 #606)
#214 := (= #28 0::int)
#215 := (not #27)
#301 := (or #215 #214)
#302 := [def-axiom]: #301
#311 := [unit-resolution #302 #604]: #214
#599 := (= #26 #611)
#329 := (= #611 #26)
#327 := (= #305 f5)
#233 := (= f5 #305)
#8 := (:var 0 S2)
#9 := (f4 #8)
#630 := (pattern #9)
#10 := (f3 #9)
#49 := (= #8 #10)
#631 := (forall (vars (?v0 S2)) (:pat #630) #49)
#52 := (forall (vars (?v0 S2)) #49)
#632 := (iff #52 #631)
#634 := (iff #631 #631)
#635 := [rewrite]: #634
#633 := [rewrite]: #632
#636 := [trans #633 #635]: #632
#154 := (~ #52 #52)
#152 := (~ #49 #49)
#153 := [refl]: #152
#155 := [nnf-pos #153]: #154
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#53 := (iff #12 #52)
#50 := (iff #11 #49)
#51 := [rewrite]: #50
#54 := [quant-intro #51]: #53
#48 := [asserted]: #12
#57 := [mp #48 #54]: #52
#143 := [mp~ #57 #155]: #52
#637 := [mp #143 #636]: #631
#307 := (not #631)
#286 := (or #307 #233)
#622 := [quant-inst]: #286
#326 := [unit-resolution #622 #637]: #233
#328 := [symm #326]: #327
#221 := [monotonicity #328]: #329
#600 := [symm #221]: #599
#323 := [monotonicity #600 #311]: #322
#598 := [monotonicity #323]: #601
#602 := [mp #603 #598]: #597
#612 := (or #606 #610)
#14 := (:var 0 int)
#16 := (f3 #14)
#638 := (pattern #16)
#74 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#122 := (or #22 #74)
#645 := (forall (vars (?v0 int)) (:pat #638) #122)
#127 := (forall (vars (?v0 int)) #122)
#648 := (iff #127 #645)
#646 := (iff #122 #122)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#146 := (~ #127 #127)
#158 := (~ #122 #122)
#159 := [refl]: #158
#147 := [nnf-pos #159]: #146
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#130 := (iff #24 #127)
#93 := (= 0::int #17)
#99 := (not #21)
#100 := (or #99 #93)
#105 := (forall (vars (?v0 int)) #100)
#128 := (iff #105 #127)
#125 := (iff #100 #122)
#119 := (or #74 #22)
#123 := (iff #119 #122)
#124 := [rewrite]: #123
#120 := (iff #100 #119)
#117 := (iff #93 #22)
#118 := [rewrite]: #117
#115 := (iff #99 #74)
#75 := (not #74)
#110 := (not #75)
#113 := (iff #110 #74)
#114 := [rewrite]: #113
#111 := (iff #99 #110)
#108 := (iff #21 #75)
#109 := [rewrite]: #108
#112 := [monotonicity #109]: #111
#116 := [trans #112 #114]: #115
#121 := [monotonicity #116 #118]: #120
#126 := [trans #121 #124]: #125
#129 := [quant-intro #126]: #128
#106 := (iff #24 #105)
#103 := (iff #23 #100)
#96 := (implies #21 #93)
#101 := (iff #96 #100)
#102 := [rewrite]: #101
#97 := (iff #23 #96)
#94 := (iff #22 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#104 := [trans #98 #102]: #103
#107 := [quant-intro #104]: #106
#131 := [trans #107 #129]: #130
#92 := [asserted]: #24
#132 := [mp #92 #131]: #127
#160 := [mp~ #132 #147]: #127
#650 := [mp #160 #649]: #645
#620 := (not #645)
#615 := (or #620 #606 #610)
#254 := (or #620 #612)
#616 := (iff #254 #615)
#614 := [rewrite]: #616
#255 := [quant-inst]: #254
#617 := [mp #255 #614]: #615
#312 := [unit-resolution #617 #650]: #612
#313 := [unit-resolution #312 #602]: #610
#315 := [th-lemma #313 #604]: #314
#593 := [trans #221 #315]: #606
#594 := [unit-resolution #602 #593]: false
#308 := [lemma #594]: #300
#591 := [symm #308]: #249
#592 := [monotonicity #591]: #595
#585 := [symm #592]: #596
#586 := [trans #326 #585]: #134
#137 := (not #134)
#30 := (= #29 f5)
#31 := (not #30)
#138 := (iff #31 #137)
#135 := (iff #30 #134)
#136 := [rewrite]: #135
#139 := [monotonicity #136]: #138
#133 := [asserted]: #31
#142 := [mp #133 #139]: #137
[unit-resolution #142 #586]: false
unsat
32b7349c65f2a98027993cfc5b819fa9c76f7f70 139 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#625 := (= #26 0::int)
decl f3 :: (-> int S2)
#211 := (f3 #26)
#212 := (f4 #211)
#298 := (= #212 0::int)
#135 := (>= #26 0::int)
#136 := (not #135)
#27 := (<= 0::int #26)
#28 := (not #27)
#137 := (iff #28 #136)
#133 := (iff #27 #135)
#134 := [rewrite]: #133
#138 := [monotonicity #134]: #137
#130 := [asserted]: #28
#139 := [mp #130 #138]: #136
#14 := (:var 0 int)
#16 := (f3 #14)
#635 := (pattern #16)
#71 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#119 := (or #22 #71)
#642 := (forall (vars (?v0 int)) (:pat #635) #119)
#124 := (forall (vars (?v0 int)) #119)
#645 := (iff #124 #642)
#643 := (iff #119 #119)
#644 := [refl]: #643
#646 := [quant-intro #644]: #645
#143 := (~ #124 #124)
#155 := (~ #119 #119)
#156 := [refl]: #155
#144 := [nnf-pos #156]: #143
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#127 := (iff #24 #124)
#90 := (= 0::int #17)
#96 := (not #21)
#97 := (or #96 #90)
#102 := (forall (vars (?v0 int)) #97)
#125 := (iff #102 #124)
#122 := (iff #97 #119)
#116 := (or #71 #22)
#120 := (iff #116 #119)
#121 := [rewrite]: #120
#117 := (iff #97 #116)
#114 := (iff #90 #22)
#115 := [rewrite]: #114
#112 := (iff #96 #71)
#72 := (not #71)
#107 := (not #72)
#110 := (iff #107 #71)
#111 := [rewrite]: #110
#108 := (iff #96 #107)
#105 := (iff #21 #72)
#106 := [rewrite]: #105
#109 := [monotonicity #106]: #108
#113 := [trans #109 #111]: #112
#118 := [monotonicity #113 #115]: #117
#123 := [trans #118 #121]: #122
#126 := [quant-intro #123]: #125
#103 := (iff #24 #102)
#100 := (iff #23 #97)
#93 := (implies #21 #90)
#98 := (iff #93 #97)
#99 := [rewrite]: #98
#94 := (iff #23 #93)
#91 := (iff #22 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#101 := [trans #95 #99]: #100
#104 := [quant-intro #101]: #103
#128 := [trans #104 #126]: #127
#89 := [asserted]: #24
#129 := [mp #89 #128]: #124
#157 := [mp~ #129 #144]: #124
#647 := [mp #157 #646]: #642
#304 := (not #642)
#283 := (or #304 #135 #298)
#302 := (or #298 #135)
#619 := (or #304 #302)
#622 := (iff #619 #283)
#230 := (or #135 #298)
#277 := (or #304 #230)
#288 := (iff #277 #283)
#289 := [rewrite]: #288
#408 := (iff #619 #277)
#303 := (iff #302 #230)
#300 := [rewrite]: #303
#615 := [monotonicity #300]: #408
#623 := [trans #615 #289]: #622
#621 := [quant-inst]: #619
#624 := [mp #621 #623]: #283
#626 := [unit-resolution #624 #647 #139]: #298
#275 := (= #26 #212)
#297 := (= f5 #211)
#8 := (:var 0 S2)
#9 := (f4 #8)
#627 := (pattern #9)
#10 := (f3 #9)
#46 := (= #8 #10)
#628 := (forall (vars (?v0 S2)) (:pat #627) #46)
#49 := (forall (vars (?v0 S2)) #46)
#629 := (iff #49 #628)
#631 := (iff #628 #628)
#632 := [rewrite]: #631
#630 := [rewrite]: #629
#633 := [trans #630 #632]: #629
#151 := (~ #49 #49)
#149 := (~ #46 #46)
#150 := [refl]: #149
#152 := [nnf-pos #150]: #151
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#50 := (iff #12 #49)
#47 := (iff #11 #46)
#48 := [rewrite]: #47
#51 := [quant-intro #48]: #50
#45 := [asserted]: #12
#54 := [mp #45 #51]: #49
#140 := [mp~ #54 #152]: #49
#634 := [mp #140 #633]: #628
#299 := (not #628)
#290 := (or #299 #297)
#301 := [quant-inst]: #290
#616 := [unit-resolution #301 #634]: #297
#280 := [monotonicity #616]: #275
#617 := [trans #280 #626]: #625
#276 := (not #625)
#618 := (or #276 #135)
#260 := [th-lemma]: #618
[unit-resolution #260 #139 #617]: false
unsat
cd6e6ee8cf8b75d0011d82bd241ec9736c128fa6 75 0
#2 := false
decl f3 :: (-> int S2)
#28 := 1::int
#30 := (f3 1::int)
decl f5 :: S2
#25 := f5
#31 := (= f5 #30)
decl f4 :: (-> S2 int)
#26 := (f4 f5)
#226 := (f3 #26)
#337 := (= #226 #30)
#615 := (= #30 #226)
#625 := (= 1::int #26)
#266 := (= #26 1::int)
#29 := (<= #26 1::int)
#13 := 0::int
#139 := (<= #26 0::int)
#140 := (not #139)
#32 := (not #31)
#146 := (and #29 #32 #140)
#33 := (and #29 #32)
#27 := (< 0::int #26)
#34 := (and #27 #33)
#149 := (iff #34 #146)
#143 := (and #140 #33)
#147 := (iff #143 #146)
#148 := [rewrite]: #147
#144 := (iff #34 #143)
#141 := (iff #27 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#150 := [trans #145 #148]: #149
#136 := [asserted]: #34
#151 := [mp #136 #150]: #146
#152 := [and-elim #151]: #29
#154 := [and-elim #151]: #140
#627 := [th-lemma #154 #152]: #266
#628 := [symm #627]: #625
#322 := [monotonicity #628]: #615
#338 := [symm #322]: #337
#311 := (= f5 #226)
#8 := (:var 0 S2)
#9 := (f4 #8)
#641 := (pattern #9)
#10 := (f3 #9)
#52 := (= #8 #10)
#642 := (forall (vars (?v0 S2)) (:pat #641) #52)
#55 := (forall (vars (?v0 S2)) #52)
#643 := (iff #55 #642)
#645 := (iff #642 #642)
#646 := [rewrite]: #645
#644 := [rewrite]: #643
#647 := [trans #644 #646]: #643
#170 := (~ #55 #55)
#168 := (~ #52 #52)
#169 := [refl]: #168
#171 := [nnf-pos #169]: #170
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#56 := (iff #12 #55)
#53 := (iff #11 #52)
#54 := [rewrite]: #53
#57 := [quant-intro #54]: #56
#51 := [asserted]: #12
#60 := [mp #51 #57]: #55
#155 := [mp~ #60 #171]: #55
#648 := [mp #155 #647]: #642
#313 := (not #642)
#304 := (or #313 #311)
#315 := [quant-inst]: #304
#614 := [unit-resolution #315 #648]: #311
#339 := [trans #614 #338]: #31
#153 := [and-elim #151]: #32
[unit-resolution #153 #339]: false
unsat
000880aa19ed4a1843957e82181d2a42342f1991 20 0
#2 := false
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := (<= #26 #26)
#28 := (not #27)
#140 := (iff #28 false)
#1 := true
#135 := (not true)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #28 #135)
#133 := (iff #27 true)
#134 := [rewrite]: #133
#137 := [monotonicity #134]: #136
#141 := [trans #137 #139]: #140
#130 := [asserted]: #28
[mp #130 #141]: false
unsat
88eeafff0d413fa89914541cc48ed55eef3db1b1 319 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#144 := -1::int
#145 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#146 := (+ #26 #145)
#147 := (<= #146 0::int)
decl f3 :: (-> int S2)
#30 := 3::int
#34 := (* 3::int #28)
#35 := (f3 #34)
#36 := (f4 #35)
#150 := (* -1::int #36)
#31 := (* 3::int #26)
#32 := (f3 #31)
#33 := (f4 #32)
#151 := (+ #33 #150)
#152 := (<= #151 0::int)
#155 := (not #152)
#158 := (and #147 #155)
#37 := (<= #33 #36)
#38 := (not #37)
#29 := (<= #26 #28)
#39 := (and #29 #38)
#159 := (iff #39 #158)
#156 := (iff #38 #155)
#153 := (iff #37 #152)
#154 := [rewrite]: #153
#157 := [monotonicity #154]: #156
#148 := (iff #29 #147)
#149 := [rewrite]: #148
#160 := [monotonicity #149 #157]: #159
#141 := [asserted]: #39
#161 := [mp #141 #160]: #158
#162 := [and-elim #161]: #147
#163 := [and-elim #161]: #155
#612 := (+ #34 #150)
#589 := (<= #612 0::int)
#616 := (= #612 0::int)
#607 := (>= #28 0::int)
#542 := (= #28 0::int)
#236 := (f3 #28)
#584 := (f4 #236)
#581 := (= #584 0::int)
#608 := (not #607)
#544 := [hypothesis]: #608
#575 := (or #581 #607)
#14 := (:var 0 int)
#16 := (f3 #14)
#658 := (pattern #16)
#82 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#130 := (or #22 #82)
#665 := (forall (vars (?v0 int)) (:pat #658) #130)
#135 := (forall (vars (?v0 int)) #130)
#668 := (iff #135 #665)
#666 := (iff #130 #130)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#167 := (~ #135 #135)
#181 := (~ #130 #130)
#182 := [refl]: #181
#168 := [nnf-pos #182]: #167
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#138 := (iff #24 #135)
#101 := (= 0::int #17)
#107 := (not #21)
#108 := (or #107 #101)
#113 := (forall (vars (?v0 int)) #108)
#136 := (iff #113 #135)
#133 := (iff #108 #130)
#127 := (or #82 #22)
#131 := (iff #127 #130)
#132 := [rewrite]: #131
#128 := (iff #108 #127)
#125 := (iff #101 #22)
#126 := [rewrite]: #125
#123 := (iff #107 #82)
#83 := (not #82)
#118 := (not #83)
#121 := (iff #118 #82)
#122 := [rewrite]: #121
#119 := (iff #107 #118)
#116 := (iff #21 #83)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#124 := [trans #120 #122]: #123
#129 := [monotonicity #124 #126]: #128
#134 := [trans #129 #132]: #133
#137 := [quant-intro #134]: #136
#114 := (iff #24 #113)
#111 := (iff #23 #108)
#104 := (implies #21 #101)
#109 := (iff #104 #108)
#110 := [rewrite]: #109
#105 := (iff #23 #104)
#102 := (iff #22 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#112 := [trans #106 #110]: #111
#115 := [quant-intro #112]: #114
#139 := [trans #115 #137]: #138
#100 := [asserted]: #24
#140 := [mp #100 #139]: #135
#183 := [mp~ #140 #168]: #135
#670 := [mp #183 #669]: #665
#242 := (not #665)
#573 := (or #242 #581 #607)
#578 := (or #242 #575)
#568 := (iff #578 #573)
#569 := [rewrite]: #568
#567 := [quant-inst]: #578
#570 := [mp #567 #569]: #573
#545 := [unit-resolution #570 #670]: #575
#546 := [unit-resolution #545 #544]: #581
#547 := (= #28 #584)
#322 := (= f6 #236)
#8 := (:var 0 S2)
#9 := (f4 #8)
#650 := (pattern #9)
#10 := (f3 #9)
#57 := (= #8 #10)
#651 := (forall (vars (?v0 S2)) (:pat #650) #57)
#60 := (forall (vars (?v0 S2)) #57)
#652 := (iff #60 #651)
#654 := (iff #651 #651)
#655 := [rewrite]: #654
#653 := [rewrite]: #652
#656 := [trans #653 #655]: #652
#177 := (~ #60 #60)
#175 := (~ #57 #57)
#176 := [refl]: #175
#178 := [nnf-pos #176]: #177
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#61 := (iff #12 #60)
#58 := (iff #11 #57)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#56 := [asserted]: #12
#65 := [mp #56 #62]: #60
#164 := [mp~ #65 #178]: #60
#657 := [mp #164 #656]: #651
#323 := (not #651)
#327 := (or #323 #322)
#324 := [quant-inst]: #327
#536 := [unit-resolution #324 #657]: #322
#525 := [monotonicity #536]: #547
#526 := [trans #525 #546]: #542
#528 := (not #542)
#529 := (or #528 #607)
#530 := [th-lemma]: #529
#531 := [unit-resolution #530 #544 #526]: false
#532 := [lemma #531]: #607
#453 := (or #608 #616)
#64 := (= #14 #17)
#89 := (or #64 #83)
#659 := (forall (vars (?v0 int)) (:pat #658) #89)
#94 := (forall (vars (?v0 int)) #89)
#662 := (iff #94 #659)
#660 := (iff #89 #89)
#661 := [refl]: #660
#663 := [quant-intro #661]: #662
#165 := (~ #94 #94)
#142 := (~ #89 #89)
#179 := [refl]: #142
#166 := [nnf-pos #179]: #165
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#97 := (iff #20 #94)
#71 := (not #15)
#72 := (or #71 #64)
#77 := (forall (vars (?v0 int)) #72)
#95 := (iff #77 #94)
#92 := (iff #72 #89)
#86 := (or #83 #64)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #72 #86)
#84 := (iff #71 #83)
#80 := (iff #15 #82)
#81 := [rewrite]: #80
#85 := [monotonicity #81]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#96 := [quant-intro #93]: #95
#78 := (iff #20 #77)
#75 := (iff #19 #72)
#68 := (implies #15 #64)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #19 #68)
#66 := (iff #18 #64)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [trans #70 #74]: #75
#79 := [quant-intro #76]: #78
#98 := [trans #79 #96]: #97
#63 := [asserted]: #20
#99 := [mp #63 #98]: #94
#180 := [mp~ #99 #166]: #94
#664 := [mp #180 #663]: #659
#629 := (not #659)
#592 := (or #629 #608 #616)
#614 := (>= #34 0::int)
#329 := (not #614)
#611 := (= #34 #36)
#615 := (or #611 #329)
#593 := (or #629 #615)
#433 := (iff #593 #592)
#600 := (or #629 #453)
#430 := (iff #600 #592)
#432 := [rewrite]: #430
#594 := (iff #593 #600)
#597 := (iff #615 #453)
#610 := (or #616 #608)
#595 := (iff #610 #453)
#596 := [rewrite]: #595
#451 := (iff #615 #610)
#609 := (iff #329 #608)
#602 := (iff #614 #607)
#603 := [rewrite]: #602
#604 := [monotonicity #603]: #609
#605 := (iff #611 #616)
#606 := [rewrite]: #605
#452 := [monotonicity #606 #604]: #451
#598 := [trans #452 #596]: #597
#601 := [monotonicity #598]: #594
#586 := [trans #601 #432]: #433
#599 := [quant-inst]: #593
#587 := [mp #599 #586]: #592
#543 := [unit-resolution #587 #664]: #453
#527 := [unit-resolution #543 #532]: #616
#533 := (not #616)
#519 := (or #533 #589)
#515 := [th-lemma]: #519
#516 := [unit-resolution #515 #527]: #589
#646 := (* -1::int #33)
#647 := (+ #31 #646)
#623 := (>= #647 0::int)
#648 := (= #647 0::int)
#639 := (>= #26 0::int)
#624 := (= #33 0::int)
#518 := (not #624)
#335 := (<= #33 0::int)
#517 := (not #335)
#520 := (not #589)
#521 := (or #517 #608 #520 #152)
#522 := [th-lemma]: #521
#523 := [unit-resolution #522 #163 #532 #516]: #517
#524 := (or #518 #335)
#497 := [th-lemma]: #524
#498 := [unit-resolution #497 #523]: #518
#347 := (or #624 #639)
#619 := (or #242 #624 #639)
#301 := (>= #31 0::int)
#346 := (or #624 #301)
#620 := (or #242 #346)
#332 := (iff #620 #619)
#343 := (or #242 #347)
#618 := (iff #343 #619)
#622 := [rewrite]: #618
#617 := (iff #620 #343)
#348 := (iff #346 #347)
#299 := (iff #301 #639)
#304 := [rewrite]: #299
#349 := [monotonicity #304]: #348
#621 := [monotonicity #349]: #617
#333 := [trans #621 #622]: #332
#342 := [quant-inst]: #620
#334 := [mp #342 #333]: #619
#499 := [unit-resolution #334 #670]: #347
#392 := [unit-resolution #499 #498]: #639
#640 := (not #639)
#289 := (or #640 #648)
#630 := (or #629 #640 #648)
#431 := (not #301)
#313 := (= #31 #33)
#645 := (or #313 #431)
#631 := (or #629 #645)
#276 := (iff #631 #630)
#632 := (or #629 #289)
#635 := (iff #632 #630)
#275 := [rewrite]: #635
#270 := (iff #631 #632)
#627 := (iff #645 #289)
#284 := (or #648 #640)
#290 := (iff #284 #289)
#291 := [rewrite]: #290
#625 := (iff #645 #284)
#300 := (iff #431 #640)
#641 := [monotonicity #304]: #300
#643 := (iff #313 #648)
#649 := [rewrite]: #643
#288 := [monotonicity #649 #641]: #625
#628 := [trans #288 #291]: #627
#633 := [monotonicity #628]: #270
#636 := [trans #633 #275]: #276
#626 := [quant-inst]: #631
#634 := [mp #626 #636]: #630
#503 := [unit-resolution #634 #664]: #289
#504 := [unit-resolution #503 #392]: #648
#505 := (not #648)
#510 := (or #505 #623)
#506 := [th-lemma]: #510
#507 := [unit-resolution #506 #504]: #623
[th-lemma #507 #516 #163 #162]: false
unsat
b07d26f06f2f8e3a614ec9af094d242833240836 325 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#549 := (= #26 0::int)
decl f3 :: (-> int S2)
#241 := (f3 #26)
#495 := (f4 #241)
#496 := (= #495 0::int)
#645 := (>= #26 0::int)
#646 := (not #645)
#30 := 3::int
#31 := (* 3::int #26)
#32 := (f3 #31)
#33 := (f4 #32)
#144 := -1::int
#652 := (* -1::int #33)
#653 := (+ #31 #652)
#654 := (= #653 0::int)
#503 := (not #654)
#629 := (>= #653 0::int)
#527 := (not #629)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#34 := (* 3::int #28)
#35 := (f3 #34)
#36 := (f4 #35)
#153 := (* -1::int #36)
#618 := (+ #34 #153)
#595 := (<= #618 0::int)
#622 := (= #618 0::int)
#613 := (>= #28 0::int)
#548 := (= #28 0::int)
#242 := (f3 #28)
#590 := (f4 #242)
#587 := (= #590 0::int)
#614 := (not #613)
#550 := [hypothesis]: #614
#581 := (or #587 #613)
#14 := (:var 0 int)
#16 := (f3 #14)
#664 := (pattern #16)
#82 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#130 := (or #22 #82)
#671 := (forall (vars (?v0 int)) (:pat #664) #130)
#135 := (forall (vars (?v0 int)) #130)
#674 := (iff #135 #671)
#672 := (iff #130 #130)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#173 := (~ #135 #135)
#187 := (~ #130 #130)
#188 := [refl]: #187
#174 := [nnf-pos #188]: #173
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#138 := (iff #24 #135)
#101 := (= 0::int #17)
#107 := (not #21)
#108 := (or #107 #101)
#113 := (forall (vars (?v0 int)) #108)
#136 := (iff #113 #135)
#133 := (iff #108 #130)
#127 := (or #82 #22)
#131 := (iff #127 #130)
#132 := [rewrite]: #131
#128 := (iff #108 #127)
#125 := (iff #101 #22)
#126 := [rewrite]: #125
#123 := (iff #107 #82)
#83 := (not #82)
#118 := (not #83)
#121 := (iff #118 #82)
#122 := [rewrite]: #121
#119 := (iff #107 #118)
#116 := (iff #21 #83)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#124 := [trans #120 #122]: #123
#129 := [monotonicity #124 #126]: #128
#134 := [trans #129 #132]: #133
#137 := [quant-intro #134]: #136
#114 := (iff #24 #113)
#111 := (iff #23 #108)
#104 := (implies #21 #101)
#109 := (iff #104 #108)
#110 := [rewrite]: #109
#105 := (iff #23 #104)
#102 := (iff #22 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#112 := [trans #106 #110]: #111
#115 := [quant-intro #112]: #114
#139 := [trans #115 #137]: #138
#100 := [asserted]: #24
#140 := [mp #100 #139]: #135
#189 := [mp~ #140 #174]: #135
#676 := [mp #189 #675]: #671
#248 := (not #671)
#579 := (or #248 #587 #613)
#584 := (or #248 #581)
#574 := (iff #584 #579)
#575 := [rewrite]: #574
#573 := [quant-inst]: #584
#576 := [mp #573 #575]: #579
#551 := [unit-resolution #576 #676]: #581
#552 := [unit-resolution #551 #550]: #587
#553 := (= #28 #590)
#328 := (= f6 #242)
#8 := (:var 0 S2)
#9 := (f4 #8)
#656 := (pattern #9)
#10 := (f3 #9)
#57 := (= #8 #10)
#657 := (forall (vars (?v0 S2)) (:pat #656) #57)
#60 := (forall (vars (?v0 S2)) #57)
#658 := (iff #60 #657)
#660 := (iff #657 #657)
#661 := [rewrite]: #660
#659 := [rewrite]: #658
#662 := [trans #659 #661]: #658
#183 := (~ #60 #60)
#181 := (~ #57 #57)
#182 := [refl]: #181
#184 := [nnf-pos #182]: #183
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#61 := (iff #12 #60)
#58 := (iff #11 #57)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#56 := [asserted]: #12
#65 := [mp #56 #62]: #60
#170 := [mp~ #65 #184]: #60
#663 := [mp #170 #662]: #657
#329 := (not #657)
#333 := (or #329 #328)
#330 := [quant-inst]: #333
#542 := [unit-resolution #330 #663]: #328
#531 := [monotonicity #542]: #553
#532 := [trans #531 #552]: #548
#534 := (not #548)
#535 := (or #534 #613)
#536 := [th-lemma]: #535
#537 := [unit-resolution #536 #550 #532]: false
#538 := [lemma #537]: #613
#459 := (or #614 #622)
#64 := (= #14 #17)
#89 := (or #64 #83)
#665 := (forall (vars (?v0 int)) (:pat #664) #89)
#94 := (forall (vars (?v0 int)) #89)
#668 := (iff #94 #665)
#666 := (iff #89 #89)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#171 := (~ #94 #94)
#142 := (~ #89 #89)
#185 := [refl]: #142
#172 := [nnf-pos #185]: #171
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#97 := (iff #20 #94)
#71 := (not #15)
#72 := (or #71 #64)
#77 := (forall (vars (?v0 int)) #72)
#95 := (iff #77 #94)
#92 := (iff #72 #89)
#86 := (or #83 #64)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #72 #86)
#84 := (iff #71 #83)
#80 := (iff #15 #82)
#81 := [rewrite]: #80
#85 := [monotonicity #81]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#96 := [quant-intro #93]: #95
#78 := (iff #20 #77)
#75 := (iff #19 #72)
#68 := (implies #15 #64)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #19 #68)
#66 := (iff #18 #64)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [trans #70 #74]: #75
#79 := [quant-intro #76]: #78
#98 := [trans #79 #96]: #97
#63 := [asserted]: #20
#99 := [mp #63 #98]: #94
#186 := [mp~ #99 #172]: #94
#670 := [mp #186 #669]: #665
#635 := (not #665)
#598 := (or #635 #614 #622)
#620 := (>= #34 0::int)
#335 := (not #620)
#617 := (= #34 #36)
#621 := (or #617 #335)
#599 := (or #635 #621)
#439 := (iff #599 #598)
#606 := (or #635 #459)
#436 := (iff #606 #598)
#438 := [rewrite]: #436
#600 := (iff #599 #606)
#603 := (iff #621 #459)
#616 := (or #622 #614)
#601 := (iff #616 #459)
#602 := [rewrite]: #601
#457 := (iff #621 #616)
#615 := (iff #335 #614)
#608 := (iff #620 #613)
#609 := [rewrite]: #608
#610 := [monotonicity #609]: #615
#611 := (iff #617 #622)
#612 := [rewrite]: #611
#458 := [monotonicity #612 #610]: #457
#604 := [trans #458 #602]: #603
#607 := [monotonicity #604]: #600
#592 := [trans #607 #438]: #439
#605 := [quant-inst]: #599
#593 := [mp #605 #592]: #598
#539 := [unit-resolution #593 #670]: #459
#525 := [unit-resolution #539 #538]: #622
#521 := (not #622)
#522 := (or #521 #595)
#523 := [th-lemma]: #522
#526 := [unit-resolution #523 #525]: #595
#147 := (* -1::int #28)
#148 := (+ #26 #147)
#146 := (>= #148 0::int)
#145 := (not #146)
#154 := (+ #33 #153)
#152 := (>= #154 0::int)
#164 := (and #145 #152)
#37 := (< #33 #36)
#38 := (not #37)
#29 := (< #26 #28)
#39 := (and #29 #38)
#165 := (iff #39 #164)
#162 := (iff #38 #152)
#151 := (not #152)
#157 := (not #151)
#160 := (iff #157 #152)
#161 := [rewrite]: #160
#158 := (iff #38 #157)
#155 := (iff #37 #151)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#163 := [trans #159 #161]: #162
#149 := (iff #29 #145)
#150 := [rewrite]: #149
#166 := [monotonicity #150 #163]: #165
#141 := [asserted]: #39
#167 := [mp #141 #166]: #164
#168 := [and-elim #167]: #145
#169 := [and-elim #167]: #152
#528 := (not #595)
#529 := (or #527 #151 #528 #146)
#524 := [th-lemma]: #529
#530 := [unit-resolution #524 #169 #168 #526]: #527
#504 := (or #503 #629)
#505 := [th-lemma]: #504
#398 := [unit-resolution #505 #530]: #503
#295 := (or #646 #654)
#636 := (or #635 #646 #654)
#307 := (>= #31 0::int)
#437 := (not #307)
#319 := (= #31 #33)
#651 := (or #319 #437)
#637 := (or #635 #651)
#282 := (iff #637 #636)
#638 := (or #635 #295)
#641 := (iff #638 #636)
#281 := [rewrite]: #641
#276 := (iff #637 #638)
#633 := (iff #651 #295)
#290 := (or #654 #646)
#296 := (iff #290 #295)
#297 := [rewrite]: #296
#631 := (iff #651 #290)
#306 := (iff #437 #646)
#305 := (iff #307 #645)
#310 := [rewrite]: #305
#647 := [monotonicity #310]: #306
#649 := (iff #319 #654)
#655 := [rewrite]: #649
#294 := [monotonicity #655 #647]: #631
#634 := [trans #294 #297]: #633
#639 := [monotonicity #634]: #276
#642 := [trans #639 #281]: #282
#632 := [quant-inst]: #637
#640 := [mp #632 #642]: #636
#509 := [unit-resolution #640 #670]: #295
#510 := [unit-resolution #509 #398]: #646
#497 := (or #496 #645)
#591 := (or #248 #496 #645)
#578 := (or #248 #497)
#572 := (iff #578 #591)
#569 := [rewrite]: #572
#580 := [quant-inst]: #578
#571 := [mp #580 #569]: #591
#511 := [unit-resolution #571 #676]: #497
#516 := [unit-resolution #511 #510]: #496
#513 := (= #26 #495)
#327 := (= f5 #241)
#320 := (or #329 #327)
#331 := [quant-inst]: #320
#512 := [unit-resolution #331 #663]: #327
#514 := [monotonicity #512]: #513
#517 := [trans #514 #516]: #549
#518 := (not #549)
#519 := (or #518 #645)
#515 := [th-lemma]: #519
[unit-resolution #515 #510 #517]: false
unsat
11038cb4c13dcad01559beed85cfa0b91db3362e 38 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#137 := -1::int
#140 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#141 := (+ #26 #140)
#144 := (<= #141 0::int)
#147 := (not #144)
#139 := (>= #141 0::int)
#138 := (not #139)
#150 := (and #138 #147)
#30 := (<= #26 #28)
#31 := (not #30)
#29 := (< #26 #28)
#32 := (and #29 #31)
#151 := (iff #32 #150)
#148 := (iff #31 #147)
#145 := (iff #30 #144)
#146 := [rewrite]: #145
#149 := [monotonicity #146]: #148
#142 := (iff #29 #138)
#143 := [rewrite]: #142
#152 := [monotonicity #143 #149]: #151
#134 := [asserted]: #32
#153 := [mp #134 #152]: #150
#155 := [and-elim #153]: #147
#154 := [and-elim #153]: #138
#227 := (or #144 #139)
#313 := [th-lemma]: #227
#228 := [unit-resolution #313 #154]: #144
[unit-resolution #228 #155]: false
unsat
837c405f2b45308cfbf3a46d2a4facdbd42feddf 292 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#30 := 1::int
#139 := (+ 1::int #26)
#142 := (f3 #139)
#145 := (f4 #142)
#157 := -1::int
#165 := (* -1::int #145)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#166 := (+ #28 #165)
#164 := (>= #166 0::int)
#160 := (* -1::int #28)
#161 := (+ #26 #160)
#159 := (>= #161 0::int)
#319 := (+ #26 #165)
#643 := (>= #319 -1::int)
#324 := (= #319 -1::int)
#661 := (>= #26 -1::int)
#634 := (>= #26 0::int)
#613 := (= #26 0::int)
#344 := (f3 #26)
#349 := (f4 #344)
#631 := (= #349 0::int)
#606 := (not #634)
#607 := [hypothesis]: #606
#635 := (or #631 #634)
#14 := (:var 0 int)
#16 := (f3 #14)
#678 := (pattern #16)
#79 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#127 := (or #22 #79)
#685 := (forall (vars (?v0 int)) (:pat #678) #127)
#132 := (forall (vars (?v0 int)) #127)
#688 := (iff #132 #685)
#686 := (iff #127 #127)
#687 := [refl]: #686
#689 := [quant-intro #687]: #688
#188 := (~ #132 #132)
#200 := (~ #127 #127)
#201 := [refl]: #200
#189 := [nnf-pos #201]: #188
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#135 := (iff #24 #132)
#98 := (= 0::int #17)
#104 := (not #21)
#105 := (or #104 #98)
#110 := (forall (vars (?v0 int)) #105)
#133 := (iff #110 #132)
#130 := (iff #105 #127)
#124 := (or #79 #22)
#128 := (iff #124 #127)
#129 := [rewrite]: #128
#125 := (iff #105 #124)
#122 := (iff #98 #22)
#123 := [rewrite]: #122
#120 := (iff #104 #79)
#80 := (not #79)
#115 := (not #80)
#118 := (iff #115 #79)
#119 := [rewrite]: #118
#116 := (iff #104 #115)
#113 := (iff #21 #80)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#121 := [trans #117 #119]: #120
#126 := [monotonicity #121 #123]: #125
#131 := [trans #126 #129]: #130
#134 := [quant-intro #131]: #133
#111 := (iff #24 #110)
#108 := (iff #23 #105)
#101 := (implies #21 #98)
#106 := (iff #101 #105)
#107 := [rewrite]: #106
#102 := (iff #23 #101)
#99 := (iff #22 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#109 := [trans #103 #107]: #108
#112 := [quant-intro #109]: #111
#136 := [trans #112 #134]: #135
#97 := [asserted]: #24
#137 := [mp #97 #136]: #132
#202 := [mp~ #137 #189]: #132
#690 := [mp #202 #689]: #685
#263 := (not #685)
#625 := (or #263 #631 #634)
#626 := (or #263 #635)
#622 := (iff #626 #625)
#623 := [rewrite]: #622
#627 := [quant-inst]: #626
#628 := [mp #627 #623]: #625
#609 := [unit-resolution #628 #690]: #635
#610 := [unit-resolution #609 #607]: #631
#611 := (= #26 #349)
#348 := (= f5 #344)
#8 := (:var 0 S2)
#9 := (f4 #8)
#670 := (pattern #9)
#10 := (f3 #9)
#54 := (= #8 #10)
#671 := (forall (vars (?v0 S2)) (:pat #670) #54)
#57 := (forall (vars (?v0 S2)) #54)
#672 := (iff #57 #671)
#674 := (iff #671 #671)
#675 := [rewrite]: #674
#673 := [rewrite]: #672
#676 := [trans #673 #675]: #672
#196 := (~ #57 #57)
#194 := (~ #54 #54)
#195 := [refl]: #194
#197 := [nnf-pos #195]: #196
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#58 := (iff #12 #57)
#55 := (iff #11 #54)
#56 := [rewrite]: #55
#59 := [quant-intro #56]: #58
#53 := [asserted]: #12
#62 := [mp #53 #59]: #57
#185 := [mp~ #62 #197]: #57
#677 := [mp #185 #676]: #671
#664 := (not #671)
#321 := (or #664 #348)
#451 := [quant-inst]: #321
#608 := [unit-resolution #451 #677]: #348
#493 := [monotonicity #608]: #611
#494 := [trans #493 #610]: #613
#495 := (not #613)
#454 := (or #495 #634)
#602 := [th-lemma]: #454
#504 := [unit-resolution #602 #607 #494]: false
#599 := [lemma #504]: #634
#619 := (or #606 #661)
#600 := [th-lemma]: #619
#603 := [unit-resolution #600 #599]: #661
#308 := (not #661)
#311 := (or #324 #308)
#61 := (= #14 #17)
#86 := (or #61 #80)
#679 := (forall (vars (?v0 int)) (:pat #678) #86)
#91 := (forall (vars (?v0 int)) #86)
#682 := (iff #91 #679)
#680 := (iff #86 #86)
#681 := [refl]: #680
#683 := [quant-intro #681]: #682
#186 := (~ #91 #91)
#183 := (~ #86 #86)
#198 := [refl]: #183
#187 := [nnf-pos #198]: #186
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#94 := (iff #20 #91)
#68 := (not #15)
#69 := (or #68 #61)
#74 := (forall (vars (?v0 int)) #69)
#92 := (iff #74 #91)
#89 := (iff #69 #86)
#83 := (or #80 #61)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #69 #83)
#81 := (iff #68 #80)
#77 := (iff #15 #79)
#78 := [rewrite]: #77
#82 := [monotonicity #78]: #81
#85 := [monotonicity #82]: #84
#90 := [trans #85 #88]: #89
#93 := [quant-intro #90]: #92
#75 := (iff #20 #74)
#72 := (iff #19 #69)
#65 := (implies #15 #61)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #19 #65)
#63 := (iff #18 #61)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#73 := [trans #67 #71]: #72
#76 := [quant-intro #73]: #75
#95 := [trans #76 #93]: #94
#60 := [asserted]: #20
#96 := [mp #60 #95]: #91
#199 := [mp~ #96 #187]: #91
#684 := [mp #199 #683]: #679
#649 := (not #679)
#650 := (or #649 #324 #308)
#666 := (>= #139 0::int)
#667 := (not #666)
#669 := (= #139 #145)
#659 := (or #669 #667)
#651 := (or #649 #659)
#296 := (iff #651 #650)
#652 := (or #649 #311)
#655 := (iff #652 #650)
#295 := [rewrite]: #655
#290 := (iff #651 #652)
#647 := (iff #659 #311)
#309 := (iff #667 #308)
#304 := (iff #666 #661)
#645 := [rewrite]: #304
#310 := [monotonicity #645]: #309
#660 := (iff #669 #324)
#320 := [rewrite]: #660
#648 := [monotonicity #320 #310]: #647
#653 := [monotonicity #648]: #290
#656 := [trans #653 #295]: #296
#646 := [quant-inst]: #651
#654 := [mp #646 #656]: #650
#488 := [unit-resolution #654 #684]: #311
#503 := [unit-resolution #488 #603]: #324
#505 := (not #324)
#506 := (or #505 #643)
#499 := [th-lemma]: #506
#507 := [unit-resolution #499 #503]: #643
#158 := (not #159)
#508 := [hypothesis]: #158
#169 := (not #164)
#342 := (or #159 #169)
#175 := (iff #159 #164)
#31 := (+ #26 1::int)
#32 := (f3 #31)
#33 := (f4 #32)
#34 := (<= #33 #28)
#35 := (not #34)
#29 := (< #26 #28)
#36 := (iff #29 #35)
#180 := (iff #36 #175)
#148 := (<= #145 #28)
#151 := (not #148)
#154 := (iff #29 #151)
#178 := (iff #154 #175)
#172 := (iff #158 #169)
#176 := (iff #172 #175)
#177 := [rewrite]: #176
#173 := (iff #154 #172)
#170 := (iff #151 #169)
#167 := (iff #148 #164)
#168 := [rewrite]: #167
#171 := [monotonicity #168]: #170
#162 := (iff #29 #158)
#163 := [rewrite]: #162
#174 := [monotonicity #163 #171]: #173
#179 := [trans #174 #177]: #178
#155 := (iff #36 #154)
#152 := (iff #35 #151)
#149 := (iff #34 #148)
#146 := (= #33 #145)
#143 := (= #32 #142)
#140 := (= #31 #139)
#141 := [rewrite]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#181 := [trans #156 #179]: #180
#138 := [asserted]: #36
#182 := [mp #138 #181]: #175
#256 := (not #175)
#341 := (or #159 #169 #256)
#257 := [def-axiom]: #341
#343 := [unit-resolution #257 #182]: #342
#509 := [unit-resolution #343 #508]: #169
#510 := (not #643)
#511 := (or #510 #159 #164)
#604 := [th-lemma]: #511
#601 := [unit-resolution #604 #509 #508 #507]: false
#605 := [lemma #601]: #159
#346 := (or #158 #164)
#334 := (or #158 #164 #256)
#345 := [def-axiom]: #334
#347 := [unit-resolution #345 #182]: #346
#592 := [unit-resolution #347 #605]: #164
#657 := (<= #319 -1::int)
#594 := (or #505 #657)
#586 := [th-lemma]: #594
#583 := [unit-resolution #586 #503]: #657
[th-lemma #583 #605 #592]: false
unsat
75870ee37db906045eff49499698b090187a95a8 11 0
#2 := false
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := (< #26 #26)
#132 := (iff #27 false)
#133 := [rewrite]: #132
#129 := [asserted]: #27
[mp #129 #133]: false
unsat
65a9b991d68316f9955463b295888cc0b941d7e9 54 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#141 := -1::int
#154 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#155 := (+ #26 #154)
#156 := (<= #155 0::int)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#142 := (* -1::int #31)
#147 := (+ #26 #142)
#148 := (<= #147 0::int)
#151 := (not #148)
#143 := (+ #28 #142)
#144 := (<= #143 0::int)
#165 := (and #144 #151 #156)
#33 := (<= #26 #31)
#34 := (not #33)
#32 := (<= #28 #31)
#35 := (and #32 #34)
#29 := (<= #26 #28)
#36 := (and #29 #35)
#168 := (iff #36 #165)
#159 := (and #144 #151)
#162 := (and #156 #159)
#166 := (iff #162 #165)
#167 := [rewrite]: #166
#163 := (iff #36 #162)
#160 := (iff #35 #159)
#152 := (iff #34 #151)
#149 := (iff #33 #148)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#145 := (iff #32 #144)
#146 := [rewrite]: #145
#161 := [monotonicity #146 #153]: #160
#157 := (iff #29 #156)
#158 := [rewrite]: #157
#164 := [monotonicity #158 #161]: #163
#169 := [trans #164 #167]: #168
#138 := [asserted]: #36
#170 := [mp #138 #169]: #165
#173 := [and-elim #170]: #156
#172 := [and-elim #170]: #151
#171 := [and-elim #170]: #144
[th-lemma #171 #172 #173]: false
unsat
949587f0e75e73196b0b151bf0911a3bb0f90ff6 55 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#141 := -1::int
#156 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#157 := (+ #26 #156)
#155 := (>= #157 0::int)
#154 := (not #155)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#142 := (* -1::int #31)
#147 := (+ #26 #142)
#148 := (<= #147 0::int)
#151 := (not #148)
#143 := (+ #28 #142)
#144 := (<= #143 0::int)
#166 := (and #144 #151 #154)
#33 := (<= #26 #31)
#34 := (not #33)
#32 := (<= #28 #31)
#35 := (and #32 #34)
#29 := (< #26 #28)
#36 := (and #29 #35)
#169 := (iff #36 #166)
#160 := (and #144 #151)
#163 := (and #154 #160)
#167 := (iff #163 #166)
#168 := [rewrite]: #167
#164 := (iff #36 #163)
#161 := (iff #35 #160)
#152 := (iff #34 #151)
#149 := (iff #33 #148)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#145 := (iff #32 #144)
#146 := [rewrite]: #145
#162 := [monotonicity #146 #153]: #161
#158 := (iff #29 #154)
#159 := [rewrite]: #158
#165 := [monotonicity #159 #162]: #164
#170 := [trans #165 #168]: #169
#138 := [asserted]: #36
#171 := [mp #138 #170]: #166
#174 := [and-elim #171]: #154
#173 := [and-elim #171]: #151
#172 := [and-elim #171]: #144
[th-lemma #172 #173 #174]: false
unsat
e0147cb04fc2e3bc1038fd5f0ee658954044a8ae 55 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#141 := -1::int
#155 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#156 := (+ #26 #155)
#157 := (<= #156 0::int)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#144 := (* -1::int #31)
#148 := (+ #26 #144)
#149 := (<= #148 0::int)
#152 := (not #149)
#145 := (+ #28 #144)
#143 := (>= #145 0::int)
#142 := (not #143)
#166 := (and #142 #152 #157)
#33 := (<= #26 #31)
#34 := (not #33)
#32 := (< #28 #31)
#35 := (and #32 #34)
#29 := (<= #26 #28)
#36 := (and #29 #35)
#169 := (iff #36 #166)
#160 := (and #142 #152)
#163 := (and #157 #160)
#167 := (iff #163 #166)
#168 := [rewrite]: #167
#164 := (iff #36 #163)
#161 := (iff #35 #160)
#153 := (iff #34 #152)
#150 := (iff #33 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#146 := (iff #32 #142)
#147 := [rewrite]: #146
#162 := [monotonicity #147 #154]: #161
#158 := (iff #29 #157)
#159 := [rewrite]: #158
#165 := [monotonicity #159 #162]: #164
#170 := [trans #165 #168]: #169
#138 := [asserted]: #36
#171 := [mp #138 #170]: #166
#174 := [and-elim #171]: #157
#172 := [and-elim #171]: #142
#173 := [and-elim #171]: #152
[th-lemma #173 #172 #174]: false
unsat
7f2af445a3047b7cf9ba6ecc7dbf1305f9ebc50e 61 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#141 := -1::int
#162 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#163 := (+ #26 #162)
#161 := (>= #163 0::int)
#160 := (not #161)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#144 := (* -1::int #31)
#150 := (+ #26 #144)
#149 := (>= #150 0::int)
#145 := (+ #28 #144)
#143 := (>= #145 0::int)
#142 := (not #143)
#172 := (and #142 #149 #160)
#33 := (< #26 #31)
#34 := (not #33)
#32 := (< #28 #31)
#35 := (and #32 #34)
#29 := (< #26 #28)
#36 := (and #29 #35)
#175 := (iff #36 #172)
#166 := (and #142 #149)
#169 := (and #160 #166)
#173 := (iff #169 #172)
#174 := [rewrite]: #173
#170 := (iff #36 #169)
#167 := (iff #35 #166)
#158 := (iff #34 #149)
#148 := (not #149)
#153 := (not #148)
#156 := (iff #153 #149)
#157 := [rewrite]: #156
#154 := (iff #34 #153)
#151 := (iff #33 #148)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#159 := [trans #155 #157]: #158
#146 := (iff #32 #142)
#147 := [rewrite]: #146
#168 := [monotonicity #147 #159]: #167
#164 := (iff #29 #160)
#165 := [rewrite]: #164
#171 := [monotonicity #165 #168]: #170
#176 := [trans #171 #174]: #175
#138 := [asserted]: #36
#177 := [mp #138 #176]: #172
#180 := [and-elim #177]: #160
#178 := [and-elim #177]: #142
#179 := [and-elim #177]: #149
[th-lemma #179 #178 #180]: false
unsat
482ecd4de600d63ba37499412aa93699dc969167 53 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#140 := -1::int
#154 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#155 := (+ #26 #154)
#153 := (>= #155 0::int)
#152 := (not #153)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#143 := (* -1::int #31)
#147 := (+ #26 #143)
#148 := (<= #147 0::int)
#149 := (not #148)
#144 := (+ #28 #143)
#142 := (>= #144 0::int)
#141 := (not #142)
#164 := (and #141 #149 #152)
#33 := (< #31 #26)
#32 := (< #28 #31)
#34 := (and #32 #33)
#29 := (< #26 #28)
#35 := (and #29 #34)
#167 := (iff #35 #164)
#158 := (and #141 #149)
#161 := (and #152 #158)
#165 := (iff #161 #164)
#166 := [rewrite]: #165
#162 := (iff #35 #161)
#159 := (iff #34 #158)
#150 := (iff #33 #149)
#151 := [rewrite]: #150
#145 := (iff #32 #141)
#146 := [rewrite]: #145
#160 := [monotonicity #146 #151]: #159
#156 := (iff #29 #152)
#157 := [rewrite]: #156
#163 := [monotonicity #157 #160]: #162
#168 := [trans #163 #166]: #167
#137 := [asserted]: #35
#169 := [mp #137 #168]: #164
#172 := [and-elim #169]: #152
#170 := [and-elim #169]: #141
#171 := [and-elim #169]: #149
[th-lemma #171 #170 #172]: false
unsat
ed434a8d852f3ef0c4b2a01de695370158eb1708 17 0
#2 := false
#8 := 0::int
#9 := (= 0::int 0::int)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
338357cf4196be773c72026276e98bed42563d5e 25 0
#2 := false
#8 := 0::int
#9 := (- 0::int)
#10 := (= 0::int #9)
#11 := (not #10)
#43 := (iff #11 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #11 #38)
#36 := (iff #10 true)
#31 := (= 0::int 0::int)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #10 #31)
#29 := (= #9 0::int)
#30 := [rewrite]: #29
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#28 := [asserted]: #11
[mp #28 #44]: false
unsat
867d1fafdaadf30f7a059d5589fdb8c2bf408653 17 0
#2 := false
#8 := 1::int
#9 := (= 1::int 1::int)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
5943aea69963bbcc197c3d50093a07c2985107c2 34 0
#2 := false
#8 := 1::int
#9 := (- 1::int)
#10 := (= #9 1::int)
#11 := (not #10)
#12 := (not #11)
#52 := (iff #12 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 true)
#40 := (not false)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 false)
#30 := -1::int
#33 := (= -1::int 1::int)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (= #9 -1::int)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#29 := [asserted]: #12
[mp #29 #53]: false
unsat
8e1bb3306a0749f86b5eb9ba42882d9894f78d3d 26 0
#2 := false
decl f3 :: int
#8 := f3
#9 := 0::int
#10 := (+ f3 0::int)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
715dc24e87073f9f3b4eba5f97976011aef52fdb 40 0
#2 := false
#12 := 567::int
#10 := 345::int
#8 := 123::int
#9 := (- 123::int)
#11 := (+ #9 345::int)
#13 := (< #11 567::int)
#14 := (not #13)
#58 := (iff #14 false)
#38 := 222::int
#43 := (< 222::int 567::int)
#46 := (not #43)
#56 := (iff #46 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #46 #51)
#49 := (iff #43 true)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#41 := (= #11 222::int)
#32 := -123::int
#35 := (+ -123::int 345::int)
#39 := (= #35 222::int)
#40 := [rewrite]: #39
#36 := (= #11 #35)
#33 := (= #9 -123::int)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#42 := [trans #37 #40]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#59 := [trans #48 #57]: #58
#31 := [asserted]: #14
[mp #31 #59]: false
unsat
d639d04a056e1fcc050de165453e89b0bfe78d22 26 0
#2 := false
decl f3 :: int
#9 := f3
#8 := 0::int
#10 := (+ 0::int f3)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
bb65114f0b3cbddac138f9f5170c5cee40e42881 30 0
#2 := false
#10 := 2345678901::int
#8 := 123456789::int
#9 := (- 123456789::int)
#11 := (< #9 2345678901::int)
#12 := (not #11)
#48 := (iff #12 false)
#30 := -123456789::int
#33 := (< -123456789::int 2345678901::int)
#36 := (not #33)
#46 := (iff #36 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #36 #41)
#39 := (iff #33 true)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#37 := (iff #12 #36)
#34 := (iff #11 #33)
#31 := (= #9 -123456789::int)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#38 := [monotonicity #35]: #37
#49 := [trans #38 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
3b63f6086e2140e850f10e8d6167751f9a080815 29 0
#2 := false
decl f3 :: int
#8 := f3
decl f4 :: int
#9 := f4
#11 := (+ f4 f3)
#10 := (+ f3 f4)
#12 := (= #10 #11)
#13 := (not #12)
#45 := (iff #13 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #13 #40)
#38 := (iff #12 true)
#33 := (= #10 #10)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #12 #33)
#31 := (= #11 #10)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #13
[mp #30 #46]: false
unsat
1ce9f759ae49f3864320a9981e66669d7d207503 33 0
#2 := false
decl f5 :: int
#10 := f5
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#13 := (+ f3 f4)
#14 := (+ #13 f5)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#48 := (iff #16 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #16 #43)
#41 := (iff #15 true)
#36 := (= #12 #12)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #15 #36)
#34 := (= #14 #12)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #16
[mp #33 #49]: false
unsat
64c69e25d3a0449c698081f4cb9242fb6934e70f 26 0
#2 := false
#8 := 1::int
#9 := (- 1::int)
#10 := (= #9 #9)
#11 := (not #10)
#44 := (iff #11 false)
#1 := true
#39 := (not true)
#42 := (iff #39 false)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 true)
#29 := -1::int
#32 := (= -1::int -1::int)
#35 := (iff #32 true)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#30 := (= #9 -1::int)
#31 := [rewrite]: #30
#34 := [monotonicity #31 #31]: #33
#38 := [trans #34 #36]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#28 := [asserted]: #11
[mp #28 #45]: false
unsat
874be756bcaf30e65c16d8e08cb52dff2d8a608c 45 0
#2 := false
decl f4 :: int
#9 := f4
#13 := (- f4)
decl f3 :: int
#8 := f3
#14 := (= f3 #13)
#11 := 0::int
#10 := (+ f3 f4)
#12 := (= #10 0::int)
#15 := (iff #12 #14)
#16 := (not #15)
#62 := (iff #16 false)
#47 := (not #12)
#34 := -1::int
#35 := (* -1::int f4)
#38 := (= f3 #35)
#48 := (iff #38 #47)
#60 := (iff #48 false)
#55 := (iff #12 #47)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #48 #55)
#53 := (iff #38 #12)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#51 := (iff #16 #48)
#41 := (iff #12 #38)
#44 := (not #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #16 #44)
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#36 := (= #13 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#63 := [trans #52 #61]: #62
#33 := [asserted]: #16
[mp #33 #63]: false
unsat
47f2b1fe93be442ab0a662dee31bf529fde2944c 26 0
#2 := false
#8 := 3::int
#9 := (- 3::int)
#10 := (= #9 #9)
#11 := (not #10)
#44 := (iff #11 false)
#1 := true
#39 := (not true)
#42 := (iff #39 false)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 true)
#29 := -3::int
#32 := (= -3::int -3::int)
#35 := (iff #32 true)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#30 := (= #9 -3::int)
#31 := [rewrite]: #30
#34 := [monotonicity #31 #31]: #33
#38 := [trans #34 #36]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#28 := [asserted]: #11
[mp #28 #45]: false
unsat
2482501dff9d1180d8ed87b147225f74cf2613dc 58 0
#2 := false
decl f3 :: int
#8 := f3
#10 := 0::int
#12 := (< 0::int f3)
#9 := (- f3)
#11 := (< #9 0::int)
#13 := (iff #11 #12)
#14 := (not #13)
#76 := (iff #14 false)
#50 := (not #12)
#32 := -1::int
#33 := (* -1::int f3)
#36 := (< #33 0::int)
#51 := (iff #36 #50)
#74 := (iff #51 false)
#56 := (<= f3 0::int)
#57 := (not #56)
#69 := (iff #57 #56)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #51 #69)
#67 := (iff #50 #56)
#62 := (not #57)
#65 := (iff #62 #56)
#66 := [rewrite]: #65
#63 := (iff #50 #62)
#60 := (iff #12 #57)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#58 := (iff #36 #57)
#59 := [rewrite]: #58
#71 := [monotonicity #59 #68]: #70
#75 := [trans #71 #73]: #74
#54 := (iff #14 #51)
#42 := (iff #12 #36)
#47 := (not #42)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #14 #47)
#45 := (iff #13 #42)
#39 := (iff #36 #12)
#43 := (iff #39 #42)
#44 := [rewrite]: #43
#40 := (iff #13 #39)
#37 := (iff #11 #36)
#34 := (= #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#77 := [trans #55 #75]: #76
#31 := [asserted]: #14
[mp #31 #77]: false
unsat
8ec4c3ebc255a7267982d00d4ae0cabf0d20510a 61 0
#2 := false
#8 := 0::int
decl f3 :: int
#9 := f3
#11 := (- f3)
#12 := (< #11 0::int)
#10 := (< 0::int f3)
#13 := (implies #10 #12)
#14 := (not #13)
#78 := (iff #14 false)
#32 := -1::int
#33 := (* -1::int f3)
#36 := (< #33 0::int)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#76 := (iff #48 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #48 #71)
#69 := (iff #43 true)
#51 := (<= f3 0::int)
#52 := (not #51)
#64 := (or #51 #52)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #43 #64)
#62 := (iff #36 #52)
#63 := [rewrite]: #62
#60 := (iff #42 #51)
#55 := (not #52)
#58 := (iff #55 #51)
#59 := [rewrite]: #58
#56 := (iff #42 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#66 := [monotonicity #61 #63]: #65
#70 := [trans #66 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#49 := (iff #14 #48)
#46 := (iff #13 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#79 := [trans #50 #77]: #78
#31 := [asserted]: #14
[mp #31 #79]: false
unsat
91833407e2fa11bd81435e99b55b58ebfafb1e77 26 0
#2 := false
decl f3 :: int
#8 := f3
#9 := 0::int
#10 := (- f3 0::int)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
668c2d2887e11c00b7ba359c2de9bccabf20f1e2 61 0
#2 := false
decl f3 :: int
#8 := f3
#11 := (- f3)
#9 := 0::int
#12 := (< 0::int #11)
#10 := (< f3 0::int)
#13 := (implies #10 #12)
#14 := (not #13)
#78 := (iff #14 false)
#32 := -1::int
#33 := (* -1::int f3)
#36 := (< 0::int #33)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#76 := (iff #48 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #48 #71)
#69 := (iff #43 true)
#51 := (>= f3 0::int)
#52 := (not #51)
#64 := (or #51 #52)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #43 #64)
#62 := (iff #36 #52)
#63 := [rewrite]: #62
#60 := (iff #42 #51)
#55 := (not #52)
#58 := (iff #55 #51)
#59 := [rewrite]: #58
#56 := (iff #42 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#66 := [monotonicity #61 #63]: #65
#70 := [trans #66 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#49 := (iff #14 #48)
#46 := (iff #13 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#79 := [trans #50 #77]: #78
#31 := [asserted]: #14
[mp #31 #79]: false
unsat
4c9b1171e8f5ec24906ea56a788bc2e3bdd3eeca 32 0
#2 := false
decl f3 :: int
#9 := f3
#11 := (- f3)
#8 := 0::int
#10 := (- 0::int f3)
#12 := (= #10 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#31 := -1::int
#32 := (* -1::int f3)
#37 := (= #32 #32)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (= #11 #32)
#36 := [rewrite]: #35
#33 := (= #10 #32)
#34 := [rewrite]: #33
#39 := [monotonicity #34 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#30 := [asserted]: #13
[mp #30 #50]: false
unsat
d57becfa9f4b7e88a7dcbf91788610a6cb73b146 64 0
#2 := false
#12 := 0::int
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#11 := (- f3 f4)
#13 := (< #11 0::int)
#10 := (< f3 f4)
#14 := (implies #10 #13)
#15 := (not #14)
#80 := (iff #15 false)
#33 := -1::int
#34 := (* -1::int f4)
#35 := (+ f3 #34)
#38 := (< #35 0::int)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#78 := (iff #50 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #50 #73)
#71 := (iff #45 true)
#54 := (>= #35 0::int)
#53 := (not #54)
#66 := (or #54 #53)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #45 #66)
#64 := (iff #38 #53)
#65 := [rewrite]: #64
#62 := (iff #44 #54)
#57 := (not #53)
#60 := (iff #57 #54)
#61 := [rewrite]: #60
#58 := (iff #44 #57)
#55 := (iff #10 #53)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#36 := (= #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#32 := [asserted]: #15
[mp #32 #81]: false
unsat
c1b0e98ca220494689565415ab1dcebe6fa0d444 26 0
#2 := false
#9 := 0::int
decl f3 :: int
#8 := f3
#10 := (* f3 0::int)
#11 := (= #10 0::int)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= 0::int 0::int)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
4040174103807c5abeeb69b9185128b009b95b5f 44 0
#2 := false
decl f3 :: int
#8 := f3
decl f4 :: int
#9 := f4
#11 := (- f4 f3)
#12 := (- #11)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#60 := (iff #14 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#32 := -1::int
#33 := (* -1::int f4)
#34 := (+ f3 #33)
#48 := (= #34 #34)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (= #12 #34)
#37 := (* -1::int f3)
#38 := (+ #37 f4)
#41 := (- #38)
#44 := (= #41 #34)
#45 := [rewrite]: #44
#42 := (= #12 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#35 := (= #10 #34)
#36 := [rewrite]: #35
#50 := [monotonicity #36 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#31 := [asserted]: #14
[mp #31 #61]: false
unsat
dece965f3c6151f83b0de59bbe4f0ba10e7e97f9 26 0
#2 := false
#8 := 0::int
decl f3 :: int
#9 := f3
#10 := (* 0::int f3)
#11 := (= #10 0::int)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= 0::int 0::int)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
054a96393770a76ee29957e3d16bb134c9dadb35 42 0
#2 := false
decl f3 :: int
#8 := f3
decl f4 :: int
#9 := f4
#11 := (- f4)
#12 := (+ #11 f3)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#58 := (iff #14 false)
#1 := true
#53 := (not true)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #14 #53)
#51 := (iff #13 true)
#32 := -1::int
#33 := (* -1::int f4)
#34 := (+ f3 #33)
#46 := (= #34 #34)
#49 := (iff #46 true)
#50 := [rewrite]: #49
#47 := (iff #13 #46)
#44 := (= #12 #34)
#39 := (+ #33 f3)
#42 := (= #39 #34)
#43 := [rewrite]: #42
#40 := (= #12 #39)
#37 := (= #11 #33)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#35 := (= #10 #34)
#36 := [rewrite]: #35
#48 := [monotonicity #36 #45]: #47
#52 := [trans #48 #50]: #51
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#31 := [asserted]: #14
[mp #31 #59]: false
unsat
461fdb6982dad0d1b399fb5db09287115e6b6cc3 26 0
#2 := false
decl f3 :: int
#8 := f3
#9 := 1::int
#10 := (* f3 1::int)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
ad203296ea503ecdd81c71c4ae272e08de16a654 48 0
#2 := false
decl f5 :: int
#11 := f5
decl f4 :: int
#9 := f4
#13 := (+ f4 f5)
decl f3 :: int
#8 := f3
#14 := (- f3 #13)
#10 := (- f3 f4)
#12 := (- #10 f5)
#15 := (= #12 #14)
#16 := (not #15)
#63 := (iff #16 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #16 #58)
#56 := (iff #15 true)
#34 := -1::int
#42 := (* -1::int f5)
#35 := (* -1::int f4)
#43 := (+ #35 #42)
#44 := (+ f3 #43)
#51 := (= #44 #44)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #15 #51)
#49 := (= #14 #44)
#50 := [rewrite]: #49
#47 := (= #12 #44)
#36 := (+ f3 #35)
#39 := (- #36 f5)
#45 := (= #39 #44)
#46 := [rewrite]: #45
#40 := (= #12 #39)
#37 := (= #10 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#48 := [trans #41 #46]: #47
#53 := [monotonicity #48 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#33 := [asserted]: #16
[mp #33 #64]: false
unsat
0b54863485aa10cf645d5bc7b322d1ba8118b0d8 26 0
#2 := false
decl f3 :: int
#9 := f3
#8 := 1::int
#10 := (* 1::int f3)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
00cbc9bbde1a21b4ec41867ca29cd9a793c98e95 40 0
#2 := false
decl f3 :: int
#8 := f3
#12 := (- f3)
#9 := 1::int
#10 := (- 1::int)
#11 := (* f3 #10)
#13 := (= #11 #12)
#14 := (not #13)
#57 := (iff #14 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 true)
#32 := -1::int
#38 := (* -1::int f3)
#45 := (= #38 #38)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#43 := (= #12 #38)
#44 := [rewrite]: #43
#41 := (= #11 #38)
#35 := (* f3 -1::int)
#39 := (= #35 #38)
#40 := [rewrite]: #39
#36 := (= #11 #35)
#33 := (= #10 -1::int)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#42 := [trans #37 #40]: #41
#47 := [monotonicity #42 #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#31 := [asserted]: #14
[mp #31 #58]: false
unsat
98af8ac1621f25bec4b921bca3d925b1b20ce7aa 75 0
#2 := false
#8 := 0::int
decl f3 :: int
#9 := f3
#32 := -1::int
#33 := (* -1::int f3)
#45 := (>= f3 0::int)
#52 := (ite #45 f3 #33)
#73 := (* -1::int #52)
#81 := (+ f3 #73)
#90 := (<= #81 0::int)
#76 := (= f3 #52)
#71 := (+ #33 #73)
#80 := (<= #71 0::int)
#77 := (= #33 #52)
#46 := (not #45)
#82 := [hypothesis]: #46
#74 := (or #45 #77)
#75 := [def-axiom]: #74
#83 := [unit-resolution #75 #82]: #77
#84 := (not #77)
#85 := (or #84 #80)
#86 := [th-lemma]: #85
#87 := [unit-resolution #86 #83]: #80
#61 := (>= #52 0::int)
#65 := (not #61)
#11 := (- f3)
#10 := (< f3 0::int)
#12 := (ite #10 #11 f3)
#13 := (<= 0::int #12)
#14 := (not #13)
#68 := (iff #14 #65)
#36 := (ite #10 #33 f3)
#39 := (<= 0::int #36)
#42 := (not #39)
#66 := (iff #42 #65)
#63 := (iff #39 #61)
#57 := (<= 0::int #52)
#60 := (iff #57 #61)
#62 := [rewrite]: #60
#58 := (iff #39 #57)
#55 := (= #36 #52)
#49 := (ite #46 #33 f3)
#53 := (= #49 #52)
#54 := [rewrite]: #53
#50 := (= #36 #49)
#47 := (iff #10 #46)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#43 := (iff #14 #42)
#40 := (iff #13 #39)
#37 := (= #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#69 := [trans #44 #67]: #68
#31 := [asserted]: #14
#70 := [mp #31 #69]: #65
#88 := [th-lemma #82 #70 #87]: false
#89 := [lemma #88]: #45
#78 := (or #46 #76)
#79 := [def-axiom]: #78
#92 := [unit-resolution #79 #89]: #76
#93 := (not #76)
#94 := (or #93 #90)
#95 := [th-lemma]: #94
#96 := [unit-resolution #95 #92]: #90
[th-lemma #89 #70 #96]: false
unsat
372ec6980c70cef9ac29be50305f6f70f148ceb4 35 0
#2 := false
decl f3 :: int
#10 := f3
#12 := (- f3)
#8 := 1::int
#9 := (- 1::int)
#11 := (* #9 f3)
#13 := (= #11 #12)
#14 := (not #13)
#52 := (iff #14 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #14 #47)
#45 := (iff #13 true)
#32 := -1::int
#35 := (* -1::int f3)
#40 := (= #35 #35)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #13 #40)
#38 := (= #12 #35)
#39 := [rewrite]: #38
#36 := (= #11 #35)
#33 := (= #9 -1::int)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#42 := [monotonicity #37 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#31 := [asserted]: #14
[mp #31 #53]: false
unsat
85ed4b98db23623099a1ab59de709435336b46b9 132 0
#2 := false
#9 := 0::int
decl f3 :: int
#8 := f3
#66 := (>= f3 0::int)
#67 := (not #66)
#34 := -1::int
#35 := (* -1::int f3)
#73 := (ite #66 f3 #35)
#102 := (= f3 #73)
#130 := (not #102)
#14 := (= f3 0::int)
#82 := (= #73 0::int)
#124 := (iff #82 #14)
#122 := (iff #14 #82)
#121 := [hypothesis]: #102
#123 := [monotonicity #121]: #122
#125 := [symm #123]: #124
#131 := (or #82 #130)
#60 := (not #14)
#99 := (not #82)
#126 := (iff #99 #60)
#127 := [monotonicity #125]: #126
#119 := [hypothesis]: #99
#128 := [mp #119 #127]: #60
#112 := (or #14 #82)
#89 := (iff #60 #82)
#11 := (- f3)
#10 := (< f3 0::int)
#12 := (ite #10 #11 f3)
#13 := (= #12 0::int)
#15 := (iff #13 #14)
#16 := (not #15)
#94 := (iff #16 #89)
#38 := (ite #10 #35 f3)
#44 := (= 0::int #38)
#61 := (iff #44 #60)
#92 := (iff #61 #89)
#86 := (iff #82 #60)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #61 #86)
#84 := (iff #44 #82)
#78 := (= 0::int #73)
#81 := (iff #78 #82)
#83 := [rewrite]: #81
#79 := (iff #44 #78)
#76 := (= #38 #73)
#70 := (ite #67 #35 f3)
#74 := (= #70 #73)
#75 := [rewrite]: #74
#71 := (= #38 #70)
#68 := (iff #10 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#77 := [trans #72 #75]: #76
#80 := [monotonicity #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#64 := (iff #16 #61)
#52 := (iff #14 #44)
#57 := (not #52)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #16 #57)
#55 := (iff #15 #52)
#49 := (iff #44 #14)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #15 #49)
#47 := (iff #13 #44)
#41 := (= #38 0::int)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #13 #41)
#39 := (= #12 #38)
#36 := (= #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#95 := [trans #65 #93]: #94
#33 := [asserted]: #16
#96 := [mp #33 #95]: #89
#97 := (not #89)
#110 := (or #14 #82 #97)
#111 := [def-axiom]: #110
#113 := [unit-resolution #111 #96]: #112
#120 := [unit-resolution #113 #119]: #14
#129 := [unit-resolution #120 #128]: false
#132 := [lemma #129]: #131
#133 := [unit-resolution #132 #121]: #82
#135 := [mp #133 #125]: #14
#108 := (or #60 #99)
#106 := (or #60 #99 #97)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #96]: #108
#134 := [unit-resolution #109 #133]: #60
#136 := [unit-resolution #134 #135]: false
#137 := [lemma #136]: #130
#104 := (or #67 #102)
#105 := [def-axiom]: #104
#143 := [unit-resolution #105 #137]: #67
#138 := (= #35 0::int)
#147 := (not #138)
#157 := (iff #147 #99)
#155 := (iff #138 #82)
#103 := (= #35 #73)
#100 := (or #66 #103)
#101 := [def-axiom]: #100
#154 := [unit-resolution #101 #143]: #103
#156 := [monotonicity #154]: #155
#158 := [monotonicity #156]: #157
#139 := (<= #35 0::int)
#145 := (not #139)
#142 := [hypothesis]: #139
#144 := [th-lemma #143 #142]: false
#146 := [lemma #144]: #145
#148 := (or #147 #139)
#149 := [th-lemma]: #148
#153 := [unit-resolution #149 #146]: #147
#159 := [mp #153 #158]: #99
#160 := [unit-resolution #113 #159]: #14
#161 := (or #60 #66)
#162 := [th-lemma]: #161
[unit-resolution #162 #160 #143]: false
unsat
92c9831074e5b2d154f59e6c16ca64cf6c2306e5 28 0
#2 := false
#8 := 3::int
decl f3 :: int
#9 := f3
#11 := (* f3 3::int)
#10 := (* 3::int f3)
#12 := (= #10 #11)
#13 := (not #12)
#45 := (iff #13 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #13 #40)
#38 := (iff #12 true)
#33 := (= #10 #10)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #12 #33)
#31 := (= #11 #10)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #13
[mp #30 #46]: false
unsat
63bab884626cc49af1ccdd9b8ddfe0dc08303f89 103 0
#2 := false
#8 := 0::int
decl f3 :: int
#9 := f3
#34 := -1::int
#35 := (* -1::int f3)
#112 := (* -1::int #35)
#113 := (+ f3 #112)
#115 := (>= #113 0::int)
#111 := (= f3 #35)
#61 := (>= f3 0::int)
#68 := (ite #61 f3 #35)
#118 := (= #68 #35)
#96 := (= #35 #68)
#62 := (not #61)
#107 := [hypothesis]: #61
#73 := (= f3 #68)
#97 := (or #62 #73)
#98 := [def-axiom]: #97
#108 := [unit-resolution #98 #107]: #73
#95 := (not #73)
#101 := (or #62 #95)
#83 := (iff #62 #73)
#12 := (- f3)
#11 := (< f3 0::int)
#13 := (ite #11 #12 f3)
#14 := (= #13 f3)
#10 := (<= 0::int f3)
#15 := (iff #10 #14)
#16 := (not #15)
#88 := (iff #16 #83)
#55 := (not #10)
#38 := (ite #11 #35 f3)
#44 := (= f3 #38)
#56 := (iff #44 #55)
#86 := (iff #56 #83)
#80 := (iff #73 #62)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #56 #80)
#78 := (iff #55 #62)
#76 := (iff #10 #61)
#77 := [rewrite]: #76
#79 := [monotonicity #77]: #78
#74 := (iff #44 #73)
#71 := (= #38 #68)
#65 := (ite #62 #35 f3)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #38 #65)
#63 := (iff #11 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#75 := [monotonicity #72]: #74
#82 := [monotonicity #75 #79]: #81
#87 := [trans #82 #85]: #86
#59 := (iff #16 #56)
#49 := (iff #10 #44)
#52 := (not #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #16 #52)
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#41 := (= #38 f3)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #14 #41)
#39 := (= #13 #38)
#36 := (= #12 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#89 := [trans #60 #87]: #88
#33 := [asserted]: #16
#90 := [mp #33 #89]: #83
#93 := (not #83)
#91 := (or #62 #95 #93)
#100 := [def-axiom]: #91
#102 := [unit-resolution #100 #90]: #101
#109 := [unit-resolution #102 #108 #107]: false
#110 := [lemma #109]: #62
#99 := (or #61 #96)
#94 := [def-axiom]: #99
#116 := [unit-resolution #94 #110]: #96
#119 := [symm #116]: #118
#105 := (or #61 #73)
#103 := (or #61 #73 #93)
#104 := [def-axiom]: #103
#106 := [unit-resolution #104 #90]: #105
#117 := [unit-resolution #106 #110]: #73
#120 := [trans #117 #119]: #111
#121 := (not #111)
#122 := (or #121 #115)
#123 := [th-lemma]: #122
#124 := [unit-resolution #123 #120]: #115
[th-lemma #110 #124]: false
unsat
1d80fb1bb6a7cd91244703f8571db834177b7724 149 0
#2 := false
#9 := 0::int
decl f3 :: int
#8 := f3
#34 := -1::int
#35 := (* -1::int f3)
#61 := (>= f3 0::int)
#68 := (ite #61 f3 #35)
#111 := (* -1::int #68)
#156 := (+ f3 #111)
#157 := (<= #156 0::int)
#98 := (= f3 #68)
#10 := (<= f3 0::int)
#55 := (not #10)
#78 := (+ f3 #68)
#77 := (= #78 0::int)
#93 := (not #77)
#115 := [hypothesis]: #93
#95 := (>= #78 0::int)
#112 := (+ #35 #111)
#113 := (<= #112 0::int)
#73 := (= #35 #68)
#62 := (not #61)
#131 := (or #62 #77)
#118 := (= f3 0::int)
#109 := (or #10 #77)
#85 := (iff #55 #77)
#12 := (- f3)
#11 := (< f3 0::int)
#13 := (ite #11 #12 f3)
#14 := (= #13 #12)
#15 := (iff #10 #14)
#16 := (not #15)
#90 := (iff #16 #85)
#38 := (ite #11 #35 f3)
#44 := (= #35 #38)
#56 := (iff #44 #55)
#88 := (iff #56 #85)
#82 := (iff #77 #55)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #56 #82)
#80 := (iff #44 #77)
#76 := (iff #73 #77)
#79 := [rewrite]: #76
#74 := (iff #44 #73)
#71 := (= #38 #68)
#65 := (ite #62 #35 f3)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #38 #65)
#63 := (iff #11 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#75 := [monotonicity #72]: #74
#81 := [trans #75 #79]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#59 := (iff #16 #56)
#49 := (iff #10 #44)
#52 := (not #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #16 #52)
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#41 := (= #38 #35)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #14 #41)
#36 := (= #12 #35)
#37 := [rewrite]: #36
#39 := (= #13 #38)
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40 #37]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#91 := [trans #60 #89]: #90
#33 := [asserted]: #16
#92 := [mp #33 #91]: #85
#102 := (not #85)
#107 := (or #10 #77 #102)
#108 := [def-axiom]: #107
#110 := [unit-resolution #108 #92]: #109
#116 := [unit-resolution #110 #115]: #10
#117 := [hypothesis]: #61
#119 := [th-lemma #117 #116]: #118
#127 := (= #78 f3)
#125 := (= #68 f3)
#99 := (or #62 #98)
#100 := [def-axiom]: #99
#120 := [unit-resolution #100 #117]: #98
#126 := [symm #120]: #125
#123 := (= #78 #68)
#121 := (= #68 #78)
#122 := [th-lemma #117 #116]: #121
#124 := [symm #122]: #123
#128 := [trans #124 #126]: #127
#129 := [trans #128 #119]: #77
#130 := [unit-resolution #115 #129]: false
#132 := [lemma #130]: #131
#133 := [unit-resolution #132 #115]: #62
#101 := (or #61 #73)
#96 := [def-axiom]: #101
#134 := [unit-resolution #96 #133]: #73
#135 := (not #73)
#136 := (or #135 #113)
#137 := [th-lemma]: #136
#138 := [unit-resolution #137 #134]: #113
#139 := (not #113)
#140 := (or #95 #139)
#141 := [th-lemma]: #140
#142 := [unit-resolution #141 #138]: #95
#97 := (<= #78 0::int)
#114 := (>= #112 0::int)
#143 := (or #135 #114)
#144 := [th-lemma]: #143
#145 := [unit-resolution #144 #134]: #114
#146 := (not #114)
#147 := (or #97 #146)
#148 := [th-lemma]: #147
#149 := [unit-resolution #148 #145]: #97
#151 := (not #95)
#150 := (not #97)
#152 := (or #77 #150 #151)
#153 := [th-lemma]: #152
#154 := [unit-resolution #153 #149 #142 #115]: false
#155 := [lemma #154]: #77
#105 := (or #55 #93)
#103 := (or #55 #93 #102)
#104 := [def-axiom]: #103
#106 := [unit-resolution #104 #92]: #105
#159 := [unit-resolution #106 #155]: #55
#160 := (or #61 #10)
#161 := [th-lemma]: #160
#162 := [unit-resolution #161 #159]: #61
#163 := [unit-resolution #100 #162]: #98
#164 := (not #98)
#165 := (or #164 #157)
#166 := [th-lemma]: #165
#167 := [unit-resolution #166 #163]: #157
#168 := (or #93 #97)
#169 := [th-lemma]: #168
#170 := [unit-resolution #169 #155]: #97
[th-lemma #159 #170 #167]: false
unsat
d757d2450917b1126e9b960ef50b94860dff541d 114 0
#2 := false
#9 := 0::int
decl f3 :: int
#8 := f3
#35 := -1::int
#36 := (* -1::int f3)
#67 := (>= f3 0::int)
#74 := (ite #67 f3 #36)
#88 := (* -1::int #74)
#127 := (+ #36 #88)
#137 := (<= #127 0::int)
#114 := (= #36 #74)
#68 := (not #67)
#125 := (+ f3 #88)
#126 := (<= #125 0::int)
#113 := (= f3 #74)
#128 := [hypothesis]: #67
#115 := (or #68 #113)
#116 := [def-axiom]: #115
#129 := [unit-resolution #116 #128]: #113
#130 := (not #113)
#131 := (or #130 #126)
#132 := [th-lemma]: #131
#133 := [unit-resolution #132 #129]: #126
#83 := (>= #74 0::int)
#82 := (not #83)
#94 := (ite #83 #74 #88)
#99 := (= #74 #94)
#102 := (not #99)
#11 := (- f3)
#10 := (< f3 0::int)
#12 := (ite #10 #11 f3)
#14 := (- #12)
#13 := (< #12 0::int)
#15 := (ite #13 #14 #12)
#16 := (= #15 #12)
#17 := (not #16)
#105 := (iff #17 #102)
#39 := (ite #10 #36 f3)
#48 := (* -1::int #39)
#42 := (< #39 0::int)
#53 := (ite #42 #48 #39)
#59 := (= #39 #53)
#64 := (not #59)
#103 := (iff #64 #102)
#100 := (iff #59 #99)
#97 := (= #53 #94)
#91 := (ite #82 #88 #74)
#95 := (= #91 #94)
#96 := [rewrite]: #95
#92 := (= #53 #91)
#77 := (= #39 #74)
#71 := (ite #68 #36 f3)
#75 := (= #71 #74)
#76 := [rewrite]: #75
#72 := (= #39 #71)
#69 := (iff #10 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#78 := [trans #73 #76]: #77
#89 := (= #48 #88)
#90 := [monotonicity #78]: #89
#86 := (iff #42 #82)
#79 := (< #74 0::int)
#84 := (iff #79 #82)
#85 := [rewrite]: #84
#80 := (iff #42 #79)
#81 := [monotonicity #78]: #80
#87 := [trans #81 #85]: #86
#93 := [monotonicity #87 #90 #78]: #92
#98 := [trans #93 #96]: #97
#101 := [monotonicity #78 #98]: #100
#104 := [monotonicity #101]: #103
#65 := (iff #17 #64)
#62 := (iff #16 #59)
#56 := (= #53 #39)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #16 #56)
#40 := (= #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#54 := (= #15 #53)
#51 := (= #14 #48)
#45 := (- #39)
#49 := (= #45 #48)
#50 := [rewrite]: #49
#46 := (= #14 #45)
#47 := [monotonicity #41]: #46
#52 := [trans #47 #50]: #51
#43 := (iff #13 #42)
#44 := [monotonicity #41]: #43
#55 := [monotonicity #44 #52 #41]: #54
#58 := [monotonicity #55 #41]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#106 := [trans #66 #104]: #105
#34 := [asserted]: #17
#107 := [mp #34 #106]: #102
#108 := (or #82 #99)
#117 := [def-axiom]: #108
#134 := [unit-resolution #117 #107]: #82
#135 := [th-lemma #128 #134 #133]: false
#136 := [lemma #135]: #68
#111 := (or #67 #114)
#112 := [def-axiom]: #111
#139 := [unit-resolution #112 #136]: #114
#140 := (not #114)
#141 := (or #140 #137)
#142 := [th-lemma]: #141
#143 := [unit-resolution #142 #139]: #137
[th-lemma #136 #134 #143]: false
unsat
5c7cb1cc77a21c05a0f34b1d636fd78635d99286 57 0
#2 := false
#36 := 0::int
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#33 := -1::int
#34 := (* -1::int f4)
#35 := (+ f3 #34)
#37 := (<= #35 0::int)
#40 := (ite #37 f3 f4)
#48 := (* -1::int #40)
#49 := (+ f3 #48)
#47 := (>= #49 0::int)
#53 := (not #47)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f3)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #47)
#43 := (<= #40 f3)
#46 := (iff #43 #47)
#50 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#60 := (= f3 #40)
#31 := (+ f4 #48)
#65 := (>= #31 0::int)
#61 := (= f4 #40)
#62 := (not #37)
#66 := [hypothesis]: #62
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#67 := [unit-resolution #57 #66]: #61
#68 := (not #61)
#69 := (or #68 #65)
#70 := [th-lemma]: #69
#71 := [unit-resolution #70 #67]: #65
#72 := [th-lemma #56 #66 #71]: false
#73 := [lemma #72]: #37
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#74 := [unit-resolution #58 #73]: #60
#75 := (not #60)
#76 := (or #75 #47)
#77 := [th-lemma]: #76
[unit-resolution #77 #74 #56]: false
unsat
10e42ba36f16f5b77635ba4696f9e210ae8fff63 57 0
#2 := false
#36 := 0::int
decl f4 :: int
#9 := f4
#33 := -1::int
#34 := (* -1::int f4)
decl f3 :: int
#8 := f3
#35 := (+ f3 #34)
#37 := (<= #35 0::int)
#40 := (ite #37 f3 f4)
#61 := (= f4 #40)
#65 := (not #61)
#47 := (* -1::int #40)
#48 := (+ f4 #47)
#46 := (>= #48 0::int)
#53 := (not #46)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f4)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #46)
#43 := (<= #40 f4)
#49 := (iff #43 #46)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#64 := [hypothesis]: #61
#66 := (or #65 #46)
#67 := [th-lemma]: #66
#68 := [unit-resolution #67 #64 #56]: false
#69 := [lemma #68]: #65
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#72 := [unit-resolution #57 #69]: #37
#31 := (+ f3 #47)
#71 := (>= #31 0::int)
#60 := (= f3 #40)
#62 := (not #37)
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#73 := [unit-resolution #58 #72]: #60
#74 := (not #60)
#75 := (or #74 #71)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #73]: #71
[th-lemma #77 #56 #72]: false
unsat
91d7fdd486bebfbe440c8a2d28eb4c92f78f7bd1 103 0
#2 := false
#45 := 0::int
decl f5 :: int
#11 := f5
decl f4 :: int
#9 := f4
#43 := -1::int
#53 := (* -1::int f5)
#63 := (+ f4 #53)
#64 := (<= #63 0::int)
#67 := (ite #64 f4 f5)
#75 := (* -1::int #67)
decl f3 :: int
#8 := f3
#76 := (+ f3 #75)
#74 := (>= #76 0::int)
#73 := (not #74)
#54 := (+ f3 #53)
#52 := (>= #54 0::int)
#51 := (not #52)
#47 := (* -1::int f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::int)
#44 := (not #46)
#57 := (and #44 #51)
#60 := (not #57)
#81 := (or #60 #73)
#84 := (not #81)
#14 := (<= f4 f5)
#15 := (ite #14 f4 f5)
#16 := (< f3 #15)
#12 := (< f3 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#87 := (iff #18 #84)
#36 := (not #13)
#37 := (or #36 #16)
#40 := (not #37)
#85 := (iff #40 #84)
#82 := (iff #37 #81)
#79 := (iff #16 #73)
#70 := (< f3 #67)
#77 := (iff #70 #73)
#78 := [rewrite]: #77
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#80 := [trans #72 #78]: #79
#61 := (iff #36 #60)
#58 := (iff #13 #57)
#55 := (iff #12 #51)
#56 := [rewrite]: #55
#49 := (iff #10 #44)
#50 := [rewrite]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#83 := [monotonicity #62 #80]: #82
#86 := [monotonicity #83]: #85
#41 := (iff #18 #40)
#38 := (iff #17 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#88 := [trans #42 #86]: #87
#35 := [asserted]: #18
#89 := [mp #35 #88]: #84
#93 := [not-or-elim #89]: #74
#90 := [not-or-elim #89]: #57
#92 := [and-elim #90]: #51
#98 := (+ f5 #75)
#115 := (<= #98 0::int)
#104 := (= f5 #67)
#105 := (not #64)
#103 := (= f4 #67)
#110 := (not #103)
#100 := (+ f4 #75)
#97 := (<= #100 0::int)
#107 := (not #97)
#91 := [and-elim #90]: #44
#96 := [hypothesis]: #97
#94 := [th-lemma #96 #91 #93]: false
#108 := [lemma #94]: #107
#109 := [hypothesis]: #103
#111 := (or #110 #97)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109 #108]: false
#114 := [lemma #113]: #110
#106 := (or #105 #103)
#101 := [def-axiom]: #106
#117 := [unit-resolution #101 #114]: #105
#102 := (or #64 #104)
#99 := [def-axiom]: #102
#118 := [unit-resolution #99 #117]: #104
#119 := (not #104)
#120 := (or #119 #115)
#121 := [th-lemma]: #120
#122 := [unit-resolution #121 #118]: #115
[th-lemma #122 #92 #93]: false
unsat
3d8b7b7060fb0e75fadc99b439fcfbd64f5e5bd8 57 0
#2 := false
#36 := 0::int
decl f4 :: int
#9 := f4
#33 := -1::int
#34 := (* -1::int f4)
decl f3 :: int
#8 := f3
#35 := (+ f3 #34)
#37 := (<= #35 0::int)
#40 := (ite #37 f4 f3)
#61 := (= f3 #40)
#65 := (not #61)
#46 := (* -1::int #40)
#47 := (+ f3 #46)
#48 := (<= #47 0::int)
#53 := (not #48)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#12 := (<= f3 #11)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #48)
#43 := (<= f3 #40)
#49 := (iff #43 #48)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#64 := [hypothesis]: #61
#66 := (or #65 #48)
#67 := [th-lemma]: #66
#68 := [unit-resolution #67 #64 #56]: false
#69 := [lemma #68]: #65
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#72 := [unit-resolution #57 #69]: #37
#31 := (+ f4 #46)
#70 := (<= #31 0::int)
#60 := (= f4 #40)
#62 := (not #37)
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#73 := [unit-resolution #58 #72]: #60
#74 := (not #60)
#75 := (or #74 #70)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #73]: #70
[th-lemma #77 #56 #72]: false
unsat
11fa6e1b37f0031ac059637e25afb0cf1222dc3f 86 0
#2 := false
decl f3 :: int
#8 := f3
decl f4 :: int
#9 := f4
#38 := 0::int
#35 := -1::int
#36 := (* -1::int f4)
#37 := (+ f3 #36)
#46 := (>= #37 0::int)
#48 := (ite #46 f4 f3)
#39 := (<= #37 0::int)
#42 := (ite #39 f3 f4)
#51 := (= #42 #48)
#33 := (= f4 #48)
#65 := (= f3 #48)
#66 := (not #46)
#71 := [hypothesis]: #66
#69 := (or #46 #65)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #71]: #65
#77 := (= #42 f3)
#61 := (= f3 #42)
#73 := (or #46 #39)
#74 := [th-lemma]: #73
#75 := [unit-resolution #74 #71]: #39
#63 := (not #39)
#64 := (or #63 #61)
#59 := [def-axiom]: #64
#76 := [unit-resolution #59 #75]: #61
#78 := [symm #76]: #77
#79 := [trans #78 #72]: #51
#54 := (not #51)
#12 := (<= f4 f3)
#13 := (ite #12 f4 f3)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#14 := (= #11 #13)
#15 := (not #14)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (= #13 #48)
#45 := (iff #12 #46)
#47 := [rewrite]: #45
#50 := [monotonicity #47]: #49
#43 := (= #11 #42)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#53 := [monotonicity #44 #50]: #52
#56 := [monotonicity #53]: #55
#32 := [asserted]: #15
#57 := [mp #32 #56]: #54
#80 := [unit-resolution #57 #79]: false
#81 := [lemma #80]: #46
#67 := (or #66 #33)
#68 := [def-axiom]: #67
#83 := [unit-resolution #68 #81]: #33
#103 := (= #42 f4)
#82 := (= f3 f4)
#62 := (= f4 #42)
#93 := (not #62)
#94 := (iff #54 #93)
#91 := (iff #51 #62)
#89 := (iff #62 #51)
#84 := (= #48 #42)
#87 := (iff #84 #51)
#88 := [commutativity]: #87
#85 := (iff #62 #84)
#86 := [monotonicity #83]: #85
#90 := [trans #86 #88]: #89
#92 := [symm #90]: #91
#95 := [monotonicity #92]: #94
#96 := [mp #57 #95]: #93
#60 := (or #39 #62)
#58 := [def-axiom]: #60
#97 := [unit-resolution #58 #96]: #39
#98 := (or #82 #63 #66)
#99 := [th-lemma]: #98
#100 := [unit-resolution #99 #97 #81]: #82
#101 := [unit-resolution #59 #97]: #61
#102 := [symm #101]: #77
#104 := [trans #102 #100]: #103
#105 := [trans #104 #83]: #51
[unit-resolution #57 #105]: false
unsat
d9ad9cbc455d3076d4a7e86bc3367086cdbf80aa 57 0
#2 := false
#35 := 0::int
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#33 := -1::int
#37 := (* -1::int f4)
#38 := (+ f3 #37)
#36 := (>= #38 0::int)
#40 := (ite #36 f3 f4)
#46 := (* -1::int #40)
#47 := (+ f3 #46)
#48 := (<= #47 0::int)
#53 := (not #48)
#10 := (<= f4 f3)
#11 := (ite #10 f3 f4)
#12 := (<= f3 #11)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #48)
#43 := (<= f3 #40)
#49 := (iff #43 #48)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#34 := (iff #10 #36)
#39 := [rewrite]: #34
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#60 := (= f3 #40)
#31 := (+ f4 #46)
#64 := (<= #31 0::int)
#61 := (= f4 #40)
#62 := (not #36)
#66 := [hypothesis]: #62
#59 := (or #36 #61)
#57 := [def-axiom]: #59
#67 := [unit-resolution #57 #66]: #61
#68 := (not #61)
#69 := (or #68 #64)
#70 := [th-lemma]: #69
#71 := [unit-resolution #70 #67]: #64
#72 := [th-lemma #56 #66 #71]: false
#73 := [lemma #72]: #36
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#74 := [unit-resolution #58 #73]: #60
#75 := (not #60)
#76 := (or #75 #48)
#77 := [th-lemma]: #76
[unit-resolution #77 #74 #56]: false
unsat
57fed093c0e757f5135ad67112d460f34a931a41 68 0
#2 := false
#8 := 0::int
decl f3 :: int
#9 := f3
#11 := (<= f3 0::int)
#12 := (ite #11 f3 0::int)
#13 := (= #12 0::int)
#76 := (= f3 0::int)
#50 := (>= f3 0::int)
#51 := (not #50)
#59 := (or #13 #51)
#64 := (not #59)
#10 := (<= 0::int f3)
#14 := (implies #10 #13)
#15 := (not #14)
#67 := (iff #15 #64)
#33 := (= 0::int #12)
#39 := (not #10)
#40 := (or #39 #33)
#45 := (not #40)
#65 := (iff #45 #64)
#62 := (iff #40 #59)
#56 := (or #51 #13)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #40 #56)
#54 := (iff #33 #13)
#55 := [rewrite]: #54
#52 := (iff #39 #51)
#48 := (iff #10 #50)
#49 := [rewrite]: #48
#53 := [monotonicity #49]: #52
#58 := [monotonicity #53 #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#46 := (iff #15 #45)
#43 := (iff #14 #40)
#36 := (implies #10 #33)
#41 := (iff #36 #40)
#42 := [rewrite]: #41
#37 := (iff #14 #36)
#34 := (iff #13 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#44 := [trans #38 #42]: #43
#47 := [monotonicity #44]: #46
#68 := [trans #47 #66]: #67
#32 := [asserted]: #15
#69 := [mp #32 #68]: #64
#72 := [not-or-elim #69]: #50
#70 := (not #13)
#71 := [not-or-elim #69]: #70
#78 := (or #11 #13)
#79 := [def-axiom]: #78
#77 := [unit-resolution #79 #71]: #11
#81 := (not #11)
#75 := (or #76 #81 #51)
#73 := [th-lemma]: #75
#84 := [unit-resolution #73 #77 #72]: #76
#86 := (= #12 f3)
#80 := (= f3 #12)
#82 := (or #81 #80)
#83 := [def-axiom]: #82
#85 := [unit-resolution #83 #77]: #80
#87 := [symm #85]: #86
#88 := [trans #87 #84]: #13
[unit-resolution #71 #88]: false
unsat
512e03c208778cc0f727c8eba68f23d12462f16f 103 0
#2 := false
#45 := 0::int
decl f3 :: int
#8 := f3
decl f5 :: int
#11 := f5
#43 := -1::int
#51 := (* -1::int f5)
#63 := (+ f3 #51)
#64 := (<= #63 0::int)
#67 := (ite #64 f5 f3)
#73 := (* -1::int #67)
decl f4 :: int
#9 := f4
#74 := (+ f4 #73)
#75 := (<= #74 0::int)
#76 := (not #75)
#52 := (+ f4 #51)
#53 := (<= #52 0::int)
#54 := (not #53)
#47 := (* -1::int f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::int)
#44 := (not #46)
#57 := (and #44 #54)
#60 := (not #57)
#81 := (or #60 #76)
#84 := (not #81)
#14 := (<= f3 f5)
#15 := (ite #14 f5 f3)
#16 := (< #15 f4)
#12 := (< f5 f4)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#87 := (iff #18 #84)
#36 := (not #13)
#37 := (or #36 #16)
#40 := (not #37)
#85 := (iff #40 #84)
#82 := (iff #37 #81)
#79 := (iff #16 #76)
#70 := (< #67 f4)
#77 := (iff #70 #76)
#78 := [rewrite]: #77
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#80 := [trans #72 #78]: #79
#61 := (iff #36 #60)
#58 := (iff #13 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#49 := (iff #10 #44)
#50 := [rewrite]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#83 := [monotonicity #62 #80]: #82
#86 := [monotonicity #83]: #85
#41 := (iff #18 #40)
#38 := (iff #17 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#88 := [trans #42 #86]: #87
#35 := [asserted]: #18
#89 := [mp #35 #88]: #84
#93 := [not-or-elim #89]: #75
#90 := [not-or-elim #89]: #57
#91 := [and-elim #90]: #44
#97 := (+ f3 #73)
#116 := (>= #97 0::int)
#104 := (= f3 #67)
#105 := (not #64)
#103 := (= f5 #67)
#110 := (not #103)
#100 := (+ f5 #73)
#98 := (>= #100 0::int)
#107 := (not #98)
#92 := [and-elim #90]: #54
#96 := [hypothesis]: #98
#94 := [th-lemma #96 #92 #93]: false
#108 := [lemma #94]: #107
#109 := [hypothesis]: #103
#111 := (or #110 #98)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109 #108]: false
#114 := [lemma #113]: #110
#106 := (or #105 #103)
#101 := [def-axiom]: #106
#117 := [unit-resolution #101 #114]: #105
#102 := (or #64 #104)
#99 := [def-axiom]: #102
#118 := [unit-resolution #99 #117]: #104
#119 := (not #104)
#120 := (or #119 #116)
#121 := [th-lemma]: #120
#122 := [unit-resolution #121 #118]: #116
[th-lemma #122 #91 #93]: false
unsat
db9aca2dd61369561517d2cc1ec903d7f769a531 124 0
#2 := false
#13 := 0::int
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#36 := -1::int
#38 := (* -1::int f4)
#51 := (+ f3 #38)
#52 := (<= #51 0::int)
#55 := (ite #52 f3 f4)
#103 := (* -1::int #55)
#104 := (+ f3 #103)
#106 := (>= #104 0::int)
#91 := (= f3 #55)
#105 := (+ f4 #103)
#123 := (>= #105 0::int)
#92 := (= f4 #55)
#93 := (not #52)
#134 := [hypothesis]: #93
#90 := (or #52 #92)
#88 := [def-axiom]: #90
#135 := [unit-resolution #88 #134]: #92
#126 := (not #92)
#127 := (or #126 #123)
#128 := [th-lemma]: #127
#136 := [unit-resolution #128 #135]: #123
#37 := (* -1::int f3)
#39 := (+ #37 #38)
#12 := (+ f3 f4)
#58 := (>= #12 0::int)
#65 := (ite #58 #12 #39)
#73 := (* -1::int #65)
#74 := (+ #55 #73)
#75 := (<= #74 0::int)
#80 := (not #75)
#15 := (- #12)
#14 := (< #12 0::int)
#16 := (ite #14 #15 #12)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#17 := (<= #11 #16)
#18 := (not #17)
#83 := (iff #18 #80)
#42 := (ite #14 #39 #12)
#45 := (<= #11 #42)
#48 := (not #45)
#81 := (iff #48 #80)
#78 := (iff #45 #75)
#70 := (<= #55 #65)
#76 := (iff #70 #75)
#77 := [rewrite]: #76
#71 := (iff #45 #70)
#68 := (= #42 #65)
#59 := (not #58)
#62 := (ite #59 #39 #12)
#66 := (= #62 #65)
#67 := [rewrite]: #66
#63 := (= #42 #62)
#60 := (iff #14 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#56 := (= #11 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#72 := [monotonicity #57 #69]: #71
#79 := [trans #72 #77]: #78
#82 := [monotonicity #79]: #81
#49 := (iff #18 #48)
#46 := (iff #17 #45)
#43 := (= #16 #42)
#40 := (= #15 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#84 := [trans #50 #82]: #83
#35 := [asserted]: #18
#85 := [mp #35 #84]: #80
#102 := (+ #12 #73)
#122 := (<= #102 0::int)
#86 := (= #12 #65)
#108 := [hypothesis]: #59
#120 := (or #93 #58)
#107 := [hypothesis]: #52
#100 := (+ #39 #73)
#101 := (<= #100 0::int)
#95 := (= #39 #65)
#98 := (or #58 #95)
#99 := [def-axiom]: #98
#109 := [unit-resolution #99 #108]: #95
#110 := (not #95)
#111 := (or #110 #101)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109]: #101
#94 := (or #93 #91)
#89 := [def-axiom]: #94
#114 := [unit-resolution #89 #107]: #91
#115 := (not #91)
#116 := (or #115 #106)
#117 := [th-lemma]: #116
#118 := [unit-resolution #117 #114]: #106
#119 := [th-lemma #108 #118 #113 #85 #107]: false
#121 := [lemma #119]: #120
#124 := [unit-resolution #121 #108]: #93
#125 := [unit-resolution #88 #124]: #92
#129 := [unit-resolution #128 #125]: #123
#130 := [th-lemma #113 #85 #108 #124 #129]: false
#131 := [lemma #130]: #58
#96 := (or #59 #86)
#97 := [def-axiom]: #96
#137 := [unit-resolution #97 #131]: #86
#138 := (not #86)
#139 := (or #138 #122)
#140 := [th-lemma]: #139
#141 := [unit-resolution #140 #137]: #122
#142 := [th-lemma #134 #131 #141 #85 #136]: false
#143 := [lemma #142]: #52
#144 := [unit-resolution #89 #143]: #91
#145 := [unit-resolution #117 #144]: #106
[th-lemma #131 #143 #141 #85 #145]: false
unsat
aa80380d55249b8c8a3b69b0ba102b48ab444bd4 88 0
#2 := false
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#38 := 0::int
#35 := -1::int
#36 := (* -1::int f4)
#37 := (+ f3 #36)
#46 := (>= #37 0::int)
#48 := (ite #46 f3 f4)
#39 := (<= #37 0::int)
#42 := (ite #39 f4 f3)
#51 := (= #42 #48)
#33 := (= f3 #48)
#65 := (= f4 #48)
#66 := (not #46)
#71 := [hypothesis]: #66
#69 := (or #46 #65)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #71]: #65
#77 := (= #42 f4)
#61 := (= f4 #42)
#73 := (or #46 #39)
#74 := [th-lemma]: #73
#75 := [unit-resolution #74 #71]: #39
#63 := (not #39)
#64 := (or #63 #61)
#59 := [def-axiom]: #64
#76 := [unit-resolution #59 #75]: #61
#78 := [symm #76]: #77
#79 := [trans #78 #72]: #51
#54 := (not #51)
#12 := (<= f4 f3)
#13 := (ite #12 f3 f4)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#14 := (= #11 #13)
#15 := (not #14)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (= #13 #48)
#45 := (iff #12 #46)
#47 := [rewrite]: #45
#50 := [monotonicity #47]: #49
#43 := (= #11 #42)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#53 := [monotonicity #44 #50]: #52
#56 := [monotonicity #53]: #55
#32 := [asserted]: #15
#57 := [mp #32 #56]: #54
#80 := [unit-resolution #57 #79]: false
#81 := [lemma #80]: #46
#67 := (or #66 #33)
#68 := [def-axiom]: #67
#83 := [unit-resolution #68 #81]: #33
#107 := (= #42 f3)
#105 := (= f4 f3)
#82 := (= f3 f4)
#62 := (= f3 #42)
#95 := (not #62)
#96 := (iff #54 #95)
#93 := (iff #51 #62)
#91 := (iff #62 #51)
#86 := (= #48 #42)
#89 := (iff #86 #51)
#90 := [commutativity]: #89
#87 := (iff #62 #86)
#88 := [monotonicity #83]: #87
#92 := [trans #88 #90]: #91
#94 := [symm #92]: #93
#97 := [monotonicity #94]: #96
#98 := [mp #57 #97]: #95
#60 := (or #39 #62)
#58 := [def-axiom]: #60
#99 := [unit-resolution #58 #98]: #39
#101 := (or #82 #63 #66)
#102 := [th-lemma]: #101
#103 := [unit-resolution #102 #99 #81]: #82
#106 := [symm #103]: #105
#100 := [unit-resolution #59 #99]: #61
#104 := [symm #100]: #77
#108 := [trans #104 #106]: #107
#109 := [trans #108 #83]: #51
[unit-resolution #57 #109]: false
unsat
f6b25b18b1ebd8ef0f2fc91bf2f3835c988c562e 66 0
#2 := false
decl f3 :: int
#9 := f3
#8 := 0::int
#11 := (<= f3 0::int)
#12 := (ite #11 0::int f3)
#33 := (= f3 #12)
#84 := (= 0::int #12)
#78 := (= #12 0::int)
#68 := (not #33)
#50 := (>= f3 0::int)
#51 := (not #50)
#57 := (or #33 #51)
#62 := (not #57)
#13 := (= #12 f3)
#10 := (<= 0::int f3)
#14 := (implies #10 #13)
#15 := (not #14)
#65 := (iff #15 #62)
#39 := (not #10)
#40 := (or #39 #33)
#45 := (not #40)
#63 := (iff #45 #62)
#60 := (iff #40 #57)
#54 := (or #51 #33)
#58 := (iff #54 #57)
#59 := [rewrite]: #58
#55 := (iff #40 #54)
#52 := (iff #39 #51)
#48 := (iff #10 #50)
#49 := [rewrite]: #48
#53 := [monotonicity #49]: #52
#56 := [monotonicity #53]: #55
#61 := [trans #56 #59]: #60
#64 := [monotonicity #61]: #63
#46 := (iff #15 #45)
#43 := (iff #14 #40)
#36 := (implies #10 #33)
#41 := (iff #36 #40)
#42 := [rewrite]: #41
#37 := (iff #14 #36)
#34 := (iff #13 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#44 := [trans #38 #42]: #43
#47 := [monotonicity #44]: #46
#66 := [trans #47 #64]: #65
#32 := [asserted]: #15
#67 := [mp #32 #66]: #62
#69 := [not-or-elim #67]: #68
#76 := (or #11 #33)
#77 := [def-axiom]: #76
#75 := [unit-resolution #77 #69]: #11
#79 := (not #11)
#80 := (or #79 #78)
#81 := [def-axiom]: #80
#73 := [unit-resolution #81 #75]: #78
#85 := [symm #73]: #84
#74 := (= f3 0::int)
#70 := [not-or-elim #67]: #50
#71 := (or #74 #79 #51)
#82 := [th-lemma]: #71
#83 := [unit-resolution #82 #75 #70]: #74
#86 := [trans #83 #85]: #33
[unit-resolution #69 #86]: false
unsat
7f59060b40cd618dd873f83da89208e01474e50b 228 0
#2 := false
#9 := 0::int
decl f4 :: int
#14 := f4
#40 := -1::int
#55 := (* -1::int f4)
#91 := (>= f4 0::int)
#98 := (ite #91 f4 #55)
#103 := (* -1::int #98)
#159 := (+ f4 #103)
#160 := (<= #159 0::int)
#134 := (= f4 #98)
decl f3 :: int
#8 := f3
#109 := (+ f3 #55)
#110 := (<= #109 0::int)
#113 := (ite #110 f4 f3)
#155 := (* -1::int #113)
#180 := (+ f3 #155)
#190 := (<= #180 0::int)
#146 := (= f3 #113)
#147 := (not #110)
#76 := (>= f3 0::int)
#161 := (+ #55 #103)
#179 := (<= #161 0::int)
#200 := (not #179)
#77 := (not #76)
#168 := [hypothesis]: #77
#145 := (= f4 #113)
#205 := (not #145)
#156 := (+ f4 #155)
#157 := (<= #156 0::int)
#176 := (not #157)
#188 := (or #176 #76)
#132 := (= #55 #98)
#92 := (not #91)
#174 := [hypothesis]: #157
#177 := (or #92 #176 #76)
#162 := [hypothesis]: #91
#141 := (or #92 #134)
#142 := [def-axiom]: #141
#163 := [unit-resolution #142 #162]: #134
#164 := (not #134)
#165 := (or #164 #160)
#166 := [th-lemma]: #165
#167 := [unit-resolution #166 #163]: #160
#41 := (* -1::int f3)
#83 := (ite #76 f3 #41)
#88 := (* -1::int #83)
#152 := (+ #41 #88)
#153 := (<= #152 0::int)
#138 := (= #41 #83)
#135 := (or #76 #138)
#136 := [def-axiom]: #135
#169 := [unit-resolution #136 #168]: #138
#170 := (not #138)
#171 := (or #170 #153)
#172 := [th-lemma]: #171
#173 := [unit-resolution #172 #169]: #153
#122 := (+ #98 #113)
#123 := (+ #83 #122)
#120 := (>= #123 0::int)
#126 := (not #120)
#19 := (<= f3 f4)
#20 := (ite #19 f4 f3)
#16 := (- f4)
#15 := (< f4 0::int)
#17 := (ite #15 #16 f4)
#11 := (- f3)
#10 := (< f3 0::int)
#12 := (ite #10 #11 f3)
#13 := (- #12)
#18 := (- #13 #17)
#21 := (<= #18 #20)
#22 := (not #21)
#129 := (iff #22 #126)
#58 := (ite #15 #55 f4)
#64 := (* -1::int #58)
#44 := (ite #10 #41 f3)
#50 := (* -1::int #44)
#65 := (+ #50 #64)
#70 := (<= #65 #20)
#73 := (not #70)
#127 := (iff #73 #126)
#124 := (iff #70 #120)
#106 := (+ #88 #103)
#116 := (<= #106 #113)
#119 := (iff #116 #120)
#121 := [rewrite]: #119
#117 := (iff #70 #116)
#114 := (= #20 #113)
#111 := (iff #19 #110)
#112 := [rewrite]: #111
#115 := [monotonicity #112]: #114
#107 := (= #65 #106)
#104 := (= #64 #103)
#101 := (= #58 #98)
#95 := (ite #92 #55 f4)
#99 := (= #95 #98)
#100 := [rewrite]: #99
#96 := (= #58 #95)
#93 := (iff #15 #92)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#102 := [trans #97 #100]: #101
#105 := [monotonicity #102]: #104
#89 := (= #50 #88)
#86 := (= #44 #83)
#80 := (ite #77 #41 f3)
#84 := (= #80 #83)
#85 := [rewrite]: #84
#81 := (= #44 #80)
#78 := (iff #10 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#108 := [monotonicity #90 #105]: #107
#118 := [monotonicity #108 #115]: #117
#125 := [trans #118 #121]: #124
#128 := [monotonicity #125]: #127
#74 := (iff #22 #73)
#71 := (iff #21 #70)
#68 := (= #18 #65)
#61 := (- #50 #58)
#66 := (= #61 #65)
#67 := [rewrite]: #66
#62 := (= #18 #61)
#59 := (= #17 #58)
#56 := (= #16 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#53 := (= #13 #50)
#47 := (- #44)
#51 := (= #47 #50)
#52 := [rewrite]: #51
#48 := (= #13 #47)
#45 := (= #12 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#54 := [trans #49 #52]: #53
#63 := [monotonicity #54 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#130 := [trans #75 #128]: #129
#39 := [asserted]: #22
#131 := [mp #39 #130]: #126
#175 := [th-lemma #162 #174 #131 #168 #173 #167]: false
#178 := [lemma #175]: #177
#181 := [unit-resolution #178 #174 #168]: #92
#143 := (or #91 #132)
#144 := [def-axiom]: #143
#182 := [unit-resolution #144 #181]: #132
#183 := (not #132)
#184 := (or #183 #179)
#185 := [th-lemma]: #184
#186 := [unit-resolution #185 #182]: #179
#187 := [th-lemma #174 #131 #168 #173 #186]: false
#189 := [lemma #187]: #188
#210 := [unit-resolution #189 #168]: #176
#206 := (or #205 #157)
#203 := [hypothesis]: #176
#204 := [hypothesis]: #145
#207 := [th-lemma]: #206
#208 := [unit-resolution #207 #204 #203]: false
#209 := [lemma #208]: #206
#211 := [unit-resolution #209 #210]: #205
#148 := (or #147 #145)
#149 := [def-axiom]: #148
#212 := [unit-resolution #149 #211]: #147
#201 := (or #110 #200 #76)
#192 := [hypothesis]: #147
#150 := (or #110 #146)
#151 := [def-axiom]: #150
#193 := [unit-resolution #151 #192]: #146
#194 := (not #146)
#195 := (or #194 #190)
#196 := [th-lemma]: #195
#197 := [unit-resolution #196 #193]: #190
#198 := [hypothesis]: #179
#199 := [th-lemma #131 #173 #198 #168 #192 #197]: false
#202 := [lemma #199]: #201
#213 := [unit-resolution #202 #212 #168]: #200
#214 := (or #92 #76 #110)
#215 := [th-lemma]: #214
#216 := [unit-resolution #215 #168 #212]: #92
#217 := [unit-resolution #144 #216]: #132
#218 := [unit-resolution #185 #217 #213]: false
#219 := [lemma #218]: #76
#222 := [hypothesis]: #92
#223 := (or #147 #77 #91)
#224 := [th-lemma]: #223
#225 := [unit-resolution #224 #222 #219]: #147
#226 := [unit-resolution #151 #225]: #146
#227 := [unit-resolution #196 #226]: #190
#228 := [unit-resolution #144 #222]: #132
#229 := [unit-resolution #185 #228]: #179
#154 := (+ f3 #88)
#158 := (<= #154 0::int)
#137 := (= f3 #83)
#139 := (or #77 #137)
#140 := [def-axiom]: #139
#230 := [unit-resolution #140 #219]: #137
#231 := (not #137)
#232 := (or #231 #158)
#233 := [th-lemma]: #232
#234 := [unit-resolution #233 #230]: #158
#235 := [th-lemma #219 #131 #234 #229 #225 #227]: false
#236 := [lemma #235]: #91
#237 := [unit-resolution #142 #236]: #134
#238 := [unit-resolution #166 #237]: #160
#239 := (not #160)
#240 := (or #179 #239 #92)
#241 := [th-lemma]: #240
#242 := [unit-resolution #241 #236 #238]: #179
#243 := (not #158)
#244 := (or #176 #77 #120 #243 #200)
#245 := [th-lemma]: #244
#246 := [unit-resolution #245 #242 #219 #131 #234]: #176
#247 := [unit-resolution #209 #246]: #205
#248 := [unit-resolution #149 #247]: #147
#249 := [unit-resolution #151 #248]: #146
#250 := [unit-resolution #196 #249]: #190
[th-lemma #236 #250 #131 #234 #248 #238]: false
unsat
eb26b9eee04f34772db75112e08806ee4a73deb5 56 0
#2 := false
#11 := 1::int
decl f3 :: int
#9 := f3
#14 := (= f3 1::int)
#12 := (<= f3 1::int)
#8 := 0::int
#41 := (<= f3 0::int)
#42 := (not #41)
#48 := (and #12 #42)
#53 := (not #48)
#59 := (or #14 #53)
#64 := (not #59)
#10 := (< 0::int f3)
#13 := (and #10 #12)
#15 := (implies #13 #14)
#16 := (not #15)
#67 := (iff #16 #64)
#34 := (not #13)
#35 := (or #34 #14)
#38 := (not #35)
#65 := (iff #38 #64)
#62 := (iff #35 #59)
#56 := (or #53 #14)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #35 #56)
#54 := (iff #34 #53)
#51 := (iff #13 #48)
#45 := (and #42 #12)
#49 := (iff #45 #48)
#50 := [rewrite]: #49
#46 := (iff #13 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#52 := [trans #47 #50]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#68 := [trans #40 #66]: #67
#33 := [asserted]: #16
#69 := [mp #33 #68]: #64
#72 := [not-or-elim #69]: #48
#73 := [and-elim #72]: #12
#74 := [and-elim #72]: #42
#85 := [th-lemma #74 #73]: #14
#70 := (not #14)
#71 := [not-or-elim #69]: #70
[unit-resolution #71 #85]: false
unsat
f0448e2303985e4b308e27be63206293bdf9a306 18 0
#2 := false
decl f3 :: int
#8 := f3
#9 := (<= f3 f3)
#10 := (not #9)
#37 := (iff #10 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#30 := (iff #9 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#27 := [asserted]: #10
[mp #27 #38]: false
unsat
7f4a9fec0a381e3d10ca9892d4357ad593dddf34 51 0
#2 := false
decl f4 :: int
#9 := f4
#11 := 3::int
#13 := (* 3::int f4)
decl f3 :: int
#8 := f3
#12 := (* 3::int f3)
#14 := (<= #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#67 := (iff #16 false)
#34 := (not #10)
#35 := (or #34 #14)
#38 := (not #35)
#65 := (iff #38 false)
#1 := true
#60 := (not true)
#63 := (iff #60 false)
#64 := [rewrite]: #63
#61 := (iff #38 #60)
#58 := (iff #35 true)
#44 := 0::int
#41 := -1::int
#42 := (* -1::int f4)
#43 := (+ f3 #42)
#45 := (<= #43 0::int)
#48 := (not #45)
#53 := (or #48 #45)
#56 := (iff #53 true)
#57 := [rewrite]: #56
#54 := (iff #35 #53)
#51 := (iff #14 #45)
#52 := [rewrite]: #51
#49 := (iff #34 #48)
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#55 := [monotonicity #50 #52]: #54
#59 := [trans #55 #57]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#68 := [trans #40 #66]: #67
#33 := [asserted]: #16
[mp #33 #68]: false
unsat
3680b6c490cc91b12df65cc99434d497190dfa9a 17 0
#2 := false
#8 := 0::real
#9 := (= 0::real 0::real)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
ec737777e677e7c45520e1db9e539dd2412843f6 25 0
#2 := false
#8 := 0::real
#9 := (- 0::real)
#10 := (= 0::real #9)
#11 := (not #10)
#43 := (iff #11 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #11 #38)
#36 := (iff #10 true)
#31 := (= 0::real 0::real)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #10 #31)
#29 := (= #9 0::real)
#30 := [rewrite]: #29
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#28 := [asserted]: #11
[mp #28 #44]: false
unsat
dbe1e0599b3d29d7583fb07a395943a3aea1f4e4 56 0
#2 := false
decl f4 :: int
#9 := f4
#11 := 3::int
#13 := (* 3::int f4)
decl f3 :: int
#8 := f3
#12 := (* 3::int f3)
#14 := (< #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#72 := (iff #16 false)
#34 := (not #10)
#35 := (or #34 #14)
#38 := (not #35)
#70 := (iff #38 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #38 #65)
#63 := (iff #35 true)
#43 := 0::int
#41 := -1::int
#45 := (* -1::int f4)
#46 := (+ f3 #45)
#44 := (>= #46 0::int)
#42 := (not #44)
#57 := (or #44 #42)
#61 := (iff #57 true)
#62 := [rewrite]: #61
#59 := (iff #35 #57)
#58 := (iff #14 #42)
#56 := [rewrite]: #58
#54 := (iff #34 #44)
#49 := (not #42)
#52 := (iff #49 #44)
#53 := [rewrite]: #52
#50 := (iff #34 #49)
#47 := (iff #10 #42)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#60 := [monotonicity #55 #56]: #59
#64 := [trans #60 #62]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#73 := [trans #40 #71]: #72
#33 := [asserted]: #16
[mp #33 #73]: false
unsat
200cec1612f3827738af83efa5baf8bfcd74c7e6 17 0
#2 := false
#8 := 1::real
#9 := (= 1::real 1::real)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
9e881bb7df2f7ec1f6b2377876015489227bbe22 52 0
#2 := false
#40 := 0::int
decl f4 :: int
#9 := f4
#38 := -1::int
#42 := (* -1::int f4)
decl f3 :: int
#8 := f3
#43 := (+ f3 #42)
#53 := (<= #43 0::int)
#66 := (not #53)
#41 := (>= #43 0::int)
#56 := (or #41 #53)
#59 := (not #56)
#11 := (<= f3 f4)
#10 := (< f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#62 := (iff #13 #59)
#31 := (not #10)
#32 := (or #31 #11)
#35 := (not #32)
#60 := (iff #35 #59)
#57 := (iff #32 #56)
#54 := (iff #11 #53)
#55 := [rewrite]: #54
#51 := (iff #31 #41)
#39 := (not #41)
#46 := (not #39)
#49 := (iff #46 #41)
#50 := [rewrite]: #49
#47 := (iff #31 #46)
#44 := (iff #10 #39)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#58 := [monotonicity #52 #55]: #57
#61 := [monotonicity #58]: #60
#36 := (iff #13 #35)
#33 := (iff #12 #32)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#63 := [trans #37 #61]: #62
#30 := [asserted]: #13
#64 := [mp #30 #63]: #59
#67 := [not-or-elim #64]: #66
#65 := [not-or-elim #64]: #39
#75 := (or #53 #41)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #65]: #53
[unit-resolution #77 #67]: false
unsat
d3fb8e790d00a83a7b4b9342eef24670066914ba 34 0
#2 := false
#8 := 1::real
#9 := (- 1::real)
#10 := (= #9 1::real)
#11 := (not #10)
#12 := (not #11)
#52 := (iff #12 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 true)
#40 := (not false)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 false)
#30 := -1::real
#33 := (= -1::real 1::real)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (= #9 -1::real)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#29 := [asserted]: #12
[mp #29 #53]: false
unsat
51bf0a9abf1819d8ded3eaa12d8b05e8c0179093 73 0
#2 := false
#58 := 0::int
decl f4 :: int
#9 := f4
#51 := -1::int
#52 := (* -1::int f4)
decl f3 :: int
#8 := f3
#53 := (+ f3 #52)
#59 := (>= #53 0::int)
#54 := (<= #53 -1::int)
#79 := (not #54)
#57 := (not #59)
#86 := [hypothesis]: #57
#84 := (or #79 #59)
#69 := (iff #54 #59)
#11 := 1::int
#12 := (+ f3 1::int)
#13 := (<= #12 f4)
#10 := (< f3 f4)
#14 := (iff #10 #13)
#15 := (not #14)
#72 := (iff #15 #69)
#45 := (not #10)
#33 := (+ 1::int f3)
#36 := (<= #33 f4)
#46 := (iff #36 #45)
#70 := (iff #46 #69)
#67 := (iff #45 #59)
#62 := (not #57)
#65 := (iff #62 #59)
#66 := [rewrite]: #65
#63 := (iff #45 #62)
#60 := (iff #10 #57)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#55 := (iff #36 #54)
#56 := [rewrite]: #55
#71 := [monotonicity #56 #68]: #70
#49 := (iff #15 #46)
#39 := (iff #10 #36)
#42 := (not #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #15 #42)
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#34 := (= #12 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#73 := [trans #50 #71]: #72
#32 := [asserted]: #15
#74 := [mp #32 #73]: #69
#80 := (not #69)
#77 := (or #79 #59 #80)
#75 := [def-axiom]: #77
#85 := [unit-resolution #75 #74]: #84
#87 := [unit-resolution #85 #86]: #79
#88 := [th-lemma #86 #87]: false
#89 := [lemma #88]: #59
#90 := (or #57 #79)
#91 := [th-lemma]: #90
#92 := [unit-resolution #91 #89]: #79
#83 := (or #54 #57)
#81 := (or #54 #57 #80)
#82 := [def-axiom]: #81
#78 := [unit-resolution #82 #74]: #83
[unit-resolution #78 #92 #89]: false
unsat
71a16b5f7cfa5ed20839063a47fff437d61d2c53 18 0
#2 := false
#9 := 1::real
#8 := 0::real
#10 := (< 0::real 1::real)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
2428cde9ba944e6b67ba948c2db63ec99833c830 18 0
#2 := false
#9 := 1::real
#8 := 0::real
#10 := (<= 0::real 1::real)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
a680c2822602cd080d52600c3f371f228a52ab07 15 0
#2 := false
decl f3 :: int
#8 := f3
#9 := (< f3 f3)
#10 := (not #9)
#11 := (not #10)
#33 := (iff #11 false)
#31 := (iff #9 false)
#32 := [rewrite]: #31
#29 := (iff #11 #9)
#30 := [rewrite]: #29
#34 := [trans #30 #32]: #33
#28 := [asserted]: #11
[mp #28 #34]: false
unsat
3d517e934dda3c9e791e45743b6060cbe359a1b0 40 0
#2 := false
#12 := 567::real
#10 := 345::real
#8 := 123::real
#9 := (- 123::real)
#11 := (+ #9 345::real)
#13 := (< #11 567::real)
#14 := (not #13)
#58 := (iff #14 false)
#38 := 222::real
#43 := (< 222::real 567::real)
#46 := (not #43)
#56 := (iff #46 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #46 #51)
#49 := (iff #43 true)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#41 := (= #11 222::real)
#32 := -123::real
#35 := (+ -123::real 345::real)
#39 := (= #35 222::real)
#40 := [rewrite]: #39
#36 := (= #11 #35)
#33 := (= #9 -123::real)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#42 := [trans #37 #40]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#59 := [trans #48 #57]: #58
#31 := [asserted]: #14
[mp #31 #59]: false
unsat
3ca9f6025aa0aae7c19eaaf9e7bcf7496930f051 75 0
#2 := false
#53 := 0::int
decl f4 :: int
#9 := f4
#50 := -1::int
#64 := (* -1::int f4)
decl f3 :: int
#8 := f3
#65 := (+ f3 #64)
#66 := (<= #65 0::int)
#69 := (not #66)
decl f5 :: int
#11 := f5
#51 := (* -1::int f5)
#60 := (+ f3 #51)
#61 := (<= #60 0::int)
#52 := (+ f4 #51)
#54 := (<= #52 0::int)
#57 := (not #54)
#78 := (or #57 #61 #69)
#83 := (not #78)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#86 := (iff #16 #83)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#84 := (iff #47 #83)
#81 := (iff #42 #78)
#72 := (or #57 #61)
#75 := (or #69 #72)
#79 := (iff #75 #78)
#80 := [rewrite]: #79
#76 := (iff #42 #75)
#73 := (iff #35 #72)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#58 := (iff #34 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#74 := [monotonicity #59 #63]: #73
#70 := (iff #41 #69)
#67 := (iff #10 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [monotonicity #71 #74]: #76
#82 := [trans #77 #80]: #81
#85 := [monotonicity #82]: #84
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#87 := [trans #49 #85]: #86
#33 := [asserted]: #16
#88 := [mp #33 #87]: #83
#92 := [not-or-elim #88]: #66
#90 := (not #61)
#91 := [not-or-elim #88]: #90
#89 := [not-or-elim #88]: #54
[th-lemma #89 #91 #92]: false
unsat
7ea96733c54b74118ac502b44b56589cca23bf91 18 0
#2 := false
#9 := 2345678901::real
#8 := 123456789::real
#10 := (< 123456789::real 2345678901::real)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
35d0ec85b1b4756984ec0a2aa12570b74d8f6576 80 0
#2 := false
#53 := 0::int
decl f4 :: int
#9 := f4
#50 := -1::int
#66 := (* -1::int f4)
decl f3 :: int
#8 := f3
#67 := (+ f3 #66)
#65 := (>= #67 0::int)
#64 := (not #65)
decl f5 :: int
#11 := f5
#51 := (* -1::int f5)
#60 := (+ f3 #51)
#61 := (<= #60 0::int)
#52 := (+ f4 #51)
#54 := (<= #52 0::int)
#57 := (not #54)
#83 := (or #57 #61 #65)
#88 := (not #83)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#91 := (iff #16 #88)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#89 := (iff #47 #88)
#86 := (iff #42 #83)
#77 := (or #57 #61)
#80 := (or #65 #77)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #42 #80)
#78 := (iff #35 #77)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#58 := (iff #34 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#79 := [monotonicity #59 #63]: #78
#75 := (iff #41 #65)
#70 := (not #64)
#73 := (iff #70 #65)
#74 := [rewrite]: #73
#71 := (iff #41 #70)
#68 := (iff #10 #64)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#82 := [monotonicity #76 #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#92 := [trans #49 #90]: #91
#33 := [asserted]: #16
#93 := [mp #33 #92]: #88
#97 := [not-or-elim #93]: #64
#95 := (not #61)
#96 := [not-or-elim #93]: #95
#94 := [not-or-elim #93]: #54
[th-lemma #94 #96 #97]: false
unsat
dadd2b3f64435d0fb7af768c594e06ecb347e621 30 0
#2 := false
#10 := 2345678901::real
#8 := 123456789::real
#9 := (- 123456789::real)
#11 := (< #9 2345678901::real)
#12 := (not #11)
#48 := (iff #12 false)
#30 := -123456789::real
#33 := (< -123456789::real 2345678901::real)
#36 := (not #33)
#46 := (iff #36 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #36 #41)
#39 := (iff #33 true)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#37 := (iff #12 #36)
#34 := (iff #11 #33)
#31 := (= #9 -123456789::real)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#38 := [monotonicity #35]: #37
#49 := [trans #38 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
31af85823bea7952455c5b8289eec98083c10812 80 0
#2 := false
#52 := 0::int
decl f4 :: int
#9 := f4
#50 := -1::int
#69 := (* -1::int f4)
decl f3 :: int
#8 := f3
#70 := (+ f3 #69)
#71 := (<= #70 0::int)
#74 := (not #71)
decl f5 :: int
#11 := f5
#54 := (* -1::int f5)
#65 := (+ f3 #54)
#66 := (<= #65 0::int)
#55 := (+ f4 #54)
#53 := (>= #55 0::int)
#83 := (or #53 #66 #74)
#88 := (not #83)
#13 := (<= f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#91 := (iff #16 #88)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#89 := (iff #47 #88)
#86 := (iff #42 #83)
#77 := (or #53 #66)
#80 := (or #74 #77)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #42 #80)
#78 := (iff #35 #77)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#63 := (iff #34 #53)
#51 := (not #53)
#58 := (not #51)
#61 := (iff #58 #53)
#62 := [rewrite]: #61
#59 := (iff #34 #58)
#56 := (iff #12 #51)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#79 := [monotonicity #64 #68]: #78
#75 := (iff #41 #74)
#72 := (iff #10 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [monotonicity #76 #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#92 := [trans #49 #90]: #91
#33 := [asserted]: #16
#93 := [mp #33 #92]: #88
#97 := [not-or-elim #93]: #71
#94 := [not-or-elim #93]: #51
#95 := (not #66)
#96 := [not-or-elim #93]: #95
[th-lemma #96 #94 #97]: false
unsat
70e88c864c6db4b847a2f7eb6c64b44c8f1c8124 26 0
#2 := false
decl f3 :: real
#8 := f3
#9 := 0::real
#10 := (+ f3 0::real)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
e48677f09b08fd6733ef8c5373faf8e64833ab2c 85 0
#2 := false
#52 := 0::int
decl f4 :: int
#9 := f4
#50 := -1::int
#72 := (* -1::int f4)
decl f3 :: int
#8 := f3
#73 := (+ f3 #72)
#71 := (>= #73 0::int)
#70 := (not #71)
decl f5 :: int
#11 := f5
#54 := (* -1::int f5)
#67 := (+ f3 #54)
#66 := (>= #67 0::int)
#65 := (not #66)
#55 := (+ f4 #54)
#53 := (>= #55 0::int)
#89 := (or #53 #65 #71)
#94 := (not #89)
#13 := (< f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#97 := (iff #16 #94)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#95 := (iff #47 #94)
#92 := (iff #42 #89)
#83 := (or #53 #65)
#86 := (or #71 #83)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #42 #86)
#84 := (iff #35 #83)
#68 := (iff #13 #65)
#69 := [rewrite]: #68
#63 := (iff #34 #53)
#51 := (not #53)
#58 := (not #51)
#61 := (iff #58 #53)
#62 := [rewrite]: #61
#59 := (iff #34 #58)
#56 := (iff #12 #51)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#85 := [monotonicity #64 #69]: #84
#81 := (iff #41 #71)
#76 := (not #70)
#79 := (iff #76 #71)
#80 := [rewrite]: #79
#77 := (iff #41 #76)
#74 := (iff #10 #70)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#88 := [monotonicity #82 #85]: #87
#93 := [trans #88 #91]: #92
#96 := [monotonicity #93]: #95
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#98 := [trans #49 #96]: #97
#33 := [asserted]: #16
#99 := [mp #33 #98]: #94
#102 := [not-or-elim #99]: #70
#100 := [not-or-elim #99]: #51
#101 := [not-or-elim #99]: #66
[th-lemma #101 #100 #102]: false
unsat
1750fe3e6afdf716eeb70c933529e67e9b6803c7 26 0
#2 := false
decl f3 :: real
#9 := f3
#8 := 0::real
#10 := (+ 0::real f3)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
69d20d63c84007048141281611e49dadf61146c1 29 0
#2 := false
decl f3 :: real
#8 := f3
decl f4 :: real
#9 := f4
#11 := (+ f4 f3)
#10 := (+ f3 f4)
#12 := (= #10 #11)
#13 := (not #12)
#45 := (iff #13 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #13 #40)
#38 := (iff #12 true)
#33 := (= #10 #10)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #12 #33)
#31 := (= #11 #10)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #13
[mp #30 #46]: false
unsat
4ae7128a23bf2930a8498c167f5a28b2e14524e3 69 0
#2 := false
#44 := 0::int
decl f5 :: int
#11 := f5
#42 := -1::int
#51 := (* -1::int f5)
decl f3 :: int
#8 := f3
#62 := (+ f3 #51)
#63 := (<= #62 0::int)
#64 := (not #63)
decl f4 :: int
#9 := f4
#52 := (+ f4 #51)
#50 := (>= #52 0::int)
#53 := (not #50)
#46 := (* -1::int f4)
#47 := (+ f3 #46)
#45 := (>= #47 0::int)
#43 := (not #45)
#56 := (and #43 #53)
#59 := (not #56)
#74 := (or #59 #63)
#77 := (not #74)
#14 := (< f5 f3)
#15 := (not #14)
#12 := (< f4 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (not #16)
#80 := (iff #17 #77)
#35 := (not #13)
#36 := (or #35 #15)
#39 := (not #36)
#78 := (iff #39 #77)
#75 := (iff #36 #74)
#72 := (iff #15 #63)
#67 := (not #64)
#70 := (iff #67 #63)
#71 := [rewrite]: #70
#68 := (iff #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#60 := (iff #35 #59)
#57 := (iff #13 #56)
#54 := (iff #12 #53)
#55 := [rewrite]: #54
#48 := (iff #10 #43)
#49 := [rewrite]: #48
#58 := [monotonicity #49 #55]: #57
#61 := [monotonicity #58]: #60
#76 := [monotonicity #61 #73]: #75
#79 := [monotonicity #76]: #78
#40 := (iff #17 #39)
#37 := (iff #16 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#81 := [trans #41 #79]: #80
#34 := [asserted]: #17
#82 := [mp #34 #81]: #77
#86 := [not-or-elim #82]: #64
#83 := [not-or-elim #82]: #56
#84 := [and-elim #83]: #43
#85 := [and-elim #83]: #53
[th-lemma #85 #84 #86]: false
unsat
1a0a736d3a32332defd35838ed3918f39ef91381 33 0
#2 := false
decl f5 :: real
#10 := f5
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#13 := (+ f3 f4)
#14 := (+ #13 f5)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#48 := (iff #16 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #16 #43)
#41 := (iff #15 true)
#36 := (= #12 #12)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #15 #36)
#34 := (= #14 #12)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #16
[mp #33 #49]: false
unsat
d40ed0654760a137f6aba17a9e5eb1b632371b23 45 0
#2 := false
decl f4 :: real
#9 := f4
#13 := (- f4)
decl f3 :: real
#8 := f3
#14 := (= f3 #13)
#11 := 0::real
#10 := (+ f3 f4)
#12 := (= #10 0::real)
#15 := (iff #12 #14)
#16 := (not #15)
#62 := (iff #16 false)
#47 := (not #12)
#34 := -1::real
#35 := (* -1::real f4)
#38 := (= f3 #35)
#48 := (iff #38 #47)
#60 := (iff #48 false)
#55 := (iff #12 #47)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #48 #55)
#53 := (iff #38 #12)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#51 := (iff #16 #48)
#41 := (iff #12 #38)
#44 := (not #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #16 #44)
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#36 := (= #13 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#63 := [trans #52 #61]: #62
#33 := [asserted]: #16
[mp #33 #63]: false
unsat
2e5f7999cc8eb3b8360ba5eefe8486091d5b23e0 58 0
#2 := false
decl f3 :: real
#8 := f3
#10 := 0::real
#12 := (< 0::real f3)
#9 := (- f3)
#11 := (< #9 0::real)
#13 := (iff #11 #12)
#14 := (not #13)
#76 := (iff #14 false)
#50 := (not #12)
#32 := -1::real
#33 := (* -1::real f3)
#36 := (< #33 0::real)
#51 := (iff #36 #50)
#74 := (iff #51 false)
#56 := (<= f3 0::real)
#57 := (not #56)
#69 := (iff #57 #56)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #51 #69)
#67 := (iff #50 #56)
#62 := (not #57)
#65 := (iff #62 #56)
#66 := [rewrite]: #65
#63 := (iff #50 #62)
#60 := (iff #12 #57)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#58 := (iff #36 #57)
#59 := [rewrite]: #58
#71 := [monotonicity #59 #68]: #70
#75 := [trans #71 #73]: #74
#54 := (iff #14 #51)
#42 := (iff #12 #36)
#47 := (not #42)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #14 #47)
#45 := (iff #13 #42)
#39 := (iff #36 #12)
#43 := (iff #39 #42)
#44 := [rewrite]: #43
#40 := (iff #13 #39)
#37 := (iff #11 #36)
#34 := (= #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#77 := [trans #55 #75]: #76
#31 := [asserted]: #14
[mp #31 #77]: false
unsat
50c9906c7d751f92217d01455225257cf462c453 26 0
#2 := false
decl f3 :: real
#8 := f3
#9 := 0::real
#10 := (- f3 0::real)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
e9e8aa80c40e8ef0e6e99e4aa18d0a13b21b0376 61 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#11 := (- f3)
#12 := (< #11 0::real)
#10 := (< 0::real f3)
#13 := (implies #10 #12)
#14 := (not #13)
#78 := (iff #14 false)
#32 := -1::real
#33 := (* -1::real f3)
#36 := (< #33 0::real)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#76 := (iff #48 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #48 #71)
#69 := (iff #43 true)
#51 := (<= f3 0::real)
#52 := (not #51)
#64 := (or #51 #52)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #43 #64)
#62 := (iff #36 #52)
#63 := [rewrite]: #62
#60 := (iff #42 #51)
#55 := (not #52)
#58 := (iff #55 #51)
#59 := [rewrite]: #58
#56 := (iff #42 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#66 := [monotonicity #61 #63]: #65
#70 := [trans #66 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#49 := (iff #14 #48)
#46 := (iff #13 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#79 := [trans #50 #77]: #78
#31 := [asserted]: #14
[mp #31 #79]: false
unsat
acca7aae09e2e9a49a4d632200e33dc782e588aa 32 0
#2 := false
decl f3 :: real
#9 := f3
#11 := (- f3)
#8 := 0::real
#10 := (- 0::real f3)
#12 := (= #10 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#31 := -1::real
#32 := (* -1::real f3)
#37 := (= #32 #32)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (= #11 #32)
#36 := [rewrite]: #35
#33 := (= #10 #32)
#34 := [rewrite]: #33
#39 := [monotonicity #34 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#30 := [asserted]: #13
[mp #30 #50]: false
unsat
0ace06c6b03ac83c82084015bdca2809234a4101 61 0
#2 := false
decl f3 :: real
#8 := f3
#11 := (- f3)
#9 := 0::real
#12 := (< 0::real #11)
#10 := (< f3 0::real)
#13 := (implies #10 #12)
#14 := (not #13)
#78 := (iff #14 false)
#32 := -1::real
#33 := (* -1::real f3)
#36 := (< 0::real #33)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#76 := (iff #48 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #48 #71)
#69 := (iff #43 true)
#51 := (>= f3 0::real)
#52 := (not #51)
#64 := (or #51 #52)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #43 #64)
#62 := (iff #36 #52)
#63 := [rewrite]: #62
#60 := (iff #42 #51)
#55 := (not #52)
#58 := (iff #55 #51)
#59 := [rewrite]: #58
#56 := (iff #42 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#66 := [monotonicity #61 #63]: #65
#70 := [trans #66 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#49 := (iff #14 #48)
#46 := (iff #13 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#79 := [trans #50 #77]: #78
#31 := [asserted]: #14
[mp #31 #79]: false
unsat
7e2acc6f3578e9594f16685aec01d464f0afcefe 64 0
#2 := false
#12 := 0::real
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#11 := (- f3 f4)
#13 := (< #11 0::real)
#10 := (< f3 f4)
#14 := (implies #10 #13)
#15 := (not #14)
#80 := (iff #15 false)
#33 := -1::real
#34 := (* -1::real f4)
#35 := (+ f3 #34)
#38 := (< #35 0::real)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#78 := (iff #50 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #50 #73)
#71 := (iff #45 true)
#54 := (>= #35 0::real)
#53 := (not #54)
#66 := (or #54 #53)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #45 #66)
#64 := (iff #38 #53)
#65 := [rewrite]: #64
#62 := (iff #44 #54)
#57 := (not #53)
#60 := (iff #57 #54)
#61 := [rewrite]: #60
#58 := (iff #44 #57)
#55 := (iff #10 #53)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#36 := (= #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#32 := [asserted]: #15
[mp #32 #81]: false
unsat
b9bc7b6c72b913aad9adac918987becb58cf13fa 44 0
#2 := false
decl f3 :: real
#8 := f3
decl f4 :: real
#9 := f4
#11 := (- f4 f3)
#12 := (- #11)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#60 := (iff #14 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#32 := -1::real
#33 := (* -1::real f4)
#34 := (+ f3 #33)
#48 := (= #34 #34)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (= #12 #34)
#37 := (* -1::real f3)
#38 := (+ #37 f4)
#41 := (- #38)
#44 := (= #41 #34)
#45 := [rewrite]: #44
#42 := (= #12 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#35 := (= #10 #34)
#36 := [rewrite]: #35
#50 := [monotonicity #36 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#31 := [asserted]: #14
[mp #31 #61]: false
unsat
73bf4a32a24c07787655407ab8d48c7e68594bd3 42 0
#2 := false
decl f3 :: real
#8 := f3
decl f4 :: real
#9 := f4
#11 := (- f4)
#12 := (+ #11 f3)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#58 := (iff #14 false)
#1 := true
#53 := (not true)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #14 #53)
#51 := (iff #13 true)
#32 := -1::real
#33 := (* -1::real f4)
#34 := (+ f3 #33)
#46 := (= #34 #34)
#49 := (iff #46 true)
#50 := [rewrite]: #49
#47 := (iff #13 #46)
#44 := (= #12 #34)
#39 := (+ #33 f3)
#42 := (= #39 #34)
#43 := [rewrite]: #42
#40 := (= #12 #39)
#37 := (= #11 #33)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#35 := (= #10 #34)
#36 := [rewrite]: #35
#48 := [monotonicity #36 #45]: #47
#52 := [trans #48 #50]: #51
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#31 := [asserted]: #14
[mp #31 #59]: false
unsat
9bd93d3b0ddd945e550dcfe8a6ffb45c7f693fe1 30 0
#2 := false
#8 := 1::real
#9 := 2::real
#10 := (/ 1::real 2::real)
#11 := (< #10 1::real)
#12 := (not #11)
#48 := (iff #12 false)
#30 := 1/2::real
#33 := (< 1/2::real 1::real)
#36 := (not #33)
#46 := (iff #36 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #36 #41)
#39 := (iff #33 true)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#37 := (iff #12 #36)
#34 := (iff #11 #33)
#31 := (= #10 1/2::real)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#38 := [monotonicity #35]: #37
#49 := [trans #38 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
00dd8ae97a6500a3bdd8c17f92b12c5c85a7310b 48 0
#2 := false
decl f5 :: real
#11 := f5
decl f4 :: real
#9 := f4
#13 := (+ f4 f5)
decl f3 :: real
#8 := f3
#14 := (- f3 #13)
#10 := (- f3 f4)
#12 := (- #10 f5)
#15 := (= #12 #14)
#16 := (not #15)
#63 := (iff #16 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #16 #58)
#56 := (iff #15 true)
#34 := -1::real
#42 := (* -1::real f5)
#35 := (* -1::real f4)
#43 := (+ #35 #42)
#44 := (+ f3 #43)
#51 := (= #44 #44)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #15 #51)
#49 := (= #14 #44)
#50 := [rewrite]: #49
#47 := (= #12 #44)
#36 := (+ f3 #35)
#39 := (- #36 f5)
#45 := (= #39 #44)
#46 := [rewrite]: #45
#40 := (= #12 #39)
#37 := (= #10 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#48 := [trans #41 #46]: #47
#53 := [monotonicity #48 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#33 := [asserted]: #16
[mp #33 #64]: false
unsat
8df4cccdaeae7b8dba6943e970d61ef9c5d5c03a 27 0
#2 := false
#9 := 3::real
#8 := 1::real
#10 := (/ 1::real 3::real)
#11 := (= #10 #10)
#12 := (not #11)
#45 := (iff #12 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 true)
#30 := 1/3::real
#33 := (= 1/3::real 1/3::real)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (= #10 1/3::real)
#32 := [rewrite]: #31
#35 := [monotonicity #32 #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#29 := [asserted]: #12
[mp #29 #46]: false
unsat
3d1c0db1afc349d77cdcd71f7e3bab1aba5dbe51 48 0
#2 := false
#9 := 3::real
#8 := 1::real
#12 := (- 1::real)
#13 := (/ #12 3::real)
#10 := (- 3::real)
#11 := (/ 1::real #10)
#14 := (= #11 #13)
#15 := (not #14)
#66 := (iff #15 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #15 #61)
#59 := (iff #14 true)
#39 := -1/3::real
#54 := (= -1/3::real -1/3::real)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #14 #54)
#52 := (= #13 -1/3::real)
#44 := -1::real
#47 := (/ -1::real 3::real)
#50 := (= #47 -1/3::real)
#51 := [rewrite]: #50
#48 := (= #13 #47)
#45 := (= #12 -1::real)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#42 := (= #11 -1/3::real)
#33 := -3::real
#36 := (/ 1::real -3::real)
#40 := (= #36 -1/3::real)
#41 := [rewrite]: #40
#37 := (= #11 #36)
#34 := (= #10 -3::real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#43 := [trans #38 #41]: #42
#56 := [monotonicity #43 #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#32 := [asserted]: #15
[mp #32 #67]: false
unsat
87b5c605d55a2e66da4dfd975d21b4153bb5414e 36 0
#2 := false
#10 := 3::real
#8 := 1::real
#9 := (- 1::real)
#11 := (/ #9 3::real)
#12 := (= #11 #11)
#13 := (not #12)
#54 := (iff #13 false)
#1 := true
#49 := (not true)
#52 := (iff #49 false)
#53 := [rewrite]: #52
#50 := (iff #13 #49)
#47 := (iff #12 true)
#37 := -1/3::real
#42 := (= -1/3::real -1/3::real)
#45 := (iff #42 true)
#46 := [rewrite]: #45
#43 := (iff #12 #42)
#40 := (= #11 -1/3::real)
#31 := -1::real
#34 := (/ -1::real 3::real)
#38 := (= #34 -1/3::real)
#39 := [rewrite]: #38
#35 := (= #11 #34)
#32 := (= #9 -1::real)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#41 := [trans #36 #39]: #40
#44 := [monotonicity #41 #41]: #43
#48 := [trans #44 #46]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#30 := [asserted]: #13
[mp #30 #55]: false
unsat
69f379b62648823dab96490b884403f1a100b051 36 0
#2 := false
decl f3 :: real
#9 := f3
#8 := 3::real
#10 := (/ f3 3::real)
#11 := (* 3::real #10)
#12 := (= #11 f3)
#13 := (not #12)
#53 := (iff #13 false)
#1 := true
#48 := (not true)
#51 := (iff #48 false)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (iff #12 true)
#41 := (= f3 f3)
#44 := (iff #41 true)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#31 := 1/3::real
#32 := (* 1/3::real f3)
#35 := (* 3::real #32)
#38 := (= #35 f3)
#39 := [rewrite]: #38
#36 := (= #11 #35)
#33 := (= #10 #32)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#40 := [trans #37 #39]: #12
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#30 := [asserted]: #13
[mp #30 #54]: false
unsat
c568dbbce6e2e01b901ce930d7e767e667036eac 43 0
#2 := false
#10 := 3::real
#8 := 1::real
#13 := (/ 1::real 3::real)
#11 := (- 3::real)
#9 := (- 1::real)
#12 := (/ #9 #11)
#14 := (= #12 #13)
#15 := (not #14)
#61 := (iff #15 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #15 #56)
#54 := (iff #14 true)
#42 := 1/3::real
#49 := (= 1/3::real 1/3::real)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #14 #49)
#47 := (= #13 1/3::real)
#48 := [rewrite]: #47
#45 := (= #12 1/3::real)
#36 := -3::real
#33 := -1::real
#39 := (/ -1::real -3::real)
#43 := (= #39 1/3::real)
#44 := [rewrite]: #43
#40 := (= #12 #39)
#37 := (= #11 -3::real)
#38 := [rewrite]: #37
#34 := (= #9 -1::real)
#35 := [rewrite]: #34
#41 := [monotonicity #35 #38]: #40
#46 := [trans #41 #44]: #45
#51 := [monotonicity #46 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#32 := [asserted]: #15
[mp #32 #62]: false
unsat
3361302649d5a7d77b2ca31653ed08be03e48773 35 0
#2 := false
decl f3 :: real
#8 := f3
#9 := 3::real
#10 := (* f3 3::real)
#11 := (/ #10 3::real)
#12 := (= #11 f3)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#40 := (= f3 f3)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#31 := (* 3::real f3)
#34 := (/ #31 3::real)
#37 := (= #34 f3)
#38 := [rewrite]: #37
#35 := (= #11 #34)
#32 := (= #10 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#39 := [trans #36 #38]: #12
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#30 := [asserted]: #13
[mp #30 #53]: false
unsat
b263639810279d9b6652040b63841cf9ecc49673 26 0
#2 := false
decl f3 :: real
#8 := f3
#9 := 1::real
#10 := (/ f3 1::real)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
a4bc584e73aac52f28ef031b730a576d8872cda7 62 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#67 := 1/3::real
#68 := (* 1/3::real f3)
#69 := (<= #68 0::real)
#65 := (not #69)
#54 := (<= f3 0::real)
#71 := (or #54 #65)
#74 := (not #71)
#13 := 3::real
#11 := 2::real
#12 := (* 2::real f3)
#14 := (/ #12 3::real)
#15 := (< #14 f3)
#10 := (< 0::real f3)
#16 := (implies #10 #15)
#17 := (not #16)
#77 := (iff #17 #74)
#36 := 2/3::real
#37 := (* 2/3::real f3)
#39 := (< #37 f3)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#75 := (iff #51 #74)
#72 := (iff #46 #71)
#66 := (iff #39 #65)
#70 := [rewrite]: #66
#63 := (iff #45 #54)
#55 := (not #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#73 := [monotonicity #64 #70]: #72
#76 := [monotonicity #73]: #75
#52 := (iff #17 #51)
#49 := (iff #16 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #16 #42)
#40 := (iff #15 #39)
#35 := (= #14 #37)
#38 := [rewrite]: #35
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#78 := [trans #53 #76]: #77
#34 := [asserted]: #17
#79 := [mp #34 #78]: #74
#81 := [not-or-elim #79]: #69
#80 := [not-or-elim #79]: #55
[th-lemma #80 #81]: false
unsat
7d08518b217d1a1becfa0af110d54307de30c5dc 60 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#65 := 2/3::real
#66 := (* 2/3::real f3)
#67 := (<= #66 0::real)
#63 := (not #67)
#52 := (<= f3 0::real)
#69 := (or #52 #63)
#72 := (not #69)
#11 := 3::real
#12 := (/ f3 3::real)
#13 := (< #12 f3)
#10 := (< 0::real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#75 := (iff #15 #72)
#33 := 1/3::real
#34 := (* 1/3::real f3)
#37 := (< #34 f3)
#43 := (not #10)
#44 := (or #43 #37)
#49 := (not #44)
#73 := (iff #49 #72)
#70 := (iff #44 #69)
#64 := (iff #37 #63)
#68 := [rewrite]: #64
#61 := (iff #43 #52)
#53 := (not #52)
#56 := (not #53)
#59 := (iff #56 #52)
#60 := [rewrite]: #59
#57 := (iff #43 #56)
#54 := (iff #10 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#71 := [monotonicity #62 #68]: #70
#74 := [monotonicity #71]: #73
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#40 := (implies #10 #37)
#45 := (iff #40 #44)
#46 := [rewrite]: #45
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#35 := (= #12 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #39]: #41
#48 := [trans #42 #46]: #47
#51 := [monotonicity #48]: #50
#76 := [trans #51 #74]: #75
#32 := [asserted]: #15
#77 := [mp #32 #76]: #72
#79 := [not-or-elim #77]: #67
#78 := [not-or-elim #77]: #53
[th-lemma #78 #79]: false
unsat
3264c4e64061840798cc6aff819c1a9ea6efdf83 62 0
#2 := false
#9 := 0::real
decl f3 :: real
#8 := f3
#69 := 1/3::real
#70 := (* 1/3::real f3)
#67 := (>= #70 0::real)
#65 := (not #67)
#56 := (>= f3 0::real)
#71 := (or #56 #65)
#74 := (not #71)
#13 := 3::real
#11 := 2::real
#12 := (* 2::real f3)
#14 := (/ #12 3::real)
#15 := (< f3 #14)
#10 := (< f3 0::real)
#16 := (implies #10 #15)
#17 := (not #16)
#77 := (iff #17 #74)
#36 := 2/3::real
#37 := (* 2/3::real f3)
#39 := (< f3 #37)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#75 := (iff #51 #74)
#72 := (iff #46 #71)
#66 := (iff #39 #65)
#68 := [rewrite]: #66
#63 := (iff #45 #56)
#54 := (not #56)
#58 := (not #54)
#61 := (iff #58 #56)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#55 := (iff #10 #54)
#57 := [rewrite]: #55
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#73 := [monotonicity #64 #68]: #72
#76 := [monotonicity #73]: #75
#52 := (iff #17 #51)
#49 := (iff #16 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #16 #42)
#40 := (iff #15 #39)
#35 := (= #14 #37)
#38 := [rewrite]: #35
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#78 := [trans #53 #76]: #77
#34 := [asserted]: #17
#79 := [mp #34 #78]: #74
#81 := [not-or-elim #79]: #67
#80 := [not-or-elim #79]: #54
[th-lemma #80 #81]: false
unsat
6c2103bd90ca9e5c8cf0a5b4be8090b54399dce8 60 0
#2 := false
#9 := 0::real
decl f3 :: real
#8 := f3
#67 := 2/3::real
#68 := (* 2/3::real f3)
#65 := (>= #68 0::real)
#63 := (not #65)
#54 := (>= f3 0::real)
#69 := (or #54 #63)
#72 := (not #69)
#11 := 3::real
#12 := (/ f3 3::real)
#13 := (< f3 #12)
#10 := (< f3 0::real)
#14 := (implies #10 #13)
#15 := (not #14)
#75 := (iff #15 #72)
#33 := 1/3::real
#34 := (* 1/3::real f3)
#37 := (< f3 #34)
#43 := (not #10)
#44 := (or #43 #37)
#49 := (not #44)
#73 := (iff #49 #72)
#70 := (iff #44 #69)
#64 := (iff #37 #63)
#66 := [rewrite]: #64
#61 := (iff #43 #54)
#52 := (not #54)
#56 := (not #52)
#59 := (iff #56 #54)
#60 := [rewrite]: #59
#57 := (iff #43 #56)
#53 := (iff #10 #52)
#55 := [rewrite]: #53
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#71 := [monotonicity #62 #66]: #70
#74 := [monotonicity #71]: #73
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#40 := (implies #10 #37)
#45 := (iff #40 #44)
#46 := [rewrite]: #45
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#35 := (= #12 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #39]: #41
#48 := [trans #42 #46]: #47
#51 := [monotonicity #48]: #50
#76 := [trans #51 #74]: #75
#32 := [asserted]: #15
#77 := [mp #32 #76]: #72
#79 := [not-or-elim #77]: #65
#78 := [not-or-elim #77]: #52
[th-lemma #78 #79]: false
unsat
38c4aea1d2d6bacd07395ef4b2393dfbcb439bc0 75 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#32 := -1::real
#33 := (* -1::real f3)
#45 := (>= f3 0::real)
#52 := (ite #45 f3 #33)
#73 := (* -1::real #52)
#81 := (+ f3 #73)
#90 := (<= #81 0::real)
#76 := (= f3 #52)
#71 := (+ #33 #73)
#80 := (<= #71 0::real)
#77 := (= #33 #52)
#46 := (not #45)
#82 := [hypothesis]: #46
#74 := (or #45 #77)
#75 := [def-axiom]: #74
#83 := [unit-resolution #75 #82]: #77
#84 := (not #77)
#85 := (or #84 #80)
#86 := [th-lemma]: #85
#87 := [unit-resolution #86 #83]: #80
#61 := (>= #52 0::real)
#65 := (not #61)
#11 := (- f3)
#10 := (< f3 0::real)
#12 := (ite #10 #11 f3)
#13 := (<= 0::real #12)
#14 := (not #13)
#68 := (iff #14 #65)
#36 := (ite #10 #33 f3)
#39 := (<= 0::real #36)
#42 := (not #39)
#66 := (iff #42 #65)
#63 := (iff #39 #61)
#57 := (<= 0::real #52)
#60 := (iff #57 #61)
#62 := [rewrite]: #60
#58 := (iff #39 #57)
#55 := (= #36 #52)
#49 := (ite #46 #33 f3)
#53 := (= #49 #52)
#54 := [rewrite]: #53
#50 := (= #36 #49)
#47 := (iff #10 #46)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#43 := (iff #14 #42)
#40 := (iff #13 #39)
#37 := (= #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#69 := [trans #44 #67]: #68
#31 := [asserted]: #14
#70 := [mp #31 #69]: #65
#88 := [th-lemma #82 #70 #87]: false
#89 := [lemma #88]: #45
#78 := (or #46 #76)
#79 := [def-axiom]: #78
#92 := [unit-resolution #79 #89]: #76
#93 := (not #76)
#94 := (or #93 #90)
#95 := [th-lemma]: #94
#96 := [unit-resolution #95 #92]: #90
[th-lemma #89 #70 #96]: false
unsat
4d115301f8b89c507668ca5b7281bced36458867 57 0
#2 := false
#36 := 0::real
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#33 := -1::real
#34 := (* -1::real f4)
#35 := (+ f3 #34)
#37 := (<= #35 0::real)
#40 := (ite #37 f3 f4)
#48 := (* -1::real #40)
#49 := (+ f3 #48)
#47 := (>= #49 0::real)
#53 := (not #47)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f3)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #47)
#43 := (<= #40 f3)
#46 := (iff #43 #47)
#50 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#60 := (= f3 #40)
#31 := (+ f4 #48)
#65 := (>= #31 0::real)
#61 := (= f4 #40)
#62 := (not #37)
#66 := [hypothesis]: #62
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#67 := [unit-resolution #57 #66]: #61
#68 := (not #61)
#69 := (or #68 #65)
#70 := [th-lemma]: #69
#71 := [unit-resolution #70 #67]: #65
#72 := [th-lemma #56 #66 #71]: false
#73 := [lemma #72]: #37
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#74 := [unit-resolution #58 #73]: #60
#75 := (not #60)
#76 := (or #75 #47)
#77 := [th-lemma]: #76
[unit-resolution #77 #74 #56]: false
unsat
dfa0c0d7e307b713d1c0a6fb4345c0cb4048e97d 132 0
#2 := false
#9 := 0::real
decl f3 :: real
#8 := f3
#66 := (>= f3 0::real)
#67 := (not #66)
#34 := -1::real
#35 := (* -1::real f3)
#73 := (ite #66 f3 #35)
#102 := (= f3 #73)
#130 := (not #102)
#14 := (= f3 0::real)
#82 := (= #73 0::real)
#124 := (iff #82 #14)
#122 := (iff #14 #82)
#121 := [hypothesis]: #102
#123 := [monotonicity #121]: #122
#125 := [symm #123]: #124
#131 := (or #82 #130)
#60 := (not #14)
#99 := (not #82)
#126 := (iff #99 #60)
#127 := [monotonicity #125]: #126
#119 := [hypothesis]: #99
#128 := [mp #119 #127]: #60
#112 := (or #14 #82)
#89 := (iff #60 #82)
#11 := (- f3)
#10 := (< f3 0::real)
#12 := (ite #10 #11 f3)
#13 := (= #12 0::real)
#15 := (iff #13 #14)
#16 := (not #15)
#94 := (iff #16 #89)
#38 := (ite #10 #35 f3)
#44 := (= 0::real #38)
#61 := (iff #44 #60)
#92 := (iff #61 #89)
#86 := (iff #82 #60)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #61 #86)
#84 := (iff #44 #82)
#78 := (= 0::real #73)
#81 := (iff #78 #82)
#83 := [rewrite]: #81
#79 := (iff #44 #78)
#76 := (= #38 #73)
#70 := (ite #67 #35 f3)
#74 := (= #70 #73)
#75 := [rewrite]: #74
#71 := (= #38 #70)
#68 := (iff #10 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#77 := [trans #72 #75]: #76
#80 := [monotonicity #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#64 := (iff #16 #61)
#52 := (iff #14 #44)
#57 := (not #52)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #16 #57)
#55 := (iff #15 #52)
#49 := (iff #44 #14)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #15 #49)
#47 := (iff #13 #44)
#41 := (= #38 0::real)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #13 #41)
#39 := (= #12 #38)
#36 := (= #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#95 := [trans #65 #93]: #94
#33 := [asserted]: #16
#96 := [mp #33 #95]: #89
#97 := (not #89)
#110 := (or #14 #82 #97)
#111 := [def-axiom]: #110
#113 := [unit-resolution #111 #96]: #112
#120 := [unit-resolution #113 #119]: #14
#129 := [unit-resolution #120 #128]: false
#132 := [lemma #129]: #131
#133 := [unit-resolution #132 #121]: #82
#135 := [mp #133 #125]: #14
#108 := (or #60 #99)
#106 := (or #60 #99 #97)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #96]: #108
#134 := [unit-resolution #109 #133]: #60
#136 := [unit-resolution #134 #135]: false
#137 := [lemma #136]: #130
#104 := (or #67 #102)
#105 := [def-axiom]: #104
#143 := [unit-resolution #105 #137]: #67
#138 := (= #35 0::real)
#147 := (not #138)
#157 := (iff #147 #99)
#155 := (iff #138 #82)
#103 := (= #35 #73)
#100 := (or #66 #103)
#101 := [def-axiom]: #100
#154 := [unit-resolution #101 #143]: #103
#156 := [monotonicity #154]: #155
#158 := [monotonicity #156]: #157
#139 := (<= #35 0::real)
#145 := (not #139)
#142 := [hypothesis]: #139
#144 := [th-lemma #143 #142]: false
#146 := [lemma #144]: #145
#148 := (or #147 #139)
#149 := [th-lemma]: #148
#153 := [unit-resolution #149 #146]: #147
#159 := [mp #153 #158]: #99
#160 := [unit-resolution #113 #159]: #14
#161 := (or #60 #66)
#162 := [th-lemma]: #161
[unit-resolution #162 #160 #143]: false
unsat
6655ab648d12420f565ba36d5ae332d6fbbff845 57 0
#2 := false
#36 := 0::real
decl f4 :: real
#9 := f4
#33 := -1::real
#34 := (* -1::real f4)
decl f3 :: real
#8 := f3
#35 := (+ f3 #34)
#37 := (<= #35 0::real)
#40 := (ite #37 f3 f4)
#61 := (= f4 #40)
#65 := (not #61)
#47 := (* -1::real #40)
#48 := (+ f4 #47)
#46 := (>= #48 0::real)
#53 := (not #46)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f4)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #46)
#43 := (<= #40 f4)
#49 := (iff #43 #46)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#64 := [hypothesis]: #61
#66 := (or #65 #46)
#67 := [th-lemma]: #66
#68 := [unit-resolution #67 #64 #56]: false
#69 := [lemma #68]: #65
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#72 := [unit-resolution #57 #69]: #37
#31 := (+ f3 #47)
#71 := (>= #31 0::real)
#60 := (= f3 #40)
#62 := (not #37)
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#73 := [unit-resolution #58 #72]: #60
#74 := (not #60)
#75 := (or #74 #71)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #73]: #71
[th-lemma #77 #56 #72]: false
unsat
9adcfa237e60c42bd298fd44b174819c2b7e48c6 103 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#34 := -1::real
#35 := (* -1::real f3)
#112 := (* -1::real #35)
#113 := (+ f3 #112)
#115 := (>= #113 0::real)
#111 := (= f3 #35)
#61 := (>= f3 0::real)
#68 := (ite #61 f3 #35)
#118 := (= #68 #35)
#96 := (= #35 #68)
#62 := (not #61)
#107 := [hypothesis]: #61
#73 := (= f3 #68)
#97 := (or #62 #73)
#98 := [def-axiom]: #97
#108 := [unit-resolution #98 #107]: #73
#95 := (not #73)
#101 := (or #62 #95)
#83 := (iff #62 #73)
#12 := (- f3)
#11 := (< f3 0::real)
#13 := (ite #11 #12 f3)
#14 := (= #13 f3)
#10 := (<= 0::real f3)
#15 := (iff #10 #14)
#16 := (not #15)
#88 := (iff #16 #83)
#55 := (not #10)
#38 := (ite #11 #35 f3)
#44 := (= f3 #38)
#56 := (iff #44 #55)
#86 := (iff #56 #83)
#80 := (iff #73 #62)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #56 #80)
#78 := (iff #55 #62)
#76 := (iff #10 #61)
#77 := [rewrite]: #76
#79 := [monotonicity #77]: #78
#74 := (iff #44 #73)
#71 := (= #38 #68)
#65 := (ite #62 #35 f3)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #38 #65)
#63 := (iff #11 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#75 := [monotonicity #72]: #74
#82 := [monotonicity #75 #79]: #81
#87 := [trans #82 #85]: #86
#59 := (iff #16 #56)
#49 := (iff #10 #44)
#52 := (not #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #16 #52)
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#41 := (= #38 f3)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #14 #41)
#39 := (= #13 #38)
#36 := (= #12 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#89 := [trans #60 #87]: #88
#33 := [asserted]: #16
#90 := [mp #33 #89]: #83
#93 := (not #83)
#91 := (or #62 #95 #93)
#100 := [def-axiom]: #91
#102 := [unit-resolution #100 #90]: #101
#109 := [unit-resolution #102 #108 #107]: false
#110 := [lemma #109]: #62
#99 := (or #61 #96)
#94 := [def-axiom]: #99
#116 := [unit-resolution #94 #110]: #96
#119 := [symm #116]: #118
#105 := (or #61 #73)
#103 := (or #61 #73 #93)
#104 := [def-axiom]: #103
#106 := [unit-resolution #104 #90]: #105
#117 := [unit-resolution #106 #110]: #73
#120 := [trans #117 #119]: #111
#121 := (not #111)
#122 := (or #121 #115)
#123 := [th-lemma]: #122
#124 := [unit-resolution #123 #120]: #115
[th-lemma #110 #124]: false
unsat
ee668ce9e0fa0c7fac3c07515b5e406674a29e92 103 0
#2 := false
#45 := 0::real
decl f5 :: real
#11 := f5
decl f4 :: real
#9 := f4
#43 := -1::real
#53 := (* -1::real f5)
#63 := (+ f4 #53)
#64 := (<= #63 0::real)
#67 := (ite #64 f4 f5)
#75 := (* -1::real #67)
decl f3 :: real
#8 := f3
#76 := (+ f3 #75)
#74 := (>= #76 0::real)
#73 := (not #74)
#54 := (+ f3 #53)
#52 := (>= #54 0::real)
#51 := (not #52)
#47 := (* -1::real f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::real)
#44 := (not #46)
#57 := (and #44 #51)
#60 := (not #57)
#81 := (or #60 #73)
#84 := (not #81)
#14 := (<= f4 f5)
#15 := (ite #14 f4 f5)
#16 := (< f3 #15)
#12 := (< f3 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#87 := (iff #18 #84)
#36 := (not #13)
#37 := (or #36 #16)
#40 := (not #37)
#85 := (iff #40 #84)
#82 := (iff #37 #81)
#79 := (iff #16 #73)
#70 := (< f3 #67)
#77 := (iff #70 #73)
#78 := [rewrite]: #77
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#80 := [trans #72 #78]: #79
#61 := (iff #36 #60)
#58 := (iff #13 #57)
#55 := (iff #12 #51)
#56 := [rewrite]: #55
#49 := (iff #10 #44)
#50 := [rewrite]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#83 := [monotonicity #62 #80]: #82
#86 := [monotonicity #83]: #85
#41 := (iff #18 #40)
#38 := (iff #17 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#88 := [trans #42 #86]: #87
#35 := [asserted]: #18
#89 := [mp #35 #88]: #84
#93 := [not-or-elim #89]: #74
#90 := [not-or-elim #89]: #57
#92 := [and-elim #90]: #51
#98 := (+ f5 #75)
#115 := (<= #98 0::real)
#104 := (= f5 #67)
#105 := (not #64)
#103 := (= f4 #67)
#110 := (not #103)
#100 := (+ f4 #75)
#97 := (<= #100 0::real)
#107 := (not #97)
#91 := [and-elim #90]: #44
#96 := [hypothesis]: #97
#94 := [th-lemma #96 #91 #93]: false
#108 := [lemma #94]: #107
#109 := [hypothesis]: #103
#111 := (or #110 #97)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109 #108]: false
#114 := [lemma #113]: #110
#106 := (or #105 #103)
#101 := [def-axiom]: #106
#117 := [unit-resolution #101 #114]: #105
#102 := (or #64 #104)
#99 := [def-axiom]: #102
#118 := [unit-resolution #99 #117]: #104
#119 := (not #104)
#120 := (or #119 #115)
#121 := [th-lemma]: #120
#122 := [unit-resolution #121 #118]: #115
[th-lemma #122 #92 #93]: false
unsat
c4a9e24c8934134e79e09f07b7517e3fb630224e 149 0
#2 := false
#9 := 0::real
decl f3 :: real
#8 := f3
#34 := -1::real
#35 := (* -1::real f3)
#61 := (>= f3 0::real)
#68 := (ite #61 f3 #35)
#111 := (* -1::real #68)
#156 := (+ f3 #111)
#157 := (<= #156 0::real)
#98 := (= f3 #68)
#10 := (<= f3 0::real)
#55 := (not #10)
#78 := (+ f3 #68)
#77 := (= #78 0::real)
#93 := (not #77)
#115 := [hypothesis]: #93
#95 := (>= #78 0::real)
#112 := (+ #35 #111)
#113 := (<= #112 0::real)
#73 := (= #35 #68)
#62 := (not #61)
#131 := (or #62 #77)
#118 := (= f3 0::real)
#109 := (or #10 #77)
#85 := (iff #55 #77)
#12 := (- f3)
#11 := (< f3 0::real)
#13 := (ite #11 #12 f3)
#14 := (= #13 #12)
#15 := (iff #10 #14)
#16 := (not #15)
#90 := (iff #16 #85)
#38 := (ite #11 #35 f3)
#44 := (= #35 #38)
#56 := (iff #44 #55)
#88 := (iff #56 #85)
#82 := (iff #77 #55)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #56 #82)
#80 := (iff #44 #77)
#76 := (iff #73 #77)
#79 := [rewrite]: #76
#74 := (iff #44 #73)
#71 := (= #38 #68)
#65 := (ite #62 #35 f3)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #38 #65)
#63 := (iff #11 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#75 := [monotonicity #72]: #74
#81 := [trans #75 #79]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#59 := (iff #16 #56)
#49 := (iff #10 #44)
#52 := (not #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #16 #52)
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#41 := (= #38 #35)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #14 #41)
#36 := (= #12 #35)
#37 := [rewrite]: #36
#39 := (= #13 #38)
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40 #37]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#91 := [trans #60 #89]: #90
#33 := [asserted]: #16
#92 := [mp #33 #91]: #85
#102 := (not #85)
#107 := (or #10 #77 #102)
#108 := [def-axiom]: #107
#110 := [unit-resolution #108 #92]: #109
#116 := [unit-resolution #110 #115]: #10
#117 := [hypothesis]: #61
#119 := [th-lemma #117 #116]: #118
#127 := (= #78 f3)
#125 := (= #68 f3)
#99 := (or #62 #98)
#100 := [def-axiom]: #99
#120 := [unit-resolution #100 #117]: #98
#126 := [symm #120]: #125
#123 := (= #78 #68)
#121 := (= #68 #78)
#122 := [th-lemma #117 #116]: #121
#124 := [symm #122]: #123
#128 := [trans #124 #126]: #127
#129 := [trans #128 #119]: #77
#130 := [unit-resolution #115 #129]: false
#132 := [lemma #130]: #131
#133 := [unit-resolution #132 #115]: #62
#101 := (or #61 #73)
#96 := [def-axiom]: #101
#134 := [unit-resolution #96 #133]: #73
#135 := (not #73)
#136 := (or #135 #113)
#137 := [th-lemma]: #136
#138 := [unit-resolution #137 #134]: #113
#139 := (not #113)
#140 := (or #95 #139)
#141 := [th-lemma]: #140
#142 := [unit-resolution #141 #138]: #95
#97 := (<= #78 0::real)
#114 := (>= #112 0::real)
#143 := (or #135 #114)
#144 := [th-lemma]: #143
#145 := [unit-resolution #144 #134]: #114
#146 := (not #114)
#147 := (or #97 #146)
#148 := [th-lemma]: #147
#149 := [unit-resolution #148 #145]: #97
#151 := (not #95)
#150 := (not #97)
#152 := (or #77 #150 #151)
#153 := [th-lemma]: #152
#154 := [unit-resolution #153 #149 #142 #115]: false
#155 := [lemma #154]: #77
#105 := (or #55 #93)
#103 := (or #55 #93 #102)
#104 := [def-axiom]: #103
#106 := [unit-resolution #104 #92]: #105
#159 := [unit-resolution #106 #155]: #55
#160 := (or #61 #10)
#161 := [th-lemma]: #160
#162 := [unit-resolution #161 #159]: #61
#163 := [unit-resolution #100 #162]: #98
#164 := (not #98)
#165 := (or #164 #157)
#166 := [th-lemma]: #165
#167 := [unit-resolution #166 #163]: #157
#168 := (or #93 #97)
#169 := [th-lemma]: #168
#170 := [unit-resolution #169 #155]: #97
[th-lemma #159 #170 #167]: false
unsat
6621a3ffc07b1d1f7378f6c00c067bb0ce9ac306 86 0
#2 := false
decl f3 :: real
#8 := f3
decl f4 :: real
#9 := f4
#38 := 0::real
#35 := -1::real
#36 := (* -1::real f4)
#37 := (+ f3 #36)
#46 := (>= #37 0::real)
#48 := (ite #46 f4 f3)
#39 := (<= #37 0::real)
#42 := (ite #39 f3 f4)
#51 := (= #42 #48)
#33 := (= f4 #48)
#65 := (= f3 #48)
#66 := (not #46)
#71 := [hypothesis]: #66
#69 := (or #46 #65)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #71]: #65
#77 := (= #42 f3)
#61 := (= f3 #42)
#73 := (or #46 #39)
#74 := [th-lemma]: #73
#75 := [unit-resolution #74 #71]: #39
#63 := (not #39)
#64 := (or #63 #61)
#59 := [def-axiom]: #64
#76 := [unit-resolution #59 #75]: #61
#78 := [symm #76]: #77
#79 := [trans #78 #72]: #51
#54 := (not #51)
#12 := (<= f4 f3)
#13 := (ite #12 f4 f3)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#14 := (= #11 #13)
#15 := (not #14)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (= #13 #48)
#45 := (iff #12 #46)
#47 := [rewrite]: #45
#50 := [monotonicity #47]: #49
#43 := (= #11 #42)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#53 := [monotonicity #44 #50]: #52
#56 := [monotonicity #53]: #55
#32 := [asserted]: #15
#57 := [mp #32 #56]: #54
#80 := [unit-resolution #57 #79]: false
#81 := [lemma #80]: #46
#67 := (or #66 #33)
#68 := [def-axiom]: #67
#83 := [unit-resolution #68 #81]: #33
#103 := (= #42 f4)
#82 := (= f3 f4)
#62 := (= f4 #42)
#93 := (not #62)
#94 := (iff #54 #93)
#91 := (iff #51 #62)
#89 := (iff #62 #51)
#84 := (= #48 #42)
#87 := (iff #84 #51)
#88 := [commutativity]: #87
#85 := (iff #62 #84)
#86 := [monotonicity #83]: #85
#90 := [trans #86 #88]: #89
#92 := [symm #90]: #91
#95 := [monotonicity #92]: #94
#96 := [mp #57 #95]: #93
#60 := (or #39 #62)
#58 := [def-axiom]: #60
#97 := [unit-resolution #58 #96]: #39
#98 := (or #82 #63 #66)
#99 := [th-lemma]: #98
#100 := [unit-resolution #99 #97 #81]: #82
#101 := [unit-resolution #59 #97]: #61
#102 := [symm #101]: #77
#104 := [trans #102 #100]: #103
#105 := [trans #104 #83]: #51
[unit-resolution #57 #105]: false
unsat
46bd95326d38ccebb90178efd68b73f641b282a9 68 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#11 := (<= f3 0::real)
#12 := (ite #11 f3 0::real)
#13 := (= #12 0::real)
#76 := (= f3 0::real)
#50 := (>= f3 0::real)
#51 := (not #50)
#59 := (or #13 #51)
#64 := (not #59)
#10 := (<= 0::real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#67 := (iff #15 #64)
#33 := (= 0::real #12)
#39 := (not #10)
#40 := (or #39 #33)
#45 := (not #40)
#65 := (iff #45 #64)
#62 := (iff #40 #59)
#56 := (or #51 #13)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #40 #56)
#54 := (iff #33 #13)
#55 := [rewrite]: #54
#52 := (iff #39 #51)
#48 := (iff #10 #50)
#49 := [rewrite]: #48
#53 := [monotonicity #49]: #52
#58 := [monotonicity #53 #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#46 := (iff #15 #45)
#43 := (iff #14 #40)
#36 := (implies #10 #33)
#41 := (iff #36 #40)
#42 := [rewrite]: #41
#37 := (iff #14 #36)
#34 := (iff #13 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#44 := [trans #38 #42]: #43
#47 := [monotonicity #44]: #46
#68 := [trans #47 #66]: #67
#32 := [asserted]: #15
#69 := [mp #32 #68]: #64
#72 := [not-or-elim #69]: #50
#70 := (not #13)
#71 := [not-or-elim #69]: #70
#78 := (or #11 #13)
#79 := [def-axiom]: #78
#77 := [unit-resolution #79 #71]: #11
#81 := (not #11)
#75 := (or #76 #81 #51)
#73 := [th-lemma]: #75
#84 := [unit-resolution #73 #77 #72]: #76
#86 := (= #12 f3)
#80 := (= f3 #12)
#82 := (or #81 #80)
#83 := [def-axiom]: #82
#85 := [unit-resolution #83 #77]: #80
#87 := [symm #85]: #86
#88 := [trans #87 #84]: #13
[unit-resolution #71 #88]: false
unsat
fe8f01cf58e022d252300f3afc6a7b8ad4a81839 114 0
#2 := false
#9 := 0::real
decl f3 :: real
#8 := f3
#35 := -1::real
#36 := (* -1::real f3)
#67 := (>= f3 0::real)
#74 := (ite #67 f3 #36)
#88 := (* -1::real #74)
#127 := (+ #36 #88)
#137 := (<= #127 0::real)
#114 := (= #36 #74)
#68 := (not #67)
#125 := (+ f3 #88)
#126 := (<= #125 0::real)
#113 := (= f3 #74)
#128 := [hypothesis]: #67
#115 := (or #68 #113)
#116 := [def-axiom]: #115
#129 := [unit-resolution #116 #128]: #113
#130 := (not #113)
#131 := (or #130 #126)
#132 := [th-lemma]: #131
#133 := [unit-resolution #132 #129]: #126
#83 := (>= #74 0::real)
#82 := (not #83)
#94 := (ite #83 #74 #88)
#99 := (= #74 #94)
#102 := (not #99)
#11 := (- f3)
#10 := (< f3 0::real)
#12 := (ite #10 #11 f3)
#14 := (- #12)
#13 := (< #12 0::real)
#15 := (ite #13 #14 #12)
#16 := (= #15 #12)
#17 := (not #16)
#105 := (iff #17 #102)
#39 := (ite #10 #36 f3)
#48 := (* -1::real #39)
#42 := (< #39 0::real)
#53 := (ite #42 #48 #39)
#59 := (= #39 #53)
#64 := (not #59)
#103 := (iff #64 #102)
#100 := (iff #59 #99)
#97 := (= #53 #94)
#91 := (ite #82 #88 #74)
#95 := (= #91 #94)
#96 := [rewrite]: #95
#92 := (= #53 #91)
#77 := (= #39 #74)
#71 := (ite #68 #36 f3)
#75 := (= #71 #74)
#76 := [rewrite]: #75
#72 := (= #39 #71)
#69 := (iff #10 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#78 := [trans #73 #76]: #77
#89 := (= #48 #88)
#90 := [monotonicity #78]: #89
#86 := (iff #42 #82)
#79 := (< #74 0::real)
#84 := (iff #79 #82)
#85 := [rewrite]: #84
#80 := (iff #42 #79)
#81 := [monotonicity #78]: #80
#87 := [trans #81 #85]: #86
#93 := [monotonicity #87 #90 #78]: #92
#98 := [trans #93 #96]: #97
#101 := [monotonicity #78 #98]: #100
#104 := [monotonicity #101]: #103
#65 := (iff #17 #64)
#62 := (iff #16 #59)
#56 := (= #53 #39)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #16 #56)
#40 := (= #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#54 := (= #15 #53)
#51 := (= #14 #48)
#45 := (- #39)
#49 := (= #45 #48)
#50 := [rewrite]: #49
#46 := (= #14 #45)
#47 := [monotonicity #41]: #46
#52 := [trans #47 #50]: #51
#43 := (iff #13 #42)
#44 := [monotonicity #41]: #43
#55 := [monotonicity #44 #52 #41]: #54
#58 := [monotonicity #55 #41]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#106 := [trans #66 #104]: #105
#34 := [asserted]: #17
#107 := [mp #34 #106]: #102
#108 := (or #82 #99)
#117 := [def-axiom]: #108
#134 := [unit-resolution #117 #107]: #82
#135 := [th-lemma #128 #134 #133]: false
#136 := [lemma #135]: #68
#111 := (or #67 #114)
#112 := [def-axiom]: #111
#139 := [unit-resolution #112 #136]: #114
#140 := (not #114)
#141 := (or #140 #137)
#142 := [th-lemma]: #141
#143 := [unit-resolution #142 #139]: #137
[th-lemma #136 #134 #143]: false
unsat
0bc87aa75b23fa78f642cf1f3aa485350d8be4f2 124 0
#2 := false
#13 := 0::real
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#36 := -1::real
#38 := (* -1::real f4)
#51 := (+ f3 #38)
#52 := (<= #51 0::real)
#55 := (ite #52 f3 f4)
#103 := (* -1::real #55)
#104 := (+ f3 #103)
#106 := (>= #104 0::real)
#91 := (= f3 #55)
#105 := (+ f4 #103)
#123 := (>= #105 0::real)
#92 := (= f4 #55)
#93 := (not #52)
#134 := [hypothesis]: #93
#90 := (or #52 #92)
#88 := [def-axiom]: #90
#135 := [unit-resolution #88 #134]: #92
#126 := (not #92)
#127 := (or #126 #123)
#128 := [th-lemma]: #127
#136 := [unit-resolution #128 #135]: #123
#37 := (* -1::real f3)
#39 := (+ #37 #38)
#12 := (+ f3 f4)
#58 := (>= #12 0::real)
#65 := (ite #58 #12 #39)
#73 := (* -1::real #65)
#74 := (+ #55 #73)
#75 := (<= #74 0::real)
#80 := (not #75)
#15 := (- #12)
#14 := (< #12 0::real)
#16 := (ite #14 #15 #12)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#17 := (<= #11 #16)
#18 := (not #17)
#83 := (iff #18 #80)
#42 := (ite #14 #39 #12)
#45 := (<= #11 #42)
#48 := (not #45)
#81 := (iff #48 #80)
#78 := (iff #45 #75)
#70 := (<= #55 #65)
#76 := (iff #70 #75)
#77 := [rewrite]: #76
#71 := (iff #45 #70)
#68 := (= #42 #65)
#59 := (not #58)
#62 := (ite #59 #39 #12)
#66 := (= #62 #65)
#67 := [rewrite]: #66
#63 := (= #42 #62)
#60 := (iff #14 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#56 := (= #11 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#72 := [monotonicity #57 #69]: #71
#79 := [trans #72 #77]: #78
#82 := [monotonicity #79]: #81
#49 := (iff #18 #48)
#46 := (iff #17 #45)
#43 := (= #16 #42)
#40 := (= #15 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#84 := [trans #50 #82]: #83
#35 := [asserted]: #18
#85 := [mp #35 #84]: #80
#102 := (+ #12 #73)
#122 := (<= #102 0::real)
#86 := (= #12 #65)
#108 := [hypothesis]: #59
#120 := (or #93 #58)
#107 := [hypothesis]: #52
#100 := (+ #39 #73)
#101 := (<= #100 0::real)
#95 := (= #39 #65)
#98 := (or #58 #95)
#99 := [def-axiom]: #98
#109 := [unit-resolution #99 #108]: #95
#110 := (not #95)
#111 := (or #110 #101)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109]: #101
#94 := (or #93 #91)
#89 := [def-axiom]: #94
#114 := [unit-resolution #89 #107]: #91
#115 := (not #91)
#116 := (or #115 #106)
#117 := [th-lemma]: #116
#118 := [unit-resolution #117 #114]: #106
#119 := [th-lemma #108 #118 #113 #85 #107]: false
#121 := [lemma #119]: #120
#124 := [unit-resolution #121 #108]: #93
#125 := [unit-resolution #88 #124]: #92
#129 := [unit-resolution #128 #125]: #123
#130 := [th-lemma #113 #85 #108 #124 #129]: false
#131 := [lemma #130]: #58
#96 := (or #59 #86)
#97 := [def-axiom]: #96
#137 := [unit-resolution #97 #131]: #86
#138 := (not #86)
#139 := (or #138 #122)
#140 := [th-lemma]: #139
#141 := [unit-resolution #140 #137]: #122
#142 := [th-lemma #134 #131 #141 #85 #136]: false
#143 := [lemma #142]: #52
#144 := [unit-resolution #89 #143]: #91
#145 := [unit-resolution #117 #144]: #106
[th-lemma #131 #143 #141 #85 #145]: false
unsat
80cd3c3fe766c682a1b2d6b1e7013b88feafd6ca 57 0
#2 := false
#36 := 0::real
decl f4 :: real
#9 := f4
#33 := -1::real
#34 := (* -1::real f4)
decl f3 :: real
#8 := f3
#35 := (+ f3 #34)
#37 := (<= #35 0::real)
#40 := (ite #37 f4 f3)
#61 := (= f3 #40)
#65 := (not #61)
#46 := (* -1::real #40)
#47 := (+ f3 #46)
#48 := (<= #47 0::real)
#53 := (not #48)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#12 := (<= f3 #11)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #48)
#43 := (<= f3 #40)
#49 := (iff #43 #48)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#64 := [hypothesis]: #61
#66 := (or #65 #48)
#67 := [th-lemma]: #66
#68 := [unit-resolution #67 #64 #56]: false
#69 := [lemma #68]: #65
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#72 := [unit-resolution #57 #69]: #37
#31 := (+ f4 #46)
#70 := (<= #31 0::real)
#60 := (= f4 #40)
#62 := (not #37)
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#73 := [unit-resolution #58 #72]: #60
#74 := (not #60)
#75 := (or #74 #70)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #73]: #70
[th-lemma #77 #56 #72]: false
unsat
6eb0fb73353335cf541aa0794ee6ca4d2c180864 57 0
#2 := false
#35 := 0::real
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#33 := -1::real
#37 := (* -1::real f4)
#38 := (+ f3 #37)
#36 := (>= #38 0::real)
#40 := (ite #36 f3 f4)
#46 := (* -1::real #40)
#47 := (+ f3 #46)
#48 := (<= #47 0::real)
#53 := (not #48)
#10 := (<= f4 f3)
#11 := (ite #10 f3 f4)
#12 := (<= f3 #11)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #48)
#43 := (<= f3 #40)
#49 := (iff #43 #48)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#34 := (iff #10 #36)
#39 := [rewrite]: #34
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#60 := (= f3 #40)
#31 := (+ f4 #46)
#64 := (<= #31 0::real)
#61 := (= f4 #40)
#62 := (not #36)
#66 := [hypothesis]: #62
#59 := (or #36 #61)
#57 := [def-axiom]: #59
#67 := [unit-resolution #57 #66]: #61
#68 := (not #61)
#69 := (or #68 #64)
#70 := [th-lemma]: #69
#71 := [unit-resolution #70 #67]: #64
#72 := [th-lemma #56 #66 #71]: false
#73 := [lemma #72]: #36
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#74 := [unit-resolution #58 #73]: #60
#75 := (not #60)
#76 := (or #75 #48)
#77 := [th-lemma]: #76
[unit-resolution #77 #74 #56]: false
unsat
20f752e2f472eccd72355373443410a7257bcab2 18 0
#2 := false
decl f3 :: real
#8 := f3
#9 := (<= f3 f3)
#10 := (not #9)
#37 := (iff #10 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#30 := (iff #9 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#27 := [asserted]: #10
[mp #27 #38]: false
unsat
7294c1769d42d53cd19fbaf8cd8b1759222d3816 103 0
#2 := false
#45 := 0::real
decl f3 :: real
#8 := f3
decl f5 :: real
#11 := f5
#43 := -1::real
#51 := (* -1::real f5)
#63 := (+ f3 #51)
#64 := (<= #63 0::real)
#67 := (ite #64 f5 f3)
#73 := (* -1::real #67)
decl f4 :: real
#9 := f4
#74 := (+ f4 #73)
#75 := (<= #74 0::real)
#76 := (not #75)
#52 := (+ f4 #51)
#53 := (<= #52 0::real)
#54 := (not #53)
#47 := (* -1::real f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::real)
#44 := (not #46)
#57 := (and #44 #54)
#60 := (not #57)
#81 := (or #60 #76)
#84 := (not #81)
#14 := (<= f3 f5)
#15 := (ite #14 f5 f3)
#16 := (< #15 f4)
#12 := (< f5 f4)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#87 := (iff #18 #84)
#36 := (not #13)
#37 := (or #36 #16)
#40 := (not #37)
#85 := (iff #40 #84)
#82 := (iff #37 #81)
#79 := (iff #16 #76)
#70 := (< #67 f4)
#77 := (iff #70 #76)
#78 := [rewrite]: #77
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#80 := [trans #72 #78]: #79
#61 := (iff #36 #60)
#58 := (iff #13 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#49 := (iff #10 #44)
#50 := [rewrite]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#83 := [monotonicity #62 #80]: #82
#86 := [monotonicity #83]: #85
#41 := (iff #18 #40)
#38 := (iff #17 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#88 := [trans #42 #86]: #87
#35 := [asserted]: #18
#89 := [mp #35 #88]: #84
#93 := [not-or-elim #89]: #75
#90 := [not-or-elim #89]: #57
#91 := [and-elim #90]: #44
#97 := (+ f3 #73)
#116 := (>= #97 0::real)
#104 := (= f3 #67)
#105 := (not #64)
#103 := (= f5 #67)
#110 := (not #103)
#100 := (+ f5 #73)
#98 := (>= #100 0::real)
#107 := (not #98)
#92 := [and-elim #90]: #54
#96 := [hypothesis]: #98
#94 := [th-lemma #96 #92 #93]: false
#108 := [lemma #94]: #107
#109 := [hypothesis]: #103
#111 := (or #110 #98)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109 #108]: false
#114 := [lemma #113]: #110
#106 := (or #105 #103)
#101 := [def-axiom]: #106
#117 := [unit-resolution #101 #114]: #105
#102 := (or #64 #104)
#99 := [def-axiom]: #102
#118 := [unit-resolution #99 #117]: #104
#119 := (not #104)
#120 := (or #119 #116)
#121 := [th-lemma]: #120
#122 := [unit-resolution #121 #118]: #116
[th-lemma #122 #91 #93]: false
unsat
de5d01d854b7029d707ff72bb7662d8b73532863 50 0
#2 := false
#44 := 0::real
decl f4 :: real
#9 := f4
#41 := -1::real
#42 := (* -1::real f4)
decl f3 :: real
#8 := f3
#43 := (+ f3 #42)
#45 := (<= #43 0::real)
#51 := -3::real
#52 := (* -3::real f4)
#11 := 3::real
#12 := (* 3::real f3)
#53 := (+ #12 #52)
#54 := (<= #53 0::real)
#48 := (not #45)
#57 := (or #48 #54)
#60 := (not #57)
#13 := (* 3::real f4)
#14 := (<= #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#63 := (iff #16 #60)
#34 := (not #10)
#35 := (or #34 #14)
#38 := (not #35)
#61 := (iff #38 #60)
#58 := (iff #35 #57)
#55 := (iff #14 #54)
#56 := [rewrite]: #55
#49 := (iff #34 #48)
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#64 := [trans #40 #62]: #63
#33 := [asserted]: #16
#65 := [mp #33 #64]: #60
#66 := [not-or-elim #65]: #45
#67 := (not #54)
#68 := [not-or-elim #65]: #67
[th-lemma #68 #66]: false
unsat
aa7d3312f6710561997326a18f2cc9732070e79e 88 0
#2 := false
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#38 := 0::real
#35 := -1::real
#36 := (* -1::real f4)
#37 := (+ f3 #36)
#46 := (>= #37 0::real)
#48 := (ite #46 f3 f4)
#39 := (<= #37 0::real)
#42 := (ite #39 f4 f3)
#51 := (= #42 #48)
#33 := (= f3 #48)
#65 := (= f4 #48)
#66 := (not #46)
#71 := [hypothesis]: #66
#69 := (or #46 #65)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #71]: #65
#77 := (= #42 f4)
#61 := (= f4 #42)
#73 := (or #46 #39)
#74 := [th-lemma]: #73
#75 := [unit-resolution #74 #71]: #39
#63 := (not #39)
#64 := (or #63 #61)
#59 := [def-axiom]: #64
#76 := [unit-resolution #59 #75]: #61
#78 := [symm #76]: #77
#79 := [trans #78 #72]: #51
#54 := (not #51)
#12 := (<= f4 f3)
#13 := (ite #12 f3 f4)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#14 := (= #11 #13)
#15 := (not #14)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (= #13 #48)
#45 := (iff #12 #46)
#47 := [rewrite]: #45
#50 := [monotonicity #47]: #49
#43 := (= #11 #42)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#53 := [monotonicity #44 #50]: #52
#56 := [monotonicity #53]: #55
#32 := [asserted]: #15
#57 := [mp #32 #56]: #54
#80 := [unit-resolution #57 #79]: false
#81 := [lemma #80]: #46
#67 := (or #66 #33)
#68 := [def-axiom]: #67
#83 := [unit-resolution #68 #81]: #33
#107 := (= #42 f3)
#105 := (= f4 f3)
#82 := (= f3 f4)
#62 := (= f3 #42)
#95 := (not #62)
#96 := (iff #54 #95)
#93 := (iff #51 #62)
#91 := (iff #62 #51)
#86 := (= #48 #42)
#89 := (iff #86 #51)
#90 := [commutativity]: #89
#87 := (iff #62 #86)
#88 := [monotonicity #83]: #87
#92 := [trans #88 #90]: #91
#94 := [symm #92]: #93
#97 := [monotonicity #94]: #96
#98 := [mp #57 #97]: #95
#60 := (or #39 #62)
#58 := [def-axiom]: #60
#99 := [unit-resolution #58 #98]: #39
#101 := (or #82 #63 #66)
#102 := [th-lemma]: #101
#103 := [unit-resolution #102 #99 #81]: #82
#106 := [symm #103]: #105
#100 := [unit-resolution #59 #99]: #61
#104 := [symm #100]: #77
#108 := [trans #104 #106]: #107
#109 := [trans #108 #83]: #51
[unit-resolution #57 #109]: false
unsat
78432a7ec8ec5313cf1224b5d36cefc0e44a3f9a 55 0
#2 := false
#43 := 0::real
decl f4 :: real
#9 := f4
#56 := -3::real
#59 := (* -3::real f4)
decl f3 :: real
#8 := f3
#11 := 3::real
#12 := (* 3::real f3)
#60 := (+ #12 #59)
#58 := (>= #60 0::real)
#57 := (not #58)
#41 := -1::real
#45 := (* -1::real f4)
#46 := (+ f3 #45)
#44 := (>= #46 0::real)
#63 := (or #44 #57)
#66 := (not #63)
#13 := (* 3::real f4)
#14 := (< #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#69 := (iff #16 #66)
#34 := (not #10)
#35 := (or #34 #14)
#38 := (not #35)
#67 := (iff #38 #66)
#64 := (iff #35 #63)
#61 := (iff #14 #57)
#62 := [rewrite]: #61
#54 := (iff #34 #44)
#42 := (not #44)
#49 := (not #42)
#52 := (iff #49 #44)
#53 := [rewrite]: #52
#50 := (iff #34 #49)
#47 := (iff #10 #42)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#65 := [monotonicity #55 #62]: #64
#68 := [monotonicity #65]: #67
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#70 := [trans #40 #68]: #69
#33 := [asserted]: #16
#71 := [mp #33 #70]: #66
#73 := [not-or-elim #71]: #58
#72 := [not-or-elim #71]: #42
[th-lemma #72 #73]: false
unsat
16abee9f0675672a15a1cf601bbd7cd463542971 66 0
#2 := false
decl f3 :: real
#9 := f3
#8 := 0::real
#11 := (<= f3 0::real)
#12 := (ite #11 0::real f3)
#33 := (= f3 #12)
#84 := (= 0::real #12)
#78 := (= #12 0::real)
#68 := (not #33)
#50 := (>= f3 0::real)
#51 := (not #50)
#57 := (or #33 #51)
#62 := (not #57)
#13 := (= #12 f3)
#10 := (<= 0::real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#65 := (iff #15 #62)
#39 := (not #10)
#40 := (or #39 #33)
#45 := (not #40)
#63 := (iff #45 #62)
#60 := (iff #40 #57)
#54 := (or #51 #33)
#58 := (iff #54 #57)
#59 := [rewrite]: #58
#55 := (iff #40 #54)
#52 := (iff #39 #51)
#48 := (iff #10 #50)
#49 := [rewrite]: #48
#53 := [monotonicity #49]: #52
#56 := [monotonicity #53]: #55
#61 := [trans #56 #59]: #60
#64 := [monotonicity #61]: #63
#46 := (iff #15 #45)
#43 := (iff #14 #40)
#36 := (implies #10 #33)
#41 := (iff #36 #40)
#42 := [rewrite]: #41
#37 := (iff #14 #36)
#34 := (iff #13 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#44 := [trans #38 #42]: #43
#47 := [monotonicity #44]: #46
#66 := [trans #47 #64]: #65
#32 := [asserted]: #15
#67 := [mp #32 #66]: #62
#69 := [not-or-elim #67]: #68
#76 := (or #11 #33)
#77 := [def-axiom]: #76
#75 := [unit-resolution #77 #69]: #11
#79 := (not #11)
#80 := (or #79 #78)
#81 := [def-axiom]: #80
#73 := [unit-resolution #81 #75]: #78
#85 := [symm #73]: #84
#74 := (= f3 0::real)
#70 := [not-or-elim #67]: #50
#71 := (or #74 #79 #51)
#82 := [th-lemma]: #71
#83 := [unit-resolution #82 #75 #70]: #74
#86 := [trans #83 #85]: #33
[unit-resolution #69 #86]: false
unsat
6b577a8e26cad5ef5e776e0c3cf6f19a5beeec9c 52 0
#2 := false
#40 := 0::real
decl f4 :: real
#9 := f4
#38 := -1::real
#42 := (* -1::real f4)
decl f3 :: real
#8 := f3
#43 := (+ f3 #42)
#53 := (<= #43 0::real)
#66 := (not #53)
#41 := (>= #43 0::real)
#56 := (or #41 #53)
#59 := (not #56)
#11 := (<= f3 f4)
#10 := (< f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#62 := (iff #13 #59)
#31 := (not #10)
#32 := (or #31 #11)
#35 := (not #32)
#60 := (iff #35 #59)
#57 := (iff #32 #56)
#54 := (iff #11 #53)
#55 := [rewrite]: #54
#51 := (iff #31 #41)
#39 := (not #41)
#46 := (not #39)
#49 := (iff #46 #41)
#50 := [rewrite]: #49
#47 := (iff #31 #46)
#44 := (iff #10 #39)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#58 := [monotonicity #52 #55]: #57
#61 := [monotonicity #58]: #60
#36 := (iff #13 #35)
#33 := (iff #12 #32)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#63 := [trans #37 #61]: #62
#30 := [asserted]: #13
#64 := [mp #30 #63]: #59
#67 := [not-or-elim #64]: #66
#65 := [not-or-elim #64]: #39
#75 := (or #53 #41)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #65]: #53
[unit-resolution #77 #67]: false
unsat
69ba0c9fc19b8d967fe68219b563ee3645949198 228 0
#2 := false
#9 := 0::real
decl f4 :: real
#14 := f4
#40 := -1::real
#55 := (* -1::real f4)
#91 := (>= f4 0::real)
#98 := (ite #91 f4 #55)
#103 := (* -1::real #98)
#159 := (+ f4 #103)
#160 := (<= #159 0::real)
#134 := (= f4 #98)
decl f3 :: real
#8 := f3
#109 := (+ f3 #55)
#110 := (<= #109 0::real)
#113 := (ite #110 f4 f3)
#155 := (* -1::real #113)
#180 := (+ f3 #155)
#190 := (<= #180 0::real)
#146 := (= f3 #113)
#147 := (not #110)
#76 := (>= f3 0::real)
#161 := (+ #55 #103)
#179 := (<= #161 0::real)
#200 := (not #179)
#77 := (not #76)
#168 := [hypothesis]: #77
#145 := (= f4 #113)
#205 := (not #145)
#156 := (+ f4 #155)
#157 := (<= #156 0::real)
#176 := (not #157)
#188 := (or #176 #76)
#132 := (= #55 #98)
#92 := (not #91)
#174 := [hypothesis]: #157
#177 := (or #92 #176 #76)
#162 := [hypothesis]: #91
#141 := (or #92 #134)
#142 := [def-axiom]: #141
#163 := [unit-resolution #142 #162]: #134
#164 := (not #134)
#165 := (or #164 #160)
#166 := [th-lemma]: #165
#167 := [unit-resolution #166 #163]: #160
#41 := (* -1::real f3)
#83 := (ite #76 f3 #41)
#88 := (* -1::real #83)
#152 := (+ #41 #88)
#153 := (<= #152 0::real)
#138 := (= #41 #83)
#135 := (or #76 #138)
#136 := [def-axiom]: #135
#169 := [unit-resolution #136 #168]: #138
#170 := (not #138)
#171 := (or #170 #153)
#172 := [th-lemma]: #171
#173 := [unit-resolution #172 #169]: #153
#122 := (+ #98 #113)
#123 := (+ #83 #122)
#120 := (>= #123 0::real)
#126 := (not #120)
#19 := (<= f3 f4)
#20 := (ite #19 f4 f3)
#16 := (- f4)
#15 := (< f4 0::real)
#17 := (ite #15 #16 f4)
#11 := (- f3)
#10 := (< f3 0::real)
#12 := (ite #10 #11 f3)
#13 := (- #12)
#18 := (- #13 #17)
#21 := (<= #18 #20)
#22 := (not #21)
#129 := (iff #22 #126)
#58 := (ite #15 #55 f4)
#64 := (* -1::real #58)
#44 := (ite #10 #41 f3)
#50 := (* -1::real #44)
#65 := (+ #50 #64)
#70 := (<= #65 #20)
#73 := (not #70)
#127 := (iff #73 #126)
#124 := (iff #70 #120)
#106 := (+ #88 #103)
#116 := (<= #106 #113)
#119 := (iff #116 #120)
#121 := [rewrite]: #119
#117 := (iff #70 #116)
#114 := (= #20 #113)
#111 := (iff #19 #110)
#112 := [rewrite]: #111
#115 := [monotonicity #112]: #114
#107 := (= #65 #106)
#104 := (= #64 #103)
#101 := (= #58 #98)
#95 := (ite #92 #55 f4)
#99 := (= #95 #98)
#100 := [rewrite]: #99
#96 := (= #58 #95)
#93 := (iff #15 #92)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#102 := [trans #97 #100]: #101
#105 := [monotonicity #102]: #104
#89 := (= #50 #88)
#86 := (= #44 #83)
#80 := (ite #77 #41 f3)
#84 := (= #80 #83)
#85 := [rewrite]: #84
#81 := (= #44 #80)
#78 := (iff #10 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#108 := [monotonicity #90 #105]: #107
#118 := [monotonicity #108 #115]: #117
#125 := [trans #118 #121]: #124
#128 := [monotonicity #125]: #127
#74 := (iff #22 #73)
#71 := (iff #21 #70)
#68 := (= #18 #65)
#61 := (- #50 #58)
#66 := (= #61 #65)
#67 := [rewrite]: #66
#62 := (= #18 #61)
#59 := (= #17 #58)
#56 := (= #16 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#53 := (= #13 #50)
#47 := (- #44)
#51 := (= #47 #50)
#52 := [rewrite]: #51
#48 := (= #13 #47)
#45 := (= #12 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#54 := [trans #49 #52]: #53
#63 := [monotonicity #54 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#130 := [trans #75 #128]: #129
#39 := [asserted]: #22
#131 := [mp #39 #130]: #126
#175 := [th-lemma #162 #174 #131 #168 #173 #167]: false
#178 := [lemma #175]: #177
#181 := [unit-resolution #178 #174 #168]: #92
#143 := (or #91 #132)
#144 := [def-axiom]: #143
#182 := [unit-resolution #144 #181]: #132
#183 := (not #132)
#184 := (or #183 #179)
#185 := [th-lemma]: #184
#186 := [unit-resolution #185 #182]: #179
#187 := [th-lemma #174 #131 #168 #173 #186]: false
#189 := [lemma #187]: #188
#210 := [unit-resolution #189 #168]: #176
#206 := (or #205 #157)
#203 := [hypothesis]: #176
#204 := [hypothesis]: #145
#207 := [th-lemma]: #206
#208 := [unit-resolution #207 #204 #203]: false
#209 := [lemma #208]: #206
#211 := [unit-resolution #209 #210]: #205
#148 := (or #147 #145)
#149 := [def-axiom]: #148
#212 := [unit-resolution #149 #211]: #147
#201 := (or #110 #200 #76)
#192 := [hypothesis]: #147
#150 := (or #110 #146)
#151 := [def-axiom]: #150
#193 := [unit-resolution #151 #192]: #146
#194 := (not #146)
#195 := (or #194 #190)
#196 := [th-lemma]: #195
#197 := [unit-resolution #196 #193]: #190
#198 := [hypothesis]: #179
#199 := [th-lemma #131 #173 #198 #168 #192 #197]: false
#202 := [lemma #199]: #201
#213 := [unit-resolution #202 #212 #168]: #200
#214 := (or #92 #76 #110)
#215 := [th-lemma]: #214
#216 := [unit-resolution #215 #168 #212]: #92
#217 := [unit-resolution #144 #216]: #132
#218 := [unit-resolution #185 #217 #213]: false
#219 := [lemma #218]: #76
#222 := [hypothesis]: #92
#223 := (or #147 #77 #91)
#224 := [th-lemma]: #223
#225 := [unit-resolution #224 #222 #219]: #147
#226 := [unit-resolution #151 #225]: #146
#227 := [unit-resolution #196 #226]: #190
#228 := [unit-resolution #144 #222]: #132
#229 := [unit-resolution #185 #228]: #179
#154 := (+ f3 #88)
#158 := (<= #154 0::real)
#137 := (= f3 #83)
#139 := (or #77 #137)
#140 := [def-axiom]: #139
#230 := [unit-resolution #140 #219]: #137
#231 := (not #137)
#232 := (or #231 #158)
#233 := [th-lemma]: #232
#234 := [unit-resolution #233 #230]: #158
#235 := [th-lemma #219 #131 #234 #229 #225 #227]: false
#236 := [lemma #235]: #91
#237 := [unit-resolution #142 #236]: #134
#238 := [unit-resolution #166 #237]: #160
#239 := (not #160)
#240 := (or #179 #239 #92)
#241 := [th-lemma]: #240
#242 := [unit-resolution #241 #236 #238]: #179
#243 := (not #158)
#244 := (or #176 #77 #120 #243 #200)
#245 := [th-lemma]: #244
#246 := [unit-resolution #245 #242 #219 #131 #234]: #176
#247 := [unit-resolution #209 #246]: #205
#248 := [unit-resolution #149 #247]: #147
#249 := [unit-resolution #151 #248]: #146
#250 := [unit-resolution #196 #249]: #190
[th-lemma #236 #250 #131 #234 #248 #238]: false
unsat
581344987966d0feefc7d25de982e0418835e698 15 0
#2 := false
decl f3 :: real
#8 := f3
#9 := (< f3 f3)
#10 := (not #9)
#11 := (not #10)
#33 := (iff #11 false)
#31 := (iff #9 false)
#32 := [rewrite]: #31
#29 := (iff #11 #9)
#30 := [rewrite]: #29
#34 := [trans #30 #32]: #33
#28 := [asserted]: #11
[mp #28 #34]: false
unsat
62951481b86f3e786793e2f93fd5e340a23eb081 75 0
#2 := false
#53 := 0::real
decl f4 :: real
#9 := f4
#50 := -1::real
#64 := (* -1::real f4)
decl f3 :: real
#8 := f3
#65 := (+ f3 #64)
#66 := (<= #65 0::real)
#69 := (not #66)
decl f5 :: real
#11 := f5
#51 := (* -1::real f5)
#60 := (+ f3 #51)
#61 := (<= #60 0::real)
#52 := (+ f4 #51)
#54 := (<= #52 0::real)
#57 := (not #54)
#78 := (or #57 #61 #69)
#83 := (not #78)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#86 := (iff #16 #83)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#84 := (iff #47 #83)
#81 := (iff #42 #78)
#72 := (or #57 #61)
#75 := (or #69 #72)
#79 := (iff #75 #78)
#80 := [rewrite]: #79
#76 := (iff #42 #75)
#73 := (iff #35 #72)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#58 := (iff #34 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#74 := [monotonicity #59 #63]: #73
#70 := (iff #41 #69)
#67 := (iff #10 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [monotonicity #71 #74]: #76
#82 := [trans #77 #80]: #81
#85 := [monotonicity #82]: #84
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#87 := [trans #49 #85]: #86
#33 := [asserted]: #16
#88 := [mp #33 #87]: #83
#92 := [not-or-elim #88]: #66
#90 := (not #61)
#91 := [not-or-elim #88]: #90
#89 := [not-or-elim #88]: #54
[th-lemma #89 #91 #92]: false
unsat
0af1c435b2c76daa9283b9e1b16e38657d180db7 80 0
#2 := false
#53 := 0::real
decl f4 :: real
#9 := f4
#50 := -1::real
#66 := (* -1::real f4)
decl f3 :: real
#8 := f3
#67 := (+ f3 #66)
#65 := (>= #67 0::real)
#64 := (not #65)
decl f5 :: real
#11 := f5
#51 := (* -1::real f5)
#60 := (+ f3 #51)
#61 := (<= #60 0::real)
#52 := (+ f4 #51)
#54 := (<= #52 0::real)
#57 := (not #54)
#83 := (or #57 #61 #65)
#88 := (not #83)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#91 := (iff #16 #88)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#89 := (iff #47 #88)
#86 := (iff #42 #83)
#77 := (or #57 #61)
#80 := (or #65 #77)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #42 #80)
#78 := (iff #35 #77)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#58 := (iff #34 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#79 := [monotonicity #59 #63]: #78
#75 := (iff #41 #65)
#70 := (not #64)
#73 := (iff #70 #65)
#74 := [rewrite]: #73
#71 := (iff #41 #70)
#68 := (iff #10 #64)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#82 := [monotonicity #76 #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#92 := [trans #49 #90]: #91
#33 := [asserted]: #16
#93 := [mp #33 #92]: #88
#97 := [not-or-elim #93]: #64
#95 := (not #61)
#96 := [not-or-elim #93]: #95
#94 := [not-or-elim #93]: #54
[th-lemma #94 #96 #97]: false
unsat
bc24b7127bf1ebd5e05fa62d67103e609bbd595b 80 0
#2 := false
#52 := 0::real
decl f4 :: real
#9 := f4
#50 := -1::real
#69 := (* -1::real f4)
decl f3 :: real
#8 := f3
#70 := (+ f3 #69)
#71 := (<= #70 0::real)
#74 := (not #71)
decl f5 :: real
#11 := f5
#54 := (* -1::real f5)
#65 := (+ f3 #54)
#66 := (<= #65 0::real)
#55 := (+ f4 #54)
#53 := (>= #55 0::real)
#83 := (or #53 #66 #74)
#88 := (not #83)
#13 := (<= f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#91 := (iff #16 #88)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#89 := (iff #47 #88)
#86 := (iff #42 #83)
#77 := (or #53 #66)
#80 := (or #74 #77)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #42 #80)
#78 := (iff #35 #77)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#63 := (iff #34 #53)
#51 := (not #53)
#58 := (not #51)
#61 := (iff #58 #53)
#62 := [rewrite]: #61
#59 := (iff #34 #58)
#56 := (iff #12 #51)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#79 := [monotonicity #64 #68]: #78
#75 := (iff #41 #74)
#72 := (iff #10 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [monotonicity #76 #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#92 := [trans #49 #90]: #91
#33 := [asserted]: #16
#93 := [mp #33 #92]: #88
#97 := [not-or-elim #93]: #71
#94 := [not-or-elim #93]: #51
#95 := (not #66)
#96 := [not-or-elim #93]: #95
[th-lemma #96 #94 #97]: false
unsat
3aeb9c9a0e29e2bb76776c94f5a20ea84ac742ba 43 0
#2 := false
decl f5 :: (-> S2 S2 S3)
#15 := (:var 0 S2)
#14 := (:var 1 S2)
#16 := (f5 #14 #15)
#561 := (pattern #16)
decl f4 :: (-> S3 S2)
#17 := (f4 #16)
#47 := (= #14 #17)
#562 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #561) #47)
#50 := (forall (vars (?v0 S2) (?v1 S2)) #47)
#565 := (iff #50 #562)
#563 := (iff #47 #47)
#564 := [refl]: #563
#566 := [quant-intro #564]: #565
#83 := (~ #50 #50)
#81 := (~ #47 #47)
#82 := [refl]: #81
#84 := [nnf-pos #82]: #83
#18 := (= #17 #14)
#19 := (forall (vars (?v0 S2) (?v1 S2)) #18)
#51 := (iff #19 #50)
#48 := (iff #18 #47)
#49 := [rewrite]: #48
#52 := [quant-intro #49]: #51
#46 := [asserted]: #19
#55 := [mp #46 #52]: #50
#73 := [mp~ #55 #84]: #50
#567 := [mp #73 #566]: #562
decl f6 :: S2
#9 := f6
decl f3 :: S2
#8 := f3
#10 := (f5 f3 f6)
#11 := (f4 #10)
#12 := (= f3 #11)
#13 := (not #12)
#45 := [asserted]: #13
#144 := (not #562)
#231 := (or #144 #12)
#145 := [quant-inst]: #231
[unit-resolution #145 #45 #567]: false
unsat
3ea988e6f95dbd7bd08d11a287c40acf0b4bd08d 85 0
#2 := false
#52 := 0::real
decl f4 :: real
#9 := f4
#50 := -1::real
#72 := (* -1::real f4)
decl f3 :: real
#8 := f3
#73 := (+ f3 #72)
#71 := (>= #73 0::real)
#70 := (not #71)
decl f5 :: real
#11 := f5
#54 := (* -1::real f5)
#67 := (+ f3 #54)
#66 := (>= #67 0::real)
#65 := (not #66)
#55 := (+ f4 #54)
#53 := (>= #55 0::real)
#89 := (or #53 #65 #71)
#94 := (not #89)
#13 := (< f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#97 := (iff #16 #94)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#95 := (iff #47 #94)
#92 := (iff #42 #89)
#83 := (or #53 #65)
#86 := (or #71 #83)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #42 #86)
#84 := (iff #35 #83)
#68 := (iff #13 #65)
#69 := [rewrite]: #68
#63 := (iff #34 #53)
#51 := (not #53)
#58 := (not #51)
#61 := (iff #58 #53)
#62 := [rewrite]: #61
#59 := (iff #34 #58)
#56 := (iff #12 #51)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#85 := [monotonicity #64 #69]: #84
#81 := (iff #41 #71)
#76 := (not #70)
#79 := (iff #76 #71)
#80 := [rewrite]: #79
#77 := (iff #41 #76)
#74 := (iff #10 #70)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#88 := [monotonicity #82 #85]: #87
#93 := [trans #88 #91]: #92
#96 := [monotonicity #93]: #95
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#98 := [trans #49 #96]: #97
#33 := [asserted]: #16
#99 := [mp #33 #98]: #94
#102 := [not-or-elim #99]: #70
#100 := [not-or-elim #99]: #51
#101 := [not-or-elim #99]: #66
[th-lemma #101 #100 #102]: false
unsat
833f5435eb8a2a79499caa251090162736238118 43 0
#2 := false
decl f5 :: (-> S2 S2 S3)
#15 := (:var 0 S2)
#14 := (:var 1 S2)
#16 := (f5 #14 #15)
#561 := (pattern #16)
decl f4 :: (-> S3 S2)
#20 := (f4 #16)
#54 := (= #15 #20)
#568 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #561) #54)
#58 := (forall (vars (?v0 S2) (?v1 S2)) #54)
#571 := (iff #58 #568)
#569 := (iff #54 #54)
#570 := [refl]: #569
#572 := [quant-intro #570]: #571
#75 := (~ #58 #58)
#74 := (~ #54 #54)
#72 := [refl]: #74
#76 := [nnf-pos #72]: #75
#21 := (= #20 #15)
#22 := (forall (vars (?v0 S2) (?v1 S2)) #21)
#59 := (iff #22 #58)
#56 := (iff #21 #54)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#53 := [asserted]: #22
#63 := [mp #53 #60]: #58
#69 := [mp~ #63 #76]: #58
#573 := [mp #69 #572]: #568
decl f3 :: S2
#8 := f3
decl f6 :: S2
#9 := f6
#10 := (f5 f6 f3)
#11 := (f4 #10)
#12 := (= f3 #11)
#13 := (not #12)
#45 := [asserted]: #13
#234 := (not #568)
#235 := (or #234 #12)
#163 := [quant-inst]: #235
[unit-resolution #163 #45 #573]: false
unsat
fa7bd11236791d7e4e69f14295f0dacac77cd667 69 0
#2 := false
#44 := 0::real
decl f5 :: real
#11 := f5
#42 := -1::real
#51 := (* -1::real f5)
decl f3 :: real
#8 := f3
#62 := (+ f3 #51)
#63 := (<= #62 0::real)
#64 := (not #63)
decl f4 :: real
#9 := f4
#52 := (+ f4 #51)
#50 := (>= #52 0::real)
#53 := (not #50)
#46 := (* -1::real f4)
#47 := (+ f3 #46)
#45 := (>= #47 0::real)
#43 := (not #45)
#56 := (and #43 #53)
#59 := (not #56)
#74 := (or #59 #63)
#77 := (not #74)
#14 := (< f5 f3)
#15 := (not #14)
#12 := (< f4 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (not #16)
#80 := (iff #17 #77)
#35 := (not #13)
#36 := (or #35 #15)
#39 := (not #36)
#78 := (iff #39 #77)
#75 := (iff #36 #74)
#72 := (iff #15 #63)
#67 := (not #64)
#70 := (iff #67 #63)
#71 := [rewrite]: #70
#68 := (iff #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#60 := (iff #35 #59)
#57 := (iff #13 #56)
#54 := (iff #12 #53)
#55 := [rewrite]: #54
#48 := (iff #10 #43)
#49 := [rewrite]: #48
#58 := [monotonicity #49 #55]: #57
#61 := [monotonicity #58]: #60
#76 := [monotonicity #61 #73]: #75
#79 := [monotonicity #76]: #78
#40 := (iff #17 #39)
#37 := (iff #16 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#81 := [trans #41 #79]: #80
#34 := [asserted]: #17
#82 := [mp #34 #81]: #77
#86 := [not-or-elim #82]: #64
#83 := [not-or-elim #82]: #56
#84 := [and-elim #83]: #43
#85 := [and-elim #83]: #53
[th-lemma #85 #84 #86]: false
unsat
8b890c6b59495e349b21aa4197ae112481a22f92 85 0
#2 := false
decl f5 :: S2
#9 := f5
decl f4 :: S2
#8 := f4
#13 := (= f4 f5)
decl f6 :: (-> S3 S2)
decl f3 :: (-> S2 S2 S3)
#11 := (f3 f5 f4)
#349 := (f6 #11)
#548 := (= #349 f5)
#556 := (= f5 #349)
#17 := (:var 0 S2)
#16 := (:var 1 S2)
#18 := (f3 #16 #17)
#568 := (pattern #18)
#19 := (f6 #18)
#53 := (= #16 #19)
#569 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #568) #53)
#57 := (forall (vars (?v0 S2) (?v1 S2)) #53)
#572 := (iff #57 #569)
#570 := (iff #53 #53)
#571 := [refl]: #570
#573 := [quant-intro #571]: #572
#90 := (~ #57 #57)
#88 := (~ #53 #53)
#89 := [refl]: #88
#91 := [nnf-pos #89]: #90
#20 := (= #19 #16)
#21 := (forall (vars (?v0 S2) (?v1 S2)) #20)
#58 := (iff #21 #57)
#55 := (iff #20 #53)
#56 := [rewrite]: #55
#59 := [quant-intro #56]: #58
#52 := [asserted]: #21
#62 := [mp #52 #59]: #57
#80 := [mp~ #62 #91]: #57
#574 := [mp #80 #573]: #569
#560 := (not #569)
#566 := (or #560 #556)
#561 := [quant-inst]: #566
#207 := [unit-resolution #561 #574]: #556
#549 := [symm #207]: #548
#544 := (= f4 #349)
#10 := (f3 f4 f5)
#243 := (f6 #10)
#546 := (= #243 #349)
#12 := (= #10 #11)
#559 := (= #11 #10)
#48 := (not #12)
#567 := [hypothesis]: #48
#238 := (or #13 #12)
#49 := (iff #13 #48)
#14 := (iff #12 #13)
#15 := (not #14)
#50 := (iff #15 #49)
#51 := [rewrite]: #50
#47 := [asserted]: #15
#54 := [mp #47 #51]: #49
#150 := (not #49)
#237 := (or #13 #12 #150)
#151 := [def-axiom]: #237
#152 := [unit-resolution #151 #54]: #238
#557 := [unit-resolution #152 #567]: #13
#558 := (= f5 f4)
#216 := [symm #557]: #558
#200 := [monotonicity #216 #557]: #559
#543 := [symm #200]: #12
#204 := [unit-resolution #567 #543]: false
#205 := [lemma #204]: #12
#547 := [monotonicity #205]: #546
#240 := (= f4 #243)
#562 := (or #560 #240)
#217 := [quant-inst]: #562
#545 := [unit-resolution #217 #574]: #240
#550 := [trans #545 #547]: #544
#186 := [trans #550 #549]: #13
#239 := (not #13)
#242 := (or #239 #48)
#230 := (or #239 #48 #150)
#241 := [def-axiom]: #230
#170 := [unit-resolution #241 #54]: #242
#206 := [unit-resolution #170 #205]: #239
[unit-resolution #206 #186]: false
unsat
21d7570da3e83b6c75740a6708991286b46b2be1 155 0
#2 := false
decl f7 :: S2
#12 := f7
decl f5 :: S2
#9 := f5
#16 := (= f5 f7)
#100 := (not #16)
decl f6 :: S2
#11 := f6
decl f4 :: S2
#8 := f4
#15 := (= f4 f6)
#99 := (not #15)
#90 := (or #99 #100)
decl f3 :: (-> S2 S2 S3)
#13 := (f3 f6 f7)
#10 := (f3 f4 f5)
#14 := (= #10 #13)
#91 := (not #90)
#240 := [hypothesis]: #91
#175 := (or #90 #16)
#262 := [def-axiom]: #175
#228 := [unit-resolution #262 #240]: #16
#174 := (or #90 #15)
#261 := [def-axiom]: #174
#229 := [unit-resolution #261 #240]: #15
#230 := [monotonicity #229 #228]: #14
#52 := (not #14)
#247 := (or #52 #90)
#111 := (iff #14 #90)
#17 := (and #15 #16)
#53 := (iff #17 #52)
#114 := (iff #53 #111)
#106 := (iff #90 #14)
#112 := (iff #106 #111)
#113 := [rewrite]: #112
#109 := (iff #53 #106)
#103 := (iff #91 #52)
#107 := (iff #103 #106)
#108 := [rewrite]: #107
#104 := (iff #53 #103)
#101 := (iff #17 #91)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#110 := [trans #105 #108]: #109
#115 := [trans #110 #113]: #114
#18 := (iff #14 #17)
#19 := (not #18)
#54 := (iff #19 #53)
#55 := [rewrite]: #54
#51 := [asserted]: #19
#58 := [mp #51 #55]: #53
#116 := [mp #58 #115]: #111
#254 := (not #111)
#264 := (or #52 #90 #254)
#268 := [def-axiom]: #264
#584 := [unit-resolution #268 #116]: #247
#583 := [unit-resolution #584 #240]: #52
#231 := [unit-resolution #583 #230]: false
#569 := [lemma #231]: #90
decl f8 :: (-> S3 S2)
#588 := (f8 #13)
#574 := (= #588 f6)
#589 := (= f6 #588)
#21 := (:var 0 S2)
#20 := (:var 1 S2)
#22 := (f3 #20 #21)
#592 := (pattern #22)
#23 := (f8 #22)
#57 := (= #20 #23)
#593 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #592) #57)
#61 := (forall (vars (?v0 S2) (?v1 S2)) #57)
#596 := (iff #61 #593)
#594 := (iff #57 #57)
#595 := [refl]: #594
#597 := [quant-intro #595]: #596
#94 := (~ #61 #61)
#92 := (~ #57 #57)
#93 := [refl]: #92
#95 := [nnf-pos #93]: #94
#24 := (= #23 #20)
#25 := (forall (vars (?v0 S2) (?v1 S2)) #24)
#62 := (iff #25 #61)
#59 := (iff #24 #57)
#60 := [rewrite]: #59
#63 := [quant-intro #60]: #62
#56 := [asserted]: #25
#66 := [mp #56 #63]: #61
#84 := [mp~ #66 #95]: #61
#598 := [mp #84 #597]: #593
#252 := (not #593)
#244 := (or #252 #589)
#582 := [quant-inst]: #244
#570 := [unit-resolution #582 #598]: #589
#210 := [symm #570]: #574
#575 := (= f4 #588)
#586 := (f8 #10)
#573 := (= #586 #588)
#194 := (or #14 #91)
#265 := (or #14 #91 #254)
#266 := [def-axiom]: #265
#267 := [unit-resolution #266 #116]: #194
#571 := [unit-resolution #267 #569]: #14
#568 := [monotonicity #571]: #573
#241 := (= f4 #586)
#253 := (or #252 #241)
#587 := [quant-inst]: #253
#572 := [unit-resolution #587 #598]: #241
#577 := [trans #572 #568]: #575
#215 := [trans #577 #210]: #15
decl f9 :: (-> S3 S2)
#581 := (f9 #13)
#565 := (= #581 f7)
#239 := (= f7 #581)
#26 := (f9 #22)
#65 := (= #21 #26)
#599 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #592) #65)
#69 := (forall (vars (?v0 S2) (?v1 S2)) #65)
#602 := (iff #69 #599)
#600 := (iff #65 #65)
#601 := [refl]: #600
#603 := [quant-intro #601]: #602
#86 := (~ #69 #69)
#85 := (~ #65 #65)
#83 := [refl]: #85
#87 := [nnf-pos #83]: #86
#27 := (= #26 #21)
#28 := (forall (vars (?v0 S2) (?v1 S2)) #27)
#70 := (iff #28 #69)
#67 := (iff #27 #65)
#68 := [rewrite]: #67
#71 := [quant-intro #68]: #70
#64 := [asserted]: #28
#74 := [mp #64 #71]: #69
#80 := [mp~ #74 #87]: #69
#604 := [mp #80 #603]: #599
#590 := (not #599)
#224 := (or #590 #239)
#567 := [quant-inst]: #224
#216 := [unit-resolution #567 #604]: #239
#566 := [symm #216]: #565
#272 := (= f5 #581)
#373 := (f9 #10)
#576 := (= #373 #581)
#579 := [monotonicity #571]: #576
#580 := (= f5 #373)
#585 := (or #590 #580)
#591 := [quant-inst]: #585
#578 := [unit-resolution #591 #604]: #580
#288 := [trans #578 #579]: #272
#289 := [trans #288 #566]: #16
#176 := (or #91 #99 #100)
#263 := [def-axiom]: #176
[unit-resolution #263 #289 #215 #569]: false
unsat
3a10723d79463b83d231ba1fcb5ffec2e0721a2e 91 0
#2 := false
decl f9 :: S3
#14 := f9
decl f5 :: S3
#8 := f5
#21 := (= f5 f9)
decl f3 :: (-> S2 S3)
decl f4 :: (-> S3 S4 S2)
decl f6 :: (-> S3 S5 S4)
decl f11 :: S5
#16 := f11
decl f10 :: S3
#15 := f10
#17 := (f6 f10 f11)
#18 := (f4 f9 #17)
#19 := (f3 #18)
decl f8 :: S5
#10 := f8
decl f7 :: S3
#9 := f7
#11 := (f6 f7 f8)
#12 := (f4 f5 #11)
#13 := (f3 #12)
#20 := (= #13 #19)
#22 := (iff #20 #21)
#324 := (iff #21 #20)
#603 := (= f9 #19)
#30 := (:var 0 S4)
#24 := (:var 1 S3)
#31 := (f4 #24 #30)
#635 := (pattern #31)
#32 := (f3 #31)
#82 := (= #24 #32)
#636 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #635) #82)
#86 := (forall (vars (?v0 S3) (?v1 S4)) #82)
#639 := (iff #86 #636)
#637 := (iff #82 #82)
#638 := [refl]: #637
#640 := [quant-intro #638]: #639
#127 := (~ #86 #86)
#126 := (~ #82 #82)
#124 := [refl]: #126
#128 := [nnf-pos #124]: #127
#33 := (= #32 #24)
#34 := (forall (vars (?v0 S3) (?v1 S4)) #33)
#87 := (iff #34 #86)
#84 := (iff #33 #82)
#85 := [rewrite]: #84
#88 := [quant-intro #85]: #87
#81 := [asserted]: #34
#91 := [mp #81 #88]: #86
#121 := [mp~ #91 #128]: #86
#641 := [mp #121 #640]: #636
#276 := (not #636)
#606 := (or #276 #603)
#607 := [quant-inst]: #606
#602 := [unit-resolution #607 #641]: #603
#627 := (= f5 #13)
#619 := (or #276 #627)
#260 := [quant-inst]: #619
#308 := [unit-resolution #260 #641]: #627
#325 := [monotonicity #308 #602]: #324
#326 := [symm #325]: #22
#299 := (not #21)
#69 := (not #20)
#312 := (iff #69 #299)
#327 := [monotonicity #326]: #312
#614 := [hypothesis]: #69
#218 := [mp #614 #327]: #299
#298 := (or #21 #20)
#70 := (iff #21 #69)
#23 := (not #22)
#71 := (iff #23 #70)
#72 := [rewrite]: #71
#68 := [asserted]: #23
#75 := [mp #68 #72]: #70
#210 := (not #70)
#297 := (or #21 #20 #210)
#211 := [def-axiom]: #297
#212 := [unit-resolution #211 #75]: #298
#612 := [unit-resolution #212 #614]: #21
#597 := [unit-resolution #612 #218]: false
#598 := [lemma #597]: #20
#321 := [mp #598 #326]: #21
#302 := (or #299 #69)
#290 := (or #299 #69 #210)
#301 := [def-axiom]: #290
#230 := [unit-resolution #301 #75]: #302
#320 := [unit-resolution #230 #598]: #299
[unit-resolution #320 #321]: false
unsat
41219eaede1dcbc709d171a52e3a33f173c7cf67 210 0
#2 := false
decl f11 :: S5
#16 := f11
decl f8 :: S5
#10 := f8
#22 := (= f8 f11)
#158 := (not #22)
decl f10 :: S4
#15 := f10
decl f7 :: S4
#9 := f7
#21 := (= f7 f10)
#157 := (not #21)
#139 := (or #157 #158)
decl f3 :: (-> S2 S3)
decl f4 :: (-> S4 S3 S2)
decl f6 :: (-> S4 S5 S3)
#17 := (f6 f10 f11)
decl f9 :: S4
#14 := f9
#18 := (f4 f9 #17)
#19 := (f3 #18)
#11 := (f6 f7 f8)
decl f5 :: S4
#8 := f5
#12 := (f4 f5 #11)
#13 := (f3 #12)
#20 := (= #13 #19)
#626 := (= #17 #19)
#32 := (:var 0 S3)
#26 := (:var 1 S4)
#33 := (f4 #26 #32)
#657 := (pattern #33)
#40 := (f3 #33)
#100 := (= #32 #40)
#670 := (forall (vars (?v0 S4) (?v1 S3)) (:pat #657) #100)
#104 := (forall (vars (?v0 S4) (?v1 S3)) #100)
#673 := (iff #104 #670)
#671 := (iff #100 #100)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#133 := (~ #104 #104)
#148 := (~ #100 #100)
#149 := [refl]: #148
#134 := [nnf-pos #149]: #133
#41 := (= #40 #32)
#42 := (forall (vars (?v0 S4) (?v1 S3)) #41)
#105 := (iff #42 #104)
#102 := (iff #41 #100)
#103 := [rewrite]: #102
#106 := [quant-intro #103]: #105
#99 := [asserted]: #42
#109 := [mp #99 #106]: #104
#150 := [mp~ #109 #134]: #104
#675 := [mp #150 #674]: #670
#629 := (not #670)
#273 := (or #629 #626)
#274 := [quant-inst]: #273
#334 := [unit-resolution #274 #675]: #626
#621 := (= #13 #17)
#343 := (= #11 #17)
#140 := (not #139)
#330 := [hypothesis]: #140
#233 := (or #139 #22)
#320 := [def-axiom]: #233
#349 := [unit-resolution #320 #330]: #22
#232 := (or #139 #21)
#319 := [def-axiom]: #232
#240 := [unit-resolution #319 #330]: #21
#617 := [monotonicity #240 #349]: #343
#620 := (= #13 #11)
#286 := (= #11 #13)
#630 := (or #629 #286)
#631 := [quant-inst]: #630
#619 := [unit-resolution #631 #675]: #286
#342 := [symm #619]: #620
#618 := [trans #342 #617]: #621
#622 := [trans #618 #334]: #20
#71 := (not #20)
#305 := (or #71 #139)
#169 := (iff #20 #139)
#23 := (and #21 #22)
#72 := (iff #23 #71)
#172 := (iff #72 #169)
#164 := (iff #139 #20)
#170 := (iff #164 #169)
#171 := [rewrite]: #170
#167 := (iff #72 #164)
#161 := (iff #140 #71)
#165 := (iff #161 #164)
#166 := [rewrite]: #165
#162 := (iff #72 #161)
#159 := (iff #23 #140)
#160 := [rewrite]: #159
#163 := [monotonicity #160]: #162
#168 := [trans #163 #166]: #167
#173 := [trans #168 #171]: #172
#24 := (iff #20 #23)
#25 := (not #24)
#73 := (iff #25 #72)
#74 := [rewrite]: #73
#70 := [asserted]: #25
#77 := [mp #70 #74]: #72
#174 := [mp #77 #173]: #169
#312 := (not #169)
#322 := (or #71 #139 #312)
#326 := [def-axiom]: #322
#642 := [unit-resolution #326 #174]: #305
#346 := [unit-resolution #642 #330]: #71
#331 := [unit-resolution #346 #622]: false
#332 := [lemma #331]: #139
decl f12 :: (-> S3 S4)
#646 := (f12 #17)
#606 := (= #646 f10)
#647 := (= f10 #646)
#27 := (:var 0 S5)
#28 := (f6 #26 #27)
#650 := (pattern #28)
#29 := (f12 #28)
#76 := (= #26 #29)
#651 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #650) #76)
#80 := (forall (vars (?v0 S4) (?v1 S5)) #76)
#654 := (iff #80 #651)
#652 := (iff #76 #76)
#653 := [refl]: #652
#655 := [quant-intro #653]: #654
#143 := (~ #80 #80)
#141 := (~ #76 #76)
#142 := [refl]: #141
#144 := [nnf-pos #142]: #143
#30 := (= #29 #26)
#31 := (forall (vars (?v0 S4) (?v1 S5)) #30)
#81 := (iff #31 #80)
#78 := (iff #30 #76)
#79 := [rewrite]: #78
#82 := [quant-intro #79]: #81
#75 := [asserted]: #31
#85 := [mp #75 #82]: #80
#127 := [mp~ #85 #144]: #80
#656 := [mp #127 #655]: #651
#310 := (not #651)
#302 := (or #310 #647)
#640 := [quant-inst]: #302
#333 := [unit-resolution #640 #656]: #647
#607 := [symm #333]: #606
#602 := (= f7 #646)
#644 := (f12 #11)
#616 := (= #644 #646)
#613 := (= #19 #17)
#614 := [symm #334]: #613
#327 := (= #11 #19)
#252 := (or #20 #140)
#323 := (or #20 #140 #312)
#324 := [def-axiom]: #323
#325 := [unit-resolution #324 #174]: #252
#335 := [unit-resolution #325 #332]: #20
#611 := [trans #619 #335]: #327
#615 := [trans #611 #614]: #343
#605 := [monotonicity #615]: #616
#299 := (= f7 #644)
#311 := (or #310 #299)
#645 := [quant-inst]: #311
#612 := [unit-resolution #645 #656]: #299
#603 := [trans #612 #605]: #602
#608 := [trans #603 #607]: #21
decl f14 :: (-> S3 S5)
#639 := (f14 #17)
#452 := (= #639 f11)
#297 := (= f11 #639)
#37 := (f14 #28)
#92 := (= #27 #37)
#664 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #650) #92)
#96 := (forall (vars (?v0 S4) (?v1 S5)) #92)
#667 := (iff #96 #664)
#665 := (iff #92 #92)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#131 := (~ #96 #96)
#145 := (~ #92 #92)
#146 := [refl]: #145
#132 := [nnf-pos #146]: #131
#38 := (= #37 #27)
#39 := (forall (vars (?v0 S4) (?v1 S5)) #38)
#97 := (iff #39 #96)
#94 := (iff #38 #92)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#91 := [asserted]: #39
#101 := [mp #91 #98]: #96
#147 := [mp~ #101 #132]: #96
#669 := [mp #147 #668]: #664
#648 := (not #664)
#282 := (or #648 #297)
#625 := [quant-inst]: #282
#609 := [unit-resolution #625 #669]: #297
#453 := [symm #609]: #452
#595 := (= f8 #639)
#431 := (f14 #11)
#610 := (= #431 #639)
#451 := [monotonicity #615]: #610
#638 := (= f8 #431)
#643 := (or #648 #638)
#649 := [quant-inst]: #643
#604 := [unit-resolution #649 #669]: #638
#596 := [trans #604 #451]: #595
#597 := [trans #596 #453]: #22
#234 := (or #140 #157 #158)
#321 := [def-axiom]: #234
[unit-resolution #321 #597 #608 #332]: false
unsat
e7d7ee57f96345ce1235238d825e8494a21738fc 144 0
#2 := false
decl f11 :: S3
#16 := f11
decl f8 :: S3
#9 := f8
#23 := (= f8 f11)
decl f3 :: (-> S2 S3)
decl f4 :: (-> S4 S2)
decl f5 :: (-> S3 S2 S4)
decl f7 :: (-> S3 S5 S2)
decl f12 :: S5
#17 := f12
#18 := (f7 f11 f12)
decl f10 :: S3
#15 := f10
#19 := (f5 f10 #18)
#20 := (f4 #19)
#21 := (f3 #20)
decl f9 :: S5
#10 := f9
#11 := (f7 f8 f9)
decl f6 :: S3
#8 := f6
#12 := (f5 f6 #11)
#13 := (f4 #12)
#14 := (f3 #13)
#22 := (= #14 #21)
#24 := (iff #22 #23)
#315 := (= #21 f11)
#411 := (f3 #18)
#312 := (= #411 f11)
#618 := (= f11 #411)
#27 := (:var 0 S5)
#26 := (:var 1 S3)
#28 := (f7 #26 #27)
#630 := (pattern #28)
#29 := (f3 #28)
#76 := (= #26 #29)
#631 := (forall (vars (?v0 S3) (?v1 S5)) (:pat #630) #76)
#80 := (forall (vars (?v0 S3) (?v1 S5)) #76)
#634 := (iff #80 #631)
#632 := (iff #76 #76)
#633 := [refl]: #632
#635 := [quant-intro #633]: #634
#143 := (~ #80 #80)
#141 := (~ #76 #76)
#142 := [refl]: #141
#144 := [nnf-pos #142]: #143
#30 := (= #29 #26)
#31 := (forall (vars (?v0 S3) (?v1 S5)) #30)
#81 := (iff #31 #80)
#78 := (iff #30 #76)
#79 := [rewrite]: #78
#82 := [quant-intro #79]: #81
#75 := [asserted]: #31
#85 := [mp #75 #82]: #80
#127 := [mp~ #85 #144]: #80
#636 := [mp #127 #635]: #631
#622 := (not #631)
#628 := (or #622 #618)
#623 := [quant-inst]: #628
#323 := [unit-resolution #623 #636]: #618
#313 := [symm #323]: #312
#602 := (= #21 #411)
#601 := (= #20 #18)
#607 := (= #18 #20)
#32 := (:var 0 S2)
#33 := (f5 #26 #32)
#637 := (pattern #33)
#40 := (f4 #33)
#100 := (= #32 #40)
#650 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #637) #100)
#104 := (forall (vars (?v0 S3) (?v1 S2)) #100)
#653 := (iff #104 #650)
#651 := (iff #100 #100)
#652 := [refl]: #651
#654 := [quant-intro #652]: #653
#133 := (~ #104 #104)
#148 := (~ #100 #100)
#149 := [refl]: #148
#134 := [nnf-pos #149]: #133
#41 := (= #40 #32)
#42 := (forall (vars (?v0 S3) (?v1 S2)) #41)
#105 := (iff #42 #104)
#102 := (iff #41 #100)
#103 := [rewrite]: #102
#106 := [quant-intro #103]: #105
#99 := [asserted]: #42
#109 := [mp #99 #106]: #104
#150 := [mp~ #109 #134]: #104
#655 := [mp #150 #654]: #650
#267 := (not #650)
#606 := (or #267 #607)
#612 := [quant-inst]: #606
#597 := [unit-resolution #612 #655]: #607
#598 := [symm #597]: #601
#311 := [monotonicity #598]: #602
#593 := [trans #311 #313]: #315
#587 := (= #14 f8)
#305 := (f3 #11)
#585 := (= #305 f8)
#302 := (= f8 #305)
#624 := (or #622 #302)
#279 := [quant-inst]: #624
#594 := [unit-resolution #279 #636]: #302
#586 := [symm #594]: #585
#592 := (= #14 #305)
#591 := (= #13 #11)
#620 := (= #11 #13)
#268 := (or #267 #620)
#269 := [quant-inst]: #268
#307 := [unit-resolution #269 #655]: #620
#595 := [symm #307]: #591
#596 := [monotonicity #595]: #592
#582 := [trans #596 #586]: #587
#583 := [monotonicity #582 #593]: #24
#301 := (not #23)
#71 := (not #22)
#588 := (iff #71 #301)
#589 := [monotonicity #583]: #588
#220 := [hypothesis]: #71
#584 := [mp #220 #589]: #301
#300 := (or #23 #22)
#72 := (iff #23 #71)
#25 := (not #24)
#73 := (iff #25 #72)
#74 := [rewrite]: #73
#70 := [asserted]: #25
#77 := [mp #70 #74]: #72
#212 := (not #72)
#299 := (or #23 #22 #212)
#213 := [def-axiom]: #299
#214 := [unit-resolution #213 #77]: #300
#599 := [unit-resolution #214 #220]: #23
#590 := [unit-resolution #599 #584]: false
#431 := [lemma #590]: #22
#433 := [mp #431 #583]: #23
#304 := (or #301 #71)
#292 := (or #301 #71 #212)
#303 := [def-axiom]: #292
#232 := [unit-resolution #303 #77]: #304
#432 := [unit-resolution #232 #431]: #301
[unit-resolution #432 #433]: false
unsat
05084d48ca9cf46fab3aa08abec156f92f6b3e83 144 0
#2 := false
decl f12 :: S3
#17 := f12
decl f9 :: S3
#10 := f9
#23 := (= f9 f12)
decl f3 :: (-> S2 S3)
decl f4 :: (-> S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f7 :: (-> S5 S3 S2)
decl f11 :: S5
#16 := f11
#18 := (f7 f11 f12)
decl f10 :: S5
#15 := f10
#19 := (f5 f10 #18)
#20 := (f4 #19)
#21 := (f3 #20)
decl f8 :: S5
#9 := f8
#11 := (f7 f8 f9)
decl f6 :: S5
#8 := f6
#12 := (f5 f6 #11)
#13 := (f4 #12)
#14 := (f3 #13)
#22 := (= #14 #21)
#24 := (iff #22 #23)
#315 := (= #21 f12)
#626 := (f3 #18)
#312 := (= #626 f12)
#627 := (= f12 #626)
#27 := (:var 0 S3)
#26 := (:var 1 S5)
#28 := (f7 #26 #27)
#630 := (pattern #28)
#37 := (f3 #28)
#92 := (= #27 #37)
#644 := (forall (vars (?v0 S5) (?v1 S3)) (:pat #630) #92)
#96 := (forall (vars (?v0 S5) (?v1 S3)) #92)
#647 := (iff #96 #644)
#645 := (iff #92 #92)
#646 := [refl]: #645
#648 := [quant-intro #646]: #647
#131 := (~ #96 #96)
#145 := (~ #92 #92)
#146 := [refl]: #145
#132 := [nnf-pos #146]: #131
#38 := (= #37 #27)
#39 := (forall (vars (?v0 S5) (?v1 S3)) #38)
#97 := (iff #39 #96)
#94 := (iff #38 #92)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#91 := [asserted]: #39
#101 := [mp #91 #98]: #96
#147 := [mp~ #101 #132]: #96
#649 := [mp #147 #648]: #644
#290 := (not #644)
#277 := (or #290 #627)
#282 := [quant-inst]: #277
#323 := [unit-resolution #282 #649]: #627
#313 := [symm #323]: #312
#602 := (= #21 #626)
#601 := (= #20 #18)
#607 := (= #18 #20)
#32 := (:var 0 S2)
#33 := (f5 #26 #32)
#637 := (pattern #33)
#40 := (f4 #33)
#100 := (= #32 #40)
#650 := (forall (vars (?v0 S5) (?v1 S2)) (:pat #637) #100)
#104 := (forall (vars (?v0 S5) (?v1 S2)) #100)
#653 := (iff #104 #650)
#651 := (iff #100 #100)
#652 := [refl]: #651
#654 := [quant-intro #652]: #653
#133 := (~ #104 #104)
#148 := (~ #100 #100)
#149 := [refl]: #148
#134 := [nnf-pos #149]: #133
#41 := (= #40 #32)
#42 := (forall (vars (?v0 S5) (?v1 S2)) #41)
#105 := (iff #42 #104)
#102 := (iff #41 #100)
#103 := [rewrite]: #102
#106 := [quant-intro #103]: #105
#99 := [asserted]: #42
#109 := [mp #99 #106]: #104
#150 := [mp~ #109 #134]: #104
#655 := [mp #150 #654]: #650
#267 := (not #650)
#606 := (or #267 #607)
#612 := [quant-inst]: #606
#597 := [unit-resolution #612 #655]: #607
#598 := [symm #597]: #601
#311 := [monotonicity #598]: #602
#593 := [trans #311 #313]: #315
#587 := (= #14 f9)
#306 := (f3 #11)
#585 := (= #306 f9)
#285 := (= f9 #306)
#291 := (or #290 #285)
#625 := [quant-inst]: #291
#594 := [unit-resolution #625 #649]: #285
#586 := [symm #594]: #585
#592 := (= #14 #306)
#591 := (= #13 #11)
#620 := (= #11 #13)
#268 := (or #267 #620)
#269 := [quant-inst]: #268
#307 := [unit-resolution #269 #655]: #620
#595 := [symm #307]: #591
#596 := [monotonicity #595]: #592
#582 := [trans #596 #586]: #587
#583 := [monotonicity #582 #593]: #24
#301 := (not #23)
#71 := (not #22)
#588 := (iff #71 #301)
#589 := [monotonicity #583]: #588
#220 := [hypothesis]: #71
#584 := [mp #220 #589]: #301
#300 := (or #23 #22)
#72 := (iff #23 #71)
#25 := (not #24)
#73 := (iff #25 #72)
#74 := [rewrite]: #73
#70 := [asserted]: #25
#77 := [mp #70 #74]: #72
#212 := (not #72)
#299 := (or #23 #22 #212)
#213 := [def-axiom]: #299
#214 := [unit-resolution #213 #77]: #300
#599 := [unit-resolution #214 #220]: #23
#590 := [unit-resolution #599 #584]: false
#431 := [lemma #590]: #22
#433 := [mp #431 #583]: #23
#304 := (or #301 #71)
#292 := (or #301 #71 #212)
#303 := [def-axiom]: #292
#232 := [unit-resolution #303 #77]: #304
#432 := [unit-resolution #232 #431]: #301
[unit-resolution #432 #433]: false
unsat
b9b01af627407ae858abb87a30d0e6558ef2eead 103 0
#2 := false
decl f6 :: S3
#9 := f6
decl f5 :: S3
#8 := f5
#14 := (= f5 f6)
decl f7 :: (-> S2 S3)
decl f4 :: (-> S3 S3 S2)
#10 := (f4 f5 f6)
#12 := (f7 #10)
decl f3 :: (-> S2 S3)
#11 := (f3 #10)
#13 := (= #11 #12)
#15 := (iff #13 #14)
#558 := (iff #14 #13)
#241 := (= f6 #12)
#18 := (:var 0 S3)
#17 := (:var 1 S3)
#19 := (f4 #17 #18)
#569 := (pattern #19)
#23 := (f7 #19)
#62 := (= #18 #23)
#576 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #569) #62)
#66 := (forall (vars (?v0 S3) (?v1 S3)) #62)
#579 := (iff #66 #576)
#577 := (iff #62 #62)
#578 := [refl]: #577
#580 := [quant-intro #578]: #579
#83 := (~ #66 #66)
#82 := (~ #62 #62)
#80 := [refl]: #82
#84 := [nnf-pos #80]: #83
#24 := (= #23 #18)
#25 := (forall (vars (?v0 S3) (?v1 S3)) #24)
#67 := (iff #25 #66)
#64 := (iff #24 #62)
#65 := [rewrite]: #64
#68 := [quant-intro #65]: #67
#61 := [asserted]: #25
#71 := [mp #61 #68]: #66
#77 := [mp~ #71 #84]: #66
#581 := [mp #77 #580]: #576
#350 := (not #576)
#557 := (or #350 #241)
#229 := [quant-inst]: #557
#562 := [unit-resolution #229 #581]: #241
#244 := (= f5 #11)
#20 := (f3 #19)
#54 := (= #17 #20)
#570 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #569) #54)
#58 := (forall (vars (?v0 S3) (?v1 S3)) #54)
#573 := (iff #58 #570)
#571 := (iff #54 #54)
#572 := [refl]: #571
#574 := [quant-intro #572]: #573
#91 := (~ #58 #58)
#89 := (~ #54 #54)
#90 := [refl]: #89
#92 := [nnf-pos #90]: #91
#21 := (= #20 #17)
#22 := (forall (vars (?v0 S3) (?v1 S3)) #21)
#59 := (iff #22 #58)
#56 := (iff #21 #54)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#53 := [asserted]: #22
#63 := [mp #53 #60]: #58
#81 := [mp~ #63 #92]: #58
#575 := [mp #81 #574]: #570
#224 := (not #570)
#561 := (or #224 #244)
#563 := [quant-inst]: #561
#568 := [unit-resolution #563 #575]: #244
#216 := [monotonicity #568 #562]: #558
#221 := [symm #216]: #15
#240 := (not #14)
#49 := (not #13)
#559 := (iff #49 #240)
#217 := [monotonicity #221]: #559
#230 := [hypothesis]: #49
#560 := [mp #230 #217]: #240
#239 := (or #14 #13)
#50 := (iff #14 #49)
#16 := (not #15)
#51 := (iff #16 #50)
#52 := [rewrite]: #51
#48 := [asserted]: #16
#55 := [mp #48 #52]: #50
#151 := (not #50)
#238 := (or #14 #13 #151)
#152 := [def-axiom]: #238
#153 := [unit-resolution #152 #55]: #239
#564 := [unit-resolution #153 #230]: #14
#201 := [unit-resolution #564 #560]: false
#544 := [lemma #201]: #13
#206 := [mp #544 #221]: #14
#243 := (or #240 #49)
#231 := (or #240 #49 #151)
#242 := [def-axiom]: #231
#171 := [unit-resolution #242 #55]: #243
#205 := [unit-resolution #171 #544]: #240
[unit-resolution #205 #206]: false
unsat
27f36608f534be1341919c1ca51bc62461483549 111 0
#2 := false
decl f9 :: (-> S2 S3)
decl f7 :: S2
#13 := f7
#18 := (f9 f7)
decl f8 :: (-> S2 S3)
decl f3 :: S2
#8 := f3
#17 := (f8 f3)
#19 := (= #17 #18)
decl f4 :: (-> S3 S3 S2)
decl f5 :: S3
#9 := f5
decl f6 :: S3
#10 := f6
#14 := (f4 f6 f5)
#258 := (f9 #14)
#220 := (= #258 #18)
#230 := (= #18 #258)
#15 := (= f7 #14)
#11 := (f4 f5 f6)
#12 := (= f3 #11)
#16 := (and #12 #15)
#54 := (not #16)
#55 := (or #54 #19)
#58 := (not #55)
#20 := (implies #16 #19)
#21 := (not #20)
#59 := (iff #21 #58)
#56 := (iff #20 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#53 := [asserted]: #21
#63 := [mp #53 #60]: #58
#61 := [not-or-elim #63]: #16
#64 := [and-elim #61]: #15
#573 := [monotonicity #64]: #230
#221 := [symm #573]: #220
#561 := (= #17 #258)
#237 := (= f5 #258)
#23 := (:var 0 S3)
#22 := (:var 1 S3)
#24 := (f4 #22 #23)
#582 := (pattern #24)
#28 := (f9 #24)
#75 := (= #23 #28)
#589 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #582) #75)
#79 := (forall (vars (?v0 S3) (?v1 S3)) #75)
#592 := (iff #79 #589)
#590 := (iff #75 #75)
#591 := [refl]: #590
#593 := [quant-intro #591]: #592
#100 := (~ #79 #79)
#99 := (~ #75 #75)
#96 := [refl]: #99
#101 := [nnf-pos #96]: #100
#29 := (= #28 #23)
#30 := (forall (vars (?v0 S3) (?v1 S3)) #29)
#80 := (iff #30 #79)
#77 := (iff #29 #75)
#78 := [rewrite]: #77
#81 := [quant-intro #78]: #80
#74 := [asserted]: #30
#84 := [mp #74 #81]: #79
#97 := [mp~ #84 #101]: #79
#594 := [mp #97 #593]: #589
#184 := (not #589)
#570 := (or #184 #237)
#242 := [quant-inst]: #570
#581 := [unit-resolution #242 #594]: #237
#559 := (= #17 f5)
#164 := (f8 #11)
#218 := (= #164 f5)
#251 := (= f5 #164)
#25 := (f8 #24)
#68 := (= #22 #25)
#583 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #582) #68)
#71 := (forall (vars (?v0 S3) (?v1 S3)) #68)
#586 := (iff #71 #583)
#584 := (iff #68 #68)
#585 := [refl]: #584
#587 := [quant-intro #585]: #586
#108 := (~ #71 #71)
#106 := (~ #68 #68)
#107 := [refl]: #106
#109 := [nnf-pos #107]: #108
#26 := (= #25 #22)
#27 := (forall (vars (?v0 S3) (?v1 S3)) #26)
#72 := (iff #27 #71)
#69 := (iff #26 #68)
#70 := [rewrite]: #69
#73 := [quant-intro #70]: #72
#67 := [asserted]: #27
#76 := [mp #67 #73]: #71
#98 := [mp~ #76 #109]: #71
#588 := [mp #98 #587]: #583
#166 := (not #583)
#253 := (or #166 #251)
#244 := [quant-inst]: #253
#575 := [unit-resolution #244 #588]: #251
#219 := [symm #575]: #218
#234 := (= #17 #164)
#62 := [and-elim #61]: #12
#572 := [monotonicity #62]: #234
#560 := [trans #572 #219]: #559
#562 := [trans #560 #581]: #561
#563 := [trans #562 #221]: #19
#65 := (not #19)
#66 := [not-or-elim #63]: #65
[unit-resolution #66 #563]: false
unsat
37ed3b448ab9c39e3b6673cc263e2847f1d1a0a1 117 0
#2 := false
decl f6 :: (-> S3 S3 S2)
decl f3 :: (-> S2 S3)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
decl f5 :: (-> S2 S3)
#10 := (f5 f4)
#12 := (f6 #10 #9)
#13 := (= f4 #12)
#349 := (f6 #9 #10)
#550 := (= #349 #12)
#549 := (= #12 #349)
#11 := (= #9 #10)
#243 := (f3 #12)
#543 := (= #243 #10)
#240 := (= #10 #243)
#17 := (:var 0 S3)
#16 := (:var 1 S3)
#18 := (f6 #16 #17)
#568 := (pattern #18)
#19 := (f3 #18)
#53 := (= #16 #19)
#569 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #568) #53)
#57 := (forall (vars (?v0 S3) (?v1 S3)) #53)
#572 := (iff #57 #569)
#570 := (iff #53 #53)
#571 := [refl]: #570
#573 := [quant-intro #571]: #572
#90 := (~ #57 #57)
#88 := (~ #53 #53)
#89 := [refl]: #88
#91 := [nnf-pos #89]: #90
#20 := (= #19 #16)
#21 := (forall (vars (?v0 S3) (?v1 S3)) #20)
#58 := (iff #21 #57)
#55 := (iff #20 #53)
#56 := [rewrite]: #55
#59 := [quant-intro #56]: #58
#52 := [asserted]: #21
#62 := [mp #52 #59]: #57
#80 := [mp~ #62 #91]: #57
#574 := [mp #80 #573]: #569
#560 := (not #569)
#562 := (or #560 #240)
#217 := [quant-inst]: #562
#220 := [unit-resolution #217 #574]: #240
#204 := [symm #220]: #543
#559 := (= #9 #243)
#558 := (= #243 #9)
#557 := (= #12 f4)
#48 := (not #11)
#564 := [hypothesis]: #48
#238 := (or #13 #11)
#49 := (iff #13 #48)
#14 := (iff #11 #13)
#15 := (not #14)
#50 := (iff #15 #49)
#51 := [rewrite]: #50
#47 := [asserted]: #15
#54 := [mp #47 #51]: #49
#150 := (not #49)
#237 := (or #13 #11 #150)
#151 := [def-axiom]: #237
#152 := [unit-resolution #151 #54]: #238
#565 := [unit-resolution #152 #564]: #13
#215 := [symm #565]: #557
#216 := [monotonicity #215]: #558
#200 := [symm #216]: #559
#205 := [trans #200 #204]: #11
#206 := [unit-resolution #564 #205]: false
#207 := [lemma #206]: #11
#546 := (= #10 #9)
#547 := [symm #207]: #546
#544 := [monotonicity #547 #207]: #549
#186 := [symm #544]: #550
#556 := (= f4 #349)
#25 := (:var 0 S2)
#27 := (f5 #25)
#582 := (pattern #27)
#26 := (f3 #25)
#581 := (pattern #26)
#28 := (f6 #26 #27)
#69 := (= #25 #28)
#583 := (forall (vars (?v0 S2)) (:pat #581 #582) #69)
#73 := (forall (vars (?v0 S2)) #69)
#586 := (iff #73 #583)
#584 := (iff #69 #69)
#585 := [refl]: #584
#587 := [quant-intro #585]: #586
#84 := (~ #73 #73)
#92 := (~ #69 #69)
#93 := [refl]: #92
#85 := [nnf-pos #93]: #84
#29 := (= #28 #25)
#30 := (forall (vars (?v0 S2)) #29)
#74 := (iff #30 #73)
#71 := (iff #29 #69)
#72 := [rewrite]: #71
#75 := [quant-intro #72]: #74
#68 := [asserted]: #30
#78 := [mp #68 #75]: #73
#94 := [mp~ #78 #85]: #73
#588 := [mp #94 #587]: #583
#566 := (not #583)
#561 := (or #566 #556)
#567 := [quant-inst]: #561
#548 := [unit-resolution #567 #588]: #556
#551 := [trans #548 #186]: #13
#239 := (not #13)
#242 := (or #239 #48)
#230 := (or #239 #48 #150)
#241 := [def-axiom]: #230
#170 := [unit-resolution #241 #54]: #242
#545 := [unit-resolution #170 #207]: #239
[unit-resolution #545 #551]: false
unsat
