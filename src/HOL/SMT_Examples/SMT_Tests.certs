d4b1481d70f20d4d6280999633c905e21d180d13 8 0
#2 := false
#1 := true
#8 := (not true)
#26 := (iff #8 false)
#27 := [rewrite]: #26
#25 := [asserted]: #8
[mp #25 #27]: false
unsat
a38979487be0aafcf2d387180e92dfd3bd43e483 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (or #9 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#30 := (= f1 f3)
#33 := (not #30)
#36 := (or #30 #33)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 #33)
#31 := (iff #9 #30)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#38 := [monotonicity #32 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
ac5b1925e47f9c59b180fdccd321c68a4a01a710 16 0
#2 := false
#8 := (not false)
#9 := (not #8)
#34 := (iff #9 false)
#1 := true
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
b2faf72eaa234b8ac1acedfef5768f99ca3da86b 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (and #9 #10)
#12 := (not #11)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#44 := (not false)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #12 #44)
#42 := (iff #11 false)
#31 := (= f1 f3)
#34 := (not #31)
#37 := (and #31 #34)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#32 := (iff #9 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#39 := [monotonicity #33 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#30 := [asserted]: #13
[mp #30 #57]: false
unsat
b13645ce0b47b432b924b38e0bebde6cbcb236f9 21 0
#2 := false
#1 := true
#8 := (not true)
#9 := (not #8)
#10 := (not #9)
#39 := (iff #10 false)
#28 := (iff #8 false)
#29 := [rewrite]: #28
#37 := (iff #10 #8)
#35 := (iff #9 true)
#30 := (not false)
#33 := (iff #30 true)
#34 := [rewrite]: #33
#31 := (iff #9 #30)
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#38 := [monotonicity #36]: #37
#40 := [trans #38 #29]: #39
#27 := [asserted]: #10
[mp #27 #40]: false
unsat
fa3a2c67c2833da196c4009cb283e94a9f22829b 65 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and false #9)
#13 := (or #12 #9)
#11 := (not #9)
#14 := (or #11 #13)
#1 := true
#10 := (and true #9)
#15 := (or #10 #14)
#16 := (not #15)
#80 := (iff #16 false)
#75 := (not true)
#78 := (iff #75 false)
#79 := [rewrite]: #78
#76 := (iff #16 #75)
#73 := (iff #15 true)
#34 := (= f1 f3)
#68 := (or #34 true)
#71 := (iff #68 true)
#72 := [rewrite]: #71
#69 := (iff #15 #68)
#66 := (iff #14 true)
#44 := (not #34)
#61 := (or #44 #34)
#64 := (iff #61 true)
#65 := [rewrite]: #64
#62 := (iff #14 #61)
#59 := (iff #13 #34)
#54 := (or false #34)
#57 := (iff #54 #34)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#52 := (iff #12 false)
#47 := (and false #34)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#49 := [monotonicity #36]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53 #36]: #55
#60 := [trans #56 #58]: #59
#45 := (iff #11 #44)
#46 := [monotonicity #36]: #45
#63 := [monotonicity #46 #60]: #62
#67 := [trans #63 #65]: #66
#42 := (iff #10 #34)
#37 := (and true #34)
#40 := (iff #37 #34)
#41 := [rewrite]: #40
#38 := (iff #10 #37)
#39 := [monotonicity #36]: #38
#43 := [trans #39 #41]: #42
#70 := [monotonicity #43 #67]: #69
#74 := [trans #70 #72]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#33 := [asserted]: #16
[mp #33 #81]: false
unsat
8ec60d0baade8bddd39b6e00ec153f6bd8949184 16 0
#2 := false
#1 := true
#8 := (and true true)
#9 := (not #8)
#34 := (iff #9 false)
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
85a9b542a9c6d64e778f2449f892d6d55e153689 29 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (implies #9 #9)
#11 := (not #10)
#44 := (iff #11 false)
#1 := true
#39 := (not true)
#42 := (iff #39 false)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 true)
#29 := (= f1 f3)
#32 := (implies #29 #29)
#35 := (iff #32 true)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#30 := (iff #9 #29)
#31 := [rewrite]: #30
#34 := [monotonicity #31 #31]: #33
#38 := [trans #34 #36]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#28 := [asserted]: #11
[mp #28 #45]: false
unsat
b448617db1567a507fc596f5b21ade645ca6e0f9 16 0
#2 := false
#1 := true
#8 := (or true false)
#9 := (not #8)
#34 := (iff #9 false)
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
a21434fdffa6243cc7410eb0aff669b84c5be474 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (and #9 #10)
#12 := (implies #11 false)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#44 := (implies false false)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #12 #44)
#42 := (iff #11 false)
#31 := (= f1 f3)
#34 := (not #31)
#37 := (and #31 #34)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#32 := (iff #9 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#39 := [monotonicity #33 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#30 := [asserted]: #13
[mp #30 #57]: false
unsat
bf545ecaa58049cbf454eac70ee3077f64564cca 16 0
#2 := false
#1 := true
#8 := (implies false true)
#9 := (not #8)
#34 := (iff #9 false)
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
a6a664cc4c3ff45fb3211b72c0f520208b902c9b 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (and #11 #9)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#61 := (iff #15 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #15 #56)
#54 := (iff #14 true)
#36 := (= f1 f4)
#33 := (= f1 f3)
#39 := (and #33 #36)
#49 := (implies #39 #39)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #14 #49)
#47 := (iff #13 #39)
#42 := (and #36 #33)
#45 := (iff #42 #39)
#46 := [rewrite]: #45
#43 := (iff #13 #42)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #35]: #43
#48 := [trans #44 #46]: #47
#40 := (iff #12 #39)
#41 := [monotonicity #35 #38]: #40
#51 := [monotonicity #41 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#32 := [asserted]: #15
[mp #32 #62]: false
unsat
9a169ba4d23a9080465edad5616230c8b4e1ef98 149 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#44 := (= f1 f5)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (ite #38 #41 #44)
#53 := (not #38)
#54 := (or #53 #41)
#64 := (or #38 #44)
#91 := (not #64)
#90 := (not #54)
#92 := (or #90 #91)
#143 := [hypothesis]: #90
#128 := (or #92 #54)
#129 := [def-axiom]: #128
#144 := [unit-resolution #129 #143]: #92
#78 := (not #47)
#116 := (or #54 #38)
#117 := [def-axiom]: #116
#145 := [unit-resolution #117 #143]: #38
#110 := (not #41)
#118 := (or #54 #110)
#119 := [def-axiom]: #118
#146 := [unit-resolution #119 #143]: #110
#106 := (or #78 #53 #41)
#107 := [def-axiom]: #106
#147 := [unit-resolution #107 #146 #145]: #78
#93 := (not #92)
#137 := (or #47 #93)
#100 := (iff #47 #92)
#69 := (and #54 #64)
#79 := (iff #69 #78)
#103 := (iff #79 #100)
#95 := (iff #92 #47)
#101 := (iff #95 #100)
#102 := [rewrite]: #101
#98 := (iff #79 #95)
#87 := (iff #93 #78)
#96 := (iff #87 #95)
#97 := [rewrite]: #96
#84 := (iff #79 #87)
#88 := (iff #69 #93)
#89 := [rewrite]: #88
#94 := [monotonicity #89]: #84
#99 := [trans #94 #97]: #98
#104 := [trans #99 #102]: #103
#13 := (= f5 f1)
#9 := (= f3 f1)
#16 := (not #9)
#17 := (implies #16 #13)
#11 := (= f4 f1)
#15 := (implies #9 #11)
#18 := (and #15 #17)
#14 := (ite #9 #11 #13)
#19 := (iff #14 #18)
#20 := (not #19)
#82 := (iff #20 #79)
#72 := (iff #47 #69)
#75 := (not #72)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #20 #75)
#73 := (iff #19 #72)
#70 := (iff #18 #69)
#67 := (iff #17 #64)
#61 := (implies #53 #44)
#65 := (iff #61 #64)
#66 := [rewrite]: #65
#62 := (iff #17 #61)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#59 := (iff #16 #53)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#60 := [monotonicity #40]: #59
#63 := [monotonicity #60 #46]: #62
#68 := [trans #63 #66]: #67
#57 := (iff #15 #54)
#50 := (implies #38 #41)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #15 #50)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#52 := [monotonicity #40 #43]: #51
#58 := [trans #52 #56]: #57
#71 := [monotonicity #58 #68]: #70
#48 := (iff #14 #47)
#49 := [monotonicity #40 #43 #46]: #48
#74 := [monotonicity #49 #71]: #73
#77 := [monotonicity #74]: #76
#83 := [trans #77 #81]: #82
#37 := [asserted]: #20
#86 := [mp #37 #83]: #79
#105 := [mp #86 #104]: #100
#134 := (not #100)
#135 := (or #47 #93 #134)
#136 := [def-axiom]: #135
#138 := [unit-resolution #136 #105]: #137
#148 := [unit-resolution #138 #147 #144]: false
#149 := [lemma #148]: #54
#150 := [hypothesis]: #78
#156 := (or #38 #47)
#151 := [unit-resolution #138 #150]: #93
#130 := (or #92 #64)
#131 := [def-axiom]: #130
#152 := [unit-resolution #131 #151]: #64
#153 := [hypothesis]: #53
#113 := (not #44)
#114 := (or #47 #38 #113)
#115 := [def-axiom]: #114
#154 := [unit-resolution #115 #153 #150]: #113
#126 := (or #91 #38 #44)
#127 := [def-axiom]: #126
#155 := [unit-resolution #127 #154 #153 #152]: false
#157 := [lemma #155]: #156
#158 := [unit-resolution #157 #150]: #38
#111 := (or #47 #53 #110)
#112 := [def-axiom]: #111
#159 := [unit-resolution #112 #158 #150]: #110
#120 := (or #90 #53 #41)
#121 := [def-axiom]: #120
#160 := [unit-resolution #121 #159 #158 #149]: false
#161 := [lemma #160]: #47
#141 := (or #78 #92)
#139 := (or #78 #92 #134)
#140 := [def-axiom]: #139
#142 := [unit-resolution #140 #105]: #141
#162 := [unit-resolution #142 #161]: #92
#132 := (or #93 #90 #91)
#133 := [def-axiom]: #132
#163 := [unit-resolution #133 #162 #149]: #91
#122 := (or #64 #53)
#123 := [def-axiom]: #122
#164 := [unit-resolution #123 #163]: #53
#124 := (or #64 #113)
#125 := [def-axiom]: #124
#165 := [unit-resolution #125 #163]: #113
#108 := (or #78 #38 #44)
#109 := [def-axiom]: #108
[unit-resolution #109 #165 #164 #161]: false
unsat
d99e41f56c960ba88eb8ca95c5a49bd2181a7626 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (or #11 #9)
#12 := (or #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#61 := (iff #15 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #15 #56)
#54 := (iff #14 true)
#36 := (= f1 f4)
#33 := (= f1 f3)
#39 := (or #33 #36)
#49 := (implies #39 #39)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #14 #49)
#47 := (iff #13 #39)
#42 := (or #36 #33)
#45 := (iff #42 #39)
#46 := [rewrite]: #45
#43 := (iff #13 #42)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #35]: #43
#48 := [trans #44 #46]: #47
#40 := (iff #12 #39)
#41 := [monotonicity #35 #38]: #40
#51 := [monotonicity #41 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#32 := [asserted]: #15
[mp #32 #62]: false
unsat
8d07b6d671ef5c9eedcaa35c22d5f1c7124504cb 66 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#33 := (= f1 f3)
#51 := (not #33)
#87 := [hypothesis]: #33
decl f4 :: S1
#10 := f4
#36 := (= f1 f4)
#42 := (not #36)
#43 := (or #33 #42)
#69 := (or #43 #51)
#70 := [def-axiom]: #69
#88 := [unit-resolution #70 #87]: #43
#67 := (not #43)
#89 := (or #51 #67)
#52 := (or #51 #36)
#57 := (ite #33 #43 #52)
#60 := (not #57)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (implies #9 #11)
#12 := (implies #11 #9)
#14 := (ite #9 #12 #13)
#15 := (not #14)
#61 := (iff #15 #60)
#58 := (iff #14 #57)
#55 := (iff #13 #52)
#48 := (implies #33 #36)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #13 #48)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#50 := [monotonicity #35 #38]: #49
#56 := [trans #50 #54]: #55
#46 := (iff #12 #43)
#39 := (implies #36 #33)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #12 #39)
#41 := [monotonicity #38 #35]: #40
#47 := [trans #41 #45]: #46
#59 := [monotonicity #35 #47 #56]: #58
#62 := [monotonicity #59]: #61
#32 := [asserted]: #15
#65 := [mp #32 #62]: #60
#83 := (or #57 #51 #67)
#84 := [def-axiom]: #83
#90 := [unit-resolution #84 #65]: #89
#91 := [unit-resolution #90 #88 #87]: false
#92 := [lemma #91]: #51
#63 := (or #52 #33)
#73 := [def-axiom]: #63
#93 := [unit-resolution #73 #92]: #52
#76 := (not #52)
#94 := (or #33 #76)
#85 := (or #57 #33 #76)
#86 := [def-axiom]: #85
#95 := [unit-resolution #86 #65]: #94
[unit-resolution #95 #93 #92]: false
unsat
a8e5086b6e21c7bf961a22426cb7ae14847089d7 55 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#33 := (= f1 f3)
#76 := (iff #33 false)
#66 := (not #33)
decl f4 :: S1
#10 := f4
#36 := (= f1 f4)
#39 := (and #33 #36)
#48 := (not #39)
#57 := (or #33 #36 #48)
#60 := (not #57)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (or #9 #11)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#63 := (iff #15 #60)
#42 := (or #33 #36)
#49 := (or #48 #42)
#54 := (not #49)
#61 := (iff #54 #60)
#58 := (iff #49 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#55 := (iff #15 #54)
#52 := (iff #14 #49)
#45 := (implies #39 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#44 := [monotonicity #35 #38]: #43
#40 := (iff #12 #39)
#41 := [monotonicity #35 #38]: #40
#47 := [monotonicity #41 #44]: #46
#53 := [trans #47 #51]: #52
#56 := [monotonicity #53]: #55
#64 := [trans #56 #62]: #63
#32 := [asserted]: #15
#65 := [mp #32 #64]: #60
#67 := [not-or-elim #65]: #66
#77 := [iff-false #67]: #76
#70 := [not-or-elim #65]: #39
#71 := [and-elim #70]: #33
[mp #71 #77]: false
unsat
415ad6a91bb75e131bb05d34f1965ab914825b25 67 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#18 := (ite #11 #14 #16)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#19 := (ite #9 #14 #18)
#12 := (or #9 #11)
#17 := (ite #12 #14 #16)
#20 := (iff #17 #19)
#21 := (not #20)
#79 := (iff #21 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #21 #74)
#72 := (iff #20 true)
#51 := (= f1 f6)
#48 := (= f1 f5)
#42 := (= f1 f4)
#39 := (= f1 f3)
#45 := (or #39 #42)
#54 := (ite #45 #48 #51)
#67 := (iff #54 #54)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #20 #67)
#65 := (iff #19 #54)
#57 := (ite #42 #48 #51)
#60 := (ite #39 #48 #57)
#63 := (iff #60 #54)
#64 := [rewrite]: #63
#61 := (iff #19 #60)
#58 := (iff #18 #57)
#52 := (iff #16 #51)
#53 := [rewrite]: #52
#49 := (iff #14 #48)
#50 := [rewrite]: #49
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#59 := [monotonicity #44 #50 #53]: #58
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#62 := [monotonicity #41 #50 #59]: #61
#66 := [trans #62 #64]: #65
#55 := (iff #17 #54)
#46 := (iff #12 #45)
#47 := [monotonicity #41 #44]: #46
#56 := [monotonicity #47 #50 #53]: #55
#69 := [monotonicity #56 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#38 := [asserted]: #21
[mp #38 #80]: false
unsat
e2d0843914ae918fb9bd06a2d6949232327217fa 55 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (or #9 #11)
#13 := (not #12)
#15 := (implies #13 #14)
#16 := (not #15)
#69 := (iff #16 false)
#37 := (= f1 f4)
#34 := (= f1 f3)
#40 := (or #34 #37)
#46 := (not #34)
#52 := (or #46 #40)
#57 := (not #52)
#67 := (iff #57 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #57 #62)
#60 := (iff #52 true)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#58 := (iff #16 #57)
#55 := (iff #15 #52)
#43 := (not #40)
#49 := (implies #43 #46)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#48 := [monotonicity #36]: #47
#44 := (iff #13 #43)
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #36 #39]: #41
#45 := [monotonicity #42]: #44
#51 := [monotonicity #45 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#70 := [trans #59 #68]: #69
#33 := [asserted]: #16
[mp #33 #70]: false
unsat
8b8741030ee2ece2c8d6b3906a1951bc56d9b885 67 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#18 := (ite #11 #14 #16)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#19 := (ite #9 #18 #16)
#12 := (and #9 #11)
#17 := (ite #12 #14 #16)
#20 := (iff #17 #19)
#21 := (not #20)
#79 := (iff #21 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #21 #74)
#72 := (iff #20 true)
#51 := (= f1 f6)
#48 := (= f1 f5)
#42 := (= f1 f4)
#39 := (= f1 f3)
#45 := (and #39 #42)
#54 := (ite #45 #48 #51)
#67 := (iff #54 #54)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #20 #67)
#65 := (iff #19 #54)
#57 := (ite #42 #48 #51)
#60 := (ite #39 #57 #51)
#63 := (iff #60 #54)
#64 := [rewrite]: #63
#61 := (iff #19 #60)
#52 := (iff #16 #51)
#53 := [rewrite]: #52
#58 := (iff #18 #57)
#49 := (iff #14 #48)
#50 := [rewrite]: #49
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#59 := [monotonicity #44 #50 #53]: #58
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#62 := [monotonicity #41 #59 #53]: #61
#66 := [trans #62 #64]: #65
#55 := (iff #17 #54)
#46 := (iff #12 #45)
#47 := [monotonicity #41 #44]: #46
#56 := [monotonicity #47 #50 #53]: #55
#69 := [monotonicity #56 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#38 := [asserted]: #21
[mp #38 #80]: false
unsat
00d9c16458cf2825e776c32505a513a412ede70f 55 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#14 := (not #11)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (not #12)
#15 := (implies #13 #14)
#16 := (not #15)
#69 := (iff #16 false)
#37 := (= f1 f4)
#34 := (= f1 f3)
#40 := (or #34 #37)
#46 := (not #37)
#52 := (or #46 #40)
#57 := (not #52)
#67 := (iff #57 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #57 #62)
#60 := (iff #52 true)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#58 := (iff #16 #57)
#55 := (iff #15 #52)
#43 := (not #40)
#49 := (implies #43 #46)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39]: #47
#44 := (iff #13 #43)
#41 := (iff #12 #40)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#42 := [monotonicity #36 #39]: #41
#45 := [monotonicity #42]: #44
#51 := [monotonicity #45 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#70 := [trans #59 #68]: #69
#33 := [asserted]: #16
[mp #33 #70]: false
unsat
a0ca672c65c25c024851f833f39bfb2c705ec387 186 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#59 := (not #41)
#76 := (or #59 #47)
#119 := (not #76)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#68 := (or #59 #44)
decl f6 :: S1
#14 := f6
#50 := (= f1 f6)
#84 := (or #59 #50)
#89 := (ite #68 #76 #84)
#130 := (not #89)
#53 := (ite #44 #47 #50)
#60 := (or #59 #53)
#112 := (not #44)
#165 := [hypothesis]: #112
#172 := (or #60 #44)
#98 := (not #60)
#163 := [hypothesis]: #98
#148 := (or #60 #41)
#149 := [def-axiom]: #148
#164 := [unit-resolution #149 #163]: #41
#124 := (not #50)
#139 := (not #53)
#150 := (or #60 #139)
#151 := [def-axiom]: #150
#166 := [unit-resolution #151 #163]: #139
#146 := (or #53 #44 #124)
#147 := [def-axiom]: #146
#167 := [unit-resolution #147 #166 #165]: #124
#157 := (or #89 #60)
#99 := (iff #89 #98)
#15 := (= f6 f1)
#9 := (= f3 f1)
#20 := (implies #9 #15)
#13 := (= f5 f1)
#19 := (implies #9 #13)
#11 := (= f4 f1)
#18 := (implies #9 #11)
#21 := (ite #18 #19 #20)
#16 := (ite #11 #13 #15)
#17 := (implies #9 #16)
#22 := (iff #17 #21)
#23 := (not #22)
#102 := (iff #23 #99)
#92 := (iff #60 #89)
#95 := (not #92)
#100 := (iff #95 #99)
#101 := [rewrite]: #100
#96 := (iff #23 #95)
#93 := (iff #22 #92)
#90 := (iff #21 #89)
#87 := (iff #20 #84)
#81 := (implies #41 #50)
#85 := (iff #81 #84)
#86 := [rewrite]: #85
#82 := (iff #20 #81)
#51 := (iff #15 #50)
#52 := [rewrite]: #51
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#83 := [monotonicity #43 #52]: #82
#88 := [trans #83 #86]: #87
#79 := (iff #19 #76)
#73 := (implies #41 #47)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #19 #73)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#75 := [monotonicity #43 #49]: #74
#80 := [trans #75 #78]: #79
#71 := (iff #18 #68)
#65 := (implies #41 #44)
#69 := (iff #65 #68)
#70 := [rewrite]: #69
#66 := (iff #18 #65)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#67 := [monotonicity #43 #46]: #66
#72 := [trans #67 #70]: #71
#91 := [monotonicity #72 #80 #88]: #90
#63 := (iff #17 #60)
#56 := (implies #41 #53)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #17 #56)
#54 := (iff #16 #53)
#55 := [monotonicity #46 #49 #52]: #54
#58 := [monotonicity #43 #55]: #57
#64 := [trans #58 #62]: #63
#94 := [monotonicity #64 #91]: #93
#97 := [monotonicity #94]: #96
#103 := [trans #97 #101]: #102
#40 := [asserted]: #23
#106 := [mp #40 #103]: #99
#154 := (not #99)
#155 := (or #89 #60 #154)
#156 := [def-axiom]: #155
#158 := [unit-resolution #156 #106]: #157
#168 := [unit-resolution #158 #163]: #89
#109 := (not #68)
#107 := (or #109 #59 #44)
#104 := [def-axiom]: #107
#169 := [unit-resolution #104 #164 #165]: #109
#133 := (or #130 #68 #84)
#134 := [def-axiom]: #133
#170 := [unit-resolution #134 #169 #168]: #84
#127 := (not #84)
#128 := (or #127 #59 #50)
#129 := [def-axiom]: #128
#171 := [unit-resolution #129 #170 #167 #164]: false
#173 := [lemma #171]: #172
#176 := [unit-resolution #173 #165]: #60
#161 := (or #130 #98)
#159 := (or #130 #98 #154)
#160 := [def-axiom]: #159
#162 := [unit-resolution #160 #106]: #161
#182 := [unit-resolution #162 #176]: #130
#180 := (or #84 #44)
#174 := [hypothesis]: #127
#125 := (or #84 #124)
#126 := [def-axiom]: #125
#175 := [unit-resolution #126 #174]: #124
#122 := (or #84 #41)
#123 := [def-axiom]: #122
#177 := [unit-resolution #123 #174]: #41
#152 := (or #98 #59 #53)
#153 := [def-axiom]: #152
#178 := [unit-resolution #153 #177 #176]: #53
#142 := (or #139 #44 #50)
#143 := [def-axiom]: #142
#179 := [unit-resolution #143 #178 #175 #165]: false
#181 := [lemma #179]: #180
#183 := [unit-resolution #181 #165]: #84
#137 := (or #89 #68 #127)
#138 := [def-axiom]: #137
#184 := [unit-resolution #138 #183 #182]: #68
#135 := (or #89 #109 #119)
#136 := [def-axiom]: #135
#185 := [unit-resolution #136 #184 #182]: #119
#186 := [unit-resolution #104 #184 #165]: #59
#114 := (or #76 #41)
#115 := [def-axiom]: #114
#187 := [unit-resolution #115 #186 #185]: false
#188 := [lemma #187]: #44
#113 := (or #68 #112)
#108 := [def-axiom]: #113
#191 := [unit-resolution #108 #188]: #68
#189 := [hypothesis]: #59
#190 := [unit-resolution #149 #189]: #60
#192 := [unit-resolution #115 #189]: #76
#193 := [unit-resolution #136 #192 #191]: #89
#194 := [unit-resolution #162 #193 #190]: false
#195 := [lemma #194]: #41
#116 := (not #47)
#144 := (or #53 #112 #116)
#145 := [def-axiom]: #144
#196 := [unit-resolution #145 #166 #188]: #116
#131 := (or #130 #109 #76)
#132 := [def-axiom]: #131
#197 := [unit-resolution #132 #168 #191]: #76
#120 := (or #119 #59 #47)
#121 := [def-axiom]: #120
#198 := [unit-resolution #121 #197 #196 #195]: false
#199 := [lemma #198]: #60
#200 := [unit-resolution #162 #199]: #130
#201 := [unit-resolution #136 #200 #191]: #119
#202 := [unit-resolution #153 #199 #195]: #53
#140 := (or #139 #112 #47)
#141 := [def-axiom]: #140
#203 := [unit-resolution #141 #202 #188]: #47
#117 := (or #76 #116)
#118 := [def-axiom]: #117
[unit-resolution #118 #203 #201]: false
unsat
bca31cbd8bb6114896c32a11dfae7025f2fc07b1 49 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#34 := (= f1 f3)
#68 := (iff #34 false)
#37 := (not #34)
decl f4 :: S1
#11 := f4
#40 := (= f1 f4)
#43 := (and #34 #40)
#46 := (not #43)
#52 := (or #34 #46)
#57 := (not #52)
#12 := (= f4 f1)
#9 := (= f3 f1)
#13 := (and #9 #12)
#14 := (not #13)
#10 := (not #9)
#15 := (implies #10 #14)
#16 := (not #15)
#58 := (iff #16 #57)
#55 := (iff #15 #52)
#49 := (implies #37 #46)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#41 := (iff #12 #40)
#42 := [rewrite]: #41
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#45 := [monotonicity #36 #42]: #44
#48 := [monotonicity #45]: #47
#38 := (iff #10 #37)
#39 := [monotonicity #36]: #38
#51 := [monotonicity #39 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#33 := [asserted]: #16
#62 := [mp #33 #59]: #57
#60 := [not-or-elim #62]: #37
#69 := [iff-false #60]: #68
#61 := [not-or-elim #62]: #43
#63 := [and-elim #61]: #34
[mp #63 #69]: false
unsat
f5031e01f448cd128a3cce562b470d23d1a8bc59 54 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#34 := (= f1 f3)
#73 := (iff #34 false)
#37 := (not #34)
decl f4 :: S1
#11 := f4
#40 := (= f1 f4)
#46 := (and #34 #40)
#51 := (not #46)
#57 := (or #34 #51)
#62 := (not #57)
#9 := (= f3 f1)
#12 := (= f4 f1)
#13 := (and #12 #9)
#14 := (not #13)
#10 := (not #9)
#15 := (implies #10 #14)
#16 := (not #15)
#63 := (iff #16 #62)
#60 := (iff #15 #57)
#54 := (implies #37 #51)
#58 := (iff #54 #57)
#59 := [rewrite]: #58
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#43 := (and #40 #34)
#47 := (iff #43 #46)
#48 := [rewrite]: #47
#44 := (iff #13 #43)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#41 := (iff #12 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42 #36]: #44
#50 := [trans #45 #48]: #49
#53 := [monotonicity #50]: #52
#38 := (iff #10 #37)
#39 := [monotonicity #36]: #38
#56 := [monotonicity #39 #53]: #55
#61 := [trans #56 #59]: #60
#64 := [monotonicity #61]: #63
#33 := [asserted]: #16
#67 := [mp #33 #64]: #62
#65 := [not-or-elim #67]: #37
#74 := [iff-false #65]: #73
#66 := [not-or-elim #67]: #46
#68 := [and-elim #66]: #34
[mp #68 #74]: false
unsat
6bcac7ed9b4a6f3af0933f64ee0cb316b51a44ed 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (ite #9 #9 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#30 := (= f1 f3)
#33 := (not #30)
#36 := (ite #30 #30 #33)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 #33)
#31 := (iff #9 #30)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#38 := [monotonicity #32 #32 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
38d7d5f12a8c933e456bba4a04c7645f4c87ea49 60 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#39 := (= f1 f4)
#48 := (not #39)
decl f3 :: S1
#8 := f3
#36 := (= f1 f3)
#45 := (not #36)
#51 := (or #45 #48)
#42 := (and #36 #39)
#64 := (iff #42 #51)
#71 := (iff #64 false)
#54 := (not #51)
#75 := (iff #54 #51)
#72 := (iff #75 false)
#73 := [rewrite]: #72
#76 := (iff #64 #75)
#57 := (iff #42 #54)
#74 := [rewrite]: #57
#77 := [monotonicity #74]: #76
#68 := [trans #77 #73]: #71
#11 := (= f4 f1)
#14 := (not #11)
#9 := (= f3 f1)
#13 := (not #9)
#15 := (or #13 #14)
#16 := (not #15)
#12 := (and #9 #11)
#17 := (iff #12 #16)
#18 := (not #17)
#66 := (iff #18 #64)
#60 := (not #57)
#63 := (iff #60 #64)
#65 := [rewrite]: #63
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #51)
#49 := (iff #14 #48)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#50 := [monotonicity #41]: #49
#46 := (iff #13 #45)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#47 := [monotonicity #38]: #46
#53 := [monotonicity #47 #50]: #52
#56 := [monotonicity #53]: #55
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#59 := [monotonicity #44 #56]: #58
#62 := [monotonicity #59]: #61
#67 := [trans #62 #65]: #66
#35 := [asserted]: #18
#70 := [mp #35 #67]: #64
[mp #70 #68]: false
unsat
be3ab8b5e09f8f942728ba1af0512891f56e0c5b 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (ite #10 #10 #9)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#30 := (= f1 f3)
#33 := (not #30)
#36 := (ite #33 #33 #30)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#31 := (iff #9 #30)
#32 := [rewrite]: #31
#34 := (iff #10 #33)
#35 := [monotonicity #32]: #34
#38 := [monotonicity #35 #35 #32]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
27121de8ceb5985c14cca2c4563e9cad4d2ebd3c 79 0
#2 := false
decl f1 :: S1
#4 := f1
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#16 := (and #11 #14)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#17 := (and #9 #16)
#12 := (and #9 #11)
#15 := (and #12 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#92 := (iff #19 false)
#46 := (= f1 f5)
#40 := (= f1 f4)
#52 := (and #40 #46)
#37 := (= f1 f3)
#55 := (and #37 #52)
#43 := (and #37 #40)
#49 := (and #43 #46)
#61 := (not #49)
#62 := (or #61 #55)
#67 := (not #62)
#90 := (iff #67 false)
#1 := true
#85 := (not true)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #67 #85)
#83 := (iff #62 true)
#70 := (and #37 #40 #46)
#73 := (not #70)
#78 := (or #73 #70)
#81 := (iff #78 true)
#82 := [rewrite]: #81
#79 := (iff #62 #78)
#76 := (iff #55 #70)
#77 := [rewrite]: #76
#74 := (iff #61 #73)
#71 := (iff #49 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#80 := [monotonicity #75 #77]: #79
#84 := [trans #80 #82]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#68 := (iff #19 #67)
#65 := (iff #18 #62)
#58 := (implies #49 #55)
#63 := (iff #58 #62)
#64 := [rewrite]: #63
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#53 := (iff #16 #52)
#47 := (iff #14 #46)
#48 := [rewrite]: #47
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#54 := [monotonicity #42 #48]: #53
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#57 := [monotonicity #39 #54]: #56
#50 := (iff #15 #49)
#44 := (iff #12 #43)
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#60 := [monotonicity #51 #57]: #59
#66 := [trans #60 #64]: #65
#69 := [monotonicity #66]: #68
#93 := [trans #69 #91]: #92
#36 := [asserted]: #19
[mp #36 #93]: false
unsat
aa78c56be2c8312419ab25323cf112e3e8809e9f 18 0
#2 := false
decl f3 :: S2
#8 := f3
#9 := (= f3 f3)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
dc14c19019afcaa63507e4b503184496ed6bfd2f 94 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#46 := (= f1 f5)
decl f4 :: S1
#10 := f4
#40 := (= f1 f4)
decl f3 :: S1
#8 := f3
#37 := (= f1 f3)
#70 := (or #37 #40 #46)
#111 := (iff #70 false)
#106 := (or false false false)
#109 := (iff #106 false)
#110 := [rewrite]: #109
#107 := (iff #70 #106)
#104 := (iff #46 false)
#94 := (not #46)
#73 := (not #70)
#79 := (or #37 #40 #46 #73)
#84 := (not #79)
#14 := (= f5 f1)
#11 := (= f4 f1)
#16 := (or #11 #14)
#9 := (= f3 f1)
#17 := (or #9 #16)
#12 := (or #9 #11)
#15 := (or #12 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#87 := (iff #19 #84)
#52 := (or #40 #46)
#55 := (or #37 #52)
#43 := (or #37 #40)
#49 := (or #43 #46)
#61 := (not #49)
#62 := (or #61 #55)
#67 := (not #62)
#85 := (iff #67 #84)
#82 := (iff #62 #79)
#76 := (or #73 #55)
#80 := (iff #76 #79)
#81 := [rewrite]: #80
#77 := (iff #62 #76)
#74 := (iff #61 #73)
#71 := (iff #49 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#83 := [trans #78 #81]: #82
#86 := [monotonicity #83]: #85
#68 := (iff #19 #67)
#65 := (iff #18 #62)
#58 := (implies #49 #55)
#63 := (iff #58 #62)
#64 := [rewrite]: #63
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#53 := (iff #16 #52)
#47 := (iff #14 #46)
#48 := [rewrite]: #47
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#54 := [monotonicity #42 #48]: #53
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#57 := [monotonicity #39 #54]: #56
#50 := (iff #15 #49)
#44 := (iff #12 #43)
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#60 := [monotonicity #51 #57]: #59
#66 := [trans #60 #64]: #65
#69 := [monotonicity #66]: #68
#88 := [trans #69 #86]: #87
#36 := [asserted]: #19
#89 := [mp #36 #88]: #84
#95 := [not-or-elim #89]: #94
#105 := [iff-false #95]: #104
#102 := (iff #40 false)
#92 := (not #40)
#93 := [not-or-elim #89]: #92
#103 := [iff-false #93]: #102
#100 := (iff #37 false)
#90 := (not #37)
#91 := [not-or-elim #89]: #90
#101 := [iff-false #91]: #100
#108 := [monotonicity #101 #103 #105]: #107
#112 := [trans #108 #110]: #111
#96 := [not-or-elim #89]: #70
[mp #96 #112]: false
unsat
8d3a435e96c2d773a90e94525d09aa8a352d27d6 29 0
#2 := false
decl f3 :: S2
#8 := f3
decl f4 :: S2
#9 := f4
#11 := (= f4 f3)
#10 := (= f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#45 := (iff #13 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #13 #40)
#38 := (iff #12 true)
#33 := (implies #10 #10)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #12 #33)
#31 := (iff #11 #10)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #13
[mp #30 #46]: false
unsat
682b764e75beeea86518e9d265c22d014c6c1f1d 114 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
#116 := (not #47)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#53 := (or #38 #47)
#94 := (not #53)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#56 := (or #41 #47)
#95 := (not #56)
#127 := [hypothesis]: #95
#123 := (or #56 #116)
#124 := [def-axiom]: #123
#128 := [unit-resolution #124 #127]: #116
#86 := (not #41)
#85 := (not #38)
#87 := (or #85 #86)
#121 := (or #56 #86)
#122 := [def-axiom]: #121
#129 := [unit-resolution #122 #127]: #86
#110 := (or #87 #41)
#111 := [def-axiom]: #110
#130 := [unit-resolution #111 #129]: #87
#88 := (not #87)
#78 := (or #47 #88)
#44 := (and #38 #41)
#50 := (or #44 #47)
#91 := (iff #50 #78)
#81 := (or #88 #47)
#89 := (iff #81 #78)
#90 := [rewrite]: #89
#82 := (iff #50 #81)
#83 := (iff #44 #88)
#84 := [rewrite]: #83
#80 := [monotonicity #84]: #82
#92 := [trans #80 #90]: #91
#59 := (and #53 #56)
#65 := (not #50)
#66 := (or #65 #59)
#71 := (not #66)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (or #11 #14)
#9 := (= f3 f1)
#16 := (or #9 #14)
#18 := (and #16 #17)
#12 := (and #9 #11)
#15 := (or #12 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#72 := (iff #20 #71)
#69 := (iff #19 #66)
#62 := (implies #50 #59)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#58 := [monotonicity #43 #49]: #57
#54 := (iff #16 #53)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#55 := [monotonicity #40 #49]: #54
#61 := [monotonicity #55 #58]: #60
#51 := (iff #15 #50)
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [monotonicity #46 #49]: #51
#64 := [monotonicity #52 #61]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70]: #72
#37 := [asserted]: #20
#76 := [mp #37 #73]: #71
#74 := [not-or-elim #76]: #50
#93 := [mp #74 #92]: #78
#131 := [unit-resolution #93 #130 #128]: false
#132 := [lemma #131]: #56
#96 := (or #94 #95)
#75 := (not #59)
#105 := (iff #75 #96)
#97 := (not #96)
#100 := (not #97)
#103 := (iff #100 #96)
#104 := [rewrite]: #103
#101 := (iff #75 #100)
#98 := (iff #59 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#77 := [not-or-elim #76]: #75
#107 := [mp #77 #106]: #96
#133 := [unit-resolution #107 #132]: #94
#117 := (or #53 #116)
#118 := [def-axiom]: #117
#134 := [unit-resolution #118 #133]: #116
#114 := (or #53 #85)
#115 := [def-axiom]: #114
#135 := [unit-resolution #115 #133]: #85
#108 := (or #87 #38)
#109 := [def-axiom]: #108
#136 := [unit-resolution #109 #135]: #87
[unit-resolution #93 #136 #134]: false
unsat
7d6e447cf6e1145f4f9a866bcc3cde4710e17c79 34 0
#2 := false
decl f5 :: S2
#11 := f5
decl f3 :: S2
#8 := f3
#14 := (= f3 f5)
decl f4 :: S2
#9 := f4
#12 := (= f4 f5)
#58 := (iff #12 #14)
#56 := (iff #14 #12)
#10 := (= f3 f4)
#13 := (and #10 #12)
#34 := (not #13)
#35 := (or #34 #14)
#38 := (not #35)
#15 := (implies #13 #14)
#16 := (not #15)
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#33 := [asserted]: #16
#43 := [mp #33 #40]: #38
#41 := [not-or-elim #43]: #13
#42 := [and-elim #41]: #10
#57 := [monotonicity #42]: #56
#59 := [symm #57]: #58
#44 := [and-elim #41]: #12
#54 := [mp #44 #59]: #14
#45 := (not #14)
#46 := [not-or-elim #43]: #45
[unit-resolution #46 #54]: false
unsat
c134dad603b5004748b4c36796dfbdf41bc232cc 121 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#61 := (and #38 #47)
#98 := (not #61)
#137 := (iff #98 false)
#1 := true
#132 := (not true)
#135 := (iff #132 false)
#136 := [rewrite]: #135
#133 := (iff #98 #132)
#130 := (iff #61 true)
#125 := (and true true)
#128 := (iff #125 true)
#129 := [rewrite]: #128
#126 := (iff #61 #125)
#123 := (iff #47 true)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#53 := (or #41 #47)
#120 := (iff #53 #47)
#115 := (or false #47)
#118 := (iff #115 #47)
#119 := [rewrite]: #118
#116 := (iff #53 #115)
#103 := (iff #41 false)
#93 := (not #41)
#44 := (or #38 #41)
#58 := (and #44 #53)
#75 := (not #58)
#84 := (or #41 #75 #61)
#87 := (not #84)
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (and #9 #14)
#18 := (or #17 #11)
#15 := (or #14 #11)
#12 := (or #9 #11)
#16 := (and #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#90 := (iff #20 #87)
#67 := (or #41 #61)
#76 := (or #75 #67)
#81 := (not #76)
#88 := (iff #81 #87)
#85 := (iff #76 #84)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#82 := (iff #20 #81)
#79 := (iff #19 #76)
#72 := (implies #58 #67)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #19 #72)
#70 := (iff #18 #67)
#64 := (or #61 #41)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #18 #64)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#62 := (iff #17 #61)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#63 := [monotonicity #40 #49]: #62
#66 := [monotonicity #63 #43]: #65
#71 := [trans #66 #69]: #70
#59 := (iff #16 #58)
#56 := (iff #15 #53)
#50 := (or #47 #41)
#54 := (iff #50 #53)
#55 := [rewrite]: #54
#51 := (iff #15 #50)
#52 := [monotonicity #49 #43]: #51
#57 := [trans #52 #55]: #56
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#60 := [monotonicity #46 #57]: #59
#74 := [monotonicity #60 #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80]: #82
#91 := [trans #83 #89]: #90
#37 := [asserted]: #20
#92 := [mp #37 #91]: #87
#94 := [not-or-elim #92]: #93
#104 := [iff-false #94]: #103
#117 := [monotonicity #104]: #116
#121 := [trans #117 #119]: #120
#95 := [not-or-elim #92]: #58
#97 := [and-elim #95]: #53
#122 := [mp #97 #121]: #47
#124 := [iff-true #122]: #123
#113 := (iff #38 true)
#110 := (iff #44 #38)
#105 := (or #38 false)
#108 := (iff #105 #38)
#109 := [rewrite]: #108
#106 := (iff #44 #105)
#107 := [monotonicity #104]: #106
#111 := [trans #107 #109]: #110
#96 := [and-elim #95]: #44
#112 := [mp #96 #111]: #38
#114 := [iff-true #112]: #113
#127 := [monotonicity #114 #124]: #126
#131 := [trans #127 #129]: #130
#134 := [monotonicity #131]: #133
#138 := [trans #134 #136]: #137
#99 := [not-or-elim #92]: #98
[mp #99 #138]: false
unsat
810792c4ea80c0bc3287d99f969f1a65dc039da5 27 0
#2 := false
decl f5 :: (-> S2 S2)
decl f4 :: S2
#9 := f4
#12 := (f5 f4)
decl f3 :: S2
#8 := f3
#11 := (f5 f3)
#13 := (= #11 #12)
#10 := (= f3 f4)
#33 := (not #10)
#34 := (or #33 #13)
#37 := (not #34)
#14 := (implies #10 #13)
#15 := (not #14)
#38 := (iff #15 #37)
#35 := (iff #14 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#32 := [asserted]: #15
#42 := [mp #32 #39]: #37
#40 := [not-or-elim #42]: #10
#51 := [monotonicity #40]: #13
#41 := (not #13)
#43 := [not-or-elim #42]: #41
[unit-resolution #43 #51]: false
unsat
7afff0259006c1c4b6a802d510f1b96695b3e9ad 110 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#44 := (or #38 #41)
#128 := (iff #44 false)
#123 := (or false false)
#126 := (iff #123 false)
#127 := [rewrite]: #126
#124 := (iff #44 #123)
#121 := (iff #41 false)
#117 := (not #41)
decl f5 :: S1
#13 := f5
#47 := (= f1 f5)
#56 := (and #41 #47)
#88 := (not #56)
#118 := (iff #88 #117)
#115 := (iff #56 #41)
#1 := true
#110 := (and #41 true)
#113 := (iff #110 #41)
#114 := [rewrite]: #113
#111 := (iff #56 #110)
#95 := (iff #47 true)
#50 := (and #44 #47)
#53 := (and #38 #47)
#65 := (not #50)
#74 := (or #65 #53 #56)
#77 := (not #74)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (and #11 #14)
#9 := (= f3 f1)
#16 := (and #9 #14)
#18 := (or #16 #17)
#12 := (or #9 #11)
#15 := (and #12 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#80 := (iff #20 #77)
#59 := (or #53 #56)
#66 := (or #65 #59)
#71 := (not #66)
#78 := (iff #71 #77)
#75 := (iff #66 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#72 := (iff #20 #71)
#69 := (iff #19 #66)
#62 := (implies #50 #59)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#58 := [monotonicity #43 #49]: #57
#54 := (iff #16 #53)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#55 := [monotonicity #40 #49]: #54
#61 := [monotonicity #55 #58]: #60
#51 := (iff #15 #50)
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [monotonicity #46 #49]: #51
#64 := [monotonicity #52 #61]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70]: #72
#81 := [trans #73 #79]: #80
#37 := [asserted]: #20
#82 := [mp #37 #81]: #77
#83 := [not-or-elim #82]: #50
#85 := [and-elim #83]: #47
#96 := [iff-true #85]: #95
#112 := [monotonicity #96]: #111
#116 := [trans #112 #114]: #115
#119 := [monotonicity #116]: #118
#89 := [not-or-elim #82]: #88
#120 := [mp #89 #119]: #117
#122 := [iff-false #120]: #121
#108 := (iff #38 false)
#104 := (not #38)
#86 := (not #53)
#105 := (iff #86 #104)
#102 := (iff #53 #38)
#97 := (and #38 true)
#100 := (iff #97 #38)
#101 := [rewrite]: #100
#98 := (iff #53 #97)
#99 := [monotonicity #96]: #98
#103 := [trans #99 #101]: #102
#106 := [monotonicity #103]: #105
#87 := [not-or-elim #82]: #86
#107 := [mp #87 #106]: #104
#109 := [iff-false #107]: #108
#125 := [monotonicity #109 #122]: #124
#129 := [trans #125 #127]: #128
#84 := [and-elim #83]: #44
[mp #84 #129]: false
unsat
09e564f98c53b63bab667092b7072fa2b674fa08 31 0
#2 := false
decl f5 :: (-> S2 S2 S3)
decl f3 :: S2
#8 := f3
decl f4 :: S2
#9 := f4
#12 := (f5 f4 f3)
#11 := (f5 f3 f4)
#13 := (= #11 #12)
#53 := (= #12 #11)
#10 := (= f3 f4)
#33 := (not #10)
#34 := (or #33 #13)
#37 := (not #34)
#14 := (implies #10 #13)
#15 := (not #14)
#38 := (iff #15 #37)
#35 := (iff #14 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#32 := [asserted]: #15
#42 := [mp #32 #39]: #37
#40 := [not-or-elim #42]: #10
#51 := (= f4 f3)
#52 := [symm #40]: #51
#54 := [monotonicity #52 #40]: #53
#49 := [symm #54]: #13
#41 := (not #13)
#43 := [not-or-elim #42]: #41
[unit-resolution #43 #49]: false
unsat
83b90287eef3783de4d8fa4aad70d03dd0abddbf 127 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
#91 := (not #47)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#96 := (not #41)
#92 := (or #96 #91)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#61 := (or #38 #47)
#95 := (not #38)
#97 := (or #95 #96)
#109 := (not #61)
#140 := [hypothesis]: #109
#134 := (or #61 #95)
#135 := [def-axiom]: #134
#141 := [unit-resolution #135 #140]: #95
#128 := (or #97 #38)
#129 := [def-axiom]: #128
#142 := [unit-resolution #129 #141]: #97
#136 := (or #61 #91)
#137 := [def-axiom]: #136
#143 := [unit-resolution #137 #140]: #91
#124 := (or #92 #47)
#125 := [def-axiom]: #124
#144 := [unit-resolution #125 #143]: #92
#98 := (not #97)
#90 := (not #92)
#103 := (or #90 #98)
#53 := (and #41 #47)
#44 := (and #38 #41)
#58 := (or #44 #53)
#106 := (iff #58 #103)
#100 := (or #98 #90)
#104 := (iff #100 #103)
#105 := [rewrite]: #104
#101 := (iff #58 #100)
#88 := (iff #53 #90)
#99 := [rewrite]: #88
#93 := (iff #44 #98)
#94 := [rewrite]: #93
#102 := [monotonicity #94 #99]: #101
#107 := [trans #102 #105]: #106
#67 := (and #41 #61)
#75 := (not #58)
#76 := (or #75 #67)
#81 := (not #76)
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (or #9 #14)
#18 := (and #17 #11)
#15 := (and #14 #11)
#12 := (and #9 #11)
#16 := (or #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#82 := (iff #20 #81)
#79 := (iff #19 #76)
#72 := (implies #58 #67)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #19 #72)
#70 := (iff #18 #67)
#64 := (and #61 #41)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #18 #64)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#62 := (iff #17 #61)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#63 := [monotonicity #40 #49]: #62
#66 := [monotonicity #63 #43]: #65
#71 := [trans #66 #69]: #70
#59 := (iff #16 #58)
#56 := (iff #15 #53)
#50 := (and #47 #41)
#54 := (iff #50 #53)
#55 := [rewrite]: #54
#51 := (iff #15 #50)
#52 := [monotonicity #49 #43]: #51
#57 := [trans #52 #55]: #56
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#60 := [monotonicity #46 #57]: #59
#74 := [monotonicity #60 #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80]: #82
#37 := [asserted]: #20
#86 := [mp #37 #83]: #81
#84 := [not-or-elim #86]: #58
#108 := [mp #84 #107]: #103
#145 := [unit-resolution #108 #144 #142]: false
#146 := [lemma #145]: #61
#110 := (or #96 #109)
#85 := (not #67)
#119 := (iff #85 #110)
#111 := (not #110)
#114 := (not #111)
#117 := (iff #114 #110)
#118 := [rewrite]: #117
#115 := (iff #85 #114)
#112 := (iff #67 #111)
#113 := [rewrite]: #112
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#87 := [not-or-elim #86]: #85
#121 := [mp #87 #120]: #110
#147 := [unit-resolution #121 #146]: #96
#122 := (or #92 #41)
#123 := [def-axiom]: #122
#148 := [unit-resolution #123 #147]: #92
#130 := (or #97 #41)
#131 := [def-axiom]: #130
#149 := [unit-resolution #131 #147]: #97
[unit-resolution #108 #149 #148]: false
unsat
f97c055cc3b87ad54efe59b6c22e3e3633409f7e 63 0
#2 := false
decl f3 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#46 := (= f4 #9)
#10 := (f3 #9)
#12 := (f3 #10)
#78 := (= #12 #9)
#76 := (= #9 #12)
#37 := (= f4 #10)
#13 := (f3 #12)
#14 := (f3 #13)
#40 := (= f4 #14)
#43 := (and #37 #40)
#52 := (not #43)
#53 := (or #52 #46)
#58 := (not #53)
#17 := (= #9 f4)
#15 := (= #14 f4)
#11 := (= #10 f4)
#16 := (and #11 #15)
#18 := (implies #16 #17)
#19 := (not #18)
#59 := (iff #19 #58)
#56 := (iff #18 #53)
#49 := (implies #43 #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #18 #49)
#47 := (iff #17 #46)
#48 := [rewrite]: #47
#44 := (iff #16 #43)
#41 := (iff #15 #40)
#42 := [rewrite]: #41
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#36 := [asserted]: #19
#63 := [mp #36 #60]: #58
#61 := [not-or-elim #63]: #43
#62 := [and-elim #61]: #37
#77 := [monotonicity #62]: #76
#79 := [symm #77]: #78
#81 := (= f4 #12)
#67 := (= #14 #12)
#70 := (= #12 #14)
#72 := (= #10 #13)
#74 := (= #13 #10)
#75 := [monotonicity #79]: #74
#73 := [symm #75]: #72
#71 := [monotonicity #73]: #70
#80 := [symm #71]: #67
#64 := [and-elim #61]: #40
#82 := [trans #64 #80]: #81
#83 := [trans #82 #79]: #46
#65 := (not #46)
#66 := [not-or-elim #63]: #65
[unit-resolution #66 #83]: false
unsat
a7f2c916e2192b153aaac29ea6f75d0842fd84d2 66 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#33 := (= f1 f3)
decl f4 :: S1
#10 := f4
#36 := (= f1 f4)
#42 := (not #33)
#43 := (or #42 #36)
#51 := (not #43)
#52 := (or #33 #51)
#82 := (iff #52 #51)
#77 := (or false #51)
#80 := (iff #77 #51)
#81 := [rewrite]: #80
#78 := (iff #52 #77)
#75 := (iff #33 false)
#60 := (not #52)
#61 := (or #33 #60)
#66 := (not #61)
#9 := (= f3 f1)
#11 := (= f4 f1)
#12 := (implies #9 #11)
#13 := (implies #12 #9)
#14 := (implies #13 #9)
#15 := (not #14)
#67 := (iff #15 #66)
#64 := (iff #14 #61)
#57 := (implies #52 #33)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #14 #57)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#55 := (iff #13 #52)
#48 := (implies #43 #33)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #13 #48)
#46 := (iff #12 #43)
#39 := (implies #33 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #35 #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47 #35]: #49
#56 := [trans #50 #54]: #55
#59 := [monotonicity #56 #35]: #58
#65 := [trans #59 #63]: #64
#68 := [monotonicity #65]: #67
#32 := [asserted]: #15
#71 := [mp #32 #68]: #66
#69 := [not-or-elim #71]: #42
#76 := [iff-false #69]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#70 := [not-or-elim #71]: #52
#84 := [mp #70 #83]: #51
#74 := [not-or-elim #84]: #33
[unit-resolution #69 #74]: false
unsat
0b20a1cbaefe018fa6502d17013ec89dc657717b 195 0
#2 := false
decl f6 :: S2
#13 := f6
decl f4 :: S2
#10 := f4
#15 := (= f4 f6)
decl f5 :: S2
#11 := f5
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#40 := (= f1 f3)
#43 := (ite #40 f4 f5)
#49 := (= f6 #43)
#200 := (iff #49 #15)
#198 := (iff #15 #49)
#46 := (= #43 f6)
#50 := (iff #46 #49)
#197 := [commutativity]: #50
#195 := (iff #15 #46)
#110 := (= f4 #43)
#111 := (= f5 #43)
#57 := (not #40)
#180 := [hypothesis]: #57
#114 := (or #40 #111)
#115 := [def-axiom]: #114
#184 := [unit-resolution #115 #180]: #111
#185 := (= f6 f5)
#18 := (= f5 f6)
#174 := (iff #110 #15)
#172 := (iff #15 #110)
#68 := (or #18 #40)
#95 := (not #68)
#58 := (or #15 #57)
#94 := (not #58)
#96 := (or #94 #95)
#123 := (not #18)
#147 := [hypothesis]: #123
#157 := (or #96 #18)
#97 := (not #96)
#145 := [hypothesis]: #97
#132 := (or #96 #68)
#133 := [def-axiom]: #132
#148 := [unit-resolution #133 #145]: #68
#128 := (or #95 #18 #40)
#129 := [def-axiom]: #128
#149 := [unit-resolution #129 #148 #147]: #40
#112 := (or #57 #110)
#113 := [def-axiom]: #112
#150 := [unit-resolution #113 #149]: #110
#153 := (= f6 f4)
#130 := (or #96 #58)
#131 := [def-axiom]: #130
#151 := [unit-resolution #131 #145]: #58
#121 := (or #94 #15 #57)
#122 := [def-axiom]: #121
#152 := [unit-resolution #122 #149 #151]: #15
#154 := [symm #152]: #153
#155 := [trans #154 #150]: #49
#82 := (not #49)
#143 := (or #82 #96)
#104 := (iff #49 #96)
#73 := (and #58 #68)
#83 := (iff #73 #82)
#107 := (iff #83 #104)
#99 := (iff #96 #49)
#105 := (iff #99 #104)
#106 := [rewrite]: #105
#102 := (iff #83 #99)
#91 := (iff #97 #82)
#100 := (iff #91 #99)
#101 := [rewrite]: #100
#88 := (iff #83 #91)
#92 := (iff #73 #97)
#93 := [rewrite]: #92
#98 := [monotonicity #93]: #88
#103 := [trans #98 #101]: #102
#108 := [trans #103 #106]: #107
#9 := (= f3 f1)
#17 := (not #9)
#19 := (implies #17 #18)
#16 := (implies #9 #15)
#20 := (and #16 #19)
#12 := (ite #9 f4 f5)
#14 := (= #12 f6)
#21 := (iff #14 #20)
#22 := (not #21)
#86 := (iff #22 #83)
#76 := (iff #49 #73)
#79 := (not #76)
#84 := (iff #79 #83)
#85 := [rewrite]: #84
#80 := (iff #22 #79)
#77 := (iff #21 #76)
#74 := (iff #20 #73)
#71 := (iff #19 #68)
#65 := (implies #57 #18)
#69 := (iff #65 #68)
#70 := [rewrite]: #69
#66 := (iff #19 #65)
#63 := (iff #17 #57)
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#64 := [monotonicity #42]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#61 := (iff #16 #58)
#54 := (implies #40 #15)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #16 #54)
#56 := [monotonicity #42]: #55
#62 := [trans #56 #60]: #61
#75 := [monotonicity #62 #72]: #74
#52 := (iff #14 #49)
#51 := [rewrite]: #50
#47 := (iff #14 #46)
#44 := (= #12 #43)
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#53 := [trans #48 #51]: #52
#78 := [monotonicity #53 #75]: #77
#81 := [monotonicity #78]: #80
#87 := [trans #81 #85]: #86
#39 := [asserted]: #22
#90 := [mp #39 #87]: #83
#109 := [mp #90 #108]: #104
#136 := (not #104)
#141 := (or #82 #96 #136)
#142 := [def-axiom]: #141
#144 := [unit-resolution #142 #109]: #143
#146 := [unit-resolution #144 #145]: #82
#156 := [unit-resolution #146 #155]: false
#158 := [lemma #156]: #157
#159 := [unit-resolution #158 #147]: #96
#139 := (or #49 #97)
#137 := (or #49 #97 #136)
#138 := [def-axiom]: #137
#140 := [unit-resolution #138 #109]: #139
#160 := [unit-resolution #140 #159]: #49
#173 := [monotonicity #160]: #172
#175 := [symm #173]: #174
#163 := (not #111)
#164 := (iff #123 #163)
#161 := (iff #18 #111)
#162 := [monotonicity #160]: #161
#165 := [monotonicity #162]: #164
#166 := [mp #147 #165]: #163
#167 := [unit-resolution #115 #166]: #40
#171 := [unit-resolution #113 #167]: #110
#176 := [mp #171 #175]: #15
#116 := (not #15)
#126 := (or #68 #57)
#127 := [def-axiom]: #126
#168 := [unit-resolution #127 #167]: #68
#134 := (or #97 #94 #95)
#135 := [def-axiom]: #134
#169 := [unit-resolution #135 #168 #159]: #94
#117 := (or #58 #116)
#118 := [def-axiom]: #117
#170 := [unit-resolution #118 #169]: #116
#177 := [unit-resolution #170 #176]: false
#178 := [lemma #177]: #18
#186 := [symm #178]: #185
#187 := [trans #186 #184]: #49
#124 := (or #68 #123)
#125 := [def-axiom]: #124
#179 := [unit-resolution #125 #178]: #68
#119 := (or #58 #40)
#120 := [def-axiom]: #119
#181 := [unit-resolution #120 #180]: #58
#182 := [unit-resolution #135 #181 #179]: #97
#183 := [unit-resolution #144 #182]: #82
#188 := [unit-resolution #183 #187]: false
#189 := [lemma #188]: #40
#194 := [unit-resolution #113 #189]: #110
#196 := [monotonicity #194]: #195
#199 := [trans #196 #197]: #198
#201 := [symm #199]: #200
#202 := (iff #82 #116)
#203 := [monotonicity #201]: #202
#190 := [hypothesis]: #82
#204 := [mp #190 #203]: #116
#191 := [unit-resolution #140 #190]: #97
#192 := [unit-resolution #131 #191]: #58
#193 := [unit-resolution #122 #192 #189]: #15
#205 := [unit-resolution #193 #204]: false
#206 := [lemma #205]: #49
#210 := [mp #206 #201]: #15
#207 := [unit-resolution #144 #206]: #96
#208 := [unit-resolution #135 #207 #179]: #94
#209 := [unit-resolution #118 #208]: #116
[unit-resolution #209 #210]: false
unsat
d398c106ccd0941d46bab8e5feda32347dd02740 156 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#53 := (= f1 f5)
#59 := (not #53)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#60 := (or #41 #59)
#99 := (not #60)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#98 := (not #48)
#100 := (or #98 #99)
#68 := (or #38 #53)
#74 := (not #68)
#75 := (or #41 #74)
#122 := (not #75)
#101 := (not #100)
#152 := [hypothesis]: #101
#150 := (or #122 #100)
#107 := (iff #75 #100)
#65 := (and #48 #60)
#86 := (not #65)
#87 := (iff #75 #86)
#108 := (iff #87 #107)
#105 := (iff #86 #100)
#95 := (not #101)
#103 := (iff #95 #100)
#104 := [rewrite]: #103
#92 := (iff #86 #95)
#96 := (iff #65 #101)
#97 := [rewrite]: #96
#102 := [monotonicity #97]: #92
#106 := [trans #102 #104]: #105
#109 := [monotonicity #106]: #108
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (or #9 #14)
#18 := (implies #17 #11)
#15 := (implies #14 #11)
#12 := (implies #9 #11)
#16 := (and #12 #15)
#19 := (iff #16 #18)
#20 := (not #19)
#90 := (iff #20 #87)
#80 := (iff #65 #75)
#83 := (not #80)
#88 := (iff #83 #87)
#89 := [rewrite]: #88
#84 := (iff #20 #83)
#81 := (iff #19 #80)
#78 := (iff #18 #75)
#71 := (implies #68 #41)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #18 #71)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#69 := (iff #17 #68)
#54 := (iff #14 #53)
#55 := [rewrite]: #54
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#70 := [monotonicity #40 #55]: #69
#73 := [monotonicity #70 #43]: #72
#79 := [trans #73 #77]: #78
#66 := (iff #16 #65)
#63 := (iff #15 #60)
#56 := (implies #53 #41)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #15 #56)
#58 := [monotonicity #55 #43]: #57
#64 := [trans #58 #62]: #63
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#67 := [monotonicity #52 #64]: #66
#82 := [monotonicity #67 #79]: #81
#85 := [monotonicity #82]: #84
#91 := [trans #85 #89]: #90
#37 := [asserted]: #20
#94 := [mp #37 #91]: #87
#110 := [mp #94 #109]: #107
#143 := (not #107)
#148 := (or #122 #100 #143)
#149 := [def-axiom]: #148
#151 := [unit-resolution #149 #110]: #150
#153 := [unit-resolution #151 #152]: #122
#120 := (or #75 #68)
#121 := [def-axiom]: #120
#154 := [unit-resolution #121 #153]: #68
#137 := (or #100 #48)
#138 := [def-axiom]: #137
#155 := [unit-resolution #138 #152]: #48
#117 := (not #41)
#118 := (or #75 #117)
#119 := [def-axiom]: #118
#156 := [unit-resolution #119 #153]: #117
#129 := (or #98 #47 #41)
#130 := [def-axiom]: #129
#157 := [unit-resolution #130 #156 #155]: #47
#139 := (or #100 #60)
#140 := [def-axiom]: #139
#158 := [unit-resolution #140 #152]: #60
#135 := (or #99 #41 #59)
#136 := [def-axiom]: #135
#159 := [unit-resolution #136 #156 #158]: #59
#115 := (or #74 #38 #53)
#116 := [def-axiom]: #115
#160 := [unit-resolution #116 #159 #157 #154]: false
#161 := [lemma #160]: #100
#146 := (or #75 #101)
#144 := (or #75 #101 #143)
#145 := [def-axiom]: #144
#147 := [unit-resolution #145 #110]: #146
#162 := [unit-resolution #147 #161]: #75
#163 := [hypothesis]: #98
#127 := (or #48 #117)
#128 := [def-axiom]: #127
#164 := [unit-resolution #128 #163]: #117
#125 := (or #48 #38)
#126 := [def-axiom]: #125
#165 := [unit-resolution #126 #163]: #38
#111 := (or #68 #47)
#112 := [def-axiom]: #111
#166 := [unit-resolution #112 #165]: #68
#123 := (or #122 #41 #74)
#124 := [def-axiom]: #123
#167 := [unit-resolution #124 #166 #164 #162]: false
#168 := [lemma #167]: #48
#141 := (or #101 #98 #99)
#142 := [def-axiom]: #141
#169 := [unit-resolution #142 #168 #161]: #99
#133 := (or #60 #53)
#134 := [def-axiom]: #133
#170 := [unit-resolution #134 #169]: #53
#131 := (or #60 #117)
#132 := [def-axiom]: #131
#171 := [unit-resolution #132 #169]: #117
#172 := [unit-resolution #124 #171 #162]: #74
#113 := (or #68 #59)
#114 := [def-axiom]: #113
[unit-resolution #114 #172 #170]: false
unsat
ba53dbe39a10406601e0a359b3a1de14129ef1a1 36 0
#2 := false
decl f5 :: S2
#10 := f5
decl f3 :: S2
#8 := f3
#12 := (= f3 f5)
#13 := (not #12)
decl f4 :: S2
#9 := f4
#11 := (distinct f3 f4 f5)
#33 := (not #11)
#34 := (or #33 #13)
#37 := (not #34)
#14 := (implies #11 #13)
#15 := (not #14)
#38 := (iff #15 #37)
#35 := (iff #14 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#32 := [asserted]: #15
#42 := [mp #32 #39]: #37
#41 := [not-or-elim #42]: #12
#52 := (= f4 f5)
#53 := (not #52)
#50 := (= f3 f4)
#51 := (not #50)
#48 := (and #51 #13 #53)
#40 := [not-or-elim #42]: #11
#58 := (or #33 #48)
#59 := [def-axiom]: #58
#62 := [unit-resolution #59 #40]: #48
#49 := (not #48)
#45 := (or #49 #13)
#43 := [def-axiom]: #45
[unit-resolution #43 #62 #41]: false
unsat
78ae843b278e5f0cc65999ee60776dec7c9f683f 114 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#46 := (= f1 f5)
decl f4 :: S1
#10 := f4
#40 := (= f1 f4)
#61 := (not #40)
decl f3 :: S1
#8 := f3
#37 := (= f1 f3)
#70 := (not #37)
#88 := (or #70 #61 #46)
#43 := (and #37 #40)
#52 := (not #43)
#53 := (or #52 #46)
#82 := (not #53)
#94 := (iff #82 #88)
#129 := (iff #94 false)
#121 := (not #88)
#124 := (iff #121 #88)
#127 := (iff #124 false)
#128 := [rewrite]: #127
#125 := (iff #94 #124)
#122 := (iff #82 #121)
#119 := (iff #53 #88)
#107 := (or #70 #61)
#114 := (or #107 #46)
#117 := (iff #114 #88)
#118 := [rewrite]: #117
#115 := (iff #53 #114)
#112 := (iff #52 #107)
#108 := (not #107)
#105 := (not #108)
#102 := (iff #105 #107)
#111 := [rewrite]: #102
#106 := (iff #52 #105)
#109 := (iff #43 #108)
#110 := [rewrite]: #109
#104 := [monotonicity #110]: #106
#113 := [trans #104 #111]: #112
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#123 := [monotonicity #120]: #122
#126 := [monotonicity #123]: #125
#130 := [trans #126 #128]: #129
#14 := (= f5 f1)
#11 := (= f4 f1)
#16 := (implies #11 #14)
#9 := (= f3 f1)
#17 := (implies #9 #16)
#12 := (and #9 #11)
#15 := (implies #12 #14)
#18 := (iff #15 #17)
#19 := (not #18)
#99 := (iff #19 #94)
#62 := (or #61 #46)
#71 := (or #70 #62)
#83 := (iff #71 #82)
#97 := (iff #83 #94)
#91 := (iff #88 #82)
#95 := (iff #91 #94)
#96 := [rewrite]: #95
#92 := (iff #83 #91)
#89 := (iff #71 #88)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#98 := [trans #93 #96]: #97
#86 := (iff #19 #83)
#76 := (iff #53 #71)
#79 := (not #76)
#84 := (iff #79 #83)
#85 := [rewrite]: #84
#80 := (iff #19 #79)
#77 := (iff #18 #76)
#74 := (iff #17 #71)
#67 := (implies #37 #62)
#72 := (iff #67 #71)
#73 := [rewrite]: #72
#68 := (iff #17 #67)
#65 := (iff #16 #62)
#58 := (implies #40 #46)
#63 := (iff #58 #62)
#64 := [rewrite]: #63
#59 := (iff #16 #58)
#47 := (iff #14 #46)
#48 := [rewrite]: #47
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#60 := [monotonicity #42 #48]: #59
#66 := [trans #60 #64]: #65
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#69 := [monotonicity #39 #66]: #68
#75 := [trans #69 #73]: #74
#56 := (iff #15 #53)
#49 := (implies #43 #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#44 := (iff #12 #43)
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#57 := [trans #51 #55]: #56
#78 := [monotonicity #57 #75]: #77
#81 := [monotonicity #78]: #80
#87 := [trans #81 #85]: #86
#100 := [trans #87 #98]: #99
#36 := [asserted]: #19
#101 := [mp #36 #100]: #94
[mp #101 #130]: false
unsat
08e0778705271e8f33e9bdf3c26b749a4c39eda2 77 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#81 := (= f3 f4)
decl f6 :: S2
#12 := f6
#36 := (= f4 f6)
#100 := (iff #36 #81)
#98 := (iff #81 #36)
#13 := (= f6 f4)
#37 := (iff #13 #36)
#97 := [commutativity]: #37
#95 := (iff #81 #13)
#14 := (= f3 f6)
#42 := (not #36)
#15 := (not #14)
decl f5 :: S2
#10 := f5
#11 := (distinct f3 f4 f5)
#51 := (not #11)
#60 := (or #51 #15 #42)
#63 := (not #60)
#16 := (implies #13 #15)
#17 := (implies #11 #16)
#18 := (not #17)
#66 := (iff #18 #63)
#43 := (or #15 #42)
#52 := (or #51 #43)
#57 := (not #52)
#64 := (iff #57 #63)
#61 := (iff #52 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#58 := (iff #18 #57)
#55 := (iff #17 #52)
#48 := (implies #11 #43)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #17 #48)
#46 := (iff #16 #43)
#39 := (implies #36 #15)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #16 #39)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#56 := [trans #50 #54]: #55
#59 := [monotonicity #56]: #58
#67 := [trans #59 #65]: #66
#35 := [asserted]: #18
#68 := [mp #35 #67]: #63
#70 := [not-or-elim #68]: #14
#96 := [monotonicity #70]: #95
#99 := [trans #96 #97]: #98
#101 := [symm #99]: #100
#71 := [not-or-elim #68]: #36
#102 := [mp #71 #101]: #81
#82 := (not #81)
#79 := (= f4 f5)
#80 := (not #79)
#83 := (= f3 f5)
#84 := (not #83)
#77 := (and #82 #84 #80)
#69 := [not-or-elim #68]: #11
#89 := (or #51 #77)
#90 := [def-axiom]: #89
#93 := [unit-resolution #90 #69]: #77
#78 := (not #77)
#75 := (or #78 #82)
#76 := [def-axiom]: #75
#94 := [unit-resolution #76 #93]: #82
[unit-resolution #94 #102]: false
unsat
016fee2f7f490b7727a4579bedbeaa0a03271f5c 198 0
#2 := false
decl f5 :: S1
#14 := f5
decl f1 :: S1
#4 := f1
#65 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#86 := (and #41 #65)
#92 := (not #86)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#93 := (or #44 #92)
#214 := (iff #93 false)
#209 := (or false false)
#212 := (iff #209 false)
#213 := [rewrite]: #212
#210 := (iff #93 #209)
#207 := (iff #92 false)
#1 := true
#202 := (not true)
#205 := (iff #202 false)
#206 := [rewrite]: #205
#203 := (iff #92 #202)
#200 := (iff #86 true)
#195 := (and true true)
#198 := (iff #195 true)
#199 := [rewrite]: #198
#196 := (iff #86 #195)
#193 := (iff #65 true)
#71 := (not #65)
#72 := (or #44 #71)
#80 := (not #72)
#81 := (or #44 #80)
#190 := (iff #81 #65)
#185 := (or false #65)
#188 := (iff #185 #65)
#189 := [rewrite]: #188
#186 := (iff #81 #185)
#183 := (iff #80 #65)
#178 := (not #71)
#181 := (iff #178 #65)
#182 := [rewrite]: #181
#179 := (iff #80 #178)
#176 := (iff #72 #71)
#171 := (or false #71)
#174 := (iff #171 #71)
#175 := [rewrite]: #174
#172 := (iff #72 #171)
#145 := (iff #44 false)
#137 := (not #44)
#101 := (not #93)
#110 := (not #81)
#50 := (not #41)
#51 := (or #50 #44)
#59 := (not #51)
#60 := (or #44 #59)
#119 := (not #60)
#128 := (or #44 #119 #110 #101)
#131 := (not #128)
#11 := (= f4 f1)
#15 := (= f5 f1)
#9 := (= f3 f1)
#18 := (and #9 #15)
#19 := (implies #18 #11)
#20 := (implies #19 #11)
#16 := (implies #15 #11)
#17 := (implies #16 #11)
#21 := (implies #17 #20)
#12 := (implies #9 #11)
#13 := (implies #12 #11)
#22 := (implies #13 #21)
#23 := (not #22)
#134 := (iff #23 #131)
#102 := (or #44 #101)
#111 := (or #110 #102)
#120 := (or #119 #111)
#125 := (not #120)
#132 := (iff #125 #131)
#129 := (iff #120 #128)
#130 := [rewrite]: #129
#133 := [monotonicity #130]: #132
#126 := (iff #23 #125)
#123 := (iff #22 #120)
#116 := (implies #60 #111)
#121 := (iff #116 #120)
#122 := [rewrite]: #121
#117 := (iff #22 #116)
#114 := (iff #21 #111)
#107 := (implies #81 #102)
#112 := (iff #107 #111)
#113 := [rewrite]: #112
#108 := (iff #21 #107)
#105 := (iff #20 #102)
#98 := (implies #93 #44)
#103 := (iff #98 #102)
#104 := [rewrite]: #103
#99 := (iff #20 #98)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#96 := (iff #19 #93)
#89 := (implies #86 #44)
#94 := (iff #89 #93)
#95 := [rewrite]: #94
#90 := (iff #19 #89)
#87 := (iff #18 #86)
#66 := (iff #15 #65)
#67 := [rewrite]: #66
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#88 := [monotonicity #43 #67]: #87
#91 := [monotonicity #88 #46]: #90
#97 := [trans #91 #95]: #96
#100 := [monotonicity #97 #46]: #99
#106 := [trans #100 #104]: #105
#84 := (iff #17 #81)
#77 := (implies #72 #44)
#82 := (iff #77 #81)
#83 := [rewrite]: #82
#78 := (iff #17 #77)
#75 := (iff #16 #72)
#68 := (implies #65 #44)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #16 #68)
#70 := [monotonicity #67 #46]: #69
#76 := [trans #70 #74]: #75
#79 := [monotonicity #76 #46]: #78
#85 := [trans #79 #83]: #84
#109 := [monotonicity #85 #106]: #108
#115 := [trans #109 #113]: #114
#63 := (iff #13 #60)
#56 := (implies #51 #44)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #55 #46]: #57
#64 := [trans #58 #62]: #63
#118 := [monotonicity #64 #115]: #117
#124 := [trans #118 #122]: #123
#127 := [monotonicity #124]: #126
#135 := [trans #127 #133]: #134
#40 := [asserted]: #23
#136 := [mp #40 #135]: #131
#138 := [not-or-elim #136]: #137
#146 := [iff-false #138]: #145
#173 := [monotonicity #146]: #172
#177 := [trans #173 #175]: #176
#180 := [monotonicity #177]: #179
#184 := [trans #180 #182]: #183
#187 := [monotonicity #146 #184]: #186
#191 := [trans #187 #189]: #190
#140 := [not-or-elim #136]: #81
#192 := [mp #140 #191]: #65
#194 := [iff-true #192]: #193
#169 := (iff #41 true)
#166 := (iff #60 #41)
#161 := (or false #41)
#164 := (iff #161 #41)
#165 := [rewrite]: #164
#162 := (iff #60 #161)
#159 := (iff #59 #41)
#154 := (not #50)
#157 := (iff #154 #41)
#158 := [rewrite]: #157
#155 := (iff #59 #154)
#152 := (iff #51 #50)
#147 := (or #50 false)
#150 := (iff #147 #50)
#151 := [rewrite]: #150
#148 := (iff #51 #147)
#149 := [monotonicity #146]: #148
#153 := [trans #149 #151]: #152
#156 := [monotonicity #153]: #155
#160 := [trans #156 #158]: #159
#163 := [monotonicity #146 #160]: #162
#167 := [trans #163 #165]: #166
#139 := [not-or-elim #136]: #60
#168 := [mp #139 #167]: #41
#170 := [iff-true #168]: #169
#197 := [monotonicity #170 #194]: #196
#201 := [trans #197 #199]: #200
#204 := [monotonicity #201]: #203
#208 := [trans #204 #206]: #207
#211 := [monotonicity #146 #208]: #210
#215 := [trans #211 #213]: #214
#141 := [not-or-elim #136]: #93
[mp #141 #215]: false
unsat
32fbe7827173348f5f83cc50b7e41574fd04dba5 28 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#10 := (distinct f3 f4 f3 f4)
#11 := (not #10)
#12 := (not #11)
#44 := (iff #12 false)
#1 := true
#39 := (not true)
#42 := (iff #39 false)
#43 := [rewrite]: #42
#40 := (iff #12 #39)
#37 := (iff #11 true)
#32 := (not false)
#35 := (iff #32 true)
#36 := [rewrite]: #35
#33 := (iff #11 #32)
#30 := (iff #10 false)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#29 := [asserted]: #12
[mp #29 #45]: false
unsat
3e0305075f83d65498b4a11b8ca72526b8e2d46d 134 0
#2 := false
decl f5 :: S1
#14 := f5
decl f1 :: S1
#4 := f1
#59 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#74 := (and #41 #59)
#80 := (not #74)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#81 := (or #44 #80)
#150 := (iff #81 false)
#145 := (or false false)
#148 := (iff #145 false)
#149 := [rewrite]: #148
#146 := (iff #81 #145)
#143 := (iff #80 false)
#1 := true
#138 := (not true)
#141 := (iff #138 false)
#142 := [rewrite]: #141
#139 := (iff #80 #138)
#136 := (iff #74 true)
#131 := (and true true)
#134 := (iff #131 true)
#135 := [rewrite]: #134
#132 := (iff #74 #131)
#129 := (iff #59 true)
#86 := (not #81)
#65 := (not #59)
#50 := (not #41)
#108 := (or #50 #44 #65 #86)
#111 := (not #108)
#11 := (= f4 f1)
#15 := (= f5 f1)
#9 := (= f3 f1)
#18 := (and #9 #15)
#19 := (implies #18 #11)
#20 := (not #19)
#16 := (implies #15 #11)
#17 := (not #16)
#21 := (implies #17 #20)
#12 := (implies #9 #11)
#13 := (not #12)
#22 := (implies #13 #21)
#23 := (not #22)
#114 := (iff #23 #111)
#66 := (or #44 #65)
#92 := (or #66 #86)
#51 := (or #50 #44)
#100 := (or #51 #92)
#105 := (not #100)
#112 := (iff #105 #111)
#109 := (iff #100 #108)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#106 := (iff #23 #105)
#103 := (iff #22 #100)
#56 := (not #51)
#97 := (implies #56 #92)
#101 := (iff #97 #100)
#102 := [rewrite]: #101
#98 := (iff #22 #97)
#95 := (iff #21 #92)
#71 := (not #66)
#89 := (implies #71 #86)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #21 #89)
#87 := (iff #20 #86)
#84 := (iff #19 #81)
#77 := (implies #74 #44)
#82 := (iff #77 #81)
#83 := [rewrite]: #82
#78 := (iff #19 #77)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#75 := (iff #18 #74)
#60 := (iff #15 #59)
#61 := [rewrite]: #60
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#76 := [monotonicity #43 #61]: #75
#79 := [monotonicity #76 #46]: #78
#85 := [trans #79 #83]: #84
#88 := [monotonicity #85]: #87
#72 := (iff #17 #71)
#69 := (iff #16 #66)
#62 := (implies #59 #44)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #16 #62)
#64 := [monotonicity #61 #46]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70]: #72
#91 := [monotonicity #73 #88]: #90
#96 := [trans #91 #94]: #95
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #55]: #57
#99 := [monotonicity #58 #96]: #98
#104 := [trans #99 #102]: #103
#107 := [monotonicity #104]: #106
#115 := [trans #107 #113]: #114
#40 := [asserted]: #23
#116 := [mp #40 #115]: #111
#120 := [not-or-elim #116]: #59
#130 := [iff-true #120]: #129
#125 := (iff #41 true)
#117 := [not-or-elim #116]: #41
#126 := [iff-true #117]: #125
#133 := [monotonicity #126 #130]: #132
#137 := [trans #133 #135]: #136
#140 := [monotonicity #137]: #139
#144 := [trans #140 #142]: #143
#127 := (iff #44 false)
#118 := (not #44)
#119 := [not-or-elim #116]: #118
#128 := [iff-false #119]: #127
#147 := [monotonicity #128 #144]: #146
#151 := [trans #147 #149]: #150
#121 := [not-or-elim #116]: #81
[mp #121 #151]: false
unsat
00d94d0af0e9abf6798a28ecb39a441c7c299833 30 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#10 := (= f3 f4)
#11 := (not #10)
#12 := (not #11)
#13 := (implies #10 #12)
#14 := (not #13)
#46 := (iff #14 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #14 #41)
#39 := (iff #13 true)
#34 := (implies #10 #10)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #13 #34)
#32 := (iff #12 #10)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #14
[mp #31 #47]: false
unsat
78ecef8a6265ee63380698aee66f7437c6eb9791 162 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#44 := (= f1 f5)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#53 := (not #38)
#70 := (or #53 #44)
#97 := (not #70)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#62 := (or #53 #41)
#96 := (not #62)
#98 := (or #96 #97)
#90 := (not #44)
#93 := (not #41)
#100 := (or #93 #90)
#101 := (not #100)
#104 := (or #53 #101)
#107 := (not #104)
#158 := [hypothesis]: #107
#145 := (or #104 #100)
#146 := [def-axiom]: #145
#159 := [unit-resolution #146 #158]: #100
#143 := (or #104 #38)
#144 := [def-axiom]: #143
#160 := [unit-resolution #144 #158]: #38
#99 := (not #98)
#156 := (or #99 #104)
#113 := (iff #98 #104)
#47 := (and #41 #44)
#54 := (or #53 #47)
#84 := (not #54)
#75 := (and #62 #70)
#85 := (iff #75 #84)
#116 := (iff #85 #113)
#110 := (iff #99 #107)
#114 := (iff #110 #113)
#115 := [rewrite]: #114
#111 := (iff #85 #110)
#108 := (iff #84 #107)
#105 := (iff #54 #104)
#102 := (iff #47 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#109 := [monotonicity #106]: #108
#94 := (iff #75 #99)
#95 := [rewrite]: #94
#112 := [monotonicity #95 #109]: #111
#117 := [trans #112 #115]: #116
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (and #16 #17)
#14 := (and #11 #13)
#15 := (implies #9 #14)
#19 := (iff #15 #18)
#20 := (not #19)
#88 := (iff #20 #85)
#78 := (iff #54 #75)
#81 := (not #78)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #20 #81)
#79 := (iff #19 #78)
#76 := (iff #18 #75)
#73 := (iff #17 #70)
#67 := (implies #38 #44)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #17 #67)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#69 := [monotonicity #40 #46]: #68
#74 := [trans #69 #72]: #73
#65 := (iff #16 #62)
#59 := (implies #38 #41)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #16 #59)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#61 := [monotonicity #40 #43]: #60
#66 := [trans #61 #64]: #65
#77 := [monotonicity #66 #74]: #76
#57 := (iff #15 #54)
#50 := (implies #38 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #15 #50)
#48 := (iff #14 #47)
#49 := [monotonicity #43 #46]: #48
#52 := [monotonicity #40 #49]: #51
#58 := [trans #52 #56]: #57
#80 := [monotonicity #58 #77]: #79
#83 := [monotonicity #80]: #82
#89 := [trans #83 #87]: #88
#37 := [asserted]: #20
#92 := [mp #37 #89]: #85
#118 := [mp #92 #117]: #113
#149 := (not #113)
#154 := (or #99 #104 #149)
#155 := [def-axiom]: #154
#157 := [unit-resolution #155 #118]: #156
#161 := [unit-resolution #157 #158]: #99
#131 := (or #98 #62)
#132 := [def-axiom]: #131
#162 := [unit-resolution #132 #161]: #62
#123 := (or #96 #53 #41)
#124 := [def-axiom]: #123
#163 := [unit-resolution #124 #162 #160]: #41
#133 := (or #98 #70)
#134 := [def-axiom]: #133
#164 := [unit-resolution #134 #161]: #70
#129 := (or #97 #53 #44)
#130 := [def-axiom]: #129
#165 := [unit-resolution #130 #164 #160]: #44
#141 := (or #101 #93 #90)
#142 := [def-axiom]: #141
#166 := [unit-resolution #142 #165 #163 #159]: false
#167 := [lemma #166]: #104
#152 := (or #98 #107)
#150 := (or #98 #107 #149)
#151 := [def-axiom]: #150
#153 := [unit-resolution #151 #118]: #152
#168 := [unit-resolution #153 #167]: #98
#169 := [hypothesis]: #53
#119 := (or #62 #38)
#120 := [def-axiom]: #119
#170 := [unit-resolution #120 #169]: #62
#125 := (or #70 #38)
#126 := [def-axiom]: #125
#171 := [unit-resolution #126 #169]: #70
#135 := (or #99 #96 #97)
#136 := [def-axiom]: #135
#172 := [unit-resolution #136 #171 #170 #168]: false
#173 := [lemma #172]: #38
#147 := (or #107 #53 #101)
#148 := [def-axiom]: #147
#174 := [unit-resolution #148 #173 #167]: #101
#137 := (or #100 #41)
#138 := [def-axiom]: #137
#175 := [unit-resolution #138 #174]: #41
#121 := (or #62 #93)
#122 := [def-axiom]: #121
#176 := [unit-resolution #122 #175]: #62
#139 := (or #100 #44)
#140 := [def-axiom]: #139
#177 := [unit-resolution #140 #174]: #44
#127 := (or #70 #90)
#128 := [def-axiom]: #127
#178 := [unit-resolution #128 #177]: #70
[unit-resolution #136 #178 #176 #168]: false
unsat
11d1529c7a7d7cf3014e0031300d5be1524ea6df 40 0
#2 := false
decl f5 :: S2
#11 := f5
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#14 := (distinct f3 f4 f5)
#15 := (not #14)
#12 := (= f3 f5)
#10 := (= f3 f4)
#13 := (and #10 #12)
#35 := (not #13)
#36 := (or #35 #15)
#39 := (not #36)
#16 := (implies #13 #15)
#17 := (not #16)
#40 := (iff #17 #39)
#37 := (iff #16 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#34 := [asserted]: #17
#44 := [mp #34 #41]: #39
#46 := [not-or-elim #44]: #14
#58 := (= f4 f5)
#59 := (not #58)
#57 := (not #12)
#56 := (not #10)
#54 := (and #56 #57 #59)
#55 := (not #54)
#42 := [not-or-elim #44]: #13
#43 := [and-elim #42]: #10
#52 := (or #55 #56)
#53 := [def-axiom]: #52
#66 := [unit-resolution #53 #43]: #55
#62 := (or #15 #54)
#63 := [def-axiom]: #62
#67 := [unit-resolution #63 #66]: #15
[unit-resolution #67 #46]: false
unsat
cbabdc011b8a302b61906c6191f0d7af27e25599 54 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (implies #11 #9)
#13 := (implies #9 #12)
#14 := (not #13)
#68 := (iff #14 false)
#35 := (= f1 f4)
#41 := (not #35)
#32 := (= f1 f3)
#42 := (or #32 #41)
#50 := (not #32)
#51 := (or #50 #42)
#56 := (not #51)
#66 := (iff #56 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #56 #61)
#59 := (iff #51 true)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#57 := (iff #14 #56)
#54 := (iff #13 #51)
#47 := (implies #32 #42)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #13 #47)
#45 := (iff #12 #42)
#38 := (implies #35 #32)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #12 #38)
#33 := (iff #9 #32)
#34 := [rewrite]: #33
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37 #34]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #34 #46]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #55]: #57
#69 := [trans #58 #67]: #68
#31 := [asserted]: #14
[mp #31 #69]: false
unsat
8585364a9de57f2c76854513f54ec42d9a599f64 33 0
#2 := false
decl f3 :: S2
#8 := f3
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f6 :: S2
#11 := f6
#13 := (distinct f6 f4 f5 f3)
#12 := (distinct f3 f4 f5 f6)
#14 := (implies #12 #13)
#15 := (not #14)
#47 := (iff #15 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #15 #42)
#40 := (iff #14 true)
#35 := (implies #12 #12)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #14 #35)
#33 := (iff #13 #12)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#32 := [asserted]: #15
[mp #32 #48]: false
unsat
ae8651ca265765f3bb029935ca54bf350a439257 144 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#44 := (= f1 f5)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
#50 := (not #41)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#59 := (not #38)
#102 := (or #59 #50 #44)
#160 := (iff #102 false)
#155 := (or false false false)
#158 := (iff #155 false)
#159 := [rewrite]: #158
#156 := (iff #102 #155)
#132 := (iff #44 false)
#123 := (not #44)
#105 := (not #102)
#68 := (or #59 #41)
#84 := (not #68)
#111 := (or #59 #44 #84 #105)
#116 := (not #111)
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (implies #16 #17)
#14 := (implies #11 #13)
#15 := (implies #9 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#119 := (iff #20 #116)
#76 := (or #59 #44)
#85 := (or #84 #76)
#51 := (or #50 #44)
#60 := (or #59 #51)
#93 := (not #60)
#94 := (or #93 #85)
#99 := (not #94)
#117 := (iff #99 #116)
#114 := (iff #94 #111)
#108 := (or #105 #85)
#112 := (iff #108 #111)
#113 := [rewrite]: #112
#109 := (iff #94 #108)
#106 := (iff #93 #105)
#103 := (iff #60 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#110 := [monotonicity #107]: #109
#115 := [trans #110 #113]: #114
#118 := [monotonicity #115]: #117
#100 := (iff #20 #99)
#97 := (iff #19 #94)
#90 := (implies #60 #85)
#95 := (iff #90 #94)
#96 := [rewrite]: #95
#91 := (iff #19 #90)
#88 := (iff #18 #85)
#81 := (implies #68 #76)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #18 #81)
#79 := (iff #17 #76)
#73 := (implies #38 #44)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #17 #73)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#75 := [monotonicity #40 #46]: #74
#80 := [trans #75 #78]: #79
#71 := (iff #16 #68)
#65 := (implies #38 #41)
#69 := (iff #65 #68)
#70 := [rewrite]: #69
#66 := (iff #16 #65)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#67 := [monotonicity #40 #43]: #66
#72 := [trans #67 #70]: #71
#83 := [monotonicity #72 #80]: #82
#89 := [trans #83 #87]: #88
#63 := (iff #15 #60)
#56 := (implies #38 #51)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #15 #56)
#54 := (iff #14 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #14 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #40 #55]: #57
#64 := [trans #58 #62]: #63
#92 := [monotonicity #64 #89]: #91
#98 := [trans #92 #96]: #97
#101 := [monotonicity #98]: #100
#120 := [trans #101 #118]: #119
#37 := [asserted]: #20
#121 := [mp #37 #120]: #116
#124 := [not-or-elim #121]: #123
#133 := [iff-false #124]: #132
#153 := (iff #50 false)
#1 := true
#134 := (not true)
#137 := (iff #134 false)
#138 := [rewrite]: #137
#151 := (iff #50 #134)
#149 := (iff #41 true)
#146 := (iff #68 #41)
#141 := (or false #41)
#144 := (iff #141 #41)
#145 := [rewrite]: #144
#142 := (iff #68 #141)
#139 := (iff #59 false)
#135 := (iff #59 #134)
#130 := (iff #38 true)
#122 := [not-or-elim #121]: #38
#131 := [iff-true #122]: #130
#136 := [monotonicity #131]: #135
#140 := [trans #136 #138]: #139
#143 := [monotonicity #140]: #142
#147 := [trans #143 #145]: #146
#125 := [not-or-elim #121]: #68
#148 := [mp #125 #147]: #41
#150 := [iff-true #148]: #149
#152 := [monotonicity #150]: #151
#154 := [trans #152 #138]: #153
#157 := [monotonicity #140 #154 #133]: #156
#161 := [trans #157 #159]: #160
#126 := [not-or-elim #121]: #102
[mp #126 #161]: false
unsat
a785d8d462362aedcc845e3ec87cbb8d13b87ae7 91 0
#2 := false
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#13 := (distinct f3 f4 f5)
#67 := (= f4 f5)
#68 := (not #67)
#63 := (= f3 f5)
#64 := (not #63)
#61 := (= f3 f4)
#62 := (not #61)
#93 := (and #62 #64 #68)
decl f6 :: S2
#11 := f6
#71 := (= f5 f6)
#72 := (not #71)
#69 := (= f4 f6)
#70 := (not #69)
#65 := (= f3 f6)
#66 := (not #65)
#73 := (and #62 #64 #66 #68 #70 #72)
#12 := (distinct f3 f4 f5 f6)
#14 := (distinct f4 f5 f6)
#15 := (and #13 #14)
#35 := (not #12)
#36 := (or #35 #15)
#39 := (not #36)
#16 := (implies #12 #15)
#17 := (not #16)
#40 := (iff #17 #39)
#37 := (iff #16 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#34 := [asserted]: #17
#44 := [mp #34 #41]: #39
#42 := [not-or-elim #44]: #12
#89 := (or #35 #73)
#90 := [def-axiom]: #89
#121 := [unit-resolution #90 #42]: #73
#74 := (not #73)
#75 := (or #74 #62)
#76 := [def-axiom]: #75
#122 := [unit-resolution #76 #121]: #62
#81 := (or #74 #68)
#82 := [def-axiom]: #81
#123 := [unit-resolution #82 #121]: #68
#77 := (or #74 #64)
#78 := [def-axiom]: #77
#124 := [unit-resolution #78 #121]: #64
#101 := (or #93 #61 #63 #67)
#102 := [def-axiom]: #101
#125 := [unit-resolution #102 #124 #123 #122]: #93
#94 := (not #93)
#105 := (or #13 #94)
#106 := [def-axiom]: #105
#126 := [unit-resolution #106 #125]: #13
#107 := (and #68 #70 #72)
#85 := (or #74 #72)
#86 := [def-axiom]: #85
#127 := [unit-resolution #86 #121]: #72
#83 := (or #74 #70)
#84 := [def-axiom]: #83
#128 := [unit-resolution #84 #121]: #70
#115 := (or #107 #67 #69 #71)
#116 := [def-axiom]: #115
#129 := [unit-resolution #116 #128 #127 #123]: #107
#108 := (not #107)
#119 := (or #14 #108)
#120 := [def-axiom]: #119
#130 := [unit-resolution #120 #129]: #14
#54 := (not #14)
#53 := (not #13)
#55 := (or #53 #54)
#43 := (not #15)
#58 := (iff #43 #55)
#56 := (not #55)
#49 := (not #56)
#46 := (iff #49 #55)
#57 := [rewrite]: #46
#50 := (iff #43 #49)
#51 := (iff #15 #56)
#52 := [rewrite]: #51
#48 := [monotonicity #52]: #50
#59 := [trans #48 #57]: #58
#45 := [not-or-elim #44]: #43
#60 := [mp #45 #59]: #55
[unit-resolution #60 #130 #126]: false
unsat
f037e85f433fe4b6db0edebe38d7599d0d5f9a56 121 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#53 := (= f1 f5)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (not #38)
#90 := (or #47 #41 #53)
#137 := (iff #90 false)
#132 := (or false false false)
#135 := (iff #132 false)
#136 := [rewrite]: #135
#133 := (iff #90 #132)
#123 := (iff #53 false)
#113 := (not #53)
#93 := (not #90)
#99 := (or #47 #41 #53 #93)
#104 := (not #99)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (or #11 #14)
#9 := (= f3 f1)
#18 := (implies #9 #17)
#15 := (implies #9 #14)
#12 := (implies #9 #11)
#16 := (or #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#107 := (iff #20 #104)
#67 := (or #41 #53)
#73 := (or #47 #67)
#59 := (or #47 #53)
#48 := (or #47 #41)
#64 := (or #48 #59)
#81 := (not #64)
#82 := (or #81 #73)
#87 := (not #82)
#105 := (iff #87 #104)
#102 := (iff #82 #99)
#96 := (or #93 #73)
#100 := (iff #96 #99)
#101 := [rewrite]: #100
#97 := (iff #82 #96)
#94 := (iff #81 #93)
#91 := (iff #64 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#103 := [trans #98 #101]: #102
#106 := [monotonicity #103]: #105
#88 := (iff #20 #87)
#85 := (iff #19 #82)
#78 := (implies #64 #73)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #19 #78)
#76 := (iff #18 #73)
#70 := (implies #38 #67)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #18 #70)
#68 := (iff #17 #67)
#54 := (iff #14 #53)
#55 := [rewrite]: #54
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#69 := [monotonicity #43 #55]: #68
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#72 := [monotonicity #40 #69]: #71
#77 := [trans #72 #75]: #76
#65 := (iff #16 #64)
#62 := (iff #15 #59)
#56 := (implies #38 #53)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #15 #56)
#58 := [monotonicity #40 #55]: #57
#63 := [trans #58 #61]: #62
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#66 := [monotonicity #52 #63]: #65
#80 := [monotonicity #66 #77]: #79
#86 := [trans #80 #84]: #85
#89 := [monotonicity #86]: #88
#108 := [trans #89 #106]: #107
#37 := [asserted]: #20
#109 := [mp #37 #108]: #104
#114 := [not-or-elim #109]: #113
#124 := [iff-false #114]: #123
#121 := (iff #41 false)
#111 := (not #41)
#112 := [not-or-elim #109]: #111
#122 := [iff-false #112]: #121
#130 := (iff #47 false)
#1 := true
#125 := (not true)
#128 := (iff #125 false)
#129 := [rewrite]: #128
#126 := (iff #47 #125)
#119 := (iff #38 true)
#110 := [not-or-elim #109]: #38
#120 := [iff-true #110]: #119
#127 := [monotonicity #120]: #126
#131 := [trans #127 #129]: #130
#134 := [monotonicity #131 #122 #124]: #133
#138 := [trans #134 #136]: #137
#115 := [not-or-elim #109]: #90
[mp #115 #138]: false
unsat
a79fa106ccc873005f00005d34ba1798389c2876 123 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#38 := (= f1 f4)
decl f3 :: S1
#8 := f3
#35 := (= f1 f3)
#44 := (not #35)
#45 := (or #44 #38)
#53 := (not #45)
#54 := (or #35 #53)
#62 := (not #54)
#63 := (or #35 #62)
#71 := (not #63)
#72 := (or #38 #71)
#140 := (iff #72 false)
#135 := (or false false)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #72 #135)
#133 := (iff #71 false)
#1 := true
#128 := (not true)
#131 := (iff #128 false)
#132 := [rewrite]: #131
#129 := (iff #71 #128)
#126 := (iff #63 true)
#121 := (or #35 #44)
#124 := (iff #121 true)
#125 := [rewrite]: #124
#122 := (iff #63 #121)
#119 := (iff #62 #44)
#117 := (iff #54 #35)
#112 := (or #35 #35)
#115 := (iff #112 #35)
#116 := [rewrite]: #115
#113 := (iff #54 #112)
#110 := (iff #53 #35)
#105 := (not #44)
#108 := (iff #105 #35)
#109 := [rewrite]: #108
#106 := (iff #53 #105)
#103 := (iff #45 #44)
#98 := (or #44 false)
#101 := (iff #98 #44)
#102 := [rewrite]: #101
#99 := (iff #45 #98)
#96 := (iff #38 false)
#89 := (not #38)
#80 := (not #72)
#81 := (or #38 #80)
#86 := (not #81)
#11 := (= f4 f1)
#9 := (= f3 f1)
#12 := (implies #9 #11)
#13 := (implies #12 #9)
#14 := (implies #13 #9)
#15 := (implies #14 #11)
#16 := (implies #15 #11)
#17 := (not #16)
#87 := (iff #17 #86)
#84 := (iff #16 #81)
#77 := (implies #72 #38)
#82 := (iff #77 #81)
#83 := [rewrite]: #82
#78 := (iff #16 #77)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#75 := (iff #15 #72)
#68 := (implies #63 #38)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #15 #68)
#66 := (iff #14 #63)
#59 := (implies #54 #35)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #14 #59)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#57 := (iff #13 #54)
#50 := (implies #45 #35)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #13 #50)
#48 := (iff #12 #45)
#41 := (implies #35 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#43 := [monotonicity #37 #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49 #37]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58 #37]: #60
#67 := [trans #61 #65]: #66
#70 := [monotonicity #67 #40]: #69
#76 := [trans #70 #74]: #75
#79 := [monotonicity #76 #40]: #78
#85 := [trans #79 #83]: #84
#88 := [monotonicity #85]: #87
#34 := [asserted]: #17
#91 := [mp #34 #88]: #86
#90 := [not-or-elim #91]: #89
#97 := [iff-false #90]: #96
#100 := [monotonicity #97]: #99
#104 := [trans #100 #102]: #103
#107 := [monotonicity #104]: #106
#111 := [trans #107 #109]: #110
#114 := [monotonicity #111]: #113
#118 := [trans #114 #116]: #117
#120 := [monotonicity #118]: #119
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#130 := [monotonicity #127]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #97 #134]: #136
#141 := [trans #137 #139]: #140
#92 := [not-or-elim #91]: #72
[mp #92 #141]: false
unsat
7e097d3ef4e0c4927519d96187a725503177b49b 60 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (not #11)
#15 := (implies #13 #14)
#12 := (implies #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#74 := (iff #17 false)
#1 := true
#69 := (not true)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #17 #69)
#67 := (iff #16 true)
#38 := (= f1 f4)
#35 := (= f1 f3)
#44 := (not #35)
#45 := (or #44 #38)
#62 := (implies #45 #45)
#65 := (iff #62 true)
#66 := [rewrite]: #65
#63 := (iff #16 #62)
#60 := (iff #15 #45)
#50 := (not #38)
#55 := (implies #50 #44)
#58 := (iff #55 #45)
#59 := [rewrite]: #58
#56 := (iff #15 #55)
#53 := (iff #14 #44)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#54 := [monotonicity #37]: #53
#51 := (iff #13 #50)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#52 := [monotonicity #40]: #51
#57 := [monotonicity #52 #54]: #56
#61 := [trans #57 #59]: #60
#48 := (iff #12 #45)
#41 := (implies #35 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#43 := [monotonicity #37 #40]: #42
#49 := [trans #43 #47]: #48
#64 := [monotonicity #49 #61]: #63
#68 := [trans #64 #66]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#34 := [asserted]: #17
[mp #34 #75]: false
unsat
273a6dc6f10616be4347838d6cbb54a0b0ad5636 25 0
#2 := false
#8 := (:var 0 S2)
#9 := (= #8 #8)
#10 := (forall (vars (?v0 S2)) #9)
#11 := (not #10)
#43 := (iff #11 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #11 #38)
#36 := (iff #10 true)
#31 := (forall (vars (?v0 S2)) true)
#34 := (iff #31 true)
#35 := [elim-unused]: #34
#32 := (iff #10 #31)
#29 := (iff #9 true)
#30 := [rewrite]: #29
#33 := [quant-intro #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#28 := [asserted]: #11
[mp #28 #44]: false
unsat
cb74096d43b27b6df4bed4b142ce429518455d83 121 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#44 := (= f1 f5)
decl f4 :: S1
#10 := f4
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#53 := (not #38)
#90 := (or #53 #41 #44)
#137 := (iff #90 false)
#132 := (or false false false)
#135 := (iff #132 false)
#136 := [rewrite]: #135
#133 := (iff #90 #132)
#123 := (iff #44 false)
#113 := (not #44)
#93 := (not #90)
#99 := (or #53 #41 #44 #93)
#104 := (not #99)
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (or #16 #17)
#14 := (or #11 #13)
#15 := (implies #9 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#107 := (iff #20 #104)
#70 := (or #53 #44)
#62 := (or #53 #41)
#75 := (or #62 #70)
#47 := (or #41 #44)
#54 := (or #53 #47)
#81 := (not #54)
#82 := (or #81 #75)
#87 := (not #82)
#105 := (iff #87 #104)
#102 := (iff #82 #99)
#96 := (or #93 #75)
#100 := (iff #96 #99)
#101 := [rewrite]: #100
#97 := (iff #82 #96)
#94 := (iff #81 #93)
#91 := (iff #54 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#103 := [trans #98 #101]: #102
#106 := [monotonicity #103]: #105
#88 := (iff #20 #87)
#85 := (iff #19 #82)
#78 := (implies #54 #75)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #19 #78)
#76 := (iff #18 #75)
#73 := (iff #17 #70)
#67 := (implies #38 #44)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #17 #67)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#69 := [monotonicity #40 #46]: #68
#74 := [trans #69 #72]: #73
#65 := (iff #16 #62)
#59 := (implies #38 #41)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #16 #59)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#61 := [monotonicity #40 #43]: #60
#66 := [trans #61 #64]: #65
#77 := [monotonicity #66 #74]: #76
#57 := (iff #15 #54)
#50 := (implies #38 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #15 #50)
#48 := (iff #14 #47)
#49 := [monotonicity #43 #46]: #48
#52 := [monotonicity #40 #49]: #51
#58 := [trans #52 #56]: #57
#80 := [monotonicity #58 #77]: #79
#86 := [trans #80 #84]: #85
#89 := [monotonicity #86]: #88
#108 := [trans #89 #106]: #107
#37 := [asserted]: #20
#109 := [mp #37 #108]: #104
#114 := [not-or-elim #109]: #113
#124 := [iff-false #114]: #123
#121 := (iff #41 false)
#111 := (not #41)
#112 := [not-or-elim #109]: #111
#122 := [iff-false #112]: #121
#130 := (iff #53 false)
#1 := true
#125 := (not true)
#128 := (iff #125 false)
#129 := [rewrite]: #128
#126 := (iff #53 #125)
#119 := (iff #38 true)
#110 := [not-or-elim #109]: #38
#120 := [iff-true #110]: #119
#127 := [monotonicity #120]: #126
#131 := [trans #127 #129]: #130
#134 := [monotonicity #131 #122 #124]: #133
#138 := [trans #134 #136]: #137
#115 := [not-or-elim #109]: #90
[mp #115 #138]: false
unsat
2b9ce0054ea55ee81c55715bd6d24aa6896b491c 34 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (iff #11 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#31 := (= f1 #9)
#34 := (forall (vars (?v0 S2)) #31)
#37 := (iff #34 #34)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (iff #11 #34)
#32 := (iff #10 #31)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#39 := [monotonicity #36 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#30 := [asserted]: #13
[mp #30 #50]: false
unsat
f67715569c1aa586d3c8e9a94e103b17f1f34614 84 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#38 := (= f1 f4)
#53 := (not #38)
#97 := [hypothesis]: #53
decl f3 :: S1
#8 := f3
#35 := (= f1 f3)
#44 := (not #35)
#45 := (or #44 #38)
#54 := (or #35 #53)
#59 := (and #45 #54)
#62 := (iff #35 #38)
#68 := (not #59)
#69 := (or #68 #62)
#74 := (not #69)
#11 := (= f4 f1)
#9 := (= f3 f1)
#15 := (iff #9 #11)
#13 := (implies #11 #9)
#12 := (implies #9 #11)
#14 := (and #12 #13)
#16 := (implies #14 #15)
#17 := (not #16)
#75 := (iff #17 #74)
#72 := (iff #16 #69)
#65 := (implies #59 #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #16 #65)
#63 := (iff #15 #62)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#64 := [monotonicity #37 #40]: #63
#60 := (iff #14 #59)
#57 := (iff #13 #54)
#50 := (implies #38 #35)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #13 #50)
#52 := [monotonicity #40 #37]: #51
#58 := [trans #52 #56]: #57
#48 := (iff #12 #45)
#41 := (implies #35 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#43 := [monotonicity #37 #40]: #42
#49 := [trans #43 #47]: #48
#61 := [monotonicity #49 #58]: #60
#67 := [monotonicity #61 #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#34 := [asserted]: #17
#79 := [mp #34 #76]: #74
#77 := [not-or-elim #79]: #59
#78 := [and-elim #77]: #45
#98 := [unit-resolution #78 #97]: #44
#89 := (or #38 #35)
#90 := (iff #38 #44)
#81 := (not #62)
#91 := (iff #81 #90)
#92 := [rewrite]: #91
#82 := [not-or-elim #79]: #81
#93 := [mp #82 #92]: #90
#94 := (not #90)
#95 := (or #38 #35 #94)
#88 := [def-axiom]: #95
#86 := [unit-resolution #88 #93]: #89
#99 := [unit-resolution #86 #98 #97]: false
#100 := [lemma #99]: #38
#80 := [and-elim #77]: #54
#101 := [unit-resolution #80 #100]: #35
#83 := (or #53 #44)
#87 := (or #53 #44 #94)
#85 := [def-axiom]: #87
#96 := [unit-resolution #85 #93]: #83
[unit-resolution #96 #101 #100]: false
unsat
4905f6794c524726db3be755d752d3ea53fc4f9a 95 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#74 := ?v0!0
#75 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#76 := (= f1 #75)
#68 := (not #76)
decl ?v1!1 :: S2
#85 := ?v1!1
#86 := (f3 ?v1!1)
#87 := (= f1 #86)
#105 := (or #76 #87)
#108 := (not #105)
#111 := (and #76 #108)
#88 := (or #87 #76)
#89 := (not #88)
#82 := (not #68)
#95 := (and #82 #89)
#112 := (iff #95 #111)
#109 := (iff #89 #108)
#106 := (iff #88 #105)
#107 := [rewrite]: #106
#110 := [monotonicity #107]: #109
#103 := (iff #82 #76)
#104 := [rewrite]: #103
#113 := [monotonicity #104 #110]: #112
#11 := (:var 1 S2)
#12 := (f3 #11)
#39 := (= f1 #12)
#8 := (:var 0 S2)
#9 := (f3 #8)
#36 := (= f1 #9)
#45 := (or #36 #39)
#50 := (forall (vars (?v1 S2)) #45)
#56 := (not #36)
#57 := (or #56 #50)
#62 := (forall (vars (?v0 S2)) #57)
#65 := (not #62)
#98 := (~ #65 #95)
#77 := (or #36 #76)
#71 := (forall (vars (?v1 S2)) #77)
#78 := (or #68 #71)
#79 := (not #78)
#96 := (~ #79 #95)
#90 := (not #71)
#91 := (~ #90 #89)
#92 := [sk]: #91
#83 := (~ #82 #82)
#84 := [refl]: #83
#97 := [nnf-neg #84 #92]: #96
#80 := (~ #65 #79)
#81 := [sk]: #80
#99 := [trans #81 #97]: #98
#10 := (= #9 f1)
#13 := (= #12 f1)
#14 := (or #13 #10)
#15 := (forall (vars (?v1 S2)) #14)
#16 := (implies #10 #15)
#17 := (forall (vars (?v0 S2)) #16)
#18 := (not #17)
#66 := (iff #18 #65)
#63 := (iff #17 #62)
#60 := (iff #16 #57)
#53 := (implies #36 #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #16 #53)
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#42 := (or #39 #36)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #14 #42)
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#40 := (iff #13 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41 #38]: #43
#49 := [trans #44 #47]: #48
#52 := [quant-intro #49]: #51
#55 := [monotonicity #38 #52]: #54
#61 := [trans #55 #59]: #60
#64 := [quant-intro #61]: #63
#67 := [monotonicity #64]: #66
#35 := [asserted]: #18
#70 := [mp #35 #67]: #65
#100 := [mp~ #70 #99]: #95
#101 := [mp #100 #113]: #111
#114 := [and-elim #101]: #108
#115 := [not-or-elim #114]: #68
#102 := [and-elim #101]: #76
[unit-resolution #102 #115]: false
unsat
8abc924327822787c2f5c4e6e7680303fbae57f8 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (iff #11 #9)
#12 := (iff #9 #11)
#14 := (iff #12 #13)
#15 := (not #14)
#61 := (iff #15 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #15 #56)
#54 := (iff #14 true)
#36 := (= f1 f4)
#33 := (= f1 f3)
#39 := (iff #33 #36)
#49 := (iff #39 #39)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #14 #49)
#47 := (iff #13 #39)
#42 := (iff #36 #33)
#45 := (iff #42 #39)
#46 := [rewrite]: #45
#43 := (iff #13 #42)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #35]: #43
#48 := [trans #44 #46]: #47
#40 := (iff #12 #39)
#41 := [monotonicity #35 #38]: #40
#51 := [monotonicity #41 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#32 := [asserted]: #15
[mp #32 #62]: false
unsat
48a51f989350a0e584db03a2950a272906be29b0 300 0
#2 := false
decl f4 :: (-> S2 S1)
decl ?v0!1 :: S2
#92 := ?v0!1
#610 := (f4 ?v0!1)
decl f1 :: S1
#4 := f1
#611 := (= f1 #610)
#612 := (not #611)
decl f3 :: (-> S2 S1)
#93 := (f3 ?v0!1)
#94 := (= f1 #93)
#95 := (not #94)
#613 := (or #95 #612)
decl ?v0!0 :: S2
#81 := ?v0!0
#82 := (f4 ?v0!0)
#83 := (= f1 #82)
#84 := (f3 ?v0!0)
#85 := (= f1 #84)
#91 := (not #85)
#90 := (not #83)
#99 := (or #90 #91)
#100 := (not #99)
#364 := [hypothesis]: #99
#8 := (:var 0 S2)
#11 := (f4 #8)
#666 := (pattern #11)
#9 := (f3 #8)
#665 := (pattern #9)
#40 := (= f1 #11)
#170 := (not #40)
#37 := (= f1 #9)
#169 := (not #37)
#171 := (or #169 #170)
#172 := (not #171)
#667 := (forall (vars (?v0 S2)) (:pat #665 #666) #172)
#680 := (forall (vars (?v0 S2)) (:pat #666) #40)
#685 := (not #680)
#672 := (forall (vars (?v0 S2)) (:pat #665) #37)
#677 := (not #672)
#688 := (or #677 #685)
#691 := (not #688)
#664 := [hypothesis]: #691
#249 := (or #688 #672)
#336 := [def-axiom]: #249
#654 := [unit-resolution #336 #664]: #672
decl ?v0!2 :: S2
#101 := ?v0!2
#102 := (f4 ?v0!2)
#103 := (= f1 #102)
#250 := (or #688 #680)
#337 := [def-axiom]: #250
#655 := [unit-resolution #337 #664]: #680
#339 := (or #103 #685)
#329 := [hypothesis]: #680
#104 := (not #103)
#340 := [hypothesis]: #104
#341 := (or #685 #103)
#269 := [quant-inst]: #341
#342 := [unit-resolution #269 #340 #329]: false
#343 := [lemma #342]: #339
#315 := [unit-resolution #343 #655]: #103
#653 := (or #85 #677)
#322 := [hypothesis]: #672
#657 := [hypothesis]: #91
#659 := (or #677 #85)
#316 := [quant-inst]: #659
#446 := [unit-resolution #316 #657 #322]: false
#327 := [lemma #446]: #653
#656 := [unit-resolution #327 #654]: #85
#663 := (or #83 #685)
#328 := [hypothesis]: #90
#661 := (or #685 #83)
#662 := [quant-inst]: #661
#660 := [unit-resolution #662 #328 #329]: false
#658 := [lemma #660]: #663
#299 := [unit-resolution #658 #655]: #83
#163 := (or #90 #91 #95 #104)
#132 := (and #83 #85)
#135 := (not #132)
#141 := (or #95 #104 #135)
#166 := (iff #141 #163)
#160 := (or #95 #104 #99)
#164 := (iff #160 #163)
#165 := [rewrite]: #164
#161 := (iff #141 #160)
#158 := (iff #135 #99)
#153 := (not #100)
#156 := (iff #153 #99)
#157 := [rewrite]: #156
#154 := (iff #135 #153)
#108 := (iff #132 #100)
#109 := [rewrite]: #108
#155 := [monotonicity #109]: #154
#159 := [trans #155 #157]: #158
#162 := [monotonicity #159]: #161
#167 := [trans #162 #165]: #166
#52 := (forall (vars (?v0 S2)) #40)
#49 := (forall (vars (?v0 S2)) #37)
#55 := (and #49 #52)
#43 := (and #37 #40)
#46 := (forall (vars (?v0 S2)) #43)
#146 := (or #46 #55)
#149 := (and #141 #146)
#124 := (or #55 #46)
#86 := (and #85 #83)
#87 := (not #86)
#110 := (or #95 #104)
#125 := (or #110 #87)
#126 := (and #125 #124)
#150 := (iff #126 #149)
#147 := (iff #124 #146)
#148 := [rewrite]: #147
#144 := (iff #125 #141)
#138 := (or #110 #135)
#142 := (iff #138 #141)
#143 := [rewrite]: #142
#139 := (iff #125 #138)
#136 := (iff #87 #135)
#133 := (iff #86 #132)
#134 := [rewrite]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#145 := [trans #140 #143]: #144
#151 := [monotonicity #145 #148]: #150
#64 := (not #46)
#65 := (iff #55 #64)
#127 := (~ #65 #126)
#88 := (~ #64 #87)
#89 := [sk]: #88
#73 := (not #64)
#70 := (~ #73 #46)
#78 := (~ #46 #46)
#76 := (~ #43 #43)
#77 := [refl]: #76
#79 := [nnf-pos #77]: #78
#80 := [nnf-neg #79]: #70
#122 := (~ #55 #55)
#120 := (~ #52 #52)
#118 := (~ #40 #40)
#119 := [refl]: #118
#121 := [nnf-pos #119]: #120
#116 := (~ #49 #49)
#114 := (~ #37 #37)
#115 := [refl]: #114
#117 := [nnf-pos #115]: #116
#123 := [monotonicity #117 #121]: #122
#111 := (not #55)
#112 := (~ #111 #110)
#105 := (not #52)
#106 := (~ #105 #104)
#107 := [sk]: #106
#96 := (not #49)
#97 := (~ #96 #95)
#98 := [sk]: #97
#113 := [nnf-neg #98 #107]: #112
#128 := [nnf-pos #113 #123 #80 #89]: #127
#12 := (= #11 f1)
#16 := (forall (vars (?v0 S2)) #12)
#10 := (= #9 f1)
#15 := (forall (vars (?v0 S2)) #10)
#17 := (and #15 #16)
#13 := (and #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#18 := (iff #14 #17)
#19 := (not #18)
#68 := (iff #19 #65)
#58 := (iff #46 #55)
#61 := (not #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #19 #61)
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#53 := (iff #16 #52)
#41 := (iff #12 #40)
#42 := [rewrite]: #41
#54 := [quant-intro #42]: #53
#50 := (iff #15 #49)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#51 := [quant-intro #39]: #50
#57 := [monotonicity #51 #54]: #56
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#45 := [monotonicity #39 #42]: #44
#48 := [quant-intro #45]: #47
#60 := [monotonicity #48 #57]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#36 := [asserted]: #19
#72 := [mp #36 #69]: #65
#129 := [mp~ #72 #128]: #126
#130 := [mp #129 #151]: #149
#131 := [and-elim #130]: #141
#168 := [mp #131 #167]: #163
#640 := [unit-resolution #168 #299 #656 #315]: #95
#314 := (or #677 #94)
#319 := [quant-inst]: #314
#303 := [unit-resolution #319 #640 #654]: false
#304 := [lemma #303]: #688
#694 := (or #667 #691)
#178 := (or #96 #105)
#179 := (not #178)
#175 := (forall (vars (?v0 S2)) #172)
#182 := (or #175 #179)
#695 := (iff #182 #694)
#692 := (iff #179 #691)
#689 := (iff #178 #688)
#686 := (iff #105 #685)
#683 := (iff #52 #680)
#681 := (iff #40 #40)
#682 := [refl]: #681
#684 := [quant-intro #682]: #683
#687 := [monotonicity #684]: #686
#678 := (iff #96 #677)
#675 := (iff #49 #672)
#673 := (iff #37 #37)
#674 := [refl]: #673
#676 := [quant-intro #674]: #675
#679 := [monotonicity #676]: #678
#690 := [monotonicity #679 #687]: #689
#693 := [monotonicity #690]: #692
#670 := (iff #175 #667)
#668 := (iff #172 #172)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#696 := [monotonicity #671 #693]: #695
#183 := (iff #146 #182)
#180 := (iff #55 #179)
#181 := [rewrite]: #180
#176 := (iff #46 #175)
#173 := (iff #43 #172)
#174 := [rewrite]: #173
#177 := [quant-intro #174]: #176
#184 := [monotonicity #177 #181]: #183
#152 := [and-elim #130]: #146
#185 := [mp #152 #184]: #182
#697 := [mp #185 #696]: #694
#257 := [unit-resolution #697 #304]: #667
#646 := (not #667)
#641 := (or #646 #100)
#305 := (or #91 #90)
#306 := (not #305)
#647 := (or #646 #306)
#648 := (iff #647 #641)
#290 := (iff #641 #641)
#291 := [rewrite]: #290
#644 := (iff #306 #100)
#642 := (iff #305 #99)
#643 := [rewrite]: #642
#645 := [monotonicity #643]: #644
#650 := [monotonicity #645]: #648
#651 := [trans #650 #291]: #648
#285 := [quant-inst]: #647
#649 := [mp #285 #651]: #641
#634 := [unit-resolution #649 #257 #364]: false
#635 := [lemma #634]: #100
#652 := (or #99 #83)
#638 := [def-axiom]: #652
#608 := [unit-resolution #638 #635]: #83
#639 := (or #99 #85)
#361 := [def-axiom]: #639
#614 := [unit-resolution #361 #635]: #85
#357 := (f3 ?v0!2)
#358 := (= f1 #357)
#632 := (not #358)
#637 := (or #104 #632)
#349 := (not #637)
#466 := [hypothesis]: #637
#629 := (or #646 #349)
#636 := (or #632 #104)
#633 := (not #636)
#344 := (or #646 #633)
#630 := (iff #344 #629)
#631 := (iff #629 #629)
#620 := [rewrite]: #631
#350 := (iff #633 #349)
#347 := (iff #636 #637)
#348 := [rewrite]: #347
#628 := [monotonicity #348]: #350
#627 := [monotonicity #628]: #630
#621 := [trans #627 #620]: #630
#626 := [quant-inst]: #344
#622 := [mp #626 #621]: #629
#467 := [unit-resolution #622 #257 #466]: false
#468 := [lemma #467]: #349
#617 := (or #637 #103)
#618 := [def-axiom]: #617
#604 := [unit-resolution #618 #468]: #103
#605 := [unit-resolution #168 #604 #614 #608]: #95
#616 := (or #613 #94)
#445 := [def-axiom]: #616
#603 := [unit-resolution #445 #605]: #613
#607 := (not #613)
#615 := (or #646 #607)
#609 := [quant-inst]: #615
[unit-resolution #609 #257 #603]: false
unsat
3731fdf00230f94750072246058d6aec5d30ad57 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (iff #9 #10)
#12 := (not #11)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#44 := (not false)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #12 #44)
#42 := (iff #11 false)
#31 := (= f1 f3)
#34 := (not #31)
#37 := (iff #31 #34)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#32 := (iff #9 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#39 := [monotonicity #33 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#30 := [asserted]: #13
[mp #30 #57]: false
unsat
8d1c135b088bf498c079d2958e8764a8092679cf 201 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#621 := (pattern #9)
decl f1 :: S1
#4 := f1
#36 := (= f1 #9)
#622 := (forall (vars (?v0 S2)) (:pat #621) #36)
decl f4 :: S1
#12 := f4
#42 := (= f1 f4)
#90 := (not #42)
decl ?v0!0 :: S2
#81 := ?v0!0
#82 := (f3 ?v0!0)
#83 := (= f1 #82)
#104 := (or #42 #83)
#105 := (not #104)
decl ?v0!1 :: S2
#96 := ?v0!1
#97 := (f3 ?v0!1)
#98 := (= f1 #97)
#118 := (or #42 #98)
#48 := (or #36 #42)
#627 := (forall (vars (?v0 S2)) (:pat #621) #48)
#121 := (not #118)
#612 := [hypothesis]: #121
#283 := (or #118 #90)
#294 := [def-axiom]: #283
#253 := [unit-resolution #294 #612]: #90
#615 := (not #622)
#295 := (not #98)
#223 := (or #118 #295)
#296 := [def-axiom]: #223
#596 := [unit-resolution #296 #612]: #295
#270 := (or #615 #98)
#276 := [hypothesis]: #622
#613 := [hypothesis]: #295
#402 := [quant-inst]: #270
#609 := [unit-resolution #402 #613 #276]: false
#281 := [lemma #609]: #270
#257 := [unit-resolution #281 #596]: #615
#632 := (or #622 #42 #627)
#51 := (forall (vars (?v0 S2)) #48)
#39 := (forall (vars (?v0 S2)) #36)
#130 := (or #39 #42 #51)
#633 := (iff #130 #632)
#630 := (iff #51 #627)
#628 := (iff #48 #48)
#629 := [refl]: #628
#631 := [quant-intro #629]: #630
#625 := (iff #39 #622)
#623 := (iff #36 #36)
#624 := [refl]: #623
#626 := [quant-intro #624]: #625
#634 := [monotonicity #626 #631]: #633
#84 := (not #83)
#124 := (and #90 #84)
#127 := (or #121 #124)
#133 := (and #127 #130)
#45 := (or #39 #42)
#110 := (or #51 #45)
#93 := (and #84 #90)
#99 := (or #98 #42)
#100 := (not #99)
#111 := (or #100 #93)
#112 := (and #111 #110)
#134 := (iff #112 #133)
#131 := (iff #110 #130)
#132 := [rewrite]: #131
#128 := (iff #111 #127)
#125 := (iff #93 #124)
#126 := [rewrite]: #125
#122 := (iff #100 #121)
#119 := (iff #99 #118)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#129 := [monotonicity #123 #126]: #128
#135 := [monotonicity #129 #132]: #134
#60 := (not #45)
#61 := (iff #51 #60)
#113 := (~ #61 #112)
#94 := (~ #60 #93)
#91 := (~ #90 #90)
#92 := [refl]: #91
#85 := (not #39)
#86 := (~ #85 #84)
#87 := [sk]: #86
#95 := [nnf-neg #87 #92]: #94
#78 := (not #60)
#79 := (~ #78 #45)
#76 := (~ #45 #45)
#69 := (~ #42 #42)
#66 := [refl]: #69
#74 := (~ #39 #39)
#72 := (~ #36 #36)
#73 := [refl]: #72
#75 := [nnf-pos #73]: #74
#77 := [monotonicity #75 #66]: #76
#80 := [nnf-neg #77]: #79
#108 := (~ #51 #51)
#106 := (~ #48 #48)
#107 := [refl]: #106
#109 := [nnf-pos #107]: #108
#101 := (not #51)
#102 := (~ #101 #100)
#103 := [sk]: #102
#114 := [nnf-pos #103 #109 #80 #95]: #113
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (or #10 #13)
#16 := (forall (vars (?v0 S2)) #15)
#11 := (forall (vars (?v0 S2)) #10)
#14 := (or #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#64 := (iff #18 #61)
#54 := (iff #45 #51)
#57 := (not #54)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #18 #57)
#55 := (iff #17 #54)
#52 := (iff #16 #51)
#49 := (iff #15 #48)
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#50 := [monotonicity #38 #44]: #49
#53 := [quant-intro #50]: #52
#46 := (iff #14 #45)
#40 := (iff #11 #39)
#41 := [quant-intro #38]: #40
#47 := [monotonicity #41 #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#35 := [asserted]: #18
#68 := [mp #35 #65]: #61
#115 := [mp~ #68 #114]: #112
#116 := [mp #115 #135]: #133
#136 := [and-elim #116]: #130
#635 := [mp #136 #634]: #632
#258 := [unit-resolution #635 #257 #253]: #627
#282 := (not #627)
#616 := (or #282 #42 #98)
#617 := (or #282 #99)
#273 := (iff #617 #616)
#619 := (or #282 #118)
#610 := (iff #619 #616)
#268 := [rewrite]: #610
#614 := (iff #617 #619)
#620 := [monotonicity #120]: #614
#611 := [trans #620 #268]: #273
#618 := [quant-inst]: #617
#269 := [mp #618 #611]: #616
#259 := [unit-resolution #269 #253 #596 #258]: false
#260 := [lemma #259]: #118
#140 := (or #105 #121)
#143 := (iff #127 #140)
#137 := (or #121 #105)
#141 := (iff #137 #140)
#142 := [rewrite]: #141
#138 := (iff #127 #137)
#88 := (iff #124 #105)
#89 := [rewrite]: #88
#139 := [monotonicity #89]: #138
#144 := [trans #139 #142]: #143
#117 := [and-elim #116]: #127
#145 := [mp #117 #144]: #140
#594 := [unit-resolution #145 #260]: #105
#203 := (or #104 #90)
#290 := [def-axiom]: #203
#301 := [unit-resolution #290 #594]: #90
#608 := [hypothesis]: #627
#204 := (or #104 #84)
#291 := [def-axiom]: #204
#595 := [unit-resolution #291 #594]: #84
#601 := (or #282 #42 #83)
#598 := (or #83 #42)
#602 := (or #282 #598)
#245 := (iff #602 #601)
#603 := (or #282 #104)
#606 := (iff #603 #601)
#244 := [rewrite]: #606
#239 := (iff #602 #603)
#599 := (iff #598 #104)
#600 := [rewrite]: #599
#604 := [monotonicity #600]: #239
#607 := [trans #604 #244]: #245
#597 := [quant-inst]: #602
#605 := [mp #597 #607]: #601
#317 := [unit-resolution #605 #301 #595 #608]: false
#318 := [lemma #317]: #282
#319 := [unit-resolution #635 #318 #301]: #622
#320 := (or #615 #83)
#211 := [quant-inst]: #320
[unit-resolution #211 #595 #319]: false
unsat
c4682bd721e64af9e51bd86d6d03d59662baa782 60 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (not #11)
#15 := (implies #13 #14)
#12 := (implies #9 #11)
#16 := (iff #12 #15)
#17 := (not #16)
#74 := (iff #17 false)
#1 := true
#69 := (not true)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #17 #69)
#67 := (iff #16 true)
#38 := (= f1 f4)
#35 := (= f1 f3)
#44 := (not #35)
#45 := (or #44 #38)
#62 := (iff #45 #45)
#65 := (iff #62 true)
#66 := [rewrite]: #65
#63 := (iff #16 #62)
#60 := (iff #15 #45)
#50 := (not #38)
#55 := (implies #50 #44)
#58 := (iff #55 #45)
#59 := [rewrite]: #58
#56 := (iff #15 #55)
#53 := (iff #14 #44)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#54 := [monotonicity #37]: #53
#51 := (iff #13 #50)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#52 := [monotonicity #40]: #51
#57 := [monotonicity #52 #54]: #56
#61 := [trans #57 #59]: #60
#48 := (iff #12 #45)
#41 := (implies #35 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#43 := [monotonicity #37 #40]: #42
#49 := [trans #43 #47]: #48
#64 := [monotonicity #49 #61]: #63
#68 := [trans #64 #66]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#34 := [asserted]: #17
[mp #34 #75]: false
unsat
c2e19ee7461e4fbfe65c34d98111e3914f852baf 244 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#81 := ?v0!0
#82 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#83 := (= f1 #82)
#84 := (not #83)
decl f4 :: S1
#12 := f4
#42 := (= f1 f4)
#90 := (not #42)
#270 := (or #90 #84)
decl ?v0!1 :: S2
#96 := ?v0!1
#97 := (f3 ?v0!1)
#98 := (= f1 #97)
#104 := (not #98)
#105 := (or #90 #104)
#88 := (not #105)
#623 := [hypothesis]: #105
#8 := (:var 0 S2)
#9 := (f3 #8)
#647 := (pattern #9)
#36 := (= f1 #9)
#160 := (not #36)
#161 := (or #160 #90)
#162 := (not #161)
#662 := (forall (vars (?v0 S2)) (:pat #647) #162)
#648 := (forall (vars (?v0 S2)) (:pat #647) #36)
#653 := (not #648)
#656 := (or #653 #90)
#659 := (not #656)
#302 := [hypothesis]: #659
#229 := (or #656 #648)
#316 := [def-axiom]: #229
#639 := [unit-resolution #316 #302]: #648
#230 := (or #656 #42)
#317 := [def-axiom]: #230
#428 := [unit-resolution #317 #302]: #42
#319 := (or #98 #653)
#309 := [hypothesis]: #648
#320 := [hypothesis]: #104
#321 := (or #653 #98)
#249 := [quant-inst]: #321
#322 := [unit-resolution #249 #320 #309]: false
#323 := [lemma #322]: #319
#635 := [unit-resolution #323 #639]: #98
#150 := (or #90 #84 #104)
#118 := (and #42 #98)
#121 := (not #118)
#127 := (or #90 #84 #121)
#153 := (iff #127 #150)
#147 := (or #90 #84 #105)
#151 := (iff #147 #150)
#152 := [rewrite]: #151
#148 := (iff #127 #147)
#145 := (iff #121 #105)
#140 := (not #88)
#143 := (iff #140 #105)
#144 := [rewrite]: #143
#141 := (iff #121 #140)
#89 := (iff #118 #88)
#139 := [rewrite]: #89
#142 := [monotonicity #139]: #141
#146 := [trans #142 #144]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#48 := (and #36 #42)
#51 := (forall (vars (?v0 S2)) #48)
#39 := (forall (vars (?v0 S2)) #36)
#45 := (and #39 #42)
#132 := (or #45 #51)
#135 := (and #127 #132)
#110 := (or #51 #45)
#93 := (or #84 #90)
#99 := (and #98 #42)
#100 := (not #99)
#111 := (or #100 #93)
#112 := (and #111 #110)
#136 := (iff #112 #135)
#133 := (iff #110 #132)
#134 := [rewrite]: #133
#130 := (iff #111 #127)
#124 := (or #121 #93)
#128 := (iff #124 #127)
#129 := [rewrite]: #128
#125 := (iff #111 #124)
#122 := (iff #100 #121)
#119 := (iff #99 #118)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#126 := [monotonicity #123]: #125
#131 := [trans #126 #129]: #130
#137 := [monotonicity #131 #134]: #136
#60 := (not #45)
#61 := (iff #51 #60)
#113 := (~ #61 #112)
#94 := (~ #60 #93)
#91 := (~ #90 #90)
#92 := [refl]: #91
#85 := (not #39)
#86 := (~ #85 #84)
#87 := [sk]: #86
#95 := [nnf-neg #87 #92]: #94
#78 := (not #60)
#79 := (~ #78 #45)
#76 := (~ #45 #45)
#69 := (~ #42 #42)
#66 := [refl]: #69
#74 := (~ #39 #39)
#72 := (~ #36 #36)
#73 := [refl]: #72
#75 := [nnf-pos #73]: #74
#77 := [monotonicity #75 #66]: #76
#80 := [nnf-neg #77]: #79
#108 := (~ #51 #51)
#106 := (~ #48 #48)
#107 := [refl]: #106
#109 := [nnf-pos #107]: #108
#101 := (not #51)
#102 := (~ #101 #100)
#103 := [sk]: #102
#114 := [nnf-pos #103 #109 #80 #95]: #113
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (and #10 #13)
#16 := (forall (vars (?v0 S2)) #15)
#11 := (forall (vars (?v0 S2)) #10)
#14 := (and #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#64 := (iff #18 #61)
#54 := (iff #45 #51)
#57 := (not #54)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #18 #57)
#55 := (iff #17 #54)
#52 := (iff #16 #51)
#49 := (iff #15 #48)
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#50 := [monotonicity #38 #44]: #49
#53 := [quant-intro #50]: #52
#46 := (iff #14 #45)
#40 := (iff #11 #39)
#41 := [quant-intro #38]: #40
#47 := [monotonicity #41 #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#35 := [asserted]: #18
#68 := [mp #35 #65]: #61
#115 := [mp~ #68 #114]: #112
#116 := [mp #115 #137]: #135
#117 := [and-elim #116]: #127
#155 := [mp #117 #154]: #150
#307 := [unit-resolution #155 #635 #428]: #84
#641 := (or #653 #83)
#296 := [quant-inst]: #641
#308 := [unit-resolution #296 #307 #639]: false
#642 := [lemma #308]: #656
#667 := (or #659 #662)
#165 := (forall (vars (?v0 S2)) #162)
#156 := (or #85 #90)
#157 := (not #156)
#168 := (or #157 #165)
#668 := (iff #168 #667)
#665 := (iff #165 #662)
#663 := (iff #162 #162)
#664 := [refl]: #663
#666 := [quant-intro #664]: #665
#660 := (iff #157 #659)
#657 := (iff #156 #656)
#654 := (iff #85 #653)
#651 := (iff #39 #648)
#649 := (iff #36 #36)
#650 := [refl]: #649
#652 := [quant-intro #650]: #651
#655 := [monotonicity #652]: #654
#658 := [monotonicity #655]: #657
#661 := [monotonicity #658]: #660
#669 := [monotonicity #661 #666]: #668
#169 := (iff #132 #168)
#166 := (iff #51 #165)
#163 := (iff #48 #162)
#164 := [rewrite]: #163
#167 := [quant-intro #164]: #166
#158 := (iff #45 #157)
#159 := [rewrite]: #158
#170 := [monotonicity #159 #167]: #169
#138 := [and-elim #116]: #132
#171 := [mp #138 #170]: #168
#670 := [mp #171 #669]: #667
#629 := [unit-resolution #670 #642]: #662
#294 := (not #662)
#299 := (or #294 #88)
#643 := (or #104 #90)
#644 := (not #643)
#637 := (or #294 #644)
#638 := (iff #637 #299)
#622 := (iff #299 #299)
#283 := [rewrite]: #622
#646 := (iff #644 #88)
#645 := (iff #643 #105)
#640 := [rewrite]: #645
#636 := [monotonicity #640]: #646
#279 := [monotonicity #636]: #638
#284 := [trans #279 #283]: #638
#295 := [quant-inst]: #637
#285 := [mp #295 #284]: #299
#265 := [unit-resolution #285 #629 #623]: false
#630 := [lemma #265]: #88
#286 := (or #105 #42)
#624 := [def-axiom]: #286
#619 := [unit-resolution #624 #630]: #42
#625 := (or #105 #98)
#626 := [def-axiom]: #625
#328 := [unit-resolution #626 #630]: #98
#329 := [unit-resolution #155 #328 #619]: #84
#340 := (or #270 #83)
#614 := [def-axiom]: #340
#330 := [unit-resolution #614 #329]: #270
#631 := (not #270)
#621 := (or #294 #631)
#632 := (not #93)
#327 := (or #294 #632)
#344 := (iff #327 #621)
#331 := (iff #621 #621)
#346 := [rewrite]: #331
#634 := (iff #632 #631)
#271 := (iff #93 #270)
#633 := [rewrite]: #271
#620 := [monotonicity #633]: #634
#345 := [monotonicity #620]: #344
#237 := [trans #345 #346]: #344
#343 := [quant-inst]: #327
#616 := [mp #343 #237]: #621
[unit-resolution #616 #629 #330]: false
unsat
36d1352b395221a431006c238d124165e2b745a3 72 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (iff #9 #9)
#11 := (iff #9 #10)
#12 := (iff #9 #11)
#13 := (iff #9 #12)
#14 := (iff #9 #13)
#15 := (iff #9 #14)
#16 := (iff #9 #15)
#17 := (iff #9 #16)
#18 := (iff #9 #17)
#19 := (not #18)
#87 := (iff #19 false)
#1 := true
#82 := (not true)
#85 := (iff #82 false)
#86 := [rewrite]: #85
#83 := (iff #19 #82)
#80 := (iff #18 true)
#37 := (= f1 f3)
#40 := (iff #37 #37)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#78 := (iff #18 #40)
#76 := (iff #17 #37)
#47 := (iff #37 true)
#50 := (iff #47 #37)
#51 := [rewrite]: #50
#74 := (iff #17 #47)
#72 := (iff #16 true)
#70 := (iff #16 #40)
#68 := (iff #15 #37)
#66 := (iff #15 #47)
#64 := (iff #14 true)
#62 := (iff #14 #40)
#60 := (iff #13 #37)
#58 := (iff #13 #47)
#56 := (iff #12 true)
#54 := (iff #12 #40)
#52 := (iff #11 #37)
#48 := (iff #11 #47)
#45 := (iff #10 true)
#41 := (iff #10 #40)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #39 #46]: #48
#53 := [trans #49 #51]: #52
#55 := [monotonicity #39 #53]: #54
#57 := [trans #55 #44]: #56
#59 := [monotonicity #39 #57]: #58
#61 := [trans #59 #51]: #60
#63 := [monotonicity #39 #61]: #62
#65 := [trans #63 #44]: #64
#67 := [monotonicity #39 #65]: #66
#69 := [trans #67 #51]: #68
#71 := [monotonicity #39 #69]: #70
#73 := [trans #71 #44]: #72
#75 := [monotonicity #39 #73]: #74
#77 := [trans #75 #51]: #76
#79 := [monotonicity #39 #77]: #78
#81 := [trans #79 #44]: #80
#84 := [monotonicity #81]: #83
#88 := [trans #84 #86]: #87
#36 := [asserted]: #19
[mp #36 #88]: false
unsat
35b6826e84c97e2db1e3cd91ad69abb16f131b93 49 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S2 S1)
#9 := (:var 0 S2)
#13 := (:var 1 S2)
#14 := (f3 #13 #9)
#15 := (= #14 f1)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#8 := (:var 2 S2)
#10 := (f3 #8 #9)
#11 := (= #10 f1)
#12 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #11)
#17 := (iff #12 #16)
#18 := (not #17)
#64 := (iff #18 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #18 #59)
#57 := (iff #17 true)
#42 := (= f1 #14)
#43 := (forall (vars (?v0 S2) (?v2 S2)) #42)
#52 := (iff #43 #43)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #17 #52)
#50 := (iff #16 #43)
#48 := (iff #15 #42)
#49 := [rewrite]: #48
#51 := [quant-intro #49]: #50
#46 := (iff #12 #43)
#36 := (= f1 #10)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #36)
#44 := (iff #39 #43)
#45 := [elim-unused]: #44
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#41 := [quant-intro #38]: #40
#47 := [trans #41 #45]: #46
#54 := [monotonicity #47 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #18
[mp #35 #65]: false
unsat
150a137e969806c6900cabc66bb27970472c7ba1 25 0
#2 := false
#8 := (:var 0 S2)
#9 := (= #8 #8)
#10 := (exists (vars (?v0 S2)) #9)
#11 := (not #10)
#43 := (iff #11 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #11 #38)
#36 := (iff #10 true)
#31 := (exists (vars (?v0 S2)) true)
#34 := (iff #31 true)
#35 := [elim-unused]: #34
#32 := (iff #10 #31)
#29 := (iff #9 true)
#30 := [rewrite]: #29
#33 := [quant-intro #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#28 := [asserted]: #11
[mp #28 #44]: false
unsat
2e6f238fe51369f58bc6454a136532e4c6f3bd82 136 0
#2 := false
decl f3 :: (-> S2 S2 S1)
decl f4 :: S2
#16 := f4
decl f5 :: S2
#20 := f5
#180 := (f3 f5 f4)
decl f1 :: S1
#4 := f1
#267 := (= f1 #180)
#181 := (not #267)
#21 := (f3 f4 f5)
#67 := (= f1 #21)
#102 := (not #67)
#9 := (:var 0 S2)
#17 := (f3 #9 f4)
#61 := (= f1 #17)
#64 := (forall (vars (?v0 S2)) #61)
#73 := (not #64)
#8 := (:var 1 S2)
#12 := (f3 #9 #8)
#46 := (= f1 #12)
#10 := (f3 #8 #9)
#43 := (= f1 #10)
#52 := (not #43)
#53 := (or #52 #46)
#58 := (forall (vars (?v0 S2) (?v1 S2)) #53)
#82 := (not #58)
#91 := (or #82 #73 #67)
#94 := (not #91)
#22 := (= #21 f1)
#18 := (= #17 f1)
#19 := (forall (vars (?v0 S2)) #18)
#23 := (implies #19 #22)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#24 := (implies #15 #23)
#25 := (not #24)
#97 := (iff #25 #94)
#74 := (or #73 #67)
#83 := (or #82 #74)
#88 := (not #83)
#95 := (iff #88 #94)
#92 := (iff #83 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#89 := (iff #25 #88)
#86 := (iff #24 #83)
#79 := (implies #58 #74)
#84 := (iff #79 #83)
#85 := [rewrite]: #84
#80 := (iff #24 #79)
#77 := (iff #23 #74)
#70 := (implies #64 #67)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #23 #70)
#68 := (iff #22 #67)
#69 := [rewrite]: #68
#65 := (iff #19 #64)
#62 := (iff #18 #61)
#63 := [rewrite]: #62
#66 := [quant-intro #63]: #65
#72 := [monotonicity #66 #69]: #71
#78 := [trans #72 #76]: #77
#59 := (iff #15 #58)
#56 := (iff #14 #53)
#49 := (implies #43 #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#48 := [rewrite]: #47
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#51 := [monotonicity #45 #48]: #50
#57 := [trans #51 #55]: #56
#60 := [quant-intro #57]: #59
#81 := [monotonicity #60 #78]: #80
#87 := [trans #81 #85]: #86
#90 := [monotonicity #87]: #89
#98 := [trans #90 #96]: #97
#42 := [asserted]: #25
#99 := [mp #42 #98]: #94
#103 := [not-or-elim #99]: #102
#597 := (pattern #12)
#596 := (pattern #10)
#598 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #596 #597) #53)
#601 := (iff #58 #598)
#599 := (iff #53 #53)
#600 := [refl]: #599
#602 := [quant-intro #600]: #601
#115 := (~ #58 #58)
#113 := (~ #53 #53)
#114 := [refl]: #113
#116 := [nnf-pos #114]: #115
#100 := [not-or-elim #99]: #58
#106 := [mp~ #100 #116]: #58
#603 := [mp #106 #602]: #598
#271 := (not #598)
#272 := (or #271 #67 #181)
#268 := (or #181 #67)
#200 := (or #271 #268)
#247 := (iff #200 #272)
#182 := (or #67 #181)
#270 := (or #271 #182)
#588 := (iff #270 #272)
#590 := [rewrite]: #588
#274 := (iff #200 #270)
#269 := (iff #268 #182)
#260 := [rewrite]: #269
#253 := [monotonicity #260]: #274
#377 := [trans #253 #590]: #247
#273 := [quant-inst]: #200
#584 := [mp #273 #377]: #272
#258 := [unit-resolution #584 #603 #103]: #181
#604 := (pattern #17)
#605 := (forall (vars (?v0 S2)) (:pat #604) #61)
#608 := (iff #64 #605)
#606 := (iff #61 #61)
#607 := [refl]: #606
#609 := [quant-intro #607]: #608
#107 := (~ #64 #64)
#104 := (~ #61 #61)
#117 := [refl]: #104
#108 := [nnf-pos #117]: #107
#101 := [not-or-elim #99]: #64
#118 := [mp~ #101 #108]: #64
#610 := [mp #118 #609]: #605
#591 := (not #605)
#592 := (or #591 #267)
#593 := [quant-inst]: #592
[unit-resolution #593 #610 #258]: false
unsat
b28b1c7eb24edf6acf5466ddd1304a6b881a60f9 34 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (exists (vars (?v0 S2)) #10)
#12 := (iff #11 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#31 := (= f1 #9)
#34 := (exists (vars (?v0 S2)) #31)
#37 := (iff #34 #34)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (iff #11 #34)
#32 := (iff #10 #31)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#39 := [monotonicity #36 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#30 := [asserted]: #13
[mp #30 #50]: false
unsat
a15d00efdb475e30bdd25ef3ed2227a8ea9c519f 124 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: (-> S2 S2)
decl f5 :: S2
#16 := f5
#20 := (f4 f5)
#21 := (f4 #20)
#154 := (f3 #21)
decl f1 :: S1
#4 := f1
#241 := (= f1 #154)
#152 := (f3 #20)
#239 := (= f1 #152)
#17 := (f3 f5)
#62 := (= f1 #17)
#8 := (:var 0 S2)
#11 := (f4 #8)
#12 := (f3 #11)
#47 := (= f1 #12)
#9 := (f3 #8)
#44 := (= f1 #9)
#53 := (not #44)
#54 := (or #53 #47)
#59 := (forall (vars (?v0 S2)) #54)
#65 := (and #59 #62)
#22 := (f4 #21)
#23 := (f3 #22)
#68 := (= f1 #23)
#74 := (not #65)
#75 := (or #74 #68)
#80 := (not #75)
#24 := (= #23 f1)
#18 := (= #17 f1)
#13 := (= #12 f1)
#10 := (= #9 f1)
#14 := (implies #10 #13)
#15 := (forall (vars (?v0 S2)) #14)
#19 := (and #15 #18)
#25 := (implies #19 #24)
#26 := (not #25)
#81 := (iff #26 #80)
#78 := (iff #25 #75)
#71 := (implies #65 #68)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #25 #71)
#69 := (iff #24 #68)
#70 := [rewrite]: #69
#66 := (iff #19 #65)
#63 := (iff #18 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#57 := (iff #14 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [quant-intro #58]: #60
#67 := [monotonicity #61 #64]: #66
#73 := [monotonicity #67 #70]: #72
#79 := [trans #73 #77]: #78
#82 := [monotonicity #79]: #81
#43 := [asserted]: #26
#85 := [mp #43 #82]: #80
#83 := [not-or-elim #85]: #65
#86 := [and-elim #83]: #62
#570 := (pattern #11)
#571 := (forall (vars (?v0 S2)) (:pat #570) #54)
#574 := (iff #59 #571)
#572 := (iff #54 #54)
#573 := [refl]: #572
#575 := [quant-intro #573]: #574
#100 := (~ #59 #59)
#98 := (~ #54 #54)
#99 := [refl]: #98
#101 := [nnf-pos #99]: #100
#84 := [and-elim #83]: #59
#91 := [mp~ #84 #101]: #59
#576 := [mp #91 #575]: #571
#153 := (not #62)
#232 := (not #571)
#243 := (or #232 #153 #239)
#240 := (or #153 #239)
#244 := (or #232 #240)
#245 := (iff #244 #243)
#242 := [rewrite]: #245
#172 := [quant-inst]: #244
#246 := [mp #172 #242]: #243
#208 := [unit-resolution #246 #576 #86]: #239
#225 := (not #239)
#351 := (or #232 #225 #241)
#562 := (or #225 #241)
#558 := (or #232 #562)
#231 := (iff #558 #351)
#565 := [rewrite]: #231
#230 := [quant-inst]: #558
#566 := [mp #230 #565]: #351
#209 := [unit-resolution #566 #576 #208]: #241
#87 := (not #68)
#88 := [not-or-elim #85]: #87
#564 := (not #241)
#569 := (or #232 #68 #564)
#219 := (or #564 #68)
#559 := (or #232 #219)
#545 := (iff #559 #569)
#567 := (or #68 #564)
#222 := (or #232 #567)
#561 := (iff #222 #569)
#202 := [rewrite]: #561
#560 := (iff #559 #222)
#568 := (iff #219 #567)
#563 := [rewrite]: #568
#218 := [monotonicity #563]: #560
#206 := [trans #218 #202]: #545
#217 := [quant-inst]: #559
#207 := [mp #217 #206]: #569
[unit-resolution #207 #576 #88 #209]: false
unsat
043713d1f8d615cef2b57b8a8ae1162f9c51de61 258 0
#2 := false
decl f4 :: (-> S2 S1)
decl ?v0!2 :: S2
#118 := ?v0!2
#119 := (f4 ?v0!2)
decl f1 :: S1
#4 := f1
#120 := (= f1 #119)
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#111 := ?v0!1
#112 := (f3 ?v0!1)
#113 := (= f1 #112)
#610 := (not #113)
#308 := [hypothesis]: #113
#8 := (:var 0 S2)
#9 := (f3 #8)
#629 := (pattern #9)
#37 := (= f1 #9)
#93 := (not #37)
#636 := (forall (vars (?v0 S2)) (:pat #629) #93)
#11 := (f4 #8)
#630 := (pattern #11)
#40 := (= f1 #11)
#100 := (not #40)
#644 := (forall (vars (?v0 S2)) (:pat #630) #100)
#649 := (not #644)
#641 := (not #636)
#652 := (or #641 #649)
#655 := (not #652)
#43 := (or #37 #40)
#87 := (not #43)
#631 := (forall (vars (?v0 S2)) (:pat #629 #630) #87)
#280 := (not #631)
#616 := (f3 ?v0!2)
#602 := (= f1 #616)
#326 := (or #120 #602)
decl ?v0!0 :: S2
#76 := ?v0!0
#77 := (f4 ?v0!0)
#78 := (= f1 #77)
#626 := (not #78)
#79 := (f3 ?v0!0)
#73 := (= f1 #79)
#70 := (or #73 #78)
#286 := (not #70)
#625 := [hypothesis]: #631
#263 := (or #286 #280)
#624 := [hypothesis]: #70
#410 := (or #280 #286)
#617 := [quant-inst]: #410
#620 := [unit-resolution #617 #625 #624]: false
#604 := [lemma #620]: #263
#584 := [unit-resolution #604 #625]: #286
#627 := (or #70 #626)
#622 := [def-axiom]: #627
#585 := [unit-resolution #622 #584]: #626
#293 := (not #73)
#304 := [hypothesis]: #73
#291 := (or #70 #293)
#292 := [def-axiom]: #291
#621 := [unit-resolution #292 #304]: #70
#233 := (or #641 #293)
#305 := [hypothesis]: #636
#306 := [quant-inst]: #233
#303 := [unit-resolution #306 #305 #304]: false
#307 := [lemma #303]: #233
#623 := [unit-resolution #307 #304]: #641
#213 := (or #652 #636)
#300 := [def-axiom]: #213
#628 := [unit-resolution #300 #623]: #652
#658 := (or #631 #655)
#103 := (forall (vars (?v0 S2)) #100)
#117 := (not #103)
#96 := (forall (vars (?v0 S2)) #93)
#116 := (not #96)
#123 := (or #116 #117)
#124 := (not #123)
#90 := (forall (vars (?v0 S2)) #87)
#146 := (or #90 #124)
#659 := (iff #146 #658)
#656 := (iff #124 #655)
#653 := (iff #123 #652)
#650 := (iff #117 #649)
#647 := (iff #103 #644)
#645 := (iff #100 #100)
#646 := [refl]: #645
#648 := [quant-intro #646]: #647
#651 := [monotonicity #648]: #650
#642 := (iff #116 #641)
#639 := (iff #96 #636)
#637 := (iff #93 #93)
#638 := [refl]: #637
#640 := [quant-intro #638]: #639
#643 := [monotonicity #640]: #642
#654 := [monotonicity #643 #651]: #653
#657 := [monotonicity #654]: #656
#634 := (iff #90 #631)
#632 := (iff #87 #87)
#633 := [refl]: #632
#635 := [quant-intro #633]: #634
#660 := [monotonicity #635 #657]: #659
#107 := (and #96 #103)
#136 := (or #90 #107)
#147 := (iff #136 #146)
#82 := (iff #107 #124)
#83 := [rewrite]: #82
#148 := [monotonicity #83]: #147
#139 := (or #73 #78 #113 #120)
#142 := (and #136 #139)
#125 := (or #113 #120)
#128 := (or #125 #70)
#129 := (or #107 #90)
#130 := (and #129 #128)
#143 := (iff #130 #142)
#140 := (iff #128 #139)
#141 := [rewrite]: #140
#137 := (iff #129 #136)
#138 := [rewrite]: #137
#144 := [monotonicity #138 #141]: #143
#46 := (exists (vars (?v0 S2)) #43)
#64 := (not #46)
#52 := (exists (vars (?v0 S2)) #40)
#49 := (exists (vars (?v0 S2)) #37)
#55 := (or #49 #52)
#65 := (iff #55 #64)
#131 := (~ #65 #130)
#91 := (~ #64 #90)
#88 := (~ #87 #87)
#89 := [refl]: #88
#92 := [nnf-neg #89]: #91
#84 := (not #64)
#85 := (~ #84 #70)
#80 := (~ #46 #70)
#81 := [sk]: #80
#86 := [nnf-neg #81]: #85
#126 := (~ #55 #125)
#121 := (~ #52 #120)
#122 := [sk]: #121
#114 := (~ #49 #113)
#115 := [sk]: #114
#127 := [monotonicity #115 #122]: #126
#108 := (not #55)
#109 := (~ #108 #107)
#104 := (not #52)
#105 := (~ #104 #103)
#101 := (~ #100 #100)
#102 := [refl]: #101
#106 := [nnf-neg #102]: #105
#97 := (not #49)
#98 := (~ #97 #96)
#94 := (~ #93 #93)
#95 := [refl]: #94
#99 := [nnf-neg #95]: #98
#110 := [nnf-neg #99 #106]: #109
#132 := [nnf-pos #110 #127 #86 #92]: #131
#12 := (= #11 f1)
#16 := (exists (vars (?v0 S2)) #12)
#10 := (= #9 f1)
#15 := (exists (vars (?v0 S2)) #10)
#17 := (or #15 #16)
#13 := (or #10 #12)
#14 := (exists (vars (?v0 S2)) #13)
#18 := (iff #14 #17)
#19 := (not #18)
#68 := (iff #19 #65)
#58 := (iff #46 #55)
#61 := (not #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #19 #61)
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#53 := (iff #16 #52)
#41 := (iff #12 #40)
#42 := [rewrite]: #41
#54 := [quant-intro #42]: #53
#50 := (iff #15 #49)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#51 := [quant-intro #39]: #50
#57 := [monotonicity #51 #54]: #56
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#45 := [monotonicity #39 #42]: #44
#48 := [quant-intro #45]: #47
#60 := [monotonicity #48 #57]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#36 := [asserted]: #19
#72 := [mp #36 #69]: #65
#133 := [mp~ #72 #132]: #130
#134 := [mp #133 #144]: #142
#135 := [and-elim #134]: #136
#149 := [mp #135 #148]: #146
#661 := [mp #149 #660]: #658
#618 := [unit-resolution #661 #628]: #631
#278 := [unit-resolution #617 #618 #621]: false
#283 := [lemma #278]: #293
#267 := (f4 ?v0!1)
#268 := (= f1 #267)
#269 := (or #113 #268)
#270 := (not #269)
#615 := (or #270 #280)
#606 := [hypothesis]: #269
#608 := (or #280 #270)
#609 := [quant-inst]: #608
#607 := [unit-resolution #609 #625 #606]: false
#613 := [lemma #607]: #615
#586 := [unit-resolution #613 #625]: #270
#605 := (or #269 #610)
#611 := [def-axiom]: #605
#581 := [unit-resolution #611 #586]: #610
#145 := [and-elim #134]: #139
#582 := [unit-resolution #145 #581 #283 #585]: #120
#314 := (not #120)
#592 := (or #326 #314)
#593 := [def-axiom]: #592
#587 := [unit-resolution #593 #582]: #326
#221 := (not #326)
#321 := (or #280 #221)
#603 := (or #602 #120)
#325 := (not #603)
#322 := (or #280 #325)
#600 := (iff #322 #321)
#601 := (iff #321 #321)
#311 := [rewrite]: #601
#598 := (iff #325 #221)
#327 := (iff #603 #326)
#328 := [rewrite]: #327
#599 := [monotonicity #328]: #598
#597 := [monotonicity #599]: #600
#312 := [trans #597 #311]: #600
#596 := [quant-inst]: #322
#313 := [mp #596 #312]: #321
#588 := [unit-resolution #313 #625 #587]: false
#583 := [lemma #588]: #280
#590 := [unit-resolution #661 #583]: #655
#595 := [unit-resolution #300 #590]: #636
#594 := (or #641 #610)
#591 := [quant-inst]: #594
#589 := [unit-resolution #591 #595 #308]: false
#430 := [lemma #589]: #610
#431 := [hypothesis]: #78
#214 := (or #652 #644)
#301 := [def-axiom]: #214
#432 := [unit-resolution #301 #590]: #644
#574 := (or #649 #626)
#575 := [quant-inst]: #574
#576 := [unit-resolution #575 #432 #431]: false
#577 := [lemma #576]: #626
#571 := (or #78 #113 #120)
#572 := [unit-resolution #145 #283]: #571
#573 := [unit-resolution #572 #577 #430]: #120
#578 := (or #649 #314)
#579 := [quant-inst]: #578
[unit-resolution #579 #432 #573]: false
unsat
0e7fa24f774b5d4840baee92f17adcdc6e36469d 64 0
#2 := false
decl f3 :: (-> S2 S2 S3)
decl f4 :: S2
#14 := f4
decl f5 :: S2
#16 := f5
#18 := (f3 f5 f4)
#17 := (f3 f4 f5)
#19 := (= #17 #18)
#62 := (not #19)
#8 := (:var 1 S2)
#9 := (:var 0 S2)
#11 := (f3 #9 #8)
#10 := (f3 #8 #9)
#12 := (= #10 #11)
#13 := (forall (vars (?v0 S2) (?v1 S2)) #12)
#52 := (not #13)
#53 := (or #52 #19)
#58 := (not #53)
#15 := (= f4 f4)
#20 := (and #15 #19)
#21 := (implies #13 #20)
#22 := (not #21)
#59 := (iff #22 #58)
#56 := (iff #21 #53)
#49 := (implies #13 #19)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #21 #49)
#47 := (iff #20 #19)
#1 := true
#42 := (and true #19)
#45 := (iff #42 #19)
#46 := [rewrite]: #45
#43 := (iff #20 #42)
#40 := (iff #15 true)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#39 := [asserted]: #22
#63 := [mp #39 #60]: #58
#64 := [not-or-elim #63]: #62
#547 := (pattern #11)
#546 := (pattern #10)
#548 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #546 #547) #12)
#551 := (iff #13 #548)
#549 := (iff #12 #12)
#550 := [refl]: #549
#552 := [quant-intro #550]: #551
#74 := (~ #13 #13)
#72 := (~ #12 #12)
#73 := [refl]: #72
#75 := [nnf-pos #73]: #74
#61 := [not-or-elim #63]: #13
#67 := [mp~ #61 #75]: #13
#553 := [mp #67 #552]: #548
#129 := (not #548)
#216 := (or #129 #19)
#130 := [quant-inst]: #216
[unit-resolution #130 #553 #64]: false
unsat
7fcf7ce1521f6f1599b2fe6f93ba5dee1cbd7b76 222 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#72 := ?v0!0
#73 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#74 := (= f1 #73)
#156 := (not #74)
decl f4 :: S1
#12 := f4
#42 := (= f1 f4)
#92 := (not #42)
#157 := (or #92 #156)
#158 := (not #157)
decl ?v0!1 :: S2
#105 := ?v0!1
#106 := (f3 ?v0!1)
#107 := (= f1 #106)
#151 := (not #107)
#152 := (or #92 #151)
#153 := (not #152)
#615 := [hypothesis]: #153
#223 := (or #152 #107)
#310 := [def-axiom]: #223
#276 := [unit-resolution #310 #615]: #107
#8 := (:var 0 S2)
#9 := (f3 #8)
#640 := (pattern #9)
#36 := (= f1 #9)
#85 := (not #36)
#111 := (or #85 #92)
#646 := (forall (vars (?v0 S2)) (:pat #640) #111)
#222 := (or #152 #42)
#309 := [def-axiom]: #222
#277 := [unit-resolution #309 #615]: #42
#641 := (forall (vars (?v0 S2)) (:pat #640) #85)
#632 := (not #641)
#634 := (or #632 #151)
#316 := [hypothesis]: #107
#295 := [hypothesis]: #641
#289 := [quant-inst]: #634
#421 := [unit-resolution #289 #295 #316]: false
#628 := [lemma #421]: #634
#278 := [unit-resolution #628 #276]: #632
#651 := (or #92 #641 #646)
#144 := (forall (vars (?v0 S2)) #111)
#88 := (forall (vars (?v0 S2)) #85)
#147 := (or #92 #88 #144)
#652 := (iff #147 #651)
#649 := (iff #144 #646)
#647 := (iff #111 #111)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#644 := (iff #88 #641)
#642 := (iff #85 #85)
#643 := [refl]: #642
#645 := [quant-intro #643]: #644
#653 := [monotonicity #645 #650]: #652
#48 := (and #36 #42)
#98 := (not #48)
#101 := (forall (vars (?v0 S2)) #98)
#121 := (or #92 #88 #101)
#148 := (iff #121 #147)
#145 := (iff #101 #144)
#142 := (iff #98 #111)
#112 := (not #111)
#137 := (not #112)
#140 := (iff #137 #111)
#141 := [rewrite]: #140
#138 := (iff #98 #137)
#66 := (iff #48 #112)
#76 := [rewrite]: #66
#139 := [monotonicity #76]: #138
#143 := [trans #139 #141]: #142
#146 := [quant-intro #143]: #145
#149 := [monotonicity #146]: #148
#127 := (and #42 #74)
#124 := (and #42 #107)
#130 := (or #124 #127)
#133 := (and #121 #130)
#79 := (and #74 #42)
#108 := (and #107 #42)
#113 := (or #108 #79)
#95 := (or #88 #92)
#114 := (or #101 #95)
#115 := (and #114 #113)
#134 := (iff #115 #133)
#131 := (iff #113 #130)
#128 := (iff #79 #127)
#129 := [rewrite]: #128
#125 := (iff #108 #124)
#126 := [rewrite]: #125
#132 := [monotonicity #126 #129]: #131
#122 := (iff #114 #121)
#123 := [rewrite]: #122
#135 := [monotonicity #123 #132]: #134
#39 := (exists (vars (?v0 S2)) #36)
#45 := (and #39 #42)
#60 := (not #45)
#51 := (exists (vars (?v0 S2)) #48)
#61 := (iff #51 #60)
#116 := (~ #61 #115)
#96 := (~ #60 #95)
#93 := (~ #92 #92)
#94 := [refl]: #93
#89 := (not #39)
#90 := (~ #89 #88)
#86 := (~ #85 #85)
#87 := [refl]: #86
#91 := [nnf-neg #87]: #90
#97 := [nnf-neg #91 #94]: #96
#82 := (not #60)
#83 := (~ #82 #79)
#80 := (~ #45 #79)
#77 := (~ #42 #42)
#78 := [refl]: #77
#75 := (~ #39 #74)
#69 := [sk]: #75
#81 := [monotonicity #69 #78]: #80
#84 := [nnf-neg #81]: #83
#109 := (~ #51 #108)
#110 := [sk]: #109
#102 := (not #51)
#103 := (~ #102 #101)
#99 := (~ #98 #98)
#100 := [refl]: #99
#104 := [nnf-neg #100]: #103
#117 := [nnf-pos #104 #110 #84 #97]: #116
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (and #10 #13)
#16 := (exists (vars (?v0 S2)) #15)
#11 := (exists (vars (?v0 S2)) #10)
#14 := (and #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#64 := (iff #18 #61)
#54 := (iff #45 #51)
#57 := (not #54)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #18 #57)
#55 := (iff #17 #54)
#52 := (iff #16 #51)
#49 := (iff #15 #48)
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#50 := [monotonicity #38 #44]: #49
#53 := [quant-intro #50]: #52
#46 := (iff #14 #45)
#40 := (iff #11 #39)
#41 := [quant-intro #38]: #40
#47 := [monotonicity #41 #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#35 := [asserted]: #18
#68 := [mp #35 #65]: #61
#118 := [mp~ #68 #117]: #115
#119 := [mp #118 #135]: #133
#120 := [and-elim #119]: #121
#150 := [mp #120 #149]: #147
#654 := [mp #150 #653]: #651
#279 := [unit-resolution #654 #278 #277]: #646
#636 := (not #646)
#637 := (or #636 #92 #151)
#300 := (or #151 #92)
#638 := (or #636 #300)
#288 := (iff #638 #637)
#639 := (or #636 #152)
#292 := (iff #639 #637)
#630 := [rewrite]: #292
#629 := (iff #638 #639)
#301 := (iff #300 #152)
#635 := [rewrite]: #301
#287 := [monotonicity #635]: #629
#631 := [trans #287 #630]: #288
#633 := [quant-inst]: #638
#272 := [mp #633 #631]: #637
#617 := [unit-resolution #272 #277 #279 #276]: false
#618 := [lemma #617]: #152
#161 := (or #153 #158)
#162 := (iff #130 #161)
#159 := (iff #127 #158)
#160 := [rewrite]: #159
#154 := (iff #124 #153)
#155 := [rewrite]: #154
#163 := [monotonicity #155 #160]: #162
#136 := [and-elim #119]: #130
#164 := [mp #136 #163]: #161
#614 := [unit-resolution #164 #618]: #158
#314 := (or #157 #74)
#242 := [def-axiom]: #314
#320 := [unit-resolution #242 #614]: #74
#302 := (or #157 #42)
#313 := [def-axiom]: #302
#337 := [unit-resolution #313 #614]: #42
#336 := [hypothesis]: #646
#616 := (or #636 #92 #156)
#619 := (or #156 #92)
#622 := (or #636 #619)
#624 := (iff #622 #616)
#623 := (or #636 #157)
#264 := (iff #623 #616)
#626 := [rewrite]: #264
#625 := (iff #622 #623)
#620 := (iff #619 #157)
#621 := [rewrite]: #620
#263 := [monotonicity #621]: #625
#627 := [trans #263 #626]: #624
#258 := [quant-inst]: #622
#613 := [mp #258 #627]: #616
#338 := [unit-resolution #613 #337 #336 #320]: false
#324 := [lemma #338]: #636
#339 := [unit-resolution #654 #324 #337]: #641
#609 := (or #632 #156)
#610 := [quant-inst]: #609
[unit-resolution #610 #339 #320]: false
unsat
e97ea15e571d05d4542f0baceec935a45a20adf5 250 0
#2 := false
decl f3 :: (-> S2 S1)
decl f7 :: S2
#22 := f7
#25 := (f3 f7)
decl f1 :: S1
#4 := f1
#94 := (= f1 #25)
#283 := (not #94)
decl f4 :: (-> S2 S1)
#8 := (:var 0 S2)
#11 := (f4 #8)
#702 := (pattern #11)
#9 := (f3 #8)
#701 := (pattern #9)
#57 := (= f1 #11)
#54 := (= f1 #9)
#63 := (not #54)
#64 := (or #63 #57)
#703 := (forall (vars (?v0 S2)) (:pat #701 #702) #64)
#69 := (forall (vars (?v0 S2)) #64)
#706 := (iff #69 #703)
#704 := (iff #64 #64)
#705 := [refl]: #704
#707 := [quant-intro #705]: #706
#187 := (~ #69 #69)
#201 := (~ #64 #64)
#202 := [refl]: #201
#188 := [nnf-pos #202]: #187
decl f6 :: (-> S2 S1)
#23 := (f6 f7)
#91 := (= f1 #23)
#78 := (not #57)
#86 := (and #63 #78)
#103 := (not #86)
#136 := (or #103 #91 #94)
#139 := (forall (vars (?v0 S2)) #136)
decl f5 :: S2
#15 := f5
#16 := (f4 f5)
#72 := (= f1 #16)
#75 := (not #72)
#148 := (and #69 #75 #139)
#153 := (not #148)
#32 := (f4 f7)
#118 := (= f1 #32)
#159 := (or #91 #118 #153)
#164 := (not #159)
#33 := (= #32 f1)
#24 := (= #23 f1)
#34 := (or #24 #33)
#26 := (= #25 f1)
#27 := (or #24 #26)
#10 := (= #9 f1)
#20 := (not #10)
#12 := (= #11 f1)
#19 := (not #12)
#21 := (and #19 #20)
#28 := (implies #21 #27)
#29 := (forall (vars (?v0 S2)) #28)
#17 := (= #16 f1)
#18 := (not #17)
#30 := (and #18 #29)
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#31 := (and #14 #30)
#35 := (implies #31 #34)
#36 := (not #35)
#167 := (iff #36 #164)
#121 := (or #91 #118)
#97 := (or #91 #94)
#104 := (or #103 #97)
#109 := (forall (vars (?v0 S2)) #104)
#112 := (and #75 #109)
#115 := (and #69 #112)
#127 := (not #115)
#128 := (or #127 #121)
#133 := (not #128)
#165 := (iff #133 #164)
#162 := (iff #128 #159)
#156 := (or #153 #121)
#160 := (iff #156 #159)
#161 := [rewrite]: #160
#157 := (iff #128 #156)
#154 := (iff #127 #153)
#151 := (iff #115 #148)
#142 := (and #75 #139)
#145 := (and #69 #142)
#149 := (iff #145 #148)
#150 := [rewrite]: #149
#146 := (iff #115 #145)
#143 := (iff #112 #142)
#140 := (iff #109 #139)
#137 := (iff #104 #136)
#138 := [rewrite]: #137
#141 := [quant-intro #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#152 := [trans #147 #150]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#163 := [trans #158 #161]: #162
#166 := [monotonicity #163]: #165
#134 := (iff #36 #133)
#131 := (iff #35 #128)
#124 := (implies #115 #121)
#129 := (iff #124 #128)
#130 := [rewrite]: #129
#125 := (iff #35 #124)
#122 := (iff #34 #121)
#119 := (iff #33 #118)
#120 := [rewrite]: #119
#92 := (iff #24 #91)
#93 := [rewrite]: #92
#123 := [monotonicity #93 #120]: #122
#116 := (iff #31 #115)
#113 := (iff #30 #112)
#110 := (iff #29 #109)
#107 := (iff #28 #104)
#100 := (implies #86 #97)
#105 := (iff #100 #104)
#106 := [rewrite]: #105
#101 := (iff #28 #100)
#98 := (iff #27 #97)
#95 := (iff #26 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #93 #96]: #98
#89 := (iff #21 #86)
#83 := (and #78 #63)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #21 #83)
#81 := (iff #20 #63)
#55 := (iff #10 #54)
#56 := [rewrite]: #55
#82 := [monotonicity #56]: #81
#79 := (iff #19 #78)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#80 := [monotonicity #59]: #79
#85 := [monotonicity #80 #82]: #84
#90 := [trans #85 #88]: #89
#102 := [monotonicity #90 #99]: #101
#108 := [trans #102 #106]: #107
#111 := [quant-intro #108]: #110
#76 := (iff #18 #75)
#73 := (iff #17 #72)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#114 := [monotonicity #77 #111]: #113
#70 := (iff #14 #69)
#67 := (iff #13 #64)
#60 := (implies #54 #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #13 #60)
#62 := [monotonicity #56 #59]: #61
#68 := [trans #62 #66]: #67
#71 := [quant-intro #68]: #70
#117 := [monotonicity #71 #114]: #116
#126 := [monotonicity #117 #123]: #125
#132 := [trans #126 #130]: #131
#135 := [monotonicity #132]: #134
#168 := [trans #135 #166]: #167
#53 := [asserted]: #36
#169 := [mp #53 #168]: #164
#174 := [not-or-elim #169]: #148
#175 := [and-elim #174]: #69
#185 := [mp~ #175 #188]: #69
#708 := [mp #185 #707]: #703
#172 := (not #118)
#173 := [not-or-elim #169]: #172
#285 := (not #703)
#372 := (or #285 #283 #118)
#370 := (or #283 #118)
#363 := (or #285 #370)
#375 := (iff #363 #372)
#303 := [rewrite]: #375
#374 := [quant-inst]: #363
#376 := [mp #374 #303]: #372
#398 := [unit-resolution #376 #173 #708]: #283
#217 := (or #54 #57 #94)
#709 := (forall (vars (?v0 S2)) (:pat #701 #702) #217)
#222 := (forall (vars (?v0 S2)) #217)
#712 := (iff #222 #709)
#710 := (iff #217 #217)
#711 := [refl]: #710
#713 := [quant-intro #711]: #712
#192 := (or #103 #94)
#197 := (forall (vars (?v0 S2)) #192)
#223 := (iff #197 #222)
#220 := (iff #192 #217)
#203 := (or #54 #57)
#214 := (or #203 #94)
#218 := (iff #214 #217)
#219 := [rewrite]: #218
#215 := (iff #192 #214)
#212 := (iff #103 #203)
#204 := (not #203)
#207 := (not #204)
#210 := (iff #207 #203)
#211 := [rewrite]: #210
#208 := (iff #103 #207)
#205 := (iff #86 #204)
#206 := [rewrite]: #205
#209 := [monotonicity #206]: #208
#213 := [trans #209 #211]: #212
#216 := [monotonicity #213]: #215
#221 := [trans #216 #219]: #220
#224 := [quant-intro #221]: #223
#184 := (~ #197 #197)
#186 := (~ #192 #192)
#183 := [refl]: #186
#180 := [nnf-pos #183]: #184
#198 := (iff #139 #197)
#195 := (iff #136 #192)
#189 := (or #103 false #94)
#193 := (iff #189 #192)
#194 := [rewrite]: #193
#190 := (iff #136 #189)
#181 := (iff #91 false)
#170 := (not #91)
#171 := [not-or-elim #169]: #170
#182 := [iff-false #171]: #181
#191 := [monotonicity #182]: #190
#196 := [trans #191 #194]: #195
#199 := [quant-intro #196]: #198
#177 := [and-elim #174]: #139
#200 := [mp #177 #199]: #197
#178 := [mp~ #200 #180]: #197
#225 := [mp #178 #224]: #222
#714 := [mp #225 #713]: #709
#356 := (not #709)
#693 := (or #356 #94 #118)
#284 := (or #94 #118 #94)
#695 := (or #356 #284)
#697 := (iff #695 #693)
#371 := (or #94 #118)
#482 := (or #356 #371)
#362 := (iff #482 #693)
#696 := [rewrite]: #362
#689 := (iff #695 #482)
#373 := (iff #284 #371)
#377 := [rewrite]: #373
#361 := [monotonicity #377]: #689
#698 := [trans #361 #696]: #697
#350 := [quant-inst]: #695
#699 := [mp #350 #698]: #693
[unit-resolution #699 #173 #714 #398]: false
unsat
8031eb3bcd3fb97da7b874e36b0d4d2ae215ec7b 49 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S4 S1)
#9 := (:var 0 S4)
#13 := (:var 1 S2)
#14 := (f3 #13 #9)
#15 := (= #14 f1)
#16 := (exists (vars (?v0 S2) (?v1 S4)) #15)
#8 := (:var 2 S2)
#10 := (f3 #8 #9)
#11 := (= #10 f1)
#12 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #11)
#17 := (iff #12 #16)
#18 := (not #17)
#64 := (iff #18 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #18 #59)
#57 := (iff #17 true)
#42 := (= f1 #14)
#43 := (exists (vars (?v0 S2) (?v2 S4)) #42)
#52 := (iff #43 #43)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #17 #52)
#50 := (iff #16 #43)
#48 := (iff #15 #42)
#49 := [rewrite]: #48
#51 := [quant-intro #49]: #50
#46 := (iff #12 #43)
#36 := (= f1 #10)
#39 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #36)
#44 := (iff #39 #43)
#45 := [elim-unused]: #44
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#41 := [quant-intro #38]: #40
#47 := [trans #41 #45]: #46
#54 := [monotonicity #47 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #18
[mp #35 #65]: false
unsat
2317912b27971033dc831a6ce5ef74d0f20fbca2 1 2
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!9)

301a246cbbd414b8b75c6b801fee2f734cf2af47 122 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#122 := ?v0!1
#125 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#126 := (= f1 #125)
decl f4 :: (-> S2 S1)
#123 := (f4 ?v0!1)
#124 := (= f1 #123)
#135 := (and #124 #126)
#127 := (and #126 #124)
#136 := (iff #127 #135)
#137 := [rewrite]: #136
#8 := (:var 0 S2)
#14 := (f4 #8)
#53 := (= f1 #14)
#9 := (f3 #8)
#41 := (= f1 #9)
#56 := (and #41 #53)
#59 := (exists (vars (?v0 S2)) #56)
#128 := (~ #59 #127)
#129 := [sk]: #128
#50 := (exists (vars (?v0 S2)) #41)
#62 := (or #50 #59)
#110 := (iff #62 #59)
#105 := (or false #59)
#108 := (iff #105 #59)
#109 := [rewrite]: #108
#106 := (iff #62 #105)
#103 := (iff #50 false)
#65 := (not #50)
#44 := (not #41)
#47 := (exists (vars (?v0 S2)) #44)
#89 := (and #47 #65 #62)
#10 := (= #9 f1)
#13 := (exists (vars (?v0 S2)) #10)
#19 := (not #13)
#15 := (= #14 f1)
#16 := (and #10 #15)
#17 := (exists (vars (?v0 S2)) #16)
#18 := (or #13 #17)
#20 := (and #18 #19)
#11 := (not #10)
#12 := (exists (vars (?v0 S2)) #11)
#21 := (and #12 #20)
#22 := (not #21)
#23 := (not #22)
#92 := (iff #23 #89)
#71 := (and #65 #62)
#76 := (and #47 #71)
#90 := (iff #76 #89)
#91 := [rewrite]: #90
#87 := (iff #23 #76)
#79 := (not #76)
#82 := (not #79)
#85 := (iff #82 #76)
#86 := [rewrite]: #85
#83 := (iff #23 #82)
#80 := (iff #22 #79)
#77 := (iff #21 #76)
#74 := (iff #20 #71)
#68 := (and #62 #65)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #20 #68)
#66 := (iff #19 #65)
#51 := (iff #13 #50)
#42 := (iff #10 #41)
#43 := [rewrite]: #42
#52 := [quant-intro #43]: #51
#67 := [monotonicity #52]: #66
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #43 #55]: #57
#61 := [quant-intro #58]: #60
#64 := [monotonicity #52 #61]: #63
#70 := [monotonicity #64 #67]: #69
#75 := [trans #70 #73]: #74
#48 := (iff #12 #47)
#45 := (iff #11 #44)
#46 := [monotonicity #43]: #45
#49 := [quant-intro #46]: #48
#78 := [monotonicity #49 #75]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#88 := [trans #84 #86]: #87
#93 := [trans #88 #91]: #92
#40 := [asserted]: #23
#94 := [mp #40 #93]: #89
#96 := [and-elim #94]: #65
#104 := [iff-false #96]: #103
#107 := [monotonicity #104]: #106
#111 := [trans #107 #109]: #110
#97 := [and-elim #94]: #62
#112 := [mp #97 #111]: #59
#132 := [mp~ #112 #129]: #127
#133 := [mp #132 #137]: #135
#138 := [and-elim #133]: #126
#614 := (pattern #9)
#615 := (forall (vars (?v0 S2)) (:pat #614) #44)
#118 := (forall (vars (?v0 S2)) #44)
#618 := (iff #118 #615)
#616 := (iff #44 #44)
#617 := [refl]: #616
#619 := [quant-intro #617]: #618
#119 := (~ #65 #118)
#115 := (~ #44 #44)
#116 := [refl]: #115
#120 := [nnf-neg #116]: #119
#121 := [mp~ #96 #120]: #118
#620 := [mp #121 #619]: #615
#198 := (not #126)
#286 := (not #615)
#200 := (or #286 #198)
#287 := [quant-inst]: #200
[unit-resolution #287 #620 #138]: false
unsat
ee898f52c96d73444993788b39566855271caaec 1 0
unsat
2acdf9e468d060988547fd7ad4c93238ed78a5bb 105 0
#2 := false
decl f3 :: (-> S1 S1)
decl ?v0!1 :: S1
#80 := ?v0!1
#81 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#82 := (= f1 #81)
decl ?v0!0 :: S1
#66 := ?v0!0
#67 := (f3 ?v0!0)
#68 := (= f1 #67)
#69 := (not #68)
#168 := [hypothesis]: #68
#8 := (:var 0 S1)
#9 := (f3 #8)
#584 := (pattern #9)
#34 := (= f1 #9)
#43 := (not #34)
#585 := (forall (vars (?v0 S1)) (:pat #584) #43)
#46 := (forall (vars (?v0 S1)) #43)
#588 := (iff #46 #585)
#586 := (iff #43 #43)
#587 := [refl]: #586
#589 := [quant-intro #587]: #588
#102 := (or #68 #82)
#107 := (and #46 #102)
#63 := (not #69)
#87 := (or #82 #63)
#88 := (or #46 #46)
#89 := (and #88 #87)
#108 := (iff #89 #107)
#105 := (iff #87 #102)
#99 := (or #82 #68)
#103 := (iff #99 #102)
#104 := [rewrite]: #103
#100 := (iff #87 #99)
#97 := (iff #63 #68)
#98 := [rewrite]: #97
#101 := [monotonicity #98]: #100
#106 := [trans #101 #104]: #105
#95 := (iff #88 #46)
#96 := [rewrite]: #95
#109 := [monotonicity #96 #106]: #108
#37 := (exists (vars (?v0 S1)) #34)
#55 := (iff #37 #46)
#90 := (~ #55 #89)
#76 := (~ #46 #46)
#74 := (~ #43 #43)
#75 := [refl]: #74
#77 := [nnf-pos #75]: #76
#60 := (not #46)
#70 := (~ #60 #63)
#71 := [sk]: #70
#83 := (~ #37 #82)
#84 := [sk]: #83
#40 := (not #37)
#78 := (~ #40 #46)
#79 := [nnf-neg #75]: #78
#91 := [nnf-pos #79 #84 #71 #77]: #90
#10 := (= #9 f1)
#13 := (not #10)
#14 := (forall (vars (?v0 S1)) #13)
#11 := (exists (vars (?v0 S1)) #10)
#12 := (not #11)
#15 := (iff #12 #14)
#16 := (not #15)
#58 := (iff #16 #55)
#49 := (iff #40 #46)
#52 := (not #49)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #16 #52)
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#35 := (iff #10 #34)
#36 := [rewrite]: #35
#45 := [monotonicity #36]: #44
#48 := [quant-intro #45]: #47
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#39 := [quant-intro #36]: #38
#42 := [monotonicity #39]: #41
#51 := [monotonicity #42 #48]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#33 := [asserted]: #16
#62 := [mp #33 #59]: #55
#92 := [mp~ #62 #91]: #89
#93 := [mp #92 #109]: #107
#94 := [and-elim #93]: #46
#590 := [mp #94 #589]: #585
#169 := (not #585)
#256 := (or #169 #69)
#170 := [quant-inst]: #256
#255 := [unit-resolution #170 #590 #168]: false
#257 := [lemma #255]: #69
#110 := [and-elim #93]: #102
#259 := [unit-resolution #110 #257]: #82
#248 := (not #82)
#188 := (or #169 #248)
#261 := [quant-inst]: #188
[unit-resolution #261 #590 #259]: false
unsat
f7daa562701d4999ed8a3f5ec133f08651bf6190 1 0
unsat
ff2e1b7168f418022909b6d3ec628836562df57d 230 0
#2 := false
decl f3 :: (-> S1 S1)
decl ?v0!0 :: S1
#84 := ?v0!0
#85 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#86 := (= f1 #85)
#87 := (not #86)
decl ?v0!1 :: S1
#116 := ?v0!1
#117 := (f3 ?v0!1)
#118 := (= f1 #117)
#119 := (not #118)
decl f4 :: S1
#11 := f4
#39 := (= f1 f4)
#124 := (or #39 #119)
#289 := [hypothesis]: #119
#275 := (or #124 #118)
#618 := [def-axiom]: #275
#263 := [unit-resolution #618 #289]: #124
#8 := (:var 0 S1)
#9 := (f3 #8)
#627 := (pattern #9)
#36 := (= f1 #9)
#45 := (not #36)
#46 := (or #45 #39)
#94 := (not #46)
#642 := (forall (vars (?v0 S1)) (:pat #627) #94)
#628 := (forall (vars (?v0 S1)) (:pat #627) #36)
#633 := (not #628)
#636 := (or #39 #633)
#301 := (or #633 #118)
#300 := [hypothesis]: #628
#229 := [quant-inst]: #301
#302 := [unit-resolution #229 #300 #289]: false
#299 := [lemma #302]: #301
#264 := [unit-resolution #299 #289]: #633
#210 := (or #636 #628)
#297 := [def-axiom]: #210
#265 := [unit-resolution #297 #264]: #636
#639 := (not #636)
#647 := (or #639 #642)
#97 := (forall (vars (?v0 S1)) #94)
#54 := (forall (vars (?v0 S1)) #36)
#60 := (not #54)
#61 := (or #39 #60)
#111 := (not #61)
#146 := (or #111 #97)
#648 := (iff #146 #647)
#645 := (iff #97 #642)
#643 := (iff #94 #94)
#644 := [refl]: #643
#646 := [quant-intro #644]: #645
#640 := (iff #111 #639)
#637 := (iff #61 #636)
#634 := (iff #60 #633)
#631 := (iff #54 #628)
#629 := (iff #36 #36)
#630 := [refl]: #629
#632 := [quant-intro #630]: #631
#635 := [monotonicity #632]: #634
#638 := [monotonicity #635]: #637
#641 := [monotonicity #638]: #640
#649 := [monotonicity #641 #646]: #648
#100 := (not #39)
#110 := (and #100 #54)
#135 := (or #97 #110)
#149 := (iff #135 #146)
#122 := (or #97 #111)
#147 := (iff #122 #146)
#148 := [rewrite]: #147
#123 := (iff #135 #122)
#89 := (iff #110 #111)
#90 := [rewrite]: #89
#145 := [monotonicity #90]: #123
#150 := [trans #145 #148]: #149
#138 := (or #39 #87 #119)
#141 := (and #135 #138)
#81 := (or #87 #39)
#127 := (or #124 #81)
#128 := (or #110 #97)
#129 := (and #128 #127)
#142 := (iff #129 #141)
#139 := (iff #127 #138)
#140 := [rewrite]: #139
#136 := (iff #128 #135)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#51 := (exists (vars (?v0 S1)) #46)
#72 := (not #51)
#73 := (iff #61 #72)
#130 := (~ #73 #129)
#98 := (~ #72 #97)
#95 := (~ #94 #94)
#96 := [refl]: #95
#99 := [nnf-neg #96]: #98
#91 := (not #72)
#92 := (~ #91 #81)
#78 := (~ #51 #81)
#88 := [sk]: #78
#93 := [nnf-neg #88]: #92
#125 := (~ #61 #124)
#120 := (~ #60 #119)
#121 := [sk]: #120
#114 := (~ #39 #39)
#115 := [refl]: #114
#126 := [monotonicity #115 #121]: #125
#112 := (~ #111 #110)
#107 := (not #60)
#108 := (~ #107 #54)
#105 := (~ #54 #54)
#103 := (~ #36 #36)
#104 := [refl]: #103
#106 := [nnf-pos #104]: #105
#109 := [nnf-neg #106]: #108
#101 := (~ #100 #100)
#102 := [refl]: #101
#113 := [nnf-neg #102 #109]: #112
#131 := [nnf-pos #113 #126 #93 #99]: #130
#12 := (= f4 f1)
#10 := (= #9 f1)
#15 := (forall (vars (?v0 S1)) #10)
#16 := (implies #15 #12)
#13 := (implies #10 #12)
#14 := (exists (vars (?v0 S1)) #13)
#17 := (iff #14 #16)
#18 := (not #17)
#76 := (iff #18 #73)
#66 := (iff #51 #61)
#69 := (not #66)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #18 #69)
#67 := (iff #17 #66)
#64 := (iff #16 #61)
#57 := (implies #54 #39)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #16 #57)
#40 := (iff #12 #39)
#41 := [rewrite]: #40
#55 := (iff #15 #54)
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#56 := [quant-intro #38]: #55
#59 := [monotonicity #56 #41]: #58
#65 := [trans #59 #63]: #64
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #36 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#44 := [monotonicity #38 #41]: #43
#50 := [trans #44 #48]: #49
#53 := [quant-intro #50]: #52
#68 := [monotonicity #53 #65]: #67
#71 := [monotonicity #68]: #70
#77 := [trans #71 #75]: #76
#35 := [asserted]: #18
#80 := [mp #35 #77]: #73
#132 := [mp~ #80 #131]: #129
#133 := [mp #132 #143]: #141
#134 := [and-elim #133]: #135
#151 := [mp #134 #150]: #146
#650 := [mp #151 #649]: #647
#266 := [unit-resolution #650 #265]: #642
#276 := (not #124)
#287 := (not #642)
#288 := (or #287 #276)
#303 := (or #119 #39)
#282 := (not #303)
#622 := (or #287 #282)
#624 := (iff #622 #288)
#620 := (iff #288 #288)
#626 := [rewrite]: #620
#408 := (iff #282 #276)
#619 := (iff #303 #124)
#621 := [rewrite]: #619
#615 := [monotonicity #621]: #408
#625 := [monotonicity #615]: #624
#616 := [trans #625 #626]: #624
#623 := [quant-inst]: #622
#274 := [mp #623 #616]: #288
#604 := [unit-resolution #274 #266 #263]: false
#605 := [lemma #604]: #118
#617 := (or #39 #87)
#606 := (not #617)
#597 := [hypothesis]: #606
#614 := (or #617 #100)
#600 := [def-axiom]: #614
#319 := [unit-resolution #600 #597]: #100
#601 := (or #617 #86)
#307 := [def-axiom]: #601
#320 := [unit-resolution #307 #597]: #86
#144 := [and-elim #133]: #138
#594 := [unit-resolution #144 #320 #319 #605]: false
#598 := [lemma #594]: #617
#217 := (or #606 #287)
#325 := [hypothesis]: #617
#311 := [hypothesis]: #642
#603 := (or #287 #606)
#279 := (not #81)
#609 := (or #287 #279)
#610 := (iff #609 #603)
#250 := (iff #603 #603)
#251 := [rewrite]: #250
#607 := (iff #279 #606)
#259 := (iff #81 #617)
#602 := [rewrite]: #259
#608 := [monotonicity #602]: #607
#612 := [monotonicity #608]: #610
#613 := [trans #612 #251]: #610
#245 := [quant-inst]: #609
#611 := [mp #245 #613]: #603
#326 := [unit-resolution #611 #311 #325]: false
#596 := [lemma #326]: #217
#595 := [unit-resolution #596 #598]: #287
#599 := [unit-resolution #650 #595]: #639
#209 := (or #636 #100)
#296 := [def-axiom]: #209
#310 := [unit-resolution #296 #599]: #100
#312 := [unit-resolution #144 #310 #605]: #87
#590 := [unit-resolution #297 #599]: #628
#308 := (or #633 #86)
#309 := [quant-inst]: #308
[unit-resolution #309 #590 #312]: false
unsat
fdbe39cdd485517d8ec1964f2c4fb7b6646fe608 1 0
unsat
258fe7f9c05eff8e107778930f55bcfa407e2fde 156 0
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f4 :: S1
#15 := f4
#16 := (f3 f4 #9)
#622 := (pattern #16)
decl f1 :: S1
#4 := f1
#54 := (= f1 #16)
#103 := (not #54)
#623 := (forall (vars (?v0 S2)) (:pat #622) #103)
decl f5 :: S2
#19 := f5
#20 := (f3 f4 f5)
#60 := (= f1 #20)
#200 := (= f1 f4)
#201 := (iff #60 #200)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#615 := (pattern #10)
#45 := (= f1 #8)
#42 := (= f1 #10)
#48 := (iff #42 #45)
#616 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #615) #48)
#51 := (forall (vars (?v0 S1) (?v1 S2)) #48)
#619 := (iff #51 #616)
#617 := (iff #48 #48)
#618 := [refl]: #617
#620 := [quant-intro #618]: #619
#85 := (~ #51 #51)
#92 := (~ #48 #48)
#93 := [refl]: #92
#86 := [nnf-pos #93]: #85
#57 := (exists (vars (?v0 S2)) #54)
#63 := (iff #57 #60)
#69 := (not #51)
#70 := (or #69 #63)
#75 := (not #70)
#21 := (= #20 f1)
#17 := (= #16 f1)
#18 := (exists (vars (?v0 S2)) #17)
#22 := (iff #18 #21)
#12 := (= #8 f1)
#11 := (= #10 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#23 := (implies #14 #22)
#24 := (not #23)
#76 := (iff #24 #75)
#73 := (iff #23 #70)
#66 := (implies #51 #63)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #23 #66)
#64 := (iff #22 #63)
#61 := (iff #21 #60)
#62 := [rewrite]: #61
#58 := (iff #18 #57)
#55 := (iff #17 #54)
#56 := [rewrite]: #55
#59 := [quant-intro #56]: #58
#65 := [monotonicity #59 #62]: #64
#52 := (iff #14 #51)
#49 := (iff #13 #48)
#46 := (iff #12 #45)
#47 := [rewrite]: #46
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#50 := [monotonicity #44 #47]: #49
#53 := [quant-intro #50]: #52
#68 := [monotonicity #53 #65]: #67
#74 := [trans #68 #72]: #73
#77 := [monotonicity #74]: #76
#41 := [asserted]: #24
#80 := [mp #41 #77]: #75
#78 := [not-or-elim #80]: #51
#84 := [mp~ #78 #86]: #51
#621 := [mp #84 #620]: #616
#202 := (not #616)
#278 := (or #202 #201)
#610 := [quant-inst]: #278
#287 := [unit-resolution #610 #621]: #201
decl ?v0!0 :: S2
#82 := ?v0!0
#94 := (f3 f4 ?v0!0)
#95 := (= f1 #94)
#286 := (iff #95 #200)
#288 := (or #202 #286)
#279 := [quant-inst]: #288
#277 := [unit-resolution #279 #621]: #286
#290 := (not #286)
#249 := (or #290 #200)
#109 := (not #60)
#265 := [hypothesis]: #109
#114 := (or #60 #95)
#106 := (forall (vars (?v0 S2)) #103)
#115 := (or #109 #106)
#122 := (and #114 #115)
#116 := (and #115 #114)
#123 := (iff #116 #122)
#124 := [rewrite]: #123
#87 := (not #57)
#88 := (iff #60 #87)
#117 := (~ #88 #116)
#107 := (~ #87 #106)
#104 := (~ #103 #103)
#105 := [refl]: #104
#108 := [nnf-neg #105]: #107
#100 := (not #87)
#101 := (~ #100 #95)
#96 := (~ #57 #95)
#97 := [sk]: #96
#102 := [nnf-neg #97]: #101
#112 := (~ #60 #60)
#113 := [refl]: #112
#110 := (~ #109 #109)
#111 := [refl]: #110
#118 := [nnf-pos #111 #113 #102 #108]: #117
#79 := (not #63)
#89 := (iff #79 #88)
#90 := [rewrite]: #89
#81 := [not-or-elim #80]: #79
#91 := [mp #81 #90]: #88
#119 := [mp~ #91 #118]: #116
#120 := [mp #119 #124]: #122
#121 := [and-elim #120]: #114
#606 := [unit-resolution #121 #265]: #95
#293 := (not #95)
#272 := (or #290 #293 #200)
#607 := [def-axiom]: #272
#590 := [unit-resolution #607 #606]: #249
#253 := [unit-resolution #590 #277]: #200
#291 := (not #200)
#611 := (not #201)
#254 := (or #611 #291)
#612 := (or #611 #60 #291)
#613 := [def-axiom]: #612
#255 := [unit-resolution #613 #265]: #254
#256 := [unit-resolution #255 #253 #287]: false
#592 := [lemma #256]: #60
#628 := (or #109 #623)
#629 := (iff #115 #628)
#626 := (iff #106 #623)
#624 := (iff #103 #103)
#625 := [refl]: #624
#627 := [quant-intro #625]: #626
#630 := [monotonicity #627]: #629
#125 := [and-elim #120]: #115
#631 := [mp #125 #630]: #628
#292 := [unit-resolution #631 #592]: #623
#604 := (not #623)
#264 := (or #604 #109)
#269 := [quant-inst]: #264
[unit-resolution #269 #592 #292]: false
unsat
779c5fc38fd08b8484ec1da52f6a17e6b849eac4 1 0
unsat
6c0f54222b59d5e628ff948749ac67e96364c6a1 74 0
#2 := false
decl f3 :: (-> S2 S3 S4)
#9 := (:var 0 S3)
decl ?v0!0 :: S2
#39 := ?v0!0
#42 := (f3 ?v0!0 #9)
#542 := (pattern #42)
decl f4 :: (-> S2 S3)
#40 := (f4 ?v0!0)
#41 := (f3 ?v0!0 #40)
#57 := (= #41 #42)
#60 := (not #57)
#543 := (forall (vars (?v1 S3)) (:pat #542) #60)
#216 := (not #543)
#126 := (= #41 #41)
#213 := (not #126)
#220 := (or #216 #213)
#204 := (iff #220 #216)
#534 := (or #216 false)
#323 := (iff #534 #216)
#530 := [rewrite]: #323
#536 := (iff #220 #534)
#146 := (iff #213 false)
#1 := true
#128 := (not true)
#217 := (iff #128 false)
#218 := [rewrite]: #217
#215 := (iff #213 #128)
#127 := (iff #126 true)
#214 := [rewrite]: #127
#206 := [monotonicity #214]: #215
#219 := [trans #206 #218]: #146
#193 := [monotonicity #219]: #536
#205 := [trans #193 #530]: #204
#199 := [quant-inst]: #220
#537 := [mp #199 #205]: #216
#63 := (forall (vars (?v1 S3)) #60)
#546 := (iff #63 #543)
#544 := (iff #60 #60)
#545 := [refl]: #544
#547 := [quant-intro #545]: #546
#36 := (= #42 #41)
#46 := (not #36)
#49 := (forall (vars (?v1 S3)) #46)
#64 := (iff #49 #63)
#61 := (iff #46 #60)
#58 := (iff #36 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#65 := [quant-intro #62]: #64
#8 := (:var 1 S2)
#11 := (f4 #8)
#12 := (f3 #8 #11)
#10 := (f3 #8 #9)
#13 := (= #10 #12)
#14 := (exists (vars (?v1 S3)) #13)
#15 := (forall (vars (?v0 S2)) #14)
#16 := (not #15)
#52 := (~ #16 #49)
#34 := (exists (vars (?v1 S3)) #36)
#43 := (not #34)
#50 := (~ #43 #49)
#47 := (~ #46 #46)
#48 := [refl]: #47
#51 := [nnf-neg #48]: #50
#44 := (~ #16 #43)
#45 := [sk]: #44
#53 := [trans #45 #51]: #52
#33 := [asserted]: #16
#54 := [mp~ #33 #53]: #49
#55 := [mp #54 #65]: #63
#548 := [mp #55 #547]: #543
[unit-resolution #548 #537]: false
unsat
b720bb30cc87882c3f660a5bf9c8737dde4c14c4 1 0
unsat
cba176f179e597e7b48393532028be8634e0c4f7 108 0
#2 := false
decl f3 :: (-> S1 S1)
#11 := (:var 0 S1)
#12 := (f3 #11)
#593 := (pattern #12)
decl f1 :: S1
#4 := f1
#45 := (= f1 #12)
#54 := (not #45)
#594 := (forall (vars (?v0 S1)) (:pat #593) #54)
#57 := (forall (vars (?v0 S1)) #54)
#597 := (iff #57 #594)
#595 := (iff #54 #54)
#596 := [refl]: #595
#598 := [quant-intro #596]: #597
#48 := (exists (vars (?v0 S1)) #45)
#51 := (not #48)
#113 := (~ #51 #57)
#115 := (~ #54 #54)
#116 := [refl]: #115
#114 := [nnf-neg #116]: #113
decl f4 :: S1
#8 := f4
#9 := (f3 f4)
#42 := (= f1 #9)
#60 := (ite #42 #51 #57)
#110 := (iff #60 #51)
#1 := true
#105 := (ite true #51 #57)
#108 := (iff #105 #51)
#109 := [rewrite]: #108
#106 := (iff #60 #105)
#103 := (iff #42 true)
decl f5 :: S1
#19 := f5
#20 := (f3 f5)
#63 := (= f1 #20)
#78 := (not #60)
#69 := (not #42)
#87 := (or #69 #78 #63)
#90 := (not #87)
#21 := (= #20 f1)
#10 := (= #9 f1)
#22 := (implies #10 #21)
#13 := (= #12 f1)
#16 := (not #13)
#17 := (forall (vars (?v0 S1)) #16)
#14 := (exists (vars (?v0 S1)) #13)
#15 := (not #14)
#18 := (ite #10 #15 #17)
#23 := (implies #18 #22)
#24 := (not #23)
#93 := (iff #24 #90)
#70 := (or #69 #63)
#79 := (or #78 #70)
#84 := (not #79)
#91 := (iff #84 #90)
#88 := (iff #79 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#85 := (iff #24 #84)
#82 := (iff #23 #79)
#75 := (implies #60 #70)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #23 #75)
#73 := (iff #22 #70)
#66 := (implies #42 #63)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #22 #66)
#64 := (iff #21 #63)
#65 := [rewrite]: #64
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#68 := [monotonicity #44 #65]: #67
#74 := [trans #68 #72]: #73
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#56 := [monotonicity #47]: #55
#59 := [quant-intro #56]: #58
#52 := (iff #15 #51)
#49 := (iff #14 #48)
#50 := [quant-intro #47]: #49
#53 := [monotonicity #50]: #52
#62 := [monotonicity #44 #53 #59]: #61
#77 := [monotonicity #62 #74]: #76
#83 := [trans #77 #81]: #82
#86 := [monotonicity #83]: #85
#94 := [trans #86 #92]: #93
#41 := [asserted]: #24
#95 := [mp #41 #94]: #90
#96 := [not-or-elim #95]: #42
#104 := [iff-true #96]: #103
#107 := [monotonicity #104]: #106
#111 := [trans #107 #109]: #110
#97 := [not-or-elim #95]: #60
#112 := [mp #97 #111]: #51
#102 := [mp~ #112 #114]: #57
#599 := [mp #102 #598]: #594
#178 := (not #594)
#265 := (or #178 #69)
#179 := [quant-inst]: #265
[unit-resolution #179 #96 #599]: false
unsat
1f79e2aaf530f1cad27b8439c2a93a00022ad034 183 2
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f5 :: S1
#24 := f5
#25 := (f3 f5 #9)
#703 := (pattern #25)
decl f1 :: S1
#4 := f1
#80 := (= f1 #25)
#184 := (not #80)
#704 := (forall (vars (?v0 S2)) (:pat #703) #184)
decl f4 :: S2
#18 := f4
#28 := (f3 f5 f4)
#86 := (= f1 #28)
#262 := (= f1 f5)
#263 := (iff #86 #262)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#680 := (pattern #10)
#53 := (= f1 #8)
#50 := (= f1 #10)
#56 := (iff #50 #53)
#681 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #680) #56)
#59 := (forall (vars (?v0 S1) (?v1 S2)) #56)
#684 := (iff #59 #681)
#682 := (iff #56 #56)
#683 := [refl]: #682
#685 := [quant-intro #683]: #684
#115 := (~ #59 #59)
#122 := (~ #56 #56)
#123 := [refl]: #122
#116 := [nnf-pos #123]: #115
#17 := (:var 0 S1)
#19 := (f3 #17 f4)
#68 := (= f1 #19)
#71 := (forall (vars (?v0 S1)) #68)
#62 := (exists (vars (?v1 S2)) #50)
#65 := (forall (vars (?v0 S1)) #62)
#74 := (iff #65 #71)
#77 := (and #59 #74)
#83 := (exists (vars (?v0 S2)) #80)
#89 := (iff #83 #86)
#95 := (not #77)
#96 := (or #95 #89)
#101 := (not #96)
#29 := (= #28 f1)
#26 := (= #25 f1)
#27 := (exists (vars (?v0 S2)) #26)
#30 := (iff #27 #29)
#20 := (= #19 f1)
#21 := (forall (vars (?v0 S1)) #20)
#11 := (= #10 f1)
#15 := (exists (vars (?v1 S2)) #11)
#16 := (forall (vars (?v0 S1)) #15)
#22 := (iff #16 #21)
#12 := (= #8 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#23 := (and #14 #22)
#31 := (implies #23 #30)
#32 := (not #31)
#102 := (iff #32 #101)
#99 := (iff #31 #96)
#92 := (implies #77 #89)
#97 := (iff #92 #96)
#98 := [rewrite]: #97
#93 := (iff #31 #92)
#90 := (iff #30 #89)
#87 := (iff #29 #86)
#88 := [rewrite]: #87
#84 := (iff #27 #83)
#81 := (iff #26 #80)
#82 := [rewrite]: #81
#85 := [quant-intro #82]: #84
#91 := [monotonicity #85 #88]: #90
#78 := (iff #23 #77)
#75 := (iff #22 #74)
#72 := (iff #21 #71)
#69 := (iff #20 #68)
#70 := [rewrite]: #69
#73 := [quant-intro #70]: #72
#66 := (iff #16 #65)
#63 := (iff #15 #62)
#51 := (iff #11 #50)
#52 := [rewrite]: #51
#64 := [quant-intro #52]: #63
#67 := [quant-intro #64]: #66
#76 := [monotonicity #67 #73]: #75
#60 := (iff #14 #59)
#57 := (iff #13 #56)
#54 := (iff #12 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #52 #55]: #57
#61 := [quant-intro #58]: #60
#79 := [monotonicity #61 #76]: #78
#94 := [monotonicity #79 #91]: #93
#100 := [trans #94 #98]: #99
#103 := [monotonicity #100]: #102
#49 := [asserted]: #32
#106 := [mp #49 #103]: #101
#104 := [not-or-elim #106]: #77
#105 := [and-elim #104]: #59
#113 := [mp~ #105 #116]: #59
#686 := [mp #113 #685]: #681
#264 := (not #681)
#340 := (or #264 #263)
#341 := [quant-inst]: #340
#350 := [unit-resolution #341 #686]: #263
decl ?v0!3 :: S2
#155 := ?v0!3
#156 := (f3 f5 ?v0!3)
#128 := (= f1 #156)
#349 := (iff #128 #262)
#351 := (or #264 #349)
#342 := [quant-inst]: #351
#668 := [unit-resolution #342 #686]: #349
#353 := (not #349)
#671 := (or #353 #262)
#190 := (not #86)
#670 := [hypothesis]: #190
#195 := (or #86 #128)
#187 := (forall (vars (?v0 S2)) #184)
#196 := (or #190 #187)
#203 := (and #195 #196)
#197 := (and #196 #195)
#204 := (iff #197 #203)
#205 := [rewrite]: #204
#117 := (not #83)
#118 := (iff #86 #117)
#198 := (~ #118 #197)
#188 := (~ #117 #187)
#185 := (~ #184 #184)
#186 := [refl]: #185
#189 := [nnf-neg #186]: #188
#181 := (not #117)
#182 := (~ #181 #128)
#129 := (~ #83 #128)
#178 := [sk]: #129
#183 := [nnf-neg #178]: #182
#193 := (~ #86 #86)
#194 := [refl]: #193
#191 := (~ #190 #190)
#192 := [refl]: #191
#199 := [nnf-pos #192 #194 #183 #189]: #198
#108 := (not #89)
#119 := (iff #108 #118)
#120 := [rewrite]: #119
#109 := [not-or-elim #106]: #108
#121 := [mp #109 #120]: #118
#200 := [mp~ #121 #199]: #197
#201 := [mp #200 #205]: #203
#202 := [and-elim #201]: #195
#328 := [unit-resolution #202 #670]: #128
#352 := (not #128)
#356 := (or #353 #352 #262)
#335 := [def-axiom]: #356
#312 := [unit-resolution #335 #328]: #671
#655 := [unit-resolution #312 #668]: #262
#354 := (not #262)
#675 := (not #263)
#316 := (or #675 #354)
#676 := (or #675 #86 #354)
#677 := [def-axiom]: #676
#317 := [unit-resolution #677 #670]: #316
#318 := [unit-resolution #317 #655 #350]: false
#319 := [lemma #318]: #86
#709 := (or #190 #704)
#710 := (iff #196 #709)
#707 := (iff #187 #704)
#705 := (iff #184 #184)
#706 := [refl]: #705
#708 := [quant-intro #706]: #707
#711 := [monotonicity #708]: #710
#206 := [and-elim #201]: #196
#712 := [mp #206 #711]: #709
#282 := [unit-resolution #712 #319]: #704
#679 := (not #704)
#669 := (or #679 #190)
#327 := [quant-inst]: #669
[unit-resolution #327 #319 #282]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!12)

da85096b57c08af8febf5871c1333121a34c6d28 1 0
unsat
6c41d71d8ec4d73ffa088d938320c03ca09b9201 1 2
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!12)

5d15e0a34749300f4ce5f4c920d3ca259f7027cd 1 0
unsat
fa1639cb0c965ae73d4377750883cc09dbe87562 1 0
unsat
fc8d2e66c31565ae0b4756bf95cf9f0717981220 1 0
unsat
ce6d32e932c7cece567323ec34f7a5540258fa7f 1 0
unsat
cfd9d2f647046e282a1080aae51b4b88be291157 107 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#606 := (pattern #9)
decl f1 :: S1
#4 := f1
#37 := (= f1 #9)
#43 := (not #37)
#613 := (forall (vars (?v0 S2)) (:pat #606) #43)
#115 := (forall (vars (?v0 S2)) #43)
#616 := (iff #115 #613)
#614 := (iff #43 #43)
#615 := [refl]: #614
#617 := [quant-intro #615]: #616
#58 := (exists (vars (?v0 S2)) #37)
#74 := (not #58)
#116 := (~ #74 #115)
#113 := (~ #43 #43)
#114 := [refl]: #113
#117 := [nnf-neg #114]: #116
#11 := (:var 1 S2)
#12 := (= #8 #11)
#44 := (or #12 #43)
#49 := (forall (vars (?v1 S2)) #44)
#52 := (and #37 #49)
#55 := (exists (vars (?v0 S2)) #52)
#64 := (not #55)
#65 := (or #64 #58)
#70 := (not #65)
#10 := (= #9 f1)
#17 := (exists (vars (?v0 S2)) #10)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#16 := (exists (vars (?v0 S2)) #15)
#18 := (implies #16 #17)
#19 := (not #18)
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #55 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#60 := [quant-intro #39]: #59
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#47 := (iff #13 #44)
#40 := (implies #37 #12)
#45 := (iff #40 #44)
#46 := [rewrite]: #45
#41 := (iff #13 #40)
#42 := [monotonicity #39]: #41
#48 := [trans #42 #46]: #47
#51 := [quant-intro #48]: #50
#54 := [monotonicity #39 #51]: #53
#57 := [quant-intro #54]: #56
#63 := [monotonicity #57 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#36 := [asserted]: #19
#75 := [mp #36 #72]: #70
#76 := [not-or-elim #75]: #74
#118 := [mp~ #76 #117]: #115
#618 := [mp #118 #617]: #613
decl ?v0!0 :: S2
#84 := ?v0!0
#79 := (f3 ?v0!0)
#77 := (= f1 #79)
#85 := (= #8 ?v0!0)
#103 := (or #43 #85)
#106 := (forall (vars (?v1 S2)) #103)
#109 := (and #77 #106)
#86 := (or #85 #43)
#87 := (forall (vars (?v1 S2)) #86)
#88 := (and #77 #87)
#110 := (iff #88 #109)
#107 := (iff #87 #106)
#104 := (iff #86 #103)
#105 := [rewrite]: #104
#108 := [quant-intro #105]: #107
#111 := [monotonicity #108]: #110
#89 := (~ #55 #88)
#97 := (~ #88 #88)
#95 := (~ #87 #87)
#93 := (~ #86 #86)
#94 := [refl]: #93
#96 := [nnf-pos #94]: #95
#91 := (~ #77 #77)
#92 := [refl]: #91
#98 := [monotonicity #92 #96]: #97
#90 := [sk]: #89
#99 := [trans #90 #98]: #89
#73 := [not-or-elim #75]: #55
#100 := [mp~ #73 #99]: #88
#101 := [mp #100 #111]: #109
#102 := [and-elim #101]: #77
#191 := (not #77)
#278 := (not #613)
#193 := (or #278 #191)
#279 := [quant-inst]: #193
[unit-resolution #279 #102 #618]: false
unsat
22c7d1d1136fafc0a09e243a12ede1ee4fee416f 1 0
unsat
9ea0d22c6270219f7cef6ee3d8f429562349b2a3 75 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#18 := (not #10)
#11 := (:var 1 S2)
#12 := (= #8 #11)
#17 := (not #12)
#19 := (implies #17 #18)
#20 := (forall (vars (?v1 S2)) #19)
#21 := (and #10 #20)
#22 := (exists (vars (?v0 S2)) #21)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#16 := (exists (vars (?v0 S2)) #15)
#23 := (iff #16 #22)
#24 := (not #23)
#90 := (iff #24 false)
#1 := true
#85 := (not true)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #24 #85)
#83 := (iff #23 true)
#42 := (= f1 #9)
#48 := (not #42)
#49 := (or #12 #48)
#54 := (forall (vars (?v1 S2)) #49)
#57 := (and #42 #54)
#60 := (exists (vars (?v0 S2)) #57)
#78 := (iff #60 #60)
#81 := (iff #78 true)
#82 := [rewrite]: #81
#79 := (iff #23 #78)
#76 := (iff #22 #60)
#74 := (iff #21 #57)
#72 := (iff #20 #54)
#70 := (iff #19 #49)
#65 := (implies #17 #48)
#68 := (iff #65 #49)
#69 := [rewrite]: #68
#66 := (iff #19 #65)
#63 := (iff #18 #48)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#64 := [monotonicity #44]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#73 := [quant-intro #71]: #72
#75 := [monotonicity #44 #73]: #74
#77 := [quant-intro #75]: #76
#61 := (iff #16 #60)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (iff #13 #49)
#45 := (implies #42 #12)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #13 #45)
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#56 := [quant-intro #53]: #55
#59 := [monotonicity #44 #56]: #58
#62 := [quant-intro #59]: #61
#80 := [monotonicity #62 #77]: #79
#84 := [trans #80 #82]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#41 := [asserted]: #24
[mp #41 #91]: false
unsat
51de51a0d85b126e271283f7eca5a0bb3a5a5bca 207 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!0 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#221 := (?v1!0 f4)
#222 := (f3 #221)
decl f1 :: S1
#4 := f1
#309 := (= f1 #222)
#223 := (not #309)
#308 := (= f4 #221)
#313 := (or #308 #223)
#311 := (not #313)
#11 := (:var 0 S2)
#12 := (f3 #11)
#639 := (pattern #12)
#120 := (?v1!0 #11)
#147 := (= #11 #120)
#121 := (f3 #120)
#115 := (= f1 #121)
#128 := (not #115)
#153 := (or #128 #147)
#158 := (not #153)
#46 := (= f1 #12)
#55 := (not #46)
#161 := (or #55 #158)
#646 := (forall (vars (?v0 S2)) (:pat #639) #161)
#164 := (forall (vars (?v0 S2)) #161)
#649 := (iff #164 #646)
#647 := (iff #161 #161)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#129 := (= #120 #11)
#130 := (or #129 #128)
#131 := (not #130)
#137 := (or #55 #131)
#141 := (forall (vars (?v0 S2)) #137)
#165 := (iff #141 #164)
#162 := (iff #137 #161)
#159 := (iff #131 #158)
#156 := (iff #130 #153)
#150 := (or #147 #128)
#154 := (iff #150 #153)
#155 := [rewrite]: #154
#151 := (iff #130 #150)
#148 := (iff #129 #147)
#149 := [rewrite]: #148
#152 := [monotonicity #149]: #151
#157 := [trans #152 #155]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#17 := (:var 1 S2)
#18 := (= #11 #17)
#67 := (or #18 #55)
#72 := (forall (vars (?v1 S2)) #67)
#75 := (and #46 #72)
#78 := (exists (vars (?v0 S2)) #75)
#113 := (not #78)
#142 := (~ #113 #141)
#138 := (not #75)
#139 := (~ #138 #137)
#132 := (not #72)
#133 := (~ #132 #131)
#134 := [sk]: #133
#119 := (~ #55 #55)
#117 := [refl]: #119
#140 := [nnf-neg #117 #134]: #139
#143 := [nnf-neg #140]: #142
#49 := (= f4 #11)
#56 := (or #55 #49)
#61 := (forall (vars (?v0 S2)) #56)
#84 := (not #61)
#9 := (f3 f4)
#43 := (= f1 #9)
#93 := (not #43)
#102 := (or #93 #84 #78)
#105 := (not #102)
#13 := (= #12 f1)
#19 := (implies #13 #18)
#20 := (forall (vars (?v1 S2)) #19)
#21 := (and #13 #20)
#22 := (exists (vars (?v0 S2)) #21)
#14 := (= #11 f4)
#15 := (implies #13 #14)
#16 := (forall (vars (?v0 S2)) #15)
#23 := (implies #16 #22)
#10 := (= #9 f1)
#24 := (implies #10 #23)
#25 := (not #24)
#108 := (iff #25 #105)
#85 := (or #84 #78)
#94 := (or #93 #85)
#99 := (not #94)
#106 := (iff #99 #105)
#103 := (iff #94 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#100 := (iff #25 #99)
#97 := (iff #24 #94)
#90 := (implies #43 #85)
#95 := (iff #90 #94)
#96 := [rewrite]: #95
#91 := (iff #24 #90)
#88 := (iff #23 #85)
#81 := (implies #61 #78)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #23 #81)
#79 := (iff #22 #78)
#76 := (iff #21 #75)
#73 := (iff #20 #72)
#70 := (iff #19 #67)
#64 := (implies #46 #18)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #19 #64)
#47 := (iff #13 #46)
#48 := [rewrite]: #47
#66 := [monotonicity #48]: #65
#71 := [trans #66 #69]: #70
#74 := [quant-intro #71]: #73
#77 := [monotonicity #48 #74]: #76
#80 := [quant-intro #77]: #79
#62 := (iff #16 #61)
#59 := (iff #15 #56)
#52 := (implies #46 #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#54 := [monotonicity #48 #51]: #53
#60 := [trans #54 #58]: #59
#63 := [quant-intro #60]: #62
#83 := [monotonicity #63 #80]: #82
#89 := [trans #83 #87]: #88
#44 := (iff #10 #43)
#45 := [rewrite]: #44
#92 := [monotonicity #45 #89]: #91
#98 := [trans #92 #96]: #97
#101 := [monotonicity #98]: #100
#109 := [trans #101 #107]: #108
#42 := [asserted]: #25
#110 := [mp #42 #109]: #105
#114 := [not-or-elim #110]: #113
#144 := [mp~ #114 #143]: #141
#145 := [mp #144 #166]: #164
#651 := [mp #145 #650]: #646
#111 := [not-or-elim #110]: #43
#420 := (not #646)
#627 := (or #420 #93 #311)
#310 := (or #223 #308)
#301 := (not #310)
#312 := (or #93 #301)
#299 := (or #420 #312)
#638 := (iff #299 #627)
#631 := (or #93 #311)
#634 := (or #420 #631)
#637 := (iff #634 #627)
#632 := [rewrite]: #637
#635 := (iff #299 #634)
#633 := (iff #312 #631)
#315 := (iff #301 #311)
#241 := (iff #310 #313)
#314 := [rewrite]: #241
#294 := [monotonicity #314]: #315
#288 := [monotonicity #294]: #633
#636 := [monotonicity #288]: #635
#628 := [trans #636 #632]: #638
#300 := [quant-inst]: #299
#286 := [mp #300 #628]: #627
#595 := [unit-resolution #286 #111 #651]: #311
#630 := (or #313 #309)
#271 := [def-axiom]: #630
#596 := [unit-resolution #271 #595]: #309
#291 := (not #308)
#629 := (or #313 #291)
#287 := [def-axiom]: #629
#591 := [unit-resolution #287 #595]: #291
#640 := (forall (vars (?v0 S2)) (:pat #639) #56)
#643 := (iff #61 #640)
#641 := (iff #56 #56)
#642 := [refl]: #641
#644 := [quant-intro #642]: #643
#126 := (~ #61 #61)
#124 := (~ #56 #56)
#125 := [refl]: #124
#127 := [nnf-pos #125]: #126
#112 := [not-or-elim #110]: #61
#118 := [mp~ #112 #127]: #61
#645 := [mp #118 #644]: #640
#276 := (not #640)
#277 := (or #276 #308 #223)
#278 := (or #276 #310)
#621 := (iff #278 #277)
#617 := (or #276 #313)
#620 := (iff #617 #277)
#615 := [rewrite]: #620
#618 := (iff #278 #617)
#619 := [monotonicity #314]: #618
#257 := [trans #619 #615]: #621
#616 := [quant-inst]: #278
#622 := [mp #616 #257]: #277
[unit-resolution #622 #645 #591 #596]: false
unsat
b8d80ad0d8c340491041b0c69d71b3944eaf90e6 93 0
#2 := false
decl f5 :: (-> S2 S1)
decl f6 :: S2
#16 := f6
#20 := (f5 f6)
decl f1 :: S1
#4 := f1
#65 := (= f1 #20)
#84 := (not #65)
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
#17 := (f3 f6 f4)
#59 := (= f1 #17)
#8 := (:var 0 S2)
#12 := (f5 #8)
#44 := (= f1 #12)
#10 := (f3 #8 f4)
#41 := (= f1 #10)
#50 := (not #41)
#51 := (or #50 #44)
#56 := (forall (vars (?v0 S2)) #51)
#62 := (and #56 #59)
#71 := (not #62)
#72 := (or #71 #65)
#77 := (not #72)
#21 := (= #20 f1)
#18 := (= #17 f1)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2)) #14)
#19 := (and #15 #18)
#22 := (implies #19 #21)
#23 := (not #22)
#78 := (iff #23 #77)
#75 := (iff #22 #72)
#68 := (implies #62 #65)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #22 #68)
#66 := (iff #21 #65)
#67 := [rewrite]: #66
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#61 := [rewrite]: #60
#57 := (iff #15 #56)
#54 := (iff #14 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #14 #47)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#58 := [quant-intro #55]: #57
#64 := [monotonicity #58 #61]: #63
#70 := [monotonicity #64 #67]: #69
#76 := [trans #70 #74]: #75
#79 := [monotonicity #76]: #78
#40 := [asserted]: #23
#82 := [mp #40 #79]: #77
#85 := [not-or-elim #82]: #84
#80 := [not-or-elim #82]: #62
#83 := [and-elim #80]: #59
#572 := (pattern #12)
#571 := (pattern #10)
#573 := (forall (vars (?v0 S2)) (:pat #571 #572) #51)
#576 := (iff #56 #573)
#574 := (iff #51 #51)
#575 := [refl]: #574
#577 := [quant-intro #575]: #576
#97 := (~ #56 #56)
#95 := (~ #51 #51)
#96 := [refl]: #95
#98 := [nnf-pos #96]: #97
#81 := [and-elim #80]: #56
#88 := [mp~ #81 #98]: #56
#578 := [mp #88 #577]: #573
#155 := (not #59)
#157 := (not #573)
#244 := (or #157 #155 #65)
#242 := (or #155 #65)
#235 := (or #157 #242)
#247 := (iff #235 #244)
#175 := [rewrite]: #247
#246 := [quant-inst]: #235
#248 := [mp #246 #175]: #244
[unit-resolution #248 #578 #83 #85]: false
unsat
628763241ae198f2ea4a54c641ca6e8df6d851ca 250 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!1 :: (-> S2 S2)
decl ?v0!0 :: S2
#123 := ?v0!0
#252 := (?v1!1 ?v0!0)
#253 := (f3 #252)
decl f1 :: S1
#4 := f1
#340 := (= f1 #253)
#254 := (not #340)
#339 := (= ?v0!0 #252)
#272 := (or #339 #254)
#346 := (not #272)
#8 := (:var 0 S2)
#9 := (f3 #8)
#677 := (pattern #9)
#119 := (?v1!1 #8)
#154 := (= #8 #119)
#120 := (f3 #119)
#134 := (= f1 #120)
#135 := (not #134)
#160 := (or #135 #154)
#165 := (not #160)
#44 := (= f1 #9)
#81 := (not #44)
#168 := (or #81 #165)
#678 := (forall (vars (?v0 S2)) (:pat #677) #168)
#171 := (forall (vars (?v0 S2)) #168)
#681 := (iff #171 #678)
#679 := (iff #168 #168)
#680 := [refl]: #679
#682 := [quant-intro #680]: #681
#136 := (= #119 #8)
#137 := (or #136 #135)
#138 := (not #137)
#144 := (or #81 #138)
#148 := (forall (vars (?v0 S2)) #144)
#172 := (iff #148 #171)
#169 := (iff #144 #168)
#166 := (iff #138 #165)
#163 := (iff #137 #160)
#157 := (or #154 #135)
#161 := (iff #157 #160)
#162 := [rewrite]: #161
#158 := (iff #137 #157)
#155 := (iff #136 #154)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#164 := [trans #159 #162]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [quant-intro #170]: #172
#12 := (:var 1 S2)
#20 := (= #8 #12)
#82 := (or #20 #81)
#87 := (forall (vars (?v1 S2)) #82)
#90 := (and #44 #87)
#93 := (exists (vars (?v0 S2)) #90)
#112 := (not #93)
#149 := (~ #112 #148)
#145 := (not #90)
#146 := (~ #145 #144)
#139 := (not #87)
#140 := (~ #139 #138)
#141 := [sk]: #140
#132 := (~ #81 #81)
#133 := [refl]: #132
#147 := [nnf-neg #133 #141]: #146
#150 := [nnf-neg #147]: #149
#13 := (f3 #12)
#50 := (= f1 #13)
#56 := (and #44 #50)
#66 := (not #56)
#67 := (or #20 #66)
#72 := (forall (vars (?v0 S2) (?v1 S2)) #67)
#47 := (exists (vars (?v0 S2)) #44)
#75 := (and #47 #72)
#99 := (not #75)
#100 := (or #99 #93)
#105 := (not #100)
#10 := (= #9 f1)
#21 := (implies #10 #20)
#22 := (forall (vars (?v1 S2)) #21)
#23 := (and #10 #22)
#24 := (exists (vars (?v0 S2)) #23)
#16 := (= #12 #8)
#14 := (= #13 f1)
#15 := (and #14 #10)
#17 := (implies #15 #16)
#18 := (forall (vars (?v0 S2) (?v1 S2)) #17)
#11 := (exists (vars (?v0 S2)) #10)
#19 := (and #11 #18)
#25 := (implies #19 #24)
#26 := (not #25)
#106 := (iff #26 #105)
#103 := (iff #25 #100)
#96 := (implies #75 #93)
#101 := (iff #96 #100)
#102 := [rewrite]: #101
#97 := (iff #25 #96)
#94 := (iff #24 #93)
#91 := (iff #23 #90)
#88 := (iff #22 #87)
#85 := (iff #21 #82)
#78 := (implies #44 #20)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #21 #78)
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#80 := [monotonicity #46]: #79
#86 := [trans #80 #84]: #85
#89 := [quant-intro #86]: #88
#92 := [monotonicity #46 #89]: #91
#95 := [quant-intro #92]: #94
#76 := (iff #19 #75)
#73 := (iff #18 #72)
#70 := (iff #17 #67)
#63 := (implies #56 #20)
#68 := (iff #63 #67)
#69 := [rewrite]: #68
#64 := (iff #17 #63)
#61 := (iff #16 #20)
#62 := [rewrite]: #61
#59 := (iff #15 #56)
#53 := (and #50 #44)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#55 := [monotonicity #52 #46]: #54
#60 := [trans #55 #58]: #59
#65 := [monotonicity #60 #62]: #64
#71 := [trans #65 #69]: #70
#74 := [quant-intro #71]: #73
#48 := (iff #11 #47)
#49 := [quant-intro #46]: #48
#77 := [monotonicity #49 #74]: #76
#98 := [monotonicity #77 #95]: #97
#104 := [trans #98 #102]: #103
#107 := [monotonicity #104]: #106
#43 := [asserted]: #26
#110 := [mp #43 #107]: #105
#113 := [not-or-elim #110]: #112
#151 := [mp~ #113 #150]: #148
#152 := [mp #151 #173]: #171
#683 := [mp #152 #682]: #678
#124 := (f3 ?v0!0)
#125 := (= f1 #124)
#126 := (~ #47 #125)
#116 := [sk]: #126
#108 := [not-or-elim #110]: #75
#109 := [and-elim #108]: #47
#128 := [mp~ #109 #116]: #125
#343 := (not #125)
#658 := (not #678)
#330 := (or #658 #343 #346)
#341 := (or #254 #339)
#332 := (not #341)
#344 := (or #343 #332)
#331 := (or #658 #344)
#659 := (iff #331 #330)
#664 := (or #343 #346)
#666 := (or #658 #664)
#663 := (iff #666 #330)
#669 := [rewrite]: #663
#667 := (iff #331 #666)
#319 := (iff #344 #664)
#325 := (iff #332 #346)
#345 := (iff #341 #272)
#342 := [rewrite]: #345
#662 := [monotonicity #342]: #325
#451 := [monotonicity #662]: #319
#668 := [monotonicity #451]: #667
#317 := [trans #668 #669]: #659
#665 := [quant-inst]: #331
#322 := [mp #665 #317]: #330
#453 := [unit-resolution #322 #128 #683]: #346
#302 := (or #272 #340)
#645 := [def-axiom]: #302
#606 := [unit-resolution #645 #453]: #340
#660 := (not #339)
#318 := (or #272 #660)
#661 := [def-axiom]: #318
#607 := [unit-resolution #661 #453]: #660
#670 := (pattern #9 #13)
#142 := (not #50)
#186 := (or #20 #81 #142)
#671 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #670) #186)
#191 := (forall (vars (?v0 S2) (?v1 S2)) #186)
#674 := (iff #191 #671)
#672 := (iff #186 #186)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#192 := (iff #72 #191)
#189 := (iff #67 #186)
#143 := (or #81 #142)
#183 := (or #20 #143)
#187 := (iff #183 #186)
#188 := [rewrite]: #187
#184 := (iff #67 #183)
#181 := (iff #66 #143)
#153 := (not #143)
#176 := (not #153)
#179 := (iff #176 #143)
#180 := [rewrite]: #179
#177 := (iff #66 #176)
#174 := (iff #56 #153)
#175 := [rewrite]: #174
#178 := [monotonicity #175]: #177
#182 := [trans #178 #180]: #181
#185 := [monotonicity #182]: #184
#190 := [trans #185 #188]: #189
#193 := [quant-intro #190]: #192
#129 := (~ #72 #72)
#114 := (~ #67 #67)
#127 := [refl]: #114
#130 := [nnf-pos #127]: #129
#111 := [and-elim #108]: #72
#131 := [mp~ #111 #130]: #72
#194 := [mp #131 #193]: #191
#676 := [mp #194 #675]: #671
#627 := (not #671)
#622 := (or #627 #343 #339 #254)
#352 := (= #252 ?v0!0)
#353 := (or #352 #254 #343)
#623 := (or #627 #353)
#473 := (iff #623 #622)
#635 := (or #343 #339 #254)
#629 := (or #627 #635)
#471 := (iff #629 #622)
#472 := [rewrite]: #471
#624 := (iff #623 #629)
#625 := (iff #353 #635)
#634 := (or #339 #254 #343)
#632 := (iff #634 #635)
#636 := [rewrite]: #632
#347 := (iff #353 #634)
#355 := (iff #352 #339)
#633 := [rewrite]: #355
#631 := [monotonicity #633]: #347
#626 := [trans #631 #636]: #625
#630 := [monotonicity #626]: #624
#615 := [trans #630 #472]: #473
#628 := [quant-inst]: #623
#616 := [mp #628 #615]: #622
[unit-resolution #616 #128 #676 #607 #606]: false
unsat
0f8bf9d230b6b97c3b9a64ed4f1bb8757963fbc7 113 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f6 :: S2
#16 := f6
#19 := (f3 f6 f4)
decl f1 :: S1
#4 := f1
#57 := (= f1 #19)
decl f5 :: (-> S2 S1)
#17 := (f5 f6)
#54 := (= f1 #17)
#60 := (and #54 #57)
#63 := (not #60)
#8 := (:var 0 S2)
#12 := (f5 #8)
#45 := (= f1 #12)
#10 := (f3 #8 f4)
#42 := (= f1 #10)
#48 := (and #42 #45)
#51 := (exists (vars (?v0 S2)) #48)
#66 := (or #51 #63)
#69 := (not #66)
#20 := (= #19 f1)
#18 := (= #17 f1)
#21 := (and #18 #20)
#22 := (not #21)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (and #11 #13)
#15 := (exists (vars (?v0 S2)) #14)
#23 := (or #15 #22)
#24 := (not #23)
#70 := (iff #24 #69)
#67 := (iff #23 #66)
#64 := (iff #22 #63)
#61 := (iff #21 #60)
#58 := (iff #20 #57)
#59 := [rewrite]: #58
#55 := (iff #18 #54)
#56 := [rewrite]: #55
#62 := [monotonicity #56 #59]: #61
#65 := [monotonicity #62]: #64
#52 := (iff #15 #51)
#49 := (iff #14 #48)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#50 := [monotonicity #44 #47]: #49
#53 := [quant-intro #50]: #52
#68 := [monotonicity #53 #65]: #67
#71 := [monotonicity #68]: #70
#41 := [asserted]: #24
#74 := [mp #41 #71]: #69
#75 := [not-or-elim #74]: #60
#77 := [and-elim #75]: #57
#76 := [and-elim #75]: #54
#585 := (pattern #12)
#584 := (pattern #10)
#93 := (not #45)
#92 := (not #42)
#94 := (or #92 #93)
#586 := (forall (vars (?v0 S2)) (:pat #584 #585) #94)
#101 := (forall (vars (?v0 S2)) #94)
#589 := (iff #101 #586)
#587 := (iff #94 #94)
#588 := [refl]: #587
#590 := [quant-intro #588]: #589
#87 := (not #48)
#90 := (forall (vars (?v0 S2)) #87)
#102 := (iff #90 #101)
#99 := (iff #87 #94)
#95 := (not #94)
#83 := (not #95)
#97 := (iff #83 #94)
#98 := [rewrite]: #97
#84 := (iff #87 #83)
#85 := (iff #48 #95)
#86 := [rewrite]: #85
#96 := [monotonicity #86]: #84
#100 := [trans #96 #98]: #99
#103 := [quant-intro #100]: #102
#72 := (not #51)
#80 := (~ #72 #90)
#88 := (~ #87 #87)
#89 := [refl]: #88
#78 := [nnf-neg #89]: #80
#73 := [not-or-elim #74]: #72
#91 := [mp~ #73 #78]: #90
#104 := [mp #91 #103]: #101
#591 := [mp #104 #590]: #586
#255 := (not #57)
#168 := (not #54)
#248 := (not #586)
#259 := (or #248 #168 #255)
#169 := (or #255 #168)
#260 := (or #248 #169)
#578 := (iff #260 #259)
#256 := (or #168 #255)
#261 := (or #248 #256)
#241 := (iff #261 #259)
#576 := [rewrite]: #241
#258 := (iff #260 #261)
#170 := (iff #169 #256)
#257 := [rewrite]: #170
#262 := [monotonicity #257]: #258
#235 := [trans #262 #576]: #578
#188 := [quant-inst]: #260
#365 := [mp #188 #235]: #259
[unit-resolution #365 #591 #76 #77]: false
unsat
64bd43a9d49de65761e5220e25dbbe3dc269bf0e 238 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!1 :: (-> S2 S2)
decl ?v0!0 :: S2
#116 := ?v0!0
#240 := (?v1!1 ?v0!0)
#241 := (f3 #240)
decl f1 :: S1
#4 := f1
#328 := (= f1 #241)
#242 := (not #328)
#327 := (= ?v0!0 #240)
#260 := (or #327 #242)
#334 := (not #260)
#8 := (:var 0 S2)
#9 := (f3 #8)
#658 := (pattern #9)
#145 := (?v1!1 #8)
#166 := (= #8 #145)
#146 := (f3 #145)
#147 := (= f1 #146)
#148 := (not #147)
#172 := (or #148 #166)
#177 := (not #172)
#41 := (= f1 #9)
#47 := (not #41)
#180 := (or #47 #177)
#665 := (forall (vars (?v0 S2)) (:pat #658) #180)
#183 := (forall (vars (?v0 S2)) #180)
#668 := (iff #183 #665)
#666 := (iff #180 #180)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#149 := (= #145 #8)
#150 := (or #149 #148)
#151 := (not #150)
#157 := (or #47 #151)
#160 := (forall (vars (?v0 S2)) #157)
#184 := (iff #160 #183)
#181 := (iff #157 #180)
#178 := (iff #151 #177)
#175 := (iff #150 #172)
#169 := (or #166 #148)
#173 := (iff #169 #172)
#174 := [rewrite]: #173
#170 := (iff #150 #169)
#167 := (iff #149 #166)
#168 := [rewrite]: #167
#171 := [monotonicity #168]: #170
#176 := [trans #171 #174]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [quant-intro #182]: #184
#11 := (:var 1 S2)
#12 := (= #8 #11)
#48 := (or #12 #47)
#53 := (forall (vars (?v1 S2)) #48)
#56 := (and #41 #53)
#68 := (not #56)
#112 := (forall (vars (?v0 S2)) #68)
#161 := (~ #112 #160)
#158 := (~ #68 #157)
#152 := (not #53)
#153 := (~ #152 #151)
#154 := [sk]: #153
#143 := (~ #47 #47)
#144 := [refl]: #143
#159 := [nnf-neg #144 #154]: #158
#162 := [nnf-pos #159]: #161
decl f4 :: S1
#17 := f4
#62 := (= f1 f4)
#69 := (or #68 #62)
#74 := (forall (vars (?v0 S2)) #69)
#113 := (iff #74 #112)
#110 := (iff #69 #68)
#105 := (or #68 false)
#108 := (iff #105 #68)
#109 := [rewrite]: #108
#106 := (iff #69 #105)
#101 := (iff #62 false)
#92 := (not #62)
#59 := (exists (vars (?v0 S2)) #56)
#77 := (and #59 #74)
#83 := (not #77)
#84 := (or #62 #83)
#89 := (not #84)
#18 := (= f4 f1)
#10 := (= #9 f1)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 S2)) #19)
#16 := (exists (vars (?v0 S2)) #15)
#21 := (and #16 #20)
#22 := (implies #21 #18)
#23 := (not #22)
#90 := (iff #23 #89)
#87 := (iff #22 #84)
#80 := (implies #77 #62)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #22 #80)
#63 := (iff #18 #62)
#64 := [rewrite]: #63
#78 := (iff #21 #77)
#75 := (iff #20 #74)
#72 := (iff #19 #69)
#65 := (implies #56 #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #19 #65)
#57 := (iff #15 #56)
#54 := (iff #14 #53)
#51 := (iff #13 #48)
#44 := (implies #41 #12)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #13 #44)
#42 := (iff #10 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #43 #55]: #57
#67 := [monotonicity #58 #64]: #66
#73 := [trans #67 #71]: #72
#76 := [quant-intro #73]: #75
#60 := (iff #16 #59)
#61 := [quant-intro #58]: #60
#79 := [monotonicity #61 #76]: #78
#82 := [monotonicity #79 #64]: #81
#88 := [trans #82 #86]: #87
#91 := [monotonicity #88]: #90
#40 := [asserted]: #23
#94 := [mp #40 #91]: #89
#93 := [not-or-elim #94]: #92
#102 := [iff-false #93]: #101
#107 := [monotonicity #102]: #106
#111 := [trans #107 #109]: #110
#114 := [quant-intro #111]: #113
#95 := [not-or-elim #94]: #77
#97 := [and-elim #95]: #74
#115 := [mp #97 #114]: #112
#163 := [mp~ #115 #162]: #160
#164 := [mp #163 #185]: #183
#670 := [mp #164 #669]: #665
#100 := (f3 ?v0!0)
#98 := (= f1 #100)
#117 := (= #8 ?v0!0)
#133 := (or #47 #117)
#136 := (forall (vars (?v1 S2)) #133)
#139 := (and #98 #136)
#103 := (or #117 #47)
#104 := (forall (vars (?v1 S2)) #103)
#118 := (and #98 #104)
#140 := (iff #118 #139)
#137 := (iff #104 #136)
#134 := (iff #103 #133)
#135 := [rewrite]: #134
#138 := [quant-intro #135]: #137
#141 := [monotonicity #138]: #140
#119 := (~ #59 #118)
#127 := (~ #118 #118)
#125 := (~ #104 #104)
#123 := (~ #103 #103)
#124 := [refl]: #123
#126 := [nnf-pos #124]: #125
#121 := (~ #98 #98)
#122 := [refl]: #121
#128 := [monotonicity #122 #126]: #127
#120 := [sk]: #119
#129 := [trans #120 #128]: #119
#96 := [and-elim #95]: #59
#130 := [mp~ #96 #129]: #118
#131 := [mp #130 #141]: #139
#132 := [and-elim #131]: #98
#331 := (not #98)
#646 := (not #665)
#318 := (or #646 #331 #334)
#329 := (or #242 #327)
#320 := (not #329)
#332 := (or #331 #320)
#319 := (or #646 #332)
#647 := (iff #319 #318)
#652 := (or #331 #334)
#654 := (or #646 #652)
#651 := (iff #654 #318)
#657 := [rewrite]: #651
#655 := (iff #319 #654)
#307 := (iff #332 #652)
#313 := (iff #320 #334)
#333 := (iff #329 #260)
#330 := [rewrite]: #333
#650 := [monotonicity #330]: #313
#439 := [monotonicity #650]: #307
#656 := [monotonicity #439]: #655
#305 := [trans #656 #657]: #647
#653 := [quant-inst]: #319
#310 := [mp #653 #305]: #318
#611 := [unit-resolution #310 #132 #670]: #334
#290 := (or #260 #328)
#633 := [def-axiom]: #290
#616 := [unit-resolution #633 #611]: #328
#648 := (not #327)
#306 := (or #260 #648)
#649 := [def-axiom]: #306
#617 := [unit-resolution #649 #611]: #648
#659 := (forall (vars (?v1 S2)) (:pat #658) #133)
#662 := (iff #136 #659)
#660 := (iff #133 #133)
#661 := [refl]: #660
#663 := [quant-intro #661]: #662
#142 := [and-elim #131]: #136
#664 := [mp #142 #663]: #659
#640 := (not #659)
#276 := (or #640 #327 #242)
#296 := (= #240 ?v0!0)
#297 := (or #242 #296)
#641 := (or #640 #297)
#631 := (iff #641 #276)
#281 := (or #640 #260)
#642 := (iff #281 #276)
#645 := [rewrite]: #642
#282 := (iff #641 #281)
#639 := (iff #297 #260)
#637 := (iff #297 #329)
#635 := (iff #296 #327)
#636 := [rewrite]: #635
#638 := [monotonicity #636]: #637
#634 := [trans #638 #330]: #639
#644 := [monotonicity #634]: #282
#632 := [trans #644 #645]: #631
#643 := [quant-inst]: #641
#338 := [mp #643 #632]: #276
[unit-resolution #338 #664 #617 #616]: false
unsat
42f3c8af4c50150e11519c085a0ad69e107e1705 43 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (not #12)
#14 := (or #12 #13)
#15 := (not #14)
#57 := (iff #15 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #15 #52)
#50 := (iff #14 true)
#36 := (= f1 f4)
#33 := (= f1 f3)
#39 := (or #33 #36)
#42 := (not #39)
#45 := (or #39 #42)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#41 := [monotonicity #35 #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #41 #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#32 := [asserted]: #15
[mp #32 #58]: false
unsat
e44a18e086890afdae37ccfa17aec44f2a634103 27 0
#2 := false
#1 := true
#9 := (or false true)
#8 := (and true false)
#10 := (implies #8 #9)
#11 := (not #10)
#45 := (iff #11 false)
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (implies false true)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#29 := (iff #8 false)
#30 := [rewrite]: #29
#35 := [monotonicity #30 #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#28 := [asserted]: #11
[mp #28 #46]: false
unsat
48f0da3339d9c9f7707291c89458bdaf3e50c114 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (iff #10 #10)
#12 := (not #11)
#45 := (iff #12 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 true)
#30 := (= f1 #9)
#33 := (iff #30 #30)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 #30)
#32 := [rewrite]: #31
#35 := [monotonicity #32 #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#29 := [asserted]: #12
[mp #29 #46]: false
unsat
e7059fb5d2b001f75897ae16a2ace8ce919e02a1 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#11 := (= #10 f1)
#12 := (iff #11 #11)
#13 := (not #12)
#46 := (iff #13 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #13 #41)
#39 := (iff #12 true)
#31 := (= f1 #10)
#34 := (iff #31 #31)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #12 #34)
#32 := (iff #11 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33 #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#30 := [asserted]: #13
[mp #30 #47]: false
unsat
f5fef851c10f40408540848a3507970291adb3e5 35 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (not #10)
#12 := (ite #10 #10 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#31 := (= f1 #9)
#34 := (not #31)
#37 := (ite #31 #31 #34)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (iff #11 #34)
#32 := (iff #10 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#39 := [monotonicity #33 #33 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#30 := [asserted]: #13
[mp #30 #50]: false
unsat
9facdecb47b87e40c25944deaa804ef85fc985e3 38 0
#2 := false
decl f3 :: (-> S2 S2)
decl f4 :: S2
#13 := f4
#14 := (f3 f4)
#41 := (= f4 #14)
#45 := (not #41)
#15 := (= #14 f4)
#16 := (not #15)
#46 := (iff #16 #45)
#43 := (iff #15 #41)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#40 := [asserted]: #16
#50 := [mp #40 #47]: #45
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (pattern #9)
#34 := (= #8 #9)
#37 := (forall (vars (?v0 S2)) (:pat #10) #34)
#58 := (~ #37 #37)
#56 := (~ #34 #34)
#57 := [refl]: #56
#59 := [nnf-pos #57]: #58
#11 := (= #9 #8)
#12 := (forall (vars (?v0 S2)) (:pat #10) #11)
#38 := (iff #12 #37)
#35 := (iff #11 #34)
#36 := [rewrite]: #35
#39 := [quant-intro #36]: #38
#33 := [asserted]: #12
#42 := [mp #33 #39]: #37
#51 := [mp~ #42 #59]: #37
#113 := (not #37)
#200 := (or #113 #41)
#114 := [quant-inst]: #200
[unit-resolution #114 #51 #50]: false
unsat
ae9dfcc290bc6bcccab3cd3af533d10c7c03b3b8 30 0
#2 := false
decl f4 :: (-> S3 S4)
decl f6 :: S3
#17 := f6
#18 := (f4 f6)
decl f3 :: (-> S2 S4)
decl f5 :: S2
#15 := f5
#16 := (f3 f5)
#19 := (= #16 #18)
#20 := (not #19)
#38 := [asserted]: #20
#10 := (:var 0 S3)
#11 := (f4 #10)
#8 := (:var 1 S2)
#9 := (f3 #8)
#12 := (pattern #9 #11)
#13 := (= #9 #11)
#14 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #12) #13)
#48 := (~ #14 #14)
#46 := (~ #13 #13)
#47 := [refl]: #46
#49 := [nnf-pos #47]: #48
#37 := [asserted]: #14
#41 := [mp~ #37 #49]: #14
#103 := (not #14)
#190 := (or #103 #19)
#104 := [quant-inst]: #190
[unit-resolution #104 #41 #38]: false
unsat
90ce83a254a12d0f1bfd0c5eb5a99c36ab0fe295 16 0
#2 := false
#1 := true
#8 := (implies true true)
#9 := (not #8)
#34 := (iff #9 false)
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
9a0ddca6dee00a602bc428366efd931bcfcee94b 16 0
#2 := false
#8 := (implies false false)
#9 := (not #8)
#34 := (iff #9 false)
#1 := true
#29 := (not true)
#32 := (iff #29 false)
#33 := [rewrite]: #32
#30 := (iff #9 #29)
#27 := (iff #8 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#26 := [asserted]: #9
[mp #26 #35]: false
unsat
cabaa8d0303be40a64e7064642dabce9e7bfcad7 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (implies #10 #10)
#12 := (not #11)
#45 := (iff #12 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 true)
#30 := (= f1 #9)
#33 := (implies #30 #30)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 #30)
#32 := [rewrite]: #31
#35 := [monotonicity #32 #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#29 := [asserted]: #12
[mp #29 #46]: false
unsat
46acb4cd4b5353c32c529ffe509fc6f26ac2f2a1 3 0
#2 := false
[asserted]: false
unsat
ac00789473bf074e49a8a6419c1f2a1042912d6a 48 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (implies #9 #12)
#14 := (not #13)
#62 := (iff #14 false)
#35 := (= f1 f4)
#32 := (= f1 f3)
#38 := (or #32 #35)
#44 := (not #32)
#45 := (or #44 #38)
#50 := (not #45)
#60 := (iff #50 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #50 #55)
#53 := (iff #45 true)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#51 := (iff #14 #50)
#48 := (iff #13 #45)
#41 := (implies #32 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #13 #41)
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#33 := (iff #9 #32)
#34 := [rewrite]: #33
#40 := [monotonicity #34 #37]: #39
#43 := [monotonicity #34 #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#63 := [trans #52 #61]: #62
#31 := [asserted]: #14
[mp #31 #63]: false
unsat
040123bf68e09d0b72cf990436bb29a623c102b8 18 0
#2 := false
#9 := 1::int
#8 := 0::int
#10 := (< 0::int 1::int)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
75052914158f379cd343f693f354895fa579a89c 53 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (or #11 #9)
#13 := (implies #9 #12)
#14 := (not #13)
#67 := (iff #14 false)
#35 := (= f1 f4)
#32 := (= f1 f3)
#41 := (or #32 #35)
#49 := (not #32)
#50 := (or #49 #41)
#55 := (not #50)
#65 := (iff #55 false)
#1 := true
#60 := (not true)
#63 := (iff #60 false)
#64 := [rewrite]: #63
#61 := (iff #55 #60)
#58 := (iff #50 true)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#56 := (iff #14 #55)
#53 := (iff #13 #50)
#46 := (implies #32 #41)
#51 := (iff #46 #50)
#52 := [rewrite]: #51
#47 := (iff #13 #46)
#44 := (iff #12 #41)
#38 := (or #35 #32)
#42 := (iff #38 #41)
#43 := [rewrite]: #42
#39 := (iff #12 #38)
#33 := (iff #9 #32)
#34 := [rewrite]: #33
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37 #34]: #39
#45 := [trans #40 #43]: #44
#48 := [monotonicity #34 #45]: #47
#54 := [trans #48 #52]: #53
#57 := [monotonicity #54]: #56
#68 := [trans #57 #66]: #67
#31 := [asserted]: #14
[mp #31 #68]: false
unsat
be1600749b493592f603ae3a7f9dcbc68d688187 18 0
#2 := false
#9 := 1::int
#8 := 0::int
#10 := (<= 0::int 1::int)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
4bcd26d70bcaf24bb295031b732101a3dec2c643 56 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#11 := f4
#12 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#13 := (implies #9 #12)
#10 := (not #9)
#14 := (implies #10 #13)
#15 := (not #14)
#70 := (iff #15 false)
#39 := (= f1 f4)
#33 := (= f1 f3)
#36 := (not #33)
#45 := (or #36 #39)
#53 := (or #33 #45)
#58 := (not #53)
#68 := (iff #58 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #58 #63)
#61 := (iff #53 true)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#59 := (iff #15 #58)
#56 := (iff #14 #53)
#50 := (implies #36 #45)
#54 := (iff #50 #53)
#55 := [rewrite]: #54
#51 := (iff #14 #50)
#48 := (iff #13 #45)
#42 := (implies #33 #39)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#41 := [rewrite]: #40
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#44 := [monotonicity #35 #41]: #43
#49 := [trans #44 #47]: #48
#37 := (iff #10 #36)
#38 := [monotonicity #35]: #37
#52 := [monotonicity #38 #49]: #51
#57 := [trans #52 #55]: #56
#60 := [monotonicity #57]: #59
#71 := [trans #60 #69]: #70
#32 := [asserted]: #15
[mp #32 #71]: false
unsat
d6985ded37fcab252cac3fbb09a30e977c68973d 18 0
#2 := false
#9 := 2345678901::int
#8 := 123456789::int
#10 := (< 123456789::int 2345678901::int)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
7eeb56537bd13a6f6bc35096a4ddfb33dceb295f 89 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#38 := (= f1 f4)
decl f3 :: S1
#8 := f3
#35 := (= f1 f3)
#47 := (not #35)
#48 := (or #47 #38)
#106 := (iff #48 false)
#101 := (or false false)
#104 := (iff #101 false)
#105 := [rewrite]: #104
#102 := (iff #48 #101)
#92 := (iff #38 false)
#41 := (not #38)
#53 := (not #48)
#75 := (or #47 #38 #53)
#78 := (not #75)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (implies #9 #11)
#14 := (not #13)
#12 := (not #11)
#15 := (implies #12 #14)
#16 := (implies #9 #15)
#17 := (not #16)
#81 := (iff #17 #78)
#59 := (or #38 #53)
#67 := (or #47 #59)
#72 := (not #67)
#79 := (iff #72 #78)
#76 := (iff #67 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#73 := (iff #17 #72)
#70 := (iff #16 #67)
#64 := (implies #35 #59)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #16 #64)
#62 := (iff #15 #59)
#56 := (implies #41 #53)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #15 #56)
#54 := (iff #14 #53)
#51 := (iff #13 #48)
#44 := (implies #35 #38)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #13 #44)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#46 := [monotonicity #37 #40]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#42 := (iff #12 #41)
#43 := [monotonicity #40]: #42
#58 := [monotonicity #43 #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #37 #63]: #65
#71 := [trans #66 #69]: #70
#74 := [monotonicity #71]: #73
#82 := [trans #74 #80]: #81
#34 := [asserted]: #17
#83 := [mp #34 #82]: #78
#85 := [not-or-elim #83]: #41
#93 := [iff-false #85]: #92
#99 := (iff #47 false)
#1 := true
#94 := (not true)
#97 := (iff #94 false)
#98 := [rewrite]: #97
#95 := (iff #47 #94)
#90 := (iff #35 true)
#84 := [not-or-elim #83]: #35
#91 := [iff-true #84]: #90
#96 := [monotonicity #91]: #95
#100 := [trans #96 #98]: #99
#103 := [monotonicity #100 #93]: #102
#107 := [trans #103 #105]: #106
#86 := [not-or-elim #83]: #48
[mp #86 #107]: false
unsat
38ce6b99e91d92d7feb75b7b5ff7006aee1a887f 57 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
decl f1 :: S1
#4 := f1
#33 := (= f1 #9)
#45 := (not #33)
decl f5 :: (-> S2 S1)
#11 := (f5 f4)
#36 := (= f1 #11)
#46 := (iff #36 #45)
#58 := (not #46)
#73 := (iff #58 false)
#1 := true
#68 := (not true)
#71 := (iff #68 false)
#72 := [rewrite]: #71
#69 := (iff #58 #68)
#66 := (iff #46 true)
#39 := (iff #33 #36)
#55 := (not #39)
#63 := (iff #55 #46)
#64 := [rewrite]: #63
#47 := (or #39 #46)
#52 := (not #47)
#12 := (= #11 f1)
#10 := (= #9 f1)
#13 := (iff #10 #12)
#14 := (implies #13 #13)
#15 := (not #14)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#42 := (implies #39 #39)
#48 := (iff #42 #47)
#49 := [rewrite]: #48
#43 := (iff #14 #42)
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#38 := [rewrite]: #37
#34 := (iff #10 #33)
#35 := [rewrite]: #34
#41 := [monotonicity #35 #38]: #40
#44 := [monotonicity #41 #41]: #43
#51 := [trans #44 #49]: #50
#54 := [monotonicity #51]: #53
#32 := [asserted]: #15
#57 := [mp #32 #54]: #52
#56 := [not-or-elim #57]: #55
#65 := [mp #56 #64]: #46
#67 := [iff-true #65]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#59 := [not-or-elim #57]: #58
[mp #59 #74]: false
unsat
12f34f8245ed278a095c475d68eb5a5711d23981 30 0
#2 := false
decl f3 :: (-> int S2)
#25 := 1::int
#28 := (f3 1::int)
#13 := 0::int
#26 := (+ 0::int 1::int)
#27 := (f3 #26)
#29 := (= #27 #28)
#30 := (not #29)
#148 := (iff #30 false)
#1 := true
#143 := (not true)
#146 := (iff #143 false)
#147 := [rewrite]: #146
#144 := (iff #30 #143)
#141 := (iff #29 true)
#136 := (= #28 #28)
#139 := (iff #136 true)
#140 := [rewrite]: #139
#137 := (iff #29 #136)
#133 := (= #26 1::int)
#134 := [rewrite]: #133
#135 := [monotonicity #134]: #29
#138 := [monotonicity #135]: #137
#142 := [trans #138 #140]: #141
#145 := [monotonicity #142]: #144
#149 := [trans #145 #147]: #148
#132 := [asserted]: #30
[mp #132 #149]: false
unsat
8e8baf35daf48781c204954ba8d7df5254aac6a8 50 0
#2 := false
decl f5 :: S2
#11 := f5
decl f3 :: S2
#8 := f3
#13 := (= f3 f5)
decl f4 :: S2
#9 := f4
#12 := (= f4 f5)
#74 := (iff #12 #13)
#72 := (iff #13 #12)
#10 := (= f3 f4)
#34 := (not #12)
#41 := (not #10)
#50 := (or #41 #34 #13)
#53 := (not #50)
#14 := (implies #12 #13)
#15 := (implies #10 #14)
#16 := (not #15)
#56 := (iff #16 #53)
#35 := (or #34 #13)
#42 := (or #41 #35)
#47 := (not #42)
#54 := (iff #47 #53)
#51 := (iff #42 #50)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#57 := [trans #49 #55]: #56
#33 := [asserted]: #16
#58 := [mp #33 #57]: #53
#59 := [not-or-elim #58]: #10
#73 := [monotonicity #59]: #72
#75 := [symm #73]: #74
#60 := [not-or-elim #58]: #12
#70 := [mp #60 #75]: #13
#61 := (not #13)
#62 := [not-or-elim #58]: #61
[unit-resolution #62 #70]: false
unsat
7bbe1bf9e8878e3709a71589e39f12e31278f1b7 27 0
#2 := false
decl f5 :: (-> S2 S3)
decl f4 :: S2
#9 := f4
#12 := (f5 f4)
decl f3 :: S2
#8 := f3
#11 := (f5 f3)
#13 := (= #11 #12)
#10 := (= f3 f4)
#33 := (not #10)
#34 := (or #33 #13)
#37 := (not #34)
#14 := (implies #10 #13)
#15 := (not #14)
#38 := (iff #15 #37)
#35 := (iff #14 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#32 := [asserted]: #15
#42 := [mp #32 #39]: #37
#40 := [not-or-elim #42]: #10
#51 := [monotonicity #40]: #13
#41 := (not #13)
#43 := [not-or-elim #42]: #41
[unit-resolution #43 #51]: false
unsat
fca9345b5fb82879eab30d8a35a71a4cfb012222 33 0
#2 := false
#27 := 1::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#28 := (+ #26 1::int)
#29 := (< #26 #28)
#30 := (not #29)
#151 := (iff #30 false)
#133 := (+ 1::int #26)
#136 := (< #26 #133)
#139 := (not #136)
#149 := (iff #139 false)
#1 := true
#144 := (not true)
#147 := (iff #144 false)
#148 := [rewrite]: #147
#145 := (iff #139 #144)
#142 := (iff #136 true)
#143 := [rewrite]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#140 := (iff #30 #139)
#137 := (iff #29 #136)
#134 := (= #28 #133)
#135 := [rewrite]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#152 := [trans #141 #150]: #151
#132 := [asserted]: #30
[mp #132 #152]: false
unsat
a8014c2ba4ebe428717a3516d1900ca3b7591555 73 0
#2 := false
decl f3 :: (-> S1 S1)
decl f4 :: S1
#12 := f4
#13 := (f3 f4)
decl f1 :: S1
#4 := f1
#42 := (= f1 #13)
#73 := (not #42)
#45 := (= f1 f4)
#8 := (:var 0 S1)
#9 := (f3 #8)
#36 := (= f1 #9)
#39 := (forall (vars (?v0 S1)) #36)
#54 := (not #39)
#63 := (or #54 #42 #45)
#66 := (not #63)
#15 := (= f4 f1)
#14 := (= #13 f1)
#16 := (or #14 #15)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S1)) #10)
#17 := (implies #11 #16)
#18 := (not #17)
#69 := (iff #18 #66)
#48 := (or #42 #45)
#55 := (or #54 #48)
#60 := (not #55)
#67 := (iff #60 #66)
#64 := (iff #55 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#61 := (iff #18 #60)
#58 := (iff #17 #55)
#51 := (implies #39 #48)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #17 #51)
#49 := (iff #16 #48)
#46 := (iff #15 #45)
#47 := [rewrite]: #46
#43 := (iff #14 #42)
#44 := [rewrite]: #43
#50 := [monotonicity #44 #47]: #49
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#41 := [quant-intro #38]: #40
#53 := [monotonicity #41 #50]: #52
#59 := [trans #53 #57]: #58
#62 := [monotonicity #59]: #61
#70 := [trans #62 #68]: #69
#35 := [asserted]: #18
#71 := [mp #35 #70]: #66
#74 := [not-or-elim #71]: #73
#560 := (pattern #9)
#561 := (forall (vars (?v0 S1)) (:pat #560) #36)
#564 := (iff #39 #561)
#562 := (iff #36 #36)
#563 := [refl]: #562
#565 := [quant-intro #563]: #564
#88 := (~ #39 #39)
#86 := (~ #36 #36)
#87 := [refl]: #86
#89 := [nnf-pos #87]: #88
#72 := [not-or-elim #71]: #39
#79 := [mp~ #72 #89]: #39
#566 := [mp #79 #565]: #561
#145 := (not #561)
#232 := (or #145 #42)
#146 := [quant-inst]: #232
[unit-resolution #146 #566 #74]: false
unsat
f572500dcd49c30edfbceabc272b009fb11814d2 428 0
#2 := false
decl f4 :: (-> S2 int)
decl f6 :: S2
#30 := f6
#31 := (f4 f6)
#27 := 1::int
#146 := (+ 1::int #31)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#140 := (+ 1::int #26)
#443 := (= #140 #146)
#422 := (not #443)
decl f3 :: (-> int S2)
#149 := (f3 #146)
#143 := (f3 #140)
#152 := (= #143 #149)
#419 := [hypothesis]: #443
#420 := [monotonicity #419]: #152
#237 := (not #152)
#35 := (= f5 f6)
#644 := (f3 #31)
#463 := (= #644 f6)
#646 := (= f6 #644)
#8 := (:var 0 S2)
#9 := (f4 #8)
#652 := (pattern #9)
#10 := (f3 #9)
#55 := (= #8 #10)
#653 := (forall (vars (?v0 S2)) (:pat #652) #55)
#58 := (forall (vars (?v0 S2)) #55)
#654 := (iff #58 #653)
#656 := (iff #653 #653)
#657 := [rewrite]: #656
#655 := [rewrite]: #654
#658 := [trans #655 #657]: #654
#177 := (~ #58 #58)
#175 := (~ #55 #55)
#176 := [refl]: #175
#178 := [nnf-pos #176]: #177
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#59 := (iff #12 #58)
#56 := (iff #11 #55)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#54 := [asserted]: #12
#63 := [mp #54 #60]: #58
#166 := [mp~ #63 #178]: #58
#659 := [mp #166 #658]: #653
#302 := (not #653)
#647 := (or #302 #646)
#648 := [quant-inst]: #647
#548 := [unit-resolution #648 #659]: #646
#464 := [symm #548]: #463
#465 := (= f5 #644)
#329 := (f3 #26)
#461 := (= #329 #644)
#458 := (= #26 #31)
#651 := -1::int
#649 := (f4 #143)
#641 := (* -1::int #649)
#300 := (+ #26 #641)
#639 := (<= #300 -1::int)
#305 := (= #300 -1::int)
#643 := (>= #26 -1::int)
#13 := 0::int
#626 := (= #649 0::int)
#516 := (not #626)
#330 := (f4 #149)
#593 := (= #330 0::int)
#505 := (not #593)
#496 := (iff #505 #516)
#515 := (iff #593 #626)
#513 := (iff #626 #593)
#509 := (= #649 #330)
#36 := (not #35)
#535 := [hypothesis]: #36
#328 := (or #35 #152)
#158 := (iff #36 #152)
#32 := (+ #31 1::int)
#33 := (f3 #32)
#28 := (+ #26 1::int)
#29 := (f3 #28)
#34 := (= #29 #33)
#37 := (iff #34 #36)
#161 := (iff #37 #158)
#155 := (iff #152 #36)
#159 := (iff #155 #158)
#160 := [rewrite]: #159
#156 := (iff #37 #155)
#153 := (iff #34 #152)
#150 := (= #33 #149)
#147 := (= #32 #146)
#148 := [rewrite]: #147
#151 := [monotonicity #148]: #150
#144 := (= #29 #143)
#141 := (= #28 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#154 := [monotonicity #145 #151]: #153
#157 := [monotonicity #154]: #156
#162 := [trans #157 #160]: #161
#139 := [asserted]: #37
#165 := [mp #139 #162]: #158
#322 := (not #158)
#326 := (or #35 #152 #322)
#327 := [def-axiom]: #326
#325 := [unit-resolution #327 #165]: #328
#508 := [unit-resolution #325 #535]: #152
#510 := [monotonicity #508]: #509
#514 := [monotonicity #510]: #513
#511 := [symm #514]: #515
#442 := [monotonicity #511]: #496
#490 := (<= #330 0::int)
#526 := (not #490)
#572 := (>= #31 0::int)
#542 := (= #31 0::int)
#566 := (f4 #644)
#573 := (= #566 0::int)
#544 := (not #572)
#545 := [hypothesis]: #544
#558 := (or #572 #573)
#14 := (:var 0 int)
#16 := (f3 #14)
#660 := (pattern #16)
#80 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#128 := (or #22 #80)
#667 := (forall (vars (?v0 int)) (:pat #660) #128)
#133 := (forall (vars (?v0 int)) #128)
#670 := (iff #133 #667)
#668 := (iff #128 #128)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#169 := (~ #133 #133)
#181 := (~ #128 #128)
#182 := [refl]: #181
#170 := [nnf-pos #182]: #169
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#136 := (iff #24 #133)
#99 := (= 0::int #17)
#105 := (not #21)
#106 := (or #105 #99)
#111 := (forall (vars (?v0 int)) #106)
#134 := (iff #111 #133)
#131 := (iff #106 #128)
#125 := (or #80 #22)
#129 := (iff #125 #128)
#130 := [rewrite]: #129
#126 := (iff #106 #125)
#123 := (iff #99 #22)
#124 := [rewrite]: #123
#121 := (iff #105 #80)
#81 := (not #80)
#116 := (not #81)
#119 := (iff #116 #80)
#120 := [rewrite]: #119
#117 := (iff #105 #116)
#114 := (iff #21 #81)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#122 := [trans #118 #120]: #121
#127 := [monotonicity #122 #124]: #126
#132 := [trans #127 #130]: #131
#135 := [quant-intro #132]: #134
#112 := (iff #24 #111)
#109 := (iff #23 #106)
#102 := (implies #21 #99)
#107 := (iff #102 #106)
#108 := [rewrite]: #107
#103 := (iff #23 #102)
#100 := (iff #22 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#110 := [trans #104 #108]: #109
#113 := [quant-intro #110]: #112
#137 := [trans #113 #135]: #136
#98 := [asserted]: #24
#138 := [mp #98 #137]: #133
#183 := [mp~ #138 #170]: #133
#672 := [mp #183 #671]: #667
#351 := (not #667)
#562 := (or #351 #572 #573)
#557 := (or #573 #572)
#563 := (or #351 #557)
#555 := (iff #563 #562)
#564 := (or #351 #558)
#553 := (iff #564 #562)
#554 := [rewrite]: #553
#550 := (iff #563 #564)
#560 := (iff #557 #558)
#561 := [rewrite]: #560
#551 := [monotonicity #561]: #550
#552 := [trans #551 #554]: #555
#559 := [quant-inst]: #563
#556 := [mp #559 #552]: #562
#546 := [unit-resolution #556 #672]: #558
#547 := [unit-resolution #546 #545]: #573
#538 := (= #31 #566)
#549 := [monotonicity #548]: #538
#527 := [trans #549 #547]: #542
#528 := (not #542)
#530 := (or #528 #572)
#531 := [th-lemma]: #530
#532 := [unit-resolution #531 #545 #527]: false
#533 := [lemma #532]: #572
#614 := (* -1::int #330)
#618 := (+ #31 #614)
#592 := (<= #618 -1::int)
#607 := (= #618 -1::int)
#604 := (>= #31 -1::int)
#521 := (or #544 #604)
#517 := [th-lemma]: #521
#518 := [unit-resolution #517 #533]: #604
#611 := (not #604)
#597 := (or #611 #607)
#62 := (= #14 #17)
#87 := (or #62 #81)
#661 := (forall (vars (?v0 int)) (:pat #660) #87)
#92 := (forall (vars (?v0 int)) #87)
#664 := (iff #92 #661)
#662 := (iff #87 #87)
#663 := [refl]: #662
#665 := [quant-intro #663]: #664
#167 := (~ #92 #92)
#163 := (~ #87 #87)
#179 := [refl]: #163
#168 := [nnf-pos #179]: #167
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#95 := (iff #20 #92)
#69 := (not #15)
#70 := (or #69 #62)
#75 := (forall (vars (?v0 int)) #70)
#93 := (iff #75 #92)
#90 := (iff #70 #87)
#84 := (or #81 #62)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #70 #84)
#82 := (iff #69 #81)
#78 := (iff #15 #80)
#79 := [rewrite]: #78
#83 := [monotonicity #79]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [quant-intro #91]: #93
#76 := (iff #20 #75)
#73 := (iff #19 #70)
#66 := (implies #15 #62)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #19 #66)
#64 := (iff #18 #62)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#74 := [trans #68 #72]: #73
#77 := [quant-intro #74]: #76
#96 := [trans #77 #94]: #95
#61 := [asserted]: #20
#97 := [mp #61 #96]: #92
#180 := [mp~ #97 #168]: #92
#666 := [mp #180 #665]: #661
#631 := (not #661)
#595 := (or #631 #611 #607)
#615 := (>= #146 0::int)
#616 := (not #615)
#613 := (= #146 #330)
#617 := (or #613 #616)
#601 := (or #631 #617)
#588 := (iff #601 #595)
#596 := (or #631 #597)
#434 := (iff #596 #595)
#435 := [rewrite]: #434
#603 := (iff #601 #596)
#600 := (iff #617 #597)
#453 := (or #607 #611)
#598 := (iff #453 #597)
#599 := [rewrite]: #598
#454 := (iff #617 #453)
#606 := (iff #616 #611)
#605 := (iff #615 #604)
#610 := [rewrite]: #605
#612 := [monotonicity #610]: #606
#608 := (iff #613 #607)
#609 := [rewrite]: #608
#455 := [monotonicity #609 #612]: #454
#594 := [trans #455 #599]: #600
#432 := [monotonicity #594]: #603
#589 := [trans #432 #435]: #588
#602 := [quant-inst]: #601
#591 := [mp #602 #589]: #595
#519 := [unit-resolution #591 #666]: #597
#522 := [unit-resolution #519 #518]: #607
#523 := (not #607)
#524 := (or #523 #592)
#525 := [th-lemma]: #524
#520 := [unit-resolution #525 #522]: #592
#499 := (not #592)
#500 := (or #526 #544 #499)
#501 := [th-lemma]: #500
#394 := [unit-resolution #501 #520 #533]: #526
#506 := (or #505 #490)
#507 := [th-lemma]: #506
#512 := [unit-resolution #507 #394]: #505
#497 := [mp #512 #442]: #516
#348 := (or #626 #643)
#244 := (or #351 #626 #643)
#313 := (>= #140 0::int)
#333 := (or #626 #313)
#621 := (or #351 #333)
#624 := (iff #621 #244)
#344 := (or #351 #348)
#623 := (iff #344 #244)
#620 := [rewrite]: #623
#345 := (iff #621 #344)
#349 := (iff #333 #348)
#285 := (iff #313 #643)
#627 := [rewrite]: #285
#350 := [monotonicity #627]: #349
#619 := [monotonicity #350]: #345
#334 := [trans #619 #620]: #624
#622 := [quant-inst]: #621
#335 := [mp #622 #334]: #244
#478 := [unit-resolution #335 #672]: #348
#502 := [unit-resolution #478 #497]: #643
#289 := (not #643)
#292 := (or #305 #289)
#632 := (or #631 #305 #289)
#314 := (not #313)
#650 := (= #140 #649)
#645 := (or #650 #314)
#633 := (or #631 #645)
#277 := (iff #633 #632)
#634 := (or #631 #292)
#637 := (iff #634 #632)
#276 := [rewrite]: #637
#271 := (iff #633 #634)
#629 := (iff #645 #292)
#290 := (iff #314 #289)
#291 := [monotonicity #627]: #290
#642 := (iff #650 #305)
#301 := [rewrite]: #642
#630 := [monotonicity #301 #291]: #629
#635 := [monotonicity #630]: #271
#638 := [trans #635 #276]: #277
#628 := [quant-inst]: #633
#636 := [mp #628 #638]: #632
#503 := [unit-resolution #636 #666]: #292
#498 := [unit-resolution #503 #502]: #305
#504 := (not #305)
#472 := (or #504 #639)
#479 := [th-lemma]: #472
#438 := [unit-resolution #479 #498]: #639
#625 := (>= #300 -1::int)
#469 := (or #504 #625)
#471 := [th-lemma]: #469
#473 := [unit-resolution #471 #498]: #625
#590 := (>= #618 -1::int)
#480 := (or #523 #590)
#482 := [th-lemma]: #480
#483 := [unit-resolution #482 #522]: #590
#540 := (+ #330 #641)
#534 := (<= #540 0::int)
#539 := (= #330 #649)
#484 := [symm #510]: #539
#494 := (not #539)
#474 := (or #494 #534)
#495 := [th-lemma]: #474
#450 := [unit-resolution #495 #484]: #534
#529 := (>= #540 0::int)
#451 := (or #494 #529)
#456 := [th-lemma]: #451
#457 := [unit-resolution #456 #484]: #529
#459 := [th-lemma #457 #450 #483 #520 #473 #438]: #458
#462 := [monotonicity #459]: #461
#308 := (= f5 #329)
#433 := (or #302 #308)
#640 := [quant-inst]: #433
#460 := [unit-resolution #640 #659]: #308
#466 := [trans #460 #462]: #465
#467 := [trans #466 #464]: #35
#452 := [unit-resolution #535 #467]: false
#468 := [lemma #452]: #35
#324 := (or #36 #237)
#238 := (or #36 #237 #322)
#323 := [def-axiom]: #238
#315 := [unit-resolution #323 #165]: #324
#449 := [unit-resolution #315 #468]: #237
#421 := [unit-resolution #449 #420]: false
#424 := [lemma #421]: #422
#444 := (* -1::int #146)
#447 := (+ #140 #444)
#448 := (<= #447 0::int)
#429 := (* -1::int #31)
#430 := (+ #26 #429)
#437 := (<= #430 0::int)
#425 := [monotonicity #468]: #458
#426 := (not #458)
#268 := (or #426 #437)
#427 := [th-lemma]: #268
#423 := [unit-resolution #427 #425]: #437
#428 := (not #437)
#407 := (or #448 #428)
#410 := [th-lemma]: #407
#414 := [unit-resolution #410 #423]: #448
#431 := (>= #447 0::int)
#439 := (>= #430 0::int)
#416 := (or #426 #439)
#417 := [th-lemma]: #416
#415 := [unit-resolution #417 #425]: #439
#418 := (not #439)
#406 := (or #431 #418)
#409 := [th-lemma]: #406
#411 := [unit-resolution #409 #415]: #431
#408 := (not #431)
#412 := (not #448)
#413 := (or #443 #412 #408)
#403 := [th-lemma]: #413
#393 := [unit-resolution #403 #411 #414]: #443
[unit-resolution #393 #424]: false
unsat
c0906c23e4b0650863a2ef0d68bafa4e06a9dd19 106 0
#2 := false
decl f3 :: (-> S2 S2 S1)
decl ?v0!0 :: S2
#72 := ?v0!0
#83 := (f3 ?v0!0 ?v0!0)
decl f1 :: S1
#4 := f1
#75 := (= f1 #83)
#76 := (not #75)
#9 := (:var 0 S2)
#16 := (f3 #9 #9)
#50 := (= f1 #16)
#53 := (forall (vars (?v0 S2)) #50)
#69 := (not #53)
#84 := (~ #69 #76)
#85 := [sk]: #84
#8 := (:var 1 S2)
#12 := (f3 #9 #8)
#41 := (= f1 #12)
#10 := (f3 #8 #9)
#38 := (= f1 #10)
#44 := (and #38 #41)
#47 := (forall (vars (?v0 S2) (?v1 S2)) #44)
#59 := (not #47)
#60 := (or #59 #53)
#65 := (not #60)
#17 := (= #16 f1)
#18 := (forall (vars (?v0 S2)) #17)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (and #11 #13)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#19 := (implies #15 #18)
#20 := (not #19)
#66 := (iff #20 #65)
#63 := (iff #19 #60)
#56 := (implies #47 #53)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #19 #56)
#54 := (iff #18 #53)
#51 := (iff #17 #50)
#52 := [rewrite]: #51
#55 := [quant-intro #52]: #54
#48 := (iff #15 #47)
#45 := (iff #14 #44)
#42 := (iff #13 #41)
#43 := [rewrite]: #42
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#46 := [monotonicity #40 #43]: #45
#49 := [quant-intro #46]: #48
#58 := [monotonicity #49 #55]: #57
#64 := [trans #58 #62]: #63
#67 := [monotonicity #64]: #66
#37 := [asserted]: #20
#70 := [mp #37 #67]: #65
#71 := [not-or-elim #70]: #69
#88 := [mp~ #71 #85]: #76
#577 := (pattern #12)
#576 := (pattern #10)
#87 := (not #41)
#86 := (not #38)
#89 := (or #86 #87)
#90 := (not #89)
#578 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #576 #577) #90)
#93 := (forall (vars (?v0 S2) (?v1 S2)) #90)
#581 := (iff #93 #578)
#579 := (iff #90 #90)
#580 := [refl]: #579
#582 := [quant-intro #580]: #581
#94 := (iff #47 #93)
#91 := (iff #44 #90)
#92 := [rewrite]: #91
#95 := [quant-intro #92]: #94
#81 := (~ #47 #47)
#79 := (~ #44 #44)
#80 := [refl]: #79
#82 := [nnf-pos #80]: #81
#68 := [not-or-elim #70]: #47
#74 := [mp~ #68 #82]: #47
#96 := [mp #74 #95]: #93
#583 := [mp #96 #582]: #578
#250 := (not #578)
#254 := (or #250 #75)
#160 := (or #76 #76)
#247 := (not #160)
#233 := (or #250 #247)
#570 := (iff #233 #254)
#357 := (iff #254 #254)
#564 := [rewrite]: #357
#180 := (iff #247 #75)
#162 := (not #76)
#251 := (iff #162 #75)
#252 := [rewrite]: #251
#249 := (iff #247 #162)
#161 := (iff #160 #76)
#248 := [rewrite]: #161
#240 := [monotonicity #248]: #249
#253 := [trans #240 #252]: #180
#227 := [monotonicity #253]: #570
#238 := [trans #227 #564]: #570
#568 := [quant-inst]: #233
#239 := [mp #568 #238]: #254
[unit-resolution #239 #583 #88]: false
unsat
58aaefc3b25d8181c01a2139430686aeca861bf3 66 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#37 := (= f1 f4)
decl f3 :: S1
#8 := f3
#34 := (= f1 f3)
#40 := (or #34 #37)
#84 := (iff #40 false)
#79 := (or false false)
#82 := (iff #79 false)
#83 := [rewrite]: #82
#80 := (iff #40 #79)
#75 := (iff #37 false)
#66 := (not #37)
#43 := (not #34)
#49 := (and #43 #40)
#57 := (not #49)
#58 := (or #37 #57)
#63 := (not #58)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (not #9)
#12 := (or #9 #11)
#14 := (and #12 #13)
#15 := (implies #14 #11)
#16 := (not #15)
#64 := (iff #16 #63)
#61 := (iff #15 #58)
#54 := (implies #49 #37)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #15 #54)
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#52 := (iff #14 #49)
#46 := (and #40 #43)
#50 := (iff #46 #49)
#51 := [rewrite]: #50
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#45 := [monotonicity #36]: #44
#41 := (iff #12 #40)
#42 := [monotonicity #36 #39]: #41
#48 := [monotonicity #42 #45]: #47
#53 := [trans #48 #51]: #52
#56 := [monotonicity #53 #39]: #55
#62 := [trans #56 #60]: #61
#65 := [monotonicity #62]: #64
#33 := [asserted]: #16
#68 := [mp #33 #65]: #63
#67 := [not-or-elim #68]: #66
#76 := [iff-false #67]: #75
#77 := (iff #34 false)
#69 := [not-or-elim #68]: #49
#70 := [and-elim #69]: #43
#78 := [iff-false #70]: #77
#81 := [monotonicity #78 #76]: #80
#85 := [trans #81 #83]: #84
#71 := [and-elim #69]: #40
[mp #71 #85]: false
unsat
d80d7bb97197c962c0b81d44c7a8cfd617b6ca33 59 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
#17 := (and #14 #16)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and #9 #11)
#18 := (or #12 #17)
#19 := (implies #18 #18)
#20 := (not #19)
#71 := (iff #20 false)
#1 := true
#66 := (not true)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #20 #66)
#64 := (iff #19 true)
#50 := (= f1 f6)
#47 := (= f1 f5)
#53 := (and #47 #50)
#41 := (= f1 f4)
#38 := (= f1 f3)
#44 := (and #38 #41)
#56 := (or #44 #53)
#59 := (implies #56 #56)
#62 := (iff #59 true)
#63 := [rewrite]: #62
#60 := (iff #19 #59)
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#51 := (iff #16 #50)
#52 := [rewrite]: #51
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#55 := [monotonicity #49 #52]: #54
#45 := (iff #12 #44)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#46 := [monotonicity #40 #43]: #45
#58 := [monotonicity #46 #55]: #57
#61 := [monotonicity #58 #58]: #60
#65 := [trans #61 #63]: #64
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#37 := [asserted]: #20
[mp #37 #72]: false
unsat
5682ca831360f99dba925cc3023ce41a2bdd0f63 364 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#29 := (+ #26 #28)
#161 := 2::int
#162 := (+ 2::int #29)
#167 := (f3 #162)
#170 := (f4 #167)
#179 := -1::int
#182 := (* -1::int #170)
#30 := 1::int
#143 := (+ 1::int #29)
#146 := (f3 #143)
#149 := (f4 #146)
#183 := (+ #149 #182)
#181 := (>= #183 0::int)
#35 := (+ #28 1::int)
#34 := (+ #26 1::int)
#36 := (+ #34 #35)
#37 := (f3 #36)
#38 := (f4 #37)
#31 := (+ #29 1::int)
#32 := (f3 #31)
#33 := (f4 #32)
#39 := (< #33 #38)
#40 := (not #39)
#193 := (iff #40 #181)
#173 := (< #149 #170)
#176 := (not #173)
#191 := (iff #176 #181)
#180 := (not #181)
#186 := (not #180)
#189 := (iff #186 #181)
#190 := [rewrite]: #189
#187 := (iff #176 #186)
#184 := (iff #173 #180)
#185 := [rewrite]: #184
#188 := [monotonicity #185]: #187
#192 := [trans #188 #190]: #191
#177 := (iff #40 #176)
#174 := (iff #39 #173)
#171 := (= #38 #170)
#168 := (= #37 #167)
#165 := (= #36 #162)
#155 := (+ 1::int #28)
#152 := (+ 1::int #26)
#158 := (+ #152 #155)
#163 := (= #158 #162)
#164 := [rewrite]: #163
#159 := (= #36 #158)
#156 := (= #35 #155)
#157 := [rewrite]: #156
#153 := (= #34 #152)
#154 := [rewrite]: #153
#160 := [monotonicity #154 #157]: #159
#166 := [trans #160 #164]: #165
#169 := [monotonicity #166]: #168
#172 := [monotonicity #169]: #171
#150 := (= #33 #149)
#147 := (= #32 #146)
#144 := (= #31 #143)
#145 := [rewrite]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#175 := [monotonicity #151 #172]: #174
#178 := [monotonicity #175]: #177
#194 := [trans #178 #192]: #193
#142 := [asserted]: #40
#195 := [mp #142 #194]: #181
#637 := -2::int
#641 := (+ #28 #182)
#642 := (+ #26 #641)
#517 := (<= #642 -2::int)
#643 := (= #642 -2::int)
#486 := (>= #29 -2::int)
#337 := (>= #29 -1::int)
#606 := (>= #26 0::int)
#577 := (= #26 0::int)
#269 := (f3 #26)
#611 := (f4 #269)
#600 := (= #611 0::int)
#562 := (not #606)
#563 := [hypothesis]: #562
#601 := (or #600 #606)
#14 := (:var 0 int)
#16 := (f3 #14)
#691 := (pattern #16)
#83 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#131 := (or #22 #83)
#698 := (forall (vars (?v0 int)) (:pat #691) #131)
#136 := (forall (vars (?v0 int)) #131)
#701 := (iff #136 #698)
#699 := (iff #131 #131)
#700 := [refl]: #699
#702 := [quant-intro #700]: #701
#201 := (~ #136 #136)
#213 := (~ #131 #131)
#214 := [refl]: #213
#202 := [nnf-pos #214]: #201
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#139 := (iff #24 #136)
#102 := (= 0::int #17)
#108 := (not #21)
#109 := (or #108 #102)
#114 := (forall (vars (?v0 int)) #109)
#137 := (iff #114 #136)
#134 := (iff #109 #131)
#128 := (or #83 #22)
#132 := (iff #128 #131)
#133 := [rewrite]: #132
#129 := (iff #109 #128)
#126 := (iff #102 #22)
#127 := [rewrite]: #126
#124 := (iff #108 #83)
#84 := (not #83)
#119 := (not #84)
#122 := (iff #119 #83)
#123 := [rewrite]: #122
#120 := (iff #108 #119)
#117 := (iff #21 #84)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#125 := [trans #121 #123]: #124
#130 := [monotonicity #125 #127]: #129
#135 := [trans #130 #133]: #134
#138 := [quant-intro #135]: #137
#115 := (iff #24 #114)
#112 := (iff #23 #109)
#105 := (implies #21 #102)
#110 := (iff #105 #109)
#111 := [rewrite]: #110
#106 := (iff #23 #105)
#103 := (iff #22 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#113 := [trans #107 #111]: #112
#116 := [quant-intro #113]: #115
#140 := [trans #116 #138]: #139
#101 := [asserted]: #24
#141 := [mp #101 #140]: #136
#215 := [mp~ #141 #202]: #136
#703 := [mp #215 #702]: #698
#651 := (not #698)
#597 := (or #651 #600 #606)
#604 := (or #651 #601)
#589 := (iff #604 #597)
#591 := [rewrite]: #589
#588 := [quant-inst]: #604
#592 := [mp #588 #591]: #597
#564 := [unit-resolution #592 #703]: #601
#565 := [unit-resolution #564 #563]: #600
#566 := (= #26 #611)
#354 := (= f5 #269)
#8 := (:var 0 S2)
#9 := (f4 #8)
#683 := (pattern #9)
#10 := (f3 #9)
#58 := (= #8 #10)
#684 := (forall (vars (?v0 S2)) (:pat #683) #58)
#61 := (forall (vars (?v0 S2)) #58)
#685 := (iff #61 #684)
#687 := (iff #684 #684)
#688 := [rewrite]: #687
#686 := [rewrite]: #685
#689 := [trans #686 #688]: #685
#209 := (~ #61 #61)
#207 := (~ #58 #58)
#208 := [refl]: #207
#210 := [nnf-pos #208]: #209
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#62 := (iff #12 #61)
#59 := (iff #11 #58)
#60 := [rewrite]: #59
#63 := [quant-intro #60]: #62
#57 := [asserted]: #12
#66 := [mp #57 #63]: #61
#198 := [mp~ #66 #210]: #61
#690 := [mp #198 #689]: #684
#356 := (not #684)
#347 := (or #356 #354)
#358 := [quant-inst]: #347
#560 := [unit-resolution #358 #690]: #354
#552 := [monotonicity #560]: #566
#548 := [trans #552 #565]: #577
#549 := (not #577)
#550 := (or #549 #606)
#553 := [th-lemma]: #550
#554 := [unit-resolution #553 #563 #548]: false
#555 := [lemma #554]: #606
#602 := (>= #28 0::int)
#578 := (= #28 0::int)
#270 := (f3 #28)
#603 := (f4 #270)
#593 := (= #603 0::int)
#551 := (not #602)
#557 := [hypothesis]: #551
#594 := (or #593 #602)
#581 := (or #651 #593 #602)
#582 := (or #651 #594)
#585 := (iff #582 #581)
#586 := [rewrite]: #585
#584 := [quant-inst]: #582
#583 := [mp #584 #586]: #581
#530 := [unit-resolution #583 #703]: #594
#531 := [unit-resolution #530 #557]: #593
#425 := (= #28 #603)
#355 := (= f6 #270)
#357 := (or #356 #355)
#361 := [quant-inst]: #357
#532 := [unit-resolution #361 #690]: #355
#536 := [monotonicity #532]: #425
#537 := [trans #536 #531]: #578
#538 := (not #578)
#543 := (or #538 #602)
#539 := [th-lemma]: #543
#540 := [unit-resolution #539 #557 #537]: false
#541 := [lemma #540]: #602
#556 := (or #551 #562 #337)
#544 := [th-lemma]: #556
#545 := [unit-resolution #544 #541 #555]: #337
#674 := (not #337)
#546 := (or #674 #486)
#542 := [th-lemma]: #546
#547 := [unit-resolution #542 #545]: #486
#630 := (not #486)
#627 := (or #630 #643)
#65 := (= #14 #17)
#90 := (or #65 #84)
#692 := (forall (vars (?v0 int)) (:pat #691) #90)
#95 := (forall (vars (?v0 int)) #90)
#695 := (iff #95 #692)
#693 := (iff #90 #90)
#694 := [refl]: #693
#696 := [quant-intro #694]: #695
#199 := (~ #95 #95)
#196 := (~ #90 #90)
#211 := [refl]: #196
#200 := [nnf-pos #211]: #199
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#98 := (iff #20 #95)
#72 := (not #15)
#73 := (or #72 #65)
#78 := (forall (vars (?v0 int)) #73)
#96 := (iff #78 #95)
#93 := (iff #73 #90)
#87 := (or #84 #65)
#91 := (iff #87 #90)
#92 := [rewrite]: #91
#88 := (iff #73 #87)
#85 := (iff #72 #84)
#81 := (iff #15 #83)
#82 := [rewrite]: #81
#86 := [monotonicity #82]: #85
#89 := [monotonicity #86]: #88
#94 := [trans #89 #92]: #93
#97 := [quant-intro #94]: #96
#79 := (iff #20 #78)
#76 := (iff #19 #73)
#69 := (implies #15 #65)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #19 #69)
#67 := (iff #18 #65)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [trans #71 #75]: #76
#80 := [quant-intro #77]: #79
#99 := [trans #80 #97]: #98
#64 := [asserted]: #20
#100 := [mp #64 #99]: #95
#212 := [mp~ #100 #200]: #95
#697 := [mp #212 #696]: #692
#664 := (not #692)
#619 := (or #664 #630 #643)
#639 := (>= #162 0::int)
#640 := (not #639)
#635 := (= #162 #170)
#636 := (or #635 #640)
#620 := (or #664 #636)
#508 := (iff #620 #619)
#623 := (or #664 #627)
#506 := (iff #623 #619)
#507 := [rewrite]: #506
#621 := (iff #620 #623)
#465 := (iff #636 #627)
#626 := (or #643 #630)
#634 := (iff #626 #627)
#463 := [rewrite]: #634
#632 := (iff #636 #626)
#631 := (iff #640 #630)
#628 := (iff #639 #486)
#629 := [rewrite]: #628
#625 := [monotonicity #629]: #631
#484 := (iff #635 #643)
#485 := [rewrite]: #484
#633 := [monotonicity #485 #625]: #632
#466 := [trans #633 #463]: #465
#624 := [monotonicity #466]: #621
#467 := [trans #624 #507]: #508
#622 := [quant-inst]: #620
#615 := [mp #622 #467]: #619
#527 := [unit-resolution #615 #697]: #627
#473 := [unit-resolution #527 #547]: #643
#528 := (not #643)
#509 := (or #528 #517)
#533 := [th-lemma]: #509
#534 := [unit-resolution #533 #473]: #517
#680 := (* -1::int #149)
#681 := (+ #28 #680)
#676 := (+ #26 #681)
#379 := (>= #676 -1::int)
#682 := (= #676 -1::int)
#324 := (or #674 #682)
#659 := (or #664 #674 #682)
#464 := (>= #143 0::int)
#671 := (not #464)
#678 := (= #143 #149)
#679 := (or #678 #671)
#665 := (or #664 #679)
#667 := (iff #665 #659)
#666 := (or #664 #324)
#309 := (iff #666 #659)
#669 := [rewrite]: #309
#668 := (iff #665 #666)
#662 := (iff #679 #324)
#321 := (or #682 #674)
#660 := (iff #321 #324)
#661 := [rewrite]: #660
#322 := (iff #679 #321)
#317 := (iff #671 #674)
#673 := (iff #464 #337)
#333 := [rewrite]: #673
#658 := [monotonicity #333]: #317
#672 := (iff #678 #682)
#332 := [rewrite]: #672
#323 := [monotonicity #332 #658]: #322
#663 := [trans #323 #661]: #662
#308 := [monotonicity #663]: #668
#670 := [trans #308 #669]: #667
#303 := [quant-inst]: #665
#656 := [mp #303 #670]: #659
#529 := [unit-resolution #656 #697]: #324
#535 := [unit-resolution #529 #545]: #682
#503 := (not #682)
#510 := (or #503 #379)
#469 := [th-lemma]: #510
#500 := [unit-resolution #469 #535]: #379
[th-lemma #500 #534 #195]: false
unsat
b265c055659e0ea1b48e0304606789db36e05540 60 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#135 := (f3 #26)
#141 := (= f5 #135)
#146 := (not #141)
#13 := 0::int
#27 := (+ #26 0::int)
#28 := (f3 #27)
#29 := (= #28 f5)
#30 := (not #29)
#147 := (iff #30 #146)
#144 := (iff #29 #141)
#138 := (= #135 f5)
#142 := (iff #138 #141)
#143 := [rewrite]: #142
#139 := (iff #29 #138)
#136 := (= #28 #135)
#133 := (= #27 #26)
#134 := [rewrite]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#145 := [trans #140 #143]: #144
#148 := [monotonicity #145]: #147
#132 := [asserted]: #30
#151 := [mp #132 #148]: #146
#8 := (:var 0 S2)
#9 := (f4 #8)
#639 := (pattern #9)
#10 := (f3 #9)
#48 := (= #8 #10)
#640 := (forall (vars (?v0 S2)) (:pat #639) #48)
#51 := (forall (vars (?v0 S2)) #48)
#641 := (iff #51 #640)
#643 := (iff #640 #640)
#644 := [rewrite]: #643
#642 := [rewrite]: #641
#645 := [trans #642 #644]: #641
#163 := (~ #51 #51)
#161 := (~ #48 #48)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#52 := (iff #12 #51)
#49 := (iff #11 #48)
#50 := [rewrite]: #49
#53 := [quant-intro #50]: #52
#47 := [asserted]: #12
#56 := [mp #47 #53]: #51
#152 := [mp~ #56 #164]: #51
#646 := [mp #152 #645]: #640
#224 := (not #640)
#310 := (or #224 #141)
#311 := [quant-inst]: #310
[unit-resolution #311 #646 #151]: false
unsat
75c3bae150e305a0fc97df1a1e35cb97fdd88bd7 60 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#135 := (f3 #26)
#141 := (= f5 #135)
#146 := (not #141)
#13 := 0::int
#27 := (+ 0::int #26)
#28 := (f3 #27)
#29 := (= #28 f5)
#30 := (not #29)
#147 := (iff #30 #146)
#144 := (iff #29 #141)
#138 := (= #135 f5)
#142 := (iff #138 #141)
#143 := [rewrite]: #142
#139 := (iff #29 #138)
#136 := (= #28 #135)
#133 := (= #27 #26)
#134 := [rewrite]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#145 := [trans #140 #143]: #144
#148 := [monotonicity #145]: #147
#132 := [asserted]: #30
#151 := [mp #132 #148]: #146
#8 := (:var 0 S2)
#9 := (f4 #8)
#639 := (pattern #9)
#10 := (f3 #9)
#48 := (= #8 #10)
#640 := (forall (vars (?v0 S2)) (:pat #639) #48)
#51 := (forall (vars (?v0 S2)) #48)
#641 := (iff #51 #640)
#643 := (iff #640 #640)
#644 := [rewrite]: #643
#642 := [rewrite]: #641
#645 := [trans #642 #644]: #641
#163 := (~ #51 #51)
#161 := (~ #48 #48)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#52 := (iff #12 #51)
#49 := (iff #11 #48)
#50 := [rewrite]: #49
#53 := [quant-intro #50]: #52
#47 := [asserted]: #12
#56 := [mp #47 #53]: #51
#152 := [mp~ #56 #164]: #51
#646 := [mp #152 #645]: #640
#224 := (not #640)
#310 := (or #224 #141)
#311 := [quant-inst]: #310
[unit-resolution #311 #646 #151]: false
unsat
c52f3166d15e1102a7ca505cd72ba484966ee318 37 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#31 := (+ #28 #26)
#32 := (f3 #31)
#29 := (+ #26 #28)
#30 := (f3 #29)
#33 := (= #30 #32)
#34 := (not #33)
#153 := (iff #34 false)
#1 := true
#148 := (not true)
#151 := (iff #148 false)
#152 := [rewrite]: #151
#149 := (iff #34 #148)
#146 := (iff #33 true)
#141 := (= #30 #30)
#144 := (iff #141 true)
#145 := [rewrite]: #144
#142 := (iff #33 #141)
#139 := (= #32 #30)
#137 := (= #31 #29)
#138 := [rewrite]: #137
#140 := [monotonicity #138]: #139
#143 := [monotonicity #140]: #142
#147 := [trans #143 #145]: #146
#150 := [monotonicity #147]: #149
#154 := [trans #150 #152]: #153
#136 := [asserted]: #34
[mp #136 #154]: false
unsat
b04995911f57617d06c9591edf349edadf325b74 60 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#135 := (f3 #26)
#141 := (= f5 #135)
#146 := (not #141)
#13 := 0::int
#27 := (- #26 0::int)
#28 := (f3 #27)
#29 := (= #28 f5)
#30 := (not #29)
#147 := (iff #30 #146)
#144 := (iff #29 #141)
#138 := (= #135 f5)
#142 := (iff #138 #141)
#143 := [rewrite]: #142
#139 := (iff #29 #138)
#136 := (= #28 #135)
#133 := (= #27 #26)
#134 := [rewrite]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#145 := [trans #140 #143]: #144
#148 := [monotonicity #145]: #147
#132 := [asserted]: #30
#151 := [mp #132 #148]: #146
#8 := (:var 0 S2)
#9 := (f4 #8)
#639 := (pattern #9)
#10 := (f3 #9)
#48 := (= #8 #10)
#640 := (forall (vars (?v0 S2)) (:pat #639) #48)
#51 := (forall (vars (?v0 S2)) #48)
#641 := (iff #51 #640)
#643 := (iff #640 #640)
#644 := [rewrite]: #643
#642 := [rewrite]: #641
#645 := [trans #642 #644]: #641
#163 := (~ #51 #51)
#161 := (~ #48 #48)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#52 := (iff #12 #51)
#49 := (iff #11 #48)
#50 := [rewrite]: #49
#53 := [quant-intro #50]: #52
#47 := [asserted]: #12
#56 := [mp #47 #53]: #51
#152 := [mp~ #56 #164]: #51
#646 := [mp #152 #645]: #640
#224 := (not #640)
#310 := (or #224 #141)
#311 := [quant-inst]: #310
[unit-resolution #311 #646 #151]: false
unsat
b5b340366dfb8289e173cd594b95953e97e705ac 42 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f7 :: S2
#29 := f7
#30 := (f4 f7)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#34 := (+ #26 #28)
#35 := (+ #34 #30)
#36 := (f3 #35)
#31 := (+ #28 #30)
#32 := (+ #26 #31)
#33 := (f3 #32)
#37 := (= #33 #36)
#38 := (not #37)
#157 := (iff #38 false)
#1 := true
#152 := (not true)
#155 := (iff #152 false)
#156 := [rewrite]: #155
#153 := (iff #38 #152)
#150 := (iff #37 true)
#145 := (= #33 #33)
#148 := (iff #145 true)
#149 := [rewrite]: #148
#146 := (iff #37 #145)
#143 := (= #36 #33)
#141 := (= #35 #32)
#142 := [rewrite]: #141
#144 := [monotonicity #142]: #143
#147 := [monotonicity #144]: #146
#151 := [trans #147 #149]: #150
#154 := [monotonicity #151]: #153
#158 := [trans #154 #156]: #157
#140 := [asserted]: #38
[mp #140 #158]: false
unsat
2a686ca258d75e408aba2310eab7bfde718856c5 179 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#138 := -1::int
#139 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#140 := (+ #26 #139)
#143 := (f3 #140)
#13 := 0::int
#32 := (f3 0::int)
#149 := (= #32 #143)
#649 := (f4 #143)
#597 := (f3 #649)
#596 := (= #597 #143)
#499 := (= #143 #597)
#8 := (:var 0 S2)
#9 := (f4 #8)
#665 := (pattern #9)
#10 := (f3 #9)
#53 := (= #8 #10)
#666 := (forall (vars (?v0 S2)) (:pat #665) #53)
#56 := (forall (vars (?v0 S2)) #53)
#667 := (iff #56 #666)
#669 := (iff #666 #666)
#670 := [rewrite]: #669
#668 := [rewrite]: #667
#671 := [trans #668 #670]: #667
#192 := (~ #56 #56)
#190 := (~ #53 #53)
#191 := [refl]: #190
#193 := [nnf-pos #191]: #192
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#57 := (iff #12 #56)
#54 := (iff #11 #53)
#55 := [rewrite]: #54
#58 := [quant-intro #55]: #57
#52 := [asserted]: #12
#61 := [mp #52 #58]: #56
#179 := [mp~ #61 #193]: #56
#672 := [mp #179 #671]: #666
#338 := (not #666)
#502 := (or #338 #499)
#503 := [quant-inst]: #502
#501 := [unit-resolution #503 #672]: #499
#600 := [symm #501]: #596
#506 := (= #32 #597)
#504 := (= 0::int #649)
#622 := (= #649 0::int)
#161 := (>= #140 0::int)
#160 := (not #161)
#154 := (not #149)
#167 := (and #154 #160)
#30 := (- #26 #28)
#31 := (f3 #30)
#33 := (= #31 #32)
#34 := (not #33)
#29 := (< #26 #28)
#35 := (and #29 #34)
#172 := (iff #35 #167)
#157 := (and #29 #154)
#170 := (iff #157 #167)
#164 := (and #160 #154)
#168 := (iff #164 #167)
#169 := [rewrite]: #168
#165 := (iff #157 #164)
#162 := (iff #29 #160)
#163 := [rewrite]: #162
#166 := [monotonicity #163]: #165
#171 := [trans #166 #169]: #170
#158 := (iff #35 #157)
#155 := (iff #34 #154)
#152 := (iff #33 #149)
#146 := (= #143 #32)
#150 := (iff #146 #149)
#151 := [rewrite]: #150
#147 := (iff #33 #146)
#144 := (= #31 #143)
#141 := (= #30 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#153 := [trans #148 #151]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#173 := [trans #159 #171]: #172
#137 := [asserted]: #35
#174 := [mp #137 #173]: #167
#176 := [and-elim #174]: #160
#14 := (:var 0 int)
#16 := (f3 #14)
#673 := (pattern #16)
#78 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#126 := (or #22 #78)
#680 := (forall (vars (?v0 int)) (:pat #673) #126)
#131 := (forall (vars (?v0 int)) #126)
#683 := (iff #131 #680)
#681 := (iff #126 #126)
#682 := [refl]: #681
#684 := [quant-intro #682]: #683
#182 := (~ #131 #131)
#196 := (~ #126 #126)
#197 := [refl]: #196
#183 := [nnf-pos #197]: #182
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#134 := (iff #24 #131)
#97 := (= 0::int #17)
#103 := (not #21)
#104 := (or #103 #97)
#109 := (forall (vars (?v0 int)) #104)
#132 := (iff #109 #131)
#129 := (iff #104 #126)
#123 := (or #78 #22)
#127 := (iff #123 #126)
#128 := [rewrite]: #127
#124 := (iff #104 #123)
#121 := (iff #97 #22)
#122 := [rewrite]: #121
#119 := (iff #103 #78)
#79 := (not #78)
#114 := (not #79)
#117 := (iff #114 #78)
#118 := [rewrite]: #117
#115 := (iff #103 #114)
#112 := (iff #21 #79)
#113 := [rewrite]: #112
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#125 := [monotonicity #120 #122]: #124
#130 := [trans #125 #128]: #129
#133 := [quant-intro #130]: #132
#110 := (iff #24 #109)
#107 := (iff #23 #104)
#100 := (implies #21 #97)
#105 := (iff #100 #104)
#106 := [rewrite]: #105
#101 := (iff #23 #100)
#98 := (iff #22 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#108 := [trans #102 #106]: #107
#111 := [quant-intro #108]: #110
#135 := [trans #111 #133]: #134
#96 := [asserted]: #24
#136 := [mp #96 #135]: #131
#198 := [mp~ #136 #183]: #131
#685 := [mp #198 #684]: #680
#619 := (not #680)
#625 := (or #619 #161 #622)
#617 := (or #622 #161)
#466 := (or #619 #617)
#607 := (iff #466 #625)
#618 := (or #161 #622)
#468 := (or #619 #618)
#612 := (iff #468 #625)
#613 := [rewrite]: #612
#610 := (iff #466 #468)
#623 := (iff #617 #618)
#624 := [rewrite]: #623
#611 := [monotonicity #624]: #610
#608 := [trans #611 #613]: #607
#467 := [quant-inst]: #466
#614 := [mp #467 #608]: #625
#494 := [unit-resolution #614 #685 #176]: #622
#505 := [symm #494]: #504
#599 := [monotonicity #505]: #506
#587 := [trans #599 #600]: #149
#175 := [and-elim #174]: #154
[unit-resolution #175 #587]: false
unsat
3c1f7d30ea379c9ce2207a011fc3d11958eb42f1 438 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#625 := (f3 #26)
#577 := (f4 #625)
#575 := (= #577 0::int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#299 := (f3 #28)
#461 := (f4 #299)
#570 := (= #461 0::int)
#576 := (>= #26 0::int)
#508 := (= #26 0::int)
#463 := (not #576)
#424 := [hypothesis]: #463
#578 := (or #575 #576)
#14 := (:var 0 int)
#16 := (f3 #14)
#645 := (pattern #16)
#80 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#128 := (or #22 #80)
#652 := (forall (vars (?v0 int)) (:pat #645) #128)
#133 := (forall (vars (?v0 int)) #128)
#655 := (iff #133 #652)
#653 := (iff #128 #128)
#654 := [refl]: #653
#656 := [quant-intro #654]: #655
#153 := (~ #133 #133)
#165 := (~ #128 #128)
#166 := [refl]: #165
#154 := [nnf-pos #166]: #153
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#136 := (iff #24 #133)
#99 := (= 0::int #17)
#105 := (not #21)
#106 := (or #105 #99)
#111 := (forall (vars (?v0 int)) #106)
#134 := (iff #111 #133)
#131 := (iff #106 #128)
#125 := (or #80 #22)
#129 := (iff #125 #128)
#130 := [rewrite]: #129
#126 := (iff #106 #125)
#123 := (iff #99 #22)
#124 := [rewrite]: #123
#121 := (iff #105 #80)
#81 := (not #80)
#116 := (not #81)
#119 := (iff #116 #80)
#120 := [rewrite]: #119
#117 := (iff #105 #116)
#114 := (iff #21 #81)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#122 := [trans #118 #120]: #121
#127 := [monotonicity #122 #124]: #126
#132 := [trans #127 #130]: #131
#135 := [quant-intro #132]: #134
#112 := (iff #24 #111)
#109 := (iff #23 #106)
#102 := (implies #21 #99)
#107 := (iff #102 #106)
#108 := [rewrite]: #107
#103 := (iff #23 #102)
#100 := (iff #22 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#110 := [trans #104 #108]: #109
#113 := [quant-intro #110]: #112
#137 := [trans #113 #135]: #136
#98 := [asserted]: #24
#138 := [mp #98 #137]: #133
#167 := [mp~ #138 #154]: #133
#657 := [mp #167 #656]: #652
#336 := (not #652)
#462 := (or #336 #575 #576)
#421 := (or #336 #578)
#471 := (iff #421 #462)
#566 := [rewrite]: #471
#569 := [quant-inst]: #421
#567 := [mp #569 #566]: #462
#425 := [unit-resolution #567 #657]: #578
#426 := [unit-resolution #425 #424]: #575
#504 := (= #26 #577)
#298 := (= f5 #625)
#8 := (:var 0 S2)
#9 := (f4 #8)
#637 := (pattern #9)
#10 := (f3 #9)
#55 := (= #8 #10)
#638 := (forall (vars (?v0 S2)) (:pat #637) #55)
#58 := (forall (vars (?v0 S2)) #55)
#639 := (iff #58 #638)
#641 := (iff #638 #638)
#642 := [rewrite]: #641
#640 := [rewrite]: #639
#643 := [trans #640 #642]: #639
#161 := (~ #58 #58)
#159 := (~ #55 #55)
#160 := [refl]: #159
#162 := [nnf-pos #160]: #161
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#59 := (iff #12 #58)
#56 := (iff #11 #55)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#54 := [asserted]: #12
#63 := [mp #54 #60]: #58
#150 := [mp~ #63 #162]: #58
#644 := [mp #150 #643]: #638
#633 := (not #638)
#634 := (or #633 #298)
#635 := [quant-inst]: #634
#503 := [unit-resolution #635 #644]: #298
#507 := [monotonicity #503]: #504
#428 := [trans #507 #426]: #508
#429 := (not #508)
#430 := (or #429 #576)
#431 := [th-lemma]: #430
#432 := [unit-resolution #431 #424 #428]: false
#433 := [lemma #432]: #576
#414 := (or #463 #570)
#553 := (= #28 0::int)
#29 := (+ #26 #28)
#30 := (f3 #29)
#290 := (f4 #30)
#628 := -1::int
#270 := (* -1::int #290)
#612 := (+ #28 #270)
#274 := (+ #26 #612)
#610 := (<= #274 0::int)
#275 := (= #274 0::int)
#630 := (>= #29 0::int)
#460 := (>= #28 0::int)
#519 := (not #570)
#483 := [hypothesis]: #519
#470 := (or #460 #570)
#466 := (or #336 #460 #570)
#455 := (or #570 #460)
#474 := (or #336 #455)
#572 := (iff #474 #466)
#476 := (or #336 #470)
#571 := (iff #476 #466)
#568 := [rewrite]: #571
#477 := (iff #474 #476)
#472 := (iff #455 #470)
#473 := [rewrite]: #472
#478 := [monotonicity #473]: #477
#559 := [trans #478 #568]: #572
#475 := [quant-inst]: #474
#561 := [mp #475 #559]: #466
#489 := [unit-resolution #561 #657]: #470
#457 := [unit-resolution #489 #483]: #460
#491 := [hypothesis]: #576
#464 := (not #460)
#423 := (or #630 #463 #464)
#454 := [th-lemma]: #423
#456 := [unit-resolution #454 #491 #457]: #630
#636 := (not #630)
#614 := (or #275 #636)
#62 := (= #14 #17)
#87 := (or #62 #81)
#646 := (forall (vars (?v0 int)) (:pat #645) #87)
#92 := (forall (vars (?v0 int)) #87)
#649 := (iff #92 #646)
#647 := (iff #87 #87)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#151 := (~ #92 #92)
#147 := (~ #87 #87)
#163 := [refl]: #147
#152 := [nnf-pos #163]: #151
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#95 := (iff #20 #92)
#69 := (not #15)
#70 := (or #69 #62)
#75 := (forall (vars (?v0 int)) #70)
#93 := (iff #75 #92)
#90 := (iff #70 #87)
#84 := (or #81 #62)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #70 #84)
#82 := (iff #69 #81)
#78 := (iff #15 #80)
#79 := [rewrite]: #78
#83 := [monotonicity #79]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [quant-intro #91]: #93
#76 := (iff #20 #75)
#73 := (iff #19 #70)
#66 := (implies #15 #62)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #19 #66)
#64 := (iff #18 #62)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#74 := [trans #68 #72]: #73
#77 := [quant-intro #74]: #76
#96 := [trans #77 #94]: #95
#61 := [asserted]: #20
#97 := [mp #61 #96]: #92
#164 := [mp~ #97 #152]: #92
#651 := [mp #164 #650]: #646
#617 := (not #646)
#618 := (or #617 #275 #636)
#627 := (= #29 #290)
#286 := (or #627 #636)
#613 := (or #617 #286)
#623 := (iff #613 #618)
#256 := (or #617 #614)
#261 := (iff #256 #618)
#262 := [rewrite]: #261
#620 := (iff #613 #256)
#615 := (iff #286 #614)
#276 := (iff #627 #275)
#277 := [rewrite]: #276
#616 := [monotonicity #277]: #615
#622 := [monotonicity #616]: #620
#621 := [trans #622 #262]: #623
#619 := [quant-inst]: #613
#624 := [mp #619 #621]: #618
#458 := [unit-resolution #624 #651]: #614
#465 := [unit-resolution #458 #456]: #275
#467 := (not #275)
#468 := (or #467 #610)
#469 := [th-lemma]: #468
#479 := [unit-resolution #469 #465]: #610
#611 := (>= #274 0::int)
#608 := (<= #290 0::int)
#318 := (= #290 0::int)
#31 := (f3 0::int)
#609 := (f4 #31)
#322 := (= #609 0::int)
#439 := (or #617 #322)
#334 := (>= 0::int 0::int)
#335 := (not #334)
#319 := (= 0::int #609)
#320 := (or #319 #335)
#440 := (or #617 #320)
#583 := (iff #440 #439)
#585 := (iff #439 #439)
#579 := [rewrite]: #585
#597 := (iff #320 #322)
#589 := (or #322 false)
#596 := (iff #589 #322)
#591 := [rewrite]: #596
#590 := (iff #320 #589)
#593 := (iff #335 false)
#1 := true
#598 := (not true)
#603 := (iff #598 false)
#592 := [rewrite]: #603
#602 := (iff #335 #598)
#601 := (iff #334 true)
#315 := [rewrite]: #601
#599 := [monotonicity #315]: #602
#594 := [trans #599 #592]: #593
#321 := (iff #319 #322)
#600 := [rewrite]: #321
#595 := [monotonicity #600 #594]: #590
#438 := [trans #595 #591]: #597
#584 := [monotonicity #438]: #583
#580 := [trans #584 #579]: #583
#582 := [quant-inst]: #440
#586 := [mp #582 #580]: #439
#555 := [unit-resolution #586 #651]: #322
#495 := (= #290 #609)
#32 := (= #30 #31)
#34 := (= f6 #31)
#35 := (not #34)
#33 := (= f5 #31)
#140 := (not #33)
#141 := (or #140 #35)
#528 := (= #29 0::int)
#526 := (= #29 #609)
#545 := (= #28 #609)
#309 := (not #141)
#565 := [hypothesis]: #309
#222 := (or #141 #34)
#308 := [def-axiom]: #222
#556 := [unit-resolution #308 #565]: #34
#546 := [monotonicity #556]: #545
#524 := (= #29 #28)
#552 := (= #26 #28)
#542 := (= f5 f6)
#557 := (= #31 f6)
#551 := [symm #556]: #557
#221 := (or #141 #33)
#307 := [def-axiom]: #221
#558 := [unit-resolution #307 #565]: #33
#543 := [trans #558 #551]: #542
#522 := [monotonicity #543]: #552
#541 := (= #29 #26)
#540 := (= #26 #29)
#550 := (<= #28 0::int)
#547 := [trans #546 #555]: #553
#548 := (not #553)
#544 := (or #548 #550)
#549 := [th-lemma]: #544
#535 := [unit-resolution #549 #547]: #550
#536 := (or #548 #460)
#538 := [th-lemma]: #536
#539 := [unit-resolution #538 #547]: #460
#537 := [th-lemma #539 #535]: #540
#521 := [symm #537]: #541
#525 := [trans #521 #522]: #524
#527 := [trans #525 #546]: #526
#529 := [trans #527 #555]: #528
#530 := [monotonicity #529]: #32
#293 := (not #32)
#287 := (or #293 #141)
#144 := (iff #32 #141)
#36 := (implies #33 #35)
#37 := (iff #32 #36)
#145 := (iff #37 #144)
#142 := (iff #36 #141)
#143 := [rewrite]: #142
#146 := [monotonicity #143]: #145
#139 := [asserted]: #37
#149 := [mp #139 #146]: #144
#312 := (not #144)
#629 := (or #293 #141 #312)
#631 := [def-axiom]: #629
#418 := [unit-resolution #631 #149]: #287
#554 := [unit-resolution #418 #565]: #293
#531 := [unit-resolution #554 #530]: false
#532 := [lemma #531]: #141
#310 := (or #32 #309)
#240 := (or #32 #309 #312)
#313 := [def-axiom]: #240
#314 := [unit-resolution #313 #149]: #310
#494 := [unit-resolution #314 #532]: #32
#498 := [monotonicity #494]: #495
#499 := [trans #498 #555]: #318
#500 := (not #318)
#496 := (or #500 #608)
#501 := [th-lemma]: #496
#481 := [unit-resolution #501 #499]: #608
#459 := (not #608)
#480 := (or #611 #463 #464 #459)
#435 := [th-lemma]: #480
#436 := [unit-resolution #435 #491 #481 #457]: #611
#605 := (>= #290 0::int)
#441 := (or #500 #605)
#442 := [th-lemma]: #441
#443 := [unit-resolution #442 #499]: #605
#562 := (* -1::int #28)
#563 := (+ #26 #562)
#490 := (<= #563 0::int)
#482 := (not #610)
#444 := (or #490 #464 #459 #482)
#445 := [th-lemma]: #444
#446 := [unit-resolution #445 #479 #457 #481]: #490
#560 := (>= #563 0::int)
#487 := (or #560 #482 #463)
#492 := (not #560)
#497 := [hypothesis]: #492
#493 := [hypothesis]: #610
#427 := [th-lemma #481 #493 #497 #491]: false
#488 := [lemma #427]: #487
#447 := [unit-resolution #488 #479 #491]: #560
#448 := [th-lemma #447 #446 #443 #481 #436 #479]: #553
#451 := (= #461 #28)
#449 := (= #299 f6)
#632 := (= f6 #299)
#626 := (or #633 #632)
#285 := [quant-inst]: #626
#523 := [unit-resolution #285 #644]: #632
#450 := [symm #523]: #449
#452 := [monotonicity #450]: #451
#437 := [trans #452 #448]: #570
#453 := [unit-resolution #483 #437]: false
#415 := [lemma #453]: #414
#422 := [unit-resolution #415 #433]: #570
#391 := (= #577 #461)
#534 := (= #28 #461)
#512 := [monotonicity #523]: #534
#400 := (= #577 #28)
#405 := [trans #512 #422]: #553
#406 := [unit-resolution #538 #405]: #460
#407 := [unit-resolution #454 #406 #433]: #630
#409 := [unit-resolution #458 #407]: #275
#410 := [unit-resolution #469 #409]: #610
#411 := [unit-resolution #445 #410 #406 #481]: #490
#253 := [unit-resolution #488 #410 #433]: #560
#412 := (not #490)
#408 := (or #552 #412 #492)
#413 := [th-lemma]: #408
#392 := [unit-resolution #413 #253 #411]: #552
#401 := (= #577 #26)
#395 := (= #625 f5)
#399 := [symm #503]: #395
#402 := [monotonicity #399]: #401
#403 := [trans #402 #392]: #400
#394 := [trans #403 #512]: #391
#396 := [trans #394 #422]: #575
#485 := (not #575)
#514 := (or #519 #34)
#515 := (= #299 #31)
#533 := [hypothesis]: #570
#513 := [trans #512 #533]: #553
#516 := [monotonicity #513]: #515
#517 := [trans #523 #516]: #34
#564 := [hypothesis]: #35
#518 := [unit-resolution #564 #517]: false
#520 := [lemma #518]: #514
#416 := [unit-resolution #520 #422]: #34
#300 := (or #309 #140 #35)
#311 := [def-axiom]: #300
#434 := [unit-resolution #311 #416 #532]: #140
#486 := (or #485 #33)
#510 := (= #625 #31)
#502 := [hypothesis]: #575
#509 := [trans #507 #502]: #508
#505 := [monotonicity #509]: #510
#511 := [trans #503 #505]: #33
#506 := [hypothesis]: #140
#484 := [unit-resolution #506 #511]: false
#379 := [lemma #484]: #486
#404 := [unit-resolution #379 #434]: #485
[unit-resolution #404 #396]: false
unsat
d2811f187a26b77cca78876fe4e7b2248df3c75e 321 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#141 := -1::int
#142 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#143 := (+ #26 #142)
#146 := (f3 #143)
#13 := 0::int
#31 := (f3 0::int)
#152 := (= #31 #146)
#645 := (f4 #146)
#547 := (f3 #645)
#476 := (= #547 #146)
#548 := (= #146 #547)
#8 := (:var 0 S2)
#9 := (f4 #8)
#672 := (pattern #9)
#10 := (f3 #9)
#56 := (= #8 #10)
#673 := (forall (vars (?v0 S2)) (:pat #672) #56)
#59 := (forall (vars (?v0 S2)) #56)
#674 := (iff #59 #673)
#676 := (iff #673 #673)
#677 := [rewrite]: #676
#675 := [rewrite]: #674
#678 := [trans #675 #677]: #674
#199 := (~ #59 #59)
#197 := (~ #56 #56)
#198 := [refl]: #197
#200 := [nnf-pos #198]: #199
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#60 := (iff #12 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#61 := [quant-intro #58]: #60
#55 := [asserted]: #12
#64 := [mp #55 #61]: #59
#186 := [mp~ #64 #200]: #59
#679 := [mp #186 #678]: #673
#345 := (not #673)
#528 := (or #345 #548)
#529 := [quant-inst]: #528
#519 := [unit-resolution #529 #679]: #548
#477 := [symm #519]: #476
#470 := (= #31 #547)
#494 := (= 0::int #645)
#638 := (= #645 0::int)
#656 := (>= #143 0::int)
#659 := (not #656)
#160 := (* -1::int #26)
#161 := (+ #160 #28)
#164 := (f3 #161)
#617 := (f4 #164)
#597 := (<= #617 0::int)
#523 := (not #597)
#507 := (= #617 0::int)
#545 := (not #507)
#170 := (= #31 #164)
#558 := (f3 #617)
#539 := (= #558 #164)
#569 := (= #164 #558)
#550 := (or #345 #569)
#551 := [quant-inst]: #550
#552 := [unit-resolution #551 #679]: #569
#542 := [symm #552]: #539
#537 := (= #31 #558)
#555 := (= 0::int #617)
#553 := [hypothesis]: #507
#541 := [symm #553]: #555
#538 := [monotonicity #541]: #537
#543 := [trans #538 #542]: #170
#175 := (not #170)
#157 := (not #152)
#178 := (and #157 #175)
#34 := (- #28 #26)
#35 := (f3 #34)
#36 := (= #35 #31)
#37 := (not #36)
#29 := (- #26 #28)
#30 := (f3 #29)
#32 := (= #30 #31)
#33 := (not #32)
#38 := (and #33 #37)
#179 := (iff #38 #178)
#176 := (iff #37 #175)
#173 := (iff #36 #170)
#167 := (= #164 #31)
#171 := (iff #167 #170)
#172 := [rewrite]: #171
#168 := (iff #36 #167)
#165 := (= #35 #164)
#162 := (= #34 #161)
#163 := [rewrite]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#174 := [trans #169 #172]: #173
#177 := [monotonicity #174]: #176
#158 := (iff #33 #157)
#155 := (iff #32 #152)
#149 := (= #146 #31)
#153 := (iff #149 #152)
#154 := [rewrite]: #153
#150 := (iff #32 #149)
#147 := (= #30 #146)
#144 := (= #29 #143)
#145 := [rewrite]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#156 := [trans #151 #154]: #155
#159 := [monotonicity #156]: #158
#180 := [monotonicity #159 #177]: #179
#140 := [asserted]: #38
#183 := [mp #140 #180]: #178
#182 := [and-elim #183]: #175
#544 := [unit-resolution #182 #543]: false
#540 := [lemma #544]: #545
#598 := (>= #617 0::int)
#621 := (+ #142 #617)
#622 := (+ #26 #621)
#505 := (>= #622 0::int)
#614 := (= #622 0::int)
#616 := (<= #143 0::int)
#501 := (or #507 #616)
#14 := (:var 0 int)
#16 := (f3 #14)
#680 := (pattern #16)
#81 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#129 := (or #22 #81)
#687 := (forall (vars (?v0 int)) (:pat #680) #129)
#134 := (forall (vars (?v0 int)) #129)
#690 := (iff #134 #687)
#688 := (iff #129 #129)
#689 := [refl]: #688
#691 := [quant-intro #689]: #690
#189 := (~ #134 #134)
#203 := (~ #129 #129)
#204 := [refl]: #203
#190 := [nnf-pos #204]: #189
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#137 := (iff #24 #134)
#100 := (= 0::int #17)
#106 := (not #21)
#107 := (or #106 #100)
#112 := (forall (vars (?v0 int)) #107)
#135 := (iff #112 #134)
#132 := (iff #107 #129)
#126 := (or #81 #22)
#130 := (iff #126 #129)
#131 := [rewrite]: #130
#127 := (iff #107 #126)
#124 := (iff #100 #22)
#125 := [rewrite]: #124
#122 := (iff #106 #81)
#82 := (not #81)
#117 := (not #82)
#120 := (iff #117 #81)
#121 := [rewrite]: #120
#118 := (iff #106 #117)
#115 := (iff #21 #82)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#123 := [trans #119 #121]: #122
#128 := [monotonicity #123 #125]: #127
#133 := [trans #128 #131]: #132
#136 := [quant-intro #133]: #135
#113 := (iff #24 #112)
#110 := (iff #23 #107)
#103 := (implies #21 #100)
#108 := (iff #103 #107)
#109 := [rewrite]: #108
#104 := (iff #23 #103)
#101 := (iff #22 #100)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#111 := [trans #105 #109]: #110
#114 := [quant-intro #111]: #113
#138 := [trans #114 #136]: #137
#99 := [asserted]: #24
#139 := [mp #99 #138]: #134
#205 := [mp~ #139 #190]: #134
#692 := [mp #205 #691]: #687
#624 := (not #687)
#511 := (or #624 #507 #616)
#628 := (>= #161 0::int)
#508 := (or #507 #628)
#512 := (or #624 #508)
#588 := (iff #512 #511)
#606 := (or #624 #501)
#594 := (iff #606 #511)
#596 := [rewrite]: #594
#603 := (iff #512 #606)
#509 := (iff #508 #501)
#623 := (iff #628 #616)
#452 := [rewrite]: #623
#510 := [monotonicity #452]: #509
#607 := [monotonicity #510]: #603
#585 := [trans #607 #596]: #588
#513 := [quant-inst]: #512
#587 := [mp #513 #585]: #511
#520 := [unit-resolution #587 #692]: #501
#530 := [unit-resolution #520 #540]: #616
#454 := (not #616)
#609 := (or #614 #454)
#63 := (= #14 #17)
#88 := (or #63 #82)
#681 := (forall (vars (?v0 int)) (:pat #680) #88)
#93 := (forall (vars (?v0 int)) #88)
#684 := (iff #93 #681)
#682 := (iff #88 #88)
#683 := [refl]: #682
#685 := [quant-intro #683]: #684
#187 := (~ #93 #93)
#184 := (~ #88 #88)
#201 := [refl]: #184
#188 := [nnf-pos #201]: #187
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#96 := (iff #20 #93)
#70 := (not #15)
#71 := (or #70 #63)
#76 := (forall (vars (?v0 int)) #71)
#94 := (iff #76 #93)
#91 := (iff #71 #88)
#85 := (or #82 #63)
#89 := (iff #85 #88)
#90 := [rewrite]: #89
#86 := (iff #71 #85)
#83 := (iff #70 #82)
#79 := (iff #15 #81)
#80 := [rewrite]: #79
#84 := [monotonicity #80]: #83
#87 := [monotonicity #84]: #86
#92 := [trans #87 #90]: #91
#95 := [quant-intro #92]: #94
#77 := (iff #20 #76)
#74 := (iff #19 #71)
#67 := (implies #15 #63)
#72 := (iff #67 #71)
#73 := [rewrite]: #72
#68 := (iff #19 #67)
#65 := (iff #18 #63)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#75 := [trans #69 #73]: #74
#78 := [quant-intro #75]: #77
#97 := [trans #78 #95]: #96
#62 := [asserted]: #20
#98 := [mp #62 #97]: #93
#202 := [mp~ #98 #188]: #93
#686 := [mp #202 #685]: #681
#647 := (not #681)
#610 := (or #647 #614 #454)
#629 := (not #628)
#618 := (= #161 #617)
#619 := (or #618 #629)
#613 := (or #647 #619)
#601 := (iff #613 #610)
#496 := (or #647 #609)
#604 := (iff #496 #610)
#506 := [rewrite]: #604
#497 := (iff #613 #496)
#611 := (iff #619 #609)
#455 := (iff #629 #454)
#608 := [monotonicity #452]: #455
#620 := (iff #618 #614)
#615 := [rewrite]: #620
#612 := [monotonicity #615 #608]: #611
#456 := [monotonicity #612]: #497
#602 := [trans #456 #506]: #601
#495 := [quant-inst]: #613
#605 := [mp #495 #602]: #610
#533 := [unit-resolution #605 #686]: #609
#534 := [unit-resolution #533 #530]: #614
#535 := (not #614)
#531 := (or #535 #505)
#536 := [th-lemma]: #531
#516 := [unit-resolution #536 #534]: #505
#462 := (not #505)
#517 := (or #598 #462 #454)
#498 := [th-lemma]: #517
#522 := [unit-resolution #498 #530 #516]: #598
#518 := (not #598)
#524 := (or #507 #523 #518)
#492 := [th-lemma]: #524
#499 := [unit-resolution #492 #522 #540]: #523
#490 := (<= #622 0::int)
#458 := (or #535 #490)
#489 := [th-lemma]: #458
#491 := [unit-resolution #489 #534]: #490
#493 := (not #490)
#500 := (or #659 #597 #493)
#502 := [th-lemma]: #500
#503 := [unit-resolution #502 #491 #499]: #659
#627 := (or #638 #656)
#625 := (or #624 #638 #656)
#630 := (or #624 #627)
#626 := (iff #630 #625)
#632 := [rewrite]: #626
#631 := [quant-inst]: #630
#473 := [mp #631 #632]: #625
#504 := [unit-resolution #473 #692]: #627
#514 := [unit-resolution #504 #503]: #638
#515 := [symm #514]: #494
#471 := [monotonicity #515]: #470
#478 := [trans #471 #477]: #152
#181 := [and-elim #183]: #157
[unit-resolution #181 #478]: false
unsat
6750007dac6f87e186d233d8af85a2f566a05649 329 0
#2 := false
decl f6 :: S2
#27 := f6
decl f5 :: S2
#25 := f5
#13 := 0::int
decl f4 :: (-> S2 int)
#28 := (f4 f6)
#140 := -1::int
#141 := (* -1::int #28)
#26 := (f4 f5)
#142 := (+ #26 #141)
#174 := (>= #142 0::int)
#180 := (ite #174 f5 f6)
decl f3 :: (-> int S2)
#145 := (f3 #142)
#148 := (f4 #145)
#154 := (+ #28 #148)
#159 := (f3 #154)
#188 := (= #159 #180)
#358 := (= f6 #180)
#173 := (not #174)
#272 := (= f5 #180)
#589 := [hypothesis]: #174
#273 := (or #173 #272)
#359 := [def-axiom]: #273
#590 := [unit-resolution #359 #589]: #272
#507 := (= #159 f5)
#291 := (f3 #26)
#533 := (= #291 f5)
#364 := (= f5 #291)
#8 := (:var 0 S2)
#9 := (f4 #8)
#687 := (pattern #9)
#10 := (f3 #9)
#55 := (= #8 #10)
#688 := (forall (vars (?v0 S2)) (:pat #687) #55)
#58 := (forall (vars (?v0 S2)) #55)
#689 := (iff #58 #688)
#691 := (iff #688 #688)
#692 := [rewrite]: #691
#690 := [rewrite]: #689
#693 := [trans #690 #692]: #689
#212 := (~ #58 #58)
#210 := (~ #55 #55)
#211 := [refl]: #210
#213 := [nnf-pos #211]: #212
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#59 := (iff #12 #58)
#56 := (iff #11 #55)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#54 := [asserted]: #12
#63 := [mp #54 #60]: #58
#201 := [mp~ #63 #213]: #58
#694 := [mp #201 #693]: #688
#361 := (not #688)
#338 := (or #361 #364)
#468 := [quant-inst]: #338
#580 := [unit-resolution #468 #694]: #364
#539 := [symm #580]: #533
#532 := (= #159 #291)
#553 := (= #154 #26)
#582 := (= #26 #154)
#683 := (* -1::int #148)
#684 := (+ #141 #683)
#685 := (+ #26 #684)
#672 := (<= #685 0::int)
#680 := (= #685 0::int)
#337 := (or #173 #680)
#14 := (:var 0 int)
#16 := (f3 #14)
#695 := (pattern #16)
#80 := (>= #14 0::int)
#81 := (not #80)
#17 := (f4 #16)
#62 := (= #14 #17)
#87 := (or #62 #81)
#696 := (forall (vars (?v0 int)) (:pat #695) #87)
#92 := (forall (vars (?v0 int)) #87)
#699 := (iff #92 #696)
#697 := (iff #87 #87)
#698 := [refl]: #697
#700 := [quant-intro #698]: #699
#202 := (~ #92 #92)
#199 := (~ #87 #87)
#214 := [refl]: #199
#203 := [nnf-pos #214]: #202
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#95 := (iff #20 #92)
#69 := (not #15)
#70 := (or #69 #62)
#75 := (forall (vars (?v0 int)) #70)
#93 := (iff #75 #92)
#90 := (iff #70 #87)
#84 := (or #81 #62)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #70 #84)
#82 := (iff #69 #81)
#78 := (iff #15 #80)
#79 := [rewrite]: #78
#83 := [monotonicity #79]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [quant-intro #91]: #93
#76 := (iff #20 #75)
#73 := (iff #19 #70)
#66 := (implies #15 #62)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #19 #66)
#64 := (iff #18 #62)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#74 := [trans #68 #72]: #73
#77 := [quant-intro #74]: #76
#96 := [trans #77 #94]: #95
#61 := [asserted]: #20
#97 := [mp #61 #96]: #92
#215 := [mp~ #97 #203]: #92
#701 := [mp #215 #700]: #696
#326 := (not #696)
#327 := (or #326 #173 #680)
#675 := (= #142 #148)
#349 := (or #675 #173)
#328 := (or #326 #349)
#669 := (iff #328 #327)
#665 := (or #326 #337)
#668 := (iff #665 #327)
#663 := [rewrite]: #668
#666 := (iff #328 #665)
#662 := (iff #349 #337)
#336 := (or #680 #173)
#678 := (iff #336 #337)
#321 := [rewrite]: #678
#341 := (iff #349 #336)
#686 := (iff #675 #680)
#676 := [rewrite]: #686
#677 := [monotonicity #676]: #341
#325 := [trans #677 #321]: #662
#667 := [monotonicity #325]: #666
#307 := [trans #667 #663]: #669
#664 := [quant-inst]: #328
#670 := [mp #664 #307]: #327
#547 := [unit-resolution #670 #701]: #337
#543 := [unit-resolution #547 #589]: #680
#544 := (not #680)
#545 := (or #544 #672)
#548 := [th-lemma]: #545
#549 := [unit-resolution #548 #543]: #672
#312 := (>= #685 0::int)
#550 := (or #544 #312)
#546 := [th-lemma]: #550
#551 := [unit-resolution #546 #543]: #312
#531 := [th-lemma #551 #549]: #582
#477 := [symm #531]: #553
#513 := [monotonicity #477]: #532
#514 := [trans #513 #539]: #507
#473 := [trans #514 #590]: #188
#193 := (not #188)
#34 := (< #26 #28)
#35 := (ite #34 f6 f5)
#29 := (- #26 #28)
#30 := (f3 #29)
#31 := (f4 #30)
#32 := (+ #31 #28)
#33 := (f3 #32)
#36 := (= #33 #35)
#37 := (not #36)
#196 := (iff #37 #193)
#165 := (= #35 #159)
#170 := (not #165)
#194 := (iff #170 #193)
#191 := (iff #165 #188)
#185 := (= #180 #159)
#189 := (iff #185 #188)
#190 := [rewrite]: #189
#186 := (iff #165 #185)
#183 := (= #35 #180)
#177 := (ite #173 f6 f5)
#181 := (= #177 #180)
#182 := [rewrite]: #181
#178 := (= #35 #177)
#175 := (iff #34 #173)
#176 := [rewrite]: #175
#179 := [monotonicity #176]: #178
#184 := [trans #179 #182]: #183
#187 := [monotonicity #184]: #186
#192 := [trans #187 #190]: #191
#195 := [monotonicity #192]: #194
#171 := (iff #37 #170)
#168 := (iff #36 #165)
#162 := (= #159 #35)
#166 := (iff #162 #165)
#167 := [rewrite]: #166
#163 := (iff #36 #162)
#160 := (= #33 #159)
#157 := (= #32 #154)
#151 := (+ #148 #28)
#155 := (= #151 #154)
#156 := [rewrite]: #155
#152 := (= #32 #151)
#149 := (= #31 #148)
#146 := (= #30 #145)
#143 := (= #29 #142)
#144 := [rewrite]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [monotonicity #150]: #152
#158 := [trans #153 #156]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#169 := [trans #164 #167]: #168
#172 := [monotonicity #169]: #171
#197 := [trans #172 #195]: #196
#139 := [asserted]: #37
#198 := [mp #139 #197]: #193
#504 := [unit-resolution #198 #473]: false
#506 := [lemma #504]: #173
#360 := (or #174 #358)
#351 := [def-axiom]: #360
#542 := [unit-resolution #351 #506]: #358
#498 := (= #159 f6)
#362 := (f3 #28)
#496 := (= #362 f6)
#363 := (= f6 #362)
#365 := (or #361 #363)
#344 := [quant-inst]: #365
#541 := [unit-resolution #344 #694]: #363
#497 := [symm #541]: #496
#492 := (= #159 #362)
#486 := (= #154 #28)
#530 := (= #28 #154)
#655 := (<= #148 0::int)
#313 := (= #148 0::int)
#671 := (or #174 #313)
#22 := (= #17 0::int)
#128 := (or #22 #80)
#702 := (forall (vars (?v0 int)) (:pat #695) #128)
#133 := (forall (vars (?v0 int)) #128)
#705 := (iff #133 #702)
#703 := (iff #128 #128)
#704 := [refl]: #703
#706 := [quant-intro #704]: #705
#204 := (~ #133 #133)
#216 := (~ #128 #128)
#217 := [refl]: #216
#205 := [nnf-pos #217]: #204
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#136 := (iff #24 #133)
#99 := (= 0::int #17)
#105 := (not #21)
#106 := (or #105 #99)
#111 := (forall (vars (?v0 int)) #106)
#134 := (iff #111 #133)
#131 := (iff #106 #128)
#125 := (or #80 #22)
#129 := (iff #125 #128)
#130 := [rewrite]: #129
#126 := (iff #106 #125)
#123 := (iff #99 #22)
#124 := [rewrite]: #123
#121 := (iff #105 #80)
#116 := (not #81)
#119 := (iff #116 #80)
#120 := [rewrite]: #119
#117 := (iff #105 #116)
#114 := (iff #21 #81)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#122 := [trans #118 #120]: #121
#127 := [monotonicity #122 #124]: #126
#132 := [trans #127 #130]: #131
#135 := [quant-intro #132]: #134
#112 := (iff #24 #111)
#109 := (iff #23 #106)
#102 := (implies #21 #99)
#107 := (iff #102 #106)
#108 := [rewrite]: #107
#103 := (iff #23 #102)
#100 := (iff #22 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#110 := [trans #104 #108]: #109
#113 := [quant-intro #110]: #112
#137 := [trans #113 #135]: #136
#98 := [asserted]: #24
#138 := [mp #98 #137]: #133
#218 := [mp~ #138 #205]: #133
#707 := [mp #218 #706]: #702
#661 := (not #702)
#383 := (or #661 #174 #313)
#673 := (or #313 #174)
#384 := (or #661 #673)
#380 := (iff #384 #383)
#386 := (or #661 #671)
#657 := (iff #386 #383)
#379 := [rewrite]: #657
#279 := (iff #384 #386)
#674 := (iff #673 #671)
#660 := [rewrite]: #674
#656 := [monotonicity #660]: #279
#654 := [trans #656 #379]: #380
#385 := [quant-inst]: #384
#658 := [mp #385 #654]: #383
#537 := [unit-resolution #658 #707]: #671
#538 := [unit-resolution #537 #506]: #313
#508 := (not #313)
#515 := (or #508 #655)
#517 := [th-lemma]: #515
#518 := [unit-resolution #517 #538]: #655
#659 := (>= #148 0::int)
#519 := (or #508 #659)
#529 := [th-lemma]: #519
#509 := [unit-resolution #529 #538]: #659
#485 := [th-lemma #509 #518]: #530
#491 := [symm #485]: #486
#493 := [monotonicity #491]: #492
#499 := [trans #493 #497]: #498
#500 := [trans #499 #542]: #188
[unit-resolution #198 #500]: false
unsat
73fe8e8f8efc05a9592e80e471f1f73a8ea6b41e 33 0
#2 := false
decl f3 :: (-> int S2)
#13 := 0::int
#29 := (f3 0::int)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := (* #26 0::int)
#28 := (f3 #27)
#30 := (= #28 #29)
#31 := (not #30)
#149 := (iff #31 false)
#1 := true
#144 := (not true)
#147 := (iff #144 false)
#148 := [rewrite]: #147
#145 := (iff #31 #144)
#142 := (iff #30 true)
#137 := (= #29 #29)
#140 := (iff #137 true)
#141 := [rewrite]: #140
#138 := (iff #30 #137)
#134 := (= #27 0::int)
#135 := [rewrite]: #134
#136 := [monotonicity #135]: #30
#139 := [monotonicity #136]: #138
#143 := [trans #139 #141]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#133 := [asserted]: #31
[mp #133 #150]: false
unsat
38a43c830e9f2f628495aa4330122f2c2da981cd 517 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f3 :: (-> int S2)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#143 := -1::int
#144 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#145 := (+ #26 #144)
#148 := (f3 #145)
#151 := (f4 #148)
#664 := (* -1::int #151)
#665 := (+ #144 #664)
#666 := (+ #26 #665)
#661 := (= #666 0::int)
#422 := (not #661)
#293 := (>= #666 0::int)
#314 := (not #293)
decl f7 :: S2
#32 := f7
#33 := (f4 f7)
#157 := (* -1::int #33)
#166 := (+ #144 #157)
#167 := (+ #26 #166)
#503 := (>= #167 0::int)
#504 := (not #503)
#170 := (f3 #167)
#158 := (+ #157 #151)
#163 := (f3 #158)
#173 := (= #163 #170)
#497 := (f4 #170)
#490 := (f3 #497)
#447 := (= #490 #170)
#511 := (= #170 #490)
#8 := (:var 0 S2)
#9 := (f4 #8)
#668 := (pattern #9)
#10 := (f3 #9)
#58 := (= #8 #10)
#669 := (forall (vars (?v0 S2)) (:pat #668) #58)
#61 := (forall (vars (?v0 S2)) #58)
#670 := (iff #61 #669)
#672 := (iff #669 #669)
#673 := [rewrite]: #672
#671 := [rewrite]: #670
#674 := [trans #671 #673]: #670
#193 := (~ #61 #61)
#191 := (~ #58 #58)
#192 := [refl]: #191
#194 := [nnf-pos #192]: #193
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#62 := (iff #12 #61)
#59 := (iff #11 #58)
#60 := [rewrite]: #59
#63 := [quant-intro #60]: #62
#57 := [asserted]: #12
#66 := [mp #57 #63]: #61
#182 := [mp~ #66 #194]: #61
#675 := [mp #182 #674]: #669
#341 := (not #669)
#445 := (or #341 #511)
#446 := [quant-inst]: #445
#459 := [unit-resolution #446 #675]: #511
#465 := [symm #459]: #447
#435 := (= #163 #490)
#360 := (f4 #163)
#495 := (f3 #360)
#463 := (= #495 #490)
#327 := (= #360 #497)
#507 := (* -1::int #497)
#508 := (+ #157 #507)
#509 := (+ #144 #508)
#602 := (+ #26 #509)
#578 := (<= #602 0::int)
#599 := (= #602 0::int)
#400 := [hypothesis]: #503
#583 := (or #504 #599)
#14 := (:var 0 int)
#16 := (f3 #14)
#676 := (pattern #16)
#83 := (>= #14 0::int)
#84 := (not #83)
#17 := (f4 #16)
#65 := (= #14 #17)
#90 := (or #65 #84)
#677 := (forall (vars (?v0 int)) (:pat #676) #90)
#95 := (forall (vars (?v0 int)) #90)
#680 := (iff #95 #677)
#678 := (iff #90 #90)
#679 := [refl]: #678
#681 := [quant-intro #679]: #680
#183 := (~ #95 #95)
#179 := (~ #90 #90)
#195 := [refl]: #179
#184 := [nnf-pos #195]: #183
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#98 := (iff #20 #95)
#72 := (not #15)
#73 := (or #72 #65)
#78 := (forall (vars (?v0 int)) #73)
#96 := (iff #78 #95)
#93 := (iff #73 #90)
#87 := (or #84 #65)
#91 := (iff #87 #90)
#92 := [rewrite]: #91
#88 := (iff #73 #87)
#85 := (iff #72 #84)
#81 := (iff #15 #83)
#82 := [rewrite]: #81
#86 := [monotonicity #82]: #85
#89 := [monotonicity #86]: #88
#94 := [trans #89 #92]: #93
#97 := [quant-intro #94]: #96
#79 := (iff #20 #78)
#76 := (iff #19 #73)
#69 := (implies #15 #65)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #19 #69)
#67 := (iff #18 #65)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [trans #71 #75]: #76
#80 := [quant-intro #77]: #79
#99 := [trans #80 #97]: #98
#64 := [asserted]: #20
#100 := [mp #64 #99]: #95
#196 := [mp~ #100 #184]: #95
#682 := [mp #196 #681]: #677
#307 := (not #677)
#596 := (or #307 #504 #599)
#505 := (= #167 #497)
#506 := (or #505 #504)
#585 := (or #307 #506)
#574 := (iff #585 #596)
#587 := (or #307 #583)
#589 := (iff #587 #596)
#573 := [rewrite]: #589
#588 := (iff #585 #587)
#595 := (iff #506 #583)
#592 := (or #599 #504)
#593 := (iff #592 #583)
#594 := [rewrite]: #593
#584 := (iff #506 #592)
#603 := (iff #505 #599)
#590 := [rewrite]: #603
#581 := [monotonicity #590]: #584
#591 := [trans #581 #594]: #595
#582 := [monotonicity #591]: #588
#576 := [trans #582 #573]: #574
#586 := [quant-inst]: #585
#577 := [mp #586 #576]: #596
#401 := [unit-resolution #577 #682]: #583
#399 := [unit-resolution #401 #400]: #599
#402 := (not #599)
#391 := (or #402 #578)
#403 := [th-lemma]: #391
#398 := [unit-resolution #403 #399]: #578
#579 := (>= #602 0::int)
#378 := (or #402 #579)
#377 := [th-lemma]: #378
#379 := [unit-resolution #377 #399]: #579
#653 := (<= #666 0::int)
#319 := (>= #145 0::int)
#561 := (>= #497 0::int)
#368 := (not #578)
#369 := (or #561 #368 #504)
#370 := [th-lemma]: #369
#362 := [unit-resolution #370 #398 #400]: #561
#372 := (not #579)
#371 := (not #561)
#354 := (or #319 #371 #372)
#562 := (>= #33 0::int)
#397 := (= #33 0::int)
#253 := (f3 #33)
#563 := (f4 #253)
#564 := (= #563 0::int)
#380 := (not #562)
#382 := [hypothesis]: #380
#565 := (or #562 #564)
#22 := (= #17 0::int)
#131 := (or #22 #83)
#683 := (forall (vars (?v0 int)) (:pat #676) #131)
#136 := (forall (vars (?v0 int)) #131)
#686 := (iff #136 #683)
#684 := (iff #131 #131)
#685 := [refl]: #684
#687 := [quant-intro #685]: #686
#185 := (~ #136 #136)
#197 := (~ #131 #131)
#198 := [refl]: #197
#186 := [nnf-pos #198]: #185
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#139 := (iff #24 #136)
#102 := (= 0::int #17)
#108 := (not #21)
#109 := (or #108 #102)
#114 := (forall (vars (?v0 int)) #109)
#137 := (iff #114 #136)
#134 := (iff #109 #131)
#128 := (or #83 #22)
#132 := (iff #128 #131)
#133 := [rewrite]: #132
#129 := (iff #109 #128)
#126 := (iff #102 #22)
#127 := [rewrite]: #126
#124 := (iff #108 #83)
#119 := (not #84)
#122 := (iff #119 #83)
#123 := [rewrite]: #122
#120 := (iff #108 #119)
#117 := (iff #21 #84)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#125 := [trans #121 #123]: #124
#130 := [monotonicity #125 #127]: #129
#135 := [trans #130 #133]: #134
#138 := [quant-intro #135]: #137
#115 := (iff #24 #114)
#112 := (iff #23 #109)
#105 := (implies #21 #102)
#110 := (iff #105 #109)
#111 := [rewrite]: #110
#106 := (iff #23 #105)
#103 := (iff #22 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#113 := [trans #107 #111]: #112
#116 := [quant-intro #113]: #115
#140 := [trans #116 #138]: #139
#101 := [asserted]: #24
#141 := [mp #101 #140]: #136
#199 := [mp~ #141 #186]: #136
#688 := [mp #199 #687]: #683
#641 := (not #683)
#546 := (or #641 #562 #564)
#554 := (or #564 #562)
#547 := (or #641 #554)
#533 := (iff #547 #546)
#549 := (or #641 #565)
#551 := (iff #549 #546)
#537 := [rewrite]: #551
#550 := (iff #547 #549)
#543 := (iff #554 #565)
#544 := [rewrite]: #543
#545 := [monotonicity #544]: #550
#534 := [trans #545 #537]: #533
#548 := [quant-inst]: #547
#535 := [mp #548 #534]: #546
#383 := [unit-resolution #535 #688]: #565
#384 := [unit-resolution #383 #382]: #564
#386 := (= #33 #563)
#339 := (= f7 #253)
#332 := (or #341 #339)
#343 := [quant-inst]: #332
#385 := [unit-resolution #343 #675]: #339
#387 := [monotonicity #385]: #386
#388 := [trans #387 #384]: #397
#381 := (not #397)
#389 := (or #381 #562)
#374 := [th-lemma]: #389
#375 := [unit-resolution #374 #382 #388]: false
#376 := [lemma #375]: #562
#363 := (or #380 #319 #371 #372)
#373 := [th-lemma]: #363
#355 := [unit-resolution #373 #376]: #354
#356 := [unit-resolution #355 #362 #379]: #319
#449 := (not #319)
#318 := (or #449 #661)
#308 := (or #307 #449 #661)
#331 := (= #145 #151)
#663 := (or #331 #449)
#309 := (or #307 #663)
#650 := (iff #309 #308)
#646 := (or #307 #318)
#649 := (iff #646 #308)
#644 := [rewrite]: #649
#647 := (iff #309 #646)
#643 := (iff #663 #318)
#317 := (or #661 #449)
#659 := (iff #317 #318)
#302 := [rewrite]: #659
#322 := (iff #663 #317)
#667 := (iff #331 #661)
#657 := [rewrite]: #667
#658 := [monotonicity #657]: #322
#306 := [trans #658 #302]: #643
#648 := [monotonicity #306]: #647
#288 := [trans #648 #644]: #650
#645 := [quant-inst]: #309
#651 := [mp #645 #288]: #308
#424 := [unit-resolution #651 #682]: #318
#348 := [unit-resolution #424 #356]: #661
#425 := (or #422 #653)
#427 := [th-lemma]: #425
#357 := [unit-resolution #427 #348]: #653
#358 := (or #422 #293)
#349 := [th-lemma]: #358
#359 := [unit-resolution #349 #348]: #293
#350 := (+ #664 #360)
#351 := (+ #33 #350)
#611 := (<= #351 0::int)
#636 := (= #351 0::int)
#352 := (+ #33 #664)
#353 := (<= #352 0::int)
#294 := (= #151 0::int)
#432 := (not #653)
#575 := (= #497 0::int)
#440 := (not #575)
#618 := (= #360 0::int)
#347 := (not #353)
#443 := [hypothesis]: #347
#451 := (or #353 #618)
#606 := (or #641 #353 #618)
#652 := (>= #158 0::int)
#612 := (or #618 #652)
#609 := (or #641 #612)
#597 := (iff #609 #606)
#492 := (or #641 #451)
#600 := (iff #492 #606)
#502 := [rewrite]: #600
#493 := (iff #609 #492)
#607 := (iff #612 #451)
#619 := (or #618 #353)
#604 := (iff #619 #451)
#605 := [rewrite]: #604
#448 := (iff #612 #619)
#631 := (iff #652 #353)
#632 := [rewrite]: #631
#450 := [monotonicity #632]: #448
#608 := [trans #450 #605]: #607
#452 := [monotonicity #608]: #493
#598 := [trans #452 #502]: #597
#491 := [quant-inst]: #609
#601 := [mp #491 #598]: #606
#439 := [unit-resolution #601 #688]: #451
#444 := [unit-resolution #439 #443]: #618
#441 := (not #618)
#442 := (or #440 #441)
#461 := (= #490 #495)
#456 := (= #497 #360)
#453 := (= 0::int #360)
#468 := [hypothesis]: #618
#455 := [symm #468]: #453
#484 := [hypothesis]: #575
#457 := [trans #484 #455]: #456
#462 := [monotonicity #457]: #461
#464 := [symm #462]: #463
#454 := (= #163 #495)
#510 := (or #341 #454)
#483 := [quant-inst]: #510
#460 := [unit-resolution #483 #675]: #454
#436 := [trans #460 #464]: #435
#437 := [trans #436 #465]: #173
#176 := (not #173)
#36 := (+ #28 #33)
#37 := (- #26 #36)
#38 := (f3 #37)
#29 := (- #26 #28)
#30 := (f3 #29)
#31 := (f4 #30)
#34 := (- #31 #33)
#35 := (f3 #34)
#39 := (= #35 #38)
#40 := (not #39)
#177 := (iff #40 #176)
#174 := (iff #39 #173)
#171 := (= #38 #170)
#168 := (= #37 #167)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#164 := (= #35 #163)
#161 := (= #34 #158)
#154 := (- #151 #33)
#159 := (= #154 #158)
#160 := [rewrite]: #159
#155 := (= #34 #154)
#152 := (= #31 #151)
#149 := (= #30 #148)
#146 := (= #29 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#162 := [trans #156 #160]: #161
#165 := [monotonicity #162]: #164
#175 := [monotonicity #165 #172]: #174
#178 := [monotonicity #175]: #177
#142 := [asserted]: #40
#181 := [mp #142 #178]: #176
#438 := [unit-resolution #181 #437]: false
#285 := [lemma #438]: #442
#423 := [unit-resolution #285 #444]: #440
#566 := (or #503 #575)
#570 := (or #641 #503 #575)
#580 := (or #575 #503)
#571 := (or #641 #580)
#557 := (iff #571 #570)
#572 := (or #641 #566)
#555 := (iff #572 #570)
#556 := [rewrite]: #555
#552 := (iff #571 #572)
#567 := (iff #580 #566)
#569 := [rewrite]: #567
#553 := [monotonicity #569]: #552
#558 := [trans #553 #556]: #557
#568 := [quant-inst]: #571
#559 := [mp #568 #558]: #570
#426 := [unit-resolution #559 #688]: #566
#430 := [unit-resolution #426 #423]: #503
#433 := (or #432 #504 #353)
#431 := [th-lemma]: #433
#434 := [unit-resolution #431 #443 #430]: #432
#428 := [unit-resolution #427 #434]: #422
#429 := [unit-resolution #424 #428]: #449
#654 := (or #294 #319)
#642 := (or #641 #294 #319)
#364 := (or #641 #654)
#366 := (iff #364 #642)
#367 := [rewrite]: #366
#365 := [quant-inst]: #364
#260 := [mp #365 #367]: #642
#419 := [unit-resolution #260 #688]: #654
#409 := [unit-resolution #419 #429]: #294
#638 := (>= #151 0::int)
#411 := (not #638)
#412 := (or #504 #319 #411 #353)
#415 := [th-lemma]: #412
#416 := [unit-resolution #415 #429 #443 #430]: #411
#420 := (not #294)
#413 := (or #420 #638)
#421 := [th-lemma]: #413
#414 := [unit-resolution #421 #416 #409]: false
#417 := [lemma #414]: #353
#624 := (or #347 #636)
#627 := (or #307 #347 #636)
#655 := (not #652)
#361 := (= #158 #360)
#635 := (or #361 #655)
#622 := (or #307 #635)
#615 := (iff #622 #627)
#469 := (or #307 #624)
#613 := (iff #469 #627)
#614 := [rewrite]: #613
#470 := (iff #622 #469)
#621 := (iff #635 #624)
#630 := (or #636 #347)
#625 := (iff #630 #624)
#620 := [rewrite]: #625
#634 := (iff #635 #630)
#629 := (iff #655 #347)
#633 := [monotonicity #632]: #629
#639 := (iff #361 #636)
#640 := [rewrite]: #639
#623 := [monotonicity #640 #633]: #634
#626 := [trans #623 #620]: #621
#471 := [monotonicity #626]: #470
#616 := [trans #471 #614]: #615
#628 := [quant-inst]: #622
#610 := [mp #628 #616]: #627
#326 := [unit-resolution #610 #682]: #624
#328 := [unit-resolution #326 #417]: #636
#329 := (not #636)
#320 := (or #329 #611)
#333 := [th-lemma]: #320
#334 := [unit-resolution #333 #328]: #611
#617 := (>= #351 0::int)
#335 := (or #329 #617)
#336 := [th-lemma]: #335
#337 := [unit-resolution #336 #328]: #617
#338 := [th-lemma #337 #334 #359 #357 #379 #398]: #327
#321 := [monotonicity #338]: #463
#323 := [trans #460 #321]: #435
#324 := [trans #323 #465]: #173
#303 := [unit-resolution #181 #324]: false
#305 := [lemma #303]: #504
#501 := (>= #360 0::int)
#310 := (not #617)
#311 := (or #501 #310 #347)
#312 := [th-lemma]: #311
#313 := [unit-resolution #312 #337 #417]: #501
#304 := (not #611)
#315 := (not #501)
#316 := (or #314 #503 #315 #304)
#297 := [th-lemma]: #316
#299 := [unit-resolution #297 #334 #313 #305]: #314
#300 := [unit-resolution #349 #299]: #422
#637 := (<= #151 0::int)
#270 := (not #637)
#486 := (<= #360 0::int)
#289 := (not #486)
#298 := [unit-resolution #426 #305]: #575
#301 := [unit-resolution #285 #298]: #441
#295 := (or #618 #289)
#291 := (or #618 #289 #315)
#292 := [th-lemma]: #291
#290 := [unit-resolution #292 #313]: #295
#296 := [unit-resolution #290 #301]: #289
#275 := (or #270 #380 #486 #304)
#276 := [th-lemma]: #275
#281 := [unit-resolution #276 #334 #296 #376]: #270
#283 := (or #420 #637)
#284 := [th-lemma]: #283
#286 := [unit-resolution #284 #281]: #420
#282 := [unit-resolution #419 #286]: #319
[unit-resolution #424 #282 #300]: false
unsat
b8b27e6325657430dd1af6ebdf5787c6efe3284f 33 0
#2 := false
decl f3 :: (-> int S2)
#13 := 0::int
#29 := (f3 0::int)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := (* 0::int #26)
#28 := (f3 #27)
#30 := (= #28 #29)
#31 := (not #30)
#149 := (iff #31 false)
#1 := true
#144 := (not true)
#147 := (iff #144 false)
#148 := [rewrite]: #147
#145 := (iff #31 #144)
#142 := (iff #30 true)
#137 := (= #29 #29)
#140 := (iff #137 true)
#141 := [rewrite]: #140
#138 := (iff #30 #137)
#134 := (= #27 0::int)
#135 := [rewrite]: #134
#136 := [monotonicity #135]: #30
#139 := [monotonicity #136]: #138
#143 := [trans #139 #141]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#133 := [asserted]: #31
[mp #133 #150]: false
unsat
21ee0df98aa191c83f2b436328c15786df798f7a 60 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#136 := (f3 #26)
#142 := (= f5 #136)
#147 := (not #142)
#27 := 1::int
#28 := (* #26 1::int)
#29 := (f3 #28)
#30 := (= #29 f5)
#31 := (not #30)
#148 := (iff #31 #147)
#145 := (iff #30 #142)
#139 := (= #136 f5)
#143 := (iff #139 #142)
#144 := [rewrite]: #143
#140 := (iff #30 #139)
#137 := (= #29 #136)
#134 := (= #28 #26)
#135 := [rewrite]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#146 := [trans #141 #144]: #145
#149 := [monotonicity #146]: #148
#133 := [asserted]: #31
#152 := [mp #133 #149]: #147
#8 := (:var 0 S2)
#9 := (f4 #8)
#639 := (pattern #9)
#10 := (f3 #9)
#49 := (= #8 #10)
#640 := (forall (vars (?v0 S2)) (:pat #639) #49)
#52 := (forall (vars (?v0 S2)) #49)
#641 := (iff #52 #640)
#643 := (iff #640 #640)
#644 := [rewrite]: #643
#642 := [rewrite]: #641
#645 := [trans #642 #644]: #641
#164 := (~ #52 #52)
#162 := (~ #49 #49)
#163 := [refl]: #162
#165 := [nnf-pos #163]: #164
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#53 := (iff #12 #52)
#50 := (iff #11 #49)
#51 := [rewrite]: #50
#54 := [quant-intro #51]: #53
#48 := [asserted]: #12
#57 := [mp #48 #54]: #52
#153 := [mp~ #57 #165]: #52
#646 := [mp #153 #645]: #640
#225 := (not #640)
#310 := (or #225 #142)
#311 := [quant-inst]: #310
[unit-resolution #311 #646 #152]: false
unsat
f2bd5534623dcef31ae5e3e9a7322f435fd34452 60 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#26 := f5
#27 := (f4 f5)
#136 := (f3 #27)
#142 := (= f5 #136)
#147 := (not #142)
#25 := 1::int
#28 := (* 1::int #27)
#29 := (f3 #28)
#30 := (= #29 f5)
#31 := (not #30)
#148 := (iff #31 #147)
#145 := (iff #30 #142)
#139 := (= #136 f5)
#143 := (iff #139 #142)
#144 := [rewrite]: #143
#140 := (iff #30 #139)
#137 := (= #29 #136)
#134 := (= #28 #27)
#135 := [rewrite]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#146 := [trans #141 #144]: #145
#149 := [monotonicity #146]: #148
#133 := [asserted]: #31
#152 := [mp #133 #149]: #147
#8 := (:var 0 S2)
#9 := (f4 #8)
#639 := (pattern #9)
#10 := (f3 #9)
#49 := (= #8 #10)
#640 := (forall (vars (?v0 S2)) (:pat #639) #49)
#52 := (forall (vars (?v0 S2)) #49)
#641 := (iff #52 #640)
#643 := (iff #640 #640)
#644 := [rewrite]: #643
#642 := [rewrite]: #641
#645 := [trans #642 #644]: #641
#164 := (~ #52 #52)
#162 := (~ #49 #49)
#163 := [refl]: #162
#165 := [nnf-pos #163]: #164
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#53 := (iff #12 #52)
#50 := (iff #11 #49)
#51 := [rewrite]: #50
#54 := [quant-intro #51]: #53
#48 := [asserted]: #12
#57 := [mp #48 #54]: #52
#153 := [mp~ #57 #165]: #52
#646 := [mp #153 #645]: #640
#225 := (not #640)
#310 := (or #225 #142)
#311 := [quant-inst]: #310
[unit-resolution #311 #646 #152]: false
unsat
563a522b2ffcab4b8b92a3674b4a7e71c6c68e79 35 0
#2 := false
decl f3 :: (-> int S2)
#25 := 3::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#26 := f5
#27 := (f4 f5)
#30 := (* #27 3::int)
#31 := (f3 #30)
#28 := (* 3::int #27)
#29 := (f3 #28)
#32 := (= #29 #31)
#33 := (not #32)
#152 := (iff #33 false)
#1 := true
#147 := (not true)
#150 := (iff #147 false)
#151 := [rewrite]: #150
#148 := (iff #33 #147)
#145 := (iff #32 true)
#140 := (= #29 #29)
#143 := (iff #140 true)
#144 := [rewrite]: #143
#141 := (iff #32 #140)
#138 := (= #31 #29)
#136 := (= #30 #28)
#137 := [rewrite]: #136
#139 := [monotonicity #137]: #138
#142 := [monotonicity #139]: #141
#146 := [trans #142 #144]: #145
#149 := [monotonicity #146]: #148
#153 := [trans #149 #151]: #152
#135 := [asserted]: #33
[mp #135 #153]: false
unsat
2f498bc61394e79ef8b8e82a20d5e6a57d031207 250 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#55 := (f5 0::int)
decl f3 :: (-> int int int)
#53 := (f3 0::int 0::int)
#54 := (f5 #53)
#56 := (= #54 #55)
#505 := (= #53 0::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#843 := (pattern #10)
#81 := -1::int
#85 := (* -1::int #9)
#82 := (* -1::int #8)
#88 := (div #82 #85)
#345 := (* -1::int #88)
#346 := (+ #10 #345)
#347 := (= #346 0::int)
#21 := (div #8 #9)
#342 := (* -1::int #21)
#343 := (+ #10 #342)
#344 := (= #343 0::int)
#107 := (<= #9 0::int)
#103 := (<= #8 0::int)
#300 := (or #103 #107)
#301 := (not #300)
#114 := (>= #8 0::int)
#283 := (or #107 #114)
#284 := (not #283)
#307 := (or #284 #301)
#348 := (ite #307 #344 #347)
#341 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#349 := (ite #14 #341 #348)
#844 := (forall (vars (?v0 int) (?v1 int)) (:pat #843) #349)
#352 := (forall (vars (?v0 int) (?v1 int)) #349)
#847 := (iff #352 #844)
#845 := (iff #349 #349)
#846 := [refl]: #845
#848 := [quant-intro #846]: #847
#312 := (ite #307 #21 #88)
#315 := (ite #14 0::int #312)
#318 := (= #10 #315)
#321 := (forall (vars (?v0 int) (?v1 int)) #318)
#353 := (iff #321 #352)
#350 := (iff #318 #349)
#351 := [rewrite]: #350
#354 := [quant-intro #351]: #353
#115 := (not #114)
#108 := (not #107)
#118 := (and #108 #115)
#104 := (not #103)
#111 := (and #104 #108)
#121 := (or #111 #118)
#124 := (ite #121 #21 #88)
#127 := (ite #14 0::int #124)
#130 := (= #10 #127)
#133 := (forall (vars (?v0 int) (?v1 int)) #130)
#322 := (iff #133 #321)
#319 := (iff #130 #318)
#316 := (= #127 #315)
#313 := (= #124 #312)
#310 := (iff #121 #307)
#304 := (or #301 #284)
#308 := (iff #304 #307)
#309 := [rewrite]: #308
#305 := (iff #121 #304)
#302 := (iff #118 #284)
#303 := [rewrite]: #302
#281 := (iff #111 #301)
#282 := [rewrite]: #281
#306 := [monotonicity #282 #303]: #305
#311 := [trans #306 #309]: #310
#314 := [monotonicity #311]: #313
#317 := [monotonicity #314]: #316
#320 := [monotonicity #317]: #319
#323 := [quant-intro #320]: #322
#287 := (~ #133 #133)
#285 := (~ #130 #130)
#286 := [refl]: #285
#288 := [nnf-pos #286]: #287
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#136 := (iff #28 #133)
#75 := (and #16 #18)
#78 := (or #17 #75)
#91 := (ite #78 #21 #88)
#94 := (ite #14 0::int #91)
#97 := (= #10 #94)
#100 := (forall (vars (?v0 int) (?v1 int)) #97)
#134 := (iff #100 #133)
#131 := (iff #97 #130)
#128 := (= #94 #127)
#125 := (= #91 #124)
#122 := (iff #78 #121)
#119 := (iff #75 #118)
#116 := (iff #18 #115)
#117 := [rewrite]: #116
#109 := (iff #16 #108)
#110 := [rewrite]: #109
#120 := [monotonicity #110 #117]: #119
#112 := (iff #17 #111)
#105 := (iff #15 #104)
#106 := [rewrite]: #105
#113 := [monotonicity #106 #110]: #112
#123 := [monotonicity #113 #120]: #122
#126 := [monotonicity #123]: #125
#129 := [monotonicity #126]: #128
#132 := [monotonicity #129]: #131
#135 := [quant-intro #132]: #134
#101 := (iff #28 #100)
#98 := (iff #27 #97)
#95 := (= #26 #94)
#92 := (= #25 #91)
#89 := (= #24 #88)
#86 := (= #23 #85)
#87 := [rewrite]: #86
#83 := (= #22 #82)
#84 := [rewrite]: #83
#90 := [monotonicity #84 #87]: #89
#79 := (iff #20 #78)
#76 := (iff #19 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#93 := [monotonicity #80 #90]: #92
#96 := [monotonicity #93]: #95
#99 := [monotonicity #96]: #98
#102 := [quant-intro #99]: #101
#137 := [trans #102 #135]: #136
#74 := [asserted]: #28
#138 := [mp #74 #137]: #133
#272 := [mp~ #138 #288]: #133
#324 := [mp #272 #323]: #321
#355 := [mp #324 #354]: #352
#849 := [mp #355 #848]: #844
#802 := (not #844)
#797 := (or #802 #505)
#429 := (* -1::int 0::int)
#514 := (div #429 #429)
#515 := (* -1::int #514)
#516 := (+ #53 #515)
#507 := (= #516 0::int)
#518 := (div 0::int 0::int)
#519 := (* -1::int #518)
#447 := (+ #53 #519)
#520 := (= #447 0::int)
#517 := (<= 0::int 0::int)
#521 := (or #517 #517)
#500 := (not #521)
#835 := (>= 0::int 0::int)
#837 := (or #517 #835)
#494 := (not #837)
#624 := (or #494 #500)
#831 := (ite #624 #520 #507)
#506 := (= 0::int 0::int)
#838 := (or #506 #506)
#839 := (ite #838 #505 #831)
#803 := (or #802 #839)
#645 := (iff #803 #797)
#788 := (iff #797 #797)
#789 := [rewrite]: #788
#796 := (iff #839 #505)
#1 := true
#809 := (ite true #505 #520)
#800 := (iff #809 #505)
#795 := [rewrite]: #800
#798 := (iff #839 #809)
#808 := (iff #831 #520)
#528 := (ite false #520 #520)
#522 := (iff #528 #520)
#804 := [rewrite]: #522
#806 := (iff #831 #528)
#526 := (iff #507 #520)
#815 := (= #516 #447)
#814 := (= #515 #519)
#536 := (= #514 #518)
#813 := (= #429 0::int)
#535 := [rewrite]: #813
#810 := [monotonicity #535 #535]: #536
#811 := [monotonicity #810]: #814
#525 := [monotonicity #811]: #815
#527 := [monotonicity #525]: #526
#435 := (iff #624 false)
#817 := (or false false)
#541 := (iff #817 false)
#542 := [rewrite]: #541
#539 := (iff #624 #817)
#830 := (iff #500 false)
#821 := (not true)
#824 := (iff #821 false)
#819 := [rewrite]: #824
#829 := (iff #500 #821)
#468 := (iff #521 true)
#836 := (or true true)
#492 := (iff #836 true)
#497 := [rewrite]: #492
#826 := (iff #521 #836)
#834 := (iff #517 true)
#477 := [rewrite]: #834
#828 := [monotonicity #477 #477]: #826
#469 := [trans #828 #497]: #468
#827 := [monotonicity #469]: #829
#816 := [trans #827 #819]: #830
#825 := (iff #494 false)
#822 := (iff #494 #821)
#484 := (iff #837 true)
#482 := (iff #837 #836)
#818 := (iff #835 true)
#481 := [rewrite]: #818
#483 := [monotonicity #477 #481]: #482
#820 := [trans #483 #497]: #484
#823 := [monotonicity #820]: #822
#463 := [trans #823 #819]: #825
#540 := [monotonicity #463 #816]: #539
#812 := [trans #540 #542]: #435
#807 := [monotonicity #812 #527]: #806
#805 := [trans #807 #804]: #808
#833 := (iff #838 true)
#842 := (iff #838 #836)
#840 := (iff #506 true)
#841 := [rewrite]: #840
#832 := [monotonicity #841 #841]: #842
#493 := [trans #832 #497]: #833
#799 := [monotonicity #493 #805]: #798
#801 := [trans #799 #795]: #796
#646 := [monotonicity #801]: #645
#790 := [trans #646 #789]: #645
#644 := [quant-inst]: #803
#791 := [mp #644 #790]: #797
#745 := [unit-resolution #791 #849]: #505
#746 := [monotonicity #745]: #56
#57 := (not #56)
#269 := [asserted]: #57
[unit-resolution #269 #746]: false
unsat
344dd4c43f015bcb0632176ba256e3bea4a444a5 265 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#57 := (f5 0::int)
decl f3 :: (-> int int int)
decl f6 :: (-> S2 int)
decl f7 :: S2
#53 := f7
#54 := (f6 f7)
#55 := (f3 #54 0::int)
#56 := (f5 #55)
#58 := (= #56 #57)
#840 := (= #55 0::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#845 := (pattern #10)
#83 := -1::int
#87 := (* -1::int #9)
#84 := (* -1::int #8)
#90 := (div #84 #87)
#347 := (* -1::int #90)
#348 := (+ #10 #347)
#349 := (= #348 0::int)
#21 := (div #8 #9)
#344 := (* -1::int #21)
#345 := (+ #10 #344)
#346 := (= #345 0::int)
#109 := (<= #9 0::int)
#105 := (<= #8 0::int)
#302 := (or #105 #109)
#303 := (not #302)
#116 := (>= #8 0::int)
#285 := (or #109 #116)
#286 := (not #285)
#309 := (or #286 #303)
#350 := (ite #309 #346 #349)
#343 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#351 := (ite #14 #343 #350)
#846 := (forall (vars (?v0 int) (?v1 int)) (:pat #845) #351)
#354 := (forall (vars (?v0 int) (?v1 int)) #351)
#849 := (iff #354 #846)
#847 := (iff #351 #351)
#848 := [refl]: #847
#850 := [quant-intro #848]: #849
#314 := (ite #309 #21 #90)
#317 := (ite #14 0::int #314)
#320 := (= #10 #317)
#323 := (forall (vars (?v0 int) (?v1 int)) #320)
#355 := (iff #323 #354)
#352 := (iff #320 #351)
#353 := [rewrite]: #352
#356 := [quant-intro #353]: #355
#117 := (not #116)
#110 := (not #109)
#120 := (and #110 #117)
#106 := (not #105)
#113 := (and #106 #110)
#123 := (or #113 #120)
#126 := (ite #123 #21 #90)
#129 := (ite #14 0::int #126)
#132 := (= #10 #129)
#135 := (forall (vars (?v0 int) (?v1 int)) #132)
#324 := (iff #135 #323)
#321 := (iff #132 #320)
#318 := (= #129 #317)
#315 := (= #126 #314)
#312 := (iff #123 #309)
#306 := (or #303 #286)
#310 := (iff #306 #309)
#311 := [rewrite]: #310
#307 := (iff #123 #306)
#304 := (iff #120 #286)
#305 := [rewrite]: #304
#283 := (iff #113 #303)
#284 := [rewrite]: #283
#308 := [monotonicity #284 #305]: #307
#313 := [trans #308 #311]: #312
#316 := [monotonicity #313]: #315
#319 := [monotonicity #316]: #318
#322 := [monotonicity #319]: #321
#325 := [quant-intro #322]: #324
#289 := (~ #135 #135)
#287 := (~ #132 #132)
#288 := [refl]: #287
#290 := [nnf-pos #288]: #289
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#138 := (iff #28 #135)
#77 := (and #16 #18)
#80 := (or #17 #77)
#93 := (ite #80 #21 #90)
#96 := (ite #14 0::int #93)
#99 := (= #10 #96)
#102 := (forall (vars (?v0 int) (?v1 int)) #99)
#136 := (iff #102 #135)
#133 := (iff #99 #132)
#130 := (= #96 #129)
#127 := (= #93 #126)
#124 := (iff #80 #123)
#121 := (iff #77 #120)
#118 := (iff #18 #117)
#119 := [rewrite]: #118
#111 := (iff #16 #110)
#112 := [rewrite]: #111
#122 := [monotonicity #112 #119]: #121
#114 := (iff #17 #113)
#107 := (iff #15 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#125 := [monotonicity #115 #122]: #124
#128 := [monotonicity #125]: #127
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#137 := [quant-intro #134]: #136
#103 := (iff #28 #102)
#100 := (iff #27 #99)
#97 := (= #26 #96)
#94 := (= #25 #93)
#91 := (= #24 #90)
#88 := (= #23 #87)
#89 := [rewrite]: #88
#85 := (= #22 #84)
#86 := [rewrite]: #85
#92 := [monotonicity #86 #89]: #91
#81 := (iff #20 #80)
#78 := (iff #19 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#95 := [monotonicity #82 #92]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#104 := [quant-intro #101]: #103
#139 := [trans #104 #137]: #138
#76 := [asserted]: #28
#140 := [mp #76 #139]: #135
#274 := [mp~ #140 #290]: #135
#326 := [mp #274 #325]: #323
#357 := [mp #326 #356]: #354
#851 := [mp #357 #850]: #846
#788 := (not #846)
#794 := (or #788 #840)
#431 := (* -1::int 0::int)
#516 := (* -1::int #54)
#517 := (div #516 #431)
#518 := (* -1::int #517)
#509 := (+ #55 #518)
#520 := (= #509 0::int)
#521 := (div #54 0::int)
#449 := (* -1::int #521)
#522 := (+ #55 #449)
#519 := (= #522 0::int)
#523 := (<= 0::int 0::int)
#502 := (<= #54 0::int)
#837 := (or #502 #523)
#839 := (not #837)
#496 := (>= #54 0::int)
#626 := (or #523 #496)
#833 := (not #626)
#507 := (or #833 #839)
#508 := (ite #507 #519 #520)
#841 := (= 0::int 0::int)
#842 := (= #54 0::int)
#843 := (or #842 #841)
#838 := (ite #843 #840 #508)
#795 := (or #788 #838)
#796 := (iff #795 #794)
#627 := (iff #794 #794)
#628 := [rewrite]: #627
#793 := (iff #838 #840)
#529 := (div #516 0::int)
#809 := (* -1::int #529)
#810 := (+ #55 #809)
#800 := (= #810 0::int)
#1 := true
#647 := (ite true #840 #800)
#791 := (iff #647 #840)
#792 := [rewrite]: #791
#648 := (iff #838 #647)
#805 := (iff #508 #800)
#797 := (ite false #519 #800)
#804 := (iff #797 #800)
#799 := [rewrite]: #804
#798 := (iff #508 #797)
#801 := (iff #520 #800)
#807 := (= #509 #810)
#524 := (= #518 #809)
#530 := (= #517 #529)
#527 := (= #431 0::int)
#528 := [rewrite]: #527
#808 := [monotonicity #528]: #530
#806 := [monotonicity #808]: #524
#811 := [monotonicity #806]: #807
#802 := [monotonicity #811]: #801
#813 := (iff #507 false)
#815 := (or false false)
#812 := (iff #815 false)
#816 := [rewrite]: #812
#537 := (iff #507 #815)
#437 := (iff #839 false)
#821 := (not true)
#828 := (iff #821 false)
#830 := [rewrite]: #828
#543 := (iff #839 #821)
#541 := (iff #837 true)
#831 := (or #502 true)
#818 := (iff #831 true)
#819 := [rewrite]: #818
#829 := (iff #837 #831)
#483 := (iff #523 true)
#484 := [rewrite]: #483
#832 := [monotonicity #484]: #829
#542 := [trans #832 #819]: #541
#544 := [monotonicity #542]: #543
#814 := [trans #544 #830]: #437
#470 := (iff #833 false)
#827 := (iff #833 #821)
#825 := (iff #626 true)
#485 := (or true #496)
#823 := (iff #485 true)
#824 := [rewrite]: #823
#486 := (iff #626 #485)
#822 := [monotonicity #484]: #486
#826 := [trans #822 #824]: #825
#465 := [monotonicity #826]: #827
#471 := [trans #465 #830]: #470
#538 := [monotonicity #471 #814]: #537
#817 := [trans #538 #816]: #813
#803 := [monotonicity #817 #802]: #798
#646 := [trans #803 #799]: #805
#479 := (iff #843 true)
#494 := (or #842 true)
#495 := (iff #494 true)
#836 := [rewrite]: #495
#499 := (iff #843 #494)
#844 := (iff #841 true)
#834 := [rewrite]: #844
#835 := [monotonicity #834]: #499
#820 := [trans #835 #836]: #479
#790 := [monotonicity #820 #646]: #648
#787 := [trans #790 #792]: #793
#625 := [monotonicity #787]: #796
#781 := [trans #625 #628]: #796
#789 := [quant-inst]: #795
#782 := [mp #789 #781]: #794
#737 := [unit-resolution #782 #851]: #840
#738 := [monotonicity #737]: #58
#59 := (not #58)
#271 := [asserted]: #59
[unit-resolution #271 #738]: false
unsat
548d39bc73378ffff45c17ea9af834838e4f2aed 274 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#55 := (f5 0::int)
decl f4 :: (-> int int int)
#53 := (f4 0::int 0::int)
#54 := (f5 #53)
#56 := (= #54 #55)
#831 := (= #53 0::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#850 := (pattern #29)
#81 := -1::int
#85 := (* -1::int #9)
#82 := (* -1::int #8)
#140 := (mod #82 #85)
#361 := (+ #29 #140)
#362 := (= #361 0::int)
#30 := (mod #8 #9)
#358 := (* -1::int #30)
#359 := (+ #29 #358)
#360 := (= #359 0::int)
#107 := (<= #9 0::int)
#103 := (<= #8 0::int)
#300 := (or #103 #107)
#301 := (not #300)
#114 := (>= #8 0::int)
#283 := (or #107 #114)
#284 := (not #283)
#307 := (or #284 #301)
#363 := (ite #307 #360 #362)
#357 := (= #29 0::int)
#12 := (= #8 0::int)
#364 := (ite #12 #357 #363)
#356 := (= #8 #29)
#13 := (= #9 0::int)
#365 := (ite #13 #356 #364)
#851 := (forall (vars (?v0 int) (?v1 int)) (:pat #850) #365)
#368 := (forall (vars (?v0 int) (?v1 int)) #365)
#854 := (iff #368 #851)
#852 := (iff #365 #365)
#853 := [refl]: #852
#855 := [quant-intro #853]: #854
#146 := (* -1::int #140)
#325 := (ite #307 #30 #146)
#328 := (ite #12 0::int #325)
#331 := (ite #13 #8 #328)
#334 := (= #29 #331)
#337 := (forall (vars (?v0 int) (?v1 int)) #334)
#369 := (iff #337 #368)
#366 := (iff #334 #365)
#367 := [rewrite]: #366
#370 := [quant-intro #367]: #369
#115 := (not #114)
#108 := (not #107)
#118 := (and #108 #115)
#104 := (not #103)
#111 := (and #104 #108)
#121 := (or #111 #118)
#166 := (ite #121 #30 #146)
#169 := (ite #12 0::int #166)
#172 := (ite #13 #8 #169)
#175 := (= #29 #172)
#178 := (forall (vars (?v0 int) (?v1 int)) #175)
#338 := (iff #178 #337)
#335 := (iff #175 #334)
#332 := (= #172 #331)
#329 := (= #169 #328)
#326 := (= #166 #325)
#310 := (iff #121 #307)
#304 := (or #301 #284)
#308 := (iff #304 #307)
#309 := [rewrite]: #308
#305 := (iff #121 #304)
#302 := (iff #118 #284)
#303 := [rewrite]: #302
#281 := (iff #111 #301)
#282 := [rewrite]: #281
#306 := [monotonicity #282 #303]: #305
#311 := [trans #306 #309]: #310
#327 := [monotonicity #311]: #326
#330 := [monotonicity #327]: #329
#333 := [monotonicity #330]: #332
#336 := [monotonicity #333]: #335
#339 := [quant-intro #336]: #338
#273 := (~ #178 #178)
#270 := (~ #175 #175)
#289 := [refl]: #270
#274 := [nnf-pos #289]: #273
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#181 := (iff #37 #178)
#75 := (and #16 #18)
#78 := (or #17 #75)
#151 := (ite #78 #30 #146)
#154 := (ite #12 0::int #151)
#157 := (ite #13 #8 #154)
#160 := (= #29 #157)
#163 := (forall (vars (?v0 int) (?v1 int)) #160)
#179 := (iff #163 #178)
#176 := (iff #160 #175)
#173 := (= #157 #172)
#170 := (= #154 #169)
#167 := (= #151 #166)
#122 := (iff #78 #121)
#119 := (iff #75 #118)
#116 := (iff #18 #115)
#117 := [rewrite]: #116
#109 := (iff #16 #108)
#110 := [rewrite]: #109
#120 := [monotonicity #110 #117]: #119
#112 := (iff #17 #111)
#105 := (iff #15 #104)
#106 := [rewrite]: #105
#113 := [monotonicity #106 #110]: #112
#123 := [monotonicity #113 #120]: #122
#168 := [monotonicity #123]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [quant-intro #177]: #179
#164 := (iff #37 #163)
#161 := (iff #36 #160)
#158 := (= #35 #157)
#155 := (= #34 #154)
#152 := (= #33 #151)
#149 := (= #32 #146)
#143 := (- #140)
#147 := (= #143 #146)
#148 := [rewrite]: #147
#144 := (= #32 #143)
#141 := (= #31 #140)
#86 := (= #23 #85)
#87 := [rewrite]: #86
#83 := (= #22 #82)
#84 := [rewrite]: #83
#142 := [monotonicity #84 #87]: #141
#145 := [monotonicity #142]: #144
#150 := [trans #145 #148]: #149
#79 := (iff #20 #78)
#76 := (iff #19 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#153 := [monotonicity #80 #150]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#182 := [trans #165 #180]: #181
#139 := [asserted]: #37
#183 := [mp #139 #182]: #178
#290 := [mp~ #183 #274]: #178
#340 := [mp #290 #339]: #337
#371 := [mp #340 #370]: #368
#856 := [mp #371 #855]: #851
#646 := (not #851)
#788 := (or #646 #831)
#429 := (* -1::int 0::int)
#514 := (mod #429 #429)
#515 := (+ #53 #514)
#516 := (= #515 0::int)
#507 := (mod 0::int 0::int)
#518 := (* -1::int #507)
#519 := (+ #53 #518)
#447 := (= #519 0::int)
#520 := (<= 0::int 0::int)
#517 := (or #520 #520)
#521 := (not #517)
#500 := (>= 0::int 0::int)
#835 := (or #520 #500)
#837 := (not #835)
#494 := (or #837 #521)
#624 := (ite #494 #447 #516)
#505 := (= 0::int 0::int)
#506 := (ite #505 #831 #624)
#838 := (= 0::int #53)
#839 := (ite #505 #838 #506)
#789 := (or #646 #839)
#791 := (iff #789 #788)
#786 := (iff #788 #788)
#792 := [rewrite]: #786
#644 := (iff #839 #831)
#1 := true
#796 := (ite true #831 #831)
#797 := (iff #796 #831)
#803 := [rewrite]: #797
#801 := (iff #839 #796)
#800 := (iff #506 #831)
#536 := (+ #53 #507)
#811 := (= #536 0::int)
#808 := (ite true #831 #811)
#798 := (iff #808 #831)
#799 := [rewrite]: #798
#805 := (iff #506 #808)
#522 := (iff #624 #811)
#526 := (ite false #447 #811)
#806 := (iff #526 #811)
#807 := [rewrite]: #806
#527 := (iff #624 #526)
#815 := (iff #516 #811)
#810 := (= #515 #536)
#813 := (= #514 #507)
#435 := (= #429 0::int)
#812 := [rewrite]: #435
#535 := [monotonicity #812 #812]: #813
#814 := [monotonicity #535]: #810
#525 := [monotonicity #814]: #815
#541 := (iff #494 false)
#830 := (or false false)
#539 := (iff #830 false)
#540 := [rewrite]: #539
#816 := (iff #494 #830)
#829 := (iff #521 false)
#484 := (not true)
#822 := (iff #484 false)
#823 := [rewrite]: #822
#468 := (iff #521 #484)
#826 := (iff #517 true)
#493 := (or true true)
#818 := (iff #493 true)
#481 := [rewrite]: #818
#825 := (iff #517 #493)
#832 := (iff #520 true)
#492 := [rewrite]: #832
#463 := [monotonicity #492 #492]: #825
#828 := [trans #463 #481]: #826
#469 := [monotonicity #828]: #468
#827 := [trans #469 #823]: #829
#824 := (iff #837 false)
#820 := (iff #837 #484)
#482 := (iff #835 true)
#834 := (iff #835 #493)
#497 := (iff #500 true)
#833 := [rewrite]: #497
#477 := [monotonicity #492 #833]: #834
#483 := [trans #477 #481]: #482
#821 := [monotonicity #483]: #820
#819 := [trans #821 #823]: #824
#817 := [monotonicity #819 #827]: #816
#542 := [trans #817 #540]: #541
#528 := [monotonicity #542 #525]: #527
#804 := [trans #528 #807]: #522
#840 := (iff #505 true)
#841 := [rewrite]: #840
#809 := [monotonicity #841 #804]: #805
#795 := [trans #809 #799]: #800
#836 := (iff #838 #831)
#842 := [rewrite]: #836
#802 := [monotonicity #841 #842 #795]: #801
#645 := [trans #802 #803]: #644
#785 := [monotonicity #645]: #791
#793 := [trans #785 #792]: #791
#790 := [quant-inst]: #789
#787 := [mp #790 #793]: #788
#741 := [unit-resolution #787 #856]: #831
#742 := [monotonicity #741]: #56
#57 := (not #56)
#269 := [asserted]: #57
[unit-resolution #269 #742]: false
unsat
426e56a2fa6cae689a233b52c380ff3e1f4c5d0f 287 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#56 := (f5 0::int)
decl f3 :: (-> int int int)
#53 := 1::int
#54 := (f3 0::int 1::int)
#55 := (f5 #54)
#57 := (= #55 #56)
#839 := (= #54 0::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#843 := (pattern #10)
#82 := -1::int
#86 := (* -1::int #9)
#83 := (* -1::int #8)
#89 := (div #83 #86)
#346 := (* -1::int #89)
#347 := (+ #10 #346)
#348 := (= #347 0::int)
#21 := (div #8 #9)
#343 := (* -1::int #21)
#344 := (+ #10 #343)
#345 := (= #344 0::int)
#108 := (<= #9 0::int)
#104 := (<= #8 0::int)
#301 := (or #104 #108)
#302 := (not #301)
#115 := (>= #8 0::int)
#284 := (or #108 #115)
#285 := (not #284)
#308 := (or #285 #302)
#349 := (ite #308 #345 #348)
#342 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#350 := (ite #14 #342 #349)
#844 := (forall (vars (?v0 int) (?v1 int)) (:pat #843) #350)
#353 := (forall (vars (?v0 int) (?v1 int)) #350)
#847 := (iff #353 #844)
#845 := (iff #350 #350)
#846 := [refl]: #845
#848 := [quant-intro #846]: #847
#313 := (ite #308 #21 #89)
#316 := (ite #14 0::int #313)
#319 := (= #10 #316)
#322 := (forall (vars (?v0 int) (?v1 int)) #319)
#354 := (iff #322 #353)
#351 := (iff #319 #350)
#352 := [rewrite]: #351
#355 := [quant-intro #352]: #354
#116 := (not #115)
#109 := (not #108)
#119 := (and #109 #116)
#105 := (not #104)
#112 := (and #105 #109)
#122 := (or #112 #119)
#125 := (ite #122 #21 #89)
#128 := (ite #14 0::int #125)
#131 := (= #10 #128)
#134 := (forall (vars (?v0 int) (?v1 int)) #131)
#323 := (iff #134 #322)
#320 := (iff #131 #319)
#317 := (= #128 #316)
#314 := (= #125 #313)
#311 := (iff #122 #308)
#305 := (or #302 #285)
#309 := (iff #305 #308)
#310 := [rewrite]: #309
#306 := (iff #122 #305)
#303 := (iff #119 #285)
#304 := [rewrite]: #303
#282 := (iff #112 #302)
#283 := [rewrite]: #282
#307 := [monotonicity #283 #304]: #306
#312 := [trans #307 #310]: #311
#315 := [monotonicity #312]: #314
#318 := [monotonicity #315]: #317
#321 := [monotonicity #318]: #320
#324 := [quant-intro #321]: #323
#288 := (~ #134 #134)
#286 := (~ #131 #131)
#287 := [refl]: #286
#289 := [nnf-pos #287]: #288
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#137 := (iff #28 #134)
#76 := (and #16 #18)
#79 := (or #17 #76)
#92 := (ite #79 #21 #89)
#95 := (ite #14 0::int #92)
#98 := (= #10 #95)
#101 := (forall (vars (?v0 int) (?v1 int)) #98)
#135 := (iff #101 #134)
#132 := (iff #98 #131)
#129 := (= #95 #128)
#126 := (= #92 #125)
#123 := (iff #79 #122)
#120 := (iff #76 #119)
#117 := (iff #18 #116)
#118 := [rewrite]: #117
#110 := (iff #16 #109)
#111 := [rewrite]: #110
#121 := [monotonicity #111 #118]: #120
#113 := (iff #17 #112)
#106 := (iff #15 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#124 := [monotonicity #114 #121]: #123
#127 := [monotonicity #124]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#136 := [quant-intro #133]: #135
#102 := (iff #28 #101)
#99 := (iff #27 #98)
#96 := (= #26 #95)
#93 := (= #25 #92)
#90 := (= #24 #89)
#87 := (= #23 #86)
#88 := [rewrite]: #87
#84 := (= #22 #83)
#85 := [rewrite]: #84
#91 := [monotonicity #85 #88]: #90
#80 := (iff #20 #79)
#77 := (iff #19 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#94 := [monotonicity #81 #91]: #93
#97 := [monotonicity #94]: #96
#100 := [monotonicity #97]: #99
#103 := [quant-intro #100]: #102
#138 := [trans #103 #136]: #137
#75 := [asserted]: #28
#139 := [mp #75 #138]: #134
#273 := [mp~ #139 #289]: #134
#325 := [mp #273 #324]: #322
#356 := [mp #325 #355]: #353
#849 := [mp #356 #848]: #844
#679 := (not #844)
#672 := (or #679 #839)
#430 := (* -1::int 1::int)
#514 := (* -1::int 0::int)
#515 := (div #514 #430)
#516 := (* -1::int #515)
#507 := (+ #54 #516)
#518 := (= #507 0::int)
#519 := (div 0::int 1::int)
#520 := (* -1::int #519)
#517 := (+ #54 #520)
#521 := (= #517 0::int)
#500 := (<= 1::int 0::int)
#835 := (<= 0::int 0::int)
#837 := (or #835 #500)
#494 := (not #837)
#624 := (>= 0::int 0::int)
#831 := (or #500 #624)
#505 := (not #831)
#506 := (or #505 #494)
#838 := (ite #506 #521 #518)
#840 := (= 1::int 0::int)
#841 := (= 0::int 0::int)
#836 := (or #841 #840)
#842 := (ite #836 #839 #838)
#680 := (or #679 #842)
#682 := (iff #680 #672)
#684 := (iff #672 #672)
#777 := [rewrite]: #684
#676 := (iff #842 #839)
#1 := true
#677 := (ite true #839 #839)
#776 := (iff #677 #839)
#661 := [rewrite]: #776
#772 := (iff #842 #677)
#627 := (iff #838 #839)
#781 := (ite false #839 #839)
#667 := (iff #781 #839)
#668 := [rewrite]: #667
#784 := (iff #838 #781)
#782 := (iff #518 #839)
#779 := (= #507 #54)
#799 := (+ #54 0::int)
#796 := (= #799 #54)
#801 := [rewrite]: #796
#625 := (= #507 #799)
#794 := (= #516 0::int)
#808 := (= #514 0::int)
#805 := [rewrite]: #808
#793 := (= #516 #514)
#786 := (= #515 0::int)
#788 := (div 0::int -1::int)
#791 := (= #788 0::int)
#785 := [rewrite]: #791
#789 := (= #515 #788)
#645 := (= #430 -1::int)
#646 := [rewrite]: #645
#790 := [monotonicity #805 #646]: #789
#792 := [trans #790 #785]: #786
#787 := [monotonicity #792]: #793
#623 := [trans #787 #805]: #794
#626 := [monotonicity #623]: #625
#780 := [trans #626 #801]: #779
#783 := [monotonicity #780]: #782
#803 := (iff #521 #839)
#802 := (= #517 #54)
#800 := (= #517 #799)
#809 := (= #520 0::int)
#522 := (= #520 #514)
#806 := (= #519 0::int)
#807 := [rewrite]: #806
#804 := [monotonicity #807]: #522
#798 := [trans #804 #805]: #809
#795 := [monotonicity #798]: #800
#797 := [trans #795 #801]: #802
#644 := [monotonicity #797]: #803
#527 := (iff #506 false)
#814 := (or false false)
#525 := (iff #814 false)
#526 := [rewrite]: #525
#811 := (iff #506 #814)
#536 := (iff #494 false)
#468 := (not true)
#827 := (iff #468 false)
#830 := [rewrite]: #827
#813 := (iff #494 #468)
#436 := (iff #837 true)
#493 := (or true false)
#818 := (iff #493 true)
#481 := [rewrite]: #818
#541 := (iff #837 #493)
#484 := (iff #500 false)
#820 := [rewrite]: #484
#539 := (iff #835 true)
#540 := [rewrite]: #539
#542 := [monotonicity #540 #820]: #541
#812 := [trans #542 #481]: #436
#535 := [monotonicity #812]: #813
#810 := [trans #535 #830]: #536
#816 := (iff #505 false)
#469 := (iff #505 #468)
#826 := (iff #831 true)
#823 := (or false true)
#825 := (iff #823 true)
#463 := [rewrite]: #825
#824 := (iff #831 #823)
#821 := (iff #624 true)
#822 := [rewrite]: #821
#819 := [monotonicity #820 #822]: #824
#828 := [trans #819 #463]: #826
#829 := [monotonicity #828]: #469
#817 := [trans #829 #830]: #816
#815 := [monotonicity #817 #810]: #811
#528 := [trans #815 #526]: #527
#666 := [monotonicity #528 #644 #783]: #784
#775 := [trans #666 #668]: #627
#482 := (iff #836 true)
#834 := (iff #836 #493)
#497 := (iff #840 false)
#833 := [rewrite]: #497
#832 := (iff #841 true)
#492 := [rewrite]: #832
#477 := [monotonicity #492 #833]: #834
#483 := [trans #477 #481]: #482
#773 := [monotonicity #483 #775]: #772
#678 := [trans #773 #661]: #676
#683 := [monotonicity #678]: #682
#774 := [trans #683 #777]: #682
#681 := [quant-inst]: #680
#778 := [mp #681 #774]: #672
#690 := [unit-resolution #778 #849]: #839
#691 := [monotonicity #690]: #57
#58 := (not #57)
#270 := [asserted]: #58
[unit-resolution #270 #691]: false
unsat
2a856348a2d0d12d43659d3f8fbd60f2f395959a 321 0
#2 := false
decl f5 :: (-> int S2)
decl f4 :: (-> int int int)
#11 := 0::int
decl f6 :: (-> S2 int)
decl f7 :: S2
#53 := f7
#54 := (f6 f7)
#55 := (f4 #54 0::int)
#56 := (f5 #55)
#271 := (= f7 #56)
#795 := (f5 #54)
#772 := (= #795 #56)
#771 := (= #56 #795)
#768 := (= #55 #54)
#848 := (= #54 #55)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#858 := (pattern #29)
#82 := -1::int
#86 := (* -1::int #9)
#83 := (* -1::int #8)
#141 := (mod #83 #86)
#369 := (+ #29 #141)
#370 := (= #369 0::int)
#30 := (mod #8 #9)
#366 := (* -1::int #30)
#367 := (+ #29 #366)
#368 := (= #367 0::int)
#108 := (<= #9 0::int)
#104 := (<= #8 0::int)
#308 := (or #104 #108)
#309 := (not #308)
#115 := (>= #8 0::int)
#291 := (or #108 #115)
#292 := (not #291)
#315 := (or #292 #309)
#371 := (ite #315 #368 #370)
#365 := (= #29 0::int)
#12 := (= #8 0::int)
#372 := (ite #12 #365 #371)
#364 := (= #8 #29)
#13 := (= #9 0::int)
#373 := (ite #13 #364 #372)
#859 := (forall (vars (?v0 int) (?v1 int)) (:pat #858) #373)
#376 := (forall (vars (?v0 int) (?v1 int)) #373)
#862 := (iff #376 #859)
#860 := (iff #373 #373)
#861 := [refl]: #860
#863 := [quant-intro #861]: #862
#147 := (* -1::int #141)
#333 := (ite #315 #30 #147)
#336 := (ite #12 0::int #333)
#339 := (ite #13 #8 #336)
#342 := (= #29 #339)
#345 := (forall (vars (?v0 int) (?v1 int)) #342)
#377 := (iff #345 #376)
#374 := (iff #342 #373)
#375 := [rewrite]: #374
#378 := [quant-intro #375]: #377
#116 := (not #115)
#109 := (not #108)
#119 := (and #109 #116)
#105 := (not #104)
#112 := (and #105 #109)
#122 := (or #112 #119)
#167 := (ite #122 #30 #147)
#170 := (ite #12 0::int #167)
#173 := (ite #13 #8 #170)
#176 := (= #29 #173)
#179 := (forall (vars (?v0 int) (?v1 int)) #176)
#346 := (iff #179 #345)
#343 := (iff #176 #342)
#340 := (= #173 #339)
#337 := (= #170 #336)
#334 := (= #167 #333)
#318 := (iff #122 #315)
#312 := (or #309 #292)
#316 := (iff #312 #315)
#317 := [rewrite]: #316
#313 := (iff #122 #312)
#310 := (iff #119 #292)
#311 := [rewrite]: #310
#289 := (iff #112 #309)
#290 := [rewrite]: #289
#314 := [monotonicity #290 #311]: #313
#319 := [trans #314 #317]: #318
#335 := [monotonicity #319]: #334
#338 := [monotonicity #335]: #337
#341 := [monotonicity #338]: #340
#344 := [monotonicity #341]: #343
#347 := [quant-intro #344]: #346
#281 := (~ #179 #179)
#277 := (~ #176 #176)
#297 := [refl]: #277
#282 := [nnf-pos #297]: #281
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#182 := (iff #37 #179)
#76 := (and #16 #18)
#79 := (or #17 #76)
#152 := (ite #79 #30 #147)
#155 := (ite #12 0::int #152)
#158 := (ite #13 #8 #155)
#161 := (= #29 #158)
#164 := (forall (vars (?v0 int) (?v1 int)) #161)
#180 := (iff #164 #179)
#177 := (iff #161 #176)
#174 := (= #158 #173)
#171 := (= #155 #170)
#168 := (= #152 #167)
#123 := (iff #79 #122)
#120 := (iff #76 #119)
#117 := (iff #18 #116)
#118 := [rewrite]: #117
#110 := (iff #16 #109)
#111 := [rewrite]: #110
#121 := [monotonicity #111 #118]: #120
#113 := (iff #17 #112)
#106 := (iff #15 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#124 := [monotonicity #114 #121]: #123
#169 := [monotonicity #124]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [quant-intro #178]: #180
#165 := (iff #37 #164)
#162 := (iff #36 #161)
#159 := (= #35 #158)
#156 := (= #34 #155)
#153 := (= #33 #152)
#150 := (= #32 #147)
#144 := (- #141)
#148 := (= #144 #147)
#149 := [rewrite]: #148
#145 := (= #32 #144)
#142 := (= #31 #141)
#87 := (= #23 #86)
#88 := [rewrite]: #87
#84 := (= #22 #83)
#85 := [rewrite]: #84
#143 := [monotonicity #85 #88]: #142
#146 := [monotonicity #143]: #145
#151 := [trans #146 #149]: #150
#80 := (iff #20 #79)
#77 := (iff #19 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#154 := [monotonicity #81 #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#183 := [trans #166 #181]: #182
#140 := [asserted]: #37
#184 := [mp #140 #183]: #179
#298 := [mp~ #184 #282]: #179
#348 := [mp #298 #347]: #345
#379 := [mp #348 #378]: #376
#864 := [mp #379 #863]: #859
#653 := (not #859)
#654 := (or #653 #848)
#437 := (* -1::int 0::int)
#522 := (* -1::int #54)
#523 := (mod #522 #437)
#524 := (+ #55 #523)
#515 := (= #524 0::int)
#526 := (mod #54 0::int)
#527 := (* -1::int #526)
#455 := (+ #55 #527)
#528 := (= #455 0::int)
#525 := (<= 0::int 0::int)
#529 := (<= #54 0::int)
#508 := (or #529 #525)
#843 := (not #508)
#845 := (>= #54 0::int)
#502 := (or #525 #845)
#632 := (not #502)
#839 := (or #632 #843)
#513 := (ite #839 #528 #515)
#514 := (= #55 0::int)
#846 := (= #54 0::int)
#847 := (ite #846 #514 #513)
#849 := (= 0::int 0::int)
#844 := (ite #849 #848 #847)
#796 := (or #653 #844)
#798 := (iff #796 #654)
#793 := (iff #654 #654)
#794 := [rewrite]: #793
#811 := (iff #844 #848)
#544 := (mod #522 0::int)
#819 := (+ #55 #544)
#534 := (= #819 0::int)
#806 := (ite #846 #514 #534)
#1 := true
#803 := (ite true #848 #806)
#810 := (iff #803 #848)
#805 := [rewrite]: #810
#804 := (iff #844 #803)
#807 := (iff #847 #806)
#813 := (iff #513 #534)
#814 := (ite false #528 #534)
#812 := (iff #814 #534)
#816 := [rewrite]: #812
#815 := (iff #513 #814)
#535 := (iff #515 #534)
#823 := (= #524 #819)
#818 := (= #523 #544)
#821 := (= #437 0::int)
#543 := [rewrite]: #821
#822 := [monotonicity #543]: #818
#533 := [monotonicity #822]: #823
#536 := [monotonicity #533]: #535
#443 := (iff #839 false)
#825 := (or false false)
#549 := (iff #825 false)
#550 := [rewrite]: #549
#547 := (iff #839 #825)
#838 := (iff #843 false)
#491 := (not true)
#829 := (iff #491 false)
#830 := [rewrite]: #829
#837 := (iff #843 #491)
#476 := (iff #508 true)
#827 := (or #529 true)
#834 := (iff #827 true)
#836 := [rewrite]: #834
#833 := (iff #508 #827)
#500 := (iff #525 true)
#505 := [rewrite]: #500
#471 := [monotonicity #505]: #833
#477 := [trans #471 #836]: #476
#835 := [monotonicity #477]: #837
#824 := [trans #835 #830]: #838
#831 := (iff #632 false)
#492 := (iff #632 #491)
#489 := (iff #502 true)
#841 := (or true #845)
#485 := (iff #841 true)
#826 := [rewrite]: #485
#501 := (iff #502 #841)
#842 := [monotonicity #505]: #501
#490 := [trans #842 #826]: #489
#828 := [monotonicity #490]: #492
#832 := [trans #828 #830]: #831
#548 := [monotonicity #832 #824]: #547
#820 := [trans #548 #550]: #443
#530 := [monotonicity #820 #536]: #815
#817 := [trans #530 #816]: #813
#808 := [monotonicity #817]: #807
#850 := (iff #849 true)
#840 := [rewrite]: #850
#809 := [monotonicity #840 #808]: #804
#652 := [trans #809 #805]: #811
#799 := [monotonicity #652]: #798
#800 := [trans #799 #794]: #798
#797 := [quant-inst]: #796
#801 := [mp #797 #800]: #654
#779 := [unit-resolution #801 #864]: #848
#769 := [symm #779]: #768
#765 := [monotonicity #769]: #771
#756 := [symm #765]: #772
#802 := (= f7 #795)
#38 := (:var 0 S2)
#39 := (f6 #38)
#865 := (pattern #39)
#40 := (f5 #39)
#186 := (= #38 #40)
#866 := (forall (vars (?v0 S2)) (:pat #865) #186)
#189 := (forall (vars (?v0 S2)) #186)
#867 := (iff #189 #866)
#869 := (iff #866 #866)
#870 := [rewrite]: #869
#868 := [rewrite]: #867
#871 := [trans #868 #870]: #867
#283 := (~ #189 #189)
#299 := (~ #186 #186)
#300 := [refl]: #299
#284 := [nnf-pos #300]: #283
#41 := (= #40 #38)
#42 := (forall (vars (?v0 S2)) #41)
#190 := (iff #42 #189)
#187 := (iff #41 #186)
#188 := [rewrite]: #187
#191 := [quant-intro #188]: #190
#185 := [asserted]: #42
#194 := [mp #185 #191]: #189
#301 := [mp~ #194 #284]: #189
#872 := [mp #301 #871]: #866
#634 := (not #866)
#787 := (or #634 #802)
#788 := [quant-inst]: #787
#770 := [unit-resolution #788 #872]: #802
#757 := [trans #770 #756]: #271
#274 := (not #271)
#57 := (= #56 f7)
#58 := (not #57)
#275 := (iff #58 #274)
#272 := (iff #57 #271)
#273 := [rewrite]: #272
#276 := [monotonicity #273]: #275
#270 := [asserted]: #58
#279 := [mp #270 #276]: #274
[unit-resolution #279 #757]: false
unsat
f595f2976198bb59087cfc3afdc24567f743886b 287 0
#2 := false
decl f5 :: (-> int S2)
#53 := 1::int
#56 := (f5 1::int)
decl f3 :: (-> int int int)
#54 := (f3 1::int 1::int)
#55 := (f5 #54)
#57 := (= #55 #56)
#801 := (= #54 1::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#843 := (pattern #10)
#11 := 0::int
#82 := -1::int
#86 := (* -1::int #9)
#83 := (* -1::int #8)
#89 := (div #83 #86)
#346 := (* -1::int #89)
#347 := (+ #10 #346)
#348 := (= #347 0::int)
#21 := (div #8 #9)
#343 := (* -1::int #21)
#344 := (+ #10 #343)
#345 := (= #344 0::int)
#108 := (<= #9 0::int)
#104 := (<= #8 0::int)
#301 := (or #104 #108)
#302 := (not #301)
#115 := (>= #8 0::int)
#284 := (or #108 #115)
#285 := (not #284)
#308 := (or #285 #302)
#349 := (ite #308 #345 #348)
#342 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#350 := (ite #14 #342 #349)
#844 := (forall (vars (?v0 int) (?v1 int)) (:pat #843) #350)
#353 := (forall (vars (?v0 int) (?v1 int)) #350)
#847 := (iff #353 #844)
#845 := (iff #350 #350)
#846 := [refl]: #845
#848 := [quant-intro #846]: #847
#313 := (ite #308 #21 #89)
#316 := (ite #14 0::int #313)
#319 := (= #10 #316)
#322 := (forall (vars (?v0 int) (?v1 int)) #319)
#354 := (iff #322 #353)
#351 := (iff #319 #350)
#352 := [rewrite]: #351
#355 := [quant-intro #352]: #354
#116 := (not #115)
#109 := (not #108)
#119 := (and #109 #116)
#105 := (not #104)
#112 := (and #105 #109)
#122 := (or #112 #119)
#125 := (ite #122 #21 #89)
#128 := (ite #14 0::int #125)
#131 := (= #10 #128)
#134 := (forall (vars (?v0 int) (?v1 int)) #131)
#323 := (iff #134 #322)
#320 := (iff #131 #319)
#317 := (= #128 #316)
#314 := (= #125 #313)
#311 := (iff #122 #308)
#305 := (or #302 #285)
#309 := (iff #305 #308)
#310 := [rewrite]: #309
#306 := (iff #122 #305)
#303 := (iff #119 #285)
#304 := [rewrite]: #303
#282 := (iff #112 #302)
#283 := [rewrite]: #282
#307 := [monotonicity #283 #304]: #306
#312 := [trans #307 #310]: #311
#315 := [monotonicity #312]: #314
#318 := [monotonicity #315]: #317
#321 := [monotonicity #318]: #320
#324 := [quant-intro #321]: #323
#288 := (~ #134 #134)
#286 := (~ #131 #131)
#287 := [refl]: #286
#289 := [nnf-pos #287]: #288
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#137 := (iff #28 #134)
#76 := (and #16 #18)
#79 := (or #17 #76)
#92 := (ite #79 #21 #89)
#95 := (ite #14 0::int #92)
#98 := (= #10 #95)
#101 := (forall (vars (?v0 int) (?v1 int)) #98)
#135 := (iff #101 #134)
#132 := (iff #98 #131)
#129 := (= #95 #128)
#126 := (= #92 #125)
#123 := (iff #79 #122)
#120 := (iff #76 #119)
#117 := (iff #18 #116)
#118 := [rewrite]: #117
#110 := (iff #16 #109)
#111 := [rewrite]: #110
#121 := [monotonicity #111 #118]: #120
#113 := (iff #17 #112)
#106 := (iff #15 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#124 := [monotonicity #114 #121]: #123
#127 := [monotonicity #124]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#136 := [quant-intro #133]: #135
#102 := (iff #28 #101)
#99 := (iff #27 #98)
#96 := (= #26 #95)
#93 := (= #25 #92)
#90 := (= #24 #89)
#87 := (= #23 #86)
#88 := [rewrite]: #87
#84 := (= #22 #83)
#85 := [rewrite]: #84
#91 := [monotonicity #85 #88]: #90
#80 := (iff #20 #79)
#77 := (iff #19 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#94 := [monotonicity #81 #91]: #93
#97 := [monotonicity #94]: #96
#100 := [monotonicity #97]: #99
#103 := [quant-intro #100]: #102
#138 := [trans #103 #136]: #137
#75 := [asserted]: #28
#139 := [mp #75 #138]: #134
#273 := [mp~ #139 #289]: #134
#325 := [mp #273 #324]: #322
#356 := [mp #325 #355]: #353
#849 := [mp #356 #848]: #844
#679 := (not #844)
#672 := (or #679 #801)
#430 := (* -1::int 1::int)
#514 := (div #430 #430)
#515 := (* -1::int #514)
#516 := (+ #54 #515)
#507 := (= #516 0::int)
#518 := (div 1::int 1::int)
#519 := (* -1::int #518)
#520 := (+ #54 #519)
#517 := (= #520 0::int)
#521 := (<= 1::int 0::int)
#500 := (or #521 #521)
#835 := (not #500)
#837 := (>= 1::int 0::int)
#494 := (or #521 #837)
#624 := (not #494)
#831 := (or #624 #835)
#505 := (ite #831 #517 #507)
#506 := (= #54 0::int)
#838 := (= 1::int 0::int)
#839 := (or #838 #838)
#840 := (ite #839 #506 #505)
#680 := (or #679 #840)
#682 := (iff #680 #672)
#684 := (iff #672 #672)
#777 := [rewrite]: #684
#676 := (iff #840 #801)
#677 := (ite false #506 #801)
#776 := (iff #677 #801)
#661 := [rewrite]: #776
#772 := (iff #840 #677)
#627 := (iff #505 #801)
#1 := true
#781 := (ite true #801 #801)
#667 := (iff #781 #801)
#668 := [rewrite]: #667
#784 := (iff #505 #781)
#782 := (iff #507 #801)
#808 := (+ -1::int #54)
#800 := (= #808 0::int)
#802 := (iff #800 #801)
#797 := [rewrite]: #802
#779 := (iff #507 #800)
#625 := (= #516 #808)
#807 := (+ #54 -1::int)
#805 := (= #807 #808)
#809 := [rewrite]: #805
#794 := (= #516 #807)
#793 := (= #515 -1::int)
#526 := (= #430 -1::int)
#527 := [rewrite]: #526
#786 := (= #515 #430)
#791 := (= #514 1::int)
#645 := (div -1::int -1::int)
#789 := (= #645 1::int)
#790 := [rewrite]: #789
#646 := (= #514 #645)
#788 := [monotonicity #527 #527]: #646
#785 := [trans #788 #790]: #791
#792 := [monotonicity #785]: #786
#787 := [trans #792 #527]: #793
#623 := [monotonicity #787]: #794
#626 := [trans #623 #809]: #625
#780 := [monotonicity #626]: #779
#783 := [trans #780 #797]: #782
#803 := (iff #517 #801)
#795 := (iff #517 #800)
#798 := (= #520 #808)
#522 := (= #520 #807)
#528 := (= #519 -1::int)
#815 := (= #519 #430)
#814 := (= #518 1::int)
#811 := [rewrite]: #814
#525 := [monotonicity #811]: #815
#806 := [trans #525 #527]: #528
#804 := [monotonicity #806]: #522
#799 := [trans #804 #809]: #798
#796 := [monotonicity #799]: #795
#644 := [trans #796 #797]: #803
#536 := (iff #831 true)
#483 := (or false true)
#821 := (iff #483 true)
#822 := [rewrite]: #821
#813 := (iff #831 #483)
#436 := (iff #835 true)
#817 := (not false)
#541 := (iff #817 true)
#542 := [rewrite]: #541
#539 := (iff #835 #817)
#830 := (iff #500 false)
#842 := (or false false)
#497 := (iff #842 false)
#833 := [rewrite]: #497
#829 := (iff #500 #842)
#477 := (iff #521 false)
#818 := [rewrite]: #477
#827 := [monotonicity #818 #818]: #829
#816 := [trans #827 #833]: #830
#540 := [monotonicity #816]: #539
#812 := [trans #540 #542]: #436
#468 := (iff #624 false)
#819 := (not true)
#826 := (iff #819 false)
#828 := [rewrite]: #826
#825 := (iff #624 #819)
#823 := (iff #494 true)
#484 := (iff #494 #483)
#481 := (iff #837 true)
#482 := [rewrite]: #481
#820 := [monotonicity #818 #482]: #484
#824 := [trans #820 #822]: #823
#463 := [monotonicity #824]: #825
#469 := [trans #463 #828]: #468
#535 := [monotonicity #469 #812]: #813
#810 := [trans #535 #822]: #536
#666 := [monotonicity #810 #644 #783]: #784
#775 := [trans #666 #668]: #627
#493 := (iff #839 false)
#832 := (iff #839 #842)
#841 := (iff #838 false)
#836 := [rewrite]: #841
#492 := [monotonicity #836 #836]: #832
#834 := [trans #492 #833]: #493
#773 := [monotonicity #834 #775]: #772
#678 := [trans #773 #661]: #676
#683 := [monotonicity #678]: #682
#774 := [trans #683 #777]: #682
#681 := [quant-inst]: #680
#778 := [mp #681 #774]: #672
#691 := [unit-resolution #778 #849]: #801
#692 := [monotonicity #691]: #57
#58 := (not #57)
#270 := [asserted]: #58
[unit-resolution #270 #692]: false
unsat
69a73700cfd90edae90cc37e225595659ec32fc1 298 0
#2 := false
decl f5 :: (-> int S2)
#53 := 3::int
#57 := (f5 3::int)
decl f3 :: (-> int int int)
#54 := 1::int
#55 := (f3 3::int 1::int)
#56 := (f5 #55)
#58 := (= #56 #57)
#790 := (= #55 3::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#844 := (pattern #10)
#11 := 0::int
#83 := -1::int
#87 := (* -1::int #9)
#84 := (* -1::int #8)
#90 := (div #84 #87)
#347 := (* -1::int #90)
#348 := (+ #10 #347)
#349 := (= #348 0::int)
#21 := (div #8 #9)
#344 := (* -1::int #21)
#345 := (+ #10 #344)
#346 := (= #345 0::int)
#109 := (<= #9 0::int)
#105 := (<= #8 0::int)
#302 := (or #105 #109)
#303 := (not #302)
#116 := (>= #8 0::int)
#285 := (or #109 #116)
#286 := (not #285)
#309 := (or #286 #303)
#350 := (ite #309 #346 #349)
#343 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#351 := (ite #14 #343 #350)
#845 := (forall (vars (?v0 int) (?v1 int)) (:pat #844) #351)
#354 := (forall (vars (?v0 int) (?v1 int)) #351)
#848 := (iff #354 #845)
#846 := (iff #351 #351)
#847 := [refl]: #846
#849 := [quant-intro #847]: #848
#314 := (ite #309 #21 #90)
#317 := (ite #14 0::int #314)
#320 := (= #10 #317)
#323 := (forall (vars (?v0 int) (?v1 int)) #320)
#355 := (iff #323 #354)
#352 := (iff #320 #351)
#353 := [rewrite]: #352
#356 := [quant-intro #353]: #355
#117 := (not #116)
#110 := (not #109)
#120 := (and #110 #117)
#106 := (not #105)
#113 := (and #106 #110)
#123 := (or #113 #120)
#126 := (ite #123 #21 #90)
#129 := (ite #14 0::int #126)
#132 := (= #10 #129)
#135 := (forall (vars (?v0 int) (?v1 int)) #132)
#324 := (iff #135 #323)
#321 := (iff #132 #320)
#318 := (= #129 #317)
#315 := (= #126 #314)
#312 := (iff #123 #309)
#306 := (or #303 #286)
#310 := (iff #306 #309)
#311 := [rewrite]: #310
#307 := (iff #123 #306)
#304 := (iff #120 #286)
#305 := [rewrite]: #304
#283 := (iff #113 #303)
#284 := [rewrite]: #283
#308 := [monotonicity #284 #305]: #307
#313 := [trans #308 #311]: #312
#316 := [monotonicity #313]: #315
#319 := [monotonicity #316]: #318
#322 := [monotonicity #319]: #321
#325 := [quant-intro #322]: #324
#289 := (~ #135 #135)
#287 := (~ #132 #132)
#288 := [refl]: #287
#290 := [nnf-pos #288]: #289
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#138 := (iff #28 #135)
#77 := (and #16 #18)
#80 := (or #17 #77)
#93 := (ite #80 #21 #90)
#96 := (ite #14 0::int #93)
#99 := (= #10 #96)
#102 := (forall (vars (?v0 int) (?v1 int)) #99)
#136 := (iff #102 #135)
#133 := (iff #99 #132)
#130 := (= #96 #129)
#127 := (= #93 #126)
#124 := (iff #80 #123)
#121 := (iff #77 #120)
#118 := (iff #18 #117)
#119 := [rewrite]: #118
#111 := (iff #16 #110)
#112 := [rewrite]: #111
#122 := [monotonicity #112 #119]: #121
#114 := (iff #17 #113)
#107 := (iff #15 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#125 := [monotonicity #115 #122]: #124
#128 := [monotonicity #125]: #127
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#137 := [quant-intro #134]: #136
#103 := (iff #28 #102)
#100 := (iff #27 #99)
#97 := (= #26 #96)
#94 := (= #25 #93)
#91 := (= #24 #90)
#88 := (= #23 #87)
#89 := [rewrite]: #88
#85 := (= #22 #84)
#86 := [rewrite]: #85
#92 := [monotonicity #86 #89]: #91
#81 := (iff #20 #80)
#78 := (iff #19 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#95 := [monotonicity #82 #92]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#104 := [quant-intro #101]: #103
#139 := [trans #104 #137]: #138
#76 := [asserted]: #28
#140 := [mp #76 #139]: #135
#274 := [mp~ #140 #290]: #135
#326 := [mp #274 #325]: #323
#357 := [mp #326 #356]: #354
#850 := [mp #357 #849]: #845
#766 := (not #845)
#768 := (or #766 #790)
#431 := (* -1::int 1::int)
#515 := (* -1::int 3::int)
#516 := (div #515 #431)
#517 := (* -1::int #516)
#508 := (+ #55 #517)
#519 := (= #508 0::int)
#520 := (div 3::int 1::int)
#521 := (* -1::int #520)
#518 := (+ #55 #521)
#522 := (= #518 0::int)
#501 := (<= 1::int 0::int)
#836 := (<= 3::int 0::int)
#838 := (or #836 #501)
#495 := (not #838)
#625 := (>= 3::int 0::int)
#832 := (or #501 #625)
#506 := (not #832)
#507 := (or #506 #495)
#839 := (ite #507 #522 #519)
#840 := (= #55 0::int)
#841 := (= 1::int 0::int)
#842 := (= 3::int 0::int)
#837 := (or #842 #841)
#843 := (ite #837 #840 #839)
#760 := (or #766 #843)
#759 := (iff #760 #768)
#770 := (iff #768 #768)
#771 := [rewrite]: #770
#775 := (iff #843 #790)
#682 := (ite false #840 #790)
#685 := (iff #682 #790)
#778 := [rewrite]: #685
#683 := (iff #843 #682)
#673 := (iff #839 #790)
#1 := true
#777 := (ite true #790 #790)
#679 := (iff #777 #790)
#680 := [rewrite]: #679
#662 := (iff #839 #777)
#773 := (iff #519 #790)
#809 := -3::int
#802 := (+ -3::int #55)
#646 := (= #802 0::int)
#791 := (iff #646 #790)
#792 := [rewrite]: #791
#776 := (iff #519 #646)
#669 := (= #508 #802)
#801 := (+ #55 -3::int)
#803 := (= #801 #802)
#798 := [rewrite]: #803
#667 := (= #508 #801)
#782 := (= #517 -3::int)
#806 := (= #515 -3::int)
#810 := [rewrite]: #806
#783 := (= #517 #515)
#780 := (= #516 3::int)
#788 := (div -3::int -1::int)
#626 := (= #788 3::int)
#627 := [rewrite]: #626
#795 := (= #516 #788)
#793 := (= #431 -1::int)
#794 := [rewrite]: #793
#624 := [monotonicity #810 #794]: #795
#781 := [trans #624 #627]: #780
#784 := [monotonicity #781]: #783
#785 := [trans #784 #810]: #782
#668 := [monotonicity #785]: #667
#628 := [trans #668 #798]: #669
#678 := [monotonicity #628]: #776
#774 := [trans #678 #792]: #773
#786 := (iff #522 #790)
#647 := (iff #522 #646)
#804 := (= #518 #802)
#796 := (= #518 #801)
#799 := (= #521 -3::int)
#523 := (= #521 #515)
#807 := (= #520 3::int)
#808 := [rewrite]: #807
#805 := [monotonicity #808]: #523
#800 := [trans #805 #810]: #799
#797 := [monotonicity #800]: #796
#645 := [trans #797 #798]: #804
#789 := [monotonicity #645]: #647
#787 := [trans #789 #792]: #786
#528 := (iff #507 true)
#824 := (or false true)
#826 := (iff #824 true)
#464 := [rewrite]: #826
#526 := (iff #507 #824)
#812 := (iff #495 true)
#814 := (not false)
#811 := (iff #814 true)
#815 := [rewrite]: #811
#536 := (iff #495 #814)
#437 := (iff #838 false)
#494 := (or false false)
#819 := (iff #494 false)
#482 := [rewrite]: #819
#542 := (iff #838 #494)
#485 := (iff #501 false)
#821 := [rewrite]: #485
#540 := (iff #836 false)
#541 := [rewrite]: #540
#543 := [monotonicity #541 #821]: #542
#813 := [trans #543 #482]: #437
#537 := [monotonicity #813]: #536
#816 := [trans #537 #815]: #812
#817 := (iff #506 false)
#469 := (not true)
#828 := (iff #469 false)
#831 := [rewrite]: #828
#470 := (iff #506 #469)
#827 := (iff #832 true)
#825 := (iff #832 #824)
#822 := (iff #625 true)
#823 := [rewrite]: #822
#820 := [monotonicity #821 #823]: #825
#829 := [trans #820 #464]: #827
#830 := [monotonicity #829]: #470
#818 := [trans #830 #831]: #817
#527 := [monotonicity #818 #816]: #526
#529 := [trans #527 #464]: #528
#677 := [monotonicity #529 #787 #774]: #662
#681 := [trans #677 #680]: #673
#483 := (iff #837 false)
#835 := (iff #837 #494)
#498 := (iff #841 false)
#834 := [rewrite]: #498
#833 := (iff #842 false)
#493 := [rewrite]: #833
#478 := [monotonicity #493 #834]: #835
#484 := [trans #478 #482]: #483
#684 := [monotonicity #484 #681]: #683
#779 := [trans #684 #778]: #775
#769 := [monotonicity #779]: #759
#767 := [trans #769 #771]: #759
#757 := [quant-inst]: #760
#772 := [mp #757 #767]: #768
#705 := [unit-resolution #772 #850]: #790
#706 := [monotonicity #705]: #58
#59 := (not #58)
#271 := [asserted]: #59
[unit-resolution #271 #706]: false
unsat
42cd145e516d85b450559c9cc1b54c1ed7265de3 304 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#56 := (f5 0::int)
decl f4 :: (-> int int int)
#53 := 1::int
#54 := (f4 0::int 1::int)
#55 := (f5 #54)
#57 := (= #55 #56)
#838 := (= #54 0::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#850 := (pattern #29)
#82 := -1::int
#86 := (* -1::int #9)
#83 := (* -1::int #8)
#141 := (mod #83 #86)
#362 := (+ #29 #141)
#363 := (= #362 0::int)
#30 := (mod #8 #9)
#359 := (* -1::int #30)
#360 := (+ #29 #359)
#361 := (= #360 0::int)
#108 := (<= #9 0::int)
#104 := (<= #8 0::int)
#301 := (or #104 #108)
#302 := (not #301)
#115 := (>= #8 0::int)
#284 := (or #108 #115)
#285 := (not #284)
#308 := (or #285 #302)
#364 := (ite #308 #361 #363)
#358 := (= #29 0::int)
#12 := (= #8 0::int)
#365 := (ite #12 #358 #364)
#357 := (= #8 #29)
#13 := (= #9 0::int)
#366 := (ite #13 #357 #365)
#851 := (forall (vars (?v0 int) (?v1 int)) (:pat #850) #366)
#369 := (forall (vars (?v0 int) (?v1 int)) #366)
#854 := (iff #369 #851)
#852 := (iff #366 #366)
#853 := [refl]: #852
#855 := [quant-intro #853]: #854
#147 := (* -1::int #141)
#326 := (ite #308 #30 #147)
#329 := (ite #12 0::int #326)
#332 := (ite #13 #8 #329)
#335 := (= #29 #332)
#338 := (forall (vars (?v0 int) (?v1 int)) #335)
#370 := (iff #338 #369)
#367 := (iff #335 #366)
#368 := [rewrite]: #367
#371 := [quant-intro #368]: #370
#116 := (not #115)
#109 := (not #108)
#119 := (and #109 #116)
#105 := (not #104)
#112 := (and #105 #109)
#122 := (or #112 #119)
#167 := (ite #122 #30 #147)
#170 := (ite #12 0::int #167)
#173 := (ite #13 #8 #170)
#176 := (= #29 #173)
#179 := (forall (vars (?v0 int) (?v1 int)) #176)
#339 := (iff #179 #338)
#336 := (iff #176 #335)
#333 := (= #173 #332)
#330 := (= #170 #329)
#327 := (= #167 #326)
#311 := (iff #122 #308)
#305 := (or #302 #285)
#309 := (iff #305 #308)
#310 := [rewrite]: #309
#306 := (iff #122 #305)
#303 := (iff #119 #285)
#304 := [rewrite]: #303
#282 := (iff #112 #302)
#283 := [rewrite]: #282
#307 := [monotonicity #283 #304]: #306
#312 := [trans #307 #310]: #311
#328 := [monotonicity #312]: #327
#331 := [monotonicity #328]: #330
#334 := [monotonicity #331]: #333
#337 := [monotonicity #334]: #336
#340 := [quant-intro #337]: #339
#274 := (~ #179 #179)
#271 := (~ #176 #176)
#290 := [refl]: #271
#275 := [nnf-pos #290]: #274
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#182 := (iff #37 #179)
#76 := (and #16 #18)
#79 := (or #17 #76)
#152 := (ite #79 #30 #147)
#155 := (ite #12 0::int #152)
#158 := (ite #13 #8 #155)
#161 := (= #29 #158)
#164 := (forall (vars (?v0 int) (?v1 int)) #161)
#180 := (iff #164 #179)
#177 := (iff #161 #176)
#174 := (= #158 #173)
#171 := (= #155 #170)
#168 := (= #152 #167)
#123 := (iff #79 #122)
#120 := (iff #76 #119)
#117 := (iff #18 #116)
#118 := [rewrite]: #117
#110 := (iff #16 #109)
#111 := [rewrite]: #110
#121 := [monotonicity #111 #118]: #120
#113 := (iff #17 #112)
#106 := (iff #15 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#124 := [monotonicity #114 #121]: #123
#169 := [monotonicity #124]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [quant-intro #178]: #180
#165 := (iff #37 #164)
#162 := (iff #36 #161)
#159 := (= #35 #158)
#156 := (= #34 #155)
#153 := (= #33 #152)
#150 := (= #32 #147)
#144 := (- #141)
#148 := (= #144 #147)
#149 := [rewrite]: #148
#145 := (= #32 #144)
#142 := (= #31 #141)
#87 := (= #23 #86)
#88 := [rewrite]: #87
#84 := (= #22 #83)
#85 := [rewrite]: #84
#143 := [monotonicity #85 #88]: #142
#146 := [monotonicity #143]: #145
#151 := [trans #146 #149]: #150
#80 := (iff #20 #79)
#77 := (iff #19 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#154 := [monotonicity #81 #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#183 := [trans #166 #181]: #182
#140 := [asserted]: #37
#184 := [mp #140 #183]: #179
#291 := [mp~ #184 #275]: #179
#341 := [mp #291 #340]: #338
#372 := [mp #341 #371]: #369
#856 := [mp #372 #855]: #851
#676 := (not #851)
#678 := (or #676 #838)
#430 := (* -1::int 1::int)
#514 := (* -1::int 0::int)
#515 := (mod #514 #430)
#516 := (+ #54 #515)
#507 := (= #516 0::int)
#518 := (mod 0::int 1::int)
#519 := (* -1::int #518)
#520 := (+ #54 #519)
#517 := (= #520 0::int)
#521 := (<= 1::int 0::int)
#500 := (<= 0::int 0::int)
#835 := (or #500 #521)
#837 := (not #835)
#494 := (>= 0::int 0::int)
#624 := (or #521 #494)
#831 := (not #624)
#505 := (or #831 #837)
#506 := (ite #505 #517 #507)
#839 := (= 0::int 0::int)
#840 := (ite #839 #838 #506)
#841 := (= 0::int #54)
#836 := (= 1::int 0::int)
#842 := (ite #836 #841 #840)
#679 := (or #676 #842)
#680 := (iff #679 #678)
#682 := (iff #678 #678)
#683 := [rewrite]: #682
#776 := (iff #842 #838)
#625 := (ite false #838 #838)
#780 := (iff #625 #838)
#782 := [rewrite]: #780
#772 := (iff #842 #625)
#775 := (iff #840 #838)
#1 := true
#784 := (ite true #838 #838)
#668 := (iff #784 #838)
#627 := [rewrite]: #668
#666 := (iff #840 #784)
#783 := (iff #506 #838)
#626 := (iff #506 #625)
#794 := (iff #507 #838)
#793 := (= #516 #54)
#809 := (+ #54 0::int)
#800 := (= #809 #54)
#795 := [rewrite]: #800
#786 := (= #516 #809)
#791 := (= #515 0::int)
#645 := (mod 0::int -1::int)
#789 := (= #645 0::int)
#790 := [rewrite]: #789
#646 := (= #515 #645)
#803 := (= #430 -1::int)
#644 := [rewrite]: #803
#522 := (= #514 0::int)
#804 := [rewrite]: #522
#788 := [monotonicity #804 #644]: #646
#785 := [trans #788 #790]: #791
#792 := [monotonicity #785]: #786
#787 := [trans #792 #795]: #793
#623 := [monotonicity #787]: #794
#802 := (iff #517 #838)
#796 := (= #520 #54)
#798 := (= #520 #809)
#808 := (= #519 0::int)
#806 := (= #519 #514)
#527 := (= #518 0::int)
#528 := [rewrite]: #527
#807 := [monotonicity #528]: #806
#805 := [trans #807 #804]: #808
#799 := [monotonicity #805]: #798
#801 := [trans #799 #795]: #796
#797 := [monotonicity #801]: #802
#525 := (iff #505 false)
#536 := (or false false)
#811 := (iff #536 false)
#815 := [rewrite]: #811
#810 := (iff #505 #536)
#813 := (iff #837 false)
#819 := (not true)
#826 := (iff #819 false)
#828 := [rewrite]: #826
#436 := (iff #837 #819)
#541 := (iff #835 true)
#830 := (or true false)
#539 := (iff #830 true)
#540 := [rewrite]: #539
#816 := (iff #835 #830)
#477 := (iff #521 false)
#818 := [rewrite]: #477
#829 := (iff #500 true)
#827 := [rewrite]: #829
#817 := [monotonicity #827 #818]: #816
#542 := [trans #817 #540]: #541
#812 := [monotonicity #542]: #436
#535 := [trans #812 #828]: #813
#468 := (iff #831 false)
#825 := (iff #831 #819)
#823 := (iff #624 true)
#483 := (or false true)
#821 := (iff #483 true)
#822 := [rewrite]: #821
#484 := (iff #624 #483)
#481 := (iff #494 true)
#482 := [rewrite]: #481
#820 := [monotonicity #818 #482]: #484
#824 := [trans #820 #822]: #823
#463 := [monotonicity #824]: #825
#469 := [trans #463 #828]: #468
#814 := [monotonicity #469 #535]: #810
#526 := [trans #814 #815]: #525
#779 := [monotonicity #526 #797 #623]: #626
#781 := [trans #779 #782]: #783
#493 := (iff #839 true)
#834 := [rewrite]: #493
#667 := [monotonicity #834 #781]: #666
#677 := [trans #667 #627]: #775
#497 := (iff #841 #838)
#833 := [rewrite]: #497
#832 := (iff #836 false)
#492 := [rewrite]: #832
#773 := [monotonicity #492 #833 #677]: #772
#661 := [trans #773 #782]: #776
#681 := [monotonicity #661]: #680
#684 := [trans #681 #683]: #680
#672 := [quant-inst]: #679
#777 := [mp #672 #684]: #678
#712 := [unit-resolution #777 #856]: #838
#708 := [monotonicity #712]: #57
#58 := (not #57)
#270 := [asserted]: #58
[unit-resolution #270 #708]: false
unsat
4183c3ff4a9f3923626099be345775dc19db2d14 360 0
#2 := false
decl f5 :: (-> int S2)
decl f3 :: (-> int int int)
#55 := 1::int
decl f6 :: (-> S2 int)
decl f7 :: S2
#53 := f7
#54 := (f6 f7)
#56 := (f3 #54 1::int)
#57 := (f5 #56)
#272 := (= f7 #57)
#689 := (f5 #54)
#624 := (= #689 #57)
#621 := (= #57 #689)
#618 := (= #56 #54)
#11 := 0::int
#583 := (= 0::int #54)
#849 := (= #54 0::int)
#843 := (<= #54 0::int)
#825 := (not #843)
#632 := (>= #54 0::int)
#833 := (not #632)
#549 := (or #833 #825)
#799 := (not #549)
#527 := (div #54 1::int)
#83 := -1::int
#528 := (* -1::int #527)
#525 := (+ #56 #528)
#529 := (= #525 0::int)
#789 := (not #529)
#711 := (= #527 #54)
#645 := (= #54 #527)
#712 := (+ #54 #528)
#695 := (<= #712 0::int)
#709 := (= #712 0::int)
#1 := true
#74 := [true-axiom]: true
#667 := (or false #709)
#628 := [th-lemma]: #667
#629 := [unit-resolution #628 #74]: #709
#636 := (not #709)
#638 := (or #636 #695)
#639 := [th-lemma]: #638
#640 := [unit-resolution #639 #629]: #695
#641 := (>= #712 0::int)
#642 := (or #636 #641)
#643 := [th-lemma]: #642
#644 := [unit-resolution #643 #629]: #641
#646 := [th-lemma #644 #640]: #645
#648 := [symm #646]: #711
#666 := (= #56 #527)
#801 := (<= #525 0::int)
#659 := [hypothesis]: #529
#660 := (or #789 #801)
#661 := [th-lemma]: #660
#662 := [unit-resolution #661 #659]: #801
#795 := (>= #525 0::int)
#663 := (or #789 #795)
#664 := [th-lemma]: #663
#665 := [unit-resolution #664 #659]: #795
#651 := [th-lemma #665 #662]: #666
#619 := [trans #651 #648]: #618
#623 := [monotonicity #619]: #621
#625 := [symm #623]: #624
#690 := (= f7 #689)
#38 := (:var 0 S2)
#39 := (f6 #38)
#865 := (pattern #39)
#40 := (f5 #39)
#187 := (= #38 #40)
#866 := (forall (vars (?v0 S2)) (:pat #865) #187)
#190 := (forall (vars (?v0 S2)) #187)
#867 := (iff #190 #866)
#869 := (iff #866 #866)
#870 := [rewrite]: #869
#868 := [rewrite]: #867
#871 := [trans #868 #870]: #867
#284 := (~ #190 #190)
#300 := (~ #187 #187)
#301 := [refl]: #300
#285 := [nnf-pos #301]: #284
#41 := (= #40 #38)
#42 := (forall (vars (?v0 S2)) #41)
#191 := (iff #42 #190)
#188 := (iff #41 #187)
#189 := [rewrite]: #188
#192 := [quant-intro #189]: #191
#186 := [asserted]: #42
#195 := [mp #186 #192]: #190
#302 := [mp~ #195 #285]: #190
#872 := [mp #302 #871]: #866
#785 := (not #866)
#782 := (or #785 #690)
#786 := [quant-inst]: #782
#620 := [unit-resolution #786 #872]: #690
#468 := [trans #620 #625]: #272
#275 := (not #272)
#58 := (= #57 f7)
#59 := (not #58)
#276 := (iff #59 #275)
#273 := (iff #58 #272)
#274 := [rewrite]: #273
#277 := [monotonicity #274]: #276
#271 := [asserted]: #59
#280 := [mp #271 #277]: #275
#626 := [unit-resolution #280 #468]: false
#622 := [lemma #626]: #789
#522 := (* -1::int #54)
#543 := (div #522 -1::int)
#822 := (* -1::int #543)
#533 := (+ #56 #822)
#536 := (= #533 0::int)
#530 := (ite #549 #529 #536)
#685 := (not #849)
#585 := [hypothesis]: #685
#586 := (or #849 #530)
#847 := (= #56 0::int)
#813 := (ite #849 #847 #530)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#851 := (pattern #10)
#87 := (* -1::int #9)
#84 := (* -1::int #8)
#90 := (div #84 #87)
#354 := (* -1::int #90)
#355 := (+ #10 #354)
#356 := (= #355 0::int)
#21 := (div #8 #9)
#351 := (* -1::int #21)
#352 := (+ #10 #351)
#353 := (= #352 0::int)
#109 := (<= #9 0::int)
#105 := (<= #8 0::int)
#309 := (or #105 #109)
#310 := (not #309)
#116 := (>= #8 0::int)
#292 := (or #109 #116)
#293 := (not #292)
#316 := (or #293 #310)
#357 := (ite #316 #353 #356)
#350 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#358 := (ite #14 #350 #357)
#852 := (forall (vars (?v0 int) (?v1 int)) (:pat #851) #358)
#361 := (forall (vars (?v0 int) (?v1 int)) #358)
#855 := (iff #361 #852)
#853 := (iff #358 #358)
#854 := [refl]: #853
#856 := [quant-intro #854]: #855
#321 := (ite #316 #21 #90)
#324 := (ite #14 0::int #321)
#327 := (= #10 #324)
#330 := (forall (vars (?v0 int) (?v1 int)) #327)
#362 := (iff #330 #361)
#359 := (iff #327 #358)
#360 := [rewrite]: #359
#363 := [quant-intro #360]: #362
#117 := (not #116)
#110 := (not #109)
#120 := (and #110 #117)
#106 := (not #105)
#113 := (and #106 #110)
#123 := (or #113 #120)
#126 := (ite #123 #21 #90)
#129 := (ite #14 0::int #126)
#132 := (= #10 #129)
#135 := (forall (vars (?v0 int) (?v1 int)) #132)
#331 := (iff #135 #330)
#328 := (iff #132 #327)
#325 := (= #129 #324)
#322 := (= #126 #321)
#319 := (iff #123 #316)
#313 := (or #310 #293)
#317 := (iff #313 #316)
#318 := [rewrite]: #317
#314 := (iff #123 #313)
#311 := (iff #120 #293)
#312 := [rewrite]: #311
#290 := (iff #113 #310)
#291 := [rewrite]: #290
#315 := [monotonicity #291 #312]: #314
#320 := [trans #315 #318]: #319
#323 := [monotonicity #320]: #322
#326 := [monotonicity #323]: #325
#329 := [monotonicity #326]: #328
#332 := [quant-intro #329]: #331
#296 := (~ #135 #135)
#294 := (~ #132 #132)
#295 := [refl]: #294
#297 := [nnf-pos #295]: #296
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#138 := (iff #28 #135)
#77 := (and #16 #18)
#80 := (or #17 #77)
#93 := (ite #80 #21 #90)
#96 := (ite #14 0::int #93)
#99 := (= #10 #96)
#102 := (forall (vars (?v0 int) (?v1 int)) #99)
#136 := (iff #102 #135)
#133 := (iff #99 #132)
#130 := (= #96 #129)
#127 := (= #93 #126)
#124 := (iff #80 #123)
#121 := (iff #77 #120)
#118 := (iff #18 #117)
#119 := [rewrite]: #118
#111 := (iff #16 #110)
#112 := [rewrite]: #111
#122 := [monotonicity #112 #119]: #121
#114 := (iff #17 #113)
#107 := (iff #15 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#125 := [monotonicity #115 #122]: #124
#128 := [monotonicity #125]: #127
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#137 := [quant-intro #134]: #136
#103 := (iff #28 #102)
#100 := (iff #27 #99)
#97 := (= #26 #96)
#94 := (= #25 #93)
#91 := (= #24 #90)
#88 := (= #23 #87)
#89 := [rewrite]: #88
#85 := (= #22 #84)
#86 := [rewrite]: #85
#92 := [monotonicity #86 #89]: #91
#81 := (iff #20 #80)
#78 := (iff #19 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#95 := [monotonicity #82 #92]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#104 := [quant-intro #101]: #103
#139 := [trans #104 #137]: #138
#76 := [asserted]: #28
#140 := [mp #76 #139]: #135
#281 := [mp~ #140 #297]: #135
#333 := [mp #281 #332]: #330
#364 := [mp #333 #363]: #361
#857 := [mp #364 #856]: #852
#807 := (not #852)
#808 := (or #807 #813)
#438 := (* -1::int 1::int)
#523 := (div #522 #438)
#524 := (* -1::int #523)
#515 := (+ #56 #524)
#526 := (= #515 0::int)
#508 := (<= 1::int 0::int)
#845 := (or #843 #508)
#502 := (not #845)
#839 := (or #508 #632)
#513 := (not #839)
#514 := (or #513 #502)
#846 := (ite #514 #529 #526)
#848 := (= 1::int 0::int)
#844 := (or #849 #848)
#850 := (ite #844 #847 #846)
#803 := (or #807 #850)
#809 := (iff #803 #808)
#805 := (iff #808 #808)
#811 := [rewrite]: #805
#817 := (iff #850 #813)
#812 := (iff #846 #530)
#814 := (iff #526 #536)
#534 := (= #515 #533)
#819 := (= #524 #822)
#544 := (= #523 #543)
#820 := (= #438 -1::int)
#821 := [rewrite]: #820
#818 := [monotonicity #821]: #544
#823 := [monotonicity #818]: #819
#535 := [monotonicity #823]: #534
#815 := [monotonicity #535]: #814
#550 := (iff #514 #549)
#547 := (iff #502 #825)
#838 := (iff #845 #843)
#836 := (or #843 false)
#837 := (iff #836 #843)
#835 := [rewrite]: #837
#476 := (iff #845 #836)
#490 := (iff #508 false)
#491 := [rewrite]: #490
#477 := [monotonicity #491]: #476
#824 := [trans #477 #835]: #838
#548 := [monotonicity #824]: #547
#471 := (iff #513 #833)
#832 := (iff #839 #632)
#492 := (or false #632)
#830 := (iff #492 #632)
#831 := [rewrite]: #830
#828 := (iff #839 #492)
#829 := [monotonicity #491]: #828
#827 := [trans #829 #831]: #832
#834 := [monotonicity #827]: #471
#444 := [monotonicity #834 #548]: #550
#816 := [monotonicity #444 #815]: #812
#826 := (iff #844 #849)
#505 := (or #849 false)
#842 := (iff #505 #849)
#485 := [rewrite]: #842
#841 := (iff #844 #505)
#840 := (iff #848 false)
#500 := [rewrite]: #840
#501 := [monotonicity #500]: #841
#489 := [trans #501 #485]: #826
#806 := [monotonicity #489 #816]: #817
#810 := [monotonicity #806]: #809
#652 := [trans #810 #811]: #809
#804 := [quant-inst]: #803
#653 := [mp #804 #652]: #808
#574 := [unit-resolution #653 #857]: #813
#783 := (not #813)
#784 := (or #783 #849 #530)
#669 := [def-axiom]: #784
#563 := [unit-resolution #669 #574]: #586
#565 := [unit-resolution #563 #585]: #530
#634 := (not #530)
#787 := (or #634 #799 #529)
#788 := [def-axiom]: #787
#566 := [unit-resolution #788 #565 #622]: #799
#797 := (or #549 #843)
#798 := [def-axiom]: #797
#567 := [unit-resolution #798 #566]: #843
#654 := (or #549 #632)
#796 := [def-axiom]: #654
#568 := [unit-resolution #796 #566]: #632
#569 := (or #849 #825 #833)
#570 := [th-lemma]: #569
#571 := [unit-resolution #570 #585 #568 #567]: false
#564 := [lemma #571]: #849
#584 := [symm #564]: #583
#580 := (or #685 #847)
#780 := (or #783 #685 #847)
#781 := [def-axiom]: #780
#581 := [unit-resolution #781 #574]: #580
#582 := [unit-resolution #581 #564]: #847
#607 := [trans #582 #584]: #618
#612 := [monotonicity #607]: #621
#572 := [symm #612]: #624
#557 := [trans #620 #572]: #272
[unit-resolution #280 #557]: false
unsat
121357a49f554c92c48529c5e8845192f6c0a8a5 302 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#56 := (f5 0::int)
decl f4 :: (-> int int int)
#53 := 1::int
#54 := (f4 1::int 1::int)
#55 := (f5 #54)
#57 := (= #55 #56)
#505 := (= #54 0::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#850 := (pattern #29)
#82 := -1::int
#86 := (* -1::int #9)
#83 := (* -1::int #8)
#141 := (mod #83 #86)
#362 := (+ #29 #141)
#363 := (= #362 0::int)
#30 := (mod #8 #9)
#359 := (* -1::int #30)
#360 := (+ #29 #359)
#361 := (= #360 0::int)
#108 := (<= #9 0::int)
#104 := (<= #8 0::int)
#301 := (or #104 #108)
#302 := (not #301)
#115 := (>= #8 0::int)
#284 := (or #108 #115)
#285 := (not #284)
#308 := (or #285 #302)
#364 := (ite #308 #361 #363)
#358 := (= #29 0::int)
#12 := (= #8 0::int)
#365 := (ite #12 #358 #364)
#357 := (= #8 #29)
#13 := (= #9 0::int)
#366 := (ite #13 #357 #365)
#851 := (forall (vars (?v0 int) (?v1 int)) (:pat #850) #366)
#369 := (forall (vars (?v0 int) (?v1 int)) #366)
#854 := (iff #369 #851)
#852 := (iff #366 #366)
#853 := [refl]: #852
#855 := [quant-intro #853]: #854
#147 := (* -1::int #141)
#326 := (ite #308 #30 #147)
#329 := (ite #12 0::int #326)
#332 := (ite #13 #8 #329)
#335 := (= #29 #332)
#338 := (forall (vars (?v0 int) (?v1 int)) #335)
#370 := (iff #338 #369)
#367 := (iff #335 #366)
#368 := [rewrite]: #367
#371 := [quant-intro #368]: #370
#116 := (not #115)
#109 := (not #108)
#119 := (and #109 #116)
#105 := (not #104)
#112 := (and #105 #109)
#122 := (or #112 #119)
#167 := (ite #122 #30 #147)
#170 := (ite #12 0::int #167)
#173 := (ite #13 #8 #170)
#176 := (= #29 #173)
#179 := (forall (vars (?v0 int) (?v1 int)) #176)
#339 := (iff #179 #338)
#336 := (iff #176 #335)
#333 := (= #173 #332)
#330 := (= #170 #329)
#327 := (= #167 #326)
#311 := (iff #122 #308)
#305 := (or #302 #285)
#309 := (iff #305 #308)
#310 := [rewrite]: #309
#306 := (iff #122 #305)
#303 := (iff #119 #285)
#304 := [rewrite]: #303
#282 := (iff #112 #302)
#283 := [rewrite]: #282
#307 := [monotonicity #283 #304]: #306
#312 := [trans #307 #310]: #311
#328 := [monotonicity #312]: #327
#331 := [monotonicity #328]: #330
#334 := [monotonicity #331]: #333
#337 := [monotonicity #334]: #336
#340 := [quant-intro #337]: #339
#274 := (~ #179 #179)
#271 := (~ #176 #176)
#290 := [refl]: #271
#275 := [nnf-pos #290]: #274
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#182 := (iff #37 #179)
#76 := (and #16 #18)
#79 := (or #17 #76)
#152 := (ite #79 #30 #147)
#155 := (ite #12 0::int #152)
#158 := (ite #13 #8 #155)
#161 := (= #29 #158)
#164 := (forall (vars (?v0 int) (?v1 int)) #161)
#180 := (iff #164 #179)
#177 := (iff #161 #176)
#174 := (= #158 #173)
#171 := (= #155 #170)
#168 := (= #152 #167)
#123 := (iff #79 #122)
#120 := (iff #76 #119)
#117 := (iff #18 #116)
#118 := [rewrite]: #117
#110 := (iff #16 #109)
#111 := [rewrite]: #110
#121 := [monotonicity #111 #118]: #120
#113 := (iff #17 #112)
#106 := (iff #15 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#124 := [monotonicity #114 #121]: #123
#169 := [monotonicity #124]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [quant-intro #178]: #180
#165 := (iff #37 #164)
#162 := (iff #36 #161)
#159 := (= #35 #158)
#156 := (= #34 #155)
#153 := (= #33 #152)
#150 := (= #32 #147)
#144 := (- #141)
#148 := (= #144 #147)
#149 := [rewrite]: #148
#145 := (= #32 #144)
#142 := (= #31 #141)
#87 := (= #23 #86)
#88 := [rewrite]: #87
#84 := (= #22 #83)
#85 := [rewrite]: #84
#143 := [monotonicity #85 #88]: #142
#146 := [monotonicity #143]: #145
#151 := [trans #146 #149]: #150
#80 := (iff #20 #79)
#77 := (iff #19 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#154 := [monotonicity #81 #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#183 := [trans #166 #181]: #182
#140 := [asserted]: #37
#184 := [mp #140 #183]: #179
#291 := [mp~ #184 #275]: #179
#341 := [mp #291 #340]: #338
#372 := [mp #341 #371]: #369
#856 := [mp #372 #855]: #851
#776 := (not #851)
#661 := (or #776 #505)
#430 := (* -1::int 1::int)
#514 := (mod #430 #430)
#515 := (+ #54 #514)
#516 := (= #515 0::int)
#507 := (mod 1::int 1::int)
#518 := (* -1::int #507)
#519 := (+ #54 #518)
#520 := (= #519 0::int)
#517 := (<= 1::int 0::int)
#521 := (or #517 #517)
#500 := (not #521)
#835 := (>= 1::int 0::int)
#837 := (or #517 #835)
#494 := (not #837)
#624 := (or #494 #500)
#831 := (ite #624 #520 #516)
#506 := (= 1::int 0::int)
#838 := (ite #506 #505 #831)
#839 := (= 1::int #54)
#840 := (ite #506 #839 #838)
#676 := (or #776 #840)
#679 := (iff #676 #661)
#680 := (iff #661 #661)
#681 := [rewrite]: #680
#772 := (iff #840 #505)
#832 := (= #54 1::int)
#667 := (ite false #832 #505)
#775 := (iff #667 #505)
#677 := [rewrite]: #775
#668 := (iff #840 #667)
#784 := (iff #838 #505)
#779 := (ite false #505 #505)
#783 := (iff #779 #505)
#781 := [rewrite]: #783
#780 := (iff #838 #779)
#625 := (iff #831 #505)
#1 := true
#792 := (ite true #505 #505)
#794 := (iff #792 #505)
#623 := [rewrite]: #794
#793 := (iff #831 #792)
#785 := (iff #516 #505)
#790 := (= #515 #54)
#807 := (+ #54 0::int)
#808 := (= #807 #54)
#805 := [rewrite]: #808
#788 := (= #515 #807)
#645 := (= #514 0::int)
#801 := (mod -1::int -1::int)
#803 := (= #801 0::int)
#644 := [rewrite]: #803
#802 := (= #514 #801)
#795 := (= #430 -1::int)
#796 := [rewrite]: #795
#797 := [monotonicity #796 #796]: #802
#646 := [trans #797 #644]: #645
#789 := [monotonicity #646]: #788
#791 := [trans #789 #805]: #790
#786 := [monotonicity #791]: #785
#799 := (iff #520 #505)
#809 := (= #519 #54)
#522 := (= #519 #807)
#528 := (= #518 0::int)
#811 := (* -1::int 0::int)
#526 := (= #811 0::int)
#527 := [rewrite]: #526
#815 := (= #518 #811)
#810 := (= #507 0::int)
#814 := [rewrite]: #810
#525 := [monotonicity #814]: #815
#806 := [trans #525 #527]: #528
#804 := [monotonicity #806]: #522
#798 := [trans #804 #805]: #809
#800 := [monotonicity #798]: #799
#535 := (iff #624 true)
#477 := (or false true)
#482 := (iff #477 true)
#483 := [rewrite]: #482
#812 := (iff #624 #477)
#542 := (iff #500 true)
#816 := (not false)
#540 := (iff #816 true)
#541 := [rewrite]: #540
#817 := (iff #500 #816)
#827 := (iff #521 false)
#826 := (or false false)
#469 := (iff #826 false)
#829 := [rewrite]: #469
#828 := (iff #521 #826)
#497 := (iff #517 false)
#833 := [rewrite]: #497
#468 := [monotonicity #833 #833]: #828
#830 := [trans #468 #829]: #827
#539 := [monotonicity #830]: #817
#436 := [trans #539 #541]: #542
#825 := (iff #494 false)
#821 := (not true)
#824 := (iff #821 false)
#819 := [rewrite]: #824
#822 := (iff #494 #821)
#484 := (iff #837 true)
#818 := (iff #837 #477)
#493 := (iff #835 true)
#834 := [rewrite]: #493
#481 := [monotonicity #833 #834]: #818
#820 := [trans #481 #483]: #484
#823 := [monotonicity #820]: #822
#463 := [trans #823 #819]: #825
#813 := [monotonicity #463 #436]: #812
#536 := [trans #813 #483]: #535
#787 := [monotonicity #536 #800 #786]: #793
#626 := [trans #787 #623]: #625
#841 := (iff #506 false)
#836 := [rewrite]: #841
#782 := [monotonicity #836 #626]: #780
#666 := [trans #782 #781]: #784
#842 := (iff #839 #832)
#492 := [rewrite]: #842
#627 := [monotonicity #836 #492 #666]: #668
#773 := [trans #627 #677]: #772
#672 := [monotonicity #773]: #679
#682 := [trans #672 #681]: #679
#678 := [quant-inst]: #676
#683 := [mp #678 #682]: #661
#703 := [unit-resolution #683 #856]: #505
#699 := [monotonicity #703]: #57
#58 := (not #57)
#270 := [asserted]: #58
[unit-resolution #270 #699]: false
unsat
f2f039ccfb9f8bb6046ed67b2d5f9e4965b93c1c 288 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#56 := (f5 0::int)
decl f3 :: (-> int int int)
#53 := 3::int
#54 := (f3 0::int 3::int)
#55 := (f5 #54)
#57 := (= #55 #56)
#839 := (= #54 0::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#844 := (pattern #10)
#82 := -1::int
#86 := (* -1::int #9)
#83 := (* -1::int #8)
#89 := (div #83 #86)
#346 := (* -1::int #89)
#347 := (+ #10 #346)
#348 := (= #347 0::int)
#21 := (div #8 #9)
#343 := (* -1::int #21)
#344 := (+ #10 #343)
#345 := (= #344 0::int)
#108 := (<= #9 0::int)
#104 := (<= #8 0::int)
#301 := (or #104 #108)
#302 := (not #301)
#115 := (>= #8 0::int)
#284 := (or #108 #115)
#285 := (not #284)
#308 := (or #285 #302)
#349 := (ite #308 #345 #348)
#342 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#350 := (ite #14 #342 #349)
#845 := (forall (vars (?v0 int) (?v1 int)) (:pat #844) #350)
#353 := (forall (vars (?v0 int) (?v1 int)) #350)
#848 := (iff #353 #845)
#846 := (iff #350 #350)
#847 := [refl]: #846
#849 := [quant-intro #847]: #848
#313 := (ite #308 #21 #89)
#316 := (ite #14 0::int #313)
#319 := (= #10 #316)
#322 := (forall (vars (?v0 int) (?v1 int)) #319)
#354 := (iff #322 #353)
#351 := (iff #319 #350)
#352 := [rewrite]: #351
#355 := [quant-intro #352]: #354
#116 := (not #115)
#109 := (not #108)
#119 := (and #109 #116)
#105 := (not #104)
#112 := (and #105 #109)
#122 := (or #112 #119)
#125 := (ite #122 #21 #89)
#128 := (ite #14 0::int #125)
#131 := (= #10 #128)
#134 := (forall (vars (?v0 int) (?v1 int)) #131)
#323 := (iff #134 #322)
#320 := (iff #131 #319)
#317 := (= #128 #316)
#314 := (= #125 #313)
#311 := (iff #122 #308)
#305 := (or #302 #285)
#309 := (iff #305 #308)
#310 := [rewrite]: #309
#306 := (iff #122 #305)
#303 := (iff #119 #285)
#304 := [rewrite]: #303
#282 := (iff #112 #302)
#283 := [rewrite]: #282
#307 := [monotonicity #283 #304]: #306
#312 := [trans #307 #310]: #311
#315 := [monotonicity #312]: #314
#318 := [monotonicity #315]: #317
#321 := [monotonicity #318]: #320
#324 := [quant-intro #321]: #323
#288 := (~ #134 #134)
#286 := (~ #131 #131)
#287 := [refl]: #286
#289 := [nnf-pos #287]: #288
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#137 := (iff #28 #134)
#76 := (and #16 #18)
#79 := (or #17 #76)
#92 := (ite #79 #21 #89)
#95 := (ite #14 0::int #92)
#98 := (= #10 #95)
#101 := (forall (vars (?v0 int) (?v1 int)) #98)
#135 := (iff #101 #134)
#132 := (iff #98 #131)
#129 := (= #95 #128)
#126 := (= #92 #125)
#123 := (iff #79 #122)
#120 := (iff #76 #119)
#117 := (iff #18 #116)
#118 := [rewrite]: #117
#110 := (iff #16 #109)
#111 := [rewrite]: #110
#121 := [monotonicity #111 #118]: #120
#113 := (iff #17 #112)
#106 := (iff #15 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#124 := [monotonicity #114 #121]: #123
#127 := [monotonicity #124]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#136 := [quant-intro #133]: #135
#102 := (iff #28 #101)
#99 := (iff #27 #98)
#96 := (= #26 #95)
#93 := (= #25 #92)
#90 := (= #24 #89)
#87 := (= #23 #86)
#88 := [rewrite]: #87
#84 := (= #22 #83)
#85 := [rewrite]: #84
#91 := [monotonicity #85 #88]: #90
#80 := (iff #20 #79)
#77 := (iff #19 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#94 := [monotonicity #81 #91]: #93
#97 := [monotonicity #94]: #96
#100 := [monotonicity #97]: #99
#103 := [quant-intro #100]: #102
#138 := [trans #103 #136]: #137
#75 := [asserted]: #28
#139 := [mp #75 #138]: #134
#273 := [mp~ #139 #289]: #134
#325 := [mp #273 #324]: #322
#356 := [mp #325 #355]: #353
#850 := [mp #356 #849]: #845
#680 := (not #845)
#673 := (or #680 #839)
#430 := (* -1::int 3::int)
#515 := (* -1::int 0::int)
#516 := (div #515 #430)
#517 := (* -1::int #516)
#508 := (+ #54 #517)
#519 := (= #508 0::int)
#520 := (div 0::int 3::int)
#448 := (* -1::int #520)
#521 := (+ #54 #448)
#518 := (= #521 0::int)
#522 := (<= 3::int 0::int)
#501 := (<= 0::int 0::int)
#836 := (or #501 #522)
#838 := (not #836)
#495 := (>= 0::int 0::int)
#625 := (or #522 #495)
#832 := (not #625)
#506 := (or #832 #838)
#507 := (ite #506 #518 #519)
#840 := (= 3::int 0::int)
#841 := (= 0::int 0::int)
#842 := (or #841 #840)
#837 := (ite #842 #839 #507)
#681 := (or #680 #837)
#683 := (iff #681 #673)
#685 := (iff #673 #673)
#778 := [rewrite]: #685
#677 := (iff #837 #839)
#1 := true
#678 := (ite true #839 #839)
#777 := (iff #678 #839)
#662 := [rewrite]: #777
#773 := (iff #837 #678)
#628 := (iff #507 #839)
#782 := (ite false #839 #839)
#668 := (iff #782 #839)
#669 := [rewrite]: #668
#785 := (iff #507 #782)
#783 := (iff #519 #839)
#780 := (= #508 #54)
#799 := (+ #54 0::int)
#796 := (= #799 #54)
#797 := [rewrite]: #796
#626 := (= #508 #799)
#795 := (= #517 0::int)
#805 := (= #515 0::int)
#809 := [rewrite]: #805
#794 := (= #517 #515)
#787 := (= #516 0::int)
#645 := -3::int
#789 := (div 0::int -3::int)
#792 := (= #789 0::int)
#786 := [rewrite]: #792
#790 := (= #516 #789)
#646 := (= #430 -3::int)
#647 := [rewrite]: #646
#791 := [monotonicity #809 #647]: #790
#793 := [trans #791 #786]: #787
#788 := [monotonicity #793]: #794
#624 := [trans #788 #809]: #795
#627 := [monotonicity #624]: #626
#781 := [trans #627 #797]: #780
#784 := [monotonicity #781]: #783
#798 := (iff #518 #839)
#802 := (= #521 #54)
#800 := (= #521 #799)
#806 := (= #448 0::int)
#808 := (= #448 #515)
#529 := (= #520 0::int)
#807 := [rewrite]: #529
#523 := [monotonicity #807]: #808
#810 := [trans #523 #809]: #806
#801 := [monotonicity #810]: #800
#803 := [trans #801 #797]: #802
#804 := [monotonicity #803]: #798
#527 := (iff #506 false)
#811 := (or false false)
#816 := (iff #811 false)
#526 := [rewrite]: #816
#815 := (iff #506 #811)
#536 := (iff #838 false)
#829 := (not true)
#830 := (iff #829 false)
#828 := [rewrite]: #830
#813 := (iff #838 #829)
#543 := (iff #836 true)
#834 := (or true false)
#478 := (iff #834 true)
#819 := [rewrite]: #478
#541 := (iff #836 #834)
#484 := (iff #522 false)
#485 := [rewrite]: #484
#818 := (iff #501 true)
#540 := [rewrite]: #818
#542 := [monotonicity #540 #485]: #541
#436 := [trans #542 #819]: #543
#814 := [monotonicity #436]: #813
#537 := [trans #814 #828]: #536
#831 := (iff #832 false)
#469 := (iff #832 #829)
#464 := (iff #625 true)
#823 := (or false true)
#820 := (iff #823 true)
#826 := [rewrite]: #820
#824 := (iff #625 #823)
#821 := (iff #495 true)
#822 := [rewrite]: #821
#825 := [monotonicity #485 #822]: #824
#827 := [trans #825 #826]: #464
#470 := [monotonicity #827]: #469
#817 := [trans #470 #828]: #831
#812 := [monotonicity #817 #537]: #815
#528 := [trans #812 #526]: #527
#667 := [monotonicity #528 #804 #784]: #785
#776 := [trans #667 #669]: #628
#482 := (iff #842 true)
#494 := (iff #842 #834)
#493 := (iff #840 false)
#498 := [rewrite]: #493
#843 := (iff #841 true)
#833 := [rewrite]: #843
#835 := [monotonicity #833 #498]: #494
#483 := [trans #835 #819]: #482
#774 := [monotonicity #483 #776]: #773
#679 := [trans #774 #662]: #677
#684 := [monotonicity #679]: #683
#775 := [trans #684 #778]: #683
#682 := [quant-inst]: #681
#779 := [mp #682 #775]: #673
#691 := [unit-resolution #779 #850]: #839
#692 := [monotonicity #691]: #57
#58 := (not #57)
#270 := [asserted]: #58
[unit-resolution #270 #692]: false
unsat
2c035401970833955895c9fd35464fade49dcbf1 313 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#57 := (f5 0::int)
decl f4 :: (-> int int int)
#54 := 1::int
#53 := 3::int
#55 := (f4 3::int 1::int)
#56 := (f5 #55)
#58 := (= #56 #57)
#839 := (= #55 0::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#851 := (pattern #29)
#83 := -1::int
#87 := (* -1::int #9)
#84 := (* -1::int #8)
#142 := (mod #84 #87)
#363 := (+ #29 #142)
#364 := (= #363 0::int)
#30 := (mod #8 #9)
#360 := (* -1::int #30)
#361 := (+ #29 #360)
#362 := (= #361 0::int)
#109 := (<= #9 0::int)
#105 := (<= #8 0::int)
#302 := (or #105 #109)
#303 := (not #302)
#116 := (>= #8 0::int)
#285 := (or #109 #116)
#286 := (not #285)
#309 := (or #286 #303)
#365 := (ite #309 #362 #364)
#359 := (= #29 0::int)
#12 := (= #8 0::int)
#366 := (ite #12 #359 #365)
#358 := (= #8 #29)
#13 := (= #9 0::int)
#367 := (ite #13 #358 #366)
#852 := (forall (vars (?v0 int) (?v1 int)) (:pat #851) #367)
#370 := (forall (vars (?v0 int) (?v1 int)) #367)
#855 := (iff #370 #852)
#853 := (iff #367 #367)
#854 := [refl]: #853
#856 := [quant-intro #854]: #855
#148 := (* -1::int #142)
#327 := (ite #309 #30 #148)
#330 := (ite #12 0::int #327)
#333 := (ite #13 #8 #330)
#336 := (= #29 #333)
#339 := (forall (vars (?v0 int) (?v1 int)) #336)
#371 := (iff #339 #370)
#368 := (iff #336 #367)
#369 := [rewrite]: #368
#372 := [quant-intro #369]: #371
#117 := (not #116)
#110 := (not #109)
#120 := (and #110 #117)
#106 := (not #105)
#113 := (and #106 #110)
#123 := (or #113 #120)
#168 := (ite #123 #30 #148)
#171 := (ite #12 0::int #168)
#174 := (ite #13 #8 #171)
#177 := (= #29 #174)
#180 := (forall (vars (?v0 int) (?v1 int)) #177)
#340 := (iff #180 #339)
#337 := (iff #177 #336)
#334 := (= #174 #333)
#331 := (= #171 #330)
#328 := (= #168 #327)
#312 := (iff #123 #309)
#306 := (or #303 #286)
#310 := (iff #306 #309)
#311 := [rewrite]: #310
#307 := (iff #123 #306)
#304 := (iff #120 #286)
#305 := [rewrite]: #304
#283 := (iff #113 #303)
#284 := [rewrite]: #283
#308 := [monotonicity #284 #305]: #307
#313 := [trans #308 #311]: #312
#329 := [monotonicity #313]: #328
#332 := [monotonicity #329]: #331
#335 := [monotonicity #332]: #334
#338 := [monotonicity #335]: #337
#341 := [quant-intro #338]: #340
#275 := (~ #180 #180)
#272 := (~ #177 #177)
#291 := [refl]: #272
#276 := [nnf-pos #291]: #275
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#183 := (iff #37 #180)
#77 := (and #16 #18)
#80 := (or #17 #77)
#153 := (ite #80 #30 #148)
#156 := (ite #12 0::int #153)
#159 := (ite #13 #8 #156)
#162 := (= #29 #159)
#165 := (forall (vars (?v0 int) (?v1 int)) #162)
#181 := (iff #165 #180)
#178 := (iff #162 #177)
#175 := (= #159 #174)
#172 := (= #156 #171)
#169 := (= #153 #168)
#124 := (iff #80 #123)
#121 := (iff #77 #120)
#118 := (iff #18 #117)
#119 := [rewrite]: #118
#111 := (iff #16 #110)
#112 := [rewrite]: #111
#122 := [monotonicity #112 #119]: #121
#114 := (iff #17 #113)
#107 := (iff #15 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#125 := [monotonicity #115 #122]: #124
#170 := [monotonicity #125]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#182 := [quant-intro #179]: #181
#166 := (iff #37 #165)
#163 := (iff #36 #162)
#160 := (= #35 #159)
#157 := (= #34 #156)
#154 := (= #33 #153)
#151 := (= #32 #148)
#145 := (- #142)
#149 := (= #145 #148)
#150 := [rewrite]: #149
#146 := (= #32 #145)
#143 := (= #31 #142)
#88 := (= #23 #87)
#89 := [rewrite]: #88
#85 := (= #22 #84)
#86 := [rewrite]: #85
#144 := [monotonicity #86 #89]: #143
#147 := [monotonicity #144]: #146
#152 := [trans #147 #150]: #151
#81 := (iff #20 #80)
#78 := (iff #19 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#155 := [monotonicity #82 #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [quant-intro #164]: #166
#184 := [trans #167 #182]: #183
#141 := [asserted]: #37
#185 := [mp #141 #184]: #180
#292 := [mp~ #185 #276]: #180
#342 := [mp #292 #341]: #339
#373 := [mp #342 #372]: #370
#857 := [mp #373 #856]: #852
#685 := (not #852)
#778 := (or #685 #839)
#431 := (* -1::int 1::int)
#515 := (* -1::int 3::int)
#516 := (mod #515 #431)
#517 := (+ #55 #516)
#508 := (= #517 0::int)
#519 := (mod 3::int 1::int)
#520 := (* -1::int #519)
#521 := (+ #55 #520)
#518 := (= #521 0::int)
#522 := (<= 1::int 0::int)
#501 := (<= 3::int 0::int)
#836 := (or #501 #522)
#838 := (not #836)
#495 := (>= 3::int 0::int)
#625 := (or #522 #495)
#832 := (not #625)
#506 := (or #832 #838)
#507 := (ite #506 #518 #508)
#840 := (= 3::int 0::int)
#841 := (ite #840 #839 #507)
#842 := (= 3::int #55)
#837 := (= 1::int 0::int)
#843 := (ite #837 #842 #841)
#775 := (or #685 #843)
#766 := (iff #775 #778)
#760 := (iff #778 #778)
#757 := [rewrite]: #760
#683 := (iff #843 #839)
#834 := (= #55 3::int)
#679 := (ite false #834 #839)
#681 := (iff #679 #839)
#682 := [rewrite]: #681
#680 := (iff #843 #679)
#662 := (iff #841 #839)
#776 := (ite false #839 #839)
#774 := (iff #776 #839)
#777 := [rewrite]: #774
#678 := (iff #841 #776)
#669 := (iff #507 #839)
#1 := true
#784 := (ite true #839 #839)
#667 := (iff #784 #839)
#668 := [rewrite]: #667
#782 := (iff #507 #784)
#781 := (iff #508 #839)
#627 := (= #517 #55)
#800 := (+ #55 0::int)
#797 := (= #800 #55)
#802 := [rewrite]: #797
#624 := (= #517 #800)
#788 := (= #516 0::int)
#646 := -3::int
#792 := (mod -3::int -1::int)
#793 := (= #792 0::int)
#794 := [rewrite]: #793
#786 := (= #516 #792)
#790 := (= #431 -1::int)
#791 := [rewrite]: #790
#647 := (= #515 -3::int)
#789 := [rewrite]: #647
#787 := [monotonicity #789 #791]: #786
#795 := [trans #787 #794]: #788
#626 := [monotonicity #795]: #624
#780 := [trans #626 #802]: #627
#783 := [monotonicity #780]: #781
#804 := (iff #518 #839)
#803 := (= #521 #55)
#801 := (= #521 #800)
#810 := (= #520 0::int)
#808 := (* -1::int 0::int)
#809 := (= #808 0::int)
#806 := [rewrite]: #809
#523 := (= #520 #808)
#529 := (= #519 0::int)
#807 := [rewrite]: #529
#805 := [monotonicity #807]: #523
#799 := [trans #805 #806]: #810
#796 := [monotonicity #799]: #801
#798 := [trans #796 #802]: #803
#645 := [monotonicity #798]: #804
#527 := (iff #506 true)
#485 := (or false true)
#823 := (iff #485 true)
#824 := [rewrite]: #823
#816 := (iff #506 #485)
#815 := (iff #838 true)
#813 := (not false)
#537 := (iff #813 true)
#811 := [rewrite]: #537
#814 := (iff #838 #813)
#543 := (iff #836 false)
#817 := (or false false)
#541 := (iff #817 false)
#542 := [rewrite]: #541
#818 := (iff #836 #817)
#819 := (iff #522 false)
#482 := [rewrite]: #819
#828 := (iff #501 false)
#831 := [rewrite]: #828
#540 := [monotonicity #831 #482]: #818
#437 := [trans #540 #542]: #543
#536 := [monotonicity #437]: #814
#812 := [trans #536 #811]: #815
#470 := (iff #832 false)
#826 := (not true)
#829 := (iff #826 false)
#469 := [rewrite]: #829
#464 := (iff #832 #826)
#825 := (iff #625 true)
#821 := (iff #625 #485)
#483 := (iff #495 true)
#484 := [rewrite]: #483
#822 := [monotonicity #482 #484]: #821
#820 := [trans #822 #824]: #825
#827 := [monotonicity #820]: #464
#830 := [trans #827 #469]: #470
#526 := [monotonicity #830 #812]: #816
#528 := [trans #526 #824]: #527
#785 := [monotonicity #528 #645 #783]: #782
#628 := [trans #785 #668]: #669
#835 := (iff #840 false)
#478 := [rewrite]: #835
#773 := [monotonicity #478 #628]: #678
#677 := [trans #773 #777]: #662
#498 := (iff #842 #834)
#494 := [rewrite]: #498
#833 := (iff #837 false)
#493 := [rewrite]: #833
#673 := [monotonicity #493 #494 #677]: #680
#684 := [trans #673 #682]: #683
#768 := [monotonicity #684]: #766
#759 := [trans #768 #757]: #766
#779 := [quant-inst]: #775
#769 := [mp #779 #759]: #778
#701 := [unit-resolution #769 #857]: #839
#702 := [monotonicity #701]: #58
#59 := (not #58)
#271 := [asserted]: #59
[unit-resolution #271 #702]: false
unsat
ed1dcbda8b48a8192bb34e0311b0082775d33ed7 302 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#57 := (f5 0::int)
decl f3 :: (-> int int int)
#54 := 3::int
#53 := 1::int
#55 := (f3 1::int 3::int)
#56 := (f5 #55)
#58 := (= #56 #57)
#840 := (= #55 0::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#844 := (pattern #10)
#83 := -1::int
#87 := (* -1::int #9)
#84 := (* -1::int #8)
#90 := (div #84 #87)
#347 := (* -1::int #90)
#348 := (+ #10 #347)
#349 := (= #348 0::int)
#21 := (div #8 #9)
#344 := (* -1::int #21)
#345 := (+ #10 #344)
#346 := (= #345 0::int)
#109 := (<= #9 0::int)
#105 := (<= #8 0::int)
#302 := (or #105 #109)
#303 := (not #302)
#116 := (>= #8 0::int)
#285 := (or #109 #116)
#286 := (not #285)
#309 := (or #286 #303)
#350 := (ite #309 #346 #349)
#343 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#351 := (ite #14 #343 #350)
#845 := (forall (vars (?v0 int) (?v1 int)) (:pat #844) #351)
#354 := (forall (vars (?v0 int) (?v1 int)) #351)
#848 := (iff #354 #845)
#846 := (iff #351 #351)
#847 := [refl]: #846
#849 := [quant-intro #847]: #848
#314 := (ite #309 #21 #90)
#317 := (ite #14 0::int #314)
#320 := (= #10 #317)
#323 := (forall (vars (?v0 int) (?v1 int)) #320)
#355 := (iff #323 #354)
#352 := (iff #320 #351)
#353 := [rewrite]: #352
#356 := [quant-intro #353]: #355
#117 := (not #116)
#110 := (not #109)
#120 := (and #110 #117)
#106 := (not #105)
#113 := (and #106 #110)
#123 := (or #113 #120)
#126 := (ite #123 #21 #90)
#129 := (ite #14 0::int #126)
#132 := (= #10 #129)
#135 := (forall (vars (?v0 int) (?v1 int)) #132)
#324 := (iff #135 #323)
#321 := (iff #132 #320)
#318 := (= #129 #317)
#315 := (= #126 #314)
#312 := (iff #123 #309)
#306 := (or #303 #286)
#310 := (iff #306 #309)
#311 := [rewrite]: #310
#307 := (iff #123 #306)
#304 := (iff #120 #286)
#305 := [rewrite]: #304
#283 := (iff #113 #303)
#284 := [rewrite]: #283
#308 := [monotonicity #284 #305]: #307
#313 := [trans #308 #311]: #312
#316 := [monotonicity #313]: #315
#319 := [monotonicity #316]: #318
#322 := [monotonicity #319]: #321
#325 := [quant-intro #322]: #324
#289 := (~ #135 #135)
#287 := (~ #132 #132)
#288 := [refl]: #287
#290 := [nnf-pos #288]: #289
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#138 := (iff #28 #135)
#77 := (and #16 #18)
#80 := (or #17 #77)
#93 := (ite #80 #21 #90)
#96 := (ite #14 0::int #93)
#99 := (= #10 #96)
#102 := (forall (vars (?v0 int) (?v1 int)) #99)
#136 := (iff #102 #135)
#133 := (iff #99 #132)
#130 := (= #96 #129)
#127 := (= #93 #126)
#124 := (iff #80 #123)
#121 := (iff #77 #120)
#118 := (iff #18 #117)
#119 := [rewrite]: #118
#111 := (iff #16 #110)
#112 := [rewrite]: #111
#122 := [monotonicity #112 #119]: #121
#114 := (iff #17 #113)
#107 := (iff #15 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#125 := [monotonicity #115 #122]: #124
#128 := [monotonicity #125]: #127
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#137 := [quant-intro #134]: #136
#103 := (iff #28 #102)
#100 := (iff #27 #99)
#97 := (= #26 #96)
#94 := (= #25 #93)
#91 := (= #24 #90)
#88 := (= #23 #87)
#89 := [rewrite]: #88
#85 := (= #22 #84)
#86 := [rewrite]: #85
#92 := [monotonicity #86 #89]: #91
#81 := (iff #20 #80)
#78 := (iff #19 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#95 := [monotonicity #82 #92]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#104 := [quant-intro #101]: #103
#139 := [trans #104 #137]: #138
#76 := [asserted]: #28
#140 := [mp #76 #139]: #135
#274 := [mp~ #140 #290]: #135
#326 := [mp #274 #325]: #323
#357 := [mp #326 #356]: #354
#850 := [mp #357 #849]: #845
#759 := (not #845)
#769 := (or #759 #840)
#431 := (* -1::int 3::int)
#515 := (* -1::int 1::int)
#516 := (div #515 #431)
#517 := (* -1::int #516)
#508 := (+ #55 #517)
#519 := (= #508 0::int)
#520 := (div 1::int 3::int)
#521 := (* -1::int #520)
#518 := (+ #55 #521)
#522 := (= #518 0::int)
#501 := (<= 3::int 0::int)
#836 := (<= 1::int 0::int)
#838 := (or #836 #501)
#495 := (not #838)
#625 := (>= 1::int 0::int)
#832 := (or #501 #625)
#506 := (not #832)
#507 := (or #506 #495)
#839 := (ite #507 #522 #519)
#841 := (= 3::int 0::int)
#842 := (= 1::int 0::int)
#837 := (or #842 #841)
#843 := (ite #837 #840 #839)
#770 := (or #759 #843)
#767 := (iff #770 #769)
#761 := (iff #769 #769)
#762 := [rewrite]: #761
#760 := (iff #843 #840)
#778 := (ite false #840 #840)
#766 := (iff #778 #840)
#768 := [rewrite]: #766
#775 := (iff #843 #778)
#684 := (iff #839 #840)
#774 := (= #55 1::int)
#1 := true
#680 := (ite true #840 #774)
#682 := (iff #680 #840)
#683 := [rewrite]: #682
#673 := (iff #839 #680)
#677 := (iff #519 #774)
#785 := (+ -1::int #55)
#776 := (= #785 0::int)
#777 := (iff #776 #774)
#662 := [rewrite]: #777
#678 := (iff #519 #776)
#669 := (= #508 #785)
#783 := (+ #55 -1::int)
#667 := (= #783 #785)
#668 := [rewrite]: #667
#784 := (= #508 #783)
#780 := (= #517 -1::int)
#647 := (= #515 -1::int)
#789 := [rewrite]: #647
#626 := (= #517 #515)
#795 := (= #516 1::int)
#790 := -3::int
#786 := (div -1::int -3::int)
#794 := (= #786 1::int)
#788 := [rewrite]: #794
#787 := (= #516 #786)
#791 := (= #431 -3::int)
#792 := [rewrite]: #791
#793 := [monotonicity #789 #792]: #787
#624 := [trans #793 #788]: #795
#627 := [monotonicity #624]: #626
#781 := [trans #627 #789]: #780
#782 := [monotonicity #781]: #784
#628 := [trans #782 #668]: #669
#773 := [monotonicity #628]: #678
#679 := [trans #773 #662]: #677
#645 := (iff #522 #840)
#798 := (= #518 #55)
#801 := (+ #55 0::int)
#802 := (= #801 #55)
#803 := [rewrite]: #802
#796 := (= #518 #801)
#799 := (= #521 0::int)
#523 := (* -1::int 0::int)
#806 := (= #523 0::int)
#810 := [rewrite]: #806
#805 := (= #521 #523)
#807 := (= #520 0::int)
#808 := [rewrite]: #807
#809 := [monotonicity #808]: #805
#800 := [trans #809 #810]: #799
#797 := [monotonicity #800]: #796
#804 := [trans #797 #803]: #798
#646 := [monotonicity #804]: #645
#528 := (iff #507 true)
#824 := (or false true)
#826 := (iff #824 true)
#464 := [rewrite]: #826
#526 := (iff #507 #824)
#812 := (iff #495 true)
#814 := (not false)
#811 := (iff #814 true)
#815 := [rewrite]: #811
#536 := (iff #495 #814)
#437 := (iff #838 false)
#494 := (or false false)
#819 := (iff #494 false)
#482 := [rewrite]: #819
#542 := (iff #838 #494)
#485 := (iff #501 false)
#821 := [rewrite]: #485
#540 := (iff #836 false)
#541 := [rewrite]: #540
#543 := [monotonicity #541 #821]: #542
#813 := [trans #543 #482]: #437
#537 := [monotonicity #813]: #536
#816 := [trans #537 #815]: #812
#817 := (iff #506 false)
#469 := (not true)
#828 := (iff #469 false)
#831 := [rewrite]: #828
#470 := (iff #506 #469)
#827 := (iff #832 true)
#825 := (iff #832 #824)
#822 := (iff #625 true)
#823 := [rewrite]: #822
#820 := [monotonicity #821 #823]: #825
#829 := [trans #820 #464]: #827
#830 := [monotonicity #829]: #470
#818 := [trans #830 #831]: #817
#527 := [monotonicity #818 #816]: #526
#529 := [trans #527 #464]: #528
#681 := [monotonicity #529 #646 #679]: #673
#685 := [trans #681 #683]: #684
#483 := (iff #837 false)
#835 := (iff #837 #494)
#498 := (iff #841 false)
#834 := [rewrite]: #498
#833 := (iff #842 false)
#493 := [rewrite]: #833
#478 := [monotonicity #493 #834]: #835
#484 := [trans #478 #482]: #483
#779 := [monotonicity #484 #685]: #775
#757 := [trans #779 #768]: #760
#772 := [monotonicity #757]: #767
#763 := [trans #772 #762]: #767
#771 := [quant-inst]: #770
#764 := [mp #771 #763]: #769
#701 := [unit-resolution #764 #850]: #840
#702 := [monotonicity #701]: #58
#59 := (not #58)
#271 := [asserted]: #59
[unit-resolution #271 #702]: false
unsat
80ae46a7e9c57ab25c6d7a036d7583b3c508d2eb 447 0
#2 := false
#11 := 0::int
decl f6 :: (-> S2 int)
decl f7 :: S2
#53 := f7
#54 := (f6 f7)
#496 := (>= #54 0::int)
decl f5 :: (-> int S2)
#762 := (f5 #54)
#708 := (f6 #762)
#704 := (= #708 0::int)
#655 := (not #704)
#841 := (= #54 0::int)
#674 := (not #841)
#656 := (iff #674 #655)
#653 := (iff #841 #704)
#651 := (iff #704 #841)
#649 := (= #708 #54)
#643 := (= #762 f7)
#763 := (= f7 #762)
#38 := (:var 0 S2)
#39 := (f6 #38)
#859 := (pattern #39)
#40 := (f5 #39)
#188 := (= #38 #40)
#860 := (forall (vars (?v0 S2)) (:pat #859) #188)
#191 := (forall (vars (?v0 S2)) #188)
#861 := (iff #191 #860)
#863 := (iff #860 #860)
#864 := [rewrite]: #863
#862 := [rewrite]: #861
#865 := [trans #862 #864]: #861
#278 := (~ #191 #191)
#294 := (~ #188 #188)
#295 := [refl]: #294
#279 := [nnf-pos #295]: #278
#41 := (= #40 #38)
#42 := (forall (vars (?v0 S2)) #41)
#192 := (iff #42 #191)
#189 := (iff #41 #188)
#190 := [rewrite]: #189
#193 := [quant-intro #190]: #192
#187 := [asserted]: #42
#196 := [mp #187 #193]: #191
#296 := [mp~ #196 #279]: #191
#866 := [mp #296 #865]: #860
#759 := (not #860)
#766 := (or #759 #763)
#750 := [quant-inst]: #766
#688 := [unit-resolution #750 #866]: #763
#644 := [symm #688]: #643
#650 := [monotonicity #644]: #649
#652 := [monotonicity #650]: #651
#654 := [symm #652]: #653
#657 := [monotonicity #654]: #656
#486 := (not #496)
#673 := [hypothesis]: #486
#677 := (or #674 #496)
#687 := [th-lemma]: #677
#667 := [unit-resolution #687 #673]: #674
#658 := [mp #667 #657]: #655
#689 := (or #496 #704)
#9 := (:var 0 int)
#44 := (f5 #9)
#867 := (pattern #44)
#211 := (>= #9 0::int)
#45 := (f6 #44)
#50 := (= #45 0::int)
#261 := (or #50 #211)
#874 := (forall (vars (?v0 int)) (:pat #867) #261)
#266 := (forall (vars (?v0 int)) #261)
#877 := (iff #266 #874)
#875 := (iff #261 #261)
#876 := [refl]: #875
#878 := [quant-intro #876]: #877
#282 := (~ #266 #266)
#300 := (~ #261 #261)
#301 := [refl]: #300
#283 := [nnf-pos #301]: #282
#49 := (< #9 0::int)
#51 := (implies #49 #50)
#52 := (forall (vars (?v0 int)) #51)
#269 := (iff #52 #266)
#232 := (= 0::int #45)
#238 := (not #49)
#239 := (or #238 #232)
#244 := (forall (vars (?v0 int)) #239)
#267 := (iff #244 #266)
#264 := (iff #239 #261)
#258 := (or #211 #50)
#262 := (iff #258 #261)
#263 := [rewrite]: #262
#259 := (iff #239 #258)
#256 := (iff #232 #50)
#257 := [rewrite]: #256
#254 := (iff #238 #211)
#214 := (not #211)
#249 := (not #214)
#252 := (iff #249 #211)
#253 := [rewrite]: #252
#250 := (iff #238 #249)
#247 := (iff #49 #214)
#248 := [rewrite]: #247
#251 := [monotonicity #248]: #250
#255 := [trans #251 #253]: #254
#260 := [monotonicity #255 #257]: #259
#265 := [trans #260 #263]: #264
#268 := [quant-intro #265]: #267
#245 := (iff #52 #244)
#242 := (iff #51 #239)
#235 := (implies #49 #232)
#240 := (iff #235 #239)
#241 := [rewrite]: #240
#236 := (iff #51 #235)
#233 := (iff #50 #232)
#234 := [rewrite]: #233
#237 := [monotonicity #234]: #236
#243 := [trans #237 #241]: #242
#246 := [quant-intro #243]: #245
#270 := [trans #246 #268]: #269
#231 := [asserted]: #52
#271 := [mp #231 #270]: #266
#302 := [mp~ #271 #283]: #266
#879 := [mp #302 #878]: #874
#729 := (not #874)
#671 := (or #729 #496 #704)
#709 := (or #704 #496)
#695 := (or #729 #709)
#662 := (iff #695 #671)
#691 := (or #729 #689)
#672 := (iff #691 #671)
#631 := [rewrite]: #672
#697 := (iff #695 #691)
#635 := (iff #709 #689)
#690 := [rewrite]: #635
#665 := [monotonicity #690]: #697
#664 := [trans #665 #631]: #662
#696 := [quant-inst]: #695
#666 := [mp #696 #664]: #671
#675 := [unit-resolution #666 #879]: #689
#676 := [unit-resolution #675 #673]: #704
#659 := [unit-resolution #676 #658]: false
#660 := [lemma #659]: #496
#502 := (<= #54 0::int)
#830 := (not #502)
#625 := (or #486 #830 #841)
#684 := (not #625)
decl f4 :: (-> int int int)
#55 := 1::int
#56 := (f4 #54 1::int)
#840 := (= #56 0::int)
#760 := (not #840)
#58 := (f5 0::int)
#57 := (f5 #56)
#59 := (= #57 #58)
#645 := [hypothesis]: #840
#661 := [monotonicity #645]: #59
#60 := (not #59)
#272 := [asserted]: #60
#622 := [unit-resolution #272 #661]: false
#623 := [lemma #622]: #760
#632 := (or #684 #840)
#84 := -1::int
#516 := (* -1::int #54)
#809 := (mod #516 -1::int)
#810 := (+ #56 #809)
#800 := (= #810 0::int)
#781 := (ite #625 #840 #800)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#852 := (pattern #29)
#88 := (* -1::int #9)
#85 := (* -1::int #8)
#143 := (mod #85 #88)
#364 := (+ #29 #143)
#365 := (= #364 0::int)
#30 := (mod #8 #9)
#361 := (* -1::int #30)
#362 := (+ #29 #361)
#363 := (= #362 0::int)
#110 := (<= #9 0::int)
#106 := (<= #8 0::int)
#303 := (or #106 #110)
#304 := (not #303)
#117 := (>= #8 0::int)
#286 := (or #110 #117)
#287 := (not #286)
#310 := (or #287 #304)
#366 := (ite #310 #363 #365)
#360 := (= #29 0::int)
#12 := (= #8 0::int)
#367 := (ite #12 #360 #366)
#359 := (= #8 #29)
#13 := (= #9 0::int)
#368 := (ite #13 #359 #367)
#853 := (forall (vars (?v0 int) (?v1 int)) (:pat #852) #368)
#371 := (forall (vars (?v0 int) (?v1 int)) #368)
#856 := (iff #371 #853)
#854 := (iff #368 #368)
#855 := [refl]: #854
#857 := [quant-intro #855]: #856
#149 := (* -1::int #143)
#328 := (ite #310 #30 #149)
#331 := (ite #12 0::int #328)
#334 := (ite #13 #8 #331)
#337 := (= #29 #334)
#340 := (forall (vars (?v0 int) (?v1 int)) #337)
#372 := (iff #340 #371)
#369 := (iff #337 #368)
#370 := [rewrite]: #369
#373 := [quant-intro #370]: #372
#118 := (not #117)
#111 := (not #110)
#121 := (and #111 #118)
#107 := (not #106)
#114 := (and #107 #111)
#124 := (or #114 #121)
#169 := (ite #124 #30 #149)
#172 := (ite #12 0::int #169)
#175 := (ite #13 #8 #172)
#178 := (= #29 #175)
#181 := (forall (vars (?v0 int) (?v1 int)) #178)
#341 := (iff #181 #340)
#338 := (iff #178 #337)
#335 := (= #175 #334)
#332 := (= #172 #331)
#329 := (= #169 #328)
#313 := (iff #124 #310)
#307 := (or #304 #287)
#311 := (iff #307 #310)
#312 := [rewrite]: #311
#308 := (iff #124 #307)
#305 := (iff #121 #287)
#306 := [rewrite]: #305
#284 := (iff #114 #304)
#285 := [rewrite]: #284
#309 := [monotonicity #285 #306]: #308
#314 := [trans #309 #312]: #313
#330 := [monotonicity #314]: #329
#333 := [monotonicity #330]: #332
#336 := [monotonicity #333]: #335
#339 := [monotonicity #336]: #338
#342 := [quant-intro #339]: #341
#276 := (~ #181 #181)
#273 := (~ #178 #178)
#292 := [refl]: #273
#277 := [nnf-pos #292]: #276
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#184 := (iff #37 #181)
#78 := (and #16 #18)
#81 := (or #17 #78)
#154 := (ite #81 #30 #149)
#157 := (ite #12 0::int #154)
#160 := (ite #13 #8 #157)
#163 := (= #29 #160)
#166 := (forall (vars (?v0 int) (?v1 int)) #163)
#182 := (iff #166 #181)
#179 := (iff #163 #178)
#176 := (= #160 #175)
#173 := (= #157 #172)
#170 := (= #154 #169)
#125 := (iff #81 #124)
#122 := (iff #78 #121)
#119 := (iff #18 #118)
#120 := [rewrite]: #119
#112 := (iff #16 #111)
#113 := [rewrite]: #112
#123 := [monotonicity #113 #120]: #122
#115 := (iff #17 #114)
#108 := (iff #15 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#126 := [monotonicity #116 #123]: #125
#171 := [monotonicity #126]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#167 := (iff #37 #166)
#164 := (iff #36 #163)
#161 := (= #35 #160)
#158 := (= #34 #157)
#155 := (= #33 #154)
#152 := (= #32 #149)
#146 := (- #143)
#150 := (= #146 #149)
#151 := [rewrite]: #150
#147 := (= #32 #146)
#144 := (= #31 #143)
#89 := (= #23 #88)
#90 := [rewrite]: #89
#86 := (= #22 #85)
#87 := [rewrite]: #86
#145 := [monotonicity #87 #90]: #144
#148 := [monotonicity #145]: #147
#153 := [trans #148 #151]: #152
#82 := (iff #20 #81)
#79 := (iff #19 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#156 := [monotonicity #83 #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#185 := [trans #168 #183]: #184
#142 := [asserted]: #37
#186 := [mp #142 #185]: #181
#293 := [mp~ #186 #277]: #181
#343 := [mp #293 #342]: #340
#374 := [mp #343 #373]: #371
#858 := [mp #374 #857]: #853
#786 := (not #853)
#668 := (or #786 #781)
#432 := (* -1::int 1::int)
#517 := (mod #516 #432)
#518 := (+ #56 #517)
#509 := (= #518 0::int)
#520 := (mod #54 1::int)
#521 := (* -1::int #520)
#522 := (+ #56 #521)
#519 := (= #522 0::int)
#523 := (<= 1::int 0::int)
#837 := (or #502 #523)
#839 := (not #837)
#626 := (or #523 #496)
#833 := (not #626)
#507 := (or #833 #839)
#508 := (ite #507 #519 #509)
#842 := (ite #841 #840 #508)
#843 := (= #54 #56)
#838 := (= 1::int 0::int)
#844 := (ite #838 #843 #842)
#669 := (or #786 #844)
#629 := (iff #669 #668)
#679 := (iff #668 #668)
#774 := [rewrite]: #679
#785 := (iff #844 #781)
#831 := (or #486 #830)
#646 := (or #831 #841)
#647 := (ite #646 #840 #800)
#782 := (iff #647 #781)
#627 := (iff #646 #625)
#628 := [rewrite]: #627
#784 := [monotonicity #628]: #782
#789 := (iff #844 #647)
#793 := (ite false #843 #647)
#794 := (iff #793 #647)
#795 := [rewrite]: #794
#787 := (iff #844 #793)
#791 := (iff #842 #647)
#797 := (ite #831 #840 #800)
#804 := (ite #841 #840 #797)
#648 := (iff #804 #647)
#790 := [rewrite]: #648
#799 := (iff #842 #804)
#798 := (iff #508 #797)
#801 := (iff #509 #800)
#807 := (= #518 #810)
#524 := (= #517 #809)
#530 := (= #432 -1::int)
#808 := [rewrite]: #530
#806 := [monotonicity #808]: #524
#811 := [monotonicity #806]: #807
#802 := [monotonicity #811]: #801
#528 := (iff #519 #840)
#817 := (= #522 #56)
#537 := (+ #56 0::int)
#816 := (= #537 #56)
#813 := [rewrite]: #816
#538 := (= #522 #537)
#814 := (= #521 0::int)
#541 := (* -1::int 0::int)
#544 := (= #541 0::int)
#438 := [rewrite]: #544
#542 := (= #521 #541)
#818 := (= #520 0::int)
#819 := [rewrite]: #818
#543 := [monotonicity #819]: #542
#815 := [trans #543 #438]: #814
#812 := [monotonicity #815]: #538
#527 := [trans #812 #813]: #817
#529 := [monotonicity #527]: #528
#829 := (iff #507 #831)
#470 := (iff #839 #830)
#465 := (iff #837 #502)
#824 := (or #502 false)
#821 := (iff #824 #502)
#827 := [rewrite]: #821
#825 := (iff #837 #824)
#499 := (iff #523 false)
#835 := [rewrite]: #499
#826 := [monotonicity #835]: #825
#828 := [trans #826 #827]: #465
#471 := [monotonicity #828]: #470
#822 := (iff #833 #486)
#484 := (iff #626 #496)
#495 := (or false #496)
#820 := (iff #495 #496)
#483 := [rewrite]: #820
#836 := (iff #626 #495)
#479 := [monotonicity #835]: #836
#485 := [trans #479 #483]: #484
#823 := [monotonicity #485]: #822
#832 := [monotonicity #823 #471]: #829
#803 := [monotonicity #832 #529 #802]: #798
#805 := [monotonicity #803]: #799
#792 := [trans #805 #790]: #791
#834 := (iff #838 false)
#494 := [rewrite]: #834
#788 := [monotonicity #494 #792]: #787
#796 := [trans #788 #795]: #789
#783 := [trans #796 #784]: #785
#777 := [monotonicity #783]: #629
#775 := [trans #777 #774]: #629
#670 := [quant-inst]: #669
#778 := [mp #670 #775]: #668
#630 := [unit-resolution #778 #858]: #781
#780 := (not #781)
#767 := (or #780 #684 #840)
#769 := [def-axiom]: #767
#633 := [unit-resolution #769 #630]: #632
#634 := [unit-resolution #633 #623]: #684
#680 := (or #625 #502)
#681 := [def-axiom]: #680
#636 := [unit-resolution #681 #634]: #502
#682 := (or #625 #674)
#683 := [def-axiom]: #682
#637 := [unit-resolution #683 #634]: #674
#638 := (or #841 #830 #486)
#639 := [th-lemma]: #638
[unit-resolution #639 #637 #636 #660]: false
unsat
8f1427496ff61632aac173e792df93e6d2f8fec2 292 0
#2 := false
decl f5 :: (-> int S2)
#56 := 1::int
#57 := (f5 1::int)
decl f3 :: (-> int int int)
#53 := 3::int
#54 := (f3 3::int 3::int)
#55 := (f5 #54)
#58 := (= #55 #57)
#803 := (= #54 1::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#844 := (pattern #10)
#11 := 0::int
#83 := -1::int
#87 := (* -1::int #9)
#84 := (* -1::int #8)
#90 := (div #84 #87)
#347 := (* -1::int #90)
#348 := (+ #10 #347)
#349 := (= #348 0::int)
#21 := (div #8 #9)
#344 := (* -1::int #21)
#345 := (+ #10 #344)
#346 := (= #345 0::int)
#109 := (<= #9 0::int)
#105 := (<= #8 0::int)
#302 := (or #105 #109)
#303 := (not #302)
#116 := (>= #8 0::int)
#285 := (or #109 #116)
#286 := (not #285)
#309 := (or #286 #303)
#350 := (ite #309 #346 #349)
#343 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#351 := (ite #14 #343 #350)
#845 := (forall (vars (?v0 int) (?v1 int)) (:pat #844) #351)
#354 := (forall (vars (?v0 int) (?v1 int)) #351)
#848 := (iff #354 #845)
#846 := (iff #351 #351)
#847 := [refl]: #846
#849 := [quant-intro #847]: #848
#314 := (ite #309 #21 #90)
#317 := (ite #14 0::int #314)
#320 := (= #10 #317)
#323 := (forall (vars (?v0 int) (?v1 int)) #320)
#355 := (iff #323 #354)
#352 := (iff #320 #351)
#353 := [rewrite]: #352
#356 := [quant-intro #353]: #355
#117 := (not #116)
#110 := (not #109)
#120 := (and #110 #117)
#106 := (not #105)
#113 := (and #106 #110)
#123 := (or #113 #120)
#126 := (ite #123 #21 #90)
#129 := (ite #14 0::int #126)
#132 := (= #10 #129)
#135 := (forall (vars (?v0 int) (?v1 int)) #132)
#324 := (iff #135 #323)
#321 := (iff #132 #320)
#318 := (= #129 #317)
#315 := (= #126 #314)
#312 := (iff #123 #309)
#306 := (or #303 #286)
#310 := (iff #306 #309)
#311 := [rewrite]: #310
#307 := (iff #123 #306)
#304 := (iff #120 #286)
#305 := [rewrite]: #304
#283 := (iff #113 #303)
#284 := [rewrite]: #283
#308 := [monotonicity #284 #305]: #307
#313 := [trans #308 #311]: #312
#316 := [monotonicity #313]: #315
#319 := [monotonicity #316]: #318
#322 := [monotonicity #319]: #321
#325 := [quant-intro #322]: #324
#289 := (~ #135 #135)
#287 := (~ #132 #132)
#288 := [refl]: #287
#290 := [nnf-pos #288]: #289
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#138 := (iff #28 #135)
#77 := (and #16 #18)
#80 := (or #17 #77)
#93 := (ite #80 #21 #90)
#96 := (ite #14 0::int #93)
#99 := (= #10 #96)
#102 := (forall (vars (?v0 int) (?v1 int)) #99)
#136 := (iff #102 #135)
#133 := (iff #99 #132)
#130 := (= #96 #129)
#127 := (= #93 #126)
#124 := (iff #80 #123)
#121 := (iff #77 #120)
#118 := (iff #18 #117)
#119 := [rewrite]: #118
#111 := (iff #16 #110)
#112 := [rewrite]: #111
#122 := [monotonicity #112 #119]: #121
#114 := (iff #17 #113)
#107 := (iff #15 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#125 := [monotonicity #115 #122]: #124
#128 := [monotonicity #125]: #127
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#137 := [quant-intro #134]: #136
#103 := (iff #28 #102)
#100 := (iff #27 #99)
#97 := (= #26 #96)
#94 := (= #25 #93)
#91 := (= #24 #90)
#88 := (= #23 #87)
#89 := [rewrite]: #88
#85 := (= #22 #84)
#86 := [rewrite]: #85
#92 := [monotonicity #86 #89]: #91
#81 := (iff #20 #80)
#78 := (iff #19 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#95 := [monotonicity #82 #92]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#104 := [quant-intro #101]: #103
#139 := [trans #104 #137]: #138
#76 := [asserted]: #28
#140 := [mp #76 #139]: #135
#274 := [mp~ #140 #290]: #135
#326 := [mp #274 #325]: #323
#357 := [mp #326 #356]: #354
#850 := [mp #357 #849]: #845
#683 := (not #845)
#684 := (or #683 #803)
#431 := (* -1::int 3::int)
#515 := (div #431 #431)
#516 := (* -1::int #515)
#517 := (+ #54 #516)
#508 := (= #517 0::int)
#519 := (div 3::int 3::int)
#520 := (* -1::int #519)
#521 := (+ #54 #520)
#518 := (= #521 0::int)
#522 := (<= 3::int 0::int)
#501 := (or #522 #522)
#836 := (not #501)
#838 := (>= 3::int 0::int)
#495 := (or #522 #838)
#625 := (not #495)
#832 := (or #625 #836)
#506 := (ite #832 #518 #508)
#507 := (= #54 0::int)
#839 := (= 3::int 0::int)
#840 := (or #839 #839)
#841 := (ite #840 #507 #506)
#685 := (or #683 #841)
#775 := (iff #685 #684)
#766 := (iff #684 #684)
#768 := [rewrite]: #766
#681 := (iff #841 #803)
#662 := (ite false #507 #803)
#680 := (iff #662 #803)
#673 := [rewrite]: #680
#677 := (iff #841 #662)
#774 := (iff #506 #803)
#1 := true
#669 := (ite true #803 #803)
#678 := (iff #669 #803)
#773 := [rewrite]: #678
#628 := (iff #506 #669)
#667 := (iff #508 #803)
#806 := (+ -1::int #54)
#796 := (= #806 0::int)
#798 := (iff #796 #803)
#804 := [rewrite]: #798
#782 := (iff #508 #796)
#783 := (= #517 #806)
#523 := (+ #54 -1::int)
#810 := (= #523 #806)
#799 := [rewrite]: #810
#780 := (= #517 #523)
#626 := (= #516 -1::int)
#816 := (* -1::int 1::int)
#528 := (= #816 -1::int)
#529 := [rewrite]: #528
#795 := (= #516 #816)
#794 := (= #515 1::int)
#647 := -3::int
#791 := (div -3::int -3::int)
#787 := (= #791 1::int)
#793 := [rewrite]: #787
#792 := (= #515 #791)
#789 := (= #431 -3::int)
#790 := [rewrite]: #789
#786 := [monotonicity #790 #790]: #792
#788 := [trans #786 #793]: #794
#624 := [monotonicity #788]: #795
#627 := [trans #624 #529]: #626
#781 := [monotonicity #627]: #780
#784 := [trans #781 #799]: #783
#785 := [monotonicity #784]: #782
#668 := [trans #785 #804]: #667
#645 := (iff #518 #803)
#797 := (iff #518 #796)
#800 := (= #521 #806)
#805 := (= #521 #523)
#807 := (= #520 -1::int)
#526 := (= #520 #816)
#815 := (= #519 1::int)
#812 := [rewrite]: #815
#527 := [monotonicity #812]: #526
#808 := [trans #527 #529]: #807
#809 := [monotonicity #808]: #805
#801 := [trans #809 #799]: #800
#802 := [monotonicity #801]: #797
#646 := [trans #802 #804]: #645
#537 := (iff #832 true)
#484 := (or false true)
#822 := (iff #484 true)
#823 := [rewrite]: #822
#814 := (iff #832 #484)
#437 := (iff #836 true)
#818 := (not false)
#542 := (iff #818 true)
#543 := [rewrite]: #542
#540 := (iff #836 #818)
#831 := (iff #501 false)
#843 := (or false false)
#498 := (iff #843 false)
#834 := [rewrite]: #498
#830 := (iff #501 #843)
#478 := (iff #522 false)
#819 := [rewrite]: #478
#828 := [monotonicity #819 #819]: #830
#817 := [trans #828 #834]: #831
#541 := [monotonicity #817]: #540
#813 := [trans #541 #543]: #437
#469 := (iff #625 false)
#820 := (not true)
#827 := (iff #820 false)
#829 := [rewrite]: #827
#826 := (iff #625 #820)
#824 := (iff #495 true)
#485 := (iff #495 #484)
#482 := (iff #838 true)
#483 := [rewrite]: #482
#821 := [monotonicity #819 #483]: #485
#825 := [trans #821 #823]: #824
#464 := [monotonicity #825]: #826
#470 := [trans #464 #829]: #469
#536 := [monotonicity #470 #813]: #814
#811 := [trans #536 #823]: #537
#776 := [monotonicity #811 #646 #668]: #628
#777 := [trans #776 #773]: #774
#494 := (iff #840 false)
#833 := (iff #840 #843)
#842 := (iff #839 false)
#837 := [rewrite]: #842
#493 := [monotonicity #837 #837]: #833
#835 := [trans #493 #834]: #494
#679 := [monotonicity #835 #777]: #677
#682 := [trans #679 #673]: #681
#779 := [monotonicity #682]: #775
#760 := [trans #779 #768]: #775
#778 := [quant-inst]: #685
#757 := [mp #778 #760]: #684
#700 := [unit-resolution #757 #850]: #803
#701 := [monotonicity #700]: #58
#59 := (not #58)
#271 := [asserted]: #59
[unit-resolution #271 #701]: false
unsat
d3447cf6898d788767aea97d325e514adc5f9e24 538 0
#2 := false
#11 := 0::int
decl f6 :: (-> S2 int)
decl f5 :: (-> int S2)
decl f3 :: (-> int int int)
#55 := 3::int
decl f7 :: S2
#53 := f7
#54 := (f6 f7)
#56 := (f3 #54 3::int)
#57 := (f5 #56)
#58 := (f6 #57)
#781 := (= #58 0::int)
#850 := (= #56 0::int)
#852 := (= #54 0::int)
#804 := (mod #54 3::int)
#84 := -1::int
#715 := (* -1::int #804)
#531 := (div #54 3::int)
#447 := -3::int
#710 := (* -3::int #531)
#711 := (+ #710 #715)
#712 := (+ #54 #711)
#718 := (>= #712 0::int)
#709 := (= #712 0::int)
#1 := true
#75 := [true-axiom]: true
#662 := (or false #709)
#663 := [th-lemma]: #662
#664 := [unit-resolution #663 #75]: #709
#665 := (not #709)
#666 := (or #665 #718)
#667 := [th-lemma]: #666
#668 := [unit-resolution #667 #664]: #718
#277 := (* -1::int #58)
#278 := (+ #54 #277)
#276 := (>= #278 0::int)
#280 := (not #276)
#59 := (<= #58 #54)
#60 := (not #59)
#281 := (iff #60 #280)
#275 := (iff #59 #276)
#279 := [rewrite]: #275
#282 := [monotonicity #279]: #281
#272 := [asserted]: #60
#283 := [mp #272 #282]: #280
#776 := (+ #56 #277)
#761 := (>= #776 0::int)
#770 := (= #56 #58)
#777 := (>= #56 0::int)
#624 := (not #781)
#742 := (<= #58 0::int)
#634 := (not #742)
#506 := (>= #54 0::int)
#693 := (f5 #54)
#744 := (f6 #693)
#745 := (= #744 0::int)
#646 := (not #745)
#689 := (not #852)
#647 := (iff #689 #646)
#643 := (iff #852 #745)
#640 := (iff #745 #852)
#632 := (= #744 #54)
#655 := (= #693 f7)
#694 := (= f7 #693)
#38 := (:var 0 S2)
#39 := (f6 #38)
#869 := (pattern #39)
#40 := (f5 #39)
#188 := (= #38 #40)
#870 := (forall (vars (?v0 S2)) (:pat #869) #188)
#191 := (forall (vars (?v0 S2)) #188)
#871 := (iff #191 #870)
#873 := (iff #870 #870)
#874 := [rewrite]: #873
#872 := [rewrite]: #871
#875 := [trans #872 #874]: #871
#287 := (~ #191 #191)
#303 := (~ #188 #188)
#304 := [refl]: #303
#288 := [nnf-pos #304]: #287
#41 := (= #40 #38)
#42 := (forall (vars (?v0 S2)) #41)
#192 := (iff #42 #191)
#189 := (iff #41 #188)
#190 := [rewrite]: #189
#193 := [quant-intro #190]: #192
#187 := [asserted]: #42
#196 := [mp #187 #193]: #191
#305 := [mp~ #196 #288]: #191
#876 := [mp #305 #875]: #870
#789 := (not #870)
#786 := (or #789 #694)
#790 := [quant-inst]: #786
#670 := [unit-resolution #790 #876]: #694
#671 := [symm #670]: #655
#633 := [monotonicity #671]: #632
#642 := [monotonicity #633]: #640
#644 := [symm #642]: #643
#648 := [monotonicity #644]: #647
#669 := [hypothesis]: #689
#649 := [mp #669 #648]: #646
#747 := (or #506 #745)
#9 := (:var 0 int)
#44 := (f5 #9)
#877 := (pattern #44)
#211 := (>= #9 0::int)
#45 := (f6 #44)
#50 := (= #45 0::int)
#261 := (or #50 #211)
#884 := (forall (vars (?v0 int)) (:pat #877) #261)
#266 := (forall (vars (?v0 int)) #261)
#887 := (iff #266 #884)
#885 := (iff #261 #261)
#886 := [refl]: #885
#888 := [quant-intro #886]: #887
#291 := (~ #266 #266)
#309 := (~ #261 #261)
#310 := [refl]: #309
#292 := [nnf-pos #310]: #291
#49 := (< #9 0::int)
#51 := (implies #49 #50)
#52 := (forall (vars (?v0 int)) #51)
#269 := (iff #52 #266)
#232 := (= 0::int #45)
#238 := (not #49)
#239 := (or #238 #232)
#244 := (forall (vars (?v0 int)) #239)
#267 := (iff #244 #266)
#264 := (iff #239 #261)
#258 := (or #211 #50)
#262 := (iff #258 #261)
#263 := [rewrite]: #262
#259 := (iff #239 #258)
#256 := (iff #232 #50)
#257 := [rewrite]: #256
#254 := (iff #238 #211)
#214 := (not #211)
#249 := (not #214)
#252 := (iff #249 #211)
#253 := [rewrite]: #252
#250 := (iff #238 #249)
#247 := (iff #49 #214)
#248 := [rewrite]: #247
#251 := [monotonicity #248]: #250
#255 := [trans #251 #253]: #254
#260 := [monotonicity #255 #257]: #259
#265 := [trans #260 #263]: #264
#268 := [quant-intro #265]: #267
#245 := (iff #52 #244)
#242 := (iff #51 #239)
#235 := (implies #49 #232)
#240 := (iff #235 #239)
#241 := [rewrite]: #240
#236 := (iff #51 #235)
#233 := (iff #50 #232)
#234 := [rewrite]: #233
#237 := [monotonicity #234]: #236
#243 := [trans #237 #241]: #242
#246 := [quant-intro #243]: #245
#270 := [trans #246 #268]: #269
#231 := [asserted]: #52
#271 := [mp #231 #270]: #266
#311 := [mp~ #271 #292]: #266
#889 := [mp #311 #888]: #884
#766 := (not #884)
#750 := (or #766 #506 #745)
#746 := (or #745 #506)
#751 := (or #766 #746)
#735 := (iff #751 #750)
#752 := (or #766 #747)
#733 := (iff #752 #750)
#734 := [rewrite]: #733
#730 := (iff #751 #752)
#748 := (iff #746 #747)
#749 := [rewrite]: #748
#731 := [monotonicity #749]: #730
#736 := [trans #731 #734]: #735
#741 := [quant-inst]: #751
#737 := [mp #741 #736]: #750
#650 := [unit-resolution #737 #889]: #747
#651 := [unit-resolution #650 #649]: #506
#831 := (not #506)
#652 := (or #634 #831 #276)
#622 := [th-lemma]: #652
#623 := [unit-resolution #622 #651 #283]: #634
#625 := (or #624 #742)
#627 := [th-lemma]: #625
#628 := [unit-resolution #627 #623]: #624
#763 := (or #777 #781)
#762 := (or #766 #777 #781)
#782 := (or #781 #777)
#767 := (or #766 #782)
#759 := (iff #767 #762)
#754 := (or #766 #763)
#758 := (iff #754 #762)
#755 := [rewrite]: #758
#756 := (iff #767 #754)
#764 := (iff #782 #763)
#765 := [rewrite]: #764
#757 := [monotonicity #765]: #756
#739 := [trans #757 #755]: #759
#753 := [quant-inst]: #767
#740 := [mp #753 #739]: #762
#629 := [unit-resolution #740 #889]: #763
#472 := [unit-resolution #629 #628]: #777
#779 := (not #777)
#780 := (or #770 #779)
#195 := (= #9 #45)
#220 := (or #195 #214)
#878 := (forall (vars (?v0 int)) (:pat #877) #220)
#225 := (forall (vars (?v0 int)) #220)
#881 := (iff #225 #878)
#879 := (iff #220 #220)
#880 := [refl]: #879
#882 := [quant-intro #880]: #881
#289 := (~ #225 #225)
#306 := (~ #220 #220)
#307 := [refl]: #306
#290 := [nnf-pos #307]: #289
#46 := (= #45 #9)
#43 := (<= 0::int #9)
#47 := (implies #43 #46)
#48 := (forall (vars (?v0 int)) #47)
#228 := (iff #48 #225)
#202 := (not #43)
#203 := (or #202 #195)
#208 := (forall (vars (?v0 int)) #203)
#226 := (iff #208 #225)
#223 := (iff #203 #220)
#217 := (or #214 #195)
#221 := (iff #217 #220)
#222 := [rewrite]: #221
#218 := (iff #203 #217)
#215 := (iff #202 #214)
#212 := (iff #43 #211)
#213 := [rewrite]: #212
#216 := [monotonicity #213]: #215
#219 := [monotonicity #216]: #218
#224 := [trans #219 #222]: #223
#227 := [quant-intro #224]: #226
#209 := (iff #48 #208)
#206 := (iff #47 #203)
#199 := (implies #43 #195)
#204 := (iff #199 #203)
#205 := [rewrite]: #204
#200 := (iff #47 #199)
#197 := (iff #46 #195)
#198 := [rewrite]: #197
#201 := [monotonicity #198]: #200
#207 := [trans #201 #205]: #206
#210 := [quant-intro #207]: #209
#229 := [trans #210 #227]: #228
#194 := [asserted]: #48
#230 := [mp #194 #229]: #225
#308 := [mp~ #230 #290]: #225
#883 := [mp #308 #882]: #878
#778 := (not #878)
#783 := (or #778 #770 #779)
#772 := (or #778 #780)
#774 := (iff #772 #783)
#775 := [rewrite]: #774
#773 := [quant-inst]: #772
#769 := [mp #773 #775]: #783
#630 := [unit-resolution #769 #883]: #780
#626 := [unit-resolution #630 #472]: #770
#631 := (not #770)
#610 := (or #631 #761)
#613 := [th-lemma]: #610
#617 := [unit-resolution #613 #626]: #761
#459 := (* -1::int #531)
#532 := (+ #56 #459)
#805 := (<= #532 0::int)
#529 := (= #532 0::int)
#526 := (* -1::int #54)
#547 := (div #526 -3::int)
#826 := (* -1::int #547)
#537 := (+ #56 #826)
#540 := (= #537 0::int)
#512 := (<= #54 0::int)
#828 := (not #512)
#552 := (or #831 #828)
#534 := (ite #552 #529 #540)
#620 := (or #852 #534)
#817 := (ite #852 #850 #534)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#855 := (pattern #10)
#88 := (* -1::int #9)
#85 := (* -1::int #8)
#91 := (div #85 #88)
#357 := (* -1::int #91)
#358 := (+ #10 #357)
#359 := (= #358 0::int)
#21 := (div #8 #9)
#354 := (* -1::int #21)
#355 := (+ #10 #354)
#356 := (= #355 0::int)
#110 := (<= #9 0::int)
#106 := (<= #8 0::int)
#312 := (or #106 #110)
#313 := (not #312)
#117 := (>= #8 0::int)
#295 := (or #110 #117)
#296 := (not #295)
#319 := (or #296 #313)
#360 := (ite #319 #356 #359)
#353 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#361 := (ite #14 #353 #360)
#856 := (forall (vars (?v0 int) (?v1 int)) (:pat #855) #361)
#364 := (forall (vars (?v0 int) (?v1 int)) #361)
#859 := (iff #364 #856)
#857 := (iff #361 #361)
#858 := [refl]: #857
#860 := [quant-intro #858]: #859
#324 := (ite #319 #21 #91)
#327 := (ite #14 0::int #324)
#330 := (= #10 #327)
#333 := (forall (vars (?v0 int) (?v1 int)) #330)
#365 := (iff #333 #364)
#362 := (iff #330 #361)
#363 := [rewrite]: #362
#366 := [quant-intro #363]: #365
#118 := (not #117)
#111 := (not #110)
#121 := (and #111 #118)
#107 := (not #106)
#114 := (and #107 #111)
#124 := (or #114 #121)
#127 := (ite #124 #21 #91)
#130 := (ite #14 0::int #127)
#133 := (= #10 #130)
#136 := (forall (vars (?v0 int) (?v1 int)) #133)
#334 := (iff #136 #333)
#331 := (iff #133 #330)
#328 := (= #130 #327)
#325 := (= #127 #324)
#322 := (iff #124 #319)
#316 := (or #313 #296)
#320 := (iff #316 #319)
#321 := [rewrite]: #320
#317 := (iff #124 #316)
#314 := (iff #121 #296)
#315 := [rewrite]: #314
#293 := (iff #114 #313)
#294 := [rewrite]: #293
#318 := [monotonicity #294 #315]: #317
#323 := [trans #318 #321]: #322
#326 := [monotonicity #323]: #325
#329 := [monotonicity #326]: #328
#332 := [monotonicity #329]: #331
#335 := [quant-intro #332]: #334
#299 := (~ #136 #136)
#297 := (~ #133 #133)
#298 := [refl]: #297
#300 := [nnf-pos #298]: #299
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#139 := (iff #28 #136)
#78 := (and #16 #18)
#81 := (or #17 #78)
#94 := (ite #81 #21 #91)
#97 := (ite #14 0::int #94)
#100 := (= #10 #97)
#103 := (forall (vars (?v0 int) (?v1 int)) #100)
#137 := (iff #103 #136)
#134 := (iff #100 #133)
#131 := (= #97 #130)
#128 := (= #94 #127)
#125 := (iff #81 #124)
#122 := (iff #78 #121)
#119 := (iff #18 #118)
#120 := [rewrite]: #119
#112 := (iff #16 #111)
#113 := [rewrite]: #112
#123 := [monotonicity #113 #120]: #122
#115 := (iff #17 #114)
#108 := (iff #15 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#126 := [monotonicity #116 #123]: #125
#129 := [monotonicity #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [quant-intro #135]: #137
#104 := (iff #28 #103)
#101 := (iff #27 #100)
#98 := (= #26 #97)
#95 := (= #25 #94)
#92 := (= #24 #91)
#89 := (= #23 #88)
#90 := [rewrite]: #89
#86 := (= #22 #85)
#87 := [rewrite]: #86
#93 := [monotonicity #87 #90]: #92
#82 := (iff #20 #81)
#79 := (iff #19 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#96 := [monotonicity #83 #93]: #95
#99 := [monotonicity #96]: #98
#102 := [monotonicity #99]: #101
#105 := [quant-intro #102]: #104
#140 := [trans #105 #138]: #139
#77 := [asserted]: #28
#141 := [mp #77 #140]: #136
#284 := [mp~ #141 #300]: #136
#336 := [mp #284 #335]: #333
#367 := [mp #336 #366]: #364
#861 := [mp #367 #860]: #856
#811 := (not #856)
#812 := (or #811 #817)
#441 := (* -1::int 3::int)
#527 := (div #526 #441)
#528 := (* -1::int #527)
#519 := (+ #56 #528)
#530 := (= #519 0::int)
#533 := (<= 3::int 0::int)
#847 := (or #512 #533)
#849 := (not #847)
#636 := (or #533 #506)
#843 := (not #636)
#517 := (or #843 #849)
#518 := (ite #517 #529 #530)
#851 := (= 3::int 0::int)
#853 := (or #852 #851)
#848 := (ite #853 #850 #518)
#807 := (or #811 #848)
#813 := (iff #807 #812)
#809 := (iff #812 #812)
#815 := [rewrite]: #809
#821 := (iff #848 #817)
#816 := (iff #518 #534)
#818 := (iff #530 #540)
#538 := (= #519 #537)
#823 := (= #528 #826)
#548 := (= #527 #547)
#824 := (= #441 -3::int)
#825 := [rewrite]: #824
#822 := [monotonicity #825]: #548
#827 := [monotonicity #822]: #823
#539 := [monotonicity #827]: #538
#819 := [monotonicity #539]: #818
#553 := (iff #517 #552)
#829 := (iff #849 #828)
#839 := (iff #847 #512)
#838 := (or #512 false)
#481 := (iff #838 #512)
#841 := [rewrite]: #481
#840 := (iff #847 #838)
#493 := (iff #533 false)
#494 := [rewrite]: #493
#480 := [monotonicity #494]: #840
#842 := [trans #480 #841]: #839
#551 := [monotonicity #842]: #829
#837 := (iff #843 #831)
#835 := (iff #636 #506)
#495 := (or false #506)
#833 := (iff #495 #506)
#834 := [rewrite]: #833
#496 := (iff #636 #495)
#832 := [monotonicity #494]: #496
#836 := [trans #832 #834]: #835
#475 := [monotonicity #836]: #837
#554 := [monotonicity #475 #551]: #553
#820 := [monotonicity #554 #819]: #816
#489 := (iff #853 #852)
#504 := (or #852 false)
#505 := (iff #504 #852)
#846 := [rewrite]: #505
#509 := (iff #853 #504)
#854 := (iff #851 false)
#844 := [rewrite]: #854
#845 := [monotonicity #844]: #509
#830 := [trans #845 #846]: #489
#810 := [monotonicity #830 #820]: #821
#814 := [monotonicity #810]: #813
#656 := [trans #814 #815]: #813
#808 := [quant-inst]: #807
#657 := [mp #808 #656]: #812
#619 := [unit-resolution #657 #861]: #817
#787 := (not #817)
#788 := (or #787 #852 #534)
#673 := [def-axiom]: #788
#618 := [unit-resolution #673 #619]: #620
#621 := [unit-resolution #618 #669]: #534
#609 := (or #852 #828 #831)
#612 := [th-lemma]: #609
#614 := [unit-resolution #612 #651 #669]: #828
#801 := (or #552 #512)
#802 := [def-axiom]: #801
#615 := [unit-resolution #802 #614]: #552
#803 := (not #552)
#638 := (not #534)
#791 := (or #638 #803 #529)
#792 := [def-axiom]: #791
#611 := [unit-resolution #792 #615 #621]: #529
#793 := (not #529)
#616 := (or #793 #805)
#606 := [th-lemma]: #616
#596 := [unit-resolution #606 #611]: #805
#714 := (>= #804 0::int)
#598 := (or false #714)
#599 := [th-lemma]: #598
#602 := [unit-resolution #599 #75]: #714
#603 := [th-lemma #651 #602 #596 #617 #283 #668]: false
#607 := [lemma #603]: #852
#717 := (or #689 #850)
#784 := (or #787 #689 #850)
#785 := [def-axiom]: #784
#600 := [unit-resolution #785 #619]: #717
#608 := [unit-resolution #600 #607]: #850
#605 := (= #58 #56)
#653 := (or #689 #506)
#654 := [th-lemma]: #653
#659 := [unit-resolution #654 #607]: #506
#660 := [unit-resolution #622 #659 #283]: #634
#661 := [unit-resolution #627 #660]: #624
#601 := [unit-resolution #629 #661]: #777
#604 := [unit-resolution #630 #601]: #770
#591 := [symm #604]: #605
#593 := [trans #591 #608]: #781
[unit-resolution #661 #593]: false
unsat
124e92a80da0b0c9c6ea2fb487ed064cc0c65420 305 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#56 := (f5 0::int)
decl f4 :: (-> int int int)
#53 := 3::int
#54 := (f4 0::int 3::int)
#55 := (f5 #54)
#57 := (= #55 #56)
#507 := (= #54 0::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#851 := (pattern #29)
#82 := -1::int
#86 := (* -1::int #9)
#83 := (* -1::int #8)
#141 := (mod #83 #86)
#362 := (+ #29 #141)
#363 := (= #362 0::int)
#30 := (mod #8 #9)
#359 := (* -1::int #30)
#360 := (+ #29 #359)
#361 := (= #360 0::int)
#108 := (<= #9 0::int)
#104 := (<= #8 0::int)
#301 := (or #104 #108)
#302 := (not #301)
#115 := (>= #8 0::int)
#284 := (or #108 #115)
#285 := (not #284)
#308 := (or #285 #302)
#364 := (ite #308 #361 #363)
#358 := (= #29 0::int)
#12 := (= #8 0::int)
#365 := (ite #12 #358 #364)
#357 := (= #8 #29)
#13 := (= #9 0::int)
#366 := (ite #13 #357 #365)
#852 := (forall (vars (?v0 int) (?v1 int)) (:pat #851) #366)
#369 := (forall (vars (?v0 int) (?v1 int)) #366)
#855 := (iff #369 #852)
#853 := (iff #366 #366)
#854 := [refl]: #853
#856 := [quant-intro #854]: #855
#147 := (* -1::int #141)
#326 := (ite #308 #30 #147)
#329 := (ite #12 0::int #326)
#332 := (ite #13 #8 #329)
#335 := (= #29 #332)
#338 := (forall (vars (?v0 int) (?v1 int)) #335)
#370 := (iff #338 #369)
#367 := (iff #335 #366)
#368 := [rewrite]: #367
#371 := [quant-intro #368]: #370
#116 := (not #115)
#109 := (not #108)
#119 := (and #109 #116)
#105 := (not #104)
#112 := (and #105 #109)
#122 := (or #112 #119)
#167 := (ite #122 #30 #147)
#170 := (ite #12 0::int #167)
#173 := (ite #13 #8 #170)
#176 := (= #29 #173)
#179 := (forall (vars (?v0 int) (?v1 int)) #176)
#339 := (iff #179 #338)
#336 := (iff #176 #335)
#333 := (= #173 #332)
#330 := (= #170 #329)
#327 := (= #167 #326)
#311 := (iff #122 #308)
#305 := (or #302 #285)
#309 := (iff #305 #308)
#310 := [rewrite]: #309
#306 := (iff #122 #305)
#303 := (iff #119 #285)
#304 := [rewrite]: #303
#282 := (iff #112 #302)
#283 := [rewrite]: #282
#307 := [monotonicity #283 #304]: #306
#312 := [trans #307 #310]: #311
#328 := [monotonicity #312]: #327
#331 := [monotonicity #328]: #330
#334 := [monotonicity #331]: #333
#337 := [monotonicity #334]: #336
#340 := [quant-intro #337]: #339
#274 := (~ #179 #179)
#271 := (~ #176 #176)
#290 := [refl]: #271
#275 := [nnf-pos #290]: #274
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#182 := (iff #37 #179)
#76 := (and #16 #18)
#79 := (or #17 #76)
#152 := (ite #79 #30 #147)
#155 := (ite #12 0::int #152)
#158 := (ite #13 #8 #155)
#161 := (= #29 #158)
#164 := (forall (vars (?v0 int) (?v1 int)) #161)
#180 := (iff #164 #179)
#177 := (iff #161 #176)
#174 := (= #158 #173)
#171 := (= #155 #170)
#168 := (= #152 #167)
#123 := (iff #79 #122)
#120 := (iff #76 #119)
#117 := (iff #18 #116)
#118 := [rewrite]: #117
#110 := (iff #16 #109)
#111 := [rewrite]: #110
#121 := [monotonicity #111 #118]: #120
#113 := (iff #17 #112)
#106 := (iff #15 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#124 := [monotonicity #114 #121]: #123
#169 := [monotonicity #124]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [quant-intro #178]: #180
#165 := (iff #37 #164)
#162 := (iff #36 #161)
#159 := (= #35 #158)
#156 := (= #34 #155)
#153 := (= #33 #152)
#150 := (= #32 #147)
#144 := (- #141)
#148 := (= #144 #147)
#149 := [rewrite]: #148
#145 := (= #32 #144)
#142 := (= #31 #141)
#87 := (= #23 #86)
#88 := [rewrite]: #87
#84 := (= #22 #83)
#85 := [rewrite]: #84
#143 := [monotonicity #85 #88]: #142
#146 := [monotonicity #143]: #145
#151 := [trans #146 #149]: #150
#80 := (iff #20 #79)
#77 := (iff #19 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#154 := [monotonicity #81 #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#183 := [trans #166 #181]: #182
#140 := [asserted]: #37
#184 := [mp #140 #183]: #179
#291 := [mp~ #184 #275]: #179
#341 := [mp #291 #340]: #338
#372 := [mp #341 #371]: #369
#857 := [mp #372 #856]: #852
#677 := (not #852)
#679 := (or #677 #507)
#430 := (* -1::int 3::int)
#515 := (* -1::int 0::int)
#516 := (mod #515 #430)
#517 := (+ #54 #516)
#508 := (= #517 0::int)
#519 := (mod 0::int 3::int)
#520 := (* -1::int #519)
#448 := (+ #54 #520)
#521 := (= #448 0::int)
#518 := (<= 3::int 0::int)
#522 := (<= 0::int 0::int)
#501 := (or #522 #518)
#836 := (not #501)
#838 := (>= 0::int 0::int)
#495 := (or #518 #838)
#625 := (not #495)
#832 := (or #625 #836)
#506 := (ite #832 #521 #508)
#839 := (= 0::int 0::int)
#840 := (ite #839 #507 #506)
#841 := (= 0::int #54)
#842 := (= 3::int 0::int)
#837 := (ite #842 #841 #840)
#680 := (or #677 #837)
#681 := (iff #680 #679)
#683 := (iff #679 #679)
#684 := [rewrite]: #683
#777 := (iff #837 #507)
#626 := (ite false #507 #507)
#781 := (iff #626 #507)
#783 := [rewrite]: #781
#773 := (iff #837 #626)
#776 := (iff #840 #507)
#1 := true
#785 := (ite true #507 #507)
#669 := (iff #785 #507)
#628 := [rewrite]: #669
#667 := (iff #840 #785)
#784 := (iff #506 #507)
#627 := (iff #506 #626)
#795 := (iff #508 #507)
#794 := (= #517 #54)
#806 := (+ #54 0::int)
#800 := (= #806 #54)
#801 := [rewrite]: #800
#787 := (= #517 #806)
#792 := (= #516 0::int)
#798 := -3::int
#646 := (mod 0::int -3::int)
#790 := (= #646 0::int)
#791 := [rewrite]: #790
#647 := (= #516 #646)
#804 := (= #430 -3::int)
#645 := [rewrite]: #804
#808 := (= #515 0::int)
#523 := [rewrite]: #808
#789 := [monotonicity #523 #645]: #647
#786 := [trans #789 #791]: #792
#793 := [monotonicity #786]: #787
#788 := [trans #793 #801]: #794
#624 := [monotonicity #788]: #795
#802 := (iff #521 #507)
#796 := (= #448 #54)
#810 := (= #448 #806)
#805 := (= #520 0::int)
#529 := (= #520 #515)
#527 := (= #519 0::int)
#528 := [rewrite]: #527
#807 := [monotonicity #528]: #529
#809 := [trans #807 #523]: #805
#799 := [monotonicity #809]: #810
#797 := [trans #799 #801]: #796
#803 := [monotonicity #797]: #802
#816 := (iff #832 false)
#536 := (or false false)
#815 := (iff #536 false)
#812 := [rewrite]: #815
#537 := (iff #832 #536)
#813 := (iff #836 false)
#825 := (not true)
#464 := (iff #825 false)
#827 := [rewrite]: #464
#543 := (iff #836 #825)
#541 := (iff #501 true)
#828 := (or true false)
#818 := (iff #828 true)
#540 := [rewrite]: #818
#831 := (iff #501 #828)
#835 := (iff #518 false)
#478 := [rewrite]: #835
#470 := (iff #522 true)
#830 := [rewrite]: #470
#817 := [monotonicity #830 #478]: #831
#542 := [trans #817 #540]: #541
#436 := [monotonicity #542]: #543
#814 := [trans #436 #827]: #813
#829 := (iff #625 false)
#820 := (iff #625 #825)
#823 := (iff #495 true)
#483 := (or false true)
#821 := (iff #483 true)
#822 := [rewrite]: #821
#484 := (iff #495 #483)
#819 := (iff #838 true)
#482 := [rewrite]: #819
#485 := [monotonicity #478 #482]: #484
#824 := [trans #485 #822]: #823
#826 := [monotonicity #824]: #820
#469 := [trans #826 #827]: #829
#811 := [monotonicity #469 #814]: #537
#526 := [trans #811 #812]: #816
#780 := [monotonicity #526 #803 #624]: #627
#782 := [trans #780 #783]: #784
#834 := (iff #839 true)
#494 := [rewrite]: #834
#668 := [monotonicity #494 #782]: #667
#678 := [trans #668 #628]: #776
#493 := (iff #841 #507)
#498 := [rewrite]: #493
#843 := (iff #842 false)
#833 := [rewrite]: #843
#774 := [monotonicity #833 #498 #678]: #773
#662 := [trans #774 #783]: #777
#682 := [monotonicity #662]: #681
#685 := [trans #682 #684]: #681
#673 := [quant-inst]: #680
#778 := [mp #673 #685]: #679
#713 := [unit-resolution #778 #857]: #507
#709 := [monotonicity #713]: #57
#58 := (not #57)
#270 := [asserted]: #58
[unit-resolution #270 #709]: false
unsat
b68469389563a7c2adfa58d6c3a299893ac9030d 605 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#59 := (f5 0::int)
decl f7 :: S2
#53 := f7
#60 := (= f7 #59)
decl f6 :: (-> S2 int)
#54 := (f6 f7)
#783 := (f5 #54)
#628 := (= #783 #59)
#608 := (= #59 #783)
#604 := (= 0::int #54)
#494 := (= #54 0::int)
#55 := 3::int
#685 := (mod #54 3::int)
#630 := (>= #685 0::int)
#1 := true
#77 := [true-axiom]: true
#598 := (or false #630)
#599 := [th-lemma]: #598
#597 := [unit-resolution #599 #77]: #630
decl f3 :: (-> int int int)
#56 := (f3 #54 3::int)
#86 := -1::int
#613 := (* -1::int #56)
#606 := (+ #54 #613)
#609 := (<= #606 0::int)
#605 := (= #54 #56)
#57 := (f5 #56)
#727 := (f6 #57)
#576 := (= #727 #56)
#730 := (= #56 #727)
#725 := (>= #56 0::int)
#718 := (= #727 0::int)
#590 := (not #718)
#791 := (not #494)
#591 := (iff #791 #590)
#588 := (iff #494 #718)
#586 := (iff #718 #494)
#584 := (= #727 #54)
#58 := (= #57 f7)
#275 := (= f7 #57)
#667 := (= #59 #57)
#665 := (= #57 #59)
#510 := (= #56 0::int)
#781 := (f6 #59)
#769 := (= #781 0::int)
#9 := (:var 0 int)
#44 := (f5 #9)
#882 := (pattern #44)
#213 := (>= #9 0::int)
#216 := (not #213)
#45 := (f6 #44)
#197 := (= #9 #45)
#222 := (or #197 #216)
#883 := (forall (vars (?v0 int)) (:pat #882) #222)
#227 := (forall (vars (?v0 int)) #222)
#886 := (iff #227 #883)
#884 := (iff #222 #222)
#885 := [refl]: #884
#887 := [quant-intro #885]: #886
#294 := (~ #227 #227)
#311 := (~ #222 #222)
#312 := [refl]: #311
#295 := [nnf-pos #312]: #294
#46 := (= #45 #9)
#43 := (<= 0::int #9)
#47 := (implies #43 #46)
#48 := (forall (vars (?v0 int)) #47)
#230 := (iff #48 #227)
#204 := (not #43)
#205 := (or #204 #197)
#210 := (forall (vars (?v0 int)) #205)
#228 := (iff #210 #227)
#225 := (iff #205 #222)
#219 := (or #216 #197)
#223 := (iff #219 #222)
#224 := [rewrite]: #223
#220 := (iff #205 #219)
#217 := (iff #204 #216)
#214 := (iff #43 #213)
#215 := [rewrite]: #214
#218 := [monotonicity #215]: #217
#221 := [monotonicity #218]: #220
#226 := [trans #221 #224]: #225
#229 := [quant-intro #226]: #228
#211 := (iff #48 #210)
#208 := (iff #47 #205)
#201 := (implies #43 #197)
#206 := (iff #201 #205)
#207 := [rewrite]: #206
#202 := (iff #47 #201)
#199 := (iff #46 #197)
#200 := [rewrite]: #199
#203 := [monotonicity #200]: #202
#209 := [trans #203 #207]: #208
#212 := [quant-intro #209]: #211
#231 := [trans #212 #229]: #230
#196 := [asserted]: #48
#232 := [mp #196 #231]: #227
#313 := [mp~ #232 #295]: #227
#888 := [mp #313 #887]: #883
#751 := (not #883)
#752 := (or #751 #769)
#777 := (>= 0::int 0::int)
#778 := (not #777)
#765 := (= 0::int #781)
#766 := (or #765 #778)
#753 := (or #751 #766)
#755 := (iff #753 #752)
#746 := (iff #752 #752)
#757 := [rewrite]: #746
#749 := (iff #766 #769)
#764 := (or #769 false)
#747 := (iff #764 #769)
#748 := [rewrite]: #747
#744 := (iff #766 #764)
#763 := (iff #778 false)
#772 := (not true)
#761 := (iff #772 false)
#762 := [rewrite]: #761
#758 := (iff #778 #772)
#771 := (iff #777 true)
#767 := [rewrite]: #771
#759 := [monotonicity #767]: #758
#760 := [trans #759 #762]: #763
#768 := (iff #765 #769)
#770 := [rewrite]: #768
#745 := [monotonicity #770 #760]: #744
#750 := [trans #745 #748]: #749
#756 := [monotonicity #750]: #755
#735 := [trans #756 #757]: #755
#754 := [quant-inst]: #753
#736 := [mp #754 #735]: #752
#688 := [unit-resolution #736 #888]: #769
#692 := (= #54 #781)
#446 := (not #275)
#706 := [hypothesis]: #446
#537 := (or #60 #275)
#61 := (not #60)
#281 := (iff #61 #275)
#62 := (iff #58 #61)
#284 := (iff #62 #281)
#278 := (iff #275 #61)
#282 := (iff #278 #281)
#283 := [rewrite]: #282
#279 := (iff #62 #278)
#276 := (iff #58 #275)
#277 := [rewrite]: #276
#280 := [monotonicity #277]: #279
#285 := [trans #280 #283]: #284
#274 := [asserted]: #62
#288 := [mp #274 #285]: #281
#531 := (not #281)
#536 := (or #60 #275 #531)
#464 := [def-axiom]: #536
#534 := [unit-resolution #464 #288]: #537
#712 := [unit-resolution #534 #706]: #60
#702 := [monotonicity #712]: #692
#682 := [trans #702 #688]: #494
#658 := (or #791 #510)
#539 := -3::int
#517 := (* -1::int #54)
#822 := (div #517 -3::int)
#816 := (* -1::int #822)
#813 := (+ #56 #816)
#814 := (= #813 0::int)
#848 := (div #54 3::int)
#522 := (* -1::int #848)
#523 := (+ #56 #522)
#855 := (= #523 0::int)
#859 := (>= #54 0::int)
#833 := (not #859)
#857 := (<= #54 0::int)
#553 := (not #857)
#543 := (or #553 #833)
#662 := (ite #543 #855 #814)
#806 := (ite #494 #510 #662)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#860 := (pattern #10)
#90 := (* -1::int #9)
#87 := (* -1::int #8)
#93 := (div #87 #90)
#362 := (* -1::int #93)
#363 := (+ #10 #362)
#364 := (= #363 0::int)
#21 := (div #8 #9)
#359 := (* -1::int #21)
#360 := (+ #10 #359)
#361 := (= #360 0::int)
#112 := (<= #9 0::int)
#108 := (<= #8 0::int)
#317 := (or #108 #112)
#318 := (not #317)
#119 := (>= #8 0::int)
#300 := (or #112 #119)
#301 := (not #300)
#324 := (or #301 #318)
#365 := (ite #324 #361 #364)
#358 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#366 := (ite #14 #358 #365)
#861 := (forall (vars (?v0 int) (?v1 int)) (:pat #860) #366)
#369 := (forall (vars (?v0 int) (?v1 int)) #366)
#864 := (iff #369 #861)
#862 := (iff #366 #366)
#863 := [refl]: #862
#865 := [quant-intro #863]: #864
#329 := (ite #324 #21 #93)
#332 := (ite #14 0::int #329)
#335 := (= #10 #332)
#338 := (forall (vars (?v0 int) (?v1 int)) #335)
#370 := (iff #338 #369)
#367 := (iff #335 #366)
#368 := [rewrite]: #367
#371 := [quant-intro #368]: #370
#120 := (not #119)
#113 := (not #112)
#123 := (and #113 #120)
#109 := (not #108)
#116 := (and #109 #113)
#126 := (or #116 #123)
#129 := (ite #126 #21 #93)
#132 := (ite #14 0::int #129)
#135 := (= #10 #132)
#138 := (forall (vars (?v0 int) (?v1 int)) #135)
#339 := (iff #138 #338)
#336 := (iff #135 #335)
#333 := (= #132 #332)
#330 := (= #129 #329)
#327 := (iff #126 #324)
#321 := (or #318 #301)
#325 := (iff #321 #324)
#326 := [rewrite]: #325
#322 := (iff #126 #321)
#319 := (iff #123 #301)
#320 := [rewrite]: #319
#298 := (iff #116 #318)
#299 := [rewrite]: #298
#323 := [monotonicity #299 #320]: #322
#328 := [trans #323 #326]: #327
#331 := [monotonicity #328]: #330
#334 := [monotonicity #331]: #333
#337 := [monotonicity #334]: #336
#340 := [quant-intro #337]: #339
#304 := (~ #138 #138)
#302 := (~ #135 #135)
#303 := [refl]: #302
#305 := [nnf-pos #303]: #304
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#141 := (iff #28 #138)
#80 := (and #16 #18)
#83 := (or #17 #80)
#96 := (ite #83 #21 #93)
#99 := (ite #14 0::int #96)
#102 := (= #10 #99)
#105 := (forall (vars (?v0 int) (?v1 int)) #102)
#139 := (iff #105 #138)
#136 := (iff #102 #135)
#133 := (= #99 #132)
#130 := (= #96 #129)
#127 := (iff #83 #126)
#124 := (iff #80 #123)
#121 := (iff #18 #120)
#122 := [rewrite]: #121
#114 := (iff #16 #113)
#115 := [rewrite]: #114
#125 := [monotonicity #115 #122]: #124
#117 := (iff #17 #116)
#110 := (iff #15 #109)
#111 := [rewrite]: #110
#118 := [monotonicity #111 #115]: #117
#128 := [monotonicity #118 #125]: #127
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#137 := [monotonicity #134]: #136
#140 := [quant-intro #137]: #139
#106 := (iff #28 #105)
#103 := (iff #27 #102)
#100 := (= #26 #99)
#97 := (= #25 #96)
#94 := (= #24 #93)
#91 := (= #23 #90)
#92 := [rewrite]: #91
#88 := (= #22 #87)
#89 := [rewrite]: #88
#95 := [monotonicity #89 #92]: #94
#84 := (iff #20 #83)
#81 := (iff #19 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#98 := [monotonicity #85 #95]: #97
#101 := [monotonicity #98]: #100
#104 := [monotonicity #101]: #103
#107 := [quant-intro #104]: #106
#142 := [trans #107 #140]: #141
#79 := [asserted]: #28
#143 := [mp #79 #142]: #138
#289 := [mp~ #143 #305]: #138
#341 := [mp #289 #340]: #338
#372 := [mp #341 #371]: #369
#866 := [mp #372 #865]: #861
#802 := (not #861)
#803 := (or #802 #806)
#538 := (* -1::int 3::int)
#852 := (div #517 #538)
#854 := (* -1::int #852)
#511 := (+ #56 #854)
#641 := (= #511 0::int)
#856 := (<= 3::int 0::int)
#858 := (or #857 #856)
#853 := (not #858)
#849 := (or #856 #859)
#509 := (not #849)
#514 := (or #509 #853)
#850 := (ite #514 #855 #641)
#851 := (= 3::int 0::int)
#835 := (or #494 #851)
#498 := (ite #835 #510 #850)
#809 := (or #802 #498)
#804 := (iff #809 #803)
#640 := (iff #803 #803)
#642 := [rewrite]: #640
#807 := (iff #498 #806)
#663 := (iff #850 #662)
#820 := (iff #641 #814)
#818 := (= #511 #813)
#817 := (= #854 #816)
#826 := (= #852 #822)
#821 := (= #538 -3::int)
#825 := [rewrite]: #821
#815 := [monotonicity #825]: #826
#812 := [monotonicity #815]: #817
#819 := [monotonicity #812]: #818
#661 := [monotonicity #819]: #820
#823 := (iff #514 #543)
#828 := (or #833 #553)
#544 := (iff #828 #543)
#545 := [rewrite]: #544
#832 := (iff #514 #828)
#827 := (iff #853 #553)
#830 := (iff #858 #857)
#557 := (or #857 false)
#452 := (iff #557 #857)
#829 := [rewrite]: #452
#558 := (iff #858 #557)
#842 := (iff #856 false)
#480 := [rewrite]: #842
#559 := [monotonicity #480]: #558
#552 := [trans #559 #829]: #830
#831 := [monotonicity #552]: #827
#834 := (iff #509 #833)
#844 := (iff #849 #859)
#843 := (or false #859)
#486 := (iff #843 #859)
#846 := [rewrite]: #486
#845 := (iff #849 #843)
#485 := [monotonicity #480]: #845
#847 := [trans #485 #846]: #844
#556 := [monotonicity #847]: #834
#542 := [monotonicity #556 #831]: #832
#824 := [trans #542 #545]: #823
#805 := [monotonicity #824 #661]: #663
#841 := (iff #835 #494)
#501 := (or #494 false)
#839 := (iff #501 #494)
#840 := [rewrite]: #839
#837 := (iff #835 #501)
#499 := (iff #851 false)
#500 := [rewrite]: #499
#838 := [monotonicity #500]: #837
#836 := [trans #838 #840]: #841
#808 := [monotonicity #836 #805]: #807
#811 := [monotonicity #808]: #804
#643 := [trans #811 #642]: #804
#810 := [quant-inst]: #809
#796 := [mp #810 #643]: #803
#703 := [unit-resolution #796 #866]: #806
#794 := (not #806)
#795 := (or #794 #791 #510)
#782 := [def-axiom]: #795
#659 := [unit-resolution #782 #703]: #658
#664 := [unit-resolution #659 #682]: #510
#666 := [monotonicity #664]: #665
#668 := [symm #666]: #667
#669 := [trans #712 #668]: #275
#670 := [unit-resolution #706 #669]: false
#671 := [lemma #670]: #275
#600 := [symm #671]: #58
#585 := [monotonicity #600]: #584
#587 := [monotonicity #585]: #586
#589 := [symm #587]: #588
#592 := [monotonicity #589]: #591
#582 := [hypothesis]: #791
#593 := [mp #582 #592]: #590
#721 := (or #718 #725)
#50 := (= #45 0::int)
#263 := (or #50 #213)
#889 := (forall (vars (?v0 int)) (:pat #882) #263)
#268 := (forall (vars (?v0 int)) #263)
#892 := (iff #268 #889)
#890 := (iff #263 #263)
#891 := [refl]: #890
#893 := [quant-intro #891]: #892
#296 := (~ #268 #268)
#314 := (~ #263 #263)
#315 := [refl]: #314
#297 := [nnf-pos #315]: #296
#49 := (< #9 0::int)
#51 := (implies #49 #50)
#52 := (forall (vars (?v0 int)) #51)
#271 := (iff #52 #268)
#234 := (= 0::int #45)
#240 := (not #49)
#241 := (or #240 #234)
#246 := (forall (vars (?v0 int)) #241)
#269 := (iff #246 #268)
#266 := (iff #241 #263)
#260 := (or #213 #50)
#264 := (iff #260 #263)
#265 := [rewrite]: #264
#261 := (iff #241 #260)
#258 := (iff #234 #50)
#259 := [rewrite]: #258
#256 := (iff #240 #213)
#251 := (not #216)
#254 := (iff #251 #213)
#255 := [rewrite]: #254
#252 := (iff #240 #251)
#249 := (iff #49 #216)
#250 := [rewrite]: #249
#253 := [monotonicity #250]: #252
#257 := [trans #253 #255]: #256
#262 := [monotonicity #257 #259]: #261
#267 := [trans #262 #265]: #266
#270 := [quant-intro #267]: #269
#247 := (iff #52 #246)
#244 := (iff #51 #241)
#237 := (implies #49 #234)
#242 := (iff #237 #241)
#243 := [rewrite]: #242
#238 := (iff #51 #237)
#235 := (iff #50 #234)
#236 := [rewrite]: #235
#239 := [monotonicity #236]: #238
#245 := [trans #239 #243]: #244
#248 := [quant-intro #245]: #247
#272 := [trans #248 #270]: #271
#233 := [asserted]: #52
#273 := [mp #233 #272]: #268
#316 := [mp~ #273 #297]: #268
#894 := [mp #316 #893]: #889
#719 := (not #889)
#724 := (or #719 #718 #725)
#704 := (or #719 #721)
#705 := (iff #704 #724)
#686 := [rewrite]: #705
#650 := [quant-inst]: #704
#710 := [mp #650 #686]: #724
#594 := [unit-resolution #710 #894]: #721
#583 := [unit-resolution #594 #593]: #725
#726 := (not #725)
#732 := (or #726 #730)
#734 := (or #751 #726 #730)
#731 := (or #730 #726)
#707 := (or #751 #731)
#720 := (iff #707 #734)
#709 := (or #751 #732)
#714 := (iff #709 #734)
#715 := [rewrite]: #714
#602 := (iff #707 #709)
#733 := (iff #731 #732)
#728 := [rewrite]: #733
#713 := [monotonicity #728]: #602
#716 := [trans #713 #715]: #720
#708 := [quant-inst]: #707
#717 := [mp #708 #716]: #734
#595 := [unit-resolution #717 #888]: #732
#572 := [unit-resolution #595 #583]: #730
#577 := [symm #572]: #576
#574 := (= #54 #727)
#575 := [symm #585]: #574
#578 := [trans #575 #577]: #605
#579 := (not #605)
#580 := (or #579 #609)
#573 := [th-lemma]: #580
#581 := [unit-resolution #573 #578]: #609
#644 := (<= #523 0::int)
#566 := (or #494 #662)
#784 := (or #794 #494 #662)
#776 := [def-axiom]: #784
#567 := [unit-resolution #776 #703]: #566
#568 := [unit-resolution #567 #582]: #662
#722 := (f6 #783)
#723 := (= #722 0::int)
#555 := (not #723)
#565 := (iff #791 #555)
#563 := (iff #494 #723)
#562 := (iff #723 #494)
#560 := (= #722 #54)
#569 := (= #783 f7)
#788 := (= f7 #783)
#38 := (:var 0 S2)
#39 := (f6 #38)
#874 := (pattern #39)
#40 := (f5 #39)
#190 := (= #38 #40)
#875 := (forall (vars (?v0 S2)) (:pat #874) #190)
#193 := (forall (vars (?v0 S2)) #190)
#876 := (iff #193 #875)
#878 := (iff #875 #875)
#879 := [rewrite]: #878
#877 := [rewrite]: #876
#880 := [trans #877 #879]: #876
#292 := (~ #193 #193)
#308 := (~ #190 #190)
#309 := [refl]: #308
#293 := [nnf-pos #309]: #292
#41 := (= #40 #38)
#42 := (forall (vars (?v0 S2)) #41)
#194 := (iff #42 #193)
#191 := (iff #41 #190)
#192 := [rewrite]: #191
#195 := [quant-intro #192]: #194
#189 := [asserted]: #42
#198 := [mp #189 #195]: #193
#310 := [mp~ #198 #293]: #193
#881 := [mp #310 #880]: #875
#779 := (not #875)
#780 := (or #779 #788)
#774 := [quant-inst]: #780
#570 := [unit-resolution #774 #881]: #788
#571 := [symm #570]: #569
#561 := [monotonicity #571]: #560
#554 := [monotonicity #561]: #562
#564 := [symm #554]: #563
#546 := [monotonicity #564]: #565
#547 := [mp #582 #546]: #555
#711 := (or #723 #859)
#680 := (or #719 #723 #859)
#687 := (or #719 #711)
#677 := (iff #687 #680)
#679 := [rewrite]: #677
#646 := [quant-inst]: #687
#681 := [mp #646 #679]: #680
#548 := [unit-resolution #681 #894]: #711
#540 := [unit-resolution #548 #547]: #859
#549 := (or #494 #553 #833)
#550 := [th-lemma]: #549
#541 := [unit-resolution #550 #582]: #543
#551 := [unit-resolution #541 #540]: #553
#797 := (or #543 #857)
#799 := [def-axiom]: #797
#518 := [unit-resolution #799 #551]: #543
#801 := (not #543)
#793 := (not #662)
#678 := (or #793 #801 #855)
#693 := [def-axiom]: #678
#520 := [unit-resolution #693 #518 #568]: #855
#689 := (not #855)
#521 := (or #689 #644)
#512 := [th-lemma]: #521
#525 := [unit-resolution #512 #520]: #644
#653 := (* -3::int #848)
#652 := (* -1::int #685)
#654 := (+ #652 #653)
#655 := (+ #54 #654)
#629 := (>= #655 0::int)
#651 := (= #655 0::int)
#526 := (or false #651)
#527 := [th-lemma]: #526
#528 := [unit-resolution #527 #77]: #651
#529 := (not #651)
#519 := (or #529 #629)
#530 := [th-lemma]: #519
#513 := [unit-resolution #530 #528]: #629
#515 := [th-lemma #551 #513 #525 #581 #597]: false
#516 := [lemma #515]: #494
#607 := [symm #516]: #604
#612 := [monotonicity #607]: #608
#610 := [symm #612]: #628
#596 := [trans #570 #610]: #60
#524 := (or #61 #446)
#532 := (or #61 #446 #531)
#533 := [def-axiom]: #532
#535 := [unit-resolution #533 #288]: #524
#603 := [unit-resolution #535 #671]: #61
[unit-resolution #603 #596]: false
unsat
48fbc21a65dea108392ceeedb3a0cbae0d536aab 328 0
#2 := false
decl f5 :: (-> int S2)
#53 := 1::int
#57 := (f5 1::int)
decl f4 :: (-> int int int)
#54 := 3::int
#55 := (f4 1::int 3::int)
#56 := (f5 #55)
#58 := (= #56 #57)
#834 := (= #55 1::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#851 := (pattern #29)
#11 := 0::int
#83 := -1::int
#87 := (* -1::int #9)
#84 := (* -1::int #8)
#142 := (mod #84 #87)
#363 := (+ #29 #142)
#364 := (= #363 0::int)
#30 := (mod #8 #9)
#360 := (* -1::int #30)
#361 := (+ #29 #360)
#362 := (= #361 0::int)
#109 := (<= #9 0::int)
#105 := (<= #8 0::int)
#302 := (or #105 #109)
#303 := (not #302)
#116 := (>= #8 0::int)
#285 := (or #109 #116)
#286 := (not #285)
#309 := (or #286 #303)
#365 := (ite #309 #362 #364)
#359 := (= #29 0::int)
#12 := (= #8 0::int)
#366 := (ite #12 #359 #365)
#358 := (= #8 #29)
#13 := (= #9 0::int)
#367 := (ite #13 #358 #366)
#852 := (forall (vars (?v0 int) (?v1 int)) (:pat #851) #367)
#370 := (forall (vars (?v0 int) (?v1 int)) #367)
#855 := (iff #370 #852)
#853 := (iff #367 #367)
#854 := [refl]: #853
#856 := [quant-intro #854]: #855
#148 := (* -1::int #142)
#327 := (ite #309 #30 #148)
#330 := (ite #12 0::int #327)
#333 := (ite #13 #8 #330)
#336 := (= #29 #333)
#339 := (forall (vars (?v0 int) (?v1 int)) #336)
#371 := (iff #339 #370)
#368 := (iff #336 #367)
#369 := [rewrite]: #368
#372 := [quant-intro #369]: #371
#117 := (not #116)
#110 := (not #109)
#120 := (and #110 #117)
#106 := (not #105)
#113 := (and #106 #110)
#123 := (or #113 #120)
#168 := (ite #123 #30 #148)
#171 := (ite #12 0::int #168)
#174 := (ite #13 #8 #171)
#177 := (= #29 #174)
#180 := (forall (vars (?v0 int) (?v1 int)) #177)
#340 := (iff #180 #339)
#337 := (iff #177 #336)
#334 := (= #174 #333)
#331 := (= #171 #330)
#328 := (= #168 #327)
#312 := (iff #123 #309)
#306 := (or #303 #286)
#310 := (iff #306 #309)
#311 := [rewrite]: #310
#307 := (iff #123 #306)
#304 := (iff #120 #286)
#305 := [rewrite]: #304
#283 := (iff #113 #303)
#284 := [rewrite]: #283
#308 := [monotonicity #284 #305]: #307
#313 := [trans #308 #311]: #312
#329 := [monotonicity #313]: #328
#332 := [monotonicity #329]: #331
#335 := [monotonicity #332]: #334
#338 := [monotonicity #335]: #337
#341 := [quant-intro #338]: #340
#275 := (~ #180 #180)
#272 := (~ #177 #177)
#291 := [refl]: #272
#276 := [nnf-pos #291]: #275
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#183 := (iff #37 #180)
#77 := (and #16 #18)
#80 := (or #17 #77)
#153 := (ite #80 #30 #148)
#156 := (ite #12 0::int #153)
#159 := (ite #13 #8 #156)
#162 := (= #29 #159)
#165 := (forall (vars (?v0 int) (?v1 int)) #162)
#181 := (iff #165 #180)
#178 := (iff #162 #177)
#175 := (= #159 #174)
#172 := (= #156 #171)
#169 := (= #153 #168)
#124 := (iff #80 #123)
#121 := (iff #77 #120)
#118 := (iff #18 #117)
#119 := [rewrite]: #118
#111 := (iff #16 #110)
#112 := [rewrite]: #111
#122 := [monotonicity #112 #119]: #121
#114 := (iff #17 #113)
#107 := (iff #15 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#125 := [monotonicity #115 #122]: #124
#170 := [monotonicity #125]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#182 := [quant-intro #179]: #181
#166 := (iff #37 #165)
#163 := (iff #36 #162)
#160 := (= #35 #159)
#157 := (= #34 #156)
#154 := (= #33 #153)
#151 := (= #32 #148)
#145 := (- #142)
#149 := (= #145 #148)
#150 := [rewrite]: #149
#146 := (= #32 #145)
#143 := (= #31 #142)
#88 := (= #23 #87)
#89 := [rewrite]: #88
#85 := (= #22 #84)
#86 := [rewrite]: #85
#144 := [monotonicity #86 #89]: #143
#147 := [monotonicity #144]: #146
#152 := [trans #147 #150]: #151
#81 := (iff #20 #80)
#78 := (iff #19 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#155 := [monotonicity #82 #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [quant-intro #164]: #166
#184 := [trans #167 #182]: #183
#141 := [asserted]: #37
#185 := [mp #141 #184]: #180
#292 := [mp~ #185 #276]: #180
#342 := [mp #292 #341]: #339
#373 := [mp #342 #372]: #370
#857 := [mp #373 #856]: #852
#762 := (not #852)
#763 := (or #762 #834)
#431 := (* -1::int 3::int)
#515 := (* -1::int 1::int)
#516 := (mod #515 #431)
#517 := (+ #55 #516)
#508 := (= #517 0::int)
#519 := (mod 1::int 3::int)
#520 := (* -1::int #519)
#521 := (+ #55 #520)
#518 := (= #521 0::int)
#522 := (<= 3::int 0::int)
#501 := (<= 1::int 0::int)
#836 := (or #501 #522)
#838 := (not #836)
#495 := (>= 1::int 0::int)
#625 := (or #522 #495)
#832 := (not #625)
#506 := (or #832 #838)
#507 := (ite #506 #518 #508)
#839 := (= #55 0::int)
#840 := (= 1::int 0::int)
#841 := (ite #840 #839 #507)
#842 := (= 1::int #55)
#837 := (= 3::int 0::int)
#843 := (ite #837 #842 #841)
#764 := (or #762 #843)
#765 := (iff #764 #763)
#750 := (iff #763 #763)
#752 := [rewrite]: #750
#772 := (iff #843 #834)
#759 := (ite false #834 #834)
#771 := (iff #759 #834)
#767 := [rewrite]: #771
#769 := (iff #843 #759)
#760 := (iff #841 #834)
#778 := (ite false #839 #834)
#766 := (iff #778 #834)
#768 := [rewrite]: #766
#775 := (iff #841 #778)
#684 := (iff #507 #834)
#773 := -2::int
#774 := (= #55 -2::int)
#1 := true
#680 := (ite true #834 #774)
#682 := (iff #680 #834)
#683 := [rewrite]: #682
#673 := (iff #507 #680)
#677 := (iff #508 #774)
#795 := 2::int
#782 := (+ 2::int #55)
#628 := (= #782 0::int)
#777 := (iff #628 #774)
#662 := [rewrite]: #777
#776 := (iff #508 #628)
#668 := (= #517 #782)
#781 := (+ #55 2::int)
#785 := (= #781 #782)
#667 := [rewrite]: #785
#783 := (= #517 #781)
#627 := (= #516 2::int)
#792 := -3::int
#793 := (mod -1::int -3::int)
#624 := (= #793 2::int)
#626 := [rewrite]: #624
#794 := (= #516 #793)
#786 := (= #431 -3::int)
#787 := [rewrite]: #786
#805 := (= #515 -1::int)
#809 := [rewrite]: #805
#788 := [monotonicity #809 #787]: #794
#780 := [trans #788 #626]: #627
#784 := [monotonicity #780]: #783
#669 := [trans #784 #667]: #668
#678 := [monotonicity #669]: #776
#679 := [trans #678 #662]: #677
#790 := (iff #518 #834)
#796 := (+ -1::int #55)
#804 := (= #796 0::int)
#647 := (iff #804 #834)
#789 := [rewrite]: #647
#645 := (iff #518 #804)
#803 := (= #521 #796)
#799 := (+ #55 -1::int)
#797 := (= #799 #796)
#802 := [rewrite]: #797
#800 := (= #521 #799)
#806 := (= #520 -1::int)
#808 := (= #520 #515)
#529 := (= #519 1::int)
#807 := [rewrite]: #529
#523 := [monotonicity #807]: #808
#810 := [trans #523 #809]: #806
#801 := [monotonicity #810]: #800
#798 := [trans #801 #802]: #803
#646 := [monotonicity #798]: #645
#791 := [trans #646 #789]: #790
#527 := (iff #506 true)
#485 := (or false true)
#823 := (iff #485 true)
#824 := [rewrite]: #823
#816 := (iff #506 #485)
#815 := (iff #838 true)
#813 := (not false)
#537 := (iff #813 true)
#811 := [rewrite]: #537
#814 := (iff #838 #813)
#543 := (iff #836 false)
#817 := (or false false)
#541 := (iff #817 false)
#542 := [rewrite]: #541
#818 := (iff #836 #817)
#819 := (iff #522 false)
#482 := [rewrite]: #819
#828 := (iff #501 false)
#831 := [rewrite]: #828
#540 := [monotonicity #831 #482]: #818
#437 := [trans #540 #542]: #543
#536 := [monotonicity #437]: #814
#812 := [trans #536 #811]: #815
#470 := (iff #832 false)
#826 := (not true)
#829 := (iff #826 false)
#469 := [rewrite]: #829
#464 := (iff #832 #826)
#825 := (iff #625 true)
#821 := (iff #625 #485)
#483 := (iff #495 true)
#484 := [rewrite]: #483
#822 := [monotonicity #482 #484]: #821
#820 := [trans #822 #824]: #825
#827 := [monotonicity #820]: #464
#830 := [trans #827 #469]: #470
#526 := [monotonicity #830 #812]: #816
#528 := [trans #526 #824]: #527
#681 := [monotonicity #528 #791 #679]: #673
#685 := [trans #681 #683]: #684
#835 := (iff #840 false)
#478 := [rewrite]: #835
#779 := [monotonicity #478 #685]: #775
#757 := [trans #779 #768]: #760
#498 := (iff #842 #834)
#494 := [rewrite]: #498
#833 := (iff #837 false)
#493 := [rewrite]: #833
#770 := [monotonicity #493 #494 #757]: #769
#761 := [trans #770 #767]: #772
#749 := [monotonicity #761]: #765
#753 := [trans #749 #752]: #765
#758 := [quant-inst]: #764
#754 := [mp #758 #753]: #763
#703 := [unit-resolution #754 #857]: #834
#708 := [monotonicity #703]: #58
#59 := (not #58)
#271 := [asserted]: #59
[unit-resolution #271 #708]: false
unsat
d5d2986a8efaefb5e38f30bc14afaad18d3334c6 848 0
#2 := false
decl f5 :: (-> int S2)
decl f6 :: (-> S2 int)
decl f3 :: (-> int int int)
#55 := 1::int
decl f7 :: S2
#53 := f7
#54 := (f6 f7)
#56 := (f3 #54 1::int)
#57 := (f5 #56)
#58 := (f6 #57)
#283 := (f5 #58)
#286 := (f6 #283)
decl f4 :: (-> int int int)
#62 := (f4 #54 1::int)
#63 := (f5 #62)
#64 := (f6 #63)
#292 := (+ #64 #286)
#297 := (f5 #292)
#300 := (= f7 #297)
#706 := (f5 #54)
#1101 := (= #706 #297)
#1099 := (= #297 #706)
#1097 := (= #292 #54)
#11 := 0::int
#1074 := (= 0::int #54)
#877 := (= #54 0::int)
#711 := (f5 #286)
#1035 := (= #711 #297)
#1033 := (= #297 #711)
#986 := (= #292 #286)
#984 := (= #286 #292)
#654 := (<= #64 0::int)
#929 := (<= #62 0::int)
#801 := (= #62 0::int)
#871 := (<= #54 0::int)
#853 := (not #871)
#660 := (>= #54 0::int)
#861 := (not #660)
#759 := (or #861 #853 #877)
#537 := (f6 #706)
#539 := (= #537 0::int)
#944 := (not #539)
#713 := (not #877)
#945 := (iff #713 #944)
#942 := (iff #877 #539)
#940 := (iff #539 #877)
#938 := (= #537 #54)
#936 := (= #706 f7)
#665 := (= f7 #706)
#38 := (:var 0 S2)
#39 := (f6 #38)
#893 := (pattern #39)
#40 := (f5 #39)
#196 := (= #38 #40)
#894 := (forall (vars (?v0 S2)) (:pat #893) #196)
#199 := (forall (vars (?v0 S2)) #196)
#895 := (iff #199 #894)
#897 := (iff #894 #894)
#898 := [rewrite]: #897
#896 := [rewrite]: #895
#899 := [trans #896 #898]: #895
#312 := (~ #199 #199)
#328 := (~ #196 #196)
#329 := [refl]: #328
#313 := [nnf-pos #329]: #312
#41 := (= #40 #38)
#42 := (forall (vars (?v0 S2)) #41)
#200 := (iff #42 #199)
#197 := (iff #41 #196)
#198 := [rewrite]: #197
#201 := [quant-intro #198]: #200
#195 := [asserted]: #42
#204 := [mp #195 #201]: #199
#330 := [mp~ #204 #313]: #199
#900 := [mp #330 #899]: #894
#700 := (not #894)
#707 := (or #700 #665)
#709 := [quant-inst]: #707
#935 := [unit-resolution #709 #900]: #665
#937 := [symm #935]: #936
#939 := [monotonicity #937]: #938
#941 := [monotonicity #939]: #940
#943 := [symm #941]: #942
#946 := [monotonicity #943]: #945
#934 := [hypothesis]: #713
#947 := [mp #934 #946]: #944
#540 := (or #539 #660)
#9 := (:var 0 int)
#44 := (f5 #9)
#901 := (pattern #44)
#219 := (>= #9 0::int)
#45 := (f6 #44)
#50 := (= #45 0::int)
#269 := (or #50 #219)
#908 := (forall (vars (?v0 int)) (:pat #901) #269)
#274 := (forall (vars (?v0 int)) #269)
#911 := (iff #274 #908)
#909 := (iff #269 #269)
#910 := [refl]: #909
#912 := [quant-intro #910]: #911
#316 := (~ #274 #274)
#334 := (~ #269 #269)
#335 := [refl]: #334
#317 := [nnf-pos #335]: #316
#49 := (< #9 0::int)
#51 := (implies #49 #50)
#52 := (forall (vars (?v0 int)) #51)
#277 := (iff #52 #274)
#240 := (= 0::int #45)
#246 := (not #49)
#247 := (or #246 #240)
#252 := (forall (vars (?v0 int)) #247)
#275 := (iff #252 #274)
#272 := (iff #247 #269)
#266 := (or #219 #50)
#270 := (iff #266 #269)
#271 := [rewrite]: #270
#267 := (iff #247 #266)
#264 := (iff #240 #50)
#265 := [rewrite]: #264
#262 := (iff #246 #219)
#222 := (not #219)
#257 := (not #222)
#260 := (iff #257 #219)
#261 := [rewrite]: #260
#258 := (iff #246 #257)
#255 := (iff #49 #222)
#256 := [rewrite]: #255
#259 := [monotonicity #256]: #258
#263 := [trans #259 #261]: #262
#268 := [monotonicity #263 #265]: #267
#273 := [trans #268 #271]: #272
#276 := [quant-intro #273]: #275
#253 := (iff #52 #252)
#250 := (iff #51 #247)
#243 := (implies #49 #240)
#248 := (iff #243 #247)
#249 := [rewrite]: #248
#244 := (iff #51 #243)
#241 := (iff #50 #240)
#242 := [rewrite]: #241
#245 := [monotonicity #242]: #244
#251 := [trans #245 #249]: #250
#254 := [quant-intro #251]: #253
#278 := [trans #254 #276]: #277
#239 := [asserted]: #52
#279 := [mp #239 #278]: #274
#336 := [mp~ #279 #317]: #274
#913 := [mp #336 #912]: #908
#647 := (not #908)
#545 := (or #647 #539 #660)
#546 := (or #647 #540)
#548 := (iff #546 #545)
#538 := [rewrite]: #548
#547 := [quant-inst]: #546
#549 := [mp #547 #538]: #545
#948 := [unit-resolution #549 #913]: #540
#949 := [unit-resolution #948 #947]: #660
#952 := (or #853 #861)
#950 := (or #877 #853 #861)
#951 := [th-lemma]: #950
#953 := [unit-resolution #951 #934]: #952
#954 := [unit-resolution #953 #949]: #853
#733 := (or #759 #871)
#734 := [def-axiom]: #733
#955 := [unit-resolution #734 #954]: #759
#736 := (not #759)
#957 := (or #736 #801)
#92 := -1::int
#550 := (* -1::int #54)
#830 := (mod #550 -1::int)
#777 := (+ #62 #830)
#781 := (= #777 0::int)
#756 := (ite #759 #801 #781)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#886 := (pattern #29)
#96 := (* -1::int #9)
#93 := (* -1::int #8)
#151 := (mod #93 #96)
#398 := (+ #29 #151)
#399 := (= #398 0::int)
#30 := (mod #8 #9)
#395 := (* -1::int #30)
#396 := (+ #29 #395)
#397 := (= #396 0::int)
#118 := (<= #9 0::int)
#114 := (<= #8 0::int)
#337 := (or #114 #118)
#338 := (not #337)
#125 := (>= #8 0::int)
#320 := (or #118 #125)
#321 := (not #320)
#344 := (or #321 #338)
#400 := (ite #344 #397 #399)
#394 := (= #29 0::int)
#12 := (= #8 0::int)
#401 := (ite #12 #394 #400)
#393 := (= #8 #29)
#13 := (= #9 0::int)
#402 := (ite #13 #393 #401)
#887 := (forall (vars (?v0 int) (?v1 int)) (:pat #886) #402)
#405 := (forall (vars (?v0 int) (?v1 int)) #402)
#890 := (iff #405 #887)
#888 := (iff #402 #402)
#889 := [refl]: #888
#891 := [quant-intro #889]: #890
#157 := (* -1::int #151)
#362 := (ite #344 #30 #157)
#365 := (ite #12 0::int #362)
#368 := (ite #13 #8 #365)
#371 := (= #29 #368)
#374 := (forall (vars (?v0 int) (?v1 int)) #371)
#406 := (iff #374 #405)
#403 := (iff #371 #402)
#404 := [rewrite]: #403
#407 := [quant-intro #404]: #406
#126 := (not #125)
#119 := (not #118)
#129 := (and #119 #126)
#115 := (not #114)
#122 := (and #115 #119)
#132 := (or #122 #129)
#177 := (ite #132 #30 #157)
#180 := (ite #12 0::int #177)
#183 := (ite #13 #8 #180)
#186 := (= #29 #183)
#189 := (forall (vars (?v0 int) (?v1 int)) #186)
#375 := (iff #189 #374)
#372 := (iff #186 #371)
#369 := (= #183 #368)
#366 := (= #180 #365)
#363 := (= #177 #362)
#347 := (iff #132 #344)
#341 := (or #338 #321)
#345 := (iff #341 #344)
#346 := [rewrite]: #345
#342 := (iff #132 #341)
#339 := (iff #129 #321)
#340 := [rewrite]: #339
#318 := (iff #122 #338)
#319 := [rewrite]: #318
#343 := [monotonicity #319 #340]: #342
#348 := [trans #343 #346]: #347
#364 := [monotonicity #348]: #363
#367 := [monotonicity #364]: #366
#370 := [monotonicity #367]: #369
#373 := [monotonicity #370]: #372
#376 := [quant-intro #373]: #375
#310 := (~ #189 #189)
#306 := (~ #186 #186)
#326 := [refl]: #306
#311 := [nnf-pos #326]: #310
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#192 := (iff #37 #189)
#86 := (and #16 #18)
#89 := (or #17 #86)
#162 := (ite #89 #30 #157)
#165 := (ite #12 0::int #162)
#168 := (ite #13 #8 #165)
#171 := (= #29 #168)
#174 := (forall (vars (?v0 int) (?v1 int)) #171)
#190 := (iff #174 #189)
#187 := (iff #171 #186)
#184 := (= #168 #183)
#181 := (= #165 #180)
#178 := (= #162 #177)
#133 := (iff #89 #132)
#130 := (iff #86 #129)
#127 := (iff #18 #126)
#128 := [rewrite]: #127
#120 := (iff #16 #119)
#121 := [rewrite]: #120
#131 := [monotonicity #121 #128]: #130
#123 := (iff #17 #122)
#116 := (iff #15 #115)
#117 := [rewrite]: #116
#124 := [monotonicity #117 #121]: #123
#134 := [monotonicity #124 #131]: #133
#179 := [monotonicity #134]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185]: #187
#191 := [quant-intro #188]: #190
#175 := (iff #37 #174)
#172 := (iff #36 #171)
#169 := (= #35 #168)
#166 := (= #34 #165)
#163 := (= #33 #162)
#160 := (= #32 #157)
#154 := (- #151)
#158 := (= #154 #157)
#159 := [rewrite]: #158
#155 := (= #32 #154)
#152 := (= #31 #151)
#97 := (= #23 #96)
#98 := [rewrite]: #97
#94 := (= #22 #93)
#95 := [rewrite]: #94
#153 := [monotonicity #95 #98]: #152
#156 := [monotonicity #153]: #155
#161 := [trans #156 #159]: #160
#90 := (iff #20 #89)
#87 := (iff #19 #86)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#164 := [monotonicity #91 #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [quant-intro #173]: #175
#193 := [trans #176 #191]: #192
#150 := [asserted]: #37
#194 := [mp #150 #193]: #189
#327 := [mp~ #194 #311]: #189
#377 := [mp #327 #376]: #374
#408 := [mp #377 #407]: #405
#892 := [mp #408 #891]: #887
#746 := (not #887)
#749 := (or #746 #756)
#466 := (* -1::int 1::int)
#717 := (mod #550 #466)
#718 := (+ #62 #717)
#719 := (= #718 0::int)
#828 := (mod #54 1::int)
#720 := (* -1::int #828)
#813 := (+ #62 #720)
#810 := (= #813 0::int)
#536 := (<= 1::int 0::int)
#873 := (or #871 #536)
#530 := (not #873)
#867 := (or #536 #660)
#541 := (not #867)
#542 := (or #541 #530)
#814 := (ite #542 #810 #719)
#803 := (ite #877 #801 #814)
#795 := (= #54 #62)
#876 := (= 1::int 0::int)
#792 := (ite #876 #795 #803)
#750 := (or #746 #792)
#752 := (iff #750 #749)
#753 := (iff #749 #749)
#726 := [rewrite]: #753
#744 := (iff #792 #756)
#577 := (or #861 #853)
#769 := (or #577 #877)
#770 := (ite #769 #801 #781)
#762 := (iff #770 #756)
#760 := (iff #769 #759)
#761 := [rewrite]: #760
#748 := [monotonicity #761]: #762
#757 := (iff #792 #770)
#775 := (ite false #795 #770)
#754 := (iff #775 #770)
#755 := [rewrite]: #754
#765 := (iff #792 #775)
#773 := (iff #803 #770)
#783 := (ite #577 #801 #781)
#766 := (ite #877 #801 #783)
#771 := (iff #766 #770)
#772 := [rewrite]: #771
#767 := (iff #803 #766)
#763 := (iff #814 #783)
#782 := (iff #719 #781)
#778 := (= #718 #777)
#786 := (= #717 #830)
#848 := (= #466 -1::int)
#849 := [rewrite]: #848
#791 := [monotonicity #849]: #786
#780 := [monotonicity #791]: #778
#779 := [monotonicity #780]: #782
#789 := (iff #810 #801)
#787 := (= #813 #62)
#799 := (+ #62 0::int)
#784 := (= #799 #62)
#785 := [rewrite]: #784
#793 := (= #813 #799)
#797 := (= #720 0::int)
#805 := (* -1::int 0::int)
#807 := (= #805 0::int)
#796 := [rewrite]: #807
#806 := (= #720 #805)
#794 := (= #828 0::int)
#804 := [rewrite]: #794
#802 := [monotonicity #804]: #806
#798 := [trans #802 #796]: #797
#800 := [monotonicity #798]: #793
#788 := [trans #800 #785]: #787
#790 := [monotonicity #788]: #789
#578 := (iff #542 #577)
#575 := (iff #530 #853)
#866 := (iff #873 #871)
#864 := (or #871 false)
#865 := (iff #864 #871)
#863 := [rewrite]: #865
#504 := (iff #873 #864)
#518 := (iff #536 false)
#519 := [rewrite]: #518
#505 := [monotonicity #519]: #504
#852 := [trans #505 #863]: #866
#576 := [monotonicity #852]: #575
#499 := (iff #541 #861)
#860 := (iff #867 #660)
#520 := (or false #660)
#858 := (iff #520 #660)
#859 := [rewrite]: #858
#856 := (iff #867 #520)
#857 := [monotonicity #519]: #856
#855 := [trans #857 #859]: #860
#862 := [monotonicity #855]: #499
#472 := [monotonicity #862 #576]: #578
#764 := [monotonicity #472 #790 #779]: #763
#768 := [monotonicity #764]: #767
#774 := [trans #768 #772]: #773
#868 := (iff #876 false)
#528 := [rewrite]: #868
#776 := [monotonicity #528 #774]: #765
#758 := [trans #776 #755]: #757
#745 := [trans #758 #748]: #744
#747 := [monotonicity #745]: #752
#727 := [trans #747 #726]: #752
#751 := [quant-inst]: #750
#728 := [mp #751 #727]: #749
#956 := [unit-resolution #728 #892]: #756
#738 := (not #756)
#743 := (or #738 #736 #801)
#723 := [def-axiom]: #743
#958 := [unit-resolution #723 #956]: #957
#959 := [unit-resolution #958 #955]: #801
#705 := (not #801)
#960 := (or #705 #929)
#961 := [th-lemma]: #960
#962 := [unit-resolution #961 #959]: #929
#671 := (* -1::int #64)
#672 := (+ #62 #671)
#674 := (>= #672 0::int)
#687 := (= #62 #64)
#683 := (>= #62 0::int)
#963 := (or #705 #683)
#964 := [th-lemma]: #963
#965 := [unit-resolution #964 #959]: #683
#684 := (not #683)
#689 := (or #684 #687)
#203 := (= #9 #45)
#228 := (or #203 #222)
#902 := (forall (vars (?v0 int)) (:pat #901) #228)
#233 := (forall (vars (?v0 int)) #228)
#905 := (iff #233 #902)
#903 := (iff #228 #228)
#904 := [refl]: #903
#906 := [quant-intro #904]: #905
#314 := (~ #233 #233)
#331 := (~ #228 #228)
#332 := [refl]: #331
#315 := [nnf-pos #332]: #314
#46 := (= #45 #9)
#43 := (<= 0::int #9)
#47 := (implies #43 #46)
#48 := (forall (vars (?v0 int)) #47)
#236 := (iff #48 #233)
#210 := (not #43)
#211 := (or #210 #203)
#216 := (forall (vars (?v0 int)) #211)
#234 := (iff #216 #233)
#231 := (iff #211 #228)
#225 := (or #222 #203)
#229 := (iff #225 #228)
#230 := [rewrite]: #229
#226 := (iff #211 #225)
#223 := (iff #210 #222)
#220 := (iff #43 #219)
#221 := [rewrite]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#232 := [trans #227 #230]: #231
#235 := [quant-intro #232]: #234
#217 := (iff #48 #216)
#214 := (iff #47 #211)
#207 := (implies #43 #203)
#212 := (iff #207 #211)
#213 := [rewrite]: #212
#208 := (iff #47 #207)
#205 := (iff #46 #203)
#206 := [rewrite]: #205
#209 := [monotonicity #206]: #208
#215 := [trans #209 #213]: #214
#218 := [quant-intro #215]: #217
#237 := [trans #218 #235]: #236
#202 := [asserted]: #48
#238 := [mp #202 #237]: #233
#333 := [mp~ #238 #315]: #233
#907 := [mp #333 #906]: #902
#692 := (not #902)
#693 := (or #692 #684 #687)
#688 := (or #687 #684)
#694 := (or #692 #688)
#667 := (iff #694 #693)
#695 := (or #692 #689)
#664 := (iff #695 #693)
#666 := [rewrite]: #664
#656 := (iff #694 #695)
#690 := (iff #688 #689)
#691 := [rewrite]: #690
#657 := [monotonicity #691]: #656
#668 := [trans #657 #666]: #667
#679 := [quant-inst]: #694
#670 := [mp #679 #668]: #693
#966 := [unit-resolution #670 #907]: #689
#967 := [unit-resolution #966 #965]: #687
#968 := (not #687)
#969 := (or #968 #674)
#970 := [th-lemma]: #969
#971 := [unit-resolution #970 #967]: #674
#973 := (not #674)
#972 := (not #929)
#974 := (or #654 #972 #973)
#975 := [th-lemma]: #974
#976 := [unit-resolution #975 #971 #962]: #654
#650 := (>= #64 0::int)
#673 := (<= #672 0::int)
#977 := (or #968 #673)
#978 := [th-lemma]: #977
#979 := [unit-resolution #978 #967]: #673
#980 := (not #673)
#981 := (or #650 #684 #980)
#982 := [th-lemma]: #981
#983 := [unit-resolution #982 #979 #965]: #650
#985 := [th-lemma #983 #976]: #984
#987 := [symm #985]: #986
#1034 := [monotonicity #987]: #1033
#1036 := [symm #1034]: #1035
#1037 := (= f7 #711)
#1031 := (= #706 #711)
#1029 := (= #54 #286)
#626 := (= #58 #286)
#710 := (= #57 #283)
#677 := (or #700 #710)
#678 := [quant-inst]: #677
#988 := [unit-resolution #678 #900]: #710
#1024 := [monotonicity #988]: #626
#1027 := (= #54 #58)
#655 := (= #56 #58)
#676 := (>= #56 0::int)
#555 := (div #54 1::int)
#556 := (* -1::int #555)
#489 := (+ #54 #556)
#473 := (<= #489 0::int)
#488 := (= #489 0::int)
#1 := true
#83 := [true-axiom]: true
#989 := (or false #488)
#990 := [th-lemma]: #989
#991 := [unit-resolution #990 #83]: #488
#992 := (not #488)
#993 := (or #992 #473)
#994 := [th-lemma]: #993
#995 := [unit-resolution #994 #991]: #473
#553 := (+ #56 #556)
#823 := (>= #553 0::int)
#557 := (= #553 0::int)
#571 := (div #550 -1::int)
#850 := (* -1::int #571)
#561 := (+ #56 #850)
#564 := (= #561 0::int)
#558 := (ite #577 #557 #564)
#997 := (or #877 #558)
#875 := (= #56 0::int)
#841 := (ite #877 #875 #558)
#10 := (f3 #8 #9)
#879 := (pattern #10)
#99 := (div #93 #96)
#382 := (* -1::int #99)
#383 := (+ #10 #382)
#384 := (= #383 0::int)
#21 := (div #8 #9)
#379 := (* -1::int #21)
#380 := (+ #10 #379)
#381 := (= #380 0::int)
#385 := (ite #344 #381 #384)
#378 := (= #10 0::int)
#14 := (or #12 #13)
#386 := (ite #14 #378 #385)
#880 := (forall (vars (?v0 int) (?v1 int)) (:pat #879) #386)
#389 := (forall (vars (?v0 int) (?v1 int)) #386)
#883 := (iff #389 #880)
#881 := (iff #386 #386)
#882 := [refl]: #881
#884 := [quant-intro #882]: #883
#349 := (ite #344 #21 #99)
#352 := (ite #14 0::int #349)
#355 := (= #10 #352)
#358 := (forall (vars (?v0 int) (?v1 int)) #355)
#390 := (iff #358 #389)
#387 := (iff #355 #386)
#388 := [rewrite]: #387
#391 := [quant-intro #388]: #390
#135 := (ite #132 #21 #99)
#138 := (ite #14 0::int #135)
#141 := (= #10 #138)
#144 := (forall (vars (?v0 int) (?v1 int)) #141)
#359 := (iff #144 #358)
#356 := (iff #141 #355)
#353 := (= #138 #352)
#350 := (= #135 #349)
#351 := [monotonicity #348]: #350
#354 := [monotonicity #351]: #353
#357 := [monotonicity #354]: #356
#360 := [quant-intro #357]: #359
#324 := (~ #144 #144)
#322 := (~ #141 #141)
#323 := [refl]: #322
#325 := [nnf-pos #323]: #324
#24 := (div #22 #23)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#147 := (iff #28 #144)
#102 := (ite #89 #21 #99)
#105 := (ite #14 0::int #102)
#108 := (= #10 #105)
#111 := (forall (vars (?v0 int) (?v1 int)) #108)
#145 := (iff #111 #144)
#142 := (iff #108 #141)
#139 := (= #105 #138)
#136 := (= #102 #135)
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [quant-intro #143]: #145
#112 := (iff #28 #111)
#109 := (iff #27 #108)
#106 := (= #26 #105)
#103 := (= #25 #102)
#100 := (= #24 #99)
#101 := [monotonicity #95 #98]: #100
#104 := [monotonicity #91 #101]: #103
#107 := [monotonicity #104]: #106
#110 := [monotonicity #107]: #109
#113 := [quant-intro #110]: #112
#148 := [trans #113 #146]: #147
#85 := [asserted]: #28
#149 := [mp #85 #148]: #144
#309 := [mp~ #149 #325]: #144
#361 := [mp #309 #360]: #358
#392 := [mp #361 #391]: #389
#885 := [mp #392 #884]: #880
#835 := (not #880)
#836 := (or #835 #841)
#551 := (div #550 #466)
#552 := (* -1::int #551)
#543 := (+ #56 #552)
#554 := (= #543 0::int)
#874 := (ite #542 #557 #554)
#872 := (or #877 #876)
#878 := (ite #872 #875 #874)
#831 := (or #835 #878)
#837 := (iff #831 #836)
#833 := (iff #836 #836)
#839 := [rewrite]: #833
#845 := (iff #878 #841)
#840 := (iff #874 #558)
#842 := (iff #554 #564)
#562 := (= #543 #561)
#847 := (= #552 #850)
#572 := (= #551 #571)
#846 := [monotonicity #849]: #572
#851 := [monotonicity #846]: #847
#563 := [monotonicity #851]: #562
#843 := [monotonicity #563]: #842
#844 := [monotonicity #472 #843]: #840
#854 := (iff #872 #877)
#533 := (or #877 false)
#870 := (iff #533 #877)
#513 := [rewrite]: #870
#869 := (iff #872 #533)
#529 := [monotonicity #528]: #869
#517 := [trans #529 #513]: #854
#834 := [monotonicity #517 #844]: #845
#838 := [monotonicity #834]: #837
#680 := [trans #838 #839]: #837
#832 := [quant-inst]: #831
#681 := [mp #832 #680]: #836
#996 := [unit-resolution #681 #885]: #841
#811 := (not #841)
#812 := (or #811 #877 #558)
#697 := [def-axiom]: #812
#998 := [unit-resolution #697 #996]: #997
#999 := [unit-resolution #998 #934]: #558
#825 := (or #577 #871)
#826 := [def-axiom]: #825
#1000 := [unit-resolution #826 #954]: #577
#827 := (not #577)
#662 := (not #558)
#815 := (or #662 #827 #557)
#816 := [def-axiom]: #815
#1001 := [unit-resolution #816 #1000 #999]: #557
#817 := (not #557)
#1002 := (or #817 #823)
#1003 := [th-lemma]: #1002
#1004 := [unit-resolution #1003 #1001]: #823
#1006 := (not #473)
#1005 := (not #823)
#1007 := (or #676 #1005 #861 #1006)
#1008 := [th-lemma]: #1007
#1009 := [unit-resolution #1008 #1004 #949 #995]: #676
#646 := (not #676)
#634 := (or #655 #646)
#643 := (or #692 #655 #646)
#644 := (or #692 #634)
#645 := (iff #644 #643)
#633 := [rewrite]: #645
#642 := [quant-inst]: #644
#636 := [mp #642 #633]: #643
#1010 := [unit-resolution #636 #907]: #634
#1011 := [unit-resolution #1010 #1009]: #655
#1025 := (= #54 #56)
#1022 := (= #555 #56)
#1015 := (= #56 #555)
#829 := (<= #553 0::int)
#1012 := (or #817 #829)
#1013 := [th-lemma]: #1012
#1014 := [unit-resolution #1013 #1001]: #829
#1016 := [th-lemma #1004 #1014]: #1015
#1023 := [symm #1016]: #1022
#1020 := (= #54 #555)
#474 := (>= #489 0::int)
#1017 := (or #992 #474)
#1018 := [th-lemma]: #1017
#1019 := [unit-resolution #1018 #991]: #474
#1021 := [th-lemma #1019 #995]: #1020
#1026 := [trans #1021 #1023]: #1025
#1028 := [trans #1026 #1011]: #1027
#1030 := [trans #1028 #1024]: #1029
#1032 := [monotonicity #1030]: #1031
#1038 := [trans #935 #1032]: #1037
#1039 := [trans #1038 #1036]: #300
#303 := (not #300)
#59 := (* #58 1::int)
#60 := (f5 #59)
#61 := (f6 #60)
#65 := (+ #61 #64)
#66 := (f5 #65)
#67 := (= f7 #66)
#68 := (not #67)
#304 := (iff #68 #303)
#301 := (iff #67 #300)
#298 := (= #66 #297)
#295 := (= #65 #292)
#289 := (+ #286 #64)
#293 := (= #289 #292)
#294 := [rewrite]: #293
#290 := (= #65 #289)
#287 := (= #61 #286)
#284 := (= #60 #283)
#281 := (= #59 #58)
#282 := [rewrite]: #281
#285 := [monotonicity #282]: #284
#288 := [monotonicity #285]: #287
#291 := [monotonicity #288]: #290
#296 := [trans #291 #294]: #295
#299 := [monotonicity #296]: #298
#302 := [monotonicity #299]: #301
#305 := [monotonicity #302]: #304
#280 := [asserted]: #68
#308 := [mp #280 #305]: #303
#1040 := [unit-resolution #308 #1039]: false
#1041 := [lemma #1040]: #877
#1075 := [symm #1041]: #1074
#1095 := (= #292 0::int)
#607 := (<= #286 0::int)
#631 := (= #286 0::int)
#1062 := (= #286 #54)
#1060 := (= #283 f7)
#1058 := (= #283 #706)
#1056 := (= #57 #706)
#1052 := (= #706 #57)
#1049 := (= 0::int #56)
#1046 := (or #713 #875)
#808 := (or #811 #713 #875)
#809 := [def-axiom]: #808
#1047 := [unit-resolution #809 #996]: #1046
#1048 := [unit-resolution #1047 #1041]: #875
#1050 := [symm #1048]: #1049
#1051 := [trans #1041 #1050]: #1025
#1053 := [monotonicity #1051]: #1052
#1057 := [symm #1053]: #1056
#1054 := (= #283 #57)
#1055 := [symm #988]: #1054
#1059 := [trans #1055 #1057]: #1058
#1061 := [trans #1059 #937]: #1060
#1063 := [monotonicity #1061]: #1062
#1064 := [trans #1063 #1041]: #631
#1065 := (not #631)
#1066 := (or #1065 #607)
#1067 := [th-lemma]: #1066
#1068 := [unit-resolution #1067 #1064]: #607
#608 := (>= #286 0::int)
#1069 := (or #1065 #608)
#1070 := [th-lemma]: #1069
#1071 := [unit-resolution #1070 #1064]: #608
#675 := (= #64 0::int)
#1085 := (= #64 #54)
#1042 := (= #64 #286)
#1082 := (= #63 #283)
#1080 := (= #63 #57)
#1078 := (= #63 #706)
#1076 := (= #62 #54)
#739 := (or #759 #713)
#735 := [def-axiom]: #739
#1072 := [unit-resolution #735 #1041]: #759
#1073 := [unit-resolution #958 #1072]: #801
#1077 := [trans #1073 #1075]: #1076
#1079 := [monotonicity #1077]: #1078
#1081 := [trans #1079 #1053]: #1080
#1083 := [trans #1081 #988]: #1082
#1084 := [monotonicity #1083]: #1042
#1086 := [trans #1084 #1063]: #1085
#1087 := [trans #1086 #1041]: #675
#1088 := (not #675)
#1089 := (or #1088 #654)
#1090 := [th-lemma]: #1089
#1091 := [unit-resolution #1090 #1087]: #654
#1092 := (or #1088 #650)
#1093 := [th-lemma]: #1092
#1094 := [unit-resolution #1093 #1087]: #650
#1096 := [th-lemma #1094 #1091 #1071 #1068]: #1095
#1098 := [trans #1096 #1075]: #1097
#1100 := [monotonicity #1098]: #1099
#1102 := [symm #1100]: #1101
#1103 := [trans #935 #1102]: #300
[unit-resolution #308 #1103]: false
unsat
30266f09c986583d8c5407f4e044da694063d38f 303 0
#2 := false
decl f5 :: (-> int S2)
#11 := 0::int
#56 := (f5 0::int)
decl f4 :: (-> int int int)
#53 := 3::int
#54 := (f4 3::int 3::int)
#55 := (f5 #54)
#57 := (= #55 #56)
#832 := (= #54 0::int)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#851 := (pattern #29)
#82 := -1::int
#86 := (* -1::int #9)
#83 := (* -1::int #8)
#141 := (mod #83 #86)
#362 := (+ #29 #141)
#363 := (= #362 0::int)
#30 := (mod #8 #9)
#359 := (* -1::int #30)
#360 := (+ #29 #359)
#361 := (= #360 0::int)
#108 := (<= #9 0::int)
#104 := (<= #8 0::int)
#301 := (or #104 #108)
#302 := (not #301)
#115 := (>= #8 0::int)
#284 := (or #108 #115)
#285 := (not #284)
#308 := (or #285 #302)
#364 := (ite #308 #361 #363)
#358 := (= #29 0::int)
#12 := (= #8 0::int)
#365 := (ite #12 #358 #364)
#357 := (= #8 #29)
#13 := (= #9 0::int)
#366 := (ite #13 #357 #365)
#852 := (forall (vars (?v0 int) (?v1 int)) (:pat #851) #366)
#369 := (forall (vars (?v0 int) (?v1 int)) #366)
#855 := (iff #369 #852)
#853 := (iff #366 #366)
#854 := [refl]: #853
#856 := [quant-intro #854]: #855
#147 := (* -1::int #141)
#326 := (ite #308 #30 #147)
#329 := (ite #12 0::int #326)
#332 := (ite #13 #8 #329)
#335 := (= #29 #332)
#338 := (forall (vars (?v0 int) (?v1 int)) #335)
#370 := (iff #338 #369)
#367 := (iff #335 #366)
#368 := [rewrite]: #367
#371 := [quant-intro #368]: #370
#116 := (not #115)
#109 := (not #108)
#119 := (and #109 #116)
#105 := (not #104)
#112 := (and #105 #109)
#122 := (or #112 #119)
#167 := (ite #122 #30 #147)
#170 := (ite #12 0::int #167)
#173 := (ite #13 #8 #170)
#176 := (= #29 #173)
#179 := (forall (vars (?v0 int) (?v1 int)) #176)
#339 := (iff #179 #338)
#336 := (iff #176 #335)
#333 := (= #173 #332)
#330 := (= #170 #329)
#327 := (= #167 #326)
#311 := (iff #122 #308)
#305 := (or #302 #285)
#309 := (iff #305 #308)
#310 := [rewrite]: #309
#306 := (iff #122 #305)
#303 := (iff #119 #285)
#304 := [rewrite]: #303
#282 := (iff #112 #302)
#283 := [rewrite]: #282
#307 := [monotonicity #283 #304]: #306
#312 := [trans #307 #310]: #311
#328 := [monotonicity #312]: #327
#331 := [monotonicity #328]: #330
#334 := [monotonicity #331]: #333
#337 := [monotonicity #334]: #336
#340 := [quant-intro #337]: #339
#274 := (~ #179 #179)
#271 := (~ #176 #176)
#290 := [refl]: #271
#275 := [nnf-pos #290]: #274
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#182 := (iff #37 #179)
#76 := (and #16 #18)
#79 := (or #17 #76)
#152 := (ite #79 #30 #147)
#155 := (ite #12 0::int #152)
#158 := (ite #13 #8 #155)
#161 := (= #29 #158)
#164 := (forall (vars (?v0 int) (?v1 int)) #161)
#180 := (iff #164 #179)
#177 := (iff #161 #176)
#174 := (= #158 #173)
#171 := (= #155 #170)
#168 := (= #152 #167)
#123 := (iff #79 #122)
#120 := (iff #76 #119)
#117 := (iff #18 #116)
#118 := [rewrite]: #117
#110 := (iff #16 #109)
#111 := [rewrite]: #110
#121 := [monotonicity #111 #118]: #120
#113 := (iff #17 #112)
#106 := (iff #15 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#124 := [monotonicity #114 #121]: #123
#169 := [monotonicity #124]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [quant-intro #178]: #180
#165 := (iff #37 #164)
#162 := (iff #36 #161)
#159 := (= #35 #158)
#156 := (= #34 #155)
#153 := (= #33 #152)
#150 := (= #32 #147)
#144 := (- #141)
#148 := (= #144 #147)
#149 := [rewrite]: #148
#145 := (= #32 #144)
#142 := (= #31 #141)
#87 := (= #23 #86)
#88 := [rewrite]: #87
#84 := (= #22 #83)
#85 := [rewrite]: #84
#143 := [monotonicity #85 #88]: #142
#146 := [monotonicity #143]: #145
#151 := [trans #146 #149]: #150
#80 := (iff #20 #79)
#77 := (iff #19 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#154 := [monotonicity #81 #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#183 := [trans #166 #181]: #182
#140 := [asserted]: #37
#184 := [mp #140 #183]: #179
#291 := [mp~ #184 #275]: #179
#341 := [mp #291 #340]: #338
#372 := [mp #341 #371]: #369
#857 := [mp #372 #856]: #852
#777 := (not #852)
#662 := (or #777 #832)
#430 := (* -1::int 3::int)
#515 := (mod #430 #430)
#516 := (+ #54 #515)
#517 := (= #516 0::int)
#508 := (mod 3::int 3::int)
#519 := (* -1::int #508)
#520 := (+ #54 #519)
#448 := (= #520 0::int)
#521 := (<= 3::int 0::int)
#518 := (or #521 #521)
#522 := (not #518)
#501 := (>= 3::int 0::int)
#836 := (or #521 #501)
#838 := (not #836)
#495 := (or #838 #522)
#625 := (ite #495 #448 #517)
#506 := (= 3::int 0::int)
#507 := (ite #506 #832 #625)
#839 := (= 3::int #54)
#840 := (ite #506 #839 #507)
#677 := (or #777 #840)
#680 := (iff #677 #662)
#681 := (iff #662 #662)
#682 := [rewrite]: #681
#773 := (iff #840 #832)
#843 := (= #54 3::int)
#668 := (ite false #843 #832)
#776 := (iff #668 #832)
#678 := [rewrite]: #776
#669 := (iff #840 #668)
#785 := (iff #507 #832)
#780 := (ite false #832 #832)
#784 := (iff #780 #832)
#782 := [rewrite]: #784
#781 := (iff #507 #780)
#626 := (iff #625 #832)
#1 := true
#793 := (ite true #832 #832)
#795 := (iff #793 #832)
#624 := [rewrite]: #795
#794 := (iff #625 #793)
#786 := (iff #517 #832)
#791 := (= #516 #54)
#807 := (+ #54 0::int)
#805 := (= #807 #54)
#809 := [rewrite]: #805
#789 := (= #516 #807)
#646 := (= #515 0::int)
#801 := -3::int
#802 := (mod -3::int -3::int)
#804 := (= #802 0::int)
#645 := [rewrite]: #804
#803 := (= #515 #802)
#796 := (= #430 -3::int)
#797 := [rewrite]: #796
#798 := [monotonicity #797 #797]: #803
#647 := [trans #798 #645]: #646
#790 := [monotonicity #647]: #789
#792 := [trans #790 #809]: #791
#787 := [monotonicity #792]: #786
#799 := (iff #448 #832)
#806 := (= #520 #54)
#808 := (= #520 #807)
#528 := (= #519 0::int)
#815 := (* -1::int 0::int)
#526 := (= #815 0::int)
#527 := [rewrite]: #526
#812 := (= #519 #815)
#537 := (= #508 0::int)
#811 := [rewrite]: #537
#816 := [monotonicity #811]: #812
#529 := [trans #816 #527]: #528
#523 := [monotonicity #529]: #808
#810 := [trans #523 #809]: #806
#800 := [monotonicity #810]: #799
#814 := (iff #495 true)
#835 := (or false true)
#482 := (iff #835 true)
#483 := [rewrite]: #482
#436 := (iff #495 #835)
#542 := (iff #522 true)
#831 := (not false)
#540 := (iff #831 true)
#541 := [rewrite]: #540
#817 := (iff #522 #831)
#830 := (iff #518 false)
#464 := (or false false)
#469 := (iff #464 false)
#470 := [rewrite]: #469
#827 := (iff #518 #464)
#493 := (iff #521 false)
#498 := [rewrite]: #493
#829 := [monotonicity #498 #498]: #827
#828 := [trans #829 #470]: #830
#818 := [monotonicity #828]: #817
#543 := [trans #818 #541]: #542
#820 := (iff #838 false)
#821 := (not true)
#824 := (iff #821 false)
#825 := [rewrite]: #824
#822 := (iff #838 #821)
#484 := (iff #836 true)
#478 := (iff #836 #835)
#834 := (iff #501 true)
#494 := [rewrite]: #834
#819 := [monotonicity #498 #494]: #478
#485 := [trans #819 #483]: #484
#823 := [monotonicity #485]: #822
#826 := [trans #823 #825]: #820
#813 := [monotonicity #826 #543]: #436
#536 := [trans #813 #483]: #814
#788 := [monotonicity #536 #800 #787]: #794
#627 := [trans #788 #624]: #626
#841 := (iff #506 false)
#842 := [rewrite]: #841
#783 := [monotonicity #842 #627]: #781
#667 := [trans #783 #782]: #785
#837 := (iff #839 #843)
#833 := [rewrite]: #837
#628 := [monotonicity #842 #833 #667]: #669
#774 := [trans #628 #678]: #773
#673 := [monotonicity #774]: #680
#683 := [trans #673 #682]: #680
#679 := [quant-inst]: #677
#684 := [mp #679 #683]: #662
#704 := [unit-resolution #684 #857]: #832
#700 := [monotonicity #704]: #57
#58 := (not #57)
#270 := [asserted]: #58
[unit-resolution #270 #700]: false
unsat
29a274d82d7dfcc17be98231a7a95a9ec14cd706 533 0
#2 := false
#55 := 3::int
decl f6 :: (-> S2 int)
decl f7 :: S2
#53 := f7
#54 := (f6 f7)
#533 := (mod #54 3::int)
#664 := (>= #533 3::int)
#665 := (not #664)
#1 := true
#75 := [true-axiom]: true
#674 := (or false #665)
#635 := [th-lemma]: #674
#636 := [unit-resolution #635 #75]: #665
#11 := 0::int
decl f5 :: (-> int S2)
decl f4 :: (-> int int int)
#56 := (f4 #54 3::int)
#57 := (f5 #56)
#58 := (f6 #57)
#84 := -1::int
#779 := (* -1::int #58)
#763 := (+ #56 #779)
#766 := (>= #763 0::int)
#773 := (= #56 #58)
#780 := (>= #56 0::int)
#784 := (= #58 0::int)
#649 := (not #784)
#746 := (<= #58 0::int)
#643 := (not #746)
#276 := (>= #58 3::int)
#59 := (< #58 3::int)
#60 := (not #59)
#284 := (iff #60 #276)
#275 := (not #276)
#279 := (not #275)
#282 := (iff #279 #276)
#283 := [rewrite]: #282
#280 := (iff #60 #279)
#277 := (iff #59 #275)
#278 := [rewrite]: #277
#281 := [monotonicity #278]: #280
#285 := [trans #281 #283]: #284
#272 := [asserted]: #60
#286 := [mp #272 #285]: #276
#645 := (or #643 #275)
#646 := [th-lemma]: #645
#647 := [unit-resolution #646 #286]: #643
#650 := (or #649 #746)
#651 := [th-lemma]: #650
#652 := [unit-resolution #651 #647]: #649
#9 := (:var 0 int)
#44 := (f5 #9)
#880 := (pattern #44)
#211 := (>= #9 0::int)
#45 := (f6 #44)
#50 := (= #45 0::int)
#261 := (or #50 #211)
#887 := (forall (vars (?v0 int)) (:pat #880) #261)
#266 := (forall (vars (?v0 int)) #261)
#890 := (iff #266 #887)
#888 := (iff #261 #261)
#889 := [refl]: #888
#891 := [quant-intro #889]: #890
#294 := (~ #266 #266)
#312 := (~ #261 #261)
#313 := [refl]: #312
#295 := [nnf-pos #313]: #294
#49 := (< #9 0::int)
#51 := (implies #49 #50)
#52 := (forall (vars (?v0 int)) #51)
#269 := (iff #52 #266)
#232 := (= 0::int #45)
#238 := (not #49)
#239 := (or #238 #232)
#244 := (forall (vars (?v0 int)) #239)
#267 := (iff #244 #266)
#264 := (iff #239 #261)
#258 := (or #211 #50)
#262 := (iff #258 #261)
#263 := [rewrite]: #262
#259 := (iff #239 #258)
#256 := (iff #232 #50)
#257 := [rewrite]: #256
#254 := (iff #238 #211)
#214 := (not #211)
#249 := (not #214)
#252 := (iff #249 #211)
#253 := [rewrite]: #252
#250 := (iff #238 #249)
#247 := (iff #49 #214)
#248 := [rewrite]: #247
#251 := [monotonicity #248]: #250
#255 := [trans #251 #253]: #254
#260 := [monotonicity #255 #257]: #259
#265 := [trans #260 #263]: #264
#268 := [quant-intro #265]: #267
#245 := (iff #52 #244)
#242 := (iff #51 #239)
#235 := (implies #49 #232)
#240 := (iff #235 #239)
#241 := [rewrite]: #240
#236 := (iff #51 #235)
#233 := (iff #50 #232)
#234 := [rewrite]: #233
#237 := [monotonicity #234]: #236
#243 := [trans #237 #241]: #242
#246 := [quant-intro #243]: #245
#270 := [trans #246 #268]: #269
#231 := [asserted]: #52
#271 := [mp #231 #270]: #266
#314 := [mp~ #271 #295]: #266
#892 := [mp #314 #891]: #887
#765 := (not #887)
#770 := (or #765 #780 #784)
#785 := (or #784 #780)
#756 := (or #765 #785)
#742 := (iff #756 #770)
#767 := (or #780 #784)
#759 := (or #765 #767)
#758 := (iff #759 #770)
#762 := [rewrite]: #758
#760 := (iff #756 #759)
#768 := (iff #785 #767)
#769 := [rewrite]: #768
#761 := [monotonicity #769]: #760
#743 := [trans #761 #762]: #742
#757 := [quant-inst]: #756
#745 := [mp #757 #743]: #770
#653 := [unit-resolution #745 #892 #652]: #780
#782 := (not #780)
#783 := (or #773 #782)
#195 := (= #9 #45)
#220 := (or #195 #214)
#881 := (forall (vars (?v0 int)) (:pat #880) #220)
#225 := (forall (vars (?v0 int)) #220)
#884 := (iff #225 #881)
#882 := (iff #220 #220)
#883 := [refl]: #882
#885 := [quant-intro #883]: #884
#292 := (~ #225 #225)
#309 := (~ #220 #220)
#310 := [refl]: #309
#293 := [nnf-pos #310]: #292
#46 := (= #45 #9)
#43 := (<= 0::int #9)
#47 := (implies #43 #46)
#48 := (forall (vars (?v0 int)) #47)
#228 := (iff #48 #225)
#202 := (not #43)
#203 := (or #202 #195)
#208 := (forall (vars (?v0 int)) #203)
#226 := (iff #208 #225)
#223 := (iff #203 #220)
#217 := (or #214 #195)
#221 := (iff #217 #220)
#222 := [rewrite]: #221
#218 := (iff #203 #217)
#215 := (iff #202 #214)
#212 := (iff #43 #211)
#213 := [rewrite]: #212
#216 := [monotonicity #213]: #215
#219 := [monotonicity #216]: #218
#224 := [trans #219 #222]: #223
#227 := [quant-intro #224]: #226
#209 := (iff #48 #208)
#206 := (iff #47 #203)
#199 := (implies #43 #195)
#204 := (iff #199 #203)
#205 := [rewrite]: #204
#200 := (iff #47 #199)
#197 := (iff #46 #195)
#198 := [rewrite]: #197
#201 := [monotonicity #198]: #200
#207 := [trans #201 #205]: #206
#210 := [quant-intro #207]: #209
#229 := [trans #210 #227]: #228
#194 := [asserted]: #48
#230 := [mp #194 #229]: #225
#311 := [mp~ #230 #293]: #225
#886 := [mp #311 #885]: #881
#781 := (not #881)
#786 := (or #781 #773 #782)
#775 := (or #781 #783)
#777 := (iff #775 #786)
#778 := [rewrite]: #777
#776 := [quant-inst]: #775
#772 := [mp #776 #778]: #786
#654 := [unit-resolution #772 #886]: #783
#637 := [unit-resolution #654 #653]: #773
#655 := (not #773)
#625 := (or #655 #766)
#626 := [th-lemma]: #625
#627 := [unit-resolution #626 #637]: #766
#534 := (* -1::int #533)
#462 := (+ #56 #534)
#802 := (<= #462 0::int)
#535 := (= #462 0::int)
#556 := -3::int
#529 := (* -1::int #54)
#827 := (mod #529 -3::int)
#551 := (+ #56 #827)
#826 := (= #551 0::int)
#852 := (>= #54 0::int)
#498 := (not #852)
#536 := (<= #54 0::int)
#841 := (not #536)
#845 := (or #841 #498)
#541 := (ite #845 #535 #826)
#521 := (= #56 0::int)
#853 := (= #54 0::int)
#821 := (ite #853 #521 #541)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#865 := (pattern #29)
#88 := (* -1::int #9)
#85 := (* -1::int #8)
#143 := (mod #85 #88)
#376 := (+ #29 #143)
#377 := (= #376 0::int)
#30 := (mod #8 #9)
#373 := (* -1::int #30)
#374 := (+ #29 #373)
#375 := (= #374 0::int)
#110 := (<= #9 0::int)
#106 := (<= #8 0::int)
#315 := (or #106 #110)
#316 := (not #315)
#117 := (>= #8 0::int)
#298 := (or #110 #117)
#299 := (not #298)
#322 := (or #299 #316)
#378 := (ite #322 #375 #377)
#372 := (= #29 0::int)
#12 := (= #8 0::int)
#379 := (ite #12 #372 #378)
#371 := (= #8 #29)
#13 := (= #9 0::int)
#380 := (ite #13 #371 #379)
#866 := (forall (vars (?v0 int) (?v1 int)) (:pat #865) #380)
#383 := (forall (vars (?v0 int) (?v1 int)) #380)
#869 := (iff #383 #866)
#867 := (iff #380 #380)
#868 := [refl]: #867
#870 := [quant-intro #868]: #869
#149 := (* -1::int #143)
#340 := (ite #322 #30 #149)
#343 := (ite #12 0::int #340)
#346 := (ite #13 #8 #343)
#349 := (= #29 #346)
#352 := (forall (vars (?v0 int) (?v1 int)) #349)
#384 := (iff #352 #383)
#381 := (iff #349 #380)
#382 := [rewrite]: #381
#385 := [quant-intro #382]: #384
#118 := (not #117)
#111 := (not #110)
#121 := (and #111 #118)
#107 := (not #106)
#114 := (and #107 #111)
#124 := (or #114 #121)
#169 := (ite #124 #30 #149)
#172 := (ite #12 0::int #169)
#175 := (ite #13 #8 #172)
#178 := (= #29 #175)
#181 := (forall (vars (?v0 int) (?v1 int)) #178)
#353 := (iff #181 #352)
#350 := (iff #178 #349)
#347 := (= #175 #346)
#344 := (= #172 #343)
#341 := (= #169 #340)
#325 := (iff #124 #322)
#319 := (or #316 #299)
#323 := (iff #319 #322)
#324 := [rewrite]: #323
#320 := (iff #124 #319)
#317 := (iff #121 #299)
#318 := [rewrite]: #317
#296 := (iff #114 #316)
#297 := [rewrite]: #296
#321 := [monotonicity #297 #318]: #320
#326 := [trans #321 #324]: #325
#342 := [monotonicity #326]: #341
#345 := [monotonicity #342]: #344
#348 := [monotonicity #345]: #347
#351 := [monotonicity #348]: #350
#354 := [quant-intro #351]: #353
#288 := (~ #181 #181)
#273 := (~ #178 #178)
#304 := [refl]: #273
#289 := [nnf-pos #304]: #288
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#184 := (iff #37 #181)
#78 := (and #16 #18)
#81 := (or #17 #78)
#154 := (ite #81 #30 #149)
#157 := (ite #12 0::int #154)
#160 := (ite #13 #8 #157)
#163 := (= #29 #160)
#166 := (forall (vars (?v0 int) (?v1 int)) #163)
#182 := (iff #166 #181)
#179 := (iff #163 #178)
#176 := (= #160 #175)
#173 := (= #157 #172)
#170 := (= #154 #169)
#125 := (iff #81 #124)
#122 := (iff #78 #121)
#119 := (iff #18 #118)
#120 := [rewrite]: #119
#112 := (iff #16 #111)
#113 := [rewrite]: #112
#123 := [monotonicity #113 #120]: #122
#115 := (iff #17 #114)
#108 := (iff #15 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#126 := [monotonicity #116 #123]: #125
#171 := [monotonicity #126]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#167 := (iff #37 #166)
#164 := (iff #36 #163)
#161 := (= #35 #160)
#158 := (= #34 #157)
#155 := (= #33 #154)
#152 := (= #32 #149)
#146 := (- #143)
#150 := (= #146 #149)
#151 := [rewrite]: #150
#147 := (= #32 #146)
#144 := (= #31 #143)
#89 := (= #23 #88)
#90 := [rewrite]: #89
#86 := (= #22 #85)
#87 := [rewrite]: #86
#145 := [monotonicity #87 #90]: #144
#148 := [monotonicity #145]: #147
#153 := [trans #148 #151]: #152
#82 := (iff #20 #81)
#79 := (iff #19 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#156 := [monotonicity #83 #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#185 := [trans #168 #183]: #184
#142 := [asserted]: #37
#186 := [mp #142 #185]: #181
#305 := [mp~ #186 #289]: #181
#355 := [mp #305 #354]: #352
#386 := [mp #355 #385]: #383
#871 := [mp #386 #870]: #866
#810 := (not #866)
#811 := (or #810 #821)
#444 := (* -1::int 3::int)
#530 := (mod #529 #444)
#531 := (+ #56 #530)
#522 := (= #531 0::int)
#532 := (<= 3::int 0::int)
#515 := (or #536 #532)
#850 := (not #515)
#509 := (or #532 #852)
#639 := (not #509)
#846 := (or #639 #850)
#520 := (ite #846 #535 #522)
#854 := (ite #853 #521 #520)
#855 := (= #54 #56)
#856 := (= 3::int 0::int)
#851 := (ite #856 #855 #854)
#816 := (or #810 #851)
#812 := (iff #816 #811)
#659 := (iff #811 #811)
#660 := [rewrite]: #659
#814 := (iff #851 #821)
#819 := (ite false #855 #821)
#824 := (iff #819 #821)
#813 := [rewrite]: #824
#823 := (iff #851 #819)
#822 := (iff #854 #821)
#542 := (iff #520 #541)
#830 := (iff #522 #826)
#825 := (= #531 #551)
#828 := (= #530 #827)
#557 := (= #444 -3::int)
#450 := [rewrite]: #557
#550 := [monotonicity #450]: #828
#829 := [monotonicity #550]: #825
#540 := [monotonicity #829]: #830
#554 := (iff #846 #845)
#484 := (or #498 #841)
#831 := (iff #484 #845)
#832 := [rewrite]: #831
#844 := (iff #846 #484)
#843 := (iff #850 #841)
#840 := (iff #515 #536)
#836 := (or #536 false)
#839 := (iff #836 #536)
#834 := [rewrite]: #839
#837 := (iff #515 #836)
#507 := (iff #532 false)
#512 := [rewrite]: #507
#838 := [monotonicity #512]: #837
#478 := [trans #838 #834]: #840
#483 := [monotonicity #478]: #843
#499 := (iff #639 #498)
#496 := (iff #509 #852)
#848 := (or false #852)
#492 := (iff #848 #852)
#833 := [rewrite]: #492
#508 := (iff #509 #848)
#849 := [monotonicity #512]: #508
#497 := [trans #849 #833]: #496
#835 := [monotonicity #497]: #499
#842 := [monotonicity #835 #483]: #844
#555 := [trans #842 #832]: #554
#543 := [monotonicity #555 #540]: #542
#537 := [monotonicity #543]: #822
#857 := (iff #856 false)
#847 := [rewrite]: #857
#820 := [monotonicity #847 #537]: #823
#815 := [trans #820 #813]: #814
#818 := [monotonicity #815]: #812
#661 := [trans #818 #660]: #812
#817 := [quant-inst]: #816
#803 := [mp #817 #661]: #811
#628 := [unit-resolution #803 #871]: #821
#692 := (not #853)
#691 := (not #521)
#633 := (iff #649 #691)
#632 := (iff #784 #521)
#630 := (iff #521 #784)
#631 := [monotonicity #637]: #630
#475 := [symm #631]: #632
#629 := [monotonicity #475]: #633
#634 := [mp #652 #629]: #691
#790 := (not #821)
#787 := (or #790 #692 #521)
#788 := [def-axiom]: #787
#613 := [unit-resolution #788 #634 #628]: #692
#791 := (or #790 #853 #541)
#676 := [def-axiom]: #791
#616 := [unit-resolution #676 #613 #628]: #541
#696 := (f5 #54)
#748 := (f6 #696)
#749 := (= #748 0::int)
#614 := (not #749)
#619 := (iff #692 #614)
#617 := (iff #853 #749)
#612 := (iff #749 #853)
#621 := (= #748 #54)
#622 := (= #696 f7)
#697 := (= f7 #696)
#38 := (:var 0 S2)
#39 := (f6 #38)
#872 := (pattern #39)
#40 := (f5 #39)
#188 := (= #38 #40)
#873 := (forall (vars (?v0 S2)) (:pat #872) #188)
#191 := (forall (vars (?v0 S2)) #188)
#874 := (iff #191 #873)
#876 := (iff #873 #873)
#877 := [rewrite]: #876
#875 := [rewrite]: #874
#878 := [trans #875 #877]: #874
#290 := (~ #191 #191)
#306 := (~ #188 #188)
#307 := [refl]: #306
#291 := [nnf-pos #307]: #290
#41 := (= #40 #38)
#42 := (forall (vars (?v0 S2)) #41)
#192 := (iff #42 #191)
#189 := (iff #41 #188)
#190 := [rewrite]: #189
#193 := [quant-intro #190]: #192
#187 := [asserted]: #42
#196 := [mp #187 #193]: #191
#308 := [mp~ #196 #291]: #191
#879 := [mp #308 #878]: #873
#792 := (not #873)
#789 := (or #792 #697)
#793 := [quant-inst]: #789
#620 := [unit-resolution #793 #879]: #697
#623 := [symm #620]: #622
#624 := [monotonicity #623]: #621
#615 := [monotonicity #624]: #612
#618 := [symm #615]: #617
#609 := [monotonicity #618]: #619
#599 := [mp #613 #609]: #614
#750 := (or #749 #852)
#753 := (or #765 #749 #852)
#754 := (or #765 #750)
#755 := (iff #754 #753)
#733 := [rewrite]: #755
#744 := [quant-inst]: #754
#734 := [mp #744 #733]: #753
#601 := [unit-resolution #734 #892]: #750
#602 := [unit-resolution #601 #599]: #852
#605 := (or #853 #841 #498)
#606 := [th-lemma]: #605
#610 := [unit-resolution #606 #613]: #845
#603 := [unit-resolution #610 #602]: #841
#804 := (or #845 #536)
#805 := [def-axiom]: #804
#611 := [unit-resolution #805 #603]: #845
#801 := (not #845)
#641 := (not #541)
#794 := (or #641 #801 #535)
#795 := [def-axiom]: #794
#604 := [unit-resolution #795 #611 #616]: #535
#796 := (not #535)
#607 := (or #796 #802)
#608 := [th-lemma]: #607
#594 := [unit-resolution #608 #604]: #802
[th-lemma #594 #286 #627 #636]: false
unsat
7c27e22543c792c36da02bc4168bcd3f7ce7432d 961 0
#2 := false
decl f5 :: (-> int S2)
decl f6 :: (-> S2 int)
decl f3 :: (-> int int int)
#55 := 3::int
decl f7 :: S2
#53 := f7
#54 := (f6 f7)
#56 := (f3 #54 3::int)
#57 := (f5 #56)
#58 := (f6 #57)
#281 := (* 3::int #58)
#284 := (f5 #281)
#287 := (f6 #284)
decl f4 :: (-> int int int)
#62 := (f4 #54 3::int)
#63 := (f5 #62)
#64 := (f6 #63)
#293 := (+ #64 #287)
#298 := (f5 #293)
#301 := (= f7 #298)
#749 := (f5 #64)
#1217 := (= #749 #298)
#1209 := (= #298 #749)
#1203 := (= #293 #64)
#1201 := (= #64 #293)
#11 := 0::int
#92 := -1::int
#644 := (* -1::int #287)
#647 := (+ #281 #644)
#621 := (<= #647 0::int)
#635 := (= #647 0::int)
#643 := (>= #58 0::int)
#623 := (f5 #58)
#504 := (f6 #623)
#505 := (= #504 0::int)
#945 := (not #505)
#650 := (= #58 0::int)
#977 := (not #650)
#1002 := (iff #977 #945)
#992 := (iff #650 #505)
#984 := (iff #505 #650)
#989 := (= #504 #58)
#982 := (= #623 #57)
#734 := (= #57 #623)
#38 := (:var 0 S2)
#39 := (f6 #38)
#895 := (pattern #39)
#40 := (f5 #39)
#196 := (= #38 #40)
#896 := (forall (vars (?v0 S2)) (:pat #895) #196)
#199 := (forall (vars (?v0 S2)) #196)
#897 := (iff #199 #896)
#899 := (iff #896 #896)
#900 := [rewrite]: #899
#898 := [rewrite]: #897
#901 := [trans #898 #900]: #897
#313 := (~ #199 #199)
#329 := (~ #196 #196)
#330 := [refl]: #329
#314 := [nnf-pos #330]: #313
#41 := (= #40 #38)
#42 := (forall (vars (?v0 S2)) #41)
#200 := (iff #42 #199)
#197 := (iff #41 #196)
#198 := [rewrite]: #197
#201 := [quant-intro #198]: #200
#195 := [asserted]: #42
#204 := [mp #195 #201]: #199
#331 := [mp~ #204 #314]: #199
#902 := [mp #331 #901]: #896
#728 := (not #896)
#738 := (or #728 #734)
#739 := [quant-inst]: #738
#985 := [unit-resolution #739 #902]: #734
#988 := [symm #985]: #982
#990 := [monotonicity #988]: #989
#991 := [monotonicity #990]: #984
#944 := [symm #991]: #992
#946 := [monotonicity #944]: #1002
#642 := (not #643)
#953 := [hypothesis]: #642
#983 := (or #977 #643)
#986 := [th-lemma]: #983
#987 := [unit-resolution #986 #953]: #977
#1003 := [mp #987 #946]: #945
#494 := (or #505 #643)
#9 := (:var 0 int)
#44 := (f5 #9)
#903 := (pattern #44)
#219 := (>= #9 0::int)
#45 := (f6 #44)
#50 := (= #45 0::int)
#269 := (or #50 #219)
#910 := (forall (vars (?v0 int)) (:pat #903) #269)
#274 := (forall (vars (?v0 int)) #269)
#913 := (iff #274 #910)
#911 := (iff #269 #269)
#912 := [refl]: #911
#914 := [quant-intro #912]: #913
#317 := (~ #274 #274)
#335 := (~ #269 #269)
#336 := [refl]: #335
#318 := [nnf-pos #336]: #317
#49 := (< #9 0::int)
#51 := (implies #49 #50)
#52 := (forall (vars (?v0 int)) #51)
#277 := (iff #52 #274)
#240 := (= 0::int #45)
#246 := (not #49)
#247 := (or #246 #240)
#252 := (forall (vars (?v0 int)) #247)
#275 := (iff #252 #274)
#272 := (iff #247 #269)
#266 := (or #219 #50)
#270 := (iff #266 #269)
#271 := [rewrite]: #270
#267 := (iff #247 #266)
#264 := (iff #240 #50)
#265 := [rewrite]: #264
#262 := (iff #246 #219)
#222 := (not #219)
#257 := (not #222)
#260 := (iff #257 #219)
#261 := [rewrite]: #260
#258 := (iff #246 #257)
#255 := (iff #49 #222)
#256 := [rewrite]: #255
#259 := [monotonicity #256]: #258
#263 := [trans #259 #261]: #262
#268 := [monotonicity #263 #265]: #267
#273 := [trans #268 #271]: #272
#276 := [quant-intro #273]: #275
#253 := (iff #52 #252)
#250 := (iff #51 #247)
#243 := (implies #49 #240)
#248 := (iff #243 #247)
#249 := [rewrite]: #248
#244 := (iff #51 #243)
#241 := (iff #50 #240)
#242 := [rewrite]: #241
#245 := [monotonicity #242]: #244
#251 := [trans #245 #249]: #250
#254 := [quant-intro #251]: #253
#278 := [trans #254 #276]: #277
#239 := [asserted]: #52
#279 := [mp #239 #278]: #274
#337 := [mp~ #279 #318]: #274
#915 := [mp #337 #914]: #910
#686 := (not #910)
#499 := (or #686 #505 #643)
#495 := (or #686 #494)
#482 := (iff #495 #499)
#486 := [rewrite]: #482
#500 := [quant-inst]: #495
#487 := [mp #500 #486]: #499
#954 := [unit-resolution #487 #915]: #494
#976 := [unit-resolution #954 #953]: #505
#1021 := [unit-resolution #976 #1003]: false
#1022 := [lemma #1021]: #643
#624 := (or #635 #642)
#203 := (= #9 #45)
#228 := (or #203 #222)
#904 := (forall (vars (?v0 int)) (:pat #903) #228)
#233 := (forall (vars (?v0 int)) #228)
#907 := (iff #233 #904)
#905 := (iff #228 #228)
#906 := [refl]: #905
#908 := [quant-intro #906]: #907
#315 := (~ #233 #233)
#332 := (~ #228 #228)
#333 := [refl]: #332
#316 := [nnf-pos #333]: #315
#46 := (= #45 #9)
#43 := (<= 0::int #9)
#47 := (implies #43 #46)
#48 := (forall (vars (?v0 int)) #47)
#236 := (iff #48 #233)
#210 := (not #43)
#211 := (or #210 #203)
#216 := (forall (vars (?v0 int)) #211)
#234 := (iff #216 #233)
#231 := (iff #211 #228)
#225 := (or #222 #203)
#229 := (iff #225 #228)
#230 := [rewrite]: #229
#226 := (iff #211 #225)
#223 := (iff #210 #222)
#220 := (iff #43 #219)
#221 := [rewrite]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#232 := [trans #227 #230]: #231
#235 := [quant-intro #232]: #234
#217 := (iff #48 #216)
#214 := (iff #47 #211)
#207 := (implies #43 #203)
#212 := (iff #207 #211)
#213 := [rewrite]: #212
#208 := (iff #47 #207)
#205 := (iff #46 #203)
#206 := [rewrite]: #205
#209 := [monotonicity #206]: #208
#215 := [trans #209 #213]: #214
#218 := [quant-intro #215]: #217
#237 := [trans #218 #235]: #236
#202 := [asserted]: #48
#238 := [mp #202 #237]: #233
#334 := [mp~ #238 #316]: #233
#909 := [mp #334 #908]: #904
#731 := (not #904)
#629 := (or #731 #635 #642)
#653 := (>= #281 0::int)
#654 := (not #653)
#645 := (= #281 #287)
#646 := (or #645 #654)
#633 := (or #731 #646)
#619 := (iff #633 #629)
#634 := (or #731 #624)
#631 := (iff #634 #629)
#617 := [rewrite]: #631
#627 := (iff #633 #634)
#625 := (iff #646 #624)
#632 := (iff #654 #642)
#641 := (iff #653 #643)
#637 := [rewrite]: #641
#622 := [monotonicity #637]: #632
#638 := (iff #645 #635)
#640 := [rewrite]: #638
#628 := [monotonicity #640 #622]: #625
#630 := [monotonicity #628]: #627
#620 := [trans #630 #617]: #619
#626 := [quant-inst]: #633
#618 := [mp #626 #620]: #629
#1080 := [unit-resolution #618 #909]: #624
#1081 := [unit-resolution #1080 #1022]: #635
#1082 := (not #635)
#1083 := (or #1082 #621)
#1084 := [th-lemma]: #1083
#1085 := [unit-resolution #1084 #1081]: #621
#603 := (>= #647 0::int)
#1125 := (or #1082 #603)
#1126 := [th-lemma]: #1125
#1127 := [unit-resolution #1126 #1081]: #603
#639 := (<= #58 0::int)
#1004 := (= #54 #293)
#1019 := (not #1004)
#753 := (f5 #54)
#1015 := (= #753 #298)
#1013 := (= #298 #753)
#1010 := (= #293 #54)
#1009 := [hypothesis]: #1004
#1011 := [symm #1009]: #1010
#1014 := [monotonicity #1011]: #1013
#1016 := [symm #1014]: #1015
#754 := (= f7 #753)
#729 := (or #728 #754)
#730 := [quant-inst]: #729
#1012 := [unit-resolution #730 #902]: #754
#1017 := [trans #1012 #1016]: #301
#304 := (not #301)
#59 := (* #58 3::int)
#60 := (f5 #59)
#61 := (f6 #60)
#65 := (+ #61 #64)
#66 := (f5 #65)
#67 := (= f7 #66)
#68 := (not #67)
#305 := (iff #68 #304)
#302 := (iff #67 #301)
#299 := (= #66 #298)
#296 := (= #65 #293)
#290 := (+ #287 #64)
#294 := (= #290 #293)
#295 := [rewrite]: #294
#291 := (= #65 #290)
#288 := (= #61 #287)
#285 := (= #60 #284)
#282 := (= #59 #281)
#283 := [rewrite]: #282
#286 := [monotonicity #283]: #285
#289 := [monotonicity #286]: #288
#292 := [monotonicity #289]: #291
#297 := [trans #292 #295]: #296
#300 := [monotonicity #297]: #299
#303 := [monotonicity #300]: #302
#306 := [monotonicity #303]: #305
#280 := [asserted]: #68
#309 := [mp #280 #306]: #304
#1018 := [unit-resolution #309 #1017]: false
#1020 := [lemma #1018]: #1019
#1005 := (* -1::int #293)
#1006 := (+ #54 #1005)
#1007 := (<= #1006 0::int)
#830 := (mod #54 3::int)
#722 := (* -1::int #830)
#815 := (+ #62 #722)
#771 := (>= #815 0::int)
#812 := (= #815 0::int)
#473 := -3::int
#552 := (* -1::int #54)
#832 := (mod #552 -3::int)
#807 := (+ #62 #832)
#809 := (= #807 0::int)
#538 := (<= #54 0::int)
#854 := (not #538)
#532 := (>= #54 0::int)
#857 := (not #532)
#578 := (or #857 #854)
#800 := (ite #578 #812 #809)
#878 := (= #54 0::int)
#715 := (not #878)
#876 := (= #56 0::int)
#714 := (not #876)
#1038 := (iff #977 #714)
#1036 := (iff #650 #876)
#1034 := (iff #876 #650)
#695 := (= #56 #58)
#680 := (>= #56 0::int)
#1029 := [hypothesis]: #977
#651 := (or #650 #680)
#655 := (or #686 #650 #680)
#498 := (or #686 #651)
#652 := (iff #498 #655)
#657 := [rewrite]: #652
#656 := [quant-inst]: #498
#636 := [mp #656 #657]: #655
#1030 := [unit-resolution #636 #915]: #651
#1031 := [unit-resolution #1030 #1029]: #680
#685 := (not #680)
#681 := (or #685 #695)
#659 := (or #731 #685 #695)
#696 := (or #695 #685)
#666 := (or #731 #696)
#675 := (iff #666 #659)
#669 := (or #731 #681)
#673 := (iff #669 #659)
#674 := [rewrite]: #673
#670 := (iff #666 #669)
#697 := (iff #696 #681)
#658 := [rewrite]: #697
#672 := [monotonicity #658]: #670
#676 := [trans #672 #674]: #675
#668 := [quant-inst]: #666
#677 := [mp #668 #676]: #659
#1032 := [unit-resolution #677 #909]: #681
#1033 := [unit-resolution #1032 #1031]: #695
#1035 := [monotonicity #1033]: #1034
#1037 := [symm #1035]: #1036
#1039 := [monotonicity #1037]: #1038
#1040 := [mp #1029 #1039]: #714
#1042 := (or #715 #876)
#573 := (div #552 -3::int)
#852 := (* -1::int #573)
#563 := (+ #56 #852)
#566 := (= #563 0::int)
#557 := (div #54 3::int)
#485 := (* -1::int #557)
#558 := (+ #56 #485)
#555 := (= #558 0::int)
#560 := (ite #578 #555 #566)
#843 := (ite #878 #876 #560)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#881 := (pattern #10)
#96 := (* -1::int #9)
#93 := (* -1::int #8)
#99 := (div #93 #96)
#383 := (* -1::int #99)
#384 := (+ #10 #383)
#385 := (= #384 0::int)
#21 := (div #8 #9)
#380 := (* -1::int #21)
#381 := (+ #10 #380)
#382 := (= #381 0::int)
#118 := (<= #9 0::int)
#114 := (<= #8 0::int)
#338 := (or #114 #118)
#339 := (not #338)
#125 := (>= #8 0::int)
#321 := (or #118 #125)
#322 := (not #321)
#345 := (or #322 #339)
#386 := (ite #345 #382 #385)
#379 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#387 := (ite #14 #379 #386)
#882 := (forall (vars (?v0 int) (?v1 int)) (:pat #881) #387)
#390 := (forall (vars (?v0 int) (?v1 int)) #387)
#885 := (iff #390 #882)
#883 := (iff #387 #387)
#884 := [refl]: #883
#886 := [quant-intro #884]: #885
#350 := (ite #345 #21 #99)
#353 := (ite #14 0::int #350)
#356 := (= #10 #353)
#359 := (forall (vars (?v0 int) (?v1 int)) #356)
#391 := (iff #359 #390)
#388 := (iff #356 #387)
#389 := [rewrite]: #388
#392 := [quant-intro #389]: #391
#126 := (not #125)
#119 := (not #118)
#129 := (and #119 #126)
#115 := (not #114)
#122 := (and #115 #119)
#132 := (or #122 #129)
#135 := (ite #132 #21 #99)
#138 := (ite #14 0::int #135)
#141 := (= #10 #138)
#144 := (forall (vars (?v0 int) (?v1 int)) #141)
#360 := (iff #144 #359)
#357 := (iff #141 #356)
#354 := (= #138 #353)
#351 := (= #135 #350)
#348 := (iff #132 #345)
#342 := (or #339 #322)
#346 := (iff #342 #345)
#347 := [rewrite]: #346
#343 := (iff #132 #342)
#340 := (iff #129 #322)
#341 := [rewrite]: #340
#319 := (iff #122 #339)
#320 := [rewrite]: #319
#344 := [monotonicity #320 #341]: #343
#349 := [trans #344 #347]: #348
#352 := [monotonicity #349]: #351
#355 := [monotonicity #352]: #354
#358 := [monotonicity #355]: #357
#361 := [quant-intro #358]: #360
#325 := (~ #144 #144)
#323 := (~ #141 #141)
#324 := [refl]: #323
#326 := [nnf-pos #324]: #325
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#147 := (iff #28 #144)
#86 := (and #16 #18)
#89 := (or #17 #86)
#102 := (ite #89 #21 #99)
#105 := (ite #14 0::int #102)
#108 := (= #10 #105)
#111 := (forall (vars (?v0 int) (?v1 int)) #108)
#145 := (iff #111 #144)
#142 := (iff #108 #141)
#139 := (= #105 #138)
#136 := (= #102 #135)
#133 := (iff #89 #132)
#130 := (iff #86 #129)
#127 := (iff #18 #126)
#128 := [rewrite]: #127
#120 := (iff #16 #119)
#121 := [rewrite]: #120
#131 := [monotonicity #121 #128]: #130
#123 := (iff #17 #122)
#116 := (iff #15 #115)
#117 := [rewrite]: #116
#124 := [monotonicity #117 #121]: #123
#134 := [monotonicity #124 #131]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [quant-intro #143]: #145
#112 := (iff #28 #111)
#109 := (iff #27 #108)
#106 := (= #26 #105)
#103 := (= #25 #102)
#100 := (= #24 #99)
#97 := (= #23 #96)
#98 := [rewrite]: #97
#94 := (= #22 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#90 := (iff #20 #89)
#87 := (iff #19 #86)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#104 := [monotonicity #91 #101]: #103
#107 := [monotonicity #104]: #106
#110 := [monotonicity #107]: #109
#113 := [quant-intro #110]: #112
#148 := [trans #113 #146]: #147
#85 := [asserted]: #28
#149 := [mp #85 #148]: #144
#310 := [mp~ #149 #326]: #144
#362 := [mp #310 #361]: #359
#393 := [mp #362 #392]: #390
#887 := [mp #393 #886]: #882
#837 := (not #882)
#838 := (or #837 #843)
#467 := (* -1::int 3::int)
#553 := (div #552 #467)
#554 := (* -1::int #553)
#545 := (+ #56 #554)
#556 := (= #545 0::int)
#559 := (<= 3::int 0::int)
#873 := (or #538 #559)
#875 := (not #873)
#662 := (or #559 #532)
#869 := (not #662)
#543 := (or #869 #875)
#544 := (ite #543 #555 #556)
#877 := (= 3::int 0::int)
#879 := (or #878 #877)
#874 := (ite #879 #876 #544)
#833 := (or #837 #874)
#839 := (iff #833 #838)
#835 := (iff #838 #838)
#841 := [rewrite]: #835
#847 := (iff #874 #843)
#842 := (iff #544 #560)
#844 := (iff #556 #566)
#564 := (= #545 #563)
#849 := (= #554 #852)
#574 := (= #553 #573)
#850 := (= #467 -3::int)
#851 := [rewrite]: #850
#848 := [monotonicity #851]: #574
#853 := [monotonicity #848]: #849
#565 := [monotonicity #853]: #564
#845 := [monotonicity #565]: #844
#579 := (iff #543 #578)
#855 := (iff #875 #854)
#865 := (iff #873 #538)
#864 := (or #538 false)
#507 := (iff #864 #538)
#867 := [rewrite]: #507
#866 := (iff #873 #864)
#519 := (iff #559 false)
#520 := [rewrite]: #519
#506 := [monotonicity #520]: #866
#868 := [trans #506 #867]: #865
#577 := [monotonicity #868]: #855
#863 := (iff #869 #857)
#861 := (iff #662 #532)
#521 := (or false #532)
#859 := (iff #521 #532)
#860 := [rewrite]: #859
#522 := (iff #662 #521)
#858 := [monotonicity #520]: #522
#862 := [trans #858 #860]: #861
#501 := [monotonicity #862]: #863
#580 := [monotonicity #501 #577]: #579
#846 := [monotonicity #580 #845]: #842
#515 := (iff #879 #878)
#530 := (or #878 false)
#531 := (iff #530 #878)
#872 := [rewrite]: #531
#535 := (iff #879 #530)
#880 := (iff #877 false)
#870 := [rewrite]: #880
#871 := [monotonicity #870]: #535
#856 := [trans #871 #872]: #515
#836 := [monotonicity #856 #846]: #847
#840 := [monotonicity #836]: #839
#682 := [trans #840 #841]: #839
#834 := [quant-inst]: #833
#683 := [mp #834 #682]: #838
#1041 := [unit-resolution #683 #887]: #843
#813 := (not #843)
#810 := (or #813 #715 #876)
#811 := [def-axiom]: #810
#1043 := [unit-resolution #811 #1041]: #1042
#1044 := [unit-resolution #1043 #1040]: #715
#1046 := (or #878 #800)
#803 := (= #62 0::int)
#802 := (ite #878 #803 #800)
#29 := (f4 #8 #9)
#888 := (pattern #29)
#151 := (mod #93 #96)
#399 := (+ #29 #151)
#400 := (= #399 0::int)
#30 := (mod #8 #9)
#396 := (* -1::int #30)
#397 := (+ #29 #396)
#398 := (= #397 0::int)
#401 := (ite #345 #398 #400)
#395 := (= #29 0::int)
#402 := (ite #12 #395 #401)
#394 := (= #8 #29)
#403 := (ite #13 #394 #402)
#889 := (forall (vars (?v0 int) (?v1 int)) (:pat #888) #403)
#406 := (forall (vars (?v0 int) (?v1 int)) #403)
#892 := (iff #406 #889)
#890 := (iff #403 #403)
#891 := [refl]: #890
#893 := [quant-intro #891]: #892
#157 := (* -1::int #151)
#363 := (ite #345 #30 #157)
#366 := (ite #12 0::int #363)
#369 := (ite #13 #8 #366)
#372 := (= #29 #369)
#375 := (forall (vars (?v0 int) (?v1 int)) #372)
#407 := (iff #375 #406)
#404 := (iff #372 #403)
#405 := [rewrite]: #404
#408 := [quant-intro #405]: #407
#177 := (ite #132 #30 #157)
#180 := (ite #12 0::int #177)
#183 := (ite #13 #8 #180)
#186 := (= #29 #183)
#189 := (forall (vars (?v0 int) (?v1 int)) #186)
#376 := (iff #189 #375)
#373 := (iff #186 #372)
#370 := (= #183 #369)
#367 := (= #180 #366)
#364 := (= #177 #363)
#365 := [monotonicity #349]: #364
#368 := [monotonicity #365]: #367
#371 := [monotonicity #368]: #370
#374 := [monotonicity #371]: #373
#377 := [quant-intro #374]: #376
#311 := (~ #189 #189)
#307 := (~ #186 #186)
#327 := [refl]: #307
#312 := [nnf-pos #327]: #311
#31 := (mod #22 #23)
#32 := (- #31)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#192 := (iff #37 #189)
#162 := (ite #89 #30 #157)
#165 := (ite #12 0::int #162)
#168 := (ite #13 #8 #165)
#171 := (= #29 #168)
#174 := (forall (vars (?v0 int) (?v1 int)) #171)
#190 := (iff #174 #189)
#187 := (iff #171 #186)
#184 := (= #168 #183)
#181 := (= #165 #180)
#178 := (= #162 #177)
#179 := [monotonicity #134]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185]: #187
#191 := [quant-intro #188]: #190
#175 := (iff #37 #174)
#172 := (iff #36 #171)
#169 := (= #35 #168)
#166 := (= #34 #165)
#163 := (= #33 #162)
#160 := (= #32 #157)
#154 := (- #151)
#158 := (= #154 #157)
#159 := [rewrite]: #158
#155 := (= #32 #154)
#152 := (= #31 #151)
#153 := [monotonicity #95 #98]: #152
#156 := [monotonicity #153]: #155
#161 := [trans #156 #159]: #160
#164 := [monotonicity #91 #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [quant-intro #173]: #175
#193 := [trans #176 #191]: #192
#150 := [asserted]: #37
#194 := [mp #150 #193]: #189
#328 := [mp~ #194 #312]: #189
#378 := [mp #328 #377]: #375
#409 := [mp #378 #408]: #406
#894 := [mp #409 #893]: #889
#780 := (not #889)
#782 := (or #780 #802)
#719 := (mod #552 #467)
#720 := (+ #62 #719)
#721 := (= #720 0::int)
#816 := (ite #543 #812 #721)
#805 := (ite #878 #803 #816)
#797 := (= #54 #62)
#794 := (ite #877 #797 #805)
#783 := (or #780 #794)
#781 := (iff #783 #782)
#765 := (iff #782 #782)
#766 := [rewrite]: #765
#793 := (iff #794 #802)
#789 := (ite false #797 #802)
#792 := (iff #789 #802)
#788 := [rewrite]: #792
#790 := (iff #794 #789)
#786 := (iff #805 #802)
#801 := (iff #816 #800)
#798 := (iff #721 #809)
#808 := (= #720 #807)
#796 := (= #719 #832)
#806 := [monotonicity #851]: #796
#804 := [monotonicity #806]: #808
#799 := [monotonicity #804]: #798
#795 := [monotonicity #580 #799]: #801
#787 := [monotonicity #795]: #786
#791 := [monotonicity #870 #787]: #790
#779 := [trans #791 #788]: #793
#785 := [monotonicity #779]: #781
#768 := [trans #785 #766]: #781
#784 := [quant-inst]: #783
#769 := [mp #784 #768]: #782
#1045 := [unit-resolution #769 #894]: #802
#762 := (not #802)
#764 := (or #762 #878 #800)
#750 := [def-axiom]: #764
#1047 := [unit-resolution #750 #1045]: #1046
#1048 := [unit-resolution #1047 #1044]: #800
#542 := (f6 #753)
#533 := (= #542 0::int)
#1057 := (not #533)
#1058 := (iff #715 #1057)
#1055 := (iff #878 #533)
#1053 := (iff #533 #878)
#1051 := (= #542 #54)
#1049 := (= #753 f7)
#1050 := [symm #1012]: #1049
#1052 := [monotonicity #1050]: #1051
#1054 := [monotonicity #1052]: #1053
#1056 := [symm #1054]: #1055
#1059 := [monotonicity #1056]: #1058
#1060 := [mp #1044 #1059]: #1057
#537 := (or #532 #533)
#523 := (or #686 #532 #533)
#536 := (or #533 #532)
#524 := (or #686 #536)
#510 := (iff #524 #523)
#526 := (or #686 #537)
#517 := (iff #526 #523)
#529 := [rewrite]: #517
#527 := (iff #524 #526)
#516 := (iff #536 #537)
#518 := [rewrite]: #516
#528 := [monotonicity #518]: #527
#512 := [trans #528 #529]: #510
#525 := [quant-inst]: #524
#513 := [mp #525 #512]: #523
#1061 := [unit-resolution #513 #915]: #537
#1062 := [unit-resolution #1061 #1060]: #532
#1065 := (or #854 #857)
#1063 := (or #878 #854 #857)
#1064 := [th-lemma]: #1063
#1066 := [unit-resolution #1064 #1044]: #1065
#1067 := [unit-resolution #1066 #1062]: #854
#827 := (or #578 #538)
#828 := [def-axiom]: #827
#1068 := [unit-resolution #828 #1067]: #578
#829 := (not #578)
#774 := (not #800)
#775 := (or #774 #829 #812)
#776 := [def-axiom]: #775
#1069 := [unit-resolution #776 #1068 #1048]: #812
#778 := (not #812)
#1070 := (or #778 #771)
#1071 := [th-lemma]: #1070
#1072 := [unit-resolution #1071 #1069]: #771
#469 := (* -3::int #557)
#472 := (+ #469 #722)
#916 := (+ #54 #472)
#947 := (<= #916 0::int)
#471 := (= #916 0::int)
#1 := true
#83 := [true-axiom]: true
#1073 := (or false #471)
#1074 := [th-lemma]: #1073
#1075 := [unit-resolution #1074 #83]: #471
#1076 := (not #471)
#1077 := (or #1076 #947)
#1078 := [th-lemma]: #1077
#1079 := [unit-resolution #1078 #1075]: #947
#660 := (* -1::int #58)
#678 := (+ #56 #660)
#648 := (<= #678 0::int)
#1086 := (not #695)
#1087 := (or #1086 #648)
#1088 := [th-lemma]: #1087
#1089 := [unit-resolution #1088 #1033]: #648
#825 := (>= #558 0::int)
#1090 := (or #878 #560)
#814 := (or #813 #878 #560)
#699 := [def-axiom]: #814
#1091 := [unit-resolution #699 #1041]: #1090
#1092 := [unit-resolution #1091 #1044]: #560
#664 := (not #560)
#817 := (or #664 #829 #555)
#818 := [def-axiom]: #817
#1093 := [unit-resolution #818 #1068 #1092]: #555
#819 := (not #555)
#1094 := (or #819 #825)
#1095 := [th-lemma]: #1094
#1096 := [unit-resolution #1095 #1093]: #825
#712 := (* -1::int #64)
#713 := (+ #62 #712)
#723 := (<= #713 0::int)
#745 := (= #62 #64)
#742 := (>= #62 0::int)
#921 := (>= #830 0::int)
#1097 := (or false #921)
#1098 := [th-lemma]: #1097
#1099 := [unit-resolution #1098 #83]: #921
#1101 := (not #771)
#1100 := (not #921)
#1102 := (or #742 #1100 #1101)
#1103 := [th-lemma]: #1102
#1104 := [unit-resolution #1103 #1099 #1072]: #742
#743 := (not #742)
#671 := (or #743 #745)
#732 := (or #731 #743 #745)
#725 := (or #745 #743)
#727 := (or #731 #725)
#702 := (iff #727 #732)
#701 := (or #731 #671)
#698 := (iff #701 #732)
#700 := [rewrite]: #698
#708 := (iff #727 #701)
#726 := (iff #725 #671)
#707 := [rewrite]: #726
#667 := [monotonicity #707]: #708
#709 := [trans #667 #700]: #702
#733 := [quant-inst]: #727
#711 := [mp #733 #709]: #732
#1105 := [unit-resolution #711 #909]: #671
#1106 := [unit-resolution #1105 #1104]: #745
#1107 := (not #745)
#1108 := (or #1107 #723)
#1109 := [th-lemma]: #1108
#1110 := [unit-resolution #1109 #1106]: #723
#1115 := (not #621)
#1114 := (not #723)
#1113 := (not #825)
#1112 := (not #648)
#1111 := (not #947)
#1116 := (or #1007 #1111 #1112 #1113 #1101 #1114 #1115)
#1117 := [th-lemma]: #1116
#1118 := [unit-resolution #1117 #1110 #1096 #1089 #1085 #1079 #1072]: #1007
#1008 := (>= #1006 0::int)
#770 := (<= #815 0::int)
#1119 := (or #778 #770)
#1120 := [th-lemma]: #1119
#1121 := [unit-resolution #1120 #1069]: #770
#948 := (>= #916 0::int)
#1122 := (or #1076 #948)
#1123 := [th-lemma]: #1122
#1124 := [unit-resolution #1123 #1075]: #948
#649 := (>= #678 0::int)
#1128 := (or #1086 #649)
#1129 := [th-lemma]: #1128
#1130 := [unit-resolution #1129 #1033]: #649
#831 := (<= #558 0::int)
#1131 := (or #819 #831)
#1132 := [th-lemma]: #1131
#1133 := [unit-resolution #1132 #1093]: #831
#703 := (>= #713 0::int)
#1134 := (or #1107 #703)
#1135 := [th-lemma]: #1134
#1136 := [unit-resolution #1135 #1106]: #703
#999 := (not #603)
#1141 := (not #703)
#1140 := (not #770)
#1139 := (not #831)
#1138 := (not #649)
#1137 := (not #948)
#1142 := (or #1008 #1137 #1138 #1139 #1140 #1141 #999)
#1143 := [th-lemma]: #1142
#1144 := [unit-resolution #1143 #1136 #1133 #1130 #1127 #1124 #1121]: #1008
#1146 := (not #1008)
#1145 := (not #1007)
#1147 := (or #1004 #1145 #1146)
#1148 := [th-lemma]: #1147
#1149 := [unit-resolution #1148 #1144 #1118 #1020]: false
#1150 := [lemma #1149]: #650
#1198 := (or #977 #639)
#1199 := [th-lemma]: #1198
#1200 := [unit-resolution #1199 #1150]: #639
#1202 := [th-lemma #1022 #1200 #1127 #1085]: #1201
#1204 := [symm #1202]: #1203
#1210 := [monotonicity #1204]: #1209
#1218 := [symm #1210]: #1217
#1223 := (= f7 #749)
#755 := (= #63 #749)
#735 := (or #728 #755)
#736 := [quant-inst]: #735
#1197 := [unit-resolution #736 #902]: #755
#1221 := (= f7 #63)
#1215 := (= #623 #63)
#1213 := (= #63 #623)
#1195 := (= #62 #58)
#1152 := (= 0::int #58)
#1153 := [symm #1150]: #1152
#1154 := [hypothesis]: #715
#1164 := [unit-resolution #1047 #1154]: #800
#1165 := [mp #1154 #1059]: #1057
#1166 := [unit-resolution #1061 #1165]: #532
#1167 := [unit-resolution #1064 #1154]: #1065
#1168 := [unit-resolution #1167 #1166]: #854
#1169 := [unit-resolution #828 #1168]: #578
#1170 := [unit-resolution #776 #1169 #1164]: #812
#1171 := [unit-resolution #1071 #1170]: #771
#1172 := [unit-resolution #1103 #1099 #1171]: #742
#1173 := [unit-resolution #1105 #1172]: #745
#1174 := [unit-resolution #1109 #1173]: #723
#1175 := [unit-resolution #1091 #1154]: #560
#1176 := [unit-resolution #818 #1169 #1175]: #555
#1177 := [unit-resolution #1095 #1176]: #825
#1162 := (or #680 #857 #1113)
#938 := (>= #830 3::int)
#939 := (not #938)
#1155 := (or false #939)
#1156 := [th-lemma]: #1155
#1157 := [unit-resolution #1156 #83]: #939
#1158 := [hypothesis]: #825
#1159 := [hypothesis]: #532
#1160 := [hypothesis]: #685
#1161 := [th-lemma #1160 #1159 #1079 #1158 #1157]: false
#1163 := [lemma #1161]: #1162
#1178 := [unit-resolution #1163 #1166 #1177]: #680
#1179 := [unit-resolution #1032 #1178]: #695
#1180 := [unit-resolution #1088 #1179]: #648
#1181 := (or #1007 #1111 #1112 #1113 #1101 #1114)
#1182 := [unit-resolution #1117 #1085]: #1181
#1183 := [unit-resolution #1182 #1180 #1177 #1174 #1079 #1171]: #1007
#1184 := [unit-resolution #1120 #1170]: #770
#1185 := [unit-resolution #1135 #1173]: #703
#1186 := [unit-resolution #1132 #1176]: #831
#1187 := [unit-resolution #1129 #1179]: #649
#1188 := (or #1008 #1137 #1138 #1139 #1140 #1141)
#1189 := [unit-resolution #1143 #1127]: #1188
#1190 := [unit-resolution #1189 #1187 #1186 #1185 #1124 #1184]: #1008
#1191 := (or #1145 #1146)
#1192 := [unit-resolution #1148 #1020]: #1191
#1193 := [unit-resolution #1192 #1190 #1183]: false
#1194 := [lemma #1193]: #878
#1028 := (or #715 #803)
#763 := (or #762 #715 #803)
#758 := [def-axiom]: #763
#1023 := [unit-resolution #758 #1045]: #1028
#1151 := [unit-resolution #1023 #1194]: #803
#1196 := [trans #1151 #1153]: #1195
#1214 := [monotonicity #1196]: #1213
#1216 := [symm #1214]: #1215
#1219 := (= f7 #623)
#1207 := (= #753 #623)
#1205 := (= #54 #58)
#1206 := [trans #1194 #1153]: #1205
#1208 := [monotonicity #1206]: #1207
#1220 := [trans #1012 #1208]: #1219
#1222 := [trans #1220 #1216]: #1221
#1224 := [trans #1222 #1197]: #1223
#1225 := [trans #1224 #1218]: #301
[unit-resolution #309 #1225]: false
unsat
914ab31d83892bfaa2a8848c9049be9e1ce2cb06 671 0
#2 := false
decl f6 :: (-> S2 int)
decl f5 :: (-> int S2)
decl f4 :: (-> int int int)
#55 := 3::int
decl f7 :: S2
#53 := f7
#54 := (f6 f7)
#56 := (f4 #54 3::int)
#57 := (f5 #56)
#805 := (f6 #57)
#806 := (= #56 #805)
#476 := (not #806)
#514 := (= #54 #56)
#692 := (not #514)
#473 := (iff #692 #476)
#483 := (iff #514 #806)
#490 := (iff #806 #514)
#679 := (= #56 #54)
#486 := (iff #679 #514)
#489 := [commutativity]: #486
#481 := (iff #806 #679)
#494 := (= #805 #54)
#58 := (= #57 f7)
#274 := (= f7 #57)
#286 := (>= #54 3::int)
#11 := 0::int
#870 := (= #56 0::int)
#549 := (iff #870 #514)
#547 := (iff #514 #870)
#702 := (= 0::int #56)
#545 := (iff #702 #870)
#546 := [commutativity]: #545
#541 := (iff #514 #702)
#530 := (= #54 0::int)
#285 := (not #286)
#632 := [hypothesis]: #285
#538 := (or #530 #286)
#708 := 1::int
#769 := (div #54 3::int)
#628 := -2::int
#618 := (* -2::int #769)
#661 := (mod #54 3::int)
#85 := -1::int
#868 := (* -1::int #661)
#619 := (+ #868 #618)
#617 := (+ #54 #619)
#620 := (>= #617 1::int)
#627 := (not #620)
#802 := (>= #56 0::int)
#729 := (>= #661 0::int)
#1 := true
#76 := [true-axiom]: true
#630 := (or false #729)
#616 := [th-lemma]: #630
#602 := [unit-resolution #616 #76]: #729
#542 := (+ #56 #868)
#817 := (>= #542 0::int)
#543 := (= #542 0::int)
#572 := -3::int
#537 := (* -1::int #54)
#851 := (mod #537 -3::int)
#562 := (+ #56 #851)
#565 := (= #562 0::int)
#876 := (<= #54 0::int)
#577 := (not #876)
#873 := (>= #54 0::int)
#863 := (not #873)
#472 := (or #863 #577)
#559 := (ite #472 #543 #565)
#713 := (not #530)
#604 := [hypothesis]: #713
#606 := (or #530 #559)
#842 := (ite #530 #870 #559)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#887 := (pattern #29)
#89 := (* -1::int #9)
#86 := (* -1::int #8)
#144 := (mod #86 #89)
#398 := (+ #29 #144)
#399 := (= #398 0::int)
#30 := (mod #8 #9)
#395 := (* -1::int #30)
#396 := (+ #29 #395)
#397 := (= #396 0::int)
#111 := (<= #9 0::int)
#107 := (<= #8 0::int)
#337 := (or #107 #111)
#338 := (not #337)
#118 := (>= #8 0::int)
#320 := (or #111 #118)
#321 := (not #320)
#344 := (or #321 #338)
#400 := (ite #344 #397 #399)
#394 := (= #29 0::int)
#12 := (= #8 0::int)
#401 := (ite #12 #394 #400)
#393 := (= #8 #29)
#13 := (= #9 0::int)
#402 := (ite #13 #393 #401)
#888 := (forall (vars (?v0 int) (?v1 int)) (:pat #887) #402)
#405 := (forall (vars (?v0 int) (?v1 int)) #402)
#891 := (iff #405 #888)
#889 := (iff #402 #402)
#890 := [refl]: #889
#892 := [quant-intro #890]: #891
#150 := (* -1::int #144)
#362 := (ite #344 #30 #150)
#365 := (ite #12 0::int #362)
#368 := (ite #13 #8 #365)
#371 := (= #29 #368)
#374 := (forall (vars (?v0 int) (?v1 int)) #371)
#406 := (iff #374 #405)
#403 := (iff #371 #402)
#404 := [rewrite]: #403
#407 := [quant-intro #404]: #406
#119 := (not #118)
#112 := (not #111)
#122 := (and #112 #119)
#108 := (not #107)
#115 := (and #108 #112)
#125 := (or #115 #122)
#170 := (ite #125 #30 #150)
#173 := (ite #12 0::int #170)
#176 := (ite #13 #8 #173)
#179 := (= #29 #176)
#182 := (forall (vars (?v0 int) (?v1 int)) #179)
#375 := (iff #182 #374)
#372 := (iff #179 #371)
#369 := (= #176 #368)
#366 := (= #173 #365)
#363 := (= #170 #362)
#347 := (iff #125 #344)
#341 := (or #338 #321)
#345 := (iff #341 #344)
#346 := [rewrite]: #345
#342 := (iff #125 #341)
#339 := (iff #122 #321)
#340 := [rewrite]: #339
#318 := (iff #115 #338)
#319 := [rewrite]: #318
#343 := [monotonicity #319 #340]: #342
#348 := [trans #343 #346]: #347
#364 := [monotonicity #348]: #363
#367 := [monotonicity #364]: #366
#370 := [monotonicity #367]: #369
#373 := [monotonicity #370]: #372
#376 := [quant-intro #373]: #375
#310 := (~ #182 #182)
#307 := (~ #179 #179)
#326 := [refl]: #307
#311 := [nnf-pos #326]: #310
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#185 := (iff #37 #182)
#79 := (and #16 #18)
#82 := (or #17 #79)
#155 := (ite #82 #30 #150)
#158 := (ite #12 0::int #155)
#161 := (ite #13 #8 #158)
#164 := (= #29 #161)
#167 := (forall (vars (?v0 int) (?v1 int)) #164)
#183 := (iff #167 #182)
#180 := (iff #164 #179)
#177 := (= #161 #176)
#174 := (= #158 #173)
#171 := (= #155 #170)
#126 := (iff #82 #125)
#123 := (iff #79 #122)
#120 := (iff #18 #119)
#121 := [rewrite]: #120
#113 := (iff #16 #112)
#114 := [rewrite]: #113
#124 := [monotonicity #114 #121]: #123
#116 := (iff #17 #115)
#109 := (iff #15 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#127 := [monotonicity #117 #124]: #126
#172 := [monotonicity #127]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [quant-intro #181]: #183
#168 := (iff #37 #167)
#165 := (iff #36 #164)
#162 := (= #35 #161)
#159 := (= #34 #158)
#156 := (= #33 #155)
#153 := (= #32 #150)
#147 := (- #144)
#151 := (= #147 #150)
#152 := [rewrite]: #151
#148 := (= #32 #147)
#145 := (= #31 #144)
#90 := (= #23 #89)
#91 := [rewrite]: #90
#87 := (= #22 #86)
#88 := [rewrite]: #87
#146 := [monotonicity #88 #91]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#83 := (iff #20 #82)
#80 := (iff #19 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#157 := [monotonicity #84 #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#186 := [trans #169 #184]: #185
#143 := [asserted]: #37
#187 := [mp #143 #186]: #182
#327 := [mp~ #187 #311]: #182
#377 := [mp #327 #376]: #374
#408 := [mp #377 #407]: #405
#893 := [mp #408 #892]: #888
#840 := (not #888)
#681 := (or #840 #842)
#558 := (* -1::int 3::int)
#872 := (mod #537 #558)
#874 := (+ #56 #872)
#531 := (= #874 0::int)
#875 := (<= 3::int 0::int)
#877 := (or #876 #875)
#878 := (not #877)
#879 := (or #875 #873)
#869 := (not #879)
#529 := (or #869 #878)
#534 := (ite #529 #543 #531)
#871 := (ite #530 #870 #534)
#855 := (= 3::int 0::int)
#518 := (ite #855 #514 #871)
#682 := (or #840 #518)
#825 := (iff #682 #681)
#827 := (iff #681 #681)
#828 := [rewrite]: #827
#839 := (iff #518 #842)
#836 := (ite false #514 #842)
#833 := (iff #836 #842)
#838 := [rewrite]: #833
#837 := (iff #518 #836)
#846 := (iff #871 #842)
#841 := (iff #534 #559)
#843 := (iff #531 #565)
#563 := (= #874 #562)
#848 := (= #872 #851)
#573 := (= #558 -3::int)
#847 := [rewrite]: #573
#852 := [monotonicity #847]: #848
#564 := [monotonicity #852]: #563
#844 := [monotonicity #564]: #843
#849 := (iff #529 #472)
#578 := (iff #878 #577)
#854 := (iff #877 #876)
#506 := (or #876 false)
#867 := (iff #506 #876)
#853 := [rewrite]: #867
#866 := (iff #877 #506)
#521 := (iff #875 false)
#857 := [rewrite]: #521
#864 := [monotonicity #857]: #866
#576 := [trans #864 #853]: #854
#579 := [monotonicity #576]: #578
#865 := (iff #869 #863)
#862 := (iff #879 #873)
#858 := (or false #873)
#861 := (iff #858 #873)
#856 := [rewrite]: #861
#859 := (iff #879 #858)
#860 := [monotonicity #857]: #859
#500 := [trans #860 #856]: #862
#505 := [monotonicity #500]: #865
#850 := [monotonicity #505 #579]: #849
#845 := [monotonicity #850 #844]: #841
#835 := [monotonicity #845]: #846
#519 := (iff #855 false)
#520 := [rewrite]: #519
#832 := [monotonicity #520 #835]: #837
#834 := [trans #832 #838]: #839
#826 := [monotonicity #834]: #825
#822 := [trans #826 #828]: #825
#683 := [quant-inst]: #682
#823 := [mp #683 #822]: #681
#605 := [unit-resolution #823 #893]: #842
#698 := (not #842)
#709 := (or #698 #530 #559)
#717 := [def-axiom]: #709
#607 := [unit-resolution #717 #605]: #606
#608 := [unit-resolution #607 #604]: #559
#811 := (f5 #54)
#779 := (f6 #811)
#781 := (= #779 0::int)
#592 := (not #781)
#594 := (iff #713 #592)
#603 := (iff #530 #781)
#613 := (iff #781 #530)
#611 := (= #779 #54)
#609 := (= #811 f7)
#815 := (= f7 #811)
#38 := (:var 0 S2)
#39 := (f6 #38)
#894 := (pattern #39)
#40 := (f5 #39)
#189 := (= #38 #40)
#895 := (forall (vars (?v0 S2)) (:pat #894) #189)
#192 := (forall (vars (?v0 S2)) #189)
#896 := (iff #192 #895)
#898 := (iff #895 #895)
#899 := [rewrite]: #898
#897 := [rewrite]: #896
#900 := [trans #897 #899]: #896
#312 := (~ #192 #192)
#328 := (~ #189 #189)
#329 := [refl]: #328
#313 := [nnf-pos #329]: #312
#41 := (= #40 #38)
#42 := (forall (vars (?v0 S2)) #41)
#193 := (iff #42 #192)
#190 := (iff #41 #189)
#191 := [rewrite]: #190
#194 := [quant-intro #191]: #193
#188 := [asserted]: #42
#197 := [mp #188 #194]: #192
#330 := [mp~ #197 #313]: #192
#901 := [mp #330 #900]: #895
#796 := (not #895)
#793 := (or #796 #815)
#795 := [quant-inst]: #793
#685 := [unit-resolution #795 #901]: #815
#610 := [symm #685]: #609
#612 := [monotonicity #610]: #611
#614 := [monotonicity #612]: #613
#615 := [symm #614]: #603
#595 := [monotonicity #615]: #594
#596 := [mp #604 #595]: #592
#768 := (or #781 #873)
#44 := (f5 #9)
#902 := (pattern #44)
#212 := (>= #9 0::int)
#45 := (f6 #44)
#50 := (= #45 0::int)
#262 := (or #50 #212)
#909 := (forall (vars (?v0 int)) (:pat #902) #262)
#267 := (forall (vars (?v0 int)) #262)
#912 := (iff #267 #909)
#910 := (iff #262 #262)
#911 := [refl]: #910
#913 := [quant-intro #911]: #912
#316 := (~ #267 #267)
#334 := (~ #262 #262)
#335 := [refl]: #334
#317 := [nnf-pos #335]: #316
#49 := (< #9 0::int)
#51 := (implies #49 #50)
#52 := (forall (vars (?v0 int)) #51)
#270 := (iff #52 #267)
#233 := (= 0::int #45)
#239 := (not #49)
#240 := (or #239 #233)
#245 := (forall (vars (?v0 int)) #240)
#268 := (iff #245 #267)
#265 := (iff #240 #262)
#259 := (or #212 #50)
#263 := (iff #259 #262)
#264 := [rewrite]: #263
#260 := (iff #240 #259)
#257 := (iff #233 #50)
#258 := [rewrite]: #257
#255 := (iff #239 #212)
#215 := (not #212)
#250 := (not #215)
#253 := (iff #250 #212)
#254 := [rewrite]: #253
#251 := (iff #239 #250)
#248 := (iff #49 #215)
#249 := [rewrite]: #248
#252 := [monotonicity #249]: #251
#256 := [trans #252 #254]: #255
#261 := [monotonicity #256 #258]: #260
#266 := [trans #261 #264]: #265
#269 := [quant-intro #266]: #268
#246 := (iff #52 #245)
#243 := (iff #51 #240)
#236 := (implies #49 #233)
#241 := (iff #236 #240)
#242 := [rewrite]: #241
#237 := (iff #51 #236)
#234 := (iff #50 #233)
#235 := [rewrite]: #234
#238 := [monotonicity #235]: #237
#244 := [trans #238 #242]: #243
#247 := [quant-intro #244]: #246
#271 := [trans #247 #269]: #270
#232 := [asserted]: #52
#272 := [mp #232 #271]: #267
#336 := [mp~ #272 #317]: #267
#914 := [mp #336 #913]: #909
#782 := (not #909)
#771 := (or #782 #781 #873)
#772 := (or #782 #768)
#774 := (iff #772 #771)
#775 := [rewrite]: #774
#773 := [quant-inst]: #772
#776 := [mp #773 #775]: #771
#597 := [unit-resolution #776 #914]: #768
#598 := [unit-resolution #597 #596]: #873
#599 := (or #530 #577 #863)
#600 := [th-lemma]: #599
#593 := [unit-resolution #600 #598 #604]: #577
#824 := (or #472 #876)
#831 := [def-axiom]: #824
#601 := [unit-resolution #831 #593]: #472
#660 := (not #472)
#818 := (not #559)
#821 := (or #818 #660 #543)
#703 := [def-axiom]: #821
#586 := [unit-resolution #703 #601 #608]: #543
#664 := (not #543)
#587 := (or #664 #817)
#588 := [th-lemma]: #587
#590 := [unit-resolution #588 #586]: #817
#591 := (not #729)
#589 := (not #817)
#580 := (or #802 #589 #591)
#581 := [th-lemma]: #580
#582 := [unit-resolution #581 #590 #602]: #802
#816 := (<= #542 0::int)
#574 := (or #664 #816)
#583 := [th-lemma]: #574
#584 := [unit-resolution #583 #586]: #816
#804 := (not #802)
#649 := (not #816)
#626 := (or #627 #286 #649 #804)
#625 := [hypothesis]: #802
#747 := (* -3::int #769)
#750 := (+ #868 #747)
#751 := (+ #54 #750)
#727 := (<= #751 0::int)
#746 := (= #751 0::int)
#657 := (or false #746)
#695 := [th-lemma]: #657
#680 := [unit-resolution #695 #76]: #746
#658 := (not #746)
#665 := (or #658 #727)
#667 := [th-lemma]: #665
#668 := [unit-resolution #667 #680]: #727
#677 := [hypothesis]: #816
#633 := [hypothesis]: #620
#624 := [th-lemma #632 #633 #677 #668 #625]: false
#629 := [lemma #624]: #626
#575 := [unit-resolution #629 #584 #632 #582]: #627
#666 := (>= #751 0::int)
#640 := (or #658 #666)
#636 := [th-lemma]: #640
#641 := [unit-resolution #636 #680]: #666
#711 := (* -1::int #56)
#712 := (+ #54 #711)
#722 := (<= #712 0::int)
#560 := (not #722)
#555 := (not #274)
#557 := (or #555 #286)
#299 := (iff #274 #286)
#59 := (< #54 3::int)
#60 := (not #59)
#61 := (iff #58 #60)
#304 := (iff #61 #299)
#280 := (iff #60 #274)
#302 := (iff #280 #299)
#296 := (iff #286 #274)
#300 := (iff #296 #299)
#301 := [rewrite]: #300
#297 := (iff #280 #296)
#294 := (iff #60 #286)
#289 := (not #285)
#292 := (iff #289 #286)
#293 := [rewrite]: #292
#290 := (iff #60 #289)
#287 := (iff #59 #285)
#288 := [rewrite]: #287
#291 := [monotonicity #288]: #290
#295 := [trans #291 #293]: #294
#298 := [monotonicity #295]: #297
#303 := [trans #298 #301]: #302
#283 := (iff #61 #280)
#277 := (iff #274 #60)
#281 := (iff #277 #280)
#282 := [rewrite]: #281
#278 := (iff #61 #277)
#275 := (iff #58 #274)
#276 := [rewrite]: #275
#279 := [monotonicity #276]: #278
#284 := [trans #279 #282]: #283
#305 := [trans #284 #303]: #304
#273 := [asserted]: #61
#306 := [mp #273 #305]: #299
#466 := (not #299)
#556 := (or #555 #286 #466)
#484 := [def-axiom]: #556
#554 := [unit-resolution #484 #306]: #557
#585 := [unit-resolution #554 #632]: #555
#693 := (or #692 #274)
#688 := (= #811 #57)
#686 := (= #57 #811)
#678 := [hypothesis]: #514
#684 := [symm #678]: #679
#687 := [monotonicity #684]: #686
#689 := [symm #687]: #688
#690 := [trans #685 #689]: #274
#723 := [hypothesis]: #555
#691 := [unit-resolution #723 #690]: false
#694 := [lemma #691]: #693
#566 := [unit-resolution #694 #585]: #692
#707 := (>= #712 0::int)
#669 := (* -1::int #769)
#671 := (+ #868 #669)
#637 := (+ #54 #671)
#639 := (>= #637 0::int)
#621 := (or #639 #876)
#645 := (not #639)
#634 := [hypothesis]: #645
#706 := (>= #661 3::int)
#730 := (not #706)
#675 := (or false #730)
#676 := [th-lemma]: #675
#659 := [unit-resolution #676 #76]: #730
#696 := [hypothesis]: #577
#631 := [th-lemma #696 #659 #641 #634]: false
#623 := [lemma #631]: #621
#567 := [unit-resolution #623 #593]: #639
#643 := (or #645 #649 #707)
#642 := (not #707)
#644 := [hypothesis]: #642
#635 := [hypothesis]: #639
#638 := [th-lemma #677 #635 #668 #644]: false
#646 := [lemma #638]: #643
#568 := [unit-resolution #646 #567 #584]: #707
#569 := (or #514 #560 #642)
#570 := [th-lemma]: #569
#561 := [unit-resolution #570 #568 #566]: #560
#571 := [th-lemma #590 #561 #641 #575]: false
#540 := [lemma #571]: #538
#697 := [unit-resolution #540 #632]: #530
#532 := [monotonicity #697]: #541
#548 := [trans #532 #546]: #547
#539 := [symm #548]: #549
#699 := (or #713 #870)
#715 := (or #698 #713 #870)
#716 := [def-axiom]: #715
#701 := [unit-resolution #716 #605]: #699
#728 := [unit-resolution #701 #697]: #870
#550 := [mp #728 #539]: #514
#533 := [unit-resolution #566 #550]: false
#535 := [lemma #533]: #286
#553 := (or #274 #285)
#551 := (or #274 #285 #466)
#552 := [def-axiom]: #551
#544 := [unit-resolution #552 #306]: #553
#496 := [unit-resolution #544 #535]: #274
#498 := [symm #496]: #58
#499 := [monotonicity #498]: #494
#485 := [monotonicity #499]: #481
#491 := [trans #485 #489]: #490
#492 := [symm #491]: #483
#474 := [monotonicity #492]: #473
#524 := (or #577 #285)
#525 := [th-lemma]: #524
#526 := [unit-resolution #525 #535]: #577
#527 := (or #713 #876)
#516 := [th-lemma]: #527
#528 := [unit-resolution #516 #526]: #713
#509 := [unit-resolution #607 #528]: #559
#511 := [unit-resolution #831 #526]: #472
#512 := [unit-resolution #703 #511 #509]: #543
#502 := [unit-resolution #583 #512]: #816
#508 := (or #560 #285 #706 #649)
#482 := [th-lemma]: #508
#487 := [unit-resolution #482 #502 #535 #659]: #560
#488 := (or #692 #722)
#493 := [th-lemma]: #488
#495 := [unit-resolution #493 #487]: #692
#477 := [mp #495 #474]: #476
#510 := [unit-resolution #588 #512]: #817
#513 := (or #802 #591 #589)
#501 := [th-lemma]: #513
#503 := [unit-resolution #501 #510 #602]: #802
#803 := (or #804 #806)
#196 := (= #9 #45)
#221 := (or #196 #215)
#903 := (forall (vars (?v0 int)) (:pat #902) #221)
#226 := (forall (vars (?v0 int)) #221)
#906 := (iff #226 #903)
#904 := (iff #221 #221)
#905 := [refl]: #904
#907 := [quant-intro #905]: #906
#314 := (~ #226 #226)
#331 := (~ #221 #221)
#332 := [refl]: #331
#315 := [nnf-pos #332]: #314
#46 := (= #45 #9)
#43 := (<= 0::int #9)
#47 := (implies #43 #46)
#48 := (forall (vars (?v0 int)) #47)
#229 := (iff #48 #226)
#203 := (not #43)
#204 := (or #203 #196)
#209 := (forall (vars (?v0 int)) #204)
#227 := (iff #209 #226)
#224 := (iff #204 #221)
#218 := (or #215 #196)
#222 := (iff #218 #221)
#223 := [rewrite]: #222
#219 := (iff #204 #218)
#216 := (iff #203 #215)
#213 := (iff #43 #212)
#214 := [rewrite]: #213
#217 := [monotonicity #214]: #216
#220 := [monotonicity #217]: #219
#225 := [trans #220 #223]: #224
#228 := [quant-intro #225]: #227
#210 := (iff #48 #209)
#207 := (iff #47 #204)
#200 := (implies #43 #196)
#205 := (iff #200 #204)
#206 := [rewrite]: #205
#201 := (iff #47 #200)
#198 := (iff #46 #196)
#199 := [rewrite]: #198
#202 := [monotonicity #199]: #201
#208 := [trans #202 #206]: #207
#211 := [quant-intro #208]: #210
#230 := [trans #211 #228]: #229
#195 := [asserted]: #48
#231 := [mp #195 #230]: #226
#333 := [mp~ #231 #315]: #226
#908 := [mp #333 #907]: #903
#798 := (not #903)
#799 := (or #798 #804 #806)
#807 := (or #806 #804)
#800 := (or #798 #807)
#790 := (iff #800 #799)
#801 := (or #798 #803)
#788 := (iff #801 #799)
#789 := [rewrite]: #788
#785 := (iff #800 #801)
#808 := (iff #807 #803)
#797 := [rewrite]: #808
#786 := [monotonicity #797]: #785
#791 := [trans #786 #789]: #790
#794 := [quant-inst]: #800
#787 := [mp #794 #791]: #799
#504 := [unit-resolution #787 #908]: #803
#507 := [unit-resolution #504 #503]: #806
[unit-resolution #507 #477]: false
unsat
85ac6a29deaf91400dbfbdf638baba5914d49e18 60 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#137 := -1::int
#138 := (* -1::int #28)
#139 := (+ #26 #138)
#140 := (<= #139 0::int)
#143 := (ite #140 #26 #28)
#151 := (* -1::int #143)
#637 := (+ #28 #151)
#266 := (>= #637 0::int)
#317 := (= #28 #143)
#232 := (not #140)
#231 := (= #26 #143)
#624 := (not #231)
#152 := (+ #26 #151)
#150 := (>= #152 0::int)
#156 := (not #150)
#29 := (<= #26 #28)
#30 := (ite #29 #26 #28)
#31 := (<= #30 #26)
#32 := (not #31)
#157 := (iff #32 #156)
#154 := (iff #31 #150)
#146 := (<= #143 #26)
#149 := (iff #146 #150)
#153 := [rewrite]: #149
#147 := (iff #31 #146)
#144 := (= #30 #143)
#141 := (iff #29 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#155 := [trans #148 #153]: #154
#158 := [monotonicity #155]: #157
#134 := [asserted]: #32
#159 := [mp #134 #158]: #156
#280 := [hypothesis]: #231
#625 := (or #624 #150)
#626 := [th-lemma]: #625
#627 := [unit-resolution #626 #280 #159]: false
#622 := [lemma #627]: #624
#318 := (or #232 #231)
#319 := [def-axiom]: #318
#629 := [unit-resolution #319 #622]: #232
#310 := (or #140 #317)
#321 := [def-axiom]: #310
#631 := [unit-resolution #321 #629]: #317
#271 := (not #317)
#272 := (or #271 #266)
#632 := [th-lemma]: #272
#630 := [unit-resolution #632 #631]: #266
[th-lemma #159 #629 #630]: false
unsat
d84df414dbdb37289879fadf547b4a4bc9c68951 60 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#137 := -1::int
#138 := (* -1::int #28)
#139 := (+ #26 #138)
#140 := (<= #139 0::int)
#143 := (ite #140 #28 #26)
#149 := (* -1::int #143)
#150 := (+ #26 #149)
#151 := (<= #150 0::int)
#156 := (not #151)
#29 := (<= #26 #28)
#30 := (ite #29 #28 #26)
#31 := (<= #26 #30)
#32 := (not #31)
#157 := (iff #32 #156)
#154 := (iff #31 #151)
#146 := (<= #26 #143)
#152 := (iff #146 #151)
#153 := [rewrite]: #152
#147 := (iff #31 #146)
#144 := (= #30 #143)
#141 := (iff #29 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#155 := [trans #148 #153]: #154
#158 := [monotonicity #155]: #157
#134 := [asserted]: #32
#159 := [mp #134 #158]: #156
#317 := (= #26 #143)
#232 := (not #140)
#625 := [hypothesis]: #140
#637 := (+ #28 #149)
#280 := (<= #637 0::int)
#231 := (= #28 #143)
#318 := (or #232 #231)
#319 := [def-axiom]: #318
#626 := [unit-resolution #319 #625]: #231
#627 := (not #231)
#622 := (or #627 #280)
#628 := [th-lemma]: #622
#266 := [unit-resolution #628 #626]: #280
#629 := [th-lemma #266 #159 #625]: false
#631 := [lemma #629]: #232
#310 := (or #140 #317)
#321 := [def-axiom]: #310
#271 := [unit-resolution #321 #631]: #317
#272 := (not #317)
#632 := (or #272 #151)
#630 := [th-lemma]: #632
[unit-resolution #630 #271 #159]: false
unsat
ec431e8216f1d8b2f670cdb0885c1e07fa83e950 60 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#137 := -1::int
#138 := (* -1::int #28)
#139 := (+ #26 #138)
#140 := (<= #139 0::int)
#143 := (ite #140 #26 #28)
#150 := (* -1::int #143)
#151 := (+ #28 #150)
#149 := (>= #151 0::int)
#156 := (not #149)
#29 := (<= #26 #28)
#30 := (ite #29 #26 #28)
#31 := (<= #30 #28)
#32 := (not #31)
#157 := (iff #32 #156)
#154 := (iff #31 #149)
#146 := (<= #143 #28)
#152 := (iff #146 #149)
#153 := [rewrite]: #152
#147 := (iff #31 #146)
#144 := (= #30 #143)
#141 := (iff #29 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#155 := [trans #148 #153]: #154
#158 := [monotonicity #155]: #157
#134 := [asserted]: #32
#159 := [mp #134 #158]: #156
#317 := (= #28 #143)
#232 := (not #140)
#625 := [hypothesis]: #140
#637 := (+ #26 #150)
#624 := (>= #637 0::int)
#231 := (= #26 #143)
#318 := (or #232 #231)
#319 := [def-axiom]: #318
#626 := [unit-resolution #319 #625]: #231
#627 := (not #231)
#622 := (or #627 #624)
#628 := [th-lemma]: #622
#266 := [unit-resolution #628 #626]: #624
#629 := [th-lemma #266 #159 #625]: false
#631 := [lemma #629]: #232
#310 := (or #140 #317)
#321 := [def-axiom]: #310
#271 := [unit-resolution #321 #631]: #317
#272 := (not #317)
#632 := (or #272 #149)
#630 := [th-lemma]: #632
[unit-resolution #630 #271 #159]: false
unsat
2abc216904909a8ab09db7d8ddd5116874c405b2 60 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#137 := -1::int
#140 := (* -1::int #28)
#141 := (+ #26 #140)
#139 := (>= #141 0::int)
#143 := (ite #139 #26 #28)
#149 := (* -1::int #143)
#637 := (+ #28 #149)
#628 := (<= #637 0::int)
#317 := (= #28 #143)
#232 := (not #139)
#231 := (= #26 #143)
#624 := (not #231)
#150 := (+ #26 #149)
#151 := (<= #150 0::int)
#156 := (not #151)
#29 := (<= #28 #26)
#30 := (ite #29 #26 #28)
#31 := (<= #26 #30)
#32 := (not #31)
#157 := (iff #32 #156)
#154 := (iff #31 #151)
#146 := (<= #26 #143)
#152 := (iff #146 #151)
#153 := [rewrite]: #152
#147 := (iff #31 #146)
#144 := (= #30 #143)
#138 := (iff #29 #139)
#142 := [rewrite]: #138
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#155 := [trans #148 #153]: #154
#158 := [monotonicity #155]: #157
#134 := [asserted]: #32
#159 := [mp #134 #158]: #156
#280 := [hypothesis]: #231
#625 := (or #624 #151)
#626 := [th-lemma]: #625
#627 := [unit-resolution #626 #280 #159]: false
#622 := [lemma #627]: #624
#318 := (or #232 #231)
#319 := [def-axiom]: #318
#629 := [unit-resolution #319 #622]: #232
#310 := (or #139 #317)
#321 := [def-axiom]: #310
#631 := [unit-resolution #321 #629]: #317
#271 := (not #317)
#272 := (or #271 #628)
#632 := [th-lemma]: #272
#630 := [unit-resolution #632 #631]: #628
[th-lemma #159 #629 #630]: false
unsat
db10b3baed96f5ad894a70d823fdba86b4614481 253 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#138 := -1::int
#139 := (* -1::int #28)
#140 := (+ #26 #139)
#141 := (<= #140 0::int)
#144 := (ite #141 #26 #28)
#153 := (* -1::int #144)
#639 := (+ #26 #153)
#626 := (>= #639 0::int)
#274 := (not #626)
#643 := (>= #28 0::int)
#333 := (= #28 0::int)
decl f3 :: (-> int S2)
#325 := (f3 #28)
#644 := (f4 #325)
#638 := (= #644 0::int)
#340 := (not #643)
#580 := [hypothesis]: #340
#298 := (or #638 #643)
#14 := (:var 0 int)
#16 := (f3 #14)
#656 := (pattern #16)
#76 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#124 := (or #22 #76)
#663 := (forall (vars (?v0 int)) (:pat #656) #124)
#129 := (forall (vars (?v0 int)) #124)
#666 := (iff #129 #663)
#664 := (iff #124 #124)
#665 := [refl]: #664
#667 := [quant-intro #665]: #666
#165 := (~ #129 #129)
#177 := (~ #124 #124)
#178 := [refl]: #177
#166 := [nnf-pos #178]: #165
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#132 := (iff #24 #129)
#95 := (= 0::int #17)
#101 := (not #21)
#102 := (or #101 #95)
#107 := (forall (vars (?v0 int)) #102)
#130 := (iff #107 #129)
#127 := (iff #102 #124)
#121 := (or #76 #22)
#125 := (iff #121 #124)
#126 := [rewrite]: #125
#122 := (iff #102 #121)
#119 := (iff #95 #22)
#120 := [rewrite]: #119
#117 := (iff #101 #76)
#77 := (not #76)
#112 := (not #77)
#115 := (iff #112 #76)
#116 := [rewrite]: #115
#113 := (iff #101 #112)
#110 := (iff #21 #77)
#111 := [rewrite]: #110
#114 := [monotonicity #111]: #113
#118 := [trans #114 #116]: #117
#123 := [monotonicity #118 #120]: #122
#128 := [trans #123 #126]: #127
#131 := [quant-intro #128]: #130
#108 := (iff #24 #107)
#105 := (iff #23 #102)
#98 := (implies #21 #95)
#103 := (iff #98 #102)
#104 := [rewrite]: #103
#99 := (iff #23 #98)
#96 := (iff #22 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#106 := [trans #100 #104]: #105
#109 := [quant-intro #106]: #108
#133 := [trans #109 #131]: #132
#94 := [asserted]: #24
#134 := [mp #94 #133]: #129
#179 := [mp~ #134 #166]: #129
#668 := [mp #179 #667]: #663
#645 := (not #663)
#623 := (or #645 #638 #643)
#286 := (or #645 #298)
#288 := (iff #286 #623)
#289 := [rewrite]: #288
#287 := [quant-inst]: #286
#625 := [mp #287 #289]: #623
#616 := [unit-resolution #625 #668]: #298
#482 := [unit-resolution #616 #580]: #638
#331 := (= #28 #644)
#322 := (= f6 #325)
#8 := (:var 0 S2)
#9 := (f4 #8)
#648 := (pattern #9)
#10 := (f3 #9)
#51 := (= #8 #10)
#649 := (forall (vars (?v0 S2)) (:pat #648) #51)
#54 := (forall (vars (?v0 S2)) #51)
#650 := (iff #54 #649)
#652 := (iff #649 #649)
#653 := [rewrite]: #652
#651 := [rewrite]: #650
#654 := [trans #651 #653]: #650
#173 := (~ #54 #54)
#171 := (~ #51 #51)
#172 := [refl]: #171
#174 := [nnf-pos #172]: #173
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#55 := (iff #12 #54)
#52 := (iff #11 #51)
#53 := [rewrite]: #52
#56 := [quant-intro #53]: #55
#50 := [asserted]: #12
#59 := [mp #50 #56]: #54
#162 := [mp~ #59 #174]: #54
#655 := [mp #162 #654]: #649
#326 := (not #649)
#429 := (or #326 #322)
#636 := [quant-inst]: #429
#330 := [unit-resolution #636 #655]: #322
#332 := [monotonicity #330]: #331
#577 := [trans #332 #482]: #333
#578 := (not #333)
#581 := (or #578 #643)
#466 := [th-lemma]: #581
#481 := [unit-resolution #466 #580 #577]: false
#483 := [lemma #481]: #643
#485 := (or #340 #274)
#154 := (+ #28 #153)
#155 := (+ #26 #154)
#151 := (>= #155 0::int)
#158 := (not #151)
#31 := (+ #26 #28)
#29 := (<= #26 #28)
#30 := (ite #29 #26 #28)
#32 := (<= #30 #31)
#33 := (not #32)
#159 := (iff #33 #158)
#156 := (iff #32 #151)
#147 := (<= #144 #31)
#150 := (iff #147 #151)
#152 := [rewrite]: #150
#148 := (iff #32 #147)
#145 := (= #30 #144)
#142 := (iff #29 #141)
#143 := [rewrite]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#157 := [trans #149 #152]: #156
#160 := [monotonicity #157]: #159
#135 := [asserted]: #33
#161 := [mp #135 #160]: #158
#341 := (or #340 #274 #151)
#615 := [th-lemma]: #341
#486 := [unit-resolution #615 #161]: #485
#487 := [unit-resolution #486 #483]: #274
#233 := (= #26 #144)
#324 := (f3 #26)
#299 := (f4 #324)
#310 := (= #299 0::int)
#586 := (iff #310 #233)
#587 := (iff #233 #310)
#584 := (= #144 0::int)
#607 := (>= #154 0::int)
#319 := (= #28 #144)
#604 := (iff #310 #319)
#614 := (iff #319 #310)
#612 := (= 0::int #299)
#613 := (iff #612 #310)
#610 := [commutativity]: #613
#327 := (iff #319 #612)
#617 := (= #144 #299)
#347 := (= #26 #299)
#252 := (= f5 #324)
#305 := (or #326 #252)
#640 := [quant-inst]: #305
#344 := [unit-resolution #640 #655]: #252
#240 := [monotonicity #344]: #347
#345 := (= #144 #26)
#627 := (not #319)
#628 := [hypothesis]: #627
#312 := (or #141 #319)
#323 := [def-axiom]: #312
#629 := [unit-resolution #323 #628]: #141
#234 := (not #141)
#320 := (or #234 #233)
#321 := [def-axiom]: #320
#624 := [unit-resolution #321 #629]: #233
#346 := [symm #624]: #345
#618 := [trans #346 #240]: #617
#630 := (not #233)
#268 := (or #630 #626)
#631 := [th-lemma]: #268
#633 := [unit-resolution #631 #624]: #626
#619 := [unit-resolution #615 #633 #161]: #340
#620 := [unit-resolution #616 #619]: #638
#611 := [trans #332 #620]: #333
#609 := [monotonicity #611 #618]: #327
#603 := [trans #609 #610]: #614
#605 := [symm #603]: #604
#642 := (>= #26 0::int)
#273 := (not #642)
#634 := (or #273 #234 #274 #151)
#632 := [th-lemma]: #634
#635 := [unit-resolution #632 #629 #161 #633]: #273
#311 := (or #310 #642)
#646 := (or #645 #310 #642)
#641 := (or #645 #311)
#637 := (iff #641 #646)
#297 := [rewrite]: #637
#647 := [quant-inst]: #641
#302 := [mp #647 #297]: #646
#621 := [unit-resolution #302 #668]: #311
#622 := [unit-resolution #621 #635]: #310
#600 := [mp #622 #605]: #319
#601 := [unit-resolution #628 #600]: false
#606 := [lemma #601]: #319
#608 := (or #627 #607)
#449 := [th-lemma]: #608
#450 := [unit-resolution #449 #606]: #607
#602 := [hypothesis]: #630
#590 := [unit-resolution #321 #602]: #234
#451 := (not #607)
#591 := (or #340 #451 #141 #151)
#597 := [th-lemma]: #591
#598 := [unit-resolution #597 #590 #161 #450]: #340
#592 := [unit-resolution #616 #598]: #638
#430 := (= #144 #644)
#599 := (= #144 #28)
#428 := [symm #606]: #599
#431 := [trans #428 #332]: #430
#585 := [trans #431 #592]: #584
#588 := [monotonicity #240 #585]: #587
#589 := [symm #588]: #586
#593 := (or #273 #451 #151)
#594 := [th-lemma]: #593
#595 := [unit-resolution #594 #450 #161]: #273
#596 := [unit-resolution #621 #595]: #310
#471 := [mp #596 #589]: #233
#472 := [unit-resolution #602 #471]: false
#473 := [lemma #472]: #233
[unit-resolution #631 #473 #487]: false
unsat
14969492cac173e86b554790b2b1280f30825e8b 437 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#142 := -1::int
#143 := (* -1::int #28)
#144 := (+ #26 #143)
#172 := (<= #144 0::int)
#175 := (ite #172 #28 #26)
#181 := (* -1::int #175)
#565 := (+ #26 #181)
#496 := (<= #565 0::int)
#354 := (= #26 #175)
#269 := (not #172)
#566 := [hypothesis]: #172
decl f3 :: (-> int S2)
#147 := (f3 #144)
#150 := (f4 #147)
#375 := (<= #150 0::int)
#504 := (not #375)
#153 := (* -1::int #26)
#154 := (+ #153 #28)
#157 := (f3 #154)
#160 := (f4 #157)
#182 := (+ #160 #181)
#183 := (+ #150 #182)
#184 := (<= #183 0::int)
#189 := (not #184)
#36 := (<= #26 #28)
#37 := (ite #36 #28 #26)
#32 := (- #28 #26)
#33 := (f3 #32)
#34 := (f4 #33)
#29 := (- #26 #28)
#30 := (f3 #29)
#31 := (f4 #30)
#35 := (+ #31 #34)
#38 := (<= #35 #37)
#39 := (not #38)
#192 := (iff #39 #189)
#163 := (+ #150 #160)
#166 := (<= #163 #37)
#169 := (not #166)
#190 := (iff #169 #189)
#187 := (iff #166 #184)
#178 := (<= #163 #175)
#185 := (iff #178 #184)
#186 := [rewrite]: #185
#179 := (iff #166 #178)
#176 := (= #37 #175)
#173 := (iff #36 #172)
#174 := [rewrite]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#188 := [trans #180 #186]: #187
#191 := [monotonicity #188]: #190
#170 := (iff #39 #169)
#167 := (iff #38 #166)
#164 := (= #35 #163)
#161 := (= #34 #160)
#158 := (= #33 #157)
#155 := (= #32 #154)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#151 := (= #31 #150)
#148 := (= #30 #147)
#145 := (= #29 #144)
#146 := [rewrite]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#165 := [monotonicity #152 #162]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#193 := [trans #171 #191]: #192
#141 := [asserted]: #39
#194 := [mp #141 #193]: #189
#366 := (+ #143 #160)
#367 := (+ #26 #366)
#631 := (<= #367 0::int)
#655 := (= #367 0::int)
#649 := (or #269 #655)
#14 := (:var 0 int)
#16 := (f3 #14)
#691 := (pattern #16)
#82 := (>= #14 0::int)
#83 := (not #82)
#17 := (f4 #16)
#64 := (= #14 #17)
#89 := (or #64 #83)
#692 := (forall (vars (?v0 int)) (:pat #691) #89)
#94 := (forall (vars (?v0 int)) #89)
#695 := (iff #94 #692)
#693 := (iff #89 #89)
#694 := [refl]: #693
#696 := [quant-intro #694]: #695
#198 := (~ #94 #94)
#195 := (~ #89 #89)
#210 := [refl]: #195
#199 := [nnf-pos #210]: #198
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#97 := (iff #20 #94)
#71 := (not #15)
#72 := (or #71 #64)
#77 := (forall (vars (?v0 int)) #72)
#95 := (iff #77 #94)
#92 := (iff #72 #89)
#86 := (or #83 #64)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #72 #86)
#84 := (iff #71 #83)
#80 := (iff #15 #82)
#81 := [rewrite]: #80
#85 := [monotonicity #81]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#96 := [quant-intro #93]: #95
#78 := (iff #20 #77)
#75 := (iff #19 #72)
#68 := (implies #15 #64)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #19 #68)
#66 := (iff #18 #64)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [trans #70 #74]: #75
#79 := [quant-intro #76]: #78
#98 := [trans #79 #96]: #97
#63 := [asserted]: #20
#99 := [mp #63 #98]: #94
#211 := [mp~ #99 #199]: #94
#697 := [mp #211 #696]: #692
#324 := (not #692)
#636 := (or #324 #269 #655)
#656 := (>= #154 0::int)
#657 := (not #656)
#650 := (= #154 #160)
#654 := (or #650 #657)
#641 := (or #324 #654)
#628 := (iff #641 #636)
#637 := (or #324 #649)
#485 := (iff #637 #636)
#486 := [rewrite]: #485
#643 := (iff #641 #637)
#640 := (iff #654 #649)
#644 := (or #655 #269)
#638 := (iff #644 #649)
#639 := [rewrite]: #638
#648 := (iff #654 #644)
#647 := (iff #657 #269)
#368 := (iff #656 #172)
#646 := [rewrite]: #368
#362 := [monotonicity #646]: #647
#651 := (iff #650 #655)
#365 := [rewrite]: #651
#645 := [monotonicity #365 #362]: #648
#635 := [trans #645 #639]: #640
#484 := [monotonicity #635]: #643
#629 := [trans #484 #486]: #628
#642 := [quant-inst]: #641
#630 := [mp #642 #629]: #636
#425 := [unit-resolution #630 #697]: #649
#537 := [unit-resolution #425 #566]: #655
#509 := (not #655)
#533 := (or #509 #631)
#534 := [th-lemma]: #533
#529 := [unit-resolution #534 #537]: #631
#501 := (>= #26 0::int)
#560 := (= #26 0::int)
#359 := (f3 #26)
#516 := (f4 #359)
#518 := (= #516 0::int)
#552 := (not #501)
#548 := [hypothesis]: #552
#512 := (or #501 #518)
#22 := (= #17 0::int)
#130 := (or #22 #82)
#698 := (forall (vars (?v0 int)) (:pat #691) #130)
#135 := (forall (vars (?v0 int)) #130)
#701 := (iff #135 #698)
#699 := (iff #130 #130)
#700 := [refl]: #699
#702 := [quant-intro #700]: #701
#200 := (~ #135 #135)
#212 := (~ #130 #130)
#213 := [refl]: #212
#201 := [nnf-pos #213]: #200
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#138 := (iff #24 #135)
#101 := (= 0::int #17)
#107 := (not #21)
#108 := (or #107 #101)
#113 := (forall (vars (?v0 int)) #108)
#136 := (iff #113 #135)
#133 := (iff #108 #130)
#127 := (or #82 #22)
#131 := (iff #127 #130)
#132 := [rewrite]: #131
#128 := (iff #108 #127)
#125 := (iff #101 #22)
#126 := [rewrite]: #125
#123 := (iff #107 #82)
#118 := (not #83)
#121 := (iff #118 #82)
#122 := [rewrite]: #121
#119 := (iff #107 #118)
#116 := (iff #21 #83)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#124 := [trans #120 #122]: #123
#129 := [monotonicity #124 #126]: #128
#134 := [trans #129 #132]: #133
#137 := [quant-intro #134]: #136
#114 := (iff #24 #113)
#111 := (iff #23 #108)
#104 := (implies #21 #101)
#109 := (iff #104 #108)
#110 := [rewrite]: #109
#105 := (iff #23 #104)
#102 := (iff #22 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#112 := [trans #106 #110]: #111
#115 := [quant-intro #112]: #114
#139 := [trans #115 #137]: #138
#100 := [asserted]: #24
#140 := [mp #100 #139]: #135
#214 := [mp~ #140 #201]: #135
#703 := [mp #214 #702]: #698
#379 := (not #698)
#522 := (or #379 #501 #518)
#519 := (or #518 #501)
#523 := (or #379 #519)
#599 := (iff #523 #522)
#617 := (or #379 #512)
#605 := (iff #617 #522)
#607 := [rewrite]: #605
#614 := (iff #523 #617)
#520 := (iff #519 #512)
#521 := [rewrite]: #520
#618 := [monotonicity #521]: #614
#596 := [trans #618 #607]: #599
#524 := [quant-inst]: #523
#598 := [mp #524 #596]: #522
#549 := [unit-resolution #598 #703]: #512
#550 := [unit-resolution #549 #548]: #518
#554 := (= #26 #516)
#287 := (= f5 #359)
#8 := (:var 0 S2)
#9 := (f4 #8)
#683 := (pattern #9)
#10 := (f3 #9)
#57 := (= #8 #10)
#684 := (forall (vars (?v0 S2)) (:pat #683) #57)
#60 := (forall (vars (?v0 S2)) #57)
#685 := (iff #60 #684)
#687 := (iff #684 #684)
#688 := [rewrite]: #687
#686 := [rewrite]: #685
#689 := [trans #686 #688]: #685
#208 := (~ #60 #60)
#206 := (~ #57 #57)
#207 := [refl]: #206
#209 := [nnf-pos #207]: #208
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#61 := (iff #12 #60)
#58 := (iff #11 #57)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#56 := [asserted]: #12
#65 := [mp #56 #62]: #60
#197 := [mp~ #65 #209]: #60
#690 := [mp #197 #689]: #684
#361 := (not #684)
#340 := (or #361 #287)
#675 := [quant-inst]: #340
#553 := [unit-resolution #675 #690]: #287
#555 := [monotonicity #553]: #554
#556 := [trans #555 #550]: #560
#551 := (not #560)
#557 := (or #551 #501)
#530 := [th-lemma]: #557
#531 := [unit-resolution #530 #548 #556]: false
#532 := [lemma #531]: #501
#569 := (+ #28 #181)
#580 := (<= #569 0::int)
#268 := (= #28 #175)
#355 := (or #269 #268)
#356 := [def-axiom]: #355
#535 := [unit-resolution #356 #566]: #268
#503 := (not #268)
#510 := (or #503 #580)
#469 := [th-lemma]: #510
#500 := [unit-resolution #469 #535]: #580
#511 := (not #631)
#502 := (not #580)
#513 := (or #552 #502 #504 #184 #511)
#514 := [th-lemma]: #513
#515 := [unit-resolution #514 #500 #532 #529 #194]: #504
#337 := (* -1::int #150)
#673 := (+ #143 #337)
#333 := (+ #26 #673)
#669 := (>= #333 0::int)
#674 := (= #333 0::int)
#680 := (>= #144 0::int)
#667 := (= #150 0::int)
#525 := (not #667)
#505 := (or #525 #375)
#526 := [th-lemma]: #505
#481 := [unit-resolution #526 #515]: #525
#670 := (or #667 #680)
#380 := (or #379 #667 #680)
#381 := (or #379 #670)
#275 := (iff #381 #380)
#652 := [rewrite]: #275
#382 := [quant-inst]: #381
#653 := [mp #382 #652]: #380
#482 := [unit-resolution #653 #703]: #670
#487 := [unit-resolution #482 #481]: #680
#681 := (not #680)
#321 := (or #674 #681)
#660 := (or #324 #674 #681)
#672 := (= #144 #150)
#332 := (or #672 #681)
#661 := (or #324 #332)
#666 := (iff #661 #660)
#663 := (or #324 #321)
#665 := (iff #663 #660)
#303 := [rewrite]: #665
#664 := (iff #661 #663)
#322 := (iff #332 #321)
#317 := (iff #672 #674)
#658 := [rewrite]: #317
#323 := [monotonicity #658]: #322
#659 := [monotonicity #323]: #664
#668 := [trans #659 #303]: #666
#662 := [quant-inst]: #661
#308 := [mp #662 #668]: #660
#488 := [unit-resolution #308 #697]: #321
#489 := [unit-resolution #488 #487]: #674
#490 := (not #674)
#491 := (or #490 #669)
#492 := [th-lemma]: #491
#493 := [unit-resolution #492 #489]: #669
#494 := [th-lemma #493 #515 #566]: false
#495 := [lemma #494]: #269
#347 := (or #172 #354)
#358 := [def-axiom]: #347
#498 := [unit-resolution #358 #495]: #354
#483 := (not #354)
#499 := (or #483 #496)
#460 := [th-lemma]: #499
#461 := [unit-resolution #460 #498]: #496
#613 := (<= #160 0::int)
#626 := (= #160 0::int)
#463 := (or #172 #626)
#622 := (or #379 #172 #626)
#632 := (or #626 #656)
#623 := (or #379 #632)
#615 := (iff #623 #622)
#624 := (or #379 #463)
#508 := (iff #624 #622)
#467 := [rewrite]: #508
#506 := (iff #623 #624)
#619 := (iff #632 #463)
#633 := (or #626 #172)
#465 := (iff #633 #463)
#466 := [rewrite]: #465
#627 := (iff #632 #633)
#634 := [monotonicity #646]: #627
#620 := [trans #634 #466]: #619
#507 := [monotonicity #620]: #506
#517 := [trans #507 #467]: #615
#621 := [quant-inst]: #623
#612 := [mp #621 #517]: #622
#468 := [unit-resolution #612 #703]: #463
#470 := [unit-resolution #468 #495]: #626
#471 := (not #626)
#472 := (or #471 #613)
#474 := [th-lemma]: #472
#475 := [unit-resolution #474 #470]: #613
#608 := (>= #28 0::int)
#536 := (= #28 0::int)
#360 := (f3 #28)
#609 := (f4 #360)
#610 := (= #609 0::int)
#538 := (not #608)
#543 := [hypothesis]: #538
#611 := (or #608 #610)
#602 := (or #379 #608 #610)
#606 := (or #610 #608)
#603 := (or #379 #606)
#593 := (iff #603 #602)
#604 := (or #379 #611)
#591 := (iff #604 #602)
#592 := [rewrite]: #591
#588 := (iff #603 #604)
#600 := (iff #606 #611)
#601 := [rewrite]: #600
#589 := [monotonicity #601]: #588
#594 := [trans #589 #592]: #593
#597 := [quant-inst]: #603
#590 := [mp #597 #594]: #602
#539 := [unit-resolution #590 #703]: #611
#540 := [unit-resolution #539 #543]: #610
#544 := (= #28 #609)
#357 := (= f6 #360)
#464 := (or #361 #357)
#671 := [quant-inst]: #464
#541 := [unit-resolution #671 #690]: #357
#545 := [monotonicity #541]: #544
#546 := [trans #545 #540]: #536
#542 := (not #536)
#547 := (or #542 #608)
#527 := [th-lemma]: #547
#473 := [unit-resolution #527 #543 #546]: false
#528 := [lemma #473]: #608
#476 := (or #680 #172)
#477 := [th-lemma]: #476
#478 := [unit-resolution #477 #495]: #680
#479 := [unit-resolution #488 #478]: #674
#462 := [unit-resolution #492 #479]: #669
[th-lemma #462 #528 #194 #475 #461]: false
unsat
89bc3a6333da51700f7daac14eb84da9abc113a1 103 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#143 := -1::int
#146 := (* -1::int #31)
#150 := (+ #28 #146)
#151 := (<= #150 0::int)
#154 := (ite #151 #28 #31)
#162 := (* -1::int #154)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#163 := (+ #26 #162)
#161 := (>= #163 0::int)
#177 := (* -1::int #28)
#178 := (+ #26 #177)
#176 := (>= #178 0::int)
#175 := (not #176)
#147 := (+ #26 #146)
#145 := (>= #147 0::int)
#144 := (not #145)
#187 := (and #144 #161 #175)
#33 := (<= #28 #31)
#34 := (ite #33 #28 #31)
#35 := (< #26 #34)
#36 := (not #35)
#32 := (< #26 #31)
#37 := (and #32 #36)
#29 := (< #26 #28)
#38 := (and #29 #37)
#190 := (iff #38 #187)
#181 := (and #144 #161)
#184 := (and #175 #181)
#188 := (iff #184 #187)
#189 := [rewrite]: #188
#185 := (iff #38 #184)
#182 := (iff #37 #181)
#173 := (iff #36 #161)
#160 := (not #161)
#168 := (not #160)
#171 := (iff #168 #161)
#172 := [rewrite]: #171
#169 := (iff #36 #168)
#166 := (iff #35 #160)
#157 := (< #26 #154)
#164 := (iff #157 #160)
#165 := [rewrite]: #164
#158 := (iff #35 #157)
#155 := (= #34 #154)
#152 := (iff #33 #151)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#167 := [trans #159 #165]: #166
#170 := [monotonicity #167]: #169
#174 := [trans #170 #172]: #173
#148 := (iff #32 #144)
#149 := [rewrite]: #148
#183 := [monotonicity #149 #174]: #182
#179 := (iff #29 #175)
#180 := [rewrite]: #179
#186 := [monotonicity #180 #183]: #185
#191 := [trans #186 #189]: #190
#140 := [asserted]: #38
#192 := [mp #140 #191]: #187
#194 := [and-elim #192]: #161
#193 := [and-elim #192]: #144
#365 := (+ #31 #162)
#638 := (<= #365 0::int)
#353 := (= #31 #154)
#268 := (not #151)
#267 := (= #28 #154)
#643 := (not #267)
#652 := (+ #28 #162)
#374 := (<= #652 0::int)
#645 := (not #374)
#195 := [and-elim #192]: #175
#366 := [hypothesis]: #374
#367 := [th-lemma #366 #195 #194]: false
#646 := [lemma #367]: #645
#361 := [hypothesis]: #267
#647 := (or #643 #374)
#644 := [th-lemma]: #647
#648 := [unit-resolution #644 #361 #646]: false
#637 := [lemma #648]: #643
#354 := (or #268 #267)
#355 := [def-axiom]: #354
#634 := [unit-resolution #355 #637]: #268
#346 := (or #151 #353)
#357 := [def-axiom]: #346
#635 := [unit-resolution #357 #634]: #353
#640 := (not #353)
#641 := (or #640 #638)
#636 := [th-lemma]: #641
#642 := [unit-resolution #636 #635]: #638
[th-lemma #642 #193 #194]: false
unsat
c39739842d64e1dca61912be5a777a90f01e28fd 117 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#13 := 0::int
#141 := -1::int
#142 := (* -1::int #28)
#143 := (+ #26 #142)
#154 := (>= #143 0::int)
#156 := (ite #154 #28 #26)
#159 := (f3 #156)
#144 := (<= #143 0::int)
#147 := (ite #144 #26 #28)
#150 := (f3 #147)
#162 := (= #150 #159)
#649 := (f3 #26)
#558 := (= #649 #159)
#556 := (= #159 #649)
#564 := (= #156 #26)
#259 := (= #26 #156)
#436 := (f3 #28)
#577 := (= #436 #159)
#586 := (= #159 #436)
#479 := (= #156 #28)
#331 := (= #28 #156)
#489 := (not #259)
#584 := [hypothesis]: #489
#312 := (or #154 #259)
#647 := [def-axiom]: #312
#588 := [unit-resolution #647 #584]: #154
#332 := (not #154)
#329 := (or #332 #331)
#333 := [def-axiom]: #329
#490 := [unit-resolution #333 #588]: #331
#480 := [symm #490]: #479
#590 := [monotonicity #480]: #586
#579 := [symm #590]: #577
#491 := (= #150 #436)
#492 := (= #147 #28)
#326 := (= #28 #147)
#241 := (not #144)
#496 := (or #241 #259)
#473 := (= #26 #28)
#585 := [hypothesis]: #144
#488 := [th-lemma #588 #585]: #473
#494 := [trans #488 #490]: #259
#495 := [unit-resolution #584 #494]: false
#589 := [lemma #495]: #496
#439 := [unit-resolution #589 #584]: #241
#319 := (or #144 #326)
#330 := [def-axiom]: #319
#587 := [unit-resolution #330 #439]: #326
#493 := [symm #587]: #492
#484 := [monotonicity #493]: #491
#571 := [trans #484 #579]: #162
#165 := (not #162)
#32 := (<= #28 #26)
#33 := (ite #32 #28 #26)
#34 := (f3 #33)
#29 := (<= #26 #28)
#30 := (ite #29 #26 #28)
#31 := (f3 #30)
#35 := (= #31 #34)
#36 := (not #35)
#166 := (iff #36 #165)
#163 := (iff #35 #162)
#160 := (= #34 #159)
#157 := (= #33 #156)
#153 := (iff #32 #154)
#155 := [rewrite]: #153
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#151 := (= #31 #150)
#148 := (= #30 #147)
#145 := (iff #29 #144)
#146 := [rewrite]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#164 := [monotonicity #152 #161]: #163
#167 := [monotonicity #164]: #166
#138 := [asserted]: #36
#168 := [mp #138 #167]: #165
#568 := [unit-resolution #168 #571]: false
#570 := [lemma #568]: #259
#565 := [symm #570]: #564
#557 := [monotonicity #565]: #556
#555 := [symm #557]: #558
#553 := (= #150 #649)
#562 := (= #147 #26)
#240 := (= #26 #147)
#435 := [hypothesis]: #241
#437 := (or #154 #144)
#596 := [th-lemma]: #437
#478 := [unit-resolution #596 #435]: #154
#580 := [unit-resolution #333 #478]: #331
#581 := [symm #580]: #479
#572 := [monotonicity #581]: #586
#573 := [symm #572]: #577
#582 := [unit-resolution #330 #435]: #326
#578 := [symm #582]: #492
#583 := [monotonicity #578]: #491
#574 := [trans #583 #573]: #162
#575 := [unit-resolution #168 #574]: false
#569 := [lemma #575]: #144
#327 := (or #241 #240)
#328 := [def-axiom]: #327
#566 := [unit-resolution #328 #569]: #240
#567 := [symm #566]: #562
#554 := [monotonicity #567]: #553
#559 := [trans #554 #555]: #162
[unit-resolution #168 #559]: false
unsat
452992a55139d640bc8969517cd3166d0f13bb37 103 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#143 := -1::int
#144 := (* -1::int #31)
#150 := (+ #26 #144)
#151 := (<= #150 0::int)
#154 := (ite #151 #31 #26)
#160 := (* -1::int #154)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#161 := (+ #28 #160)
#162 := (<= #161 0::int)
#177 := (* -1::int #28)
#178 := (+ #26 #177)
#176 := (>= #178 0::int)
#175 := (not #176)
#145 := (+ #28 #144)
#146 := (<= #145 0::int)
#147 := (not #146)
#187 := (and #147 #162 #175)
#33 := (<= #26 #31)
#34 := (ite #33 #31 #26)
#35 := (< #34 #28)
#36 := (not #35)
#32 := (< #31 #28)
#37 := (and #32 #36)
#29 := (< #26 #28)
#38 := (and #29 #37)
#190 := (iff #38 #187)
#181 := (and #147 #162)
#184 := (and #175 #181)
#188 := (iff #184 #187)
#189 := [rewrite]: #188
#185 := (iff #38 #184)
#182 := (iff #37 #181)
#173 := (iff #36 #162)
#163 := (not #162)
#168 := (not #163)
#171 := (iff #168 #162)
#172 := [rewrite]: #171
#169 := (iff #36 #168)
#166 := (iff #35 #163)
#157 := (< #154 #28)
#164 := (iff #157 #163)
#165 := [rewrite]: #164
#158 := (iff #35 #157)
#155 := (= #34 #154)
#152 := (iff #33 #151)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#167 := [trans #159 #165]: #166
#170 := [monotonicity #167]: #169
#174 := [trans #170 #172]: #173
#148 := (iff #32 #147)
#149 := [rewrite]: #148
#183 := [monotonicity #149 #174]: #182
#179 := (iff #29 #175)
#180 := [rewrite]: #179
#186 := [monotonicity #180 #183]: #185
#191 := [trans #186 #189]: #190
#140 := [asserted]: #38
#192 := [mp #140 #191]: #187
#194 := [and-elim #192]: #162
#195 := [and-elim #192]: #175
#374 := (+ #26 #160)
#639 := (>= #374 0::int)
#353 := (= #26 #154)
#268 := (not #151)
#267 := (= #31 #154)
#643 := (not #267)
#652 := (+ #31 #160)
#365 := (>= #652 0::int)
#645 := (not #365)
#193 := [and-elim #192]: #147
#366 := [hypothesis]: #365
#367 := [th-lemma #366 #193 #194]: false
#646 := [lemma #367]: #645
#361 := [hypothesis]: #267
#647 := (or #643 #365)
#644 := [th-lemma]: #647
#648 := [unit-resolution #644 #361 #646]: false
#637 := [lemma #648]: #643
#354 := (or #268 #267)
#355 := [def-axiom]: #354
#634 := [unit-resolution #355 #637]: #268
#346 := (or #151 #353)
#357 := [def-axiom]: #346
#635 := [unit-resolution #357 #634]: #353
#640 := (not #353)
#641 := (or #640 #639)
#636 := [th-lemma]: #641
#642 := [unit-resolution #636 #635]: #639
[th-lemma #642 #195 #194]: false
unsat
c3edc6cce39c9c380e8b07a4426540e2db018197 156 0
#2 := false
decl f3 :: (-> int S2)
#13 := 0::int
#30 := (f3 0::int)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := (<= #26 0::int)
#28 := (ite #27 #26 0::int)
#29 := (f3 #28)
#31 := (= #29 #30)
#294 := (= #28 0::int)
#299 := (f3 #26)
#576 := (f4 #299)
#577 := (= #576 0::int)
#442 := (= #26 0::int)
#567 := (not #294)
#573 := [hypothesis]: #567
#287 := (or #27 #294)
#298 := [def-axiom]: #287
#404 := [unit-resolution #298 #573]: #27
#581 := (>= #26 0::int)
#408 := (not #577)
#556 := (iff #567 #408)
#448 := (iff #294 #577)
#565 := (= #28 #576)
#564 := (= #26 #576)
#561 := (= #576 #26)
#568 := (= #299 f5)
#227 := (= f5 #299)
#8 := (:var 0 S2)
#9 := (f4 #8)
#624 := (pattern #9)
#10 := (f3 #9)
#50 := (= #8 #10)
#625 := (forall (vars (?v0 S2)) (:pat #624) #50)
#53 := (forall (vars (?v0 S2)) #50)
#626 := (iff #53 #625)
#628 := (iff #625 #625)
#629 := [rewrite]: #628
#627 := [rewrite]: #626
#630 := [trans #627 #629]: #626
#148 := (~ #53 #53)
#146 := (~ #50 #50)
#147 := [refl]: #146
#149 := [nnf-pos #147]: #148
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#54 := (iff #12 #53)
#51 := (iff #11 #50)
#52 := [rewrite]: #51
#55 := [quant-intro #52]: #54
#49 := [asserted]: #12
#58 := [mp #49 #55]: #53
#137 := [mp~ #58 #149]: #53
#631 := [mp #137 #630]: #625
#301 := (not #625)
#280 := (or #301 #227)
#616 := [quant-inst]: #280
#574 := [unit-resolution #616 #631]: #227
#575 := [symm #574]: #568
#563 := [monotonicity #575]: #561
#562 := [symm #563]: #564
#407 := (= #28 #26)
#208 := (= #26 #28)
#209 := (not #27)
#295 := (or #209 #208)
#296 := [def-axiom]: #295
#406 := [unit-resolution #296 #404]: #208
#560 := [symm #406]: #407
#447 := [trans #560 #562]: #565
#449 := [monotonicity #447]: #448
#458 := [monotonicity #449]: #556
#553 := [mp #573 #458]: #408
#582 := (or #577 #581)
#14 := (:var 0 int)
#16 := (f3 #14)
#632 := (pattern #16)
#75 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#123 := (or #22 #75)
#639 := (forall (vars (?v0 int)) (:pat #632) #123)
#128 := (forall (vars (?v0 int)) #123)
#642 := (iff #128 #639)
#640 := (iff #123 #123)
#641 := [refl]: #640
#643 := [quant-intro #641]: #642
#140 := (~ #128 #128)
#152 := (~ #123 #123)
#153 := [refl]: #152
#141 := [nnf-pos #153]: #140
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#131 := (iff #24 #128)
#94 := (= 0::int #17)
#100 := (not #21)
#101 := (or #100 #94)
#106 := (forall (vars (?v0 int)) #101)
#129 := (iff #106 #128)
#126 := (iff #101 #123)
#120 := (or #75 #22)
#124 := (iff #120 #123)
#125 := [rewrite]: #124
#121 := (iff #101 #120)
#118 := (iff #94 #22)
#119 := [rewrite]: #118
#116 := (iff #100 #75)
#76 := (not #75)
#111 := (not #76)
#114 := (iff #111 #75)
#115 := [rewrite]: #114
#112 := (iff #100 #111)
#109 := (iff #21 #76)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#117 := [trans #113 #115]: #116
#122 := [monotonicity #117 #119]: #121
#127 := [trans #122 #125]: #126
#130 := [quant-intro #127]: #129
#107 := (iff #24 #106)
#104 := (iff #23 #101)
#97 := (implies #21 #94)
#102 := (iff #97 #101)
#103 := [rewrite]: #102
#98 := (iff #23 #97)
#95 := (iff #22 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#105 := [trans #99 #103]: #104
#108 := [quant-intro #105]: #107
#132 := [trans #108 #130]: #131
#93 := [asserted]: #24
#133 := [mp #93 #132]: #128
#154 := [mp~ #133 #141]: #128
#644 := [mp #154 #643]: #639
#614 := (not #639)
#584 := (or #614 #577 #581)
#425 := (or #614 #582)
#427 := (iff #425 #584)
#569 := [rewrite]: #427
#426 := [quant-inst]: #425
#570 := [mp #426 #569]: #584
#554 := [unit-resolution #570 #644]: #582
#557 := [unit-resolution #554 #553]: #581
#457 := [th-lemma #557 #404]: #442
#459 := [trans #563 #457]: #577
#460 := [unit-resolution #553 #459]: false
#453 := [lemma #460]: #294
#583 := [monotonicity #453]: #31
#32 := (not #31)
#134 := [asserted]: #32
[unit-resolution #134 #583]: false
unsat
c2cc039657273f4c31549e108b87c8f33092d45f 119 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#13 := 0::int
#141 := -1::int
#142 := (* -1::int #28)
#143 := (+ #26 #142)
#154 := (>= #143 0::int)
#156 := (ite #154 #26 #28)
#159 := (f3 #156)
#144 := (<= #143 0::int)
#147 := (ite #144 #28 #26)
#150 := (f3 #147)
#162 := (= #150 #159)
#436 := (f3 #28)
#559 := (= #436 #159)
#558 := (= #159 #436)
#566 := (= #156 #28)
#259 := (= #28 #156)
#649 := (f3 #26)
#571 := (= #649 #159)
#577 := (= #159 #649)
#479 := (= #156 #26)
#331 := (= #26 #156)
#489 := (not #259)
#584 := [hypothesis]: #489
#312 := (or #154 #259)
#647 := [def-axiom]: #312
#585 := [unit-resolution #647 #584]: #154
#332 := (not #154)
#329 := (or #332 #331)
#333 := [def-axiom]: #329
#588 := [unit-resolution #333 #585]: #331
#480 := [symm #588]: #479
#579 := [monotonicity #480]: #577
#568 := [symm #579]: #571
#586 := (= #150 #649)
#492 := (= #147 #26)
#326 := (= #26 #147)
#241 := (not #144)
#496 := (or #241 #259)
#491 := (= #28 #26)
#488 := (= #26 #28)
#473 := [hypothesis]: #144
#490 := [th-lemma #585 #473]: #488
#484 := [symm #490]: #491
#494 := [trans #484 #588]: #259
#495 := [unit-resolution #584 #494]: false
#589 := [lemma #495]: #496
#439 := [unit-resolution #589 #584]: #241
#319 := (or #144 #326)
#330 := [def-axiom]: #319
#587 := [unit-resolution #330 #439]: #326
#493 := [symm #587]: #492
#590 := [monotonicity #493]: #586
#570 := [trans #590 #568]: #162
#165 := (not #162)
#32 := (<= #28 #26)
#33 := (ite #32 #26 #28)
#34 := (f3 #33)
#29 := (<= #26 #28)
#30 := (ite #29 #28 #26)
#31 := (f3 #30)
#35 := (= #31 #34)
#36 := (not #35)
#166 := (iff #36 #165)
#163 := (iff #35 #162)
#160 := (= #34 #159)
#157 := (= #33 #156)
#153 := (iff #32 #154)
#155 := [rewrite]: #153
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#151 := (= #31 #150)
#148 := (= #30 #147)
#145 := (iff #29 #144)
#146 := [rewrite]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#164 := [monotonicity #152 #161]: #163
#167 := [monotonicity #164]: #166
#138 := [asserted]: #36
#168 := [mp #138 #167]: #165
#580 := [unit-resolution #168 #570]: false
#581 := [lemma #580]: #259
#562 := [symm #581]: #566
#555 := [monotonicity #562]: #558
#539 := [symm #555]: #559
#556 := (= #150 #436)
#553 := (= #147 #28)
#240 := (= #28 #147)
#435 := [hypothesis]: #241
#437 := (or #154 #144)
#596 := [th-lemma]: #437
#478 := [unit-resolution #596 #435]: #154
#582 := [unit-resolution #333 #478]: #331
#578 := [symm #582]: #479
#574 := [monotonicity #578]: #577
#575 := [symm #574]: #571
#583 := [unit-resolution #330 #435]: #326
#572 := [symm #583]: #492
#573 := [monotonicity #572]: #586
#569 := [trans #573 #575]: #162
#576 := [unit-resolution #168 #569]: false
#560 := [lemma #576]: #144
#327 := (or #241 #240)
#328 := [def-axiom]: #327
#567 := [unit-resolution #328 #560]: #240
#554 := [symm #567]: #553
#557 := [monotonicity #554]: #556
#540 := [trans #557 #539]: #162
[unit-resolution #168 #540]: false
unsat
a6a23143d2240b5fcacf31f97f0b436ce20b01cf 164 0
#2 := false
decl f3 :: (-> int S2)
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#13 := 0::int
#27 := (<= #26 0::int)
#28 := (ite #27 0::int #26)
#29 := (f3 #28)
#134 := (= f5 #29)
#305 := (f3 #26)
#596 := (= #305 #29)
#595 := (= #29 #305)
#249 := (= #28 #26)
#300 := (= #26 #28)
#611 := (f4 #305)
#606 := (= #611 0::int)
#314 := (= #26 0::int)
#613 := (not #300)
#603 := [hypothesis]: #613
#293 := (or #27 #300)
#304 := [def-axiom]: #293
#604 := [unit-resolution #304 #603]: #27
#610 := (>= #26 0::int)
#597 := (not #606)
#601 := (iff #613 #597)
#322 := (iff #300 #606)
#214 := (= #28 0::int)
#215 := (not #27)
#301 := (or #215 #214)
#302 := [def-axiom]: #301
#311 := [unit-resolution #302 #604]: #214
#599 := (= #26 #611)
#329 := (= #611 #26)
#327 := (= #305 f5)
#233 := (= f5 #305)
#8 := (:var 0 S2)
#9 := (f4 #8)
#630 := (pattern #9)
#10 := (f3 #9)
#49 := (= #8 #10)
#631 := (forall (vars (?v0 S2)) (:pat #630) #49)
#52 := (forall (vars (?v0 S2)) #49)
#632 := (iff #52 #631)
#634 := (iff #631 #631)
#635 := [rewrite]: #634
#633 := [rewrite]: #632
#636 := [trans #633 #635]: #632
#154 := (~ #52 #52)
#152 := (~ #49 #49)
#153 := [refl]: #152
#155 := [nnf-pos #153]: #154
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#53 := (iff #12 #52)
#50 := (iff #11 #49)
#51 := [rewrite]: #50
#54 := [quant-intro #51]: #53
#48 := [asserted]: #12
#57 := [mp #48 #54]: #52
#143 := [mp~ #57 #155]: #52
#637 := [mp #143 #636]: #631
#307 := (not #631)
#286 := (or #307 #233)
#622 := [quant-inst]: #286
#326 := [unit-resolution #622 #637]: #233
#328 := [symm #326]: #327
#221 := [monotonicity #328]: #329
#600 := [symm #221]: #599
#323 := [monotonicity #600 #311]: #322
#598 := [monotonicity #323]: #601
#602 := [mp #603 #598]: #597
#612 := (or #606 #610)
#14 := (:var 0 int)
#16 := (f3 #14)
#638 := (pattern #16)
#74 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#122 := (or #22 #74)
#645 := (forall (vars (?v0 int)) (:pat #638) #122)
#127 := (forall (vars (?v0 int)) #122)
#648 := (iff #127 #645)
#646 := (iff #122 #122)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#146 := (~ #127 #127)
#158 := (~ #122 #122)
#159 := [refl]: #158
#147 := [nnf-pos #159]: #146
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#130 := (iff #24 #127)
#93 := (= 0::int #17)
#99 := (not #21)
#100 := (or #99 #93)
#105 := (forall (vars (?v0 int)) #100)
#128 := (iff #105 #127)
#125 := (iff #100 #122)
#119 := (or #74 #22)
#123 := (iff #119 #122)
#124 := [rewrite]: #123
#120 := (iff #100 #119)
#117 := (iff #93 #22)
#118 := [rewrite]: #117
#115 := (iff #99 #74)
#75 := (not #74)
#110 := (not #75)
#113 := (iff #110 #74)
#114 := [rewrite]: #113
#111 := (iff #99 #110)
#108 := (iff #21 #75)
#109 := [rewrite]: #108
#112 := [monotonicity #109]: #111
#116 := [trans #112 #114]: #115
#121 := [monotonicity #116 #118]: #120
#126 := [trans #121 #124]: #125
#129 := [quant-intro #126]: #128
#106 := (iff #24 #105)
#103 := (iff #23 #100)
#96 := (implies #21 #93)
#101 := (iff #96 #100)
#102 := [rewrite]: #101
#97 := (iff #23 #96)
#94 := (iff #22 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#104 := [trans #98 #102]: #103
#107 := [quant-intro #104]: #106
#131 := [trans #107 #129]: #130
#92 := [asserted]: #24
#132 := [mp #92 #131]: #127
#160 := [mp~ #132 #147]: #127
#650 := [mp #160 #649]: #645
#620 := (not #645)
#615 := (or #620 #606 #610)
#254 := (or #620 #612)
#616 := (iff #254 #615)
#614 := [rewrite]: #616
#255 := [quant-inst]: #254
#617 := [mp #255 #614]: #615
#312 := [unit-resolution #617 #650]: #612
#313 := [unit-resolution #312 #602]: #610
#315 := [th-lemma #313 #604]: #314
#593 := [trans #221 #315]: #606
#594 := [unit-resolution #602 #593]: false
#308 := [lemma #594]: #300
#591 := [symm #308]: #249
#592 := [monotonicity #591]: #595
#585 := [symm #592]: #596
#586 := [trans #326 #585]: #134
#137 := (not #134)
#30 := (= #29 f5)
#31 := (not #30)
#138 := (iff #31 #137)
#135 := (iff #30 #134)
#136 := [rewrite]: #135
#139 := [monotonicity #136]: #138
#133 := [asserted]: #31
#142 := [mp #133 #139]: #137
[unit-resolution #142 #586]: false
unsat
f5e2e20fb8c501f38b6d2f15c9fef9418df3a3f5 139 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#625 := (= #26 0::int)
decl f3 :: (-> int S2)
#211 := (f3 #26)
#212 := (f4 #211)
#298 := (= #212 0::int)
#135 := (>= #26 0::int)
#136 := (not #135)
#27 := (<= 0::int #26)
#28 := (not #27)
#137 := (iff #28 #136)
#133 := (iff #27 #135)
#134 := [rewrite]: #133
#138 := [monotonicity #134]: #137
#130 := [asserted]: #28
#139 := [mp #130 #138]: #136
#14 := (:var 0 int)
#16 := (f3 #14)
#635 := (pattern #16)
#71 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#119 := (or #22 #71)
#642 := (forall (vars (?v0 int)) (:pat #635) #119)
#124 := (forall (vars (?v0 int)) #119)
#645 := (iff #124 #642)
#643 := (iff #119 #119)
#644 := [refl]: #643
#646 := [quant-intro #644]: #645
#143 := (~ #124 #124)
#155 := (~ #119 #119)
#156 := [refl]: #155
#144 := [nnf-pos #156]: #143
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#127 := (iff #24 #124)
#90 := (= 0::int #17)
#96 := (not #21)
#97 := (or #96 #90)
#102 := (forall (vars (?v0 int)) #97)
#125 := (iff #102 #124)
#122 := (iff #97 #119)
#116 := (or #71 #22)
#120 := (iff #116 #119)
#121 := [rewrite]: #120
#117 := (iff #97 #116)
#114 := (iff #90 #22)
#115 := [rewrite]: #114
#112 := (iff #96 #71)
#72 := (not #71)
#107 := (not #72)
#110 := (iff #107 #71)
#111 := [rewrite]: #110
#108 := (iff #96 #107)
#105 := (iff #21 #72)
#106 := [rewrite]: #105
#109 := [monotonicity #106]: #108
#113 := [trans #109 #111]: #112
#118 := [monotonicity #113 #115]: #117
#123 := [trans #118 #121]: #122
#126 := [quant-intro #123]: #125
#103 := (iff #24 #102)
#100 := (iff #23 #97)
#93 := (implies #21 #90)
#98 := (iff #93 #97)
#99 := [rewrite]: #98
#94 := (iff #23 #93)
#91 := (iff #22 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#101 := [trans #95 #99]: #100
#104 := [quant-intro #101]: #103
#128 := [trans #104 #126]: #127
#89 := [asserted]: #24
#129 := [mp #89 #128]: #124
#157 := [mp~ #129 #144]: #124
#647 := [mp #157 #646]: #642
#304 := (not #642)
#283 := (or #304 #135 #298)
#302 := (or #298 #135)
#619 := (or #304 #302)
#622 := (iff #619 #283)
#230 := (or #135 #298)
#277 := (or #304 #230)
#288 := (iff #277 #283)
#289 := [rewrite]: #288
#408 := (iff #619 #277)
#303 := (iff #302 #230)
#300 := [rewrite]: #303
#615 := [monotonicity #300]: #408
#623 := [trans #615 #289]: #622
#621 := [quant-inst]: #619
#624 := [mp #621 #623]: #283
#626 := [unit-resolution #624 #647 #139]: #298
#275 := (= #26 #212)
#297 := (= f5 #211)
#8 := (:var 0 S2)
#9 := (f4 #8)
#627 := (pattern #9)
#10 := (f3 #9)
#46 := (= #8 #10)
#628 := (forall (vars (?v0 S2)) (:pat #627) #46)
#49 := (forall (vars (?v0 S2)) #46)
#629 := (iff #49 #628)
#631 := (iff #628 #628)
#632 := [rewrite]: #631
#630 := [rewrite]: #629
#633 := [trans #630 #632]: #629
#151 := (~ #49 #49)
#149 := (~ #46 #46)
#150 := [refl]: #149
#152 := [nnf-pos #150]: #151
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#50 := (iff #12 #49)
#47 := (iff #11 #46)
#48 := [rewrite]: #47
#51 := [quant-intro #48]: #50
#45 := [asserted]: #12
#54 := [mp #45 #51]: #49
#140 := [mp~ #54 #152]: #49
#634 := [mp #140 #633]: #628
#299 := (not #628)
#290 := (or #299 #297)
#301 := [quant-inst]: #290
#616 := [unit-resolution #301 #634]: #297
#280 := [monotonicity #616]: #275
#617 := [trans #280 #626]: #625
#276 := (not #625)
#618 := (or #276 #135)
#260 := [th-lemma]: #618
[unit-resolution #260 #139 #617]: false
unsat
88db0d3335480a81cfc5f118ecaef1678c52c57c 17 0
#2 := false
#8 := 0::int
#9 := (= 0::int 0::int)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
3413e63e105cab337755fe6950808ba664d2597a 75 0
#2 := false
decl f3 :: (-> int S2)
#28 := 1::int
#30 := (f3 1::int)
decl f5 :: S2
#25 := f5
#31 := (= f5 #30)
decl f4 :: (-> S2 int)
#26 := (f4 f5)
#226 := (f3 #26)
#337 := (= #226 #30)
#615 := (= #30 #226)
#625 := (= 1::int #26)
#266 := (= #26 1::int)
#29 := (<= #26 1::int)
#13 := 0::int
#139 := (<= #26 0::int)
#140 := (not #139)
#32 := (not #31)
#146 := (and #29 #32 #140)
#33 := (and #29 #32)
#27 := (< 0::int #26)
#34 := (and #27 #33)
#149 := (iff #34 #146)
#143 := (and #140 #33)
#147 := (iff #143 #146)
#148 := [rewrite]: #147
#144 := (iff #34 #143)
#141 := (iff #27 #140)
#142 := [rewrite]: #141
#145 := [monotonicity #142]: #144
#150 := [trans #145 #148]: #149
#136 := [asserted]: #34
#151 := [mp #136 #150]: #146
#152 := [and-elim #151]: #29
#154 := [and-elim #151]: #140
#627 := [th-lemma #154 #152]: #266
#628 := [symm #627]: #625
#322 := [monotonicity #628]: #615
#338 := [symm #322]: #337
#311 := (= f5 #226)
#8 := (:var 0 S2)
#9 := (f4 #8)
#641 := (pattern #9)
#10 := (f3 #9)
#52 := (= #8 #10)
#642 := (forall (vars (?v0 S2)) (:pat #641) #52)
#55 := (forall (vars (?v0 S2)) #52)
#643 := (iff #55 #642)
#645 := (iff #642 #642)
#646 := [rewrite]: #645
#644 := [rewrite]: #643
#647 := [trans #644 #646]: #643
#170 := (~ #55 #55)
#168 := (~ #52 #52)
#169 := [refl]: #168
#171 := [nnf-pos #169]: #170
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#56 := (iff #12 #55)
#53 := (iff #11 #52)
#54 := [rewrite]: #53
#57 := [quant-intro #54]: #56
#51 := [asserted]: #12
#60 := [mp #51 #57]: #55
#155 := [mp~ #60 #171]: #55
#648 := [mp #155 #647]: #642
#313 := (not #642)
#304 := (or #313 #311)
#315 := [quant-inst]: #304
#614 := [unit-resolution #315 #648]: #311
#339 := [trans #614 #338]: #31
#153 := [and-elim #151]: #32
[unit-resolution #153 #339]: false
unsat
3bd4cf5a7808f0310fbc231a810dbf418d0f69cc 25 0
#2 := false
#8 := 0::int
#9 := (- 0::int)
#10 := (= 0::int #9)
#11 := (not #10)
#43 := (iff #11 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #11 #38)
#36 := (iff #10 true)
#31 := (= 0::int 0::int)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #10 #31)
#29 := (= #9 0::int)
#30 := [rewrite]: #29
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#28 := [asserted]: #11
[mp #28 #44]: false
unsat
7c99e4c706a5bfe7c4bac45e274e4bb5f5ba171b 20 0
#2 := false
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := (<= #26 #26)
#28 := (not #27)
#140 := (iff #28 false)
#1 := true
#135 := (not true)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #28 #135)
#133 := (iff #27 true)
#134 := [rewrite]: #133
#137 := [monotonicity #134]: #136
#141 := [trans #137 #139]: #140
#130 := [asserted]: #28
[mp #130 #141]: false
unsat
575466500975f7b2e0bdbc552a0711af0164ab2f 17 0
#2 := false
#8 := 1::int
#9 := (= 1::int 1::int)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
2c1b55c23f4e7de8da8d5f6f9bfa461e094d5fdc 319 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#144 := -1::int
#145 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#146 := (+ #26 #145)
#147 := (<= #146 0::int)
decl f3 :: (-> int S2)
#30 := 3::int
#34 := (* 3::int #28)
#35 := (f3 #34)
#36 := (f4 #35)
#150 := (* -1::int #36)
#31 := (* 3::int #26)
#32 := (f3 #31)
#33 := (f4 #32)
#151 := (+ #33 #150)
#152 := (<= #151 0::int)
#155 := (not #152)
#158 := (and #147 #155)
#37 := (<= #33 #36)
#38 := (not #37)
#29 := (<= #26 #28)
#39 := (and #29 #38)
#159 := (iff #39 #158)
#156 := (iff #38 #155)
#153 := (iff #37 #152)
#154 := [rewrite]: #153
#157 := [monotonicity #154]: #156
#148 := (iff #29 #147)
#149 := [rewrite]: #148
#160 := [monotonicity #149 #157]: #159
#141 := [asserted]: #39
#161 := [mp #141 #160]: #158
#162 := [and-elim #161]: #147
#163 := [and-elim #161]: #155
#612 := (+ #34 #150)
#589 := (<= #612 0::int)
#616 := (= #612 0::int)
#607 := (>= #28 0::int)
#542 := (= #28 0::int)
#236 := (f3 #28)
#584 := (f4 #236)
#581 := (= #584 0::int)
#608 := (not #607)
#544 := [hypothesis]: #608
#575 := (or #581 #607)
#14 := (:var 0 int)
#16 := (f3 #14)
#658 := (pattern #16)
#82 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#130 := (or #22 #82)
#665 := (forall (vars (?v0 int)) (:pat #658) #130)
#135 := (forall (vars (?v0 int)) #130)
#668 := (iff #135 #665)
#666 := (iff #130 #130)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#167 := (~ #135 #135)
#181 := (~ #130 #130)
#182 := [refl]: #181
#168 := [nnf-pos #182]: #167
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#138 := (iff #24 #135)
#101 := (= 0::int #17)
#107 := (not #21)
#108 := (or #107 #101)
#113 := (forall (vars (?v0 int)) #108)
#136 := (iff #113 #135)
#133 := (iff #108 #130)
#127 := (or #82 #22)
#131 := (iff #127 #130)
#132 := [rewrite]: #131
#128 := (iff #108 #127)
#125 := (iff #101 #22)
#126 := [rewrite]: #125
#123 := (iff #107 #82)
#83 := (not #82)
#118 := (not #83)
#121 := (iff #118 #82)
#122 := [rewrite]: #121
#119 := (iff #107 #118)
#116 := (iff #21 #83)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#124 := [trans #120 #122]: #123
#129 := [monotonicity #124 #126]: #128
#134 := [trans #129 #132]: #133
#137 := [quant-intro #134]: #136
#114 := (iff #24 #113)
#111 := (iff #23 #108)
#104 := (implies #21 #101)
#109 := (iff #104 #108)
#110 := [rewrite]: #109
#105 := (iff #23 #104)
#102 := (iff #22 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#112 := [trans #106 #110]: #111
#115 := [quant-intro #112]: #114
#139 := [trans #115 #137]: #138
#100 := [asserted]: #24
#140 := [mp #100 #139]: #135
#183 := [mp~ #140 #168]: #135
#670 := [mp #183 #669]: #665
#242 := (not #665)
#573 := (or #242 #581 #607)
#578 := (or #242 #575)
#568 := (iff #578 #573)
#569 := [rewrite]: #568
#567 := [quant-inst]: #578
#570 := [mp #567 #569]: #573
#545 := [unit-resolution #570 #670]: #575
#546 := [unit-resolution #545 #544]: #581
#547 := (= #28 #584)
#322 := (= f6 #236)
#8 := (:var 0 S2)
#9 := (f4 #8)
#650 := (pattern #9)
#10 := (f3 #9)
#57 := (= #8 #10)
#651 := (forall (vars (?v0 S2)) (:pat #650) #57)
#60 := (forall (vars (?v0 S2)) #57)
#652 := (iff #60 #651)
#654 := (iff #651 #651)
#655 := [rewrite]: #654
#653 := [rewrite]: #652
#656 := [trans #653 #655]: #652
#177 := (~ #60 #60)
#175 := (~ #57 #57)
#176 := [refl]: #175
#178 := [nnf-pos #176]: #177
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#61 := (iff #12 #60)
#58 := (iff #11 #57)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#56 := [asserted]: #12
#65 := [mp #56 #62]: #60
#164 := [mp~ #65 #178]: #60
#657 := [mp #164 #656]: #651
#323 := (not #651)
#327 := (or #323 #322)
#324 := [quant-inst]: #327
#536 := [unit-resolution #324 #657]: #322
#525 := [monotonicity #536]: #547
#526 := [trans #525 #546]: #542
#528 := (not #542)
#529 := (or #528 #607)
#530 := [th-lemma]: #529
#531 := [unit-resolution #530 #544 #526]: false
#532 := [lemma #531]: #607
#453 := (or #608 #616)
#64 := (= #14 #17)
#89 := (or #64 #83)
#659 := (forall (vars (?v0 int)) (:pat #658) #89)
#94 := (forall (vars (?v0 int)) #89)
#662 := (iff #94 #659)
#660 := (iff #89 #89)
#661 := [refl]: #660
#663 := [quant-intro #661]: #662
#165 := (~ #94 #94)
#142 := (~ #89 #89)
#179 := [refl]: #142
#166 := [nnf-pos #179]: #165
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#97 := (iff #20 #94)
#71 := (not #15)
#72 := (or #71 #64)
#77 := (forall (vars (?v0 int)) #72)
#95 := (iff #77 #94)
#92 := (iff #72 #89)
#86 := (or #83 #64)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #72 #86)
#84 := (iff #71 #83)
#80 := (iff #15 #82)
#81 := [rewrite]: #80
#85 := [monotonicity #81]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#96 := [quant-intro #93]: #95
#78 := (iff #20 #77)
#75 := (iff #19 #72)
#68 := (implies #15 #64)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #19 #68)
#66 := (iff #18 #64)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [trans #70 #74]: #75
#79 := [quant-intro #76]: #78
#98 := [trans #79 #96]: #97
#63 := [asserted]: #20
#99 := [mp #63 #98]: #94
#180 := [mp~ #99 #166]: #94
#664 := [mp #180 #663]: #659
#629 := (not #659)
#592 := (or #629 #608 #616)
#614 := (>= #34 0::int)
#329 := (not #614)
#611 := (= #34 #36)
#615 := (or #611 #329)
#593 := (or #629 #615)
#433 := (iff #593 #592)
#600 := (or #629 #453)
#430 := (iff #600 #592)
#432 := [rewrite]: #430
#594 := (iff #593 #600)
#597 := (iff #615 #453)
#610 := (or #616 #608)
#595 := (iff #610 #453)
#596 := [rewrite]: #595
#451 := (iff #615 #610)
#609 := (iff #329 #608)
#602 := (iff #614 #607)
#603 := [rewrite]: #602
#604 := [monotonicity #603]: #609
#605 := (iff #611 #616)
#606 := [rewrite]: #605
#452 := [monotonicity #606 #604]: #451
#598 := [trans #452 #596]: #597
#601 := [monotonicity #598]: #594
#586 := [trans #601 #432]: #433
#599 := [quant-inst]: #593
#587 := [mp #599 #586]: #592
#543 := [unit-resolution #587 #664]: #453
#527 := [unit-resolution #543 #532]: #616
#533 := (not #616)
#519 := (or #533 #589)
#515 := [th-lemma]: #519
#516 := [unit-resolution #515 #527]: #589
#646 := (* -1::int #33)
#647 := (+ #31 #646)
#623 := (>= #647 0::int)
#648 := (= #647 0::int)
#639 := (>= #26 0::int)
#624 := (= #33 0::int)
#518 := (not #624)
#335 := (<= #33 0::int)
#517 := (not #335)
#520 := (not #589)
#521 := (or #517 #608 #520 #152)
#522 := [th-lemma]: #521
#523 := [unit-resolution #522 #163 #532 #516]: #517
#524 := (or #518 #335)
#497 := [th-lemma]: #524
#498 := [unit-resolution #497 #523]: #518
#347 := (or #624 #639)
#619 := (or #242 #624 #639)
#301 := (>= #31 0::int)
#346 := (or #624 #301)
#620 := (or #242 #346)
#332 := (iff #620 #619)
#343 := (or #242 #347)
#618 := (iff #343 #619)
#622 := [rewrite]: #618
#617 := (iff #620 #343)
#348 := (iff #346 #347)
#299 := (iff #301 #639)
#304 := [rewrite]: #299
#349 := [monotonicity #304]: #348
#621 := [monotonicity #349]: #617
#333 := [trans #621 #622]: #332
#342 := [quant-inst]: #620
#334 := [mp #342 #333]: #619
#499 := [unit-resolution #334 #670]: #347
#392 := [unit-resolution #499 #498]: #639
#640 := (not #639)
#289 := (or #640 #648)
#630 := (or #629 #640 #648)
#431 := (not #301)
#313 := (= #31 #33)
#645 := (or #313 #431)
#631 := (or #629 #645)
#276 := (iff #631 #630)
#632 := (or #629 #289)
#635 := (iff #632 #630)
#275 := [rewrite]: #635
#270 := (iff #631 #632)
#627 := (iff #645 #289)
#284 := (or #648 #640)
#290 := (iff #284 #289)
#291 := [rewrite]: #290
#625 := (iff #645 #284)
#300 := (iff #431 #640)
#641 := [monotonicity #304]: #300
#643 := (iff #313 #648)
#649 := [rewrite]: #643
#288 := [monotonicity #649 #641]: #625
#628 := [trans #288 #291]: #627
#633 := [monotonicity #628]: #270
#636 := [trans #633 #275]: #276
#626 := [quant-inst]: #631
#634 := [mp #626 #636]: #630
#503 := [unit-resolution #634 #664]: #289
#504 := [unit-resolution #503 #392]: #648
#505 := (not #648)
#510 := (or #505 #623)
#506 := [th-lemma]: #510
#507 := [unit-resolution #506 #504]: #623
[th-lemma #507 #516 #163 #162]: false
unsat
a2fa5e02114a58b8161c5f17b5db7f1bd8de21cc 34 0
#2 := false
#8 := 1::int
#9 := (- 1::int)
#10 := (= #9 1::int)
#11 := (not #10)
#12 := (not #11)
#52 := (iff #12 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 true)
#40 := (not false)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 false)
#30 := -1::int
#33 := (= -1::int 1::int)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (= #9 -1::int)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#29 := [asserted]: #12
[mp #29 #53]: false
unsat
833da25c34dad32196cafeb37ee24e9c4b09f5e6 40 0
#2 := false
#12 := 567::int
#10 := 345::int
#8 := 123::int
#9 := (- 123::int)
#11 := (+ #9 345::int)
#13 := (< #11 567::int)
#14 := (not #13)
#58 := (iff #14 false)
#38 := 222::int
#43 := (< 222::int 567::int)
#46 := (not #43)
#56 := (iff #46 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #46 #51)
#49 := (iff #43 true)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#41 := (= #11 222::int)
#32 := -123::int
#35 := (+ -123::int 345::int)
#39 := (= #35 222::int)
#40 := [rewrite]: #39
#36 := (= #11 #35)
#33 := (= #9 -123::int)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#42 := [trans #37 #40]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#59 := [trans #48 #57]: #58
#31 := [asserted]: #14
[mp #31 #59]: false
unsat
b1d5ad1c199444dbf6fe73759c2c90d7c60b146e 325 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#549 := (= #26 0::int)
decl f3 :: (-> int S2)
#241 := (f3 #26)
#495 := (f4 #241)
#496 := (= #495 0::int)
#645 := (>= #26 0::int)
#646 := (not #645)
#30 := 3::int
#31 := (* 3::int #26)
#32 := (f3 #31)
#33 := (f4 #32)
#144 := -1::int
#652 := (* -1::int #33)
#653 := (+ #31 #652)
#654 := (= #653 0::int)
#503 := (not #654)
#629 := (>= #653 0::int)
#527 := (not #629)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#34 := (* 3::int #28)
#35 := (f3 #34)
#36 := (f4 #35)
#153 := (* -1::int #36)
#618 := (+ #34 #153)
#595 := (<= #618 0::int)
#622 := (= #618 0::int)
#613 := (>= #28 0::int)
#548 := (= #28 0::int)
#242 := (f3 #28)
#590 := (f4 #242)
#587 := (= #590 0::int)
#614 := (not #613)
#550 := [hypothesis]: #614
#581 := (or #587 #613)
#14 := (:var 0 int)
#16 := (f3 #14)
#664 := (pattern #16)
#82 := (>= #14 0::int)
#17 := (f4 #16)
#22 := (= #17 0::int)
#130 := (or #22 #82)
#671 := (forall (vars (?v0 int)) (:pat #664) #130)
#135 := (forall (vars (?v0 int)) #130)
#674 := (iff #135 #671)
#672 := (iff #130 #130)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#173 := (~ #135 #135)
#187 := (~ #130 #130)
#188 := [refl]: #187
#174 := [nnf-pos #188]: #173
#21 := (< #14 0::int)
#23 := (implies #21 #22)
#24 := (forall (vars (?v0 int)) #23)
#138 := (iff #24 #135)
#101 := (= 0::int #17)
#107 := (not #21)
#108 := (or #107 #101)
#113 := (forall (vars (?v0 int)) #108)
#136 := (iff #113 #135)
#133 := (iff #108 #130)
#127 := (or #82 #22)
#131 := (iff #127 #130)
#132 := [rewrite]: #131
#128 := (iff #108 #127)
#125 := (iff #101 #22)
#126 := [rewrite]: #125
#123 := (iff #107 #82)
#83 := (not #82)
#118 := (not #83)
#121 := (iff #118 #82)
#122 := [rewrite]: #121
#119 := (iff #107 #118)
#116 := (iff #21 #83)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#124 := [trans #120 #122]: #123
#129 := [monotonicity #124 #126]: #128
#134 := [trans #129 #132]: #133
#137 := [quant-intro #134]: #136
#114 := (iff #24 #113)
#111 := (iff #23 #108)
#104 := (implies #21 #101)
#109 := (iff #104 #108)
#110 := [rewrite]: #109
#105 := (iff #23 #104)
#102 := (iff #22 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#112 := [trans #106 #110]: #111
#115 := [quant-intro #112]: #114
#139 := [trans #115 #137]: #138
#100 := [asserted]: #24
#140 := [mp #100 #139]: #135
#189 := [mp~ #140 #174]: #135
#676 := [mp #189 #675]: #671
#248 := (not #671)
#579 := (or #248 #587 #613)
#584 := (or #248 #581)
#574 := (iff #584 #579)
#575 := [rewrite]: #574
#573 := [quant-inst]: #584
#576 := [mp #573 #575]: #579
#551 := [unit-resolution #576 #676]: #581
#552 := [unit-resolution #551 #550]: #587
#553 := (= #28 #590)
#328 := (= f6 #242)
#8 := (:var 0 S2)
#9 := (f4 #8)
#656 := (pattern #9)
#10 := (f3 #9)
#57 := (= #8 #10)
#657 := (forall (vars (?v0 S2)) (:pat #656) #57)
#60 := (forall (vars (?v0 S2)) #57)
#658 := (iff #60 #657)
#660 := (iff #657 #657)
#661 := [rewrite]: #660
#659 := [rewrite]: #658
#662 := [trans #659 #661]: #658
#183 := (~ #60 #60)
#181 := (~ #57 #57)
#182 := [refl]: #181
#184 := [nnf-pos #182]: #183
#11 := (= #10 #8)
#12 := (forall (vars (?v0 S2)) #11)
#61 := (iff #12 #60)
#58 := (iff #11 #57)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#56 := [asserted]: #12
#65 := [mp #56 #62]: #60
#170 := [mp~ #65 #184]: #60
#663 := [mp #170 #662]: #657
#329 := (not #657)
#333 := (or #329 #328)
#330 := [quant-inst]: #333
#542 := [unit-resolution #330 #663]: #328
#531 := [monotonicity #542]: #553
#532 := [trans #531 #552]: #548
#534 := (not #548)
#535 := (or #534 #613)
#536 := [th-lemma]: #535
#537 := [unit-resolution #536 #550 #532]: false
#538 := [lemma #537]: #613
#459 := (or #614 #622)
#64 := (= #14 #17)
#89 := (or #64 #83)
#665 := (forall (vars (?v0 int)) (:pat #664) #89)
#94 := (forall (vars (?v0 int)) #89)
#668 := (iff #94 #665)
#666 := (iff #89 #89)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#171 := (~ #94 #94)
#142 := (~ #89 #89)
#185 := [refl]: #142
#172 := [nnf-pos #185]: #171
#18 := (= #17 #14)
#15 := (<= 0::int #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 int)) #19)
#97 := (iff #20 #94)
#71 := (not #15)
#72 := (or #71 #64)
#77 := (forall (vars (?v0 int)) #72)
#95 := (iff #77 #94)
#92 := (iff #72 #89)
#86 := (or #83 #64)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #72 #86)
#84 := (iff #71 #83)
#80 := (iff #15 #82)
#81 := [rewrite]: #80
#85 := [monotonicity #81]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#96 := [quant-intro #93]: #95
#78 := (iff #20 #77)
#75 := (iff #19 #72)
#68 := (implies #15 #64)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #19 #68)
#66 := (iff #18 #64)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#76 := [trans #70 #74]: #75
#79 := [quant-intro #76]: #78
#98 := [trans #79 #96]: #97
#63 := [asserted]: #20
#99 := [mp #63 #98]: #94
#186 := [mp~ #99 #172]: #94
#670 := [mp #186 #669]: #665
#635 := (not #665)
#598 := (or #635 #614 #622)
#620 := (>= #34 0::int)
#335 := (not #620)
#617 := (= #34 #36)
#621 := (or #617 #335)
#599 := (or #635 #621)
#439 := (iff #599 #598)
#606 := (or #635 #459)
#436 := (iff #606 #598)
#438 := [rewrite]: #436
#600 := (iff #599 #606)
#603 := (iff #621 #459)
#616 := (or #622 #614)
#601 := (iff #616 #459)
#602 := [rewrite]: #601
#457 := (iff #621 #616)
#615 := (iff #335 #614)
#608 := (iff #620 #613)
#609 := [rewrite]: #608
#610 := [monotonicity #609]: #615
#611 := (iff #617 #622)
#612 := [rewrite]: #611
#458 := [monotonicity #612 #610]: #457
#604 := [trans #458 #602]: #603
#607 := [monotonicity #604]: #600
#592 := [trans #607 #438]: #439
#605 := [quant-inst]: #599
#593 := [mp #605 #592]: #598
#539 := [unit-resolution #593 #670]: #459
#525 := [unit-resolution #539 #538]: #622
#521 := (not #622)
#522 := (or #521 #595)
#523 := [th-lemma]: #522
#526 := [unit-resolution #523 #525]: #595
#147 := (* -1::int #28)
#148 := (+ #26 #147)
#146 := (>= #148 0::int)
#145 := (not #146)
#154 := (+ #33 #153)
#152 := (>= #154 0::int)
#164 := (and #145 #152)
#37 := (< #33 #36)
#38 := (not #37)
#29 := (< #26 #28)
#39 := (and #29 #38)
#165 := (iff #39 #164)
#162 := (iff #38 #152)
#151 := (not #152)
#157 := (not #151)
#160 := (iff #157 #152)
#161 := [rewrite]: #160
#158 := (iff #38 #157)
#155 := (iff #37 #151)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#163 := [trans #159 #161]: #162
#149 := (iff #29 #145)
#150 := [rewrite]: #149
#166 := [monotonicity #150 #163]: #165
#141 := [asserted]: #39
#167 := [mp #141 #166]: #164
#168 := [and-elim #167]: #145
#169 := [and-elim #167]: #152
#528 := (not #595)
#529 := (or #527 #151 #528 #146)
#524 := [th-lemma]: #529
#530 := [unit-resolution #524 #169 #168 #526]: #527
#504 := (or #503 #629)
#505 := [th-lemma]: #504
#398 := [unit-resolution #505 #530]: #503
#295 := (or #646 #654)
#636 := (or #635 #646 #654)
#307 := (>= #31 0::int)
#437 := (not #307)
#319 := (= #31 #33)
#651 := (or #319 #437)
#637 := (or #635 #651)
#282 := (iff #637 #636)
#638 := (or #635 #295)
#641 := (iff #638 #636)
#281 := [rewrite]: #641
#276 := (iff #637 #638)
#633 := (iff #651 #295)
#290 := (or #654 #646)
#296 := (iff #290 #295)
#297 := [rewrite]: #296
#631 := (iff #651 #290)
#306 := (iff #437 #646)
#305 := (iff #307 #645)
#310 := [rewrite]: #305
#647 := [monotonicity #310]: #306
#649 := (iff #319 #654)
#655 := [rewrite]: #649
#294 := [monotonicity #655 #647]: #631
#634 := [trans #294 #297]: #633
#639 := [monotonicity #634]: #276
#642 := [trans #639 #281]: #282
#632 := [quant-inst]: #637
#640 := [mp #632 #642]: #636
#509 := [unit-resolution #640 #670]: #295
#510 := [unit-resolution #509 #398]: #646
#497 := (or #496 #645)
#591 := (or #248 #496 #645)
#578 := (or #248 #497)
#572 := (iff #578 #591)
#569 := [rewrite]: #572
#580 := [quant-inst]: #578
#571 := [mp #580 #569]: #591
#511 := [unit-resolution #571 #676]: #497
#516 := [unit-resolution #511 #510]: #496
#513 := (= #26 #495)
#327 := (= f5 #241)
#320 := (or #329 #327)
#331 := [quant-inst]: #320
#512 := [unit-resolution #331 #663]: #327
#514 := [monotonicity #512]: #513
#517 := [trans #514 #516]: #549
#518 := (not #549)
#519 := (or #518 #645)
#515 := [th-lemma]: #519
[unit-resolution #515 #510 #517]: false
unsat
94a3c69e40ab8834fda1414aac36766b6e6d0448 30 0
#2 := false
#10 := 2345678901::int
#8 := 123456789::int
#9 := (- 123456789::int)
#11 := (< #9 2345678901::int)
#12 := (not #11)
#48 := (iff #12 false)
#30 := -123456789::int
#33 := (< -123456789::int 2345678901::int)
#36 := (not #33)
#46 := (iff #36 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #36 #41)
#39 := (iff #33 true)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#37 := (iff #12 #36)
#34 := (iff #11 #33)
#31 := (= #9 -123456789::int)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#38 := [monotonicity #35]: #37
#49 := [trans #38 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
a489de1c5d2012bec455302dfb4702c1a1df77d2 38 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#137 := -1::int
#140 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#141 := (+ #26 #140)
#144 := (<= #141 0::int)
#147 := (not #144)
#139 := (>= #141 0::int)
#138 := (not #139)
#150 := (and #138 #147)
#30 := (<= #26 #28)
#31 := (not #30)
#29 := (< #26 #28)
#32 := (and #29 #31)
#151 := (iff #32 #150)
#148 := (iff #31 #147)
#145 := (iff #30 #144)
#146 := [rewrite]: #145
#149 := [monotonicity #146]: #148
#142 := (iff #29 #138)
#143 := [rewrite]: #142
#152 := [monotonicity #143 #149]: #151
#134 := [asserted]: #32
#153 := [mp #134 #152]: #150
#155 := [and-elim #153]: #147
#154 := [and-elim #153]: #138
#227 := (or #144 #139)
#313 := [th-lemma]: #227
#228 := [unit-resolution #313 #154]: #144
[unit-resolution #228 #155]: false
unsat
44da310bca35772c7c4ab7b6f9468b0cf95baf9e 26 0
#2 := false
decl f3 :: int
#8 := f3
#9 := 0::int
#10 := (+ f3 0::int)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
fed373ed1a62868b78e70bd0d9a3428669ee5457 26 0
#2 := false
decl f3 :: int
#9 := f3
#8 := 0::int
#10 := (+ 0::int f3)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
957a81798a07625d9f9bb6cae6421523a9942b09 70 0
#2 := false
#149 := -1::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#152 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#153 := (+ #26 #152)
#156 := (<= #153 -1::int)
#13 := 0::int
#151 := (>= #153 0::int)
#150 := (not #151)
#159 := (not #156)
#357 := [hypothesis]: #159
#336 := (or #150 #156)
#165 := (iff #151 #156)
#30 := 1::int
#31 := (+ #26 1::int)
#32 := (<= #31 #28)
#33 := (not #32)
#29 := (< #26 #28)
#34 := (iff #29 #33)
#170 := (iff #34 #165)
#137 := (+ 1::int #26)
#140 := (<= #137 #28)
#143 := (not #140)
#146 := (iff #29 #143)
#168 := (iff #146 #165)
#162 := (iff #150 #159)
#166 := (iff #162 #165)
#167 := [rewrite]: #166
#163 := (iff #146 #162)
#160 := (iff #143 #159)
#157 := (iff #140 #156)
#158 := [rewrite]: #157
#161 := [monotonicity #158]: #160
#154 := (iff #29 #150)
#155 := [rewrite]: #154
#164 := [monotonicity #155 #161]: #163
#169 := [trans #164 #167]: #168
#147 := (iff #34 #146)
#144 := (iff #33 #143)
#141 := (iff #32 #140)
#138 := (= #31 #137)
#139 := [rewrite]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#171 := [trans #148 #169]: #170
#136 := [asserted]: #34
#172 := [mp #136 #171]: #165
#246 := (not #165)
#324 := (or #150 #156 #246)
#335 := [def-axiom]: #324
#337 := [unit-resolution #335 #172]: #336
#358 := [unit-resolution #337 #357]: #150
#359 := [th-lemma #357 #358]: false
#253 := [lemma #359]: #156
#629 := (or #159 #150)
#630 := [th-lemma]: #629
#352 := [unit-resolution #630 #253]: #150
#332 := (or #151 #159)
#331 := (or #151 #159 #246)
#247 := [def-axiom]: #331
#333 := [unit-resolution #247 #172]: #332
[unit-resolution #333 #352 #253]: false
unsat
bb9d75a7a3abc7f60dd441b4f982645b6039e03e 29 0
#2 := false
decl f3 :: int
#8 := f3
decl f4 :: int
#9 := f4
#11 := (+ f4 f3)
#10 := (+ f3 f4)
#12 := (= #10 #11)
#13 := (not #12)
#45 := (iff #13 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #13 #40)
#38 := (iff #12 true)
#33 := (= #10 #10)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #12 #33)
#31 := (= #11 #10)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #13
[mp #30 #46]: false
unsat
7a80c4532f5787abddc50ad2e7bc9838390acb73 11 0
#2 := false
decl f4 :: (-> S2 int)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#27 := (< #26 #26)
#132 := (iff #27 false)
#133 := [rewrite]: #132
#129 := [asserted]: #27
[mp #129 #133]: false
unsat
698ca3e8d5433877845f98d57033a6d63af62497 33 0
#2 := false
decl f5 :: int
#10 := f5
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#13 := (+ f3 f4)
#14 := (+ #13 f5)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#48 := (iff #16 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #16 #43)
#41 := (iff #15 true)
#36 := (= #12 #12)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #15 #36)
#34 := (= #14 #12)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #16
[mp #33 #49]: false
unsat
a5e0b28483c053128bc0be113d20a82250433b74 54 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#141 := -1::int
#154 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#155 := (+ #26 #154)
#156 := (<= #155 0::int)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#142 := (* -1::int #31)
#147 := (+ #26 #142)
#148 := (<= #147 0::int)
#151 := (not #148)
#143 := (+ #28 #142)
#144 := (<= #143 0::int)
#165 := (and #144 #151 #156)
#33 := (<= #26 #31)
#34 := (not #33)
#32 := (<= #28 #31)
#35 := (and #32 #34)
#29 := (<= #26 #28)
#36 := (and #29 #35)
#168 := (iff #36 #165)
#159 := (and #144 #151)
#162 := (and #156 #159)
#166 := (iff #162 #165)
#167 := [rewrite]: #166
#163 := (iff #36 #162)
#160 := (iff #35 #159)
#152 := (iff #34 #151)
#149 := (iff #33 #148)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#145 := (iff #32 #144)
#146 := [rewrite]: #145
#161 := [monotonicity #146 #153]: #160
#157 := (iff #29 #156)
#158 := [rewrite]: #157
#164 := [monotonicity #158 #161]: #163
#169 := [trans #164 #167]: #168
#138 := [asserted]: #36
#170 := [mp #138 #169]: #165
#173 := [and-elim #170]: #156
#172 := [and-elim #170]: #151
#171 := [and-elim #170]: #144
[th-lemma #171 #172 #173]: false
unsat
41dc588e082dd0bed2354a8e37e9f3c6c05151c1 45 0
#2 := false
decl f4 :: int
#9 := f4
#13 := (- f4)
decl f3 :: int
#8 := f3
#14 := (= f3 #13)
#11 := 0::int
#10 := (+ f3 f4)
#12 := (= #10 0::int)
#15 := (iff #12 #14)
#16 := (not #15)
#62 := (iff #16 false)
#47 := (not #12)
#34 := -1::int
#35 := (* -1::int f4)
#38 := (= f3 #35)
#48 := (iff #38 #47)
#60 := (iff #48 false)
#55 := (iff #12 #47)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #48 #55)
#53 := (iff #38 #12)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#51 := (iff #16 #48)
#41 := (iff #12 #38)
#44 := (not #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #16 #44)
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#36 := (= #13 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#63 := [trans #52 #61]: #62
#33 := [asserted]: #16
[mp #33 #63]: false
unsat
4d82a9a048129e417a9e0a1825ce1ac4532cabd0 55 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#141 := -1::int
#156 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#157 := (+ #26 #156)
#155 := (>= #157 0::int)
#154 := (not #155)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#142 := (* -1::int #31)
#147 := (+ #26 #142)
#148 := (<= #147 0::int)
#151 := (not #148)
#143 := (+ #28 #142)
#144 := (<= #143 0::int)
#166 := (and #144 #151 #154)
#33 := (<= #26 #31)
#34 := (not #33)
#32 := (<= #28 #31)
#35 := (and #32 #34)
#29 := (< #26 #28)
#36 := (and #29 #35)
#169 := (iff #36 #166)
#160 := (and #144 #151)
#163 := (and #154 #160)
#167 := (iff #163 #166)
#168 := [rewrite]: #167
#164 := (iff #36 #163)
#161 := (iff #35 #160)
#152 := (iff #34 #151)
#149 := (iff #33 #148)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#145 := (iff #32 #144)
#146 := [rewrite]: #145
#162 := [monotonicity #146 #153]: #161
#158 := (iff #29 #154)
#159 := [rewrite]: #158
#165 := [monotonicity #159 #162]: #164
#170 := [trans #165 #168]: #169
#138 := [asserted]: #36
#171 := [mp #138 #170]: #166
#174 := [and-elim #171]: #154
#173 := [and-elim #171]: #151
#172 := [and-elim #171]: #144
[th-lemma #172 #173 #174]: false
unsat
839ca15e4db302dc5cd29e9aa43868c766ec1b81 55 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#141 := -1::int
#155 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#156 := (+ #26 #155)
#157 := (<= #156 0::int)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#144 := (* -1::int #31)
#148 := (+ #26 #144)
#149 := (<= #148 0::int)
#152 := (not #149)
#145 := (+ #28 #144)
#143 := (>= #145 0::int)
#142 := (not #143)
#166 := (and #142 #152 #157)
#33 := (<= #26 #31)
#34 := (not #33)
#32 := (< #28 #31)
#35 := (and #32 #34)
#29 := (<= #26 #28)
#36 := (and #29 #35)
#169 := (iff #36 #166)
#160 := (and #142 #152)
#163 := (and #157 #160)
#167 := (iff #163 #166)
#168 := [rewrite]: #167
#164 := (iff #36 #163)
#161 := (iff #35 #160)
#153 := (iff #34 #152)
#150 := (iff #33 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#146 := (iff #32 #142)
#147 := [rewrite]: #146
#162 := [monotonicity #147 #154]: #161
#158 := (iff #29 #157)
#159 := [rewrite]: #158
#165 := [monotonicity #159 #162]: #164
#170 := [trans #165 #168]: #169
#138 := [asserted]: #36
#171 := [mp #138 #170]: #166
#174 := [and-elim #171]: #157
#172 := [and-elim #171]: #142
#173 := [and-elim #171]: #152
[th-lemma #173 #172 #174]: false
unsat
d7837998c869430b9e700142d2b377bead7796dc 26 0
#2 := false
#8 := 1::int
#9 := (- 1::int)
#10 := (= #9 #9)
#11 := (not #10)
#44 := (iff #11 false)
#1 := true
#39 := (not true)
#42 := (iff #39 false)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 true)
#29 := -1::int
#32 := (= -1::int -1::int)
#35 := (iff #32 true)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#30 := (= #9 -1::int)
#31 := [rewrite]: #30
#34 := [monotonicity #31 #31]: #33
#38 := [trans #34 #36]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#28 := [asserted]: #11
[mp #28 #45]: false
unsat
2fa07586f302aa9750784686f2cfa4df7ec4584e 61 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#141 := -1::int
#162 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#163 := (+ #26 #162)
#161 := (>= #163 0::int)
#160 := (not #161)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#144 := (* -1::int #31)
#150 := (+ #26 #144)
#149 := (>= #150 0::int)
#145 := (+ #28 #144)
#143 := (>= #145 0::int)
#142 := (not #143)
#172 := (and #142 #149 #160)
#33 := (< #26 #31)
#34 := (not #33)
#32 := (< #28 #31)
#35 := (and #32 #34)
#29 := (< #26 #28)
#36 := (and #29 #35)
#175 := (iff #36 #172)
#166 := (and #142 #149)
#169 := (and #160 #166)
#173 := (iff #169 #172)
#174 := [rewrite]: #173
#170 := (iff #36 #169)
#167 := (iff #35 #166)
#158 := (iff #34 #149)
#148 := (not #149)
#153 := (not #148)
#156 := (iff #153 #149)
#157 := [rewrite]: #156
#154 := (iff #34 #153)
#151 := (iff #33 #148)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#159 := [trans #155 #157]: #158
#146 := (iff #32 #142)
#147 := [rewrite]: #146
#168 := [monotonicity #147 #159]: #167
#164 := (iff #29 #160)
#165 := [rewrite]: #164
#171 := [monotonicity #165 #168]: #170
#176 := [trans #171 #174]: #175
#138 := [asserted]: #36
#177 := [mp #138 #176]: #172
#180 := [and-elim #177]: #160
#178 := [and-elim #177]: #142
#179 := [and-elim #177]: #149
[th-lemma #179 #178 #180]: false
unsat
70a72eb40efd415a7fc201441ac2d390324dc85f 26 0
#2 := false
#8 := 3::int
#9 := (- 3::int)
#10 := (= #9 #9)
#11 := (not #10)
#44 := (iff #11 false)
#1 := true
#39 := (not true)
#42 := (iff #39 false)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 true)
#29 := -3::int
#32 := (= -3::int -3::int)
#35 := (iff #32 true)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#30 := (= #9 -3::int)
#31 := [rewrite]: #30
#34 := [monotonicity #31 #31]: #33
#38 := [trans #34 #36]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#28 := [asserted]: #11
[mp #28 #45]: false
unsat
fe16712a1fa51f4a62675a12f177489494d4ff85 53 0
#2 := false
#13 := 0::int
decl f4 :: (-> S2 int)
decl f6 :: S2
#27 := f6
#28 := (f4 f6)
#140 := -1::int
#154 := (* -1::int #28)
decl f5 :: S2
#25 := f5
#26 := (f4 f5)
#155 := (+ #26 #154)
#153 := (>= #155 0::int)
#152 := (not #153)
decl f7 :: S2
#30 := f7
#31 := (f4 f7)
#143 := (* -1::int #31)
#147 := (+ #26 #143)
#148 := (<= #147 0::int)
#149 := (not #148)
#144 := (+ #28 #143)
#142 := (>= #144 0::int)
#141 := (not #142)
#164 := (and #141 #149 #152)
#33 := (< #31 #26)
#32 := (< #28 #31)
#34 := (and #32 #33)
#29 := (< #26 #28)
#35 := (and #29 #34)
#167 := (iff #35 #164)
#158 := (and #141 #149)
#161 := (and #152 #158)
#165 := (iff #161 #164)
#166 := [rewrite]: #165
#162 := (iff #35 #161)
#159 := (iff #34 #158)
#150 := (iff #33 #149)
#151 := [rewrite]: #150
#145 := (iff #32 #141)
#146 := [rewrite]: #145
#160 := [monotonicity #146 #151]: #159
#156 := (iff #29 #152)
#157 := [rewrite]: #156
#163 := [monotonicity #157 #160]: #162
#168 := [trans #163 #166]: #167
#137 := [asserted]: #35
#169 := [mp #137 #168]: #164
#172 := [and-elim #169]: #152
#170 := [and-elim #169]: #141
#171 := [and-elim #169]: #149
[th-lemma #171 #170 #172]: false
unsat
c4720018b6df523588840d966fa6b5f79e529106 58 0
#2 := false
decl f3 :: int
#8 := f3
#10 := 0::int
#12 := (< 0::int f3)
#9 := (- f3)
#11 := (< #9 0::int)
#13 := (iff #11 #12)
#14 := (not #13)
#76 := (iff #14 false)
#50 := (not #12)
#32 := -1::int
#33 := (* -1::int f3)
#36 := (< #33 0::int)
#51 := (iff #36 #50)
#74 := (iff #51 false)
#56 := (<= f3 0::int)
#57 := (not #56)
#69 := (iff #57 #56)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #51 #69)
#67 := (iff #50 #56)
#62 := (not #57)
#65 := (iff #62 #56)
#66 := [rewrite]: #65
#63 := (iff #50 #62)
#60 := (iff #12 #57)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#58 := (iff #36 #57)
#59 := [rewrite]: #58
#71 := [monotonicity #59 #68]: #70
#75 := [trans #71 #73]: #74
#54 := (iff #14 #51)
#42 := (iff #12 #36)
#47 := (not #42)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #14 #47)
#45 := (iff #13 #42)
#39 := (iff #36 #12)
#43 := (iff #39 #42)
#44 := [rewrite]: #43
#40 := (iff #13 #39)
#37 := (iff #11 #36)
#34 := (= #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#77 := [trans #55 #75]: #76
#31 := [asserted]: #14
[mp #31 #77]: false
unsat
c156df2cdcaafc0712bbd7f760cf7c1135b2a278 61 0
#2 := false
#8 := 0::int
decl f3 :: int
#9 := f3
#11 := (- f3)
#12 := (< #11 0::int)
#10 := (< 0::int f3)
#13 := (implies #10 #12)
#14 := (not #13)
#78 := (iff #14 false)
#32 := -1::int
#33 := (* -1::int f3)
#36 := (< #33 0::int)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#76 := (iff #48 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #48 #71)
#69 := (iff #43 true)
#51 := (<= f3 0::int)
#52 := (not #51)
#64 := (or #51 #52)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #43 #64)
#62 := (iff #36 #52)
#63 := [rewrite]: #62
#60 := (iff #42 #51)
#55 := (not #52)
#58 := (iff #55 #51)
#59 := [rewrite]: #58
#56 := (iff #42 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#66 := [monotonicity #61 #63]: #65
#70 := [trans #66 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#49 := (iff #14 #48)
#46 := (iff #13 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#79 := [trans #50 #77]: #78
#31 := [asserted]: #14
[mp #31 #79]: false
unsat
fc81f629d09c01783c65b3ee17baad49669d55bf 26 0
#2 := false
decl f3 :: int
#8 := f3
#9 := 0::int
#10 := (- f3 0::int)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
1c28009871674ce12da75bf1dced4812d4d59e07 61 0
#2 := false
decl f3 :: int
#8 := f3
#11 := (- f3)
#9 := 0::int
#12 := (< 0::int #11)
#10 := (< f3 0::int)
#13 := (implies #10 #12)
#14 := (not #13)
#78 := (iff #14 false)
#32 := -1::int
#33 := (* -1::int f3)
#36 := (< 0::int #33)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#76 := (iff #48 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #48 #71)
#69 := (iff #43 true)
#51 := (>= f3 0::int)
#52 := (not #51)
#64 := (or #51 #52)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #43 #64)
#62 := (iff #36 #52)
#63 := [rewrite]: #62
#60 := (iff #42 #51)
#55 := (not #52)
#58 := (iff #55 #51)
#59 := [rewrite]: #58
#56 := (iff #42 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#66 := [monotonicity #61 #63]: #65
#70 := [trans #66 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#49 := (iff #14 #48)
#46 := (iff #13 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#79 := [trans #50 #77]: #78
#31 := [asserted]: #14
[mp #31 #79]: false
unsat
aec51136d021a387f2d6872e725f19b898f18ef5 32 0
#2 := false
decl f3 :: int
#9 := f3
#11 := (- f3)
#8 := 0::int
#10 := (- 0::int f3)
#12 := (= #10 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#31 := -1::int
#32 := (* -1::int f3)
#37 := (= #32 #32)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (= #11 #32)
#36 := [rewrite]: #35
#33 := (= #10 #32)
#34 := [rewrite]: #33
#39 := [monotonicity #34 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#30 := [asserted]: #13
[mp #30 #50]: false
unsat
65a9f6762bf7c73e050776f2f97205392ade9eb8 26 0
#2 := false
#9 := 0::int
decl f3 :: int
#8 := f3
#10 := (* f3 0::int)
#11 := (= #10 0::int)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= 0::int 0::int)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
31fc2c351446233f2061fde4a4592b401c54f862 64 0
#2 := false
#12 := 0::int
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#11 := (- f3 f4)
#13 := (< #11 0::int)
#10 := (< f3 f4)
#14 := (implies #10 #13)
#15 := (not #14)
#80 := (iff #15 false)
#33 := -1::int
#34 := (* -1::int f4)
#35 := (+ f3 #34)
#38 := (< #35 0::int)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#78 := (iff #50 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #50 #73)
#71 := (iff #45 true)
#54 := (>= #35 0::int)
#53 := (not #54)
#66 := (or #54 #53)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #45 #66)
#64 := (iff #38 #53)
#65 := [rewrite]: #64
#62 := (iff #44 #54)
#57 := (not #53)
#60 := (iff #57 #54)
#61 := [rewrite]: #60
#58 := (iff #44 #57)
#55 := (iff #10 #53)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#36 := (= #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#32 := [asserted]: #15
[mp #32 #81]: false
unsat
592736b964503a2e2a8b3d310866adf35fdeb70d 26 0
#2 := false
#8 := 0::int
decl f3 :: int
#9 := f3
#10 := (* 0::int f3)
#11 := (= #10 0::int)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= 0::int 0::int)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
7e5077e88974e2fa3da11f2fc124b2fc85a4f520 44 0
#2 := false
decl f3 :: int
#8 := f3
decl f4 :: int
#9 := f4
#11 := (- f4 f3)
#12 := (- #11)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#60 := (iff #14 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#32 := -1::int
#33 := (* -1::int f4)
#34 := (+ f3 #33)
#48 := (= #34 #34)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (= #12 #34)
#37 := (* -1::int f3)
#38 := (+ #37 f4)
#41 := (- #38)
#44 := (= #41 #34)
#45 := [rewrite]: #44
#42 := (= #12 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#35 := (= #10 #34)
#36 := [rewrite]: #35
#50 := [monotonicity #36 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#31 := [asserted]: #14
[mp #31 #61]: false
unsat
89e44e496d1c9e19d85ee56ab3fb92079351f1b0 26 0
#2 := false
decl f3 :: int
#8 := f3
#9 := 1::int
#10 := (* f3 1::int)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
38200cf17f447eb7490b14a7927d61babf42be2c 26 0
#2 := false
decl f3 :: int
#9 := f3
#8 := 1::int
#10 := (* 1::int f3)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
891b65b932309e97c69155ee809ef85f6496b3c5 42 0
#2 := false
decl f3 :: int
#8 := f3
decl f4 :: int
#9 := f4
#11 := (- f4)
#12 := (+ #11 f3)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#58 := (iff #14 false)
#1 := true
#53 := (not true)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #14 #53)
#51 := (iff #13 true)
#32 := -1::int
#33 := (* -1::int f4)
#34 := (+ f3 #33)
#46 := (= #34 #34)
#49 := (iff #46 true)
#50 := [rewrite]: #49
#47 := (iff #13 #46)
#44 := (= #12 #34)
#39 := (+ #33 f3)
#42 := (= #39 #34)
#43 := [rewrite]: #42
#40 := (= #12 #39)
#37 := (= #11 #33)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#35 := (= #10 #34)
#36 := [rewrite]: #35
#48 := [monotonicity #36 #45]: #47
#52 := [trans #48 #50]: #51
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#31 := [asserted]: #14
[mp #31 #59]: false
unsat
f1f03cdf8e0332171bfb331e70236cd578ef1b1a 40 0
#2 := false
decl f3 :: int
#8 := f3
#12 := (- f3)
#9 := 1::int
#10 := (- 1::int)
#11 := (* f3 #10)
#13 := (= #11 #12)
#14 := (not #13)
#57 := (iff #14 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 true)
#32 := -1::int
#38 := (* -1::int f3)
#45 := (= #38 #38)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#43 := (= #12 #38)
#44 := [rewrite]: #43
#41 := (= #11 #38)
#35 := (* f3 -1::int)
#39 := (= #35 #38)
#40 := [rewrite]: #39
#36 := (= #11 #35)
#33 := (= #10 -1::int)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#42 := [trans #37 #40]: #41
#47 := [monotonicity #42 #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#31 := [asserted]: #14
[mp #31 #58]: false
unsat
e90209aecaafc9e5a8d65cc3bfe9923d664d1180 48 0
#2 := false
decl f5 :: int
#11 := f5
decl f4 :: int
#9 := f4
#13 := (+ f4 f5)
decl f3 :: int
#8 := f3
#14 := (- f3 #13)
#10 := (- f3 f4)
#12 := (- #10 f5)
#15 := (= #12 #14)
#16 := (not #15)
#63 := (iff #16 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #16 #58)
#56 := (iff #15 true)
#34 := -1::int
#42 := (* -1::int f5)
#35 := (* -1::int f4)
#43 := (+ #35 #42)
#44 := (+ f3 #43)
#51 := (= #44 #44)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #15 #51)
#49 := (= #14 #44)
#50 := [rewrite]: #49
#47 := (= #12 #44)
#36 := (+ f3 #35)
#39 := (- #36 f5)
#45 := (= #39 #44)
#46 := [rewrite]: #45
#40 := (= #12 #39)
#37 := (= #10 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#48 := [trans #41 #46]: #47
#53 := [monotonicity #48 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#33 := [asserted]: #16
[mp #33 #64]: false
unsat
dcb91b564372ef4df7bba10a66d7a6eecfdd1891 35 0
#2 := false
decl f3 :: int
#10 := f3
#12 := (- f3)
#8 := 1::int
#9 := (- 1::int)
#11 := (* #9 f3)
#13 := (= #11 #12)
#14 := (not #13)
#52 := (iff #14 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #14 #47)
#45 := (iff #13 true)
#32 := -1::int
#35 := (* -1::int f3)
#40 := (= #35 #35)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #13 #40)
#38 := (= #12 #35)
#39 := [rewrite]: #38
#36 := (= #11 #35)
#33 := (= #9 -1::int)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#42 := [monotonicity #37 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#31 := [asserted]: #14
[mp #31 #53]: false
unsat
dc9c4895f383c2bc2209a55e4f8478193dad358d 244 0
#2 := false
#11 := 0::int
decl f3 :: (-> int int int)
#38 := (f3 0::int 0::int)
#39 := (= #38 0::int)
#40 := (not #39)
#167 := [asserted]: #40
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#736 := (pattern #10)
#64 := -1::int
#68 := (* -1::int #9)
#65 := (* -1::int #8)
#71 := (div #65 #68)
#238 := (* -1::int #71)
#239 := (+ #10 #238)
#240 := (= #239 0::int)
#21 := (div #8 #9)
#235 := (* -1::int #21)
#236 := (+ #10 #235)
#237 := (= #236 0::int)
#90 := (<= #9 0::int)
#86 := (<= #8 0::int)
#193 := (or #86 #90)
#194 := (not #193)
#97 := (>= #8 0::int)
#185 := (or #90 #97)
#186 := (not #185)
#200 := (or #186 #194)
#241 := (ite #200 #237 #240)
#234 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#242 := (ite #14 #234 #241)
#737 := (forall (vars (?v0 int) (?v1 int)) (:pat #736) #242)
#245 := (forall (vars (?v0 int) (?v1 int)) #242)
#740 := (iff #245 #737)
#738 := (iff #242 #242)
#739 := [refl]: #738
#741 := [quant-intro #739]: #740
#205 := (ite #200 #21 #71)
#208 := (ite #14 0::int #205)
#211 := (= #10 #208)
#214 := (forall (vars (?v0 int) (?v1 int)) #211)
#246 := (iff #214 #245)
#243 := (iff #211 #242)
#244 := [rewrite]: #243
#247 := [quant-intro #244]: #246
#98 := (not #97)
#91 := (not #90)
#101 := (and #91 #98)
#87 := (not #86)
#94 := (and #87 #91)
#104 := (or #94 #101)
#107 := (ite #104 #21 #71)
#110 := (ite #14 0::int #107)
#113 := (= #10 #110)
#116 := (forall (vars (?v0 int) (?v1 int)) #113)
#215 := (iff #116 #214)
#212 := (iff #113 #211)
#209 := (= #110 #208)
#206 := (= #107 #205)
#203 := (iff #104 #200)
#197 := (or #194 #186)
#201 := (iff #197 #200)
#202 := [rewrite]: #201
#198 := (iff #104 #197)
#195 := (iff #101 #186)
#196 := [rewrite]: #195
#183 := (iff #94 #194)
#184 := [rewrite]: #183
#199 := [monotonicity #184 #196]: #198
#204 := [trans #199 #202]: #203
#207 := [monotonicity #204]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [quant-intro #213]: #215
#189 := (~ #116 #116)
#187 := (~ #113 #113)
#188 := [refl]: #187
#190 := [nnf-pos #188]: #189
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#119 := (iff #28 #116)
#58 := (and #16 #18)
#61 := (or #17 #58)
#74 := (ite #61 #21 #71)
#77 := (ite #14 0::int #74)
#80 := (= #10 #77)
#83 := (forall (vars (?v0 int) (?v1 int)) #80)
#117 := (iff #83 #116)
#114 := (iff #80 #113)
#111 := (= #77 #110)
#108 := (= #74 #107)
#105 := (iff #61 #104)
#102 := (iff #58 #101)
#99 := (iff #18 #98)
#100 := [rewrite]: #99
#92 := (iff #16 #91)
#93 := [rewrite]: #92
#103 := [monotonicity #93 #100]: #102
#95 := (iff #17 #94)
#88 := (iff #15 #87)
#89 := [rewrite]: #88
#96 := [monotonicity #89 #93]: #95
#106 := [monotonicity #96 #103]: #105
#109 := [monotonicity #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [quant-intro #115]: #117
#84 := (iff #28 #83)
#81 := (iff #27 #80)
#78 := (= #26 #77)
#75 := (= #25 #74)
#72 := (= #24 #71)
#69 := (= #23 #68)
#70 := [rewrite]: #69
#66 := (= #22 #65)
#67 := [rewrite]: #66
#73 := [monotonicity #67 #70]: #72
#62 := (iff #20 #61)
#59 := (iff #19 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#76 := [monotonicity #63 #73]: #75
#79 := [monotonicity #76]: #78
#82 := [monotonicity #79]: #81
#85 := [quant-intro #82]: #84
#120 := [trans #85 #118]: #119
#57 := [asserted]: #28
#121 := [mp #57 #120]: #116
#180 := [mp~ #121 #190]: #116
#217 := [mp #180 #216]: #214
#248 := [mp #217 #247]: #245
#742 := [mp #248 #741]: #737
#694 := (not #737)
#695 := (or #694 #39)
#322 := (* -1::int 0::int)
#407 := (div #322 #322)
#408 := (* -1::int #407)
#409 := (+ #38 #408)
#400 := (= #409 0::int)
#411 := (div 0::int 0::int)
#412 := (* -1::int #411)
#340 := (+ #38 #412)
#413 := (= #340 0::int)
#410 := (<= 0::int 0::int)
#414 := (or #410 #410)
#393 := (not #414)
#728 := (>= 0::int 0::int)
#730 := (or #410 #728)
#387 := (not #730)
#517 := (or #387 #393)
#724 := (ite #517 #413 #400)
#398 := (= 0::int 0::int)
#399 := (or #398 #398)
#731 := (ite #399 #39 #724)
#690 := (or #694 #731)
#537 := (iff #690 #695)
#539 := (iff #695 #695)
#681 := [rewrite]: #539
#688 := (iff #731 #39)
#1 := true
#698 := (ite true #39 #413)
#692 := (iff #698 #39)
#693 := [rewrite]: #692
#702 := (iff #731 #698)
#697 := (iff #724 #413)
#420 := (ite false #413 #413)
#700 := (iff #420 #413)
#415 := [rewrite]: #700
#421 := (iff #724 #420)
#418 := (iff #400 #413)
#704 := (= #409 #340)
#703 := (= #408 #412)
#428 := (= #407 #411)
#705 := (= #322 0::int)
#706 := [rewrite]: #705
#429 := [monotonicity #706 #706]: #428
#707 := [monotonicity #429]: #703
#708 := [monotonicity #707]: #704
#419 := [monotonicity #708]: #418
#435 := (iff #517 false)
#709 := (or false false)
#433 := (iff #709 false)
#434 := [rewrite]: #433
#710 := (iff #517 #709)
#720 := (iff #393 false)
#713 := (not true)
#716 := (iff #713 false)
#717 := [rewrite]: #716
#362 := (iff #393 #713)
#721 := (iff #414 true)
#734 := (or true true)
#725 := (iff #734 true)
#385 := [rewrite]: #725
#356 := (iff #414 #734)
#386 := (iff #410 true)
#727 := [rewrite]: #386
#719 := [monotonicity #727 #727]: #356
#361 := [trans #719 #385]: #721
#722 := [monotonicity #361]: #362
#723 := [trans #722 #717]: #720
#712 := (iff #387 false)
#714 := (iff #387 #713)
#376 := (iff #730 true)
#374 := (iff #730 #734)
#370 := (iff #728 true)
#711 := [rewrite]: #370
#375 := [monotonicity #727 #711]: #374
#377 := [trans #375 #385]: #376
#715 := [monotonicity #377]: #714
#718 := [trans #715 #717]: #712
#432 := [monotonicity #718 #723]: #710
#328 := [trans #432 #434]: #435
#699 := [monotonicity #328 #419]: #421
#701 := [trans #699 #415]: #697
#390 := (iff #399 true)
#729 := (iff #399 #734)
#732 := (iff #398 true)
#733 := [rewrite]: #732
#735 := [monotonicity #733 #733]: #729
#726 := [trans #735 #385]: #390
#691 := [monotonicity #726 #701]: #702
#689 := [trans #691 #693]: #688
#538 := [monotonicity #689]: #537
#682 := [trans #538 #681]: #537
#696 := [quant-inst]: #690
#683 := [mp #696 #682]: #695
[unit-resolution #683 #742 #167]: false
unsat
e58e9441ca33f62ea126f129a1302457840ee037 28 0
#2 := false
#8 := 3::int
decl f3 :: int
#9 := f3
#11 := (* f3 3::int)
#10 := (* 3::int f3)
#12 := (= #10 #11)
#13 := (not #12)
#45 := (iff #13 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #13 #40)
#38 := (iff #12 true)
#33 := (= #10 #10)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #12 #33)
#31 := (= #11 #10)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #13
[mp #30 #46]: false
unsat
1a424f78adbf3f5b91865b15057a1edb6fd9f0c7 268 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#38 := (f4 0::int 0::int)
#39 := (= #38 0::int)
#40 := (not #39)
#167 := [asserted]: #40
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#743 := (pattern #29)
#64 := -1::int
#68 := (* -1::int #9)
#65 := (* -1::int #8)
#123 := (mod #65 #68)
#254 := (+ #29 #123)
#255 := (= #254 0::int)
#30 := (mod #8 #9)
#251 := (* -1::int #30)
#252 := (+ #29 #251)
#253 := (= #252 0::int)
#90 := (<= #9 0::int)
#86 := (<= #8 0::int)
#193 := (or #86 #90)
#194 := (not #193)
#97 := (>= #8 0::int)
#185 := (or #90 #97)
#186 := (not #185)
#200 := (or #186 #194)
#256 := (ite #200 #253 #255)
#250 := (= #29 0::int)
#12 := (= #8 0::int)
#257 := (ite #12 #250 #256)
#249 := (= #8 #29)
#13 := (= #9 0::int)
#258 := (ite #13 #249 #257)
#744 := (forall (vars (?v0 int) (?v1 int)) (:pat #743) #258)
#261 := (forall (vars (?v0 int) (?v1 int)) #258)
#747 := (iff #261 #744)
#745 := (iff #258 #258)
#746 := [refl]: #745
#748 := [quant-intro #746]: #747
#129 := (* -1::int #123)
#218 := (ite #200 #30 #129)
#221 := (ite #12 0::int #218)
#224 := (ite #13 #8 #221)
#227 := (= #29 #224)
#230 := (forall (vars (?v0 int) (?v1 int)) #227)
#262 := (iff #230 #261)
#259 := (iff #227 #258)
#260 := [rewrite]: #259
#263 := [quant-intro #260]: #262
#98 := (not #97)
#91 := (not #90)
#101 := (and #91 #98)
#87 := (not #86)
#94 := (and #87 #91)
#104 := (or #94 #101)
#149 := (ite #104 #30 #129)
#152 := (ite #12 0::int #149)
#155 := (ite #13 #8 #152)
#158 := (= #29 #155)
#161 := (forall (vars (?v0 int) (?v1 int)) #158)
#231 := (iff #161 #230)
#228 := (iff #158 #227)
#225 := (= #155 #224)
#222 := (= #152 #221)
#219 := (= #149 #218)
#203 := (iff #104 #200)
#197 := (or #194 #186)
#201 := (iff #197 #200)
#202 := [rewrite]: #201
#198 := (iff #104 #197)
#195 := (iff #101 #186)
#196 := [rewrite]: #195
#183 := (iff #94 #194)
#184 := [rewrite]: #183
#199 := [monotonicity #184 #196]: #198
#204 := [trans #199 #202]: #203
#220 := [monotonicity #204]: #219
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#181 := (~ #161 #161)
#178 := (~ #158 #158)
#191 := [refl]: #178
#182 := [nnf-pos #191]: #181
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#164 := (iff #37 #161)
#58 := (and #16 #18)
#61 := (or #17 #58)
#134 := (ite #61 #30 #129)
#137 := (ite #12 0::int #134)
#140 := (ite #13 #8 #137)
#143 := (= #29 #140)
#146 := (forall (vars (?v0 int) (?v1 int)) #143)
#162 := (iff #146 #161)
#159 := (iff #143 #158)
#156 := (= #140 #155)
#153 := (= #137 #152)
#150 := (= #134 #149)
#105 := (iff #61 #104)
#102 := (iff #58 #101)
#99 := (iff #18 #98)
#100 := [rewrite]: #99
#92 := (iff #16 #91)
#93 := [rewrite]: #92
#103 := [monotonicity #93 #100]: #102
#95 := (iff #17 #94)
#88 := (iff #15 #87)
#89 := [rewrite]: #88
#96 := [monotonicity #89 #93]: #95
#106 := [monotonicity #96 #103]: #105
#151 := [monotonicity #106]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [quant-intro #160]: #162
#147 := (iff #37 #146)
#144 := (iff #36 #143)
#141 := (= #35 #140)
#138 := (= #34 #137)
#135 := (= #33 #134)
#132 := (= #32 #129)
#126 := (- #123)
#130 := (= #126 #129)
#131 := [rewrite]: #130
#127 := (= #32 #126)
#124 := (= #31 #123)
#69 := (= #23 #68)
#70 := [rewrite]: #69
#66 := (= #22 #65)
#67 := [rewrite]: #66
#125 := [monotonicity #67 #70]: #124
#128 := [monotonicity #125]: #127
#133 := [trans #128 #131]: #132
#62 := (iff #20 #61)
#59 := (iff #19 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#136 := [monotonicity #63 #133]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [quant-intro #145]: #147
#165 := [trans #148 #163]: #164
#122 := [asserted]: #37
#166 := [mp #122 #165]: #161
#192 := [mp~ #166 #182]: #161
#233 := [mp #192 #232]: #230
#264 := [mp #233 #263]: #261
#749 := [mp #264 #748]: #744
#690 := (not #744)
#696 := (or #690 #39)
#322 := (* -1::int 0::int)
#407 := (mod #322 #322)
#408 := (+ #38 #407)
#409 := (= #408 0::int)
#400 := (mod 0::int 0::int)
#411 := (* -1::int #400)
#412 := (+ #38 #411)
#340 := (= #412 0::int)
#413 := (<= 0::int 0::int)
#410 := (or #413 #413)
#414 := (not #410)
#393 := (>= 0::int 0::int)
#728 := (or #413 #393)
#730 := (not #728)
#387 := (or #730 #414)
#517 := (ite #387 #340 #409)
#724 := (= 0::int 0::int)
#398 := (ite #724 #39 #517)
#168 := (= 0::int #38)
#399 := (ite #724 #168 #398)
#537 := (or #690 #399)
#539 := (iff #537 #696)
#682 := (iff #696 #696)
#683 := [rewrite]: #682
#694 := (iff #399 #39)
#1 := true
#691 := (ite true #39 #39)
#688 := (iff #691 #39)
#689 := [rewrite]: #688
#692 := (iff #399 #691)
#698 := (iff #398 #39)
#328 := (+ #38 #400)
#428 := (= #328 0::int)
#699 := (ite true #39 #428)
#697 := (iff #699 #39)
#701 := [rewrite]: #697
#700 := (iff #398 #699)
#420 := (iff #517 #428)
#707 := (ite false #340 #428)
#418 := (iff #707 #428)
#419 := [rewrite]: #418
#704 := (iff #517 #707)
#429 := (iff #409 #428)
#705 := (= #408 #328)
#434 := (= #407 #400)
#432 := (= #322 0::int)
#433 := [rewrite]: #432
#435 := [monotonicity #433 #433]: #434
#706 := [monotonicity #435]: #705
#703 := [monotonicity #706]: #429
#709 := (iff #387 false)
#361 := (or false false)
#720 := (iff #361 false)
#723 := [rewrite]: #720
#362 := (iff #387 #361)
#719 := (iff #414 false)
#711 := (not true)
#376 := (iff #711 false)
#377 := [rewrite]: #376
#718 := (iff #414 #711)
#717 := (iff #410 true)
#725 := (or true true)
#726 := (iff #725 true)
#386 := [rewrite]: #726
#715 := (iff #410 #725)
#733 := (iff #413 true)
#734 := [rewrite]: #733
#716 := [monotonicity #734 #734]: #715
#712 := [trans #716 #386]: #717
#356 := [monotonicity #712]: #718
#721 := [trans #356 #377]: #719
#713 := (iff #730 false)
#374 := (iff #730 #711)
#727 := (iff #728 true)
#385 := (iff #728 #725)
#729 := (iff #393 true)
#735 := [rewrite]: #729
#390 := [monotonicity #734 #735]: #385
#370 := [trans #390 #386]: #727
#375 := [monotonicity #370]: #374
#714 := [trans #375 #377]: #713
#722 := [monotonicity #714 #721]: #362
#710 := [trans #722 #723]: #709
#708 := [monotonicity #710 #703]: #704
#421 := [trans #708 #419]: #420
#731 := (iff #724 true)
#732 := [rewrite]: #731
#415 := [monotonicity #732 #421]: #700
#702 := [trans #415 #701]: #698
#174 := (iff #168 #39)
#175 := [rewrite]: #174
#693 := [monotonicity #732 #175 #702]: #692
#695 := [trans #693 #689]: #694
#681 := [monotonicity #695]: #539
#684 := [trans #681 #683]: #539
#538 := [quant-inst]: #537
#678 := [mp #538 #684]: #696
[unit-resolution #678 #749 #167]: false
unsat
6b27a316bc3cb1671937528bbb2aa4c5f16dd00c 257 0
#2 := false
#11 := 0::int
decl f3 :: (-> int int int)
decl f5 :: int
#38 := f5
#39 := (f3 f5 0::int)
#40 := (= #39 0::int)
#41 := (not #40)
#168 := [asserted]: #41
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#737 := (pattern #10)
#65 := -1::int
#69 := (* -1::int #9)
#66 := (* -1::int #8)
#72 := (div #66 #69)
#239 := (* -1::int #72)
#240 := (+ #10 #239)
#241 := (= #240 0::int)
#21 := (div #8 #9)
#236 := (* -1::int #21)
#237 := (+ #10 #236)
#238 := (= #237 0::int)
#91 := (<= #9 0::int)
#87 := (<= #8 0::int)
#194 := (or #87 #91)
#195 := (not #194)
#98 := (>= #8 0::int)
#186 := (or #91 #98)
#187 := (not #186)
#201 := (or #187 #195)
#242 := (ite #201 #238 #241)
#235 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#243 := (ite #14 #235 #242)
#738 := (forall (vars (?v0 int) (?v1 int)) (:pat #737) #243)
#246 := (forall (vars (?v0 int) (?v1 int)) #243)
#741 := (iff #246 #738)
#739 := (iff #243 #243)
#740 := [refl]: #739
#742 := [quant-intro #740]: #741
#206 := (ite #201 #21 #72)
#209 := (ite #14 0::int #206)
#212 := (= #10 #209)
#215 := (forall (vars (?v0 int) (?v1 int)) #212)
#247 := (iff #215 #246)
#244 := (iff #212 #243)
#245 := [rewrite]: #244
#248 := [quant-intro #245]: #247
#99 := (not #98)
#92 := (not #91)
#102 := (and #92 #99)
#88 := (not #87)
#95 := (and #88 #92)
#105 := (or #95 #102)
#108 := (ite #105 #21 #72)
#111 := (ite #14 0::int #108)
#114 := (= #10 #111)
#117 := (forall (vars (?v0 int) (?v1 int)) #114)
#216 := (iff #117 #215)
#213 := (iff #114 #212)
#210 := (= #111 #209)
#207 := (= #108 #206)
#204 := (iff #105 #201)
#198 := (or #195 #187)
#202 := (iff #198 #201)
#203 := [rewrite]: #202
#199 := (iff #105 #198)
#196 := (iff #102 #187)
#197 := [rewrite]: #196
#184 := (iff #95 #195)
#185 := [rewrite]: #184
#200 := [monotonicity #185 #197]: #199
#205 := [trans #200 #203]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [quant-intro #214]: #216
#190 := (~ #117 #117)
#188 := (~ #114 #114)
#189 := [refl]: #188
#191 := [nnf-pos #189]: #190
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#120 := (iff #28 #117)
#59 := (and #16 #18)
#62 := (or #17 #59)
#75 := (ite #62 #21 #72)
#78 := (ite #14 0::int #75)
#81 := (= #10 #78)
#84 := (forall (vars (?v0 int) (?v1 int)) #81)
#118 := (iff #84 #117)
#115 := (iff #81 #114)
#112 := (= #78 #111)
#109 := (= #75 #108)
#106 := (iff #62 #105)
#103 := (iff #59 #102)
#100 := (iff #18 #99)
#101 := [rewrite]: #100
#93 := (iff #16 #92)
#94 := [rewrite]: #93
#104 := [monotonicity #94 #101]: #103
#96 := (iff #17 #95)
#89 := (iff #15 #88)
#90 := [rewrite]: #89
#97 := [monotonicity #90 #94]: #96
#107 := [monotonicity #97 #104]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#85 := (iff #28 #84)
#82 := (iff #27 #81)
#79 := (= #26 #78)
#76 := (= #25 #75)
#73 := (= #24 #72)
#70 := (= #23 #69)
#71 := [rewrite]: #70
#67 := (= #22 #66)
#68 := [rewrite]: #67
#74 := [monotonicity #68 #71]: #73
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#77 := [monotonicity #64 #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#86 := [quant-intro #83]: #85
#121 := [trans #86 #119]: #120
#58 := [asserted]: #28
#122 := [mp #58 #121]: #117
#181 := [mp~ #122 #191]: #117
#218 := [mp #181 #217]: #215
#249 := [mp #218 #248]: #246
#743 := [mp #249 #742]: #738
#679 := (not #738)
#680 := (or #679 #40)
#323 := (* -1::int 0::int)
#408 := (* -1::int f5)
#409 := (div #408 #323)
#410 := (* -1::int #409)
#401 := (+ #39 #410)
#412 := (= #401 0::int)
#413 := (div f5 0::int)
#341 := (* -1::int #413)
#414 := (+ #39 #341)
#411 := (= #414 0::int)
#415 := (<= 0::int 0::int)
#394 := (<= f5 0::int)
#729 := (or #394 #415)
#731 := (not #729)
#388 := (>= f5 0::int)
#518 := (or #415 #388)
#725 := (not #518)
#399 := (or #725 #731)
#400 := (ite #399 #411 #412)
#732 := (= 0::int 0::int)
#733 := (= f5 0::int)
#734 := (or #733 #732)
#735 := (ite #734 #40 #400)
#686 := (or #679 #735)
#681 := (iff #686 #680)
#517 := (iff #680 #680)
#519 := [rewrite]: #517
#684 := (iff #735 #40)
#420 := (div #408 0::int)
#700 := (* -1::int #420)
#698 := (+ #39 #700)
#703 := (= #698 0::int)
#1 := true
#538 := (ite true #40 #703)
#682 := (iff #538 #40)
#683 := [rewrite]: #682
#539 := (iff #735 #538)
#691 := (iff #400 #703)
#694 := (ite false #411 #703)
#695 := (iff #694 #703)
#696 := [rewrite]: #695
#689 := (iff #400 #694)
#692 := (iff #412 #703)
#702 := (= #401 #698)
#701 := (= #410 #700)
#421 := (= #409 #420)
#709 := (= #323 0::int)
#419 := [rewrite]: #709
#422 := [monotonicity #419]: #421
#416 := [monotonicity #422]: #701
#699 := [monotonicity #416]: #702
#693 := [monotonicity #699]: #692
#708 := (iff #399 false)
#706 := (or false false)
#430 := (iff #706 false)
#704 := [rewrite]: #430
#707 := (iff #399 #706)
#436 := (iff #731 false)
#718 := (not true)
#357 := (iff #718 false)
#720 := [rewrite]: #357
#434 := (iff #731 #718)
#711 := (iff #729 true)
#363 := (or #394 true)
#724 := (iff #363 true)
#710 := [rewrite]: #724
#723 := (iff #729 #363)
#712 := (iff #415 true)
#375 := [rewrite]: #712
#721 := [monotonicity #375]: #723
#433 := [trans #721 #710]: #711
#435 := [monotonicity #433]: #434
#329 := [trans #435 #720]: #436
#722 := (iff #725 false)
#713 := (iff #725 #718)
#716 := (iff #518 true)
#376 := (or true #388)
#714 := (iff #376 true)
#715 := [rewrite]: #714
#377 := (iff #518 #376)
#378 := [monotonicity #375]: #377
#717 := [trans #378 #715]: #716
#719 := [monotonicity #717]: #713
#362 := [trans #719 #720]: #722
#429 := [monotonicity #362 #329]: #707
#705 := [trans #429 #704]: #708
#690 := [monotonicity #705 #693]: #689
#697 := [trans #690 #696]: #691
#728 := (iff #734 true)
#726 := (or #733 true)
#727 := (iff #726 true)
#387 := [rewrite]: #727
#386 := (iff #734 #726)
#730 := (iff #732 true)
#736 := [rewrite]: #730
#391 := [monotonicity #736]: #386
#371 := [trans #391 #387]: #728
#540 := [monotonicity #371 #697]: #539
#685 := [trans #540 #683]: #684
#688 := [monotonicity #685]: #681
#520 := [trans #688 #519]: #681
#687 := [quant-inst]: #686
#673 := [mp #687 #520]: #680
[unit-resolution #673 #743 #168]: false
unsat
d05667c302799334d71c6767e44df657452bd738 276 0
#2 := false
decl f4 :: (-> int int int)
#11 := 0::int
decl f5 :: int
#38 := f5
#39 := (f4 f5 0::int)
#169 := (= f5 #39)
#172 := (not #169)
#40 := (= #39 f5)
#41 := (not #40)
#173 := (iff #41 #172)
#170 := (iff #40 #169)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#168 := [asserted]: #41
#177 := [mp #168 #174]: #172
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#741 := (pattern #29)
#65 := -1::int
#69 := (* -1::int #9)
#66 := (* -1::int #8)
#124 := (mod #66 #69)
#252 := (+ #29 #124)
#253 := (= #252 0::int)
#30 := (mod #8 #9)
#249 := (* -1::int #30)
#250 := (+ #29 #249)
#251 := (= #250 0::int)
#91 := (<= #9 0::int)
#87 := (<= #8 0::int)
#191 := (or #87 #91)
#192 := (not #191)
#98 := (>= #8 0::int)
#183 := (or #91 #98)
#184 := (not #183)
#198 := (or #184 #192)
#254 := (ite #198 #251 #253)
#248 := (= #29 0::int)
#12 := (= #8 0::int)
#255 := (ite #12 #248 #254)
#247 := (= #8 #29)
#13 := (= #9 0::int)
#256 := (ite #13 #247 #255)
#742 := (forall (vars (?v0 int) (?v1 int)) (:pat #741) #256)
#259 := (forall (vars (?v0 int) (?v1 int)) #256)
#745 := (iff #259 #742)
#743 := (iff #256 #256)
#744 := [refl]: #743
#746 := [quant-intro #744]: #745
#130 := (* -1::int #124)
#216 := (ite #198 #30 #130)
#219 := (ite #12 0::int #216)
#222 := (ite #13 #8 #219)
#225 := (= #29 #222)
#228 := (forall (vars (?v0 int) (?v1 int)) #225)
#260 := (iff #228 #259)
#257 := (iff #225 #256)
#258 := [rewrite]: #257
#261 := [quant-intro #258]: #260
#99 := (not #98)
#92 := (not #91)
#102 := (and #92 #99)
#88 := (not #87)
#95 := (and #88 #92)
#105 := (or #95 #102)
#150 := (ite #105 #30 #130)
#153 := (ite #12 0::int #150)
#156 := (ite #13 #8 #153)
#159 := (= #29 #156)
#162 := (forall (vars (?v0 int) (?v1 int)) #159)
#229 := (iff #162 #228)
#226 := (iff #159 #225)
#223 := (= #156 #222)
#220 := (= #153 #219)
#217 := (= #150 #216)
#201 := (iff #105 #198)
#195 := (or #192 #184)
#199 := (iff #195 #198)
#200 := [rewrite]: #199
#196 := (iff #105 #195)
#193 := (iff #102 #184)
#194 := [rewrite]: #193
#181 := (iff #95 #192)
#182 := [rewrite]: #181
#197 := [monotonicity #182 #194]: #196
#202 := [trans #197 #200]: #201
#218 := [monotonicity #202]: #217
#221 := [monotonicity #218]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [quant-intro #227]: #229
#179 := (~ #162 #162)
#175 := (~ #159 #159)
#189 := [refl]: #175
#180 := [nnf-pos #189]: #179
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#165 := (iff #37 #162)
#59 := (and #16 #18)
#62 := (or #17 #59)
#135 := (ite #62 #30 #130)
#138 := (ite #12 0::int #135)
#141 := (ite #13 #8 #138)
#144 := (= #29 #141)
#147 := (forall (vars (?v0 int) (?v1 int)) #144)
#163 := (iff #147 #162)
#160 := (iff #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#151 := (= #135 #150)
#106 := (iff #62 #105)
#103 := (iff #59 #102)
#100 := (iff #18 #99)
#101 := [rewrite]: #100
#93 := (iff #16 #92)
#94 := [rewrite]: #93
#104 := [monotonicity #94 #101]: #103
#96 := (iff #17 #95)
#89 := (iff #15 #88)
#90 := [rewrite]: #89
#97 := [monotonicity #90 #94]: #96
#107 := [monotonicity #97 #104]: #106
#152 := [monotonicity #107]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [quant-intro #161]: #163
#148 := (iff #37 #147)
#145 := (iff #36 #144)
#142 := (= #35 #141)
#139 := (= #34 #138)
#136 := (= #33 #135)
#133 := (= #32 #130)
#127 := (- #124)
#131 := (= #127 #130)
#132 := [rewrite]: #131
#128 := (= #32 #127)
#125 := (= #31 #124)
#70 := (= #23 #69)
#71 := [rewrite]: #70
#67 := (= #22 #66)
#68 := [rewrite]: #67
#126 := [monotonicity #68 #71]: #125
#129 := [monotonicity #126]: #128
#134 := [trans #129 #132]: #133
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#137 := [monotonicity #64 #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [quant-intro #146]: #148
#166 := [trans #149 #164]: #165
#123 := [asserted]: #37
#167 := [mp #123 #166]: #162
#190 := [mp~ #167 #180]: #162
#231 := [mp #190 #230]: #228
#262 := [mp #231 #261]: #259
#747 := [mp #262 #746]: #742
#535 := (not #742)
#536 := (or #535 #169)
#320 := (* -1::int 0::int)
#405 := (* -1::int f5)
#406 := (mod #405 #320)
#407 := (+ #39 #406)
#398 := (= #407 0::int)
#409 := (mod f5 0::int)
#410 := (* -1::int #409)
#338 := (+ #39 #410)
#411 := (= #338 0::int)
#408 := (<= 0::int 0::int)
#412 := (<= f5 0::int)
#391 := (or #412 #408)
#726 := (not #391)
#728 := (>= f5 0::int)
#385 := (or #408 #728)
#515 := (not #385)
#722 := (or #515 #726)
#396 := (ite #722 #411 #398)
#397 := (= #39 0::int)
#729 := (= f5 0::int)
#730 := (ite #729 #397 #396)
#731 := (= 0::int 0::int)
#732 := (ite #731 #169 #730)
#537 := (or #535 #732)
#680 := (iff #537 #536)
#682 := (iff #536 #536)
#676 := [rewrite]: #682
#688 := (iff #732 #169)
#426 := (mod #405 0::int)
#705 := (+ #39 #426)
#416 := (= #705 0::int)
#700 := (ite #729 #397 #416)
#1 := true
#691 := (ite true #169 #700)
#692 := (iff #691 #169)
#693 := [rewrite]: #692
#686 := (iff #732 #691)
#689 := (iff #730 #700)
#699 := (iff #396 #416)
#419 := (ite false #411 #416)
#413 := (iff #419 #416)
#695 := [rewrite]: #413
#697 := (iff #396 #419)
#417 := (iff #398 #416)
#702 := (= #407 #705)
#427 := (= #406 #426)
#703 := (= #320 0::int)
#704 := [rewrite]: #703
#701 := [monotonicity #704]: #427
#706 := [monotonicity #701]: #702
#418 := [monotonicity #706]: #417
#433 := (iff #722 false)
#707 := (or false false)
#431 := (iff #707 false)
#432 := [rewrite]: #431
#708 := (iff #722 #707)
#718 := (iff #726 false)
#373 := (not true)
#711 := (iff #373 false)
#712 := [rewrite]: #711
#360 := (iff #726 #373)
#719 := (iff #391 true)
#715 := (or #412 true)
#354 := (iff #715 true)
#717 := [rewrite]: #354
#710 := (iff #391 #715)
#723 := (iff #408 true)
#383 := [rewrite]: #723
#716 := [monotonicity #383]: #710
#359 := [trans #716 #717]: #719
#720 := [monotonicity #359]: #360
#721 := [trans #720 #712]: #718
#713 := (iff #515 false)
#374 := (iff #515 #373)
#709 := (iff #385 true)
#388 := (or true #728)
#725 := (iff #388 true)
#368 := [rewrite]: #725
#724 := (iff #385 #388)
#384 := [monotonicity #383]: #724
#372 := [trans #384 #368]: #709
#375 := [monotonicity #372]: #374
#714 := [trans #375 #712]: #713
#430 := [monotonicity #714 #721]: #708
#326 := [trans #430 #432]: #433
#698 := [monotonicity #326 #418]: #697
#696 := [trans #698 #695]: #699
#690 := [monotonicity #696]: #689
#727 := (iff #731 true)
#733 := [rewrite]: #727
#687 := [monotonicity #733 #690]: #686
#694 := [trans #687 #693]: #688
#681 := [monotonicity #694]: #680
#677 := [trans #681 #676]: #680
#679 := [quant-inst]: #537
#683 := [mp #679 #677]: #536
[unit-resolution #683 #747 #177]: false
unsat
ac9468ec7d34e56bdf0ee161b89fe3a4afadc438 281 0
#2 := false
#11 := 0::int
decl f3 :: (-> int int int)
#38 := 1::int
#39 := (f3 0::int 1::int)
#40 := (= #39 0::int)
#41 := (not #40)
#168 := [asserted]: #41
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#736 := (pattern #10)
#65 := -1::int
#69 := (* -1::int #9)
#66 := (* -1::int #8)
#72 := (div #66 #69)
#239 := (* -1::int #72)
#240 := (+ #10 #239)
#241 := (= #240 0::int)
#21 := (div #8 #9)
#236 := (* -1::int #21)
#237 := (+ #10 #236)
#238 := (= #237 0::int)
#91 := (<= #9 0::int)
#87 := (<= #8 0::int)
#194 := (or #87 #91)
#195 := (not #194)
#98 := (>= #8 0::int)
#186 := (or #91 #98)
#187 := (not #186)
#201 := (or #187 #195)
#242 := (ite #201 #238 #241)
#235 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#243 := (ite #14 #235 #242)
#737 := (forall (vars (?v0 int) (?v1 int)) (:pat #736) #243)
#246 := (forall (vars (?v0 int) (?v1 int)) #243)
#740 := (iff #246 #737)
#738 := (iff #243 #243)
#739 := [refl]: #738
#741 := [quant-intro #739]: #740
#206 := (ite #201 #21 #72)
#209 := (ite #14 0::int #206)
#212 := (= #10 #209)
#215 := (forall (vars (?v0 int) (?v1 int)) #212)
#247 := (iff #215 #246)
#244 := (iff #212 #243)
#245 := [rewrite]: #244
#248 := [quant-intro #245]: #247
#99 := (not #98)
#92 := (not #91)
#102 := (and #92 #99)
#88 := (not #87)
#95 := (and #88 #92)
#105 := (or #95 #102)
#108 := (ite #105 #21 #72)
#111 := (ite #14 0::int #108)
#114 := (= #10 #111)
#117 := (forall (vars (?v0 int) (?v1 int)) #114)
#216 := (iff #117 #215)
#213 := (iff #114 #212)
#210 := (= #111 #209)
#207 := (= #108 #206)
#204 := (iff #105 #201)
#198 := (or #195 #187)
#202 := (iff #198 #201)
#203 := [rewrite]: #202
#199 := (iff #105 #198)
#196 := (iff #102 #187)
#197 := [rewrite]: #196
#184 := (iff #95 #195)
#185 := [rewrite]: #184
#200 := [monotonicity #185 #197]: #199
#205 := [trans #200 #203]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [quant-intro #214]: #216
#190 := (~ #117 #117)
#188 := (~ #114 #114)
#189 := [refl]: #188
#191 := [nnf-pos #189]: #190
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#120 := (iff #28 #117)
#59 := (and #16 #18)
#62 := (or #17 #59)
#75 := (ite #62 #21 #72)
#78 := (ite #14 0::int #75)
#81 := (= #10 #78)
#84 := (forall (vars (?v0 int) (?v1 int)) #81)
#118 := (iff #84 #117)
#115 := (iff #81 #114)
#112 := (= #78 #111)
#109 := (= #75 #108)
#106 := (iff #62 #105)
#103 := (iff #59 #102)
#100 := (iff #18 #99)
#101 := [rewrite]: #100
#93 := (iff #16 #92)
#94 := [rewrite]: #93
#104 := [monotonicity #94 #101]: #103
#96 := (iff #17 #95)
#89 := (iff #15 #88)
#90 := [rewrite]: #89
#97 := [monotonicity #90 #94]: #96
#107 := [monotonicity #97 #104]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#85 := (iff #28 #84)
#82 := (iff #27 #81)
#79 := (= #26 #78)
#76 := (= #25 #75)
#73 := (= #24 #72)
#70 := (= #23 #69)
#71 := [rewrite]: #70
#67 := (= #22 #66)
#68 := [rewrite]: #67
#74 := [monotonicity #68 #71]: #73
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#77 := [monotonicity #64 #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#86 := [quant-intro #83]: #85
#121 := [trans #86 #119]: #120
#58 := [asserted]: #28
#122 := [mp #58 #121]: #117
#181 := [mp~ #122 #191]: #117
#218 := [mp #181 #217]: #215
#249 := [mp #218 #248]: #246
#742 := [mp #249 #741]: #737
#571 := (not #737)
#572 := (or #571 #40)
#323 := (* -1::int 1::int)
#407 := (* -1::int 0::int)
#408 := (div #407 #323)
#409 := (* -1::int #408)
#400 := (+ #39 #409)
#411 := (= #400 0::int)
#412 := (div 0::int 1::int)
#413 := (* -1::int #412)
#410 := (+ #39 #413)
#414 := (= #410 0::int)
#393 := (<= 1::int 0::int)
#728 := (<= 0::int 0::int)
#730 := (or #728 #393)
#387 := (not #730)
#517 := (>= 0::int 0::int)
#724 := (or #393 #517)
#398 := (not #724)
#399 := (or #398 #387)
#731 := (ite #399 #414 #411)
#732 := (= 1::int 0::int)
#733 := (= 0::int 0::int)
#734 := (or #733 #732)
#729 := (ite #734 #40 #731)
#565 := (or #571 #729)
#574 := (iff #565 #572)
#576 := (iff #572 #572)
#577 := [rewrite]: #576
#554 := (iff #729 #40)
#1 := true
#668 := (ite true #40 #40)
#666 := (iff #668 #40)
#669 := [rewrite]: #666
#570 := (iff #729 #668)
#561 := (iff #731 #40)
#676 := (ite false #40 #40)
#559 := (iff #676 #40)
#560 := [rewrite]: #559
#674 := (iff #731 #676)
#673 := (iff #411 #40)
#519 := (= #400 #39)
#691 := (+ #39 0::int)
#688 := (= #691 #39)
#689 := [rewrite]: #688
#516 := (= #400 #691)
#680 := (= #409 0::int)
#697 := (= #407 0::int)
#701 := [rewrite]: #697
#685 := (= #409 #407)
#678 := (= #408 0::int)
#539 := (div 0::int -1::int)
#683 := (= #539 0::int)
#684 := [rewrite]: #683
#681 := (= #408 #539)
#537 := (= #323 -1::int)
#538 := [rewrite]: #537
#682 := [monotonicity #701 #538]: #681
#679 := [trans #682 #684]: #678
#686 := [monotonicity #679]: #685
#687 := [trans #686 #701]: #680
#518 := [monotonicity #687]: #516
#672 := [trans #518 #689]: #519
#675 := [monotonicity #672]: #673
#690 := (iff #414 #40)
#694 := (= #410 #39)
#692 := (= #410 #691)
#698 := (= #413 0::int)
#700 := (= #413 #407)
#421 := (= #412 0::int)
#699 := [rewrite]: #421
#415 := [monotonicity #699]: #700
#702 := [trans #415 #701]: #698
#693 := [monotonicity #702]: #692
#695 := [trans #693 #689]: #694
#696 := [monotonicity #695]: #690
#419 := (iff #399 false)
#703 := (or false false)
#708 := (iff #703 false)
#418 := [rewrite]: #708
#707 := (iff #399 #703)
#428 := (iff #387 false)
#721 := (not true)
#722 := (iff #721 false)
#720 := [rewrite]: #722
#705 := (iff #387 #721)
#435 := (iff #730 true)
#726 := (or true false)
#370 := (iff #726 true)
#711 := [rewrite]: #370
#433 := (iff #730 #726)
#376 := (iff #393 false)
#377 := [rewrite]: #376
#710 := (iff #728 true)
#432 := [rewrite]: #710
#434 := [monotonicity #432 #377]: #433
#329 := [trans #434 #711]: #435
#706 := [monotonicity #329]: #705
#429 := [trans #706 #720]: #428
#723 := (iff #398 false)
#361 := (iff #398 #721)
#356 := (iff #724 true)
#715 := (or false true)
#712 := (iff #715 true)
#718 := [rewrite]: #712
#716 := (iff #724 #715)
#713 := (iff #517 true)
#714 := [rewrite]: #713
#717 := [monotonicity #377 #714]: #716
#719 := [trans #717 #718]: #356
#362 := [monotonicity #719]: #361
#709 := [trans #362 #720]: #723
#704 := [monotonicity #709 #429]: #707
#420 := [trans #704 #418]: #419
#677 := [monotonicity #420 #696 #675]: #674
#520 := [trans #677 #560]: #561
#374 := (iff #734 true)
#386 := (iff #734 #726)
#385 := (iff #732 false)
#390 := [rewrite]: #385
#735 := (iff #733 true)
#725 := [rewrite]: #735
#727 := [monotonicity #725 #390]: #386
#375 := [trans #727 #711]: #374
#665 := [monotonicity #375 #520]: #570
#569 := [trans #665 #669]: #554
#575 := [monotonicity #569]: #574
#670 := [trans #575 #577]: #574
#573 := [quant-inst]: #565
#667 := [mp #573 #670]: #572
[unit-resolution #667 #742 #168]: false
unsat
9c82ae76cec416fd404b909bc700a14311ef9064 281 0
#2 := false
#38 := 1::int
decl f3 :: (-> int int int)
#39 := (f3 1::int 1::int)
#40 := (= #39 1::int)
#41 := (not #40)
#168 := [asserted]: #41
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#736 := (pattern #10)
#11 := 0::int
#65 := -1::int
#69 := (* -1::int #9)
#66 := (* -1::int #8)
#72 := (div #66 #69)
#239 := (* -1::int #72)
#240 := (+ #10 #239)
#241 := (= #240 0::int)
#21 := (div #8 #9)
#236 := (* -1::int #21)
#237 := (+ #10 #236)
#238 := (= #237 0::int)
#91 := (<= #9 0::int)
#87 := (<= #8 0::int)
#194 := (or #87 #91)
#195 := (not #194)
#98 := (>= #8 0::int)
#186 := (or #91 #98)
#187 := (not #186)
#201 := (or #187 #195)
#242 := (ite #201 #238 #241)
#235 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#243 := (ite #14 #235 #242)
#737 := (forall (vars (?v0 int) (?v1 int)) (:pat #736) #243)
#246 := (forall (vars (?v0 int) (?v1 int)) #243)
#740 := (iff #246 #737)
#738 := (iff #243 #243)
#739 := [refl]: #738
#741 := [quant-intro #739]: #740
#206 := (ite #201 #21 #72)
#209 := (ite #14 0::int #206)
#212 := (= #10 #209)
#215 := (forall (vars (?v0 int) (?v1 int)) #212)
#247 := (iff #215 #246)
#244 := (iff #212 #243)
#245 := [rewrite]: #244
#248 := [quant-intro #245]: #247
#99 := (not #98)
#92 := (not #91)
#102 := (and #92 #99)
#88 := (not #87)
#95 := (and #88 #92)
#105 := (or #95 #102)
#108 := (ite #105 #21 #72)
#111 := (ite #14 0::int #108)
#114 := (= #10 #111)
#117 := (forall (vars (?v0 int) (?v1 int)) #114)
#216 := (iff #117 #215)
#213 := (iff #114 #212)
#210 := (= #111 #209)
#207 := (= #108 #206)
#204 := (iff #105 #201)
#198 := (or #195 #187)
#202 := (iff #198 #201)
#203 := [rewrite]: #202
#199 := (iff #105 #198)
#196 := (iff #102 #187)
#197 := [rewrite]: #196
#184 := (iff #95 #195)
#185 := [rewrite]: #184
#200 := [monotonicity #185 #197]: #199
#205 := [trans #200 #203]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [quant-intro #214]: #216
#190 := (~ #117 #117)
#188 := (~ #114 #114)
#189 := [refl]: #188
#191 := [nnf-pos #189]: #190
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#120 := (iff #28 #117)
#59 := (and #16 #18)
#62 := (or #17 #59)
#75 := (ite #62 #21 #72)
#78 := (ite #14 0::int #75)
#81 := (= #10 #78)
#84 := (forall (vars (?v0 int) (?v1 int)) #81)
#118 := (iff #84 #117)
#115 := (iff #81 #114)
#112 := (= #78 #111)
#109 := (= #75 #108)
#106 := (iff #62 #105)
#103 := (iff #59 #102)
#100 := (iff #18 #99)
#101 := [rewrite]: #100
#93 := (iff #16 #92)
#94 := [rewrite]: #93
#104 := [monotonicity #94 #101]: #103
#96 := (iff #17 #95)
#89 := (iff #15 #88)
#90 := [rewrite]: #89
#97 := [monotonicity #90 #94]: #96
#107 := [monotonicity #97 #104]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#85 := (iff #28 #84)
#82 := (iff #27 #81)
#79 := (= #26 #78)
#76 := (= #25 #75)
#73 := (= #24 #72)
#70 := (= #23 #69)
#71 := [rewrite]: #70
#67 := (= #22 #66)
#68 := [rewrite]: #67
#74 := [monotonicity #68 #71]: #73
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#77 := [monotonicity #64 #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#86 := [quant-intro #83]: #85
#121 := [trans #86 #119]: #120
#58 := [asserted]: #28
#122 := [mp #58 #121]: #117
#181 := [mp~ #122 #191]: #117
#218 := [mp #181 #217]: #215
#249 := [mp #218 #248]: #246
#742 := [mp #249 #741]: #737
#571 := (not #737)
#572 := (or #571 #40)
#323 := (* -1::int 1::int)
#407 := (div #323 #323)
#408 := (* -1::int #407)
#409 := (+ #39 #408)
#400 := (= #409 0::int)
#411 := (div 1::int 1::int)
#412 := (* -1::int #411)
#413 := (+ #39 #412)
#410 := (= #413 0::int)
#414 := (<= 1::int 0::int)
#393 := (or #414 #414)
#728 := (not #393)
#730 := (>= 1::int 0::int)
#387 := (or #414 #730)
#517 := (not #387)
#724 := (or #517 #728)
#398 := (ite #724 #410 #400)
#399 := (= #39 0::int)
#731 := (= 1::int 0::int)
#732 := (or #731 #731)
#733 := (ite #732 #399 #398)
#565 := (or #571 #733)
#574 := (iff #565 #572)
#576 := (iff #572 #572)
#577 := [rewrite]: #576
#554 := (iff #733 #40)
#668 := (ite false #399 #40)
#666 := (iff #668 #40)
#669 := [rewrite]: #666
#570 := (iff #733 #668)
#561 := (iff #398 #40)
#1 := true
#676 := (ite true #40 #40)
#559 := (iff #676 #40)
#560 := [rewrite]: #559
#674 := (iff #398 #676)
#673 := (iff #400 #40)
#701 := (+ -1::int #39)
#693 := (= #701 0::int)
#694 := (iff #693 #40)
#695 := [rewrite]: #694
#519 := (iff #400 #693)
#516 := (= #409 #701)
#700 := (+ #39 -1::int)
#698 := (= #700 #701)
#702 := [rewrite]: #698
#680 := (= #409 #700)
#685 := (= #408 -1::int)
#419 := (= #323 -1::int)
#420 := [rewrite]: #419
#678 := (= #408 #323)
#683 := (= #407 1::int)
#537 := (div -1::int -1::int)
#681 := (= #537 1::int)
#682 := [rewrite]: #681
#538 := (= #407 #537)
#539 := [monotonicity #420 #420]: #538
#684 := [trans #539 #682]: #683
#679 := [monotonicity #684]: #678
#686 := [trans #679 #420]: #685
#687 := [monotonicity #686]: #680
#518 := [trans #687 #702]: #516
#672 := [monotonicity #518]: #519
#675 := [trans #672 #695]: #673
#690 := (iff #410 #40)
#688 := (iff #410 #693)
#691 := (= #413 #701)
#415 := (= #413 #700)
#421 := (= #412 -1::int)
#708 := (= #412 #323)
#707 := (= #411 1::int)
#704 := [rewrite]: #707
#418 := [monotonicity #704]: #708
#699 := [trans #418 #420]: #421
#697 := [monotonicity #699]: #415
#692 := [trans #697 #702]: #691
#689 := [monotonicity #692]: #688
#696 := [trans #689 #695]: #690
#429 := (iff #724 true)
#376 := (or false true)
#714 := (iff #376 true)
#715 := [rewrite]: #714
#706 := (iff #724 #376)
#329 := (iff #728 true)
#710 := (not false)
#434 := (iff #710 true)
#435 := [rewrite]: #434
#432 := (iff #728 #710)
#723 := (iff #393 false)
#735 := (or false false)
#390 := (iff #735 false)
#726 := [rewrite]: #390
#722 := (iff #393 #735)
#370 := (iff #414 false)
#711 := [rewrite]: #370
#720 := [monotonicity #711 #711]: #722
#709 := [trans #720 #726]: #723
#433 := [monotonicity #709]: #432
#705 := [trans #433 #435]: #329
#361 := (iff #517 false)
#712 := (not true)
#719 := (iff #712 false)
#721 := [rewrite]: #719
#718 := (iff #517 #712)
#716 := (iff #387 true)
#377 := (iff #387 #376)
#374 := (iff #730 true)
#375 := [rewrite]: #374
#713 := [monotonicity #711 #375]: #377
#717 := [trans #713 #715]: #716
#356 := [monotonicity #717]: #718
#362 := [trans #356 #721]: #361
#428 := [monotonicity #362 #705]: #706
#703 := [trans #428 #715]: #429
#677 := [monotonicity #703 #696 #675]: #674
#520 := [trans #677 #560]: #561
#386 := (iff #732 false)
#725 := (iff #732 #735)
#734 := (iff #731 false)
#729 := [rewrite]: #734
#385 := [monotonicity #729 #729]: #725
#727 := [trans #385 #726]: #386
#665 := [monotonicity #727 #520]: #570
#569 := [trans #665 #669]: #554
#575 := [monotonicity #569]: #574
#670 := [trans #575 #577]: #574
#573 := [quant-inst]: #565
#667 := [mp #573 #670]: #572
[unit-resolution #667 #742 #168]: false
unsat
07a66f14187da887bd1f0f4bb16d6c9a7023aeaf 298 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#38 := 1::int
#39 := (f4 0::int 1::int)
#40 := (= #39 0::int)
#41 := (not #40)
#168 := [asserted]: #41
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#743 := (pattern #29)
#65 := -1::int
#69 := (* -1::int #9)
#66 := (* -1::int #8)
#124 := (mod #66 #69)
#255 := (+ #29 #124)
#256 := (= #255 0::int)
#30 := (mod #8 #9)
#252 := (* -1::int #30)
#253 := (+ #29 #252)
#254 := (= #253 0::int)
#91 := (<= #9 0::int)
#87 := (<= #8 0::int)
#194 := (or #87 #91)
#195 := (not #194)
#98 := (>= #8 0::int)
#186 := (or #91 #98)
#187 := (not #186)
#201 := (or #187 #195)
#257 := (ite #201 #254 #256)
#251 := (= #29 0::int)
#12 := (= #8 0::int)
#258 := (ite #12 #251 #257)
#250 := (= #8 #29)
#13 := (= #9 0::int)
#259 := (ite #13 #250 #258)
#744 := (forall (vars (?v0 int) (?v1 int)) (:pat #743) #259)
#262 := (forall (vars (?v0 int) (?v1 int)) #259)
#747 := (iff #262 #744)
#745 := (iff #259 #259)
#746 := [refl]: #745
#748 := [quant-intro #746]: #747
#130 := (* -1::int #124)
#219 := (ite #201 #30 #130)
#222 := (ite #12 0::int #219)
#225 := (ite #13 #8 #222)
#228 := (= #29 #225)
#231 := (forall (vars (?v0 int) (?v1 int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#99 := (not #98)
#92 := (not #91)
#102 := (and #92 #99)
#88 := (not #87)
#95 := (and #88 #92)
#105 := (or #95 #102)
#150 := (ite #105 #30 #130)
#153 := (ite #12 0::int #150)
#156 := (ite #13 #8 #153)
#159 := (= #29 #156)
#162 := (forall (vars (?v0 int) (?v1 int)) #159)
#232 := (iff #162 #231)
#229 := (iff #159 #228)
#226 := (= #156 #225)
#223 := (= #153 #222)
#220 := (= #150 #219)
#204 := (iff #105 #201)
#198 := (or #195 #187)
#202 := (iff #198 #201)
#203 := [rewrite]: #202
#199 := (iff #105 #198)
#196 := (iff #102 #187)
#197 := [rewrite]: #196
#184 := (iff #95 #195)
#185 := [rewrite]: #184
#200 := [monotonicity #185 #197]: #199
#205 := [trans #200 #203]: #204
#221 := [monotonicity #205]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#182 := (~ #162 #162)
#179 := (~ #159 #159)
#192 := [refl]: #179
#183 := [nnf-pos #192]: #182
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#165 := (iff #37 #162)
#59 := (and #16 #18)
#62 := (or #17 #59)
#135 := (ite #62 #30 #130)
#138 := (ite #12 0::int #135)
#141 := (ite #13 #8 #138)
#144 := (= #29 #141)
#147 := (forall (vars (?v0 int) (?v1 int)) #144)
#163 := (iff #147 #162)
#160 := (iff #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#151 := (= #135 #150)
#106 := (iff #62 #105)
#103 := (iff #59 #102)
#100 := (iff #18 #99)
#101 := [rewrite]: #100
#93 := (iff #16 #92)
#94 := [rewrite]: #93
#104 := [monotonicity #94 #101]: #103
#96 := (iff #17 #95)
#89 := (iff #15 #88)
#90 := [rewrite]: #89
#97 := [monotonicity #90 #94]: #96
#107 := [monotonicity #97 #104]: #106
#152 := [monotonicity #107]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [quant-intro #161]: #163
#148 := (iff #37 #147)
#145 := (iff #36 #144)
#142 := (= #35 #141)
#139 := (= #34 #138)
#136 := (= #33 #135)
#133 := (= #32 #130)
#127 := (- #124)
#131 := (= #127 #130)
#132 := [rewrite]: #131
#128 := (= #32 #127)
#125 := (= #31 #124)
#70 := (= #23 #69)
#71 := [rewrite]: #70
#67 := (= #22 #66)
#68 := [rewrite]: #67
#126 := [monotonicity #68 #71]: #125
#129 := [monotonicity #126]: #128
#134 := [trans #129 #132]: #133
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#137 := [monotonicity #64 #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [quant-intro #146]: #148
#166 := [trans #149 #164]: #165
#123 := [asserted]: #37
#167 := [mp #123 #166]: #162
#193 := [mp~ #167 #183]: #162
#234 := [mp #193 #233]: #231
#265 := [mp #234 #264]: #262
#749 := [mp #265 #748]: #744
#665 := (not #744)
#666 := (or #665 #40)
#323 := (* -1::int 1::int)
#407 := (* -1::int 0::int)
#408 := (mod #407 #323)
#409 := (+ #39 #408)
#400 := (= #409 0::int)
#411 := (mod 0::int 1::int)
#412 := (* -1::int #411)
#413 := (+ #39 #412)
#410 := (= #413 0::int)
#414 := (<= 1::int 0::int)
#393 := (<= 0::int 0::int)
#728 := (or #393 #414)
#730 := (not #728)
#387 := (>= 0::int 0::int)
#517 := (or #414 #387)
#724 := (not #517)
#398 := (or #724 #730)
#399 := (ite #398 #410 #400)
#731 := (= 0::int 0::int)
#732 := (ite #731 #40 #399)
#169 := (= 0::int #39)
#733 := (= 1::int 0::int)
#734 := (ite #733 #169 #732)
#669 := (or #665 #734)
#569 := (iff #669 #666)
#572 := (iff #666 #666)
#565 := [rewrite]: #572
#668 := (iff #734 #40)
#686 := (ite false #40 #40)
#516 := (iff #686 #40)
#518 := [rewrite]: #516
#561 := (iff #734 #686)
#559 := (iff #732 #40)
#1 := true
#673 := (ite true #40 #40)
#674 := (iff #673 #40)
#677 := [rewrite]: #674
#675 := (iff #732 #673)
#519 := (iff #399 #40)
#680 := (iff #399 #686)
#679 := (iff #400 #40)
#684 := (= #409 #39)
#415 := (+ #39 0::int)
#698 := (= #415 #39)
#702 := [rewrite]: #698
#682 := (= #409 #415)
#539 := (= #408 0::int)
#695 := (mod 0::int -1::int)
#537 := (= #695 0::int)
#538 := [rewrite]: #537
#690 := (= #408 #695)
#689 := (= #323 -1::int)
#694 := [rewrite]: #689
#420 := (= #407 0::int)
#421 := [rewrite]: #420
#696 := [monotonicity #421 #694]: #690
#681 := [trans #696 #538]: #539
#683 := [monotonicity #681]: #682
#678 := [trans #683 #702]: #684
#685 := [monotonicity #678]: #679
#693 := (iff #410 #40)
#691 := (= #413 #39)
#697 := (= #413 #415)
#699 := (= #412 0::int)
#418 := (= #412 #407)
#704 := (= #411 0::int)
#708 := [rewrite]: #704
#419 := [monotonicity #708]: #418
#700 := [trans #419 #421]: #699
#701 := [monotonicity #700]: #697
#692 := [trans #701 #702]: #691
#688 := [monotonicity #692]: #693
#703 := (iff #398 false)
#329 := (or false false)
#428 := (iff #329 false)
#429 := [rewrite]: #428
#705 := (iff #398 #329)
#434 := (iff #730 false)
#714 := (not true)
#717 := (iff #714 false)
#712 := [rewrite]: #717
#432 := (iff #730 #714)
#709 := (iff #728 true)
#361 := (or true false)
#720 := (iff #361 true)
#723 := [rewrite]: #720
#362 := (iff #728 #361)
#390 := (iff #414 false)
#726 := [rewrite]: #390
#719 := (iff #393 true)
#721 := [rewrite]: #719
#722 := [monotonicity #721 #726]: #362
#710 := [trans #722 #723]: #709
#433 := [monotonicity #710]: #432
#435 := [trans #433 #712]: #434
#718 := (iff #724 false)
#715 := (iff #724 #714)
#377 := (iff #517 true)
#370 := (or false true)
#375 := (iff #370 true)
#376 := [rewrite]: #375
#711 := (iff #517 #370)
#386 := (iff #387 true)
#727 := [rewrite]: #386
#374 := [monotonicity #726 #727]: #711
#713 := [trans #374 #376]: #377
#716 := [monotonicity #713]: #715
#356 := [trans #716 #712]: #718
#706 := [monotonicity #356 #435]: #705
#707 := [trans #706 #429]: #703
#687 := [monotonicity #707 #688 #685]: #680
#672 := [trans #687 #518]: #519
#725 := (iff #731 true)
#385 := [rewrite]: #725
#676 := [monotonicity #385 #672]: #675
#560 := [trans #676 #677]: #559
#175 := (iff #169 #40)
#176 := [rewrite]: #175
#729 := (iff #733 false)
#735 := [rewrite]: #729
#520 := [monotonicity #735 #176 #560]: #561
#570 := [trans #520 #518]: #668
#571 := [monotonicity #570]: #569
#573 := [trans #571 #565]: #569
#554 := [quant-inst]: #669
#574 := [mp #554 #573]: #666
[unit-resolution #574 #749 #168]: false
unsat
892e25c8bdf423f86a8231d77f83b5c173fd91c0 292 0
#2 := false
#38 := 3::int
decl f3 :: (-> int int int)
#39 := 1::int
#40 := (f3 3::int 1::int)
#41 := (= #40 3::int)
#42 := (not #41)
#169 := [asserted]: #42
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#737 := (pattern #10)
#11 := 0::int
#66 := -1::int
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#73 := (div #67 #70)
#240 := (* -1::int #73)
#241 := (+ #10 #240)
#242 := (= #241 0::int)
#21 := (div #8 #9)
#237 := (* -1::int #21)
#238 := (+ #10 #237)
#239 := (= #238 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#195 := (or #88 #92)
#196 := (not #195)
#99 := (>= #8 0::int)
#187 := (or #92 #99)
#188 := (not #187)
#202 := (or #188 #196)
#243 := (ite #202 #239 #242)
#236 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#244 := (ite #14 #236 #243)
#738 := (forall (vars (?v0 int) (?v1 int)) (:pat #737) #244)
#247 := (forall (vars (?v0 int) (?v1 int)) #244)
#741 := (iff #247 #738)
#739 := (iff #244 #244)
#740 := [refl]: #739
#742 := [quant-intro #740]: #741
#207 := (ite #202 #21 #73)
#210 := (ite #14 0::int #207)
#213 := (= #10 #210)
#216 := (forall (vars (?v0 int) (?v1 int)) #213)
#248 := (iff #216 #247)
#245 := (iff #213 #244)
#246 := [rewrite]: #245
#249 := [quant-intro #246]: #248
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#109 := (ite #106 #21 #73)
#112 := (ite #14 0::int #109)
#115 := (= #10 #112)
#118 := (forall (vars (?v0 int) (?v1 int)) #115)
#217 := (iff #118 #216)
#214 := (iff #115 #213)
#211 := (= #112 #210)
#208 := (= #109 #207)
#205 := (iff #106 #202)
#199 := (or #196 #188)
#203 := (iff #199 #202)
#204 := [rewrite]: #203
#200 := (iff #106 #199)
#197 := (iff #103 #188)
#198 := [rewrite]: #197
#185 := (iff #96 #196)
#186 := [rewrite]: #185
#201 := [monotonicity #186 #198]: #200
#206 := [trans #201 #204]: #205
#209 := [monotonicity #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [quant-intro #215]: #217
#191 := (~ #118 #118)
#189 := (~ #115 #115)
#190 := [refl]: #189
#192 := [nnf-pos #190]: #191
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#121 := (iff #28 #118)
#60 := (and #16 #18)
#63 := (or #17 #60)
#76 := (ite #63 #21 #73)
#79 := (ite #14 0::int #76)
#82 := (= #10 #79)
#85 := (forall (vars (?v0 int) (?v1 int)) #82)
#119 := (iff #85 #118)
#116 := (iff #82 #115)
#113 := (= #79 #112)
#110 := (= #76 #109)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [quant-intro #117]: #119
#86 := (iff #28 #85)
#83 := (iff #27 #82)
#80 := (= #26 #79)
#77 := (= #25 #76)
#74 := (= #24 #73)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#78 := [monotonicity #65 #75]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#87 := [quant-intro #84]: #86
#122 := [trans #87 #120]: #121
#59 := [asserted]: #28
#123 := [mp #59 #122]: #118
#182 := [mp~ #123 #192]: #118
#219 := [mp #182 #218]: #216
#250 := [mp #219 #249]: #247
#743 := [mp #250 #742]: #738
#672 := (not #738)
#659 := (or #672 #41)
#324 := (* -1::int 1::int)
#408 := (* -1::int 3::int)
#409 := (div #408 #324)
#410 := (* -1::int #409)
#401 := (+ #40 #410)
#412 := (= #401 0::int)
#413 := (div 3::int 1::int)
#414 := (* -1::int #413)
#411 := (+ #40 #414)
#415 := (= #411 0::int)
#394 := (<= 1::int 0::int)
#729 := (<= 3::int 0::int)
#731 := (or #729 #394)
#388 := (not #731)
#518 := (>= 3::int 0::int)
#725 := (or #394 #518)
#399 := (not #725)
#400 := (or #399 #388)
#732 := (ite #400 #415 #412)
#733 := (= #40 0::int)
#734 := (= 1::int 0::int)
#735 := (= 3::int 0::int)
#730 := (or #735 #734)
#736 := (ite #730 #733 #732)
#661 := (or #672 #736)
#650 := (iff #661 #659)
#662 := (iff #659 #659)
#663 := [rewrite]: #662
#671 := (iff #736 #41)
#574 := (ite false #733 #41)
#577 := (iff #574 #41)
#578 := [rewrite]: #577
#575 := (iff #736 #574)
#573 := (iff #732 #41)
#1 := true
#667 := (ite true #41 #41)
#570 := (iff #667 #41)
#572 := [rewrite]: #570
#670 := (iff #732 #667)
#571 := (iff #412 #41)
#702 := -3::int
#695 := (+ -3::int #40)
#539 := (= #695 0::int)
#683 := (iff #539 #41)
#684 := [rewrite]: #683
#521 := (iff #412 #539)
#561 := (= #401 #695)
#694 := (+ #40 -3::int)
#696 := (= #694 #695)
#691 := [rewrite]: #696
#678 := (= #401 #694)
#677 := (= #410 -3::int)
#699 := (= #408 -3::int)
#703 := [rewrite]: #699
#674 := (= #410 #408)
#520 := (= #409 3::int)
#687 := (div -3::int -1::int)
#517 := (= #687 3::int)
#519 := [rewrite]: #517
#681 := (= #409 #687)
#680 := (= #324 -1::int)
#686 := [rewrite]: #680
#688 := [monotonicity #703 #686]: #681
#673 := [trans #688 #519]: #520
#676 := [monotonicity #673]: #674
#675 := [trans #676 #703]: #677
#560 := [monotonicity #675]: #678
#562 := [trans #560 #691]: #561
#669 := [monotonicity #562]: #521
#666 := [trans #669 #684]: #571
#685 := (iff #415 #41)
#540 := (iff #415 #539)
#697 := (= #411 #695)
#689 := (= #411 #694)
#692 := (= #414 -3::int)
#416 := (= #414 #408)
#700 := (= #413 3::int)
#701 := [rewrite]: #700
#698 := [monotonicity #701]: #416
#693 := [trans #698 #703]: #692
#690 := [monotonicity #693]: #689
#538 := [trans #690 #691]: #697
#682 := [monotonicity #538]: #540
#679 := [trans #682 #684]: #685
#421 := (iff #400 true)
#717 := (or false true)
#719 := (iff #717 true)
#357 := [rewrite]: #719
#419 := (iff #400 #717)
#705 := (iff #388 true)
#707 := (not false)
#704 := (iff #707 true)
#708 := [rewrite]: #704
#429 := (iff #388 #707)
#330 := (iff #731 false)
#387 := (or false false)
#712 := (iff #387 false)
#375 := [rewrite]: #712
#435 := (iff #731 #387)
#378 := (iff #394 false)
#714 := [rewrite]: #378
#433 := (iff #729 false)
#434 := [rewrite]: #433
#436 := [monotonicity #434 #714]: #435
#706 := [trans #436 #375]: #330
#430 := [monotonicity #706]: #429
#709 := [trans #430 #708]: #705
#710 := (iff #399 false)
#362 := (not true)
#721 := (iff #362 false)
#724 := [rewrite]: #721
#363 := (iff #399 #362)
#720 := (iff #725 true)
#718 := (iff #725 #717)
#715 := (iff #518 true)
#716 := [rewrite]: #715
#713 := [monotonicity #714 #716]: #718
#722 := [trans #713 #357]: #720
#723 := [monotonicity #722]: #363
#711 := [trans #723 #724]: #710
#420 := [monotonicity #711 #709]: #419
#422 := [trans #420 #357]: #421
#555 := [monotonicity #422 #679 #666]: #670
#566 := [trans #555 #572]: #573
#376 := (iff #730 false)
#728 := (iff #730 #387)
#391 := (iff #734 false)
#727 := [rewrite]: #391
#726 := (iff #735 false)
#386 := [rewrite]: #726
#371 := [monotonicity #386 #727]: #728
#377 := [trans #371 #375]: #376
#576 := [monotonicity #377 #566]: #575
#668 := [trans #576 #578]: #671
#652 := [monotonicity #668]: #650
#664 := [trans #652 #663]: #650
#653 := [quant-inst]: #661
#660 := [mp #653 #664]: #659
[unit-resolution #660 #743 #169]: false
unsat
ed1abab981b05d680a1c92a497bf3305ff9e1f16 296 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#38 := 1::int
#39 := (f4 1::int 1::int)
#40 := (= #39 0::int)
#41 := (not #40)
#168 := [asserted]: #41
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#743 := (pattern #29)
#65 := -1::int
#69 := (* -1::int #9)
#66 := (* -1::int #8)
#124 := (mod #66 #69)
#255 := (+ #29 #124)
#256 := (= #255 0::int)
#30 := (mod #8 #9)
#252 := (* -1::int #30)
#253 := (+ #29 #252)
#254 := (= #253 0::int)
#91 := (<= #9 0::int)
#87 := (<= #8 0::int)
#194 := (or #87 #91)
#195 := (not #194)
#98 := (>= #8 0::int)
#186 := (or #91 #98)
#187 := (not #186)
#201 := (or #187 #195)
#257 := (ite #201 #254 #256)
#251 := (= #29 0::int)
#12 := (= #8 0::int)
#258 := (ite #12 #251 #257)
#250 := (= #8 #29)
#13 := (= #9 0::int)
#259 := (ite #13 #250 #258)
#744 := (forall (vars (?v0 int) (?v1 int)) (:pat #743) #259)
#262 := (forall (vars (?v0 int) (?v1 int)) #259)
#747 := (iff #262 #744)
#745 := (iff #259 #259)
#746 := [refl]: #745
#748 := [quant-intro #746]: #747
#130 := (* -1::int #124)
#219 := (ite #201 #30 #130)
#222 := (ite #12 0::int #219)
#225 := (ite #13 #8 #222)
#228 := (= #29 #225)
#231 := (forall (vars (?v0 int) (?v1 int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#99 := (not #98)
#92 := (not #91)
#102 := (and #92 #99)
#88 := (not #87)
#95 := (and #88 #92)
#105 := (or #95 #102)
#150 := (ite #105 #30 #130)
#153 := (ite #12 0::int #150)
#156 := (ite #13 #8 #153)
#159 := (= #29 #156)
#162 := (forall (vars (?v0 int) (?v1 int)) #159)
#232 := (iff #162 #231)
#229 := (iff #159 #228)
#226 := (= #156 #225)
#223 := (= #153 #222)
#220 := (= #150 #219)
#204 := (iff #105 #201)
#198 := (or #195 #187)
#202 := (iff #198 #201)
#203 := [rewrite]: #202
#199 := (iff #105 #198)
#196 := (iff #102 #187)
#197 := [rewrite]: #196
#184 := (iff #95 #195)
#185 := [rewrite]: #184
#200 := [monotonicity #185 #197]: #199
#205 := [trans #200 #203]: #204
#221 := [monotonicity #205]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#182 := (~ #162 #162)
#179 := (~ #159 #159)
#192 := [refl]: #179
#183 := [nnf-pos #192]: #182
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#165 := (iff #37 #162)
#59 := (and #16 #18)
#62 := (or #17 #59)
#135 := (ite #62 #30 #130)
#138 := (ite #12 0::int #135)
#141 := (ite #13 #8 #138)
#144 := (= #29 #141)
#147 := (forall (vars (?v0 int) (?v1 int)) #144)
#163 := (iff #147 #162)
#160 := (iff #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#151 := (= #135 #150)
#106 := (iff #62 #105)
#103 := (iff #59 #102)
#100 := (iff #18 #99)
#101 := [rewrite]: #100
#93 := (iff #16 #92)
#94 := [rewrite]: #93
#104 := [monotonicity #94 #101]: #103
#96 := (iff #17 #95)
#89 := (iff #15 #88)
#90 := [rewrite]: #89
#97 := [monotonicity #90 #94]: #96
#107 := [monotonicity #97 #104]: #106
#152 := [monotonicity #107]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [quant-intro #161]: #163
#148 := (iff #37 #147)
#145 := (iff #36 #144)
#142 := (= #35 #141)
#139 := (= #34 #138)
#136 := (= #33 #135)
#133 := (= #32 #130)
#127 := (- #124)
#131 := (= #127 #130)
#132 := [rewrite]: #131
#128 := (= #32 #127)
#125 := (= #31 #124)
#70 := (= #23 #69)
#71 := [rewrite]: #70
#67 := (= #22 #66)
#68 := [rewrite]: #67
#126 := [monotonicity #68 #71]: #125
#129 := [monotonicity #126]: #128
#134 := [trans #129 #132]: #133
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#137 := [monotonicity #64 #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [quant-intro #146]: #148
#166 := [trans #149 #164]: #165
#123 := [asserted]: #37
#167 := [mp #123 #166]: #162
#193 := [mp~ #167 #183]: #162
#234 := [mp #193 #233]: #231
#265 := [mp #234 #264]: #262
#749 := [mp #265 #748]: #744
#666 := (not #744)
#669 := (or #666 #40)
#323 := (* -1::int 1::int)
#407 := (mod #323 #323)
#408 := (+ #39 #407)
#409 := (= #408 0::int)
#400 := (mod 1::int 1::int)
#411 := (* -1::int #400)
#412 := (+ #39 #411)
#413 := (= #412 0::int)
#410 := (<= 1::int 0::int)
#414 := (or #410 #410)
#393 := (not #414)
#728 := (>= 1::int 0::int)
#730 := (or #410 #728)
#387 := (not #730)
#517 := (or #387 #393)
#724 := (ite #517 #413 #409)
#398 := (= 1::int 0::int)
#399 := (ite #398 #40 #724)
#731 := (= 1::int #39)
#732 := (ite #398 #731 #399)
#554 := (or #666 #732)
#571 := (iff #554 #669)
#565 := (iff #669 #669)
#573 := [rewrite]: #565
#570 := (iff #732 #40)
#735 := (= #39 1::int)
#559 := (ite false #735 #40)
#520 := (iff #559 #40)
#668 := [rewrite]: #520
#560 := (iff #732 #559)
#674 := (iff #399 #40)
#519 := (ite false #40 #40)
#675 := (iff #519 #40)
#676 := [rewrite]: #675
#672 := (iff #399 #519)
#516 := (iff #724 #40)
#1 := true
#679 := (ite true #40 #40)
#680 := (iff #679 #40)
#687 := [rewrite]: #680
#685 := (iff #724 #679)
#684 := (iff #409 #40)
#682 := (= #408 #39)
#699 := (+ #39 0::int)
#697 := (= #699 #39)
#701 := [rewrite]: #697
#539 := (= #408 #699)
#537 := (= #407 0::int)
#689 := (mod -1::int -1::int)
#690 := (= #689 0::int)
#696 := [rewrite]: #690
#694 := (= #407 #689)
#693 := (= #323 -1::int)
#688 := [rewrite]: #693
#695 := [monotonicity #688 #688]: #694
#538 := [trans #695 #696]: #537
#681 := [monotonicity #538]: #539
#683 := [trans #681 #701]: #682
#678 := [monotonicity #683]: #684
#691 := (iff #413 #40)
#698 := (= #412 #39)
#700 := (= #412 #699)
#420 := (= #411 0::int)
#707 := (* -1::int 0::int)
#418 := (= #707 0::int)
#419 := [rewrite]: #418
#704 := (= #411 #707)
#429 := (= #400 0::int)
#703 := [rewrite]: #429
#708 := [monotonicity #703]: #704
#421 := [trans #708 #419]: #420
#415 := [monotonicity #421]: #700
#702 := [trans #415 #701]: #698
#692 := [monotonicity #702]: #691
#706 := (iff #517 true)
#727 := (or false true)
#374 := (iff #727 true)
#375 := [rewrite]: #374
#329 := (iff #517 #727)
#434 := (iff #393 true)
#723 := (not false)
#432 := (iff #723 true)
#433 := [rewrite]: #432
#709 := (iff #393 #723)
#722 := (iff #414 false)
#356 := (or false false)
#361 := (iff #356 false)
#362 := [rewrite]: #361
#719 := (iff #414 #356)
#385 := (iff #410 false)
#390 := [rewrite]: #385
#721 := [monotonicity #390 #390]: #719
#720 := [trans #721 #362]: #722
#710 := [monotonicity #720]: #709
#435 := [trans #710 #433]: #434
#712 := (iff #387 false)
#713 := (not true)
#716 := (iff #713 false)
#717 := [rewrite]: #716
#714 := (iff #387 #713)
#376 := (iff #730 true)
#370 := (iff #730 #727)
#726 := (iff #728 true)
#386 := [rewrite]: #726
#711 := [monotonicity #390 #386]: #370
#377 := [trans #711 #375]: #376
#715 := [monotonicity #377]: #714
#718 := [trans #715 #717]: #712
#705 := [monotonicity #718 #435]: #329
#428 := [trans #705 #375]: #706
#686 := [monotonicity #428 #692 #678]: #685
#518 := [trans #686 #687]: #516
#733 := (iff #398 false)
#734 := [rewrite]: #733
#673 := [monotonicity #734 #518]: #672
#677 := [trans #673 #676]: #674
#729 := (iff #731 #735)
#725 := [rewrite]: #729
#561 := [monotonicity #734 #725 #677]: #560
#665 := [trans #561 #668]: #570
#572 := [monotonicity #665]: #571
#574 := [trans #572 #573]: #571
#569 := [quant-inst]: #554
#575 := [mp #569 #574]: #669
[unit-resolution #575 #749 #168]: false
unsat
dcc2c3c66de3e673b0cfeb392eb7d2e8ec04caf3 335 0
#2 := false
decl f3 :: (-> int int int)
#39 := 1::int
decl f5 :: int
#38 := f5
#40 := (f3 f5 1::int)
#170 := (= f5 #40)
#11 := 0::int
#730 := (= #40 0::int)
#499 := (iff #730 #170)
#496 := (iff #170 #730)
#513 := (= 0::int #40)
#533 := (iff #513 #730)
#492 := [commutativity]: #533
#531 := (iff #170 #513)
#732 := (= f5 0::int)
#726 := (<= f5 0::int)
#708 := (not #726)
#515 := (>= f5 0::int)
#716 := (not #515)
#432 := (or #716 #708)
#682 := (not #432)
#410 := (div f5 1::int)
#66 := -1::int
#411 := (* -1::int #410)
#408 := (+ #40 #411)
#412 := (= #408 0::int)
#672 := (not #412)
#572 := (* -1::int #40)
#573 := (+ f5 #572)
#575 := (>= #573 0::int)
#644 := (+ f5 #411)
#635 := (>= #644 0::int)
#643 := (= #644 0::int)
#1 := true
#57 := [true-axiom]: true
#611 := (or false #643)
#617 := [th-lemma]: #611
#603 := [unit-resolution #617 #57]: #643
#599 := (not #643)
#600 := (or #599 #635)
#601 := [th-lemma]: #600
#604 := [unit-resolution #601 #603]: #635
#684 := (<= #408 0::int)
#605 := [hypothesis]: #412
#606 := (or #672 #684)
#607 := [th-lemma]: #606
#602 := [unit-resolution #607 #605]: #684
#581 := (not #635)
#608 := (not #684)
#582 := (or #575 #608 #581)
#583 := [th-lemma]: #582
#476 := [unit-resolution #583 #602 #604]: #575
#574 := (<= #573 0::int)
#633 := (<= #644 0::int)
#587 := (or #599 #633)
#588 := [th-lemma]: #587
#589 := [unit-resolution #588 #603]: #633
#678 := (>= #408 0::int)
#594 := (or #672 #678)
#590 := [th-lemma]: #594
#591 := [unit-resolution #590 #605]: #678
#595 := (not #633)
#592 := (not #678)
#596 := (or #574 #592 #595)
#597 := [th-lemma]: #596
#593 := [unit-resolution #597 #591 #589]: #574
#578 := (not #575)
#598 := (not #574)
#560 := (or #598 #578)
#173 := (not #170)
#41 := (= #40 f5)
#42 := (not #41)
#174 := (iff #42 #173)
#171 := (iff #41 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#169 := [asserted]: #42
#178 := [mp #169 #175]: #173
#524 := (or #170 #598 #578)
#579 := [th-lemma]: #524
#584 := [unit-resolution #579 #178]: #560
#585 := [unit-resolution #584 #593 #476]: false
#580 := [lemma #585]: #672
#405 := (* -1::int f5)
#426 := (div #405 -1::int)
#705 := (* -1::int #426)
#416 := (+ #40 #705)
#419 := (= #416 0::int)
#413 := (ite #432 #412 #419)
#568 := (not #732)
#501 := [hypothesis]: #568
#503 := (or #732 #413)
#696 := (ite #732 #730 #413)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#734 := (pattern #10)
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#73 := (div #67 #70)
#237 := (* -1::int #73)
#238 := (+ #10 #237)
#239 := (= #238 0::int)
#21 := (div #8 #9)
#234 := (* -1::int #21)
#235 := (+ #10 #234)
#236 := (= #235 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#192 := (or #88 #92)
#193 := (not #192)
#99 := (>= #8 0::int)
#184 := (or #92 #99)
#185 := (not #184)
#199 := (or #185 #193)
#240 := (ite #199 #236 #239)
#233 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#241 := (ite #14 #233 #240)
#735 := (forall (vars (?v0 int) (?v1 int)) (:pat #734) #241)
#244 := (forall (vars (?v0 int) (?v1 int)) #241)
#738 := (iff #244 #735)
#736 := (iff #241 #241)
#737 := [refl]: #736
#739 := [quant-intro #737]: #738
#204 := (ite #199 #21 #73)
#207 := (ite #14 0::int #204)
#210 := (= #10 #207)
#213 := (forall (vars (?v0 int) (?v1 int)) #210)
#245 := (iff #213 #244)
#242 := (iff #210 #241)
#243 := [rewrite]: #242
#246 := [quant-intro #243]: #245
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#109 := (ite #106 #21 #73)
#112 := (ite #14 0::int #109)
#115 := (= #10 #112)
#118 := (forall (vars (?v0 int) (?v1 int)) #115)
#214 := (iff #118 #213)
#211 := (iff #115 #210)
#208 := (= #112 #207)
#205 := (= #109 #204)
#202 := (iff #106 #199)
#196 := (or #193 #185)
#200 := (iff #196 #199)
#201 := [rewrite]: #200
#197 := (iff #106 #196)
#194 := (iff #103 #185)
#195 := [rewrite]: #194
#182 := (iff #96 #193)
#183 := [rewrite]: #182
#198 := [monotonicity #183 #195]: #197
#203 := [trans #198 #201]: #202
#206 := [monotonicity #203]: #205
#209 := [monotonicity #206]: #208
#212 := [monotonicity #209]: #211
#215 := [quant-intro #212]: #214
#188 := (~ #118 #118)
#186 := (~ #115 #115)
#187 := [refl]: #186
#189 := [nnf-pos #187]: #188
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#121 := (iff #28 #118)
#60 := (and #16 #18)
#63 := (or #17 #60)
#76 := (ite #63 #21 #73)
#79 := (ite #14 0::int #76)
#82 := (= #10 #79)
#85 := (forall (vars (?v0 int) (?v1 int)) #82)
#119 := (iff #85 #118)
#116 := (iff #82 #115)
#113 := (= #79 #112)
#110 := (= #76 #109)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [quant-intro #117]: #119
#86 := (iff #28 #85)
#83 := (iff #27 #82)
#80 := (= #26 #79)
#77 := (= #25 #76)
#74 := (= #24 #73)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#78 := [monotonicity #65 #75]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#87 := [quant-intro #84]: #86
#122 := [trans #87 #120]: #121
#59 := [asserted]: #28
#123 := [mp #59 #122]: #118
#179 := [mp~ #123 #189]: #118
#216 := [mp #179 #215]: #213
#247 := [mp #216 #246]: #244
#740 := [mp #247 #739]: #735
#690 := (not #735)
#691 := (or #690 #696)
#321 := (* -1::int 1::int)
#406 := (div #405 #321)
#407 := (* -1::int #406)
#398 := (+ #40 #407)
#409 := (= #398 0::int)
#391 := (<= 1::int 0::int)
#728 := (or #726 #391)
#385 := (not #728)
#722 := (or #391 #515)
#396 := (not #722)
#397 := (or #396 #385)
#729 := (ite #397 #412 #409)
#731 := (= 1::int 0::int)
#727 := (or #732 #731)
#733 := (ite #727 #730 #729)
#686 := (or #690 #733)
#692 := (iff #686 #691)
#688 := (iff #691 #691)
#694 := [rewrite]: #688
#700 := (iff #733 #696)
#695 := (iff #729 #413)
#697 := (iff #409 #419)
#417 := (= #398 #416)
#702 := (= #407 #705)
#427 := (= #406 #426)
#703 := (= #321 -1::int)
#704 := [rewrite]: #703
#701 := [monotonicity #704]: #427
#706 := [monotonicity #701]: #702
#418 := [monotonicity #706]: #417
#698 := [monotonicity #418]: #697
#433 := (iff #397 #432)
#430 := (iff #385 #708)
#721 := (iff #728 #726)
#719 := (or #726 false)
#720 := (iff #719 #726)
#718 := [rewrite]: #720
#359 := (iff #728 #719)
#373 := (iff #391 false)
#374 := [rewrite]: #373
#360 := [monotonicity #374]: #359
#707 := [trans #360 #718]: #721
#431 := [monotonicity #707]: #430
#354 := (iff #396 #716)
#715 := (iff #722 #515)
#375 := (or false #515)
#713 := (iff #375 #515)
#714 := [rewrite]: #713
#711 := (iff #722 #375)
#712 := [monotonicity #374]: #711
#710 := [trans #712 #714]: #715
#717 := [monotonicity #710]: #354
#327 := [monotonicity #717 #431]: #433
#699 := [monotonicity #327 #698]: #695
#709 := (iff #727 #732)
#388 := (or #732 false)
#725 := (iff #388 #732)
#368 := [rewrite]: #725
#724 := (iff #727 #388)
#723 := (iff #731 false)
#383 := [rewrite]: #723
#384 := [monotonicity #383]: #724
#372 := [trans #384 #368]: #709
#689 := [monotonicity #372 #699]: #700
#693 := [monotonicity #689]: #692
#535 := [trans #693 #694]: #692
#687 := [quant-inst]: #686
#536 := [mp #687 #535]: #691
#502 := [unit-resolution #536 #740]: #696
#666 := (not #696)
#667 := (or #666 #732 #413)
#552 := [def-axiom]: #667
#504 := [unit-resolution #552 #502]: #503
#506 := [unit-resolution #504 #501]: #413
#517 := (not #413)
#670 := (or #517 #682 #412)
#671 := [def-axiom]: #670
#507 := [unit-resolution #671 #506 #580]: #682
#680 := (or #432 #726)
#681 := [def-axiom]: #680
#508 := [unit-resolution #681 #507]: #726
#537 := (or #432 #515)
#679 := [def-axiom]: #537
#351 := [unit-resolution #679 #507]: #515
#509 := (or #732 #708 #716)
#505 := [th-lemma]: #509
#510 := [unit-resolution #505 #501 #351 #508]: false
#489 := [lemma #510]: #732
#532 := [monotonicity #489]: #531
#498 := [trans #532 #492]: #496
#497 := [symm #498]: #499
#528 := (or #568 #730)
#663 := (or #666 #568 #730)
#664 := [def-axiom]: #663
#529 := [unit-resolution #664 #502]: #528
#530 := [unit-resolution #529 #489]: #730
#500 := [mp #530 #497]: #170
[unit-resolution #178 #500]: false
unsat
52cf99958a1402707eac2a505ecb8d6adc72de1a 307 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#39 := 1::int
#38 := 3::int
#40 := (f4 3::int 1::int)
#41 := (= #40 0::int)
#42 := (not #41)
#169 := [asserted]: #42
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#744 := (pattern #29)
#66 := -1::int
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#125 := (mod #67 #70)
#256 := (+ #29 #125)
#257 := (= #256 0::int)
#30 := (mod #8 #9)
#253 := (* -1::int #30)
#254 := (+ #29 #253)
#255 := (= #254 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#195 := (or #88 #92)
#196 := (not #195)
#99 := (>= #8 0::int)
#187 := (or #92 #99)
#188 := (not #187)
#202 := (or #188 #196)
#258 := (ite #202 #255 #257)
#252 := (= #29 0::int)
#12 := (= #8 0::int)
#259 := (ite #12 #252 #258)
#251 := (= #8 #29)
#13 := (= #9 0::int)
#260 := (ite #13 #251 #259)
#745 := (forall (vars (?v0 int) (?v1 int)) (:pat #744) #260)
#263 := (forall (vars (?v0 int) (?v1 int)) #260)
#748 := (iff #263 #745)
#746 := (iff #260 #260)
#747 := [refl]: #746
#749 := [quant-intro #747]: #748
#131 := (* -1::int #125)
#220 := (ite #202 #30 #131)
#223 := (ite #12 0::int #220)
#226 := (ite #13 #8 #223)
#229 := (= #29 #226)
#232 := (forall (vars (?v0 int) (?v1 int)) #229)
#264 := (iff #232 #263)
#261 := (iff #229 #260)
#262 := [rewrite]: #261
#265 := [quant-intro #262]: #264
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#151 := (ite #106 #30 #131)
#154 := (ite #12 0::int #151)
#157 := (ite #13 #8 #154)
#160 := (= #29 #157)
#163 := (forall (vars (?v0 int) (?v1 int)) #160)
#233 := (iff #163 #232)
#230 := (iff #160 #229)
#227 := (= #157 #226)
#224 := (= #154 #223)
#221 := (= #151 #220)
#205 := (iff #106 #202)
#199 := (or #196 #188)
#203 := (iff #199 #202)
#204 := [rewrite]: #203
#200 := (iff #106 #199)
#197 := (iff #103 #188)
#198 := [rewrite]: #197
#185 := (iff #96 #196)
#186 := [rewrite]: #185
#201 := [monotonicity #186 #198]: #200
#206 := [trans #201 #204]: #205
#222 := [monotonicity #206]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [quant-intro #231]: #233
#183 := (~ #163 #163)
#180 := (~ #160 #160)
#193 := [refl]: #180
#184 := [nnf-pos #193]: #183
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#166 := (iff #37 #163)
#60 := (and #16 #18)
#63 := (or #17 #60)
#136 := (ite #63 #30 #131)
#139 := (ite #12 0::int #136)
#142 := (ite #13 #8 #139)
#145 := (= #29 #142)
#148 := (forall (vars (?v0 int) (?v1 int)) #145)
#164 := (iff #148 #163)
#161 := (iff #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#152 := (= #136 #151)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#153 := [monotonicity #108]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#149 := (iff #37 #148)
#146 := (iff #36 #145)
#143 := (= #35 #142)
#140 := (= #34 #139)
#137 := (= #33 #136)
#134 := (= #32 #131)
#128 := (- #125)
#132 := (= #128 #131)
#133 := [rewrite]: #132
#129 := (= #32 #128)
#126 := (= #31 #125)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#127 := [monotonicity #69 #72]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#138 := [monotonicity #65 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#167 := [trans #150 #165]: #166
#124 := [asserted]: #37
#168 := [mp #124 #167]: #163
#194 := [mp~ #168 #184]: #163
#235 := [mp #194 #234]: #232
#266 := [mp #235 #265]: #263
#750 := [mp #266 #749]: #745
#577 := (not #745)
#578 := (or #577 #41)
#324 := (* -1::int 1::int)
#408 := (* -1::int 3::int)
#409 := (mod #408 #324)
#410 := (+ #40 #409)
#401 := (= #410 0::int)
#412 := (mod 3::int 1::int)
#413 := (* -1::int #412)
#414 := (+ #40 #413)
#411 := (= #414 0::int)
#415 := (<= 1::int 0::int)
#394 := (<= 3::int 0::int)
#729 := (or #394 #415)
#731 := (not #729)
#388 := (>= 3::int 0::int)
#518 := (or #415 #388)
#725 := (not #518)
#399 := (or #725 #731)
#400 := (ite #399 #411 #401)
#732 := (= 3::int 0::int)
#733 := (ite #732 #41 #400)
#734 := (= 3::int #40)
#735 := (= 1::int 0::int)
#730 := (ite #735 #734 #733)
#671 := (or #577 #730)
#672 := (iff #671 #578)
#661 := (iff #578 #578)
#653 := [rewrite]: #661
#575 := (iff #730 #41)
#391 := (= #40 3::int)
#570 := (ite false #391 #41)
#566 := (iff #570 #41)
#574 := [rewrite]: #566
#572 := (iff #730 #570)
#670 := (iff #733 #41)
#521 := (ite false #41 #41)
#666 := (iff #521 #41)
#667 := [rewrite]: #666
#669 := (iff #733 #521)
#561 := (iff #400 #41)
#1 := true
#676 := (ite true #41 #41)
#678 := (iff #676 #41)
#560 := [rewrite]: #678
#677 := (iff #400 #676)
#673 := (iff #401 #41)
#519 := (= #410 #40)
#692 := (+ #40 0::int)
#689 := (= #692 #40)
#690 := [rewrite]: #689
#688 := (= #410 #692)
#687 := (= #409 0::int)
#538 := -3::int
#684 := (mod -3::int -1::int)
#680 := (= #684 0::int)
#686 := [rewrite]: #680
#685 := (= #409 #684)
#682 := (= #324 -1::int)
#683 := [rewrite]: #682
#539 := (= #408 -3::int)
#540 := [rewrite]: #539
#679 := [monotonicity #540 #683]: #685
#681 := [trans #679 #686]: #687
#517 := [monotonicity #681]: #688
#520 := [trans #517 #690]: #519
#674 := [monotonicity #520]: #673
#691 := (iff #411 #41)
#695 := (= #414 #40)
#693 := (= #414 #692)
#699 := (= #413 0::int)
#700 := (* -1::int 0::int)
#698 := (= #700 0::int)
#702 := [rewrite]: #698
#701 := (= #413 #700)
#421 := (= #412 0::int)
#422 := [rewrite]: #421
#416 := [monotonicity #422]: #701
#703 := [trans #416 #702]: #699
#694 := [monotonicity #703]: #693
#696 := [trans #694 #690]: #695
#697 := [monotonicity #696]: #691
#419 := (iff #399 true)
#377 := (or false true)
#715 := (iff #377 true)
#716 := [rewrite]: #715
#705 := (iff #399 #377)
#704 := (iff #731 true)
#330 := (not false)
#429 := (iff #330 true)
#430 := [rewrite]: #429
#706 := (iff #731 #330)
#435 := (iff #729 false)
#724 := (or false false)
#433 := (iff #724 false)
#434 := [rewrite]: #433
#710 := (iff #729 #724)
#371 := (iff #415 false)
#712 := [rewrite]: #371
#723 := (iff #394 false)
#721 := [rewrite]: #723
#711 := [monotonicity #721 #712]: #710
#436 := [trans #711 #434]: #435
#707 := [monotonicity #436]: #706
#708 := [trans #707 #430]: #704
#362 := (iff #725 false)
#713 := (not true)
#720 := (iff #713 false)
#722 := [rewrite]: #720
#719 := (iff #725 #713)
#717 := (iff #518 true)
#378 := (iff #518 #377)
#375 := (iff #388 true)
#376 := [rewrite]: #375
#714 := [monotonicity #712 #376]: #378
#718 := [trans #714 #716]: #717
#357 := [monotonicity #718]: #719
#363 := [trans #357 #722]: #362
#709 := [monotonicity #363 #708]: #705
#420 := [trans #709 #716]: #419
#675 := [monotonicity #420 #697 #674]: #677
#562 := [trans #675 #560]: #561
#387 := (iff #732 false)
#728 := [rewrite]: #387
#571 := [monotonicity #728 #562]: #669
#555 := [trans #571 #667]: #670
#386 := (iff #734 #391)
#727 := [rewrite]: #386
#736 := (iff #735 false)
#726 := [rewrite]: #736
#573 := [monotonicity #726 #727 #555]: #572
#576 := [trans #573 #574]: #575
#659 := [monotonicity #576]: #672
#650 := [trans #659 #653]: #672
#668 := [quant-inst]: #671
#652 := [mp #668 #650]: #578
[unit-resolution #652 #750 #169]: false
unsat
2a60c54232ee9900c0a7254451730bed52200c08 306 0
#2 := false
#11 := 0::int
decl f3 :: (-> int int int)
#66 := -1::int
#172 := (f3 0::int -1::int)
#175 := (= #172 0::int)
#188 := (not #175)
#38 := 1::int
#39 := (- 1::int)
#40 := (f3 0::int #39)
#41 := (= #40 0::int)
#42 := (not #41)
#191 := (iff #42 #188)
#178 := (= 0::int #172)
#183 := (not #178)
#189 := (iff #183 #188)
#186 := (iff #178 #175)
#187 := [rewrite]: #186
#190 := [monotonicity #187]: #189
#184 := (iff #42 #183)
#181 := (iff #41 #178)
#179 := (iff #175 #178)
#180 := [rewrite]: #179
#176 := (iff #41 #175)
#173 := (= #40 #172)
#170 := (= #39 -1::int)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#182 := [trans #177 #180]: #181
#185 := [monotonicity #182]: #184
#192 := [trans #185 #190]: #191
#169 := [asserted]: #42
#193 := [mp #169 #192]: #188
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#751 := (pattern #10)
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#73 := (div #67 #70)
#254 := (* -1::int #73)
#255 := (+ #10 #254)
#256 := (= #255 0::int)
#21 := (div #8 #9)
#251 := (* -1::int #21)
#252 := (+ #10 #251)
#253 := (= #252 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#209 := (or #88 #92)
#210 := (not #209)
#99 := (>= #8 0::int)
#201 := (or #92 #99)
#202 := (not #201)
#216 := (or #202 #210)
#257 := (ite #216 #253 #256)
#250 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#258 := (ite #14 #250 #257)
#752 := (forall (vars (?v0 int) (?v1 int)) (:pat #751) #258)
#261 := (forall (vars (?v0 int) (?v1 int)) #258)
#755 := (iff #261 #752)
#753 := (iff #258 #258)
#754 := [refl]: #753
#756 := [quant-intro #754]: #755
#221 := (ite #216 #21 #73)
#224 := (ite #14 0::int #221)
#227 := (= #10 #224)
#230 := (forall (vars (?v0 int) (?v1 int)) #227)
#262 := (iff #230 #261)
#259 := (iff #227 #258)
#260 := [rewrite]: #259
#263 := [quant-intro #260]: #262
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#109 := (ite #106 #21 #73)
#112 := (ite #14 0::int #109)
#115 := (= #10 #112)
#118 := (forall (vars (?v0 int) (?v1 int)) #115)
#231 := (iff #118 #230)
#228 := (iff #115 #227)
#225 := (= #112 #224)
#222 := (= #109 #221)
#219 := (iff #106 #216)
#213 := (or #210 #202)
#217 := (iff #213 #216)
#218 := [rewrite]: #217
#214 := (iff #106 #213)
#211 := (iff #103 #202)
#212 := [rewrite]: #211
#199 := (iff #96 #210)
#200 := [rewrite]: #199
#215 := [monotonicity #200 #212]: #214
#220 := [trans #215 #218]: #219
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#205 := (~ #118 #118)
#203 := (~ #115 #115)
#204 := [refl]: #203
#206 := [nnf-pos #204]: #205
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#121 := (iff #28 #118)
#60 := (and #16 #18)
#63 := (or #17 #60)
#76 := (ite #63 #21 #73)
#79 := (ite #14 0::int #76)
#82 := (= #10 #79)
#85 := (forall (vars (?v0 int) (?v1 int)) #82)
#119 := (iff #85 #118)
#116 := (iff #82 #115)
#113 := (= #79 #112)
#110 := (= #76 #109)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [quant-intro #117]: #119
#86 := (iff #28 #85)
#83 := (iff #27 #82)
#80 := (= #26 #79)
#77 := (= #25 #76)
#74 := (= #24 #73)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#78 := [monotonicity #65 #75]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#87 := [quant-intro #84]: #86
#122 := [trans #87 #120]: #121
#59 := [asserted]: #28
#123 := [mp #59 #122]: #118
#196 := [mp~ #123 #206]: #118
#233 := [mp #196 #232]: #230
#264 := [mp #233 #263]: #261
#757 := [mp #264 #756]: #752
#586 := (not #752)
#587 := (or #586 #175)
#338 := (* -1::int -1::int)
#422 := (* -1::int 0::int)
#423 := (div #422 #338)
#424 := (* -1::int #423)
#415 := (+ #172 #424)
#426 := (= #415 0::int)
#427 := (div 0::int -1::int)
#428 := (* -1::int #427)
#425 := (+ #172 #428)
#429 := (= #425 0::int)
#408 := (<= -1::int 0::int)
#743 := (<= 0::int 0::int)
#745 := (or #743 #408)
#402 := (not #745)
#532 := (>= 0::int 0::int)
#739 := (or #408 #532)
#413 := (not #739)
#414 := (or #413 #402)
#746 := (ite #414 #429 #426)
#747 := (= -1::int 0::int)
#748 := (= 0::int 0::int)
#749 := (or #748 #747)
#744 := (ite #749 #175 #746)
#580 := (or #586 #744)
#589 := (iff #580 #587)
#591 := (iff #587 #587)
#592 := [rewrite]: #591
#569 := (iff #744 #175)
#1 := true
#683 := (ite true #175 #175)
#681 := (iff #683 #175)
#684 := [rewrite]: #681
#585 := (iff #744 #683)
#576 := (iff #746 #175)
#691 := (ite false #175 #175)
#574 := (iff #691 #175)
#575 := [rewrite]: #574
#689 := (iff #746 #691)
#688 := (iff #426 #175)
#534 := (= #415 #172)
#706 := (+ #172 0::int)
#703 := (= #706 #172)
#704 := [rewrite]: #703
#531 := (= #415 #706)
#695 := (= #424 0::int)
#712 := (= #422 0::int)
#716 := [rewrite]: #712
#700 := (= #424 #422)
#693 := (= #423 0::int)
#554 := (div 0::int 1::int)
#698 := (= #554 0::int)
#699 := [rewrite]: #698
#696 := (= #423 #554)
#552 := (= #338 1::int)
#553 := [rewrite]: #552
#697 := [monotonicity #716 #553]: #696
#694 := [trans #697 #699]: #693
#701 := [monotonicity #694]: #700
#702 := [trans #701 #716]: #695
#533 := [monotonicity #702]: #531
#687 := [trans #533 #704]: #534
#690 := [monotonicity #687]: #688
#705 := (iff #429 #175)
#709 := (= #425 #172)
#707 := (= #425 #706)
#713 := (= #428 0::int)
#715 := (= #428 #422)
#436 := (= #427 0::int)
#714 := [rewrite]: #436
#430 := [monotonicity #714]: #715
#717 := [trans #430 #716]: #713
#708 := [monotonicity #717]: #707
#710 := [trans #708 #704]: #709
#711 := [monotonicity #710]: #705
#434 := (iff #414 false)
#718 := (or false false)
#723 := (iff #718 false)
#433 := [rewrite]: #723
#722 := (iff #414 #718)
#443 := (iff #402 false)
#736 := (not true)
#737 := (iff #736 false)
#735 := [rewrite]: #737
#720 := (iff #402 #736)
#450 := (iff #745 true)
#730 := (or true true)
#727 := (iff #730 true)
#733 := [rewrite]: #727
#448 := (iff #745 #730)
#391 := (iff #408 true)
#392 := [rewrite]: #391
#725 := (iff #743 true)
#447 := [rewrite]: #725
#449 := [monotonicity #447 #392]: #448
#344 := [trans #449 #733]: #450
#721 := [monotonicity #344]: #720
#444 := [trans #721 #735]: #443
#738 := (iff #413 false)
#376 := (iff #413 #736)
#371 := (iff #739 true)
#731 := (iff #739 #730)
#728 := (iff #532 true)
#729 := [rewrite]: #728
#732 := [monotonicity #392 #729]: #731
#734 := [trans #732 #733]: #371
#377 := [monotonicity #734]: #376
#724 := [trans #377 #735]: #738
#719 := [monotonicity #724 #444]: #722
#435 := [trans #719 #433]: #434
#692 := [monotonicity #435 #711 #690]: #689
#535 := [trans #692 #575]: #576
#389 := (iff #749 true)
#741 := (or true false)
#385 := (iff #741 true)
#726 := [rewrite]: #385
#401 := (iff #749 #741)
#400 := (iff #747 false)
#405 := [rewrite]: #400
#750 := (iff #748 true)
#740 := [rewrite]: #750
#742 := [monotonicity #740 #405]: #401
#390 := [trans #742 #726]: #389
#680 := [monotonicity #390 #535]: #585
#584 := [trans #680 #684]: #569
#590 := [monotonicity #584]: #589
#685 := [trans #590 #592]: #589
#588 := [quant-inst]: #580
#682 := [mp #588 #685]: #587
[unit-resolution #682 #757 #193]: false
unsat
6d75bf2e8df3400e173e94c70d533cd85e2830a4 308 0
#2 := false
#11 := 0::int
decl f5 :: int
#38 := f5
#732 := (= f5 0::int)
#573 := (not #732)
#394 := (<= f5 0::int)
#720 := (not #394)
#388 := (>= f5 0::int)
#377 := (not #388)
#688 := (or #377 #720 #732)
#575 := (not #688)
#66 := -1::int
#408 := (* -1::int f5)
#700 := (mod #408 -1::int)
decl f4 :: (-> int int int)
#39 := 1::int
#40 := (f4 f5 1::int)
#698 := (+ #40 #700)
#703 := (= #698 0::int)
#41 := (= #40 0::int)
#520 := (ite #688 #41 #703)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#744 := (pattern #29)
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#125 := (mod #67 #70)
#256 := (+ #29 #125)
#257 := (= #256 0::int)
#30 := (mod #8 #9)
#253 := (* -1::int #30)
#254 := (+ #29 #253)
#255 := (= #254 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#195 := (or #88 #92)
#196 := (not #195)
#99 := (>= #8 0::int)
#187 := (or #92 #99)
#188 := (not #187)
#202 := (or #188 #196)
#258 := (ite #202 #255 #257)
#252 := (= #29 0::int)
#12 := (= #8 0::int)
#259 := (ite #12 #252 #258)
#251 := (= #8 #29)
#13 := (= #9 0::int)
#260 := (ite #13 #251 #259)
#745 := (forall (vars (?v0 int) (?v1 int)) (:pat #744) #260)
#263 := (forall (vars (?v0 int) (?v1 int)) #260)
#748 := (iff #263 #745)
#746 := (iff #260 #260)
#747 := [refl]: #746
#749 := [quant-intro #747]: #748
#131 := (* -1::int #125)
#220 := (ite #202 #30 #131)
#223 := (ite #12 0::int #220)
#226 := (ite #13 #8 #223)
#229 := (= #29 #226)
#232 := (forall (vars (?v0 int) (?v1 int)) #229)
#264 := (iff #232 #263)
#261 := (iff #229 #260)
#262 := [rewrite]: #261
#265 := [quant-intro #262]: #264
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#151 := (ite #106 #30 #131)
#154 := (ite #12 0::int #151)
#157 := (ite #13 #8 #154)
#160 := (= #29 #157)
#163 := (forall (vars (?v0 int) (?v1 int)) #160)
#233 := (iff #163 #232)
#230 := (iff #160 #229)
#227 := (= #157 #226)
#224 := (= #154 #223)
#221 := (= #151 #220)
#205 := (iff #106 #202)
#199 := (or #196 #188)
#203 := (iff #199 #202)
#204 := [rewrite]: #203
#200 := (iff #106 #199)
#197 := (iff #103 #188)
#198 := [rewrite]: #197
#185 := (iff #96 #196)
#186 := [rewrite]: #185
#201 := [monotonicity #186 #198]: #200
#206 := [trans #201 #204]: #205
#222 := [monotonicity #206]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [quant-intro #231]: #233
#183 := (~ #163 #163)
#180 := (~ #160 #160)
#193 := [refl]: #180
#184 := [nnf-pos #193]: #183
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#166 := (iff #37 #163)
#60 := (and #16 #18)
#63 := (or #17 #60)
#136 := (ite #63 #30 #131)
#139 := (ite #12 0::int #136)
#142 := (ite #13 #8 #139)
#145 := (= #29 #142)
#148 := (forall (vars (?v0 int) (?v1 int)) #145)
#164 := (iff #148 #163)
#161 := (iff #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#152 := (= #136 #151)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#153 := [monotonicity #108]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#149 := (iff #37 #148)
#146 := (iff #36 #145)
#143 := (= #35 #142)
#140 := (= #34 #139)
#137 := (= #33 #136)
#134 := (= #32 #131)
#128 := (- #125)
#132 := (= #128 #131)
#133 := [rewrite]: #132
#129 := (= #32 #128)
#126 := (= #31 #125)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#127 := [monotonicity #69 #72]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#138 := [monotonicity #65 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#167 := [trans #150 #165]: #166
#124 := [asserted]: #37
#168 := [mp #124 #167]: #163
#194 := [mp~ #168 #184]: #163
#235 := [mp #194 #234]: #232
#266 := [mp #235 #265]: #263
#750 := [mp #266 #749]: #745
#675 := (not #745)
#678 := (or #675 #520)
#324 := (* -1::int 1::int)
#409 := (mod #408 #324)
#410 := (+ #40 #409)
#401 := (= #410 0::int)
#412 := (mod f5 1::int)
#413 := (* -1::int #412)
#414 := (+ #40 #413)
#411 := (= #414 0::int)
#415 := (<= 1::int 0::int)
#729 := (or #394 #415)
#731 := (not #729)
#518 := (or #415 #388)
#725 := (not #518)
#399 := (or #725 #731)
#400 := (ite #399 #411 #401)
#733 := (ite #732 #41 #400)
#734 := (= f5 #40)
#735 := (= 1::int 0::int)
#730 := (ite #735 #734 #733)
#560 := (or #675 #730)
#562 := (iff #560 #678)
#669 := (iff #678 #678)
#571 := [rewrite]: #669
#676 := (iff #730 #520)
#363 := (or #377 #720)
#697 := (or #363 #732)
#538 := (ite #697 #41 #703)
#673 := (iff #538 #520)
#517 := (iff #697 #688)
#519 := [rewrite]: #517
#674 := [monotonicity #519]: #673
#687 := (iff #730 #538)
#684 := (ite false #734 #538)
#680 := (iff #684 #538)
#686 := [rewrite]: #680
#685 := (iff #730 #684)
#682 := (iff #733 #538)
#694 := (ite #363 #41 #703)
#695 := (ite #732 #41 #694)
#539 := (iff #695 #538)
#540 := [rewrite]: #539
#696 := (iff #733 #695)
#689 := (iff #400 #694)
#692 := (iff #401 #703)
#702 := (= #410 #698)
#701 := (= #409 #700)
#421 := (= #324 -1::int)
#422 := [rewrite]: #421
#416 := [monotonicity #422]: #701
#699 := [monotonicity #416]: #702
#693 := [monotonicity #699]: #692
#419 := (iff #411 #41)
#705 := (= #414 #40)
#707 := (+ #40 0::int)
#704 := (= #707 #40)
#708 := [rewrite]: #704
#429 := (= #414 #707)
#330 := (= #413 0::int)
#711 := (* -1::int 0::int)
#435 := (= #711 0::int)
#436 := [rewrite]: #435
#433 := (= #413 #711)
#724 := (= #412 0::int)
#710 := [rewrite]: #724
#434 := [monotonicity #710]: #433
#706 := [trans #434 #436]: #330
#430 := [monotonicity #706]: #429
#709 := [trans #430 #708]: #705
#420 := [monotonicity #709]: #419
#723 := (iff #399 #363)
#722 := (iff #731 #720)
#719 := (iff #729 #394)
#715 := (or #394 false)
#718 := (iff #715 #394)
#713 := [rewrite]: #718
#716 := (iff #729 #715)
#386 := (iff #415 false)
#391 := [rewrite]: #386
#717 := [monotonicity #391]: #716
#357 := [trans #717 #713]: #719
#362 := [monotonicity #357]: #722
#378 := (iff #725 #377)
#375 := (iff #518 #388)
#727 := (or false #388)
#371 := (iff #727 #388)
#712 := [rewrite]: #371
#387 := (iff #518 #727)
#728 := [monotonicity #391]: #387
#376 := [trans #728 #712]: #375
#714 := [monotonicity #376]: #378
#721 := [monotonicity #714 #362]: #723
#690 := [monotonicity #721 #420 #693]: #689
#691 := [monotonicity #690]: #696
#683 := [trans #691 #540]: #682
#736 := (iff #735 false)
#726 := [rewrite]: #736
#679 := [monotonicity #726 #683]: #685
#681 := [trans #679 #686]: #687
#677 := [trans #681 #674]: #676
#521 := [monotonicity #677]: #562
#666 := [trans #521 #571]: #562
#561 := [quant-inst]: #560
#667 := [mp #561 #666]: #678
#660 := [unit-resolution #667 #750]: #520
#668 := (not #520)
#665 := (or #668 #575)
#42 := (not #41)
#169 := [asserted]: #42
#672 := (or #668 #575 #41)
#659 := [def-axiom]: #672
#654 := [unit-resolution #659 #169]: #665
#655 := [unit-resolution #654 #660]: #575
#566 := (or #688 #573)
#574 := [def-axiom]: #566
#656 := [unit-resolution #574 #655]: #573
#670 := (or #688 #388)
#555 := [def-axiom]: #670
#657 := [unit-resolution #555 #655]: #388
#570 := (or #688 #394)
#572 := [def-axiom]: #570
#651 := [unit-resolution #572 #655]: #394
#658 := (or #732 #720 #377)
#642 := [th-lemma]: #658
[unit-resolution #642 #651 #657 #656]: false
unsat
923c4bec65f1ce0be6fa5d4ec7cf2b004a307f06 315 0
#2 := false
#66 := -1::int
decl f3 :: (-> int int int)
#38 := 1::int
#172 := (f3 1::int -1::int)
#175 := (= #172 -1::int)
#188 := (not #175)
#39 := (- 1::int)
#40 := (f3 1::int #39)
#41 := (= #40 #39)
#42 := (not #41)
#191 := (iff #42 #188)
#178 := (= -1::int #172)
#183 := (not #178)
#189 := (iff #183 #188)
#186 := (iff #178 #175)
#187 := [rewrite]: #186
#190 := [monotonicity #187]: #189
#184 := (iff #42 #183)
#181 := (iff #41 #178)
#179 := (iff #175 #178)
#180 := [rewrite]: #179
#176 := (iff #41 #175)
#170 := (= #39 -1::int)
#171 := [rewrite]: #170
#173 := (= #40 #172)
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174 #171]: #176
#182 := [trans #177 #180]: #181
#185 := [monotonicity #182]: #184
#192 := [trans #185 #190]: #191
#169 := [asserted]: #42
#193 := [mp #169 #192]: #188
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#751 := (pattern #10)
#11 := 0::int
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#73 := (div #67 #70)
#254 := (* -1::int #73)
#255 := (+ #10 #254)
#256 := (= #255 0::int)
#21 := (div #8 #9)
#251 := (* -1::int #21)
#252 := (+ #10 #251)
#253 := (= #252 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#209 := (or #88 #92)
#210 := (not #209)
#99 := (>= #8 0::int)
#201 := (or #92 #99)
#202 := (not #201)
#216 := (or #202 #210)
#257 := (ite #216 #253 #256)
#250 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#258 := (ite #14 #250 #257)
#752 := (forall (vars (?v0 int) (?v1 int)) (:pat #751) #258)
#261 := (forall (vars (?v0 int) (?v1 int)) #258)
#755 := (iff #261 #752)
#753 := (iff #258 #258)
#754 := [refl]: #753
#756 := [quant-intro #754]: #755
#221 := (ite #216 #21 #73)
#224 := (ite #14 0::int #221)
#227 := (= #10 #224)
#230 := (forall (vars (?v0 int) (?v1 int)) #227)
#262 := (iff #230 #261)
#259 := (iff #227 #258)
#260 := [rewrite]: #259
#263 := [quant-intro #260]: #262
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#109 := (ite #106 #21 #73)
#112 := (ite #14 0::int #109)
#115 := (= #10 #112)
#118 := (forall (vars (?v0 int) (?v1 int)) #115)
#231 := (iff #118 #230)
#228 := (iff #115 #227)
#225 := (= #112 #224)
#222 := (= #109 #221)
#219 := (iff #106 #216)
#213 := (or #210 #202)
#217 := (iff #213 #216)
#218 := [rewrite]: #217
#214 := (iff #106 #213)
#211 := (iff #103 #202)
#212 := [rewrite]: #211
#199 := (iff #96 #210)
#200 := [rewrite]: #199
#215 := [monotonicity #200 #212]: #214
#220 := [trans #215 #218]: #219
#223 := [monotonicity #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#205 := (~ #118 #118)
#203 := (~ #115 #115)
#204 := [refl]: #203
#206 := [nnf-pos #204]: #205
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#121 := (iff #28 #118)
#60 := (and #16 #18)
#63 := (or #17 #60)
#76 := (ite #63 #21 #73)
#79 := (ite #14 0::int #76)
#82 := (= #10 #79)
#85 := (forall (vars (?v0 int) (?v1 int)) #82)
#119 := (iff #85 #118)
#116 := (iff #82 #115)
#113 := (= #79 #112)
#110 := (= #76 #109)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [quant-intro #117]: #119
#86 := (iff #28 #85)
#83 := (iff #27 #82)
#80 := (= #26 #79)
#77 := (= #25 #76)
#74 := (= #24 #73)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#78 := [monotonicity #65 #75]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#87 := [quant-intro #84]: #86
#122 := [trans #87 #120]: #121
#59 := [asserted]: #28
#123 := [mp #59 #122]: #118
#196 := [mp~ #123 #206]: #118
#233 := [mp #196 #232]: #230
#264 := [mp #233 #263]: #261
#757 := [mp #264 #756]: #752
#682 := (not #752)
#686 := (or #682 #175)
#338 := (* -1::int -1::int)
#422 := (* -1::int 1::int)
#423 := (div #422 #338)
#424 := (* -1::int #423)
#415 := (+ #172 #424)
#426 := (= #415 0::int)
#427 := (div 1::int -1::int)
#428 := (* -1::int #427)
#425 := (+ #172 #428)
#429 := (= #425 0::int)
#408 := (<= -1::int 0::int)
#743 := (<= 1::int 0::int)
#745 := (or #743 #408)
#402 := (not #745)
#532 := (>= 1::int 0::int)
#739 := (or #408 #532)
#413 := (not #739)
#414 := (or #413 #402)
#746 := (ite #414 #429 #426)
#747 := (= #172 0::int)
#748 := (= -1::int 0::int)
#749 := (= 1::int 0::int)
#744 := (or #749 #748)
#750 := (ite #744 #747 #746)
#673 := (or #682 #750)
#667 := (iff #673 #686)
#666 := (iff #686 #686)
#676 := [rewrite]: #666
#592 := (iff #750 #175)
#580 := (ite false #747 #175)
#590 := (iff #580 #175)
#591 := [rewrite]: #590
#588 := (iff #750 #580)
#586 := (iff #746 #175)
#680 := (ite false #175 #175)
#569 := (iff #680 #175)
#584 := [rewrite]: #569
#681 := (iff #746 #680)
#683 := (iff #426 #175)
#704 := (+ 1::int #172)
#552 := (= #704 0::int)
#696 := (iff #552 #175)
#697 := [rewrite]: #696
#576 := (iff #426 #552)
#574 := (= #415 #704)
#707 := (+ #172 1::int)
#709 := (= #707 #704)
#710 := [rewrite]: #709
#689 := (= #415 #707)
#690 := (= #424 1::int)
#716 := (= #338 1::int)
#713 := [rewrite]: #716
#687 := (= #424 #338)
#533 := (= #423 -1::int)
#700 := (div -1::int 1::int)
#702 := (= #700 -1::int)
#531 := [rewrite]: #702
#701 := (= #423 #700)
#693 := (= #422 -1::int)
#694 := [rewrite]: #693
#695 := [monotonicity #694 #713]: #701
#534 := [trans #695 #531]: #533
#688 := [monotonicity #534]: #687
#691 := [trans #688 #713]: #690
#692 := [monotonicity #691]: #689
#575 := [trans #692 #710]: #574
#535 := [monotonicity #575]: #576
#585 := [trans #535 #697]: #683
#698 := (iff #429 #175)
#553 := (iff #429 #552)
#705 := (= #425 #704)
#708 := (= #425 #707)
#717 := (= #428 1::int)
#430 := (= #428 #338)
#714 := (= #427 -1::int)
#715 := [rewrite]: #714
#712 := [monotonicity #715]: #430
#706 := [trans #712 #713]: #717
#703 := [monotonicity #706]: #708
#711 := [trans #703 #710]: #705
#554 := [monotonicity #711]: #553
#699 := [trans #554 #697]: #698
#435 := (iff #414 false)
#401 := (or false false)
#726 := (iff #401 false)
#389 := [rewrite]: #726
#433 := (iff #414 #401)
#719 := (iff #402 false)
#1 := true
#376 := (not true)
#735 := (iff #376 false)
#738 := [rewrite]: #735
#718 := (iff #402 #376)
#443 := (iff #745 true)
#449 := (or false true)
#720 := (iff #449 true)
#721 := [rewrite]: #720
#450 := (iff #745 #449)
#392 := (iff #408 true)
#728 := [rewrite]: #392
#447 := (iff #743 false)
#448 := [rewrite]: #447
#344 := [monotonicity #448 #728]: #450
#444 := [trans #344 #721]: #443
#722 := [monotonicity #444]: #718
#723 := [trans #722 #738]: #719
#724 := (iff #413 false)
#377 := (iff #413 #376)
#734 := (iff #739 true)
#731 := (or true true)
#733 := (iff #731 true)
#371 := [rewrite]: #733
#732 := (iff #739 #731)
#729 := (iff #532 true)
#730 := [rewrite]: #729
#727 := [monotonicity #728 #730]: #732
#736 := [trans #727 #371]: #734
#737 := [monotonicity #736]: #377
#725 := [trans #737 #738]: #724
#434 := [monotonicity #725 #723]: #433
#436 := [trans #434 #389]: #435
#684 := [monotonicity #436 #699 #585]: #681
#587 := [trans #684 #584]: #586
#390 := (iff #744 false)
#742 := (iff #744 #401)
#405 := (iff #748 false)
#741 := [rewrite]: #405
#740 := (iff #749 false)
#400 := [rewrite]: #740
#385 := [monotonicity #400 #741]: #742
#391 := [trans #385 #389]: #390
#589 := [monotonicity #391 #587]: #588
#685 := [trans #589 #591]: #592
#664 := [monotonicity #685]: #667
#677 := [trans #664 #676]: #667
#675 := [quant-inst]: #673
#678 := [mp #675 #677]: #686
[unit-resolution #678 #757 #193]: false
unsat
f6b6632f2c5a6045abfce98be6bbc967a6c8ca72 311 0
#2 := false
#177 := -3::int
decl f3 :: (-> int int int)
#68 := -1::int
#38 := 3::int
#174 := (f3 3::int -1::int)
#180 := (= #174 -3::int)
#183 := (not #180)
#42 := (- 3::int)
#39 := 1::int
#40 := (- 1::int)
#41 := (f3 3::int #40)
#43 := (= #41 #42)
#44 := (not #43)
#184 := (iff #44 #183)
#181 := (iff #43 #180)
#178 := (= #42 -3::int)
#179 := [rewrite]: #178
#175 := (= #41 #174)
#172 := (= #40 -1::int)
#173 := [rewrite]: #172
#176 := [monotonicity #173]: #175
#182 := [monotonicity #176 #179]: #181
#185 := [monotonicity #182]: #184
#171 := [asserted]: #44
#188 := [mp #171 #185]: #183
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#744 := (pattern #10)
#11 := 0::int
#72 := (* -1::int #9)
#69 := (* -1::int #8)
#75 := (div #69 #72)
#247 := (* -1::int #75)
#248 := (+ #10 #247)
#249 := (= #248 0::int)
#21 := (div #8 #9)
#244 := (* -1::int #21)
#245 := (+ #10 #244)
#246 := (= #245 0::int)
#94 := (<= #9 0::int)
#90 := (<= #8 0::int)
#202 := (or #90 #94)
#203 := (not #202)
#101 := (>= #8 0::int)
#194 := (or #94 #101)
#195 := (not #194)
#209 := (or #195 #203)
#250 := (ite #209 #246 #249)
#243 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#251 := (ite #14 #243 #250)
#745 := (forall (vars (?v0 int) (?v1 int)) (:pat #744) #251)
#254 := (forall (vars (?v0 int) (?v1 int)) #251)
#748 := (iff #254 #745)
#746 := (iff #251 #251)
#747 := [refl]: #746
#749 := [quant-intro #747]: #748
#214 := (ite #209 #21 #75)
#217 := (ite #14 0::int #214)
#220 := (= #10 #217)
#223 := (forall (vars (?v0 int) (?v1 int)) #220)
#255 := (iff #223 #254)
#252 := (iff #220 #251)
#253 := [rewrite]: #252
#256 := [quant-intro #253]: #255
#102 := (not #101)
#95 := (not #94)
#105 := (and #95 #102)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#111 := (ite #108 #21 #75)
#114 := (ite #14 0::int #111)
#117 := (= #10 #114)
#120 := (forall (vars (?v0 int) (?v1 int)) #117)
#224 := (iff #120 #223)
#221 := (iff #117 #220)
#218 := (= #114 #217)
#215 := (= #111 #214)
#212 := (iff #108 #209)
#206 := (or #203 #195)
#210 := (iff #206 #209)
#211 := [rewrite]: #210
#207 := (iff #108 #206)
#204 := (iff #105 #195)
#205 := [rewrite]: #204
#192 := (iff #98 #203)
#193 := [rewrite]: #192
#208 := [monotonicity #193 #205]: #207
#213 := [trans #208 #211]: #212
#216 := [monotonicity #213]: #215
#219 := [monotonicity #216]: #218
#222 := [monotonicity #219]: #221
#225 := [quant-intro #222]: #224
#198 := (~ #120 #120)
#196 := (~ #117 #117)
#197 := [refl]: #196
#199 := [nnf-pos #197]: #198
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#123 := (iff #28 #120)
#62 := (and #16 #18)
#65 := (or #17 #62)
#78 := (ite #65 #21 #75)
#81 := (ite #14 0::int #78)
#84 := (= #10 #81)
#87 := (forall (vars (?v0 int) (?v1 int)) #84)
#121 := (iff #87 #120)
#118 := (iff #84 #117)
#115 := (= #81 #114)
#112 := (= #78 #111)
#109 := (iff #65 #108)
#106 := (iff #62 #105)
#103 := (iff #18 #102)
#104 := [rewrite]: #103
#96 := (iff #16 #95)
#97 := [rewrite]: #96
#107 := [monotonicity #97 #104]: #106
#99 := (iff #17 #98)
#92 := (iff #15 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#88 := (iff #28 #87)
#85 := (iff #27 #84)
#82 := (= #26 #81)
#79 := (= #25 #78)
#76 := (= #24 #75)
#73 := (= #23 #72)
#74 := [rewrite]: #73
#70 := (= #22 #69)
#71 := [rewrite]: #70
#77 := [monotonicity #71 #74]: #76
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#80 := [monotonicity #67 #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#124 := [trans #89 #122]: #123
#61 := [asserted]: #28
#125 := [mp #61 #124]: #120
#189 := [mp~ #125 #199]: #120
#226 := [mp #189 #225]: #223
#257 := [mp #226 #256]: #254
#750 := [mp #257 #749]: #745
#668 := (not #745)
#660 := (or #668 #180)
#331 := (* -1::int -1::int)
#415 := (* -1::int 3::int)
#416 := (div #415 #331)
#417 := (* -1::int #416)
#408 := (+ #174 #417)
#419 := (= #408 0::int)
#420 := (div 3::int -1::int)
#421 := (* -1::int #420)
#418 := (+ #174 #421)
#422 := (= #418 0::int)
#401 := (<= -1::int 0::int)
#736 := (<= 3::int 0::int)
#738 := (or #736 #401)
#395 := (not #738)
#525 := (>= 3::int 0::int)
#732 := (or #401 #525)
#406 := (not #732)
#407 := (or #406 #395)
#739 := (ite #407 #422 #419)
#740 := (= #174 0::int)
#741 := (= -1::int 0::int)
#742 := (= 3::int 0::int)
#737 := (or #742 #741)
#743 := (ite #737 #740 #739)
#657 := (or #668 #743)
#669 := (iff #657 #660)
#671 := (iff #660 #660)
#667 := [rewrite]: #671
#679 := (iff #743 #180)
#583 := (ite false #740 #180)
#678 := (iff #583 #180)
#675 := [rewrite]: #678
#584 := (iff #743 #583)
#581 := (iff #739 #180)
#562 := (ite false #180 #180)
#580 := (iff #562 #180)
#573 := [rewrite]: #580
#577 := (iff #739 #562)
#674 := (iff #419 #180)
#702 := (+ 3::int #174)
#546 := (= #702 0::int)
#690 := (iff #546 #180)
#691 := [rewrite]: #690
#578 := (iff #419 #546)
#528 := (= #408 #702)
#701 := (+ #174 3::int)
#703 := (= #701 #702)
#698 := [rewrite]: #703
#568 := (= #408 #701)
#685 := (= #417 3::int)
#423 := (* -1::int -3::int)
#706 := (= #423 3::int)
#710 := [rewrite]: #706
#684 := (= #417 #423)
#681 := (= #416 -3::int)
#695 := (div -3::int 1::int)
#527 := (= #695 -3::int)
#680 := [rewrite]: #527
#524 := (= #416 #695)
#694 := (= #331 1::int)
#688 := [rewrite]: #694
#687 := (= #415 -3::int)
#693 := [rewrite]: #687
#526 := [monotonicity #693 #688]: #524
#683 := [trans #526 #680]: #681
#682 := [monotonicity #683]: #684
#567 := [trans #682 #710]: #685
#569 := [monotonicity #567]: #568
#676 := [trans #569 #698]: #528
#673 := [monotonicity #676]: #578
#677 := [trans #673 #691]: #674
#692 := (iff #422 #180)
#547 := (iff #422 #546)
#704 := (= #418 #702)
#696 := (= #418 #701)
#699 := (= #421 3::int)
#705 := (= #421 #423)
#707 := (= #420 -3::int)
#708 := [rewrite]: #707
#709 := [monotonicity #708]: #705
#700 := [trans #709 #710]: #699
#697 := [monotonicity #700]: #696
#545 := [trans #697 #698]: #704
#689 := [monotonicity #545]: #547
#686 := [trans #689 #691]: #692
#428 := (iff #407 false)
#394 := (or false false)
#719 := (iff #394 false)
#382 := [rewrite]: #719
#426 := (iff #407 #394)
#712 := (iff #395 false)
#1 := true
#369 := (not true)
#728 := (iff #369 false)
#731 := [rewrite]: #728
#711 := (iff #395 #369)
#436 := (iff #738 true)
#442 := (or false true)
#713 := (iff #442 true)
#714 := [rewrite]: #713
#443 := (iff #738 #442)
#385 := (iff #401 true)
#721 := [rewrite]: #385
#440 := (iff #736 false)
#441 := [rewrite]: #440
#337 := [monotonicity #441 #721]: #443
#437 := [trans #337 #714]: #436
#715 := [monotonicity #437]: #711
#716 := [trans #715 #731]: #712
#717 := (iff #406 false)
#370 := (iff #406 #369)
#727 := (iff #732 true)
#724 := (or true true)
#726 := (iff #724 true)
#364 := [rewrite]: #726
#725 := (iff #732 #724)
#722 := (iff #525 true)
#723 := [rewrite]: #722
#720 := [monotonicity #721 #723]: #725
#729 := [trans #720 #364]: #727
#730 := [monotonicity #729]: #370
#718 := [trans #730 #731]: #717
#427 := [monotonicity #718 #716]: #426
#429 := [trans #427 #382]: #428
#579 := [monotonicity #429 #686 #677]: #577
#582 := [trans #579 #573]: #581
#383 := (iff #737 false)
#735 := (iff #737 #394)
#398 := (iff #741 false)
#734 := [rewrite]: #398
#733 := (iff #742 false)
#393 := [rewrite]: #733
#378 := [monotonicity #393 #734]: #735
#384 := [trans #378 #382]: #383
#585 := [monotonicity #384 #582]: #584
#666 := [trans #585 #675]: #679
#670 := [monotonicity #666]: #669
#672 := [trans #670 #667]: #669
#659 := [quant-inst]: #657
#661 := [mp #659 #672]: #660
[unit-resolution #661 #750 #188]: false
unsat
a09ca425a49bbf59a7db8aba4b01dbd7473e9c09 317 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#66 := -1::int
#172 := (f4 0::int -1::int)
#175 := (= #172 0::int)
#188 := (not #175)
#38 := 1::int
#39 := (- 1::int)
#40 := (f4 0::int #39)
#41 := (= #40 0::int)
#42 := (not #41)
#191 := (iff #42 #188)
#178 := (= 0::int #172)
#183 := (not #178)
#189 := (iff #183 #188)
#186 := (iff #178 #175)
#187 := [rewrite]: #186
#190 := [monotonicity #187]: #189
#184 := (iff #42 #183)
#181 := (iff #41 #178)
#179 := (iff #175 #178)
#180 := [rewrite]: #179
#176 := (iff #41 #175)
#173 := (= #40 #172)
#170 := (= #39 -1::int)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#182 := [trans #177 #180]: #181
#185 := [monotonicity #182]: #184
#192 := [trans #185 #190]: #191
#169 := [asserted]: #42
#193 := [mp #169 #192]: #188
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#758 := (pattern #29)
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#125 := (mod #67 #70)
#270 := (+ #29 #125)
#271 := (= #270 0::int)
#30 := (mod #8 #9)
#267 := (* -1::int #30)
#268 := (+ #29 #267)
#269 := (= #268 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#209 := (or #88 #92)
#210 := (not #209)
#99 := (>= #8 0::int)
#201 := (or #92 #99)
#202 := (not #201)
#216 := (or #202 #210)
#272 := (ite #216 #269 #271)
#266 := (= #29 0::int)
#12 := (= #8 0::int)
#273 := (ite #12 #266 #272)
#265 := (= #8 #29)
#13 := (= #9 0::int)
#274 := (ite #13 #265 #273)
#759 := (forall (vars (?v0 int) (?v1 int)) (:pat #758) #274)
#277 := (forall (vars (?v0 int) (?v1 int)) #274)
#762 := (iff #277 #759)
#760 := (iff #274 #274)
#761 := [refl]: #760
#763 := [quant-intro #761]: #762
#131 := (* -1::int #125)
#234 := (ite #216 #30 #131)
#237 := (ite #12 0::int #234)
#240 := (ite #13 #8 #237)
#243 := (= #29 #240)
#246 := (forall (vars (?v0 int) (?v1 int)) #243)
#278 := (iff #246 #277)
#275 := (iff #243 #274)
#276 := [rewrite]: #275
#279 := [quant-intro #276]: #278
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#151 := (ite #106 #30 #131)
#154 := (ite #12 0::int #151)
#157 := (ite #13 #8 #154)
#160 := (= #29 #157)
#163 := (forall (vars (?v0 int) (?v1 int)) #160)
#247 := (iff #163 #246)
#244 := (iff #160 #243)
#241 := (= #157 #240)
#238 := (= #154 #237)
#235 := (= #151 #234)
#219 := (iff #106 #216)
#213 := (or #210 #202)
#217 := (iff #213 #216)
#218 := [rewrite]: #217
#214 := (iff #106 #213)
#211 := (iff #103 #202)
#212 := [rewrite]: #211
#199 := (iff #96 #210)
#200 := [rewrite]: #199
#215 := [monotonicity #200 #212]: #214
#220 := [trans #215 #218]: #219
#236 := [monotonicity #220]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [quant-intro #245]: #247
#197 := (~ #163 #163)
#194 := (~ #160 #160)
#207 := [refl]: #194
#198 := [nnf-pos #207]: #197
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#166 := (iff #37 #163)
#60 := (and #16 #18)
#63 := (or #17 #60)
#136 := (ite #63 #30 #131)
#139 := (ite #12 0::int #136)
#142 := (ite #13 #8 #139)
#145 := (= #29 #142)
#148 := (forall (vars (?v0 int) (?v1 int)) #145)
#164 := (iff #148 #163)
#161 := (iff #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#152 := (= #136 #151)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#153 := [monotonicity #108]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#149 := (iff #37 #148)
#146 := (iff #36 #145)
#143 := (= #35 #142)
#140 := (= #34 #139)
#137 := (= #33 #136)
#134 := (= #32 #131)
#128 := (- #125)
#132 := (= #128 #131)
#133 := [rewrite]: #132
#129 := (= #32 #128)
#126 := (= #31 #125)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#127 := [monotonicity #69 #72]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#138 := [monotonicity #65 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#167 := [trans #150 #165]: #166
#124 := [asserted]: #37
#168 := [mp #124 #167]: #163
#208 := [mp~ #168 #198]: #163
#249 := [mp #208 #248]: #246
#280 := [mp #249 #279]: #277
#764 := [mp #280 #763]: #759
#535 := (not #759)
#683 := (or #535 #175)
#338 := (* -1::int -1::int)
#422 := (* -1::int 0::int)
#423 := (mod #422 #338)
#424 := (+ #172 #423)
#415 := (= #424 0::int)
#426 := (mod 0::int -1::int)
#427 := (* -1::int #426)
#428 := (+ #172 #427)
#425 := (= #428 0::int)
#429 := (<= -1::int 0::int)
#408 := (<= 0::int 0::int)
#743 := (or #408 #429)
#745 := (not #743)
#402 := (>= 0::int 0::int)
#532 := (or #429 #402)
#739 := (not #532)
#413 := (or #739 #745)
#414 := (ite #413 #425 #415)
#746 := (= 0::int 0::int)
#747 := (ite #746 #175 #414)
#748 := (= -1::int 0::int)
#749 := (ite #748 #178 #747)
#585 := (or #535 #749)
#681 := (iff #585 #683)
#569 := (iff #683 #683)
#584 := [rewrite]: #569
#575 := (iff #749 #175)
#693 := (ite false #175 #175)
#701 := (iff #693 #175)
#695 := [rewrite]: #701
#692 := (iff #749 #693)
#691 := (iff #747 #175)
#1 := true
#533 := (ite true #175 #175)
#688 := (iff #533 #175)
#690 := [rewrite]: #688
#534 := (iff #747 #533)
#702 := (iff #414 #175)
#694 := (iff #414 #693)
#698 := (iff #415 #175)
#696 := (= #424 #172)
#436 := (+ #172 0::int)
#430 := (= #436 #172)
#712 := [rewrite]: #430
#553 := (= #424 #436)
#711 := (= #423 0::int)
#703 := (mod 0::int 1::int)
#710 := (= #703 0::int)
#705 := [rewrite]: #710
#704 := (= #423 #703)
#707 := (= #338 1::int)
#708 := [rewrite]: #707
#723 := (= #422 0::int)
#433 := [rewrite]: #723
#709 := [monotonicity #433 #708]: #704
#552 := [trans #709 #705]: #711
#554 := [monotonicity #552]: #553
#697 := [trans #554 #712]: #696
#699 := [monotonicity #697]: #698
#717 := (iff #425 #175)
#716 := (= #428 #172)
#714 := (= #428 #436)
#434 := (= #427 0::int)
#722 := (= #427 #422)
#444 := (= #426 0::int)
#718 := [rewrite]: #444
#719 := [monotonicity #718]: #722
#435 := [trans #719 #433]: #434
#715 := [monotonicity #435]: #714
#713 := [trans #715 #712]: #716
#706 := [monotonicity #713]: #717
#721 := (iff #413 false)
#448 := (or false false)
#344 := (iff #448 false)
#720 := [rewrite]: #344
#449 := (iff #413 #448)
#725 := (iff #745 false)
#729 := (not true)
#732 := (iff #729 false)
#727 := [rewrite]: #732
#738 := (iff #745 #729)
#737 := (iff #743 true)
#385 := (or true true)
#390 := (iff #385 true)
#391 := [rewrite]: #390
#376 := (iff #743 #385)
#405 := (iff #429 true)
#741 := [rewrite]: #405
#734 := (iff #408 true)
#736 := [rewrite]: #734
#377 := [monotonicity #736 #741]: #376
#735 := [trans #377 #391]: #737
#724 := [monotonicity #735]: #738
#447 := [trans #724 #727]: #725
#733 := (iff #739 false)
#730 := (iff #739 #729)
#392 := (iff #532 true)
#726 := (iff #532 #385)
#401 := (iff #402 true)
#742 := [rewrite]: #401
#389 := [monotonicity #741 #742]: #726
#728 := [trans #389 #391]: #392
#731 := [monotonicity #728]: #730
#371 := [trans #731 #727]: #733
#450 := [monotonicity #371 #447]: #449
#443 := [trans #450 #720]: #721
#700 := [monotonicity #443 #706 #699]: #694
#531 := [trans #700 #695]: #702
#740 := (iff #746 true)
#400 := [rewrite]: #740
#687 := [monotonicity #400 #531]: #534
#689 := [trans #687 #690]: #691
#744 := (iff #748 false)
#750 := [rewrite]: #744
#574 := [monotonicity #750 #187 #689]: #692
#576 := [trans #574 #695]: #575
#684 := [monotonicity #576]: #681
#586 := [trans #684 #584]: #681
#680 := [quant-inst]: #585
#587 := [mp #680 #586]: #683
[unit-resolution #587 #764 #193]: false
unsat
ef319beaaae1961d7e0fb146b0bd21608ccf741d 362 0
#2 := false
#11 := 0::int
#39 := 1::int
decl f5 :: int
#38 := f5
#68 := -1::int
#177 := (* -1::int f5)
#716 := (div #177 1::int)
#667 := (+ f5 #716)
#674 := (= #667 0::int)
#1 := true
#59 := [true-axiom]: true
#631 := (or false #674)
#632 := [th-lemma]: #631
#633 := [unit-resolution #632 #59]: #674
#663 := (<= #667 0::int)
#557 := (not #663)
decl f3 :: (-> int int int)
#174 := (f3 f5 -1::int)
#186 := (+ f5 #174)
#340 := (<= #186 0::int)
#573 := (not #340)
#424 := (>= #186 0::int)
#690 := (>= #174 0::int)
#750 := (= #174 0::int)
#746 := (= f5 0::int)
#714 := (* -1::int #716)
#719 := (+ #174 #714)
#710 := (= #719 0::int)
#686 := (not #710)
#691 := (>= #719 0::int)
#622 := (not #691)
#634 := (not #424)
#635 := [hypothesis]: #634
#621 := (or #622 #424)
#664 := (>= #667 0::int)
#636 := (not #664)
#630 := [hypothesis]: #691
#618 := (or #636 #622 #424)
#619 := [th-lemma]: #618
#620 := [unit-resolution #619 #630 #635]: #636
#623 := (not #674)
#624 := (or #623 #664)
#625 := [th-lemma]: #624
#626 := [unit-resolution #625 #620 #633]: false
#627 := [lemma #626]: #621
#600 := [unit-resolution #627 #635]: #622
#601 := (or #686 #691)
#602 := [th-lemma]: #601
#495 := [unit-resolution #602 #600]: #686
#607 := (or #746 #710)
#698 := (ite #746 #750 #710)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#753 := (pattern #10)
#72 := (* -1::int #9)
#69 := (* -1::int #8)
#75 := (div #69 #72)
#256 := (* -1::int #75)
#257 := (+ #10 #256)
#258 := (= #257 0::int)
#21 := (div #8 #9)
#253 := (* -1::int #21)
#254 := (+ #10 #253)
#255 := (= #254 0::int)
#94 := (<= #9 0::int)
#90 := (<= #8 0::int)
#211 := (or #90 #94)
#212 := (not #211)
#101 := (>= #8 0::int)
#203 := (or #94 #101)
#204 := (not #203)
#218 := (or #204 #212)
#259 := (ite #218 #255 #258)
#252 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#260 := (ite #14 #252 #259)
#754 := (forall (vars (?v0 int) (?v1 int)) (:pat #753) #260)
#263 := (forall (vars (?v0 int) (?v1 int)) #260)
#757 := (iff #263 #754)
#755 := (iff #260 #260)
#756 := [refl]: #755
#758 := [quant-intro #756]: #757
#223 := (ite #218 #21 #75)
#226 := (ite #14 0::int #223)
#229 := (= #10 #226)
#232 := (forall (vars (?v0 int) (?v1 int)) #229)
#264 := (iff #232 #263)
#261 := (iff #229 #260)
#262 := [rewrite]: #261
#265 := [quant-intro #262]: #264
#102 := (not #101)
#95 := (not #94)
#105 := (and #95 #102)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#111 := (ite #108 #21 #75)
#114 := (ite #14 0::int #111)
#117 := (= #10 #114)
#120 := (forall (vars (?v0 int) (?v1 int)) #117)
#233 := (iff #120 #232)
#230 := (iff #117 #229)
#227 := (= #114 #226)
#224 := (= #111 #223)
#221 := (iff #108 #218)
#215 := (or #212 #204)
#219 := (iff #215 #218)
#220 := [rewrite]: #219
#216 := (iff #108 #215)
#213 := (iff #105 #204)
#214 := [rewrite]: #213
#201 := (iff #98 #212)
#202 := [rewrite]: #201
#217 := [monotonicity #202 #214]: #216
#222 := [trans #217 #220]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [quant-intro #231]: #233
#207 := (~ #120 #120)
#205 := (~ #117 #117)
#206 := [refl]: #205
#208 := [nnf-pos #206]: #207
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#123 := (iff #28 #120)
#62 := (and #16 #18)
#65 := (or #17 #62)
#78 := (ite #65 #21 #75)
#81 := (ite #14 0::int #78)
#84 := (= #10 #81)
#87 := (forall (vars (?v0 int) (?v1 int)) #84)
#121 := (iff #87 #120)
#118 := (iff #84 #117)
#115 := (= #81 #114)
#112 := (= #78 #111)
#109 := (iff #65 #108)
#106 := (iff #62 #105)
#103 := (iff #18 #102)
#104 := [rewrite]: #103
#96 := (iff #16 #95)
#97 := [rewrite]: #96
#107 := [monotonicity #97 #104]: #106
#99 := (iff #17 #98)
#92 := (iff #15 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#88 := (iff #28 #87)
#85 := (iff #27 #84)
#82 := (= #26 #81)
#79 := (= #25 #78)
#76 := (= #24 #75)
#73 := (= #23 #72)
#74 := [rewrite]: #73
#70 := (= #22 #69)
#71 := [rewrite]: #70
#77 := [monotonicity #71 #74]: #76
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#80 := [monotonicity #67 #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#124 := [trans #89 #122]: #123
#61 := [asserted]: #28
#125 := [mp #61 #124]: #120
#198 := [mp~ #125 #208]: #120
#235 := [mp #198 #234]: #232
#266 := [mp #235 #265]: #263
#759 := [mp #266 #758]: #754
#701 := (not #754)
#695 := (or #701 #698)
#425 := (* -1::int -1::int)
#426 := (div #177 #425)
#417 := (* -1::int #426)
#428 := (+ #174 #417)
#429 := (= #428 0::int)
#430 := (div f5 -1::int)
#427 := (* -1::int #430)
#431 := (+ #174 #427)
#410 := (= #431 0::int)
#745 := (<= -1::int 0::int)
#747 := (<= f5 0::int)
#404 := (or #747 #745)
#534 := (not #404)
#741 := (>= f5 0::int)
#415 := (or #745 #741)
#416 := (not #415)
#748 := (or #416 #534)
#749 := (ite #748 #410 #429)
#751 := (= -1::int 0::int)
#752 := (or #746 #751)
#742 := (ite #752 #750 #749)
#696 := (or #701 #742)
#703 := (iff #696 #695)
#704 := (iff #695 #695)
#533 := [rewrite]: #704
#699 := (iff #742 #698)
#555 := (iff #749 #710)
#711 := (ite false #410 #710)
#713 := (iff #711 #710)
#554 := [rewrite]: #713
#712 := (iff #749 #711)
#705 := (iff #429 #710)
#708 := (= #428 #719)
#718 := (= #417 #714)
#717 := (= #426 #716)
#437 := (= #425 1::int)
#438 := [rewrite]: #437
#432 := [monotonicity #438]: #717
#715 := [monotonicity #432]: #718
#709 := [monotonicity #715]: #708
#706 := [monotonicity #709]: #705
#435 := (iff #748 false)
#446 := (or false false)
#721 := (iff #446 false)
#725 := [rewrite]: #721
#720 := (iff #748 #446)
#723 := (iff #534 false)
#373 := (not true)
#378 := (iff #373 false)
#379 := [rewrite]: #378
#346 := (iff #534 #373)
#451 := (iff #404 true)
#740 := (or #747 true)
#449 := (iff #740 true)
#450 := [rewrite]: #449
#726 := (iff #404 #740)
#393 := (iff #745 true)
#394 := [rewrite]: #393
#727 := [monotonicity #394]: #726
#452 := [trans #727 #450]: #451
#722 := [monotonicity #452]: #346
#445 := [trans #722 #379]: #723
#739 := (iff #416 false)
#736 := (iff #416 #373)
#729 := (iff #415 true)
#730 := (or true #741)
#733 := (iff #730 true)
#734 := [rewrite]: #733
#731 := (iff #415 #730)
#732 := [monotonicity #394]: #731
#735 := [trans #732 #734]: #729
#738 := [monotonicity #735]: #736
#737 := [trans #738 #379]: #739
#724 := [monotonicity #737 #445]: #720
#436 := [trans #724 #725]: #435
#707 := [monotonicity #436 #706]: #712
#556 := [trans #707 #554]: #555
#391 := (iff #752 #746)
#743 := (or #746 false)
#387 := (iff #743 #746)
#728 := [rewrite]: #387
#403 := (iff #752 #743)
#402 := (iff #751 false)
#407 := [rewrite]: #402
#744 := [monotonicity #407]: #403
#392 := [trans #744 #728]: #391
#700 := [monotonicity #392 #556]: #699
#697 := [monotonicity #700]: #703
#535 := [trans #697 #533]: #703
#702 := [quant-inst]: #696
#536 := [mp #702 #535]: #695
#606 := [unit-resolution #536 #759]: #698
#694 := (not #698)
#537 := (or #694 #746 #710)
#685 := [def-axiom]: #537
#608 := [unit-resolution #685 #606]: #607
#613 := [unit-resolution #608 #495]: #746
#576 := (not #746)
#609 := (or #576 #750)
#577 := (or #694 #576 #750)
#578 := [def-axiom]: #577
#610 := [unit-resolution #578 #606]: #609
#611 := [unit-resolution #610 #613]: #750
#587 := (not #750)
#614 := (or #587 #690)
#615 := [th-lemma]: #614
#616 := [unit-resolution #615 #611]: #690
#612 := (or #576 #741)
#617 := [th-lemma]: #612
#597 := [unit-resolution #617 #613]: #741
#543 := [th-lemma #597 #635 #616]: false
#598 := [lemma #543]: #424
#570 := (or #573 #634)
#187 := (= #186 0::int)
#190 := (not #187)
#42 := (- f5)
#40 := (- 1::int)
#41 := (f3 f5 #40)
#43 := (= #41 #42)
#44 := (not #43)
#193 := (iff #44 #190)
#180 := (= #174 #177)
#183 := (not #180)
#191 := (iff #183 #190)
#188 := (iff #180 #187)
#189 := [rewrite]: #188
#192 := [monotonicity #189]: #191
#184 := (iff #44 #183)
#181 := (iff #43 #180)
#178 := (= #42 #177)
#179 := [rewrite]: #178
#175 := (= #41 #174)
#172 := (= #40 -1::int)
#173 := [rewrite]: #172
#176 := [monotonicity #173]: #175
#182 := [monotonicity #176 #179]: #181
#185 := [monotonicity #182]: #184
#194 := [trans #185 #192]: #193
#171 := [asserted]: #44
#195 := [mp #171 #194]: #190
#580 := (or #187 #573 #634)
#539 := [th-lemma]: #580
#572 := [unit-resolution #539 #195]: #570
#574 := [unit-resolution #572 #598]: #573
#693 := (<= #719 0::int)
#689 := (<= #174 0::int)
#579 := [hypothesis]: #746
#603 := [unit-resolution #610 #579]: #750
#604 := (or #587 #689)
#599 := [th-lemma]: #604
#605 := [unit-resolution #599 #603]: #689
#581 := (or #576 #747)
#583 := [th-lemma]: #581
#584 := [unit-resolution #583 #579]: #747
#585 := [th-lemma #584 #574 #605]: false
#595 := [lemma #585]: #576
#575 := [unit-resolution #608 #595]: #710
#596 := (or #686 #693)
#551 := [th-lemma]: #596
#552 := [unit-resolution #551 #575]: #693
#558 := (not #693)
#559 := (or #557 #558 #340)
#560 := [th-lemma]: #559
#561 := [unit-resolution #560 #552 #574]: #557
#562 := (or #623 #663)
#563 := [th-lemma]: #562
[unit-resolution #563 #561 #633]: false
unsat
07f15f3f61db6e3805237fa8c50e95e2181bdd46 327 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#66 := -1::int
#38 := 1::int
#172 := (f4 1::int -1::int)
#175 := (= #172 0::int)
#188 := (not #175)
#39 := (- 1::int)
#40 := (f4 1::int #39)
#41 := (= #40 0::int)
#42 := (not #41)
#191 := (iff #42 #188)
#178 := (= 0::int #172)
#183 := (not #178)
#189 := (iff #183 #188)
#186 := (iff #178 #175)
#187 := [rewrite]: #186
#190 := [monotonicity #187]: #189
#184 := (iff #42 #183)
#181 := (iff #41 #178)
#179 := (iff #175 #178)
#180 := [rewrite]: #179
#176 := (iff #41 #175)
#173 := (= #40 #172)
#170 := (= #39 -1::int)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#182 := [trans #177 #180]: #181
#185 := [monotonicity #182]: #184
#192 := [trans #185 #190]: #191
#169 := [asserted]: #42
#193 := [mp #169 #192]: #188
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#758 := (pattern #29)
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#125 := (mod #67 #70)
#270 := (+ #29 #125)
#271 := (= #270 0::int)
#30 := (mod #8 #9)
#267 := (* -1::int #30)
#268 := (+ #29 #267)
#269 := (= #268 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#209 := (or #88 #92)
#210 := (not #209)
#99 := (>= #8 0::int)
#201 := (or #92 #99)
#202 := (not #201)
#216 := (or #202 #210)
#272 := (ite #216 #269 #271)
#266 := (= #29 0::int)
#12 := (= #8 0::int)
#273 := (ite #12 #266 #272)
#265 := (= #8 #29)
#13 := (= #9 0::int)
#274 := (ite #13 #265 #273)
#759 := (forall (vars (?v0 int) (?v1 int)) (:pat #758) #274)
#277 := (forall (vars (?v0 int) (?v1 int)) #274)
#762 := (iff #277 #759)
#760 := (iff #274 #274)
#761 := [refl]: #760
#763 := [quant-intro #761]: #762
#131 := (* -1::int #125)
#234 := (ite #216 #30 #131)
#237 := (ite #12 0::int #234)
#240 := (ite #13 #8 #237)
#243 := (= #29 #240)
#246 := (forall (vars (?v0 int) (?v1 int)) #243)
#278 := (iff #246 #277)
#275 := (iff #243 #274)
#276 := [rewrite]: #275
#279 := [quant-intro #276]: #278
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#151 := (ite #106 #30 #131)
#154 := (ite #12 0::int #151)
#157 := (ite #13 #8 #154)
#160 := (= #29 #157)
#163 := (forall (vars (?v0 int) (?v1 int)) #160)
#247 := (iff #163 #246)
#244 := (iff #160 #243)
#241 := (= #157 #240)
#238 := (= #154 #237)
#235 := (= #151 #234)
#219 := (iff #106 #216)
#213 := (or #210 #202)
#217 := (iff #213 #216)
#218 := [rewrite]: #217
#214 := (iff #106 #213)
#211 := (iff #103 #202)
#212 := [rewrite]: #211
#199 := (iff #96 #210)
#200 := [rewrite]: #199
#215 := [monotonicity #200 #212]: #214
#220 := [trans #215 #218]: #219
#236 := [monotonicity #220]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [quant-intro #245]: #247
#197 := (~ #163 #163)
#194 := (~ #160 #160)
#207 := [refl]: #194
#198 := [nnf-pos #207]: #197
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#166 := (iff #37 #163)
#60 := (and #16 #18)
#63 := (or #17 #60)
#136 := (ite #63 #30 #131)
#139 := (ite #12 0::int #136)
#142 := (ite #13 #8 #139)
#145 := (= #29 #142)
#148 := (forall (vars (?v0 int) (?v1 int)) #145)
#164 := (iff #148 #163)
#161 := (iff #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#152 := (= #136 #151)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#153 := [monotonicity #108]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#149 := (iff #37 #148)
#146 := (iff #36 #145)
#143 := (= #35 #142)
#140 := (= #34 #139)
#137 := (= #33 #136)
#134 := (= #32 #131)
#128 := (- #125)
#132 := (= #128 #131)
#133 := [rewrite]: #132
#129 := (= #32 #128)
#126 := (= #31 #125)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#127 := [monotonicity #69 #72]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#138 := [monotonicity #65 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#167 := [trans #150 #165]: #166
#124 := [asserted]: #37
#168 := [mp #124 #167]: #163
#208 := [mp~ #168 #198]: #163
#249 := [mp #208 #248]: #246
#280 := [mp #249 #279]: #277
#764 := [mp #280 #763]: #759
#580 := (not #759)
#588 := (or #580 #175)
#338 := (* -1::int -1::int)
#422 := (* -1::int 1::int)
#423 := (mod #422 #338)
#424 := (+ #172 #423)
#415 := (= #424 0::int)
#426 := (mod 1::int -1::int)
#427 := (* -1::int #426)
#428 := (+ #172 #427)
#425 := (= #428 0::int)
#429 := (<= -1::int 0::int)
#408 := (<= 1::int 0::int)
#743 := (or #408 #429)
#745 := (not #743)
#402 := (>= 1::int 0::int)
#532 := (or #429 #402)
#739 := (not #532)
#413 := (or #739 #745)
#414 := (ite #413 #425 #415)
#746 := (= 1::int 0::int)
#747 := (ite #746 #175 #414)
#748 := (= 1::int #172)
#749 := (= -1::int 0::int)
#744 := (ite #749 #748 #747)
#589 := (or #580 #744)
#591 := (iff #589 #588)
#685 := (iff #588 #588)
#682 := [rewrite]: #685
#586 := (iff #744 #175)
#405 := (= #172 1::int)
#680 := (ite false #405 #175)
#569 := (iff #680 #175)
#584 := [rewrite]: #569
#681 := (iff #744 #680)
#683 := (iff #747 #175)
#688 := (ite false #175 #175)
#689 := (iff #688 #175)
#692 := [rewrite]: #689
#576 := (iff #747 #688)
#574 := (iff #414 #175)
#690 := (iff #414 #688)
#534 := (iff #415 #175)
#531 := (= #424 #172)
#706 := (+ #172 0::int)
#703 := (= #706 #172)
#704 := [rewrite]: #703
#695 := (= #424 #706)
#700 := (= #423 0::int)
#697 := (mod -1::int 1::int)
#693 := (= #697 0::int)
#694 := [rewrite]: #693
#698 := (= #423 #697)
#554 := (= #338 1::int)
#696 := [rewrite]: #554
#552 := (= #422 -1::int)
#553 := [rewrite]: #552
#699 := [monotonicity #553 #696]: #698
#701 := [trans #699 #694]: #700
#702 := [monotonicity #701]: #695
#533 := [trans #702 #704]: #531
#687 := [monotonicity #533]: #534
#705 := (iff #425 #175)
#709 := (= #428 #172)
#707 := (= #428 #706)
#713 := (= #427 0::int)
#714 := (* -1::int 0::int)
#712 := (= #714 0::int)
#716 := [rewrite]: #712
#715 := (= #427 #714)
#435 := (= #426 0::int)
#436 := [rewrite]: #435
#430 := [monotonicity #436]: #715
#717 := [trans #430 #716]: #713
#708 := [monotonicity #717]: #707
#710 := [trans #708 #704]: #709
#711 := [monotonicity #710]: #705
#433 := (iff #413 false)
#444 := (or false false)
#719 := (iff #444 false)
#723 := [rewrite]: #719
#718 := (iff #413 #444)
#721 := (iff #745 false)
#1 := true
#727 := (not true)
#734 := (iff #727 false)
#736 := [rewrite]: #734
#344 := (iff #745 #727)
#449 := (iff #743 true)
#738 := (or false true)
#447 := (iff #738 true)
#448 := [rewrite]: #447
#724 := (iff #743 #738)
#385 := (iff #429 true)
#726 := [rewrite]: #385
#737 := (iff #408 false)
#735 := [rewrite]: #737
#725 := [monotonicity #735 #726]: #724
#450 := [trans #725 #448]: #449
#720 := [monotonicity #450]: #344
#443 := [trans #720 #736]: #721
#376 := (iff #739 false)
#733 := (iff #739 #727)
#731 := (iff #532 true)
#391 := (or true true)
#729 := (iff #391 true)
#730 := [rewrite]: #729
#392 := (iff #532 #391)
#389 := (iff #402 true)
#390 := [rewrite]: #389
#728 := [monotonicity #726 #390]: #392
#732 := [trans #728 #730]: #731
#371 := [monotonicity #732]: #733
#377 := [trans #371 #736]: #376
#722 := [monotonicity #377 #443]: #718
#434 := [trans #722 #723]: #433
#691 := [monotonicity #434 #711 #687]: #690
#575 := [trans #691 #692]: #574
#401 := (iff #746 false)
#742 := [rewrite]: #401
#535 := [monotonicity #742 #575]: #576
#585 := [trans #535 #692]: #683
#400 := (iff #748 #405)
#741 := [rewrite]: #400
#750 := (iff #749 false)
#740 := [rewrite]: #750
#684 := [monotonicity #740 #741 #585]: #681
#587 := [trans #684 #584]: #586
#592 := [monotonicity #587]: #591
#686 := [trans #592 #682]: #591
#590 := [quant-inst]: #589
#673 := [mp #590 #686]: #588
[unit-resolution #673 #764 #193]: false
unsat
24bbfda15529f2b078998e7a57a330dfd637cef3 282 0
#2 := false
#11 := 0::int
decl f3 :: (-> int int int)
#38 := 3::int
#39 := (f3 0::int 3::int)
#40 := (= #39 0::int)
#41 := (not #40)
#168 := [asserted]: #41
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#737 := (pattern #10)
#65 := -1::int
#69 := (* -1::int #9)
#66 := (* -1::int #8)
#72 := (div #66 #69)
#239 := (* -1::int #72)
#240 := (+ #10 #239)
#241 := (= #240 0::int)
#21 := (div #8 #9)
#236 := (* -1::int #21)
#237 := (+ #10 #236)
#238 := (= #237 0::int)
#91 := (<= #9 0::int)
#87 := (<= #8 0::int)
#194 := (or #87 #91)
#195 := (not #194)
#98 := (>= #8 0::int)
#186 := (or #91 #98)
#187 := (not #186)
#201 := (or #187 #195)
#242 := (ite #201 #238 #241)
#235 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#243 := (ite #14 #235 #242)
#738 := (forall (vars (?v0 int) (?v1 int)) (:pat #737) #243)
#246 := (forall (vars (?v0 int) (?v1 int)) #243)
#741 := (iff #246 #738)
#739 := (iff #243 #243)
#740 := [refl]: #739
#742 := [quant-intro #740]: #741
#206 := (ite #201 #21 #72)
#209 := (ite #14 0::int #206)
#212 := (= #10 #209)
#215 := (forall (vars (?v0 int) (?v1 int)) #212)
#247 := (iff #215 #246)
#244 := (iff #212 #243)
#245 := [rewrite]: #244
#248 := [quant-intro #245]: #247
#99 := (not #98)
#92 := (not #91)
#102 := (and #92 #99)
#88 := (not #87)
#95 := (and #88 #92)
#105 := (or #95 #102)
#108 := (ite #105 #21 #72)
#111 := (ite #14 0::int #108)
#114 := (= #10 #111)
#117 := (forall (vars (?v0 int) (?v1 int)) #114)
#216 := (iff #117 #215)
#213 := (iff #114 #212)
#210 := (= #111 #209)
#207 := (= #108 #206)
#204 := (iff #105 #201)
#198 := (or #195 #187)
#202 := (iff #198 #201)
#203 := [rewrite]: #202
#199 := (iff #105 #198)
#196 := (iff #102 #187)
#197 := [rewrite]: #196
#184 := (iff #95 #195)
#185 := [rewrite]: #184
#200 := [monotonicity #185 #197]: #199
#205 := [trans #200 #203]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [quant-intro #214]: #216
#190 := (~ #117 #117)
#188 := (~ #114 #114)
#189 := [refl]: #188
#191 := [nnf-pos #189]: #190
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#120 := (iff #28 #117)
#59 := (and #16 #18)
#62 := (or #17 #59)
#75 := (ite #62 #21 #72)
#78 := (ite #14 0::int #75)
#81 := (= #10 #78)
#84 := (forall (vars (?v0 int) (?v1 int)) #81)
#118 := (iff #84 #117)
#115 := (iff #81 #114)
#112 := (= #78 #111)
#109 := (= #75 #108)
#106 := (iff #62 #105)
#103 := (iff #59 #102)
#100 := (iff #18 #99)
#101 := [rewrite]: #100
#93 := (iff #16 #92)
#94 := [rewrite]: #93
#104 := [monotonicity #94 #101]: #103
#96 := (iff #17 #95)
#89 := (iff #15 #88)
#90 := [rewrite]: #89
#97 := [monotonicity #90 #94]: #96
#107 := [monotonicity #97 #104]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#85 := (iff #28 #84)
#82 := (iff #27 #81)
#79 := (= #26 #78)
#76 := (= #25 #75)
#73 := (= #24 #72)
#70 := (= #23 #69)
#71 := [rewrite]: #70
#67 := (= #22 #66)
#68 := [rewrite]: #67
#74 := [monotonicity #68 #71]: #73
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#77 := [monotonicity #64 #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#86 := [quant-intro #83]: #85
#121 := [trans #86 #119]: #120
#58 := [asserted]: #28
#122 := [mp #58 #121]: #117
#181 := [mp~ #122 #191]: #117
#218 := [mp #181 #217]: #215
#249 := [mp #218 #248]: #246
#743 := [mp #249 #742]: #738
#572 := (not #738)
#573 := (or #572 #40)
#323 := (* -1::int 3::int)
#408 := (* -1::int 0::int)
#409 := (div #408 #323)
#410 := (* -1::int #409)
#401 := (+ #39 #410)
#412 := (= #401 0::int)
#413 := (div 0::int 3::int)
#341 := (* -1::int #413)
#414 := (+ #39 #341)
#411 := (= #414 0::int)
#415 := (<= 3::int 0::int)
#394 := (<= 0::int 0::int)
#729 := (or #394 #415)
#731 := (not #729)
#388 := (>= 0::int 0::int)
#518 := (or #415 #388)
#725 := (not #518)
#399 := (or #725 #731)
#400 := (ite #399 #411 #412)
#732 := (= 3::int 0::int)
#733 := (= 0::int 0::int)
#734 := (or #733 #732)
#735 := (ite #734 #40 #400)
#566 := (or #572 #735)
#575 := (iff #566 #573)
#577 := (iff #573 #573)
#578 := [rewrite]: #577
#555 := (iff #735 #40)
#1 := true
#669 := (ite true #40 #40)
#667 := (iff #669 #40)
#670 := [rewrite]: #667
#571 := (iff #735 #669)
#562 := (iff #400 #40)
#677 := (ite false #40 #40)
#560 := (iff #677 #40)
#561 := [rewrite]: #560
#675 := (iff #400 #677)
#674 := (iff #412 #40)
#520 := (= #401 #39)
#703 := (+ #39 0::int)
#694 := (= #703 #39)
#689 := [rewrite]: #694
#517 := (= #401 #703)
#681 := (= #410 0::int)
#416 := (= #408 0::int)
#698 := [rewrite]: #416
#686 := (= #410 #408)
#679 := (= #409 0::int)
#697 := -3::int
#540 := (div 0::int -3::int)
#684 := (= #540 0::int)
#685 := [rewrite]: #684
#682 := (= #409 #540)
#538 := (= #323 -3::int)
#539 := [rewrite]: #538
#683 := [monotonicity #698 #539]: #682
#680 := [trans #683 #685]: #679
#687 := [monotonicity #680]: #686
#688 := [trans #687 #698]: #681
#519 := [monotonicity #688]: #517
#673 := [trans #519 #689]: #520
#676 := [monotonicity #673]: #674
#696 := (iff #411 #40)
#690 := (= #414 #39)
#692 := (= #414 #703)
#702 := (= #341 0::int)
#700 := (= #341 #408)
#421 := (= #413 0::int)
#422 := [rewrite]: #421
#701 := [monotonicity #422]: #700
#699 := [trans #701 #698]: #702
#693 := [monotonicity #699]: #692
#695 := [trans #693 #689]: #690
#691 := [monotonicity #695]: #696
#419 := (iff #399 false)
#430 := (or false false)
#705 := (iff #430 false)
#709 := [rewrite]: #705
#704 := (iff #399 #430)
#707 := (iff #731 false)
#720 := (not true)
#363 := (iff #720 false)
#723 := [rewrite]: #363
#329 := (iff #731 #720)
#435 := (iff #729 true)
#391 := (or true false)
#728 := (iff #391 true)
#371 := [rewrite]: #728
#433 := (iff #729 #391)
#376 := (iff #415 false)
#377 := [rewrite]: #376
#710 := (iff #394 true)
#711 := [rewrite]: #710
#434 := [monotonicity #711 #377]: #433
#436 := [trans #434 #371]: #435
#706 := [monotonicity #436]: #329
#429 := [trans #706 #723]: #707
#721 := (iff #725 false)
#722 := (iff #725 #720)
#719 := (iff #518 true)
#715 := (or false true)
#718 := (iff #715 true)
#713 := [rewrite]: #718
#716 := (iff #518 #715)
#378 := (iff #388 true)
#714 := [rewrite]: #378
#717 := [monotonicity #377 #714]: #716
#357 := [trans #717 #713]: #719
#362 := [monotonicity #357]: #722
#724 := [trans #362 #723]: #721
#708 := [monotonicity #724 #429]: #704
#420 := [trans #708 #709]: #419
#678 := [monotonicity #420 #691 #676]: #675
#521 := [trans #678 #561]: #562
#712 := (iff #734 true)
#727 := (iff #734 #391)
#726 := (iff #732 false)
#386 := [rewrite]: #726
#730 := (iff #733 true)
#736 := [rewrite]: #730
#387 := [monotonicity #736 #386]: #727
#375 := [trans #387 #371]: #712
#666 := [monotonicity #375 #521]: #571
#570 := [trans #666 #670]: #555
#576 := [monotonicity #570]: #575
#671 := [trans #576 #578]: #575
#574 := [quant-inst]: #566
#668 := [mp #574 #671]: #573
[unit-resolution #668 #743 #168]: false
unsat
8144b6d093845ae8dee3931af66c9361d99b4453 329 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#67 := -1::int
#38 := 3::int
#173 := (f4 3::int -1::int)
#176 := (= #173 0::int)
#189 := (not #176)
#39 := 1::int
#40 := (- 1::int)
#41 := (f4 3::int #40)
#42 := (= #41 0::int)
#43 := (not #42)
#192 := (iff #43 #189)
#179 := (= 0::int #173)
#184 := (not #179)
#190 := (iff #184 #189)
#187 := (iff #179 #176)
#188 := [rewrite]: #187
#191 := [monotonicity #188]: #190
#185 := (iff #43 #184)
#182 := (iff #42 #179)
#180 := (iff #176 #179)
#181 := [rewrite]: #180
#177 := (iff #42 #176)
#174 := (= #41 #173)
#171 := (= #40 -1::int)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#183 := [trans #178 #181]: #182
#186 := [monotonicity #183]: #185
#193 := [trans #186 #191]: #192
#170 := [asserted]: #43
#194 := [mp #170 #193]: #189
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#759 := (pattern #29)
#71 := (* -1::int #9)
#68 := (* -1::int #8)
#126 := (mod #68 #71)
#271 := (+ #29 #126)
#272 := (= #271 0::int)
#30 := (mod #8 #9)
#268 := (* -1::int #30)
#269 := (+ #29 #268)
#270 := (= #269 0::int)
#93 := (<= #9 0::int)
#89 := (<= #8 0::int)
#210 := (or #89 #93)
#211 := (not #210)
#100 := (>= #8 0::int)
#202 := (or #93 #100)
#203 := (not #202)
#217 := (or #203 #211)
#273 := (ite #217 #270 #272)
#267 := (= #29 0::int)
#12 := (= #8 0::int)
#274 := (ite #12 #267 #273)
#266 := (= #8 #29)
#13 := (= #9 0::int)
#275 := (ite #13 #266 #274)
#760 := (forall (vars (?v0 int) (?v1 int)) (:pat #759) #275)
#278 := (forall (vars (?v0 int) (?v1 int)) #275)
#763 := (iff #278 #760)
#761 := (iff #275 #275)
#762 := [refl]: #761
#764 := [quant-intro #762]: #763
#132 := (* -1::int #126)
#235 := (ite #217 #30 #132)
#238 := (ite #12 0::int #235)
#241 := (ite #13 #8 #238)
#244 := (= #29 #241)
#247 := (forall (vars (?v0 int) (?v1 int)) #244)
#279 := (iff #247 #278)
#276 := (iff #244 #275)
#277 := [rewrite]: #276
#280 := [quant-intro #277]: #279
#101 := (not #100)
#94 := (not #93)
#104 := (and #94 #101)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#152 := (ite #107 #30 #132)
#155 := (ite #12 0::int #152)
#158 := (ite #13 #8 #155)
#161 := (= #29 #158)
#164 := (forall (vars (?v0 int) (?v1 int)) #161)
#248 := (iff #164 #247)
#245 := (iff #161 #244)
#242 := (= #158 #241)
#239 := (= #155 #238)
#236 := (= #152 #235)
#220 := (iff #107 #217)
#214 := (or #211 #203)
#218 := (iff #214 #217)
#219 := [rewrite]: #218
#215 := (iff #107 #214)
#212 := (iff #104 #203)
#213 := [rewrite]: #212
#200 := (iff #97 #211)
#201 := [rewrite]: #200
#216 := [monotonicity #201 #213]: #215
#221 := [trans #216 #219]: #220
#237 := [monotonicity #221]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#198 := (~ #164 #164)
#195 := (~ #161 #161)
#208 := [refl]: #195
#199 := [nnf-pos #208]: #198
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#167 := (iff #37 #164)
#61 := (and #16 #18)
#64 := (or #17 #61)
#137 := (ite #64 #30 #132)
#140 := (ite #12 0::int #137)
#143 := (ite #13 #8 #140)
#146 := (= #29 #143)
#149 := (forall (vars (?v0 int) (?v1 int)) #146)
#165 := (iff #149 #164)
#162 := (iff #146 #161)
#159 := (= #143 #158)
#156 := (= #140 #155)
#153 := (= #137 #152)
#108 := (iff #64 #107)
#105 := (iff #61 #104)
#102 := (iff #18 #101)
#103 := [rewrite]: #102
#95 := (iff #16 #94)
#96 := [rewrite]: #95
#106 := [monotonicity #96 #103]: #105
#98 := (iff #17 #97)
#91 := (iff #15 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#154 := [monotonicity #109]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#150 := (iff #37 #149)
#147 := (iff #36 #146)
#144 := (= #35 #143)
#141 := (= #34 #140)
#138 := (= #33 #137)
#135 := (= #32 #132)
#129 := (- #126)
#133 := (= #129 #132)
#134 := [rewrite]: #133
#130 := (= #32 #129)
#127 := (= #31 #126)
#72 := (= #23 #71)
#73 := [rewrite]: #72
#69 := (= #22 #68)
#70 := [rewrite]: #69
#128 := [monotonicity #70 #73]: #127
#131 := [monotonicity #128]: #130
#136 := [trans #131 #134]: #135
#65 := (iff #20 #64)
#62 := (iff #19 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#139 := [monotonicity #66 #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#168 := [trans #151 #166]: #167
#125 := [asserted]: #37
#169 := [mp #125 #168]: #164
#209 := [mp~ #169 #199]: #164
#250 := [mp #209 #249]: #247
#281 := [mp #250 #280]: #278
#765 := [mp #281 #764]: #760
#589 := (not #760)
#590 := (or #589 #176)
#339 := (* -1::int -1::int)
#423 := (* -1::int 3::int)
#424 := (mod #423 #339)
#425 := (+ #173 #424)
#416 := (= #425 0::int)
#427 := (mod 3::int -1::int)
#428 := (* -1::int #427)
#429 := (+ #173 #428)
#426 := (= #429 0::int)
#430 := (<= -1::int 0::int)
#409 := (<= 3::int 0::int)
#744 := (or #409 #430)
#746 := (not #744)
#403 := (>= 3::int 0::int)
#533 := (or #430 #403)
#740 := (not #533)
#414 := (or #740 #746)
#415 := (ite #414 #426 #416)
#747 := (= 3::int 0::int)
#748 := (ite #747 #176 #415)
#749 := (= 3::int #173)
#750 := (= -1::int 0::int)
#745 := (ite #750 #749 #748)
#591 := (or #589 #745)
#593 := (iff #591 #590)
#683 := (iff #590 #590)
#687 := [rewrite]: #683
#588 := (iff #745 #176)
#406 := (= #173 3::int)
#682 := (ite false #406 #176)
#585 := (iff #682 #176)
#587 := [rewrite]: #585
#685 := (iff #745 #682)
#586 := (iff #748 #176)
#691 := (ite false #176 #176)
#693 := (iff #691 #176)
#575 := [rewrite]: #693
#536 := (iff #748 #691)
#576 := (iff #415 #176)
#692 := (iff #415 #691)
#688 := (iff #416 #176)
#534 := (= #425 #173)
#707 := (+ #173 0::int)
#704 := (= #707 #173)
#705 := [rewrite]: #704
#703 := (= #425 #707)
#702 := (= #424 0::int)
#553 := -3::int
#699 := (mod -3::int 1::int)
#695 := (= #699 0::int)
#701 := [rewrite]: #695
#700 := (= #424 #699)
#697 := (= #339 1::int)
#698 := [rewrite]: #697
#554 := (= #423 -3::int)
#555 := [rewrite]: #554
#694 := [monotonicity #555 #698]: #700
#696 := [trans #694 #701]: #702
#532 := [monotonicity #696]: #703
#535 := [trans #532 #705]: #534
#689 := [monotonicity #535]: #688
#706 := (iff #426 #176)
#710 := (= #429 #173)
#708 := (= #429 #707)
#714 := (= #428 0::int)
#715 := (* -1::int 0::int)
#713 := (= #715 0::int)
#717 := [rewrite]: #713
#716 := (= #428 #715)
#436 := (= #427 0::int)
#437 := [rewrite]: #436
#431 := [monotonicity #437]: #716
#718 := [trans #431 #717]: #714
#709 := [monotonicity #718]: #708
#711 := [trans #709 #705]: #710
#712 := [monotonicity #711]: #706
#434 := (iff #414 false)
#445 := (or false false)
#720 := (iff #445 false)
#724 := [rewrite]: #720
#719 := (iff #414 #445)
#722 := (iff #746 false)
#1 := true
#728 := (not true)
#735 := (iff #728 false)
#737 := [rewrite]: #735
#345 := (iff #746 #728)
#450 := (iff #744 true)
#739 := (or false true)
#448 := (iff #739 true)
#449 := [rewrite]: #448
#725 := (iff #744 #739)
#386 := (iff #430 true)
#727 := [rewrite]: #386
#738 := (iff #409 false)
#736 := [rewrite]: #738
#726 := [monotonicity #736 #727]: #725
#451 := [trans #726 #449]: #450
#721 := [monotonicity #451]: #345
#444 := [trans #721 #737]: #722
#377 := (iff #740 false)
#734 := (iff #740 #728)
#732 := (iff #533 true)
#392 := (or true true)
#730 := (iff #392 true)
#731 := [rewrite]: #730
#393 := (iff #533 #392)
#390 := (iff #403 true)
#391 := [rewrite]: #390
#729 := [monotonicity #727 #391]: #393
#733 := [trans #729 #731]: #732
#372 := [monotonicity #733]: #734
#378 := [trans #372 #737]: #377
#723 := [monotonicity #378 #444]: #719
#435 := [trans #723 #724]: #434
#690 := [monotonicity #435 #712 #689]: #692
#577 := [trans #690 #575]: #576
#402 := (iff #747 false)
#743 := [rewrite]: #402
#684 := [monotonicity #743 #577]: #536
#681 := [trans #684 #575]: #586
#401 := (iff #749 #406)
#742 := [rewrite]: #401
#751 := (iff #750 false)
#741 := [rewrite]: #751
#570 := [monotonicity #741 #742 #681]: #685
#581 := [trans #570 #587]: #588
#686 := [monotonicity #581]: #593
#674 := [trans #686 #687]: #593
#592 := [quant-inst]: #591
#676 := [mp #592 #674]: #590
[unit-resolution #676 #765 #194]: false
unsat
12ef6b4ae9675610f423327a4c22119f401927ad 307 0
#2 := false
#11 := 0::int
decl f3 :: (-> int int int)
#170 := -3::int
#173 := (f3 0::int -3::int)
#176 := (= #173 0::int)
#189 := (not #176)
#38 := 3::int
#39 := (- 3::int)
#40 := (f3 0::int #39)
#41 := (= #40 0::int)
#42 := (not #41)
#192 := (iff #42 #189)
#179 := (= 0::int #173)
#184 := (not #179)
#190 := (iff #184 #189)
#187 := (iff #179 #176)
#188 := [rewrite]: #187
#191 := [monotonicity #188]: #190
#185 := (iff #42 #184)
#182 := (iff #41 #179)
#180 := (iff #176 #179)
#181 := [rewrite]: #180
#177 := (iff #41 #176)
#174 := (= #40 #173)
#171 := (= #39 -3::int)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#183 := [trans #178 #181]: #182
#186 := [monotonicity #183]: #185
#193 := [trans #186 #191]: #192
#169 := [asserted]: #42
#194 := [mp #169 #193]: #189
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#753 := (pattern #10)
#66 := -1::int
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#73 := (div #67 #70)
#255 := (* -1::int #73)
#256 := (+ #10 #255)
#257 := (= #256 0::int)
#21 := (div #8 #9)
#252 := (* -1::int #21)
#253 := (+ #10 #252)
#254 := (= #253 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#210 := (or #88 #92)
#211 := (not #210)
#99 := (>= #8 0::int)
#202 := (or #92 #99)
#203 := (not #202)
#217 := (or #203 #211)
#258 := (ite #217 #254 #257)
#251 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#259 := (ite #14 #251 #258)
#754 := (forall (vars (?v0 int) (?v1 int)) (:pat #753) #259)
#262 := (forall (vars (?v0 int) (?v1 int)) #259)
#757 := (iff #262 #754)
#755 := (iff #259 #259)
#756 := [refl]: #755
#758 := [quant-intro #756]: #757
#222 := (ite #217 #21 #73)
#225 := (ite #14 0::int #222)
#228 := (= #10 #225)
#231 := (forall (vars (?v0 int) (?v1 int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#109 := (ite #106 #21 #73)
#112 := (ite #14 0::int #109)
#115 := (= #10 #112)
#118 := (forall (vars (?v0 int) (?v1 int)) #115)
#232 := (iff #118 #231)
#229 := (iff #115 #228)
#226 := (= #112 #225)
#223 := (= #109 #222)
#220 := (iff #106 #217)
#214 := (or #211 #203)
#218 := (iff #214 #217)
#219 := [rewrite]: #218
#215 := (iff #106 #214)
#212 := (iff #103 #203)
#213 := [rewrite]: #212
#200 := (iff #96 #211)
#201 := [rewrite]: #200
#216 := [monotonicity #201 #213]: #215
#221 := [trans #216 #219]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#206 := (~ #118 #118)
#204 := (~ #115 #115)
#205 := [refl]: #204
#207 := [nnf-pos #205]: #206
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#121 := (iff #28 #118)
#60 := (and #16 #18)
#63 := (or #17 #60)
#76 := (ite #63 #21 #73)
#79 := (ite #14 0::int #76)
#82 := (= #10 #79)
#85 := (forall (vars (?v0 int) (?v1 int)) #82)
#119 := (iff #85 #118)
#116 := (iff #82 #115)
#113 := (= #79 #112)
#110 := (= #76 #109)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [quant-intro #117]: #119
#86 := (iff #28 #85)
#83 := (iff #27 #82)
#80 := (= #26 #79)
#77 := (= #25 #76)
#74 := (= #24 #73)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#78 := [monotonicity #65 #75]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#87 := [quant-intro #84]: #86
#122 := [trans #87 #120]: #121
#59 := [asserted]: #28
#123 := [mp #59 #122]: #118
#197 := [mp~ #123 #207]: #118
#234 := [mp #197 #233]: #231
#265 := [mp #234 #264]: #262
#759 := [mp #265 #758]: #754
#586 := (not #754)
#588 := (or #586 #176)
#339 := (* -1::int -3::int)
#424 := (* -1::int 0::int)
#425 := (div #424 #339)
#426 := (* -1::int #425)
#417 := (+ #173 #426)
#428 := (= #417 0::int)
#429 := (div 0::int -3::int)
#357 := (* -1::int #429)
#430 := (+ #173 #357)
#427 := (= #430 0::int)
#431 := (<= -3::int 0::int)
#410 := (<= 0::int 0::int)
#745 := (or #410 #431)
#747 := (not #745)
#404 := (>= 0::int 0::int)
#534 := (or #431 #404)
#741 := (not #534)
#415 := (or #741 #747)
#416 := (ite #415 #427 #428)
#748 := (= -3::int 0::int)
#749 := (= 0::int 0::int)
#750 := (or #749 #748)
#751 := (ite #750 #176 #416)
#589 := (or #586 #751)
#590 := (iff #589 #588)
#592 := (iff #588 #588)
#593 := [rewrite]: #592
#686 := (iff #751 #176)
#1 := true
#537 := (ite true #176 #176)
#682 := (iff #537 #176)
#683 := [rewrite]: #682
#685 := (iff #751 #537)
#577 := (iff #416 #176)
#692 := (ite false #176 #176)
#694 := (iff #692 #176)
#576 := [rewrite]: #694
#693 := (iff #416 #692)
#689 := (iff #428 #176)
#535 := (= #417 #173)
#719 := (+ #173 0::int)
#710 := (= #719 #173)
#705 := [rewrite]: #710
#704 := (= #417 #719)
#703 := (= #426 0::int)
#432 := (= #424 0::int)
#714 := [rewrite]: #432
#696 := (= #426 #424)
#701 := (= #425 0::int)
#555 := (div 0::int 3::int)
#699 := (= #555 0::int)
#700 := [rewrite]: #699
#556 := (= #425 #555)
#713 := (= #339 3::int)
#554 := [rewrite]: #713
#698 := [monotonicity #714 #554]: #556
#695 := [trans #698 #700]: #701
#702 := [monotonicity #695]: #696
#697 := [trans #702 #714]: #703
#533 := [monotonicity #697]: #704
#536 := [trans #533 #705]: #535
#690 := [monotonicity #536]: #689
#712 := (iff #427 #176)
#706 := (= #430 #173)
#708 := (= #430 #719)
#718 := (= #357 0::int)
#716 := (= #357 #424)
#437 := (= #429 0::int)
#438 := [rewrite]: #437
#717 := [monotonicity #438]: #716
#715 := [trans #717 #714]: #718
#709 := [monotonicity #715]: #708
#711 := [trans #709 #705]: #706
#707 := [monotonicity #711]: #712
#435 := (iff #415 false)
#446 := (or false false)
#721 := (iff #446 false)
#725 := [rewrite]: #721
#720 := (iff #415 #446)
#723 := (iff #747 false)
#736 := (not true)
#379 := (iff #736 false)
#739 := [rewrite]: #379
#345 := (iff #747 #736)
#451 := (iff #745 true)
#731 := (or true true)
#734 := (iff #731 true)
#729 := [rewrite]: #734
#449 := (iff #745 #731)
#392 := (iff #431 true)
#393 := [rewrite]: #392
#726 := (iff #410 true)
#727 := [rewrite]: #726
#450 := [monotonicity #727 #393]: #449
#452 := [trans #450 #729]: #451
#722 := [monotonicity #452]: #345
#445 := [trans #722 #739]: #723
#737 := (iff #741 false)
#738 := (iff #741 #736)
#735 := (iff #534 true)
#732 := (iff #534 #731)
#394 := (iff #404 true)
#730 := [rewrite]: #394
#733 := [monotonicity #393 #730]: #732
#373 := [trans #733 #729]: #735
#378 := [monotonicity #373]: #738
#740 := [trans #378 #739]: #737
#724 := [monotonicity #740 #445]: #720
#436 := [trans #724 #725]: #435
#691 := [monotonicity #436 #707 #690]: #693
#578 := [trans #691 #576]: #577
#728 := (iff #750 true)
#407 := (or true false)
#744 := (iff #407 true)
#387 := [rewrite]: #744
#743 := (iff #750 #407)
#742 := (iff #748 false)
#402 := [rewrite]: #742
#746 := (iff #749 true)
#752 := [rewrite]: #746
#403 := [monotonicity #752 #402]: #743
#391 := [trans #403 #387]: #728
#587 := [monotonicity #391 #578]: #685
#571 := [trans #587 #683]: #686
#591 := [monotonicity #571]: #590
#594 := [trans #591 #593]: #590
#582 := [quant-inst]: #589
#687 := [mp #582 #594]: #588
[unit-resolution #687 #759 #194]: false
unsat
a20f91759967cf78b23640f832ca57a185975634 306 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#67 := -1::int
decl f5 :: int
#38 := f5
#173 := (f4 f5 -1::int)
#176 := (= #173 0::int)
#189 := (not #176)
#39 := 1::int
#40 := (- 1::int)
#41 := (f4 f5 #40)
#42 := (= #41 0::int)
#43 := (not #42)
#192 := (iff #43 #189)
#179 := (= 0::int #173)
#184 := (not #179)
#190 := (iff #184 #189)
#187 := (iff #179 #176)
#188 := [rewrite]: #187
#191 := [monotonicity #188]: #190
#185 := (iff #43 #184)
#182 := (iff #42 #179)
#180 := (iff #176 #179)
#181 := [rewrite]: #180
#177 := (iff #42 #176)
#174 := (= #41 #173)
#171 := (= #40 -1::int)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#183 := [trans #178 #181]: #182
#186 := [monotonicity #183]: #185
#193 := [trans #186 #191]: #192
#170 := [asserted]: #43
#194 := [mp #170 #193]: #189
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#759 := (pattern #29)
#71 := (* -1::int #9)
#68 := (* -1::int #8)
#126 := (mod #68 #71)
#271 := (+ #29 #126)
#272 := (= #271 0::int)
#30 := (mod #8 #9)
#268 := (* -1::int #30)
#269 := (+ #29 #268)
#270 := (= #269 0::int)
#93 := (<= #9 0::int)
#89 := (<= #8 0::int)
#210 := (or #89 #93)
#211 := (not #210)
#100 := (>= #8 0::int)
#202 := (or #93 #100)
#203 := (not #202)
#217 := (or #203 #211)
#273 := (ite #217 #270 #272)
#267 := (= #29 0::int)
#12 := (= #8 0::int)
#274 := (ite #12 #267 #273)
#266 := (= #8 #29)
#13 := (= #9 0::int)
#275 := (ite #13 #266 #274)
#760 := (forall (vars (?v0 int) (?v1 int)) (:pat #759) #275)
#278 := (forall (vars (?v0 int) (?v1 int)) #275)
#763 := (iff #278 #760)
#761 := (iff #275 #275)
#762 := [refl]: #761
#764 := [quant-intro #762]: #763
#132 := (* -1::int #126)
#235 := (ite #217 #30 #132)
#238 := (ite #12 0::int #235)
#241 := (ite #13 #8 #238)
#244 := (= #29 #241)
#247 := (forall (vars (?v0 int) (?v1 int)) #244)
#279 := (iff #247 #278)
#276 := (iff #244 #275)
#277 := [rewrite]: #276
#280 := [quant-intro #277]: #279
#101 := (not #100)
#94 := (not #93)
#104 := (and #94 #101)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#152 := (ite #107 #30 #132)
#155 := (ite #12 0::int #152)
#158 := (ite #13 #8 #155)
#161 := (= #29 #158)
#164 := (forall (vars (?v0 int) (?v1 int)) #161)
#248 := (iff #164 #247)
#245 := (iff #161 #244)
#242 := (= #158 #241)
#239 := (= #155 #238)
#236 := (= #152 #235)
#220 := (iff #107 #217)
#214 := (or #211 #203)
#218 := (iff #214 #217)
#219 := [rewrite]: #218
#215 := (iff #107 #214)
#212 := (iff #104 #203)
#213 := [rewrite]: #212
#200 := (iff #97 #211)
#201 := [rewrite]: #200
#216 := [monotonicity #201 #213]: #215
#221 := [trans #216 #219]: #220
#237 := [monotonicity #221]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#198 := (~ #164 #164)
#195 := (~ #161 #161)
#208 := [refl]: #195
#199 := [nnf-pos #208]: #198
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#167 := (iff #37 #164)
#61 := (and #16 #18)
#64 := (or #17 #61)
#137 := (ite #64 #30 #132)
#140 := (ite #12 0::int #137)
#143 := (ite #13 #8 #140)
#146 := (= #29 #143)
#149 := (forall (vars (?v0 int) (?v1 int)) #146)
#165 := (iff #149 #164)
#162 := (iff #146 #161)
#159 := (= #143 #158)
#156 := (= #140 #155)
#153 := (= #137 #152)
#108 := (iff #64 #107)
#105 := (iff #61 #104)
#102 := (iff #18 #101)
#103 := [rewrite]: #102
#95 := (iff #16 #94)
#96 := [rewrite]: #95
#106 := [monotonicity #96 #103]: #105
#98 := (iff #17 #97)
#91 := (iff #15 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#154 := [monotonicity #109]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#150 := (iff #37 #149)
#147 := (iff #36 #146)
#144 := (= #35 #143)
#141 := (= #34 #140)
#138 := (= #33 #137)
#135 := (= #32 #132)
#129 := (- #126)
#133 := (= #129 #132)
#134 := [rewrite]: #133
#130 := (= #32 #129)
#127 := (= #31 #126)
#72 := (= #23 #71)
#73 := [rewrite]: #72
#69 := (= #22 #68)
#70 := [rewrite]: #69
#128 := [monotonicity #70 #73]: #127
#131 := [monotonicity #128]: #130
#136 := [trans #131 #134]: #135
#65 := (iff #20 #64)
#62 := (iff #19 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#139 := [monotonicity #66 #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#168 := [trans #151 #166]: #167
#125 := [asserted]: #37
#169 := [mp #125 #168]: #164
#209 := [mp~ #169 #199]: #164
#250 := [mp #209 #249]: #247
#281 := [mp #250 #280]: #278
#765 := [mp #281 #764]: #760
#703 := (not #760)
#532 := (or #703 #176)
#339 := (* -1::int -1::int)
#423 := (* -1::int f5)
#424 := (mod #423 #339)
#425 := (+ #173 #424)
#416 := (= #425 0::int)
#427 := (mod f5 -1::int)
#428 := (* -1::int #427)
#429 := (+ #173 #428)
#426 := (= #429 0::int)
#430 := (<= -1::int 0::int)
#409 := (<= f5 0::int)
#744 := (or #409 #430)
#746 := (not #744)
#403 := (>= f5 0::int)
#533 := (or #430 #403)
#740 := (not #533)
#414 := (or #740 #746)
#415 := (ite #414 #426 #416)
#747 := (= f5 0::int)
#748 := (ite #747 #176 #415)
#749 := (= f5 #173)
#750 := (= -1::int 0::int)
#745 := (ite #750 #749 #748)
#534 := (or #703 #745)
#688 := (iff #534 #532)
#691 := (iff #532 #532)
#692 := [rewrite]: #691
#702 := (iff #745 #176)
#699 := (ite false #749 #176)
#695 := (iff #699 #176)
#701 := [rewrite]: #695
#700 := (iff #745 #699)
#697 := (iff #748 #176)
#706 := (ite #747 #176 #176)
#554 := (iff #706 #176)
#555 := [rewrite]: #554
#712 := (iff #748 #706)
#710 := (iff #415 #176)
#707 := (ite false #426 #176)
#704 := (iff #707 #176)
#705 := [rewrite]: #704
#708 := (iff #415 #707)
#714 := (iff #416 #176)
#713 := (= #425 #173)
#436 := (+ #173 0::int)
#716 := (= #436 #173)
#431 := [rewrite]: #716
#437 := (= #425 #436)
#434 := (= #424 0::int)
#445 := (mod #423 1::int)
#720 := (= #445 0::int)
#724 := [rewrite]: #720
#719 := (= #424 #445)
#722 := (= #339 1::int)
#444 := [rewrite]: #722
#723 := [monotonicity #444]: #719
#435 := [trans #723 #724]: #434
#715 := [monotonicity #435]: #437
#717 := [trans #715 #431]: #713
#718 := [monotonicity #717]: #714
#345 := (iff #414 false)
#726 := (or false false)
#450 := (iff #726 false)
#451 := [rewrite]: #450
#448 := (iff #414 #726)
#739 := (iff #746 false)
#1 := true
#392 := (not true)
#730 := (iff #392 false)
#731 := [rewrite]: #730
#738 := (iff #746 #392)
#377 := (iff #744 true)
#728 := (or #409 true)
#735 := (iff #728 true)
#737 := [rewrite]: #735
#734 := (iff #744 #728)
#401 := (iff #430 true)
#406 := [rewrite]: #401
#372 := [monotonicity #406]: #734
#378 := [trans #372 #737]: #377
#736 := [monotonicity #378]: #738
#725 := [trans #736 #731]: #739
#732 := (iff #740 false)
#393 := (iff #740 #392)
#390 := (iff #533 true)
#742 := (or true #403)
#386 := (iff #742 true)
#727 := [rewrite]: #386
#402 := (iff #533 #742)
#743 := [monotonicity #406]: #402
#391 := [trans #743 #727]: #390
#729 := [monotonicity #391]: #393
#733 := [trans #729 #731]: #732
#449 := [monotonicity #733 #725]: #448
#721 := [trans #449 #451]: #345
#709 := [monotonicity #721 #718]: #708
#711 := [trans #709 #705]: #710
#553 := [monotonicity #711]: #712
#698 := [trans #553 #555]: #697
#751 := (iff #750 false)
#741 := [rewrite]: #751
#694 := [monotonicity #741 #698]: #700
#696 := [trans #694 #701]: #702
#689 := [monotonicity #696]: #688
#690 := [trans #689 #692]: #688
#535 := [quant-inst]: #534
#693 := [mp #535 #690]: #532
[unit-resolution #693 #765 #194]: false
unsat
35df6ca3b9d8297d2ae93fc18a5a2fbecd67e27f 296 0
#2 := false
#11 := 0::int
decl f3 :: (-> int int int)
#39 := 3::int
#38 := 1::int
#40 := (f3 1::int 3::int)
#41 := (= #40 0::int)
#42 := (not #41)
#169 := [asserted]: #42
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#737 := (pattern #10)
#66 := -1::int
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#73 := (div #67 #70)
#240 := (* -1::int #73)
#241 := (+ #10 #240)
#242 := (= #241 0::int)
#21 := (div #8 #9)
#237 := (* -1::int #21)
#238 := (+ #10 #237)
#239 := (= #238 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#195 := (or #88 #92)
#196 := (not #195)
#99 := (>= #8 0::int)
#187 := (or #92 #99)
#188 := (not #187)
#202 := (or #188 #196)
#243 := (ite #202 #239 #242)
#236 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#244 := (ite #14 #236 #243)
#738 := (forall (vars (?v0 int) (?v1 int)) (:pat #737) #244)
#247 := (forall (vars (?v0 int) (?v1 int)) #244)
#741 := (iff #247 #738)
#739 := (iff #244 #244)
#740 := [refl]: #739
#742 := [quant-intro #740]: #741
#207 := (ite #202 #21 #73)
#210 := (ite #14 0::int #207)
#213 := (= #10 #210)
#216 := (forall (vars (?v0 int) (?v1 int)) #213)
#248 := (iff #216 #247)
#245 := (iff #213 #244)
#246 := [rewrite]: #245
#249 := [quant-intro #246]: #248
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#109 := (ite #106 #21 #73)
#112 := (ite #14 0::int #109)
#115 := (= #10 #112)
#118 := (forall (vars (?v0 int) (?v1 int)) #115)
#217 := (iff #118 #216)
#214 := (iff #115 #213)
#211 := (= #112 #210)
#208 := (= #109 #207)
#205 := (iff #106 #202)
#199 := (or #196 #188)
#203 := (iff #199 #202)
#204 := [rewrite]: #203
#200 := (iff #106 #199)
#197 := (iff #103 #188)
#198 := [rewrite]: #197
#185 := (iff #96 #196)
#186 := [rewrite]: #185
#201 := [monotonicity #186 #198]: #200
#206 := [trans #201 #204]: #205
#209 := [monotonicity #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [quant-intro #215]: #217
#191 := (~ #118 #118)
#189 := (~ #115 #115)
#190 := [refl]: #189
#192 := [nnf-pos #190]: #191
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#121 := (iff #28 #118)
#60 := (and #16 #18)
#63 := (or #17 #60)
#76 := (ite #63 #21 #73)
#79 := (ite #14 0::int #76)
#82 := (= #10 #79)
#85 := (forall (vars (?v0 int) (?v1 int)) #82)
#119 := (iff #85 #118)
#116 := (iff #82 #115)
#113 := (= #79 #112)
#110 := (= #76 #109)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [quant-intro #117]: #119
#86 := (iff #28 #85)
#83 := (iff #27 #82)
#80 := (= #26 #79)
#77 := (= #25 #76)
#74 := (= #24 #73)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#78 := [monotonicity #65 #75]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#87 := [quant-intro #84]: #86
#122 := [trans #87 #120]: #121
#59 := [asserted]: #28
#123 := [mp #59 #122]: #118
#182 := [mp~ #123 #192]: #118
#219 := [mp #182 #218]: #216
#250 := [mp #219 #249]: #247
#743 := [mp #250 #742]: #738
#650 := (not #738)
#652 := (or #650 #41)
#324 := (* -1::int 3::int)
#408 := (* -1::int 1::int)
#409 := (div #408 #324)
#410 := (* -1::int #409)
#401 := (+ #40 #410)
#412 := (= #401 0::int)
#413 := (div 1::int 3::int)
#414 := (* -1::int #413)
#411 := (+ #40 #414)
#415 := (= #411 0::int)
#394 := (<= 3::int 0::int)
#729 := (<= 1::int 0::int)
#731 := (or #729 #394)
#388 := (not #731)
#518 := (>= 1::int 0::int)
#725 := (or #394 #518)
#399 := (not #725)
#400 := (or #399 #388)
#732 := (ite #400 #415 #412)
#733 := (= 3::int 0::int)
#734 := (= 1::int 0::int)
#735 := (or #734 #733)
#730 := (ite #735 #41 #732)
#662 := (or #650 #730)
#664 := (iff #662 #652)
#665 := (iff #652 #652)
#654 := [rewrite]: #665
#661 := (iff #730 #41)
#578 := (ite false #41 #41)
#672 := (iff #578 #41)
#659 := [rewrite]: #672
#671 := (iff #730 #578)
#576 := (iff #732 #41)
#666 := (= #40 1::int)
#1 := true
#572 := (ite true #41 #666)
#574 := (iff #572 #41)
#575 := [rewrite]: #574
#573 := (iff #732 #572)
#555 := (iff #412 #666)
#675 := (+ -1::int #40)
#521 := (= #675 0::int)
#667 := (iff #521 #666)
#670 := [rewrite]: #667
#669 := (iff #412 #521)
#561 := (= #401 #675)
#674 := (+ #40 -1::int)
#678 := (= #674 #675)
#560 := [rewrite]: #678
#676 := (= #401 #674)
#520 := (= #410 -1::int)
#539 := (= #408 -1::int)
#540 := [rewrite]: #539
#517 := (= #410 #408)
#681 := (= #409 1::int)
#682 := -3::int
#685 := (div -1::int -3::int)
#686 := (= #685 1::int)
#687 := [rewrite]: #686
#679 := (= #409 #685)
#683 := (= #324 -3::int)
#684 := [rewrite]: #683
#680 := [monotonicity #540 #684]: #679
#688 := [trans #680 #687]: #681
#519 := [monotonicity #688]: #517
#673 := [trans #519 #540]: #520
#677 := [monotonicity #673]: #676
#562 := [trans #677 #560]: #561
#571 := [monotonicity #562]: #669
#570 := [trans #571 #670]: #555
#697 := (iff #415 #41)
#696 := (= #411 #40)
#693 := (+ #40 0::int)
#690 := (= #693 #40)
#695 := [rewrite]: #690
#694 := (= #411 #693)
#703 := (= #414 0::int)
#701 := (* -1::int 0::int)
#702 := (= #701 0::int)
#699 := [rewrite]: #702
#416 := (= #414 #701)
#422 := (= #413 0::int)
#700 := [rewrite]: #422
#698 := [monotonicity #700]: #416
#692 := [trans #698 #699]: #703
#689 := [monotonicity #692]: #694
#691 := [trans #689 #695]: #696
#538 := [monotonicity #691]: #697
#420 := (iff #400 true)
#716 := (or false true)
#713 := (iff #716 true)
#719 := [rewrite]: #713
#709 := (iff #400 #716)
#708 := (iff #388 true)
#706 := (not false)
#430 := (iff #706 true)
#704 := [rewrite]: #430
#707 := (iff #388 #706)
#436 := (iff #731 false)
#727 := (or false false)
#371 := (iff #727 false)
#712 := [rewrite]: #371
#434 := (iff #731 #727)
#377 := (iff #394 false)
#378 := [rewrite]: #377
#711 := (iff #729 false)
#433 := [rewrite]: #711
#435 := [monotonicity #433 #378]: #434
#330 := [trans #435 #712]: #436
#429 := [monotonicity #330]: #707
#705 := [trans #429 #704]: #708
#724 := (iff #399 false)
#722 := (not true)
#723 := (iff #722 false)
#721 := [rewrite]: #723
#362 := (iff #399 #722)
#357 := (iff #725 true)
#717 := (iff #725 #716)
#714 := (iff #518 true)
#715 := [rewrite]: #714
#718 := [monotonicity #378 #715]: #717
#720 := [trans #718 #719]: #357
#363 := [monotonicity #720]: #362
#710 := [trans #363 #721]: #724
#419 := [monotonicity #710 #705]: #709
#421 := [trans #419 #719]: #420
#566 := [monotonicity #421 #538 #570]: #573
#577 := [trans #566 #575]: #576
#375 := (iff #735 false)
#387 := (iff #735 #727)
#386 := (iff #733 false)
#391 := [rewrite]: #386
#736 := (iff #734 false)
#726 := [rewrite]: #736
#728 := [monotonicity #726 #391]: #387
#376 := [trans #728 #712]: #375
#668 := [monotonicity #376 #577]: #671
#653 := [trans #668 #659]: #661
#660 := [monotonicity #653]: #664
#655 := [trans #660 #654]: #664
#663 := [quant-inst]: #662
#656 := [mp #663 #655]: #652
[unit-resolution #656 #743 #169]: false
unsat
d02187cb7fcefe99851febe02397cc4a2e6fdbff 286 0
#2 := false
#40 := 1::int
decl f3 :: (-> int int int)
#38 := 3::int
#39 := (f3 3::int 3::int)
#41 := (= #39 1::int)
#42 := (not #41)
#169 := [asserted]: #42
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#727 := (pattern #10)
#11 := 0::int
#66 := -1::int
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#73 := (div #67 #70)
#230 := (* -1::int #73)
#231 := (+ #10 #230)
#232 := (= #231 0::int)
#21 := (div #8 #9)
#227 := (* -1::int #21)
#228 := (+ #10 #227)
#229 := (= #228 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#185 := (or #88 #92)
#186 := (not #185)
#99 := (>= #8 0::int)
#177 := (or #92 #99)
#178 := (not #177)
#192 := (or #178 #186)
#233 := (ite #192 #229 #232)
#226 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#234 := (ite #14 #226 #233)
#728 := (forall (vars (?v0 int) (?v1 int)) (:pat #727) #234)
#237 := (forall (vars (?v0 int) (?v1 int)) #234)
#731 := (iff #237 #728)
#729 := (iff #234 #234)
#730 := [refl]: #729
#732 := [quant-intro #730]: #731
#197 := (ite #192 #21 #73)
#200 := (ite #14 0::int #197)
#203 := (= #10 #200)
#206 := (forall (vars (?v0 int) (?v1 int)) #203)
#238 := (iff #206 #237)
#235 := (iff #203 #234)
#236 := [rewrite]: #235
#239 := [quant-intro #236]: #238
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#109 := (ite #106 #21 #73)
#112 := (ite #14 0::int #109)
#115 := (= #10 #112)
#118 := (forall (vars (?v0 int) (?v1 int)) #115)
#207 := (iff #118 #206)
#204 := (iff #115 #203)
#201 := (= #112 #200)
#198 := (= #109 #197)
#195 := (iff #106 #192)
#189 := (or #186 #178)
#193 := (iff #189 #192)
#194 := [rewrite]: #193
#190 := (iff #106 #189)
#187 := (iff #103 #178)
#188 := [rewrite]: #187
#175 := (iff #96 #186)
#176 := [rewrite]: #175
#191 := [monotonicity #176 #188]: #190
#196 := [trans #191 #194]: #195
#199 := [monotonicity #196]: #198
#202 := [monotonicity #199]: #201
#205 := [monotonicity #202]: #204
#208 := [quant-intro #205]: #207
#181 := (~ #118 #118)
#179 := (~ #115 #115)
#180 := [refl]: #179
#182 := [nnf-pos #180]: #181
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#121 := (iff #28 #118)
#60 := (and #16 #18)
#63 := (or #17 #60)
#76 := (ite #63 #21 #73)
#79 := (ite #14 0::int #76)
#82 := (= #10 #79)
#85 := (forall (vars (?v0 int) (?v1 int)) #82)
#119 := (iff #85 #118)
#116 := (iff #82 #115)
#113 := (= #79 #112)
#110 := (= #76 #109)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [quant-intro #117]: #119
#86 := (iff #28 #85)
#83 := (iff #27 #82)
#80 := (= #26 #79)
#77 := (= #25 #76)
#74 := (= #24 #73)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#78 := [monotonicity #65 #75]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#87 := [quant-intro #84]: #86
#122 := [trans #87 #120]: #121
#59 := [asserted]: #28
#123 := [mp #59 #122]: #118
#172 := [mp~ #123 #182]: #118
#209 := [mp #172 #208]: #206
#240 := [mp #209 #239]: #237
#733 := [mp #240 #732]: #728
#565 := (not #728)
#566 := (or #565 #41)
#314 := (* -1::int 3::int)
#398 := (div #314 #314)
#399 := (* -1::int #398)
#400 := (+ #39 #399)
#391 := (= #400 0::int)
#402 := (div 3::int 3::int)
#403 := (* -1::int #402)
#404 := (+ #39 #403)
#401 := (= #404 0::int)
#405 := (<= 3::int 0::int)
#384 := (or #405 #405)
#719 := (not #384)
#721 := (>= 3::int 0::int)
#378 := (or #405 #721)
#508 := (not #378)
#715 := (or #508 #719)
#389 := (ite #715 #401 #391)
#390 := (= #39 0::int)
#722 := (= 3::int 0::int)
#723 := (or #722 #722)
#724 := (ite #723 #390 #389)
#567 := (or #565 #724)
#661 := (iff #567 #566)
#662 := (iff #566 #566)
#649 := [rewrite]: #662
#556 := (iff #724 #41)
#660 := (ite false #390 #41)
#562 := (iff #660 #41)
#563 := [rewrite]: #562
#545 := (iff #724 #660)
#656 := (iff #389 #41)
#1 := true
#551 := (ite true #41 #41)
#659 := (iff #551 #41)
#561 := [rewrite]: #659
#552 := (iff #389 #551)
#668 := (iff #391 #41)
#689 := (+ -1::int #39)
#679 := (= #689 0::int)
#686 := (iff #679 #41)
#681 := [rewrite]: #686
#667 := (iff #391 #679)
#664 := (= #400 #689)
#406 := (+ #39 -1::int)
#693 := (= #406 #689)
#682 := [rewrite]: #693
#510 := (= #400 #406)
#507 := (= #399 -1::int)
#699 := (* -1::int 1::int)
#411 := (= #699 -1::int)
#412 := [rewrite]: #411
#671 := (= #399 #699)
#676 := (= #398 1::int)
#529 := -3::int
#673 := (div -3::int -3::int)
#669 := (= #673 1::int)
#670 := [rewrite]: #669
#674 := (= #398 #673)
#530 := (= #314 -3::int)
#672 := [rewrite]: #530
#675 := [monotonicity #672 #672]: #674
#677 := [trans #675 #670]: #676
#678 := [monotonicity #677]: #671
#509 := [trans #678 #412]: #507
#663 := [monotonicity #509]: #510
#666 := [trans #663 #682]: #664
#665 := [monotonicity #666]: #667
#550 := [trans #665 #681]: #668
#687 := (iff #401 #41)
#680 := (iff #401 #679)
#683 := (= #404 #689)
#688 := (= #404 #406)
#690 := (= #403 -1::int)
#409 := (= #403 #699)
#698 := (= #402 1::int)
#695 := [rewrite]: #698
#410 := [monotonicity #695]: #409
#691 := [trans #410 #412]: #690
#692 := [monotonicity #691]: #688
#684 := [trans #692 #682]: #683
#685 := [monotonicity #684]: #680
#528 := [trans #685 #681]: #687
#420 := (iff #715 true)
#367 := (or false true)
#705 := (iff #367 true)
#706 := [rewrite]: #705
#697 := (iff #715 #367)
#320 := (iff #719 true)
#701 := (not false)
#425 := (iff #701 true)
#426 := [rewrite]: #425
#423 := (iff #719 #701)
#714 := (iff #384 false)
#726 := (or false false)
#381 := (iff #726 false)
#717 := [rewrite]: #381
#713 := (iff #384 #726)
#361 := (iff #405 false)
#702 := [rewrite]: #361
#711 := [monotonicity #702 #702]: #713
#700 := [trans #711 #717]: #714
#424 := [monotonicity #700]: #423
#696 := [trans #424 #426]: #320
#352 := (iff #508 false)
#703 := (not true)
#710 := (iff #703 false)
#712 := [rewrite]: #710
#709 := (iff #508 #703)
#707 := (iff #378 true)
#368 := (iff #378 #367)
#365 := (iff #721 true)
#366 := [rewrite]: #365
#704 := [monotonicity #702 #366]: #368
#708 := [trans #704 #706]: #707
#347 := [monotonicity #708]: #709
#353 := [trans #347 #712]: #352
#419 := [monotonicity #353 #696]: #697
#694 := [trans #419 #706]: #420
#511 := [monotonicity #694 #528 #550]: #552
#657 := [trans #511 #561]: #656
#377 := (iff #723 false)
#716 := (iff #723 #726)
#725 := (iff #722 false)
#720 := [rewrite]: #725
#376 := [monotonicity #720 #720]: #716
#718 := [trans #376 #717]: #377
#560 := [monotonicity #718 #657]: #545
#564 := [trans #560 #563]: #556
#658 := [monotonicity #564]: #661
#651 := [trans #658 #649]: #661
#568 := [quant-inst]: #567
#643 := [mp #568 #651]: #566
[unit-resolution #643 #733 #169]: false
unsat
450a206c661160bbd83de0094374a847857dd804 299 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#38 := 3::int
#39 := (f4 0::int 3::int)
#40 := (= #39 0::int)
#41 := (not #40)
#168 := [asserted]: #41
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#744 := (pattern #29)
#65 := -1::int
#69 := (* -1::int #9)
#66 := (* -1::int #8)
#124 := (mod #66 #69)
#255 := (+ #29 #124)
#256 := (= #255 0::int)
#30 := (mod #8 #9)
#252 := (* -1::int #30)
#253 := (+ #29 #252)
#254 := (= #253 0::int)
#91 := (<= #9 0::int)
#87 := (<= #8 0::int)
#194 := (or #87 #91)
#195 := (not #194)
#98 := (>= #8 0::int)
#186 := (or #91 #98)
#187 := (not #186)
#201 := (or #187 #195)
#257 := (ite #201 #254 #256)
#251 := (= #29 0::int)
#12 := (= #8 0::int)
#258 := (ite #12 #251 #257)
#250 := (= #8 #29)
#13 := (= #9 0::int)
#259 := (ite #13 #250 #258)
#745 := (forall (vars (?v0 int) (?v1 int)) (:pat #744) #259)
#262 := (forall (vars (?v0 int) (?v1 int)) #259)
#748 := (iff #262 #745)
#746 := (iff #259 #259)
#747 := [refl]: #746
#749 := [quant-intro #747]: #748
#130 := (* -1::int #124)
#219 := (ite #201 #30 #130)
#222 := (ite #12 0::int #219)
#225 := (ite #13 #8 #222)
#228 := (= #29 #225)
#231 := (forall (vars (?v0 int) (?v1 int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#99 := (not #98)
#92 := (not #91)
#102 := (and #92 #99)
#88 := (not #87)
#95 := (and #88 #92)
#105 := (or #95 #102)
#150 := (ite #105 #30 #130)
#153 := (ite #12 0::int #150)
#156 := (ite #13 #8 #153)
#159 := (= #29 #156)
#162 := (forall (vars (?v0 int) (?v1 int)) #159)
#232 := (iff #162 #231)
#229 := (iff #159 #228)
#226 := (= #156 #225)
#223 := (= #153 #222)
#220 := (= #150 #219)
#204 := (iff #105 #201)
#198 := (or #195 #187)
#202 := (iff #198 #201)
#203 := [rewrite]: #202
#199 := (iff #105 #198)
#196 := (iff #102 #187)
#197 := [rewrite]: #196
#184 := (iff #95 #195)
#185 := [rewrite]: #184
#200 := [monotonicity #185 #197]: #199
#205 := [trans #200 #203]: #204
#221 := [monotonicity #205]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#182 := (~ #162 #162)
#179 := (~ #159 #159)
#192 := [refl]: #179
#183 := [nnf-pos #192]: #182
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#165 := (iff #37 #162)
#59 := (and #16 #18)
#62 := (or #17 #59)
#135 := (ite #62 #30 #130)
#138 := (ite #12 0::int #135)
#141 := (ite #13 #8 #138)
#144 := (= #29 #141)
#147 := (forall (vars (?v0 int) (?v1 int)) #144)
#163 := (iff #147 #162)
#160 := (iff #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#151 := (= #135 #150)
#106 := (iff #62 #105)
#103 := (iff #59 #102)
#100 := (iff #18 #99)
#101 := [rewrite]: #100
#93 := (iff #16 #92)
#94 := [rewrite]: #93
#104 := [monotonicity #94 #101]: #103
#96 := (iff #17 #95)
#89 := (iff #15 #88)
#90 := [rewrite]: #89
#97 := [monotonicity #90 #94]: #96
#107 := [monotonicity #97 #104]: #106
#152 := [monotonicity #107]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [quant-intro #161]: #163
#148 := (iff #37 #147)
#145 := (iff #36 #144)
#142 := (= #35 #141)
#139 := (= #34 #138)
#136 := (= #33 #135)
#133 := (= #32 #130)
#127 := (- #124)
#131 := (= #127 #130)
#132 := [rewrite]: #131
#128 := (= #32 #127)
#125 := (= #31 #124)
#70 := (= #23 #69)
#71 := [rewrite]: #70
#67 := (= #22 #66)
#68 := [rewrite]: #67
#126 := [monotonicity #68 #71]: #125
#129 := [monotonicity #126]: #128
#134 := [trans #129 #132]: #133
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#137 := [monotonicity #64 #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [quant-intro #146]: #148
#166 := [trans #149 #164]: #165
#123 := [asserted]: #37
#167 := [mp #123 #166]: #162
#193 := [mp~ #167 #183]: #162
#234 := [mp #193 #233]: #231
#265 := [mp #234 #264]: #262
#750 := [mp #265 #749]: #745
#666 := (not #745)
#667 := (or #666 #40)
#323 := (* -1::int 3::int)
#408 := (* -1::int 0::int)
#409 := (mod #408 #323)
#410 := (+ #39 #409)
#401 := (= #410 0::int)
#412 := (mod 0::int 3::int)
#413 := (* -1::int #412)
#341 := (+ #39 #413)
#414 := (= #341 0::int)
#411 := (<= 3::int 0::int)
#415 := (<= 0::int 0::int)
#394 := (or #415 #411)
#729 := (not #394)
#731 := (>= 0::int 0::int)
#388 := (or #411 #731)
#518 := (not #388)
#725 := (or #518 #729)
#399 := (ite #725 #414 #401)
#400 := (= 0::int 0::int)
#732 := (ite #400 #40 #399)
#169 := (= 0::int #39)
#733 := (= 3::int 0::int)
#734 := (ite #733 #169 #732)
#670 := (or #666 #734)
#570 := (iff #670 #667)
#573 := (iff #667 #667)
#566 := [rewrite]: #573
#669 := (iff #734 #40)
#687 := (ite false #40 #40)
#517 := (iff #687 #40)
#519 := [rewrite]: #517
#562 := (iff #734 #687)
#560 := (iff #732 #40)
#1 := true
#674 := (ite true #40 #40)
#675 := (iff #674 #40)
#678 := [rewrite]: #675
#676 := (iff #732 #674)
#520 := (iff #399 #40)
#681 := (iff #399 #687)
#680 := (iff #401 #40)
#685 := (= #410 #39)
#701 := (+ #39 0::int)
#702 := (= #701 #39)
#699 := [rewrite]: #702
#683 := (= #410 #701)
#540 := (= #409 0::int)
#689 := -3::int
#696 := (mod 0::int -3::int)
#538 := (= #696 0::int)
#539 := [rewrite]: #538
#691 := (= #409 #696)
#690 := (= #323 -3::int)
#695 := [rewrite]: #690
#420 := (= #408 0::int)
#421 := [rewrite]: #420
#697 := [monotonicity #421 #695]: #691
#682 := [trans #697 #539]: #540
#684 := [monotonicity #682]: #683
#679 := [trans #684 #699]: #685
#686 := [monotonicity #679]: #680
#693 := (iff #414 #40)
#703 := (= #341 #39)
#416 := (= #341 #701)
#422 := (= #413 0::int)
#709 := (= #413 #408)
#708 := (= #412 0::int)
#705 := [rewrite]: #708
#419 := [monotonicity #705]: #709
#700 := [trans #419 #421]: #422
#698 := [monotonicity #700]: #416
#692 := [trans #698 #699]: #703
#694 := [monotonicity #692]: #693
#430 := (iff #725 false)
#436 := (or false false)
#707 := (iff #436 false)
#429 := [rewrite]: #707
#329 := (iff #725 #436)
#434 := (iff #729 false)
#714 := (not true)
#717 := (iff #714 false)
#718 := [rewrite]: #717
#711 := (iff #729 #714)
#724 := (iff #394 true)
#722 := (or true false)
#723 := (iff #722 true)
#721 := [rewrite]: #723
#362 := (iff #394 #722)
#386 := (iff #411 false)
#391 := [rewrite]: #386
#357 := (iff #415 true)
#720 := [rewrite]: #357
#363 := [monotonicity #720 #391]: #362
#710 := [trans #363 #721]: #724
#433 := [monotonicity #710]: #711
#435 := [trans #433 #718]: #434
#713 := (iff #518 false)
#715 := (iff #518 #714)
#377 := (iff #388 true)
#728 := (or false true)
#375 := (iff #728 true)
#376 := [rewrite]: #375
#371 := (iff #388 #728)
#727 := (iff #731 true)
#387 := [rewrite]: #727
#712 := [monotonicity #391 #387]: #371
#378 := [trans #712 #376]: #377
#716 := [monotonicity #378]: #715
#719 := [trans #716 #718]: #713
#706 := [monotonicity #719 #435]: #329
#704 := [trans #706 #429]: #430
#688 := [monotonicity #704 #694 #686]: #681
#673 := [trans #688 #519]: #520
#736 := (iff #400 true)
#726 := [rewrite]: #736
#677 := [monotonicity #726 #673]: #676
#561 := [trans #677 #678]: #560
#175 := (iff #169 #40)
#176 := [rewrite]: #175
#735 := (iff #733 false)
#730 := [rewrite]: #735
#521 := [monotonicity #730 #176 #561]: #562
#571 := [trans #521 #519]: #669
#572 := [monotonicity #571]: #570
#574 := [trans #572 #566]: #570
#555 := [quant-inst]: #670
#575 := [mp #555 #574]: #667
[unit-resolution #575 #750 #168]: false
unsat
fc9ffeceefa2f1854d4c8adb404766a307c30ad9 310 0
#2 := false
#41 := 1::int
decl f3 :: (-> int int int)
#39 := 3::int
#38 := 5::int
#40 := (f3 5::int 3::int)
#42 := (= #40 1::int)
#43 := (not #42)
#170 := [asserted]: #43
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#728 := (pattern #10)
#11 := 0::int
#67 := -1::int
#71 := (* -1::int #9)
#68 := (* -1::int #8)
#74 := (div #68 #71)
#231 := (* -1::int #74)
#232 := (+ #10 #231)
#233 := (= #232 0::int)
#21 := (div #8 #9)
#228 := (* -1::int #21)
#229 := (+ #10 #228)
#230 := (= #229 0::int)
#93 := (<= #9 0::int)
#89 := (<= #8 0::int)
#186 := (or #89 #93)
#187 := (not #186)
#100 := (>= #8 0::int)
#178 := (or #93 #100)
#179 := (not #178)
#193 := (or #179 #187)
#234 := (ite #193 #230 #233)
#227 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#235 := (ite #14 #227 #234)
#729 := (forall (vars (?v0 int) (?v1 int)) (:pat #728) #235)
#238 := (forall (vars (?v0 int) (?v1 int)) #235)
#732 := (iff #238 #729)
#730 := (iff #235 #235)
#731 := [refl]: #730
#733 := [quant-intro #731]: #732
#198 := (ite #193 #21 #74)
#201 := (ite #14 0::int #198)
#204 := (= #10 #201)
#207 := (forall (vars (?v0 int) (?v1 int)) #204)
#239 := (iff #207 #238)
#236 := (iff #204 #235)
#237 := [rewrite]: #236
#240 := [quant-intro #237]: #239
#101 := (not #100)
#94 := (not #93)
#104 := (and #94 #101)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#110 := (ite #107 #21 #74)
#113 := (ite #14 0::int #110)
#116 := (= #10 #113)
#119 := (forall (vars (?v0 int) (?v1 int)) #116)
#208 := (iff #119 #207)
#205 := (iff #116 #204)
#202 := (= #113 #201)
#199 := (= #110 #198)
#196 := (iff #107 #193)
#190 := (or #187 #179)
#194 := (iff #190 #193)
#195 := [rewrite]: #194
#191 := (iff #107 #190)
#188 := (iff #104 #179)
#189 := [rewrite]: #188
#176 := (iff #97 #187)
#177 := [rewrite]: #176
#192 := [monotonicity #177 #189]: #191
#197 := [trans #192 #195]: #196
#200 := [monotonicity #197]: #199
#203 := [monotonicity #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#182 := (~ #119 #119)
#180 := (~ #116 #116)
#181 := [refl]: #180
#183 := [nnf-pos #181]: #182
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#122 := (iff #28 #119)
#61 := (and #16 #18)
#64 := (or #17 #61)
#77 := (ite #64 #21 #74)
#80 := (ite #14 0::int #77)
#83 := (= #10 #80)
#86 := (forall (vars (?v0 int) (?v1 int)) #83)
#120 := (iff #86 #119)
#117 := (iff #83 #116)
#114 := (= #80 #113)
#111 := (= #77 #110)
#108 := (iff #64 #107)
#105 := (iff #61 #104)
#102 := (iff #18 #101)
#103 := [rewrite]: #102
#95 := (iff #16 #94)
#96 := [rewrite]: #95
#106 := [monotonicity #96 #103]: #105
#98 := (iff #17 #97)
#91 := (iff #15 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [monotonicity #115]: #117
#121 := [quant-intro #118]: #120
#87 := (iff #28 #86)
#84 := (iff #27 #83)
#81 := (= #26 #80)
#78 := (= #25 #77)
#75 := (= #24 #74)
#72 := (= #23 #71)
#73 := [rewrite]: #72
#69 := (= #22 #68)
#70 := [rewrite]: #69
#76 := [monotonicity #70 #73]: #75
#65 := (iff #20 #64)
#62 := (iff #19 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#79 := [monotonicity #66 #76]: #78
#82 := [monotonicity #79]: #81
#85 := [monotonicity #82]: #84
#88 := [quant-intro #85]: #87
#123 := [trans #88 #121]: #122
#60 := [asserted]: #28
#124 := [mp #60 #123]: #119
#173 := [mp~ #124 #183]: #119
#210 := [mp #173 #209]: #207
#241 := [mp #210 #240]: #238
#734 := [mp #241 #733]: #729
#633 := (not #729)
#634 := (or #633 #42)
#315 := (* -1::int 3::int)
#399 := (* -1::int 5::int)
#400 := (div #399 #315)
#401 := (* -1::int #400)
#392 := (+ #40 #401)
#403 := (= #392 0::int)
#404 := (div 5::int 3::int)
#405 := (* -1::int #404)
#402 := (+ #40 #405)
#406 := (= #402 0::int)
#385 := (<= 3::int 0::int)
#720 := (<= 5::int 0::int)
#722 := (or #720 #385)
#379 := (not #722)
#509 := (>= 5::int 0::int)
#716 := (or #385 #509)
#390 := (not #716)
#391 := (or #390 #379)
#723 := (ite #391 #406 #403)
#724 := (= #40 0::int)
#725 := (= 3::int 0::int)
#726 := (= 5::int 0::int)
#721 := (or #726 #725)
#727 := (ite #721 #724 #723)
#636 := (or #633 #727)
#638 := (iff #636 #634)
#635 := (iff #634 #634)
#640 := [rewrite]: #635
#642 := (iff #727 #42)
#656 := (ite false #724 #42)
#647 := (iff #656 #42)
#648 := [rewrite]: #647
#645 := (iff #727 #656)
#655 := (iff #723 #42)
#665 := 2::int
#662 := (= #40 2::int)
#1 := true
#644 := (ite true #42 #662)
#653 := (iff #644 #42)
#654 := [rewrite]: #653
#641 := (iff #723 #644)
#650 := (iff #403 #662)
#512 := -2::int
#563 := (+ -2::int #40)
#567 := (= #563 0::int)
#659 := (iff #567 #662)
#663 := [rewrite]: #659
#568 := (iff #403 #567)
#565 := (= #392 #563)
#661 := (+ #40 -2::int)
#564 := (= #661 #563)
#557 := [rewrite]: #564
#546 := (= #392 #661)
#657 := (= #401 -2::int)
#551 := (* -1::int 2::int)
#660 := (= #551 -2::int)
#562 := [rewrite]: #660
#552 := (= #401 #551)
#666 := (= #400 2::int)
#672 := -3::int
#671 := -5::int
#510 := (div -5::int -3::int)
#667 := (= #510 2::int)
#668 := [rewrite]: #667
#511 := (= #400 #510)
#679 := (= #315 -3::int)
#508 := [rewrite]: #679
#677 := (= #399 -5::int)
#678 := [rewrite]: #677
#664 := [monotonicity #678 #508]: #511
#669 := [trans #664 #668]: #666
#553 := [monotonicity #669]: #552
#658 := [trans #553 #562]: #657
#561 := [monotonicity #658]: #546
#566 := [trans #561 #557]: #565
#569 := [monotonicity #566]: #568
#652 := [trans #569 #663]: #650
#676 := (iff #406 #42)
#686 := (+ -1::int #40)
#530 := (= #686 0::int)
#674 := (iff #530 #42)
#675 := [rewrite]: #674
#531 := (iff #406 #530)
#688 := (= #402 #686)
#685 := (+ #40 -1::int)
#687 := (= #685 #686)
#682 := [rewrite]: #687
#680 := (= #402 #685)
#683 := (= #405 -1::int)
#407 := (* -1::int 1::int)
#690 := (= #407 -1::int)
#694 := [rewrite]: #690
#689 := (= #405 #407)
#691 := (= #404 1::int)
#692 := [rewrite]: #691
#693 := [monotonicity #692]: #689
#684 := [trans #693 #694]: #683
#681 := [monotonicity #684]: #680
#529 := [trans #681 #682]: #688
#673 := [monotonicity #529]: #531
#670 := [trans #673 #675]: #676
#412 := (iff #391 true)
#708 := (or false true)
#710 := (iff #708 true)
#348 := [rewrite]: #710
#410 := (iff #391 #708)
#696 := (iff #379 true)
#698 := (not false)
#695 := (iff #698 true)
#699 := [rewrite]: #695
#420 := (iff #379 #698)
#321 := (iff #722 false)
#378 := (or false false)
#703 := (iff #378 false)
#366 := [rewrite]: #703
#426 := (iff #722 #378)
#369 := (iff #385 false)
#705 := [rewrite]: #369
#424 := (iff #720 false)
#425 := [rewrite]: #424
#427 := [monotonicity #425 #705]: #426
#697 := [trans #427 #366]: #321
#421 := [monotonicity #697]: #420
#700 := [trans #421 #699]: #696
#701 := (iff #390 false)
#353 := (not true)
#712 := (iff #353 false)
#715 := [rewrite]: #712
#354 := (iff #390 #353)
#711 := (iff #716 true)
#709 := (iff #716 #708)
#706 := (iff #509 true)
#707 := [rewrite]: #706
#704 := [monotonicity #705 #707]: #709
#713 := [trans #704 #348]: #711
#714 := [monotonicity #713]: #354
#702 := [trans #714 #715]: #701
#411 := [monotonicity #702 #700]: #410
#413 := [trans #411 #348]: #412
#643 := [monotonicity #413 #670 #652]: #641
#651 := [trans #643 #654]: #655
#367 := (iff #721 false)
#719 := (iff #721 #378)
#382 := (iff #725 false)
#718 := [rewrite]: #382
#717 := (iff #726 false)
#377 := [rewrite]: #717
#362 := [monotonicity #377 #718]: #719
#368 := [trans #362 #366]: #367
#646 := [monotonicity #368 #651]: #645
#649 := [trans #646 #648]: #642
#639 := [monotonicity #649]: #638
#626 := [trans #639 #640]: #638
#637 := [quant-inst]: #636
#627 := [mp #637 #626]: #634
[unit-resolution #627 #734 #170]: false
unsat
b8be49aa798ad99c4b186f0fa5e2759eac880cd8 318 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#170 := -3::int
#173 := (f4 0::int -3::int)
#176 := (= #173 0::int)
#189 := (not #176)
#38 := 3::int
#39 := (- 3::int)
#40 := (f4 0::int #39)
#41 := (= #40 0::int)
#42 := (not #41)
#192 := (iff #42 #189)
#179 := (= 0::int #173)
#184 := (not #179)
#190 := (iff #184 #189)
#187 := (iff #179 #176)
#188 := [rewrite]: #187
#191 := [monotonicity #188]: #190
#185 := (iff #42 #184)
#182 := (iff #41 #179)
#180 := (iff #176 #179)
#181 := [rewrite]: #180
#177 := (iff #41 #176)
#174 := (= #40 #173)
#171 := (= #39 -3::int)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#183 := [trans #178 #181]: #182
#186 := [monotonicity #183]: #185
#193 := [trans #186 #191]: #192
#169 := [asserted]: #42
#194 := [mp #169 #193]: #189
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#760 := (pattern #29)
#66 := -1::int
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#125 := (mod #67 #70)
#271 := (+ #29 #125)
#272 := (= #271 0::int)
#30 := (mod #8 #9)
#268 := (* -1::int #30)
#269 := (+ #29 #268)
#270 := (= #269 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#210 := (or #88 #92)
#211 := (not #210)
#99 := (>= #8 0::int)
#202 := (or #92 #99)
#203 := (not #202)
#217 := (or #203 #211)
#273 := (ite #217 #270 #272)
#267 := (= #29 0::int)
#12 := (= #8 0::int)
#274 := (ite #12 #267 #273)
#266 := (= #8 #29)
#13 := (= #9 0::int)
#275 := (ite #13 #266 #274)
#761 := (forall (vars (?v0 int) (?v1 int)) (:pat #760) #275)
#278 := (forall (vars (?v0 int) (?v1 int)) #275)
#764 := (iff #278 #761)
#762 := (iff #275 #275)
#763 := [refl]: #762
#765 := [quant-intro #763]: #764
#131 := (* -1::int #125)
#235 := (ite #217 #30 #131)
#238 := (ite #12 0::int #235)
#241 := (ite #13 #8 #238)
#244 := (= #29 #241)
#247 := (forall (vars (?v0 int) (?v1 int)) #244)
#279 := (iff #247 #278)
#276 := (iff #244 #275)
#277 := [rewrite]: #276
#280 := [quant-intro #277]: #279
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#151 := (ite #106 #30 #131)
#154 := (ite #12 0::int #151)
#157 := (ite #13 #8 #154)
#160 := (= #29 #157)
#163 := (forall (vars (?v0 int) (?v1 int)) #160)
#248 := (iff #163 #247)
#245 := (iff #160 #244)
#242 := (= #157 #241)
#239 := (= #154 #238)
#236 := (= #151 #235)
#220 := (iff #106 #217)
#214 := (or #211 #203)
#218 := (iff #214 #217)
#219 := [rewrite]: #218
#215 := (iff #106 #214)
#212 := (iff #103 #203)
#213 := [rewrite]: #212
#200 := (iff #96 #211)
#201 := [rewrite]: #200
#216 := [monotonicity #201 #213]: #215
#221 := [trans #216 #219]: #220
#237 := [monotonicity #221]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#198 := (~ #163 #163)
#195 := (~ #160 #160)
#208 := [refl]: #195
#199 := [nnf-pos #208]: #198
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#166 := (iff #37 #163)
#60 := (and #16 #18)
#63 := (or #17 #60)
#136 := (ite #63 #30 #131)
#139 := (ite #12 0::int #136)
#142 := (ite #13 #8 #139)
#145 := (= #29 #142)
#148 := (forall (vars (?v0 int) (?v1 int)) #145)
#164 := (iff #148 #163)
#161 := (iff #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#152 := (= #136 #151)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#153 := [monotonicity #108]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#149 := (iff #37 #148)
#146 := (iff #36 #145)
#143 := (= #35 #142)
#140 := (= #34 #139)
#137 := (= #33 #136)
#134 := (= #32 #131)
#128 := (- #125)
#132 := (= #128 #131)
#133 := [rewrite]: #132
#129 := (= #32 #128)
#126 := (= #31 #125)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#127 := [monotonicity #69 #72]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#138 := [monotonicity #65 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#167 := [trans #150 #165]: #166
#124 := [asserted]: #37
#168 := [mp #124 #167]: #163
#209 := [mp~ #168 #199]: #163
#250 := [mp #209 #249]: #247
#281 := [mp #250 #280]: #278
#766 := [mp #281 #765]: #761
#578 := (not #761)
#537 := (or #578 #176)
#339 := (* -1::int -3::int)
#424 := (* -1::int 0::int)
#425 := (mod #424 #339)
#426 := (+ #173 #425)
#417 := (= #426 0::int)
#428 := (mod 0::int -3::int)
#429 := (* -1::int #428)
#357 := (+ #173 #429)
#430 := (= #357 0::int)
#427 := (<= -3::int 0::int)
#431 := (<= 0::int 0::int)
#410 := (or #431 #427)
#745 := (not #410)
#747 := (>= 0::int 0::int)
#404 := (or #427 #747)
#534 := (not #404)
#741 := (or #534 #745)
#415 := (ite #741 #430 #417)
#416 := (= 0::int 0::int)
#748 := (ite #416 #176 #415)
#749 := (= -3::int 0::int)
#750 := (ite #749 #179 #748)
#685 := (or #578 #750)
#682 := (iff #685 #537)
#686 := (iff #537 #537)
#571 := [rewrite]: #686
#576 := (iff #750 #176)
#701 := (ite false #176 #176)
#702 := (iff #701 #176)
#703 := [rewrite]: #702
#691 := (iff #750 #701)
#692 := (iff #748 #176)
#1 := true
#533 := (ite true #176 #176)
#689 := (iff #533 #176)
#690 := [rewrite]: #689
#535 := (iff #748 #533)
#697 := (iff #415 #176)
#695 := (iff #415 #701)
#699 := (iff #417 #176)
#556 := (= #426 #173)
#437 := (+ #173 0::int)
#717 := (= #437 #173)
#432 := [rewrite]: #717
#554 := (= #426 #437)
#707 := (= #425 0::int)
#710 := (mod 0::int 3::int)
#711 := (= #710 0::int)
#712 := [rewrite]: #711
#705 := (= #425 #710)
#708 := (= #339 3::int)
#709 := [rewrite]: #708
#721 := (= #424 0::int)
#725 := [rewrite]: #721
#706 := [monotonicity #725 #709]: #705
#713 := [trans #706 #712]: #707
#555 := [monotonicity #713]: #554
#698 := [trans #555 #432]: #556
#700 := [monotonicity #698]: #699
#715 := (iff #430 #176)
#714 := (= #357 #173)
#438 := (= #357 #437)
#435 := (= #429 0::int)
#720 := (= #429 #424)
#445 := (= #428 0::int)
#446 := [rewrite]: #445
#724 := [monotonicity #446]: #720
#436 := [trans #724 #725]: #435
#716 := [monotonicity #436]: #438
#718 := [trans #716 #432]: #714
#719 := [monotonicity #718]: #715
#722 := (iff #741 false)
#449 := (or false false)
#452 := (iff #449 false)
#345 := [rewrite]: #452
#450 := (iff #741 #449)
#726 := (iff #745 false)
#730 := (not true)
#733 := (iff #730 false)
#734 := [rewrite]: #733
#737 := (iff #745 #730)
#379 := (iff #410 true)
#744 := (or true true)
#391 := (iff #744 true)
#392 := [rewrite]: #391
#738 := (iff #410 #744)
#402 := (iff #427 true)
#407 := [rewrite]: #402
#373 := (iff #431 true)
#736 := [rewrite]: #373
#378 := [monotonicity #736 #407]: #738
#739 := [trans #378 #392]: #379
#740 := [monotonicity #739]: #737
#727 := [trans #740 #734]: #726
#729 := (iff #534 false)
#731 := (iff #534 #730)
#393 := (iff #404 true)
#387 := (iff #404 #744)
#743 := (iff #747 true)
#403 := [rewrite]: #743
#728 := [monotonicity #407 #403]: #387
#394 := [trans #728 #392]: #393
#732 := [monotonicity #394]: #731
#735 := [trans #732 #734]: #729
#451 := [monotonicity #735 #727]: #450
#723 := [trans #451 #345]: #722
#696 := [monotonicity #723 #719 #700]: #695
#704 := [trans #696 #703]: #697
#752 := (iff #416 true)
#742 := [rewrite]: #752
#536 := [monotonicity #742 #704]: #535
#693 := [trans #536 #690]: #692
#751 := (iff #749 false)
#746 := [rewrite]: #751
#694 := [monotonicity #746 #188 #693]: #691
#577 := [trans #694 #703]: #576
#683 := [monotonicity #577]: #682
#586 := [trans #683 #571]: #682
#587 := [quant-inst]: #685
#588 := [mp #587 #586]: #537
[unit-resolution #588 #766 #194]: false
unsat
334231bac1c10cb79d865cb2c86779cf7dd19631 324 0
#2 := false
#68 := -1::int
decl f3 :: (-> int int int)
#172 := -3::int
#38 := 1::int
#175 := (f3 1::int -3::int)
#180 := (= #175 -1::int)
#193 := (not #180)
#42 := (- 1::int)
#39 := 3::int
#40 := (- 3::int)
#41 := (f3 1::int #40)
#43 := (= #41 #42)
#44 := (not #43)
#196 := (iff #44 #193)
#183 := (= -1::int #175)
#188 := (not #183)
#194 := (iff #188 #193)
#191 := (iff #183 #180)
#192 := [rewrite]: #191
#195 := [monotonicity #192]: #194
#189 := (iff #44 #188)
#186 := (iff #43 #183)
#184 := (iff #180 #183)
#185 := [rewrite]: #184
#181 := (iff #43 #180)
#178 := (= #42 -1::int)
#179 := [rewrite]: #178
#176 := (= #41 #175)
#173 := (= #40 -3::int)
#174 := [rewrite]: #173
#177 := [monotonicity #174]: #176
#182 := [monotonicity #177 #179]: #181
#187 := [trans #182 #185]: #186
#190 := [monotonicity #187]: #189
#197 := [trans #190 #195]: #196
#171 := [asserted]: #44
#198 := [mp #171 #197]: #193
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#756 := (pattern #10)
#11 := 0::int
#72 := (* -1::int #9)
#69 := (* -1::int #8)
#75 := (div #69 #72)
#259 := (* -1::int #75)
#260 := (+ #10 #259)
#261 := (= #260 0::int)
#21 := (div #8 #9)
#256 := (* -1::int #21)
#257 := (+ #10 #256)
#258 := (= #257 0::int)
#94 := (<= #9 0::int)
#90 := (<= #8 0::int)
#214 := (or #90 #94)
#215 := (not #214)
#101 := (>= #8 0::int)
#206 := (or #94 #101)
#207 := (not #206)
#221 := (or #207 #215)
#262 := (ite #221 #258 #261)
#255 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#263 := (ite #14 #255 #262)
#757 := (forall (vars (?v0 int) (?v1 int)) (:pat #756) #263)
#266 := (forall (vars (?v0 int) (?v1 int)) #263)
#760 := (iff #266 #757)
#758 := (iff #263 #263)
#759 := [refl]: #758
#761 := [quant-intro #759]: #760
#226 := (ite #221 #21 #75)
#229 := (ite #14 0::int #226)
#232 := (= #10 #229)
#235 := (forall (vars (?v0 int) (?v1 int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#102 := (not #101)
#95 := (not #94)
#105 := (and #95 #102)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#111 := (ite #108 #21 #75)
#114 := (ite #14 0::int #111)
#117 := (= #10 #114)
#120 := (forall (vars (?v0 int) (?v1 int)) #117)
#236 := (iff #120 #235)
#233 := (iff #117 #232)
#230 := (= #114 #229)
#227 := (= #111 #226)
#224 := (iff #108 #221)
#218 := (or #215 #207)
#222 := (iff #218 #221)
#223 := [rewrite]: #222
#219 := (iff #108 #218)
#216 := (iff #105 #207)
#217 := [rewrite]: #216
#204 := (iff #98 #215)
#205 := [rewrite]: #204
#220 := [monotonicity #205 #217]: #219
#225 := [trans #220 #223]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#210 := (~ #120 #120)
#208 := (~ #117 #117)
#209 := [refl]: #208
#211 := [nnf-pos #209]: #210
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#123 := (iff #28 #120)
#62 := (and #16 #18)
#65 := (or #17 #62)
#78 := (ite #65 #21 #75)
#81 := (ite #14 0::int #78)
#84 := (= #10 #81)
#87 := (forall (vars (?v0 int) (?v1 int)) #84)
#121 := (iff #87 #120)
#118 := (iff #84 #117)
#115 := (= #81 #114)
#112 := (= #78 #111)
#109 := (iff #65 #108)
#106 := (iff #62 #105)
#103 := (iff #18 #102)
#104 := [rewrite]: #103
#96 := (iff #16 #95)
#97 := [rewrite]: #96
#107 := [monotonicity #97 #104]: #106
#99 := (iff #17 #98)
#92 := (iff #15 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#88 := (iff #28 #87)
#85 := (iff #27 #84)
#82 := (= #26 #81)
#79 := (= #25 #78)
#76 := (= #24 #75)
#73 := (= #23 #72)
#74 := [rewrite]: #73
#70 := (= #22 #69)
#71 := [rewrite]: #70
#77 := [monotonicity #71 #74]: #76
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#80 := [monotonicity #67 #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#124 := [trans #89 #122]: #123
#61 := [asserted]: #28
#125 := [mp #61 #124]: #120
#201 := [mp~ #125 #211]: #120
#238 := [mp #201 #237]: #235
#269 := [mp #238 #268]: #266
#762 := [mp #269 #761]: #757
#672 := (not #757)
#669 := (or #672 #180)
#343 := (* -1::int -3::int)
#427 := (* -1::int 1::int)
#428 := (div #427 #343)
#429 := (* -1::int #428)
#420 := (+ #175 #429)
#431 := (= #420 0::int)
#432 := (div 1::int -3::int)
#433 := (* -1::int #432)
#430 := (+ #175 #433)
#434 := (= #430 0::int)
#413 := (<= -3::int 0::int)
#748 := (<= 1::int 0::int)
#750 := (or #748 #413)
#407 := (not #750)
#537 := (>= 1::int 0::int)
#744 := (or #413 #537)
#418 := (not #744)
#419 := (or #418 #407)
#751 := (ite #419 #434 #431)
#752 := (= #175 0::int)
#753 := (= -3::int 0::int)
#754 := (= 1::int 0::int)
#749 := (or #754 #753)
#755 := (ite #749 #752 #751)
#671 := (or #672 #755)
#682 := (iff #671 #669)
#679 := (iff #669 #669)
#684 := [rewrite]: #679
#678 := (iff #755 #180)
#585 := (ite false #752 #180)
#595 := (iff #585 #180)
#596 := [rewrite]: #595
#687 := (iff #755 #585)
#597 := (iff #751 #180)
#593 := (iff #751 #585)
#591 := (iff #431 #180)
#580 := (+ 1::int #175)
#685 := (= #580 0::int)
#574 := (iff #685 #180)
#589 := [rewrite]: #574
#686 := (iff #431 #685)
#688 := (= #420 #580)
#694 := (+ #175 1::int)
#581 := (= #694 #580)
#540 := [rewrite]: #581
#697 := (= #420 #694)
#695 := (= #429 1::int)
#536 := (* -1::int -1::int)
#692 := (= #536 1::int)
#693 := [rewrite]: #692
#538 := (= #429 #536)
#700 := (= #428 -1::int)
#704 := (div -1::int 3::int)
#705 := (= #704 -1::int)
#706 := [rewrite]: #705
#698 := (= #428 #704)
#702 := (= #343 3::int)
#703 := [rewrite]: #702
#559 := (= #427 -1::int)
#701 := [rewrite]: #559
#699 := [monotonicity #701 #703]: #698
#707 := [trans #699 #706]: #700
#539 := [monotonicity #707]: #538
#696 := [trans #539 #693]: #695
#579 := [monotonicity #696]: #697
#590 := [trans #579 #540]: #688
#689 := [monotonicity #590]: #686
#592 := [trans #689 #589]: #591
#557 := (iff #434 #752)
#710 := (= #430 #175)
#713 := (+ #175 0::int)
#714 := (= #713 #175)
#715 := [rewrite]: #714
#708 := (= #430 #713)
#711 := (= #433 0::int)
#435 := (* -1::int 0::int)
#718 := (= #435 0::int)
#722 := [rewrite]: #718
#717 := (= #433 #435)
#719 := (= #432 0::int)
#720 := [rewrite]: #719
#721 := [monotonicity #720]: #717
#712 := [trans #721 #722]: #711
#709 := [monotonicity #712]: #708
#716 := [trans #709 #715]: #710
#558 := [monotonicity #716]: #557
#440 := (iff #419 false)
#406 := (or false false)
#731 := (iff #406 false)
#394 := [rewrite]: #731
#438 := (iff #419 #406)
#724 := (iff #407 false)
#1 := true
#381 := (not true)
#740 := (iff #381 false)
#743 := [rewrite]: #740
#723 := (iff #407 #381)
#448 := (iff #750 true)
#454 := (or false true)
#725 := (iff #454 true)
#726 := [rewrite]: #725
#455 := (iff #750 #454)
#397 := (iff #413 true)
#733 := [rewrite]: #397
#452 := (iff #748 false)
#453 := [rewrite]: #452
#349 := [monotonicity #453 #733]: #455
#449 := [trans #349 #726]: #448
#727 := [monotonicity #449]: #723
#728 := [trans #727 #743]: #724
#729 := (iff #418 false)
#382 := (iff #418 #381)
#739 := (iff #744 true)
#736 := (or true true)
#738 := (iff #736 true)
#376 := [rewrite]: #738
#737 := (iff #744 #736)
#734 := (iff #537 true)
#735 := [rewrite]: #734
#732 := [monotonicity #733 #735]: #737
#741 := [trans #732 #376]: #739
#742 := [monotonicity #741]: #382
#730 := [trans #742 #743]: #729
#439 := [monotonicity #730 #728]: #438
#441 := [trans #439 #394]: #440
#594 := [monotonicity #441 #558 #592]: #593
#690 := [trans #594 #596]: #597
#395 := (iff #749 false)
#747 := (iff #749 #406)
#410 := (iff #753 false)
#746 := [rewrite]: #410
#745 := (iff #754 false)
#405 := [rewrite]: #745
#390 := [monotonicity #405 #746]: #747
#396 := [trans #390 #394]: #395
#691 := [monotonicity #396 #690]: #687
#680 := [trans #691 #596]: #678
#683 := [monotonicity #680]: #682
#673 := [trans #683 #684]: #682
#681 := [quant-inst]: #671
#674 := [mp #681 #673]: #669
[unit-resolution #674 #762 #198]: false
unsat
ed5e3568452fe6600500ab5071290e80a7175922 322 0
#2 := false
#38 := 1::int
decl f4 :: (-> int int int)
#39 := 3::int
#40 := (f4 1::int 3::int)
#41 := (= #40 1::int)
#42 := (not #41)
#169 := [asserted]: #42
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#744 := (pattern #29)
#11 := 0::int
#66 := -1::int
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#125 := (mod #67 #70)
#256 := (+ #29 #125)
#257 := (= #256 0::int)
#30 := (mod #8 #9)
#253 := (* -1::int #30)
#254 := (+ #29 #253)
#255 := (= #254 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#195 := (or #88 #92)
#196 := (not #195)
#99 := (>= #8 0::int)
#187 := (or #92 #99)
#188 := (not #187)
#202 := (or #188 #196)
#258 := (ite #202 #255 #257)
#252 := (= #29 0::int)
#12 := (= #8 0::int)
#259 := (ite #12 #252 #258)
#251 := (= #8 #29)
#13 := (= #9 0::int)
#260 := (ite #13 #251 #259)
#745 := (forall (vars (?v0 int) (?v1 int)) (:pat #744) #260)
#263 := (forall (vars (?v0 int) (?v1 int)) #260)
#748 := (iff #263 #745)
#746 := (iff #260 #260)
#747 := [refl]: #746
#749 := [quant-intro #747]: #748
#131 := (* -1::int #125)
#220 := (ite #202 #30 #131)
#223 := (ite #12 0::int #220)
#226 := (ite #13 #8 #223)
#229 := (= #29 #226)
#232 := (forall (vars (?v0 int) (?v1 int)) #229)
#264 := (iff #232 #263)
#261 := (iff #229 #260)
#262 := [rewrite]: #261
#265 := [quant-intro #262]: #264
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#151 := (ite #106 #30 #131)
#154 := (ite #12 0::int #151)
#157 := (ite #13 #8 #154)
#160 := (= #29 #157)
#163 := (forall (vars (?v0 int) (?v1 int)) #160)
#233 := (iff #163 #232)
#230 := (iff #160 #229)
#227 := (= #157 #226)
#224 := (= #154 #223)
#221 := (= #151 #220)
#205 := (iff #106 #202)
#199 := (or #196 #188)
#203 := (iff #199 #202)
#204 := [rewrite]: #203
#200 := (iff #106 #199)
#197 := (iff #103 #188)
#198 := [rewrite]: #197
#185 := (iff #96 #196)
#186 := [rewrite]: #185
#201 := [monotonicity #186 #198]: #200
#206 := [trans #201 #204]: #205
#222 := [monotonicity #206]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [quant-intro #231]: #233
#183 := (~ #163 #163)
#180 := (~ #160 #160)
#193 := [refl]: #180
#184 := [nnf-pos #193]: #183
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#166 := (iff #37 #163)
#60 := (and #16 #18)
#63 := (or #17 #60)
#136 := (ite #63 #30 #131)
#139 := (ite #12 0::int #136)
#142 := (ite #13 #8 #139)
#145 := (= #29 #142)
#148 := (forall (vars (?v0 int) (?v1 int)) #145)
#164 := (iff #148 #163)
#161 := (iff #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#152 := (= #136 #151)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#153 := [monotonicity #108]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#149 := (iff #37 #148)
#146 := (iff #36 #145)
#143 := (= #35 #142)
#140 := (= #34 #139)
#137 := (= #33 #136)
#134 := (= #32 #131)
#128 := (- #125)
#132 := (= #128 #131)
#133 := [rewrite]: #132
#129 := (= #32 #128)
#126 := (= #31 #125)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#127 := [monotonicity #69 #72]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#138 := [monotonicity #65 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#167 := [trans #150 #165]: #166
#124 := [asserted]: #37
#168 := [mp #124 #167]: #163
#194 := [mp~ #168 #184]: #163
#235 := [mp #194 #234]: #232
#266 := [mp #235 #265]: #263
#750 := [mp #266 #749]: #745
#664 := (not #745)
#660 := (or #664 #41)
#324 := (* -1::int 3::int)
#408 := (* -1::int 1::int)
#409 := (mod #408 #324)
#410 := (+ #40 #409)
#401 := (= #410 0::int)
#412 := (mod 1::int 3::int)
#413 := (* -1::int #412)
#414 := (+ #40 #413)
#411 := (= #414 0::int)
#415 := (<= 3::int 0::int)
#394 := (<= 1::int 0::int)
#729 := (or #394 #415)
#731 := (not #729)
#388 := (>= 1::int 0::int)
#518 := (or #415 #388)
#725 := (not #518)
#399 := (or #725 #731)
#400 := (ite #399 #411 #401)
#732 := (= #40 0::int)
#733 := (= 1::int 0::int)
#734 := (ite #733 #732 #400)
#170 := (= 1::int #40)
#735 := (= 3::int 0::int)
#730 := (ite #735 #170 #734)
#665 := (or #664 #730)
#655 := (iff #665 #660)
#657 := (iff #660 #660)
#651 := [rewrite]: #657
#662 := (iff #730 #41)
#659 := (ite false #41 #41)
#650 := (iff #659 #41)
#652 := [rewrite]: #650
#661 := (iff #730 #659)
#668 := (iff #734 #41)
#575 := (ite false #732 #41)
#578 := (iff #575 #41)
#671 := [rewrite]: #578
#576 := (iff #734 #575)
#566 := (iff #400 #41)
#562 := -2::int
#521 := (= #40 -2::int)
#1 := true
#670 := (ite true #41 #521)
#572 := (iff #670 #41)
#573 := [rewrite]: #572
#555 := (iff #400 #670)
#666 := (iff #401 #521)
#680 := 2::int
#673 := (+ 2::int #40)
#678 := (= #673 0::int)
#669 := (iff #678 #521)
#571 := [rewrite]: #669
#560 := (iff #401 #678)
#677 := (= #410 #673)
#517 := (+ #40 2::int)
#674 := (= #517 #673)
#676 := [rewrite]: #674
#519 := (= #410 #517)
#681 := (= #409 2::int)
#540 := -3::int
#684 := (mod -1::int -3::int)
#686 := (= #684 2::int)
#687 := [rewrite]: #686
#685 := (= #409 #684)
#682 := (= #324 -3::int)
#683 := [rewrite]: #682
#422 := (= #408 -1::int)
#700 := [rewrite]: #422
#679 := [monotonicity #700 #683]: #685
#688 := [trans #679 #687]: #681
#520 := [monotonicity #688]: #519
#675 := [trans #520 #676]: #677
#561 := [monotonicity #675]: #560
#667 := [trans #561 #571]: #666
#538 := (iff #411 #41)
#703 := (+ -1::int #40)
#690 := (= #703 0::int)
#691 := (iff #690 #41)
#697 := [rewrite]: #691
#695 := (iff #411 #690)
#694 := (= #414 #703)
#698 := (+ #40 -1::int)
#692 := (= #698 #703)
#693 := [rewrite]: #692
#702 := (= #414 #698)
#701 := (= #413 -1::int)
#420 := (= #413 #408)
#709 := (= #412 1::int)
#419 := [rewrite]: #709
#421 := [monotonicity #419]: #420
#416 := [trans #421 #700]: #701
#699 := [monotonicity #416]: #702
#689 := [trans #699 #693]: #694
#696 := [monotonicity #689]: #695
#539 := [trans #696 #697]: #538
#708 := (iff #399 true)
#712 := (or false true)
#377 := (iff #712 true)
#378 := [rewrite]: #377
#430 := (iff #399 #712)
#707 := (iff #731 true)
#434 := (not false)
#330 := (iff #434 true)
#706 := [rewrite]: #330
#435 := (iff #731 #434)
#711 := (iff #729 false)
#363 := (or false false)
#724 := (iff #363 false)
#710 := [rewrite]: #724
#723 := (iff #729 #363)
#727 := (iff #415 false)
#387 := [rewrite]: #727
#722 := (iff #394 false)
#362 := [rewrite]: #722
#721 := [monotonicity #362 #387]: #723
#433 := [trans #721 #710]: #711
#436 := [monotonicity #433]: #435
#429 := [trans #436 #706]: #707
#357 := (iff #725 false)
#716 := (not true)
#713 := (iff #716 false)
#719 := [rewrite]: #713
#717 := (iff #725 #716)
#714 := (iff #518 true)
#375 := (iff #518 #712)
#728 := (iff #388 true)
#371 := [rewrite]: #728
#376 := [monotonicity #387 #371]: #375
#715 := [trans #376 #378]: #714
#718 := [monotonicity #715]: #717
#720 := [trans #718 #719]: #357
#704 := [monotonicity #720 #429]: #430
#705 := [trans #704 #378]: #708
#570 := [monotonicity #705 #539 #667]: #555
#574 := [trans #570 #573]: #566
#386 := (iff #733 false)
#391 := [rewrite]: #386
#577 := [monotonicity #391 #574]: #576
#672 := [trans #577 #671]: #668
#176 := (iff #170 #41)
#177 := [rewrite]: #176
#736 := (iff #735 false)
#726 := [rewrite]: #736
#653 := [monotonicity #726 #177 #672]: #661
#663 := [trans #653 #652]: #662
#656 := [monotonicity #663]: #655
#658 := [trans #656 #651]: #655
#654 := [quant-inst]: #665
#642 := [mp #654 #658]: #660
[unit-resolution #642 #750 #169]: false
unsat
60a3e615568433502bc15c7d472c0ece644ee329 323 0
#2 := false
#68 := -1::int
decl f3 :: (-> int int int)
#172 := -3::int
#38 := 3::int
#175 := (f3 3::int -3::int)
#180 := (= #175 -1::int)
#193 := (not #180)
#41 := 1::int
#42 := (- 1::int)
#39 := (- 3::int)
#40 := (f3 3::int #39)
#43 := (= #40 #42)
#44 := (not #43)
#196 := (iff #44 #193)
#183 := (= -1::int #175)
#188 := (not #183)
#194 := (iff #188 #193)
#191 := (iff #183 #180)
#192 := [rewrite]: #191
#195 := [monotonicity #192]: #194
#189 := (iff #44 #188)
#186 := (iff #43 #183)
#184 := (iff #180 #183)
#185 := [rewrite]: #184
#181 := (iff #43 #180)
#178 := (= #42 -1::int)
#179 := [rewrite]: #178
#176 := (= #40 #175)
#173 := (= #39 -3::int)
#174 := [rewrite]: #173
#177 := [monotonicity #174]: #176
#182 := [monotonicity #177 #179]: #181
#187 := [trans #182 #185]: #186
#190 := [monotonicity #187]: #189
#197 := [trans #190 #195]: #196
#171 := [asserted]: #44
#198 := [mp #171 #197]: #193
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#756 := (pattern #10)
#11 := 0::int
#72 := (* -1::int #9)
#69 := (* -1::int #8)
#75 := (div #69 #72)
#259 := (* -1::int #75)
#260 := (+ #10 #259)
#261 := (= #260 0::int)
#21 := (div #8 #9)
#256 := (* -1::int #21)
#257 := (+ #10 #256)
#258 := (= #257 0::int)
#94 := (<= #9 0::int)
#90 := (<= #8 0::int)
#214 := (or #90 #94)
#215 := (not #214)
#101 := (>= #8 0::int)
#206 := (or #94 #101)
#207 := (not #206)
#221 := (or #207 #215)
#262 := (ite #221 #258 #261)
#255 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#263 := (ite #14 #255 #262)
#757 := (forall (vars (?v0 int) (?v1 int)) (:pat #756) #263)
#266 := (forall (vars (?v0 int) (?v1 int)) #263)
#760 := (iff #266 #757)
#758 := (iff #263 #263)
#759 := [refl]: #758
#761 := [quant-intro #759]: #760
#226 := (ite #221 #21 #75)
#229 := (ite #14 0::int #226)
#232 := (= #10 #229)
#235 := (forall (vars (?v0 int) (?v1 int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#102 := (not #101)
#95 := (not #94)
#105 := (and #95 #102)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#111 := (ite #108 #21 #75)
#114 := (ite #14 0::int #111)
#117 := (= #10 #114)
#120 := (forall (vars (?v0 int) (?v1 int)) #117)
#236 := (iff #120 #235)
#233 := (iff #117 #232)
#230 := (= #114 #229)
#227 := (= #111 #226)
#224 := (iff #108 #221)
#218 := (or #215 #207)
#222 := (iff #218 #221)
#223 := [rewrite]: #222
#219 := (iff #108 #218)
#216 := (iff #105 #207)
#217 := [rewrite]: #216
#204 := (iff #98 #215)
#205 := [rewrite]: #204
#220 := [monotonicity #205 #217]: #219
#225 := [trans #220 #223]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#210 := (~ #120 #120)
#208 := (~ #117 #117)
#209 := [refl]: #208
#211 := [nnf-pos #209]: #210
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#123 := (iff #28 #120)
#62 := (and #16 #18)
#65 := (or #17 #62)
#78 := (ite #65 #21 #75)
#81 := (ite #14 0::int #78)
#84 := (= #10 #81)
#87 := (forall (vars (?v0 int) (?v1 int)) #84)
#121 := (iff #87 #120)
#118 := (iff #84 #117)
#115 := (= #81 #114)
#112 := (= #78 #111)
#109 := (iff #65 #108)
#106 := (iff #62 #105)
#103 := (iff #18 #102)
#104 := [rewrite]: #103
#96 := (iff #16 #95)
#97 := [rewrite]: #96
#107 := [monotonicity #97 #104]: #106
#99 := (iff #17 #98)
#92 := (iff #15 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#88 := (iff #28 #87)
#85 := (iff #27 #84)
#82 := (= #26 #81)
#79 := (= #25 #78)
#76 := (= #24 #75)
#73 := (= #23 #72)
#74 := [rewrite]: #73
#70 := (= #22 #69)
#71 := [rewrite]: #70
#77 := [monotonicity #71 #74]: #76
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#80 := [monotonicity #67 #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#124 := [trans #89 #122]: #123
#61 := [asserted]: #28
#125 := [mp #61 #124]: #120
#201 := [mp~ #125 #211]: #120
#238 := [mp #201 #237]: #235
#269 := [mp #238 #268]: #266
#762 := [mp #269 #761]: #757
#680 := (not #757)
#672 := (or #680 #180)
#343 := (* -1::int -3::int)
#427 := (* -1::int 3::int)
#428 := (div #427 #343)
#429 := (* -1::int #428)
#420 := (+ #175 #429)
#431 := (= #420 0::int)
#432 := (div 3::int -3::int)
#433 := (* -1::int #432)
#430 := (+ #175 #433)
#434 := (= #430 0::int)
#413 := (<= -3::int 0::int)
#748 := (<= 3::int 0::int)
#750 := (or #748 #413)
#407 := (not #750)
#537 := (>= 3::int 0::int)
#744 := (or #413 #537)
#418 := (not #744)
#419 := (or #418 #407)
#751 := (ite #419 #434 #431)
#752 := (= #175 0::int)
#753 := (= -3::int 0::int)
#754 := (= 3::int 0::int)
#749 := (or #754 #753)
#755 := (ite #749 #752 #751)
#669 := (or #680 #755)
#681 := (iff #669 #672)
#683 := (iff #672 #672)
#679 := [rewrite]: #683
#691 := (iff #755 #180)
#595 := (ite false #752 #180)
#690 := (iff #595 #180)
#687 := [rewrite]: #690
#596 := (iff #755 #595)
#593 := (iff #751 #180)
#574 := (ite false #180 #180)
#592 := (iff #574 #180)
#585 := [rewrite]: #592
#589 := (iff #751 #574)
#686 := (iff #431 #180)
#714 := (+ 1::int #175)
#558 := (= #714 0::int)
#702 := (iff #558 #180)
#703 := [rewrite]: #702
#590 := (iff #431 #558)
#540 := (= #420 #714)
#713 := (+ #175 1::int)
#715 := (= #713 #714)
#710 := [rewrite]: #715
#580 := (= #420 #713)
#697 := (= #429 1::int)
#435 := (* -1::int -1::int)
#718 := (= #435 1::int)
#722 := [rewrite]: #718
#696 := (= #429 #435)
#693 := (= #428 -1::int)
#707 := (div -3::int 3::int)
#539 := (= #707 -1::int)
#692 := [rewrite]: #539
#536 := (= #428 #707)
#706 := (= #343 3::int)
#700 := [rewrite]: #706
#699 := (= #427 -3::int)
#705 := [rewrite]: #699
#538 := [monotonicity #705 #700]: #536
#695 := [trans #538 #692]: #693
#694 := [monotonicity #695]: #696
#579 := [trans #694 #722]: #697
#581 := [monotonicity #579]: #580
#688 := [trans #581 #710]: #540
#685 := [monotonicity #688]: #590
#689 := [trans #685 #703]: #686
#704 := (iff #434 #180)
#559 := (iff #434 #558)
#716 := (= #430 #714)
#708 := (= #430 #713)
#711 := (= #433 1::int)
#717 := (= #433 #435)
#719 := (= #432 -1::int)
#720 := [rewrite]: #719
#721 := [monotonicity #720]: #717
#712 := [trans #721 #722]: #711
#709 := [monotonicity #712]: #708
#557 := [trans #709 #710]: #716
#701 := [monotonicity #557]: #559
#698 := [trans #701 #703]: #704
#440 := (iff #419 false)
#406 := (or false false)
#731 := (iff #406 false)
#394 := [rewrite]: #731
#438 := (iff #419 #406)
#724 := (iff #407 false)
#1 := true
#381 := (not true)
#740 := (iff #381 false)
#743 := [rewrite]: #740
#723 := (iff #407 #381)
#448 := (iff #750 true)
#454 := (or false true)
#725 := (iff #454 true)
#726 := [rewrite]: #725
#455 := (iff #750 #454)
#397 := (iff #413 true)
#733 := [rewrite]: #397
#452 := (iff #748 false)
#453 := [rewrite]: #452
#349 := [monotonicity #453 #733]: #455
#449 := [trans #349 #726]: #448
#727 := [monotonicity #449]: #723
#728 := [trans #727 #743]: #724
#729 := (iff #418 false)
#382 := (iff #418 #381)
#739 := (iff #744 true)
#736 := (or true true)
#738 := (iff #736 true)
#376 := [rewrite]: #738
#737 := (iff #744 #736)
#734 := (iff #537 true)
#735 := [rewrite]: #734
#732 := [monotonicity #733 #735]: #737
#741 := [trans #732 #376]: #739
#742 := [monotonicity #741]: #382
#730 := [trans #742 #743]: #729
#439 := [monotonicity #730 #728]: #438
#441 := [trans #439 #394]: #440
#591 := [monotonicity #441 #698 #689]: #589
#594 := [trans #591 #585]: #593
#395 := (iff #749 false)
#747 := (iff #749 #406)
#410 := (iff #753 false)
#746 := [rewrite]: #410
#745 := (iff #754 false)
#405 := [rewrite]: #745
#390 := [monotonicity #405 #746]: #747
#396 := [trans #390 #394]: #395
#597 := [monotonicity #396 #594]: #596
#678 := [trans #597 #687]: #691
#682 := [monotonicity #678]: #681
#684 := [trans #682 #679]: #681
#671 := [quant-inst]: #669
#673 := [mp #671 #684]: #672
[unit-resolution #673 #762 #198]: false
unsat
1897b65589b01a36e8c901ddcdce3eb69e66fd4d 297 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#38 := 3::int
#39 := (f4 3::int 3::int)
#40 := (= #39 0::int)
#41 := (not #40)
#168 := [asserted]: #41
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#744 := (pattern #29)
#65 := -1::int
#69 := (* -1::int #9)
#66 := (* -1::int #8)
#124 := (mod #66 #69)
#255 := (+ #29 #124)
#256 := (= #255 0::int)
#30 := (mod #8 #9)
#252 := (* -1::int #30)
#253 := (+ #29 #252)
#254 := (= #253 0::int)
#91 := (<= #9 0::int)
#87 := (<= #8 0::int)
#194 := (or #87 #91)
#195 := (not #194)
#98 := (>= #8 0::int)
#186 := (or #91 #98)
#187 := (not #186)
#201 := (or #187 #195)
#257 := (ite #201 #254 #256)
#251 := (= #29 0::int)
#12 := (= #8 0::int)
#258 := (ite #12 #251 #257)
#250 := (= #8 #29)
#13 := (= #9 0::int)
#259 := (ite #13 #250 #258)
#745 := (forall (vars (?v0 int) (?v1 int)) (:pat #744) #259)
#262 := (forall (vars (?v0 int) (?v1 int)) #259)
#748 := (iff #262 #745)
#746 := (iff #259 #259)
#747 := [refl]: #746
#749 := [quant-intro #747]: #748
#130 := (* -1::int #124)
#219 := (ite #201 #30 #130)
#222 := (ite #12 0::int #219)
#225 := (ite #13 #8 #222)
#228 := (= #29 #225)
#231 := (forall (vars (?v0 int) (?v1 int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#99 := (not #98)
#92 := (not #91)
#102 := (and #92 #99)
#88 := (not #87)
#95 := (and #88 #92)
#105 := (or #95 #102)
#150 := (ite #105 #30 #130)
#153 := (ite #12 0::int #150)
#156 := (ite #13 #8 #153)
#159 := (= #29 #156)
#162 := (forall (vars (?v0 int) (?v1 int)) #159)
#232 := (iff #162 #231)
#229 := (iff #159 #228)
#226 := (= #156 #225)
#223 := (= #153 #222)
#220 := (= #150 #219)
#204 := (iff #105 #201)
#198 := (or #195 #187)
#202 := (iff #198 #201)
#203 := [rewrite]: #202
#199 := (iff #105 #198)
#196 := (iff #102 #187)
#197 := [rewrite]: #196
#184 := (iff #95 #195)
#185 := [rewrite]: #184
#200 := [monotonicity #185 #197]: #199
#205 := [trans #200 #203]: #204
#221 := [monotonicity #205]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#182 := (~ #162 #162)
#179 := (~ #159 #159)
#192 := [refl]: #179
#183 := [nnf-pos #192]: #182
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#165 := (iff #37 #162)
#59 := (and #16 #18)
#62 := (or #17 #59)
#135 := (ite #62 #30 #130)
#138 := (ite #12 0::int #135)
#141 := (ite #13 #8 #138)
#144 := (= #29 #141)
#147 := (forall (vars (?v0 int) (?v1 int)) #144)
#163 := (iff #147 #162)
#160 := (iff #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#151 := (= #135 #150)
#106 := (iff #62 #105)
#103 := (iff #59 #102)
#100 := (iff #18 #99)
#101 := [rewrite]: #100
#93 := (iff #16 #92)
#94 := [rewrite]: #93
#104 := [monotonicity #94 #101]: #103
#96 := (iff #17 #95)
#89 := (iff #15 #88)
#90 := [rewrite]: #89
#97 := [monotonicity #90 #94]: #96
#107 := [monotonicity #97 #104]: #106
#152 := [monotonicity #107]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [quant-intro #161]: #163
#148 := (iff #37 #147)
#145 := (iff #36 #144)
#142 := (= #35 #141)
#139 := (= #34 #138)
#136 := (= #33 #135)
#133 := (= #32 #130)
#127 := (- #124)
#131 := (= #127 #130)
#132 := [rewrite]: #131
#128 := (= #32 #127)
#125 := (= #31 #124)
#70 := (= #23 #69)
#71 := [rewrite]: #70
#67 := (= #22 #66)
#68 := [rewrite]: #67
#126 := [monotonicity #68 #71]: #125
#129 := [monotonicity #126]: #128
#134 := [trans #129 #132]: #133
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#137 := [monotonicity #64 #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [quant-intro #146]: #148
#166 := [trans #149 #164]: #165
#123 := [asserted]: #37
#167 := [mp #123 #166]: #162
#193 := [mp~ #167 #183]: #162
#234 := [mp #193 #233]: #231
#265 := [mp #234 #264]: #262
#750 := [mp #265 #749]: #745
#667 := (not #745)
#670 := (or #667 #40)
#323 := (* -1::int 3::int)
#408 := (mod #323 #323)
#409 := (+ #39 #408)
#410 := (= #409 0::int)
#401 := (mod 3::int 3::int)
#412 := (* -1::int #401)
#413 := (+ #39 #412)
#341 := (= #413 0::int)
#414 := (<= 3::int 0::int)
#411 := (or #414 #414)
#415 := (not #411)
#394 := (>= 3::int 0::int)
#729 := (or #414 #394)
#731 := (not #729)
#388 := (or #731 #415)
#518 := (ite #388 #341 #410)
#725 := (= 3::int 0::int)
#399 := (ite #725 #40 #518)
#400 := (= 3::int #39)
#732 := (ite #725 #400 #399)
#555 := (or #667 #732)
#572 := (iff #555 #670)
#566 := (iff #670 #670)
#574 := [rewrite]: #566
#571 := (iff #732 #40)
#730 := (= #39 3::int)
#560 := (ite false #730 #40)
#521 := (iff #560 #40)
#669 := [rewrite]: #521
#561 := (iff #732 #560)
#675 := (iff #399 #40)
#520 := (ite false #40 #40)
#676 := (iff #520 #40)
#677 := [rewrite]: #676
#673 := (iff #399 #520)
#517 := (iff #518 #40)
#1 := true
#680 := (ite true #40 #40)
#681 := (iff #680 #40)
#688 := [rewrite]: #681
#686 := (iff #518 #680)
#685 := (iff #410 #40)
#683 := (= #409 #39)
#422 := (+ #39 0::int)
#416 := (= #422 #39)
#698 := [rewrite]: #416
#540 := (= #409 #422)
#538 := (= #408 0::int)
#693 := -3::int
#690 := (mod -3::int -3::int)
#691 := (= #690 0::int)
#697 := [rewrite]: #691
#695 := (= #408 #690)
#694 := (= #323 -3::int)
#689 := [rewrite]: #694
#696 := [monotonicity #689 #689]: #695
#539 := [trans #696 #697]: #538
#682 := [monotonicity #539]: #540
#684 := [trans #682 #698]: #683
#679 := [monotonicity #684]: #685
#703 := (iff #341 #40)
#702 := (= #413 #39)
#700 := (= #413 #422)
#420 := (= #412 0::int)
#704 := (* -1::int 0::int)
#709 := (= #704 0::int)
#419 := [rewrite]: #709
#708 := (= #412 #704)
#429 := (= #401 0::int)
#430 := [rewrite]: #429
#705 := [monotonicity #430]: #708
#421 := [trans #705 #419]: #420
#701 := [monotonicity #421]: #700
#699 := [trans #701 #698]: #702
#692 := [monotonicity #699]: #703
#706 := (iff #388 true)
#387 := (or false true)
#712 := (iff #387 true)
#375 := [rewrite]: #712
#436 := (iff #388 #387)
#434 := (iff #415 true)
#721 := (not false)
#711 := (iff #721 true)
#433 := [rewrite]: #711
#724 := (iff #415 #721)
#363 := (iff #411 false)
#719 := (or false false)
#722 := (iff #719 false)
#362 := [rewrite]: #722
#357 := (iff #411 #719)
#726 := (iff #414 false)
#386 := [rewrite]: #726
#720 := [monotonicity #386 #386]: #357
#723 := [trans #720 #362]: #363
#710 := [monotonicity #723]: #724
#435 := [trans #710 #433]: #434
#718 := (iff #731 false)
#378 := (not true)
#716 := (iff #378 false)
#717 := [rewrite]: #716
#714 := (iff #731 #378)
#376 := (iff #729 true)
#728 := (iff #729 #387)
#391 := (iff #394 true)
#727 := [rewrite]: #391
#371 := [monotonicity #386 #727]: #728
#377 := [trans #371 #375]: #376
#715 := [monotonicity #377]: #714
#713 := [trans #715 #717]: #718
#329 := [monotonicity #713 #435]: #436
#707 := [trans #329 #375]: #706
#687 := [monotonicity #707 #692 #679]: #686
#519 := [trans #687 #688]: #517
#733 := (iff #725 false)
#734 := [rewrite]: #733
#674 := [monotonicity #734 #519]: #673
#678 := [trans #674 #677]: #675
#735 := (iff #400 #730)
#736 := [rewrite]: #735
#562 := [monotonicity #734 #736 #678]: #561
#666 := [trans #562 #669]: #571
#573 := [monotonicity #666]: #572
#575 := [trans #573 #574]: #572
#570 := [quant-inst]: #555
#576 := [mp #570 #575]: #670
[unit-resolution #576 #750 #168]: false
unsat
0217fb3975a8ed7626e13b93029371f1151b43e4 326 0
#2 := false
#179 := -2::int
decl f3 :: (-> int int int)
#173 := -3::int
#38 := 5::int
#176 := (f3 5::int -3::int)
#182 := (= #176 -2::int)
#185 := (not #182)
#42 := 2::int
#43 := (- 2::int)
#39 := 3::int
#40 := (- 3::int)
#41 := (f3 5::int #40)
#44 := (= #41 #43)
#45 := (not #44)
#186 := (iff #45 #185)
#183 := (iff #44 #182)
#180 := (= #43 -2::int)
#181 := [rewrite]: #180
#177 := (= #41 #176)
#174 := (= #40 -3::int)
#175 := [rewrite]: #174
#178 := [monotonicity #175]: #177
#184 := [monotonicity #178 #181]: #183
#187 := [monotonicity #184]: #186
#172 := [asserted]: #45
#190 := [mp #172 #187]: #185
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#747 := (pattern #10)
#11 := 0::int
#69 := -1::int
#73 := (* -1::int #9)
#70 := (* -1::int #8)
#76 := (div #70 #73)
#249 := (* -1::int #76)
#250 := (+ #10 #249)
#251 := (= #250 0::int)
#21 := (div #8 #9)
#246 := (* -1::int #21)
#247 := (+ #10 #246)
#248 := (= #247 0::int)
#95 := (<= #9 0::int)
#91 := (<= #8 0::int)
#204 := (or #91 #95)
#205 := (not #204)
#102 := (>= #8 0::int)
#196 := (or #95 #102)
#197 := (not #196)
#211 := (or #197 #205)
#252 := (ite #211 #248 #251)
#245 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#253 := (ite #14 #245 #252)
#748 := (forall (vars (?v0 int) (?v1 int)) (:pat #747) #253)
#256 := (forall (vars (?v0 int) (?v1 int)) #253)
#751 := (iff #256 #748)
#749 := (iff #253 #253)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#216 := (ite #211 #21 #76)
#219 := (ite #14 0::int #216)
#222 := (= #10 #219)
#225 := (forall (vars (?v0 int) (?v1 int)) #222)
#257 := (iff #225 #256)
#254 := (iff #222 #253)
#255 := [rewrite]: #254
#258 := [quant-intro #255]: #257
#103 := (not #102)
#96 := (not #95)
#106 := (and #96 #103)
#92 := (not #91)
#99 := (and #92 #96)
#109 := (or #99 #106)
#112 := (ite #109 #21 #76)
#115 := (ite #14 0::int #112)
#118 := (= #10 #115)
#121 := (forall (vars (?v0 int) (?v1 int)) #118)
#226 := (iff #121 #225)
#223 := (iff #118 #222)
#220 := (= #115 #219)
#217 := (= #112 #216)
#214 := (iff #109 #211)
#208 := (or #205 #197)
#212 := (iff #208 #211)
#213 := [rewrite]: #212
#209 := (iff #109 #208)
#206 := (iff #106 #197)
#207 := [rewrite]: #206
#194 := (iff #99 #205)
#195 := [rewrite]: #194
#210 := [monotonicity #195 #207]: #209
#215 := [trans #210 #213]: #214
#218 := [monotonicity #215]: #217
#221 := [monotonicity #218]: #220
#224 := [monotonicity #221]: #223
#227 := [quant-intro #224]: #226
#200 := (~ #121 #121)
#198 := (~ #118 #118)
#199 := [refl]: #198
#201 := [nnf-pos #199]: #200
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#124 := (iff #28 #121)
#63 := (and #16 #18)
#66 := (or #17 #63)
#79 := (ite #66 #21 #76)
#82 := (ite #14 0::int #79)
#85 := (= #10 #82)
#88 := (forall (vars (?v0 int) (?v1 int)) #85)
#122 := (iff #88 #121)
#119 := (iff #85 #118)
#116 := (= #82 #115)
#113 := (= #79 #112)
#110 := (iff #66 #109)
#107 := (iff #63 #106)
#104 := (iff #18 #103)
#105 := [rewrite]: #104
#97 := (iff #16 #96)
#98 := [rewrite]: #97
#108 := [monotonicity #98 #105]: #107
#100 := (iff #17 #99)
#93 := (iff #15 #92)
#94 := [rewrite]: #93
#101 := [monotonicity #94 #98]: #100
#111 := [monotonicity #101 #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [monotonicity #117]: #119
#123 := [quant-intro #120]: #122
#89 := (iff #28 #88)
#86 := (iff #27 #85)
#83 := (= #26 #82)
#80 := (= #25 #79)
#77 := (= #24 #76)
#74 := (= #23 #73)
#75 := [rewrite]: #74
#71 := (= #22 #70)
#72 := [rewrite]: #71
#78 := [monotonicity #72 #75]: #77
#67 := (iff #20 #66)
#64 := (iff #19 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#81 := [monotonicity #68 #78]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#90 := [quant-intro #87]: #89
#125 := [trans #90 #123]: #124
#62 := [asserted]: #28
#126 := [mp #62 #125]: #121
#191 := [mp~ #126 #201]: #121
#228 := [mp #191 #227]: #225
#259 := [mp #228 #258]: #256
#753 := [mp #259 #752]: #748
#667 := (not #748)
#661 := (or #667 #182)
#333 := (* -1::int -3::int)
#418 := (* -1::int 5::int)
#419 := (div #418 #333)
#420 := (* -1::int #419)
#411 := (+ #176 #420)
#422 := (= #411 0::int)
#423 := (div 5::int -3::int)
#351 := (* -1::int #423)
#424 := (+ #176 #351)
#421 := (= #424 0::int)
#425 := (<= -3::int 0::int)
#404 := (<= 5::int 0::int)
#739 := (or #404 #425)
#741 := (not #739)
#398 := (>= 5::int 0::int)
#528 := (or #425 #398)
#735 := (not #528)
#409 := (or #735 #741)
#410 := (ite #409 #421 #422)
#742 := (= #176 0::int)
#743 := (= -3::int 0::int)
#744 := (= 5::int 0::int)
#745 := (or #744 #743)
#740 := (ite #745 #742 #410)
#668 := (or #667 #740)
#653 := (iff #668 #661)
#656 := (iff #661 #661)
#657 := [rewrite]: #656
#665 := (iff #740 #182)
#673 := (ite false #742 #182)
#675 := (iff #673 #182)
#664 := [rewrite]: #675
#674 := (iff #740 #673)
#662 := (iff #410 #182)
#693 := (= #176 -1::int)
#682 := (ite false #693 #182)
#663 := (iff #682 #182)
#660 := [rewrite]: #663
#669 := (iff #410 #682)
#681 := (iff #422 #182)
#565 := (+ 2::int #176)
#584 := (= #565 0::int)
#587 := (iff #584 #182)
#588 := [rewrite]: #587
#585 := (iff #422 #584)
#583 := (= #411 #565)
#676 := (+ #176 2::int)
#580 := (= #676 #565)
#582 := [rewrite]: #580
#677 := (= #411 #676)
#679 := (= #420 2::int)
#688 := (* -1::int -2::int)
#572 := (= #688 2::int)
#531 := [rewrite]: #572
#570 := (= #420 #688)
#687 := (= #419 -2::int)
#696 := -5::int
#529 := (div -5::int 3::int)
#684 := (= #529 -2::int)
#686 := [rewrite]: #684
#530 := (= #419 #529)
#698 := (= #333 3::int)
#527 := [rewrite]: #698
#697 := (= #418 -5::int)
#691 := [rewrite]: #697
#683 := [monotonicity #691 #527]: #530
#685 := [trans #683 #686]: #687
#571 := [monotonicity #685]: #570
#581 := [trans #571 #531]: #679
#680 := [monotonicity #581]: #677
#576 := [trans #680 #582]: #583
#586 := [monotonicity #576]: #585
#678 := [trans #586 #588]: #681
#689 := (iff #421 #693)
#712 := 1::int
#705 := (+ 1::int #176)
#549 := (= #705 0::int)
#694 := (iff #549 #693)
#695 := [rewrite]: #694
#550 := (iff #421 #549)
#707 := (= #424 #705)
#704 := (+ #176 1::int)
#706 := (= #704 #705)
#701 := [rewrite]: #706
#699 := (= #424 #704)
#702 := (= #351 1::int)
#711 := (* -1::int -1::int)
#709 := (= #711 1::int)
#713 := [rewrite]: #709
#426 := (= #351 #711)
#432 := (= #423 -1::int)
#710 := [rewrite]: #432
#708 := [monotonicity #710]: #426
#703 := [trans #708 #713]: #702
#700 := [monotonicity #703]: #699
#548 := [trans #700 #701]: #707
#692 := [monotonicity #548]: #550
#690 := [trans #692 #695]: #689
#430 := (iff #409 false)
#737 := (or false false)
#381 := (iff #737 false)
#722 := [rewrite]: #381
#719 := (iff #409 #737)
#718 := (iff #741 false)
#1 := true
#732 := (not true)
#733 := (iff #732 false)
#731 := [rewrite]: #733
#440 := (iff #741 #732)
#717 := (iff #739 true)
#444 := (or false true)
#339 := (iff #444 true)
#716 := [rewrite]: #339
#445 := (iff #739 #444)
#387 := (iff #425 true)
#388 := [rewrite]: #387
#721 := (iff #404 false)
#443 := [rewrite]: #721
#446 := [monotonicity #443 #388]: #445
#439 := [trans #446 #716]: #717
#714 := [monotonicity #439]: #440
#715 := [trans #714 #731]: #718
#734 := (iff #735 false)
#372 := (iff #735 #732)
#367 := (iff #528 true)
#726 := (or true true)
#723 := (iff #726 true)
#729 := [rewrite]: #723
#727 := (iff #528 #726)
#724 := (iff #398 true)
#725 := [rewrite]: #724
#728 := [monotonicity #388 #725]: #727
#730 := [trans #728 #729]: #367
#373 := [monotonicity #730]: #372
#720 := [trans #373 #731]: #734
#429 := [monotonicity #720 #715]: #719
#431 := [trans #429 #722]: #430
#671 := [monotonicity #431 #690 #678]: #669
#672 := [trans #671 #660]: #662
#385 := (iff #745 false)
#397 := (iff #745 #737)
#396 := (iff #743 false)
#401 := [rewrite]: #396
#746 := (iff #744 false)
#736 := [rewrite]: #746
#738 := [monotonicity #736 #401]: #397
#386 := [trans #738 #722]: #385
#670 := [monotonicity #386 #672]: #674
#666 := [trans #670 #664]: #665
#655 := [monotonicity #666]: #653
#658 := [trans #655 #657]: #653
#652 := [quant-inst]: #668
#654 := [mp #652 #658]: #661
[unit-resolution #654 #753 #190]: false
unsat
0950f059c8c59b021ddf8b08664ab965652bd6ab 328 0
#2 := false
#41 := 2::int
decl f4 :: (-> int int int)
#39 := 3::int
#38 := 5::int
#40 := (f4 5::int 3::int)
#42 := (= #40 2::int)
#43 := (not #42)
#170 := [asserted]: #43
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#736 := (pattern #29)
#11 := 0::int
#67 := -1::int
#71 := (* -1::int #9)
#68 := (* -1::int #8)
#126 := (mod #68 #71)
#247 := (+ #29 #126)
#248 := (= #247 0::int)
#30 := (mod #8 #9)
#244 := (* -1::int #30)
#245 := (+ #29 #244)
#246 := (= #245 0::int)
#93 := (<= #9 0::int)
#89 := (<= #8 0::int)
#186 := (or #89 #93)
#187 := (not #186)
#100 := (>= #8 0::int)
#178 := (or #93 #100)
#179 := (not #178)
#193 := (or #179 #187)
#249 := (ite #193 #246 #248)
#243 := (= #29 0::int)
#12 := (= #8 0::int)
#250 := (ite #12 #243 #249)
#242 := (= #8 #29)
#13 := (= #9 0::int)
#251 := (ite #13 #242 #250)
#737 := (forall (vars (?v0 int) (?v1 int)) (:pat #736) #251)
#254 := (forall (vars (?v0 int) (?v1 int)) #251)
#740 := (iff #254 #737)
#738 := (iff #251 #251)
#739 := [refl]: #738
#741 := [quant-intro #739]: #740
#132 := (* -1::int #126)
#211 := (ite #193 #30 #132)
#214 := (ite #12 0::int #211)
#217 := (ite #13 #8 #214)
#220 := (= #29 #217)
#223 := (forall (vars (?v0 int) (?v1 int)) #220)
#255 := (iff #223 #254)
#252 := (iff #220 #251)
#253 := [rewrite]: #252
#256 := [quant-intro #253]: #255
#101 := (not #100)
#94 := (not #93)
#104 := (and #94 #101)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#152 := (ite #107 #30 #132)
#155 := (ite #12 0::int #152)
#158 := (ite #13 #8 #155)
#161 := (= #29 #158)
#164 := (forall (vars (?v0 int) (?v1 int)) #161)
#224 := (iff #164 #223)
#221 := (iff #161 #220)
#218 := (= #158 #217)
#215 := (= #155 #214)
#212 := (= #152 #211)
#196 := (iff #107 #193)
#190 := (or #187 #179)
#194 := (iff #190 #193)
#195 := [rewrite]: #194
#191 := (iff #107 #190)
#188 := (iff #104 #179)
#189 := [rewrite]: #188
#176 := (iff #97 #187)
#177 := [rewrite]: #176
#192 := [monotonicity #177 #189]: #191
#197 := [trans #192 #195]: #196
#213 := [monotonicity #197]: #212
#216 := [monotonicity #213]: #215
#219 := [monotonicity #216]: #218
#222 := [monotonicity #219]: #221
#225 := [quant-intro #222]: #224
#174 := (~ #164 #164)
#171 := (~ #161 #161)
#184 := [refl]: #171
#175 := [nnf-pos #184]: #174
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#167 := (iff #37 #164)
#61 := (and #16 #18)
#64 := (or #17 #61)
#137 := (ite #64 #30 #132)
#140 := (ite #12 0::int #137)
#143 := (ite #13 #8 #140)
#146 := (= #29 #143)
#149 := (forall (vars (?v0 int) (?v1 int)) #146)
#165 := (iff #149 #164)
#162 := (iff #146 #161)
#159 := (= #143 #158)
#156 := (= #140 #155)
#153 := (= #137 #152)
#108 := (iff #64 #107)
#105 := (iff #61 #104)
#102 := (iff #18 #101)
#103 := [rewrite]: #102
#95 := (iff #16 #94)
#96 := [rewrite]: #95
#106 := [monotonicity #96 #103]: #105
#98 := (iff #17 #97)
#91 := (iff #15 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#154 := [monotonicity #109]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [quant-intro #163]: #165
#150 := (iff #37 #149)
#147 := (iff #36 #146)
#144 := (= #35 #143)
#141 := (= #34 #140)
#138 := (= #33 #137)
#135 := (= #32 #132)
#129 := (- #126)
#133 := (= #129 #132)
#134 := [rewrite]: #133
#130 := (= #32 #129)
#127 := (= #31 #126)
#72 := (= #23 #71)
#73 := [rewrite]: #72
#69 := (= #22 #68)
#70 := [rewrite]: #69
#128 := [monotonicity #70 #73]: #127
#131 := [monotonicity #128]: #130
#136 := [trans #131 #134]: #135
#65 := (iff #20 #64)
#62 := (iff #19 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#139 := [monotonicity #66 #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#168 := [trans #151 #166]: #167
#125 := [asserted]: #37
#169 := [mp #125 #168]: #164
#185 := [mp~ #169 #175]: #164
#226 := [mp #185 #225]: #223
#257 := [mp #226 #256]: #254
#742 := [mp #257 #741]: #737
#643 := (not #737)
#650 := (or #643 #42)
#315 := (* -1::int 3::int)
#400 := (* -1::int 5::int)
#401 := (mod #400 #315)
#402 := (+ #40 #401)
#393 := (= #402 0::int)
#404 := (mod 5::int 3::int)
#405 := (* -1::int #404)
#333 := (+ #40 #405)
#406 := (= #333 0::int)
#403 := (<= 3::int 0::int)
#407 := (<= 5::int 0::int)
#386 := (or #407 #403)
#721 := (not #386)
#723 := (>= 5::int 0::int)
#380 := (or #403 #723)
#510 := (not #380)
#717 := (or #510 #721)
#391 := (ite #717 #406 #393)
#392 := (= #40 0::int)
#724 := (= 5::int 0::int)
#725 := (ite #724 #392 #391)
#726 := (= 5::int #40)
#727 := (= 3::int 0::int)
#722 := (ite #727 #726 #725)
#634 := (or #643 #722)
#637 := (iff #634 #650)
#639 := (iff #650 #650)
#640 := [rewrite]: #639
#648 := (iff #722 #42)
#383 := (= #40 5::int)
#656 := (ite false #383 #42)
#646 := (iff #656 #42)
#647 := [rewrite]: #646
#652 := (iff #722 #656)
#654 := (iff #725 #42)
#651 := (ite false #392 #42)
#642 := (iff #651 #42)
#644 := [rewrite]: #642
#653 := (iff #725 #651)
#660 := (iff #391 #42)
#562 := (= #40 -1::int)
#1 := true
#567 := (ite true #42 #562)
#570 := (iff #567 #42)
#663 := [rewrite]: #570
#568 := (iff #391 #567)
#558 := (iff #393 #562)
#665 := 1::int
#554 := (+ 1::int #40)
#659 := (= #554 0::int)
#564 := (iff #659 #562)
#565 := [rewrite]: #564
#662 := (iff #393 #659)
#563 := (= #402 #554)
#670 := (+ #40 1::int)
#513 := (= #670 #554)
#661 := [rewrite]: #513
#552 := (= #402 #670)
#669 := (= #401 1::int)
#679 := -3::int
#671 := -5::int
#509 := (mod -5::int -3::int)
#666 := (= #509 1::int)
#668 := [rewrite]: #666
#511 := (= #401 #509)
#673 := (= #315 -3::int)
#680 := [rewrite]: #673
#672 := (= #400 -5::int)
#678 := [rewrite]: #672
#512 := [monotonicity #678 #680]: #511
#667 := [trans #512 #668]: #669
#553 := [monotonicity #667]: #552
#658 := [trans #553 #661]: #563
#547 := [monotonicity #658]: #662
#566 := [trans #547 #565]: #558
#676 := (iff #406 #42)
#690 := -2::int
#682 := (+ -2::int #40)
#530 := (= #682 0::int)
#674 := (iff #530 #42)
#675 := [rewrite]: #674
#531 := (iff #406 #530)
#683 := (= #333 #682)
#685 := (+ #40 -2::int)
#687 := (= #685 #682)
#688 := [rewrite]: #687
#686 := (= #333 #685)
#695 := (= #405 -2::int)
#692 := (* -1::int 2::int)
#694 := (= #692 -2::int)
#691 := [rewrite]: #694
#693 := (= #405 #692)
#413 := (= #404 2::int)
#414 := [rewrite]: #413
#408 := [monotonicity #414]: #693
#684 := [trans #408 #691]: #695
#681 := [monotonicity #684]: #686
#689 := [trans #681 #688]: #683
#532 := [monotonicity #689]: #531
#677 := [trans #532 #675]: #676
#411 := (iff #717 true)
#369 := (or false true)
#707 := (iff #369 true)
#708 := [rewrite]: #707
#697 := (iff #717 #369)
#696 := (iff #721 true)
#321 := (not false)
#421 := (iff #321 true)
#422 := [rewrite]: #421
#698 := (iff #721 #321)
#427 := (iff #386 false)
#716 := (or false false)
#425 := (iff #716 false)
#426 := [rewrite]: #425
#702 := (iff #386 #716)
#363 := (iff #403 false)
#704 := [rewrite]: #363
#715 := (iff #407 false)
#713 := [rewrite]: #715
#703 := [monotonicity #713 #704]: #702
#428 := [trans #703 #426]: #427
#699 := [monotonicity #428]: #698
#700 := [trans #699 #422]: #696
#354 := (iff #510 false)
#705 := (not true)
#712 := (iff #705 false)
#714 := [rewrite]: #712
#711 := (iff #510 #705)
#709 := (iff #380 true)
#370 := (iff #380 #369)
#367 := (iff #723 true)
#368 := [rewrite]: #367
#706 := [monotonicity #704 #368]: #370
#710 := [trans #706 #708]: #709
#349 := [monotonicity #710]: #711
#355 := [trans #349 #714]: #354
#701 := [monotonicity #355 #700]: #697
#412 := [trans #701 #708]: #411
#569 := [monotonicity #412 #677 #566]: #568
#664 := [trans #569 #663]: #660
#379 := (iff #724 false)
#720 := [rewrite]: #379
#645 := [monotonicity #720 #664]: #653
#655 := [trans #645 #644]: #654
#378 := (iff #726 #383)
#719 := [rewrite]: #378
#728 := (iff #727 false)
#718 := [rewrite]: #728
#657 := [monotonicity #718 #719 #655]: #652
#649 := [trans #657 #647]: #648
#638 := [monotonicity #649]: #637
#636 := [trans #638 #640]: #637
#635 := [quant-inst]: #634
#641 := [mp #635 #636]: #650
[unit-resolution #641 #742 #170]: false
unsat
a5e7ca3a1a908b3cfa96261b62a5e5f564ff08b5 321 0
#2 := false
#67 := -1::int
decl f3 :: (-> int int int)
#40 := 3::int
#173 := (f3 -1::int 3::int)
#176 := (= #173 -1::int)
#189 := (not #176)
#38 := 1::int
#39 := (- 1::int)
#41 := (f3 #39 3::int)
#42 := (= #41 #39)
#43 := (not #42)
#192 := (iff #43 #189)
#179 := (= -1::int #173)
#184 := (not #179)
#190 := (iff #184 #189)
#187 := (iff #179 #176)
#188 := [rewrite]: #187
#191 := [monotonicity #188]: #190
#185 := (iff #43 #184)
#182 := (iff #42 #179)
#180 := (iff #176 #179)
#181 := [rewrite]: #180
#177 := (iff #42 #176)
#171 := (= #39 -1::int)
#172 := [rewrite]: #171
#174 := (= #41 #173)
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175 #172]: #177
#183 := [trans #178 #181]: #182
#186 := [monotonicity #183]: #185
#193 := [trans #186 #191]: #192
#170 := [asserted]: #43
#194 := [mp #170 #193]: #189
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#752 := (pattern #10)
#11 := 0::int
#71 := (* -1::int #9)
#68 := (* -1::int #8)
#74 := (div #68 #71)
#255 := (* -1::int #74)
#256 := (+ #10 #255)
#257 := (= #256 0::int)
#21 := (div #8 #9)
#252 := (* -1::int #21)
#253 := (+ #10 #252)
#254 := (= #253 0::int)
#93 := (<= #9 0::int)
#89 := (<= #8 0::int)
#210 := (or #89 #93)
#211 := (not #210)
#100 := (>= #8 0::int)
#202 := (or #93 #100)
#203 := (not #202)
#217 := (or #203 #211)
#258 := (ite #217 #254 #257)
#251 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#259 := (ite #14 #251 #258)
#753 := (forall (vars (?v0 int) (?v1 int)) (:pat #752) #259)
#262 := (forall (vars (?v0 int) (?v1 int)) #259)
#756 := (iff #262 #753)
#754 := (iff #259 #259)
#755 := [refl]: #754
#757 := [quant-intro #755]: #756
#222 := (ite #217 #21 #74)
#225 := (ite #14 0::int #222)
#228 := (= #10 #225)
#231 := (forall (vars (?v0 int) (?v1 int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#101 := (not #100)
#94 := (not #93)
#104 := (and #94 #101)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#110 := (ite #107 #21 #74)
#113 := (ite #14 0::int #110)
#116 := (= #10 #113)
#119 := (forall (vars (?v0 int) (?v1 int)) #116)
#232 := (iff #119 #231)
#229 := (iff #116 #228)
#226 := (= #113 #225)
#223 := (= #110 #222)
#220 := (iff #107 #217)
#214 := (or #211 #203)
#218 := (iff #214 #217)
#219 := [rewrite]: #218
#215 := (iff #107 #214)
#212 := (iff #104 #203)
#213 := [rewrite]: #212
#200 := (iff #97 #211)
#201 := [rewrite]: #200
#216 := [monotonicity #201 #213]: #215
#221 := [trans #216 #219]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#206 := (~ #119 #119)
#204 := (~ #116 #116)
#205 := [refl]: #204
#207 := [nnf-pos #205]: #206
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#122 := (iff #28 #119)
#61 := (and #16 #18)
#64 := (or #17 #61)
#77 := (ite #64 #21 #74)
#80 := (ite #14 0::int #77)
#83 := (= #10 #80)
#86 := (forall (vars (?v0 int) (?v1 int)) #83)
#120 := (iff #86 #119)
#117 := (iff #83 #116)
#114 := (= #80 #113)
#111 := (= #77 #110)
#108 := (iff #64 #107)
#105 := (iff #61 #104)
#102 := (iff #18 #101)
#103 := [rewrite]: #102
#95 := (iff #16 #94)
#96 := [rewrite]: #95
#106 := [monotonicity #96 #103]: #105
#98 := (iff #17 #97)
#91 := (iff #15 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [monotonicity #115]: #117
#121 := [quant-intro #118]: #120
#87 := (iff #28 #86)
#84 := (iff #27 #83)
#81 := (= #26 #80)
#78 := (= #25 #77)
#75 := (= #24 #74)
#72 := (= #23 #71)
#73 := [rewrite]: #72
#69 := (= #22 #68)
#70 := [rewrite]: #69
#76 := [monotonicity #70 #73]: #75
#65 := (iff #20 #64)
#62 := (iff #19 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#79 := [monotonicity #66 #76]: #78
#82 := [monotonicity #79]: #81
#85 := [monotonicity #82]: #84
#88 := [quant-intro #85]: #87
#123 := [trans #88 #121]: #122
#60 := [asserted]: #28
#124 := [mp #60 #123]: #119
#197 := [mp~ #124 #207]: #119
#234 := [mp #197 #233]: #231
#265 := [mp #234 #264]: #262
#758 := [mp #265 #757]: #753
#665 := (not #753)
#667 := (or #665 #176)
#339 := (* -1::int 3::int)
#423 := (* -1::int -1::int)
#424 := (div #423 #339)
#425 := (* -1::int #424)
#416 := (+ #173 #425)
#427 := (= #416 0::int)
#428 := (div -1::int 3::int)
#429 := (* -1::int #428)
#426 := (+ #173 #429)
#430 := (= #426 0::int)
#409 := (<= 3::int 0::int)
#744 := (<= -1::int 0::int)
#746 := (or #744 #409)
#403 := (not #746)
#533 := (>= -1::int 0::int)
#740 := (or #409 #533)
#414 := (not #740)
#415 := (or #414 #403)
#747 := (ite #415 #430 #427)
#748 := (= #173 0::int)
#749 := (= 3::int 0::int)
#750 := (= -1::int 0::int)
#745 := (or #750 #749)
#751 := (ite #745 #748 #747)
#677 := (or #665 #751)
#679 := (iff #677 #667)
#680 := (iff #667 #667)
#669 := [rewrite]: #680
#676 := (iff #751 #176)
#593 := (ite false #748 #176)
#687 := (iff #593 #176)
#674 := [rewrite]: #687
#686 := (iff #751 #593)
#591 := (iff #747 #176)
#1 := true
#587 := (ite true #176 #748)
#589 := (iff #587 #176)
#590 := [rewrite]: #589
#588 := (iff #747 #587)
#570 := (iff #427 #748)
#682 := (= #416 #173)
#577 := (+ #173 0::int)
#586 := (= #577 #173)
#681 := [rewrite]: #586
#536 := (= #416 #577)
#575 := (= #425 0::int)
#689 := (* -1::int 0::int)
#690 := (= #689 0::int)
#693 := [rewrite]: #690
#691 := (= #425 #689)
#535 := (= #424 0::int)
#694 := -3::int
#702 := (div 1::int -3::int)
#532 := (= #702 0::int)
#534 := [rewrite]: #532
#696 := (= #424 #702)
#695 := (= #339 -3::int)
#701 := [rewrite]: #695
#717 := (= #423 1::int)
#714 := [rewrite]: #717
#703 := [monotonicity #714 #701]: #696
#688 := [trans #703 #534]: #535
#692 := [monotonicity #688]: #691
#576 := [trans #692 #693]: #575
#684 := [monotonicity #576]: #536
#685 := [trans #684 #681]: #682
#585 := [monotonicity #685]: #570
#699 := (iff #430 #176)
#705 := (+ 1::int #173)
#553 := (= #705 0::int)
#697 := (iff #553 #176)
#698 := [rewrite]: #697
#554 := (iff #430 #553)
#706 := (= #426 #705)
#708 := (+ #173 1::int)
#710 := (= #708 #705)
#711 := [rewrite]: #710
#709 := (= #426 #708)
#718 := (= #429 1::int)
#431 := (= #429 #423)
#715 := (= #428 -1::int)
#716 := [rewrite]: #715
#713 := [monotonicity #716]: #431
#707 := [trans #713 #714]: #718
#704 := [monotonicity #707]: #709
#712 := [trans #704 #711]: #706
#555 := [monotonicity #712]: #554
#700 := [trans #555 #698]: #699
#436 := (iff #415 true)
#726 := (or true false)
#450 := (iff #726 true)
#451 := [rewrite]: #450
#434 := (iff #415 #726)
#720 := (iff #403 false)
#722 := (not true)
#719 := (iff #722 false)
#723 := [rewrite]: #719
#444 := (iff #403 #722)
#345 := (iff #746 true)
#448 := (iff #746 #726)
#393 := (iff #409 false)
#729 := [rewrite]: #393
#739 := (iff #744 true)
#725 := [rewrite]: #739
#449 := [monotonicity #725 #729]: #448
#721 := [trans #449 #451]: #345
#445 := [monotonicity #721]: #444
#724 := [trans #445 #723]: #720
#738 := (iff #414 true)
#372 := (not false)
#377 := (iff #372 true)
#378 := [rewrite]: #377
#735 := (iff #414 #372)
#728 := (iff #740 false)
#402 := (or false false)
#727 := (iff #402 false)
#390 := [rewrite]: #727
#732 := (iff #740 #402)
#730 := (iff #533 false)
#731 := [rewrite]: #730
#733 := [monotonicity #729 #731]: #732
#734 := [trans #733 #390]: #728
#737 := [monotonicity #734]: #735
#736 := [trans #737 #378]: #738
#435 := [monotonicity #736 #724]: #434
#437 := [trans #435 #451]: #436
#581 := [monotonicity #437 #700 #585]: #588
#592 := [trans #581 #590]: #591
#391 := (iff #745 false)
#743 := (iff #745 #402)
#406 := (iff #749 false)
#742 := [rewrite]: #406
#741 := (iff #750 false)
#401 := [rewrite]: #741
#386 := [monotonicity #401 #742]: #743
#392 := [trans #386 #390]: #391
#683 := [monotonicity #392 #592]: #686
#668 := [trans #683 #674]: #676
#675 := [monotonicity #668]: #679
#670 := [trans #675 #669]: #679
#678 := [quant-inst]: #677
#671 := [mp #678 #670]: #667
[unit-resolution #671 #758 #194]: false
unsat
4a26f9179dc065943e8b39f87c50b753014abca8 323 0
#2 := false
#68 := -1::int
decl f3 :: (-> int int int)
#38 := 3::int
#172 := -3::int
#175 := (f3 -3::int 3::int)
#180 := (= #175 -1::int)
#193 := (not #180)
#41 := 1::int
#42 := (- 1::int)
#39 := (- 3::int)
#40 := (f3 #39 3::int)
#43 := (= #40 #42)
#44 := (not #43)
#196 := (iff #44 #193)
#183 := (= -1::int #175)
#188 := (not #183)
#194 := (iff #188 #193)
#191 := (iff #183 #180)
#192 := [rewrite]: #191
#195 := [monotonicity #192]: #194
#189 := (iff #44 #188)
#186 := (iff #43 #183)
#184 := (iff #180 #183)
#185 := [rewrite]: #184
#181 := (iff #43 #180)
#178 := (= #42 -1::int)
#179 := [rewrite]: #178
#176 := (= #40 #175)
#173 := (= #39 -3::int)
#174 := [rewrite]: #173
#177 := [monotonicity #174]: #176
#182 := [monotonicity #177 #179]: #181
#187 := [trans #182 #185]: #186
#190 := [monotonicity #187]: #189
#197 := [trans #190 #195]: #196
#171 := [asserted]: #44
#198 := [mp #171 #197]: #193
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#756 := (pattern #10)
#11 := 0::int
#72 := (* -1::int #9)
#69 := (* -1::int #8)
#75 := (div #69 #72)
#259 := (* -1::int #75)
#260 := (+ #10 #259)
#261 := (= #260 0::int)
#21 := (div #8 #9)
#256 := (* -1::int #21)
#257 := (+ #10 #256)
#258 := (= #257 0::int)
#94 := (<= #9 0::int)
#90 := (<= #8 0::int)
#214 := (or #90 #94)
#215 := (not #214)
#101 := (>= #8 0::int)
#206 := (or #94 #101)
#207 := (not #206)
#221 := (or #207 #215)
#262 := (ite #221 #258 #261)
#255 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#263 := (ite #14 #255 #262)
#757 := (forall (vars (?v0 int) (?v1 int)) (:pat #756) #263)
#266 := (forall (vars (?v0 int) (?v1 int)) #263)
#760 := (iff #266 #757)
#758 := (iff #263 #263)
#759 := [refl]: #758
#761 := [quant-intro #759]: #760
#226 := (ite #221 #21 #75)
#229 := (ite #14 0::int #226)
#232 := (= #10 #229)
#235 := (forall (vars (?v0 int) (?v1 int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#102 := (not #101)
#95 := (not #94)
#105 := (and #95 #102)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#111 := (ite #108 #21 #75)
#114 := (ite #14 0::int #111)
#117 := (= #10 #114)
#120 := (forall (vars (?v0 int) (?v1 int)) #117)
#236 := (iff #120 #235)
#233 := (iff #117 #232)
#230 := (= #114 #229)
#227 := (= #111 #226)
#224 := (iff #108 #221)
#218 := (or #215 #207)
#222 := (iff #218 #221)
#223 := [rewrite]: #222
#219 := (iff #108 #218)
#216 := (iff #105 #207)
#217 := [rewrite]: #216
#204 := (iff #98 #215)
#205 := [rewrite]: #204
#220 := [monotonicity #205 #217]: #219
#225 := [trans #220 #223]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#210 := (~ #120 #120)
#208 := (~ #117 #117)
#209 := [refl]: #208
#211 := [nnf-pos #209]: #210
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#123 := (iff #28 #120)
#62 := (and #16 #18)
#65 := (or #17 #62)
#78 := (ite #65 #21 #75)
#81 := (ite #14 0::int #78)
#84 := (= #10 #81)
#87 := (forall (vars (?v0 int) (?v1 int)) #84)
#121 := (iff #87 #120)
#118 := (iff #84 #117)
#115 := (= #81 #114)
#112 := (= #78 #111)
#109 := (iff #65 #108)
#106 := (iff #62 #105)
#103 := (iff #18 #102)
#104 := [rewrite]: #103
#96 := (iff #16 #95)
#97 := [rewrite]: #96
#107 := [monotonicity #97 #104]: #106
#99 := (iff #17 #98)
#92 := (iff #15 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#88 := (iff #28 #87)
#85 := (iff #27 #84)
#82 := (= #26 #81)
#79 := (= #25 #78)
#76 := (= #24 #75)
#73 := (= #23 #72)
#74 := [rewrite]: #73
#70 := (= #22 #69)
#71 := [rewrite]: #70
#77 := [monotonicity #71 #74]: #76
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#80 := [monotonicity #67 #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#124 := [trans #89 #122]: #123
#61 := [asserted]: #28
#125 := [mp #61 #124]: #120
#201 := [mp~ #125 #211]: #120
#238 := [mp #201 #237]: #235
#269 := [mp #238 #268]: #266
#762 := [mp #269 #761]: #757
#680 := (not #757)
#672 := (or #680 #180)
#343 := (* -1::int 3::int)
#427 := (* -1::int -3::int)
#428 := (div #427 #343)
#429 := (* -1::int #428)
#420 := (+ #175 #429)
#431 := (= #420 0::int)
#432 := (div -3::int 3::int)
#433 := (* -1::int #432)
#430 := (+ #175 #433)
#434 := (= #430 0::int)
#413 := (<= 3::int 0::int)
#748 := (<= -3::int 0::int)
#750 := (or #748 #413)
#407 := (not #750)
#537 := (>= -3::int 0::int)
#744 := (or #413 #537)
#418 := (not #744)
#419 := (or #418 #407)
#751 := (ite #419 #434 #431)
#752 := (= #175 0::int)
#753 := (= 3::int 0::int)
#754 := (= -3::int 0::int)
#749 := (or #754 #753)
#755 := (ite #749 #752 #751)
#669 := (or #680 #755)
#681 := (iff #669 #672)
#683 := (iff #672 #672)
#679 := [rewrite]: #683
#691 := (iff #755 #180)
#595 := (ite false #752 #180)
#690 := (iff #595 #180)
#687 := [rewrite]: #690
#596 := (iff #755 #595)
#593 := (iff #751 #180)
#1 := true
#574 := (ite true #180 #180)
#592 := (iff #574 #180)
#585 := [rewrite]: #592
#589 := (iff #751 #574)
#686 := (iff #431 #180)
#714 := (+ 1::int #175)
#558 := (= #714 0::int)
#702 := (iff #558 #180)
#703 := [rewrite]: #702
#590 := (iff #431 #558)
#540 := (= #420 #714)
#713 := (+ #175 1::int)
#715 := (= #713 #714)
#710 := [rewrite]: #715
#580 := (= #420 #713)
#697 := (= #429 1::int)
#435 := (* -1::int -1::int)
#718 := (= #435 1::int)
#722 := [rewrite]: #718
#696 := (= #429 #435)
#693 := (= #428 -1::int)
#707 := (div 3::int -3::int)
#539 := (= #707 -1::int)
#692 := [rewrite]: #539
#536 := (= #428 #707)
#706 := (= #343 -3::int)
#700 := [rewrite]: #706
#699 := (= #427 3::int)
#705 := [rewrite]: #699
#538 := [monotonicity #705 #700]: #536
#695 := [trans #538 #692]: #693
#694 := [monotonicity #695]: #696
#579 := [trans #694 #722]: #697
#581 := [monotonicity #579]: #580
#688 := [trans #581 #710]: #540
#685 := [monotonicity #688]: #590
#689 := [trans #685 #703]: #686
#704 := (iff #434 #180)
#559 := (iff #434 #558)
#716 := (= #430 #714)
#708 := (= #430 #713)
#711 := (= #433 1::int)
#717 := (= #433 #435)
#719 := (= #432 -1::int)
#720 := [rewrite]: #719
#721 := [monotonicity #720]: #717
#712 := [trans #721 #722]: #711
#709 := [monotonicity #712]: #708
#557 := [trans #709 #710]: #716
#701 := [monotonicity #557]: #559
#698 := [trans #701 #703]: #704
#440 := (iff #419 true)
#730 := (or true false)
#454 := (iff #730 true)
#455 := [rewrite]: #454
#438 := (iff #419 #730)
#724 := (iff #407 false)
#726 := (not true)
#723 := (iff #726 false)
#727 := [rewrite]: #723
#448 := (iff #407 #726)
#349 := (iff #750 true)
#452 := (iff #750 #730)
#397 := (iff #413 false)
#733 := [rewrite]: #397
#743 := (iff #748 true)
#729 := [rewrite]: #743
#453 := [monotonicity #729 #733]: #452
#725 := [trans #453 #455]: #349
#449 := [monotonicity #725]: #448
#728 := [trans #449 #727]: #724
#742 := (iff #418 true)
#376 := (not false)
#381 := (iff #376 true)
#382 := [rewrite]: #381
#739 := (iff #418 #376)
#732 := (iff #744 false)
#406 := (or false false)
#731 := (iff #406 false)
#394 := [rewrite]: #731
#736 := (iff #744 #406)
#734 := (iff #537 false)
#735 := [rewrite]: #734
#737 := [monotonicity #733 #735]: #736
#738 := [trans #737 #394]: #732
#741 := [monotonicity #738]: #739
#740 := [trans #741 #382]: #742
#439 := [monotonicity #740 #728]: #438
#441 := [trans #439 #455]: #440
#591 := [monotonicity #441 #698 #689]: #589
#594 := [trans #591 #585]: #593
#395 := (iff #749 false)
#747 := (iff #749 #406)
#410 := (iff #753 false)
#746 := [rewrite]: #410
#745 := (iff #754 false)
#405 := [rewrite]: #745
#390 := [monotonicity #405 #746]: #747
#396 := [trans #390 #394]: #395
#597 := [monotonicity #396 #594]: #596
#678 := [trans #597 #687]: #691
#682 := [monotonicity #678]: #681
#684 := [trans #682 #679]: #681
#671 := [quant-inst]: #669
#673 := [mp #671 #684]: #672
[unit-resolution #673 #762 #198]: false
unsat
f77523eb025c744a899f70384fe23771c2e2df49 335 0
#2 := false
#179 := -2::int
decl f4 :: (-> int int int)
#173 := -3::int
#38 := 1::int
#176 := (f4 1::int -3::int)
#182 := (= #176 -2::int)
#185 := (not #182)
#42 := 2::int
#43 := (- 2::int)
#39 := 3::int
#40 := (- 3::int)
#41 := (f4 1::int #40)
#44 := (= #41 #43)
#45 := (not #44)
#186 := (iff #45 #185)
#183 := (iff #44 #182)
#180 := (= #43 -2::int)
#181 := [rewrite]: #180
#177 := (= #41 #176)
#174 := (= #40 -3::int)
#175 := [rewrite]: #174
#178 := [monotonicity #175]: #177
#184 := [monotonicity #178 #181]: #183
#187 := [monotonicity #184]: #186
#172 := [asserted]: #45
#190 := [mp #172 #187]: #185
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#753 := (pattern #29)
#11 := 0::int
#69 := -1::int
#73 := (* -1::int #9)
#70 := (* -1::int #8)
#128 := (mod #70 #73)
#265 := (+ #29 #128)
#266 := (= #265 0::int)
#30 := (mod #8 #9)
#262 := (* -1::int #30)
#263 := (+ #29 #262)
#264 := (= #263 0::int)
#95 := (<= #9 0::int)
#91 := (<= #8 0::int)
#204 := (or #91 #95)
#205 := (not #204)
#102 := (>= #8 0::int)
#196 := (or #95 #102)
#197 := (not #196)
#211 := (or #197 #205)
#267 := (ite #211 #264 #266)
#261 := (= #29 0::int)
#12 := (= #8 0::int)
#268 := (ite #12 #261 #267)
#260 := (= #8 #29)
#13 := (= #9 0::int)
#269 := (ite #13 #260 #268)
#754 := (forall (vars (?v0 int) (?v1 int)) (:pat #753) #269)
#272 := (forall (vars (?v0 int) (?v1 int)) #269)
#757 := (iff #272 #754)
#755 := (iff #269 #269)
#756 := [refl]: #755
#758 := [quant-intro #756]: #757
#134 := (* -1::int #128)
#229 := (ite #211 #30 #134)
#232 := (ite #12 0::int #229)
#235 := (ite #13 #8 #232)
#238 := (= #29 #235)
#241 := (forall (vars (?v0 int) (?v1 int)) #238)
#273 := (iff #241 #272)
#270 := (iff #238 #269)
#271 := [rewrite]: #270
#274 := [quant-intro #271]: #273
#103 := (not #102)
#96 := (not #95)
#106 := (and #96 #103)
#92 := (not #91)
#99 := (and #92 #96)
#109 := (or #99 #106)
#154 := (ite #109 #30 #134)
#157 := (ite #12 0::int #154)
#160 := (ite #13 #8 #157)
#163 := (= #29 #160)
#166 := (forall (vars (?v0 int) (?v1 int)) #163)
#242 := (iff #166 #241)
#239 := (iff #163 #238)
#236 := (= #160 #235)
#233 := (= #157 #232)
#230 := (= #154 #229)
#214 := (iff #109 #211)
#208 := (or #205 #197)
#212 := (iff #208 #211)
#213 := [rewrite]: #212
#209 := (iff #109 #208)
#206 := (iff #106 #197)
#207 := [rewrite]: #206
#194 := (iff #99 #205)
#195 := [rewrite]: #194
#210 := [monotonicity #195 #207]: #209
#215 := [trans #210 #213]: #214
#231 := [monotonicity #215]: #230
#234 := [monotonicity #231]: #233
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [quant-intro #240]: #242
#192 := (~ #166 #166)
#188 := (~ #163 #163)
#202 := [refl]: #188
#193 := [nnf-pos #202]: #192
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#169 := (iff #37 #166)
#63 := (and #16 #18)
#66 := (or #17 #63)
#139 := (ite #66 #30 #134)
#142 := (ite #12 0::int #139)
#145 := (ite #13 #8 #142)
#148 := (= #29 #145)
#151 := (forall (vars (?v0 int) (?v1 int)) #148)
#167 := (iff #151 #166)
#164 := (iff #148 #163)
#161 := (= #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#110 := (iff #66 #109)
#107 := (iff #63 #106)
#104 := (iff #18 #103)
#105 := [rewrite]: #104
#97 := (iff #16 #96)
#98 := [rewrite]: #97
#108 := [monotonicity #98 #105]: #107
#100 := (iff #17 #99)
#93 := (iff #15 #92)
#94 := [rewrite]: #93
#101 := [monotonicity #94 #98]: #100
#111 := [monotonicity #101 #108]: #110
#156 := [monotonicity #111]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#152 := (iff #37 #151)
#149 := (iff #36 #148)
#146 := (= #35 #145)
#143 := (= #34 #142)
#140 := (= #33 #139)
#137 := (= #32 #134)
#131 := (- #128)
#135 := (= #131 #134)
#136 := [rewrite]: #135
#132 := (= #32 #131)
#129 := (= #31 #128)
#74 := (= #23 #73)
#75 := [rewrite]: #74
#71 := (= #22 #70)
#72 := [rewrite]: #71
#130 := [monotonicity #72 #75]: #129
#133 := [monotonicity #130]: #132
#138 := [trans #133 #136]: #137
#67 := (iff #20 #66)
#64 := (iff #19 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#141 := [monotonicity #68 #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#170 := [trans #153 #168]: #169
#127 := [asserted]: #37
#171 := [mp #127 #170]: #166
#203 := [mp~ #171 #193]: #166
#244 := [mp #203 #243]: #241
#275 := [mp #244 #274]: #272
#759 := [mp #275 #758]: #754
#661 := (not #754)
#671 := (or #661 #182)
#333 := (* -1::int -3::int)
#417 := (* -1::int 1::int)
#418 := (mod #417 #333)
#419 := (+ #176 #418)
#410 := (= #419 0::int)
#421 := (mod 1::int -3::int)
#422 := (* -1::int #421)
#423 := (+ #176 #422)
#420 := (= #423 0::int)
#424 := (<= -3::int 0::int)
#403 := (<= 1::int 0::int)
#738 := (or #403 #424)
#740 := (not #738)
#397 := (>= 1::int 0::int)
#527 := (or #424 #397)
#734 := (not #527)
#408 := (or #734 #740)
#409 := (ite #408 #420 #410)
#741 := (= #176 0::int)
#742 := (= 1::int 0::int)
#743 := (ite #742 #741 #409)
#744 := (= 1::int #176)
#739 := (= -3::int 0::int)
#745 := (ite #739 #744 #743)
#672 := (or #661 #745)
#669 := (iff #672 #671)
#663 := (iff #671 #671)
#664 := [rewrite]: #663
#662 := (iff #745 #182)
#736 := (= #176 1::int)
#679 := (ite false #736 #182)
#581 := (iff #679 #182)
#582 := [rewrite]: #581
#668 := (iff #745 #679)
#677 := (iff #743 #182)
#584 := (ite false #741 #182)
#587 := (iff #584 #182)
#680 := [rewrite]: #587
#585 := (iff #743 #584)
#575 := (iff #409 #182)
#564 := (iff #409 #679)
#675 := (iff #410 #182)
#685 := (+ 2::int #176)
#570 := (= #685 0::int)
#678 := (iff #570 #182)
#580 := [rewrite]: #678
#571 := (iff #410 #570)
#687 := (= #419 #685)
#529 := (+ #176 2::int)
#686 := (= #529 #685)
#684 := [rewrite]: #686
#682 := (= #419 #529)
#526 := (= #418 2::int)
#689 := (mod -1::int 3::int)
#690 := (= #689 2::int)
#697 := [rewrite]: #690
#695 := (= #418 #689)
#694 := (= #333 3::int)
#688 := [rewrite]: #694
#707 := (= #417 -1::int)
#711 := [rewrite]: #707
#696 := [monotonicity #711 #688]: #695
#528 := [trans #696 #697]: #526
#683 := [monotonicity #528]: #682
#569 := [trans #683 #684]: #687
#530 := [monotonicity #569]: #571
#676 := [trans #530 #580]: #675
#692 := (iff #420 #736)
#698 := (+ -1::int #176)
#706 := (= #698 0::int)
#549 := (iff #706 #736)
#691 := [rewrite]: #549
#547 := (iff #420 #706)
#705 := (= #423 #698)
#701 := (+ #176 -1::int)
#699 := (= #701 #698)
#704 := [rewrite]: #699
#702 := (= #423 #701)
#708 := (= #422 -1::int)
#710 := (= #422 #417)
#431 := (= #421 1::int)
#709 := [rewrite]: #431
#425 := [monotonicity #709]: #710
#712 := [trans #425 #711]: #708
#703 := [monotonicity #712]: #702
#700 := [trans #703 #704]: #705
#548 := [monotonicity #700]: #547
#693 := [trans #548 #691]: #692
#429 := (iff #408 false)
#713 := (or false false)
#718 := (iff #713 false)
#428 := [rewrite]: #718
#717 := (iff #408 #713)
#438 := (iff #740 false)
#1 := true
#728 := (not true)
#731 := (iff #728 false)
#371 := [rewrite]: #731
#715 := (iff #740 #728)
#445 := (iff #738 true)
#719 := (or false true)
#443 := (iff #719 true)
#444 := [rewrite]: #443
#720 := (iff #738 #719)
#721 := (iff #424 true)
#384 := [rewrite]: #721
#730 := (iff #403 false)
#733 := [rewrite]: #730
#442 := [monotonicity #733 #384]: #720
#339 := [trans #442 #444]: #445
#716 := [monotonicity #339]: #715
#439 := [trans #716 #371]: #438
#372 := (iff #734 false)
#366 := (iff #734 #728)
#727 := (iff #527 true)
#387 := (or true true)
#725 := (iff #387 true)
#726 := [rewrite]: #725
#723 := (iff #527 #387)
#385 := (iff #397 true)
#386 := [rewrite]: #385
#724 := [monotonicity #384 #386]: #723
#722 := [trans #724 #726]: #727
#729 := [monotonicity #722]: #366
#732 := [trans #729 #371]: #372
#714 := [monotonicity #732 #439]: #717
#430 := [trans #714 #428]: #429
#579 := [monotonicity #430 #693 #676]: #564
#583 := [trans #579 #582]: #575
#737 := (iff #742 false)
#380 := [rewrite]: #737
#586 := [monotonicity #380 #583]: #585
#681 := [trans #586 #680]: #677
#400 := (iff #744 #736)
#396 := [rewrite]: #400
#735 := (iff #739 false)
#395 := [rewrite]: #735
#670 := [monotonicity #395 #396 #681]: #668
#659 := [trans #670 #582]: #662
#674 := [monotonicity #659]: #669
#665 := [trans #674 #664]: #669
#673 := [quant-inst]: #672
#666 := [mp #673 #665]: #671
[unit-resolution #666 #759 #190]: false
unsat
aa5c848d75f817ce17fcfbcc43fdae3201eb9151 326 0
#2 := false
#179 := -2::int
decl f3 :: (-> int int int)
#40 := 3::int
#173 := -5::int
#176 := (f3 -5::int 3::int)
#182 := (= #176 -2::int)
#185 := (not #182)
#42 := 2::int
#43 := (- 2::int)
#38 := 5::int
#39 := (- 5::int)
#41 := (f3 #39 3::int)
#44 := (= #41 #43)
#45 := (not #44)
#186 := (iff #45 #185)
#183 := (iff #44 #182)
#180 := (= #43 -2::int)
#181 := [rewrite]: #180
#177 := (= #41 #176)
#174 := (= #39 -5::int)
#175 := [rewrite]: #174
#178 := [monotonicity #175]: #177
#184 := [monotonicity #178 #181]: #183
#187 := [monotonicity #184]: #186
#172 := [asserted]: #45
#190 := [mp #172 #187]: #185
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#747 := (pattern #10)
#11 := 0::int
#69 := -1::int
#73 := (* -1::int #9)
#70 := (* -1::int #8)
#76 := (div #70 #73)
#249 := (* -1::int #76)
#250 := (+ #10 #249)
#251 := (= #250 0::int)
#21 := (div #8 #9)
#246 := (* -1::int #21)
#247 := (+ #10 #246)
#248 := (= #247 0::int)
#95 := (<= #9 0::int)
#91 := (<= #8 0::int)
#204 := (or #91 #95)
#205 := (not #204)
#102 := (>= #8 0::int)
#196 := (or #95 #102)
#197 := (not #196)
#211 := (or #197 #205)
#252 := (ite #211 #248 #251)
#245 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#253 := (ite #14 #245 #252)
#748 := (forall (vars (?v0 int) (?v1 int)) (:pat #747) #253)
#256 := (forall (vars (?v0 int) (?v1 int)) #253)
#751 := (iff #256 #748)
#749 := (iff #253 #253)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#216 := (ite #211 #21 #76)
#219 := (ite #14 0::int #216)
#222 := (= #10 #219)
#225 := (forall (vars (?v0 int) (?v1 int)) #222)
#257 := (iff #225 #256)
#254 := (iff #222 #253)
#255 := [rewrite]: #254
#258 := [quant-intro #255]: #257
#103 := (not #102)
#96 := (not #95)
#106 := (and #96 #103)
#92 := (not #91)
#99 := (and #92 #96)
#109 := (or #99 #106)
#112 := (ite #109 #21 #76)
#115 := (ite #14 0::int #112)
#118 := (= #10 #115)
#121 := (forall (vars (?v0 int) (?v1 int)) #118)
#226 := (iff #121 #225)
#223 := (iff #118 #222)
#220 := (= #115 #219)
#217 := (= #112 #216)
#214 := (iff #109 #211)
#208 := (or #205 #197)
#212 := (iff #208 #211)
#213 := [rewrite]: #212
#209 := (iff #109 #208)
#206 := (iff #106 #197)
#207 := [rewrite]: #206
#194 := (iff #99 #205)
#195 := [rewrite]: #194
#210 := [monotonicity #195 #207]: #209
#215 := [trans #210 #213]: #214
#218 := [monotonicity #215]: #217
#221 := [monotonicity #218]: #220
#224 := [monotonicity #221]: #223
#227 := [quant-intro #224]: #226
#200 := (~ #121 #121)
#198 := (~ #118 #118)
#199 := [refl]: #198
#201 := [nnf-pos #199]: #200
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#124 := (iff #28 #121)
#63 := (and #16 #18)
#66 := (or #17 #63)
#79 := (ite #66 #21 #76)
#82 := (ite #14 0::int #79)
#85 := (= #10 #82)
#88 := (forall (vars (?v0 int) (?v1 int)) #85)
#122 := (iff #88 #121)
#119 := (iff #85 #118)
#116 := (= #82 #115)
#113 := (= #79 #112)
#110 := (iff #66 #109)
#107 := (iff #63 #106)
#104 := (iff #18 #103)
#105 := [rewrite]: #104
#97 := (iff #16 #96)
#98 := [rewrite]: #97
#108 := [monotonicity #98 #105]: #107
#100 := (iff #17 #99)
#93 := (iff #15 #92)
#94 := [rewrite]: #93
#101 := [monotonicity #94 #98]: #100
#111 := [monotonicity #101 #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [monotonicity #117]: #119
#123 := [quant-intro #120]: #122
#89 := (iff #28 #88)
#86 := (iff #27 #85)
#83 := (= #26 #82)
#80 := (= #25 #79)
#77 := (= #24 #76)
#74 := (= #23 #73)
#75 := [rewrite]: #74
#71 := (= #22 #70)
#72 := [rewrite]: #71
#78 := [monotonicity #72 #75]: #77
#67 := (iff #20 #66)
#64 := (iff #19 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#81 := [monotonicity #68 #78]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#90 := [quant-intro #87]: #89
#125 := [trans #90 #123]: #124
#62 := [asserted]: #28
#126 := [mp #62 #125]: #121
#191 := [mp~ #126 #201]: #121
#228 := [mp #191 #227]: #225
#259 := [mp #228 #258]: #256
#753 := [mp #259 #752]: #748
#667 := (not #748)
#661 := (or #667 #182)
#333 := (* -1::int 3::int)
#418 := (* -1::int -5::int)
#419 := (div #418 #333)
#420 := (* -1::int #419)
#411 := (+ #176 #420)
#422 := (= #411 0::int)
#423 := (div -5::int 3::int)
#351 := (* -1::int #423)
#424 := (+ #176 #351)
#421 := (= #424 0::int)
#425 := (<= 3::int 0::int)
#404 := (<= -5::int 0::int)
#739 := (or #404 #425)
#741 := (not #739)
#398 := (>= -5::int 0::int)
#528 := (or #425 #398)
#735 := (not #528)
#409 := (or #735 #741)
#410 := (ite #409 #421 #422)
#742 := (= #176 0::int)
#743 := (= 3::int 0::int)
#744 := (= -5::int 0::int)
#745 := (or #744 #743)
#740 := (ite #745 #742 #410)
#668 := (or #667 #740)
#653 := (iff #668 #661)
#656 := (iff #661 #661)
#657 := [rewrite]: #656
#665 := (iff #740 #182)
#673 := (ite false #742 #182)
#675 := (iff #673 #182)
#664 := [rewrite]: #675
#674 := (iff #740 #673)
#662 := (iff #410 #182)
#586 := (= #176 -1::int)
#1 := true
#682 := (ite true #182 #586)
#663 := (iff #682 #182)
#660 := [rewrite]: #663
#669 := (iff #410 #682)
#681 := (iff #422 #586)
#570 := 1::int
#680 := (+ 1::int #176)
#576 := (= #680 0::int)
#587 := (iff #576 #586)
#588 := [rewrite]: #587
#584 := (iff #422 #576)
#582 := (= #411 #680)
#581 := (+ #176 1::int)
#565 := (= #581 #680)
#580 := [rewrite]: #565
#676 := (= #411 #581)
#531 := (= #420 1::int)
#687 := (* -1::int -1::int)
#571 := (= #687 1::int)
#572 := [rewrite]: #571
#685 := (= #420 #687)
#684 := (= #419 -1::int)
#696 := -3::int
#698 := (div 5::int -3::int)
#530 := (= #698 -1::int)
#683 := [rewrite]: #530
#527 := (= #419 #698)
#697 := (= #333 -3::int)
#691 := [rewrite]: #697
#689 := (= #418 5::int)
#690 := [rewrite]: #689
#529 := [monotonicity #690 #691]: #527
#686 := [trans #529 #683]: #684
#688 := [monotonicity #686]: #685
#679 := [trans #688 #572]: #531
#677 := [monotonicity #679]: #676
#583 := [trans #677 #580]: #582
#585 := [monotonicity #583]: #584
#678 := [trans #585 #588]: #681
#694 := (iff #421 #182)
#700 := (+ 2::int #176)
#548 := (= #700 0::int)
#692 := (iff #548 #182)
#693 := [rewrite]: #692
#549 := (iff #421 #548)
#701 := (= #424 #700)
#703 := (+ #176 2::int)
#705 := (= #703 #700)
#706 := [rewrite]: #705
#704 := (= #424 #703)
#713 := (= #351 2::int)
#711 := (* -1::int -2::int)
#712 := (= #711 2::int)
#709 := [rewrite]: #712
#426 := (= #351 #711)
#432 := (= #423 -2::int)
#710 := [rewrite]: #432
#708 := [monotonicity #710]: #426
#702 := [trans #708 #709]: #713
#699 := [monotonicity #702]: #704
#707 := [trans #699 #706]: #701
#550 := [monotonicity #707]: #549
#695 := [trans #550 #693]: #694
#430 := (iff #409 true)
#720 := (or true false)
#444 := (iff #720 true)
#445 := [rewrite]: #444
#719 := (iff #409 #720)
#718 := (iff #741 false)
#716 := (not true)
#440 := (iff #716 false)
#714 := [rewrite]: #440
#717 := (iff #741 #716)
#446 := (iff #739 true)
#721 := (iff #739 #720)
#387 := (iff #425 false)
#388 := [rewrite]: #387
#731 := (iff #404 true)
#734 := [rewrite]: #731
#443 := [monotonicity #734 #388]: #721
#339 := [trans #443 #445]: #446
#439 := [monotonicity #339]: #717
#715 := [trans #439 #714]: #718
#373 := (iff #735 true)
#729 := (not false)
#732 := (iff #729 true)
#372 := [rewrite]: #732
#367 := (iff #735 #729)
#728 := (iff #528 false)
#737 := (or false false)
#381 := (iff #737 false)
#722 := [rewrite]: #381
#726 := (iff #528 #737)
#724 := (iff #398 false)
#725 := [rewrite]: #724
#727 := [monotonicity #388 #725]: #726
#723 := [trans #727 #722]: #728
#730 := [monotonicity #723]: #367
#733 := [trans #730 #372]: #373
#429 := [monotonicity #733 #715]: #719
#431 := [trans #429 #445]: #430
#671 := [monotonicity #431 #695 #678]: #669
#672 := [trans #671 #660]: #662
#385 := (iff #745 false)
#397 := (iff #745 #737)
#396 := (iff #743 false)
#401 := [rewrite]: #396
#746 := (iff #744 false)
#736 := [rewrite]: #746
#738 := [monotonicity #736 #401]: #397
#386 := [trans #738 #722]: #385
#670 := [monotonicity #386 #672]: #674
#666 := [trans #670 #664]: #665
#655 := [monotonicity #666]: #653
#658 := [trans #655 #657]: #653
#652 := [quant-inst]: #668
#654 := [mp #652 #658]: #661
[unit-resolution #654 #753 #190]: false
unsat
51326f007e56e93f50afc5ba2d03581cdc697a2d 328 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#170 := -3::int
#38 := 3::int
#173 := (f4 3::int -3::int)
#176 := (= #173 0::int)
#189 := (not #176)
#39 := (- 3::int)
#40 := (f4 3::int #39)
#41 := (= #40 0::int)
#42 := (not #41)
#192 := (iff #42 #189)
#179 := (= 0::int #173)
#184 := (not #179)
#190 := (iff #184 #189)
#187 := (iff #179 #176)
#188 := [rewrite]: #187
#191 := [monotonicity #188]: #190
#185 := (iff #42 #184)
#182 := (iff #41 #179)
#180 := (iff #176 #179)
#181 := [rewrite]: #180
#177 := (iff #41 #176)
#174 := (= #40 #173)
#171 := (= #39 -3::int)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#183 := [trans #178 #181]: #182
#186 := [monotonicity #183]: #185
#193 := [trans #186 #191]: #192
#169 := [asserted]: #42
#194 := [mp #169 #193]: #189
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#760 := (pattern #29)
#66 := -1::int
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#125 := (mod #67 #70)
#271 := (+ #29 #125)
#272 := (= #271 0::int)
#30 := (mod #8 #9)
#268 := (* -1::int #30)
#269 := (+ #29 #268)
#270 := (= #269 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#210 := (or #88 #92)
#211 := (not #210)
#99 := (>= #8 0::int)
#202 := (or #92 #99)
#203 := (not #202)
#217 := (or #203 #211)
#273 := (ite #217 #270 #272)
#267 := (= #29 0::int)
#12 := (= #8 0::int)
#274 := (ite #12 #267 #273)
#266 := (= #8 #29)
#13 := (= #9 0::int)
#275 := (ite #13 #266 #274)
#761 := (forall (vars (?v0 int) (?v1 int)) (:pat #760) #275)
#278 := (forall (vars (?v0 int) (?v1 int)) #275)
#764 := (iff #278 #761)
#762 := (iff #275 #275)
#763 := [refl]: #762
#765 := [quant-intro #763]: #764
#131 := (* -1::int #125)
#235 := (ite #217 #30 #131)
#238 := (ite #12 0::int #235)
#241 := (ite #13 #8 #238)
#244 := (= #29 #241)
#247 := (forall (vars (?v0 int) (?v1 int)) #244)
#279 := (iff #247 #278)
#276 := (iff #244 #275)
#277 := [rewrite]: #276
#280 := [quant-intro #277]: #279
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#151 := (ite #106 #30 #131)
#154 := (ite #12 0::int #151)
#157 := (ite #13 #8 #154)
#160 := (= #29 #157)
#163 := (forall (vars (?v0 int) (?v1 int)) #160)
#248 := (iff #163 #247)
#245 := (iff #160 #244)
#242 := (= #157 #241)
#239 := (= #154 #238)
#236 := (= #151 #235)
#220 := (iff #106 #217)
#214 := (or #211 #203)
#218 := (iff #214 #217)
#219 := [rewrite]: #218
#215 := (iff #106 #214)
#212 := (iff #103 #203)
#213 := [rewrite]: #212
#200 := (iff #96 #211)
#201 := [rewrite]: #200
#216 := [monotonicity #201 #213]: #215
#221 := [trans #216 #219]: #220
#237 := [monotonicity #221]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#198 := (~ #163 #163)
#195 := (~ #160 #160)
#208 := [refl]: #195
#199 := [nnf-pos #208]: #198
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#166 := (iff #37 #163)
#60 := (and #16 #18)
#63 := (or #17 #60)
#136 := (ite #63 #30 #131)
#139 := (ite #12 0::int #136)
#142 := (ite #13 #8 #139)
#145 := (= #29 #142)
#148 := (forall (vars (?v0 int) (?v1 int)) #145)
#164 := (iff #148 #163)
#161 := (iff #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#152 := (= #136 #151)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#153 := [monotonicity #108]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#149 := (iff #37 #148)
#146 := (iff #36 #145)
#143 := (= #35 #142)
#140 := (= #34 #139)
#137 := (= #33 #136)
#134 := (= #32 #131)
#128 := (- #125)
#132 := (= #128 #131)
#133 := [rewrite]: #132
#129 := (= #32 #128)
#126 := (= #31 #125)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#127 := [monotonicity #69 #72]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#138 := [monotonicity #65 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#167 := [trans #150 #165]: #166
#124 := [asserted]: #37
#168 := [mp #124 #167]: #163
#209 := [mp~ #168 #199]: #163
#250 := [mp #209 #249]: #247
#281 := [mp #250 #280]: #278
#766 := [mp #281 #765]: #761
#589 := (not #761)
#582 := (or #589 #176)
#339 := (* -1::int -3::int)
#424 := (* -1::int 3::int)
#425 := (mod #424 #339)
#426 := (+ #173 #425)
#417 := (= #426 0::int)
#428 := (mod 3::int -3::int)
#429 := (* -1::int #428)
#357 := (+ #173 #429)
#430 := (= #357 0::int)
#427 := (<= -3::int 0::int)
#431 := (<= 3::int 0::int)
#410 := (or #431 #427)
#745 := (not #410)
#747 := (>= 3::int 0::int)
#404 := (or #427 #747)
#534 := (not #404)
#741 := (or #534 #745)
#415 := (ite #741 #430 #417)
#416 := (= 3::int 0::int)
#748 := (ite #416 #176 #415)
#749 := (= 3::int #173)
#750 := (= -3::int 0::int)
#751 := (ite #750 #749 #748)
#590 := (or #589 #751)
#592 := (iff #590 #582)
#594 := (iff #582 #582)
#687 := [rewrite]: #594
#586 := (iff #751 #176)
#402 := (= #173 3::int)
#587 := (ite false #402 #176)
#686 := (iff #587 #176)
#571 := [rewrite]: #686
#682 := (iff #751 #587)
#537 := (iff #748 #176)
#689 := (ite false #176 #176)
#693 := (iff #689 #176)
#691 := [rewrite]: #693
#577 := (iff #748 #689)
#694 := (iff #415 #176)
#690 := (iff #415 #689)
#535 := (iff #417 #176)
#704 := (= #426 #173)
#719 := (+ #173 0::int)
#710 := (= #719 #173)
#705 := [rewrite]: #710
#703 := (= #426 #719)
#696 := (= #425 0::int)
#698 := (mod -3::int 3::int)
#701 := (= #698 0::int)
#695 := [rewrite]: #701
#699 := (= #425 #698)
#555 := (= #339 3::int)
#556 := [rewrite]: #555
#713 := (= #424 -3::int)
#554 := [rewrite]: #713
#700 := [monotonicity #554 #556]: #699
#702 := [trans #700 #695]: #696
#697 := [monotonicity #702]: #703
#533 := [trans #697 #705]: #704
#536 := [monotonicity #533]: #535
#712 := (iff #430 #176)
#706 := (= #357 #173)
#708 := (= #357 #719)
#718 := (= #429 0::int)
#438 := (* -1::int 0::int)
#432 := (= #438 0::int)
#714 := [rewrite]: #432
#716 := (= #429 #438)
#436 := (= #428 0::int)
#437 := [rewrite]: #436
#717 := [monotonicity #437]: #716
#715 := [trans #717 #714]: #718
#709 := [monotonicity #715]: #708
#711 := [trans #709 #705]: #706
#707 := [monotonicity #711]: #712
#725 := (iff #741 false)
#445 := (or false false)
#724 := (iff #445 false)
#721 := [rewrite]: #724
#446 := (iff #741 #445)
#722 := (iff #745 false)
#1 := true
#734 := (not true)
#373 := (iff #734 false)
#736 := [rewrite]: #373
#452 := (iff #745 #734)
#450 := (iff #410 true)
#737 := (or false true)
#727 := (iff #737 true)
#449 := [rewrite]: #727
#740 := (iff #410 #737)
#744 := (iff #427 true)
#387 := [rewrite]: #744
#379 := (iff #431 false)
#739 := [rewrite]: #379
#726 := [monotonicity #739 #387]: #740
#451 := [trans #726 #449]: #450
#345 := [monotonicity #451]: #452
#723 := [trans #345 #736]: #722
#738 := (iff #534 false)
#729 := (iff #534 #734)
#732 := (iff #404 true)
#392 := (or true true)
#730 := (iff #392 true)
#731 := [rewrite]: #730
#393 := (iff #404 #392)
#728 := (iff #747 true)
#391 := [rewrite]: #728
#394 := [monotonicity #387 #391]: #393
#733 := [trans #394 #731]: #732
#735 := [monotonicity #733]: #729
#378 := [trans #735 #736]: #738
#720 := [monotonicity #378 #723]: #446
#435 := [trans #720 #721]: #725
#692 := [monotonicity #435 #707 #536]: #690
#576 := [trans #692 #691]: #694
#743 := (iff #416 false)
#403 := [rewrite]: #743
#578 := [monotonicity #403 #576]: #577
#685 := [trans #578 #691]: #537
#742 := (iff #749 #402)
#407 := [rewrite]: #742
#746 := (iff #750 false)
#752 := [rewrite]: #746
#683 := [monotonicity #752 #407 #685]: #682
#588 := [trans #683 #571]: #586
#593 := [monotonicity #588]: #592
#684 := [trans #593 #687]: #592
#591 := [quant-inst]: #590
#688 := [mp #591 #684]: #582
[unit-resolution #688 #766 #194]: false
unsat
4ca477e5a43a16dacbb90f983ac5a8510c16d464 327 0
#2 := false
#11 := 0::int
decl f3 :: (-> int int int)
#174 := -3::int
#68 := -1::int
#177 := (f3 -1::int -3::int)
#180 := (= #177 0::int)
#193 := (not #180)
#40 := 3::int
#41 := (- 3::int)
#38 := 1::int
#39 := (- 1::int)
#42 := (f3 #39 #41)
#43 := (= #42 0::int)
#44 := (not #43)
#196 := (iff #44 #193)
#183 := (= 0::int #177)
#188 := (not #183)
#194 := (iff #188 #193)
#191 := (iff #183 #180)
#192 := [rewrite]: #191
#195 := [monotonicity #192]: #194
#189 := (iff #44 #188)
#186 := (iff #43 #183)
#184 := (iff #180 #183)
#185 := [rewrite]: #184
#181 := (iff #43 #180)
#178 := (= #42 #177)
#175 := (= #41 -3::int)
#176 := [rewrite]: #175
#172 := (= #39 -1::int)
#173 := [rewrite]: #172
#179 := [monotonicity #173 #176]: #178
#182 := [monotonicity #179]: #181
#187 := [trans #182 #185]: #186
#190 := [monotonicity #187]: #189
#197 := [trans #190 #195]: #196
#171 := [asserted]: #44
#198 := [mp #171 #197]: #193
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#756 := (pattern #10)
#72 := (* -1::int #9)
#69 := (* -1::int #8)
#75 := (div #69 #72)
#259 := (* -1::int #75)
#260 := (+ #10 #259)
#261 := (= #260 0::int)
#21 := (div #8 #9)
#256 := (* -1::int #21)
#257 := (+ #10 #256)
#258 := (= #257 0::int)
#94 := (<= #9 0::int)
#90 := (<= #8 0::int)
#214 := (or #90 #94)
#215 := (not #214)
#101 := (>= #8 0::int)
#206 := (or #94 #101)
#207 := (not #206)
#221 := (or #207 #215)
#262 := (ite #221 #258 #261)
#255 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#263 := (ite #14 #255 #262)
#757 := (forall (vars (?v0 int) (?v1 int)) (:pat #756) #263)
#266 := (forall (vars (?v0 int) (?v1 int)) #263)
#760 := (iff #266 #757)
#758 := (iff #263 #263)
#759 := [refl]: #758
#761 := [quant-intro #759]: #760
#226 := (ite #221 #21 #75)
#229 := (ite #14 0::int #226)
#232 := (= #10 #229)
#235 := (forall (vars (?v0 int) (?v1 int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#102 := (not #101)
#95 := (not #94)
#105 := (and #95 #102)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#111 := (ite #108 #21 #75)
#114 := (ite #14 0::int #111)
#117 := (= #10 #114)
#120 := (forall (vars (?v0 int) (?v1 int)) #117)
#236 := (iff #120 #235)
#233 := (iff #117 #232)
#230 := (= #114 #229)
#227 := (= #111 #226)
#224 := (iff #108 #221)
#218 := (or #215 #207)
#222 := (iff #218 #221)
#223 := [rewrite]: #222
#219 := (iff #108 #218)
#216 := (iff #105 #207)
#217 := [rewrite]: #216
#204 := (iff #98 #215)
#205 := [rewrite]: #204
#220 := [monotonicity #205 #217]: #219
#225 := [trans #220 #223]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#210 := (~ #120 #120)
#208 := (~ #117 #117)
#209 := [refl]: #208
#211 := [nnf-pos #209]: #210
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#123 := (iff #28 #120)
#62 := (and #16 #18)
#65 := (or #17 #62)
#78 := (ite #65 #21 #75)
#81 := (ite #14 0::int #78)
#84 := (= #10 #81)
#87 := (forall (vars (?v0 int) (?v1 int)) #84)
#121 := (iff #87 #120)
#118 := (iff #84 #117)
#115 := (= #81 #114)
#112 := (= #78 #111)
#109 := (iff #65 #108)
#106 := (iff #62 #105)
#103 := (iff #18 #102)
#104 := [rewrite]: #103
#96 := (iff #16 #95)
#97 := [rewrite]: #96
#107 := [monotonicity #97 #104]: #106
#99 := (iff #17 #98)
#92 := (iff #15 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#88 := (iff #28 #87)
#85 := (iff #27 #84)
#82 := (= #26 #81)
#79 := (= #25 #78)
#76 := (= #24 #75)
#73 := (= #23 #72)
#74 := [rewrite]: #73
#70 := (= #22 #69)
#71 := [rewrite]: #70
#77 := [monotonicity #71 #74]: #76
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#80 := [monotonicity #67 #77]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#124 := [trans #89 #122]: #123
#61 := [asserted]: #28
#125 := [mp #61 #124]: #120
#201 := [mp~ #125 #211]: #120
#238 := [mp #201 #237]: #235
#269 := [mp #238 #268]: #266
#762 := [mp #269 #761]: #757
#681 := (not #757)
#682 := (or #681 #180)
#343 := (* -1::int -3::int)
#427 := (* -1::int -1::int)
#428 := (div #427 #343)
#429 := (* -1::int #428)
#420 := (+ #177 #429)
#431 := (= #420 0::int)
#432 := (div -1::int -3::int)
#433 := (* -1::int #432)
#430 := (+ #177 #433)
#434 := (= #430 0::int)
#413 := (<= -3::int 0::int)
#748 := (<= -1::int 0::int)
#750 := (or #748 #413)
#407 := (not #750)
#537 := (>= -1::int 0::int)
#744 := (or #413 #537)
#418 := (not #744)
#419 := (or #418 #407)
#751 := (ite #419 #434 #431)
#752 := (= -3::int 0::int)
#753 := (= -1::int 0::int)
#754 := (or #753 #752)
#749 := (ite #754 #180 #751)
#683 := (or #681 #749)
#684 := (iff #683 #682)
#674 := (iff #682 #682)
#675 := [rewrite]: #674
#669 := (iff #749 #180)
#687 := (ite false #180 #180)
#680 := (iff #687 #180)
#672 := [rewrite]: #680
#691 := (iff #749 #687)
#597 := (iff #751 #180)
#701 := (= #177 1::int)
#585 := (ite false #701 #180)
#595 := (iff #585 #180)
#596 := [rewrite]: #595
#593 := (iff #751 #585)
#591 := (iff #431 #180)
#574 := (= #420 #177)
#688 := (+ #177 0::int)
#686 := (= #688 #177)
#689 := [rewrite]: #686
#590 := (= #420 #688)
#581 := (= #429 0::int)
#696 := (* -1::int 0::int)
#579 := (= #696 0::int)
#580 := [rewrite]: #579
#694 := (= #429 #696)
#693 := (= #428 0::int)
#707 := (div 1::int 3::int)
#539 := (= #707 0::int)
#692 := [rewrite]: #539
#536 := (= #428 #707)
#706 := (= #343 3::int)
#700 := [rewrite]: #706
#699 := (= #427 1::int)
#705 := [rewrite]: #699
#538 := [monotonicity #705 #700]: #536
#695 := [trans #538 #692]: #693
#697 := [monotonicity #695]: #694
#540 := [trans #697 #580]: #581
#685 := [monotonicity #540]: #590
#589 := [trans #685 #689]: #574
#592 := [monotonicity #589]: #591
#704 := (iff #434 #701)
#709 := (+ -1::int #177)
#557 := (= #709 0::int)
#702 := (iff #557 #701)
#703 := [rewrite]: #702
#558 := (iff #434 #557)
#710 := (= #430 #709)
#712 := (+ #177 -1::int)
#714 := (= #712 #709)
#715 := [rewrite]: #714
#713 := (= #430 #712)
#722 := (= #433 -1::int)
#720 := (* -1::int 1::int)
#721 := (= #720 -1::int)
#718 := [rewrite]: #721
#435 := (= #433 #720)
#441 := (= #432 1::int)
#719 := [rewrite]: #441
#717 := [monotonicity #719]: #435
#711 := [trans #717 #718]: #722
#708 := [monotonicity #711]: #713
#716 := [trans #708 #715]: #710
#559 := [monotonicity #716]: #558
#698 := [trans #559 #703]: #704
#439 := (iff #419 false)
#746 := (or false false)
#390 := (iff #746 false)
#731 := [rewrite]: #390
#728 := (iff #419 #746)
#727 := (iff #407 false)
#1 := true
#741 := (not true)
#742 := (iff #741 false)
#740 := [rewrite]: #742
#449 := (iff #407 #741)
#726 := (iff #750 true)
#453 := (or true true)
#349 := (iff #453 true)
#725 := [rewrite]: #349
#454 := (iff #750 #453)
#396 := (iff #413 true)
#397 := [rewrite]: #396
#730 := (iff #748 true)
#452 := [rewrite]: #730
#455 := [monotonicity #452 #397]: #454
#448 := [trans #455 #725]: #726
#723 := [monotonicity #448]: #449
#724 := [trans #723 #740]: #727
#743 := (iff #418 false)
#381 := (iff #418 #741)
#376 := (iff #744 true)
#735 := (or true false)
#732 := (iff #735 true)
#738 := [rewrite]: #732
#736 := (iff #744 #735)
#733 := (iff #537 false)
#734 := [rewrite]: #733
#737 := [monotonicity #397 #734]: #736
#739 := [trans #737 #738]: #376
#382 := [monotonicity #739]: #381
#729 := [trans #382 #740]: #743
#438 := [monotonicity #729 #724]: #728
#440 := [trans #438 #731]: #439
#594 := [monotonicity #440 #698 #592]: #593
#690 := [trans #594 #596]: #597
#394 := (iff #754 false)
#406 := (iff #754 #746)
#405 := (iff #752 false)
#410 := [rewrite]: #405
#755 := (iff #753 false)
#745 := [rewrite]: #755
#747 := [monotonicity #745 #410]: #406
#395 := [trans #747 #731]: #394
#678 := [monotonicity #395 #690]: #691
#671 := [trans #678 #672]: #669
#673 := [monotonicity #671]: #684
#676 := [trans #673 #675]: #684
#679 := [quant-inst]: #683
#670 := [mp #679 #676]: #682
[unit-resolution #670 #762 #198]: false
unsat
0f74c41c938e9378ba24d8b61b7a4d0b50210370 356 0
#2 := false
#69 := -1::int
decl f4 :: (-> int int int)
#173 := -3::int
#38 := 5::int
#176 := (f4 5::int -3::int)
#181 := (= #176 -1::int)
#194 := (not #181)
#42 := 1::int
#43 := (- 1::int)
#39 := 3::int
#40 := (- 3::int)
#41 := (f4 5::int #40)
#44 := (= #41 #43)
#45 := (not #44)
#197 := (iff #45 #194)
#184 := (= -1::int #176)
#189 := (not #184)
#195 := (iff #189 #194)
#192 := (iff #184 #181)
#193 := [rewrite]: #192
#196 := [monotonicity #193]: #195
#190 := (iff #45 #189)
#187 := (iff #44 #184)
#185 := (iff #181 #184)
#186 := [rewrite]: #185
#182 := (iff #44 #181)
#179 := (= #43 -1::int)
#180 := [rewrite]: #179
#177 := (= #41 #176)
#174 := (= #40 -3::int)
#175 := [rewrite]: #174
#178 := [monotonicity #175]: #177
#183 := [monotonicity #178 #180]: #182
#188 := [trans #183 #186]: #187
#191 := [monotonicity #188]: #190
#198 := [trans #191 #196]: #197
#172 := [asserted]: #45
#199 := [mp #172 #198]: #194
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#764 := (pattern #29)
#11 := 0::int
#73 := (* -1::int #9)
#70 := (* -1::int #8)
#128 := (mod #70 #73)
#276 := (+ #29 #128)
#277 := (= #276 0::int)
#30 := (mod #8 #9)
#273 := (* -1::int #30)
#274 := (+ #29 #273)
#275 := (= #274 0::int)
#95 := (<= #9 0::int)
#91 := (<= #8 0::int)
#215 := (or #91 #95)
#216 := (not #215)
#102 := (>= #8 0::int)
#207 := (or #95 #102)
#208 := (not #207)
#222 := (or #208 #216)
#278 := (ite #222 #275 #277)
#272 := (= #29 0::int)
#12 := (= #8 0::int)
#279 := (ite #12 #272 #278)
#271 := (= #8 #29)
#13 := (= #9 0::int)
#280 := (ite #13 #271 #279)
#765 := (forall (vars (?v0 int) (?v1 int)) (:pat #764) #280)
#283 := (forall (vars (?v0 int) (?v1 int)) #280)
#768 := (iff #283 #765)
#766 := (iff #280 #280)
#767 := [refl]: #766
#769 := [quant-intro #767]: #768
#134 := (* -1::int #128)
#240 := (ite #222 #30 #134)
#243 := (ite #12 0::int #240)
#246 := (ite #13 #8 #243)
#249 := (= #29 #246)
#252 := (forall (vars (?v0 int) (?v1 int)) #249)
#284 := (iff #252 #283)
#281 := (iff #249 #280)
#282 := [rewrite]: #281
#285 := [quant-intro #282]: #284
#103 := (not #102)
#96 := (not #95)
#106 := (and #96 #103)
#92 := (not #91)
#99 := (and #92 #96)
#109 := (or #99 #106)
#154 := (ite #109 #30 #134)
#157 := (ite #12 0::int #154)
#160 := (ite #13 #8 #157)
#163 := (= #29 #160)
#166 := (forall (vars (?v0 int) (?v1 int)) #163)
#253 := (iff #166 #252)
#250 := (iff #163 #249)
#247 := (= #160 #246)
#244 := (= #157 #243)
#241 := (= #154 #240)
#225 := (iff #109 #222)
#219 := (or #216 #208)
#223 := (iff #219 #222)
#224 := [rewrite]: #223
#220 := (iff #109 #219)
#217 := (iff #106 #208)
#218 := [rewrite]: #217
#205 := (iff #99 #216)
#206 := [rewrite]: #205
#221 := [monotonicity #206 #218]: #220
#226 := [trans #221 #224]: #225
#242 := [monotonicity #226]: #241
#245 := [monotonicity #242]: #244
#248 := [monotonicity #245]: #247
#251 := [monotonicity #248]: #250
#254 := [quant-intro #251]: #253
#203 := (~ #166 #166)
#200 := (~ #163 #163)
#213 := [refl]: #200
#204 := [nnf-pos #213]: #203
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#169 := (iff #37 #166)
#63 := (and #16 #18)
#66 := (or #17 #63)
#139 := (ite #66 #30 #134)
#142 := (ite #12 0::int #139)
#145 := (ite #13 #8 #142)
#148 := (= #29 #145)
#151 := (forall (vars (?v0 int) (?v1 int)) #148)
#167 := (iff #151 #166)
#164 := (iff #148 #163)
#161 := (= #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#110 := (iff #66 #109)
#107 := (iff #63 #106)
#104 := (iff #18 #103)
#105 := [rewrite]: #104
#97 := (iff #16 #96)
#98 := [rewrite]: #97
#108 := [monotonicity #98 #105]: #107
#100 := (iff #17 #99)
#93 := (iff #15 #92)
#94 := [rewrite]: #93
#101 := [monotonicity #94 #98]: #100
#111 := [monotonicity #101 #108]: #110
#156 := [monotonicity #111]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#152 := (iff #37 #151)
#149 := (iff #36 #148)
#146 := (= #35 #145)
#143 := (= #34 #142)
#140 := (= #33 #139)
#137 := (= #32 #134)
#131 := (- #128)
#135 := (= #131 #134)
#136 := [rewrite]: #135
#132 := (= #32 #131)
#129 := (= #31 #128)
#74 := (= #23 #73)
#75 := [rewrite]: #74
#71 := (= #22 #70)
#72 := [rewrite]: #71
#130 := [monotonicity #72 #75]: #129
#133 := [monotonicity #130]: #132
#138 := [trans #133 #136]: #137
#67 := (iff #20 #66)
#64 := (iff #19 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#141 := [monotonicity #68 #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#170 := [trans #153 #168]: #169
#127 := [asserted]: #37
#171 := [mp #127 #170]: #166
#214 := [mp~ #171 #204]: #166
#255 := [mp #214 #254]: #252
#286 := [mp #255 #285]: #283
#770 := [mp #286 #769]: #765
#671 := (not #765)
#678 := (or #671 #181)
#344 := (* -1::int -3::int)
#428 := (* -1::int 5::int)
#429 := (mod #428 #344)
#430 := (+ #176 #429)
#421 := (= #430 0::int)
#432 := (mod 5::int -3::int)
#433 := (* -1::int #432)
#434 := (+ #176 #433)
#431 := (= #434 0::int)
#435 := (<= -3::int 0::int)
#414 := (<= 5::int 0::int)
#749 := (or #414 #435)
#751 := (not #749)
#408 := (>= 5::int 0::int)
#538 := (or #435 #408)
#745 := (not #538)
#419 := (or #745 #751)
#420 := (ite #419 #431 #421)
#752 := (= #176 0::int)
#753 := (= 5::int 0::int)
#754 := (ite #753 #752 #420)
#755 := (= 5::int #176)
#750 := (= -3::int 0::int)
#756 := (ite #750 #755 #754)
#662 := (or #671 #756)
#665 := (iff #662 #678)
#667 := (iff #678 #678)
#668 := [rewrite]: #667
#676 := (iff #756 #181)
#747 := (= #176 5::int)
#684 := (ite false #747 #181)
#674 := (iff #684 #181)
#675 := [rewrite]: #674
#680 := (iff #756 #684)
#682 := (iff #754 #181)
#679 := (ite false #752 #181)
#670 := (iff #679 #181)
#672 := [rewrite]: #670
#681 := (iff #754 #679)
#688 := (iff #420 #181)
#442 := 2::int
#704 := (= #176 2::int)
#595 := (ite false #704 #181)
#598 := (iff #595 #181)
#691 := [rewrite]: #598
#596 := (iff #420 #595)
#586 := (iff #421 #181)
#541 := (+ 1::int #176)
#690 := (= #541 0::int)
#592 := (iff #690 #181)
#593 := [rewrite]: #592
#575 := (iff #421 #690)
#686 := (= #430 #541)
#580 := (+ #176 1::int)
#689 := (= #580 #541)
#591 := [rewrite]: #689
#581 := (= #430 #580)
#695 := (= #429 1::int)
#707 := -5::int
#540 := (mod -5::int 3::int)
#696 := (= #540 1::int)
#697 := [rewrite]: #696
#693 := (= #429 #540)
#537 := (= #344 3::int)
#539 := [rewrite]: #537
#701 := (= #428 -5::int)
#708 := [rewrite]: #701
#694 := [monotonicity #708 #539]: #693
#698 := [trans #694 #697]: #695
#582 := [monotonicity #698]: #581
#687 := [trans #582 #591]: #686
#590 := [monotonicity #687]: #575
#594 := [trans #590 #593]: #586
#700 := (iff #431 #704)
#719 := -2::int
#716 := (+ -2::int #176)
#560 := (= #716 0::int)
#705 := (iff #560 #704)
#699 := [rewrite]: #705
#702 := (iff #431 #560)
#558 := (= #434 #716)
#709 := (+ #176 -2::int)
#711 := (= #709 #716)
#717 := [rewrite]: #711
#710 := (= #434 #709)
#713 := (= #433 -2::int)
#436 := (* -1::int 2::int)
#723 := (= #436 -2::int)
#712 := [rewrite]: #723
#718 := (= #433 #436)
#720 := (= #432 2::int)
#721 := [rewrite]: #720
#722 := [monotonicity #721]: #718
#714 := [trans #722 #712]: #713
#715 := [monotonicity #714]: #710
#559 := [trans #715 #717]: #558
#703 := [monotonicity #559]: #702
#706 := [trans #703 #699]: #700
#440 := (iff #419 false)
#724 := (or false false)
#729 := (iff #724 false)
#439 := [rewrite]: #729
#728 := (iff #419 #724)
#449 := (iff #751 false)
#1 := true
#739 := (not true)
#742 := (iff #739 false)
#382 := [rewrite]: #742
#726 := (iff #751 #739)
#456 := (iff #749 true)
#730 := (or false true)
#454 := (iff #730 true)
#455 := [rewrite]: #454
#731 := (iff #749 #730)
#732 := (iff #435 true)
#395 := [rewrite]: #732
#741 := (iff #414 false)
#744 := [rewrite]: #741
#453 := [monotonicity #744 #395]: #731
#350 := [trans #453 #455]: #456
#727 := [monotonicity #350]: #726
#450 := [trans #727 #382]: #449
#383 := (iff #745 false)
#377 := (iff #745 #739)
#738 := (iff #538 true)
#398 := (or true true)
#736 := (iff #398 true)
#737 := [rewrite]: #736
#734 := (iff #538 #398)
#396 := (iff #408 true)
#397 := [rewrite]: #396
#735 := [monotonicity #395 #397]: #734
#733 := [trans #735 #737]: #738
#740 := [monotonicity #733]: #377
#743 := [trans #740 #382]: #383
#725 := [monotonicity #743 #450]: #728
#441 := [trans #725 #439]: #440
#597 := [monotonicity #441 #706 #594]: #596
#692 := [trans #597 #691]: #688
#748 := (iff #753 false)
#391 := [rewrite]: #748
#673 := [monotonicity #391 #692]: #681
#683 := [trans #673 #672]: #682
#411 := (iff #755 #747)
#407 := [rewrite]: #411
#746 := (iff #750 false)
#406 := [rewrite]: #746
#685 := [monotonicity #406 #407 #683]: #680
#677 := [trans #685 #675]: #676
#666 := [monotonicity #677]: #665
#664 := [trans #666 #668]: #665
#663 := [quant-inst]: #662
#669 := [mp #663 #664]: #678
[unit-resolution #669 #770 #199]: false
unsat
ddc5a6b304650a08be4d46afd02b8b25ea1c25a2 311 0
#2 := false
#41 := 1::int
decl f3 :: (-> int int int)
#171 := -3::int
#174 := (f3 -3::int -3::int)
#177 := (= #174 1::int)
#190 := (not #177)
#38 := 3::int
#39 := (- 3::int)
#40 := (f3 #39 #39)
#42 := (= #40 1::int)
#43 := (not #42)
#193 := (iff #43 #190)
#180 := (= 1::int #174)
#185 := (not #180)
#191 := (iff #185 #190)
#188 := (iff #180 #177)
#189 := [rewrite]: #188
#192 := [monotonicity #189]: #191
#186 := (iff #43 #185)
#183 := (iff #42 #180)
#181 := (iff #177 #180)
#182 := [rewrite]: #181
#178 := (iff #42 #177)
#175 := (= #40 #174)
#172 := (= #39 -3::int)
#173 := [rewrite]: #172
#176 := [monotonicity #173 #173]: #175
#179 := [monotonicity #176]: #178
#184 := [trans #179 #182]: #183
#187 := [monotonicity #184]: #186
#194 := [trans #187 #192]: #193
#170 := [asserted]: #43
#195 := [mp #170 #194]: #190
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#753 := (pattern #10)
#11 := 0::int
#67 := -1::int
#71 := (* -1::int #9)
#68 := (* -1::int #8)
#74 := (div #68 #71)
#256 := (* -1::int #74)
#257 := (+ #10 #256)
#258 := (= #257 0::int)
#21 := (div #8 #9)
#253 := (* -1::int #21)
#254 := (+ #10 #253)
#255 := (= #254 0::int)
#93 := (<= #9 0::int)
#89 := (<= #8 0::int)
#211 := (or #89 #93)
#212 := (not #211)
#100 := (>= #8 0::int)
#203 := (or #93 #100)
#204 := (not #203)
#218 := (or #204 #212)
#259 := (ite #218 #255 #258)
#252 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#260 := (ite #14 #252 #259)
#754 := (forall (vars (?v0 int) (?v1 int)) (:pat #753) #260)
#263 := (forall (vars (?v0 int) (?v1 int)) #260)
#757 := (iff #263 #754)
#755 := (iff #260 #260)
#756 := [refl]: #755
#758 := [quant-intro #756]: #757
#223 := (ite #218 #21 #74)
#226 := (ite #14 0::int #223)
#229 := (= #10 #226)
#232 := (forall (vars (?v0 int) (?v1 int)) #229)
#264 := (iff #232 #263)
#261 := (iff #229 #260)
#262 := [rewrite]: #261
#265 := [quant-intro #262]: #264
#101 := (not #100)
#94 := (not #93)
#104 := (and #94 #101)
#90 := (not #89)
#97 := (and #90 #94)
#107 := (or #97 #104)
#110 := (ite #107 #21 #74)
#113 := (ite #14 0::int #110)
#116 := (= #10 #113)
#119 := (forall (vars (?v0 int) (?v1 int)) #116)
#233 := (iff #119 #232)
#230 := (iff #116 #229)
#227 := (= #113 #226)
#224 := (= #110 #223)
#221 := (iff #107 #218)
#215 := (or #212 #204)
#219 := (iff #215 #218)
#220 := [rewrite]: #219
#216 := (iff #107 #215)
#213 := (iff #104 #204)
#214 := [rewrite]: #213
#201 := (iff #97 #212)
#202 := [rewrite]: #201
#217 := [monotonicity #202 #214]: #216
#222 := [trans #217 #220]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [quant-intro #231]: #233
#207 := (~ #119 #119)
#205 := (~ #116 #116)
#206 := [refl]: #205
#208 := [nnf-pos #206]: #207
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#122 := (iff #28 #119)
#61 := (and #16 #18)
#64 := (or #17 #61)
#77 := (ite #64 #21 #74)
#80 := (ite #14 0::int #77)
#83 := (= #10 #80)
#86 := (forall (vars (?v0 int) (?v1 int)) #83)
#120 := (iff #86 #119)
#117 := (iff #83 #116)
#114 := (= #80 #113)
#111 := (= #77 #110)
#108 := (iff #64 #107)
#105 := (iff #61 #104)
#102 := (iff #18 #101)
#103 := [rewrite]: #102
#95 := (iff #16 #94)
#96 := [rewrite]: #95
#106 := [monotonicity #96 #103]: #105
#98 := (iff #17 #97)
#91 := (iff #15 #90)
#92 := [rewrite]: #91
#99 := [monotonicity #92 #96]: #98
#109 := [monotonicity #99 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [monotonicity #115]: #117
#121 := [quant-intro #118]: #120
#87 := (iff #28 #86)
#84 := (iff #27 #83)
#81 := (= #26 #80)
#78 := (= #25 #77)
#75 := (= #24 #74)
#72 := (= #23 #71)
#73 := [rewrite]: #72
#69 := (= #22 #68)
#70 := [rewrite]: #69
#76 := [monotonicity #70 #73]: #75
#65 := (iff #20 #64)
#62 := (iff #19 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#79 := [monotonicity #66 #76]: #78
#82 := [monotonicity #79]: #81
#85 := [monotonicity #82]: #84
#88 := [quant-intro #85]: #87
#123 := [trans #88 #121]: #122
#60 := [asserted]: #28
#124 := [mp #60 #123]: #119
#198 := [mp~ #124 #208]: #119
#235 := [mp #198 #234]: #232
#266 := [mp #235 #265]: #263
#759 := [mp #266 #758]: #754
#590 := (not #754)
#591 := (or #590 #177)
#340 := (* -1::int -3::int)
#424 := (div #340 #340)
#425 := (* -1::int #424)
#426 := (+ #174 #425)
#417 := (= #426 0::int)
#428 := (div -3::int -3::int)
#429 := (* -1::int #428)
#430 := (+ #174 #429)
#427 := (= #430 0::int)
#431 := (<= -3::int 0::int)
#410 := (or #431 #431)
#745 := (not #410)
#747 := (>= -3::int 0::int)
#404 := (or #431 #747)
#534 := (not #404)
#741 := (or #534 #745)
#415 := (ite #741 #427 #417)
#416 := (= #174 0::int)
#748 := (= -3::int 0::int)
#749 := (or #748 #748)
#750 := (ite #749 #416 #415)
#592 := (or #590 #750)
#594 := (iff #592 #591)
#684 := (iff #591 #591)
#688 := [rewrite]: #684
#589 := (iff #750 #177)
#683 := (ite false #416 #177)
#586 := (iff #683 #177)
#588 := [rewrite]: #586
#686 := (iff #750 #683)
#587 := (iff #415 #177)
#576 := (ite false #177 #177)
#537 := (iff #576 #177)
#685 := [rewrite]: #537
#577 := (iff #415 #576)
#691 := (iff #417 #177)
#715 := (+ -1::int #174)
#705 := (= #715 0::int)
#712 := (iff #705 #177)
#707 := [rewrite]: #712
#692 := (iff #417 #705)
#689 := (= #426 #715)
#432 := (+ #174 -1::int)
#719 := (= #432 #715)
#708 := [rewrite]: #719
#535 := (= #426 #432)
#704 := (= #425 -1::int)
#725 := (* -1::int 1::int)
#437 := (= #725 -1::int)
#438 := [rewrite]: #437
#703 := (= #425 #725)
#696 := (= #424 1::int)
#698 := (div 3::int 3::int)
#701 := (= #698 1::int)
#695 := [rewrite]: #701
#699 := (= #424 #698)
#555 := (= #340 3::int)
#556 := [rewrite]: #555
#700 := [monotonicity #556 #556]: #699
#702 := [trans #700 #695]: #696
#697 := [monotonicity #702]: #703
#533 := [trans #697 #438]: #704
#536 := [monotonicity #533]: #535
#690 := [trans #536 #708]: #689
#693 := [monotonicity #690]: #692
#694 := [trans #693 #707]: #691
#713 := (iff #427 #177)
#706 := (iff #427 #705)
#709 := (= #430 #715)
#714 := (= #430 #432)
#716 := (= #429 -1::int)
#435 := (= #429 #725)
#724 := (= #428 1::int)
#721 := [rewrite]: #724
#436 := [monotonicity #721]: #435
#717 := [trans #436 #438]: #716
#718 := [monotonicity #717]: #714
#710 := [trans #718 #708]: #709
#711 := [monotonicity #710]: #706
#554 := [trans #711 #707]: #713
#446 := (iff #741 false)
#752 := (or false false)
#407 := (iff #752 false)
#743 := [rewrite]: #407
#723 := (iff #741 #752)
#346 := (iff #745 false)
#1 := true
#729 := (not true)
#736 := (iff #729 false)
#738 := [rewrite]: #736
#451 := (iff #745 #729)
#449 := (iff #410 true)
#739 := (or true true)
#726 := (iff #739 true)
#727 := [rewrite]: #726
#737 := (iff #410 #739)
#387 := (iff #431 true)
#728 := [rewrite]: #387
#740 := [monotonicity #728 #728]: #737
#450 := [trans #740 #727]: #449
#452 := [monotonicity #450]: #451
#722 := [trans #452 #738]: #346
#378 := (iff #534 false)
#735 := (iff #534 #729)
#733 := (iff #404 true)
#393 := (or true false)
#731 := (iff #393 true)
#732 := [rewrite]: #731
#394 := (iff #404 #393)
#391 := (iff #747 false)
#392 := [rewrite]: #391
#730 := [monotonicity #728 #392]: #394
#734 := [trans #730 #732]: #733
#373 := [monotonicity #734]: #735
#379 := [trans #373 #738]: #378
#445 := [monotonicity #379 #722]: #723
#720 := [trans #445 #743]: #446
#578 := [monotonicity #720 #554 #694]: #577
#682 := [trans #578 #685]: #587
#403 := (iff #749 false)
#742 := (iff #749 #752)
#751 := (iff #748 false)
#746 := [rewrite]: #751
#402 := [monotonicity #746 #746]: #742
#744 := [trans #402 #743]: #403
#571 := [monotonicity #744 #682]: #686
#582 := [trans #571 #588]: #589
#687 := [monotonicity #582]: #594
#675 := [trans #687 #688]: #594
#593 := [quant-inst]: #592
#677 := [mp #593 #675]: #591
[unit-resolution #677 #759 #195]: false
unsat
3c5a12d92626ff8ea2f3e7c2d04bebd45ef00916 350 0
#2 := false
#42 := 2::int
decl f4 :: (-> int int int)
#40 := 3::int
#68 := -1::int
#174 := (f4 -1::int 3::int)
#177 := (= #174 2::int)
#190 := (not #177)
#38 := 1::int
#39 := (- 1::int)
#41 := (f4 #39 3::int)
#43 := (= #41 2::int)
#44 := (not #43)
#193 := (iff #44 #190)
#180 := (= 2::int #174)
#185 := (not #180)
#191 := (iff #185 #190)
#188 := (iff #180 #177)
#189 := [rewrite]: #188
#192 := [monotonicity #189]: #191
#186 := (iff #44 #185)
#183 := (iff #43 #180)
#181 := (iff #177 #180)
#182 := [rewrite]: #181
#178 := (iff #43 #177)
#175 := (= #41 #174)
#172 := (= #39 -1::int)
#173 := [rewrite]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#184 := [trans #179 #182]: #183
#187 := [monotonicity #184]: #186
#194 := [trans #187 #192]: #193
#171 := [asserted]: #44
#195 := [mp #171 #194]: #190
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#760 := (pattern #29)
#11 := 0::int
#72 := (* -1::int #9)
#69 := (* -1::int #8)
#127 := (mod #69 #72)
#272 := (+ #29 #127)
#273 := (= #272 0::int)
#30 := (mod #8 #9)
#269 := (* -1::int #30)
#270 := (+ #29 #269)
#271 := (= #270 0::int)
#94 := (<= #9 0::int)
#90 := (<= #8 0::int)
#211 := (or #90 #94)
#212 := (not #211)
#101 := (>= #8 0::int)
#203 := (or #94 #101)
#204 := (not #203)
#218 := (or #204 #212)
#274 := (ite #218 #271 #273)
#268 := (= #29 0::int)
#12 := (= #8 0::int)
#275 := (ite #12 #268 #274)
#267 := (= #8 #29)
#13 := (= #9 0::int)
#276 := (ite #13 #267 #275)
#761 := (forall (vars (?v0 int) (?v1 int)) (:pat #760) #276)
#279 := (forall (vars (?v0 int) (?v1 int)) #276)
#764 := (iff #279 #761)
#762 := (iff #276 #276)
#763 := [refl]: #762
#765 := [quant-intro #763]: #764
#133 := (* -1::int #127)
#236 := (ite #218 #30 #133)
#239 := (ite #12 0::int #236)
#242 := (ite #13 #8 #239)
#245 := (= #29 #242)
#248 := (forall (vars (?v0 int) (?v1 int)) #245)
#280 := (iff #248 #279)
#277 := (iff #245 #276)
#278 := [rewrite]: #277
#281 := [quant-intro #278]: #280
#102 := (not #101)
#95 := (not #94)
#105 := (and #95 #102)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#153 := (ite #108 #30 #133)
#156 := (ite #12 0::int #153)
#159 := (ite #13 #8 #156)
#162 := (= #29 #159)
#165 := (forall (vars (?v0 int) (?v1 int)) #162)
#249 := (iff #165 #248)
#246 := (iff #162 #245)
#243 := (= #159 #242)
#240 := (= #156 #239)
#237 := (= #153 #236)
#221 := (iff #108 #218)
#215 := (or #212 #204)
#219 := (iff #215 #218)
#220 := [rewrite]: #219
#216 := (iff #108 #215)
#213 := (iff #105 #204)
#214 := [rewrite]: #213
#201 := (iff #98 #212)
#202 := [rewrite]: #201
#217 := [monotonicity #202 #214]: #216
#222 := [trans #217 #220]: #221
#238 := [monotonicity #222]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [quant-intro #247]: #249
#199 := (~ #165 #165)
#196 := (~ #162 #162)
#209 := [refl]: #196
#200 := [nnf-pos #209]: #199
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#168 := (iff #37 #165)
#62 := (and #16 #18)
#65 := (or #17 #62)
#138 := (ite #65 #30 #133)
#141 := (ite #12 0::int #138)
#144 := (ite #13 #8 #141)
#147 := (= #29 #144)
#150 := (forall (vars (?v0 int) (?v1 int)) #147)
#166 := (iff #150 #165)
#163 := (iff #147 #162)
#160 := (= #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#109 := (iff #65 #108)
#106 := (iff #62 #105)
#103 := (iff #18 #102)
#104 := [rewrite]: #103
#96 := (iff #16 #95)
#97 := [rewrite]: #96
#107 := [monotonicity #97 #104]: #106
#99 := (iff #17 #98)
#92 := (iff #15 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#155 := [monotonicity #110]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [quant-intro #164]: #166
#151 := (iff #37 #150)
#148 := (iff #36 #147)
#145 := (= #35 #144)
#142 := (= #34 #141)
#139 := (= #33 #138)
#136 := (= #32 #133)
#130 := (- #127)
#134 := (= #130 #133)
#135 := [rewrite]: #134
#131 := (= #32 #130)
#128 := (= #31 #127)
#73 := (= #23 #72)
#74 := [rewrite]: #73
#70 := (= #22 #69)
#71 := [rewrite]: #70
#129 := [monotonicity #71 #74]: #128
#132 := [monotonicity #129]: #131
#137 := [trans #132 #135]: #136
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#140 := [monotonicity #67 #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#169 := [trans #152 #167]: #168
#126 := [asserted]: #37
#170 := [mp #126 #169]: #165
#210 := [mp~ #170 #200]: #165
#251 := [mp #210 #250]: #248
#282 := [mp #251 #281]: #279
#766 := [mp #282 #765]: #761
#672 := (not #761)
#673 := (or #672 #177)
#340 := (* -1::int 3::int)
#424 := (* -1::int -1::int)
#425 := (mod #424 #340)
#426 := (+ #174 #425)
#417 := (= #426 0::int)
#428 := (mod -1::int 3::int)
#429 := (* -1::int #428)
#430 := (+ #174 #429)
#427 := (= #430 0::int)
#431 := (<= 3::int 0::int)
#410 := (<= -1::int 0::int)
#745 := (or #410 #431)
#747 := (not #745)
#404 := (>= -1::int 0::int)
#534 := (or #431 #404)
#741 := (not #534)
#415 := (or #741 #747)
#416 := (ite #415 #427 #417)
#748 := (= #174 0::int)
#749 := (= -1::int 0::int)
#750 := (ite #749 #748 #416)
#751 := (= -1::int #174)
#746 := (= 3::int 0::int)
#752 := (ite #746 #751 #750)
#667 := (or #672 #752)
#658 := (iff #667 #673)
#661 := (iff #673 #673)
#662 := [rewrite]: #661
#670 := (iff #752 #177)
#743 := (= #174 -1::int)
#678 := (ite false #743 #177)
#676 := (iff #678 #177)
#681 := [rewrite]: #676
#679 := (iff #752 #678)
#666 := (iff #750 #177)
#684 := (ite false #748 #177)
#677 := (iff #684 #177)
#669 := [rewrite]: #677
#688 := (iff #750 #684)
#594 := (iff #416 #177)
#1 := true
#582 := (ite true #177 #743)
#592 := (iff #582 #177)
#593 := [rewrite]: #592
#590 := (iff #416 #582)
#588 := (iff #417 #743)
#577 := (+ 1::int #174)
#682 := (= #577 0::int)
#571 := (iff #682 #743)
#586 := [rewrite]: #571
#683 := (iff #417 #682)
#685 := (= #426 #577)
#691 := (+ #174 1::int)
#578 := (= #691 #577)
#537 := [rewrite]: #578
#694 := (= #426 #691)
#692 := (= #425 1::int)
#703 := -3::int
#533 := (mod 1::int -3::int)
#689 := (= #533 1::int)
#690 := [rewrite]: #689
#535 := (= #425 #533)
#697 := (= #340 -3::int)
#704 := [rewrite]: #697
#696 := (= #424 1::int)
#702 := [rewrite]: #696
#536 := [monotonicity #702 #704]: #535
#693 := [trans #536 #690]: #692
#576 := [monotonicity #693]: #694
#587 := [trans #576 #537]: #685
#686 := [monotonicity #587]: #683
#589 := [trans #686 #586]: #588
#701 := (iff #427 #177)
#718 := -2::int
#711 := (+ -2::int #174)
#555 := (= #711 0::int)
#699 := (iff #555 #177)
#700 := [rewrite]: #699
#556 := (iff #427 #555)
#713 := (= #430 #711)
#710 := (+ #174 -2::int)
#712 := (= #710 #711)
#707 := [rewrite]: #712
#705 := (= #430 #710)
#708 := (= #429 -2::int)
#717 := (* -1::int 2::int)
#715 := (= #717 -2::int)
#719 := [rewrite]: #715
#432 := (= #429 #717)
#438 := (= #428 2::int)
#716 := [rewrite]: #438
#714 := [monotonicity #716]: #432
#709 := [trans #714 #719]: #708
#706 := [monotonicity #709]: #705
#554 := [trans #706 #707]: #713
#698 := [monotonicity #554]: #556
#695 := [trans #698 #700]: #701
#436 := (iff #415 true)
#726 := (or true false)
#450 := (iff #726 true)
#451 := [rewrite]: #450
#725 := (iff #415 #726)
#724 := (iff #747 false)
#722 := (not true)
#446 := (iff #722 false)
#720 := [rewrite]: #446
#723 := (iff #747 #722)
#452 := (iff #745 true)
#727 := (iff #745 #726)
#728 := (iff #431 false)
#391 := [rewrite]: #728
#737 := (iff #410 true)
#740 := [rewrite]: #737
#449 := [monotonicity #740 #391]: #727
#346 := [trans #449 #451]: #452
#445 := [monotonicity #346]: #723
#721 := [trans #445 #720]: #724
#379 := (iff #741 true)
#735 := (not false)
#738 := (iff #735 true)
#378 := [rewrite]: #738
#373 := (iff #741 #735)
#734 := (iff #534 false)
#394 := (or false false)
#732 := (iff #394 false)
#733 := [rewrite]: #732
#730 := (iff #534 #394)
#392 := (iff #404 false)
#393 := [rewrite]: #392
#731 := [monotonicity #391 #393]: #730
#729 := [trans #731 #733]: #734
#736 := [monotonicity #729]: #373
#739 := [trans #736 #378]: #379
#435 := [monotonicity #739 #721]: #725
#437 := [trans #435 #451]: #436
#591 := [monotonicity #437 #695 #589]: #590
#687 := [trans #591 #593]: #594
#744 := (iff #749 false)
#387 := [rewrite]: #744
#675 := [monotonicity #387 #687]: #688
#668 := [trans #675 #669]: #666
#407 := (iff #751 #743)
#403 := [rewrite]: #407
#742 := (iff #746 false)
#402 := [rewrite]: #742
#680 := [monotonicity #402 #403 #668]: #679
#671 := [trans #680 #681]: #670
#659 := [monotonicity #671]: #658
#663 := [trans #659 #662]: #658
#674 := [quant-inst]: #667
#664 := [mp #674 #663]: #673
[unit-resolution #664 #766 #195]: false
unsat
081d17418769caf8ceb0841229da368f6008d179 338 0
#2 := false
#43 := 1::int
decl f3 :: (-> int int int)
#176 := -3::int
#173 := -5::int
#179 := (f3 -5::int -3::int)
#182 := (= #179 1::int)
#195 := (not #182)
#40 := 3::int
#41 := (- 3::int)
#38 := 5::int
#39 := (- 5::int)
#42 := (f3 #39 #41)
#44 := (= #42 1::int)
#45 := (not #44)
#198 := (iff #45 #195)
#185 := (= 1::int #179)
#190 := (not #185)
#196 := (iff #190 #195)
#193 := (iff #185 #182)
#194 := [rewrite]: #193
#197 := [monotonicity #194]: #196
#191 := (iff #45 #190)
#188 := (iff #44 #185)
#186 := (iff #182 #185)
#187 := [rewrite]: #186
#183 := (iff #44 #182)
#180 := (= #42 #179)
#177 := (= #41 -3::int)
#178 := [rewrite]: #177
#174 := (= #39 -5::int)
#175 := [rewrite]: #174
#181 := [monotonicity #175 #178]: #180
#184 := [monotonicity #181]: #183
#189 := [trans #184 #187]: #188
#192 := [monotonicity #189]: #191
#199 := [trans #192 #197]: #198
#172 := [asserted]: #45
#200 := [mp #172 #199]: #195
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#758 := (pattern #10)
#11 := 0::int
#69 := -1::int
#73 := (* -1::int #9)
#70 := (* -1::int #8)
#76 := (div #70 #73)
#261 := (* -1::int #76)
#262 := (+ #10 #261)
#263 := (= #262 0::int)
#21 := (div #8 #9)
#258 := (* -1::int #21)
#259 := (+ #10 #258)
#260 := (= #259 0::int)
#95 := (<= #9 0::int)
#91 := (<= #8 0::int)
#216 := (or #91 #95)
#217 := (not #216)
#102 := (>= #8 0::int)
#208 := (or #95 #102)
#209 := (not #208)
#223 := (or #209 #217)
#264 := (ite #223 #260 #263)
#257 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#265 := (ite #14 #257 #264)
#759 := (forall (vars (?v0 int) (?v1 int)) (:pat #758) #265)
#268 := (forall (vars (?v0 int) (?v1 int)) #265)
#762 := (iff #268 #759)
#760 := (iff #265 #265)
#761 := [refl]: #760
#763 := [quant-intro #761]: #762
#228 := (ite #223 #21 #76)
#231 := (ite #14 0::int #228)
#234 := (= #10 #231)
#237 := (forall (vars (?v0 int) (?v1 int)) #234)
#269 := (iff #237 #268)
#266 := (iff #234 #265)
#267 := [rewrite]: #266
#270 := [quant-intro #267]: #269
#103 := (not #102)
#96 := (not #95)
#106 := (and #96 #103)
#92 := (not #91)
#99 := (and #92 #96)
#109 := (or #99 #106)
#112 := (ite #109 #21 #76)
#115 := (ite #14 0::int #112)
#118 := (= #10 #115)
#121 := (forall (vars (?v0 int) (?v1 int)) #118)
#238 := (iff #121 #237)
#235 := (iff #118 #234)
#232 := (= #115 #231)
#229 := (= #112 #228)
#226 := (iff #109 #223)
#220 := (or #217 #209)
#224 := (iff #220 #223)
#225 := [rewrite]: #224
#221 := (iff #109 #220)
#218 := (iff #106 #209)
#219 := [rewrite]: #218
#206 := (iff #99 #217)
#207 := [rewrite]: #206
#222 := [monotonicity #207 #219]: #221
#227 := [trans #222 #225]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [quant-intro #236]: #238
#212 := (~ #121 #121)
#210 := (~ #118 #118)
#211 := [refl]: #210
#213 := [nnf-pos #211]: #212
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#124 := (iff #28 #121)
#63 := (and #16 #18)
#66 := (or #17 #63)
#79 := (ite #66 #21 #76)
#82 := (ite #14 0::int #79)
#85 := (= #10 #82)
#88 := (forall (vars (?v0 int) (?v1 int)) #85)
#122 := (iff #88 #121)
#119 := (iff #85 #118)
#116 := (= #82 #115)
#113 := (= #79 #112)
#110 := (iff #66 #109)
#107 := (iff #63 #106)
#104 := (iff #18 #103)
#105 := [rewrite]: #104
#97 := (iff #16 #96)
#98 := [rewrite]: #97
#108 := [monotonicity #98 #105]: #107
#100 := (iff #17 #99)
#93 := (iff #15 #92)
#94 := [rewrite]: #93
#101 := [monotonicity #94 #98]: #100
#111 := [monotonicity #101 #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [monotonicity #117]: #119
#123 := [quant-intro #120]: #122
#89 := (iff #28 #88)
#86 := (iff #27 #85)
#83 := (= #26 #82)
#80 := (= #25 #79)
#77 := (= #24 #76)
#74 := (= #23 #73)
#75 := [rewrite]: #74
#71 := (= #22 #70)
#72 := [rewrite]: #71
#78 := [monotonicity #72 #75]: #77
#67 := (iff #20 #66)
#64 := (iff #19 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#81 := [monotonicity #68 #78]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#90 := [quant-intro #87]: #89
#125 := [trans #90 #123]: #124
#62 := [asserted]: #28
#126 := [mp #62 #125]: #121
#203 := [mp~ #126 #213]: #121
#240 := [mp #203 #239]: #237
#271 := [mp #240 #270]: #268
#764 := [mp #271 #763]: #759
#672 := (not #759)
#679 := (or #672 #182)
#345 := (* -1::int -3::int)
#429 := (* -1::int -5::int)
#430 := (div #429 #345)
#431 := (* -1::int #430)
#422 := (+ #179 #431)
#433 := (= #422 0::int)
#434 := (div -5::int -3::int)
#435 := (* -1::int #434)
#432 := (+ #179 #435)
#436 := (= #432 0::int)
#415 := (<= -3::int 0::int)
#750 := (<= -5::int 0::int)
#752 := (or #750 #415)
#409 := (not #752)
#539 := (>= -5::int 0::int)
#746 := (or #415 #539)
#420 := (not #746)
#421 := (or #420 #409)
#753 := (ite #421 #436 #433)
#754 := (= #179 0::int)
#755 := (= -3::int 0::int)
#756 := (= -5::int 0::int)
#751 := (or #756 #755)
#757 := (ite #751 #754 #753)
#663 := (or #672 #757)
#666 := (iff #663 #679)
#668 := (iff #679 #679)
#669 := [rewrite]: #668
#677 := (iff #757 #182)
#685 := (ite false #754 #182)
#675 := (iff #685 #182)
#676 := [rewrite]: #675
#681 := (iff #757 #685)
#683 := (iff #753 #182)
#721 := 2::int
#706 := (= #179 2::int)
#680 := (ite false #706 #182)
#671 := (iff #680 #182)
#673 := [rewrite]: #671
#682 := (iff #753 #680)
#689 := (iff #433 #182)
#591 := (+ -1::int #179)
#596 := (= #591 0::int)
#599 := (iff #596 #182)
#692 := [rewrite]: #599
#597 := (iff #433 #596)
#587 := (= #422 #591)
#688 := (+ #179 -1::int)
#593 := (= #688 #591)
#594 := [rewrite]: #593
#691 := (= #422 #688)
#592 := (= #431 -1::int)
#581 := (* -1::int 1::int)
#542 := (= #581 -1::int)
#690 := [rewrite]: #542
#582 := (= #431 #581)
#696 := (= #430 1::int)
#541 := (div 5::int 3::int)
#697 := (= #541 1::int)
#698 := [rewrite]: #697
#694 := (= #430 #541)
#538 := (= #345 3::int)
#540 := [rewrite]: #538
#702 := (= #429 5::int)
#709 := [rewrite]: #702
#695 := [monotonicity #709 #540]: #694
#699 := [trans #695 #698]: #696
#583 := [monotonicity #699]: #582
#687 := [trans #583 #690]: #592
#576 := [monotonicity #687]: #691
#595 := [trans #576 #594]: #587
#598 := [monotonicity #595]: #597
#693 := [trans #598 #692]: #689
#707 := (iff #436 #706)
#724 := -2::int
#712 := (+ -2::int #179)
#703 := (= #712 0::int)
#700 := (iff #703 #706)
#701 := [rewrite]: #700
#704 := (iff #436 #703)
#560 := (= #432 #712)
#711 := (+ #179 -2::int)
#718 := (= #711 #712)
#559 := [rewrite]: #718
#716 := (= #432 #711)
#715 := (= #435 -2::int)
#719 := (* -1::int 2::int)
#713 := (= #719 -2::int)
#714 := [rewrite]: #713
#723 := (= #435 #719)
#722 := (= #434 2::int)
#437 := [rewrite]: #722
#720 := [monotonicity #437]: #723
#710 := [trans #720 #714]: #715
#717 := [monotonicity #710]: #716
#561 := [trans #717 #559]: #560
#705 := [monotonicity #561]: #704
#708 := [trans #705 #701]: #707
#442 := (iff #421 false)
#408 := (or false false)
#733 := (iff #408 false)
#396 := [rewrite]: #733
#440 := (iff #421 #408)
#726 := (iff #409 false)
#1 := true
#383 := (not true)
#742 := (iff #383 false)
#745 := [rewrite]: #742
#725 := (iff #409 #383)
#450 := (iff #752 true)
#456 := (or true true)
#727 := (iff #456 true)
#728 := [rewrite]: #727
#457 := (iff #752 #456)
#399 := (iff #415 true)
#735 := [rewrite]: #399
#454 := (iff #750 true)
#455 := [rewrite]: #454
#351 := [monotonicity #455 #735]: #457
#451 := [trans #351 #728]: #450
#729 := [monotonicity #451]: #725
#730 := [trans #729 #745]: #726
#731 := (iff #420 false)
#384 := (iff #420 #383)
#741 := (iff #746 true)
#738 := (or true false)
#740 := (iff #738 true)
#378 := [rewrite]: #740
#739 := (iff #746 #738)
#736 := (iff #539 false)
#737 := [rewrite]: #736
#734 := [monotonicity #735 #737]: #739
#743 := [trans #734 #378]: #741
#744 := [monotonicity #743]: #384
#732 := [trans #744 #745]: #731
#441 := [monotonicity #732 #730]: #440
#443 := [trans #441 #396]: #442
#674 := [monotonicity #443 #708 #693]: #682
#684 := [trans #674 #673]: #683
#397 := (iff #751 false)
#749 := (iff #751 #408)
#412 := (iff #755 false)
#748 := [rewrite]: #412
#747 := (iff #756 false)
#407 := [rewrite]: #747
#392 := [monotonicity #407 #748]: #749
#398 := [trans #392 #396]: #397
#686 := [monotonicity #398 #684]: #681
#678 := [trans #686 #676]: #677
#667 := [monotonicity #678]: #666
#665 := [trans #667 #669]: #666
#664 := [quant-inst]: #663
#670 := [mp #664 #665]: #679
[unit-resolution #670 #764 #200]: false
unsat
9ee8d0dc4ede7b68c19a265d2c4cda80156ee20b 331 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#38 := 3::int
#170 := -3::int
#173 := (f4 -3::int 3::int)
#176 := (= #173 0::int)
#189 := (not #176)
#39 := (- 3::int)
#40 := (f4 #39 3::int)
#41 := (= #40 0::int)
#42 := (not #41)
#192 := (iff #42 #189)
#179 := (= 0::int #173)
#184 := (not #179)
#190 := (iff #184 #189)
#187 := (iff #179 #176)
#188 := [rewrite]: #187
#191 := [monotonicity #188]: #190
#185 := (iff #42 #184)
#182 := (iff #41 #179)
#180 := (iff #176 #179)
#181 := [rewrite]: #180
#177 := (iff #41 #176)
#174 := (= #40 #173)
#171 := (= #39 -3::int)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#183 := [trans #178 #181]: #182
#186 := [monotonicity #183]: #185
#193 := [trans #186 #191]: #192
#169 := [asserted]: #42
#194 := [mp #169 #193]: #189
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#760 := (pattern #29)
#66 := -1::int
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#125 := (mod #67 #70)
#271 := (+ #29 #125)
#272 := (= #271 0::int)
#30 := (mod #8 #9)
#268 := (* -1::int #30)
#269 := (+ #29 #268)
#270 := (= #269 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#210 := (or #88 #92)
#211 := (not #210)
#99 := (>= #8 0::int)
#202 := (or #92 #99)
#203 := (not #202)
#217 := (or #203 #211)
#273 := (ite #217 #270 #272)
#267 := (= #29 0::int)
#12 := (= #8 0::int)
#274 := (ite #12 #267 #273)
#266 := (= #8 #29)
#13 := (= #9 0::int)
#275 := (ite #13 #266 #274)
#761 := (forall (vars (?v0 int) (?v1 int)) (:pat #760) #275)
#278 := (forall (vars (?v0 int) (?v1 int)) #275)
#764 := (iff #278 #761)
#762 := (iff #275 #275)
#763 := [refl]: #762
#765 := [quant-intro #763]: #764
#131 := (* -1::int #125)
#235 := (ite #217 #30 #131)
#238 := (ite #12 0::int #235)
#241 := (ite #13 #8 #238)
#244 := (= #29 #241)
#247 := (forall (vars (?v0 int) (?v1 int)) #244)
#279 := (iff #247 #278)
#276 := (iff #244 #275)
#277 := [rewrite]: #276
#280 := [quant-intro #277]: #279
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#151 := (ite #106 #30 #131)
#154 := (ite #12 0::int #151)
#157 := (ite #13 #8 #154)
#160 := (= #29 #157)
#163 := (forall (vars (?v0 int) (?v1 int)) #160)
#248 := (iff #163 #247)
#245 := (iff #160 #244)
#242 := (= #157 #241)
#239 := (= #154 #238)
#236 := (= #151 #235)
#220 := (iff #106 #217)
#214 := (or #211 #203)
#218 := (iff #214 #217)
#219 := [rewrite]: #218
#215 := (iff #106 #214)
#212 := (iff #103 #203)
#213 := [rewrite]: #212
#200 := (iff #96 #211)
#201 := [rewrite]: #200
#216 := [monotonicity #201 #213]: #215
#221 := [trans #216 #219]: #220
#237 := [monotonicity #221]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#198 := (~ #163 #163)
#195 := (~ #160 #160)
#208 := [refl]: #195
#199 := [nnf-pos #208]: #198
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#166 := (iff #37 #163)
#60 := (and #16 #18)
#63 := (or #17 #60)
#136 := (ite #63 #30 #131)
#139 := (ite #12 0::int #136)
#142 := (ite #13 #8 #139)
#145 := (= #29 #142)
#148 := (forall (vars (?v0 int) (?v1 int)) #145)
#164 := (iff #148 #163)
#161 := (iff #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#152 := (= #136 #151)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#153 := [monotonicity #108]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#149 := (iff #37 #148)
#146 := (iff #36 #145)
#143 := (= #35 #142)
#140 := (= #34 #139)
#137 := (= #33 #136)
#134 := (= #32 #131)
#128 := (- #125)
#132 := (= #128 #131)
#133 := [rewrite]: #132
#129 := (= #32 #128)
#126 := (= #31 #125)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#127 := [monotonicity #69 #72]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#138 := [monotonicity #65 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#167 := [trans #150 #165]: #166
#124 := [asserted]: #37
#168 := [mp #124 #167]: #163
#209 := [mp~ #168 #199]: #163
#250 := [mp #209 #249]: #247
#281 := [mp #250 #280]: #278
#766 := [mp #281 #765]: #761
#591 := (not #761)
#592 := (or #591 #176)
#339 := (* -1::int 3::int)
#424 := (* -1::int -3::int)
#425 := (mod #424 #339)
#426 := (+ #173 #425)
#417 := (= #426 0::int)
#428 := (mod -3::int 3::int)
#429 := (* -1::int #428)
#357 := (+ #173 #429)
#430 := (= #357 0::int)
#427 := (<= 3::int 0::int)
#431 := (<= -3::int 0::int)
#410 := (or #431 #427)
#745 := (not #410)
#747 := (>= -3::int 0::int)
#404 := (or #427 #747)
#534 := (not #404)
#741 := (or #534 #745)
#415 := (ite #741 #430 #417)
#416 := (= -3::int 0::int)
#748 := (ite #416 #176 #415)
#749 := (= -3::int #173)
#750 := (= 3::int 0::int)
#751 := (ite #750 #749 #748)
#593 := (or #591 #751)
#687 := (iff #593 #592)
#688 := (iff #592 #592)
#675 := [rewrite]: #688
#582 := (iff #751 #176)
#402 := (= #173 -3::int)
#686 := (ite false #402 #176)
#588 := (iff #686 #176)
#589 := [rewrite]: #588
#571 := (iff #751 #686)
#682 := (iff #748 #176)
#577 := (ite false #176 #176)
#685 := (iff #577 #176)
#587 := [rewrite]: #685
#578 := (iff #748 #577)
#694 := (iff #415 #176)
#1 := true
#689 := (ite true #176 #176)
#693 := (iff #689 #176)
#691 := [rewrite]: #693
#690 := (iff #415 #689)
#535 := (iff #417 #176)
#704 := (= #426 #173)
#719 := (+ #173 0::int)
#710 := (= #719 #173)
#705 := [rewrite]: #710
#703 := (= #426 #719)
#696 := (= #425 0::int)
#698 := (mod 3::int -3::int)
#701 := (= #698 0::int)
#695 := [rewrite]: #701
#699 := (= #425 #698)
#555 := (= #339 -3::int)
#556 := [rewrite]: #555
#713 := (= #424 3::int)
#554 := [rewrite]: #713
#700 := [monotonicity #554 #556]: #699
#702 := [trans #700 #695]: #696
#697 := [monotonicity #702]: #703
#533 := [trans #697 #705]: #704
#536 := [monotonicity #533]: #535
#712 := (iff #430 #176)
#706 := (= #357 #173)
#708 := (= #357 #719)
#718 := (= #429 0::int)
#438 := (* -1::int 0::int)
#432 := (= #438 0::int)
#714 := [rewrite]: #432
#716 := (= #429 #438)
#436 := (= #428 0::int)
#437 := [rewrite]: #436
#717 := [monotonicity #437]: #716
#715 := [trans #717 #714]: #718
#709 := [monotonicity #715]: #708
#711 := [trans #709 #705]: #706
#707 := [monotonicity #711]: #712
#725 := (iff #741 true)
#737 := (or true false)
#727 := (iff #737 true)
#449 := [rewrite]: #727
#724 := (iff #741 #737)
#446 := (iff #745 false)
#452 := (not true)
#723 := (iff #452 false)
#445 := [rewrite]: #723
#345 := (iff #745 #452)
#450 := (iff #410 true)
#740 := (iff #410 #737)
#744 := (iff #427 false)
#387 := [rewrite]: #744
#379 := (iff #431 true)
#739 := [rewrite]: #379
#726 := [monotonicity #739 #387]: #740
#451 := [trans #726 #449]: #450
#722 := [monotonicity #451]: #345
#720 := [trans #722 #445]: #446
#738 := (iff #534 true)
#734 := (not false)
#373 := (iff #734 true)
#736 := [rewrite]: #373
#729 := (iff #534 #734)
#732 := (iff #404 false)
#392 := (or false false)
#730 := (iff #392 false)
#731 := [rewrite]: #730
#393 := (iff #404 #392)
#728 := (iff #747 false)
#391 := [rewrite]: #728
#394 := [monotonicity #387 #391]: #393
#733 := [trans #394 #731]: #732
#735 := [monotonicity #733]: #729
#378 := [trans #735 #736]: #738
#721 := [monotonicity #378 #720]: #724
#435 := [trans #721 #449]: #725
#692 := [monotonicity #435 #707 #536]: #690
#576 := [trans #692 #691]: #694
#743 := (iff #416 false)
#403 := [rewrite]: #743
#537 := [monotonicity #403 #576]: #578
#683 := [trans #537 #587]: #682
#742 := (iff #749 #402)
#407 := [rewrite]: #742
#746 := (iff #750 false)
#752 := [rewrite]: #746
#586 := [monotonicity #752 #407 #683]: #571
#590 := [trans #586 #589]: #582
#684 := [monotonicity #590]: #687
#677 := [trans #684 #675]: #687
#594 := [quant-inst]: #593
#669 := [mp #594 #677]: #592
[unit-resolution #669 #766 #194]: false
unsat
ab1c3c43720ded895d2a82ffbaf56e6367dbc9b8 592 0
#2 := false
#11 := 0::int
decl f3 :: (-> int int int)
#39 := 1::int
decl f5 :: int
#38 := f5
#40 := (f3 f5 1::int)
#704 := (>= #40 0::int)
#752 := (= #40 0::int)
#753 := (= f5 0::int)
#591 := (not #753)
#493 := [hypothesis]: #591
#405 := (<= f5 0::int)
#416 := (>= f5 0::int)
#737 := (not #416)
#451 := (not #405)
#446 := (or #451 #737)
#537 := (not #446)
#69 := -1::int
#427 := (* -1::int f5)
#437 := (div #427 -1::int)
#717 := (* -1::int #437)
#715 := (+ #40 #717)
#720 := (= #715 0::int)
#428 := (div f5 1::int)
#432 := (* -1::int #428)
#411 := (+ #40 #432)
#746 := (= #411 0::int)
#711 := (ite #446 #746 #720)
#483 := (or #753 #711)
#712 := (ite #753 #752 #711)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#754 := (pattern #10)
#73 := (* -1::int #9)
#70 := (* -1::int #8)
#76 := (div #70 #73)
#257 := (* -1::int #76)
#258 := (+ #10 #257)
#259 := (= #258 0::int)
#21 := (div #8 #9)
#254 := (* -1::int #21)
#255 := (+ #10 #254)
#256 := (= #255 0::int)
#95 := (<= #9 0::int)
#91 := (<= #8 0::int)
#212 := (or #91 #95)
#213 := (not #212)
#102 := (>= #8 0::int)
#204 := (or #95 #102)
#205 := (not #204)
#219 := (or #205 #213)
#260 := (ite #219 #256 #259)
#253 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#261 := (ite #14 #253 #260)
#755 := (forall (vars (?v0 int) (?v1 int)) (:pat #754) #261)
#264 := (forall (vars (?v0 int) (?v1 int)) #261)
#758 := (iff #264 #755)
#756 := (iff #261 #261)
#757 := [refl]: #756
#759 := [quant-intro #757]: #758
#224 := (ite #219 #21 #76)
#227 := (ite #14 0::int #224)
#230 := (= #10 #227)
#233 := (forall (vars (?v0 int) (?v1 int)) #230)
#265 := (iff #233 #264)
#262 := (iff #230 #261)
#263 := [rewrite]: #262
#266 := [quant-intro #263]: #265
#103 := (not #102)
#96 := (not #95)
#106 := (and #96 #103)
#92 := (not #91)
#99 := (and #92 #96)
#109 := (or #99 #106)
#112 := (ite #109 #21 #76)
#115 := (ite #14 0::int #112)
#118 := (= #10 #115)
#121 := (forall (vars (?v0 int) (?v1 int)) #118)
#234 := (iff #121 #233)
#231 := (iff #118 #230)
#228 := (= #115 #227)
#225 := (= #112 #224)
#222 := (iff #109 #219)
#216 := (or #213 #205)
#220 := (iff #216 #219)
#221 := [rewrite]: #220
#217 := (iff #109 #216)
#214 := (iff #106 #205)
#215 := [rewrite]: #214
#202 := (iff #99 #213)
#203 := [rewrite]: #202
#218 := [monotonicity #203 #215]: #217
#223 := [trans #218 #221]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#208 := (~ #121 #121)
#206 := (~ #118 #118)
#207 := [refl]: #206
#209 := [nnf-pos #207]: #208
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#124 := (iff #28 #121)
#63 := (and #16 #18)
#66 := (or #17 #63)
#79 := (ite #66 #21 #76)
#82 := (ite #14 0::int #79)
#85 := (= #10 #82)
#88 := (forall (vars (?v0 int) (?v1 int)) #85)
#122 := (iff #88 #121)
#119 := (iff #85 #118)
#116 := (= #82 #115)
#113 := (= #79 #112)
#110 := (iff #66 #109)
#107 := (iff #63 #106)
#104 := (iff #18 #103)
#105 := [rewrite]: #104
#97 := (iff #16 #96)
#98 := [rewrite]: #97
#108 := [monotonicity #98 #105]: #107
#100 := (iff #17 #99)
#93 := (iff #15 #92)
#94 := [rewrite]: #93
#101 := [monotonicity #94 #98]: #100
#111 := [monotonicity #101 #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [monotonicity #117]: #119
#123 := [quant-intro #120]: #122
#89 := (iff #28 #88)
#86 := (iff #27 #85)
#83 := (= #26 #82)
#80 := (= #25 #79)
#77 := (= #24 #76)
#74 := (= #23 #73)
#75 := [rewrite]: #74
#71 := (= #22 #70)
#72 := [rewrite]: #71
#78 := [monotonicity #72 #75]: #77
#67 := (iff #20 #66)
#64 := (iff #19 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#81 := [monotonicity #68 #78]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#90 := [quant-intro #87]: #89
#125 := [trans #90 #123]: #124
#62 := [asserted]: #28
#126 := [mp #62 #125]: #121
#199 := [mp~ #126 #209]: #121
#236 := [mp #199 #235]: #233
#267 := [mp #236 #266]: #264
#760 := [mp #267 #759]: #755
#714 := (not #755)
#555 := (or #714 #712)
#426 := (* -1::int 1::int)
#418 := (div #427 #426)
#429 := (* -1::int #418)
#430 := (+ #40 #429)
#431 := (= #430 0::int)
#748 := (<= 1::int 0::int)
#535 := (or #405 #748)
#742 := (not #535)
#417 := (or #748 #416)
#749 := (not #417)
#750 := (or #749 #742)
#751 := (ite #750 #746 #431)
#747 := (= 1::int 0::int)
#743 := (or #753 #747)
#403 := (ite #743 #752 #751)
#556 := (or #714 #403)
#699 := (iff #556 #555)
#701 := (iff #555 #555)
#702 := [rewrite]: #701
#713 := (iff #403 #712)
#706 := (iff #751 #711)
#709 := (iff #431 #720)
#719 := (= #430 #715)
#718 := (= #429 #717)
#438 := (= #418 #437)
#726 := (= #426 -1::int)
#436 := [rewrite]: #726
#439 := [monotonicity #436]: #438
#433 := [monotonicity #439]: #718
#716 := [monotonicity #433]: #719
#710 := [monotonicity #716]: #709
#725 := (iff #750 #446)
#347 := (or #737 #451)
#447 := (iff #347 #446)
#721 := [rewrite]: #447
#723 := (iff #750 #347)
#452 := (iff #742 #451)
#728 := (iff #535 #405)
#380 := (or #405 false)
#741 := (iff #380 #405)
#727 := [rewrite]: #741
#740 := (iff #535 #380)
#395 := (iff #748 false)
#731 := [rewrite]: #395
#738 := [monotonicity #731]: #740
#450 := [trans #738 #727]: #728
#453 := [monotonicity #450]: #452
#739 := (iff #749 #737)
#736 := (iff #417 #416)
#732 := (or false #416)
#735 := (iff #732 #416)
#730 := [rewrite]: #735
#733 := (iff #417 #732)
#734 := [monotonicity #731]: #733
#374 := [trans #734 #730]: #736
#379 := [monotonicity #374]: #739
#724 := [monotonicity #379 #453]: #723
#722 := [trans #724 #721]: #725
#707 := [monotonicity #722 #710]: #706
#393 := (iff #743 #753)
#404 := (or #753 false)
#729 := (iff #404 #753)
#392 := [rewrite]: #729
#745 := (iff #743 #404)
#408 := (iff #747 false)
#744 := [rewrite]: #408
#388 := [monotonicity #744]: #745
#394 := [trans #388 #392]: #393
#708 := [monotonicity #394 #707]: #713
#700 := [monotonicity #708]: #699
#696 := [trans #700 #702]: #699
#557 := [quant-inst]: #556
#697 := [mp #557 #696]: #555
#548 := [unit-resolution #697 #760]: #712
#583 := (not #712)
#594 := (or #583 #753 #711)
#595 := [def-axiom]: #594
#484 := [unit-resolution #595 #548]: #483
#485 := [unit-resolution #484 #493]: #711
#684 := (not #746)
#692 := (>= #411 0::int)
#422 := (not #692)
decl f4 :: (-> int int int)
#42 := (f4 f5 1::int)
#600 := (>= #42 0::int)
#682 := (= #42 0::int)
#624 := (or #451 #737 #753)
#481 := (or #624 #753)
#599 := (not #624)
#491 := [hypothesis]: #599
#616 := (or #624 #405)
#617 := [def-axiom]: #616
#494 := [unit-resolution #617 #491]: #405
#613 := (or #624 #416)
#618 := [def-axiom]: #613
#476 := [unit-resolution #618 #491]: #416
#478 := (or #753 #451 #737)
#479 := [th-lemma]: #478
#480 := [unit-resolution #479 #476 #494 #493]: false
#482 := [lemma #480]: #481
#486 := [unit-resolution #482 #493]: #624
#488 := (or #599 #682)
#695 := (mod #427 -1::int)
#641 := (+ #42 #695)
#644 := (= #641 0::int)
#627 := (ite #624 #682 #644)
#29 := (f4 #8 #9)
#761 := (pattern #29)
#128 := (mod #70 #73)
#273 := (+ #29 #128)
#274 := (= #273 0::int)
#30 := (mod #8 #9)
#270 := (* -1::int #30)
#271 := (+ #29 #270)
#272 := (= #271 0::int)
#275 := (ite #219 #272 #274)
#269 := (= #29 0::int)
#276 := (ite #12 #269 #275)
#268 := (= #8 #29)
#277 := (ite #13 #268 #276)
#762 := (forall (vars (?v0 int) (?v1 int)) (:pat #761) #277)
#280 := (forall (vars (?v0 int) (?v1 int)) #277)
#765 := (iff #280 #762)
#763 := (iff #277 #277)
#764 := [refl]: #763
#766 := [quant-intro #764]: #765
#134 := (* -1::int #128)
#237 := (ite #219 #30 #134)
#240 := (ite #12 0::int #237)
#243 := (ite #13 #8 #240)
#246 := (= #29 #243)
#249 := (forall (vars (?v0 int) (?v1 int)) #246)
#281 := (iff #249 #280)
#278 := (iff #246 #277)
#279 := [rewrite]: #278
#282 := [quant-intro #279]: #281
#154 := (ite #109 #30 #134)
#157 := (ite #12 0::int #154)
#160 := (ite #13 #8 #157)
#163 := (= #29 #160)
#166 := (forall (vars (?v0 int) (?v1 int)) #163)
#250 := (iff #166 #249)
#247 := (iff #163 #246)
#244 := (= #160 #243)
#241 := (= #157 #240)
#238 := (= #154 #237)
#239 := [monotonicity #223]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [monotonicity #245]: #247
#251 := [quant-intro #248]: #250
#200 := (~ #166 #166)
#197 := (~ #163 #163)
#210 := [refl]: #197
#201 := [nnf-pos #210]: #200
#31 := (mod #22 #23)
#32 := (- #31)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#169 := (iff #37 #166)
#139 := (ite #66 #30 #134)
#142 := (ite #12 0::int #139)
#145 := (ite #13 #8 #142)
#148 := (= #29 #145)
#151 := (forall (vars (?v0 int) (?v1 int)) #148)
#167 := (iff #151 #166)
#164 := (iff #148 #163)
#161 := (= #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#156 := [monotonicity #111]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#152 := (iff #37 #151)
#149 := (iff #36 #148)
#146 := (= #35 #145)
#143 := (= #34 #142)
#140 := (= #33 #139)
#137 := (= #32 #134)
#131 := (- #128)
#135 := (= #131 #134)
#136 := [rewrite]: #135
#132 := (= #32 #131)
#129 := (= #31 #128)
#130 := [monotonicity #72 #75]: #129
#133 := [monotonicity #130]: #132
#138 := [trans #133 #136]: #137
#141 := [monotonicity #68 #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#170 := [trans #153 #168]: #169
#127 := [asserted]: #37
#171 := [mp #127 #170]: #166
#211 := [mp~ #171 #201]: #166
#252 := [mp #211 #251]: #249
#283 := [mp #252 #282]: #280
#767 := [mp #283 #766]: #762
#603 := (not #762)
#496 := (or #603 #627)
#670 := (mod #427 #426)
#667 := (+ #42 #670)
#669 := (= #667 0::int)
#693 := (mod f5 1::int)
#679 := (* -1::int #693)
#680 := (+ #42 #679)
#681 := (= #680 0::int)
#677 := (ite #750 #681 #669)
#671 := (ite #753 #682 #677)
#672 := (= f5 #42)
#673 := (ite #747 #672 #671)
#607 := (or #603 #673)
#609 := (iff #607 #496)
#610 := (iff #496 #496)
#611 := [rewrite]: #610
#601 := (iff #673 #627)
#629 := (or #446 #753)
#630 := (ite #629 #682 #644)
#622 := (iff #630 #627)
#625 := (iff #629 #624)
#626 := [rewrite]: #625
#628 := [monotonicity #626]: #622
#620 := (iff #673 #630)
#636 := (ite false #672 #630)
#623 := (iff #636 #630)
#619 := [rewrite]: #623
#631 := (iff #673 #636)
#634 := (iff #671 #630)
#647 := (ite #446 #682 #644)
#650 := (ite #753 #682 #647)
#632 := (iff #650 #630)
#633 := [rewrite]: #632
#640 := (iff #671 #650)
#648 := (iff #677 #647)
#645 := (iff #669 #644)
#642 := (= #667 #641)
#638 := (= #670 #695)
#639 := [monotonicity #436]: #638
#643 := [monotonicity #639]: #642
#646 := [monotonicity #643]: #645
#654 := (iff #681 #682)
#656 := (= #680 #42)
#661 := (+ #42 0::int)
#653 := (= #661 #42)
#655 := [rewrite]: #653
#666 := (= #680 #661)
#664 := (= #679 0::int)
#675 := (* -1::int 0::int)
#662 := (= #675 0::int)
#663 := [rewrite]: #662
#659 := (= #679 #675)
#674 := (= #693 0::int)
#668 := [rewrite]: #674
#660 := [monotonicity #668]: #659
#665 := [trans #660 #663]: #664
#652 := [monotonicity #665]: #666
#657 := [trans #652 #655]: #656
#658 := [monotonicity #657]: #654
#649 := [monotonicity #722 #658 #646]: #648
#651 := [monotonicity #649]: #640
#635 := [trans #651 #633]: #634
#637 := [monotonicity #744 #635]: #631
#621 := [trans #637 #619]: #620
#602 := [trans #621 #628]: #601
#614 := [monotonicity #602]: #609
#612 := [trans #614 #611]: #609
#608 := [quant-inst]: #607
#615 := [mp #608 #612]: #496
#487 := [unit-resolution #615 #767]: #627
#581 := (not #627)
#540 := (or #581 #599 #682)
#571 := [def-axiom]: #540
#477 := [unit-resolution #571 #487]: #488
#489 := [unit-resolution #477 #486]: #682
#582 := (not #682)
#396 := (or #582 #600)
#397 := [th-lemma]: #396
#398 := [unit-resolution #397 #489]: #600
#421 := (not #600)
#389 := (or #422 #421)
#542 := (+ f5 #432)
#541 := (= #542 0::int)
#1 := true
#60 := [true-axiom]: true
#515 := (or false #541)
#505 := [th-lemma]: #515
#495 := [unit-resolution #505 #60]: #541
#443 := (<= #542 0::int)
#420 := (not #443)
#185 := (* -1::int #42)
#184 := (* -1::int #40)
#186 := (+ #184 #185)
#187 := (+ f5 #186)
#341 := (<= #187 0::int)
#444 := (not #341)
#425 := (>= #187 0::int)
#703 := (<= #40 0::int)
#499 := (not #425)
#507 := [hypothesis]: #499
#461 := (or #753 #425)
#694 := (<= #411 0::int)
#504 := (not #694)
#605 := (<= #42 0::int)
#466 := (or #582 #605)
#468 := [th-lemma]: #466
#469 := [unit-resolution #468 #489]: #605
#503 := (not #605)
#490 := (or #503 #425 #504)
#510 := [hypothesis]: #605
#549 := (>= #542 0::int)
#497 := (not #541)
#498 := (or #497 #549)
#501 := [th-lemma]: #498
#502 := [unit-resolution #501 #495]: #549
#506 := [hypothesis]: #694
#500 := [th-lemma #507 #506 #502 #510]: false
#492 := [lemma #500]: #490
#470 := [unit-resolution #492 #469 #507]: #504
#471 := (or #684 #694)
#472 := [th-lemma]: #471
#473 := [unit-resolution #472 #470]: #684
#579 := (not #711)
#538 := (or #579 #537 #746)
#686 := [def-axiom]: #538
#474 := [unit-resolution #686 #473 #485]: #537
#698 := (or #446 #405)
#705 := [def-axiom]: #698
#467 := [unit-resolution #705 #474]: #405
#534 := (or #446 #416)
#536 := [def-axiom]: #534
#475 := [unit-resolution #536 #474]: #416
#460 := [unit-resolution #479 #475 #467 #493]: false
#462 := [lemma #460]: #461
#464 := [unit-resolution #462 #507]: #753
#463 := (or #591 #752)
#592 := (or #583 #591 #752)
#593 := [def-axiom]: #592
#465 := [unit-resolution #593 #548]: #463
#454 := [unit-resolution #465 #464]: #752
#688 := (not #752)
#455 := (or #688 #703)
#456 := [th-lemma]: #455
#448 := [unit-resolution #456 #454]: #703
#457 := (or #591 #416)
#458 := [th-lemma]: #457
#449 := [unit-resolution #458 #464]: #416
#598 := (or #624 #591)
#544 := [def-axiom]: #598
#459 := [unit-resolution #544 #464]: #624
#440 := [unit-resolution #477 #459]: #682
#441 := [unit-resolution #468 #440]: #605
#442 := [th-lemma #441 #507 #449 #448]: false
#434 := [lemma #442]: #425
#412 := (or #444 #499)
#188 := (= #187 0::int)
#191 := (not #188)
#41 := (* #40 1::int)
#43 := (+ #41 #42)
#44 := (= f5 #43)
#45 := (not #44)
#194 := (iff #45 #191)
#175 := (+ #40 #42)
#178 := (= f5 #175)
#181 := (not #178)
#192 := (iff #181 #191)
#189 := (iff #178 #188)
#190 := [rewrite]: #189
#193 := [monotonicity #190]: #192
#182 := (iff #45 #181)
#179 := (iff #44 #178)
#176 := (= #43 #175)
#173 := (= #41 #40)
#174 := [rewrite]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#195 := [trans #183 #193]: #194
#172 := [asserted]: #45
#196 := [mp #172 #195]: #191
#435 := (or #188 #444 #499)
#445 := [th-lemma]: #435
#414 := [unit-resolution #445 #196]: #412
#415 := [unit-resolution #414 #434]: #444
#406 := [hypothesis]: #600
#419 := [hypothesis]: #692
#423 := (or #420 #421 #341 #422)
#413 := [th-lemma]: #423
#424 := [unit-resolution #413 #419 #406 #415]: #420
#407 := (or #497 #443)
#409 := [th-lemma]: #407
#410 := [unit-resolution #409 #424 #495]: false
#391 := [lemma #410]: #389
#399 := [unit-resolution #391 #398]: #422
#400 := (or #684 #692)
#401 := [th-lemma]: #400
#390 := [unit-resolution #401 #399]: #684
#402 := [unit-resolution #686 #390 #485]: #537
#383 := [unit-resolution #705 #402]: #405
#385 := [unit-resolution #536 #402]: #416
#386 := [unit-resolution #479 #385 #383 #493]: false
#384 := [lemma #386]: #753
#387 := [unit-resolution #465 #384]: #752
#375 := (or #688 #704)
#377 := [th-lemma]: #375
#378 := [unit-resolution #377 #387]: #704
#381 := (or #591 #405)
#376 := [th-lemma]: #381
#382 := [unit-resolution #376 #384]: #405
#357 := [unit-resolution #544 #384]: #624
#361 := [unit-resolution #477 #357]: #682
#362 := [unit-resolution #397 #361]: #600
[th-lemma #362 #415 #382 #378]: false
unsat
0dff6836610ad24fd350792fdba18f67fffe78ae 353 0
#2 := false
#42 := 1::int
decl f4 :: (-> int int int)
#40 := 3::int
#172 := -5::int
#175 := (f4 -5::int 3::int)
#178 := (= #175 1::int)
#191 := (not #178)
#38 := 5::int
#39 := (- 5::int)
#41 := (f4 #39 3::int)
#43 := (= #41 1::int)
#44 := (not #43)
#194 := (iff #44 #191)
#181 := (= 1::int #175)
#186 := (not #181)
#192 := (iff #186 #191)
#189 := (iff #181 #178)
#190 := [rewrite]: #189
#193 := [monotonicity #190]: #192
#187 := (iff #44 #186)
#184 := (iff #43 #181)
#182 := (iff #178 #181)
#183 := [rewrite]: #182
#179 := (iff #43 #178)
#176 := (= #41 #175)
#173 := (= #39 -5::int)
#174 := [rewrite]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#185 := [trans #180 #183]: #184
#188 := [monotonicity #185]: #187
#195 := [trans #188 #193]: #194
#171 := [asserted]: #44
#196 := [mp #171 #195]: #191
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#761 := (pattern #29)
#11 := 0::int
#68 := -1::int
#72 := (* -1::int #9)
#69 := (* -1::int #8)
#127 := (mod #69 #72)
#273 := (+ #29 #127)
#274 := (= #273 0::int)
#30 := (mod #8 #9)
#270 := (* -1::int #30)
#271 := (+ #29 #270)
#272 := (= #271 0::int)
#94 := (<= #9 0::int)
#90 := (<= #8 0::int)
#212 := (or #90 #94)
#213 := (not #212)
#101 := (>= #8 0::int)
#204 := (or #94 #101)
#205 := (not #204)
#219 := (or #205 #213)
#275 := (ite #219 #272 #274)
#269 := (= #29 0::int)
#12 := (= #8 0::int)
#276 := (ite #12 #269 #275)
#268 := (= #8 #29)
#13 := (= #9 0::int)
#277 := (ite #13 #268 #276)
#762 := (forall (vars (?v0 int) (?v1 int)) (:pat #761) #277)
#280 := (forall (vars (?v0 int) (?v1 int)) #277)
#765 := (iff #280 #762)
#763 := (iff #277 #277)
#764 := [refl]: #763
#766 := [quant-intro #764]: #765
#133 := (* -1::int #127)
#237 := (ite #219 #30 #133)
#240 := (ite #12 0::int #237)
#243 := (ite #13 #8 #240)
#246 := (= #29 #243)
#249 := (forall (vars (?v0 int) (?v1 int)) #246)
#281 := (iff #249 #280)
#278 := (iff #246 #277)
#279 := [rewrite]: #278
#282 := [quant-intro #279]: #281
#102 := (not #101)
#95 := (not #94)
#105 := (and #95 #102)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#153 := (ite #108 #30 #133)
#156 := (ite #12 0::int #153)
#159 := (ite #13 #8 #156)
#162 := (= #29 #159)
#165 := (forall (vars (?v0 int) (?v1 int)) #162)
#250 := (iff #165 #249)
#247 := (iff #162 #246)
#244 := (= #159 #243)
#241 := (= #156 #240)
#238 := (= #153 #237)
#222 := (iff #108 #219)
#216 := (or #213 #205)
#220 := (iff #216 #219)
#221 := [rewrite]: #220
#217 := (iff #108 #216)
#214 := (iff #105 #205)
#215 := [rewrite]: #214
#202 := (iff #98 #213)
#203 := [rewrite]: #202
#218 := [monotonicity #203 #215]: #217
#223 := [trans #218 #221]: #222
#239 := [monotonicity #223]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [monotonicity #245]: #247
#251 := [quant-intro #248]: #250
#200 := (~ #165 #165)
#197 := (~ #162 #162)
#210 := [refl]: #197
#201 := [nnf-pos #210]: #200
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#168 := (iff #37 #165)
#62 := (and #16 #18)
#65 := (or #17 #62)
#138 := (ite #65 #30 #133)
#141 := (ite #12 0::int #138)
#144 := (ite #13 #8 #141)
#147 := (= #29 #144)
#150 := (forall (vars (?v0 int) (?v1 int)) #147)
#166 := (iff #150 #165)
#163 := (iff #147 #162)
#160 := (= #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#109 := (iff #65 #108)
#106 := (iff #62 #105)
#103 := (iff #18 #102)
#104 := [rewrite]: #103
#96 := (iff #16 #95)
#97 := [rewrite]: #96
#107 := [monotonicity #97 #104]: #106
#99 := (iff #17 #98)
#92 := (iff #15 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#155 := [monotonicity #110]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [quant-intro #164]: #166
#151 := (iff #37 #150)
#148 := (iff #36 #147)
#145 := (= #35 #144)
#142 := (= #34 #141)
#139 := (= #33 #138)
#136 := (= #32 #133)
#130 := (- #127)
#134 := (= #130 #133)
#135 := [rewrite]: #134
#131 := (= #32 #130)
#128 := (= #31 #127)
#73 := (= #23 #72)
#74 := [rewrite]: #73
#70 := (= #22 #69)
#71 := [rewrite]: #70
#129 := [monotonicity #71 #74]: #128
#132 := [monotonicity #129]: #131
#137 := [trans #132 #135]: #136
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#140 := [monotonicity #67 #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#169 := [trans #152 #167]: #168
#126 := [asserted]: #37
#170 := [mp #126 #169]: #165
#211 := [mp~ #170 #201]: #165
#252 := [mp #211 #251]: #249
#283 := [mp #252 #282]: #280
#767 := [mp #283 #766]: #762
#668 := (not #762)
#675 := (or #668 #178)
#341 := (* -1::int 3::int)
#425 := (* -1::int -5::int)
#426 := (mod #425 #341)
#427 := (+ #175 #426)
#418 := (= #427 0::int)
#429 := (mod -5::int 3::int)
#430 := (* -1::int #429)
#431 := (+ #175 #430)
#428 := (= #431 0::int)
#432 := (<= 3::int 0::int)
#411 := (<= -5::int 0::int)
#746 := (or #411 #432)
#748 := (not #746)
#405 := (>= -5::int 0::int)
#535 := (or #432 #405)
#742 := (not #535)
#416 := (or #742 #748)
#417 := (ite #416 #428 #418)
#749 := (= #175 0::int)
#750 := (= -5::int 0::int)
#751 := (ite #750 #749 #417)
#752 := (= -5::int #175)
#747 := (= 3::int 0::int)
#753 := (ite #747 #752 #751)
#659 := (or #668 #753)
#662 := (iff #659 #675)
#664 := (iff #675 #675)
#665 := [rewrite]: #664
#673 := (iff #753 #178)
#744 := (= #175 -5::int)
#681 := (ite false #744 #178)
#671 := (iff #681 #178)
#672 := [rewrite]: #671
#677 := (iff #753 #681)
#679 := (iff #751 #178)
#676 := (ite false #749 #178)
#667 := (iff #676 #178)
#669 := [rewrite]: #667
#678 := (iff #751 #676)
#685 := (iff #417 #178)
#572 := -2::int
#587 := (= #175 -2::int)
#1 := true
#592 := (ite true #178 #587)
#595 := (iff #592 #178)
#688 := [rewrite]: #595
#593 := (iff #417 #592)
#583 := (iff #418 #587)
#537 := 2::int
#578 := (+ 2::int #175)
#683 := (= #578 0::int)
#589 := (iff #683 #587)
#590 := [rewrite]: #589
#684 := (iff #418 #683)
#686 := (= #427 #578)
#692 := (+ #175 2::int)
#579 := (= #692 #578)
#538 := [rewrite]: #579
#695 := (= #427 #692)
#693 := (= #426 2::int)
#703 := -3::int
#705 := (mod 5::int -3::int)
#690 := (= #705 2::int)
#691 := [rewrite]: #690
#534 := (= #426 #705)
#704 := (= #341 -3::int)
#698 := [rewrite]: #704
#696 := (= #425 5::int)
#697 := [rewrite]: #696
#536 := [monotonicity #697 #698]: #534
#694 := [trans #536 #691]: #693
#577 := [monotonicity #694]: #695
#588 := [trans #577 #538]: #686
#687 := [monotonicity #588]: #684
#591 := [trans #687 #590]: #583
#701 := (iff #428 #178)
#707 := (+ -1::int #175)
#555 := (= #707 0::int)
#699 := (iff #555 #178)
#700 := [rewrite]: #699
#556 := (iff #428 #555)
#708 := (= #431 #707)
#710 := (+ #175 -1::int)
#712 := (= #710 #707)
#713 := [rewrite]: #712
#711 := (= #431 #710)
#720 := (= #430 -1::int)
#718 := (* -1::int 1::int)
#719 := (= #718 -1::int)
#716 := [rewrite]: #719
#433 := (= #430 #718)
#439 := (= #429 1::int)
#717 := [rewrite]: #439
#715 := [monotonicity #717]: #433
#709 := [trans #715 #716]: #720
#706 := [monotonicity #709]: #711
#714 := [trans #706 #713]: #708
#557 := [monotonicity #714]: #556
#702 := [trans #557 #700]: #701
#437 := (iff #416 true)
#727 := (or true false)
#451 := (iff #727 true)
#452 := [rewrite]: #451
#726 := (iff #416 #727)
#725 := (iff #748 false)
#723 := (not true)
#447 := (iff #723 false)
#721 := [rewrite]: #447
#724 := (iff #748 #723)
#453 := (iff #746 true)
#728 := (iff #746 #727)
#729 := (iff #432 false)
#392 := [rewrite]: #729
#738 := (iff #411 true)
#741 := [rewrite]: #738
#450 := [monotonicity #741 #392]: #728
#347 := [trans #450 #452]: #453
#446 := [monotonicity #347]: #724
#722 := [trans #446 #721]: #725
#380 := (iff #742 true)
#736 := (not false)
#739 := (iff #736 true)
#379 := [rewrite]: #739
#374 := (iff #742 #736)
#735 := (iff #535 false)
#395 := (or false false)
#733 := (iff #395 false)
#734 := [rewrite]: #733
#731 := (iff #535 #395)
#393 := (iff #405 false)
#394 := [rewrite]: #393
#732 := [monotonicity #392 #394]: #731
#730 := [trans #732 #734]: #735
#737 := [monotonicity #730]: #374
#740 := [trans #737 #379]: #380
#436 := [monotonicity #740 #722]: #726
#438 := [trans #436 #452]: #437
#594 := [monotonicity #438 #702 #591]: #593
#689 := [trans #594 #688]: #685
#745 := (iff #750 false)
#388 := [rewrite]: #745
#670 := [monotonicity #388 #689]: #678
#680 := [trans #670 #669]: #679
#408 := (iff #752 #744)
#404 := [rewrite]: #408
#743 := (iff #747 false)
#403 := [rewrite]: #743
#682 := [monotonicity #403 #404 #680]: #677
#674 := [trans #682 #672]: #673
#663 := [monotonicity #674]: #662
#661 := [trans #663 #665]: #662
#660 := [quant-inst]: #659
#666 := [mp #660 #661]: #675
[unit-resolution #666 #767 #196]: false
unsat
f7d21861165159375bc45e6364e84fc0183b7f2c 549 0
#2 := false
#11 := 0::int
decl f3 :: (-> int int int)
#39 := 3::int
decl f5 :: int
#38 := f5
#40 := (f3 f5 3::int)
#703 := (>= #40 0::int)
#754 := (= #40 0::int)
#750 := (= f5 0::int)
#690 := (not #750)
#562 := [hypothesis]: #690
#745 := (>= f5 0::int)
#751 := (<= f5 0::int)
#453 := (not #751)
#377 := (not #745)
#456 := (or #377 #453)
#706 := (not #456)
#185 := -3::int
#69 := -1::int
#430 := (* -1::int f5)
#450 := (div #430 -3::int)
#725 := (* -1::int #450)
#440 := (+ #40 #725)
#720 := (= #440 0::int)
#434 := (div f5 3::int)
#431 := (* -1::int #434)
#435 := (+ #40 #431)
#414 := (= #435 0::int)
#718 := (ite #456 #414 #720)
#564 := (or #750 #718)
#723 := (ite #750 #754 #718)
#9 := (:var 0 int)
#8 := (:var 1 int)
#10 := (f3 #8 #9)
#757 := (pattern #10)
#73 := (* -1::int #9)
#70 := (* -1::int #8)
#76 := (div #70 #73)
#259 := (* -1::int #76)
#260 := (+ #10 #259)
#261 := (= #260 0::int)
#21 := (div #8 #9)
#256 := (* -1::int #21)
#257 := (+ #10 #256)
#258 := (= #257 0::int)
#95 := (<= #9 0::int)
#91 := (<= #8 0::int)
#214 := (or #91 #95)
#215 := (not #214)
#102 := (>= #8 0::int)
#206 := (or #95 #102)
#207 := (not #206)
#221 := (or #207 #215)
#262 := (ite #221 #258 #261)
#255 := (= #10 0::int)
#13 := (= #9 0::int)
#12 := (= #8 0::int)
#14 := (or #12 #13)
#263 := (ite #14 #255 #262)
#758 := (forall (vars (?v0 int) (?v1 int)) (:pat #757) #263)
#266 := (forall (vars (?v0 int) (?v1 int)) #263)
#761 := (iff #266 #758)
#759 := (iff #263 #263)
#760 := [refl]: #759
#762 := [quant-intro #760]: #761
#226 := (ite #221 #21 #76)
#229 := (ite #14 0::int #226)
#232 := (= #10 #229)
#235 := (forall (vars (?v0 int) (?v1 int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#103 := (not #102)
#96 := (not #95)
#106 := (and #96 #103)
#92 := (not #91)
#99 := (and #92 #96)
#109 := (or #99 #106)
#112 := (ite #109 #21 #76)
#115 := (ite #14 0::int #112)
#118 := (= #10 #115)
#121 := (forall (vars (?v0 int) (?v1 int)) #118)
#236 := (iff #121 #235)
#233 := (iff #118 #232)
#230 := (= #115 #229)
#227 := (= #112 #226)
#224 := (iff #109 #221)
#218 := (or #215 #207)
#222 := (iff #218 #221)
#223 := [rewrite]: #222
#219 := (iff #109 #218)
#216 := (iff #106 #207)
#217 := [rewrite]: #216
#204 := (iff #99 #215)
#205 := [rewrite]: #204
#220 := [monotonicity #205 #217]: #219
#225 := [trans #220 #223]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#210 := (~ #121 #121)
#208 := (~ #118 #118)
#209 := [refl]: #208
#211 := [nnf-pos #209]: #210
#23 := (- #9)
#22 := (- #8)
#24 := (div #22 #23)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#26 := (ite #14 0::int #25)
#27 := (= #10 #26)
#28 := (forall (vars (?v0 int) (?v1 int)) #27)
#124 := (iff #28 #121)
#63 := (and #16 #18)
#66 := (or #17 #63)
#79 := (ite #66 #21 #76)
#82 := (ite #14 0::int #79)
#85 := (= #10 #82)
#88 := (forall (vars (?v0 int) (?v1 int)) #85)
#122 := (iff #88 #121)
#119 := (iff #85 #118)
#116 := (= #82 #115)
#113 := (= #79 #112)
#110 := (iff #66 #109)
#107 := (iff #63 #106)
#104 := (iff #18 #103)
#105 := [rewrite]: #104
#97 := (iff #16 #96)
#98 := [rewrite]: #97
#108 := [monotonicity #98 #105]: #107
#100 := (iff #17 #99)
#93 := (iff #15 #92)
#94 := [rewrite]: #93
#101 := [monotonicity #94 #98]: #100
#111 := [monotonicity #101 #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [monotonicity #117]: #119
#123 := [quant-intro #120]: #122
#89 := (iff #28 #88)
#86 := (iff #27 #85)
#83 := (= #26 #82)
#80 := (= #25 #79)
#77 := (= #24 #76)
#74 := (= #23 #73)
#75 := [rewrite]: #74
#71 := (= #22 #70)
#72 := [rewrite]: #71
#78 := [monotonicity #72 #75]: #77
#67 := (iff #20 #66)
#64 := (iff #19 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#81 := [monotonicity #68 #78]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#90 := [quant-intro #87]: #89
#125 := [trans #90 #123]: #124
#62 := [asserted]: #28
#126 := [mp #62 #125]: #121
#201 := [mp~ #126 #211]: #121
#238 := [mp #201 #237]: #235
#269 := [mp #238 #268]: #266
#763 := [mp #269 #762]: #758
#714 := (not #758)
#709 := (or #714 #723)
#429 := (* -1::int 3::int)
#421 := (div #430 #429)
#432 := (* -1::int #421)
#433 := (+ #40 #432)
#361 := (= #433 0::int)
#749 := (<= 3::int 0::int)
#408 := (or #751 #749)
#538 := (not #408)
#419 := (or #749 #745)
#420 := (not #419)
#752 := (or #420 #538)
#753 := (ite #752 #414 #361)
#755 := (= 3::int 0::int)
#756 := (or #750 #755)
#746 := (ite #756 #754 #753)
#710 := (or #714 #746)
#716 := (iff #710 #709)
#717 := (iff #709 #709)
#558 := [rewrite]: #717
#712 := (iff #746 #723)
#722 := (iff #753 #718)
#721 := (iff #361 #720)
#441 := (= #433 #440)
#729 := (= #432 #725)
#724 := (= #421 #450)
#727 := (= #429 -3::int)
#449 := [rewrite]: #727
#728 := [monotonicity #449]: #724
#439 := [monotonicity #728]: #729
#442 := [monotonicity #439]: #441
#436 := [monotonicity #442]: #721
#349 := (iff #752 #456)
#454 := (iff #538 #453)
#730 := (iff #408 #751)
#382 := (or #751 false)
#741 := (iff #382 #751)
#744 := [rewrite]: #741
#383 := (iff #408 #382)
#397 := (iff #749 false)
#398 := [rewrite]: #397
#743 := [monotonicity #398]: #383
#731 := [trans #743 #744]: #730
#455 := [monotonicity #731]: #454
#740 := (iff #420 #377)
#733 := (iff #419 #745)
#734 := (or false #745)
#737 := (iff #734 #745)
#738 := [rewrite]: #737
#735 := (iff #419 #734)
#736 := [monotonicity #398]: #735
#739 := [trans #736 #738]: #733
#742 := [monotonicity #739]: #740
#726 := [monotonicity #742 #455]: #349
#719 := [monotonicity #726 #436]: #722
#395 := (iff #756 #750)
#747 := (or #750 false)
#391 := (iff #747 #750)
#732 := [rewrite]: #391
#407 := (iff #756 #747)
#406 := (iff #755 false)
#411 := [rewrite]: #406
#748 := [monotonicity #411]: #407
#396 := [trans #748 #732]: #395
#713 := [monotonicity #396 #719]: #712
#711 := [monotonicity #713]: #716
#559 := [trans #711 #558]: #716
#715 := [quant-inst]: #710
#560 := [mp #715 #559]: #709
#563 := [unit-resolution #560 #763]: #723
#687 := (not #723)
#592 := (or #687 #750 #718)
#593 := [def-axiom]: #592
#565 := [unit-resolution #593 #563]: #564
#566 := [unit-resolution #565 #562]: #718
#540 := (mod #430 -3::int)
decl f4 :: (-> int int int)
#42 := (f4 f5 3::int)
#685 := (+ #42 #540)
#676 := (= #685 0::int)
#708 := (mod f5 3::int)
#692 := (* -1::int #708)
#679 := (+ #42 #692)
#681 := (= #679 0::int)
#678 := (ite #456 #681 #676)
#525 := (or #750 #678)
#670 := (= #42 0::int)
#665 := (ite #750 #670 #678)
#29 := (f4 #8 #9)
#764 := (pattern #29)
#128 := (mod #70 #73)
#275 := (+ #29 #128)
#276 := (= #275 0::int)
#30 := (mod #8 #9)
#272 := (* -1::int #30)
#273 := (+ #29 #272)
#274 := (= #273 0::int)
#277 := (ite #221 #274 #276)
#271 := (= #29 0::int)
#278 := (ite #12 #271 #277)
#270 := (= #8 #29)
#279 := (ite #13 #270 #278)
#765 := (forall (vars (?v0 int) (?v1 int)) (:pat #764) #279)
#282 := (forall (vars (?v0 int) (?v1 int)) #279)
#768 := (iff #282 #765)
#766 := (iff #279 #279)
#767 := [refl]: #766
#769 := [quant-intro #767]: #768
#134 := (* -1::int #128)
#239 := (ite #221 #30 #134)
#242 := (ite #12 0::int #239)
#245 := (ite #13 #8 #242)
#248 := (= #29 #245)
#251 := (forall (vars (?v0 int) (?v1 int)) #248)
#283 := (iff #251 #282)
#280 := (iff #248 #279)
#281 := [rewrite]: #280
#284 := [quant-intro #281]: #283
#154 := (ite #109 #30 #134)
#157 := (ite #12 0::int #154)
#160 := (ite #13 #8 #157)
#163 := (= #29 #160)
#166 := (forall (vars (?v0 int) (?v1 int)) #163)
#252 := (iff #166 #251)
#249 := (iff #163 #248)
#246 := (= #160 #245)
#243 := (= #157 #242)
#240 := (= #154 #239)
#241 := [monotonicity #225]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [quant-intro #250]: #252
#202 := (~ #166 #166)
#199 := (~ #163 #163)
#212 := [refl]: #199
#203 := [nnf-pos #212]: #202
#31 := (mod #22 #23)
#32 := (- #31)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#169 := (iff #37 #166)
#139 := (ite #66 #30 #134)
#142 := (ite #12 0::int #139)
#145 := (ite #13 #8 #142)
#148 := (= #29 #145)
#151 := (forall (vars (?v0 int) (?v1 int)) #148)
#167 := (iff #151 #166)
#164 := (iff #148 #163)
#161 := (= #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#156 := [monotonicity #111]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#152 := (iff #37 #151)
#149 := (iff #36 #148)
#146 := (= #35 #145)
#143 := (= #34 #142)
#140 := (= #33 #139)
#137 := (= #32 #134)
#131 := (- #128)
#135 := (= #131 #134)
#136 := [rewrite]: #135
#132 := (= #32 #131)
#129 := (= #31 #128)
#130 := [monotonicity #72 #75]: #129
#133 := [monotonicity #130]: #132
#138 := [trans #133 #136]: #137
#141 := [monotonicity #68 #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#170 := [trans #153 #168]: #169
#127 := [asserted]: #37
#171 := [mp #127 #170]: #166
#213 := [mp~ #171 #203]: #166
#254 := [mp #213 #253]: #251
#285 := [mp #254 #284]: #282
#770 := [mp #285 #769]: #765
#660 := (not #765)
#657 := (or #660 #665)
#598 := (mod #430 #429)
#691 := (+ #42 #598)
#688 := (= #691 0::int)
#673 := (ite #752 #681 #688)
#672 := (ite #750 #670 #673)
#682 := (= f5 #42)
#683 := (ite #755 #682 #672)
#661 := (or #660 #683)
#642 := (iff #661 #657)
#645 := (iff #657 #657)
#646 := [rewrite]: #645
#658 := (iff #683 #665)
#668 := (ite false #682 #665)
#655 := (iff #668 #665)
#656 := [rewrite]: #655
#664 := (iff #683 #668)
#666 := (iff #672 #665)
#662 := (iff #673 #678)
#677 := (iff #688 #676)
#674 := (= #691 #685)
#684 := (= #598 #540)
#680 := [monotonicity #449]: #684
#675 := [monotonicity #680]: #674
#671 := [monotonicity #675]: #677
#663 := [monotonicity #726 #671]: #662
#667 := [monotonicity #663]: #666
#669 := [monotonicity #411 #667]: #664
#659 := [trans #669 #656]: #658
#644 := [monotonicity #659]: #642
#647 := [trans #644 #646]: #642
#641 := [quant-inst]: #661
#648 := [mp #641 #647]: #657
#621 := [unit-resolution #648 #770]: #665
#622 := (not #665)
#627 := (or #622 #750 #678)
#628 := [def-axiom]: #627
#526 := [unit-resolution #628 #621]: #525
#527 := [unit-resolution #526 #562]: #678
#696 := (not #718)
#654 := (not #678)
#491 := (or #706 #654 #696)
#652 := (>= #679 0::int)
#567 := [hypothesis]: #678
#568 := [hypothesis]: #456
#632 := (or #654 #706 #681)
#633 := [def-axiom]: #632
#569 := [unit-resolution #633 #568 #567]: #681
#637 := (not #681)
#493 := (or #637 #652)
#495 := [th-lemma]: #493
#496 := [unit-resolution #495 #569]: #652
#539 := (>= #435 0::int)
#549 := [hypothesis]: #718
#697 := (or #696 #706 #414)
#695 := [def-axiom]: #697
#550 := [unit-resolution #695 #568 #549]: #414
#581 := (not #414)
#494 := (or #581 #539)
#497 := [th-lemma]: #494
#479 := [unit-resolution #497 #550]: #539
#187 := (* -1::int #42)
#186 := (* -3::int #40)
#188 := (+ #186 #187)
#189 := (+ f5 #188)
#343 := (<= #189 0::int)
#481 := (not #343)
#428 := (>= #189 0::int)
#557 := (not #428)
#573 := [hypothesis]: #557
#533 := (or #750 #428)
#554 := (or #706 #428 #654 #696)
#651 := (<= #679 0::int)
#570 := (or #637 #651)
#571 := [th-lemma]: #570
#572 := [unit-resolution #571 #569]: #651
#615 := (* -3::int #434)
#618 := (+ #615 #692)
#619 := (+ f5 #618)
#601 := (>= #619 0::int)
#614 := (= #619 0::int)
#1 := true
#60 := [true-axiom]: true
#534 := (or false #614)
#535 := [th-lemma]: #534
#542 := [unit-resolution #535 #60]: #614
#544 := (not #614)
#545 := (or #544 #601)
#546 := [th-lemma]: #545
#548 := [unit-resolution #546 #542]: #601
#537 := (<= #435 0::int)
#551 := (or #581 #537)
#552 := [th-lemma]: #551
#553 := [unit-resolution #552 #550]: #537
#536 := [th-lemma #553 #548 #573 #572]: false
#524 := [lemma #536]: #554
#529 := [unit-resolution #524 #527 #573 #566]: #706
#704 := (or #456 #745)
#705 := [def-axiom]: #704
#530 := [unit-resolution #705 #529]: #745
#699 := (or #456 #751)
#700 := [def-axiom]: #699
#531 := [unit-resolution #700 #529]: #751
#374 := (or #750 #453 #377)
#532 := [th-lemma]: #374
#528 := [unit-resolution #532 #531 #530 #562]: false
#512 := [lemma #528]: #533
#515 := [unit-resolution #512 #573]: #750
#519 := (or #690 #745)
#521 := [th-lemma]: #519
#522 := [unit-resolution #521 #515]: #745
#649 := (<= #42 0::int)
#520 := (or #690 #670)
#623 := (or #622 #690 #670)
#624 := [def-axiom]: #623
#523 := [unit-resolution #624 #621]: #520
#511 := [unit-resolution #523 #515]: #670
#629 := (not #670)
#514 := (or #629 #649)
#516 := [th-lemma]: #514
#517 := [unit-resolution #516 #511]: #649
#702 := (<= #40 0::int)
#513 := (or #690 #754)
#575 := (or #687 #690 #754)
#590 := [def-axiom]: #575
#518 := [unit-resolution #590 #563]: #513
#508 := [unit-resolution #518 #515]: #754
#586 := (not #754)
#498 := (or #586 #702)
#500 := [th-lemma]: #498
#501 := [unit-resolution #500 #508]: #702
#504 := [th-lemma #501 #517 #573 #522]: false
#505 := [lemma #504]: #428
#484 := (or #481 #557)
#190 := (= #189 0::int)
#193 := (not #190)
#41 := (* #40 3::int)
#43 := (+ #41 #42)
#44 := (= f5 #43)
#45 := (not #44)
#196 := (iff #45 #193)
#173 := (* 3::int #40)
#176 := (+ #173 #42)
#179 := (= f5 #176)
#182 := (not #179)
#194 := (iff #182 #193)
#191 := (iff #179 #190)
#192 := [rewrite]: #191
#195 := [monotonicity #192]: #194
#183 := (iff #45 #182)
#180 := (iff #44 #179)
#177 := (= #43 #176)
#174 := (= #41 #173)
#175 := [rewrite]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#197 := [trans #184 #195]: #196
#172 := [asserted]: #45
#198 := [mp #172 #197]: #193
#482 := (or #190 #481 #557)
#483 := [th-lemma]: #482
#485 := [unit-resolution #483 #198]: #484
#486 := [unit-resolution #485 #505]: #481
#509 := (<= #619 0::int)
#487 := (or #544 #509)
#488 := [th-lemma]: #487
#489 := [unit-resolution #488 #542]: #509
#490 := [th-lemma #489 #486 #479 #496]: false
#480 := [lemma #490]: #491
#502 := [unit-resolution #480 #527 #566]: #706
#510 := [unit-resolution #705 #502]: #745
#503 := [unit-resolution #700 #502]: #751
#506 := [unit-resolution #532 #503 #510 #562]: false
#507 := [lemma #506]: #750
#492 := [unit-resolution #518 #507]: #754
#469 := (or #586 #703)
#471 := [th-lemma]: #469
#472 := [unit-resolution #471 #492]: #703
#650 := (>= #42 0::int)
#473 := [unit-resolution #523 #507]: #670
#474 := (or #629 #650)
#475 := [th-lemma]: #474
#476 := [unit-resolution #475 #473]: #650
#477 := (or #690 #751)
#470 := [th-lemma]: #477
#478 := [unit-resolution #470 #507]: #751
[th-lemma #478 #476 #486 #472]: false
unsat
2131919aacf2b81143bdcdf048ab7c7b571f4dab 350 0
#2 := false
#68 := -1::int
decl f4 :: (-> int int int)
#174 := -3::int
#177 := (f4 -1::int -3::int)
#180 := (= #177 -1::int)
#193 := (not #180)
#38 := 1::int
#39 := (- 1::int)
#40 := 3::int
#41 := (- 3::int)
#42 := (f4 #39 #41)
#43 := (= #42 #39)
#44 := (not #43)
#196 := (iff #44 #193)
#183 := (= -1::int #177)
#188 := (not #183)
#194 := (iff #188 #193)
#191 := (iff #183 #180)
#192 := [rewrite]: #191
#195 := [monotonicity #192]: #194
#189 := (iff #44 #188)
#186 := (iff #43 #183)
#184 := (iff #180 #183)
#185 := [rewrite]: #184
#181 := (iff #43 #180)
#172 := (= #39 -1::int)
#173 := [rewrite]: #172
#178 := (= #42 #177)
#175 := (= #41 -3::int)
#176 := [rewrite]: #175
#179 := [monotonicity #173 #176]: #178
#182 := [monotonicity #179 #173]: #181
#187 := [trans #182 #185]: #186
#190 := [monotonicity #187]: #189
#197 := [trans #190 #195]: #196
#171 := [asserted]: #44
#198 := [mp #171 #197]: #193
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#763 := (pattern #29)
#11 := 0::int
#72 := (* -1::int #9)
#69 := (* -1::int #8)
#127 := (mod #69 #72)
#275 := (+ #29 #127)
#276 := (= #275 0::int)
#30 := (mod #8 #9)
#272 := (* -1::int #30)
#273 := (+ #29 #272)
#274 := (= #273 0::int)
#94 := (<= #9 0::int)
#90 := (<= #8 0::int)
#214 := (or #90 #94)
#215 := (not #214)
#101 := (>= #8 0::int)
#206 := (or #94 #101)
#207 := (not #206)
#221 := (or #207 #215)
#277 := (ite #221 #274 #276)
#271 := (= #29 0::int)
#12 := (= #8 0::int)
#278 := (ite #12 #271 #277)
#270 := (= #8 #29)
#13 := (= #9 0::int)
#279 := (ite #13 #270 #278)
#764 := (forall (vars (?v0 int) (?v1 int)) (:pat #763) #279)
#282 := (forall (vars (?v0 int) (?v1 int)) #279)
#767 := (iff #282 #764)
#765 := (iff #279 #279)
#766 := [refl]: #765
#768 := [quant-intro #766]: #767
#133 := (* -1::int #127)
#239 := (ite #221 #30 #133)
#242 := (ite #12 0::int #239)
#245 := (ite #13 #8 #242)
#248 := (= #29 #245)
#251 := (forall (vars (?v0 int) (?v1 int)) #248)
#283 := (iff #251 #282)
#280 := (iff #248 #279)
#281 := [rewrite]: #280
#284 := [quant-intro #281]: #283
#102 := (not #101)
#95 := (not #94)
#105 := (and #95 #102)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#153 := (ite #108 #30 #133)
#156 := (ite #12 0::int #153)
#159 := (ite #13 #8 #156)
#162 := (= #29 #159)
#165 := (forall (vars (?v0 int) (?v1 int)) #162)
#252 := (iff #165 #251)
#249 := (iff #162 #248)
#246 := (= #159 #245)
#243 := (= #156 #242)
#240 := (= #153 #239)
#224 := (iff #108 #221)
#218 := (or #215 #207)
#222 := (iff #218 #221)
#223 := [rewrite]: #222
#219 := (iff #108 #218)
#216 := (iff #105 #207)
#217 := [rewrite]: #216
#204 := (iff #98 #215)
#205 := [rewrite]: #204
#220 := [monotonicity #205 #217]: #219
#225 := [trans #220 #223]: #224
#241 := [monotonicity #225]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [quant-intro #250]: #252
#202 := (~ #165 #165)
#199 := (~ #162 #162)
#212 := [refl]: #199
#203 := [nnf-pos #212]: #202
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#168 := (iff #37 #165)
#62 := (and #16 #18)
#65 := (or #17 #62)
#138 := (ite #65 #30 #133)
#141 := (ite #12 0::int #138)
#144 := (ite #13 #8 #141)
#147 := (= #29 #144)
#150 := (forall (vars (?v0 int) (?v1 int)) #147)
#166 := (iff #150 #165)
#163 := (iff #147 #162)
#160 := (= #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#109 := (iff #65 #108)
#106 := (iff #62 #105)
#103 := (iff #18 #102)
#104 := [rewrite]: #103
#96 := (iff #16 #95)
#97 := [rewrite]: #96
#107 := [monotonicity #97 #104]: #106
#99 := (iff #17 #98)
#92 := (iff #15 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#155 := [monotonicity #110]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [quant-intro #164]: #166
#151 := (iff #37 #150)
#148 := (iff #36 #147)
#145 := (= #35 #144)
#142 := (= #34 #141)
#139 := (= #33 #138)
#136 := (= #32 #133)
#130 := (- #127)
#134 := (= #130 #133)
#135 := [rewrite]: #134
#131 := (= #32 #130)
#128 := (= #31 #127)
#73 := (= #23 #72)
#74 := [rewrite]: #73
#70 := (= #22 #69)
#71 := [rewrite]: #70
#129 := [monotonicity #71 #74]: #128
#132 := [monotonicity #129]: #131
#137 := [trans #132 #135]: #136
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#140 := [monotonicity #67 #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#169 := [trans #152 #167]: #168
#126 := [asserted]: #37
#170 := [mp #126 #169]: #165
#213 := [mp~ #170 #203]: #165
#254 := [mp #213 #253]: #251
#285 := [mp #254 #284]: #282
#769 := [mp #285 #768]: #764
#684 := (not #764)
#673 := (or #684 #180)
#343 := (* -1::int -3::int)
#427 := (* -1::int -1::int)
#428 := (mod #427 #343)
#429 := (+ #177 #428)
#420 := (= #429 0::int)
#431 := (mod -1::int -3::int)
#432 := (* -1::int #431)
#433 := (+ #177 #432)
#430 := (= #433 0::int)
#434 := (<= -3::int 0::int)
#413 := (<= -1::int 0::int)
#748 := (or #413 #434)
#750 := (not #748)
#407 := (>= -1::int 0::int)
#537 := (or #434 #407)
#744 := (not #537)
#418 := (or #744 #750)
#419 := (ite #418 #430 #420)
#751 := (= #177 0::int)
#752 := (= -1::int 0::int)
#753 := (ite #752 #751 #419)
#754 := (= -3::int 0::int)
#749 := (ite #754 #183 #753)
#674 := (or #684 #749)
#676 := (iff #674 #673)
#677 := (iff #673 #673)
#661 := [rewrite]: #677
#683 := (iff #749 #180)
#672 := (ite false #180 #180)
#681 := (iff #672 #180)
#682 := [rewrite]: #681
#669 := (iff #749 #672)
#678 := (iff #753 #180)
#596 := (ite false #751 #180)
#687 := (iff #596 #180)
#691 := [rewrite]: #687
#597 := (iff #753 #596)
#594 := (iff #419 #180)
#728 := 2::int
#558 := (= #177 2::int)
#589 := (ite false #558 #180)
#585 := (iff #589 #180)
#593 := [rewrite]: #585
#591 := (iff #419 #589)
#689 := (iff #420 #180)
#694 := (+ 1::int #177)
#540 := (= #694 0::int)
#685 := (iff #540 #180)
#686 := [rewrite]: #685
#688 := (iff #420 #540)
#580 := (= #429 #694)
#693 := (+ #177 1::int)
#697 := (= #693 #694)
#579 := [rewrite]: #697
#695 := (= #429 #693)
#539 := (= #428 1::int)
#706 := (mod 1::int 3::int)
#536 := (= #706 1::int)
#538 := [rewrite]: #536
#700 := (= #428 #706)
#699 := (= #343 3::int)
#705 := [rewrite]: #699
#704 := (= #427 1::int)
#698 := [rewrite]: #704
#707 := [monotonicity #698 #705]: #700
#692 := [trans #707 #538]: #539
#696 := [monotonicity #692]: #695
#581 := [trans #696 #579]: #580
#590 := [monotonicity #581]: #688
#574 := [trans #590 #686]: #689
#702 := (iff #430 #558)
#720 := -2::int
#713 := (+ -2::int #177)
#710 := (= #713 0::int)
#559 := (iff #710 #558)
#701 := [rewrite]: #559
#716 := (iff #430 #710)
#714 := (= #433 #713)
#722 := (+ #177 -2::int)
#708 := (= #722 #713)
#709 := [rewrite]: #708
#711 := (= #433 #722)
#721 := (= #432 -2::int)
#440 := (* -1::int 2::int)
#435 := (= #440 -2::int)
#717 := [rewrite]: #435
#441 := (= #432 #440)
#438 := (= #431 2::int)
#439 := [rewrite]: #438
#719 := [monotonicity #439]: #441
#718 := [trans #719 #717]: #721
#712 := [monotonicity #718]: #711
#715 := [trans #712 #709]: #714
#557 := [monotonicity #715]: #716
#703 := [trans #557 #701]: #702
#727 := (iff #418 false)
#725 := (or false false)
#449 := (iff #725 false)
#723 := [rewrite]: #449
#726 := (iff #418 #725)
#455 := (iff #750 false)
#1 := true
#735 := (not true)
#732 := (iff #735 false)
#738 := [rewrite]: #732
#453 := (iff #750 #735)
#730 := (iff #748 true)
#382 := (or true true)
#743 := (iff #382 true)
#729 := [rewrite]: #743
#742 := (iff #748 #382)
#746 := (iff #434 true)
#406 := [rewrite]: #746
#741 := (iff #413 true)
#381 := [rewrite]: #741
#740 := [monotonicity #381 #406]: #742
#452 := [trans #740 #729]: #730
#454 := [monotonicity #452]: #453
#349 := [trans #454 #738]: #455
#376 := (iff #744 false)
#736 := (iff #744 #735)
#733 := (iff #537 true)
#731 := (or true false)
#396 := (iff #731 true)
#397 := [rewrite]: #396
#394 := (iff #537 #731)
#747 := (iff #407 false)
#390 := [rewrite]: #747
#395 := [monotonicity #406 #390]: #394
#734 := [trans #395 #397]: #733
#737 := [monotonicity #734]: #736
#739 := [trans #737 #738]: #376
#448 := [monotonicity #739 #349]: #726
#724 := [trans #448 #723]: #727
#592 := [monotonicity #724 #703 #574]: #591
#595 := [trans #592 #593]: #594
#405 := (iff #752 false)
#410 := [rewrite]: #405
#690 := [monotonicity #410 #595]: #597
#680 := [trans #690 #691]: #678
#755 := (iff #754 false)
#745 := [rewrite]: #755
#671 := [monotonicity #745 #192 #680]: #669
#679 := [trans #671 #682]: #683
#670 := [monotonicity #679]: #676
#662 := [trans #670 #661]: #676
#675 := [quant-inst]: #674
#664 := [mp #675 #662]: #673
[unit-resolution #664 #769 #198]: false
unsat
f185b775c0ed207acb3897bf916bd950213b79f9 319 0
#2 := false
#11 := 0::int
decl f4 :: (-> int int int)
#170 := -3::int
#173 := (f4 -3::int -3::int)
#176 := (= #173 0::int)
#189 := (not #176)
#38 := 3::int
#39 := (- 3::int)
#40 := (f4 #39 #39)
#41 := (= #40 0::int)
#42 := (not #41)
#192 := (iff #42 #189)
#179 := (= 0::int #173)
#184 := (not #179)
#190 := (iff #184 #189)
#187 := (iff #179 #176)
#188 := [rewrite]: #187
#191 := [monotonicity #188]: #190
#185 := (iff #42 #184)
#182 := (iff #41 #179)
#180 := (iff #176 #179)
#181 := [rewrite]: #180
#177 := (iff #41 #176)
#174 := (= #40 #173)
#171 := (= #39 -3::int)
#172 := [rewrite]: #171
#175 := [monotonicity #172 #172]: #174
#178 := [monotonicity #175]: #177
#183 := [trans #178 #181]: #182
#186 := [monotonicity #183]: #185
#193 := [trans #186 #191]: #192
#169 := [asserted]: #42
#194 := [mp #169 #193]: #189
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#760 := (pattern #29)
#66 := -1::int
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#125 := (mod #67 #70)
#271 := (+ #29 #125)
#272 := (= #271 0::int)
#30 := (mod #8 #9)
#268 := (* -1::int #30)
#269 := (+ #29 #268)
#270 := (= #269 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#210 := (or #88 #92)
#211 := (not #210)
#99 := (>= #8 0::int)
#202 := (or #92 #99)
#203 := (not #202)
#217 := (or #203 #211)
#273 := (ite #217 #270 #272)
#267 := (= #29 0::int)
#12 := (= #8 0::int)
#274 := (ite #12 #267 #273)
#266 := (= #8 #29)
#13 := (= #9 0::int)
#275 := (ite #13 #266 #274)
#761 := (forall (vars (?v0 int) (?v1 int)) (:pat #760) #275)
#278 := (forall (vars (?v0 int) (?v1 int)) #275)
#764 := (iff #278 #761)
#762 := (iff #275 #275)
#763 := [refl]: #762
#765 := [quant-intro #763]: #764
#131 := (* -1::int #125)
#235 := (ite #217 #30 #131)
#238 := (ite #12 0::int #235)
#241 := (ite #13 #8 #238)
#244 := (= #29 #241)
#247 := (forall (vars (?v0 int) (?v1 int)) #244)
#279 := (iff #247 #278)
#276 := (iff #244 #275)
#277 := [rewrite]: #276
#280 := [quant-intro #277]: #279
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#151 := (ite #106 #30 #131)
#154 := (ite #12 0::int #151)
#157 := (ite #13 #8 #154)
#160 := (= #29 #157)
#163 := (forall (vars (?v0 int) (?v1 int)) #160)
#248 := (iff #163 #247)
#245 := (iff #160 #244)
#242 := (= #157 #241)
#239 := (= #154 #238)
#236 := (= #151 #235)
#220 := (iff #106 #217)
#214 := (or #211 #203)
#218 := (iff #214 #217)
#219 := [rewrite]: #218
#215 := (iff #106 #214)
#212 := (iff #103 #203)
#213 := [rewrite]: #212
#200 := (iff #96 #211)
#201 := [rewrite]: #200
#216 := [monotonicity #201 #213]: #215
#221 := [trans #216 #219]: #220
#237 := [monotonicity #221]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#198 := (~ #163 #163)
#195 := (~ #160 #160)
#208 := [refl]: #195
#199 := [nnf-pos #208]: #198
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#166 := (iff #37 #163)
#60 := (and #16 #18)
#63 := (or #17 #60)
#136 := (ite #63 #30 #131)
#139 := (ite #12 0::int #136)
#142 := (ite #13 #8 #139)
#145 := (= #29 #142)
#148 := (forall (vars (?v0 int) (?v1 int)) #145)
#164 := (iff #148 #163)
#161 := (iff #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#152 := (= #136 #151)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#153 := [monotonicity #108]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#149 := (iff #37 #148)
#146 := (iff #36 #145)
#143 := (= #35 #142)
#140 := (= #34 #139)
#137 := (= #33 #136)
#134 := (= #32 #131)
#128 := (- #125)
#132 := (= #128 #131)
#133 := [rewrite]: #132
#129 := (= #32 #128)
#126 := (= #31 #125)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#127 := [monotonicity #69 #72]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#138 := [monotonicity #65 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#167 := [trans #150 #165]: #166
#124 := [asserted]: #37
#168 := [mp #124 #167]: #163
#209 := [mp~ #168 #199]: #163
#250 := [mp #209 #249]: #247
#281 := [mp #250 #280]: #278
#766 := [mp #281 #765]: #761
#537 := (not #761)
#685 := (or #537 #176)
#339 := (* -1::int -3::int)
#424 := (mod #339 #339)
#425 := (+ #173 #424)
#426 := (= #425 0::int)
#417 := (mod -3::int -3::int)
#428 := (* -1::int #417)
#429 := (+ #173 #428)
#357 := (= #429 0::int)
#430 := (<= -3::int 0::int)
#427 := (or #430 #430)
#431 := (not #427)
#410 := (>= -3::int 0::int)
#745 := (or #430 #410)
#747 := (not #745)
#404 := (or #747 #431)
#534 := (ite #404 #357 #426)
#741 := (= -3::int 0::int)
#415 := (ite #741 #176 #534)
#416 := (= -3::int #173)
#748 := (ite #741 #416 #415)
#587 := (or #537 #748)
#683 := (iff #587 #685)
#571 := (iff #685 #685)
#586 := [rewrite]: #571
#577 := (iff #748 #176)
#746 := (= #173 -3::int)
#692 := (ite false #746 #176)
#694 := (iff #692 #176)
#576 := [rewrite]: #694
#693 := (iff #748 #692)
#689 := (iff #415 #176)
#695 := (ite false #176 #176)
#703 := (iff #695 #176)
#697 := [rewrite]: #703
#535 := (iff #415 #695)
#704 := (iff #534 #176)
#696 := (iff #534 #695)
#700 := (iff #426 #176)
#698 := (= #425 #173)
#438 := (+ #173 0::int)
#432 := (= #438 #173)
#714 := [rewrite]: #432
#555 := (= #425 #438)
#713 := (= #424 0::int)
#705 := (mod 3::int 3::int)
#712 := (= #705 0::int)
#707 := [rewrite]: #712
#706 := (= #424 #705)
#709 := (= #339 3::int)
#710 := [rewrite]: #709
#711 := [monotonicity #710 #710]: #706
#554 := [trans #711 #707]: #713
#556 := [monotonicity #554]: #555
#699 := [trans #556 #714]: #698
#701 := [monotonicity #699]: #700
#719 := (iff #357 #176)
#718 := (= #429 #173)
#716 := (= #429 #438)
#436 := (= #428 0::int)
#720 := (* -1::int 0::int)
#725 := (= #720 0::int)
#435 := [rewrite]: #725
#724 := (= #428 #720)
#445 := (= #417 0::int)
#446 := [rewrite]: #445
#721 := [monotonicity #446]: #724
#437 := [trans #721 #435]: #436
#717 := [monotonicity #437]: #716
#715 := [trans #717 #714]: #718
#708 := [monotonicity #715]: #719
#722 := (iff #404 false)
#449 := (or false false)
#452 := (iff #449 false)
#345 := [rewrite]: #452
#450 := (iff #404 #449)
#726 := (iff #431 false)
#1 := true
#394 := (not true)
#732 := (iff #394 false)
#733 := [rewrite]: #732
#737 := (iff #431 #394)
#379 := (iff #427 true)
#735 := (or true true)
#738 := (iff #735 true)
#378 := [rewrite]: #738
#373 := (iff #427 #735)
#742 := (iff #430 true)
#402 := [rewrite]: #742
#736 := [monotonicity #402 #402]: #373
#739 := [trans #736 #378]: #379
#740 := [monotonicity #739]: #737
#727 := [trans #740 #733]: #726
#734 := (iff #747 false)
#730 := (iff #747 #394)
#392 := (iff #745 true)
#403 := (or true false)
#728 := (iff #403 true)
#391 := [rewrite]: #728
#744 := (iff #745 #403)
#407 := (iff #410 false)
#743 := [rewrite]: #407
#387 := [monotonicity #402 #743]: #744
#393 := [trans #387 #391]: #392
#731 := [monotonicity #393]: #730
#729 := [trans #731 #733]: #734
#451 := [monotonicity #729 #727]: #450
#723 := [trans #451 #345]: #722
#702 := [monotonicity #723 #708 #701]: #696
#533 := [trans #702 #697]: #704
#749 := (iff #741 false)
#750 := [rewrite]: #749
#536 := [monotonicity #750 #533]: #535
#690 := [trans #536 #697]: #689
#751 := (iff #416 #746)
#752 := [rewrite]: #751
#691 := [monotonicity #750 #752 #690]: #693
#578 := [trans #691 #576]: #577
#686 := [monotonicity #578]: #683
#588 := [trans #686 #586]: #683
#682 := [quant-inst]: #587
#589 := [mp #682 #588]: #685
[unit-resolution #589 #766 #194]: false
unsat
b8a677f41acfea6ca1bd28f53fd89f2c10758abc 75 0
#2 := false
#8 := 0::int
decl f3 :: int
#9 := f3
#32 := -1::int
#33 := (* -1::int f3)
#45 := (>= f3 0::int)
#52 := (ite #45 f3 #33)
#73 := (* -1::int #52)
#81 := (+ f3 #73)
#90 := (<= #81 0::int)
#76 := (= f3 #52)
#71 := (+ #33 #73)
#80 := (<= #71 0::int)
#77 := (= #33 #52)
#46 := (not #45)
#82 := [hypothesis]: #46
#74 := (or #45 #77)
#75 := [def-axiom]: #74
#83 := [unit-resolution #75 #82]: #77
#84 := (not #77)
#85 := (or #84 #80)
#86 := [th-lemma]: #85
#87 := [unit-resolution #86 #83]: #80
#61 := (>= #52 0::int)
#65 := (not #61)
#11 := (- f3)
#10 := (< f3 0::int)
#12 := (ite #10 #11 f3)
#13 := (<= 0::int #12)
#14 := (not #13)
#68 := (iff #14 #65)
#36 := (ite #10 #33 f3)
#39 := (<= 0::int #36)
#42 := (not #39)
#66 := (iff #42 #65)
#63 := (iff #39 #61)
#57 := (<= 0::int #52)
#60 := (iff #57 #61)
#62 := [rewrite]: #60
#58 := (iff #39 #57)
#55 := (= #36 #52)
#49 := (ite #46 #33 f3)
#53 := (= #49 #52)
#54 := [rewrite]: #53
#50 := (= #36 #49)
#47 := (iff #10 #46)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#43 := (iff #14 #42)
#40 := (iff #13 #39)
#37 := (= #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#69 := [trans #44 #67]: #68
#31 := [asserted]: #14
#70 := [mp #31 #69]: #65
#88 := [th-lemma #82 #70 #87]: false
#89 := [lemma #88]: #45
#78 := (or #46 #76)
#79 := [def-axiom]: #78
#92 := [unit-resolution #79 #89]: #76
#93 := (not #76)
#94 := (or #93 #90)
#95 := [th-lemma]: #94
#96 := [unit-resolution #95 #92]: #90
[th-lemma #89 #70 #96]: false
unsat
957272aa2f77e61687a16c7aa490ba2664908958 132 0
#2 := false
#9 := 0::int
decl f3 :: int
#8 := f3
#66 := (>= f3 0::int)
#67 := (not #66)
#34 := -1::int
#35 := (* -1::int f3)
#73 := (ite #66 f3 #35)
#102 := (= f3 #73)
#130 := (not #102)
#14 := (= f3 0::int)
#82 := (= #73 0::int)
#124 := (iff #82 #14)
#122 := (iff #14 #82)
#121 := [hypothesis]: #102
#123 := [monotonicity #121]: #122
#125 := [symm #123]: #124
#131 := (or #82 #130)
#60 := (not #14)
#99 := (not #82)
#126 := (iff #99 #60)
#127 := [monotonicity #125]: #126
#119 := [hypothesis]: #99
#128 := [mp #119 #127]: #60
#112 := (or #14 #82)
#89 := (iff #60 #82)
#11 := (- f3)
#10 := (< f3 0::int)
#12 := (ite #10 #11 f3)
#13 := (= #12 0::int)
#15 := (iff #13 #14)
#16 := (not #15)
#94 := (iff #16 #89)
#38 := (ite #10 #35 f3)
#44 := (= 0::int #38)
#61 := (iff #44 #60)
#92 := (iff #61 #89)
#86 := (iff #82 #60)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #61 #86)
#84 := (iff #44 #82)
#78 := (= 0::int #73)
#81 := (iff #78 #82)
#83 := [rewrite]: #81
#79 := (iff #44 #78)
#76 := (= #38 #73)
#70 := (ite #67 #35 f3)
#74 := (= #70 #73)
#75 := [rewrite]: #74
#71 := (= #38 #70)
#68 := (iff #10 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#77 := [trans #72 #75]: #76
#80 := [monotonicity #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#64 := (iff #16 #61)
#52 := (iff #14 #44)
#57 := (not #52)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #16 #57)
#55 := (iff #15 #52)
#49 := (iff #44 #14)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #15 #49)
#47 := (iff #13 #44)
#41 := (= #38 0::int)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #13 #41)
#39 := (= #12 #38)
#36 := (= #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#95 := [trans #65 #93]: #94
#33 := [asserted]: #16
#96 := [mp #33 #95]: #89
#97 := (not #89)
#110 := (or #14 #82 #97)
#111 := [def-axiom]: #110
#113 := [unit-resolution #111 #96]: #112
#120 := [unit-resolution #113 #119]: #14
#129 := [unit-resolution #120 #128]: false
#132 := [lemma #129]: #131
#133 := [unit-resolution #132 #121]: #82
#135 := [mp #133 #125]: #14
#108 := (or #60 #99)
#106 := (or #60 #99 #97)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #96]: #108
#134 := [unit-resolution #109 #133]: #60
#136 := [unit-resolution #134 #135]: false
#137 := [lemma #136]: #130
#104 := (or #67 #102)
#105 := [def-axiom]: #104
#143 := [unit-resolution #105 #137]: #67
#138 := (= #35 0::int)
#147 := (not #138)
#157 := (iff #147 #99)
#155 := (iff #138 #82)
#103 := (= #35 #73)
#100 := (or #66 #103)
#101 := [def-axiom]: #100
#154 := [unit-resolution #101 #143]: #103
#156 := [monotonicity #154]: #155
#158 := [monotonicity #156]: #157
#139 := (<= #35 0::int)
#145 := (not #139)
#142 := [hypothesis]: #139
#144 := [th-lemma #143 #142]: false
#146 := [lemma #144]: #145
#148 := (or #147 #139)
#149 := [th-lemma]: #148
#153 := [unit-resolution #149 #146]: #147
#159 := [mp #153 #158]: #99
#160 := [unit-resolution #113 #159]: #14
#161 := (or #60 #66)
#162 := [th-lemma]: #161
[unit-resolution #162 #160 #143]: false
unsat
9485d306079aa8cdc08952543a8ac86391d45fc0 103 0
#2 := false
#8 := 0::int
decl f3 :: int
#9 := f3
#34 := -1::int
#35 := (* -1::int f3)
#112 := (* -1::int #35)
#113 := (+ f3 #112)
#115 := (>= #113 0::int)
#111 := (= f3 #35)
#61 := (>= f3 0::int)
#68 := (ite #61 f3 #35)
#118 := (= #68 #35)
#96 := (= #35 #68)
#62 := (not #61)
#107 := [hypothesis]: #61
#73 := (= f3 #68)
#97 := (or #62 #73)
#98 := [def-axiom]: #97
#108 := [unit-resolution #98 #107]: #73
#95 := (not #73)
#101 := (or #62 #95)
#83 := (iff #62 #73)
#12 := (- f3)
#11 := (< f3 0::int)
#13 := (ite #11 #12 f3)
#14 := (= #13 f3)
#10 := (<= 0::int f3)
#15 := (iff #10 #14)
#16 := (not #15)
#88 := (iff #16 #83)
#55 := (not #10)
#38 := (ite #11 #35 f3)
#44 := (= f3 #38)
#56 := (iff #44 #55)
#86 := (iff #56 #83)
#80 := (iff #73 #62)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #56 #80)
#78 := (iff #55 #62)
#76 := (iff #10 #61)
#77 := [rewrite]: #76
#79 := [monotonicity #77]: #78
#74 := (iff #44 #73)
#71 := (= #38 #68)
#65 := (ite #62 #35 f3)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #38 #65)
#63 := (iff #11 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#75 := [monotonicity #72]: #74
#82 := [monotonicity #75 #79]: #81
#87 := [trans #82 #85]: #86
#59 := (iff #16 #56)
#49 := (iff #10 #44)
#52 := (not #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #16 #52)
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#41 := (= #38 f3)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #14 #41)
#39 := (= #13 #38)
#36 := (= #12 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#89 := [trans #60 #87]: #88
#33 := [asserted]: #16
#90 := [mp #33 #89]: #83
#93 := (not #83)
#91 := (or #62 #95 #93)
#100 := [def-axiom]: #91
#102 := [unit-resolution #100 #90]: #101
#109 := [unit-resolution #102 #108 #107]: false
#110 := [lemma #109]: #62
#99 := (or #61 #96)
#94 := [def-axiom]: #99
#116 := [unit-resolution #94 #110]: #96
#119 := [symm #116]: #118
#105 := (or #61 #73)
#103 := (or #61 #73 #93)
#104 := [def-axiom]: #103
#106 := [unit-resolution #104 #90]: #105
#117 := [unit-resolution #106 #110]: #73
#120 := [trans #117 #119]: #111
#121 := (not #111)
#122 := (or #121 #115)
#123 := [th-lemma]: #122
#124 := [unit-resolution #123 #120]: #115
[th-lemma #110 #124]: false
unsat
fc9f250b0540aecbc3a008bfe364829a1228d272 347 0
#2 := false
#183 := -2::int
decl f4 :: (-> int int int)
#177 := -3::int
#174 := -5::int
#180 := (f4 -5::int -3::int)
#186 := (= #180 -2::int)
#189 := (not #186)
#43 := 2::int
#44 := (- 2::int)
#40 := 3::int
#41 := (- 3::int)
#38 := 5::int
#39 := (- 5::int)
#42 := (f4 #39 #41)
#45 := (= #42 #44)
#46 := (not #45)
#190 := (iff #46 #189)
#187 := (iff #45 #186)
#184 := (= #44 -2::int)
#185 := [rewrite]: #184
#181 := (= #42 #180)
#178 := (= #41 -3::int)
#179 := [rewrite]: #178
#175 := (= #39 -5::int)
#176 := [rewrite]: #175
#182 := [monotonicity #176 #179]: #181
#188 := [monotonicity #182 #185]: #187
#191 := [monotonicity #188]: #190
#173 := [asserted]: #46
#194 := [mp #173 #191]: #189
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#758 := (pattern #29)
#11 := 0::int
#70 := -1::int
#74 := (* -1::int #9)
#71 := (* -1::int #8)
#129 := (mod #71 #74)
#269 := (+ #29 #129)
#270 := (= #269 0::int)
#30 := (mod #8 #9)
#266 := (* -1::int #30)
#267 := (+ #29 #266)
#268 := (= #267 0::int)
#96 := (<= #9 0::int)
#92 := (<= #8 0::int)
#208 := (or #92 #96)
#209 := (not #208)
#103 := (>= #8 0::int)
#200 := (or #96 #103)
#201 := (not #200)
#215 := (or #201 #209)
#271 := (ite #215 #268 #270)
#265 := (= #29 0::int)
#12 := (= #8 0::int)
#272 := (ite #12 #265 #271)
#264 := (= #8 #29)
#13 := (= #9 0::int)
#273 := (ite #13 #264 #272)
#759 := (forall (vars (?v0 int) (?v1 int)) (:pat #758) #273)
#276 := (forall (vars (?v0 int) (?v1 int)) #273)
#762 := (iff #276 #759)
#760 := (iff #273 #273)
#761 := [refl]: #760
#763 := [quant-intro #761]: #762
#135 := (* -1::int #129)
#233 := (ite #215 #30 #135)
#236 := (ite #12 0::int #233)
#239 := (ite #13 #8 #236)
#242 := (= #29 #239)
#245 := (forall (vars (?v0 int) (?v1 int)) #242)
#277 := (iff #245 #276)
#274 := (iff #242 #273)
#275 := [rewrite]: #274
#278 := [quant-intro #275]: #277
#104 := (not #103)
#97 := (not #96)
#107 := (and #97 #104)
#93 := (not #92)
#100 := (and #93 #97)
#110 := (or #100 #107)
#155 := (ite #110 #30 #135)
#158 := (ite #12 0::int #155)
#161 := (ite #13 #8 #158)
#164 := (= #29 #161)
#167 := (forall (vars (?v0 int) (?v1 int)) #164)
#246 := (iff #167 #245)
#243 := (iff #164 #242)
#240 := (= #161 #239)
#237 := (= #158 #236)
#234 := (= #155 #233)
#218 := (iff #110 #215)
#212 := (or #209 #201)
#216 := (iff #212 #215)
#217 := [rewrite]: #216
#213 := (iff #110 #212)
#210 := (iff #107 #201)
#211 := [rewrite]: #210
#198 := (iff #100 #209)
#199 := [rewrite]: #198
#214 := [monotonicity #199 #211]: #213
#219 := [trans #214 #217]: #218
#235 := [monotonicity #219]: #234
#238 := [monotonicity #235]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [quant-intro #244]: #246
#196 := (~ #167 #167)
#192 := (~ #164 #164)
#206 := [refl]: #192
#197 := [nnf-pos #206]: #196
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#170 := (iff #37 #167)
#64 := (and #16 #18)
#67 := (or #17 #64)
#140 := (ite #67 #30 #135)
#143 := (ite #12 0::int #140)
#146 := (ite #13 #8 #143)
#149 := (= #29 #146)
#152 := (forall (vars (?v0 int) (?v1 int)) #149)
#168 := (iff #152 #167)
#165 := (iff #149 #164)
#162 := (= #146 #161)
#159 := (= #143 #158)
#156 := (= #140 #155)
#111 := (iff #67 #110)
#108 := (iff #64 #107)
#105 := (iff #18 #104)
#106 := [rewrite]: #105
#98 := (iff #16 #97)
#99 := [rewrite]: #98
#109 := [monotonicity #99 #106]: #108
#101 := (iff #17 #100)
#94 := (iff #15 #93)
#95 := [rewrite]: #94
#102 := [monotonicity #95 #99]: #101
#112 := [monotonicity #102 #109]: #111
#157 := [monotonicity #112]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#153 := (iff #37 #152)
#150 := (iff #36 #149)
#147 := (= #35 #146)
#144 := (= #34 #143)
#141 := (= #33 #140)
#138 := (= #32 #135)
#132 := (- #129)
#136 := (= #132 #135)
#137 := [rewrite]: #136
#133 := (= #32 #132)
#130 := (= #31 #129)
#75 := (= #23 #74)
#76 := [rewrite]: #75
#72 := (= #22 #71)
#73 := [rewrite]: #72
#131 := [monotonicity #73 #76]: #130
#134 := [monotonicity #131]: #133
#139 := [trans #134 #137]: #138
#68 := (iff #20 #67)
#65 := (iff #19 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#142 := [monotonicity #69 #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [quant-intro #151]: #153
#171 := [trans #154 #169]: #170
#128 := [asserted]: #37
#172 := [mp #128 #171]: #167
#207 := [mp~ #172 #197]: #167
#248 := [mp #207 #247]: #245
#279 := [mp #248 #278]: #276
#764 := [mp #279 #763]: #759
#669 := (not #759)
#670 := (or #669 #186)
#337 := (* -1::int -3::int)
#422 := (* -1::int -5::int)
#423 := (mod #422 #337)
#424 := (+ #180 #423)
#415 := (= #424 0::int)
#426 := (mod -5::int -3::int)
#427 := (* -1::int #426)
#355 := (+ #180 #427)
#428 := (= #355 0::int)
#425 := (<= -3::int 0::int)
#429 := (<= -5::int 0::int)
#408 := (or #429 #425)
#743 := (not #408)
#745 := (>= -5::int 0::int)
#402 := (or #425 #745)
#532 := (not #402)
#739 := (or #532 #743)
#413 := (ite #739 #428 #415)
#414 := (= #180 0::int)
#746 := (= -5::int 0::int)
#747 := (ite #746 #414 #413)
#748 := (= -5::int #180)
#749 := (= -3::int 0::int)
#744 := (ite #749 #748 #747)
#671 := (or #669 #744)
#672 := (iff #671 #670)
#657 := (iff #670 #670)
#659 := [rewrite]: #657
#679 := (iff #744 #186)
#405 := (= #180 -5::int)
#666 := (ite false #405 #186)
#678 := (iff #666 #186)
#674 := [rewrite]: #678
#676 := (iff #744 #666)
#667 := (iff #747 #186)
#685 := (ite false #414 #186)
#673 := (iff #685 #186)
#675 := [rewrite]: #673
#682 := (iff #747 #685)
#591 := (iff #413 #186)
#435 := 1::int
#696 := (= #180 1::int)
#587 := (ite false #696 #186)
#589 := (iff #587 #186)
#590 := [rewrite]: #589
#580 := (iff #413 #587)
#584 := (iff #415 #186)
#574 := (+ 2::int #180)
#585 := (= #574 0::int)
#684 := (iff #585 #186)
#569 := [rewrite]: #684
#680 := (iff #415 #585)
#535 := (= #424 #574)
#691 := (+ #180 2::int)
#575 := (= #691 #574)
#576 := [rewrite]: #575
#689 := (= #424 #691)
#688 := (= #423 2::int)
#702 := (mod 5::int 3::int)
#534 := (= #702 2::int)
#687 := [rewrite]: #534
#531 := (= #423 #702)
#701 := (= #337 3::int)
#695 := [rewrite]: #701
#694 := (= #422 5::int)
#700 := [rewrite]: #694
#533 := [monotonicity #700 #695]: #531
#690 := [trans #533 #687]: #688
#692 := [monotonicity #690]: #689
#683 := [trans #692 #576]: #535
#681 := [monotonicity #683]: #680
#586 := [trans #681 #569]: #584
#699 := (iff #428 #696)
#704 := (+ -1::int #180)
#552 := (= #704 0::int)
#697 := (iff #552 #696)
#698 := [rewrite]: #697
#553 := (iff #428 #552)
#705 := (= #355 #704)
#707 := (+ #180 -1::int)
#709 := (= #707 #704)
#710 := [rewrite]: #709
#708 := (= #355 #707)
#717 := (= #427 -1::int)
#715 := (* -1::int 1::int)
#716 := (= #715 -1::int)
#713 := [rewrite]: #716
#430 := (= #427 #715)
#436 := (= #426 1::int)
#714 := [rewrite]: #436
#712 := [monotonicity #714]: #430
#706 := [trans #712 #713]: #717
#703 := [monotonicity #706]: #708
#711 := [trans #703 #710]: #705
#554 := [monotonicity #711]: #553
#693 := [trans #554 #698]: #699
#433 := (iff #739 false)
#444 := (or false false)
#719 := (iff #444 false)
#723 := [rewrite]: #719
#718 := (iff #739 #444)
#721 := (iff #743 false)
#1 := true
#727 := (not true)
#734 := (iff #727 false)
#736 := [rewrite]: #734
#343 := (iff #743 #727)
#449 := (iff #408 true)
#738 := (or true true)
#447 := (iff #738 true)
#448 := [rewrite]: #447
#724 := (iff #408 #738)
#385 := (iff #425 true)
#726 := [rewrite]: #385
#737 := (iff #429 true)
#735 := [rewrite]: #737
#725 := [monotonicity #735 #726]: #724
#450 := [trans #725 #448]: #449
#720 := [monotonicity #450]: #343
#443 := [trans #720 #736]: #721
#376 := (iff #532 false)
#733 := (iff #532 #727)
#731 := (iff #402 true)
#391 := (or true false)
#729 := (iff #391 true)
#730 := [rewrite]: #729
#392 := (iff #402 #391)
#389 := (iff #745 false)
#390 := [rewrite]: #389
#728 := [monotonicity #726 #390]: #392
#732 := [trans #728 #730]: #731
#371 := [monotonicity #732]: #733
#377 := [trans #371 #736]: #376
#722 := [monotonicity #377 #443]: #718
#434 := [trans #722 #723]: #433
#588 := [monotonicity #434 #693 #586]: #580
#592 := [trans #588 #590]: #591
#401 := (iff #746 false)
#742 := [rewrite]: #401
#686 := [monotonicity #742 #592]: #682
#664 := [trans #686 #675]: #667
#400 := (iff #748 #405)
#741 := [rewrite]: #400
#750 := (iff #749 false)
#740 := [rewrite]: #750
#677 := [monotonicity #740 #741 #664]: #676
#668 := [trans #677 #674]: #679
#656 := [monotonicity #668]: #672
#660 := [trans #656 #659]: #672
#665 := [quant-inst]: #671
#661 := [mp #665 #660]: #670
[unit-resolution #661 #764 #194]: false
unsat
443d726f158e992756000aa2462469d5494d62ee 149 0
#2 := false
#9 := 0::int
decl f3 :: int
#8 := f3
#34 := -1::int
#35 := (* -1::int f3)
#61 := (>= f3 0::int)
#68 := (ite #61 f3 #35)
#111 := (* -1::int #68)
#156 := (+ f3 #111)
#157 := (<= #156 0::int)
#98 := (= f3 #68)
#10 := (<= f3 0::int)
#55 := (not #10)
#78 := (+ f3 #68)
#77 := (= #78 0::int)
#93 := (not #77)
#115 := [hypothesis]: #93
#95 := (>= #78 0::int)
#112 := (+ #35 #111)
#113 := (<= #112 0::int)
#73 := (= #35 #68)
#62 := (not #61)
#131 := (or #62 #77)
#118 := (= f3 0::int)
#109 := (or #10 #77)
#85 := (iff #55 #77)
#12 := (- f3)
#11 := (< f3 0::int)
#13 := (ite #11 #12 f3)
#14 := (= #13 #12)
#15 := (iff #10 #14)
#16 := (not #15)
#90 := (iff #16 #85)
#38 := (ite #11 #35 f3)
#44 := (= #35 #38)
#56 := (iff #44 #55)
#88 := (iff #56 #85)
#82 := (iff #77 #55)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #56 #82)
#80 := (iff #44 #77)
#76 := (iff #73 #77)
#79 := [rewrite]: #76
#74 := (iff #44 #73)
#71 := (= #38 #68)
#65 := (ite #62 #35 f3)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #38 #65)
#63 := (iff #11 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#75 := [monotonicity #72]: #74
#81 := [trans #75 #79]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#59 := (iff #16 #56)
#49 := (iff #10 #44)
#52 := (not #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #16 #52)
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#41 := (= #38 #35)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #14 #41)
#36 := (= #12 #35)
#37 := [rewrite]: #36
#39 := (= #13 #38)
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40 #37]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#91 := [trans #60 #89]: #90
#33 := [asserted]: #16
#92 := [mp #33 #91]: #85
#102 := (not #85)
#107 := (or #10 #77 #102)
#108 := [def-axiom]: #107
#110 := [unit-resolution #108 #92]: #109
#116 := [unit-resolution #110 #115]: #10
#117 := [hypothesis]: #61
#119 := [th-lemma #117 #116]: #118
#127 := (= #78 f3)
#125 := (= #68 f3)
#99 := (or #62 #98)
#100 := [def-axiom]: #99
#120 := [unit-resolution #100 #117]: #98
#126 := [symm #120]: #125
#123 := (= #78 #68)
#121 := (= #68 #78)
#122 := [th-lemma #117 #116]: #121
#124 := [symm #122]: #123
#128 := [trans #124 #126]: #127
#129 := [trans #128 #119]: #77
#130 := [unit-resolution #115 #129]: false
#132 := [lemma #130]: #131
#133 := [unit-resolution #132 #115]: #62
#101 := (or #61 #73)
#96 := [def-axiom]: #101
#134 := [unit-resolution #96 #133]: #73
#135 := (not #73)
#136 := (or #135 #113)
#137 := [th-lemma]: #136
#138 := [unit-resolution #137 #134]: #113
#139 := (not #113)
#140 := (or #95 #139)
#141 := [th-lemma]: #140
#142 := [unit-resolution #141 #138]: #95
#97 := (<= #78 0::int)
#114 := (>= #112 0::int)
#143 := (or #135 #114)
#144 := [th-lemma]: #143
#145 := [unit-resolution #144 #134]: #114
#146 := (not #114)
#147 := (or #97 #146)
#148 := [th-lemma]: #147
#149 := [unit-resolution #148 #145]: #97
#151 := (not #95)
#150 := (not #97)
#152 := (or #77 #150 #151)
#153 := [th-lemma]: #152
#154 := [unit-resolution #153 #149 #142 #115]: false
#155 := [lemma #154]: #77
#105 := (or #55 #93)
#103 := (or #55 #93 #102)
#104 := [def-axiom]: #103
#106 := [unit-resolution #104 #92]: #105
#159 := [unit-resolution #106 #155]: #55
#160 := (or #61 #10)
#161 := [th-lemma]: #160
#162 := [unit-resolution #161 #159]: #61
#163 := [unit-resolution #100 #162]: #98
#164 := (not #98)
#165 := (or #164 #157)
#166 := [th-lemma]: #165
#167 := [unit-resolution #166 #163]: #157
#168 := (or #93 #97)
#169 := [th-lemma]: #168
#170 := [unit-resolution #169 #155]: #97
[th-lemma #159 #170 #167]: false
unsat
5d75c12dca04a93af891e80a12133cb48b0e8ce3 114 0
#2 := false
#9 := 0::int
decl f3 :: int
#8 := f3
#35 := -1::int
#36 := (* -1::int f3)
#67 := (>= f3 0::int)
#74 := (ite #67 f3 #36)
#88 := (* -1::int #74)
#127 := (+ #36 #88)
#137 := (<= #127 0::int)
#114 := (= #36 #74)
#68 := (not #67)
#125 := (+ f3 #88)
#126 := (<= #125 0::int)
#113 := (= f3 #74)
#128 := [hypothesis]: #67
#115 := (or #68 #113)
#116 := [def-axiom]: #115
#129 := [unit-resolution #116 #128]: #113
#130 := (not #113)
#131 := (or #130 #126)
#132 := [th-lemma]: #131
#133 := [unit-resolution #132 #129]: #126
#83 := (>= #74 0::int)
#82 := (not #83)
#94 := (ite #83 #74 #88)
#99 := (= #74 #94)
#102 := (not #99)
#11 := (- f3)
#10 := (< f3 0::int)
#12 := (ite #10 #11 f3)
#14 := (- #12)
#13 := (< #12 0::int)
#15 := (ite #13 #14 #12)
#16 := (= #15 #12)
#17 := (not #16)
#105 := (iff #17 #102)
#39 := (ite #10 #36 f3)
#48 := (* -1::int #39)
#42 := (< #39 0::int)
#53 := (ite #42 #48 #39)
#59 := (= #39 #53)
#64 := (not #59)
#103 := (iff #64 #102)
#100 := (iff #59 #99)
#97 := (= #53 #94)
#91 := (ite #82 #88 #74)
#95 := (= #91 #94)
#96 := [rewrite]: #95
#92 := (= #53 #91)
#77 := (= #39 #74)
#71 := (ite #68 #36 f3)
#75 := (= #71 #74)
#76 := [rewrite]: #75
#72 := (= #39 #71)
#69 := (iff #10 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#78 := [trans #73 #76]: #77
#89 := (= #48 #88)
#90 := [monotonicity #78]: #89
#86 := (iff #42 #82)
#79 := (< #74 0::int)
#84 := (iff #79 #82)
#85 := [rewrite]: #84
#80 := (iff #42 #79)
#81 := [monotonicity #78]: #80
#87 := [trans #81 #85]: #86
#93 := [monotonicity #87 #90 #78]: #92
#98 := [trans #93 #96]: #97
#101 := [monotonicity #78 #98]: #100
#104 := [monotonicity #101]: #103
#65 := (iff #17 #64)
#62 := (iff #16 #59)
#56 := (= #53 #39)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #16 #56)
#40 := (= #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#54 := (= #15 #53)
#51 := (= #14 #48)
#45 := (- #39)
#49 := (= #45 #48)
#50 := [rewrite]: #49
#46 := (= #14 #45)
#47 := [monotonicity #41]: #46
#52 := [trans #47 #50]: #51
#43 := (iff #13 #42)
#44 := [monotonicity #41]: #43
#55 := [monotonicity #44 #52 #41]: #54
#58 := [monotonicity #55 #41]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#106 := [trans #66 #104]: #105
#34 := [asserted]: #17
#107 := [mp #34 #106]: #102
#108 := (or #82 #99)
#117 := [def-axiom]: #108
#134 := [unit-resolution #117 #107]: #82
#135 := [th-lemma #128 #134 #133]: false
#136 := [lemma #135]: #68
#111 := (or #67 #114)
#112 := [def-axiom]: #111
#139 := [unit-resolution #112 #136]: #114
#140 := (not #114)
#141 := (or #140 #137)
#142 := [th-lemma]: #141
#143 := [unit-resolution #142 #139]: #137
[th-lemma #136 #134 #143]: false
unsat
1c29e683939b29daf6c0c39d6dc5211f90494d2b 57 0
#2 := false
#36 := 0::int
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#33 := -1::int
#34 := (* -1::int f4)
#35 := (+ f3 #34)
#37 := (<= #35 0::int)
#40 := (ite #37 f3 f4)
#48 := (* -1::int #40)
#49 := (+ f3 #48)
#47 := (>= #49 0::int)
#53 := (not #47)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f3)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #47)
#43 := (<= #40 f3)
#46 := (iff #43 #47)
#50 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#60 := (= f3 #40)
#31 := (+ f4 #48)
#65 := (>= #31 0::int)
#61 := (= f4 #40)
#62 := (not #37)
#66 := [hypothesis]: #62
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#67 := [unit-resolution #57 #66]: #61
#68 := (not #61)
#69 := (or #68 #65)
#70 := [th-lemma]: #69
#71 := [unit-resolution #70 #67]: #65
#72 := [th-lemma #56 #66 #71]: false
#73 := [lemma #72]: #37
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#74 := [unit-resolution #58 #73]: #60
#75 := (not #60)
#76 := (or #75 #47)
#77 := [th-lemma]: #76
[unit-resolution #77 #74 #56]: false
unsat
66247d826364718443f0bc07b82495d982768eb5 327 0
#2 := false
#11 := 0::int
decl f5 :: int
#38 := f5
#418 := (<= f5 0::int)
#734 := (>= f5 0::int)
#380 := (not #734)
#723 := (not #418)
#727 := (or #723 #380)
#690 := (not #727)
#39 := 3::int
#415 := (mod f5 3::int)
#66 := -1::int
#416 := (* -1::int #415)
decl f4 :: (-> int int int)
#40 := (f4 f5 3::int)
#344 := (+ #40 #416)
#417 := (= #344 0::int)
#563 := (not #417)
#520 := (<= #344 0::int)
#623 := (not #520)
#631 := (>= #415 3::int)
#632 := (not #631)
#1 := true
#57 := [true-axiom]: true
#619 := (or false #632)
#620 := [th-lemma]: #619
#621 := [unit-resolution #620 #57]: #632
#622 := [hypothesis]: #520
#173 := (>= #40 3::int)
#41 := (< #40 3::int)
#42 := (not #41)
#181 := (iff #42 #173)
#172 := (not #173)
#176 := (not #172)
#179 := (iff #176 #173)
#180 := [rewrite]: #179
#177 := (iff #42 #176)
#174 := (iff #41 #172)
#175 := [rewrite]: #174
#178 := [monotonicity #175]: #177
#182 := [trans #178 #180]: #181
#169 := [asserted]: #42
#183 := [mp #169 #182]: #173
#617 := [th-lemma #183 #622 #621]: false
#609 := [lemma #617]: #623
#626 := (or #563 #520)
#637 := [th-lemma]: #626
#615 := [unit-resolution #637 #609]: #563
#614 := (or #690 #417)
#438 := -3::int
#411 := (* -1::int f5)
#709 := (mod #411 -3::int)
#433 := (+ #40 #709)
#708 := (= #433 0::int)
#423 := (ite #727 #417 #708)
#403 := (= #40 0::int)
#735 := (= f5 0::int)
#703 := (ite #735 #403 #423)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#747 := (pattern #29)
#70 := (* -1::int #9)
#67 := (* -1::int #8)
#125 := (mod #67 #70)
#258 := (+ #29 #125)
#259 := (= #258 0::int)
#30 := (mod #8 #9)
#255 := (* -1::int #30)
#256 := (+ #29 #255)
#257 := (= #256 0::int)
#92 := (<= #9 0::int)
#88 := (<= #8 0::int)
#197 := (or #88 #92)
#198 := (not #197)
#99 := (>= #8 0::int)
#189 := (or #92 #99)
#190 := (not #189)
#204 := (or #190 #198)
#260 := (ite #204 #257 #259)
#254 := (= #29 0::int)
#12 := (= #8 0::int)
#261 := (ite #12 #254 #260)
#253 := (= #8 #29)
#13 := (= #9 0::int)
#262 := (ite #13 #253 #261)
#748 := (forall (vars (?v0 int) (?v1 int)) (:pat #747) #262)
#265 := (forall (vars (?v0 int) (?v1 int)) #262)
#751 := (iff #265 #748)
#749 := (iff #262 #262)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#131 := (* -1::int #125)
#222 := (ite #204 #30 #131)
#225 := (ite #12 0::int #222)
#228 := (ite #13 #8 #225)
#231 := (= #29 #228)
#234 := (forall (vars (?v0 int) (?v1 int)) #231)
#266 := (iff #234 #265)
#263 := (iff #231 #262)
#264 := [rewrite]: #263
#267 := [quant-intro #264]: #266
#100 := (not #99)
#93 := (not #92)
#103 := (and #93 #100)
#89 := (not #88)
#96 := (and #89 #93)
#106 := (or #96 #103)
#151 := (ite #106 #30 #131)
#154 := (ite #12 0::int #151)
#157 := (ite #13 #8 #154)
#160 := (= #29 #157)
#163 := (forall (vars (?v0 int) (?v1 int)) #160)
#235 := (iff #163 #234)
#232 := (iff #160 #231)
#229 := (= #157 #228)
#226 := (= #154 #225)
#223 := (= #151 #222)
#207 := (iff #106 #204)
#201 := (or #198 #190)
#205 := (iff #201 #204)
#206 := [rewrite]: #205
#202 := (iff #106 #201)
#199 := (iff #103 #190)
#200 := [rewrite]: #199
#187 := (iff #96 #198)
#188 := [rewrite]: #187
#203 := [monotonicity #188 #200]: #202
#208 := [trans #203 #206]: #207
#224 := [monotonicity #208]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#185 := (~ #163 #163)
#170 := (~ #160 #160)
#195 := [refl]: #170
#186 := [nnf-pos #195]: #185
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#166 := (iff #37 #163)
#60 := (and #16 #18)
#63 := (or #17 #60)
#136 := (ite #63 #30 #131)
#139 := (ite #12 0::int #136)
#142 := (ite #13 #8 #139)
#145 := (= #29 #142)
#148 := (forall (vars (?v0 int) (?v1 int)) #145)
#164 := (iff #148 #163)
#161 := (iff #145 #160)
#158 := (= #142 #157)
#155 := (= #139 #154)
#152 := (= #136 #151)
#107 := (iff #63 #106)
#104 := (iff #60 #103)
#101 := (iff #18 #100)
#102 := [rewrite]: #101
#94 := (iff #16 #93)
#95 := [rewrite]: #94
#105 := [monotonicity #95 #102]: #104
#97 := (iff #17 #96)
#90 := (iff #15 #89)
#91 := [rewrite]: #90
#98 := [monotonicity #91 #95]: #97
#108 := [monotonicity #98 #105]: #107
#153 := [monotonicity #108]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [quant-intro #162]: #164
#149 := (iff #37 #148)
#146 := (iff #36 #145)
#143 := (= #35 #142)
#140 := (= #34 #139)
#137 := (= #33 #136)
#134 := (= #32 #131)
#128 := (- #125)
#132 := (= #128 #131)
#133 := [rewrite]: #132
#129 := (= #32 #128)
#126 := (= #31 #125)
#71 := (= #23 #70)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#69 := [rewrite]: #68
#127 := [monotonicity #69 #72]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#64 := (iff #20 #63)
#61 := (iff #19 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#138 := [monotonicity #65 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [quant-intro #147]: #149
#167 := [trans #150 #165]: #166
#124 := [asserted]: #37
#168 := [mp #124 #167]: #163
#196 := [mp~ #168 #186]: #163
#237 := [mp #196 #236]: #234
#268 := [mp #237 #267]: #265
#753 := [mp #268 #752]: #748
#692 := (not #748)
#693 := (or #692 #703)
#326 := (* -1::int 3::int)
#412 := (mod #411 #326)
#413 := (+ #40 #412)
#404 := (= #413 0::int)
#414 := (<= 3::int 0::int)
#397 := (or #418 #414)
#732 := (not #397)
#391 := (or #414 #734)
#521 := (not #391)
#728 := (or #521 #732)
#402 := (ite #728 #417 #404)
#736 := (ite #735 #403 #402)
#737 := (= f5 #40)
#738 := (= 3::int 0::int)
#733 := (ite #738 #737 #736)
#698 := (or #692 #733)
#694 := (iff #698 #693)
#541 := (iff #693 #693)
#542 := [rewrite]: #541
#696 := (iff #733 #703)
#701 := (ite false #737 #703)
#706 := (iff #701 #703)
#695 := [rewrite]: #706
#705 := (iff #733 #701)
#704 := (iff #736 #703)
#424 := (iff #402 #423)
#712 := (iff #404 #708)
#707 := (= #413 #433)
#710 := (= #412 #709)
#439 := (= #326 -3::int)
#332 := [rewrite]: #439
#432 := [monotonicity #332]: #710
#711 := [monotonicity #432]: #707
#422 := [monotonicity #711]: #712
#436 := (iff #728 #727)
#366 := (or #380 #723)
#713 := (iff #366 #727)
#714 := [rewrite]: #713
#726 := (iff #728 #366)
#725 := (iff #732 #723)
#722 := (iff #397 #418)
#718 := (or #418 false)
#721 := (iff #718 #418)
#716 := [rewrite]: #721
#719 := (iff #397 #718)
#389 := (iff #414 false)
#394 := [rewrite]: #389
#720 := [monotonicity #394]: #719
#360 := [trans #720 #716]: #722
#365 := [monotonicity #360]: #725
#381 := (iff #521 #380)
#378 := (iff #391 #734)
#730 := (or false #734)
#374 := (iff #730 #734)
#715 := [rewrite]: #374
#390 := (iff #391 #730)
#731 := [monotonicity #394]: #390
#379 := [trans #731 #715]: #378
#717 := [monotonicity #379]: #381
#724 := [monotonicity #717 #365]: #726
#437 := [trans #724 #714]: #436
#425 := [monotonicity #437 #422]: #424
#419 := [monotonicity #425]: #704
#739 := (iff #738 false)
#729 := [rewrite]: #739
#702 := [monotonicity #729 #419]: #705
#697 := [trans #702 #695]: #696
#700 := [monotonicity #697]: #694
#543 := [trans #700 #542]: #694
#699 := [quant-inst]: #698
#685 := [mp #699 #543]: #693
#616 := [unit-resolution #685 #753]: #703
#670 := (not #735)
#669 := (not #703)
#611 := (or #669 #670)
#576 := (not #403)
#686 := (<= #40 0::int)
#618 := (not #686)
#648 := (or #618 #172)
#649 := [th-lemma]: #648
#605 := [unit-resolution #649 #183]: #618
#606 := (or #576 #686)
#607 := [th-lemma]: #606
#610 := [unit-resolution #607 #605]: #576
#673 := (or #669 #670 #403)
#558 := [def-axiom]: #673
#612 := [unit-resolution #558 #610]: #611
#613 := [unit-resolution #612 #616]: #670
#573 := (or #669 #735 #423)
#575 := [def-axiom]: #573
#608 := [unit-resolution #575 #613 #616]: #423
#677 := (not #423)
#679 := (or #677 #690 #417)
#680 := [def-axiom]: #679
#587 := [unit-resolution #680 #608]: #614
#588 := [unit-resolution #587 #615]: #690
#688 := (or #727 #418)
#682 := [def-axiom]: #688
#589 := [unit-resolution #682 #588]: #418
#683 := (or #727 #734)
#689 := [def-axiom]: #683
#482 := [unit-resolution #689 #588]: #734
#593 := (or #735 #723 #380)
#594 := [th-lemma]: #593
#595 := [unit-resolution #594 #613]: #727
[unit-resolution #595 #482 #589]: false
unsat
f5bdd04ade0ff62ddedb44ca71a4ab32cea43ed1 57 0
#2 := false
#36 := 0::int
decl f4 :: int
#9 := f4
#33 := -1::int
#34 := (* -1::int f4)
decl f3 :: int
#8 := f3
#35 := (+ f3 #34)
#37 := (<= #35 0::int)
#40 := (ite #37 f3 f4)
#61 := (= f4 #40)
#65 := (not #61)
#47 := (* -1::int #40)
#48 := (+ f4 #47)
#46 := (>= #48 0::int)
#53 := (not #46)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f4)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #46)
#43 := (<= #40 f4)
#49 := (iff #43 #46)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#64 := [hypothesis]: #61
#66 := (or #65 #46)
#67 := [th-lemma]: #66
#68 := [unit-resolution #67 #64 #56]: false
#69 := [lemma #68]: #65
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#72 := [unit-resolution #57 #69]: #37
#31 := (+ f3 #47)
#71 := (>= #31 0::int)
#60 := (= f3 #40)
#62 := (not #37)
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#73 := [unit-resolution #58 #72]: #60
#74 := (not #60)
#75 := (or #74 #71)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #73]: #71
[th-lemma #77 #56 #72]: false
unsat
db7c87847633d861c99b1fec84d68fb0617d9c27 103 0
#2 := false
#45 := 0::int
decl f5 :: int
#11 := f5
decl f4 :: int
#9 := f4
#43 := -1::int
#53 := (* -1::int f5)
#63 := (+ f4 #53)
#64 := (<= #63 0::int)
#67 := (ite #64 f4 f5)
#75 := (* -1::int #67)
decl f3 :: int
#8 := f3
#76 := (+ f3 #75)
#74 := (>= #76 0::int)
#73 := (not #74)
#54 := (+ f3 #53)
#52 := (>= #54 0::int)
#51 := (not #52)
#47 := (* -1::int f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::int)
#44 := (not #46)
#57 := (and #44 #51)
#60 := (not #57)
#81 := (or #60 #73)
#84 := (not #81)
#14 := (<= f4 f5)
#15 := (ite #14 f4 f5)
#16 := (< f3 #15)
#12 := (< f3 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#87 := (iff #18 #84)
#36 := (not #13)
#37 := (or #36 #16)
#40 := (not #37)
#85 := (iff #40 #84)
#82 := (iff #37 #81)
#79 := (iff #16 #73)
#70 := (< f3 #67)
#77 := (iff #70 #73)
#78 := [rewrite]: #77
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#80 := [trans #72 #78]: #79
#61 := (iff #36 #60)
#58 := (iff #13 #57)
#55 := (iff #12 #51)
#56 := [rewrite]: #55
#49 := (iff #10 #44)
#50 := [rewrite]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#83 := [monotonicity #62 #80]: #82
#86 := [monotonicity #83]: #85
#41 := (iff #18 #40)
#38 := (iff #17 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#88 := [trans #42 #86]: #87
#35 := [asserted]: #18
#89 := [mp #35 #88]: #84
#93 := [not-or-elim #89]: #74
#90 := [not-or-elim #89]: #57
#92 := [and-elim #90]: #51
#98 := (+ f5 #75)
#115 := (<= #98 0::int)
#104 := (= f5 #67)
#105 := (not #64)
#103 := (= f4 #67)
#110 := (not #103)
#100 := (+ f4 #75)
#97 := (<= #100 0::int)
#107 := (not #97)
#91 := [and-elim #90]: #44
#96 := [hypothesis]: #97
#94 := [th-lemma #96 #91 #93]: false
#108 := [lemma #94]: #107
#109 := [hypothesis]: #103
#111 := (or #110 #97)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109 #108]: false
#114 := [lemma #113]: #110
#106 := (or #105 #103)
#101 := [def-axiom]: #106
#117 := [unit-resolution #101 #114]: #105
#102 := (or #64 #104)
#99 := [def-axiom]: #102
#118 := [unit-resolution #99 #117]: #104
#119 := (not #104)
#120 := (or #119 #115)
#121 := [th-lemma]: #120
#122 := [unit-resolution #121 #118]: #115
[th-lemma #122 #92 #93]: false
unsat
30ec056750b76c9c44be73825eb8959f04eaf2af 86 0
#2 := false
decl f3 :: int
#8 := f3
decl f4 :: int
#9 := f4
#38 := 0::int
#35 := -1::int
#36 := (* -1::int f4)
#37 := (+ f3 #36)
#46 := (>= #37 0::int)
#48 := (ite #46 f4 f3)
#39 := (<= #37 0::int)
#42 := (ite #39 f3 f4)
#51 := (= #42 #48)
#33 := (= f4 #48)
#65 := (= f3 #48)
#66 := (not #46)
#71 := [hypothesis]: #66
#69 := (or #46 #65)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #71]: #65
#77 := (= #42 f3)
#61 := (= f3 #42)
#73 := (or #46 #39)
#74 := [th-lemma]: #73
#75 := [unit-resolution #74 #71]: #39
#63 := (not #39)
#64 := (or #63 #61)
#59 := [def-axiom]: #64
#76 := [unit-resolution #59 #75]: #61
#78 := [symm #76]: #77
#79 := [trans #78 #72]: #51
#54 := (not #51)
#12 := (<= f4 f3)
#13 := (ite #12 f4 f3)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#14 := (= #11 #13)
#15 := (not #14)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (= #13 #48)
#45 := (iff #12 #46)
#47 := [rewrite]: #45
#50 := [monotonicity #47]: #49
#43 := (= #11 #42)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#53 := [monotonicity #44 #50]: #52
#56 := [monotonicity #53]: #55
#32 := [asserted]: #15
#57 := [mp #32 #56]: #54
#80 := [unit-resolution #57 #79]: false
#81 := [lemma #80]: #46
#67 := (or #66 #33)
#68 := [def-axiom]: #67
#83 := [unit-resolution #68 #81]: #33
#103 := (= #42 f4)
#82 := (= f3 f4)
#62 := (= f4 #42)
#93 := (not #62)
#94 := (iff #54 #93)
#91 := (iff #51 #62)
#89 := (iff #62 #51)
#84 := (= #48 #42)
#87 := (iff #84 #51)
#88 := [commutativity]: #87
#85 := (iff #62 #84)
#86 := [monotonicity #83]: #85
#90 := [trans #86 #88]: #89
#92 := [symm #90]: #91
#95 := [monotonicity #92]: #94
#96 := [mp #57 #95]: #93
#60 := (or #39 #62)
#58 := [def-axiom]: #60
#97 := [unit-resolution #58 #96]: #39
#98 := (or #82 #63 #66)
#99 := [th-lemma]: #98
#100 := [unit-resolution #99 #97 #81]: #82
#101 := [unit-resolution #59 #97]: #61
#102 := [symm #101]: #77
#104 := [trans #102 #100]: #103
#105 := [trans #104 #83]: #51
[unit-resolution #57 #105]: false
unsat
87cffe59a43ecd3ffcda40df06578c44d2a9feac 68 0
#2 := false
#8 := 0::int
decl f3 :: int
#9 := f3
#11 := (<= f3 0::int)
#12 := (ite #11 f3 0::int)
#13 := (= #12 0::int)
#76 := (= f3 0::int)
#50 := (>= f3 0::int)
#51 := (not #50)
#59 := (or #13 #51)
#64 := (not #59)
#10 := (<= 0::int f3)
#14 := (implies #10 #13)
#15 := (not #14)
#67 := (iff #15 #64)
#33 := (= 0::int #12)
#39 := (not #10)
#40 := (or #39 #33)
#45 := (not #40)
#65 := (iff #45 #64)
#62 := (iff #40 #59)
#56 := (or #51 #13)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #40 #56)
#54 := (iff #33 #13)
#55 := [rewrite]: #54
#52 := (iff #39 #51)
#48 := (iff #10 #50)
#49 := [rewrite]: #48
#53 := [monotonicity #49]: #52
#58 := [monotonicity #53 #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#46 := (iff #15 #45)
#43 := (iff #14 #40)
#36 := (implies #10 #33)
#41 := (iff #36 #40)
#42 := [rewrite]: #41
#37 := (iff #14 #36)
#34 := (iff #13 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#44 := [trans #38 #42]: #43
#47 := [monotonicity #44]: #46
#68 := [trans #47 #66]: #67
#32 := [asserted]: #15
#69 := [mp #32 #68]: #64
#72 := [not-or-elim #69]: #50
#70 := (not #13)
#71 := [not-or-elim #69]: #70
#78 := (or #11 #13)
#79 := [def-axiom]: #78
#77 := [unit-resolution #79 #71]: #11
#81 := (not #11)
#75 := (or #76 #81 #51)
#73 := [th-lemma]: #75
#84 := [unit-resolution #73 #77 #72]: #76
#86 := (= #12 f3)
#80 := (= f3 #12)
#82 := (or #81 #80)
#83 := [def-axiom]: #82
#85 := [unit-resolution #83 #77]: #80
#87 := [symm #85]: #86
#88 := [trans #87 #84]: #13
[unit-resolution #71 #88]: false
unsat
90c0dd925b0006ab13047c20a6f0e8d277ec4cdf 124 0
#2 := false
#13 := 0::int
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#36 := -1::int
#38 := (* -1::int f4)
#51 := (+ f3 #38)
#52 := (<= #51 0::int)
#55 := (ite #52 f3 f4)
#103 := (* -1::int #55)
#104 := (+ f3 #103)
#106 := (>= #104 0::int)
#91 := (= f3 #55)
#105 := (+ f4 #103)
#123 := (>= #105 0::int)
#92 := (= f4 #55)
#93 := (not #52)
#134 := [hypothesis]: #93
#90 := (or #52 #92)
#88 := [def-axiom]: #90
#135 := [unit-resolution #88 #134]: #92
#126 := (not #92)
#127 := (or #126 #123)
#128 := [th-lemma]: #127
#136 := [unit-resolution #128 #135]: #123
#37 := (* -1::int f3)
#39 := (+ #37 #38)
#12 := (+ f3 f4)
#58 := (>= #12 0::int)
#65 := (ite #58 #12 #39)
#73 := (* -1::int #65)
#74 := (+ #55 #73)
#75 := (<= #74 0::int)
#80 := (not #75)
#15 := (- #12)
#14 := (< #12 0::int)
#16 := (ite #14 #15 #12)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#17 := (<= #11 #16)
#18 := (not #17)
#83 := (iff #18 #80)
#42 := (ite #14 #39 #12)
#45 := (<= #11 #42)
#48 := (not #45)
#81 := (iff #48 #80)
#78 := (iff #45 #75)
#70 := (<= #55 #65)
#76 := (iff #70 #75)
#77 := [rewrite]: #76
#71 := (iff #45 #70)
#68 := (= #42 #65)
#59 := (not #58)
#62 := (ite #59 #39 #12)
#66 := (= #62 #65)
#67 := [rewrite]: #66
#63 := (= #42 #62)
#60 := (iff #14 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#56 := (= #11 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#72 := [monotonicity #57 #69]: #71
#79 := [trans #72 #77]: #78
#82 := [monotonicity #79]: #81
#49 := (iff #18 #48)
#46 := (iff #17 #45)
#43 := (= #16 #42)
#40 := (= #15 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#84 := [trans #50 #82]: #83
#35 := [asserted]: #18
#85 := [mp #35 #84]: #80
#102 := (+ #12 #73)
#122 := (<= #102 0::int)
#86 := (= #12 #65)
#108 := [hypothesis]: #59
#120 := (or #93 #58)
#107 := [hypothesis]: #52
#100 := (+ #39 #73)
#101 := (<= #100 0::int)
#95 := (= #39 #65)
#98 := (or #58 #95)
#99 := [def-axiom]: #98
#109 := [unit-resolution #99 #108]: #95
#110 := (not #95)
#111 := (or #110 #101)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109]: #101
#94 := (or #93 #91)
#89 := [def-axiom]: #94
#114 := [unit-resolution #89 #107]: #91
#115 := (not #91)
#116 := (or #115 #106)
#117 := [th-lemma]: #116
#118 := [unit-resolution #117 #114]: #106
#119 := [th-lemma #108 #118 #113 #85 #107]: false
#121 := [lemma #119]: #120
#124 := [unit-resolution #121 #108]: #93
#125 := [unit-resolution #88 #124]: #92
#129 := [unit-resolution #128 #125]: #123
#130 := [th-lemma #113 #85 #108 #124 #129]: false
#131 := [lemma #130]: #58
#96 := (or #59 #86)
#97 := [def-axiom]: #96
#137 := [unit-resolution #97 #131]: #86
#138 := (not #86)
#139 := (or #138 #122)
#140 := [th-lemma]: #139
#141 := [unit-resolution #140 #137]: #122
#142 := [th-lemma #134 #131 #141 #85 #136]: false
#143 := [lemma #142]: #52
#144 := [unit-resolution #89 #143]: #91
#145 := [unit-resolution #117 #144]: #106
[th-lemma #131 #143 #141 #85 #145]: false
unsat
e48a7e8698a7ec4071541fd4399337a2b0f4fdb6 345 0
#2 := false
#39 := 3::int
decl f4 :: (-> int int int)
decl f5 :: int
#38 := f5
#40 := (f4 f5 3::int)
#441 := (mod #40 3::int)
#657 := (>= #441 3::int)
#658 := (not #657)
#1 := true
#59 := [true-axiom]: true
#647 := (or false #658)
#642 := [th-lemma]: #647
#648 := [unit-resolution #642 #59]: #658
#11 := 0::int
#68 := -1::int
#436 := (* -1::int #40)
#600 := (+ f5 #436)
#601 := (<= #600 0::int)
#172 := (= f5 #40)
#188 := (>= f5 3::int)
#187 := (not #188)
#178 := (not #172)
#194 := (or #178 #187)
#199 := (not #194)
#42 := (< f5 3::int)
#41 := (= #40 f5)
#43 := (implies #41 #42)
#44 := (not #43)
#202 := (iff #44 #199)
#179 := (or #42 #178)
#184 := (not #179)
#200 := (iff #184 #199)
#197 := (iff #179 #194)
#191 := (or #187 #178)
#195 := (iff #191 #194)
#196 := [rewrite]: #195
#192 := (iff #179 #191)
#189 := (iff #42 #187)
#190 := [rewrite]: #189
#193 := [monotonicity #190]: #192
#198 := [trans #193 #196]: #197
#201 := [monotonicity #198]: #200
#185 := (iff #44 #184)
#182 := (iff #43 #179)
#175 := (implies #172 #42)
#180 := (iff #175 #179)
#181 := [rewrite]: #180
#176 := (iff #43 #175)
#173 := (iff #41 #172)
#174 := [rewrite]: #173
#177 := [monotonicity #174]: #176
#183 := [trans #177 #181]: #182
#186 := [monotonicity #183]: #185
#203 := [trans #186 #201]: #202
#171 := [asserted]: #44
#204 := [mp #171 #203]: #199
#205 := [not-or-elim #204]: #172
#634 := (or #178 #601)
#630 := [th-lemma]: #634
#631 := [unit-resolution #630 #205]: #601
#206 := [not-or-elim #204]: #188
#438 := (f4 #40 3::int)
#602 := (* -1::int #438)
#603 := (+ #40 #602)
#604 := (<= #603 0::int)
#763 := (= #40 #438)
#635 := (= #438 #40)
#632 := [symm #205]: #41
#636 := [monotonicity #632]: #635
#637 := [symm #636]: #763
#638 := (not #763)
#633 := (or #638 #604)
#639 := [th-lemma]: #633
#612 := [unit-resolution #639 #637]: #604
#369 := (* -1::int #441)
#442 := (+ #438 #369)
#707 := (<= #442 0::int)
#439 := (= #442 0::int)
#738 := -3::int
#462 := (mod #436 -3::int)
#357 := (+ #438 #462)
#457 := (= #357 0::int)
#422 := (<= #40 0::int)
#750 := (not #422)
#416 := (>= #40 0::int)
#406 := (not #416)
#751 := (or #406 #750)
#736 := (ite #751 #439 #457)
#760 := (= #438 0::int)
#761 := (= #40 0::int)
#447 := (ite #761 #760 #736)
#9 := (:var 0 int)
#8 := (:var 1 int)
#29 := (f4 #8 #9)
#772 := (pattern #29)
#72 := (* -1::int #9)
#69 := (* -1::int #8)
#127 := (mod #69 #72)
#283 := (+ #29 #127)
#284 := (= #283 0::int)
#30 := (mod #8 #9)
#280 := (* -1::int #30)
#281 := (+ #29 #280)
#282 := (= #281 0::int)
#94 := (<= #9 0::int)
#90 := (<= #8 0::int)
#224 := (or #90 #94)
#225 := (not #224)
#101 := (>= #8 0::int)
#216 := (or #94 #101)
#217 := (not #216)
#229 := (or #217 #225)
#285 := (ite #229 #282 #284)
#279 := (= #29 0::int)
#12 := (= #8 0::int)
#286 := (ite #12 #279 #285)
#278 := (= #8 #29)
#13 := (= #9 0::int)
#287 := (ite #13 #278 #286)
#773 := (forall (vars (?v0 int) (?v1 int)) (:pat #772) #287)
#290 := (forall (vars (?v0 int) (?v1 int)) #287)
#776 := (iff #290 #773)
#774 := (iff #287 #287)
#775 := [refl]: #774
#777 := [quant-intro #775]: #776
#133 := (* -1::int #127)
#247 := (ite #229 #30 #133)
#250 := (ite #12 0::int #247)
#253 := (ite #13 #8 #250)
#256 := (= #29 #253)
#259 := (forall (vars (?v0 int) (?v1 int)) #256)
#291 := (iff #259 #290)
#288 := (iff #256 #287)
#289 := [rewrite]: #288
#292 := [quant-intro #289]: #291
#102 := (not #101)
#95 := (not #94)
#105 := (and #95 #102)
#91 := (not #90)
#98 := (and #91 #95)
#108 := (or #98 #105)
#153 := (ite #108 #30 #133)
#156 := (ite #12 0::int #153)
#159 := (ite #13 #8 #156)
#162 := (= #29 #159)
#165 := (forall (vars (?v0 int) (?v1 int)) #162)
#260 := (iff #165 #259)
#257 := (iff #162 #256)
#254 := (= #159 #253)
#251 := (= #156 #250)
#248 := (= #153 #247)
#232 := (iff #108 #229)
#226 := (or #225 #217)
#230 := (iff #226 #229)
#231 := [rewrite]: #230
#227 := (iff #108 #226)
#214 := (iff #105 #217)
#215 := [rewrite]: #214
#212 := (iff #98 #225)
#213 := [rewrite]: #212
#228 := [monotonicity #213 #215]: #227
#233 := [trans #228 #231]: #232
#249 := [monotonicity #233]: #248
#252 := [monotonicity #249]: #251
#255 := [monotonicity #252]: #254
#258 := [monotonicity #255]: #257
#261 := [quant-intro #258]: #260
#210 := (~ #165 #165)
#207 := (~ #162 #162)
#222 := [refl]: #207
#211 := [nnf-pos #222]: #210
#23 := (- #9)
#22 := (- #8)
#31 := (mod #22 #23)
#32 := (- #31)
#16 := (< 0::int #9)
#18 := (< #8 0::int)
#19 := (and #18 #16)
#15 := (< 0::int #8)
#17 := (and #15 #16)
#20 := (or #17 #19)
#33 := (ite #20 #30 #32)
#34 := (ite #12 0::int #33)
#35 := (ite #13 #8 #34)
#36 := (= #29 #35)
#37 := (forall (vars (?v0 int) (?v1 int)) #36)
#168 := (iff #37 #165)
#62 := (and #16 #18)
#65 := (or #17 #62)
#138 := (ite #65 #30 #133)
#141 := (ite #12 0::int #138)
#144 := (ite #13 #8 #141)
#147 := (= #29 #144)
#150 := (forall (vars (?v0 int) (?v1 int)) #147)
#166 := (iff #150 #165)
#163 := (iff #147 #162)
#160 := (= #144 #159)
#157 := (= #141 #156)
#154 := (= #138 #153)
#109 := (iff #65 #108)
#106 := (iff #62 #105)
#103 := (iff #18 #102)
#104 := [rewrite]: #103
#96 := (iff #16 #95)
#97 := [rewrite]: #96
#107 := [monotonicity #97 #104]: #106
#99 := (iff #17 #98)
#92 := (iff #15 #91)
#93 := [rewrite]: #92
#100 := [monotonicity #93 #97]: #99
#110 := [monotonicity #100 #107]: #109
#155 := [monotonicity #110]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [quant-intro #164]: #166
#151 := (iff #37 #150)
#148 := (iff #36 #147)
#145 := (= #35 #144)
#142 := (= #34 #141)
#139 := (= #33 #138)
#136 := (= #32 #133)
#130 := (- #127)
#134 := (= #130 #133)
#135 := [rewrite]: #134
#131 := (= #32 #130)
#128 := (= #31 #127)
#73 := (= #23 #72)
#74 := [rewrite]: #73
#70 := (= #22 #69)
#71 := [rewrite]: #70
#129 := [monotonicity #71 #74]: #128
#132 := [monotonicity #129]: #131
#137 := [trans #132 #135]: #136
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#140 := [monotonicity #67 #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#169 := [trans #152 #167]: #168
#126 := [asserted]: #37
#170 := [mp #126 #169]: #165
#223 := [mp~ #170 #211]: #165
#262 := [mp #223 #261]: #259
#293 := [mp #262 #292]: #290
#778 := [mp #293 #777]: #773
#731 := (not #773)
#720 := (or #731 #447)
#351 := (* -1::int 3::int)
#437 := (mod #436 #351)
#429 := (+ #438 #437)
#440 := (= #429 0::int)
#443 := (<= 3::int 0::int)
#757 := (or #422 #443)
#759 := (not #757)
#546 := (or #443 #416)
#753 := (not #546)
#427 := (or #753 #759)
#428 := (ite #427 #439 #440)
#762 := (ite #761 #760 #428)
#758 := (= 3::int 0::int)
#764 := (ite #758 #763 #762)
#721 := (or #731 #764)
#717 := (iff #721 #720)
#723 := (iff #720 #720)
#724 := [rewrite]: #723
#730 := (iff #764 #447)
#450 := (ite false #763 #447)
#444 := (iff #450 #447)
#726 := [rewrite]: #444
#728 := (iff #764 #450)
#448 := (iff #762 #447)
#733 := (iff #428 #736)
#458 := (iff #440 #457)
#734 := (= #429 #357)
#463 := (= #437 #462)
#739 := (= #351 -3::int)
#461 := [rewrite]: #739
#464 := [monotonicity #461]: #463
#735 := [monotonicity #464]: #734
#732 := [monotonicity #735]: #458
#749 := (iff #427 #751)
#390 := (iff #759 #750)
#385 := (iff #757 #422)
#744 := (or #422 false)
#741 := (iff #744 #422)
#747 := [rewrite]: #741
#745 := (iff #757 #744)
#419 := (iff #443 false)
#755 := [rewrite]: #419
#746 := [monotonicity #755]: #745
#748 := [trans #746 #747]: #385
#391 := [monotonicity #748]: #390
#742 := (iff #753 #406)
#404 := (iff #546 #416)
#415 := (or false #416)
#740 := (iff #415 #416)
#403 := [rewrite]: #740
#756 := (iff #546 #415)
#399 := [monotonicity #755]: #756
#405 := [trans #399 #403]: #404
#743 := [monotonicity #405]: #742
#752 := [monotonicity #743 #391]: #749
#737 := [monotonicity #752 #732]: #733
#449 := [monotonicity #737]: #448
#754 := (iff #758 false)
#414 := [rewrite]: #754
#729 := [monotonicity #414 #449]: #728
#727 := [trans #729 #726]: #730
#718 := [monotonicity #727]: #717
#719 := [trans #718 #724]: #717
#722 := [quant-inst]: #721
#725 := [mp #722 #719]: #720
#613 := [unit-resolution #725 #778]: #447
#589 := (not #761)
#614 := (not #601)
#507 := (or #750 #187 #614)
#618 := [th-lemma]: #507
#619 := [unit-resolution #618 #206 #631]: #750
#620 := (or #589 #422)
#625 := [th-lemma]: #620
#621 := [unit-resolution #625 #619]: #589
#588 := (not #447)
#697 := (or #588 #761 #736)
#599 := [def-axiom]: #697
#622 := [unit-resolution #599 #621 #613]: #736
#568 := (or #751 #422)
#710 := [def-axiom]: #568
#623 := [unit-resolution #710 #619]: #751
#711 := (not #751)
#709 := (not #736)
#716 := (or #709 #711 #439)
#545 := [def-axiom]: #716
#626 := [unit-resolution #545 #623 #622]: #439
#701 := (not #439)
#627 := (or #701 #707)
#628 := [th-lemma]: #627
#624 := [unit-resolution #628 #626]: #707
[th-lemma #624 #612 #206 #631 #648]: false
unsat
de67b37b9c3eba477099ff5d9b09e840de376762 57 0
#2 := false
#36 := 0::int
decl f4 :: int
#9 := f4
#33 := -1::int
#34 := (* -1::int f4)
decl f3 :: int
#8 := f3
#35 := (+ f3 #34)
#37 := (<= #35 0::int)
#40 := (ite #37 f4 f3)
#61 := (= f3 #40)
#65 := (not #61)
#46 := (* -1::int #40)
#47 := (+ f3 #46)
#48 := (<= #47 0::int)
#53 := (not #48)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#12 := (<= f3 #11)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #48)
#43 := (<= f3 #40)
#49 := (iff #43 #48)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#64 := [hypothesis]: #61
#66 := (or #65 #48)
#67 := [th-lemma]: #66
#68 := [unit-resolution #67 #64 #56]: false
#69 := [lemma #68]: #65
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#72 := [unit-resolution #57 #69]: #37
#31 := (+ f4 #46)
#70 := (<= #31 0::int)
#60 := (= f4 #40)
#62 := (not #37)
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#73 := [unit-resolution #58 #72]: #60
#74 := (not #60)
#75 := (or #74 #70)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #73]: #70
[th-lemma #77 #56 #72]: false
unsat
8f0b2c755e25c9b0ef5750035ec56d21d3c6b32f 57 0
#2 := false
#35 := 0::int
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#33 := -1::int
#37 := (* -1::int f4)
#38 := (+ f3 #37)
#36 := (>= #38 0::int)
#40 := (ite #36 f3 f4)
#46 := (* -1::int #40)
#47 := (+ f3 #46)
#48 := (<= #47 0::int)
#53 := (not #48)
#10 := (<= f4 f3)
#11 := (ite #10 f3 f4)
#12 := (<= f3 #11)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #48)
#43 := (<= f3 #40)
#49 := (iff #43 #48)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#34 := (iff #10 #36)
#39 := [rewrite]: #34
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#60 := (= f3 #40)
#31 := (+ f4 #46)
#64 := (<= #31 0::int)
#61 := (= f4 #40)
#62 := (not #36)
#66 := [hypothesis]: #62
#59 := (or #36 #61)
#57 := [def-axiom]: #59
#67 := [unit-resolution #57 #66]: #61
#68 := (not #61)
#69 := (or #68 #64)
#70 := [th-lemma]: #69
#71 := [unit-resolution #70 #67]: #64
#72 := [th-lemma #56 #66 #71]: false
#73 := [lemma #72]: #36
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#74 := [unit-resolution #58 #73]: #60
#75 := (not #60)
#76 := (or #75 #48)
#77 := [th-lemma]: #76
[unit-resolution #77 #74 #56]: false
unsat
ba050e782d9473f46d4f759400e69d34d257264e 103 0
#2 := false
#45 := 0::int
decl f3 :: int
#8 := f3
decl f5 :: int
#11 := f5
#43 := -1::int
#51 := (* -1::int f5)
#63 := (+ f3 #51)
#64 := (<= #63 0::int)
#67 := (ite #64 f5 f3)
#73 := (* -1::int #67)
decl f4 :: int
#9 := f4
#74 := (+ f4 #73)
#75 := (<= #74 0::int)
#76 := (not #75)
#52 := (+ f4 #51)
#53 := (<= #52 0::int)
#54 := (not #53)
#47 := (* -1::int f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::int)
#44 := (not #46)
#57 := (and #44 #54)
#60 := (not #57)
#81 := (or #60 #76)
#84 := (not #81)
#14 := (<= f3 f5)
#15 := (ite #14 f5 f3)
#16 := (< #15 f4)
#12 := (< f5 f4)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#87 := (iff #18 #84)
#36 := (not #13)
#37 := (or #36 #16)
#40 := (not #37)
#85 := (iff #40 #84)
#82 := (iff #37 #81)
#79 := (iff #16 #76)
#70 := (< #67 f4)
#77 := (iff #70 #76)
#78 := [rewrite]: #77
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#80 := [trans #72 #78]: #79
#61 := (iff #36 #60)
#58 := (iff #13 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#49 := (iff #10 #44)
#50 := [rewrite]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#83 := [monotonicity #62 #80]: #82
#86 := [monotonicity #83]: #85
#41 := (iff #18 #40)
#38 := (iff #17 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#88 := [trans #42 #86]: #87
#35 := [asserted]: #18
#89 := [mp #35 #88]: #84
#93 := [not-or-elim #89]: #75
#90 := [not-or-elim #89]: #57
#91 := [and-elim #90]: #44
#97 := (+ f3 #73)
#116 := (>= #97 0::int)
#104 := (= f3 #67)
#105 := (not #64)
#103 := (= f5 #67)
#110 := (not #103)
#100 := (+ f5 #73)
#98 := (>= #100 0::int)
#107 := (not #98)
#92 := [and-elim #90]: #54
#96 := [hypothesis]: #98
#94 := [th-lemma #96 #92 #93]: false
#108 := [lemma #94]: #107
#109 := [hypothesis]: #103
#111 := (or #110 #98)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109 #108]: false
#114 := [lemma #113]: #110
#106 := (or #105 #103)
#101 := [def-axiom]: #106
#117 := [unit-resolution #101 #114]: #105
#102 := (or #64 #104)
#99 := [def-axiom]: #102
#118 := [unit-resolution #99 #117]: #104
#119 := (not #104)
#120 := (or #119 #116)
#121 := [th-lemma]: #120
#122 := [unit-resolution #121 #118]: #116
[th-lemma #122 #91 #93]: false
unsat
9c2cfdc304fee997e8f612dd9123abd86a877f29 88 0
#2 := false
decl f4 :: int
#9 := f4
decl f3 :: int
#8 := f3
#38 := 0::int
#35 := -1::int
#36 := (* -1::int f4)
#37 := (+ f3 #36)
#46 := (>= #37 0::int)
#48 := (ite #46 f3 f4)
#39 := (<= #37 0::int)
#42 := (ite #39 f4 f3)
#51 := (= #42 #48)
#33 := (= f3 #48)
#65 := (= f4 #48)
#66 := (not #46)
#71 := [hypothesis]: #66
#69 := (or #46 #65)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #71]: #65
#77 := (= #42 f4)
#61 := (= f4 #42)
#73 := (or #46 #39)
#74 := [th-lemma]: #73
#75 := [unit-resolution #74 #71]: #39
#63 := (not #39)
#64 := (or #63 #61)
#59 := [def-axiom]: #64
#76 := [unit-resolution #59 #75]: #61
#78 := [symm #76]: #77
#79 := [trans #78 #72]: #51
#54 := (not #51)
#12 := (<= f4 f3)
#13 := (ite #12 f3 f4)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#14 := (= #11 #13)
#15 := (not #14)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (= #13 #48)
#45 := (iff #12 #46)
#47 := [rewrite]: #45
#50 := [monotonicity #47]: #49
#43 := (= #11 #42)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#53 := [monotonicity #44 #50]: #52
#56 := [monotonicity #53]: #55
#32 := [asserted]: #15
#57 := [mp #32 #56]: #54
#80 := [unit-resolution #57 #79]: false
#81 := [lemma #80]: #46
#67 := (or #66 #33)
#68 := [def-axiom]: #67
#83 := [unit-resolution #68 #81]: #33
#107 := (= #42 f3)
#105 := (= f4 f3)
#82 := (= f3 f4)
#62 := (= f3 #42)
#95 := (not #62)
#96 := (iff #54 #95)
#93 := (iff #51 #62)
#91 := (iff #62 #51)
#86 := (= #48 #42)
#89 := (iff #86 #51)
#90 := [commutativity]: #89
#87 := (iff #62 #86)
#88 := [monotonicity #83]: #87
#92 := [trans #88 #90]: #91
#94 := [symm #92]: #93
#97 := [monotonicity #94]: #96
#98 := [mp #57 #97]: #95
#60 := (or #39 #62)
#58 := [def-axiom]: #60
#99 := [unit-resolution #58 #98]: #39
#101 := (or #82 #63 #66)
#102 := [th-lemma]: #101
#103 := [unit-resolution #102 #99 #81]: #82
#106 := [symm #103]: #105
#100 := [unit-resolution #59 #99]: #61
#104 := [symm #100]: #77
#108 := [trans #104 #106]: #107
#109 := [trans #108 #83]: #51
[unit-resolution #57 #109]: false
unsat
efdfb7635dd41e99f117d8463d9d75f3897207dd 56 0
#2 := false
#11 := 1::int
decl f3 :: int
#9 := f3
#14 := (= f3 1::int)
#12 := (<= f3 1::int)
#8 := 0::int
#41 := (<= f3 0::int)
#42 := (not #41)
#48 := (and #12 #42)
#53 := (not #48)
#59 := (or #14 #53)
#64 := (not #59)
#10 := (< 0::int f3)
#13 := (and #10 #12)
#15 := (implies #13 #14)
#16 := (not #15)
#67 := (iff #16 #64)
#34 := (not #13)
#35 := (or #34 #14)
#38 := (not #35)
#65 := (iff #38 #64)
#62 := (iff #35 #59)
#56 := (or #53 #14)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #35 #56)
#54 := (iff #34 #53)
#51 := (iff #13 #48)
#45 := (and #42 #12)
#49 := (iff #45 #48)
#50 := [rewrite]: #49
#46 := (iff #13 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#52 := [trans #47 #50]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#68 := [trans #40 #66]: #67
#33 := [asserted]: #16
#69 := [mp #33 #68]: #64
#72 := [not-or-elim #69]: #48
#73 := [and-elim #72]: #12
#74 := [and-elim #72]: #42
#85 := [th-lemma #74 #73]: #14
#70 := (not #14)
#71 := [not-or-elim #69]: #70
[unit-resolution #71 #85]: false
unsat
66ca5933e35ee3faa0336268f65c331335330f57 66 0
#2 := false
decl f3 :: int
#9 := f3
#8 := 0::int
#11 := (<= f3 0::int)
#12 := (ite #11 0::int f3)
#33 := (= f3 #12)
#84 := (= 0::int #12)
#78 := (= #12 0::int)
#68 := (not #33)
#50 := (>= f3 0::int)
#51 := (not #50)
#57 := (or #33 #51)
#62 := (not #57)
#13 := (= #12 f3)
#10 := (<= 0::int f3)
#14 := (implies #10 #13)
#15 := (not #14)
#65 := (iff #15 #62)
#39 := (not #10)
#40 := (or #39 #33)
#45 := (not #40)
#63 := (iff #45 #62)
#60 := (iff #40 #57)
#54 := (or #51 #33)
#58 := (iff #54 #57)
#59 := [rewrite]: #58
#55 := (iff #40 #54)
#52 := (iff #39 #51)
#48 := (iff #10 #50)
#49 := [rewrite]: #48
#53 := [monotonicity #49]: #52
#56 := [monotonicity #53]: #55
#61 := [trans #56 #59]: #60
#64 := [monotonicity #61]: #63
#46 := (iff #15 #45)
#43 := (iff #14 #40)
#36 := (implies #10 #33)
#41 := (iff #36 #40)
#42 := [rewrite]: #41
#37 := (iff #14 #36)
#34 := (iff #13 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#44 := [trans #38 #42]: #43
#47 := [monotonicity #44]: #46
#66 := [trans #47 #64]: #65
#32 := [asserted]: #15
#67 := [mp #32 #66]: #62
#69 := [not-or-elim #67]: #68
#76 := (or #11 #33)
#77 := [def-axiom]: #76
#75 := [unit-resolution #77 #69]: #11
#79 := (not #11)
#80 := (or #79 #78)
#81 := [def-axiom]: #80
#73 := [unit-resolution #81 #75]: #78
#85 := [symm #73]: #84
#74 := (= f3 0::int)
#70 := [not-or-elim #67]: #50
#71 := (or #74 #79 #51)
#82 := [th-lemma]: #71
#83 := [unit-resolution #82 #75 #70]: #74
#86 := [trans #83 #85]: #33
[unit-resolution #69 #86]: false
unsat
6a196ac012aba8c7b41b1d8437b14fc3fb23e5a4 18 0
#2 := false
decl f3 :: int
#8 := f3
#9 := (<= f3 f3)
#10 := (not #9)
#37 := (iff #10 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#30 := (iff #9 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#27 := [asserted]: #10
[mp #27 #38]: false
unsat
a176c257f1c89ffea971e08639242e005fb1222f 228 0
#2 := false
#9 := 0::int
decl f4 :: int
#14 := f4
#40 := -1::int
#55 := (* -1::int f4)
#91 := (>= f4 0::int)
#98 := (ite #91 f4 #55)
#103 := (* -1::int #98)
#159 := (+ f4 #103)
#160 := (<= #159 0::int)
#134 := (= f4 #98)
decl f3 :: int
#8 := f3
#109 := (+ f3 #55)
#110 := (<= #109 0::int)
#113 := (ite #110 f4 f3)
#155 := (* -1::int #113)
#180 := (+ f3 #155)
#190 := (<= #180 0::int)
#146 := (= f3 #113)
#147 := (not #110)
#76 := (>= f3 0::int)
#161 := (+ #55 #103)
#179 := (<= #161 0::int)
#200 := (not #179)
#77 := (not #76)
#168 := [hypothesis]: #77
#145 := (= f4 #113)
#205 := (not #145)
#156 := (+ f4 #155)
#157 := (<= #156 0::int)
#176 := (not #157)
#188 := (or #176 #76)
#132 := (= #55 #98)
#92 := (not #91)
#174 := [hypothesis]: #157
#177 := (or #92 #176 #76)
#162 := [hypothesis]: #91
#141 := (or #92 #134)
#142 := [def-axiom]: #141
#163 := [unit-resolution #142 #162]: #134
#164 := (not #134)
#165 := (or #164 #160)
#166 := [th-lemma]: #165
#167 := [unit-resolution #166 #163]: #160
#41 := (* -1::int f3)
#83 := (ite #76 f3 #41)
#88 := (* -1::int #83)
#152 := (+ #41 #88)
#153 := (<= #152 0::int)
#138 := (= #41 #83)
#135 := (or #76 #138)
#136 := [def-axiom]: #135
#169 := [unit-resolution #136 #168]: #138
#170 := (not #138)
#171 := (or #170 #153)
#172 := [th-lemma]: #171
#173 := [unit-resolution #172 #169]: #153
#122 := (+ #98 #113)
#123 := (+ #83 #122)
#120 := (>= #123 0::int)
#126 := (not #120)
#19 := (<= f3 f4)
#20 := (ite #19 f4 f3)
#16 := (- f4)
#15 := (< f4 0::int)
#17 := (ite #15 #16 f4)
#11 := (- f3)
#10 := (< f3 0::int)
#12 := (ite #10 #11 f3)
#13 := (- #12)
#18 := (- #13 #17)
#21 := (<= #18 #20)
#22 := (not #21)
#129 := (iff #22 #126)
#58 := (ite #15 #55 f4)
#64 := (* -1::int #58)
#44 := (ite #10 #41 f3)
#50 := (* -1::int #44)
#65 := (+ #50 #64)
#70 := (<= #65 #20)
#73 := (not #70)
#127 := (iff #73 #126)
#124 := (iff #70 #120)
#106 := (+ #88 #103)
#116 := (<= #106 #113)
#119 := (iff #116 #120)
#121 := [rewrite]: #119
#117 := (iff #70 #116)
#114 := (= #20 #113)
#111 := (iff #19 #110)
#112 := [rewrite]: #111
#115 := [monotonicity #112]: #114
#107 := (= #65 #106)
#104 := (= #64 #103)
#101 := (= #58 #98)
#95 := (ite #92 #55 f4)
#99 := (= #95 #98)
#100 := [rewrite]: #99
#96 := (= #58 #95)
#93 := (iff #15 #92)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#102 := [trans #97 #100]: #101
#105 := [monotonicity #102]: #104
#89 := (= #50 #88)
#86 := (= #44 #83)
#80 := (ite #77 #41 f3)
#84 := (= #80 #83)
#85 := [rewrite]: #84
#81 := (= #44 #80)
#78 := (iff #10 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#108 := [monotonicity #90 #105]: #107
#118 := [monotonicity #108 #115]: #117
#125 := [trans #118 #121]: #124
#128 := [monotonicity #125]: #127
#74 := (iff #22 #73)
#71 := (iff #21 #70)
#68 := (= #18 #65)
#61 := (- #50 #58)
#66 := (= #61 #65)
#67 := [rewrite]: #66
#62 := (= #18 #61)
#59 := (= #17 #58)
#56 := (= #16 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#53 := (= #13 #50)
#47 := (- #44)
#51 := (= #47 #50)
#52 := [rewrite]: #51
#48 := (= #13 #47)
#45 := (= #12 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#54 := [trans #49 #52]: #53
#63 := [monotonicity #54 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#130 := [trans #75 #128]: #129
#39 := [asserted]: #22
#131 := [mp #39 #130]: #126
#175 := [th-lemma #162 #174 #131 #168 #173 #167]: false
#178 := [lemma #175]: #177
#181 := [unit-resolution #178 #174 #168]: #92
#143 := (or #91 #132)
#144 := [def-axiom]: #143
#182 := [unit-resolution #144 #181]: #132
#183 := (not #132)
#184 := (or #183 #179)
#185 := [th-lemma]: #184
#186 := [unit-resolution #185 #182]: #179
#187 := [th-lemma #174 #131 #168 #173 #186]: false
#189 := [lemma #187]: #188
#210 := [unit-resolution #189 #168]: #176
#206 := (or #205 #157)
#203 := [hypothesis]: #176
#204 := [hypothesis]: #145
#207 := [th-lemma]: #206
#208 := [unit-resolution #207 #204 #203]: false
#209 := [lemma #208]: #206
#211 := [unit-resolution #209 #210]: #205
#148 := (or #147 #145)
#149 := [def-axiom]: #148
#212 := [unit-resolution #149 #211]: #147
#201 := (or #110 #200 #76)
#192 := [hypothesis]: #147
#150 := (or #110 #146)
#151 := [def-axiom]: #150
#193 := [unit-resolution #151 #192]: #146
#194 := (not #146)
#195 := (or #194 #190)
#196 := [th-lemma]: #195
#197 := [unit-resolution #196 #193]: #190
#198 := [hypothesis]: #179
#199 := [th-lemma #131 #173 #198 #168 #192 #197]: false
#202 := [lemma #199]: #201
#213 := [unit-resolution #202 #212 #168]: #200
#214 := (or #92 #76 #110)
#215 := [th-lemma]: #214
#216 := [unit-resolution #215 #168 #212]: #92
#217 := [unit-resolution #144 #216]: #132
#218 := [unit-resolution #185 #217 #213]: false
#219 := [lemma #218]: #76
#222 := [hypothesis]: #92
#223 := (or #147 #77 #91)
#224 := [th-lemma]: #223
#225 := [unit-resolution #224 #222 #219]: #147
#226 := [unit-resolution #151 #225]: #146
#227 := [unit-resolution #196 #226]: #190
#228 := [unit-resolution #144 #222]: #132
#229 := [unit-resolution #185 #228]: #179
#154 := (+ f3 #88)
#158 := (<= #154 0::int)
#137 := (= f3 #83)
#139 := (or #77 #137)
#140 := [def-axiom]: #139
#230 := [unit-resolution #140 #219]: #137
#231 := (not #137)
#232 := (or #231 #158)
#233 := [th-lemma]: #232
#234 := [unit-resolution #233 #230]: #158
#235 := [th-lemma #219 #131 #234 #229 #225 #227]: false
#236 := [lemma #235]: #91
#237 := [unit-resolution #142 #236]: #134
#238 := [unit-resolution #166 #237]: #160
#239 := (not #160)
#240 := (or #179 #239 #92)
#241 := [th-lemma]: #240
#242 := [unit-resolution #241 #236 #238]: #179
#243 := (not #158)
#244 := (or #176 #77 #120 #243 #200)
#245 := [th-lemma]: #244
#246 := [unit-resolution #245 #242 #219 #131 #234]: #176
#247 := [unit-resolution #209 #246]: #205
#248 := [unit-resolution #149 #247]: #147
#249 := [unit-resolution #151 #248]: #146
#250 := [unit-resolution #196 #249]: #190
[th-lemma #236 #250 #131 #234 #248 #238]: false
unsat
4afe860c901fd901bf34dc83b799fd986f9e4155 51 0
#2 := false
decl f4 :: int
#9 := f4
#11 := 3::int
#13 := (* 3::int f4)
decl f3 :: int
#8 := f3
#12 := (* 3::int f3)
#14 := (<= #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#67 := (iff #16 false)
#34 := (not #10)
#35 := (or #34 #14)
#38 := (not #35)
#65 := (iff #38 false)
#1 := true
#60 := (not true)
#63 := (iff #60 false)
#64 := [rewrite]: #63
#61 := (iff #38 #60)
#58 := (iff #35 true)
#44 := 0::int
#41 := -1::int
#42 := (* -1::int f4)
#43 := (+ f3 #42)
#45 := (<= #43 0::int)
#48 := (not #45)
#53 := (or #48 #45)
#56 := (iff #53 true)
#57 := [rewrite]: #56
#54 := (iff #35 #53)
#51 := (iff #14 #45)
#52 := [rewrite]: #51
#49 := (iff #34 #48)
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#55 := [monotonicity #50 #52]: #54
#59 := [trans #55 #57]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#68 := [trans #40 #66]: #67
#33 := [asserted]: #16
[mp #33 #68]: false
unsat
5551b99ea77d386f007b1b1979a0b6b379c3a347 56 0
#2 := false
decl f4 :: int
#9 := f4
#11 := 3::int
#13 := (* 3::int f4)
decl f3 :: int
#8 := f3
#12 := (* 3::int f3)
#14 := (< #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#72 := (iff #16 false)
#34 := (not #10)
#35 := (or #34 #14)
#38 := (not #35)
#70 := (iff #38 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #38 #65)
#63 := (iff #35 true)
#43 := 0::int
#41 := -1::int
#45 := (* -1::int f4)
#46 := (+ f3 #45)
#44 := (>= #46 0::int)
#42 := (not #44)
#57 := (or #44 #42)
#61 := (iff #57 true)
#62 := [rewrite]: #61
#59 := (iff #35 #57)
#58 := (iff #14 #42)
#56 := [rewrite]: #58
#54 := (iff #34 #44)
#49 := (not #42)
#52 := (iff #49 #44)
#53 := [rewrite]: #52
#50 := (iff #34 #49)
#47 := (iff #10 #42)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#60 := [monotonicity #55 #56]: #59
#64 := [trans #60 #62]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#73 := [trans #40 #71]: #72
#33 := [asserted]: #16
[mp #33 #73]: false
unsat
76fdd03dce324fb45070b1e1983f0a282cda6fa6 52 0
#2 := false
#40 := 0::int
decl f4 :: int
#9 := f4
#38 := -1::int
#42 := (* -1::int f4)
decl f3 :: int
#8 := f3
#43 := (+ f3 #42)
#53 := (<= #43 0::int)
#66 := (not #53)
#41 := (>= #43 0::int)
#56 := (or #41 #53)
#59 := (not #56)
#11 := (<= f3 f4)
#10 := (< f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#62 := (iff #13 #59)
#31 := (not #10)
#32 := (or #31 #11)
#35 := (not #32)
#60 := (iff #35 #59)
#57 := (iff #32 #56)
#54 := (iff #11 #53)
#55 := [rewrite]: #54
#51 := (iff #31 #41)
#39 := (not #41)
#46 := (not #39)
#49 := (iff #46 #41)
#50 := [rewrite]: #49
#47 := (iff #31 #46)
#44 := (iff #10 #39)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#58 := [monotonicity #52 #55]: #57
#61 := [monotonicity #58]: #60
#36 := (iff #13 #35)
#33 := (iff #12 #32)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#63 := [trans #37 #61]: #62
#30 := [asserted]: #13
#64 := [mp #30 #63]: #59
#67 := [not-or-elim #64]: #66
#65 := [not-or-elim #64]: #39
#75 := (or #53 #41)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #65]: #53
[unit-resolution #77 #67]: false
unsat
550f7d68b0836924510ab12e5b3c4ed9f6c794bb 73 0
#2 := false
#58 := 0::int
decl f4 :: int
#9 := f4
#51 := -1::int
#52 := (* -1::int f4)
decl f3 :: int
#8 := f3
#53 := (+ f3 #52)
#59 := (>= #53 0::int)
#54 := (<= #53 -1::int)
#79 := (not #54)
#57 := (not #59)
#86 := [hypothesis]: #57
#84 := (or #79 #59)
#69 := (iff #54 #59)
#11 := 1::int
#12 := (+ f3 1::int)
#13 := (<= #12 f4)
#10 := (< f3 f4)
#14 := (iff #10 #13)
#15 := (not #14)
#72 := (iff #15 #69)
#45 := (not #10)
#33 := (+ 1::int f3)
#36 := (<= #33 f4)
#46 := (iff #36 #45)
#70 := (iff #46 #69)
#67 := (iff #45 #59)
#62 := (not #57)
#65 := (iff #62 #59)
#66 := [rewrite]: #65
#63 := (iff #45 #62)
#60 := (iff #10 #57)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#55 := (iff #36 #54)
#56 := [rewrite]: #55
#71 := [monotonicity #56 #68]: #70
#49 := (iff #15 #46)
#39 := (iff #10 #36)
#42 := (not #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #15 #42)
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#34 := (= #12 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#73 := [trans #50 #71]: #72
#32 := [asserted]: #15
#74 := [mp #32 #73]: #69
#80 := (not #69)
#77 := (or #79 #59 #80)
#75 := [def-axiom]: #77
#85 := [unit-resolution #75 #74]: #84
#87 := [unit-resolution #85 #86]: #79
#88 := [th-lemma #86 #87]: false
#89 := [lemma #88]: #59
#90 := (or #57 #79)
#91 := [th-lemma]: #90
#92 := [unit-resolution #91 #89]: #79
#83 := (or #54 #57)
#81 := (or #54 #57 #80)
#82 := [def-axiom]: #81
#78 := [unit-resolution #82 #74]: #83
[unit-resolution #78 #92 #89]: false
unsat
0eeabd2aea1625cea2b9a9ade1eee621e6dfb534 17 0
#2 := false
#8 := 0::real
#9 := (= 0::real 0::real)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
65c77124096528f9cb7c1cb6b89625b62f5eeb2a 15 0
#2 := false
decl f3 :: int
#8 := f3
#9 := (< f3 f3)
#10 := (not #9)
#11 := (not #10)
#33 := (iff #11 false)
#31 := (iff #9 false)
#32 := [rewrite]: #31
#29 := (iff #11 #9)
#30 := [rewrite]: #29
#34 := [trans #30 #32]: #33
#28 := [asserted]: #11
[mp #28 #34]: false
unsat
582ef11d89a67dd029d6b29272ca6688d8312bd7 25 0
#2 := false
#8 := 0::real
#9 := (- 0::real)
#10 := (= 0::real #9)
#11 := (not #10)
#43 := (iff #11 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #11 #38)
#36 := (iff #10 true)
#31 := (= 0::real 0::real)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #10 #31)
#29 := (= #9 0::real)
#30 := [rewrite]: #29
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#28 := [asserted]: #11
[mp #28 #44]: false
unsat
8aa9d7db6e905a29f4a4232a6a82f51c63e2641b 75 0
#2 := false
#53 := 0::int
decl f4 :: int
#9 := f4
#50 := -1::int
#64 := (* -1::int f4)
decl f3 :: int
#8 := f3
#65 := (+ f3 #64)
#66 := (<= #65 0::int)
#69 := (not #66)
decl f5 :: int
#11 := f5
#51 := (* -1::int f5)
#60 := (+ f3 #51)
#61 := (<= #60 0::int)
#52 := (+ f4 #51)
#54 := (<= #52 0::int)
#57 := (not #54)
#78 := (or #57 #61 #69)
#83 := (not #78)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#86 := (iff #16 #83)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#84 := (iff #47 #83)
#81 := (iff #42 #78)
#72 := (or #57 #61)
#75 := (or #69 #72)
#79 := (iff #75 #78)
#80 := [rewrite]: #79
#76 := (iff #42 #75)
#73 := (iff #35 #72)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#58 := (iff #34 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#74 := [monotonicity #59 #63]: #73
#70 := (iff #41 #69)
#67 := (iff #10 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [monotonicity #71 #74]: #76
#82 := [trans #77 #80]: #81
#85 := [monotonicity #82]: #84
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#87 := [trans #49 #85]: #86
#33 := [asserted]: #16
#88 := [mp #33 #87]: #83
#92 := [not-or-elim #88]: #66
#90 := (not #61)
#91 := [not-or-elim #88]: #90
#89 := [not-or-elim #88]: #54
[th-lemma #89 #91 #92]: false
unsat
4de73c1caf8d03027271f9dfec62b23debf65d9b 17 0
#2 := false
#8 := 1::real
#9 := (= 1::real 1::real)
#10 := (not #9)
#35 := (iff #10 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #10 #30)
#28 := (iff #9 true)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#27 := [asserted]: #10
[mp #27 #36]: false
unsat
625ca444862ba21a1fa0a52470751952d4f5acee 80 0
#2 := false
#53 := 0::int
decl f4 :: int
#9 := f4
#50 := -1::int
#66 := (* -1::int f4)
decl f3 :: int
#8 := f3
#67 := (+ f3 #66)
#65 := (>= #67 0::int)
#64 := (not #65)
decl f5 :: int
#11 := f5
#51 := (* -1::int f5)
#60 := (+ f3 #51)
#61 := (<= #60 0::int)
#52 := (+ f4 #51)
#54 := (<= #52 0::int)
#57 := (not #54)
#83 := (or #57 #61 #65)
#88 := (not #83)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#91 := (iff #16 #88)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#89 := (iff #47 #88)
#86 := (iff #42 #83)
#77 := (or #57 #61)
#80 := (or #65 #77)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #42 #80)
#78 := (iff #35 #77)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#58 := (iff #34 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#79 := [monotonicity #59 #63]: #78
#75 := (iff #41 #65)
#70 := (not #64)
#73 := (iff #70 #65)
#74 := [rewrite]: #73
#71 := (iff #41 #70)
#68 := (iff #10 #64)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#82 := [monotonicity #76 #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#92 := [trans #49 #90]: #91
#33 := [asserted]: #16
#93 := [mp #33 #92]: #88
#97 := [not-or-elim #93]: #64
#95 := (not #61)
#96 := [not-or-elim #93]: #95
#94 := [not-or-elim #93]: #54
[th-lemma #94 #96 #97]: false
unsat
793c5962cbb9973917b8d8c66a2d2a3d94594803 34 0
#2 := false
#8 := 1::real
#9 := (- 1::real)
#10 := (= #9 1::real)
#11 := (not #10)
#12 := (not #11)
#52 := (iff #12 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 true)
#40 := (not false)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 false)
#30 := -1::real
#33 := (= -1::real 1::real)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (= #9 -1::real)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#29 := [asserted]: #12
[mp #29 #53]: false
unsat
8f6bb26e23c49df219a9fc6920a8bbad56872cba 18 0
#2 := false
#9 := 1::real
#8 := 0::real
#10 := (< 0::real 1::real)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
59582f385e59c3a49a302bb1b9701c92bb368fac 80 0
#2 := false
#52 := 0::int
decl f4 :: int
#9 := f4
#50 := -1::int
#69 := (* -1::int f4)
decl f3 :: int
#8 := f3
#70 := (+ f3 #69)
#71 := (<= #70 0::int)
#74 := (not #71)
decl f5 :: int
#11 := f5
#54 := (* -1::int f5)
#65 := (+ f3 #54)
#66 := (<= #65 0::int)
#55 := (+ f4 #54)
#53 := (>= #55 0::int)
#83 := (or #53 #66 #74)
#88 := (not #83)
#13 := (<= f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#91 := (iff #16 #88)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#89 := (iff #47 #88)
#86 := (iff #42 #83)
#77 := (or #53 #66)
#80 := (or #74 #77)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #42 #80)
#78 := (iff #35 #77)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#63 := (iff #34 #53)
#51 := (not #53)
#58 := (not #51)
#61 := (iff #58 #53)
#62 := [rewrite]: #61
#59 := (iff #34 #58)
#56 := (iff #12 #51)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#79 := [monotonicity #64 #68]: #78
#75 := (iff #41 #74)
#72 := (iff #10 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [monotonicity #76 #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#92 := [trans #49 #90]: #91
#33 := [asserted]: #16
#93 := [mp #33 #92]: #88
#97 := [not-or-elim #93]: #71
#94 := [not-or-elim #93]: #51
#95 := (not #66)
#96 := [not-or-elim #93]: #95
[th-lemma #96 #94 #97]: false
unsat
6edbad6a7b2935c8d856f03c54b56bf43891a380 18 0
#2 := false
#9 := 1::real
#8 := 0::real
#10 := (<= 0::real 1::real)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
6dfe89c45e68ba796109229b1c54d23603c64ded 85 0
#2 := false
#52 := 0::int
decl f4 :: int
#9 := f4
#50 := -1::int
#72 := (* -1::int f4)
decl f3 :: int
#8 := f3
#73 := (+ f3 #72)
#71 := (>= #73 0::int)
#70 := (not #71)
decl f5 :: int
#11 := f5
#54 := (* -1::int f5)
#67 := (+ f3 #54)
#66 := (>= #67 0::int)
#65 := (not #66)
#55 := (+ f4 #54)
#53 := (>= #55 0::int)
#89 := (or #53 #65 #71)
#94 := (not #89)
#13 := (< f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#97 := (iff #16 #94)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#95 := (iff #47 #94)
#92 := (iff #42 #89)
#83 := (or #53 #65)
#86 := (or #71 #83)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #42 #86)
#84 := (iff #35 #83)
#68 := (iff #13 #65)
#69 := [rewrite]: #68
#63 := (iff #34 #53)
#51 := (not #53)
#58 := (not #51)
#61 := (iff #58 #53)
#62 := [rewrite]: #61
#59 := (iff #34 #58)
#56 := (iff #12 #51)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#85 := [monotonicity #64 #69]: #84
#81 := (iff #41 #71)
#76 := (not #70)
#79 := (iff #76 #71)
#80 := [rewrite]: #79
#77 := (iff #41 #76)
#74 := (iff #10 #70)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#88 := [monotonicity #82 #85]: #87
#93 := [trans #88 #91]: #92
#96 := [monotonicity #93]: #95
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#98 := [trans #49 #96]: #97
#33 := [asserted]: #16
#99 := [mp #33 #98]: #94
#102 := [not-or-elim #99]: #70
#100 := [not-or-elim #99]: #51
#101 := [not-or-elim #99]: #66
[th-lemma #101 #100 #102]: false
unsat
a64bea89744a3af0ed560a5c871536de3fcb2ecf 40 0
#2 := false
#12 := 567::real
#10 := 345::real
#8 := 123::real
#9 := (- 123::real)
#11 := (+ #9 345::real)
#13 := (< #11 567::real)
#14 := (not #13)
#58 := (iff #14 false)
#38 := 222::real
#43 := (< 222::real 567::real)
#46 := (not #43)
#56 := (iff #46 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #46 #51)
#49 := (iff #43 true)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#41 := (= #11 222::real)
#32 := -123::real
#35 := (+ -123::real 345::real)
#39 := (= #35 222::real)
#40 := [rewrite]: #39
#36 := (= #11 #35)
#33 := (= #9 -123::real)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#42 := [trans #37 #40]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#59 := [trans #48 #57]: #58
#31 := [asserted]: #14
[mp #31 #59]: false
unsat
650b9ceb8c2cf801e6ceee5375af886f013abe2c 69 0
#2 := false
#44 := 0::int
decl f5 :: int
#11 := f5
#42 := -1::int
#51 := (* -1::int f5)
decl f3 :: int
#8 := f3
#62 := (+ f3 #51)
#63 := (<= #62 0::int)
#64 := (not #63)
decl f4 :: int
#9 := f4
#52 := (+ f4 #51)
#50 := (>= #52 0::int)
#53 := (not #50)
#46 := (* -1::int f4)
#47 := (+ f3 #46)
#45 := (>= #47 0::int)
#43 := (not #45)
#56 := (and #43 #53)
#59 := (not #56)
#74 := (or #59 #63)
#77 := (not #74)
#14 := (< f5 f3)
#15 := (not #14)
#12 := (< f4 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (not #16)
#80 := (iff #17 #77)
#35 := (not #13)
#36 := (or #35 #15)
#39 := (not #36)
#78 := (iff #39 #77)
#75 := (iff #36 #74)
#72 := (iff #15 #63)
#67 := (not #64)
#70 := (iff #67 #63)
#71 := [rewrite]: #70
#68 := (iff #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#60 := (iff #35 #59)
#57 := (iff #13 #56)
#54 := (iff #12 #53)
#55 := [rewrite]: #54
#48 := (iff #10 #43)
#49 := [rewrite]: #48
#58 := [monotonicity #49 #55]: #57
#61 := [monotonicity #58]: #60
#76 := [monotonicity #61 #73]: #75
#79 := [monotonicity #76]: #78
#40 := (iff #17 #39)
#37 := (iff #16 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#81 := [trans #41 #79]: #80
#34 := [asserted]: #17
#82 := [mp #34 #81]: #77
#86 := [not-or-elim #82]: #64
#83 := [not-or-elim #82]: #56
#84 := [and-elim #83]: #43
#85 := [and-elim #83]: #53
[th-lemma #85 #84 #86]: false
unsat
a79ee55daec933b360adb88ed0db37156e2f7821 18 0
#2 := false
#9 := 2345678901::real
#8 := 123456789::real
#10 := (< 123456789::real 2345678901::real)
#11 := (not #10)
#38 := (iff #11 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (iff #10 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#28 := [asserted]: #11
[mp #28 #39]: false
unsat
4b51b4eed1dc4e4e6099fbf906b70822230d5e3f 30 0
#2 := false
#10 := 2345678901::real
#8 := 123456789::real
#9 := (- 123456789::real)
#11 := (< #9 2345678901::real)
#12 := (not #11)
#48 := (iff #12 false)
#30 := -123456789::real
#33 := (< -123456789::real 2345678901::real)
#36 := (not #33)
#46 := (iff #36 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #36 #41)
#39 := (iff #33 true)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#37 := (iff #12 #36)
#34 := (iff #11 #33)
#31 := (= #9 -123456789::real)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#38 := [monotonicity #35]: #37
#49 := [trans #38 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
209cf5d4457acae6abf17187fd6e89c259187362 26 0
#2 := false
decl f3 :: real
#8 := f3
#9 := 0::real
#10 := (+ f3 0::real)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
97dafa0bba507529233c05cc33dd1519b4e28e4b 26 0
#2 := false
decl f3 :: real
#9 := f3
#8 := 0::real
#10 := (+ 0::real f3)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
4a497c9573e0d4cf02c29e65ea385ac694a5d2a9 58 0
#2 := false
decl f3 :: real
#8 := f3
#10 := 0::real
#12 := (< 0::real f3)
#9 := (- f3)
#11 := (< #9 0::real)
#13 := (iff #11 #12)
#14 := (not #13)
#76 := (iff #14 false)
#50 := (not #12)
#32 := -1::real
#33 := (* -1::real f3)
#36 := (< #33 0::real)
#51 := (iff #36 #50)
#74 := (iff #51 false)
#56 := (<= f3 0::real)
#57 := (not #56)
#69 := (iff #57 #56)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #51 #69)
#67 := (iff #50 #56)
#62 := (not #57)
#65 := (iff #62 #56)
#66 := [rewrite]: #65
#63 := (iff #50 #62)
#60 := (iff #12 #57)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#58 := (iff #36 #57)
#59 := [rewrite]: #58
#71 := [monotonicity #59 #68]: #70
#75 := [trans #71 #73]: #74
#54 := (iff #14 #51)
#42 := (iff #12 #36)
#47 := (not #42)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #14 #47)
#45 := (iff #13 #42)
#39 := (iff #36 #12)
#43 := (iff #39 #42)
#44 := [rewrite]: #43
#40 := (iff #13 #39)
#37 := (iff #11 #36)
#34 := (= #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#77 := [trans #55 #75]: #76
#31 := [asserted]: #14
[mp #31 #77]: false
unsat
393f5dbb0db04527f22218d40363df111099baf5 29 0
#2 := false
decl f3 :: real
#8 := f3
decl f4 :: real
#9 := f4
#11 := (+ f4 f3)
#10 := (+ f3 f4)
#12 := (= #10 #11)
#13 := (not #12)
#45 := (iff #13 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #13 #40)
#38 := (iff #12 true)
#33 := (= #10 #10)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #12 #33)
#31 := (= #11 #10)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #13
[mp #30 #46]: false
unsat
5310d952762e8bd0d9db1c0127d9100532f42cf4 61 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#11 := (- f3)
#12 := (< #11 0::real)
#10 := (< 0::real f3)
#13 := (implies #10 #12)
#14 := (not #13)
#78 := (iff #14 false)
#32 := -1::real
#33 := (* -1::real f3)
#36 := (< #33 0::real)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#76 := (iff #48 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #48 #71)
#69 := (iff #43 true)
#51 := (<= f3 0::real)
#52 := (not #51)
#64 := (or #51 #52)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #43 #64)
#62 := (iff #36 #52)
#63 := [rewrite]: #62
#60 := (iff #42 #51)
#55 := (not #52)
#58 := (iff #55 #51)
#59 := [rewrite]: #58
#56 := (iff #42 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#66 := [monotonicity #61 #63]: #65
#70 := [trans #66 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#49 := (iff #14 #48)
#46 := (iff #13 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#79 := [trans #50 #77]: #78
#31 := [asserted]: #14
[mp #31 #79]: false
unsat
08018537eda07e4214b99470b7aa75706e7cd28c 33 0
#2 := false
decl f5 :: real
#10 := f5
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#13 := (+ f3 f4)
#14 := (+ #13 f5)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#48 := (iff #16 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #16 #43)
#41 := (iff #15 true)
#36 := (= #12 #12)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #15 #36)
#34 := (= #14 #12)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #16
[mp #33 #49]: false
unsat
aed50da01a066fa4f6c8e7af4a461d101bc09de0 61 0
#2 := false
decl f3 :: real
#8 := f3
#11 := (- f3)
#9 := 0::real
#12 := (< 0::real #11)
#10 := (< f3 0::real)
#13 := (implies #10 #12)
#14 := (not #13)
#78 := (iff #14 false)
#32 := -1::real
#33 := (* -1::real f3)
#36 := (< 0::real #33)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#76 := (iff #48 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #48 #71)
#69 := (iff #43 true)
#51 := (>= f3 0::real)
#52 := (not #51)
#64 := (or #51 #52)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #43 #64)
#62 := (iff #36 #52)
#63 := [rewrite]: #62
#60 := (iff #42 #51)
#55 := (not #52)
#58 := (iff #55 #51)
#59 := [rewrite]: #58
#56 := (iff #42 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#66 := [monotonicity #61 #63]: #65
#70 := [trans #66 #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#49 := (iff #14 #48)
#46 := (iff #13 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #13 #39)
#37 := (iff #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#79 := [trans #50 #77]: #78
#31 := [asserted]: #14
[mp #31 #79]: false
unsat
afbfb539cd215cee99e6f9076de9621f41db722f 45 0
#2 := false
decl f4 :: real
#9 := f4
#13 := (- f4)
decl f3 :: real
#8 := f3
#14 := (= f3 #13)
#11 := 0::real
#10 := (+ f3 f4)
#12 := (= #10 0::real)
#15 := (iff #12 #14)
#16 := (not #15)
#62 := (iff #16 false)
#47 := (not #12)
#34 := -1::real
#35 := (* -1::real f4)
#38 := (= f3 #35)
#48 := (iff #38 #47)
#60 := (iff #48 false)
#55 := (iff #12 #47)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #48 #55)
#53 := (iff #38 #12)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#51 := (iff #16 #48)
#41 := (iff #12 #38)
#44 := (not #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #16 #44)
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#36 := (= #13 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#63 := [trans #52 #61]: #62
#33 := [asserted]: #16
[mp #33 #63]: false
unsat
4c33a6158d9a09229cc4bfd8f383004f3cebc48a 26 0
#2 := false
decl f3 :: real
#8 := f3
#9 := 0::real
#10 := (- f3 0::real)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
5fa448e93a50f684d9003c71f7eb6c60b8908f77 32 0
#2 := false
decl f3 :: real
#9 := f3
#11 := (- f3)
#8 := 0::real
#10 := (- 0::real f3)
#12 := (= #10 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#31 := -1::real
#32 := (* -1::real f3)
#37 := (= #32 #32)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (= #11 #32)
#36 := [rewrite]: #35
#33 := (= #10 #32)
#34 := [rewrite]: #33
#39 := [monotonicity #34 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#30 := [asserted]: #13
[mp #30 #50]: false
unsat
abc85cf86b0b1c8a34cd74d5da49e570c77ddea0 64 0
#2 := false
#12 := 0::real
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#11 := (- f3 f4)
#13 := (< #11 0::real)
#10 := (< f3 f4)
#14 := (implies #10 #13)
#15 := (not #14)
#80 := (iff #15 false)
#33 := -1::real
#34 := (* -1::real f4)
#35 := (+ f3 #34)
#38 := (< #35 0::real)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#78 := (iff #50 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #50 #73)
#71 := (iff #45 true)
#54 := (>= #35 0::real)
#53 := (not #54)
#66 := (or #54 #53)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #45 #66)
#64 := (iff #38 #53)
#65 := [rewrite]: #64
#62 := (iff #44 #54)
#57 := (not #53)
#60 := (iff #57 #54)
#61 := [rewrite]: #60
#58 := (iff #44 #57)
#55 := (iff #10 #53)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#36 := (= #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#32 := [asserted]: #15
[mp #32 #81]: false
unsat
8084abd03f885814b6c145eb3fdc41f5a2cc85f8 44 0
#2 := false
decl f3 :: real
#8 := f3
decl f4 :: real
#9 := f4
#11 := (- f4 f3)
#12 := (- #11)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#60 := (iff #14 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#32 := -1::real
#33 := (* -1::real f4)
#34 := (+ f3 #33)
#48 := (= #34 #34)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (= #12 #34)
#37 := (* -1::real f3)
#38 := (+ #37 f4)
#41 := (- #38)
#44 := (= #41 #34)
#45 := [rewrite]: #44
#42 := (= #12 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#35 := (= #10 #34)
#36 := [rewrite]: #35
#50 := [monotonicity #36 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#31 := [asserted]: #14
[mp #31 #61]: false
unsat
9afe5717b3e2c9027579ba3e8d9d66db44c6cbda 42 0
#2 := false
decl f3 :: real
#8 := f3
decl f4 :: real
#9 := f4
#11 := (- f4)
#12 := (+ #11 f3)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#58 := (iff #14 false)
#1 := true
#53 := (not true)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #14 #53)
#51 := (iff #13 true)
#32 := -1::real
#33 := (* -1::real f4)
#34 := (+ f3 #33)
#46 := (= #34 #34)
#49 := (iff #46 true)
#50 := [rewrite]: #49
#47 := (iff #13 #46)
#44 := (= #12 #34)
#39 := (+ #33 f3)
#42 := (= #39 #34)
#43 := [rewrite]: #42
#40 := (= #12 #39)
#37 := (= #11 #33)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#35 := (= #10 #34)
#36 := [rewrite]: #35
#48 := [monotonicity #36 #45]: #47
#52 := [trans #48 #50]: #51
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#31 := [asserted]: #14
[mp #31 #59]: false
unsat
a1710b56b11072c592931adbf944a5bd3bc6efc2 48 0
#2 := false
decl f5 :: real
#11 := f5
decl f4 :: real
#9 := f4
#13 := (+ f4 f5)
decl f3 :: real
#8 := f3
#14 := (- f3 #13)
#10 := (- f3 f4)
#12 := (- #10 f5)
#15 := (= #12 #14)
#16 := (not #15)
#63 := (iff #16 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #16 #58)
#56 := (iff #15 true)
#34 := -1::real
#42 := (* -1::real f5)
#35 := (* -1::real f4)
#43 := (+ #35 #42)
#44 := (+ f3 #43)
#51 := (= #44 #44)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #15 #51)
#49 := (= #14 #44)
#50 := [rewrite]: #49
#47 := (= #12 #44)
#36 := (+ f3 #35)
#39 := (- #36 f5)
#45 := (= #39 #44)
#46 := [rewrite]: #45
#40 := (= #12 #39)
#37 := (= #10 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#48 := [trans #41 #46]: #47
#53 := [monotonicity #48 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#33 := [asserted]: #16
[mp #33 #64]: false
unsat
4611c2bccf9693379d8f36635022f4216eaaa919 30 0
#2 := false
#8 := 1::real
#9 := 2::real
#10 := (/ 1::real 2::real)
#11 := (< #10 1::real)
#12 := (not #11)
#48 := (iff #12 false)
#30 := 1/2::real
#33 := (< 1/2::real 1::real)
#36 := (not #33)
#46 := (iff #36 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #36 #41)
#39 := (iff #33 true)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#37 := (iff #12 #36)
#34 := (iff #11 #33)
#31 := (= #10 1/2::real)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#38 := [monotonicity #35]: #37
#49 := [trans #38 #47]: #48
#29 := [asserted]: #12
[mp #29 #49]: false
unsat
300cf7e266e08d39c05d69e60b19d0ac09a08a2e 27 0
#2 := false
#9 := 3::real
#8 := 1::real
#10 := (/ 1::real 3::real)
#11 := (= #10 #10)
#12 := (not #11)
#45 := (iff #12 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 true)
#30 := 1/3::real
#33 := (= 1/3::real 1/3::real)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #11 #33)
#31 := (= #10 1/3::real)
#32 := [rewrite]: #31
#35 := [monotonicity #32 #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#29 := [asserted]: #12
[mp #29 #46]: false
unsat
b59d35169428d1cd490a83e17435ecfc93225870 48 0
#2 := false
#9 := 3::real
#8 := 1::real
#12 := (- 1::real)
#13 := (/ #12 3::real)
#10 := (- 3::real)
#11 := (/ 1::real #10)
#14 := (= #11 #13)
#15 := (not #14)
#66 := (iff #15 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #15 #61)
#59 := (iff #14 true)
#39 := -1/3::real
#54 := (= -1/3::real -1/3::real)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #14 #54)
#52 := (= #13 -1/3::real)
#44 := -1::real
#47 := (/ -1::real 3::real)
#50 := (= #47 -1/3::real)
#51 := [rewrite]: #50
#48 := (= #13 #47)
#45 := (= #12 -1::real)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#42 := (= #11 -1/3::real)
#33 := -3::real
#36 := (/ 1::real -3::real)
#40 := (= #36 -1/3::real)
#41 := [rewrite]: #40
#37 := (= #11 #36)
#34 := (= #10 -3::real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#43 := [trans #38 #41]: #42
#56 := [monotonicity #43 #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#32 := [asserted]: #15
[mp #32 #67]: false
unsat
1c222157f628411945e7e47ef57130c5ba4ad155 36 0
#2 := false
#10 := 3::real
#8 := 1::real
#9 := (- 1::real)
#11 := (/ #9 3::real)
#12 := (= #11 #11)
#13 := (not #12)
#54 := (iff #13 false)
#1 := true
#49 := (not true)
#52 := (iff #49 false)
#53 := [rewrite]: #52
#50 := (iff #13 #49)
#47 := (iff #12 true)
#37 := -1/3::real
#42 := (= -1/3::real -1/3::real)
#45 := (iff #42 true)
#46 := [rewrite]: #45
#43 := (iff #12 #42)
#40 := (= #11 -1/3::real)
#31 := -1::real
#34 := (/ -1::real 3::real)
#38 := (= #34 -1/3::real)
#39 := [rewrite]: #38
#35 := (= #11 #34)
#32 := (= #9 -1::real)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#41 := [trans #36 #39]: #40
#44 := [monotonicity #41 #41]: #43
#48 := [trans #44 #46]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#30 := [asserted]: #13
[mp #30 #55]: false
unsat
e4a7188c884c4cc69972b6b4c9f7bcbb1cd3ef93 43 0
#2 := false
#10 := 3::real
#8 := 1::real
#13 := (/ 1::real 3::real)
#11 := (- 3::real)
#9 := (- 1::real)
#12 := (/ #9 #11)
#14 := (= #12 #13)
#15 := (not #14)
#61 := (iff #15 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #15 #56)
#54 := (iff #14 true)
#42 := 1/3::real
#49 := (= 1/3::real 1/3::real)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #14 #49)
#47 := (= #13 1/3::real)
#48 := [rewrite]: #47
#45 := (= #12 1/3::real)
#36 := -3::real
#33 := -1::real
#39 := (/ -1::real -3::real)
#43 := (= #39 1/3::real)
#44 := [rewrite]: #43
#40 := (= #12 #39)
#37 := (= #11 -3::real)
#38 := [rewrite]: #37
#34 := (= #9 -1::real)
#35 := [rewrite]: #34
#41 := [monotonicity #35 #38]: #40
#46 := [trans #41 #44]: #45
#51 := [monotonicity #46 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#32 := [asserted]: #15
[mp #32 #62]: false
unsat
b7bd87b08d1cd38b7e0db00083a20eb0fa944982 26 0
#2 := false
decl f3 :: real
#8 := f3
#9 := 1::real
#10 := (/ f3 1::real)
#11 := (= #10 f3)
#12 := (not #11)
#43 := (iff #12 false)
#1 := true
#38 := (not true)
#41 := (iff #38 false)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 true)
#31 := (= f3 f3)
#34 := (iff #31 true)
#35 := [rewrite]: #34
#32 := (iff #11 #31)
#30 := [rewrite]: #11
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#29 := [asserted]: #12
[mp #29 #44]: false
unsat
c3e8ed15657d66fdc6a77370b7e3994d0741653a 60 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#65 := 2/3::real
#66 := (* 2/3::real f3)
#67 := (<= #66 0::real)
#63 := (not #67)
#52 := (<= f3 0::real)
#69 := (or #52 #63)
#72 := (not #69)
#11 := 3::real
#12 := (/ f3 3::real)
#13 := (< #12 f3)
#10 := (< 0::real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#75 := (iff #15 #72)
#33 := 1/3::real
#34 := (* 1/3::real f3)
#37 := (< #34 f3)
#43 := (not #10)
#44 := (or #43 #37)
#49 := (not #44)
#73 := (iff #49 #72)
#70 := (iff #44 #69)
#64 := (iff #37 #63)
#68 := [rewrite]: #64
#61 := (iff #43 #52)
#53 := (not #52)
#56 := (not #53)
#59 := (iff #56 #52)
#60 := [rewrite]: #59
#57 := (iff #43 #56)
#54 := (iff #10 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#71 := [monotonicity #62 #68]: #70
#74 := [monotonicity #71]: #73
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#40 := (implies #10 #37)
#45 := (iff #40 #44)
#46 := [rewrite]: #45
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#35 := (= #12 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #39]: #41
#48 := [trans #42 #46]: #47
#51 := [monotonicity #48]: #50
#76 := [trans #51 #74]: #75
#32 := [asserted]: #15
#77 := [mp #32 #76]: #72
#79 := [not-or-elim #77]: #67
#78 := [not-or-elim #77]: #53
[th-lemma #78 #79]: false
unsat
05dd4ddb8672ca6d3f31acc3ffa7f7986078b232 60 0
#2 := false
#9 := 0::real
decl f3 :: real
#8 := f3
#67 := 2/3::real
#68 := (* 2/3::real f3)
#65 := (>= #68 0::real)
#63 := (not #65)
#54 := (>= f3 0::real)
#69 := (or #54 #63)
#72 := (not #69)
#11 := 3::real
#12 := (/ f3 3::real)
#13 := (< f3 #12)
#10 := (< f3 0::real)
#14 := (implies #10 #13)
#15 := (not #14)
#75 := (iff #15 #72)
#33 := 1/3::real
#34 := (* 1/3::real f3)
#37 := (< f3 #34)
#43 := (not #10)
#44 := (or #43 #37)
#49 := (not #44)
#73 := (iff #49 #72)
#70 := (iff #44 #69)
#64 := (iff #37 #63)
#66 := [rewrite]: #64
#61 := (iff #43 #54)
#52 := (not #54)
#56 := (not #52)
#59 := (iff #56 #54)
#60 := [rewrite]: #59
#57 := (iff #43 #56)
#53 := (iff #10 #52)
#55 := [rewrite]: #53
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#71 := [monotonicity #62 #66]: #70
#74 := [monotonicity #71]: #73
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#40 := (implies #10 #37)
#45 := (iff #40 #44)
#46 := [rewrite]: #45
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#35 := (= #12 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #39]: #41
#48 := [trans #42 #46]: #47
#51 := [monotonicity #48]: #50
#76 := [trans #51 #74]: #75
#32 := [asserted]: #15
#77 := [mp #32 #76]: #72
#79 := [not-or-elim #77]: #65
#78 := [not-or-elim #77]: #52
[th-lemma #78 #79]: false
unsat
b7a066feb9f43bcc3b0373cd9c9287361b54eff6 36 0
#2 := false
decl f3 :: real
#9 := f3
#8 := 3::real
#10 := (/ f3 3::real)
#11 := (* 3::real #10)
#12 := (= #11 f3)
#13 := (not #12)
#53 := (iff #13 false)
#1 := true
#48 := (not true)
#51 := (iff #48 false)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (iff #12 true)
#41 := (= f3 f3)
#44 := (iff #41 true)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#31 := 1/3::real
#32 := (* 1/3::real f3)
#35 := (* 3::real #32)
#38 := (= #35 f3)
#39 := [rewrite]: #38
#36 := (= #11 #35)
#33 := (= #10 #32)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#40 := [trans #37 #39]: #12
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#30 := [asserted]: #13
[mp #30 #54]: false
unsat
60b8185463f5b2ce142483f90c095e9accf8989c 35 0
#2 := false
decl f3 :: real
#8 := f3
#9 := 3::real
#10 := (* f3 3::real)
#11 := (/ #10 3::real)
#12 := (= #11 f3)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#40 := (= f3 f3)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#31 := (* 3::real f3)
#34 := (/ #31 3::real)
#37 := (= #34 f3)
#38 := [rewrite]: #37
#35 := (= #11 #34)
#32 := (= #10 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#39 := [trans #36 #38]: #12
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#30 := [asserted]: #13
[mp #30 #53]: false
unsat
2f685a966903afb267e7499dd8ad6b2b43caca93 75 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#32 := -1::real
#33 := (* -1::real f3)
#45 := (>= f3 0::real)
#52 := (ite #45 f3 #33)
#73 := (* -1::real #52)
#81 := (+ f3 #73)
#90 := (<= #81 0::real)
#76 := (= f3 #52)
#71 := (+ #33 #73)
#80 := (<= #71 0::real)
#77 := (= #33 #52)
#46 := (not #45)
#82 := [hypothesis]: #46
#74 := (or #45 #77)
#75 := [def-axiom]: #74
#83 := [unit-resolution #75 #82]: #77
#84 := (not #77)
#85 := (or #84 #80)
#86 := [th-lemma]: #85
#87 := [unit-resolution #86 #83]: #80
#61 := (>= #52 0::real)
#65 := (not #61)
#11 := (- f3)
#10 := (< f3 0::real)
#12 := (ite #10 #11 f3)
#13 := (<= 0::real #12)
#14 := (not #13)
#68 := (iff #14 #65)
#36 := (ite #10 #33 f3)
#39 := (<= 0::real #36)
#42 := (not #39)
#66 := (iff #42 #65)
#63 := (iff #39 #61)
#57 := (<= 0::real #52)
#60 := (iff #57 #61)
#62 := [rewrite]: #60
#58 := (iff #39 #57)
#55 := (= #36 #52)
#49 := (ite #46 #33 f3)
#53 := (= #49 #52)
#54 := [rewrite]: #53
#50 := (= #36 #49)
#47 := (iff #10 #46)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#43 := (iff #14 #42)
#40 := (iff #13 #39)
#37 := (= #12 #36)
#34 := (= #11 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#69 := [trans #44 #67]: #68
#31 := [asserted]: #14
#70 := [mp #31 #69]: #65
#88 := [th-lemma #82 #70 #87]: false
#89 := [lemma #88]: #45
#78 := (or #46 #76)
#79 := [def-axiom]: #78
#92 := [unit-resolution #79 #89]: #76
#93 := (not #76)
#94 := (or #93 #90)
#95 := [th-lemma]: #94
#96 := [unit-resolution #95 #92]: #90
[th-lemma #89 #70 #96]: false
unsat
8140105cc276b32acd77e4f2cd380fea1f24efd8 62 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#67 := 1/3::real
#68 := (* 1/3::real f3)
#69 := (<= #68 0::real)
#65 := (not #69)
#54 := (<= f3 0::real)
#71 := (or #54 #65)
#74 := (not #71)
#13 := 3::real
#11 := 2::real
#12 := (* 2::real f3)
#14 := (/ #12 3::real)
#15 := (< #14 f3)
#10 := (< 0::real f3)
#16 := (implies #10 #15)
#17 := (not #16)
#77 := (iff #17 #74)
#36 := 2/3::real
#37 := (* 2/3::real f3)
#39 := (< #37 f3)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#75 := (iff #51 #74)
#72 := (iff #46 #71)
#66 := (iff #39 #65)
#70 := [rewrite]: #66
#63 := (iff #45 #54)
#55 := (not #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#73 := [monotonicity #64 #70]: #72
#76 := [monotonicity #73]: #75
#52 := (iff #17 #51)
#49 := (iff #16 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #16 #42)
#40 := (iff #15 #39)
#35 := (= #14 #37)
#38 := [rewrite]: #35
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#78 := [trans #53 #76]: #77
#34 := [asserted]: #17
#79 := [mp #34 #78]: #74
#81 := [not-or-elim #79]: #69
#80 := [not-or-elim #79]: #55
[th-lemma #80 #81]: false
unsat
4a38ab99c62d0654d0c5bc149db3e769cf921224 132 0
#2 := false
#9 := 0::real
decl f3 :: real
#8 := f3
#66 := (>= f3 0::real)
#67 := (not #66)
#34 := -1::real
#35 := (* -1::real f3)
#73 := (ite #66 f3 #35)
#102 := (= f3 #73)
#130 := (not #102)
#14 := (= f3 0::real)
#82 := (= #73 0::real)
#124 := (iff #82 #14)
#122 := (iff #14 #82)
#121 := [hypothesis]: #102
#123 := [monotonicity #121]: #122
#125 := [symm #123]: #124
#131 := (or #82 #130)
#60 := (not #14)
#99 := (not #82)
#126 := (iff #99 #60)
#127 := [monotonicity #125]: #126
#119 := [hypothesis]: #99
#128 := [mp #119 #127]: #60
#112 := (or #14 #82)
#89 := (iff #60 #82)
#11 := (- f3)
#10 := (< f3 0::real)
#12 := (ite #10 #11 f3)
#13 := (= #12 0::real)
#15 := (iff #13 #14)
#16 := (not #15)
#94 := (iff #16 #89)
#38 := (ite #10 #35 f3)
#44 := (= 0::real #38)
#61 := (iff #44 #60)
#92 := (iff #61 #89)
#86 := (iff #82 #60)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #61 #86)
#84 := (iff #44 #82)
#78 := (= 0::real #73)
#81 := (iff #78 #82)
#83 := [rewrite]: #81
#79 := (iff #44 #78)
#76 := (= #38 #73)
#70 := (ite #67 #35 f3)
#74 := (= #70 #73)
#75 := [rewrite]: #74
#71 := (= #38 #70)
#68 := (iff #10 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#77 := [trans #72 #75]: #76
#80 := [monotonicity #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#64 := (iff #16 #61)
#52 := (iff #14 #44)
#57 := (not #52)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #16 #57)
#55 := (iff #15 #52)
#49 := (iff #44 #14)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #15 #49)
#47 := (iff #13 #44)
#41 := (= #38 0::real)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #13 #41)
#39 := (= #12 #38)
#36 := (= #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#95 := [trans #65 #93]: #94
#33 := [asserted]: #16
#96 := [mp #33 #95]: #89
#97 := (not #89)
#110 := (or #14 #82 #97)
#111 := [def-axiom]: #110
#113 := [unit-resolution #111 #96]: #112
#120 := [unit-resolution #113 #119]: #14
#129 := [unit-resolution #120 #128]: false
#132 := [lemma #129]: #131
#133 := [unit-resolution #132 #121]: #82
#135 := [mp #133 #125]: #14
#108 := (or #60 #99)
#106 := (or #60 #99 #97)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #96]: #108
#134 := [unit-resolution #109 #133]: #60
#136 := [unit-resolution #134 #135]: false
#137 := [lemma #136]: #130
#104 := (or #67 #102)
#105 := [def-axiom]: #104
#143 := [unit-resolution #105 #137]: #67
#138 := (= #35 0::real)
#147 := (not #138)
#157 := (iff #147 #99)
#155 := (iff #138 #82)
#103 := (= #35 #73)
#100 := (or #66 #103)
#101 := [def-axiom]: #100
#154 := [unit-resolution #101 #143]: #103
#156 := [monotonicity #154]: #155
#158 := [monotonicity #156]: #157
#139 := (<= #35 0::real)
#145 := (not #139)
#142 := [hypothesis]: #139
#144 := [th-lemma #143 #142]: false
#146 := [lemma #144]: #145
#148 := (or #147 #139)
#149 := [th-lemma]: #148
#153 := [unit-resolution #149 #146]: #147
#159 := [mp #153 #158]: #99
#160 := [unit-resolution #113 #159]: #14
#161 := (or #60 #66)
#162 := [th-lemma]: #161
[unit-resolution #162 #160 #143]: false
unsat
9a571f31a85693be816acc5c7b7aa7362cb820bb 62 0
#2 := false
#9 := 0::real
decl f3 :: real
#8 := f3
#69 := 1/3::real
#70 := (* 1/3::real f3)
#67 := (>= #70 0::real)
#65 := (not #67)
#56 := (>= f3 0::real)
#71 := (or #56 #65)
#74 := (not #71)
#13 := 3::real
#11 := 2::real
#12 := (* 2::real f3)
#14 := (/ #12 3::real)
#15 := (< f3 #14)
#10 := (< f3 0::real)
#16 := (implies #10 #15)
#17 := (not #16)
#77 := (iff #17 #74)
#36 := 2/3::real
#37 := (* 2/3::real f3)
#39 := (< f3 #37)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#75 := (iff #51 #74)
#72 := (iff #46 #71)
#66 := (iff #39 #65)
#68 := [rewrite]: #66
#63 := (iff #45 #56)
#54 := (not #56)
#58 := (not #54)
#61 := (iff #58 #56)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#55 := (iff #10 #54)
#57 := [rewrite]: #55
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#73 := [monotonicity #64 #68]: #72
#76 := [monotonicity #73]: #75
#52 := (iff #17 #51)
#49 := (iff #16 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #16 #42)
#40 := (iff #15 #39)
#35 := (= #14 #37)
#38 := [rewrite]: #35
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#78 := [trans #53 #76]: #77
#34 := [asserted]: #17
#79 := [mp #34 #78]: #74
#81 := [not-or-elim #79]: #67
#80 := [not-or-elim #79]: #54
[th-lemma #80 #81]: false
unsat
704113f68324742364e301291c46543b32d30adc 103 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#34 := -1::real
#35 := (* -1::real f3)
#112 := (* -1::real #35)
#113 := (+ f3 #112)
#115 := (>= #113 0::real)
#111 := (= f3 #35)
#61 := (>= f3 0::real)
#68 := (ite #61 f3 #35)
#118 := (= #68 #35)
#96 := (= #35 #68)
#62 := (not #61)
#107 := [hypothesis]: #61
#73 := (= f3 #68)
#97 := (or #62 #73)
#98 := [def-axiom]: #97
#108 := [unit-resolution #98 #107]: #73
#95 := (not #73)
#101 := (or #62 #95)
#83 := (iff #62 #73)
#12 := (- f3)
#11 := (< f3 0::real)
#13 := (ite #11 #12 f3)
#14 := (= #13 f3)
#10 := (<= 0::real f3)
#15 := (iff #10 #14)
#16 := (not #15)
#88 := (iff #16 #83)
#55 := (not #10)
#38 := (ite #11 #35 f3)
#44 := (= f3 #38)
#56 := (iff #44 #55)
#86 := (iff #56 #83)
#80 := (iff #73 #62)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #56 #80)
#78 := (iff #55 #62)
#76 := (iff #10 #61)
#77 := [rewrite]: #76
#79 := [monotonicity #77]: #78
#74 := (iff #44 #73)
#71 := (= #38 #68)
#65 := (ite #62 #35 f3)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #38 #65)
#63 := (iff #11 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#75 := [monotonicity #72]: #74
#82 := [monotonicity #75 #79]: #81
#87 := [trans #82 #85]: #86
#59 := (iff #16 #56)
#49 := (iff #10 #44)
#52 := (not #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #16 #52)
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#41 := (= #38 f3)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #14 #41)
#39 := (= #13 #38)
#36 := (= #12 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#89 := [trans #60 #87]: #88
#33 := [asserted]: #16
#90 := [mp #33 #89]: #83
#93 := (not #83)
#91 := (or #62 #95 #93)
#100 := [def-axiom]: #91
#102 := [unit-resolution #100 #90]: #101
#109 := [unit-resolution #102 #108 #107]: false
#110 := [lemma #109]: #62
#99 := (or #61 #96)
#94 := [def-axiom]: #99
#116 := [unit-resolution #94 #110]: #96
#119 := [symm #116]: #118
#105 := (or #61 #73)
#103 := (or #61 #73 #93)
#104 := [def-axiom]: #103
#106 := [unit-resolution #104 #90]: #105
#117 := [unit-resolution #106 #110]: #73
#120 := [trans #117 #119]: #111
#121 := (not #111)
#122 := (or #121 #115)
#123 := [th-lemma]: #122
#124 := [unit-resolution #123 #120]: #115
[th-lemma #110 #124]: false
unsat
c7322eea663ce724ffdf3e5de8e20e490ab8caf6 57 0
#2 := false
#36 := 0::real
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#33 := -1::real
#34 := (* -1::real f4)
#35 := (+ f3 #34)
#37 := (<= #35 0::real)
#40 := (ite #37 f3 f4)
#48 := (* -1::real #40)
#49 := (+ f3 #48)
#47 := (>= #49 0::real)
#53 := (not #47)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f3)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #47)
#43 := (<= #40 f3)
#46 := (iff #43 #47)
#50 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#60 := (= f3 #40)
#31 := (+ f4 #48)
#65 := (>= #31 0::real)
#61 := (= f4 #40)
#62 := (not #37)
#66 := [hypothesis]: #62
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#67 := [unit-resolution #57 #66]: #61
#68 := (not #61)
#69 := (or #68 #65)
#70 := [th-lemma]: #69
#71 := [unit-resolution #70 #67]: #65
#72 := [th-lemma #56 #66 #71]: false
#73 := [lemma #72]: #37
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#74 := [unit-resolution #58 #73]: #60
#75 := (not #60)
#76 := (or #75 #47)
#77 := [th-lemma]: #76
[unit-resolution #77 #74 #56]: false
unsat
099809f4b951e6c4b8dd87d068c12977d185ca9a 149 0
#2 := false
#9 := 0::real
decl f3 :: real
#8 := f3
#34 := -1::real
#35 := (* -1::real f3)
#61 := (>= f3 0::real)
#68 := (ite #61 f3 #35)
#111 := (* -1::real #68)
#156 := (+ f3 #111)
#157 := (<= #156 0::real)
#98 := (= f3 #68)
#10 := (<= f3 0::real)
#55 := (not #10)
#78 := (+ f3 #68)
#77 := (= #78 0::real)
#93 := (not #77)
#115 := [hypothesis]: #93
#95 := (>= #78 0::real)
#112 := (+ #35 #111)
#113 := (<= #112 0::real)
#73 := (= #35 #68)
#62 := (not #61)
#131 := (or #62 #77)
#118 := (= f3 0::real)
#109 := (or #10 #77)
#85 := (iff #55 #77)
#12 := (- f3)
#11 := (< f3 0::real)
#13 := (ite #11 #12 f3)
#14 := (= #13 #12)
#15 := (iff #10 #14)
#16 := (not #15)
#90 := (iff #16 #85)
#38 := (ite #11 #35 f3)
#44 := (= #35 #38)
#56 := (iff #44 #55)
#88 := (iff #56 #85)
#82 := (iff #77 #55)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #56 #82)
#80 := (iff #44 #77)
#76 := (iff #73 #77)
#79 := [rewrite]: #76
#74 := (iff #44 #73)
#71 := (= #38 #68)
#65 := (ite #62 #35 f3)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #38 #65)
#63 := (iff #11 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#75 := [monotonicity #72]: #74
#81 := [trans #75 #79]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#59 := (iff #16 #56)
#49 := (iff #10 #44)
#52 := (not #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #16 #52)
#50 := (iff #15 #49)
#47 := (iff #14 #44)
#41 := (= #38 #35)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #14 #41)
#36 := (= #12 #35)
#37 := [rewrite]: #36
#39 := (= #13 #38)
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40 #37]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #48]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#91 := [trans #60 #89]: #90
#33 := [asserted]: #16
#92 := [mp #33 #91]: #85
#102 := (not #85)
#107 := (or #10 #77 #102)
#108 := [def-axiom]: #107
#110 := [unit-resolution #108 #92]: #109
#116 := [unit-resolution #110 #115]: #10
#117 := [hypothesis]: #61
#119 := [th-lemma #117 #116]: #118
#127 := (= #78 f3)
#125 := (= #68 f3)
#99 := (or #62 #98)
#100 := [def-axiom]: #99
#120 := [unit-resolution #100 #117]: #98
#126 := [symm #120]: #125
#123 := (= #78 #68)
#121 := (= #68 #78)
#122 := [th-lemma #117 #116]: #121
#124 := [symm #122]: #123
#128 := [trans #124 #126]: #127
#129 := [trans #128 #119]: #77
#130 := [unit-resolution #115 #129]: false
#132 := [lemma #130]: #131
#133 := [unit-resolution #132 #115]: #62
#101 := (or #61 #73)
#96 := [def-axiom]: #101
#134 := [unit-resolution #96 #133]: #73
#135 := (not #73)
#136 := (or #135 #113)
#137 := [th-lemma]: #136
#138 := [unit-resolution #137 #134]: #113
#139 := (not #113)
#140 := (or #95 #139)
#141 := [th-lemma]: #140
#142 := [unit-resolution #141 #138]: #95
#97 := (<= #78 0::real)
#114 := (>= #112 0::real)
#143 := (or #135 #114)
#144 := [th-lemma]: #143
#145 := [unit-resolution #144 #134]: #114
#146 := (not #114)
#147 := (or #97 #146)
#148 := [th-lemma]: #147
#149 := [unit-resolution #148 #145]: #97
#151 := (not #95)
#150 := (not #97)
#152 := (or #77 #150 #151)
#153 := [th-lemma]: #152
#154 := [unit-resolution #153 #149 #142 #115]: false
#155 := [lemma #154]: #77
#105 := (or #55 #93)
#103 := (or #55 #93 #102)
#104 := [def-axiom]: #103
#106 := [unit-resolution #104 #92]: #105
#159 := [unit-resolution #106 #155]: #55
#160 := (or #61 #10)
#161 := [th-lemma]: #160
#162 := [unit-resolution #161 #159]: #61
#163 := [unit-resolution #100 #162]: #98
#164 := (not #98)
#165 := (or #164 #157)
#166 := [th-lemma]: #165
#167 := [unit-resolution #166 #163]: #157
#168 := (or #93 #97)
#169 := [th-lemma]: #168
#170 := [unit-resolution #169 #155]: #97
[th-lemma #159 #170 #167]: false
unsat
f580fbf74c17d6b6fb5afde9912701d1c54bba4d 57 0
#2 := false
#36 := 0::real
decl f4 :: real
#9 := f4
#33 := -1::real
#34 := (* -1::real f4)
decl f3 :: real
#8 := f3
#35 := (+ f3 #34)
#37 := (<= #35 0::real)
#40 := (ite #37 f3 f4)
#61 := (= f4 #40)
#65 := (not #61)
#47 := (* -1::real #40)
#48 := (+ f4 #47)
#46 := (>= #48 0::real)
#53 := (not #46)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f4)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #46)
#43 := (<= #40 f4)
#49 := (iff #43 #46)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#64 := [hypothesis]: #61
#66 := (or #65 #46)
#67 := [th-lemma]: #66
#68 := [unit-resolution #67 #64 #56]: false
#69 := [lemma #68]: #65
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#72 := [unit-resolution #57 #69]: #37
#31 := (+ f3 #47)
#71 := (>= #31 0::real)
#60 := (= f3 #40)
#62 := (not #37)
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#73 := [unit-resolution #58 #72]: #60
#74 := (not #60)
#75 := (or #74 #71)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #73]: #71
[th-lemma #77 #56 #72]: false
unsat
29b8934bcf2c51c8a551e0b17bf814bf8deedd61 114 0
#2 := false
#9 := 0::real
decl f3 :: real
#8 := f3
#35 := -1::real
#36 := (* -1::real f3)
#67 := (>= f3 0::real)
#74 := (ite #67 f3 #36)
#88 := (* -1::real #74)
#127 := (+ #36 #88)
#137 := (<= #127 0::real)
#114 := (= #36 #74)
#68 := (not #67)
#125 := (+ f3 #88)
#126 := (<= #125 0::real)
#113 := (= f3 #74)
#128 := [hypothesis]: #67
#115 := (or #68 #113)
#116 := [def-axiom]: #115
#129 := [unit-resolution #116 #128]: #113
#130 := (not #113)
#131 := (or #130 #126)
#132 := [th-lemma]: #131
#133 := [unit-resolution #132 #129]: #126
#83 := (>= #74 0::real)
#82 := (not #83)
#94 := (ite #83 #74 #88)
#99 := (= #74 #94)
#102 := (not #99)
#11 := (- f3)
#10 := (< f3 0::real)
#12 := (ite #10 #11 f3)
#14 := (- #12)
#13 := (< #12 0::real)
#15 := (ite #13 #14 #12)
#16 := (= #15 #12)
#17 := (not #16)
#105 := (iff #17 #102)
#39 := (ite #10 #36 f3)
#48 := (* -1::real #39)
#42 := (< #39 0::real)
#53 := (ite #42 #48 #39)
#59 := (= #39 #53)
#64 := (not #59)
#103 := (iff #64 #102)
#100 := (iff #59 #99)
#97 := (= #53 #94)
#91 := (ite #82 #88 #74)
#95 := (= #91 #94)
#96 := [rewrite]: #95
#92 := (= #53 #91)
#77 := (= #39 #74)
#71 := (ite #68 #36 f3)
#75 := (= #71 #74)
#76 := [rewrite]: #75
#72 := (= #39 #71)
#69 := (iff #10 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#78 := [trans #73 #76]: #77
#89 := (= #48 #88)
#90 := [monotonicity #78]: #89
#86 := (iff #42 #82)
#79 := (< #74 0::real)
#84 := (iff #79 #82)
#85 := [rewrite]: #84
#80 := (iff #42 #79)
#81 := [monotonicity #78]: #80
#87 := [trans #81 #85]: #86
#93 := [monotonicity #87 #90 #78]: #92
#98 := [trans #93 #96]: #97
#101 := [monotonicity #78 #98]: #100
#104 := [monotonicity #101]: #103
#65 := (iff #17 #64)
#62 := (iff #16 #59)
#56 := (= #53 #39)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #16 #56)
#40 := (= #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#54 := (= #15 #53)
#51 := (= #14 #48)
#45 := (- #39)
#49 := (= #45 #48)
#50 := [rewrite]: #49
#46 := (= #14 #45)
#47 := [monotonicity #41]: #46
#52 := [trans #47 #50]: #51
#43 := (iff #13 #42)
#44 := [monotonicity #41]: #43
#55 := [monotonicity #44 #52 #41]: #54
#58 := [monotonicity #55 #41]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#106 := [trans #66 #104]: #105
#34 := [asserted]: #17
#107 := [mp #34 #106]: #102
#108 := (or #82 #99)
#117 := [def-axiom]: #108
#134 := [unit-resolution #117 #107]: #82
#135 := [th-lemma #128 #134 #133]: false
#136 := [lemma #135]: #68
#111 := (or #67 #114)
#112 := [def-axiom]: #111
#139 := [unit-resolution #112 #136]: #114
#140 := (not #114)
#141 := (or #140 #137)
#142 := [th-lemma]: #141
#143 := [unit-resolution #142 #139]: #137
[th-lemma #136 #134 #143]: false
unsat
cc7a80da13c82cc207500cb8afbaae97318e63e2 103 0
#2 := false
#45 := 0::real
decl f5 :: real
#11 := f5
decl f4 :: real
#9 := f4
#43 := -1::real
#53 := (* -1::real f5)
#63 := (+ f4 #53)
#64 := (<= #63 0::real)
#67 := (ite #64 f4 f5)
#75 := (* -1::real #67)
decl f3 :: real
#8 := f3
#76 := (+ f3 #75)
#74 := (>= #76 0::real)
#73 := (not #74)
#54 := (+ f3 #53)
#52 := (>= #54 0::real)
#51 := (not #52)
#47 := (* -1::real f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::real)
#44 := (not #46)
#57 := (and #44 #51)
#60 := (not #57)
#81 := (or #60 #73)
#84 := (not #81)
#14 := (<= f4 f5)
#15 := (ite #14 f4 f5)
#16 := (< f3 #15)
#12 := (< f3 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#87 := (iff #18 #84)
#36 := (not #13)
#37 := (or #36 #16)
#40 := (not #37)
#85 := (iff #40 #84)
#82 := (iff #37 #81)
#79 := (iff #16 #73)
#70 := (< f3 #67)
#77 := (iff #70 #73)
#78 := [rewrite]: #77
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#80 := [trans #72 #78]: #79
#61 := (iff #36 #60)
#58 := (iff #13 #57)
#55 := (iff #12 #51)
#56 := [rewrite]: #55
#49 := (iff #10 #44)
#50 := [rewrite]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#83 := [monotonicity #62 #80]: #82
#86 := [monotonicity #83]: #85
#41 := (iff #18 #40)
#38 := (iff #17 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#88 := [trans #42 #86]: #87
#35 := [asserted]: #18
#89 := [mp #35 #88]: #84
#93 := [not-or-elim #89]: #74
#90 := [not-or-elim #89]: #57
#92 := [and-elim #90]: #51
#98 := (+ f5 #75)
#115 := (<= #98 0::real)
#104 := (= f5 #67)
#105 := (not #64)
#103 := (= f4 #67)
#110 := (not #103)
#100 := (+ f4 #75)
#97 := (<= #100 0::real)
#107 := (not #97)
#91 := [and-elim #90]: #44
#96 := [hypothesis]: #97
#94 := [th-lemma #96 #91 #93]: false
#108 := [lemma #94]: #107
#109 := [hypothesis]: #103
#111 := (or #110 #97)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109 #108]: false
#114 := [lemma #113]: #110
#106 := (or #105 #103)
#101 := [def-axiom]: #106
#117 := [unit-resolution #101 #114]: #105
#102 := (or #64 #104)
#99 := [def-axiom]: #102
#118 := [unit-resolution #99 #117]: #104
#119 := (not #104)
#120 := (or #119 #115)
#121 := [th-lemma]: #120
#122 := [unit-resolution #121 #118]: #115
[th-lemma #122 #92 #93]: false
unsat
dcaa54c51c4b138dac6c0178c67a0d52f05b3002 57 0
#2 := false
#36 := 0::real
decl f4 :: real
#9 := f4
#33 := -1::real
#34 := (* -1::real f4)
decl f3 :: real
#8 := f3
#35 := (+ f3 #34)
#37 := (<= #35 0::real)
#40 := (ite #37 f4 f3)
#61 := (= f3 #40)
#65 := (not #61)
#46 := (* -1::real #40)
#47 := (+ f3 #46)
#48 := (<= #47 0::real)
#53 := (not #48)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#12 := (<= f3 #11)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #48)
#43 := (<= f3 #40)
#49 := (iff #43 #48)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#64 := [hypothesis]: #61
#66 := (or #65 #48)
#67 := [th-lemma]: #66
#68 := [unit-resolution #67 #64 #56]: false
#69 := [lemma #68]: #65
#59 := (or #37 #61)
#57 := [def-axiom]: #59
#72 := [unit-resolution #57 #69]: #37
#31 := (+ f4 #46)
#70 := (<= #31 0::real)
#60 := (= f4 #40)
#62 := (not #37)
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#73 := [unit-resolution #58 #72]: #60
#74 := (not #60)
#75 := (or #74 #70)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #73]: #70
[th-lemma #77 #56 #72]: false
unsat
23d9458c2d94638d741588b7f5f53da3b743fc4b 86 0
#2 := false
decl f3 :: real
#8 := f3
decl f4 :: real
#9 := f4
#38 := 0::real
#35 := -1::real
#36 := (* -1::real f4)
#37 := (+ f3 #36)
#46 := (>= #37 0::real)
#48 := (ite #46 f4 f3)
#39 := (<= #37 0::real)
#42 := (ite #39 f3 f4)
#51 := (= #42 #48)
#33 := (= f4 #48)
#65 := (= f3 #48)
#66 := (not #46)
#71 := [hypothesis]: #66
#69 := (or #46 #65)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #71]: #65
#77 := (= #42 f3)
#61 := (= f3 #42)
#73 := (or #46 #39)
#74 := [th-lemma]: #73
#75 := [unit-resolution #74 #71]: #39
#63 := (not #39)
#64 := (or #63 #61)
#59 := [def-axiom]: #64
#76 := [unit-resolution #59 #75]: #61
#78 := [symm #76]: #77
#79 := [trans #78 #72]: #51
#54 := (not #51)
#12 := (<= f4 f3)
#13 := (ite #12 f4 f3)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#14 := (= #11 #13)
#15 := (not #14)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (= #13 #48)
#45 := (iff #12 #46)
#47 := [rewrite]: #45
#50 := [monotonicity #47]: #49
#43 := (= #11 #42)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#53 := [monotonicity #44 #50]: #52
#56 := [monotonicity #53]: #55
#32 := [asserted]: #15
#57 := [mp #32 #56]: #54
#80 := [unit-resolution #57 #79]: false
#81 := [lemma #80]: #46
#67 := (or #66 #33)
#68 := [def-axiom]: #67
#83 := [unit-resolution #68 #81]: #33
#103 := (= #42 f4)
#82 := (= f3 f4)
#62 := (= f4 #42)
#93 := (not #62)
#94 := (iff #54 #93)
#91 := (iff #51 #62)
#89 := (iff #62 #51)
#84 := (= #48 #42)
#87 := (iff #84 #51)
#88 := [commutativity]: #87
#85 := (iff #62 #84)
#86 := [monotonicity #83]: #85
#90 := [trans #86 #88]: #89
#92 := [symm #90]: #91
#95 := [monotonicity #92]: #94
#96 := [mp #57 #95]: #93
#60 := (or #39 #62)
#58 := [def-axiom]: #60
#97 := [unit-resolution #58 #96]: #39
#98 := (or #82 #63 #66)
#99 := [th-lemma]: #98
#100 := [unit-resolution #99 #97 #81]: #82
#101 := [unit-resolution #59 #97]: #61
#102 := [symm #101]: #77
#104 := [trans #102 #100]: #103
#105 := [trans #104 #83]: #51
[unit-resolution #57 #105]: false
unsat
ef39e4f5f84c012d1a7afd1eb9ae7787355eb901 57 0
#2 := false
#35 := 0::real
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#33 := -1::real
#37 := (* -1::real f4)
#38 := (+ f3 #37)
#36 := (>= #38 0::real)
#40 := (ite #36 f3 f4)
#46 := (* -1::real #40)
#47 := (+ f3 #46)
#48 := (<= #47 0::real)
#53 := (not #48)
#10 := (<= f4 f3)
#11 := (ite #10 f3 f4)
#12 := (<= f3 #11)
#13 := (not #12)
#54 := (iff #13 #53)
#51 := (iff #12 #48)
#43 := (<= f3 #40)
#49 := (iff #43 #48)
#50 := [rewrite]: #49
#44 := (iff #12 #43)
#41 := (= #11 #40)
#34 := (iff #10 #36)
#39 := [rewrite]: #34
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#52 := [trans #45 #50]: #51
#55 := [monotonicity #52]: #54
#30 := [asserted]: #13
#56 := [mp #30 #55]: #53
#60 := (= f3 #40)
#31 := (+ f4 #46)
#64 := (<= #31 0::real)
#61 := (= f4 #40)
#62 := (not #36)
#66 := [hypothesis]: #62
#59 := (or #36 #61)
#57 := [def-axiom]: #59
#67 := [unit-resolution #57 #66]: #61
#68 := (not #61)
#69 := (or #68 #64)
#70 := [th-lemma]: #69
#71 := [unit-resolution #70 #67]: #64
#72 := [th-lemma #56 #66 #71]: false
#73 := [lemma #72]: #36
#63 := (or #62 #60)
#58 := [def-axiom]: #63
#74 := [unit-resolution #58 #73]: #60
#75 := (not #60)
#76 := (or #75 #48)
#77 := [th-lemma]: #76
[unit-resolution #77 #74 #56]: false
unsat
ca3670773dec1aa185941c6109c12ef74c091595 68 0
#2 := false
#8 := 0::real
decl f3 :: real
#9 := f3
#11 := (<= f3 0::real)
#12 := (ite #11 f3 0::real)
#13 := (= #12 0::real)
#76 := (= f3 0::real)
#50 := (>= f3 0::real)
#51 := (not #50)
#59 := (or #13 #51)
#64 := (not #59)
#10 := (<= 0::real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#67 := (iff #15 #64)
#33 := (= 0::real #12)
#39 := (not #10)
#40 := (or #39 #33)
#45 := (not #40)
#65 := (iff #45 #64)
#62 := (iff #40 #59)
#56 := (or #51 #13)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #40 #56)
#54 := (iff #33 #13)
#55 := [rewrite]: #54
#52 := (iff #39 #51)
#48 := (iff #10 #50)
#49 := [rewrite]: #48
#53 := [monotonicity #49]: #52
#58 := [monotonicity #53 #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#46 := (iff #15 #45)
#43 := (iff #14 #40)
#36 := (implies #10 #33)
#41 := (iff #36 #40)
#42 := [rewrite]: #41
#37 := (iff #14 #36)
#34 := (iff #13 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#44 := [trans #38 #42]: #43
#47 := [monotonicity #44]: #46
#68 := [trans #47 #66]: #67
#32 := [asserted]: #15
#69 := [mp #32 #68]: #64
#72 := [not-or-elim #69]: #50
#70 := (not #13)
#71 := [not-or-elim #69]: #70
#78 := (or #11 #13)
#79 := [def-axiom]: #78
#77 := [unit-resolution #79 #71]: #11
#81 := (not #11)
#75 := (or #76 #81 #51)
#73 := [th-lemma]: #75
#84 := [unit-resolution #73 #77 #72]: #76
#86 := (= #12 f3)
#80 := (= f3 #12)
#82 := (or #81 #80)
#83 := [def-axiom]: #82
#85 := [unit-resolution #83 #77]: #80
#87 := [symm #85]: #86
#88 := [trans #87 #84]: #13
[unit-resolution #71 #88]: false
unsat
7eae59ca8b45a027fbc591665e655f191dd6bbc4 103 0
#2 := false
#45 := 0::real
decl f3 :: real
#8 := f3
decl f5 :: real
#11 := f5
#43 := -1::real
#51 := (* -1::real f5)
#63 := (+ f3 #51)
#64 := (<= #63 0::real)
#67 := (ite #64 f5 f3)
#73 := (* -1::real #67)
decl f4 :: real
#9 := f4
#74 := (+ f4 #73)
#75 := (<= #74 0::real)
#76 := (not #75)
#52 := (+ f4 #51)
#53 := (<= #52 0::real)
#54 := (not #53)
#47 := (* -1::real f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::real)
#44 := (not #46)
#57 := (and #44 #54)
#60 := (not #57)
#81 := (or #60 #76)
#84 := (not #81)
#14 := (<= f3 f5)
#15 := (ite #14 f5 f3)
#16 := (< #15 f4)
#12 := (< f5 f4)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#87 := (iff #18 #84)
#36 := (not #13)
#37 := (or #36 #16)
#40 := (not #37)
#85 := (iff #40 #84)
#82 := (iff #37 #81)
#79 := (iff #16 #76)
#70 := (< #67 f4)
#77 := (iff #70 #76)
#78 := [rewrite]: #77
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#80 := [trans #72 #78]: #79
#61 := (iff #36 #60)
#58 := (iff #13 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#49 := (iff #10 #44)
#50 := [rewrite]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#83 := [monotonicity #62 #80]: #82
#86 := [monotonicity #83]: #85
#41 := (iff #18 #40)
#38 := (iff #17 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#88 := [trans #42 #86]: #87
#35 := [asserted]: #18
#89 := [mp #35 #88]: #84
#93 := [not-or-elim #89]: #75
#90 := [not-or-elim #89]: #57
#91 := [and-elim #90]: #44
#97 := (+ f3 #73)
#116 := (>= #97 0::real)
#104 := (= f3 #67)
#105 := (not #64)
#103 := (= f5 #67)
#110 := (not #103)
#100 := (+ f5 #73)
#98 := (>= #100 0::real)
#107 := (not #98)
#92 := [and-elim #90]: #54
#96 := [hypothesis]: #98
#94 := [th-lemma #96 #92 #93]: false
#108 := [lemma #94]: #107
#109 := [hypothesis]: #103
#111 := (or #110 #98)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109 #108]: false
#114 := [lemma #113]: #110
#106 := (or #105 #103)
#101 := [def-axiom]: #106
#117 := [unit-resolution #101 #114]: #105
#102 := (or #64 #104)
#99 := [def-axiom]: #102
#118 := [unit-resolution #99 #117]: #104
#119 := (not #104)
#120 := (or #119 #116)
#121 := [th-lemma]: #120
#122 := [unit-resolution #121 #118]: #116
[th-lemma #122 #91 #93]: false
unsat
a5005d5e2177d7e219c0762e500aaee9c6b18ed1 124 0
#2 := false
#13 := 0::real
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#36 := -1::real
#38 := (* -1::real f4)
#51 := (+ f3 #38)
#52 := (<= #51 0::real)
#55 := (ite #52 f3 f4)
#103 := (* -1::real #55)
#104 := (+ f3 #103)
#106 := (>= #104 0::real)
#91 := (= f3 #55)
#105 := (+ f4 #103)
#123 := (>= #105 0::real)
#92 := (= f4 #55)
#93 := (not #52)
#134 := [hypothesis]: #93
#90 := (or #52 #92)
#88 := [def-axiom]: #90
#135 := [unit-resolution #88 #134]: #92
#126 := (not #92)
#127 := (or #126 #123)
#128 := [th-lemma]: #127
#136 := [unit-resolution #128 #135]: #123
#37 := (* -1::real f3)
#39 := (+ #37 #38)
#12 := (+ f3 f4)
#58 := (>= #12 0::real)
#65 := (ite #58 #12 #39)
#73 := (* -1::real #65)
#74 := (+ #55 #73)
#75 := (<= #74 0::real)
#80 := (not #75)
#15 := (- #12)
#14 := (< #12 0::real)
#16 := (ite #14 #15 #12)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#17 := (<= #11 #16)
#18 := (not #17)
#83 := (iff #18 #80)
#42 := (ite #14 #39 #12)
#45 := (<= #11 #42)
#48 := (not #45)
#81 := (iff #48 #80)
#78 := (iff #45 #75)
#70 := (<= #55 #65)
#76 := (iff #70 #75)
#77 := [rewrite]: #76
#71 := (iff #45 #70)
#68 := (= #42 #65)
#59 := (not #58)
#62 := (ite #59 #39 #12)
#66 := (= #62 #65)
#67 := [rewrite]: #66
#63 := (= #42 #62)
#60 := (iff #14 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#56 := (= #11 #55)
#53 := (iff #10 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#72 := [monotonicity #57 #69]: #71
#79 := [trans #72 #77]: #78
#82 := [monotonicity #79]: #81
#49 := (iff #18 #48)
#46 := (iff #17 #45)
#43 := (= #16 #42)
#40 := (= #15 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#84 := [trans #50 #82]: #83
#35 := [asserted]: #18
#85 := [mp #35 #84]: #80
#102 := (+ #12 #73)
#122 := (<= #102 0::real)
#86 := (= #12 #65)
#108 := [hypothesis]: #59
#120 := (or #93 #58)
#107 := [hypothesis]: #52
#100 := (+ #39 #73)
#101 := (<= #100 0::real)
#95 := (= #39 #65)
#98 := (or #58 #95)
#99 := [def-axiom]: #98
#109 := [unit-resolution #99 #108]: #95
#110 := (not #95)
#111 := (or #110 #101)
#112 := [th-lemma]: #111
#113 := [unit-resolution #112 #109]: #101
#94 := (or #93 #91)
#89 := [def-axiom]: #94
#114 := [unit-resolution #89 #107]: #91
#115 := (not #91)
#116 := (or #115 #106)
#117 := [th-lemma]: #116
#118 := [unit-resolution #117 #114]: #106
#119 := [th-lemma #108 #118 #113 #85 #107]: false
#121 := [lemma #119]: #120
#124 := [unit-resolution #121 #108]: #93
#125 := [unit-resolution #88 #124]: #92
#129 := [unit-resolution #128 #125]: #123
#130 := [th-lemma #113 #85 #108 #124 #129]: false
#131 := [lemma #130]: #58
#96 := (or #59 #86)
#97 := [def-axiom]: #96
#137 := [unit-resolution #97 #131]: #86
#138 := (not #86)
#139 := (or #138 #122)
#140 := [th-lemma]: #139
#141 := [unit-resolution #140 #137]: #122
#142 := [th-lemma #134 #131 #141 #85 #136]: false
#143 := [lemma #142]: #52
#144 := [unit-resolution #89 #143]: #91
#145 := [unit-resolution #117 #144]: #106
[th-lemma #131 #143 #141 #85 #145]: false
unsat
f8a9afea5f80c13265f7efc519efee9034d86aaa 88 0
#2 := false
decl f4 :: real
#9 := f4
decl f3 :: real
#8 := f3
#38 := 0::real
#35 := -1::real
#36 := (* -1::real f4)
#37 := (+ f3 #36)
#46 := (>= #37 0::real)
#48 := (ite #46 f3 f4)
#39 := (<= #37 0::real)
#42 := (ite #39 f4 f3)
#51 := (= #42 #48)
#33 := (= f3 #48)
#65 := (= f4 #48)
#66 := (not #46)
#71 := [hypothesis]: #66
#69 := (or #46 #65)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #71]: #65
#77 := (= #42 f4)
#61 := (= f4 #42)
#73 := (or #46 #39)
#74 := [th-lemma]: #73
#75 := [unit-resolution #74 #71]: #39
#63 := (not #39)
#64 := (or #63 #61)
#59 := [def-axiom]: #64
#76 := [unit-resolution #59 #75]: #61
#78 := [symm #76]: #77
#79 := [trans #78 #72]: #51
#54 := (not #51)
#12 := (<= f4 f3)
#13 := (ite #12 f3 f4)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#14 := (= #11 #13)
#15 := (not #14)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (= #13 #48)
#45 := (iff #12 #46)
#47 := [rewrite]: #45
#50 := [monotonicity #47]: #49
#43 := (= #11 #42)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#53 := [monotonicity #44 #50]: #52
#56 := [monotonicity #53]: #55
#32 := [asserted]: #15
#57 := [mp #32 #56]: #54
#80 := [unit-resolution #57 #79]: false
#81 := [lemma #80]: #46
#67 := (or #66 #33)
#68 := [def-axiom]: #67
#83 := [unit-resolution #68 #81]: #33
#107 := (= #42 f3)
#105 := (= f4 f3)
#82 := (= f3 f4)
#62 := (= f3 #42)
#95 := (not #62)
#96 := (iff #54 #95)
#93 := (iff #51 #62)
#91 := (iff #62 #51)
#86 := (= #48 #42)
#89 := (iff #86 #51)
#90 := [commutativity]: #89
#87 := (iff #62 #86)
#88 := [monotonicity #83]: #87
#92 := [trans #88 #90]: #91
#94 := [symm #92]: #93
#97 := [monotonicity #94]: #96
#98 := [mp #57 #97]: #95
#60 := (or #39 #62)
#58 := [def-axiom]: #60
#99 := [unit-resolution #58 #98]: #39
#101 := (or #82 #63 #66)
#102 := [th-lemma]: #101
#103 := [unit-resolution #102 #99 #81]: #82
#106 := [symm #103]: #105
#100 := [unit-resolution #59 #99]: #61
#104 := [symm #100]: #77
#108 := [trans #104 #106]: #107
#109 := [trans #108 #83]: #51
[unit-resolution #57 #109]: false
unsat
c008fb0a346a13df61c397707ef86eadaaaaf028 66 0
#2 := false
decl f3 :: real
#9 := f3
#8 := 0::real
#11 := (<= f3 0::real)
#12 := (ite #11 0::real f3)
#33 := (= f3 #12)
#84 := (= 0::real #12)
#78 := (= #12 0::real)
#68 := (not #33)
#50 := (>= f3 0::real)
#51 := (not #50)
#57 := (or #33 #51)
#62 := (not #57)
#13 := (= #12 f3)
#10 := (<= 0::real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#65 := (iff #15 #62)
#39 := (not #10)
#40 := (or #39 #33)
#45 := (not #40)
#63 := (iff #45 #62)
#60 := (iff #40 #57)
#54 := (or #51 #33)
#58 := (iff #54 #57)
#59 := [rewrite]: #58
#55 := (iff #40 #54)
#52 := (iff #39 #51)
#48 := (iff #10 #50)
#49 := [rewrite]: #48
#53 := [monotonicity #49]: #52
#56 := [monotonicity #53]: #55
#61 := [trans #56 #59]: #60
#64 := [monotonicity #61]: #63
#46 := (iff #15 #45)
#43 := (iff #14 #40)
#36 := (implies #10 #33)
#41 := (iff #36 #40)
#42 := [rewrite]: #41
#37 := (iff #14 #36)
#34 := (iff #13 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#44 := [trans #38 #42]: #43
#47 := [monotonicity #44]: #46
#66 := [trans #47 #64]: #65
#32 := [asserted]: #15
#67 := [mp #32 #66]: #62
#69 := [not-or-elim #67]: #68
#76 := (or #11 #33)
#77 := [def-axiom]: #76
#75 := [unit-resolution #77 #69]: #11
#79 := (not #11)
#80 := (or #79 #78)
#81 := [def-axiom]: #80
#73 := [unit-resolution #81 #75]: #78
#85 := [symm #73]: #84
#74 := (= f3 0::real)
#70 := [not-or-elim #67]: #50
#71 := (or #74 #79 #51)
#82 := [th-lemma]: #71
#83 := [unit-resolution #82 #75 #70]: #74
#86 := [trans #83 #85]: #33
[unit-resolution #69 #86]: false
unsat
6fa8c48985ebc99327aefe25360343fbef04699f 18 0
#2 := false
decl f3 :: real
#8 := f3
#9 := (<= f3 f3)
#10 := (not #9)
#37 := (iff #10 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#30 := (iff #9 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#27 := [asserted]: #10
[mp #27 #38]: false
unsat
3ea0cce22deeb1cf0a91c70b01f38d938cbfca2b 228 0
#2 := false
#9 := 0::real
decl f4 :: real
#14 := f4
#40 := -1::real
#55 := (* -1::real f4)
#91 := (>= f4 0::real)
#98 := (ite #91 f4 #55)
#103 := (* -1::real #98)
#159 := (+ f4 #103)
#160 := (<= #159 0::real)
#134 := (= f4 #98)
decl f3 :: real
#8 := f3
#109 := (+ f3 #55)
#110 := (<= #109 0::real)
#113 := (ite #110 f4 f3)
#155 := (* -1::real #113)
#180 := (+ f3 #155)
#190 := (<= #180 0::real)
#146 := (= f3 #113)
#147 := (not #110)
#76 := (>= f3 0::real)
#161 := (+ #55 #103)
#179 := (<= #161 0::real)
#200 := (not #179)
#77 := (not #76)
#168 := [hypothesis]: #77
#145 := (= f4 #113)
#205 := (not #145)
#156 := (+ f4 #155)
#157 := (<= #156 0::real)
#176 := (not #157)
#188 := (or #176 #76)
#132 := (= #55 #98)
#92 := (not #91)
#174 := [hypothesis]: #157
#177 := (or #92 #176 #76)
#162 := [hypothesis]: #91
#141 := (or #92 #134)
#142 := [def-axiom]: #141
#163 := [unit-resolution #142 #162]: #134
#164 := (not #134)
#165 := (or #164 #160)
#166 := [th-lemma]: #165
#167 := [unit-resolution #166 #163]: #160
#41 := (* -1::real f3)
#83 := (ite #76 f3 #41)
#88 := (* -1::real #83)
#152 := (+ #41 #88)
#153 := (<= #152 0::real)
#138 := (= #41 #83)
#135 := (or #76 #138)
#136 := [def-axiom]: #135
#169 := [unit-resolution #136 #168]: #138
#170 := (not #138)
#171 := (or #170 #153)
#172 := [th-lemma]: #171
#173 := [unit-resolution #172 #169]: #153
#122 := (+ #98 #113)
#123 := (+ #83 #122)
#120 := (>= #123 0::real)
#126 := (not #120)
#19 := (<= f3 f4)
#20 := (ite #19 f4 f3)
#16 := (- f4)
#15 := (< f4 0::real)
#17 := (ite #15 #16 f4)
#11 := (- f3)
#10 := (< f3 0::real)
#12 := (ite #10 #11 f3)
#13 := (- #12)
#18 := (- #13 #17)
#21 := (<= #18 #20)
#22 := (not #21)
#129 := (iff #22 #126)
#58 := (ite #15 #55 f4)
#64 := (* -1::real #58)
#44 := (ite #10 #41 f3)
#50 := (* -1::real #44)
#65 := (+ #50 #64)
#70 := (<= #65 #20)
#73 := (not #70)
#127 := (iff #73 #126)
#124 := (iff #70 #120)
#106 := (+ #88 #103)
#116 := (<= #106 #113)
#119 := (iff #116 #120)
#121 := [rewrite]: #119
#117 := (iff #70 #116)
#114 := (= #20 #113)
#111 := (iff #19 #110)
#112 := [rewrite]: #111
#115 := [monotonicity #112]: #114
#107 := (= #65 #106)
#104 := (= #64 #103)
#101 := (= #58 #98)
#95 := (ite #92 #55 f4)
#99 := (= #95 #98)
#100 := [rewrite]: #99
#96 := (= #58 #95)
#93 := (iff #15 #92)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#102 := [trans #97 #100]: #101
#105 := [monotonicity #102]: #104
#89 := (= #50 #88)
#86 := (= #44 #83)
#80 := (ite #77 #41 f3)
#84 := (= #80 #83)
#85 := [rewrite]: #84
#81 := (= #44 #80)
#78 := (iff #10 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#108 := [monotonicity #90 #105]: #107
#118 := [monotonicity #108 #115]: #117
#125 := [trans #118 #121]: #124
#128 := [monotonicity #125]: #127
#74 := (iff #22 #73)
#71 := (iff #21 #70)
#68 := (= #18 #65)
#61 := (- #50 #58)
#66 := (= #61 #65)
#67 := [rewrite]: #66
#62 := (= #18 #61)
#59 := (= #17 #58)
#56 := (= #16 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#53 := (= #13 #50)
#47 := (- #44)
#51 := (= #47 #50)
#52 := [rewrite]: #51
#48 := (= #13 #47)
#45 := (= #12 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#54 := [trans #49 #52]: #53
#63 := [monotonicity #54 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#130 := [trans #75 #128]: #129
#39 := [asserted]: #22
#131 := [mp #39 #130]: #126
#175 := [th-lemma #162 #174 #131 #168 #173 #167]: false
#178 := [lemma #175]: #177
#181 := [unit-resolution #178 #174 #168]: #92
#143 := (or #91 #132)
#144 := [def-axiom]: #143
#182 := [unit-resolution #144 #181]: #132
#183 := (not #132)
#184 := (or #183 #179)
#185 := [th-lemma]: #184
#186 := [unit-resolution #185 #182]: #179
#187 := [th-lemma #174 #131 #168 #173 #186]: false
#189 := [lemma #187]: #188
#210 := [unit-resolution #189 #168]: #176
#206 := (or #205 #157)
#203 := [hypothesis]: #176
#204 := [hypothesis]: #145
#207 := [th-lemma]: #206
#208 := [unit-resolution #207 #204 #203]: false
#209 := [lemma #208]: #206
#211 := [unit-resolution #209 #210]: #205
#148 := (or #147 #145)
#149 := [def-axiom]: #148
#212 := [unit-resolution #149 #211]: #147
#201 := (or #110 #200 #76)
#192 := [hypothesis]: #147
#150 := (or #110 #146)
#151 := [def-axiom]: #150
#193 := [unit-resolution #151 #192]: #146
#194 := (not #146)
#195 := (or #194 #190)
#196 := [th-lemma]: #195
#197 := [unit-resolution #196 #193]: #190
#198 := [hypothesis]: #179
#199 := [th-lemma #131 #173 #198 #168 #192 #197]: false
#202 := [lemma #199]: #201
#213 := [unit-resolution #202 #212 #168]: #200
#214 := (or #92 #76 #110)
#215 := [th-lemma]: #214
#216 := [unit-resolution #215 #168 #212]: #92
#217 := [unit-resolution #144 #216]: #132
#218 := [unit-resolution #185 #217 #213]: false
#219 := [lemma #218]: #76
#222 := [hypothesis]: #92
#223 := (or #147 #77 #91)
#224 := [th-lemma]: #223
#225 := [unit-resolution #224 #222 #219]: #147
#226 := [unit-resolution #151 #225]: #146
#227 := [unit-resolution #196 #226]: #190
#228 := [unit-resolution #144 #222]: #132
#229 := [unit-resolution #185 #228]: #179
#154 := (+ f3 #88)
#158 := (<= #154 0::real)
#137 := (= f3 #83)
#139 := (or #77 #137)
#140 := [def-axiom]: #139
#230 := [unit-resolution #140 #219]: #137
#231 := (not #137)
#232 := (or #231 #158)
#233 := [th-lemma]: #232
#234 := [unit-resolution #233 #230]: #158
#235 := [th-lemma #219 #131 #234 #229 #225 #227]: false
#236 := [lemma #235]: #91
#237 := [unit-resolution #142 #236]: #134
#238 := [unit-resolution #166 #237]: #160
#239 := (not #160)
#240 := (or #179 #239 #92)
#241 := [th-lemma]: #240
#242 := [unit-resolution #241 #236 #238]: #179
#243 := (not #158)
#244 := (or #176 #77 #120 #243 #200)
#245 := [th-lemma]: #244
#246 := [unit-resolution #245 #242 #219 #131 #234]: #176
#247 := [unit-resolution #209 #246]: #205
#248 := [unit-resolution #149 #247]: #147
#249 := [unit-resolution #151 #248]: #146
#250 := [unit-resolution #196 #249]: #190
[th-lemma #236 #250 #131 #234 #248 #238]: false
unsat
6246909589ff44c53af5060ab09e0fb241168550 50 0
#2 := false
#44 := 0::real
decl f4 :: real
#9 := f4
#41 := -1::real
#42 := (* -1::real f4)
decl f3 :: real
#8 := f3
#43 := (+ f3 #42)
#45 := (<= #43 0::real)
#51 := -3::real
#52 := (* -3::real f4)
#11 := 3::real
#12 := (* 3::real f3)
#53 := (+ #12 #52)
#54 := (<= #53 0::real)
#48 := (not #45)
#57 := (or #48 #54)
#60 := (not #57)
#13 := (* 3::real f4)
#14 := (<= #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#63 := (iff #16 #60)
#34 := (not #10)
#35 := (or #34 #14)
#38 := (not #35)
#61 := (iff #38 #60)
#58 := (iff #35 #57)
#55 := (iff #14 #54)
#56 := [rewrite]: #55
#49 := (iff #34 #48)
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#64 := [trans #40 #62]: #63
#33 := [asserted]: #16
#65 := [mp #33 #64]: #60
#66 := [not-or-elim #65]: #45
#67 := (not #54)
#68 := [not-or-elim #65]: #67
[th-lemma #68 #66]: false
unsat
9a368b708e53fe0140c26e7ca790639aa465ac37 55 0
#2 := false
#43 := 0::real
decl f4 :: real
#9 := f4
#56 := -3::real
#59 := (* -3::real f4)
decl f3 :: real
#8 := f3
#11 := 3::real
#12 := (* 3::real f3)
#60 := (+ #12 #59)
#58 := (>= #60 0::real)
#57 := (not #58)
#41 := -1::real
#45 := (* -1::real f4)
#46 := (+ f3 #45)
#44 := (>= #46 0::real)
#63 := (or #44 #57)
#66 := (not #63)
#13 := (* 3::real f4)
#14 := (< #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#69 := (iff #16 #66)
#34 := (not #10)
#35 := (or #34 #14)
#38 := (not #35)
#67 := (iff #38 #66)
#64 := (iff #35 #63)
#61 := (iff #14 #57)
#62 := [rewrite]: #61
#54 := (iff #34 #44)
#42 := (not #44)
#49 := (not #42)
#52 := (iff #49 #44)
#53 := [rewrite]: #52
#50 := (iff #34 #49)
#47 := (iff #10 #42)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#65 := [monotonicity #55 #62]: #64
#68 := [monotonicity #65]: #67
#39 := (iff #16 #38)
#36 := (iff #15 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#70 := [trans #40 #68]: #69
#33 := [asserted]: #16
#71 := [mp #33 #70]: #66
#73 := [not-or-elim #71]: #58
#72 := [not-or-elim #71]: #42
[th-lemma #72 #73]: false
unsat
9d1b38a4c0ecf43766b852c7e4d288a3e46da901 52 0
#2 := false
#40 := 0::real
decl f4 :: real
#9 := f4
#38 := -1::real
#42 := (* -1::real f4)
decl f3 :: real
#8 := f3
#43 := (+ f3 #42)
#53 := (<= #43 0::real)
#66 := (not #53)
#41 := (>= #43 0::real)
#56 := (or #41 #53)
#59 := (not #56)
#11 := (<= f3 f4)
#10 := (< f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#62 := (iff #13 #59)
#31 := (not #10)
#32 := (or #31 #11)
#35 := (not #32)
#60 := (iff #35 #59)
#57 := (iff #32 #56)
#54 := (iff #11 #53)
#55 := [rewrite]: #54
#51 := (iff #31 #41)
#39 := (not #41)
#46 := (not #39)
#49 := (iff #46 #41)
#50 := [rewrite]: #49
#47 := (iff #31 #46)
#44 := (iff #10 #39)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#58 := [monotonicity #52 #55]: #57
#61 := [monotonicity #58]: #60
#36 := (iff #13 #35)
#33 := (iff #12 #32)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#63 := [trans #37 #61]: #62
#30 := [asserted]: #13
#64 := [mp #30 #63]: #59
#67 := [not-or-elim #64]: #66
#65 := [not-or-elim #64]: #39
#75 := (or #53 #41)
#76 := [th-lemma]: #75
#77 := [unit-resolution #76 #65]: #53
[unit-resolution #77 #67]: false
unsat
7db3ee0924a4cb1b14a4cebbf1c598c0b8dbec57 43 0
#2 := false
decl f5 :: (-> S2 S2 S3)
#15 := (:var 0 S2)
#14 := (:var 1 S2)
#16 := (f5 #14 #15)
#561 := (pattern #16)
decl f4 :: (-> S3 S2)
#17 := (f4 #16)
#47 := (= #14 #17)
#562 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #561) #47)
#50 := (forall (vars (?v0 S2) (?v1 S2)) #47)
#565 := (iff #50 #562)
#563 := (iff #47 #47)
#564 := [refl]: #563
#566 := [quant-intro #564]: #565
#83 := (~ #50 #50)
#81 := (~ #47 #47)
#82 := [refl]: #81
#84 := [nnf-pos #82]: #83
#18 := (= #17 #14)
#19 := (forall (vars (?v0 S2) (?v1 S2)) #18)
#51 := (iff #19 #50)
#48 := (iff #18 #47)
#49 := [rewrite]: #48
#52 := [quant-intro #49]: #51
#46 := [asserted]: #19
#55 := [mp #46 #52]: #50
#73 := [mp~ #55 #84]: #50
#567 := [mp #73 #566]: #562
decl f6 :: S2
#9 := f6
decl f3 :: S2
#8 := f3
#10 := (f5 f3 f6)
#11 := (f4 #10)
#12 := (= f3 #11)
#13 := (not #12)
#45 := [asserted]: #13
#144 := (not #562)
#231 := (or #144 #12)
#145 := [quant-inst]: #231
[unit-resolution #145 #45 #567]: false
unsat
5631a67f2c650efd9761a68c96a2b28d9ed4cdd0 15 0
#2 := false
decl f3 :: real
#8 := f3
#9 := (< f3 f3)
#10 := (not #9)
#11 := (not #10)
#33 := (iff #11 false)
#31 := (iff #9 false)
#32 := [rewrite]: #31
#29 := (iff #11 #9)
#30 := [rewrite]: #29
#34 := [trans #30 #32]: #33
#28 := [asserted]: #11
[mp #28 #34]: false
unsat
8502f9cde674da83d9cbc8a977644ab6e85265ed 43 0
#2 := false
decl f5 :: (-> S2 S2 S3)
#15 := (:var 0 S2)
#14 := (:var 1 S2)
#16 := (f5 #14 #15)
#561 := (pattern #16)
decl f4 :: (-> S3 S2)
#20 := (f4 #16)
#54 := (= #15 #20)
#568 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #561) #54)
#58 := (forall (vars (?v0 S2) (?v1 S2)) #54)
#571 := (iff #58 #568)
#569 := (iff #54 #54)
#570 := [refl]: #569
#572 := [quant-intro #570]: #571
#75 := (~ #58 #58)
#74 := (~ #54 #54)
#72 := [refl]: #74
#76 := [nnf-pos #72]: #75
#21 := (= #20 #15)
#22 := (forall (vars (?v0 S2) (?v1 S2)) #21)
#59 := (iff #22 #58)
#56 := (iff #21 #54)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#53 := [asserted]: #22
#63 := [mp #53 #60]: #58
#69 := [mp~ #63 #76]: #58
#573 := [mp #69 #572]: #568
decl f3 :: S2
#8 := f3
decl f6 :: S2
#9 := f6
#10 := (f5 f6 f3)
#11 := (f4 #10)
#12 := (= f3 #11)
#13 := (not #12)
#45 := [asserted]: #13
#234 := (not #568)
#235 := (or #234 #12)
#163 := [quant-inst]: #235
[unit-resolution #163 #45 #573]: false
unsat
c41bf12f912d9026a2697f2c615b98bf21c74fe7 75 0
#2 := false
#53 := 0::real
decl f4 :: real
#9 := f4
#50 := -1::real
#64 := (* -1::real f4)
decl f3 :: real
#8 := f3
#65 := (+ f3 #64)
#66 := (<= #65 0::real)
#69 := (not #66)
decl f5 :: real
#11 := f5
#51 := (* -1::real f5)
#60 := (+ f3 #51)
#61 := (<= #60 0::real)
#52 := (+ f4 #51)
#54 := (<= #52 0::real)
#57 := (not #54)
#78 := (or #57 #61 #69)
#83 := (not #78)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#86 := (iff #16 #83)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#84 := (iff #47 #83)
#81 := (iff #42 #78)
#72 := (or #57 #61)
#75 := (or #69 #72)
#79 := (iff #75 #78)
#80 := [rewrite]: #79
#76 := (iff #42 #75)
#73 := (iff #35 #72)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#58 := (iff #34 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#74 := [monotonicity #59 #63]: #73
#70 := (iff #41 #69)
#67 := (iff #10 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#77 := [monotonicity #71 #74]: #76
#82 := [trans #77 #80]: #81
#85 := [monotonicity #82]: #84
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#87 := [trans #49 #85]: #86
#33 := [asserted]: #16
#88 := [mp #33 #87]: #83
#92 := [not-or-elim #88]: #66
#90 := (not #61)
#91 := [not-or-elim #88]: #90
#89 := [not-or-elim #88]: #54
[th-lemma #89 #91 #92]: false
unsat
7028fd42bf273f5da876a633b9b2fac12fd44679 85 0
#2 := false
decl f5 :: S2
#9 := f5
decl f4 :: S2
#8 := f4
#13 := (= f4 f5)
decl f6 :: (-> S3 S2)
decl f3 :: (-> S2 S2 S3)
#11 := (f3 f5 f4)
#349 := (f6 #11)
#548 := (= #349 f5)
#556 := (= f5 #349)
#17 := (:var 0 S2)
#16 := (:var 1 S2)
#18 := (f3 #16 #17)
#568 := (pattern #18)
#19 := (f6 #18)
#53 := (= #16 #19)
#569 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #568) #53)
#57 := (forall (vars (?v0 S2) (?v1 S2)) #53)
#572 := (iff #57 #569)
#570 := (iff #53 #53)
#571 := [refl]: #570
#573 := [quant-intro #571]: #572
#90 := (~ #57 #57)
#88 := (~ #53 #53)
#89 := [refl]: #88
#91 := [nnf-pos #89]: #90
#20 := (= #19 #16)
#21 := (forall (vars (?v0 S2) (?v1 S2)) #20)
#58 := (iff #21 #57)
#55 := (iff #20 #53)
#56 := [rewrite]: #55
#59 := [quant-intro #56]: #58
#52 := [asserted]: #21
#62 := [mp #52 #59]: #57
#80 := [mp~ #62 #91]: #57
#574 := [mp #80 #573]: #569
#560 := (not #569)
#566 := (or #560 #556)
#561 := [quant-inst]: #566
#207 := [unit-resolution #561 #574]: #556
#549 := [symm #207]: #548
#544 := (= f4 #349)
#10 := (f3 f4 f5)
#243 := (f6 #10)
#546 := (= #243 #349)
#12 := (= #10 #11)
#559 := (= #11 #10)
#48 := (not #12)
#567 := [hypothesis]: #48
#238 := (or #13 #12)
#49 := (iff #13 #48)
#14 := (iff #12 #13)
#15 := (not #14)
#50 := (iff #15 #49)
#51 := [rewrite]: #50
#47 := [asserted]: #15
#54 := [mp #47 #51]: #49
#150 := (not #49)
#237 := (or #13 #12 #150)
#151 := [def-axiom]: #237
#152 := [unit-resolution #151 #54]: #238
#557 := [unit-resolution #152 #567]: #13
#558 := (= f5 f4)
#216 := [symm #557]: #558
#200 := [monotonicity #216 #557]: #559
#543 := [symm #200]: #12
#204 := [unit-resolution #567 #543]: false
#205 := [lemma #204]: #12
#547 := [monotonicity #205]: #546
#240 := (= f4 #243)
#562 := (or #560 #240)
#217 := [quant-inst]: #562
#545 := [unit-resolution #217 #574]: #240
#550 := [trans #545 #547]: #544
#186 := [trans #550 #549]: #13
#239 := (not #13)
#242 := (or #239 #48)
#230 := (or #239 #48 #150)
#241 := [def-axiom]: #230
#170 := [unit-resolution #241 #54]: #242
#206 := [unit-resolution #170 #205]: #239
[unit-resolution #206 #186]: false
unsat
9f5fa7c760db14a67656e2a38b69825c2338f5ee 80 0
#2 := false
#53 := 0::real
decl f4 :: real
#9 := f4
#50 := -1::real
#66 := (* -1::real f4)
decl f3 :: real
#8 := f3
#67 := (+ f3 #66)
#65 := (>= #67 0::real)
#64 := (not #65)
decl f5 :: real
#11 := f5
#51 := (* -1::real f5)
#60 := (+ f3 #51)
#61 := (<= #60 0::real)
#52 := (+ f4 #51)
#54 := (<= #52 0::real)
#57 := (not #54)
#83 := (or #57 #61 #65)
#88 := (not #83)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#91 := (iff #16 #88)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#89 := (iff #47 #88)
#86 := (iff #42 #83)
#77 := (or #57 #61)
#80 := (or #65 #77)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #42 #80)
#78 := (iff #35 #77)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#58 := (iff #34 #57)
#55 := (iff #12 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#79 := [monotonicity #59 #63]: #78
#75 := (iff #41 #65)
#70 := (not #64)
#73 := (iff #70 #65)
#74 := [rewrite]: #73
#71 := (iff #41 #70)
#68 := (iff #10 #64)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#82 := [monotonicity #76 #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#92 := [trans #49 #90]: #91
#33 := [asserted]: #16
#93 := [mp #33 #92]: #88
#97 := [not-or-elim #93]: #64
#95 := (not #61)
#96 := [not-or-elim #93]: #95
#94 := [not-or-elim #93]: #54
[th-lemma #94 #96 #97]: false
unsat
ab91d7002afe61891f92aa68c03a93dbeac150bb 155 0
#2 := false
decl f7 :: S2
#12 := f7
decl f5 :: S2
#9 := f5
#16 := (= f5 f7)
#100 := (not #16)
decl f6 :: S2
#11 := f6
decl f4 :: S2
#8 := f4
#15 := (= f4 f6)
#99 := (not #15)
#90 := (or #99 #100)
decl f3 :: (-> S2 S2 S3)
#13 := (f3 f6 f7)
#10 := (f3 f4 f5)
#14 := (= #10 #13)
#91 := (not #90)
#240 := [hypothesis]: #91
#175 := (or #90 #16)
#262 := [def-axiom]: #175
#228 := [unit-resolution #262 #240]: #16
#174 := (or #90 #15)
#261 := [def-axiom]: #174
#229 := [unit-resolution #261 #240]: #15
#230 := [monotonicity #229 #228]: #14
#52 := (not #14)
#247 := (or #52 #90)
#111 := (iff #14 #90)
#17 := (and #15 #16)
#53 := (iff #17 #52)
#114 := (iff #53 #111)
#106 := (iff #90 #14)
#112 := (iff #106 #111)
#113 := [rewrite]: #112
#109 := (iff #53 #106)
#103 := (iff #91 #52)
#107 := (iff #103 #106)
#108 := [rewrite]: #107
#104 := (iff #53 #103)
#101 := (iff #17 #91)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#110 := [trans #105 #108]: #109
#115 := [trans #110 #113]: #114
#18 := (iff #14 #17)
#19 := (not #18)
#54 := (iff #19 #53)
#55 := [rewrite]: #54
#51 := [asserted]: #19
#58 := [mp #51 #55]: #53
#116 := [mp #58 #115]: #111
#254 := (not #111)
#264 := (or #52 #90 #254)
#268 := [def-axiom]: #264
#584 := [unit-resolution #268 #116]: #247
#583 := [unit-resolution #584 #240]: #52
#231 := [unit-resolution #583 #230]: false
#569 := [lemma #231]: #90
decl f8 :: (-> S3 S2)
#588 := (f8 #13)
#574 := (= #588 f6)
#589 := (= f6 #588)
#21 := (:var 0 S2)
#20 := (:var 1 S2)
#22 := (f3 #20 #21)
#592 := (pattern #22)
#23 := (f8 #22)
#57 := (= #20 #23)
#593 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #592) #57)
#61 := (forall (vars (?v0 S2) (?v1 S2)) #57)
#596 := (iff #61 #593)
#594 := (iff #57 #57)
#595 := [refl]: #594
#597 := [quant-intro #595]: #596
#94 := (~ #61 #61)
#92 := (~ #57 #57)
#93 := [refl]: #92
#95 := [nnf-pos #93]: #94
#24 := (= #23 #20)
#25 := (forall (vars (?v0 S2) (?v1 S2)) #24)
#62 := (iff #25 #61)
#59 := (iff #24 #57)
#60 := [rewrite]: #59
#63 := [quant-intro #60]: #62
#56 := [asserted]: #25
#66 := [mp #56 #63]: #61
#84 := [mp~ #66 #95]: #61
#598 := [mp #84 #597]: #593
#252 := (not #593)
#244 := (or #252 #589)
#582 := [quant-inst]: #244
#570 := [unit-resolution #582 #598]: #589
#210 := [symm #570]: #574
#575 := (= f4 #588)
#586 := (f8 #10)
#573 := (= #586 #588)
#194 := (or #14 #91)
#265 := (or #14 #91 #254)
#266 := [def-axiom]: #265
#267 := [unit-resolution #266 #116]: #194
#571 := [unit-resolution #267 #569]: #14
#568 := [monotonicity #571]: #573
#241 := (= f4 #586)
#253 := (or #252 #241)
#587 := [quant-inst]: #253
#572 := [unit-resolution #587 #598]: #241
#577 := [trans #572 #568]: #575
#215 := [trans #577 #210]: #15
decl f9 :: (-> S3 S2)
#581 := (f9 #13)
#565 := (= #581 f7)
#239 := (= f7 #581)
#26 := (f9 #22)
#65 := (= #21 #26)
#599 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #592) #65)
#69 := (forall (vars (?v0 S2) (?v1 S2)) #65)
#602 := (iff #69 #599)
#600 := (iff #65 #65)
#601 := [refl]: #600
#603 := [quant-intro #601]: #602
#86 := (~ #69 #69)
#85 := (~ #65 #65)
#83 := [refl]: #85
#87 := [nnf-pos #83]: #86
#27 := (= #26 #21)
#28 := (forall (vars (?v0 S2) (?v1 S2)) #27)
#70 := (iff #28 #69)
#67 := (iff #27 #65)
#68 := [rewrite]: #67
#71 := [quant-intro #68]: #70
#64 := [asserted]: #28
#74 := [mp #64 #71]: #69
#80 := [mp~ #74 #87]: #69
#604 := [mp #80 #603]: #599
#590 := (not #599)
#224 := (or #590 #239)
#567 := [quant-inst]: #224
#216 := [unit-resolution #567 #604]: #239
#566 := [symm #216]: #565
#272 := (= f5 #581)
#373 := (f9 #10)
#576 := (= #373 #581)
#579 := [monotonicity #571]: #576
#580 := (= f5 #373)
#585 := (or #590 #580)
#591 := [quant-inst]: #585
#578 := [unit-resolution #591 #604]: #580
#288 := [trans #578 #579]: #272
#289 := [trans #288 #566]: #16
#176 := (or #91 #99 #100)
#263 := [def-axiom]: #176
[unit-resolution #263 #289 #215 #569]: false
unsat
ef54c95730a86f29e142ca8c0703d6c3a6105c5e 80 0
#2 := false
#52 := 0::real
decl f4 :: real
#9 := f4
#50 := -1::real
#69 := (* -1::real f4)
decl f3 :: real
#8 := f3
#70 := (+ f3 #69)
#71 := (<= #70 0::real)
#74 := (not #71)
decl f5 :: real
#11 := f5
#54 := (* -1::real f5)
#65 := (+ f3 #54)
#66 := (<= #65 0::real)
#55 := (+ f4 #54)
#53 := (>= #55 0::real)
#83 := (or #53 #66 #74)
#88 := (not #83)
#13 := (<= f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#91 := (iff #16 #88)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#89 := (iff #47 #88)
#86 := (iff #42 #83)
#77 := (or #53 #66)
#80 := (or #74 #77)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #42 #80)
#78 := (iff #35 #77)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#63 := (iff #34 #53)
#51 := (not #53)
#58 := (not #51)
#61 := (iff #58 #53)
#62 := [rewrite]: #61
#59 := (iff #34 #58)
#56 := (iff #12 #51)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#79 := [monotonicity #64 #68]: #78
#75 := (iff #41 #74)
#72 := (iff #10 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [monotonicity #76 #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#92 := [trans #49 #90]: #91
#33 := [asserted]: #16
#93 := [mp #33 #92]: #88
#97 := [not-or-elim #93]: #71
#94 := [not-or-elim #93]: #51
#95 := (not #66)
#96 := [not-or-elim #93]: #95
[th-lemma #96 #94 #97]: false
unsat
c53da5ad16e14d4123258f05451b97645b05e47b 91 0
#2 := false
decl f9 :: S3
#14 := f9
decl f5 :: S3
#8 := f5
#21 := (= f5 f9)
decl f3 :: (-> S2 S3)
decl f4 :: (-> S3 S4 S2)
decl f6 :: (-> S3 S5 S4)
decl f11 :: S5
#16 := f11
decl f10 :: S3
#15 := f10
#17 := (f6 f10 f11)
#18 := (f4 f9 #17)
#19 := (f3 #18)
decl f8 :: S5
#10 := f8
decl f7 :: S3
#9 := f7
#11 := (f6 f7 f8)
#12 := (f4 f5 #11)
#13 := (f3 #12)
#20 := (= #13 #19)
#22 := (iff #20 #21)
#324 := (iff #21 #20)
#603 := (= f9 #19)
#30 := (:var 0 S4)
#24 := (:var 1 S3)
#31 := (f4 #24 #30)
#635 := (pattern #31)
#32 := (f3 #31)
#82 := (= #24 #32)
#636 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #635) #82)
#86 := (forall (vars (?v0 S3) (?v1 S4)) #82)
#639 := (iff #86 #636)
#637 := (iff #82 #82)
#638 := [refl]: #637
#640 := [quant-intro #638]: #639
#127 := (~ #86 #86)
#126 := (~ #82 #82)
#124 := [refl]: #126
#128 := [nnf-pos #124]: #127
#33 := (= #32 #24)
#34 := (forall (vars (?v0 S3) (?v1 S4)) #33)
#87 := (iff #34 #86)
#84 := (iff #33 #82)
#85 := [rewrite]: #84
#88 := [quant-intro #85]: #87
#81 := [asserted]: #34
#91 := [mp #81 #88]: #86
#121 := [mp~ #91 #128]: #86
#641 := [mp #121 #640]: #636
#276 := (not #636)
#606 := (or #276 #603)
#607 := [quant-inst]: #606
#602 := [unit-resolution #607 #641]: #603
#627 := (= f5 #13)
#619 := (or #276 #627)
#260 := [quant-inst]: #619
#308 := [unit-resolution #260 #641]: #627
#325 := [monotonicity #308 #602]: #324
#326 := [symm #325]: #22
#299 := (not #21)
#69 := (not #20)
#312 := (iff #69 #299)
#327 := [monotonicity #326]: #312
#614 := [hypothesis]: #69
#218 := [mp #614 #327]: #299
#298 := (or #21 #20)
#70 := (iff #21 #69)
#23 := (not #22)
#71 := (iff #23 #70)
#72 := [rewrite]: #71
#68 := [asserted]: #23
#75 := [mp #68 #72]: #70
#210 := (not #70)
#297 := (or #21 #20 #210)
#211 := [def-axiom]: #297
#212 := [unit-resolution #211 #75]: #298
#612 := [unit-resolution #212 #614]: #21
#597 := [unit-resolution #612 #218]: false
#598 := [lemma #597]: #20
#321 := [mp #598 #326]: #21
#302 := (or #299 #69)
#290 := (or #299 #69 #210)
#301 := [def-axiom]: #290
#230 := [unit-resolution #301 #75]: #302
#320 := [unit-resolution #230 #598]: #299
[unit-resolution #320 #321]: false
unsat
0c5d7dbb8aa2814977e1a9556d08eabbc11dd00b 85 0
#2 := false
#52 := 0::real
decl f4 :: real
#9 := f4
#50 := -1::real
#72 := (* -1::real f4)
decl f3 :: real
#8 := f3
#73 := (+ f3 #72)
#71 := (>= #73 0::real)
#70 := (not #71)
decl f5 :: real
#11 := f5
#54 := (* -1::real f5)
#67 := (+ f3 #54)
#66 := (>= #67 0::real)
#65 := (not #66)
#55 := (+ f4 #54)
#53 := (>= #55 0::real)
#89 := (or #53 #65 #71)
#94 := (not #89)
#13 := (< f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#97 := (iff #16 #94)
#34 := (not #12)
#35 := (or #34 #13)
#41 := (not #10)
#42 := (or #41 #35)
#47 := (not #42)
#95 := (iff #47 #94)
#92 := (iff #42 #89)
#83 := (or #53 #65)
#86 := (or #71 #83)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #42 #86)
#84 := (iff #35 #83)
#68 := (iff #13 #65)
#69 := [rewrite]: #68
#63 := (iff #34 #53)
#51 := (not #53)
#58 := (not #51)
#61 := (iff #58 #53)
#62 := [rewrite]: #61
#59 := (iff #34 #58)
#56 := (iff #12 #51)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#85 := [monotonicity #64 #69]: #84
#81 := (iff #41 #71)
#76 := (not #70)
#79 := (iff #76 #71)
#80 := [rewrite]: #79
#77 := (iff #41 #76)
#74 := (iff #10 #70)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#88 := [monotonicity #82 #85]: #87
#93 := [trans #88 #91]: #92
#96 := [monotonicity #93]: #95
#48 := (iff #16 #47)
#45 := (iff #15 #42)
#38 := (implies #10 #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#98 := [trans #49 #96]: #97
#33 := [asserted]: #16
#99 := [mp #33 #98]: #94
#102 := [not-or-elim #99]: #70
#100 := [not-or-elim #99]: #51
#101 := [not-or-elim #99]: #66
[th-lemma #101 #100 #102]: false
unsat
4d6ae030a899d6a058af8429edba2402745a216b 210 0
#2 := false
decl f11 :: S5
#16 := f11
decl f8 :: S5
#10 := f8
#22 := (= f8 f11)
#158 := (not #22)
decl f10 :: S4
#15 := f10
decl f7 :: S4
#9 := f7
#21 := (= f7 f10)
#157 := (not #21)
#139 := (or #157 #158)
decl f3 :: (-> S2 S3)
decl f4 :: (-> S4 S3 S2)
decl f6 :: (-> S4 S5 S3)
#17 := (f6 f10 f11)
decl f9 :: S4
#14 := f9
#18 := (f4 f9 #17)
#19 := (f3 #18)
#11 := (f6 f7 f8)
decl f5 :: S4
#8 := f5
#12 := (f4 f5 #11)
#13 := (f3 #12)
#20 := (= #13 #19)
#626 := (= #17 #19)
#32 := (:var 0 S3)
#26 := (:var 1 S4)
#33 := (f4 #26 #32)
#657 := (pattern #33)
#40 := (f3 #33)
#100 := (= #32 #40)
#670 := (forall (vars (?v0 S4) (?v1 S3)) (:pat #657) #100)
#104 := (forall (vars (?v0 S4) (?v1 S3)) #100)
#673 := (iff #104 #670)
#671 := (iff #100 #100)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#133 := (~ #104 #104)
#148 := (~ #100 #100)
#149 := [refl]: #148
#134 := [nnf-pos #149]: #133
#41 := (= #40 #32)
#42 := (forall (vars (?v0 S4) (?v1 S3)) #41)
#105 := (iff #42 #104)
#102 := (iff #41 #100)
#103 := [rewrite]: #102
#106 := [quant-intro #103]: #105
#99 := [asserted]: #42
#109 := [mp #99 #106]: #104
#150 := [mp~ #109 #134]: #104
#675 := [mp #150 #674]: #670
#629 := (not #670)
#273 := (or #629 #626)
#274 := [quant-inst]: #273
#334 := [unit-resolution #274 #675]: #626
#621 := (= #13 #17)
#343 := (= #11 #17)
#140 := (not #139)
#330 := [hypothesis]: #140
#233 := (or #139 #22)
#320 := [def-axiom]: #233
#349 := [unit-resolution #320 #330]: #22
#232 := (or #139 #21)
#319 := [def-axiom]: #232
#240 := [unit-resolution #319 #330]: #21
#617 := [monotonicity #240 #349]: #343
#620 := (= #13 #11)
#286 := (= #11 #13)
#630 := (or #629 #286)
#631 := [quant-inst]: #630
#619 := [unit-resolution #631 #675]: #286
#342 := [symm #619]: #620
#618 := [trans #342 #617]: #621
#622 := [trans #618 #334]: #20
#71 := (not #20)
#305 := (or #71 #139)
#169 := (iff #20 #139)
#23 := (and #21 #22)
#72 := (iff #23 #71)
#172 := (iff #72 #169)
#164 := (iff #139 #20)
#170 := (iff #164 #169)
#171 := [rewrite]: #170
#167 := (iff #72 #164)
#161 := (iff #140 #71)
#165 := (iff #161 #164)
#166 := [rewrite]: #165
#162 := (iff #72 #161)
#159 := (iff #23 #140)
#160 := [rewrite]: #159
#163 := [monotonicity #160]: #162
#168 := [trans #163 #166]: #167
#173 := [trans #168 #171]: #172
#24 := (iff #20 #23)
#25 := (not #24)
#73 := (iff #25 #72)
#74 := [rewrite]: #73
#70 := [asserted]: #25
#77 := [mp #70 #74]: #72
#174 := [mp #77 #173]: #169
#312 := (not #169)
#322 := (or #71 #139 #312)
#326 := [def-axiom]: #322
#642 := [unit-resolution #326 #174]: #305
#346 := [unit-resolution #642 #330]: #71
#331 := [unit-resolution #346 #622]: false
#332 := [lemma #331]: #139
decl f12 :: (-> S3 S4)
#646 := (f12 #17)
#606 := (= #646 f10)
#647 := (= f10 #646)
#27 := (:var 0 S5)
#28 := (f6 #26 #27)
#650 := (pattern #28)
#29 := (f12 #28)
#76 := (= #26 #29)
#651 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #650) #76)
#80 := (forall (vars (?v0 S4) (?v1 S5)) #76)
#654 := (iff #80 #651)
#652 := (iff #76 #76)
#653 := [refl]: #652
#655 := [quant-intro #653]: #654
#143 := (~ #80 #80)
#141 := (~ #76 #76)
#142 := [refl]: #141
#144 := [nnf-pos #142]: #143
#30 := (= #29 #26)
#31 := (forall (vars (?v0 S4) (?v1 S5)) #30)
#81 := (iff #31 #80)
#78 := (iff #30 #76)
#79 := [rewrite]: #78
#82 := [quant-intro #79]: #81
#75 := [asserted]: #31
#85 := [mp #75 #82]: #80
#127 := [mp~ #85 #144]: #80
#656 := [mp #127 #655]: #651
#310 := (not #651)
#302 := (or #310 #647)
#640 := [quant-inst]: #302
#333 := [unit-resolution #640 #656]: #647
#607 := [symm #333]: #606
#602 := (= f7 #646)
#644 := (f12 #11)
#616 := (= #644 #646)
#613 := (= #19 #17)
#614 := [symm #334]: #613
#327 := (= #11 #19)
#252 := (or #20 #140)
#323 := (or #20 #140 #312)
#324 := [def-axiom]: #323
#325 := [unit-resolution #324 #174]: #252
#335 := [unit-resolution #325 #332]: #20
#611 := [trans #619 #335]: #327
#615 := [trans #611 #614]: #343
#605 := [monotonicity #615]: #616
#299 := (= f7 #644)
#311 := (or #310 #299)
#645 := [quant-inst]: #311
#612 := [unit-resolution #645 #656]: #299
#603 := [trans #612 #605]: #602
#608 := [trans #603 #607]: #21
decl f14 :: (-> S3 S5)
#639 := (f14 #17)
#452 := (= #639 f11)
#297 := (= f11 #639)
#37 := (f14 #28)
#92 := (= #27 #37)
#664 := (forall (vars (?v0 S4) (?v1 S5)) (:pat #650) #92)
#96 := (forall (vars (?v0 S4) (?v1 S5)) #92)
#667 := (iff #96 #664)
#665 := (iff #92 #92)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#131 := (~ #96 #96)
#145 := (~ #92 #92)
#146 := [refl]: #145
#132 := [nnf-pos #146]: #131
#38 := (= #37 #27)
#39 := (forall (vars (?v0 S4) (?v1 S5)) #38)
#97 := (iff #39 #96)
#94 := (iff #38 #92)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#91 := [asserted]: #39
#101 := [mp #91 #98]: #96
#147 := [mp~ #101 #132]: #96
#669 := [mp #147 #668]: #664
#648 := (not #664)
#282 := (or #648 #297)
#625 := [quant-inst]: #282
#609 := [unit-resolution #625 #669]: #297
#453 := [symm #609]: #452
#595 := (= f8 #639)
#431 := (f14 #11)
#610 := (= #431 #639)
#451 := [monotonicity #615]: #610
#638 := (= f8 #431)
#643 := (or #648 #638)
#649 := [quant-inst]: #643
#604 := [unit-resolution #649 #669]: #638
#596 := [trans #604 #451]: #595
#597 := [trans #596 #453]: #22
#234 := (or #140 #157 #158)
#321 := [def-axiom]: #234
[unit-resolution #321 #597 #608 #332]: false
unsat
ad850a4d677f642c1e98f0e5f3b7d3f84b6c874a 69 0
#2 := false
#44 := 0::real
decl f5 :: real
#11 := f5
#42 := -1::real
#51 := (* -1::real f5)
decl f3 :: real
#8 := f3
#62 := (+ f3 #51)
#63 := (<= #62 0::real)
#64 := (not #63)
decl f4 :: real
#9 := f4
#52 := (+ f4 #51)
#50 := (>= #52 0::real)
#53 := (not #50)
#46 := (* -1::real f4)
#47 := (+ f3 #46)
#45 := (>= #47 0::real)
#43 := (not #45)
#56 := (and #43 #53)
#59 := (not #56)
#74 := (or #59 #63)
#77 := (not #74)
#14 := (< f5 f3)
#15 := (not #14)
#12 := (< f4 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (not #16)
#80 := (iff #17 #77)
#35 := (not #13)
#36 := (or #35 #15)
#39 := (not #36)
#78 := (iff #39 #77)
#75 := (iff #36 #74)
#72 := (iff #15 #63)
#67 := (not #64)
#70 := (iff #67 #63)
#71 := [rewrite]: #70
#68 := (iff #15 #67)
#65 := (iff #14 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#60 := (iff #35 #59)
#57 := (iff #13 #56)
#54 := (iff #12 #53)
#55 := [rewrite]: #54
#48 := (iff #10 #43)
#49 := [rewrite]: #48
#58 := [monotonicity #49 #55]: #57
#61 := [monotonicity #58]: #60
#76 := [monotonicity #61 #73]: #75
#79 := [monotonicity #76]: #78
#40 := (iff #17 #39)
#37 := (iff #16 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#81 := [trans #41 #79]: #80
#34 := [asserted]: #17
#82 := [mp #34 #81]: #77
#86 := [not-or-elim #82]: #64
#83 := [not-or-elim #82]: #56
#84 := [and-elim #83]: #43
#85 := [and-elim #83]: #53
[th-lemma #85 #84 #86]: false
unsat
003bb45597da3e4b1800d61bab0b4e1d95dbdf99 144 0
#2 := false
decl f11 :: S3
#16 := f11
decl f8 :: S3
#9 := f8
#23 := (= f8 f11)
decl f3 :: (-> S2 S3)
decl f4 :: (-> S4 S2)
decl f5 :: (-> S3 S2 S4)
decl f7 :: (-> S3 S5 S2)
decl f12 :: S5
#17 := f12
#18 := (f7 f11 f12)
decl f10 :: S3
#15 := f10
#19 := (f5 f10 #18)
#20 := (f4 #19)
#21 := (f3 #20)
decl f9 :: S5
#10 := f9
#11 := (f7 f8 f9)
decl f6 :: S3
#8 := f6
#12 := (f5 f6 #11)
#13 := (f4 #12)
#14 := (f3 #13)
#22 := (= #14 #21)
#24 := (iff #22 #23)
#315 := (= #21 f11)
#411 := (f3 #18)
#312 := (= #411 f11)
#618 := (= f11 #411)
#27 := (:var 0 S5)
#26 := (:var 1 S3)
#28 := (f7 #26 #27)
#630 := (pattern #28)
#29 := (f3 #28)
#76 := (= #26 #29)
#631 := (forall (vars (?v0 S3) (?v1 S5)) (:pat #630) #76)
#80 := (forall (vars (?v0 S3) (?v1 S5)) #76)
#634 := (iff #80 #631)
#632 := (iff #76 #76)
#633 := [refl]: #632
#635 := [quant-intro #633]: #634
#143 := (~ #80 #80)
#141 := (~ #76 #76)
#142 := [refl]: #141
#144 := [nnf-pos #142]: #143
#30 := (= #29 #26)
#31 := (forall (vars (?v0 S3) (?v1 S5)) #30)
#81 := (iff #31 #80)
#78 := (iff #30 #76)
#79 := [rewrite]: #78
#82 := [quant-intro #79]: #81
#75 := [asserted]: #31
#85 := [mp #75 #82]: #80
#127 := [mp~ #85 #144]: #80
#636 := [mp #127 #635]: #631
#622 := (not #631)
#628 := (or #622 #618)
#623 := [quant-inst]: #628
#323 := [unit-resolution #623 #636]: #618
#313 := [symm #323]: #312
#602 := (= #21 #411)
#601 := (= #20 #18)
#607 := (= #18 #20)
#32 := (:var 0 S2)
#33 := (f5 #26 #32)
#637 := (pattern #33)
#40 := (f4 #33)
#100 := (= #32 #40)
#650 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #637) #100)
#104 := (forall (vars (?v0 S3) (?v1 S2)) #100)
#653 := (iff #104 #650)
#651 := (iff #100 #100)
#652 := [refl]: #651
#654 := [quant-intro #652]: #653
#133 := (~ #104 #104)
#148 := (~ #100 #100)
#149 := [refl]: #148
#134 := [nnf-pos #149]: #133
#41 := (= #40 #32)
#42 := (forall (vars (?v0 S3) (?v1 S2)) #41)
#105 := (iff #42 #104)
#102 := (iff #41 #100)
#103 := [rewrite]: #102
#106 := [quant-intro #103]: #105
#99 := [asserted]: #42
#109 := [mp #99 #106]: #104
#150 := [mp~ #109 #134]: #104
#655 := [mp #150 #654]: #650
#267 := (not #650)
#606 := (or #267 #607)
#612 := [quant-inst]: #606
#597 := [unit-resolution #612 #655]: #607
#598 := [symm #597]: #601
#311 := [monotonicity #598]: #602
#593 := [trans #311 #313]: #315
#587 := (= #14 f8)
#305 := (f3 #11)
#585 := (= #305 f8)
#302 := (= f8 #305)
#624 := (or #622 #302)
#279 := [quant-inst]: #624
#594 := [unit-resolution #279 #636]: #302
#586 := [symm #594]: #585
#592 := (= #14 #305)
#591 := (= #13 #11)
#620 := (= #11 #13)
#268 := (or #267 #620)
#269 := [quant-inst]: #268
#307 := [unit-resolution #269 #655]: #620
#595 := [symm #307]: #591
#596 := [monotonicity #595]: #592
#582 := [trans #596 #586]: #587
#583 := [monotonicity #582 #593]: #24
#301 := (not #23)
#71 := (not #22)
#588 := (iff #71 #301)
#589 := [monotonicity #583]: #588
#220 := [hypothesis]: #71
#584 := [mp #220 #589]: #301
#300 := (or #23 #22)
#72 := (iff #23 #71)
#25 := (not #24)
#73 := (iff #25 #72)
#74 := [rewrite]: #73
#70 := [asserted]: #25
#77 := [mp #70 #74]: #72
#212 := (not #72)
#299 := (or #23 #22 #212)
#213 := [def-axiom]: #299
#214 := [unit-resolution #213 #77]: #300
#599 := [unit-resolution #214 #220]: #23
#590 := [unit-resolution #599 #584]: false
#431 := [lemma #590]: #22
#433 := [mp #431 #583]: #23
#304 := (or #301 #71)
#292 := (or #301 #71 #212)
#303 := [def-axiom]: #292
#232 := [unit-resolution #303 #77]: #304
#432 := [unit-resolution #232 #431]: #301
[unit-resolution #432 #433]: false
unsat
6cc8ed53fe294f253a561b590f79ef0e0271d1c2 50 0
#2 := false
decl f3 :: (-> S2 S3 S4 S3 S4)
#15 := (:var 1 S3)
#16 := (:var 0 S4)
#14 := (:var 2 S2)
#17 := (f3 #14 #15 #16 #15)
#571 := (pattern #17)
#54 := (= #16 #17)
#572 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #571) #54)
#58 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #54)
#575 := (iff #58 #572)
#573 := (iff #54 #54)
#574 := [refl]: #573
#576 := [quant-intro #574]: #575
#87 := (~ #58 #58)
#85 := (~ #54 #54)
#86 := [refl]: #85
#88 := [nnf-pos #86]: #87
#18 := (= #17 #16)
#19 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #18)
#59 := (iff #19 #58)
#56 := (iff #18 #54)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#53 := [asserted]: #19
#63 := [mp #53 #60]: #58
#79 := [mp~ #63 #88]: #58
#577 := [mp #79 #576]: #572
decl f5 :: S3
#9 := f5
decl f6 :: S4
#10 := f6
decl f4 :: S2
#8 := f4
#11 := (f3 f4 f5 f6 f5)
#47 := (= f6 #11)
#50 := (not #47)
#12 := (= #11 f6)
#13 := (not #12)
#51 := (iff #13 #50)
#48 := (iff #12 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#46 := [asserted]: #13
#55 := [mp #46 #52]: #50
#154 := (not #572)
#241 := (or #154 #47)
#155 := [quant-inst]: #241
[unit-resolution #155 #55 #577]: false
unsat
31b5dadcaa7e7a3e69848f4809b04b844a6e8b56 144 0
#2 := false
decl f12 :: S3
#17 := f12
decl f9 :: S3
#10 := f9
#23 := (= f9 f12)
decl f3 :: (-> S2 S3)
decl f4 :: (-> S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f7 :: (-> S5 S3 S2)
decl f11 :: S5
#16 := f11
#18 := (f7 f11 f12)
decl f10 :: S5
#15 := f10
#19 := (f5 f10 #18)
#20 := (f4 #19)
#21 := (f3 #20)
decl f8 :: S5
#9 := f8
#11 := (f7 f8 f9)
decl f6 :: S5
#8 := f6
#12 := (f5 f6 #11)
#13 := (f4 #12)
#14 := (f3 #13)
#22 := (= #14 #21)
#24 := (iff #22 #23)
#315 := (= #21 f12)
#626 := (f3 #18)
#312 := (= #626 f12)
#627 := (= f12 #626)
#27 := (:var 0 S3)
#26 := (:var 1 S5)
#28 := (f7 #26 #27)
#630 := (pattern #28)
#37 := (f3 #28)
#92 := (= #27 #37)
#644 := (forall (vars (?v0 S5) (?v1 S3)) (:pat #630) #92)
#96 := (forall (vars (?v0 S5) (?v1 S3)) #92)
#647 := (iff #96 #644)
#645 := (iff #92 #92)
#646 := [refl]: #645
#648 := [quant-intro #646]: #647
#131 := (~ #96 #96)
#145 := (~ #92 #92)
#146 := [refl]: #145
#132 := [nnf-pos #146]: #131
#38 := (= #37 #27)
#39 := (forall (vars (?v0 S5) (?v1 S3)) #38)
#97 := (iff #39 #96)
#94 := (iff #38 #92)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#91 := [asserted]: #39
#101 := [mp #91 #98]: #96
#147 := [mp~ #101 #132]: #96
#649 := [mp #147 #648]: #644
#290 := (not #644)
#277 := (or #290 #627)
#282 := [quant-inst]: #277
#323 := [unit-resolution #282 #649]: #627
#313 := [symm #323]: #312
#602 := (= #21 #626)
#601 := (= #20 #18)
#607 := (= #18 #20)
#32 := (:var 0 S2)
#33 := (f5 #26 #32)
#637 := (pattern #33)
#40 := (f4 #33)
#100 := (= #32 #40)
#650 := (forall (vars (?v0 S5) (?v1 S2)) (:pat #637) #100)
#104 := (forall (vars (?v0 S5) (?v1 S2)) #100)
#653 := (iff #104 #650)
#651 := (iff #100 #100)
#652 := [refl]: #651
#654 := [quant-intro #652]: #653
#133 := (~ #104 #104)
#148 := (~ #100 #100)
#149 := [refl]: #148
#134 := [nnf-pos #149]: #133
#41 := (= #40 #32)
#42 := (forall (vars (?v0 S5) (?v1 S2)) #41)
#105 := (iff #42 #104)
#102 := (iff #41 #100)
#103 := [rewrite]: #102
#106 := [quant-intro #103]: #105
#99 := [asserted]: #42
#109 := [mp #99 #106]: #104
#150 := [mp~ #109 #134]: #104
#655 := [mp #150 #654]: #650
#267 := (not #650)
#606 := (or #267 #607)
#612 := [quant-inst]: #606
#597 := [unit-resolution #612 #655]: #607
#598 := [symm #597]: #601
#311 := [monotonicity #598]: #602
#593 := [trans #311 #313]: #315
#587 := (= #14 f9)
#306 := (f3 #11)
#585 := (= #306 f9)
#285 := (= f9 #306)
#291 := (or #290 #285)
#625 := [quant-inst]: #291
#594 := [unit-resolution #625 #649]: #285
#586 := [symm #594]: #585
#592 := (= #14 #306)
#591 := (= #13 #11)
#620 := (= #11 #13)
#268 := (or #267 #620)
#269 := [quant-inst]: #268
#307 := [unit-resolution #269 #655]: #620
#595 := [symm #307]: #591
#596 := [monotonicity #595]: #592
#582 := [trans #596 #586]: #587
#583 := [monotonicity #582 #593]: #24
#301 := (not #23)
#71 := (not #22)
#588 := (iff #71 #301)
#589 := [monotonicity #583]: #588
#220 := [hypothesis]: #71
#584 := [mp #220 #589]: #301
#300 := (or #23 #22)
#72 := (iff #23 #71)
#25 := (not #24)
#73 := (iff #25 #72)
#74 := [rewrite]: #73
#70 := [asserted]: #25
#77 := [mp #70 #74]: #72
#212 := (not #72)
#299 := (or #23 #22 #212)
#213 := [def-axiom]: #299
#214 := [unit-resolution #213 #77]: #300
#599 := [unit-resolution #214 #220]: #23
#590 := [unit-resolution #599 #584]: false
#431 := [lemma #590]: #22
#433 := [mp #431 #583]: #23
#304 := (or #301 #71)
#292 := (or #301 #71 #212)
#303 := [def-axiom]: #292
#232 := [unit-resolution #303 #77]: #304
#432 := [unit-resolution #232 #431]: #301
[unit-resolution #432 #433]: false
unsat
d2a264ef3e43d9b7d009fa11ec172212f0bd6279 85 0
#2 := false
decl f8 :: (-> S3 S2 S4)
decl f4 :: S2
#9 := f4
decl f6 :: S3
#12 := f6
#15 := (f8 f6 f4)
decl f5 :: (-> S3 S2 S4 S2 S4)
decl f7 :: S4
#13 := f7
decl f3 :: S2
#8 := f3
#14 := (f5 f6 f3 f7 f4)
#16 := (= #14 #15)
#161 := (= f7 #14)
#10 := (= f3 f4)
#248 := (ite #10 #161 #16)
#252 := (not #248)
#59 := (not #16)
#52 := (or #10 #16)
#55 := (not #52)
#11 := (not #10)
#17 := (implies #11 #16)
#18 := (not #17)
#56 := (iff #18 #55)
#53 := (iff #17 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#51 := [asserted]: #18
#60 := [mp #51 #57]: #55
#61 := [not-or-elim #60]: #59
#58 := [not-or-elim #60]: #11
#254 := (or #252 #10 #16)
#251 := [def-axiom]: #254
#162 := [unit-resolution #251 #58 #61]: #252
#28 := (:var 0 S2)
#27 := (:var 1 S4)
#26 := (:var 2 S2)
#25 := (:var 3 S3)
#29 := (f5 #25 #26 #27 #28)
#586 := (pattern #29)
#31 := (f8 #25 #28)
#83 := (= #29 #31)
#86 := (= #27 #29)
#70 := (= #26 #28)
#93 := (ite #70 #86 #83)
#587 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) (:pat #586) #93)
#100 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #93)
#590 := (iff #100 #587)
#588 := (iff #93 #93)
#589 := [refl]: #588
#591 := [quant-intro #589]: #590
#74 := (ite #70 #27 #31)
#77 := (= #29 #74)
#80 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #77)
#101 := (iff #80 #100)
#94 := (iff #77 #93)
#99 := [rewrite]: #94
#102 := [quant-intro #99]: #101
#91 := (~ #80 #80)
#90 := (~ #77 #77)
#87 := [refl]: #90
#92 := [nnf-pos #87]: #91
#30 := (= #28 #26)
#32 := (ite #30 #27 #31)
#33 := (= #29 #32)
#34 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #33)
#81 := (iff #34 #80)
#78 := (iff #33 #77)
#75 := (= #32 #74)
#72 := (iff #30 #70)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#82 := [quant-intro #79]: #81
#69 := [asserted]: #34
#85 := [mp #69 #82]: #80
#88 := [mp~ #85 #92]: #80
#103 := [mp #88 #102]: #100
#592 := [mp #103 #591]: #587
#163 := (not #587)
#250 := (or #163 #248)
#241 := [quant-inst]: #250
[unit-resolution #241 #592 #162]: false
unsat
87752431ac232f724f4719a9dd746411dc8e0334 103 0
#2 := false
decl f6 :: S3
#9 := f6
decl f5 :: S3
#8 := f5
#14 := (= f5 f6)
decl f7 :: (-> S2 S3)
decl f4 :: (-> S3 S3 S2)
#10 := (f4 f5 f6)
#12 := (f7 #10)
decl f3 :: (-> S2 S3)
#11 := (f3 #10)
#13 := (= #11 #12)
#15 := (iff #13 #14)
#558 := (iff #14 #13)
#241 := (= f6 #12)
#18 := (:var 0 S3)
#17 := (:var 1 S3)
#19 := (f4 #17 #18)
#569 := (pattern #19)
#23 := (f7 #19)
#62 := (= #18 #23)
#576 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #569) #62)
#66 := (forall (vars (?v0 S3) (?v1 S3)) #62)
#579 := (iff #66 #576)
#577 := (iff #62 #62)
#578 := [refl]: #577
#580 := [quant-intro #578]: #579
#83 := (~ #66 #66)
#82 := (~ #62 #62)
#80 := [refl]: #82
#84 := [nnf-pos #80]: #83
#24 := (= #23 #18)
#25 := (forall (vars (?v0 S3) (?v1 S3)) #24)
#67 := (iff #25 #66)
#64 := (iff #24 #62)
#65 := [rewrite]: #64
#68 := [quant-intro #65]: #67
#61 := [asserted]: #25
#71 := [mp #61 #68]: #66
#77 := [mp~ #71 #84]: #66
#581 := [mp #77 #580]: #576
#350 := (not #576)
#557 := (or #350 #241)
#229 := [quant-inst]: #557
#562 := [unit-resolution #229 #581]: #241
#244 := (= f5 #11)
#20 := (f3 #19)
#54 := (= #17 #20)
#570 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #569) #54)
#58 := (forall (vars (?v0 S3) (?v1 S3)) #54)
#573 := (iff #58 #570)
#571 := (iff #54 #54)
#572 := [refl]: #571
#574 := [quant-intro #572]: #573
#91 := (~ #58 #58)
#89 := (~ #54 #54)
#90 := [refl]: #89
#92 := [nnf-pos #90]: #91
#21 := (= #20 #17)
#22 := (forall (vars (?v0 S3) (?v1 S3)) #21)
#59 := (iff #22 #58)
#56 := (iff #21 #54)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#53 := [asserted]: #22
#63 := [mp #53 #60]: #58
#81 := [mp~ #63 #92]: #58
#575 := [mp #81 #574]: #570
#224 := (not #570)
#561 := (or #224 #244)
#563 := [quant-inst]: #561
#568 := [unit-resolution #563 #575]: #244
#216 := [monotonicity #568 #562]: #558
#221 := [symm #216]: #15
#240 := (not #14)
#49 := (not #13)
#559 := (iff #49 #240)
#217 := [monotonicity #221]: #559
#230 := [hypothesis]: #49
#560 := [mp #230 #217]: #240
#239 := (or #14 #13)
#50 := (iff #14 #49)
#16 := (not #15)
#51 := (iff #16 #50)
#52 := [rewrite]: #51
#48 := [asserted]: #16
#55 := [mp #48 #52]: #50
#151 := (not #50)
#238 := (or #14 #13 #151)
#152 := [def-axiom]: #238
#153 := [unit-resolution #152 #55]: #239
#564 := [unit-resolution #153 #230]: #14
#201 := [unit-resolution #564 #560]: false
#544 := [lemma #201]: #13
#206 := [mp #544 #221]: #14
#243 := (or #240 #49)
#231 := (or #240 #49 #151)
#242 := [def-axiom]: #231
#171 := [unit-resolution #242 #55]: #243
#205 := [unit-resolution #171 #544]: #240
[unit-resolution #205 #206]: false
unsat
13cd2a6082f8fe0947641619628aa7b793fa5eb0 158 0
#2 := false
decl f5 :: (-> S3 S2 S4)
decl f3 :: S2
#8 := f3
decl f6 :: (-> S3 S2 S4 S3)
decl f9 :: S4
#15 := f9
decl f4 :: S2
#9 := f4
decl f8 :: S4
#13 := f8
decl f7 :: S3
#12 := f7
#14 := (f6 f7 f3 f8)
#16 := (f6 #14 f4 f9)
#17 := (f5 #16 f3)
#56 := (= f8 #17)
#173 := (f5 #14 f3)
#264 := (= #17 #173)
#577 := (iff #264 #56)
#214 := (iff #56 #264)
#567 := (= #173 #17)
#574 := (iff #567 #264)
#576 := [commutativity]: #574
#573 := (iff #56 #567)
#260 := (= f8 #173)
#23 := (:var 0 S4)
#22 := (:var 1 S2)
#21 := (:var 2 S3)
#24 := (f6 #21 #22 #23)
#591 := (pattern #24)
#25 := (f5 #24 #22)
#75 := (= #23 #25)
#593 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) (:pat #591) #75)
#78 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #75)
#592 := (iff #78 #593)
#595 := (iff #593 #593)
#596 := [rewrite]: #595
#594 := [rewrite]: #592
#597 := [trans #594 #596]: #592
#109 := (~ #78 #78)
#107 := (~ #75 #75)
#108 := [refl]: #107
#110 := [nnf-pos #108]: #109
#26 := (= #25 #23)
#27 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #26)
#79 := (iff #27 #78)
#76 := (iff #26 #75)
#77 := [rewrite]: #76
#80 := [quant-intro #77]: #79
#74 := [asserted]: #27
#83 := [mp #74 #80]: #78
#101 := [mp~ #83 #110]: #78
#598 := [mp #101 #597]: #593
#175 := (not #593)
#262 := (or #175 #260)
#253 := [quant-inst]: #262
#572 := [unit-resolution #253 #598]: #260
#209 := [monotonicity #572]: #573
#215 := [trans #209 #576]: #214
#575 := [symm #215]: #577
#265 := (= f9 #17)
#10 := (= f3 f4)
#585 := (ite #10 #265 #264)
#32 := (:var 0 S2)
#30 := (:var 1 S4)
#29 := (:var 2 S2)
#28 := (:var 3 S3)
#31 := (f6 #28 #29 #30)
#33 := (f5 #31 #32)
#599 := (pattern #33)
#35 := (f5 #28 #32)
#95 := (= #33 #35)
#98 := (= #30 #33)
#82 := (= #29 #32)
#105 := (ite #82 #98 #95)
#600 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) (:pat #599) #105)
#112 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #105)
#603 := (iff #112 #600)
#601 := (iff #105 #105)
#602 := [refl]: #601
#604 := [quant-intro #602]: #603
#86 := (ite #82 #30 #35)
#89 := (= #33 #86)
#92 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #89)
#113 := (iff #92 #112)
#106 := (iff #89 #105)
#111 := [rewrite]: #106
#114 := [quant-intro #111]: #113
#103 := (~ #92 #92)
#102 := (~ #89 #89)
#99 := [refl]: #102
#104 := [nnf-pos #99]: #103
#34 := (= #32 #29)
#36 := (ite #34 #30 #35)
#37 := (= #33 #36)
#38 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #37)
#93 := (iff #38 #92)
#90 := (iff #37 #89)
#87 := (= #36 #86)
#84 := (iff #34 #82)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#91 := [monotonicity #88]: #90
#94 := [quant-intro #91]: #93
#81 := [asserted]: #38
#97 := [mp #81 #94]: #92
#100 := [mp~ #97 #104]: #92
#115 := [mp #100 #114]: #112
#605 := [mp #115 #604]: #600
#579 := (not #600)
#251 := (or #579 #585)
#263 := (= f4 f3)
#267 := (ite #263 #265 #264)
#252 := (or #579 #267)
#587 := (iff #252 #251)
#589 := (iff #251 #251)
#584 := [rewrite]: #589
#240 := (iff #267 #585)
#246 := (iff #263 #10)
#583 := [rewrite]: #246
#372 := [monotonicity #583]: #240
#588 := [monotonicity #372]: #587
#590 := [trans #588 #584]: #587
#586 := [quant-inst]: #252
#580 := [mp #586 #590]: #251
#568 := [unit-resolution #580 #605]: #585
#238 := (not #585)
#569 := (or #238 #264)
#11 := (not #10)
#62 := (or #10 #56)
#67 := (not #62)
#18 := (= #17 f8)
#19 := (implies #11 #18)
#20 := (not #19)
#68 := (iff #20 #67)
#65 := (iff #19 #62)
#59 := (implies #11 #56)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #19 #59)
#57 := (iff #18 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#55 := [asserted]: #20
#72 := [mp #55 #69]: #67
#70 := [not-or-elim #72]: #11
#239 := (or #238 #10 #264)
#582 := [def-axiom]: #239
#570 := [unit-resolution #582 #70]: #569
#571 := [unit-resolution #570 #568]: #264
#578 := [mp #571 #575]: #56
#71 := (not #56)
#73 := [not-or-elim #72]: #71
[unit-resolution #73 #578]: false
unsat
de0be68d62a4eef58cc08ca9b43494f9219ad474 111 0
#2 := false
decl f9 :: (-> S2 S3)
decl f7 :: S2
#13 := f7
#18 := (f9 f7)
decl f8 :: (-> S2 S3)
decl f3 :: S2
#8 := f3
#17 := (f8 f3)
#19 := (= #17 #18)
decl f4 :: (-> S3 S3 S2)
decl f5 :: S3
#9 := f5
decl f6 :: S3
#10 := f6
#14 := (f4 f6 f5)
#258 := (f9 #14)
#220 := (= #258 #18)
#230 := (= #18 #258)
#15 := (= f7 #14)
#11 := (f4 f5 f6)
#12 := (= f3 #11)
#16 := (and #12 #15)
#54 := (not #16)
#55 := (or #54 #19)
#58 := (not #55)
#20 := (implies #16 #19)
#21 := (not #20)
#59 := (iff #21 #58)
#56 := (iff #20 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#53 := [asserted]: #21
#63 := [mp #53 #60]: #58
#61 := [not-or-elim #63]: #16
#64 := [and-elim #61]: #15
#573 := [monotonicity #64]: #230
#221 := [symm #573]: #220
#561 := (= #17 #258)
#237 := (= f5 #258)
#23 := (:var 0 S3)
#22 := (:var 1 S3)
#24 := (f4 #22 #23)
#582 := (pattern #24)
#28 := (f9 #24)
#75 := (= #23 #28)
#589 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #582) #75)
#79 := (forall (vars (?v0 S3) (?v1 S3)) #75)
#592 := (iff #79 #589)
#590 := (iff #75 #75)
#591 := [refl]: #590
#593 := [quant-intro #591]: #592
#100 := (~ #79 #79)
#99 := (~ #75 #75)
#96 := [refl]: #99
#101 := [nnf-pos #96]: #100
#29 := (= #28 #23)
#30 := (forall (vars (?v0 S3) (?v1 S3)) #29)
#80 := (iff #30 #79)
#77 := (iff #29 #75)
#78 := [rewrite]: #77
#81 := [quant-intro #78]: #80
#74 := [asserted]: #30
#84 := [mp #74 #81]: #79
#97 := [mp~ #84 #101]: #79
#594 := [mp #97 #593]: #589
#184 := (not #589)
#570 := (or #184 #237)
#242 := [quant-inst]: #570
#581 := [unit-resolution #242 #594]: #237
#559 := (= #17 f5)
#164 := (f8 #11)
#218 := (= #164 f5)
#251 := (= f5 #164)
#25 := (f8 #24)
#68 := (= #22 #25)
#583 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #582) #68)
#71 := (forall (vars (?v0 S3) (?v1 S3)) #68)
#586 := (iff #71 #583)
#584 := (iff #68 #68)
#585 := [refl]: #584
#587 := [quant-intro #585]: #586
#108 := (~ #71 #71)
#106 := (~ #68 #68)
#107 := [refl]: #106
#109 := [nnf-pos #107]: #108
#26 := (= #25 #22)
#27 := (forall (vars (?v0 S3) (?v1 S3)) #26)
#72 := (iff #27 #71)
#69 := (iff #26 #68)
#70 := [rewrite]: #69
#73 := [quant-intro #70]: #72
#67 := [asserted]: #27
#76 := [mp #67 #73]: #71
#98 := [mp~ #76 #109]: #71
#588 := [mp #98 #587]: #583
#166 := (not #583)
#253 := (or #166 #251)
#244 := [quant-inst]: #253
#575 := [unit-resolution #244 #588]: #251
#219 := [symm #575]: #218
#234 := (= #17 #164)
#62 := [and-elim #61]: #12
#572 := [monotonicity #62]: #234
#560 := [trans #572 #219]: #559
#562 := [trans #560 #581]: #561
#563 := [trans #562 #221]: #19
#65 := (not #19)
#66 := [not-or-elim #63]: #65
[unit-resolution #66 #563]: false
unsat
c3052f64b6a04dd1c8c5afaf04fa56dc411bc19c 72 0
#2 := false
decl f6 :: (-> S3 S2 S4 S3)
#23 := (:var 0 S4)
#22 := (:var 1 S2)
#21 := (:var 2 S3)
#24 := (f6 #21 #22 #23)
#591 := (pattern #24)
decl f5 :: (-> S3 S2 S4)
#25 := (f5 #24 #22)
#75 := (= #23 #25)
#593 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) (:pat #591) #75)
#78 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #75)
#592 := (iff #78 #593)
#595 := (iff #593 #593)
#596 := [rewrite]: #595
#594 := [rewrite]: #592
#597 := [trans #594 #596]: #592
#109 := (~ #78 #78)
#107 := (~ #75 #75)
#108 := [refl]: #107
#110 := [nnf-pos #108]: #109
#26 := (= #25 #23)
#27 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #26)
#79 := (iff #27 #78)
#76 := (iff #26 #75)
#77 := [rewrite]: #76
#80 := [quant-intro #77]: #79
#74 := [asserted]: #27
#83 := [mp #74 #80]: #78
#101 := [mp~ #83 #110]: #78
#598 := [mp #101 #597]: #593
decl f4 :: S2
#9 := f4
decl f9 :: S4
#15 := f9
decl f8 :: S4
#13 := f8
decl f3 :: S2
#8 := f3
decl f7 :: S3
#12 := f7
#14 := (f6 f7 f3 f8)
#16 := (f6 #14 f4 f9)
#17 := (f5 #16 f4)
#56 := (= f9 #17)
#71 := (not #56)
#10 := (= f3 f4)
#62 := (or #10 #56)
#67 := (not #62)
#18 := (= #17 f9)
#11 := (not #10)
#19 := (implies #11 #18)
#20 := (not #19)
#68 := (iff #20 #67)
#65 := (iff #19 #62)
#59 := (implies #11 #56)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #19 #59)
#57 := (iff #18 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#55 := [asserted]: #20
#72 := [mp #55 #69]: #67
#73 := [not-or-elim #72]: #71
#175 := (not #593)
#264 := (or #175 #56)
#265 := [quant-inst]: #264
[unit-resolution #265 #73 #598]: false
unsat
2dd7e2139c57ac13e3558d5a7c2ee7d6b5a8a254 81 0
#2 := false
decl f5 :: (-> S3 S2 S4)
decl f3 :: S2
#8 := f3
decl f6 :: (-> S3 S2 S4 S3)
decl f9 :: S4
#14 := f9
decl f4 :: S2
#9 := f4
decl f8 :: S4
#12 := f8
decl f7 :: S3
#11 := f7
#13 := (f6 f7 f3 f8)
#15 := (f6 #13 f4 f9)
#16 := (f5 #15 f3)
#55 := (= f9 #16)
#261 := (f5 #15 f4)
#228 := (= #261 #16)
#566 := (= #16 #261)
#10 := (= f3 f4)
#61 := (not #10)
#62 := (or #61 #55)
#67 := (not #62)
#17 := (= #16 f9)
#18 := (implies #10 #17)
#19 := (not #18)
#68 := (iff #19 #67)
#65 := (iff #18 #62)
#58 := (implies #10 #55)
#63 := (iff #58 #62)
#64 := [rewrite]: #63
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#66 := [trans #60 #64]: #65
#69 := [monotonicity #66]: #68
#54 := [asserted]: #19
#72 := [mp #54 #69]: #67
#70 := [not-or-elim #72]: #10
#227 := [monotonicity #70]: #566
#229 := [symm #227]: #228
#175 := (= f9 #261)
#22 := (:var 0 S4)
#21 := (:var 1 S2)
#20 := (:var 2 S3)
#23 := (f6 #20 #21 #22)
#591 := (pattern #23)
#24 := (f5 #23 #21)
#75 := (= #22 #24)
#593 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) (:pat #591) #75)
#78 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #75)
#592 := (iff #78 #593)
#595 := (iff #593 #593)
#596 := [rewrite]: #595
#594 := [rewrite]: #592
#597 := [trans #594 #596]: #592
#109 := (~ #78 #78)
#107 := (~ #75 #75)
#108 := [refl]: #107
#110 := [nnf-pos #108]: #109
#25 := (= #24 #22)
#26 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #25)
#79 := (iff #26 #78)
#76 := (iff #25 #75)
#77 := [rewrite]: #76
#80 := [quant-intro #77]: #79
#74 := [asserted]: #26
#83 := [mp #74 #80]: #78
#101 := [mp~ #83 #110]: #78
#598 := [mp #101 #597]: #593
#262 := (not #593)
#266 := (or #262 #175)
#263 := [quant-inst]: #266
#223 := [unit-resolution #263 #598]: #175
#230 := [trans #223 #229]: #55
#71 := (not #55)
#73 := [not-or-elim #72]: #71
[unit-resolution #73 #230]: false
unsat
c992b1f07c8690f317843ec597ee745825b8d2b2 117 0
#2 := false
decl f6 :: (-> S3 S3 S2)
decl f3 :: (-> S2 S3)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
decl f5 :: (-> S2 S3)
#10 := (f5 f4)
#12 := (f6 #10 #9)
#13 := (= f4 #12)
#349 := (f6 #9 #10)
#550 := (= #349 #12)
#549 := (= #12 #349)
#11 := (= #9 #10)
#243 := (f3 #12)
#543 := (= #243 #10)
#240 := (= #10 #243)
#17 := (:var 0 S3)
#16 := (:var 1 S3)
#18 := (f6 #16 #17)
#568 := (pattern #18)
#19 := (f3 #18)
#53 := (= #16 #19)
#569 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #568) #53)
#57 := (forall (vars (?v0 S3) (?v1 S3)) #53)
#572 := (iff #57 #569)
#570 := (iff #53 #53)
#571 := [refl]: #570
#573 := [quant-intro #571]: #572
#90 := (~ #57 #57)
#88 := (~ #53 #53)
#89 := [refl]: #88
#91 := [nnf-pos #89]: #90
#20 := (= #19 #16)
#21 := (forall (vars (?v0 S3) (?v1 S3)) #20)
#58 := (iff #21 #57)
#55 := (iff #20 #53)
#56 := [rewrite]: #55
#59 := [quant-intro #56]: #58
#52 := [asserted]: #21
#62 := [mp #52 #59]: #57
#80 := [mp~ #62 #91]: #57
#574 := [mp #80 #573]: #569
#560 := (not #569)
#562 := (or #560 #240)
#217 := [quant-inst]: #562
#220 := [unit-resolution #217 #574]: #240
#204 := [symm #220]: #543
#559 := (= #9 #243)
#558 := (= #243 #9)
#557 := (= #12 f4)
#48 := (not #11)
#564 := [hypothesis]: #48
#238 := (or #13 #11)
#49 := (iff #13 #48)
#14 := (iff #11 #13)
#15 := (not #14)
#50 := (iff #15 #49)
#51 := [rewrite]: #50
#47 := [asserted]: #15
#54 := [mp #47 #51]: #49
#150 := (not #49)
#237 := (or #13 #11 #150)
#151 := [def-axiom]: #237
#152 := [unit-resolution #151 #54]: #238
#565 := [unit-resolution #152 #564]: #13
#215 := [symm #565]: #557
#216 := [monotonicity #215]: #558
#200 := [symm #216]: #559
#205 := [trans #200 #204]: #11
#206 := [unit-resolution #564 #205]: false
#207 := [lemma #206]: #11
#546 := (= #10 #9)
#547 := [symm #207]: #546
#544 := [monotonicity #547 #207]: #549
#186 := [symm #544]: #550
#556 := (= f4 #349)
#25 := (:var 0 S2)
#27 := (f5 #25)
#582 := (pattern #27)
#26 := (f3 #25)
#581 := (pattern #26)
#28 := (f6 #26 #27)
#69 := (= #25 #28)
#583 := (forall (vars (?v0 S2)) (:pat #581 #582) #69)
#73 := (forall (vars (?v0 S2)) #69)
#586 := (iff #73 #583)
#584 := (iff #69 #69)
#585 := [refl]: #584
#587 := [quant-intro #585]: #586
#84 := (~ #73 #73)
#92 := (~ #69 #69)
#93 := [refl]: #92
#85 := [nnf-pos #93]: #84
#29 := (= #28 #25)
#30 := (forall (vars (?v0 S2)) #29)
#74 := (iff #30 #73)
#71 := (iff #29 #69)
#72 := [rewrite]: #71
#75 := [quant-intro #72]: #74
#68 := [asserted]: #30
#78 := [mp #68 #75]: #73
#94 := [mp~ #78 #85]: #73
#588 := [mp #94 #587]: #583
#566 := (not #583)
#561 := (or #566 #556)
#567 := [quant-inst]: #561
#548 := [unit-resolution #567 #588]: #556
#551 := [trans #548 #186]: #13
#239 := (not #13)
#242 := (or #239 #48)
#230 := (or #239 #48 #150)
#241 := [def-axiom]: #230
#170 := [unit-resolution #241 #54]: #242
#545 := [unit-resolution #170 #207]: #239
[unit-resolution #545 #551]: false
unsat
d43a3750252b86094159a0508ea79def7392e6da 187 0
#2 := false
decl f6 :: (-> S3 S2 S4)
decl f5 :: S2
#10 := f5
decl f8 :: S3
#12 := f8
#18 := (f6 f8 f5)
decl f7 :: (-> S3 S2 S4 S3)
decl f10 :: S4
#15 := f10
decl f4 :: S2
#9 := f4
decl f9 :: S4
#13 := f9
decl f3 :: S2
#8 := f3
#14 := (f7 f8 f3 f9)
#16 := (f7 #14 f4 f10)
#17 := (f6 #16 f5)
#19 := (= #17 #18)
#246 := (f6 #14 f3)
#560 := (f7 f8 f3 #246)
#536 := (f6 #560 f5)
#365 := (= #536 #18)
#521 := (= #18 #536)
#367 := (= #246 #536)
#168 := (= f3 f5)
#525 := (ite #168 #367 #521)
#33 := (:var 0 S2)
#31 := (:var 1 S4)
#30 := (:var 2 S2)
#29 := (:var 3 S3)
#32 := (f7 #29 #30 #31)
#34 := (f6 #32 #33)
#593 := (pattern #34)
#36 := (f6 #29 #33)
#89 := (= #34 #36)
#92 := (= #31 #34)
#76 := (= #30 #33)
#99 := (ite #76 #92 #89)
#594 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) (:pat #593) #99)
#106 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #99)
#597 := (iff #106 #594)
#595 := (iff #99 #99)
#596 := [refl]: #595
#598 := [quant-intro #596]: #597
#80 := (ite #76 #31 #36)
#83 := (= #34 #80)
#86 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #83)
#107 := (iff #86 #106)
#100 := (iff #83 #99)
#105 := [rewrite]: #100
#108 := [quant-intro #105]: #107
#97 := (~ #86 #86)
#96 := (~ #83 #83)
#93 := [refl]: #96
#98 := [nnf-pos #93]: #97
#35 := (= #33 #30)
#37 := (ite #35 #31 #36)
#38 := (= #34 #37)
#39 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4) (?v3 S2)) #38)
#87 := (iff #39 #86)
#84 := (iff #38 #83)
#81 := (= #37 #80)
#78 := (iff #35 #76)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#85 := [monotonicity #82]: #84
#88 := [quant-intro #85]: #87
#75 := [asserted]: #39
#91 := [mp #75 #88]: #86
#94 := [mp~ #91 #98]: #86
#109 := [mp #94 #108]: #106
#599 := [mp #109 #598]: #594
#221 := (not #594)
#408 := (or #221 #525)
#368 := (ite #168 #367 #365)
#409 := (or #221 #368)
#369 := (iff #409 #408)
#419 := (iff #408 #408)
#514 := [rewrite]: #419
#523 := (iff #368 #525)
#522 := (iff #365 #521)
#524 := [rewrite]: #522
#526 := [monotonicity #524]: #523
#517 := [monotonicity #526]: #369
#515 := [trans #517 #514]: #369
#410 := [quant-inst]: #409
#518 := [mp #410 #515]: #408
#498 := [unit-resolution #518 #599]: #525
#403 := (not #525)
#511 := (or #403 #521)
#255 := (not #168)
#169 := (= f4 f5)
#256 := (not #169)
#167 := (= f3 f4)
#254 := (not #167)
#247 := (and #254 #255 #256)
#11 := (distinct f3 f4 f5)
#57 := (not #11)
#58 := (or #57 #19)
#61 := (not #58)
#20 := (implies #11 #19)
#21 := (not #20)
#62 := (iff #21 #61)
#59 := (iff #20 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#56 := [asserted]: #21
#66 := [mp #56 #63]: #61
#64 := [not-or-elim #66]: #11
#234 := (or #57 #247)
#366 := [def-axiom]: #234
#500 := [unit-resolution #366 #64]: #247
#258 := (not #247)
#260 := (or #258 #255)
#257 := [def-axiom]: #260
#510 := [unit-resolution #257 #500]: #255
#421 := (or #403 #168 #521)
#414 := [def-axiom]: #421
#512 := [unit-resolution #414 #510]: #511
#508 := [unit-resolution #512 #498]: #521
#493 := [symm #508]: #365
#494 := (= #17 #536)
#574 := (f6 #14 f5)
#490 := (= #574 #536)
#499 := (= #536 #574)
#509 := (= #560 #14)
#520 := (= #246 f9)
#580 := (= f9 #246)
#24 := (:var 0 S4)
#23 := (:var 1 S2)
#22 := (:var 2 S3)
#25 := (f7 #22 #23 #24)
#585 := (pattern #25)
#26 := (f6 #25 #23)
#69 := (= #24 #26)
#587 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) (:pat #585) #69)
#72 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #69)
#586 := (iff #72 #587)
#589 := (iff #587 #587)
#590 := [rewrite]: #589
#588 := [rewrite]: #586
#591 := [trans #588 #590]: #586
#103 := (~ #72 #72)
#101 := (~ #69 #69)
#102 := [refl]: #101
#104 := [nnf-pos #102]: #103
#27 := (= #26 #24)
#28 := (forall (vars (?v0 S3) (?v1 S2) (?v2 S4)) #27)
#73 := (iff #28 #72)
#70 := (iff #27 #69)
#71 := [rewrite]: #70
#74 := [quant-intro #71]: #73
#68 := [asserted]: #28
#77 := [mp #68 #74]: #72
#95 := [mp~ #77 #104]: #72
#592 := [mp #95 #591]: #587
#583 := (not #587)
#578 := (or #583 #580)
#584 := [quant-inst]: #578
#516 := [unit-resolution #584 #592]: #580
#507 := [symm #516]: #520
#501 := [monotonicity #507]: #509
#506 := [monotonicity #501]: #499
#491 := [symm #506]: #490
#232 := (= #17 #574)
#233 := (= f10 #17)
#576 := (ite #169 #233 #232)
#222 := (or #221 #576)
#223 := [quant-inst]: #222
#513 := [unit-resolution #223 #599]: #576
#224 := (not #576)
#503 := (or #224 #232)
#261 := (or #258 #256)
#240 := [def-axiom]: #261
#502 := [unit-resolution #240 #500]: #256
#564 := (or #224 #169 #232)
#565 := [def-axiom]: #564
#504 := [unit-resolution #565 #502]: #503
#505 := [unit-resolution #504 #513]: #232
#495 := [trans #505 #491]: #494
#496 := [trans #495 #493]: #19
#65 := (not #19)
#67 := [not-or-elim #66]: #65
[unit-resolution #67 #496]: false
unsat
d9c2fc1edc378ccb88037e9ae16a84f1542acb6f 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (iff #10 #10)
#12 := (not #11)
#78 := (iff #12 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #12 #73)
#71 := (iff #11 true)
#63 := (= f1 #9)
#66 := (iff #63 #63)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #11 #66)
#64 := (iff #10 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#62 := [asserted]: #12
[mp #62 #79]: false
unsat
3df517f77a8847ec580730167b0937b5bdc9f32c 58 0
#2 := false
decl f3 :: (-> S2 S1)
#13 := (:var 0 S2)
#14 := (f3 #13)
#661 := (pattern #14)
decl f1 :: S1
#4 := f1
#77 := (= f1 #14)
#81 := (not #77)
#662 := (forall (vars (?v0 S2)) (:pat #661) #81)
#84 := (forall (vars (?v0 S2)) #81)
#665 := (iff #84 #662)
#663 := (iff #81 #81)
#664 := [refl]: #663
#666 := [quant-intro #664]: #665
#151 := (~ #84 #84)
#149 := (~ #81 #81)
#150 := [refl]: #149
#152 := [nnf-pos #150]: #151
#15 := (= #14 f1)
#16 := (not #15)
#17 := (forall (vars (?v0 S2)) #16)
#85 := (iff #17 #84)
#82 := (iff #16 #81)
#79 := (iff #15 #77)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#86 := [quant-intro #83]: #85
#76 := [asserted]: #17
#89 := [mp #76 #86]: #84
#139 := [mp~ #89 #152]: #84
#667 := [mp #139 #666]: #662
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#63 := (= f1 #9)
#10 := (= #9 f1)
#11 := (not #10)
#12 := (not #11)
#74 := (iff #12 #63)
#66 := (not #63)
#69 := (not #66)
#72 := (iff #69 #63)
#73 := [rewrite]: #72
#70 := (iff #12 #69)
#67 := (iff #11 #66)
#64 := (iff #10 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#62 := [asserted]: #12
#78 := [mp #62 #75]: #63
#246 := (not #662)
#333 := (or #246 #66)
#247 := [quant-inst]: #333
[unit-resolution #247 #78 #667]: false
unsat
1b877eab526e97351cb862fc0b9910541c0a7e4b 46 0
#2 := false
decl f3 :: (-> S2 S1)
#17 := (:var 0 S2)
#18 := (f3 #17)
#660 := (pattern #18)
decl f1 :: S1
#4 := f1
#80 := (= f1 #18)
#661 := (forall (vars (?v0 S2)) (:pat #660) #80)
#84 := (forall (vars (?v0 S2)) #80)
#664 := (iff #84 #661)
#662 := (iff #80 #80)
#663 := [refl]: #662
#665 := [quant-intro #663]: #664
#133 := (~ #84 #84)
#132 := (~ #80 #80)
#130 := [refl]: #132
#134 := [nnf-pos #130]: #133
#19 := (= #18 f1)
#20 := (forall (vars (?v0 S2)) #19)
#85 := (iff #20 #84)
#82 := (iff #19 #80)
#83 := [rewrite]: #82
#86 := [quant-intro #83]: #85
#79 := [asserted]: #20
#89 := [mp #79 #86]: #84
#127 := [mp~ #89 #134]: #84
#666 := [mp #127 #665]: #661
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#62 := (= f1 #9)
#65 := (not #62)
#10 := (= #9 f1)
#11 := (not #10)
#66 := (iff #11 #65)
#63 := (iff #10 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#61 := [asserted]: #11
#70 := [mp #61 #67]: #65
#238 := (not #661)
#325 := (or #238 #62)
#239 := [quant-inst]: #325
[unit-resolution #239 #70 #666]: false
unsat
9cf9419534c29ea2783ed62db9d7dac14034c845 119 0
#2 := false
decl f3 :: (-> S2 S2 S3 S1)
decl f6 :: S3
#10 := f6
decl f5 :: S2
#9 := f5
decl f4 :: S2
#8 := f4
#11 := (f3 f4 f5 f6)
decl f1 :: S1
#4 := f1
#70 := (= f1 #11)
#88 := (not #70)
#667 := [hypothesis]: #88
decl f7 :: (-> S2 S3 S1)
#15 := (f7 f5 f6)
#76 := (= f1 #15)
#13 := (f7 f4 f6)
#73 := (= f1 #13)
#79 := (or #73 #76)
#357 := (or #79 #70)
#89 := (iff #79 #88)
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (or #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (not #18)
#92 := (iff #19 #89)
#82 := (iff #70 #79)
#85 := (not #82)
#90 := (iff #85 #89)
#91 := [rewrite]: #90
#86 := (iff #19 #85)
#83 := (iff #18 #82)
#80 := (iff #17 #79)
#77 := (iff #16 #76)
#78 := [rewrite]: #77
#74 := (iff #14 #73)
#75 := [rewrite]: #74
#81 := [monotonicity #75 #78]: #80
#71 := (iff #12 #70)
#72 := [rewrite]: #71
#84 := [monotonicity #72 #81]: #83
#87 := [monotonicity #84]: #86
#93 := [trans #87 #91]: #92
#69 := [asserted]: #19
#96 := [mp #69 #93]: #89
#283 := (not #89)
#356 := (or #79 #70 #283)
#353 := [def-axiom]: #356
#336 := [unit-resolution #353 #96]: #357
#341 := [unit-resolution #336 #667]: #79
#343 := (not #79)
#670 := (or #70 #343)
#31 := (:var 0 S3)
#30 := (:var 1 S2)
#29 := (:var 2 S2)
#32 := (f3 #29 #30 #31)
#693 := (pattern #32)
#36 := (f7 #30 #31)
#121 := (= f1 #36)
#34 := (f7 #29 #31)
#118 := (= f1 #34)
#124 := (or #118 #121)
#114 := (= f1 #32)
#127 := (iff #114 #124)
#694 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #693) #127)
#130 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #127)
#697 := (iff #130 #694)
#695 := (iff #127 #127)
#696 := [refl]: #695
#698 := [quant-intro #696]: #697
#161 := (~ #130 #130)
#171 := (~ #127 #127)
#172 := [refl]: #171
#162 := [nnf-pos #172]: #161
#37 := (= #36 f1)
#35 := (= #34 f1)
#38 := (or #35 #37)
#33 := (= #32 f1)
#39 := (iff #33 #38)
#40 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #39)
#131 := (iff #40 #130)
#128 := (iff #39 #127)
#125 := (iff #38 #124)
#122 := (iff #37 #121)
#123 := [rewrite]: #122
#119 := (iff #35 #118)
#120 := [rewrite]: #119
#126 := [monotonicity #120 #123]: #125
#116 := (iff #33 #114)
#117 := [rewrite]: #116
#129 := [monotonicity #117 #126]: #128
#132 := [quant-intro #129]: #131
#113 := [asserted]: #40
#135 := [mp #113 #132]: #130
#173 := [mp~ #135 #162]: #130
#699 := [mp #173 #698]: #694
#342 := (not #694)
#674 := (or #342 #82)
#675 := [quant-inst]: #674
#329 := [unit-resolution #675 #699]: #82
#676 := (or #85 #70 #343)
#677 := [def-axiom]: #676
#313 := [unit-resolution #677 #329]: #670
#654 := [unit-resolution #313 #341 #667]: false
#317 := [lemma #654]: #70
#330 := (or #343 #88)
#671 := (or #343 #88 #283)
#673 := [def-axiom]: #671
#460 := [unit-resolution #673 #96]: #330
#318 := [unit-resolution #460 #317]: #343
#319 := (or #88 #79)
#672 := (or #85 #88 #79)
#678 := [def-axiom]: #672
#320 := [unit-resolution #678 #329]: #319
[unit-resolution #320 #318 #317]: false
unsat
db4d005483a981015636afecf4abdbe3eecdc540 154 0
#2 := false
decl f7 :: (-> S2 S3 S1)
decl f6 :: S3
#10 := f6
decl f5 :: S2
#9 := f5
#346 := (f7 f5 f6)
decl f1 :: S1
#4 := f1
#343 := (= f1 #346)
decl f4 :: S2
#8 := f4
#13 := (f7 f4 f6)
#69 := (= f1 #13)
#347 := (or #69 #343)
decl f3 :: (-> S2 S2 S3 S1)
#11 := (f3 f4 f5 f6)
#66 := (= f1 #11)
#78 := (not #66)
#661 := [hypothesis]: #78
#341 := (or #69 #66)
#79 := (iff #69 #78)
#14 := (= #13 f1)
#12 := (= #11 f1)
#15 := (iff #12 #14)
#16 := (not #15)
#82 := (iff #16 #79)
#72 := (iff #66 #69)
#75 := (not #72)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #16 #75)
#73 := (iff #15 #72)
#70 := (iff #14 #69)
#71 := [rewrite]: #70
#67 := (iff #12 #66)
#68 := [rewrite]: #67
#74 := [monotonicity #68 #71]: #73
#77 := [monotonicity #74]: #76
#83 := [trans #77 #81]: #82
#65 := [asserted]: #16
#86 := [mp #65 #83]: #79
#253 := (not #79)
#340 := (or #69 #66 #253)
#254 := [def-axiom]: #340
#255 := [unit-resolution #254 #86]: #341
#663 := [unit-resolution #255 #661]: #69
#667 := (not #347)
#309 := (or #66 #667)
#326 := (iff #66 #347)
#17 := (:var 0 S3)
#27 := (:var 1 S2)
#26 := (:var 2 S2)
#28 := (f3 #26 #27 #17)
#683 := (pattern #28)
#32 := (f7 #27 #17)
#111 := (= f1 #32)
#30 := (f7 #26 #17)
#108 := (= f1 #30)
#114 := (or #108 #111)
#104 := (= f1 #28)
#117 := (iff #104 #114)
#684 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #683) #117)
#120 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #117)
#687 := (iff #120 #684)
#685 := (iff #117 #117)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#151 := (~ #120 #120)
#161 := (~ #117 #117)
#162 := [refl]: #161
#152 := [nnf-pos #162]: #151
#33 := (= #32 f1)
#31 := (= #30 f1)
#34 := (or #31 #33)
#29 := (= #28 f1)
#35 := (iff #29 #34)
#36 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #35)
#121 := (iff #36 #120)
#118 := (iff #35 #117)
#115 := (iff #34 #114)
#112 := (iff #33 #111)
#113 := [rewrite]: #112
#109 := (iff #31 #108)
#110 := [rewrite]: #109
#116 := [monotonicity #110 #113]: #115
#106 := (iff #29 #104)
#107 := [rewrite]: #106
#119 := [monotonicity #107 #116]: #118
#122 := [quant-intro #119]: #121
#103 := [asserted]: #36
#125 := [mp #103 #122]: #120
#163 := [mp~ #125 #152]: #120
#689 := [mp #163 #688]: #684
#320 := (not #684)
#450 := (or #320 #326)
#657 := [quant-inst]: #450
#308 := [unit-resolution #657 #689]: #326
#658 := (not #326)
#318 := (or #658 #66 #667)
#323 := [def-axiom]: #318
#310 := [unit-resolution #323 #308]: #309
#646 := [unit-resolution #310 #661]: #667
#342 := (not #69)
#331 := (or #347 #342)
#332 := [def-axiom]: #331
#647 := [unit-resolution #332 #646 #663]: false
#648 := [lemma #647]: #66
#649 := (or #78 #347)
#659 := (or #658 #78 #347)
#319 := [def-axiom]: #659
#650 := [unit-resolution #319 #308]: #649
#652 := [unit-resolution #650 #648]: #347
#345 := (or #342 #78)
#333 := (or #342 #78 #253)
#344 := [def-axiom]: #333
#273 := [unit-resolution #344 #86]: #345
#654 := [unit-resolution #273 #648]: #342
#662 := (or #667 #69 #343)
#668 := [def-axiom]: #662
#294 := [unit-resolution #668 #654 #652]: #343
#18 := (f7 f5 #17)
#669 := (pattern #18)
#85 := (= f1 #18)
#89 := (not #85)
#670 := (forall (vars (?v0 S3)) (:pat #669) #89)
#92 := (forall (vars (?v0 S3)) #89)
#673 := (iff #92 #670)
#671 := (iff #89 #89)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#159 := (~ #92 #92)
#157 := (~ #89 #89)
#158 := [refl]: #157
#160 := [nnf-pos #158]: #159
#19 := (= #18 f1)
#20 := (not #19)
#21 := (forall (vars (?v0 S3)) #20)
#93 := (iff #21 #92)
#90 := (iff #20 #89)
#87 := (iff #19 #85)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#94 := [quant-intro #91]: #93
#84 := [asserted]: #21
#97 := [mp #84 #94]: #92
#147 := [mp~ #97 #160]: #92
#675 := [mp #147 #674]: #670
#664 := (not #343)
#645 := (not #670)
#651 := (or #645 #664)
#289 := [quant-inst]: #651
[unit-resolution #289 #675 #294]: false
unsat
01e84163a16924ffd8e379badcb76f97c88eb8e1 128 0
#2 := false
decl f8 :: (-> S2 S3 S1)
decl f6 :: S3
#10 := f6
decl f5 :: S2
#9 := f5
#238 := (f8 f5 f6)
decl f1 :: S1
#4 := f1
#325 := (= f1 #238)
#650 := (not #325)
decl f4 :: S2
#8 := f4
#239 := (f8 f4 f6)
#326 := (= f1 #239)
#318 := (or #325 #326)
#303 := (not #318)
decl f3 :: (-> S2 S2 S3 S1)
#11 := (f3 f4 f5 f6)
#63 := (= f1 #11)
#258 := (iff #63 #318)
#19 := (:var 0 S3)
#24 := (:var 1 S2)
#23 := (:var 2 S2)
#25 := (f3 #23 #24 #19)
#668 := (pattern #25)
#29 := (f8 #24 #19)
#96 := (= f1 #29)
#27 := (f8 #23 #19)
#93 := (= f1 #27)
#99 := (or #93 #96)
#89 := (= f1 #25)
#102 := (iff #89 #99)
#669 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #668) #102)
#105 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #102)
#672 := (iff #105 #669)
#670 := (iff #102 #102)
#671 := [refl]: #670
#673 := [quant-intro #671]: #672
#136 := (~ #105 #105)
#146 := (~ #102 #102)
#147 := [refl]: #146
#137 := [nnf-pos #147]: #136
#30 := (= #29 f1)
#28 := (= #27 f1)
#31 := (or #28 #30)
#26 := (= #25 f1)
#32 := (iff #26 #31)
#33 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #32)
#106 := (iff #33 #105)
#103 := (iff #32 #102)
#100 := (iff #31 #99)
#97 := (iff #30 #96)
#98 := [rewrite]: #97
#94 := (iff #28 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #26 #89)
#92 := [rewrite]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [quant-intro #104]: #106
#88 := [asserted]: #33
#110 := [mp #88 #107]: #105
#148 := [mp~ #110 #137]: #105
#674 := [mp #148 #673]: #669
#332 := (not #669)
#311 := (or #332 #258)
#240 := (or #326 #325)
#327 := (iff #63 #240)
#646 := (or #332 #327)
#305 := (iff #646 #311)
#642 := (iff #311 #311)
#316 := [rewrite]: #642
#331 := (iff #327 #258)
#329 := (iff #240 #318)
#330 := [rewrite]: #329
#328 := [monotonicity #330]: #331
#435 := [monotonicity #328]: #305
#317 := [trans #435 #316]: #305
#648 := [quant-inst]: #646
#649 := [mp #648 #317]: #311
#632 := [unit-resolution #649 #674]: #258
#304 := (not #258)
#633 := (or #304 #303)
#66 := (not #63)
#12 := (= #11 f1)
#13 := (not #12)
#67 := (iff #13 #66)
#64 := (iff #12 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#62 := [asserted]: #13
#71 := [mp #62 #68]: #66
#645 := (or #304 #63 #303)
#288 := [def-axiom]: #645
#636 := [unit-resolution #288 #71]: #633
#274 := [unit-resolution #636 #632]: #303
#651 := (or #318 #650)
#652 := [def-axiom]: #651
#637 := [unit-resolution #652 #274]: #650
#20 := (f8 f5 #19)
#661 := (pattern #20)
#81 := (= f1 #20)
#662 := (forall (vars (?v0 S3)) (:pat #661) #81)
#85 := (forall (vars (?v0 S3)) #81)
#665 := (iff #85 #662)
#663 := (iff #81 #81)
#664 := [refl]: #663
#666 := [quant-intro #664]: #665
#134 := (~ #85 #85)
#133 := (~ #81 #81)
#131 := [refl]: #133
#135 := [nnf-pos #131]: #134
#21 := (= #20 f1)
#22 := (forall (vars (?v0 S3)) #21)
#86 := (iff #22 #85)
#83 := (iff #21 #81)
#84 := [rewrite]: #83
#87 := [quant-intro #84]: #86
#80 := [asserted]: #22
#90 := [mp #80 #87]: #85
#128 := [mp~ #90 #135]: #85
#667 := [mp #128 #666]: #662
#634 := (not #662)
#635 := (or #634 #325)
#630 := [quant-inst]: #635
[unit-resolution #630 #667 #637]: false
unsat
db25ac5ac3d60bebb553d3f6b343562b94a56253 146 0
#2 := false
decl f3 :: (-> S2 S2 S3 S1)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#8 := f4
decl f5 :: S2
#9 := f5
#13 := (f3 f5 f4 f6)
decl f1 :: S1
#4 := f1
#70 := (= f1 #13)
#343 := (not #70)
#11 := (f3 f4 f5 f6)
#67 := (= f1 #11)
#79 := (not #67)
#640 := [hypothesis]: #79
#342 := (or #70 #67)
#80 := (iff #70 #79)
#14 := (= #13 f1)
#12 := (= #11 f1)
#15 := (iff #12 #14)
#16 := (not #15)
#83 := (iff #16 #80)
#73 := (iff #67 #70)
#76 := (not #73)
#81 := (iff #76 #80)
#82 := [rewrite]: #81
#77 := (iff #16 #76)
#74 := (iff #15 #73)
#71 := (iff #14 #70)
#72 := [rewrite]: #71
#68 := (iff #12 #67)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#66 := [asserted]: #16
#87 := [mp #66 #84]: #80
#254 := (not #80)
#341 := (or #70 #67 #254)
#255 := [def-axiom]: #341
#256 := [unit-resolution #255 #87]: #342
#362 := [unit-resolution #256 #640]: #70
decl f9 :: (-> S2 S3 S1)
#347 := (f9 f4 f6)
#344 := (= f1 #347)
#348 := (f9 f5 f6)
#327 := (= f1 #348)
#662 := (or #327 #344)
#659 := (not #662)
#637 := (or #67 #659)
#649 := (iff #67 #662)
#28 := (:var 0 S3)
#27 := (:var 1 S2)
#26 := (:var 2 S2)
#29 := (f3 #26 #27 #28)
#684 := (pattern #29)
#33 := (f9 #27 #28)
#112 := (= f1 #33)
#31 := (f9 #26 #28)
#109 := (= f1 #31)
#115 := (or #109 #112)
#105 := (= f1 #29)
#118 := (iff #105 #115)
#685 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #684) #118)
#121 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #118)
#688 := (iff #121 #685)
#686 := (iff #118 #118)
#687 := [refl]: #686
#689 := [quant-intro #687]: #688
#152 := (~ #121 #121)
#162 := (~ #118 #118)
#163 := [refl]: #162
#153 := [nnf-pos #163]: #152
#34 := (= #33 f1)
#32 := (= #31 f1)
#35 := (or #32 #34)
#30 := (= #29 f1)
#36 := (iff #30 #35)
#37 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #36)
#122 := (iff #37 #121)
#119 := (iff #36 #118)
#116 := (iff #35 #115)
#113 := (iff #34 #112)
#114 := [rewrite]: #113
#110 := (iff #32 #109)
#111 := [rewrite]: #110
#117 := [monotonicity #111 #114]: #116
#107 := (iff #30 #105)
#108 := [rewrite]: #107
#120 := [monotonicity #108 #117]: #119
#123 := [quant-intro #120]: #122
#104 := [asserted]: #37
#126 := [mp #104 #123]: #121
#164 := [mp~ #126 #153]: #121
#690 := [mp #164 #689]: #685
#658 := (not #685)
#646 := (or #658 #649)
#321 := (or #344 #327)
#451 := (iff #67 #321)
#652 := (or #658 #451)
#653 := (iff #652 #646)
#295 := (iff #646 #646)
#296 := [rewrite]: #295
#650 := (iff #451 #649)
#647 := (iff #321 #662)
#648 := [rewrite]: #647
#651 := [monotonicity #648]: #650
#655 := [monotonicity #651]: #653
#656 := [trans #655 #296]: #653
#290 := [quant-inst]: #652
#654 := [mp #290 #656]: #646
#363 := [unit-resolution #654 #690]: #649
#657 := (not #649)
#643 := (or #657 #67 #659)
#644 := [def-axiom]: #643
#641 := [unit-resolution #644 #363]: #637
#638 := [unit-resolution #641 #640]: #659
#352 := (or #343 #662)
#664 := (iff #70 #662)
#332 := (or #658 #664)
#333 := [quant-inst]: #332
#642 := [unit-resolution #333 #690]: #664
#660 := (not #664)
#304 := (or #660 #343 #662)
#645 := [def-axiom]: #304
#353 := [unit-resolution #645 #642]: #352
#354 := [unit-resolution #353 #638 #362]: false
#355 := [lemma #354]: #67
#346 := (or #343 #79)
#334 := (or #343 #79 #254)
#345 := [def-axiom]: #334
#274 := [unit-resolution #345 #87]: #346
#633 := [unit-resolution #274 #355]: #343
#634 := (or #79 #662)
#366 := (or #657 #79 #662)
#367 := [def-axiom]: #366
#349 := [unit-resolution #367 #363]: #634
#631 := [unit-resolution #349 #355]: #662
#635 := (or #70 #659)
#320 := (or #660 #70 #659)
#661 := [def-axiom]: #320
#632 := [unit-resolution #661 #642]: #635
[unit-resolution #632 #631 #633]: false
unsat
9033d495190da4d9088c43145881d91ed9687495 121 0
#2 := false
decl f3 :: (-> S2 S2 S3 S1)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f4 f5)
decl f1 :: S1
#4 := f1
#66 := (= f1 #10)
#78 := (not #66)
#644 := [hypothesis]: #78
decl f6 :: (-> S2 S3 S1)
#12 := (f6 f4 f5)
#69 := (= f1 #12)
#341 := (or #69 #66)
#79 := (iff #69 #78)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (iff #11 #13)
#15 := (not #14)
#82 := (iff #15 #79)
#72 := (iff #66 #69)
#75 := (not #72)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #15 #75)
#73 := (iff #14 #72)
#70 := (iff #13 #69)
#71 := [rewrite]: #70
#67 := (iff #11 #66)
#68 := [rewrite]: #67
#74 := [monotonicity #68 #71]: #73
#77 := [monotonicity #74]: #76
#83 := [trans #77 #81]: #82
#65 := [asserted]: #15
#86 := [mp #65 #83]: #79
#253 := (not #79)
#340 := (or #69 #66 #253)
#254 := [def-axiom]: #340
#255 := [unit-resolution #254 #86]: #341
#307 := [unit-resolution #255 #644]: #69
#342 := (not #69)
#309 := (or #66 #342)
#27 := (:var 0 S3)
#26 := (:var 1 S2)
#25 := (:var 2 S2)
#28 := (f3 #25 #26 #27)
#683 := (pattern #28)
#32 := (f6 #26 #27)
#111 := (= f1 #32)
#30 := (f6 #25 #27)
#108 := (= f1 #30)
#114 := (or #108 #111)
#104 := (= f1 #28)
#117 := (iff #104 #114)
#684 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #683) #117)
#120 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #117)
#687 := (iff #120 #684)
#685 := (iff #117 #117)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#151 := (~ #120 #120)
#161 := (~ #117 #117)
#162 := [refl]: #161
#152 := [nnf-pos #162]: #151
#33 := (= #32 f1)
#31 := (= #30 f1)
#34 := (or #31 #33)
#29 := (= #28 f1)
#35 := (iff #29 #34)
#36 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #35)
#121 := (iff #36 #120)
#118 := (iff #35 #117)
#115 := (iff #34 #114)
#112 := (iff #33 #111)
#113 := [rewrite]: #112
#109 := (iff #31 #108)
#110 := [rewrite]: #109
#116 := [monotonicity #110 #113]: #115
#106 := (iff #29 #104)
#107 := [rewrite]: #106
#119 := [monotonicity #107 #116]: #118
#122 := [quant-intro #119]: #121
#103 := [asserted]: #36
#125 := [mp #103 #122]: #120
#163 := [mp~ #125 #152]: #120
#689 := [mp #163 #688]: #684
#320 := (not #684)
#450 := (or #320 #72)
#346 := (or #69 #69)
#343 := (iff #66 #346)
#657 := (or #320 #343)
#332 := (iff #657 #450)
#665 := (iff #450 #450)
#666 := [rewrite]: #665
#661 := (iff #343 #72)
#347 := (iff #346 #69)
#326 := [rewrite]: #347
#663 := [monotonicity #326]: #661
#664 := [monotonicity #663]: #332
#667 := [trans #664 #666]: #332
#331 := [quant-inst]: #657
#662 := [mp #331 #667]: #450
#308 := [unit-resolution #662 #689]: #72
#668 := (or #75 #66 #342)
#658 := [def-axiom]: #668
#310 := [unit-resolution #658 #308]: #309
#646 := [unit-resolution #310 #307 #644]: false
#647 := [lemma #646]: #66
#345 := (or #342 #78)
#333 := (or #342 #78 #253)
#344 := [def-axiom]: #333
#273 := [unit-resolution #344 #86]: #345
#648 := [unit-resolution #273 #647]: #342
#649 := (or #78 #69)
#318 := (or #75 #78 #69)
#323 := [def-axiom]: #318
#650 := [unit-resolution #323 #308]: #649
[unit-resolution #650 #648 #647]: false
unsat
d24feed52b94afbe0c3926c41e67eb725f57798d 258 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f8 :: S3
#13 := f8
decl f6 :: S2
#9 := f6
#624 := (f3 f6 f8)
decl f1 :: S1
#4 := f1
#337 := (= f1 #624)
decl f7 :: S2
#10 := f7
#335 := (f3 f7 f8)
#332 := (= f1 #335)
#622 := (or #332 #337)
decl f4 :: (-> S2 S2 S2)
#11 := (f4 f6 f7)
#309 := (f3 #11 f8)
#441 := (= f1 #309)
#616 := (iff #441 #622)
#582 := (not #616)
#580 := [hypothesis]: #582
#34 := (:var 0 S3)
#32 := (:var 1 S2)
#31 := (:var 2 S2)
#33 := (f4 #31 #32)
#35 := (f3 #33 #34)
#674 := (pattern #35)
#39 := (f3 #32 #34)
#118 := (= f1 #39)
#37 := (f3 #31 #34)
#115 := (= f1 #37)
#121 := (or #115 #118)
#111 := (= f1 #35)
#124 := (iff #111 #121)
#675 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #674) #124)
#127 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #124)
#678 := (iff #127 #675)
#676 := (iff #124 #124)
#677 := [refl]: #676
#679 := [quant-intro #677]: #678
#158 := (~ #127 #127)
#168 := (~ #124 #124)
#169 := [refl]: #168
#159 := [nnf-pos #169]: #158
#40 := (= #39 f1)
#38 := (= #37 f1)
#41 := (or #38 #40)
#36 := (= #35 f1)
#42 := (iff #36 #41)
#43 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #42)
#128 := (iff #43 #127)
#125 := (iff #42 #124)
#122 := (iff #41 #121)
#119 := (iff #40 #118)
#120 := [rewrite]: #119
#116 := (iff #38 #115)
#117 := [rewrite]: #116
#123 := [monotonicity #117 #120]: #122
#113 := (iff #36 #111)
#114 := [rewrite]: #113
#126 := [monotonicity #114 #123]: #125
#129 := [quant-intro #126]: #128
#110 := [asserted]: #43
#132 := [mp #110 #129]: #127
#170 := [mp~ #132 #159]: #127
#680 := [mp #170 #679]: #675
#648 := (not #675)
#598 := (or #648 #616)
#621 := (or #337 #332)
#625 := (iff #441 #621)
#618 := (or #648 #625)
#613 := (iff #618 #598)
#620 := (iff #598 #598)
#461 := [rewrite]: #620
#617 := (iff #625 #616)
#626 := (iff #621 #622)
#615 := [rewrite]: #626
#612 := [monotonicity #615]: #617
#614 := [monotonicity #612]: #613
#462 := [trans #614 #461]: #613
#619 := [quant-inst]: #618
#463 := [mp #619 #462]: #598
#574 := [unit-resolution #463 #680 #580]: false
#581 := [lemma #574]: #616
#594 := (not #622)
#658 := (not #332)
decl f5 :: S2
#8 := f5
#16 := (f4 f5 f6)
#336 := (f3 #16 f8)
#315 := (= f1 #336)
#652 := (or #315 #332)
#649 := (not #652)
#17 := (f4 #16 f7)
#18 := (f3 #17 f8)
#76 := (= f1 #18)
#331 := (not #76)
#12 := (f4 f5 #11)
#14 := (f3 #12 f8)
#73 := (= f1 #14)
#637 := (f3 f5 f8)
#638 := (= f1 #637)
#484 := (or #337 #638)
#592 := (iff #315 #484)
#584 := (not #592)
#577 := [hypothesis]: #584
#590 := (or #648 #592)
#601 := (or #638 #337)
#483 := (iff #315 #601)
#593 := (or #648 #483)
#493 := (iff #593 #590)
#496 := (iff #590 #590)
#489 := [rewrite]: #496
#494 := (iff #483 #592)
#485 := (iff #601 #484)
#444 := [rewrite]: #485
#589 := [monotonicity #444]: #494
#495 := [monotonicity #589]: #493
#497 := [trans #495 #489]: #493
#478 := [quant-inst]: #593
#498 := [mp #478 #497]: #590
#578 := [unit-resolution #498 #680 #577]: false
#579 := [lemma #578]: #592
#85 := (not #73)
#565 := [hypothesis]: #85
#330 := (or #76 #73)
#86 := (iff #76 #85)
#19 := (= #18 f1)
#15 := (= #14 f1)
#20 := (iff #15 #19)
#21 := (not #20)
#89 := (iff #21 #86)
#79 := (iff #73 #76)
#82 := (not #79)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #21 #82)
#80 := (iff #20 #79)
#77 := (iff #19 #76)
#78 := [rewrite]: #77
#74 := (iff #15 #73)
#75 := [rewrite]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#72 := [asserted]: #21
#93 := [mp #72 #90]: #86
#242 := (not #86)
#329 := (or #76 #73 #242)
#243 := [def-axiom]: #329
#244 := [unit-resolution #243 #93]: #330
#566 := [unit-resolution #244 #565]: #76
#569 := (or #331 #652)
#654 := (iff #76 #652)
#320 := (or #648 #654)
#321 := [quant-inst]: #320
#568 := [unit-resolution #321 #680]: #654
#650 := (not #654)
#292 := (or #650 #331 #652)
#635 := [def-axiom]: #292
#570 := [unit-resolution #635 #568]: #569
#571 := [unit-resolution #570 #566]: #652
#357 := (not #441)
#641 := (or #441 #638)
#630 := (not #641)
#572 := (or #73 #630)
#278 := (iff #73 #641)
#283 := (or #648 #278)
#639 := (or #638 #441)
#640 := (iff #73 #639)
#284 := (or #648 #640)
#644 := (iff #284 #283)
#633 := (iff #283 #283)
#634 := [rewrite]: #633
#643 := (iff #640 #278)
#636 := (iff #639 #641)
#642 := [rewrite]: #636
#645 := [monotonicity #642]: #643
#647 := [monotonicity #645]: #644
#340 := [trans #647 #634]: #644
#646 := [quant-inst]: #284
#356 := [mp #646 #340]: #283
#567 := [unit-resolution #356 #680]: #278
#627 := (not #278)
#631 := (or #627 #73 #630)
#628 := [def-axiom]: #631
#558 := [unit-resolution #628 #567]: #572
#559 := [unit-resolution #558 #565]: #630
#358 := (or #641 #357)
#344 := [def-axiom]: #358
#561 := [unit-resolution #344 #559]: #357
#576 := (or #582 #441 #594)
#573 := [def-axiom]: #576
#562 := [unit-resolution #573 #561 #581]: #594
#605 := (or #622 #658)
#499 := [def-axiom]: #605
#563 := [unit-resolution #499 #562]: #658
#307 := (or #649 #315 #332)
#312 := [def-axiom]: #307
#560 := [unit-resolution #312 #563 #571]: #315
#609 := (not #484)
#359 := (not #638)
#250 := (or #641 #359)
#629 := [def-axiom]: #250
#564 := [unit-resolution #629 #559]: #359
#606 := (not #337)
#500 := (or #622 #606)
#501 := [def-axiom]: #500
#544 := [unit-resolution #501 #562]: #606
#610 := (or #609 #337 #638)
#604 := [def-axiom]: #610
#545 := [unit-resolution #604 #544 #564]: #609
#655 := (not #315)
#442 := (or #584 #655 #484)
#443 := [def-axiom]: #442
#547 := [unit-resolution #443 #545 #560 #579]: false
#548 := [lemma #547]: #73
#334 := (or #331 #85)
#322 := (or #331 #85 #242)
#333 := [def-axiom]: #322
#262 := [unit-resolution #333 #93]: #334
#549 := [unit-resolution #262 #548]: #331
#550 := (or #76 #649)
#308 := (or #650 #76 #649)
#651 := [def-axiom]: #308
#551 := [unit-resolution #651 #568]: #550
#552 := [unit-resolution #551 #549]: #649
#653 := (or #652 #658)
#659 := [def-axiom]: #653
#553 := [unit-resolution #659 #552]: #658
#656 := (or #652 #655)
#657 := [def-axiom]: #656
#554 := [unit-resolution #657 #552]: #655
#611 := (or #584 #315 #609)
#440 := [def-axiom]: #611
#555 := [unit-resolution #440 #554 #579]: #609
#607 := (or #484 #606)
#608 := [def-axiom]: #607
#556 := [unit-resolution #608 #555]: #606
#591 := (or #594 #332 #337)
#595 := [def-axiom]: #591
#546 := [unit-resolution #595 #556 #553]: #594
#557 := (or #85 #641)
#632 := (or #627 #85 #641)
#341 := [def-axiom]: #632
#535 := [unit-resolution #341 #567]: #557
#536 := [unit-resolution #535 #548]: #641
#602 := (or #484 #359)
#603 := [def-axiom]: #602
#538 := [unit-resolution #603 #555]: #359
#352 := (or #630 #441 #638)
#353 := [def-axiom]: #352
#539 := [unit-resolution #353 #538 #536]: #441
#575 := (or #582 #357 #622)
#585 := [def-axiom]: #575
[unit-resolution #585 #539 #546 #581]: false
unsat
5b1f4025c8afe3b7c1a0fb50a6e0140ed51756ba 153 0
#2 := false
decl f7 :: (-> S2 S3 S1)
decl f6 :: S3
#10 := f6
decl f5 :: S2
#9 := f5
#15 := (f7 f5 f6)
decl f1 :: S1
#4 := f1
#76 := (= f1 #15)
#178 := (not #76)
decl f4 :: S2
#8 := f4
#13 := (f7 f4 f6)
#73 := (= f1 #13)
#177 := (not #73)
#165 := (or #177 #178)
#166 := (not #165)
#350 := [hypothesis]: #166
decl f3 :: (-> S2 S2 S3 S1)
#11 := (f3 f4 f5 f6)
#70 := (= f1 #11)
#88 := (not #70)
#356 := (or #88 #165)
#189 := (iff #70 #165)
#79 := (and #73 #76)
#89 := (iff #79 #88)
#192 := (iff #89 #189)
#184 := (iff #165 #70)
#190 := (iff #184 #189)
#191 := [rewrite]: #190
#187 := (iff #89 #184)
#181 := (iff #166 #88)
#185 := (iff #181 #184)
#186 := [rewrite]: #185
#182 := (iff #89 #181)
#179 := (iff #79 #166)
#180 := [rewrite]: #179
#183 := [monotonicity #180]: #182
#188 := [trans #183 #186]: #187
#193 := [trans #188 #191]: #192
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (and #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (not #18)
#92 := (iff #19 #89)
#82 := (iff #70 #79)
#85 := (not #82)
#90 := (iff #85 #89)
#91 := [rewrite]: #90
#86 := (iff #19 #85)
#83 := (iff #18 #82)
#80 := (iff #17 #79)
#77 := (iff #16 #76)
#78 := [rewrite]: #77
#74 := (iff #14 #73)
#75 := [rewrite]: #74
#81 := [monotonicity #75 #78]: #80
#71 := (iff #12 #70)
#72 := [rewrite]: #71
#84 := [monotonicity #72 #81]: #83
#87 := [monotonicity #84]: #86
#93 := [trans #87 #91]: #92
#69 := [asserted]: #19
#96 := [mp #69 #93]: #89
#194 := [mp #96 #193]: #189
#363 := (not #189)
#373 := (or #88 #165 #363)
#377 := [def-axiom]: #373
#691 := [unit-resolution #377 #194]: #356
#480 := [unit-resolution #691 #350]: #88
#349 := (or #70 #165)
#693 := (iff #70 #166)
#43 := (:var 0 S3)
#42 := (:var 1 S2)
#41 := (:var 2 S2)
#44 := (f3 #41 #42 #43)
#720 := (pattern #44)
#48 := (f7 #42 #43)
#141 := (= f1 #48)
#196 := (not #141)
#46 := (f7 #41 #43)
#138 := (= f1 #46)
#195 := (not #138)
#197 := (or #195 #196)
#198 := (not #197)
#134 := (= f1 #44)
#201 := (iff #134 #198)
#721 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #720) #201)
#204 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #201)
#724 := (iff #204 #721)
#722 := (iff #201 #201)
#723 := [refl]: #722
#725 := [quant-intro #723]: #724
#144 := (and #138 #141)
#147 := (iff #134 #144)
#150 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #147)
#205 := (iff #150 #204)
#202 := (iff #147 #201)
#199 := (iff #144 #198)
#200 := [rewrite]: #199
#203 := [monotonicity #200]: #202
#206 := [quant-intro #203]: #205
#163 := (~ #150 #150)
#174 := (~ #147 #147)
#175 := [refl]: #174
#164 := [nnf-pos #175]: #163
#49 := (= #48 f1)
#47 := (= #46 f1)
#50 := (and #47 #49)
#45 := (= #44 f1)
#51 := (iff #45 #50)
#52 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #51)
#151 := (iff #52 #150)
#148 := (iff #51 #147)
#145 := (iff #50 #144)
#142 := (iff #49 #141)
#143 := [rewrite]: #142
#139 := (iff #47 #138)
#140 := [rewrite]: #139
#146 := [monotonicity #140 #143]: #145
#136 := (iff #45 #134)
#137 := [rewrite]: #136
#149 := [monotonicity #137 #146]: #148
#152 := [quant-intro #149]: #151
#133 := [asserted]: #52
#155 := [mp #133 #152]: #150
#176 := [mp~ #155 #164]: #150
#207 := [mp #176 #206]: #204
#726 := [mp #207 #725]: #721
#687 := (not #721)
#361 := (or #687 #693)
#362 := [quant-inst]: #361
#689 := [unit-resolution #362 #726]: #693
#694 := (not #693)
#695 := (or #694 #70 #165)
#696 := [def-axiom]: #695
#690 := [unit-resolution #696 #689]: #349
#333 := [unit-resolution #690 #480 #350]: false
#674 := [lemma #333]: #165
#303 := (or #70 #166)
#374 := (or #70 #166 #363)
#375 := [def-axiom]: #374
#376 := [unit-resolution #375 #194]: #303
#337 := [unit-resolution #376 #674]: #70
#338 := (or #88 #166)
#697 := (or #694 #88 #166)
#692 := [def-axiom]: #697
#339 := [unit-resolution #692 #689]: #338
[unit-resolution #339 #337 #674]: false
unsat
14e5476f4f3857f931521140926538df69a7900f 141 0
#2 := false
decl f7 :: (-> S2 S3 S1)
decl f6 :: S3
#10 := f6
decl f5 :: S2
#9 := f5
#246 := (f7 f5 f6)
decl f1 :: S1
#4 := f1
#333 := (= f1 #246)
#247 := (not #333)
decl f4 :: S2
#8 := f4
#334 := (f7 f4 f6)
#248 := (= f1 #334)
#335 := (not #248)
#326 := (or #335 #247)
#337 := (not #326)
decl f3 :: (-> S2 S2 S3 S1)
#11 := (f3 f4 f5 f6)
#64 := (= f1 #11)
#338 := (iff #64 #337)
#15 := (:var 0 S3)
#37 := (:var 1 S2)
#36 := (:var 2 S2)
#38 := (f3 #36 #37 #15)
#683 := (pattern #38)
#42 := (f7 #37 #15)
#124 := (= f1 #42)
#161 := (not #124)
#40 := (f7 #36 #15)
#121 := (= f1 #40)
#160 := (not #121)
#148 := (or #160 #161)
#149 := (not #148)
#117 := (= f1 #38)
#164 := (iff #117 #149)
#684 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #683) #164)
#167 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #164)
#687 := (iff #167 #684)
#685 := (iff #164 #164)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#127 := (and #121 #124)
#130 := (iff #117 #127)
#133 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #130)
#168 := (iff #133 #167)
#165 := (iff #130 #164)
#162 := (iff #127 #149)
#163 := [rewrite]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#146 := (~ #133 #133)
#157 := (~ #130 #130)
#158 := [refl]: #157
#147 := [nnf-pos #158]: #146
#43 := (= #42 f1)
#41 := (= #40 f1)
#44 := (and #41 #43)
#39 := (= #38 f1)
#45 := (iff #39 #44)
#46 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #45)
#134 := (iff #46 #133)
#131 := (iff #45 #130)
#128 := (iff #44 #127)
#125 := (iff #43 #124)
#126 := [rewrite]: #125
#122 := (iff #41 #121)
#123 := [rewrite]: #122
#129 := [monotonicity #123 #126]: #128
#119 := (iff #39 #117)
#120 := [rewrite]: #119
#132 := [monotonicity #120 #129]: #131
#135 := [quant-intro #132]: #134
#116 := [asserted]: #46
#138 := [mp #116 #135]: #133
#159 := [mp~ #138 #147]: #133
#170 := [mp #159 #169]: #167
#689 := [mp #170 #688]: #684
#336 := (not #684)
#340 := (or #336 #338)
#319 := [quant-inst]: #340
#266 := [unit-resolution #319 #689]: #338
#325 := (not #338)
#339 := (or #325 #337)
#12 := (= #11 f1)
#13 := (not #12)
#14 := (not #13)
#75 := (iff #14 #64)
#67 := (not #64)
#70 := (not #67)
#73 := (iff #70 #64)
#74 := [rewrite]: #73
#71 := (iff #14 #70)
#68 := (iff #13 #67)
#65 := (iff #12 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#63 := [asserted]: #14
#79 := [mp #63 #76]: #64
#659 := (or #325 #67 #337)
#660 := [def-axiom]: #659
#653 := [unit-resolution #660 #79]: #339
#296 := [unit-resolution #653 #266]: #337
#313 := (or #326 #333)
#443 := [def-axiom]: #313
#637 := [unit-resolution #443 #296]: #333
#16 := (f7 f5 #15)
#662 := (pattern #16)
#78 := (= f1 #16)
#82 := (not #78)
#663 := (forall (vars (?v0 S3)) (:pat #662) #82)
#85 := (forall (vars (?v0 S3)) #82)
#666 := (iff #85 #663)
#664 := (iff #82 #82)
#665 := [refl]: #664
#667 := [quant-intro #665]: #666
#152 := (~ #85 #85)
#150 := (~ #82 #82)
#151 := [refl]: #150
#153 := [nnf-pos #151]: #152
#17 := (= #16 f1)
#18 := (not #17)
#19 := (forall (vars (?v0 S3)) #18)
#86 := (iff #19 #85)
#83 := (iff #18 #82)
#80 := (iff #17 #78)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#87 := [quant-intro #84]: #86
#77 := [asserted]: #19
#90 := [mp #77 #87]: #85
#140 := [mp~ #90 #153]: #85
#668 := [mp #140 #667]: #663
#316 := (not #663)
#652 := (or #316 #247)
#312 := [quant-inst]: #652
[unit-resolution #312 #668 #637]: false
unsat
17d0e6f19e122ea3db2aaeed6f9623f5ae4eb5b6 165 0
#2 := false
decl f7 :: (-> S2 S3 S1)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#8 := f4
#13 := (f7 f4 f6)
decl f1 :: S1
#4 := f1
#69 := (= f1 #13)
#342 := (not #69)
decl f3 :: (-> S2 S2 S3 S1)
decl f5 :: S2
#9 := f5
#11 := (f3 f4 f5 f6)
#66 := (= f1 #11)
#346 := (f7 f5 f6)
#343 := (= f1 #346)
#347 := (not #343)
#320 := [hypothesis]: #347
#22 := (:var 0 S3)
#23 := (f7 f5 #22)
#676 := (pattern #23)
#96 := (= f1 #23)
#677 := (forall (vars (?v0 S3)) (:pat #676) #96)
#100 := (forall (vars (?v0 S3)) #96)
#680 := (iff #100 #677)
#678 := (iff #96 #96)
#679 := [refl]: #678
#681 := [quant-intro #679]: #680
#149 := (~ #100 #100)
#148 := (~ #96 #96)
#146 := [refl]: #148
#150 := [nnf-pos #146]: #149
#24 := (= #23 f1)
#25 := (forall (vars (?v0 S3)) #24)
#101 := (iff #25 #100)
#98 := (iff #24 #96)
#99 := [rewrite]: #98
#102 := [quant-intro #99]: #101
#95 := [asserted]: #25
#105 := [mp #95 #102]: #100
#143 := [mp~ #105 #150]: #100
#682 := [mp #143 #681]: #677
#308 := (not #677)
#309 := (or #308 #343)
#310 := [quant-inst]: #309
#450 := [unit-resolution #310 #682 #320]: false
#646 := [lemma #450]: #343
#78 := (not #66)
#647 := [hypothesis]: #78
#341 := (or #69 #66)
#79 := (iff #69 #78)
#14 := (= #13 f1)
#12 := (= #11 f1)
#15 := (iff #12 #14)
#16 := (not #15)
#82 := (iff #16 #79)
#72 := (iff #66 #69)
#75 := (not #72)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #16 #75)
#73 := (iff #15 #72)
#70 := (iff #14 #69)
#71 := [rewrite]: #70
#67 := (iff #12 #66)
#68 := [rewrite]: #67
#74 := [monotonicity #68 #71]: #73
#77 := [monotonicity #74]: #76
#83 := [trans #77 #81]: #82
#65 := [asserted]: #16
#86 := [mp #65 #83]: #79
#253 := (not #79)
#340 := (or #69 #66 #253)
#254 := [def-axiom]: #340
#255 := [unit-resolution #254 #86]: #341
#648 := [unit-resolution #255 #647]: #69
#326 := (or #342 #347)
#650 := (or #66 #326)
#661 := (not #326)
#663 := (iff #66 #661)
#39 := (:var 1 S2)
#38 := (:var 2 S2)
#40 := (f3 #38 #39 #22)
#690 := (pattern #40)
#44 := (f7 #39 #22)
#131 := (= f1 #44)
#168 := (not #131)
#42 := (f7 #38 #22)
#128 := (= f1 #42)
#167 := (not #128)
#155 := (or #167 #168)
#156 := (not #155)
#124 := (= f1 #40)
#171 := (iff #124 #156)
#691 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #690) #171)
#174 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #171)
#694 := (iff #174 #691)
#692 := (iff #171 #171)
#693 := [refl]: #692
#695 := [quant-intro #693]: #694
#134 := (and #128 #131)
#137 := (iff #124 #134)
#140 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #137)
#175 := (iff #140 #174)
#172 := (iff #137 #171)
#169 := (iff #134 #156)
#170 := [rewrite]: #169
#173 := [monotonicity #170]: #172
#176 := [quant-intro #173]: #175
#153 := (~ #140 #140)
#164 := (~ #137 #137)
#165 := [refl]: #164
#154 := [nnf-pos #165]: #153
#45 := (= #44 f1)
#43 := (= #42 f1)
#46 := (and #43 #45)
#41 := (= #40 f1)
#47 := (iff #41 #46)
#48 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #47)
#141 := (iff #48 #140)
#138 := (iff #47 #137)
#135 := (iff #46 #134)
#132 := (iff #45 #131)
#133 := [rewrite]: #132
#129 := (iff #43 #128)
#130 := [rewrite]: #129
#136 := [monotonicity #130 #133]: #135
#126 := (iff #41 #124)
#127 := [rewrite]: #126
#139 := [monotonicity #127 #136]: #138
#142 := [quant-intro #139]: #141
#123 := [asserted]: #48
#145 := [mp #123 #142]: #140
#166 := [mp~ #145 #154]: #140
#177 := [mp #166 #176]: #174
#696 := [mp #177 #695]: #691
#657 := (not #691)
#331 := (or #657 #663)
#332 := [quant-inst]: #331
#649 := [unit-resolution #332 #696]: #663
#658 := (not #663)
#318 := (or #658 #66 #326)
#323 := [def-axiom]: #318
#645 := [unit-resolution #323 #649]: #650
#651 := [unit-resolution #645 #647]: #326
#662 := (or #661 #342 #347)
#668 := [def-axiom]: #662
#289 := [unit-resolution #668 #651 #648 #646]: false
#652 := [lemma #289]: #66
#345 := (or #342 #78)
#333 := (or #342 #78 #253)
#344 := [def-axiom]: #333
#273 := [unit-resolution #344 #86]: #345
#654 := [unit-resolution #273 #652]: #342
#294 := (or #78 #661)
#659 := (or #658 #78 #661)
#319 := [def-axiom]: #659
#295 := [unit-resolution #319 #649]: #294
#655 := [unit-resolution #295 #652]: #661
#664 := (or #326 #69)
#665 := [def-axiom]: #664
[unit-resolution #665 #655 #654]: false
unsat
8c5227e6af822f9c7c2a140803c4af49bcf24bcb 164 0
#2 := false
decl f3 :: (-> S2 S2 S3 S1)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#8 := f4
decl f5 :: S2
#9 := f5
#13 := (f3 f5 f4 f6)
decl f1 :: S1
#4 := f1
#70 := (= f1 #13)
#343 := (not #70)
#11 := (f3 f4 f5 f6)
#67 := (= f1 #11)
#79 := (not #67)
#643 := [hypothesis]: #79
#342 := (or #70 #67)
#80 := (iff #70 #79)
#14 := (= #13 f1)
#12 := (= #11 f1)
#15 := (iff #12 #14)
#16 := (not #15)
#83 := (iff #16 #80)
#73 := (iff #67 #70)
#76 := (not #73)
#81 := (iff #76 #80)
#82 := [rewrite]: #81
#77 := (iff #16 #76)
#74 := (iff #15 #73)
#71 := (iff #14 #70)
#72 := [rewrite]: #71
#68 := (iff #12 #67)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#66 := [asserted]: #16
#87 := [mp #66 #84]: #80
#254 := (not #80)
#341 := (or #70 #67 #254)
#255 := [def-axiom]: #341
#256 := [unit-resolution #255 #87]: #342
#644 := [unit-resolution #256 #643]: #70
decl f11 :: (-> S2 S3 S1)
#327 := (f11 f5 f6)
#662 := (= f1 #327)
#664 := (not #662)
#347 := (f11 f4 f6)
#344 := (= f1 #347)
#348 := (not #344)
#332 := (or #348 #664)
#642 := (or #67 #332)
#666 := (not #332)
#657 := (iff #67 #666)
#40 := (:var 0 S3)
#39 := (:var 1 S2)
#38 := (:var 2 S2)
#41 := (f3 #38 #39 #40)
#691 := (pattern #41)
#45 := (f11 #39 #40)
#132 := (= f1 #45)
#169 := (not #132)
#43 := (f11 #38 #40)
#129 := (= f1 #43)
#168 := (not #129)
#156 := (or #168 #169)
#157 := (not #156)
#125 := (= f1 #41)
#172 := (iff #125 #157)
#692 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #691) #172)
#175 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #172)
#695 := (iff #175 #692)
#693 := (iff #172 #172)
#694 := [refl]: #693
#696 := [quant-intro #694]: #695
#135 := (and #129 #132)
#138 := (iff #125 #135)
#141 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #138)
#176 := (iff #141 #175)
#173 := (iff #138 #172)
#170 := (iff #135 #157)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#177 := [quant-intro #174]: #176
#154 := (~ #141 #141)
#165 := (~ #138 #138)
#166 := [refl]: #165
#155 := [nnf-pos #166]: #154
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (and #44 #46)
#42 := (= #41 f1)
#48 := (iff #42 #47)
#49 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #48)
#142 := (iff #49 #141)
#139 := (iff #48 #138)
#136 := (iff #47 #135)
#133 := (iff #46 #132)
#134 := [rewrite]: #133
#130 := (iff #44 #129)
#131 := [rewrite]: #130
#137 := [monotonicity #131 #134]: #136
#127 := (iff #42 #125)
#128 := [rewrite]: #127
#140 := [monotonicity #128 #137]: #139
#143 := [quant-intro #140]: #142
#124 := [asserted]: #49
#146 := [mp #124 #143]: #141
#167 := [mp~ #146 #155]: #141
#178 := [mp #167 #177]: #175
#697 := [mp #178 #696]: #692
#319 := (not #692)
#366 := (or #319 #657)
#367 := [quant-inst]: #366
#638 := [unit-resolution #367 #697]: #657
#368 := (not #657)
#369 := (or #368 #67 #332)
#262 := [def-axiom]: #369
#352 := [unit-resolution #262 #638]: #642
#353 := [unit-resolution #352 #643]: #332
#355 := (or #343 #666)
#663 := (iff #70 #666)
#324 := (or #319 #663)
#321 := (or #664 #348)
#451 := (not #321)
#658 := (iff #70 #451)
#660 := (or #319 #658)
#661 := (iff #660 #324)
#645 := (iff #324 #324)
#308 := [rewrite]: #645
#669 := (iff #658 #663)
#667 := (iff #451 #666)
#333 := (iff #321 #332)
#665 := [rewrite]: #333
#668 := [monotonicity #665]: #667
#659 := [monotonicity #668]: #669
#304 := [monotonicity #659]: #661
#309 := [trans #304 #308]: #661
#320 := [quant-inst]: #660
#310 := [mp #320 #309]: #324
#354 := [unit-resolution #310 #697]: #663
#646 := (not #663)
#653 := (or #646 #343 #666)
#655 := [def-axiom]: #653
#633 := [unit-resolution #655 #354]: #355
#634 := [unit-resolution #633 #353 #644]: false
#349 := [lemma #634]: #67
#346 := (or #343 #79)
#334 := (or #343 #79 #254)
#345 := [def-axiom]: #334
#274 := [unit-resolution #345 #87]: #346
#631 := [unit-resolution #274 #349]: #343
#635 := (or #79 #666)
#639 := (or #368 #79 #666)
#640 := [def-axiom]: #639
#632 := [unit-resolution #640 #638]: #635
#636 := [unit-resolution #632 #349]: #666
#625 := (or #70 #332)
#652 := (or #646 #70 #332)
#290 := [def-axiom]: #652
#626 := [unit-resolution #290 #354]: #625
[unit-resolution #626 #636 #631]: false
unsat
8156155a61a8ea554dc6bef7e96703a3d13ceb5f 142 0
#2 := false
decl f3 :: (-> S2 S2 S3 S1)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f4 f5)
decl f1 :: S1
#4 := f1
#66 := (= f1 #10)
#78 := (not #66)
#649 := [hypothesis]: #78
decl f6 :: (-> S2 S3 S1)
#12 := (f6 f4 f5)
#69 := (= f1 #12)
#341 := (or #69 #66)
#79 := (iff #69 #78)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (iff #11 #13)
#15 := (not #14)
#82 := (iff #15 #79)
#72 := (iff #66 #69)
#75 := (not #72)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #15 #75)
#73 := (iff #14 #72)
#70 := (iff #13 #69)
#71 := [rewrite]: #70
#67 := (iff #11 #66)
#68 := [rewrite]: #67
#74 := [monotonicity #68 #71]: #73
#77 := [monotonicity #74]: #76
#83 := [trans #77 #81]: #82
#65 := [asserted]: #15
#86 := [mp #65 #83]: #79
#253 := (not #79)
#340 := (or #69 #66 #253)
#254 := [def-axiom]: #340
#255 := [unit-resolution #254 #86]: #341
#650 := [unit-resolution #255 #649]: #69
#342 := (not #69)
#651 := (or #66 #342)
#39 := (:var 0 S3)
#38 := (:var 1 S2)
#37 := (:var 2 S2)
#40 := (f3 #37 #38 #39)
#690 := (pattern #40)
#44 := (f6 #38 #39)
#131 := (= f1 #44)
#168 := (not #131)
#42 := (f6 #37 #39)
#128 := (= f1 #42)
#167 := (not #128)
#155 := (or #167 #168)
#156 := (not #155)
#124 := (= f1 #40)
#171 := (iff #124 #156)
#691 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #690) #171)
#174 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #171)
#694 := (iff #174 #691)
#692 := (iff #171 #171)
#693 := [refl]: #692
#695 := [quant-intro #693]: #694
#134 := (and #128 #131)
#137 := (iff #124 #134)
#140 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #137)
#175 := (iff #140 #174)
#172 := (iff #137 #171)
#169 := (iff #134 #156)
#170 := [rewrite]: #169
#173 := [monotonicity #170]: #172
#176 := [quant-intro #173]: #175
#153 := (~ #140 #140)
#164 := (~ #137 #137)
#165 := [refl]: #164
#154 := [nnf-pos #165]: #153
#45 := (= #44 f1)
#43 := (= #42 f1)
#46 := (and #43 #45)
#41 := (= #40 f1)
#47 := (iff #41 #46)
#48 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #47)
#141 := (iff #48 #140)
#138 := (iff #47 #137)
#135 := (iff #46 #134)
#132 := (iff #45 #131)
#133 := [rewrite]: #132
#129 := (iff #43 #128)
#130 := [rewrite]: #129
#136 := [monotonicity #130 #133]: #135
#126 := (iff #41 #124)
#127 := [rewrite]: #126
#139 := [monotonicity #127 #136]: #138
#142 := [quant-intro #139]: #141
#123 := [asserted]: #48
#145 := [mp #123 #142]: #140
#166 := [mp~ #145 #154]: #140
#177 := [mp #166 #176]: #174
#696 := [mp #177 #695]: #691
#667 := (not #691)
#662 := (or #667 #72)
#346 := (or #342 #342)
#343 := (not #346)
#347 := (iff #66 #343)
#668 := (or #667 #347)
#318 := (iff #668 #662)
#659 := (iff #662 #662)
#319 := [rewrite]: #659
#665 := (iff #347 #72)
#332 := (iff #343 #69)
#663 := (not #342)
#657 := (iff #663 #69)
#331 := [rewrite]: #657
#320 := (iff #343 #663)
#326 := (iff #346 #342)
#661 := [rewrite]: #326
#450 := [monotonicity #661]: #320
#664 := [trans #450 #331]: #332
#666 := [monotonicity #664]: #665
#323 := [monotonicity #666]: #318
#660 := [trans #323 #319]: #318
#658 := [quant-inst]: #668
#303 := [mp #658 #660]: #662
#645 := [unit-resolution #303 #696]: #72
#644 := (or #75 #66 #342)
#307 := [def-axiom]: #644
#289 := [unit-resolution #307 #645]: #651
#652 := [unit-resolution #289 #650 #649]: false
#654 := [lemma #652]: #66
#345 := (or #342 #78)
#333 := (or #342 #78 #253)
#344 := [def-axiom]: #333
#273 := [unit-resolution #344 #86]: #345
#294 := [unit-resolution #273 #654]: #342
#295 := (or #78 #69)
#308 := (or #75 #78 #69)
#309 := [def-axiom]: #308
#655 := [unit-resolution #309 #645]: #295
[unit-resolution #655 #294 #654]: false
unsat
f0bdfff0ca207ce8dcf7aafa0f5fd49080a4003e 279 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f8 :: S3
#13 := f8
decl f4 :: (-> S2 S2 S2)
decl f6 :: S2
#9 := f6
decl f5 :: S2
#8 := f5
#16 := (f4 f5 f6)
#315 := (f3 #16 f8)
decl f1 :: S1
#4 := f1
#652 := (= f1 #315)
#250 := (f3 f6 f8)
#629 := (= f1 #250)
#626 := (not #629)
#340 := (f3 f5 f8)
#356 := (= f1 #340)
#357 := (not #356)
#615 := (or #357 #626)
#616 := (not #615)
#612 := (iff #616 #652)
#583 := (not #612)
#571 := [hypothesis]: #583
#46 := (:var 0 S3)
#44 := (:var 1 S2)
#43 := (:var 2 S2)
#45 := (f4 #43 #44)
#47 := (f3 #45 #46)
#681 := (pattern #47)
#51 := (f3 #44 #46)
#138 := (= f1 #51)
#175 := (not #138)
#49 := (f3 #43 #46)
#135 := (= f1 #49)
#174 := (not #135)
#162 := (or #174 #175)
#163 := (not #162)
#131 := (= f1 #47)
#178 := (iff #131 #163)
#682 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #681) #178)
#181 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #178)
#685 := (iff #181 #682)
#683 := (iff #178 #178)
#684 := [refl]: #683
#686 := [quant-intro #684]: #685
#141 := (and #135 #138)
#144 := (iff #131 #141)
#147 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #144)
#182 := (iff #147 #181)
#179 := (iff #144 #178)
#176 := (iff #141 #163)
#177 := [rewrite]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#160 := (~ #147 #147)
#171 := (~ #144 #144)
#172 := [refl]: #171
#161 := [nnf-pos #172]: #160
#52 := (= #51 f1)
#50 := (= #49 f1)
#53 := (and #50 #52)
#48 := (= #47 f1)
#54 := (iff #48 #53)
#55 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #54)
#148 := (iff #55 #147)
#145 := (iff #54 #144)
#142 := (iff #53 #141)
#139 := (iff #52 #138)
#140 := [rewrite]: #139
#136 := (iff #50 #135)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#133 := (iff #48 #131)
#134 := [rewrite]: #133
#146 := [monotonicity #134 #143]: #145
#149 := [quant-intro #146]: #148
#130 := [asserted]: #55
#152 := [mp #130 #149]: #147
#173 := [mp~ #152 #161]: #147
#184 := [mp #173 #183]: #181
#687 := [mp #184 #686]: #682
#307 := (not #682)
#598 := (or #307 #612)
#617 := (iff #652 #616)
#614 := (or #307 #617)
#619 := (iff #614 #598)
#462 := (iff #598 #598)
#463 := [rewrite]: #462
#613 := (iff #617 #612)
#618 := [rewrite]: #613
#461 := [monotonicity #618]: #619
#605 := [trans #461 #463]: #619
#620 := [quant-inst]: #614
#606 := [mp #620 #605]: #598
#567 := [unit-resolution #606 #687 #571]: false
#572 := [lemma #567]: #612
#654 := (not #652)
decl f7 :: S2
#10 := f7
#335 := (f3 f7 f8)
#332 := (= f1 #335)
#336 := (not #332)
#320 := (or #336 #654)
#17 := (f4 #16 f7)
#18 := (f3 #17 f8)
#76 := (= f1 #18)
#331 := (not #76)
#11 := (f4 f6 f7)
#12 := (f4 f5 #11)
#14 := (f3 #12 f8)
#73 := (= f1 #14)
#647 := (f3 #11 f8)
#633 := (= f1 #647)
#485 := (or #336 #626)
#494 := (not #485)
#495 := (iff #494 #633)
#588 := (not #495)
#568 := [hypothesis]: #588
#499 := (or #307 #495)
#601 := (or #626 #336)
#483 := (not #601)
#484 := (iff #633 #483)
#500 := (or #307 #484)
#594 := (iff #500 #499)
#595 := (iff #499 #499)
#582 := [rewrite]: #595
#497 := (iff #484 #495)
#593 := (iff #633 #494)
#496 := (iff #593 #495)
#489 := [rewrite]: #496
#478 := (iff #484 #593)
#589 := (iff #483 #494)
#444 := (iff #601 #485)
#592 := [rewrite]: #444
#590 := [monotonicity #592]: #589
#493 := [monotonicity #590]: #478
#498 := [trans #493 #489]: #497
#591 := [monotonicity #498]: #594
#584 := [trans #591 #582]: #594
#501 := [quant-inst]: #500
#576 := [mp #501 #584]: #499
#569 := [unit-resolution #576 #687 #568]: false
#570 := [lemma #569]: #495
#634 := (not #633)
#358 := (or #357 #634)
#85 := (not #73)
#558 := [hypothesis]: #85
#561 := (or #73 #358)
#344 := (not #358)
#359 := (iff #73 #344)
#630 := (or #307 #359)
#352 := [quant-inst]: #630
#559 := [unit-resolution #352 #687]: #359
#342 := (not #359)
#343 := (or #342 #73 #358)
#345 := [def-axiom]: #343
#562 := [unit-resolution #345 #559]: #561
#563 := [unit-resolution #562 #558]: #358
#656 := (not #320)
#330 := (or #76 #73)
#86 := (iff #76 #85)
#19 := (= #18 f1)
#15 := (= #14 f1)
#20 := (iff #15 #19)
#21 := (not #20)
#89 := (iff #21 #86)
#79 := (iff #73 #76)
#82 := (not #79)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #21 #82)
#80 := (iff #20 #79)
#77 := (iff #19 #76)
#78 := [rewrite]: #77
#74 := (iff #15 #73)
#75 := [rewrite]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#72 := [asserted]: #21
#93 := [mp #72 #90]: #86
#242 := (not #86)
#329 := (or #76 #73 #242)
#243 := [def-axiom]: #329
#244 := [unit-resolution #243 #93]: #330
#560 := [unit-resolution #244 #558]: #76
#544 := (or #331 #656)
#653 := (iff #76 #656)
#312 := (or #307 #653)
#309 := (or #654 #336)
#441 := (not #309)
#648 := (iff #76 #441)
#650 := (or #307 #648)
#651 := (iff #650 #312)
#635 := (iff #312 #312)
#296 := [rewrite]: #635
#659 := (iff #648 #653)
#657 := (iff #441 #656)
#321 := (iff #309 #320)
#655 := [rewrite]: #321
#658 := [monotonicity #655]: #657
#649 := [monotonicity #658]: #659
#292 := [monotonicity #649]: #651
#297 := [trans #292 #296]: #651
#308 := [quant-inst]: #650
#298 := [mp #308 #297]: #312
#564 := [unit-resolution #298 #687]: #653
#636 := (not #653)
#643 := (or #636 #331 #656)
#645 := [def-axiom]: #643
#545 := [unit-resolution #645 #564]: #544
#547 := [unit-resolution #545 #560]: #656
#638 := (or #320 #652)
#639 := [def-axiom]: #638
#548 := [unit-resolution #639 #547]: #652
#577 := (or #583 #616 #654)
#578 := [def-axiom]: #577
#549 := [unit-resolution #578 #548 #572]: #616
#607 := (or #615 #356)
#573 := [def-axiom]: #607
#550 := [unit-resolution #573 #549]: #356
#632 := (or #344 #357 #634)
#341 := [def-axiom]: #632
#551 := [unit-resolution #341 #550 #563]: #634
#299 := (or #320 #332)
#637 := [def-axiom]: #299
#552 := [unit-resolution #637 #547]: #332
#575 := (or #615 #629)
#585 := [def-axiom]: #575
#553 := [unit-resolution #585 #549]: #629
#610 := (or #494 #336 #626)
#604 := [def-axiom]: #610
#554 := [unit-resolution #604 #553 #552]: #494
#442 := (or #588 #485 #633)
#443 := [def-axiom]: #442
#555 := [unit-resolution #443 #554 #551 #570]: false
#556 := [lemma #555]: #73
#334 := (or #331 #85)
#322 := (or #331 #85 #242)
#333 := [def-axiom]: #322
#262 := [unit-resolution #333 #93]: #334
#546 := [unit-resolution #262 #556]: #331
#557 := (or #76 #320)
#642 := (or #636 #76 #320)
#278 := [def-axiom]: #642
#535 := [unit-resolution #278 #564]: #557
#536 := [unit-resolution #535 #546]: #320
#538 := (or #85 #344)
#623 := (or #342 #85 #344)
#624 := [def-axiom]: #623
#539 := [unit-resolution #624 #559]: #538
#540 := [unit-resolution #539 #556]: #344
#631 := (or #358 #633)
#628 := [def-axiom]: #631
#541 := [unit-resolution #628 #540]: #633
#611 := (or #588 #494 #634)
#440 := [def-axiom]: #611
#542 := [unit-resolution #440 #541 #570]: #494
#608 := (or #485 #332)
#602 := [def-axiom]: #608
#537 := [unit-resolution #602 #542]: #332
#640 := (or #656 #336 #654)
#641 := [def-axiom]: #640
#543 := [unit-resolution #641 #537 #536]: #654
#353 := (or #358 #356)
#627 := [def-axiom]: #353
#529 := [unit-resolution #627 #540]: #356
#603 := (or #485 #629)
#609 := [def-axiom]: #603
#525 := [unit-resolution #609 #542]: #629
#586 := (or #616 #357 #626)
#587 := [def-axiom]: #586
#526 := [unit-resolution #587 #525 #529]: #616
#579 := (or #583 #615 #652)
#580 := [def-axiom]: #579
[unit-resolution #580 #526 #543 #572]: false
unsat
0166ab8a0d2c326b9fbcb4a04b09f2f360525618 18 0
#2 := false
decl f3 :: S2
#8 := f3
#9 := (= f3 f3)
#10 := (not #9)
#68 := (iff #10 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #10 #63)
#61 := (iff #9 true)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#60 := [asserted]: #10
[mp #60 #69]: false
unsat
