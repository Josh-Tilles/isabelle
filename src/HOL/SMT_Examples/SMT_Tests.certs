8c0dd63633148cae631c41716f59fedf31aaf85f 8 0
#2 := false
#1 := true
#8 := (not true)
#29 := (iff #8 false)
#30 := [rewrite]: #29
#28 := [asserted]: #8
[mp #28 #30]: false
unsat
0e95eca2e0e7caa31aef537bbf293f83696bbe8a 16 0
#2 := false
#8 := (not false)
#9 := (not #8)
#37 := (iff #9 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
bbd400f7a6b516cc913f7b22468b7a0f5ab6d4ef 21 0
#2 := false
#1 := true
#8 := (not true)
#9 := (not #8)
#10 := (not #9)
#42 := (iff #10 false)
#31 := (iff #8 false)
#32 := [rewrite]: #31
#40 := (iff #10 #8)
#38 := (iff #9 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#41 := [monotonicity #39]: #40
#43 := [trans #41 #32]: #42
#30 := [asserted]: #10
[mp #30 #43]: false
unsat
218e23551f716b340d470b13088877ee41ffeabf 16 0
#2 := false
#1 := true
#8 := (and true true)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
4820ba699dfc46472702e8103b5f713f524239e1 16 0
#2 := false
#1 := true
#8 := (or true false)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
ee9714cb019befa9d851be80ac36f38d43541012 16 0
#2 := false
#1 := true
#8 := (implies false true)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
7869b66c1f04020ccc620174a1f0451e995f1abd 24 0
#2 := false
#1 := true
#8 := (iff false true)
#9 := (not #8)
#10 := (not #9)
#45 := (iff #10 false)
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#38 := (iff #9 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 false)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #10
[mp #30 #46]: false
unsat
4e759d02d4de42cc8b917c1ee399e500780bf8d9 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (or #9 #10)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := (= f1 f3)
#36 := (not #33)
#39 := (or #33 #36)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #35 #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
6f508687a1b8d851ff54bda8c3b55201243d9664 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (and #9 #10)
#12 := (not #11)
#13 := (not #12)
#59 := (iff #13 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#52 := (iff #12 true)
#47 := (not false)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 false)
#34 := (= f1 f3)
#37 := (not #34)
#40 := (and #34 #37)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #36 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#33 := [asserted]: #13
[mp #33 #60]: false
unsat
a570d829481d812db472649896375ed3e544b2a0 65 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and false #9)
#13 := (or #12 #9)
#11 := (not #9)
#14 := (or #11 #13)
#1 := true
#10 := (and true #9)
#15 := (or #10 #14)
#16 := (not #15)
#83 := (iff #16 false)
#78 := (not true)
#81 := (iff #78 false)
#82 := [rewrite]: #81
#79 := (iff #16 #78)
#76 := (iff #15 true)
#37 := (= f1 f3)
#71 := (or #37 true)
#74 := (iff #71 true)
#75 := [rewrite]: #74
#72 := (iff #15 #71)
#69 := (iff #14 true)
#47 := (not #37)
#64 := (or #47 #37)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #14 #64)
#62 := (iff #13 #37)
#57 := (or false #37)
#60 := (iff #57 #37)
#61 := [rewrite]: #60
#58 := (iff #13 #57)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#55 := (iff #12 false)
#50 := (and false #37)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#52 := [monotonicity #39]: #51
#56 := [trans #52 #54]: #55
#59 := [monotonicity #56 #39]: #58
#63 := [trans #59 #61]: #62
#48 := (iff #11 #47)
#49 := [monotonicity #39]: #48
#66 := [monotonicity #49 #63]: #65
#70 := [trans #66 #68]: #69
#45 := (iff #10 #37)
#40 := (and true #37)
#43 := (iff #40 #37)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#73 := [monotonicity #46 #70]: #72
#77 := [trans #73 #75]: #76
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#36 := [asserted]: #16
[mp #36 #84]: false
unsat
4cee40af08d20a91303cc3118e83d7eca7872920 29 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (implies #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := (= f1 f3)
#35 := (implies #32 #32)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 #32)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
0fe45fcdabd9bb3a2f80916a3d449a773092c058 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (and #9 #10)
#12 := (implies #11 false)
#13 := (not #12)
#59 := (iff #13 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#52 := (iff #12 true)
#47 := (implies false false)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 false)
#34 := (= f1 f3)
#37 := (not #34)
#40 := (and #34 #37)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #36 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#33 := [asserted]: #13
[mp #33 #60]: false
unsat
d63aa12ea1f62e0c634eee23e682ed847e82572d 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (and #11 #9)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (and #36 #39)
#52 := (implies #42 #42)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 #42)
#45 := (and #39 #36)
#48 := (iff #45 #42)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#47 := [monotonicity #41 #38]: #46
#51 := [trans #47 #49]: #50
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#54 := [monotonicity #44 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
ac9f8dfae9db87406db77382935caeb1212c8720 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (or #11 #9)
#12 := (or #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (or #36 #39)
#52 := (implies #42 #42)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 #42)
#45 := (or #39 #36)
#48 := (iff #45 #42)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#47 := [monotonicity #41 #38]: #46
#51 := [trans #47 #49]: #50
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#54 := [monotonicity #44 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
3ca7c9c03f9ec0a6bb70ba63fef8fe4be3fc1124 55 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#36 := (= f1 f3)
#79 := (iff #36 false)
#69 := (not #36)
decl f4 :: S1
#10 := f4
#39 := (= f1 f4)
#42 := (and #36 #39)
#51 := (not #42)
#60 := (or #36 #39 #51)
#63 := (not #60)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (or #9 #11)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#66 := (iff #15 #63)
#45 := (or #36 #39)
#52 := (or #51 #45)
#57 := (not #52)
#64 := (iff #57 #63)
#61 := (iff #52 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#58 := (iff #15 #57)
#55 := (iff #14 #52)
#48 := (implies #42 #45)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #14 #48)
#46 := (iff #13 #45)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#47 := [monotonicity #38 #41]: #46
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#50 := [monotonicity #44 #47]: #49
#56 := [trans #50 #54]: #55
#59 := [monotonicity #56]: #58
#67 := [trans #59 #65]: #66
#35 := [asserted]: #15
#68 := [mp #35 #67]: #63
#70 := [not-or-elim #68]: #69
#80 := [iff-false #70]: #79
#73 := [not-or-elim #68]: #42
#74 := [and-elim #73]: #36
[mp #74 #80]: false
unsat
520e744f261e775610c6856eddf3b7e384835c22 55 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (or #9 #11)
#13 := (not #12)
#15 := (implies #13 #14)
#16 := (not #15)
#72 := (iff #16 false)
#40 := (= f1 f4)
#37 := (= f1 f3)
#43 := (or #37 #40)
#49 := (not #37)
#55 := (or #49 #43)
#60 := (not #55)
#70 := (iff #60 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #60 #65)
#63 := (iff #55 true)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#46 := (not #43)
#52 := (implies #46 #49)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39]: #50
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #39 #42]: #44
#48 := [monotonicity #45]: #47
#54 := [monotonicity #48 #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#73 := [trans #62 #71]: #72
#36 := [asserted]: #16
[mp #36 #73]: false
unsat
a4cd863a4afcd8896c4557ed1f94e6b2e251460c 55 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#14 := (not #11)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (not #12)
#15 := (implies #13 #14)
#16 := (not #15)
#72 := (iff #16 false)
#40 := (= f1 f4)
#37 := (= f1 f3)
#43 := (or #37 #40)
#49 := (not #40)
#55 := (or #49 #43)
#60 := (not #55)
#70 := (iff #60 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #60 #65)
#63 := (iff #55 true)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#46 := (not #43)
#52 := (implies #46 #49)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#51 := [monotonicity #42]: #50
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#45 := [monotonicity #39 #42]: #44
#48 := [monotonicity #45]: #47
#54 := [monotonicity #48 #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#73 := [trans #62 #71]: #72
#36 := [asserted]: #16
[mp #36 #73]: false
unsat
971edb4251c21bd89bd88e455c303075d8fa8060 49 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#37 := (= f1 f3)
#71 := (iff #37 false)
#40 := (not #37)
decl f4 :: S1
#11 := f4
#43 := (= f1 f4)
#46 := (and #37 #43)
#49 := (not #46)
#55 := (or #37 #49)
#60 := (not #55)
#12 := (= f4 f1)
#9 := (= f3 f1)
#13 := (and #9 #12)
#14 := (not #13)
#10 := (not #9)
#15 := (implies #10 #14)
#16 := (not #15)
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#52 := (implies #40 #49)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39 #45]: #47
#51 := [monotonicity #48]: #50
#41 := (iff #10 #40)
#42 := [monotonicity #39]: #41
#54 := [monotonicity #42 #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#36 := [asserted]: #16
#65 := [mp #36 #62]: #60
#63 := [not-or-elim #65]: #40
#72 := [iff-false #63]: #71
#64 := [not-or-elim #65]: #46
#66 := [and-elim #64]: #37
[mp #66 #72]: false
unsat
f2ade1ff188c65975bec097c4372f4c2c6bf872d 54 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#37 := (= f1 f3)
#76 := (iff #37 false)
#40 := (not #37)
decl f4 :: S1
#11 := f4
#43 := (= f1 f4)
#49 := (and #37 #43)
#54 := (not #49)
#60 := (or #37 #54)
#65 := (not #60)
#9 := (= f3 f1)
#12 := (= f4 f1)
#13 := (and #12 #9)
#14 := (not #13)
#10 := (not #9)
#15 := (implies #10 #14)
#16 := (not #15)
#66 := (iff #16 #65)
#63 := (iff #15 #60)
#57 := (implies #40 #54)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (iff #13 #49)
#46 := (and #43 #37)
#50 := (iff #46 #49)
#51 := [rewrite]: #50
#47 := (iff #13 #46)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45 #39]: #47
#53 := [trans #48 #51]: #52
#56 := [monotonicity #53]: #55
#41 := (iff #10 #40)
#42 := [monotonicity #39]: #41
#59 := [monotonicity #42 #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#36 := [asserted]: #16
#70 := [mp #36 #67]: #65
#68 := [not-or-elim #70]: #40
#77 := [iff-false #68]: #76
#69 := [not-or-elim #70]: #49
#71 := [and-elim #69]: #37
[mp #71 #77]: false
unsat
682534b0f67b638e243f2eb512302b970aa41e32 60 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#42 := (= f1 f4)
#51 := (not #42)
decl f3 :: S1
#8 := f3
#39 := (= f1 f3)
#48 := (not #39)
#54 := (or #48 #51)
#45 := (and #39 #42)
#67 := (iff #45 #54)
#72 := (iff #67 false)
#57 := (not #54)
#78 := (iff #57 #54)
#75 := (iff #78 false)
#76 := [rewrite]: #75
#79 := (iff #67 #78)
#60 := (iff #45 #57)
#77 := [rewrite]: #60
#80 := [monotonicity #77]: #79
#74 := [trans #80 #76]: #72
#11 := (= f4 f1)
#14 := (not #11)
#9 := (= f3 f1)
#13 := (not #9)
#15 := (or #13 #14)
#16 := (not #15)
#12 := (and #9 #11)
#17 := (iff #12 #16)
#18 := (not #17)
#69 := (iff #18 #67)
#63 := (not #60)
#66 := (iff #63 #67)
#68 := [rewrite]: #66
#64 := (iff #18 #63)
#61 := (iff #17 #60)
#58 := (iff #16 #57)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#53 := [monotonicity #44]: #52
#49 := (iff #13 #48)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#50 := [monotonicity #41]: #49
#56 := [monotonicity #50 #53]: #55
#59 := [monotonicity #56]: #58
#46 := (iff #12 #45)
#47 := [monotonicity #41 #44]: #46
#62 := [monotonicity #47 #59]: #61
#65 := [monotonicity #62]: #64
#70 := [trans #65 #68]: #69
#38 := [asserted]: #18
#73 := [mp #38 #70]: #67
[mp #73 #74]: false
unsat
18c084b69ef057902c4f565daffb9414815edad2 79 0
#2 := false
decl f1 :: S1
#4 := f1
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#16 := (and #11 #14)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#17 := (and #9 #16)
#12 := (and #9 #11)
#15 := (and #12 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#95 := (iff #19 false)
#49 := (= f1 f5)
#43 := (= f1 f4)
#55 := (and #43 #49)
#40 := (= f1 f3)
#58 := (and #40 #55)
#46 := (and #40 #43)
#52 := (and #46 #49)
#64 := (not #52)
#65 := (or #64 #58)
#70 := (not #65)
#93 := (iff #70 false)
#1 := true
#88 := (not true)
#91 := (iff #88 false)
#92 := [rewrite]: #91
#89 := (iff #70 #88)
#86 := (iff #65 true)
#73 := (and #40 #43 #49)
#76 := (not #73)
#81 := (or #76 #73)
#84 := (iff #81 true)
#85 := [rewrite]: #84
#82 := (iff #65 #81)
#79 := (iff #58 #73)
#80 := [rewrite]: #79
#77 := (iff #64 #76)
#74 := (iff #52 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#83 := [monotonicity #78 #80]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #52 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#57 := [monotonicity #45 #51]: #56
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#60 := [monotonicity #42 #57]: #59
#53 := (iff #15 #52)
#47 := (iff #12 #46)
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#63 := [monotonicity #54 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#96 := [trans #72 #94]: #95
#39 := [asserted]: #19
[mp #39 #96]: false
unsat
b35caa01ace8f0712871ad8d5740788301cd45cb 94 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#49 := (= f1 f5)
decl f4 :: S1
#10 := f4
#43 := (= f1 f4)
decl f3 :: S1
#8 := f3
#40 := (= f1 f3)
#73 := (or #40 #43 #49)
#114 := (iff #73 false)
#109 := (or false false false)
#112 := (iff #109 false)
#113 := [rewrite]: #112
#110 := (iff #73 #109)
#107 := (iff #49 false)
#97 := (not #49)
#76 := (not #73)
#82 := (or #40 #43 #49 #76)
#87 := (not #82)
#14 := (= f5 f1)
#11 := (= f4 f1)
#16 := (or #11 #14)
#9 := (= f3 f1)
#17 := (or #9 #16)
#12 := (or #9 #11)
#15 := (or #12 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#90 := (iff #19 #87)
#55 := (or #43 #49)
#58 := (or #40 #55)
#46 := (or #40 #43)
#52 := (or #46 #49)
#64 := (not #52)
#65 := (or #64 #58)
#70 := (not #65)
#88 := (iff #70 #87)
#85 := (iff #65 #82)
#79 := (or #76 #58)
#83 := (iff #79 #82)
#84 := [rewrite]: #83
#80 := (iff #65 #79)
#77 := (iff #64 #76)
#74 := (iff #52 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#86 := [trans #81 #84]: #85
#89 := [monotonicity #86]: #88
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #52 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#57 := [monotonicity #45 #51]: #56
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#60 := [monotonicity #42 #57]: #59
#53 := (iff #15 #52)
#47 := (iff #12 #46)
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#63 := [monotonicity #54 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#91 := [trans #72 #89]: #90
#39 := [asserted]: #19
#92 := [mp #39 #91]: #87
#98 := [not-or-elim #92]: #97
#108 := [iff-false #98]: #107
#105 := (iff #43 false)
#95 := (not #43)
#96 := [not-or-elim #92]: #95
#106 := [iff-false #96]: #105
#103 := (iff #40 false)
#93 := (not #40)
#94 := [not-or-elim #92]: #93
#104 := [iff-false #94]: #103
#111 := [monotonicity #104 #106 #108]: #110
#115 := [trans #111 #113]: #114
#99 := [not-or-elim #92]: #73
[mp #99 #115]: false
unsat
644cc5c7eac6cad9197e62e1430e0caf631242de 114 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#50 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#56 := (or #41 #50)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#89 := (not #44)
#88 := (not #41)
#90 := (or #88 #89)
#91 := (not #90)
#119 := (not #50)
#130 := [hypothesis]: #50
#120 := (or #56 #119)
#121 := [def-axiom]: #120
#131 := [unit-resolution #121 #130]: #56
#59 := (or #44 #50)
#126 := (or #59 #119)
#127 := [def-axiom]: #126
#132 := [unit-resolution #127 #130]: #59
#98 := (not #59)
#97 := (not #56)
#99 := (or #97 #98)
#62 := (and #56 #59)
#78 := (not #62)
#108 := (iff #78 #99)
#100 := (not #99)
#103 := (not #100)
#106 := (iff #103 #99)
#107 := [rewrite]: #106
#104 := (iff #78 #103)
#101 := (iff #62 #100)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#109 := [trans #105 #107]: #108
#47 := (and #41 #44)
#53 := (or #47 #50)
#68 := (not #53)
#69 := (or #68 #62)
#74 := (not #69)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (or #11 #14)
#9 := (= f3 f1)
#16 := (or #9 #14)
#18 := (and #16 #17)
#12 := (and #9 #11)
#15 := (or #12 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#75 := (iff #20 #74)
#72 := (iff #19 #69)
#65 := (implies #53 #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #19 #65)
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#61 := [monotonicity #46 #52]: #60
#57 := (iff #16 #56)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#58 := [monotonicity #43 #52]: #57
#64 := [monotonicity #58 #61]: #63
#54 := (iff #15 #53)
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [monotonicity #49 #52]: #54
#67 := [monotonicity #55 #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#40 := [asserted]: #20
#79 := [mp #40 #76]: #74
#80 := [not-or-elim #79]: #78
#110 := [mp #80 #109]: #99
#133 := [unit-resolution #110 #132 #131]: false
#134 := [lemma #133]: #119
#83 := (or #50 #91)
#94 := (iff #53 #83)
#84 := (or #91 #50)
#92 := (iff #84 #83)
#93 := [rewrite]: #92
#85 := (iff #53 #84)
#86 := (iff #47 #91)
#87 := [rewrite]: #86
#82 := [monotonicity #87]: #85
#95 := [trans #82 #93]: #94
#77 := [not-or-elim #79]: #53
#96 := [mp #77 #95]: #83
#135 := [unit-resolution #96 #134]: #91
#111 := (or #90 #41)
#112 := [def-axiom]: #111
#136 := [unit-resolution #112 #135]: #41
#117 := (or #56 #88)
#118 := [def-axiom]: #117
#137 := [unit-resolution #118 #136]: #56
#113 := (or #90 #44)
#114 := [def-axiom]: #113
#138 := [unit-resolution #114 #135]: #44
#124 := (or #59 #89)
#125 := [def-axiom]: #124
#139 := [unit-resolution #125 #138]: #59
[unit-resolution #110 #139 #137]: false
unsat
93bc0888dce281b8a619c094f485437218f003bd 121 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#50 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#64 := (and #41 #50)
#101 := (not #64)
#140 := (iff #101 false)
#1 := true
#135 := (not true)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #101 #135)
#133 := (iff #64 true)
#128 := (and true true)
#131 := (iff #128 true)
#132 := [rewrite]: #131
#129 := (iff #64 #128)
#126 := (iff #50 true)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#56 := (or #44 #50)
#123 := (iff #56 #50)
#118 := (or false #50)
#121 := (iff #118 #50)
#122 := [rewrite]: #121
#119 := (iff #56 #118)
#106 := (iff #44 false)
#96 := (not #44)
#47 := (or #41 #44)
#61 := (and #47 #56)
#78 := (not #61)
#87 := (or #44 #78 #64)
#90 := (not #87)
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (and #9 #14)
#18 := (or #17 #11)
#15 := (or #14 #11)
#12 := (or #9 #11)
#16 := (and #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#93 := (iff #20 #90)
#70 := (or #44 #64)
#79 := (or #78 #70)
#84 := (not #79)
#91 := (iff #84 #90)
#88 := (iff #79 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#85 := (iff #20 #84)
#82 := (iff #19 #79)
#75 := (implies #61 #70)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #19 #75)
#73 := (iff #18 #70)
#67 := (or #64 #44)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #18 #67)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#65 := (iff #17 #64)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#66 := [monotonicity #43 #52]: #65
#69 := [monotonicity #66 #46]: #68
#74 := [trans #69 #72]: #73
#62 := (iff #16 #61)
#59 := (iff #15 #56)
#53 := (or #50 #44)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #15 #53)
#55 := [monotonicity #52 #46]: #54
#60 := [trans #55 #58]: #59
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#63 := [monotonicity #49 #60]: #62
#77 := [monotonicity #63 #74]: #76
#83 := [trans #77 #81]: #82
#86 := [monotonicity #83]: #85
#94 := [trans #86 #92]: #93
#40 := [asserted]: #20
#95 := [mp #40 #94]: #90
#97 := [not-or-elim #95]: #96
#107 := [iff-false #97]: #106
#120 := [monotonicity #107]: #119
#124 := [trans #120 #122]: #123
#98 := [not-or-elim #95]: #61
#100 := [and-elim #98]: #56
#125 := [mp #100 #124]: #50
#127 := [iff-true #125]: #126
#116 := (iff #41 true)
#113 := (iff #47 #41)
#108 := (or #41 false)
#111 := (iff #108 #41)
#112 := [rewrite]: #111
#109 := (iff #47 #108)
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#99 := [and-elim #98]: #47
#115 := [mp #99 #114]: #41
#117 := [iff-true #115]: #116
#130 := [monotonicity #117 #127]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134]: #136
#141 := [trans #137 #139]: #140
#102 := [not-or-elim #95]: #101
[mp #102 #141]: false
unsat
25b40c8c6dac4ff528a28853107efdd6966efb87 110 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#44 := (= f1 f4)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#47 := (or #41 #44)
#131 := (iff #47 false)
#126 := (or false false)
#129 := (iff #126 false)
#130 := [rewrite]: #129
#127 := (iff #47 #126)
#124 := (iff #44 false)
#120 := (not #44)
decl f5 :: S1
#13 := f5
#50 := (= f1 f5)
#59 := (and #44 #50)
#91 := (not #59)
#121 := (iff #91 #120)
#118 := (iff #59 #44)
#1 := true
#113 := (and #44 true)
#116 := (iff #113 #44)
#117 := [rewrite]: #116
#114 := (iff #59 #113)
#98 := (iff #50 true)
#53 := (and #47 #50)
#56 := (and #41 #50)
#68 := (not #53)
#77 := (or #68 #56 #59)
#80 := (not #77)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (and #11 #14)
#9 := (= f3 f1)
#16 := (and #9 #14)
#18 := (or #16 #17)
#12 := (or #9 #11)
#15 := (and #12 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#83 := (iff #20 #80)
#62 := (or #56 #59)
#69 := (or #68 #62)
#74 := (not #69)
#81 := (iff #74 #80)
#78 := (iff #69 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#75 := (iff #20 #74)
#72 := (iff #19 #69)
#65 := (implies #53 #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #19 #65)
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#61 := [monotonicity #46 #52]: #60
#57 := (iff #16 #56)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#58 := [monotonicity #43 #52]: #57
#64 := [monotonicity #58 #61]: #63
#54 := (iff #15 #53)
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [monotonicity #49 #52]: #54
#67 := [monotonicity #55 #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#84 := [trans #76 #82]: #83
#40 := [asserted]: #20
#85 := [mp #40 #84]: #80
#86 := [not-or-elim #85]: #53
#88 := [and-elim #86]: #50
#99 := [iff-true #88]: #98
#115 := [monotonicity #99]: #114
#119 := [trans #115 #117]: #118
#122 := [monotonicity #119]: #121
#92 := [not-or-elim #85]: #91
#123 := [mp #92 #122]: #120
#125 := [iff-false #123]: #124
#111 := (iff #41 false)
#107 := (not #41)
#89 := (not #56)
#108 := (iff #89 #107)
#105 := (iff #56 #41)
#100 := (and #41 true)
#103 := (iff #100 #41)
#104 := [rewrite]: #103
#101 := (iff #56 #100)
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#109 := [monotonicity #106]: #108
#90 := [not-or-elim #85]: #89
#110 := [mp #90 #109]: #107
#112 := [iff-false #110]: #111
#128 := [monotonicity #112 #125]: #127
#132 := [trans #128 #130]: #131
#87 := [and-elim #86]: #47
[mp #87 #132]: false
unsat
3be7256d2b13897c8029d9190e000fab6c7cea0c 127 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#50 := (= f1 f5)
#94 := (not #50)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#99 := (not #44)
#95 := (or #99 #94)
#92 := (not #95)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#98 := (not #41)
#100 := (or #98 #99)
#101 := (not #100)
#143 := [hypothesis]: #101
#133 := (or #100 #44)
#134 := [def-axiom]: #133
#144 := [unit-resolution #134 #143]: #44
#64 := (or #41 #50)
#131 := (or #100 #41)
#132 := [def-axiom]: #131
#145 := [unit-resolution #132 #143]: #41
#137 := (or #64 #98)
#138 := [def-axiom]: #137
#146 := [unit-resolution #138 #145]: #64
#112 := (not #64)
#113 := (or #99 #112)
#70 := (and #44 #64)
#88 := (not #70)
#122 := (iff #88 #113)
#114 := (not #113)
#117 := (not #114)
#120 := (iff #117 #113)
#121 := [rewrite]: #120
#118 := (iff #88 #117)
#115 := (iff #70 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#123 := [trans #119 #121]: #122
#56 := (and #44 #50)
#47 := (and #41 #44)
#61 := (or #47 #56)
#78 := (not #61)
#79 := (or #78 #70)
#84 := (not #79)
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (or #9 #14)
#18 := (and #17 #11)
#15 := (and #14 #11)
#12 := (and #9 #11)
#16 := (or #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#85 := (iff #20 #84)
#82 := (iff #19 #79)
#75 := (implies #61 #70)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #19 #75)
#73 := (iff #18 #70)
#67 := (and #64 #44)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #18 #67)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#65 := (iff #17 #64)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#66 := [monotonicity #43 #52]: #65
#69 := [monotonicity #66 #46]: #68
#74 := [trans #69 #72]: #73
#62 := (iff #16 #61)
#59 := (iff #15 #56)
#53 := (and #50 #44)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #15 #53)
#55 := [monotonicity #52 #46]: #54
#60 := [trans #55 #58]: #59
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#63 := [monotonicity #49 #60]: #62
#77 := [monotonicity #63 #74]: #76
#83 := [trans #77 #81]: #82
#86 := [monotonicity #83]: #85
#40 := [asserted]: #20
#89 := [mp #40 #86]: #84
#90 := [not-or-elim #89]: #88
#124 := [mp #90 #123]: #113
#147 := [unit-resolution #124 #146 #144]: false
#148 := [lemma #147]: #100
#106 := (or #92 #101)
#109 := (iff #61 #106)
#103 := (or #101 #92)
#107 := (iff #103 #106)
#108 := [rewrite]: #107
#104 := (iff #61 #103)
#93 := (iff #56 #92)
#102 := [rewrite]: #93
#96 := (iff #47 #101)
#97 := [rewrite]: #96
#105 := [monotonicity #97 #102]: #104
#110 := [trans #105 #108]: #109
#87 := [not-or-elim #89]: #61
#111 := [mp #87 #110]: #106
#149 := [unit-resolution #111 #148]: #92
#127 := (or #95 #50)
#128 := [def-axiom]: #127
#150 := [unit-resolution #128 #149]: #50
#125 := (or #95 #44)
#126 := [def-axiom]: #125
#151 := [unit-resolution #126 #149]: #44
#152 := [unit-resolution #124 #151]: #112
#139 := (or #64 #94)
#140 := [def-axiom]: #139
[unit-resolution #140 #152 #150]: false
unsat
e4d3d98d52d5e02451d4a933a7ae69eccde69dc7 66 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#36 := (= f1 f3)
decl f4 :: S1
#10 := f4
#39 := (= f1 f4)
#45 := (not #36)
#46 := (or #45 #39)
#54 := (not #46)
#55 := (or #36 #54)
#85 := (iff #55 #54)
#80 := (or false #54)
#83 := (iff #80 #54)
#84 := [rewrite]: #83
#81 := (iff #55 #80)
#78 := (iff #36 false)
#63 := (not #55)
#64 := (or #36 #63)
#69 := (not #64)
#9 := (= f3 f1)
#11 := (= f4 f1)
#12 := (implies #9 #11)
#13 := (implies #12 #9)
#14 := (implies #13 #9)
#15 := (not #14)
#70 := (iff #15 #69)
#67 := (iff #14 #64)
#60 := (implies #55 #36)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #14 #60)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#58 := (iff #13 #55)
#51 := (implies #46 #36)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #13 #51)
#49 := (iff #12 #46)
#42 := (implies #36 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #38 #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50 #38]: #52
#59 := [trans #53 #57]: #58
#62 := [monotonicity #59 #38]: #61
#68 := [trans #62 #66]: #67
#71 := [monotonicity #68]: #70
#35 := [asserted]: #15
#74 := [mp #35 #71]: #69
#72 := [not-or-elim #74]: #45
#79 := [iff-false #72]: #78
#82 := [monotonicity #79]: #81
#86 := [trans #82 #84]: #85
#73 := [not-or-elim #74]: #55
#87 := [mp #73 #86]: #54
#76 := [not-or-elim #87]: #36
[unit-resolution #72 #76]: false
unsat
19c46603d78602c88e567210d895a32ffee713db 157 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#56 := (= f1 f5)
#62 := (not #56)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#63 := (or #44 #62)
#102 := (not #63)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#50 := (not #41)
#51 := (or #50 #44)
#120 := (not #44)
#101 := (not #51)
#155 := [hypothesis]: #101
#130 := (or #51 #120)
#131 := [def-axiom]: #130
#156 := [unit-resolution #131 #155]: #120
#71 := (or #41 #56)
#128 := (or #51 #41)
#129 := [def-axiom]: #128
#157 := [unit-resolution #129 #155]: #41
#114 := (or #71 #50)
#115 := [def-axiom]: #114
#158 := [unit-resolution #115 #157]: #71
#77 := (not #71)
#78 := (or #44 #77)
#103 := (or #101 #102)
#140 := (or #103 #51)
#141 := [def-axiom]: #140
#159 := [unit-resolution #141 #155]: #103
#104 := (not #103)
#149 := (or #78 #104)
#110 := (iff #78 #103)
#68 := (and #51 #63)
#89 := (not #68)
#90 := (iff #78 #89)
#111 := (iff #90 #110)
#108 := (iff #89 #103)
#96 := (not #104)
#106 := (iff #96 #103)
#107 := [rewrite]: #106
#98 := (iff #89 #96)
#99 := (iff #68 #104)
#100 := [rewrite]: #99
#105 := [monotonicity #100]: #98
#109 := [trans #105 #107]: #108
#112 := [monotonicity #109]: #111
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (or #9 #14)
#18 := (implies #17 #11)
#15 := (implies #14 #11)
#12 := (implies #9 #11)
#16 := (and #12 #15)
#19 := (iff #16 #18)
#20 := (not #19)
#93 := (iff #20 #90)
#83 := (iff #68 #78)
#86 := (not #83)
#91 := (iff #86 #90)
#92 := [rewrite]: #91
#87 := (iff #20 #86)
#84 := (iff #19 #83)
#81 := (iff #18 #78)
#74 := (implies #71 #44)
#79 := (iff #74 #78)
#80 := [rewrite]: #79
#75 := (iff #18 #74)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#72 := (iff #17 #71)
#57 := (iff #14 #56)
#58 := [rewrite]: #57
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#73 := [monotonicity #43 #58]: #72
#76 := [monotonicity #73 #46]: #75
#82 := [trans #76 #80]: #81
#69 := (iff #16 #68)
#66 := (iff #15 #63)
#59 := (implies #56 #44)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #15 #59)
#61 := [monotonicity #58 #46]: #60
#67 := [trans #61 #65]: #66
#54 := (iff #12 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#70 := [monotonicity #55 #67]: #69
#85 := [monotonicity #70 #82]: #84
#88 := [monotonicity #85]: #87
#94 := [trans #88 #92]: #93
#40 := [asserted]: #20
#97 := [mp #40 #94]: #90
#113 := [mp #97 #112]: #110
#146 := (not #110)
#147 := (or #78 #104 #146)
#148 := [def-axiom]: #147
#150 := [unit-resolution #148 #113]: #149
#160 := [unit-resolution #150 #159]: #78
#125 := (not #78)
#126 := (or #125 #44 #77)
#127 := [def-axiom]: #126
#161 := [unit-resolution #127 #160 #158 #156]: false
#162 := [lemma #161]: #51
#163 := [hypothesis]: #125
#121 := (or #78 #120)
#122 := [def-axiom]: #121
#164 := [unit-resolution #122 #163]: #120
#165 := [unit-resolution #150 #163]: #104
#142 := (or #103 #63)
#143 := [def-axiom]: #142
#166 := [unit-resolution #143 #165]: #63
#123 := (or #78 #71)
#124 := [def-axiom]: #123
#167 := [unit-resolution #124 #163]: #71
#132 := (or #101 #50 #44)
#133 := [def-axiom]: #132
#168 := [unit-resolution #133 #164 #162]: #50
#118 := (or #77 #41 #56)
#119 := [def-axiom]: #118
#169 := [unit-resolution #119 #168 #167]: #56
#138 := (or #102 #44 #62)
#139 := [def-axiom]: #138
#170 := [unit-resolution #139 #169 #166 #164]: false
#171 := [lemma #170]: #78
#153 := (or #125 #103)
#151 := (or #125 #103 #146)
#152 := [def-axiom]: #151
#154 := [unit-resolution #152 #113]: #153
#172 := [unit-resolution #154 #171]: #103
#144 := (or #104 #101 #102)
#145 := [def-axiom]: #144
#173 := [unit-resolution #145 #172 #162]: #102
#136 := (or #63 #56)
#137 := [def-axiom]: #136
#174 := [unit-resolution #137 #173]: #56
#134 := (or #63 #120)
#135 := [def-axiom]: #134
#175 := [unit-resolution #135 #173]: #120
#176 := [unit-resolution #127 #175 #171]: #77
#116 := (or #71 #62)
#117 := [def-axiom]: #116
[unit-resolution #117 #176 #174]: false
unsat
9ca0ea6fd7baaf9ab5e21ea28520ab880b00ee9a 114 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#49 := (= f1 f5)
decl f4 :: S1
#10 := f4
#43 := (= f1 f4)
#64 := (not #43)
decl f3 :: S1
#8 := f3
#40 := (= f1 f3)
#73 := (not #40)
#91 := (or #73 #64 #49)
#46 := (and #40 #43)
#55 := (not #46)
#56 := (or #55 #49)
#85 := (not #56)
#97 := (iff #85 #91)
#132 := (iff #97 false)
#124 := (not #91)
#127 := (iff #124 #91)
#130 := (iff #127 false)
#131 := [rewrite]: #130
#128 := (iff #97 #127)
#125 := (iff #85 #124)
#122 := (iff #56 #91)
#110 := (or #73 #64)
#117 := (or #110 #49)
#120 := (iff #117 #91)
#121 := [rewrite]: #120
#118 := (iff #56 #117)
#115 := (iff #55 #110)
#111 := (not #110)
#108 := (not #111)
#107 := (iff #108 #110)
#114 := [rewrite]: #107
#109 := (iff #55 #108)
#112 := (iff #46 #111)
#113 := [rewrite]: #112
#106 := [monotonicity #113]: #109
#116 := [trans #106 #114]: #115
#119 := [monotonicity #116]: #118
#123 := [trans #119 #121]: #122
#126 := [monotonicity #123]: #125
#129 := [monotonicity #126]: #128
#133 := [trans #129 #131]: #132
#14 := (= f5 f1)
#11 := (= f4 f1)
#16 := (implies #11 #14)
#9 := (= f3 f1)
#17 := (implies #9 #16)
#12 := (and #9 #11)
#15 := (implies #12 #14)
#18 := (iff #15 #17)
#19 := (not #18)
#102 := (iff #19 #97)
#65 := (or #64 #49)
#74 := (or #73 #65)
#86 := (iff #74 #85)
#100 := (iff #86 #97)
#94 := (iff #91 #85)
#98 := (iff #94 #97)
#99 := [rewrite]: #98
#95 := (iff #86 #94)
#92 := (iff #74 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#101 := [trans #96 #99]: #100
#89 := (iff #19 #86)
#79 := (iff #56 #74)
#82 := (not #79)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #19 #82)
#80 := (iff #18 #79)
#77 := (iff #17 #74)
#70 := (implies #40 #65)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #17 #70)
#68 := (iff #16 #65)
#61 := (implies #43 #49)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #16 #61)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#63 := [monotonicity #45 #51]: #62
#69 := [trans #63 #67]: #68
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#72 := [monotonicity #42 #69]: #71
#78 := [trans #72 #76]: #77
#59 := (iff #15 #56)
#52 := (implies #46 #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #15 #52)
#47 := (iff #12 #46)
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#60 := [trans #54 #58]: #59
#81 := [monotonicity #60 #78]: #80
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#103 := [trans #90 #101]: #102
#39 := [asserted]: #19
#104 := [mp #39 #103]: #97
[mp #104 #133]: false
unsat
04315913425b7fdaa9756cb775e4e6e81e279b08 198 0
#2 := false
decl f5 :: S1
#14 := f5
decl f1 :: S1
#4 := f1
#68 := (= f1 f5)
decl f3 :: S1
#8 := f3
#44 := (= f1 f3)
#89 := (and #44 #68)
#95 := (not #89)
decl f4 :: S1
#10 := f4
#47 := (= f1 f4)
#96 := (or #47 #95)
#217 := (iff #96 false)
#212 := (or false false)
#215 := (iff #212 false)
#216 := [rewrite]: #215
#213 := (iff #96 #212)
#210 := (iff #95 false)
#1 := true
#205 := (not true)
#208 := (iff #205 false)
#209 := [rewrite]: #208
#206 := (iff #95 #205)
#203 := (iff #89 true)
#198 := (and true true)
#201 := (iff #198 true)
#202 := [rewrite]: #201
#199 := (iff #89 #198)
#196 := (iff #68 true)
#74 := (not #68)
#75 := (or #47 #74)
#83 := (not #75)
#84 := (or #47 #83)
#193 := (iff #84 #68)
#188 := (or false #68)
#191 := (iff #188 #68)
#192 := [rewrite]: #191
#189 := (iff #84 #188)
#186 := (iff #83 #68)
#181 := (not #74)
#184 := (iff #181 #68)
#185 := [rewrite]: #184
#182 := (iff #83 #181)
#179 := (iff #75 #74)
#174 := (or false #74)
#177 := (iff #174 #74)
#178 := [rewrite]: #177
#175 := (iff #75 #174)
#148 := (iff #47 false)
#140 := (not #47)
#104 := (not #96)
#113 := (not #84)
#53 := (not #44)
#54 := (or #53 #47)
#62 := (not #54)
#63 := (or #47 #62)
#122 := (not #63)
#131 := (or #47 #122 #113 #104)
#134 := (not #131)
#11 := (= f4 f1)
#15 := (= f5 f1)
#9 := (= f3 f1)
#18 := (and #9 #15)
#19 := (implies #18 #11)
#20 := (implies #19 #11)
#16 := (implies #15 #11)
#17 := (implies #16 #11)
#21 := (implies #17 #20)
#12 := (implies #9 #11)
#13 := (implies #12 #11)
#22 := (implies #13 #21)
#23 := (not #22)
#137 := (iff #23 #134)
#105 := (or #47 #104)
#114 := (or #113 #105)
#123 := (or #122 #114)
#128 := (not #123)
#135 := (iff #128 #134)
#132 := (iff #123 #131)
#133 := [rewrite]: #132
#136 := [monotonicity #133]: #135
#129 := (iff #23 #128)
#126 := (iff #22 #123)
#119 := (implies #63 #114)
#124 := (iff #119 #123)
#125 := [rewrite]: #124
#120 := (iff #22 #119)
#117 := (iff #21 #114)
#110 := (implies #84 #105)
#115 := (iff #110 #114)
#116 := [rewrite]: #115
#111 := (iff #21 #110)
#108 := (iff #20 #105)
#101 := (implies #96 #47)
#106 := (iff #101 #105)
#107 := [rewrite]: #106
#102 := (iff #20 #101)
#48 := (iff #11 #47)
#49 := [rewrite]: #48
#99 := (iff #19 #96)
#92 := (implies #89 #47)
#97 := (iff #92 #96)
#98 := [rewrite]: #97
#93 := (iff #19 #92)
#90 := (iff #18 #89)
#69 := (iff #15 #68)
#70 := [rewrite]: #69
#45 := (iff #9 #44)
#46 := [rewrite]: #45
#91 := [monotonicity #46 #70]: #90
#94 := [monotonicity #91 #49]: #93
#100 := [trans #94 #98]: #99
#103 := [monotonicity #100 #49]: #102
#109 := [trans #103 #107]: #108
#87 := (iff #17 #84)
#80 := (implies #75 #47)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #17 #80)
#78 := (iff #16 #75)
#71 := (implies #68 #47)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #16 #71)
#73 := [monotonicity #70 #49]: #72
#79 := [trans #73 #77]: #78
#82 := [monotonicity #79 #49]: #81
#88 := [trans #82 #86]: #87
#112 := [monotonicity #88 #109]: #111
#118 := [trans #112 #116]: #117
#66 := (iff #13 #63)
#59 := (implies #54 #47)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #13 #59)
#57 := (iff #12 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #12 #50)
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58 #49]: #60
#67 := [trans #61 #65]: #66
#121 := [monotonicity #67 #118]: #120
#127 := [trans #121 #125]: #126
#130 := [monotonicity #127]: #129
#138 := [trans #130 #136]: #137
#43 := [asserted]: #23
#139 := [mp #43 #138]: #134
#141 := [not-or-elim #139]: #140
#149 := [iff-false #141]: #148
#176 := [monotonicity #149]: #175
#180 := [trans #176 #178]: #179
#183 := [monotonicity #180]: #182
#187 := [trans #183 #185]: #186
#190 := [monotonicity #149 #187]: #189
#194 := [trans #190 #192]: #193
#143 := [not-or-elim #139]: #84
#195 := [mp #143 #194]: #68
#197 := [iff-true #195]: #196
#172 := (iff #44 true)
#169 := (iff #63 #44)
#164 := (or false #44)
#167 := (iff #164 #44)
#168 := [rewrite]: #167
#165 := (iff #63 #164)
#162 := (iff #62 #44)
#157 := (not #53)
#160 := (iff #157 #44)
#161 := [rewrite]: #160
#158 := (iff #62 #157)
#155 := (iff #54 #53)
#150 := (or #53 false)
#153 := (iff #150 #53)
#154 := [rewrite]: #153
#151 := (iff #54 #150)
#152 := [monotonicity #149]: #151
#156 := [trans #152 #154]: #155
#159 := [monotonicity #156]: #158
#163 := [trans #159 #161]: #162
#166 := [monotonicity #149 #163]: #165
#170 := [trans #166 #168]: #169
#142 := [not-or-elim #139]: #63
#171 := [mp #142 #170]: #44
#173 := [iff-true #171]: #172
#200 := [monotonicity #173 #197]: #199
#204 := [trans #200 #202]: #203
#207 := [monotonicity #204]: #206
#211 := [trans #207 #209]: #210
#214 := [monotonicity #149 #211]: #213
#218 := [trans #214 #216]: #217
#144 := [not-or-elim #139]: #96
[mp #144 #218]: false
unsat
a3110cebbaf91f1580f58fbd5e9552fa7ad95997 134 0
#2 := false
decl f5 :: S1
#14 := f5
decl f1 :: S1
#4 := f1
#62 := (= f1 f5)
decl f3 :: S1
#8 := f3
#44 := (= f1 f3)
#77 := (and #44 #62)
#83 := (not #77)
decl f4 :: S1
#10 := f4
#47 := (= f1 f4)
#84 := (or #47 #83)
#153 := (iff #84 false)
#148 := (or false false)
#151 := (iff #148 false)
#152 := [rewrite]: #151
#149 := (iff #84 #148)
#146 := (iff #83 false)
#1 := true
#141 := (not true)
#144 := (iff #141 false)
#145 := [rewrite]: #144
#142 := (iff #83 #141)
#139 := (iff #77 true)
#134 := (and true true)
#137 := (iff #134 true)
#138 := [rewrite]: #137
#135 := (iff #77 #134)
#132 := (iff #62 true)
#89 := (not #84)
#68 := (not #62)
#53 := (not #44)
#111 := (or #53 #47 #68 #89)
#114 := (not #111)
#11 := (= f4 f1)
#15 := (= f5 f1)
#9 := (= f3 f1)
#18 := (and #9 #15)
#19 := (implies #18 #11)
#20 := (not #19)
#16 := (implies #15 #11)
#17 := (not #16)
#21 := (implies #17 #20)
#12 := (implies #9 #11)
#13 := (not #12)
#22 := (implies #13 #21)
#23 := (not #22)
#117 := (iff #23 #114)
#69 := (or #47 #68)
#95 := (or #69 #89)
#54 := (or #53 #47)
#103 := (or #54 #95)
#108 := (not #103)
#115 := (iff #108 #114)
#112 := (iff #103 #111)
#113 := [rewrite]: #112
#116 := [monotonicity #113]: #115
#109 := (iff #23 #108)
#106 := (iff #22 #103)
#59 := (not #54)
#100 := (implies #59 #95)
#104 := (iff #100 #103)
#105 := [rewrite]: #104
#101 := (iff #22 #100)
#98 := (iff #21 #95)
#74 := (not #69)
#92 := (implies #74 #89)
#96 := (iff #92 #95)
#97 := [rewrite]: #96
#93 := (iff #21 #92)
#90 := (iff #20 #89)
#87 := (iff #19 #84)
#80 := (implies #77 #47)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #19 #80)
#48 := (iff #11 #47)
#49 := [rewrite]: #48
#78 := (iff #18 #77)
#63 := (iff #15 #62)
#64 := [rewrite]: #63
#45 := (iff #9 #44)
#46 := [rewrite]: #45
#79 := [monotonicity #46 #64]: #78
#82 := [monotonicity #79 #49]: #81
#88 := [trans #82 #86]: #87
#91 := [monotonicity #88]: #90
#75 := (iff #17 #74)
#72 := (iff #16 #69)
#65 := (implies #62 #47)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #16 #65)
#67 := [monotonicity #64 #49]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#94 := [monotonicity #76 #91]: #93
#99 := [trans #94 #97]: #98
#60 := (iff #13 #59)
#57 := (iff #12 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #12 #50)
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58]: #60
#102 := [monotonicity #61 #99]: #101
#107 := [trans #102 #105]: #106
#110 := [monotonicity #107]: #109
#118 := [trans #110 #116]: #117
#43 := [asserted]: #23
#119 := [mp #43 #118]: #114
#123 := [not-or-elim #119]: #62
#133 := [iff-true #123]: #132
#128 := (iff #44 true)
#120 := [not-or-elim #119]: #44
#129 := [iff-true #120]: #128
#136 := [monotonicity #129 #133]: #135
#140 := [trans #136 #138]: #139
#143 := [monotonicity #140]: #142
#147 := [trans #143 #145]: #146
#130 := (iff #47 false)
#121 := (not #47)
#122 := [not-or-elim #119]: #121
#131 := [iff-false #122]: #130
#150 := [monotonicity #131 #147]: #149
#154 := [trans #150 #152]: #153
#124 := [not-or-elim #119]: #84
[mp #124 #154]: false
unsat
d522bffbdc6af87260d2b830a506e89f66c0f6c5 162 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#56 := (not #41)
#73 := (or #56 #47)
#100 := (not #73)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#65 := (or #56 #44)
#99 := (not #65)
#101 := (or #99 #100)
#96 := (not #47)
#94 := (not #44)
#103 := (or #94 #96)
#104 := (not #103)
#107 := (or #56 #104)
#110 := (not #107)
#102 := (not #101)
#161 := [hypothesis]: #102
#155 := (or #101 #110)
#116 := (iff #101 #107)
#50 := (and #44 #47)
#57 := (or #56 #50)
#87 := (not #57)
#78 := (and #65 #73)
#88 := (iff #78 #87)
#119 := (iff #88 #116)
#113 := (iff #102 #110)
#117 := (iff #113 #116)
#118 := [rewrite]: #117
#114 := (iff #88 #113)
#111 := (iff #87 #110)
#108 := (iff #57 #107)
#105 := (iff #50 #104)
#106 := [rewrite]: #105
#109 := [monotonicity #106]: #108
#112 := [monotonicity #109]: #111
#97 := (iff #78 #102)
#98 := [rewrite]: #97
#115 := [monotonicity #98 #112]: #114
#120 := [trans #115 #118]: #119
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (and #16 #17)
#14 := (and #11 #13)
#15 := (implies #9 #14)
#19 := (iff #15 #18)
#20 := (not #19)
#91 := (iff #20 #88)
#81 := (iff #57 #78)
#84 := (not #81)
#89 := (iff #84 #88)
#90 := [rewrite]: #89
#85 := (iff #20 #84)
#82 := (iff #19 #81)
#79 := (iff #18 #78)
#76 := (iff #17 #73)
#70 := (implies #41 #47)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #17 #70)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#72 := [monotonicity #43 #49]: #71
#77 := [trans #72 #75]: #76
#68 := (iff #16 #65)
#62 := (implies #41 #44)
#66 := (iff #62 #65)
#67 := [rewrite]: #66
#63 := (iff #16 #62)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#64 := [monotonicity #43 #46]: #63
#69 := [trans #64 #67]: #68
#80 := [monotonicity #69 #77]: #79
#60 := (iff #15 #57)
#53 := (implies #41 #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [monotonicity #46 #49]: #51
#55 := [monotonicity #43 #52]: #54
#61 := [trans #55 #59]: #60
#83 := [monotonicity #61 #80]: #82
#86 := [monotonicity #83]: #85
#92 := [trans #86 #90]: #91
#40 := [asserted]: #20
#95 := [mp #40 #92]: #88
#121 := [mp #95 #120]: #116
#152 := (not #116)
#153 := (or #101 #110 #152)
#154 := [def-axiom]: #153
#156 := [unit-resolution #154 #121]: #155
#162 := [unit-resolution #156 #161]: #110
#148 := (or #107 #103)
#149 := [def-axiom]: #148
#163 := [unit-resolution #149 #162]: #103
#134 := (or #101 #65)
#135 := [def-axiom]: #134
#164 := [unit-resolution #135 #161]: #65
#146 := (or #107 #41)
#147 := [def-axiom]: #146
#165 := [unit-resolution #147 #162]: #41
#126 := (or #99 #56 #44)
#127 := [def-axiom]: #126
#166 := [unit-resolution #127 #165 #164]: #44
#136 := (or #101 #73)
#137 := [def-axiom]: #136
#167 := [unit-resolution #137 #161]: #73
#132 := (or #100 #56 #47)
#133 := [def-axiom]: #132
#168 := [unit-resolution #133 #165 #167]: #47
#144 := (or #104 #94 #96)
#145 := [def-axiom]: #144
#169 := [unit-resolution #145 #168 #166 #163]: false
#170 := [lemma #169]: #101
#159 := (or #102 #107)
#157 := (or #102 #107 #152)
#158 := [def-axiom]: #157
#160 := [unit-resolution #158 #121]: #159
#176 := [unit-resolution #160 #170]: #107
#171 := [hypothesis]: #56
#122 := (or #65 #41)
#123 := [def-axiom]: #122
#172 := [unit-resolution #123 #171]: #65
#128 := (or #73 #41)
#129 := [def-axiom]: #128
#173 := [unit-resolution #129 #171]: #73
#138 := (or #102 #99 #100)
#139 := [def-axiom]: #138
#174 := [unit-resolution #139 #173 #172 #170]: false
#175 := [lemma #174]: #41
#150 := (or #110 #56 #104)
#151 := [def-axiom]: #150
#177 := [unit-resolution #151 #175 #176]: #104
#140 := (or #103 #44)
#141 := [def-axiom]: #140
#178 := [unit-resolution #141 #177]: #44
#124 := (or #65 #94)
#125 := [def-axiom]: #124
#179 := [unit-resolution #125 #178]: #65
#142 := (or #103 #47)
#143 := [def-axiom]: #142
#180 := [unit-resolution #143 #177]: #47
#130 := (or #73 #96)
#131 := [def-axiom]: #130
#181 := [unit-resolution #131 #180]: #73
[unit-resolution #139 #181 #179 #170]: false
unsat
f29fbcc0ceaf6bd7f24274c3de5b8c954ec638b1 54 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (implies #11 #9)
#13 := (implies #9 #12)
#14 := (not #13)
#71 := (iff #14 false)
#38 := (= f1 f4)
#44 := (not #38)
#35 := (= f1 f3)
#45 := (or #35 #44)
#53 := (not #35)
#54 := (or #53 #45)
#59 := (not #54)
#69 := (iff #59 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #59 #64)
#62 := (iff #54 true)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#60 := (iff #14 #59)
#57 := (iff #13 #54)
#50 := (implies #35 #45)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #13 #50)
#48 := (iff #12 #45)
#41 := (implies #38 #35)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40 #37]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #37 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58]: #60
#72 := [trans #61 #70]: #71
#34 := [asserted]: #14
[mp #34 #72]: false
unsat
d58edad648d31ef919b96bbaf6580f1a23405517 144 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#53 := (not #44)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#62 := (not #41)
#105 := (or #62 #53 #47)
#163 := (iff #105 false)
#158 := (or false false false)
#161 := (iff #158 false)
#162 := [rewrite]: #161
#159 := (iff #105 #158)
#135 := (iff #47 false)
#126 := (not #47)
#108 := (not #105)
#71 := (or #62 #44)
#87 := (not #71)
#114 := (or #62 #47 #87 #108)
#119 := (not #114)
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (implies #16 #17)
#14 := (implies #11 #13)
#15 := (implies #9 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#122 := (iff #20 #119)
#79 := (or #62 #47)
#88 := (or #87 #79)
#54 := (or #53 #47)
#63 := (or #62 #54)
#96 := (not #63)
#97 := (or #96 #88)
#102 := (not #97)
#120 := (iff #102 #119)
#117 := (iff #97 #114)
#111 := (or #108 #88)
#115 := (iff #111 #114)
#116 := [rewrite]: #115
#112 := (iff #97 #111)
#109 := (iff #96 #108)
#106 := (iff #63 #105)
#107 := [rewrite]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#118 := [trans #113 #116]: #117
#121 := [monotonicity #118]: #120
#103 := (iff #20 #102)
#100 := (iff #19 #97)
#93 := (implies #63 #88)
#98 := (iff #93 #97)
#99 := [rewrite]: #98
#94 := (iff #19 #93)
#91 := (iff #18 #88)
#84 := (implies #71 #79)
#89 := (iff #84 #88)
#90 := [rewrite]: #89
#85 := (iff #18 #84)
#82 := (iff #17 #79)
#76 := (implies #41 #47)
#80 := (iff #76 #79)
#81 := [rewrite]: #80
#77 := (iff #17 #76)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#78 := [monotonicity #43 #49]: #77
#83 := [trans #78 #81]: #82
#74 := (iff #16 #71)
#68 := (implies #41 #44)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #16 #68)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#70 := [monotonicity #43 #46]: #69
#75 := [trans #70 #73]: #74
#86 := [monotonicity #75 #83]: #85
#92 := [trans #86 #90]: #91
#66 := (iff #15 #63)
#59 := (implies #41 #54)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #15 #59)
#57 := (iff #14 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #43 #58]: #60
#67 := [trans #61 #65]: #66
#95 := [monotonicity #67 #92]: #94
#101 := [trans #95 #99]: #100
#104 := [monotonicity #101]: #103
#123 := [trans #104 #121]: #122
#40 := [asserted]: #20
#124 := [mp #40 #123]: #119
#127 := [not-or-elim #124]: #126
#136 := [iff-false #127]: #135
#156 := (iff #53 false)
#1 := true
#137 := (not true)
#140 := (iff #137 false)
#141 := [rewrite]: #140
#154 := (iff #53 #137)
#152 := (iff #44 true)
#149 := (iff #71 #44)
#144 := (or false #44)
#147 := (iff #144 #44)
#148 := [rewrite]: #147
#145 := (iff #71 #144)
#142 := (iff #62 false)
#138 := (iff #62 #137)
#133 := (iff #41 true)
#125 := [not-or-elim #124]: #41
#134 := [iff-true #125]: #133
#139 := [monotonicity #134]: #138
#143 := [trans #139 #141]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#128 := [not-or-elim #124]: #71
#151 := [mp #128 #150]: #44
#153 := [iff-true #151]: #152
#155 := [monotonicity #153]: #154
#157 := [trans #155 #141]: #156
#160 := [monotonicity #143 #157 #136]: #159
#164 := [trans #160 #162]: #163
#129 := [not-or-elim #124]: #105
[mp #129 #164]: false
unsat
00d66332779f959f5155f96744316681d812ae6d 121 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#56 := (= f1 f5)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#50 := (not #41)
#93 := (or #50 #44 #56)
#140 := (iff #93 false)
#135 := (or false false false)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #93 #135)
#126 := (iff #56 false)
#116 := (not #56)
#96 := (not #93)
#102 := (or #50 #44 #56 #96)
#107 := (not #102)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (or #11 #14)
#9 := (= f3 f1)
#18 := (implies #9 #17)
#15 := (implies #9 #14)
#12 := (implies #9 #11)
#16 := (or #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#110 := (iff #20 #107)
#70 := (or #44 #56)
#76 := (or #50 #70)
#62 := (or #50 #56)
#51 := (or #50 #44)
#67 := (or #51 #62)
#84 := (not #67)
#85 := (or #84 #76)
#90 := (not #85)
#108 := (iff #90 #107)
#105 := (iff #85 #102)
#99 := (or #96 #76)
#103 := (iff #99 #102)
#104 := [rewrite]: #103
#100 := (iff #85 #99)
#97 := (iff #84 #96)
#94 := (iff #67 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#106 := [trans #101 #104]: #105
#109 := [monotonicity #106]: #108
#91 := (iff #20 #90)
#88 := (iff #19 #85)
#81 := (implies #67 #76)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #19 #81)
#79 := (iff #18 #76)
#73 := (implies #41 #70)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #18 #73)
#71 := (iff #17 #70)
#57 := (iff #14 #56)
#58 := [rewrite]: #57
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#72 := [monotonicity #46 #58]: #71
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#75 := [monotonicity #43 #72]: #74
#80 := [trans #75 #78]: #79
#68 := (iff #16 #67)
#65 := (iff #15 #62)
#59 := (implies #41 #56)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#61 := [monotonicity #43 #58]: #60
#66 := [trans #61 #64]: #65
#54 := (iff #12 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#69 := [monotonicity #55 #66]: #68
#83 := [monotonicity #69 #80]: #82
#89 := [trans #83 #87]: #88
#92 := [monotonicity #89]: #91
#111 := [trans #92 #109]: #110
#40 := [asserted]: #20
#112 := [mp #40 #111]: #107
#117 := [not-or-elim #112]: #116
#127 := [iff-false #117]: #126
#124 := (iff #44 false)
#114 := (not #44)
#115 := [not-or-elim #112]: #114
#125 := [iff-false #115]: #124
#133 := (iff #50 false)
#1 := true
#128 := (not true)
#131 := (iff #128 false)
#132 := [rewrite]: #131
#129 := (iff #50 #128)
#122 := (iff #41 true)
#113 := [not-or-elim #112]: #41
#123 := [iff-true #113]: #122
#130 := [monotonicity #123]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134 #125 #127]: #136
#141 := [trans #137 #139]: #140
#118 := [not-or-elim #112]: #93
[mp #118 #141]: false
unsat
e8da757bab2c8873de4c9abb00d9ba6b32efbf76 123 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#56 := (not #48)
#57 := (or #38 #56)
#65 := (not #57)
#66 := (or #38 #65)
#74 := (not #66)
#75 := (or #41 #74)
#143 := (iff #75 false)
#138 := (or false false)
#141 := (iff #138 false)
#142 := [rewrite]: #141
#139 := (iff #75 #138)
#136 := (iff #74 false)
#1 := true
#131 := (not true)
#134 := (iff #131 false)
#135 := [rewrite]: #134
#132 := (iff #74 #131)
#129 := (iff #66 true)
#124 := (or #38 #47)
#127 := (iff #124 true)
#128 := [rewrite]: #127
#125 := (iff #66 #124)
#122 := (iff #65 #47)
#120 := (iff #57 #38)
#115 := (or #38 #38)
#118 := (iff #115 #38)
#119 := [rewrite]: #118
#116 := (iff #57 #115)
#113 := (iff #56 #38)
#108 := (not #47)
#111 := (iff #108 #38)
#112 := [rewrite]: #111
#109 := (iff #56 #108)
#106 := (iff #48 #47)
#101 := (or #47 false)
#104 := (iff #101 #47)
#105 := [rewrite]: #104
#102 := (iff #48 #101)
#99 := (iff #41 false)
#92 := (not #41)
#83 := (not #75)
#84 := (or #41 #83)
#89 := (not #84)
#11 := (= f4 f1)
#9 := (= f3 f1)
#12 := (implies #9 #11)
#13 := (implies #12 #9)
#14 := (implies #13 #9)
#15 := (implies #14 #11)
#16 := (implies #15 #11)
#17 := (not #16)
#90 := (iff #17 #89)
#87 := (iff #16 #84)
#80 := (implies #75 #41)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #16 #80)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#78 := (iff #15 #75)
#71 := (implies #66 #41)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #15 #71)
#69 := (iff #14 #66)
#62 := (implies #57 #38)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #14 #62)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#60 := (iff #13 #57)
#53 := (implies #48 #38)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #13 #53)
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52 #40]: #54
#61 := [trans #55 #59]: #60
#64 := [monotonicity #61 #40]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70 #43]: #72
#79 := [trans #73 #77]: #78
#82 := [monotonicity #79 #43]: #81
#88 := [trans #82 #86]: #87
#91 := [monotonicity #88]: #90
#37 := [asserted]: #17
#94 := [mp #37 #91]: #89
#93 := [not-or-elim #94]: #92
#100 := [iff-false #93]: #99
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#117 := [monotonicity #114]: #116
#121 := [trans #117 #119]: #120
#123 := [monotonicity #121]: #122
#126 := [monotonicity #123]: #125
#130 := [trans #126 #128]: #129
#133 := [monotonicity #130]: #132
#137 := [trans #133 #135]: #136
#140 := [monotonicity #100 #137]: #139
#144 := [trans #140 #142]: #143
#95 := [not-or-elim #94]: #75
[mp #95 #144]: false
unsat
e9d35c7bb1cf28b044ff39158dac0d3feace74d2 60 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (not #11)
#15 := (implies #13 #14)
#12 := (implies #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#77 := (iff #17 false)
#1 := true
#72 := (not true)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #17 #72)
#70 := (iff #16 true)
#41 := (= f1 f4)
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#65 := (implies #48 #48)
#68 := (iff #65 true)
#69 := [rewrite]: #68
#66 := (iff #16 #65)
#63 := (iff #15 #48)
#53 := (not #41)
#58 := (implies #53 #47)
#61 := (iff #58 #48)
#62 := [rewrite]: #61
#59 := (iff #15 #58)
#56 := (iff #14 #47)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#57 := [monotonicity #40]: #56
#54 := (iff #13 #53)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#55 := [monotonicity #43]: #54
#60 := [monotonicity #55 #57]: #59
#64 := [trans #60 #62]: #63
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#67 := [monotonicity #52 #64]: #66
#71 := [trans #67 #69]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#37 := [asserted]: #17
[mp #37 #78]: false
unsat
ff95a56cf58e4b621d6e82e0aebf8b86faaedf39 121 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#56 := (not #41)
#93 := (or #56 #44 #47)
#140 := (iff #93 false)
#135 := (or false false false)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #93 #135)
#126 := (iff #47 false)
#116 := (not #47)
#96 := (not #93)
#102 := (or #56 #44 #47 #96)
#107 := (not #102)
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (or #16 #17)
#14 := (or #11 #13)
#15 := (implies #9 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#110 := (iff #20 #107)
#73 := (or #56 #47)
#65 := (or #56 #44)
#78 := (or #65 #73)
#50 := (or #44 #47)
#57 := (or #56 #50)
#84 := (not #57)
#85 := (or #84 #78)
#90 := (not #85)
#108 := (iff #90 #107)
#105 := (iff #85 #102)
#99 := (or #96 #78)
#103 := (iff #99 #102)
#104 := [rewrite]: #103
#100 := (iff #85 #99)
#97 := (iff #84 #96)
#94 := (iff #57 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#106 := [trans #101 #104]: #105
#109 := [monotonicity #106]: #108
#91 := (iff #20 #90)
#88 := (iff #19 #85)
#81 := (implies #57 #78)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #19 #81)
#79 := (iff #18 #78)
#76 := (iff #17 #73)
#70 := (implies #41 #47)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #17 #70)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#72 := [monotonicity #43 #49]: #71
#77 := [trans #72 #75]: #76
#68 := (iff #16 #65)
#62 := (implies #41 #44)
#66 := (iff #62 #65)
#67 := [rewrite]: #66
#63 := (iff #16 #62)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#64 := [monotonicity #43 #46]: #63
#69 := [trans #64 #67]: #68
#80 := [monotonicity #69 #77]: #79
#60 := (iff #15 #57)
#53 := (implies #41 #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [monotonicity #46 #49]: #51
#55 := [monotonicity #43 #52]: #54
#61 := [trans #55 #59]: #60
#83 := [monotonicity #61 #80]: #82
#89 := [trans #83 #87]: #88
#92 := [monotonicity #89]: #91
#111 := [trans #92 #109]: #110
#40 := [asserted]: #20
#112 := [mp #40 #111]: #107
#117 := [not-or-elim #112]: #116
#127 := [iff-false #117]: #126
#124 := (iff #44 false)
#114 := (not #44)
#115 := [not-or-elim #112]: #114
#125 := [iff-false #115]: #124
#133 := (iff #56 false)
#1 := true
#128 := (not true)
#131 := (iff #128 false)
#132 := [rewrite]: #131
#129 := (iff #56 #128)
#122 := (iff #41 true)
#113 := [not-or-elim #112]: #41
#123 := [iff-true #113]: #122
#130 := [monotonicity #123]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134 #125 #127]: #136
#141 := [trans #137 #139]: #140
#118 := [not-or-elim #112]: #93
[mp #118 #141]: false
unsat
47f13964ba3dfd91ee45da107e4d79352a28a5c5 84 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#41 := (= f1 f4)
#56 := (not #41)
#100 := [hypothesis]: #56
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#57 := (or #38 #56)
#62 := (and #48 #57)
#65 := (iff #38 #41)
#71 := (not #62)
#72 := (or #71 #65)
#77 := (not #72)
#11 := (= f4 f1)
#9 := (= f3 f1)
#15 := (iff #9 #11)
#13 := (implies #11 #9)
#12 := (implies #9 #11)
#14 := (and #12 #13)
#16 := (implies #14 #15)
#17 := (not #16)
#78 := (iff #17 #77)
#75 := (iff #16 #72)
#68 := (implies #62 #65)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #16 #68)
#66 := (iff #15 #65)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#67 := [monotonicity #40 #43]: #66
#63 := (iff #14 #62)
#60 := (iff #13 #57)
#53 := (implies #41 #38)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #13 #53)
#55 := [monotonicity #43 #40]: #54
#61 := [trans #55 #59]: #60
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#64 := [monotonicity #52 #61]: #63
#70 := [monotonicity #64 #67]: #69
#76 := [trans #70 #74]: #75
#79 := [monotonicity #76]: #78
#37 := [asserted]: #17
#82 := [mp #37 #79]: #77
#80 := [not-or-elim #82]: #62
#81 := [and-elim #80]: #48
#101 := [unit-resolution #81 #100]: #47
#92 := (or #41 #38)
#93 := (iff #41 #47)
#84 := (not #65)
#94 := (iff #84 #93)
#95 := [rewrite]: #94
#85 := [not-or-elim #82]: #84
#96 := [mp #85 #95]: #93
#97 := (not #93)
#98 := (or #41 #38 #97)
#91 := [def-axiom]: #98
#89 := [unit-resolution #91 #96]: #92
#102 := [unit-resolution #89 #101 #100]: false
#103 := [lemma #102]: #41
#83 := [and-elim #80]: #57
#104 := [unit-resolution #83 #103]: #38
#88 := (or #56 #47)
#90 := (or #56 #47 #97)
#87 := [def-axiom]: #90
#99 := [unit-resolution #87 #96]: #88
[unit-resolution #99 #104 #103]: false
unsat
67d0291df830bf23c2458b5c5d9ab7a1b7326290 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (iff #11 #9)
#12 := (iff #9 #11)
#14 := (iff #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (iff #36 #39)
#52 := (iff #42 #42)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 #42)
#45 := (iff #39 #36)
#48 := (iff #45 #42)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#47 := [monotonicity #41 #38]: #46
#51 := [trans #47 #49]: #50
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#54 := [monotonicity #44 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
6d227e1b0585e5b365b0d07f07d7c5708cbc3115 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (iff #9 #10)
#12 := (not #11)
#13 := (not #12)
#59 := (iff #13 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#52 := (iff #12 true)
#47 := (not false)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 false)
#34 := (= f1 f3)
#37 := (not #34)
#40 := (iff #34 #37)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #36 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#33 := [asserted]: #13
[mp #33 #60]: false
unsat
183781528451fe65de60bc2d2e22c1d75fff00de 60 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (not #11)
#15 := (implies #13 #14)
#12 := (implies #9 #11)
#16 := (iff #12 #15)
#17 := (not #16)
#77 := (iff #17 false)
#1 := true
#72 := (not true)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #17 #72)
#70 := (iff #16 true)
#41 := (= f1 f4)
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#65 := (iff #48 #48)
#68 := (iff #65 true)
#69 := [rewrite]: #68
#66 := (iff #16 #65)
#63 := (iff #15 #48)
#53 := (not #41)
#58 := (implies #53 #47)
#61 := (iff #58 #48)
#62 := [rewrite]: #61
#59 := (iff #15 #58)
#56 := (iff #14 #47)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#57 := [monotonicity #40]: #56
#54 := (iff #13 #53)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#55 := [monotonicity #43]: #54
#60 := [monotonicity #55 #57]: #59
#64 := [trans #60 #62]: #63
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#67 := [monotonicity #52 #64]: #66
#71 := [trans #67 #69]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#37 := [asserted]: #17
[mp #37 #78]: false
unsat
8a2f295cb26eb802daa0916270c630d0aae6a230 72 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (iff #9 #9)
#11 := (iff #9 #10)
#12 := (iff #9 #11)
#13 := (iff #9 #12)
#14 := (iff #9 #13)
#15 := (iff #9 #14)
#16 := (iff #9 #15)
#17 := (iff #9 #16)
#18 := (iff #9 #17)
#19 := (not #18)
#90 := (iff #19 false)
#1 := true
#85 := (not true)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #19 #85)
#83 := (iff #18 true)
#40 := (= f1 f3)
#43 := (iff #40 #40)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#81 := (iff #18 #43)
#79 := (iff #17 #40)
#50 := (iff #40 true)
#53 := (iff #50 #40)
#54 := [rewrite]: #53
#77 := (iff #17 #50)
#75 := (iff #16 true)
#73 := (iff #16 #43)
#71 := (iff #15 #40)
#69 := (iff #15 #50)
#67 := (iff #14 true)
#65 := (iff #14 #43)
#63 := (iff #13 #40)
#61 := (iff #13 #50)
#59 := (iff #12 true)
#57 := (iff #12 #43)
#55 := (iff #11 #40)
#51 := (iff #11 #50)
#48 := (iff #10 true)
#44 := (iff #10 #43)
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #42 #49]: #51
#56 := [trans #52 #54]: #55
#58 := [monotonicity #42 #56]: #57
#60 := [trans #58 #47]: #59
#62 := [monotonicity #42 #60]: #61
#64 := [trans #62 #54]: #63
#66 := [monotonicity #42 #64]: #65
#68 := [trans #66 #47]: #67
#70 := [monotonicity #42 #68]: #69
#72 := [trans #70 #54]: #71
#74 := [monotonicity #42 #72]: #73
#76 := [trans #74 #47]: #75
#78 := [monotonicity #42 #76]: #77
#80 := [trans #78 #54]: #79
#82 := [monotonicity #42 #80]: #81
#84 := [trans #82 #47]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#39 := [asserted]: #19
[mp #39 #91]: false
unsat
1c44d521ac456bc35b48a603c12488d178412b54 151 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#44 := (= f1 f4)
decl f5 :: S1
#12 := f5
#47 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#50 := (ite #41 #44 #47)
#67 := (or #41 #47)
#94 := (not #67)
#56 := (not #41)
#57 := (or #56 #44)
#93 := (not #57)
#95 := (or #93 #94)
#96 := (not #95)
#153 := [hypothesis]: #96
#133 := (or #95 #67)
#134 := [def-axiom]: #133
#154 := [unit-resolution #134 #153]: #67
#81 := (not #50)
#144 := (or #81 #95)
#103 := (iff #50 #95)
#72 := (and #57 #67)
#82 := (iff #72 #81)
#106 := (iff #82 #103)
#98 := (iff #95 #50)
#104 := (iff #98 #103)
#105 := [rewrite]: #104
#101 := (iff #82 #98)
#88 := (iff #96 #81)
#99 := (iff #88 #98)
#100 := [rewrite]: #99
#90 := (iff #82 #88)
#91 := (iff #72 #96)
#92 := [rewrite]: #91
#97 := [monotonicity #92]: #90
#102 := [trans #97 #100]: #101
#107 := [trans #102 #105]: #106
#13 := (= f5 f1)
#9 := (= f3 f1)
#16 := (not #9)
#17 := (implies #16 #13)
#11 := (= f4 f1)
#15 := (implies #9 #11)
#18 := (and #15 #17)
#14 := (ite #9 #11 #13)
#19 := (iff #14 #18)
#20 := (not #19)
#85 := (iff #20 #82)
#75 := (iff #50 #72)
#78 := (not #75)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #20 #78)
#76 := (iff #19 #75)
#73 := (iff #18 #72)
#70 := (iff #17 #67)
#64 := (implies #56 #47)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #17 #64)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#62 := (iff #16 #56)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#63 := [monotonicity #43]: #62
#66 := [monotonicity #63 #49]: #65
#71 := [trans #66 #69]: #70
#60 := (iff #15 #57)
#53 := (implies #41 #44)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #15 #53)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#55 := [monotonicity #43 #46]: #54
#61 := [trans #55 #59]: #60
#74 := [monotonicity #61 #71]: #73
#51 := (iff #14 #50)
#52 := [monotonicity #43 #46 #49]: #51
#77 := [monotonicity #52 #74]: #76
#80 := [monotonicity #77]: #79
#86 := [trans #80 #84]: #85
#40 := [asserted]: #20
#89 := [mp #40 #86]: #82
#108 := [mp #89 #107]: #103
#137 := (not #103)
#142 := (or #81 #95 #137)
#143 := [def-axiom]: #142
#145 := [unit-resolution #143 #108]: #144
#155 := [unit-resolution #145 #153]: #81
#131 := (or #95 #57)
#132 := [def-axiom]: #131
#156 := [unit-resolution #132 #153]: #57
#151 := (or #56 #93 #50)
#146 := [hypothesis]: #57
#147 := [hypothesis]: #41
#113 := (not #44)
#148 := [hypothesis]: #81
#114 := (or #50 #56 #113)
#115 := [def-axiom]: #114
#149 := [unit-resolution #115 #147 #148]: #113
#123 := (or #93 #56 #44)
#124 := [def-axiom]: #123
#150 := [unit-resolution #124 #149 #147 #146]: false
#152 := [lemma #150]: #151
#157 := [unit-resolution #152 #156 #155]: #56
#116 := (not #47)
#117 := (or #50 #41 #116)
#118 := [def-axiom]: #117
#158 := [unit-resolution #118 #157 #155]: #116
#129 := (or #94 #41 #47)
#130 := [def-axiom]: #129
#159 := [unit-resolution #130 #158 #157 #154]: false
#160 := [lemma #159]: #95
#140 := (or #50 #96)
#138 := (or #50 #96 #137)
#139 := [def-axiom]: #138
#141 := [unit-resolution #139 #108]: #140
#163 := [unit-resolution #141 #160]: #50
#161 := [hypothesis]: #56
#119 := (or #57 #41)
#120 := [def-axiom]: #119
#162 := [unit-resolution #120 #161]: #57
#111 := (or #81 #41 #47)
#112 := [def-axiom]: #111
#164 := [unit-resolution #112 #161 #163]: #47
#127 := (or #67 #116)
#128 := [def-axiom]: #127
#165 := [unit-resolution #128 #164]: #67
#135 := (or #96 #93 #94)
#136 := [def-axiom]: #135
#166 := [unit-resolution #136 #165 #162 #160]: false
#167 := [lemma #166]: #41
#109 := (or #81 #56 #44)
#110 := [def-axiom]: #109
#168 := [unit-resolution #110 #167 #163]: #44
#125 := (or #67 #56)
#126 := [def-axiom]: #125
#169 := [unit-resolution #126 #167]: #67
#170 := [unit-resolution #136 #169 #160]: #93
#121 := (or #57 #113)
#122 := [def-axiom]: #121
[unit-resolution #122 #170 #168]: false
unsat
643b93e1a561bfd028bc3792417378d161ef2e8a 66 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#36 := (= f1 f3)
#54 := (not #36)
#90 := [hypothesis]: #36
decl f4 :: S1
#10 := f4
#39 := (= f1 f4)
#45 := (not #39)
#46 := (or #36 #45)
#72 := (or #46 #54)
#73 := [def-axiom]: #72
#91 := [unit-resolution #73 #90]: #46
#70 := (not #46)
#92 := (or #54 #70)
#55 := (or #54 #39)
#60 := (ite #36 #46 #55)
#63 := (not #60)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (implies #9 #11)
#12 := (implies #11 #9)
#14 := (ite #9 #12 #13)
#15 := (not #14)
#64 := (iff #15 #63)
#61 := (iff #14 #60)
#58 := (iff #13 #55)
#51 := (implies #36 #39)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #13 #51)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#53 := [monotonicity #38 #41]: #52
#59 := [trans #53 #57]: #58
#49 := (iff #12 #46)
#42 := (implies #39 #36)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #12 #42)
#44 := [monotonicity #41 #38]: #43
#50 := [trans #44 #48]: #49
#62 := [monotonicity #38 #50 #59]: #61
#65 := [monotonicity #62]: #64
#35 := [asserted]: #15
#68 := [mp #35 #65]: #63
#86 := (or #60 #54 #70)
#87 := [def-axiom]: #86
#93 := [unit-resolution #87 #68]: #92
#94 := [unit-resolution #93 #91 #90]: false
#95 := [lemma #94]: #54
#69 := (or #55 #36)
#76 := [def-axiom]: #69
#96 := [unit-resolution #76 #95]: #55
#79 := (not #55)
#97 := (or #36 #79)
#88 := (or #60 #36 #79)
#89 := [def-axiom]: #88
#98 := [unit-resolution #89 #68]: #97
[unit-resolution #98 #96 #95]: false
unsat
8a97d35ae3bf1f06142ca3c295d9a54474a4bbad 67 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#18 := (ite #11 #14 #16)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#19 := (ite #9 #14 #18)
#12 := (or #9 #11)
#17 := (ite #12 #14 #16)
#20 := (iff #17 #19)
#21 := (not #20)
#82 := (iff #21 false)
#1 := true
#77 := (not true)
#80 := (iff #77 false)
#81 := [rewrite]: #80
#78 := (iff #21 #77)
#75 := (iff #20 true)
#54 := (= f1 f6)
#51 := (= f1 f5)
#45 := (= f1 f4)
#42 := (= f1 f3)
#48 := (or #42 #45)
#57 := (ite #48 #51 #54)
#70 := (iff #57 #57)
#73 := (iff #70 true)
#74 := [rewrite]: #73
#71 := (iff #20 #70)
#68 := (iff #19 #57)
#60 := (ite #45 #51 #54)
#63 := (ite #42 #51 #60)
#66 := (iff #63 #57)
#67 := [rewrite]: #66
#64 := (iff #19 #63)
#61 := (iff #18 #60)
#55 := (iff #16 #54)
#56 := [rewrite]: #55
#52 := (iff #14 #51)
#53 := [rewrite]: #52
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#62 := [monotonicity #47 #53 #56]: #61
#43 := (iff #9 #42)
#44 := [rewrite]: #43
#65 := [monotonicity #44 #53 #62]: #64
#69 := [trans #65 #67]: #68
#58 := (iff #17 #57)
#49 := (iff #12 #48)
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #53 #56]: #58
#72 := [monotonicity #59 #69]: #71
#76 := [trans #72 #74]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#41 := [asserted]: #21
[mp #41 #83]: false
unsat
d57ccd1bb5c7d6c6ba7796601f6907fb7769428b 67 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#18 := (ite #11 #14 #16)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#19 := (ite #9 #18 #16)
#12 := (and #9 #11)
#17 := (ite #12 #14 #16)
#20 := (iff #17 #19)
#21 := (not #20)
#82 := (iff #21 false)
#1 := true
#77 := (not true)
#80 := (iff #77 false)
#81 := [rewrite]: #80
#78 := (iff #21 #77)
#75 := (iff #20 true)
#54 := (= f1 f6)
#51 := (= f1 f5)
#45 := (= f1 f4)
#42 := (= f1 f3)
#48 := (and #42 #45)
#57 := (ite #48 #51 #54)
#70 := (iff #57 #57)
#73 := (iff #70 true)
#74 := [rewrite]: #73
#71 := (iff #20 #70)
#68 := (iff #19 #57)
#60 := (ite #45 #51 #54)
#63 := (ite #42 #60 #54)
#66 := (iff #63 #57)
#67 := [rewrite]: #66
#64 := (iff #19 #63)
#55 := (iff #16 #54)
#56 := [rewrite]: #55
#61 := (iff #18 #60)
#52 := (iff #14 #51)
#53 := [rewrite]: #52
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#62 := [monotonicity #47 #53 #56]: #61
#43 := (iff #9 #42)
#44 := [rewrite]: #43
#65 := [monotonicity #44 #62 #56]: #64
#69 := [trans #65 #67]: #68
#58 := (iff #17 #57)
#49 := (iff #12 #48)
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #53 #56]: #58
#72 := [monotonicity #59 #69]: #71
#76 := [trans #72 #74]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#41 := [asserted]: #21
[mp #41 #83]: false
unsat
cc825ea9100726025c75fca6a38c4c3107dd3158 181 0
#2 := false
decl f6 :: S1
#14 := f6
decl f1 :: S1
#4 := f1
#53 := (= f1 f6)
decl f5 :: S1
#12 := f5
#50 := (= f1 f5)
decl f4 :: S1
#10 := f4
#47 := (= f1 f4)
#56 := (ite #47 #50 #53)
decl f3 :: S1
#8 := f3
#44 := (= f1 f3)
#62 := (not #44)
#63 := (or #62 #56)
#101 := (not #63)
#176 := [hypothesis]: #101
#151 := (or #63 #44)
#152 := [def-axiom]: #151
#177 := [unit-resolution #152 #176]: #44
#87 := (or #62 #53)
#79 := (or #62 #50)
#71 := (or #62 #47)
#92 := (ite #71 #79 #87)
#160 := (or #92 #63)
#102 := (iff #92 #101)
#15 := (= f6 f1)
#9 := (= f3 f1)
#20 := (implies #9 #15)
#13 := (= f5 f1)
#19 := (implies #9 #13)
#11 := (= f4 f1)
#18 := (implies #9 #11)
#21 := (ite #18 #19 #20)
#16 := (ite #11 #13 #15)
#17 := (implies #9 #16)
#22 := (iff #17 #21)
#23 := (not #22)
#105 := (iff #23 #102)
#95 := (iff #63 #92)
#98 := (not #95)
#103 := (iff #98 #102)
#104 := [rewrite]: #103
#99 := (iff #23 #98)
#96 := (iff #22 #95)
#93 := (iff #21 #92)
#90 := (iff #20 #87)
#84 := (implies #44 #53)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #20 #84)
#54 := (iff #15 #53)
#55 := [rewrite]: #54
#45 := (iff #9 #44)
#46 := [rewrite]: #45
#86 := [monotonicity #46 #55]: #85
#91 := [trans #86 #89]: #90
#82 := (iff #19 #79)
#76 := (implies #44 #50)
#80 := (iff #76 #79)
#81 := [rewrite]: #80
#77 := (iff #19 #76)
#51 := (iff #13 #50)
#52 := [rewrite]: #51
#78 := [monotonicity #46 #52]: #77
#83 := [trans #78 #81]: #82
#74 := (iff #18 #71)
#68 := (implies #44 #47)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #18 #68)
#48 := (iff #11 #47)
#49 := [rewrite]: #48
#70 := [monotonicity #46 #49]: #69
#75 := [trans #70 #73]: #74
#94 := [monotonicity #75 #83 #91]: #93
#66 := (iff #17 #63)
#59 := (implies #44 #56)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #17 #59)
#57 := (iff #16 #56)
#58 := [monotonicity #49 #52 #55]: #57
#61 := [monotonicity #46 #58]: #60
#67 := [trans #61 #65]: #66
#97 := [monotonicity #67 #94]: #96
#100 := [monotonicity #97]: #99
#106 := [trans #100 #104]: #105
#43 := [asserted]: #23
#109 := [mp #43 #106]: #102
#157 := (not #102)
#158 := (or #92 #63 #157)
#159 := [def-axiom]: #158
#161 := [unit-resolution #159 #109]: #160
#178 := [unit-resolution #161 #176]: #92
#112 := (not #71)
#142 := (not #56)
#153 := (or #63 #142)
#154 := [def-axiom]: #153
#179 := [unit-resolution #154 #176]: #142
#133 := (not #92)
#174 := (or #112 #56 #62 #133)
#166 := [hypothesis]: #142
#167 := [hypothesis]: #44
#168 := [hypothesis]: #71
#108 := (or #112 #62 #47)
#110 := [def-axiom]: #108
#169 := [unit-resolution #110 #168 #167]: #47
#170 := [hypothesis]: #92
#134 := (or #133 #112 #79)
#135 := [def-axiom]: #134
#171 := [unit-resolution #135 #168 #170]: #79
#122 := (not #79)
#123 := (or #122 #62 #50)
#124 := [def-axiom]: #123
#172 := [unit-resolution #124 #171 #167]: #50
#119 := (not #50)
#115 := (not #47)
#147 := (or #56 #115 #119)
#148 := [def-axiom]: #147
#173 := [unit-resolution #148 #172 #169 #166]: false
#175 := [lemma #173]: #174
#180 := [unit-resolution #175 #179 #177 #178]: #112
#136 := (or #133 #71 #87)
#137 := [def-axiom]: #136
#181 := [unit-resolution #137 #180 #178]: #87
#127 := (not #53)
#116 := (or #71 #115)
#111 := [def-axiom]: #116
#182 := [unit-resolution #111 #180]: #115
#149 := (or #56 #47 #127)
#150 := [def-axiom]: #149
#183 := [unit-resolution #150 #182 #179]: #127
#130 := (not #87)
#131 := (or #130 #62 #53)
#132 := [def-axiom]: #131
#184 := [unit-resolution #132 #183 #181 #177]: false
#185 := [lemma #184]: #63
#164 := (or #133 #101)
#162 := (or #133 #101 #157)
#163 := [def-axiom]: #162
#165 := [unit-resolution #163 #109]: #164
#186 := [unit-resolution #165 #185]: #133
#187 := [hypothesis]: #62
#113 := (or #71 #44)
#114 := [def-axiom]: #113
#188 := [unit-resolution #114 #187]: #71
#117 := (or #79 #44)
#118 := [def-axiom]: #117
#189 := [unit-resolution #118 #187]: #79
#138 := (or #92 #112 #122)
#139 := [def-axiom]: #138
#190 := [unit-resolution #139 #189 #188 #186]: false
#191 := [lemma #190]: #44
#155 := (or #101 #62 #56)
#156 := [def-axiom]: #155
#194 := [unit-resolution #156 #191 #185]: #56
#192 := [hypothesis]: #112
#140 := (or #92 #71 #130)
#141 := [def-axiom]: #140
#193 := [unit-resolution #141 #192 #186]: #130
#195 := [unit-resolution #111 #192]: #115
#145 := (or #142 #47 #53)
#146 := [def-axiom]: #145
#196 := [unit-resolution #146 #195 #194]: #53
#128 := (or #87 #127)
#129 := [def-axiom]: #128
#197 := [unit-resolution #129 #196 #193]: false
#198 := [lemma #197]: #71
#199 := [unit-resolution #110 #198 #191]: #47
#200 := [unit-resolution #139 #198 #186]: #122
#120 := (or #79 #119)
#121 := [def-axiom]: #120
#201 := [unit-resolution #121 #200]: #119
#143 := (or #142 #115 #50)
#144 := [def-axiom]: #143
[unit-resolution #144 #201 #199 #194]: false
unsat
7ec9b76ddbd0690a0ae0e84f7aac32369b67562e 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (ite #9 #9 #10)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := (= f1 f3)
#36 := (not #33)
#39 := (ite #33 #33 #36)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #35 #35 #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
9a59901175f7c3f42e5be82db6a8df07aaf0199e 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (ite #10 #10 #9)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := (= f1 f3)
#36 := (not #33)
#39 := (ite #36 #36 #33)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#37 := (iff #10 #36)
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38 #38 #35]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
6758e928b7c8973f924b8c2c252430960344c442 18 0
#2 := false
decl f3 :: S2
#8 := f3
#9 := (= f3 f3)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
5cd924cc739389c12253492d422dfc6ac2f6d405 29 0
#2 := false
decl f3 :: S2
#8 := f3
decl f4 :: S2
#9 := f4
#11 := (= f4 f3)
#10 := (= f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (implies #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (iff #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
e82612aca334f7d47bdb5a90fdc8f5dfc017ae67 34 0
#2 := false
decl f5 :: S2
#11 := f5
decl f3 :: S2
#8 := f3
#14 := (= f3 f5)
decl f4 :: S2
#9 := f4
#12 := (= f4 f5)
#61 := (iff #12 #14)
#59 := (iff #14 #12)
#10 := (= f3 f4)
#13 := (and #10 #12)
#37 := (not #13)
#38 := (or #37 #14)
#41 := (not #38)
#15 := (implies #13 #14)
#16 := (not #15)
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#36 := [asserted]: #16
#46 := [mp #36 #43]: #41
#44 := [not-or-elim #46]: #13
#45 := [and-elim #44]: #10
#60 := [monotonicity #45]: #59
#62 := [symm #60]: #61
#47 := [and-elim #44]: #12
#57 := [mp #47 #62]: #14
#48 := (not #14)
#49 := [not-or-elim #46]: #48
[unit-resolution #49 #57]: false
unsat
450aaafd6173c5e6036fdec198da2898811d4211 27 0
#2 := false
decl f5 :: (-> S2 S2)
decl f4 :: S2
#9 := f4
#12 := (f5 f4)
decl f3 :: S2
#8 := f3
#11 := (f5 f3)
#13 := (= #11 #12)
#10 := (= f3 f4)
#36 := (not #10)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #10 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #10
#54 := [monotonicity #43]: #13
#44 := (not #13)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #54]: false
unsat
268885483340f29776e2c235da393d33273743e0 31 0
#2 := false
decl f5 :: (-> S2 S2 S3)
decl f3 :: S2
#8 := f3
decl f4 :: S2
#9 := f4
#12 := (f5 f4 f3)
#11 := (f5 f3 f4)
#13 := (= #11 #12)
#56 := (= #12 #11)
#10 := (= f3 f4)
#36 := (not #10)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #10 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #10
#54 := (= f4 f3)
#55 := [symm #43]: #54
#57 := [monotonicity #55 #43]: #56
#52 := [symm #57]: #13
#44 := (not #13)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #52]: false
unsat
b23fdcb8ecc896d99515b950a22874e320c73a5e 63 0
#2 := false
decl f3 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#49 := (= f4 #9)
#10 := (f3 #9)
#12 := (f3 #10)
#81 := (= #12 #9)
#79 := (= #9 #12)
#40 := (= f4 #10)
#13 := (f3 #12)
#14 := (f3 #13)
#43 := (= f4 #14)
#46 := (and #40 #43)
#55 := (not #46)
#56 := (or #55 #49)
#61 := (not #56)
#17 := (= #9 f4)
#15 := (= #14 f4)
#11 := (= #10 f4)
#16 := (and #11 #15)
#18 := (implies #16 #17)
#19 := (not #18)
#62 := (iff #19 #61)
#59 := (iff #18 #56)
#52 := (implies #46 #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #18 #52)
#50 := (iff #17 #49)
#51 := [rewrite]: #50
#47 := (iff #16 #46)
#44 := (iff #15 #43)
#45 := [rewrite]: #44
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#60 := [trans #54 #58]: #59
#63 := [monotonicity #60]: #62
#39 := [asserted]: #19
#66 := [mp #39 #63]: #61
#64 := [not-or-elim #66]: #46
#65 := [and-elim #64]: #40
#80 := [monotonicity #65]: #79
#82 := [symm #80]: #81
#84 := (= f4 #12)
#72 := (= #14 #12)
#73 := (= #12 #14)
#75 := (= #10 #13)
#77 := (= #13 #10)
#78 := [monotonicity #82]: #77
#76 := [symm #78]: #75
#74 := [monotonicity #76]: #73
#83 := [symm #74]: #72
#67 := [and-elim #64]: #43
#85 := [trans #67 #83]: #84
#86 := [trans #85 #82]: #49
#68 := (not #49)
#69 := [not-or-elim #66]: #68
[unit-resolution #69 #86]: false
unsat
bdf634420f64829e899fdad55dc280602f81f222 176 0
#2 := false
decl f5 :: S2
#11 := f5
decl f4 :: S2
#10 := f4
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#43 := (= f1 f3)
#46 := (ite #43 f4 f5)
decl f6 :: S2
#13 := f6
#52 := (= f6 #46)
#114 := (= f5 #46)
#60 := (not #43)
#15 := (= f4 f6)
#172 := (iff #52 #15)
#170 := (iff #15 #52)
#49 := (= #46 f6)
#53 := (iff #49 #52)
#169 := [commutativity]: #53
#167 := (iff #15 #49)
#113 := (= f4 #46)
#161 := [hypothesis]: #43
#115 := (or #60 #113)
#116 := [def-axiom]: #115
#166 := [unit-resolution #116 #161]: #113
#168 := [monotonicity #166]: #167
#171 := [trans #168 #169]: #170
#173 := [symm #171]: #172
#18 := (= f5 f6)
#71 := (or #18 #43)
#98 := (not #71)
#61 := (or #15 #60)
#97 := (not #61)
#99 := (or #97 #98)
#178 := (or #99 #60)
#119 := (not #15)
#85 := (not #52)
#174 := (iff #85 #119)
#175 := [monotonicity #173]: #174
#100 := (not #99)
#162 := [hypothesis]: #100
#146 := (or #85 #99)
#107 := (iff #52 #99)
#76 := (and #61 #71)
#86 := (iff #76 #85)
#110 := (iff #86 #107)
#102 := (iff #99 #52)
#108 := (iff #102 #107)
#109 := [rewrite]: #108
#105 := (iff #86 #102)
#92 := (iff #100 #85)
#103 := (iff #92 #102)
#104 := [rewrite]: #103
#94 := (iff #86 #92)
#95 := (iff #76 #100)
#96 := [rewrite]: #95
#101 := [monotonicity #96]: #94
#106 := [trans #101 #104]: #105
#111 := [trans #106 #109]: #110
#9 := (= f3 f1)
#17 := (not #9)
#19 := (implies #17 #18)
#16 := (implies #9 #15)
#20 := (and #16 #19)
#12 := (ite #9 f4 f5)
#14 := (= #12 f6)
#21 := (iff #14 #20)
#22 := (not #21)
#89 := (iff #22 #86)
#79 := (iff #52 #76)
#82 := (not #79)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #22 #82)
#80 := (iff #21 #79)
#77 := (iff #20 #76)
#74 := (iff #19 #71)
#68 := (implies #60 #18)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #19 #68)
#66 := (iff #17 #60)
#44 := (iff #9 #43)
#45 := [rewrite]: #44
#67 := [monotonicity #45]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#64 := (iff #16 #61)
#57 := (implies #43 #15)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #16 #57)
#59 := [monotonicity #45]: #58
#65 := [trans #59 #63]: #64
#78 := [monotonicity #65 #75]: #77
#55 := (iff #14 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (= #12 #46)
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#81 := [monotonicity #56 #78]: #80
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#42 := [asserted]: #22
#93 := [mp #42 #90]: #86
#112 := [mp #93 #111]: #107
#139 := (not #107)
#144 := (or #85 #99 #139)
#145 := [def-axiom]: #144
#147 := [unit-resolution #145 #112]: #146
#165 := [unit-resolution #147 #162]: #85
#176 := [mp #165 #175]: #119
#133 := (or #99 #61)
#134 := [def-axiom]: #133
#163 := [unit-resolution #134 #162]: #61
#124 := (or #97 #15 #60)
#125 := [def-axiom]: #124
#164 := [unit-resolution #125 #163 #161]: #15
#177 := [unit-resolution #164 #176]: false
#179 := [lemma #177]: #178
#180 := [unit-resolution #179 #161]: #99
#142 := (or #52 #100)
#140 := (or #52 #100 #139)
#141 := [def-axiom]: #140
#143 := [unit-resolution #141 #112]: #142
#183 := [unit-resolution #143 #180]: #52
#184 := [mp #183 #173]: #15
#156 := (iff #114 #18)
#154 := (iff #18 #114)
#148 := [hypothesis]: #98
#135 := (or #99 #71)
#136 := [def-axiom]: #135
#152 := [unit-resolution #136 #148]: #99
#153 := [unit-resolution #143 #152]: #52
#155 := [monotonicity #153]: #154
#157 := [symm #155]: #156
#129 := (or #71 #60)
#130 := [def-axiom]: #129
#150 := [unit-resolution #130 #148]: #60
#117 := (or #43 #114)
#118 := [def-axiom]: #117
#151 := [unit-resolution #118 #150]: #114
#158 := [mp #151 #157]: #18
#126 := (not #18)
#127 := (or #71 #126)
#128 := [def-axiom]: #127
#149 := [unit-resolution #128 #148]: #126
#159 := [unit-resolution #149 #158]: false
#160 := [lemma #159]: #71
#137 := (or #100 #97 #98)
#138 := [def-axiom]: #137
#181 := [unit-resolution #138 #180 #160]: #97
#120 := (or #61 #119)
#121 := [def-axiom]: #120
#182 := [unit-resolution #121 #181]: #119
#185 := [unit-resolution #182 #184]: false
#186 := [lemma #185]: #60
#190 := [unit-resolution #118 #186]: #114
#192 := (= f6 f5)
#131 := (or #98 #18 #43)
#132 := [def-axiom]: #131
#191 := [unit-resolution #132 #186 #160]: #18
#193 := [symm #191]: #192
#194 := [trans #193 #190]: #52
#122 := (or #61 #43)
#123 := [def-axiom]: #122
#187 := [unit-resolution #123 #186]: #61
#188 := [unit-resolution #138 #187 #160]: #100
#189 := [unit-resolution #147 #188]: #85
[unit-resolution #189 #194]: false
unsat
7caf561e8dba712e3313b4433e2a7d62033d4cc1 36 0
#2 := false
decl f5 :: S2
#10 := f5
decl f3 :: S2
#8 := f3
#12 := (= f3 f5)
#13 := (not #12)
decl f4 :: S2
#9 := f4
#11 := (distinct f3 f4 f5)
#36 := (not #11)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #11 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#44 := [not-or-elim #45]: #12
#55 := (= f4 f5)
#56 := (not #55)
#53 := (= f3 f4)
#54 := (not #53)
#51 := (and #54 #13 #56)
#43 := [not-or-elim #45]: #11
#61 := (or #36 #51)
#62 := [def-axiom]: #61
#65 := [unit-resolution #62 #43]: #51
#52 := (not #51)
#47 := (or #52 #13)
#48 := [def-axiom]: #47
[unit-resolution #48 #65 #44]: false
unsat
5d166c0e6b2d72dafe17b5b5de7117e70ffd077f 77 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#84 := (= f3 f4)
decl f6 :: S2
#12 := f6
#39 := (= f4 f6)
#103 := (iff #39 #84)
#101 := (iff #84 #39)
#13 := (= f6 f4)
#40 := (iff #13 #39)
#100 := [commutativity]: #40
#98 := (iff #84 #13)
#14 := (= f3 f6)
#45 := (not #39)
#15 := (not #14)
decl f5 :: S2
#10 := f5
#11 := (distinct f3 f4 f5)
#54 := (not #11)
#63 := (or #54 #15 #45)
#66 := (not #63)
#16 := (implies #13 #15)
#17 := (implies #11 #16)
#18 := (not #17)
#69 := (iff #18 #66)
#46 := (or #15 #45)
#55 := (or #54 #46)
#60 := (not #55)
#67 := (iff #60 #66)
#64 := (iff #55 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#61 := (iff #18 #60)
#58 := (iff #17 #55)
#51 := (implies #11 #46)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #17 #51)
#49 := (iff #16 #46)
#42 := (implies #39 #15)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #16 #42)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#59 := [trans #53 #57]: #58
#62 := [monotonicity #59]: #61
#70 := [trans #62 #68]: #69
#38 := [asserted]: #18
#71 := [mp #38 #70]: #66
#73 := [not-or-elim #71]: #14
#99 := [monotonicity #73]: #98
#102 := [trans #99 #100]: #101
#104 := [symm #102]: #103
#74 := [not-or-elim #71]: #39
#105 := [mp #74 #104]: #84
#85 := (not #84)
#82 := (= f4 f5)
#83 := (not #82)
#86 := (= f3 f5)
#87 := (not #86)
#80 := (and #85 #87 #83)
#72 := [not-or-elim #71]: #11
#92 := (or #54 #80)
#93 := [def-axiom]: #92
#96 := [unit-resolution #93 #72]: #80
#81 := (not #80)
#78 := (or #81 #85)
#79 := [def-axiom]: #78
#97 := [unit-resolution #79 #96]: #85
[unit-resolution #97 #105]: false
unsat
533428288e5c80da242f85265bdf0f4abb151e65 28 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#10 := (distinct f3 f4 f3 f4)
#11 := (not #10)
#12 := (not #11)
#47 := (iff #12 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #12 #42)
#40 := (iff #11 true)
#35 := (not false)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #11 #35)
#33 := (iff #10 false)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#32 := [asserted]: #12
[mp #32 #48]: false
unsat
017c0a2408f982087afab8f6a30c931842322a6a 38 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#11 := (distinct f3 f4)
#12 := (not #11)
#10 := (= f3 f4)
#13 := (implies #10 #12)
#14 := (not #13)
#57 := (iff #14 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 true)
#45 := (implies #10 #10)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#43 := (iff #12 #10)
#35 := (not #10)
#38 := (not #35)
#41 := (iff #38 #10)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#34 := [asserted]: #14
[mp #34 #58]: false
unsat
3d691d698b1a15f8a77e4e6f63eb68946744774b 40 0
#2 := false
decl f5 :: S2
#11 := f5
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#14 := (distinct f3 f4 f5)
#15 := (not #14)
#12 := (= f3 f5)
#10 := (= f3 f4)
#13 := (and #10 #12)
#38 := (not #13)
#39 := (or #38 #15)
#42 := (not #39)
#16 := (implies #13 #15)
#17 := (not #16)
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#37 := [asserted]: #17
#47 := [mp #37 #44]: #42
#49 := [not-or-elim #47]: #14
#61 := (= f4 f5)
#62 := (not #61)
#60 := (not #12)
#59 := (not #10)
#57 := (and #59 #60 #62)
#58 := (not #57)
#45 := [not-or-elim #47]: #13
#46 := [and-elim #45]: #10
#55 := (or #58 #59)
#56 := [def-axiom]: #55
#69 := [unit-resolution #56 #46]: #58
#65 := (or #15 #57)
#66 := [def-axiom]: #65
#70 := [unit-resolution #66 #69]: #15
[unit-resolution #70 #49]: false
unsat
91ca794ae2ea70dac95d2e0e4e034ae7338238ca 33 0
#2 := false
decl f3 :: S2
#8 := f3
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f6 :: S2
#11 := f6
#13 := (distinct f6 f4 f5 f3)
#12 := (distinct f3 f4 f5 f6)
#14 := (implies #12 #13)
#15 := (not #14)
#50 := (iff #15 false)
#1 := true
#45 := (not true)
#48 := (iff #45 false)
#49 := [rewrite]: #48
#46 := (iff #15 #45)
#43 := (iff #14 true)
#38 := (implies #12 #12)
#41 := (iff #38 true)
#42 := [rewrite]: #41
#39 := (iff #14 #38)
#36 := (iff #13 #12)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#35 := [asserted]: #15
[mp #35 #51]: false
unsat
213abf865430cd165dad7b08270c63f2d0321573 91 0
#2 := false
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#13 := (distinct f3 f4 f5)
#70 := (= f4 f5)
#71 := (not #70)
#66 := (= f3 f5)
#67 := (not #66)
#64 := (= f3 f4)
#65 := (not #64)
#96 := (and #65 #67 #71)
decl f6 :: S2
#11 := f6
#74 := (= f5 f6)
#75 := (not #74)
#72 := (= f4 f6)
#73 := (not #72)
#68 := (= f3 f6)
#69 := (not #68)
#76 := (and #65 #67 #69 #71 #73 #75)
#12 := (distinct f3 f4 f5 f6)
#14 := (distinct f4 f5 f6)
#15 := (and #13 #14)
#38 := (not #12)
#39 := (or #38 #15)
#42 := (not #39)
#16 := (implies #12 #15)
#17 := (not #16)
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#37 := [asserted]: #17
#47 := [mp #37 #44]: #42
#45 := [not-or-elim #47]: #12
#92 := (or #38 #76)
#93 := [def-axiom]: #92
#124 := [unit-resolution #93 #45]: #76
#77 := (not #76)
#78 := (or #77 #65)
#79 := [def-axiom]: #78
#125 := [unit-resolution #79 #124]: #65
#84 := (or #77 #71)
#85 := [def-axiom]: #84
#126 := [unit-resolution #85 #124]: #71
#80 := (or #77 #67)
#81 := [def-axiom]: #80
#127 := [unit-resolution #81 #124]: #67
#104 := (or #96 #64 #66 #70)
#105 := [def-axiom]: #104
#128 := [unit-resolution #105 #127 #126 #125]: #96
#97 := (not #96)
#108 := (or #13 #97)
#109 := [def-axiom]: #108
#129 := [unit-resolution #109 #128]: #13
#110 := (and #71 #73 #75)
#88 := (or #77 #75)
#89 := [def-axiom]: #88
#130 := [unit-resolution #89 #124]: #75
#86 := (or #77 #73)
#87 := [def-axiom]: #86
#131 := [unit-resolution #87 #124]: #73
#118 := (or #110 #70 #72 #74)
#119 := [def-axiom]: #118
#132 := [unit-resolution #119 #131 #130 #126]: #110
#111 := (not #110)
#122 := (or #14 #111)
#123 := [def-axiom]: #122
#133 := [unit-resolution #123 #132]: #14
#57 := (not #14)
#56 := (not #13)
#58 := (or #56 #57)
#46 := (not #15)
#61 := (iff #46 #58)
#59 := (not #58)
#52 := (not #59)
#51 := (iff #52 #58)
#60 := [rewrite]: #51
#53 := (iff #46 #52)
#54 := (iff #15 #59)
#55 := [rewrite]: #54
#50 := [monotonicity #55]: #53
#62 := [trans #50 #60]: #61
#48 := [not-or-elim #47]: #46
#63 := [mp #48 #62]: #58
[unit-resolution #63 #133 #129]: false
unsat
f1809e8489f94ca6f5ab262d227412571fae6063 25 0
#2 := false
#8 := (:var 0 S2)
#9 := (= #8 #8)
#10 := (forall (vars (?v0 S2)) #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (forall (vars (?v0 S2)) true)
#37 := (iff #34 true)
#38 := [elim-unused]: #37
#35 := (iff #10 #34)
#32 := (iff #9 true)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
d955ec6b7cfeeee07c53113d44b234b0343ba998 34 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (iff #11 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := (= f1 #9)
#37 := (forall (vars (?v0 S2)) #34)
#40 := (iff #37 #37)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#36 := [rewrite]: #35
#39 := [quant-intro #36]: #38
#42 := [monotonicity #39 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
ac9cb8d0afa0ef87b47bcfca90097c8127bbb5a7 95 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#77 := ?v0!0
#78 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#79 := (= f1 #78)
#74 := (not #79)
decl ?v1!1 :: S2
#88 := ?v1!1
#89 := (f3 ?v1!1)
#90 := (= f1 #89)
#108 := (or #79 #90)
#111 := (not #108)
#114 := (and #79 #111)
#91 := (or #90 #79)
#92 := (not #91)
#85 := (not #74)
#98 := (and #85 #92)
#115 := (iff #98 #114)
#112 := (iff #92 #111)
#109 := (iff #91 #108)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#106 := (iff #85 #79)
#107 := [rewrite]: #106
#116 := [monotonicity #107 #113]: #115
#11 := (:var 1 S2)
#12 := (f3 #11)
#42 := (= f1 #12)
#8 := (:var 0 S2)
#9 := (f3 #8)
#39 := (= f1 #9)
#48 := (or #39 #42)
#53 := (forall (vars (?v1 S2)) #48)
#59 := (not #39)
#60 := (or #59 #53)
#65 := (forall (vars (?v0 S2)) #60)
#68 := (not #65)
#101 := (~ #68 #98)
#80 := (or #39 #79)
#72 := (forall (vars (?v1 S2)) #80)
#81 := (or #74 #72)
#82 := (not #81)
#99 := (~ #82 #98)
#93 := (not #72)
#94 := (~ #93 #92)
#95 := [sk]: #94
#86 := (~ #85 #85)
#87 := [refl]: #86
#100 := [nnf-neg #87 #95]: #99
#83 := (~ #68 #82)
#84 := [sk]: #83
#102 := [trans #84 #100]: #101
#10 := (= #9 f1)
#13 := (= #12 f1)
#14 := (or #13 #10)
#15 := (forall (vars (?v1 S2)) #14)
#16 := (implies #10 #15)
#17 := (forall (vars (?v0 S2)) #16)
#18 := (not #17)
#69 := (iff #18 #68)
#66 := (iff #17 #65)
#63 := (iff #16 #60)
#56 := (implies #39 #53)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#45 := (or #42 #39)
#49 := (iff #45 #48)
#50 := [rewrite]: #49
#46 := (iff #14 #45)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44 #41]: #46
#52 := [trans #47 #50]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #41 #55]: #57
#64 := [trans #58 #62]: #63
#67 := [quant-intro #64]: #66
#70 := [monotonicity #67]: #69
#38 := [asserted]: #18
#73 := [mp #38 #70]: #68
#103 := [mp~ #73 #102]: #98
#104 := [mp #103 #116]: #114
#117 := [and-elim #104]: #111
#118 := [not-or-elim #117]: #74
#105 := [and-elim #104]: #79
[unit-resolution #105 #118]: false
unsat
049ea7d2d96c9794ec9b3845824fa548d49c024b 296 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#664 := (pattern #9)
decl f1 :: S1
#4 := f1
#40 := (= f1 #9)
#671 := (forall (vars (?v0 S2)) (:pat #664) #40)
decl f4 :: (-> S2 S1)
#11 := (f4 #8)
#665 := (pattern #11)
#43 := (= f1 #11)
#679 := (forall (vars (?v0 S2)) (:pat #665) #43)
#684 := (not #679)
#676 := (not #671)
#687 := (or #676 #684)
#690 := (not #687)
#173 := (not #43)
#172 := (not #40)
#174 := (or #172 #173)
#175 := (not #174)
#666 := (forall (vars (?v0 S2)) (:pat #664 #665) #175)
#445 := (not #666)
decl ?v0!1 :: S2
#95 := ?v0!1
#633 := (f4 ?v0!1)
#634 := (= f1 #633)
#356 := (not #634)
#96 := (f3 ?v0!1)
#97 := (= f1 #96)
#98 := (not #97)
#357 := (or #98 #356)
decl ?v0!2 :: S2
#104 := ?v0!2
#105 := (f4 ?v0!2)
#106 := (= f1 #105)
#326 := (f3 ?v0!2)
#337 := (= f1 #326)
#338 := (not #337)
#107 := (not #106)
#336 := (or #107 #338)
#656 := (not #336)
#639 := [hypothesis]: #666
#301 := (or #656 #445)
#296 := [hypothesis]: #336
#652 := (or #445 #656)
#266 := (or #338 #107)
#339 := (not #266)
#324 := (or #445 #339)
#659 := (iff #324 #652)
#661 := (iff #652 #652)
#662 := [rewrite]: #661
#658 := (iff #339 #656)
#340 := (iff #266 #336)
#319 := [rewrite]: #340
#313 := [monotonicity #319]: #658
#660 := [monotonicity #313]: #659
#657 := [trans #660 #662]: #659
#325 := [quant-inst #104]: #324
#663 := [mp #325 #657]: #652
#300 := [unit-resolution #663 #639 #296]: false
#302 := [lemma #300]: #301
#635 := [unit-resolution #302 #639]: #656
#653 := (or #336 #106)
#311 := [def-axiom]: #653
#632 := [unit-resolution #311 #635]: #106
decl ?v0!0 :: S2
#84 := ?v0!0
#85 := (f4 ?v0!0)
#86 := (= f1 #85)
#87 := (f3 ?v0!0)
#88 := (= f1 #87)
#103 := (not #88)
#102 := (not #86)
#93 := (or #102 #103)
#94 := (not #93)
#363 := (or #94 #445)
#362 := [hypothesis]: #93
#640 := (or #445 #94)
#303 := (or #103 #102)
#641 := (not #303)
#646 := (or #445 #641)
#647 := (iff #646 #640)
#287 := (iff #640 #640)
#288 := [rewrite]: #287
#644 := (iff #641 #94)
#642 := (iff #303 #93)
#643 := [rewrite]: #642
#645 := [monotonicity #643]: #644
#649 := [monotonicity #645]: #647
#650 := [trans #649 #288]: #647
#282 := [quant-inst #84]: #646
#648 := [mp #282 #650]: #640
#348 := [unit-resolution #648 #639 #362]: false
#254 := [lemma #348]: #363
#625 := [unit-resolution #254 #639]: #94
#651 := (or #93 #86)
#637 := [def-axiom]: #651
#629 := [unit-resolution #637 #625]: #86
#638 := (or #93 #88)
#344 := [def-axiom]: #638
#626 := [unit-resolution #344 #625]: #88
#166 := (or #102 #103 #98 #107)
#135 := (and #86 #88)
#138 := (not #135)
#144 := (or #98 #107 #138)
#169 := (iff #144 #166)
#163 := (or #98 #107 #93)
#167 := (iff #163 #166)
#168 := [rewrite]: #167
#164 := (iff #144 #163)
#161 := (iff #138 #93)
#156 := (not #94)
#159 := (iff #156 #93)
#160 := [rewrite]: #159
#157 := (iff #138 #156)
#111 := (iff #135 #94)
#112 := [rewrite]: #111
#158 := [monotonicity #112]: #157
#162 := [trans #158 #160]: #161
#165 := [monotonicity #162]: #164
#170 := [trans #165 #168]: #169
#55 := (forall (vars (?v0 S2)) #43)
#52 := (forall (vars (?v0 S2)) #40)
#58 := (and #52 #55)
#46 := (and #40 #43)
#49 := (forall (vars (?v0 S2)) #46)
#149 := (or #49 #58)
#152 := (and #144 #149)
#127 := (or #58 #49)
#89 := (and #88 #86)
#90 := (not #89)
#113 := (or #98 #107)
#128 := (or #113 #90)
#129 := (and #128 #127)
#153 := (iff #129 #152)
#150 := (iff #127 #149)
#151 := [rewrite]: #150
#147 := (iff #128 #144)
#141 := (or #113 #138)
#145 := (iff #141 #144)
#146 := [rewrite]: #145
#142 := (iff #128 #141)
#139 := (iff #90 #138)
#136 := (iff #89 #135)
#137 := [rewrite]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#148 := [trans #143 #146]: #147
#154 := [monotonicity #148 #151]: #153
#67 := (not #49)
#68 := (iff #58 #67)
#130 := (~ #68 #129)
#91 := (~ #67 #90)
#92 := [sk]: #91
#74 := (not #67)
#76 := (~ #74 #49)
#81 := (~ #49 #49)
#79 := (~ #46 #46)
#80 := [refl]: #79
#82 := [nnf-pos #80]: #81
#83 := [nnf-neg #82]: #76
#125 := (~ #58 #58)
#123 := (~ #55 #55)
#121 := (~ #43 #43)
#122 := [refl]: #121
#124 := [nnf-pos #122]: #123
#119 := (~ #52 #52)
#117 := (~ #40 #40)
#118 := [refl]: #117
#120 := [nnf-pos #118]: #119
#126 := [monotonicity #120 #124]: #125
#114 := (not #58)
#115 := (~ #114 #113)
#108 := (not #55)
#109 := (~ #108 #107)
#110 := [sk]: #109
#99 := (not #52)
#100 := (~ #99 #98)
#101 := [sk]: #100
#116 := [nnf-neg #101 #110]: #115
#131 := [nnf-pos #116 #126 #83 #92]: #130
#12 := (= #11 f1)
#16 := (forall (vars (?v0 S2)) #12)
#10 := (= #9 f1)
#15 := (forall (vars (?v0 S2)) #10)
#17 := (and #15 #16)
#13 := (and #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#18 := (iff #14 #17)
#19 := (not #18)
#71 := (iff #19 #68)
#61 := (iff #49 #58)
#64 := (not #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #19 #64)
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#57 := [quant-intro #45]: #56
#53 := (iff #15 #52)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#54 := [quant-intro #42]: #53
#60 := [monotonicity #54 #57]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#48 := [monotonicity #42 #45]: #47
#51 := [quant-intro #48]: #50
#63 := [monotonicity #51 #60]: #62
#66 := [monotonicity #63]: #65
#72 := [trans #66 #70]: #71
#39 := [asserted]: #19
#75 := [mp #39 #72]: #68
#132 := [mp~ #75 #131]: #129
#133 := [mp #132 #154]: #152
#134 := [and-elim #133]: #144
#171 := [mp #134 #170]: #166
#630 := [unit-resolution #171 #626 #629 #632]: #98
#346 := (or #357 #97)
#347 := [def-axiom]: #346
#619 := [unit-resolution #347 #630]: #357
#631 := (not #357)
#636 := (or #445 #631)
#345 := [quant-inst #95]: #636
#620 := [unit-resolution #345 #639 #619]: false
#621 := [lemma #620]: #445
#693 := (or #666 #690)
#181 := (or #99 #108)
#182 := (not #181)
#178 := (forall (vars (?v0 S2)) #175)
#185 := (or #178 #182)
#694 := (iff #185 #693)
#691 := (iff #182 #690)
#688 := (iff #181 #687)
#685 := (iff #108 #684)
#682 := (iff #55 #679)
#680 := (iff #43 #43)
#681 := [refl]: #680
#683 := [quant-intro #681]: #682
#686 := [monotonicity #683]: #685
#677 := (iff #99 #676)
#674 := (iff #52 #671)
#672 := (iff #40 #40)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#678 := [monotonicity #675]: #677
#689 := [monotonicity #678 #686]: #688
#692 := [monotonicity #689]: #691
#669 := (iff #178 #666)
#667 := (iff #175 #175)
#668 := [refl]: #667
#670 := [quant-intro #668]: #669
#695 := [monotonicity #670 #692]: #694
#186 := (iff #149 #185)
#183 := (iff #58 #182)
#184 := [rewrite]: #183
#179 := (iff #49 #178)
#176 := (iff #46 #175)
#177 := [rewrite]: #176
#180 := [quant-intro #177]: #179
#187 := [monotonicity #180 #184]: #186
#155 := [and-elim #133]: #149
#188 := [mp #155 #187]: #185
#696 := [mp #188 #695]: #693
#349 := [unit-resolution #696 #621]: #690
#246 := (or #687 #671)
#333 := [def-axiom]: #246
#627 := [unit-resolution #333 #349]: #671
#247 := (or #687 #679)
#334 := [def-axiom]: #247
#623 := [unit-resolution #334 #349]: #679
#618 := [hypothesis]: #102
#624 := (or #684 #86)
#465 := [quant-inst #84]: #624
#466 := [unit-resolution #465 #618 #623]: false
#467 := [lemma #466]: #86
#616 := [hypothesis]: #98
#628 := (or #676 #97)
#341 := [quant-inst #95]: #628
#617 := [unit-resolution #341 #616 #627]: false
#622 := [lemma #617]: #97
#609 := [hypothesis]: #107
#611 := (or #684 #106)
#612 := [quant-inst #104]: #611
#610 := [unit-resolution #612 #609 #623]: false
#606 := [lemma #610]: #106
#607 := [unit-resolution #171 #606 #622 #467]: #103
#614 := (or #676 #88)
#608 := [quant-inst #84]: #614
[unit-resolution #608 #607 #627]: false
unsat
3b618dd5f7cad6fec6bf71ac0425349f4d47cb2a 204 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#624 := (pattern #9)
decl f4 :: S1
#12 := f4
decl f1 :: S1
#4 := f1
#45 := (= f1 f4)
#39 := (= f1 #9)
#51 := (or #39 #45)
#630 := (forall (vars (?v0 S2)) (:pat #624) #51)
#93 := (not #45)
decl ?v0!0 :: S2
#84 := ?v0!0
#85 := (f3 ?v0!0)
#86 := (= f1 #85)
#91 := (or #45 #86)
#279 := [hypothesis]: #45
#206 := (or #91 #93)
#293 := [def-axiom]: #206
#616 := [unit-resolution #293 #279]: #91
decl ?v0!1 :: S2
#99 := ?v0!1
#100 := (f3 ?v0!1)
#101 := (= f1 #100)
#121 := (or #45 #101)
#286 := (or #121 #93)
#297 := [def-axiom]: #286
#618 := [unit-resolution #297 #279]: #121
#124 := (not #121)
#92 := (not #91)
#143 := (or #92 #124)
#87 := (not #86)
#127 := (and #93 #87)
#130 := (or #124 #127)
#146 := (iff #130 #143)
#140 := (or #124 #92)
#144 := (iff #140 #143)
#145 := [rewrite]: #144
#141 := (iff #130 #140)
#107 := (iff #127 #92)
#108 := [rewrite]: #107
#142 := [monotonicity #108]: #141
#147 := [trans #142 #145]: #146
#54 := (forall (vars (?v0 S2)) #51)
#42 := (forall (vars (?v0 S2)) #39)
#133 := (or #42 #45 #54)
#136 := (and #130 #133)
#48 := (or #42 #45)
#113 := (or #54 #48)
#96 := (and #87 #93)
#102 := (or #101 #45)
#103 := (not #102)
#114 := (or #103 #96)
#115 := (and #114 #113)
#137 := (iff #115 #136)
#134 := (iff #113 #133)
#135 := [rewrite]: #134
#131 := (iff #114 #130)
#128 := (iff #96 #127)
#129 := [rewrite]: #128
#125 := (iff #103 #124)
#122 := (iff #102 #121)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#132 := [monotonicity #126 #129]: #131
#138 := [monotonicity #132 #135]: #137
#63 := (not #48)
#64 := (iff #54 #63)
#116 := (~ #64 #115)
#97 := (~ #63 #96)
#94 := (~ #93 #93)
#95 := [refl]: #94
#88 := (not #42)
#89 := (~ #88 #87)
#90 := [sk]: #89
#98 := [nnf-neg #90 #95]: #97
#81 := (not #63)
#82 := (~ #81 #48)
#79 := (~ #48 #48)
#70 := (~ #45 #45)
#72 := [refl]: #70
#77 := (~ #42 #42)
#75 := (~ #39 #39)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#80 := [monotonicity #78 #72]: #79
#83 := [nnf-neg #80]: #82
#111 := (~ #54 #54)
#109 := (~ #51 #51)
#110 := [refl]: #109
#112 := [nnf-pos #110]: #111
#104 := (not #54)
#105 := (~ #104 #103)
#106 := [sk]: #105
#117 := [nnf-pos #106 #112 #83 #98]: #116
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (or #10 #13)
#16 := (forall (vars (?v0 S2)) #15)
#11 := (forall (vars (?v0 S2)) #10)
#14 := (or #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#67 := (iff #18 #64)
#57 := (iff #48 #54)
#60 := (not #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #51)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#53 := [monotonicity #41 #47]: #52
#56 := [quant-intro #53]: #55
#49 := (iff #14 #48)
#43 := (iff #11 #42)
#44 := [quant-intro #41]: #43
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#38 := [asserted]: #18
#71 := [mp #38 #68]: #64
#118 := [mp~ #71 #117]: #115
#119 := [mp #118 #138]: #136
#120 := [and-elim #119]: #130
#148 := [mp #120 #147]: #143
#273 := [unit-resolution #148 #618 #616]: false
#405 := [lemma #273]: #93
#625 := (forall (vars (?v0 S2)) (:pat #624) #39)
#262 := (not #625)
#604 := [hypothesis]: #625
#612 := (not #630)
#298 := (not #101)
#272 := [hypothesis]: #298
#256 := (or #612 #101)
#614 := [hypothesis]: #630
#284 := (or #612 #45 #101)
#285 := (or #612 #102)
#613 := (iff #285 #284)
#620 := (or #612 #121)
#617 := (iff #620 #284)
#623 := [rewrite]: #617
#621 := (iff #285 #620)
#622 := [monotonicity #123]: #621
#271 := [trans #622 #623]: #613
#619 := [quant-inst #99]: #285
#276 := [mp #619 #271]: #284
#615 := [unit-resolution #276 #405 #272 #614]: false
#599 := [lemma #615]: #256
#260 := [unit-resolution #599 #272]: #612
#635 := (or #625 #45 #630)
#636 := (iff #133 #635)
#633 := (iff #54 #630)
#631 := (iff #51 #51)
#632 := [refl]: #631
#634 := [quant-intro #632]: #633
#628 := (iff #42 #625)
#626 := (iff #39 #39)
#627 := [refl]: #626
#629 := [quant-intro #627]: #628
#637 := [monotonicity #629 #634]: #636
#139 := [and-elim #119]: #133
#638 := [mp #139 #637]: #635
#261 := [unit-resolution #638 #260 #405]: #625
#263 := (or #262 #101)
#601 := [quant-inst #99]: #263
#602 := [unit-resolution #601 #272 #261]: false
#603 := [lemma #602]: #101
#226 := (or #121 #298)
#299 := [def-axiom]: #226
#605 := [unit-resolution #299 #603]: #121
#242 := [unit-resolution #148 #605]: #92
#207 := (or #91 #87)
#294 := [def-axiom]: #207
#607 := [unit-resolution #294 #242]: #87
#600 := (or #262 #86)
#606 := [quant-inst #84]: #600
#609 := [unit-resolution #606 #607 #604]: false
#247 := [lemma #609]: #262
#594 := [unit-resolution #638 #247 #405]: #630
#611 := (or #612 #45 #86)
#248 := (or #86 #45)
#597 := (or #612 #248)
#323 := (iff #597 #611)
#304 := (or #612 #91)
#322 := (iff #304 #611)
#308 := [rewrite]: #322
#320 := (iff #597 #304)
#610 := (iff #248 #91)
#608 := [rewrite]: #610
#321 := [monotonicity #608]: #320
#214 := [trans #321 #308]: #323
#598 := [quant-inst #84]: #597
#593 := [mp #598 #214]: #611
[unit-resolution #593 #405 #607 #594]: false
unsat
d3ac39bb1c7a6d7418172a244d9e337158e1130d 249 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#650 := (pattern #9)
decl f1 :: S1
#4 := f1
#39 := (= f1 #9)
#651 := (forall (vars (?v0 S2)) (:pat #650) #39)
decl f4 :: S1
#12 := f4
#45 := (= f1 f4)
#93 := (not #45)
#656 := (not #651)
#659 := (or #656 #93)
#662 := (not #659)
#163 := (not #39)
#164 := (or #163 #93)
#165 := (not #164)
#665 := (forall (vars (?v0 S2)) (:pat #650) #165)
#310 := (not #665)
decl ?v0!1 :: S2
#99 := ?v0!1
#100 := (f3 ?v0!1)
#101 := (= f1 #100)
#91 := (not #101)
#92 := (or #93 #91)
decl ?v0!0 :: S2
#84 := ?v0!0
#85 := (f3 ?v0!0)
#86 := (= f1 #85)
#87 := (not #86)
#305 := (or #93 #87)
#323 := [hypothesis]: #87
#298 := (or #305 #86)
#641 := [def-axiom]: #298
#286 := [unit-resolution #641 #323]: #305
#324 := (or #656 #86)
#312 := [hypothesis]: #651
#252 := [quant-inst #84]: #324
#325 := [unit-resolution #252 #323 #312]: false
#322 := [lemma #325]: #324
#287 := [unit-resolution #322 #323]: #656
#232 := (or #659 #651)
#319 := [def-axiom]: #232
#288 := [unit-resolution #319 #287]: #659
#670 := (or #662 #665)
#168 := (forall (vars (?v0 S2)) #165)
#42 := (forall (vars (?v0 S2)) #39)
#88 := (not #42)
#159 := (or #88 #93)
#160 := (not #159)
#171 := (or #160 #168)
#671 := (iff #171 #670)
#668 := (iff #168 #665)
#666 := (iff #165 #165)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#663 := (iff #160 #662)
#660 := (iff #159 #659)
#657 := (iff #88 #656)
#654 := (iff #42 #651)
#652 := (iff #39 #39)
#653 := [refl]: #652
#655 := [quant-intro #653]: #654
#658 := [monotonicity #655]: #657
#661 := [monotonicity #658]: #660
#664 := [monotonicity #661]: #663
#672 := [monotonicity #664 #669]: #671
#51 := (and #39 #45)
#54 := (forall (vars (?v0 S2)) #51)
#48 := (and #42 #45)
#135 := (or #48 #54)
#172 := (iff #135 #171)
#169 := (iff #54 #168)
#166 := (iff #51 #165)
#167 := [rewrite]: #166
#170 := [quant-intro #167]: #169
#161 := (iff #48 #160)
#162 := [rewrite]: #161
#173 := [monotonicity #162 #170]: #172
#121 := (and #45 #101)
#124 := (not #121)
#130 := (or #93 #87 #124)
#138 := (and #130 #135)
#113 := (or #54 #48)
#96 := (or #87 #93)
#102 := (and #101 #45)
#103 := (not #102)
#114 := (or #103 #96)
#115 := (and #114 #113)
#139 := (iff #115 #138)
#136 := (iff #113 #135)
#137 := [rewrite]: #136
#133 := (iff #114 #130)
#127 := (or #124 #96)
#131 := (iff #127 #130)
#132 := [rewrite]: #131
#128 := (iff #114 #127)
#125 := (iff #103 #124)
#122 := (iff #102 #121)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#129 := [monotonicity #126]: #128
#134 := [trans #129 #132]: #133
#140 := [monotonicity #134 #137]: #139
#63 := (not #48)
#64 := (iff #54 #63)
#116 := (~ #64 #115)
#97 := (~ #63 #96)
#94 := (~ #93 #93)
#95 := [refl]: #94
#89 := (~ #88 #87)
#90 := [sk]: #89
#98 := [nnf-neg #90 #95]: #97
#81 := (not #63)
#82 := (~ #81 #48)
#79 := (~ #48 #48)
#70 := (~ #45 #45)
#72 := [refl]: #70
#77 := (~ #42 #42)
#75 := (~ #39 #39)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#80 := [monotonicity #78 #72]: #79
#83 := [nnf-neg #80]: #82
#111 := (~ #54 #54)
#109 := (~ #51 #51)
#110 := [refl]: #109
#112 := [nnf-pos #110]: #111
#104 := (not #54)
#105 := (~ #104 #103)
#106 := [sk]: #105
#117 := [nnf-pos #106 #112 #83 #98]: #116
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (and #10 #13)
#16 := (forall (vars (?v0 S2)) #15)
#11 := (forall (vars (?v0 S2)) #10)
#14 := (and #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#67 := (iff #18 #64)
#57 := (iff #48 #54)
#60 := (not #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #51)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#53 := [monotonicity #41 #47]: #52
#56 := [quant-intro #53]: #55
#49 := (iff #14 #48)
#43 := (iff #11 #42)
#44 := [quant-intro #41]: #43
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#38 := [asserted]: #18
#71 := [mp #38 #68]: #64
#118 := [mp~ #71 #117]: #115
#119 := [mp #118 #140]: #138
#141 := [and-elim #119]: #135
#174 := [mp #141 #173]: #171
#673 := [mp #174 #672]: #670
#289 := [unit-resolution #673 #288]: #665
#299 := (not #305)
#311 := (or #310 #299)
#326 := (not #96)
#645 := (or #310 #326)
#647 := (iff #645 #311)
#643 := (iff #311 #311)
#649 := [rewrite]: #643
#431 := (iff #326 #299)
#642 := (iff #96 #305)
#644 := [rewrite]: #642
#638 := [monotonicity #644]: #431
#648 := [monotonicity #638]: #647
#639 := [trans #648 #649]: #647
#646 := [quant-inst #84]: #645
#297 := [mp #646 #639]: #311
#627 := [unit-resolution #297 #289 #286]: false
#628 := [lemma #627]: #86
#107 := (not #92)
#619 := [hypothesis]: #107
#634 := (or #92 #45)
#637 := [def-axiom]: #634
#620 := [unit-resolution #637 #619]: #45
#623 := (or #92 #101)
#624 := [def-axiom]: #623
#342 := [unit-resolution #624 #619]: #101
#153 := (or #93 #87 #91)
#156 := (iff #130 #153)
#150 := (or #93 #87 #92)
#154 := (iff #150 #153)
#155 := [rewrite]: #154
#151 := (iff #130 #150)
#148 := (iff #124 #92)
#143 := (not #107)
#146 := (iff #143 #92)
#147 := [rewrite]: #146
#144 := (iff #124 #143)
#108 := (iff #121 #107)
#142 := [rewrite]: #108
#145 := [monotonicity #142]: #144
#149 := [trans #145 #147]: #148
#152 := [monotonicity #149]: #151
#157 := [trans #152 #155]: #156
#120 := [and-elim #119]: #130
#158 := [mp #120 #157]: #153
#343 := [unit-resolution #158 #342 #620 #628]: false
#617 := [lemma #343]: #92
#349 := (or #107 #310)
#347 := [hypothesis]: #92
#348 := [hypothesis]: #665
#631 := (or #310 #107)
#302 := (or #91 #93)
#640 := (not #302)
#626 := (or #310 #640)
#268 := (iff #626 #631)
#635 := (iff #631 #631)
#273 := [rewrite]: #635
#629 := (iff #640 #107)
#282 := (iff #302 #92)
#625 := [rewrite]: #282
#630 := [monotonicity #625]: #629
#633 := [monotonicity #630]: #268
#274 := [trans #633 #273]: #268
#632 := [quant-inst #99]: #626
#636 := [mp #632 #274]: #631
#334 := [unit-resolution #636 #348 #347]: false
#240 := [lemma #334]: #349
#621 := [unit-resolution #240 #617]: #310
#618 := [unit-resolution #673 #621]: #662
#332 := [unit-resolution #319 #618]: #651
#233 := (or #659 #45)
#320 := [def-axiom]: #233
#333 := [unit-resolution #320 #618]: #45
#335 := [unit-resolution #158 #333 #628]: #91
#622 := (or #656 #101)
#331 := [quant-inst #99]: #622
[unit-resolution #331 #335 #332]: false
unsat
44bf7cfb85eb1c4e00dce5a88ea0a349e1b59c09 49 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S2 S1)
#9 := (:var 0 S2)
#13 := (:var 1 S2)
#14 := (f3 #13 #9)
#15 := (= #14 f1)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#8 := (:var 2 S2)
#10 := (f3 #8 #9)
#11 := (= #10 f1)
#12 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #11)
#17 := (iff #12 #16)
#18 := (not #17)
#67 := (iff #18 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #18 #62)
#60 := (iff #17 true)
#45 := (= f1 #14)
#46 := (forall (vars (?v0 S2) (?v2 S2)) #45)
#55 := (iff #46 #46)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #17 #55)
#53 := (iff #16 #46)
#51 := (iff #15 #45)
#52 := [rewrite]: #51
#54 := [quant-intro #52]: #53
#49 := (iff #12 #46)
#39 := (= f1 #10)
#42 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #39)
#47 := (iff #42 #46)
#48 := [elim-unused]: #47
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#50 := [trans #44 #48]: #49
#57 := [monotonicity #50 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#38 := [asserted]: #18
[mp #38 #68]: false
unsat
07180efbff5a77042937fc4dee6db649992c0567 136 0
#2 := false
decl f3 :: (-> S2 S2 S1)
decl f4 :: S2
#16 := f4
decl f5 :: S2
#20 := f5
#175 := (f3 f5 f4)
decl f1 :: S1
#4 := f1
#262 := (= f1 #175)
#176 := (not #262)
#21 := (f3 f4 f5)
#70 := (= f1 #21)
#105 := (not #70)
#9 := (:var 0 S2)
#17 := (f3 #9 f4)
#64 := (= f1 #17)
#67 := (forall (vars (?v0 S2)) #64)
#76 := (not #67)
#8 := (:var 1 S2)
#12 := (f3 #9 #8)
#49 := (= f1 #12)
#10 := (f3 #8 #9)
#46 := (= f1 #10)
#55 := (not #46)
#56 := (or #55 #49)
#61 := (forall (vars (?v0 S2) (?v1 S2)) #56)
#85 := (not #61)
#94 := (or #85 #76 #70)
#97 := (not #94)
#22 := (= #21 f1)
#18 := (= #17 f1)
#19 := (forall (vars (?v0 S2)) #18)
#23 := (implies #19 #22)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#24 := (implies #15 #23)
#25 := (not #24)
#100 := (iff #25 #97)
#77 := (or #76 #70)
#86 := (or #85 #77)
#91 := (not #86)
#98 := (iff #91 #97)
#95 := (iff #86 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#92 := (iff #25 #91)
#89 := (iff #24 #86)
#82 := (implies #61 #77)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #24 #82)
#80 := (iff #23 #77)
#73 := (implies #67 #70)
#78 := (iff #73 #77)
#79 := [rewrite]: #78
#74 := (iff #23 #73)
#71 := (iff #22 #70)
#72 := [rewrite]: #71
#68 := (iff #19 #67)
#65 := (iff #18 #64)
#66 := [rewrite]: #65
#69 := [quant-intro #66]: #68
#75 := [monotonicity #69 #72]: #74
#81 := [trans #75 #79]: #80
#62 := (iff #15 #61)
#59 := (iff #14 #56)
#52 := (implies #46 #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #14 #52)
#50 := (iff #13 #49)
#51 := [rewrite]: #50
#47 := (iff #11 #46)
#48 := [rewrite]: #47
#54 := [monotonicity #48 #51]: #53
#60 := [trans #54 #58]: #59
#63 := [quant-intro #60]: #62
#84 := [monotonicity #63 #81]: #83
#90 := [trans #84 #88]: #89
#93 := [monotonicity #90]: #92
#101 := [trans #93 #99]: #100
#45 := [asserted]: #25
#102 := [mp #45 #101]: #97
#106 := [not-or-elim #102]: #105
#594 := (pattern #12)
#593 := (pattern #10)
#595 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #593 #594) #56)
#598 := (iff #61 #595)
#596 := (iff #56 #56)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#118 := (~ #61 #61)
#116 := (~ #56 #56)
#117 := [refl]: #116
#119 := [nnf-pos #117]: #118
#103 := [not-or-elim #102]: #61
#108 := [mp~ #103 #119]: #61
#600 := [mp #108 #599]: #595
#266 := (not #595)
#267 := (or #266 #70 #176)
#263 := (or #176 #70)
#195 := (or #266 #263)
#242 := (iff #195 #267)
#177 := (or #70 #176)
#265 := (or #266 #177)
#585 := (iff #265 #267)
#587 := [rewrite]: #585
#269 := (iff #195 #265)
#264 := (iff #263 #177)
#255 := [rewrite]: #264
#248 := [monotonicity #255]: #269
#374 := [trans #248 #587]: #242
#268 := [quant-inst #20 #16]: #195
#581 := [mp #268 #374]: #267
#253 := [unit-resolution #581 #600 #106]: #176
#601 := (pattern #17)
#602 := (forall (vars (?v0 S2)) (:pat #601) #64)
#605 := (iff #67 #602)
#603 := (iff #64 #64)
#604 := [refl]: #603
#606 := [quant-intro #604]: #605
#110 := (~ #67 #67)
#109 := (~ #64 #64)
#120 := [refl]: #109
#111 := [nnf-pos #120]: #110
#104 := [not-or-elim #102]: #67
#121 := [mp~ #104 #111]: #67
#607 := [mp #121 #606]: #602
#588 := (not #602)
#589 := (or #588 #262)
#590 := [quant-inst #20]: #589
[unit-resolution #590 #607 #253]: false
unsat
1406e48b72695c3b5437881f101d623930557601 124 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: (-> S2 S2)
decl f5 :: S2
#16 := f5
#20 := (f4 f5)
#21 := (f4 #20)
#157 := (f3 #21)
decl f1 :: S1
#4 := f1
#244 := (= f1 #157)
#155 := (f3 #20)
#242 := (= f1 #155)
#17 := (f3 f5)
#65 := (= f1 #17)
#8 := (:var 0 S2)
#11 := (f4 #8)
#12 := (f3 #11)
#50 := (= f1 #12)
#9 := (f3 #8)
#47 := (= f1 #9)
#56 := (not #47)
#57 := (or #56 #50)
#62 := (forall (vars (?v0 S2)) #57)
#68 := (and #62 #65)
#22 := (f4 #21)
#23 := (f3 #22)
#71 := (= f1 #23)
#77 := (not #68)
#78 := (or #77 #71)
#83 := (not #78)
#24 := (= #23 f1)
#18 := (= #17 f1)
#13 := (= #12 f1)
#10 := (= #9 f1)
#14 := (implies #10 #13)
#15 := (forall (vars (?v0 S2)) #14)
#19 := (and #15 #18)
#25 := (implies #19 #24)
#26 := (not #25)
#84 := (iff #26 #83)
#81 := (iff #25 #78)
#74 := (implies #68 #71)
#79 := (iff #74 #78)
#80 := [rewrite]: #79
#75 := (iff #25 #74)
#72 := (iff #24 #71)
#73 := [rewrite]: #72
#69 := (iff #19 #68)
#66 := (iff #18 #65)
#67 := [rewrite]: #66
#63 := (iff #15 #62)
#60 := (iff #14 #57)
#53 := (implies #47 #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #14 #53)
#51 := (iff #13 #50)
#52 := [rewrite]: #51
#48 := (iff #10 #47)
#49 := [rewrite]: #48
#55 := [monotonicity #49 #52]: #54
#61 := [trans #55 #59]: #60
#64 := [quant-intro #61]: #63
#70 := [monotonicity #64 #67]: #69
#76 := [monotonicity #70 #73]: #75
#82 := [trans #76 #80]: #81
#85 := [monotonicity #82]: #84
#46 := [asserted]: #26
#88 := [mp #46 #85]: #83
#86 := [not-or-elim #88]: #68
#89 := [and-elim #86]: #65
#573 := (pattern #11)
#574 := (forall (vars (?v0 S2)) (:pat #573) #57)
#577 := (iff #62 #574)
#575 := (iff #57 #57)
#576 := [refl]: #575
#578 := [quant-intro #576]: #577
#103 := (~ #62 #62)
#101 := (~ #57 #57)
#102 := [refl]: #101
#104 := [nnf-pos #102]: #103
#87 := [and-elim #86]: #62
#93 := [mp~ #87 #104]: #62
#579 := [mp #93 #578]: #574
#156 := (not #65)
#235 := (not #574)
#246 := (or #235 #156 #242)
#243 := (or #156 #242)
#247 := (or #235 #243)
#248 := (iff #247 #246)
#245 := [rewrite]: #248
#175 := [quant-inst #16]: #247
#249 := [mp #175 #245]: #246
#211 := [unit-resolution #249 #579 #89]: #242
#228 := (not #242)
#354 := (or #235 #228 #244)
#565 := (or #228 #244)
#561 := (or #235 #565)
#234 := (iff #561 #354)
#568 := [rewrite]: #234
#233 := [quant-inst #20]: #561
#569 := [mp #233 #568]: #354
#212 := [unit-resolution #569 #579 #211]: #244
#90 := (not #71)
#91 := [not-or-elim #88]: #90
#567 := (not #244)
#572 := (or #235 #71 #567)
#222 := (or #567 #71)
#562 := (or #235 #222)
#548 := (iff #562 #572)
#570 := (or #71 #567)
#225 := (or #235 #570)
#564 := (iff #225 #572)
#205 := [rewrite]: #564
#563 := (iff #562 #225)
#571 := (iff #222 #570)
#566 := [rewrite]: #571
#221 := [monotonicity #566]: #563
#209 := [trans #221 #205]: #548
#220 := [quant-inst #21]: #562
#210 := [mp #220 #209]: #572
[unit-resolution #210 #579 #91 #212]: false
unsat
13b01358656727e1edb81fc16730f2ee5b483b3e 64 0
#2 := false
decl f3 :: (-> S2 S2 S3)
decl f4 :: S2
#14 := f4
decl f5 :: S2
#16 := f5
#18 := (f3 f5 f4)
#17 := (f3 f4 f5)
#19 := (= #17 #18)
#65 := (not #19)
#8 := (:var 1 S2)
#9 := (:var 0 S2)
#11 := (f3 #9 #8)
#10 := (f3 #8 #9)
#12 := (= #10 #11)
#13 := (forall (vars (?v0 S2) (?v1 S2)) #12)
#55 := (not #13)
#56 := (or #55 #19)
#61 := (not #56)
#15 := (= f4 f4)
#20 := (and #15 #19)
#21 := (implies #13 #20)
#22 := (not #21)
#62 := (iff #22 #61)
#59 := (iff #21 #56)
#52 := (implies #13 #19)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #21 #52)
#50 := (iff #20 #19)
#1 := true
#45 := (and true #19)
#48 := (iff #45 #19)
#49 := [rewrite]: #48
#46 := (iff #20 #45)
#43 := (iff #15 true)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#63 := [monotonicity #60]: #62
#42 := [asserted]: #22
#66 := [mp #42 #63]: #61
#67 := [not-or-elim #66]: #65
#550 := (pattern #11)
#549 := (pattern #10)
#551 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #549 #550) #12)
#554 := (iff #13 #551)
#552 := (iff #12 #12)
#553 := [refl]: #552
#555 := [quant-intro #553]: #554
#77 := (~ #13 #13)
#75 := (~ #12 #12)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#64 := [not-or-elim #66]: #13
#69 := [mp~ #64 #78]: #13
#556 := [mp #69 #555]: #551
#132 := (not #551)
#219 := (or #132 #19)
#133 := [quant-inst #14 #16]: #219
[unit-resolution #133 #556 #67]: false
unsat
8729e6c9d45ca3f4162f872a23bbd60b4b1c3963 250 0
#2 := false
decl f3 :: (-> S2 S1)
decl f7 :: S2
#22 := f7
#25 := (f3 f7)
decl f1 :: S1
#4 := f1
#97 := (= f1 #25)
#286 := (not #97)
decl f4 :: (-> S2 S1)
#8 := (:var 0 S2)
#11 := (f4 #8)
#705 := (pattern #11)
#9 := (f3 #8)
#704 := (pattern #9)
#60 := (= f1 #11)
#57 := (= f1 #9)
#66 := (not #57)
#67 := (or #66 #60)
#706 := (forall (vars (?v0 S2)) (:pat #704 #705) #67)
#72 := (forall (vars (?v0 S2)) #67)
#709 := (iff #72 #706)
#707 := (iff #67 #67)
#708 := [refl]: #707
#710 := [quant-intro #708]: #709
#190 := (~ #72 #72)
#204 := (~ #67 #67)
#205 := [refl]: #204
#191 := [nnf-pos #205]: #190
decl f6 :: (-> S2 S1)
#23 := (f6 f7)
#94 := (= f1 #23)
#81 := (not #60)
#89 := (and #66 #81)
#106 := (not #89)
#139 := (or #106 #94 #97)
#142 := (forall (vars (?v0 S2)) #139)
decl f5 :: S2
#15 := f5
#16 := (f4 f5)
#75 := (= f1 #16)
#78 := (not #75)
#151 := (and #72 #78 #142)
#156 := (not #151)
#32 := (f4 f7)
#121 := (= f1 #32)
#162 := (or #94 #121 #156)
#167 := (not #162)
#33 := (= #32 f1)
#24 := (= #23 f1)
#34 := (or #24 #33)
#26 := (= #25 f1)
#27 := (or #24 #26)
#10 := (= #9 f1)
#20 := (not #10)
#12 := (= #11 f1)
#19 := (not #12)
#21 := (and #19 #20)
#28 := (implies #21 #27)
#29 := (forall (vars (?v0 S2)) #28)
#17 := (= #16 f1)
#18 := (not #17)
#30 := (and #18 #29)
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#31 := (and #14 #30)
#35 := (implies #31 #34)
#36 := (not #35)
#170 := (iff #36 #167)
#124 := (or #94 #121)
#100 := (or #94 #97)
#107 := (or #106 #100)
#112 := (forall (vars (?v0 S2)) #107)
#115 := (and #78 #112)
#118 := (and #72 #115)
#130 := (not #118)
#131 := (or #130 #124)
#136 := (not #131)
#168 := (iff #136 #167)
#165 := (iff #131 #162)
#159 := (or #156 #124)
#163 := (iff #159 #162)
#164 := [rewrite]: #163
#160 := (iff #131 #159)
#157 := (iff #130 #156)
#154 := (iff #118 #151)
#145 := (and #78 #142)
#148 := (and #72 #145)
#152 := (iff #148 #151)
#153 := [rewrite]: #152
#149 := (iff #118 #148)
#146 := (iff #115 #145)
#143 := (iff #112 #142)
#140 := (iff #107 #139)
#141 := [rewrite]: #140
#144 := [quant-intro #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#155 := [trans #150 #153]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#166 := [trans #161 #164]: #165
#169 := [monotonicity #166]: #168
#137 := (iff #36 #136)
#134 := (iff #35 #131)
#127 := (implies #118 #124)
#132 := (iff #127 #131)
#133 := [rewrite]: #132
#128 := (iff #35 #127)
#125 := (iff #34 #124)
#122 := (iff #33 #121)
#123 := [rewrite]: #122
#95 := (iff #24 #94)
#96 := [rewrite]: #95
#126 := [monotonicity #96 #123]: #125
#119 := (iff #31 #118)
#116 := (iff #30 #115)
#113 := (iff #29 #112)
#110 := (iff #28 #107)
#103 := (implies #89 #100)
#108 := (iff #103 #107)
#109 := [rewrite]: #108
#104 := (iff #28 #103)
#101 := (iff #27 #100)
#98 := (iff #26 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #96 #99]: #101
#92 := (iff #21 #89)
#86 := (and #81 #66)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #21 #86)
#84 := (iff #20 #66)
#58 := (iff #10 #57)
#59 := [rewrite]: #58
#85 := [monotonicity #59]: #84
#82 := (iff #19 #81)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#83 := [monotonicity #62]: #82
#88 := [monotonicity #83 #85]: #87
#93 := [trans #88 #91]: #92
#105 := [monotonicity #93 #102]: #104
#111 := [trans #105 #109]: #110
#114 := [quant-intro #111]: #113
#79 := (iff #18 #78)
#76 := (iff #17 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#117 := [monotonicity #80 #114]: #116
#73 := (iff #14 #72)
#70 := (iff #13 #67)
#63 := (implies #57 #60)
#68 := (iff #63 #67)
#69 := [rewrite]: #68
#64 := (iff #13 #63)
#65 := [monotonicity #59 #62]: #64
#71 := [trans #65 #69]: #70
#74 := [quant-intro #71]: #73
#120 := [monotonicity #74 #117]: #119
#129 := [monotonicity #120 #126]: #128
#135 := [trans #129 #133]: #134
#138 := [monotonicity #135]: #137
#171 := [trans #138 #169]: #170
#56 := [asserted]: #36
#172 := [mp #56 #171]: #167
#177 := [not-or-elim #172]: #151
#178 := [and-elim #177]: #72
#188 := [mp~ #178 #191]: #72
#711 := [mp #188 #710]: #706
#175 := (not #121)
#176 := [not-or-elim #172]: #175
#288 := (not #706)
#375 := (or #288 #286 #121)
#373 := (or #286 #121)
#366 := (or #288 #373)
#378 := (iff #366 #375)
#306 := [rewrite]: #378
#377 := [quant-inst #22]: #366
#379 := [mp #377 #306]: #375
#401 := [unit-resolution #379 #176 #711]: #286
#220 := (or #57 #60 #97)
#712 := (forall (vars (?v0 S2)) (:pat #704 #705) #220)
#225 := (forall (vars (?v0 S2)) #220)
#715 := (iff #225 #712)
#713 := (iff #220 #220)
#714 := [refl]: #713
#716 := [quant-intro #714]: #715
#195 := (or #106 #97)
#200 := (forall (vars (?v0 S2)) #195)
#226 := (iff #200 #225)
#223 := (iff #195 #220)
#206 := (or #57 #60)
#217 := (or #206 #97)
#221 := (iff #217 #220)
#222 := [rewrite]: #221
#218 := (iff #195 #217)
#215 := (iff #106 #206)
#207 := (not #206)
#210 := (not #207)
#213 := (iff #210 #206)
#214 := [rewrite]: #213
#211 := (iff #106 #210)
#208 := (iff #89 #207)
#209 := [rewrite]: #208
#212 := [monotonicity #209]: #211
#216 := [trans #212 #214]: #215
#219 := [monotonicity #216]: #218
#224 := [trans #219 #222]: #223
#227 := [quant-intro #224]: #226
#187 := (~ #200 #200)
#189 := (~ #195 #195)
#186 := [refl]: #189
#182 := [nnf-pos #186]: #187
#201 := (iff #142 #200)
#198 := (iff #139 #195)
#192 := (or #106 false #97)
#196 := (iff #192 #195)
#197 := [rewrite]: #196
#193 := (iff #139 #192)
#184 := (iff #94 false)
#173 := (not #94)
#174 := [not-or-elim #172]: #173
#185 := [iff-false #174]: #184
#194 := [monotonicity #185]: #193
#199 := [trans #194 #197]: #198
#202 := [quant-intro #199]: #201
#180 := [and-elim #177]: #142
#203 := [mp #180 #202]: #200
#183 := [mp~ #203 #182]: #200
#228 := [mp #183 #227]: #225
#717 := [mp #228 #716]: #712
#359 := (not #712)
#696 := (or #359 #97 #121)
#287 := (or #97 #121 #97)
#698 := (or #359 #287)
#700 := (iff #698 #696)
#374 := (or #97 #121)
#485 := (or #359 #374)
#365 := (iff #485 #696)
#699 := [rewrite]: #365
#692 := (iff #698 #485)
#376 := (iff #287 #374)
#380 := [rewrite]: #376
#364 := [monotonicity #380]: #692
#701 := [trans #364 #699]: #700
#353 := [quant-inst #22]: #698
#702 := [mp #353 #701]: #696
[unit-resolution #702 #176 #717 #401]: false
unsat
b2586fe221d4519a3bc11715a6afc923e5ff0b19 25 0
#2 := false
#8 := (:var 0 S2)
#9 := (= #8 #8)
#10 := (exists (vars (?v0 S2)) #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (exists (vars (?v0 S2)) true)
#37 := (iff #34 true)
#38 := [elim-unused]: #37
#35 := (iff #10 #34)
#32 := (iff #9 true)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
0b9b80c026d042a35c3971f59d4c9cc24f2e1be5 34 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (exists (vars (?v0 S2)) #10)
#12 := (iff #11 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := (= f1 #9)
#37 := (exists (vars (?v0 S2)) #34)
#40 := (iff #37 #37)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#36 := [rewrite]: #35
#39 := [quant-intro #36]: #38
#42 := [monotonicity #39 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
2ad5bfe4ae1a537e6115da5fac3d5e5fd857b08d 263 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#114 := ?v0!1
#115 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#116 := (= f1 #115)
decl f4 :: (-> S2 S1)
decl ?v0!2 :: S2
#121 := ?v0!2
#122 := (f4 ?v0!2)
#123 := (= f1 #122)
#602 := (not #123)
#595 := [hypothesis]: #123
#8 := (:var 0 S2)
#11 := (f4 #8)
#642 := (pattern #11)
#43 := (= f1 #11)
#103 := (not #43)
#643 := (forall (vars (?v0 S2)) (:pat #642) #103)
#648 := (not #643)
#9 := (f3 #8)
#633 := (pattern #9)
#40 := (= f1 #9)
#96 := (not #40)
#634 := (forall (vars (?v0 S2)) (:pat #633) #96)
#639 := (not #634)
#651 := (or #639 #648)
#654 := (not #651)
#46 := (or #40 #43)
#90 := (not #46)
#657 := (forall (vars (?v0 S2)) (:pat #633 #642) #90)
#282 := (not #657)
decl ?v0!0 :: S2
#79 := ?v0!0
#80 := (f4 ?v0!0)
#81 := (= f1 #80)
#82 := (f3 ?v0!0)
#74 := (= f1 #82)
#76 := (or #74 #81)
#265 := (not #116)
#628 := (f4 ?v0!1)
#629 := (= f1 #628)
#630 := (or #116 #629)
#631 := (not #630)
#623 := [hypothesis]: #657
#613 := (or #631 #282)
#626 := [hypothesis]: #630
#281 := (or #282 #631)
#624 := [quant-inst #114]: #281
#612 := [unit-resolution #624 #623 #626]: false
#614 := [lemma #612]: #613
#596 := [unit-resolution #614 #623]: #631
#608 := (or #630 #265)
#269 := [def-axiom]: #608
#597 := [unit-resolution #269 #596]: #265
#295 := (not #74)
#306 := [hypothesis]: #74
#293 := (or #76 #295)
#294 := [def-axiom]: #293
#625 := [unit-resolution #294 #306]: #76
#235 := (or #639 #295)
#307 := [hypothesis]: #634
#308 := [quant-inst #79]: #235
#305 := [unit-resolution #308 #307 #306]: false
#309 := [lemma #305]: #235
#627 := [unit-resolution #309 #306]: #639
#215 := (or #651 #634)
#302 := [def-axiom]: #215
#632 := [unit-resolution #302 #627]: #651
#662 := (or #654 #657)
#93 := (forall (vars (?v0 S2)) #90)
#106 := (forall (vars (?v0 S2)) #103)
#120 := (not #106)
#99 := (forall (vars (?v0 S2)) #96)
#119 := (not #99)
#85 := (or #119 #120)
#86 := (not #85)
#152 := (or #86 #93)
#663 := (iff #152 #662)
#660 := (iff #93 #657)
#658 := (iff #90 #90)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#655 := (iff #86 #654)
#652 := (iff #85 #651)
#649 := (iff #120 #648)
#646 := (iff #106 #643)
#644 := (iff #103 #103)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#650 := [monotonicity #647]: #649
#640 := (iff #119 #639)
#637 := (iff #99 #634)
#635 := (iff #96 #96)
#636 := [refl]: #635
#638 := [quant-intro #636]: #637
#641 := [monotonicity #638]: #640
#653 := [monotonicity #641 #650]: #652
#656 := [monotonicity #653]: #655
#664 := [monotonicity #656 #661]: #663
#110 := (and #99 #106)
#139 := (or #93 #110)
#155 := (iff #139 #152)
#149 := (or #93 #86)
#153 := (iff #149 #152)
#154 := [rewrite]: #153
#150 := (iff #139 #149)
#126 := (iff #110 #86)
#127 := [rewrite]: #126
#151 := [monotonicity #127]: #150
#156 := [trans #151 #154]: #155
#142 := (or #74 #81 #116 #123)
#145 := (and #139 #142)
#128 := (or #116 #123)
#131 := (or #128 #76)
#132 := (or #110 #93)
#133 := (and #132 #131)
#146 := (iff #133 #145)
#143 := (iff #131 #142)
#144 := [rewrite]: #143
#140 := (iff #132 #139)
#141 := [rewrite]: #140
#147 := [monotonicity #141 #144]: #146
#49 := (exists (vars (?v0 S2)) #46)
#67 := (not #49)
#55 := (exists (vars (?v0 S2)) #43)
#52 := (exists (vars (?v0 S2)) #40)
#58 := (or #52 #55)
#68 := (iff #58 #67)
#134 := (~ #68 #133)
#94 := (~ #67 #93)
#91 := (~ #90 #90)
#92 := [refl]: #91
#95 := [nnf-neg #92]: #94
#87 := (not #67)
#88 := (~ #87 #76)
#83 := (~ #49 #76)
#84 := [sk]: #83
#89 := [nnf-neg #84]: #88
#129 := (~ #58 #128)
#124 := (~ #55 #123)
#125 := [sk]: #124
#117 := (~ #52 #116)
#118 := [sk]: #117
#130 := [monotonicity #118 #125]: #129
#111 := (not #58)
#112 := (~ #111 #110)
#107 := (not #55)
#108 := (~ #107 #106)
#104 := (~ #103 #103)
#105 := [refl]: #104
#109 := [nnf-neg #105]: #108
#100 := (not #52)
#101 := (~ #100 #99)
#97 := (~ #96 #96)
#98 := [refl]: #97
#102 := [nnf-neg #98]: #101
#113 := [nnf-neg #102 #109]: #112
#135 := [nnf-pos #113 #130 #89 #95]: #134
#12 := (= #11 f1)
#16 := (exists (vars (?v0 S2)) #12)
#10 := (= #9 f1)
#15 := (exists (vars (?v0 S2)) #10)
#17 := (or #15 #16)
#13 := (or #10 #12)
#14 := (exists (vars (?v0 S2)) #13)
#18 := (iff #14 #17)
#19 := (not #18)
#71 := (iff #19 #68)
#61 := (iff #49 #58)
#64 := (not #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #19 #64)
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#57 := [quant-intro #45]: #56
#53 := (iff #15 #52)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#54 := [quant-intro #42]: #53
#60 := [monotonicity #54 #57]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#48 := [monotonicity #42 #45]: #47
#51 := [quant-intro #48]: #50
#63 := [monotonicity #51 #60]: #62
#66 := [monotonicity #63]: #65
#72 := [trans #66 #70]: #71
#39 := [asserted]: #19
#75 := [mp #39 #72]: #68
#136 := [mp~ #75 #135]: #133
#137 := [mp #136 #147]: #145
#138 := [and-elim #137]: #139
#157 := [mp #138 #156]: #152
#665 := [mp #157 #664]: #662
#622 := [unit-resolution #665 #632]: #657
#288 := (not #76)
#414 := (or #282 #288)
#621 := [quant-inst #79]: #414
#280 := [unit-resolution #621 #622 #625]: false
#285 := [lemma #280]: #295
#609 := (f3 ?v0!2)
#615 := (= f1 #609)
#618 := (or #123 #615)
#619 := (not #618)
#316 := (or #619 #282)
#314 := [hypothesis]: #618
#606 := (or #282 #619)
#251 := (or #615 #123)
#616 := (not #251)
#607 := (or #282 #616)
#329 := (iff #607 #606)
#331 := (iff #606 #606)
#317 := [rewrite]: #331
#617 := (iff #616 #619)
#256 := (iff #251 #618)
#257 := [rewrite]: #256
#620 := [monotonicity #257]: #617
#330 := [monotonicity #620]: #329
#332 := [trans #330 #317]: #329
#313 := [quant-inst #121]: #607
#223 := [mp #313 #332]: #606
#315 := [unit-resolution #223 #623 #314]: false
#318 := [lemma #315]: #316
#588 := [unit-resolution #318 #623]: #619
#603 := (or #618 #602)
#325 := [def-axiom]: #603
#589 := [unit-resolution #325 #588]: #602
#148 := [and-elim #137]: #142
#590 := [unit-resolution #148 #589 #285 #597]: #81
#310 := (not #81)
#594 := (or #76 #310)
#598 := [def-axiom]: #594
#585 := [unit-resolution #598 #590]: #76
#586 := [unit-resolution #621 #623 #585]: false
#591 := [lemma #586]: #282
#599 := [unit-resolution #665 #591]: #654
#216 := (or #651 #643)
#303 := [def-axiom]: #216
#593 := [unit-resolution #303 #599]: #643
#592 := (or #648 #602)
#587 := [quant-inst #121]: #592
#434 := [unit-resolution #587 #593 #595]: false
#435 := [lemma #434]: #602
#436 := [hypothesis]: #81
#579 := (or #648 #310)
#580 := [quant-inst #79]: #579
#578 := [unit-resolution #580 #593 #436]: false
#581 := [lemma #578]: #310
#575 := (or #81 #116 #123)
#576 := [unit-resolution #148 #285]: #575
#577 := [unit-resolution #576 #581 #435]: #116
#584 := [unit-resolution #302 #599]: #634
#582 := (or #639 #265)
#583 := [quant-inst #114]: #582
[unit-resolution #583 #584 #577]: false
unsat
49837552f1674d9522be923aa91cdae0b305a0be 222 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#108 := ?v0!1
#109 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#110 := (= f1 #109)
#154 := (not #110)
decl f4 :: S1
#12 := f4
#45 := (= f1 f4)
#95 := (not #45)
#155 := (or #95 #154)
#156 := (not #155)
decl ?v0!0 :: S2
#75 := ?v0!0
#76 := (f3 ?v0!0)
#77 := (= f1 #76)
#159 := (not #77)
#160 := (or #95 #159)
#161 := (not #160)
#618 := [hypothesis]: #161
#317 := (or #160 #77)
#245 := [def-axiom]: #317
#279 := [unit-resolution #245 #618]: #77
#8 := (:var 0 S2)
#9 := (f3 #8)
#643 := (pattern #9)
#39 := (= f1 #9)
#88 := (not #39)
#114 := (or #88 #95)
#649 := (forall (vars (?v0 S2)) (:pat #643) #114)
#305 := (or #160 #45)
#316 := [def-axiom]: #305
#280 := [unit-resolution #316 #618]: #45
#644 := (forall (vars (?v0 S2)) (:pat #643) #88)
#635 := (not #644)
#637 := (or #635 #159)
#319 := [hypothesis]: #77
#298 := [hypothesis]: #644
#292 := [quant-inst #75]: #637
#424 := [unit-resolution #292 #298 #319]: false
#631 := [lemma #424]: #637
#281 := [unit-resolution #631 #279]: #635
#654 := (or #95 #644 #649)
#147 := (forall (vars (?v0 S2)) #114)
#91 := (forall (vars (?v0 S2)) #88)
#150 := (or #95 #91 #147)
#655 := (iff #150 #654)
#652 := (iff #147 #649)
#650 := (iff #114 #114)
#651 := [refl]: #650
#653 := [quant-intro #651]: #652
#647 := (iff #91 #644)
#645 := (iff #88 #88)
#646 := [refl]: #645
#648 := [quant-intro #646]: #647
#656 := [monotonicity #648 #653]: #655
#51 := (and #39 #45)
#101 := (not #51)
#104 := (forall (vars (?v0 S2)) #101)
#124 := (or #95 #91 #104)
#151 := (iff #124 #150)
#148 := (iff #104 #147)
#145 := (iff #101 #114)
#115 := (not #114)
#140 := (not #115)
#143 := (iff #140 #114)
#144 := [rewrite]: #143
#141 := (iff #101 #140)
#72 := (iff #51 #115)
#79 := [rewrite]: #72
#142 := [monotonicity #79]: #141
#146 := [trans #142 #144]: #145
#149 := [quant-intro #146]: #148
#152 := [monotonicity #149]: #151
#130 := (and #45 #77)
#127 := (and #45 #110)
#133 := (or #127 #130)
#136 := (and #124 #133)
#82 := (and #77 #45)
#111 := (and #110 #45)
#116 := (or #111 #82)
#98 := (or #91 #95)
#117 := (or #104 #98)
#118 := (and #117 #116)
#137 := (iff #118 #136)
#134 := (iff #116 #133)
#131 := (iff #82 #130)
#132 := [rewrite]: #131
#128 := (iff #111 #127)
#129 := [rewrite]: #128
#135 := [monotonicity #129 #132]: #134
#125 := (iff #117 #124)
#126 := [rewrite]: #125
#138 := [monotonicity #126 #135]: #137
#42 := (exists (vars (?v0 S2)) #39)
#48 := (and #42 #45)
#63 := (not #48)
#54 := (exists (vars (?v0 S2)) #51)
#64 := (iff #54 #63)
#119 := (~ #64 #118)
#99 := (~ #63 #98)
#96 := (~ #95 #95)
#97 := [refl]: #96
#92 := (not #42)
#93 := (~ #92 #91)
#89 := (~ #88 #88)
#90 := [refl]: #89
#94 := [nnf-neg #90]: #93
#100 := [nnf-neg #94 #97]: #99
#85 := (not #63)
#86 := (~ #85 #82)
#83 := (~ #48 #82)
#80 := (~ #45 #45)
#81 := [refl]: #80
#78 := (~ #42 #77)
#70 := [sk]: #78
#84 := [monotonicity #70 #81]: #83
#87 := [nnf-neg #84]: #86
#112 := (~ #54 #111)
#113 := [sk]: #112
#105 := (not #54)
#106 := (~ #105 #104)
#102 := (~ #101 #101)
#103 := [refl]: #102
#107 := [nnf-neg #103]: #106
#120 := [nnf-pos #107 #113 #87 #100]: #119
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (and #10 #13)
#16 := (exists (vars (?v0 S2)) #15)
#11 := (exists (vars (?v0 S2)) #10)
#14 := (and #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#67 := (iff #18 #64)
#57 := (iff #48 #54)
#60 := (not #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #51)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#53 := [monotonicity #41 #47]: #52
#56 := [quant-intro #53]: #55
#49 := (iff #14 #48)
#43 := (iff #11 #42)
#44 := [quant-intro #41]: #43
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#38 := [asserted]: #18
#71 := [mp #38 #68]: #64
#121 := [mp~ #71 #120]: #118
#122 := [mp #121 #138]: #136
#123 := [and-elim #122]: #124
#153 := [mp #123 #152]: #150
#657 := [mp #153 #656]: #654
#282 := [unit-resolution #657 #281 #280]: #649
#639 := (not #649)
#640 := (or #639 #95 #159)
#303 := (or #159 #95)
#641 := (or #639 #303)
#291 := (iff #641 #640)
#642 := (or #639 #160)
#295 := (iff #642 #640)
#633 := [rewrite]: #295
#632 := (iff #641 #642)
#304 := (iff #303 #160)
#638 := [rewrite]: #304
#290 := [monotonicity #638]: #632
#634 := [trans #290 #633]: #291
#636 := [quant-inst #75]: #641
#275 := [mp #636 #634]: #640
#620 := [unit-resolution #275 #280 #282 #279]: false
#621 := [lemma #620]: #160
#164 := (or #156 #161)
#165 := (iff #133 #164)
#162 := (iff #130 #161)
#163 := [rewrite]: #162
#157 := (iff #127 #156)
#158 := [rewrite]: #157
#166 := [monotonicity #158 #163]: #165
#139 := [and-elim #122]: #133
#167 := [mp #139 #166]: #164
#617 := [unit-resolution #167 #621]: #156
#226 := (or #155 #110)
#313 := [def-axiom]: #226
#323 := [unit-resolution #313 #617]: #110
#225 := (or #155 #45)
#312 := [def-axiom]: #225
#340 := [unit-resolution #312 #617]: #45
#339 := [hypothesis]: #649
#619 := (or #639 #95 #154)
#622 := (or #154 #95)
#625 := (or #639 #622)
#627 := (iff #625 #619)
#626 := (or #639 #155)
#267 := (iff #626 #619)
#629 := [rewrite]: #267
#628 := (iff #625 #626)
#623 := (iff #622 #155)
#624 := [rewrite]: #623
#266 := [monotonicity #624]: #628
#630 := [trans #266 #629]: #627
#261 := [quant-inst #108]: #625
#616 := [mp #261 #630]: #619
#341 := [unit-resolution #616 #340 #339 #323]: false
#327 := [lemma #341]: #639
#342 := [unit-resolution #657 #327 #340]: #644
#612 := (or #635 #154)
#613 := [quant-inst #108]: #612
[unit-resolution #613 #342 #323]: false
unsat
ae4569403e4041d6e7e74864d4d8162485073321 49 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S4 S1)
#9 := (:var 0 S4)
#13 := (:var 1 S2)
#14 := (f3 #13 #9)
#15 := (= #14 f1)
#16 := (exists (vars (?v0 S2) (?v1 S4)) #15)
#8 := (:var 2 S2)
#10 := (f3 #8 #9)
#11 := (= #10 f1)
#12 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #11)
#17 := (iff #12 #16)
#18 := (not #17)
#67 := (iff #18 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #18 #62)
#60 := (iff #17 true)
#45 := (= f1 #14)
#46 := (exists (vars (?v0 S2) (?v2 S4)) #45)
#55 := (iff #46 #46)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #17 #55)
#53 := (iff #16 #46)
#51 := (iff #15 #45)
#52 := [rewrite]: #51
#54 := [quant-intro #52]: #53
#49 := (iff #12 #46)
#39 := (= f1 #10)
#42 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #39)
#47 := (iff #42 #46)
#48 := [elim-unused]: #47
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#50 := [trans #44 #48]: #49
#57 := [monotonicity #50 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#38 := [asserted]: #18
[mp #38 #68]: false
unsat
d1b3651883bd583f235d214bf142f4826c696167 122 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#125 := ?v0!1
#128 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#129 := (= f1 #128)
decl f4 :: (-> S2 S1)
#126 := (f4 ?v0!1)
#127 := (= f1 #126)
#138 := (and #127 #129)
#130 := (and #129 #127)
#139 := (iff #130 #138)
#140 := [rewrite]: #139
#8 := (:var 0 S2)
#14 := (f4 #8)
#56 := (= f1 #14)
#9 := (f3 #8)
#44 := (= f1 #9)
#59 := (and #44 #56)
#62 := (exists (vars (?v0 S2)) #59)
#131 := (~ #62 #130)
#132 := [sk]: #131
#53 := (exists (vars (?v0 S2)) #44)
#65 := (or #53 #62)
#113 := (iff #65 #62)
#108 := (or false #62)
#111 := (iff #108 #62)
#112 := [rewrite]: #111
#109 := (iff #65 #108)
#106 := (iff #53 false)
#68 := (not #53)
#47 := (not #44)
#50 := (exists (vars (?v0 S2)) #47)
#92 := (and #50 #68 #65)
#10 := (= #9 f1)
#13 := (exists (vars (?v0 S2)) #10)
#19 := (not #13)
#15 := (= #14 f1)
#16 := (and #10 #15)
#17 := (exists (vars (?v0 S2)) #16)
#18 := (or #13 #17)
#20 := (and #18 #19)
#11 := (not #10)
#12 := (exists (vars (?v0 S2)) #11)
#21 := (and #12 #20)
#22 := (not #21)
#23 := (not #22)
#95 := (iff #23 #92)
#74 := (and #68 #65)
#79 := (and #50 #74)
#93 := (iff #79 #92)
#94 := [rewrite]: #93
#90 := (iff #23 #79)
#82 := (not #79)
#85 := (not #82)
#88 := (iff #85 #79)
#89 := [rewrite]: #88
#86 := (iff #23 #85)
#83 := (iff #22 #82)
#80 := (iff #21 #79)
#77 := (iff #20 #74)
#71 := (and #65 #68)
#75 := (iff #71 #74)
#76 := [rewrite]: #75
#72 := (iff #20 #71)
#69 := (iff #19 #68)
#54 := (iff #13 #53)
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#55 := [quant-intro #46]: #54
#70 := [monotonicity #55]: #69
#66 := (iff #18 #65)
#63 := (iff #17 #62)
#60 := (iff #16 #59)
#57 := (iff #15 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #46 #58]: #60
#64 := [quant-intro #61]: #63
#67 := [monotonicity #55 #64]: #66
#73 := [monotonicity #67 #70]: #72
#78 := [trans #73 #76]: #77
#51 := (iff #12 #50)
#48 := (iff #11 #47)
#49 := [monotonicity #46]: #48
#52 := [quant-intro #49]: #51
#81 := [monotonicity #52 #78]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#96 := [trans #91 #94]: #95
#43 := [asserted]: #23
#97 := [mp #43 #96]: #92
#99 := [and-elim #97]: #68
#107 := [iff-false #99]: #106
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#100 := [and-elim #97]: #65
#115 := [mp #100 #114]: #62
#135 := [mp~ #115 #132]: #130
#136 := [mp #135 #140]: #138
#141 := [and-elim #136]: #129
#615 := (pattern #9)
#616 := (forall (vars (?v0 S2)) (:pat #615) #47)
#121 := (forall (vars (?v0 S2)) #47)
#619 := (iff #121 #616)
#617 := (iff #47 #47)
#618 := [refl]: #617
#620 := [quant-intro #618]: #619
#122 := (~ #68 #121)
#118 := (~ #47 #47)
#119 := [refl]: #118
#123 := [nnf-neg #119]: #122
#124 := [mp~ #99 #123]: #121
#621 := [mp #124 #620]: #616
#197 := (not #129)
#285 := (not #616)
#199 := (or #285 #197)
#286 := [quant-inst #125]: #199
[unit-resolution #286 #621 #141]: false
unsat
5dbb54e3f79f77198d3a0109880c6612eee2c993 1 2
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!10)

317998ded3ba09b3ca0b4841fddbf22609971173 1 0
unsat
5d41ec3d43526a42a83f6a2101e1fdacb01a1e18 1 0
unsat
4353868152099814cbf92f87fbe5cfd7c0e847d9 1 0
unsat
d1960c3de8c282f29b8966d1941c342d346c0824 1 0
unsat
0bb08ec8e7f02569dc9b5667cb6facd8b7ac2d68 1 0
unsat
94815111a97147cb14d9a6ed4a08e988cd5d7cba 105 0
#2 := false
decl f3 :: (-> S1 S1)
decl ?v0!1 :: S1
#83 := ?v0!1
#84 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#85 := (= f1 #84)
decl ?v0!0 :: S1
#69 := ?v0!0
#70 := (f3 ?v0!0)
#71 := (= f1 #70)
#72 := (not #71)
#167 := [hypothesis]: #71
#8 := (:var 0 S1)
#9 := (f3 #8)
#585 := (pattern #9)
#37 := (= f1 #9)
#46 := (not #37)
#586 := (forall (vars (?v0 S1)) (:pat #585) #46)
#49 := (forall (vars (?v0 S1)) #46)
#589 := (iff #49 #586)
#587 := (iff #46 #46)
#588 := [refl]: #587
#590 := [quant-intro #588]: #589
#105 := (or #71 #85)
#110 := (and #49 #105)
#64 := (not #72)
#90 := (or #85 #64)
#91 := (or #49 #49)
#92 := (and #91 #90)
#111 := (iff #92 #110)
#108 := (iff #90 #105)
#102 := (or #85 #71)
#106 := (iff #102 #105)
#107 := [rewrite]: #106
#103 := (iff #90 #102)
#100 := (iff #64 #71)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#109 := [trans #104 #107]: #108
#98 := (iff #91 #49)
#99 := [rewrite]: #98
#112 := [monotonicity #99 #109]: #111
#40 := (exists (vars (?v0 S1)) #37)
#58 := (iff #40 #49)
#93 := (~ #58 #92)
#79 := (~ #49 #49)
#77 := (~ #46 #46)
#78 := [refl]: #77
#80 := [nnf-pos #78]: #79
#66 := (not #49)
#73 := (~ #66 #64)
#74 := [sk]: #73
#86 := (~ #40 #85)
#87 := [sk]: #86
#43 := (not #40)
#81 := (~ #43 #49)
#82 := [nnf-neg #78]: #81
#94 := [nnf-pos #82 #87 #74 #80]: #93
#10 := (= #9 f1)
#13 := (not #10)
#14 := (forall (vars (?v0 S1)) #13)
#11 := (exists (vars (?v0 S1)) #10)
#12 := (not #11)
#15 := (iff #12 #14)
#16 := (not #15)
#61 := (iff #16 #58)
#52 := (iff #43 #49)
#55 := (not #52)
#59 := (iff #55 #58)
#60 := [rewrite]: #59
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#38 := (iff #10 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39]: #47
#51 := [quant-intro #48]: #50
#44 := (iff #12 #43)
#41 := (iff #11 #40)
#42 := [quant-intro #39]: #41
#45 := [monotonicity #42]: #44
#54 := [monotonicity #45 #51]: #53
#57 := [monotonicity #54]: #56
#62 := [trans #57 #60]: #61
#36 := [asserted]: #16
#65 := [mp #36 #62]: #58
#95 := [mp~ #65 #94]: #92
#96 := [mp #95 #112]: #110
#97 := [and-elim #96]: #49
#591 := [mp #97 #590]: #586
#168 := (not #586)
#255 := (or #168 #72)
#169 := [quant-inst #69]: #255
#254 := [unit-resolution #169 #591 #167]: false
#256 := [lemma #254]: #72
#113 := [and-elim #96]: #105
#258 := [unit-resolution #113 #256]: #85
#247 := (not #85)
#187 := (or #168 #247)
#260 := [quant-inst #83]: #187
[unit-resolution #260 #591 #258]: false
unsat
ebdc89108806093e6794a177b157cfa4cf50cf95 226 0
#2 := false
decl f3 :: (-> S1 S1)
decl ?v0!0 :: S1
#87 := ?v0!0
#88 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#89 := (= f1 #88)
#90 := (not #89)
decl ?v0!1 :: S1
#119 := ?v0!1
#120 := (f3 ?v0!1)
#121 := (= f1 #120)
#122 := (not #121)
#254 := [hypothesis]: #122
#8 := (:var 0 S1)
#9 := (f3 #8)
#630 := (pattern #9)
#39 := (= f1 #9)
#631 := (forall (vars (?v0 S1)) (:pat #630) #39)
#636 := (not #631)
decl f4 :: S1
#11 := f4
#42 := (= f1 f4)
#639 := (or #42 #636)
#642 := (not #639)
#48 := (not #39)
#49 := (or #48 #42)
#97 := (not #49)
#645 := (forall (vars (?v0 S1)) (:pat #630) #97)
#285 := (not #645)
#266 := (or #42 #90)
#127 := (or #42 #122)
#305 := (not #127)
#620 := [hypothesis]: #645
#621 := (or #305 #285)
#282 := [hypothesis]: #127
#622 := (or #285 #305)
#292 := (or #122 #42)
#303 := (not #292)
#624 := (or #285 #303)
#411 := (iff #624 #622)
#290 := (iff #622 #622)
#291 := [rewrite]: #290
#302 := (iff #303 #305)
#304 := (iff #292 #127)
#232 := [rewrite]: #304
#306 := [monotonicity #232]: #302
#618 := [monotonicity #306]: #411
#625 := [trans #618 #291]: #411
#279 := [quant-inst #119]: #624
#626 := [mp #279 #625]: #622
#278 := [unit-resolution #626 #620 #282]: false
#262 := [lemma #278]: #621
#310 := [unit-resolution #262 #620]: #305
#623 := (or #127 #121)
#629 := [def-axiom]: #623
#326 := [unit-resolution #629 #310]: #121
#103 := (not #42)
#627 := (or #127 #103)
#628 := [def-axiom]: #627
#327 := [unit-resolution #628 #310]: #103
#141 := (or #42 #90 #122)
#57 := (forall (vars (?v0 S1)) #39)
#113 := (and #103 #57)
#100 := (forall (vars (?v0 S1)) #97)
#138 := (or #100 #113)
#144 := (and #138 #141)
#82 := (or #90 #42)
#130 := (or #127 #82)
#131 := (or #113 #100)
#132 := (and #131 #130)
#145 := (iff #132 #144)
#142 := (iff #130 #141)
#143 := [rewrite]: #142
#139 := (iff #131 #138)
#140 := [rewrite]: #139
#146 := [monotonicity #140 #143]: #145
#54 := (exists (vars (?v0 S1)) #49)
#75 := (not #54)
#63 := (not #57)
#64 := (or #42 #63)
#76 := (iff #64 #75)
#133 := (~ #76 #132)
#101 := (~ #75 #100)
#98 := (~ #97 #97)
#99 := [refl]: #98
#102 := [nnf-neg #99]: #101
#94 := (not #75)
#95 := (~ #94 #82)
#84 := (~ #54 #82)
#91 := [sk]: #84
#96 := [nnf-neg #91]: #95
#128 := (~ #64 #127)
#123 := (~ #63 #122)
#124 := [sk]: #123
#117 := (~ #42 #42)
#118 := [refl]: #117
#129 := [monotonicity #118 #124]: #128
#114 := (not #64)
#115 := (~ #114 #113)
#110 := (not #63)
#111 := (~ #110 #57)
#108 := (~ #57 #57)
#106 := (~ #39 #39)
#107 := [refl]: #106
#109 := [nnf-pos #107]: #108
#112 := [nnf-neg #109]: #111
#104 := (~ #103 #103)
#105 := [refl]: #104
#116 := [nnf-neg #105 #112]: #115
#134 := [nnf-pos #116 #129 #96 #102]: #133
#12 := (= f4 f1)
#10 := (= #9 f1)
#15 := (forall (vars (?v0 S1)) #10)
#16 := (implies #15 #12)
#13 := (implies #10 #12)
#14 := (exists (vars (?v0 S1)) #13)
#17 := (iff #14 #16)
#18 := (not #17)
#79 := (iff #18 #76)
#69 := (iff #54 #64)
#72 := (not #69)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #18 #72)
#70 := (iff #17 #69)
#67 := (iff #16 #64)
#60 := (implies #57 #42)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #16 #60)
#43 := (iff #12 #42)
#44 := [rewrite]: #43
#58 := (iff #15 #57)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#59 := [quant-intro #41]: #58
#62 := [monotonicity #59 #44]: #61
#68 := [trans #62 #66]: #67
#55 := (iff #14 #54)
#52 := (iff #13 #49)
#45 := (implies #39 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #13 #45)
#47 := [monotonicity #41 #44]: #46
#53 := [trans #47 #51]: #52
#56 := [quant-intro #53]: #55
#71 := [monotonicity #56 #68]: #70
#74 := [monotonicity #71]: #73
#80 := [trans #74 #78]: #79
#38 := [asserted]: #18
#83 := [mp #38 #80]: #76
#135 := [mp~ #83 #134]: #132
#136 := [mp #135 #146]: #144
#147 := [and-elim #136]: #141
#328 := [unit-resolution #147 #327 #326]: #90
#614 := (or #266 #89)
#617 := [def-axiom]: #614
#314 := [unit-resolution #617 #328]: #266
#269 := (not #266)
#609 := (or #285 #269)
#605 := (not #82)
#610 := (or #285 #605)
#606 := (iff #610 #609)
#248 := (iff #609 #609)
#613 := [rewrite]: #248
#607 := (iff #605 #269)
#267 := (iff #82 #266)
#268 := [rewrite]: #267
#608 := [monotonicity #268]: #607
#612 := [monotonicity #608]: #606
#615 := [trans #612 #613]: #606
#611 := [quant-inst #87]: #610
#253 := [mp #611 #615]: #609
#329 := [unit-resolution #253 #620 #314]: false
#220 := [lemma #329]: #285
#650 := (or #642 #645)
#149 := (or #114 #100)
#651 := (iff #149 #650)
#648 := (iff #100 #645)
#646 := (iff #97 #97)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#643 := (iff #114 #642)
#640 := (iff #64 #639)
#637 := (iff #63 #636)
#634 := (iff #57 #631)
#632 := (iff #39 #39)
#633 := [refl]: #632
#635 := [quant-intro #633]: #634
#638 := [monotonicity #635]: #637
#641 := [monotonicity #638]: #640
#644 := [monotonicity #641]: #643
#652 := [monotonicity #644 #649]: #651
#152 := (iff #138 #149)
#125 := (or #100 #114)
#150 := (iff #125 #149)
#151 := [rewrite]: #150
#126 := (iff #138 #125)
#92 := (iff #113 #114)
#93 := [rewrite]: #92
#148 := [monotonicity #93]: #126
#153 := [trans #148 #151]: #152
#137 := [and-elim #136]: #138
#154 := [mp #137 #153]: #149
#653 := [mp #154 #652]: #650
#616 := [unit-resolution #653 #220]: #642
#213 := (or #639 #631)
#300 := [def-axiom]: #213
#599 := [unit-resolution #300 #616]: #631
#603 := (or #636 #121)
#604 := [quant-inst #119]: #603
#600 := [unit-resolution #604 #599 #254]: false
#322 := [lemma #600]: #121
#597 := (or #90 #122)
#212 := (or #639 #103)
#299 := [def-axiom]: #212
#323 := [unit-resolution #299 #616]: #103
#602 := [unit-resolution #147 #323]: #597
#311 := [unit-resolution #602 #322]: #90
#601 := (or #636 #89)
#598 := [quant-inst #87]: #601
[unit-resolution #598 #599 #311]: false
unsat
797f3bc02d63ecc5168af260ca5e6bfbc4eb39d0 156 0
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f4 :: S1
#15 := f4
#16 := (f3 f4 #9)
#609 := (pattern #16)
decl f1 :: S1
#4 := f1
#57 := (= f1 #16)
#106 := (not #57)
#610 := (forall (vars (?v0 S2)) (:pat #609) #106)
decl f5 :: S2
#19 := f5
#20 := (f3 f4 f5)
#63 := (= f1 #20)
#184 := (= f1 f4)
#185 := (iff #63 #184)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#602 := (pattern #10)
#48 := (= f1 #8)
#45 := (= f1 #10)
#51 := (iff #45 #48)
#603 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #602) #51)
#54 := (forall (vars (?v0 S1) (?v1 S2)) #51)
#606 := (iff #54 #603)
#604 := (iff #51 #51)
#605 := [refl]: #604
#607 := [quant-intro #605]: #606
#88 := (~ #54 #54)
#95 := (~ #51 #51)
#96 := [refl]: #95
#89 := [nnf-pos #96]: #88
#60 := (exists (vars (?v0 S2)) #57)
#66 := (iff #60 #63)
#72 := (not #54)
#73 := (or #72 #66)
#78 := (not #73)
#21 := (= #20 f1)
#17 := (= #16 f1)
#18 := (exists (vars (?v0 S2)) #17)
#22 := (iff #18 #21)
#12 := (= #8 f1)
#11 := (= #10 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#23 := (implies #14 #22)
#24 := (not #23)
#79 := (iff #24 #78)
#76 := (iff #23 #73)
#69 := (implies #54 #66)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #23 #69)
#67 := (iff #22 #66)
#64 := (iff #21 #63)
#65 := [rewrite]: #64
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#68 := [monotonicity #62 #65]: #67
#55 := (iff #14 #54)
#52 := (iff #13 #51)
#49 := (iff #12 #48)
#50 := [rewrite]: #49
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#53 := [monotonicity #47 #50]: #52
#56 := [quant-intro #53]: #55
#71 := [monotonicity #56 #68]: #70
#77 := [trans #71 #75]: #76
#80 := [monotonicity #77]: #79
#44 := [asserted]: #24
#83 := [mp #44 #80]: #78
#81 := [not-or-elim #83]: #54
#86 := [mp~ #81 #89]: #54
#608 := [mp #86 #607]: #603
#186 := (not #603)
#262 := (or #186 #185)
#263 := [quant-inst #15 #19]: #262
#272 := [unit-resolution #263 #608]: #185
decl ?v0!0 :: S2
#87 := ?v0!0
#97 := (f3 f4 ?v0!0)
#98 := (= f1 #97)
#271 := (iff #98 #184)
#273 := (or #186 #271)
#264 := [quant-inst #15 #87]: #273
#590 := [unit-resolution #264 #608]: #271
#275 := (not #271)
#593 := (or #275 #184)
#112 := (not #63)
#592 := [hypothesis]: #112
#117 := (or #63 #98)
#109 := (forall (vars (?v0 S2)) #106)
#118 := (or #112 #109)
#125 := (and #117 #118)
#119 := (and #118 #117)
#126 := (iff #119 #125)
#127 := [rewrite]: #126
#90 := (not #60)
#91 := (iff #63 #90)
#120 := (~ #91 #119)
#110 := (~ #90 #109)
#107 := (~ #106 #106)
#108 := [refl]: #107
#111 := [nnf-neg #108]: #110
#103 := (not #90)
#104 := (~ #103 #98)
#99 := (~ #60 #98)
#100 := [sk]: #99
#105 := [nnf-neg #100]: #104
#115 := (~ #63 #63)
#116 := [refl]: #115
#113 := (~ #112 #112)
#114 := [refl]: #113
#121 := [nnf-pos #114 #116 #105 #111]: #120
#82 := (not #66)
#92 := (iff #82 #91)
#93 := [rewrite]: #92
#84 := [not-or-elim #83]: #82
#94 := [mp #84 #93]: #91
#122 := [mp~ #94 #121]: #119
#123 := [mp #122 #127]: #125
#124 := [and-elim #123]: #117
#250 := [unit-resolution #124 #592]: #98
#274 := (not #98)
#278 := (or #275 #274 #184)
#257 := [def-axiom]: #278
#234 := [unit-resolution #257 #250]: #593
#577 := [unit-resolution #234 #590]: #184
#276 := (not #184)
#597 := (not #185)
#238 := (or #597 #276)
#598 := (or #597 #63 #276)
#599 := [def-axiom]: #598
#239 := [unit-resolution #599 #592]: #238
#240 := [unit-resolution #239 #577 #272]: false
#241 := [lemma #240]: #63
#615 := (or #112 #610)
#616 := (iff #118 #615)
#613 := (iff #109 #610)
#611 := (iff #106 #106)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#617 := [monotonicity #614]: #616
#128 := [and-elim #123]: #118
#618 := [mp #128 #617]: #615
#204 := [unit-resolution #618 #241]: #610
#601 := (not #610)
#591 := (or #601 #112)
#249 := [quant-inst #19]: #591
[unit-resolution #249 #241 #204]: false
unsat
c5bac93463cdcf5247c83e8a4ad5b209aa936d19 108 0
#2 := false
decl f3 :: (-> S1 S1)
#11 := (:var 0 S1)
#12 := (f3 #11)
#594 := (pattern #12)
decl f1 :: S1
#4 := f1
#48 := (= f1 #12)
#57 := (not #48)
#595 := (forall (vars (?v0 S1)) (:pat #594) #57)
#60 := (forall (vars (?v0 S1)) #57)
#598 := (iff #60 #595)
#596 := (iff #57 #57)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#51 := (exists (vars (?v0 S1)) #48)
#54 := (not #51)
#116 := (~ #54 #60)
#118 := (~ #57 #57)
#119 := [refl]: #118
#117 := [nnf-neg #119]: #116
decl f4 :: S1
#8 := f4
#9 := (f3 f4)
#45 := (= f1 #9)
#63 := (ite #45 #54 #60)
#113 := (iff #63 #54)
#1 := true
#108 := (ite true #54 #60)
#111 := (iff #108 #54)
#112 := [rewrite]: #111
#109 := (iff #63 #108)
#106 := (iff #45 true)
decl f5 :: S1
#19 := f5
#20 := (f3 f5)
#66 := (= f1 #20)
#81 := (not #63)
#72 := (not #45)
#90 := (or #72 #81 #66)
#93 := (not #90)
#21 := (= #20 f1)
#10 := (= #9 f1)
#22 := (implies #10 #21)
#13 := (= #12 f1)
#16 := (not #13)
#17 := (forall (vars (?v0 S1)) #16)
#14 := (exists (vars (?v0 S1)) #13)
#15 := (not #14)
#18 := (ite #10 #15 #17)
#23 := (implies #18 #22)
#24 := (not #23)
#96 := (iff #24 #93)
#73 := (or #72 #66)
#82 := (or #81 #73)
#87 := (not #82)
#94 := (iff #87 #93)
#91 := (iff #82 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#88 := (iff #24 #87)
#85 := (iff #23 #82)
#78 := (implies #63 #73)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #23 #78)
#76 := (iff #22 #73)
#69 := (implies #45 #66)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #22 #69)
#67 := (iff #21 #66)
#68 := [rewrite]: #67
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#71 := [monotonicity #47 #68]: #70
#77 := [trans #71 #75]: #76
#64 := (iff #18 #63)
#61 := (iff #17 #60)
#58 := (iff #16 #57)
#49 := (iff #13 #48)
#50 := [rewrite]: #49
#59 := [monotonicity #50]: #58
#62 := [quant-intro #59]: #61
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#53 := [quant-intro #50]: #52
#56 := [monotonicity #53]: #55
#65 := [monotonicity #47 #56 #62]: #64
#80 := [monotonicity #65 #77]: #79
#86 := [trans #80 #84]: #85
#89 := [monotonicity #86]: #88
#97 := [trans #89 #95]: #96
#44 := [asserted]: #24
#98 := [mp #44 #97]: #93
#99 := [not-or-elim #98]: #45
#107 := [iff-true #99]: #106
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#100 := [not-or-elim #98]: #63
#115 := [mp #100 #114]: #54
#104 := [mp~ #115 #117]: #60
#600 := [mp #104 #599]: #595
#177 := (not #595)
#264 := (or #177 #72)
#178 := [quant-inst #8]: #264
[unit-resolution #178 #99 #600]: false
unsat
b90e8903a4ebccab3cc9334859f67c0dd9c9e46e 183 2
#2 := false
decl f3 :: (-> S1 S2 S1)
#9 := (:var 0 S2)
decl f5 :: S1
#24 := f5
#25 := (f3 f5 #9)
#706 := (pattern #25)
decl f1 :: S1
#4 := f1
#83 := (= f1 #25)
#187 := (not #83)
#707 := (forall (vars (?v0 S2)) (:pat #706) #187)
decl f4 :: S2
#18 := f4
#28 := (f3 f5 f4)
#89 := (= f1 #28)
#265 := (= f1 f5)
#266 := (iff #89 #265)
#8 := (:var 1 S1)
#10 := (f3 #8 #9)
#683 := (pattern #10)
#56 := (= f1 #8)
#53 := (= f1 #10)
#59 := (iff #53 #56)
#684 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #683) #59)
#62 := (forall (vars (?v0 S1) (?v1 S2)) #59)
#687 := (iff #62 #684)
#685 := (iff #59 #59)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#118 := (~ #62 #62)
#125 := (~ #59 #59)
#126 := [refl]: #125
#119 := [nnf-pos #126]: #118
#17 := (:var 0 S1)
#19 := (f3 #17 f4)
#71 := (= f1 #19)
#74 := (forall (vars (?v0 S1)) #71)
#65 := (exists (vars (?v1 S2)) #53)
#68 := (forall (vars (?v0 S1)) #65)
#77 := (iff #68 #74)
#80 := (and #62 #77)
#86 := (exists (vars (?v0 S2)) #83)
#92 := (iff #86 #89)
#98 := (not #80)
#99 := (or #98 #92)
#104 := (not #99)
#29 := (= #28 f1)
#26 := (= #25 f1)
#27 := (exists (vars (?v0 S2)) #26)
#30 := (iff #27 #29)
#20 := (= #19 f1)
#21 := (forall (vars (?v0 S1)) #20)
#11 := (= #10 f1)
#15 := (exists (vars (?v1 S2)) #11)
#16 := (forall (vars (?v0 S1)) #15)
#22 := (iff #16 #21)
#12 := (= #8 f1)
#13 := (iff #11 #12)
#14 := (forall (vars (?v0 S1) (?v1 S2)) #13)
#23 := (and #14 #22)
#31 := (implies #23 #30)
#32 := (not #31)
#105 := (iff #32 #104)
#102 := (iff #31 #99)
#95 := (implies #80 #92)
#100 := (iff #95 #99)
#101 := [rewrite]: #100
#96 := (iff #31 #95)
#93 := (iff #30 #92)
#90 := (iff #29 #89)
#91 := [rewrite]: #90
#87 := (iff #27 #86)
#84 := (iff #26 #83)
#85 := [rewrite]: #84
#88 := [quant-intro #85]: #87
#94 := [monotonicity #88 #91]: #93
#81 := (iff #23 #80)
#78 := (iff #22 #77)
#75 := (iff #21 #74)
#72 := (iff #20 #71)
#73 := [rewrite]: #72
#76 := [quant-intro #73]: #75
#69 := (iff #16 #68)
#66 := (iff #15 #65)
#54 := (iff #11 #53)
#55 := [rewrite]: #54
#67 := [quant-intro #55]: #66
#70 := [quant-intro #67]: #69
#79 := [monotonicity #70 #76]: #78
#63 := (iff #14 #62)
#60 := (iff #13 #59)
#57 := (iff #12 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #55 #58]: #60
#64 := [quant-intro #61]: #63
#82 := [monotonicity #64 #79]: #81
#97 := [monotonicity #82 #94]: #96
#103 := [trans #97 #101]: #102
#106 := [monotonicity #103]: #105
#52 := [asserted]: #32
#109 := [mp #52 #106]: #104
#107 := [not-or-elim #109]: #80
#108 := [and-elim #107]: #62
#116 := [mp~ #108 #119]: #62
#689 := [mp #116 #688]: #684
#267 := (not #684)
#343 := (or #267 #266)
#344 := [quant-inst #24 #18]: #343
#353 := [unit-resolution #344 #689]: #266
decl ?v0!3 :: S2
#158 := ?v0!3
#159 := (f3 f5 ?v0!3)
#131 := (= f1 #159)
#352 := (iff #131 #265)
#354 := (or #267 #352)
#345 := [quant-inst #24 #158]: #354
#671 := [unit-resolution #345 #689]: #352
#356 := (not #352)
#674 := (or #356 #265)
#193 := (not #89)
#673 := [hypothesis]: #193
#198 := (or #89 #131)
#190 := (forall (vars (?v0 S2)) #187)
#199 := (or #193 #190)
#206 := (and #198 #199)
#200 := (and #199 #198)
#207 := (iff #200 #206)
#208 := [rewrite]: #207
#120 := (not #86)
#121 := (iff #89 #120)
#201 := (~ #121 #200)
#191 := (~ #120 #190)
#188 := (~ #187 #187)
#189 := [refl]: #188
#192 := [nnf-neg #189]: #191
#184 := (not #120)
#185 := (~ #184 #131)
#132 := (~ #86 #131)
#181 := [sk]: #132
#186 := [nnf-neg #181]: #185
#196 := (~ #89 #89)
#197 := [refl]: #196
#194 := (~ #193 #193)
#195 := [refl]: #194
#202 := [nnf-pos #195 #197 #186 #192]: #201
#111 := (not #92)
#122 := (iff #111 #121)
#123 := [rewrite]: #122
#112 := [not-or-elim #109]: #111
#124 := [mp #112 #123]: #121
#203 := [mp~ #124 #202]: #200
#204 := [mp #203 #208]: #206
#205 := [and-elim #204]: #198
#331 := [unit-resolution #205 #673]: #131
#355 := (not #131)
#359 := (or #356 #355 #265)
#338 := [def-axiom]: #359
#315 := [unit-resolution #338 #331]: #674
#658 := [unit-resolution #315 #671]: #265
#357 := (not #265)
#678 := (not #266)
#319 := (or #678 #357)
#679 := (or #678 #89 #357)
#680 := [def-axiom]: #679
#320 := [unit-resolution #680 #673]: #319
#321 := [unit-resolution #320 #658 #353]: false
#322 := [lemma #321]: #89
#712 := (or #193 #707)
#713 := (iff #199 #712)
#710 := (iff #190 #707)
#708 := (iff #187 #187)
#709 := [refl]: #708
#711 := [quant-intro #709]: #710
#714 := [monotonicity #711]: #713
#209 := [and-elim #204]: #199
#715 := [mp #209 #714]: #712
#285 := [unit-resolution #715 #322]: #707
#682 := (not #707)
#672 := (or #682 #193)
#330 := [quant-inst #18]: #672
[unit-resolution #330 #322 #285]: false
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!13)

cf98925786c68d5a17b4ee8fe1163a0f1d843aa1 1 0
unsat
626a766d3e6816fc4d39780448f9c6b7965da15c 1 0
unsat
68ad5c1894eaab883254275ec13820f7e76ea225 1 2
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!13)

ee9f8da531dcfedbb294b056035428c17f32aedf 1 0
unsat
2a5b706bf84284386d7f4c39da1625c2ab4e3778 1 0
unsat
f010ef4b805535e5ca8fec6afaee63fc30f4e69e 1 0
unsat
9cb750c0f8a06bad91d2052f6046dd5974818efe 1 0
unsat
08358038248416355849cc7ae66f2673721af28b 1 0
unsat
ac618ea2f315b87a071d15251b68179d70f7a036 107 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#597 := (pattern #9)
decl f1 :: S1
#4 := f1
#40 := (= f1 #9)
#46 := (not #40)
#604 := (forall (vars (?v0 S2)) (:pat #597) #46)
#118 := (forall (vars (?v0 S2)) #46)
#607 := (iff #118 #604)
#605 := (iff #46 #46)
#606 := [refl]: #605
#608 := [quant-intro #606]: #607
#61 := (exists (vars (?v0 S2)) #40)
#77 := (not #61)
#119 := (~ #77 #118)
#116 := (~ #46 #46)
#117 := [refl]: #116
#120 := [nnf-neg #117]: #119
#11 := (:var 1 S2)
#12 := (= #8 #11)
#47 := (or #12 #46)
#52 := (forall (vars (?v1 S2)) #47)
#55 := (and #40 #52)
#58 := (exists (vars (?v0 S2)) #55)
#67 := (not #58)
#68 := (or #67 #61)
#73 := (not #68)
#10 := (= #9 f1)
#17 := (exists (vars (?v0 S2)) #10)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#16 := (exists (vars (?v0 S2)) #15)
#18 := (implies #16 #17)
#19 := (not #18)
#74 := (iff #19 #73)
#71 := (iff #18 #68)
#64 := (implies #58 #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #18 #64)
#62 := (iff #17 #61)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#63 := [quant-intro #42]: #62
#59 := (iff #16 #58)
#56 := (iff #15 #55)
#53 := (iff #14 #52)
#50 := (iff #13 #47)
#43 := (implies #40 #12)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #13 #43)
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [quant-intro #51]: #53
#57 := [monotonicity #42 #54]: #56
#60 := [quant-intro #57]: #59
#66 := [monotonicity #60 #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#39 := [asserted]: #19
#78 := [mp #39 #75]: #73
#79 := [not-or-elim #78]: #77
#121 := [mp~ #79 #120]: #118
#609 := [mp #121 #608]: #604
decl ?v0!0 :: S2
#87 := ?v0!0
#81 := (f3 ?v0!0)
#82 := (= f1 #81)
#88 := (= #8 ?v0!0)
#106 := (or #46 #88)
#109 := (forall (vars (?v1 S2)) #106)
#112 := (and #82 #109)
#89 := (or #88 #46)
#90 := (forall (vars (?v1 S2)) #89)
#91 := (and #82 #90)
#113 := (iff #91 #112)
#110 := (iff #90 #109)
#107 := (iff #89 #106)
#108 := [rewrite]: #107
#111 := [quant-intro #108]: #110
#114 := [monotonicity #111]: #113
#92 := (~ #58 #91)
#100 := (~ #91 #91)
#98 := (~ #90 #90)
#96 := (~ #89 #89)
#97 := [refl]: #96
#99 := [nnf-pos #97]: #98
#94 := (~ #82 #82)
#95 := [refl]: #94
#101 := [monotonicity #95 #99]: #100
#93 := [sk]: #92
#102 := [trans #93 #101]: #92
#76 := [not-or-elim #78]: #58
#103 := [mp~ #76 #102]: #91
#104 := [mp #103 #114]: #112
#105 := [and-elim #104]: #82
#179 := (not #82)
#267 := (not #604)
#181 := (or #267 #179)
#268 := [quant-inst #87]: #181
[unit-resolution #268 #105 #609]: false
unsat
c1764d5fdaaf5fcd099b25c4b805ce423c186fa4 75 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#18 := (not #10)
#11 := (:var 1 S2)
#12 := (= #8 #11)
#17 := (not #12)
#19 := (implies #17 #18)
#20 := (forall (vars (?v1 S2)) #19)
#21 := (and #10 #20)
#22 := (exists (vars (?v0 S2)) #21)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#16 := (exists (vars (?v0 S2)) #15)
#23 := (iff #16 #22)
#24 := (not #23)
#93 := (iff #24 false)
#1 := true
#88 := (not true)
#91 := (iff #88 false)
#92 := [rewrite]: #91
#89 := (iff #24 #88)
#86 := (iff #23 true)
#45 := (= f1 #9)
#51 := (not #45)
#52 := (or #12 #51)
#57 := (forall (vars (?v1 S2)) #52)
#60 := (and #45 #57)
#63 := (exists (vars (?v0 S2)) #60)
#81 := (iff #63 #63)
#84 := (iff #81 true)
#85 := [rewrite]: #84
#82 := (iff #23 #81)
#79 := (iff #22 #63)
#77 := (iff #21 #60)
#75 := (iff #20 #57)
#73 := (iff #19 #52)
#68 := (implies #17 #51)
#71 := (iff #68 #52)
#72 := [rewrite]: #71
#69 := (iff #19 #68)
#66 := (iff #18 #51)
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#67 := [monotonicity #47]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#76 := [quant-intro #74]: #75
#78 := [monotonicity #47 #76]: #77
#80 := [quant-intro #78]: #79
#64 := (iff #16 #63)
#61 := (iff #15 #60)
#58 := (iff #14 #57)
#55 := (iff #13 #52)
#48 := (implies #45 #12)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #13 #48)
#50 := [monotonicity #47]: #49
#56 := [trans #50 #54]: #55
#59 := [quant-intro #56]: #58
#62 := [monotonicity #47 #59]: #61
#65 := [quant-intro #62]: #64
#83 := [monotonicity #65 #80]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#44 := [asserted]: #24
[mp #44 #94]: false
unsat
39e6e981f54bfbbd33de190a32e637bca3addace 207 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!0 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#224 := (?v1!0 f4)
#225 := (f3 #224)
decl f1 :: S1
#4 := f1
#312 := (= f1 #225)
#226 := (not #312)
#311 := (= f4 #224)
#316 := (or #311 #226)
#314 := (not #316)
#11 := (:var 0 S2)
#12 := (f3 #11)
#642 := (pattern #12)
#123 := (?v1!0 #11)
#150 := (= #11 #123)
#124 := (f3 #123)
#120 := (= f1 #124)
#131 := (not #120)
#156 := (or #131 #150)
#161 := (not #156)
#49 := (= f1 #12)
#58 := (not #49)
#164 := (or #58 #161)
#649 := (forall (vars (?v0 S2)) (:pat #642) #164)
#167 := (forall (vars (?v0 S2)) #164)
#652 := (iff #167 #649)
#650 := (iff #164 #164)
#651 := [refl]: #650
#653 := [quant-intro #651]: #652
#132 := (= #123 #11)
#133 := (or #132 #131)
#134 := (not #133)
#140 := (or #58 #134)
#144 := (forall (vars (?v0 S2)) #140)
#168 := (iff #144 #167)
#165 := (iff #140 #164)
#162 := (iff #134 #161)
#159 := (iff #133 #156)
#153 := (or #150 #131)
#157 := (iff #153 #156)
#158 := [rewrite]: #157
#154 := (iff #133 #153)
#151 := (iff #132 #150)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#160 := [trans #155 #158]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#17 := (:var 1 S2)
#18 := (= #11 #17)
#70 := (or #18 #58)
#75 := (forall (vars (?v1 S2)) #70)
#78 := (and #49 #75)
#81 := (exists (vars (?v0 S2)) #78)
#116 := (not #81)
#145 := (~ #116 #144)
#141 := (not #78)
#142 := (~ #141 #140)
#135 := (not #75)
#136 := (~ #135 #134)
#137 := [sk]: #136
#122 := (~ #58 #58)
#119 := [refl]: #122
#143 := [nnf-neg #119 #137]: #142
#146 := [nnf-neg #143]: #145
#52 := (= f4 #11)
#59 := (or #58 #52)
#64 := (forall (vars (?v0 S2)) #59)
#87 := (not #64)
#9 := (f3 f4)
#46 := (= f1 #9)
#96 := (not #46)
#105 := (or #96 #87 #81)
#108 := (not #105)
#13 := (= #12 f1)
#19 := (implies #13 #18)
#20 := (forall (vars (?v1 S2)) #19)
#21 := (and #13 #20)
#22 := (exists (vars (?v0 S2)) #21)
#14 := (= #11 f4)
#15 := (implies #13 #14)
#16 := (forall (vars (?v0 S2)) #15)
#23 := (implies #16 #22)
#10 := (= #9 f1)
#24 := (implies #10 #23)
#25 := (not #24)
#111 := (iff #25 #108)
#88 := (or #87 #81)
#97 := (or #96 #88)
#102 := (not #97)
#109 := (iff #102 #108)
#106 := (iff #97 #105)
#107 := [rewrite]: #106
#110 := [monotonicity #107]: #109
#103 := (iff #25 #102)
#100 := (iff #24 #97)
#93 := (implies #46 #88)
#98 := (iff #93 #97)
#99 := [rewrite]: #98
#94 := (iff #24 #93)
#91 := (iff #23 #88)
#84 := (implies #64 #81)
#89 := (iff #84 #88)
#90 := [rewrite]: #89
#85 := (iff #23 #84)
#82 := (iff #22 #81)
#79 := (iff #21 #78)
#76 := (iff #20 #75)
#73 := (iff #19 #70)
#67 := (implies #49 #18)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #19 #67)
#50 := (iff #13 #49)
#51 := [rewrite]: #50
#69 := [monotonicity #51]: #68
#74 := [trans #69 #72]: #73
#77 := [quant-intro #74]: #76
#80 := [monotonicity #51 #77]: #79
#83 := [quant-intro #80]: #82
#65 := (iff #16 #64)
#62 := (iff #15 #59)
#55 := (implies #49 #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #15 #55)
#53 := (iff #14 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #51 #54]: #56
#63 := [trans #57 #61]: #62
#66 := [quant-intro #63]: #65
#86 := [monotonicity #66 #83]: #85
#92 := [trans #86 #90]: #91
#47 := (iff #10 #46)
#48 := [rewrite]: #47
#95 := [monotonicity #48 #92]: #94
#101 := [trans #95 #99]: #100
#104 := [monotonicity #101]: #103
#112 := [trans #104 #110]: #111
#45 := [asserted]: #25
#113 := [mp #45 #112]: #108
#117 := [not-or-elim #113]: #116
#147 := [mp~ #117 #146]: #144
#148 := [mp #147 #169]: #167
#654 := [mp #148 #653]: #649
#114 := [not-or-elim #113]: #46
#423 := (not #649)
#630 := (or #423 #96 #314)
#313 := (or #226 #311)
#304 := (not #313)
#315 := (or #96 #304)
#302 := (or #423 #315)
#641 := (iff #302 #630)
#634 := (or #96 #314)
#637 := (or #423 #634)
#640 := (iff #637 #630)
#635 := [rewrite]: #640
#638 := (iff #302 #637)
#636 := (iff #315 #634)
#318 := (iff #304 #314)
#244 := (iff #313 #316)
#317 := [rewrite]: #244
#297 := [monotonicity #317]: #318
#291 := [monotonicity #297]: #636
#639 := [monotonicity #291]: #638
#631 := [trans #639 #635]: #641
#303 := [quant-inst #8]: #302
#289 := [mp #303 #631]: #630
#598 := [unit-resolution #289 #114 #654]: #314
#633 := (or #316 #312)
#274 := [def-axiom]: #633
#599 := [unit-resolution #274 #598]: #312
#294 := (not #311)
#632 := (or #316 #294)
#290 := [def-axiom]: #632
#594 := [unit-resolution #290 #598]: #294
#643 := (forall (vars (?v0 S2)) (:pat #642) #59)
#646 := (iff #64 #643)
#644 := (iff #59 #59)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#129 := (~ #64 #64)
#127 := (~ #59 #59)
#128 := [refl]: #127
#130 := [nnf-pos #128]: #129
#115 := [not-or-elim #113]: #64
#121 := [mp~ #115 #130]: #64
#648 := [mp #121 #647]: #643
#279 := (not #643)
#280 := (or #279 #311 #226)
#281 := (or #279 #313)
#624 := (iff #281 #280)
#620 := (or #279 #316)
#623 := (iff #620 #280)
#618 := [rewrite]: #623
#621 := (iff #281 #620)
#622 := [monotonicity #317]: #621
#260 := [trans #622 #618]: #624
#619 := [quant-inst #224]: #281
#625 := [mp #619 #260]: #280
[unit-resolution #625 #648 #594 #599]: false
unsat
4b1b63f9918482e3acffbd2b8d473f76fd800caf 250 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!1 :: (-> S2 S2)
decl ?v0!0 :: S2
#126 := ?v0!0
#255 := (?v1!1 ?v0!0)
#256 := (f3 #255)
decl f1 :: S1
#4 := f1
#343 := (= f1 #256)
#257 := (not #343)
#342 := (= ?v0!0 #255)
#275 := (or #342 #257)
#349 := (not #275)
#8 := (:var 0 S2)
#9 := (f3 #8)
#680 := (pattern #9)
#122 := (?v1!1 #8)
#157 := (= #8 #122)
#123 := (f3 #122)
#137 := (= f1 #123)
#138 := (not #137)
#163 := (or #138 #157)
#168 := (not #163)
#47 := (= f1 #9)
#84 := (not #47)
#171 := (or #84 #168)
#681 := (forall (vars (?v0 S2)) (:pat #680) #171)
#174 := (forall (vars (?v0 S2)) #171)
#684 := (iff #174 #681)
#682 := (iff #171 #171)
#683 := [refl]: #682
#685 := [quant-intro #683]: #684
#139 := (= #122 #8)
#140 := (or #139 #138)
#141 := (not #140)
#147 := (or #84 #141)
#151 := (forall (vars (?v0 S2)) #147)
#175 := (iff #151 #174)
#172 := (iff #147 #171)
#169 := (iff #141 #168)
#166 := (iff #140 #163)
#160 := (or #157 #138)
#164 := (iff #160 #163)
#165 := [rewrite]: #164
#161 := (iff #140 #160)
#158 := (iff #139 #157)
#159 := [rewrite]: #158
#162 := [monotonicity #159]: #161
#167 := [trans #162 #165]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [quant-intro #173]: #175
#12 := (:var 1 S2)
#20 := (= #8 #12)
#85 := (or #20 #84)
#90 := (forall (vars (?v1 S2)) #85)
#93 := (and #47 #90)
#96 := (exists (vars (?v0 S2)) #93)
#115 := (not #96)
#152 := (~ #115 #151)
#148 := (not #93)
#149 := (~ #148 #147)
#142 := (not #90)
#143 := (~ #142 #141)
#144 := [sk]: #143
#135 := (~ #84 #84)
#136 := [refl]: #135
#150 := [nnf-neg #136 #144]: #149
#153 := [nnf-neg #150]: #152
#13 := (f3 #12)
#53 := (= f1 #13)
#59 := (and #47 #53)
#69 := (not #59)
#70 := (or #20 #69)
#75 := (forall (vars (?v0 S2) (?v1 S2)) #70)
#50 := (exists (vars (?v0 S2)) #47)
#78 := (and #50 #75)
#102 := (not #78)
#103 := (or #102 #96)
#108 := (not #103)
#10 := (= #9 f1)
#21 := (implies #10 #20)
#22 := (forall (vars (?v1 S2)) #21)
#23 := (and #10 #22)
#24 := (exists (vars (?v0 S2)) #23)
#16 := (= #12 #8)
#14 := (= #13 f1)
#15 := (and #14 #10)
#17 := (implies #15 #16)
#18 := (forall (vars (?v0 S2) (?v1 S2)) #17)
#11 := (exists (vars (?v0 S2)) #10)
#19 := (and #11 #18)
#25 := (implies #19 #24)
#26 := (not #25)
#109 := (iff #26 #108)
#106 := (iff #25 #103)
#99 := (implies #78 #96)
#104 := (iff #99 #103)
#105 := [rewrite]: #104
#100 := (iff #25 #99)
#97 := (iff #24 #96)
#94 := (iff #23 #93)
#91 := (iff #22 #90)
#88 := (iff #21 #85)
#81 := (implies #47 #20)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #21 #81)
#48 := (iff #10 #47)
#49 := [rewrite]: #48
#83 := [monotonicity #49]: #82
#89 := [trans #83 #87]: #88
#92 := [quant-intro #89]: #91
#95 := [monotonicity #49 #92]: #94
#98 := [quant-intro #95]: #97
#79 := (iff #19 #78)
#76 := (iff #18 #75)
#73 := (iff #17 #70)
#66 := (implies #59 #20)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #17 #66)
#64 := (iff #16 #20)
#65 := [rewrite]: #64
#62 := (iff #15 #59)
#56 := (and #53 #47)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #15 #56)
#54 := (iff #14 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55 #49]: #57
#63 := [trans #58 #61]: #62
#68 := [monotonicity #63 #65]: #67
#74 := [trans #68 #72]: #73
#77 := [quant-intro #74]: #76
#51 := (iff #11 #50)
#52 := [quant-intro #49]: #51
#80 := [monotonicity #52 #77]: #79
#101 := [monotonicity #80 #98]: #100
#107 := [trans #101 #105]: #106
#110 := [monotonicity #107]: #109
#46 := [asserted]: #26
#113 := [mp #46 #110]: #108
#116 := [not-or-elim #113]: #115
#154 := [mp~ #116 #153]: #151
#155 := [mp #154 #176]: #174
#686 := [mp #155 #685]: #681
#127 := (f3 ?v0!0)
#128 := (= f1 #127)
#129 := (~ #50 #128)
#118 := [sk]: #129
#111 := [not-or-elim #113]: #78
#112 := [and-elim #111]: #50
#131 := [mp~ #112 #118]: #128
#346 := (not #128)
#661 := (not #681)
#333 := (or #661 #346 #349)
#344 := (or #257 #342)
#335 := (not #344)
#347 := (or #346 #335)
#334 := (or #661 #347)
#662 := (iff #334 #333)
#667 := (or #346 #349)
#669 := (or #661 #667)
#666 := (iff #669 #333)
#672 := [rewrite]: #666
#670 := (iff #334 #669)
#322 := (iff #347 #667)
#328 := (iff #335 #349)
#348 := (iff #344 #275)
#345 := [rewrite]: #348
#665 := [monotonicity #345]: #328
#454 := [monotonicity #665]: #322
#671 := [monotonicity #454]: #670
#320 := [trans #671 #672]: #662
#668 := [quant-inst #126]: #334
#325 := [mp #668 #320]: #333
#456 := [unit-resolution #325 #131 #686]: #349
#305 := (or #275 #343)
#648 := [def-axiom]: #305
#609 := [unit-resolution #648 #456]: #343
#663 := (not #342)
#321 := (or #275 #663)
#664 := [def-axiom]: #321
#610 := [unit-resolution #664 #456]: #663
#673 := (pattern #9 #13)
#145 := (not #53)
#189 := (or #20 #84 #145)
#674 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #673) #189)
#194 := (forall (vars (?v0 S2) (?v1 S2)) #189)
#677 := (iff #194 #674)
#675 := (iff #189 #189)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#195 := (iff #75 #194)
#192 := (iff #70 #189)
#146 := (or #84 #145)
#186 := (or #20 #146)
#190 := (iff #186 #189)
#191 := [rewrite]: #190
#187 := (iff #70 #186)
#184 := (iff #69 #146)
#156 := (not #146)
#179 := (not #156)
#182 := (iff #179 #146)
#183 := [rewrite]: #182
#180 := (iff #69 #179)
#177 := (iff #59 #156)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#185 := [trans #181 #183]: #184
#188 := [monotonicity #185]: #187
#193 := [trans #188 #191]: #192
#196 := [quant-intro #193]: #195
#132 := (~ #75 #75)
#119 := (~ #70 #70)
#130 := [refl]: #119
#133 := [nnf-pos #130]: #132
#114 := [and-elim #111]: #75
#134 := [mp~ #114 #133]: #75
#197 := [mp #134 #196]: #194
#679 := [mp #197 #678]: #674
#630 := (not #674)
#625 := (or #630 #346 #342 #257)
#355 := (= #255 ?v0!0)
#356 := (or #355 #257 #346)
#626 := (or #630 #356)
#476 := (iff #626 #625)
#638 := (or #346 #342 #257)
#632 := (or #630 #638)
#474 := (iff #632 #625)
#475 := [rewrite]: #474
#627 := (iff #626 #632)
#628 := (iff #356 #638)
#637 := (or #342 #257 #346)
#635 := (iff #637 #638)
#639 := [rewrite]: #635
#350 := (iff #356 #637)
#358 := (iff #355 #342)
#636 := [rewrite]: #358
#634 := [monotonicity #636]: #350
#629 := [trans #634 #639]: #628
#633 := [monotonicity #629]: #627
#618 := [trans #633 #475]: #476
#631 := [quant-inst #126 #255]: #626
#619 := [mp #631 #618]: #625
[unit-resolution #619 #131 #679 #610 #609]: false
unsat
414b387cf896c5f2a72e6de8d5c3cc3d003f29bc 238 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!1 :: (-> S2 S2)
decl ?v0!0 :: S2
#119 := ?v0!0
#243 := (?v1!1 ?v0!0)
#244 := (f3 #243)
decl f1 :: S1
#4 := f1
#331 := (= f1 #244)
#245 := (not #331)
#330 := (= ?v0!0 #243)
#263 := (or #330 #245)
#337 := (not #263)
#8 := (:var 0 S2)
#9 := (f3 #8)
#661 := (pattern #9)
#148 := (?v1!1 #8)
#169 := (= #8 #148)
#149 := (f3 #148)
#150 := (= f1 #149)
#151 := (not #150)
#175 := (or #151 #169)
#180 := (not #175)
#44 := (= f1 #9)
#50 := (not #44)
#183 := (or #50 #180)
#668 := (forall (vars (?v0 S2)) (:pat #661) #183)
#186 := (forall (vars (?v0 S2)) #183)
#671 := (iff #186 #668)
#669 := (iff #183 #183)
#670 := [refl]: #669
#672 := [quant-intro #670]: #671
#152 := (= #148 #8)
#153 := (or #152 #151)
#154 := (not #153)
#160 := (or #50 #154)
#163 := (forall (vars (?v0 S2)) #160)
#187 := (iff #163 #186)
#184 := (iff #160 #183)
#181 := (iff #154 #180)
#178 := (iff #153 #175)
#172 := (or #169 #151)
#176 := (iff #172 #175)
#177 := [rewrite]: #176
#173 := (iff #153 #172)
#170 := (iff #152 #169)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#179 := [trans #174 #177]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#11 := (:var 1 S2)
#12 := (= #8 #11)
#51 := (or #12 #50)
#56 := (forall (vars (?v1 S2)) #51)
#59 := (and #44 #56)
#71 := (not #59)
#115 := (forall (vars (?v0 S2)) #71)
#164 := (~ #115 #163)
#161 := (~ #71 #160)
#155 := (not #56)
#156 := (~ #155 #154)
#157 := [sk]: #156
#146 := (~ #50 #50)
#147 := [refl]: #146
#162 := [nnf-neg #147 #157]: #161
#165 := [nnf-pos #162]: #164
decl f4 :: S1
#17 := f4
#65 := (= f1 f4)
#72 := (or #71 #65)
#77 := (forall (vars (?v0 S2)) #72)
#116 := (iff #77 #115)
#113 := (iff #72 #71)
#108 := (or #71 false)
#111 := (iff #108 #71)
#112 := [rewrite]: #111
#109 := (iff #72 #108)
#104 := (iff #65 false)
#95 := (not #65)
#62 := (exists (vars (?v0 S2)) #59)
#80 := (and #62 #77)
#86 := (not #80)
#87 := (or #65 #86)
#92 := (not #87)
#18 := (= f4 f1)
#10 := (= #9 f1)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 S2)) #19)
#16 := (exists (vars (?v0 S2)) #15)
#21 := (and #16 #20)
#22 := (implies #21 #18)
#23 := (not #22)
#93 := (iff #23 #92)
#90 := (iff #22 #87)
#83 := (implies #80 #65)
#88 := (iff #83 #87)
#89 := [rewrite]: #88
#84 := (iff #22 #83)
#66 := (iff #18 #65)
#67 := [rewrite]: #66
#81 := (iff #21 #80)
#78 := (iff #20 #77)
#75 := (iff #19 #72)
#68 := (implies #59 #65)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #19 #68)
#60 := (iff #15 #59)
#57 := (iff #14 #56)
#54 := (iff #13 #51)
#47 := (implies #44 #12)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #13 #47)
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#58 := [quant-intro #55]: #57
#61 := [monotonicity #46 #58]: #60
#70 := [monotonicity #61 #67]: #69
#76 := [trans #70 #74]: #75
#79 := [quant-intro #76]: #78
#63 := (iff #16 #62)
#64 := [quant-intro #61]: #63
#82 := [monotonicity #64 #79]: #81
#85 := [monotonicity #82 #67]: #84
#91 := [trans #85 #89]: #90
#94 := [monotonicity #91]: #93
#43 := [asserted]: #23
#97 := [mp #43 #94]: #92
#96 := [not-or-elim #97]: #95
#105 := [iff-false #96]: #104
#110 := [monotonicity #105]: #109
#114 := [trans #110 #112]: #113
#117 := [quant-intro #114]: #116
#98 := [not-or-elim #97]: #80
#100 := [and-elim #98]: #77
#118 := [mp #100 #117]: #115
#166 := [mp~ #118 #165]: #163
#167 := [mp #166 #188]: #186
#673 := [mp #167 #672]: #668
#102 := (f3 ?v0!0)
#103 := (= f1 #102)
#120 := (= #8 ?v0!0)
#136 := (or #50 #120)
#139 := (forall (vars (?v1 S2)) #136)
#142 := (and #103 #139)
#106 := (or #120 #50)
#107 := (forall (vars (?v1 S2)) #106)
#121 := (and #103 #107)
#143 := (iff #121 #142)
#140 := (iff #107 #139)
#137 := (iff #106 #136)
#138 := [rewrite]: #137
#141 := [quant-intro #138]: #140
#144 := [monotonicity #141]: #143
#122 := (~ #62 #121)
#130 := (~ #121 #121)
#128 := (~ #107 #107)
#126 := (~ #106 #106)
#127 := [refl]: #126
#129 := [nnf-pos #127]: #128
#124 := (~ #103 #103)
#125 := [refl]: #124
#131 := [monotonicity #125 #129]: #130
#123 := [sk]: #122
#132 := [trans #123 #131]: #122
#99 := [and-elim #98]: #62
#133 := [mp~ #99 #132]: #121
#134 := [mp #133 #144]: #142
#135 := [and-elim #134]: #103
#334 := (not #103)
#649 := (not #668)
#321 := (or #649 #334 #337)
#332 := (or #245 #330)
#323 := (not #332)
#335 := (or #334 #323)
#322 := (or #649 #335)
#650 := (iff #322 #321)
#655 := (or #334 #337)
#657 := (or #649 #655)
#654 := (iff #657 #321)
#660 := [rewrite]: #654
#658 := (iff #322 #657)
#310 := (iff #335 #655)
#316 := (iff #323 #337)
#336 := (iff #332 #263)
#333 := [rewrite]: #336
#653 := [monotonicity #333]: #316
#442 := [monotonicity #653]: #310
#659 := [monotonicity #442]: #658
#308 := [trans #659 #660]: #650
#656 := [quant-inst #119]: #322
#313 := [mp #656 #308]: #321
#614 := [unit-resolution #313 #135 #673]: #337
#293 := (or #263 #331)
#636 := [def-axiom]: #293
#619 := [unit-resolution #636 #614]: #331
#651 := (not #330)
#309 := (or #263 #651)
#652 := [def-axiom]: #309
#620 := [unit-resolution #652 #614]: #651
#662 := (forall (vars (?v1 S2)) (:pat #661) #136)
#665 := (iff #139 #662)
#663 := (iff #136 #136)
#664 := [refl]: #663
#666 := [quant-intro #664]: #665
#145 := [and-elim #134]: #139
#667 := [mp #145 #666]: #662
#643 := (not #662)
#279 := (or #643 #330 #245)
#299 := (= #243 ?v0!0)
#300 := (or #245 #299)
#644 := (or #643 #300)
#634 := (iff #644 #279)
#284 := (or #643 #263)
#645 := (iff #284 #279)
#648 := [rewrite]: #645
#285 := (iff #644 #284)
#642 := (iff #300 #263)
#640 := (iff #300 #332)
#638 := (iff #299 #330)
#639 := [rewrite]: #638
#641 := [monotonicity #639]: #640
#637 := [trans #641 #333]: #642
#647 := [monotonicity #637]: #285
#635 := [trans #647 #648]: #634
#646 := [quant-inst #243]: #644
#341 := [mp #646 #635]: #279
[unit-resolution #341 #667 #620 #619]: false
unsat
43a06f7db71bb40e30122f32a94b922612b5b5ed 93 0
#2 := false
decl f5 :: (-> S2 S1)
decl f6 :: S2
#16 := f6
#20 := (f5 f6)
decl f1 :: S1
#4 := f1
#68 := (= f1 #20)
#87 := (not #68)
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
#17 := (f3 f6 f4)
#62 := (= f1 #17)
#8 := (:var 0 S2)
#12 := (f5 #8)
#47 := (= f1 #12)
#10 := (f3 #8 f4)
#44 := (= f1 #10)
#53 := (not #44)
#54 := (or #53 #47)
#59 := (forall (vars (?v0 S2)) #54)
#65 := (and #59 #62)
#74 := (not #65)
#75 := (or #74 #68)
#80 := (not #75)
#21 := (= #20 f1)
#18 := (= #17 f1)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2)) #14)
#19 := (and #15 #18)
#22 := (implies #19 #21)
#23 := (not #22)
#81 := (iff #23 #80)
#78 := (iff #22 #75)
#71 := (implies #65 #68)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #22 #71)
#69 := (iff #21 #68)
#70 := [rewrite]: #69
#66 := (iff #19 #65)
#63 := (iff #18 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#57 := (iff #14 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [quant-intro #58]: #60
#67 := [monotonicity #61 #64]: #66
#73 := [monotonicity #67 #70]: #72
#79 := [trans #73 #77]: #78
#82 := [monotonicity #79]: #81
#43 := [asserted]: #23
#85 := [mp #43 #82]: #80
#88 := [not-or-elim #85]: #87
#83 := [not-or-elim #85]: #65
#86 := [and-elim #83]: #62
#571 := (pattern #12)
#570 := (pattern #10)
#572 := (forall (vars (?v0 S2)) (:pat #570 #571) #54)
#575 := (iff #59 #572)
#573 := (iff #54 #54)
#574 := [refl]: #573
#576 := [quant-intro #574]: #575
#100 := (~ #59 #59)
#98 := (~ #54 #54)
#99 := [refl]: #98
#101 := [nnf-pos #99]: #100
#84 := [and-elim #83]: #59
#90 := [mp~ #84 #101]: #59
#577 := [mp #90 #576]: #572
#152 := (not #62)
#154 := (not #572)
#241 := (or #154 #152 #68)
#239 := (or #152 #68)
#232 := (or #154 #239)
#244 := (iff #232 #241)
#172 := [rewrite]: #244
#243 := [quant-inst #16]: #232
#245 := [mp #243 #172]: #241
[unit-resolution #245 #577 #86 #88]: false
unsat
10b0ad71f1792bc4343d482448bd439666bec7e5 113 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f6 :: S2
#16 := f6
#19 := (f3 f6 f4)
decl f1 :: S1
#4 := f1
#60 := (= f1 #19)
decl f5 :: (-> S2 S1)
#17 := (f5 f6)
#57 := (= f1 #17)
#63 := (and #57 #60)
#66 := (not #63)
#8 := (:var 0 S2)
#12 := (f5 #8)
#48 := (= f1 #12)
#10 := (f3 #8 f4)
#45 := (= f1 #10)
#51 := (and #45 #48)
#54 := (exists (vars (?v0 S2)) #51)
#69 := (or #54 #66)
#72 := (not #69)
#20 := (= #19 f1)
#18 := (= #17 f1)
#21 := (and #18 #20)
#22 := (not #21)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (and #11 #13)
#15 := (exists (vars (?v0 S2)) #14)
#23 := (or #15 #22)
#24 := (not #23)
#73 := (iff #24 #72)
#70 := (iff #23 #69)
#67 := (iff #22 #66)
#64 := (iff #21 #63)
#61 := (iff #20 #60)
#62 := [rewrite]: #61
#58 := (iff #18 #57)
#59 := [rewrite]: #58
#65 := [monotonicity #59 #62]: #64
#68 := [monotonicity #65]: #67
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (iff #13 #48)
#50 := [rewrite]: #49
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#53 := [monotonicity #47 #50]: #52
#56 := [quant-intro #53]: #55
#71 := [monotonicity #56 #68]: #70
#74 := [monotonicity #71]: #73
#44 := [asserted]: #24
#77 := [mp #44 #74]: #72
#78 := [not-or-elim #77]: #63
#80 := [and-elim #78]: #60
#79 := [and-elim #78]: #57
#584 := (pattern #12)
#583 := (pattern #10)
#96 := (not #48)
#95 := (not #45)
#97 := (or #95 #96)
#585 := (forall (vars (?v0 S2)) (:pat #583 #584) #97)
#104 := (forall (vars (?v0 S2)) #97)
#588 := (iff #104 #585)
#586 := (iff #97 #97)
#587 := [refl]: #586
#589 := [quant-intro #587]: #588
#90 := (not #51)
#93 := (forall (vars (?v0 S2)) #90)
#105 := (iff #93 #104)
#102 := (iff #90 #97)
#98 := (not #97)
#86 := (not #98)
#100 := (iff #86 #97)
#101 := [rewrite]: #100
#87 := (iff #90 #86)
#88 := (iff #51 #98)
#89 := [rewrite]: #88
#99 := [monotonicity #89]: #87
#103 := [trans #99 #101]: #102
#106 := [quant-intro #103]: #105
#75 := (not #54)
#82 := (~ #75 #93)
#91 := (~ #90 #90)
#92 := [refl]: #91
#83 := [nnf-neg #92]: #82
#76 := [not-or-elim #77]: #75
#94 := [mp~ #76 #83]: #93
#107 := [mp #94 #106]: #104
#590 := [mp #107 #589]: #585
#252 := (not #60)
#165 := (not #57)
#245 := (not #585)
#256 := (or #245 #165 #252)
#166 := (or #252 #165)
#257 := (or #245 #166)
#577 := (iff #257 #256)
#253 := (or #165 #252)
#258 := (or #245 #253)
#238 := (iff #258 #256)
#575 := [rewrite]: #238
#255 := (iff #257 #258)
#167 := (iff #166 #253)
#254 := [rewrite]: #167
#259 := [monotonicity #254]: #255
#232 := [trans #259 #575]: #577
#185 := [quant-inst #16]: #257
#364 := [mp #185 #232]: #256
[unit-resolution #364 #590 #79 #80]: false
unsat
1ea0edf79c861d93e0b6cff855e43197b6927af2 43 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (not #12)
#14 := (or #12 #13)
#15 := (not #14)
#60 := (iff #15 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #15 #55)
#53 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (or #36 #39)
#45 := (not #42)
#48 := (or #42 #45)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #14 #48)
#46 := (iff #13 #45)
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #41]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #44 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#35 := [asserted]: #15
[mp #35 #61]: false
unsat
2efe31821fea4e444f1f58e423b1a3e1ab9b4cac 27 0
#2 := false
#1 := true
#9 := (or false true)
#8 := (and true false)
#10 := (implies #8 #9)
#11 := (not #10)
#48 := (iff #11 false)
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#41 := (iff #10 true)
#36 := (implies false true)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (iff #9 true)
#35 := [rewrite]: #34
#32 := (iff #8 false)
#33 := [rewrite]: #32
#38 := [monotonicity #33 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#31 := [asserted]: #11
[mp #31 #49]: false
unsat
eee4a504043afccce3195787f9f287f21c12ec9e 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (iff #10 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#33 := (= f1 #9)
#36 := (iff #33 #33)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#32 := [asserted]: #12
[mp #32 #49]: false
unsat
278fae448e44a4b7b524e9ac29b485b32979de5b 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#11 := (= #10 f1)
#12 := (iff #11 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#34 := (= f1 #10)
#37 := (iff #34 #34)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (iff #11 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#33 := [asserted]: #13
[mp #33 #50]: false
unsat
543fe903b7fa43c36b6d0fa84d517158fd95fbda 38 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (not #11)
#13 := (ite #11 #11 #12)
#14 := (not #13)
#56 := (iff #14 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #14 #51)
#49 := (iff #13 true)
#35 := (= f1 #9)
#38 := (forall (vars (?v0 S2)) #35)
#41 := (not #38)
#44 := (ite #38 #38 #41)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#36 := (iff #10 #35)
#37 := [rewrite]: #36
#40 := [quant-intro #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #40 #40 #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#34 := [asserted]: #14
[mp #34 #57]: false
unsat
3aff166df9d8da7d607b1c699d438273dc2fad39 38 0
#2 := false
decl f3 :: (-> S2 S2)
decl f4 :: S2
#13 := f4
#14 := (f3 f4)
#44 := (= f4 #14)
#48 := (not #44)
#15 := (= #14 f4)
#16 := (not #15)
#49 := (iff #16 #48)
#46 := (iff #15 #44)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#43 := [asserted]: #16
#53 := [mp #43 #50]: #48
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (pattern #9)
#37 := (= #8 #9)
#40 := (forall (vars (?v0 S2)) (:pat #10) #37)
#61 := (~ #40 #40)
#59 := (~ #37 #37)
#60 := [refl]: #59
#62 := [nnf-pos #60]: #61
#11 := (= #9 #8)
#12 := (forall (vars (?v0 S2)) (:pat #10) #11)
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#42 := [quant-intro #39]: #41
#36 := [asserted]: #12
#45 := [mp #36 #42]: #40
#52 := [mp~ #45 #62]: #40
#116 := (not #40)
#203 := (or #116 #44)
#117 := [quant-inst #13]: #203
[unit-resolution #117 #52 #53]: false
unsat
2afe1df1902e39168c29e6c56b5c35b4e9df2334 36 0
#2 := false
decl f4 :: (-> S3 S4)
decl f6 :: (-> Int S3)
decl f7 :: (-> Int Int)
decl f8 :: (-> Int Int)
decl f9 :: Int
#17 := f9
#18 := (f8 f9)
#19 := (f7 #18)
#20 := (f6 #19)
#21 := (f4 #20)
decl f3 :: (-> S2 S4)
decl f5 :: S2
#15 := f5
#16 := (f3 f5)
#22 := (= #16 #21)
#23 := (not #22)
#44 := [asserted]: #23
#10 := (:var 0 S3)
#11 := (f4 #10)
#8 := (:var 1 S2)
#9 := (f3 #8)
#12 := (pattern #9 #11)
#13 := (= #9 #11)
#14 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #12) #13)
#54 := (~ #14 #14)
#52 := (~ #13 #13)
#53 := [refl]: #52
#55 := [nnf-pos #53]: #54
#43 := [asserted]: #14
#46 := [mp~ #43 #55]: #14
#109 := (not #14)
#196 := (or #109 #22)
#110 := [quant-inst #15 #20]: #196
[unit-resolution #110 #46 #44]: false
unsat
2e896cd9a2fe5bb207857c1a092e502ece669e01 16 0
#2 := false
#1 := true
#8 := (implies true true)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
a79bf9f4931711426a169989fc9caedc89cfa1a4 16 0
#2 := false
#8 := (implies false false)
#9 := (not #8)
#37 := (iff #9 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
1be840005f8a5d8a9ad842fa8ca7ecbce8bcb124 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (implies #10 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#33 := (= f1 #9)
#36 := (implies #33 #33)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#32 := [asserted]: #12
[mp #32 #49]: false
unsat
ff912d650aac3afb164b55e5753273823fac2c2b 48 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (implies #9 #12)
#14 := (not #13)
#65 := (iff #14 false)
#38 := (= f1 f4)
#35 := (= f1 f3)
#41 := (or #35 #38)
#47 := (not #35)
#48 := (or #47 #41)
#53 := (not #48)
#63 := (iff #53 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #53 #58)
#56 := (iff #48 true)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#54 := (iff #14 #53)
#51 := (iff #13 #48)
#44 := (implies #35 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#43 := [monotonicity #37 #40]: #42
#46 := [monotonicity #37 #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#66 := [trans #55 #64]: #65
#34 := [asserted]: #14
[mp #34 #66]: false
unsat
4edc7ae478dc44e520d7e30a938c9581ab4e2a19 53 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (or #11 #9)
#13 := (implies #9 #12)
#14 := (not #13)
#70 := (iff #14 false)
#38 := (= f1 f4)
#35 := (= f1 f3)
#44 := (or #35 #38)
#52 := (not #35)
#53 := (or #52 #44)
#58 := (not #53)
#68 := (iff #58 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #58 #63)
#61 := (iff #53 true)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#59 := (iff #14 #58)
#56 := (iff #13 #53)
#49 := (implies #35 #44)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #13 #49)
#47 := (iff #12 #44)
#41 := (or #38 #35)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #12 #41)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40 #37]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #37 #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#71 := [trans #60 #69]: #70
#34 := [asserted]: #14
[mp #34 #71]: false
unsat
efb9f6518fd6418e28f5a875349db177d5fe4ceb 56 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#11 := f4
#12 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#13 := (implies #9 #12)
#10 := (not #9)
#14 := (implies #10 #13)
#15 := (not #14)
#73 := (iff #15 false)
#42 := (= f1 f4)
#36 := (= f1 f3)
#39 := (not #36)
#48 := (or #39 #42)
#56 := (or #36 #48)
#61 := (not #56)
#71 := (iff #61 false)
#1 := true
#66 := (not true)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #61 #66)
#64 := (iff #56 true)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#62 := (iff #15 #61)
#59 := (iff #14 #56)
#53 := (implies #39 #48)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #14 #53)
#51 := (iff #13 #48)
#45 := (implies #36 #42)
#49 := (iff #45 #48)
#50 := [rewrite]: #49
#46 := (iff #13 #45)
#43 := (iff #12 #42)
#44 := [rewrite]: #43
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#47 := [monotonicity #38 #44]: #46
#52 := [trans #47 #50]: #51
#40 := (iff #10 #39)
#41 := [monotonicity #38]: #40
#55 := [monotonicity #41 #52]: #54
#60 := [trans #55 #58]: #59
#63 := [monotonicity #60]: #62
#74 := [trans #63 #72]: #73
#35 := [asserted]: #15
[mp #35 #74]: false
unsat
741dce5f3cb8845f3e976710e82077b71b6e3b48 89 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#50 := (not #38)
#51 := (or #50 #41)
#109 := (iff #51 false)
#104 := (or false false)
#107 := (iff #104 false)
#108 := [rewrite]: #107
#105 := (iff #51 #104)
#95 := (iff #41 false)
#44 := (not #41)
#56 := (not #51)
#78 := (or #50 #41 #56)
#81 := (not #78)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (implies #9 #11)
#14 := (not #13)
#12 := (not #11)
#15 := (implies #12 #14)
#16 := (implies #9 #15)
#17 := (not #16)
#84 := (iff #17 #81)
#62 := (or #41 #56)
#70 := (or #50 #62)
#75 := (not #70)
#82 := (iff #75 #81)
#79 := (iff #70 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#76 := (iff #17 #75)
#73 := (iff #16 #70)
#67 := (implies #38 #62)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #16 #67)
#65 := (iff #15 #62)
#59 := (implies #44 #56)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#57 := (iff #14 #56)
#54 := (iff #13 #51)
#47 := (implies #38 #41)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #13 #47)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#49 := [monotonicity #40 #43]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #55]: #57
#45 := (iff #12 #44)
#46 := [monotonicity #43]: #45
#61 := [monotonicity #46 #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #40 #66]: #68
#74 := [trans #69 #72]: #73
#77 := [monotonicity #74]: #76
#85 := [trans #77 #83]: #84
#37 := [asserted]: #17
#86 := [mp #37 #85]: #81
#88 := [not-or-elim #86]: #44
#96 := [iff-false #88]: #95
#102 := (iff #50 false)
#1 := true
#97 := (not true)
#100 := (iff #97 false)
#101 := [rewrite]: #100
#98 := (iff #50 #97)
#93 := (iff #38 true)
#87 := [not-or-elim #86]: #38
#94 := [iff-true #87]: #93
#99 := [monotonicity #94]: #98
#103 := [trans #99 #101]: #102
#106 := [monotonicity #103 #96]: #105
#110 := [trans #106 #108]: #109
#89 := [not-or-elim #86]: #51
[mp #89 #110]: false
unsat
0f2e31d8ce8759346cad7c733d7f6d64c22635fd 57 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
decl f1 :: S1
#4 := f1
#36 := (= f1 #9)
#48 := (not #36)
decl f5 :: (-> S2 S1)
#11 := (f5 f4)
#39 := (= f1 #11)
#49 := (iff #39 #48)
#61 := (not #49)
#76 := (iff #61 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #61 #71)
#69 := (iff #49 true)
#42 := (iff #36 #39)
#58 := (not #42)
#66 := (iff #58 #49)
#67 := [rewrite]: #66
#50 := (or #42 #49)
#55 := (not #50)
#12 := (= #11 f1)
#10 := (= #9 f1)
#13 := (iff #10 #12)
#14 := (implies #13 #13)
#15 := (not #14)
#56 := (iff #15 #55)
#53 := (iff #14 #50)
#45 := (implies #42 #42)
#51 := (iff #45 #50)
#52 := [rewrite]: #51
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#41 := [rewrite]: #40
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #41]: #43
#47 := [monotonicity #44 #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#35 := [asserted]: #15
#60 := [mp #35 #57]: #55
#59 := [not-or-elim #60]: #58
#68 := [mp #59 #67]: #49
#70 := [iff-true #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#62 := [not-or-elim #60]: #61
[mp #62 #77]: false
unsat
1f5e449bae0893dc762768fde0ab33c8f0ed64d8 50 0
#2 := false
decl f5 :: S2
#11 := f5
decl f3 :: S2
#8 := f3
#13 := (= f3 f5)
decl f4 :: S2
#9 := f4
#12 := (= f4 f5)
#77 := (iff #12 #13)
#75 := (iff #13 #12)
#10 := (= f3 f4)
#37 := (not #12)
#44 := (not #10)
#53 := (or #44 #37 #13)
#56 := (not #53)
#14 := (implies #12 #13)
#15 := (implies #10 #14)
#16 := (not #15)
#59 := (iff #16 #56)
#38 := (or #37 #13)
#45 := (or #44 #38)
#50 := (not #45)
#57 := (iff #50 #56)
#54 := (iff #45 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#60 := [trans #52 #58]: #59
#36 := [asserted]: #16
#61 := [mp #36 #60]: #56
#62 := [not-or-elim #61]: #10
#76 := [monotonicity #62]: #75
#78 := [symm #76]: #77
#63 := [not-or-elim #61]: #12
#73 := [mp #63 #78]: #13
#64 := (not #13)
#65 := [not-or-elim #61]: #64
[unit-resolution #65 #73]: false
unsat
4e0b37ec3c792ee4a851a10d652496a1aab77e5d 27 0
#2 := false
decl f5 :: (-> S2 S3)
decl f4 :: S2
#9 := f4
#12 := (f5 f4)
decl f3 :: S2
#8 := f3
#11 := (f5 f3)
#13 := (= #11 #12)
#10 := (= f3 f4)
#36 := (not #10)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #10 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #10
#54 := [monotonicity #43]: #13
#44 := (not #13)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #54]: false
unsat
acbbaa6eb92188382535c4667d023d44e750edc6 73 0
#2 := false
decl f3 :: (-> S1 S1)
decl f4 :: S1
#12 := f4
#13 := (f3 f4)
decl f1 :: S1
#4 := f1
#45 := (= f1 #13)
#76 := (not #45)
#48 := (= f1 f4)
#8 := (:var 0 S1)
#9 := (f3 #8)
#39 := (= f1 #9)
#42 := (forall (vars (?v0 S1)) #39)
#57 := (not #42)
#66 := (or #57 #45 #48)
#69 := (not #66)
#15 := (= f4 f1)
#14 := (= #13 f1)
#16 := (or #14 #15)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S1)) #10)
#17 := (implies #11 #16)
#18 := (not #17)
#72 := (iff #18 #69)
#51 := (or #45 #48)
#58 := (or #57 #51)
#63 := (not #58)
#70 := (iff #63 #69)
#67 := (iff #58 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#64 := (iff #18 #63)
#61 := (iff #17 #58)
#54 := (implies #42 #51)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #17 #54)
#52 := (iff #16 #51)
#49 := (iff #15 #48)
#50 := [rewrite]: #49
#46 := (iff #14 #45)
#47 := [rewrite]: #46
#53 := [monotonicity #47 #50]: #52
#43 := (iff #11 #42)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#56 := [monotonicity #44 #53]: #55
#62 := [trans #56 #60]: #61
#65 := [monotonicity #62]: #64
#73 := [trans #65 #71]: #72
#38 := [asserted]: #18
#74 := [mp #38 #73]: #69
#77 := [not-or-elim #74]: #76
#561 := (pattern #9)
#562 := (forall (vars (?v0 S1)) (:pat #561) #39)
#565 := (iff #42 #562)
#563 := (iff #39 #39)
#564 := [refl]: #563
#566 := [quant-intro #564]: #565
#91 := (~ #42 #42)
#89 := (~ #39 #39)
#90 := [refl]: #89
#92 := [nnf-pos #90]: #91
#75 := [not-or-elim #74]: #42
#81 := [mp~ #75 #92]: #42
#567 := [mp #81 #566]: #562
#144 := (not #562)
#231 := (or #144 #45)
#145 := [quant-inst #12]: #231
[unit-resolution #145 #567 #77]: false
unsat
58e0c0ea4309865900675d68ad0e58b939e134fe 106 0
#2 := false
decl f3 :: (-> S2 S2 S1)
decl ?v0!0 :: S2
#77 := ?v0!0
#86 := (f3 ?v0!0 ?v0!0)
decl f1 :: S1
#4 := f1
#78 := (= f1 #86)
#79 := (not #78)
#9 := (:var 0 S2)
#16 := (f3 #9 #9)
#53 := (= f1 #16)
#56 := (forall (vars (?v0 S2)) #53)
#72 := (not #56)
#87 := (~ #72 #79)
#88 := [sk]: #87
#8 := (:var 1 S2)
#12 := (f3 #9 #8)
#44 := (= f1 #12)
#10 := (f3 #8 #9)
#41 := (= f1 #10)
#47 := (and #41 #44)
#50 := (forall (vars (?v0 S2) (?v1 S2)) #47)
#62 := (not #50)
#63 := (or #62 #56)
#68 := (not #63)
#17 := (= #16 f1)
#18 := (forall (vars (?v0 S2)) #17)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (and #11 #13)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#19 := (implies #15 #18)
#20 := (not #19)
#69 := (iff #20 #68)
#66 := (iff #19 #63)
#59 := (implies #50 #56)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #19 #59)
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#55 := [rewrite]: #54
#58 := [quant-intro #55]: #57
#51 := (iff #15 #50)
#48 := (iff #14 #47)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#52 := [quant-intro #49]: #51
#61 := [monotonicity #52 #58]: #60
#67 := [trans #61 #65]: #66
#70 := [monotonicity #67]: #69
#40 := [asserted]: #20
#73 := [mp #40 #70]: #68
#74 := [not-or-elim #73]: #72
#91 := [mp~ #74 #88]: #79
#576 := (pattern #12)
#575 := (pattern #10)
#90 := (not #44)
#89 := (not #41)
#92 := (or #89 #90)
#93 := (not #92)
#577 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #575 #576) #93)
#96 := (forall (vars (?v0 S2) (?v1 S2)) #93)
#580 := (iff #96 #577)
#578 := (iff #93 #93)
#579 := [refl]: #578
#581 := [quant-intro #579]: #580
#97 := (iff #50 #96)
#94 := (iff #47 #93)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#84 := (~ #50 #50)
#82 := (~ #47 #47)
#83 := [refl]: #82
#85 := [nnf-pos #83]: #84
#71 := [not-or-elim #73]: #50
#76 := [mp~ #71 #85]: #50
#99 := [mp #76 #98]: #96
#582 := [mp #99 #581]: #577
#247 := (not #577)
#251 := (or #247 #78)
#157 := (or #79 #79)
#244 := (not #157)
#230 := (or #247 #244)
#569 := (iff #230 #251)
#356 := (iff #251 #251)
#563 := [rewrite]: #356
#177 := (iff #244 #78)
#159 := (not #79)
#248 := (iff #159 #78)
#249 := [rewrite]: #248
#246 := (iff #244 #159)
#158 := (iff #157 #79)
#245 := [rewrite]: #158
#237 := [monotonicity #245]: #246
#250 := [trans #237 #249]: #177
#224 := [monotonicity #250]: #569
#235 := [trans #224 #563]: #569
#567 := [quant-inst #77 #77]: #230
#236 := [mp #567 #235]: #251
[unit-resolution #236 #582 #91]: false
unsat
6f5c195ed8186ea009f805e2f8ea8ad3b1ee6432 66 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#40 := (= f1 f4)
decl f3 :: S1
#8 := f3
#37 := (= f1 f3)
#43 := (or #37 #40)
#87 := (iff #43 false)
#82 := (or false false)
#85 := (iff #82 false)
#86 := [rewrite]: #85
#83 := (iff #43 #82)
#78 := (iff #40 false)
#69 := (not #40)
#46 := (not #37)
#52 := (and #46 #43)
#60 := (not #52)
#61 := (or #40 #60)
#66 := (not #61)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (not #9)
#12 := (or #9 #11)
#14 := (and #12 #13)
#15 := (implies #14 #11)
#16 := (not #15)
#67 := (iff #16 #66)
#64 := (iff #15 #61)
#57 := (implies #52 #40)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #15 #57)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#55 := (iff #14 #52)
#49 := (and #43 #46)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39]: #47
#44 := (iff #12 #43)
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56 #42]: #58
#65 := [trans #59 #63]: #64
#68 := [monotonicity #65]: #67
#36 := [asserted]: #16
#71 := [mp #36 #68]: #66
#70 := [not-or-elim #71]: #69
#79 := [iff-false #70]: #78
#80 := (iff #37 false)
#72 := [not-or-elim #71]: #52
#73 := [and-elim #72]: #46
#81 := [iff-false #73]: #80
#84 := [monotonicity #81 #79]: #83
#88 := [trans #84 #86]: #87
#74 := [and-elim #72]: #43
[mp #74 #88]: false
unsat
bc6de36d6c86b416e91711bb23067cc8250ac153 59 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
#17 := (and #14 #16)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and #9 #11)
#18 := (or #12 #17)
#19 := (implies #18 #18)
#20 := (not #19)
#74 := (iff #20 false)
#1 := true
#69 := (not true)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #20 #69)
#67 := (iff #19 true)
#53 := (= f1 f6)
#50 := (= f1 f5)
#56 := (and #50 #53)
#44 := (= f1 f4)
#41 := (= f1 f3)
#47 := (and #41 #44)
#59 := (or #47 #56)
#62 := (implies #59 #59)
#65 := (iff #62 true)
#66 := [rewrite]: #65
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#54 := (iff #16 #53)
#55 := [rewrite]: #54
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#58 := [monotonicity #52 #55]: #57
#48 := (iff #12 #47)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#61 := [monotonicity #49 #58]: #60
#64 := [monotonicity #61 #61]: #63
#68 := [trans #64 #66]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#40 := [asserted]: #20
[mp #40 #75]: false
unsat
c820d022f24e2baa1299dcbea0f2d3f3d8f6dd72 19 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#9 := (f3 0::Int)
#10 := (= #9 #9)
#11 := (not #10)
#55 := (iff #11 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #11 #50)
#48 := (iff #10 true)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#47 := [asserted]: #11
[mp #47 #56]: false
unsat
7b3c8049956bdd5721dd20460eb60a9ebe89e5eb 19 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 1::Int
#9 := (f3 1::Int)
#10 := (= #9 #9)
#11 := (not #10)
#56 := (iff #11 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #11 #51)
#49 := (iff #10 true)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#48 := [asserted]: #11
[mp #48 #57]: false
unsat
fb370925ef9917dad66e0244200f67eedf11b6cf 18 0
#2 := false
#9 := 1::Int
#8 := 0::Int
#10 := (< 0::Int 1::Int)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
3e975ce36aa1bd6d92c534a802e4e9206e497829 18 0
#2 := false
#9 := 1::Int
#8 := 0::Int
#10 := (<= 0::Int 1::Int)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
a8dfb9a9f38e5293ee803fd471ebee346a686963 18 0
#2 := false
#9 := 2345678901::Int
#8 := 123456789::Int
#10 := (< 123456789::Int 2345678901::Int)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
389b2e8cab048d0cb042010db3ed5e5d4e058a76 30 0
#2 := false
decl f3 :: (-> Int S2)
#9 := 1::Int
#12 := (f3 1::Int)
#8 := 0::Int
#10 := (+ 0::Int 1::Int)
#11 := (f3 #10)
#13 := (= #11 #12)
#14 := (not #13)
#66 := (iff #14 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #14 #61)
#59 := (iff #13 true)
#54 := (= #12 #12)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#51 := (= #10 1::Int)
#52 := [rewrite]: #51
#53 := [monotonicity #52]: #13
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#50 := [asserted]: #14
[mp #50 #67]: false
unsat
69b8844d592bea5e5302a7f15c44b4ae5e4ec06b 35 0
#2 := false
decl f3 :: (-> Int S2)
#10 := 1::Int
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#11 := (+ #9 1::Int)
#12 := (f3 #11)
#13 := (= #12 #12)
#14 := (not #13)
#70 := (iff #14 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #14 #65)
#63 := (iff #13 true)
#52 := (+ 1::Int #9)
#55 := (f3 #52)
#58 := (= #55 #55)
#61 := (iff #58 true)
#62 := [rewrite]: #61
#59 := (iff #13 #58)
#56 := (= #12 #55)
#53 := (= #11 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57 #57]: #59
#64 := [trans #60 #62]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#51 := [asserted]: #14
[mp #51 #71]: false
unsat
1565411bbd184837a8e8294d25b8f04388cd838e 33 0
#2 := false
#10 := 1::Int
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#11 := (+ #9 1::Int)
#12 := (< #9 #11)
#13 := (not #12)
#69 := (iff #13 false)
#51 := (+ 1::Int #9)
#54 := (< #9 #51)
#57 := (not #54)
#67 := (iff #57 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #57 #62)
#60 := (iff #54 true)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#58 := (iff #13 #57)
#55 := (iff #12 #54)
#52 := (= #11 #51)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#59 := [monotonicity #56]: #58
#70 := [trans #59 #68]: #69
#50 := [asserted]: #13
[mp #50 #70]: false
unsat
fa7e6fd7546c88bfe99ee359f459c00d80bf91c0 488 0
#2 := false
decl f4 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
#14 := (f4 f6)
#10 := 1::Int
#64 := (+ 1::Int #14)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#58 := (+ 1::Int #9)
#414 := (= #58 #64)
#382 := (not #414)
decl f3 :: (-> Int S2)
#67 := (f3 #64)
#61 := (f3 #58)
#70 := (= #61 #67)
#661 := (f4 #61)
#433 := (f3 #661)
#378 := (= #433 #67)
#399 := (= #67 #433)
#397 := (= #64 #661)
#662 := (= #58 #661)
#663 := -1::Int
#653 := (* -1::Int #661)
#312 := (+ #9 #653)
#651 := (<= #312 -1::Int)
#317 := (= #312 -1::Int)
#655 := (>= #9 -1::Int)
#26 := 0::Int
#504 := (>= #9 0::Int)
#432 := (= #9 0::Int)
#341 := (f3 #9)
#505 := (f4 #341)
#598 := (= #505 0::Int)
#434 := (not #504)
#436 := [hypothesis]: #434
#599 := (or #504 #598)
#27 := (:var 0 Int)
#29 := (f3 #27)
#672 := (pattern #29)
#117 := (>= #27 0::Int)
#30 := (f4 #29)
#35 := (= #30 0::Int)
#165 := (or #35 #117)
#679 := (forall (vars (?v0 Int)) (:pat #672) #165)
#170 := (forall (vars (?v0 Int)) #165)
#682 := (iff #170 #679)
#680 := (iff #165 #165)
#681 := [refl]: #680
#683 := [quant-intro #681]: #682
#183 := (~ #170 #170)
#191 := (~ #165 #165)
#192 := [refl]: #191
#184 := [nnf-pos #192]: #183
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#173 := (iff #37 #170)
#136 := (= 0::Int #30)
#142 := (not #34)
#143 := (or #142 #136)
#148 := (forall (vars (?v0 Int)) #143)
#171 := (iff #148 #170)
#168 := (iff #143 #165)
#162 := (or #117 #35)
#166 := (iff #162 #165)
#167 := [rewrite]: #166
#163 := (iff #143 #162)
#160 := (iff #136 #35)
#161 := [rewrite]: #160
#158 := (iff #142 #117)
#118 := (not #117)
#153 := (not #118)
#156 := (iff #153 #117)
#157 := [rewrite]: #156
#154 := (iff #142 #153)
#151 := (iff #34 #118)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#159 := [trans #155 #157]: #158
#164 := [monotonicity #159 #161]: #163
#169 := [trans #164 #167]: #168
#172 := [quant-intro #169]: #171
#149 := (iff #37 #148)
#146 := (iff #36 #143)
#139 := (implies #34 #136)
#144 := (iff #139 #143)
#145 := [rewrite]: #144
#140 := (iff #36 #139)
#137 := (iff #35 #136)
#138 := [rewrite]: #137
#141 := [monotonicity #138]: #140
#147 := [trans #141 #145]: #146
#150 := [quant-intro #147]: #149
#174 := [trans #150 #172]: #173
#135 := [asserted]: #37
#175 := [mp #135 #174]: #170
#193 := [mp~ #175 #184]: #170
#684 := [mp #193 #683]: #679
#363 := (not #679)
#580 := (or #363 #504 #598)
#595 := (or #598 #504)
#577 := (or #363 #595)
#581 := (iff #577 #580)
#589 := (or #363 #599)
#587 := (iff #589 #580)
#592 := [rewrite]: #587
#590 := (iff #577 #589)
#586 := (iff #595 #599)
#588 := [rewrite]: #586
#591 := [monotonicity #588]: #590
#582 := [trans #591 #592]: #581
#579 := [quant-inst #9]: #577
#583 := [mp #579 #582]: #580
#437 := [unit-resolution #583 #684]: #599
#438 := [unit-resolution #437 #436]: #598
#435 := (= #9 #505)
#320 := (= f5 #341)
#21 := (:var 0 S2)
#22 := (f4 #21)
#664 := (pattern #22)
#23 := (f3 #22)
#91 := (= #21 #23)
#665 := (forall (vars (?v0 S2)) (:pat #664) #91)
#95 := (forall (vars (?v0 S2)) #91)
#666 := (iff #95 #665)
#668 := (iff #665 #665)
#669 := [rewrite]: #668
#667 := [rewrite]: #666
#670 := [trans #667 #669]: #666
#189 := (~ #95 #95)
#187 := (~ #91 #91)
#188 := [refl]: #187
#190 := [nnf-pos #188]: #189
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S2)) #24)
#96 := (iff #25 #95)
#93 := (iff #24 #91)
#94 := [rewrite]: #93
#97 := [quant-intro #94]: #96
#90 := [asserted]: #25
#100 := [mp #90 #97]: #95
#179 := [mp~ #100 #190]: #95
#671 := [mp #179 #670]: #665
#314 := (not #665)
#445 := (or #314 #320)
#652 := [quant-inst #8]: #445
#442 := [unit-resolution #652 #671]: #320
#440 := [monotonicity #442]: #435
#419 := [trans #440 #438]: #432
#422 := (not #432)
#426 := (or #422 #504)
#428 := [th-lemma arith triangle-eq]: #426
#429 := [unit-resolution #428 #436 #419]: false
#427 := [lemma #429]: #504
#386 := (or #434 #655)
#388 := [th-lemma arith farkas 1 1]: #386
#389 := [unit-resolution #388 #427]: #655
#301 := (not #655)
#304 := (or #317 #301)
#99 := (= #27 #30)
#124 := (or #99 #118)
#673 := (forall (vars (?v0 Int)) (:pat #672) #124)
#129 := (forall (vars (?v0 Int)) #124)
#676 := (iff #129 #673)
#674 := (iff #124 #124)
#675 := [refl]: #674
#677 := [quant-intro #675]: #676
#181 := (~ #129 #129)
#180 := (~ #124 #124)
#177 := [refl]: #180
#182 := [nnf-pos #177]: #181
#31 := (= #30 #27)
#28 := (<= 0::Int #27)
#32 := (implies #28 #31)
#33 := (forall (vars (?v0 Int)) #32)
#132 := (iff #33 #129)
#106 := (not #28)
#107 := (or #106 #99)
#112 := (forall (vars (?v0 Int)) #107)
#130 := (iff #112 #129)
#127 := (iff #107 #124)
#121 := (or #118 #99)
#125 := (iff #121 #124)
#126 := [rewrite]: #125
#122 := (iff #107 #121)
#119 := (iff #106 #118)
#115 := (iff #28 #117)
#116 := [rewrite]: #115
#120 := [monotonicity #116]: #119
#123 := [monotonicity #120]: #122
#128 := [trans #123 #126]: #127
#131 := [quant-intro #128]: #130
#113 := (iff #33 #112)
#110 := (iff #32 #107)
#103 := (implies #28 #99)
#108 := (iff #103 #107)
#109 := [rewrite]: #108
#104 := (iff #32 #103)
#101 := (iff #31 #99)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#111 := [trans #105 #109]: #110
#114 := [quant-intro #111]: #113
#133 := [trans #114 #131]: #132
#98 := [asserted]: #33
#134 := [mp #98 #133]: #129
#178 := [mp~ #134 #182]: #129
#678 := [mp #178 #677]: #673
#643 := (not #673)
#644 := (or #643 #317 #301)
#325 := (>= #58 0::Int)
#326 := (not #325)
#657 := (or #662 #326)
#645 := (or #643 #657)
#289 := (iff #645 #644)
#646 := (or #643 #304)
#649 := (iff #646 #644)
#288 := [rewrite]: #649
#283 := (iff #645 #646)
#641 := (iff #657 #304)
#302 := (iff #326 #301)
#297 := (iff #325 #655)
#639 := [rewrite]: #297
#303 := [monotonicity #639]: #302
#654 := (iff #662 #317)
#313 := [rewrite]: #654
#642 := [monotonicity #313 #303]: #641
#647 := [monotonicity #642]: #283
#650 := [trans #647 #288]: #289
#640 := [quant-inst #58]: #645
#648 := [mp #640 #650]: #644
#472 := [unit-resolution #648 #678]: #304
#390 := [unit-resolution #472 #389]: #317
#474 := (not #317)
#475 := (or #474 #651)
#476 := [th-lemma arith triangle-eq]: #475
#391 := [unit-resolution #476 #390]: #651
#637 := (>= #312 -1::Int)
#478 := (or #474 #637)
#479 := [th-lemma arith triangle-eq]: #478
#392 := [unit-resolution #479 #390]: #637
#393 := [th-lemma arith eq-propagate -1 -1 #392 #391]: #662
#395 := (= #64 #58)
#394 := [hypothesis]: #414
#396 := [symm #394]: #395
#398 := [trans #396 #393]: #397
#376 := [monotonicity #398]: #399
#379 := [symm #376]: #378
#280 := (= #61 #433)
#418 := (or #314 #280)
#421 := [quant-inst #61]: #418
#387 := [unit-resolution #421 #671]: #280
#380 := [trans #387 #379]: #70
#327 := (not #70)
#18 := (= f5 f6)
#656 := (f3 #14)
#452 := (= #656 f6)
#658 := (= f6 #656)
#659 := (or #314 #658)
#660 := [quant-inst #13]: #659
#547 := [unit-resolution #660 #671]: #658
#453 := [symm #547]: #452
#455 := (= f5 #656)
#449 := (= #341 #656)
#480 := (= #9 #14)
#342 := (f4 #67)
#626 := (* -1::Int #342)
#630 := (+ #14 #626)
#604 := (<= #630 -1::Int)
#619 := (= #630 -1::Int)
#616 := (>= #14 -1::Int)
#584 := (>= #14 0::Int)
#548 := (= #14 0::Int)
#578 := (f4 #656)
#585 := (= #578 0::Int)
#551 := (not #584)
#552 := [hypothesis]: #551
#570 := (or #584 #585)
#574 := (or #363 #584 #585)
#569 := (or #585 #584)
#575 := (or #363 #569)
#567 := (iff #575 #574)
#576 := (or #363 #570)
#565 := (iff #576 #574)
#566 := [rewrite]: #565
#562 := (iff #575 #576)
#572 := (iff #569 #570)
#573 := [rewrite]: #572
#563 := [monotonicity #573]: #562
#564 := [trans #563 #566]: #567
#571 := [quant-inst #14]: #575
#568 := [mp #571 #564]: #574
#546 := [unit-resolution #568 #684]: #570
#541 := [unit-resolution #546 #552]: #585
#533 := (= #14 #578)
#529 := [monotonicity #547]: #533
#530 := [trans #529 #541]: #548
#531 := (not #548)
#534 := (or #531 #584)
#535 := [th-lemma arith triangle-eq]: #534
#536 := [unit-resolution #535 #552 #530]: false
#537 := [lemma #536]: #584
#519 := (or #551 #616)
#524 := [th-lemma arith farkas 1 1]: #519
#520 := [unit-resolution #524 #537]: #616
#623 := (not #616)
#609 := (or #623 #619)
#607 := (or #643 #623 #619)
#627 := (>= #64 0::Int)
#628 := (not #627)
#625 := (= #64 #342)
#629 := (or #625 #628)
#613 := (or #643 #629)
#600 := (iff #613 #607)
#608 := (or #643 #609)
#446 := (iff #608 #607)
#447 := [rewrite]: #446
#615 := (iff #613 #608)
#612 := (iff #629 #609)
#465 := (or #619 #623)
#610 := (iff #465 #609)
#611 := [rewrite]: #610
#466 := (iff #629 #465)
#618 := (iff #628 #623)
#617 := (iff #627 #616)
#622 := [rewrite]: #617
#624 := [monotonicity #622]: #618
#620 := (iff #625 #619)
#621 := [rewrite]: #620
#467 := [monotonicity #621 #624]: #466
#606 := [trans #467 #611]: #612
#444 := [monotonicity #606]: #615
#601 := [trans #444 #447]: #600
#614 := [quant-inst #64]: #613
#603 := [mp #614 #601]: #607
#550 := [unit-resolution #603 #678]: #609
#521 := [unit-resolution #550 #520]: #619
#539 := (not #619)
#540 := (or #539 #604)
#542 := [th-lemma arith triangle-eq]: #540
#522 := [unit-resolution #542 #521]: #604
#602 := (>= #630 -1::Int)
#525 := (or #539 #602)
#526 := [th-lemma arith triangle-eq]: #525
#527 := [unit-resolution #526 #521]: #602
#511 := (+ #342 #653)
#406 := (<= #511 0::Int)
#538 := (= #342 #661)
#528 := (= #661 #342)
#84 := (not #18)
#518 := [hypothesis]: #84
#335 := (or #70 #18)
#85 := (iff #70 #84)
#15 := (+ #14 1::Int)
#16 := (f3 #15)
#11 := (+ #9 1::Int)
#12 := (f3 #11)
#17 := (= #12 #16)
#19 := (iff #17 #18)
#20 := (not #19)
#88 := (iff #20 #85)
#76 := (iff #18 #70)
#81 := (not #76)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #20 #81)
#79 := (iff #19 #76)
#73 := (iff #70 #18)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #19 #73)
#71 := (iff #17 #70)
#68 := (= #16 #67)
#65 := (= #15 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#62 := (= #12 #61)
#59 := (= #11 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#72 := [monotonicity #63 #69]: #71
#75 := [monotonicity #72]: #74
#80 := [trans #75 #78]: #79
#83 := [monotonicity #80]: #82
#89 := [trans #83 #87]: #88
#57 := [asserted]: #20
#92 := [mp #57 #89]: #85
#249 := (not #85)
#334 := (or #70 #18 #249)
#250 := [def-axiom]: #334
#336 := [unit-resolution #250 #92]: #335
#523 := [unit-resolution #336 #518]: #70
#508 := [monotonicity #523]: #528
#454 := [symm #508]: #538
#509 := (not #538)
#490 := (or #509 #406)
#514 := [th-lemma arith triangle-eq]: #490
#515 := [unit-resolution #514 #454]: #406
#517 := (>= #511 0::Int)
#510 := (or #509 #517)
#516 := [th-lemma arith triangle-eq]: #510
#484 := [unit-resolution #516 #454]: #517
#638 := (= #661 0::Int)
#462 := (not #638)
#605 := (= #342 0::Int)
#555 := (not #605)
#463 := (iff #555 #462)
#486 := (iff #605 #638)
#496 := (iff #638 #605)
#506 := [monotonicity #508]: #496
#507 := [symm #506]: #486
#468 := [monotonicity #507]: #463
#502 := (<= #342 0::Int)
#491 := (not #502)
#450 := (not #604)
#481 := (or #491 #551 #450)
#483 := [th-lemma arith assign-bounds -1 1]: #481
#485 := [unit-resolution #483 #522 #537]: #491
#492 := (or #555 #502)
#494 := [th-lemma arith triangle-eq]: #492
#495 := [unit-resolution #494 #485]: #555
#469 := [mp #495 #468]: #462
#360 := (or #638 #655)
#256 := (or #363 #638 #655)
#345 := (or #638 #325)
#633 := (or #363 #345)
#636 := (iff #633 #256)
#356 := (or #363 #360)
#635 := (iff #356 #256)
#632 := [rewrite]: #635
#357 := (iff #633 #356)
#361 := (iff #345 #360)
#362 := [monotonicity #639]: #361
#631 := [monotonicity #362]: #357
#346 := [trans #631 #632]: #636
#634 := [quant-inst #58]: #633
#347 := [mp #634 #346]: #256
#470 := [unit-resolution #347 #684]: #360
#471 := [unit-resolution #470 #469]: #655
#473 := [unit-resolution #472 #471]: #317
#477 := [unit-resolution #476 #473]: #651
#464 := [unit-resolution #479 #473]: #637
#441 := [th-lemma arith eq-propagate -1 -1 1 1 1 1 #464 #477 #484 #515 #527 #522]: #480
#451 := [monotonicity #441]: #449
#456 := [trans #442 #451]: #455
#457 := [trans #456 #453]: #18
#458 := [unit-resolution #518 #457]: false
#459 := [lemma #458]: #18
#340 := (or #327 #84)
#338 := (or #327 #84 #249)
#339 := [def-axiom]: #338
#337 := [unit-resolution #339 #92]: #340
#404 := [unit-resolution #337 #459]: #327
#381 := [unit-resolution #404 #380]: false
#383 := [lemma #381]: #382
#400 := (* -1::Int #64)
#402 := (+ #58 #400)
#403 := (<= #402 0::Int)
#460 := (* -1::Int #14)
#443 := (+ #9 #460)
#461 := (<= #443 0::Int)
#384 := [monotonicity #459]: #480
#377 := (not #480)
#385 := (or #377 #461)
#370 := [th-lemma arith triangle-eq]: #385
#371 := [unit-resolution #370 #384]: #461
#372 := (not #461)
#374 := (or #403 #372)
#373 := [th-lemma arith assign-bounds -1]: #374
#375 := [unit-resolution #373 #371]: #403
#401 := (>= #402 0::Int)
#431 := (>= #443 0::Int)
#364 := (or #377 #431)
#365 := [th-lemma arith triangle-eq]: #364
#366 := [unit-resolution #365 #384]: #431
#358 := (not #431)
#367 := (or #401 #358)
#368 := [th-lemma arith assign-bounds -1]: #367
#359 := [unit-resolution #368 #366]: #401
#350 := (not #401)
#369 := (not #403)
#351 := (or #414 #369 #350)
#352 := [th-lemma arith triangle-eq]: #351
#343 := [unit-resolution #352 #359 #375]: #414
[unit-resolution #343 #383]: false
unsat
c7585538b7dc0dc5de4e2c9b3dc037ecb098d49f 55 0
#2 := false
#13 := 1::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#16 := (+ #11 1::Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#15 := (+ #9 1::Int)
#17 := (+ #15 #16)
#12 := (+ #9 #11)
#14 := (+ #12 1::Int)
#18 := (< #14 #17)
#19 := (not #18)
#90 := (iff #19 false)
#69 := 2::Int
#70 := (+ 2::Int #12)
#57 := (+ 1::Int #12)
#75 := (< #57 #70)
#78 := (not #75)
#88 := (iff #78 false)
#1 := true
#82 := (not true)
#86 := (iff #82 false)
#87 := [rewrite]: #86
#84 := (iff #78 #82)
#81 := (iff #75 true)
#83 := [rewrite]: #81
#85 := [monotonicity #83]: #84
#89 := [trans #85 #87]: #88
#79 := (iff #19 #78)
#76 := (iff #18 #75)
#73 := (= #17 #70)
#63 := (+ 1::Int #11)
#60 := (+ 1::Int #9)
#66 := (+ #60 #63)
#71 := (= #66 #70)
#72 := [rewrite]: #71
#67 := (= #17 #66)
#64 := (= #16 #63)
#65 := [rewrite]: #64
#61 := (= #15 #60)
#62 := [rewrite]: #61
#68 := [monotonicity #62 #65]: #67
#74 := [trans #68 #72]: #73
#58 := (= #14 #57)
#59 := [rewrite]: #58
#77 := [monotonicity #59 #74]: #76
#80 := [monotonicity #77]: #79
#91 := [trans #80 #89]: #90
#56 := [asserted]: #19
[mp #56 #91]: false
unsat
4d316aeea49b4a8a62b04895dd872840d80b8e15 60 0
#2 := false
decl f4 :: (-> S2 Int)
#15 := (:var 0 S2)
#16 := (f4 #15)
#642 := (pattern #16)
decl f3 :: (-> Int S2)
#17 := (f3 #16)
#68 := (= #15 #17)
#643 := (forall (vars (?v0 S2)) (:pat #642) #68)
#72 := (forall (vars (?v0 S2)) #68)
#644 := (iff #72 #643)
#646 := (iff #643 #643)
#647 := [rewrite]: #646
#645 := [rewrite]: #644
#648 := [trans #645 #647]: #644
#166 := (~ #72 #72)
#164 := (~ #68 #68)
#165 := [refl]: #164
#167 := [nnf-pos #165]: #166
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#73 := (iff #19 #72)
#70 := (iff #18 #68)
#71 := [rewrite]: #70
#74 := [quant-intro #71]: #73
#67 := [asserted]: #19
#77 := [mp #67 #74]: #72
#156 := [mp~ #77 #167]: #72
#649 := [mp #156 #648]: #643
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#53 := (f3 #9)
#59 := (= f5 #53)
#64 := (not #59)
#10 := 0::Int
#11 := (+ #9 0::Int)
#12 := (f3 #11)
#13 := (= #12 f5)
#14 := (not #13)
#65 := (iff #14 #64)
#62 := (iff #13 #59)
#56 := (= #53 f5)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #13 #56)
#54 := (= #12 #53)
#51 := (= #11 #9)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#50 := [asserted]: #14
#69 := [mp #50 #66]: #64
#227 := (not #643)
#313 := (or #227 #59)
#314 := [quant-inst #8]: #313
[unit-resolution #314 #69 #649]: false
unsat
939bb60ace9d5eb975ab8e08c8ab792b8bba8477 60 0
#2 := false
decl f4 :: (-> S2 Int)
#15 := (:var 0 S2)
#16 := (f4 #15)
#642 := (pattern #16)
decl f3 :: (-> Int S2)
#17 := (f3 #16)
#68 := (= #15 #17)
#643 := (forall (vars (?v0 S2)) (:pat #642) #68)
#72 := (forall (vars (?v0 S2)) #68)
#644 := (iff #72 #643)
#646 := (iff #643 #643)
#647 := [rewrite]: #646
#645 := [rewrite]: #644
#648 := [trans #645 #647]: #644
#166 := (~ #72 #72)
#164 := (~ #68 #68)
#165 := [refl]: #164
#167 := [nnf-pos #165]: #166
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#73 := (iff #19 #72)
#70 := (iff #18 #68)
#71 := [rewrite]: #70
#74 := [quant-intro #71]: #73
#67 := [asserted]: #19
#77 := [mp #67 #74]: #72
#156 := [mp~ #77 #167]: #72
#649 := [mp #156 #648]: #643
decl f5 :: S2
#9 := f5
#10 := (f4 f5)
#53 := (f3 #10)
#59 := (= f5 #53)
#64 := (not #59)
#8 := 0::Int
#11 := (+ 0::Int #10)
#12 := (f3 #11)
#13 := (= #12 f5)
#14 := (not #13)
#65 := (iff #14 #64)
#62 := (iff #13 #59)
#56 := (= #53 f5)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #13 #56)
#54 := (= #12 #53)
#51 := (= #11 #10)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#50 := [asserted]: #14
#69 := [mp #50 #66]: #64
#227 := (not #643)
#313 := (or #227 #59)
#314 := [quant-inst #9]: #313
[unit-resolution #314 #69 #649]: false
unsat
9e3ffb81c0c24d6643947cc7653c5d14f3615839 37 0
#2 := false
decl f3 :: (-> Int S2)
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
decl f6 :: S2
#10 := f6
#11 := (f4 f6)
#14 := (+ #11 #9)
#15 := (f3 #14)
#12 := (+ #9 #11)
#13 := (f3 #12)
#16 := (= #13 #15)
#17 := (not #16)
#71 := (iff #17 false)
#1 := true
#66 := (not true)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #17 #66)
#64 := (iff #16 true)
#59 := (= #13 #13)
#62 := (iff #59 true)
#63 := [rewrite]: #62
#60 := (iff #16 #59)
#57 := (= #15 #13)
#55 := (= #14 #12)
#56 := [rewrite]: #55
#58 := [monotonicity #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#54 := [asserted]: #17
[mp #54 #72]: false
unsat
2434a86faf31ed58c07b03f69dd984962cd1a46d 42 0
#2 := false
decl f3 :: (-> Int S2)
decl f4 :: (-> S2 Int)
decl f7 :: S2
#12 := f7
#13 := (f4 f7)
decl f6 :: S2
#10 := f6
#11 := (f4 f6)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#17 := (+ #9 #11)
#18 := (+ #17 #13)
#19 := (f3 #18)
#14 := (+ #11 #13)
#15 := (+ #9 #14)
#16 := (f3 #15)
#20 := (= #16 #19)
#21 := (not #20)
#75 := (iff #21 false)
#1 := true
#70 := (not true)
#73 := (iff #70 false)
#74 := [rewrite]: #73
#71 := (iff #21 #70)
#68 := (iff #20 true)
#63 := (= #16 #16)
#66 := (iff #63 true)
#67 := [rewrite]: #66
#64 := (iff #20 #63)
#61 := (= #19 #16)
#59 := (= #18 #15)
#60 := [rewrite]: #59
#62 := [monotonicity #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#58 := [asserted]: #21
[mp #58 #76]: false
unsat
9d17883fbf3f3e7801d8a83bdd2f87e74ba0ad84 462 0
#2 := false
#14 := 0::Int
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#473 := (= #9 0::Int)
decl f3 :: (-> Int S2)
#307 := (f3 #9)
#594 := (f4 #307)
#596 := (= #594 0::Int)
decl f6 :: S2
#10 := f6
#11 := (f4 f6)
#645 := (f3 #11)
#486 := (f4 #645)
#494 := (= #486 0::Int)
#593 := (>= #9 0::Int)
#446 := (not #596)
#450 := [hypothesis]: #446
#595 := (or #593 #596)
#27 := (:var 0 Int)
#29 := (f3 #27)
#665 := (pattern #29)
#89 := (>= #27 0::Int)
#30 := (f4 #29)
#35 := (= #30 0::Int)
#137 := (or #35 #89)
#672 := (forall (vars (?v0 Int)) (:pat #665) #137)
#142 := (forall (vars (?v0 Int)) #137)
#675 := (iff #142 #672)
#673 := (iff #137 #137)
#674 := [refl]: #673
#676 := [quant-intro #674]: #675
#155 := (~ #142 #142)
#163 := (~ #137 #137)
#164 := [refl]: #163
#156 := [nnf-pos #164]: #155
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#145 := (iff #37 #142)
#108 := (= 0::Int #30)
#114 := (not #34)
#115 := (or #114 #108)
#120 := (forall (vars (?v0 Int)) #115)
#143 := (iff #120 #142)
#140 := (iff #115 #137)
#134 := (or #89 #35)
#138 := (iff #134 #137)
#139 := [rewrite]: #138
#135 := (iff #115 #134)
#132 := (iff #108 #35)
#133 := [rewrite]: #132
#130 := (iff #114 #89)
#90 := (not #89)
#125 := (not #90)
#128 := (iff #125 #89)
#129 := [rewrite]: #128
#126 := (iff #114 #125)
#123 := (iff #34 #90)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#131 := [trans #127 #129]: #130
#136 := [monotonicity #131 #133]: #135
#141 := [trans #136 #139]: #140
#144 := [quant-intro #141]: #143
#121 := (iff #37 #120)
#118 := (iff #36 #115)
#111 := (implies #34 #108)
#116 := (iff #111 #115)
#117 := [rewrite]: #116
#112 := (iff #36 #111)
#109 := (iff #35 #108)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#119 := [trans #113 #117]: #118
#122 := [quant-intro #119]: #121
#146 := [trans #122 #144]: #145
#107 := [asserted]: #37
#147 := [mp #107 #146]: #142
#165 := [mp~ #147 #156]: #142
#677 := [mp #165 #676]: #672
#354 := (not #672)
#481 := (or #354 #593 #596)
#597 := (or #596 #593)
#482 := (or #354 #597)
#475 := (iff #482 #481)
#589 := (or #354 #595)
#587 := (iff #589 #481)
#590 := [rewrite]: #587
#491 := (iff #482 #589)
#598 := (iff #597 #595)
#480 := [rewrite]: #598
#586 := [monotonicity #480]: #491
#490 := [trans #586 #590]: #475
#441 := [quant-inst #9]: #482
#492 := [mp #441 #490]: #481
#451 := [unit-resolution #492 #677]: #595
#452 := [unit-resolution #451 #450]: #593
#518 := (not #593)
#467 := (or #518 #494)
#580 := (= #11 0::Int)
#12 := (+ #9 #11)
#13 := (f3 #12)
#646 := (f4 #13)
#647 := -1::Int
#306 := (* -1::Int #646)
#648 := (+ #11 #306)
#290 := (+ #9 #648)
#641 := (<= #290 0::Int)
#632 := (= #290 0::Int)
#654 := (>= #12 0::Int)
#493 := (>= #11 0::Int)
#524 := (not #494)
#516 := [hypothesis]: #524
#496 := (or #493 #494)
#591 := (or #354 #493 #494)
#495 := (or #494 #493)
#588 := (or #354 #495)
#582 := (iff #588 #591)
#579 := (or #354 #496)
#570 := (iff #579 #591)
#572 := [rewrite]: #570
#581 := (iff #588 #579)
#497 := (iff #495 #496)
#498 := [rewrite]: #497
#573 := [monotonicity #498]: #581
#583 := [trans #573 #572]: #582
#592 := [quant-inst #11]: #588
#584 := [mp #592 #583]: #591
#521 := [unit-resolution #584 #677]: #496
#501 := [unit-resolution #521 #516]: #493
#530 := [hypothesis]: #593
#447 := (not #493)
#502 := (or #654 #518 #447)
#483 := [th-lemma arith assign-bounds -1 -1]: #502
#507 := [unit-resolution #483 #530 #501]: #654
#655 := (not #654)
#296 := (or #632 #655)
#71 := (= #27 #30)
#96 := (or #71 #90)
#666 := (forall (vars (?v0 Int)) (:pat #665) #96)
#101 := (forall (vars (?v0 Int)) #96)
#669 := (iff #101 #666)
#667 := (iff #96 #96)
#668 := [refl]: #667
#670 := [quant-intro #668]: #669
#153 := (~ #101 #101)
#152 := (~ #96 #96)
#149 := [refl]: #152
#154 := [nnf-pos #149]: #153
#31 := (= #30 #27)
#28 := (<= 0::Int #27)
#32 := (implies #28 #31)
#33 := (forall (vars (?v0 Int)) #32)
#104 := (iff #33 #101)
#78 := (not #28)
#79 := (or #78 #71)
#84 := (forall (vars (?v0 Int)) #79)
#102 := (iff #84 #101)
#99 := (iff #79 #96)
#93 := (or #90 #71)
#97 := (iff #93 #96)
#98 := [rewrite]: #97
#94 := (iff #79 #93)
#91 := (iff #78 #90)
#87 := (iff #28 #89)
#88 := [rewrite]: #87
#92 := [monotonicity #88]: #91
#95 := [monotonicity #92]: #94
#100 := [trans #95 #98]: #99
#103 := [quant-intro #100]: #102
#85 := (iff #33 #84)
#82 := (iff #32 #79)
#75 := (implies #28 #71)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #32 #75)
#73 := (iff #31 #71)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#83 := [trans #77 #81]: #82
#86 := [quant-intro #83]: #85
#105 := [trans #86 #103]: #104
#70 := [asserted]: #33
#106 := [mp #70 #105]: #101
#150 := [mp~ #106 #154]: #101
#671 := [mp #150 #670]: #666
#635 := (not #666)
#636 := (or #635 #632 #655)
#305 := (= #12 #646)
#310 := (or #305 #655)
#637 := (or #635 #310)
#281 := (iff #637 #636)
#633 := (or #635 #296)
#640 := (iff #633 #636)
#642 := [rewrite]: #640
#639 := (iff #637 #633)
#297 := (iff #310 #296)
#294 := (iff #305 #632)
#295 := [rewrite]: #294
#634 := [monotonicity #295]: #297
#276 := [monotonicity #634]: #639
#282 := [trans #276 #642]: #281
#638 := [quant-inst #12]: #637
#643 := [mp #638 #282]: #636
#508 := [unit-resolution #643 #671]: #296
#503 := [unit-resolution #508 #507]: #632
#509 := (not #632)
#477 := (or #509 #641)
#484 := [th-lemma arith triangle-eq]: #477
#443 := [unit-resolution #484 #503]: #641
#644 := (>= #290 0::Int)
#350 := (<= #646 0::Int)
#630 := (= #646 0::Int)
#15 := (f3 0::Int)
#628 := (f4 #15)
#340 := (= #628 0::Int)
#617 := (or #635 #340)
#338 := (>= 0::Int 0::Int)
#353 := (not #338)
#625 := (= 0::Int #628)
#629 := (or #625 #353)
#458 := (or #635 #629)
#460 := (iff #458 #617)
#603 := (iff #617 #617)
#604 := [rewrite]: #603
#616 := (iff #629 #340)
#613 := (or #340 false)
#610 := (iff #613 #340)
#615 := [rewrite]: #610
#614 := (iff #629 #613)
#623 := (iff #353 false)
#1 := true
#621 := (not true)
#622 := (iff #621 false)
#619 := [rewrite]: #622
#335 := (iff #353 #621)
#342 := (iff #338 true)
#620 := [rewrite]: #342
#618 := [monotonicity #620]: #335
#612 := [trans #618 #619]: #623
#339 := (iff #625 #340)
#341 := [rewrite]: #339
#609 := [monotonicity #341 #612]: #614
#611 := [trans #609 #615]: #616
#602 := [monotonicity #611]: #460
#605 := [trans #602 #604]: #460
#459 := [quant-inst #14]: #458
#599 := [mp #459 #605]: #617
#563 := [unit-resolution #599 #671]: #340
#506 := (= #646 #628)
#16 := (= #13 #15)
#18 := (= f6 #15)
#167 := (not #18)
#17 := (= f5 #15)
#166 := (not #17)
#157 := (or #166 #167)
#543 := (= #12 0::Int)
#552 := (= #12 #628)
#555 := (= #11 #628)
#158 := (not #157)
#578 := [hypothesis]: #158
#242 := (or #157 #18)
#328 := [def-axiom]: #242
#565 := [unit-resolution #328 #578]: #18
#556 := [monotonicity #565]: #555
#550 := (= #12 #11)
#574 := (= #9 #11)
#564 := (= f5 f6)
#566 := (= #15 f6)
#567 := [symm #565]: #566
#241 := (or #157 #17)
#327 := [def-axiom]: #241
#568 := [unit-resolution #327 #578]: #17
#569 := [trans #568 #567]: #564
#549 := [monotonicity #569]: #574
#547 := (= #12 #9)
#545 := (= #9 #12)
#585 := (<= #11 0::Int)
#558 := [trans #556 #563]: #580
#559 := (not #580)
#560 := (or #559 #585)
#557 := [th-lemma arith triangle-eq]: #560
#561 := [unit-resolution #557 #558]: #585
#541 := (or #559 #493)
#542 := [th-lemma arith triangle-eq]: #541
#544 := [unit-resolution #542 #558]: #493
#546 := [th-lemma arith eq-propagate -1 -1 #544 #561]: #545
#548 := [symm #546]: #547
#551 := [trans #548 #549]: #550
#553 := [trans #551 #556]: #552
#554 := [trans #553 #563]: #543
#532 := [monotonicity #554]: #16
#58 := (not #16)
#649 := (or #58 #157)
#178 := (iff #16 #157)
#19 := (and #17 #18)
#59 := (iff #19 #58)
#181 := (iff #59 #178)
#173 := (iff #157 #16)
#179 := (iff #173 #178)
#180 := [rewrite]: #179
#176 := (iff #59 #173)
#170 := (iff #158 #58)
#174 := (iff #170 #173)
#175 := [rewrite]: #174
#171 := (iff #59 #170)
#168 := (iff #19 #158)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#177 := [trans #172 #175]: #176
#182 := [trans #177 #180]: #181
#20 := (iff #16 #19)
#21 := (not #20)
#60 := (iff #21 #59)
#61 := [rewrite]: #60
#57 := [asserted]: #21
#64 := [mp #57 #61]: #59
#183 := [mp #64 #182]: #178
#331 := (not #178)
#334 := (or #58 #157 #331)
#313 := [def-axiom]: #334
#651 := [unit-resolution #313 #183]: #649
#562 := [unit-resolution #651 #578]: #58
#533 := [unit-resolution #562 #532]: false
#535 := [lemma #533]: #157
#333 := (or #16 #158)
#332 := (or #16 #158 #331)
#260 := [def-axiom]: #332
#330 := [unit-resolution #260 #183]: #333
#505 := [unit-resolution #330 #535]: #16
#399 := [monotonicity #505]: #506
#510 := [trans #399 #563]: #630
#511 := (not #630)
#512 := (or #511 #350)
#517 := [th-lemma arith triangle-eq]: #512
#513 := [unit-resolution #517 #510]: #350
#474 := (not #350)
#476 := (or #644 #518 #447 #474)
#478 := [th-lemma arith assign-bounds -1 -1 1]: #476
#485 := [unit-resolution #478 #530 #513 #501]: #644
#624 := (>= #646 0::Int)
#487 := (or #511 #624)
#488 := [th-lemma arith triangle-eq]: #487
#489 := [unit-resolution #488 #510]: #624
#575 := (* -1::Int #11)
#576 := (+ #9 #575)
#529 := (<= #576 0::Int)
#515 := (not #641)
#499 := (or #529 #447 #474 #515)
#479 := [th-lemma arith assign-bounds 1 -1/2 -1/2]: #499
#500 := [unit-resolution #479 #443 #501 #513]: #529
#571 := (>= #576 0::Int)
#519 := (or #571 #515 #518)
#525 := (not #571)
#531 := [hypothesis]: #525
#504 := [hypothesis]: #641
#514 := [th-lemma arith farkas -1/2 -1/2 -1/2 1 #513 #504 #531 #530]: false
#520 := [lemma #514]: #519
#455 := [unit-resolution #520 #443 #530]: #571
#456 := [th-lemma arith eq-propagate 1/2 1/2 -1/2 -1/2 -1/2 -1/2 #455 #500 #489 #513 #485 #443]: #580
#463 := (= #486 #11)
#461 := (= #645 f6)
#318 := (= f6 #645)
#22 := (:var 0 S2)
#23 := (f4 #22)
#657 := (pattern #23)
#24 := (f3 #23)
#63 := (= #22 #24)
#658 := (forall (vars (?v0 S2)) (:pat #657) #63)
#67 := (forall (vars (?v0 S2)) #63)
#659 := (iff #67 #658)
#661 := (iff #658 #658)
#662 := [rewrite]: #661
#660 := [rewrite]: #659
#663 := [trans #660 #662]: #659
#161 := (~ #67 #67)
#159 := (~ #63 #63)
#160 := [refl]: #159
#162 := [nnf-pos #160]: #161
#25 := (= #24 #22)
#26 := (forall (vars (?v0 S2)) #25)
#68 := (iff #26 #67)
#65 := (iff #25 #63)
#66 := [rewrite]: #65
#69 := [quant-intro #66]: #68
#62 := [asserted]: #26
#72 := [mp #62 #69]: #67
#151 := [mp~ #72 #162]: #67
#664 := [mp #151 #663]: #658
#319 := (not #658)
#650 := (or #319 #318)
#656 := [quant-inst #10]: #650
#537 := [unit-resolution #656 #664]: #318
#462 := [symm #537]: #461
#464 := [monotonicity #462]: #463
#465 := [trans #464 #456]: #494
#466 := [unit-resolution #516 #465]: false
#468 := [lemma #466]: #467
#453 := [unit-resolution #468 #452]: #494
#422 := (= #594 #486)
#538 := (= #11 #486)
#539 := [monotonicity #537]: #538
#419 := (= #594 #11)
#436 := [trans #539 #453]: #580
#454 := [unit-resolution #542 #436]: #493
#424 := [unit-resolution #483 #454 #452]: #654
#425 := [unit-resolution #508 #424]: #632
#426 := [unit-resolution #484 #425]: #641
#427 := [unit-resolution #479 #426 #454 #513]: #529
#429 := [unit-resolution #520 #426 #452]: #571
#430 := (not #529)
#431 := (or #574 #430 #525)
#273 := [th-lemma arith triangle-eq]: #431
#432 := [unit-resolution #273 #429 #427]: #574
#412 := (= #594 #9)
#428 := (= #307 f5)
#438 := (= f5 #307)
#652 := (or #319 #438)
#653 := [quant-inst #8]: #652
#471 := [unit-resolution #653 #664]: #438
#433 := [symm #471]: #428
#415 := [monotonicity #433]: #412
#421 := [trans #415 #432]: #419
#420 := [trans #421 #539]: #422
#423 := [trans #420 #453]: #596
#411 := [unit-resolution #450 #423]: false
#414 := [lemma #411]: #596
#472 := (= #9 #594)
#457 := [monotonicity #471]: #472
#417 := [trans #457 #414]: #473
#448 := (or #446 #17)
#435 := (= #307 #15)
#470 := [hypothesis]: #596
#434 := [trans #457 #470]: #473
#442 := [monotonicity #434]: #435
#444 := [trans #471 #442]: #17
#469 := [hypothesis]: #166
#445 := [unit-resolution #469 #444]: false
#449 := [lemma #445]: #448
#413 := [unit-resolution #449 #414]: #17
#329 := (or #158 #166 #167)
#320 := [def-axiom]: #329
#418 := [unit-resolution #320 #413 #535]: #167
#527 := (or #524 #18)
#540 := (= #645 #15)
#536 := [hypothesis]: #494
#534 := [trans #539 #536]: #580
#526 := [monotonicity #534]: #540
#522 := [trans #537 #526]: #18
#577 := [hypothesis]: #167
#523 := [unit-resolution #577 #522]: false
#528 := [lemma #523]: #527
#408 := [unit-resolution #528 #418]: #524
#398 := [unit-resolution #468 #408]: #518
#400 := (not #473)
#401 := (or #400 #593)
#404 := [th-lemma arith triangle-eq]: #401
[unit-resolution #404 #398 #417]: false
unsat
553acdc910f0fdb22c85eb345e54f82d0edbe969 60 0
#2 := false
decl f4 :: (-> S2 Int)
#15 := (:var 0 S2)
#16 := (f4 #15)
#642 := (pattern #16)
decl f3 :: (-> Int S2)
#17 := (f3 #16)
#68 := (= #15 #17)
#643 := (forall (vars (?v0 S2)) (:pat #642) #68)
#72 := (forall (vars (?v0 S2)) #68)
#644 := (iff #72 #643)
#646 := (iff #643 #643)
#647 := [rewrite]: #646
#645 := [rewrite]: #644
#648 := [trans #645 #647]: #644
#166 := (~ #72 #72)
#164 := (~ #68 #68)
#165 := [refl]: #164
#167 := [nnf-pos #165]: #166
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#73 := (iff #19 #72)
#70 := (iff #18 #68)
#71 := [rewrite]: #70
#74 := [quant-intro #71]: #73
#67 := [asserted]: #19
#77 := [mp #67 #74]: #72
#156 := [mp~ #77 #167]: #72
#649 := [mp #156 #648]: #643
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#53 := (f3 #9)
#59 := (= f5 #53)
#64 := (not #59)
#10 := 0::Int
#11 := (- #9 0::Int)
#12 := (f3 #11)
#13 := (= #12 f5)
#14 := (not #13)
#65 := (iff #14 #64)
#62 := (iff #13 #59)
#56 := (= #53 f5)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #13 #56)
#54 := (= #12 #53)
#51 := (= #11 #9)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#50 := [asserted]: #14
#69 := [mp #50 #66]: #64
#227 := (not #643)
#313 := (or #227 #59)
#314 := [quant-inst #8]: #313
[unit-resolution #314 #69 #649]: false
unsat
e50c0621b7e6bc56abfb22151bf216b6e4b0368f 196 0
#2 := false
decl f6 :: (-> Int S2)
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#58 := (+ #9 #57)
#61 := (f6 #58)
#15 := 0::Int
#16 := (f6 0::Int)
#67 := (= #16 #61)
#669 := (f3 #61)
#617 := (f6 #669)
#616 := (= #617 #61)
#519 := (= #61 #617)
#20 := (:var 0 S2)
#21 := (f3 #20)
#685 := (pattern #21)
#22 := (f6 #21)
#113 := (= #20 #22)
#686 := (forall (vars (?v0 S2)) (:pat #685) #113)
#116 := (forall (vars (?v0 S2)) #113)
#687 := (iff #116 #686)
#689 := (iff #686 #686)
#690 := [rewrite]: #689
#688 := [rewrite]: #687
#691 := [trans #688 #690]: #687
#212 := (~ #116 #116)
#210 := (~ #113 #113)
#211 := [refl]: #210
#213 := [nnf-pos #211]: #212
#23 := (= #22 #20)
#24 := (forall (vars (?v0 S2)) #23)
#117 := (iff #24 #116)
#114 := (iff #23 #113)
#115 := [rewrite]: #114
#118 := [quant-intro #115]: #117
#112 := [asserted]: #24
#121 := [mp #112 #118]: #116
#202 := [mp~ #121 #213]: #116
#692 := [mp #202 #691]: #686
#358 := (not #686)
#522 := (or #358 #519)
#523 := [quant-inst #61]: #522
#521 := [unit-resolution #523 #692]: #519
#620 := [symm #521]: #616
#526 := (= #16 #617)
#524 := (= 0::Int #669)
#642 := (= #669 0::Int)
#25 := (:var 0 Int)
#27 := (f6 #25)
#693 := (pattern #27)
#137 := (>= #25 0::Int)
#28 := (f3 #27)
#33 := (= #28 0::Int)
#186 := (or #33 #137)
#700 := (forall (vars (?v0 Int)) (:pat #693) #186)
#191 := (forall (vars (?v0 Int)) #186)
#703 := (iff #191 #700)
#701 := (iff #186 #186)
#702 := [refl]: #701
#704 := [quant-intro #702]: #703
#206 := (~ #191 #191)
#198 := (~ #186 #186)
#199 := [refl]: #198
#207 := [nnf-pos #199]: #206
#32 := (< #25 0::Int)
#34 := (implies #32 #33)
#35 := (forall (vars (?v0 Int)) #34)
#194 := (iff #35 #191)
#157 := (= 0::Int #28)
#163 := (not #32)
#164 := (or #163 #157)
#169 := (forall (vars (?v0 Int)) #164)
#192 := (iff #169 #191)
#189 := (iff #164 #186)
#183 := (or #137 #33)
#187 := (iff #183 #186)
#188 := [rewrite]: #187
#184 := (iff #164 #183)
#181 := (iff #157 #33)
#182 := [rewrite]: #181
#179 := (iff #163 #137)
#139 := (not #137)
#174 := (not #139)
#177 := (iff #174 #137)
#178 := [rewrite]: #177
#175 := (iff #163 #174)
#172 := (iff #32 #139)
#173 := [rewrite]: #172
#176 := [monotonicity #173]: #175
#180 := [trans #176 #178]: #179
#185 := [monotonicity #180 #182]: #184
#190 := [trans #185 #188]: #189
#193 := [quant-intro #190]: #192
#170 := (iff #35 #169)
#167 := (iff #34 #164)
#160 := (implies #32 #157)
#165 := (iff #160 #164)
#166 := [rewrite]: #165
#161 := (iff #34 #160)
#158 := (iff #33 #157)
#159 := [rewrite]: #158
#162 := [monotonicity #159]: #161
#168 := [trans #162 #166]: #167
#171 := [quant-intro #168]: #170
#195 := [trans #171 #193]: #194
#156 := [asserted]: #35
#196 := [mp #156 #195]: #191
#214 := [mp~ #196 #207]: #191
#705 := [mp #214 #704]: #700
#85 := (>= #58 0::Int)
#84 := (not #85)
#98 := (or #67 #85)
#103 := (not #98)
#13 := (- #9 #11)
#14 := (f6 #13)
#17 := (= #14 #16)
#12 := (< #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#106 := (iff #19 #103)
#75 := (not #12)
#76 := (or #75 #67)
#81 := (not #76)
#104 := (iff #81 #103)
#101 := (iff #76 #98)
#95 := (or #85 #67)
#99 := (iff #95 #98)
#100 := [rewrite]: #99
#96 := (iff #76 #95)
#93 := (iff #75 #85)
#88 := (not #84)
#91 := (iff #88 #85)
#92 := [rewrite]: #91
#89 := (iff #75 #88)
#86 := (iff #12 #84)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#97 := [monotonicity #94]: #96
#102 := [trans #97 #100]: #101
#105 := [monotonicity #102]: #104
#82 := (iff #19 #81)
#79 := (iff #18 #76)
#72 := (implies #12 #67)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #18 #72)
#70 := (iff #17 #67)
#64 := (= #61 #16)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #17 #64)
#62 := (= #14 #61)
#59 := (= #13 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#71 := [trans #66 #69]: #70
#74 := [monotonicity #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80]: #82
#107 := [trans #83 #105]: #106
#55 := [asserted]: #19
#108 := [mp #55 #107]: #103
#111 := [not-or-elim #108]: #84
#639 := (not #700)
#645 := (or #639 #85 #642)
#637 := (or #642 #85)
#486 := (or #639 #637)
#627 := (iff #486 #645)
#638 := (or #85 #642)
#488 := (or #639 #638)
#632 := (iff #488 #645)
#633 := [rewrite]: #632
#630 := (iff #486 #488)
#643 := (iff #637 #638)
#644 := [rewrite]: #643
#631 := [monotonicity #644]: #630
#628 := [trans #631 #633]: #627
#487 := [quant-inst #58]: #486
#634 := [mp #487 #628]: #645
#514 := [unit-resolution #634 #111 #705]: #642
#525 := [symm #514]: #524
#619 := [monotonicity #525]: #526
#607 := [trans #619 #620]: #67
#109 := (not #67)
#110 := [not-or-elim #108]: #109
[unit-resolution #110 #607]: false
unsat
cdc8e9a4d81e24ad5deddad57803ed137bea3298 319 0
#2 := false
decl f3 :: (-> Int S2)
decl f4 :: (-> S2 Int)
decl f6 :: S2
#10 := f6
#11 := (f4 f6)
#58 := -1::Int
#59 := (* -1::Int #11)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#60 := (+ #9 #59)
#63 := (f3 #60)
#14 := 0::Int
#15 := (f3 0::Int)
#69 := (= #15 #63)
#646 := (f4 #63)
#548 := (f3 #646)
#477 := (= #548 #63)
#549 := (= #63 #548)
#22 := (:var 0 S2)
#23 := (f4 #22)
#673 := (pattern #23)
#24 := (f3 #23)
#101 := (= #22 #24)
#674 := (forall (vars (?v0 S2)) (:pat #673) #101)
#104 := (forall (vars (?v0 S2)) #101)
#675 := (iff #104 #674)
#677 := (iff #674 #674)
#678 := [rewrite]: #677
#676 := [rewrite]: #675
#679 := [trans #676 #678]: #675
#200 := (~ #104 #104)
#198 := (~ #101 #101)
#199 := [refl]: #198
#201 := [nnf-pos #199]: #200
#25 := (= #24 #22)
#26 := (forall (vars (?v0 S2)) #25)
#105 := (iff #26 #104)
#102 := (iff #25 #101)
#103 := [rewrite]: #102
#106 := [quant-intro #103]: #105
#100 := [asserted]: #26
#109 := [mp #100 #106]: #104
#190 := [mp~ #109 #201]: #104
#680 := [mp #190 #679]: #674
#346 := (not #674)
#529 := (or #346 #549)
#530 := [quant-inst #63]: #529
#520 := [unit-resolution #530 #680]: #549
#478 := [symm #520]: #477
#471 := (= #15 #548)
#495 := (= 0::Int #646)
#639 := (= #646 0::Int)
#657 := (>= #60 0::Int)
#660 := (not #657)
#74 := (* -1::Int #9)
#75 := (+ #74 #11)
#78 := (f3 #75)
#618 := (f4 #78)
#598 := (<= #618 0::Int)
#524 := (not #598)
#508 := (= #618 0::Int)
#546 := (not #508)
#84 := (= #15 #78)
#559 := (f3 #618)
#540 := (= #559 #78)
#570 := (= #78 #559)
#551 := (or #346 #570)
#552 := [quant-inst #78]: #551
#553 := [unit-resolution #552 #680]: #570
#543 := [symm #553]: #540
#538 := (= #15 #559)
#556 := (= 0::Int #618)
#554 := [hypothesis]: #508
#542 := [symm #554]: #556
#539 := [monotonicity #542]: #538
#544 := [trans #539 #543]: #84
#98 := (not #84)
#89 := (or #69 #84)
#92 := (not #89)
#17 := (- #11 #9)
#18 := (f3 #17)
#19 := (= #18 #15)
#12 := (- #9 #11)
#13 := (f3 #12)
#16 := (= #13 #15)
#20 := (or #16 #19)
#21 := (not #20)
#93 := (iff #21 #92)
#90 := (iff #20 #89)
#87 := (iff #19 #84)
#81 := (= #78 #15)
#85 := (iff #81 #84)
#86 := [rewrite]: #85
#82 := (iff #19 #81)
#79 := (= #18 #78)
#76 := (= #17 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#88 := [trans #83 #86]: #87
#72 := (iff #16 #69)
#66 := (= #63 #15)
#70 := (iff #66 #69)
#71 := [rewrite]: #70
#67 := (iff #16 #66)
#64 := (= #13 #63)
#61 := (= #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#91 := [monotonicity #73 #88]: #90
#94 := [monotonicity #91]: #93
#57 := [asserted]: #21
#97 := [mp #57 #94]: #92
#99 := [not-or-elim #97]: #98
#545 := [unit-resolution #99 #544]: false
#541 := [lemma #545]: #546
#599 := (>= #618 0::Int)
#622 := (+ #59 #618)
#623 := (+ #9 #622)
#506 := (>= #623 0::Int)
#615 := (= #623 0::Int)
#617 := (<= #60 0::Int)
#502 := (or #508 #617)
#27 := (:var 0 Int)
#29 := (f3 #27)
#681 := (pattern #29)
#125 := (>= #27 0::Int)
#30 := (f4 #29)
#35 := (= #30 0::Int)
#174 := (or #35 #125)
#688 := (forall (vars (?v0 Int)) (:pat #681) #174)
#179 := (forall (vars (?v0 Int)) #174)
#691 := (iff #179 #688)
#689 := (iff #174 #174)
#690 := [refl]: #689
#692 := [quant-intro #690]: #691
#194 := (~ #179 #179)
#186 := (~ #174 #174)
#187 := [refl]: #186
#195 := [nnf-pos #187]: #194
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#182 := (iff #37 #179)
#145 := (= 0::Int #30)
#151 := (not #34)
#152 := (or #151 #145)
#157 := (forall (vars (?v0 Int)) #152)
#180 := (iff #157 #179)
#177 := (iff #152 #174)
#171 := (or #125 #35)
#175 := (iff #171 #174)
#176 := [rewrite]: #175
#172 := (iff #152 #171)
#169 := (iff #145 #35)
#170 := [rewrite]: #169
#167 := (iff #151 #125)
#127 := (not #125)
#162 := (not #127)
#165 := (iff #162 #125)
#166 := [rewrite]: #165
#163 := (iff #151 #162)
#160 := (iff #34 #127)
#161 := [rewrite]: #160
#164 := [monotonicity #161]: #163
#168 := [trans #164 #166]: #167
#173 := [monotonicity #168 #170]: #172
#178 := [trans #173 #176]: #177
#181 := [quant-intro #178]: #180
#158 := (iff #37 #157)
#155 := (iff #36 #152)
#148 := (implies #34 #145)
#153 := (iff #148 #152)
#154 := [rewrite]: #153
#149 := (iff #36 #148)
#146 := (iff #35 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#156 := [trans #150 #154]: #155
#159 := [quant-intro #156]: #158
#183 := [trans #159 #181]: #182
#144 := [asserted]: #37
#184 := [mp #144 #183]: #179
#202 := [mp~ #184 #195]: #179
#693 := [mp #202 #692]: #688
#625 := (not #688)
#512 := (or #625 #508 #617)
#629 := (>= #75 0::Int)
#509 := (or #508 #629)
#513 := (or #625 #509)
#589 := (iff #513 #512)
#607 := (or #625 #502)
#595 := (iff #607 #512)
#597 := [rewrite]: #595
#604 := (iff #513 #607)
#510 := (iff #509 #502)
#624 := (iff #629 #617)
#453 := [rewrite]: #624
#511 := [monotonicity #453]: #510
#608 := [monotonicity #511]: #604
#586 := [trans #608 #597]: #589
#514 := [quant-inst #75]: #513
#588 := [mp #514 #586]: #512
#521 := [unit-resolution #588 #693]: #502
#531 := [unit-resolution #521 #541]: #617
#455 := (not #617)
#610 := (or #615 #455)
#108 := (= #27 #30)
#133 := (or #108 #127)
#682 := (forall (vars (?v0 Int)) (:pat #681) #133)
#138 := (forall (vars (?v0 Int)) #133)
#685 := (iff #138 #682)
#683 := (iff #133 #133)
#684 := [refl]: #683
#686 := [quant-intro #684]: #685
#192 := (~ #138 #138)
#191 := (~ #133 #133)
#188 := [refl]: #191
#193 := [nnf-pos #188]: #192
#31 := (= #30 #27)
#28 := (<= 0::Int #27)
#32 := (implies #28 #31)
#33 := (forall (vars (?v0 Int)) #32)
#141 := (iff #33 #138)
#115 := (not #28)
#116 := (or #115 #108)
#121 := (forall (vars (?v0 Int)) #116)
#139 := (iff #121 #138)
#136 := (iff #116 #133)
#130 := (or #127 #108)
#134 := (iff #130 #133)
#135 := [rewrite]: #134
#131 := (iff #116 #130)
#128 := (iff #115 #127)
#124 := (iff #28 #125)
#126 := [rewrite]: #124
#129 := [monotonicity #126]: #128
#132 := [monotonicity #129]: #131
#137 := [trans #132 #135]: #136
#140 := [quant-intro #137]: #139
#122 := (iff #33 #121)
#119 := (iff #32 #116)
#112 := (implies #28 #108)
#117 := (iff #112 #116)
#118 := [rewrite]: #117
#113 := (iff #32 #112)
#110 := (iff #31 #108)
#111 := [rewrite]: #110
#114 := [monotonicity #111]: #113
#120 := [trans #114 #118]: #119
#123 := [quant-intro #120]: #122
#142 := [trans #123 #140]: #141
#107 := [asserted]: #33
#143 := [mp #107 #142]: #138
#189 := [mp~ #143 #193]: #138
#687 := [mp #189 #686]: #682
#648 := (not #682)
#611 := (or #648 #615 #455)
#630 := (not #629)
#619 := (= #75 #618)
#620 := (or #619 #630)
#614 := (or #648 #620)
#602 := (iff #614 #611)
#497 := (or #648 #610)
#605 := (iff #497 #611)
#507 := [rewrite]: #605
#498 := (iff #614 #497)
#612 := (iff #620 #610)
#456 := (iff #630 #455)
#609 := [monotonicity #453]: #456
#621 := (iff #619 #615)
#616 := [rewrite]: #621
#613 := [monotonicity #616 #609]: #612
#457 := [monotonicity #613]: #498
#603 := [trans #457 #507]: #602
#496 := [quant-inst #75]: #614
#606 := [mp #496 #603]: #611
#534 := [unit-resolution #606 #687]: #610
#535 := [unit-resolution #534 #531]: #615
#536 := (not #615)
#532 := (or #536 #506)
#537 := [th-lemma arith triangle-eq]: #532
#517 := [unit-resolution #537 #535]: #506
#463 := (not #506)
#518 := (or #599 #463 #455)
#499 := [th-lemma arith assign-bounds 1 -1]: #518
#523 := [unit-resolution #499 #531 #517]: #599
#519 := (not #599)
#525 := (or #508 #524 #519)
#493 := [th-lemma arith triangle-eq]: #525
#500 := [unit-resolution #493 #523 #541]: #524
#491 := (<= #623 0::Int)
#459 := (or #536 #491)
#490 := [th-lemma arith triangle-eq]: #459
#492 := [unit-resolution #490 #535]: #491
#494 := (not #491)
#501 := (or #660 #598 #494)
#503 := [th-lemma arith assign-bounds 1 -1]: #501
#504 := [unit-resolution #503 #492 #500]: #660
#628 := (or #639 #657)
#626 := (or #625 #639 #657)
#631 := (or #625 #628)
#627 := (iff #631 #626)
#633 := [rewrite]: #627
#632 := [quant-inst #60]: #631
#474 := [mp #632 #633]: #626
#505 := [unit-resolution #474 #693]: #628
#515 := [unit-resolution #505 #504]: #639
#516 := [symm #515]: #495
#472 := [monotonicity #516]: #471
#479 := [trans #472 #478]: #69
#95 := (not #69)
#96 := [not-or-elim #97]: #95
[unit-resolution #96 #479]: false
unsat
fb3139173a4905cad5bb69f844c2f635a2490c63 329 0
#2 := false
decl f6 :: S2
#10 := f6
decl f5 :: S2
#8 := f5
#26 := 0::Int
decl f4 :: (-> S2 Int)
#11 := (f4 f6)
#58 := -1::Int
#59 := (* -1::Int #11)
#9 := (f4 f5)
#60 := (+ #9 #59)
#92 := (>= #60 0::Int)
#98 := (ite #92 f5 f6)
decl f3 :: (-> Int S2)
#63 := (f3 #60)
#66 := (f4 #63)
#72 := (+ #11 #66)
#77 := (f3 #72)
#106 := (= #77 #98)
#361 := (= f6 #98)
#91 := (not #92)
#275 := (= f5 #98)
#592 := [hypothesis]: #92
#276 := (or #91 #275)
#362 := [def-axiom]: #276
#593 := [unit-resolution #362 #592]: #275
#510 := (= #77 f5)
#294 := (f3 #9)
#536 := (= #294 f5)
#367 := (= f5 #294)
#21 := (:var 0 S2)
#22 := (f4 #21)
#690 := (pattern #22)
#23 := (f3 #22)
#118 := (= #21 #23)
#691 := (forall (vars (?v0 S2)) (:pat #690) #118)
#121 := (forall (vars (?v0 S2)) #118)
#692 := (iff #121 #691)
#694 := (iff #691 #691)
#695 := [rewrite]: #694
#693 := [rewrite]: #692
#696 := [trans #693 #695]: #692
#215 := (~ #121 #121)
#213 := (~ #118 #118)
#214 := [refl]: #213
#216 := [nnf-pos #214]: #215
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S2)) #24)
#122 := (iff #25 #121)
#119 := (iff #24 #118)
#120 := [rewrite]: #119
#123 := [quant-intro #120]: #122
#117 := [asserted]: #25
#126 := [mp #117 #123]: #121
#205 := [mp~ #126 #216]: #121
#697 := [mp #205 #696]: #691
#364 := (not #691)
#341 := (or #364 #367)
#471 := [quant-inst #8]: #341
#583 := [unit-resolution #471 #697]: #367
#542 := [symm #583]: #536
#535 := (= #77 #294)
#556 := (= #72 #9)
#585 := (= #9 #72)
#686 := (* -1::Int #66)
#687 := (+ #59 #686)
#688 := (+ #9 #687)
#675 := (<= #688 0::Int)
#683 := (= #688 0::Int)
#340 := (or #91 #683)
#27 := (:var 0 Int)
#29 := (f3 #27)
#698 := (pattern #29)
#142 := (>= #27 0::Int)
#144 := (not #142)
#30 := (f4 #29)
#125 := (= #27 #30)
#150 := (or #125 #144)
#699 := (forall (vars (?v0 Int)) (:pat #698) #150)
#155 := (forall (vars (?v0 Int)) #150)
#702 := (iff #155 #699)
#700 := (iff #150 #150)
#701 := [refl]: #700
#703 := [quant-intro #701]: #702
#207 := (~ #155 #155)
#206 := (~ #150 #150)
#203 := [refl]: #206
#208 := [nnf-pos #203]: #207
#31 := (= #30 #27)
#28 := (<= 0::Int #27)
#32 := (implies #28 #31)
#33 := (forall (vars (?v0 Int)) #32)
#158 := (iff #33 #155)
#132 := (not #28)
#133 := (or #132 #125)
#138 := (forall (vars (?v0 Int)) #133)
#156 := (iff #138 #155)
#153 := (iff #133 #150)
#147 := (or #144 #125)
#151 := (iff #147 #150)
#152 := [rewrite]: #151
#148 := (iff #133 #147)
#145 := (iff #132 #144)
#141 := (iff #28 #142)
#143 := [rewrite]: #141
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#157 := [quant-intro #154]: #156
#139 := (iff #33 #138)
#136 := (iff #32 #133)
#129 := (implies #28 #125)
#134 := (iff #129 #133)
#135 := [rewrite]: #134
#130 := (iff #32 #129)
#127 := (iff #31 #125)
#128 := [rewrite]: #127
#131 := [monotonicity #128]: #130
#137 := [trans #131 #135]: #136
#140 := [quant-intro #137]: #139
#159 := [trans #140 #157]: #158
#124 := [asserted]: #33
#160 := [mp #124 #159]: #155
#204 := [mp~ #160 #208]: #155
#704 := [mp #204 #703]: #699
#329 := (not #699)
#330 := (or #329 #91 #683)
#678 := (= #60 #66)
#352 := (or #678 #91)
#331 := (or #329 #352)
#672 := (iff #331 #330)
#668 := (or #329 #340)
#671 := (iff #668 #330)
#666 := [rewrite]: #671
#669 := (iff #331 #668)
#665 := (iff #352 #340)
#339 := (or #683 #91)
#681 := (iff #339 #340)
#324 := [rewrite]: #681
#344 := (iff #352 #339)
#689 := (iff #678 #683)
#679 := [rewrite]: #689
#680 := [monotonicity #679]: #344
#328 := [trans #680 #324]: #665
#670 := [monotonicity #328]: #669
#310 := [trans #670 #666]: #672
#667 := [quant-inst #60]: #331
#673 := [mp #667 #310]: #330
#550 := [unit-resolution #673 #704]: #340
#546 := [unit-resolution #550 #592]: #683
#547 := (not #683)
#548 := (or #547 #675)
#551 := [th-lemma arith triangle-eq]: #548
#552 := [unit-resolution #551 #546]: #675
#315 := (>= #688 0::Int)
#553 := (or #547 #315)
#549 := [th-lemma arith triangle-eq]: #553
#554 := [unit-resolution #549 #546]: #315
#534 := [th-lemma arith eq-propagate -1 -1 #554 #552]: #585
#480 := [symm #534]: #556
#516 := [monotonicity #480]: #535
#517 := [trans #516 #542]: #510
#476 := [trans #517 #593]: #106
#111 := (not #106)
#17 := (< #9 #11)
#18 := (ite #17 f6 f5)
#12 := (- #9 #11)
#13 := (f3 #12)
#14 := (f4 #13)
#15 := (+ #14 #11)
#16 := (f3 #15)
#19 := (= #16 #18)
#20 := (not #19)
#114 := (iff #20 #111)
#83 := (= #18 #77)
#88 := (not #83)
#112 := (iff #88 #111)
#109 := (iff #83 #106)
#103 := (= #98 #77)
#107 := (iff #103 #106)
#108 := [rewrite]: #107
#104 := (iff #83 #103)
#101 := (= #18 #98)
#95 := (ite #91 f6 f5)
#99 := (= #95 #98)
#100 := [rewrite]: #99
#96 := (= #18 #95)
#93 := (iff #17 #91)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#102 := [trans #97 #100]: #101
#105 := [monotonicity #102]: #104
#110 := [trans #105 #108]: #109
#113 := [monotonicity #110]: #112
#89 := (iff #20 #88)
#86 := (iff #19 #83)
#80 := (= #77 #18)
#84 := (iff #80 #83)
#85 := [rewrite]: #84
#81 := (iff #19 #80)
#78 := (= #16 #77)
#75 := (= #15 #72)
#69 := (+ #66 #11)
#73 := (= #69 #72)
#74 := [rewrite]: #73
#70 := (= #15 #69)
#67 := (= #14 #66)
#64 := (= #13 #63)
#61 := (= #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#76 := [trans #71 #74]: #75
#79 := [monotonicity #76]: #78
#82 := [monotonicity #79]: #81
#87 := [trans #82 #85]: #86
#90 := [monotonicity #87]: #89
#115 := [trans #90 #113]: #114
#57 := [asserted]: #20
#116 := [mp #57 #115]: #111
#507 := [unit-resolution #116 #476]: false
#509 := [lemma #507]: #91
#363 := (or #92 #361)
#354 := [def-axiom]: #363
#545 := [unit-resolution #354 #509]: #361
#501 := (= #77 f6)
#365 := (f3 #11)
#499 := (= #365 f6)
#366 := (= f6 #365)
#368 := (or #364 #366)
#347 := [quant-inst #10]: #368
#544 := [unit-resolution #347 #697]: #366
#500 := [symm #544]: #499
#495 := (= #77 #365)
#489 := (= #72 #11)
#533 := (= #11 #72)
#658 := (<= #66 0::Int)
#316 := (= #66 0::Int)
#674 := (or #92 #316)
#35 := (= #30 0::Int)
#191 := (or #35 #142)
#705 := (forall (vars (?v0 Int)) (:pat #698) #191)
#196 := (forall (vars (?v0 Int)) #191)
#708 := (iff #196 #705)
#706 := (iff #191 #191)
#707 := [refl]: #706
#709 := [quant-intro #707]: #708
#209 := (~ #196 #196)
#217 := (~ #191 #191)
#218 := [refl]: #217
#210 := [nnf-pos #218]: #209
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#199 := (iff #37 #196)
#162 := (= 0::Int #30)
#168 := (not #34)
#169 := (or #168 #162)
#174 := (forall (vars (?v0 Int)) #169)
#197 := (iff #174 #196)
#194 := (iff #169 #191)
#188 := (or #142 #35)
#192 := (iff #188 #191)
#193 := [rewrite]: #192
#189 := (iff #169 #188)
#186 := (iff #162 #35)
#187 := [rewrite]: #186
#184 := (iff #168 #142)
#179 := (not #144)
#182 := (iff #179 #142)
#183 := [rewrite]: #182
#180 := (iff #168 #179)
#177 := (iff #34 #144)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#185 := [trans #181 #183]: #184
#190 := [monotonicity #185 #187]: #189
#195 := [trans #190 #193]: #194
#198 := [quant-intro #195]: #197
#175 := (iff #37 #174)
#172 := (iff #36 #169)
#165 := (implies #34 #162)
#170 := (iff #165 #169)
#171 := [rewrite]: #170
#166 := (iff #36 #165)
#163 := (iff #35 #162)
#164 := [rewrite]: #163
#167 := [monotonicity #164]: #166
#173 := [trans #167 #171]: #172
#176 := [quant-intro #173]: #175
#200 := [trans #176 #198]: #199
#161 := [asserted]: #37
#201 := [mp #161 #200]: #196
#219 := [mp~ #201 #210]: #196
#710 := [mp #219 #709]: #705
#664 := (not #705)
#386 := (or #664 #92 #316)
#676 := (or #316 #92)
#387 := (or #664 #676)
#383 := (iff #387 #386)
#389 := (or #664 #674)
#660 := (iff #389 #386)
#382 := [rewrite]: #660
#282 := (iff #387 #389)
#677 := (iff #676 #674)
#663 := [rewrite]: #677
#659 := [monotonicity #663]: #282
#657 := [trans #659 #382]: #383
#388 := [quant-inst #60]: #387
#661 := [mp #388 #657]: #386
#540 := [unit-resolution #661 #710]: #674
#541 := [unit-resolution #540 #509]: #316
#511 := (not #316)
#518 := (or #511 #658)
#520 := [th-lemma arith triangle-eq]: #518
#521 := [unit-resolution #520 #541]: #658
#662 := (>= #66 0::Int)
#522 := (or #511 #662)
#532 := [th-lemma arith triangle-eq]: #522
#512 := [unit-resolution #532 #541]: #662
#488 := [th-lemma arith eq-propagate 1 1 #512 #521]: #533
#494 := [symm #488]: #489
#496 := [monotonicity #494]: #495
#502 := [trans #496 #500]: #501
#503 := [trans #502 #545]: #106
[unit-resolution #116 #503]: false
unsat
73c940c8179ac801bce76e81a90860d953343b64 534 0
#2 := false
#29 := 0::Int
decl f4 :: (-> S2 Int)
decl f3 :: (-> Int S2)
decl f6 :: S2
#10 := f6
#11 := (f4 f6)
#61 := -1::Int
#62 := (* -1::Int #11)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#63 := (+ #9 #62)
#66 := (f3 #63)
#69 := (f4 #66)
#667 := (* -1::Int #69)
#668 := (+ #62 #667)
#669 := (+ #9 #668)
#664 := (= #669 0::Int)
#466 := (not #664)
#296 := (>= #669 0::Int)
#316 := (not #296)
decl f7 :: S2
#15 := f7
#16 := (f4 f7)
#75 := (* -1::Int #16)
#84 := (+ #62 #75)
#85 := (+ #9 #84)
#506 := (>= #85 0::Int)
#507 := (not #506)
#88 := (f3 #85)
#76 := (+ #75 #69)
#81 := (f3 #76)
#91 := (= #81 #88)
#500 := (f4 #88)
#503 := (f3 #500)
#432 := (= #503 #88)
#513 := (= #88 #503)
#24 := (:var 0 S2)
#25 := (f4 #24)
#671 := (pattern #25)
#26 := (f3 #25)
#98 := (= #24 #26)
#672 := (forall (vars (?v0 S2)) (:pat #671) #98)
#102 := (forall (vars (?v0 S2)) #98)
#673 := (iff #102 #672)
#675 := (iff #672 #672)
#676 := [rewrite]: #675
#674 := [rewrite]: #673
#677 := [trans #674 #676]: #673
#196 := (~ #102 #102)
#194 := (~ #98 #98)
#195 := [refl]: #194
#197 := [nnf-pos #195]: #196
#27 := (= #26 #24)
#28 := (forall (vars (?v0 S2)) #27)
#103 := (iff #28 #102)
#100 := (iff #27 #98)
#101 := [rewrite]: #100
#104 := [quant-intro #101]: #103
#97 := [asserted]: #28
#107 := [mp #97 #104]: #102
#186 := [mp~ #107 #197]: #102
#678 := [mp #186 #677]: #672
#344 := (not #672)
#426 := (or #344 #513)
#429 := [quant-inst #88]: #426
#437 := [unit-resolution #429 #678]: #513
#422 := [symm #437]: #432
#412 := (= #81 #503)
#329 := (= #76 #500)
#510 := (* -1::Int #500)
#511 := (+ #75 #510)
#512 := (+ #62 #511)
#605 := (+ #9 #512)
#581 := (<= #605 0::Int)
#602 := (= #605 0::Int)
#403 := [hypothesis]: #506
#586 := (or #507 #602)
#30 := (:var 0 Int)
#32 := (f3 #30)
#679 := (pattern #32)
#123 := (>= #30 0::Int)
#125 := (not #123)
#33 := (f4 #32)
#106 := (= #30 #33)
#131 := (or #106 #125)
#680 := (forall (vars (?v0 Int)) (:pat #679) #131)
#136 := (forall (vars (?v0 Int)) #131)
#683 := (iff #136 #680)
#681 := (iff #131 #131)
#682 := [refl]: #681
#684 := [quant-intro #682]: #683
#188 := (~ #136 #136)
#187 := (~ #131 #131)
#184 := [refl]: #187
#189 := [nnf-pos #184]: #188
#34 := (= #33 #30)
#31 := (<= 0::Int #30)
#35 := (implies #31 #34)
#36 := (forall (vars (?v0 Int)) #35)
#139 := (iff #36 #136)
#113 := (not #31)
#114 := (or #113 #106)
#119 := (forall (vars (?v0 Int)) #114)
#137 := (iff #119 #136)
#134 := (iff #114 #131)
#128 := (or #125 #106)
#132 := (iff #128 #131)
#133 := [rewrite]: #132
#129 := (iff #114 #128)
#126 := (iff #113 #125)
#122 := (iff #31 #123)
#124 := [rewrite]: #122
#127 := [monotonicity #124]: #126
#130 := [monotonicity #127]: #129
#135 := [trans #130 #133]: #134
#138 := [quant-intro #135]: #137
#120 := (iff #36 #119)
#117 := (iff #35 #114)
#110 := (implies #31 #106)
#115 := (iff #110 #114)
#116 := [rewrite]: #115
#111 := (iff #35 #110)
#108 := (iff #34 #106)
#109 := [rewrite]: #108
#112 := [monotonicity #109]: #111
#118 := [trans #112 #116]: #117
#121 := [quant-intro #118]: #120
#140 := [trans #121 #138]: #139
#105 := [asserted]: #36
#141 := [mp #105 #140]: #136
#185 := [mp~ #141 #189]: #136
#685 := [mp #185 #684]: #680
#310 := (not #680)
#599 := (or #310 #507 #602)
#508 := (= #85 #500)
#509 := (or #508 #507)
#588 := (or #310 #509)
#577 := (iff #588 #599)
#590 := (or #310 #586)
#592 := (iff #590 #599)
#576 := [rewrite]: #592
#591 := (iff #588 #590)
#598 := (iff #509 #586)
#595 := (or #602 #507)
#596 := (iff #595 #586)
#597 := [rewrite]: #596
#587 := (iff #509 #595)
#606 := (iff #508 #602)
#593 := [rewrite]: #606
#584 := [monotonicity #593]: #587
#594 := [trans #584 #597]: #598
#585 := [monotonicity #594]: #591
#579 := [trans #585 #576]: #577
#589 := [quant-inst #85]: #588
#580 := [mp #589 #579]: #599
#471 := [unit-resolution #580 #685]: #586
#382 := [unit-resolution #471 #403]: #602
#448 := (not #602)
#409 := (or #448 #581)
#410 := [th-lemma arith triangle-eq]: #409
#371 := [unit-resolution #410 #382]: #581
#582 := (>= #605 0::Int)
#449 := (or #448 #582)
#456 := [th-lemma arith triangle-eq]: #449
#372 := [unit-resolution #456 #382]: #582
#656 := (<= #669 0::Int)
#322 := (>= #63 0::Int)
#564 := (>= #500 0::Int)
#373 := (not #581)
#365 := (or #564 #373 #507)
#374 := [th-lemma arith assign-bounds 1 -1]: #365
#375 := [unit-resolution #374 #371 #403]: #564
#462 := (not #582)
#460 := (not #564)
#357 := (or #322 #460 #462)
#565 := (>= #16 0::Int)
#402 := (= #16 0::Int)
#256 := (f3 #16)
#566 := (f4 #256)
#567 := (= #566 0::Int)
#386 := (not #565)
#387 := [hypothesis]: #386
#568 := (or #565 #567)
#38 := (= #33 0::Int)
#172 := (or #38 #123)
#686 := (forall (vars (?v0 Int)) (:pat #679) #172)
#177 := (forall (vars (?v0 Int)) #172)
#689 := (iff #177 #686)
#687 := (iff #172 #172)
#688 := [refl]: #687
#690 := [quant-intro #688]: #689
#190 := (~ #177 #177)
#198 := (~ #172 #172)
#199 := [refl]: #198
#191 := [nnf-pos #199]: #190
#37 := (< #30 0::Int)
#39 := (implies #37 #38)
#40 := (forall (vars (?v0 Int)) #39)
#180 := (iff #40 #177)
#143 := (= 0::Int #33)
#149 := (not #37)
#150 := (or #149 #143)
#155 := (forall (vars (?v0 Int)) #150)
#178 := (iff #155 #177)
#175 := (iff #150 #172)
#169 := (or #123 #38)
#173 := (iff #169 #172)
#174 := [rewrite]: #173
#170 := (iff #150 #169)
#167 := (iff #143 #38)
#168 := [rewrite]: #167
#165 := (iff #149 #123)
#160 := (not #125)
#163 := (iff #160 #123)
#164 := [rewrite]: #163
#161 := (iff #149 #160)
#158 := (iff #37 #125)
#159 := [rewrite]: #158
#162 := [monotonicity #159]: #161
#166 := [trans #162 #164]: #165
#171 := [monotonicity #166 #168]: #170
#176 := [trans #171 #174]: #175
#179 := [quant-intro #176]: #178
#156 := (iff #40 #155)
#153 := (iff #39 #150)
#146 := (implies #37 #143)
#151 := (iff #146 #150)
#152 := [rewrite]: #151
#147 := (iff #39 #146)
#144 := (iff #38 #143)
#145 := [rewrite]: #144
#148 := [monotonicity #145]: #147
#154 := [trans #148 #152]: #153
#157 := [quant-intro #154]: #156
#181 := [trans #157 #179]: #180
#142 := [asserted]: #40
#182 := [mp #142 #181]: #177
#200 := [mp~ #182 #191]: #177
#691 := [mp #200 #690]: #686
#644 := (not #686)
#549 := (or #644 #565 #567)
#557 := (or #567 #565)
#550 := (or #644 #557)
#536 := (iff #550 #549)
#552 := (or #644 #568)
#554 := (iff #552 #549)
#540 := [rewrite]: #554
#553 := (iff #550 #552)
#546 := (iff #557 #568)
#547 := [rewrite]: #546
#548 := [monotonicity #547]: #553
#537 := [trans #548 #540]: #536
#551 := [quant-inst #16]: #550
#538 := [mp #551 #537]: #549
#388 := [unit-resolution #538 #691]: #568
#389 := [unit-resolution #388 #387]: #567
#391 := (= #16 #566)
#342 := (= f7 #256)
#335 := (or #344 #342)
#346 := [quant-inst #15]: #335
#390 := [unit-resolution #346 #678]: #342
#384 := [monotonicity #390]: #391
#392 := [trans #384 #389]: #402
#377 := (not #402)
#378 := (or #377 #565)
#379 := [th-lemma arith triangle-eq]: #378
#381 := [unit-resolution #379 #387 #392]: false
#380 := [lemma #381]: #565
#366 := (or #386 #322 #460 #462)
#376 := [th-lemma arith assign-bounds 1 1 1]: #366
#358 := [unit-resolution #376 #380]: #357
#359 := [unit-resolution #358 #375 #372]: #322
#452 := (not #322)
#321 := (or #452 #664)
#311 := (or #310 #452 #664)
#334 := (= #63 #69)
#666 := (or #334 #452)
#312 := (or #310 #666)
#653 := (iff #312 #311)
#649 := (or #310 #321)
#652 := (iff #649 #311)
#647 := [rewrite]: #652
#650 := (iff #312 #649)
#646 := (iff #666 #321)
#320 := (or #664 #452)
#662 := (iff #320 #321)
#305 := [rewrite]: #662
#325 := (iff #666 #320)
#670 := (iff #334 #664)
#660 := [rewrite]: #670
#661 := [monotonicity #660]: #325
#309 := [trans #661 #305]: #646
#651 := [monotonicity #309]: #650
#291 := [trans #651 #647]: #653
#648 := [quant-inst #63]: #312
#654 := [mp #648 #291]: #311
#438 := [unit-resolution #654 #685]: #321
#351 := [unit-resolution #438 #359]: #664
#467 := (or #466 #656)
#450 := [th-lemma arith triangle-eq]: #467
#360 := [unit-resolution #450 #351]: #656
#361 := (or #466 #296)
#352 := [th-lemma arith triangle-eq]: #361
#362 := [unit-resolution #352 #351]: #296
#331 := [th-lemma arith eq-propagate 1 1 -1 -1 #362 #360 #372 #371]: #329
#332 := [monotonicity #331]: #412
#323 := [trans #332 #422]: #91
#94 := (not #91)
#19 := (+ #11 #16)
#20 := (- #9 #19)
#21 := (f3 #20)
#12 := (- #9 #11)
#13 := (f3 #12)
#14 := (f4 #13)
#17 := (- #14 #16)
#18 := (f3 #17)
#22 := (= #18 #21)
#23 := (not #22)
#95 := (iff #23 #94)
#92 := (iff #22 #91)
#89 := (= #21 #88)
#86 := (= #20 #85)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#82 := (= #18 #81)
#79 := (= #17 #76)
#72 := (- #69 #16)
#77 := (= #72 #76)
#78 := [rewrite]: #77
#73 := (= #17 #72)
#70 := (= #14 #69)
#67 := (= #13 #66)
#64 := (= #12 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80]: #82
#93 := [monotonicity #83 #90]: #92
#96 := [monotonicity #93]: #95
#60 := [asserted]: #23
#99 := [mp #60 #96]: #94
#336 := [unit-resolution #99 #323]: false
#337 := [lemma #336]: #507
#363 := (f4 #81)
#504 := (>= #363 0::Int)
#355 := (+ #16 #667)
#356 := (<= #355 0::Int)
#578 := (= #500 0::Int)
#481 := (not #578)
#621 := (= #363 0::Int)
#350 := (not #356)
#480 := [hypothesis]: #350
#454 := (or #356 #621)
#609 := (or #644 #356 #621)
#655 := (>= #76 0::Int)
#615 := (or #621 #655)
#612 := (or #644 #615)
#600 := (iff #612 #609)
#495 := (or #644 #454)
#603 := (iff #495 #609)
#505 := [rewrite]: #603
#496 := (iff #612 #495)
#610 := (iff #615 #454)
#622 := (or #621 #356)
#607 := (iff #622 #454)
#608 := [rewrite]: #607
#451 := (iff #615 #622)
#634 := (iff #655 #356)
#635 := [rewrite]: #634
#453 := [monotonicity #635]: #451
#611 := [trans #453 #608]: #610
#455 := [monotonicity #611]: #496
#601 := [trans #455 #505]: #600
#494 := [quant-inst #76]: #612
#604 := [mp #494 #601]: #609
#424 := [unit-resolution #604 #691]: #454
#417 := [unit-resolution #424 #480]: #621
#419 := (not #621)
#423 := (or #481 #419)
#498 := (f3 #363)
#431 := (= #498 #503)
#428 := (= #503 #498)
#436 := (= #500 #363)
#433 := (= 0::Int #363)
#475 := [hypothesis]: #621
#435 := [symm #475]: #433
#476 := [hypothesis]: #578
#434 := [trans #476 #435]: #436
#430 := [monotonicity #434]: #428
#427 := [symm #430]: #431
#457 := (= #81 #498)
#493 := (or #344 #457)
#514 := [quant-inst #81]: #493
#425 := [unit-resolution #514 #678]: #457
#414 := [trans #425 #427]: #412
#415 := [trans #414 #422]: #91
#418 := [unit-resolution #99 #415]: false
#416 := [lemma #418]: #423
#420 := [unit-resolution #416 #417]: #481
#569 := (or #506 #578)
#573 := (or #644 #506 #578)
#583 := (or #578 #506)
#574 := (or #644 #583)
#560 := (iff #574 #573)
#575 := (or #644 #569)
#558 := (iff #575 #573)
#559 := [rewrite]: #558
#555 := (iff #574 #575)
#570 := (iff #583 #569)
#572 := [rewrite]: #570
#556 := [monotonicity #572]: #555
#561 := [trans #556 #559]: #560
#571 := [quant-inst #85]: #574
#562 := [mp #571 #561]: #573
#485 := [unit-resolution #562 #691]: #569
#421 := [unit-resolution #485 #420]: #506
#407 := [unit-resolution #471 #421]: #602
#408 := [unit-resolution #410 #407]: #581
#563 := (<= #500 0::Int)
#442 := (or #563 #356)
#641 := (>= #69 0::Int)
#297 := (= #69 0::Int)
#459 := (not #656)
#469 := (not #563)
#470 := [hypothesis]: #469
#477 := (or #564 #563)
#478 := [th-lemma arith farkas 1 1]: #477
#479 := [unit-resolution #478 #470]: #564
#482 := (or #481 #563)
#483 := [th-lemma arith triangle-eq]: #482
#484 := [unit-resolution #483 #470]: #481
#486 := [unit-resolution #485 #484]: #506
#487 := [unit-resolution #471 #486]: #602
#458 := [unit-resolution #456 #487]: #582
#463 := (or #459 #356 #460 #462)
#464 := [th-lemma arith assign-bounds 1 1 -1]: #463
#465 := [unit-resolution #464 #458 #480 #479]: #459
#468 := [unit-resolution #450 #465]: #466
#439 := [unit-resolution #438 #468]: #452
#657 := (or #297 #322)
#645 := (or #644 #297 #322)
#367 := (or #644 #657)
#369 := (iff #367 #645)
#370 := [rewrite]: #369
#368 := [quant-inst #63]: #367
#263 := [mp #368 #370]: #645
#440 := [unit-resolution #263 #691]: #657
#441 := [unit-resolution #440 #439]: #297
#443 := (not #297)
#444 := (or #443 #641)
#445 := [th-lemma arith triangle-eq]: #444
#288 := [unit-resolution #445 #441]: #641
#446 := [th-lemma arith farkas 1 1 1 1 1 #480 #439 #479 #458 #288]: false
#447 := [lemma #446]: #442
#411 := [unit-resolution #447 #480]: #563
#393 := (or #578 #469 #460)
#395 := [th-lemma arith triangle-eq]: #393
#396 := [unit-resolution #395 #420 #411]: #460
#397 := [th-lemma arith farkas 1 -1 1 #396 #421 #408]: false
#398 := [lemma #397]: #356
#353 := (+ #667 #363)
#354 := (+ #16 #353)
#620 := (>= #354 0::Int)
#639 := (= #354 0::Int)
#627 := (or #350 #639)
#630 := (or #310 #350 #639)
#658 := (not #655)
#364 := (= #76 #363)
#638 := (or #364 #658)
#625 := (or #310 #638)
#618 := (iff #625 #630)
#472 := (or #310 #627)
#616 := (iff #472 #630)
#617 := [rewrite]: #616
#473 := (iff #625 #472)
#624 := (iff #638 #627)
#633 := (or #639 #350)
#628 := (iff #633 #627)
#623 := [rewrite]: #628
#637 := (iff #638 #633)
#632 := (iff #658 #350)
#636 := [monotonicity #635]: #632
#642 := (iff #364 #639)
#643 := [rewrite]: #642
#626 := [monotonicity #643 #636]: #637
#629 := [trans #626 #623]: #624
#474 := [monotonicity #629]: #473
#619 := [trans #474 #617]: #618
#631 := [quant-inst #76]: #625
#613 := [mp #631 #619]: #630
#338 := [unit-resolution #613 #685]: #627
#339 := [unit-resolution #338 #398]: #639
#340 := (not #639)
#330 := (or #340 #620)
#341 := [th-lemma arith triangle-eq]: #330
#324 := [unit-resolution #341 #339]: #620
#326 := (not #620)
#327 := (or #504 #326 #350)
#306 := [th-lemma arith assign-bounds 1 -1]: #327
#308 := [unit-resolution #306 #324 #398]: #504
#614 := (<= #354 0::Int)
#313 := (or #340 #614)
#314 := [th-lemma arith triangle-eq]: #313
#315 := [unit-resolution #314 #339]: #614
#318 := (not #614)
#317 := (not #504)
#307 := (or #316 #506 #317 #318)
#319 := [th-lemma arith assign-bounds 1 1 -1]: #307
#300 := [unit-resolution #319 #315 #308 #337]: #316
#302 := [unit-resolution #352 #300]: #466
#640 := (<= #69 0::Int)
#299 := (not #640)
#489 := (<= #363 0::Int)
#304 := (not #489)
#303 := [unit-resolution #485 #337]: #578
#301 := [unit-resolution #416 #303]: #419
#295 := (or #621 #304)
#292 := (or #621 #304 #317)
#294 := [th-lemma arith triangle-eq]: #292
#298 := [unit-resolution #294 #308]: #295
#293 := [unit-resolution #298 #301]: #304
#273 := (or #299 #386 #489 #318)
#278 := [th-lemma arith assign-bounds -1 -1 1]: #273
#279 := [unit-resolution #278 #315 #293 #380]: #299
#284 := (or #443 #640)
#286 := [th-lemma arith triangle-eq]: #284
#287 := [unit-resolution #286 #279]: #443
#289 := [unit-resolution #440 #287]: #322
[unit-resolution #438 #289 #302]: false
unsat
34227136b3e635e49e4bd2c36ebe9baea671313c 33 0
#2 := false
decl f3 :: (-> Int S2)
#10 := 0::Int
#13 := (f3 0::Int)
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#11 := (* #9 0::Int)
#12 := (f3 #11)
#14 := (= #12 #13)
#15 := (not #14)
#67 := (iff #15 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #15 #62)
#60 := (iff #14 true)
#55 := (= #13 #13)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#52 := (= #11 0::Int)
#53 := [rewrite]: #52
#54 := [monotonicity #53]: #14
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#51 := [asserted]: #15
[mp #51 #68]: false
unsat
5f53219a938672e87feb759aff16c7e606dae494 33 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#13 := (f3 0::Int)
decl f4 :: (-> S2 Int)
decl f5 :: S2
#9 := f5
#10 := (f4 f5)
#11 := (* 0::Int #10)
#12 := (f3 #11)
#14 := (= #12 #13)
#15 := (not #14)
#67 := (iff #15 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #15 #62)
#60 := (iff #14 true)
#55 := (= #13 #13)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#52 := (= #11 0::Int)
#53 := [rewrite]: #52
#54 := [monotonicity #53]: #14
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#51 := [asserted]: #15
[mp #51 #68]: false
unsat
bcbe65ed23887ebf767f986a377eb5d5d4329334 60 0
#2 := false
decl f4 :: (-> S2 Int)
#15 := (:var 0 S2)
#16 := (f4 #15)
#642 := (pattern #16)
decl f3 :: (-> Int S2)
#17 := (f3 #16)
#69 := (= #15 #17)
#643 := (forall (vars (?v0 S2)) (:pat #642) #69)
#73 := (forall (vars (?v0 S2)) #69)
#644 := (iff #73 #643)
#646 := (iff #643 #643)
#647 := [rewrite]: #646
#645 := [rewrite]: #644
#648 := [trans #645 #647]: #644
#167 := (~ #73 #73)
#165 := (~ #69 #69)
#166 := [refl]: #165
#168 := [nnf-pos #166]: #167
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#74 := (iff #19 #73)
#71 := (iff #18 #69)
#72 := [rewrite]: #71
#75 := [quant-intro #72]: #74
#68 := [asserted]: #19
#78 := [mp #68 #75]: #73
#157 := [mp~ #78 #168]: #73
#649 := [mp #157 #648]: #643
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#54 := (f3 #9)
#60 := (= f5 #54)
#65 := (not #60)
#10 := 1::Int
#11 := (* #9 1::Int)
#12 := (f3 #11)
#13 := (= #12 f5)
#14 := (not #13)
#66 := (iff #14 #65)
#63 := (iff #13 #60)
#57 := (= #54 f5)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #13 #57)
#55 := (= #12 #54)
#52 := (= #11 #9)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#51 := [asserted]: #14
#70 := [mp #51 #67]: #65
#228 := (not #643)
#313 := (or #228 #60)
#314 := [quant-inst #8]: #313
[unit-resolution #314 #70 #649]: false
unsat
e4bab5727353f9f21d2db9b237337f965134bab9 60 0
#2 := false
decl f4 :: (-> S2 Int)
#15 := (:var 0 S2)
#16 := (f4 #15)
#642 := (pattern #16)
decl f3 :: (-> Int S2)
#17 := (f3 #16)
#69 := (= #15 #17)
#643 := (forall (vars (?v0 S2)) (:pat #642) #69)
#73 := (forall (vars (?v0 S2)) #69)
#644 := (iff #73 #643)
#646 := (iff #643 #643)
#647 := [rewrite]: #646
#645 := [rewrite]: #644
#648 := [trans #645 #647]: #644
#167 := (~ #73 #73)
#165 := (~ #69 #69)
#166 := [refl]: #165
#168 := [nnf-pos #166]: #167
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S2)) #18)
#74 := (iff #19 #73)
#71 := (iff #18 #69)
#72 := [rewrite]: #71
#75 := [quant-intro #72]: #74
#68 := [asserted]: #19
#78 := [mp #68 #75]: #73
#157 := [mp~ #78 #168]: #73
#649 := [mp #157 #648]: #643
decl f5 :: S2
#9 := f5
#10 := (f4 f5)
#54 := (f3 #10)
#60 := (= f5 #54)
#65 := (not #60)
#8 := 1::Int
#11 := (* 1::Int #10)
#12 := (f3 #11)
#13 := (= #12 f5)
#14 := (not #13)
#66 := (iff #14 #65)
#63 := (iff #13 #60)
#57 := (= #54 f5)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #13 #57)
#55 := (= #12 #54)
#52 := (= #11 #10)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#51 := [asserted]: #14
#70 := [mp #51 #67]: #65
#228 := (not #643)
#313 := (or #228 #60)
#314 := [quant-inst #9]: #313
[unit-resolution #314 #70 #649]: false
unsat
58f4f4aabe0e5d2dd886a62e9ee338d17e831e5a 35 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 3::Int
decl f4 :: (-> S2 Int)
decl f5 :: S2
#9 := f5
#10 := (f4 f5)
#13 := (* #10 3::Int)
#14 := (f3 #13)
#11 := (* 3::Int #10)
#12 := (f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#70 := (iff #16 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #16 #65)
#63 := (iff #15 true)
#58 := (= #12 #12)
#61 := (iff #58 true)
#62 := [rewrite]: #61
#59 := (iff #15 #58)
#56 := (= #14 #12)
#54 := (= #13 #11)
#55 := [rewrite]: #54
#57 := [monotonicity #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#53 := [asserted]: #16
[mp #53 #71]: false
unsat
611c41109aa958be031117f9c38a7deb95b567a0 72 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#20 := (f3 0::Int)
#15 := (- 0::Int)
#16 := (div #15 #15)
#14 := (div 0::Int 0::Int)
#11 := (< 0::Int 0::Int)
#12 := (and #11 #11)
#13 := (or #12 #12)
#17 := (ite #13 #14 #16)
#9 := (= 0::Int 0::Int)
#10 := (or #9 #9)
#18 := (ite #10 0::Int #17)
#19 := (f3 #18)
#21 := (= #19 #20)
#22 := (not #21)
#108 := (iff #22 false)
#1 := true
#103 := (not true)
#106 := (iff #103 false)
#107 := [rewrite]: #106
#104 := (iff #22 #103)
#101 := (iff #21 true)
#96 := (= #20 #20)
#99 := (iff #96 true)
#100 := [rewrite]: #99
#97 := (iff #21 #96)
#93 := (= #18 0::Int)
#88 := (ite true 0::Int #14)
#91 := (= #88 0::Int)
#92 := [rewrite]: #91
#89 := (= #18 #88)
#86 := (= #17 #14)
#81 := (ite #11 #14 #14)
#84 := (= #81 #14)
#85 := [rewrite]: #84
#82 := (= #17 #81)
#79 := (= #16 #14)
#77 := (= #15 0::Int)
#78 := [rewrite]: #77
#80 := [monotonicity #78 #78]: #79
#75 := (iff #13 #11)
#70 := (or #11 #11)
#73 := (iff #70 #11)
#74 := [rewrite]: #73
#71 := (iff #13 #70)
#68 := (iff #12 #11)
#69 := [rewrite]: #68
#72 := [monotonicity #69 #69]: #71
#76 := [trans #72 #74]: #75
#83 := [monotonicity #76 #80]: #82
#87 := [trans #83 #85]: #86
#66 := (iff #10 true)
#61 := (or true true)
#64 := (iff #61 true)
#65 := [rewrite]: #64
#62 := (iff #10 #61)
#59 := (iff #9 true)
#60 := [rewrite]: #59
#63 := [monotonicity #60 #60]: #62
#67 := [trans #63 #65]: #66
#90 := [monotonicity #67 #87]: #89
#94 := [trans #90 #92]: #93
#95 := [monotonicity #94]: #21
#98 := [monotonicity #95]: #97
#102 := [trans #98 #100]: #101
#105 := [monotonicity #102]: #104
#109 := [trans #105 #107]: #108
#58 := [asserted]: #22
[mp #58 #109]: false
unsat
a1635dd4dd56e9245fc52a441cde335332b960ef 79 0
#2 := false
decl f3 :: (-> Int S2)
#10 := 0::Int
#27 := (f3 0::Int)
#22 := (- 0::Int)
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#21 := (- #9)
#23 := (div #21 #22)
#20 := (div #9 0::Int)
#15 := (< 0::Int 0::Int)
#17 := (< #9 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int #9)
#16 := (and #14 #15)
#19 := (or #16 #18)
#24 := (ite #19 #20 #23)
#12 := (= 0::Int 0::Int)
#11 := (= #9 0::Int)
#13 := (or #11 #12)
#25 := (ite #13 0::Int #24)
#26 := (f3 #25)
#28 := (= #26 #27)
#29 := (not #28)
#113 := (iff #29 false)
#1 := true
#108 := (not true)
#111 := (iff #108 false)
#112 := [rewrite]: #111
#109 := (iff #29 #108)
#106 := (iff #28 true)
#101 := (= #27 #27)
#104 := (iff #101 true)
#105 := [rewrite]: #104
#102 := (iff #28 #101)
#98 := (= #25 0::Int)
#81 := -1::Int
#82 := (* -1::Int #9)
#87 := (div #82 0::Int)
#75 := (and #15 #17)
#78 := (or #16 #75)
#90 := (ite #78 #20 #87)
#93 := (ite true 0::Int #90)
#96 := (= #93 0::Int)
#97 := [rewrite]: #96
#94 := (= #25 #93)
#91 := (= #24 #90)
#88 := (= #23 #87)
#85 := (= #22 0::Int)
#86 := [rewrite]: #85
#83 := (= #21 #82)
#84 := [rewrite]: #83
#89 := [monotonicity #84 #86]: #88
#79 := (iff #19 #78)
#76 := (iff #18 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#92 := [monotonicity #80 #89]: #91
#73 := (iff #13 true)
#68 := (or #11 true)
#71 := (iff #68 true)
#72 := [rewrite]: #71
#69 := (iff #13 #68)
#66 := (iff #12 true)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#95 := [monotonicity #74 #92]: #94
#99 := [trans #95 #97]: #98
#100 := [monotonicity #99]: #28
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#65 := [asserted]: #29
[mp #65 #114]: false
unsat
e01bd2bd51de7fe522eece30b6126b14fb1617b9 81 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#24 := (f3 0::Int)
#10 := 1::Int
#19 := (- 1::Int)
#18 := (- 0::Int)
#20 := (div #18 #19)
#17 := (div 0::Int 1::Int)
#14 := (< 0::Int 1::Int)
#13 := (< 0::Int 0::Int)
#15 := (and #13 #14)
#16 := (or #15 #15)
#21 := (ite #16 #17 #20)
#11 := (= 1::Int 0::Int)
#9 := (= 0::Int 0::Int)
#12 := (or #9 #11)
#22 := (ite #12 0::Int #21)
#23 := (f3 #22)
#25 := (= #23 #24)
#26 := (not #25)
#117 := (iff #26 false)
#1 := true
#112 := (not true)
#115 := (iff #112 false)
#116 := [rewrite]: #115
#113 := (iff #26 #112)
#110 := (iff #25 true)
#105 := (= #24 #24)
#108 := (iff #105 true)
#109 := [rewrite]: #108
#106 := (iff #25 #105)
#102 := (= #22 0::Int)
#97 := (ite true 0::Int 0::Int)
#100 := (= #97 0::Int)
#101 := [rewrite]: #100
#98 := (= #22 #97)
#95 := (= #21 0::Int)
#90 := (ite #15 0::Int 0::Int)
#93 := (= #90 0::Int)
#94 := [rewrite]: #93
#91 := (= #21 #90)
#88 := (= #20 0::Int)
#80 := -1::Int
#83 := (div 0::Int -1::Int)
#86 := (= #83 0::Int)
#87 := [rewrite]: #86
#84 := (= #20 #83)
#81 := (= #19 -1::Int)
#82 := [rewrite]: #81
#78 := (= #18 0::Int)
#79 := [rewrite]: #78
#85 := [monotonicity #79 #82]: #84
#89 := [trans #85 #87]: #88
#76 := (= #17 0::Int)
#77 := [rewrite]: #76
#74 := (iff #16 #15)
#75 := [rewrite]: #74
#92 := [monotonicity #75 #77 #89]: #91
#96 := [trans #92 #94]: #95
#72 := (iff #12 true)
#67 := (or true false)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #12 #67)
#65 := (iff #11 false)
#66 := [rewrite]: #65
#63 := (iff #9 true)
#64 := [rewrite]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#99 := [monotonicity #73 #96]: #98
#103 := [trans #99 #101]: #102
#104 := [monotonicity #103]: #25
#107 := [monotonicity #104]: #106
#111 := [trans #107 #109]: #110
#114 := [monotonicity #111]: #113
#118 := [trans #114 #116]: #117
#62 := [asserted]: #26
[mp #62 #118]: false
unsat
4d757130b0dc28fe958cf4c129cd34caadcedd08 82 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 1::Int
#23 := (f3 1::Int)
#18 := (- 1::Int)
#19 := (div #18 #18)
#17 := (div 1::Int 1::Int)
#9 := 0::Int
#12 := (< 0::Int 1::Int)
#14 := (< 1::Int 0::Int)
#15 := (and #14 #12)
#13 := (and #12 #12)
#16 := (or #13 #15)
#20 := (ite #16 #17 #19)
#10 := (= 1::Int 0::Int)
#11 := (or #10 #10)
#21 := (ite #11 0::Int #20)
#22 := (f3 #21)
#24 := (= #22 #23)
#25 := (not #24)
#118 := (iff #25 false)
#1 := true
#113 := (not true)
#116 := (iff #113 false)
#117 := [rewrite]: #116
#114 := (iff #25 #113)
#111 := (iff #24 true)
#106 := (= #23 #23)
#109 := (iff #106 true)
#110 := [rewrite]: #109
#107 := (iff #24 #106)
#103 := (= #21 1::Int)
#98 := (ite false 0::Int 1::Int)
#101 := (= #98 1::Int)
#102 := [rewrite]: #101
#99 := (= #21 #98)
#96 := (= #20 1::Int)
#73 := (and #12 #14)
#76 := (or #12 #73)
#91 := (ite #76 1::Int 1::Int)
#94 := (= #91 1::Int)
#95 := [rewrite]: #94
#92 := (= #20 #91)
#89 := (= #19 1::Int)
#81 := -1::Int
#84 := (div -1::Int -1::Int)
#87 := (= #84 1::Int)
#88 := [rewrite]: #87
#85 := (= #19 #84)
#82 := (= #18 -1::Int)
#83 := [rewrite]: #82
#86 := [monotonicity #83 #83]: #85
#90 := [trans #86 #88]: #89
#79 := (= #17 1::Int)
#80 := [rewrite]: #79
#77 := (iff #16 #76)
#74 := (iff #15 #73)
#75 := [rewrite]: #74
#71 := (iff #13 #12)
#72 := [rewrite]: #71
#78 := [monotonicity #72 #75]: #77
#93 := [monotonicity #78 #80 #90]: #92
#97 := [trans #93 #95]: #96
#69 := (iff #11 false)
#64 := (or false false)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #11 #64)
#62 := (iff #10 false)
#63 := [rewrite]: #62
#66 := [monotonicity #63 #63]: #65
#70 := [trans #66 #68]: #69
#100 := [monotonicity #70 #97]: #99
#104 := [trans #100 #102]: #103
#105 := [monotonicity #104]: #24
#108 := [monotonicity #105]: #107
#112 := [trans #108 #110]: #111
#115 := [monotonicity #112]: #114
#119 := [trans #115 #117]: #118
#61 := [asserted]: #25
[mp #61 #119]: false
unsat
5e55bd29247a2ea10048c10929dae98ba0bdec4e 89 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 3::Int
#27 := (f3 3::Int)
#11 := 1::Int
#22 := (- 1::Int)
#21 := (- 3::Int)
#23 := (div #21 #22)
#20 := (div 3::Int 1::Int)
#9 := 0::Int
#15 := (< 0::Int 1::Int)
#17 := (< 3::Int 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int 3::Int)
#16 := (and #14 #15)
#19 := (or #16 #18)
#24 := (ite #19 #20 #23)
#12 := (= 1::Int 0::Int)
#10 := (= 3::Int 0::Int)
#13 := (or #10 #12)
#25 := (ite #13 0::Int #24)
#26 := (f3 #25)
#28 := (= #26 #27)
#29 := (not #28)
#125 := (iff #29 false)
#1 := true
#120 := (not true)
#123 := (iff #120 false)
#124 := [rewrite]: #123
#121 := (iff #29 #120)
#118 := (iff #28 true)
#113 := (= #27 #27)
#116 := (iff #113 true)
#117 := [rewrite]: #116
#114 := (iff #28 #113)
#110 := (= #25 3::Int)
#105 := (ite false 0::Int 3::Int)
#108 := (= #105 3::Int)
#109 := [rewrite]: #108
#106 := (= #25 #105)
#103 := (= #24 3::Int)
#77 := (and #15 #17)
#80 := (or #16 #77)
#98 := (ite #80 3::Int 3::Int)
#101 := (= #98 3::Int)
#102 := [rewrite]: #101
#99 := (= #24 #98)
#96 := (= #23 3::Int)
#88 := -1::Int
#85 := -3::Int
#91 := (div -3::Int -1::Int)
#94 := (= #91 3::Int)
#95 := [rewrite]: #94
#92 := (= #23 #91)
#89 := (= #22 -1::Int)
#90 := [rewrite]: #89
#86 := (= #21 -3::Int)
#87 := [rewrite]: #86
#93 := [monotonicity #87 #90]: #92
#97 := [trans #93 #95]: #96
#83 := (= #20 3::Int)
#84 := [rewrite]: #83
#81 := (iff #19 #80)
#78 := (iff #18 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#100 := [monotonicity #82 #84 #97]: #99
#104 := [trans #100 #102]: #103
#75 := (iff #13 false)
#70 := (or false false)
#73 := (iff #70 false)
#74 := [rewrite]: #73
#71 := (iff #13 #70)
#68 := (iff #12 false)
#69 := [rewrite]: #68
#66 := (iff #10 false)
#67 := [rewrite]: #66
#72 := [monotonicity #67 #69]: #71
#76 := [trans #72 #74]: #75
#107 := [monotonicity #76 #104]: #106
#111 := [trans #107 #109]: #110
#112 := [monotonicity #111]: #28
#115 := [monotonicity #112]: #114
#119 := [trans #115 #117]: #118
#122 := [monotonicity #119]: #121
#126 := [trans #122 #124]: #125
#65 := [asserted]: #29
[mp #65 #126]: false
unsat
541d6fe80b1182e33d84e37f649671b9536f0b45 313 0
#2 := false
decl f3 :: (-> Int S2)
#81 := -1::Int
decl f4 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
#9 := (f4 f5)
#82 := (* -1::Int #9)
#87 := (div #82 -1::Int)
#12 := 1::Int
#21 := (div #9 1::Int)
#10 := 0::Int
#123 := (>= #9 0::Int)
#124 := (not #123)
#110 := (<= #9 0::Int)
#111 := (not #110)
#134 := (or #111 #124)
#137 := (ite #134 #21 #87)
#11 := (= #9 0::Int)
#140 := (ite #11 0::Int #137)
#143 := (f3 #140)
#146 := (= f5 #143)
#725 := (f3 #9)
#688 := (= #725 #143)
#691 := (= #143 #725)
#411 := (= #140 #9)
#602 := (= #9 #140)
#510 := (* -1::Int #21)
#663 := (+ #9 #510)
#668 := (<= #663 0::Int)
#509 := (= #663 0::Int)
#1 := true
#63 := [true-axiom]: true
#653 := (or false #509)
#654 := [th-lemma arith]: #653
#650 := [unit-resolution #654 #63]: #509
#655 := (not #509)
#644 := (or #655 #668)
#645 := [th-lemma arith triangle-eq]: #644
#646 := [unit-resolution #645 #650]: #668
#550 := (>= #663 0::Int)
#647 := (or #655 #550)
#641 := [th-lemma arith triangle-eq]: #647
#648 := [unit-resolution #641 #650]: #550
#643 := (* -1::Int #140)
#640 := (+ #21 #643)
#642 := (<= #640 0::Int)
#651 := (= #21 #140)
#398 := (= #137 #140)
#389 := (not #11)
#409 := (= 0::Int #9)
#695 := [hypothesis]: #11
#410 := [symm #695]: #409
#313 := (= #140 0::Int)
#390 := (or #389 #313)
#722 := [def-axiom]: #390
#699 := [unit-resolution #722 #695]: #313
#412 := [trans #699 #410]: #411
#406 := [monotonicity #412]: #691
#692 := [symm #406]: #688
#720 := (= f5 #725)
#30 := (:var 0 S2)
#31 := (f4 #30)
#727 := (pattern #31)
#32 := (f3 #31)
#156 := (= #30 #32)
#728 := (forall (vars (?v0 S2)) (:pat #727) #156)
#159 := (forall (vars (?v0 S2)) #156)
#729 := (iff #159 #728)
#731 := (iff #728 #728)
#732 := [rewrite]: #731
#730 := [rewrite]: #729
#733 := [trans #730 #732]: #729
#253 := (~ #159 #159)
#251 := (~ #156 #156)
#252 := [refl]: #251
#254 := [nnf-pos #252]: #253
#33 := (= #32 #30)
#34 := (forall (vars (?v0 S2)) #33)
#160 := (iff #34 #159)
#157 := (iff #33 #156)
#158 := [rewrite]: #157
#161 := [quant-intro #158]: #160
#155 := [asserted]: #34
#164 := [mp #155 #161]: #159
#243 := [mp~ #164 #254]: #159
#734 := [mp #243 #733]: #728
#376 := (not #728)
#381 := (or #376 #720)
#717 := [quant-inst #8]: #381
#690 := [unit-resolution #717 #734]: #720
#689 := [trans #690 #692]: #146
#149 := (not #146)
#23 := (- 1::Int)
#22 := (- #9)
#24 := (div #22 #23)
#16 := (< 0::Int 1::Int)
#18 := (< #9 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int #9)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#13 := (= 1::Int 0::Int)
#14 := (or #11 #13)
#26 := (ite #14 0::Int #25)
#27 := (f3 #26)
#28 := (= #27 f5)
#29 := (not #28)
#152 := (iff #29 #149)
#75 := (and #16 #18)
#78 := (or #17 #75)
#90 := (ite #78 #21 #87)
#93 := (ite #11 0::Int #90)
#96 := (f3 #93)
#102 := (= f5 #96)
#107 := (not #102)
#150 := (iff #107 #149)
#147 := (iff #102 #146)
#144 := (= #96 #143)
#141 := (= #93 #140)
#138 := (= #90 #137)
#135 := (iff #78 #134)
#132 := (iff #75 #124)
#127 := (and true #124)
#130 := (iff #127 #124)
#131 := [rewrite]: #130
#128 := (iff #75 #127)
#125 := (iff #18 #124)
#126 := [rewrite]: #125
#114 := (iff #16 true)
#115 := [rewrite]: #114
#129 := [monotonicity #115 #126]: #128
#133 := [trans #129 #131]: #132
#121 := (iff #17 #111)
#116 := (and #111 true)
#119 := (iff #116 #111)
#120 := [rewrite]: #119
#117 := (iff #17 #116)
#112 := (iff #15 #111)
#113 := [rewrite]: #112
#118 := [monotonicity #113 #115]: #117
#122 := [trans #118 #120]: #121
#136 := [monotonicity #122 #133]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#108 := (iff #29 #107)
#105 := (iff #28 #102)
#99 := (= #96 f5)
#103 := (iff #99 #102)
#104 := [rewrite]: #103
#100 := (iff #28 #99)
#97 := (= #27 #96)
#94 := (= #26 #93)
#91 := (= #25 #90)
#88 := (= #24 #87)
#85 := (= #23 -1::Int)
#86 := [rewrite]: #85
#83 := (= #22 #82)
#84 := [rewrite]: #83
#89 := [monotonicity #84 #86]: #88
#79 := (iff #20 #78)
#76 := (iff #19 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#92 := [monotonicity #80 #89]: #91
#73 := (iff #14 #11)
#68 := (or #11 false)
#71 := (iff #68 #11)
#72 := [rewrite]: #71
#69 := (iff #14 #68)
#66 := (iff #13 false)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#95 := [monotonicity #74 #92]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#106 := [trans #101 #104]: #105
#109 := [monotonicity #106]: #108
#153 := [trans #109 #151]: #152
#65 := [asserted]: #29
#154 := [mp #65 #153]: #149
#693 := [unit-resolution #154 #689]: false
#682 := [lemma #693]: #389
#723 := (or #11 #398)
#724 := [def-axiom]: #723
#632 := [unit-resolution #724 #682]: #398
#314 := (= #21 #137)
#708 := (f4 #725)
#703 := (= #708 0::Int)
#626 := (not #703)
#628 := (iff #389 #626)
#639 := (iff #11 #703)
#638 := (iff #703 #11)
#636 := (= #708 #9)
#633 := (= #725 f5)
#635 := [symm #690]: #633
#637 := [monotonicity #635]: #636
#634 := [monotonicity #637]: #638
#625 := [symm #634]: #639
#629 := [monotonicity #625]: #628
#630 := [mp #682 #629]: #626
#714 := (or #123 #703)
#35 := (:var 0 Int)
#37 := (f3 #35)
#735 := (pattern #37)
#180 := (>= #35 0::Int)
#38 := (f4 #37)
#43 := (= #38 0::Int)
#229 := (or #43 #180)
#742 := (forall (vars (?v0 Int)) (:pat #735) #229)
#234 := (forall (vars (?v0 Int)) #229)
#745 := (iff #234 #742)
#743 := (iff #229 #229)
#744 := [refl]: #743
#746 := [quant-intro #744]: #745
#247 := (~ #234 #234)
#255 := (~ #229 #229)
#256 := [refl]: #255
#248 := [nnf-pos #256]: #247
#42 := (< #35 0::Int)
#44 := (implies #42 #43)
#45 := (forall (vars (?v0 Int)) #44)
#237 := (iff #45 #234)
#200 := (= 0::Int #38)
#206 := (not #42)
#207 := (or #206 #200)
#212 := (forall (vars (?v0 Int)) #207)
#235 := (iff #212 #234)
#232 := (iff #207 #229)
#226 := (or #180 #43)
#230 := (iff #226 #229)
#231 := [rewrite]: #230
#227 := (iff #207 #226)
#224 := (iff #200 #43)
#225 := [rewrite]: #224
#222 := (iff #206 #180)
#182 := (not #180)
#217 := (not #182)
#220 := (iff #217 #180)
#221 := [rewrite]: #220
#218 := (iff #206 #217)
#215 := (iff #42 #182)
#216 := [rewrite]: #215
#219 := [monotonicity #216]: #218
#223 := [trans #219 #221]: #222
#228 := [monotonicity #223 #225]: #227
#233 := [trans #228 #231]: #232
#236 := [quant-intro #233]: #235
#213 := (iff #45 #212)
#210 := (iff #44 #207)
#203 := (implies #42 #200)
#208 := (iff #203 #207)
#209 := [rewrite]: #208
#204 := (iff #44 #203)
#201 := (iff #43 #200)
#202 := [rewrite]: #201
#205 := [monotonicity #202]: #204
#211 := [trans #205 #209]: #210
#214 := [quant-intro #211]: #213
#238 := [trans #214 #236]: #237
#199 := [asserted]: #45
#239 := [mp #199 #238]: #234
#257 := [mp~ #239 #248]: #234
#747 := [mp #257 #746]: #742
#709 := (not #742)
#423 := (or #709 #123 #703)
#711 := (or #703 #123)
#424 := (or #709 #711)
#420 := (iff #424 #423)
#426 := (or #709 #714)
#697 := (iff #426 #423)
#419 := [rewrite]: #697
#320 := (iff #424 #426)
#700 := (iff #711 #714)
#701 := [rewrite]: #700
#696 := [monotonicity #701]: #320
#694 := [trans #696 #419]: #420
#425 := [quant-inst #9]: #424
#698 := [mp #425 #694]: #423
#627 := [unit-resolution #698 #747]: #714
#631 := [unit-resolution #627 #630]: #123
#611 := (or #11 #111 #124)
#612 := [th-lemma arith triangle-eq]: #611
#614 := [unit-resolution #612 #682]: #134
#615 := [unit-resolution #614 #631]: #111
#400 := (or #134 #110)
#391 := [def-axiom]: #400
#616 := [unit-resolution #391 #615]: #134
#404 := (not #134)
#721 := (or #404 #314)
#378 := [def-axiom]: #721
#617 := [unit-resolution #378 #616]: #314
#618 := [trans #617 #632]: #651
#619 := (not #651)
#620 := (or #619 #642)
#621 := [th-lemma arith triangle-eq]: #620
#622 := [unit-resolution #621 #618]: #642
#652 := (>= #640 0::Int)
#623 := (or #619 #652)
#613 := [th-lemma arith triangle-eq]: #623
#624 := [unit-resolution #613 #618]: #652
#603 := [th-lemma arith eq-propagate 1 1 1 1 #624 #622 #648 #646]: #602
#605 := [symm #603]: #411
#606 := [monotonicity #605]: #691
#607 := [symm #606]: #688
#608 := [trans #690 #607]: #146
[unit-resolution #154 #608]: false
unsat
527e5e3123950986e94b94da9ebd83dc07302cc9 81 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#24 := (f3 0::Int)
#10 := 3::Int
#19 := (- 3::Int)
#18 := (- 0::Int)
#20 := (div #18 #19)
#17 := (div 0::Int 3::Int)
#14 := (< 0::Int 3::Int)
#13 := (< 0::Int 0::Int)
#15 := (and #13 #14)
#16 := (or #15 #15)
#21 := (ite #16 #17 #20)
#11 := (= 3::Int 0::Int)
#9 := (= 0::Int 0::Int)
#12 := (or #9 #11)
#22 := (ite #12 0::Int #21)
#23 := (f3 #22)
#25 := (= #23 #24)
#26 := (not #25)
#117 := (iff #26 false)
#1 := true
#112 := (not true)
#115 := (iff #112 false)
#116 := [rewrite]: #115
#113 := (iff #26 #112)
#110 := (iff #25 true)
#105 := (= #24 #24)
#108 := (iff #105 true)
#109 := [rewrite]: #108
#106 := (iff #25 #105)
#102 := (= #22 0::Int)
#97 := (ite true 0::Int 0::Int)
#100 := (= #97 0::Int)
#101 := [rewrite]: #100
#98 := (= #22 #97)
#95 := (= #21 0::Int)
#90 := (ite #15 0::Int 0::Int)
#93 := (= #90 0::Int)
#94 := [rewrite]: #93
#91 := (= #21 #90)
#88 := (= #20 0::Int)
#80 := -3::Int
#83 := (div 0::Int -3::Int)
#86 := (= #83 0::Int)
#87 := [rewrite]: #86
#84 := (= #20 #83)
#81 := (= #19 -3::Int)
#82 := [rewrite]: #81
#78 := (= #18 0::Int)
#79 := [rewrite]: #78
#85 := [monotonicity #79 #82]: #84
#89 := [trans #85 #87]: #88
#76 := (= #17 0::Int)
#77 := [rewrite]: #76
#74 := (iff #16 #15)
#75 := [rewrite]: #74
#92 := [monotonicity #75 #77 #89]: #91
#96 := [trans #92 #94]: #95
#72 := (iff #12 true)
#67 := (or true false)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #12 #67)
#65 := (iff #11 false)
#66 := [rewrite]: #65
#63 := (iff #9 true)
#64 := [rewrite]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#99 := [monotonicity #73 #96]: #98
#103 := [trans #99 #101]: #102
#104 := [monotonicity #103]: #25
#107 := [monotonicity #104]: #106
#111 := [trans #107 #109]: #110
#114 := [monotonicity #111]: #113
#118 := [trans #114 #116]: #117
#62 := [asserted]: #26
[mp #62 #118]: false
unsat
b6bcc3a997f628b30a8c56db4557945cb134a0bb 135 0
#2 := false
decl f3 :: (-> Int S2)
#9 := 0::Int
#27 := (f3 0::Int)
#11 := 3::Int
#22 := (- 3::Int)
#8 := 1::Int
#21 := (- 1::Int)
#23 := (div #21 #22)
#20 := (div 1::Int 3::Int)
#15 := (< 0::Int 3::Int)
#17 := (< 1::Int 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int 1::Int)
#16 := (and #14 #15)
#19 := (or #16 #18)
#24 := (ite #19 #20 #23)
#12 := (= 3::Int 0::Int)
#10 := (= 1::Int 0::Int)
#13 := (or #10 #12)
#25 := (ite #13 0::Int #24)
#26 := (f3 #25)
#28 := (= #26 #27)
#29 := (not #28)
#171 := (iff #29 false)
#77 := (and #15 #17)
#80 := (or #16 #77)
#98 := (ite #80 0::Int 1::Int)
#108 := (f3 #98)
#114 := (= #27 #108)
#119 := (not #114)
#169 := (iff #119 false)
#1 := true
#164 := (not true)
#167 := (iff #164 false)
#168 := [rewrite]: #167
#165 := (iff #119 #164)
#162 := (iff #114 true)
#157 := (= #27 #27)
#160 := (iff #157 true)
#161 := [rewrite]: #160
#158 := (iff #114 #157)
#111 := (= #108 #27)
#154 := (= #98 0::Int)
#149 := (ite true 0::Int 1::Int)
#152 := (= #149 0::Int)
#153 := [rewrite]: #152
#150 := (= #98 #149)
#147 := (iff #80 true)
#142 := (or true false)
#145 := (iff #142 true)
#146 := [rewrite]: #145
#143 := (iff #80 #142)
#140 := (iff #77 false)
#135 := (and true false)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #77 #135)
#133 := (iff #17 false)
#134 := [rewrite]: #133
#124 := (iff #15 true)
#125 := [rewrite]: #124
#137 := [monotonicity #125 #134]: #136
#141 := [trans #137 #139]: #140
#131 := (iff #16 true)
#126 := (and true true)
#129 := (iff #126 true)
#130 := [rewrite]: #129
#127 := (iff #16 #126)
#122 := (iff #14 true)
#123 := [rewrite]: #122
#128 := [monotonicity #123 #125]: #127
#132 := [trans #128 #130]: #131
#144 := [monotonicity #132 #141]: #143
#148 := [trans #144 #146]: #147
#151 := [monotonicity #148]: #150
#155 := [trans #151 #153]: #154
#156 := [monotonicity #155]: #111
#159 := [monotonicity #156]: #158
#163 := [trans #159 #161]: #162
#166 := [monotonicity #163]: #165
#170 := [trans #166 #168]: #169
#120 := (iff #29 #119)
#117 := (iff #28 #114)
#115 := (iff #111 #114)
#116 := [rewrite]: #115
#112 := (iff #28 #111)
#109 := (= #26 #108)
#106 := (= #25 #98)
#101 := (ite false 0::Int #98)
#104 := (= #101 #98)
#105 := [rewrite]: #104
#102 := (= #25 #101)
#99 := (= #24 #98)
#96 := (= #23 1::Int)
#88 := -3::Int
#85 := -1::Int
#91 := (div -1::Int -3::Int)
#94 := (= #91 1::Int)
#95 := [rewrite]: #94
#92 := (= #23 #91)
#89 := (= #22 -3::Int)
#90 := [rewrite]: #89
#86 := (= #21 -1::Int)
#87 := [rewrite]: #86
#93 := [monotonicity #87 #90]: #92
#97 := [trans #93 #95]: #96
#83 := (= #20 0::Int)
#84 := [rewrite]: #83
#81 := (iff #19 #80)
#78 := (iff #18 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#100 := [monotonicity #82 #84 #97]: #99
#75 := (iff #13 false)
#70 := (or false false)
#73 := (iff #70 false)
#74 := [rewrite]: #73
#71 := (iff #13 #70)
#68 := (iff #12 false)
#69 := [rewrite]: #68
#66 := (iff #10 false)
#67 := [rewrite]: #66
#72 := [monotonicity #67 #69]: #71
#76 := [trans #72 #74]: #75
#103 := [monotonicity #76 #100]: #102
#107 := [trans #103 #105]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#118 := [trans #113 #116]: #117
#121 := [monotonicity #118]: #120
#172 := [trans #121 #170]: #171
#65 := [asserted]: #29
[mp #65 #172]: false
unsat
ec979d4232e8803cddce0557ed6997ff67bffe05 83 0
#2 := false
decl f3 :: (-> Int S2)
#23 := 1::Int
#24 := (f3 1::Int)
#8 := 3::Int
#18 := (- 3::Int)
#19 := (div #18 #18)
#17 := (div 3::Int 3::Int)
#9 := 0::Int
#12 := (< 0::Int 3::Int)
#14 := (< 3::Int 0::Int)
#15 := (and #14 #12)
#13 := (and #12 #12)
#16 := (or #13 #15)
#20 := (ite #16 #17 #19)
#10 := (= 3::Int 0::Int)
#11 := (or #10 #10)
#21 := (ite #11 0::Int #20)
#22 := (f3 #21)
#25 := (= #22 #24)
#26 := (not #25)
#119 := (iff #26 false)
#1 := true
#114 := (not true)
#117 := (iff #114 false)
#118 := [rewrite]: #117
#115 := (iff #26 #114)
#112 := (iff #25 true)
#107 := (= #24 #24)
#110 := (iff #107 true)
#111 := [rewrite]: #110
#108 := (iff #25 #107)
#104 := (= #21 1::Int)
#99 := (ite false 0::Int 1::Int)
#102 := (= #99 1::Int)
#103 := [rewrite]: #102
#100 := (= #21 #99)
#97 := (= #20 1::Int)
#74 := (and #12 #14)
#77 := (or #12 #74)
#92 := (ite #77 1::Int 1::Int)
#95 := (= #92 1::Int)
#96 := [rewrite]: #95
#93 := (= #20 #92)
#90 := (= #19 1::Int)
#82 := -3::Int
#85 := (div -3::Int -3::Int)
#88 := (= #85 1::Int)
#89 := [rewrite]: #88
#86 := (= #19 #85)
#83 := (= #18 -3::Int)
#84 := [rewrite]: #83
#87 := [monotonicity #84 #84]: #86
#91 := [trans #87 #89]: #90
#80 := (= #17 1::Int)
#81 := [rewrite]: #80
#78 := (iff #16 #77)
#75 := (iff #15 #74)
#76 := [rewrite]: #75
#72 := (iff #13 #12)
#73 := [rewrite]: #72
#79 := [monotonicity #73 #76]: #78
#94 := [monotonicity #79 #81 #91]: #93
#98 := [trans #94 #96]: #97
#70 := (iff #11 false)
#65 := (or false false)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #11 #65)
#63 := (iff #10 false)
#64 := [rewrite]: #63
#67 := [monotonicity #64 #64]: #66
#71 := [trans #67 #69]: #70
#101 := [monotonicity #71 #98]: #100
#105 := [trans #101 #103]: #104
#106 := [monotonicity #105]: #25
#109 := [monotonicity #106]: #108
#113 := [trans #109 #111]: #112
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#62 := [asserted]: #26
[mp #62 #120]: false
unsat
7e6d147ebdbd2ef1c1366775850a7558514783c8 299 0
#2 := false
#10 := 0::Int
#12 := 3::Int
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#402 := (mod #9 3::Int)
#403 := (>= #402 0::Int)
#1 := true
#62 := [true-axiom]: true
#663 := (or false #403)
#664 := [th-lemma arith]: #663
#662 := [unit-resolution #664 #62]: #403
#84 := -3::Int
#80 := -1::Int
#81 := (* -1::Int #9)
#87 := (div #81 -3::Int)
#21 := (div #9 3::Int)
#115 := (>= #9 0::Int)
#116 := (not #115)
#102 := (<= #9 0::Int)
#103 := (not #102)
#126 := (or #103 #116)
#129 := (ite #126 #21 #87)
#11 := (= #9 0::Int)
#132 := (ite #11 0::Int #129)
#139 := (* -1::Int #132)
#140 := (+ #9 #139)
#138 := (>= #140 0::Int)
#145 := (not #138)
#23 := (- 3::Int)
#22 := (- #9)
#24 := (div #22 #23)
#16 := (< 0::Int 3::Int)
#18 := (< #9 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int #9)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#13 := (= 3::Int 0::Int)
#14 := (or #11 #13)
#26 := (ite #14 0::Int #25)
#27 := (<= #26 #9)
#28 := (not #27)
#148 := (iff #28 #145)
#74 := (and #16 #18)
#77 := (or #17 #74)
#90 := (ite #77 #21 #87)
#93 := (ite #11 0::Int #90)
#96 := (<= #93 #9)
#99 := (not #96)
#146 := (iff #99 #145)
#143 := (iff #96 #138)
#135 := (<= #132 #9)
#141 := (iff #135 #138)
#142 := [rewrite]: #141
#136 := (iff #96 #135)
#133 := (= #93 #132)
#130 := (= #90 #129)
#127 := (iff #77 #126)
#124 := (iff #74 #116)
#119 := (and true #116)
#122 := (iff #119 #116)
#123 := [rewrite]: #122
#120 := (iff #74 #119)
#117 := (iff #18 #116)
#118 := [rewrite]: #117
#106 := (iff #16 true)
#107 := [rewrite]: #106
#121 := [monotonicity #107 #118]: #120
#125 := [trans #121 #123]: #124
#113 := (iff #17 #103)
#108 := (and #103 true)
#111 := (iff #108 #103)
#112 := [rewrite]: #111
#109 := (iff #17 #108)
#104 := (iff #15 #103)
#105 := [rewrite]: #104
#110 := [monotonicity #105 #107]: #109
#114 := [trans #110 #112]: #113
#128 := [monotonicity #114 #125]: #127
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#137 := [monotonicity #134]: #136
#144 := [trans #137 #142]: #143
#147 := [monotonicity #144]: #146
#100 := (iff #28 #99)
#97 := (iff #27 #96)
#94 := (= #26 #93)
#91 := (= #25 #90)
#88 := (= #24 #87)
#85 := (= #23 -3::Int)
#86 := [rewrite]: #85
#82 := (= #22 #81)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#78 := (iff #20 #77)
#75 := (iff #19 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#92 := [monotonicity #79 #89]: #91
#72 := (iff #14 #11)
#67 := (or #11 false)
#70 := (iff #67 #11)
#71 := [rewrite]: #70
#68 := (iff #14 #67)
#65 := (iff #13 false)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#95 := [monotonicity #73 #92]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#149 := [trans #101 #147]: #148
#64 := [asserted]: #28
#150 := [mp #64 #149]: #145
#507 := (+ #21 #139)
#661 := (>= #507 0::Int)
#506 := (= #21 #132)
#395 := (= #129 #132)
#712 := (not #11)
#344 := (<= #132 0::Int)
#309 := (= #132 0::Int)
#709 := [hypothesis]: #11
#386 := (or #712 #309)
#387 := [def-axiom]: #386
#349 := [unit-resolution #387 #709]: #309
#350 := (not #309)
#710 := (or #350 #344)
#708 := [th-lemma arith triangle-eq]: #710
#711 := [unit-resolution #708 #349]: #344
#697 := (or #712 #115)
#698 := [th-lemma arith triangle-eq]: #697
#420 := [unit-resolution #698 #709]: #115
#421 := [th-lemma arith farkas -1 1 1 #420 #150 #711]: false
#422 := [lemma #421]: #712
#719 := (or #11 #395)
#720 := [def-axiom]: #719
#665 := [unit-resolution #720 #422]: #395
#310 := (= #21 #129)
decl f5 :: (-> Int S2)
#721 := (f5 #9)
#717 := (f3 #721)
#723 := (= #717 0::Int)
#542 := (not #723)
#557 := (iff #712 #542)
#654 := (iff #11 #723)
#558 := (iff #723 #11)
#508 := (= #717 #9)
#548 := (= #721 f4)
#722 := (= f4 #721)
#29 := (:var 0 S2)
#30 := (f3 #29)
#724 := (pattern #30)
#31 := (f5 #30)
#152 := (= #29 #31)
#725 := (forall (vars (?v0 S2)) (:pat #724) #152)
#155 := (forall (vars (?v0 S2)) #152)
#726 := (iff #155 #725)
#728 := (iff #725 #725)
#729 := [rewrite]: #728
#727 := [rewrite]: #726
#730 := [trans #727 #729]: #726
#249 := (~ #155 #155)
#247 := (~ #152 #152)
#248 := [refl]: #247
#250 := [nnf-pos #248]: #249
#32 := (= #31 #29)
#33 := (forall (vars (?v0 S2)) #32)
#156 := (iff #33 #155)
#153 := (iff #32 #152)
#154 := [rewrite]: #153
#157 := [quant-intro #154]: #156
#151 := [asserted]: #33
#160 := [mp #151 #157]: #155
#239 := [mp~ #160 #250]: #155
#731 := [mp #239 #730]: #725
#713 := (not #725)
#373 := (or #713 #722)
#378 := [quant-inst #8]: #373
#547 := [unit-resolution #378 #731]: #722
#549 := [symm #547]: #548
#656 := [monotonicity #549]: #508
#653 := [monotonicity #656]: #558
#657 := [symm #653]: #654
#559 := [monotonicity #657]: #557
#560 := [mp #422 #559]: #542
#374 := (or #115 #723)
#34 := (:var 0 Int)
#36 := (f5 #34)
#732 := (pattern #36)
#176 := (>= #34 0::Int)
#37 := (f3 #36)
#42 := (= #37 0::Int)
#225 := (or #42 #176)
#739 := (forall (vars (?v0 Int)) (:pat #732) #225)
#230 := (forall (vars (?v0 Int)) #225)
#742 := (iff #230 #739)
#740 := (iff #225 #225)
#741 := [refl]: #740
#743 := [quant-intro #741]: #742
#243 := (~ #230 #230)
#251 := (~ #225 #225)
#252 := [refl]: #251
#244 := [nnf-pos #252]: #243
#41 := (< #34 0::Int)
#43 := (implies #41 #42)
#44 := (forall (vars (?v0 Int)) #43)
#233 := (iff #44 #230)
#196 := (= 0::Int #37)
#202 := (not #41)
#203 := (or #202 #196)
#208 := (forall (vars (?v0 Int)) #203)
#231 := (iff #208 #230)
#228 := (iff #203 #225)
#222 := (or #176 #42)
#226 := (iff #222 #225)
#227 := [rewrite]: #226
#223 := (iff #203 #222)
#220 := (iff #196 #42)
#221 := [rewrite]: #220
#218 := (iff #202 #176)
#178 := (not #176)
#213 := (not #178)
#216 := (iff #213 #176)
#217 := [rewrite]: #216
#214 := (iff #202 #213)
#211 := (iff #41 #178)
#212 := [rewrite]: #211
#215 := [monotonicity #212]: #214
#219 := [trans #215 #217]: #218
#224 := [monotonicity #219 #221]: #223
#229 := [trans #224 #227]: #228
#232 := [quant-intro #229]: #231
#209 := (iff #44 #208)
#206 := (iff #43 #203)
#199 := (implies #41 #196)
#204 := (iff #199 #203)
#205 := [rewrite]: #204
#200 := (iff #43 #199)
#197 := (iff #42 #196)
#198 := [rewrite]: #197
#201 := [monotonicity #198]: #200
#207 := [trans #201 #205]: #206
#210 := [quant-intro #207]: #209
#234 := [trans #210 #232]: #233
#195 := [asserted]: #44
#235 := [mp #195 #234]: #230
#253 := [mp~ #235 #244]: #230
#744 := [mp #253 #743]: #739
#699 := (not #739)
#362 := (or #699 #115 #723)
#714 := (or #723 #115)
#363 := (or #699 #714)
#705 := (iff #363 #362)
#365 := (or #699 #374)
#703 := (iff #365 #362)
#704 := [rewrite]: #703
#701 := (iff #363 #365)
#715 := (iff #714 #374)
#358 := [rewrite]: #715
#702 := [monotonicity #358]: #701
#700 := [trans #702 #704]: #705
#364 := [quant-inst #9]: #363
#706 := [mp #364 #700]: #362
#553 := [unit-resolution #706 #744]: #374
#561 := [unit-resolution #553 #560]: #115
#562 := (or #11 #103 #116)
#563 := [th-lemma arith triangle-eq]: #562
#564 := [unit-resolution #563 #561 #422]: #103
#397 := (or #126 #102)
#388 := [def-axiom]: #397
#565 := [unit-resolution #388 #564]: #126
#328 := (not #126)
#716 := (or #328 #310)
#718 := [def-axiom]: #716
#658 := [unit-resolution #718 #565]: #310
#655 := [trans #658 #665]: #506
#659 := (not #506)
#646 := (or #659 #661)
#648 := [th-lemma arith triangle-eq]: #646
#640 := [unit-resolution #648 #655]: #661
#696 := (* -1::Int #402)
#692 := (* -3::Int #21)
#406 := (+ #692 #696)
#407 := (+ #9 #406)
#688 := (>= #407 0::Int)
#695 := (= #407 0::Int)
#637 := (or false #695)
#639 := [th-lemma arith]: #637
#649 := [unit-resolution #639 #62]: #695
#650 := (not #695)
#651 := (or #650 #688)
#647 := [th-lemma arith triangle-eq]: #651
#652 := [unit-resolution #647 #649]: #688
[th-lemma arith farkas 2 1 3 3 1 #561 #652 #640 #150 #662]: false
unsat
73ec717ba0bbdd95adecb13ea22d00aede55f061 489 0
#2 := false
decl f3 :: (-> Int S2)
#10 := 0::Int
#29 := (f3 0::Int)
decl f5 :: S2
#8 := f5
#30 := (= f5 #29)
decl f4 :: (-> S2 Int)
#9 := (f4 f5)
#385 := (f3 #9)
#662 := (= #385 #29)
#631 := (= #29 #385)
#629 := (= 0::Int #9)
#11 := (= #9 0::Int)
#12 := 3::Int
#429 := (mod #9 3::Int)
#663 := (>= #429 0::Int)
#1 := true
#66 := [true-axiom]: true
#624 := (or false #663)
#619 := [th-lemma arith]: #624
#625 := [unit-resolution #619 #66]: #663
#88 := -3::Int
#84 := -1::Int
#85 := (* -1::Int #9)
#91 := (div #85 -3::Int)
#21 := (div #9 3::Int)
#141 := (>= #9 0::Int)
#142 := (not #141)
#128 := (<= #9 0::Int)
#129 := (not #128)
#152 := (or #129 #142)
#155 := (ite #152 #21 #91)
#158 := (ite #11 0::Int #155)
#628 := (* -1::Int #158)
#634 := (+ #9 #628)
#620 := (<= #634 0::Int)
#633 := (= #9 #158)
#161 := (f3 #158)
#708 := (f4 #161)
#577 := (= #708 #158)
#703 := (= #158 #708)
#706 := (>= #158 0::Int)
#709 := (= #708 0::Int)
#608 := (not #709)
#739 := (not #11)
#609 := (iff #739 #608)
#611 := (iff #11 #709)
#605 := (iff #709 #11)
#493 := (= #708 #9)
#598 := (= #161 f5)
#164 := (= f5 #161)
#664 := (= #29 #161)
#675 := (= #161 #29)
#336 := (= #158 0::Int)
#729 := (f4 #29)
#727 := (= #729 0::Int)
#38 := (:var 0 Int)
#40 := (f3 #38)
#759 := (pattern #40)
#203 := (>= #38 0::Int)
#205 := (not #203)
#41 := (f4 #40)
#186 := (= #38 #41)
#211 := (or #186 #205)
#760 := (forall (vars (?v0 Int)) (:pat #759) #211)
#216 := (forall (vars (?v0 Int)) #211)
#763 := (iff #216 #760)
#761 := (iff #211 #211)
#762 := [refl]: #761
#764 := [quant-intro #762]: #763
#268 := (~ #216 #216)
#267 := (~ #211 #211)
#264 := [refl]: #267
#269 := [nnf-pos #264]: #268
#42 := (= #41 #38)
#39 := (<= 0::Int #38)
#43 := (implies #39 #42)
#44 := (forall (vars (?v0 Int)) #43)
#219 := (iff #44 #216)
#193 := (not #39)
#194 := (or #193 #186)
#199 := (forall (vars (?v0 Int)) #194)
#217 := (iff #199 #216)
#214 := (iff #194 #211)
#208 := (or #205 #186)
#212 := (iff #208 #211)
#213 := [rewrite]: #212
#209 := (iff #194 #208)
#206 := (iff #193 #205)
#202 := (iff #39 #203)
#204 := [rewrite]: #202
#207 := [monotonicity #204]: #206
#210 := [monotonicity #207]: #209
#215 := [trans #210 #213]: #214
#218 := [quant-intro #215]: #217
#200 := (iff #44 #199)
#197 := (iff #43 #194)
#190 := (implies #39 #186)
#195 := (iff #190 #194)
#196 := [rewrite]: #195
#191 := (iff #43 #190)
#188 := (iff #42 #186)
#189 := [rewrite]: #188
#192 := [monotonicity #189]: #191
#198 := [trans #192 #196]: #197
#201 := [quant-intro #198]: #200
#220 := [trans #201 #218]: #219
#185 := [asserted]: #44
#221 := [mp #185 #220]: #216
#265 := [mp~ #221 #269]: #216
#765 := [mp #265 #764]: #760
#721 := (not #760)
#443 := (or #721 #727)
#389 := (>= 0::Int 0::Int)
#390 := (not #389)
#730 := (= 0::Int #729)
#731 := (or #730 #390)
#444 := (or #721 #731)
#722 := (iff #444 #443)
#723 := (iff #443 #443)
#433 := [rewrite]: #723
#343 := (iff #731 #727)
#725 := (or #727 false)
#449 := (iff #725 #727)
#450 := [rewrite]: #449
#447 := (iff #731 #725)
#738 := (iff #390 false)
#736 := (not true)
#737 := (iff #736 false)
#735 := [rewrite]: #737
#376 := (iff #390 #736)
#371 := (iff #389 true)
#734 := [rewrite]: #371
#377 := [monotonicity #734]: #376
#724 := [trans #377 #735]: #738
#732 := (iff #730 #727)
#733 := [rewrite]: #732
#448 := [monotonicity #733 #724]: #447
#720 := [trans #448 #450]: #343
#719 := [monotonicity #720]: #722
#434 := [trans #719 #433]: #722
#718 := [quant-inst #10]: #444
#435 := [mp #718 #434]: #443
#590 := [unit-resolution #435 #765]: #727
#685 := (= #9 #729)
#748 := (not #164)
#588 := [hypothesis]: #748
#401 := (or #30 #164)
#122 := (not #30)
#170 := (iff #122 #164)
#23 := (- 3::Int)
#22 := (- #9)
#24 := (div #22 #23)
#16 := (< 0::Int 3::Int)
#18 := (< #9 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int #9)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#13 := (= 3::Int 0::Int)
#14 := (or #11 #13)
#26 := (ite #14 0::Int #25)
#27 := (f3 #26)
#28 := (= #27 f5)
#31 := (iff #28 #30)
#32 := (not #31)
#175 := (iff #32 #170)
#78 := (and #16 #18)
#81 := (or #17 #78)
#94 := (ite #81 #21 #91)
#97 := (ite #11 0::Int #94)
#100 := (f3 #97)
#106 := (= f5 #100)
#123 := (iff #106 #122)
#173 := (iff #123 #170)
#167 := (iff #164 #122)
#171 := (iff #167 #170)
#172 := [rewrite]: #171
#168 := (iff #123 #167)
#165 := (iff #106 #164)
#162 := (= #100 #161)
#159 := (= #97 #158)
#156 := (= #94 #155)
#153 := (iff #81 #152)
#150 := (iff #78 #142)
#145 := (and true #142)
#148 := (iff #145 #142)
#149 := [rewrite]: #148
#146 := (iff #78 #145)
#143 := (iff #18 #142)
#144 := [rewrite]: #143
#132 := (iff #16 true)
#133 := [rewrite]: #132
#147 := [monotonicity #133 #144]: #146
#151 := [trans #147 #149]: #150
#139 := (iff #17 #129)
#134 := (and #129 true)
#137 := (iff #134 #129)
#138 := [rewrite]: #137
#135 := (iff #17 #134)
#130 := (iff #15 #129)
#131 := [rewrite]: #130
#136 := [monotonicity #131 #133]: #135
#140 := [trans #136 #138]: #139
#154 := [monotonicity #140 #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#174 := [trans #169 #172]: #173
#126 := (iff #32 #123)
#114 := (iff #30 #106)
#119 := (not #114)
#124 := (iff #119 #123)
#125 := [rewrite]: #124
#120 := (iff #32 #119)
#117 := (iff #31 #114)
#111 := (iff #106 #30)
#115 := (iff #111 #114)
#116 := [rewrite]: #115
#112 := (iff #31 #111)
#109 := (iff #28 #106)
#103 := (= #100 f5)
#107 := (iff #103 #106)
#108 := [rewrite]: #107
#104 := (iff #28 #103)
#101 := (= #27 #100)
#98 := (= #26 #97)
#95 := (= #25 #94)
#92 := (= #24 #91)
#89 := (= #23 -3::Int)
#90 := [rewrite]: #89
#86 := (= #22 #85)
#87 := [rewrite]: #86
#93 := [monotonicity #87 #90]: #92
#82 := (iff #20 #81)
#79 := (iff #19 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#96 := [monotonicity #83 #93]: #95
#76 := (iff #14 #11)
#71 := (or #11 false)
#74 := (iff #71 #11)
#75 := [rewrite]: #74
#72 := (iff #14 #71)
#69 := (iff #13 false)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#99 := [monotonicity #77 #96]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#110 := [trans #105 #108]: #109
#113 := [monotonicity #110]: #112
#118 := [trans #113 #116]: #117
#121 := [monotonicity #118]: #120
#127 := [trans #121 #125]: #126
#176 := [trans #127 #174]: #175
#68 := [asserted]: #32
#177 := [mp #68 #176]: #170
#749 := (not #170)
#405 := (or #30 #164 #749)
#741 := [def-axiom]: #405
#742 := [unit-resolution #741 #177]: #401
#589 := [unit-resolution #742 #588]: #30
#682 := [monotonicity #589]: #685
#686 := [trans #682 #590]: #11
#413 := (or #739 #336)
#414 := [def-axiom]: #413
#673 := [unit-resolution #414 #686]: #336
#667 := [monotonicity #673]: #675
#666 := [symm #667]: #664
#676 := [trans #589 #666]: #164
#677 := [unit-resolution #588 #676]: false
#678 := [lemma #677]: #164
#599 := [symm #678]: #598
#604 := [monotonicity #599]: #493
#606 := [monotonicity #604]: #605
#607 := [symm #606]: #611
#612 := [monotonicity #607]: #609
#600 := [hypothesis]: #739
#613 := [mp #600 #612]: #608
#697 := (or #706 #709)
#46 := (= #41 0::Int)
#252 := (or #46 #203)
#766 := (forall (vars (?v0 Int)) (:pat #759) #252)
#257 := (forall (vars (?v0 Int)) #252)
#769 := (iff #257 #766)
#767 := (iff #252 #252)
#768 := [refl]: #767
#770 := [quant-intro #768]: #769
#270 := (~ #257 #257)
#278 := (~ #252 #252)
#279 := [refl]: #278
#271 := [nnf-pos #279]: #270
#45 := (< #38 0::Int)
#47 := (implies #45 #46)
#48 := (forall (vars (?v0 Int)) #47)
#260 := (iff #48 #257)
#223 := (= 0::Int #41)
#229 := (not #45)
#230 := (or #229 #223)
#235 := (forall (vars (?v0 Int)) #230)
#258 := (iff #235 #257)
#255 := (iff #230 #252)
#249 := (or #203 #46)
#253 := (iff #249 #252)
#254 := [rewrite]: #253
#250 := (iff #230 #249)
#247 := (iff #223 #46)
#248 := [rewrite]: #247
#245 := (iff #229 #203)
#240 := (not #205)
#243 := (iff #240 #203)
#244 := [rewrite]: #243
#241 := (iff #229 #240)
#238 := (iff #45 #205)
#239 := [rewrite]: #238
#242 := [monotonicity #239]: #241
#246 := [trans #242 #244]: #245
#251 := [monotonicity #246 #248]: #250
#256 := [trans #251 #254]: #255
#259 := [quant-intro #256]: #258
#236 := (iff #48 #235)
#233 := (iff #47 #230)
#226 := (implies #45 #223)
#231 := (iff #226 #230)
#232 := [rewrite]: #231
#227 := (iff #47 #226)
#224 := (iff #46 #223)
#225 := [rewrite]: #224
#228 := [monotonicity #225]: #227
#234 := [trans #228 #232]: #233
#237 := [quant-intro #234]: #236
#261 := [trans #237 #259]: #260
#222 := [asserted]: #48
#262 := [mp #222 #261]: #257
#280 := [mp~ #262 #271]: #257
#771 := [mp #280 #770]: #766
#693 := (not #766)
#694 := (or #693 #706 #709)
#710 := (or #709 #706)
#700 := (or #693 #710)
#687 := (iff #700 #694)
#695 := (or #693 #697)
#533 := (iff #695 #694)
#534 := [rewrite]: #533
#702 := (iff #700 #695)
#698 := (iff #710 #697)
#699 := [rewrite]: #698
#531 := [monotonicity #699]: #702
#688 := [trans #531 #534]: #687
#701 := [quant-inst #158]: #700
#690 := [mp #701 #688]: #694
#614 := [unit-resolution #690 #771]: #697
#610 := [unit-resolution #614 #613]: #706
#707 := (not #706)
#704 := (or #703 #707)
#705 := (or #721 #703 #707)
#711 := (or #721 #704)
#553 := (iff #711 #705)
#554 := [rewrite]: #553
#552 := [quant-inst #158]: #711
#696 := [mp #552 #554]: #705
#615 := [unit-resolution #696 #765]: #704
#595 := [unit-resolution #615 #610]: #703
#601 := [symm #595]: #577
#541 := (= #9 #708)
#596 := [symm #604]: #541
#602 := [trans #596 #601]: #633
#597 := (not #633)
#603 := (or #597 #620)
#571 := [th-lemma arith triangle-eq]: #603
#578 := [unit-resolution #571 #602]: #620
#618 := (+ #21 #628)
#622 := (>= #618 0::Int)
#617 := (= #21 #158)
#422 := (= #155 #158)
#746 := (or #11 #422)
#747 := [def-axiom]: #746
#537 := [unit-resolution #747 #600]: #422
#337 := (= #21 #155)
#691 := (f4 #385)
#689 := (= #691 0::Int)
#594 := (not #689)
#549 := (iff #739 #594)
#593 := (iff #11 #689)
#582 := (iff #689 #11)
#579 := (= #691 #9)
#570 := (= #385 f5)
#726 := (= f5 #385)
#33 := (:var 0 S2)
#34 := (f4 #33)
#751 := (pattern #34)
#35 := (f3 #34)
#179 := (= #33 #35)
#752 := (forall (vars (?v0 S2)) (:pat #751) #179)
#182 := (forall (vars (?v0 S2)) #179)
#753 := (iff #182 #752)
#755 := (iff #752 #752)
#756 := [rewrite]: #755
#754 := [rewrite]: #753
#757 := [trans #754 #756]: #753
#276 := (~ #182 #182)
#274 := (~ #179 #179)
#275 := [refl]: #274
#277 := [nnf-pos #275]: #276
#36 := (= #35 #33)
#37 := (forall (vars (?v0 S2)) #36)
#183 := (iff #37 #182)
#180 := (iff #36 #179)
#181 := [rewrite]: #180
#184 := [quant-intro #181]: #183
#178 := [asserted]: #37
#187 := [mp #178 #184]: #182
#266 := [mp~ #187 #277]: #182
#758 := [mp #266 #757]: #752
#391 := (not #752)
#392 := (or #391 #726)
#728 := [quant-inst #8]: #392
#568 := [unit-resolution #728 #758]: #726
#572 := [symm #568]: #570
#581 := [monotonicity #572]: #579
#583 := [monotonicity #581]: #582
#573 := [symm #583]: #593
#550 := [monotonicity #573]: #549
#555 := [mp #600 #550]: #594
#574 := (or #141 #689)
#535 := (or #693 #141 #689)
#692 := (or #689 #141)
#683 := (or #693 #692)
#586 := (iff #683 #535)
#680 := (or #693 #574)
#569 := (iff #680 #535)
#584 := [rewrite]: #569
#681 := (iff #683 #680)
#575 := (iff #692 #574)
#576 := [rewrite]: #575
#684 := [monotonicity #576]: #681
#587 := [trans #684 #584]: #586
#585 := [quant-inst #9]: #683
#580 := [mp #585 #587]: #535
#556 := [unit-resolution #580 #771]: #574
#557 := [unit-resolution #556 #555]: #141
#558 := (or #11 #129 #142)
#559 := [th-lemma arith triangle-eq]: #558
#560 := [unit-resolution #559 #600]: #152
#561 := [unit-resolution #560 #557]: #129
#424 := (or #152 #128)
#415 := [def-axiom]: #424
#562 := [unit-resolution #415 #561]: #152
#355 := (not #152)
#743 := (or #355 #337)
#745 := [def-axiom]: #743
#563 := [unit-resolution #745 #562]: #337
#564 := [trans #563 #537]: #617
#565 := (not #617)
#566 := (or #565 #622)
#551 := [th-lemma arith triangle-eq]: #566
#567 := [unit-resolution #551 #564]: #622
#656 := (* -1::Int #429)
#672 := (* -3::Int #21)
#657 := (+ #672 #656)
#659 := (+ #9 #657)
#658 := (>= #659 0::Int)
#665 := (= #659 0::Int)
#528 := (or false #665)
#529 := [th-lemma arith]: #528
#536 := [unit-resolution #529 #66]: #665
#538 := (not #665)
#539 := (or #538 #658)
#540 := [th-lemma arith triangle-eq]: #539
#542 := [unit-resolution #540 #536]: #658
#543 := [th-lemma arith farkas 2 1 3 3 1 #561 #542 #567 #578 #625]: false
#544 := [lemma #543]: #11
#630 := [symm #544]: #629
#632 := [monotonicity #630]: #631
#616 := [symm #632]: #662
#621 := [trans #568 #616]: #30
#740 := (or #122 #748)
#744 := (or #122 #748 #749)
#750 := [def-axiom]: #744
#400 := [unit-resolution #750 #177]: #740
#627 := [unit-resolution #400 #678]: #122
[unit-resolution #627 #621]: false
unsat
1f21dc1a1f14ef0634d3f8992746cd150b8c3799 78 0
#2 := false
decl f3 :: (-> Int S2)
#8 := 0::Int
#21 := (f3 0::Int)
#14 := (- 0::Int)
#15 := (mod #14 #14)
#16 := (- #15)
#13 := (mod 0::Int 0::Int)
#10 := (< 0::Int 0::Int)
#11 := (and #10 #10)
#12 := (or #11 #11)
#17 := (ite #12 #13 #16)
#9 := (= 0::Int 0::Int)
#18 := (ite #9 0::Int #17)
#19 := (ite #9 0::Int #18)
#20 := (f3 #19)
#22 := (= #20 #21)
#23 := (not #22)
#114 := (iff #23 false)
#1 := true
#109 := (not true)
#112 := (iff #109 false)
#113 := [rewrite]: #112
#110 := (iff #23 #109)
#107 := (iff #22 true)
#102 := (= #21 #21)
#105 := (iff #102 true)
#106 := [rewrite]: #105
#103 := (iff #22 #102)
#99 := (= #19 0::Int)
#94 := (ite true 0::Int 0::Int)
#97 := (= #94 0::Int)
#98 := [rewrite]: #97
#95 := (= #19 #94)
#92 := (= #18 0::Int)
#78 := -1::Int
#79 := (* -1::Int #13)
#84 := (ite #10 #13 #79)
#87 := (ite true 0::Int #84)
#90 := (= #87 0::Int)
#91 := [rewrite]: #90
#88 := (= #18 #87)
#85 := (= #17 #84)
#82 := (= #16 #79)
#75 := (- #13)
#80 := (= #75 #79)
#81 := [rewrite]: #80
#76 := (= #16 #75)
#73 := (= #15 #13)
#71 := (= #14 0::Int)
#72 := [rewrite]: #71
#74 := [monotonicity #72 #72]: #73
#77 := [monotonicity #74]: #76
#83 := [trans #77 #81]: #82
#69 := (iff #12 #10)
#64 := (or #10 #10)
#67 := (iff #64 #10)
#68 := [rewrite]: #67
#65 := (iff #12 #64)
#62 := (iff #11 #10)
#63 := [rewrite]: #62
#66 := [monotonicity #63 #63]: #65
#70 := [trans #66 #68]: #69
#86 := [monotonicity #70 #83]: #85
#60 := (iff #9 true)
#61 := [rewrite]: #60
#89 := [monotonicity #61 #86]: #88
#93 := [trans #89 #91]: #92
#96 := [monotonicity #61 #93]: #95
#100 := [trans #96 #98]: #99
#101 := [monotonicity #100]: #22
#104 := [monotonicity #101]: #103
#108 := [trans #104 #106]: #107
#111 := [monotonicity #108]: #110
#115 := [trans #111 #113]: #114
#59 := [asserted]: #23
[mp #59 #115]: false
unsat
18c694d062a2e495b90f6c40f36cef6e909d6c58 115 0
#2 := false
decl f4 :: (-> S2 Int)
#30 := (:var 0 S2)
#31 := (f4 #30)
#695 := (pattern #31)
decl f3 :: (-> Int S2)
#32 := (f3 #31)
#122 := (= #30 #32)
#696 := (forall (vars (?v0 S2)) (:pat #695) #122)
#126 := (forall (vars (?v0 S2)) #122)
#697 := (iff #126 #696)
#699 := (iff #696 #696)
#700 := [rewrite]: #699
#698 := [rewrite]: #697
#701 := [trans #698 #700]: #697
#220 := (~ #126 #126)
#218 := (~ #122 #122)
#219 := [refl]: #218
#221 := [nnf-pos #219]: #220
#33 := (= #32 #30)
#34 := (forall (vars (?v0 S2)) #33)
#127 := (iff #34 #126)
#124 := (iff #33 #122)
#125 := [rewrite]: #124
#128 := [quant-intro #125]: #127
#121 := [asserted]: #34
#131 := [mp #121 #128]: #126
#210 := [mp~ #131 #221]: #126
#702 := [mp #210 #701]: #696
decl f5 :: S2
#10 := f5
#11 := (f4 f5)
#107 := (f3 #11)
#113 := (= f5 #107)
#118 := (not #113)
#8 := 0::Int
#21 := (- 0::Int)
#20 := (- #11)
#22 := (mod #20 #21)
#23 := (- #22)
#19 := (mod #11 0::Int)
#14 := (< 0::Int 0::Int)
#16 := (< #11 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int #11)
#15 := (and #13 #14)
#18 := (or #15 #17)
#24 := (ite #18 #19 #23)
#12 := (= #11 0::Int)
#25 := (ite #12 0::Int #24)
#9 := (= 0::Int 0::Int)
#26 := (ite #9 #11 #25)
#27 := (f3 #26)
#28 := (= #27 f5)
#29 := (not #28)
#119 := (iff #29 #118)
#116 := (iff #28 #113)
#110 := (= #107 f5)
#114 := (iff #110 #113)
#115 := [rewrite]: #114
#111 := (iff #28 #110)
#108 := (= #27 #107)
#105 := (= #26 #11)
#77 := -1::Int
#78 := (* -1::Int #11)
#83 := (mod #78 0::Int)
#89 := (* -1::Int #83)
#71 := (and #14 #16)
#74 := (or #15 #71)
#94 := (ite #74 #19 #89)
#68 := (= 0::Int #11)
#97 := (ite #68 0::Int #94)
#1 := true
#100 := (ite true #11 #97)
#103 := (= #100 #11)
#104 := [rewrite]: #103
#101 := (= #26 #100)
#98 := (= #25 #97)
#95 := (= #24 #94)
#92 := (= #23 #89)
#86 := (- #83)
#90 := (= #86 #89)
#91 := [rewrite]: #90
#87 := (= #23 #86)
#84 := (= #22 #83)
#81 := (= #21 0::Int)
#82 := [rewrite]: #81
#79 := (= #20 #78)
#80 := [rewrite]: #79
#85 := [monotonicity #80 #82]: #84
#88 := [monotonicity #85]: #87
#93 := [trans #88 #91]: #92
#75 := (iff #18 #74)
#72 := (iff #17 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#96 := [monotonicity #76 #93]: #95
#69 := (iff #12 #68)
#70 := [rewrite]: #69
#99 := [monotonicity #70 #96]: #98
#66 := (iff #9 true)
#67 := [rewrite]: #66
#102 := [monotonicity #67 #99]: #101
#106 := [trans #102 #104]: #105
#109 := [monotonicity #106]: #108
#112 := [monotonicity #109]: #111
#117 := [trans #112 #115]: #116
#120 := [monotonicity #117]: #119
#65 := [asserted]: #29
#123 := [mp #65 #120]: #118
#281 := (not #696)
#367 := (or #281 #113)
#368 := [quant-inst #10]: #367
[unit-resolution #368 #123 #702]: false
unsat
2713378ea3e2d16536aee750f4c4dea73990d05c 86 0
#2 := false
decl f3 :: (-> Int S2)
#9 := 0::Int
#25 := (f3 0::Int)
#8 := 1::Int
#18 := (- 1::Int)
#17 := (- 0::Int)
#19 := (mod #17 #18)
#20 := (- #19)
#16 := (mod 0::Int 1::Int)
#13 := (< 0::Int 1::Int)
#12 := (< 0::Int 0::Int)
#14 := (and #12 #13)
#15 := (or #14 #14)
#21 := (ite #15 #16 #20)
#11 := (= 0::Int 0::Int)
#22 := (ite #11 0::Int #21)
#10 := (= 1::Int 0::Int)
#23 := (ite #10 0::Int #22)
#24 := (f3 #23)
#26 := (= #24 #25)
#27 := (not #26)
#122 := (iff #27 false)
#1 := true
#117 := (not true)
#120 := (iff #117 false)
#121 := [rewrite]: #120
#118 := (iff #27 #117)
#115 := (iff #26 true)
#110 := (= #25 #25)
#113 := (iff #110 true)
#114 := [rewrite]: #113
#111 := (iff #26 #110)
#107 := (= #23 0::Int)
#102 := (ite false 0::Int 0::Int)
#105 := (= #102 0::Int)
#106 := [rewrite]: #105
#103 := (= #23 #102)
#100 := (= #22 0::Int)
#95 := (ite true 0::Int 0::Int)
#98 := (= #95 0::Int)
#99 := [rewrite]: #98
#96 := (= #22 #95)
#93 := (= #21 0::Int)
#88 := (ite #14 0::Int 0::Int)
#91 := (= #88 0::Int)
#92 := [rewrite]: #91
#89 := (= #21 #88)
#86 := (= #20 0::Int)
#72 := (= #17 0::Int)
#73 := [rewrite]: #72
#84 := (= #20 #17)
#82 := (= #19 0::Int)
#74 := -1::Int
#77 := (mod 0::Int -1::Int)
#80 := (= #77 0::Int)
#81 := [rewrite]: #80
#78 := (= #19 #77)
#75 := (= #18 -1::Int)
#76 := [rewrite]: #75
#79 := [monotonicity #73 #76]: #78
#83 := [trans #79 #81]: #82
#85 := [monotonicity #83]: #84
#87 := [trans #85 #73]: #86
#70 := (= #16 0::Int)
#71 := [rewrite]: #70
#68 := (iff #15 #14)
#69 := [rewrite]: #68
#90 := [monotonicity #69 #71 #87]: #89
#94 := [trans #90 #92]: #93
#66 := (iff #11 true)
#67 := [rewrite]: #66
#97 := [monotonicity #67 #94]: #96
#101 := [trans #97 #99]: #100
#64 := (iff #10 false)
#65 := [rewrite]: #64
#104 := [monotonicity #65 #101]: #103
#108 := [trans #104 #106]: #107
#109 := [monotonicity #108]: #26
#112 := [monotonicity #109]: #111
#116 := [trans #112 #114]: #115
#119 := [monotonicity #116]: #118
#123 := [trans #119 #121]: #122
#63 := [asserted]: #27
[mp #63 #123]: false
unsat
a1075089dc52af4042f6a4669e72797d6209efe9 90 0
#2 := false
decl f3 :: (-> Int S2)
#9 := 0::Int
#24 := (f3 0::Int)
#8 := 1::Int
#17 := (- 1::Int)
#18 := (mod #17 #17)
#19 := (- #18)
#16 := (mod 1::Int 1::Int)
#11 := (< 0::Int 1::Int)
#13 := (< 1::Int 0::Int)
#14 := (and #13 #11)
#12 := (and #11 #11)
#15 := (or #12 #14)
#20 := (ite #15 #16 #19)
#10 := (= 1::Int 0::Int)
#21 := (ite #10 0::Int #20)
#22 := (ite #10 1::Int #21)
#23 := (f3 #22)
#25 := (= #23 #24)
#26 := (not #25)
#126 := (iff #26 false)
#1 := true
#121 := (not true)
#124 := (iff #121 false)
#125 := [rewrite]: #124
#122 := (iff #26 #121)
#119 := (iff #25 true)
#114 := (= #24 #24)
#117 := (iff #114 true)
#118 := [rewrite]: #117
#115 := (iff #25 #114)
#111 := (= #22 0::Int)
#106 := (ite false 1::Int 0::Int)
#109 := (= #106 0::Int)
#110 := [rewrite]: #109
#107 := (= #22 #106)
#104 := (= #21 0::Int)
#99 := (ite false 0::Int 0::Int)
#102 := (= #99 0::Int)
#103 := [rewrite]: #102
#100 := (= #21 #99)
#97 := (= #20 0::Int)
#67 := (and #11 #13)
#70 := (or #11 #67)
#92 := (ite #70 0::Int 0::Int)
#95 := (= #92 0::Int)
#96 := [rewrite]: #95
#93 := (= #20 #92)
#90 := (= #19 0::Int)
#85 := (- 0::Int)
#88 := (= #85 0::Int)
#89 := [rewrite]: #88
#86 := (= #19 #85)
#83 := (= #18 0::Int)
#75 := -1::Int
#78 := (mod -1::Int -1::Int)
#81 := (= #78 0::Int)
#82 := [rewrite]: #81
#79 := (= #18 #78)
#76 := (= #17 -1::Int)
#77 := [rewrite]: #76
#80 := [monotonicity #77 #77]: #79
#84 := [trans #80 #82]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#73 := (= #16 0::Int)
#74 := [rewrite]: #73
#71 := (iff #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#65 := (iff #12 #11)
#66 := [rewrite]: #65
#72 := [monotonicity #66 #69]: #71
#94 := [monotonicity #72 #74 #91]: #93
#98 := [trans #94 #96]: #97
#63 := (iff #10 false)
#64 := [rewrite]: #63
#101 := [monotonicity #64 #98]: #100
#105 := [trans #101 #103]: #104
#108 := [monotonicity #64 #105]: #107
#112 := [trans #108 #110]: #111
#113 := [monotonicity #112]: #25
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#62 := [asserted]: #26
[mp #62 #127]: false
unsat
63c9d4e9b322eec0fd3bd7dd16ba42cd509506b7 97 0
#2 := false
decl f3 :: (-> Int S2)
#9 := 0::Int
#28 := (f3 0::Int)
#8 := 1::Int
#21 := (- 1::Int)
#11 := 3::Int
#20 := (- 3::Int)
#22 := (mod #20 #21)
#23 := (- #22)
#19 := (mod 3::Int 1::Int)
#14 := (< 0::Int 1::Int)
#16 := (< 3::Int 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int 3::Int)
#15 := (and #13 #14)
#18 := (or #15 #17)
#24 := (ite #18 #19 #23)
#12 := (= 3::Int 0::Int)
#25 := (ite #12 0::Int #24)
#10 := (= 1::Int 0::Int)
#26 := (ite #10 3::Int #25)
#27 := (f3 #26)
#29 := (= #27 #28)
#30 := (not #29)
#133 := (iff #30 false)
#1 := true
#128 := (not true)
#131 := (iff #128 false)
#132 := [rewrite]: #131
#129 := (iff #30 #128)
#126 := (iff #29 true)
#121 := (= #28 #28)
#124 := (iff #121 true)
#125 := [rewrite]: #124
#122 := (iff #29 #121)
#118 := (= #26 0::Int)
#113 := (ite false 3::Int 0::Int)
#116 := (= #113 0::Int)
#117 := [rewrite]: #116
#114 := (= #26 #113)
#111 := (= #25 0::Int)
#106 := (ite false 0::Int 0::Int)
#109 := (= #106 0::Int)
#110 := [rewrite]: #109
#107 := (= #25 #106)
#104 := (= #24 0::Int)
#71 := (and #14 #16)
#74 := (or #15 #71)
#99 := (ite #74 0::Int 0::Int)
#102 := (= #99 0::Int)
#103 := [rewrite]: #102
#100 := (= #24 #99)
#97 := (= #23 0::Int)
#92 := (- 0::Int)
#95 := (= #92 0::Int)
#96 := [rewrite]: #95
#93 := (= #23 #92)
#90 := (= #22 0::Int)
#82 := -1::Int
#79 := -3::Int
#85 := (mod -3::Int -1::Int)
#88 := (= #85 0::Int)
#89 := [rewrite]: #88
#86 := (= #22 #85)
#83 := (= #21 -1::Int)
#84 := [rewrite]: #83
#80 := (= #20 -3::Int)
#81 := [rewrite]: #80
#87 := [monotonicity #81 #84]: #86
#91 := [trans #87 #89]: #90
#94 := [monotonicity #91]: #93
#98 := [trans #94 #96]: #97
#77 := (= #19 0::Int)
#78 := [rewrite]: #77
#75 := (iff #18 #74)
#72 := (iff #17 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#101 := [monotonicity #76 #78 #98]: #100
#105 := [trans #101 #103]: #104
#69 := (iff #12 false)
#70 := [rewrite]: #69
#108 := [monotonicity #70 #105]: #107
#112 := [trans #108 #110]: #111
#67 := (iff #10 false)
#68 := [rewrite]: #67
#115 := [monotonicity #68 #112]: #114
#119 := [trans #115 #117]: #118
#120 := [monotonicity #119]: #29
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#130 := [monotonicity #127]: #129
#134 := [trans #130 #132]: #133
#66 := [asserted]: #30
[mp #66 #134]: false
unsat
baacef3aba2d9193028d7d390c9e488f80e40513 170 0
#2 := false
#9 := 0::Int
decl f4 :: (-> S2 Int)
decl f5 :: S2
#11 := f5
#12 := (f4 f5)
#144 := (>= #12 0::Int)
#145 := (not #144)
#131 := (<= #12 0::Int)
#132 := (not #131)
#13 := (= #12 0::Int)
#163 := (or #13 #132 #145)
#429 := (not #163)
#81 := -1::Int
#82 := (* -1::Int #12)
#87 := (mod #82 -1::Int)
#93 := (* -1::Int #87)
#168 := (ite #163 0::Int #93)
#341 := (= #168 0::Int)
#706 := (not #341)
decl f3 :: (-> Int S2)
#171 := (f3 #168)
#29 := (f3 0::Int)
#174 := (= #29 #171)
#698 := (= #171 #29)
#697 := [hypothesis]: #341
#704 := [monotonicity #697]: #698
#705 := [symm #704]: #174
#177 := (not #174)
#8 := 1::Int
#22 := (- 1::Int)
#21 := (- #12)
#23 := (mod #21 #22)
#24 := (- #23)
#20 := (mod #12 1::Int)
#15 := (< 0::Int 1::Int)
#17 := (< #12 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int #12)
#16 := (and #14 #15)
#19 := (or #16 #18)
#25 := (ite #19 #20 #24)
#26 := (ite #13 0::Int #25)
#10 := (= 1::Int 0::Int)
#27 := (ite #10 #12 #26)
#28 := (f3 #27)
#30 := (= #28 #29)
#31 := (not #30)
#180 := (iff #31 #177)
#73 := (and #15 #17)
#76 := (or #16 #73)
#70 := (= 0::Int #12)
#104 := (or #70 #76)
#105 := (ite #104 0::Int #93)
#117 := (f3 #105)
#123 := (= #29 #117)
#128 := (not #123)
#178 := (iff #128 #177)
#175 := (iff #123 #174)
#172 := (= #117 #171)
#169 := (= #105 #168)
#166 := (iff #104 #163)
#157 := (or #132 #145)
#160 := (or #13 #157)
#164 := (iff #160 #163)
#165 := [rewrite]: #164
#161 := (iff #104 #160)
#158 := (iff #76 #157)
#153 := (iff #73 #145)
#1 := true
#148 := (and true #145)
#151 := (iff #148 #145)
#152 := [rewrite]: #151
#149 := (iff #73 #148)
#146 := (iff #17 #145)
#147 := [rewrite]: #146
#135 := (iff #15 true)
#136 := [rewrite]: #135
#150 := [monotonicity #136 #147]: #149
#154 := [trans #150 #152]: #153
#142 := (iff #16 #132)
#137 := (and #132 true)
#140 := (iff #137 #132)
#141 := [rewrite]: #140
#138 := (iff #16 #137)
#133 := (iff #14 #132)
#134 := [rewrite]: #133
#139 := [monotonicity #134 #136]: #138
#143 := [trans #139 #141]: #142
#159 := [monotonicity #143 #154]: #158
#155 := (iff #70 #13)
#156 := [rewrite]: #155
#162 := [monotonicity #156 #159]: #161
#167 := [trans #162 #165]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#129 := (iff #31 #128)
#126 := (iff #30 #123)
#120 := (= #117 #29)
#124 := (iff #120 #123)
#125 := [rewrite]: #124
#121 := (iff #30 #120)
#118 := (= #28 #117)
#115 := (= #27 #105)
#110 := (ite false #12 #105)
#113 := (= #110 #105)
#114 := [rewrite]: #113
#111 := (= #27 #110)
#108 := (= #26 #105)
#98 := (ite #76 0::Int #93)
#101 := (ite #70 0::Int #98)
#106 := (= #101 #105)
#107 := [rewrite]: #106
#102 := (= #26 #101)
#99 := (= #25 #98)
#96 := (= #24 #93)
#90 := (- #87)
#94 := (= #90 #93)
#95 := [rewrite]: #94
#91 := (= #24 #90)
#88 := (= #23 #87)
#85 := (= #22 -1::Int)
#86 := [rewrite]: #85
#83 := (= #21 #82)
#84 := [rewrite]: #83
#89 := [monotonicity #84 #86]: #88
#92 := [monotonicity #89]: #91
#97 := [trans #92 #95]: #96
#79 := (= #20 0::Int)
#80 := [rewrite]: #79
#77 := (iff #19 #76)
#74 := (iff #18 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#100 := [monotonicity #78 #80 #97]: #99
#71 := (iff #13 #70)
#72 := [rewrite]: #71
#103 := [monotonicity #72 #100]: #102
#109 := [trans #103 #107]: #108
#68 := (iff #10 false)
#69 := [rewrite]: #68
#112 := [monotonicity #69 #109]: #111
#116 := [trans #112 #114]: #115
#119 := [monotonicity #116]: #118
#122 := [monotonicity #119]: #121
#127 := [trans #122 #125]: #126
#130 := [monotonicity #127]: #129
#181 := [trans #130 #179]: #180
#67 := [asserted]: #31
#182 := [mp #67 #181]: #177
#699 := [unit-resolution #182 #705]: false
#535 := [lemma #699]: #706
#747 := (or #429 #341)
#749 := [def-axiom]: #747
#658 := [unit-resolution #749 #535]: #429
#431 := (or #163 #144)
#432 := [def-axiom]: #431
#655 := [unit-resolution #432 #658]: #144
#419 := (or #163 #131)
#430 := [def-axiom]: #419
#659 := [unit-resolution #430 #658]: #131
#342 := (not #13)
#427 := (or #163 #342)
#428 := [def-axiom]: #427
#639 := [unit-resolution #428 #658]: #342
#640 := [th-lemma arith triangle-eq]: #163
[unit-resolution #640 #639 #659 #655]: false
unsat
52940ae1c337d10436c752f28c341997638bfaa6 86 0
#2 := false
decl f3 :: (-> Int S2)
#9 := 0::Int
#25 := (f3 0::Int)
#8 := 3::Int
#18 := (- 3::Int)
#17 := (- 0::Int)
#19 := (mod #17 #18)
#20 := (- #19)
#16 := (mod 0::Int 3::Int)
#13 := (< 0::Int 3::Int)
#12 := (< 0::Int 0::Int)
#14 := (and #12 #13)
#15 := (or #14 #14)
#21 := (ite #15 #16 #20)
#11 := (= 0::Int 0::Int)
#22 := (ite #11 0::Int #21)
#10 := (= 3::Int 0::Int)
#23 := (ite #10 0::Int #22)
#24 := (f3 #23)
#26 := (= #24 #25)
#27 := (not #26)
#122 := (iff #27 false)
#1 := true
#117 := (not true)
#120 := (iff #117 false)
#121 := [rewrite]: #120
#118 := (iff #27 #117)
#115 := (iff #26 true)
#110 := (= #25 #25)
#113 := (iff #110 true)
#114 := [rewrite]: #113
#111 := (iff #26 #110)
#107 := (= #23 0::Int)
#102 := (ite false 0::Int 0::Int)
#105 := (= #102 0::Int)
#106 := [rewrite]: #105
#103 := (= #23 #102)
#100 := (= #22 0::Int)
#95 := (ite true 0::Int 0::Int)
#98 := (= #95 0::Int)
#99 := [rewrite]: #98
#96 := (= #22 #95)
#93 := (= #21 0::Int)
#88 := (ite #14 0::Int 0::Int)
#91 := (= #88 0::Int)
#92 := [rewrite]: #91
#89 := (= #21 #88)
#86 := (= #20 0::Int)
#72 := (= #17 0::Int)
#73 := [rewrite]: #72
#84 := (= #20 #17)
#82 := (= #19 0::Int)
#74 := -3::Int
#77 := (mod 0::Int -3::Int)
#80 := (= #77 0::Int)
#81 := [rewrite]: #80
#78 := (= #19 #77)
#75 := (= #18 -3::Int)
#76 := [rewrite]: #75
#79 := [monotonicity #73 #76]: #78
#83 := [trans #79 #81]: #82
#85 := [monotonicity #83]: #84
#87 := [trans #85 #73]: #86
#70 := (= #16 0::Int)
#71 := [rewrite]: #70
#68 := (iff #15 #14)
#69 := [rewrite]: #68
#90 := [monotonicity #69 #71 #87]: #89
#94 := [trans #90 #92]: #93
#66 := (iff #11 true)
#67 := [rewrite]: #66
#97 := [monotonicity #67 #94]: #96
#101 := [trans #97 #99]: #100
#64 := (iff #10 false)
#65 := [rewrite]: #64
#104 := [monotonicity #65 #101]: #103
#108 := [trans #104 #106]: #107
#109 := [monotonicity #108]: #26
#112 := [monotonicity #109]: #111
#116 := [trans #112 #114]: #115
#119 := [monotonicity #116]: #118
#123 := [trans #119 #121]: #122
#63 := [asserted]: #27
[mp #63 #123]: false
unsat
eea72e0b08b81263eac13f5c3a2599d4713d6590 145 0
#2 := false
decl f3 :: (-> Int S2)
#11 := 1::Int
#28 := (f3 1::Int)
#8 := 3::Int
#21 := (- 3::Int)
#20 := (- 1::Int)
#22 := (mod #20 #21)
#23 := (- #22)
#19 := (mod 1::Int 3::Int)
#9 := 0::Int
#14 := (< 0::Int 3::Int)
#16 := (< 1::Int 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int 1::Int)
#15 := (and #13 #14)
#18 := (or #15 #17)
#24 := (ite #18 #19 #23)
#12 := (= 1::Int 0::Int)
#25 := (ite #12 0::Int #24)
#10 := (= 3::Int 0::Int)
#26 := (ite #10 1::Int #25)
#27 := (f3 #26)
#29 := (= #27 #28)
#30 := (not #29)
#181 := (iff #30 false)
#96 := -2::Int
#71 := (and #14 #16)
#74 := (or #15 #71)
#101 := (ite #74 1::Int -2::Int)
#118 := (f3 #101)
#124 := (= #28 #118)
#129 := (not #124)
#179 := (iff #129 false)
#1 := true
#174 := (not true)
#177 := (iff #174 false)
#178 := [rewrite]: #177
#175 := (iff #129 #174)
#172 := (iff #124 true)
#167 := (= #28 #28)
#170 := (iff #167 true)
#171 := [rewrite]: #170
#168 := (iff #124 #167)
#121 := (= #118 #28)
#164 := (= #101 1::Int)
#159 := (ite true 1::Int -2::Int)
#162 := (= #159 1::Int)
#163 := [rewrite]: #162
#160 := (= #101 #159)
#157 := (iff #74 true)
#152 := (or true false)
#155 := (iff #152 true)
#156 := [rewrite]: #155
#153 := (iff #74 #152)
#150 := (iff #71 false)
#145 := (and true false)
#148 := (iff #145 false)
#149 := [rewrite]: #148
#146 := (iff #71 #145)
#143 := (iff #16 false)
#144 := [rewrite]: #143
#134 := (iff #14 true)
#135 := [rewrite]: #134
#147 := [monotonicity #135 #144]: #146
#151 := [trans #147 #149]: #150
#141 := (iff #15 true)
#136 := (and true true)
#139 := (iff #136 true)
#140 := [rewrite]: #139
#137 := (iff #15 #136)
#132 := (iff #13 true)
#133 := [rewrite]: #132
#138 := [monotonicity #133 #135]: #137
#142 := [trans #138 #140]: #141
#154 := [monotonicity #142 #151]: #153
#158 := [trans #154 #156]: #157
#161 := [monotonicity #158]: #160
#165 := [trans #161 #163]: #164
#166 := [monotonicity #165]: #121
#169 := [monotonicity #166]: #168
#173 := [trans #169 #171]: #172
#176 := [monotonicity #173]: #175
#180 := [trans #176 #178]: #179
#130 := (iff #30 #129)
#127 := (iff #29 #124)
#125 := (iff #121 #124)
#126 := [rewrite]: #125
#122 := (iff #29 #121)
#119 := (= #27 #118)
#116 := (= #26 #101)
#111 := (ite false 1::Int #101)
#114 := (= #111 #101)
#115 := [rewrite]: #114
#112 := (= #26 #111)
#109 := (= #25 #101)
#104 := (ite false 0::Int #101)
#107 := (= #104 #101)
#108 := [rewrite]: #107
#105 := (= #25 #104)
#102 := (= #24 #101)
#99 := (= #23 -2::Int)
#88 := 2::Int
#93 := (- 2::Int)
#97 := (= #93 -2::Int)
#98 := [rewrite]: #97
#94 := (= #23 #93)
#91 := (= #22 2::Int)
#82 := -3::Int
#79 := -1::Int
#85 := (mod -1::Int -3::Int)
#89 := (= #85 2::Int)
#90 := [rewrite]: #89
#86 := (= #22 #85)
#83 := (= #21 -3::Int)
#84 := [rewrite]: #83
#80 := (= #20 -1::Int)
#81 := [rewrite]: #80
#87 := [monotonicity #81 #84]: #86
#92 := [trans #87 #90]: #91
#95 := [monotonicity #92]: #94
#100 := [trans #95 #98]: #99
#77 := (= #19 1::Int)
#78 := [rewrite]: #77
#75 := (iff #18 #74)
#72 := (iff #17 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#103 := [monotonicity #76 #78 #100]: #102
#69 := (iff #12 false)
#70 := [rewrite]: #69
#106 := [monotonicity #70 #103]: #105
#110 := [trans #106 #108]: #109
#67 := (iff #10 false)
#68 := [rewrite]: #67
#113 := [monotonicity #68 #110]: #112
#117 := [trans #113 #115]: #116
#120 := [monotonicity #117]: #119
#123 := [monotonicity #120]: #122
#128 := [trans #123 #126]: #127
#131 := [monotonicity #128]: #130
#182 := [trans #131 #180]: #181
#66 := [asserted]: #30
[mp #66 #182]: false
unsat
3921706a8683868f2784292da2026eadf56bd286 90 0
#2 := false
decl f3 :: (-> Int S2)
#9 := 0::Int
#24 := (f3 0::Int)
#8 := 3::Int
#17 := (- 3::Int)
#18 := (mod #17 #17)
#19 := (- #18)
#16 := (mod 3::Int 3::Int)
#11 := (< 0::Int 3::Int)
#13 := (< 3::Int 0::Int)
#14 := (and #13 #11)
#12 := (and #11 #11)
#15 := (or #12 #14)
#20 := (ite #15 #16 #19)
#10 := (= 3::Int 0::Int)
#21 := (ite #10 0::Int #20)
#22 := (ite #10 3::Int #21)
#23 := (f3 #22)
#25 := (= #23 #24)
#26 := (not #25)
#126 := (iff #26 false)
#1 := true
#121 := (not true)
#124 := (iff #121 false)
#125 := [rewrite]: #124
#122 := (iff #26 #121)
#119 := (iff #25 true)
#114 := (= #24 #24)
#117 := (iff #114 true)
#118 := [rewrite]: #117
#115 := (iff #25 #114)
#111 := (= #22 0::Int)
#106 := (ite false 3::Int 0::Int)
#109 := (= #106 0::Int)
#110 := [rewrite]: #109
#107 := (= #22 #106)
#104 := (= #21 0::Int)
#99 := (ite false 0::Int 0::Int)
#102 := (= #99 0::Int)
#103 := [rewrite]: #102
#100 := (= #21 #99)
#97 := (= #20 0::Int)
#67 := (and #11 #13)
#70 := (or #11 #67)
#92 := (ite #70 0::Int 0::Int)
#95 := (= #92 0::Int)
#96 := [rewrite]: #95
#93 := (= #20 #92)
#90 := (= #19 0::Int)
#85 := (- 0::Int)
#88 := (= #85 0::Int)
#89 := [rewrite]: #88
#86 := (= #19 #85)
#83 := (= #18 0::Int)
#75 := -3::Int
#78 := (mod -3::Int -3::Int)
#81 := (= #78 0::Int)
#82 := [rewrite]: #81
#79 := (= #18 #78)
#76 := (= #17 -3::Int)
#77 := [rewrite]: #76
#80 := [monotonicity #77 #77]: #79
#84 := [trans #80 #82]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#73 := (= #16 0::Int)
#74 := [rewrite]: #73
#71 := (iff #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#65 := (iff #12 #11)
#66 := [rewrite]: #65
#72 := [monotonicity #66 #69]: #71
#94 := [monotonicity #72 #74 #91]: #93
#98 := [trans #94 #96]: #97
#63 := (iff #10 false)
#64 := [rewrite]: #63
#101 := [monotonicity #64 #98]: #100
#105 := [trans #101 #103]: #104
#108 := [monotonicity #64 #105]: #107
#112 := [trans #108 #110]: #111
#113 := [monotonicity #112]: #25
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#62 := [asserted]: #26
[mp #62 #127]: false
unsat
514d90db39c84cc7bf19d9cbc0eb437cde0db30b 305 0
#2 := false
#8 := 3::Int
decl f3 :: (-> S2 Int)
decl f4 :: S2
#11 := f4
#12 := (f3 f4)
#20 := (mod #12 3::Int)
#690 := (>= #20 3::Int)
#691 := (not #690)
#1 := true
#63 := [true-axiom]: true
#525 := (or false #691)
#673 := [th-lemma arith]: #525
#575 := [unit-resolution #673 #63]: #691
#9 := 0::Int
#81 := -3::Int
#77 := -1::Int
#78 := (* -1::Int #12)
#84 := (mod #78 -3::Int)
#90 := (* -1::Int #84)
#129 := (>= #12 0::Int)
#130 := (not #129)
#116 := (<= #12 0::Int)
#117 := (not #116)
#140 := (or #117 #130)
#143 := (ite #140 #20 #90)
#13 := (= #12 0::Int)
#146 := (ite #13 0::Int #143)
#682 := (* -1::Int #146)
#564 := (+ #20 #682)
#566 := (>= #564 0::Int)
#679 := (= #20 #146)
#412 := (= #143 #146)
#392 := (not #13)
#326 := (= #146 0::Int)
#727 := (not #326)
#717 := (<= #146 0::Int)
#361 := (not #717)
#153 := (>= #146 3::Int)
#22 := (- 3::Int)
#21 := (- #12)
#23 := (mod #21 #22)
#24 := (- #23)
#15 := (< 0::Int 3::Int)
#17 := (< #12 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int #12)
#16 := (and #14 #15)
#19 := (or #16 #18)
#25 := (ite #19 #20 #24)
#26 := (ite #13 0::Int #25)
#10 := (= 3::Int 0::Int)
#27 := (ite #10 #12 #26)
#28 := (< #27 3::Int)
#29 := (not #28)
#165 := (iff #29 #153)
#71 := (and #15 #17)
#74 := (or #16 #71)
#95 := (ite #74 #20 #90)
#68 := (= 0::Int #12)
#98 := (ite #68 0::Int #95)
#108 := (< #98 3::Int)
#111 := (not #108)
#163 := (iff #111 #153)
#152 := (not #153)
#158 := (not #152)
#161 := (iff #158 #153)
#162 := [rewrite]: #161
#159 := (iff #111 #158)
#156 := (iff #108 #152)
#149 := (< #146 3::Int)
#154 := (iff #149 #152)
#155 := [rewrite]: #154
#150 := (iff #108 #149)
#147 := (= #98 #146)
#144 := (= #95 #143)
#141 := (iff #74 #140)
#138 := (iff #71 #130)
#133 := (and true #130)
#136 := (iff #133 #130)
#137 := [rewrite]: #136
#134 := (iff #71 #133)
#131 := (iff #17 #130)
#132 := [rewrite]: #131
#120 := (iff #15 true)
#121 := [rewrite]: #120
#135 := [monotonicity #121 #132]: #134
#139 := [trans #135 #137]: #138
#127 := (iff #16 #117)
#122 := (and #117 true)
#125 := (iff #122 #117)
#126 := [rewrite]: #125
#123 := (iff #16 #122)
#118 := (iff #14 #117)
#119 := [rewrite]: #118
#124 := [monotonicity #119 #121]: #123
#128 := [trans #124 #126]: #127
#142 := [monotonicity #128 #139]: #141
#145 := [monotonicity #142]: #144
#114 := (iff #68 #13)
#115 := [rewrite]: #114
#148 := [monotonicity #115 #145]: #147
#151 := [monotonicity #148]: #150
#157 := [trans #151 #155]: #156
#160 := [monotonicity #157]: #159
#164 := [trans #160 #162]: #163
#112 := (iff #29 #111)
#109 := (iff #28 #108)
#106 := (= #27 #98)
#101 := (ite false #12 #98)
#104 := (= #101 #98)
#105 := [rewrite]: #104
#102 := (= #27 #101)
#99 := (= #26 #98)
#96 := (= #25 #95)
#93 := (= #24 #90)
#87 := (- #84)
#91 := (= #87 #90)
#92 := [rewrite]: #91
#88 := (= #24 #87)
#85 := (= #23 #84)
#82 := (= #22 -3::Int)
#83 := [rewrite]: #82
#79 := (= #21 #78)
#80 := [rewrite]: #79
#86 := [monotonicity #80 #83]: #85
#89 := [monotonicity #86]: #88
#94 := [trans #89 #92]: #93
#75 := (iff #19 #74)
#72 := (iff #18 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#97 := [monotonicity #76 #94]: #96
#69 := (iff #13 #68)
#70 := [rewrite]: #69
#100 := [monotonicity #70 #97]: #99
#66 := (iff #10 false)
#67 := [rewrite]: #66
#103 := [monotonicity #67 #100]: #102
#107 := [trans #103 #105]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#166 := [trans #113 #164]: #165
#65 := [asserted]: #29
#167 := [mp #65 #166]: #153
#724 := (or #361 #152)
#726 := [th-lemma arith farkas 1 1]: #724
#366 := [unit-resolution #726 #167]: #361
#367 := [hypothesis]: #326
#725 := (or #727 #717)
#728 := [th-lemma arith triangle-eq]: #725
#714 := [unit-resolution #728 #367 #366]: false
#715 := [lemma #714]: #727
#522 := (or #392 #326)
#729 := [def-axiom]: #522
#670 := [unit-resolution #729 #715]: #392
#403 := (or #13 #412)
#404 := [def-axiom]: #403
#671 := [unit-resolution #404 #670]: #412
#327 := (= #20 #143)
decl f5 :: (-> Int S2)
#736 := (f5 #12)
#738 := (f3 #736)
#739 := (= #738 0::Int)
#581 := (not #739)
#582 := (iff #392 #581)
#579 := (iff #13 #739)
#570 := (iff #739 #13)
#576 := (= #738 #12)
#559 := (= #736 f4)
#737 := (= f4 #736)
#30 := (:var 0 S2)
#31 := (f3 #30)
#741 := (pattern #31)
#32 := (f5 #31)
#169 := (= #30 #32)
#742 := (forall (vars (?v0 S2)) (:pat #741) #169)
#172 := (forall (vars (?v0 S2)) #169)
#743 := (iff #172 #742)
#745 := (iff #742 #742)
#746 := [rewrite]: #745
#744 := [rewrite]: #743
#747 := [trans #744 #746]: #743
#266 := (~ #172 #172)
#264 := (~ #169 #169)
#265 := [refl]: #264
#267 := [nnf-pos #265]: #266
#33 := (= #32 #30)
#34 := (forall (vars (?v0 S2)) #33)
#173 := (iff #34 #172)
#170 := (iff #33 #169)
#171 := [rewrite]: #170
#174 := [quant-intro #171]: #173
#168 := [asserted]: #34
#177 := [mp #168 #174]: #172
#256 := [mp~ #177 #267]: #172
#748 := [mp #256 #747]: #742
#734 := (not #742)
#740 := (or #734 #737)
#730 := [quant-inst #11]: #740
#674 := [unit-resolution #730 #748]: #737
#574 := [symm #674]: #559
#577 := [monotonicity #574]: #576
#578 := [monotonicity #577]: #570
#580 := [symm #578]: #579
#675 := [monotonicity #580]: #582
#672 := [mp #670 #675]: #581
#395 := (or #129 #739)
#35 := (:var 0 Int)
#37 := (f5 #35)
#749 := (pattern #37)
#193 := (>= #35 0::Int)
#38 := (f3 #37)
#43 := (= #38 0::Int)
#242 := (or #43 #193)
#756 := (forall (vars (?v0 Int)) (:pat #749) #242)
#247 := (forall (vars (?v0 Int)) #242)
#759 := (iff #247 #756)
#757 := (iff #242 #242)
#758 := [refl]: #757
#760 := [quant-intro #758]: #759
#260 := (~ #247 #247)
#268 := (~ #242 #242)
#269 := [refl]: #268
#261 := [nnf-pos #269]: #260
#42 := (< #35 0::Int)
#44 := (implies #42 #43)
#45 := (forall (vars (?v0 Int)) #44)
#250 := (iff #45 #247)
#213 := (= 0::Int #38)
#219 := (not #42)
#220 := (or #219 #213)
#225 := (forall (vars (?v0 Int)) #220)
#248 := (iff #225 #247)
#245 := (iff #220 #242)
#239 := (or #193 #43)
#243 := (iff #239 #242)
#244 := [rewrite]: #243
#240 := (iff #220 #239)
#237 := (iff #213 #43)
#238 := [rewrite]: #237
#235 := (iff #219 #193)
#195 := (not #193)
#230 := (not #195)
#233 := (iff #230 #193)
#234 := [rewrite]: #233
#231 := (iff #219 #230)
#228 := (iff #42 #195)
#229 := [rewrite]: #228
#232 := [monotonicity #229]: #231
#236 := [trans #232 #234]: #235
#241 := [monotonicity #236 #238]: #240
#246 := [trans #241 #244]: #245
#249 := [quant-intro #246]: #248
#226 := (iff #45 #225)
#223 := (iff #44 #220)
#216 := (implies #42 #213)
#221 := (iff #216 #220)
#222 := [rewrite]: #221
#217 := (iff #44 #216)
#214 := (iff #43 #213)
#215 := [rewrite]: #214
#218 := [monotonicity #215]: #217
#224 := [trans #218 #222]: #223
#227 := [quant-intro #224]: #226
#251 := [trans #227 #249]: #250
#212 := [asserted]: #45
#252 := [mp #212 #251]: #247
#270 := [mp~ #252 #261]: #247
#761 := [mp #270 #760]: #756
#732 := (not #756)
#375 := (or #732 #129 #739)
#390 := (or #739 #129)
#716 := (or #732 #390)
#720 := (iff #716 #375)
#380 := (or #732 #395)
#718 := (iff #380 #375)
#719 := [rewrite]: #718
#381 := (iff #716 #380)
#731 := (iff #390 #395)
#391 := [rewrite]: #731
#382 := [monotonicity #391]: #381
#721 := [trans #382 #719]: #720
#379 := [quant-inst #12]: #716
#722 := [mp #379 #721]: #375
#676 := [unit-resolution #722 #761]: #395
#663 := [unit-resolution #676 #672]: #129
#665 := (or #13 #117 #130)
#657 := [th-lemma arith triangle-eq]: #665
#654 := [unit-resolution #657 #670]: #140
#656 := [unit-resolution #654 #663]: #117
#414 := (or #140 #116)
#405 := [def-axiom]: #414
#666 := [unit-resolution #405 #656]: #140
#345 := (not #140)
#419 := (or #345 #327)
#398 := [def-axiom]: #419
#667 := [unit-resolution #398 #666]: #327
#668 := [trans #667 #671]: #679
#664 := (not #679)
#669 := (or #664 #566)
#658 := [th-lemma arith triangle-eq]: #669
#659 := [unit-resolution #658 #668]: #566
[th-lemma arith farkas -1 -1 1 #167 #659 #575]: false
unsat
2855a1e15b1d7788a0afdba64d4d2bd112ea0f3b 560 0
#2 := false
#9 := 0::Int
decl f4 :: (-> S2 Int)
decl f5 :: S2
#11 := f5
#12 := (f4 f5)
#141 := (<= #12 0::Int)
#142 := (not #141)
#8 := 3::Int
#180 := (>= #12 3::Int)
#654 := 1::Int
#706 := (div #12 3::Int)
#555 := -2::Int
#565 := (* -2::Int #706)
#20 := (mod #12 3::Int)
#80 := -1::Int
#603 := (* -1::Int #20)
#566 := (+ #603 #565)
#549 := (+ #12 #566)
#567 := (>= #549 1::Int)
#84 := -3::Int
#605 := (* -3::Int #706)
#606 := (+ #603 #605)
#599 := (+ #12 #606)
#704 := (>= #599 0::Int)
#588 := (= #599 0::Int)
#1 := true
#66 := [true-axiom]: true
#629 := (or false #588)
#634 := [th-lemma arith]: #629
#614 := [unit-resolution #634 #66]: #588
#560 := (not #588)
#582 := (or #560 #704)
#583 := [th-lemma arith triangle-eq]: #582
#584 := [unit-resolution #583 #614]: #704
#658 := (+ #12 #603)
#659 := (<= #658 0::Int)
#540 := (not #659)
#657 := (= #12 #20)
#627 := (not #657)
decl f3 :: (-> Int S2)
#81 := (* -1::Int #12)
#87 := (mod #81 -3::Int)
#93 := (* -1::Int #87)
#154 := (>= #12 0::Int)
#155 := (not #154)
#165 := (or #142 #155)
#168 := (ite #165 #20 #93)
#13 := (= #12 0::Int)
#171 := (ite #13 0::Int #168)
#174 := (f3 #171)
#177 := (= f5 #174)
#769 := (not #177)
#181 := (not #180)
#548 := [hypothesis]: #181
#424 := (or #769 #180)
#191 := (iff #177 #180)
#30 := (< #12 3::Int)
#22 := (- 3::Int)
#21 := (- #12)
#23 := (mod #21 #22)
#24 := (- #23)
#15 := (< 0::Int 3::Int)
#17 := (< #12 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int #12)
#16 := (and #14 #15)
#19 := (or #16 #18)
#25 := (ite #19 #20 #24)
#26 := (ite #13 0::Int #25)
#10 := (= 3::Int 0::Int)
#27 := (ite #10 #12 #26)
#28 := (f3 #27)
#29 := (= #28 f5)
#31 := (iff #29 #30)
#32 := (not #31)
#194 := (iff #32 #191)
#133 := (not #30)
#74 := (and #15 #17)
#77 := (or #16 #74)
#98 := (ite #77 #20 #93)
#71 := (= 0::Int #12)
#101 := (ite #71 0::Int #98)
#111 := (f3 #101)
#117 := (= f5 #111)
#134 := (iff #117 #133)
#192 := (iff #134 #191)
#189 := (iff #133 #180)
#184 := (not #181)
#187 := (iff #184 #180)
#188 := [rewrite]: #187
#185 := (iff #133 #184)
#182 := (iff #30 #181)
#183 := [rewrite]: #182
#186 := [monotonicity #183]: #185
#190 := [trans #186 #188]: #189
#178 := (iff #117 #177)
#175 := (= #111 #174)
#172 := (= #101 #171)
#169 := (= #98 #168)
#166 := (iff #77 #165)
#163 := (iff #74 #155)
#158 := (and true #155)
#161 := (iff #158 #155)
#162 := [rewrite]: #161
#159 := (iff #74 #158)
#156 := (iff #17 #155)
#157 := [rewrite]: #156
#145 := (iff #15 true)
#146 := [rewrite]: #145
#160 := [monotonicity #146 #157]: #159
#164 := [trans #160 #162]: #163
#152 := (iff #16 #142)
#147 := (and #142 true)
#150 := (iff #147 #142)
#151 := [rewrite]: #150
#148 := (iff #16 #147)
#143 := (iff #14 #142)
#144 := [rewrite]: #143
#149 := [monotonicity #144 #146]: #148
#153 := [trans #149 #151]: #152
#167 := [monotonicity #153 #164]: #166
#170 := [monotonicity #167]: #169
#139 := (iff #71 #13)
#140 := [rewrite]: #139
#173 := [monotonicity #140 #170]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#193 := [monotonicity #179 #190]: #192
#137 := (iff #32 #134)
#125 := (iff #30 #117)
#130 := (not #125)
#135 := (iff #130 #134)
#136 := [rewrite]: #135
#131 := (iff #32 #130)
#128 := (iff #31 #125)
#122 := (iff #117 #30)
#126 := (iff #122 #125)
#127 := [rewrite]: #126
#123 := (iff #31 #122)
#120 := (iff #29 #117)
#114 := (= #111 f5)
#118 := (iff #114 #117)
#119 := [rewrite]: #118
#115 := (iff #29 #114)
#112 := (= #28 #111)
#109 := (= #27 #101)
#104 := (ite false #12 #101)
#107 := (= #104 #101)
#108 := [rewrite]: #107
#105 := (= #27 #104)
#102 := (= #26 #101)
#99 := (= #25 #98)
#96 := (= #24 #93)
#90 := (- #87)
#94 := (= #90 #93)
#95 := [rewrite]: #94
#91 := (= #24 #90)
#88 := (= #23 #87)
#85 := (= #22 -3::Int)
#86 := [rewrite]: #85
#82 := (= #21 #81)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#92 := [monotonicity #89]: #91
#97 := [trans #92 #95]: #96
#78 := (iff #19 #77)
#75 := (iff #18 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#100 := [monotonicity #79 #97]: #99
#72 := (iff #13 #71)
#73 := [rewrite]: #72
#103 := [monotonicity #73 #100]: #102
#69 := (iff #10 false)
#70 := [rewrite]: #69
#106 := [monotonicity #70 #103]: #105
#110 := [trans #106 #108]: #109
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#121 := [trans #116 #119]: #120
#124 := [monotonicity #121]: #123
#129 := [trans #124 #127]: #128
#132 := [monotonicity #129]: #131
#138 := [trans #132 #136]: #137
#195 := [trans #138 #193]: #194
#68 := [asserted]: #32
#196 := [mp #68 #195]: #191
#765 := (not #191)
#759 := (or #769 #180 #765)
#419 := [def-axiom]: #759
#760 := [unit-resolution #419 #196]: #424
#528 := [unit-resolution #760 #548]: #769
#628 := (or #627 #177)
#420 := (f3 #12)
#720 := (= #420 #174)
#713 := (= #174 #420)
#717 := (= #171 #12)
#617 := (= #20 #12)
#641 := [hypothesis]: #657
#618 := [symm #641]: #617
#619 := (= #171 #20)
#638 := (= #168 #20)
#356 := (= #20 #168)
#733 := (f4 #420)
#734 := (= #733 0::Int)
#648 := (not #734)
#421 := (not #13)
#649 := (iff #421 #648)
#645 := (iff #13 #734)
#656 := (iff #734 #13)
#665 := (= #733 #12)
#663 := (= #420 f5)
#761 := (= f5 #420)
#33 := (:var 0 S2)
#34 := (f4 #33)
#770 := (pattern #34)
#35 := (f3 #34)
#198 := (= #33 #35)
#771 := (forall (vars (?v0 S2)) (:pat #770) #198)
#201 := (forall (vars (?v0 S2)) #198)
#772 := (iff #201 #771)
#774 := (iff #771 #771)
#775 := [rewrite]: #774
#773 := [rewrite]: #772
#776 := [trans #773 #775]: #772
#295 := (~ #201 #201)
#293 := (~ #198 #198)
#294 := [refl]: #293
#296 := [nnf-pos #294]: #295
#36 := (= #35 #33)
#37 := (forall (vars (?v0 S2)) #36)
#202 := (iff #37 #201)
#199 := (iff #36 #198)
#200 := [rewrite]: #199
#203 := [quant-intro #200]: #202
#197 := [asserted]: #37
#206 := [mp #197 #203]: #201
#285 := [mp~ #206 #296]: #201
#777 := [mp #285 #776]: #771
#408 := (not #771)
#409 := (or #408 #761)
#410 := [quant-inst #11]: #409
#712 := [unit-resolution #410 #777]: #761
#664 := [symm #712]: #663
#666 := [monotonicity #664]: #665
#667 := [monotonicity #666]: #656
#646 := [symm #667]: #645
#650 := [monotonicity #646]: #649
#572 := [hypothesis]: #769
#552 := (or #421 #177)
#573 := [hypothesis]: #13
#716 := [symm #573]: #71
#355 := (= #171 0::Int)
#551 := (or #421 #355)
#758 := [def-axiom]: #551
#715 := [unit-resolution #758 #573]: #355
#718 := [trans #715 #716]: #717
#719 := [monotonicity #718]: #713
#714 := [symm #719]: #720
#721 := [trans #712 #714]: #177
#550 := [unit-resolution #572 #721]: false
#553 := [lemma #550]: #552
#661 := [unit-resolution #553 #572]: #421
#651 := [mp #661 #650]: #648
#731 := (or #154 #734)
#38 := (:var 0 Int)
#40 := (f3 #38)
#778 := (pattern #40)
#222 := (>= #38 0::Int)
#41 := (f4 #40)
#46 := (= #41 0::Int)
#271 := (or #46 #222)
#785 := (forall (vars (?v0 Int)) (:pat #778) #271)
#276 := (forall (vars (?v0 Int)) #271)
#788 := (iff #276 #785)
#786 := (iff #271 #271)
#787 := [refl]: #786
#789 := [quant-intro #787]: #788
#289 := (~ #276 #276)
#297 := (~ #271 #271)
#298 := [refl]: #297
#290 := [nnf-pos #298]: #289
#45 := (< #38 0::Int)
#47 := (implies #45 #46)
#48 := (forall (vars (?v0 Int)) #47)
#279 := (iff #48 #276)
#242 := (= 0::Int #41)
#248 := (not #45)
#249 := (or #248 #242)
#254 := (forall (vars (?v0 Int)) #249)
#277 := (iff #254 #276)
#274 := (iff #249 #271)
#268 := (or #222 #46)
#272 := (iff #268 #271)
#273 := [rewrite]: #272
#269 := (iff #249 #268)
#266 := (iff #242 #46)
#267 := [rewrite]: #266
#264 := (iff #248 #222)
#224 := (not #222)
#259 := (not #224)
#262 := (iff #259 #222)
#263 := [rewrite]: #262
#260 := (iff #248 #259)
#257 := (iff #45 #224)
#258 := [rewrite]: #257
#261 := [monotonicity #258]: #260
#265 := [trans #261 #263]: #264
#270 := [monotonicity #265 #267]: #269
#275 := [trans #270 #273]: #274
#278 := [quant-intro #275]: #277
#255 := (iff #48 #254)
#252 := (iff #47 #249)
#245 := (implies #45 #242)
#250 := (iff #245 #249)
#251 := [rewrite]: #250
#246 := (iff #47 #245)
#243 := (iff #46 #242)
#244 := [rewrite]: #243
#247 := [monotonicity #244]: #246
#253 := [trans #247 #251]: #252
#256 := [quant-intro #253]: #255
#280 := [trans #256 #278]: #279
#241 := [asserted]: #48
#281 := [mp #241 #280]: #276
#299 := [mp~ #281 #290]: #276
#790 := [mp #299 #789]: #785
#739 := (not #785)
#736 := (or #739 #154 #734)
#449 := (or #734 #154)
#725 := (or #739 #449)
#724 := (iff #725 #736)
#727 := (or #739 #731)
#728 := (iff #727 #736)
#729 := [rewrite]: #728
#722 := (iff #725 #727)
#735 := (iff #449 #731)
#732 := [rewrite]: #735
#723 := [monotonicity #732]: #722
#730 := [trans #723 #729]: #724
#726 := [quant-inst #12]: #725
#571 := [mp #726 #730]: #736
#652 := [unit-resolution #571 #790]: #731
#647 := [unit-resolution #652 #651]: #154
#653 := (or #13 #142 #155)
#639 := [th-lemma arith triangle-eq]: #653
#635 := [unit-resolution #639 #661]: #165
#636 := [unit-resolution #635 #647]: #142
#443 := (or #165 #141)
#434 := [def-axiom]: #443
#637 := [unit-resolution #434 #636]: #165
#374 := (not #165)
#448 := (or #374 #356)
#427 := [def-axiom]: #448
#640 := [unit-resolution #427 #637]: #356
#644 := [symm #640]: #638
#642 := (= #171 #168)
#441 := (= #168 #171)
#432 := (or #13 #441)
#433 := [def-axiom]: #432
#662 := [unit-resolution #433 #661]: #441
#643 := [symm #662]: #642
#512 := [trans #643 #644]: #619
#623 := [trans #512 #618]: #717
#624 := [monotonicity #623]: #713
#625 := [symm #624]: #720
#630 := [trans #712 #625]: #177
#626 := [unit-resolution #572 #630]: false
#631 := [lemma #626]: #628
#546 := [unit-resolution #631 #528]: #627
#660 := (>= #658 0::Int)
#578 := (* -1::Int #706)
#579 := (+ #603 #578)
#580 := (+ #12 #579)
#581 := (>= #580 0::Int)
#545 := [unit-resolution #553 #528]: #421
#541 := [mp #545 #650]: #648
#532 := [unit-resolution #652 #541]: #154
#534 := [unit-resolution #639 #545]: #165
#535 := [unit-resolution #534 #532]: #142
#570 := (or #581 #141)
#574 := (not #581)
#577 := [hypothesis]: #574
#691 := (>= #20 3::Int)
#675 := (not #691)
#616 := (or false #675)
#622 := [th-lemma arith]: #616
#590 := [unit-resolution #622 #66]: #675
#632 := [hypothesis]: #142
#585 := [th-lemma arith farkas -2/3 2/3 -1/3 1 #632 #590 #584 #577]: false
#586 := [lemma #585]: #570
#533 := [unit-resolution #586 #535]: #581
#575 := (or #574 #660)
#568 := (not #660)
#569 := [hypothesis]: #568
#611 := (<= #599 0::Int)
#615 := (or #560 #611)
#596 := [th-lemma arith triangle-eq]: #615
#620 := [unit-resolution #596 #614]: #611
#592 := [hypothesis]: #581
#613 := [th-lemma arith farkas -3/2 1/2 1 #592 #620 #569]: false
#576 := [lemma #613]: #575
#536 := [unit-resolution #576 #533]: #660
#524 := (or #657 #540 #568)
#527 := [th-lemma arith triangle-eq]: #524
#529 := [unit-resolution #527 #536 #546]: #540
#530 := [th-lemma arith #529 #584]: #567
#562 := (not #567)
#563 := (or #562 #180)
#701 := (>= #20 0::Int)
#558 := (or false #701)
#559 := [th-lemma arith]: #558
#557 := [unit-resolution #559 #66]: #701
#547 := [hypothesis]: #567
#561 := [th-lemma arith farkas -1 3 -2 1 #548 #547 #620 #557]: false
#564 := [lemma #561]: #563
#525 := [unit-resolution #564 #548]: #562
#526 := [unit-resolution #525 #530]: false
#531 := [lemma #526]: #180
#501 := (or #181 #142)
#502 := [th-lemma arith farkas 1 1]: #501
#503 := [unit-resolution #502 #531]: #142
#411 := (f4 #174)
#747 := (= #171 #411)
#491 := (not #747)
#476 := (iff #627 #491)
#490 := (iff #657 #747)
#485 := (= #411 #171)
#488 := (iff #485 #747)
#489 := [commutativity]: #488
#486 := (iff #657 #485)
#671 := (= #20 #171)
#521 := [hypothesis]: #421
#500 := [unit-resolution #433 #521]: #441
#504 := [unit-resolution #434 #503]: #165
#493 := [unit-resolution #427 #504]: #356
#505 := [trans #493 #500]: #671
#482 := (= #12 #411)
#517 := (= #411 #12)
#513 := (= #174 f5)
#768 := (or #177 #181)
#766 := (or #177 #181 #765)
#767 := [def-axiom]: #766
#763 := [unit-resolution #767 #196]: #768
#511 := [unit-resolution #763 #531]: #177
#514 := [symm #511]: #513
#518 := [monotonicity #514]: #517
#484 := [symm #518]: #482
#487 := [monotonicity #484 #505]: #486
#483 := [trans #487 #489]: #490
#477 := [monotonicity #483]: #476
#494 := (or #540 #181 #691)
#495 := [th-lemma arith assign-bounds -1 1]: #494
#496 := [unit-resolution #495 #590 #531]: #540
#497 := (or #627 #659)
#498 := [th-lemma arith triangle-eq]: #497
#499 := [unit-resolution #498 #496]: #627
#478 := [mp #499 #477]: #491
#404 := (>= #171 0::Int)
#466 := (= #411 0::Int)
#519 := (not #466)
#520 := (iff #421 #519)
#523 := (iff #13 #466)
#522 := (iff #466 #13)
#515 := [monotonicity #518]: #522
#516 := [symm #515]: #523
#506 := [monotonicity #516]: #520
#508 := [mp #521 #506]: #519
#468 := (or #404 #466)
#740 := (or #739 #404 #466)
#467 := (or #466 #404)
#462 := (or #739 #467)
#453 := (iff #462 #740)
#737 := (or #739 #468)
#742 := (iff #737 #740)
#452 := [rewrite]: #742
#741 := (iff #462 #737)
#469 := (iff #467 #468)
#362 := [rewrite]: #469
#738 := [monotonicity #362]: #741
#454 := [trans #738 #452]: #453
#463 := [quant-inst #171]: #462
#455 := [mp #463 #454]: #740
#509 := [unit-resolution #455 #790]: #468
#507 := [unit-resolution #509 #508]: #404
#745 := (not #404)
#749 := (or #745 #747)
#205 := (= #38 #41)
#230 := (or #205 #224)
#779 := (forall (vars (?v0 Int)) (:pat #778) #230)
#235 := (forall (vars (?v0 Int)) #230)
#782 := (iff #235 #779)
#780 := (iff #230 #230)
#781 := [refl]: #780
#783 := [quant-intro #781]: #782
#287 := (~ #235 #235)
#286 := (~ #230 #230)
#283 := [refl]: #286
#288 := [nnf-pos #283]: #287
#42 := (= #41 #38)
#39 := (<= 0::Int #38)
#43 := (implies #39 #42)
#44 := (forall (vars (?v0 Int)) #43)
#238 := (iff #44 #235)
#212 := (not #39)
#213 := (or #212 #205)
#218 := (forall (vars (?v0 Int)) #213)
#236 := (iff #218 #235)
#233 := (iff #213 #230)
#227 := (or #224 #205)
#231 := (iff #227 #230)
#232 := [rewrite]: #231
#228 := (iff #213 #227)
#225 := (iff #212 #224)
#221 := (iff #39 #222)
#223 := [rewrite]: #221
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#234 := [trans #229 #232]: #233
#237 := [quant-intro #234]: #236
#219 := (iff #44 #218)
#216 := (iff #43 #213)
#209 := (implies #39 #205)
#214 := (iff #209 #213)
#215 := [rewrite]: #214
#210 := (iff #43 #209)
#207 := (iff #42 #205)
#208 := [rewrite]: #207
#211 := [monotonicity #208]: #210
#217 := [trans #211 #215]: #216
#220 := [quant-intro #217]: #219
#239 := [trans #220 #237]: #238
#204 := [asserted]: #44
#240 := [mp #204 #239]: #235
#284 := [mp~ #240 #288]: #235
#784 := [mp #284 #783]: #779
#746 := (not #779)
#752 := (or #746 #745 #747)
#748 := (or #747 #745)
#390 := (or #746 #748)
#757 := (iff #390 #752)
#755 := (or #746 #749)
#756 := (iff #755 #752)
#754 := [rewrite]: #756
#395 := (iff #390 #755)
#750 := (iff #748 #749)
#751 := [rewrite]: #750
#396 := [monotonicity #751]: #395
#743 := [trans #396 #754]: #757
#753 := [quant-inst #171]: #390
#744 := [mp #753 #743]: #752
#510 := [unit-resolution #744 #784]: #749
#492 := [unit-resolution #510 #507]: #747
#480 := [unit-resolution #492 #478]: false
#479 := [lemma #480]: #13
#681 := (or #421 #141)
#677 := [th-lemma arith triangle-eq]: #681
[unit-resolution #677 #479 #503]: false
unsat
a73683b8b391e3ad74189bec3a2bead06af3f8bd 414 0
#2 := false
#10 := 0::Int
decl f5 :: (-> S2 Int)
decl f3 :: S2
#8 := f3
#9 := (f5 f3)
#168 := (>= #9 0::Int)
#169 := (not #168)
#155 := (<= #9 0::Int)
#156 := (not #155)
#11 := (= #9 0::Int)
#191 := (or #11 #156 #169)
#776 := (not #191)
decl f4 :: (-> Int S2)
#89 := -1::Int
#90 := (* -1::Int #9)
#113 := (mod #90 -1::Int)
#119 := (* -1::Int #113)
#196 := (ite #191 0::Int #119)
#95 := (div #90 -1::Int)
#12 := 1::Int
#21 := (div #9 1::Int)
#179 := (or #156 #169)
#182 := (ite #179 #21 #95)
#185 := (ite #11 0::Int #182)
#199 := (+ #185 #196)
#202 := (f4 #199)
#205 := (= f3 #202)
#426 := (f4 #9)
#715 := (= #426 #202)
#718 := (= #202 #426)
#610 := (= #199 #9)
#628 := (= #185 #9)
#614 := (= #9 #185)
#706 := (* -1::Int #21)
#700 := (+ #9 #706)
#695 := (<= #700 0::Int)
#705 := (= #700 0::Int)
#1 := true
#71 := [true-axiom]: true
#665 := (or false #705)
#666 := [th-lemma arith]: #665
#667 := [unit-resolution #666 #71]: #705
#668 := (not #705)
#663 := (or #668 #695)
#669 := [th-lemma arith triangle-eq]: #663
#655 := [unit-resolution #669 #667]: #695
#696 := (>= #700 0::Int)
#651 := (or #668 #696)
#652 := [th-lemma arith triangle-eq]: #651
#653 := [unit-resolution #652 #667]: #696
#683 := (* -1::Int #185)
#661 := (+ #21 #683)
#662 := (<= #661 0::Int)
#672 := (= #21 #185)
#457 := (= #182 #185)
#567 := (not #11)
#735 := (<= #196 0::Int)
#782 := (= #196 0::Int)
#656 := [hypothesis]: #191
#420 := (or #776 #782)
#761 := [def-axiom]: #420
#657 := [unit-resolution #761 #656]: #782
#658 := (not #782)
#659 := (or #658 #735)
#654 := [th-lemma arith triangle-eq]: #659
#660 := [unit-resolution #654 #657]: #735
#736 := (>= #196 0::Int)
#633 := (or #658 #736)
#634 := [th-lemma arith triangle-eq]: #633
#635 := [unit-resolution #634 #657]: #736
#621 := (not #735)
#619 := (not #736)
#622 := (or #567 #619 #621)
#726 := (= 0::Int #9)
#730 := [hypothesis]: #11
#724 := [symm #730]: #726
#727 := (= #199 0::Int)
#372 := (= #185 0::Int)
#774 := (or #567 #372)
#448 := [def-axiom]: #774
#737 := [unit-resolution #448 #730]: #372
#723 := (= #199 #185)
#569 := (= #185 #199)
#566 := [hypothesis]: #735
#568 := [hypothesis]: #736
#722 := [th-lemma arith eq-propagate -1 -1 #568 #566]: #569
#725 := [symm #722]: #723
#609 := [trans #725 #737]: #727
#611 := [trans #609 #724]: #610
#620 := [monotonicity #611]: #718
#716 := [symm #620]: #715
#427 := (= f3 #426)
#38 := (:var 0 S2)
#39 := (f5 #38)
#786 := (pattern #39)
#40 := (f4 #39)
#215 := (= #38 #40)
#787 := (forall (vars (?v0 S2)) (:pat #786) #215)
#218 := (forall (vars (?v0 S2)) #215)
#788 := (iff #218 #787)
#790 := (iff #787 #787)
#791 := [rewrite]: #790
#789 := [rewrite]: #788
#792 := [trans #789 #791]: #788
#312 := (~ #218 #218)
#310 := (~ #215 #215)
#311 := [refl]: #310
#313 := [nnf-pos #311]: #312
#41 := (= #40 #38)
#42 := (forall (vars (?v0 S2)) #41)
#219 := (iff #42 #218)
#216 := (iff #41 #215)
#217 := [rewrite]: #216
#220 := [quant-intro #217]: #219
#214 := [asserted]: #42
#223 := [mp #214 #220]: #218
#302 := [mp~ #223 #313]: #218
#793 := [mp #302 #792]: #787
#765 := (not #787)
#766 := (or #765 #427)
#767 := [quant-inst #8]: #766
#570 := [unit-resolution #767 #793]: #427
#719 := [trans #570 #716]: #205
#208 := (not #205)
#23 := (- 1::Int)
#22 := (- #9)
#29 := (mod #22 #23)
#30 := (- #29)
#28 := (mod #9 1::Int)
#16 := (< 0::Int 1::Int)
#18 := (< #9 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int #9)
#17 := (and #15 #16)
#20 := (or #17 #19)
#31 := (ite #20 #28 #30)
#32 := (ite #11 0::Int #31)
#13 := (= 1::Int 0::Int)
#33 := (ite #13 #9 #32)
#24 := (div #22 #23)
#25 := (ite #20 #21 #24)
#14 := (or #11 #13)
#26 := (ite #14 0::Int #25)
#27 := (* #26 1::Int)
#34 := (+ #27 #33)
#35 := (f4 #34)
#36 := (= f3 #35)
#37 := (not #36)
#211 := (iff #37 #208)
#83 := (and #16 #18)
#86 := (or #17 #83)
#130 := (or #11 #86)
#131 := (ite #130 0::Int #119)
#98 := (ite #86 #21 #95)
#101 := (ite #11 0::Int #98)
#143 := (+ #101 #131)
#146 := (f4 #143)
#149 := (= f3 #146)
#152 := (not #149)
#209 := (iff #152 #208)
#206 := (iff #149 #205)
#203 := (= #146 #202)
#200 := (= #143 #199)
#197 := (= #131 #196)
#194 := (iff #130 #191)
#188 := (or #11 #179)
#192 := (iff #188 #191)
#193 := [rewrite]: #192
#189 := (iff #130 #188)
#180 := (iff #86 #179)
#177 := (iff #83 #169)
#172 := (and true #169)
#175 := (iff #172 #169)
#176 := [rewrite]: #175
#173 := (iff #83 #172)
#170 := (iff #18 #169)
#171 := [rewrite]: #170
#159 := (iff #16 true)
#160 := [rewrite]: #159
#174 := [monotonicity #160 #171]: #173
#178 := [trans #174 #176]: #177
#166 := (iff #17 #156)
#161 := (and #156 true)
#164 := (iff #161 #156)
#165 := [rewrite]: #164
#162 := (iff #17 #161)
#157 := (iff #15 #156)
#158 := [rewrite]: #157
#163 := [monotonicity #158 #160]: #162
#167 := [trans #163 #165]: #166
#181 := [monotonicity #167 #178]: #180
#190 := [monotonicity #181]: #189
#195 := [trans #190 #193]: #194
#198 := [monotonicity #195]: #197
#186 := (= #101 #185)
#183 := (= #98 #182)
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#201 := [monotonicity #187 #198]: #200
#204 := [monotonicity #201]: #203
#207 := [monotonicity #204]: #206
#210 := [monotonicity #207]: #209
#153 := (iff #37 #152)
#150 := (iff #36 #149)
#147 := (= #35 #146)
#144 := (= #34 #143)
#141 := (= #33 #131)
#136 := (ite false #9 #131)
#139 := (= #136 #131)
#140 := [rewrite]: #139
#137 := (= #33 #136)
#134 := (= #32 #131)
#124 := (ite #86 0::Int #119)
#127 := (ite #11 0::Int #124)
#132 := (= #127 #131)
#133 := [rewrite]: #132
#128 := (= #32 #127)
#125 := (= #31 #124)
#122 := (= #30 #119)
#116 := (- #113)
#120 := (= #116 #119)
#121 := [rewrite]: #120
#117 := (= #30 #116)
#114 := (= #29 #113)
#93 := (= #23 -1::Int)
#94 := [rewrite]: #93
#91 := (= #22 #90)
#92 := [rewrite]: #91
#115 := [monotonicity #92 #94]: #114
#118 := [monotonicity #115]: #117
#123 := [trans #118 #121]: #122
#111 := (= #28 0::Int)
#112 := [rewrite]: #111
#87 := (iff #20 #86)
#84 := (iff #19 #83)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#126 := [monotonicity #88 #112 #123]: #125
#129 := [monotonicity #126]: #128
#135 := [trans #129 #133]: #134
#74 := (iff #13 false)
#75 := [rewrite]: #74
#138 := [monotonicity #75 #135]: #137
#142 := [trans #138 #140]: #141
#109 := (= #27 #101)
#104 := (* #101 1::Int)
#107 := (= #104 #101)
#108 := [rewrite]: #107
#105 := (= #27 #104)
#102 := (= #26 #101)
#99 := (= #25 #98)
#96 := (= #24 #95)
#97 := [monotonicity #92 #94]: #96
#100 := [monotonicity #88 #97]: #99
#81 := (iff #14 #11)
#76 := (or #11 false)
#79 := (iff #76 #11)
#80 := [rewrite]: #79
#77 := (iff #14 #76)
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#103 := [monotonicity #82 #100]: #102
#106 := [monotonicity #103]: #105
#110 := [trans #106 #108]: #109
#145 := [monotonicity #110 #142]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [monotonicity #151]: #153
#212 := [trans #154 #210]: #211
#73 := [asserted]: #37
#213 := [mp #73 #212]: #208
#604 := [unit-resolution #213 #719]: false
#615 := [lemma #604]: #622
#528 := [unit-resolution #615 #635 #660]: #567
#449 := (or #11 #457)
#781 := [def-axiom]: #449
#639 := [unit-resolution #781 #528]: #457
#373 := (= #21 #182)
#471 := (f5 #426)
#749 := (= #471 0::Int)
#649 := (not #749)
#645 := (iff #567 #649)
#647 := (iff #11 #749)
#643 := (iff #749 #11)
#646 := (= #471 #9)
#640 := (= #426 f3)
#641 := [symm #570]: #640
#642 := [monotonicity #641]: #646
#644 := [monotonicity #642]: #643
#648 := [symm #644]: #647
#650 := [monotonicity #648]: #645
#630 := [mp #528 #650]: #649
#739 := (or #168 #749)
#43 := (:var 0 Int)
#45 := (f4 #43)
#794 := (pattern #45)
#239 := (>= #43 0::Int)
#46 := (f5 #45)
#51 := (= #46 0::Int)
#288 := (or #51 #239)
#801 := (forall (vars (?v0 Int)) (:pat #794) #288)
#293 := (forall (vars (?v0 Int)) #288)
#804 := (iff #293 #801)
#802 := (iff #288 #288)
#803 := [refl]: #802
#805 := [quant-intro #803]: #804
#306 := (~ #293 #293)
#314 := (~ #288 #288)
#315 := [refl]: #314
#307 := [nnf-pos #315]: #306
#50 := (< #43 0::Int)
#52 := (implies #50 #51)
#53 := (forall (vars (?v0 Int)) #52)
#296 := (iff #53 #293)
#259 := (= 0::Int #46)
#265 := (not #50)
#266 := (or #265 #259)
#271 := (forall (vars (?v0 Int)) #266)
#294 := (iff #271 #293)
#291 := (iff #266 #288)
#285 := (or #239 #51)
#289 := (iff #285 #288)
#290 := [rewrite]: #289
#286 := (iff #266 #285)
#283 := (iff #259 #51)
#284 := [rewrite]: #283
#281 := (iff #265 #239)
#241 := (not #239)
#276 := (not #241)
#279 := (iff #276 #239)
#280 := [rewrite]: #279
#277 := (iff #265 #276)
#274 := (iff #50 #241)
#275 := [rewrite]: #274
#278 := [monotonicity #275]: #277
#282 := [trans #278 #280]: #281
#287 := [monotonicity #282 #284]: #286
#292 := [trans #287 #290]: #291
#295 := [quant-intro #292]: #294
#272 := (iff #53 #271)
#269 := (iff #52 #266)
#262 := (implies #50 #259)
#267 := (iff #262 #266)
#268 := [rewrite]: #267
#263 := (iff #52 #262)
#260 := (iff #51 #259)
#261 := [rewrite]: #260
#264 := [monotonicity #261]: #263
#270 := [trans #264 #268]: #269
#273 := [quant-intro #270]: #272
#297 := [trans #273 #295]: #296
#258 := [asserted]: #53
#298 := [mp #258 #297]: #293
#316 := [mp~ #298 #307]: #293
#806 := [mp #316 #805]: #801
#750 := (not #801)
#740 := (or #750 #168 #749)
#738 := (or #749 #168)
#746 := (or #750 #738)
#734 := (iff #746 #740)
#588 := (or #750 #739)
#732 := (iff #588 #740)
#733 := [rewrite]: #732
#589 := (iff #746 #588)
#744 := (iff #738 #739)
#745 := [rewrite]: #744
#731 := [monotonicity #745]: #589
#728 := [trans #731 #733]: #734
#587 := [quant-inst #9]: #746
#729 := [mp #587 #728]: #740
#576 := [unit-resolution #729 #806]: #739
#631 := [unit-resolution #576 #630]: #168
#436 := (or #776 #11 #156 #169)
#777 := [def-axiom]: #436
#612 := [unit-resolution #777 #631 #528 #656]: #156
#459 := (or #179 #155)
#450 := [def-axiom]: #459
#636 := [unit-resolution #450 #612]: #179
#463 := (not #179)
#443 := (or #463 #373)
#778 := [def-axiom]: #443
#637 := [unit-resolution #778 #636]: #373
#632 := [trans #637 #639]: #672
#638 := (not #672)
#606 := (or #638 #662)
#613 := [th-lemma arith triangle-eq]: #606
#572 := [unit-resolution #613 #632]: #662
#664 := (>= #661 0::Int)
#603 := (or #638 #664)
#605 := [th-lemma arith triangle-eq]: #603
#607 := [unit-resolution #605 #632]: #664
#616 := [th-lemma arith eq-propagate 1 1 1 1 #607 #572 #653 #655]: #614
#608 := [symm #616]: #628
#617 := [th-lemma arith eq-propagate -1 -1 #635 #660]: #569
#618 := [symm #617]: #723
#629 := [trans #618 #608]: #610
#584 := [monotonicity #629]: #718
#585 := [symm #584]: #715
#590 := [trans #570 #585]: #205
#591 := [unit-resolution #213 #590]: false
#592 := [lemma #591]: #776
#435 := (or #191 #168)
#440 := [def-axiom]: #435
#533 := [unit-resolution #440 #592]: #168
#785 := (or #191 #155)
#775 := [def-axiom]: #785
#534 := [unit-resolution #775 #592]: #155
#784 := (or #191 #567)
#779 := [def-axiom]: #784
#538 := [unit-resolution #779 #592]: #567
#531 := [th-lemma arith triangle-eq]: #191
[unit-resolution #531 #538 #534 #533]: false
unsat
9915a65ab7888a474bcd2f001f0a80c1938cedba 411 0
#2 := false
decl f4 :: (-> Int S2)
#93 := -3::Int
decl f5 :: (-> S2 Int)
decl f3 :: S2
#8 := f3
#9 := (f5 f3)
#89 := -1::Int
#90 := (* -1::Int #9)
#113 := (mod #90 -3::Int)
#119 := (* -1::Int #113)
#12 := 3::Int
#28 := (mod #9 3::Int)
#10 := 0::Int
#162 := (>= #9 0::Int)
#163 := (not #162)
#149 := (<= #9 0::Int)
#150 := (not #149)
#173 := (or #150 #163)
#185 := (ite #173 #28 #119)
#11 := (= #9 0::Int)
#188 := (ite #11 0::Int #185)
#96 := (div #90 -3::Int)
#21 := (div #9 3::Int)
#176 := (ite #173 #21 #96)
#179 := (ite #11 0::Int #176)
#182 := (* 3::Int #179)
#191 := (+ #182 #188)
#194 := (f4 #191)
#197 := (= f3 #194)
#413 := (f4 #9)
#714 := (= #413 #194)
#713 := (= #194 #413)
#618 := (= #191 #9)
#579 := (= #9 #191)
#693 := (* -1::Int #28)
#699 := (* -3::Int #21)
#700 := (+ #699 #693)
#684 := (+ #9 #700)
#688 := (<= #684 0::Int)
#698 := (= #684 0::Int)
#1 := true
#71 := [true-axiom]: true
#630 := (or false #698)
#625 := [th-lemma arith]: #630
#631 := [unit-resolution #625 #71]: #698
#599 := (not #698)
#606 := (or #599 #688)
#565 := [th-lemma arith triangle-eq]: #606
#596 := [unit-resolution #565 #631]: #688
#689 := (>= #684 0::Int)
#584 := (or #599 #689)
#585 := [th-lemma arith triangle-eq]: #584
#588 := [unit-resolution #585 #631]: #689
#660 := (* -1::Int #179)
#661 := (+ #21 #660)
#656 := (<= #661 0::Int)
#659 := (= #21 #179)
#450 := (= #176 #179)
#430 := (not #11)
#616 := (= 0::Int #9)
#716 := [hypothesis]: #11
#617 := [symm #716]: #616
#615 := (= #191 0::Int)
#562 := (<= #188 0::Int)
#774 := (= #188 0::Int)
#433 := (or #430 #774)
#769 := [def-axiom]: #433
#718 := [unit-resolution #769 #716]: #774
#719 := (not #774)
#717 := (or #719 #562)
#720 := [th-lemma arith triangle-eq]: #717
#602 := [unit-resolution #720 #718]: #562
#715 := (>= #188 0::Int)
#603 := (or #719 #715)
#604 := [th-lemma arith triangle-eq]: #603
#563 := [unit-resolution #604 #718]: #715
#559 := (<= #179 0::Int)
#364 := (= #179 0::Int)
#560 := (or #430 #364)
#767 := [def-axiom]: #560
#711 := [unit-resolution #767 #716]: #364
#613 := (not #364)
#708 := (or #613 #559)
#709 := [th-lemma arith triangle-eq]: #708
#712 := [unit-resolution #709 #711]: #559
#561 := (>= #179 0::Int)
#597 := (or #613 #561)
#612 := [th-lemma arith triangle-eq]: #597
#614 := [unit-resolution #612 #711]: #561
#608 := [th-lemma arith eq-propagate -3 -3 -1 -1 #614 #712 #563 #602]: #615
#619 := [trans #608 #617]: #618
#710 := [monotonicity #619]: #713
#701 := [symm #710]: #714
#754 := (= f3 #413)
#38 := (:var 0 S2)
#39 := (f5 #38)
#779 := (pattern #39)
#40 := (f4 #39)
#207 := (= #38 #40)
#780 := (forall (vars (?v0 S2)) (:pat #779) #207)
#210 := (forall (vars (?v0 S2)) #207)
#781 := (iff #210 #780)
#783 := (iff #780 #780)
#784 := [rewrite]: #783
#782 := [rewrite]: #781
#785 := [trans #782 #784]: #781
#304 := (~ #210 #210)
#302 := (~ #207 #207)
#303 := [refl]: #302
#305 := [nnf-pos #303]: #304
#41 := (= #40 #38)
#42 := (forall (vars (?v0 S2)) #41)
#211 := (iff #42 #210)
#208 := (iff #41 #207)
#209 := [rewrite]: #208
#212 := [quant-intro #209]: #211
#206 := [asserted]: #42
#215 := [mp #206 #212]: #210
#294 := [mp~ #215 #305]: #210
#786 := [mp #294 #785]: #780
#419 := (not #780)
#420 := (or #419 #754)
#756 := [quant-inst #8]: #420
#620 := [unit-resolution #756 #786]: #754
#703 := [trans #620 #701]: #197
#200 := (not #197)
#23 := (- 3::Int)
#22 := (- #9)
#29 := (mod #22 #23)
#30 := (- #29)
#16 := (< 0::Int 3::Int)
#18 := (< #9 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int #9)
#17 := (and #15 #16)
#20 := (or #17 #19)
#31 := (ite #20 #28 #30)
#32 := (ite #11 0::Int #31)
#13 := (= 3::Int 0::Int)
#33 := (ite #13 #9 #32)
#24 := (div #22 #23)
#25 := (ite #20 #21 #24)
#14 := (or #11 #13)
#26 := (ite #14 0::Int #25)
#27 := (* #26 3::Int)
#34 := (+ #27 #33)
#35 := (f4 #34)
#36 := (= f3 #35)
#37 := (not #36)
#203 := (iff #37 #200)
#83 := (and #16 #18)
#86 := (or #17 #83)
#124 := (ite #86 #28 #119)
#127 := (ite #11 0::Int #124)
#99 := (ite #86 #21 #96)
#102 := (ite #11 0::Int #99)
#108 := (* 3::Int #102)
#137 := (+ #108 #127)
#140 := (f4 #137)
#143 := (= f3 #140)
#146 := (not #143)
#201 := (iff #146 #200)
#198 := (iff #143 #197)
#195 := (= #140 #194)
#192 := (= #137 #191)
#189 := (= #127 #188)
#186 := (= #124 #185)
#174 := (iff #86 #173)
#171 := (iff #83 #163)
#166 := (and true #163)
#169 := (iff #166 #163)
#170 := [rewrite]: #169
#167 := (iff #83 #166)
#164 := (iff #18 #163)
#165 := [rewrite]: #164
#153 := (iff #16 true)
#154 := [rewrite]: #153
#168 := [monotonicity #154 #165]: #167
#172 := [trans #168 #170]: #171
#160 := (iff #17 #150)
#155 := (and #150 true)
#158 := (iff #155 #150)
#159 := [rewrite]: #158
#156 := (iff #17 #155)
#151 := (iff #15 #150)
#152 := [rewrite]: #151
#157 := [monotonicity #152 #154]: #156
#161 := [trans #157 #159]: #160
#175 := [monotonicity #161 #172]: #174
#187 := [monotonicity #175]: #186
#190 := [monotonicity #187]: #189
#183 := (= #108 #182)
#180 := (= #102 #179)
#177 := (= #99 #176)
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#193 := [monotonicity #184 #190]: #192
#196 := [monotonicity #193]: #195
#199 := [monotonicity #196]: #198
#202 := [monotonicity #199]: #201
#147 := (iff #37 #146)
#144 := (iff #36 #143)
#141 := (= #35 #140)
#138 := (= #34 #137)
#135 := (= #33 #127)
#130 := (ite false #9 #127)
#133 := (= #130 #127)
#134 := [rewrite]: #133
#131 := (= #33 #130)
#128 := (= #32 #127)
#125 := (= #31 #124)
#122 := (= #30 #119)
#116 := (- #113)
#120 := (= #116 #119)
#121 := [rewrite]: #120
#117 := (= #30 #116)
#114 := (= #29 #113)
#94 := (= #23 -3::Int)
#95 := [rewrite]: #94
#91 := (= #22 #90)
#92 := [rewrite]: #91
#115 := [monotonicity #92 #95]: #114
#118 := [monotonicity #115]: #117
#123 := [trans #118 #121]: #122
#87 := (iff #20 #86)
#84 := (iff #19 #83)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#126 := [monotonicity #88 #123]: #125
#129 := [monotonicity #126]: #128
#74 := (iff #13 false)
#75 := [rewrite]: #74
#132 := [monotonicity #75 #129]: #131
#136 := [trans #132 #134]: #135
#111 := (= #27 #108)
#105 := (* #102 3::Int)
#109 := (= #105 #108)
#110 := [rewrite]: #109
#106 := (= #27 #105)
#103 := (= #26 #102)
#100 := (= #25 #99)
#97 := (= #24 #96)
#98 := [monotonicity #92 #95]: #97
#101 := [monotonicity #88 #98]: #100
#81 := (iff #14 #11)
#76 := (or #11 false)
#79 := (iff #76 #11)
#80 := [rewrite]: #79
#77 := (iff #14 #76)
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#104 := [monotonicity #82 #101]: #103
#107 := [monotonicity #104]: #106
#112 := [trans #107 #110]: #111
#139 := [monotonicity #112 #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#204 := [trans #148 #202]: #203
#73 := [asserted]: #37
#205 := [mp #73 #204]: #200
#695 := [unit-resolution #205 #703]: false
#692 := [lemma #695]: #430
#441 := (or #11 #450)
#442 := [def-axiom]: #441
#598 := [unit-resolution #442 #692]: #450
#365 := (= #21 #176)
#737 := (f5 #413)
#738 := (= #737 0::Int)
#632 := (not #738)
#633 := (iff #430 #632)
#628 := (iff #11 #738)
#626 := (iff #738 #11)
#647 := (= #737 #9)
#651 := (= #413 f3)
#652 := [symm #620]: #651
#653 := [monotonicity #652]: #647
#627 := [monotonicity #653]: #626
#521 := [symm #627]: #628
#634 := [monotonicity #521]: #633
#639 := [mp #692 #634]: #632
#739 := (or #162 #738)
#43 := (:var 0 Int)
#45 := (f4 #43)
#787 := (pattern #45)
#231 := (>= #43 0::Int)
#46 := (f5 #45)
#51 := (= #46 0::Int)
#280 := (or #51 #231)
#794 := (forall (vars (?v0 Int)) (:pat #787) #280)
#285 := (forall (vars (?v0 Int)) #280)
#797 := (iff #285 #794)
#795 := (iff #280 #280)
#796 := [refl]: #795
#798 := [quant-intro #796]: #797
#298 := (~ #285 #285)
#306 := (~ #280 #280)
#307 := [refl]: #306
#299 := [nnf-pos #307]: #298
#50 := (< #43 0::Int)
#52 := (implies #50 #51)
#53 := (forall (vars (?v0 Int)) #52)
#288 := (iff #53 #285)
#251 := (= 0::Int #46)
#257 := (not #50)
#258 := (or #257 #251)
#263 := (forall (vars (?v0 Int)) #258)
#286 := (iff #263 #285)
#283 := (iff #258 #280)
#277 := (or #231 #51)
#281 := (iff #277 #280)
#282 := [rewrite]: #281
#278 := (iff #258 #277)
#275 := (iff #251 #51)
#276 := [rewrite]: #275
#273 := (iff #257 #231)
#233 := (not #231)
#268 := (not #233)
#271 := (iff #268 #231)
#272 := [rewrite]: #271
#269 := (iff #257 #268)
#266 := (iff #50 #233)
#267 := [rewrite]: #266
#270 := [monotonicity #267]: #269
#274 := [trans #270 #272]: #273
#279 := [monotonicity #274 #276]: #278
#284 := [trans #279 #282]: #283
#287 := [quant-intro #284]: #286
#264 := (iff #53 #263)
#261 := (iff #52 #258)
#254 := (implies #50 #251)
#259 := (iff #254 #258)
#260 := [rewrite]: #259
#255 := (iff #52 #254)
#252 := (iff #51 #251)
#253 := [rewrite]: #252
#256 := [monotonicity #253]: #255
#262 := [trans #256 #260]: #261
#265 := [quant-intro #262]: #264
#289 := [trans #265 #287]: #288
#250 := [asserted]: #53
#290 := [mp #250 #289]: #285
#308 := [mp~ #290 #299]: #285
#799 := [mp #308 #798]: #794
#463 := (not #794)
#582 := (or #463 #162 #738)
#733 := (or #738 #162)
#724 := (or #463 #733)
#729 := (iff #724 #582)
#726 := (or #463 #739)
#722 := (iff #726 #582)
#728 := [rewrite]: #722
#727 := (iff #724 #726)
#580 := (iff #733 #739)
#581 := [rewrite]: #580
#721 := [monotonicity #581]: #727
#723 := [trans #721 #728]: #729
#725 := [quant-inst #9]: #724
#730 := [mp #725 #723]: #582
#635 := [unit-resolution #730 #799]: #739
#636 := [unit-resolution #635 #639]: #162
#637 := (or #11 #150 #163)
#640 := [th-lemma arith triangle-eq]: #637
#641 := [unit-resolution #640 #692]: #173
#642 := [unit-resolution #641 #636]: #150
#452 := (or #173 #149)
#443 := [def-axiom]: #452
#638 := [unit-resolution #443 #642]: #173
#383 := (not #173)
#457 := (or #383 #365)
#436 := [def-axiom]: #457
#600 := [unit-resolution #436 #638]: #365
#607 := [trans #600 #598]: #659
#609 := (not #659)
#610 := (or #609 #656)
#611 := [th-lemma arith triangle-eq]: #610
#621 := [unit-resolution #611 #607]: #656
#662 := (>= #661 0::Int)
#589 := (or #609 #662)
#590 := [th-lemma arith triangle-eq]: #589
#591 := [unit-resolution #590 #607]: #662
#644 := (* -1::Int #188)
#645 := (+ #28 #644)
#646 := (<= #645 0::Int)
#648 := (= #28 #188)
#775 := (= #185 #188)
#429 := (or #11 #775)
#770 := [def-axiom]: #429
#650 := [unit-resolution #770 #692]: #775
#776 := (= #28 #185)
#772 := (or #383 #776)
#778 := [def-axiom]: #772
#643 := [unit-resolution #778 #638]: #776
#623 := [trans #643 #650]: #648
#569 := (not #648)
#624 := (or #569 #646)
#605 := [th-lemma arith triangle-eq]: #624
#629 := [unit-resolution #605 #623]: #646
#649 := (>= #645 0::Int)
#592 := (or #569 #649)
#593 := [th-lemma arith triangle-eq]: #592
#594 := [unit-resolution #593 #623]: #649
#595 := [th-lemma arith eq-propagate 1 1 3 3 1 1 #594 #629 #591 #621 #588 #596]: #579
#556 := [symm #595]: #618
#557 := [monotonicity #556]: #713
#564 := [symm #557]: #714
#566 := [trans #620 #564]: #197
[unit-resolution #205 #566]: false
unsat
34a7ceb02d535a80474ebf3499258caaaf0b3c6d 74 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
decl f4 :: S2
#8 := f4
#11 := (f3 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
#9 := (f3 f4)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (ite #59 f4 f5)
#65 := (f3 #62)
#73 := (* -1::Int #65)
#605 := (+ #11 #73)
#611 := (>= #605 0::Int)
#610 := (= #11 #65)
#324 := (= f5 #62)
#239 := (not #59)
#238 := (= f4 #62)
#608 := (not #238)
#623 := (= #9 #65)
#618 := [hypothesis]: #238
#615 := [monotonicity #618]: #623
#337 := (not #623)
#74 := (+ #9 #73)
#72 := (>= #74 0::Int)
#78 := (not #72)
#12 := (<= #9 #11)
#13 := (ite #12 f4 f5)
#14 := (f3 #13)
#15 := (<= #14 #9)
#16 := (not #15)
#79 := (iff #16 #78)
#76 := (iff #15 #72)
#68 := (<= #65 #9)
#71 := (iff #68 #72)
#75 := [rewrite]: #71
#69 := (iff #15 #68)
#66 := (= #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#77 := [trans #70 #75]: #76
#80 := [monotonicity #77]: #79
#53 := [asserted]: #16
#81 := [mp #53 #80]: #78
#338 := (or #337 #72)
#616 := [th-lemma arith triangle-eq]: #338
#614 := [unit-resolution #616 #81]: #337
#619 := [unit-resolution #614 #615]: false
#609 := [lemma #619]: #608
#325 := (or #239 #238)
#326 := [def-axiom]: #325
#612 := [unit-resolution #326 #609]: #239
#317 := (or #59 #324)
#328 := [def-axiom]: #317
#607 := [unit-resolution #328 #612]: #324
#613 := [monotonicity #607]: #610
#454 := (not #610)
#455 := (or #454 #611)
#456 := [th-lemma arith triangle-eq]: #455
#598 := [unit-resolution #456 #613]: #611
#345 := (<= #74 0::Int)
#599 := (or #345 #72)
#600 := [th-lemma arith farkas 1 1]: #599
#601 := [unit-resolution #600 #81]: #345
[th-lemma arith farkas 1 1 1 #601 #612 #598]: false
unsat
5688b1f40e77ff02f54bc9b4a677983c538630cc 68 0
#2 := false
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
decl f4 :: S2
#8 := f4
#22 := 0::Int
#11 := (f3 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
#9 := (f3 f4)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (ite #59 f4 f5)
#65 := (f3 #62)
#336 := (= #11 #65)
#324 := (= f5 #62)
#239 := (not #59)
#338 := [hypothesis]: #59
#72 := (* -1::Int #65)
#73 := (+ #11 #72)
#71 := (>= #73 0::Int)
#78 := (not #71)
#12 := (<= #9 #11)
#13 := (ite #12 f4 f5)
#14 := (f3 #13)
#15 := (<= #14 #11)
#16 := (not #15)
#79 := (iff #16 #78)
#76 := (iff #15 #71)
#68 := (<= #65 #11)
#74 := (iff #68 #71)
#75 := [rewrite]: #74
#69 := (iff #15 #68)
#66 := (= #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#77 := [trans #70 #75]: #76
#80 := [monotonicity #77]: #79
#53 := [asserted]: #16
#81 := [mp #53 #80]: #78
#345 := (+ #9 #72)
#337 := (>= #345 0::Int)
#623 := (= #9 #65)
#238 := (= f4 #62)
#325 := (or #239 #238)
#326 := [def-axiom]: #325
#616 := [unit-resolution #326 #338]: #238
#617 := [monotonicity #616]: #623
#332 := (not #623)
#614 := (or #332 #337)
#618 := [th-lemma arith triangle-eq]: #614
#615 := [unit-resolution #618 #617]: #337
#619 := [th-lemma arith farkas -1 1 1 #615 #81 #338]: false
#608 := [lemma #619]: #239
#317 := (or #59 #324)
#328 := [def-axiom]: #317
#610 := [unit-resolution #328 #608]: #324
#605 := [monotonicity #610]: #336
#606 := (not #336)
#611 := (or #606 #71)
#612 := [th-lemma arith triangle-eq]: #611
[unit-resolution #612 #81 #605]: false
unsat
c0ff73a34838bf4027c6c6a69afb1f2b3f234fe5 274 0
#2 := false
#23 := 0::Int
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#338 := (= #9 0::Int)
decl f6 :: (-> Int S2)
#331 := (f6 #9)
#318 := (f3 #331)
#652 := (= #318 0::Int)
#317 := (>= #9 0::Int)
#570 := (not #317)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#57 := -1::Int
#58 := (* -1::Int #11)
#59 := (+ #9 #58)
#60 := (<= #59 0::Int)
#63 := (ite #60 f4 f5)
#66 := (f3 #63)
#75 := (* -1::Int #66)
#76 := (+ #11 #75)
#77 := (+ #9 #76)
#73 := (>= #77 0::Int)
#80 := (not #73)
#15 := (+ #9 #11)
#12 := (<= #9 #11)
#13 := (ite #12 f4 f5)
#14 := (f3 #13)
#16 := (<= #14 #15)
#17 := (not #16)
#81 := (iff #17 #80)
#78 := (iff #16 #73)
#69 := (<= #66 #15)
#72 := (iff #69 #73)
#74 := [rewrite]: #72
#70 := (iff #16 #69)
#67 := (= #14 #66)
#64 := (= #13 #63)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#79 := [trans #71 #74]: #78
#82 := [monotonicity #79]: #81
#54 := [asserted]: #17
#83 := [mp #54 #82]: #80
#588 := (>= #76 0::Int)
#595 := (= #11 #66)
#326 := (= f5 #63)
#649 := (f6 #66)
#479 := (= #649 #63)
#306 := (= #63 #649)
#18 := (:var 0 S2)
#19 := (f3 #18)
#655 := (pattern #19)
#20 := (f6 #19)
#56 := (= #18 #20)
#656 := (forall (vars (?v0 S2)) (:pat #655) #56)
#86 := (forall (vars (?v0 S2)) #56)
#657 := (iff #86 #656)
#659 := (iff #656 #656)
#660 := [rewrite]: #659
#658 := [rewrite]: #657
#661 := [trans #658 #660]: #657
#180 := (~ #86 #86)
#178 := (~ #56 #56)
#179 := [refl]: #178
#181 := [nnf-pos #179]: #180
#21 := (= #20 #18)
#22 := (forall (vars (?v0 S2)) #21)
#87 := (iff #22 #86)
#84 := (iff #21 #56)
#85 := [rewrite]: #84
#88 := [quant-intro #85]: #87
#55 := [asserted]: #22
#91 := [mp #55 #88]: #86
#170 := [mp~ #91 #181]: #86
#662 := [mp #170 #661]: #656
#333 := (not #656)
#650 := (or #333 #306)
#651 := [quant-inst #63]: #650
#619 := [unit-resolution #651 #662]: #306
#480 := [symm #619]: #479
#439 := (= f5 #649)
#332 := (f6 #11)
#596 := (= #332 #649)
#354 := (f3 #649)
#435 := (= #354 #66)
#604 := (= #66 #354)
#605 := [monotonicity #619]: #604
#437 := [symm #605]: #435
#592 := (= #11 #354)
#599 := (= 0::Int #354)
#247 := (= #354 0::Int)
#353 := (>= #66 0::Int)
#612 := (not #353)
#347 := (+ #9 #75)
#339 := (>= #347 0::Int)
#625 := (= #9 #66)
#240 := (= f4 #63)
#340 := (not #326)
#618 := [hypothesis]: #340
#319 := (or #60 #326)
#330 := [def-axiom]: #319
#334 := [unit-resolution #330 #618]: #60
#241 := (not #60)
#327 := (or #241 #240)
#328 := [def-axiom]: #327
#616 := [unit-resolution #328 #334]: #240
#620 := [monotonicity #616]: #625
#617 := (not #625)
#621 := (or #617 #339)
#610 := [th-lemma arith triangle-eq]: #621
#611 := [unit-resolution #610 #620]: #339
#607 := (not #339)
#608 := (or #612 #607 #241 #73)
#613 := [th-lemma arith assign-bounds 2 -1 -1]: #608
#614 := [unit-resolution #613 #334 #83 #611]: #612
#624 := (or #247 #353)
#24 := (:var 0 Int)
#26 := (f6 #24)
#663 := (pattern #26)
#107 := (>= #24 0::Int)
#27 := (f3 #26)
#32 := (= #27 0::Int)
#156 := (or #32 #107)
#670 := (forall (vars (?v0 Int)) (:pat #663) #156)
#161 := (forall (vars (?v0 Int)) #156)
#673 := (iff #161 #670)
#671 := (iff #156 #156)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#174 := (~ #161 #161)
#182 := (~ #156 #156)
#183 := [refl]: #182
#175 := [nnf-pos #183]: #174
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#164 := (iff #34 #161)
#127 := (= 0::Int #27)
#133 := (not #31)
#134 := (or #133 #127)
#139 := (forall (vars (?v0 Int)) #134)
#162 := (iff #139 #161)
#159 := (iff #134 #156)
#153 := (or #107 #32)
#157 := (iff #153 #156)
#158 := [rewrite]: #157
#154 := (iff #134 #153)
#151 := (iff #127 #32)
#152 := [rewrite]: #151
#149 := (iff #133 #107)
#109 := (not #107)
#144 := (not #109)
#147 := (iff #144 #107)
#148 := [rewrite]: #147
#145 := (iff #133 #144)
#142 := (iff #31 #109)
#143 := [rewrite]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#155 := [monotonicity #150 #152]: #154
#160 := [trans #155 #158]: #159
#163 := [quant-intro #160]: #162
#140 := (iff #34 #139)
#137 := (iff #33 #134)
#130 := (implies #31 #127)
#135 := (iff #130 #134)
#136 := [rewrite]: #135
#131 := (iff #33 #130)
#128 := (iff #32 #127)
#129 := [rewrite]: #128
#132 := [monotonicity #129]: #131
#138 := [trans #132 #136]: #137
#141 := [quant-intro #138]: #140
#165 := [trans #141 #163]: #164
#126 := [asserted]: #34
#166 := [mp #126 #165]: #161
#184 := [mp~ #166 #175]: #161
#675 := [mp #184 #674]: #670
#304 := (not #670)
#348 := (or #304 #247 #353)
#622 := (or #304 #624)
#623 := (iff #622 #348)
#627 := [rewrite]: #623
#626 := [quant-inst #66]: #622
#337 := [mp #626 #627]: #348
#609 := [unit-resolution #337 #675]: #624
#615 := [unit-resolution #609 #614]: #247
#606 := [symm #615]: #599
#438 := (= #11 0::Int)
#634 := (f3 #332)
#635 := (= #634 0::Int)
#633 := (>= #11 0::Int)
#456 := (not #633)
#457 := (or #456 #607 #73)
#458 := [th-lemma arith assign-bounds 1 -1]: #457
#600 := [unit-resolution #458 #611 #83]: #456
#631 := (or #633 #635)
#638 := (or #304 #633 #635)
#636 := (or #635 #633)
#640 := (or #304 #636)
#629 := (iff #640 #638)
#281 := (or #304 #631)
#642 := (iff #281 #638)
#628 := [rewrite]: #642
#641 := (iff #640 #281)
#637 := (iff #636 #631)
#275 := [rewrite]: #637
#639 := [monotonicity #275]: #641
#351 := [trans #639 #628]: #629
#280 := [quant-inst #11]: #640
#352 := [mp #280 #351]: #638
#601 := [unit-resolution #352 #675]: #631
#602 := [unit-resolution #601 #600]: #635
#597 := (= #11 #634)
#329 := (= f5 #332)
#436 := (or #333 #329)
#643 := [quant-inst #10]: #436
#603 := [unit-resolution #643 #662]: #329
#598 := [monotonicity #603]: #597
#591 := [trans #598 #602]: #438
#594 := [trans #591 #606]: #592
#593 := [trans #594 #437]: #595
#478 := [monotonicity #593]: #596
#587 := [trans #603 #478]: #439
#489 := [trans #587 #480]: #326
#584 := [unit-resolution #618 #489]: false
#585 := [lemma #584]: #326
#473 := [monotonicity #585]: #595
#491 := (not #588)
#484 := [hypothesis]: #491
#586 := (not #595)
#590 := (or #586 #588)
#577 := [th-lemma arith triangle-eq]: #590
#579 := [unit-resolution #577 #484 #473]: false
#571 := [lemma #579]: #588
#580 := (or #570 #491 #73)
#581 := [th-lemma arith assign-bounds 1 -1]: #580
#582 := [unit-resolution #581 #571 #83]: #570
#648 := (or #317 #652)
#309 := (or #304 #317 #652)
#653 := (or #652 #317)
#645 := (or #304 #653)
#295 := (iff #645 #309)
#646 := (or #304 #648)
#293 := (iff #646 #309)
#294 := [rewrite]: #293
#289 := (iff #645 #646)
#654 := (iff #653 #648)
#644 := [rewrite]: #654
#630 := [monotonicity #644]: #289
#296 := [trans #630 #294]: #295
#305 := [quant-inst #9]: #645
#632 := [mp #305 #296]: #309
#578 := [unit-resolution #632 #675]: #648
#583 := [unit-resolution #578 #582]: #652
#575 := (= #9 #318)
#259 := (= f4 #331)
#312 := (or #333 #259)
#647 := [quant-inst #8]: #312
#572 := [unit-resolution #647 #662]: #259
#569 := [monotonicity #572]: #575
#576 := [trans #569 #583]: #338
#560 := (not #338)
#561 := (or #560 #317)
#563 := [th-lemma arith triangle-eq]: #561
[unit-resolution #563 #582 #576]: false
unsat
e247d094800838c81ff9c1c1fc1185aa59b905e4 121 0
#2 := false
decl f3 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
decl f5 :: S2
#10 := f5
#28 := 0::Int
#14 := (f3 f6)
#67 := -1::Int
#76 := (* -1::Int #14)
#11 := (f3 f5)
#86 := (+ #11 #76)
#87 := (<= #86 0::Int)
#90 := (ite #87 f5 f6)
#93 := (f3 #90)
#650 := (= #11 #93)
#278 := (= f5 #90)
#364 := (= f6 #90)
#477 := (not #364)
#635 := (= #14 #93)
#516 := [hypothesis]: #364
#517 := [monotonicity #516]: #635
#629 := (not #635)
#101 := (* -1::Int #93)
#636 := (+ #14 #101)
#642 := (<= #636 0::Int)
#473 := (not #642)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#102 := (+ #9 #101)
#100 := (>= #102 0::Int)
#99 := (not #100)
#77 := (+ #9 #76)
#75 := (>= #77 0::Int)
#74 := (not #75)
#70 := (* -1::Int #11)
#71 := (+ #9 #70)
#69 := (>= #71 0::Int)
#68 := (not #69)
#80 := (and #68 #74)
#83 := (not #80)
#107 := (or #83 #99)
#110 := (not #107)
#17 := (<= #11 #14)
#18 := (ite #17 f5 f6)
#19 := (f3 #18)
#20 := (< #9 #19)
#15 := (< #9 #14)
#12 := (< #9 #11)
#16 := (and #12 #15)
#21 := (implies #16 #20)
#22 := (not #21)
#113 := (iff #22 #110)
#60 := (not #16)
#61 := (or #60 #20)
#64 := (not #61)
#111 := (iff #64 #110)
#108 := (iff #61 #107)
#105 := (iff #20 #99)
#96 := (< #9 #93)
#103 := (iff #96 #99)
#104 := [rewrite]: #103
#97 := (iff #20 #96)
#94 := (= #19 #93)
#91 := (= #18 #90)
#88 := (iff #17 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#106 := [trans #98 #104]: #105
#84 := (iff #60 #83)
#81 := (iff #16 #80)
#78 := (iff #15 #74)
#79 := [rewrite]: #78
#72 := (iff #12 #68)
#73 := [rewrite]: #72
#82 := [monotonicity #73 #79]: #81
#85 := [monotonicity #82]: #84
#109 := [monotonicity #85 #106]: #108
#112 := [monotonicity #109]: #111
#65 := (iff #22 #64)
#62 := (iff #21 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#114 := [trans #66 #112]: #113
#59 := [asserted]: #22
#115 := [mp #59 #114]: #110
#119 := [not-or-elim #115]: #100
#116 := [not-or-elim #115]: #80
#118 := [and-elim #116]: #74
#637 := [hypothesis]: #642
#644 := [th-lemma arith farkas -1 -1 1 #637 #118 #119]: false
#475 := [lemma #644]: #473
#630 := (or #629 #642)
#632 := [th-lemma arith triangle-eq]: #630
#634 := [unit-resolution #632 #475]: #629
#518 := [unit-resolution #634 #517]: false
#625 := [lemma #518]: #477
#357 := (or #87 #364)
#368 := [def-axiom]: #357
#622 := [unit-resolution #368 #625]: #87
#279 := (not #87)
#365 := (or #279 #278)
#366 := [def-axiom]: #365
#623 := [unit-resolution #366 #622]: #278
#626 := [monotonicity #623]: #650
#496 := (not #650)
#645 := (+ #11 #101)
#646 := (<= #645 0::Int)
#653 := (not #646)
#117 := [and-elim #116]: #68
#652 := [hypothesis]: #646
#647 := [th-lemma arith farkas -1 -1 1 #652 #117 #119]: false
#494 := [lemma #647]: #653
#638 := (or #496 #646)
#639 := [th-lemma arith triangle-eq]: #638
#527 := [unit-resolution #639 #494]: #496
[unit-resolution #527 #626]: false
unsat
17d63589ff73a77b888aa8effc14d380fc26d98a 155 0
#2 := false
decl f4 :: S2
#8 := f4
decl f5 :: S2
#10 := f5
#23 := 0::Int
decl f3 :: (-> S2 Int)
#11 := (f3 f5)
#57 := -1::Int
#58 := (* -1::Int #11)
#9 := (f3 f4)
#59 := (+ #9 #58)
#67 := (>= #59 0::Int)
#69 := (ite #67 f5 f4)
#60 := (<= #59 0::Int)
#63 := (ite #60 f4 f5)
#72 := (= #63 #69)
#326 := (= f5 #69)
#486 := (iff #326 #72)
#483 := (iff #72 #326)
#618 := (= #63 f5)
#321 := (= f5 #63)
#236 := (not #60)
#235 := (= f4 #63)
#474 := (not #235)
#590 := (iff #235 #72)
#587 := (iff #72 #235)
#601 := (= #63 f4)
#433 := (iff #601 #235)
#586 := [commutativity]: #433
#430 := (iff #72 #601)
#600 := (= #69 f4)
#254 := (= f4 #69)
#619 := (not #254)
#620 := [hypothesis]: #619
#307 := (or #67 #254)
#642 := [def-axiom]: #307
#342 := [unit-resolution #642 #620]: #67
#327 := (not #67)
#324 := (or #327 #326)
#328 := [def-axiom]: #324
#343 := [unit-resolution #328 #342]: #326
#596 := (= f4 f5)
decl f6 :: (-> Int S2)
#431 := (f6 #11)
#451 := (= #431 f5)
#638 := (= f5 #431)
#18 := (:var 0 S2)
#19 := (f3 #18)
#650 := (pattern #19)
#20 := (f6 #19)
#56 := (= #18 #20)
#651 := (forall (vars (?v0 S2)) (:pat #650) #56)
#81 := (forall (vars (?v0 S2)) #56)
#652 := (iff #81 #651)
#654 := (iff #651 #651)
#655 := [rewrite]: #654
#653 := [rewrite]: #652
#656 := [trans #653 #655]: #652
#175 := (~ #81 #81)
#173 := (~ #56 #56)
#174 := [refl]: #173
#176 := [nnf-pos #174]: #175
#21 := (= #20 #18)
#22 := (forall (vars (?v0 S2)) #21)
#82 := (iff #22 #81)
#79 := (iff #21 #56)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#55 := [asserted]: #22
#86 := [mp #55 #83]: #81
#165 := [mp~ #86 #176]: #81
#657 := [mp #165 #656]: #651
#312 := (not #651)
#648 := (or #312 #638)
#643 := [quant-inst #10]: #648
#602 := [unit-resolution #643 #657]: #638
#452 := [symm #602]: #451
#453 := (= f4 #431)
#644 := (f6 #9)
#604 := (= #644 #431)
#608 := (= #431 #644)
#606 := (= #11 #9)
#616 := (= #9 #11)
#614 := (not #321)
#75 := (not #72)
#329 := (iff #75 #614)
#335 := (iff #72 #321)
#333 := (iff #618 #321)
#334 := [commutativity]: #333
#622 := (iff #72 #618)
#617 := (= #69 f5)
#621 := [symm #343]: #617
#332 := [monotonicity #621]: #622
#613 := [trans #332 #334]: #335
#611 := [monotonicity #613]: #329
#14 := (<= #11 #9)
#15 := (ite #14 f5 f4)
#12 := (<= #9 #11)
#13 := (ite #12 f4 f5)
#16 := (= #13 #15)
#17 := (not #16)
#76 := (iff #17 #75)
#73 := (iff #16 #72)
#70 := (= #15 #69)
#66 := (iff #14 #67)
#68 := [rewrite]: #66
#71 := [monotonicity #68]: #70
#64 := (= #13 #63)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#74 := [monotonicity #65 #71]: #73
#77 := [monotonicity #74]: #76
#54 := [asserted]: #17
#78 := [mp #54 #77]: #75
#615 := [mp #78 #611]: #614
#314 := (or #60 #321)
#325 := [def-axiom]: #314
#612 := [unit-resolution #325 #615]: #60
#605 := [th-lemma arith eq-propagate 1 1 #342 #612]: #616
#607 := [symm #605]: #606
#609 := [monotonicity #607]: #608
#610 := [symm #609]: #604
#301 := (= f4 #644)
#313 := (or #312 #301)
#645 := [quant-inst #8]: #313
#603 := [unit-resolution #645 #657]: #301
#595 := [trans #603 #610]: #453
#597 := [trans #595 #452]: #596
#598 := [trans #597 #343]: #254
#592 := [unit-resolution #620 #598]: false
#593 := [lemma #592]: #254
#594 := [symm #593]: #600
#432 := [monotonicity #594]: #430
#589 := [trans #432 #586]: #587
#588 := [symm #589]: #590
#599 := [hypothesis]: #235
#591 := [mp #599 #588]: #72
#473 := [unit-resolution #78 #591]: false
#475 := [lemma #473]: #474
#322 := (or #236 #235)
#323 := [def-axiom]: #322
#434 := [unit-resolution #323 #475]: #236
#583 := [unit-resolution #325 #434]: #321
#468 := [symm #583]: #618
#485 := [monotonicity #468]: #483
#479 := [symm #485]: #486
#582 := (or #67 #60)
#484 := [th-lemma arith farkas 1 1]: #582
#579 := [unit-resolution #484 #434]: #67
#580 := [unit-resolution #328 #579]: #326
#487 := [mp #580 #479]: #72
[unit-resolution #78 #487]: false
unsat
42493be889faac3085f414fe327745c6dc7e65ef 303 0
#2 := false
decl f5 :: (-> Int S2)
#10 := 0::Int
#11 := (f5 0::Int)
decl f4 :: S2
#8 := f4
decl f3 :: (-> S2 Int)
#12 := (f3 #11)
#59 := -1::Int
#60 := (* -1::Int #12)
#9 := (f3 f4)
#61 := (+ #9 #60)
#62 := (<= #61 0::Int)
#65 := (ite #62 f4 #11)
#68 := (= #11 #65)
#325 := (f3 #65)
#326 := (f5 #325)
#591 := (= #326 #65)
#254 := (= #65 #326)
#17 := (:var 0 S2)
#18 := (f3 #17)
#650 := (pattern #18)
#19 := (f5 #18)
#78 := (= #17 #19)
#651 := (forall (vars (?v0 S2)) (:pat #650) #78)
#81 := (forall (vars (?v0 S2)) #78)
#652 := (iff #81 #651)
#654 := (iff #651 #651)
#655 := [rewrite]: #654
#653 := [rewrite]: #652
#656 := [trans #653 #655]: #652
#175 := (~ #81 #81)
#173 := (~ #78 #78)
#174 := [refl]: #173
#176 := [nnf-pos #174]: #175
#20 := (= #19 #17)
#21 := (forall (vars (?v0 S2)) #20)
#82 := (iff #21 #81)
#79 := (iff #20 #78)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#77 := [asserted]: #21
#86 := [mp #77 #83]: #81
#165 := [mp~ #86 #176]: #81
#657 := [mp #165 #656]: #651
#328 := (not #651)
#307 := (or #328 #254)
#642 := [quant-inst #65]: #307
#601 := [unit-resolution #642 #657]: #254
#473 := [symm #601]: #591
#563 := (= #11 #326)
#574 := (= 0::Int #325)
#587 := (= #9 #325)
#433 := (= #325 #9)
#430 := (= #65 f4)
#235 := (= f4 #65)
#71 := (not #68)
#13 := (<= #9 #12)
#14 := (ite #13 f4 #11)
#15 := (= #14 #11)
#16 := (not #15)
#74 := (iff #16 #71)
#53 := (= #11 #14)
#56 := (not #53)
#72 := (iff #56 #71)
#69 := (iff #53 #68)
#66 := (= #14 #65)
#63 := (iff #13 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#75 := [trans #58 #73]: #74
#52 := [asserted]: #16
#76 := [mp #52 #75]: #71
#323 := (or #62 #68)
#314 := [def-axiom]: #323
#607 := [unit-resolution #314 #76]: #62
#321 := (not #62)
#236 := (or #321 #235)
#322 := [def-axiom]: #236
#594 := [unit-resolution #322 #607]: #235
#432 := [symm #594]: #430
#586 := [monotonicity #432]: #433
#589 := [symm #586]: #587
#585 := (= 0::Int #9)
#619 := (f5 #9)
#620 := (f3 #619)
#484 := (= #620 #9)
#489 := (= #9 #620)
#487 := (= f4 #619)
#483 := (= #326 #619)
#590 := (= #619 #326)
#588 := [monotonicity #589]: #590
#485 := [symm #588]: #483
#486 := (= f4 #326)
#479 := [trans #594 #601]: #486
#488 := [trans #479 #485]: #487
#490 := [monotonicity #488]: #489
#581 := [symm #490]: #484
#491 := (= 0::Int #620)
#342 := (= #620 0::Int)
#605 := (= #9 0::Int)
#606 := (<= #9 0::Int)
#276 := (<= #12 0::Int)
#645 := (= #12 0::Int)
#22 := (:var 0 Int)
#24 := (f5 #22)
#658 := (pattern #24)
#102 := (>= #22 0::Int)
#104 := (not #102)
#25 := (f3 #24)
#85 := (= #22 #25)
#110 := (or #85 #104)
#659 := (forall (vars (?v0 Int)) (:pat #658) #110)
#115 := (forall (vars (?v0 Int)) #110)
#662 := (iff #115 #659)
#660 := (iff #110 #110)
#661 := [refl]: #660
#663 := [quant-intro #661]: #662
#167 := (~ #115 #115)
#166 := (~ #110 #110)
#163 := [refl]: #166
#168 := [nnf-pos #163]: #167
#26 := (= #25 #22)
#23 := (<= 0::Int #22)
#27 := (implies #23 #26)
#28 := (forall (vars (?v0 Int)) #27)
#118 := (iff #28 #115)
#92 := (not #23)
#93 := (or #92 #85)
#98 := (forall (vars (?v0 Int)) #93)
#116 := (iff #98 #115)
#113 := (iff #93 #110)
#107 := (or #104 #85)
#111 := (iff #107 #110)
#112 := [rewrite]: #111
#108 := (iff #93 #107)
#105 := (iff #92 #104)
#101 := (iff #23 #102)
#103 := [rewrite]: #101
#106 := [monotonicity #103]: #105
#109 := [monotonicity #106]: #108
#114 := [trans #109 #112]: #113
#117 := [quant-intro #114]: #116
#99 := (iff #28 #98)
#96 := (iff #27 #93)
#89 := (implies #23 #85)
#94 := (iff #89 #93)
#95 := [rewrite]: #94
#90 := (iff #27 #89)
#87 := (iff #26 #85)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#97 := [trans #91 #95]: #96
#100 := [quant-intro #97]: #99
#119 := [trans #100 #117]: #118
#84 := [asserted]: #28
#120 := [mp #84 #119]: #115
#164 := [mp~ #120 #168]: #115
#664 := [mp #164 #663]: #659
#628 := (not #659)
#629 := (or #628 #645)
#644 := (>= 0::Int 0::Int)
#301 := (not #644)
#312 := (= 0::Int #12)
#313 := (or #312 #301)
#630 := (or #628 #313)
#626 := (iff #630 #629)
#270 := (iff #629 #629)
#633 := [rewrite]: #270
#291 := (iff #313 #645)
#284 := (or #645 false)
#289 := (iff #284 #645)
#290 := [rewrite]: #289
#625 := (iff #313 #284)
#300 := (iff #301 false)
#1 := true
#649 := (not true)
#304 := (iff #649 false)
#640 := [rewrite]: #304
#639 := (iff #301 #649)
#648 := (iff #644 true)
#643 := [rewrite]: #648
#299 := [monotonicity #643]: #639
#641 := [trans #299 #640]: #300
#646 := (iff #312 #645)
#647 := [rewrite]: #646
#288 := [monotonicity #647 #641]: #625
#627 := [trans #288 #290]: #291
#632 := [monotonicity #627]: #626
#635 := [trans #632 #633]: #626
#631 := [quant-inst #10]: #630
#275 := [mp #631 #635]: #629
#602 := [unit-resolution #275 #664]: #645
#603 := (not #645)
#608 := (or #603 #276)
#609 := [th-lemma arith triangle-eq]: #608
#604 := [unit-resolution #609 #602]: #276
#610 := (not #606)
#451 := [hypothesis]: #610
#452 := [th-lemma arith farkas -1 1 1 #451 #604 #607]: false
#453 := [lemma #452]: #606
#242 := (>= #9 0::Int)
#595 := (not #342)
#596 := [hypothesis]: #595
#617 := (or #242 #342)
#30 := (= #25 0::Int)
#151 := (or #30 #102)
#665 := (forall (vars (?v0 Int)) (:pat #658) #151)
#156 := (forall (vars (?v0 Int)) #151)
#668 := (iff #156 #665)
#666 := (iff #151 #151)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#169 := (~ #156 #156)
#177 := (~ #151 #151)
#178 := [refl]: #177
#170 := [nnf-pos #178]: #169
#29 := (< #22 0::Int)
#31 := (implies #29 #30)
#32 := (forall (vars (?v0 Int)) #31)
#159 := (iff #32 #156)
#122 := (= 0::Int #25)
#128 := (not #29)
#129 := (or #128 #122)
#134 := (forall (vars (?v0 Int)) #129)
#157 := (iff #134 #156)
#154 := (iff #129 #151)
#148 := (or #102 #30)
#152 := (iff #148 #151)
#153 := [rewrite]: #152
#149 := (iff #129 #148)
#146 := (iff #122 #30)
#147 := [rewrite]: #146
#144 := (iff #128 #102)
#139 := (not #104)
#142 := (iff #139 #102)
#143 := [rewrite]: #142
#140 := (iff #128 #139)
#137 := (iff #29 #104)
#138 := [rewrite]: #137
#141 := [monotonicity #138]: #140
#145 := [trans #141 #143]: #144
#150 := [monotonicity #145 #147]: #149
#155 := [trans #150 #153]: #154
#158 := [quant-intro #155]: #157
#135 := (iff #32 #134)
#132 := (iff #31 #129)
#125 := (implies #29 #122)
#130 := (iff #125 #129)
#131 := [rewrite]: #130
#126 := (iff #31 #125)
#123 := (iff #30 #122)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#133 := [trans #127 #131]: #132
#136 := [quant-intro #133]: #135
#160 := [trans #136 #158]: #159
#121 := [asserted]: #32
#161 := [mp #121 #160]: #156
#179 := [mp~ #161 #170]: #156
#670 := [mp #179 #669]: #665
#622 := (not #665)
#332 := (or #622 #242 #342)
#343 := (or #342 #242)
#333 := (or #622 #343)
#615 := (iff #333 #332)
#335 := (or #622 #617)
#329 := (iff #335 #332)
#611 := [rewrite]: #329
#613 := (iff #333 #335)
#621 := (iff #343 #617)
#618 := [rewrite]: #621
#614 := [monotonicity #618]: #613
#612 := [trans #614 #611]: #615
#334 := [quant-inst #9]: #333
#616 := [mp #334 #612]: #332
#597 := [unit-resolution #616 #670]: #617
#598 := [unit-resolution #597 #596]: #242
#592 := (not #242)
#593 := (or #605 #610 #592)
#599 := [th-lemma arith triangle-eq]: #593
#600 := [unit-resolution #599 #598 #453]: #605
#434 := (= #619 f4)
#474 := (= #619 #65)
#475 := [trans #588 #473]: #474
#582 := [trans #475 #432]: #434
#579 := [monotonicity #582]: #484
#580 := [trans #579 #600]: #342
#583 := [unit-resolution #596 #580]: false
#468 := [lemma #583]: #342
#584 := [symm #468]: #491
#572 := [trans #584 #581]: #585
#566 := [trans #572 #589]: #574
#565 := [monotonicity #566]: #563
#575 := [trans #565 #473]: #68
[unit-resolution #76 #575]: false
unsat
1037c58409b89c16f34d65158c467c932b087bd4 68 0
#2 := false
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
decl f5 :: S2
#10 := f5
#22 := 0::Int
#11 := (f3 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
#9 := (f3 f4)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (ite #59 f5 f4)
#65 := (f3 #62)
#337 := (= #9 #65)
#324 := (= f4 #62)
#239 := (not #59)
#338 := [hypothesis]: #59
#71 := (* -1::Int #65)
#72 := (+ #9 #71)
#73 := (<= #72 0::Int)
#78 := (not #73)
#12 := (<= #9 #11)
#13 := (ite #12 f5 f4)
#14 := (f3 #13)
#15 := (<= #9 #14)
#16 := (not #15)
#79 := (iff #16 #78)
#76 := (iff #15 #73)
#68 := (<= #9 #65)
#74 := (iff #68 #73)
#75 := [rewrite]: #74
#69 := (iff #15 #68)
#66 := (= #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#77 := [trans #70 #75]: #76
#80 := [monotonicity #77]: #79
#53 := [asserted]: #16
#81 := [mp #53 #80]: #78
#345 := (+ #11 #71)
#336 := (<= #345 0::Int)
#623 := (= #11 #65)
#238 := (= f5 #62)
#325 := (or #239 #238)
#326 := [def-axiom]: #325
#616 := [unit-resolution #326 #338]: #238
#617 := [monotonicity #616]: #623
#332 := (not #623)
#614 := (or #332 #336)
#618 := [th-lemma arith triangle-eq]: #614
#615 := [unit-resolution #618 #617]: #336
#619 := [th-lemma arith farkas 1 -1 1 #615 #81 #338]: false
#608 := [lemma #619]: #239
#317 := (or #59 #324)
#328 := [def-axiom]: #317
#610 := [unit-resolution #328 #608]: #324
#605 := [monotonicity #610]: #337
#606 := (not #337)
#611 := (or #606 #73)
#612 := [th-lemma arith triangle-eq]: #611
[unit-resolution #612 #81 #605]: false
unsat
607381f465ca29229d6d64af7dd9ecf1938d80f8 74 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
decl f4 :: S2
#8 := f4
#11 := (f3 f5)
#56 := -1::Int
#59 := (* -1::Int #11)
#9 := (f3 f4)
#60 := (+ #9 #59)
#58 := (>= #60 0::Int)
#62 := (ite #58 f4 f5)
#65 := (f3 #62)
#71 := (* -1::Int #65)
#605 := (+ #11 #71)
#606 := (<= #605 0::Int)
#610 := (= #11 #65)
#324 := (= f5 #62)
#239 := (not #58)
#238 := (= f4 #62)
#608 := (not #238)
#623 := (= #9 #65)
#618 := [hypothesis]: #238
#615 := [monotonicity #618]: #623
#337 := (not #623)
#72 := (+ #9 #71)
#73 := (<= #72 0::Int)
#78 := (not #73)
#12 := (<= #11 #9)
#13 := (ite #12 f4 f5)
#14 := (f3 #13)
#15 := (<= #9 #14)
#16 := (not #15)
#79 := (iff #16 #78)
#76 := (iff #15 #73)
#68 := (<= #9 #65)
#74 := (iff #68 #73)
#75 := [rewrite]: #74
#69 := (iff #15 #68)
#66 := (= #14 #65)
#63 := (= #13 #62)
#57 := (iff #12 #58)
#61 := [rewrite]: #57
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#77 := [trans #70 #75]: #76
#80 := [monotonicity #77]: #79
#53 := [asserted]: #16
#81 := [mp #53 #80]: #78
#338 := (or #337 #73)
#616 := [th-lemma arith triangle-eq]: #338
#614 := [unit-resolution #616 #81]: #337
#619 := [unit-resolution #614 #615]: false
#609 := [lemma #619]: #608
#325 := (or #239 #238)
#326 := [def-axiom]: #325
#612 := [unit-resolution #326 #609]: #239
#317 := (or #58 #324)
#328 := [def-axiom]: #317
#607 := [unit-resolution #328 #612]: #324
#613 := [monotonicity #607]: #610
#454 := (not #610)
#455 := (or #454 #606)
#456 := [th-lemma arith triangle-eq]: #455
#598 := [unit-resolution #456 #613]: #606
#345 := (>= #72 0::Int)
#599 := (or #345 #73)
#600 := [th-lemma arith farkas 1 1]: #599
#601 := [unit-resolution #600 #81]: #345
[th-lemma arith farkas 1 1 1 #601 #612 #598]: false
unsat
7e1dd181145bad16dc98a08ac13cd302270a61b8 462 0
#2 := false
decl f3 :: (-> S2 Int)
decl f5 :: S2
#8 := f5
decl f6 :: S2
#10 := f6
#29 := 0::Int
#11 := (f3 f6)
#61 := -1::Int
#62 := (* -1::Int #11)
#9 := (f3 f5)
#63 := (+ #9 #62)
#91 := (<= #63 0::Int)
#94 := (ite #91 f6 f5)
#97 := (f3 #94)
#469 := (= #9 #97)
#361 := (= f5 #94)
#276 := (not #91)
#564 := (= #11 #97)
#275 := (= f6 #94)
#418 := [hypothesis]: #91
#362 := (or #276 #275)
#363 := [def-axiom]: #362
#419 := [unit-resolution #363 #418]: #275
#420 := [monotonicity #419]: #564
#103 := (* -1::Int #97)
#539 := (+ #11 #103)
#506 := (<= #539 0::Int)
#464 := (not #506)
decl f4 :: (-> Int S2)
#66 := (f4 #63)
#69 := (f3 #66)
#658 := (<= #69 0::Int)
#324 := (* -1::Int #69)
#665 := (+ #62 #324)
#328 := (+ #9 #665)
#664 := (>= #328 0::Int)
#329 := (= #328 0::Int)
#679 := (>= #63 0::Int)
#339 := (not #679)
#445 := [hypothesis]: #339
#441 := (or #679 #91)
#431 := [th-lemma arith farkas 1 1]: #441
#433 := [unit-resolution #431 #445]: #91
#434 := [unit-resolution #363 #433]: #275
#437 := [monotonicity #434]: #564
#386 := (= #69 0::Int)
#387 := (or #386 #679)
#30 := (:var 0 Int)
#32 := (f4 #30)
#698 := (pattern #32)
#142 := (>= #30 0::Int)
#33 := (f3 #32)
#38 := (= #33 0::Int)
#191 := (or #38 #142)
#705 := (forall (vars (?v0 Int)) (:pat #698) #191)
#196 := (forall (vars (?v0 Int)) #191)
#708 := (iff #196 #705)
#706 := (iff #191 #191)
#707 := [refl]: #706
#709 := [quant-intro #707]: #708
#209 := (~ #196 #196)
#217 := (~ #191 #191)
#218 := [refl]: #217
#210 := [nnf-pos #218]: #209
#37 := (< #30 0::Int)
#39 := (implies #37 #38)
#40 := (forall (vars (?v0 Int)) #39)
#199 := (iff #40 #196)
#162 := (= 0::Int #33)
#168 := (not #37)
#169 := (or #168 #162)
#174 := (forall (vars (?v0 Int)) #169)
#197 := (iff #174 #196)
#194 := (iff #169 #191)
#188 := (or #142 #38)
#192 := (iff #188 #191)
#193 := [rewrite]: #192
#189 := (iff #169 #188)
#186 := (iff #162 #38)
#187 := [rewrite]: #186
#184 := (iff #168 #142)
#144 := (not #142)
#179 := (not #144)
#182 := (iff #179 #142)
#183 := [rewrite]: #182
#180 := (iff #168 #179)
#177 := (iff #37 #144)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#185 := [trans #181 #183]: #184
#190 := [monotonicity #185 #187]: #189
#195 := [trans #190 #193]: #194
#198 := [quant-intro #195]: #197
#175 := (iff #40 #174)
#172 := (iff #39 #169)
#165 := (implies #37 #162)
#170 := (iff #165 #169)
#171 := [rewrite]: #170
#166 := (iff #39 #165)
#163 := (iff #38 #162)
#164 := [rewrite]: #163
#167 := [monotonicity #164]: #166
#173 := [trans #167 #171]: #172
#176 := [quant-intro #173]: #175
#200 := [trans #176 #198]: #199
#161 := [asserted]: #40
#201 := [mp #161 #200]: #196
#219 := [mp~ #201 #210]: #196
#710 := [mp #219 #709]: #705
#282 := (not #705)
#659 := (or #282 #386 #679)
#660 := (or #282 #387)
#383 := (iff #660 #659)
#657 := [rewrite]: #383
#382 := [quant-inst #63]: #660
#661 := [mp #382 #657]: #659
#438 := [unit-resolution #661 #710]: #387
#442 := [unit-resolution #438 #445]: #386
#550 := (not #386)
#435 := (or #550 #658)
#443 := [th-lemma arith triangle-eq]: #435
#436 := [unit-resolution #443 #442]: #658
#519 := (>= #9 0::Int)
#466 := (= #9 0::Int)
#366 := (f4 #9)
#527 := (f3 #366)
#528 := (= #527 0::Int)
#462 := (not #519)
#448 := [hypothesis]: #462
#530 := (or #519 #528)
#621 := (or #282 #519 #528)
#529 := (or #528 #519)
#625 := (or #282 #529)
#616 := (iff #625 #621)
#614 := (or #282 #530)
#605 := (iff #614 #621)
#615 := [rewrite]: #605
#606 := (iff #625 #614)
#531 := (iff #529 #530)
#624 := [rewrite]: #531
#603 := [monotonicity #624]: #606
#617 := [trans #603 #615]: #616
#612 := [quant-inst #9]: #625
#613 := [mp #612 #617]: #621
#452 := [unit-resolution #613 #710]: #530
#454 := [unit-resolution #452 #448]: #528
#453 := (= #9 #527)
#294 := (= f5 #366)
#24 := (:var 0 S2)
#25 := (f3 #24)
#690 := (pattern #25)
#26 := (f4 #25)
#118 := (= #24 #26)
#691 := (forall (vars (?v0 S2)) (:pat #690) #118)
#121 := (forall (vars (?v0 S2)) #118)
#692 := (iff #121 #691)
#694 := (iff #691 #691)
#695 := [rewrite]: #694
#693 := [rewrite]: #692
#696 := [trans #693 #695]: #692
#215 := (~ #121 #121)
#213 := (~ #118 #118)
#214 := [refl]: #213
#216 := [nnf-pos #214]: #215
#27 := (= #26 #24)
#28 := (forall (vars (?v0 S2)) #27)
#122 := (iff #28 #121)
#119 := (iff #27 #118)
#120 := [rewrite]: #119
#123 := [quant-intro #120]: #122
#117 := [asserted]: #28
#126 := [mp #117 #123]: #121
#205 := [mp~ #126 #216]: #121
#697 := [mp #205 #696]: #691
#368 := (not #691)
#347 := (or #368 #294)
#682 := [quant-inst #8]: #347
#455 := [unit-resolution #682 #697]: #294
#456 := [monotonicity #455]: #453
#444 := [trans #456 #454]: #466
#447 := (not #466)
#449 := (or #447 #519)
#450 := [th-lemma arith triangle-eq]: #449
#446 := [unit-resolution #450 #448 #444]: false
#451 := [lemma #446]: #519
#72 := (* -1::Int #9)
#73 := (+ #72 #11)
#76 := (f4 #73)
#79 := (f3 #76)
#654 := (+ #62 #79)
#369 := (+ #9 #654)
#640 := (<= #369 0::Int)
#375 := (= #369 0::Int)
#642 := (or #276 #375)
#125 := (= #30 #33)
#150 := (or #125 #144)
#699 := (forall (vars (?v0 Int)) (:pat #698) #150)
#155 := (forall (vars (?v0 Int)) #150)
#702 := (iff #155 #699)
#700 := (iff #150 #150)
#701 := [refl]: #700
#703 := [quant-intro #701]: #702
#207 := (~ #155 #155)
#206 := (~ #150 #150)
#203 := [refl]: #206
#208 := [nnf-pos #203]: #207
#34 := (= #33 #30)
#31 := (<= 0::Int #30)
#35 := (implies #31 #34)
#36 := (forall (vars (?v0 Int)) #35)
#158 := (iff #36 #155)
#132 := (not #31)
#133 := (or #132 #125)
#138 := (forall (vars (?v0 Int)) #133)
#156 := (iff #138 #155)
#153 := (iff #133 #150)
#147 := (or #144 #125)
#151 := (iff #147 #150)
#152 := [rewrite]: #151
#148 := (iff #133 #147)
#145 := (iff #132 #144)
#141 := (iff #31 #142)
#143 := [rewrite]: #141
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#157 := [quant-intro #154]: #156
#139 := (iff #36 #138)
#136 := (iff #35 #133)
#129 := (implies #31 #125)
#134 := (iff #129 #133)
#135 := [rewrite]: #134
#130 := (iff #35 #129)
#127 := (iff #34 #125)
#128 := [rewrite]: #127
#131 := [monotonicity #128]: #130
#137 := [trans #131 #135]: #136
#140 := [quant-intro #137]: #139
#159 := [trans #140 #157]: #158
#124 := [asserted]: #36
#160 := [mp #124 #159]: #155
#204 := [mp~ #160 #208]: #155
#704 := [mp #204 #703]: #699
#670 := (not #699)
#650 := (or #670 #276 #375)
#388 := (>= #73 0::Int)
#389 := (not #388)
#372 := (= #73 #79)
#373 := (or #372 #389)
#491 := (or #670 #373)
#632 := (iff #491 #650)
#493 := (or #670 #642)
#637 := (iff #493 #650)
#638 := [rewrite]: #637
#635 := (iff #491 #493)
#649 := (iff #373 #642)
#645 := (or #375 #276)
#643 := (iff #645 #642)
#648 := [rewrite]: #643
#646 := (iff #373 #645)
#652 := (iff #389 #276)
#651 := (iff #388 #91)
#655 := [rewrite]: #651
#656 := [monotonicity #655]: #652
#374 := (iff #372 #375)
#653 := [rewrite]: #374
#647 := [monotonicity #653 #656]: #646
#644 := [trans #647 #648]: #649
#636 := [monotonicity #644]: #635
#633 := [trans #636 #638]: #632
#492 := [quant-inst #73]: #491
#639 := [mp #492 #633]: #650
#439 := [unit-resolution #639 #704]: #642
#440 := [unit-resolution #439 #433]: #375
#426 := (not #375)
#428 := (or #426 #640)
#429 := [th-lemma arith triangle-eq]: #428
#427 := [unit-resolution #429 #440]: #640
#307 := (not #640)
#463 := (not #658)
#465 := (or #462 #463 #464 #307)
#487 := [hypothesis]: #640
#457 := [hypothesis]: #519
#458 := [hypothesis]: #506
#459 := [hypothesis]: #658
#104 := (+ #79 #103)
#105 := (+ #69 #104)
#106 := (<= #105 0::Int)
#111 := (not #106)
#19 := (<= #9 #11)
#20 := (ite #19 f6 f5)
#21 := (f3 #20)
#15 := (- #11 #9)
#16 := (f4 #15)
#17 := (f3 #16)
#12 := (- #9 #11)
#13 := (f4 #12)
#14 := (f3 #13)
#18 := (+ #14 #17)
#22 := (<= #18 #21)
#23 := (not #22)
#114 := (iff #23 #111)
#82 := (+ #69 #79)
#85 := (<= #82 #21)
#88 := (not #85)
#112 := (iff #88 #111)
#109 := (iff #85 #106)
#100 := (<= #82 #97)
#107 := (iff #100 #106)
#108 := [rewrite]: #107
#101 := (iff #85 #100)
#98 := (= #21 #97)
#95 := (= #20 #94)
#92 := (iff #19 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#99 := [monotonicity #96]: #98
#102 := [monotonicity #99]: #101
#110 := [trans #102 #108]: #109
#113 := [monotonicity #110]: #112
#89 := (iff #23 #88)
#86 := (iff #22 #85)
#83 := (= #18 #82)
#80 := (= #17 #79)
#77 := (= #16 #76)
#74 := (= #15 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#70 := (= #14 #69)
#67 := (= #13 #66)
#64 := (= #12 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#84 := [monotonicity #71 #81]: #83
#87 := [monotonicity #84]: #86
#90 := [monotonicity #87]: #89
#115 := [trans #90 #113]: #114
#60 := [asserted]: #23
#116 := [mp #60 #115]: #111
#460 := [th-lemma arith farkas -1 1 1 -1 1 #116 #459 #458 #457 #487]: false
#461 := [lemma #460]: #465
#430 := [unit-resolution #461 #427 #451 #436]: #464
#412 := (not #564)
#414 := (or #412 #506)
#415 := [th-lemma arith triangle-eq]: #414
#416 := [unit-resolution #415 #430 #437]: false
#417 := [lemma #416]: #679
#667 := (or #329 #339)
#671 := (or #670 #329 #339)
#340 := (= #63 #69)
#681 := (or #340 #339)
#666 := (or #670 #681)
#676 := (iff #666 #671)
#310 := (or #670 #667)
#315 := (iff #310 #671)
#316 := [rewrite]: #315
#673 := (iff #666 #310)
#668 := (iff #681 #667)
#330 := (iff #340 #329)
#331 := [rewrite]: #330
#669 := [monotonicity #331]: #668
#675 := [monotonicity #669]: #673
#674 := [trans #675 #316]: #676
#672 := [quant-inst #63]: #666
#677 := [mp #672 #674]: #671
#421 := [unit-resolution #677 #704]: #667
#422 := [unit-resolution #421 #417]: #329
#423 := (not #329)
#424 := (or #423 #664)
#413 := [th-lemma arith triangle-eq]: #424
#425 := [unit-resolution #413 #422]: #664
#502 := (not #664)
#402 := (or #276 #658 #502)
#404 := [th-lemma arith assign-bounds -1 -1]: #402
#405 := [unit-resolution #404 #418 #425]: #658
#406 := [unit-resolution #439 #418]: #375
#407 := [unit-resolution #429 #406]: #640
#408 := [unit-resolution #461 #407 #451 #405]: #464
#409 := [unit-resolution #415 #408 #420]: false
#410 := [lemma #409]: #276
#354 := (or #91 #361)
#365 := [def-axiom]: #354
#411 := [unit-resolution #365 #410]: #361
#396 := [monotonicity #411]: #469
#537 := (+ #9 #103)
#538 := (<= #537 0::Int)
#503 := (not #538)
#525 := (<= #79 0::Int)
#641 := (= #79 0::Int)
#627 := (or #91 #641)
#513 := (or #282 #91 #641)
#470 := (or #641 #388)
#514 := (or #282 #470)
#623 := (iff #514 #513)
#474 := (or #282 #627)
#619 := (iff #474 #513)
#620 := [rewrite]: #619
#622 := (iff #514 #474)
#628 := (iff #470 #627)
#472 := (or #641 #91)
#629 := (iff #472 #627)
#630 := [rewrite]: #629
#473 := (iff #470 #472)
#626 := [monotonicity #655]: #473
#631 := [trans #626 #630]: #628
#524 := [monotonicity #631]: #622
#508 := [trans #524 #620]: #623
#515 := [quant-inst #73]: #514
#523 := [mp #515 #508]: #513
#397 := [unit-resolution #523 #710]: #627
#398 := [unit-resolution #397 #410]: #641
#400 := (not #641)
#399 := (or #400 #525)
#401 := [th-lemma arith triangle-eq]: #399
#390 := [unit-resolution #401 #398]: #525
#501 := (not #525)
#391 := (or #501 #502 #503)
#618 := (>= #11 0::Int)
#490 := (= #11 0::Int)
#367 := (f4 #11)
#607 := (f3 #367)
#608 := (= #607 0::Int)
#500 := (not #618)
#467 := [hypothesis]: #500
#609 := (or #608 #618)
#611 := (or #282 #608 #618)
#595 := (or #282 #609)
#598 := (iff #595 #611)
#599 := [rewrite]: #598
#596 := [quant-inst #11]: #595
#600 := [mp #596 #599]: #611
#468 := [unit-resolution #600 #710]: #609
#475 := [unit-resolution #468 #467]: #608
#478 := (= #11 #607)
#364 := (= f6 #367)
#471 := (or #368 #364)
#678 := [quant-inst #10]: #471
#477 := [unit-resolution #678 #697]: #364
#479 := [monotonicity #477]: #478
#481 := [trans #479 #475]: #490
#482 := (not #490)
#483 := (or #482 #618)
#484 := [th-lemma arith triangle-eq]: #483
#485 := [unit-resolution #484 #467 #481]: false
#486 := [lemma #485]: #618
#504 := (or #500 #501 #502 #503)
#507 := [hypothesis]: #538
#496 := [hypothesis]: #664
#497 := [hypothesis]: #618
#498 := [hypothesis]: #525
#499 := [th-lemma arith farkas 1 -1 -1 -1 1 #498 #116 #497 #496 #507]: false
#505 := [lemma #499]: #504
#392 := [unit-resolution #505 #486]: #391
#384 := [unit-resolution #392 #390 #425]: #503
#393 := (not #469)
#394 := (or #393 #538)
#385 := [th-lemma arith triangle-eq]: #394
[unit-resolution #385 #384 #396]: false
unsat
43ad330c8a628ae1380016f60355abf621751ae2 121 0
#2 := false
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
decl f6 :: S2
#13 := f6
#28 := 0::Int
#14 := (f3 f6)
#67 := -1::Int
#74 := (* -1::Int #14)
#9 := (f3 f4)
#86 := (+ #9 #74)
#87 := (<= #86 0::Int)
#90 := (ite #87 f6 f4)
#93 := (f3 #90)
#635 := (= #9 #93)
#364 := (= f4 #90)
#279 := (not #87)
#278 := (= f6 #90)
#477 := (not #278)
#650 := (= #14 #93)
#516 := [hypothesis]: #278
#517 := [monotonicity #516]: #650
#496 := (not #650)
#99 := (* -1::Int #93)
#645 := (+ #14 #99)
#651 := (>= #645 0::Int)
#653 := (not #651)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#100 := (+ #11 #99)
#101 := (<= #100 0::Int)
#102 := (not #101)
#75 := (+ #11 #74)
#76 := (<= #75 0::Int)
#77 := (not #76)
#70 := (* -1::Int #11)
#71 := (+ #9 #70)
#69 := (>= #71 0::Int)
#68 := (not #69)
#80 := (and #68 #77)
#83 := (not #80)
#107 := (or #83 #102)
#110 := (not #107)
#17 := (<= #9 #14)
#18 := (ite #17 f6 f4)
#19 := (f3 #18)
#20 := (< #19 #11)
#15 := (< #14 #11)
#12 := (< #9 #11)
#16 := (and #12 #15)
#21 := (implies #16 #20)
#22 := (not #21)
#113 := (iff #22 #110)
#60 := (not #16)
#61 := (or #60 #20)
#64 := (not #61)
#111 := (iff #64 #110)
#108 := (iff #61 #107)
#105 := (iff #20 #102)
#96 := (< #93 #11)
#103 := (iff #96 #102)
#104 := [rewrite]: #103
#97 := (iff #20 #96)
#94 := (= #19 #93)
#91 := (= #18 #90)
#88 := (iff #17 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#106 := [trans #98 #104]: #105
#84 := (iff #60 #83)
#81 := (iff #16 #80)
#78 := (iff #15 #77)
#79 := [rewrite]: #78
#72 := (iff #12 #68)
#73 := [rewrite]: #72
#82 := [monotonicity #73 #79]: #81
#85 := [monotonicity #82]: #84
#109 := [monotonicity #85 #106]: #108
#112 := [monotonicity #109]: #111
#65 := (iff #22 #64)
#62 := (iff #21 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#114 := [trans #66 #112]: #113
#59 := [asserted]: #22
#115 := [mp #59 #114]: #110
#119 := [not-or-elim #115]: #101
#116 := [not-or-elim #115]: #80
#118 := [and-elim #116]: #77
#652 := [hypothesis]: #651
#647 := [th-lemma arith farkas -1 -1 1 #652 #118 #119]: false
#494 := [lemma #647]: #653
#638 := (or #496 #651)
#639 := [th-lemma arith triangle-eq]: #638
#634 := [unit-resolution #639 #494]: #496
#518 := [unit-resolution #634 #517]: false
#625 := [lemma #518]: #477
#365 := (or #279 #278)
#366 := [def-axiom]: #365
#622 := [unit-resolution #366 #625]: #279
#357 := (or #87 #364)
#368 := [def-axiom]: #357
#623 := [unit-resolution #368 #622]: #364
#626 := [monotonicity #623]: #635
#629 := (not #635)
#636 := (+ #9 #99)
#643 := (>= #636 0::Int)
#473 := (not #643)
#117 := [and-elim #116]: #68
#637 := [hypothesis]: #643
#644 := [th-lemma arith farkas -1 1 1 #637 #117 #119]: false
#475 := [lemma #644]: #473
#630 := (or #629 #643)
#632 := [th-lemma arith triangle-eq]: #630
#527 := [unit-resolution #632 #475]: #629
[unit-resolution #527 #626]: false
unsat
c73d1b046bda60b29e0d2c985905bdcf9c72a5d3 153 0
#2 := false
decl f5 :: S2
#10 := f5
decl f4 :: S2
#8 := f4
#23 := 0::Int
decl f3 :: (-> S2 Int)
#11 := (f3 f5)
#57 := -1::Int
#58 := (* -1::Int #11)
#9 := (f3 f4)
#59 := (+ #9 #58)
#67 := (>= #59 0::Int)
#69 := (ite #67 f4 f5)
#60 := (<= #59 0::Int)
#63 := (ite #60 f5 f4)
#72 := (= #63 #69)
#326 := (= f4 #69)
#483 := (iff #326 #72)
#583 := (iff #72 #326)
#622 := (= #63 f4)
#321 := (= f4 #63)
#236 := (not #60)
#235 := (= f5 #63)
#591 := (not #235)
#587 := (iff #235 #72)
#433 := (iff #72 #235)
#600 := (= #63 f5)
#430 := (iff #600 #235)
#432 := [commutativity]: #430
#594 := (iff #72 #600)
#593 := (= #69 f5)
#254 := (= f5 #69)
#619 := (not #254)
#620 := [hypothesis]: #619
#307 := (or #67 #254)
#642 := [def-axiom]: #307
#343 := [unit-resolution #642 #620]: #67
#327 := (not #67)
#324 := (or #327 #326)
#328 := [def-axiom]: #324
#617 := [unit-resolution #328 #343]: #326
#453 := (= f5 f4)
decl f6 :: (-> Int S2)
#644 := (f6 #9)
#604 := (= #644 f4)
#301 := (= f4 #644)
#18 := (:var 0 S2)
#19 := (f3 #18)
#650 := (pattern #19)
#20 := (f6 #19)
#56 := (= #18 #20)
#651 := (forall (vars (?v0 S2)) (:pat #650) #56)
#81 := (forall (vars (?v0 S2)) #56)
#652 := (iff #81 #651)
#654 := (iff #651 #651)
#655 := [rewrite]: #654
#653 := [rewrite]: #652
#656 := [trans #653 #655]: #652
#175 := (~ #81 #81)
#173 := (~ #56 #56)
#174 := [refl]: #173
#176 := [nnf-pos #174]: #175
#21 := (= #20 #18)
#22 := (forall (vars (?v0 S2)) #21)
#82 := (iff #22 #81)
#79 := (iff #21 #56)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#55 := [asserted]: #22
#86 := [mp #55 #83]: #81
#165 := [mp~ #86 #176]: #81
#657 := [mp #165 #656]: #651
#312 := (not #651)
#313 := (or #312 #301)
#645 := [quant-inst #8]: #313
#342 := [unit-resolution #645 #657]: #301
#610 := [symm #342]: #604
#451 := (= f5 #644)
#431 := (f6 #11)
#608 := (= #431 #644)
#607 := (= #11 #9)
#605 := (= #9 #11)
#329 := (not #321)
#75 := (not #72)
#611 := (iff #75 #329)
#613 := (iff #72 #321)
#334 := (iff #622 #321)
#335 := [commutativity]: #334
#332 := (iff #72 #622)
#621 := (= #69 f4)
#618 := [symm #617]: #621
#333 := [monotonicity #618]: #332
#614 := [trans #333 #335]: #613
#615 := [monotonicity #614]: #611
#14 := (<= #11 #9)
#15 := (ite #14 f4 f5)
#12 := (<= #9 #11)
#13 := (ite #12 f5 f4)
#16 := (= #13 #15)
#17 := (not #16)
#76 := (iff #17 #75)
#73 := (iff #16 #72)
#70 := (= #15 #69)
#66 := (iff #14 #67)
#68 := [rewrite]: #66
#71 := [monotonicity #68]: #70
#64 := (= #13 #63)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#74 := [monotonicity #65 #71]: #73
#77 := [monotonicity #74]: #76
#54 := [asserted]: #17
#78 := [mp #54 #77]: #75
#612 := [mp #78 #615]: #329
#314 := (or #60 #321)
#325 := [def-axiom]: #314
#616 := [unit-resolution #325 #612]: #60
#606 := [th-lemma arith eq-propagate 1 1 #343 #616]: #605
#602 := [symm #606]: #607
#609 := [monotonicity #602]: #608
#638 := (= f5 #431)
#648 := (or #312 #638)
#643 := [quant-inst #10]: #648
#603 := [unit-resolution #643 #657]: #638
#452 := [trans #603 #609]: #451
#595 := [trans #452 #610]: #453
#596 := [trans #595 #617]: #254
#597 := [unit-resolution #620 #596]: false
#598 := [lemma #597]: #254
#599 := [symm #598]: #593
#601 := [monotonicity #599]: #594
#586 := [trans #601 #432]: #433
#589 := [symm #586]: #587
#592 := [hypothesis]: #235
#590 := [mp #592 #589]: #72
#588 := [unit-resolution #78 #590]: false
#473 := [lemma #588]: #591
#322 := (or #236 #235)
#323 := [def-axiom]: #322
#474 := [unit-resolution #323 #473]: #236
#579 := [unit-resolution #325 #474]: #321
#580 := [symm #579]: #622
#468 := [monotonicity #580]: #583
#485 := [symm #468]: #483
#475 := (or #67 #60)
#434 := [th-lemma arith farkas 1 1]: #475
#582 := [unit-resolution #434 #474]: #67
#484 := [unit-resolution #328 #582]: #326
#486 := [mp #484 #485]: #72
[unit-resolution #78 #486]: false
unsat
b97d947e66a9977dcd86c14c12d3e44c5033e56b 279 0
#2 := false
decl f4 :: S2
#8 := f4
decl f5 :: (-> Int S2)
#10 := 0::Int
#11 := (f5 0::Int)
decl f3 :: (-> S2 Int)
#12 := (f3 #11)
#59 := -1::Int
#60 := (* -1::Int #12)
#9 := (f3 f4)
#61 := (+ #9 #60)
#62 := (<= #61 0::Int)
#65 := (ite #62 #11 f4)
#68 := (= f4 #65)
#235 := (= #11 #65)
#71 := (not #68)
#13 := (<= #9 #12)
#14 := (ite #13 #11 f4)
#15 := (= #14 f4)
#16 := (not #15)
#74 := (iff #16 #71)
#53 := (= f4 #14)
#56 := (not #53)
#72 := (iff #56 #71)
#69 := (iff #53 #68)
#66 := (= #14 #65)
#63 := (iff #13 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#75 := [trans #58 #73]: #74
#52 := [asserted]: #16
#76 := [mp #52 #75]: #71
#323 := (or #62 #68)
#314 := [def-axiom]: #323
#606 := [unit-resolution #314 #76]: #62
#321 := (not #62)
#236 := (or #321 #235)
#322 := [def-axiom]: #236
#589 := [unit-resolution #322 #606]: #235
#475 := (= f4 #11)
#325 := (f5 #9)
#473 := (= #325 #11)
#616 := (= #9 0::Int)
#619 := (f3 #325)
#620 := (= #619 0::Int)
#605 := (<= #9 0::Int)
#276 := (<= #12 0::Int)
#645 := (= #12 0::Int)
#22 := (:var 0 Int)
#24 := (f5 #22)
#658 := (pattern #24)
#102 := (>= #22 0::Int)
#104 := (not #102)
#25 := (f3 #24)
#85 := (= #22 #25)
#110 := (or #85 #104)
#659 := (forall (vars (?v0 Int)) (:pat #658) #110)
#115 := (forall (vars (?v0 Int)) #110)
#662 := (iff #115 #659)
#660 := (iff #110 #110)
#661 := [refl]: #660
#663 := [quant-intro #661]: #662
#167 := (~ #115 #115)
#166 := (~ #110 #110)
#163 := [refl]: #166
#168 := [nnf-pos #163]: #167
#26 := (= #25 #22)
#23 := (<= 0::Int #22)
#27 := (implies #23 #26)
#28 := (forall (vars (?v0 Int)) #27)
#118 := (iff #28 #115)
#92 := (not #23)
#93 := (or #92 #85)
#98 := (forall (vars (?v0 Int)) #93)
#116 := (iff #98 #115)
#113 := (iff #93 #110)
#107 := (or #104 #85)
#111 := (iff #107 #110)
#112 := [rewrite]: #111
#108 := (iff #93 #107)
#105 := (iff #92 #104)
#101 := (iff #23 #102)
#103 := [rewrite]: #101
#106 := [monotonicity #103]: #105
#109 := [monotonicity #106]: #108
#114 := [trans #109 #112]: #113
#117 := [quant-intro #114]: #116
#99 := (iff #28 #98)
#96 := (iff #27 #93)
#89 := (implies #23 #85)
#94 := (iff #89 #93)
#95 := [rewrite]: #94
#90 := (iff #27 #89)
#87 := (iff #26 #85)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#97 := [trans #91 #95]: #96
#100 := [quant-intro #97]: #99
#119 := [trans #100 #117]: #118
#84 := [asserted]: #28
#120 := [mp #84 #119]: #115
#164 := [mp~ #120 #168]: #115
#664 := [mp #164 #663]: #659
#628 := (not #659)
#629 := (or #628 #645)
#644 := (>= 0::Int 0::Int)
#301 := (not #644)
#312 := (= 0::Int #12)
#313 := (or #312 #301)
#630 := (or #628 #313)
#626 := (iff #630 #629)
#270 := (iff #629 #629)
#633 := [rewrite]: #270
#291 := (iff #313 #645)
#284 := (or #645 false)
#289 := (iff #284 #645)
#290 := [rewrite]: #289
#625 := (iff #313 #284)
#300 := (iff #301 false)
#1 := true
#649 := (not true)
#304 := (iff #649 false)
#640 := [rewrite]: #304
#639 := (iff #301 #649)
#648 := (iff #644 true)
#643 := [rewrite]: #648
#299 := [monotonicity #643]: #639
#641 := [trans #299 #640]: #300
#646 := (iff #312 #645)
#647 := [rewrite]: #646
#288 := [monotonicity #647 #641]: #625
#627 := [trans #288 #290]: #291
#632 := [monotonicity #627]: #626
#635 := [trans #632 #633]: #626
#631 := [quant-inst #10]: #630
#275 := [mp #631 #635]: #629
#607 := [unit-resolution #275 #664]: #645
#602 := (not #645)
#603 := (or #602 #276)
#608 := [th-lemma arith triangle-eq]: #603
#609 := [unit-resolution #608 #607]: #276
#604 := (not #605)
#610 := [hypothesis]: #604
#451 := [th-lemma arith farkas -1 1 1 #610 #609 #606]: false
#452 := [lemma #451]: #605
#242 := (>= #9 0::Int)
#453 := (not #620)
#595 := [hypothesis]: #453
#343 := (or #242 #620)
#30 := (= #25 0::Int)
#151 := (or #30 #102)
#665 := (forall (vars (?v0 Int)) (:pat #658) #151)
#156 := (forall (vars (?v0 Int)) #151)
#668 := (iff #156 #665)
#666 := (iff #151 #151)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#169 := (~ #156 #156)
#177 := (~ #151 #151)
#178 := [refl]: #177
#170 := [nnf-pos #178]: #169
#29 := (< #22 0::Int)
#31 := (implies #29 #30)
#32 := (forall (vars (?v0 Int)) #31)
#159 := (iff #32 #156)
#122 := (= 0::Int #25)
#128 := (not #29)
#129 := (or #128 #122)
#134 := (forall (vars (?v0 Int)) #129)
#157 := (iff #134 #156)
#154 := (iff #129 #151)
#148 := (or #102 #30)
#152 := (iff #148 #151)
#153 := [rewrite]: #152
#149 := (iff #129 #148)
#146 := (iff #122 #30)
#147 := [rewrite]: #146
#144 := (iff #128 #102)
#139 := (not #104)
#142 := (iff #139 #102)
#143 := [rewrite]: #142
#140 := (iff #128 #139)
#137 := (iff #29 #104)
#138 := [rewrite]: #137
#141 := [monotonicity #138]: #140
#145 := [trans #141 #143]: #144
#150 := [monotonicity #145 #147]: #149
#155 := [trans #150 #153]: #154
#158 := [quant-intro #155]: #157
#135 := (iff #32 #134)
#132 := (iff #31 #129)
#125 := (implies #29 #122)
#130 := (iff #125 #129)
#131 := [rewrite]: #130
#126 := (iff #31 #125)
#123 := (iff #30 #122)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#133 := [trans #127 #131]: #132
#136 := [quant-intro #133]: #135
#160 := [trans #136 #158]: #159
#121 := [asserted]: #32
#161 := [mp #121 #160]: #156
#179 := [mp~ #161 #170]: #156
#670 := [mp #179 #669]: #665
#618 := (not #665)
#622 := (or #618 #242 #620)
#342 := (or #620 #242)
#332 := (or #618 #342)
#611 := (iff #332 #622)
#334 := (or #618 #343)
#614 := (iff #334 #622)
#329 := [rewrite]: #614
#335 := (iff #332 #334)
#617 := (iff #342 #343)
#621 := [rewrite]: #617
#613 := [monotonicity #621]: #335
#615 := [trans #613 #329]: #611
#333 := [quant-inst #9]: #332
#612 := [mp #333 #615]: #622
#596 := [unit-resolution #612 #670]: #343
#597 := [unit-resolution #596 #595]: #242
#598 := (not #242)
#592 := (or #616 #604 #598)
#593 := [th-lemma arith triangle-eq]: #592
#599 := [unit-resolution #593 #597 #452]: #616
#430 := (= #619 #9)
#594 := (= #325 f4)
#326 := (= f4 #325)
#17 := (:var 0 S2)
#18 := (f3 #17)
#650 := (pattern #18)
#19 := (f5 #18)
#78 := (= #17 #19)
#651 := (forall (vars (?v0 S2)) (:pat #650) #78)
#81 := (forall (vars (?v0 S2)) #78)
#652 := (iff #81 #651)
#654 := (iff #651 #651)
#655 := [rewrite]: #654
#653 := [rewrite]: #652
#656 := [trans #653 #655]: #652
#175 := (~ #81 #81)
#173 := (~ #78 #78)
#174 := [refl]: #173
#176 := [nnf-pos #174]: #175
#20 := (= #19 #17)
#21 := (forall (vars (?v0 S2)) #20)
#82 := (iff #21 #81)
#79 := (iff #20 #78)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#77 := [asserted]: #21
#86 := [mp #77 #83]: #81
#165 := [mp~ #86 #176]: #81
#657 := [mp #165 #656]: #651
#324 := (not #651)
#328 := (or #324 #326)
#307 := [quant-inst #8]: #328
#600 := [unit-resolution #307 #657]: #326
#601 := [symm #600]: #594
#432 := [monotonicity #601]: #430
#433 := [trans #432 #599]: #620
#586 := [unit-resolution #595 #433]: false
#587 := [lemma #586]: #620
#590 := (= #9 #619)
#588 := [monotonicity #600]: #590
#591 := [trans #588 #587]: #616
#474 := [monotonicity #591]: #473
#434 := [trans #600 #474]: #475
#582 := [trans #434 #589]: #68
[unit-resolution #76 #582]: false
unsat
44bedd059f2fe5d2be1978674d27658c79da82ad 139 0
#2 := false
#8 := 0::Int
decl f3 :: (-> S2 Int)
decl f4 :: S2
#9 := f4
#10 := (f3 f4)
#628 := (= #10 0::Int)
decl f5 :: (-> Int S2)
#214 := (f5 #10)
#215 := (f3 #214)
#301 := (= #215 0::Int)
#18 := (:var 0 Int)
#20 := (f5 #18)
#638 := (pattern #20)
#82 := (>= #18 0::Int)
#21 := (f3 #20)
#26 := (= #21 0::Int)
#130 := (or #26 #82)
#645 := (forall (vars (?v0 Int)) (:pat #638) #130)
#135 := (forall (vars (?v0 Int)) #130)
#648 := (iff #135 #645)
#646 := (iff #130 #130)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#148 := (~ #135 #135)
#156 := (~ #130 #130)
#157 := [refl]: #156
#149 := [nnf-pos #157]: #148
#25 := (< #18 0::Int)
#27 := (implies #25 #26)
#28 := (forall (vars (?v0 Int)) #27)
#138 := (iff #28 #135)
#101 := (= 0::Int #21)
#107 := (not #25)
#108 := (or #107 #101)
#113 := (forall (vars (?v0 Int)) #108)
#136 := (iff #113 #135)
#133 := (iff #108 #130)
#127 := (or #82 #26)
#131 := (iff #127 #130)
#132 := [rewrite]: #131
#128 := (iff #108 #127)
#125 := (iff #101 #26)
#126 := [rewrite]: #125
#123 := (iff #107 #82)
#83 := (not #82)
#118 := (not #83)
#121 := (iff #118 #82)
#122 := [rewrite]: #121
#119 := (iff #107 #118)
#116 := (iff #25 #83)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#124 := [trans #120 #122]: #123
#129 := [monotonicity #124 #126]: #128
#134 := [trans #129 #132]: #133
#137 := [quant-intro #134]: #136
#114 := (iff #28 #113)
#111 := (iff #27 #108)
#104 := (implies #25 #101)
#109 := (iff #104 #108)
#110 := [rewrite]: #109
#105 := (iff #27 #104)
#102 := (iff #26 #101)
#103 := [rewrite]: #102
#106 := [monotonicity #103]: #105
#112 := [trans #106 #110]: #111
#115 := [quant-intro #112]: #114
#139 := [trans #115 #137]: #138
#100 := [asserted]: #28
#140 := [mp #100 #139]: #135
#158 := [mp~ #140 #149]: #135
#650 := [mp #158 #649]: #645
#53 := (>= #10 0::Int)
#54 := (not #53)
#11 := (<= 0::Int #10)
#12 := (not #11)
#55 := (iff #12 #54)
#51 := (iff #11 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#48 := [asserted]: #12
#57 := [mp #48 #56]: #54
#307 := (not #645)
#286 := (or #307 #53 #301)
#305 := (or #301 #53)
#622 := (or #307 #305)
#625 := (iff #622 #286)
#233 := (or #53 #301)
#280 := (or #307 #233)
#291 := (iff #280 #286)
#292 := [rewrite]: #291
#411 := (iff #622 #280)
#306 := (iff #305 #233)
#303 := [rewrite]: #306
#618 := [monotonicity #303]: #411
#626 := [trans #618 #292]: #625
#624 := [quant-inst #10]: #622
#627 := [mp #624 #626]: #286
#629 := [unit-resolution #627 #57 #650]: #301
#278 := (= #10 #215)
#300 := (= f4 #214)
#13 := (:var 0 S2)
#14 := (f3 #13)
#630 := (pattern #14)
#15 := (f5 #14)
#50 := (= #13 #15)
#631 := (forall (vars (?v0 S2)) (:pat #630) #50)
#60 := (forall (vars (?v0 S2)) #50)
#632 := (iff #60 #631)
#634 := (iff #631 #631)
#635 := [rewrite]: #634
#633 := [rewrite]: #632
#636 := [trans #633 #635]: #632
#154 := (~ #60 #60)
#152 := (~ #50 #50)
#153 := [refl]: #152
#155 := [nnf-pos #153]: #154
#16 := (= #15 #13)
#17 := (forall (vars (?v0 S2)) #16)
#61 := (iff #17 #60)
#58 := (iff #16 #50)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#49 := [asserted]: #17
#65 := [mp #49 #62]: #60
#144 := [mp~ #65 #155]: #60
#637 := [mp #144 #636]: #631
#302 := (not #631)
#293 := (or #302 #300)
#304 := [quant-inst #9]: #293
#619 := [unit-resolution #304 #637]: #300
#283 := [monotonicity #619]: #278
#620 := [trans #283 #629]: #628
#279 := (not #628)
#621 := (or #279 #53)
#263 := [th-lemma arith triangle-eq]: #621
[unit-resolution #263 #57 #620]: false
unsat
edc42ed387023af87c705dd6f98de39e3238ed82 100 0
#2 := false
decl f5 :: (-> Int S2)
#12 := 1::Int
#15 := (f5 1::Int)
decl f4 :: S2
#9 := f4
#16 := (= f4 #15)
decl f3 :: (-> S2 Int)
#10 := (f3 f4)
#254 := (f5 #10)
#365 := (= #254 #15)
#643 := (= #15 #254)
#653 := (= 1::Int #10)
#294 := (= #10 1::Int)
#13 := (<= #10 1::Int)
#8 := 0::Int
#62 := (<= #10 0::Int)
#63 := (not #62)
#69 := (and #13 #63)
#74 := (not #69)
#80 := (or #16 #74)
#85 := (not #80)
#11 := (< 0::Int #10)
#14 := (and #11 #13)
#17 := (implies #14 #16)
#18 := (not #17)
#88 := (iff #18 #85)
#55 := (not #14)
#56 := (or #55 #16)
#59 := (not #56)
#86 := (iff #59 #85)
#83 := (iff #56 #80)
#77 := (or #74 #16)
#81 := (iff #77 #80)
#82 := [rewrite]: #81
#78 := (iff #56 #77)
#75 := (iff #55 #74)
#72 := (iff #14 #69)
#66 := (and #63 #13)
#70 := (iff #66 #69)
#71 := [rewrite]: #70
#67 := (iff #14 #66)
#64 := (iff #11 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#84 := [trans #79 #82]: #83
#87 := [monotonicity #84]: #86
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#89 := [trans #61 #87]: #88
#54 := [asserted]: #18
#90 := [mp #54 #89]: #85
#93 := [not-or-elim #90]: #69
#94 := [and-elim #93]: #13
#95 := [and-elim #93]: #63
#655 := [th-lemma arith eq-propagate 0 0 #95 #94]: #294
#656 := [symm #655]: #653
#350 := [monotonicity #656]: #643
#366 := [symm #350]: #365
#339 := (= f4 #254)
#19 := (:var 0 S2)
#20 := (f3 #19)
#669 := (pattern #20)
#21 := (f5 #20)
#97 := (= #19 #21)
#670 := (forall (vars (?v0 S2)) (:pat #669) #97)
#100 := (forall (vars (?v0 S2)) #97)
#671 := (iff #100 #670)
#673 := (iff #670 #670)
#674 := [rewrite]: #673
#672 := [rewrite]: #671
#675 := [trans #672 #674]: #671
#198 := (~ #100 #100)
#196 := (~ #97 #97)
#197 := [refl]: #196
#199 := [nnf-pos #197]: #198
#22 := (= #21 #19)
#23 := (forall (vars (?v0 S2)) #22)
#101 := (iff #23 #100)
#98 := (iff #22 #97)
#99 := [rewrite]: #98
#102 := [quant-intro #99]: #101
#96 := [asserted]: #23
#105 := [mp #96 #102]: #100
#188 := [mp~ #105 #199]: #100
#676 := [mp #188 #675]: #670
#341 := (not #670)
#332 := (or #341 #339)
#343 := [quant-inst #9]: #332
#642 := [unit-resolution #343 #676]: #339
#367 := [trans #642 #366]: #16
#91 := (not #16)
#92 := [not-or-elim #90]: #91
[unit-resolution #92 #367]: false
unsat
b9679bb727cbc438f48c6a4dec5b8b2daf2b7218 20 0
#2 := false
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (<= #9 #9)
#11 := (not #10)
#58 := (iff #11 false)
#1 := true
#53 := (not true)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #11 #53)
#51 := (iff #10 true)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#48 := [asserted]: #11
[mp #48 #59]: false
unsat
b9301bd3b0ee53e0a92bebd76d84147d60874860 54 0
#2 := false
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#13 := 3::Int
#15 := (* 3::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#14 := (* 3::Int #9)
#16 := (<= #14 #15)
#12 := (<= #9 #11)
#17 := (implies #12 #16)
#18 := (not #17)
#88 := (iff #18 false)
#56 := (not #12)
#57 := (or #56 #16)
#60 := (not #57)
#86 := (iff #60 false)
#1 := true
#81 := (not true)
#84 := (iff #81 false)
#85 := [rewrite]: #84
#82 := (iff #60 #81)
#79 := (iff #57 true)
#24 := 0::Int
#63 := -1::Int
#64 := (* -1::Int #11)
#65 := (+ #9 #64)
#66 := (<= #65 0::Int)
#69 := (not #66)
#74 := (or #69 #66)
#77 := (iff #74 true)
#78 := [rewrite]: #77
#75 := (iff #57 #74)
#72 := (iff #16 #66)
#73 := [rewrite]: #72
#70 := (iff #56 #69)
#67 := (iff #12 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#76 := [monotonicity #71 #73]: #75
#80 := [trans #76 #78]: #79
#83 := [monotonicity #80]: #82
#87 := [trans #83 #85]: #86
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#89 := [trans #62 #87]: #88
#55 := [asserted]: #18
[mp #55 #89]: false
unsat
c4a330894a70d3f881160029887465aa3141c214 59 0
#2 := false
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#13 := 3::Int
#15 := (* 3::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#14 := (* 3::Int #9)
#16 := (< #14 #15)
#12 := (< #9 #11)
#17 := (implies #12 #16)
#18 := (not #17)
#93 := (iff #18 false)
#56 := (not #12)
#57 := (or #56 #16)
#60 := (not #57)
#91 := (iff #60 false)
#1 := true
#86 := (not true)
#89 := (iff #86 false)
#90 := [rewrite]: #89
#87 := (iff #60 #86)
#84 := (iff #57 true)
#24 := 0::Int
#63 := -1::Int
#66 := (* -1::Int #11)
#67 := (+ #9 #66)
#65 := (>= #67 0::Int)
#64 := (not #65)
#78 := (or #65 #64)
#82 := (iff #78 true)
#83 := [rewrite]: #82
#80 := (iff #57 #78)
#79 := (iff #16 #64)
#77 := [rewrite]: #79
#75 := (iff #56 #65)
#70 := (not #64)
#73 := (iff #70 #65)
#74 := [rewrite]: #73
#71 := (iff #56 #70)
#68 := (iff #12 #64)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#81 := [monotonicity #76 #77]: #80
#85 := [trans #81 #83]: #84
#88 := [monotonicity #85]: #87
#92 := [trans #88 #90]: #91
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#94 := [trans #62 #92]: #93
#55 := [asserted]: #18
[mp #55 #94]: false
unsat
2bed53712dbbe16227edc09bc45ecffcb1d2f5df 55 0
#2 := false
#21 := 0::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#60 := -1::Int
#63 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#64 := (+ #9 #63)
#74 := (<= #64 0::Int)
#87 := (not #74)
#62 := (>= #64 0::Int)
#77 := (or #62 #74)
#80 := (not #77)
#13 := (<= #9 #11)
#12 := (< #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#83 := (iff #15 #80)
#53 := (not #12)
#54 := (or #53 #13)
#57 := (not #54)
#81 := (iff #57 #80)
#78 := (iff #54 #77)
#75 := (iff #13 #74)
#76 := [rewrite]: #75
#72 := (iff #53 #62)
#61 := (not #62)
#67 := (not #61)
#70 := (iff #67 #62)
#71 := [rewrite]: #70
#68 := (iff #53 #67)
#65 := (iff #12 #61)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#79 := [monotonicity #73 #76]: #78
#82 := [monotonicity #79]: #81
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#84 := [trans #59 #82]: #83
#52 := [asserted]: #15
#85 := [mp #52 #84]: #80
#88 := [not-or-elim #85]: #87
#86 := [not-or-elim #85]: #61
#247 := (or #74 #62)
#333 := [th-lemma arith farkas 1 1]: #247
#248 := [unit-resolution #333 #86]: #74
[unit-resolution #248 #88]: false
unsat
9cf9e7b2664431b1fdbd4f06158a61574edebcdb 76 0
#2 := false
#23 := 0::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#73 := -1::Int
#74 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#75 := (+ #9 #74)
#80 := (>= #75 0::Int)
#76 := (<= #75 -1::Int)
#332 := (not #76)
#79 := (not #80)
#366 := [hypothesis]: #79
#345 := (or #332 #80)
#90 := (iff #76 #80)
#13 := 1::Int
#14 := (+ #9 1::Int)
#15 := (<= #14 #11)
#12 := (< #9 #11)
#16 := (iff #12 #15)
#17 := (not #16)
#93 := (iff #17 #90)
#67 := (not #12)
#55 := (+ 1::Int #9)
#58 := (<= #55 #11)
#68 := (iff #58 #67)
#91 := (iff #68 #90)
#88 := (iff #67 #80)
#83 := (not #79)
#86 := (iff #83 #80)
#87 := [rewrite]: #86
#84 := (iff #67 #83)
#81 := (iff #12 #79)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#89 := [trans #85 #87]: #88
#77 := (iff #58 #76)
#78 := [rewrite]: #77
#92 := [monotonicity #78 #89]: #91
#71 := (iff #17 #68)
#61 := (iff #12 #58)
#64 := (not #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #17 #64)
#62 := (iff #16 #61)
#59 := (iff #15 #58)
#56 := (= #14 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#72 := [trans #66 #70]: #71
#94 := [trans #72 #92]: #93
#54 := [asserted]: #17
#95 := [mp #54 #94]: #90
#254 := (not #90)
#343 := (or #332 #80 #254)
#344 := [def-axiom]: #343
#342 := [unit-resolution #344 #95]: #345
#367 := [unit-resolution #342 #366]: #332
#261 := [th-lemma arith farkas 1 1 #366 #367]: false
#637 := [lemma #261]: #80
#638 := (or #79 #332)
#360 := [th-lemma arith farkas 1 1]: #638
#361 := [unit-resolution #360 #637]: #332
#340 := (or #76 #79)
#339 := (or #76 #79 #254)
#255 := [def-axiom]: #339
#341 := [unit-resolution #255 #95]: #340
[unit-resolution #341 #361 #637]: false
unsat
f7777bc3670f2a6e6a453e3903eb4ea7d041a411 17 0
#2 := false
decl f3 :: (-> S2 Int)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (< #9 #9)
#11 := (not #10)
#12 := (not #11)
#54 := (iff #12 false)
#52 := (iff #10 false)
#53 := [rewrite]: #52
#50 := (iff #12 #10)
#51 := [rewrite]: #50
#55 := [trans #51 #53]: #54
#49 := [asserted]: #12
[mp #49 #55]: false
unsat
ac912717c3b3e386cbd43673c73b0e304d1f9d81 79 0
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
#14 := (f3 f6)
#73 := -1::Int
#74 := (* -1::Int #14)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#75 := (+ #11 #74)
#76 := (<= #75 0::Int)
#86 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#87 := (+ #9 #86)
#88 := (<= #87 0::Int)
#91 := (not #88)
#82 := (+ #9 #74)
#83 := (<= #82 0::Int)
#79 := (not #76)
#100 := (or #79 #83 #91)
#105 := (not #100)
#16 := (<= #9 #14)
#15 := (<= #11 #14)
#17 := (implies #15 #16)
#12 := (<= #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#108 := (iff #19 #105)
#57 := (not #15)
#58 := (or #57 #16)
#64 := (not #12)
#65 := (or #64 #58)
#70 := (not #65)
#106 := (iff #70 #105)
#103 := (iff #65 #100)
#94 := (or #79 #83)
#97 := (or #91 #94)
#101 := (iff #97 #100)
#102 := [rewrite]: #101
#98 := (iff #65 #97)
#95 := (iff #58 #94)
#84 := (iff #16 #83)
#85 := [rewrite]: #84
#80 := (iff #57 #79)
#77 := (iff #15 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#96 := [monotonicity #81 #85]: #95
#92 := (iff #64 #91)
#89 := (iff #12 #88)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#99 := [monotonicity #93 #96]: #98
#104 := [trans #99 #102]: #103
#107 := [monotonicity #104]: #106
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #12 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#109 := [trans #72 #107]: #108
#56 := [asserted]: #19
#110 := [mp #56 #109]: #105
#111 := [not-or-elim #110]: #76
#112 := (not #83)
#113 := [not-or-elim #110]: #112
#114 := [not-or-elim #110]: #88
[th-lemma arith farkas 1 -1 1 #114 #113 #111]: false
unsat
365ff6b1c9b578eb42fa66aaa5d0aea486a2eddc 84 0
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
#14 := (f3 f6)
#73 := -1::Int
#74 := (* -1::Int #14)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#75 := (+ #11 #74)
#76 := (<= #75 0::Int)
#88 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#89 := (+ #9 #88)
#87 := (>= #89 0::Int)
#82 := (+ #9 #74)
#83 := (<= #82 0::Int)
#79 := (not #76)
#105 := (or #79 #83 #87)
#110 := (not #105)
#16 := (<= #9 #14)
#15 := (<= #11 #14)
#17 := (implies #15 #16)
#12 := (< #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#113 := (iff #19 #110)
#57 := (not #15)
#58 := (or #57 #16)
#64 := (not #12)
#65 := (or #64 #58)
#70 := (not #65)
#111 := (iff #70 #110)
#108 := (iff #65 #105)
#99 := (or #79 #83)
#102 := (or #87 #99)
#106 := (iff #102 #105)
#107 := [rewrite]: #106
#103 := (iff #65 #102)
#100 := (iff #58 #99)
#84 := (iff #16 #83)
#85 := [rewrite]: #84
#80 := (iff #57 #79)
#77 := (iff #15 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#101 := [monotonicity #81 #85]: #100
#97 := (iff #64 #87)
#86 := (not #87)
#92 := (not #86)
#95 := (iff #92 #87)
#96 := [rewrite]: #95
#93 := (iff #64 #92)
#90 := (iff #12 #86)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#98 := [trans #94 #96]: #97
#104 := [monotonicity #98 #101]: #103
#109 := [trans #104 #107]: #108
#112 := [monotonicity #109]: #111
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #12 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#114 := [trans #72 #112]: #113
#56 := [asserted]: #19
#115 := [mp #56 #114]: #110
#116 := [not-or-elim #115]: #76
#117 := (not #83)
#118 := [not-or-elim #115]: #117
#119 := [not-or-elim #115]: #86
[th-lemma arith farkas 1 1 1 #119 #118 #116]: false
unsat
e12622a9e47df4adc7f79d99b52b09f638c77731 84 0
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#73 := -1::Int
#91 := (* -1::Int #11)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#92 := (+ #9 #91)
#93 := (<= #92 0::Int)
#96 := (not #93)
decl f6 :: S2
#13 := f6
#14 := (f3 f6)
#76 := (* -1::Int #14)
#87 := (+ #9 #76)
#88 := (<= #87 0::Int)
#77 := (+ #11 #76)
#75 := (>= #77 0::Int)
#105 := (or #75 #88 #96)
#110 := (not #105)
#16 := (<= #9 #14)
#15 := (< #11 #14)
#17 := (implies #15 #16)
#12 := (<= #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#113 := (iff #19 #110)
#57 := (not #15)
#58 := (or #57 #16)
#64 := (not #12)
#65 := (or #64 #58)
#70 := (not #65)
#111 := (iff #70 #110)
#108 := (iff #65 #105)
#99 := (or #75 #88)
#102 := (or #96 #99)
#106 := (iff #102 #105)
#107 := [rewrite]: #106
#103 := (iff #65 #102)
#100 := (iff #58 #99)
#89 := (iff #16 #88)
#90 := [rewrite]: #89
#85 := (iff #57 #75)
#74 := (not #75)
#80 := (not #74)
#83 := (iff #80 #75)
#84 := [rewrite]: #83
#81 := (iff #57 #80)
#78 := (iff #15 #74)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#86 := [trans #82 #84]: #85
#101 := [monotonicity #86 #90]: #100
#97 := (iff #64 #96)
#94 := (iff #12 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#104 := [monotonicity #98 #101]: #103
#109 := [trans #104 #107]: #108
#112 := [monotonicity #109]: #111
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #12 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#114 := [trans #72 #112]: #113
#56 := [asserted]: #19
#115 := [mp #56 #114]: #110
#119 := [not-or-elim #115]: #93
#117 := (not #88)
#118 := [not-or-elim #115]: #117
#116 := [not-or-elim #115]: #74
[th-lemma arith farkas 1 1 1 #116 #118 #119]: false
unsat
ebcd832e06109faf50094f84d5df0d23229689c7 89 0
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
#14 := (f3 f6)
#73 := -1::Int
#76 := (* -1::Int #14)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#89 := (+ #9 #76)
#88 := (>= #89 0::Int)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#94 := (* -1::Int #11)
#95 := (+ #9 #94)
#93 := (>= #95 0::Int)
#87 := (not #88)
#77 := (+ #11 #76)
#75 := (>= #77 0::Int)
#111 := (or #75 #87 #93)
#116 := (not #111)
#16 := (< #9 #14)
#15 := (< #11 #14)
#17 := (implies #15 #16)
#12 := (< #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#119 := (iff #19 #116)
#57 := (not #15)
#58 := (or #57 #16)
#64 := (not #12)
#65 := (or #64 #58)
#70 := (not #65)
#117 := (iff #70 #116)
#114 := (iff #65 #111)
#105 := (or #75 #87)
#108 := (or #93 #105)
#112 := (iff #108 #111)
#113 := [rewrite]: #112
#109 := (iff #65 #108)
#106 := (iff #58 #105)
#90 := (iff #16 #87)
#91 := [rewrite]: #90
#85 := (iff #57 #75)
#74 := (not #75)
#80 := (not #74)
#83 := (iff #80 #75)
#84 := [rewrite]: #83
#81 := (iff #57 #80)
#78 := (iff #15 #74)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#86 := [trans #82 #84]: #85
#107 := [monotonicity #86 #91]: #106
#103 := (iff #64 #93)
#92 := (not #93)
#98 := (not #92)
#101 := (iff #98 #93)
#102 := [rewrite]: #101
#99 := (iff #64 #98)
#96 := (iff #12 #92)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#104 := [trans #100 #102]: #103
#110 := [monotonicity #104 #107]: #109
#115 := [trans #110 #113]: #114
#118 := [monotonicity #115]: #117
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #12 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#120 := [trans #72 #118]: #119
#56 := [asserted]: #19
#121 := [mp #56 #120]: #116
#123 := [not-or-elim #121]: #88
#122 := [not-or-elim #121]: #74
#124 := [not-or-elim #121]: #92
[th-lemma arith farkas 1 1 1 #124 #122 #123]: false
unsat
6a10eea7e2df496adabc8a3fce58fc3e10eefb8c 73 0
#2 := false
#26 := 0::Int
decl f3 :: (-> S2 Int)
decl f6 :: S2
#13 := f6
#14 := (f3 f6)
#65 := -1::Int
#73 := (* -1::Int #14)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#84 := (+ #9 #73)
#85 := (<= #84 0::Int)
#86 := (not #85)
decl f5 :: S2
#10 := f5
#11 := (f3 f5)
#74 := (+ #11 #73)
#72 := (>= #74 0::Int)
#75 := (not #72)
#68 := (* -1::Int #11)
#69 := (+ #9 #68)
#67 := (>= #69 0::Int)
#66 := (not #67)
#78 := (and #66 #75)
#81 := (not #78)
#96 := (or #81 #85)
#99 := (not #96)
#17 := (< #14 #9)
#18 := (not #17)
#15 := (< #11 #14)
#12 := (< #9 #11)
#16 := (and #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#102 := (iff #20 #99)
#58 := (not #16)
#59 := (or #58 #18)
#62 := (not #59)
#100 := (iff #62 #99)
#97 := (iff #59 #96)
#94 := (iff #18 #85)
#89 := (not #86)
#92 := (iff #89 #85)
#93 := [rewrite]: #92
#90 := (iff #18 #89)
#87 := (iff #17 #86)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#95 := [trans #91 #93]: #94
#82 := (iff #58 #81)
#79 := (iff #16 #78)
#76 := (iff #15 #75)
#77 := [rewrite]: #76
#70 := (iff #12 #66)
#71 := [rewrite]: #70
#80 := [monotonicity #71 #77]: #79
#83 := [monotonicity #80]: #82
#98 := [monotonicity #83 #95]: #97
#101 := [monotonicity #98]: #100
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#103 := [trans #64 #101]: #102
#57 := [asserted]: #20
#104 := [mp #57 #103]: #99
#108 := [not-or-elim #104]: #86
#105 := [not-or-elim #104]: #78
#107 := [and-elim #105]: #75
#106 := [and-elim #105]: #66
[th-lemma arith farkas 1 1 1 #106 #107 #108]: false
unsat
13113e7e58018c6880ea2f28cb5993925582157c 17 0
#2 := false
#8 := 0::Int
#9 := (= 0::Int 0::Int)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
1056717a1a09b6c4176c8b78807918dcff0f057a 25 0
#2 := false
#8 := 0::Int
#9 := (- 0::Int)
#10 := (= 0::Int #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= 0::Int 0::Int)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#32 := (= #9 0::Int)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
52057012d500bf36246da2f6fe0e5f4fead2daa8 17 0
#2 := false
#8 := 1::Int
#9 := (= 1::Int 1::Int)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
3896508560f827467603181397afe4ea7af60b1b 34 0
#2 := false
#8 := 1::Int
#9 := (- 1::Int)
#10 := (= #9 1::Int)
#11 := (not #10)
#12 := (not #11)
#55 := (iff #12 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#48 := (iff #11 true)
#43 := (not false)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#41 := (iff #10 false)
#33 := -1::Int
#36 := (= -1::Int 1::Int)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (= #9 -1::Int)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#32 := [asserted]: #12
[mp #32 #56]: false
unsat
abda142ed88ecbb996b79ee8162fe49b344031b3 40 0
#2 := false
#12 := 567::Int
#10 := 345::Int
#8 := 123::Int
#9 := (- 123::Int)
#11 := (+ #9 345::Int)
#13 := (< #11 567::Int)
#14 := (not #13)
#61 := (iff #14 false)
#41 := 222::Int
#46 := (< 222::Int 567::Int)
#49 := (not #46)
#59 := (iff #49 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #49 #54)
#52 := (iff #46 true)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#44 := (= #11 222::Int)
#35 := -123::Int
#38 := (+ -123::Int 345::Int)
#42 := (= #38 222::Int)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #9 -123::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#62 := [trans #51 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
52ee66296beec0b85b106a54f57287052dcd7f89 30 0
#2 := false
#10 := 2345678901::Int
#8 := 123456789::Int
#9 := (- 123456789::Int)
#11 := (< #9 2345678901::Int)
#12 := (not #11)
#51 := (iff #12 false)
#33 := -123456789::Int
#36 := (< -123456789::Int 2345678901::Int)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#34 := (= #9 -123456789::Int)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
cc3c0a2b103dc2bb6601e0a4c48514f8376c297a 26 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := 0::Int
#10 := (+ f3 0::Int)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
fd47edbfbac88ee3d94d488f80d6a8ea5bf561a8 26 0
#2 := false
decl f3 :: Int
#9 := f3
#8 := 0::Int
#10 := (+ 0::Int f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
567ac5e5181b99e579edcd5a30f3a17097bdc207 29 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#11 := (+ f4 f3)
#10 := (+ f3 f4)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
2fe26988f5a773923b0b53e62aca5ed502114903 33 0
#2 := false
decl f5 :: Int
#10 := f5
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#13 := (+ f3 f4)
#14 := (+ #13 f5)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#51 := (iff #16 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #16 #46)
#44 := (iff #15 true)
#39 := (= #12 #12)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #15 #39)
#37 := (= #14 #12)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#36 := [asserted]: #16
[mp #36 #52]: false
unsat
aa9232285ab331eb0061966d9cc17b455a15a8b2 45 0
#2 := false
decl f4 :: Int
#9 := f4
#13 := (- f4)
decl f3 :: Int
#8 := f3
#14 := (= f3 #13)
#11 := 0::Int
#10 := (+ f3 f4)
#12 := (= #10 0::Int)
#15 := (iff #12 #14)
#16 := (not #15)
#65 := (iff #16 false)
#50 := (not #12)
#37 := -1::Int
#38 := (* -1::Int f4)
#41 := (= f3 #38)
#51 := (iff #41 #50)
#63 := (iff #51 false)
#58 := (iff #12 #50)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #51 #58)
#56 := (iff #41 #12)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#54 := (iff #16 #51)
#44 := (iff #12 #41)
#47 := (not #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #16 #47)
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#39 := (= #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#66 := [trans #55 #64]: #65
#36 := [asserted]: #16
[mp #36 #66]: false
unsat
3f272fd1319f78b4692aa5dda96df513e4645a9a 26 0
#2 := false
#8 := 1::Int
#9 := (- 1::Int)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -1::Int
#35 := (= -1::Int -1::Int)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -1::Int)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
e2a7b8949fe3993d5fd2b8dd48b8d65ca6a5debe 26 0
#2 := false
#8 := 3::Int
#9 := (- 3::Int)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -3::Int
#35 := (= -3::Int -3::Int)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -3::Int)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
6f4d8de64d01428967bef903e3d6b1e134e99c36 58 0
#2 := false
decl f3 :: Int
#8 := f3
#10 := 0::Int
#12 := (< 0::Int f3)
#9 := (- f3)
#11 := (< #9 0::Int)
#13 := (iff #11 #12)
#14 := (not #13)
#79 := (iff #14 false)
#53 := (not #12)
#35 := -1::Int
#36 := (* -1::Int f3)
#39 := (< #36 0::Int)
#54 := (iff #39 #53)
#77 := (iff #54 false)
#59 := (<= f3 0::Int)
#60 := (not #59)
#72 := (iff #60 #59)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #54 #72)
#70 := (iff #53 #59)
#65 := (not #60)
#68 := (iff #65 #59)
#69 := [rewrite]: #68
#66 := (iff #53 #65)
#63 := (iff #12 #60)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #39 #60)
#62 := [rewrite]: #61
#74 := [monotonicity #62 #71]: #73
#78 := [trans #74 #76]: #77
#57 := (iff #14 #54)
#45 := (iff #12 #39)
#50 := (not #45)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #45)
#42 := (iff #39 #12)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #13 #42)
#40 := (iff #11 #39)
#37 := (= #9 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#49 := [trans #44 #47]: #48
#52 := [monotonicity #49]: #51
#58 := [trans #52 #56]: #57
#80 := [trans #58 #78]: #79
#34 := [asserted]: #14
[mp #34 #80]: false
unsat
564c0a73934063d90154f68605ccc2409e9fa075 61 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#11 := (- f3)
#12 := (< #11 0::Int)
#10 := (< 0::Int f3)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Int
#36 := (* -1::Int f3)
#39 := (< #36 0::Int)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (<= f3 0::Int)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
62e66d279aac101c29ec561e3c1aa729670803a3 61 0
#2 := false
decl f3 :: Int
#8 := f3
#11 := (- f3)
#9 := 0::Int
#12 := (< 0::Int #11)
#10 := (< f3 0::Int)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Int
#36 := (* -1::Int f3)
#39 := (< 0::Int #36)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (>= f3 0::Int)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
36e3e0be50e13bfd349cb4dd2f24507689560060 26 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := 0::Int
#10 := (- f3 0::Int)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
967752e39c59bb7230849d17d3298eda01ba97f0 32 0
#2 := false
decl f3 :: Int
#9 := f3
#11 := (- f3)
#8 := 0::Int
#10 := (- 0::Int f3)
#12 := (= #10 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := -1::Int
#35 := (* -1::Int f3)
#40 := (= #35 #35)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (= #11 #35)
#39 := [rewrite]: #38
#36 := (= #10 #35)
#37 := [rewrite]: #36
#42 := [monotonicity #37 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
d66c19efaea02c4da5b9f725e7d8d3733e147b06 64 0
#2 := false
#12 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#11 := (- f3 f4)
#13 := (< #11 0::Int)
#10 := (< f3 f4)
#14 := (implies #10 #13)
#15 := (not #14)
#83 := (iff #15 false)
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#41 := (< #38 0::Int)
#47 := (not #10)
#48 := (or #47 #41)
#53 := (not #48)
#81 := (iff #53 false)
#1 := true
#76 := (not true)
#79 := (iff #76 false)
#80 := [rewrite]: #79
#77 := (iff #53 #76)
#74 := (iff #48 true)
#57 := (>= #38 0::Int)
#56 := (not #57)
#69 := (or #57 #56)
#72 := (iff #69 true)
#73 := [rewrite]: #72
#70 := (iff #48 #69)
#67 := (iff #41 #56)
#68 := [rewrite]: #67
#65 := (iff #47 #57)
#60 := (not #56)
#63 := (iff #60 #57)
#64 := [rewrite]: #63
#61 := (iff #47 #60)
#58 := (iff #10 #56)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#71 := [monotonicity #66 #68]: #70
#75 := [trans #71 #73]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#44 := (implies #10 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #14 #44)
#42 := (iff #13 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#84 := [trans #55 #82]: #83
#35 := [asserted]: #15
[mp #35 #84]: false
unsat
b4a0e97ac26aaa849b0de7e06daad43acc3105c3 44 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#11 := (- f4 f3)
#12 := (- #11)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#63 := (iff #14 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #14 #58)
#56 := (iff #13 true)
#35 := -1::Int
#36 := (* -1::Int f4)
#37 := (+ f3 #36)
#51 := (= #37 #37)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (= #12 #37)
#40 := (* -1::Int f3)
#41 := (+ #40 f4)
#44 := (- #41)
#47 := (= #44 #37)
#48 := [rewrite]: #47
#45 := (= #12 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#38 := (= #10 #37)
#39 := [rewrite]: #38
#53 := [monotonicity #39 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#34 := [asserted]: #14
[mp #34 #64]: false
unsat
f0c92a75694daf72953722c261a7985603bb0bf1 42 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#11 := (- f4)
#12 := (+ #11 f3)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#61 := (iff #14 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #14 #56)
#54 := (iff #13 true)
#35 := -1::Int
#36 := (* -1::Int f4)
#37 := (+ f3 #36)
#49 := (= #37 #37)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #13 #49)
#47 := (= #12 #37)
#42 := (+ #36 f3)
#45 := (= #42 #37)
#46 := [rewrite]: #45
#43 := (= #12 #42)
#40 := (= #11 #36)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#38 := (= #10 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
8923322f057ed7cee840582974da3314f48d3c1d 48 0
#2 := false
decl f5 :: Int
#11 := f5
decl f4 :: Int
#9 := f4
#13 := (+ f4 f5)
decl f3 :: Int
#8 := f3
#14 := (- f3 #13)
#10 := (- f3 f4)
#12 := (- #10 f5)
#15 := (= #12 #14)
#16 := (not #15)
#66 := (iff #16 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #16 #61)
#59 := (iff #15 true)
#37 := -1::Int
#45 := (* -1::Int f5)
#38 := (* -1::Int f4)
#46 := (+ #38 #45)
#47 := (+ f3 #46)
#54 := (= #47 #47)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #15 #54)
#52 := (= #14 #47)
#53 := [rewrite]: #52
#50 := (= #12 #47)
#39 := (+ f3 #38)
#42 := (- #39 f5)
#48 := (= #42 #47)
#49 := [rewrite]: #48
#43 := (= #12 #42)
#40 := (= #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#51 := [trans #44 #49]: #50
#56 := [monotonicity #51 #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#36 := [asserted]: #16
[mp #36 #67]: false
unsat
1d827628bfc865305d062976dd88c9223e790cae 26 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#10 := (* f3 0::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Int 0::Int)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
268dc80516cad8e0537058bf237f1fac47b44dd9 26 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#10 := (* 0::Int f3)
#11 := (= #10 0::Int)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Int 0::Int)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
d2498e6f1e4e863ac89298e0d00130df98aa8bf9 26 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := 1::Int
#10 := (* f3 1::Int)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
d26161837b1f05cfdb35001c90ead1460ca18bec 26 0
#2 := false
decl f3 :: Int
#9 := f3
#8 := 1::Int
#10 := (* 1::Int f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
855f0121ef7db6c69742bc5a6c6901549956abdf 40 0
#2 := false
decl f3 :: Int
#8 := f3
#12 := (- f3)
#9 := 1::Int
#10 := (- 1::Int)
#11 := (* f3 #10)
#13 := (= #11 #12)
#14 := (not #13)
#60 := (iff #14 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#35 := -1::Int
#41 := (* -1::Int f3)
#48 := (= #41 #41)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (= #12 #41)
#47 := [rewrite]: #46
#44 := (= #11 #41)
#38 := (* f3 -1::Int)
#42 := (= #38 #41)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #10 -1::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#50 := [monotonicity #45 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#34 := [asserted]: #14
[mp #34 #61]: false
unsat
5d21e0de4aaaaeca789bd4695bdd117eea163e38 35 0
#2 := false
decl f3 :: Int
#10 := f3
#12 := (- f3)
#8 := 1::Int
#9 := (- 1::Int)
#11 := (* #9 f3)
#13 := (= #11 #12)
#14 := (not #13)
#55 := (iff #14 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #14 #50)
#48 := (iff #13 true)
#35 := -1::Int
#38 := (* -1::Int f3)
#43 := (= #38 #38)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (= #12 #38)
#42 := [rewrite]: #41
#39 := (= #11 #38)
#36 := (= #9 -1::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [monotonicity #40 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#34 := [asserted]: #14
[mp #34 #56]: false
unsat
9d12a5c7c6846be4a5b4be5e467c3f4cb34e4d39 28 0
#2 := false
#8 := 3::Int
decl f3 :: Int
#9 := f3
#11 := (* f3 3::Int)
#10 := (* 3::Int f3)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
c3a19f1e9eadfa9e1e60ed3204d9afca1d3962d0 64 0
#2 := false
#8 := 0::Int
#15 := (- 0::Int)
#16 := (div #15 #15)
#14 := (div 0::Int 0::Int)
#11 := (< 0::Int 0::Int)
#12 := (and #11 #11)
#13 := (or #12 #12)
#17 := (ite #13 #14 #16)
#9 := (= 0::Int 0::Int)
#10 := (or #9 #9)
#18 := (ite #10 0::Int #17)
#19 := (= #18 0::Int)
#20 := (not #19)
#85 := (iff #20 false)
#1 := true
#80 := (not true)
#83 := (iff #80 false)
#84 := [rewrite]: #83
#81 := (iff #20 #80)
#78 := (iff #19 true)
#41 := (iff #9 true)
#42 := [rewrite]: #41
#76 := (iff #19 #9)
#70 := (ite true 0::Int #14)
#73 := (= #70 0::Int)
#74 := [rewrite]: #73
#71 := (= #18 #70)
#68 := (= #17 #14)
#63 := (ite #11 #14 #14)
#66 := (= #63 #14)
#67 := [rewrite]: #66
#64 := (= #17 #63)
#61 := (= #16 #14)
#59 := (= #15 0::Int)
#60 := [rewrite]: #59
#62 := [monotonicity #60 #60]: #61
#57 := (iff #13 #11)
#52 := (or #11 #11)
#55 := (iff #52 #11)
#56 := [rewrite]: #55
#53 := (iff #13 #52)
#50 := (iff #12 #11)
#51 := [rewrite]: #50
#54 := [monotonicity #51 #51]: #53
#58 := [trans #54 #56]: #57
#65 := [monotonicity #58 #62]: #64
#69 := [trans #65 #67]: #68
#48 := (iff #10 true)
#43 := (or true true)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #10 #43)
#45 := [monotonicity #42 #42]: #44
#49 := [trans #45 #47]: #48
#72 := [monotonicity #49 #69]: #71
#75 := [trans #72 #74]: #19
#77 := [monotonicity #75]: #76
#79 := [trans #77 #42]: #78
#82 := [monotonicity #79]: #81
#86 := [trans #82 #84]: #85
#40 := [asserted]: #20
[mp #40 #86]: false
unsat
c39d13f4d2f865f3613c6b94cb5e51281b48ea9a 69 0
#2 := false
#9 := 0::Int
#21 := (- 0::Int)
decl f3 :: Int
#8 := f3
#20 := (- f3)
#22 := (div #20 #21)
#19 := (div f3 0::Int)
#14 := (< 0::Int 0::Int)
#16 := (< f3 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int f3)
#15 := (and #13 #14)
#18 := (or #15 #17)
#23 := (ite #18 #19 #22)
#11 := (= 0::Int 0::Int)
#10 := (= f3 0::Int)
#12 := (or #10 #11)
#24 := (ite #12 0::Int #23)
#25 := (= #24 0::Int)
#26 := (not #25)
#89 := (iff #26 false)
#1 := true
#84 := (not true)
#87 := (iff #84 false)
#88 := [rewrite]: #87
#85 := (iff #26 #84)
#82 := (iff #25 true)
#47 := (iff #11 true)
#48 := [rewrite]: #47
#80 := (iff #25 #11)
#62 := -1::Int
#63 := (* -1::Int f3)
#68 := (div #63 0::Int)
#56 := (and #14 #16)
#59 := (or #15 #56)
#71 := (ite #59 #19 #68)
#74 := (ite true 0::Int #71)
#77 := (= #74 0::Int)
#78 := [rewrite]: #77
#75 := (= #24 #74)
#72 := (= #23 #71)
#69 := (= #22 #68)
#66 := (= #21 0::Int)
#67 := [rewrite]: #66
#64 := (= #20 #63)
#65 := [rewrite]: #64
#70 := [monotonicity #65 #67]: #69
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#73 := [monotonicity #61 #70]: #72
#54 := (iff #12 true)
#49 := (or #10 true)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #12 #49)
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#76 := [monotonicity #55 #73]: #75
#79 := [trans #76 #78]: #25
#81 := [monotonicity #79]: #80
#83 := [trans #81 #48]: #82
#86 := [monotonicity #83]: #85
#90 := [trans #86 #88]: #89
#46 := [asserted]: #26
[mp #46 #90]: false
unsat
bea53353954aa4070bfc4dfeef54e3441dcd8b82 73 0
#2 := false
#8 := 0::Int
#10 := 1::Int
#19 := (- 1::Int)
#18 := (- 0::Int)
#20 := (div #18 #19)
#17 := (div 0::Int 1::Int)
#14 := (< 0::Int 1::Int)
#13 := (< 0::Int 0::Int)
#15 := (and #13 #14)
#16 := (or #15 #15)
#21 := (ite #16 #17 #20)
#11 := (= 1::Int 0::Int)
#9 := (= 0::Int 0::Int)
#12 := (or #9 #11)
#22 := (ite #12 0::Int #21)
#23 := (= #22 0::Int)
#24 := (not #23)
#94 := (iff #24 false)
#1 := true
#89 := (not true)
#92 := (iff #89 false)
#93 := [rewrite]: #92
#90 := (iff #24 #89)
#87 := (iff #23 true)
#45 := (iff #9 true)
#46 := [rewrite]: #45
#85 := (iff #23 #9)
#79 := (ite true 0::Int 0::Int)
#82 := (= #79 0::Int)
#83 := [rewrite]: #82
#80 := (= #22 #79)
#77 := (= #21 0::Int)
#72 := (ite #15 0::Int 0::Int)
#75 := (= #72 0::Int)
#76 := [rewrite]: #75
#73 := (= #21 #72)
#70 := (= #20 0::Int)
#62 := -1::Int
#65 := (div 0::Int -1::Int)
#68 := (= #65 0::Int)
#69 := [rewrite]: #68
#66 := (= #20 #65)
#63 := (= #19 -1::Int)
#64 := [rewrite]: #63
#60 := (= #18 0::Int)
#61 := [rewrite]: #60
#67 := [monotonicity #61 #64]: #66
#71 := [trans #67 #69]: #70
#58 := (= #17 0::Int)
#59 := [rewrite]: #58
#56 := (iff #16 #15)
#57 := [rewrite]: #56
#74 := [monotonicity #57 #59 #71]: #73
#78 := [trans #74 #76]: #77
#54 := (iff #12 true)
#49 := (or true false)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #12 #49)
#47 := (iff #11 false)
#48 := [rewrite]: #47
#51 := [monotonicity #46 #48]: #50
#55 := [trans #51 #53]: #54
#81 := [monotonicity #55 #78]: #80
#84 := [trans #81 #83]: #23
#86 := [monotonicity #84]: #85
#88 := [trans #86 #46]: #87
#91 := [monotonicity #88]: #90
#95 := [trans #91 #93]: #94
#44 := [asserted]: #24
[mp #44 #95]: false
unsat
9f6a38ce629880be5bf8c7f73c6606884657520c 77 0
#2 := false
#8 := 1::Int
#18 := (- 1::Int)
#19 := (div #18 #18)
#17 := (div 1::Int 1::Int)
#9 := 0::Int
#12 := (< 0::Int 1::Int)
#14 := (< 1::Int 0::Int)
#15 := (and #14 #12)
#13 := (and #12 #12)
#16 := (or #13 #15)
#20 := (ite #16 #17 #19)
#10 := (= 1::Int 0::Int)
#11 := (or #10 #10)
#21 := (ite #11 0::Int #20)
#22 := (= #21 1::Int)
#23 := (not #22)
#98 := (iff #23 false)
#1 := true
#93 := (not true)
#96 := (iff #93 false)
#97 := [rewrite]: #96
#94 := (iff #23 #93)
#91 := (iff #22 true)
#86 := (= 1::Int 1::Int)
#89 := (iff #86 true)
#90 := [rewrite]: #89
#87 := (iff #22 #86)
#80 := (ite false 0::Int 1::Int)
#83 := (= #80 1::Int)
#84 := [rewrite]: #83
#81 := (= #21 #80)
#78 := (= #20 1::Int)
#55 := (and #12 #14)
#58 := (or #12 #55)
#73 := (ite #58 1::Int 1::Int)
#76 := (= #73 1::Int)
#77 := [rewrite]: #76
#74 := (= #20 #73)
#71 := (= #19 1::Int)
#63 := -1::Int
#66 := (div -1::Int -1::Int)
#69 := (= #66 1::Int)
#70 := [rewrite]: #69
#67 := (= #19 #66)
#64 := (= #18 -1::Int)
#65 := [rewrite]: #64
#68 := [monotonicity #65 #65]: #67
#72 := [trans #68 #70]: #71
#61 := (= #17 1::Int)
#62 := [rewrite]: #61
#59 := (iff #16 #58)
#56 := (iff #15 #55)
#57 := [rewrite]: #56
#53 := (iff #13 #12)
#54 := [rewrite]: #53
#60 := [monotonicity #54 #57]: #59
#75 := [monotonicity #60 #62 #72]: #74
#79 := [trans #75 #77]: #78
#51 := (iff #11 false)
#46 := (or false false)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #11 #46)
#44 := (iff #10 false)
#45 := [rewrite]: #44
#48 := [monotonicity #45 #45]: #47
#52 := [trans #48 #50]: #51
#82 := [monotonicity #52 #79]: #81
#85 := [trans #82 #84]: #22
#88 := [monotonicity #85]: #87
#92 := [trans #88 #90]: #91
#95 := [monotonicity #92]: #94
#99 := [trans #95 #97]: #98
#43 := [asserted]: #23
[mp #43 #99]: false
unsat
519fa461c6409fb549ed180638c452bbb592389a 84 0
#2 := false
#8 := 3::Int
#11 := 1::Int
#22 := (- 1::Int)
#21 := (- 3::Int)
#23 := (div #21 #22)
#20 := (div 3::Int 1::Int)
#9 := 0::Int
#15 := (< 0::Int 1::Int)
#17 := (< 3::Int 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int 3::Int)
#16 := (and #14 #15)
#19 := (or #16 #18)
#24 := (ite #19 #20 #23)
#12 := (= 1::Int 0::Int)
#10 := (= 3::Int 0::Int)
#13 := (or #10 #12)
#25 := (ite #13 0::Int #24)
#26 := (= #25 3::Int)
#27 := (not #26)
#105 := (iff #27 false)
#1 := true
#100 := (not true)
#103 := (iff #100 false)
#104 := [rewrite]: #103
#101 := (iff #27 #100)
#98 := (iff #26 true)
#93 := (= 3::Int 3::Int)
#96 := (iff #93 true)
#97 := [rewrite]: #96
#94 := (iff #26 #93)
#87 := (ite false 0::Int 3::Int)
#90 := (= #87 3::Int)
#91 := [rewrite]: #90
#88 := (= #25 #87)
#85 := (= #24 3::Int)
#59 := (and #15 #17)
#62 := (or #16 #59)
#80 := (ite #62 3::Int 3::Int)
#83 := (= #80 3::Int)
#84 := [rewrite]: #83
#81 := (= #24 #80)
#78 := (= #23 3::Int)
#70 := -1::Int
#67 := -3::Int
#73 := (div -3::Int -1::Int)
#76 := (= #73 3::Int)
#77 := [rewrite]: #76
#74 := (= #23 #73)
#71 := (= #22 -1::Int)
#72 := [rewrite]: #71
#68 := (= #21 -3::Int)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#79 := [trans #75 #77]: #78
#65 := (= #20 3::Int)
#66 := [rewrite]: #65
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#82 := [monotonicity #64 #66 #79]: #81
#86 := [trans #82 #84]: #85
#57 := (iff #13 false)
#52 := (or false false)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #13 #52)
#50 := (iff #12 false)
#51 := [rewrite]: #50
#48 := (iff #10 false)
#49 := [rewrite]: #48
#54 := [monotonicity #49 #51]: #53
#58 := [trans #54 #56]: #57
#89 := [monotonicity #58 #86]: #88
#92 := [trans #89 #91]: #26
#95 := [monotonicity #92]: #94
#99 := [trans #95 #97]: #98
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#47 := [asserted]: #27
[mp #47 #106]: false
unsat
8d9d1f916dc7c49723b00373e1ef641d98863a50 174 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#89 := (<= f3 0::Int)
#102 := (>= f3 0::Int)
#103 := (not #102)
#90 := (not #89)
#113 := (or #90 #103)
#140 := (not #113)
#63 := -1::Int
#64 := (* -1::Int f3)
#69 := (div #64 -1::Int)
#11 := 1::Int
#20 := (div f3 1::Int)
#116 := (ite #113 #20 #69)
#138 := (= #20 #116)
#246 := (not #138)
#10 := (= f3 0::Int)
#119 := (ite #10 0::Int #116)
#122 := (= f3 #119)
#137 := (= #116 #119)
#149 := (not #10)
#136 := (= #119 0::Int)
#163 := (iff #136 #122)
#161 := (iff #122 #136)
#156 := (= 0::Int #119)
#159 := (iff #156 #136)
#160 := [commutativity]: #159
#157 := (iff #122 #156)
#154 := [hypothesis]: #10
#158 := [monotonicity #154]: #157
#162 := [trans #158 #160]: #161
#164 := [symm #162]: #163
#150 := (or #149 #136)
#151 := [def-axiom]: #150
#155 := [unit-resolution #151 #154]: #136
#165 := [mp #155 #164]: #122
#125 := (not #122)
#22 := (- 1::Int)
#21 := (- f3)
#23 := (div #21 #22)
#15 := (< 0::Int 1::Int)
#17 := (< f3 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int f3)
#16 := (and #14 #15)
#19 := (or #16 #18)
#24 := (ite #19 #20 #23)
#12 := (= 1::Int 0::Int)
#13 := (or #10 #12)
#25 := (ite #13 0::Int #24)
#26 := (= #25 f3)
#27 := (not #26)
#128 := (iff #27 #125)
#57 := (and #15 #17)
#60 := (or #16 #57)
#72 := (ite #60 #20 #69)
#75 := (ite #10 0::Int #72)
#81 := (= f3 #75)
#86 := (not #81)
#126 := (iff #86 #125)
#123 := (iff #81 #122)
#120 := (= #75 #119)
#117 := (= #72 #116)
#114 := (iff #60 #113)
#111 := (iff #57 #103)
#1 := true
#106 := (and true #103)
#109 := (iff #106 #103)
#110 := [rewrite]: #109
#107 := (iff #57 #106)
#104 := (iff #17 #103)
#105 := [rewrite]: #104
#93 := (iff #15 true)
#94 := [rewrite]: #93
#108 := [monotonicity #94 #105]: #107
#112 := [trans #108 #110]: #111
#100 := (iff #16 #90)
#95 := (and #90 true)
#98 := (iff #95 #90)
#99 := [rewrite]: #98
#96 := (iff #16 #95)
#91 := (iff #14 #90)
#92 := [rewrite]: #91
#97 := [monotonicity #92 #94]: #96
#101 := [trans #97 #99]: #100
#115 := [monotonicity #101 #112]: #114
#118 := [monotonicity #115]: #117
#121 := [monotonicity #118]: #120
#124 := [monotonicity #121]: #123
#127 := [monotonicity #124]: #126
#87 := (iff #27 #86)
#84 := (iff #26 #81)
#78 := (= #75 f3)
#82 := (iff #78 #81)
#83 := [rewrite]: #82
#79 := (iff #26 #78)
#76 := (= #25 #75)
#73 := (= #24 #72)
#70 := (= #23 #69)
#67 := (= #22 -1::Int)
#68 := [rewrite]: #67
#65 := (= #21 #64)
#66 := [rewrite]: #65
#71 := [monotonicity #66 #68]: #70
#61 := (iff #19 #60)
#58 := (iff #18 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#74 := [monotonicity #62 #71]: #73
#55 := (iff #13 #10)
#50 := (or #10 false)
#53 := (iff #50 #10)
#54 := [rewrite]: #53
#51 := (iff #13 #50)
#48 := (iff #12 false)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#77 := [monotonicity #56 #74]: #76
#80 := [monotonicity #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#129 := [trans #88 #127]: #128
#47 := [asserted]: #27
#130 := [mp #47 #129]: #125
#166 := [unit-resolution #130 #165]: false
#167 := [lemma #166]: #149
#152 := (or #10 #137)
#153 := [def-axiom]: #152
#225 := [unit-resolution #153 #167]: #137
#242 := (= f3 #116)
#226 := [hypothesis]: #138
#224 := (= f3 #20)
#191 := (* -1::Int #20)
#192 := (+ f3 #191)
#197 := (<= #192 0::Int)
#190 := (= #192 0::Int)
#45 := [true-axiom]: true
#227 := (or false #190)
#228 := [th-lemma arith]: #227
#229 := [unit-resolution #228 #45]: #190
#230 := (not #190)
#231 := (or #230 #197)
#232 := [th-lemma arith triangle-eq]: #231
#233 := [unit-resolution #232 #229]: #197
#198 := (>= #192 0::Int)
#234 := (or #230 #198)
#235 := [th-lemma arith triangle-eq]: #234
#236 := [unit-resolution #235 #229]: #198
#238 := (not #198)
#237 := (not #197)
#239 := (or #224 #237 #238)
#240 := [th-lemma arith triangle-eq]: #239
#241 := [unit-resolution #240 #236 #233]: #224
#243 := [trans #241 #226]: #242
#244 := [trans #243 #225]: #122
#245 := [unit-resolution #130 #244]: false
#247 := [lemma #245]: #246
#145 := (or #140 #138)
#146 := [def-axiom]: #145
#221 := [unit-resolution #146 #247]: #140
#134 := (or #113 #89)
#135 := [def-axiom]: #134
#222 := [unit-resolution #135 #221]: #89
#132 := (or #113 #102)
#133 := [def-axiom]: #132
#223 := [unit-resolution #133 #221]: #102
#248 := (or #10 #90 #103)
#249 := [th-lemma arith triangle-eq]: #248
#250 := [unit-resolution #249 #167]: #113
[unit-resolution #250 #223 #222]: false
unsat
7116e1ffcf5d8f75fc236e1967d4dc10ce43d95d 102 0
#2 := false
#8 := 0::Int
#10 := 1::Int
#11 := (- 1::Int)
#20 := (- #11)
#19 := (- 0::Int)
#21 := (div #19 #20)
#18 := (div 0::Int #11)
#15 := (< 0::Int #11)
#14 := (< 0::Int 0::Int)
#16 := (and #14 #15)
#17 := (or #16 #16)
#22 := (ite #17 #18 #21)
#12 := (= #11 0::Int)
#9 := (= 0::Int 0::Int)
#13 := (or #9 #12)
#23 := (ite #13 0::Int #22)
#24 := (= #23 0::Int)
#25 := (not #24)
#123 := (iff #25 false)
#1 := true
#118 := (not true)
#121 := (iff #118 false)
#122 := [rewrite]: #121
#119 := (iff #25 #118)
#116 := (iff #24 true)
#46 := (iff #9 true)
#47 := [rewrite]: #46
#114 := (iff #24 #9)
#108 := (ite true 0::Int 0::Int)
#111 := (= #108 0::Int)
#112 := [rewrite]: #111
#109 := (= #23 #108)
#106 := (= #22 0::Int)
#48 := -1::Int
#65 := (< 0::Int -1::Int)
#68 := (and #14 #65)
#101 := (ite #68 0::Int 0::Int)
#104 := (= #101 0::Int)
#105 := [rewrite]: #104
#102 := (= #22 #101)
#99 := (= #21 0::Int)
#94 := (div 0::Int 1::Int)
#97 := (= #94 0::Int)
#98 := [rewrite]: #97
#95 := (= #21 #94)
#92 := (= #20 1::Int)
#87 := (- -1::Int)
#90 := (= #87 1::Int)
#91 := [rewrite]: #90
#88 := (= #20 #87)
#49 := (= #11 -1::Int)
#50 := [rewrite]: #49
#89 := [monotonicity #50]: #88
#93 := [trans #89 #91]: #92
#85 := (= #19 0::Int)
#86 := [rewrite]: #85
#96 := [monotonicity #86 #93]: #95
#100 := [trans #96 #98]: #99
#83 := (= #18 0::Int)
#78 := (div 0::Int -1::Int)
#81 := (= #78 0::Int)
#82 := [rewrite]: #81
#79 := (= #18 #78)
#80 := [monotonicity #50]: #79
#84 := [trans #80 #82]: #83
#76 := (iff #17 #68)
#71 := (or #68 #68)
#74 := (iff #71 #68)
#75 := [rewrite]: #74
#72 := (iff #17 #71)
#69 := (iff #16 #68)
#66 := (iff #15 #65)
#67 := [monotonicity #50]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70 #70]: #72
#77 := [trans #73 #75]: #76
#103 := [monotonicity #77 #84 #100]: #102
#107 := [trans #103 #105]: #106
#63 := (iff #13 true)
#58 := (or true false)
#61 := (iff #58 true)
#62 := [rewrite]: #61
#59 := (iff #13 #58)
#56 := (iff #12 false)
#51 := (= -1::Int 0::Int)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #12 #51)
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #47 #57]: #59
#64 := [trans #60 #62]: #63
#110 := [monotonicity #64 #107]: #109
#113 := [trans #110 #112]: #24
#115 := [monotonicity #113]: #114
#117 := [trans #115 #47]: #116
#120 := [monotonicity #117]: #119
#124 := [trans #120 #122]: #123
#45 := [asserted]: #25
[mp #45 #124]: false
unsat
5c9ec68cb5c6bc2336555bc99c13f0ecae2167b7 104 0
#2 := false
#8 := 1::Int
#11 := (- 1::Int)
#21 := (- #11)
#22 := (div #11 #21)
#20 := (div 1::Int #11)
#9 := 0::Int
#15 := (< 0::Int #11)
#17 := (< 1::Int 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int 1::Int)
#16 := (and #14 #15)
#19 := (or #16 #18)
#23 := (ite #19 #20 #22)
#12 := (= #11 0::Int)
#10 := (= 1::Int 0::Int)
#13 := (or #10 #12)
#24 := (ite #13 0::Int #23)
#25 := (= #24 #11)
#26 := (not #25)
#125 := (iff #26 false)
#1 := true
#120 := (not true)
#123 := (iff #120 false)
#124 := [rewrite]: #123
#121 := (iff #26 #120)
#118 := (iff #25 true)
#49 := -1::Int
#113 := (= -1::Int -1::Int)
#116 := (iff #113 true)
#117 := [rewrite]: #116
#114 := (iff #25 #113)
#50 := (= #11 -1::Int)
#51 := [rewrite]: #50
#111 := (= #24 -1::Int)
#106 := (ite false 0::Int -1::Int)
#109 := (= #106 -1::Int)
#110 := [rewrite]: #109
#107 := (= #24 #106)
#104 := (= #23 -1::Int)
#66 := (< 0::Int -1::Int)
#72 := (and #17 #66)
#69 := (and #14 #66)
#75 := (or #69 #72)
#99 := (ite #75 -1::Int -1::Int)
#102 := (= #99 -1::Int)
#103 := [rewrite]: #102
#100 := (= #23 #99)
#97 := (= #22 -1::Int)
#92 := (div -1::Int 1::Int)
#95 := (= #92 -1::Int)
#96 := [rewrite]: #95
#93 := (= #22 #92)
#90 := (= #21 1::Int)
#85 := (- -1::Int)
#88 := (= #85 1::Int)
#89 := [rewrite]: #88
#86 := (= #21 #85)
#87 := [monotonicity #51]: #86
#91 := [trans #87 #89]: #90
#94 := [monotonicity #51 #91]: #93
#98 := [trans #94 #96]: #97
#83 := (= #20 -1::Int)
#78 := (div 1::Int -1::Int)
#81 := (= #78 -1::Int)
#82 := [rewrite]: #81
#79 := (= #20 #78)
#80 := [monotonicity #51]: #79
#84 := [trans #80 #82]: #83
#76 := (iff #19 #75)
#73 := (iff #18 #72)
#67 := (iff #15 #66)
#68 := [monotonicity #51]: #67
#74 := [monotonicity #68]: #73
#70 := (iff #16 #69)
#71 := [monotonicity #68]: #70
#77 := [monotonicity #71 #74]: #76
#101 := [monotonicity #77 #84 #98]: #100
#105 := [trans #101 #103]: #104
#64 := (iff #13 false)
#59 := (or false false)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #13 #59)
#57 := (iff #12 false)
#52 := (= -1::Int 0::Int)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #12 #52)
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#47 := (iff #10 false)
#48 := [rewrite]: #47
#61 := [monotonicity #48 #58]: #60
#65 := [trans #61 #63]: #64
#108 := [monotonicity #65 #105]: #107
#112 := [trans #108 #110]: #111
#115 := [monotonicity #112 #51]: #114
#119 := [trans #115 #117]: #118
#122 := [monotonicity #119]: #121
#126 := [trans #122 #124]: #125
#46 := [asserted]: #26
[mp #46 #126]: false
unsat
a8c1cb5f3abdb5b9970e52ea21ab71e754348560 109 0
#2 := false
#8 := 3::Int
#22 := (- 3::Int)
#11 := 1::Int
#12 := (- 1::Int)
#23 := (- #12)
#24 := (div #22 #23)
#21 := (div 3::Int #12)
#9 := 0::Int
#16 := (< 0::Int #12)
#18 := (< 3::Int 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int 3::Int)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#13 := (= #12 0::Int)
#10 := (= 3::Int 0::Int)
#14 := (or #10 #13)
#26 := (ite #14 0::Int #25)
#27 := (= #26 #22)
#28 := (not #27)
#130 := (iff #28 false)
#1 := true
#125 := (not true)
#128 := (iff #125 false)
#129 := [rewrite]: #128
#126 := (iff #28 #125)
#123 := (iff #27 true)
#83 := -3::Int
#118 := (= -3::Int -3::Int)
#121 := (iff #118 true)
#122 := [rewrite]: #121
#119 := (iff #27 #118)
#88 := (= #22 -3::Int)
#89 := [rewrite]: #88
#116 := (= #26 -3::Int)
#111 := (ite false 0::Int -3::Int)
#114 := (= #111 -3::Int)
#115 := [rewrite]: #114
#112 := (= #26 #111)
#109 := (= #25 -3::Int)
#51 := -1::Int
#68 := (< 0::Int -1::Int)
#74 := (and #18 #68)
#71 := (and #15 #68)
#77 := (or #71 #74)
#104 := (ite #77 -3::Int -3::Int)
#107 := (= #104 -3::Int)
#108 := [rewrite]: #107
#105 := (= #25 #104)
#102 := (= #24 -3::Int)
#97 := (div -3::Int 1::Int)
#100 := (= #97 -3::Int)
#101 := [rewrite]: #100
#98 := (= #24 #97)
#95 := (= #23 1::Int)
#90 := (- -1::Int)
#93 := (= #90 1::Int)
#94 := [rewrite]: #93
#91 := (= #23 #90)
#52 := (= #12 -1::Int)
#53 := [rewrite]: #52
#92 := [monotonicity #53]: #91
#96 := [trans #92 #94]: #95
#99 := [monotonicity #89 #96]: #98
#103 := [trans #99 #101]: #102
#86 := (= #21 -3::Int)
#80 := (div 3::Int -1::Int)
#84 := (= #80 -3::Int)
#85 := [rewrite]: #84
#81 := (= #21 #80)
#82 := [monotonicity #53]: #81
#87 := [trans #82 #85]: #86
#78 := (iff #20 #77)
#75 := (iff #19 #74)
#69 := (iff #16 #68)
#70 := [monotonicity #53]: #69
#76 := [monotonicity #70]: #75
#72 := (iff #17 #71)
#73 := [monotonicity #70]: #72
#79 := [monotonicity #73 #76]: #78
#106 := [monotonicity #79 #87 #103]: #105
#110 := [trans #106 #108]: #109
#66 := (iff #14 false)
#61 := (or false false)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #14 #61)
#59 := (iff #13 false)
#54 := (= -1::Int 0::Int)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#49 := (iff #10 false)
#50 := [rewrite]: #49
#63 := [monotonicity #50 #60]: #62
#67 := [trans #63 #65]: #66
#113 := [monotonicity #67 #110]: #112
#117 := [trans #113 #115]: #116
#120 := [monotonicity #117 #89]: #119
#124 := [trans #120 #122]: #123
#127 := [monotonicity #124]: #126
#131 := [trans #127 #129]: #130
#48 := [asserted]: #28
[mp #48 #131]: false
unsat
99124c49e46379cd9d9cbc824f6c48eaad703212 215 0
#2 := false
#9 := 0::Int
#11 := 1::Int
decl f3 :: Int
#8 := f3
#49 := -1::Int
#81 := (* -1::Int f3)
#91 := (div #81 1::Int)
#10 := (= f3 0::Int)
#149 := (ite #10 0::Int #91)
#157 := (+ f3 #149)
#177 := (>= #157 0::Int)
#274 := (not #177)
#255 := [hypothesis]: #177
#176 := (<= #157 0::Int)
#251 := (* -1::Int #149)
#252 := (+ #91 #251)
#254 := (>= #252 0::Int)
#173 := (= #91 #149)
#175 := (not #10)
#156 := (= #157 0::Int)
#172 := (= #149 0::Int)
#180 := [hypothesis]: #10
#170 := (or #175 #172)
#171 := [def-axiom]: #170
#181 := [unit-resolution #171 #180]: #172
#190 := (= #157 #149)
#188 := (= #149 #157)
#111 := (<= f3 0::Int)
#182 := (or #175 #111)
#183 := [th-lemma arith triangle-eq]: #182
#184 := [unit-resolution #183 #180]: #111
#124 := (>= f3 0::Int)
#185 := (or #175 #124)
#186 := [th-lemma arith triangle-eq]: #185
#187 := [unit-resolution #186 #180]: #124
#189 := [th-lemma arith eq-propagate 1 1 #187 #184]: #188
#191 := [symm #189]: #190
#192 := [trans #191 #181]: #156
#161 := (not #156)
#22 := (- f3)
#12 := (- 1::Int)
#23 := (- #12)
#24 := (div #22 #23)
#21 := (div f3 #12)
#16 := (< 0::Int #12)
#18 := (< f3 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int f3)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#13 := (= #12 0::Int)
#14 := (or #10 #13)
#26 := (ite #14 0::Int #25)
#27 := (= #26 #22)
#28 := (not #27)
#164 := (iff #28 #161)
#78 := (div f3 -1::Int)
#66 := (< 0::Int -1::Int)
#72 := (and #18 #66)
#69 := (and #15 #66)
#75 := (or #69 #72)
#94 := (ite #75 #78 #91)
#97 := (ite #10 0::Int #94)
#103 := (= #81 #97)
#108 := (not #103)
#162 := (iff #108 #161)
#159 := (iff #103 #156)
#152 := (= #81 #149)
#155 := (iff #152 #156)
#158 := [rewrite]: #155
#153 := (iff #103 #152)
#150 := (= #97 #149)
#147 := (= #94 #91)
#142 := (ite false #78 #91)
#145 := (= #142 #91)
#146 := [rewrite]: #145
#143 := (= #94 #142)
#140 := (iff #75 false)
#135 := (or false false)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #75 #135)
#133 := (iff #72 false)
#125 := (not #124)
#128 := (and #125 false)
#131 := (iff #128 false)
#132 := [rewrite]: #131
#129 := (iff #72 #128)
#115 := (iff #66 false)
#116 := [rewrite]: #115
#126 := (iff #18 #125)
#127 := [rewrite]: #126
#130 := [monotonicity #127 #116]: #129
#134 := [trans #130 #132]: #133
#122 := (iff #69 false)
#112 := (not #111)
#117 := (and #112 false)
#120 := (iff #117 false)
#121 := [rewrite]: #120
#118 := (iff #69 #117)
#113 := (iff #15 #112)
#114 := [rewrite]: #113
#119 := [monotonicity #114 #116]: #118
#123 := [trans #119 #121]: #122
#137 := [monotonicity #123 #134]: #136
#141 := [trans #137 #139]: #140
#144 := [monotonicity #141]: #143
#148 := [trans #144 #146]: #147
#151 := [monotonicity #148]: #150
#154 := [monotonicity #151]: #153
#160 := [trans #154 #158]: #159
#163 := [monotonicity #160]: #162
#109 := (iff #28 #108)
#106 := (iff #27 #103)
#100 := (= #97 #81)
#104 := (iff #100 #103)
#105 := [rewrite]: #104
#101 := (iff #27 #100)
#82 := (= #22 #81)
#83 := [rewrite]: #82
#98 := (= #26 #97)
#95 := (= #25 #94)
#92 := (= #24 #91)
#89 := (= #23 1::Int)
#84 := (- -1::Int)
#87 := (= #84 1::Int)
#88 := [rewrite]: #87
#85 := (= #23 #84)
#50 := (= #12 -1::Int)
#51 := [rewrite]: #50
#86 := [monotonicity #51]: #85
#90 := [trans #86 #88]: #89
#93 := [monotonicity #83 #90]: #92
#79 := (= #21 #78)
#80 := [monotonicity #51]: #79
#76 := (iff #20 #75)
#73 := (iff #19 #72)
#67 := (iff #16 #66)
#68 := [monotonicity #51]: #67
#74 := [monotonicity #68]: #73
#70 := (iff #17 #69)
#71 := [monotonicity #68]: #70
#77 := [monotonicity #71 #74]: #76
#96 := [monotonicity #77 #80 #93]: #95
#64 := (iff #14 #10)
#59 := (or #10 false)
#62 := (iff #59 #10)
#63 := [rewrite]: #62
#60 := (iff #14 #59)
#57 := (iff #13 false)
#52 := (= -1::Int 0::Int)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #13 #52)
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#99 := [monotonicity #65 #96]: #98
#102 := [monotonicity #99 #83]: #101
#107 := [trans #102 #105]: #106
#110 := [monotonicity #107]: #109
#165 := [trans #110 #163]: #164
#48 := [asserted]: #28
#166 := [mp #48 #165]: #161
#193 := [unit-resolution #166 #192]: false
#194 := [lemma #193]: #175
#168 := (or #10 #173)
#169 := [def-axiom]: #168
#256 := [unit-resolution #169 #194]: #173
#257 := (not #173)
#258 := (or #257 #254)
#259 := [th-lemma arith triangle-eq]: #258
#260 := [unit-resolution #259 #256]: #254
#218 := (+ f3 #91)
#224 := (<= #218 0::Int)
#219 := (= #218 0::Int)
#1 := true
#46 := [true-axiom]: true
#261 := (or false #219)
#262 := [th-lemma arith]: #261
#263 := [unit-resolution #262 #46]: #219
#264 := (not #219)
#265 := (or #264 #224)
#266 := [th-lemma arith triangle-eq]: #265
#267 := [unit-resolution #266 #263]: #224
#269 := (not #224)
#268 := (not #254)
#270 := (or #176 #268 #269)
#271 := [th-lemma arith assign-bounds 1 -1]: #270
#272 := [unit-resolution #271 #267 #260]: #176
#273 := (not #176)
#277 := (or #273 #274)
#275 := (or #156 #273 #274)
#276 := [th-lemma arith triangle-eq]: #275
#278 := [unit-resolution #276 #166]: #277
#279 := [unit-resolution #278 #272 #255]: false
#280 := [lemma #279]: #274
#253 := (<= #252 0::Int)
#281 := (or #257 #253)
#282 := [th-lemma arith triangle-eq]: #281
#283 := [unit-resolution #282 #256]: #253
#225 := (>= #218 0::Int)
#284 := (or #264 #225)
#285 := [th-lemma arith triangle-eq]: #284
#286 := [unit-resolution #285 #263]: #225
#288 := (not #225)
#287 := (not #253)
#289 := (or #177 #287 #288)
#290 := [th-lemma arith assign-bounds 1 -1]: #289
#291 := [unit-resolution #290 #286 #283]: #177
[unit-resolution #291 #280]: false
unsat
530d84b9b60629031058dc22de3bbb66e9dd68b7 73 0
#2 := false
#8 := 0::Int
#10 := 3::Int
#19 := (- 3::Int)
#18 := (- 0::Int)
#20 := (div #18 #19)
#17 := (div 0::Int 3::Int)
#14 := (< 0::Int 3::Int)
#13 := (< 0::Int 0::Int)
#15 := (and #13 #14)
#16 := (or #15 #15)
#21 := (ite #16 #17 #20)
#11 := (= 3::Int 0::Int)
#9 := (= 0::Int 0::Int)
#12 := (or #9 #11)
#22 := (ite #12 0::Int #21)
#23 := (= #22 0::Int)
#24 := (not #23)
#94 := (iff #24 false)
#1 := true
#89 := (not true)
#92 := (iff #89 false)
#93 := [rewrite]: #92
#90 := (iff #24 #89)
#87 := (iff #23 true)
#45 := (iff #9 true)
#46 := [rewrite]: #45
#85 := (iff #23 #9)
#79 := (ite true 0::Int 0::Int)
#82 := (= #79 0::Int)
#83 := [rewrite]: #82
#80 := (= #22 #79)
#77 := (= #21 0::Int)
#72 := (ite #15 0::Int 0::Int)
#75 := (= #72 0::Int)
#76 := [rewrite]: #75
#73 := (= #21 #72)
#70 := (= #20 0::Int)
#62 := -3::Int
#65 := (div 0::Int -3::Int)
#68 := (= #65 0::Int)
#69 := [rewrite]: #68
#66 := (= #20 #65)
#63 := (= #19 -3::Int)
#64 := [rewrite]: #63
#60 := (= #18 0::Int)
#61 := [rewrite]: #60
#67 := [monotonicity #61 #64]: #66
#71 := [trans #67 #69]: #70
#58 := (= #17 0::Int)
#59 := [rewrite]: #58
#56 := (iff #16 #15)
#57 := [rewrite]: #56
#74 := [monotonicity #57 #59 #71]: #73
#78 := [trans #74 #76]: #77
#54 := (iff #12 true)
#49 := (or true false)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #12 #49)
#47 := (iff #11 false)
#48 := [rewrite]: #47
#51 := [monotonicity #46 #48]: #50
#55 := [trans #51 #53]: #54
#81 := [monotonicity #55 #78]: #80
#84 := [trans #81 #83]: #23
#86 := [monotonicity #84]: #85
#88 := [trans #86 #46]: #87
#91 := [monotonicity #88]: #90
#95 := [trans #91 #93]: #94
#44 := [asserted]: #24
[mp #44 #95]: false
unsat
99c1933dfc0f818aac1f7a0114d4293293e0a0a1 102 0
#2 := false
#8 := 0::Int
#10 := 3::Int
#11 := (- 3::Int)
#20 := (- #11)
#19 := (- 0::Int)
#21 := (div #19 #20)
#18 := (div 0::Int #11)
#15 := (< 0::Int #11)
#14 := (< 0::Int 0::Int)
#16 := (and #14 #15)
#17 := (or #16 #16)
#22 := (ite #17 #18 #21)
#12 := (= #11 0::Int)
#9 := (= 0::Int 0::Int)
#13 := (or #9 #12)
#23 := (ite #13 0::Int #22)
#24 := (= #23 0::Int)
#25 := (not #24)
#123 := (iff #25 false)
#1 := true
#118 := (not true)
#121 := (iff #118 false)
#122 := [rewrite]: #121
#119 := (iff #25 #118)
#116 := (iff #24 true)
#46 := (iff #9 true)
#47 := [rewrite]: #46
#114 := (iff #24 #9)
#108 := (ite true 0::Int 0::Int)
#111 := (= #108 0::Int)
#112 := [rewrite]: #111
#109 := (= #23 #108)
#106 := (= #22 0::Int)
#48 := -3::Int
#65 := (< 0::Int -3::Int)
#68 := (and #14 #65)
#101 := (ite #68 0::Int 0::Int)
#104 := (= #101 0::Int)
#105 := [rewrite]: #104
#102 := (= #22 #101)
#99 := (= #21 0::Int)
#94 := (div 0::Int 3::Int)
#97 := (= #94 0::Int)
#98 := [rewrite]: #97
#95 := (= #21 #94)
#92 := (= #20 3::Int)
#87 := (- -3::Int)
#90 := (= #87 3::Int)
#91 := [rewrite]: #90
#88 := (= #20 #87)
#49 := (= #11 -3::Int)
#50 := [rewrite]: #49
#89 := [monotonicity #50]: #88
#93 := [trans #89 #91]: #92
#85 := (= #19 0::Int)
#86 := [rewrite]: #85
#96 := [monotonicity #86 #93]: #95
#100 := [trans #96 #98]: #99
#83 := (= #18 0::Int)
#78 := (div 0::Int -3::Int)
#81 := (= #78 0::Int)
#82 := [rewrite]: #81
#79 := (= #18 #78)
#80 := [monotonicity #50]: #79
#84 := [trans #80 #82]: #83
#76 := (iff #17 #68)
#71 := (or #68 #68)
#74 := (iff #71 #68)
#75 := [rewrite]: #74
#72 := (iff #17 #71)
#69 := (iff #16 #68)
#66 := (iff #15 #65)
#67 := [monotonicity #50]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70 #70]: #72
#77 := [trans #73 #75]: #76
#103 := [monotonicity #77 #84 #100]: #102
#107 := [trans #103 #105]: #106
#63 := (iff #13 true)
#58 := (or true false)
#61 := (iff #58 true)
#62 := [rewrite]: #61
#59 := (iff #13 #58)
#56 := (iff #12 false)
#51 := (= -3::Int 0::Int)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #12 #51)
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #47 #57]: #59
#64 := [trans #60 #62]: #63
#110 := [monotonicity #64 #107]: #109
#113 := [trans #110 #112]: #24
#115 := [monotonicity #113]: #114
#117 := [trans #115 #47]: #116
#120 := [monotonicity #117]: #119
#124 := [trans #120 #122]: #123
#45 := [asserted]: #25
[mp #45 #124]: false
unsat
9d138480c7d61fdc258e935f0608d147c435d8d1 113 0
#2 := false
#9 := 0::Int
#11 := 3::Int
#22 := (- 3::Int)
#8 := 1::Int
#21 := (- 1::Int)
#23 := (div #21 #22)
#20 := (div 1::Int 3::Int)
#15 := (< 0::Int 3::Int)
#17 := (< 1::Int 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int 1::Int)
#16 := (and #14 #15)
#19 := (or #16 #18)
#24 := (ite #19 #20 #23)
#12 := (= 3::Int 0::Int)
#10 := (= 1::Int 0::Int)
#13 := (or #10 #12)
#25 := (ite #13 0::Int #24)
#26 := (= #25 0::Int)
#27 := (not #26)
#134 := (iff #27 false)
#59 := (and #15 #17)
#62 := (or #16 #59)
#97 := (not #62)
#132 := (iff #97 false)
#1 := true
#127 := (not true)
#130 := (iff #127 false)
#131 := [rewrite]: #130
#128 := (iff #97 #127)
#125 := (iff #62 true)
#120 := (or true false)
#123 := (iff #120 true)
#124 := [rewrite]: #123
#121 := (iff #62 #120)
#118 := (iff #59 false)
#113 := (and true false)
#116 := (iff #113 false)
#117 := [rewrite]: #116
#114 := (iff #59 #113)
#111 := (iff #17 false)
#112 := [rewrite]: #111
#102 := (iff #15 true)
#103 := [rewrite]: #102
#115 := [monotonicity #103 #112]: #114
#119 := [trans #115 #117]: #118
#109 := (iff #16 true)
#104 := (and true true)
#107 := (iff #104 true)
#108 := [rewrite]: #107
#105 := (iff #16 #104)
#100 := (iff #14 true)
#101 := [rewrite]: #100
#106 := [monotonicity #101 #103]: #105
#110 := [trans #106 #108]: #109
#122 := [monotonicity #110 #119]: #121
#126 := [trans #122 #124]: #125
#129 := [monotonicity #126]: #128
#133 := [trans #129 #131]: #132
#98 := (iff #27 #97)
#95 := (iff #26 #62)
#80 := (ite #62 0::Int 1::Int)
#90 := (= #80 0::Int)
#93 := (iff #90 #62)
#94 := [rewrite]: #93
#91 := (iff #26 #90)
#88 := (= #25 #80)
#83 := (ite false 0::Int #80)
#86 := (= #83 #80)
#87 := [rewrite]: #86
#84 := (= #25 #83)
#81 := (= #24 #80)
#78 := (= #23 1::Int)
#70 := -3::Int
#67 := -1::Int
#73 := (div -1::Int -3::Int)
#76 := (= #73 1::Int)
#77 := [rewrite]: #76
#74 := (= #23 #73)
#71 := (= #22 -3::Int)
#72 := [rewrite]: #71
#68 := (= #21 -1::Int)
#69 := [rewrite]: #68
#75 := [monotonicity #69 #72]: #74
#79 := [trans #75 #77]: #78
#65 := (= #20 0::Int)
#66 := [rewrite]: #65
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#82 := [monotonicity #64 #66 #79]: #81
#57 := (iff #13 false)
#52 := (or false false)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #13 #52)
#50 := (iff #12 false)
#51 := [rewrite]: #50
#48 := (iff #10 false)
#49 := [rewrite]: #48
#54 := [monotonicity #49 #51]: #53
#58 := [trans #54 #56]: #57
#85 := [monotonicity #58 #82]: #84
#89 := [trans #85 #87]: #88
#92 := [monotonicity #89]: #91
#96 := [trans #92 #94]: #95
#99 := [monotonicity #96]: #98
#135 := [trans #99 #133]: #134
#47 := [asserted]: #27
[mp #47 #135]: false
unsat
59082baebee56f4a9740d0c291f81d87438f8452 78 0
#2 := false
#22 := 1::Int
#8 := 3::Int
#18 := (- 3::Int)
#19 := (div #18 #18)
#17 := (div 3::Int 3::Int)
#9 := 0::Int
#12 := (< 0::Int 3::Int)
#14 := (< 3::Int 0::Int)
#15 := (and #14 #12)
#13 := (and #12 #12)
#16 := (or #13 #15)
#20 := (ite #16 #17 #19)
#10 := (= 3::Int 0::Int)
#11 := (or #10 #10)
#21 := (ite #11 0::Int #20)
#23 := (= #21 1::Int)
#24 := (not #23)
#99 := (iff #24 false)
#1 := true
#94 := (not true)
#97 := (iff #94 false)
#98 := [rewrite]: #97
#95 := (iff #24 #94)
#92 := (iff #23 true)
#87 := (= 1::Int 1::Int)
#90 := (iff #87 true)
#91 := [rewrite]: #90
#88 := (iff #23 #87)
#81 := (ite false 0::Int 1::Int)
#84 := (= #81 1::Int)
#85 := [rewrite]: #84
#82 := (= #21 #81)
#79 := (= #20 1::Int)
#56 := (and #12 #14)
#59 := (or #12 #56)
#74 := (ite #59 1::Int 1::Int)
#77 := (= #74 1::Int)
#78 := [rewrite]: #77
#75 := (= #20 #74)
#72 := (= #19 1::Int)
#64 := -3::Int
#67 := (div -3::Int -3::Int)
#70 := (= #67 1::Int)
#71 := [rewrite]: #70
#68 := (= #19 #67)
#65 := (= #18 -3::Int)
#66 := [rewrite]: #65
#69 := [monotonicity #66 #66]: #68
#73 := [trans #69 #71]: #72
#62 := (= #17 1::Int)
#63 := [rewrite]: #62
#60 := (iff #16 #59)
#57 := (iff #15 #56)
#58 := [rewrite]: #57
#54 := (iff #13 #12)
#55 := [rewrite]: #54
#61 := [monotonicity #55 #58]: #60
#76 := [monotonicity #61 #63 #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #11 false)
#47 := (or false false)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #11 #47)
#45 := (iff #10 false)
#46 := [rewrite]: #45
#49 := [monotonicity #46 #46]: #48
#53 := [trans #49 #51]: #52
#83 := [monotonicity #53 #80]: #82
#86 := [trans #83 #85]: #23
#89 := [monotonicity #86]: #88
#93 := [trans #89 #91]: #92
#96 := [monotonicity #93]: #95
#100 := [trans #96 #98]: #99
#44 := [asserted]: #24
[mp #44 #100]: false
unsat
b2dbf88881de745f35b3193199fcda41f7406d84 115 0
#2 := false
#26 := 1::Int
#11 := 3::Int
#22 := (- 3::Int)
#8 := 5::Int
#21 := (- 5::Int)
#23 := (div #21 #22)
#20 := (div 5::Int 3::Int)
#9 := 0::Int
#15 := (< 0::Int 3::Int)
#17 := (< 5::Int 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int 5::Int)
#16 := (and #14 #15)
#19 := (or #16 #18)
#24 := (ite #19 #20 #23)
#12 := (= 3::Int 0::Int)
#10 := (= 5::Int 0::Int)
#13 := (or #10 #12)
#25 := (ite #13 0::Int #24)
#27 := (= #25 1::Int)
#28 := (not #27)
#136 := (iff #28 false)
#60 := (and #15 #17)
#63 := (or #16 #60)
#99 := (not #63)
#134 := (iff #99 false)
#1 := true
#129 := (not true)
#132 := (iff #129 false)
#133 := [rewrite]: #132
#130 := (iff #99 #129)
#127 := (iff #63 true)
#122 := (or true false)
#125 := (iff #122 true)
#126 := [rewrite]: #125
#123 := (iff #63 #122)
#120 := (iff #60 false)
#115 := (and true false)
#118 := (iff #115 false)
#119 := [rewrite]: #118
#116 := (iff #60 #115)
#113 := (iff #17 false)
#114 := [rewrite]: #113
#104 := (iff #15 true)
#105 := [rewrite]: #104
#117 := [monotonicity #105 #114]: #116
#121 := [trans #117 #119]: #120
#111 := (iff #16 true)
#106 := (and true true)
#109 := (iff #106 true)
#110 := [rewrite]: #109
#107 := (iff #16 #106)
#102 := (iff #14 true)
#103 := [rewrite]: #102
#108 := [monotonicity #103 #105]: #107
#112 := [trans #108 #110]: #111
#124 := [monotonicity #112 #121]: #123
#128 := [trans #124 #126]: #127
#131 := [monotonicity #128]: #130
#135 := [trans #131 #133]: #134
#100 := (iff #28 #99)
#97 := (iff #27 #63)
#77 := 2::Int
#82 := (ite #63 1::Int 2::Int)
#92 := (= #82 1::Int)
#95 := (iff #92 #63)
#96 := [rewrite]: #95
#93 := (iff #27 #92)
#90 := (= #25 #82)
#85 := (ite false 0::Int #82)
#88 := (= #85 #82)
#89 := [rewrite]: #88
#86 := (= #25 #85)
#83 := (= #24 #82)
#80 := (= #23 2::Int)
#71 := -3::Int
#68 := -5::Int
#74 := (div -5::Int -3::Int)
#78 := (= #74 2::Int)
#79 := [rewrite]: #78
#75 := (= #23 #74)
#72 := (= #22 -3::Int)
#73 := [rewrite]: #72
#69 := (= #21 -5::Int)
#70 := [rewrite]: #69
#76 := [monotonicity #70 #73]: #75
#81 := [trans #76 #79]: #80
#66 := (= #20 1::Int)
#67 := [rewrite]: #66
#64 := (iff #19 #63)
#61 := (iff #18 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#84 := [monotonicity #65 #67 #81]: #83
#58 := (iff #13 false)
#53 := (or false false)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #13 #53)
#51 := (iff #12 false)
#52 := [rewrite]: #51
#49 := (iff #10 false)
#50 := [rewrite]: #49
#55 := [monotonicity #50 #52]: #54
#59 := [trans #55 #57]: #58
#87 := [monotonicity #59 #84]: #86
#91 := [trans #87 #89]: #90
#94 := [monotonicity #91]: #93
#98 := [trans #94 #96]: #97
#101 := [monotonicity #98]: #100
#137 := [trans #101 #135]: #136
#48 := [asserted]: #28
[mp #48 #137]: false
unsat
e8c50ca8f2d03b633ebd301c60837eeba13d5124 132 0
#2 := false
#8 := 1::Int
#22 := (- 1::Int)
#11 := 3::Int
#12 := (- 3::Int)
#23 := (- #12)
#24 := (div #22 #23)
#21 := (div 1::Int #12)
#9 := 0::Int
#16 := (< 0::Int #12)
#18 := (< 1::Int 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int 1::Int)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#13 := (= #12 0::Int)
#10 := (= 1::Int 0::Int)
#14 := (or #10 #13)
#26 := (ite #14 0::Int #25)
#27 := (= #26 #22)
#28 := (not #27)
#153 := (iff #28 false)
#51 := -3::Int
#68 := (< 0::Int -3::Int)
#74 := (and #18 #68)
#71 := (and #15 #68)
#77 := (or #71 #74)
#151 := (iff #77 false)
#61 := (or false false)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#149 := (iff #77 #61)
#147 := (iff #74 false)
#142 := (and false false)
#145 := (iff #142 false)
#146 := [rewrite]: #145
#143 := (iff #74 #142)
#131 := (iff #68 false)
#132 := [rewrite]: #131
#140 := (iff #18 false)
#141 := [rewrite]: #140
#144 := [monotonicity #141 #132]: #143
#148 := [trans #144 #146]: #147
#138 := (iff #71 false)
#1 := true
#133 := (and true false)
#136 := (iff #133 false)
#137 := [rewrite]: #136
#134 := (iff #71 #133)
#129 := (iff #15 true)
#130 := [rewrite]: #129
#135 := [monotonicity #130 #132]: #134
#139 := [trans #135 #137]: #138
#150 := [monotonicity #139 #148]: #149
#152 := [trans #150 #65]: #151
#127 := (iff #28 #77)
#117 := (not #77)
#122 := (not #117)
#125 := (iff #122 #77)
#126 := [rewrite]: #125
#123 := (iff #28 #122)
#120 := (iff #27 #117)
#87 := -1::Int
#104 := (ite #77 0::Int -1::Int)
#114 := (= #104 -1::Int)
#118 := (iff #114 #117)
#119 := [rewrite]: #118
#115 := (iff #27 #114)
#88 := (= #22 -1::Int)
#89 := [rewrite]: #88
#112 := (= #26 #104)
#107 := (ite false 0::Int #104)
#110 := (= #107 #104)
#111 := [rewrite]: #110
#108 := (= #26 #107)
#105 := (= #25 #104)
#102 := (= #24 -1::Int)
#97 := (div -1::Int 3::Int)
#100 := (= #97 -1::Int)
#101 := [rewrite]: #100
#98 := (= #24 #97)
#95 := (= #23 3::Int)
#90 := (- -3::Int)
#93 := (= #90 3::Int)
#94 := [rewrite]: #93
#91 := (= #23 #90)
#52 := (= #12 -3::Int)
#53 := [rewrite]: #52
#92 := [monotonicity #53]: #91
#96 := [trans #92 #94]: #95
#99 := [monotonicity #89 #96]: #98
#103 := [trans #99 #101]: #102
#85 := (= #21 0::Int)
#80 := (div 1::Int -3::Int)
#83 := (= #80 0::Int)
#84 := [rewrite]: #83
#81 := (= #21 #80)
#82 := [monotonicity #53]: #81
#86 := [trans #82 #84]: #85
#78 := (iff #20 #77)
#75 := (iff #19 #74)
#69 := (iff #16 #68)
#70 := [monotonicity #53]: #69
#76 := [monotonicity #70]: #75
#72 := (iff #17 #71)
#73 := [monotonicity #70]: #72
#79 := [monotonicity #73 #76]: #78
#106 := [monotonicity #79 #86 #103]: #105
#66 := (iff #14 false)
#62 := (iff #14 #61)
#59 := (iff #13 false)
#54 := (= -3::Int 0::Int)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#49 := (iff #10 false)
#50 := [rewrite]: #49
#63 := [monotonicity #50 #60]: #62
#67 := [trans #63 #65]: #66
#109 := [monotonicity #67 #106]: #108
#113 := [trans #109 #111]: #112
#116 := [monotonicity #113 #89]: #115
#121 := [trans #116 #119]: #120
#124 := [monotonicity #121]: #123
#128 := [trans #124 #126]: #127
#154 := [trans #128 #152]: #153
#48 := [asserted]: #28
[mp #48 #154]: false
unsat
e161cbc5766adb3a07b2f61822dd61195f3dd163 109 0
#2 := false
#25 := 1::Int
#26 := (- 1::Int)
#8 := 3::Int
#11 := (- 3::Int)
#21 := (- #11)
#22 := (div #11 #21)
#20 := (div 3::Int #11)
#9 := 0::Int
#15 := (< 0::Int #11)
#17 := (< 3::Int 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int 3::Int)
#16 := (and #14 #15)
#19 := (or #16 #18)
#23 := (ite #19 #20 #22)
#12 := (= #11 0::Int)
#10 := (= 3::Int 0::Int)
#13 := (or #10 #12)
#24 := (ite #13 0::Int #23)
#27 := (= #24 #26)
#28 := (not #27)
#130 := (iff #28 false)
#1 := true
#125 := (not true)
#128 := (iff #125 false)
#129 := [rewrite]: #128
#126 := (iff #28 #125)
#123 := (iff #27 true)
#83 := -1::Int
#118 := (= -1::Int -1::Int)
#121 := (iff #118 true)
#122 := [rewrite]: #121
#119 := (iff #27 #118)
#116 := (= #26 -1::Int)
#117 := [rewrite]: #116
#114 := (= #24 -1::Int)
#109 := (ite false 0::Int -1::Int)
#112 := (= #109 -1::Int)
#113 := [rewrite]: #112
#110 := (= #24 #109)
#107 := (= #23 -1::Int)
#51 := -3::Int
#68 := (< 0::Int -3::Int)
#74 := (and #17 #68)
#71 := (and #14 #68)
#77 := (or #71 #74)
#102 := (ite #77 -1::Int -1::Int)
#105 := (= #102 -1::Int)
#106 := [rewrite]: #105
#103 := (= #23 #102)
#100 := (= #22 -1::Int)
#95 := (div -3::Int 3::Int)
#98 := (= #95 -1::Int)
#99 := [rewrite]: #98
#96 := (= #22 #95)
#93 := (= #21 3::Int)
#88 := (- -3::Int)
#91 := (= #88 3::Int)
#92 := [rewrite]: #91
#89 := (= #21 #88)
#52 := (= #11 -3::Int)
#53 := [rewrite]: #52
#90 := [monotonicity #53]: #89
#94 := [trans #90 #92]: #93
#97 := [monotonicity #53 #94]: #96
#101 := [trans #97 #99]: #100
#86 := (= #20 -1::Int)
#80 := (div 3::Int -3::Int)
#84 := (= #80 -1::Int)
#85 := [rewrite]: #84
#81 := (= #20 #80)
#82 := [monotonicity #53]: #81
#87 := [trans #82 #85]: #86
#78 := (iff #19 #77)
#75 := (iff #18 #74)
#69 := (iff #15 #68)
#70 := [monotonicity #53]: #69
#76 := [monotonicity #70]: #75
#72 := (iff #16 #71)
#73 := [monotonicity #70]: #72
#79 := [monotonicity #73 #76]: #78
#104 := [monotonicity #79 #87 #101]: #103
#108 := [trans #104 #106]: #107
#66 := (iff #13 false)
#61 := (or false false)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #13 #61)
#59 := (iff #12 false)
#54 := (= -3::Int 0::Int)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #12 #54)
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#49 := (iff #10 false)
#50 := [rewrite]: #49
#63 := [monotonicity #50 #60]: #62
#67 := [trans #63 #65]: #66
#111 := [monotonicity #67 #108]: #110
#115 := [trans #111 #113]: #114
#120 := [monotonicity #115 #117]: #119
#124 := [trans #120 #122]: #123
#127 := [monotonicity #124]: #126
#131 := [trans #127 #129]: #130
#48 := [asserted]: #28
[mp #48 #131]: false
unsat
17920425f93d8549a15817d71271ba90ab0e16ae 138 0
#2 := false
#27 := 2::Int
#28 := (- 2::Int)
#11 := 3::Int
#12 := (- 3::Int)
#23 := (- #12)
#8 := 5::Int
#22 := (- 5::Int)
#24 := (div #22 #23)
#21 := (div 5::Int #12)
#9 := 0::Int
#16 := (< 0::Int #12)
#18 := (< 5::Int 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int 5::Int)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#13 := (= #12 0::Int)
#10 := (= 5::Int 0::Int)
#14 := (or #10 #13)
#26 := (ite #14 0::Int #25)
#29 := (= #26 #28)
#30 := (not #29)
#159 := (iff #30 false)
#53 := -3::Int
#70 := (< 0::Int -3::Int)
#76 := (and #18 #70)
#73 := (and #15 #70)
#79 := (or #73 #76)
#157 := (iff #79 false)
#63 := (or false false)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#155 := (iff #79 #63)
#153 := (iff #76 false)
#148 := (and false false)
#151 := (iff #148 false)
#152 := [rewrite]: #151
#149 := (iff #76 #148)
#137 := (iff #70 false)
#138 := [rewrite]: #137
#146 := (iff #18 false)
#147 := [rewrite]: #146
#150 := [monotonicity #147 #138]: #149
#154 := [trans #150 #152]: #153
#144 := (iff #73 false)
#1 := true
#139 := (and true false)
#142 := (iff #139 false)
#143 := [rewrite]: #142
#140 := (iff #73 #139)
#135 := (iff #15 true)
#136 := [rewrite]: #135
#141 := [monotonicity #136 #138]: #140
#145 := [trans #141 #143]: #144
#156 := [monotonicity #145 #154]: #155
#158 := [trans #156 #67]: #157
#133 := (iff #30 #79)
#123 := (not #79)
#128 := (not #123)
#131 := (iff #128 #79)
#132 := [rewrite]: #131
#129 := (iff #30 #128)
#126 := (iff #29 #123)
#103 := -2::Int
#85 := -1::Int
#108 := (ite #79 -1::Int -2::Int)
#120 := (= #108 -2::Int)
#124 := (iff #120 #123)
#125 := [rewrite]: #124
#121 := (iff #29 #120)
#118 := (= #28 -2::Int)
#119 := [rewrite]: #118
#116 := (= #26 #108)
#111 := (ite false 0::Int #108)
#114 := (= #111 #108)
#115 := [rewrite]: #114
#112 := (= #26 #111)
#109 := (= #25 #108)
#106 := (= #24 -2::Int)
#90 := -5::Int
#100 := (div -5::Int 3::Int)
#104 := (= #100 -2::Int)
#105 := [rewrite]: #104
#101 := (= #24 #100)
#98 := (= #23 3::Int)
#93 := (- -3::Int)
#96 := (= #93 3::Int)
#97 := [rewrite]: #96
#94 := (= #23 #93)
#54 := (= #12 -3::Int)
#55 := [rewrite]: #54
#95 := [monotonicity #55]: #94
#99 := [trans #95 #97]: #98
#91 := (= #22 -5::Int)
#92 := [rewrite]: #91
#102 := [monotonicity #92 #99]: #101
#107 := [trans #102 #105]: #106
#88 := (= #21 -1::Int)
#82 := (div 5::Int -3::Int)
#86 := (= #82 -1::Int)
#87 := [rewrite]: #86
#83 := (= #21 #82)
#84 := [monotonicity #55]: #83
#89 := [trans #84 #87]: #88
#80 := (iff #20 #79)
#77 := (iff #19 #76)
#71 := (iff #16 #70)
#72 := [monotonicity #55]: #71
#78 := [monotonicity #72]: #77
#74 := (iff #17 #73)
#75 := [monotonicity #72]: #74
#81 := [monotonicity #75 #78]: #80
#110 := [monotonicity #81 #89 #107]: #109
#68 := (iff #14 false)
#64 := (iff #14 #63)
#61 := (iff #13 false)
#56 := (= -3::Int 0::Int)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #13 #56)
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#51 := (iff #10 false)
#52 := [rewrite]: #51
#65 := [monotonicity #52 #62]: #64
#69 := [trans #65 #67]: #68
#113 := [monotonicity #69 #110]: #112
#117 := [trans #113 #115]: #116
#122 := [monotonicity #117 #119]: #121
#127 := [trans #122 #125]: #126
#130 := [monotonicity #127]: #129
#134 := [trans #130 #132]: #133
#160 := [trans #134 #158]: #159
#50 := [asserted]: #30
[mp #50 #160]: false
unsat
a358eed5b14d12c6db4e25a50a2df755d735c9b5 150 0
#2 := false
#8 := 1::Int
#9 := (- 1::Int)
#12 := 3::Int
#23 := (- 3::Int)
#22 := (- #9)
#24 := (div #22 #23)
#21 := (div #9 3::Int)
#10 := 0::Int
#16 := (< 0::Int 3::Int)
#18 := (< #9 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int #9)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#13 := (= 3::Int 0::Int)
#11 := (= #9 0::Int)
#14 := (or #11 #13)
#26 := (ite #14 0::Int #25)
#27 := (= #26 #9)
#28 := (not #27)
#171 := (iff #28 false)
#49 := -1::Int
#79 := (< -1::Int 0::Int)
#85 := (and #16 #79)
#68 := (< 0::Int -1::Int)
#74 := (and #16 #68)
#90 := (or #74 #85)
#134 := (not #90)
#169 := (iff #134 false)
#1 := true
#164 := (not true)
#167 := (iff #164 false)
#168 := [rewrite]: #167
#165 := (iff #134 #164)
#162 := (iff #90 true)
#157 := (or false true)
#160 := (iff #157 true)
#161 := [rewrite]: #160
#158 := (iff #90 #157)
#155 := (iff #85 true)
#150 := (and true true)
#153 := (iff #150 true)
#154 := [rewrite]: #153
#151 := (iff #85 #150)
#148 := (iff #79 true)
#149 := [rewrite]: #148
#137 := (iff #16 true)
#138 := [rewrite]: #137
#152 := [monotonicity #138 #149]: #151
#156 := [trans #152 #154]: #155
#146 := (iff #74 false)
#141 := (and true false)
#144 := (iff #141 false)
#145 := [rewrite]: #144
#142 := (iff #74 #141)
#139 := (iff #68 false)
#140 := [rewrite]: #139
#143 := [monotonicity #138 #140]: #142
#147 := [trans #143 #145]: #146
#159 := [monotonicity #147 #156]: #158
#163 := [trans #159 #161]: #162
#166 := [monotonicity #163]: #165
#170 := [trans #166 #168]: #169
#135 := (iff #28 #134)
#132 := (iff #27 #90)
#117 := (ite #90 -1::Int 0::Int)
#127 := (= #117 -1::Int)
#130 := (iff #127 #90)
#131 := [rewrite]: #130
#128 := (iff #27 #127)
#50 := (= #9 -1::Int)
#51 := [rewrite]: #50
#125 := (= #26 #117)
#120 := (ite false 0::Int #117)
#123 := (= #120 #117)
#124 := [rewrite]: #123
#121 := (= #26 #120)
#118 := (= #25 #117)
#115 := (= #24 0::Int)
#107 := -3::Int
#110 := (div 1::Int -3::Int)
#113 := (= #110 0::Int)
#114 := [rewrite]: #113
#111 := (= #24 #110)
#108 := (= #23 -3::Int)
#109 := [rewrite]: #108
#105 := (= #22 1::Int)
#100 := (- -1::Int)
#103 := (= #100 1::Int)
#104 := [rewrite]: #103
#101 := (= #22 #100)
#102 := [monotonicity #51]: #101
#106 := [trans #102 #104]: #105
#112 := [monotonicity #106 #109]: #111
#116 := [trans #112 #114]: #115
#98 := (= #21 -1::Int)
#93 := (div -1::Int 3::Int)
#96 := (= #93 -1::Int)
#97 := [rewrite]: #96
#94 := (= #21 #93)
#95 := [monotonicity #51]: #94
#99 := [trans #95 #97]: #98
#91 := (iff #20 #90)
#88 := (iff #19 #85)
#82 := (and #79 #16)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #19 #82)
#80 := (iff #18 #79)
#81 := [monotonicity #51]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#77 := (iff #17 #74)
#71 := (and #68 #16)
#75 := (iff #71 #74)
#76 := [rewrite]: #75
#72 := (iff #17 #71)
#69 := (iff #15 #68)
#70 := [monotonicity #51]: #69
#73 := [monotonicity #70]: #72
#78 := [trans #73 #76]: #77
#92 := [monotonicity #78 #89]: #91
#119 := [monotonicity #92 #99 #116]: #118
#66 := (iff #14 false)
#61 := (or false false)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #14 #61)
#59 := (iff #13 false)
#60 := [rewrite]: #59
#57 := (iff #11 false)
#52 := (= -1::Int 0::Int)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #11 #52)
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#63 := [monotonicity #58 #60]: #62
#67 := [trans #63 #65]: #66
#122 := [monotonicity #67 #119]: #121
#126 := [trans #122 #124]: #125
#129 := [monotonicity #126 #51]: #128
#133 := [trans #129 #131]: #132
#136 := [monotonicity #133]: #135
#172 := [trans #136 #170]: #171
#48 := [asserted]: #28
[mp #48 #172]: false
unsat
282152f210622b67ee14b9ad0372daa57d1c2fe0 122 0
#2 := false
#25 := 1::Int
#26 := (- 1::Int)
#8 := 3::Int
#9 := (- 3::Int)
#21 := (- #9)
#22 := (div #21 #9)
#20 := (div #9 3::Int)
#10 := 0::Int
#15 := (< 0::Int 3::Int)
#17 := (< #9 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int #9)
#16 := (and #14 #15)
#19 := (or #16 #18)
#23 := (ite #19 #20 #22)
#12 := (= 3::Int 0::Int)
#11 := (= #9 0::Int)
#13 := (or #11 #12)
#24 := (ite #13 0::Int #23)
#27 := (= #24 #26)
#28 := (not #27)
#143 := (iff #28 false)
#1 := true
#138 := (not true)
#141 := (iff #138 false)
#142 := [rewrite]: #141
#139 := (iff #28 #138)
#136 := (iff #27 true)
#96 := -1::Int
#131 := (= -1::Int -1::Int)
#134 := (iff #131 true)
#135 := [rewrite]: #134
#132 := (iff #27 #131)
#129 := (= #26 -1::Int)
#130 := [rewrite]: #129
#127 := (= #24 -1::Int)
#122 := (ite false 0::Int -1::Int)
#125 := (= #122 -1::Int)
#126 := [rewrite]: #125
#123 := (= #24 #122)
#120 := (= #23 -1::Int)
#49 := -3::Int
#79 := (< -3::Int 0::Int)
#85 := (and #15 #79)
#68 := (< 0::Int -3::Int)
#74 := (and #15 #68)
#90 := (or #74 #85)
#115 := (ite #90 -1::Int -1::Int)
#118 := (= #115 -1::Int)
#119 := [rewrite]: #118
#116 := (= #23 #115)
#113 := (= #22 -1::Int)
#108 := (div 3::Int -3::Int)
#111 := (= #108 -1::Int)
#112 := [rewrite]: #111
#109 := (= #22 #108)
#50 := (= #9 -3::Int)
#51 := [rewrite]: #50
#106 := (= #21 3::Int)
#101 := (- -3::Int)
#104 := (= #101 3::Int)
#105 := [rewrite]: #104
#102 := (= #21 #101)
#103 := [monotonicity #51]: #102
#107 := [trans #103 #105]: #106
#110 := [monotonicity #107 #51]: #109
#114 := [trans #110 #112]: #113
#99 := (= #20 -1::Int)
#93 := (div -3::Int 3::Int)
#97 := (= #93 -1::Int)
#98 := [rewrite]: #97
#94 := (= #20 #93)
#95 := [monotonicity #51]: #94
#100 := [trans #95 #98]: #99
#91 := (iff #19 #90)
#88 := (iff #18 #85)
#82 := (and #79 #15)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #18 #82)
#80 := (iff #17 #79)
#81 := [monotonicity #51]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#77 := (iff #16 #74)
#71 := (and #68 #15)
#75 := (iff #71 #74)
#76 := [rewrite]: #75
#72 := (iff #16 #71)
#69 := (iff #14 #68)
#70 := [monotonicity #51]: #69
#73 := [monotonicity #70]: #72
#78 := [trans #73 #76]: #77
#92 := [monotonicity #78 #89]: #91
#117 := [monotonicity #92 #100 #114]: #116
#121 := [trans #117 #119]: #120
#66 := (iff #13 false)
#61 := (or false false)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #13 #61)
#59 := (iff #12 false)
#60 := [rewrite]: #59
#57 := (iff #11 false)
#52 := (= -3::Int 0::Int)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #11 #52)
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#63 := [monotonicity #58 #60]: #62
#67 := [trans #63 #65]: #66
#124 := [monotonicity #67 #121]: #123
#128 := [trans #124 #126]: #127
#133 := [monotonicity #128 #130]: #132
#137 := [trans #133 #135]: #136
#140 := [monotonicity #137]: #139
#144 := [trans #140 #142]: #143
#48 := [asserted]: #28
[mp #48 #144]: false
unsat
09bd21e8184625daa5375adf22f60c439ab0cf17 156 0
#2 := false
#27 := 2::Int
#28 := (- 2::Int)
#12 := 3::Int
#23 := (- 3::Int)
#8 := 5::Int
#9 := (- 5::Int)
#22 := (- #9)
#24 := (div #22 #23)
#21 := (div #9 3::Int)
#10 := 0::Int
#16 := (< 0::Int 3::Int)
#18 := (< #9 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int #9)
#17 := (and #15 #16)
#20 := (or #17 #19)
#25 := (ite #20 #21 #24)
#13 := (= 3::Int 0::Int)
#11 := (= #9 0::Int)
#14 := (or #11 #13)
#26 := (ite #14 0::Int #25)
#29 := (= #26 #28)
#30 := (not #29)
#177 := (iff #30 false)
#51 := -5::Int
#81 := (< -5::Int 0::Int)
#87 := (and #16 #81)
#70 := (< 0::Int -5::Int)
#76 := (and #16 #70)
#92 := (or #76 #87)
#140 := (not #92)
#175 := (iff #140 false)
#1 := true
#170 := (not true)
#173 := (iff #170 false)
#174 := [rewrite]: #173
#171 := (iff #140 #170)
#168 := (iff #92 true)
#163 := (or false true)
#166 := (iff #163 true)
#167 := [rewrite]: #166
#164 := (iff #92 #163)
#161 := (iff #87 true)
#156 := (and true true)
#159 := (iff #156 true)
#160 := [rewrite]: #159
#157 := (iff #87 #156)
#154 := (iff #81 true)
#155 := [rewrite]: #154
#143 := (iff #16 true)
#144 := [rewrite]: #143
#158 := [monotonicity #144 #155]: #157
#162 := [trans #158 #160]: #161
#152 := (iff #76 false)
#147 := (and true false)
#150 := (iff #147 false)
#151 := [rewrite]: #150
#148 := (iff #76 #147)
#145 := (iff #70 false)
#146 := [rewrite]: #145
#149 := [monotonicity #144 #146]: #148
#153 := [trans #149 #151]: #152
#165 := [monotonicity #153 #162]: #164
#169 := [trans #165 #167]: #168
#172 := [monotonicity #169]: #171
#176 := [trans #172 #174]: #175
#141 := (iff #30 #140)
#138 := (iff #29 #92)
#98 := -2::Int
#116 := -1::Int
#121 := (ite #92 -2::Int -1::Int)
#133 := (= #121 -2::Int)
#136 := (iff #133 #92)
#137 := [rewrite]: #136
#134 := (iff #29 #133)
#131 := (= #28 -2::Int)
#132 := [rewrite]: #131
#129 := (= #26 #121)
#124 := (ite false 0::Int #121)
#127 := (= #124 #121)
#128 := [rewrite]: #127
#125 := (= #26 #124)
#122 := (= #25 #121)
#119 := (= #24 -1::Int)
#110 := -3::Int
#113 := (div 5::Int -3::Int)
#117 := (= #113 -1::Int)
#118 := [rewrite]: #117
#114 := (= #24 #113)
#111 := (= #23 -3::Int)
#112 := [rewrite]: #111
#108 := (= #22 5::Int)
#103 := (- -5::Int)
#106 := (= #103 5::Int)
#107 := [rewrite]: #106
#104 := (= #22 #103)
#52 := (= #9 -5::Int)
#53 := [rewrite]: #52
#105 := [monotonicity #53]: #104
#109 := [trans #105 #107]: #108
#115 := [monotonicity #109 #112]: #114
#120 := [trans #115 #118]: #119
#101 := (= #21 -2::Int)
#95 := (div -5::Int 3::Int)
#99 := (= #95 -2::Int)
#100 := [rewrite]: #99
#96 := (= #21 #95)
#97 := [monotonicity #53]: #96
#102 := [trans #97 #100]: #101
#93 := (iff #20 #92)
#90 := (iff #19 #87)
#84 := (and #81 #16)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #19 #84)
#82 := (iff #18 #81)
#83 := [monotonicity #53]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#79 := (iff #17 #76)
#73 := (and #70 #16)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #17 #73)
#71 := (iff #15 #70)
#72 := [monotonicity #53]: #71
#75 := [monotonicity #72]: #74
#80 := [trans #75 #78]: #79
#94 := [monotonicity #80 #91]: #93
#123 := [monotonicity #94 #102 #120]: #122
#68 := (iff #14 false)
#63 := (or false false)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #14 #63)
#61 := (iff #13 false)
#62 := [rewrite]: #61
#59 := (iff #11 false)
#54 := (= -5::Int 0::Int)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #11 #54)
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#65 := [monotonicity #60 #62]: #64
#69 := [trans #65 #67]: #68
#126 := [monotonicity #69 #123]: #125
#130 := [trans #126 #128]: #129
#135 := [monotonicity #130 #132]: #134
#139 := [trans #135 #137]: #138
#142 := [monotonicity #139]: #141
#178 := [trans #142 #176]: #177
#50 := [asserted]: #30
[mp #50 #178]: false
unsat
75a498a3ae15008c6ba6962bb8ff41e876585e27 156 0
#2 := false
#10 := 0::Int
#12 := 3::Int
#13 := (- 3::Int)
#24 := (- #13)
#8 := 1::Int
#9 := (- 1::Int)
#23 := (- #9)
#25 := (div #23 #24)
#22 := (div #9 #13)
#17 := (< 0::Int #13)
#19 := (< #9 0::Int)
#20 := (and #19 #17)
#16 := (< 0::Int #9)
#18 := (and #16 #17)
#21 := (or #18 #20)
#26 := (ite #21 #22 #25)
#14 := (= #13 0::Int)
#11 := (= #9 0::Int)
#15 := (or #11 #14)
#27 := (ite #15 0::Int #26)
#28 := (= #27 0::Int)
#29 := (not #28)
#177 := (iff #29 false)
#50 := -1::Int
#86 := (< -1::Int 0::Int)
#60 := -3::Int
#80 := (< 0::Int -3::Int)
#92 := (and #80 #86)
#77 := (< 0::Int -1::Int)
#83 := (and #77 #80)
#97 := (or #83 #92)
#175 := (iff #97 false)
#70 := (or false false)
#73 := (iff #70 false)
#74 := [rewrite]: #73
#173 := (iff #97 #70)
#171 := (iff #92 false)
#1 := true
#166 := (and false true)
#169 := (iff #166 false)
#170 := [rewrite]: #169
#167 := (iff #92 #166)
#164 := (iff #86 true)
#165 := [rewrite]: #164
#155 := (iff #80 false)
#156 := [rewrite]: #155
#168 := [monotonicity #156 #165]: #167
#172 := [trans #168 #170]: #171
#162 := (iff #83 false)
#157 := (and false false)
#160 := (iff #157 false)
#161 := [rewrite]: #160
#158 := (iff #83 #157)
#153 := (iff #77 false)
#154 := [rewrite]: #153
#159 := [monotonicity #154 #156]: #158
#163 := [trans #159 #161]: #162
#174 := [monotonicity #163 #172]: #173
#176 := [trans #174 #74]: #175
#151 := (iff #29 #97)
#141 := (not #97)
#146 := (not #141)
#149 := (iff #146 #97)
#150 := [rewrite]: #149
#147 := (iff #29 #146)
#144 := (iff #28 #141)
#128 := (ite #97 1::Int 0::Int)
#138 := (= #128 0::Int)
#142 := (iff #138 #141)
#143 := [rewrite]: #142
#139 := (iff #28 #138)
#136 := (= #27 #128)
#131 := (ite false 0::Int #128)
#134 := (= #131 #128)
#135 := [rewrite]: #134
#132 := (= #27 #131)
#129 := (= #26 #128)
#126 := (= #25 0::Int)
#121 := (div 1::Int 3::Int)
#124 := (= #121 0::Int)
#125 := [rewrite]: #124
#122 := (= #25 #121)
#119 := (= #24 3::Int)
#114 := (- -3::Int)
#117 := (= #114 3::Int)
#118 := [rewrite]: #117
#115 := (= #24 #114)
#61 := (= #13 -3::Int)
#62 := [rewrite]: #61
#116 := [monotonicity #62]: #115
#120 := [trans #116 #118]: #119
#112 := (= #23 1::Int)
#107 := (- -1::Int)
#110 := (= #107 1::Int)
#111 := [rewrite]: #110
#108 := (= #23 #107)
#51 := (= #9 -1::Int)
#52 := [rewrite]: #51
#109 := [monotonicity #52]: #108
#113 := [trans #109 #111]: #112
#123 := [monotonicity #113 #120]: #122
#127 := [trans #123 #125]: #126
#105 := (= #22 1::Int)
#100 := (div -1::Int -3::Int)
#103 := (= #100 1::Int)
#104 := [rewrite]: #103
#101 := (= #22 #100)
#102 := [monotonicity #52 #62]: #101
#106 := [trans #102 #104]: #105
#98 := (iff #21 #97)
#95 := (iff #20 #92)
#89 := (and #86 #80)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #20 #89)
#81 := (iff #17 #80)
#82 := [monotonicity #62]: #81
#87 := (iff #19 #86)
#88 := [monotonicity #52]: #87
#91 := [monotonicity #88 #82]: #90
#96 := [trans #91 #94]: #95
#84 := (iff #18 #83)
#78 := (iff #16 #77)
#79 := [monotonicity #52]: #78
#85 := [monotonicity #79 #82]: #84
#99 := [monotonicity #85 #96]: #98
#130 := [monotonicity #99 #106 #127]: #129
#75 := (iff #15 false)
#71 := (iff #15 #70)
#68 := (iff #14 false)
#63 := (= -3::Int 0::Int)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #14 #63)
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#58 := (iff #11 false)
#53 := (= -1::Int 0::Int)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #11 #53)
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#72 := [monotonicity #59 #69]: #71
#76 := [trans #72 #74]: #75
#133 := [monotonicity #76 #130]: #132
#137 := [trans #133 #135]: #136
#140 := [monotonicity #137]: #139
#145 := [trans #140 #143]: #144
#148 := [monotonicity #145]: #147
#152 := [trans #148 #150]: #151
#178 := [trans #152 #176]: #177
#49 := [asserted]: #29
[mp #49 #178]: false
unsat
b0f55b14153bd1415b180d8eb26a6650d8024f22 112 0
#2 := false
#23 := 1::Int
#8 := 3::Int
#9 := (- 3::Int)
#19 := (- #9)
#20 := (div #19 #19)
#18 := (div #9 #9)
#10 := 0::Int
#13 := (< 0::Int #9)
#15 := (< #9 0::Int)
#16 := (and #15 #13)
#14 := (and #13 #13)
#17 := (or #14 #16)
#21 := (ite #17 #18 #20)
#11 := (= #9 0::Int)
#12 := (or #11 #11)
#22 := (ite #12 0::Int #21)
#24 := (= #22 1::Int)
#25 := (not #24)
#133 := (iff #25 false)
#1 := true
#128 := (not true)
#131 := (iff #128 false)
#132 := [rewrite]: #131
#129 := (iff #25 #128)
#126 := (iff #24 true)
#121 := (= 1::Int 1::Int)
#124 := (iff #121 true)
#125 := [rewrite]: #124
#122 := (iff #24 #121)
#115 := (ite false 0::Int 1::Int)
#118 := (= #115 1::Int)
#119 := [rewrite]: #118
#116 := (= #22 #115)
#113 := (= #21 1::Int)
#46 := -3::Int
#73 := (< -3::Int 0::Int)
#63 := (< 0::Int -3::Int)
#79 := (and #63 #73)
#84 := (or #63 #79)
#108 := (ite #84 1::Int 1::Int)
#111 := (= #108 1::Int)
#112 := [rewrite]: #111
#109 := (= #21 #108)
#106 := (= #20 1::Int)
#101 := (div 3::Int 3::Int)
#104 := (= #101 1::Int)
#105 := [rewrite]: #104
#102 := (= #20 #101)
#99 := (= #19 3::Int)
#94 := (- -3::Int)
#97 := (= #94 3::Int)
#98 := [rewrite]: #97
#95 := (= #19 #94)
#47 := (= #9 -3::Int)
#48 := [rewrite]: #47
#96 := [monotonicity #48]: #95
#100 := [trans #96 #98]: #99
#103 := [monotonicity #100 #100]: #102
#107 := [trans #103 #105]: #106
#92 := (= #18 1::Int)
#87 := (div -3::Int -3::Int)
#90 := (= #87 1::Int)
#91 := [rewrite]: #90
#88 := (= #18 #87)
#89 := [monotonicity #48 #48]: #88
#93 := [trans #89 #91]: #92
#85 := (iff #17 #84)
#82 := (iff #16 #79)
#76 := (and #73 #63)
#80 := (iff #76 #79)
#81 := [rewrite]: #80
#77 := (iff #16 #76)
#64 := (iff #13 #63)
#65 := [monotonicity #48]: #64
#74 := (iff #15 #73)
#75 := [monotonicity #48]: #74
#78 := [monotonicity #75 #65]: #77
#83 := [trans #78 #81]: #82
#71 := (iff #14 #63)
#66 := (and #63 #63)
#69 := (iff #66 #63)
#70 := [rewrite]: #69
#67 := (iff #14 #66)
#68 := [monotonicity #65 #65]: #67
#72 := [trans #68 #70]: #71
#86 := [monotonicity #72 #83]: #85
#110 := [monotonicity #86 #93 #107]: #109
#114 := [trans #110 #112]: #113
#61 := (iff #12 false)
#56 := (or false false)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #12 #56)
#54 := (iff #11 false)
#49 := (= -3::Int 0::Int)
#52 := (iff #49 false)
#53 := [rewrite]: #52
#50 := (iff #11 #49)
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55 #55]: #57
#62 := [trans #58 #60]: #61
#117 := [monotonicity #62 #114]: #116
#120 := [trans #117 #119]: #24
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#130 := [monotonicity #127]: #129
#134 := [trans #130 #132]: #133
#45 := [asserted]: #25
[mp #45 #134]: false
unsat
cebc167e67bf5c5c55d952431648797ef2d30dde 158 0
#2 := false
#28 := 1::Int
#12 := 3::Int
#13 := (- 3::Int)
#24 := (- #13)
#8 := 5::Int
#9 := (- 5::Int)
#23 := (- #9)
#25 := (div #23 #24)
#22 := (div #9 #13)
#10 := 0::Int
#17 := (< 0::Int #13)
#19 := (< #9 0::Int)
#20 := (and #19 #17)
#16 := (< 0::Int #9)
#18 := (and #16 #17)
#21 := (or #18 #20)
#26 := (ite #21 #22 #25)
#14 := (= #13 0::Int)
#11 := (= #9 0::Int)
#15 := (or #11 #14)
#27 := (ite #15 0::Int #26)
#29 := (= #27 1::Int)
#30 := (not #29)
#179 := (iff #30 false)
#51 := -5::Int
#87 := (< -5::Int 0::Int)
#61 := -3::Int
#81 := (< 0::Int -3::Int)
#93 := (and #81 #87)
#78 := (< 0::Int -5::Int)
#84 := (and #78 #81)
#98 := (or #84 #93)
#177 := (iff #98 false)
#71 := (or false false)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#175 := (iff #98 #71)
#173 := (iff #93 false)
#1 := true
#168 := (and false true)
#171 := (iff #168 false)
#172 := [rewrite]: #171
#169 := (iff #93 #168)
#166 := (iff #87 true)
#167 := [rewrite]: #166
#157 := (iff #81 false)
#158 := [rewrite]: #157
#170 := [monotonicity #158 #167]: #169
#174 := [trans #170 #172]: #173
#164 := (iff #84 false)
#159 := (and false false)
#162 := (iff #159 false)
#163 := [rewrite]: #162
#160 := (iff #84 #159)
#155 := (iff #78 false)
#156 := [rewrite]: #155
#161 := [monotonicity #156 #158]: #160
#165 := [trans #161 #163]: #164
#176 := [monotonicity #165 #174]: #175
#178 := [trans #176 #75]: #177
#153 := (iff #30 #98)
#143 := (not #98)
#148 := (not #143)
#151 := (iff #148 #98)
#152 := [rewrite]: #151
#149 := (iff #30 #148)
#146 := (iff #29 #143)
#104 := 2::Int
#130 := (ite #98 2::Int 1::Int)
#140 := (= #130 1::Int)
#144 := (iff #140 #143)
#145 := [rewrite]: #144
#141 := (iff #29 #140)
#138 := (= #27 #130)
#133 := (ite false 0::Int #130)
#136 := (= #133 #130)
#137 := [rewrite]: #136
#134 := (= #27 #133)
#131 := (= #26 #130)
#128 := (= #25 1::Int)
#123 := (div 5::Int 3::Int)
#126 := (= #123 1::Int)
#127 := [rewrite]: #126
#124 := (= #25 #123)
#121 := (= #24 3::Int)
#116 := (- -3::Int)
#119 := (= #116 3::Int)
#120 := [rewrite]: #119
#117 := (= #24 #116)
#62 := (= #13 -3::Int)
#63 := [rewrite]: #62
#118 := [monotonicity #63]: #117
#122 := [trans #118 #120]: #121
#114 := (= #23 5::Int)
#109 := (- -5::Int)
#112 := (= #109 5::Int)
#113 := [rewrite]: #112
#110 := (= #23 #109)
#52 := (= #9 -5::Int)
#53 := [rewrite]: #52
#111 := [monotonicity #53]: #110
#115 := [trans #111 #113]: #114
#125 := [monotonicity #115 #122]: #124
#129 := [trans #125 #127]: #128
#107 := (= #22 2::Int)
#101 := (div -5::Int -3::Int)
#105 := (= #101 2::Int)
#106 := [rewrite]: #105
#102 := (= #22 #101)
#103 := [monotonicity #53 #63]: #102
#108 := [trans #103 #106]: #107
#99 := (iff #21 #98)
#96 := (iff #20 #93)
#90 := (and #87 #81)
#94 := (iff #90 #93)
#95 := [rewrite]: #94
#91 := (iff #20 #90)
#82 := (iff #17 #81)
#83 := [monotonicity #63]: #82
#88 := (iff #19 #87)
#89 := [monotonicity #53]: #88
#92 := [monotonicity #89 #83]: #91
#97 := [trans #92 #95]: #96
#85 := (iff #18 #84)
#79 := (iff #16 #78)
#80 := [monotonicity #53]: #79
#86 := [monotonicity #80 #83]: #85
#100 := [monotonicity #86 #97]: #99
#132 := [monotonicity #100 #108 #129]: #131
#76 := (iff #15 false)
#72 := (iff #15 #71)
#69 := (iff #14 false)
#64 := (= -3::Int 0::Int)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #14 #64)
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#59 := (iff #11 false)
#54 := (= -5::Int 0::Int)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #11 #54)
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#73 := [monotonicity #60 #70]: #72
#77 := [trans #73 #75]: #76
#135 := [monotonicity #77 #132]: #134
#139 := [trans #135 #137]: #138
#142 := [monotonicity #139]: #141
#147 := [trans #142 #145]: #146
#150 := [monotonicity #147]: #149
#154 := [trans #150 #152]: #153
#180 := [trans #154 #178]: #179
#50 := [asserted]: #30
[mp #50 #180]: false
unsat
cb26d273f6e817a53bda9b00a467150cd5bc2594 70 0
#2 := false
#8 := 0::Int
#14 := (- 0::Int)
#15 := (mod #14 #14)
#16 := (- #15)
#13 := (mod 0::Int 0::Int)
#10 := (< 0::Int 0::Int)
#11 := (and #10 #10)
#12 := (or #11 #11)
#17 := (ite #12 #13 #16)
#9 := (= 0::Int 0::Int)
#18 := (ite #9 0::Int #17)
#19 := (ite #9 0::Int #18)
#20 := (= #19 0::Int)
#21 := (not #20)
#91 := (iff #21 false)
#1 := true
#86 := (not true)
#89 := (iff #86 false)
#90 := [rewrite]: #89
#87 := (iff #21 #86)
#84 := (iff #20 true)
#42 := (iff #9 true)
#43 := [rewrite]: #42
#82 := (iff #20 #9)
#76 := (ite true 0::Int 0::Int)
#79 := (= #76 0::Int)
#80 := [rewrite]: #79
#77 := (= #19 #76)
#74 := (= #18 0::Int)
#60 := -1::Int
#61 := (* -1::Int #13)
#66 := (ite #10 #13 #61)
#69 := (ite true 0::Int #66)
#72 := (= #69 0::Int)
#73 := [rewrite]: #72
#70 := (= #18 #69)
#67 := (= #17 #66)
#64 := (= #16 #61)
#57 := (- #13)
#62 := (= #57 #61)
#63 := [rewrite]: #62
#58 := (= #16 #57)
#55 := (= #15 #13)
#53 := (= #14 0::Int)
#54 := [rewrite]: #53
#56 := [monotonicity #54 #54]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#51 := (iff #12 #10)
#46 := (or #10 #10)
#49 := (iff #46 #10)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 #10)
#45 := [rewrite]: #44
#48 := [monotonicity #45 #45]: #47
#52 := [trans #48 #50]: #51
#68 := [monotonicity #52 #65]: #67
#71 := [monotonicity #43 #68]: #70
#75 := [trans #71 #73]: #74
#78 := [monotonicity #43 #75]: #77
#81 := [trans #78 #80]: #20
#83 := [monotonicity #81]: #82
#85 := [trans #83 #43]: #84
#88 := [monotonicity #85]: #87
#92 := [trans #88 #90]: #91
#41 := [asserted]: #21
[mp #41 #92]: false
unsat
1ec64b4c0435485d0864f4fb378fed079f553a7b 80 0
#2 := false
decl f3 :: Int
#10 := f3
#8 := 0::Int
#20 := (- 0::Int)
#19 := (- f3)
#21 := (mod #19 #20)
#22 := (- #21)
#18 := (mod f3 0::Int)
#13 := (< 0::Int 0::Int)
#15 := (< f3 0::Int)
#16 := (and #15 #13)
#12 := (< 0::Int f3)
#14 := (and #12 #13)
#17 := (or #14 #16)
#23 := (ite #17 #18 #22)
#11 := (= f3 0::Int)
#24 := (ite #11 0::Int #23)
#9 := (= 0::Int 0::Int)
#25 := (ite #9 f3 #24)
#26 := (= #25 f3)
#27 := (not #26)
#100 := (iff #27 false)
#1 := true
#95 := (not true)
#98 := (iff #95 false)
#99 := [rewrite]: #98
#96 := (iff #27 #95)
#93 := (iff #26 true)
#88 := (= f3 f3)
#91 := (iff #88 true)
#92 := [rewrite]: #91
#89 := (iff #26 #88)
#59 := -1::Int
#60 := (* -1::Int f3)
#65 := (mod #60 0::Int)
#71 := (* -1::Int #65)
#53 := (and #13 #15)
#56 := (or #14 #53)
#76 := (ite #56 #18 #71)
#50 := (= 0::Int f3)
#79 := (ite #50 0::Int #76)
#82 := (ite true f3 #79)
#85 := (= #82 f3)
#86 := [rewrite]: #85
#83 := (= #25 #82)
#80 := (= #24 #79)
#77 := (= #23 #76)
#74 := (= #22 #71)
#68 := (- #65)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #22 #68)
#66 := (= #21 #65)
#63 := (= #20 0::Int)
#64 := [rewrite]: #63
#61 := (= #19 #60)
#62 := [rewrite]: #61
#67 := [monotonicity #62 #64]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#57 := (iff #17 #56)
#54 := (iff #16 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#78 := [monotonicity #58 #75]: #77
#51 := (iff #11 #50)
#52 := [rewrite]: #51
#81 := [monotonicity #52 #78]: #80
#48 := (iff #9 true)
#49 := [rewrite]: #48
#84 := [monotonicity #49 #81]: #83
#87 := [trans #84 #86]: #26
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#97 := [monotonicity #94]: #96
#101 := [trans #97 #99]: #100
#47 := [asserted]: #27
[mp #47 #101]: false
unsat
57af3178bd4bde4a26173de026e5de08dfc9faa6 78 0
#2 := false
#9 := 0::Int
#8 := 1::Int
#18 := (- 1::Int)
#17 := (- 0::Int)
#19 := (mod #17 #18)
#20 := (- #19)
#16 := (mod 0::Int 1::Int)
#13 := (< 0::Int 1::Int)
#12 := (< 0::Int 0::Int)
#14 := (and #12 #13)
#15 := (or #14 #14)
#21 := (ite #15 #16 #20)
#11 := (= 0::Int 0::Int)
#22 := (ite #11 0::Int #21)
#10 := (= 1::Int 0::Int)
#23 := (ite #10 0::Int #22)
#24 := (= #23 0::Int)
#25 := (not #24)
#99 := (iff #25 false)
#1 := true
#94 := (not true)
#97 := (iff #94 false)
#98 := [rewrite]: #97
#95 := (iff #25 #94)
#92 := (iff #24 true)
#48 := (iff #11 true)
#49 := [rewrite]: #48
#90 := (iff #24 #11)
#84 := (ite false 0::Int 0::Int)
#87 := (= #84 0::Int)
#88 := [rewrite]: #87
#85 := (= #23 #84)
#82 := (= #22 0::Int)
#77 := (ite true 0::Int 0::Int)
#80 := (= #77 0::Int)
#81 := [rewrite]: #80
#78 := (= #22 #77)
#75 := (= #21 0::Int)
#70 := (ite #14 0::Int 0::Int)
#73 := (= #70 0::Int)
#74 := [rewrite]: #73
#71 := (= #21 #70)
#68 := (= #20 0::Int)
#54 := (= #17 0::Int)
#55 := [rewrite]: #54
#66 := (= #20 #17)
#64 := (= #19 0::Int)
#56 := -1::Int
#59 := (mod 0::Int -1::Int)
#62 := (= #59 0::Int)
#63 := [rewrite]: #62
#60 := (= #19 #59)
#57 := (= #18 -1::Int)
#58 := [rewrite]: #57
#61 := [monotonicity #55 #58]: #60
#65 := [trans #61 #63]: #64
#67 := [monotonicity #65]: #66
#69 := [trans #67 #55]: #68
#52 := (= #16 0::Int)
#53 := [rewrite]: #52
#50 := (iff #15 #14)
#51 := [rewrite]: #50
#72 := [monotonicity #51 #53 #69]: #71
#76 := [trans #72 #74]: #75
#79 := [monotonicity #49 #76]: #78
#83 := [trans #79 #81]: #82
#46 := (iff #10 false)
#47 := [rewrite]: #46
#86 := [monotonicity #47 #83]: #85
#89 := [trans #86 #88]: #24
#91 := [monotonicity #89]: #90
#93 := [trans #91 #49]: #92
#96 := [monotonicity #93]: #95
#100 := [trans #96 #98]: #99
#45 := [asserted]: #25
[mp #45 #100]: false
unsat
1f0751610d262907ec6f1f51ed51a6cd0992f6da 85 0
#2 := false
#9 := 0::Int
#8 := 1::Int
#17 := (- 1::Int)
#18 := (mod #17 #17)
#19 := (- #18)
#16 := (mod 1::Int 1::Int)
#11 := (< 0::Int 1::Int)
#13 := (< 1::Int 0::Int)
#14 := (and #13 #11)
#12 := (and #11 #11)
#15 := (or #12 #14)
#20 := (ite #15 #16 #19)
#10 := (= 1::Int 0::Int)
#21 := (ite #10 0::Int #20)
#22 := (ite #10 1::Int #21)
#23 := (= #22 0::Int)
#24 := (not #23)
#106 := (iff #24 false)
#1 := true
#101 := (not true)
#104 := (iff #101 false)
#105 := [rewrite]: #104
#102 := (iff #24 #101)
#99 := (iff #23 true)
#94 := (= 0::Int 0::Int)
#97 := (iff #94 true)
#98 := [rewrite]: #97
#95 := (iff #23 #94)
#88 := (ite false 1::Int 0::Int)
#91 := (= #88 0::Int)
#92 := [rewrite]: #91
#89 := (= #22 #88)
#86 := (= #21 0::Int)
#81 := (ite false 0::Int 0::Int)
#84 := (= #81 0::Int)
#85 := [rewrite]: #84
#82 := (= #21 #81)
#79 := (= #20 0::Int)
#49 := (and #11 #13)
#52 := (or #11 #49)
#74 := (ite #52 0::Int 0::Int)
#77 := (= #74 0::Int)
#78 := [rewrite]: #77
#75 := (= #20 #74)
#72 := (= #19 0::Int)
#67 := (- 0::Int)
#70 := (= #67 0::Int)
#71 := [rewrite]: #70
#68 := (= #19 #67)
#65 := (= #18 0::Int)
#57 := -1::Int
#60 := (mod -1::Int -1::Int)
#63 := (= #60 0::Int)
#64 := [rewrite]: #63
#61 := (= #18 #60)
#58 := (= #17 -1::Int)
#59 := [rewrite]: #58
#62 := [monotonicity #59 #59]: #61
#66 := [trans #62 #64]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#55 := (= #16 0::Int)
#56 := [rewrite]: #55
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#47 := (iff #12 #11)
#48 := [rewrite]: #47
#54 := [monotonicity #48 #51]: #53
#76 := [monotonicity #54 #56 #73]: #75
#80 := [trans #76 #78]: #79
#45 := (iff #10 false)
#46 := [rewrite]: #45
#83 := [monotonicity #46 #80]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #46 #87]: #89
#93 := [trans #90 #92]: #23
#96 := [monotonicity #93]: #95
#100 := [trans #96 #98]: #99
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#44 := [asserted]: #24
[mp #44 #107]: false
unsat
da01481f3f884bcc8fb68943f21adbedb119b252 92 0
#2 := false
#9 := 0::Int
#8 := 1::Int
#21 := (- 1::Int)
#11 := 3::Int
#20 := (- 3::Int)
#22 := (mod #20 #21)
#23 := (- #22)
#19 := (mod 3::Int 1::Int)
#14 := (< 0::Int 1::Int)
#16 := (< 3::Int 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int 3::Int)
#15 := (and #13 #14)
#18 := (or #15 #17)
#24 := (ite #18 #19 #23)
#12 := (= 3::Int 0::Int)
#25 := (ite #12 0::Int #24)
#10 := (= 1::Int 0::Int)
#26 := (ite #10 3::Int #25)
#27 := (= #26 0::Int)
#28 := (not #27)
#113 := (iff #28 false)
#1 := true
#108 := (not true)
#111 := (iff #108 false)
#112 := [rewrite]: #111
#109 := (iff #28 #108)
#106 := (iff #27 true)
#101 := (= 0::Int 0::Int)
#104 := (iff #101 true)
#105 := [rewrite]: #104
#102 := (iff #27 #101)
#95 := (ite false 3::Int 0::Int)
#98 := (= #95 0::Int)
#99 := [rewrite]: #98
#96 := (= #26 #95)
#93 := (= #25 0::Int)
#88 := (ite false 0::Int 0::Int)
#91 := (= #88 0::Int)
#92 := [rewrite]: #91
#89 := (= #25 #88)
#86 := (= #24 0::Int)
#53 := (and #14 #16)
#56 := (or #15 #53)
#81 := (ite #56 0::Int 0::Int)
#84 := (= #81 0::Int)
#85 := [rewrite]: #84
#82 := (= #24 #81)
#79 := (= #23 0::Int)
#74 := (- 0::Int)
#77 := (= #74 0::Int)
#78 := [rewrite]: #77
#75 := (= #23 #74)
#72 := (= #22 0::Int)
#64 := -1::Int
#61 := -3::Int
#67 := (mod -3::Int -1::Int)
#70 := (= #67 0::Int)
#71 := [rewrite]: #70
#68 := (= #22 #67)
#65 := (= #21 -1::Int)
#66 := [rewrite]: #65
#62 := (= #20 -3::Int)
#63 := [rewrite]: #62
#69 := [monotonicity #63 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#59 := (= #19 0::Int)
#60 := [rewrite]: #59
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#83 := [monotonicity #58 #60 #80]: #82
#87 := [trans #83 #85]: #86
#51 := (iff #12 false)
#52 := [rewrite]: #51
#90 := [monotonicity #52 #87]: #89
#94 := [trans #90 #92]: #93
#49 := (iff #10 false)
#50 := [rewrite]: #49
#97 := [monotonicity #50 #94]: #96
#100 := [trans #97 #99]: #27
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#48 := [asserted]: #28
[mp #48 #114]: false
unsat
eb6e7e04e393e3fdf7579776e17a2526d7e7757f 156 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#11 := f3
#122 := (>= f3 0::Int)
#123 := (not #122)
#109 := (<= f3 0::Int)
#110 := (not #109)
#12 := (= f3 0::Int)
#141 := (or #12 #110 #123)
#172 := (not #141)
#62 := -1::Int
#63 := (* -1::Int f3)
#68 := (mod #63 -1::Int)
#74 := (* -1::Int #68)
#146 := (ite #141 0::Int #74)
#153 := (= #146 0::Int)
#157 := (not #153)
#8 := 1::Int
#21 := (- 1::Int)
#20 := (- f3)
#22 := (mod #20 #21)
#23 := (- #22)
#19 := (mod f3 1::Int)
#14 := (< 0::Int 1::Int)
#16 := (< f3 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int f3)
#15 := (and #13 #14)
#18 := (or #15 #17)
#24 := (ite #18 #19 #23)
#25 := (ite #12 0::Int #24)
#10 := (= 1::Int 0::Int)
#26 := (ite #10 f3 #25)
#27 := (= #26 0::Int)
#28 := (not #27)
#160 := (iff #28 #157)
#54 := (and #14 #16)
#57 := (or #15 #54)
#51 := (= 0::Int f3)
#85 := (or #51 #57)
#86 := (ite #85 0::Int #74)
#101 := (= 0::Int #86)
#106 := (not #101)
#158 := (iff #106 #157)
#155 := (iff #101 #153)
#149 := (= 0::Int #146)
#152 := (iff #149 #153)
#154 := [rewrite]: #152
#150 := (iff #101 #149)
#147 := (= #86 #146)
#144 := (iff #85 #141)
#135 := (or #110 #123)
#138 := (or #12 #135)
#142 := (iff #138 #141)
#143 := [rewrite]: #142
#139 := (iff #85 #138)
#136 := (iff #57 #135)
#131 := (iff #54 #123)
#1 := true
#126 := (and true #123)
#129 := (iff #126 #123)
#130 := [rewrite]: #129
#127 := (iff #54 #126)
#124 := (iff #16 #123)
#125 := [rewrite]: #124
#113 := (iff #14 true)
#114 := [rewrite]: #113
#128 := [monotonicity #114 #125]: #127
#132 := [trans #128 #130]: #131
#120 := (iff #15 #110)
#115 := (and #110 true)
#118 := (iff #115 #110)
#119 := [rewrite]: #118
#116 := (iff #15 #115)
#111 := (iff #13 #110)
#112 := [rewrite]: #111
#117 := [monotonicity #112 #114]: #116
#121 := [trans #117 #119]: #120
#137 := [monotonicity #121 #132]: #136
#133 := (iff #51 #12)
#134 := [rewrite]: #133
#140 := [monotonicity #134 #137]: #139
#145 := [trans #140 #143]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#156 := [trans #151 #154]: #155
#159 := [monotonicity #156]: #158
#107 := (iff #28 #106)
#104 := (iff #27 #101)
#98 := (= #86 0::Int)
#102 := (iff #98 #101)
#103 := [rewrite]: #102
#99 := (iff #27 #98)
#96 := (= #26 #86)
#91 := (ite false f3 #86)
#94 := (= #91 #86)
#95 := [rewrite]: #94
#92 := (= #26 #91)
#89 := (= #25 #86)
#79 := (ite #57 0::Int #74)
#82 := (ite #51 0::Int #79)
#87 := (= #82 #86)
#88 := [rewrite]: #87
#83 := (= #25 #82)
#80 := (= #24 #79)
#77 := (= #23 #74)
#71 := (- #68)
#75 := (= #71 #74)
#76 := [rewrite]: #75
#72 := (= #23 #71)
#69 := (= #22 #68)
#66 := (= #21 -1::Int)
#67 := [rewrite]: #66
#64 := (= #20 #63)
#65 := [rewrite]: #64
#70 := [monotonicity #65 #67]: #69
#73 := [monotonicity #70]: #72
#78 := [trans #73 #76]: #77
#60 := (= #19 0::Int)
#61 := [rewrite]: #60
#58 := (iff #18 #57)
#55 := (iff #17 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#81 := [monotonicity #59 #61 #78]: #80
#52 := (iff #12 #51)
#53 := [rewrite]: #52
#84 := [monotonicity #53 #81]: #83
#90 := [trans #84 #88]: #89
#49 := (iff #10 false)
#50 := [rewrite]: #49
#93 := [monotonicity #50 #90]: #92
#97 := [trans #93 #95]: #96
#100 := [monotonicity #97]: #99
#105 := [trans #100 #103]: #104
#108 := [monotonicity #105]: #107
#161 := [trans #108 #159]: #160
#48 := [asserted]: #28
#162 := [mp #48 #161]: #157
#175 := (or #172 #153)
#176 := [def-axiom]: #175
#233 := [unit-resolution #176 #162]: #172
#164 := (or #141 #122)
#165 := [def-axiom]: #164
#234 := [unit-resolution #165 #233]: #122
#166 := (or #141 #109)
#167 := [def-axiom]: #166
#235 := [unit-resolution #167 #233]: #109
#169 := (not #12)
#170 := (or #141 #169)
#171 := [def-axiom]: #170
#236 := [unit-resolution #171 #233]: #169
#237 := [th-lemma arith triangle-eq]: #141
[unit-resolution #237 #236 #235 #234]: false
unsat
106013bb1f998104836223245ab92e3b99397a07 107 0
#2 := false
#10 := 0::Int
#8 := 1::Int
#9 := (- 1::Int)
#19 := (- #9)
#18 := (- 0::Int)
#20 := (mod #18 #19)
#21 := (- #20)
#17 := (mod 0::Int #9)
#14 := (< 0::Int #9)
#13 := (< 0::Int 0::Int)
#15 := (and #13 #14)
#16 := (or #15 #15)
#22 := (ite #16 #17 #21)
#12 := (= 0::Int 0::Int)
#23 := (ite #12 0::Int #22)
#11 := (= #9 0::Int)
#24 := (ite #11 0::Int #23)
#25 := (= #24 0::Int)
#26 := (not #25)
#128 := (iff #26 false)
#1 := true
#123 := (not true)
#126 := (iff #123 false)
#127 := [rewrite]: #126
#124 := (iff #26 #123)
#121 := (iff #25 true)
#57 := (iff #12 true)
#58 := [rewrite]: #57
#119 := (iff #25 #12)
#113 := (ite false 0::Int 0::Int)
#116 := (= #113 0::Int)
#117 := [rewrite]: #116
#114 := (= #24 #113)
#111 := (= #23 0::Int)
#106 := (ite true 0::Int 0::Int)
#109 := (= #106 0::Int)
#110 := [rewrite]: #109
#107 := (= #23 #106)
#104 := (= #22 0::Int)
#47 := -1::Int
#59 := (< 0::Int -1::Int)
#62 := (and #13 #59)
#99 := (ite #62 0::Int 0::Int)
#102 := (= #99 0::Int)
#103 := [rewrite]: #102
#100 := (= #22 #99)
#97 := (= #21 0::Int)
#79 := (= #18 0::Int)
#80 := [rewrite]: #79
#95 := (= #21 #18)
#93 := (= #20 0::Int)
#88 := (mod 0::Int 1::Int)
#91 := (= #88 0::Int)
#92 := [rewrite]: #91
#89 := (= #20 #88)
#86 := (= #19 1::Int)
#81 := (- -1::Int)
#84 := (= #81 1::Int)
#85 := [rewrite]: #84
#82 := (= #19 #81)
#48 := (= #9 -1::Int)
#49 := [rewrite]: #48
#83 := [monotonicity #49]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #80 #87]: #89
#94 := [trans #90 #92]: #93
#96 := [monotonicity #94]: #95
#98 := [trans #96 #80]: #97
#77 := (= #17 0::Int)
#72 := (mod 0::Int -1::Int)
#75 := (= #72 0::Int)
#76 := [rewrite]: #75
#73 := (= #17 #72)
#74 := [monotonicity #49]: #73
#78 := [trans #74 #76]: #77
#70 := (iff #16 #62)
#65 := (or #62 #62)
#68 := (iff #65 #62)
#69 := [rewrite]: #68
#66 := (iff #16 #65)
#63 := (iff #15 #62)
#60 := (iff #14 #59)
#61 := [monotonicity #49]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64 #64]: #66
#71 := [trans #67 #69]: #70
#101 := [monotonicity #71 #78 #98]: #100
#105 := [trans #101 #103]: #104
#108 := [monotonicity #58 #105]: #107
#112 := [trans #108 #110]: #111
#55 := (iff #11 false)
#50 := (= -1::Int 0::Int)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #11 #50)
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#115 := [monotonicity #56 #112]: #114
#118 := [trans #115 #117]: #25
#120 := [monotonicity #118]: #119
#122 := [trans #120 #58]: #121
#125 := [monotonicity #122]: #124
#129 := [trans #125 #127]: #128
#46 := [asserted]: #26
[mp #46 #129]: false
unsat
8d5198a1caadbe07ee33787baa9fbc0f66546c9a 111 0
#2 := false
#10 := 0::Int
#8 := 1::Int
#9 := (- 1::Int)
#20 := (- #9)
#21 := (mod #9 #20)
#22 := (- #21)
#19 := (mod 1::Int #9)
#14 := (< 0::Int #9)
#16 := (< 1::Int 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int 1::Int)
#15 := (and #13 #14)
#18 := (or #15 #17)
#23 := (ite #18 #19 #22)
#12 := (= 1::Int 0::Int)
#24 := (ite #12 0::Int #23)
#11 := (= #9 0::Int)
#25 := (ite #11 1::Int #24)
#26 := (= #25 0::Int)
#27 := (not #26)
#132 := (iff #27 false)
#1 := true
#127 := (not true)
#130 := (iff #127 false)
#131 := [rewrite]: #130
#128 := (iff #27 #127)
#125 := (iff #26 true)
#120 := (= 0::Int 0::Int)
#123 := (iff #120 true)
#124 := [rewrite]: #123
#121 := (iff #26 #120)
#114 := (ite false 1::Int 0::Int)
#117 := (= #114 0::Int)
#118 := [rewrite]: #117
#115 := (= #25 #114)
#112 := (= #24 0::Int)
#107 := (ite false 0::Int 0::Int)
#110 := (= #107 0::Int)
#111 := [rewrite]: #110
#108 := (= #24 #107)
#105 := (= #23 0::Int)
#48 := -1::Int
#60 := (< 0::Int -1::Int)
#66 := (and #16 #60)
#63 := (and #13 #60)
#69 := (or #63 #66)
#100 := (ite #69 0::Int 0::Int)
#103 := (= #100 0::Int)
#104 := [rewrite]: #103
#101 := (= #23 #100)
#98 := (= #22 0::Int)
#93 := (- 0::Int)
#96 := (= #93 0::Int)
#97 := [rewrite]: #96
#94 := (= #22 #93)
#91 := (= #21 0::Int)
#86 := (mod -1::Int 1::Int)
#89 := (= #86 0::Int)
#90 := [rewrite]: #89
#87 := (= #21 #86)
#84 := (= #20 1::Int)
#79 := (- -1::Int)
#82 := (= #79 1::Int)
#83 := [rewrite]: #82
#80 := (= #20 #79)
#49 := (= #9 -1::Int)
#50 := [rewrite]: #49
#81 := [monotonicity #50]: #80
#85 := [trans #81 #83]: #84
#88 := [monotonicity #50 #85]: #87
#92 := [trans #88 #90]: #91
#95 := [monotonicity #92]: #94
#99 := [trans #95 #97]: #98
#77 := (= #19 0::Int)
#72 := (mod 1::Int -1::Int)
#75 := (= #72 0::Int)
#76 := [rewrite]: #75
#73 := (= #19 #72)
#74 := [monotonicity #50]: #73
#78 := [trans #74 #76]: #77
#70 := (iff #18 #69)
#67 := (iff #17 #66)
#61 := (iff #14 #60)
#62 := [monotonicity #50]: #61
#68 := [monotonicity #62]: #67
#64 := (iff #15 #63)
#65 := [monotonicity #62]: #64
#71 := [monotonicity #65 #68]: #70
#102 := [monotonicity #71 #78 #99]: #101
#106 := [trans #102 #104]: #105
#58 := (iff #12 false)
#59 := [rewrite]: #58
#109 := [monotonicity #59 #106]: #108
#113 := [trans #109 #111]: #112
#56 := (iff #11 false)
#51 := (= -1::Int 0::Int)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #11 #51)
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#116 := [monotonicity #57 #113]: #115
#119 := [trans #116 #118]: #26
#122 := [monotonicity #119]: #121
#126 := [trans #122 #124]: #125
#129 := [monotonicity #126]: #128
#133 := [trans #129 #131]: #132
#47 := [asserted]: #27
[mp #47 #133]: false
unsat
3e5306453747f88fb9407b2be361e50903b04cbd 116 0
#2 := false
#10 := 0::Int
#8 := 1::Int
#9 := (- 1::Int)
#22 := (- #9)
#12 := 3::Int
#21 := (- 3::Int)
#23 := (mod #21 #22)
#24 := (- #23)
#20 := (mod 3::Int #9)
#15 := (< 0::Int #9)
#17 := (< 3::Int 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int 3::Int)
#16 := (and #14 #15)
#19 := (or #16 #18)
#25 := (ite #19 #20 #24)
#13 := (= 3::Int 0::Int)
#26 := (ite #13 0::Int #25)
#11 := (= #9 0::Int)
#27 := (ite #11 3::Int #26)
#28 := (= #27 0::Int)
#29 := (not #28)
#137 := (iff #29 false)
#1 := true
#132 := (not true)
#135 := (iff #132 false)
#136 := [rewrite]: #135
#133 := (iff #29 #132)
#130 := (iff #28 true)
#125 := (= 0::Int 0::Int)
#128 := (iff #125 true)
#129 := [rewrite]: #128
#126 := (iff #28 #125)
#119 := (ite false 3::Int 0::Int)
#122 := (= #119 0::Int)
#123 := [rewrite]: #122
#120 := (= #27 #119)
#117 := (= #26 0::Int)
#112 := (ite false 0::Int 0::Int)
#115 := (= #112 0::Int)
#116 := [rewrite]: #115
#113 := (= #26 #112)
#110 := (= #25 0::Int)
#50 := -1::Int
#62 := (< 0::Int -1::Int)
#68 := (and #17 #62)
#65 := (and #14 #62)
#71 := (or #65 #68)
#105 := (ite #71 0::Int 0::Int)
#108 := (= #105 0::Int)
#109 := [rewrite]: #108
#106 := (= #25 #105)
#103 := (= #24 0::Int)
#98 := (- 0::Int)
#101 := (= #98 0::Int)
#102 := [rewrite]: #101
#99 := (= #24 #98)
#96 := (= #23 0::Int)
#81 := -3::Int
#91 := (mod -3::Int 1::Int)
#94 := (= #91 0::Int)
#95 := [rewrite]: #94
#92 := (= #23 #91)
#89 := (= #22 1::Int)
#84 := (- -1::Int)
#87 := (= #84 1::Int)
#88 := [rewrite]: #87
#85 := (= #22 #84)
#51 := (= #9 -1::Int)
#52 := [rewrite]: #51
#86 := [monotonicity #52]: #85
#90 := [trans #86 #88]: #89
#82 := (= #21 -3::Int)
#83 := [rewrite]: #82
#93 := [monotonicity #83 #90]: #92
#97 := [trans #93 #95]: #96
#100 := [monotonicity #97]: #99
#104 := [trans #100 #102]: #103
#79 := (= #20 0::Int)
#74 := (mod 3::Int -1::Int)
#77 := (= #74 0::Int)
#78 := [rewrite]: #77
#75 := (= #20 #74)
#76 := [monotonicity #52]: #75
#80 := [trans #76 #78]: #79
#72 := (iff #19 #71)
#69 := (iff #18 #68)
#63 := (iff #15 #62)
#64 := [monotonicity #52]: #63
#70 := [monotonicity #64]: #69
#66 := (iff #16 #65)
#67 := [monotonicity #64]: #66
#73 := [monotonicity #67 #70]: #72
#107 := [monotonicity #73 #80 #104]: #106
#111 := [trans #107 #109]: #110
#60 := (iff #13 false)
#61 := [rewrite]: #60
#114 := [monotonicity #61 #111]: #113
#118 := [trans #114 #116]: #117
#58 := (iff #11 false)
#53 := (= -1::Int 0::Int)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #11 #53)
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#121 := [monotonicity #59 #118]: #120
#124 := [trans #121 #123]: #28
#127 := [monotonicity #124]: #126
#131 := [trans #127 #129]: #130
#134 := [monotonicity #131]: #133
#138 := [trans #134 #136]: #137
#49 := [asserted]: #29
[mp #49 #138]: false
unsat
56a38afd92c36cbda7ea0320ace529eafcdd0527 180 0
#2 := false
#10 := 0::Int
#8 := 1::Int
#9 := (- 1::Int)
#22 := (- #9)
decl f3 :: Int
#12 := f3
#21 := (- f3)
#23 := (mod #21 #22)
#24 := (- #23)
#20 := (mod f3 #9)
#15 := (< 0::Int #9)
#17 := (< f3 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int f3)
#16 := (and #14 #15)
#19 := (or #16 #18)
#25 := (ite #19 #20 #24)
#13 := (= f3 0::Int)
#26 := (ite #13 0::Int #25)
#11 := (= #9 0::Int)
#27 := (ite #11 f3 #26)
#28 := (= #27 0::Int)
#29 := (not #28)
#200 := (iff #29 false)
#50 := -1::Int
#75 := (mod f3 -1::Int)
#63 := (< 0::Int -1::Int)
#69 := (and #17 #63)
#66 := (and #14 #63)
#72 := (or #66 #69)
#108 := (not #72)
#60 := (= 0::Int f3)
#109 := (or #60 #108)
#110 := (ite #109 0::Int #75)
#125 := (= 0::Int #110)
#130 := (not #125)
#198 := (iff #130 false)
#1 := true
#193 := (not true)
#196 := (iff #193 false)
#197 := [rewrite]: #196
#194 := (iff #130 #193)
#191 := (iff #125 true)
#186 := (= 0::Int 0::Int)
#189 := (iff #186 true)
#190 := [rewrite]: #189
#187 := (iff #125 #186)
#122 := (= #110 0::Int)
#180 := (ite true 0::Int #75)
#183 := (= #180 0::Int)
#184 := [rewrite]: #183
#181 := (= #110 #180)
#178 := (iff #109 true)
#173 := (or #13 true)
#176 := (iff #173 true)
#177 := [rewrite]: #176
#174 := (iff #109 #173)
#171 := (iff #108 true)
#166 := (not false)
#169 := (iff #166 true)
#170 := [rewrite]: #169
#167 := (iff #108 #166)
#164 := (iff #72 false)
#159 := (or false false)
#162 := (iff #159 false)
#163 := [rewrite]: #162
#160 := (iff #72 #159)
#157 := (iff #69 false)
#148 := (>= f3 0::Int)
#149 := (not #148)
#152 := (and #149 false)
#155 := (iff #152 false)
#156 := [rewrite]: #155
#153 := (iff #69 #152)
#139 := (iff #63 false)
#140 := [rewrite]: #139
#150 := (iff #17 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151 #140]: #153
#158 := [trans #154 #156]: #157
#146 := (iff #66 false)
#135 := (<= f3 0::Int)
#136 := (not #135)
#141 := (and #136 false)
#144 := (iff #141 false)
#145 := [rewrite]: #144
#142 := (iff #66 #141)
#137 := (iff #14 #136)
#138 := [rewrite]: #137
#143 := [monotonicity #138 #140]: #142
#147 := [trans #143 #145]: #146
#161 := [monotonicity #147 #158]: #160
#165 := [trans #161 #163]: #164
#168 := [monotonicity #165]: #167
#172 := [trans #168 #170]: #171
#133 := (iff #60 #13)
#134 := [rewrite]: #133
#175 := [monotonicity #134 #172]: #174
#179 := [trans #175 #177]: #178
#182 := [monotonicity #179]: #181
#185 := [trans #182 #184]: #122
#188 := [monotonicity #185]: #187
#192 := [trans #188 #190]: #191
#195 := [monotonicity #192]: #194
#199 := [trans #195 #197]: #198
#131 := (iff #29 #130)
#128 := (iff #28 #125)
#126 := (iff #122 #125)
#127 := [rewrite]: #126
#123 := (iff #28 #122)
#120 := (= #27 #110)
#115 := (ite false f3 #110)
#118 := (= #115 #110)
#119 := [rewrite]: #118
#116 := (= #27 #115)
#113 := (= #26 #110)
#102 := (ite #72 #75 0::Int)
#105 := (ite #60 0::Int #102)
#111 := (= #105 #110)
#112 := [rewrite]: #111
#106 := (= #26 #105)
#103 := (= #25 #102)
#100 := (= #24 0::Int)
#95 := (- 0::Int)
#98 := (= #95 0::Int)
#99 := [rewrite]: #98
#96 := (= #24 #95)
#93 := (= #23 0::Int)
#78 := (* -1::Int f3)
#88 := (mod #78 1::Int)
#91 := (= #88 0::Int)
#92 := [rewrite]: #91
#89 := (= #23 #88)
#86 := (= #22 1::Int)
#81 := (- -1::Int)
#84 := (= #81 1::Int)
#85 := [rewrite]: #84
#82 := (= #22 #81)
#51 := (= #9 -1::Int)
#52 := [rewrite]: #51
#83 := [monotonicity #52]: #82
#87 := [trans #83 #85]: #86
#79 := (= #21 #78)
#80 := [rewrite]: #79
#90 := [monotonicity #80 #87]: #89
#94 := [trans #90 #92]: #93
#97 := [monotonicity #94]: #96
#101 := [trans #97 #99]: #100
#76 := (= #20 #75)
#77 := [monotonicity #52]: #76
#73 := (iff #19 #72)
#70 := (iff #18 #69)
#64 := (iff #15 #63)
#65 := [monotonicity #52]: #64
#71 := [monotonicity #65]: #70
#67 := (iff #16 #66)
#68 := [monotonicity #65]: #67
#74 := [monotonicity #68 #71]: #73
#104 := [monotonicity #74 #77 #101]: #103
#61 := (iff #13 #60)
#62 := [rewrite]: #61
#107 := [monotonicity #62 #104]: #106
#114 := [trans #107 #112]: #113
#58 := (iff #11 false)
#53 := (= -1::Int 0::Int)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #11 #53)
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#117 := [monotonicity #59 #114]: #116
#121 := [trans #117 #119]: #120
#124 := [monotonicity #121]: #123
#129 := [trans #124 #127]: #128
#132 := [monotonicity #129]: #131
#201 := [trans #132 #199]: #200
#49 := [asserted]: #29
[mp #49 #201]: false
unsat
aaecefccca197f785d6ec165e82f88f0ae2f4e23 78 0
#2 := false
#9 := 0::Int
#8 := 3::Int
#18 := (- 3::Int)
#17 := (- 0::Int)
#19 := (mod #17 #18)
#20 := (- #19)
#16 := (mod 0::Int 3::Int)
#13 := (< 0::Int 3::Int)
#12 := (< 0::Int 0::Int)
#14 := (and #12 #13)
#15 := (or #14 #14)
#21 := (ite #15 #16 #20)
#11 := (= 0::Int 0::Int)
#22 := (ite #11 0::Int #21)
#10 := (= 3::Int 0::Int)
#23 := (ite #10 0::Int #22)
#24 := (= #23 0::Int)
#25 := (not #24)
#99 := (iff #25 false)
#1 := true
#94 := (not true)
#97 := (iff #94 false)
#98 := [rewrite]: #97
#95 := (iff #25 #94)
#92 := (iff #24 true)
#48 := (iff #11 true)
#49 := [rewrite]: #48
#90 := (iff #24 #11)
#84 := (ite false 0::Int 0::Int)
#87 := (= #84 0::Int)
#88 := [rewrite]: #87
#85 := (= #23 #84)
#82 := (= #22 0::Int)
#77 := (ite true 0::Int 0::Int)
#80 := (= #77 0::Int)
#81 := [rewrite]: #80
#78 := (= #22 #77)
#75 := (= #21 0::Int)
#70 := (ite #14 0::Int 0::Int)
#73 := (= #70 0::Int)
#74 := [rewrite]: #73
#71 := (= #21 #70)
#68 := (= #20 0::Int)
#54 := (= #17 0::Int)
#55 := [rewrite]: #54
#66 := (= #20 #17)
#64 := (= #19 0::Int)
#56 := -3::Int
#59 := (mod 0::Int -3::Int)
#62 := (= #59 0::Int)
#63 := [rewrite]: #62
#60 := (= #19 #59)
#57 := (= #18 -3::Int)
#58 := [rewrite]: #57
#61 := [monotonicity #55 #58]: #60
#65 := [trans #61 #63]: #64
#67 := [monotonicity #65]: #66
#69 := [trans #67 #55]: #68
#52 := (= #16 0::Int)
#53 := [rewrite]: #52
#50 := (iff #15 #14)
#51 := [rewrite]: #50
#72 := [monotonicity #51 #53 #69]: #71
#76 := [trans #72 #74]: #75
#79 := [monotonicity #49 #76]: #78
#83 := [trans #79 #81]: #82
#46 := (iff #10 false)
#47 := [rewrite]: #46
#86 := [monotonicity #47 #83]: #85
#89 := [trans #86 #88]: #24
#91 := [monotonicity #89]: #90
#93 := [trans #91 #49]: #92
#96 := [monotonicity #93]: #95
#100 := [trans #96 #98]: #99
#45 := [asserted]: #25
[mp #45 #100]: false
unsat
000d5a08395f518246c54a195994fc62266f45ed 107 0
#2 := false
#10 := 0::Int
#8 := 3::Int
#9 := (- 3::Int)
#19 := (- #9)
#18 := (- 0::Int)
#20 := (mod #18 #19)
#21 := (- #20)
#17 := (mod 0::Int #9)
#14 := (< 0::Int #9)
#13 := (< 0::Int 0::Int)
#15 := (and #13 #14)
#16 := (or #15 #15)
#22 := (ite #16 #17 #21)
#12 := (= 0::Int 0::Int)
#23 := (ite #12 0::Int #22)
#11 := (= #9 0::Int)
#24 := (ite #11 0::Int #23)
#25 := (= #24 0::Int)
#26 := (not #25)
#128 := (iff #26 false)
#1 := true
#123 := (not true)
#126 := (iff #123 false)
#127 := [rewrite]: #126
#124 := (iff #26 #123)
#121 := (iff #25 true)
#57 := (iff #12 true)
#58 := [rewrite]: #57
#119 := (iff #25 #12)
#113 := (ite false 0::Int 0::Int)
#116 := (= #113 0::Int)
#117 := [rewrite]: #116
#114 := (= #24 #113)
#111 := (= #23 0::Int)
#106 := (ite true 0::Int 0::Int)
#109 := (= #106 0::Int)
#110 := [rewrite]: #109
#107 := (= #23 #106)
#104 := (= #22 0::Int)
#47 := -3::Int
#59 := (< 0::Int -3::Int)
#62 := (and #13 #59)
#99 := (ite #62 0::Int 0::Int)
#102 := (= #99 0::Int)
#103 := [rewrite]: #102
#100 := (= #22 #99)
#97 := (= #21 0::Int)
#79 := (= #18 0::Int)
#80 := [rewrite]: #79
#95 := (= #21 #18)
#93 := (= #20 0::Int)
#88 := (mod 0::Int 3::Int)
#91 := (= #88 0::Int)
#92 := [rewrite]: #91
#89 := (= #20 #88)
#86 := (= #19 3::Int)
#81 := (- -3::Int)
#84 := (= #81 3::Int)
#85 := [rewrite]: #84
#82 := (= #19 #81)
#48 := (= #9 -3::Int)
#49 := [rewrite]: #48
#83 := [monotonicity #49]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #80 #87]: #89
#94 := [trans #90 #92]: #93
#96 := [monotonicity #94]: #95
#98 := [trans #96 #80]: #97
#77 := (= #17 0::Int)
#72 := (mod 0::Int -3::Int)
#75 := (= #72 0::Int)
#76 := [rewrite]: #75
#73 := (= #17 #72)
#74 := [monotonicity #49]: #73
#78 := [trans #74 #76]: #77
#70 := (iff #16 #62)
#65 := (or #62 #62)
#68 := (iff #65 #62)
#69 := [rewrite]: #68
#66 := (iff #16 #65)
#63 := (iff #15 #62)
#60 := (iff #14 #59)
#61 := [monotonicity #49]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64 #64]: #66
#71 := [trans #67 #69]: #70
#101 := [monotonicity #71 #78 #98]: #100
#105 := [trans #101 #103]: #104
#108 := [monotonicity #58 #105]: #107
#112 := [trans #108 #110]: #111
#55 := (iff #11 false)
#50 := (= -3::Int 0::Int)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #11 #50)
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#115 := [monotonicity #56 #112]: #114
#118 := [trans #115 #117]: #25
#120 := [monotonicity #118]: #119
#122 := [trans #120 #58]: #121
#125 := [monotonicity #122]: #124
#129 := [trans #125 #127]: #128
#46 := [asserted]: #26
[mp #46 #129]: false
unsat
54496e8e1bdde41302d50e03b35540e70008eccf 123 0
#2 := false
#11 := 1::Int
#8 := 3::Int
#21 := (- 3::Int)
#20 := (- 1::Int)
#22 := (mod #20 #21)
#23 := (- #22)
#19 := (mod 1::Int 3::Int)
#9 := 0::Int
#14 := (< 0::Int 3::Int)
#16 := (< 1::Int 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int 1::Int)
#15 := (and #13 #14)
#18 := (or #15 #17)
#24 := (ite #18 #19 #23)
#12 := (= 1::Int 0::Int)
#25 := (ite #12 0::Int #24)
#10 := (= 3::Int 0::Int)
#26 := (ite #10 1::Int #25)
#27 := (= #26 1::Int)
#28 := (not #27)
#144 := (iff #28 false)
#53 := (and #14 #16)
#56 := (or #15 #53)
#107 := (not #56)
#142 := (iff #107 false)
#1 := true
#137 := (not true)
#140 := (iff #137 false)
#141 := [rewrite]: #140
#138 := (iff #107 #137)
#135 := (iff #56 true)
#130 := (or true false)
#133 := (iff #130 true)
#134 := [rewrite]: #133
#131 := (iff #56 #130)
#128 := (iff #53 false)
#123 := (and true false)
#126 := (iff #123 false)
#127 := [rewrite]: #126
#124 := (iff #53 #123)
#121 := (iff #16 false)
#122 := [rewrite]: #121
#112 := (iff #14 true)
#113 := [rewrite]: #112
#125 := [monotonicity #113 #122]: #124
#129 := [trans #125 #127]: #128
#119 := (iff #15 true)
#114 := (and true true)
#117 := (iff #114 true)
#118 := [rewrite]: #117
#115 := (iff #15 #114)
#110 := (iff #13 true)
#111 := [rewrite]: #110
#116 := [monotonicity #111 #113]: #115
#120 := [trans #116 #118]: #119
#132 := [monotonicity #120 #129]: #131
#136 := [trans #132 #134]: #135
#139 := [monotonicity #136]: #138
#143 := [trans #139 #141]: #142
#108 := (iff #28 #107)
#105 := (iff #27 #56)
#78 := -2::Int
#83 := (ite #56 1::Int -2::Int)
#100 := (= #83 1::Int)
#103 := (iff #100 #56)
#104 := [rewrite]: #103
#101 := (iff #27 #100)
#98 := (= #26 #83)
#93 := (ite false 1::Int #83)
#96 := (= #93 #83)
#97 := [rewrite]: #96
#94 := (= #26 #93)
#91 := (= #25 #83)
#86 := (ite false 0::Int #83)
#89 := (= #86 #83)
#90 := [rewrite]: #89
#87 := (= #25 #86)
#84 := (= #24 #83)
#81 := (= #23 -2::Int)
#70 := 2::Int
#75 := (- 2::Int)
#79 := (= #75 -2::Int)
#80 := [rewrite]: #79
#76 := (= #23 #75)
#73 := (= #22 2::Int)
#64 := -3::Int
#61 := -1::Int
#67 := (mod -1::Int -3::Int)
#71 := (= #67 2::Int)
#72 := [rewrite]: #71
#68 := (= #22 #67)
#65 := (= #21 -3::Int)
#66 := [rewrite]: #65
#62 := (= #20 -1::Int)
#63 := [rewrite]: #62
#69 := [monotonicity #63 #66]: #68
#74 := [trans #69 #72]: #73
#77 := [monotonicity #74]: #76
#82 := [trans #77 #80]: #81
#59 := (= #19 1::Int)
#60 := [rewrite]: #59
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#85 := [monotonicity #58 #60 #82]: #84
#51 := (iff #12 false)
#52 := [rewrite]: #51
#88 := [monotonicity #52 #85]: #87
#92 := [trans #88 #90]: #91
#49 := (iff #10 false)
#50 := [rewrite]: #49
#95 := [monotonicity #50 #92]: #94
#99 := [trans #95 #97]: #98
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#109 := [monotonicity #106]: #108
#145 := [trans #109 #143]: #144
#48 := [asserted]: #28
[mp #48 #145]: false
unsat
2e12b506bd838c7a91cf9b35f04a675da557e17b 85 0
#2 := false
#9 := 0::Int
#8 := 3::Int
#17 := (- 3::Int)
#18 := (mod #17 #17)
#19 := (- #18)
#16 := (mod 3::Int 3::Int)
#11 := (< 0::Int 3::Int)
#13 := (< 3::Int 0::Int)
#14 := (and #13 #11)
#12 := (and #11 #11)
#15 := (or #12 #14)
#20 := (ite #15 #16 #19)
#10 := (= 3::Int 0::Int)
#21 := (ite #10 0::Int #20)
#22 := (ite #10 3::Int #21)
#23 := (= #22 0::Int)
#24 := (not #23)
#106 := (iff #24 false)
#1 := true
#101 := (not true)
#104 := (iff #101 false)
#105 := [rewrite]: #104
#102 := (iff #24 #101)
#99 := (iff #23 true)
#94 := (= 0::Int 0::Int)
#97 := (iff #94 true)
#98 := [rewrite]: #97
#95 := (iff #23 #94)
#88 := (ite false 3::Int 0::Int)
#91 := (= #88 0::Int)
#92 := [rewrite]: #91
#89 := (= #22 #88)
#86 := (= #21 0::Int)
#81 := (ite false 0::Int 0::Int)
#84 := (= #81 0::Int)
#85 := [rewrite]: #84
#82 := (= #21 #81)
#79 := (= #20 0::Int)
#49 := (and #11 #13)
#52 := (or #11 #49)
#74 := (ite #52 0::Int 0::Int)
#77 := (= #74 0::Int)
#78 := [rewrite]: #77
#75 := (= #20 #74)
#72 := (= #19 0::Int)
#67 := (- 0::Int)
#70 := (= #67 0::Int)
#71 := [rewrite]: #70
#68 := (= #19 #67)
#65 := (= #18 0::Int)
#57 := -3::Int
#60 := (mod -3::Int -3::Int)
#63 := (= #60 0::Int)
#64 := [rewrite]: #63
#61 := (= #18 #60)
#58 := (= #17 -3::Int)
#59 := [rewrite]: #58
#62 := [monotonicity #59 #59]: #61
#66 := [trans #62 #64]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#55 := (= #16 0::Int)
#56 := [rewrite]: #55
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#47 := (iff #12 #11)
#48 := [rewrite]: #47
#54 := [monotonicity #48 #51]: #53
#76 := [monotonicity #54 #56 #73]: #75
#80 := [trans #76 #78]: #79
#45 := (iff #10 false)
#46 := [rewrite]: #45
#83 := [monotonicity #46 #80]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #46 #87]: #89
#93 := [trans #90 #92]: #23
#96 := [monotonicity #93]: #95
#100 := [trans #96 #98]: #99
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#44 := [asserted]: #24
[mp #44 #107]: false
unsat
a185dd1db6f642a5e7d15c4c9072da159f55df2d 124 0
#2 := false
#27 := 2::Int
#8 := 3::Int
#21 := (- 3::Int)
#11 := 5::Int
#20 := (- 5::Int)
#22 := (mod #20 #21)
#23 := (- #22)
#19 := (mod 5::Int 3::Int)
#9 := 0::Int
#14 := (< 0::Int 3::Int)
#16 := (< 5::Int 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int 5::Int)
#15 := (and #13 #14)
#18 := (or #15 #17)
#24 := (ite #18 #19 #23)
#12 := (= 5::Int 0::Int)
#25 := (ite #12 0::Int #24)
#10 := (= 3::Int 0::Int)
#26 := (ite #10 5::Int #25)
#28 := (= #26 2::Int)
#29 := (not #28)
#145 := (iff #29 false)
#54 := (and #14 #16)
#57 := (or #15 #54)
#108 := (not #57)
#143 := (iff #108 false)
#1 := true
#138 := (not true)
#141 := (iff #138 false)
#142 := [rewrite]: #141
#139 := (iff #108 #138)
#136 := (iff #57 true)
#131 := (or true false)
#134 := (iff #131 true)
#135 := [rewrite]: #134
#132 := (iff #57 #131)
#129 := (iff #54 false)
#124 := (and true false)
#127 := (iff #124 false)
#128 := [rewrite]: #127
#125 := (iff #54 #124)
#122 := (iff #16 false)
#123 := [rewrite]: #122
#113 := (iff #14 true)
#114 := [rewrite]: #113
#126 := [monotonicity #114 #123]: #125
#130 := [trans #126 #128]: #129
#120 := (iff #15 true)
#115 := (and true true)
#118 := (iff #115 true)
#119 := [rewrite]: #118
#116 := (iff #15 #115)
#111 := (iff #13 true)
#112 := [rewrite]: #111
#117 := [monotonicity #112 #114]: #116
#121 := [trans #117 #119]: #120
#133 := [monotonicity #121 #130]: #132
#137 := [trans #133 #135]: #136
#140 := [monotonicity #137]: #139
#144 := [trans #140 #142]: #143
#109 := (iff #29 #108)
#106 := (iff #28 #57)
#79 := -1::Int
#84 := (ite #57 2::Int -1::Int)
#101 := (= #84 2::Int)
#104 := (iff #101 #57)
#105 := [rewrite]: #104
#102 := (iff #28 #101)
#99 := (= #26 #84)
#94 := (ite false 5::Int #84)
#97 := (= #94 #84)
#98 := [rewrite]: #97
#95 := (= #26 #94)
#92 := (= #25 #84)
#87 := (ite false 0::Int #84)
#90 := (= #87 #84)
#91 := [rewrite]: #90
#88 := (= #25 #87)
#85 := (= #24 #84)
#82 := (= #23 -1::Int)
#71 := 1::Int
#76 := (- 1::Int)
#80 := (= #76 -1::Int)
#81 := [rewrite]: #80
#77 := (= #23 #76)
#74 := (= #22 1::Int)
#65 := -3::Int
#62 := -5::Int
#68 := (mod -5::Int -3::Int)
#72 := (= #68 1::Int)
#73 := [rewrite]: #72
#69 := (= #22 #68)
#66 := (= #21 -3::Int)
#67 := [rewrite]: #66
#63 := (= #20 -5::Int)
#64 := [rewrite]: #63
#70 := [monotonicity #64 #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#83 := [trans #78 #81]: #82
#60 := (= #19 2::Int)
#61 := [rewrite]: #60
#58 := (iff #18 #57)
#55 := (iff #17 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#86 := [monotonicity #59 #61 #83]: #85
#52 := (iff #12 false)
#53 := [rewrite]: #52
#89 := [monotonicity #53 #86]: #88
#93 := [trans #89 #91]: #92
#50 := (iff #10 false)
#51 := [rewrite]: #50
#96 := [monotonicity #51 #93]: #95
#100 := [trans #96 #98]: #99
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#110 := [monotonicity #107]: #109
#146 := [trans #110 #144]: #145
#49 := [asserted]: #29
[mp #49 #146]: false
unsat
7d327b19e01666c9f9c62ef0af0f737663d19d70 145 0
#2 := false
#28 := 2::Int
#29 := (- 2::Int)
#8 := 3::Int
#9 := (- 3::Int)
#22 := (- #9)
#12 := 1::Int
#21 := (- 1::Int)
#23 := (mod #21 #22)
#24 := (- #23)
#20 := (mod 1::Int #9)
#10 := 0::Int
#15 := (< 0::Int #9)
#17 := (< 1::Int 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int 1::Int)
#16 := (and #14 #15)
#19 := (or #16 #18)
#25 := (ite #19 #20 #24)
#13 := (= 1::Int 0::Int)
#26 := (ite #13 0::Int #25)
#11 := (= #9 0::Int)
#27 := (ite #11 1::Int #26)
#30 := (= #27 #29)
#31 := (not #30)
#166 := (iff #31 false)
#52 := -3::Int
#64 := (< 0::Int -3::Int)
#70 := (and #17 #64)
#67 := (and #14 #64)
#73 := (or #67 #70)
#164 := (iff #73 false)
#159 := (or false false)
#162 := (iff #159 false)
#163 := [rewrite]: #162
#160 := (iff #73 #159)
#157 := (iff #70 false)
#152 := (and false false)
#155 := (iff #152 false)
#156 := [rewrite]: #155
#153 := (iff #70 #152)
#141 := (iff #64 false)
#142 := [rewrite]: #141
#150 := (iff #17 false)
#151 := [rewrite]: #150
#154 := [monotonicity #151 #142]: #153
#158 := [trans #154 #156]: #157
#148 := (iff #67 false)
#1 := true
#143 := (and true false)
#146 := (iff #143 false)
#147 := [rewrite]: #146
#144 := (iff #67 #143)
#139 := (iff #14 true)
#140 := [rewrite]: #139
#145 := [monotonicity #140 #142]: #144
#149 := [trans #145 #147]: #148
#161 := [monotonicity #149 #158]: #160
#165 := [trans #161 #163]: #164
#137 := (iff #31 #73)
#127 := (not #73)
#132 := (not #127)
#135 := (iff #132 #73)
#136 := [rewrite]: #135
#133 := (iff #31 #132)
#130 := (iff #30 #127)
#102 := -2::Int
#107 := (ite #73 1::Int -2::Int)
#124 := (= #107 -2::Int)
#128 := (iff #124 #127)
#129 := [rewrite]: #128
#125 := (iff #30 #124)
#103 := (= #29 -2::Int)
#104 := [rewrite]: #103
#122 := (= #27 #107)
#117 := (ite false 1::Int #107)
#120 := (= #117 #107)
#121 := [rewrite]: #120
#118 := (= #27 #117)
#115 := (= #26 #107)
#110 := (ite false 0::Int #107)
#113 := (= #110 #107)
#114 := [rewrite]: #113
#111 := (= #26 #110)
#108 := (= #25 #107)
#105 := (= #24 -2::Int)
#100 := (= #24 #29)
#98 := (= #23 2::Int)
#83 := -1::Int
#93 := (mod -1::Int 3::Int)
#96 := (= #93 2::Int)
#97 := [rewrite]: #96
#94 := (= #23 #93)
#91 := (= #22 3::Int)
#86 := (- -3::Int)
#89 := (= #86 3::Int)
#90 := [rewrite]: #89
#87 := (= #22 #86)
#53 := (= #9 -3::Int)
#54 := [rewrite]: #53
#88 := [monotonicity #54]: #87
#92 := [trans #88 #90]: #91
#84 := (= #21 -1::Int)
#85 := [rewrite]: #84
#95 := [monotonicity #85 #92]: #94
#99 := [trans #95 #97]: #98
#101 := [monotonicity #99]: #100
#106 := [trans #101 #104]: #105
#81 := (= #20 1::Int)
#76 := (mod 1::Int -3::Int)
#79 := (= #76 1::Int)
#80 := [rewrite]: #79
#77 := (= #20 #76)
#78 := [monotonicity #54]: #77
#82 := [trans #78 #80]: #81
#74 := (iff #19 #73)
#71 := (iff #18 #70)
#65 := (iff #15 #64)
#66 := [monotonicity #54]: #65
#72 := [monotonicity #66]: #71
#68 := (iff #16 #67)
#69 := [monotonicity #66]: #68
#75 := [monotonicity #69 #72]: #74
#109 := [monotonicity #75 #82 #106]: #108
#62 := (iff #13 false)
#63 := [rewrite]: #62
#112 := [monotonicity #63 #109]: #111
#116 := [trans #112 #114]: #115
#60 := (iff #11 false)
#55 := (= -3::Int 0::Int)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #11 #55)
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#119 := [monotonicity #61 #116]: #118
#123 := [trans #119 #121]: #122
#126 := [monotonicity #123 #104]: #125
#131 := [trans #126 #129]: #130
#134 := [monotonicity #131]: #133
#138 := [trans #134 #136]: #137
#167 := [trans #138 #165]: #166
#51 := [asserted]: #31
[mp #51 #167]: false
unsat
82d6113024911b407663ddeabeafc31ab21bb4b0 111 0
#2 := false
#10 := 0::Int
#8 := 3::Int
#9 := (- 3::Int)
#20 := (- #9)
#21 := (mod #9 #20)
#22 := (- #21)
#19 := (mod 3::Int #9)
#14 := (< 0::Int #9)
#16 := (< 3::Int 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int 3::Int)
#15 := (and #13 #14)
#18 := (or #15 #17)
#23 := (ite #18 #19 #22)
#12 := (= 3::Int 0::Int)
#24 := (ite #12 0::Int #23)
#11 := (= #9 0::Int)
#25 := (ite #11 3::Int #24)
#26 := (= #25 0::Int)
#27 := (not #26)
#132 := (iff #27 false)
#1 := true
#127 := (not true)
#130 := (iff #127 false)
#131 := [rewrite]: #130
#128 := (iff #27 #127)
#125 := (iff #26 true)
#120 := (= 0::Int 0::Int)
#123 := (iff #120 true)
#124 := [rewrite]: #123
#121 := (iff #26 #120)
#114 := (ite false 3::Int 0::Int)
#117 := (= #114 0::Int)
#118 := [rewrite]: #117
#115 := (= #25 #114)
#112 := (= #24 0::Int)
#107 := (ite false 0::Int 0::Int)
#110 := (= #107 0::Int)
#111 := [rewrite]: #110
#108 := (= #24 #107)
#105 := (= #23 0::Int)
#48 := -3::Int
#60 := (< 0::Int -3::Int)
#66 := (and #16 #60)
#63 := (and #13 #60)
#69 := (or #63 #66)
#100 := (ite #69 0::Int 0::Int)
#103 := (= #100 0::Int)
#104 := [rewrite]: #103
#101 := (= #23 #100)
#98 := (= #22 0::Int)
#93 := (- 0::Int)
#96 := (= #93 0::Int)
#97 := [rewrite]: #96
#94 := (= #22 #93)
#91 := (= #21 0::Int)
#86 := (mod -3::Int 3::Int)
#89 := (= #86 0::Int)
#90 := [rewrite]: #89
#87 := (= #21 #86)
#84 := (= #20 3::Int)
#79 := (- -3::Int)
#82 := (= #79 3::Int)
#83 := [rewrite]: #82
#80 := (= #20 #79)
#49 := (= #9 -3::Int)
#50 := [rewrite]: #49
#81 := [monotonicity #50]: #80
#85 := [trans #81 #83]: #84
#88 := [monotonicity #50 #85]: #87
#92 := [trans #88 #90]: #91
#95 := [monotonicity #92]: #94
#99 := [trans #95 #97]: #98
#77 := (= #19 0::Int)
#72 := (mod 3::Int -3::Int)
#75 := (= #72 0::Int)
#76 := [rewrite]: #75
#73 := (= #19 #72)
#74 := [monotonicity #50]: #73
#78 := [trans #74 #76]: #77
#70 := (iff #18 #69)
#67 := (iff #17 #66)
#61 := (iff #14 #60)
#62 := [monotonicity #50]: #61
#68 := [monotonicity #62]: #67
#64 := (iff #15 #63)
#65 := [monotonicity #62]: #64
#71 := [monotonicity #65 #68]: #70
#102 := [monotonicity #71 #78 #99]: #101
#106 := [trans #102 #104]: #105
#58 := (iff #12 false)
#59 := [rewrite]: #58
#109 := [monotonicity #59 #106]: #108
#113 := [trans #109 #111]: #112
#56 := (iff #11 false)
#51 := (= -3::Int 0::Int)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #11 #51)
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#116 := [monotonicity #57 #113]: #115
#119 := [trans #116 #118]: #26
#122 := [monotonicity #119]: #121
#126 := [trans #122 #124]: #125
#129 := [monotonicity #126]: #128
#133 := [trans #129 #131]: #132
#47 := [asserted]: #27
[mp #47 #133]: false
unsat
c4214ad6df5eccc4b53bd004dab0150c7519b10c 146 0
#2 := false
#28 := 1::Int
#29 := (- 1::Int)
#8 := 3::Int
#9 := (- 3::Int)
#22 := (- #9)
#12 := 5::Int
#21 := (- 5::Int)
#23 := (mod #21 #22)
#24 := (- #23)
#20 := (mod 5::Int #9)
#10 := 0::Int
#15 := (< 0::Int #9)
#17 := (< 5::Int 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int 5::Int)
#16 := (and #14 #15)
#19 := (or #16 #18)
#25 := (ite #19 #20 #24)
#13 := (= 5::Int 0::Int)
#26 := (ite #13 0::Int #25)
#11 := (= #9 0::Int)
#27 := (ite #11 5::Int #26)
#30 := (= #27 #29)
#31 := (not #30)
#167 := (iff #31 false)
#52 := -3::Int
#64 := (< 0::Int -3::Int)
#70 := (and #17 #64)
#67 := (and #14 #64)
#73 := (or #67 #70)
#165 := (iff #73 false)
#160 := (or false false)
#163 := (iff #160 false)
#164 := [rewrite]: #163
#161 := (iff #73 #160)
#158 := (iff #70 false)
#153 := (and false false)
#156 := (iff #153 false)
#157 := [rewrite]: #156
#154 := (iff #70 #153)
#142 := (iff #64 false)
#143 := [rewrite]: #142
#151 := (iff #17 false)
#152 := [rewrite]: #151
#155 := [monotonicity #152 #143]: #154
#159 := [trans #155 #157]: #158
#149 := (iff #67 false)
#1 := true
#144 := (and true false)
#147 := (iff #144 false)
#148 := [rewrite]: #147
#145 := (iff #67 #144)
#140 := (iff #14 true)
#141 := [rewrite]: #140
#146 := [monotonicity #141 #143]: #145
#150 := [trans #146 #148]: #149
#162 := [monotonicity #150 #159]: #161
#166 := [trans #162 #164]: #165
#138 := (iff #31 #73)
#128 := (not #73)
#133 := (not #128)
#136 := (iff #133 #73)
#137 := [rewrite]: #136
#134 := (iff #31 #133)
#131 := (iff #30 #128)
#103 := -1::Int
#79 := 2::Int
#108 := (ite #73 2::Int -1::Int)
#125 := (= #108 -1::Int)
#129 := (iff #125 #128)
#130 := [rewrite]: #129
#126 := (iff #30 #125)
#104 := (= #29 -1::Int)
#105 := [rewrite]: #104
#123 := (= #27 #108)
#118 := (ite false 5::Int #108)
#121 := (= #118 #108)
#122 := [rewrite]: #121
#119 := (= #27 #118)
#116 := (= #26 #108)
#111 := (ite false 0::Int #108)
#114 := (= #111 #108)
#115 := [rewrite]: #114
#112 := (= #26 #111)
#109 := (= #25 #108)
#106 := (= #24 -1::Int)
#101 := (= #24 #29)
#99 := (= #23 1::Int)
#84 := -5::Int
#94 := (mod -5::Int 3::Int)
#97 := (= #94 1::Int)
#98 := [rewrite]: #97
#95 := (= #23 #94)
#92 := (= #22 3::Int)
#87 := (- -3::Int)
#90 := (= #87 3::Int)
#91 := [rewrite]: #90
#88 := (= #22 #87)
#53 := (= #9 -3::Int)
#54 := [rewrite]: #53
#89 := [monotonicity #54]: #88
#93 := [trans #89 #91]: #92
#85 := (= #21 -5::Int)
#86 := [rewrite]: #85
#96 := [monotonicity #86 #93]: #95
#100 := [trans #96 #98]: #99
#102 := [monotonicity #100]: #101
#107 := [trans #102 #105]: #106
#82 := (= #20 2::Int)
#76 := (mod 5::Int -3::Int)
#80 := (= #76 2::Int)
#81 := [rewrite]: #80
#77 := (= #20 #76)
#78 := [monotonicity #54]: #77
#83 := [trans #78 #81]: #82
#74 := (iff #19 #73)
#71 := (iff #18 #70)
#65 := (iff #15 #64)
#66 := [monotonicity #54]: #65
#72 := [monotonicity #66]: #71
#68 := (iff #16 #67)
#69 := [monotonicity #66]: #68
#75 := [monotonicity #69 #72]: #74
#110 := [monotonicity #75 #83 #107]: #109
#62 := (iff #13 false)
#63 := [rewrite]: #62
#113 := [monotonicity #63 #110]: #112
#117 := [trans #113 #115]: #116
#60 := (iff #11 false)
#55 := (= -3::Int 0::Int)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #11 #55)
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#120 := [monotonicity #61 #117]: #119
#124 := [trans #120 #122]: #123
#127 := [monotonicity #124 #105]: #126
#132 := [trans #127 #130]: #131
#135 := [monotonicity #132]: #134
#139 := [trans #135 #137]: #138
#168 := [trans #139 #166]: #167
#51 := [asserted]: #31
[mp #51 #168]: false
unsat
fac742ba4b7a09666d1c5cd8a1a25074910c56cc 156 0
#2 := false
#28 := 2::Int
#8 := 3::Int
#22 := (- 3::Int)
#11 := 1::Int
#12 := (- 1::Int)
#21 := (- #12)
#23 := (mod #21 #22)
#24 := (- #23)
#20 := (mod #12 3::Int)
#9 := 0::Int
#15 := (< 0::Int 3::Int)
#17 := (< #12 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int #12)
#16 := (and #14 #15)
#19 := (or #16 #18)
#25 := (ite #19 #20 #24)
#13 := (= #12 0::Int)
#26 := (ite #13 0::Int #25)
#10 := (= 3::Int 0::Int)
#27 := (ite #10 #12 #26)
#29 := (= #27 2::Int)
#30 := (not #29)
#177 := (iff #30 false)
#53 := -1::Int
#74 := (< -1::Int 0::Int)
#80 := (and #15 #74)
#63 := (< 0::Int -1::Int)
#69 := (and #15 #63)
#85 := (or #69 #80)
#140 := (not #85)
#175 := (iff #140 false)
#1 := true
#170 := (not true)
#173 := (iff #170 false)
#174 := [rewrite]: #173
#171 := (iff #140 #170)
#168 := (iff #85 true)
#163 := (or false true)
#166 := (iff #163 true)
#167 := [rewrite]: #166
#164 := (iff #85 #163)
#161 := (iff #80 true)
#156 := (and true true)
#159 := (iff #156 true)
#160 := [rewrite]: #159
#157 := (iff #80 #156)
#154 := (iff #74 true)
#155 := [rewrite]: #154
#143 := (iff #15 true)
#144 := [rewrite]: #143
#158 := [monotonicity #144 #155]: #157
#162 := [trans #158 #160]: #161
#152 := (iff #69 false)
#147 := (and true false)
#150 := (iff #147 false)
#151 := [rewrite]: #150
#148 := (iff #69 #147)
#145 := (iff #63 false)
#146 := [rewrite]: #145
#149 := [monotonicity #144 #146]: #148
#153 := [trans #149 #151]: #152
#165 := [monotonicity #153 #162]: #164
#169 := [trans #165 #167]: #168
#172 := [monotonicity #169]: #171
#176 := [trans #172 #174]: #175
#141 := (iff #30 #140)
#138 := (iff #29 #85)
#116 := (ite #85 2::Int -1::Int)
#133 := (= #116 2::Int)
#136 := (iff #133 #85)
#137 := [rewrite]: #136
#134 := (iff #29 #133)
#131 := (= #27 #116)
#126 := (ite false -1::Int #116)
#129 := (= #126 #116)
#130 := [rewrite]: #129
#127 := (= #27 #126)
#124 := (= #26 #116)
#119 := (ite false 0::Int #116)
#122 := (= #119 #116)
#123 := [rewrite]: #122
#120 := (= #26 #119)
#117 := (= #25 #116)
#114 := (= #24 -1::Int)
#54 := (= #12 -1::Int)
#55 := [rewrite]: #54
#112 := (= #24 #12)
#110 := (= #23 1::Int)
#102 := -3::Int
#105 := (mod 1::Int -3::Int)
#108 := (= #105 1::Int)
#109 := [rewrite]: #108
#106 := (= #23 #105)
#103 := (= #22 -3::Int)
#104 := [rewrite]: #103
#100 := (= #21 1::Int)
#95 := (- -1::Int)
#98 := (= #95 1::Int)
#99 := [rewrite]: #98
#96 := (= #21 #95)
#97 := [monotonicity #55]: #96
#101 := [trans #97 #99]: #100
#107 := [monotonicity #101 #104]: #106
#111 := [trans #107 #109]: #110
#113 := [monotonicity #111]: #112
#115 := [trans #113 #55]: #114
#93 := (= #20 2::Int)
#88 := (mod -1::Int 3::Int)
#91 := (= #88 2::Int)
#92 := [rewrite]: #91
#89 := (= #20 #88)
#90 := [monotonicity #55]: #89
#94 := [trans #90 #92]: #93
#86 := (iff #19 #85)
#83 := (iff #18 #80)
#77 := (and #74 #15)
#81 := (iff #77 #80)
#82 := [rewrite]: #81
#78 := (iff #18 #77)
#75 := (iff #17 #74)
#76 := [monotonicity #55]: #75
#79 := [monotonicity #76]: #78
#84 := [trans #79 #82]: #83
#72 := (iff #16 #69)
#66 := (and #63 #15)
#70 := (iff #66 #69)
#71 := [rewrite]: #70
#67 := (iff #16 #66)
#64 := (iff #14 #63)
#65 := [monotonicity #55]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#87 := [monotonicity #73 #84]: #86
#118 := [monotonicity #87 #94 #115]: #117
#61 := (iff #13 false)
#56 := (= -1::Int 0::Int)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #13 #56)
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#121 := [monotonicity #62 #118]: #120
#125 := [trans #121 #123]: #124
#51 := (iff #10 false)
#52 := [rewrite]: #51
#128 := [monotonicity #52 #55 #125]: #127
#132 := [trans #128 #130]: #131
#135 := [monotonicity #132]: #134
#139 := [trans #135 #137]: #138
#142 := [monotonicity #139]: #141
#178 := [trans #142 #176]: #177
#50 := [asserted]: #30
[mp #50 #178]: false
unsat
c22b2f1ee044330de34ce6ed88bd5a128a3b12e5 124 0
#2 := false
#9 := 0::Int
#8 := 3::Int
#11 := (- 3::Int)
#20 := (- #11)
#21 := (mod #20 #11)
#22 := (- #21)
#19 := (mod #11 3::Int)
#14 := (< 0::Int 3::Int)
#16 := (< #11 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int #11)
#15 := (and #13 #14)
#18 := (or #15 #17)
#23 := (ite #18 #19 #22)
#12 := (= #11 0::Int)
#24 := (ite #12 0::Int #23)
#10 := (= 3::Int 0::Int)
#25 := (ite #10 #11 #24)
#26 := (= #25 0::Int)
#27 := (not #26)
#145 := (iff #27 false)
#1 := true
#140 := (not true)
#143 := (iff #140 false)
#144 := [rewrite]: #143
#141 := (iff #27 #140)
#138 := (iff #26 true)
#133 := (= 0::Int 0::Int)
#136 := (iff #133 true)
#137 := [rewrite]: #136
#134 := (iff #26 #133)
#50 := -3::Int
#127 := (ite false -3::Int 0::Int)
#130 := (= #127 0::Int)
#131 := [rewrite]: #130
#128 := (= #25 #127)
#125 := (= #24 0::Int)
#120 := (ite false 0::Int 0::Int)
#123 := (= #120 0::Int)
#124 := [rewrite]: #123
#121 := (= #24 #120)
#118 := (= #23 0::Int)
#71 := (< -3::Int 0::Int)
#77 := (and #14 #71)
#60 := (< 0::Int -3::Int)
#66 := (and #14 #60)
#82 := (or #66 #77)
#113 := (ite #82 0::Int 0::Int)
#116 := (= #113 0::Int)
#117 := [rewrite]: #116
#114 := (= #23 #113)
#111 := (= #22 0::Int)
#106 := (- 0::Int)
#109 := (= #106 0::Int)
#110 := [rewrite]: #109
#107 := (= #22 #106)
#104 := (= #21 0::Int)
#99 := (mod 3::Int -3::Int)
#102 := (= #99 0::Int)
#103 := [rewrite]: #102
#100 := (= #21 #99)
#51 := (= #11 -3::Int)
#52 := [rewrite]: #51
#97 := (= #20 3::Int)
#92 := (- -3::Int)
#95 := (= #92 3::Int)
#96 := [rewrite]: #95
#93 := (= #20 #92)
#94 := [monotonicity #52]: #93
#98 := [trans #94 #96]: #97
#101 := [monotonicity #98 #52]: #100
#105 := [trans #101 #103]: #104
#108 := [monotonicity #105]: #107
#112 := [trans #108 #110]: #111
#90 := (= #19 0::Int)
#85 := (mod -3::Int 3::Int)
#88 := (= #85 0::Int)
#89 := [rewrite]: #88
#86 := (= #19 #85)
#87 := [monotonicity #52]: #86
#91 := [trans #87 #89]: #90
#83 := (iff #18 #82)
#80 := (iff #17 #77)
#74 := (and #71 #14)
#78 := (iff #74 #77)
#79 := [rewrite]: #78
#75 := (iff #17 #74)
#72 := (iff #16 #71)
#73 := [monotonicity #52]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#69 := (iff #15 #66)
#63 := (and #60 #14)
#67 := (iff #63 #66)
#68 := [rewrite]: #67
#64 := (iff #15 #63)
#61 := (iff #13 #60)
#62 := [monotonicity #52]: #61
#65 := [monotonicity #62]: #64
#70 := [trans #65 #68]: #69
#84 := [monotonicity #70 #81]: #83
#115 := [monotonicity #84 #91 #112]: #114
#119 := [trans #115 #117]: #118
#58 := (iff #12 false)
#53 := (= -3::Int 0::Int)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #12 #53)
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#122 := [monotonicity #59 #119]: #121
#126 := [trans #122 #124]: #125
#48 := (iff #10 false)
#49 := [rewrite]: #48
#129 := [monotonicity #49 #52 #126]: #128
#132 := [trans #129 #131]: #26
#135 := [monotonicity #132]: #134
#139 := [trans #135 #137]: #138
#142 := [monotonicity #139]: #141
#146 := [trans #142 #144]: #145
#47 := [asserted]: #27
[mp #47 #146]: false
unsat
1702a8956e7405182723d9b7e49a559e524180e5 161 0
#2 := false
#28 := 1::Int
#8 := 3::Int
#22 := (- 3::Int)
#11 := 5::Int
#12 := (- 5::Int)
#21 := (- #12)
#23 := (mod #21 #22)
#24 := (- #23)
#20 := (mod #12 3::Int)
#9 := 0::Int
#15 := (< 0::Int 3::Int)
#17 := (< #12 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int #12)
#16 := (and #14 #15)
#19 := (or #16 #18)
#25 := (ite #19 #20 #24)
#13 := (= #12 0::Int)
#26 := (ite #13 0::Int #25)
#10 := (= 3::Int 0::Int)
#27 := (ite #10 #12 #26)
#29 := (= #27 1::Int)
#30 := (not #29)
#182 := (iff #30 false)
#53 := -5::Int
#74 := (< -5::Int 0::Int)
#80 := (and #15 #74)
#63 := (< 0::Int -5::Int)
#69 := (and #15 #63)
#85 := (or #69 #80)
#145 := (not #85)
#180 := (iff #145 false)
#1 := true
#175 := (not true)
#178 := (iff #175 false)
#179 := [rewrite]: #178
#176 := (iff #145 #175)
#173 := (iff #85 true)
#168 := (or false true)
#171 := (iff #168 true)
#172 := [rewrite]: #171
#169 := (iff #85 #168)
#166 := (iff #80 true)
#161 := (and true true)
#164 := (iff #161 true)
#165 := [rewrite]: #164
#162 := (iff #80 #161)
#159 := (iff #74 true)
#160 := [rewrite]: #159
#148 := (iff #15 true)
#149 := [rewrite]: #148
#163 := [monotonicity #149 #160]: #162
#167 := [trans #163 #165]: #166
#157 := (iff #69 false)
#152 := (and true false)
#155 := (iff #152 false)
#156 := [rewrite]: #155
#153 := (iff #69 #152)
#150 := (iff #63 false)
#151 := [rewrite]: #150
#154 := [monotonicity #149 #151]: #153
#158 := [trans #154 #156]: #157
#170 := [monotonicity #158 #167]: #169
#174 := [trans #170 #172]: #173
#177 := [monotonicity #174]: #176
#181 := [trans #177 #179]: #180
#146 := (iff #30 #145)
#143 := (iff #29 #85)
#116 := -2::Int
#121 := (ite #85 1::Int -2::Int)
#138 := (= #121 1::Int)
#141 := (iff #138 #85)
#142 := [rewrite]: #141
#139 := (iff #29 #138)
#136 := (= #27 #121)
#131 := (ite false -5::Int #121)
#134 := (= #131 #121)
#135 := [rewrite]: #134
#132 := (= #27 #131)
#129 := (= #26 #121)
#124 := (ite false 0::Int #121)
#127 := (= #124 #121)
#128 := [rewrite]: #127
#125 := (= #26 #124)
#122 := (= #25 #121)
#119 := (= #24 -2::Int)
#108 := 2::Int
#113 := (- 2::Int)
#117 := (= #113 -2::Int)
#118 := [rewrite]: #117
#114 := (= #24 #113)
#111 := (= #23 2::Int)
#102 := -3::Int
#105 := (mod 5::Int -3::Int)
#109 := (= #105 2::Int)
#110 := [rewrite]: #109
#106 := (= #23 #105)
#103 := (= #22 -3::Int)
#104 := [rewrite]: #103
#100 := (= #21 5::Int)
#95 := (- -5::Int)
#98 := (= #95 5::Int)
#99 := [rewrite]: #98
#96 := (= #21 #95)
#54 := (= #12 -5::Int)
#55 := [rewrite]: #54
#97 := [monotonicity #55]: #96
#101 := [trans #97 #99]: #100
#107 := [monotonicity #101 #104]: #106
#112 := [trans #107 #110]: #111
#115 := [monotonicity #112]: #114
#120 := [trans #115 #118]: #119
#93 := (= #20 1::Int)
#88 := (mod -5::Int 3::Int)
#91 := (= #88 1::Int)
#92 := [rewrite]: #91
#89 := (= #20 #88)
#90 := [monotonicity #55]: #89
#94 := [trans #90 #92]: #93
#86 := (iff #19 #85)
#83 := (iff #18 #80)
#77 := (and #74 #15)
#81 := (iff #77 #80)
#82 := [rewrite]: #81
#78 := (iff #18 #77)
#75 := (iff #17 #74)
#76 := [monotonicity #55]: #75
#79 := [monotonicity #76]: #78
#84 := [trans #79 #82]: #83
#72 := (iff #16 #69)
#66 := (and #63 #15)
#70 := (iff #66 #69)
#71 := [rewrite]: #70
#67 := (iff #16 #66)
#64 := (iff #14 #63)
#65 := [monotonicity #55]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#87 := [monotonicity #73 #84]: #86
#123 := [monotonicity #87 #94 #120]: #122
#61 := (iff #13 false)
#56 := (= -5::Int 0::Int)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #13 #56)
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#126 := [monotonicity #62 #123]: #125
#130 := [trans #126 #128]: #129
#51 := (iff #10 false)
#52 := [rewrite]: #51
#133 := [monotonicity #52 #55 #130]: #132
#137 := [trans #133 #135]: #136
#140 := [monotonicity #137]: #139
#144 := [trans #140 #142]: #143
#147 := [monotonicity #144]: #146
#183 := [trans #147 #181]: #182
#50 := [asserted]: #30
[mp #50 #183]: false
unsat
1974063c697470ee08048aa93c91e77e8294ad37 165 0
#2 := false
#12 := 1::Int
#13 := (- 1::Int)
#8 := 3::Int
#9 := (- 3::Int)
#23 := (- #9)
#22 := (- #13)
#24 := (mod #22 #23)
#25 := (- #24)
#21 := (mod #13 #9)
#10 := 0::Int
#16 := (< 0::Int #9)
#18 := (< #13 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int #13)
#17 := (and #15 #16)
#20 := (or #17 #19)
#26 := (ite #20 #21 #25)
#14 := (= #13 0::Int)
#27 := (ite #14 0::Int #26)
#11 := (= #9 0::Int)
#28 := (ite #11 #13 #27)
#29 := (= #28 #13)
#30 := (not #29)
#186 := (iff #30 false)
#61 := -1::Int
#80 := (< -1::Int 0::Int)
#51 := -3::Int
#74 := (< 0::Int -3::Int)
#86 := (and #74 #80)
#71 := (< 0::Int -1::Int)
#77 := (and #71 #74)
#91 := (or #77 #86)
#184 := (iff #91 false)
#179 := (or false false)
#182 := (iff #179 false)
#183 := [rewrite]: #182
#180 := (iff #91 #179)
#177 := (iff #86 false)
#1 := true
#172 := (and false true)
#175 := (iff #172 false)
#176 := [rewrite]: #175
#173 := (iff #86 #172)
#170 := (iff #80 true)
#171 := [rewrite]: #170
#161 := (iff #74 false)
#162 := [rewrite]: #161
#174 := [monotonicity #162 #171]: #173
#178 := [trans #174 #176]: #177
#168 := (iff #77 false)
#163 := (and false false)
#166 := (iff #163 false)
#167 := [rewrite]: #166
#164 := (iff #77 #163)
#159 := (iff #71 false)
#160 := [rewrite]: #159
#165 := [monotonicity #160 #162]: #164
#169 := [trans #165 #167]: #168
#181 := [monotonicity #169 #178]: #180
#185 := [trans #181 #183]: #184
#157 := (iff #30 #91)
#147 := (not #91)
#152 := (not #147)
#155 := (iff #152 #91)
#156 := [rewrite]: #155
#153 := (iff #30 #152)
#150 := (iff #29 #147)
#97 := 2::Int
#127 := (ite #91 2::Int -1::Int)
#144 := (= #127 -1::Int)
#148 := (iff #144 #147)
#149 := [rewrite]: #148
#145 := (iff #29 #144)
#62 := (= #13 -1::Int)
#63 := [rewrite]: #62
#142 := (= #28 #127)
#137 := (ite false -1::Int #127)
#140 := (= #137 #127)
#141 := [rewrite]: #140
#138 := (= #28 #137)
#135 := (= #27 #127)
#130 := (ite false 0::Int #127)
#133 := (= #130 #127)
#134 := [rewrite]: #133
#131 := (= #27 #130)
#128 := (= #26 #127)
#125 := (= #25 -1::Int)
#123 := (= #25 #13)
#121 := (= #24 1::Int)
#116 := (mod 1::Int 3::Int)
#119 := (= #116 1::Int)
#120 := [rewrite]: #119
#117 := (= #24 #116)
#114 := (= #23 3::Int)
#109 := (- -3::Int)
#112 := (= #109 3::Int)
#113 := [rewrite]: #112
#110 := (= #23 #109)
#52 := (= #9 -3::Int)
#53 := [rewrite]: #52
#111 := [monotonicity #53]: #110
#115 := [trans #111 #113]: #114
#107 := (= #22 1::Int)
#102 := (- -1::Int)
#105 := (= #102 1::Int)
#106 := [rewrite]: #105
#103 := (= #22 #102)
#104 := [monotonicity #63]: #103
#108 := [trans #104 #106]: #107
#118 := [monotonicity #108 #115]: #117
#122 := [trans #118 #120]: #121
#124 := [monotonicity #122]: #123
#126 := [trans #124 #63]: #125
#100 := (= #21 2::Int)
#94 := (mod -1::Int -3::Int)
#98 := (= #94 2::Int)
#99 := [rewrite]: #98
#95 := (= #21 #94)
#96 := [monotonicity #63 #53]: #95
#101 := [trans #96 #99]: #100
#92 := (iff #20 #91)
#89 := (iff #19 #86)
#83 := (and #80 #74)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #19 #83)
#75 := (iff #16 #74)
#76 := [monotonicity #53]: #75
#81 := (iff #18 #80)
#82 := [monotonicity #63]: #81
#85 := [monotonicity #82 #76]: #84
#90 := [trans #85 #88]: #89
#78 := (iff #17 #77)
#72 := (iff #15 #71)
#73 := [monotonicity #63]: #72
#79 := [monotonicity #73 #76]: #78
#93 := [monotonicity #79 #90]: #92
#129 := [monotonicity #93 #101 #126]: #128
#69 := (iff #14 false)
#64 := (= -1::Int 0::Int)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #14 #64)
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#132 := [monotonicity #70 #129]: #131
#136 := [trans #132 #134]: #135
#59 := (iff #11 false)
#54 := (= -3::Int 0::Int)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #11 #54)
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#139 := [monotonicity #60 #63 #136]: #138
#143 := [trans #139 #141]: #142
#146 := [monotonicity #143 #63]: #145
#151 := [trans #146 #149]: #150
#154 := [monotonicity #151]: #153
#158 := [trans #154 #156]: #157
#187 := [trans #158 #185]: #186
#50 := [asserted]: #30
[mp #50 #187]: false
unsat
230992a84e85c41a4507e3a0c4b596203478f52c 119 0
#2 := false
#10 := 0::Int
#8 := 3::Int
#9 := (- 3::Int)
#18 := (- #9)
#19 := (mod #18 #18)
#20 := (- #19)
#17 := (mod #9 #9)
#12 := (< 0::Int #9)
#14 := (< #9 0::Int)
#15 := (and #14 #12)
#13 := (and #12 #12)
#16 := (or #13 #15)
#21 := (ite #16 #17 #20)
#11 := (= #9 0::Int)
#22 := (ite #11 0::Int #21)
#23 := (ite #11 #9 #22)
#24 := (= #23 0::Int)
#25 := (not #24)
#140 := (iff #25 false)
#1 := true
#135 := (not true)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #25 #135)
#133 := (iff #24 true)
#128 := (= 0::Int 0::Int)
#131 := (iff #128 true)
#132 := [rewrite]: #131
#129 := (iff #24 #128)
#46 := -3::Int
#122 := (ite false -3::Int 0::Int)
#125 := (= #122 0::Int)
#126 := [rewrite]: #125
#123 := (= #23 #122)
#120 := (= #22 0::Int)
#115 := (ite false 0::Int 0::Int)
#118 := (= #115 0::Int)
#119 := [rewrite]: #118
#116 := (= #22 #115)
#113 := (= #21 0::Int)
#66 := (< -3::Int 0::Int)
#56 := (< 0::Int -3::Int)
#72 := (and #56 #66)
#77 := (or #56 #72)
#108 := (ite #77 0::Int 0::Int)
#111 := (= #108 0::Int)
#112 := [rewrite]: #111
#109 := (= #21 #108)
#106 := (= #20 0::Int)
#101 := (- 0::Int)
#104 := (= #101 0::Int)
#105 := [rewrite]: #104
#102 := (= #20 #101)
#99 := (= #19 0::Int)
#94 := (mod 3::Int 3::Int)
#97 := (= #94 0::Int)
#98 := [rewrite]: #97
#95 := (= #19 #94)
#92 := (= #18 3::Int)
#87 := (- -3::Int)
#90 := (= #87 3::Int)
#91 := [rewrite]: #90
#88 := (= #18 #87)
#47 := (= #9 -3::Int)
#48 := [rewrite]: #47
#89 := [monotonicity #48]: #88
#93 := [trans #89 #91]: #92
#96 := [monotonicity #93 #93]: #95
#100 := [trans #96 #98]: #99
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#85 := (= #17 0::Int)
#80 := (mod -3::Int -3::Int)
#83 := (= #80 0::Int)
#84 := [rewrite]: #83
#81 := (= #17 #80)
#82 := [monotonicity #48 #48]: #81
#86 := [trans #82 #84]: #85
#78 := (iff #16 #77)
#75 := (iff #15 #72)
#69 := (and #66 #56)
#73 := (iff #69 #72)
#74 := [rewrite]: #73
#70 := (iff #15 #69)
#57 := (iff #12 #56)
#58 := [monotonicity #48]: #57
#67 := (iff #14 #66)
#68 := [monotonicity #48]: #67
#71 := [monotonicity #68 #58]: #70
#76 := [trans #71 #74]: #75
#64 := (iff #13 #56)
#59 := (and #56 #56)
#62 := (iff #59 #56)
#63 := [rewrite]: #62
#60 := (iff #13 #59)
#61 := [monotonicity #58 #58]: #60
#65 := [trans #61 #63]: #64
#79 := [monotonicity #65 #76]: #78
#110 := [monotonicity #79 #86 #107]: #109
#114 := [trans #110 #112]: #113
#54 := (iff #11 false)
#49 := (= -3::Int 0::Int)
#52 := (iff #49 false)
#53 := [rewrite]: #52
#50 := (iff #11 #49)
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#117 := [monotonicity #55 #114]: #116
#121 := [trans #117 #119]: #120
#124 := [monotonicity #55 #48 #121]: #123
#127 := [trans #124 #126]: #24
#130 := [monotonicity #127]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134]: #136
#141 := [trans #137 #139]: #140
#45 := [asserted]: #25
[mp #45 #141]: false
unsat
41d81c01f2d4595c3188777c9ff27286d543d121 170 0
#2 := false
#29 := 2::Int
#30 := (- 2::Int)
#8 := 3::Int
#9 := (- 3::Int)
#23 := (- #9)
#12 := 5::Int
#13 := (- 5::Int)
#22 := (- #13)
#24 := (mod #22 #23)
#25 := (- #24)
#21 := (mod #13 #9)
#10 := 0::Int
#16 := (< 0::Int #9)
#18 := (< #13 0::Int)
#19 := (and #18 #16)
#15 := (< 0::Int #13)
#17 := (and #15 #16)
#20 := (or #17 #19)
#26 := (ite #20 #21 #25)
#14 := (= #13 0::Int)
#27 := (ite #14 0::Int #26)
#11 := (= #9 0::Int)
#28 := (ite #11 #13 #27)
#31 := (= #28 #30)
#32 := (not #31)
#191 := (iff #32 false)
#63 := -5::Int
#82 := (< -5::Int 0::Int)
#53 := -3::Int
#76 := (< 0::Int -3::Int)
#88 := (and #76 #82)
#73 := (< 0::Int -5::Int)
#79 := (and #73 #76)
#93 := (or #79 #88)
#189 := (iff #93 false)
#184 := (or false false)
#187 := (iff #184 false)
#188 := [rewrite]: #187
#185 := (iff #93 #184)
#182 := (iff #88 false)
#1 := true
#177 := (and false true)
#180 := (iff #177 false)
#181 := [rewrite]: #180
#178 := (iff #88 #177)
#175 := (iff #82 true)
#176 := [rewrite]: #175
#166 := (iff #76 false)
#167 := [rewrite]: #166
#179 := [monotonicity #167 #176]: #178
#183 := [trans #179 #181]: #182
#173 := (iff #79 false)
#168 := (and false false)
#171 := (iff #168 false)
#172 := [rewrite]: #171
#169 := (iff #79 #168)
#164 := (iff #73 false)
#165 := [rewrite]: #164
#170 := [monotonicity #165 #167]: #169
#174 := [trans #170 #172]: #173
#186 := [monotonicity #174 #183]: #185
#190 := [trans #186 #188]: #189
#162 := (iff #32 #93)
#152 := (not #93)
#157 := (not #152)
#160 := (iff #157 #93)
#161 := [rewrite]: #160
#158 := (iff #32 #157)
#155 := (iff #31 #152)
#127 := -2::Int
#99 := 1::Int
#132 := (ite #93 1::Int -2::Int)
#149 := (= #132 -2::Int)
#153 := (iff #149 #152)
#154 := [rewrite]: #153
#150 := (iff #31 #149)
#128 := (= #30 -2::Int)
#129 := [rewrite]: #128
#147 := (= #28 #132)
#142 := (ite false -5::Int #132)
#145 := (= #142 #132)
#146 := [rewrite]: #145
#143 := (= #28 #142)
#140 := (= #27 #132)
#135 := (ite false 0::Int #132)
#138 := (= #135 #132)
#139 := [rewrite]: #138
#136 := (= #27 #135)
#133 := (= #26 #132)
#130 := (= #25 -2::Int)
#125 := (= #25 #30)
#123 := (= #24 2::Int)
#118 := (mod 5::Int 3::Int)
#121 := (= #118 2::Int)
#122 := [rewrite]: #121
#119 := (= #24 #118)
#116 := (= #23 3::Int)
#111 := (- -3::Int)
#114 := (= #111 3::Int)
#115 := [rewrite]: #114
#112 := (= #23 #111)
#54 := (= #9 -3::Int)
#55 := [rewrite]: #54
#113 := [monotonicity #55]: #112
#117 := [trans #113 #115]: #116
#109 := (= #22 5::Int)
#104 := (- -5::Int)
#107 := (= #104 5::Int)
#108 := [rewrite]: #107
#105 := (= #22 #104)
#64 := (= #13 -5::Int)
#65 := [rewrite]: #64
#106 := [monotonicity #65]: #105
#110 := [trans #106 #108]: #109
#120 := [monotonicity #110 #117]: #119
#124 := [trans #120 #122]: #123
#126 := [monotonicity #124]: #125
#131 := [trans #126 #129]: #130
#102 := (= #21 1::Int)
#96 := (mod -5::Int -3::Int)
#100 := (= #96 1::Int)
#101 := [rewrite]: #100
#97 := (= #21 #96)
#98 := [monotonicity #65 #55]: #97
#103 := [trans #98 #101]: #102
#94 := (iff #20 #93)
#91 := (iff #19 #88)
#85 := (and #82 #76)
#89 := (iff #85 #88)
#90 := [rewrite]: #89
#86 := (iff #19 #85)
#77 := (iff #16 #76)
#78 := [monotonicity #55]: #77
#83 := (iff #18 #82)
#84 := [monotonicity #65]: #83
#87 := [monotonicity #84 #78]: #86
#92 := [trans #87 #90]: #91
#80 := (iff #17 #79)
#74 := (iff #15 #73)
#75 := [monotonicity #65]: #74
#81 := [monotonicity #75 #78]: #80
#95 := [monotonicity #81 #92]: #94
#134 := [monotonicity #95 #103 #131]: #133
#71 := (iff #14 false)
#66 := (= -5::Int 0::Int)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #14 #66)
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#137 := [monotonicity #72 #134]: #136
#141 := [trans #137 #139]: #140
#61 := (iff #11 false)
#56 := (= -3::Int 0::Int)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #11 #56)
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#144 := [monotonicity #62 #65 #141]: #143
#148 := [trans #144 #146]: #147
#151 := [monotonicity #148 #129]: #150
#156 := [trans #151 #154]: #155
#159 := [monotonicity #156]: #158
#163 := [trans #159 #161]: #162
#192 := [trans #163 #190]: #191
#52 := [asserted]: #32
[mp #52 #192]: false
unsat
37d641fb0d3f5af8883d250eb08e7f4e580b8a49 182 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#11 := f3
#99 := (<= f3 0::Int)
#112 := (>= f3 0::Int)
#113 := (not #112)
#100 := (not #99)
#123 := (or #100 #113)
#160 := (not #123)
#64 := -3::Int
#60 := -1::Int
#61 := (* -1::Int f3)
#67 := (mod #61 -3::Int)
#73 := (* -1::Int #67)
#8 := 3::Int
#19 := (mod f3 3::Int)
#126 := (ite #123 #19 #73)
#158 := (= #19 #126)
#254 := (not #158)
#226 := (>= #19 3::Int)
#227 := (not #226)
#1 := true
#46 := [true-axiom]: true
#242 := (or false #227)
#243 := [th-lemma arith]: #242
#244 := [unit-resolution #243 #46]: #227
#12 := (= f3 0::Int)
#129 := (ite #12 0::Int #126)
#238 := (* -1::Int #129)
#239 := (+ #19 #238)
#241 := (>= #239 0::Int)
#237 := (= #19 #129)
#157 := (= #126 #129)
#167 := (not #12)
#156 := (= #129 0::Int)
#179 := (not #156)
#172 := (<= #129 0::Int)
#174 := (not #172)
#136 := (>= #129 3::Int)
#21 := (- 3::Int)
#20 := (- f3)
#22 := (mod #20 #21)
#23 := (- #22)
#14 := (< 0::Int 3::Int)
#16 := (< f3 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int f3)
#15 := (and #13 #14)
#18 := (or #15 #17)
#24 := (ite #18 #19 #23)
#25 := (ite #12 0::Int #24)
#10 := (= 3::Int 0::Int)
#26 := (ite #10 f3 #25)
#27 := (< #26 3::Int)
#28 := (not #27)
#148 := (iff #28 #136)
#54 := (and #14 #16)
#57 := (or #15 #54)
#78 := (ite #57 #19 #73)
#51 := (= 0::Int f3)
#81 := (ite #51 0::Int #78)
#91 := (< #81 3::Int)
#94 := (not #91)
#146 := (iff #94 #136)
#135 := (not #136)
#141 := (not #135)
#144 := (iff #141 #136)
#145 := [rewrite]: #144
#142 := (iff #94 #141)
#139 := (iff #91 #135)
#132 := (< #129 3::Int)
#137 := (iff #132 #135)
#138 := [rewrite]: #137
#133 := (iff #91 #132)
#130 := (= #81 #129)
#127 := (= #78 #126)
#124 := (iff #57 #123)
#121 := (iff #54 #113)
#116 := (and true #113)
#119 := (iff #116 #113)
#120 := [rewrite]: #119
#117 := (iff #54 #116)
#114 := (iff #16 #113)
#115 := [rewrite]: #114
#103 := (iff #14 true)
#104 := [rewrite]: #103
#118 := [monotonicity #104 #115]: #117
#122 := [trans #118 #120]: #121
#110 := (iff #15 #100)
#105 := (and #100 true)
#108 := (iff #105 #100)
#109 := [rewrite]: #108
#106 := (iff #15 #105)
#101 := (iff #13 #100)
#102 := [rewrite]: #101
#107 := [monotonicity #102 #104]: #106
#111 := [trans #107 #109]: #110
#125 := [monotonicity #111 #122]: #124
#128 := [monotonicity #125]: #127
#97 := (iff #51 #12)
#98 := [rewrite]: #97
#131 := [monotonicity #98 #128]: #130
#134 := [monotonicity #131]: #133
#140 := [trans #134 #138]: #139
#143 := [monotonicity #140]: #142
#147 := [trans #143 #145]: #146
#95 := (iff #28 #94)
#92 := (iff #27 #91)
#89 := (= #26 #81)
#84 := (ite false f3 #81)
#87 := (= #84 #81)
#88 := [rewrite]: #87
#85 := (= #26 #84)
#82 := (= #25 #81)
#79 := (= #24 #78)
#76 := (= #23 #73)
#70 := (- #67)
#74 := (= #70 #73)
#75 := [rewrite]: #74
#71 := (= #23 #70)
#68 := (= #22 #67)
#65 := (= #21 -3::Int)
#66 := [rewrite]: #65
#62 := (= #20 #61)
#63 := [rewrite]: #62
#69 := [monotonicity #63 #66]: #68
#72 := [monotonicity #69]: #71
#77 := [trans #72 #75]: #76
#58 := (iff #18 #57)
#55 := (iff #17 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#80 := [monotonicity #59 #77]: #79
#52 := (iff #12 #51)
#53 := [rewrite]: #52
#83 := [monotonicity #53 #80]: #82
#49 := (iff #10 false)
#50 := [rewrite]: #49
#86 := [monotonicity #50 #83]: #85
#90 := [trans #86 #88]: #89
#93 := [monotonicity #90]: #92
#96 := [monotonicity #93]: #95
#149 := [trans #96 #147]: #148
#48 := [asserted]: #28
#150 := [mp #48 #149]: #136
#175 := (or #174 #135)
#176 := [th-lemma arith farkas 1 1]: #175
#177 := [unit-resolution #176 #150]: #174
#178 := [hypothesis]: #156
#180 := (or #179 #172)
#181 := [th-lemma arith triangle-eq]: #180
#182 := [unit-resolution #181 #178 #177]: false
#183 := [lemma #182]: #179
#168 := (or #167 #156)
#169 := [def-axiom]: #168
#245 := [unit-resolution #169 #183]: #167
#170 := (or #12 #157)
#171 := [def-axiom]: #170
#246 := [unit-resolution #171 #245]: #157
#247 := [hypothesis]: #158
#248 := [trans #247 #246]: #237
#249 := (not #237)
#250 := (or #249 #241)
#251 := [th-lemma arith triangle-eq]: #250
#252 := [unit-resolution #251 #248]: #241
#253 := [th-lemma arith farkas -1 -1 1 #150 #252 #244]: false
#255 := [lemma #253]: #254
#163 := (or #160 #158)
#164 := [def-axiom]: #163
#232 := [unit-resolution #164 #255]: #160
#154 := (or #123 #99)
#155 := [def-axiom]: #154
#233 := [unit-resolution #155 #232]: #99
#152 := (or #123 #112)
#153 := [def-axiom]: #152
#234 := [unit-resolution #153 #232]: #112
#235 := (or #12 #100 #113)
#236 := [th-lemma arith triangle-eq]: #235
#207 := [unit-resolution #236 #245]: #123
[unit-resolution #207 #234 #233]: false
unsat
fcd3f8cba75d0af01f63efd762505b1dda18b530 187 0
#2 := false
#8 := 3::Int
decl f3 :: Int
#11 := f3
#19 := (mod f3 3::Int)
#233 := (>= #19 3::Int)
#234 := (not #233)
#1 := true
#48 := [true-axiom]: true
#248 := (or false #234)
#249 := [th-lemma arith]: #248
#250 := [unit-resolution #249 #48]: #234
#9 := 0::Int
#62 := -1::Int
#206 := (* -1::Int #19)
#245 := (+ f3 #206)
#246 := (<= #245 0::Int)
#244 := (= f3 #19)
#66 := -3::Int
#63 := (* -1::Int f3)
#69 := (mod #63 -3::Int)
#75 := (* -1::Int #69)
#132 := (>= f3 0::Int)
#133 := (not #132)
#119 := (<= f3 0::Int)
#120 := (not #119)
#143 := (or #120 #133)
#146 := (ite #143 #19 #75)
#262 := (= #146 #19)
#178 := (= #19 #146)
#113 := (>= f3 3::Int)
#12 := (= f3 0::Int)
#149 := (ite #12 0::Int #146)
#152 := (= f3 #149)
#155 := (not #152)
#114 := (not #113)
#158 := (or #114 #155)
#161 := (not #158)
#28 := (< f3 3::Int)
#21 := (- 3::Int)
#20 := (- f3)
#22 := (mod #20 #21)
#23 := (- #22)
#14 := (< 0::Int 3::Int)
#16 := (< f3 0::Int)
#17 := (and #16 #14)
#13 := (< 0::Int f3)
#15 := (and #13 #14)
#18 := (or #15 #17)
#24 := (ite #18 #19 #23)
#25 := (ite #12 0::Int #24)
#10 := (= 3::Int 0::Int)
#26 := (ite #10 f3 #25)
#27 := (= #26 f3)
#29 := (implies #27 #28)
#30 := (not #29)
#164 := (iff #30 #161)
#56 := (and #14 #16)
#59 := (or #15 #56)
#80 := (ite #59 #19 #75)
#53 := (= 0::Int f3)
#83 := (ite #53 0::Int #80)
#96 := (= f3 #83)
#104 := (not #96)
#105 := (or #28 #104)
#110 := (not #105)
#162 := (iff #110 #161)
#159 := (iff #105 #158)
#156 := (iff #104 #155)
#153 := (iff #96 #152)
#150 := (= #83 #149)
#147 := (= #80 #146)
#144 := (iff #59 #143)
#141 := (iff #56 #133)
#136 := (and true #133)
#139 := (iff #136 #133)
#140 := [rewrite]: #139
#137 := (iff #56 #136)
#134 := (iff #16 #133)
#135 := [rewrite]: #134
#123 := (iff #14 true)
#124 := [rewrite]: #123
#138 := [monotonicity #124 #135]: #137
#142 := [trans #138 #140]: #141
#130 := (iff #15 #120)
#125 := (and #120 true)
#128 := (iff #125 #120)
#129 := [rewrite]: #128
#126 := (iff #15 #125)
#121 := (iff #13 #120)
#122 := [rewrite]: #121
#127 := [monotonicity #122 #124]: #126
#131 := [trans #127 #129]: #130
#145 := [monotonicity #131 #142]: #144
#148 := [monotonicity #145]: #147
#117 := (iff #53 #12)
#118 := [rewrite]: #117
#151 := [monotonicity #118 #148]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#115 := (iff #28 #114)
#116 := [rewrite]: #115
#160 := [monotonicity #116 #157]: #159
#163 := [monotonicity #160]: #162
#111 := (iff #30 #110)
#108 := (iff #29 #105)
#101 := (implies #96 #28)
#106 := (iff #101 #105)
#107 := [rewrite]: #106
#102 := (iff #29 #101)
#99 := (iff #27 #96)
#93 := (= #83 f3)
#97 := (iff #93 #96)
#98 := [rewrite]: #97
#94 := (iff #27 #93)
#91 := (= #26 #83)
#86 := (ite false f3 #83)
#89 := (= #86 #83)
#90 := [rewrite]: #89
#87 := (= #26 #86)
#84 := (= #25 #83)
#81 := (= #24 #80)
#78 := (= #23 #75)
#72 := (- #69)
#76 := (= #72 #75)
#77 := [rewrite]: #76
#73 := (= #23 #72)
#70 := (= #22 #69)
#67 := (= #21 -3::Int)
#68 := [rewrite]: #67
#64 := (= #20 #63)
#65 := [rewrite]: #64
#71 := [monotonicity #65 #68]: #70
#74 := [monotonicity #71]: #73
#79 := [trans #74 #77]: #78
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#82 := [monotonicity #61 #79]: #81
#54 := (iff #12 #53)
#55 := [rewrite]: #54
#85 := [monotonicity #55 #82]: #84
#51 := (iff #10 false)
#52 := [rewrite]: #51
#88 := [monotonicity #52 #85]: #87
#92 := [trans #88 #90]: #91
#95 := [monotonicity #92]: #94
#100 := [trans #95 #98]: #99
#103 := [monotonicity #100]: #102
#109 := [trans #103 #107]: #108
#112 := [monotonicity #109]: #111
#165 := [trans #112 #163]: #164
#50 := [asserted]: #30
#166 := [mp #50 #165]: #161
#167 := [not-or-elim #166]: #113
#251 := (or #120 #114)
#252 := [th-lemma arith farkas 1 1]: #251
#253 := [unit-resolution #252 #167]: #120
#174 := (or #143 #119)
#175 := [def-axiom]: #174
#258 := [unit-resolution #175 #253]: #143
#170 := (not #143)
#181 := (or #170 #178)
#182 := [def-axiom]: #181
#259 := [unit-resolution #182 #258]: #178
#263 := [symm #259]: #262
#264 := (= f3 #146)
#260 := (= #149 #146)
#177 := (= #146 #149)
#185 := (not #12)
#254 := (or #185 #119)
#255 := [th-lemma arith triangle-eq]: #254
#256 := [unit-resolution #255 #253]: #185
#188 := (or #12 #177)
#189 := [def-axiom]: #188
#257 := [unit-resolution #189 #256]: #177
#261 := [symm #257]: #260
#168 := [not-or-elim #166]: #152
#265 := [trans #168 #261]: #264
#266 := [trans #265 #263]: #244
#267 := (not #244)
#268 := (or #267 #246)
#269 := [th-lemma arith triangle-eq]: #268
#270 := [unit-resolution #269 #266]: #246
[th-lemma arith farkas -1 1 1 #167 #270 #250]: false
unsat
b0d0143b1d623c3b7e34600e7103453eafcbef9f 326 0
#2 := false
#9 := 0::Int
#71 := -1::Int
decl f3 :: Int
#8 := f3
#72 := (* -1::Int f3)
#95 := (mod #72 -1::Int)
#101 := (* -1::Int #95)
#147 := (>= f3 0::Int)
#148 := (not #147)
#134 := (<= f3 0::Int)
#135 := (not #134)
#10 := (= f3 0::Int)
#170 := (or #10 #135 #148)
#175 := (ite #170 0::Int #101)
#288 := (<= #175 0::Int)
#220 := (= #175 0::Int)
#215 := (not #10)
#228 := (not #170)
#375 := [hypothesis]: #228
#222 := (or #170 #215)
#223 := [def-axiom]: #222
#376 := [unit-resolution #223 #375]: #215
#226 := (or #170 #147)
#227 := [def-axiom]: #226
#377 := [unit-resolution #227 #375]: #147
#378 := (or #10 #148)
#185 := (* -1::Int #175)
#77 := (div #72 -1::Int)
#11 := 1::Int
#20 := (div f3 1::Int)
#158 := (or #135 #148)
#161 := (ite #158 #20 #77)
#164 := (ite #10 0::Int #161)
#184 := (* -1::Int #164)
#186 := (+ #184 #185)
#187 := (+ f3 #186)
#236 := (>= #187 0::Int)
#291 := (+ #20 #184)
#293 := (>= #291 0::Int)
#290 := (= #20 #164)
#205 := (= #161 #164)
#294 := [hypothesis]: #135
#295 := (or #215 #134)
#296 := [th-lemma arith triangle-eq]: #295
#297 := [unit-resolution #296 #294]: #215
#218 := (or #10 #205)
#219 := [def-axiom]: #218
#298 := [unit-resolution #219 #297]: #205
#206 := (= #20 #161)
#202 := (or #158 #134)
#203 := [def-axiom]: #202
#299 := [unit-resolution #203 #294]: #158
#208 := (not #158)
#211 := (or #208 #206)
#212 := [def-axiom]: #211
#300 := [unit-resolution #212 #299]: #206
#301 := [trans #300 #298]: #290
#302 := (not #290)
#303 := (or #302 #293)
#304 := [th-lemma arith triangle-eq]: #303
#305 := [unit-resolution #304 #301]: #293
#224 := (or #170 #134)
#225 := [def-axiom]: #224
#306 := [unit-resolution #225 #294]: #170
#231 := (or #228 #220)
#232 := [def-axiom]: #231
#307 := [unit-resolution #232 #306]: #220
#308 := (not #220)
#309 := (or #308 #288)
#310 := [th-lemma arith triangle-eq]: #309
#311 := [unit-resolution #310 #307]: #288
#258 := (* -1::Int #20)
#259 := (+ f3 #258)
#265 := (>= #259 0::Int)
#257 := (= #259 0::Int)
#1 := true
#53 := [true-axiom]: true
#312 := (or false #257)
#313 := [th-lemma arith]: #312
#314 := [unit-resolution #313 #53]: #257
#315 := (not #257)
#316 := (or #315 #265)
#317 := [th-lemma arith triangle-eq]: #316
#318 := [unit-resolution #317 #314]: #265
#321 := (not #265)
#320 := (not #293)
#319 := (not #288)
#322 := (or #236 #319 #320 #321)
#323 := [th-lemma arith assign-bounds 1 -1 -1]: #322
#324 := [unit-resolution #323 #318 #311 #305]: #236
#235 := (<= #187 0::Int)
#292 := (<= #291 0::Int)
#325 := (or #302 #292)
#326 := [th-lemma arith triangle-eq]: #325
#327 := [unit-resolution #326 #301]: #292
#289 := (>= #175 0::Int)
#328 := (or #308 #289)
#329 := [th-lemma arith triangle-eq]: #328
#330 := [unit-resolution #329 #307]: #289
#264 := (<= #259 0::Int)
#331 := (or #315 #264)
#332 := [th-lemma arith triangle-eq]: #331
#333 := [unit-resolution #332 #314]: #264
#336 := (not #264)
#335 := (not #292)
#334 := (not #289)
#337 := (or #235 #334 #335 #336)
#338 := [th-lemma arith assign-bounds 1 -1 -1]: #337
#339 := [unit-resolution #338 #333 #330 #327]: #235
#341 := (not #236)
#340 := (not #235)
#344 := (or #340 #341)
#188 := (= #187 0::Int)
#193 := (not #188)
#22 := (- 1::Int)
#21 := (- f3)
#28 := (mod #21 #22)
#29 := (- #28)
#27 := (mod f3 1::Int)
#15 := (< 0::Int 1::Int)
#17 := (< f3 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int f3)
#16 := (and #14 #15)
#19 := (or #16 #18)
#30 := (ite #19 #27 #29)
#31 := (ite #10 0::Int #30)
#12 := (= 1::Int 0::Int)
#32 := (ite #12 f3 #31)
#23 := (div #21 #22)
#24 := (ite #19 #20 #23)
#13 := (or #10 #12)
#25 := (ite #13 0::Int #24)
#26 := (* #25 1::Int)
#33 := (+ #26 #32)
#34 := (= f3 #33)
#35 := (not #34)
#196 := (iff #35 #193)
#65 := (and #15 #17)
#68 := (or #16 #65)
#112 := (or #10 #68)
#113 := (ite #112 0::Int #101)
#80 := (ite #68 #20 #77)
#83 := (ite #10 0::Int #80)
#125 := (+ #83 #113)
#128 := (= f3 #125)
#131 := (not #128)
#194 := (iff #131 #193)
#191 := (iff #128 #188)
#178 := (+ #164 #175)
#181 := (= f3 #178)
#189 := (iff #181 #188)
#190 := [rewrite]: #189
#182 := (iff #128 #181)
#179 := (= #125 #178)
#176 := (= #113 #175)
#173 := (iff #112 #170)
#167 := (or #10 #158)
#171 := (iff #167 #170)
#172 := [rewrite]: #171
#168 := (iff #112 #167)
#159 := (iff #68 #158)
#156 := (iff #65 #148)
#151 := (and true #148)
#154 := (iff #151 #148)
#155 := [rewrite]: #154
#152 := (iff #65 #151)
#149 := (iff #17 #148)
#150 := [rewrite]: #149
#138 := (iff #15 true)
#139 := [rewrite]: #138
#153 := [monotonicity #139 #150]: #152
#157 := [trans #153 #155]: #156
#145 := (iff #16 #135)
#140 := (and #135 true)
#143 := (iff #140 #135)
#144 := [rewrite]: #143
#141 := (iff #16 #140)
#136 := (iff #14 #135)
#137 := [rewrite]: #136
#142 := [monotonicity #137 #139]: #141
#146 := [trans #142 #144]: #145
#160 := [monotonicity #146 #157]: #159
#169 := [monotonicity #160]: #168
#174 := [trans #169 #172]: #173
#177 := [monotonicity #174]: #176
#165 := (= #83 #164)
#162 := (= #80 #161)
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#180 := [monotonicity #166 #177]: #179
#183 := [monotonicity #180]: #182
#192 := [trans #183 #190]: #191
#195 := [monotonicity #192]: #194
#132 := (iff #35 #131)
#129 := (iff #34 #128)
#126 := (= #33 #125)
#123 := (= #32 #113)
#118 := (ite false f3 #113)
#121 := (= #118 #113)
#122 := [rewrite]: #121
#119 := (= #32 #118)
#116 := (= #31 #113)
#106 := (ite #68 0::Int #101)
#109 := (ite #10 0::Int #106)
#114 := (= #109 #113)
#115 := [rewrite]: #114
#110 := (= #31 #109)
#107 := (= #30 #106)
#104 := (= #29 #101)
#98 := (- #95)
#102 := (= #98 #101)
#103 := [rewrite]: #102
#99 := (= #29 #98)
#96 := (= #28 #95)
#75 := (= #22 -1::Int)
#76 := [rewrite]: #75
#73 := (= #21 #72)
#74 := [rewrite]: #73
#97 := [monotonicity #74 #76]: #96
#100 := [monotonicity #97]: #99
#105 := [trans #100 #103]: #104
#93 := (= #27 0::Int)
#94 := [rewrite]: #93
#69 := (iff #19 #68)
#66 := (iff #18 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#108 := [monotonicity #70 #94 #105]: #107
#111 := [monotonicity #108]: #110
#117 := [trans #111 #115]: #116
#56 := (iff #12 false)
#57 := [rewrite]: #56
#120 := [monotonicity #57 #117]: #119
#124 := [trans #120 #122]: #123
#91 := (= #26 #83)
#86 := (* #83 1::Int)
#89 := (= #86 #83)
#90 := [rewrite]: #89
#87 := (= #26 #86)
#84 := (= #25 #83)
#81 := (= #24 #80)
#78 := (= #23 #77)
#79 := [monotonicity #74 #76]: #78
#82 := [monotonicity #70 #79]: #81
#63 := (iff #13 #10)
#58 := (or #10 false)
#61 := (iff #58 #10)
#62 := [rewrite]: #61
#59 := (iff #13 #58)
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#85 := [monotonicity #64 #82]: #84
#88 := [monotonicity #85]: #87
#92 := [trans #88 #90]: #91
#127 := [monotonicity #92 #124]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#197 := [trans #133 #195]: #196
#55 := [asserted]: #35
#198 := [mp #55 #197]: #193
#342 := (or #188 #340 #341)
#343 := [th-lemma arith triangle-eq]: #342
#345 := [unit-resolution #343 #198]: #344
#346 := [unit-resolution #345 #339 #324]: false
#347 := [lemma #346]: #134
#363 := [th-lemma arith triangle-eq]: #170
#379 := [unit-resolution #363 #347]: #378
#380 := [unit-resolution #379 #377 #376]: false
#381 := [lemma #380]: #170
#390 := [unit-resolution #232 #381]: #220
#391 := [unit-resolution #310 #390]: #288
#382 := (<= #164 0::Int)
#204 := (= #164 0::Int)
#383 := [hypothesis]: #147
#384 := [unit-resolution #379 #383]: #10
#216 := (or #215 #204)
#217 := [def-axiom]: #216
#385 := [unit-resolution #217 #384]: #204
#355 := (not #204)
#386 := (or #355 #382)
#387 := [th-lemma arith triangle-eq]: #386
#388 := [unit-resolution #387 #385]: #382
#359 := [hypothesis]: #340
#361 := (or #215 #235)
#350 := [hypothesis]: #10
#351 := [unit-resolution #223 #350]: #170
#352 := [unit-resolution #232 #351]: #220
#353 := [unit-resolution #329 #352]: #289
#349 := (>= #164 0::Int)
#354 := [unit-resolution #217 #350]: #204
#356 := (or #355 #349)
#357 := [th-lemma arith triangle-eq]: #356
#358 := [unit-resolution #357 #354]: #349
#360 := [th-lemma arith farkas 1 1 -1 1 #359 #358 #347 #353]: false
#362 := [lemma #360]: #361
#348 := [unit-resolution #362 #359]: #215
#364 := [unit-resolution #363 #348 #347]: #148
#365 := [unit-resolution #227 #364]: #170
#366 := [unit-resolution #232 #365]: #220
#367 := [unit-resolution #329 #366]: #289
#368 := [unit-resolution #219 #348]: #205
#200 := (or #158 #147)
#201 := [def-axiom]: #200
#369 := [unit-resolution #201 #364]: #158
#370 := [unit-resolution #212 #369]: #206
#371 := [trans #370 #368]: #290
#372 := [unit-resolution #326 #371]: #292
#373 := [unit-resolution #338 #333 #372 #359 #367]: false
#374 := [lemma #373]: #235
#389 := [unit-resolution #345 #374]: #341
#392 := [th-lemma arith farkas 1 1 -1 1 #391 #389 #383 #388]: false
#393 := [lemma #392]: #148
#394 := (or #215 #147)
#395 := [th-lemma arith triangle-eq]: #394
#396 := [unit-resolution #395 #393]: #215
#397 := [unit-resolution #219 #396]: #205
#398 := [unit-resolution #201 #393]: #158
#399 := [unit-resolution #212 #398]: #206
#400 := [trans #399 #397]: #290
#401 := [unit-resolution #304 #400]: #293
#402 := (or #319 #320 #321)
#403 := [unit-resolution #323 #389]: #402
[unit-resolution #403 #318 #401 #391]: false
unsat
31fe1e25557ea7df409ade184e44a23cd64eda4c 308 0
#2 := false
#9 := 0::Int
#75 := -3::Int
decl f3 :: Int
#8 := f3
#71 := -1::Int
#72 := (* -1::Int f3)
#95 := (mod #72 -3::Int)
#101 := (* -1::Int #95)
#11 := 3::Int
#27 := (mod f3 3::Int)
#141 := (>= f3 0::Int)
#142 := (not #141)
#128 := (<= f3 0::Int)
#129 := (not #128)
#152 := (or #129 #142)
#164 := (ite #152 #27 #101)
#10 := (= f3 0::Int)
#167 := (ite #10 0::Int #164)
#177 := (* -1::Int #167)
#321 := (+ #27 #177)
#358 := (>= #321 0::Int)
#320 := (= #27 #167)
#213 := (= #164 #167)
#207 := (not #10)
#78 := (div #72 -3::Int)
#20 := (div f3 3::Int)
#155 := (ite #152 #20 #78)
#158 := (ite #10 0::Int #155)
#176 := (* -3::Int #158)
#178 := (+ #176 #177)
#179 := (+ f3 #178)
#225 := (>= #179 0::Int)
#228 := (<= #167 0::Int)
#212 := (= #167 0::Int)
#200 := (not #152)
#230 := [hypothesis]: #200
#192 := (or #152 #141)
#193 := [def-axiom]: #192
#231 := [unit-resolution #193 #230]: #141
#194 := (or #152 #128)
#195 := [def-axiom]: #194
#232 := [unit-resolution #195 #230]: #128
#233 := (or #10 #129 #142)
#234 := [th-lemma arith triangle-eq]: #233
#235 := [unit-resolution #234 #232 #231]: #10
#220 := (or #207 #212)
#221 := [def-axiom]: #220
#236 := [unit-resolution #221 #235]: #212
#237 := (not #212)
#238 := (or #237 #228)
#239 := [th-lemma arith triangle-eq]: #238
#240 := [unit-resolution #239 #236]: #228
#226 := (<= #158 0::Int)
#196 := (= #158 0::Int)
#208 := (or #207 #196)
#209 := [def-axiom]: #208
#241 := [unit-resolution #209 #235]: #196
#242 := (not #196)
#243 := (or #242 #226)
#244 := [th-lemma arith triangle-eq]: #243
#245 := [unit-resolution #244 #241]: #226
#247 := (not #228)
#246 := (not #226)
#248 := (or #225 #142 #246 #247)
#249 := [th-lemma arith assign-bounds -1 3 1]: #248
#250 := [unit-resolution #249 #231 #245 #240]: #225
#224 := (<= #179 0::Int)
#229 := (>= #167 0::Int)
#251 := (or #237 #229)
#252 := [th-lemma arith triangle-eq]: #251
#253 := [unit-resolution #252 #236]: #229
#227 := (>= #158 0::Int)
#254 := (or #242 #227)
#255 := [th-lemma arith triangle-eq]: #254
#256 := [unit-resolution #255 #241]: #227
#258 := (not #229)
#257 := (not #227)
#259 := (or #224 #129 #257 #258)
#260 := [th-lemma arith assign-bounds -1 3 1]: #259
#261 := [unit-resolution #260 #232 #256 #253]: #224
#263 := (not #225)
#262 := (not #224)
#266 := (or #262 #263)
#180 := (= #179 0::Int)
#185 := (not #180)
#22 := (- 3::Int)
#21 := (- f3)
#28 := (mod #21 #22)
#29 := (- #28)
#15 := (< 0::Int 3::Int)
#17 := (< f3 0::Int)
#18 := (and #17 #15)
#14 := (< 0::Int f3)
#16 := (and #14 #15)
#19 := (or #16 #18)
#30 := (ite #19 #27 #29)
#31 := (ite #10 0::Int #30)
#12 := (= 3::Int 0::Int)
#32 := (ite #12 f3 #31)
#23 := (div #21 #22)
#24 := (ite #19 #20 #23)
#13 := (or #10 #12)
#25 := (ite #13 0::Int #24)
#26 := (* #25 3::Int)
#33 := (+ #26 #32)
#34 := (= f3 #33)
#35 := (not #34)
#188 := (iff #35 #185)
#65 := (and #15 #17)
#68 := (or #16 #65)
#106 := (ite #68 #27 #101)
#109 := (ite #10 0::Int #106)
#81 := (ite #68 #20 #78)
#84 := (ite #10 0::Int #81)
#90 := (* 3::Int #84)
#119 := (+ #90 #109)
#122 := (= f3 #119)
#125 := (not #122)
#186 := (iff #125 #185)
#183 := (iff #122 #180)
#161 := (* 3::Int #158)
#170 := (+ #161 #167)
#173 := (= f3 #170)
#181 := (iff #173 #180)
#182 := [rewrite]: #181
#174 := (iff #122 #173)
#171 := (= #119 #170)
#168 := (= #109 #167)
#165 := (= #106 #164)
#153 := (iff #68 #152)
#150 := (iff #65 #142)
#1 := true
#145 := (and true #142)
#148 := (iff #145 #142)
#149 := [rewrite]: #148
#146 := (iff #65 #145)
#143 := (iff #17 #142)
#144 := [rewrite]: #143
#132 := (iff #15 true)
#133 := [rewrite]: #132
#147 := [monotonicity #133 #144]: #146
#151 := [trans #147 #149]: #150
#139 := (iff #16 #129)
#134 := (and #129 true)
#137 := (iff #134 #129)
#138 := [rewrite]: #137
#135 := (iff #16 #134)
#130 := (iff #14 #129)
#131 := [rewrite]: #130
#136 := [monotonicity #131 #133]: #135
#140 := [trans #136 #138]: #139
#154 := [monotonicity #140 #151]: #153
#166 := [monotonicity #154]: #165
#169 := [monotonicity #166]: #168
#162 := (= #90 #161)
#159 := (= #84 #158)
#156 := (= #81 #155)
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#172 := [monotonicity #163 #169]: #171
#175 := [monotonicity #172]: #174
#184 := [trans #175 #182]: #183
#187 := [monotonicity #184]: #186
#126 := (iff #35 #125)
#123 := (iff #34 #122)
#120 := (= #33 #119)
#117 := (= #32 #109)
#112 := (ite false f3 #109)
#115 := (= #112 #109)
#116 := [rewrite]: #115
#113 := (= #32 #112)
#110 := (= #31 #109)
#107 := (= #30 #106)
#104 := (= #29 #101)
#98 := (- #95)
#102 := (= #98 #101)
#103 := [rewrite]: #102
#99 := (= #29 #98)
#96 := (= #28 #95)
#76 := (= #22 -3::Int)
#77 := [rewrite]: #76
#73 := (= #21 #72)
#74 := [rewrite]: #73
#97 := [monotonicity #74 #77]: #96
#100 := [monotonicity #97]: #99
#105 := [trans #100 #103]: #104
#69 := (iff #19 #68)
#66 := (iff #18 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#108 := [monotonicity #70 #105]: #107
#111 := [monotonicity #108]: #110
#56 := (iff #12 false)
#57 := [rewrite]: #56
#114 := [monotonicity #57 #111]: #113
#118 := [trans #114 #116]: #117
#93 := (= #26 #90)
#87 := (* #84 3::Int)
#91 := (= #87 #90)
#92 := [rewrite]: #91
#88 := (= #26 #87)
#85 := (= #25 #84)
#82 := (= #24 #81)
#79 := (= #23 #78)
#80 := [monotonicity #74 #77]: #79
#83 := [monotonicity #70 #80]: #82
#63 := (iff #13 #10)
#58 := (or #10 false)
#61 := (iff #58 #10)
#62 := [rewrite]: #61
#59 := (iff #13 #58)
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#86 := [monotonicity #64 #83]: #85
#89 := [monotonicity #86]: #88
#94 := [trans #89 #92]: #93
#121 := [monotonicity #94 #118]: #120
#124 := [monotonicity #121]: #123
#127 := [monotonicity #124]: #126
#189 := [trans #127 #187]: #188
#55 := [asserted]: #35
#190 := [mp #55 #189]: #185
#264 := (or #180 #262 #263)
#265 := [th-lemma arith triangle-eq]: #264
#267 := [unit-resolution #265 #190]: #266
#268 := [unit-resolution #267 #261 #250]: false
#269 := [lemma #268]: #152
#310 := [hypothesis]: #10
#311 := (or #207 #128)
#312 := [th-lemma arith triangle-eq]: #311
#313 := [unit-resolution #312 #310]: #128
#314 := (or #207 #141)
#286 := [th-lemma arith triangle-eq]: #314
#319 := [unit-resolution #286 #310]: #141
#201 := (or #200 #129 #142)
#202 := [def-axiom]: #201
#323 := [unit-resolution #202 #319 #313 #269]: false
#350 := [lemma #323]: #207
#222 := (or #10 #213)
#223 := [def-axiom]: #222
#359 := [unit-resolution #223 #350]: #213
#214 := (= #27 #164)
#216 := (or #200 #214)
#217 := [def-axiom]: #216
#326 := [unit-resolution #217 #269]: #214
#360 := [trans #326 #359]: #320
#328 := (not #320)
#361 := (or #328 #358)
#362 := [th-lemma arith triangle-eq]: #361
#363 := [unit-resolution #362 #360]: #358
#280 := (* -1::Int #27)
#279 := (* -3::Int #20)
#281 := (+ #279 #280)
#282 := (+ f3 #281)
#351 := (>= #282 0::Int)
#278 := (= #282 0::Int)
#53 := [true-axiom]: true
#332 := (or false #278)
#333 := [th-lemma arith]: #332
#334 := [unit-resolution #333 #53]: #278
#335 := (not #278)
#364 := (or #335 #351)
#365 := [th-lemma arith triangle-eq]: #364
#366 := [unit-resolution #365 #334]: #351
#348 := (or #10 #224)
#322 := (<= #321 0::Int)
#324 := [hypothesis]: #207
#325 := [unit-resolution #223 #324]: #213
#327 := [trans #326 #325]: #320
#329 := (or #328 #322)
#330 := [th-lemma arith triangle-eq]: #329
#331 := [unit-resolution #330 #327]: #322
#285 := (<= #282 0::Int)
#336 := (or #335 #285)
#337 := [th-lemma arith triangle-eq]: #336
#338 := [unit-resolution #337 #334]: #285
#339 := [hypothesis]: #262
#316 := (* -1::Int #158)
#317 := (+ #20 #316)
#318 := (<= #317 0::Int)
#315 := (= #20 #158)
#197 := (= #155 #158)
#210 := (or #10 #197)
#211 := [def-axiom]: #210
#340 := [unit-resolution #211 #324]: #197
#198 := (= #20 #155)
#203 := (or #200 #198)
#204 := [def-axiom]: #203
#341 := [unit-resolution #204 #269]: #198
#342 := [trans #341 #340]: #315
#343 := (not #315)
#344 := (or #343 #318)
#345 := [th-lemma arith triangle-eq]: #344
#346 := [unit-resolution #345 #342]: #318
#347 := [th-lemma arith farkas 3 -1 1 1 #346 #339 #338 #331]: false
#349 := [lemma #347]: #348
#367 := [unit-resolution #349 #350]: #224
#368 := [unit-resolution #267 #367]: #263
#357 := (>= #317 0::Int)
#369 := [unit-resolution #211 #350]: #197
#370 := [trans #341 #369]: #315
#371 := (or #343 #357)
#372 := [th-lemma arith triangle-eq]: #371
#373 := [unit-resolution #372 #370]: #357
[th-lemma arith farkas 3 -1 1 1 #373 #368 #366 #363]: false
unsat
cacbb4776a876130daed2cf13657b41ab1c7df25 75 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#35 := -1::Int
#36 := (* -1::Int f3)
#48 := (>= f3 0::Int)
#55 := (ite #48 f3 #36)
#75 := (* -1::Int #55)
#84 := (+ #36 #75)
#93 := (<= #84 0::Int)
#80 := (= #36 #55)
#49 := (not #48)
#76 := (+ f3 #75)
#83 := (<= #76 0::Int)
#79 := (= f3 #55)
#85 := [hypothesis]: #48
#81 := (or #49 #79)
#82 := [def-axiom]: #81
#86 := [unit-resolution #82 #85]: #79
#87 := (not #79)
#88 := (or #87 #83)
#89 := [th-lemma arith triangle-eq]: #88
#90 := [unit-resolution #89 #86]: #83
#64 := (>= #55 0::Int)
#68 := (not #64)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#13 := (<= 0::Int #12)
#14 := (not #13)
#71 := (iff #14 #68)
#39 := (ite #10 #36 f3)
#42 := (<= 0::Int #39)
#45 := (not #42)
#69 := (iff #45 #68)
#66 := (iff #42 #64)
#60 := (<= 0::Int #55)
#63 := (iff #60 #64)
#65 := [rewrite]: #63
#61 := (iff #42 #60)
#58 := (= #39 #55)
#52 := (ite #49 #36 f3)
#56 := (= #52 #55)
#57 := [rewrite]: #56
#53 := (= #39 #52)
#50 := (iff #10 #49)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#67 := [trans #62 #65]: #66
#70 := [monotonicity #67]: #69
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (= #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#72 := [trans #47 #70]: #71
#34 := [asserted]: #14
#73 := [mp #34 #72]: #68
#91 := [th-lemma arith farkas -1 1 1 #85 #73 #90]: false
#92 := [lemma #91]: #49
#77 := (or #48 #80)
#78 := [def-axiom]: #77
#95 := [unit-resolution #78 #92]: #80
#96 := (not #80)
#97 := (or #96 #93)
#98 := [th-lemma arith triangle-eq]: #97
#99 := [unit-resolution #98 #95]: #93
[th-lemma arith farkas 1 1 1 #92 #73 #99]: false
unsat
72eab31a3a69b2d560f65ab53e94b5e0f28ca228 128 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#37 := -1::Int
#38 := (* -1::Int f3)
#137 := (<= #38 0::Int)
#136 := (= #38 0::Int)
#69 := (>= f3 0::Int)
#76 := (ite #69 f3 #38)
#85 := (= #76 0::Int)
#105 := (= f3 #76)
#127 := (not #105)
#101 := (not #85)
#128 := (iff #101 #127)
#125 := (iff #85 #105)
#123 := (iff #105 #85)
#81 := (= 0::Int #76)
#84 := (iff #81 #85)
#122 := [commutativity]: #84
#120 := (iff #105 #81)
#14 := (= f3 0::Int)
#118 := [hypothesis]: #101
#115 := (or #14 #85)
#63 := (not #14)
#92 := (iff #63 #85)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#13 := (= #12 0::Int)
#15 := (iff #13 #14)
#16 := (not #15)
#97 := (iff #16 #92)
#41 := (ite #10 #38 f3)
#47 := (= 0::Int #41)
#64 := (iff #47 #63)
#95 := (iff #64 #92)
#89 := (iff #85 #63)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #64 #89)
#87 := (iff #47 #85)
#86 := [rewrite]: #84
#82 := (iff #47 #81)
#79 := (= #41 #76)
#70 := (not #69)
#73 := (ite #70 #38 f3)
#77 := (= #73 #76)
#78 := [rewrite]: #77
#74 := (= #41 #73)
#71 := (iff #10 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#80 := [trans #75 #78]: #79
#83 := [monotonicity #80]: #82
#88 := [trans #83 #86]: #87
#91 := [monotonicity #88]: #90
#96 := [trans #91 #94]: #95
#67 := (iff #16 #64)
#55 := (iff #14 #47)
#60 := (not #55)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#52 := (iff #47 #14)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #13 #47)
#44 := (= #41 0::Int)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #13 #44)
#42 := (= #12 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#98 := [trans #68 #96]: #97
#36 := [asserted]: #16
#99 := [mp #36 #98]: #92
#102 := (not #92)
#113 := (or #14 #85 #102)
#114 := [def-axiom]: #113
#116 := [unit-resolution #114 #99]: #115
#119 := [unit-resolution #116 #118]: #14
#121 := [monotonicity #119]: #120
#124 := [trans #121 #122]: #123
#126 := [symm #124]: #125
#129 := [monotonicity #126]: #128
#130 := [mp #118 #129]: #127
#131 := (or #63 #69)
#132 := [th-lemma arith triangle-eq]: #131
#133 := [unit-resolution #132 #119]: #69
#107 := (or #70 #105)
#108 := [def-axiom]: #107
#134 := [unit-resolution #108 #133 #130]: false
#135 := [lemma #134]: #85
#106 := (= #38 #76)
#144 := (iff #63 #127)
#142 := (iff #14 #105)
#140 := (iff #105 #14)
#141 := [monotonicity #135]: #140
#143 := [symm #141]: #142
#145 := [monotonicity #143]: #144
#111 := (or #63 #101)
#109 := (or #63 #101 #102)
#110 := [def-axiom]: #109
#112 := [unit-resolution #110 #99]: #111
#139 := [unit-resolution #112 #135]: #63
#146 := [mp #139 #145]: #127
#147 := [unit-resolution #108 #146]: #70
#103 := (or #69 #106)
#104 := [def-axiom]: #103
#148 := [unit-resolution #104 #147]: #106
#149 := [trans #148 #135]: #136
#150 := (not #136)
#151 := (or #150 #137)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #149]: #137
[th-lemma arith farkas 1 1 #147 #153]: false
unsat
65683f244c3b3437d2ff4b46228877d5d6db1b1c 103 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#64 := (>= f3 0::Int)
#37 := -1::Int
#38 := (* -1::Int f3)
#111 := (* -1::Int #38)
#112 := (+ f3 #111)
#114 := (>= #112 0::Int)
#110 := (= f3 #38)
#71 := (ite #64 f3 #38)
#118 := (= #71 #38)
#99 := (= #38 #71)
#65 := (not #64)
#115 := [hypothesis]: #65
#102 := (or #64 #99)
#97 := [def-axiom]: #102
#116 := [unit-resolution #97 #115]: #99
#119 := [symm #116]: #118
#76 := (= f3 #71)
#108 := (or #64 #76)
#86 := (iff #65 #76)
#12 := (- f3)
#11 := (< f3 0::Int)
#13 := (ite #11 #12 f3)
#14 := (= #13 f3)
#10 := (<= 0::Int f3)
#15 := (iff #10 #14)
#16 := (not #15)
#91 := (iff #16 #86)
#58 := (not #10)
#41 := (ite #11 #38 f3)
#47 := (= f3 #41)
#59 := (iff #47 #58)
#89 := (iff #59 #86)
#83 := (iff #76 #65)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #59 #83)
#81 := (iff #58 #65)
#79 := (iff #10 #64)
#80 := [rewrite]: #79
#82 := [monotonicity #80]: #81
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#85 := [monotonicity #78 #82]: #84
#90 := [trans #85 #88]: #89
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 f3)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#42 := (= #13 #41)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#92 := [trans #63 #90]: #91
#36 := [asserted]: #16
#93 := [mp #36 #92]: #86
#95 := (not #86)
#106 := (or #64 #76 #95)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #93]: #108
#117 := [unit-resolution #109 #115]: #76
#120 := [trans #117 #119]: #110
#121 := (not #110)
#122 := (or #121 #114)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #114
#125 := [th-lemma arith farkas 2 1 #115 #124]: false
#126 := [lemma #125]: #64
#100 := (or #65 #76)
#101 := [def-axiom]: #100
#113 := [unit-resolution #101 #126]: #76
#98 := (not #76)
#104 := (or #65 #98)
#96 := (or #65 #98 #95)
#103 := [def-axiom]: #96
#105 := [unit-resolution #103 #93]: #104
[unit-resolution #105 #113 #126]: false
unsat
6706cda989499422594f4bdacb2cec77f1d7ef2e 152 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#37 := -1::Int
#38 := (* -1::Int f3)
#64 := (>= f3 0::Int)
#71 := (ite #64 f3 #38)
#114 := (* -1::Int #71)
#164 := (+ f3 #114)
#165 := (<= #164 0::Int)
#101 := (= f3 #71)
#115 := (+ #38 #114)
#117 := (>= #115 0::Int)
#76 := (= #38 #71)
#65 := (not #64)
#149 := [hypothesis]: #65
#104 := (or #64 #76)
#99 := [def-axiom]: #104
#150 := [unit-resolution #99 #149]: #76
#143 := (not #76)
#151 := (or #143 #117)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #150]: #117
#81 := (+ f3 #71)
#100 := (<= #81 0::Int)
#158 := (not #100)
#97 := (>= #81 0::Int)
#116 := (<= #115 0::Int)
#80 := (= #81 0::Int)
#98 := (not #80)
#136 := (not #97)
#137 := [hypothesis]: #136
#138 := (or #98 #97)
#139 := [th-lemma arith triangle-eq]: #138
#140 := [unit-resolution #139 #137]: #98
#134 := (or #65 #80)
#121 := (= f3 0::Int)
#10 := (<= f3 0::Int)
#118 := [hypothesis]: #98
#112 := (or #10 #80)
#58 := (not #10)
#88 := (iff #58 #80)
#12 := (- f3)
#11 := (< f3 0::Int)
#13 := (ite #11 #12 f3)
#14 := (= #13 #12)
#15 := (iff #10 #14)
#16 := (not #15)
#93 := (iff #16 #88)
#41 := (ite #11 #38 f3)
#47 := (= #38 #41)
#59 := (iff #47 #58)
#91 := (iff #59 #88)
#85 := (iff #80 #58)
#89 := (iff #85 #88)
#90 := [rewrite]: #89
#86 := (iff #59 #85)
#83 := (iff #47 #80)
#79 := (iff #76 #80)
#82 := [rewrite]: #79
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#87 := [monotonicity #84]: #86
#92 := [trans #87 #90]: #91
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 #38)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#42 := (= #13 #41)
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43 #40]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#94 := [trans #63 #92]: #93
#36 := [asserted]: #16
#95 := [mp #36 #94]: #88
#105 := (not #88)
#110 := (or #10 #80 #105)
#111 := [def-axiom]: #110
#113 := [unit-resolution #111 #95]: #112
#119 := [unit-resolution #113 #118]: #10
#120 := [hypothesis]: #64
#122 := [th-lemma arith eq-propagate 0 0 #120 #119]: #121
#130 := (= #81 f3)
#128 := (= #71 f3)
#102 := (or #65 #101)
#103 := [def-axiom]: #102
#123 := [unit-resolution #103 #120]: #101
#129 := [symm #123]: #128
#126 := (= #81 #71)
#124 := (= #71 #81)
#125 := [th-lemma arith eq-propagate 1 1 #120 #119]: #124
#127 := [symm #125]: #126
#131 := [trans #127 #129]: #130
#132 := [trans #131 #122]: #80
#133 := [unit-resolution #118 #132]: false
#135 := [lemma #133]: #134
#141 := [unit-resolution #135 #140]: #65
#142 := [unit-resolution #99 #141]: #76
#144 := (or #143 #116)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #116
#147 := [th-lemma arith farkas 1 1 #137 #146]: false
#148 := [lemma #147]: #97
#154 := (or #64 #10)
#155 := [th-lemma arith farkas 1 1]: #154
#156 := [unit-resolution #155 #149]: #10
#108 := (or #58 #98)
#106 := (or #58 #98 #105)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #95]: #108
#157 := [unit-resolution #109 #156]: #98
#159 := (or #80 #158 #136)
#160 := [th-lemma arith triangle-eq]: #159
#161 := [unit-resolution #160 #157 #148]: #158
#162 := [th-lemma arith farkas 1 1 #161 #153]: false
#163 := [lemma #162]: #64
#167 := [unit-resolution #103 #163]: #101
#168 := (not #101)
#169 := (or #168 #165)
#170 := [th-lemma arith triangle-eq]: #169
#171 := [unit-resolution #170 #167]: #165
#172 := [unit-resolution #135 #163]: #80
#173 := (or #98 #100)
#174 := [th-lemma arith triangle-eq]: #173
#175 := [unit-resolution #174 #172]: #100
#176 := [unit-resolution #109 #172]: #58
[th-lemma arith farkas 2 1 1 #176 #175 #171]: false
unsat
7937f47574f63ba7fda8d181035eac5a04f1804b 114 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#38 := -1::Int
#39 := (* -1::Int f3)
#70 := (>= f3 0::Int)
#77 := (ite #70 f3 #39)
#91 := (* -1::Int #77)
#130 := (+ #39 #91)
#140 := (<= #130 0::Int)
#117 := (= #39 #77)
#71 := (not #70)
#128 := (+ f3 #91)
#129 := (<= #128 0::Int)
#116 := (= f3 #77)
#131 := [hypothesis]: #70
#118 := (or #71 #116)
#119 := [def-axiom]: #118
#132 := [unit-resolution #119 #131]: #116
#133 := (not #116)
#134 := (or #133 #129)
#135 := [th-lemma arith triangle-eq]: #134
#136 := [unit-resolution #135 #132]: #129
#86 := (>= #77 0::Int)
#85 := (not #86)
#97 := (ite #86 #77 #91)
#102 := (= #77 #97)
#105 := (not #102)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#14 := (- #12)
#13 := (< #12 0::Int)
#15 := (ite #13 #14 #12)
#16 := (= #15 #12)
#17 := (not #16)
#108 := (iff #17 #105)
#42 := (ite #10 #39 f3)
#51 := (* -1::Int #42)
#45 := (< #42 0::Int)
#56 := (ite #45 #51 #42)
#62 := (= #42 #56)
#67 := (not #62)
#106 := (iff #67 #105)
#103 := (iff #62 #102)
#100 := (= #56 #97)
#94 := (ite #85 #91 #77)
#98 := (= #94 #97)
#99 := [rewrite]: #98
#95 := (= #56 #94)
#80 := (= #42 #77)
#74 := (ite #71 #39 f3)
#78 := (= #74 #77)
#79 := [rewrite]: #78
#75 := (= #42 #74)
#72 := (iff #10 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#92 := (= #51 #91)
#93 := [monotonicity #81]: #92
#89 := (iff #45 #85)
#82 := (< #77 0::Int)
#87 := (iff #82 #85)
#88 := [rewrite]: #87
#83 := (iff #45 #82)
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#96 := [monotonicity #90 #93 #81]: #95
#101 := [trans #96 #99]: #100
#104 := [monotonicity #81 #101]: #103
#107 := [monotonicity #104]: #106
#68 := (iff #17 #67)
#65 := (iff #16 #62)
#59 := (= #56 #42)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #16 #59)
#43 := (= #12 #42)
#40 := (= #11 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#57 := (= #15 #56)
#54 := (= #14 #51)
#48 := (- #42)
#52 := (= #48 #51)
#53 := [rewrite]: #52
#49 := (= #14 #48)
#50 := [monotonicity #44]: #49
#55 := [trans #50 #53]: #54
#46 := (iff #13 #45)
#47 := [monotonicity #44]: #46
#58 := [monotonicity #47 #55 #44]: #57
#61 := [monotonicity #58 #44]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#109 := [trans #69 #107]: #108
#37 := [asserted]: #17
#110 := [mp #37 #109]: #105
#113 := (or #85 #102)
#120 := [def-axiom]: #113
#137 := [unit-resolution #120 #110]: #85
#138 := [th-lemma arith farkas -1 1 1 #131 #137 #136]: false
#139 := [lemma #138]: #71
#114 := (or #70 #117)
#115 := [def-axiom]: #114
#142 := [unit-resolution #115 #139]: #117
#143 := (not #117)
#144 := (or #143 #140)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #140
[th-lemma arith farkas 1 1 1 #139 #137 #146]: false
unsat
a868efa9f7901f51a029173b2123a5ae296196e1 57 0
#2 := false
#39 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Int)
#43 := (ite #40 f3 f4)
#51 := (* -1::Int #43)
#60 := (+ f4 #51)
#74 := (>= #60 0::Int)
#64 := (= f4 #43)
#65 := (not #40)
#63 := (= f3 #43)
#68 := (not #63)
#52 := (+ f3 #51)
#50 := (>= #52 0::Int)
#56 := (not #50)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f3)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #50)
#46 := (<= #43 f3)
#49 := (iff #46 #50)
#53 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #50)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #74)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #74
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
82b647da9fab0aa64c094a4662b5883d9bc7b999 57 0
#2 := false
#39 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Int)
#43 := (ite #40 f3 f4)
#50 := (* -1::Int #43)
#51 := (+ f4 #50)
#49 := (>= #51 0::Int)
#56 := (not #49)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f4)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #49)
#46 := (<= #43 f4)
#52 := (iff #46 #49)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f4 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f3 #50)
#68 := (>= #60 0::Int)
#63 := (= f3 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #68)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #68
#75 := [th-lemma arith farkas -1 1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #49)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
9b46d108c41d783ae69f553dfb50c9b551e3e4dc 103 0
#2 := false
#48 := 0::Int
decl f5 :: Int
#11 := f5
decl f4 :: Int
#9 := f4
#46 := -1::Int
#56 := (* -1::Int f5)
#66 := (+ f4 #56)
#67 := (<= #66 0::Int)
#70 := (ite #67 f4 f5)
#78 := (* -1::Int #70)
decl f3 :: Int
#8 := f3
#79 := (+ f3 #78)
#77 := (>= #79 0::Int)
#76 := (not #77)
#57 := (+ f3 #56)
#55 := (>= #57 0::Int)
#54 := (not #55)
#50 := (* -1::Int f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Int)
#47 := (not #49)
#60 := (and #47 #54)
#63 := (not #60)
#84 := (or #63 #76)
#87 := (not #84)
#14 := (<= f4 f5)
#15 := (ite #14 f4 f5)
#16 := (< f3 #15)
#12 := (< f3 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #76)
#73 := (< f3 #70)
#80 := (iff #73 #76)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #54)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #77
#93 := [not-or-elim #92]: #60
#95 := [and-elim #93]: #54
#101 := (+ f5 #78)
#118 := (<= #101 0::Int)
#107 := (= f5 #70)
#108 := (not #67)
#106 := (= f4 #70)
#113 := (not #106)
#103 := (+ f4 #78)
#100 := (<= #103 0::Int)
#110 := (not #100)
#94 := [and-elim #93]: #47
#98 := [hypothesis]: #100
#99 := [th-lemma arith farkas -1 -1 1 #98 #94 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #100)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #118)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #118
[th-lemma arith farkas -1 -1 1 #125 #95 #96]: false
unsat
384d72c036cb4a504daa40b92a17937fc9e8eeef 94 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#41 := 0::Int
#38 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Int)
#51 := (ite #49 f4 f3)
#42 := (<= #40 0::Int)
#45 := (ite #42 f3 f4)
#54 := (= #45 #51)
#61 := (= f4 #51)
#66 := (not #42)
#64 := (= f3 #45)
#106 := (not #64)
#68 := (= f3 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#74 := (= f3 f4)
#65 := (= f4 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f4 f3)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#98 := [trans #97 #78]: #68
#99 := [unit-resolution #76 #98]: false
#100 := [lemma #99]: #68
#102 := (= #45 f3)
#101 := [hypothesis]: #64
#103 := [symm #101]: #102
#104 := [trans #103 #100]: #54
#105 := [unit-resolution #60 #104]: false
#107 := [lemma #105]: #106
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#108 := [unit-resolution #62 #107]: #66
#110 := (or #49 #42)
#111 := [th-lemma arith farkas 1 1]: #110
#112 := [unit-resolution #111 #108]: #49
#113 := [unit-resolution #71 #112]: #61
#116 := (= #45 f4)
#109 := [unit-resolution #37 #108]: #65
#117 := [symm #109]: #116
#118 := [trans #117 #113]: #54
[unit-resolution #60 #118]: false
unsat
5df6354637212a118c8e9d3b4d92806fed1f414a 68 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#11 := (<= f3 0::Int)
#12 := (ite #11 f3 0::Int)
#13 := (= #12 0::Int)
#79 := (= f3 0::Int)
#53 := (>= f3 0::Int)
#54 := (not #53)
#62 := (or #13 #54)
#67 := (not #62)
#10 := (<= 0::Int f3)
#14 := (implies #10 #13)
#15 := (not #14)
#70 := (iff #15 #67)
#36 := (= 0::Int #12)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#68 := (iff #48 #67)
#65 := (iff #43 #62)
#59 := (or #54 #13)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #43 #59)
#57 := (iff #36 #13)
#58 := [rewrite]: #57
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#61 := [monotonicity #56 #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#71 := [trans #50 #69]: #70
#35 := [asserted]: #15
#72 := [mp #35 #71]: #67
#75 := [not-or-elim #72]: #53
#73 := (not #13)
#74 := [not-or-elim #72]: #73
#81 := (or #11 #13)
#82 := [def-axiom]: #81
#80 := [unit-resolution #82 #74]: #11
#84 := (not #11)
#77 := (or #79 #84 #54)
#78 := [th-lemma arith triangle-eq]: #77
#87 := [unit-resolution #78 #80 #75]: #79
#89 := (= #12 f3)
#83 := (= f3 #12)
#85 := (or #84 #83)
#86 := [def-axiom]: #85
#88 := [unit-resolution #86 #80]: #83
#90 := [symm #88]: #89
#91 := [trans #90 #87]: #13
[unit-resolution #74 #91]: false
unsat
830a0546cfefe0a710f523435755e68520136af4 124 0
#2 := false
#13 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#39 := -1::Int
#41 := (* -1::Int f4)
#54 := (+ f3 #41)
#55 := (<= #54 0::Int)
#58 := (ite #55 f3 f4)
#106 := (* -1::Int #58)
#107 := (+ f3 #106)
#109 := (>= #107 0::Int)
#94 := (= f3 #58)
#108 := (+ f4 #106)
#126 := (>= #108 0::Int)
#95 := (= f4 #58)
#96 := (not #55)
#137 := [hypothesis]: #96
#93 := (or #55 #95)
#90 := [def-axiom]: #93
#138 := [unit-resolution #90 #137]: #95
#129 := (not #95)
#130 := (or #129 #126)
#131 := [th-lemma arith triangle-eq]: #130
#139 := [unit-resolution #131 #138]: #126
#40 := (* -1::Int f3)
#42 := (+ #40 #41)
#12 := (+ f3 f4)
#61 := (>= #12 0::Int)
#68 := (ite #61 #12 #42)
#76 := (* -1::Int #68)
#105 := (+ #42 #76)
#125 := (<= #105 0::Int)
#98 := (= #42 #68)
#62 := (not #61)
#110 := [hypothesis]: #61
#77 := (+ #58 #76)
#78 := (<= #77 0::Int)
#83 := (not #78)
#15 := (- #12)
#14 := (< #12 0::Int)
#16 := (ite #14 #15 #12)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#17 := (<= #11 #16)
#18 := (not #17)
#86 := (iff #18 #83)
#45 := (ite #14 #42 #12)
#48 := (<= #11 #45)
#51 := (not #48)
#84 := (iff #51 #83)
#81 := (iff #48 #78)
#73 := (<= #58 #68)
#79 := (iff #73 #78)
#80 := [rewrite]: #79
#74 := (iff #48 #73)
#71 := (= #45 #68)
#65 := (ite #62 #42 #12)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #45 #65)
#63 := (iff #14 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#59 := (= #11 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#75 := [monotonicity #60 #72]: #74
#82 := [trans #75 #80]: #81
#85 := [monotonicity #82]: #84
#52 := (iff #18 #51)
#49 := (iff #17 #48)
#46 := (= #16 #45)
#43 := (= #15 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#87 := [trans #53 #85]: #86
#38 := [asserted]: #18
#88 := [mp #38 #87]: #83
#123 := (or #96 #62)
#111 := [hypothesis]: #55
#97 := (or #96 #94)
#92 := [def-axiom]: #97
#112 := [unit-resolution #92 #111]: #94
#113 := (not #94)
#114 := (or #113 #109)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112]: #109
#103 := (+ #12 #76)
#104 := (<= #103 0::Int)
#91 := (= #12 #68)
#99 := (or #62 #91)
#100 := [def-axiom]: #99
#117 := [unit-resolution #100 #110]: #91
#118 := (not #91)
#119 := (or #118 #104)
#120 := [th-lemma arith triangle-eq]: #119
#121 := [unit-resolution #120 #117]: #104
#122 := [th-lemma arith farkas 2 2 2 1 1 #121 #116 #88 #111 #110]: false
#124 := [lemma #122]: #123
#127 := [unit-resolution #124 #110]: #96
#128 := [unit-resolution #90 #127]: #95
#132 := [unit-resolution #131 #128]: #126
#133 := [th-lemma arith farkas 2 2 1 2 1 #121 #132 #127 #88 #110]: false
#134 := [lemma #133]: #62
#101 := (or #61 #98)
#102 := [def-axiom]: #101
#140 := [unit-resolution #102 #134]: #98
#141 := (not #98)
#142 := (or #141 #125)
#143 := [th-lemma arith triangle-eq]: #142
#144 := [unit-resolution #143 #140]: #125
#145 := [th-lemma arith farkas 3/2 1/2 1 1 1 #134 #137 #88 #144 #139]: false
#146 := [lemma #145]: #55
#147 := [unit-resolution #92 #146]: #94
#148 := [unit-resolution #115 #147]: #109
[th-lemma arith farkas 1/2 3/2 1 1 1 #146 #134 #88 #144 #148]: false
unsat
52f99700756069f984cbcf7e031ad81024526b39 57 0
#2 := false
#39 := 0::Int
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Int)
#43 := (ite #40 f4 f3)
#49 := (* -1::Int #43)
#50 := (+ f3 #49)
#51 := (<= #50 0::Int)
#56 := (not #51)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f3 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f4 #49)
#67 := (<= #60 0::Int)
#63 := (= f4 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #67)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #67
#75 := [th-lemma arith farkas 1 -1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #51)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
f0391470173f42c2f425051fb44610cd0d3f11da 57 0
#2 := false
#38 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#36 := -1::Int
#40 := (* -1::Int f4)
#41 := (+ f3 #40)
#39 := (>= #41 0::Int)
#43 := (ite #39 f3 f4)
#49 := (* -1::Int #43)
#60 := (+ f4 #49)
#73 := (<= #60 0::Int)
#64 := (= f4 #43)
#65 := (not #39)
#63 := (= f3 #43)
#68 := (not #63)
#50 := (+ f3 #49)
#51 := (<= #50 0::Int)
#56 := (not #51)
#10 := (<= f4 f3)
#11 := (ite #10 f3 f4)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#37 := (iff #10 #39)
#42 := [rewrite]: #37
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #51)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #39 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #73)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #73
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
3fca82fbf91597dcaf0c89ff56d31758ef9aa446 103 0
#2 := false
#48 := 0::Int
decl f3 :: Int
#8 := f3
decl f5 :: Int
#11 := f5
#46 := -1::Int
#54 := (* -1::Int f5)
#66 := (+ f3 #54)
#67 := (<= #66 0::Int)
#70 := (ite #67 f5 f3)
#76 := (* -1::Int #70)
decl f4 :: Int
#9 := f4
#77 := (+ f4 #76)
#78 := (<= #77 0::Int)
#79 := (not #78)
#55 := (+ f4 #54)
#56 := (<= #55 0::Int)
#57 := (not #56)
#50 := (* -1::Int f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Int)
#47 := (not #49)
#60 := (and #47 #57)
#63 := (not #60)
#84 := (or #63 #79)
#87 := (not #84)
#14 := (<= f3 f5)
#15 := (ite #14 f5 f3)
#16 := (< #15 f4)
#12 := (< f5 f4)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #79)
#73 := (< #70 f4)
#80 := (iff #73 #79)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #78
#93 := [not-or-elim #92]: #60
#94 := [and-elim #93]: #47
#100 := (+ f3 #76)
#119 := (>= #100 0::Int)
#107 := (= f3 #70)
#108 := (not #67)
#106 := (= f5 #70)
#113 := (not #106)
#103 := (+ f5 #76)
#101 := (>= #103 0::Int)
#110 := (not #101)
#95 := [and-elim #93]: #57
#98 := [hypothesis]: #101
#99 := [th-lemma arith farkas -1 -1 1 #98 #95 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #101)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #119)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #119
[th-lemma arith farkas -1 1 1 #125 #94 #96]: false
unsat
4cc8abc1cb14abf886035d59247a2facd4c8905d 96 0
#2 := false
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#41 := 0::Int
#38 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Int)
#51 := (ite #49 f3 f4)
#42 := (<= #40 0::Int)
#45 := (ite #42 f4 f3)
#54 := (= #45 #51)
#61 := (= f3 #51)
#66 := (not #42)
#64 := (= f4 #45)
#108 := (not #64)
#68 := (= f4 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#98 := (= f4 f3)
#74 := (= f3 f4)
#65 := (= f3 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f3 f4)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#99 := [symm #97]: #98
#100 := [trans #99 #78]: #68
#101 := [unit-resolution #76 #100]: false
#102 := [lemma #101]: #68
#104 := (= #45 f4)
#103 := [hypothesis]: #64
#105 := [symm #103]: #104
#106 := [trans #105 #102]: #54
#107 := [unit-resolution #60 #106]: false
#109 := [lemma #107]: #108
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#110 := [unit-resolution #62 #109]: #66
#112 := (or #49 #42)
#113 := [th-lemma arith farkas 1 1]: #112
#114 := [unit-resolution #113 #110]: #49
#115 := [unit-resolution #71 #114]: #61
#118 := (= #45 f3)
#111 := [unit-resolution #37 #110]: #65
#119 := [symm #111]: #118
#120 := [trans #119 #115]: #54
[unit-resolution #60 #120]: false
unsat
0dd105910a740ba84e327a554c15807cfbb51e90 66 0
#2 := false
decl f3 :: Int
#9 := f3
#8 := 0::Int
#11 := (<= f3 0::Int)
#12 := (ite #11 0::Int f3)
#36 := (= f3 #12)
#87 := (= 0::Int #12)
#81 := (= #12 0::Int)
#71 := (not #36)
#53 := (>= f3 0::Int)
#54 := (not #53)
#60 := (or #36 #54)
#65 := (not #60)
#13 := (= #12 f3)
#10 := (<= 0::Int f3)
#14 := (implies #10 #13)
#15 := (not #14)
#68 := (iff #15 #65)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#66 := (iff #48 #65)
#63 := (iff #43 #60)
#57 := (or #54 #36)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #43 #57)
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#69 := [trans #50 #67]: #68
#35 := [asserted]: #15
#70 := [mp #35 #69]: #65
#72 := [not-or-elim #70]: #71
#79 := (or #11 #36)
#80 := [def-axiom]: #79
#78 := [unit-resolution #80 #72]: #11
#82 := (not #11)
#83 := (or #82 #81)
#84 := [def-axiom]: #83
#75 := [unit-resolution #84 #78]: #81
#88 := [symm #75]: #87
#77 := (= f3 0::Int)
#73 := [not-or-elim #70]: #53
#76 := (or #77 #82 #54)
#85 := [th-lemma arith triangle-eq]: #76
#86 := [unit-resolution #85 #78 #73]: #77
#89 := [trans #86 #88]: #36
[unit-resolution #72 #89]: false
unsat
6d096cc8e5aead61fa59d3a9e14375705bde559e 214 0
#2 := false
#9 := 0::Int
decl f4 :: Int
#14 := f4
#43 := -1::Int
#58 := (* -1::Int f4)
#94 := (>= f4 0::Int)
#101 := (ite #94 f4 #58)
#106 := (* -1::Int #101)
#161 := (+ #58 #106)
#183 := (<= #161 0::Int)
#137 := (= #58 #101)
#95 := (not #94)
decl f3 :: Int
#8 := f3
#112 := (+ f3 #58)
#113 := (<= #112 0::Int)
#116 := (ite #113 f4 f3)
#155 := (* -1::Int #116)
#156 := (+ f4 #155)
#157 := (<= #156 0::Int)
#158 := (+ f3 #155)
#193 := (<= #158 0::Int)
#149 := (= f3 #116)
#150 := (not #113)
#148 := (= f4 #116)
#195 := [hypothesis]: #113
#151 := (or #150 #148)
#152 := [def-axiom]: #151
#196 := [unit-resolution #152 #195]: #148
#197 := (not #148)
#198 := (or #197 #157)
#199 := [th-lemma arith triangle-eq]: #198
#200 := [unit-resolution #199 #196]: #157
#179 := (not #157)
#191 := (or #95 #179)
#159 := (+ f4 #106)
#160 := (<= #159 0::Int)
#136 := (= f4 #101)
#165 := [hypothesis]: #94
#144 := (or #95 #136)
#145 := [def-axiom]: #144
#166 := [unit-resolution #145 #165]: #136
#167 := (not #136)
#168 := (or #167 #160)
#169 := [th-lemma arith triangle-eq]: #168
#170 := [unit-resolution #169 #166]: #160
#44 := (* -1::Int f3)
#79 := (>= f3 0::Int)
#86 := (ite #79 f3 #44)
#91 := (* -1::Int #86)
#164 := (+ #44 #91)
#182 := (<= #164 0::Int)
#141 := (= #44 #86)
#80 := (not #79)
#177 := [hypothesis]: #157
#180 := (or #80 #95 #179)
#125 := (+ #101 #116)
#126 := (+ #86 #125)
#123 := (>= #126 0::Int)
#129 := (not #123)
#19 := (<= f3 f4)
#20 := (ite #19 f4 f3)
#16 := (- f4)
#15 := (< f4 0::Int)
#17 := (ite #15 #16 f4)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#13 := (- #12)
#18 := (- #13 #17)
#21 := (<= #18 #20)
#22 := (not #21)
#132 := (iff #22 #129)
#61 := (ite #15 #58 f4)
#67 := (* -1::Int #61)
#47 := (ite #10 #44 f3)
#53 := (* -1::Int #47)
#68 := (+ #53 #67)
#73 := (<= #68 #20)
#76 := (not #73)
#130 := (iff #76 #129)
#127 := (iff #73 #123)
#109 := (+ #91 #106)
#119 := (<= #109 #116)
#122 := (iff #119 #123)
#124 := [rewrite]: #122
#120 := (iff #73 #119)
#117 := (= #20 #116)
#114 := (iff #19 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#110 := (= #68 #109)
#107 := (= #67 #106)
#104 := (= #61 #101)
#98 := (ite #95 #58 f4)
#102 := (= #98 #101)
#103 := [rewrite]: #102
#99 := (= #61 #98)
#96 := (iff #15 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#105 := [trans #100 #103]: #104
#108 := [monotonicity #105]: #107
#92 := (= #53 #91)
#89 := (= #47 #86)
#83 := (ite #80 #44 f3)
#87 := (= #83 #86)
#88 := [rewrite]: #87
#84 := (= #47 #83)
#81 := (iff #10 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#111 := [monotonicity #93 #108]: #110
#121 := [monotonicity #111 #118]: #120
#128 := [trans #121 #124]: #127
#131 := [monotonicity #128]: #130
#77 := (iff #22 #76)
#74 := (iff #21 #73)
#71 := (= #18 #68)
#64 := (- #53 #61)
#69 := (= #64 #68)
#70 := [rewrite]: #69
#65 := (= #18 #64)
#62 := (= #17 #61)
#59 := (= #16 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#56 := (= #13 #53)
#50 := (- #47)
#54 := (= #50 #53)
#55 := [rewrite]: #54
#51 := (= #13 #50)
#48 := (= #12 #47)
#45 := (= #11 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#57 := [trans #52 #55]: #56
#66 := [monotonicity #57 #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#133 := [trans #78 #131]: #132
#42 := [asserted]: #22
#134 := [mp #42 #133]: #129
#162 := (+ f3 #91)
#163 := (<= #162 0::Int)
#140 := (= f3 #86)
#171 := [hypothesis]: #79
#142 := (or #80 #140)
#143 := [def-axiom]: #142
#172 := [unit-resolution #143 #171]: #140
#173 := (not #140)
#174 := (or #173 #163)
#175 := [th-lemma arith triangle-eq]: #174
#176 := [unit-resolution #175 #172]: #163
#178 := [th-lemma arith farkas -2 1 -1 1 1 1 #165 #177 #171 #176 #134 #170]: false
#181 := [lemma #178]: #180
#184 := [unit-resolution #181 #165 #177]: #80
#138 := (or #79 #141)
#139 := [def-axiom]: #138
#185 := [unit-resolution #139 #184]: #141
#186 := (not #141)
#187 := (or #186 #182)
#188 := [th-lemma arith triangle-eq]: #187
#189 := [unit-resolution #188 #185]: #182
#190 := [th-lemma arith farkas 2 1 1 1 1 1 #165 #177 #134 #184 #189 #170]: false
#192 := [lemma #190]: #191
#201 := [unit-resolution #192 #200]: #95
#146 := (or #94 #137)
#147 := [def-axiom]: #146
#202 := [unit-resolution #147 #201]: #137
#203 := (not #137)
#204 := (or #203 #183)
#205 := [th-lemma arith triangle-eq]: #204
#206 := [unit-resolution #205 #202]: #183
#207 := (or #80 #94 #150)
#208 := [th-lemma arith assign-bounds 1 1]: #207
#209 := [unit-resolution #208 #201 #195]: #80
#210 := [unit-resolution #139 #209]: #141
#211 := [unit-resolution #188 #210]: #182
#212 := [th-lemma arith farkas 1 1 1 1 1 #200 #134 #209 #211 #206]: false
#213 := [lemma #212]: #150
#153 := (or #113 #149)
#154 := [def-axiom]: #153
#224 := [unit-resolution #154 #213]: #149
#225 := (not #149)
#226 := (or #225 #193)
#227 := [th-lemma arith triangle-eq]: #226
#228 := [unit-resolution #227 #224]: #193
#231 := (not #193)
#232 := (or #157 #113 #231)
#233 := [th-lemma arith assign-bounds 1 1]: #232
#234 := [unit-resolution #233 #213 #228]: #157
#235 := [unit-resolution #192 #234]: #95
#236 := [unit-resolution #147 #235]: #137
#237 := [unit-resolution #205 #236]: #183
#216 := [hypothesis]: #80
#217 := (or #95 #79 #113)
#218 := [th-lemma arith assign-bounds 1 1]: #217
#219 := [unit-resolution #218 #216 #213]: #95
#220 := [unit-resolution #147 #219]: #137
#221 := [unit-resolution #205 #220]: #183
#222 := [unit-resolution #139 #216]: #141
#223 := [unit-resolution #188 #222]: #182
#229 := [th-lemma arith farkas 1 1 1 1 1 1 #216 #213 #228 #134 #223 #221]: false
#230 := [lemma #229]: #79
#238 := [unit-resolution #143 #230]: #140
#239 := [unit-resolution #175 #238]: #163
[th-lemma arith farkas 1 1 1 1 1 1 #213 #228 #134 #230 #239 #237]: false
unsat
670f014c1852b6081232410eed442ca5e4374561 56 0
#2 := false
#11 := 1::Int
decl f3 :: Int
#9 := f3
#14 := (= f3 1::Int)
#12 := (<= f3 1::Int)
#8 := 0::Int
#44 := (<= f3 0::Int)
#45 := (not #44)
#51 := (and #12 #45)
#56 := (not #51)
#62 := (or #14 #56)
#67 := (not #62)
#10 := (< 0::Int f3)
#13 := (and #10 #12)
#15 := (implies #13 #14)
#16 := (not #15)
#70 := (iff #16 #67)
#37 := (not #13)
#38 := (or #37 #14)
#41 := (not #38)
#68 := (iff #41 #67)
#65 := (iff #38 #62)
#59 := (or #56 #14)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #38 #59)
#57 := (iff #37 #56)
#54 := (iff #13 #51)
#48 := (and #45 #12)
#52 := (iff #48 #51)
#53 := [rewrite]: #52
#49 := (iff #13 #48)
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#55 := [trans #50 #53]: #54
#58 := [monotonicity #55]: #57
#61 := [monotonicity #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#71 := [trans #43 #69]: #70
#36 := [asserted]: #16
#72 := [mp #36 #71]: #67
#75 := [not-or-elim #72]: #51
#76 := [and-elim #75]: #12
#77 := [and-elim #75]: #45
#88 := [th-lemma arith eq-propagate 0 0 #77 #76]: #14
#73 := (not #14)
#74 := [not-or-elim #72]: #73
[unit-resolution #74 #88]: false
unsat
2c89038e9e5248b9d7775a1c2cccda0081ae4afd 18 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := (<= f3 f3)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
ce89535ab1564731d3a25470ddb514abb6a5df0e 51 0
#2 := false
decl f4 :: Int
#9 := f4
#11 := 3::Int
#13 := (* 3::Int f4)
decl f3 :: Int
#8 := f3
#12 := (* 3::Int f3)
#14 := (<= #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#70 := (iff #16 false)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#68 := (iff #41 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #41 #63)
#61 := (iff #38 true)
#47 := 0::Int
#44 := -1::Int
#45 := (* -1::Int f4)
#46 := (+ f3 #45)
#48 := (<= #46 0::Int)
#51 := (not #48)
#56 := (or #51 #48)
#59 := (iff #56 true)
#60 := [rewrite]: #59
#57 := (iff #38 #56)
#54 := (iff #14 #48)
#55 := [rewrite]: #54
#52 := (iff #37 #51)
#49 := (iff #10 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#58 := [monotonicity #53 #55]: #57
#62 := [trans #58 #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#71 := [trans #43 #69]: #70
#36 := [asserted]: #16
[mp #36 #71]: false
unsat
6ee55a0087180d6d5b23379fd148c763bbe9469a 56 0
#2 := false
decl f4 :: Int
#9 := f4
#11 := 3::Int
#13 := (* 3::Int f4)
decl f3 :: Int
#8 := f3
#12 := (* 3::Int f3)
#14 := (< #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#75 := (iff #16 false)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#73 := (iff #41 false)
#1 := true
#68 := (not true)
#71 := (iff #68 false)
#72 := [rewrite]: #71
#69 := (iff #41 #68)
#66 := (iff #38 true)
#46 := 0::Int
#44 := -1::Int
#48 := (* -1::Int f4)
#49 := (+ f3 #48)
#47 := (>= #49 0::Int)
#45 := (not #47)
#60 := (or #47 #45)
#64 := (iff #60 true)
#65 := [rewrite]: #64
#62 := (iff #38 #60)
#61 := (iff #14 #45)
#59 := [rewrite]: #61
#57 := (iff #37 #47)
#52 := (not #45)
#55 := (iff #52 #47)
#56 := [rewrite]: #55
#53 := (iff #37 #52)
#50 := (iff #10 #45)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#63 := [monotonicity #58 #59]: #62
#67 := [trans #63 #65]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#76 := [trans #43 #74]: #75
#36 := [asserted]: #16
[mp #36 #76]: false
unsat
8db8a95cca6e7fe17cb2a4cd6041ce96b6b7f6c4 52 0
#2 := false
#43 := 0::Int
decl f4 :: Int
#9 := f4
#41 := -1::Int
#45 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#46 := (+ f3 #45)
#56 := (<= #46 0::Int)
#69 := (not #56)
#44 := (>= #46 0::Int)
#59 := (or #44 #56)
#62 := (not #59)
#11 := (<= f3 f4)
#10 := (< f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#65 := (iff #13 #62)
#34 := (not #10)
#35 := (or #34 #11)
#38 := (not #35)
#63 := (iff #38 #62)
#60 := (iff #35 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#54 := (iff #34 #44)
#42 := (not #44)
#49 := (not #42)
#52 := (iff #49 #44)
#53 := [rewrite]: #52
#50 := (iff #34 #49)
#47 := (iff #10 #42)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#61 := [monotonicity #55 #58]: #60
#64 := [monotonicity #61]: #63
#39 := (iff #13 #38)
#36 := (iff #12 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#66 := [trans #40 #64]: #65
#33 := [asserted]: #13
#67 := [mp #33 #66]: #62
#70 := [not-or-elim #67]: #69
#68 := [not-or-elim #67]: #42
#78 := (or #56 #44)
#79 := [th-lemma arith farkas 1 1]: #78
#80 := [unit-resolution #79 #68]: #56
[unit-resolution #80 #70]: false
unsat
520cf64d6077f711a93c13c6d282b3380025b7de 73 0
#2 := false
#61 := 0::Int
decl f4 :: Int
#9 := f4
#54 := -1::Int
#55 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#56 := (+ f3 #55)
#62 := (>= #56 0::Int)
#57 := (<= #56 -1::Int)
#82 := (not #57)
#60 := (not #62)
#89 := [hypothesis]: #60
#87 := (or #82 #62)
#72 := (iff #57 #62)
#11 := 1::Int
#12 := (+ f3 1::Int)
#13 := (<= #12 f4)
#10 := (< f3 f4)
#14 := (iff #10 #13)
#15 := (not #14)
#75 := (iff #15 #72)
#48 := (not #10)
#36 := (+ 1::Int f3)
#39 := (<= #36 f4)
#49 := (iff #39 #48)
#73 := (iff #49 #72)
#70 := (iff #48 #62)
#65 := (not #60)
#68 := (iff #65 #62)
#69 := [rewrite]: #68
#66 := (iff #48 #65)
#63 := (iff #10 #60)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#58 := (iff #39 #57)
#59 := [rewrite]: #58
#74 := [monotonicity #59 #71]: #73
#52 := (iff #15 #49)
#42 := (iff #10 #39)
#45 := (not #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #15 #45)
#43 := (iff #14 #42)
#40 := (iff #13 #39)
#37 := (= #12 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#76 := [trans #53 #74]: #75
#35 := [asserted]: #15
#77 := [mp #35 #76]: #72
#83 := (not #72)
#79 := (or #82 #62 #83)
#80 := [def-axiom]: #79
#88 := [unit-resolution #80 #77]: #87
#90 := [unit-resolution #88 #89]: #82
#91 := [th-lemma arith farkas 1 1 #89 #90]: false
#92 := [lemma #91]: #62
#93 := (or #60 #82)
#94 := [th-lemma arith farkas 1 1]: #93
#95 := [unit-resolution #94 #92]: #82
#86 := (or #57 #60)
#84 := (or #57 #60 #83)
#85 := [def-axiom]: #84
#81 := [unit-resolution #85 #77]: #86
[unit-resolution #81 #95 #92]: false
unsat
6728a1b6710185d5f5ea081e6ce67e8aed169134 15 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := (< f3 f3)
#10 := (not #9)
#11 := (not #10)
#36 := (iff #11 false)
#34 := (iff #9 false)
#35 := [rewrite]: #34
#32 := (iff #11 #9)
#33 := [rewrite]: #32
#37 := [trans #33 #35]: #36
#31 := [asserted]: #11
[mp #31 #37]: false
unsat
520ba5bbc17bf10c5d1972b6fdcb0044f080e0c0 75 0
#2 := false
#56 := 0::Int
decl f5 :: Int
#11 := f5
#53 := -1::Int
#54 := (* -1::Int f5)
decl f4 :: Int
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Int)
#67 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#68 := (+ f3 #67)
#69 := (<= #68 0::Int)
#72 := (not #69)
#63 := (+ f3 #54)
#64 := (<= #63 0::Int)
#60 := (not #57)
#81 := (or #60 #64 #72)
#86 := (not #81)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#89 := (iff #16 #86)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#87 := (iff #50 #86)
#84 := (iff #45 #81)
#75 := (or #60 #64)
#78 := (or #72 #75)
#82 := (iff #78 #81)
#83 := [rewrite]: #82
#79 := (iff #45 #78)
#76 := (iff #38 #75)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#77 := [monotonicity #62 #66]: #76
#73 := (iff #44 #72)
#70 := (iff #10 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#90 := [trans #52 #88]: #89
#36 := [asserted]: #16
#91 := [mp #36 #90]: #86
#92 := [not-or-elim #91]: #57
#93 := (not #64)
#94 := [not-or-elim #91]: #93
#95 := [not-or-elim #91]: #69
[th-lemma arith farkas 1 -1 1 #95 #94 #92]: false
unsat
dcf1c788b6911dd9d0d36f4c26d7c585e6116ff5 80 0
#2 := false
#56 := 0::Int
decl f5 :: Int
#11 := f5
#53 := -1::Int
#54 := (* -1::Int f5)
decl f4 :: Int
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Int)
#69 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#70 := (+ f3 #69)
#68 := (>= #70 0::Int)
#63 := (+ f3 #54)
#64 := (<= #63 0::Int)
#60 := (not #57)
#86 := (or #60 #64 #68)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #60 #64)
#83 := (or #68 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#82 := [monotonicity #62 #66]: #81
#78 := (iff #44 #68)
#67 := (not #68)
#73 := (not #67)
#76 := (iff #73 #68)
#77 := [rewrite]: #76
#74 := (iff #44 #73)
#71 := (iff #10 #67)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#97 := [not-or-elim #96]: #57
#98 := (not #64)
#99 := [not-or-elim #96]: #98
#100 := [not-or-elim #96]: #67
[th-lemma arith farkas 1 1 1 #100 #99 #97]: false
unsat
c158570854bd04b541514c1e42ef7c6a80910ace 80 0
#2 := false
#55 := 0::Int
decl f4 :: Int
#9 := f4
#53 := -1::Int
#72 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#73 := (+ f3 #72)
#74 := (<= #73 0::Int)
#77 := (not #74)
decl f5 :: Int
#11 := f5
#57 := (* -1::Int f5)
#68 := (+ f3 #57)
#69 := (<= #68 0::Int)
#58 := (+ f4 #57)
#56 := (>= #58 0::Int)
#86 := (or #56 #69 #77)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #56 #69)
#83 := (or #77 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#70 := (iff #13 #69)
#71 := [rewrite]: #70
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#82 := [monotonicity #67 #71]: #81
#78 := (iff #44 #77)
#75 := (iff #10 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#100 := [not-or-elim #96]: #74
#98 := (not #69)
#99 := [not-or-elim #96]: #98
#97 := [not-or-elim #96]: #54
[th-lemma arith farkas 1 1 1 #97 #99 #100]: false
unsat
e80ef8fa1f5f7f731207887aafb3d73399a22a53 85 0
#2 := false
#55 := 0::Int
decl f5 :: Int
#11 := f5
#53 := -1::Int
#57 := (* -1::Int f5)
decl f3 :: Int
#8 := f3
#70 := (+ f3 #57)
#69 := (>= #70 0::Int)
decl f4 :: Int
#9 := f4
#75 := (* -1::Int f4)
#76 := (+ f3 #75)
#74 := (>= #76 0::Int)
#68 := (not #69)
#58 := (+ f4 #57)
#56 := (>= #58 0::Int)
#92 := (or #56 #68 #74)
#97 := (not #92)
#13 := (< f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#100 := (iff #16 #97)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#98 := (iff #50 #97)
#95 := (iff #45 #92)
#86 := (or #56 #68)
#89 := (or #74 #86)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #45 #89)
#87 := (iff #38 #86)
#71 := (iff #13 #68)
#72 := [rewrite]: #71
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#88 := [monotonicity #67 #72]: #87
#84 := (iff #44 #74)
#73 := (not #74)
#79 := (not #73)
#82 := (iff #79 #74)
#83 := [rewrite]: #82
#80 := (iff #44 #79)
#77 := (iff #10 #73)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#91 := [monotonicity #85 #88]: #90
#96 := [trans #91 #94]: #95
#99 := [monotonicity #96]: #98
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#101 := [trans #52 #99]: #100
#36 := [asserted]: #16
#102 := [mp #36 #101]: #97
#104 := [not-or-elim #102]: #69
#103 := [not-or-elim #102]: #54
#105 := [not-or-elim #102]: #73
[th-lemma arith farkas 1 1 1 #105 #103 #104]: false
unsat
dc84c7d91507b2575d96fd3dc930644975196557 69 0
#2 := false
#47 := 0::Int
decl f5 :: Int
#11 := f5
#45 := -1::Int
#54 := (* -1::Int f5)
decl f3 :: Int
#8 := f3
#65 := (+ f3 #54)
#66 := (<= #65 0::Int)
#67 := (not #66)
decl f4 :: Int
#9 := f4
#55 := (+ f4 #54)
#53 := (>= #55 0::Int)
#56 := (not #53)
#49 := (* -1::Int f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Int)
#46 := (not #48)
#59 := (and #46 #56)
#62 := (not #59)
#77 := (or #62 #66)
#80 := (not #77)
#14 := (< f5 f3)
#15 := (not #14)
#12 := (< f4 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (not #16)
#83 := (iff #17 #80)
#38 := (not #13)
#39 := (or #38 #15)
#42 := (not #39)
#81 := (iff #42 #80)
#78 := (iff #39 #77)
#75 := (iff #15 #66)
#70 := (not #67)
#73 := (iff #70 #66)
#74 := [rewrite]: #73
#71 := (iff #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#63 := (iff #38 #62)
#60 := (iff #13 #59)
#57 := (iff #12 #56)
#58 := [rewrite]: #57
#51 := (iff #10 #46)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#79 := [monotonicity #64 #76]: #78
#82 := [monotonicity #79]: #81
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#84 := [trans #44 #82]: #83
#37 := [asserted]: #17
#85 := [mp #37 #84]: #80
#89 := [not-or-elim #85]: #67
#86 := [not-or-elim #85]: #59
#88 := [and-elim #86]: #56
#87 := [and-elim #86]: #46
[th-lemma arith farkas 1 1 1 #87 #88 #89]: false
unsat
f773d363f37e932f4532a69daff94825fd8ced7d 17 0
#2 := false
#8 := 0::Real
#9 := (= 0::Real 0::Real)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
22555a704748c0627782ea8aab11b16b25bd4dbb 25 0
#2 := false
#8 := 0::Real
#9 := (- 0::Real)
#10 := (= 0::Real #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= 0::Real 0::Real)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#32 := (= #9 0::Real)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
0f47740e84f3a80bb9157630977b548c62848ac2 17 0
#2 := false
#8 := 1::Real
#9 := (= 1::Real 1::Real)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
267141fda78839fe6990cc2abf9a17976b208b6d 34 0
#2 := false
#8 := 1::Real
#9 := (- 1::Real)
#10 := (= #9 1::Real)
#11 := (not #10)
#12 := (not #11)
#55 := (iff #12 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#48 := (iff #11 true)
#43 := (not false)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#41 := (iff #10 false)
#33 := -1::Real
#36 := (= -1::Real 1::Real)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (= #9 -1::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#32 := [asserted]: #12
[mp #32 #56]: false
unsat
1cceccf830fba7a0f6a7b417cdb35acf58e3b386 18 0
#2 := false
#9 := 1::Real
#8 := 0::Real
#10 := (< 0::Real 1::Real)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
cd5f0992fc4c2527863e91d7965d5cd43f959c45 18 0
#2 := false
#9 := 1::Real
#8 := 0::Real
#10 := (<= 0::Real 1::Real)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
d3dc3081a8407dc4d182c64981740ecde7c13dde 40 0
#2 := false
#12 := 567::Real
#10 := 345::Real
#8 := 123::Real
#9 := (- 123::Real)
#11 := (+ #9 345::Real)
#13 := (< #11 567::Real)
#14 := (not #13)
#61 := (iff #14 false)
#41 := 222::Real
#46 := (< 222::Real 567::Real)
#49 := (not #46)
#59 := (iff #49 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #49 #54)
#52 := (iff #46 true)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#44 := (= #11 222::Real)
#35 := -123::Real
#38 := (+ -123::Real 345::Real)
#42 := (= #38 222::Real)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #9 -123::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#62 := [trans #51 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
a9f49d44404eb27b3a936d2ae021bcf936255755 18 0
#2 := false
#9 := 2345678901::Real
#8 := 123456789::Real
#10 := (< 123456789::Real 2345678901::Real)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
a5a30c12b002b073c6704cbd0e9c0bff0c2be9ce 30 0
#2 := false
#10 := 2345678901::Real
#8 := 123456789::Real
#9 := (- 123456789::Real)
#11 := (< #9 2345678901::Real)
#12 := (not #11)
#51 := (iff #12 false)
#33 := -123456789::Real
#36 := (< -123456789::Real 2345678901::Real)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#34 := (= #9 -123456789::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
503a960ec2242e052830c7ef31b928dcfd2a74cf 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 0::Real
#10 := (+ f3 0::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
770f240de3310b0d6a8016479beff839eb224176 26 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 0::Real
#10 := (+ 0::Real f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
5d138ec76d5878a62b190baf9223adf9c458ea69 29 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#11 := (+ f4 f3)
#10 := (+ f3 f4)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
9e4deb91672100910bd4e78f0dd93df4413e0265 33 0
#2 := false
decl f5 :: Real
#10 := f5
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#13 := (+ f3 f4)
#14 := (+ #13 f5)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#51 := (iff #16 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #16 #46)
#44 := (iff #15 true)
#39 := (= #12 #12)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #15 #39)
#37 := (= #14 #12)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#36 := [asserted]: #16
[mp #36 #52]: false
unsat
fa5df4da5927766ac24749e94b2f4590c5f1f525 45 0
#2 := false
decl f4 :: Real
#9 := f4
#13 := (- f4)
decl f3 :: Real
#8 := f3
#14 := (= f3 #13)
#11 := 0::Real
#10 := (+ f3 f4)
#12 := (= #10 0::Real)
#15 := (iff #12 #14)
#16 := (not #15)
#65 := (iff #16 false)
#50 := (not #12)
#37 := -1::Real
#38 := (* -1::Real f4)
#41 := (= f3 #38)
#51 := (iff #41 #50)
#63 := (iff #51 false)
#58 := (iff #12 #50)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #51 #58)
#56 := (iff #41 #12)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#54 := (iff #16 #51)
#44 := (iff #12 #41)
#47 := (not #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #16 #47)
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#39 := (= #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#66 := [trans #55 #64]: #65
#36 := [asserted]: #16
[mp #36 #66]: false
unsat
780bbf25f5cec016b113005169e826e8a8b1ab35 26 0
#2 := false
#8 := 1::Real
#9 := (- 1::Real)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -1::Real
#35 := (= -1::Real -1::Real)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -1::Real)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
605574d3c38169fc6d9055703879e99ec228f28e 26 0
#2 := false
#8 := 3::Real
#9 := (- 3::Real)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -3::Real
#35 := (= -3::Real -3::Real)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -3::Real)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
3decedf8f758750dd070188834780bf7cdda6699 58 0
#2 := false
decl f3 :: Real
#8 := f3
#10 := 0::Real
#12 := (< 0::Real f3)
#9 := (- f3)
#11 := (< #9 0::Real)
#13 := (iff #11 #12)
#14 := (not #13)
#79 := (iff #14 false)
#53 := (not #12)
#35 := -1::Real
#36 := (* -1::Real f3)
#39 := (< #36 0::Real)
#54 := (iff #39 #53)
#77 := (iff #54 false)
#59 := (<= f3 0::Real)
#60 := (not #59)
#72 := (iff #60 #59)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #54 #72)
#70 := (iff #53 #59)
#65 := (not #60)
#68 := (iff #65 #59)
#69 := [rewrite]: #68
#66 := (iff #53 #65)
#63 := (iff #12 #60)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #39 #60)
#62 := [rewrite]: #61
#74 := [monotonicity #62 #71]: #73
#78 := [trans #74 #76]: #77
#57 := (iff #14 #54)
#45 := (iff #12 #39)
#50 := (not #45)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #45)
#42 := (iff #39 #12)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #13 #42)
#40 := (iff #11 #39)
#37 := (= #9 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#49 := [trans #44 #47]: #48
#52 := [monotonicity #49]: #51
#58 := [trans #52 #56]: #57
#80 := [trans #58 #78]: #79
#34 := [asserted]: #14
[mp #34 #80]: false
unsat
48e8235cc2ab6c0c7ee0a64720a7854069344306 61 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#11 := (- f3)
#12 := (< #11 0::Real)
#10 := (< 0::Real f3)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Real
#36 := (* -1::Real f3)
#39 := (< #36 0::Real)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (<= f3 0::Real)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
101fc723faf759de5c8555614c6008d7a3b2f51c 61 0
#2 := false
decl f3 :: Real
#8 := f3
#11 := (- f3)
#9 := 0::Real
#12 := (< 0::Real #11)
#10 := (< f3 0::Real)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Real
#36 := (* -1::Real f3)
#39 := (< 0::Real #36)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (>= f3 0::Real)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
283d9e9fd5ac4371653f698859bf2cc218d93907 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 0::Real
#10 := (- f3 0::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
377a985423ac0b4a4878b6539f76e0f6387ebc74 32 0
#2 := false
decl f3 :: Real
#9 := f3
#11 := (- f3)
#8 := 0::Real
#10 := (- 0::Real f3)
#12 := (= #10 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := -1::Real
#35 := (* -1::Real f3)
#40 := (= #35 #35)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (= #11 #35)
#39 := [rewrite]: #38
#36 := (= #10 #35)
#37 := [rewrite]: #36
#42 := [monotonicity #37 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
17b8ad92fed9af085980d2ab3e2bbe7070317afb 64 0
#2 := false
#12 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#11 := (- f3 f4)
#13 := (< #11 0::Real)
#10 := (< f3 f4)
#14 := (implies #10 #13)
#15 := (not #14)
#83 := (iff #15 false)
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#41 := (< #38 0::Real)
#47 := (not #10)
#48 := (or #47 #41)
#53 := (not #48)
#81 := (iff #53 false)
#1 := true
#76 := (not true)
#79 := (iff #76 false)
#80 := [rewrite]: #79
#77 := (iff #53 #76)
#74 := (iff #48 true)
#57 := (>= #38 0::Real)
#56 := (not #57)
#69 := (or #57 #56)
#72 := (iff #69 true)
#73 := [rewrite]: #72
#70 := (iff #48 #69)
#67 := (iff #41 #56)
#68 := [rewrite]: #67
#65 := (iff #47 #57)
#60 := (not #56)
#63 := (iff #60 #57)
#64 := [rewrite]: #63
#61 := (iff #47 #60)
#58 := (iff #10 #56)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#71 := [monotonicity #66 #68]: #70
#75 := [trans #71 #73]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#44 := (implies #10 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #14 #44)
#42 := (iff #13 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#84 := [trans #55 #82]: #83
#35 := [asserted]: #15
[mp #35 #84]: false
unsat
f9d032808f895312ecd1abf7bac4681d8af02f4c 44 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#11 := (- f4 f3)
#12 := (- #11)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#63 := (iff #14 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #14 #58)
#56 := (iff #13 true)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#51 := (= #37 #37)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (= #12 #37)
#40 := (* -1::Real f3)
#41 := (+ #40 f4)
#44 := (- #41)
#47 := (= #44 #37)
#48 := [rewrite]: #47
#45 := (= #12 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#38 := (= #10 #37)
#39 := [rewrite]: #38
#53 := [monotonicity #39 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#34 := [asserted]: #14
[mp #34 #64]: false
unsat
f5fd5763c194a7060b7d3c31354e945c4bbe4814 42 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#11 := (- f4)
#12 := (+ #11 f3)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#61 := (iff #14 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #14 #56)
#54 := (iff #13 true)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#49 := (= #37 #37)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #13 #49)
#47 := (= #12 #37)
#42 := (+ #36 f3)
#45 := (= #42 #37)
#46 := [rewrite]: #45
#43 := (= #12 #42)
#40 := (= #11 #36)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#38 := (= #10 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
95caa8e9312490ba9ace8256d848ea1af589c930 48 0
#2 := false
decl f5 :: Real
#11 := f5
decl f4 :: Real
#9 := f4
#13 := (+ f4 f5)
decl f3 :: Real
#8 := f3
#14 := (- f3 #13)
#10 := (- f3 f4)
#12 := (- #10 f5)
#15 := (= #12 #14)
#16 := (not #15)
#66 := (iff #16 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #16 #61)
#59 := (iff #15 true)
#37 := -1::Real
#45 := (* -1::Real f5)
#38 := (* -1::Real f4)
#46 := (+ #38 #45)
#47 := (+ f3 #46)
#54 := (= #47 #47)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #15 #54)
#52 := (= #14 #47)
#53 := [rewrite]: #52
#50 := (= #12 #47)
#39 := (+ f3 #38)
#42 := (- #39 f5)
#48 := (= #42 #47)
#49 := [rewrite]: #48
#43 := (= #12 #42)
#40 := (= #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#51 := [trans #44 #49]: #50
#56 := [monotonicity #51 #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#36 := [asserted]: #16
[mp #36 #67]: false
unsat
9268db787809f0a583b8abe2865d617f6de5f8b3 26 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#10 := (* f3 0::Real)
#11 := (= #10 0::Real)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Real 0::Real)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
cfd2d609b4c2acdff8e2c92b7abeb35796f42074 26 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#10 := (* 0::Real f3)
#11 := (= #10 0::Real)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Real 0::Real)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
47353b900bc68ce2e886059dcd04ac50fb7094fa 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 1::Real
#10 := (* f3 1::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
8040bc6506c5d4dcc023aa72dae05d2d6e32e35f 26 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 1::Real
#10 := (* 1::Real f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
4677e87ab7e0b998d5363f7ebb364e3f3c6ab1e8 40 0
#2 := false
decl f3 :: Real
#8 := f3
#12 := (- f3)
#9 := 1::Real
#10 := (- 1::Real)
#11 := (* f3 #10)
#13 := (= #11 #12)
#14 := (not #13)
#60 := (iff #14 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#35 := -1::Real
#41 := (* -1::Real f3)
#48 := (= #41 #41)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (= #12 #41)
#47 := [rewrite]: #46
#44 := (= #11 #41)
#38 := (* f3 -1::Real)
#42 := (= #38 #41)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #10 -1::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#50 := [monotonicity #45 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#34 := [asserted]: #14
[mp #34 #61]: false
unsat
492e40909f53004b845757b180e8cdede75e5952 35 0
#2 := false
decl f3 :: Real
#10 := f3
#12 := (- f3)
#8 := 1::Real
#9 := (- 1::Real)
#11 := (* #9 f3)
#13 := (= #11 #12)
#14 := (not #13)
#55 := (iff #14 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #14 #50)
#48 := (iff #13 true)
#35 := -1::Real
#38 := (* -1::Real f3)
#43 := (= #38 #38)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (= #12 #38)
#42 := [rewrite]: #41
#39 := (= #11 #38)
#36 := (= #9 -1::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [monotonicity #40 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#34 := [asserted]: #14
[mp #34 #56]: false
unsat
b2af4404d7b254702c70ed75613252bd5ca4ca66 28 0
#2 := false
#8 := 3::Real
decl f3 :: Real
#9 := f3
#11 := (* f3 3::Real)
#10 := (* 3::Real f3)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
7f36309c810a189f03d30657a767073413e0a633 30 0
#2 := false
#8 := 1::Real
#9 := 2::Real
#10 := (/ 1::Real 2::Real)
#11 := (< #10 1::Real)
#12 := (not #11)
#51 := (iff #12 false)
#33 := 1/2::Real
#36 := (< 1/2::Real 1::Real)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#34 := (= #10 1/2::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
ccf056a1d000a2f5db9acd154a1e12ae03fe47c3 27 0
#2 := false
#9 := 3::Real
#8 := 1::Real
#10 := (/ 1::Real 3::Real)
#11 := (= #10 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#33 := 1/3::Real
#36 := (= 1/3::Real 1/3::Real)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (= #10 1/3::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#32 := [asserted]: #12
[mp #32 #49]: false
unsat
0561d9f0efd34ebe23cfd267e2f9c9ab1b730a91 48 0
#2 := false
#9 := 3::Real
#8 := 1::Real
#12 := (- 1::Real)
#13 := (/ #12 3::Real)
#10 := (- 3::Real)
#11 := (/ 1::Real #10)
#14 := (= #11 #13)
#15 := (not #14)
#69 := (iff #15 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #15 #64)
#62 := (iff #14 true)
#42 := -1/3::Real
#57 := (= -1/3::Real -1/3::Real)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #14 #57)
#55 := (= #13 -1/3::Real)
#47 := -1::Real
#50 := (/ -1::Real 3::Real)
#53 := (= #50 -1/3::Real)
#54 := [rewrite]: #53
#51 := (= #13 #50)
#48 := (= #12 -1::Real)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#45 := (= #11 -1/3::Real)
#36 := -3::Real
#39 := (/ 1::Real -3::Real)
#43 := (= #39 -1/3::Real)
#44 := [rewrite]: #43
#40 := (= #11 #39)
#37 := (= #10 -3::Real)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#59 := [monotonicity #46 #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#35 := [asserted]: #15
[mp #35 #70]: false
unsat
36baa91bad72cdcdeb69c09cae275d7dd51d0ec0 36 0
#2 := false
#10 := 3::Real
#8 := 1::Real
#9 := (- 1::Real)
#11 := (/ #9 3::Real)
#12 := (= #11 #11)
#13 := (not #12)
#57 := (iff #13 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #13 #52)
#50 := (iff #12 true)
#40 := -1/3::Real
#45 := (= -1/3::Real -1/3::Real)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #12 #45)
#43 := (= #11 -1/3::Real)
#34 := -1::Real
#37 := (/ -1::Real 3::Real)
#41 := (= #37 -1/3::Real)
#42 := [rewrite]: #41
#38 := (= #11 #37)
#35 := (= #9 -1::Real)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#44 := [trans #39 #42]: #43
#47 := [monotonicity #44 #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#33 := [asserted]: #13
[mp #33 #58]: false
unsat
27179242be2af6441aee8a632ff4f9f46f4559e7 43 0
#2 := false
#10 := 3::Real
#8 := 1::Real
#13 := (/ 1::Real 3::Real)
#11 := (- 3::Real)
#9 := (- 1::Real)
#12 := (/ #9 #11)
#14 := (= #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#45 := 1/3::Real
#52 := (= 1/3::Real 1/3::Real)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (= #13 1/3::Real)
#51 := [rewrite]: #50
#48 := (= #12 1/3::Real)
#39 := -3::Real
#36 := -1::Real
#42 := (/ -1::Real -3::Real)
#46 := (= #42 1/3::Real)
#47 := [rewrite]: #46
#43 := (= #12 #42)
#40 := (= #11 -3::Real)
#41 := [rewrite]: #40
#37 := (= #9 -1::Real)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #41]: #43
#49 := [trans #44 #47]: #48
#54 := [monotonicity #49 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
f8feec24442a22841814d6bc2bb6f89a1a5ccdca 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 1::Real
#10 := (/ f3 1::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
c05f02963ca1f0c7b2cf36a8d547885cab5aa79a 60 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#68 := 2/3::Real
#69 := (* 2/3::Real f3)
#70 := (<= #69 0::Real)
#66 := (not #70)
#55 := (<= f3 0::Real)
#72 := (or #55 #66)
#75 := (not #72)
#11 := 3::Real
#12 := (/ f3 3::Real)
#13 := (< #12 f3)
#10 := (< 0::Real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#78 := (iff #15 #75)
#36 := 1/3::Real
#37 := (* 1/3::Real f3)
#40 := (< #37 f3)
#46 := (not #10)
#47 := (or #46 #40)
#52 := (not #47)
#76 := (iff #52 #75)
#73 := (iff #47 #72)
#67 := (iff #40 #66)
#71 := [rewrite]: #67
#64 := (iff #46 #55)
#56 := (not #55)
#59 := (not #56)
#62 := (iff #59 #55)
#63 := [rewrite]: #62
#60 := (iff #46 #59)
#57 := (iff #10 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#74 := [monotonicity #65 #71]: #73
#77 := [monotonicity #74]: #76
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#43 := (implies #10 #40)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #14 #43)
#41 := (iff #13 #40)
#38 := (= #12 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [monotonicity #51]: #53
#79 := [trans #54 #77]: #78
#35 := [asserted]: #15
#80 := [mp #35 #79]: #75
#82 := [not-or-elim #80]: #70
#81 := [not-or-elim #80]: #56
[th-lemma arith farkas -2/3 1 #81 #82]: false
unsat
9b3f58b1809134cb88eb2695df7f6a346a6afe80 60 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#70 := 2/3::Real
#71 := (* 2/3::Real f3)
#68 := (>= #71 0::Real)
#66 := (not #68)
#57 := (>= f3 0::Real)
#72 := (or #57 #66)
#75 := (not #72)
#11 := 3::Real
#12 := (/ f3 3::Real)
#13 := (< f3 #12)
#10 := (< f3 0::Real)
#14 := (implies #10 #13)
#15 := (not #14)
#78 := (iff #15 #75)
#36 := 1/3::Real
#37 := (* 1/3::Real f3)
#40 := (< f3 #37)
#46 := (not #10)
#47 := (or #46 #40)
#52 := (not #47)
#76 := (iff #52 #75)
#73 := (iff #47 #72)
#67 := (iff #40 #66)
#69 := [rewrite]: #67
#64 := (iff #46 #57)
#55 := (not #57)
#59 := (not #55)
#62 := (iff #59 #57)
#63 := [rewrite]: #62
#60 := (iff #46 #59)
#56 := (iff #10 #55)
#58 := [rewrite]: #56
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#74 := [monotonicity #65 #69]: #73
#77 := [monotonicity #74]: #76
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#43 := (implies #10 #40)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #14 #43)
#41 := (iff #13 #40)
#38 := (= #12 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [monotonicity #51]: #53
#79 := [trans #54 #77]: #78
#35 := [asserted]: #15
#80 := [mp #35 #79]: #75
#82 := [not-or-elim #80]: #68
#81 := [not-or-elim #80]: #55
[th-lemma arith farkas -2/3 1 #81 #82]: false
unsat
445e35b9311219b2f5634562f77afc853349ceea 36 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 3::Real
#10 := (/ f3 3::Real)
#11 := (* 3::Real #10)
#12 := (= #11 f3)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#44 := (= f3 f3)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #12 #44)
#34 := 1/3::Real
#35 := (* 1/3::Real f3)
#38 := (* 3::Real #35)
#41 := (= #38 f3)
#42 := [rewrite]: #41
#39 := (= #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [trans #40 #42]: #12
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#33 := [asserted]: #13
[mp #33 #57]: false
unsat
c9d4409876d543b534cb12358001a3188eb10d21 35 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 3::Real
#10 := (* f3 3::Real)
#11 := (/ #10 3::Real)
#12 := (= #11 f3)
#13 := (not #12)
#55 := (iff #13 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #13 #50)
#48 := (iff #12 true)
#43 := (= f3 f3)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#34 := (* 3::Real f3)
#37 := (/ #34 3::Real)
#40 := (= #37 f3)
#41 := [rewrite]: #40
#38 := (= #11 #37)
#35 := (= #10 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [trans #39 #41]: #12
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#33 := [asserted]: #13
[mp #33 #56]: false
unsat
b7467d5d6041c1b17f2b5e32374743df439ee2c2 62 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#70 := 1/3::Real
#71 := (* 1/3::Real f3)
#72 := (<= #71 0::Real)
#68 := (not #72)
#57 := (<= f3 0::Real)
#74 := (or #57 #68)
#77 := (not #74)
#13 := 3::Real
#11 := 2::Real
#12 := (* 2::Real f3)
#14 := (/ #12 3::Real)
#15 := (< #14 f3)
#10 := (< 0::Real f3)
#16 := (implies #10 #15)
#17 := (not #16)
#80 := (iff #17 #77)
#39 := 2/3::Real
#40 := (* 2/3::Real f3)
#42 := (< #40 f3)
#48 := (not #10)
#49 := (or #48 #42)
#54 := (not #49)
#78 := (iff #54 #77)
#75 := (iff #49 #74)
#69 := (iff #42 #68)
#73 := [rewrite]: #69
#66 := (iff #48 #57)
#58 := (not #57)
#61 := (not #58)
#64 := (iff #61 #57)
#65 := [rewrite]: #64
#62 := (iff #48 #61)
#59 := (iff #10 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#76 := [monotonicity #67 #73]: #75
#79 := [monotonicity #76]: #78
#55 := (iff #17 #54)
#52 := (iff #16 #49)
#45 := (implies #10 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #16 #45)
#43 := (iff #15 #42)
#38 := (= #14 #40)
#41 := [rewrite]: #38
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#56 := [monotonicity #53]: #55
#81 := [trans #56 #79]: #80
#37 := [asserted]: #17
#82 := [mp #37 #81]: #77
#84 := [not-or-elim #82]: #72
#83 := [not-or-elim #82]: #58
[th-lemma arith farkas -1/3 1 #83 #84]: false
unsat
3b59732be5ac2fe610c9e2843a63e7a1830b9838 62 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#72 := 1/3::Real
#73 := (* 1/3::Real f3)
#70 := (>= #73 0::Real)
#68 := (not #70)
#59 := (>= f3 0::Real)
#74 := (or #59 #68)
#77 := (not #74)
#13 := 3::Real
#11 := 2::Real
#12 := (* 2::Real f3)
#14 := (/ #12 3::Real)
#15 := (< f3 #14)
#10 := (< f3 0::Real)
#16 := (implies #10 #15)
#17 := (not #16)
#80 := (iff #17 #77)
#39 := 2/3::Real
#40 := (* 2/3::Real f3)
#42 := (< f3 #40)
#48 := (not #10)
#49 := (or #48 #42)
#54 := (not #49)
#78 := (iff #54 #77)
#75 := (iff #49 #74)
#69 := (iff #42 #68)
#71 := [rewrite]: #69
#66 := (iff #48 #59)
#57 := (not #59)
#61 := (not #57)
#64 := (iff #61 #59)
#65 := [rewrite]: #64
#62 := (iff #48 #61)
#58 := (iff #10 #57)
#60 := [rewrite]: #58
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#76 := [monotonicity #67 #71]: #75
#79 := [monotonicity #76]: #78
#55 := (iff #17 #54)
#52 := (iff #16 #49)
#45 := (implies #10 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #16 #45)
#43 := (iff #15 #42)
#38 := (= #14 #40)
#41 := [rewrite]: #38
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#56 := [monotonicity #53]: #55
#81 := [trans #56 #79]: #80
#37 := [asserted]: #17
#82 := [mp #37 #81]: #77
#84 := [not-or-elim #82]: #70
#83 := [not-or-elim #82]: #57
[th-lemma arith farkas -1/3 1 #83 #84]: false
unsat
78ae7121e195bacc5f4b6db83b123df8490f9dac 75 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#35 := -1::Real
#36 := (* -1::Real f3)
#48 := (>= f3 0::Real)
#55 := (ite #48 f3 #36)
#75 := (* -1::Real #55)
#84 := (+ #36 #75)
#93 := (<= #84 0::Real)
#80 := (= #36 #55)
#49 := (not #48)
#76 := (+ f3 #75)
#83 := (<= #76 0::Real)
#79 := (= f3 #55)
#85 := [hypothesis]: #48
#81 := (or #49 #79)
#82 := [def-axiom]: #81
#86 := [unit-resolution #82 #85]: #79
#87 := (not #79)
#88 := (or #87 #83)
#89 := [th-lemma arith triangle-eq]: #88
#90 := [unit-resolution #89 #86]: #83
#64 := (>= #55 0::Real)
#68 := (not #64)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#13 := (<= 0::Real #12)
#14 := (not #13)
#71 := (iff #14 #68)
#39 := (ite #10 #36 f3)
#42 := (<= 0::Real #39)
#45 := (not #42)
#69 := (iff #45 #68)
#66 := (iff #42 #64)
#60 := (<= 0::Real #55)
#63 := (iff #60 #64)
#65 := [rewrite]: #63
#61 := (iff #42 #60)
#58 := (= #39 #55)
#52 := (ite #49 #36 f3)
#56 := (= #52 #55)
#57 := [rewrite]: #56
#53 := (= #39 #52)
#50 := (iff #10 #49)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#67 := [trans #62 #65]: #66
#70 := [monotonicity #67]: #69
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (= #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#72 := [trans #47 #70]: #71
#34 := [asserted]: #14
#73 := [mp #34 #72]: #68
#91 := [th-lemma arith farkas -1 1 1 #85 #73 #90]: false
#92 := [lemma #91]: #49
#77 := (or #48 #80)
#78 := [def-axiom]: #77
#95 := [unit-resolution #78 #92]: #80
#96 := (not #80)
#97 := (or #96 #93)
#98 := [th-lemma arith triangle-eq]: #97
#99 := [unit-resolution #98 #95]: #93
[th-lemma arith farkas 1 1 1 #92 #73 #99]: false
unsat
ff789d0b06f4e86f73b38d800d6fea471c529be0 128 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#37 := -1::Real
#38 := (* -1::Real f3)
#137 := (<= #38 0::Real)
#136 := (= #38 0::Real)
#69 := (>= f3 0::Real)
#76 := (ite #69 f3 #38)
#85 := (= #76 0::Real)
#105 := (= f3 #76)
#127 := (not #105)
#101 := (not #85)
#128 := (iff #101 #127)
#125 := (iff #85 #105)
#123 := (iff #105 #85)
#81 := (= 0::Real #76)
#84 := (iff #81 #85)
#122 := [commutativity]: #84
#120 := (iff #105 #81)
#14 := (= f3 0::Real)
#118 := [hypothesis]: #101
#115 := (or #14 #85)
#63 := (not #14)
#92 := (iff #63 #85)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#13 := (= #12 0::Real)
#15 := (iff #13 #14)
#16 := (not #15)
#97 := (iff #16 #92)
#41 := (ite #10 #38 f3)
#47 := (= 0::Real #41)
#64 := (iff #47 #63)
#95 := (iff #64 #92)
#89 := (iff #85 #63)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #64 #89)
#87 := (iff #47 #85)
#86 := [rewrite]: #84
#82 := (iff #47 #81)
#79 := (= #41 #76)
#70 := (not #69)
#73 := (ite #70 #38 f3)
#77 := (= #73 #76)
#78 := [rewrite]: #77
#74 := (= #41 #73)
#71 := (iff #10 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#80 := [trans #75 #78]: #79
#83 := [monotonicity #80]: #82
#88 := [trans #83 #86]: #87
#91 := [monotonicity #88]: #90
#96 := [trans #91 #94]: #95
#67 := (iff #16 #64)
#55 := (iff #14 #47)
#60 := (not #55)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#52 := (iff #47 #14)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #13 #47)
#44 := (= #41 0::Real)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #13 #44)
#42 := (= #12 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#98 := [trans #68 #96]: #97
#36 := [asserted]: #16
#99 := [mp #36 #98]: #92
#102 := (not #92)
#113 := (or #14 #85 #102)
#114 := [def-axiom]: #113
#116 := [unit-resolution #114 #99]: #115
#119 := [unit-resolution #116 #118]: #14
#121 := [monotonicity #119]: #120
#124 := [trans #121 #122]: #123
#126 := [symm #124]: #125
#129 := [monotonicity #126]: #128
#130 := [mp #118 #129]: #127
#131 := (or #63 #69)
#132 := [th-lemma arith triangle-eq]: #131
#133 := [unit-resolution #132 #119]: #69
#107 := (or #70 #105)
#108 := [def-axiom]: #107
#134 := [unit-resolution #108 #133 #130]: false
#135 := [lemma #134]: #85
#106 := (= #38 #76)
#144 := (iff #63 #127)
#142 := (iff #14 #105)
#140 := (iff #105 #14)
#141 := [monotonicity #135]: #140
#143 := [symm #141]: #142
#145 := [monotonicity #143]: #144
#111 := (or #63 #101)
#109 := (or #63 #101 #102)
#110 := [def-axiom]: #109
#112 := [unit-resolution #110 #99]: #111
#139 := [unit-resolution #112 #135]: #63
#146 := [mp #139 #145]: #127
#147 := [unit-resolution #108 #146]: #70
#103 := (or #69 #106)
#104 := [def-axiom]: #103
#148 := [unit-resolution #104 #147]: #106
#149 := [trans #148 #135]: #136
#150 := (not #136)
#151 := (or #150 #137)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #149]: #137
[th-lemma arith farkas 1 1 #147 #153]: false
unsat
a4051d759a69912da335fbbe489e426099dc4c5c 103 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#64 := (>= f3 0::Real)
#37 := -1::Real
#38 := (* -1::Real f3)
#111 := (* -1::Real #38)
#112 := (+ f3 #111)
#114 := (>= #112 0::Real)
#110 := (= f3 #38)
#71 := (ite #64 f3 #38)
#118 := (= #71 #38)
#99 := (= #38 #71)
#65 := (not #64)
#115 := [hypothesis]: #65
#102 := (or #64 #99)
#97 := [def-axiom]: #102
#116 := [unit-resolution #97 #115]: #99
#119 := [symm #116]: #118
#76 := (= f3 #71)
#108 := (or #64 #76)
#86 := (iff #65 #76)
#12 := (- f3)
#11 := (< f3 0::Real)
#13 := (ite #11 #12 f3)
#14 := (= #13 f3)
#10 := (<= 0::Real f3)
#15 := (iff #10 #14)
#16 := (not #15)
#91 := (iff #16 #86)
#58 := (not #10)
#41 := (ite #11 #38 f3)
#47 := (= f3 #41)
#59 := (iff #47 #58)
#89 := (iff #59 #86)
#83 := (iff #76 #65)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #59 #83)
#81 := (iff #58 #65)
#79 := (iff #10 #64)
#80 := [rewrite]: #79
#82 := [monotonicity #80]: #81
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#85 := [monotonicity #78 #82]: #84
#90 := [trans #85 #88]: #89
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 f3)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#42 := (= #13 #41)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#92 := [trans #63 #90]: #91
#36 := [asserted]: #16
#93 := [mp #36 #92]: #86
#95 := (not #86)
#106 := (or #64 #76 #95)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #93]: #108
#117 := [unit-resolution #109 #115]: #76
#120 := [trans #117 #119]: #110
#121 := (not #110)
#122 := (or #121 #114)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #114
#125 := [th-lemma arith farkas 2 1 #115 #124]: false
#126 := [lemma #125]: #64
#100 := (or #65 #76)
#101 := [def-axiom]: #100
#113 := [unit-resolution #101 #126]: #76
#98 := (not #76)
#104 := (or #65 #98)
#96 := (or #65 #98 #95)
#103 := [def-axiom]: #96
#105 := [unit-resolution #103 #93]: #104
[unit-resolution #105 #113 #126]: false
unsat
571ce5e288c8e7c603db7dc5836a06cad2fe7128 152 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#37 := -1::Real
#38 := (* -1::Real f3)
#64 := (>= f3 0::Real)
#71 := (ite #64 f3 #38)
#114 := (* -1::Real #71)
#164 := (+ f3 #114)
#165 := (<= #164 0::Real)
#101 := (= f3 #71)
#115 := (+ #38 #114)
#117 := (>= #115 0::Real)
#76 := (= #38 #71)
#65 := (not #64)
#149 := [hypothesis]: #65
#104 := (or #64 #76)
#99 := [def-axiom]: #104
#150 := [unit-resolution #99 #149]: #76
#143 := (not #76)
#151 := (or #143 #117)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #150]: #117
#81 := (+ f3 #71)
#100 := (<= #81 0::Real)
#158 := (not #100)
#97 := (>= #81 0::Real)
#116 := (<= #115 0::Real)
#80 := (= #81 0::Real)
#98 := (not #80)
#136 := (not #97)
#137 := [hypothesis]: #136
#138 := (or #98 #97)
#139 := [th-lemma arith triangle-eq]: #138
#140 := [unit-resolution #139 #137]: #98
#134 := (or #65 #80)
#121 := (= f3 0::Real)
#10 := (<= f3 0::Real)
#118 := [hypothesis]: #98
#112 := (or #10 #80)
#58 := (not #10)
#88 := (iff #58 #80)
#12 := (- f3)
#11 := (< f3 0::Real)
#13 := (ite #11 #12 f3)
#14 := (= #13 #12)
#15 := (iff #10 #14)
#16 := (not #15)
#93 := (iff #16 #88)
#41 := (ite #11 #38 f3)
#47 := (= #38 #41)
#59 := (iff #47 #58)
#91 := (iff #59 #88)
#85 := (iff #80 #58)
#89 := (iff #85 #88)
#90 := [rewrite]: #89
#86 := (iff #59 #85)
#83 := (iff #47 #80)
#79 := (iff #76 #80)
#82 := [rewrite]: #79
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#87 := [monotonicity #84]: #86
#92 := [trans #87 #90]: #91
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 #38)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#42 := (= #13 #41)
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43 #40]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#94 := [trans #63 #92]: #93
#36 := [asserted]: #16
#95 := [mp #36 #94]: #88
#105 := (not #88)
#110 := (or #10 #80 #105)
#111 := [def-axiom]: #110
#113 := [unit-resolution #111 #95]: #112
#119 := [unit-resolution #113 #118]: #10
#120 := [hypothesis]: #64
#122 := [th-lemma arith eq-propagate 0 0 #120 #119]: #121
#130 := (= #81 f3)
#128 := (= #71 f3)
#102 := (or #65 #101)
#103 := [def-axiom]: #102
#123 := [unit-resolution #103 #120]: #101
#129 := [symm #123]: #128
#126 := (= #81 #71)
#124 := (= #71 #81)
#125 := [th-lemma arith eq-propagate 1 1 #120 #119]: #124
#127 := [symm #125]: #126
#131 := [trans #127 #129]: #130
#132 := [trans #131 #122]: #80
#133 := [unit-resolution #118 #132]: false
#135 := [lemma #133]: #134
#141 := [unit-resolution #135 #140]: #65
#142 := [unit-resolution #99 #141]: #76
#144 := (or #143 #116)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #116
#147 := [th-lemma arith farkas 1 1 #137 #146]: false
#148 := [lemma #147]: #97
#154 := (or #64 #10)
#155 := [th-lemma arith farkas 1 1]: #154
#156 := [unit-resolution #155 #149]: #10
#108 := (or #58 #98)
#106 := (or #58 #98 #105)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #95]: #108
#157 := [unit-resolution #109 #156]: #98
#159 := (or #80 #158 #136)
#160 := [th-lemma arith triangle-eq]: #159
#161 := [unit-resolution #160 #157 #148]: #158
#162 := [th-lemma arith farkas 1 1 #161 #153]: false
#163 := [lemma #162]: #64
#167 := [unit-resolution #103 #163]: #101
#168 := (not #101)
#169 := (or #168 #165)
#170 := [th-lemma arith triangle-eq]: #169
#171 := [unit-resolution #170 #167]: #165
#172 := [unit-resolution #135 #163]: #80
#173 := (or #98 #100)
#174 := [th-lemma arith triangle-eq]: #173
#175 := [unit-resolution #174 #172]: #100
#176 := [unit-resolution #109 #172]: #58
[th-lemma arith farkas 2 1 1 #176 #175 #171]: false
unsat
f4a9c9097a96542eacf222bbd562a802c9ede1c1 114 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#38 := -1::Real
#39 := (* -1::Real f3)
#70 := (>= f3 0::Real)
#77 := (ite #70 f3 #39)
#91 := (* -1::Real #77)
#130 := (+ #39 #91)
#140 := (<= #130 0::Real)
#117 := (= #39 #77)
#71 := (not #70)
#128 := (+ f3 #91)
#129 := (<= #128 0::Real)
#116 := (= f3 #77)
#131 := [hypothesis]: #70
#118 := (or #71 #116)
#119 := [def-axiom]: #118
#132 := [unit-resolution #119 #131]: #116
#133 := (not #116)
#134 := (or #133 #129)
#135 := [th-lemma arith triangle-eq]: #134
#136 := [unit-resolution #135 #132]: #129
#86 := (>= #77 0::Real)
#85 := (not #86)
#97 := (ite #86 #77 #91)
#102 := (= #77 #97)
#105 := (not #102)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#14 := (- #12)
#13 := (< #12 0::Real)
#15 := (ite #13 #14 #12)
#16 := (= #15 #12)
#17 := (not #16)
#108 := (iff #17 #105)
#42 := (ite #10 #39 f3)
#51 := (* -1::Real #42)
#45 := (< #42 0::Real)
#56 := (ite #45 #51 #42)
#62 := (= #42 #56)
#67 := (not #62)
#106 := (iff #67 #105)
#103 := (iff #62 #102)
#100 := (= #56 #97)
#94 := (ite #85 #91 #77)
#98 := (= #94 #97)
#99 := [rewrite]: #98
#95 := (= #56 #94)
#80 := (= #42 #77)
#74 := (ite #71 #39 f3)
#78 := (= #74 #77)
#79 := [rewrite]: #78
#75 := (= #42 #74)
#72 := (iff #10 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#92 := (= #51 #91)
#93 := [monotonicity #81]: #92
#89 := (iff #45 #85)
#82 := (< #77 0::Real)
#87 := (iff #82 #85)
#88 := [rewrite]: #87
#83 := (iff #45 #82)
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#96 := [monotonicity #90 #93 #81]: #95
#101 := [trans #96 #99]: #100
#104 := [monotonicity #81 #101]: #103
#107 := [monotonicity #104]: #106
#68 := (iff #17 #67)
#65 := (iff #16 #62)
#59 := (= #56 #42)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #16 #59)
#43 := (= #12 #42)
#40 := (= #11 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#57 := (= #15 #56)
#54 := (= #14 #51)
#48 := (- #42)
#52 := (= #48 #51)
#53 := [rewrite]: #52
#49 := (= #14 #48)
#50 := [monotonicity #44]: #49
#55 := [trans #50 #53]: #54
#46 := (iff #13 #45)
#47 := [monotonicity #44]: #46
#58 := [monotonicity #47 #55 #44]: #57
#61 := [monotonicity #58 #44]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#109 := [trans #69 #107]: #108
#37 := [asserted]: #17
#110 := [mp #37 #109]: #105
#113 := (or #85 #102)
#120 := [def-axiom]: #113
#137 := [unit-resolution #120 #110]: #85
#138 := [th-lemma arith farkas -1 1 1 #131 #137 #136]: false
#139 := [lemma #138]: #71
#114 := (or #70 #117)
#115 := [def-axiom]: #114
#142 := [unit-resolution #115 #139]: #117
#143 := (not #117)
#144 := (or #143 #140)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #140
[th-lemma arith farkas 1 1 1 #139 #137 #146]: false
unsat
d767bb2fd46823ea99ed2a2f48afd14fa043b714 57 0
#2 := false
#39 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Real)
#43 := (ite #40 f3 f4)
#51 := (* -1::Real #43)
#60 := (+ f4 #51)
#74 := (>= #60 0::Real)
#64 := (= f4 #43)
#65 := (not #40)
#63 := (= f3 #43)
#68 := (not #63)
#52 := (+ f3 #51)
#50 := (>= #52 0::Real)
#56 := (not #50)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f3)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #50)
#46 := (<= #43 f3)
#49 := (iff #46 #50)
#53 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #50)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #74)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #74
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
a0d049d55a4b6d63a7a4486a6dd0f26ecaa6ada7 57 0
#2 := false
#39 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Real)
#43 := (ite #40 f3 f4)
#50 := (* -1::Real #43)
#51 := (+ f4 #50)
#49 := (>= #51 0::Real)
#56 := (not #49)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f4)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #49)
#46 := (<= #43 f4)
#52 := (iff #46 #49)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f4 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f3 #50)
#68 := (>= #60 0::Real)
#63 := (= f3 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #68)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #68
#75 := [th-lemma arith farkas -1 1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #49)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
9c0695856bacfb99d21d573df84afab5e5b181f4 103 0
#2 := false
#48 := 0::Real
decl f5 :: Real
#11 := f5
decl f4 :: Real
#9 := f4
#46 := -1::Real
#56 := (* -1::Real f5)
#66 := (+ f4 #56)
#67 := (<= #66 0::Real)
#70 := (ite #67 f4 f5)
#78 := (* -1::Real #70)
decl f3 :: Real
#8 := f3
#79 := (+ f3 #78)
#77 := (>= #79 0::Real)
#76 := (not #77)
#57 := (+ f3 #56)
#55 := (>= #57 0::Real)
#54 := (not #55)
#50 := (* -1::Real f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Real)
#47 := (not #49)
#60 := (and #47 #54)
#63 := (not #60)
#84 := (or #63 #76)
#87 := (not #84)
#14 := (<= f4 f5)
#15 := (ite #14 f4 f5)
#16 := (< f3 #15)
#12 := (< f3 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #76)
#73 := (< f3 #70)
#80 := (iff #73 #76)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #54)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #77
#93 := [not-or-elim #92]: #60
#95 := [and-elim #93]: #54
#101 := (+ f5 #78)
#118 := (<= #101 0::Real)
#107 := (= f5 #70)
#108 := (not #67)
#106 := (= f4 #70)
#113 := (not #106)
#103 := (+ f4 #78)
#100 := (<= #103 0::Real)
#110 := (not #100)
#94 := [and-elim #93]: #47
#98 := [hypothesis]: #100
#99 := [th-lemma arith farkas -1 -1 1 #98 #94 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #100)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #118)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #118
[th-lemma arith farkas -1 -1 1 #125 #95 #96]: false
unsat
b696c36b14d9aa5d8537f0123bf4636c0a97e771 94 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#41 := 0::Real
#38 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Real)
#51 := (ite #49 f4 f3)
#42 := (<= #40 0::Real)
#45 := (ite #42 f3 f4)
#54 := (= #45 #51)
#61 := (= f4 #51)
#66 := (not #42)
#64 := (= f3 #45)
#106 := (not #64)
#68 := (= f3 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#74 := (= f3 f4)
#65 := (= f4 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f4 f3)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#98 := [trans #97 #78]: #68
#99 := [unit-resolution #76 #98]: false
#100 := [lemma #99]: #68
#102 := (= #45 f3)
#101 := [hypothesis]: #64
#103 := [symm #101]: #102
#104 := [trans #103 #100]: #54
#105 := [unit-resolution #60 #104]: false
#107 := [lemma #105]: #106
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#108 := [unit-resolution #62 #107]: #66
#110 := (or #49 #42)
#111 := [th-lemma arith farkas 1 1]: #110
#112 := [unit-resolution #111 #108]: #49
#113 := [unit-resolution #71 #112]: #61
#116 := (= #45 f4)
#109 := [unit-resolution #37 #108]: #65
#117 := [symm #109]: #116
#118 := [trans #117 #113]: #54
[unit-resolution #60 #118]: false
unsat
71758f92000b4f0bd1ce8b23e790788bff528cd0 68 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#11 := (<= f3 0::Real)
#12 := (ite #11 f3 0::Real)
#13 := (= #12 0::Real)
#79 := (= f3 0::Real)
#53 := (>= f3 0::Real)
#54 := (not #53)
#62 := (or #13 #54)
#67 := (not #62)
#10 := (<= 0::Real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#70 := (iff #15 #67)
#36 := (= 0::Real #12)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#68 := (iff #48 #67)
#65 := (iff #43 #62)
#59 := (or #54 #13)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #43 #59)
#57 := (iff #36 #13)
#58 := [rewrite]: #57
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#61 := [monotonicity #56 #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#71 := [trans #50 #69]: #70
#35 := [asserted]: #15
#72 := [mp #35 #71]: #67
#75 := [not-or-elim #72]: #53
#73 := (not #13)
#74 := [not-or-elim #72]: #73
#81 := (or #11 #13)
#82 := [def-axiom]: #81
#80 := [unit-resolution #82 #74]: #11
#84 := (not #11)
#77 := (or #79 #84 #54)
#78 := [th-lemma arith triangle-eq]: #77
#87 := [unit-resolution #78 #80 #75]: #79
#89 := (= #12 f3)
#83 := (= f3 #12)
#85 := (or #84 #83)
#86 := [def-axiom]: #85
#88 := [unit-resolution #86 #80]: #83
#90 := [symm #88]: #89
#91 := [trans #90 #87]: #13
[unit-resolution #74 #91]: false
unsat
944eddc125ab4f02dc35653f414c25fd1dfc289a 124 0
#2 := false
#13 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#39 := -1::Real
#41 := (* -1::Real f4)
#54 := (+ f3 #41)
#55 := (<= #54 0::Real)
#58 := (ite #55 f3 f4)
#106 := (* -1::Real #58)
#107 := (+ f3 #106)
#109 := (>= #107 0::Real)
#94 := (= f3 #58)
#108 := (+ f4 #106)
#126 := (>= #108 0::Real)
#95 := (= f4 #58)
#96 := (not #55)
#137 := [hypothesis]: #96
#93 := (or #55 #95)
#90 := [def-axiom]: #93
#138 := [unit-resolution #90 #137]: #95
#129 := (not #95)
#130 := (or #129 #126)
#131 := [th-lemma arith triangle-eq]: #130
#139 := [unit-resolution #131 #138]: #126
#40 := (* -1::Real f3)
#42 := (+ #40 #41)
#12 := (+ f3 f4)
#61 := (>= #12 0::Real)
#68 := (ite #61 #12 #42)
#76 := (* -1::Real #68)
#105 := (+ #42 #76)
#125 := (<= #105 0::Real)
#98 := (= #42 #68)
#62 := (not #61)
#110 := [hypothesis]: #61
#77 := (+ #58 #76)
#78 := (<= #77 0::Real)
#83 := (not #78)
#15 := (- #12)
#14 := (< #12 0::Real)
#16 := (ite #14 #15 #12)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#17 := (<= #11 #16)
#18 := (not #17)
#86 := (iff #18 #83)
#45 := (ite #14 #42 #12)
#48 := (<= #11 #45)
#51 := (not #48)
#84 := (iff #51 #83)
#81 := (iff #48 #78)
#73 := (<= #58 #68)
#79 := (iff #73 #78)
#80 := [rewrite]: #79
#74 := (iff #48 #73)
#71 := (= #45 #68)
#65 := (ite #62 #42 #12)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #45 #65)
#63 := (iff #14 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#59 := (= #11 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#75 := [monotonicity #60 #72]: #74
#82 := [trans #75 #80]: #81
#85 := [monotonicity #82]: #84
#52 := (iff #18 #51)
#49 := (iff #17 #48)
#46 := (= #16 #45)
#43 := (= #15 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#87 := [trans #53 #85]: #86
#38 := [asserted]: #18
#88 := [mp #38 #87]: #83
#123 := (or #96 #62)
#111 := [hypothesis]: #55
#97 := (or #96 #94)
#92 := [def-axiom]: #97
#112 := [unit-resolution #92 #111]: #94
#113 := (not #94)
#114 := (or #113 #109)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112]: #109
#103 := (+ #12 #76)
#104 := (<= #103 0::Real)
#91 := (= #12 #68)
#99 := (or #62 #91)
#100 := [def-axiom]: #99
#117 := [unit-resolution #100 #110]: #91
#118 := (not #91)
#119 := (or #118 #104)
#120 := [th-lemma arith triangle-eq]: #119
#121 := [unit-resolution #120 #117]: #104
#122 := [th-lemma arith farkas 2 2 2 1 1 #121 #116 #88 #111 #110]: false
#124 := [lemma #122]: #123
#127 := [unit-resolution #124 #110]: #96
#128 := [unit-resolution #90 #127]: #95
#132 := [unit-resolution #131 #128]: #126
#133 := [th-lemma arith farkas 2 2 1 2 1 #121 #132 #127 #88 #110]: false
#134 := [lemma #133]: #62
#101 := (or #61 #98)
#102 := [def-axiom]: #101
#140 := [unit-resolution #102 #134]: #98
#141 := (not #98)
#142 := (or #141 #125)
#143 := [th-lemma arith triangle-eq]: #142
#144 := [unit-resolution #143 #140]: #125
#145 := [th-lemma arith farkas 3/2 1/2 1 1 1 #134 #137 #88 #144 #139]: false
#146 := [lemma #145]: #55
#147 := [unit-resolution #92 #146]: #94
#148 := [unit-resolution #115 #147]: #109
[th-lemma arith farkas 1/2 3/2 1 1 1 #146 #134 #88 #144 #148]: false
unsat
c6a40e55705377f4a18787e86ca1381bc32f9048 57 0
#2 := false
#39 := 0::Real
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Real)
#43 := (ite #40 f4 f3)
#49 := (* -1::Real #43)
#50 := (+ f3 #49)
#51 := (<= #50 0::Real)
#56 := (not #51)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f3 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f4 #49)
#67 := (<= #60 0::Real)
#63 := (= f4 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #67)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #67
#75 := [th-lemma arith farkas 1 -1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #51)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
08f86b81fe9ac7c3b38ce6a48d6dd15649d787f7 57 0
#2 := false
#38 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#36 := -1::Real
#40 := (* -1::Real f4)
#41 := (+ f3 #40)
#39 := (>= #41 0::Real)
#43 := (ite #39 f3 f4)
#49 := (* -1::Real #43)
#60 := (+ f4 #49)
#73 := (<= #60 0::Real)
#64 := (= f4 #43)
#65 := (not #39)
#63 := (= f3 #43)
#68 := (not #63)
#50 := (+ f3 #49)
#51 := (<= #50 0::Real)
#56 := (not #51)
#10 := (<= f4 f3)
#11 := (ite #10 f3 f4)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#37 := (iff #10 #39)
#42 := [rewrite]: #37
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #51)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #39 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #73)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #73
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
a8742c9687e5f318c69c4d286746cf373c1fed40 103 0
#2 := false
#48 := 0::Real
decl f3 :: Real
#8 := f3
decl f5 :: Real
#11 := f5
#46 := -1::Real
#54 := (* -1::Real f5)
#66 := (+ f3 #54)
#67 := (<= #66 0::Real)
#70 := (ite #67 f5 f3)
#76 := (* -1::Real #70)
decl f4 :: Real
#9 := f4
#77 := (+ f4 #76)
#78 := (<= #77 0::Real)
#79 := (not #78)
#55 := (+ f4 #54)
#56 := (<= #55 0::Real)
#57 := (not #56)
#50 := (* -1::Real f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Real)
#47 := (not #49)
#60 := (and #47 #57)
#63 := (not #60)
#84 := (or #63 #79)
#87 := (not #84)
#14 := (<= f3 f5)
#15 := (ite #14 f5 f3)
#16 := (< #15 f4)
#12 := (< f5 f4)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #79)
#73 := (< #70 f4)
#80 := (iff #73 #79)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #78
#93 := [not-or-elim #92]: #60
#94 := [and-elim #93]: #47
#100 := (+ f3 #76)
#119 := (>= #100 0::Real)
#107 := (= f3 #70)
#108 := (not #67)
#106 := (= f5 #70)
#113 := (not #106)
#103 := (+ f5 #76)
#101 := (>= #103 0::Real)
#110 := (not #101)
#95 := [and-elim #93]: #57
#98 := [hypothesis]: #101
#99 := [th-lemma arith farkas -1 -1 1 #98 #95 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #101)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #119)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #119
[th-lemma arith farkas -1 1 1 #125 #94 #96]: false
unsat
cf9d7301e2783e3a9529677f7376e191e2553752 96 0
#2 := false
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#41 := 0::Real
#38 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Real)
#51 := (ite #49 f3 f4)
#42 := (<= #40 0::Real)
#45 := (ite #42 f4 f3)
#54 := (= #45 #51)
#61 := (= f3 #51)
#66 := (not #42)
#64 := (= f4 #45)
#108 := (not #64)
#68 := (= f4 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#98 := (= f4 f3)
#74 := (= f3 f4)
#65 := (= f3 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f3 f4)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#99 := [symm #97]: #98
#100 := [trans #99 #78]: #68
#101 := [unit-resolution #76 #100]: false
#102 := [lemma #101]: #68
#104 := (= #45 f4)
#103 := [hypothesis]: #64
#105 := [symm #103]: #104
#106 := [trans #105 #102]: #54
#107 := [unit-resolution #60 #106]: false
#109 := [lemma #107]: #108
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#110 := [unit-resolution #62 #109]: #66
#112 := (or #49 #42)
#113 := [th-lemma arith farkas 1 1]: #112
#114 := [unit-resolution #113 #110]: #49
#115 := [unit-resolution #71 #114]: #61
#118 := (= #45 f3)
#111 := [unit-resolution #37 #110]: #65
#119 := [symm #111]: #118
#120 := [trans #119 #115]: #54
[unit-resolution #60 #120]: false
unsat
d5aa9479bc1880b81fc3a8f2f0ffecc7788dfa18 66 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 0::Real
#11 := (<= f3 0::Real)
#12 := (ite #11 0::Real f3)
#36 := (= f3 #12)
#87 := (= 0::Real #12)
#81 := (= #12 0::Real)
#71 := (not #36)
#53 := (>= f3 0::Real)
#54 := (not #53)
#60 := (or #36 #54)
#65 := (not #60)
#13 := (= #12 f3)
#10 := (<= 0::Real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#68 := (iff #15 #65)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#66 := (iff #48 #65)
#63 := (iff #43 #60)
#57 := (or #54 #36)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #43 #57)
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#69 := [trans #50 #67]: #68
#35 := [asserted]: #15
#70 := [mp #35 #69]: #65
#72 := [not-or-elim #70]: #71
#79 := (or #11 #36)
#80 := [def-axiom]: #79
#78 := [unit-resolution #80 #72]: #11
#82 := (not #11)
#83 := (or #82 #81)
#84 := [def-axiom]: #83
#75 := [unit-resolution #84 #78]: #81
#88 := [symm #75]: #87
#77 := (= f3 0::Real)
#73 := [not-or-elim #70]: #53
#76 := (or #77 #82 #54)
#85 := [th-lemma arith triangle-eq]: #76
#86 := [unit-resolution #85 #78 #73]: #77
#89 := [trans #86 #88]: #36
[unit-resolution #72 #89]: false
unsat
7f8cef3bf22a3ab0ad21a7a5668eaf6fccce9da2 214 0
#2 := false
#9 := 0::Real
decl f4 :: Real
#14 := f4
#43 := -1::Real
#58 := (* -1::Real f4)
#94 := (>= f4 0::Real)
#101 := (ite #94 f4 #58)
#106 := (* -1::Real #101)
#161 := (+ #58 #106)
#183 := (<= #161 0::Real)
#137 := (= #58 #101)
#95 := (not #94)
decl f3 :: Real
#8 := f3
#112 := (+ f3 #58)
#113 := (<= #112 0::Real)
#116 := (ite #113 f4 f3)
#155 := (* -1::Real #116)
#156 := (+ f4 #155)
#157 := (<= #156 0::Real)
#158 := (+ f3 #155)
#193 := (<= #158 0::Real)
#149 := (= f3 #116)
#150 := (not #113)
#148 := (= f4 #116)
#195 := [hypothesis]: #113
#151 := (or #150 #148)
#152 := [def-axiom]: #151
#196 := [unit-resolution #152 #195]: #148
#197 := (not #148)
#198 := (or #197 #157)
#199 := [th-lemma arith triangle-eq]: #198
#200 := [unit-resolution #199 #196]: #157
#179 := (not #157)
#191 := (or #95 #179)
#159 := (+ f4 #106)
#160 := (<= #159 0::Real)
#136 := (= f4 #101)
#165 := [hypothesis]: #94
#144 := (or #95 #136)
#145 := [def-axiom]: #144
#166 := [unit-resolution #145 #165]: #136
#167 := (not #136)
#168 := (or #167 #160)
#169 := [th-lemma arith triangle-eq]: #168
#170 := [unit-resolution #169 #166]: #160
#44 := (* -1::Real f3)
#79 := (>= f3 0::Real)
#86 := (ite #79 f3 #44)
#91 := (* -1::Real #86)
#164 := (+ #44 #91)
#182 := (<= #164 0::Real)
#141 := (= #44 #86)
#80 := (not #79)
#177 := [hypothesis]: #157
#180 := (or #80 #95 #179)
#125 := (+ #101 #116)
#126 := (+ #86 #125)
#123 := (>= #126 0::Real)
#129 := (not #123)
#19 := (<= f3 f4)
#20 := (ite #19 f4 f3)
#16 := (- f4)
#15 := (< f4 0::Real)
#17 := (ite #15 #16 f4)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#13 := (- #12)
#18 := (- #13 #17)
#21 := (<= #18 #20)
#22 := (not #21)
#132 := (iff #22 #129)
#61 := (ite #15 #58 f4)
#67 := (* -1::Real #61)
#47 := (ite #10 #44 f3)
#53 := (* -1::Real #47)
#68 := (+ #53 #67)
#73 := (<= #68 #20)
#76 := (not #73)
#130 := (iff #76 #129)
#127 := (iff #73 #123)
#109 := (+ #91 #106)
#119 := (<= #109 #116)
#122 := (iff #119 #123)
#124 := [rewrite]: #122
#120 := (iff #73 #119)
#117 := (= #20 #116)
#114 := (iff #19 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#110 := (= #68 #109)
#107 := (= #67 #106)
#104 := (= #61 #101)
#98 := (ite #95 #58 f4)
#102 := (= #98 #101)
#103 := [rewrite]: #102
#99 := (= #61 #98)
#96 := (iff #15 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#105 := [trans #100 #103]: #104
#108 := [monotonicity #105]: #107
#92 := (= #53 #91)
#89 := (= #47 #86)
#83 := (ite #80 #44 f3)
#87 := (= #83 #86)
#88 := [rewrite]: #87
#84 := (= #47 #83)
#81 := (iff #10 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#111 := [monotonicity #93 #108]: #110
#121 := [monotonicity #111 #118]: #120
#128 := [trans #121 #124]: #127
#131 := [monotonicity #128]: #130
#77 := (iff #22 #76)
#74 := (iff #21 #73)
#71 := (= #18 #68)
#64 := (- #53 #61)
#69 := (= #64 #68)
#70 := [rewrite]: #69
#65 := (= #18 #64)
#62 := (= #17 #61)
#59 := (= #16 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#56 := (= #13 #53)
#50 := (- #47)
#54 := (= #50 #53)
#55 := [rewrite]: #54
#51 := (= #13 #50)
#48 := (= #12 #47)
#45 := (= #11 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#57 := [trans #52 #55]: #56
#66 := [monotonicity #57 #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#133 := [trans #78 #131]: #132
#42 := [asserted]: #22
#134 := [mp #42 #133]: #129
#162 := (+ f3 #91)
#163 := (<= #162 0::Real)
#140 := (= f3 #86)
#171 := [hypothesis]: #79
#142 := (or #80 #140)
#143 := [def-axiom]: #142
#172 := [unit-resolution #143 #171]: #140
#173 := (not #140)
#174 := (or #173 #163)
#175 := [th-lemma arith triangle-eq]: #174
#176 := [unit-resolution #175 #172]: #163
#178 := [th-lemma arith farkas -2 1 -1 1 1 1 #165 #177 #171 #176 #134 #170]: false
#181 := [lemma #178]: #180
#184 := [unit-resolution #181 #165 #177]: #80
#138 := (or #79 #141)
#139 := [def-axiom]: #138
#185 := [unit-resolution #139 #184]: #141
#186 := (not #141)
#187 := (or #186 #182)
#188 := [th-lemma arith triangle-eq]: #187
#189 := [unit-resolution #188 #185]: #182
#190 := [th-lemma arith farkas 2 1 1 1 1 1 #165 #177 #134 #184 #189 #170]: false
#192 := [lemma #190]: #191
#201 := [unit-resolution #192 #200]: #95
#146 := (or #94 #137)
#147 := [def-axiom]: #146
#202 := [unit-resolution #147 #201]: #137
#203 := (not #137)
#204 := (or #203 #183)
#205 := [th-lemma arith triangle-eq]: #204
#206 := [unit-resolution #205 #202]: #183
#207 := (or #80 #94 #150)
#208 := [th-lemma arith assign-bounds 1 1]: #207
#209 := [unit-resolution #208 #201 #195]: #80
#210 := [unit-resolution #139 #209]: #141
#211 := [unit-resolution #188 #210]: #182
#212 := [th-lemma arith farkas 1 1 1 1 1 #200 #134 #209 #211 #206]: false
#213 := [lemma #212]: #150
#153 := (or #113 #149)
#154 := [def-axiom]: #153
#224 := [unit-resolution #154 #213]: #149
#225 := (not #149)
#226 := (or #225 #193)
#227 := [th-lemma arith triangle-eq]: #226
#228 := [unit-resolution #227 #224]: #193
#231 := (not #193)
#232 := (or #157 #113 #231)
#233 := [th-lemma arith assign-bounds 1 1]: #232
#234 := [unit-resolution #233 #213 #228]: #157
#235 := [unit-resolution #192 #234]: #95
#236 := [unit-resolution #147 #235]: #137
#237 := [unit-resolution #205 #236]: #183
#216 := [hypothesis]: #80
#217 := (or #95 #79 #113)
#218 := [th-lemma arith assign-bounds 1 1]: #217
#219 := [unit-resolution #218 #216 #213]: #95
#220 := [unit-resolution #147 #219]: #137
#221 := [unit-resolution #205 #220]: #183
#222 := [unit-resolution #139 #216]: #141
#223 := [unit-resolution #188 #222]: #182
#229 := [th-lemma arith farkas 1 1 1 1 1 1 #216 #213 #228 #134 #223 #221]: false
#230 := [lemma #229]: #79
#238 := [unit-resolution #143 #230]: #140
#239 := [unit-resolution #175 #238]: #163
[th-lemma arith farkas 1 1 1 1 1 1 #213 #228 #134 #230 #239 #237]: false
unsat
aa55c98f65865ce1fb459036f5d6d595375e9913 18 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := (<= f3 f3)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
881af9588484ddb06449bbce47773b99bf77b5e8 50 0
#2 := false
#47 := 0::Real
decl f4 :: Real
#9 := f4
#44 := -1::Real
#45 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#46 := (+ f3 #45)
#48 := (<= #46 0::Real)
#54 := -3::Real
#55 := (* -3::Real f4)
#11 := 3::Real
#12 := (* 3::Real f3)
#56 := (+ #12 #55)
#57 := (<= #56 0::Real)
#51 := (not #48)
#60 := (or #51 #57)
#63 := (not #60)
#13 := (* 3::Real f4)
#14 := (<= #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#66 := (iff #16 #63)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#64 := (iff #41 #63)
#61 := (iff #38 #60)
#58 := (iff #14 #57)
#59 := [rewrite]: #58
#52 := (iff #37 #51)
#49 := (iff #10 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#67 := [trans #43 #65]: #66
#36 := [asserted]: #16
#68 := [mp #36 #67]: #63
#69 := [not-or-elim #68]: #48
#70 := (not #57)
#71 := [not-or-elim #68]: #70
[th-lemma arith farkas -1/3 1 #71 #69]: false
unsat
afc3a7275e2a12cddf1eb01b0e78b5320cfe3bbf 55 0
#2 := false
#46 := 0::Real
decl f4 :: Real
#9 := f4
#59 := -3::Real
#62 := (* -3::Real f4)
decl f3 :: Real
#8 := f3
#11 := 3::Real
#12 := (* 3::Real f3)
#63 := (+ #12 #62)
#61 := (>= #63 0::Real)
#60 := (not #61)
#44 := -1::Real
#48 := (* -1::Real f4)
#49 := (+ f3 #48)
#47 := (>= #49 0::Real)
#66 := (or #47 #60)
#69 := (not #66)
#13 := (* 3::Real f4)
#14 := (< #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#72 := (iff #16 #69)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#70 := (iff #41 #69)
#67 := (iff #38 #66)
#64 := (iff #14 #60)
#65 := [rewrite]: #64
#57 := (iff #37 #47)
#45 := (not #47)
#52 := (not #45)
#55 := (iff #52 #47)
#56 := [rewrite]: #55
#53 := (iff #37 #52)
#50 := (iff #10 #45)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#68 := [monotonicity #58 #65]: #67
#71 := [monotonicity #68]: #70
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#73 := [trans #43 #71]: #72
#36 := [asserted]: #16
#74 := [mp #36 #73]: #69
#76 := [not-or-elim #74]: #61
#75 := [not-or-elim #74]: #45
[th-lemma arith farkas 3 1 #75 #76]: false
unsat
a47b8f528836ea6757883cbcf031d400004e56c0 52 0
#2 := false
#43 := 0::Real
decl f4 :: Real
#9 := f4
#41 := -1::Real
#45 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#46 := (+ f3 #45)
#56 := (<= #46 0::Real)
#69 := (not #56)
#44 := (>= #46 0::Real)
#59 := (or #44 #56)
#62 := (not #59)
#11 := (<= f3 f4)
#10 := (< f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#65 := (iff #13 #62)
#34 := (not #10)
#35 := (or #34 #11)
#38 := (not #35)
#63 := (iff #38 #62)
#60 := (iff #35 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#54 := (iff #34 #44)
#42 := (not #44)
#49 := (not #42)
#52 := (iff #49 #44)
#53 := [rewrite]: #52
#50 := (iff #34 #49)
#47 := (iff #10 #42)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#61 := [monotonicity #55 #58]: #60
#64 := [monotonicity #61]: #63
#39 := (iff #13 #38)
#36 := (iff #12 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#66 := [trans #40 #64]: #65
#33 := [asserted]: #13
#67 := [mp #33 #66]: #62
#70 := [not-or-elim #67]: #69
#68 := [not-or-elim #67]: #42
#78 := (or #56 #44)
#79 := [th-lemma arith farkas 1 1]: #78
#80 := [unit-resolution #79 #68]: #56
[unit-resolution #80 #70]: false
unsat
1c7cd0067170dad35b430a2211d9d52ff14ffc78 15 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := (< f3 f3)
#10 := (not #9)
#11 := (not #10)
#36 := (iff #11 false)
#34 := (iff #9 false)
#35 := [rewrite]: #34
#32 := (iff #11 #9)
#33 := [rewrite]: #32
#37 := [trans #33 #35]: #36
#31 := [asserted]: #11
[mp #31 #37]: false
unsat
ae8743955951475c05ecf14ad6f216d2f85844fd 75 0
#2 := false
#56 := 0::Real
decl f5 :: Real
#11 := f5
#53 := -1::Real
#54 := (* -1::Real f5)
decl f4 :: Real
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Real)
#67 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#68 := (+ f3 #67)
#69 := (<= #68 0::Real)
#72 := (not #69)
#63 := (+ f3 #54)
#64 := (<= #63 0::Real)
#60 := (not #57)
#81 := (or #60 #64 #72)
#86 := (not #81)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#89 := (iff #16 #86)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#87 := (iff #50 #86)
#84 := (iff #45 #81)
#75 := (or #60 #64)
#78 := (or #72 #75)
#82 := (iff #78 #81)
#83 := [rewrite]: #82
#79 := (iff #45 #78)
#76 := (iff #38 #75)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#77 := [monotonicity #62 #66]: #76
#73 := (iff #44 #72)
#70 := (iff #10 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#90 := [trans #52 #88]: #89
#36 := [asserted]: #16
#91 := [mp #36 #90]: #86
#92 := [not-or-elim #91]: #57
#93 := (not #64)
#94 := [not-or-elim #91]: #93
#95 := [not-or-elim #91]: #69
[th-lemma arith farkas 1 -1 1 #95 #94 #92]: false
unsat
787bdcef7a733082f1b18886b52fc521c0ed8560 80 0
#2 := false
#56 := 0::Real
decl f5 :: Real
#11 := f5
#53 := -1::Real
#54 := (* -1::Real f5)
decl f4 :: Real
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Real)
#69 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#70 := (+ f3 #69)
#68 := (>= #70 0::Real)
#63 := (+ f3 #54)
#64 := (<= #63 0::Real)
#60 := (not #57)
#86 := (or #60 #64 #68)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #60 #64)
#83 := (or #68 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#82 := [monotonicity #62 #66]: #81
#78 := (iff #44 #68)
#67 := (not #68)
#73 := (not #67)
#76 := (iff #73 #68)
#77 := [rewrite]: #76
#74 := (iff #44 #73)
#71 := (iff #10 #67)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#97 := [not-or-elim #96]: #57
#98 := (not #64)
#99 := [not-or-elim #96]: #98
#100 := [not-or-elim #96]: #67
[th-lemma arith farkas 1 1 1 #100 #99 #97]: false
unsat
b3f48d3d4ae5df26c230c46ec0af407248139694 80 0
#2 := false
#55 := 0::Real
decl f4 :: Real
#9 := f4
#53 := -1::Real
#72 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#73 := (+ f3 #72)
#74 := (<= #73 0::Real)
#77 := (not #74)
decl f5 :: Real
#11 := f5
#57 := (* -1::Real f5)
#68 := (+ f3 #57)
#69 := (<= #68 0::Real)
#58 := (+ f4 #57)
#56 := (>= #58 0::Real)
#86 := (or #56 #69 #77)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #56 #69)
#83 := (or #77 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#70 := (iff #13 #69)
#71 := [rewrite]: #70
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#82 := [monotonicity #67 #71]: #81
#78 := (iff #44 #77)
#75 := (iff #10 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#100 := [not-or-elim #96]: #74
#98 := (not #69)
#99 := [not-or-elim #96]: #98
#97 := [not-or-elim #96]: #54
[th-lemma arith farkas 1 1 1 #97 #99 #100]: false
unsat
ca2cf358a9693d3f8c3ab7c0c2862ca77ccd856e 85 0
#2 := false
#55 := 0::Real
decl f5 :: Real
#11 := f5
#53 := -1::Real
#57 := (* -1::Real f5)
decl f3 :: Real
#8 := f3
#70 := (+ f3 #57)
#69 := (>= #70 0::Real)
decl f4 :: Real
#9 := f4
#75 := (* -1::Real f4)
#76 := (+ f3 #75)
#74 := (>= #76 0::Real)
#68 := (not #69)
#58 := (+ f4 #57)
#56 := (>= #58 0::Real)
#92 := (or #56 #68 #74)
#97 := (not #92)
#13 := (< f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#100 := (iff #16 #97)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#98 := (iff #50 #97)
#95 := (iff #45 #92)
#86 := (or #56 #68)
#89 := (or #74 #86)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #45 #89)
#87 := (iff #38 #86)
#71 := (iff #13 #68)
#72 := [rewrite]: #71
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#88 := [monotonicity #67 #72]: #87
#84 := (iff #44 #74)
#73 := (not #74)
#79 := (not #73)
#82 := (iff #79 #74)
#83 := [rewrite]: #82
#80 := (iff #44 #79)
#77 := (iff #10 #73)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#91 := [monotonicity #85 #88]: #90
#96 := [trans #91 #94]: #95
#99 := [monotonicity #96]: #98
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#101 := [trans #52 #99]: #100
#36 := [asserted]: #16
#102 := [mp #36 #101]: #97
#104 := [not-or-elim #102]: #69
#103 := [not-or-elim #102]: #54
#105 := [not-or-elim #102]: #73
[th-lemma arith farkas 1 1 1 #105 #103 #104]: false
unsat
f171037adc5d16b4f868a5116f823085196df83e 69 0
#2 := false
#47 := 0::Real
decl f5 :: Real
#11 := f5
#45 := -1::Real
#54 := (* -1::Real f5)
decl f3 :: Real
#8 := f3
#65 := (+ f3 #54)
#66 := (<= #65 0::Real)
#67 := (not #66)
decl f4 :: Real
#9 := f4
#55 := (+ f4 #54)
#53 := (>= #55 0::Real)
#56 := (not #53)
#49 := (* -1::Real f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Real)
#46 := (not #48)
#59 := (and #46 #56)
#62 := (not #59)
#77 := (or #62 #66)
#80 := (not #77)
#14 := (< f5 f3)
#15 := (not #14)
#12 := (< f4 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (not #16)
#83 := (iff #17 #80)
#38 := (not #13)
#39 := (or #38 #15)
#42 := (not #39)
#81 := (iff #42 #80)
#78 := (iff #39 #77)
#75 := (iff #15 #66)
#70 := (not #67)
#73 := (iff #70 #66)
#74 := [rewrite]: #73
#71 := (iff #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#63 := (iff #38 #62)
#60 := (iff #13 #59)
#57 := (iff #12 #56)
#58 := [rewrite]: #57
#51 := (iff #10 #46)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#79 := [monotonicity #64 #76]: #78
#82 := [monotonicity #79]: #81
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#84 := [trans #44 #82]: #83
#37 := [asserted]: #17
#85 := [mp #37 #84]: #80
#89 := [not-or-elim #85]: #67
#86 := [not-or-elim #85]: #59
#88 := [and-elim #86]: #56
#87 := [and-elim #86]: #46
[th-lemma arith farkas 1 1 1 #87 #88 #89]: false
unsat
dc92b7d4afd6ba08cfa13227dfc8532cdbeb39b8 43 0
#2 := false
decl f4 :: (-> S2 S3)
decl f3 :: (-> S3 S3 S2)
decl f7 :: S3
#24 := f7
decl f6 :: S3
#23 := f6
#25 := (f3 f6 f7)
#26 := (f4 #25)
#27 := (= f6 #26)
#28 := (not #27)
#71 := [asserted]: #28
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#572 := (pattern #16)
#20 := (f4 #16)
#64 := (= #14 #20)
#579 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #572) #64)
#68 := (forall (vars (?v0 S3) (?v1 S3)) #64)
#582 := (iff #68 #579)
#580 := (iff #64 #64)
#581 := [refl]: #580
#583 := [quant-intro #581]: #582
#78 := (~ #68 #68)
#90 := (~ #64 #64)
#91 := [refl]: #90
#79 := [nnf-pos #91]: #78
#21 := (= #20 #14)
#22 := (forall (vars (?v0 S3) (?v1 S3)) #21)
#69 := (iff #22 #68)
#66 := (iff #21 #64)
#67 := [rewrite]: #66
#70 := [quant-intro #67]: #69
#63 := [asserted]: #22
#73 := [mp #63 #70]: #68
#92 := [mp~ #73 #79]: #68
#584 := [mp #92 #583]: #579
#240 := (not #579)
#219 := (or #240 #27)
#556 := [quant-inst #23 #24]: #219
[unit-resolution #556 #584 #71]: false
unsat
78a9d9bd4030219f6f6fc3a3d77e6844fcb4a19d 43 0
#2 := false
decl f5 :: (-> S2 S3)
decl f3 :: (-> S3 S3 S2)
decl f6 :: S3
#23 := f6
decl f7 :: S3
#24 := f7
#25 := (f3 f7 f6)
#26 := (f5 #25)
#27 := (= f6 #26)
#28 := (not #27)
#71 := [asserted]: #28
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#572 := (pattern #16)
#17 := (f5 #16)
#56 := (= #15 #17)
#573 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #572) #56)
#60 := (forall (vars (?v0 S3) (?v1 S3)) #56)
#576 := (iff #60 #573)
#574 := (iff #56 #56)
#575 := [refl]: #574
#577 := [quant-intro #575]: #576
#76 := (~ #60 #60)
#75 := (~ #56 #56)
#88 := [refl]: #75
#77 := [nnf-pos #88]: #76
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#61 := (iff #19 #60)
#58 := (iff #18 #56)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#55 := [asserted]: #19
#65 := [mp #55 #62]: #60
#89 := [mp~ #65 #77]: #60
#578 := [mp #89 #577]: #573
#238 := (not #573)
#166 := (or #238 #27)
#239 := [quant-inst #24 #23]: #166
[unit-resolution #239 #578 #71]: false
unsat
5b1fa50c4a946d66cbeae41049a8c24d25af0430 87 0
#2 := false
decl f7 :: S3
#24 := f7
decl f6 :: S3
#23 := f6
#28 := (= f6 f7)
decl f5 :: (-> S2 S3)
decl f3 :: (-> S3 S3 S2)
#25 := (f3 f6 f7)
#246 := (f5 #25)
#189 := (= #246 f7)
#243 := (= f7 #246)
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#579 := (pattern #16)
#17 := (f5 #16)
#58 := (= #15 #17)
#580 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #579) #58)
#62 := (forall (vars (?v0 S3) (?v1 S3)) #58)
#583 := (iff #62 #580)
#581 := (iff #58 #58)
#582 := [refl]: #581
#584 := [quant-intro #582]: #583
#83 := (~ #62 #62)
#82 := (~ #58 #58)
#95 := [refl]: #82
#84 := [nnf-pos #95]: #83
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#63 := (iff #19 #62)
#60 := (iff #18 #58)
#61 := [rewrite]: #60
#64 := [quant-intro #61]: #63
#57 := [asserted]: #19
#67 := [mp #57 #64]: #62
#96 := [mp~ #67 #84]: #62
#585 := [mp #96 #584]: #580
#563 := (not #580)
#565 := (or #563 #243)
#220 := [quant-inst #23 #24]: #565
#548 := [unit-resolution #220 #585]: #243
#554 := [symm #548]: #189
#556 := (= f6 #246)
#26 := (f3 f7 f6)
#352 := (f5 #26)
#547 := (= #352 #246)
#549 := (= #246 #352)
#27 := (= #25 #26)
#562 := (= #26 #25)
#74 := (not #27)
#570 := [hypothesis]: #74
#241 := (or #28 #27)
#76 := (iff #28 #74)
#29 := (iff #27 #28)
#30 := (not #29)
#77 := (iff #30 #76)
#78 := [rewrite]: #77
#73 := [asserted]: #30
#81 := [mp #73 #78]: #76
#153 := (not #76)
#240 := (or #28 #27 #153)
#154 := [def-axiom]: #240
#155 := [unit-resolution #154 #81]: #241
#560 := [unit-resolution #155 #570]: #28
#561 := (= f7 f6)
#219 := [symm #560]: #561
#203 := [monotonicity #219 #560]: #562
#546 := [symm #203]: #27
#207 := [unit-resolution #570 #546]: false
#208 := [lemma #207]: #27
#550 := [monotonicity #208]: #549
#553 := [symm #550]: #547
#559 := (= f6 #352)
#569 := (or #563 #559)
#564 := [quant-inst #24 #23]: #569
#210 := [unit-resolution #564 #585]: #559
#194 := [trans #210 #553]: #556
#195 := [trans #194 #554]: #28
#242 := (not #28)
#245 := (or #242 #74)
#233 := (or #242 #74 #153)
#244 := [def-axiom]: #233
#173 := [unit-resolution #244 #81]: #245
#209 := [unit-resolution #173 #208]: #242
[unit-resolution #209 #195]: false
unsat
55451993392a339d9aeab45ab57333ada99d25e7 155 0
#2 := false
decl f9 :: S3
#27 := f9
decl f7 :: S3
#24 := f7
#31 := (= f7 f9)
#105 := (not #31)
decl f8 :: S3
#26 := f8
decl f6 :: S3
#23 := f6
#30 := (= f6 f8)
#104 := (not #30)
#91 := (or #104 #105)
decl f3 :: (-> S3 S3 S2)
#28 := (f3 f8 f9)
#25 := (f3 f6 f7)
#29 := (= #25 #28)
#92 := (not #91)
#243 := [hypothesis]: #92
#178 := (or #91 #31)
#265 := [def-axiom]: #178
#231 := [unit-resolution #265 #243]: #31
#177 := (or #91 #30)
#264 := [def-axiom]: #177
#232 := [unit-resolution #264 #243]: #30
#233 := [monotonicity #232 #231]: #29
#78 := (not #29)
#250 := (or #78 #91)
#114 := (iff #29 #91)
#32 := (and #30 #31)
#80 := (iff #32 #78)
#117 := (iff #80 #114)
#109 := (iff #91 #29)
#115 := (iff #109 #114)
#116 := [rewrite]: #115
#112 := (iff #80 #109)
#106 := (iff #92 #78)
#110 := (iff #106 #109)
#111 := [rewrite]: #110
#107 := (iff #80 #106)
#93 := (iff #32 #92)
#94 := [rewrite]: #93
#108 := [monotonicity #94]: #107
#113 := [trans #108 #111]: #112
#118 := [trans #113 #116]: #117
#33 := (iff #29 #32)
#34 := (not #33)
#81 := (iff #34 #80)
#82 := [rewrite]: #81
#77 := [asserted]: #34
#85 := [mp #77 #82]: #80
#119 := [mp #85 #118]: #114
#257 := (not #114)
#267 := (or #78 #91 #257)
#271 := [def-axiom]: #267
#587 := [unit-resolution #271 #119]: #250
#586 := [unit-resolution #587 #243]: #78
#234 := [unit-resolution #586 #233]: false
#572 := [lemma #234]: #91
decl f5 :: (-> S2 S3)
#591 := (f5 #28)
#577 := (= #591 f9)
#592 := (= f9 #591)
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#603 := (pattern #16)
#17 := (f5 #16)
#62 := (= #15 #17)
#604 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #603) #62)
#66 := (forall (vars (?v0 S3) (?v1 S3)) #62)
#607 := (iff #66 #604)
#605 := (iff #62 #62)
#606 := [refl]: #605
#608 := [quant-intro #606]: #607
#87 := (~ #66 #66)
#86 := (~ #62 #62)
#99 := [refl]: #86
#88 := [nnf-pos #99]: #87
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#67 := (iff #19 #66)
#64 := (iff #18 #62)
#65 := [rewrite]: #64
#68 := [quant-intro #65]: #67
#61 := [asserted]: #19
#71 := [mp #61 #68]: #66
#100 := [mp~ #71 #88]: #66
#609 := [mp #100 #608]: #604
#255 := (not #604)
#247 := (or #255 #592)
#585 := [quant-inst #26 #27]: #247
#573 := [unit-resolution #585 #609]: #592
#213 := [symm #573]: #577
#578 := (= f7 #591)
#589 := (f5 #25)
#576 := (= #589 #591)
#197 := (or #29 #92)
#268 := (or #29 #92 #257)
#269 := [def-axiom]: #268
#270 := [unit-resolution #269 #119]: #197
#574 := [unit-resolution #270 #572]: #29
#571 := [monotonicity #574]: #576
#244 := (= f7 #589)
#256 := (or #255 #244)
#590 := [quant-inst #23 #24]: #256
#575 := [unit-resolution #590 #609]: #244
#580 := [trans #575 #571]: #578
#218 := [trans #580 #213]: #31
decl f4 :: (-> S2 S3)
#584 := (f4 #28)
#568 := (= #584 f8)
#242 := (= f8 #584)
#20 := (f4 #16)
#70 := (= #14 #20)
#610 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #603) #70)
#74 := (forall (vars (?v0 S3) (?v1 S3)) #70)
#613 := (iff #74 #610)
#611 := (iff #70 #70)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#89 := (~ #74 #74)
#101 := (~ #70 #70)
#102 := [refl]: #101
#90 := [nnf-pos #102]: #89
#21 := (= #20 #14)
#22 := (forall (vars (?v0 S3) (?v1 S3)) #21)
#75 := (iff #22 #74)
#72 := (iff #21 #70)
#73 := [rewrite]: #72
#76 := [quant-intro #73]: #75
#69 := [asserted]: #22
#79 := [mp #69 #76]: #74
#103 := [mp~ #79 #90]: #74
#615 := [mp #103 #614]: #610
#593 := (not #610)
#227 := (or #593 #242)
#570 := [quant-inst #26 #27]: #227
#219 := [unit-resolution #570 #615]: #242
#569 := [symm #219]: #568
#275 := (= f6 #584)
#376 := (f4 #25)
#579 := (= #376 #584)
#582 := [monotonicity #574]: #579
#583 := (= f6 #376)
#588 := (or #593 #583)
#594 := [quant-inst #23 #24]: #588
#581 := [unit-resolution #594 #615]: #583
#291 := [trans #581 #582]: #275
#292 := [trans #291 #569]: #30
#179 := (or #92 #104 #105)
#266 := [def-axiom]: #179
[unit-resolution #266 #292 #218 #572]: false
unsat
be42530dd2762a091effcef8ad846d02ec16506c 91 0
#2 := false
decl f12 :: S3
#42 := f12
decl f9 :: S3
#36 := f9
#49 := (= f9 f12)
decl f7 :: (-> S5 S3)
decl f6 :: (-> S3 S2 S5)
decl f3 :: (-> S3 S4 S2)
decl f14 :: S4
#44 := f14
decl f13 :: S3
#43 := f13
#45 := (f3 f13 f14)
#46 := (f6 f12 #45)
#47 := (f7 #46)
decl f11 :: S4
#38 := f11
decl f10 :: S3
#37 := f10
#39 := (f3 f10 f11)
#40 := (f6 f9 #39)
#41 := (f7 #40)
#48 := (= #41 #47)
#50 := (iff #48 #49)
#327 := (iff #49 #48)
#613 := (= f12 #47)
#8 := (:var 0 S2)
#20 := (:var 1 S3)
#26 := (f6 #20 #8)
#654 := (pattern #26)
#33 := (f7 #26)
#111 := (= #20 #33)
#667 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #654) #111)
#115 := (forall (vars (?v0 S3) (?v1 S2)) #111)
#670 := (iff #115 #667)
#668 := (iff #111 #111)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#136 := (~ #115 #115)
#157 := (~ #111 #111)
#158 := [refl]: #157
#137 := [nnf-pos #158]: #136
#34 := (= #33 #20)
#35 := (forall (vars (?v0 S3) (?v1 S2)) #34)
#116 := (iff #35 #115)
#113 := (iff #34 #111)
#114 := [rewrite]: #113
#117 := [quant-intro #114]: #116
#110 := [asserted]: #35
#120 := [mp #110 #117]: #115
#159 := [mp~ #120 #137]: #115
#672 := [mp #159 #671]: #667
#249 := (not #667)
#618 := (or #249 #613)
#604 := [quant-inst #42 #45]: #618
#605 := [unit-resolution #604 #672]: #613
#270 := (= f9 #41)
#614 := (or #249 #270)
#616 := [quant-inst #36 #39]: #614
#311 := [unit-resolution #616 #672]: #270
#328 := [monotonicity #311 #605]: #327
#329 := [symm #328]: #50
#302 := (not #49)
#119 := (not #48)
#315 := (iff #119 #302)
#330 := [monotonicity #329]: #315
#254 := [hypothesis]: #119
#221 := [mp #254 #330]: #302
#301 := (or #49 #48)
#121 := (iff #49 #119)
#51 := (not #50)
#122 := (iff #51 #121)
#123 := [rewrite]: #122
#118 := [asserted]: #51
#126 := [mp #118 #123]: #121
#213 := (not #121)
#300 := (or #49 #48 #213)
#214 := [def-axiom]: #300
#215 := [unit-resolution #214 #126]: #301
#615 := [unit-resolution #215 #254]: #49
#600 := [unit-resolution #615 #221]: false
#601 := [lemma #600]: #48
#324 := [mp #601 #329]: #49
#305 := (or #302 #119)
#293 := (or #302 #119 #213)
#304 := [def-axiom]: #293
#233 := [unit-resolution #304 #126]: #305
#323 := [unit-resolution #233 #601]: #302
[unit-resolution #323 #324]: false
unsat
703ada2cefd34540ab26d41eac317697843d015a 210 0
#2 := false
decl f14 :: S4
#44 := f14
decl f11 :: S4
#38 := f11
#50 := (= f11 f14)
#163 := (not #50)
decl f13 :: S3
#43 := f13
decl f10 :: S3
#37 := f10
#49 := (= f10 f13)
#162 := (not #49)
#140 := (or #162 #163)
decl f8 :: (-> S5 S2)
decl f6 :: (-> S3 S2 S5)
decl f3 :: (-> S3 S4 S2)
#45 := (f3 f13 f14)
decl f12 :: S3
#42 := f12
#46 := (f6 f12 #45)
#47 := (f8 #46)
#39 := (f3 f10 f11)
decl f9 :: S3
#36 := f9
#40 := (f6 f9 #39)
#41 := (f8 #40)
#48 := (= #41 #47)
#271 := (= #45 #47)
#8 := (:var 0 S2)
#20 := (:var 1 S3)
#26 := (f6 #20 #8)
#676 := (pattern #26)
#27 := (f8 #26)
#97 := (= #8 #27)
#677 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #676) #97)
#101 := (forall (vars (?v0 S3) (?v1 S2)) #97)
#680 := (iff #101 #677)
#678 := (iff #97 #97)
#679 := [refl]: #678
#681 := [quant-intro #679]: #680
#134 := (~ #101 #101)
#153 := (~ #97 #97)
#154 := [refl]: #153
#135 := [nnf-pos #154]: #134
#28 := (= #27 #8)
#29 := (forall (vars (?v0 S3) (?v1 S2)) #28)
#102 := (iff #29 #101)
#99 := (iff #28 #97)
#100 := [rewrite]: #99
#103 := [quant-intro #100]: #102
#96 := [asserted]: #29
#106 := [mp #96 #103]: #101
#155 := [mp~ #106 #135]: #101
#682 := [mp #155 #681]: #677
#636 := (not #677)
#627 := (or #636 #271)
#333 := [quant-inst #42 #45]: #627
#337 := [unit-resolution #333 #682]: #271
#624 := (= #41 #45)
#346 := (= #39 #45)
#141 := (not #140)
#626 := [hypothesis]: #141
#236 := (or #140 #50)
#323 := [def-axiom]: #236
#352 := [unit-resolution #323 #626]: #50
#235 := (or #140 #49)
#322 := [def-axiom]: #235
#243 := [unit-resolution #322 #626]: #49
#620 := [monotonicity #243 #352]: #346
#623 := (= #41 #39)
#633 := (= #39 #41)
#638 := (or #636 #633)
#276 := [quant-inst #36 #39]: #638
#622 := [unit-resolution #276 #682]: #633
#345 := [symm #622]: #623
#621 := [trans #345 #620]: #624
#625 := [trans #621 #337]: #48
#121 := (not #48)
#308 := (or #121 #140)
#172 := (iff #48 #140)
#51 := (and #49 #50)
#123 := (iff #51 #121)
#175 := (iff #123 #172)
#167 := (iff #140 #48)
#173 := (iff #167 #172)
#174 := [rewrite]: #173
#170 := (iff #123 #167)
#164 := (iff #141 #121)
#168 := (iff #164 #167)
#169 := [rewrite]: #168
#165 := (iff #123 #164)
#142 := (iff #51 #141)
#143 := [rewrite]: #142
#166 := [monotonicity #143]: #165
#171 := [trans #166 #169]: #170
#176 := [trans #171 #174]: #175
#52 := (iff #48 #51)
#53 := (not #52)
#124 := (iff #53 #123)
#125 := [rewrite]: #124
#120 := [asserted]: #53
#128 := [mp #120 #125]: #123
#177 := [mp #128 #176]: #172
#315 := (not #172)
#325 := (or #121 #140 #315)
#329 := [def-axiom]: #325
#645 := [unit-resolution #329 #177]: #308
#349 := [unit-resolution #645 #626]: #121
#334 := [unit-resolution #349 #625]: false
#335 := [lemma #334]: #140
decl f5 :: (-> S2 S4)
#285 := (f5 #45)
#609 := (= #285 f14)
#628 := (= f14 #285)
#21 := (:var 0 S4)
#22 := (f3 #20 #21)
#669 := (pattern #22)
#23 := (f5 #22)
#89 := (= #21 #23)
#670 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #669) #89)
#93 := (forall (vars (?v0 S3) (?v1 S4)) #89)
#673 := (iff #93 #670)
#671 := (iff #89 #89)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#132 := (~ #93 #93)
#150 := (~ #89 #89)
#151 := [refl]: #150
#133 := [nnf-pos #151]: #132
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S3) (?v1 S4)) #24)
#94 := (iff #25 #93)
#91 := (iff #24 #89)
#92 := [rewrite]: #91
#95 := [quant-intro #92]: #94
#88 := [asserted]: #25
#98 := [mp #88 #95]: #93
#152 := [mp~ #98 #133]: #93
#675 := [mp #152 #674]: #670
#643 := (not #670)
#631 := (or #643 #628)
#632 := [quant-inst #43 #44]: #631
#336 := [unit-resolution #632 #675]: #628
#610 := [symm #336]: #609
#605 := (= f11 #285)
#651 := (f5 #39)
#619 := (= #651 #285)
#616 := (= #47 #45)
#617 := [symm #337]: #616
#330 := (= #39 #47)
#255 := (or #48 #141)
#326 := (or #48 #141 #315)
#327 := [def-axiom]: #326
#328 := [unit-resolution #327 #177]: #255
#338 := [unit-resolution #328 #335]: #48
#614 := [trans #622 #338]: #330
#618 := [trans #614 #617]: #346
#608 := [monotonicity #618]: #619
#646 := (= f11 #651)
#301 := (or #643 #646)
#644 := [quant-inst #37 #38]: #301
#615 := [unit-resolution #644 #675]: #646
#606 := [trans #615 #608]: #605
#611 := [trans #606 #610]: #50
decl f4 :: (-> S2 S3)
#292 := (f4 #45)
#455 := (= #292 f13)
#630 := (= f13 #292)
#30 := (f4 #22)
#105 := (= #20 #30)
#683 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #669) #105)
#109 := (forall (vars (?v0 S3) (?v1 S4)) #105)
#686 := (iff #109 #683)
#684 := (iff #105 #105)
#685 := [refl]: #684
#687 := [quant-intro #685]: #686
#136 := (~ #109 #109)
#156 := (~ #105 #105)
#157 := [refl]: #156
#137 := [nnf-pos #157]: #136
#31 := (= #30 #20)
#32 := (forall (vars (?v0 S3) (?v1 S4)) #31)
#110 := (iff #32 #109)
#107 := (iff #31 #105)
#108 := [rewrite]: #107
#111 := [quant-intro #108]: #110
#104 := [asserted]: #32
#114 := [mp #104 #111]: #109
#158 := [mp~ #114 #137]: #109
#688 := [mp #158 #687]: #683
#289 := (not #683)
#629 := (or #289 #630)
#635 := [quant-inst #43 #44]: #629
#612 := [unit-resolution #635 #688]: #630
#456 := [symm #612]: #455
#598 := (= f10 #292)
#300 := (f4 #39)
#613 := (= #300 #292)
#454 := [monotonicity #618]: #613
#305 := (= f10 #300)
#290 := (or #289 #305)
#291 := [quant-inst #37 #38]: #290
#607 := [unit-resolution #291 #688]: #305
#599 := [trans #607 #454]: #598
#600 := [trans #599 #456]: #49
#237 := (or #141 #162 #163)
#324 := [def-axiom]: #237
[unit-resolution #324 #600 #611 #335]: false
unsat
b85ad566d41295cad233b645b03aa0d599f756ba 144 0
#2 := false
decl f13 :: S3
#44 := f13
decl f10 :: S3
#37 := f10
#51 := (= f10 f13)
decl f4 :: (-> S2 S3)
decl f8 :: (-> S5 S2)
decl f6 :: (-> S3 S2 S5)
decl f3 :: (-> S3 S4 S2)
decl f14 :: S4
#45 := f14
#46 := (f3 f13 f14)
decl f12 :: S3
#43 := f12
#47 := (f6 f12 #46)
#48 := (f8 #47)
#49 := (f4 #48)
decl f11 :: S4
#38 := f11
#39 := (f3 f10 f11)
decl f9 :: S3
#36 := f9
#40 := (f6 f9 #39)
#41 := (f8 #40)
#42 := (f4 #41)
#50 := (= #42 #49)
#52 := (iff #50 #51)
#318 := (= #49 f13)
#609 := (f4 #46)
#315 := (= #609 f13)
#615 := (= f13 #609)
#21 := (:var 0 S4)
#20 := (:var 1 S3)
#22 := (f3 #20 #21)
#649 := (pattern #22)
#30 := (f4 #22)
#105 := (= #20 #30)
#663 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #649) #105)
#109 := (forall (vars (?v0 S3) (?v1 S4)) #105)
#666 := (iff #109 #663)
#664 := (iff #105 #105)
#665 := [refl]: #664
#667 := [quant-intro #665]: #666
#136 := (~ #109 #109)
#156 := (~ #105 #105)
#157 := [refl]: #156
#137 := [nnf-pos #157]: #136
#31 := (= #30 #20)
#32 := (forall (vars (?v0 S3) (?v1 S4)) #31)
#110 := (iff #32 #109)
#107 := (iff #31 #105)
#108 := [rewrite]: #107
#111 := [quant-intro #108]: #110
#104 := [asserted]: #32
#114 := [mp #104 #111]: #109
#158 := [mp~ #114 #137]: #109
#668 := [mp #158 #667]: #663
#612 := (not #663)
#257 := (or #612 #615)
#619 := [quant-inst #44 #45]: #257
#326 := [unit-resolution #619 #668]: #615
#316 := [symm #326]: #315
#605 := (= #49 #609)
#604 := (= #48 #46)
#617 := (= #46 #48)
#8 := (:var 0 S2)
#26 := (f6 #20 #8)
#656 := (pattern #26)
#27 := (f8 #26)
#97 := (= #8 #27)
#657 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #656) #97)
#101 := (forall (vars (?v0 S3) (?v1 S2)) #97)
#660 := (iff #101 #657)
#658 := (iff #97 #97)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#134 := (~ #101 #101)
#153 := (~ #97 #97)
#154 := [refl]: #153
#135 := [nnf-pos #154]: #134
#28 := (= #27 #8)
#29 := (forall (vars (?v0 S3) (?v1 S2)) #28)
#102 := (iff #29 #101)
#99 := (iff #28 #97)
#100 := [rewrite]: #99
#103 := [quant-intro #100]: #102
#96 := [asserted]: #29
#106 := [mp #96 #103]: #101
#155 := [mp~ #106 #135]: #101
#662 := [mp #155 #661]: #657
#620 := (not #657)
#332 := (or #620 #617)
#223 := [quant-inst #43 #46]: #332
#600 := [unit-resolution #223 #662]: #617
#601 := [symm #600]: #604
#314 := [monotonicity #601]: #605
#596 := [trans #314 #316]: #318
#590 := (= #42 f10)
#608 := (f4 #39)
#588 := (= #608 f10)
#269 := (= f10 #608)
#613 := (or #612 #269)
#614 := [quant-inst #37 #38]: #613
#597 := [unit-resolution #614 #668]: #269
#589 := [symm #597]: #588
#595 := (= #42 #608)
#594 := (= #41 #39)
#618 := (= #39 #41)
#606 := (or #620 #618)
#607 := [quant-inst #36 #39]: #606
#310 := [unit-resolution #607 #662]: #618
#598 := [symm #310]: #594
#599 := [monotonicity #598]: #595
#585 := [trans #599 #589]: #590
#586 := [monotonicity #585 #596]: #52
#304 := (not #51)
#121 := (not #50)
#591 := (iff #121 #304)
#592 := [monotonicity #586]: #591
#317 := [hypothesis]: #121
#587 := [mp #317 #592]: #304
#303 := (or #51 #50)
#123 := (iff #51 #121)
#53 := (not #52)
#124 := (iff #53 #123)
#125 := [rewrite]: #124
#120 := [asserted]: #53
#128 := [mp #120 #125]: #123
#215 := (not #123)
#302 := (or #51 #50 #215)
#216 := [def-axiom]: #302
#217 := [unit-resolution #216 #128]: #303
#602 := [unit-resolution #217 #317]: #51
#593 := [unit-resolution #602 #587]: false
#434 := [lemma #593]: #50
#436 := [mp #434 #586]: #51
#307 := (or #304 #121)
#295 := (or #304 #121 #215)
#306 := [def-axiom]: #295
#235 := [unit-resolution #306 #128]: #307
#435 := [unit-resolution #235 #434]: #304
[unit-resolution #435 #436]: false
unsat
b6231ad6e1765a00bbbe9f66100da15b0775b711 144 0
#2 := false
decl f14 :: S4
#45 := f14
decl f11 :: S4
#38 := f11
#51 := (= f11 f14)
decl f5 :: (-> S2 S4)
decl f8 :: (-> S5 S2)
decl f6 :: (-> S3 S2 S5)
decl f3 :: (-> S3 S4 S2)
decl f13 :: S3
#44 := f13
#46 := (f3 f13 f14)
decl f12 :: S3
#43 := f12
#47 := (f6 f12 #46)
#48 := (f8 #47)
#49 := (f5 #48)
decl f10 :: S3
#37 := f10
#39 := (f3 f10 f11)
decl f9 :: S3
#36 := f9
#40 := (f6 f9 #39)
#41 := (f8 #40)
#42 := (f5 #41)
#50 := (= #42 #49)
#52 := (iff #50 #51)
#318 := (= #49 f14)
#610 := (f5 #46)
#315 := (= #610 f14)
#611 := (= f14 #610)
#21 := (:var 0 S4)
#20 := (:var 1 S3)
#22 := (f3 #20 #21)
#649 := (pattern #22)
#23 := (f5 #22)
#89 := (= #21 #23)
#650 := (forall (vars (?v0 S3) (?v1 S4)) (:pat #649) #89)
#93 := (forall (vars (?v0 S3) (?v1 S4)) #89)
#653 := (iff #93 #650)
#651 := (iff #89 #89)
#652 := [refl]: #651
#654 := [quant-intro #652]: #653
#132 := (~ #93 #93)
#150 := (~ #89 #89)
#151 := [refl]: #150
#133 := [nnf-pos #151]: #132
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S3) (?v1 S4)) #24)
#94 := (iff #25 #93)
#91 := (iff #24 #89)
#92 := [rewrite]: #91
#95 := [quant-intro #92]: #94
#88 := [asserted]: #25
#98 := [mp #88 #95]: #93
#152 := [mp~ #98 #133]: #93
#655 := [mp #152 #654]: #650
#270 := (not #650)
#251 := (or #270 #611)
#616 := [quant-inst #44 #45]: #251
#326 := [unit-resolution #616 #655]: #611
#316 := [symm #326]: #315
#605 := (= #49 #610)
#604 := (= #48 #46)
#617 := (= #46 #48)
#8 := (:var 0 S2)
#26 := (f6 #20 #8)
#656 := (pattern #26)
#27 := (f8 #26)
#97 := (= #8 #27)
#657 := (forall (vars (?v0 S3) (?v1 S2)) (:pat #656) #97)
#101 := (forall (vars (?v0 S3) (?v1 S2)) #97)
#660 := (iff #101 #657)
#658 := (iff #97 #97)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#134 := (~ #101 #101)
#153 := (~ #97 #97)
#154 := [refl]: #153
#135 := [nnf-pos #154]: #134
#28 := (= #27 #8)
#29 := (forall (vars (?v0 S3) (?v1 S2)) #28)
#102 := (iff #29 #101)
#99 := (iff #28 #97)
#100 := [rewrite]: #99
#103 := [quant-intro #100]: #102
#96 := [asserted]: #29
#106 := [mp #96 #103]: #101
#155 := [mp~ #106 #135]: #101
#662 := [mp #155 #661]: #657
#620 := (not #657)
#332 := (or #620 #617)
#223 := [quant-inst #43 #46]: #332
#600 := [unit-resolution #223 #662]: #617
#601 := [symm #600]: #604
#314 := [monotonicity #601]: #605
#596 := [trans #314 #316]: #318
#590 := (= #42 f11)
#623 := (f5 #39)
#588 := (= #623 f11)
#281 := (= f11 #623)
#271 := (or #270 #281)
#272 := [quant-inst #37 #38]: #271
#597 := [unit-resolution #272 #655]: #281
#589 := [symm #597]: #588
#595 := (= #42 #623)
#594 := (= #41 #39)
#618 := (= #39 #41)
#606 := (or #620 #618)
#607 := [quant-inst #36 #39]: #606
#310 := [unit-resolution #607 #662]: #618
#598 := [symm #310]: #594
#599 := [monotonicity #598]: #595
#585 := [trans #599 #589]: #590
#586 := [monotonicity #585 #596]: #52
#304 := (not #51)
#121 := (not #50)
#591 := (iff #121 #304)
#592 := [monotonicity #586]: #591
#317 := [hypothesis]: #121
#587 := [mp #317 #592]: #304
#303 := (or #51 #50)
#123 := (iff #51 #121)
#53 := (not #52)
#124 := (iff #53 #123)
#125 := [rewrite]: #124
#120 := [asserted]: #53
#128 := [mp #120 #125]: #123
#215 := (not #123)
#302 := (or #51 #50 #215)
#216 := [def-axiom]: #302
#217 := [unit-resolution #216 #128]: #303
#602 := [unit-resolution #217 #317]: #51
#593 := [unit-resolution #602 #587]: false
#434 := [lemma #593]: #50
#436 := [mp #434 #586]: #51
#307 := (or #304 #121)
#295 := (or #304 #121 #215)
#306 := [def-axiom]: #295
#235 := [unit-resolution #306 #128]: #307
#435 := [unit-resolution #235 #434]: #304
[unit-resolution #435 #436]: false
unsat
8157d199c7019faf223d954e5ed37245ebb98783 103 0
#2 := false
decl f7 :: S3
#24 := f7
decl f6 :: S3
#23 := f6
#29 := (= f6 f7)
decl f5 :: (-> S2 S3)
decl f3 :: (-> S3 S3 S2)
#25 := (f3 f6 f7)
#27 := (f5 #25)
decl f4 :: (-> S2 S3)
#26 := (f4 #25)
#28 := (= #26 #27)
#30 := (iff #28 #29)
#561 := (iff #29 #28)
#248 := (= f7 #27)
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#580 := (pattern #16)
#17 := (f5 #16)
#59 := (= #15 #17)
#581 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #580) #59)
#63 := (forall (vars (?v0 S3) (?v1 S3)) #59)
#584 := (iff #63 #581)
#582 := (iff #59 #59)
#583 := [refl]: #582
#585 := [quant-intro #583]: #584
#84 := (~ #63 #63)
#83 := (~ #59 #59)
#96 := [refl]: #83
#85 := [nnf-pos #96]: #84
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#64 := (iff #19 #63)
#61 := (iff #18 #59)
#62 := [rewrite]: #61
#65 := [quant-intro #62]: #64
#58 := [asserted]: #19
#68 := [mp #58 #65]: #63
#97 := [mp~ #68 #85]: #63
#586 := [mp #97 #585]: #581
#560 := (not #581)
#232 := (or #560 #248)
#233 := [quant-inst #23 #24]: #232
#565 := [unit-resolution #233 #586]: #248
#227 := (= f6 #26)
#20 := (f4 #16)
#67 := (= #14 #20)
#587 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #580) #67)
#71 := (forall (vars (?v0 S3) (?v1 S3)) #67)
#590 := (iff #71 #587)
#588 := (iff #67 #67)
#589 := [refl]: #588
#591 := [quant-intro #589]: #590
#86 := (~ #71 #71)
#98 := (~ #67 #67)
#99 := [refl]: #98
#87 := [nnf-pos #99]: #86
#21 := (= #20 #14)
#22 := (forall (vars (?v0 S3) (?v1 S3)) #21)
#72 := (iff #22 #71)
#69 := (iff #21 #67)
#70 := [rewrite]: #69
#73 := [quant-intro #70]: #72
#66 := [asserted]: #22
#76 := [mp #66 #73]: #71
#100 := [mp~ #76 #87]: #71
#592 := [mp #100 #591]: #587
#568 := (not #587)
#569 := (or #568 #227)
#570 := [quant-inst #23 #24]: #569
#571 := [unit-resolution #570 #592]: #227
#219 := [monotonicity #571 #565]: #561
#224 := [symm #219]: #30
#243 := (not #29)
#75 := (not #28)
#562 := (iff #75 #243)
#220 := [monotonicity #224]: #562
#353 := [hypothesis]: #75
#563 := [mp #353 #220]: #243
#242 := (or #29 #28)
#77 := (iff #29 #75)
#31 := (not #30)
#78 := (iff #31 #77)
#79 := [rewrite]: #78
#74 := [asserted]: #31
#82 := [mp #74 #79]: #77
#154 := (not #77)
#241 := (or #29 #28 #154)
#155 := [def-axiom]: #241
#156 := [unit-resolution #155 #82]: #242
#567 := [unit-resolution #156 #353]: #29
#204 := [unit-resolution #567 #563]: false
#547 := [lemma #204]: #28
#209 := [mp #547 #224]: #29
#246 := (or #243 #75)
#234 := (or #243 #75 #154)
#245 := [def-axiom]: #234
#174 := [unit-resolution #245 #82]: #246
#208 := [unit-resolution #174 #547]: #243
[unit-resolution #208 #209]: false
unsat
14ec8583ed83b806bed26d093fab6c858f541eb6 111 0
#2 := false
decl f5 :: (-> S2 S3)
decl f9 :: S2
#28 := f9
#33 := (f5 f9)
decl f4 :: (-> S2 S3)
decl f6 :: S2
#23 := f6
#32 := (f4 f6)
#34 := (= #32 #33)
decl f3 :: (-> S3 S3 S2)
decl f7 :: S3
#24 := f7
decl f8 :: S3
#25 := f8
#29 := (f3 f8 f7)
#169 := (f5 #29)
#223 := (= #169 #33)
#233 := (= #33 #169)
#30 := (= f9 #29)
#26 := (f3 f7 f8)
#27 := (= f6 #26)
#31 := (and #27 #30)
#80 := (not #31)
#82 := (or #80 #34)
#85 := (not #82)
#35 := (implies #31 #34)
#36 := (not #35)
#86 := (iff #36 #85)
#83 := (iff #35 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#79 := [asserted]: #36
#90 := [mp #79 #87]: #85
#88 := [not-or-elim #90]: #31
#91 := [and-elim #88]: #30
#576 := [monotonicity #91]: #233
#224 := [symm #576]: #223
#564 := (= #32 #169)
#579 := (= f7 #169)
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#593 := (pattern #16)
#17 := (f5 #16)
#64 := (= #15 #17)
#594 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #593) #64)
#68 := (forall (vars (?v0 S3) (?v1 S3)) #64)
#597 := (iff #68 #594)
#595 := (iff #64 #64)
#596 := [refl]: #595
#598 := [quant-intro #596]: #597
#97 := (~ #68 #68)
#96 := (~ #64 #64)
#113 := [refl]: #96
#98 := [nnf-pos #113]: #97
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#69 := (iff #19 #68)
#66 := (iff #18 #64)
#67 := [rewrite]: #66
#70 := [quant-intro #67]: #69
#63 := [asserted]: #19
#73 := [mp #63 #70]: #68
#114 := [mp~ #73 #98]: #68
#599 := [mp #114 #598]: #594
#234 := (not #594)
#583 := (or #234 #579)
#578 := [quant-inst #25 #24]: #583
#584 := [unit-resolution #578 #599]: #579
#562 := (= #32 f7)
#254 := (f4 #26)
#221 := (= #254 f7)
#261 := (= f7 #254)
#20 := (f4 #16)
#72 := (= #14 #20)
#600 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #593) #72)
#76 := (forall (vars (?v0 S3) (?v1 S3)) #72)
#603 := (iff #76 #600)
#601 := (iff #72 #72)
#602 := [refl]: #601
#604 := [quant-intro #602]: #603
#99 := (~ #76 #76)
#115 := (~ #72 #72)
#116 := [refl]: #115
#100 := [nnf-pos #116]: #99
#21 := (= #20 #14)
#22 := (forall (vars (?v0 S3) (?v1 S3)) #21)
#77 := (iff #22 #76)
#74 := (iff #21 #72)
#75 := [rewrite]: #74
#78 := [quant-intro #75]: #77
#71 := [asserted]: #22
#81 := [mp #71 #78]: #76
#117 := [mp~ #81 #100]: #76
#605 := [mp #117 #604]: #600
#246 := (not #600)
#580 := (or #246 #261)
#581 := [quant-inst #24 #25]: #580
#582 := [unit-resolution #581 #605]: #261
#222 := [symm #582]: #221
#237 := (= #32 #254)
#89 := [and-elim #88]: #27
#575 := [monotonicity #89]: #237
#563 := [trans #575 #222]: #562
#565 := [trans #563 #584]: #564
#566 := [trans #565 #224]: #34
#92 := (not #34)
#93 := [not-or-elim #90]: #92
[unit-resolution #93 #566]: false
unsat
139963e49c370526a172ba9c7501eab1a4a7d779 113 0
#2 := false
decl f3 :: (-> S3 S3 S2)
decl f4 :: (-> S2 S3)
decl f6 :: S2
#23 := f6
#24 := (f4 f6)
decl f5 :: (-> S2 S3)
#25 := (f5 f6)
#27 := (f3 #25 #24)
#28 := (= f6 #27)
#246 := (f3 #24 #25)
#550 := (= #246 #27)
#548 := (= #27 #246)
#26 := (= #24 #25)
#247 := (f5 #27)
#561 := (= #247 #25)
#560 := (= #27 f6)
#74 := (not #26)
#567 := [hypothesis]: #74
#241 := (or #28 #26)
#76 := (iff #28 #74)
#29 := (iff #26 #28)
#30 := (not #29)
#77 := (iff #30 #76)
#78 := [rewrite]: #77
#73 := [asserted]: #30
#81 := [mp #73 #78]: #76
#153 := (not #76)
#240 := (or #28 #26 #153)
#154 := [def-axiom]: #240
#155 := [unit-resolution #154 #81]: #241
#568 := [unit-resolution #155 #567]: #28
#218 := [symm #568]: #560
#219 := [monotonicity #218]: #561
#226 := (= #24 #247)
#15 := (:var 0 S3)
#14 := (:var 1 S3)
#16 := (f3 #14 #15)
#579 := (pattern #16)
#17 := (f5 #16)
#58 := (= #15 #17)
#580 := (forall (vars (?v0 S3) (?v1 S3)) (:pat #579) #58)
#62 := (forall (vars (?v0 S3) (?v1 S3)) #58)
#583 := (iff #62 #580)
#581 := (iff #58 #58)
#582 := [refl]: #581
#584 := [quant-intro #582]: #583
#83 := (~ #62 #62)
#82 := (~ #58 #58)
#95 := [refl]: #82
#84 := [nnf-pos #95]: #83
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3) (?v1 S3)) #18)
#63 := (iff #19 #62)
#60 := (iff #18 #58)
#61 := [rewrite]: #60
#64 := [quant-intro #61]: #63
#57 := [asserted]: #19
#67 := [mp #57 #64]: #62
#96 := [mp~ #67 #84]: #62
#585 := [mp #96 #584]: #580
#231 := (not #580)
#232 := (or #231 #226)
#566 := [quant-inst #25 #24]: #232
#223 := [unit-resolution #566 #585]: #226
#562 := [trans #223 #219]: #26
#203 := [unit-resolution #567 #562]: false
#546 := [lemma #203]: #26
#208 := (= #25 #24)
#209 := [symm #546]: #208
#549 := [monotonicity #209 #546]: #548
#551 := [symm #549]: #550
#243 := (= f6 #246)
#8 := (:var 0 S2)
#10 := (f5 #8)
#572 := (pattern #10)
#9 := (f4 #8)
#571 := (pattern #9)
#11 := (f3 #9 #10)
#51 := (= #8 #11)
#573 := (forall (vars (?v0 S2)) (:pat #571 #572) #51)
#54 := (forall (vars (?v0 S2)) #51)
#576 := (iff #54 #573)
#574 := (iff #51 #51)
#575 := [refl]: #574
#577 := [quant-intro #575]: #576
#93 := (~ #54 #54)
#91 := (~ #51 #51)
#92 := [refl]: #91
#94 := [nnf-pos #92]: #93
#12 := (= #11 #8)
#13 := (forall (vars (?v0 S2)) #12)
#55 := (iff #13 #54)
#52 := (iff #12 #51)
#53 := [rewrite]: #52
#56 := [quant-intro #53]: #55
#50 := [asserted]: #13
#59 := [mp #50 #56]: #54
#80 := [mp~ #59 #94]: #54
#578 := [mp #80 #577]: #573
#563 := (not #573)
#565 := (or #563 #243)
#220 := [quant-inst #23]: #565
#210 := [unit-resolution #220 #578]: #243
#552 := [trans #210 #551]: #28
#242 := (not #28)
#245 := (or #242 #74)
#233 := (or #242 #74 #153)
#244 := [def-axiom]: #233
#173 := [unit-resolution #244 #81]: #245
#207 := [unit-resolution #173 #546]: #242
[unit-resolution #207 #552]: false
unsat
f647fab40fc301b72eb10ef98660c1294aab2896 91 0
#2 := false
decl f3 :: (-> S2 S3 S4 S3 S4)
decl f6 :: S3
#25 := f6
decl f7 :: S4
#26 := f7
decl f5 :: S2
#24 := f5
#27 := (f3 f5 f6 f7 f6)
#71 := (= f7 #27)
#75 := (not #71)
#28 := (= #27 f7)
#29 := (not #28)
#76 := (iff #29 #75)
#73 := (iff #28 #71)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#70 := [asserted]: #29
#80 := [mp #70 #77]: #75
#11 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#12 := (f3 #8 #9 #10 #11)
#574 := (pattern #12)
decl f4 :: (-> S2 S3 S4)
#14 := (f4 #8 #11)
#95 := (= #12 #14)
#94 := (= #10 #12)
#50 := (= #9 #11)
#84 := (ite #50 #94 #95)
#575 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #574) #84)
#87 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #84)
#578 := (iff #87 #575)
#576 := (iff #84 #84)
#577 := [refl]: #576
#579 := [quant-intro #577]: #578
#53 := (ite #50 #10 #14)
#56 := (= #12 #53)
#59 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #56)
#96 := (iff #59 #87)
#85 := (iff #56 #84)
#86 := [rewrite]: #85
#97 := [quant-intro #86]: #96
#90 := (~ #59 #59)
#88 := (~ #56 #56)
#89 := [refl]: #88
#91 := [nnf-pos #89]: #90
#13 := (= #11 #9)
#15 := (ite #13 #10 #14)
#16 := (= #12 #15)
#17 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #16)
#60 := (iff #17 #59)
#57 := (iff #16 #56)
#54 := (= #15 #53)
#51 := (iff #13 #50)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#61 := [quant-intro #58]: #60
#49 := [asserted]: #17
#64 := [mp #49 #61]: #59
#79 := [mp~ #64 #91]: #59
#98 := [mp #79 #97]: #87
#580 := [mp #98 #579]: #575
#229 := (not #575)
#566 := (or #229 #71)
#156 := (f4 f5 f6)
#243 := (= #27 #156)
#157 := (= f6 f6)
#244 := (ite #157 #71 #243)
#568 := (or #229 #244)
#355 := (iff #568 #566)
#234 := (iff #566 #566)
#235 := [rewrite]: #234
#246 := (iff #244 #71)
#1 := true
#236 := (ite true #71 #243)
#176 := (iff #236 #71)
#249 := [rewrite]: #176
#247 := (iff #244 #236)
#158 := (iff #157 true)
#245 := [rewrite]: #158
#248 := [monotonicity #245]: #247
#250 := [trans #248 #249]: #246
#562 := [monotonicity #250]: #355
#569 := [trans #562 #235]: #355
#223 := [quant-inst #24 #25 #26 #25]: #568
#570 := [mp #223 #569]: #566
[unit-resolution #570 #580 #80]: false
unsat
af1534012c3020b480c853afaac6d90a71a2c734 85 0
#2 := false
decl f4 :: (-> S2 S3 S4)
decl f6 :: S3
#25 := f6
decl f7 :: S2
#28 := f7
#31 := (f4 f7 f6)
decl f3 :: (-> S2 S3 S4 S3 S4)
decl f8 :: S4
#29 := f8
decl f5 :: S3
#24 := f5
#30 := (f3 f7 f5 f8 f6)
#32 := (= #30 #31)
#164 := (= f8 #30)
#26 := (= f5 f6)
#251 := (ite #26 #164 #32)
#255 := (not #251)
#84 := (not #32)
#76 := (or #26 #32)
#80 := (not #76)
#27 := (not #26)
#33 := (implies #27 #32)
#34 := (not #33)
#81 := (iff #34 #80)
#78 := (iff #33 #76)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#75 := [asserted]: #34
#85 := [mp #75 #82]: #80
#86 := [not-or-elim #85]: #84
#83 := [not-or-elim #85]: #27
#257 := (or #255 #26 #32)
#254 := [def-axiom]: #257
#165 := [unit-resolution #254 #83 #86]: #255
#11 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#12 := (f3 #8 #9 #10 #11)
#582 := (pattern #12)
#14 := (f4 #8 #11)
#105 := (= #12 #14)
#104 := (= #10 #12)
#55 := (= #9 #11)
#92 := (ite #55 #104 #105)
#583 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #582) #92)
#97 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #92)
#586 := (iff #97 #583)
#584 := (iff #92 #92)
#585 := [refl]: #584
#587 := [quant-intro #585]: #586
#58 := (ite #55 #10 #14)
#61 := (= #12 #58)
#64 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #61)
#94 := (iff #64 #97)
#93 := (iff #61 #92)
#96 := [rewrite]: #93
#95 := [quant-intro #96]: #94
#100 := (~ #64 #64)
#98 := (~ #61 #61)
#99 := [refl]: #98
#101 := [nnf-pos #99]: #100
#13 := (= #11 #9)
#15 := (ite #13 #10 #14)
#16 := (= #12 #15)
#17 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #16)
#65 := (iff #17 #64)
#62 := (iff #16 #61)
#59 := (= #15 #58)
#56 := (iff #13 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#66 := [quant-intro #63]: #65
#54 := [asserted]: #17
#69 := [mp #54 #66]: #64
#88 := [mp~ #69 #101]: #64
#106 := [mp #88 #95]: #97
#588 := [mp #106 #587]: #583
#166 := (not #583)
#253 := (or #166 #251)
#244 := [quant-inst #28 #24 #29 #25]: #253
[unit-resolution #244 #588 #165]: false
unsat
57b1778e367cf6f6921505d440f3fc4fb8332587 158 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f5 :: S3
#26 := f5
decl f4 :: (-> S2 S3 S4 S2)
decl f9 :: S4
#33 := f9
decl f6 :: S3
#27 := f6
decl f8 :: S4
#31 := f8
decl f7 :: S2
#30 := f7
#32 := (f4 f7 f5 f8)
#34 := (f4 #32 f6 f9)
#35 := (f3 #34 f5)
#80 := (= f8 #35)
#176 := (f3 #32 f5)
#263 := (= #35 #176)
#580 := (iff #263 #80)
#217 := (iff #80 #263)
#570 := (= #176 #35)
#577 := (iff #570 #263)
#579 := [commutativity]: #577
#576 := (iff #80 #570)
#242 := (= f8 #176)
#21 := (:var 0 S4)
#20 := (:var 1 S3)
#19 := (:var 2 S2)
#22 := (f4 #19 #20 #21)
#601 := (pattern #22)
#23 := (f3 #22 #20)
#72 := (= #21 #23)
#603 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #601) #72)
#76 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #72)
#602 := (iff #76 #603)
#605 := (iff #603 #603)
#606 := [rewrite]: #605
#604 := [rewrite]: #602
#607 := [trans #604 #606]: #602
#102 := (~ #76 #76)
#101 := (~ #72 #72)
#114 := [refl]: #101
#103 := [nnf-pos #114]: #102
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #24)
#77 := (iff #25 #76)
#74 := (iff #24 #72)
#75 := [rewrite]: #74
#78 := [quant-intro #75]: #77
#71 := [asserted]: #25
#81 := [mp #71 #78]: #76
#115 := [mp~ #81 #103]: #76
#608 := [mp #115 #607]: #603
#569 := (not #603)
#230 := (or #569 #242)
#231 := [quant-inst #30 #26 #31]: #230
#575 := [unit-resolution #231 #608]: #242
#212 := [monotonicity #575]: #576
#218 := [trans #212 #579]: #217
#578 := [symm #218]: #580
#177 := (= f9 #35)
#28 := (= f5 f6)
#267 := (ite #28 #177 #263)
#12 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#11 := (f4 #8 #9 #10)
#13 := (f3 #11 #12)
#594 := (pattern #13)
#15 := (f3 #8 #12)
#117 := (= #13 #15)
#116 := (= #10 #13)
#59 := (= #9 #12)
#104 := (ite #59 #116 #117)
#595 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #594) #104)
#109 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #104)
#598 := (iff #109 #595)
#596 := (iff #104 #104)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#62 := (ite #59 #10 #15)
#65 := (= #13 #62)
#68 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #65)
#106 := (iff #68 #109)
#105 := (iff #65 #104)
#108 := [rewrite]: #105
#107 := [quant-intro #108]: #106
#112 := (~ #68 #68)
#110 := (~ #65 #65)
#111 := [refl]: #110
#113 := [nnf-pos #111]: #112
#14 := (= #12 #9)
#16 := (ite #14 #10 #15)
#17 := (= #13 #16)
#18 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #17)
#69 := (iff #18 #68)
#66 := (iff #17 #65)
#63 := (= #16 #62)
#60 := (iff #14 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [quant-intro #67]: #69
#58 := [asserted]: #18
#73 := [mp #58 #70]: #68
#100 := [mp~ #73 #113]: #68
#118 := [mp #100 #107]: #109
#600 := [mp #118 #599]: #595
#269 := (not #595)
#266 := (or #269 #267)
#264 := (= f6 f5)
#178 := (ite #264 #177 #263)
#270 := (or #269 #178)
#586 := (iff #270 #266)
#243 := (iff #266 #266)
#375 := [rewrite]: #243
#268 := (iff #178 #267)
#265 := (iff #264 #28)
#256 := [rewrite]: #265
#196 := [monotonicity #256]: #268
#588 := [monotonicity #196]: #586
#582 := [trans #588 #375]: #586
#249 := [quant-inst #32 #27 #33 #26]: #270
#254 := [mp #249 #582]: #266
#232 := [unit-resolution #254 #600]: #267
#255 := (not #267)
#233 := (or #255 #263)
#29 := (not #28)
#87 := (or #28 #80)
#92 := (not #87)
#36 := (= #35 f8)
#37 := (implies #29 #36)
#38 := (not #37)
#93 := (iff #38 #92)
#90 := (iff #37 #87)
#84 := (implies #29 #80)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #37 #84)
#82 := (iff #36 #80)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [monotonicity #91]: #93
#79 := [asserted]: #38
#97 := [mp #79 #94]: #92
#95 := [not-or-elim #97]: #29
#591 := (or #255 #28 #263)
#592 := [def-axiom]: #591
#573 := [unit-resolution #592 #95]: #233
#574 := [unit-resolution #573 #232]: #263
#581 := [mp #574 #578]: #80
#96 := (not #80)
#98 := [not-or-elim #97]: #96
[unit-resolution #98 #581]: false
unsat
c5924477e9186eb5df53c29cfb676c83a60e811c 111 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f6 :: S3
#27 := f6
decl f4 :: (-> S2 S3 S4 S2)
decl f9 :: S4
#33 := f9
decl f8 :: S4
#31 := f8
decl f5 :: S3
#26 := f5
decl f7 :: S2
#30 := f7
#32 := (f4 f7 f5 f8)
#34 := (f4 #32 f6 f9)
#35 := (f3 #34 f6)
#80 := (= f9 #35)
#96 := (not #80)
#28 := (= f5 f6)
#87 := (or #28 #80)
#92 := (not #87)
#36 := (= #35 f9)
#29 := (not #28)
#37 := (implies #29 #36)
#38 := (not #37)
#93 := (iff #38 #92)
#90 := (iff #37 #87)
#84 := (implies #29 #80)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #37 #84)
#82 := (iff #36 #80)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#91 := [trans #86 #89]: #90
#94 := [monotonicity #91]: #93
#79 := [asserted]: #38
#97 := [mp #79 #94]: #92
#98 := [not-or-elim #97]: #96
#12 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#11 := (f4 #8 #9 #10)
#13 := (f3 #11 #12)
#594 := (pattern #13)
#15 := (f3 #8 #12)
#117 := (= #13 #15)
#116 := (= #10 #13)
#59 := (= #9 #12)
#104 := (ite #59 #116 #117)
#595 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #594) #104)
#109 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #104)
#598 := (iff #109 #595)
#596 := (iff #104 #104)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#62 := (ite #59 #10 #15)
#65 := (= #13 #62)
#68 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #65)
#106 := (iff #68 #109)
#105 := (iff #65 #104)
#108 := [rewrite]: #105
#107 := [quant-intro #108]: #106
#112 := (~ #68 #68)
#110 := (~ #65 #65)
#111 := [refl]: #110
#113 := [nnf-pos #111]: #112
#14 := (= #12 #9)
#16 := (ite #14 #10 #15)
#17 := (= #13 #16)
#18 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #17)
#69 := (iff #18 #68)
#66 := (iff #17 #65)
#63 := (= #16 #62)
#60 := (iff #14 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [quant-intro #67]: #69
#58 := [asserted]: #18
#73 := [mp #58 #70]: #68
#100 := [mp~ #73 #113]: #68
#118 := [mp #100 #107]: #109
#600 := [mp #118 #599]: #595
#249 := (not #595)
#586 := (or #249 #80)
#176 := (f3 #32 f6)
#263 := (= #35 #176)
#177 := (= f6 f6)
#264 := (ite #177 #80 #263)
#588 := (or #249 #264)
#375 := (iff #588 #586)
#254 := (iff #586 #586)
#255 := [rewrite]: #254
#266 := (iff #264 #80)
#1 := true
#256 := (ite true #80 #263)
#196 := (iff #256 #80)
#269 := [rewrite]: #196
#267 := (iff #264 #256)
#178 := (iff #177 true)
#265 := [rewrite]: #178
#268 := [monotonicity #265]: #267
#270 := [trans #268 #269]: #266
#582 := [monotonicity #270]: #375
#589 := [trans #582 #255]: #375
#243 := [quant-inst #32 #27 #33 #27]: #588
#590 := [mp #243 #589]: #586
[unit-resolution #590 #600 #98]: false
unsat
7e28540fd0d4f5814439be9d6e362d0c1457f76e 123 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f5 :: S3
#26 := f5
decl f4 :: (-> S2 S3 S4 S2)
decl f9 :: S4
#32 := f9
decl f6 :: S3
#27 := f6
decl f8 :: S4
#30 := f8
decl f7 :: S2
#29 := f7
#31 := (f4 f7 f5 f8)
#33 := (f4 #31 f6 f9)
#34 := (f3 #33 f5)
#79 := (= f9 #34)
#263 := (f3 #33 f6)
#571 := (= #263 #34)
#585 := (= #34 #263)
#28 := (= f5 f6)
#86 := (not #28)
#87 := (or #86 #79)
#92 := (not #87)
#35 := (= #34 f9)
#36 := (implies #28 #35)
#37 := (not #36)
#93 := (iff #37 #92)
#90 := (iff #36 #87)
#83 := (implies #28 #79)
#88 := (iff #83 #87)
#89 := [rewrite]: #88
#84 := (iff #36 #83)
#81 := (iff #35 #79)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#91 := [trans #85 #89]: #90
#94 := [monotonicity #91]: #93
#78 := [asserted]: #37
#97 := [mp #78 #94]: #92
#95 := [not-or-elim #97]: #28
#233 := [monotonicity #95]: #585
#572 := [symm #233]: #571
#264 := (= f9 #263)
#12 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#11 := (f4 #8 #9 #10)
#13 := (f3 #11 #12)
#594 := (pattern #13)
#15 := (f3 #8 #12)
#117 := (= #13 #15)
#116 := (= #10 #13)
#58 := (= #9 #12)
#104 := (ite #58 #116 #117)
#595 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #594) #104)
#109 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #104)
#598 := (iff #109 #595)
#596 := (iff #104 #104)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#61 := (ite #58 #10 #15)
#64 := (= #13 #61)
#67 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #64)
#106 := (iff #67 #109)
#105 := (iff #64 #104)
#108 := [rewrite]: #105
#107 := [quant-intro #108]: #106
#112 := (~ #67 #67)
#110 := (~ #64 #64)
#111 := [refl]: #110
#113 := [nnf-pos #111]: #112
#14 := (= #12 #9)
#16 := (ite #14 #10 #15)
#17 := (= #13 #16)
#18 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #17)
#68 := (iff #18 #67)
#65 := (iff #17 #64)
#62 := (= #16 #61)
#59 := (iff #14 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#69 := [quant-intro #66]: #68
#57 := [asserted]: #18
#72 := [mp #57 #69]: #67
#100 := [mp~ #72 #113]: #67
#118 := [mp #100 #107]: #109
#600 := [mp #118 #599]: #595
#582 := (not #595)
#254 := (or #582 #264)
#176 := (f3 #31 f6)
#177 := (= #263 #176)
#178 := (= f6 f6)
#265 := (ite #178 #264 #177)
#255 := (or #582 #265)
#590 := (iff #255 #254)
#592 := (iff #254 #254)
#587 := [rewrite]: #592
#243 := (iff #265 #264)
#268 := (= #176 #263)
#1 := true
#266 := (ite true #264 #268)
#586 := (iff #266 #264)
#588 := [rewrite]: #586
#270 := (iff #265 #266)
#196 := (iff #177 #268)
#269 := [rewrite]: #196
#256 := (iff #178 true)
#267 := [rewrite]: #256
#249 := [monotonicity #267 #269]: #270
#375 := [trans #249 #588]: #243
#591 := [monotonicity #375]: #590
#593 := [trans #591 #587]: #590
#589 := [quant-inst #31 #27 #32 #27]: #255
#583 := [mp #589 #593]: #254
#242 := [unit-resolution #583 #600]: #264
#573 := [trans #242 #572]: #79
#96 := (not #79)
#98 := [not-or-elim #97]: #96
[unit-resolution #98 #573]: false
unsat
6e80c9c78d8fedc6d33345078567183b7c70457d 190 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f7 :: S3
#28 := f7
decl f8 :: S2
#30 := f8
#36 := (f3 f8 f7)
decl f4 :: (-> S2 S3 S4 S2)
decl f10 :: S4
#33 := f10
decl f6 :: S3
#27 := f6
decl f9 :: S4
#31 := f9
decl f5 :: S3
#26 := f5
#32 := (f4 f8 f5 f9)
#34 := (f4 #32 f6 f10)
#35 := (f3 #34 f7)
#37 := (= #35 #36)
#586 := (f3 #32 f5)
#570 := (f4 f8 f5 #586)
#206 := (f3 #570 f7)
#211 := (= #206 #36)
#562 := (= #36 #206)
#572 := (= #206 #586)
#171 := (= f5 f7)
#285 := (ite #171 #572 #562)
#12 := (:var 0 S3)
#10 := (:var 1 S4)
#9 := (:var 2 S3)
#8 := (:var 3 S2)
#11 := (f4 #8 #9 #10)
#13 := (f3 #11 #12)
#588 := (pattern #13)
#15 := (f3 #8 #12)
#111 := (= #13 #15)
#110 := (= #10 #13)
#60 := (= #9 #12)
#98 := (ite #60 #110 #111)
#589 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #588) #98)
#103 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #98)
#592 := (iff #103 #589)
#590 := (iff #98 #98)
#591 := [refl]: #590
#593 := [quant-intro #591]: #592
#63 := (ite #60 #10 #15)
#66 := (= #13 #63)
#69 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #66)
#100 := (iff #69 #103)
#99 := (iff #66 #98)
#102 := [rewrite]: #99
#101 := [quant-intro #102]: #100
#106 := (~ #69 #69)
#104 := (~ #66 #66)
#105 := [refl]: #104
#107 := [nnf-pos #105]: #106
#14 := (= #12 #9)
#16 := (ite #14 #10 #15)
#17 := (= #13 #16)
#18 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #17)
#70 := (iff #18 #69)
#67 := (iff #17 #66)
#64 := (= #16 #63)
#61 := (iff #14 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#71 := [quant-intro #68]: #70
#59 := [asserted]: #18
#74 := [mp #59 #71]: #69
#94 := [mp~ #74 #107]: #69
#112 := [mp #94 #101]: #103
#594 := [mp #112 #593]: #589
#587 := (not #589)
#287 := (or #587 #285)
#212 := (= #586 #206)
#574 := (ite #171 #212 #211)
#178 := (or #587 #574)
#558 := (iff #178 #287)
#281 := (iff #287 #287)
#555 := [rewrite]: #281
#286 := (iff #574 #285)
#268 := (iff #211 #562)
#284 := [rewrite]: #268
#575 := (iff #212 #572)
#561 := [rewrite]: #575
#272 := [monotonicity #561 #284]: #286
#280 := [monotonicity #272]: #558
#559 := [trans #280 #555]: #558
#557 := [quant-inst #30 #26 #586 #28]: #178
#556 := [mp #557 #559]: #287
#516 := [unit-resolution #556 #594]: #285
#560 := (not #285)
#507 := (or #560 #562)
#258 := (not #171)
#172 := (= f6 f7)
#259 := (not #172)
#170 := (= f5 f6)
#257 := (not #170)
#250 := (and #257 #258 #259)
#29 := (distinct f5 f6 f7)
#81 := (not #29)
#83 := (or #81 #37)
#86 := (not #83)
#38 := (implies #29 #37)
#39 := (not #38)
#87 := (iff #39 #86)
#84 := (iff #38 #83)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#80 := [asserted]: #39
#91 := [mp #80 #88]: #86
#89 := [not-or-elim #91]: #29
#237 := (or #81 #250)
#369 := [def-axiom]: #237
#505 := [unit-resolution #369 #89]: #250
#261 := (not #250)
#263 := (or #261 #258)
#260 := [def-axiom]: #263
#506 := [unit-resolution #260 #505]: #258
#271 := (or #560 #171 #562)
#273 := [def-axiom]: #271
#508 := [unit-resolution #273 #506]: #507
#502 := [unit-resolution #508 #516]: #562
#486 := [symm #502]: #211
#487 := (= #35 #206)
#249 := (f3 #32 f7)
#495 := (= #249 #206)
#498 := (= #206 #249)
#515 := (= #570 #32)
#513 := (= #586 f9)
#581 := (= f9 #586)
#21 := (:var 0 S4)
#20 := (:var 1 S3)
#19 := (:var 2 S2)
#22 := (f4 #19 #20 #21)
#595 := (pattern #22)
#23 := (f3 #22 #20)
#73 := (= #21 #23)
#597 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #595) #73)
#77 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #73)
#596 := (iff #77 #597)
#599 := (iff #597 #597)
#600 := [rewrite]: #599
#598 := [rewrite]: #596
#601 := [trans #598 #600]: #596
#96 := (~ #77 #77)
#95 := (~ #73 #73)
#108 := [refl]: #95
#97 := [nnf-pos #108]: #96
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #24)
#78 := (iff #25 #77)
#75 := (iff #24 #73)
#76 := [rewrite]: #75
#79 := [quant-intro #76]: #78
#72 := [asserted]: #25
#82 := [mp #72 #79]: #77
#109 := [mp~ #82 #97]: #77
#602 := [mp #109 #601]: #597
#568 := (not #597)
#569 := (or #568 #581)
#564 := [quant-inst #30 #26 #31]: #569
#503 := [unit-resolution #564 #602]: #581
#514 := [symm #503]: #513
#511 := [monotonicity #514]: #515
#499 := [monotonicity #511]: #498
#500 := [symm #499]: #495
#583 := (= #35 #249)
#584 := (= f10 #35)
#585 := (ite #172 #584 #583)
#577 := (or #587 #585)
#235 := [quant-inst #32 #27 #33 #28]: #577
#509 := [unit-resolution #235 #594]: #585
#240 := (not #585)
#494 := (or #240 #583)
#264 := (or #261 #259)
#243 := [def-axiom]: #264
#493 := [unit-resolution #243 #505]: #259
#579 := (or #240 #172 #583)
#220 := [def-axiom]: #579
#496 := [unit-resolution #220 #493]: #494
#497 := [unit-resolution #496 #509]: #583
#489 := [trans #497 #500]: #487
#490 := [trans #489 #486]: #37
#90 := (not #37)
#92 := [not-or-elim #91]: #90
[unit-resolution #92 #490]: false
unsat
a8479ddc219a8a1f70834d2e3bfa9595c2e54d48 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f9 :: (-> S8 S1)
decl f10 :: S8
#41 := f10
#42 := (f9 f10)
#43 := (= #42 f1)
#44 := (iff #43 #43)
#45 := (not #44)
#140 := (iff #45 false)
#1 := true
#135 := (not true)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #45 #135)
#133 := (iff #44 true)
#124 := (= f1 #42)
#128 := (iff #124 #124)
#131 := (iff #128 true)
#132 := [rewrite]: #131
#129 := (iff #44 #128)
#126 := (iff #43 #124)
#127 := [rewrite]: #126
#130 := [monotonicity #127 #127]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134]: #136
#141 := [trans #137 #139]: #140
#123 := [asserted]: #45
[mp #123 #141]: false
unsat
4a8e2abc2ad72bd9865553c33c10577508b41462 58 0
#2 := false
decl f8 :: (-> S7 S1)
decl f9 :: S7
#41 := f9
#42 := (f8 f9)
decl f1 :: S1
#4 := f1
#124 := (= f1 #42)
#43 := (= #42 f1)
#44 := (not #43)
#45 := (not #44)
#136 := (iff #45 #124)
#128 := (not #124)
#131 := (not #128)
#134 := (iff #131 #124)
#135 := [rewrite]: #134
#132 := (iff #45 #131)
#129 := (iff #44 #128)
#126 := (iff #43 #124)
#127 := [rewrite]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#137 := [trans #133 #135]: #136
#123 := [asserted]: #45
#140 := [mp #123 #137]: #124
#36 := (:var 0 S7)
#37 := (f8 #36)
#669 := (pattern #37)
#113 := (= f1 #37)
#117 := (not #113)
#670 := (forall (vars (?v0 S7)) (:pat #669) #117)
#120 := (forall (vars (?v0 S7)) #117)
#673 := (iff #120 #670)
#671 := (iff #117 #117)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#146 := (~ #120 #120)
#161 := (~ #117 #117)
#162 := [refl]: #161
#147 := [nnf-pos #162]: #146
#38 := (= #37 f1)
#39 := (not #38)
#40 := (forall (vars (?v0 S7)) #39)
#121 := (iff #40 #120)
#118 := (iff #39 #117)
#115 := (iff #38 #113)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#112 := [asserted]: #40
#125 := [mp #112 #122]: #120
#163 := [mp~ #125 #147]: #120
#675 := [mp #163 #674]: #670
#231 := (not #670)
#318 := (or #231 #128)
#232 := [quant-inst #41]: #318
[unit-resolution #232 #675 #140]: false
unsat
091bf3e425fe9e8c8440218eb2682fa4e6096563 46 0
#2 := false
decl f7 :: (-> S6 S1)
decl f9 :: S6
#41 := f9
#42 := (f7 f9)
decl f1 :: S1
#4 := f1
#123 := (= f1 #42)
#127 := (not #123)
#43 := (= #42 f1)
#44 := (not #43)
#128 := (iff #44 #127)
#125 := (iff #43 #123)
#126 := [rewrite]: #125
#129 := [monotonicity #126]: #128
#122 := [asserted]: #44
#132 := [mp #122 #129]: #127
#32 := (:var 0 S6)
#33 := (f7 #32)
#654 := (pattern #33)
#104 := (= f1 #33)
#655 := (forall (vars (?v0 S6)) (:pat #654) #104)
#108 := (forall (vars (?v0 S6)) #104)
#658 := (iff #108 #655)
#656 := (iff #104 #104)
#657 := [refl]: #656
#659 := [quant-intro #657]: #658
#136 := (~ #108 #108)
#150 := (~ #104 #104)
#151 := [refl]: #150
#137 := [nnf-pos #151]: #136
#34 := (= #33 f1)
#35 := (forall (vars (?v0 S6)) #34)
#109 := (iff #35 #108)
#106 := (iff #34 #104)
#107 := [rewrite]: #106
#110 := [quant-intro #107]: #109
#103 := [asserted]: #35
#113 := [mp #103 #110]: #108
#152 := [mp~ #113 #137]: #108
#660 := [mp #152 #659]: #655
#223 := (not #655)
#310 := (or #223 #123)
#224 := [quant-inst #41]: #310
[unit-resolution #224 #660 #132]: false
unsat
fd9a6405dcfcd8a8d48113910424b839f41afe7c 119 0
#2 := false
decl f5 :: (-> S4 S4 S5 S1)
decl f11 :: S5
#43 := f11
decl f10 :: S4
#42 := f10
decl f9 :: S4
#41 := f9
#44 := (f5 f9 f10 f11)
decl f1 :: S1
#4 := f1
#131 := (= f1 #44)
#150 := (not #131)
#654 := [hypothesis]: #150
decl f6 :: (-> S4 S5 S1)
#48 := (f6 f10 f11)
#138 := (= f1 #48)
#46 := (f6 f9 f11)
#135 := (= f1 #46)
#141 := (or #135 #138)
#342 := (or #141 #131)
#151 := (iff #141 #150)
#49 := (= #48 f1)
#47 := (= #46 f1)
#50 := (or #47 #49)
#45 := (= #44 f1)
#51 := (iff #45 #50)
#52 := (not #51)
#154 := (iff #52 #151)
#144 := (iff #131 #141)
#147 := (not #144)
#152 := (iff #147 #151)
#153 := [rewrite]: #152
#148 := (iff #52 #147)
#145 := (iff #51 #144)
#142 := (iff #50 #141)
#139 := (iff #49 #138)
#140 := [rewrite]: #139
#136 := (iff #47 #135)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#133 := (iff #45 #131)
#134 := [rewrite]: #133
#146 := [monotonicity #134 #143]: #145
#149 := [monotonicity #146]: #148
#155 := [trans #149 #153]: #154
#130 := [asserted]: #52
#158 := [mp #130 #155]: #151
#268 := (not #151)
#341 := (or #141 #131 #268)
#338 := [def-axiom]: #341
#321 := [unit-resolution #338 #158]: #342
#326 := [unit-resolution #321 #654]: #141
#328 := (not #141)
#657 := (or #131 #328)
#22 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#23 := (f5 #20 #21 #22)
#673 := (pattern #23)
#27 := (f6 #21 #22)
#99 := (= f1 #27)
#25 := (f6 #20 #22)
#96 := (= f1 #25)
#102 := (or #96 #99)
#92 := (= f1 #23)
#105 := (iff #92 #102)
#674 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #673) #105)
#108 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #105)
#677 := (iff #108 #674)
#675 := (iff #105 #105)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#160 := (~ #108 #108)
#159 := (~ #105 #105)
#174 := [refl]: #159
#161 := [nnf-pos #174]: #160
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #30)
#109 := (iff #31 #108)
#106 := (iff #30 #105)
#103 := (iff #29 #102)
#100 := (iff #28 #99)
#101 := [rewrite]: #100
#97 := (iff #26 #96)
#98 := [rewrite]: #97
#104 := [monotonicity #98 #101]: #103
#94 := (iff #24 #92)
#95 := [rewrite]: #94
#107 := [monotonicity #95 #104]: #106
#110 := [quant-intro #107]: #109
#91 := [asserted]: #31
#113 := [mp #91 #110]: #108
#175 := [mp~ #113 #161]: #108
#679 := [mp #175 #678]: #674
#327 := (not #674)
#661 := (or #327 #144)
#662 := [quant-inst #41 #42 #43]: #661
#314 := [unit-resolution #662 #679]: #144
#663 := (or #147 #131 #328)
#664 := [def-axiom]: #663
#298 := [unit-resolution #664 #314]: #657
#641 := [unit-resolution #298 #326 #654]: false
#302 := [lemma #641]: #131
#315 := (or #328 #150)
#658 := (or #328 #150 #268)
#660 := [def-axiom]: #658
#447 := [unit-resolution #660 #158]: #315
#303 := [unit-resolution #447 #302]: #328
#304 := (or #150 #141)
#659 := (or #147 #150 #141)
#665 := [def-axiom]: #659
#305 := [unit-resolution #665 #314]: #304
[unit-resolution #305 #303 #302]: false
unsat
1323dc787bd70f2161bb2e81688bf85b58b24887 154 0
#2 := false
decl f6 :: (-> S4 S5 S1)
decl f10 :: S5
#42 := f10
decl f8 :: S4
#36 := f8
#331 := (f6 f8 f10)
decl f1 :: S1
#4 := f1
#328 := (= f1 #331)
decl f9 :: S4
#41 := f9
#45 := (f6 f9 f10)
#131 := (= f1 #45)
#332 := (or #131 #328)
decl f5 :: (-> S4 S4 S5 S1)
#43 := (f5 f9 f8 f10)
#127 := (= f1 #43)
#140 := (not #127)
#648 := [hypothesis]: #140
#326 := (or #131 #127)
#141 := (iff #131 #140)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#144 := (iff #48 #141)
#134 := (iff #127 #131)
#137 := (not #134)
#142 := (iff #137 #141)
#143 := [rewrite]: #142
#138 := (iff #48 #137)
#135 := (iff #47 #134)
#132 := (iff #46 #131)
#133 := [rewrite]: #132
#129 := (iff #44 #127)
#130 := [rewrite]: #129
#136 := [monotonicity #130 #133]: #135
#139 := [monotonicity #136]: #138
#145 := [trans #139 #143]: #144
#126 := [asserted]: #48
#148 := [mp #126 #145]: #141
#238 := (not #141)
#325 := (or #131 #127 #238)
#239 := [def-axiom]: #325
#240 := [unit-resolution #239 #148]: #326
#650 := [unit-resolution #240 #648]: #131
#654 := (not #332)
#294 := (or #127 #654)
#311 := (iff #127 #332)
#22 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#23 := (f5 #20 #21 #22)
#663 := (pattern #23)
#27 := (f6 #21 #22)
#95 := (= f1 #27)
#25 := (f6 #20 #22)
#92 := (= f1 #25)
#98 := (or #92 #95)
#88 := (= f1 #23)
#101 := (iff #88 #98)
#664 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #663) #101)
#104 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #101)
#667 := (iff #104 #664)
#665 := (iff #101 #101)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#150 := (~ #104 #104)
#149 := (~ #101 #101)
#164 := [refl]: #149
#151 := [nnf-pos #164]: #150
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #30)
#105 := (iff #31 #104)
#102 := (iff #30 #101)
#99 := (iff #29 #98)
#96 := (iff #28 #95)
#97 := [rewrite]: #96
#93 := (iff #26 #92)
#94 := [rewrite]: #93
#100 := [monotonicity #94 #97]: #99
#90 := (iff #24 #88)
#91 := [rewrite]: #90
#103 := [monotonicity #91 #100]: #102
#106 := [quant-intro #103]: #105
#87 := [asserted]: #31
#109 := [mp #87 #106]: #104
#165 := [mp~ #109 #151]: #104
#669 := [mp #165 #668]: #664
#305 := (not #664)
#437 := (or #305 #311)
#644 := [quant-inst #41 #36 #42]: #437
#293 := [unit-resolution #644 #669]: #311
#645 := (not #311)
#303 := (or #645 #127 #654)
#308 := [def-axiom]: #303
#295 := [unit-resolution #308 #293]: #294
#633 := [unit-resolution #295 #648]: #654
#327 := (not #131)
#316 := (or #332 #327)
#317 := [def-axiom]: #316
#634 := [unit-resolution #317 #633 #650]: false
#635 := [lemma #634]: #127
#636 := (or #140 #332)
#646 := (or #645 #140 #332)
#304 := [def-axiom]: #646
#637 := [unit-resolution #304 #293]: #636
#639 := [unit-resolution #637 #635]: #332
#330 := (or #327 #140)
#318 := (or #327 #140 #238)
#329 := [def-axiom]: #318
#258 := [unit-resolution #329 #148]: #330
#641 := [unit-resolution #258 #635]: #327
#649 := (or #654 #131 #328)
#655 := [def-axiom]: #649
#279 := [unit-resolution #655 #641 #639]: #328
#37 := (f6 f8 #22)
#677 := (pattern #37)
#116 := (= f1 #37)
#120 := (not #116)
#678 := (forall (vars (?v0 S5)) (:pat #677) #120)
#123 := (forall (vars (?v0 S5)) #120)
#681 := (iff #123 #678)
#679 := (iff #120 #120)
#680 := [refl]: #679
#682 := [quant-intro #680]: #681
#154 := (~ #123 #123)
#169 := (~ #120 #120)
#170 := [refl]: #169
#155 := [nnf-pos #170]: #154
#38 := (= #37 f1)
#39 := (not #38)
#40 := (forall (vars (?v0 S5)) #39)
#124 := (iff #40 #123)
#121 := (iff #39 #120)
#118 := (iff #38 #116)
#119 := [rewrite]: #118
#122 := [monotonicity #119]: #121
#125 := [quant-intro #122]: #124
#115 := [asserted]: #40
#128 := [mp #115 #125]: #123
#171 := [mp~ #128 #155]: #123
#683 := [mp #171 #682]: #678
#651 := (not #328)
#632 := (not #678)
#638 := (or #632 #651)
#274 := [quant-inst #42]: #638
[unit-resolution #274 #683 #279]: false
unsat
c8b1c55953a13602e2fa8c1b144b5f14c7db8217 128 0
#2 := false
decl f6 :: (-> S4 S5 S1)
decl f10 :: S5
#42 := f10
decl f7 :: S4
#32 := f7
#223 := (f6 f7 f10)
decl f1 :: S1
#4 := f1
#310 := (= f1 #223)
#637 := (not #310)
decl f9 :: S4
#41 := f9
#224 := (f6 f9 f10)
#311 := (= f1 #224)
#303 := (or #310 #311)
#288 := (not #303)
decl f5 :: (-> S4 S4 S5 S1)
#43 := (f5 f9 f7 f10)
#124 := (= f1 #43)
#243 := (iff #124 #303)
#22 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#23 := (f5 #20 #21 #22)
#648 := (pattern #23)
#27 := (f6 #21 #22)
#92 := (= f1 #27)
#25 := (f6 #20 #22)
#89 := (= f1 #25)
#95 := (or #89 #92)
#85 := (= f1 #23)
#98 := (iff #85 #95)
#649 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #648) #98)
#101 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #98)
#652 := (iff #101 #649)
#650 := (iff #98 #98)
#651 := [refl]: #650
#653 := [quant-intro #651]: #652
#135 := (~ #101 #101)
#134 := (~ #98 #98)
#149 := [refl]: #134
#136 := [nnf-pos #149]: #135
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #30)
#102 := (iff #31 #101)
#99 := (iff #30 #98)
#96 := (iff #29 #95)
#93 := (iff #28 #92)
#94 := [rewrite]: #93
#90 := (iff #26 #89)
#91 := [rewrite]: #90
#97 := [monotonicity #91 #94]: #96
#87 := (iff #24 #85)
#88 := [rewrite]: #87
#100 := [monotonicity #88 #97]: #99
#103 := [quant-intro #100]: #102
#84 := [asserted]: #31
#106 := [mp #84 #103]: #101
#150 := [mp~ #106 #136]: #101
#654 := [mp #150 #653]: #649
#317 := (not #649)
#296 := (or #317 #243)
#225 := (or #311 #310)
#312 := (iff #124 #225)
#633 := (or #317 #312)
#290 := (iff #633 #296)
#629 := (iff #296 #296)
#301 := [rewrite]: #629
#316 := (iff #312 #243)
#314 := (iff #225 #303)
#315 := [rewrite]: #314
#313 := [monotonicity #315]: #316
#422 := [monotonicity #313]: #290
#302 := [trans #422 #301]: #290
#635 := [quant-inst #41 #32 #42]: #633
#636 := [mp #635 #302]: #296
#619 := [unit-resolution #636 #654]: #243
#289 := (not #243)
#620 := (or #289 #288)
#128 := (not #124)
#44 := (= #43 f1)
#45 := (not #44)
#129 := (iff #45 #128)
#126 := (iff #44 #124)
#127 := [rewrite]: #126
#130 := [monotonicity #127]: #129
#123 := [asserted]: #45
#133 := [mp #123 #130]: #128
#632 := (or #289 #124 #288)
#273 := [def-axiom]: #632
#623 := [unit-resolution #273 #133]: #620
#259 := [unit-resolution #623 #619]: #288
#638 := (or #303 #637)
#639 := [def-axiom]: #638
#624 := [unit-resolution #639 #259]: #637
#33 := (f6 f7 #22)
#655 := (pattern #33)
#105 := (= f1 #33)
#656 := (forall (vars (?v0 S5)) (:pat #655) #105)
#109 := (forall (vars (?v0 S5)) #105)
#659 := (iff #109 #656)
#657 := (iff #105 #105)
#658 := [refl]: #657
#660 := [quant-intro #658]: #659
#137 := (~ #109 #109)
#151 := (~ #105 #105)
#152 := [refl]: #151
#138 := [nnf-pos #152]: #137
#34 := (= #33 f1)
#35 := (forall (vars (?v0 S5)) #34)
#110 := (iff #35 #109)
#107 := (iff #34 #105)
#108 := [rewrite]: #107
#111 := [quant-intro #108]: #110
#104 := [asserted]: #35
#114 := [mp #104 #111]: #109
#153 := [mp~ #114 #138]: #109
#661 := [mp #153 #660]: #656
#621 := (not #656)
#622 := (or #621 #310)
#617 := [quant-inst #42]: #622
[unit-resolution #617 #661 #624]: false
unsat
0fceb45afe271c647688273babe303962581fbf2 146 0
#2 := false
decl f5 :: (-> S4 S4 S5 S1)
decl f11 :: S5
#43 := f11
decl f9 :: S4
#41 := f9
decl f10 :: S4
#42 := f10
#46 := (f5 f10 f9 f11)
decl f1 :: S1
#4 := f1
#132 := (= f1 #46)
#328 := (not #132)
#44 := (f5 f9 f10 f11)
#128 := (= f1 #44)
#141 := (not #128)
#247 := [hypothesis]: #141
#327 := (or #132 #128)
#142 := (iff #132 #141)
#47 := (= #46 f1)
#45 := (= #44 f1)
#48 := (iff #45 #47)
#49 := (not #48)
#145 := (iff #49 #142)
#135 := (iff #128 #132)
#138 := (not #135)
#143 := (iff #138 #142)
#144 := [rewrite]: #143
#139 := (iff #49 #138)
#136 := (iff #48 #135)
#133 := (iff #47 #132)
#134 := [rewrite]: #133
#130 := (iff #45 #128)
#131 := [rewrite]: #130
#137 := [monotonicity #131 #134]: #136
#140 := [monotonicity #137]: #139
#146 := [trans #140 #144]: #145
#127 := [asserted]: #49
#149 := [mp #127 #146]: #142
#239 := (not #142)
#326 := (or #132 #128 #239)
#240 := [def-axiom]: #326
#241 := [unit-resolution #240 #149]: #327
#626 := [unit-resolution #241 #247]: #132
decl f6 :: (-> S4 S5 S1)
#332 := (f6 f9 f11)
#329 := (= f1 #332)
#333 := (f6 f10 f11)
#312 := (= f1 #333)
#649 := (or #312 #329)
#646 := (not #649)
#349 := (or #128 #646)
#636 := (iff #128 #649)
#22 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#23 := (f5 #20 #21 #22)
#664 := (pattern #23)
#27 := (f6 #21 #22)
#96 := (= f1 #27)
#25 := (f6 #20 #22)
#93 := (= f1 #25)
#99 := (or #93 #96)
#89 := (= f1 #23)
#102 := (iff #89 #99)
#665 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #664) #102)
#105 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #102)
#668 := (iff #105 #665)
#666 := (iff #102 #102)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#151 := (~ #105 #105)
#150 := (~ #102 #102)
#165 := [refl]: #150
#152 := [nnf-pos #165]: #151
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #30)
#106 := (iff #31 #105)
#103 := (iff #30 #102)
#100 := (iff #29 #99)
#97 := (iff #28 #96)
#98 := [rewrite]: #97
#94 := (iff #26 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #24 #89)
#92 := [rewrite]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [quant-intro #104]: #106
#88 := [asserted]: #31
#110 := [mp #88 #107]: #105
#166 := [mp~ #110 #152]: #105
#670 := [mp #166 #669]: #665
#645 := (not #665)
#633 := (or #645 #636)
#306 := (or #329 #312)
#438 := (iff #128 #306)
#639 := (or #645 #438)
#640 := (iff #639 #633)
#280 := (iff #633 #633)
#281 := [rewrite]: #280
#637 := (iff #438 #636)
#634 := (iff #306 #649)
#635 := [rewrite]: #634
#638 := [monotonicity #635]: #637
#642 := [monotonicity #638]: #640
#643 := [trans #642 #281]: #640
#275 := [quant-inst #41 #42 #43]: #639
#641 := [mp #275 #643]: #633
#627 := [unit-resolution #641 #670]: #636
#644 := (not #636)
#630 := (or #644 #128 #646)
#631 := [def-axiom]: #630
#350 := [unit-resolution #631 #627]: #349
#624 := [unit-resolution #350 #247]: #646
#625 := (or #328 #649)
#651 := (iff #132 #649)
#317 := (or #645 #651)
#318 := [quant-inst #42 #41 #43]: #317
#628 := [unit-resolution #318 #670]: #651
#647 := (not #651)
#289 := (or #647 #328 #649)
#632 := [def-axiom]: #289
#629 := [unit-resolution #632 #628]: #625
#338 := [unit-resolution #629 #624 #626]: false
#339 := [lemma #338]: #128
#331 := (or #328 #141)
#319 := (or #328 #141 #239)
#330 := [def-axiom]: #319
#259 := [unit-resolution #330 #149]: #331
#340 := [unit-resolution #259 #339]: #328
#342 := (or #141 #649)
#337 := (or #644 #141 #649)
#353 := [def-axiom]: #337
#620 := [unit-resolution #353 #627]: #342
#621 := [unit-resolution #620 #339]: #649
#334 := (or #132 #646)
#305 := (or #647 #132 #646)
#648 := [def-axiom]: #305
#618 := [unit-resolution #648 #628]: #334
[unit-resolution #618 #621 #340]: false
unsat
dd5a8039aacd6c3fcf9f486d31684a5899cfecfc 121 0
#2 := false
decl f5 :: (-> S4 S4 S5 S1)
decl f10 :: S5
#42 := f10
decl f9 :: S4
#41 := f9
#43 := (f5 f9 f9 f10)
decl f1 :: S1
#4 := f1
#127 := (= f1 #43)
#140 := (not #127)
#631 := [hypothesis]: #140
decl f6 :: (-> S4 S5 S1)
#45 := (f6 f9 f10)
#131 := (= f1 #45)
#326 := (or #131 #127)
#141 := (iff #131 #140)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#144 := (iff #48 #141)
#134 := (iff #127 #131)
#137 := (not #134)
#142 := (iff #137 #141)
#143 := [rewrite]: #142
#138 := (iff #48 #137)
#135 := (iff #47 #134)
#132 := (iff #46 #131)
#133 := [rewrite]: #132
#129 := (iff #44 #127)
#130 := [rewrite]: #129
#136 := [monotonicity #130 #133]: #135
#139 := [monotonicity #136]: #138
#145 := [trans #139 #143]: #144
#126 := [asserted]: #48
#148 := [mp #126 #145]: #141
#238 := (not #141)
#325 := (or #131 #127 #238)
#239 := [def-axiom]: #325
#240 := [unit-resolution #239 #148]: #326
#292 := [unit-resolution #240 #631]: #131
#327 := (not #131)
#294 := (or #127 #327)
#22 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#23 := (f5 #20 #21 #22)
#663 := (pattern #23)
#27 := (f6 #21 #22)
#95 := (= f1 #27)
#25 := (f6 #20 #22)
#92 := (= f1 #25)
#98 := (or #92 #95)
#88 := (= f1 #23)
#101 := (iff #88 #98)
#664 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #663) #101)
#104 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #101)
#667 := (iff #104 #664)
#665 := (iff #101 #101)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#150 := (~ #104 #104)
#149 := (~ #101 #101)
#164 := [refl]: #149
#151 := [nnf-pos #164]: #150
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #30)
#105 := (iff #31 #104)
#102 := (iff #30 #101)
#99 := (iff #29 #98)
#96 := (iff #28 #95)
#97 := [rewrite]: #96
#93 := (iff #26 #92)
#94 := [rewrite]: #93
#100 := [monotonicity #94 #97]: #99
#90 := (iff #24 #88)
#91 := [rewrite]: #90
#103 := [monotonicity #91 #100]: #102
#106 := [quant-intro #103]: #105
#87 := [asserted]: #31
#109 := [mp #87 #106]: #104
#165 := [mp~ #109 #151]: #104
#669 := [mp #165 #668]: #664
#305 := (not #664)
#437 := (or #305 #134)
#331 := (or #131 #131)
#328 := (iff #127 #331)
#644 := (or #305 #328)
#317 := (iff #644 #437)
#652 := (iff #437 #437)
#653 := [rewrite]: #652
#648 := (iff #328 #134)
#332 := (iff #331 #131)
#311 := [rewrite]: #332
#650 := [monotonicity #311]: #648
#651 := [monotonicity #650]: #317
#654 := [trans #651 #653]: #317
#316 := [quant-inst #41 #41 #42]: #644
#649 := [mp #316 #654]: #437
#293 := [unit-resolution #649 #669]: #134
#655 := (or #137 #127 #327)
#645 := [def-axiom]: #655
#295 := [unit-resolution #645 #293]: #294
#633 := [unit-resolution #295 #292 #631]: false
#634 := [lemma #633]: #127
#330 := (or #327 #140)
#318 := (or #327 #140 #238)
#329 := [def-axiom]: #318
#258 := [unit-resolution #329 #148]: #330
#635 := [unit-resolution #258 #634]: #327
#636 := (or #140 #131)
#303 := (or #137 #140 #131)
#308 := [def-axiom]: #303
#637 := [unit-resolution #308 #293]: #636
[unit-resolution #637 #635 #634]: false
unsat
8df9cadd28b79979ba76c3dfed467a1319648283 259 0
#2 := false
decl f5 :: (-> S4 S5 S1)
decl f12 :: S5
#47 := f12
decl f10 :: S4
#43 := f10
#627 := (f5 f10 f12)
decl f1 :: S1
#4 := f1
#340 := (= f1 #627)
decl f11 :: S4
#44 := f11
#338 := (f5 f11 f12)
#335 := (= f1 #338)
#625 := (or #335 #340)
decl f6 :: (-> S4 S4 S4)
#45 := (f6 f10 f11)
#312 := (f5 #45 f12)
#444 := (= f1 #312)
#619 := (iff #444 #625)
#585 := (not #619)
#597 := (not #625)
#609 := (not #340)
decl f9 :: S4
#42 := f9
#640 := (f5 f9 f12)
#641 := (= f1 #640)
#487 := (or #340 #641)
#612 := (not #487)
#50 := (f6 f9 f10)
#339 := (f5 #50 f12)
#318 := (= f1 #339)
#595 := (iff #318 #487)
#587 := (not #595)
#580 := [hypothesis]: #587
#23 := (:var 0 S5)
#21 := (:var 1 S4)
#20 := (:var 2 S4)
#22 := (f6 #20 #21)
#24 := (f5 #22 #23)
#670 := (pattern #24)
#28 := (f5 #21 #23)
#102 := (= f1 #28)
#26 := (f5 #20 #23)
#99 := (= f1 #26)
#105 := (or #99 #102)
#95 := (= f1 #24)
#108 := (iff #95 #105)
#671 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) (:pat #670) #108)
#111 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #108)
#674 := (iff #111 #671)
#672 := (iff #108 #108)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#157 := (~ #111 #111)
#156 := (~ #108 #108)
#171 := [refl]: #156
#158 := [nnf-pos #171]: #157
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S5)) #31)
#112 := (iff #32 #111)
#109 := (iff #31 #108)
#106 := (iff #30 #105)
#103 := (iff #29 #102)
#104 := [rewrite]: #103
#100 := (iff #27 #99)
#101 := [rewrite]: #100
#107 := [monotonicity #101 #104]: #106
#97 := (iff #25 #95)
#98 := [rewrite]: #97
#110 := [monotonicity #98 #107]: #109
#113 := [quant-intro #110]: #112
#94 := [asserted]: #32
#116 := [mp #94 #113]: #111
#172 := [mp~ #116 #158]: #111
#676 := [mp #172 #675]: #671
#651 := (not #671)
#593 := (or #651 #595)
#604 := (or #641 #340)
#486 := (iff #318 #604)
#596 := (or #651 #486)
#496 := (iff #596 #593)
#499 := (iff #593 #593)
#492 := [rewrite]: #499
#497 := (iff #486 #595)
#488 := (iff #604 #487)
#447 := [rewrite]: #488
#592 := [monotonicity #447]: #497
#498 := [monotonicity #592]: #496
#500 := [trans #498 #492]: #496
#481 := [quant-inst #42 #43 #47]: #596
#501 := [mp #481 #500]: #593
#581 := [unit-resolution #501 #676 #580]: false
#582 := [lemma #581]: #595
#658 := (not #318)
#655 := (or #318 #335)
#652 := (not #655)
#51 := (f6 #50 f11)
#52 := (f5 #51 f12)
#138 := (= f1 #52)
#334 := (not #138)
#46 := (f6 f9 #45)
#48 := (f5 #46 f12)
#134 := (= f1 #48)
#147 := (not #134)
#583 := [hypothesis]: #147
#333 := (or #138 #134)
#148 := (iff #138 #147)
#53 := (= #52 f1)
#49 := (= #48 f1)
#54 := (iff #49 #53)
#55 := (not #54)
#151 := (iff #55 #148)
#141 := (iff #134 #138)
#144 := (not #141)
#149 := (iff #144 #148)
#150 := [rewrite]: #149
#145 := (iff #55 #144)
#142 := (iff #54 #141)
#139 := (iff #53 #138)
#140 := [rewrite]: #139
#136 := (iff #49 #134)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#146 := [monotonicity #143]: #145
#152 := [trans #146 #150]: #151
#133 := [asserted]: #55
#155 := [mp #133 #152]: #148
#245 := (not #148)
#332 := (or #138 #134 #245)
#246 := [def-axiom]: #332
#247 := [unit-resolution #246 #155]: #333
#577 := [unit-resolution #247 #583]: #138
#568 := (or #334 #655)
#657 := (iff #138 #655)
#323 := (or #651 #657)
#324 := [quant-inst #50 #44 #47]: #323
#584 := [unit-resolution #324 #676]: #657
#653 := (not #657)
#295 := (or #653 #334 #655)
#638 := [def-axiom]: #295
#569 := [unit-resolution #638 #584]: #568
#571 := [unit-resolution #569 #577]: #655
#661 := (not #335)
#601 := (or #651 #619)
#624 := (or #340 #335)
#628 := (iff #444 #624)
#621 := (or #651 #628)
#616 := (iff #621 #601)
#623 := (iff #601 #601)
#464 := [rewrite]: #623
#620 := (iff #628 #619)
#629 := (iff #624 #625)
#618 := [rewrite]: #629
#615 := [monotonicity #618]: #620
#617 := [monotonicity #615]: #616
#465 := [trans #617 #464]: #616
#622 := [quant-inst #43 #44 #47]: #621
#466 := [mp #622 #465]: #601
#572 := [unit-resolution #466 #676]: #619
#562 := (or #585 #597)
#360 := (not #444)
#644 := (or #444 #641)
#633 := (not #644)
#574 := (or #134 #633)
#281 := (iff #134 #644)
#286 := (or #651 #281)
#642 := (or #641 #444)
#643 := (iff #134 #642)
#287 := (or #651 #643)
#647 := (iff #287 #286)
#636 := (iff #286 #286)
#637 := [rewrite]: #636
#646 := (iff #643 #281)
#639 := (iff #642 #644)
#645 := [rewrite]: #639
#648 := [monotonicity #645]: #646
#650 := [monotonicity #648]: #647
#343 := [trans #650 #637]: #647
#649 := [quant-inst #42 #45 #47]: #287
#359 := [mp #649 #343]: #286
#573 := [unit-resolution #359 #676]: #281
#630 := (not #281)
#634 := (or #630 #134 #633)
#631 := [def-axiom]: #634
#570 := [unit-resolution #631 #573]: #574
#575 := [unit-resolution #570 #583]: #633
#361 := (or #644 #360)
#347 := [def-axiom]: #361
#561 := [unit-resolution #347 #575]: #360
#579 := (or #585 #444 #597)
#576 := [def-axiom]: #579
#564 := [unit-resolution #576 #561]: #562
#565 := [unit-resolution #564 #572]: #597
#608 := (or #625 #661)
#502 := [def-axiom]: #608
#566 := [unit-resolution #502 #565]: #661
#310 := (or #652 #318 #335)
#315 := [def-axiom]: #310
#563 := [unit-resolution #315 #566 #571]: #318
#362 := (not #641)
#253 := (or #644 #362)
#632 := [def-axiom]: #253
#567 := [unit-resolution #632 #575]: #362
#503 := (or #625 #609)
#504 := [def-axiom]: #503
#547 := [unit-resolution #504 #565]: #609
#613 := (or #612 #340 #641)
#607 := [def-axiom]: #613
#548 := [unit-resolution #607 #547 #567]: #612
#445 := (or #587 #658 #487)
#446 := [def-axiom]: #445
#550 := [unit-resolution #446 #548 #563 #582]: false
#551 := [lemma #550]: #134
#337 := (or #334 #147)
#325 := (or #334 #147 #245)
#336 := [def-axiom]: #325
#265 := [unit-resolution #336 #155]: #337
#552 := [unit-resolution #265 #551]: #334
#553 := (or #138 #652)
#311 := (or #653 #138 #652)
#654 := [def-axiom]: #311
#554 := [unit-resolution #654 #584]: #553
#555 := [unit-resolution #554 #552]: #652
#659 := (or #655 #658)
#660 := [def-axiom]: #659
#556 := [unit-resolution #660 #555]: #658
#614 := (or #587 #318 #612)
#443 := [def-axiom]: #614
#557 := [unit-resolution #443 #556 #582]: #612
#610 := (or #487 #609)
#611 := [def-axiom]: #610
#558 := [unit-resolution #611 #557]: #609
#656 := (or #655 #661)
#662 := [def-axiom]: #656
#559 := [unit-resolution #662 #555]: #661
#594 := (or #597 #335 #340)
#598 := [def-axiom]: #594
#549 := [unit-resolution #598 #559 #558]: #597
#560 := (or #147 #644)
#635 := (or #630 #147 #644)
#344 := [def-axiom]: #635
#538 := [unit-resolution #344 #573]: #560
#539 := [unit-resolution #538 #551]: #644
#605 := (or #487 #362)
#606 := [def-axiom]: #605
#541 := [unit-resolution #606 #557]: #362
#355 := (or #633 #444 #641)
#356 := [def-axiom]: #355
#542 := [unit-resolution #356 #541 #539]: #444
#578 := (or #585 #360 #625)
#588 := [def-axiom]: #578
#543 := [unit-resolution #588 #542 #549]: #585
[unit-resolution #466 #676 #543]: false
unsat
e18331b7b676705a2856a4af405fce965b0fd82f 153 0
#2 := false
decl f4 :: (-> S2 S3 S1)
decl f11 :: S3
#43 := f11
decl f10 :: S2
#42 := f10
#48 := (f4 f10 f11)
decl f1 :: S1
#4 := f1
#138 := (= f1 #48)
#192 := (not #138)
decl f9 :: S2
#41 := f9
#46 := (f4 f9 f11)
#135 := (= f1 #46)
#191 := (not #135)
#193 := (or #191 #192)
#194 := (not #193)
#335 := [hypothesis]: #194
decl f3 :: (-> S2 S2 S3 S1)
#44 := (f3 f9 f10 f11)
#131 := (= f1 #44)
#150 := (not #131)
#341 := (or #150 #193)
#205 := (iff #131 #193)
#141 := (and #135 #138)
#151 := (iff #141 #150)
#208 := (iff #151 #205)
#200 := (iff #193 #131)
#206 := (iff #200 #205)
#207 := [rewrite]: #206
#203 := (iff #151 #200)
#197 := (iff #194 #150)
#201 := (iff #197 #200)
#202 := [rewrite]: #201
#198 := (iff #151 #197)
#195 := (iff #141 #194)
#196 := [rewrite]: #195
#199 := [monotonicity #196]: #198
#204 := [trans #199 #202]: #203
#209 := [trans #204 #207]: #208
#49 := (= #48 f1)
#47 := (= #46 f1)
#50 := (and #47 #49)
#45 := (= #44 f1)
#51 := (iff #45 #50)
#52 := (not #51)
#154 := (iff #52 #151)
#144 := (iff #131 #141)
#147 := (not #144)
#152 := (iff #147 #151)
#153 := [rewrite]: #152
#148 := (iff #52 #147)
#145 := (iff #51 #144)
#142 := (iff #50 #141)
#139 := (iff #49 #138)
#140 := [rewrite]: #139
#136 := (iff #47 #135)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#133 := (iff #45 #131)
#134 := [rewrite]: #133
#146 := [monotonicity #134 #143]: #145
#149 := [monotonicity #146]: #148
#155 := [trans #149 #153]: #154
#130 := [asserted]: #52
#158 := [mp #130 #155]: #151
#210 := [mp #158 #209]: #205
#348 := (not #205)
#358 := (or #150 #193 #348)
#362 := [def-axiom]: #358
#678 := [unit-resolution #362 #210]: #341
#467 := [unit-resolution #678 #335]: #150
#334 := (or #131 #193)
#680 := (iff #131 #194)
#10 := (:var 0 S3)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#11 := (f3 #8 #9 #10)
#686 := (pattern #11)
#15 := (f4 #9 #10)
#79 := (= f1 #15)
#183 := (not #79)
#13 := (f4 #8 #10)
#76 := (= f1 #13)
#182 := (not #76)
#166 := (or #182 #183)
#167 := (not #166)
#73 := (= f1 #11)
#184 := (iff #73 #167)
#687 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #686) #184)
#187 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #184)
#690 := (iff #187 #687)
#688 := (iff #184 #184)
#689 := [refl]: #688
#691 := [quant-intro #689]: #690
#82 := (and #76 #79)
#85 := (iff #73 #82)
#88 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #85)
#188 := (iff #88 #187)
#185 := (iff #85 #184)
#168 := (iff #82 #167)
#169 := [rewrite]: #168
#186 := [monotonicity #169]: #185
#189 := [quant-intro #186]: #188
#172 := (~ #88 #88)
#170 := (~ #85 #85)
#171 := [refl]: #170
#173 := [nnf-pos #171]: #172
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (and #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #18)
#89 := (iff #19 #88)
#86 := (iff #18 #85)
#83 := (iff #17 #82)
#80 := (iff #16 #79)
#81 := [rewrite]: #80
#77 := (iff #14 #76)
#78 := [rewrite]: #77
#84 := [monotonicity #78 #81]: #83
#74 := (iff #12 #73)
#75 := [rewrite]: #74
#87 := [monotonicity #75 #84]: #86
#90 := [quant-intro #87]: #89
#72 := [asserted]: #19
#93 := [mp #72 #90]: #88
#157 := [mp~ #93 #173]: #88
#190 := [mp #157 #189]: #187
#692 := [mp #190 #691]: #687
#674 := (not #687)
#346 := (or #674 #680)
#347 := [quant-inst #41 #42 #43]: #346
#676 := [unit-resolution #347 #692]: #680
#681 := (not #680)
#682 := (or #681 #131 #193)
#683 := [def-axiom]: #682
#677 := [unit-resolution #683 #676]: #334
#318 := [unit-resolution #677 #467 #335]: false
#661 := [lemma #318]: #193
#288 := (or #131 #194)
#359 := (or #131 #194 #348)
#360 := [def-axiom]: #359
#361 := [unit-resolution #360 #210]: #288
#322 := [unit-resolution #361 #661]: #131
#323 := (or #150 #194)
#684 := (or #681 #150 #194)
#679 := [def-axiom]: #684
#324 := [unit-resolution #679 #676]: #323
[unit-resolution #324 #322 #661]: false
unsat
2f40e8acf872d44aceb8e8d3d683e7b0a1b857ff 141 0
#2 := false
decl f4 :: (-> S2 S3 S1)
decl f10 :: S3
#42 := f10
decl f8 :: S2
#36 := f8
#231 := (f4 f8 f10)
decl f1 :: S1
#4 := f1
#318 := (= f1 #231)
#232 := (not #318)
decl f9 :: S2
#41 := f9
#319 := (f4 f9 f10)
#233 := (= f1 #319)
#320 := (not #233)
#311 := (or #320 #232)
#322 := (not #311)
decl f3 :: (-> S2 S2 S3 S1)
#43 := (f3 f9 f8 f10)
#125 := (= f1 #43)
#323 := (iff #125 #322)
#10 := (:var 0 S3)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#11 := (f3 #8 #9 #10)
#649 := (pattern #11)
#15 := (f4 #9 #10)
#73 := (= f1 #15)
#166 := (not #73)
#13 := (f4 #8 #10)
#70 := (= f1 #13)
#165 := (not #70)
#149 := (or #165 #166)
#150 := (not #149)
#67 := (= f1 #11)
#167 := (iff #67 #150)
#650 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #649) #167)
#170 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #167)
#653 := (iff #170 #650)
#651 := (iff #167 #167)
#652 := [refl]: #651
#654 := [quant-intro #652]: #653
#76 := (and #70 #73)
#79 := (iff #67 #76)
#82 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #79)
#171 := (iff #82 #170)
#168 := (iff #79 #167)
#151 := (iff #76 #150)
#152 := [rewrite]: #151
#169 := [monotonicity #152]: #168
#172 := [quant-intro #169]: #171
#155 := (~ #82 #82)
#153 := (~ #79 #79)
#154 := [refl]: #153
#156 := [nnf-pos #154]: #155
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (and #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #18)
#83 := (iff #19 #82)
#80 := (iff #18 #79)
#77 := (iff #17 #76)
#74 := (iff #16 #73)
#75 := [rewrite]: #74
#71 := (iff #14 #70)
#72 := [rewrite]: #71
#78 := [monotonicity #72 #75]: #77
#68 := (iff #12 #67)
#69 := [rewrite]: #68
#81 := [monotonicity #69 #78]: #80
#84 := [quant-intro #81]: #83
#66 := [asserted]: #19
#87 := [mp #66 #84]: #82
#140 := [mp~ #87 #156]: #82
#173 := [mp #140 #172]: #170
#655 := [mp #173 #654]: #650
#321 := (not #650)
#325 := (or #321 #323)
#304 := [quant-inst #41 #36 #42]: #325
#251 := [unit-resolution #304 #655]: #323
#310 := (not #323)
#324 := (or #310 #322)
#44 := (= #43 f1)
#45 := (not #44)
#46 := (not #45)
#137 := (iff #46 #125)
#129 := (not #125)
#132 := (not #129)
#135 := (iff #132 #125)
#136 := [rewrite]: #135
#133 := (iff #46 #132)
#130 := (iff #45 #129)
#127 := (iff #44 #125)
#128 := [rewrite]: #127
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#138 := [trans #134 #136]: #137
#124 := [asserted]: #46
#141 := [mp #124 #138]: #125
#646 := (or #310 #129 #322)
#647 := [def-axiom]: #646
#640 := [unit-resolution #647 #141]: #324
#281 := [unit-resolution #640 #251]: #322
#298 := (or #311 #318)
#430 := [def-axiom]: #298
#624 := [unit-resolution #430 #281]: #318
#37 := (f4 f8 #10)
#670 := (pattern #37)
#114 := (= f1 #37)
#118 := (not #114)
#671 := (forall (vars (?v0 S3)) (:pat #670) #118)
#121 := (forall (vars (?v0 S3)) #118)
#674 := (iff #121 #671)
#672 := (iff #118 #118)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#147 := (~ #121 #121)
#162 := (~ #118 #118)
#163 := [refl]: #162
#148 := [nnf-pos #163]: #147
#38 := (= #37 f1)
#39 := (not #38)
#40 := (forall (vars (?v0 S3)) #39)
#122 := (iff #40 #121)
#119 := (iff #39 #118)
#116 := (iff #38 #114)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#123 := [quant-intro #120]: #122
#113 := [asserted]: #40
#126 := [mp #113 #123]: #121
#164 := [mp~ #126 #148]: #121
#676 := [mp #164 #675]: #671
#301 := (not #671)
#639 := (or #301 #232)
#297 := [quant-inst #42]: #639
[unit-resolution #297 #676 #624]: false
unsat
fc29248879b25eb4ac36871e75531b9c02a89803 165 0
#2 := false
decl f4 :: (-> S2 S3 S1)
decl f10 :: S3
#42 := f10
decl f9 :: S2
#41 := f9
#45 := (f4 f9 f10)
decl f1 :: S1
#4 := f1
#131 := (= f1 #45)
#327 := (not #131)
decl f3 :: (-> S2 S2 S3 S1)
decl f7 :: S2
#32 := f7
#43 := (f3 f9 f7 f10)
#127 := (= f1 #43)
#331 := (f4 f7 f10)
#328 := (= f1 #331)
#332 := (not #328)
#305 := [hypothesis]: #332
#10 := (:var 0 S3)
#33 := (f4 f7 #10)
#670 := (pattern #33)
#108 := (= f1 #33)
#671 := (forall (vars (?v0 S3)) (:pat #670) #108)
#112 := (forall (vars (?v0 S3)) #108)
#674 := (iff #112 #671)
#672 := (iff #108 #108)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#152 := (~ #112 #112)
#166 := (~ #108 #108)
#167 := [refl]: #166
#153 := [nnf-pos #167]: #152
#34 := (= #33 f1)
#35 := (forall (vars (?v0 S3)) #34)
#113 := (iff #35 #112)
#110 := (iff #34 #108)
#111 := [rewrite]: #110
#114 := [quant-intro #111]: #113
#107 := [asserted]: #35
#117 := [mp #107 #114]: #112
#168 := [mp~ #117 #153]: #112
#676 := [mp #168 #675]: #671
#293 := (not #671)
#294 := (or #293 #328)
#295 := [quant-inst #42]: #294
#437 := [unit-resolution #295 #676 #305]: false
#633 := [lemma #437]: #328
#140 := (not #127)
#634 := [hypothesis]: #140
#326 := (or #131 #127)
#141 := (iff #131 #140)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#144 := (iff #48 #141)
#134 := (iff #127 #131)
#137 := (not #134)
#142 := (iff #137 #141)
#143 := [rewrite]: #142
#138 := (iff #48 #137)
#135 := (iff #47 #134)
#132 := (iff #46 #131)
#133 := [rewrite]: #132
#129 := (iff #44 #127)
#130 := [rewrite]: #129
#136 := [monotonicity #130 #133]: #135
#139 := [monotonicity #136]: #138
#145 := [trans #139 #143]: #144
#126 := [asserted]: #48
#148 := [mp #126 #145]: #141
#238 := (not #141)
#325 := (or #131 #127 #238)
#239 := [def-axiom]: #325
#240 := [unit-resolution #239 #148]: #326
#635 := [unit-resolution #240 #634]: #131
#311 := (or #327 #332)
#637 := (or #127 #311)
#648 := (not #311)
#650 := (iff #127 #648)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#11 := (f3 #8 #9 #10)
#656 := (pattern #11)
#15 := (f4 #9 #10)
#75 := (= f1 #15)
#173 := (not #75)
#13 := (f4 #8 #10)
#72 := (= f1 #13)
#172 := (not #72)
#156 := (or #172 #173)
#157 := (not #156)
#69 := (= f1 #11)
#174 := (iff #69 #157)
#657 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #656) #174)
#177 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #174)
#660 := (iff #177 #657)
#658 := (iff #174 #174)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#78 := (and #72 #75)
#81 := (iff #69 #78)
#84 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #81)
#178 := (iff #84 #177)
#175 := (iff #81 #174)
#158 := (iff #78 #157)
#159 := [rewrite]: #158
#176 := [monotonicity #159]: #175
#179 := [quant-intro #176]: #178
#162 := (~ #84 #84)
#160 := (~ #81 #81)
#161 := [refl]: #160
#163 := [nnf-pos #161]: #162
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (and #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #18)
#85 := (iff #19 #84)
#82 := (iff #18 #81)
#79 := (iff #17 #78)
#76 := (iff #16 #75)
#77 := [rewrite]: #76
#73 := (iff #14 #72)
#74 := [rewrite]: #73
#80 := [monotonicity #74 #77]: #79
#70 := (iff #12 #69)
#71 := [rewrite]: #70
#83 := [monotonicity #71 #80]: #82
#86 := [quant-intro #83]: #85
#68 := [asserted]: #19
#89 := [mp #68 #86]: #84
#147 := [mp~ #89 #163]: #84
#180 := [mp #147 #179]: #177
#662 := [mp #180 #661]: #657
#644 := (not #657)
#316 := (or #644 #650)
#317 := [quant-inst #41 #32 #42]: #316
#636 := [unit-resolution #317 #662]: #650
#645 := (not #650)
#303 := (or #645 #127 #311)
#308 := [def-axiom]: #303
#632 := [unit-resolution #308 #636]: #637
#638 := [unit-resolution #632 #634]: #311
#649 := (or #648 #327 #332)
#655 := [def-axiom]: #649
#274 := [unit-resolution #655 #638 #635 #633]: false
#639 := [lemma #274]: #127
#330 := (or #327 #140)
#318 := (or #327 #140 #238)
#329 := [def-axiom]: #318
#258 := [unit-resolution #329 #148]: #330
#641 := [unit-resolution #258 #639]: #327
#279 := (or #140 #648)
#646 := (or #645 #140 #648)
#304 := [def-axiom]: #646
#280 := [unit-resolution #304 #636]: #279
#642 := [unit-resolution #280 #639]: #648
#651 := (or #311 #131)
#652 := [def-axiom]: #651
[unit-resolution #652 #642 #641]: false
unsat
cde3f1655461765c0379419d9bc70392d3f61227 164 0
#2 := false
decl f3 :: (-> S2 S2 S3 S1)
decl f11 :: S3
#43 := f11
decl f9 :: S2
#41 := f9
decl f10 :: S2
#42 := f10
#46 := (f3 f10 f9 f11)
decl f1 :: S1
#4 := f1
#132 := (= f1 #46)
#328 := (not #132)
#44 := (f3 f9 f10 f11)
#128 := (= f1 #44)
#141 := (not #128)
#630 := [hypothesis]: #141
#327 := (or #132 #128)
#142 := (iff #132 #141)
#47 := (= #46 f1)
#45 := (= #44 f1)
#48 := (iff #45 #47)
#49 := (not #48)
#145 := (iff #49 #142)
#135 := (iff #128 #132)
#138 := (not #135)
#143 := (iff #138 #142)
#144 := [rewrite]: #143
#139 := (iff #49 #138)
#136 := (iff #48 #135)
#133 := (iff #47 #132)
#134 := [rewrite]: #133
#130 := (iff #45 #128)
#131 := [rewrite]: #130
#137 := [monotonicity #131 #134]: #136
#140 := [monotonicity #137]: #139
#146 := [trans #140 #144]: #145
#127 := [asserted]: #49
#149 := [mp #127 #146]: #142
#239 := (not #142)
#326 := (or #132 #128 #239)
#240 := [def-axiom]: #326
#241 := [unit-resolution #240 #149]: #327
#631 := [unit-resolution #241 #630]: #132
decl f4 :: (-> S2 S3 S1)
#312 := (f4 f10 f11)
#649 := (= f1 #312)
#651 := (not #649)
#332 := (f4 f9 f11)
#329 := (= f1 #332)
#333 := (not #329)
#317 := (or #333 #651)
#628 := (or #128 #317)
#653 := (not #317)
#644 := (iff #128 #653)
#10 := (:var 0 S3)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#11 := (f3 #8 #9 #10)
#657 := (pattern #11)
#15 := (f4 #9 #10)
#76 := (= f1 #15)
#174 := (not #76)
#13 := (f4 #8 #10)
#73 := (= f1 #13)
#173 := (not #73)
#157 := (or #173 #174)
#158 := (not #157)
#70 := (= f1 #11)
#175 := (iff #70 #158)
#658 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #657) #175)
#178 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #175)
#661 := (iff #178 #658)
#659 := (iff #175 #175)
#660 := [refl]: #659
#662 := [quant-intro #660]: #661
#79 := (and #73 #76)
#82 := (iff #70 #79)
#85 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #82)
#179 := (iff #85 #178)
#176 := (iff #82 #175)
#159 := (iff #79 #158)
#160 := [rewrite]: #159
#177 := [monotonicity #160]: #176
#180 := [quant-intro #177]: #179
#163 := (~ #85 #85)
#161 := (~ #82 #82)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (and #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #18)
#86 := (iff #19 #85)
#83 := (iff #18 #82)
#80 := (iff #17 #79)
#77 := (iff #16 #76)
#78 := [rewrite]: #77
#74 := (iff #14 #73)
#75 := [rewrite]: #74
#81 := [monotonicity #75 #78]: #80
#71 := (iff #12 #70)
#72 := [rewrite]: #71
#84 := [monotonicity #72 #81]: #83
#87 := [quant-intro #84]: #86
#69 := [asserted]: #19
#90 := [mp #69 #87]: #85
#148 := [mp~ #90 #164]: #85
#181 := [mp #148 #180]: #178
#663 := [mp #181 #662]: #658
#304 := (not #658)
#337 := (or #304 #644)
#353 := [quant-inst #41 #42 #43]: #337
#624 := [unit-resolution #353 #663]: #644
#354 := (not #644)
#355 := (or #354 #128 #317)
#341 := [def-axiom]: #355
#625 := [unit-resolution #341 #624]: #628
#629 := [unit-resolution #625 #630]: #317
#339 := (or #328 #653)
#650 := (iff #132 #653)
#309 := (or #304 #650)
#306 := (or #651 #333)
#438 := (not #306)
#645 := (iff #132 #438)
#647 := (or #304 #645)
#648 := (iff #647 #309)
#632 := (iff #309 #309)
#293 := [rewrite]: #632
#656 := (iff #645 #650)
#654 := (iff #438 #653)
#318 := (iff #306 #317)
#652 := [rewrite]: #318
#655 := [monotonicity #652]: #654
#646 := [monotonicity #655]: #656
#289 := [monotonicity #646]: #648
#294 := [trans #289 #293]: #648
#305 := [quant-inst #42 #41 #43]: #647
#295 := [mp #305 #294]: #309
#338 := [unit-resolution #295 #663]: #650
#633 := (not #650)
#640 := (or #633 #328 #653)
#642 := [def-axiom]: #640
#340 := [unit-resolution #642 #338]: #339
#342 := [unit-resolution #340 #629 #631]: false
#620 := [lemma #342]: #128
#331 := (or #328 #141)
#319 := (or #328 #141 #239)
#330 := [def-axiom]: #319
#259 := [unit-resolution #330 #149]: #331
#621 := [unit-resolution #259 #620]: #328
#334 := (or #141 #653)
#356 := (or #354 #141 #653)
#247 := [def-axiom]: #356
#618 := [unit-resolution #247 #624]: #334
#622 := [unit-resolution #618 #620]: #653
#619 := (or #132 #317)
#639 := (or #633 #132 #317)
#275 := [def-axiom]: #639
#623 := [unit-resolution #275 #338]: #619
[unit-resolution #623 #622 #621]: false
unsat
0602b5dc7726bda4b36d0dee5a2dbb8b5b433e1c 142 0
#2 := false
decl f3 :: (-> S2 S2 S3 S1)
decl f10 :: S3
#42 := f10
decl f9 :: S2
#41 := f9
#43 := (f3 f9 f9 f10)
decl f1 :: S1
#4 := f1
#127 := (= f1 #43)
#140 := (not #127)
#636 := [hypothesis]: #140
decl f4 :: (-> S2 S3 S1)
#45 := (f4 f9 f10)
#131 := (= f1 #45)
#326 := (or #131 #127)
#141 := (iff #131 #140)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#144 := (iff #48 #141)
#134 := (iff #127 #131)
#137 := (not #134)
#142 := (iff #137 #141)
#143 := [rewrite]: #142
#138 := (iff #48 #137)
#135 := (iff #47 #134)
#132 := (iff #46 #131)
#133 := [rewrite]: #132
#129 := (iff #44 #127)
#130 := [rewrite]: #129
#136 := [monotonicity #130 #133]: #135
#139 := [monotonicity #136]: #138
#145 := [trans #139 #143]: #144
#126 := [asserted]: #48
#148 := [mp #126 #145]: #141
#238 := (not #141)
#325 := (or #131 #127 #238)
#239 := [def-axiom]: #325
#240 := [unit-resolution #239 #148]: #326
#637 := [unit-resolution #240 #636]: #131
#327 := (not #131)
#638 := (or #127 #327)
#10 := (:var 0 S3)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#11 := (f3 #8 #9 #10)
#656 := (pattern #11)
#15 := (f4 #9 #10)
#75 := (= f1 #15)
#173 := (not #75)
#13 := (f4 #8 #10)
#72 := (= f1 #13)
#172 := (not #72)
#156 := (or #172 #173)
#157 := (not #156)
#69 := (= f1 #11)
#174 := (iff #69 #157)
#657 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #656) #174)
#177 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #174)
#660 := (iff #177 #657)
#658 := (iff #174 #174)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#78 := (and #72 #75)
#81 := (iff #69 #78)
#84 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #81)
#178 := (iff #84 #177)
#175 := (iff #81 #174)
#158 := (iff #78 #157)
#159 := [rewrite]: #158
#176 := [monotonicity #159]: #175
#179 := [quant-intro #176]: #178
#162 := (~ #84 #84)
#160 := (~ #81 #81)
#161 := [refl]: #160
#163 := [nnf-pos #161]: #162
#16 := (= #15 f1)
#14 := (= #13 f1)
#17 := (and #14 #16)
#12 := (= #11 f1)
#18 := (iff #12 #17)
#19 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #18)
#85 := (iff #19 #84)
#82 := (iff #18 #81)
#79 := (iff #17 #78)
#76 := (iff #16 #75)
#77 := [rewrite]: #76
#73 := (iff #14 #72)
#74 := [rewrite]: #73
#80 := [monotonicity #74 #77]: #79
#70 := (iff #12 #69)
#71 := [rewrite]: #70
#83 := [monotonicity #71 #80]: #82
#86 := [quant-intro #83]: #85
#68 := [asserted]: #19
#89 := [mp #68 #86]: #84
#147 := [mp~ #89 #163]: #84
#180 := [mp #147 #179]: #177
#662 := [mp #180 #661]: #657
#654 := (not #657)
#649 := (or #654 #134)
#331 := (or #327 #327)
#328 := (not #331)
#332 := (iff #127 #328)
#655 := (or #654 #332)
#303 := (iff #655 #649)
#646 := (iff #649 #649)
#304 := [rewrite]: #646
#652 := (iff #332 #134)
#317 := (iff #328 #131)
#650 := (not #327)
#644 := (iff #650 #131)
#316 := [rewrite]: #644
#305 := (iff #328 #650)
#311 := (iff #331 #327)
#648 := [rewrite]: #311
#437 := [monotonicity #648]: #305
#651 := [trans #437 #316]: #317
#653 := [monotonicity #651]: #652
#308 := [monotonicity #653]: #303
#647 := [trans #308 #304]: #303
#645 := [quant-inst #41 #41 #42]: #655
#288 := [mp #645 #647]: #649
#632 := [unit-resolution #288 #662]: #134
#631 := (or #137 #127 #327)
#292 := [def-axiom]: #631
#274 := [unit-resolution #292 #632]: #638
#639 := [unit-resolution #274 #637 #636]: false
#641 := [lemma #639]: #127
#330 := (or #327 #140)
#318 := (or #327 #140 #238)
#329 := [def-axiom]: #318
#258 := [unit-resolution #329 #148]: #330
#279 := [unit-resolution #258 #641]: #327
#280 := (or #140 #131)
#293 := (or #137 #140 #131)
#294 := [def-axiom]: #293
#642 := [unit-resolution #294 #632]: #280
[unit-resolution #642 #279 #641]: false
unsat
2197c1dae16f488eb4bfcbae6c35e5ab268a4235 280 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#47 := f12
decl f4 :: (-> S2 S2 S2)
decl f10 :: S2
#43 := f10
decl f9 :: S2
#42 := f9
#50 := (f4 f9 f10)
#318 := (f3 #50 f12)
decl f1 :: S1
#4 := f1
#655 := (= f1 #318)
#253 := (f3 f10 f12)
#632 := (= f1 #253)
#629 := (not #632)
#343 := (f3 f9 f12)
#359 := (= f1 #343)
#360 := (not #359)
#618 := (or #360 #629)
#619 := (not #618)
#615 := (iff #619 #655)
#586 := (not #615)
decl f11 :: S2
#44 := f11
#338 := (f3 f11 f12)
#335 := (= f1 #338)
#339 := (not #335)
#488 := (or #339 #629)
#497 := (not #488)
#45 := (f4 f10 f11)
#650 := (f3 #45 f12)
#636 := (= f1 #650)
#498 := (iff #497 #636)
#591 := (not #498)
#571 := [hypothesis]: #591
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#8 := (:var 2 S2)
#10 := (f4 #8 #9)
#12 := (f3 #10 #11)
#663 := (pattern #12)
#16 := (f3 #9 #11)
#82 := (= f1 #16)
#180 := (not #82)
#14 := (f3 #8 #11)
#79 := (= f1 #14)
#179 := (not #79)
#163 := (or #179 #180)
#164 := (not #163)
#76 := (= f1 #12)
#181 := (iff #76 #164)
#664 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) (:pat #663) #181)
#184 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #181)
#667 := (iff #184 #664)
#665 := (iff #181 #181)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#85 := (and #79 #82)
#88 := (iff #76 #85)
#91 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #88)
#185 := (iff #91 #184)
#182 := (iff #88 #181)
#165 := (iff #85 #164)
#166 := [rewrite]: #165
#183 := [monotonicity #166]: #182
#186 := [quant-intro #183]: #185
#169 := (~ #91 #91)
#167 := (~ #88 #88)
#168 := [refl]: #167
#170 := [nnf-pos #168]: #169
#17 := (= #16 f1)
#15 := (= #14 f1)
#18 := (and #15 #17)
#13 := (= #12 f1)
#19 := (iff #13 #18)
#20 := (forall (vars (?v0 S2) (?v1 S2) (?v2 S3)) #19)
#92 := (iff #20 #91)
#89 := (iff #19 #88)
#86 := (iff #18 #85)
#83 := (iff #17 #82)
#84 := [rewrite]: #83
#80 := (iff #15 #79)
#81 := [rewrite]: #80
#87 := [monotonicity #81 #84]: #86
#77 := (iff #13 #76)
#78 := [rewrite]: #77
#90 := [monotonicity #78 #87]: #89
#93 := [quant-intro #90]: #92
#75 := [asserted]: #20
#96 := [mp #75 #93]: #91
#154 := [mp~ #96 #170]: #91
#187 := [mp #154 #186]: #184
#669 := [mp #187 #668]: #664
#310 := (not #664)
#502 := (or #310 #498)
#604 := (or #629 #339)
#486 := (not #604)
#487 := (iff #636 #486)
#503 := (or #310 #487)
#597 := (iff #503 #502)
#598 := (iff #502 #502)
#585 := [rewrite]: #598
#500 := (iff #487 #498)
#596 := (iff #636 #497)
#499 := (iff #596 #498)
#492 := [rewrite]: #499
#481 := (iff #487 #596)
#592 := (iff #486 #497)
#447 := (iff #604 #488)
#595 := [rewrite]: #447
#593 := [monotonicity #595]: #592
#496 := [monotonicity #593]: #481
#501 := [trans #496 #492]: #500
#594 := [monotonicity #501]: #597
#587 := [trans #594 #585]: #597
#504 := [quant-inst #43 #44 #47]: #503
#579 := [mp #504 #587]: #502
#572 := [unit-resolution #579 #669 #571]: false
#573 := [lemma #572]: #498
#637 := (not #636)
#361 := (or #360 #637)
#347 := (not #361)
#46 := (f4 f9 #45)
#48 := (f3 #46 f12)
#134 := (= f1 #48)
#147 := (not #134)
#574 := [hypothesis]: #147
#575 := (or #134 #361)
#362 := (iff #134 #347)
#633 := (or #310 #362)
#355 := [quant-inst #42 #45 #47]: #633
#570 := [unit-resolution #355 #669]: #362
#345 := (not #362)
#346 := (or #345 #134 #361)
#348 := [def-axiom]: #346
#561 := [unit-resolution #348 #570]: #575
#562 := [unit-resolution #561 #574]: #361
#601 := (or #310 #615)
#620 := (iff #655 #619)
#617 := (or #310 #620)
#622 := (iff #617 #601)
#465 := (iff #601 #601)
#466 := [rewrite]: #465
#616 := (iff #620 #615)
#621 := [rewrite]: #616
#464 := [monotonicity #621]: #622
#608 := [trans #464 #466]: #622
#623 := [quant-inst #42 #43 #47]: #617
#609 := [mp #623 #608]: #601
#564 := [unit-resolution #609 #669]: #615
#550 := (or #586 #619)
#657 := (not #655)
#323 := (or #339 #657)
#659 := (not #323)
#51 := (f4 #50 f11)
#52 := (f3 #51 f12)
#138 := (= f1 #52)
#333 := (or #138 #134)
#148 := (iff #138 #147)
#53 := (= #52 f1)
#49 := (= #48 f1)
#54 := (iff #49 #53)
#55 := (not #54)
#151 := (iff #55 #148)
#141 := (iff #134 #138)
#144 := (not #141)
#149 := (iff #144 #148)
#150 := [rewrite]: #149
#145 := (iff #55 #144)
#142 := (iff #54 #141)
#139 := (iff #53 #138)
#140 := [rewrite]: #139
#136 := (iff #49 #134)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#146 := [monotonicity #143]: #145
#152 := [trans #146 #150]: #151
#133 := [asserted]: #55
#155 := [mp #133 #152]: #148
#245 := (not #148)
#332 := (or #138 #134 #245)
#246 := [def-axiom]: #332
#247 := [unit-resolution #246 #155]: #333
#565 := [unit-resolution #247 #574]: #138
#334 := (not #138)
#563 := (or #334 #659)
#656 := (iff #138 #659)
#315 := (or #310 #656)
#312 := (or #657 #339)
#444 := (not #312)
#651 := (iff #138 #444)
#653 := (or #310 #651)
#654 := (iff #653 #315)
#638 := (iff #315 #315)
#299 := [rewrite]: #638
#662 := (iff #651 #656)
#660 := (iff #444 #659)
#324 := (iff #312 #323)
#658 := [rewrite]: #324
#661 := [monotonicity #658]: #660
#652 := [monotonicity #661]: #662
#295 := [monotonicity #652]: #654
#300 := [trans #295 #299]: #654
#311 := [quant-inst #50 #44 #47]: #653
#301 := [mp #311 #300]: #315
#566 := [unit-resolution #301 #669]: #656
#639 := (not #656)
#646 := (or #639 #334 #659)
#648 := [def-axiom]: #646
#567 := [unit-resolution #648 #566]: #563
#547 := [unit-resolution #567 #565]: #659
#641 := (or #323 #655)
#642 := [def-axiom]: #641
#548 := [unit-resolution #642 #547]: #655
#580 := (or #586 #619 #657)
#581 := [def-axiom]: #580
#551 := [unit-resolution #581 #548]: #550
#552 := [unit-resolution #551 #564]: #619
#610 := (or #618 #359)
#576 := [def-axiom]: #610
#553 := [unit-resolution #576 #552]: #359
#635 := (or #347 #360 #637)
#344 := [def-axiom]: #635
#554 := [unit-resolution #344 #553 #562]: #637
#302 := (or #323 #335)
#640 := [def-axiom]: #302
#555 := [unit-resolution #640 #547]: #335
#578 := (or #618 #632)
#588 := [def-axiom]: #578
#556 := [unit-resolution #588 #552]: #632
#613 := (or #497 #339 #629)
#607 := [def-axiom]: #613
#557 := [unit-resolution #607 #556 #555]: #497
#445 := (or #591 #488 #636)
#446 := [def-axiom]: #445
#558 := [unit-resolution #446 #557 #554 #573]: false
#559 := [lemma #558]: #134
#549 := (or #147 #347)
#626 := (or #345 #147 #347)
#627 := [def-axiom]: #626
#560 := [unit-resolution #627 #570]: #549
#538 := [unit-resolution #560 #559]: #347
#634 := (or #361 #636)
#631 := [def-axiom]: #634
#539 := [unit-resolution #631 #538]: #636
#614 := (or #591 #497 #637)
#443 := [def-axiom]: #614
#541 := [unit-resolution #443 #539 #573]: #497
#606 := (or #488 #632)
#612 := [def-axiom]: #606
#542 := [unit-resolution #612 #541]: #632
#356 := (or #361 #359)
#630 := [def-axiom]: #356
#543 := [unit-resolution #630 #538]: #359
#589 := (or #619 #360 #629)
#590 := [def-axiom]: #589
#544 := [unit-resolution #590 #543 #542]: #619
#337 := (or #334 #147)
#325 := (or #334 #147 #245)
#336 := [def-axiom]: #325
#265 := [unit-resolution #336 #155]: #337
#545 := [unit-resolution #265 #559]: #334
#540 := (or #138 #323)
#645 := (or #639 #138 #323)
#281 := [def-axiom]: #645
#546 := [unit-resolution #281 #566]: #540
#532 := [unit-resolution #546 #545]: #323
#611 := (or #488 #335)
#605 := [def-axiom]: #611
#528 := [unit-resolution #605 #541]: #335
#643 := (or #659 #339 #657)
#644 := [def-axiom]: #643
#529 := [unit-resolution #644 #528 #532]: #657
#582 := (or #586 #618 #655)
#583 := [def-axiom]: #582
#530 := [unit-resolution #583 #529 #544]: #586
[unit-resolution #609 #669 #530]: false
unsat
2b2ce778241d0cd9017eb9658fd16ee31fe3f28e 18 0
#2 := false
decl f9 :: S8
#41 := f9
#42 := (= f9 f9)
#43 := (not #42)
#130 := (iff #43 false)
#1 := true
#125 := (not true)
#128 := (iff #125 false)
#129 := [rewrite]: #128
#126 := (iff #43 #125)
#122 := (iff #42 true)
#124 := [rewrite]: #122
#127 := [monotonicity #124]: #126
#131 := [trans #127 #129]: #130
#121 := [asserted]: #43
[mp #121 #131]: false
unsat
