23fa46bae38100075457f16458b7f980b6e9eaaa 8 0
#2 := false
#1 := true
#7 := (not true)
#29 := (iff #7 false)
#30 := [rewrite]: #29
#28 := [asserted]: #7
[mp #28 #30]: false
unsat
4867997399e05a82038d4f69182ea74d5c78a71f 16 0
#2 := false
#7 := (not false)
#8 := (not #7)
#37 := (iff #8 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #8 #32)
#30 := (iff #7 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #8
[mp #29 #38]: false
unsat
cf32c4bf044ef30ccaadb4c2a904bc42cc810589 21 0
#2 := false
#1 := true
#7 := (not true)
#8 := (not #7)
#9 := (not #8)
#42 := (iff #9 false)
#31 := (iff #7 false)
#32 := [rewrite]: #31
#40 := (iff #9 #7)
#38 := (iff #8 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #8 #33)
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#41 := [monotonicity #39]: #40
#43 := [trans #41 #32]: #42
#30 := [asserted]: #9
[mp #30 #43]: false
unsat
1ca76146d8caa3873d987c8f2b2b61e67bf99885 16 0
#2 := false
#1 := true
#7 := (and true true)
#8 := (not #7)
#37 := (iff #8 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #8 #32)
#30 := (iff #7 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #8
[mp #29 #38]: false
unsat
6fe44a8c791d15e051ebac6bd54712b11019176f 16 0
#2 := false
#1 := true
#7 := (or true false)
#8 := (not #7)
#37 := (iff #8 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #8 #32)
#30 := (iff #7 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #8
[mp #29 #38]: false
unsat
cd5b6483316374c04155ccdcb2bd4ec732d555bc 16 0
#2 := false
#1 := true
#7 := (implies false true)
#8 := (not #7)
#37 := (iff #8 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #8 #32)
#30 := (iff #7 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #8
[mp #29 #38]: false
unsat
1d8b1fcc54699acf56c2f7bd752c247e433581cb 24 0
#2 := false
#1 := true
#7 := (iff false true)
#8 := (not #7)
#9 := (not #8)
#45 := (iff #9 false)
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #9 #40)
#38 := (iff #8 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #8 #33)
#31 := (iff #7 false)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #9
[mp #30 #46]: false
unsat
a659f050ece3306f2b1d4dcfecadbe7f96ac25b7 22 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (or #8 #9)
#11 := (not #10)
#40 := (iff #11 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #11 #35)
#33 := (iff #10 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#32 := [asserted]: #11
[mp #32 #41]: false
unsat
075ccbca5ef8abd85cfaedf1a7322d296271c46f 30 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (and #8 #9)
#11 := (not #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (not false)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 false)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
aa0273c12559afb5fd359c235b02afbc8f3cc399 49 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (and false #8)
#12 := (or #11 #8)
#10 := (not #8)
#13 := (or #10 #12)
#1 := true
#9 := (and true #8)
#14 := (or #9 #13)
#15 := (not #14)
#67 := (iff #15 false)
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #15 #62)
#60 := (iff #14 true)
#55 := (or #8 true)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#48 := (or #10 #8)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (iff #12 #8)
#41 := (or false #8)
#44 := (iff #41 #8)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 false)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#37 := (iff #9 #8)
#38 := [rewrite]: #37
#57 := [monotonicity #38 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#36 := [asserted]: #15
[mp #36 #68]: false
unsat
22c928dddd46280815470bda1451161b824f3f34 21 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (implies #8 #8)
#10 := (not #9)
#39 := (iff #10 false)
#1 := true
#34 := (not true)
#37 := (iff #34 false)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#32 := (iff #9 true)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#31 := [asserted]: #10
[mp #31 #40]: false
unsat
eb161eaf2af208e84d9da7d647585602865b89ac 30 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (and #8 #9)
#11 := (implies #10 false)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (implies false false)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 false)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
b2602e0e3e3911fa8042ad9ddbc6f102e48e88f7 48 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#12 := (and #10 #8)
#47 := (not #12)
#68 := (iff #47 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #47 #63)
#61 := (iff #12 true)
#56 := (and true true)
#59 := (iff #56 true)
#60 := [rewrite]: #59
#57 := (iff #12 #56)
#52 := (iff #8 true)
#11 := (and #8 #10)
#36 := (not #11)
#37 := (or #36 #12)
#40 := (not #37)
#13 := (implies #11 #12)
#14 := (not #13)
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #14
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #11
#44 := [and-elim #43]: #8
#53 := [iff-true #44]: #52
#54 := (iff #10 true)
#46 := [and-elim #43]: #10
#55 := [iff-true #46]: #54
#58 := [monotonicity #55 #53]: #57
#62 := [trans #58 #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#48 := [not-or-elim #45]: #47
[mp #48 #69]: false
unsat
467aa750a0af9865e5bc1b47f63cfc13f031554b 48 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#71 := (iff #11 false)
#66 := (or false false)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #11 #66)
#62 := (iff #10 false)
#53 := (not #10)
#36 := (not #11)
#43 := (or #36 #10 #8)
#46 := (not #43)
#12 := (or #10 #8)
#13 := (implies #11 #12)
#14 := (not #13)
#49 := (iff #14 #46)
#37 := (or #36 #12)
#40 := (not #37)
#47 := (iff #40 #46)
#44 := (iff #37 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#50 := [trans #42 #48]: #49
#35 := [asserted]: #14
#51 := [mp #35 #50]: #46
#54 := [not-or-elim #51]: #53
#63 := [iff-false #54]: #62
#64 := (iff #8 false)
#55 := (not #8)
#56 := [not-or-elim #51]: #55
#65 := [iff-false #56]: #64
#68 := [monotonicity #65 #63]: #67
#72 := [trans #68 #70]: #71
#52 := [not-or-elim #51]: #11
[mp #52 #72]: false
unsat
ff06b47195393e825a3f80a82c50109ac3e8bd12 46 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#55 := (not #8)
#71 := (iff #55 false)
#1 := true
#66 := (not true)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #55 #66)
#62 := (iff #8 true)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#11 := (and #8 #10)
#36 := (not #11)
#43 := (or #36 #8 #10)
#46 := (not #43)
#12 := (or #8 #10)
#13 := (implies #11 #12)
#14 := (not #13)
#49 := (iff #14 #46)
#37 := (or #36 #12)
#40 := (not #37)
#47 := (iff #40 #46)
#44 := (iff #37 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#50 := [trans #42 #48]: #49
#35 := [asserted]: #14
#51 := [mp #35 #50]: #46
#52 := [not-or-elim #51]: #11
#53 := [and-elim #52]: #8
#63 := [iff-true #53]: #62
#68 := [monotonicity #63]: #67
#72 := [trans #68 #70]: #71
#56 := [not-or-elim #51]: #55
[mp #56 #72]: false
unsat
a9e6ae903779155c6cefbf205c225628953e624e 35 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#13 := (not #8)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#11 := (or #8 #10)
#12 := (not #11)
#14 := (implies #12 #13)
#15 := (not #14)
#52 := (iff #15 false)
#37 := (or #11 #13)
#40 := (not #37)
#50 := (iff #40 false)
#1 := true
#45 := (not true)
#48 := (iff #45 false)
#49 := [rewrite]: #48
#46 := (iff #40 #45)
#43 := (iff #37 true)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#53 := [trans #42 #51]: #52
#36 := [asserted]: #15
[mp #36 #53]: false
unsat
fb622d34475687ad69de4f4faf6a2f3bed3d41ba 35 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#13 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#12 := (not #11)
#14 := (implies #12 #13)
#15 := (not #14)
#52 := (iff #15 false)
#37 := (or #11 #13)
#40 := (not #37)
#50 := (iff #40 false)
#1 := true
#45 := (not true)
#48 := (iff #45 false)
#49 := [rewrite]: #48
#46 := (iff #40 #45)
#43 := (iff #37 true)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#53 := [trans #42 #51]: #52
#36 := [asserted]: #15
[mp #36 #53]: false
unsat
53094a0b951afe51834bc943782c2a61c91fc254 29 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#51 := (iff #8 false)
#9 := (not #8)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (and #8 #11)
#13 := (not #12)
#37 := (or #8 #13)
#40 := (not #37)
#14 := (implies #9 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#36 := [asserted]: #15
#45 := [mp #36 #42]: #40
#43 := [not-or-elim #45]: #9
#52 := [iff-false #43]: #51
#44 := [not-or-elim #45]: #12
#46 := [and-elim #44]: #8
[mp #46 #52]: false
unsat
380c58b7f01c4eb6d1f5b709fb3a647172217808 29 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#51 := (iff #8 false)
#9 := (not #8)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (and #11 #8)
#13 := (not #12)
#37 := (or #8 #13)
#40 := (not #37)
#14 := (implies #9 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#36 := [asserted]: #15
#45 := [mp #36 #42]: #40
#43 := [not-or-elim #45]: #9
#52 := [iff-false #43]: #51
#44 := [not-or-elim #45]: #12
#47 := [and-elim #44]: #8
[mp #47 #52]: false
unsat
bfe8aa961b370c267ecd388cc5b7c835a7cfadff 31 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#13 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#12 := (not #8)
#14 := (or #12 #13)
#11 := (and #8 #10)
#40 := (iff #11 #14)
#43 := (iff #40 false)
#15 := (not #14)
#49 := (iff #15 #14)
#46 := (iff #49 false)
#47 := [rewrite]: #46
#50 := (iff #40 #49)
#16 := (iff #11 #15)
#48 := [rewrite]: #16
#51 := [monotonicity #48]: #50
#45 := [trans #51 #47]: #43
#17 := (not #16)
#39 := (iff #17 #40)
#41 := [rewrite]: #39
#38 := [asserted]: #17
#44 := [mp #38 #41]: #40
[mp #44 #45]: false
unsat
f98cd324a1d939c466a676264b34fe6330962e34 53 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#15 := (and #10 #13)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#16 := (and #8 #15)
#11 := (and #8 #10)
#14 := (and #11 #13)
#17 := (implies #14 #16)
#18 := (not #17)
#69 := (iff #18 false)
#40 := (not #14)
#41 := (or #40 #16)
#44 := (not #41)
#67 := (iff #44 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #44 #62)
#60 := (iff #41 true)
#47 := (and #8 #10 #13)
#50 := (not #47)
#55 := (or #50 #47)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #41 #55)
#53 := (iff #16 #47)
#54 := [rewrite]: #53
#51 := (iff #40 #50)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#57 := [monotonicity #52 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#70 := [trans #46 #68]: #69
#39 := [asserted]: #18
[mp #39 #70]: false
unsat
8a92c826e93199f25eaea9a9d8eb4b750d4ce618 68 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#47 := (or #8 #10 #13)
#90 := (iff #47 false)
#85 := (or false false false)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #47 #85)
#83 := (iff #13 false)
#72 := (not #13)
#50 := (not #47)
#56 := (or #50 #8 #10 #13)
#61 := (not #56)
#15 := (or #10 #13)
#16 := (or #8 #15)
#11 := (or #8 #10)
#14 := (or #11 #13)
#17 := (implies #14 #16)
#18 := (not #17)
#64 := (iff #18 #61)
#40 := (not #14)
#41 := (or #40 #16)
#44 := (not #41)
#62 := (iff #44 #61)
#59 := (iff #41 #56)
#53 := (or #50 #16)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #41 #53)
#51 := (iff #40 #50)
#48 := (iff #14 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#55 := [monotonicity #52]: #54
#60 := [trans #55 #58]: #59
#63 := [monotonicity #60]: #62
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#65 := [trans #46 #63]: #64
#39 := [asserted]: #18
#66 := [mp #39 #65]: #61
#73 := [not-or-elim #66]: #72
#84 := [iff-false #73]: #83
#81 := (iff #10 false)
#70 := (not #10)
#71 := [not-or-elim #66]: #70
#82 := [iff-false #71]: #81
#79 := (iff #8 false)
#68 := (not #8)
#69 := [not-or-elim #66]: #68
#80 := [iff-false #69]: #79
#87 := [monotonicity #80 #82 #84]: #86
#91 := [trans #87 #89]: #90
#67 := [not-or-elim #66]: #47
[mp #67 #91]: false
unsat
fc4b5f359a07a487172052f71a085a338dacb4ab 80 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#15 := (or #8 #13)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#60 := (not #10)
#59 := (not #8)
#61 := (or #59 #60)
#62 := (not #61)
#85 := (not #13)
#96 := [hypothesis]: #13
#86 := (or #15 #85)
#87 := [def-axiom]: #86
#97 := [unit-resolution #87 #96]: #15
#16 := (or #10 #13)
#92 := (or #16 #85)
#93 := [def-axiom]: #92
#98 := [unit-resolution #93 #96]: #16
#64 := (not #16)
#63 := (not #15)
#65 := (or #63 #64)
#17 := (and #15 #16)
#49 := (not #17)
#74 := (iff #49 #65)
#66 := (not #65)
#69 := (not #66)
#72 := (iff #69 #65)
#73 := [rewrite]: #72
#70 := (iff #49 #69)
#67 := (iff #17 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#11 := (and #8 #10)
#14 := (or #11 #13)
#41 := (not #14)
#42 := (or #41 #17)
#45 := (not #42)
#18 := (implies #14 #17)
#19 := (not #18)
#46 := (iff #19 #45)
#43 := (iff #18 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#40 := [asserted]: #19
#50 := [mp #40 #47]: #45
#51 := [not-or-elim #50]: #49
#76 := [mp #51 #75]: #65
#99 := [unit-resolution #76 #98 #97]: false
#100 := [lemma #99]: #85
#55 := (or #62 #13)
#56 := (iff #14 #55)
#57 := (iff #11 #62)
#58 := [rewrite]: #57
#53 := [monotonicity #58]: #56
#48 := [not-or-elim #50]: #14
#54 := [mp #48 #53]: #55
#101 := [unit-resolution #54 #100]: #62
#77 := (or #61 #8)
#78 := [def-axiom]: #77
#102 := [unit-resolution #78 #101]: #8
#83 := (or #15 #59)
#84 := [def-axiom]: #83
#103 := [unit-resolution #84 #102]: #15
#79 := (or #61 #10)
#80 := [def-axiom]: #79
#104 := [unit-resolution #80 #101]: #10
#90 := (or #16 #60)
#91 := [def-axiom]: #90
#105 := [unit-resolution #91 #104]: #16
[unit-resolution #76 #105 #103]: false
unsat
a7b9e3e37b2bf7cfdd0c93de11378292f7f169f7 82 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#16 := (and #8 #13)
#60 := (not #16)
#101 := (iff #60 false)
#1 := true
#71 := (not true)
#99 := (iff #71 false)
#100 := [rewrite]: #99
#72 := (iff #60 #71)
#96 := (iff #16 true)
#91 := (and true true)
#94 := (iff #91 true)
#95 := [rewrite]: #94
#92 := (iff #16 #91)
#70 := (iff #13 true)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#14 := (or #13 #10)
#80 := (iff #14 #13)
#75 := (or #13 false)
#78 := (iff #75 #13)
#79 := [rewrite]: #78
#76 := (iff #14 #75)
#73 := (iff #10 false)
#62 := (not #10)
#11 := (or #8 #10)
#15 := (and #11 #14)
#41 := (not #15)
#48 := (or #41 #16 #10)
#51 := (not #48)
#17 := (or #16 #10)
#18 := (implies #15 #17)
#19 := (not #18)
#54 := (iff #19 #51)
#42 := (or #41 #17)
#45 := (not #42)
#52 := (iff #45 #51)
#49 := (iff #42 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#46 := (iff #19 #45)
#43 := (iff #18 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#55 := [trans #47 #53]: #54
#40 := [asserted]: #19
#56 := [mp #40 #55]: #51
#63 := [not-or-elim #56]: #62
#74 := [iff-false #63]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#57 := [not-or-elim #56]: #15
#59 := [and-elim #57]: #14
#69 := [mp #59 #81]: #13
#82 := [iff-true #69]: #70
#68 := (iff #8 true)
#88 := (iff #11 #8)
#83 := (or #8 false)
#86 := (iff #83 #8)
#87 := [rewrite]: #86
#84 := (iff #11 #83)
#85 := [monotonicity #74]: #84
#89 := [trans #85 #87]: #88
#58 := [and-elim #57]: #11
#67 := [mp #58 #89]: #8
#90 := [iff-true #67]: #68
#93 := [monotonicity #90 #82]: #92
#97 := [trans #93 #95]: #96
#98 := [monotonicity #97]: #72
#102 := [trans #98 #100]: #101
#61 := [not-or-elim #56]: #60
[mp #61 #102]: false
unsat
fbfd7f42f20fd17af6ee42b17ec7a0dc3c529924 81 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#102 := (iff #11 false)
#97 := (or false false)
#100 := (iff #97 false)
#101 := [rewrite]: #100
#98 := (iff #11 #97)
#95 := (iff #10 false)
#91 := (not #10)
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
#16 := (and #10 #13)
#62 := (not #16)
#92 := (iff #62 #91)
#89 := (iff #16 #10)
#1 := true
#84 := (and #10 true)
#87 := (iff #84 #10)
#88 := [rewrite]: #87
#85 := (iff #16 #84)
#69 := (iff #13 true)
#14 := (and #11 #13)
#15 := (and #8 #13)
#41 := (not #14)
#48 := (or #41 #15 #16)
#51 := (not #48)
#17 := (or #15 #16)
#18 := (implies #14 #17)
#19 := (not #18)
#54 := (iff #19 #51)
#42 := (or #41 #17)
#45 := (not #42)
#52 := (iff #45 #51)
#49 := (iff #42 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#46 := (iff #19 #45)
#43 := (iff #18 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#55 := [trans #47 #53]: #54
#40 := [asserted]: #19
#56 := [mp #40 #55]: #51
#57 := [not-or-elim #56]: #14
#59 := [and-elim #57]: #13
#70 := [iff-true #59]: #69
#86 := [monotonicity #70]: #85
#90 := [trans #86 #88]: #89
#93 := [monotonicity #90]: #92
#63 := [not-or-elim #56]: #62
#94 := [mp #63 #93]: #91
#96 := [iff-false #94]: #95
#82 := (iff #8 false)
#78 := (not #8)
#60 := (not #15)
#79 := (iff #60 #78)
#76 := (iff #15 #8)
#71 := (and #8 true)
#74 := (iff #71 #8)
#75 := [rewrite]: #74
#72 := (iff #15 #71)
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#80 := [monotonicity #77]: #79
#61 := [not-or-elim #56]: #60
#81 := [mp #61 #80]: #78
#83 := [iff-false #81]: #82
#99 := [monotonicity #83 #96]: #98
#103 := [trans #99 #101]: #102
#58 := [and-elim #57]: #11
[mp #58 #103]: false
unsat
e8a50c44ee4032088b7ba718bb04f0f679fca9de 83 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#60 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#59 := (not #8)
#61 := (or #59 #60)
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
#16 := (or #8 #13)
#68 := (not #16)
#99 := [hypothesis]: #60
#83 := (or #61 #10)
#84 := [def-axiom]: #83
#100 := [unit-resolution #84 #99]: #61
#55 := (not #13)
#56 := (or #55 #60)
#89 := (or #56 #10)
#90 := [def-axiom]: #89
#101 := [unit-resolution #90 #99]: #56
#53 := (not #56)
#62 := (not #61)
#64 := (or #62 #53)
#14 := (and #13 #10)
#11 := (and #8 #10)
#15 := (or #11 #14)
#65 := (iff #15 #64)
#54 := (iff #14 #53)
#63 := [rewrite]: #54
#57 := (iff #11 #62)
#58 := [rewrite]: #57
#66 := [monotonicity #58 #63]: #65
#17 := (and #16 #10)
#41 := (not #15)
#42 := (or #41 #17)
#45 := (not #42)
#18 := (implies #15 #17)
#19 := (not #18)
#46 := (iff #19 #45)
#43 := (iff #18 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#40 := [asserted]: #19
#50 := [mp #40 #47]: #45
#48 := [not-or-elim #50]: #15
#67 := [mp #48 #66]: #64
#102 := [unit-resolution #67 #101 #100]: false
#103 := [lemma #102]: #10
#69 := (or #68 #60)
#49 := (not #17)
#78 := (iff #49 #69)
#70 := (not #69)
#73 := (not #70)
#76 := (iff #73 #69)
#77 := [rewrite]: #76
#74 := (iff #49 #73)
#71 := (iff #17 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := [not-or-elim #50]: #49
#80 := [mp #51 #79]: #69
#104 := [unit-resolution #80 #103]: #68
#93 := (or #16 #59)
#94 := [def-axiom]: #93
#105 := [unit-resolution #94 #104]: #59
#81 := (or #61 #8)
#82 := [def-axiom]: #81
#106 := [unit-resolution #82 #105]: #61
#95 := (or #16 #55)
#96 := [def-axiom]: #95
#107 := [unit-resolution #96 #104]: #55
#87 := (or #56 #13)
#88 := [def-axiom]: #87
#108 := [unit-resolution #88 #107]: #56
[unit-resolution #67 #108 #106]: false
unsat
7e6dd7d516e726860ffc428f31cde1cf481b2e62 55 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#36 := (not #8)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#37 := (or #36 #10)
#43 := (not #37)
#44 := (or #43 #8)
#52 := (not #44)
#53 := (or #52 #8)
#58 := (not #53)
#11 := (implies #8 #10)
#12 := (implies #11 #8)
#13 := (implies #12 #8)
#14 := (not #13)
#59 := (iff #14 #58)
#56 := (iff #13 #53)
#49 := (implies #44 #8)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #13 #49)
#47 := (iff #12 #44)
#40 := (implies #37 #8)
#45 := (iff #40 #44)
#46 := [rewrite]: #45
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#48 := [trans #42 #46]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#35 := [asserted]: #14
#63 := [mp #35 #60]: #58
#62 := [not-or-elim #63]: #36
#76 := (iff #44 #43)
#71 := (or #43 false)
#74 := (iff #71 #43)
#75 := [rewrite]: #74
#72 := (iff #44 #71)
#69 := (iff #8 false)
#70 := [iff-false #62]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#61 := [not-or-elim #63]: #44
#67 := [mp #61 #77]: #43
#65 := [not-or-elim #67]: #8
[unit-resolution #65 #62]: false
unsat
a3a59727086c9b1cf17547c43bc0b367753da6a2 129 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#16 := (or #8 #13)
#52 := (not #16)
#53 := (or #52 #10)
#45 := (not #13)
#46 := (or #45 #10)
#75 := (not #46)
#41 := (not #8)
#42 := (or #41 #10)
#74 := (not #42)
#76 := (or #74 #75)
#116 := (not #53)
#77 := (not #76)
#128 := [hypothesis]: #77
#122 := (or #76 #116)
#83 := (iff #76 #53)
#49 := (and #42 #46)
#62 := (not #49)
#63 := (iff #62 #53)
#84 := (iff #63 #83)
#81 := (iff #62 #76)
#69 := (not #77)
#79 := (iff #69 #76)
#80 := [rewrite]: #79
#71 := (iff #62 #69)
#72 := (iff #49 #77)
#73 := [rewrite]: #72
#78 := [monotonicity #73]: #71
#82 := [trans #78 #80]: #81
#85 := [monotonicity #82]: #84
#17 := (implies #16 #10)
#14 := (implies #13 #10)
#11 := (implies #8 #10)
#15 := (and #11 #14)
#18 := (iff #15 #17)
#19 := (not #18)
#66 := (iff #19 #63)
#56 := (iff #49 #53)
#59 := (not #56)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #19 #59)
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#48 := [rewrite]: #47
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#51 := [monotonicity #44 #48]: #50
#58 := [monotonicity #51 #55]: #57
#61 := [monotonicity #58]: #60
#67 := [trans #61 #65]: #66
#40 := [asserted]: #19
#70 := [mp #40 #67]: #63
#86 := [mp #70 #85]: #83
#119 := (not #83)
#120 := (or #76 #116 #119)
#121 := [def-axiom]: #120
#123 := [unit-resolution #121 #86]: #122
#129 := [unit-resolution #123 #128]: #116
#112 := (or #53 #16)
#113 := [def-axiom]: #112
#130 := [unit-resolution #113 #129]: #16
#100 := (or #76 #42)
#101 := [def-axiom]: #100
#131 := [unit-resolution #101 #128]: #42
#89 := (not #10)
#114 := (or #53 #89)
#115 := [def-axiom]: #114
#132 := [unit-resolution #115 #129]: #89
#92 := (or #74 #41 #10)
#93 := [def-axiom]: #92
#133 := [unit-resolution #93 #132 #131]: #41
#102 := (or #76 #46)
#103 := [def-axiom]: #102
#134 := [unit-resolution #103 #128]: #46
#98 := (or #75 #45 #10)
#99 := [def-axiom]: #98
#135 := [unit-resolution #99 #132 #134]: #45
#110 := (or #52 #8 #13)
#111 := [def-axiom]: #110
#136 := [unit-resolution #111 #135 #133 #130]: false
#137 := [lemma #136]: #76
#126 := (or #77 #53)
#124 := (or #77 #53 #119)
#125 := [def-axiom]: #124
#127 := [unit-resolution #125 #86]: #126
#138 := [unit-resolution #127 #137]: #53
#139 := [hypothesis]: #74
#90 := (or #42 #89)
#91 := [def-axiom]: #90
#140 := [unit-resolution #91 #139]: #89
#87 := (or #42 #8)
#88 := [def-axiom]: #87
#141 := [unit-resolution #88 #139]: #8
#106 := (or #16 #41)
#107 := [def-axiom]: #106
#142 := [unit-resolution #107 #141]: #16
#117 := (or #116 #52 #10)
#118 := [def-axiom]: #117
#143 := [unit-resolution #118 #142 #140 #138]: false
#144 := [lemma #143]: #42
#104 := (or #77 #74 #75)
#105 := [def-axiom]: #104
#145 := [unit-resolution #105 #144 #137]: #75
#96 := (or #46 #89)
#97 := [def-axiom]: #96
#146 := [unit-resolution #97 #145]: #89
#94 := (or #46 #13)
#95 := [def-axiom]: #94
#147 := [unit-resolution #95 #145]: #13
#108 := (or #16 #45)
#109 := [def-axiom]: #108
#148 := [unit-resolution #109 #147]: #16
[unit-resolution #118 #148 #146 #138]: false
unsat
286bd8b6cdfa66f845900e18ef113ce800adfe6f 87 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#44 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#51 := (not #8)
#69 := (or #51 #44 #13)
#11 := (and #8 #10)
#40 := (not #11)
#41 := (or #40 #13)
#63 := (not #41)
#72 := (iff #63 #69)
#105 := (iff #72 false)
#97 := (not #69)
#100 := (iff #97 #69)
#103 := (iff #100 false)
#104 := [rewrite]: #103
#101 := (iff #72 #100)
#98 := (iff #63 #97)
#95 := (iff #41 #69)
#83 := (or #51 #44)
#90 := (or #83 #13)
#93 := (iff #90 #69)
#94 := [rewrite]: #93
#91 := (iff #41 #90)
#88 := (iff #40 #83)
#84 := (not #83)
#81 := (not #84)
#80 := (iff #81 #83)
#87 := [rewrite]: #80
#82 := (iff #40 #81)
#85 := (iff #11 #84)
#86 := [rewrite]: #85
#79 := [monotonicity #86]: #82
#89 := [trans #79 #87]: #88
#92 := [monotonicity #89]: #91
#96 := [trans #92 #94]: #95
#99 := [monotonicity #96]: #98
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#15 := (implies #10 #13)
#16 := (implies #8 #15)
#14 := (implies #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#75 := (iff #18 #72)
#45 := (or #44 #13)
#52 := (or #51 #45)
#64 := (iff #63 #52)
#73 := (iff #64 #72)
#70 := (iff #52 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#67 := (iff #18 #64)
#57 := (iff #41 #52)
#60 := (not #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #52)
#48 := (implies #8 #45)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #16 #48)
#46 := (iff #15 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#56 := [trans #50 #54]: #55
#42 := (iff #14 #41)
#43 := [rewrite]: #42
#59 := [monotonicity #43 #56]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#76 := [trans #68 #74]: #75
#39 := [asserted]: #18
#77 := [mp #39 #76]: #72
[mp #77 #106]: false
unsat
161dd0114051200a7ffcef5c767f1dd1f3eb1d26 172 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#17 := (and #8 #14)
#70 := (not #17)
#191 := (iff #70 false)
#1 := true
#126 := (not true)
#189 := (iff #126 false)
#190 := [rewrite]: #189
#136 := (iff #70 #126)
#186 := (iff #17 true)
#181 := (and true true)
#184 := (iff #181 true)
#185 := [rewrite]: #184
#182 := (iff #17 #181)
#124 := (iff #14 true)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#57 := (not #14)
#58 := (or #57 #10)
#64 := (not #58)
#65 := (or #64 #10)
#156 := (iff #65 #14)
#151 := (or #14 false)
#154 := (iff #151 #14)
#155 := [rewrite]: #154
#152 := (iff #65 #151)
#127 := (iff #10 false)
#116 := (not #10)
#71 := (or #70 #10)
#77 := (not #71)
#86 := (not #65)
#44 := (not #8)
#45 := (or #44 #10)
#51 := (not #45)
#52 := (or #51 #10)
#95 := (not #52)
#104 := (or #95 #86 #77 #10)
#107 := (not #104)
#18 := (implies #17 #10)
#19 := (implies #18 #10)
#15 := (implies #14 #10)
#16 := (implies #15 #10)
#20 := (implies #16 #19)
#11 := (implies #8 #10)
#12 := (implies #11 #10)
#21 := (implies #12 #20)
#22 := (not #21)
#110 := (iff #22 #107)
#78 := (or #77 #10)
#87 := (or #86 #78)
#96 := (or #95 #87)
#101 := (not #96)
#108 := (iff #101 #107)
#105 := (iff #96 #104)
#106 := [rewrite]: #105
#109 := [monotonicity #106]: #108
#102 := (iff #22 #101)
#99 := (iff #21 #96)
#92 := (implies #52 #87)
#97 := (iff #92 #96)
#98 := [rewrite]: #97
#93 := (iff #21 #92)
#90 := (iff #20 #87)
#83 := (implies #65 #78)
#88 := (iff #83 #87)
#89 := [rewrite]: #88
#84 := (iff #20 #83)
#81 := (iff #19 #78)
#74 := (implies #71 #10)
#79 := (iff #74 #78)
#80 := [rewrite]: #79
#75 := (iff #19 #74)
#72 := (iff #18 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [trans #76 #80]: #81
#68 := (iff #16 #65)
#61 := (implies #58 #10)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #16 #61)
#59 := (iff #15 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#85 := [monotonicity #69 #82]: #84
#91 := [trans #85 #89]: #90
#55 := (iff #12 #52)
#48 := (implies #45 #10)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #12 #48)
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#56 := [trans #50 #54]: #55
#94 := [monotonicity #56 #91]: #93
#100 := [trans #94 #98]: #99
#103 := [monotonicity #100]: #102
#111 := [trans #103 #109]: #110
#43 := [asserted]: #22
#112 := [mp #43 #111]: #107
#117 := [not-or-elim #112]: #116
#128 := [iff-false #117]: #127
#149 := (iff #64 #14)
#144 := (not #57)
#147 := (iff #144 #14)
#148 := [rewrite]: #147
#145 := (iff #64 #144)
#142 := (iff #58 #57)
#137 := (or #57 false)
#140 := (iff #137 #57)
#141 := [rewrite]: #140
#138 := (iff #58 #137)
#139 := [monotonicity #128]: #138
#143 := [trans #139 #141]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#153 := [monotonicity #150 #128]: #152
#157 := [trans #153 #155]: #156
#114 := [not-or-elim #112]: #65
#123 := [mp #114 #157]: #14
#158 := [iff-true #123]: #124
#122 := (iff #8 true)
#178 := (iff #52 #8)
#173 := (or #8 false)
#176 := (iff #173 #8)
#177 := [rewrite]: #176
#174 := (iff #52 #173)
#171 := (iff #51 #8)
#166 := (not #44)
#169 := (iff #166 #8)
#170 := [rewrite]: #169
#167 := (iff #51 #166)
#164 := (iff #45 #44)
#159 := (or #44 false)
#162 := (iff #159 #44)
#163 := [rewrite]: #162
#160 := (iff #45 #159)
#161 := [monotonicity #128]: #160
#165 := [trans #161 #163]: #164
#168 := [monotonicity #165]: #167
#172 := [trans #168 #170]: #171
#175 := [monotonicity #172 #128]: #174
#179 := [trans #175 #177]: #178
#113 := [not-or-elim #112]: #52
#121 := [mp #113 #179]: #8
#180 := [iff-true #121]: #122
#183 := [monotonicity #180 #158]: #182
#187 := [trans #183 #185]: #186
#188 := [monotonicity #187]: #136
#192 := [trans #188 #190]: #191
#134 := (iff #71 #70)
#129 := (or #70 false)
#132 := (iff #129 #70)
#133 := [rewrite]: #132
#130 := (iff #71 #129)
#131 := [monotonicity #128]: #130
#135 := [trans #131 #133]: #134
#115 := [not-or-elim #112]: #71
#125 := [mp #115 #135]: #70
[mp #125 #192]: false
unsat
4b04cbf4156c7db75a1cf1b753251a6923a9c62d 107 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#17 := (and #8 #14)
#58 := (not #17)
#59 := (or #58 #10)
#126 := (iff #59 false)
#121 := (or false false)
#124 := (iff #121 false)
#125 := [rewrite]: #124
#122 := (iff #59 #121)
#105 := (iff #10 false)
#95 := (not #10)
#62 := (not #59)
#51 := (not #14)
#44 := (not #8)
#84 := (or #44 #51 #10 #62)
#87 := (not #84)
#18 := (implies #17 #10)
#19 := (not #18)
#15 := (implies #14 #10)
#16 := (not #15)
#20 := (implies #16 #19)
#11 := (implies #8 #10)
#12 := (not #11)
#21 := (implies #12 #20)
#22 := (not #21)
#90 := (iff #22 #87)
#52 := (or #51 #10)
#68 := (or #52 #62)
#45 := (or #44 #10)
#76 := (or #45 #68)
#81 := (not #76)
#88 := (iff #81 #87)
#85 := (iff #76 #84)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#82 := (iff #22 #81)
#79 := (iff #21 #76)
#48 := (not #45)
#73 := (implies #48 #68)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #21 #73)
#71 := (iff #20 #68)
#55 := (not #52)
#65 := (implies #55 #62)
#69 := (iff #65 #68)
#70 := [rewrite]: #69
#66 := (iff #20 #65)
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#67 := [monotonicity #57 #64]: #66
#72 := [trans #67 #70]: #71
#49 := (iff #12 #48)
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#75 := [monotonicity #50 #72]: #74
#80 := [trans #75 #78]: #79
#83 := [monotonicity #80]: #82
#91 := [trans #83 #89]: #90
#43 := [asserted]: #22
#92 := [mp #43 #91]: #87
#96 := [not-or-elim #92]: #95
#106 := [iff-false #96]: #105
#119 := (iff #58 false)
#1 := true
#114 := (not true)
#117 := (iff #114 false)
#118 := [rewrite]: #117
#115 := (iff #58 #114)
#112 := (iff #17 true)
#107 := (and true true)
#110 := (iff #107 true)
#111 := [rewrite]: #110
#108 := (iff #17 #107)
#103 := (iff #14 true)
#94 := [not-or-elim #92]: #14
#104 := [iff-true #94]: #103
#101 := (iff #8 true)
#93 := [not-or-elim #92]: #8
#102 := [iff-true #93]: #101
#109 := [monotonicity #102 #104]: #108
#113 := [trans #109 #111]: #112
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#123 := [monotonicity #120 #106]: #122
#127 := [trans #123 #125]: #126
#97 := [not-or-elim #92]: #59
[mp #97 #127]: false
unsat
4ede140945dac021e73f57bd5aabbe283e3ec513 136 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
#73 := (not #12)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#41 := (not #8)
#48 := (or #41 #12)
#81 := (not #48)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#45 := (or #41 #10)
#80 := (not #45)
#134 := [hypothesis]: #80
#107 := (or #45 #8)
#108 := [def-axiom]: #107
#135 := [unit-resolution #108 #134]: #8
#72 := (not #10)
#74 := (or #72 #73)
#109 := (or #45 #72)
#110 := [def-axiom]: #109
#136 := [unit-resolution #110 #134]: #72
#95 := (or #74 #10)
#96 := [def-axiom]: #95
#137 := [unit-resolution #96 #136]: #74
#75 := (not #74)
#67 := (or #41 #75)
#82 := (or #80 #81)
#119 := (or #82 #45)
#120 := [def-axiom]: #119
#138 := [unit-resolution #120 #134]: #82
#83 := (not #82)
#128 := (or #67 #83)
#89 := (iff #67 #82)
#51 := (and #45 #48)
#13 := (and #10 #12)
#42 := (or #41 #13)
#60 := (not #42)
#61 := (iff #60 #51)
#92 := (iff #61 #89)
#77 := (not #67)
#86 := (iff #77 #83)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #61 #86)
#84 := (iff #51 #83)
#85 := [rewrite]: #84
#78 := (iff #60 #77)
#69 := (iff #42 #67)
#70 := (iff #13 #75)
#71 := [rewrite]: #70
#76 := [monotonicity #71]: #69
#79 := [monotonicity #76]: #78
#88 := [monotonicity #79 #85]: #87
#93 := [trans #88 #91]: #92
#16 := (implies #8 #12)
#15 := (implies #8 #10)
#17 := (and #15 #16)
#14 := (implies #8 #13)
#18 := (iff #14 #17)
#19 := (not #18)
#64 := (iff #19 #61)
#54 := (iff #42 #51)
#57 := (not #54)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #19 #57)
#55 := (iff #18 #54)
#52 := (iff #17 #51)
#49 := (iff #16 #48)
#50 := [rewrite]: #49
#46 := (iff #15 #45)
#47 := [rewrite]: #46
#53 := [monotonicity #47 #50]: #52
#43 := (iff #14 #42)
#44 := [rewrite]: #43
#56 := [monotonicity #44 #53]: #55
#59 := [monotonicity #56]: #58
#65 := [trans #59 #63]: #64
#40 := [asserted]: #19
#68 := [mp #40 #65]: #61
#94 := [mp #68 #93]: #89
#125 := (not #89)
#126 := (or #67 #83 #125)
#127 := [def-axiom]: #126
#129 := [unit-resolution #127 #94]: #128
#139 := [unit-resolution #129 #138]: #67
#105 := (or #77 #41 #75)
#106 := [def-axiom]: #105
#140 := [unit-resolution #106 #139 #137 #135]: false
#141 := [lemma #140]: #45
#142 := [hypothesis]: #77
#101 := (or #67 #8)
#102 := [def-axiom]: #101
#143 := [unit-resolution #102 #142]: #8
#144 := [unit-resolution #129 #142]: #83
#121 := (or #82 #48)
#122 := [def-axiom]: #121
#145 := [unit-resolution #122 #144]: #48
#103 := (or #67 #74)
#104 := [def-axiom]: #103
#146 := [unit-resolution #104 #142]: #74
#111 := (or #80 #41 #10)
#112 := [def-axiom]: #111
#147 := [unit-resolution #112 #143 #141]: #10
#99 := (or #75 #72 #73)
#100 := [def-axiom]: #99
#148 := [unit-resolution #100 #147 #146]: #73
#117 := (or #81 #41 #12)
#118 := [def-axiom]: #117
#149 := [unit-resolution #118 #148 #145 #143]: false
#150 := [lemma #149]: #67
#132 := (or #77 #82)
#130 := (or #77 #82 #125)
#131 := [def-axiom]: #130
#133 := [unit-resolution #131 #94]: #132
#151 := [unit-resolution #133 #150]: #82
#123 := (or #83 #80 #81)
#124 := [def-axiom]: #123
#152 := [unit-resolution #124 #151 #141]: #81
#115 := (or #48 #73)
#116 := [def-axiom]: #115
#153 := [unit-resolution #116 #152]: #73
#113 := (or #48 #8)
#114 := [def-axiom]: #113
#154 := [unit-resolution #114 #152]: #8
#155 := [unit-resolution #106 #154 #150]: #75
#97 := (or #74 #12)
#98 := [def-axiom]: #97
[unit-resolution #98 #155 #153]: false
unsat
a1bd5a7826fb084e07c1ba646f5039bc9faf9bf8 43 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#11 := (implies #10 #8)
#12 := (implies #8 #11)
#13 := (not #12)
#60 := (iff #13 false)
#35 := (not #10)
#36 := (or #35 #8)
#42 := (not #8)
#43 := (or #42 #36)
#48 := (not #43)
#58 := (iff #48 false)
#1 := true
#53 := (not true)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #48 #53)
#51 := (iff #43 true)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#49 := (iff #13 #48)
#46 := (iff #12 #43)
#39 := (implies #8 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#61 := [trans #50 #59]: #60
#34 := [asserted]: #13
[mp #34 #61]: false
unsat
3050918d31c36048af6e7954efb4023260756a72 120 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#41 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#48 := (not #8)
#81 := (or #48 #41 #12)
#141 := (iff #81 false)
#136 := (or false false false)
#139 := (iff #136 false)
#140 := [rewrite]: #139
#137 := (iff #81 #136)
#115 := (iff #12 false)
#104 := (not #12)
#54 := (or #48 #10)
#63 := (not #54)
#84 := (not #81)
#90 := (or #84 #63 #48 #12)
#95 := (not #90)
#16 := (implies #8 #12)
#15 := (implies #8 #10)
#17 := (implies #15 #16)
#13 := (implies #10 #12)
#14 := (implies #8 #13)
#18 := (implies #14 #17)
#19 := (not #18)
#98 := (iff #19 #95)
#57 := (or #48 #12)
#64 := (or #63 #57)
#42 := (or #41 #12)
#49 := (or #48 #42)
#72 := (not #49)
#73 := (or #72 #64)
#78 := (not #73)
#96 := (iff #78 #95)
#93 := (iff #73 #90)
#87 := (or #84 #64)
#91 := (iff #87 #90)
#92 := [rewrite]: #91
#88 := (iff #73 #87)
#85 := (iff #72 #84)
#82 := (iff #49 #81)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#89 := [monotonicity #86]: #88
#94 := [trans #89 #92]: #93
#97 := [monotonicity #94]: #96
#79 := (iff #19 #78)
#76 := (iff #18 #73)
#69 := (implies #49 #64)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #18 #69)
#67 := (iff #17 #64)
#60 := (implies #54 #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #17 #60)
#58 := (iff #16 #57)
#59 := [rewrite]: #58
#55 := (iff #15 #54)
#56 := [rewrite]: #55
#62 := [monotonicity #56 #59]: #61
#68 := [trans #62 #66]: #67
#52 := (iff #14 #49)
#45 := (implies #8 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#71 := [monotonicity #53 #68]: #70
#77 := [trans #71 #75]: #76
#80 := [monotonicity #77]: #79
#99 := [trans #80 #97]: #98
#40 := [asserted]: #19
#100 := [mp #40 #99]: #95
#105 := [not-or-elim #100]: #104
#116 := [iff-false #105]: #115
#134 := (iff #41 false)
#1 := true
#117 := (not true)
#120 := (iff #117 false)
#121 := [rewrite]: #120
#132 := (iff #41 #117)
#112 := (iff #10 true)
#129 := (iff #54 #10)
#124 := (or false #10)
#127 := (iff #124 #10)
#128 := [rewrite]: #127
#125 := (iff #54 #124)
#122 := (iff #48 false)
#118 := (iff #48 #117)
#113 := (iff #8 true)
#103 := [not-or-elim #100]: #8
#114 := [iff-true #103]: #113
#119 := [monotonicity #114]: #118
#123 := [trans #119 #121]: #122
#126 := [monotonicity #123]: #125
#130 := [trans #126 #128]: #129
#102 := [not-or-elim #100]: #54
#111 := [mp #102 #130]: #10
#131 := [iff-true #111]: #112
#133 := [monotonicity #131]: #132
#135 := [trans #133 #121]: #134
#138 := [monotonicity #123 #135 #116]: #137
#142 := [trans #138 #140]: #141
#101 := [not-or-elim #100]: #81
[mp #101 #142]: false
unsat
419cf0503137091c5bc92af96aa593cffd70f2cf 94 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#41 := (not #8)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#66 := (or #10 #41 #13)
#115 := (iff #66 false)
#110 := (or false false false)
#113 := (iff #110 false)
#114 := [rewrite]: #113
#111 := (iff #66 #110)
#101 := (iff #13 false)
#90 := (not #13)
#69 := (not #66)
#75 := (or #69 #41 #10 #13)
#80 := (not #75)
#16 := (or #10 #13)
#17 := (implies #8 #16)
#14 := (implies #8 #13)
#11 := (implies #8 #10)
#15 := (or #11 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#83 := (iff #19 #80)
#51 := (or #41 #16)
#45 := (or #41 #13)
#42 := (or #41 #10)
#48 := (or #42 #45)
#57 := (not #48)
#58 := (or #57 #51)
#63 := (not #58)
#81 := (iff #63 #80)
#78 := (iff #58 #75)
#72 := (or #69 #51)
#76 := (iff #72 #75)
#77 := [rewrite]: #76
#73 := (iff #58 #72)
#70 := (iff #57 #69)
#67 := (iff #48 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#79 := [trans #74 #77]: #78
#82 := [monotonicity #79]: #81
#64 := (iff #19 #63)
#61 := (iff #18 #58)
#54 := (implies #48 #51)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #18 #54)
#52 := (iff #17 #51)
#53 := [rewrite]: #52
#49 := (iff #15 #48)
#46 := (iff #14 #45)
#47 := [rewrite]: #46
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#50 := [monotonicity #44 #47]: #49
#56 := [monotonicity #50 #53]: #55
#62 := [trans #56 #60]: #61
#65 := [monotonicity #62]: #64
#84 := [trans #65 #82]: #83
#40 := [asserted]: #19
#85 := [mp #40 #84]: #80
#91 := [not-or-elim #85]: #90
#102 := [iff-false #91]: #101
#108 := (iff #41 false)
#1 := true
#103 := (not true)
#106 := (iff #103 false)
#107 := [rewrite]: #106
#104 := (iff #41 #103)
#97 := (iff #8 true)
#87 := [not-or-elim #85]: #8
#98 := [iff-true #87]: #97
#105 := [monotonicity #98]: #104
#109 := [trans #105 #107]: #108
#99 := (iff #10 false)
#88 := (not #10)
#89 := [not-or-elim #85]: #88
#100 := [iff-false #89]: #99
#112 := [monotonicity #100 #109 #102]: #111
#116 := [trans #112 #114]: #115
#86 := [not-or-elim #85]: #66
[mp #86 #116]: false
unsat
2da11420e5b99236635a72b7c77f978d01d57534 112 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#38 := (not #8)
#39 := (or #38 #10)
#45 := (not #39)
#46 := (or #45 #8)
#54 := (not #46)
#55 := (or #54 #8)
#63 := (not #55)
#64 := (or #63 #10)
#134 := (iff #64 false)
#129 := (or false false)
#132 := (iff #129 false)
#133 := [rewrite]: #132
#130 := (iff #64 #129)
#90 := (iff #10 false)
#82 := (not #10)
#72 := (not #64)
#73 := (or #72 #10)
#78 := (not #73)
#11 := (implies #8 #10)
#12 := (implies #11 #8)
#13 := (implies #12 #8)
#14 := (implies #13 #10)
#15 := (implies #14 #10)
#16 := (not #15)
#79 := (iff #16 #78)
#76 := (iff #15 #73)
#69 := (implies #64 #10)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #15 #69)
#67 := (iff #14 #64)
#60 := (implies #55 #10)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #14 #60)
#58 := (iff #13 #55)
#51 := (implies #46 #8)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #13 #51)
#49 := (iff #12 #46)
#42 := (implies #39 #8)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#59 := [trans #53 #57]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#71 := [monotonicity #68]: #70
#77 := [trans #71 #75]: #76
#80 := [monotonicity #77]: #79
#37 := [asserted]: #16
#83 := [mp #37 #80]: #78
#84 := [not-or-elim #83]: #82
#91 := [iff-false #84]: #90
#127 := (iff #63 false)
#1 := true
#122 := (not true)
#125 := (iff #122 false)
#126 := [rewrite]: #125
#123 := (iff #63 #122)
#120 := (iff #55 true)
#115 := (or #38 #8)
#118 := (iff #115 true)
#119 := [rewrite]: #118
#116 := (iff #55 #115)
#113 := (iff #54 #38)
#111 := (iff #46 #8)
#106 := (or #8 #8)
#109 := (iff #106 #8)
#110 := [rewrite]: #109
#107 := (iff #46 #106)
#104 := (iff #45 #8)
#99 := (not #38)
#102 := (iff #99 #8)
#103 := [rewrite]: #102
#100 := (iff #45 #99)
#97 := (iff #39 #38)
#92 := (or #38 false)
#95 := (iff #92 #38)
#96 := [rewrite]: #95
#93 := (iff #39 #92)
#94 := [monotonicity #91]: #93
#98 := [trans #94 #96]: #97
#101 := [monotonicity #98]: #100
#105 := [trans #101 #103]: #104
#108 := [monotonicity #105]: #107
#112 := [trans #108 #110]: #111
#114 := [monotonicity #112]: #113
#117 := [monotonicity #114]: #116
#121 := [trans #117 #119]: #120
#124 := [monotonicity #121]: #123
#128 := [trans #124 #126]: #127
#131 := [monotonicity #128 #91]: #130
#135 := [trans #131 #133]: #134
#81 := [not-or-elim #83]: #64
[mp #81 #135]: false
unsat
05cf053531ebb482bce7d481dd6a6d959ba6e021 67 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#13 := (not #8)
#38 := (or #13 #10)
#89 := (iff #38 false)
#84 := (or false false)
#87 := (iff #84 false)
#88 := [rewrite]: #87
#85 := (iff #38 #84)
#73 := (iff #10 false)
#12 := (not #10)
#47 := (not #38)
#56 := (or #47 #10 #13)
#59 := (not #56)
#14 := (implies #12 #13)
#11 := (implies #8 #10)
#15 := (implies #11 #14)
#16 := (not #15)
#62 := (iff #16 #59)
#41 := (or #10 #13)
#48 := (or #47 #41)
#53 := (not #48)
#60 := (iff #53 #59)
#57 := (iff #48 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#54 := (iff #16 #53)
#51 := (iff #15 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#43 := [rewrite]: #42
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#63 := [trans #55 #61]: #62
#37 := [asserted]: #16
#64 := [mp #37 #63]: #59
#66 := [not-or-elim #64]: #12
#74 := [iff-false #66]: #73
#82 := (iff #13 false)
#1 := true
#77 := (not true)
#80 := (iff #77 false)
#81 := [rewrite]: #80
#78 := (iff #13 #77)
#75 := (iff #8 true)
#67 := [not-or-elim #64]: #8
#76 := [iff-true #67]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#86 := [monotonicity #83 #74]: #85
#90 := [trans #86 #88]: #89
#65 := [not-or-elim #64]: #38
[mp #65 #90]: false
unsat
ffac54a02f0c200516a317aa5c330cf1c35aa36e 94 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#41 := (not #8)
#66 := (or #41 #10 #12)
#115 := (iff #66 false)
#110 := (or false false false)
#113 := (iff #110 false)
#114 := [rewrite]: #113
#111 := (iff #66 #110)
#101 := (iff #12 false)
#90 := (not #12)
#69 := (not #66)
#75 := (or #69 #10 #41 #12)
#80 := (not #75)
#16 := (implies #8 #12)
#15 := (implies #8 #10)
#17 := (or #15 #16)
#13 := (or #10 #12)
#14 := (implies #8 #13)
#18 := (implies #14 #17)
#19 := (not #18)
#83 := (iff #19 #80)
#48 := (or #41 #12)
#45 := (or #41 #10)
#51 := (or #45 #48)
#42 := (or #41 #13)
#57 := (not #42)
#58 := (or #57 #51)
#63 := (not #58)
#81 := (iff #63 #80)
#78 := (iff #58 #75)
#72 := (or #69 #51)
#76 := (iff #72 #75)
#77 := [rewrite]: #76
#73 := (iff #58 #72)
#70 := (iff #57 #69)
#67 := (iff #42 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#79 := [trans #74 #77]: #78
#82 := [monotonicity #79]: #81
#64 := (iff #19 #63)
#61 := (iff #18 #58)
#54 := (implies #42 #51)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #18 #54)
#52 := (iff #17 #51)
#49 := (iff #16 #48)
#50 := [rewrite]: #49
#46 := (iff #15 #45)
#47 := [rewrite]: #46
#53 := [monotonicity #47 #50]: #52
#43 := (iff #14 #42)
#44 := [rewrite]: #43
#56 := [monotonicity #44 #53]: #55
#62 := [trans #56 #60]: #61
#65 := [monotonicity #62]: #64
#84 := [trans #65 #82]: #83
#40 := [asserted]: #19
#85 := [mp #40 #84]: #80
#91 := [not-or-elim #85]: #90
#102 := [iff-false #91]: #101
#97 := (iff #10 false)
#87 := (not #10)
#88 := [not-or-elim #85]: #87
#98 := [iff-false #88]: #97
#108 := (iff #41 false)
#1 := true
#103 := (not true)
#106 := (iff #103 false)
#107 := [rewrite]: #106
#104 := (iff #41 #103)
#99 := (iff #8 true)
#89 := [not-or-elim #85]: #8
#100 := [iff-true #89]: #99
#105 := [monotonicity #100]: #104
#109 := [trans #105 #107]: #108
#112 := [monotonicity #109 #98 #102]: #111
#116 := [trans #112 #114]: #115
#86 := [not-or-elim #85]: #66
[mp #86 #116]: false
unsat
7a1f8b0dc0880c922314ec30bd73e7304dc52ec4 65 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#42 := (not #10)
#81 := [hypothesis]: #42
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#38 := (not #8)
#39 := (or #38 #10)
#43 := (or #42 #8)
#46 := (and #39 #43)
#14 := (iff #8 #10)
#52 := (not #46)
#53 := (or #52 #14)
#58 := (not #53)
#12 := (implies #10 #8)
#11 := (implies #8 #10)
#13 := (and #11 #12)
#15 := (implies #13 #14)
#16 := (not #15)
#59 := (iff #16 #58)
#56 := (iff #15 #53)
#49 := (implies #46 #14)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#48 := [monotonicity #41 #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#37 := [asserted]: #16
#63 := [mp #37 #60]: #58
#61 := [not-or-elim #63]: #46
#62 := [and-elim #61]: #39
#82 := [unit-resolution #62 #81]: #38
#69 := (or #8 #10)
#74 := (iff #38 #10)
#65 := (not #14)
#75 := (iff #65 #74)
#76 := [rewrite]: #75
#66 := [not-or-elim #63]: #65
#77 := [mp #66 #76]: #74
#78 := (not #74)
#71 := (or #8 #10 #78)
#68 := [def-axiom]: #71
#80 := [unit-resolution #68 #77]: #69
#83 := [unit-resolution #80 #82 #81]: false
#84 := [lemma #83]: #10
#64 := [and-elim #61]: #43
#85 := [unit-resolution #64 #84]: #8
#73 := (or #38 #42)
#79 := (or #38 #42 #78)
#72 := [def-axiom]: #79
#70 := [unit-resolution #72 #77]: #73
[unit-resolution #70 #85 #84]: false
unsat
d8026f1269406972caa34c57a14a407df7dff9ee 67 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#12 := (iff #10 #8)
#53 := (not #12)
#71 := [hypothesis]: #53
#76 := (or #10 #12)
#48 := (not #10)
#72 := [hypothesis]: #48
#36 := (not #8)
#37 := (iff #36 #10)
#47 := (not #37)
#69 := (or #47 #12)
#38 := (iff #37 #12)
#11 := (iff #8 #10)
#13 := (iff #11 #12)
#14 := (not #13)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#35 := [asserted]: #14
#43 := [mp #35 #40]: #38
#62 := (not #38)
#67 := (or #47 #12 #62)
#68 := [def-axiom]: #67
#70 := [unit-resolution #68 #43]: #69
#73 := [unit-resolution #70 #71]: #47
#42 := (or #37 #36 #10)
#44 := [def-axiom]: #42
#74 := [unit-resolution #44 #72 #73]: #36
#58 := (or #12 #10 #8)
#59 := [def-axiom]: #58
#75 := [unit-resolution #59 #74 #72 #71]: false
#77 := [lemma #75]: #76
#78 := [unit-resolution #77 #71]: #10
#51 := (or #37 #8 #48)
#52 := [def-axiom]: #51
#79 := [unit-resolution #52 #78 #73]: #8
#60 := (or #12 #48 #36)
#61 := [def-axiom]: #60
#80 := [unit-resolution #61 #79 #78 #71]: false
#81 := [lemma #80]: #12
#82 := [hypothesis]: #36
#65 := (or #37 #53)
#63 := (or #37 #53 #62)
#64 := [def-axiom]: #63
#66 := [unit-resolution #64 #43]: #65
#83 := [unit-resolution #66 #81]: #37
#45 := (or #47 #8 #10)
#46 := [def-axiom]: #45
#84 := [unit-resolution #46 #82 #83]: #10
#56 := (or #53 #48 #8)
#57 := [def-axiom]: #56
#85 := [unit-resolution #57 #84 #82 #81]: false
#86 := [lemma #85]: #8
#49 := (or #47 #36 #48)
#50 := [def-axiom]: #49
#87 := [unit-resolution #50 #86 #83]: #48
#54 := (or #53 #10 #36)
#55 := [def-axiom]: #54
[unit-resolution #55 #87 #86 #81]: false
unsat
3363d204e860e90fc7410c9b98599a08737e98bf 30 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (iff #8 #9)
#11 := (not #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (not false)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 false)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
307fe479d3024f1d782f30fc995cff7558bffef8 68 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#13 := (not #8)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#41 := (or #10 #13)
#38 := (or #13 #10)
#68 := (not #41)
#80 := [hypothesis]: #68
#78 := (or #38 #41)
#50 := (not #38)
#51 := (iff #50 #41)
#12 := (not #10)
#14 := (implies #12 #13)
#11 := (implies #8 #10)
#15 := (iff #11 #14)
#16 := (not #15)
#54 := (iff #16 #51)
#44 := (iff #38 #41)
#47 := (not #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #16 #47)
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#43 := [rewrite]: #42
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#46 := [monotonicity #40 #43]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#37 := [asserted]: #16
#58 := [mp #37 #55]: #51
#71 := (not #51)
#76 := (or #38 #41 #71)
#77 := [def-axiom]: #76
#79 := [unit-resolution #77 #58]: #78
#81 := [unit-resolution #79 #80]: #38
#57 := (or #41 #12)
#59 := [def-axiom]: #57
#82 := [unit-resolution #59 #80]: #12
#66 := (or #41 #8)
#67 := [def-axiom]: #66
#83 := [unit-resolution #67 #80]: #8
#60 := (or #50 #13 #10)
#61 := [def-axiom]: #60
#84 := [unit-resolution #61 #83 #82 #81]: false
#85 := [lemma #84]: #41
#74 := (or #50 #68)
#72 := (or #50 #68 #71)
#73 := [def-axiom]: #72
#75 := [unit-resolution #73 #58]: #74
#86 := [unit-resolution #75 #85]: #50
#62 := (or #38 #8)
#63 := [def-axiom]: #62
#87 := [unit-resolution #63 #86]: #8
#64 := (or #38 #12)
#65 := [def-axiom]: #64
#88 := [unit-resolution #65 #86]: #12
#69 := (or #68 #10 #13)
#70 := [def-axiom]: #69
[unit-resolution #70 #88 #87 #85]: false
unsat
8cebbbdf59241f53ca8f7ba4ba97c397eebb23a4 64 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (iff #8 #8)
#10 := (iff #8 #9)
#11 := (iff #8 #10)
#12 := (iff #8 #11)
#13 := (iff #8 #12)
#14 := (iff #8 #13)
#15 := (iff #8 #14)
#16 := (iff #8 #15)
#17 := (iff #8 #16)
#18 := (not #17)
#82 := (iff #18 false)
#1 := true
#77 := (not true)
#80 := (iff #77 false)
#81 := [rewrite]: #80
#78 := (iff #18 #77)
#75 := (iff #17 true)
#40 := (iff #9 true)
#41 := [rewrite]: #40
#73 := (iff #17 #9)
#71 := (iff #16 #8)
#42 := (iff #8 true)
#45 := (iff #42 #8)
#46 := [rewrite]: #45
#69 := (iff #16 #42)
#67 := (iff #15 true)
#65 := (iff #15 #9)
#63 := (iff #14 #8)
#61 := (iff #14 #42)
#59 := (iff #13 true)
#57 := (iff #13 #9)
#55 := (iff #12 #8)
#53 := (iff #12 #42)
#51 := (iff #11 true)
#49 := (iff #11 #9)
#47 := (iff #10 #8)
#43 := (iff #10 #42)
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#50 := [monotonicity #48]: #49
#52 := [trans #50 #41]: #51
#54 := [monotonicity #52]: #53
#56 := [trans #54 #46]: #55
#58 := [monotonicity #56]: #57
#60 := [trans #58 #41]: #59
#62 := [monotonicity #60]: #61
#64 := [trans #62 #46]: #63
#66 := [monotonicity #64]: #65
#68 := [trans #66 #41]: #67
#70 := [monotonicity #68]: #69
#72 := [trans #70 #46]: #71
#74 := [monotonicity #72]: #73
#76 := [trans #74 #41]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#39 := [asserted]: #18
[mp #39 #83]: false
unsat
7065d1b00bad74db5477c46f555fb695c1bbcb2b 121 0
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#13 := (if #8 #10 #12)
#44 := (or #8 #12)
#69 := (not #44)
#15 := (not #8)
#41 := (or #15 #10)
#68 := (not #41)
#70 := (or #68 #69)
#71 := (not #70)
#123 := [hypothesis]: #71
#103 := (or #70 #44)
#104 := [def-axiom]: #103
#124 := [unit-resolution #104 #123]: #44
#56 := (not #13)
#114 := (or #56 #70)
#73 := (iff #13 #70)
#47 := (and #41 #44)
#57 := (iff #56 #47)
#76 := (iff #57 #73)
#63 := (iff #56 #71)
#74 := (iff #63 #73)
#75 := [rewrite]: #74
#65 := (iff #57 #63)
#66 := (iff #47 #71)
#67 := [rewrite]: #66
#72 := [monotonicity #67]: #65
#77 := [trans #72 #75]: #76
#16 := (implies #15 #12)
#14 := (implies #8 #10)
#17 := (and #14 #16)
#18 := (iff #13 #17)
#19 := (not #18)
#60 := (iff #19 #57)
#50 := (iff #13 #47)
#53 := (not #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #19 #53)
#51 := (iff #18 #50)
#48 := (iff #17 #47)
#45 := (iff #16 #44)
#46 := [rewrite]: #45
#42 := (iff #14 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#52 := [monotonicity #49]: #51
#55 := [monotonicity #52]: #54
#61 := [trans #55 #59]: #60
#40 := [asserted]: #19
#64 := [mp #40 #61]: #57
#78 := [mp #64 #77]: #73
#107 := (not #73)
#112 := (or #56 #70 #107)
#113 := [def-axiom]: #112
#115 := [unit-resolution #113 #78]: #114
#125 := [unit-resolution #115 #123]: #56
#101 := (or #70 #41)
#102 := [def-axiom]: #101
#126 := [unit-resolution #102 #123]: #41
#121 := (or #15 #68 #13)
#116 := [hypothesis]: #41
#117 := [hypothesis]: #8
#83 := (not #10)
#118 := [hypothesis]: #56
#84 := (or #13 #15 #83)
#85 := [def-axiom]: #84
#119 := [unit-resolution #85 #117 #118]: #83
#93 := (or #68 #15 #10)
#94 := [def-axiom]: #93
#120 := [unit-resolution #94 #119 #117 #116]: false
#122 := [lemma #120]: #121
#127 := [unit-resolution #122 #126 #125]: #15
#86 := (not #12)
#87 := (or #13 #8 #86)
#88 := [def-axiom]: #87
#128 := [unit-resolution #88 #127 #125]: #86
#99 := (or #69 #8 #12)
#100 := [def-axiom]: #99
#129 := [unit-resolution #100 #128 #127 #124]: false
#130 := [lemma #129]: #70
#110 := (or #13 #71)
#108 := (or #13 #71 #107)
#109 := [def-axiom]: #108
#111 := [unit-resolution #109 #78]: #110
#133 := [unit-resolution #111 #130]: #13
#131 := [hypothesis]: #15
#89 := (or #41 #8)
#90 := [def-axiom]: #89
#132 := [unit-resolution #90 #131]: #41
#81 := (or #56 #8 #12)
#82 := [def-axiom]: #81
#134 := [unit-resolution #82 #131 #133]: #12
#97 := (or #44 #86)
#98 := [def-axiom]: #97
#135 := [unit-resolution #98 #134]: #44
#105 := (or #71 #68 #69)
#106 := [def-axiom]: #105
#136 := [unit-resolution #106 #135 #132 #130]: false
#137 := [lemma #136]: #8
#79 := (or #56 #15 #10)
#80 := [def-axiom]: #79
#138 := [unit-resolution #80 #137 #133]: #10
#95 := (or #44 #15)
#96 := [def-axiom]: #95
#139 := [unit-resolution #96 #137]: #44
#140 := [unit-resolution #106 #139 #130]: #68
#91 := (or #41 #83)
#92 := [def-axiom]: #91
[unit-resolution #92 #140 #138]: false
unsat
aac8bd622b8d3f29643acf747f849dbeac65edf3 50 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#40 := (not #8)
#74 := [hypothesis]: #8
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#36 := (not #10)
#37 := (or #36 #8)
#58 := (or #37 #40)
#59 := [def-axiom]: #58
#75 := [unit-resolution #59 #74]: #37
#54 := (not #37)
#76 := (or #40 #54)
#41 := (or #40 #10)
#44 := (if #8 #37 #41)
#47 := (not #44)
#12 := (implies #8 #10)
#11 := (implies #10 #8)
#13 := (if #8 #11 #12)
#14 := (not #13)
#48 := (iff #14 #47)
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#43 := [rewrite]: #42
#38 := (iff #11 #37)
#39 := [rewrite]: #38
#46 := [monotonicity #39 #43]: #45
#49 := [monotonicity #46]: #48
#35 := [asserted]: #14
#52 := [mp #35 #49]: #47
#70 := (or #44 #40 #54)
#71 := [def-axiom]: #70
#77 := [unit-resolution #71 #52]: #76
#78 := [unit-resolution #77 #75 #74]: false
#79 := [lemma #78]: #40
#53 := (or #41 #8)
#60 := [def-axiom]: #53
#80 := [unit-resolution #60 #79]: #41
#63 := (not #41)
#81 := (or #8 #63)
#72 := (or #44 #8 #63)
#73 := [def-axiom]: #72
#82 := [unit-resolution #73 #52]: #81
[unit-resolution #82 #80 #79]: false
unsat
627c25c71422f379340a41c5a2991827f13b6eeb 108 0
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f6 :: S1
#14 := f6
#15 := (= f6 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#16 := (if #11 #13 #15)
#42 := (not #16)
#94 := [hypothesis]: #42
#108 := (or #10 #16)
#47 := (not #11)
#52 := (not #8)
#100 := (or #52 #16)
#95 := [hypothesis]: #8
#53 := (or #11 #52)
#54 := [def-axiom]: #53
#96 := [unit-resolution #54 #95]: #11
#17 := (if #10 #13 #15)
#18 := (if #8 #13 #17)
#92 := (or #16 #18)
#43 := (iff #42 #18)
#19 := (iff #16 #18)
#20 := (not #19)
#44 := (iff #20 #43)
#45 := [rewrite]: #44
#41 := [asserted]: #20
#48 := [mp #41 #45]: #43
#85 := (not #43)
#90 := (or #16 #18 #85)
#91 := [def-axiom]: #90
#93 := [unit-resolution #91 #48]: #92
#97 := [unit-resolution #93 #94]: #18
#76 := (not #18)
#77 := (or #76 #52 #13)
#78 := [def-axiom]: #77
#98 := [unit-resolution #78 #95 #97]: #13
#61 := (not #13)
#62 := (or #16 #47 #61)
#63 := [def-axiom]: #62
#99 := [unit-resolution #63 #98 #96 #94]: false
#101 := [lemma #99]: #100
#102 := [unit-resolution #101 #94]: #52
#55 := (not #10)
#103 := [hypothesis]: #55
#49 := (or #47 #8 #10)
#56 := [def-axiom]: #49
#104 := [unit-resolution #56 #103 #102]: #47
#79 := (or #76 #8 #17)
#80 := [def-axiom]: #79
#105 := [unit-resolution #80 #102 #97]: #17
#67 := (not #17)
#70 := (or #67 #10 #15)
#71 := [def-axiom]: #70
#106 := [unit-resolution #71 #103 #105]: #15
#64 := (not #15)
#65 := (or #16 #11 #64)
#66 := [def-axiom]: #65
#107 := [unit-resolution #66 #106 #104 #94]: false
#109 := [lemma #107]: #108
#110 := [unit-resolution #109 #94]: #10
#50 := (or #11 #55)
#51 := [def-axiom]: #50
#111 := [unit-resolution #51 #110]: #11
#68 := (or #67 #55 #13)
#69 := [def-axiom]: #68
#112 := [unit-resolution #69 #110 #105]: #13
#113 := [unit-resolution #63 #112 #111 #94]: false
#114 := [lemma #113]: #16
#115 := [hypothesis]: #47
#116 := [unit-resolution #51 #115]: #55
#59 := (or #42 #11 #15)
#60 := [def-axiom]: #59
#117 := [unit-resolution #60 #115 #114]: #15
#88 := (or #42 #76)
#86 := (or #42 #76 #85)
#87 := [def-axiom]: #86
#89 := [unit-resolution #87 #48]: #88
#118 := [unit-resolution #89 #114]: #76
#119 := [unit-resolution #54 #115]: #52
#83 := (or #18 #8 #67)
#84 := [def-axiom]: #83
#120 := [unit-resolution #84 #119 #118]: #67
#74 := (or #17 #10 #64)
#75 := [def-axiom]: #74
#121 := [unit-resolution #75 #120 #117 #116]: false
#122 := [lemma #121]: #11
#57 := (or #42 #47 #13)
#58 := [def-axiom]: #57
#123 := [unit-resolution #58 #122 #114]: #13
#81 := (or #18 #52 #61)
#82 := [def-axiom]: #81
#124 := [unit-resolution #82 #123 #118]: #52
#125 := [unit-resolution #84 #124 #118]: #67
#126 := [unit-resolution #56 #124 #122]: #10
#72 := (or #17 #55 #61)
#73 := [def-axiom]: #72
[unit-resolution #73 #126 #125 #123]: false
unsat
a8caac95ba6f91aa44f76da5a19b4261970d10e2 126 0
#2 := false
decl f1 :: S1
#3 := f1
decl f6 :: S1
#14 := f6
#15 := (= f6 f1)
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#53 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#52 := (not #8)
#54 := (or #52 #53)
#57 := (if #54 #15 #13)
#62 := (not #57)
#112 := [hypothesis]: #62
#126 := (or #53 #57)
#55 := (not #54)
#118 := (or #8 #57)
#113 := [hypothesis]: #52
#69 := (or #54 #8)
#70 := [def-axiom]: #69
#114 := [unit-resolution #70 #113]: #54
#17 := (if #10 #13 #15)
#18 := (if #8 #17 #15)
#110 := (or #57 #18)
#65 := (iff #62 #18)
#11 := (and #8 #10)
#16 := (if #11 #13 #15)
#42 := (not #16)
#43 := (iff #42 #18)
#66 := (iff #43 #65)
#63 := (iff #42 #62)
#60 := (iff #16 #57)
#47 := (if #55 #13 #15)
#58 := (iff #47 #57)
#59 := [rewrite]: #58
#49 := (iff #16 #47)
#50 := (iff #11 #55)
#51 := [rewrite]: #50
#56 := [monotonicity #51]: #49
#61 := [trans #56 #59]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#19 := (iff #16 #18)
#20 := (not #19)
#44 := (iff #20 #43)
#45 := [rewrite]: #44
#41 := [asserted]: #20
#48 := [mp #41 #45]: #43
#68 := [mp #48 #67]: #65
#103 := (not #65)
#108 := (or #57 #18 #103)
#109 := [def-axiom]: #108
#111 := [unit-resolution #109 #68]: #110
#115 := [unit-resolution #111 #112]: #18
#94 := (not #18)
#97 := (or #94 #8 #15)
#98 := [def-axiom]: #97
#116 := [unit-resolution #98 #113 #115]: #15
#79 := (not #15)
#80 := (or #57 #55 #79)
#81 := [def-axiom]: #80
#117 := [unit-resolution #81 #116 #114 #112]: false
#119 := [lemma #117]: #118
#120 := [unit-resolution #119 #112]: #8
#121 := [hypothesis]: #10
#73 := (or #55 #52 #53)
#74 := [def-axiom]: #73
#122 := [unit-resolution #74 #121 #120]: #55
#95 := (or #94 #52 #17)
#96 := [def-axiom]: #95
#123 := [unit-resolution #96 #120 #115]: #17
#85 := (not #17)
#86 := (or #85 #53 #13)
#87 := [def-axiom]: #86
#124 := [unit-resolution #87 #121 #123]: #13
#82 := (not #13)
#83 := (or #57 #54 #82)
#84 := [def-axiom]: #83
#125 := [unit-resolution #84 #124 #122 #112]: false
#127 := [lemma #125]: #126
#128 := [unit-resolution #127 #112]: #53
#71 := (or #54 #10)
#72 := [def-axiom]: #71
#129 := [unit-resolution #72 #128]: #54
#88 := (or #85 #10 #15)
#89 := [def-axiom]: #88
#130 := [unit-resolution #89 #128 #123]: #15
#131 := [unit-resolution #81 #130 #129 #112]: false
#132 := [lemma #131]: #57
#133 := [hypothesis]: #55
#134 := [unit-resolution #72 #133]: #10
#77 := (or #62 #54 #13)
#78 := [def-axiom]: #77
#135 := [unit-resolution #78 #133 #132]: #13
#106 := (or #62 #94)
#104 := (or #62 #94 #103)
#105 := [def-axiom]: #104
#107 := [unit-resolution #105 #68]: #106
#136 := [unit-resolution #107 #132]: #94
#137 := [unit-resolution #70 #133]: #8
#99 := (or #18 #52 #85)
#100 := [def-axiom]: #99
#138 := [unit-resolution #100 #137 #136]: #85
#90 := (or #17 #53 #82)
#91 := [def-axiom]: #90
#139 := [unit-resolution #91 #138 #135 #134]: false
#140 := [lemma #139]: #54
#75 := (or #62 #55 #15)
#76 := [def-axiom]: #75
#141 := [unit-resolution #76 #140 #132]: #15
#101 := (or #18 #8 #79)
#102 := [def-axiom]: #101
#142 := [unit-resolution #102 #141 #136]: #8
#143 := [unit-resolution #100 #142 #136]: #85
#144 := [unit-resolution #74 #142 #140]: #53
#92 := (or #17 #10 #79)
#93 := [def-axiom]: #92
[unit-resolution #93 #144 #143 #141]: false
unsat
addce7e2dc4a26b8ce7ed621258f4ce1254da3f8 144 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
decl f6 :: S1
#13 := f6
#14 := (= f6 f1)
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#15 := (if #10 #12 #14)
#44 := (not #8)
#45 := (or #44 #15)
#66 := (not #45)
#54 := (or #44 #14)
#51 := (or #44 #12)
#48 := (or #44 #10)
#57 := (if #48 #51 #54)
#113 := (not #57)
#131 := [hypothesis]: #113
#129 := (or #45 #57)
#67 := (iff #66 #57)
#19 := (implies #8 #14)
#18 := (implies #8 #12)
#17 := (implies #8 #10)
#20 := (if #17 #18 #19)
#16 := (implies #8 #15)
#21 := (iff #16 #20)
#22 := (not #21)
#70 := (iff #22 #67)
#60 := (iff #45 #57)
#63 := (not #60)
#68 := (iff #63 #67)
#69 := [rewrite]: #68
#64 := (iff #22 #63)
#61 := (iff #21 #60)
#58 := (iff #20 #57)
#55 := (iff #19 #54)
#56 := [rewrite]: #55
#52 := (iff #18 #51)
#53 := [rewrite]: #52
#49 := (iff #17 #48)
#50 := [rewrite]: #49
#59 := [monotonicity #50 #53 #56]: #58
#46 := (iff #16 #45)
#47 := [rewrite]: #46
#62 := [monotonicity #47 #59]: #61
#65 := [monotonicity #62]: #64
#71 := [trans #65 #69]: #70
#43 := [asserted]: #22
#74 := [mp #43 #71]: #67
#122 := (not #67)
#127 := (or #45 #57 #122)
#128 := [def-axiom]: #127
#130 := [unit-resolution #128 #74]: #129
#132 := [unit-resolution #130 #131]: #45
#103 := (not #51)
#142 := (or #54 #57)
#110 := (not #54)
#133 := [hypothesis]: #110
#106 := (or #54 #8)
#107 := [def-axiom]: #106
#134 := [unit-resolution #107 #133]: #8
#90 := (or #66 #44 #15)
#91 := [def-axiom]: #90
#135 := [unit-resolution #91 #134 #132]: #15
#83 := (not #14)
#108 := (or #54 #83)
#109 := [def-axiom]: #108
#136 := [unit-resolution #109 #133]: #83
#78 := (not #15)
#76 := (or #78 #10 #14)
#77 := [def-axiom]: #76
#137 := [unit-resolution #77 #136 #135]: #10
#79 := (not #10)
#94 := (or #48 #79)
#95 := [def-axiom]: #94
#138 := [unit-resolution #95 #137]: #48
#80 := (or #78 #79 #12)
#81 := [def-axiom]: #80
#139 := [unit-resolution #81 #137 #135]: #12
#73 := (not #12)
#101 := (or #51 #73)
#102 := [def-axiom]: #101
#140 := [unit-resolution #102 #139]: #51
#96 := (not #48)
#118 := (or #57 #96 #103)
#119 := [def-axiom]: #118
#141 := [unit-resolution #119 #140 #138 #131]: false
#143 := [lemma #141]: #142
#144 := [unit-resolution #143 #131]: #54
#120 := (or #57 #48 #110)
#121 := [def-axiom]: #120
#145 := [unit-resolution #121 #144 #131]: #48
#146 := [unit-resolution #119 #145 #131]: #103
#99 := (or #51 #8)
#100 := [def-axiom]: #99
#147 := [unit-resolution #100 #146]: #8
#148 := [unit-resolution #91 #147 #132]: #15
#149 := [unit-resolution #102 #146]: #73
#97 := (or #96 #44 #10)
#98 := [def-axiom]: #97
#150 := [unit-resolution #98 #147 #145]: #10
#151 := [unit-resolution #81 #150 #149 #148]: false
#152 := [lemma #151]: #57
#125 := (or #66 #113)
#123 := (or #66 #113 #122)
#124 := [def-axiom]: #123
#126 := [unit-resolution #124 #74]: #125
#153 := [unit-resolution #126 #152]: #66
#86 := (or #45 #8)
#87 := [def-axiom]: #86
#154 := [unit-resolution #87 #153]: #8
#88 := (or #45 #78)
#89 := [def-axiom]: #88
#157 := [unit-resolution #89 #153]: #78
#155 := [hypothesis]: #79
#156 := [unit-resolution #98 #155 #154]: #96
#84 := (or #15 #10 #83)
#85 := [def-axiom]: #84
#158 := [unit-resolution #85 #155 #157]: #83
#111 := (or #110 #44 #14)
#112 := [def-axiom]: #111
#159 := [unit-resolution #112 #158 #154]: #110
#116 := (or #113 #48 #54)
#117 := [def-axiom]: #116
#160 := [unit-resolution #117 #159 #156 #152]: false
#161 := [lemma #160]: #10
#75 := (or #15 #79 #73)
#82 := [def-axiom]: #75
#162 := [unit-resolution #82 #161 #157]: #73
#163 := [unit-resolution #95 #161]: #48
#114 := (or #113 #96 #51)
#115 := [def-axiom]: #114
#164 := [unit-resolution #115 #163 #152]: #51
#104 := (or #103 #44 #12)
#105 := [def-axiom]: #104
[unit-resolution #105 #164 #162 #154]: false
unsat
3805a38de71c30eca319b0409c21700a7cb06990 22 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (if #8 #8 #9)
#11 := (not #10)
#40 := (iff #11 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #11 #35)
#33 := (iff #10 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#32 := [asserted]: #11
[mp #32 #41]: false
unsat
10863ac83131ef76f72a772c8cf85cc3dc6dde68 22 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#9 := (not #8)
#10 := (if #9 #9 #8)
#11 := (not #10)
#40 := (iff #11 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #11 #35)
#33 := (iff #10 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#32 := [asserted]: #11
[mp #32 #41]: false
unsat
07351d51d95fc2b79e016724eb51f565136165bb 18 0
#2 := false
decl f3 :: S2
#7 := f3
#8 := (= f3 f3)
#9 := (not #8)
#38 := (iff #9 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #9
[mp #30 #39]: false
unsat
560c329fd96a3052b170500832713e5713a0d957 28 0
#2 := false
decl f3 :: S2
#7 := f3
decl f4 :: S2
#8 := f4
#10 := (= f4 f3)
#9 := (= f3 f4)
#54 := (iff #9 #10)
#52 := (iff #10 #9)
#53 := [commutativity]: #52
#55 := [symm #53]: #54
#34 := (not #9)
#35 := (or #34 #10)
#38 := (not #35)
#11 := (implies #9 #10)
#12 := (not #11)
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#33 := [asserted]: #12
#43 := [mp #33 #40]: #38
#41 := [not-or-elim #43]: #9
#50 := [mp #41 #55]: #10
#42 := (not #10)
#44 := [not-or-elim #43]: #42
[unit-resolution #44 #50]: false
unsat
0ea41c66095cc88193b1f1c4879ce9546452087f 34 0
#2 := false
decl f5 :: S2
#10 := f5
decl f3 :: S2
#7 := f3
#13 := (= f3 f5)
decl f4 :: S2
#8 := f4
#11 := (= f4 f5)
#61 := (iff #11 #13)
#59 := (iff #13 #11)
#9 := (= f3 f4)
#12 := (and #9 #11)
#37 := (not #12)
#38 := (or #37 #13)
#41 := (not #38)
#14 := (implies #12 #13)
#15 := (not #14)
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#36 := [asserted]: #15
#46 := [mp #36 #43]: #41
#44 := [not-or-elim #46]: #12
#45 := [and-elim #44]: #9
#60 := [monotonicity #45]: #59
#62 := [symm #60]: #61
#47 := [and-elim #44]: #11
#57 := [mp #47 #62]: #13
#48 := (not #13)
#49 := [not-or-elim #46]: #48
[unit-resolution #49 #57]: false
unsat
aa496f11d9d656ea523f5c18607a0927eb3d7a4a 27 0
#2 := false
decl f5 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#11 := (f5 f4)
decl f3 :: S2
#7 := f3
#10 := (f5 f3)
#12 := (= #10 #11)
#9 := (= f3 f4)
#36 := (not #9)
#37 := (or #36 #12)
#40 := (not #37)
#13 := (implies #9 #12)
#14 := (not #13)
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #14
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #9
#54 := [monotonicity #43]: #12
#44 := (not #12)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #54]: false
unsat
8b4dbc6c33c1705fe009e2d7608ca932d6b53399 31 0
#2 := false
decl f5 :: (-> S2 S2 S3)
decl f3 :: S2
#7 := f3
decl f4 :: S2
#8 := f4
#11 := (f5 f4 f3)
#10 := (f5 f3 f4)
#12 := (= #10 #11)
#56 := (= #11 #10)
#9 := (= f3 f4)
#36 := (not #9)
#37 := (or #36 #12)
#40 := (not #37)
#13 := (implies #9 #12)
#14 := (not #13)
#41 := (iff #14 #40)
#38 := (iff #13 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #14
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #9
#54 := (= f4 f3)
#55 := [symm #43]: #54
#57 := [monotonicity #55 #43]: #56
#52 := [symm #57]: #12
#44 := (not #12)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #52]: false
unsat
45c0bd6cde55221dd5a9503ffdc9267b7373c6c9 44 0
#2 := false
decl f4 :: S2
#7 := f4
decl f3 :: (-> S2 S2)
#8 := (f3 f4)
#16 := (= #8 f4)
#9 := (f3 #8)
#11 := (f3 #9)
#12 := (f3 #11)
#13 := (f3 #12)
#14 := (= #13 f4)
#10 := (= #9 f4)
#15 := (and #10 #14)
#40 := (not #15)
#41 := (or #40 #16)
#44 := (not #41)
#17 := (implies #15 #16)
#18 := (not #17)
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#39 := [asserted]: #18
#49 := [mp #39 #46]: #44
#47 := [not-or-elim #49]: #15
#50 := [and-elim #47]: #14
#54 := (= #8 #13)
#56 := (= f4 #12)
#58 := (= #9 #12)
#64 := (= #12 #9)
#62 := (= #11 #8)
#48 := [and-elim #47]: #10
#63 := [monotonicity #48]: #62
#65 := [monotonicity #63]: #64
#59 := [symm #65]: #58
#60 := (= f4 #9)
#61 := [symm #48]: #60
#57 := [trans #61 #59]: #56
#55 := [monotonicity #57]: #54
#66 := [trans #55 #50]: #16
#51 := (not #16)
#52 := [not-or-elim #49]: #51
[unit-resolution #52 #66]: false
unsat
25a1abffb915b82d17c18374398b74c5d385ed65 137 0
#2 := false
decl f6 :: S2
#12 := f6
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (if #8 f4 f5)
#13 := (= #11 f6)
#17 := (= f5 f6)
#46 := (or #8 #17)
#71 := (not #46)
#14 := (= f4 f6)
#16 := (not #8)
#43 := (or #16 #14)
#70 := (not #43)
#72 := (or #70 #71)
#116 := [hypothesis]: #71
#103 := (or #72 #46)
#104 := [def-axiom]: #103
#118 := [unit-resolution #104 #116]: #72
#73 := (not #72)
#110 := (or #13 #73)
#75 := (iff #13 #72)
#49 := (and #43 #46)
#58 := (not #13)
#59 := (iff #58 #49)
#78 := (iff #59 #75)
#65 := (iff #58 #73)
#76 := (iff #65 #75)
#77 := [rewrite]: #76
#67 := (iff #59 #65)
#68 := (iff #49 #73)
#69 := [rewrite]: #68
#74 := [monotonicity #69]: #67
#79 := [trans #74 #77]: #78
#18 := (implies #16 #17)
#15 := (implies #8 #14)
#19 := (and #15 #18)
#20 := (iff #13 #19)
#21 := (not #20)
#62 := (iff #21 #59)
#52 := (iff #13 #49)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #21 #55)
#53 := (iff #20 #52)
#50 := (iff #19 #49)
#47 := (iff #18 #46)
#48 := [rewrite]: #47
#44 := (iff #15 #43)
#45 := [rewrite]: #44
#51 := [monotonicity #45 #48]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#42 := [asserted]: #21
#66 := [mp #42 #63]: #59
#80 := [mp #66 #79]: #75
#107 := (not #75)
#108 := (or #13 #73 #107)
#109 := [def-axiom]: #108
#111 := [unit-resolution #109 #80]: #110
#119 := [unit-resolution #111 #118]: #13
#82 := (= f5 #11)
#94 := (or #46 #16)
#95 := [def-axiom]: #94
#120 := [unit-resolution #95 #116]: #16
#85 := (or #8 #82)
#86 := [def-axiom]: #85
#121 := [unit-resolution #86 #120]: #82
#122 := [trans #121 #119]: #17
#96 := (not #17)
#97 := (or #46 #96)
#98 := [def-axiom]: #97
#117 := [unit-resolution #98 #116]: #96
#123 := [unit-resolution #117 #122]: false
#124 := [lemma #123]: #46
#133 := (iff #13 #14)
#131 := (iff #14 #13)
#81 := (= f4 #11)
#125 := [hypothesis]: #8
#83 := (or #16 #81)
#84 := [def-axiom]: #83
#130 := [unit-resolution #84 #125]: #81
#132 := [monotonicity #130]: #131
#134 := [symm #132]: #133
#139 := (or #72 #16)
#89 := (not #14)
#135 := (iff #58 #89)
#136 := [monotonicity #134]: #135
#126 := [hypothesis]: #73
#114 := (or #58 #72)
#112 := (or #58 #72 #107)
#113 := [def-axiom]: #112
#115 := [unit-resolution #113 #80]: #114
#129 := [unit-resolution #115 #126]: #58
#137 := [mp #129 #136]: #89
#101 := (or #72 #43)
#102 := [def-axiom]: #101
#127 := [unit-resolution #102 #126]: #43
#92 := (or #70 #16 #14)
#93 := [def-axiom]: #92
#128 := [unit-resolution #93 #127 #125]: #14
#138 := [unit-resolution #128 #137]: false
#140 := [lemma #138]: #139
#141 := [unit-resolution #140 #125]: #72
#144 := [unit-resolution #111 #141]: #13
#145 := [mp #144 #134]: #14
#105 := (or #73 #70 #71)
#106 := [def-axiom]: #105
#142 := [unit-resolution #106 #141 #124]: #70
#90 := (or #43 #89)
#91 := [def-axiom]: #90
#143 := [unit-resolution #91 #142]: #89
#146 := [unit-resolution #143 #145]: false
#147 := [lemma #146]: #16
#99 := (or #71 #8 #17)
#100 := [def-axiom]: #99
#152 := [unit-resolution #100 #147 #124]: #17
#155 := (= #11 f5)
#151 := [unit-resolution #86 #147]: #82
#156 := [symm #151]: #155
#157 := [trans #156 #152]: #13
#87 := (or #43 #8)
#88 := [def-axiom]: #87
#148 := [unit-resolution #88 #147]: #43
#149 := [unit-resolution #106 #148 #124]: #73
#150 := [unit-resolution #115 #149]: #58
[unit-resolution #150 #157]: false
unsat
67737c4b09a83cd04939395b326a7d8f955a194d 25 0
#2 := false
#7 := (:var 0 S2)
#8 := (= #7 #7)
#9 := (forall (vars (?v0 S2)) #8)
#10 := (not #9)
#46 := (iff #10 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #10 #41)
#39 := (iff #9 true)
#34 := (forall (vars (?v0 S2)) true)
#37 := (iff #34 true)
#38 := [elim-unused]: #37
#35 := (iff #9 #34)
#32 := (iff #8 true)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #10
[mp #31 #47]: false
unsat
46c9d6a29d282ccf0878986fd29578adc8a38dd4 23 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#10 := (forall (vars (?v0 S2)) #9)
#11 := (iff #10 #10)
#12 := (not #11)
#41 := (iff #12 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (iff #11 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#33 := [asserted]: #12
[mp #33 #42]: false
unsat
5ba00f30800797eb07b09f84e102de0c826f49ed 67 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#55 := ?v0!0
#56 := (f3 ?v0!0)
#57 := (= #56 f1)
#58 := (not #57)
decl ?v1!1 :: S2
#66 := ?v1!1
#67 := (f3 ?v1!1)
#68 := (= #67 f1)
#69 := (or #57 #68)
#70 := (not #69)
#86 := (and #57 #70)
#63 := (not #58)
#76 := (and #63 #70)
#87 := (iff #76 #86)
#84 := (iff #63 #57)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#10 := (:var 1 S2)
#11 := (f3 #10)
#12 := (= #11 f1)
#13 := (or #12 #9)
#14 := (forall (vars (?v1 S2)) #13)
#39 := (not #9)
#40 := (or #39 #14)
#43 := (forall (vars (?v0 S2)) #40)
#46 := (not #43)
#79 := (~ #46 #76)
#50 := (or #57 #9)
#52 := (forall (vars (?v1 S2)) #50)
#59 := (or #58 #52)
#60 := (not #59)
#77 := (~ #60 #76)
#71 := (not #52)
#72 := (~ #71 #70)
#73 := [sk]: #72
#64 := (~ #63 #63)
#65 := [refl]: #64
#78 := [nnf-neg #65 #73]: #77
#61 := (~ #46 #60)
#62 := [sk]: #61
#80 := [trans #62 #78]: #79
#15 := (implies #9 #14)
#16 := (forall (vars (?v0 S2)) #15)
#17 := (not #16)
#47 := (iff #17 #46)
#44 := (iff #16 #43)
#41 := (iff #15 #40)
#42 := [rewrite]: #41
#45 := [quant-intro #42]: #44
#48 := [monotonicity #45]: #47
#38 := [asserted]: #17
#51 := [mp #38 #48]: #46
#81 := [mp~ #51 #80]: #76
#82 := [mp #81 #88]: #86
#89 := [and-elim #82]: #70
#90 := [not-or-elim #89]: #58
#83 := [and-elim #82]: #57
[unit-resolution #83 #90]: false
unsat
c2ff93c1c8c2d33d86971297c56d2ab2a9dc9fb6 235 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl ?v0!2 :: S2
#87 := ?v0!2
#88 := (f3 ?v0!2)
#89 := (= #88 f1)
#124 := (not #89)
decl ?v0!0 :: S2
#50 := ?v0!0
#51 := (f3 ?v0!0)
#52 := (= #51 f1)
#53 := (not #52)
#216 := [hypothesis]: #53
#7 := (:var 0 S2)
#8 := (f3 #7)
#624 := (pattern #8)
#9 := (= #8 f1)
#631 := (forall (vars (?v0 S2)) (:pat #624) #9)
decl f4 :: (-> S2 S1)
#10 := (f4 #7)
#625 := (pattern #10)
#11 := (= #10 f1)
#639 := (forall (vars (?v0 S2)) (:pat #625) #11)
#644 := (not #639)
#636 := (not #631)
#647 := (or #636 #644)
#650 := (not #647)
#56 := (not #11)
#55 := (not #9)
#64 := (or #55 #56)
#65 := (not #64)
#626 := (forall (vars (?v0 S2)) (:pat #624 #625) #65)
#618 := (not #626)
#249 := (f4 ?v0!0)
#610 := (= #249 f1)
#608 := (not #610)
#611 := (or #53 #608)
#90 := (f4 ?v0!2)
#91 := (= #90 f1)
#125 := (not #91)
#126 := (or #124 #125)
#127 := (not #126)
#285 := [hypothesis]: #626
#273 := (or #127 #618)
#612 := [hypothesis]: #126
#274 := (or #618 #127)
#405 := [quant-inst #87]: #274
#614 := [unit-resolution #405 #285 #612]: false
#615 := [lemma #614]: #273
#598 := [unit-resolution #615 #285]: #127
#620 := (or #126 #89)
#621 := [def-axiom]: #620
#305 := [unit-resolution #621 #598]: #89
#287 := [hypothesis]: #125
#286 := (or #126 #91)
#619 := [def-axiom]: #286
#280 := [unit-resolution #619 #287]: #126
#299 := (or #644 #91)
#298 := [hypothesis]: #639
#300 := [quant-inst #87]: #299
#297 := [unit-resolution #300 #298 #287]: false
#301 := [lemma #297]: #299
#616 := [unit-resolution #301 #287]: #644
#209 := (or #647 #639)
#295 := [def-axiom]: #209
#622 := [unit-resolution #295 #616]: #647
#653 := (or #626 #650)
#15 := (forall (vars (?v0 S2)) #11)
#61 := (not #15)
#14 := (forall (vars (?v0 S2)) #9)
#45 := (not #14)
#116 := (or #45 #61)
#117 := (not #116)
#113 := (forall (vars (?v0 S2)) #65)
#120 := (or #113 #117)
#654 := (iff #120 #653)
#651 := (iff #117 #650)
#648 := (iff #116 #647)
#645 := (iff #61 #644)
#642 := (iff #15 #639)
#640 := (iff #11 #11)
#641 := [refl]: #640
#643 := [quant-intro #641]: #642
#646 := [monotonicity #643]: #645
#637 := (iff #45 #636)
#634 := (iff #14 #631)
#632 := (iff #9 #9)
#633 := [refl]: #632
#635 := [quant-intro #633]: #634
#638 := [monotonicity #635]: #637
#649 := [monotonicity #638 #646]: #648
#652 := [monotonicity #649]: #651
#629 := (iff #113 #626)
#627 := (iff #65 #65)
#628 := [refl]: #627
#630 := [quant-intro #628]: #629
#655 := [monotonicity #630 #652]: #654
#16 := (and #14 #15)
#12 := (and #9 #11)
#13 := (forall (vars (?v0 S2)) #12)
#99 := (or #13 #16)
#121 := (iff #99 #120)
#118 := (iff #16 #117)
#119 := [rewrite]: #118
#114 := (iff #13 #113)
#96 := (iff #12 #65)
#97 := [rewrite]: #96
#115 := [quant-intro #97]: #114
#122 := [monotonicity #115 #119]: #121
decl ?v0!1 :: S2
#57 := ?v0!1
#58 := (f4 ?v0!1)
#59 := (= #58 f1)
#60 := (not #59)
#92 := (and #89 #91)
#93 := (not #92)
#106 := (or #93 #53 #60)
#109 := (and #99 #106)
#66 := (or #53 #60)
#98 := (or #93 #66)
#100 := (and #99 #98)
#110 := (iff #100 #109)
#107 := (iff #98 #106)
#108 := [rewrite]: #107
#111 := [monotonicity #108]: #110
#40 := (not #13)
#41 := (iff #40 #16)
#101 := (~ #41 #100)
#78 := (~ #16 #16)
#76 := (~ #15 #15)
#74 := (~ #11 #11)
#75 := [refl]: #74
#77 := [nnf-pos #75]: #76
#72 := (~ #14 #14)
#70 := (~ #9 #9)
#71 := [refl]: #70
#73 := [nnf-pos #71]: #72
#79 := [monotonicity #73 #77]: #78
#67 := (not #16)
#68 := (~ #67 #66)
#62 := (~ #61 #60)
#63 := [sk]: #62
#47 := (~ #45 #53)
#54 := [sk]: #47
#69 := [nnf-neg #54 #63]: #68
#94 := (~ #40 #93)
#95 := [sk]: #94
#84 := (not #40)
#85 := (~ #84 #13)
#82 := (~ #13 #13)
#80 := (~ #12 #12)
#81 := [refl]: #80
#83 := [nnf-pos #81]: #82
#86 := [nnf-neg #83]: #85
#102 := [nnf-pos #86 #95 #69 #79]: #101
#17 := (iff #13 #16)
#18 := (not #17)
#42 := (iff #18 #41)
#43 := [rewrite]: #42
#39 := [asserted]: #18
#46 := [mp #39 #43]: #41
#103 := [mp~ #46 #102]: #100
#104 := [mp #103 #111]: #109
#105 := [and-elim #104]: #99
#123 := [mp #105 #122]: #120
#656 := [mp #123 #655]: #653
#617 := [unit-resolution #656 #622]: #626
#623 := [unit-resolution #405 #617 #280]: false
#613 := [lemma #623]: #91
#257 := (f3 ?v0!1)
#599 := (= #257 f1)
#261 := (not #599)
#262 := (or #261 #60)
#263 := (not #262)
#609 := (or #263 #618)
#264 := [hypothesis]: #262
#602 := (or #618 #263)
#603 := [quant-inst #57]: #602
#601 := [unit-resolution #603 #285 #264]: false
#248 := [lemma #601]: #609
#317 := [unit-resolution #248 #285]: #263
#600 := (or #262 #59)
#606 := [def-axiom]: #600
#591 := [unit-resolution #606 #317]: #59
#140 := (or #124 #125 #53 #60)
#143 := (iff #106 #140)
#137 := (or #126 #53 #60)
#141 := (iff #137 #140)
#142 := [rewrite]: #141
#138 := (iff #106 #137)
#135 := (iff #93 #126)
#130 := (not #127)
#133 := (iff #130 #126)
#134 := [rewrite]: #133
#131 := (iff #93 #130)
#128 := (iff #92 #127)
#129 := [rewrite]: #128
#132 := [monotonicity #129]: #131
#136 := [trans #132 #134]: #135
#139 := [monotonicity #136]: #138
#144 := [trans #139 #142]: #143
#112 := [and-elim #104]: #106
#145 := [mp #112 #144]: #140
#595 := [unit-resolution #145 #591 #613 #305]: #53
#322 := (or #611 #52)
#323 := [def-axiom]: #322
#592 := [unit-resolution #323 #595]: #611
#597 := (not #611)
#320 := (or #618 #597)
#321 := [quant-inst #50]: #320
#596 := [unit-resolution #321 #285 #592]: false
#306 := [lemma #596]: #618
#593 := [unit-resolution #656 #306]: #650
#208 := (or #647 #631)
#294 := [def-axiom]: #208
#307 := [unit-resolution #294 #593]: #631
#594 := (or #636 #52)
#316 := [quant-inst #50]: #594
#308 := [unit-resolution #316 #307 #216]: false
#309 := [lemma #308]: #52
#587 := [hypothesis]: #60
#588 := [unit-resolution #295 #593]: #639
#302 := (or #644 #59)
#585 := [quant-inst #57]: #302
#589 := [unit-resolution #585 #588 #587]: false
#586 := [lemma #589]: #59
#590 := (or #124 #53 #60)
#579 := [unit-resolution #145 #613]: #590
#576 := [unit-resolution #579 #586 #309]: #124
#580 := (or #636 #89)
#581 := [quant-inst #87]: #580
[unit-resolution #581 #307 #576]: false
unsat
5190783c8781fcea24c1c610b455b71cf0eb75c2 145 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#72 := ?v0!1
#73 := (f3 ?v0!1)
#74 := (= #73 f1)
#75 := (not #74)
decl f4 :: S1
#11 := f4
#12 := (= f4 f1)
#55 := (or #74 #12)
#56 := (not #55)
decl ?v0!0 :: S2
#49 := ?v0!0
#50 := (f3 ?v0!0)
#51 := (= #50 f1)
#52 := (or #51 #12)
#247 := (not #51)
#44 := (not #52)
#579 := [hypothesis]: #44
#258 := (or #52 #247)
#259 := [def-axiom]: #258
#580 := [unit-resolution #259 #579]: #247
#7 := (:var 0 S2)
#8 := (f3 #7)
#584 := (pattern #8)
#9 := (= #8 f1)
#14 := (or #9 #12)
#590 := (forall (vars (?v0 S2)) (:pat #584) #14)
#81 := (not #12)
#260 := (or #52 #81)
#257 := [def-axiom]: #260
#574 := [unit-resolution #257 #579]: #81
#585 := (forall (vars (?v0 S2)) (:pat #584) #9)
#234 := (not #585)
#365 := (or #234 #51)
#576 := [hypothesis]: #247
#578 := [hypothesis]: #585
#572 := [quant-inst #49]: #365
#245 := [unit-resolution #572 #578 #576]: false
#246 := [lemma #245]: #365
#233 := [unit-resolution #246 #580]: #234
#595 := (or #585 #12 #590)
#15 := (forall (vars (?v0 S2)) #14)
#10 := (forall (vars (?v0 S2)) #9)
#95 := (or #10 #12 #15)
#596 := (iff #95 #595)
#593 := (iff #15 #590)
#591 := (iff #14 #14)
#592 := [refl]: #591
#594 := [quant-intro #592]: #593
#588 := (iff #10 #585)
#586 := (iff #9 #9)
#587 := [refl]: #586
#589 := [quant-intro #587]: #588
#597 := [monotonicity #589 #594]: #596
#84 := (and #75 #81)
#87 := (or #84 #44)
#98 := (and #95 #87)
#13 := (or #10 #12)
#88 := (or #13 #15)
#89 := (and #88 #87)
#99 := (iff #89 #98)
#96 := (iff #88 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#39 := (not #13)
#40 := (iff #39 #15)
#90 := (~ #40 #89)
#59 := (~ #15 #15)
#57 := (~ #14 #14)
#58 := [refl]: #57
#60 := [nnf-pos #58]: #59
#46 := (not #15)
#53 := (~ #46 #44)
#54 := [sk]: #53
#85 := (~ #39 #84)
#82 := (~ #81 #81)
#83 := [refl]: #82
#76 := (not #10)
#77 := (~ #76 #75)
#78 := [sk]: #77
#86 := [nnf-neg #78 #83]: #85
#69 := (not #39)
#70 := (~ #69 #13)
#67 := (~ #13 #13)
#65 := (~ #12 #12)
#66 := [refl]: #65
#63 := (~ #10 #10)
#61 := (~ #9 #9)
#62 := [refl]: #61
#64 := [nnf-pos #62]: #63
#68 := [monotonicity #64 #66]: #67
#71 := [nnf-neg #68]: #70
#91 := [nnf-pos #71 #86 #54 #60]: #90
#16 := (iff #13 #15)
#17 := (not #16)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#38 := [asserted]: #17
#45 := [mp #38 #42]: #40
#92 := [mp~ #45 #91]: #89
#93 := [mp #92 #100]: #98
#94 := [and-elim #93]: #95
#598 := [mp #94 #597]: #595
#575 := [unit-resolution #598 #233 #574]: #590
#581 := (not #590)
#582 := (or #581 #51 #12)
#577 := (or #581 #52)
#573 := (iff #577 #582)
#232 := [rewrite]: #573
#583 := [quant-inst #49]: #577
#237 := [mp #583 #232]: #582
#217 := [unit-resolution #237 #574 #575 #580]: false
#559 := [lemma #217]: #52
#102 := (or #56 #44)
#103 := (iff #87 #102)
#79 := (iff #84 #56)
#80 := [rewrite]: #79
#104 := [monotonicity #80]: #103
#101 := [and-elim #93]: #87
#105 := [mp #101 #104]: #102
#221 := [unit-resolution #105 #559]: #56
#168 := (or #55 #75)
#254 := [def-axiom]: #168
#222 := [unit-resolution #254 #221]: #75
#169 := (or #55 #81)
#255 := [def-axiom]: #169
#560 := [unit-resolution #255 #221]: #81
#565 := [hypothesis]: #590
#223 := (or #581 #74 #12)
#224 := (or #581 #55)
#562 := (iff #224 #223)
#563 := [rewrite]: #562
#561 := [quant-inst #72]: #224
#564 := [mp #561 #563]: #223
#566 := [unit-resolution #564 #560 #565 #222]: false
#203 := [lemma #566]: #581
#567 := [unit-resolution #598 #203 #560]: #585
#208 := (or #234 #74)
#209 := [quant-inst #72]: #208
[unit-resolution #209 #567 #222]: false
unsat
53f53012b8ceb61c467342994ec79dc318df7837 189 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#75 := ?v0!1
#76 := (f3 ?v0!1)
#77 := (= #76 f1)
#114 := (not #77)
decl ?v0!0 :: S2
#47 := ?v0!0
#48 := (f3 ?v0!0)
#49 := (= #48 f1)
#50 := (not #49)
#538 := [hypothesis]: #50
#7 := (:var 0 S2)
#8 := (f3 #7)
#552 := (pattern #8)
#9 := (= #8 f1)
#553 := (forall (vars (?v0 S2)) (:pat #552) #9)
decl f4 :: S1
#11 := f4
#12 := (= f4 f1)
#54 := (not #12)
#558 := (not #553)
#561 := (or #558 #54)
#564 := (not #561)
#102 := (not #9)
#103 := (or #102 #54)
#104 := (not #103)
#567 := (forall (vars (?v0 S2)) (:pat #552) #104)
#213 := (not #567)
#57 := (or #50 #54)
decl elem!2 :: S2
#228 := elem!2
#546 := (f3 elem!2)
#214 := (= #546 f1)
#548 := (not #214)
#549 := (or #548 #54)
#540 := (not #549)
#550 := [hypothesis]: #567
#545 := (or #213 #540)
#551 := [quant-inst #228]: #545
#534 := [unit-resolution #551 #550]: #540
#205 := (or #549 #12)
#542 := [def-axiom]: #205
#171 := [unit-resolution #542 #534]: #12
#115 := (or #114 #54)
#116 := (not #115)
#532 := (or #116 #213)
#547 := [hypothesis]: #115
#185 := (or #213 #116)
#527 := [quant-inst #75]: #185
#531 := [unit-resolution #527 #550 #547]: false
#533 := [lemma #531]: #532
#526 := [unit-resolution #533 #550]: #116
#189 := (or #115 #77)
#190 := [def-axiom]: #189
#233 := [unit-resolution #190 #526]: #77
#129 := (or #50 #114 #54)
#78 := (and #77 #12)
#79 := (not #78)
#91 := (or #50 #54 #79)
#132 := (iff #91 #129)
#126 := (or #50 #54 #115)
#130 := (iff #126 #129)
#131 := [rewrite]: #130
#127 := (iff #91 #126)
#124 := (iff #79 #115)
#119 := (not #116)
#122 := (iff #119 #115)
#123 := [rewrite]: #122
#120 := (iff #79 #119)
#117 := (iff #78 #116)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#125 := [trans #121 #123]: #124
#128 := [monotonicity #125]: #127
#133 := [trans #128 #131]: #132
#14 := (and #9 #12)
#15 := (forall (vars (?v0 S2)) #14)
#10 := (forall (vars (?v0 S2)) #9)
#13 := (and #10 #12)
#84 := (or #13 #15)
#94 := (and #84 #91)
#83 := (or #57 #79)
#85 := (and #84 #83)
#95 := (iff #85 #94)
#92 := (iff #83 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#23 := (not #13)
#24 := (iff #23 #15)
#86 := (~ #24 #85)
#80 := (not #15)
#81 := (~ #80 #79)
#82 := [sk]: #81
#73 := (~ #15 #15)
#71 := (~ #14 #14)
#72 := [refl]: #71
#74 := [nnf-pos #72]: #73
#68 := (not #23)
#69 := (~ #68 #13)
#66 := (~ #13 #13)
#64 := (~ #12 #12)
#65 := [refl]: #64
#62 := (~ #10 #10)
#60 := (~ #9 #9)
#61 := [refl]: #60
#63 := [nnf-pos #61]: #62
#67 := [monotonicity #63 #65]: #66
#70 := [nnf-neg #67]: #69
#58 := (~ #23 #57)
#55 := (~ #54 #54)
#56 := [refl]: #55
#51 := (not #10)
#52 := (~ #51 #50)
#53 := [sk]: #52
#59 := [nnf-neg #53 #56]: #58
#87 := [nnf-pos #59 #70 #74 #82]: #86
#16 := (iff #13 #15)
#17 := (not #16)
#25 := (iff #17 #24)
#26 := [rewrite]: #25
#19 := [asserted]: #17
#27 := [mp #19 #26]: #24
#88 := [mp~ #27 #87]: #85
#89 := [mp #88 #96]: #94
#97 := [and-elim #89]: #91
#134 := [mp #97 #133]: #129
#248 := [unit-resolution #134 #233 #171]: #50
#176 := (or #57 #49)
#177 := [def-axiom]: #176
#249 := [unit-resolution #177 #248]: #57
#528 := (not #57)
#535 := (or #213 #528)
#537 := [quant-inst #47]: #535
#250 := [unit-resolution #537 #550 #249]: false
#251 := [lemma #250]: #213
#572 := (or #564 #567)
#107 := (forall (vars (?v0 S2)) #104)
#98 := (or #51 #54)
#99 := (not #98)
#110 := (or #99 #107)
#573 := (iff #110 #572)
#570 := (iff #107 #567)
#568 := (iff #104 #104)
#569 := [refl]: #568
#571 := [quant-intro #569]: #570
#565 := (iff #99 #564)
#562 := (iff #98 #561)
#559 := (iff #51 #558)
#556 := (iff #10 #553)
#554 := (iff #9 #9)
#555 := [refl]: #554
#557 := [quant-intro #555]: #556
#560 := [monotonicity #557]: #559
#563 := [monotonicity #560]: #562
#566 := [monotonicity #563]: #565
#574 := [monotonicity #566 #571]: #573
#111 := (iff #84 #110)
#108 := (iff #15 #107)
#105 := (iff #14 #104)
#106 := [rewrite]: #105
#109 := [quant-intro #106]: #108
#100 := (iff #13 #99)
#101 := [rewrite]: #100
#112 := [monotonicity #101 #109]: #111
#90 := [and-elim #89]: #84
#113 := [mp #90 #112]: #110
#575 := [mp #113 #574]: #572
#536 := [unit-resolution #575 #251]: #564
#135 := (or #561 #553)
#222 := [def-axiom]: #135
#143 := [unit-resolution #222 #536]: #553
#539 := (or #558 #49)
#525 := [quant-inst #47]: #539
#521 := [unit-resolution #525 #143 #538]: false
#522 := [lemma #521]: #49
#245 := (or #50 #114)
#136 := (or #561 #12)
#223 := [def-axiom]: #136
#244 := [unit-resolution #223 #536]: #12
#520 := [unit-resolution #134 #244]: #245
#524 := [unit-resolution #520 #522]: #114
#519 := (or #558 #77)
#523 := [quant-inst #75]: #519
[unit-resolution #523 #143 #524]: false
40817fbcafdc8d21718702405c773ccd33ea7f23 34 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S2 S1)
#8 := (:var 0 S2)
#12 := (:var 1 S2)
#13 := (f3 #12 #8)
#14 := (= #13 f1)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#7 := (:var 2 S2)
#9 := (f3 #7 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #10)
#16 := (iff #11 #15)
#17 := (not #16)
#36 := (iff #17 false)
#1 := true
#31 := (not true)
#34 := (iff #31 false)
#35 := [rewrite]: #34
#32 := (iff #17 #31)
#29 := (iff #16 true)
#24 := (iff #15 #15)
#27 := (iff #24 true)
#28 := [rewrite]: #27
#25 := (iff #16 #24)
#23 := [elim-unused]: #16
#26 := [monotonicity #23]: #25
#30 := [trans #26 #28]: #29
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#19 := [asserted]: #17
[mp #19 #37]: false
259e8b1baa5df2fdd772840446c5eb3162d97d06 95 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S2 S1)
decl f4 :: S2
#15 := f4
decl f5 :: S2
#19 := f5
#174 := (f3 f5 f4)
#90 := (= #174 f1)
#175 := (not #90)
#20 := (f3 f4 f5)
#21 := (= #20 f1)
#56 := (not #21)
#8 := (:var 0 S2)
#16 := (f3 #8 f4)
#17 := (= #16 f1)
#18 := (forall (vars (?v0 S2)) #17)
#37 := (not #18)
#7 := (:var 1 S2)
#11 := (f3 #8 #7)
#12 := (= #11 f1)
#9 := (f3 #7 #8)
#10 := (= #9 f1)
#30 := (not #10)
#31 := (or #30 #12)
#34 := (forall (vars (?v0 S2) (?v1 S2)) #31)
#44 := (not #34)
#45 := (or #44 #37 #21)
#50 := (not #45)
#22 := (implies #18 #21)
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2) (?v1 S2)) #13)
#23 := (implies #14 #22)
#24 := (not #23)
#51 := (iff #24 #50)
#48 := (iff #23 #45)
#38 := (or #37 #21)
#41 := (implies #34 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #23 #41)
#39 := (iff #22 #38)
#40 := [rewrite]: #39
#35 := (iff #14 #34)
#32 := (iff #13 #31)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#43 := [monotonicity #36 #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#26 := [asserted]: #24
#53 := [mp #26 #52]: #50
#57 := [not-or-elim #53]: #56
#505 := (pattern #11)
#504 := (pattern #9)
#506 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #504 #505) #31)
#509 := (iff #34 #506)
#507 := (iff #31 #31)
#508 := [refl]: #507
#510 := [quant-intro #508]: #509
#81 := (~ #34 #34)
#83 := (~ #31 #31)
#84 := [refl]: #83
#82 := [nnf-pos #84]: #81
#54 := [not-or-elim #53]: #34
#79 := [mp~ #54 #82]: #34
#511 := [mp #79 #510]: #506
#178 := (not #506)
#179 := (or #178 #175 #21)
#87 := (or #175 #21)
#180 := (or #178 #87)
#181 := (iff #180 #179)
#160 := [rewrite]: #181
#177 := [quant-inst #19 #15]: #180
#496 := [mp #177 #160]: #179
#176 := [unit-resolution #496 #511 #57]: #175
#512 := (pattern #16)
#513 := (forall (vars (?v0 S2)) (:pat #512) #17)
#516 := (iff #18 #513)
#514 := (iff #17 #17)
#515 := [refl]: #514
#517 := [quant-intro #515]: #516
#78 := (~ #18 #18)
#80 := (~ #17 #17)
#77 := [refl]: #80
#85 := [nnf-pos #77]: #78
#55 := [not-or-elim #53]: #18
#86 := [mp~ #55 #85]: #18
#518 := [mp #86 #517]: #513
#498 := (not #513)
#154 := (or #498 #90)
#285 := [quant-inst #19]: #154
[unit-resolution #285 #518 #176]: false
44a8a010d20c75dbd110b4ba979d4cfad7872b87 101 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl f4 :: (-> S3 S2 S2)
decl f6 :: S2
#16 := f6
decl f5 :: S3
#10 := f5
#20 := (f4 f5 f6)
#21 := (f4 f5 #20)
#173 := (f3 #21)
#493 := (= #173 f1)
#171 := (f3 #20)
#79 := (= #171 f1)
#17 := (f3 f6)
#18 := (= #17 f1)
#7 := (:var 0 S2)
#11 := (f4 f5 #7)
#12 := (f3 #11)
#13 := (= #12 f1)
#8 := (f3 #7)
#9 := (= #8 f1)
#32 := (not #9)
#33 := (or #32 #13)
#36 := (forall (vars (?v0 S2)) #33)
#39 := (and #36 #18)
#22 := (f4 f5 #21)
#23 := (f3 #22)
#24 := (= #23 f1)
#45 := (not #39)
#46 := (or #45 #24)
#51 := (not #46)
#14 := (implies #9 #13)
#15 := (forall (vars (?v0 S2)) #14)
#19 := (and #15 #18)
#25 := (implies #19 #24)
#26 := (not #25)
#52 := (iff #26 #51)
#49 := (iff #25 #46)
#42 := (implies #39 #24)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #25 #42)
#40 := (iff #19 #39)
#37 := (iff #15 #36)
#34 := (iff #14 #33)
#35 := [rewrite]: #34
#38 := [quant-intro #35]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#28 := [asserted]: #26
#54 := [mp #28 #53]: #51
#55 := [not-or-elim #54]: #39
#57 := [and-elim #55]: #18
#501 := (pattern #11)
#502 := (forall (vars (?v0 S2)) (:pat #501) #33)
#505 := (iff #36 #502)
#503 := (iff #33 #33)
#504 := [refl]: #503
#506 := [quant-intro #504]: #505
#81 := (~ #36 #36)
#83 := (~ #33 #33)
#84 := [refl]: #83
#82 := [nnf-pos #84]: #81
#56 := [and-elim #55]: #36
#85 := [mp~ #56 #82]: #36
#507 := [mp #85 #506]: #502
#86 := (not #18)
#164 := (not #502)
#175 := (or #164 #86 #79)
#172 := (or #86 #79)
#176 := (or #164 #172)
#174 := (iff #176 #175)
#178 := [rewrite]: #174
#177 := [quant-inst #16]: #176
#157 := [mp #177 #178]: #175
#499 := [unit-resolution #157 #507 #57]: #79
#80 := (not #79)
#489 := (or #164 #80 #493)
#495 := (or #80 #493)
#162 := (or #164 #495)
#496 := (iff #162 #489)
#497 := [rewrite]: #496
#163 := [quant-inst #20]: #162
#498 := [mp #163 #497]: #489
#494 := [unit-resolution #498 #507 #499]: #493
#58 := (not #24)
#59 := [not-or-elim #54]: #58
#151 := (not #493)
#500 := (or #164 #151 #24)
#282 := (or #151 #24)
#490 := (or #164 #282)
#154 := (iff #490 #500)
#491 := [rewrite]: #154
#149 := [quant-inst #21]: #490
#150 := [mp #149 #491]: #500
[unit-resolution #150 #507 #59 #494]: false
60e1704ec347155327350daf08c9fa7301bbf00c 64 0
unsat
#2 := false
decl f3 :: (-> S2 S2 S3)
decl f4 :: S2
#13 := f4
decl f5 :: S2
#15 := f5
#17 := (f3 f5 f4)
#16 := (f3 f4 f5)
#18 := (= #16 #17)
#50 := (not #18)
#7 := (:var 1 S2)
#8 := (:var 0 S2)
#10 := (f3 #8 #7)
#9 := (f3 #7 #8)
#11 := (= #9 #10)
#12 := (forall (vars (?v0 S2) (?v1 S2)) #11)
#39 := (not #12)
#40 := (or #39 #18)
#45 := (not #40)
#14 := (= f4 f4)
#19 := (and #14 #18)
#20 := (implies #12 #19)
#21 := (not #20)
#46 := (iff #21 #45)
#43 := (iff #20 #40)
#36 := (implies #12 #18)
#41 := (iff #36 #40)
#42 := [rewrite]: #41
#37 := (iff #20 #36)
#34 := (iff #19 #18)
#1 := true
#29 := (and true #18)
#32 := (iff #29 #18)
#33 := [rewrite]: #32
#30 := (iff #19 #29)
#27 := (iff #14 true)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#38 := [monotonicity #35]: #37
#44 := [trans #38 #42]: #43
#47 := [monotonicity #44]: #46
#23 := [asserted]: #21
#48 := [mp #23 #47]: #45
#51 := [not-or-elim #48]: #50
#494 := (pattern #10)
#493 := (pattern #9)
#495 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #493 #494) #11)
#498 := (iff #12 #495)
#496 := (iff #11 #11)
#497 := [refl]: #496
#499 := [quant-intro #497]: #498
#73 := (~ #12 #12)
#71 := (~ #11 #11)
#72 := [refl]: #71
#74 := [nnf-pos #72]: #73
#49 := [not-or-elim #48]: #12
#75 := [mp~ #49 #74]: #12
#500 := [mp #75 #499]: #495
#79 := (not #495)
#164 := (or #79 #18)
#76 := [quant-inst #13 #15]: #164
[unit-resolution #76 #500 #51]: false
03e5c09109dcecda750af8f377268d580b063674 175 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl f7 :: S2
#21 := f7
#24 := (f3 f7)
#25 := (= #24 f1)
decl f5 :: S2
#14 := f5
#152 := (f3 f5)
#240 := (= #152 f1)
#154 := (not #240)
decl f4 :: (-> S2 S1)
#15 := (f4 f5)
#16 := (= #15 f1)
#17 := (not #16)
decl f6 :: (-> S2 S1)
#22 := (f6 f7)
#23 := (= #22 f1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#19 := (not #9)
#10 := (f4 #7)
#11 := (= #10 f1)
#18 := (not #11)
#20 := (and #18 #19)
#47 := (not #20)
#48 := (or #47 #23 #25)
#51 := (forall (vars (?v0 S2)) #48)
#41 := (or #19 #11)
#44 := (forall (vars (?v0 S2)) #41)
#60 := (and #44 #17 #51)
#31 := (f4 f7)
#32 := (= #31 f1)
#68 := (not #60)
#69 := (or #68 #23 #32)
#74 := (not #69)
#33 := (or #23 #32)
#26 := (or #23 #25)
#27 := (implies #20 #26)
#28 := (forall (vars (?v0 S2)) #27)
#29 := (and #17 #28)
#12 := (implies #9 #11)
#13 := (forall (vars (?v0 S2)) #12)
#30 := (and #13 #29)
#34 := (implies #30 #33)
#35 := (not #34)
#75 := (iff #35 #74)
#72 := (iff #34 #69)
#65 := (implies #60 #33)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #34 #65)
#63 := (iff #30 #60)
#54 := (and #17 #51)
#57 := (and #44 #54)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #30 #57)
#55 := (iff #29 #54)
#52 := (iff #28 #51)
#49 := (iff #27 #48)
#50 := [rewrite]: #49
#53 := [quant-intro #50]: #52
#56 := [monotonicity #53]: #55
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#43 := [rewrite]: #42
#46 := [quant-intro #43]: #45
#59 := [monotonicity #46 #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#37 := [asserted]: #35
#77 := [mp #37 #76]: #74
#78 := [not-or-elim #77]: #60
#80 := [and-elim #78]: #17
#570 := (pattern #10)
#569 := (pattern #8)
#571 := (forall (vars (?v0 S2)) (:pat #569 #570) #41)
#574 := (iff #44 #571)
#572 := (iff #41 #41)
#573 := [refl]: #572
#575 := [quant-intro #573]: #574
#121 := (~ #44 #44)
#107 := (~ #41 #41)
#108 := [refl]: #107
#122 := [nnf-pos #108]: #121
#79 := [and-elim #78]: #44
#125 := [mp~ #79 #122]: #44
#576 := [mp #125 #575]: #571
#244 := (not #571)
#245 := (or #244 #154 #16)
#241 := (or #154 #16)
#242 := (or #244 #241)
#225 := (iff #242 #245)
#561 := [rewrite]: #225
#246 := [quant-inst #14]: #242
#563 := [mp #246 #561]: #245
#567 := [unit-resolution #563 #576 #80]: #154
#143 := (or #11 #9 #25)
#577 := (forall (vars (?v0 S2)) (:pat #570 #569) #143)
#148 := (forall (vars (?v0 S2)) #143)
#580 := (iff #148 #577)
#578 := (iff #143 #143)
#579 := [refl]: #578
#581 := [quant-intro #579]: #580
#112 := (or #47 #25)
#117 := (forall (vars (?v0 S2)) #112)
#149 := (iff #117 #148)
#146 := (iff #112 #143)
#129 := (or #11 #9)
#140 := (or #129 #25)
#144 := (iff #140 #143)
#145 := [rewrite]: #144
#141 := (iff #112 #140)
#138 := (iff #47 #129)
#130 := (not #129)
#133 := (not #130)
#136 := (iff #133 #129)
#137 := [rewrite]: #136
#134 := (iff #47 #133)
#131 := (iff #20 #130)
#132 := [rewrite]: #131
#135 := [monotonicity #132]: #134
#139 := [trans #135 #137]: #138
#142 := [monotonicity #139]: #141
#147 := [trans #142 #145]: #146
#150 := [quant-intro #147]: #149
#126 := (~ #117 #117)
#124 := (~ #112 #112)
#127 := [refl]: #124
#123 := [nnf-pos #127]: #126
#118 := (iff #51 #117)
#115 := (iff #48 #112)
#113 := (or #47 false #25)
#109 := (iff #113 #112)
#110 := [rewrite]: #109
#114 := (iff #48 #113)
#105 := (iff #23 false)
#82 := (not #23)
#83 := [not-or-elim #77]: #82
#106 := [iff-false #83]: #105
#111 := [monotonicity #106]: #114
#116 := [trans #111 #110]: #115
#119 := [quant-intro #116]: #118
#81 := [and-elim #78]: #51
#120 := [mp #81 #119]: #117
#128 := [mp~ #120 #123]: #117
#151 := [mp #128 #150]: #148
#582 := [mp #151 #581]: #577
#350 := (not #577)
#557 := (or #350 #16 #240 #25)
#232 := (or #16 #240 #25)
#230 := (or #350 #232)
#564 := (iff #230 #557)
#565 := [rewrite]: #564
#231 := [quant-inst #14]: #230
#566 := [mp #231 #565]: #557
#562 := [unit-resolution #566 #80 #582 #567]: #25
#84 := (not #32)
#85 := [not-or-elim #77]: #84
#243 := (not #25)
#568 := (or #244 #243 #32)
#219 := (or #243 #32)
#558 := (or #244 #219)
#222 := (iff #558 #568)
#559 := [rewrite]: #222
#217 := [quant-inst #21]: #558
#218 := [mp #217 #559]: #568
[unit-resolution #218 #576 #85 #562]: false
dad47c0dccdde5aaf69b20f49e2beb333b7d1c8d 25 0
unsat
#2 := false
#7 := (:var 0 S2)
#8 := (= #7 #7)
#9 := (exists (vars (?v0 S2)) #8)
#10 := (not #9)
#30 := (iff #10 false)
#1 := true
#25 := (not true)
#28 := (iff #25 false)
#29 := [rewrite]: #28
#26 := (iff #10 #25)
#23 := (iff #9 true)
#18 := (exists (vars (?v0 S2)) true)
#21 := (iff #18 true)
#22 := [elim-unused]: #21
#19 := (iff #9 #18)
#16 := (iff #8 true)
#17 := [rewrite]: #16
#20 := [quant-intro #17]: #19
#24 := [trans #20 #22]: #23
#27 := [monotonicity #24]: #26
#31 := [trans #27 #29]: #30
#12 := [asserted]: #10
[mp #12 #31]: false
fc36fcb821679c8080c506c122956d27caba0078 23 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#10 := (exists (vars (?v0 S2)) #9)
#11 := (iff #10 #10)
#12 := (not #11)
#25 := (iff #12 false)
#1 := true
#20 := (not true)
#23 := (iff #20 false)
#24 := [rewrite]: #23
#21 := (iff #12 #20)
#18 := (iff #11 true)
#19 := [rewrite]: #18
#22 := [monotonicity #19]: #21
#26 := [trans #22 #24]: #25
#14 := [asserted]: #12
[mp #14 #26]: false
7ef14cc2eb8981200f35e7bb0dd9d8dc37927aaa 205 0
unsat
#2 := false
decl f4 :: (-> S2 S1)
#7 := (:var 0 S2)
#10 := (f4 #7)
#539 := (pattern #10)
decl f1 :: S1
#3 := f1
#11 := (= #10 f1)
#85 := (not #11)
#553 := (forall (vars (?v0 S2)) (:pat #539) #85)
#558 := (not #553)
decl f3 :: (-> S2 S1)
#8 := (f3 #7)
#538 := (pattern #8)
#9 := (= #8 f1)
#78 := (not #9)
#545 := (forall (vars (?v0 S2)) (:pat #538) #78)
#550 := (not #545)
#561 := (or #550 #558)
#564 := (not #561)
#12 := (or #9 #11)
#48 := (not #12)
#540 := (forall (vars (?v0 S2)) (:pat #538 #539) #48)
#214 := (not #540)
decl ?v0!2 :: S2
#70 := ?v0!2
#71 := (f4 ?v0!2)
#72 := (= #71 f1)
#518 := (f3 ?v0!2)
#519 := (= #518 f1)
#514 := (or #519 #72)
decl ?v0!0 :: S2
#54 := ?v0!0
#57 := (f4 ?v0!0)
#58 := (= #57 f1)
#188 := (not #58)
#55 := (f3 ?v0!0)
#56 := (= #55 f1)
#59 := (or #56 #58)
#201 := (not #59)
#213 := [hypothesis]: #540
#534 := (or #201 #214)
#212 := [hypothesis]: #59
#211 := (or #214 #201)
#215 := [quant-inst #54]: #211
#533 := [unit-resolution #215 #213 #212]: false
#535 := [lemma #533]: #534
#157 := [unit-resolution #535 #213]: #201
#319 := (or #59 #188)
#526 := [def-axiom]: #319
#521 := [unit-resolution #526 #157]: #188
#194 := (not #56)
#530 := (or #59 #194)
#532 := [def-axiom]: #530
#235 := [unit-resolution #532 #157]: #194
decl ?v0!1 :: S2
#65 := ?v0!1
#66 := (f3 ?v0!1)
#67 := (= #66 f1)
#529 := (not #67)
#536 := (f4 ?v0!1)
#531 := (= #536 f1)
#537 := (or #67 #531)
#527 := (not #537)
#516 := (or #527 #214)
#186 := [hypothesis]: #537
#528 := (or #214 #527)
#187 := [quant-inst #65]: #528
#191 := [unit-resolution #187 #213 #186]: false
#517 := [lemma #191]: #516
#236 := [unit-resolution #517 #213]: #527
#171 := (or #537 #529)
#513 := [def-axiom]: #171
#237 := [unit-resolution #513 #236]: #529
#104 := (or #56 #58 #67 #72)
#88 := (forall (vars (?v0 S2)) #85)
#81 := (forall (vars (?v0 S2)) #78)
#92 := (and #81 #88)
#51 := (forall (vars (?v0 S2)) #48)
#96 := (or #51 #92)
#107 := (and #104 #96)
#75 := (or #67 #72)
#97 := (or #59 #75)
#98 := (and #97 #96)
#108 := (iff #98 #107)
#105 := (iff #97 #104)
#106 := [rewrite]: #105
#109 := [monotonicity #106]: #108
#15 := (exists (vars (?v0 S2)) #11)
#14 := (exists (vars (?v0 S2)) #9)
#16 := (or #14 #15)
#13 := (exists (vars (?v0 S2)) #12)
#24 := (not #13)
#25 := (iff #24 #16)
#99 := (~ #25 #98)
#93 := (not #16)
#94 := (~ #93 #92)
#89 := (not #15)
#90 := (~ #89 #88)
#86 := (~ #85 #85)
#87 := [refl]: #86
#91 := [nnf-neg #87]: #90
#82 := (not #14)
#83 := (~ #82 #81)
#79 := (~ #78 #78)
#80 := [refl]: #79
#84 := [nnf-neg #80]: #83
#95 := [nnf-neg #84 #91]: #94
#76 := (~ #16 #75)
#73 := (~ #15 #72)
#74 := [sk]: #73
#68 := (~ #14 #67)
#69 := [sk]: #68
#77 := [monotonicity #69 #74]: #76
#62 := (not #24)
#63 := (~ #62 #59)
#60 := (~ #13 #59)
#61 := [sk]: #60
#64 := [nnf-neg #61]: #63
#52 := (~ #24 #51)
#49 := (~ #48 #48)
#50 := [refl]: #49
#53 := [nnf-neg #50]: #52
#100 := [nnf-pos #53 #64 #77 #95]: #99
#17 := (iff #13 #16)
#18 := (not #17)
#26 := (iff #18 #25)
#27 := [rewrite]: #26
#20 := [asserted]: #18
#28 := [mp #20 #27]: #25
#101 := [mp~ #28 #100]: #98
#102 := [mp #101 #109]: #107
#103 := [and-elim #102]: #104
#129 := [unit-resolution #103 #237 #235 #521]: #72
#525 := (not #72)
#511 := (or #514 #525)
#512 := [def-axiom]: #511
#507 := [unit-resolution #512 #129]: #514
#520 := (not #514)
#523 := (or #214 #520)
#162 := [quant-inst #70]: #523
#508 := [unit-resolution #162 #213 #507]: false
#230 := [lemma #508]: #214
#567 := (or #540 #564)
#112 := (not #88)
#111 := (not #81)
#113 := (or #111 #112)
#114 := (not #113)
#117 := (or #51 #114)
#568 := (iff #117 #567)
#565 := (iff #114 #564)
#562 := (iff #113 #561)
#559 := (iff #112 #558)
#556 := (iff #88 #553)
#554 := (iff #85 #85)
#555 := [refl]: #554
#557 := [quant-intro #555]: #556
#560 := [monotonicity #557]: #559
#551 := (iff #111 #550)
#548 := (iff #81 #545)
#546 := (iff #78 #78)
#547 := [refl]: #546
#549 := [quant-intro #547]: #548
#552 := [monotonicity #549]: #551
#563 := [monotonicity #552 #560]: #562
#566 := [monotonicity #563]: #565
#543 := (iff #51 #540)
#541 := (iff #48 #48)
#542 := [refl]: #541
#544 := [quant-intro #542]: #543
#569 := [monotonicity #544 #566]: #568
#118 := (iff #96 #117)
#115 := (iff #92 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#110 := [and-elim #102]: #96
#120 := [mp #110 #119]: #117
#570 := [mp #120 #569]: #567
#163 := [unit-resolution #570 #230]: #564
#122 := (or #561 #553)
#209 := [def-axiom]: #122
#222 := [unit-resolution #209 #163]: #553
#121 := (or #561 #545)
#208 := [def-axiom]: #121
#524 := [unit-resolution #208 #163]: #545
#509 := [hypothesis]: #67
#510 := (or #550 #529)
#220 := [quant-inst #65]: #510
#506 := [unit-resolution #220 #509 #524]: false
#221 := [lemma #506]: #529
#234 := [hypothesis]: #56
#522 := (or #550 #194)
#219 := [quant-inst #54]: #522
#231 := [unit-resolution #219 #234 #524]: false
#505 := [lemma #231]: #194
#223 := [hypothesis]: #58
#501 := (or #558 #188)
#502 := [quant-inst #54]: #501
#216 := [unit-resolution #502 #223 #222]: false
#499 := [lemma #216]: #188
#503 := [unit-resolution #103 #499 #505 #221]: #72
#504 := (or #558 #525)
#493 := [quant-inst #70]: #504
[unit-resolution #493 #503 #222]: false
971101afe4e49303a8bf2ce8173c0b2d6a20580f 173 0
unsat
#2 := false
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#550 := (pattern #8)
decl f1 :: S1
#3 := f1
#9 := (= #8 f1)
#47 := (not #9)
#551 := (forall (vars (?v0 S2)) (:pat #550) #47)
decl f4 :: S1
#11 := f4
#12 := (= f4 f1)
#54 := (not #12)
decl ?v0!0 :: S2
#60 := ?v0!0
#61 := (f3 ?v0!0)
#62 := (= #61 f1)
#101 := (not #62)
#102 := (or #101 #54)
#206 := [hypothesis]: #54
#134 := (or #102 #12)
#221 := [def-axiom]: #134
#542 := [unit-resolution #221 #206]: #102
decl ?v0!1 :: S2
#73 := ?v0!1
#74 := (f3 ?v0!1)
#75 := (= #74 f1)
#106 := (not #75)
#107 := (or #106 #54)
#225 := (or #107 #12)
#226 := [def-axiom]: #225
#544 := [unit-resolution #226 #206]: #107
#108 := (not #107)
#103 := (not #102)
#111 := (or #103 #108)
#76 := (and #75 #12)
#67 := (and #62 #12)
#87 := (or #67 #76)
#112 := (iff #87 #111)
#109 := (iff #76 #108)
#110 := [rewrite]: #109
#104 := (iff #67 #103)
#105 := [rewrite]: #104
#113 := [monotonicity #105 #110]: #112
#14 := (and #9 #12)
#79 := (not #14)
#82 := (forall (vars (?v0 S2)) #79)
#50 := (forall (vars (?v0 S2)) #47)
#94 := (or #50 #54 #82)
#97 := (and #87 #94)
#57 := (or #50 #54)
#86 := (or #57 #82)
#88 := (and #87 #86)
#98 := (iff #88 #97)
#95 := (iff #86 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#15 := (exists (vars (?v0 S2)) #14)
#10 := (exists (vars (?v0 S2)) #9)
#13 := (and #10 #12)
#23 := (not #13)
#24 := (iff #23 #15)
#89 := (~ #24 #88)
#83 := (not #15)
#84 := (~ #83 #82)
#80 := (~ #79 #79)
#81 := [refl]: #80
#85 := [nnf-neg #81]: #84
#77 := (~ #15 #76)
#78 := [sk]: #77
#70 := (not #23)
#71 := (~ #70 #67)
#68 := (~ #13 #67)
#65 := (~ #12 #12)
#66 := [refl]: #65
#63 := (~ #10 #62)
#64 := [sk]: #63
#69 := [monotonicity #64 #66]: #68
#72 := [nnf-neg #69]: #71
#58 := (~ #23 #57)
#55 := (~ #54 #54)
#56 := [refl]: #55
#51 := (not #10)
#52 := (~ #51 #50)
#48 := (~ #47 #47)
#49 := [refl]: #48
#53 := [nnf-neg #49]: #52
#59 := [nnf-neg #53 #56]: #58
#90 := [nnf-pos #59 #72 #78 #85]: #89
#16 := (iff #13 #15)
#17 := (not #16)
#25 := (iff #17 #24)
#26 := [rewrite]: #25
#19 := [asserted]: #17
#27 := [mp #19 #26]: #24
#91 := [mp~ #27 #90]: #88
#92 := [mp #91 #99]: #97
#93 := [and-elim #92]: #87
#114 := [mp #93 #113]: #111
#200 := [unit-resolution #114 #544 #542]: false
#331 := [lemma #200]: #12
#115 := (or #47 #54)
#556 := (forall (vars (?v0 S2)) (:pat #550) #115)
#539 := (not #556)
#188 := [hypothesis]: #556
#212 := (not #551)
#211 := [hypothesis]: #75
#545 := (or #212 #106)
#538 := [hypothesis]: #551
#546 := [quant-inst #73]: #545
#547 := [unit-resolution #546 #211 #538]: false
#548 := [lemma #547]: #545
#543 := [unit-resolution #548 #211]: #212
#561 := (or #551 #54 #556)
#126 := (forall (vars (?v0 S2)) #115)
#129 := (or #50 #54 #126)
#562 := (iff #129 #561)
#559 := (iff #126 #556)
#557 := (iff #115 #115)
#558 := [refl]: #557
#560 := [quant-intro #558]: #559
#554 := (iff #50 #551)
#552 := (iff #47 #47)
#553 := [refl]: #552
#555 := [quant-intro #553]: #554
#563 := [monotonicity #555 #560]: #562
#130 := (iff #94 #129)
#127 := (iff #82 #126)
#124 := (iff #79 #115)
#116 := (not #115)
#119 := (not #116)
#122 := (iff #119 #115)
#123 := [rewrite]: #122
#120 := (iff #79 #119)
#117 := (iff #14 #116)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#125 := [trans #121 #123]: #124
#128 := [quant-intro #125]: #127
#131 := [monotonicity #128]: #130
#100 := [and-elim #92]: #94
#132 := [mp #100 #131]: #129
#564 := [mp #132 #563]: #561
#549 := [unit-resolution #564 #543 #331]: #556
#198 := (or #539 #106 #54)
#203 := (or #539 #107)
#199 := (iff #203 #198)
#541 := [rewrite]: #199
#540 := [quant-inst #73]: #203
#183 := [mp #540 #541]: #198
#525 := [unit-resolution #183 #331 #211 #549]: false
#187 := [lemma #525]: #106
#213 := (or #107 #75)
#224 := [def-axiom]: #213
#189 := [unit-resolution #224 #187]: #107
#526 := [unit-resolution #114 #189]: #103
#133 := (or #102 #62)
#220 := [def-axiom]: #133
#532 := [unit-resolution #220 #526]: #62
#190 := (or #539 #101 #54)
#527 := (or #539 #102)
#529 := (iff #527 #190)
#530 := [rewrite]: #529
#528 := [quant-inst #60]: #527
#531 := [mp #528 #530]: #190
#169 := [unit-resolution #531 #532 #331 #188]: false
#533 := [lemma #169]: #539
#535 := [unit-resolution #564 #533 #331]: #551
#175 := (or #212 #101)
#536 := [quant-inst #60]: #175
[unit-resolution #536 #532 #535]: false
1ef8ef2e60d46143c5456e75da2d8083df054812 34 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S4 S1)
#8 := (:var 0 S4)
#12 := (:var 1 S2)
#13 := (f3 #12 #8)
#14 := (= #13 f1)
#15 := (exists (vars (?v0 S2) (?v1 S4)) #14)
#7 := (:var 2 S2)
#9 := (f3 #7 #8)
#10 := (= #9 f1)
#11 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #10)
#16 := (iff #11 #15)
#17 := (not #16)
#36 := (iff #17 false)
#1 := true
#31 := (not true)
#34 := (iff #31 false)
#35 := [rewrite]: #34
#32 := (iff #17 #31)
#29 := (iff #16 true)
#24 := (iff #15 #15)
#27 := (iff #24 true)
#28 := [rewrite]: #27
#25 := (iff #16 #24)
#23 := [elim-unused]: #16
#26 := [monotonicity #23]: #25
#30 := [trans #26 #28]: #29
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#19 := [asserted]: #17
[mp #19 #37]: false
1d545e5a8707fb488f0ac2e96346b291c3993c78 78 0
unsat
#2 := false
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#515 := (pattern #8)
decl f1 :: S1
#3 := f1
#9 := (= #8 f1)
#10 := (not #9)
#516 := (forall (vars (?v0 S2)) (:pat #515) #10)
#94 := (forall (vars (?v0 S2)) #10)
#519 := (iff #94 #516)
#517 := (iff #10 #10)
#518 := [refl]: #517
#520 := [quant-intro #518]: #519
#12 := (exists (vars (?v0 S2)) #9)
#18 := (not #12)
#95 := (~ #18 #94)
#90 := (~ #10 #10)
#91 := [refl]: #90
#96 := [nnf-neg #91]: #95
decl f4 :: (-> S2 S1)
#13 := (f4 #7)
#14 := (= #13 f1)
#15 := (and #9 #14)
#16 := (exists (vars (?v0 S2)) #15)
#17 := (or #12 #16)
#11 := (exists (vars (?v0 S2)) #10)
#28 := (and #11 #17 #18)
#19 := (and #17 #18)
#20 := (and #11 #19)
#21 := (not #20)
#22 := (not #21)
#39 := (iff #22 #28)
#31 := (not #28)
#34 := (not #31)
#37 := (iff #34 #28)
#38 := [rewrite]: #37
#35 := (iff #22 #34)
#32 := (iff #21 #31)
#29 := (iff #20 #28)
#30 := [rewrite]: #29
#33 := [monotonicity #30]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#24 := [asserted]: #22
#41 := [mp #24 #40]: #28
#44 := [and-elim #41]: #18
#97 := [mp~ #44 #96]: #94
#521 := [mp #97 #520]: #516
decl ?v0!1 :: S2
#81 := ?v0!1
#82 := (f3 ?v0!1)
#83 := (= #82 f1)
#84 := (f4 ?v0!1)
#85 := (= #84 f1)
#86 := (and #83 #85)
#87 := (~ #16 #86)
#88 := [sk]: #87
#69 := (iff #17 #16)
#64 := (or false #16)
#71 := (iff #64 #16)
#68 := [rewrite]: #71
#65 := (iff #17 #64)
#66 := (iff #12 false)
#67 := [iff-false #44]: #66
#70 := [monotonicity #67]: #65
#72 := [trans #70 #68]: #69
#43 := [and-elim #41]: #17
#73 := [mp #43 #72]: #16
#89 := [mp~ #73 #88]: #86
#92 := [and-elim #89]: #83
#98 := (not #83)
#186 := (not #516)
#100 := (or #186 #98)
#187 := [quant-inst #81]: #100
[unit-resolution #187 #92 #521]: false
64ac5cdd2e2bbc8090d1b1182bdc796d3bfd82c3 42 0
WARNING: failed to find a pattern for quantifier (quantifier id: k!10)
unsat
#2 := false
#8 := (:var 0 S2)
#7 := (:var 1 S2)
#9 := (= #7 #8)
#36 := (not #9)
#39 := (forall (vars (?v0 S2) (?v1 S2)) #36)
#448 := (not #39)
decl elem!0 :: S2
#44 := elem!0
#45 := (= elem!0 elem!0)
#454 := (not #45)
#121 := (or #448 #454)
#459 := (iff #121 #448)
#108 := (or #448 false)
#435 := (iff #108 #448)
#453 := [rewrite]: #435
#113 := (iff #121 #108)
#455 := (iff #454 false)
#1 := true
#123 := (not true)
#136 := (iff #123 false)
#116 := [rewrite]: #136
#134 := (iff #454 #123)
#122 := (iff #45 true)
#132 := [rewrite]: #122
#135 := [monotonicity #132]: #134
#457 := [trans #135 #116]: #455
#93 := [monotonicity #457]: #113
#450 := [trans #93 #453]: #459
#458 := [quant-inst #44 #44]: #121
#109 := [mp #458 #450]: #448
#10 := (exists (vars (?v0 S2) (?v1 S2)) #9)
#11 := (not #10)
#40 := (~ #11 #39)
#37 := (~ #36 #36)
#38 := [refl]: #37
#41 := [nnf-neg #38]: #40
#13 := [asserted]: #11
#42 := [mp~ #13 #41]: #39
[unit-resolution #42 #109]: false
9067d5c00609a8193d1707b7db4e437e84211a7e 137 0
WARNING: For problems containing quantifiers, the model finding capabilities of Z3 work better when the formula does not contain nested quantifiers. You can use PULL_NESTED_QUANTIFIERS=true to eliminate nested quantifiers.
unsat
#2 := false
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#526 := (pattern #8)
decl f1 :: S1
#3 := f1
#9 := (= #8 f1)
#23 := (not #9)
decl elem!0 :: S2
#110 := elem!0
#189 := (f3 elem!0)
#518 := (= #189 f1)
#523 := (not #518)
#200 := (or #523 #23)
#111 := (forall (vars (?v1 S2)) (:pat #526) #200)
#201 := (not #111)
#202 := (or #523 #201)
#199 := (not #202)
#10 := (:var 1 S2)
#11 := (f3 #10)
#12 := (= #11 f1)
#72 := (not #12)
#81 := (or #72 #23)
#527 := (forall (vars (?v1 S2)) (:pat #526) #81)
#532 := (not #527)
#535 := (or #23 #532)
#538 := (not #535)
#541 := (forall (vars (?v0 S2)) (:pat #526) #538)
#92 := (forall (vars (?v1 S2)) #81)
#98 := (not #92)
#99 := (or #23 #98)
#100 := (not #99)
#105 := (forall (vars (?v0 S2)) #100)
#542 := (iff #105 #541)
#539 := (iff #100 #538)
#536 := (iff #99 #535)
#533 := (iff #98 #532)
#530 := (iff #92 #527)
#528 := (iff #81 #81)
#529 := [refl]: #528
#531 := [quant-intro #529]: #530
#534 := [monotonicity #531]: #533
#537 := [monotonicity #534]: #536
#540 := [monotonicity #537]: #539
#543 := [quant-intro #540]: #542
#13 := (and #12 #9)
#56 := (not #13)
#59 := (forall (vars (?v1 S2)) #56)
#75 := (and #9 #59)
#78 := (forall (vars (?v0 S2)) #75)
#106 := (iff #78 #105)
#103 := (iff #75 #100)
#95 := (and #9 #92)
#101 := (iff #95 #100)
#102 := [rewrite]: #101
#96 := (iff #75 #95)
#93 := (iff #59 #92)
#90 := (iff #56 #81)
#82 := (not #81)
#85 := (not #82)
#88 := (iff #85 #81)
#89 := [rewrite]: #88
#86 := (iff #56 #85)
#83 := (iff #13 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#94 := [quant-intro #91]: #93
#97 := [monotonicity #94]: #96
#104 := [trans #97 #102]: #103
#107 := [quant-intro #104]: #106
#53 := (not #23)
#63 := (and #53 #59)
#67 := (forall (vars (?v0 S2)) #63)
#79 := (iff #67 #78)
#76 := (iff #63 #75)
#73 := (iff #53 #9)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#80 := [quant-intro #77]: #79
#14 := (exists (vars (?v1 S2)) #13)
#24 := (or #23 #14)
#27 := (exists (vars (?v0 S2)) #24)
#30 := (not #27)
#68 := (~ #30 #67)
#64 := (not #24)
#65 := (~ #64 #63)
#60 := (not #14)
#61 := (~ #60 #59)
#57 := (~ #56 #56)
#58 := [refl]: #57
#62 := [nnf-neg #58]: #61
#54 := (~ #53 #53)
#55 := [refl]: #54
#66 := [nnf-neg #55 #62]: #65
#69 := [nnf-neg #66]: #68
#15 := (implies #9 #14)
#16 := (exists (vars (?v0 S2)) #15)
#17 := (not #16)
#31 := (iff #17 #30)
#28 := (iff #16 #27)
#25 := (iff #15 #24)
#26 := [rewrite]: #25
#29 := [quant-intro #26]: #28
#32 := [monotonicity #29]: #31
#19 := [asserted]: #17
#33 := [mp #19 #32]: #30
#70 := [mp~ #33 #69]: #67
#71 := [mp #70 #80]: #78
#108 := [mp #71 #107]: #105
#544 := [mp #108 #543]: #541
#525 := (not #541)
#188 := (or #525 #199)
#524 := [quant-inst #110]: #188
#506 := [unit-resolution #524 #544]: #199
#174 := (or #202 #111)
#179 := [def-axiom]: #174
#507 := [unit-resolution #179 #506]: #111
#515 := (or #202 #518)
#521 := [def-axiom]: #515
#502 := [unit-resolution #521 #506]: #518
#159 := (or #201 #523)
#176 := (or #523 #523)
#501 := (or #201 #176)
#164 := (iff #501 #159)
#166 := (iff #159 #159)
#503 := [rewrite]: #166
#519 := (iff #176 #523)
#517 := [rewrite]: #519
#165 := [monotonicity #517]: #164
#504 := [trans #165 #503]: #164
#163 := [quant-inst #110]: #501
#505 := [mp #163 #504]: #159
[unit-resolution #505 #502 #507]: false
cfadbe698d1c93f37fd55e77c41527ea8fc85b34 168 0
unsat
#2 := false
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#527 := (pattern #8)
decl f1 :: S1
#3 := f1
#9 := (= #8 f1)
#47 := (not #9)
#528 := (forall (vars (?v0 S2)) (:pat #527) #47)
decl f4 :: S1
#11 := f4
#12 := (= f4 f1)
#533 := (not #528)
#536 := (or #533 #12)
#539 := (not #536)
#14 := (or #9 #12)
#79 := (not #14)
#542 := (forall (vars (?v0 S2)) (:pat #527) #79)
#164 := (not #542)
decl ?v0!1 :: S2
#73 := ?v0!1
#74 := (f3 ?v0!1)
#75 := (= #74 f1)
#76 := (or #75 #12)
#54 := (not #12)
decl elem!2 :: S2
#522 := elem!2
#526 := (f3 elem!2)
#176 := (= #526 f1)
#160 := (or #176 #12)
#502 := (not #160)
#503 := [hypothesis]: #542
#517 := (or #164 #502)
#165 := [quant-inst #522]: #517
#223 := [unit-resolution #165 #503]: #502
#505 := (or #160 #54)
#506 := [def-axiom]: #505
#224 := [unit-resolution #506 #223]: #54
decl ?v0!0 :: S2
#60 := ?v0!0
#61 := (f3 ?v0!0)
#62 := (= #61 f1)
#190 := (not #62)
#67 := (or #62 #12)
#180 := (not #67)
#500 := (or #180 #164)
#518 := [hypothesis]: #67
#509 := (or #164 #180)
#146 := [quant-inst #60]: #509
#514 := [unit-resolution #146 #503 #518]: false
#501 := [lemma #514]: #500
#498 := [unit-resolution #501 #503]: #180
#510 := (or #67 #190)
#512 := [def-axiom]: #510
#495 := [unit-resolution #512 #498]: #190
#94 := (or #62 #75 #12)
#82 := (forall (vars (?v0 S2)) #79)
#50 := (forall (vars (?v0 S2)) #47)
#57 := (and #50 #54)
#86 := (or #57 #82)
#97 := (and #94 #86)
#87 := (or #67 #76)
#88 := (and #87 #86)
#98 := (iff #88 #97)
#95 := (iff #87 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#15 := (exists (vars (?v0 S2)) #14)
#10 := (exists (vars (?v0 S2)) #9)
#13 := (or #10 #12)
#23 := (not #13)
#24 := (iff #23 #15)
#89 := (~ #24 #88)
#83 := (not #15)
#84 := (~ #83 #82)
#80 := (~ #79 #79)
#81 := [refl]: #80
#85 := [nnf-neg #81]: #84
#77 := (~ #15 #76)
#78 := [sk]: #77
#70 := (not #23)
#71 := (~ #70 #67)
#68 := (~ #13 #67)
#65 := (~ #12 #12)
#66 := [refl]: #65
#63 := (~ #10 #62)
#64 := [sk]: #63
#69 := [monotonicity #64 #66]: #68
#72 := [nnf-neg #69]: #71
#58 := (~ #23 #57)
#55 := (~ #54 #54)
#56 := [refl]: #55
#51 := (not #10)
#52 := (~ #51 #50)
#48 := (~ #47 #47)
#49 := [refl]: #48
#53 := [nnf-neg #49]: #52
#59 := [nnf-neg #53 #56]: #58
#90 := [nnf-pos #59 #72 #78 #85]: #89
#16 := (iff #13 #15)
#17 := (not #16)
#25 := (iff #17 #24)
#26 := [rewrite]: #25
#19 := [asserted]: #17
#27 := [mp #19 #26]: #24
#91 := [mp~ #27 #90]: #88
#92 := [mp #91 #99]: #97
#93 := [and-elim #92]: #94
#499 := [unit-resolution #93 #495 #224]: #75
#204 := (not #75)
#118 := (or #76 #204)
#496 := [def-axiom]: #118
#209 := [unit-resolution #496 #499]: #76
#208 := (not #76)
#225 := (or #164 #208)
#226 := [quant-inst #73]: #225
#210 := [unit-resolution #226 #503 #209]: false
#211 := [lemma #210]: #164
#547 := (or #539 #542)
#101 := (not #50)
#102 := (or #101 #12)
#103 := (not #102)
#106 := (or #103 #82)
#548 := (iff #106 #547)
#545 := (iff #82 #542)
#543 := (iff #79 #79)
#544 := [refl]: #543
#546 := [quant-intro #544]: #545
#540 := (iff #103 #539)
#537 := (iff #102 #536)
#534 := (iff #101 #533)
#531 := (iff #50 #528)
#529 := (iff #47 #47)
#530 := [refl]: #529
#532 := [quant-intro #530]: #531
#535 := [monotonicity #532]: #534
#538 := [monotonicity #535]: #537
#541 := [monotonicity #538]: #540
#549 := [monotonicity #541 #546]: #548
#107 := (iff #86 #106)
#104 := (iff #57 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105]: #107
#100 := [and-elim #92]: #86
#109 := [mp #100 #108]: #106
#550 := [mp #109 #549]: #547
#497 := [unit-resolution #550 #211]: #539
#110 := (or #536 #528)
#197 := [def-axiom]: #110
#219 := [unit-resolution #197 #497]: #528
#308 := (or #536 #75)
#201 := [hypothesis]: #539
#202 := [unit-resolution #197 #201]: #528
#183 := [hypothesis]: #204
#111 := (or #536 #54)
#198 := [def-axiom]: #111
#519 := [unit-resolution #198 #201]: #54
#521 := [unit-resolution #93 #519 #183]: #62
#203 := (or #533 #190)
#200 := [quant-inst #60]: #203
#177 := [unit-resolution #200 #521 #202]: false
#515 := [lemma #177]: #308
#212 := [unit-resolution #515 #497]: #75
#220 := (or #533 #204)
#494 := [quant-inst #73]: #220
[unit-resolution #494 #212 #219]: false
faa0d29344cac3f1cd8aa3672c93e609546ff0cf 98 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl f5 :: S2
#13 := f5
#14 := (f3 f5)
#15 := (= #14 f1)
#63 := (not #15)
decl f4 :: S2
#10 := f4
#11 := (f3 f4)
#12 := (= #11 f1)
#62 := (not #12)
#64 := (or #62 #63)
#65 := (not #64)
#476 := (or #62 #65)
#487 := (or #63 #65)
#276 := (not #487)
#486 := [hypothesis]: #487
#7 := (:var 0 S2)
#8 := (f3 #7)
#495 := (pattern #8)
#9 := (= #8 f1)
#25 := (not #9)
#68 := (or #25 #65)
#71 := (not #68)
#496 := (forall (vars (?v0 S2)) (:pat #495) #71)
#74 := (forall (vars (?v0 S2)) #71)
#499 := (iff #74 #496)
#497 := (iff #71 #71)
#498 := [refl]: #497
#500 := [quant-intro #498]: #499
#16 := (and #12 #15)
#26 := (or #25 #16)
#55 := (not #26)
#58 := (forall (vars (?v0 S2)) #55)
#75 := (iff #58 #74)
#72 := (iff #55 #71)
#69 := (iff #26 #68)
#66 := (iff #16 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#76 := [quant-intro #73]: #75
#29 := (exists (vars (?v0 S2)) #26)
#32 := (not #29)
#59 := (~ #32 #58)
#56 := (~ #55 #55)
#57 := [refl]: #56
#60 := [nnf-neg #57]: #59
#17 := (implies #9 #16)
#18 := (exists (vars (?v0 S2)) #17)
#19 := (not #18)
#33 := (iff #19 #32)
#30 := (iff #18 #29)
#27 := (iff #17 #26)
#28 := [rewrite]: #27
#31 := [quant-intro #28]: #30
#34 := [monotonicity #31]: #33
#21 := [asserted]: #19
#35 := [mp #21 #34]: #32
#61 := [mp~ #35 #60]: #58
#77 := [mp #61 #76]: #74
#501 := [mp #77 #500]: #496
#172 := (not #496)
#470 := (or #172 #276)
#132 := [quant-inst #13]: #470
#128 := [unit-resolution #132 #501 #486]: false
#475 := [lemma #128]: #276
#133 := (or #487 #15)
#134 := [def-axiom]: #133
#477 := [unit-resolution #134 #475]: #15
decl elem!0 :: S2
#79 := elem!0
#169 := (f3 elem!0)
#151 := (= #169 f1)
#489 := (not #151)
#145 := (or #489 #65)
#168 := (not #145)
#483 := (or #172 #168)
#156 := [quant-inst #79]: #483
#114 := [unit-resolution #156 #501]: #168
#143 := (or #145 #64)
#148 := [def-axiom]: #143
#469 := [unit-resolution #148 #114]: #64
#493 := (or #65 #62 #63)
#488 := [def-axiom]: #493
#176 := [unit-resolution #488 #469]: #64
#191 := [unit-resolution #176 #477]: #62
#119 := (or #476 #12)
#120 := [def-axiom]: #119
#192 := [unit-resolution #120 #191]: #476
#471 := (not #476)
#478 := (or #172 #471)
#480 := [quant-inst #10]: #478
[unit-resolution #480 #501 #192]: false
68f7af3545a2e0a392ee944cd5535bbc7c76b3dc 84 0
unsat
#2 := false
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#494 := (pattern #8)
decl f1 :: S1
#3 := f1
#9 := (= #8 f1)
decl ?v1!0 :: S2
#49 := ?v1!0
#50 := (f3 ?v1!0)
#51 := (= #50 f1)
#68 := (not #51)
#69 := (or #68 #9)
#70 := (not #69)
#495 := (forall (vars (?v0 S2)) (:pat #494) #70)
#275 := (not #495)
#167 := (or #68 #51)
#486 := (not #167)
#131 := (or #275 #486)
#474 := (iff #131 #275)
#133 := (or #275 false)
#472 := (iff #133 #275)
#473 := [rewrite]: #472
#134 := (iff #131 #133)
#127 := (iff #486 false)
#1 := true
#142 := (not true)
#143 := (iff #142 false)
#485 := [rewrite]: #143
#147 := (iff #486 #142)
#493 := (iff #167 true)
#483 := [rewrite]: #493
#484 := [monotonicity #483]: #147
#469 := [trans #484 #485]: #127
#471 := [monotonicity #469]: #134
#475 := [trans #471 #473]: #474
#132 := [quant-inst #49]: #131
#470 := [mp #132 #475]: #275
#73 := (forall (vars (?v0 S2)) #70)
#498 := (iff #73 #495)
#496 := (iff #70 #70)
#497 := [refl]: #496
#499 := [quant-intro #497]: #498
#57 := (not #9)
#60 := (and #51 #57)
#64 := (forall (vars (?v0 S2)) #60)
#74 := (iff #64 #73)
#71 := (iff #60 #70)
#72 := [rewrite]: #71
#75 := [quant-intro #72]: #74
#10 := (exists (vars (?v1 S2)) #9)
#19 := (not #10)
#20 := (or #19 #9)
#23 := (exists (vars (?v0 S2)) #20)
#26 := (not #23)
#65 := (~ #26 #64)
#61 := (not #20)
#62 := (~ #61 #60)
#58 := (~ #57 #57)
#59 := [refl]: #58
#54 := (not #19)
#55 := (~ #54 #51)
#52 := (~ #10 #51)
#53 := [sk]: #52
#56 := [nnf-neg #53]: #55
#63 := [nnf-neg #56 #59]: #62
#66 := [nnf-neg #63]: #65
#11 := (implies #10 #9)
#12 := (exists (vars (?v0 S2)) #11)
#13 := (not #12)
#27 := (iff #13 #26)
#24 := (iff #12 #23)
#21 := (iff #11 #20)
#22 := [rewrite]: #21
#25 := [quant-intro #22]: #24
#28 := [monotonicity #25]: #27
#15 := [asserted]: #13
#29 := [mp #15 #28]: #26
#67 := [mp~ #29 #66]: #64
#76 := [mp #67 #75]: #73
#500 := [mp #76 #499]: #495
[unit-resolution #500 #470]: false
c7dcc81d0a2f31db2403b790a9ba1ebc57f8c894 195 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: (-> S2 S1)
decl ?v0!0 :: S2
#71 := ?v0!0
#72 := (f4 ?v0!0)
#73 := (= #72 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#23 := (not #8)
#74 := (or #23 #73)
decl ?v0!1 :: S2
#82 := ?v0!1
#83 := (f4 ?v0!1)
#84 := (= #83 f1)
#535 := (not #84)
#87 := (or #23 #84)
#537 := (not #87)
#540 := [hypothesis]: #87
#9 := (:var 0 S2)
#10 := (f4 #9)
#553 := (pattern #10)
#11 := (= #10 f1)
#24 := (or #23 #11)
#65 := (not #24)
#554 := (forall (vars (?v0 S2)) (:pat #553) #65)
#93 := (not #11)
#559 := (forall (vars (?v0 S2)) (:pat #553) #93)
#564 := (not #559)
#567 := (or #23 #564)
#193 := [hypothesis]: #559
decl elem!2 :: S2
#229 := elem!2
#547 := (f4 elem!2)
#215 := (= #547 f1)
#549 := (or #23 #215)
#541 := [hypothesis]: #23
#552 := (or #549 #8)
#542 := [def-axiom]: #552
#548 := [unit-resolution #542 #541]: #549
#136 := (or #567 #8)
#223 := [def-axiom]: #136
#186 := [unit-resolution #223 #541]: #567
#570 := (not #567)
#573 := (or #554 #570)
#96 := (forall (vars (?v0 S2)) #93)
#127 := (not #96)
#128 := (or #23 #127)
#129 := (not #128)
#68 := (forall (vars (?v0 S2)) #65)
#132 := (or #68 #129)
#574 := (iff #132 #573)
#571 := (iff #129 #570)
#568 := (iff #128 #567)
#565 := (iff #127 #564)
#562 := (iff #96 #559)
#560 := (iff #93 #93)
#561 := [refl]: #560
#563 := [quant-intro #561]: #562
#566 := [monotonicity #563]: #565
#569 := [monotonicity #566]: #568
#572 := [monotonicity #569]: #571
#557 := (iff #68 #554)
#555 := (iff #65 #65)
#556 := [refl]: #555
#558 := [quant-intro #556]: #557
#575 := [monotonicity #558 #572]: #574
#117 := (and #8 #96)
#120 := (or #68 #117)
#133 := (iff #120 #132)
#130 := (iff #117 #129)
#131 := [rewrite]: #130
#134 := [monotonicity #131]: #133
#112 := (or #73 #23 #84)
#123 := (and #112 #120)
#90 := (not #23)
#100 := (and #90 #96)
#104 := (or #68 #100)
#105 := (or #74 #87)
#106 := (and #105 #104)
#124 := (iff #106 #123)
#121 := (iff #104 #120)
#118 := (iff #100 #117)
#115 := (iff #90 #8)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#122 := [monotonicity #119]: #121
#113 := (iff #105 #112)
#114 := [rewrite]: #113
#125 := [monotonicity #114 #122]: #124
#14 := (exists (vars (?v0 S2)) #11)
#30 := (or #23 #14)
#27 := (exists (vars (?v0 S2)) #24)
#39 := (not #27)
#40 := (iff #39 #30)
#107 := (~ #40 #106)
#101 := (not #30)
#102 := (~ #101 #100)
#97 := (not #14)
#98 := (~ #97 #96)
#94 := (~ #93 #93)
#95 := [refl]: #94
#99 := [nnf-neg #95]: #98
#91 := (~ #90 #90)
#92 := [refl]: #91
#103 := [nnf-neg #92 #99]: #102
#88 := (~ #30 #87)
#85 := (~ #14 #84)
#86 := [sk]: #85
#80 := (~ #23 #23)
#81 := [refl]: #80
#89 := [monotonicity #81 #86]: #88
#77 := (not #39)
#78 := (~ #77 #74)
#75 := (~ #27 #74)
#76 := [sk]: #75
#79 := [nnf-neg #76]: #78
#69 := (~ #39 #68)
#66 := (~ #65 #65)
#67 := [refl]: #66
#70 := [nnf-neg #67]: #69
#108 := [nnf-pos #70 #79 #89 #103]: #107
#15 := (implies #8 #14)
#12 := (implies #8 #11)
#13 := (exists (vars (?v0 S2)) #12)
#16 := (iff #13 #15)
#17 := (not #16)
#43 := (iff #17 #40)
#33 := (iff #27 #30)
#36 := (not #33)
#41 := (iff #36 #40)
#42 := [rewrite]: #41
#37 := (iff #17 #36)
#34 := (iff #16 #33)
#31 := (iff #15 #30)
#32 := [rewrite]: #31
#28 := (iff #13 #27)
#25 := (iff #12 #24)
#26 := [rewrite]: #25
#29 := [quant-intro #26]: #28
#35 := [monotonicity #29 #32]: #34
#38 := [monotonicity #35]: #37
#44 := [trans #38 #42]: #43
#19 := [asserted]: #17
#45 := [mp #19 #44]: #40
#109 := [mp~ #45 #108]: #106
#110 := [mp #109 #125]: #123
#126 := [and-elim #110]: #120
#135 := [mp #126 #134]: #132
#576 := [mp #135 #575]: #573
#528 := [unit-resolution #576 #186]: #554
#550 := (not #549)
#551 := (not #554)
#214 := (or #551 #550)
#546 := [quant-inst #229]: #214
#190 := [unit-resolution #546 #528 #548]: false
#191 := [lemma #190]: #8
#192 := (not #73)
#534 := (or #192 #564)
#530 := [hypothesis]: #73
#531 := (or #564 #192)
#532 := [quant-inst #71]: #531
#533 := [unit-resolution #532 #530 #193]: false
#529 := [lemma #533]: #534
#172 := [unit-resolution #529 #193]: #192
#111 := [and-elim #110]: #112
#536 := [unit-resolution #111 #172 #191]: #84
#538 := (or #564 #535)
#177 := [quant-inst #82]: #538
#178 := [unit-resolution #177 #536 #193]: false
#539 := [lemma #178]: #564
#137 := (or #567 #559)
#224 := [def-axiom]: #137
#526 := [unit-resolution #224 #539]: #567
#523 := [unit-resolution #576 #526]: #554
#527 := (or #551 #537)
#234 := [quant-inst #82]: #527
#245 := [unit-resolution #234 #523 #540]: false
#246 := [lemma #245]: #537
#251 := (or #87 #535)
#252 := [def-axiom]: #251
#524 := [unit-resolution #252 #246]: #535
#521 := (or #73 #84)
#514 := [unit-resolution #111 #191]: #521
#518 := [unit-resolution #514 #524]: #73
#238 := (or #74 #192)
#516 := [def-axiom]: #238
#515 := [unit-resolution #516 #518]: #74
#520 := (not #74)
#525 := (or #551 #520)
#235 := [quant-inst #71]: #525
[unit-resolution #235 #523 #515]: false
b3778beae28d076e6c36fc9b45a5fba8752cdac2 79 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1 S1)
decl ?v0!1 :: S1
#56 := ?v0!1
decl f4 :: S2
#7 := f4
#57 := (f3 f4 ?v0!1)
#58 := (= #57 f1)
decl ?v0!0 :: S1
#45 := ?v0!0
#46 := (f3 f4 ?v0!0)
#47 := (= #46 f1)
#83 := (not #47)
#170 := [hypothesis]: #47
#8 := (:var 0 S1)
#9 := (f3 f4 #8)
#500 := (pattern #9)
#10 := (= #9 f1)
#13 := (not #10)
#501 := (forall (vars (?v0 S1)) (:pat #500) #13)
#14 := (forall (vars (?v0 S1)) #13)
#504 := (iff #14 #501)
#502 := (iff #13 #13)
#503 := [refl]: #502
#505 := [quant-intro #503]: #504
#76 := (or #47 #58)
#79 := (and #14 #76)
#59 := (not #58)
#60 := (not #59)
#64 := (or #47 #60)
#65 := (or #14 #14)
#66 := (and #65 #64)
#80 := (iff #66 #79)
#77 := (iff #64 #76)
#74 := (iff #60 #58)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#72 := (iff #65 #14)
#73 := [rewrite]: #72
#81 := [monotonicity #73 #78]: #80
#11 := (exists (vars (?v0 S1)) #10)
#22 := (iff #11 #14)
#67 := (~ #22 #66)
#61 := (not #14)
#62 := (~ #61 #60)
#63 := [sk]: #62
#54 := (~ #14 #14)
#50 := (~ #13 #13)
#51 := [refl]: #50
#55 := [nnf-pos #51]: #54
#12 := (not #11)
#52 := (~ #12 #14)
#53 := [nnf-neg #51]: #52
#48 := (~ #11 #47)
#49 := [sk]: #48
#68 := [nnf-pos #49 #53 #55 #63]: #67
#15 := (iff #12 #14)
#16 := (not #15)
#23 := (iff #16 #22)
#24 := [rewrite]: #23
#18 := [asserted]: #16
#25 := [mp #18 #24]: #22
#69 := [mp~ #25 #68]: #66
#70 := [mp #69 #81]: #79
#71 := [and-elim #70]: #14
#506 := [mp #71 #505]: #501
#171 := (not #501)
#85 := (or #171 #83)
#172 := [quant-inst #45]: #85
#84 := [unit-resolution #172 #506 #170]: false
#163 := [lemma #84]: #83
#82 := [and-elim #70]: #76
#174 := [unit-resolution #82 #163]: #58
#176 := (or #171 #59)
#173 := [quant-inst #56]: #176
[unit-resolution #173 #506 #174]: false
2d8fd1a0ef67720701cd879eda1b0854a5ebf849 179 0
unsat
#2 := false
decl f3 :: (-> S2 S1 S1)
#8 := (:var 0 S1)
decl f4 :: S2
#7 := f4
#9 := (f3 f4 #8)
#546 := (pattern #9)
decl f1 :: S1
#3 := f1
#10 := (= #9 f1)
#552 := (forall (vars (?v0 S1)) (:pat #546) #10)
decl f5 :: S1
#11 := f5
#12 := (= f5 f1)
#557 := (not #552)
#560 := (or #557 #12)
#563 := (not #560)
#24 := (not #10)
#25 := (or #24 #12)
#67 := (not #25)
#547 := (forall (vars (?v0 S1)) (:pat #546) #67)
#534 := (not #547)
decl ?v0!0 :: S1
#73 := ?v0!0
#74 := (f3 f4 ?v0!0)
#75 := (= #74 f1)
#76 := (not #75)
#77 := (or #76 #12)
decl ?v0!1 :: S1
#83 := ?v0!1
#84 := (f3 f4 ?v0!1)
#85 := (= #84 f1)
#86 := (not #85)
#91 := (or #86 #12)
#222 := [hypothesis]: #86
#541 := (or #91 #85)
#542 := [def-axiom]: #541
#196 := [unit-resolution #542 #222]: #91
#219 := (or #557 #85)
#221 := [hypothesis]: #552
#223 := [quant-inst #83]: #219
#202 := [unit-resolution #223 #222 #221]: false
#538 := [lemma #202]: #219
#327 := [unit-resolution #538 #222]: #557
#129 := (or #560 #552)
#130 := [def-axiom]: #129
#535 := [unit-resolution #130 #327]: #560
#566 := (or #547 #563)
#15 := (forall (vars (?v0 S1)) #10)
#31 := (not #15)
#32 := (or #31 #12)
#105 := (not #32)
#70 := (forall (vars (?v0 S1)) #67)
#125 := (or #70 #105)
#567 := (iff #125 #566)
#564 := (iff #105 #563)
#561 := (iff #32 #560)
#558 := (iff #31 #557)
#555 := (iff #15 #552)
#553 := (iff #10 #10)
#554 := [refl]: #553
#556 := [quant-intro #554]: #555
#559 := [monotonicity #556]: #558
#562 := [monotonicity #559]: #561
#565 := [monotonicity #562]: #564
#550 := (iff #70 #547)
#548 := (iff #67 #67)
#549 := [refl]: #548
#551 := [quant-intro #549]: #550
#568 := [monotonicity #551 #565]: #567
#101 := (not #12)
#104 := (and #15 #101)
#108 := (or #70 #104)
#126 := (iff #108 #125)
#123 := (iff #104 #105)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#116 := (or #76 #86 #12)
#119 := (and #116 #108)
#109 := (or #77 #91)
#110 := (and #109 #108)
#120 := (iff #110 #119)
#117 := (iff #109 #116)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#28 := (exists (vars (?v0 S1)) #25)
#41 := (not #28)
#42 := (iff #41 #32)
#111 := (~ #42 #110)
#106 := (~ #105 #104)
#102 := (~ #101 #101)
#103 := [refl]: #102
#98 := (not #31)
#99 := (~ #98 #15)
#96 := (~ #15 #15)
#94 := (~ #10 #10)
#95 := [refl]: #94
#97 := [nnf-pos #95]: #96
#100 := [nnf-neg #97]: #99
#107 := [nnf-neg #100 #103]: #106
#92 := (~ #32 #91)
#89 := (~ #12 #12)
#90 := [refl]: #89
#87 := (~ #31 #86)
#88 := [sk]: #87
#93 := [monotonicity #88 #90]: #92
#80 := (not #41)
#81 := (~ #80 #77)
#78 := (~ #28 #77)
#79 := [sk]: #78
#82 := [nnf-neg #79]: #81
#71 := (~ #41 #70)
#68 := (~ #67 #67)
#69 := [refl]: #68
#72 := [nnf-neg #69]: #71
#112 := [nnf-pos #72 #82 #93 #107]: #111
#16 := (implies #15 #12)
#13 := (implies #10 #12)
#14 := (exists (vars (?v0 S1)) #13)
#17 := (iff #14 #16)
#18 := (not #17)
#45 := (iff #18 #42)
#35 := (iff #28 #32)
#38 := (not #35)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #18 #38)
#36 := (iff #17 #35)
#33 := (iff #16 #32)
#34 := [rewrite]: #33
#29 := (iff #14 #28)
#26 := (iff #13 #25)
#27 := [rewrite]: #26
#30 := [quant-intro #27]: #29
#37 := [monotonicity #30 #34]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#20 := [asserted]: #18
#47 := [mp #20 #46]: #42
#113 := [mp~ #47 #112]: #110
#114 := [mp #113 #121]: #119
#122 := [and-elim #114]: #108
#128 := [mp #122 #127]: #125
#569 := [mp #128 #568]: #566
#194 := [unit-resolution #569 #535]: #547
#540 := (not #91)
#207 := (or #534 #540)
#208 := [quant-inst #83]: #207
#199 := [unit-resolution #208 #194 #196]: false
#536 := [lemma #199]: #85
#543 := (not #77)
#525 := [hypothesis]: #543
#537 := (or #77 #75)
#179 := [def-axiom]: #537
#526 := [unit-resolution #179 #525]: #75
#521 := (or #77 #101)
#183 := [def-axiom]: #521
#527 := [unit-resolution #183 #525]: #101
#115 := [and-elim #114]: #116
#522 := [unit-resolution #115 #527 #526 #536]: false
#528 := [lemma #522]: #77
#523 := (or #543 #534)
#544 := [hypothesis]: #77
#539 := [hypothesis]: #547
#545 := (or #534 #543)
#195 := [quant-inst #73]: #545
#186 := [unit-resolution #195 #539 #544]: false
#524 := [lemma #186]: #523
#165 := [unit-resolution #524 #528]: #534
#529 := [unit-resolution #569 #165]: #563
#171 := [unit-resolution #130 #529]: #552
#216 := (or #560 #101)
#217 := [def-axiom]: #216
#532 := [unit-resolution #217 #529]: #101
#530 := [unit-resolution #115 #532 #536]: #76
#531 := (or #557 #75)
#170 := [quant-inst #73]: #531
[unit-resolution #170 #530 #171]: false
5068ada6674873a5a5e5c36bb6eb28fe2d67f362 128 0
unsat
#2 := false
decl f3 :: (-> S3 S2 S1)
#10 := (:var 0 S2)
decl f4 :: (-> S4 S1 S3)
decl f6 :: S1
#16 := f6
decl f5 :: S4
#7 := f5
#17 := (f4 f5 f6)
#18 := (f3 #17 #10)
#523 := (pattern #18)
decl f1 :: S1
#3 := f1
#19 := (= #18 f1)
#67 := (not #19)
#524 := (forall (vars (?v0 S2)) (:pat #523) #67)
decl f7 :: S2
#21 := f7
#22 := (f3 #17 f7)
#23 := (= #22 f1)
#97 := (= f6 f1)
#98 := (iff #23 #97)
#8 := (:var 1 S1)
#9 := (f4 f5 #8)
#11 := (f3 #9 #10)
#516 := (pattern #11)
#13 := (= #8 f1)
#12 := (= #11 f1)
#14 := (iff #12 #13)
#517 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #516) #14)
#15 := (forall (vars (?v0 S1) (?v1 S2)) #14)
#520 := (iff #15 #517)
#518 := (iff #14 #14)
#519 := [refl]: #518
#521 := [quant-intro #519]: #520
#69 := (~ #15 #15)
#71 := (~ #14 #14)
#72 := [refl]: #71
#70 := [nnf-pos #72]: #69
#20 := (exists (vars (?v0 S2)) #19)
#24 := (iff #20 #23)
#32 := (not #15)
#33 := (or #32 #24)
#36 := (not #33)
#25 := (implies #15 #24)
#26 := (not #25)
#37 := (iff #26 #36)
#34 := (iff #25 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#28 := [asserted]: #26
#39 := [mp #28 #38]: #36
#40 := [not-or-elim #39]: #15
#66 := [mp~ #40 #70]: #15
#522 := [mp #66 #521]: #517
#101 := (not #517)
#178 := (or #101 #98)
#511 := [quant-inst #16 #21]: #178
#187 := [unit-resolution #511 #522]: #98
decl ?v0!0 :: S2
#78 := ?v0!0
#79 := (f3 #17 ?v0!0)
#80 := (= #79 f1)
#186 := (iff #80 #97)
#188 := (or #101 #186)
#179 := [quant-inst #16 #78]: #188
#177 := [unit-resolution #179 #522]: #186
#190 := (not #186)
#149 := (or #190 #97)
#88 := (not #23)
#165 := [hypothesis]: #88
#92 := (or #80 #23)
#75 := (forall (vars (?v0 S2)) #67)
#91 := (or #75 #88)
#93 := (and #92 #91)
#62 := (not #20)
#63 := (iff #62 #23)
#94 := (~ #63 #93)
#89 := (~ #88 #88)
#90 := [refl]: #89
#86 := (~ #23 #23)
#87 := [refl]: #86
#83 := (not #62)
#84 := (~ #83 #80)
#81 := (~ #20 #80)
#82 := [sk]: #81
#85 := [nnf-neg #82]: #84
#76 := (~ #62 #75)
#73 := (~ #67 #67)
#74 := [refl]: #73
#77 := [nnf-neg #74]: #76
#95 := [nnf-pos #77 #85 #87 #90]: #94
#41 := (not #24)
#64 := (iff #41 #63)
#65 := [rewrite]: #64
#42 := [not-or-elim #39]: #41
#68 := [mp #42 #65]: #63
#96 := [mp~ #68 #95]: #93
#99 := [and-elim #96]: #92
#507 := [unit-resolution #99 #165]: #80
#193 := (not #80)
#172 := (or #190 #193 #97)
#508 := [def-axiom]: #172
#491 := [unit-resolution #508 #507]: #149
#153 := [unit-resolution #491 #177]: #97
#191 := (not #97)
#512 := (not #98)
#154 := (or #512 #191)
#513 := (or #512 #23 #191)
#514 := [def-axiom]: #513
#155 := [unit-resolution #514 #165]: #154
#156 := [unit-resolution #155 #153 #187]: false
#493 := [lemma #156]: #23
#529 := (or #524 #88)
#530 := (iff #91 #529)
#527 := (iff #75 #524)
#525 := (iff #67 #67)
#526 := [refl]: #525
#528 := [quant-intro #526]: #527
#531 := [monotonicity #528]: #530
#100 := [and-elim #96]: #91
#532 := [mp #100 #531]: #529
#192 := [unit-resolution #532 #493]: #524
#505 := (not #524)
#164 := (or #505 #88)
#169 := [quant-inst #21]: #164
[unit-resolution #169 #493 #192]: false
e77b347bc6ad4af31e73ee2068809dd306b3d8ad 73 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1 S1)
decl f5 :: S1
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#10 := (= #9 f1)
decl f6 :: S1
#19 := f6
#20 := (f3 f4 f6)
#21 := (= #20 f1)
#30 := (not #10)
#11 := (:var 0 S1)
#12 := (f3 f4 #11)
#13 := (= #12 f1)
#16 := (not #13)
#17 := (forall (vars (?v0 S1)) #16)
#14 := (exists (vars (?v0 S1)) #13)
#15 := (not #14)
#18 := (if #10 #15 #17)
#37 := (not #18)
#38 := (or #37 #30 #21)
#43 := (not #38)
#22 := (implies #10 #21)
#23 := (implies #18 #22)
#24 := (not #23)
#44 := (iff #24 #43)
#41 := (iff #23 #38)
#31 := (or #30 #21)
#34 := (implies #18 #31)
#39 := (iff #34 #38)
#40 := [rewrite]: #39
#35 := (iff #23 #34)
#32 := (iff #22 #31)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#42 := [trans #36 #40]: #41
#45 := [monotonicity #42]: #44
#26 := [asserted]: #24
#46 := [mp #26 #45]: #43
#48 := [not-or-elim #46]: #10
#502 := (pattern #12)
#503 := (forall (vars (?v0 S1)) (:pat #502) #16)
#506 := (iff #17 #503)
#504 := (iff #16 #16)
#505 := [refl]: #504
#507 := [quant-intro #505]: #506
#74 := (~ #15 #17)
#82 := (~ #16 #16)
#83 := [refl]: #82
#75 := [nnf-neg #83]: #74
#79 := (iff #18 #15)
#1 := true
#72 := (if true #15 #17)
#77 := (iff #72 #15)
#78 := [rewrite]: #77
#73 := (iff #18 #72)
#70 := (iff #10 true)
#71 := [iff-true #48]: #70
#76 := [monotonicity #71]: #73
#80 := [trans #76 #78]: #79
#47 := [not-or-elim #46]: #18
#81 := [mp #47 #80]: #15
#84 := [mp~ #81 #75]: #17
#508 := [mp #84 #507]: #503
#86 := (not #503)
#173 := (or #86 #30)
#87 := [quant-inst #8]: #173
[unit-resolution #87 #508 #48]: false
5b310cc250a1d70ecf53090e27cc613cfbdee1d0 138 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f7 :: S1
#26 := f7
#153 := (= f7 f1)
decl f3 :: (-> S3 S2 S1)
decl f6 :: S2
#20 := f6
decl f4 :: (-> S4 S1 S3)
decl f5 :: S4
#7 := f5
#27 := (f4 f5 f7)
#31 := (f3 #27 f6)
#32 := (= #31 f1)
#242 := (iff #32 #153)
#10 := (:var 0 S2)
#8 := (:var 1 S1)
#9 := (f4 f5 #8)
#11 := (f3 #9 #10)
#572 := (pattern #11)
#13 := (= #8 f1)
#12 := (= #11 f1)
#14 := (iff #12 #13)
#573 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #572) #14)
#15 := (forall (vars (?v0 S1) (?v1 S2)) #14)
#576 := (iff #15 #573)
#574 := (iff #14 #14)
#575 := [refl]: #574
#577 := [quant-intro #575]: #576
#84 := (~ #15 #15)
#80 := (~ #14 #14)
#81 := [refl]: #80
#85 := [nnf-pos #81]: #84
#18 := (:var 0 S1)
#19 := (f4 f5 #18)
#21 := (f3 #19 f6)
#22 := (= #21 f1)
#23 := (forall (vars (?v0 S1)) #22)
#16 := (exists (vars (?v1 S2)) #12)
#17 := (forall (vars (?v0 S1)) #16)
#24 := (iff #17 #23)
#25 := (and #15 #24)
#28 := (f3 #27 #10)
#29 := (= #28 f1)
#30 := (exists (vars (?v0 S2)) #29)
#33 := (iff #30 #32)
#41 := (not #25)
#42 := (or #41 #33)
#45 := (not #42)
#34 := (implies #25 #33)
#35 := (not #34)
#46 := (iff #35 #45)
#43 := (iff #34 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#37 := [asserted]: #35
#48 := [mp #37 #47]: #45
#49 := [not-or-elim #48]: #25
#50 := [and-elim #49]: #15
#77 := [mp~ #50 #85]: #15
#578 := [mp #77 #577]: #573
#245 := (not #573)
#561 := (or #245 #242)
#220 := [quant-inst #26 #20]: #561
#247 := [unit-resolution #220 #578]: #242
decl ?v0!3 :: S2
#134 := ?v0!3
#135 := (f3 #27 ?v0!3)
#136 := (= #135 f1)
#246 := (iff #136 #153)
#249 := (or #245 #246)
#228 := [quant-inst #26 #134]: #249
#248 := [unit-resolution #228 #578]: #246
#564 := (not #246)
#549 := (or #564 #153)
#144 := (not #32)
#604 := (pattern #28)
#126 := (not #29)
#605 := (forall (vars (?v0 S2)) (:pat #604) #126)
#154 := [hypothesis]: #32
#610 := (or #605 #144)
#131 := (forall (vars (?v0 S2)) #126)
#147 := (or #131 #144)
#611 := (iff #147 #610)
#608 := (iff #131 #605)
#606 := (iff #126 #126)
#607 := [refl]: #606
#609 := [quant-intro #607]: #608
#612 := [monotonicity #609]: #611
#148 := (or #136 #32)
#149 := (and #148 #147)
#73 := (not #30)
#74 := (iff #73 #32)
#150 := (~ #74 #149)
#145 := (~ #144 #144)
#146 := [refl]: #145
#142 := (~ #32 #32)
#143 := [refl]: #142
#139 := (not #73)
#140 := (~ #139 #136)
#137 := (~ #30 #136)
#138 := [sk]: #137
#141 := [nnf-neg #138]: #140
#132 := (~ #73 #131)
#127 := (~ #126 #126)
#130 := [refl]: #127
#133 := [nnf-neg #130]: #132
#151 := [nnf-pos #133 #141 #143 #146]: #150
#52 := (not #33)
#75 := (iff #52 #74)
#76 := [rewrite]: #75
#53 := [not-or-elim #48]: #52
#79 := [mp #53 #76]: #74
#152 := [mp~ #79 #151]: #149
#156 := [and-elim #152]: #147
#613 := [mp #156 #612]: #610
#243 := [unit-resolution #613 #154]: #605
#560 := (not #605)
#233 := (or #560 #144)
#234 := [quant-inst #20]: #233
#567 := [unit-resolution #234 #154 #243]: false
#568 := [lemma #567]: #144
#155 := [and-elim #152]: #148
#212 := [unit-resolution #155 #568]: #136
#157 := (not #136)
#244 := (or #564 #157 #153)
#235 := [def-axiom]: #244
#550 := [unit-resolution #235 #212]: #549
#551 := [unit-resolution #550 #248]: #153
#566 := (not #153)
#225 := (not #242)
#552 := (or #225 #566)
#562 := (or #225 #32 #566)
#221 := [def-axiom]: #562
#553 := [unit-resolution #221 #568]: #552
[unit-resolution #553 #551 #247]: false
0b72ca47b596bf4617b3c43ccb84578bda9d4bf9 66 0
unsat
#2 := false
decl f3 :: (-> S2 S3 S4)
#8 := (:var 0 S3)
decl ?v0!0 :: S2
#41 := ?v0!0
#42 := (f3 ?v0!0 #8)
#476 := (pattern #42)
decl f4 :: (-> S5 S2 S3)
decl f5 :: S5
#10 := f5
#43 := (f4 f5 ?v0!0)
#44 := (f3 ?v0!0 #43)
#45 := (= #42 #44)
#50 := (not #45)
#477 := (forall (vars (?v1 S3)) (:pat #476) #50)
#257 := (not #477)
#137 := (= #44 #44)
#468 := (not #137)
#466 := (or #257 #468)
#115 := (iff #466 #257)
#467 := (or #257 false)
#113 := (iff #467 #257)
#114 := [rewrite]: #113
#109 := (iff #466 #467)
#124 := (iff #468 false)
#1 := true
#473 := (not true)
#475 := (iff #473 false)
#465 := [rewrite]: #475
#474 := (iff #468 #473)
#471 := (iff #137 true)
#472 := [rewrite]: #471
#469 := [monotonicity #472]: #474
#129 := [trans #469 #465]: #124
#451 := [monotonicity #129]: #109
#116 := [trans #451 #114]: #115
#125 := [quant-inst #43]: #466
#453 := [mp #125 #116]: #257
#53 := (forall (vars (?v1 S3)) #50)
#480 := (iff #53 #477)
#478 := (iff #50 #50)
#479 := [refl]: #478
#481 := [quant-intro #479]: #480
#7 := (:var 1 S2)
#11 := (f4 f5 #7)
#12 := (f3 #7 #11)
#9 := (f3 #7 #8)
#13 := (= #9 #12)
#14 := (exists (vars (?v1 S3)) #13)
#15 := (forall (vars (?v0 S2)) #14)
#16 := (not #15)
#56 := (~ #16 #53)
#46 := (exists (vars (?v1 S3)) #45)
#47 := (not #46)
#54 := (~ #47 #53)
#51 := (~ #50 #50)
#52 := [refl]: #51
#55 := [nnf-neg #52]: #54
#48 := (~ #16 #47)
#49 := [sk]: #48
#57 := [trans #49 #55]: #56
#18 := [asserted]: #16
#58 := [mp~ #18 #57]: #53
#482 := [mp #58 #481]: #477
[unit-resolution #482 #453]: false
d60a61e097c059599bc1ac624893b062d56af4fe 88 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#67 := ?v0!1
#68 := (f3 ?v0!1)
#69 := (= #68 f1)
decl ?v0!0 :: S2
#56 := ?v0!0
#57 := (f3 ?v0!0)
#58 := (= #57 f1)
#93 := (not #58)
#180 := [hypothesis]: #58
#7 := (:var 0 S2)
#8 := (f3 #7)
#510 := (pattern #8)
#9 := (= #8 f1)
#13 := (not #9)
#511 := (forall (vars (?v0 S2)) (:pat #510) #13)
#14 := (forall (vars (?v0 S2)) #13)
#514 := (iff #14 #511)
#512 := (iff #13 #13)
#513 := [refl]: #512
#515 := [quant-intro #513]: #514
#86 := (or #58 #69)
#89 := (and #14 #86)
#70 := (not #69)
#71 := (not #70)
#74 := (or #58 #71)
#75 := (or #14 #14)
#76 := (and #75 #74)
#90 := (iff #76 #89)
#87 := (iff #74 #86)
#84 := (iff #71 #69)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#82 := (iff #75 #14)
#83 := [rewrite]: #82
#91 := [monotonicity #83 #88]: #90
#10 := (exists (vars (?v0 S2)) #9)
#31 := (iff #10 #14)
#77 := (~ #31 #76)
#15 := (not #14)
#72 := (~ #15 #71)
#73 := [sk]: #72
#65 := (~ #14 #14)
#61 := (~ #13 #13)
#62 := [refl]: #61
#66 := [nnf-pos #62]: #65
#11 := (not #10)
#63 := (~ #11 #14)
#64 := [nnf-neg #62]: #63
#59 := (~ #10 #58)
#60 := [sk]: #59
#78 := [nnf-pos #60 #64 #66 #73]: #77
#12 := (not #11)
#16 := (iff #12 #15)
#17 := (not #16)
#34 := (iff #17 #31)
#25 := (iff #10 #15)
#28 := (not #25)
#32 := (iff #28 #31)
#33 := [rewrite]: #32
#29 := (iff #17 #28)
#26 := (iff #16 #25)
#23 := (iff #12 #10)
#24 := [rewrite]: #23
#27 := [monotonicity #24]: #26
#30 := [monotonicity #27]: #29
#35 := [trans #30 #33]: #34
#19 := [asserted]: #17
#36 := [mp #19 #35]: #31
#79 := [mp~ #36 #78]: #76
#80 := [mp #79 #91]: #89
#81 := [and-elim #80]: #14
#516 := [mp #81 #515]: #511
#181 := (not #511)
#95 := (or #181 #93)
#182 := [quant-inst #56]: #95
#94 := [unit-resolution #182 #516 #180]: false
#173 := [lemma #94]: #93
#92 := [and-elim #80]: #86
#184 := [unit-resolution #92 #173]: #69
#186 := (or #181 #70)
#183 := [quant-inst #67]: #186
[unit-resolution #183 #516 #184]: false
6922ad0f6e3b3d7df4f6fe17773064fca3f13ce2 98 0
WARNING: failed to find a pattern for quantifier (quantifier id: k!16)
unsat
#2 := false
decl f3 :: (-> S2 S3 S4 S5 S6)
decl f6 :: (-> S8 S4 S5)
decl ?v2!1 :: (-> S3 S4)
#63 := (:var 1 S3)
#64 := (?v2!1 #63)
decl f7 :: (-> S9 S2 S8)
decl ?v0!0 :: S2
#48 := ?v0!0
decl f8 :: S9
#14 := f8
#51 := (f7 f8 ?v0!0)
#66 := (f6 #51 #64)
decl f4 :: (-> S7 S2 S3)
decl f5 :: S7
#12 := f5
#50 := (f4 f5 ?v0!0)
#67 := (f3 ?v0!0 #50 #64 #66)
#10 := (:var 0 S5)
#65 := (f3 ?v0!0 #63 #64 #10)
#68 := (= #65 #67)
#61 := (not #68)
#88 := (forall (vars (?v1 S3) (?v3 S5)) #61)
#502 := (not #88)
#192 := (?v2!1 #50)
#471 := (f6 #51 #192)
#169 := (f3 ?v0!0 #50 #192 #471)
#131 := (= #169 #169)
#310 := (not #131)
#323 := (or #502 #310)
#304 := (iff #323 #502)
#300 := (or #502 false)
#303 := (iff #300 #502)
#286 := [rewrite]: #303
#301 := (iff #323 #300)
#422 := (iff #310 false)
#1 := true
#490 := (not true)
#325 := (iff #490 false)
#420 := [rewrite]: #325
#203 := (iff #310 #490)
#452 := (iff #131 true)
#477 := [rewrite]: #452
#440 := [monotonicity #477]: #203
#307 := [trans #440 #420]: #422
#302 := [monotonicity #307]: #301
#274 := [trans #302 #286]: #304
#299 := [quant-inst #50 #471]: #323
#275 := [mp #299 #274]: #502
#75 := (forall (vars (?v3 S5)) #61)
#80 := (forall (vars (?v1 S3)) #75)
#89 := (iff #80 #88)
#90 := [pull-quant]: #89
#9 := (:var 1 S4)
#7 := (:var 3 S2)
#15 := (f7 f8 #7)
#16 := (f6 #15 #9)
#13 := (f4 f5 #7)
#17 := (f3 #7 #13 #9 #16)
#8 := (:var 2 S3)
#11 := (f3 #7 #8 #9 #10)
#18 := (= #11 #17)
#19 := (exists (vars (?v3 S5)) #18)
#20 := (forall (vars (?v2 S4)) #19)
#21 := (exists (vars (?v1 S3)) #20)
#22 := (forall (vars (?v0 S2)) #21)
#23 := (not #22)
#83 := (~ #23 #80)
#52 := (f6 #51 #9)
#53 := (f3 ?v0!0 #50 #9 #52)
#49 := (f3 ?v0!0 #8 #9 #10)
#54 := (= #49 #53)
#55 := (exists (vars (?v3 S5)) #54)
#56 := (forall (vars (?v2 S4)) #55)
#57 := (exists (vars (?v1 S3)) #56)
#58 := (not #57)
#81 := (~ #58 #80)
#71 := (not #56)
#78 := (~ #71 #75)
#69 := (exists (vars (?v3 S5)) #68)
#70 := (not #69)
#76 := (~ #70 #75)
#62 := (~ #61 #61)
#74 := [refl]: #62
#77 := [nnf-neg #74]: #76
#72 := (~ #71 #70)
#73 := [sk]: #72
#79 := [trans #73 #77]: #78
#82 := [nnf-neg #79]: #81
#59 := (~ #23 #58)
#60 := [sk]: #59
#84 := [trans #60 #82]: #83
#25 := [asserted]: #23
#85 := [mp~ #25 #84]: #80
#86 := [mp #85 #90]: #88
[unit-resolution #86 #275]: false
5766ec783f34908a29512d5f77d60ab824e52afb 67 0
unsat
#2 := false
decl f4 :: (-> S4 S2 S3)
#10 := (:var 1 S2)
decl f5 :: (-> S5 S2 S4)
decl f6 :: S5
#16 := f6
#17 := (f5 f6 #10)
#18 := (f4 #17 #10)
#15 := (:var 0 S3)
#19 := (= #15 #18)
#20 := (not #19)
#21 := (or #19 #20)
#22 := (forall (vars (?v1 S3)) #21)
#7 := (:var 0 S2)
#11 := (= #7 #10)
#12 := (not #11)
#13 := (or #11 #12)
#14 := (forall (vars (?v1 S2)) #13)
decl f3 :: S2
#8 := f3
#9 := (= #7 f3)
#23 := (if #9 #14 #22)
#24 := (exists (vars (?v0 S2)) #23)
#25 := (not #24)
#68 := (iff #25 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #25 #63)
#61 := (iff #24 true)
#56 := (exists (vars (?v0 S2)) true)
#59 := (iff #56 true)
#60 := [elim-unused]: #59
#57 := (iff #24 #56)
#54 := (iff #23 true)
#49 := (if #9 true true)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #23 #49)
#47 := (iff #22 true)
#42 := (forall (vars (?v1 S3)) true)
#45 := (iff #42 true)
#46 := [elim-unused]: #45
#43 := (iff #22 #42)
#40 := (iff #21 true)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#48 := [trans #44 #46]: #47
#38 := (iff #14 true)
#33 := (forall (vars (?v1 S2)) true)
#36 := (iff #33 true)
#37 := [elim-unused]: #36
#34 := (iff #14 #33)
#31 := (iff #13 true)
#32 := [rewrite]: #31
#35 := [quant-intro #32]: #34
#39 := [trans #35 #37]: #38
#51 := [monotonicity #39 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [quant-intro #55]: #57
#62 := [trans #58 #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#27 := [asserted]: #25
[mp #27 #69]: false
d50ade7a66202a86d82309f756df6dcdc43ac7f2 64 0
unsat
#2 := false
decl f4 :: (-> S4 S2 S3)
#10 := (:var 1 S2)
decl f5 :: (-> S5 S2 S4)
decl f6 :: S5
#16 := f6
#17 := (f5 f6 #10)
#18 := (f4 #17 #10)
#15 := (:var 0 S3)
#19 := (= #15 #18)
#20 := (not #19)
#21 := (or #19 #20)
#22 := (exists (vars (?v1 S3)) #21)
#7 := (:var 0 S2)
#11 := (= #7 #10)
#12 := (not #11)
#13 := (or #11 #12)
#14 := (exists (vars (?v1 S2)) #13)
decl f3 :: S2
#8 := f3
#9 := (= #7 f3)
#23 := (if #9 #14 #22)
#24 := (exists (vars (?v0 S2)) #23)
#25 := (not #24)
#65 := (iff #25 false)
#1 := true
#60 := (not true)
#63 := (iff #60 false)
#64 := [rewrite]: #63
#61 := (iff #25 #60)
#58 := (iff #24 true)
#33 := (exists (vars (?v1 S2)) true)
#36 := (iff #33 true)
#37 := [elim-unused]: #36
#56 := (iff #24 #33)
#54 := (iff #23 true)
#49 := (if #9 true true)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #23 #49)
#47 := (iff #22 true)
#42 := (exists (vars (?v1 S3)) true)
#45 := (iff #42 true)
#46 := [elim-unused]: #45
#43 := (iff #22 #42)
#40 := (iff #21 true)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#48 := [trans #44 #46]: #47
#38 := (iff #14 true)
#34 := (iff #14 #33)
#31 := (iff #13 true)
#32 := [rewrite]: #31
#35 := [quant-intro #32]: #34
#39 := [trans #35 #37]: #38
#51 := [monotonicity #39 #48]: #50
#55 := [trans #51 #53]: #54
#57 := [quant-intro #55]: #56
#59 := [trans #57 #37]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#27 := [asserted]: #25
[mp #27 #66]: false
d9ff4d0f7d0f6b7f97a94ecc044fa5ef73c485d9 154 0
unsat
#2 := false
decl f3 :: (-> S2 S1)
#10 := (:var 0 S2)
#11 := (f3 #10)
#524 := (pattern #11)
decl f1 :: S1
#3 := f1
#12 := (= #11 f1)
#74 := (not #12)
#540 := (forall (vars (?v0 S2)) (:pat #524) #74)
decl ?v0!2 :: S2
#92 := ?v0!2
#93 := (f3 ?v0!2)
#94 := (= #93 f1)
decl ?v0!0 :: S2
#63 := ?v0!0
#64 := (f3 ?v0!0)
#65 := (= #64 f1)
#105 := (iff #65 #94)
#513 := (not #105)
#521 := [hypothesis]: #513
#66 := (iff #65 #12)
#525 := (forall (vars (?v1 S2)) (:pat #524) #66)
#60 := (forall (vars (?v1 S2)) #66)
#528 := (iff #60 #525)
#526 := (iff #66 #66)
#527 := [refl]: #526
#529 := [quant-intro #527]: #528
#7 := (:var 1 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#13 := (iff #9 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (exists (vars (?v0 S2)) #14)
#61 := (~ #15 #60)
#70 := (~ #60 #60)
#68 := (~ #66 #66)
#69 := [refl]: #68
#71 := [nnf-pos #69]: #70
#67 := [sk]: #61
#72 := [trans #67 #71]: #61
#17 := (forall (vars (?v0 S2)) #12)
#16 := (exists (vars (?v0 S2)) #12)
#18 := (iff #16 #17)
#26 := (not #15)
#27 := (or #26 #18)
#30 := (not #27)
#19 := (implies #15 #18)
#20 := (not #19)
#31 := (iff #20 #30)
#28 := (iff #19 #27)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#22 := [asserted]: #20
#33 := [mp #22 #32]: #30
#34 := [not-or-elim #33]: #15
#73 := [mp~ #34 #72]: #60
#530 := [mp #73 #529]: #525
#195 := (not #525)
#517 := (or #195 #105)
#523 := [quant-inst #92]: #517
#522 := [unit-resolution #523 #530 #521]: false
#505 := [lemma #522]: #105
#500 := (or #513 #94)
#200 := (not #65)
#109 := [hypothesis]: #200
#531 := (forall (vars (?v0 S2)) (:pat #524) #12)
decl ?v0!1 :: S2
#80 := ?v0!1
#81 := (f3 ?v0!1)
#82 := (= #81 f1)
#187 := (not #82)
#196 := (or #65 #187)
#194 := (iff #65 #82)
#186 := (not #194)
#106 := [hypothesis]: #186
#512 := (or #195 #194)
#185 := [quant-inst #80]: #512
#305 := [unit-resolution #185 #530 #106]: false
#514 := [lemma #305]: #194
#198 := (or #186 #65 #187)
#199 := [def-axiom]: #198
#164 := [unit-resolution #199 #514]: #196
#501 := [unit-resolution #164 #109]: #187
#536 := (or #82 #531)
#100 := (or #82 #17)
#537 := (iff #100 #536)
#534 := (iff #17 #531)
#532 := (iff #12 #12)
#533 := [refl]: #532
#535 := [quant-intro #533]: #534
#538 := [monotonicity #535]: #537
#95 := (not #94)
#77 := (forall (vars (?v0 S2)) #74)
#99 := (or #77 #95)
#101 := (and #100 #99)
#56 := (not #16)
#57 := (iff #56 #17)
#102 := (~ #57 #101)
#96 := (not #17)
#97 := (~ #96 #95)
#98 := [sk]: #97
#90 := (~ #17 #17)
#88 := (~ #12 #12)
#89 := [refl]: #88
#91 := [nnf-pos #89]: #90
#85 := (not #56)
#86 := (~ #85 #82)
#83 := (~ #16 #82)
#84 := [sk]: #83
#87 := [nnf-neg #84]: #86
#78 := (~ #56 #77)
#75 := (~ #74 #74)
#76 := [refl]: #75
#79 := [nnf-neg #76]: #78
#103 := [nnf-pos #79 #87 #91 #98]: #102
#35 := (not #18)
#58 := (iff #35 #57)
#59 := [rewrite]: #58
#36 := [not-or-elim #33]: #35
#62 := [mp #36 #59]: #57
#104 := [mp~ #62 #103]: #101
#107 := [and-elim #104]: #100
#539 := [mp #107 #538]: #536
#502 := [unit-resolution #539 #501]: #531
#157 := (not #531)
#499 := (or #157 #65)
#161 := [quant-inst #63]: #499
#503 := [unit-resolution #161 #502 #109]: false
#504 := [lemma #503]: #65
#173 := (or #513 #200 #94)
#515 := [def-axiom]: #173
#506 := [unit-resolution #515 #504]: #500
#510 := [unit-resolution #506 #505]: #94
#545 := (or #540 #95)
#546 := (iff #99 #545)
#543 := (iff #77 #540)
#541 := (iff #74 #74)
#542 := [refl]: #541
#544 := [quant-intro #542]: #543
#547 := [monotonicity #544]: #546
#108 := [and-elim #104]: #99
#548 := [mp #108 #547]: #545
#508 := [unit-resolution #548 #510]: #540
#511 := (or #200 #82)
#197 := (or #186 #200 #82)
#201 := [def-axiom]: #197
#497 := [unit-resolution #201 #514]: #511
#498 := [unit-resolution #497 #504]: #82
#143 := (not #540)
#507 := (or #143 #187)
#509 := [quant-inst #80]: #507
[unit-resolution #509 #498 #508]: false
d534bf4d94631425253e66e919c95e7c6095820e 91 0
unsat
#2 := false
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#501 := (pattern #8)
decl f1 :: S1
#3 := f1
decl ?v1!0 :: S2
#52 := ?v1!0
#53 := (f3 ?v1!0)
#54 := (= #53 f1)
#9 := (= #8 f1)
#19 := (not #9)
#68 := (or #19 #54)
#77 := (not #68)
#502 := (forall (vars (?v0 S2)) (:pat #501) #77)
#178 := (not #502)
#55 := (not #54)
#493 := (or #55 #54)
#282 := (not #493)
#138 := (or #178 #282)
#481 := (iff #138 #178)
#140 := (or #178 false)
#479 := (iff #140 #178)
#480 := [rewrite]: #479
#141 := (iff #138 #140)
#134 := (iff #282 false)
#1 := true
#149 := (not true)
#150 := (iff #149 false)
#492 := [rewrite]: #150
#154 := (iff #282 #149)
#500 := (iff #493 true)
#490 := [rewrite]: #500
#491 := [monotonicity #490]: #154
#476 := [trans #491 #492]: #134
#478 := [monotonicity #476]: #141
#482 := [trans #478 #480]: #481
#139 := [quant-inst #52]: #138
#477 := [mp #139 #482]: #178
#80 := (forall (vars (?v0 S2)) #77)
#505 := (iff #80 #502)
#503 := (iff #77 #77)
#504 := [refl]: #503
#506 := [quant-intro #504]: #505
#71 := (and #9 #55)
#74 := (forall (vars (?v0 S2)) #71)
#81 := (iff #74 #80)
#78 := (iff #71 #77)
#79 := [rewrite]: #78
#82 := [quant-intro #79]: #81
#49 := (not #19)
#59 := (and #49 #55)
#63 := (forall (vars (?v0 S2)) #59)
#75 := (iff #63 #74)
#72 := (iff #59 #71)
#69 := (iff #49 #9)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#76 := [quant-intro #73]: #75
#10 := (forall (vars (?v1 S2)) #9)
#20 := (or #19 #10)
#23 := (exists (vars (?v0 S2)) #20)
#26 := (not #23)
#64 := (~ #26 #63)
#60 := (not #20)
#61 := (~ #60 #59)
#56 := (not #10)
#57 := (~ #56 #55)
#58 := [sk]: #57
#50 := (~ #49 #49)
#51 := [refl]: #50
#62 := [nnf-neg #51 #58]: #61
#65 := [nnf-neg #62]: #64
#11 := (implies #9 #10)
#12 := (exists (vars (?v0 S2)) #11)
#13 := (not #12)
#27 := (iff #13 #26)
#24 := (iff #12 #23)
#21 := (iff #11 #20)
#22 := [rewrite]: #21
#25 := [quant-intro #22]: #24
#28 := [monotonicity #25]: #27
#15 := [asserted]: #13
#29 := [mp #15 #28]: #26
#66 := [mp~ #29 #65]: #63
#67 := [mp #66 #76]: #74
#83 := [mp #67 #82]: #80
#507 := [mp #83 #506]: #502
[unit-resolution #507 #477]: false
d77b8725117f9972715128acd88585ba586b4971 86 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S3 S2 S1)
decl ?v0!0 :: S2
#60 := ?v0!0
decl ?v0!1 :: S3
#68 := ?v0!1
#149 := (f3 ?v0!1 ?v0!0)
#493 := (= #149 f1)
#499 := (not #493)
#14 := (:var 0 S2)
#69 := (f3 ?v0!1 #14)
#508 := (pattern #69)
#70 := (= #69 f1)
#75 := (not #70)
#509 := (forall (vars (?v1 S2)) (:pat #508) #75)
#78 := (forall (vars (?v1 S2)) #75)
#512 := (iff #78 #509)
#510 := (iff #75 #75)
#511 := [refl]: #510
#513 := [quant-intro #511]: #512
#13 := (:var 1 S3)
#15 := (f3 #13 #14)
#16 := (= #15 f1)
#17 := (exists (vars (?v1 S2)) #16)
#18 := (forall (vars (?v0 S3)) #17)
#35 := (not #18)
#81 := (~ #35 #78)
#71 := (exists (vars (?v1 S2)) #70)
#72 := (not #71)
#79 := (~ #72 #78)
#76 := (~ #75 #75)
#77 := [refl]: #76
#80 := [nnf-neg #77]: #79
#73 := (~ #35 #72)
#74 := [sk]: #73
#82 := [trans #74 #80]: #81
#8 := (:var 1 S2)
#7 := (:var 0 S3)
#9 := (f3 #7 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v1 S3)) #10)
#12 := (exists (vars (?v0 S2)) #11)
#26 := (not #12)
#27 := (or #26 #18)
#30 := (not #27)
#19 := (implies #12 #18)
#20 := (not #19)
#31 := (iff #20 #30)
#28 := (iff #19 #27)
#29 := [rewrite]: #28
#32 := [monotonicity #29]: #31
#22 := [asserted]: #20
#33 := [mp #22 #32]: #30
#36 := [not-or-elim #33]: #35
#83 := [mp~ #36 #82]: #78
#514 := [mp #83 #513]: #509
#150 := (not #509)
#492 := (or #150 #499)
#134 := [quant-inst #60]: #492
#154 := [unit-resolution #134 #514]: #499
#61 := (f3 #7 ?v0!0)
#501 := (pattern #61)
#56 := (= #61 f1)
#502 := (forall (vars (?v1 S3)) (:pat #501) #56)
#57 := (forall (vars (?v1 S3)) #56)
#505 := (iff #57 #502)
#503 := (iff #56 #56)
#504 := [refl]: #503
#506 := [quant-intro #504]: #505
#58 := (~ #12 #57)
#64 := (~ #57 #57)
#62 := (~ #56 #56)
#63 := [refl]: #62
#65 := [nnf-pos #63]: #64
#59 := [sk]: #58
#66 := [trans #59 #65]: #58
#34 := [not-or-elim #33]: #12
#67 := [mp~ #34 #66]: #57
#507 := [mp #67 #506]: #502
#489 := (not #502)
#476 := (or #489 #493)
#138 := [quant-inst #68]: #476
[unit-resolution #138 #507 #154]: false
9638ce96f32e5b3c45238a3f152e07fc20508886 86 0
unsat
#2 := false
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#516 := (pattern #8)
decl f1 :: S1
#3 := f1
#9 := (= #8 f1)
#24 := (not #9)
#523 := (forall (vars (?v0 S2)) (:pat #516) #24)
#95 := (forall (vars (?v0 S2)) #24)
#526 := (iff #95 #523)
#524 := (iff #24 #24)
#525 := [refl]: #524
#527 := [quant-intro #525]: #526
#16 := (exists (vars (?v0 S2)) #9)
#51 := (not #16)
#96 := (~ #51 #95)
#91 := (~ #24 #24)
#92 := [refl]: #91
#97 := [nnf-neg #92]: #96
#10 := (:var 1 S2)
#11 := (= #7 #10)
#25 := (or #24 #11)
#28 := (forall (vars (?v1 S2)) #25)
#31 := (and #9 #28)
#34 := (exists (vars (?v0 S2)) #31)
#40 := (not #34)
#41 := (or #40 #16)
#46 := (not #41)
#12 := (implies #9 #11)
#13 := (forall (vars (?v1 S2)) #12)
#14 := (and #9 #13)
#15 := (exists (vars (?v0 S2)) #14)
#17 := (implies #15 #16)
#18 := (not #17)
#47 := (iff #18 #46)
#44 := (iff #17 #41)
#37 := (implies #34 #16)
#42 := (iff #37 #41)
#43 := [rewrite]: #42
#38 := (iff #17 #37)
#35 := (iff #15 #34)
#32 := (iff #14 #31)
#29 := (iff #13 #28)
#26 := (iff #12 #25)
#27 := [rewrite]: #26
#30 := [quant-intro #27]: #29
#33 := [monotonicity #30]: #32
#36 := [quant-intro #33]: #35
#39 := [monotonicity #36]: #38
#45 := [trans #39 #43]: #44
#48 := [monotonicity #45]: #47
#20 := [asserted]: #18
#49 := [mp #20 #48]: #46
#52 := [not-or-elim #49]: #51
#98 := [mp~ #52 #97]: #95
#528 := [mp #98 #527]: #523
decl ?v0!0 :: S2
#76 := ?v0!0
#77 := (f3 ?v0!0)
#72 := (= #77 f1)
#73 := (= #7 ?v0!0)
#74 := (or #24 #73)
#75 := (forall (vars (?v1 S2)) #74)
#78 := (and #72 #75)
#79 := (~ #34 #78)
#87 := (~ #78 #78)
#85 := (~ #75 #75)
#83 := (~ #74 #74)
#84 := [refl]: #83
#86 := [nnf-pos #84]: #85
#81 := (~ #72 #72)
#82 := [refl]: #81
#88 := [monotonicity #82 #86]: #87
#80 := [sk]: #79
#89 := [trans #80 #88]: #79
#50 := [not-or-elim #49]: #34
#90 := [mp~ #50 #89]: #78
#93 := [and-elim #90]: #72
#99 := (not #72)
#187 := (not #523)
#101 := (or #187 #99)
#188 := [quant-inst #76]: #101
[unit-resolution #188 #93 #528]: false
b5293938cecaf4bb094f82623a01427d239246df 362 0
unsat
#2 := false
decl ?v0!1 :: S2
#104 := ?v0!1
decl ?v1!0 :: (-> S2 S2)
#513 := (?v1!0 ?v0!1)
#522 := (= #513 ?v0!1)
#494 := (not #522)
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#509 := (f3 #513)
#514 := (= #509 f1)
#521 := (not #514)
#520 := (or #521 #522)
#516 := (not #520)
#7 := (:var 0 S2)
#8 := (f3 #7)
#602 := (pattern #8)
#87 := (?v1!0 #7)
#91 := (= #87 #7)
#88 := (f3 #87)
#89 := (= #88 f1)
#90 := (not #89)
#92 := (or #90 #91)
#93 := (not #92)
#9 := (= #8 f1)
#17 := (not #9)
#97 := (or #17 #93)
#635 := (forall (vars (?v0 S2)) (:pat #602) #97)
decl ?v1!3 :: (-> S2 S2)
#143 := (?v1!3 #7)
#145 := (f3 #143)
#146 := (= #145 f1)
#147 := (not #146)
#144 := (= #143 #7)
#148 := (or #144 #147)
#149 := (not #148)
#153 := (or #17 #149)
#640 := (forall (vars (?v0 S2)) (:pat #602) #153)
#286 := (not #640)
#554 := (?v1!3 ?v0!1)
#538 := (f3 #554)
#539 := (= #538 f1)
#541 := (not #539)
#555 := (= #554 ?v0!1)
#542 := (or #555 #541)
#540 := (not #542)
#530 := [hypothesis]: #540
#439 := (or #542 #539)
#440 := [def-axiom]: #439
#519 := [unit-resolution #440 #530]: #539
#437 := (not #555)
#438 := (or #542 #437)
#431 := [def-axiom]: #438
#500 := [unit-resolution #431 #530]: #437
#107 := (= #7 ?v0!1)
#108 := (or #17 #107)
#603 := (forall (vars (?v1 S2)) (:pat #602) #108)
#608 := (not #603)
#105 := (f3 ?v0!1)
#106 := (= #105 f1)
#167 := (not #106)
#611 := (or #167 #608)
#614 := (not #611)
decl ?v0!2 :: S2
#125 := ?v0!2
#128 := (= #7 ?v0!2)
#129 := (or #128 #17)
#617 := (forall (vars (?v1 S2)) (:pat #602) #129)
#622 := (not #617)
#126 := (f3 ?v0!2)
#127 := (= #126 f1)
#175 := (not #127)
#625 := (or #175 #622)
#572 := (?v1!3 ?v0!2)
#589 := (f3 #572)
#575 := (= #589 f1)
#586 := (not #575)
#294 := (= #572 ?v0!2)
#576 := (or #294 #586)
#283 := (not #576)
#601 := (not #635)
#258 := (?v1!0 ?v0!2)
#383 := (= #258 ?v0!2)
#594 := (f3 #258)
#596 := (= #594 f1)
#252 := (not #596)
#590 := (or #252 #383)
#628 := (not #625)
#545 := [hypothesis]: #628
#277 := (or #625 #617)
#278 := [def-axiom]: #277
#551 := [unit-resolution #278 #545]: #617
#570 := (or #590 #622)
#593 := (not #383)
#263 := (not #590)
#227 := [hypothesis]: #263
#235 := (or #590 #593)
#577 := [def-axiom]: #235
#588 := [unit-resolution #577 #227]: #593
#592 := (or #590 #596)
#251 := [def-axiom]: #592
#295 := [unit-resolution #251 #227]: #596
#569 := [hypothesis]: #617
#242 := (or #622 #383 #252)
#597 := (or #383 #252)
#579 := (or #622 #597)
#581 := (iff #579 #242)
#582 := [rewrite]: #581
#580 := [quant-inst #258]: #579
#583 := [mp #580 #582]: #242
#573 := [unit-resolution #583 #569 #295 #588]: false
#574 := [lemma #573]: #570
#426 := [unit-resolution #574 #551]: #590
#265 := (or #625 #127)
#276 := [def-axiom]: #265
#427 := [unit-resolution #276 #545]: #127
#600 := (or #601 #175 #263)
#599 := [hypothesis]: #590
#595 := [hypothesis]: #635
#301 := [hypothesis]: #127
#264 := (or #175 #263)
#591 := (or #601 #264)
#255 := (iff #591 #600)
#299 := [rewrite]: #255
#250 := [quant-inst #125]: #591
#300 := [mp #250 #299]: #600
#193 := [unit-resolution #300 #301 #595 #599]: false
#571 := [lemma #193]: #600
#386 := [unit-resolution #571 #427 #426]: #601
#645 := (or #635 #640)
#157 := (forall (vars (?v0 S2)) #153)
#101 := (forall (vars (?v0 S2)) #97)
#161 := (or #101 #157)
#646 := (iff #161 #645)
#643 := (iff #157 #640)
#641 := (iff #153 #153)
#642 := [refl]: #641
#644 := [quant-intro #642]: #643
#638 := (iff #101 #635)
#636 := (iff #97 #97)
#637 := [refl]: #636
#639 := [quant-intro #637]: #638
#647 := [monotonicity #639 #644]: #646
#130 := (forall (vars (?v1 S2)) #129)
#131 := (and #127 #130)
#109 := (forall (vars (?v1 S2)) #108)
#110 := (and #106 #109)
#162 := (or #110 #131)
#163 := (and #162 #161)
#10 := (:var 1 S2)
#11 := (= #7 #10)
#41 := (or #11 #17)
#44 := (forall (vars (?v1 S2)) #41)
#47 := (and #9 #44)
#50 := (exists (vars (?v0 S2)) #47)
#29 := (or #17 #11)
#32 := (forall (vars (?v1 S2)) #29)
#35 := (and #9 #32)
#38 := (exists (vars (?v0 S2)) #35)
#59 := (not #38)
#60 := (iff #59 #50)
#164 := (~ #60 #163)
#158 := (not #50)
#159 := (~ #158 #157)
#154 := (not #47)
#155 := (~ #154 #153)
#150 := (not #44)
#151 := (~ #150 #149)
#152 := [sk]: #151
#85 := (~ #17 #17)
#86 := [refl]: #85
#156 := [nnf-neg #86 #152]: #155
#160 := [nnf-neg #156]: #159
#132 := (~ #50 #131)
#140 := (~ #131 #131)
#138 := (~ #130 #130)
#136 := (~ #129 #129)
#137 := [refl]: #136
#139 := [nnf-pos #137]: #138
#134 := (~ #127 #127)
#135 := [refl]: #134
#141 := [monotonicity #135 #139]: #140
#133 := [sk]: #132
#142 := [trans #133 #141]: #132
#122 := (not #59)
#123 := (~ #122 #110)
#111 := (~ #38 #110)
#119 := (~ #110 #110)
#117 := (~ #109 #109)
#115 := (~ #108 #108)
#116 := [refl]: #115
#118 := [nnf-pos #116]: #117
#113 := (~ #106 #106)
#114 := [refl]: #113
#120 := [monotonicity #114 #118]: #119
#112 := [sk]: #111
#121 := [trans #112 #120]: #111
#124 := [nnf-neg #121]: #123
#102 := (~ #59 #101)
#98 := (not #35)
#99 := (~ #98 #97)
#94 := (not #32)
#95 := (~ #94 #93)
#96 := [sk]: #95
#100 := [nnf-neg #86 #96]: #99
#103 := [nnf-neg #100]: #102
#165 := [nnf-pos #103 #124 #142 #160]: #164
#16 := (not #11)
#18 := (implies #16 #17)
#19 := (forall (vars (?v1 S2)) #18)
#20 := (and #9 #19)
#21 := (exists (vars (?v0 S2)) #20)
#12 := (implies #9 #11)
#13 := (forall (vars (?v1 S2)) #12)
#14 := (and #9 #13)
#15 := (exists (vars (?v0 S2)) #14)
#22 := (iff #15 #21)
#23 := (not #22)
#63 := (iff #23 #60)
#53 := (iff #38 #50)
#56 := (not #53)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #23 #56)
#54 := (iff #22 #53)
#51 := (iff #21 #50)
#48 := (iff #20 #47)
#45 := (iff #19 #44)
#42 := (iff #18 #41)
#43 := [rewrite]: #42
#46 := [quant-intro #43]: #45
#49 := [monotonicity #46]: #48
#52 := [quant-intro #49]: #51
#39 := (iff #15 #38)
#36 := (iff #14 #35)
#33 := (iff #13 #32)
#30 := (iff #12 #29)
#31 := [rewrite]: #30
#34 := [quant-intro #31]: #33
#37 := [monotonicity #34]: #36
#40 := [quant-intro #37]: #39
#55 := [monotonicity #40 #52]: #54
#58 := [monotonicity #55]: #57
#64 := [trans #58 #62]: #63
#25 := [asserted]: #23
#65 := [mp #25 #64]: #60
#166 := [mp~ #65 #165]: #163
#170 := [and-elim #166]: #161
#648 := [mp #170 #647]: #645
#534 := [unit-resolution #648 #386]: #640
#287 := (or #286 #175 #283)
#298 := (or #175 #283)
#565 := (or #286 #298)
#280 := (iff #565 #287)
#563 := [rewrite]: #280
#566 := [quant-inst #125]: #565
#567 := [mp #566 #563]: #287
#436 := [unit-resolution #567 #427 #534]: #283
#558 := (or #576 #575)
#559 := [def-axiom]: #558
#531 := [unit-resolution #559 #436]: #575
#564 := (not #294)
#568 := (or #576 #564)
#557 := [def-axiom]: #568
#532 := [unit-resolution #557 #436]: #564
#560 := (or #622 #294 #586)
#561 := (or #622 #576)
#562 := (iff #561 #560)
#403 := [rewrite]: #562
#556 := [quant-inst #572]: #561
#404 := [mp #556 #403]: #560
#535 := [unit-resolution #404 #551 #532 #531]: false
#420 := [lemma #535]: #625
#631 := (or #614 #628)
#176 := (not #130)
#177 := (or #175 #176)
#178 := (not #177)
#168 := (not #109)
#171 := (or #167 #168)
#172 := (not #171)
#181 := (or #172 #178)
#632 := (iff #181 #631)
#629 := (iff #178 #628)
#626 := (iff #177 #625)
#623 := (iff #176 #622)
#620 := (iff #130 #617)
#618 := (iff #129 #129)
#619 := [refl]: #618
#621 := [quant-intro #619]: #620
#624 := [monotonicity #621]: #623
#627 := [monotonicity #624]: #626
#630 := [monotonicity #627]: #629
#615 := (iff #172 #614)
#612 := (iff #171 #611)
#609 := (iff #168 #608)
#606 := (iff #109 #603)
#604 := (iff #108 #108)
#605 := [refl]: #604
#607 := [quant-intro #605]: #606
#610 := [monotonicity #607]: #609
#613 := [monotonicity #610]: #612
#616 := [monotonicity #613]: #615
#633 := [monotonicity #616 #630]: #632
#182 := (iff #162 #181)
#179 := (iff #131 #178)
#180 := [rewrite]: #179
#173 := (iff #110 #172)
#174 := [rewrite]: #173
#183 := [monotonicity #174 #180]: #182
#169 := [and-elim #166]: #162
#184 := [mp #169 #183]: #181
#634 := [mp #184 #633]: #631
#501 := [unit-resolution #634 #420]: #614
#186 := (or #611 #603)
#273 := [def-axiom]: #186
#503 := [unit-resolution #273 #501]: #603
#536 := (or #608 #541 #555)
#425 := (or #541 #555)
#533 := (or #608 #425)
#524 := (iff #533 #536)
#526 := [rewrite]: #524
#537 := [quant-inst #554]: #533
#518 := [mp #537 #526]: #536
#504 := [unit-resolution #518 #503 #500 #519]: false
#505 := [lemma #504]: #542
#552 := [hypothesis]: #640
#185 := (or #611 #106)
#272 := [def-axiom]: #185
#382 := [unit-resolution #272 #501]: #106
#553 := (or #286 #167 #540)
#543 := (or #167 #540)
#384 := (or #286 #543)
#435 := (iff #384 #553)
#508 := [rewrite]: #435
#385 := [quant-inst #104]: #384
#510 := [mp #385 #508]: #553
#511 := [unit-resolution #510 #382 #552 #505]: false
#512 := [lemma #511]: #286
#467 := [unit-resolution #648 #512]: #635
#506 := (or #601 #167 #516)
#523 := (or #167 #516)
#486 := (or #601 #523)
#489 := (iff #486 #506)
#490 := [rewrite]: #489
#487 := [quant-inst #104]: #486
#491 := [mp #487 #490]: #506
#468 := [unit-resolution #491 #382 #467]: #516
#495 := (or #520 #494)
#496 := [def-axiom]: #495
#457 := [unit-resolution #496 #468]: #494
#492 := (or #520 #514)
#493 := [def-axiom]: #492
#462 := [unit-resolution #493 #468]: #514
#488 := (or #608 #521 #522)
#499 := (or #608 #520)
#478 := (iff #499 #488)
#480 := [rewrite]: #478
#477 := [quant-inst #513]: #499
#481 := [mp #477 #480]: #488
[unit-resolution #481 #503 #462 #457]: false
96dbad9d0f21930a89355df3d0c25d735ace8a1e 140 0
unsat
#2 := false
decl f4 :: S2
#7 := f4
decl ?v1!0 :: (-> S2 S2)
#119 := (?v1!0 f4)
#121 := (= #119 f4)
#198 := (not #121)
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#206 := (f3 #119)
#120 := (= #206 f1)
#207 := (not #120)
#208 := (or #207 #121)
#199 := (not #208)
#10 := (:var 0 S2)
#11 := (f3 #10)
#536 := (pattern #11)
#95 := (?v1!0 #10)
#105 := (= #95 #10)
#102 := (f3 #95)
#103 := (= #102 f1)
#104 := (not #103)
#106 := (or #104 #105)
#107 := (not #106)
#12 := (= #11 f1)
#30 := (not #12)
#111 := (or #30 #107)
#543 := (forall (vars (?v0 S2)) (:pat #536) #111)
#115 := (forall (vars (?v0 S2)) #111)
#546 := (iff #115 #543)
#544 := (iff #111 #111)
#545 := [refl]: #544
#547 := [quant-intro #545]: #546
#16 := (:var 1 S2)
#17 := (= #10 #16)
#37 := (or #30 #17)
#40 := (forall (vars (?v1 S2)) #37)
#43 := (and #12 #40)
#46 := (exists (vars (?v0 S2)) #43)
#73 := (not #46)
#116 := (~ #73 #115)
#112 := (not #43)
#113 := (~ #112 #111)
#108 := (not #40)
#109 := (~ #108 #107)
#110 := [sk]: #109
#97 := (~ #30 #30)
#94 := [refl]: #97
#114 := [nnf-neg #94 #110]: #113
#117 := [nnf-neg #114]: #116
#13 := (= #10 f4)
#31 := (or #30 #13)
#34 := (forall (vars (?v0 S2)) #31)
#52 := (not #34)
#8 := (f3 f4)
#9 := (= #8 f1)
#61 := (not #9)
#62 := (or #61 #52 #46)
#67 := (not #62)
#18 := (implies #12 #17)
#19 := (forall (vars (?v1 S2)) #18)
#20 := (and #12 #19)
#21 := (exists (vars (?v0 S2)) #20)
#14 := (implies #12 #13)
#15 := (forall (vars (?v0 S2)) #14)
#22 := (implies #15 #21)
#23 := (implies #9 #22)
#24 := (not #23)
#68 := (iff #24 #67)
#65 := (iff #23 #62)
#53 := (or #52 #46)
#58 := (implies #9 #53)
#63 := (iff #58 #62)
#64 := [rewrite]: #63
#59 := (iff #23 #58)
#56 := (iff #22 #53)
#49 := (implies #34 #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #22 #49)
#47 := (iff #21 #46)
#44 := (iff #20 #43)
#41 := (iff #19 #40)
#38 := (iff #18 #37)
#39 := [rewrite]: #38
#42 := [quant-intro #39]: #41
#45 := [monotonicity #42]: #44
#48 := [quant-intro #45]: #47
#35 := (iff #15 #34)
#32 := (iff #14 #31)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#51 := [monotonicity #36 #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#66 := [trans #60 #64]: #65
#69 := [monotonicity #66]: #68
#26 := [asserted]: #24
#70 := [mp #26 #69]: #67
#74 := [not-or-elim #70]: #73
#118 := [mp~ #74 #117]: #115
#548 := [mp #118 #547]: #543
#71 := [not-or-elim #70]: #9
#209 := (not #543)
#213 := (or #209 #61 #199)
#210 := (or #61 #199)
#192 := (or #209 #210)
#530 := (iff #192 #213)
#186 := [rewrite]: #530
#528 := [quant-inst #7]: #192
#317 := [mp #528 #186]: #213
#176 := [unit-resolution #317 #71 #548]: #199
#531 := (or #208 #198)
#532 := [def-axiom]: #531
#513 := [unit-resolution #532 #176]: #198
#524 := (or #208 #120)
#197 := [def-axiom]: #524
#523 := [unit-resolution #197 #176]: #120
#537 := (forall (vars (?v0 S2)) (:pat #536) #31)
#540 := (iff #34 #537)
#538 := (iff #31 #31)
#539 := [refl]: #538
#541 := [quant-intro #539]: #540
#98 := (~ #34 #34)
#100 := (~ #31 #31)
#101 := [refl]: #100
#99 := [nnf-pos #101]: #98
#72 := [not-or-elim #70]: #34
#96 := [mp~ #72 #99]: #34
#542 := [mp #96 #541]: #537
#529 := (not #537)
#535 := (or #529 #207 #121)
#525 := (or #529 #208)
#189 := (iff #525 #535)
#526 := [rewrite]: #189
#184 := [quant-inst #119]: #525
#185 := [mp #184 #526]: #535
[unit-resolution #185 #542 #523 #513]: false
3973423ac9fa582b2790c4d37bd8bded688f8e45 170 0
unsat
#2 := false
decl ?v0!0 :: S2
#93 := ?v0!0
decl ?v1!1 :: (-> S2 S2)
#233 := (?v1!1 ?v0!0)
#235 := (= #233 ?v0!0)
#558 := (not #235)
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#147 := (f3 #233)
#234 := (= #147 f1)
#148 := (not #234)
#226 := (or #148 #235)
#237 := (not #226)
#7 := (:var 0 S2)
#8 := (f3 #7)
#570 := (pattern #8)
#104 := (?v1!1 #7)
#108 := (= #104 #7)
#105 := (f3 #104)
#106 := (= #105 f1)
#107 := (not #106)
#109 := (or #107 #108)
#110 := (not #109)
#9 := (= #8 f1)
#41 := (not #9)
#114 := (or #41 #110)
#571 := (forall (vars (?v0 S2)) (:pat #570) #114)
#118 := (forall (vars (?v0 S2)) #114)
#574 := (iff #118 #571)
#572 := (iff #114 #114)
#573 := [refl]: #572
#575 := [quant-intro #573]: #574
#11 := (:var 1 S2)
#19 := (= #7 #11)
#42 := (or #41 #19)
#45 := (forall (vars (?v1 S2)) #42)
#48 := (and #9 #45)
#51 := (exists (vars (?v0 S2)) #48)
#70 := (not #51)
#119 := (~ #70 #118)
#115 := (not #48)
#116 := (~ #115 #114)
#111 := (not #45)
#112 := (~ #111 #110)
#113 := [sk]: #112
#102 := (~ #41 #41)
#103 := [refl]: #102
#117 := [nnf-neg #103 #113]: #116
#120 := [nnf-neg #117]: #119
#15 := (= #11 #7)
#12 := (f3 #11)
#13 := (= #12 f1)
#14 := (and #13 #9)
#31 := (not #14)
#32 := (or #31 #15)
#35 := (forall (vars (?v0 S2) (?v1 S2)) #32)
#10 := (exists (vars (?v0 S2)) #9)
#38 := (and #10 #35)
#57 := (not #38)
#58 := (or #57 #51)
#63 := (not #58)
#20 := (implies #9 #19)
#21 := (forall (vars (?v1 S2)) #20)
#22 := (and #9 #21)
#23 := (exists (vars (?v0 S2)) #22)
#16 := (implies #14 #15)
#17 := (forall (vars (?v0 S2) (?v1 S2)) #16)
#18 := (and #10 #17)
#24 := (implies #18 #23)
#25 := (not #24)
#64 := (iff #25 #63)
#61 := (iff #24 #58)
#54 := (implies #38 #51)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #24 #54)
#52 := (iff #23 #51)
#49 := (iff #22 #48)
#46 := (iff #21 #45)
#43 := (iff #20 #42)
#44 := [rewrite]: #43
#47 := [quant-intro #44]: #46
#50 := [monotonicity #47]: #49
#53 := [quant-intro #50]: #52
#39 := (iff #18 #38)
#36 := (iff #17 #35)
#33 := (iff #16 #32)
#34 := [rewrite]: #33
#37 := [quant-intro #34]: #36
#40 := [monotonicity #37]: #39
#56 := [monotonicity #40 #53]: #55
#62 := [trans #56 #60]: #61
#65 := [monotonicity #62]: #64
#27 := [asserted]: #25
#66 := [mp #27 #65]: #63
#71 := [not-or-elim #66]: #70
#121 := [mp~ #71 #120]: #118
#576 := [mp #121 #575]: #571
#94 := (f3 ?v0!0)
#97 := (= #94 f1)
#98 := (~ #10 #97)
#95 := [sk]: #98
#67 := [not-or-elim #66]: #38
#68 := [and-elim #67]: #10
#96 := [mp~ #68 #95]: #97
#146 := (not #97)
#240 := (not #571)
#219 := (or #240 #146 #237)
#238 := (or #146 #237)
#555 := (or #240 #238)
#213 := (iff #555 #219)
#344 := [rewrite]: #213
#557 := [quant-inst #93]: #555
#551 := [mp #557 #344]: #219
#537 := [unit-resolution #551 #96 #576]: #237
#559 := (or #226 #558)
#560 := [def-axiom]: #559
#244 := [unit-resolution #560 #537]: #558
#224 := (or #226 #234)
#225 := [def-axiom]: #224
#533 := [unit-resolution #225 #537]: #234
#563 := (pattern #12 #8)
#122 := (not #13)
#137 := (or #122 #41 #15)
#564 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #563) #137)
#142 := (forall (vars (?v0 S2) (?v1 S2)) #137)
#567 := (iff #142 #564)
#565 := (iff #137 #137)
#566 := [refl]: #565
#568 := [quant-intro #566]: #567
#143 := (iff #35 #142)
#140 := (iff #32 #137)
#123 := (or #122 #41)
#134 := (or #123 #15)
#138 := (iff #134 #137)
#139 := [rewrite]: #138
#135 := (iff #32 #134)
#132 := (iff #31 #123)
#124 := (not #123)
#127 := (not #124)
#130 := (iff #127 #123)
#131 := [rewrite]: #130
#128 := (iff #31 #127)
#125 := (iff #14 #124)
#126 := [rewrite]: #125
#129 := [monotonicity #126]: #128
#133 := [trans #129 #131]: #132
#136 := [monotonicity #133]: #135
#141 := [trans #136 #139]: #140
#144 := [quant-intro #141]: #143
#99 := (~ #35 #35)
#91 := (~ #32 #32)
#92 := [refl]: #91
#100 := [nnf-pos #92]: #99
#69 := [and-elim #67]: #35
#101 := [mp~ #69 #100]: #35
#145 := [mp #101 #144]: #142
#569 := [mp #145 #568]: #564
#548 := (not #564)
#187 := (or #548 #148 #146 #235)
#554 := (or #148 #146 #235)
#188 := (or #548 #554)
#547 := (iff #188 #187)
#550 := [rewrite]: #547
#549 := [quant-inst #233 #93]: #188
#536 := [mp #549 #550]: #187
[unit-resolution #536 #96 #569 #533 #244]: false
d849c0627f2c781919ccff42a145d991899a7af1 169 0
unsat
#2 := false
decl ?v0!0 :: S2
#110 := ?v0!0
decl ?v1!1 :: (-> S2 S2)
#233 := (?v1!1 ?v0!0)
#235 := (= #233 ?v0!0)
#558 := (not #235)
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#149 := (f3 #233)
#234 := (= #149 f1)
#146 := (not #234)
#226 := (or #146 #235)
#237 := (not #226)
#7 := (:var 0 S2)
#8 := (f3 #7)
#563 := (pattern #8)
#129 := (?v1!1 #7)
#133 := (= #129 #7)
#130 := (f3 #129)
#131 := (= #130 f1)
#132 := (not #131)
#134 := (or #132 #133)
#135 := (not #134)
#9 := (= #8 f1)
#28 := (not #9)
#139 := (or #28 #135)
#570 := (forall (vars (?v0 S2)) (:pat #563) #139)
#142 := (forall (vars (?v0 S2)) #139)
#573 := (iff #142 #570)
#571 := (iff #139 #139)
#572 := [refl]: #571
#574 := [quant-intro #572]: #573
#10 := (:var 1 S2)
#11 := (= #7 #10)
#29 := (or #28 #11)
#32 := (forall (vars (?v1 S2)) #29)
#35 := (and #9 #32)
#44 := (not #35)
#102 := (forall (vars (?v0 S2)) #44)
#143 := (~ #102 #142)
#140 := (~ #44 #139)
#136 := (not #32)
#137 := (~ #136 #135)
#138 := [sk]: #137
#125 := (~ #28 #28)
#126 := [refl]: #125
#141 := [nnf-neg #126 #138]: #140
#144 := [nnf-pos #141]: #143
decl f4 :: S1
#16 := f4
#17 := (= f4 f1)
#45 := (or #44 #17)
#50 := (forall (vars (?v0 S2)) #45)
#103 := (iff #50 #102)
#100 := (iff #45 #44)
#93 := (or #44 false)
#98 := (iff #93 #44)
#99 := [rewrite]: #98
#94 := (iff #45 #93)
#95 := (iff #17 false)
#72 := (not #17)
#38 := (exists (vars (?v0 S2)) #35)
#53 := (and #38 #50)
#59 := (not #53)
#60 := (or #59 #17)
#65 := (not #60)
#12 := (implies #9 #11)
#13 := (forall (vars (?v1 S2)) #12)
#14 := (and #9 #13)
#18 := (implies #14 #17)
#19 := (forall (vars (?v0 S2)) #18)
#15 := (exists (vars (?v0 S2)) #14)
#20 := (and #15 #19)
#21 := (implies #20 #17)
#22 := (not #21)
#66 := (iff #22 #65)
#63 := (iff #21 #60)
#56 := (implies #53 #17)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #21 #56)
#54 := (iff #20 #53)
#51 := (iff #19 #50)
#48 := (iff #18 #45)
#41 := (implies #35 #17)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #18 #41)
#36 := (iff #14 #35)
#33 := (iff #13 #32)
#30 := (iff #12 #29)
#31 := [rewrite]: #30
#34 := [quant-intro #31]: #33
#37 := [monotonicity #34]: #36
#43 := [monotonicity #37]: #42
#49 := [trans #43 #47]: #48
#52 := [quant-intro #49]: #51
#39 := (iff #15 #38)
#40 := [quant-intro #37]: #39
#55 := [monotonicity #40 #52]: #54
#58 := [monotonicity #55]: #57
#64 := [trans #58 #62]: #63
#67 := [monotonicity #64]: #66
#24 := [asserted]: #22
#68 := [mp #24 #67]: #65
#73 := [not-or-elim #68]: #72
#96 := [iff-false #73]: #95
#97 := [monotonicity #96]: #94
#101 := [trans #97 #99]: #100
#104 := [quant-intro #101]: #103
#69 := [not-or-elim #68]: #53
#71 := [and-elim #69]: #50
#105 := [mp #71 #104]: #102
#145 := [mp~ #105 #144]: #142
#575 := [mp #145 #574]: #570
#111 := (f3 ?v0!0)
#106 := (= #111 f1)
#107 := (= #7 ?v0!0)
#108 := (or #28 #107)
#109 := (forall (vars (?v1 S2)) #108)
#112 := (and #106 #109)
#113 := (~ #38 #112)
#121 := (~ #112 #112)
#119 := (~ #109 #109)
#117 := (~ #108 #108)
#118 := [refl]: #117
#120 := [nnf-pos #118]: #119
#115 := (~ #106 #106)
#116 := [refl]: #115
#122 := [monotonicity #116 #120]: #121
#114 := [sk]: #113
#123 := [trans #114 #122]: #113
#70 := [and-elim #69]: #38
#124 := [mp~ #70 #123]: #112
#127 := [and-elim #124]: #106
#148 := (not #106)
#240 := (not #570)
#219 := (or #240 #148 #237)
#238 := (or #148 #237)
#555 := (or #240 #238)
#213 := (iff #555 #219)
#344 := [rewrite]: #213
#557 := [quant-inst #110]: #555
#551 := [mp #557 #344]: #219
#540 := [unit-resolution #551 #127 #575]: #237
#559 := (or #226 #558)
#560 := [def-axiom]: #559
#541 := [unit-resolution #560 #540]: #558
#224 := (or #226 #234)
#225 := [def-axiom]: #224
#536 := [unit-resolution #225 #540]: #234
#564 := (forall (vars (?v1 S2)) (:pat #563) #108)
#567 := (iff #109 #564)
#565 := (iff #108 #108)
#566 := [refl]: #565
#568 := [quant-intro #566]: #567
#128 := [and-elim #124]: #109
#569 := [mp #128 #568]: #564
#562 := (not #564)
#552 := (or #562 #146 #235)
#211 := (or #562 #226)
#553 := (iff #211 #552)
#212 := [rewrite]: #553
#216 := [quant-inst #233]: #211
#554 := [mp #216 #212]: #552
[unit-resolution #554 #569 #536 #541]: false
5cf9316b3855d8f516ed864997fb3cc182641c7f 76 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: (-> S2 S1)
decl f6 :: S2
#15 := f6
#19 := (f5 f6)
#20 := (= #19 f1)
#54 := (not #20)
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#8 := f4
#16 := (f3 f6 f4)
#17 := (= #16 f1)
#7 := (:var 0 S2)
#11 := (f5 #7)
#12 := (= #11 f1)
#9 := (f3 #7 f4)
#10 := (= #9 f1)
#28 := (not #10)
#29 := (or #28 #12)
#32 := (forall (vars (?v0 S2)) #29)
#35 := (and #32 #17)
#41 := (not #35)
#42 := (or #41 #20)
#47 := (not #42)
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#18 := (and #14 #17)
#21 := (implies #18 #20)
#22 := (not #21)
#48 := (iff #22 #47)
#45 := (iff #21 #42)
#38 := (implies #35 #20)
#43 := (iff #38 #42)
#44 := [rewrite]: #43
#39 := (iff #21 #38)
#36 := (iff #18 #35)
#33 := (iff #14 #32)
#30 := (iff #13 #29)
#31 := [rewrite]: #30
#34 := [quant-intro #31]: #33
#37 := [monotonicity #34]: #36
#40 := [monotonicity #37]: #39
#46 := [trans #40 #44]: #45
#49 := [monotonicity #46]: #48
#24 := [asserted]: #22
#50 := [mp #24 #49]: #47
#55 := [not-or-elim #50]: #54
#51 := [not-or-elim #50]: #35
#53 := [and-elim #51]: #17
#498 := (pattern #11)
#497 := (pattern #9)
#499 := (forall (vars (?v0 S2)) (:pat #497 #498) #29)
#502 := (iff #32 #499)
#500 := (iff #29 #29)
#501 := [refl]: #500
#503 := [quant-intro #501]: #502
#75 := (~ #32 #32)
#77 := (~ #29 #29)
#78 := [refl]: #77
#76 := [nnf-pos #78]: #75
#52 := [and-elim #51]: #32
#79 := [mp~ #52 #76]: #32
#504 := [mp #79 #503]: #499
#80 := (not #17)
#82 := (not #499)
#169 := (or #82 #80 #20)
#167 := (or #80 #20)
#160 := (or #82 #167)
#172 := (iff #160 #169)
#173 := [rewrite]: #172
#171 := [quant-inst #15]: #160
#170 := [mp #171 #173]: #169
[unit-resolution #170 #504 #53 #55]: false
36a9521988b6f6920c988fe790beb6e082d3e3e0 74 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#8 := f4
decl f6 :: S2
#15 := f6
#18 := (f3 f6 f4)
#19 := (= #18 f1)
decl f5 :: (-> S2 S1)
#16 := (f5 f6)
#17 := (= #16 f1)
#20 := (and #17 #19)
#21 := (not #20)
#7 := (:var 0 S2)
#11 := (f5 #7)
#12 := (= #11 f1)
#9 := (f3 #7 f4)
#10 := (= #9 f1)
#13 := (and #10 #12)
#14 := (exists (vars (?v0 S2)) #13)
#22 := (or #14 #21)
#23 := (not #22)
#25 := [asserted]: #23
#28 := [not-or-elim #25]: #20
#30 := [and-elim #28]: #19
#29 := [and-elim #28]: #17
#495 := (pattern #11)
#494 := (pattern #9)
#61 := (not #12)
#58 := (not #10)
#62 := (or #58 #61)
#496 := (forall (vars (?v0 S2)) (:pat #494 #495) #62)
#73 := (forall (vars (?v0 S2)) #62)
#499 := (iff #73 #496)
#497 := (iff #62 #62)
#498 := [refl]: #497
#500 := [quant-intro #498]: #499
#59 := (not #13)
#54 := (forall (vars (?v0 S2)) #59)
#74 := (iff #54 #73)
#71 := (iff #59 #62)
#63 := (not #62)
#66 := (not #63)
#69 := (iff #66 #62)
#70 := [rewrite]: #69
#67 := (iff #59 #66)
#64 := (iff #13 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#75 := [quant-intro #72]: #74
#26 := (not #14)
#55 := (~ #26 #54)
#60 := (~ #59 #59)
#53 := [refl]: #60
#56 := [nnf-neg #53]: #55
#27 := [not-or-elim #25]: #26
#57 := [mp~ #27 #56]: #54
#76 := [mp #57 #75]: #73
#501 := [mp #76 #500]: #496
#164 := (not #17)
#77 := (not #19)
#166 := (not #496)
#157 := (or #166 #77 #164)
#78 := (or #77 #164)
#168 := (or #166 #78)
#170 := (iff #168 #157)
#167 := [rewrite]: #170
#169 := [quant-inst #15]: #168
#171 := [mp #169 #167]: #157
[unit-resolution #171 #501 #29 #30]: false
3caef628769def96e328f07d5829f3ba60e7a8be 22 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#20 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#12 := (not #11)
#13 := (or #11 #12)
#14 := (not #13)
#16 := [asserted]: #14
#17 := [not-or-elim #16]: #12
#21 := [not-or-elim #17]: #20
#18 := (not #8)
#19 := [not-or-elim #17]: #18
#22 := [not-or-elim #16]: #11
[unit-resolution #22 #19 #21]: false
0e1cdd4a4193b3d95b7ad20189882443e6b18893 27 0
unsat
#2 := false
#1 := true
#8 := (or false true)
#7 := (and true false)
#9 := (implies #7 #8)
#10 := (not #9)
#32 := (iff #10 false)
#27 := (not true)
#30 := (iff #27 false)
#31 := [rewrite]: #30
#28 := (iff #10 #27)
#25 := (iff #9 true)
#20 := (implies false true)
#23 := (iff #20 true)
#24 := [rewrite]: #23
#21 := (iff #9 #20)
#18 := (iff #8 true)
#19 := [rewrite]: #18
#16 := (iff #7 false)
#17 := [rewrite]: #16
#22 := [monotonicity #17 #19]: #21
#26 := [trans #22 #24]: #25
#29 := [monotonicity #26]: #28
#33 := [trans #29 #31]: #32
#12 := [asserted]: #10
[mp #12 #33]: false
1865879eff2d6a570e2d5d631f9447241f505a6b 23 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#7 := f4
#8 := (f3 f4)
#9 := (= #8 f1)
#10 := (iff #9 #9)
#11 := (not #10)
#24 := (iff #11 false)
#1 := true
#19 := (not true)
#22 := (iff #19 false)
#23 := [rewrite]: #22
#20 := (iff #11 #19)
#17 := (iff #10 true)
#18 := [rewrite]: #17
#21 := [monotonicity #18]: #20
#25 := [trans #21 #23]: #24
#13 := [asserted]: #11
[mp #13 #25]: false
22b316633a688953bdb82a6a016351e3b9edef63 25 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#10 := (= #9 f1)
#11 := (iff #10 #10)
#12 := (not #11)
#25 := (iff #12 false)
#1 := true
#20 := (not true)
#23 := (iff #20 false)
#24 := [rewrite]: #23
#21 := (iff #12 #20)
#18 := (iff #11 true)
#19 := [rewrite]: #18
#22 := [monotonicity #19]: #21
#26 := [trans #22 #24]: #25
#14 := [asserted]: #12
[mp #14 #26]: false
5d78cef53eb597c269d0bcb51799688adca9f822 24 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (= #8 f1)
#10 := (forall (vars (?v0 S2)) #9)
#11 := (not #10)
#12 := (if #10 #10 #11)
#13 := (not #12)
#26 := (iff #13 false)
#1 := true
#21 := (not true)
#24 := (iff #21 false)
#25 := [rewrite]: #24
#22 := (iff #13 #21)
#19 := (iff #12 true)
#20 := [rewrite]: #19
#23 := [monotonicity #20]: #22
#27 := [trans #23 #25]: #26
#15 := [asserted]: #13
[mp #15 #27]: false
1c9273fda2614079bca73f9f9065cfb199fc506c 119 0
unsat
#2 := false
decl f4 :: S2
#8 := f4
decl f3 :: S2
#7 := f3
#9 := (= f3 f4)
decl inj!0 :: (-> S3 S2)
decl f6 :: (-> S2 S3)
#28 := (f6 f4)
#115 := (inj!0 #28)
#202 := (= #115 f4)
#18 := (:var 0 S2)
#19 := (f6 #18)
#113 := (pattern #19)
#105 := (inj!0 #19)
#102 := (= #105 #18)
#531 := (forall (vars (k!0 S2)) (:pat #113) #102)
#104 := (forall (vars (k!0 S2)) (:pat #113) #102)
#532 := (iff #104 #531)
#534 := (iff #531 #531)
#535 := [rewrite]: #534
#533 := [rewrite]: #532
#536 := [trans #533 #535]: #532
#16 := (:var 1 S2)
#21 := (= #18 #16)
#17 := (f6 #16)
#20 := (= #17 #19)
#38 := (not #20)
#39 := (or #38 #21)
#42 := (forall (vars (?v0 S2) (?v1 S2)) #39)
#103 := (iff #42 #104)
#106 := [rewrite]: #103
#108 := (~ #42 #42)
#110 := (~ #39 #39)
#111 := [refl]: #110
#109 := [nnf-pos #111]: #108
decl f5 :: S2
#11 := f5
#14 := (= f4 f5)
#15 := (not #14)
#12 := (= f3 f5)
#13 := (not #12)
#10 := (not #9)
#59 := (and #10 #13 #15 #42)
#27 := (f6 f3)
#29 := (= #27 #28)
#30 := (not #29)
#67 := (not #59)
#68 := (or #67 #30)
#73 := (not #68)
#22 := (implies #20 #21)
#23 := (forall (vars (?v0 S2) (?v1 S2)) #22)
#24 := (and #15 #23)
#25 := (and #13 #24)
#26 := (and #10 #25)
#31 := (implies #26 #30)
#32 := (not #31)
#74 := (iff #32 #73)
#71 := (iff #31 #68)
#64 := (implies #59 #30)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #31 #64)
#62 := (iff #26 #59)
#51 := (and #13 #15 #42)
#56 := (and #10 #51)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #26 #56)
#54 := (iff #25 #51)
#45 := (and #15 #42)
#48 := (and #13 #45)
#52 := (iff #48 #51)
#53 := [rewrite]: #52
#49 := (iff #25 #48)
#46 := (iff #24 #45)
#43 := (iff #23 #42)
#40 := (iff #22 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#55 := [trans #50 #53]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#34 := [asserted]: #32
#76 := [mp #34 #75]: #73
#77 := [not-or-elim #76]: #59
#81 := [and-elim #77]: #42
#112 := [mp~ #81 #109]: #42
#107 := [mp #112 #106]: #104
#537 := [mp #107 #536]: #531
#116 := (not #531)
#207 := (or #116 #202)
#204 := [quant-inst #8]: #207
#187 := [unit-resolution #204 #537]: #202
#527 := (= f3 #115)
#114 := (inj!0 #27)
#193 := (= #114 #115)
#181 := (= #115 #114)
#206 := (= #28 #27)
#82 := [not-or-elim #76]: #29
#208 := [symm #82]: #206
#312 := [monotonicity #208]: #181
#526 := [symm #312]: #193
#519 := (= f3 #114)
#201 := (= #114 f3)
#203 := (or #116 #201)
#194 := [quant-inst #7]: #203
#205 := [unit-resolution #194 #537]: #201
#192 := [symm #205]: #519
#528 := [trans #192 #526]: #527
#529 := [trans #528 #187]: #9
#78 := [and-elim #77]: #10
[unit-resolution #78 #529]: false
6e572f819a5565b824096fa179274d819fc9261b 93 0
unsat
#2 := false
decl f5 :: S3
#17 := f5
decl f4 :: S3
#16 := f4
#18 := (= f4 f5)
decl inj!0 :: (-> S2 S4 S3)
decl f3 :: (-> S2 S3 S4)
decl f6 :: S2
#21 := f6
#23 := (f3 f6 f5)
#94 := (inj!0 f6 #23)
#181 := (= #94 f5)
#8 := (:var 1 S3)
#82 := (:var 0 S2)
#79 := (f3 #82 #8)
#88 := (pattern #79)
#80 := (inj!0 #82 #79)
#87 := (= #80 #8)
#89 := (forall (vars (k!0 S3) (k!1 S2)) (:pat #88) #87)
#10 := (:var 0 S3)
#13 := (= #8 #10)
#7 := (:var 2 S2)
#11 := (f3 #7 #10)
#9 := (f3 #7 #8)
#12 := (= #9 #11)
#33 := (not #12)
#34 := (or #33 #13)
#37 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #34)
#90 := (iff #37 #89)
#91 := [rewrite]: #90
#85 := (~ #37 #37)
#83 := (~ #34 #34)
#84 := [refl]: #83
#86 := [nnf-pos #84]: #85
#19 := (not #18)
#40 := (and #37 #19)
#22 := (f3 f6 f4)
#24 := (= #22 #23)
#25 := (not #24)
#46 := (not #40)
#47 := (or #46 #25)
#52 := (not #47)
#14 := (implies #12 #13)
#15 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #14)
#20 := (and #15 #19)
#26 := (implies #20 #25)
#27 := (not #26)
#53 := (iff #27 #52)
#50 := (iff #26 #47)
#43 := (implies #40 #25)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #26 #43)
#41 := (iff #20 #40)
#38 := (iff #15 #37)
#35 := (iff #14 #34)
#36 := [rewrite]: #35
#39 := [quant-intro #36]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [monotonicity #51]: #53
#29 := [asserted]: #27
#55 := [mp #29 #54]: #52
#56 := [not-or-elim #55]: #40
#57 := [and-elim #56]: #37
#81 := [mp~ #57 #86]: #37
#92 := [mp #81 #91]: #89
#95 := (not #89)
#186 := (or #95 #181)
#183 := [quant-inst #17 #21]: #186
#166 := [unit-resolution #183 #92]: #181
#506 := (= f4 #94)
#93 := (inj!0 f6 #22)
#172 := (= #93 #94)
#160 := (= #94 #93)
#185 := (= #23 #22)
#59 := [not-or-elim #55]: #24
#187 := [symm #59]: #185
#291 := [monotonicity #187]: #160
#505 := [symm #291]: #172
#498 := (= f4 #93)
#180 := (= #93 f4)
#182 := (or #95 #180)
#173 := [quant-inst #16 #21]: #182
#184 := [unit-resolution #173 #92]: #180
#171 := [symm #184]: #498
#507 := [trans #171 #505]: #506
#508 := [trans #507 #166]: #18
#58 := [and-elim #56]: #19
[unit-resolution #58 #508]: false
d7fd68e20eb7b809b8a677cb04f940aa036f5afb 91 0
unsat
#2 := false
decl f5 :: S2
#17 := f5
decl f4 :: S2
#16 := f4
#18 := (= f4 f5)
decl inj!0 :: (-> S3 S4 S2)
decl f3 :: (-> S2 S3 S4)
decl f6 :: S3
#21 := f6
#23 := (f3 f5 f6)
#92 := (inj!0 f6 #23)
#179 := (= #92 f5)
#8 := (:var 1 S3)
#10 := (:var 0 S2)
#11 := (f3 #10 #8)
#82 := (pattern #11)
#86 := (inj!0 #8 #11)
#81 := (= #86 #10)
#87 := (forall (vars (k!0 S3) (k!1 S2)) (:pat #82) #81)
#7 := (:var 2 S2)
#13 := (= #7 #10)
#9 := (f3 #7 #8)
#12 := (= #9 #11)
#33 := (not #12)
#34 := (or #33 #13)
#37 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #34)
#88 := (iff #37 #87)
#89 := [rewrite]: #88
#79 := (~ #37 #37)
#83 := (~ #34 #34)
#84 := [refl]: #83
#80 := [nnf-pos #84]: #79
#19 := (not #18)
#40 := (and #37 #19)
#22 := (f3 f4 f6)
#24 := (= #22 #23)
#25 := (not #24)
#46 := (not #40)
#47 := (or #46 #25)
#52 := (not #47)
#14 := (implies #12 #13)
#15 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #14)
#20 := (and #15 #19)
#26 := (implies #20 #25)
#27 := (not #26)
#53 := (iff #27 #52)
#50 := (iff #26 #47)
#43 := (implies #40 #25)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #26 #43)
#41 := (iff #20 #40)
#38 := (iff #15 #37)
#35 := (iff #14 #34)
#36 := [rewrite]: #35
#39 := [quant-intro #36]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [monotonicity #51]: #53
#29 := [asserted]: #27
#55 := [mp #29 #54]: #52
#56 := [not-or-elim #55]: #40
#57 := [and-elim #56]: #37
#85 := [mp~ #57 #80]: #37
#90 := [mp #85 #89]: #87
#93 := (not #87)
#184 := (or #93 #179)
#181 := [quant-inst #21 #17]: #184
#164 := [unit-resolution #181 #90]: #179
#504 := (= f4 #92)
#91 := (inj!0 f6 #22)
#170 := (= #91 #92)
#158 := (= #92 #91)
#183 := (= #23 #22)
#59 := [not-or-elim #55]: #24
#185 := [symm #59]: #183
#289 := [monotonicity #185]: #158
#503 := [symm #289]: #170
#496 := (= f4 #91)
#178 := (= #91 f4)
#180 := (or #93 #178)
#171 := [quant-inst #21 #16]: #180
#182 := [unit-resolution #171 #90]: #178
#169 := [symm #182]: #496
#505 := [trans #169 #503]: #504
#506 := [trans #505 #164]: #18
#58 := [and-elim #56]: #19
[unit-resolution #58 #506]: false
06c7eb9f7711ee93da7082f0da081b58762fb7a3 26 0
unsat
#2 := false
decl f5 :: S2
#13 := f5
decl f3 :: (-> S3 S2 S2)
decl f4 :: S3
#7 := f4
#14 := (f3 f4 f5)
#15 := (= #14 f5)
#16 := (not #15)
#19 := [asserted]: #16
#8 := (:var 0 S2)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#11 := (= #9 #8)
#12 := (forall (vars (?v0 S2)) (:pat #10) #11)
#46 := (~ #12 #12)
#44 := (~ #11 #11)
#45 := [refl]: #44
#47 := [nnf-pos #45]: #46
#18 := [asserted]: #12
#42 := [mp~ #18 #47]: #12
#134 := (not #12)
#127 := (or #134 #15)
#138 := [quant-inst #13]: #127
[unit-resolution #138 #42 #19]: false
fcd8f166db037b8608ae35e66521fd11e6030072 30 0
unsat
#2 := false
decl f4 :: (-> S3 S4)
decl f6 :: S3
#16 := f6
#17 := (f4 f6)
decl f3 :: (-> S2 S4)
decl f5 :: S2
#14 := f5
#15 := (f3 f5)
#18 := (= #15 #17)
#19 := (not #18)
#22 := [asserted]: #19
#9 := (:var 0 S3)
#10 := (f4 #9)
#7 := (:var 1 S2)
#8 := (f3 #7)
#11 := (pattern #8 #10)
#12 := (= #8 #10)
#13 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #11) #12)
#49 := (~ #13 #13)
#47 := (~ #12 #12)
#48 := [refl]: #47
#50 := [nnf-pos #48]: #49
#21 := [asserted]: #13
#45 := [mp~ #21 #50]: #13
#53 := (not #13)
#138 := (or #53 #18)
#46 := [quant-inst #14 #16]: #138
[unit-resolution #46 #45 #22]: false
c7511e2629c4356cab2cf09d9c82407aa7fe6d05 47 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: (-> S2 S1)
decl f5 :: S2
#15 := f5
#18 := (f4 f5)
#19 := (= #18 f1)
#20 := (not #19)
#24 := [asserted]: #20
decl f3 :: (-> S2 S1)
#16 := (f3 f5)
#17 := (= #16 f1)
#23 := [asserted]: #17
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (pattern #8)
#11 := (f4 #7)
#12 := (= #11 f1)
#10 := (= #8 f1)
#28 := (not #10)
#29 := (or #28 #12)
#32 := (forall (vars (?v0 S2)) (:pat #9) #29)
#57 := (~ #32 #32)
#55 := (~ #29 #29)
#56 := [refl]: #55
#58 := [nnf-pos #56]: #57
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) (:pat #9) #13)
#33 := (iff #14 #32)
#30 := (iff #13 #29)
#31 := [rewrite]: #30
#34 := [quant-intro #31]: #33
#22 := [asserted]: #14
#35 := [mp #22 #34]: #32
#61 := [mp~ #35 #58]: #32
#62 := (not #17)
#60 := (not #32)
#149 := (or #60 #62 #19)
#147 := (or #62 #19)
#140 := (or #60 #147)
#152 := (iff #140 #149)
#153 := [rewrite]: #152
#151 := [quant-inst #15]: #140
#150 := [mp #151 #153]: #149
[unit-resolution #150 #61 #23 #24]: false
a6270f81d5df8dfba370dfde937210f23b9d7a30 80 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: (-> S2 S1)
decl f6 :: S2
#18 := f6
#23 := (f5 f6)
#24 := (= #23 f1)
#25 := (not #24)
#30 := [asserted]: #25
decl f4 :: (-> S2 S1)
#21 := (f4 f6)
#22 := (= #21 f1)
#29 := [asserted]: #22
decl f3 :: (-> S2 S1)
#19 := (f3 f6)
#20 := (= #19 f1)
#28 := [asserted]: #20
#7 := (:var 0 S2)
#9 := (f4 #7)
#8 := (f3 #7)
#10 := (pattern #8 #9)
#14 := (f5 #7)
#15 := (= #14 f1)
#12 := (= #9 f1)
#65 := (not #12)
#11 := (= #8 f1)
#62 := (not #11)
#82 := (or #62 #65 #15)
#87 := (forall (vars (?v0 S2)) (:pat #10) #82)
#13 := (and #11 #12)
#34 := (not #13)
#35 := (or #34 #15)
#38 := (forall (vars (?v0 S2)) (:pat #10) #35)
#88 := (iff #38 #87)
#85 := (iff #35 #82)
#68 := (or #62 #65)
#79 := (or #68 #15)
#83 := (iff #79 #82)
#84 := [rewrite]: #83
#80 := (iff #35 #79)
#77 := (iff #34 #68)
#61 := (not #68)
#72 := (not #61)
#75 := (iff #72 #68)
#76 := [rewrite]: #75
#73 := (iff #34 #72)
#66 := (iff #13 #61)
#71 := [rewrite]: #66
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#81 := [monotonicity #78]: #80
#86 := [trans #81 #84]: #85
#89 := [quant-intro #86]: #88
#63 := (~ #38 #38)
#69 := (~ #35 #35)
#70 := [refl]: #69
#64 := [nnf-pos #70]: #63
#16 := (implies #13 #15)
#17 := (forall (vars (?v0 S2)) (:pat #10) #16)
#39 := (iff #17 #38)
#36 := (iff #16 #35)
#37 := [rewrite]: #36
#40 := [quant-intro #37]: #39
#27 := [asserted]: #17
#41 := [mp #27 #40]: #38
#67 := [mp~ #41 #64]: #38
#90 := [mp #67 #89]: #87
#178 := (not #22)
#91 := (not #20)
#180 := (not #87)
#171 := (or #180 #91 #178 #24)
#92 := (or #91 #178 #24)
#182 := (or #180 #92)
#184 := (iff #182 #171)
#181 := [rewrite]: #184
#183 := [quant-inst #18]: #182
#185 := [mp #183 #181]: #171
[unit-resolution #185 #90 #28 #29 #30]: false
9a5dc5d34493dd61c515054a38ab88431b1114aa 94 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl f6 :: S2
#20 := f6
#21 := (f3 f6)
#22 := (= #21 f1)
#85 := (not #22)
decl f5 :: (-> S2 S1)
#26 := (f5 f6)
#27 := (= #26 f1)
#172 := (or #85 #27)
decl f4 :: (-> S2 S1)
#23 := (f4 f6)
#24 := (= #23 f1)
#173 := (not #24)
#87 := (or #173 #27)
#174 := (not #87)
#86 := (not #172)
#165 := (or #86 #174)
#176 := (not #165)
#177 := [hypothesis]: #165
#7 := (:var 0 S2)
#10 := (f4 #7)
#11 := (pattern #10)
#8 := (f3 #7)
#9 := (pattern #8)
#13 := (f5 #7)
#14 := (= #13 f1)
#16 := (= #10 f1)
#40 := (not #16)
#41 := (or #40 #14)
#72 := (not #41)
#12 := (= #8 f1)
#36 := (not #12)
#37 := (or #36 #14)
#77 := (not #37)
#73 := (or #77 #72)
#78 := (not #73)
#81 := (forall (vars (?v0 S2)) (:pat #9 #11) #78)
#44 := (and #37 #41)
#47 := (forall (vars (?v0 S2)) (:pat #9 #11) #44)
#82 := (iff #47 #81)
#79 := (iff #44 #78)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#70 := (~ #47 #47)
#74 := (~ #44 #44)
#75 := [refl]: #74
#71 := [nnf-pos #75]: #70
#17 := (implies #16 #14)
#15 := (implies #12 #14)
#18 := (and #15 #17)
#19 := (forall (vars (?v0 S2)) (:pat #9 #11) #18)
#48 := (iff #19 #47)
#45 := (iff #18 #44)
#42 := (iff #17 #41)
#43 := [rewrite]: #42
#38 := (iff #15 #37)
#39 := [rewrite]: #38
#46 := [monotonicity #39 #43]: #45
#49 := [quant-intro #46]: #48
#30 := [asserted]: #19
#50 := [mp #30 #49]: #47
#76 := [mp~ #50 #71]: #47
#84 := [mp #76 #83]: #81
#175 := (not #81)
#179 := (or #175 #176)
#158 := [quant-inst #20]: #179
#178 := [unit-resolution #158 #84 #177]: false
#493 := [lemma #178]: #176
#501 := (or #165 #172)
#491 := [def-axiom]: #501
#135 := [unit-resolution #491 #493]: #172
#477 := (or #86 #85)
#28 := (not #27)
#32 := [asserted]: #28
#490 := (or #86 #85 #27)
#163 := [def-axiom]: #490
#139 := [unit-resolution #163 #32]: #477
#140 := [unit-resolution #139 #135]: #85
#150 := (or #165 #87)
#155 := [def-axiom]: #150
#141 := [unit-resolution #155 #493]: #87
#142 := (or #174 #173)
#500 := (or #174 #173 #27)
#495 := [def-axiom]: #500
#479 := [unit-resolution #495 #32]: #142
#480 := [unit-resolution #479 #141]: #173
#25 := (or #22 #24)
#31 := [asserted]: #25
[unit-resolution #31 #480 #140]: false
0174e3da6a3b0d1b54444b41bf1d3bca92d15ce1 47 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: (-> S2 S1)
decl f5 :: S2
#16 := f5
#19 := (f4 f5)
#20 := (= #19 f1)
#21 := (not #20)
#25 := [asserted]: #21
decl f3 :: (-> S2 S1)
#17 := (f3 f5)
#18 := (= #17 f1)
#24 := [asserted]: #18
#7 := (:var 0 S2)
#8 := (f3 #7)
#9 := (pattern #8)
#12 := (f4 #7)
#13 := (= #12 f1)
#11 := (= #8 f1)
#29 := (not #11)
#30 := (or #29 #13)
#33 := (forall (vars (?v0 S2)) (:pat #9) #30)
#58 := (~ #33 #33)
#56 := (~ #30 #30)
#57 := [refl]: #56
#59 := [nnf-pos #57]: #58
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2)) (:pat #9) #14)
#34 := (iff #15 #33)
#31 := (iff #14 #30)
#32 := [rewrite]: #31
#35 := [quant-intro #32]: #34
#23 := [asserted]: #15
#36 := [mp #23 #35]: #33
#62 := [mp~ #36 #59]: #33
#63 := (not #18)
#61 := (not #33)
#150 := (or #61 #63 #20)
#148 := (or #63 #20)
#141 := (or #61 #148)
#153 := (iff #141 #150)
#154 := [rewrite]: #153
#152 := [quant-inst #16]: #141
#151 := [mp #152 #154]: #150
[unit-resolution #151 #62 #24 #25]: false
3cf2f5774e9cb53226a2180612e5e1ffeb96f030 54 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: (-> S2 S1)
decl f5 :: S2
#15 := f5
#18 := (f4 f5)
#19 := (= #18 f1)
#20 := (not #19)
#24 := [asserted]: #20
decl f3 :: (-> S2 S1)
#16 := (f3 f5)
#17 := (= #16 f1)
#23 := [asserted]: #17
#8 := (:var 0 S2)
#11 := (f4 #8)
#477 := (pattern #11)
#9 := (f3 #8)
#476 := (pattern #9)
#12 := (= #11 f1)
#10 := (= #9 f1)
#28 := (not #10)
#29 := (or #28 #12)
#478 := (forall (vars (?v0 S2)) (:pat #476 #477) #29)
#32 := (forall (vars (?v0 S2)) #29)
#481 := (iff #32 #478)
#479 := (iff #29 #29)
#480 := [refl]: #479
#482 := [quant-intro #480]: #481
#61 := (~ #32 #32)
#59 := (~ #29 #29)
#60 := [refl]: #59
#62 := [nnf-pos #60]: #61
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#33 := (iff #14 #32)
#30 := (iff #13 #29)
#31 := [rewrite]: #30
#34 := [quant-intro #31]: #33
#22 := [asserted]: #14
#35 := [mp #22 #34]: #32
#57 := [mp~ #35 #62]: #32
#483 := [mp #57 #482]: #478
#58 := (not #17)
#56 := (not #478)
#148 := (or #56 #58 #19)
#146 := (or #58 #19)
#139 := (or #56 #146)
#151 := (iff #139 #148)
#152 := [rewrite]: #151
#150 := [quant-inst #15]: #139
#149 := [mp #150 #152]: #148
[unit-resolution #149 #483 #23 #24]: false
cb6801fac47863f5b3d24e889ecd9d6a4cb46df6 16 0
unsat
#2 := false
#1 := true
#7 := (implies true true)
#8 := (not #7)
#21 := (iff #8 false)
#16 := (not true)
#19 := (iff #16 false)
#20 := [rewrite]: #19
#17 := (iff #8 #16)
#14 := (iff #7 true)
#15 := [rewrite]: #14
#18 := [monotonicity #15]: #17
#22 := [trans #18 #20]: #21
#10 := [asserted]: #8
[mp #10 #22]: false
16e1681a3c64ecd748e6c05bfb8e8c32bcbc7c22 16 0
unsat
#2 := false
#7 := (implies false false)
#8 := (not #7)
#21 := (iff #8 false)
#1 := true
#16 := (not true)
#19 := (iff #16 false)
#20 := [rewrite]: #19
#17 := (iff #8 #16)
#14 := (iff #7 true)
#15 := [rewrite]: #14
#18 := [monotonicity #15]: #17
#22 := [trans #18 #20]: #21
#10 := [asserted]: #8
[mp #10 #22]: false
388e4d9b91ffb1a7279a22ad67a0af16108a59dd 23 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#7 := f4
#8 := (f3 f4)
#9 := (= #8 f1)
#10 := (implies #9 #9)
#11 := (not #10)
#24 := (iff #11 false)
#1 := true
#19 := (not true)
#22 := (iff #19 false)
#23 := [rewrite]: #22
#20 := (iff #11 #19)
#17 := (iff #10 true)
#18 := [rewrite]: #17
#21 := [monotonicity #18]: #20
#25 := [trans #21 #23]: #24
#13 := [asserted]: #11
[mp #13 #25]: false
8b861d903a9a1054060c90c6ae2af47fe5197810 25 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#11 := (or #8 #10)
#12 := (implies #8 #11)
#13 := (not #12)
#26 := (iff #13 false)
#1 := true
#21 := (not true)
#24 := (iff #21 false)
#25 := [rewrite]: #24
#22 := (iff #13 #21)
#19 := (iff #12 true)
#20 := [rewrite]: #19
#23 := [monotonicity #20]: #22
#27 := [trans #23 #25]: #26
#15 := [asserted]: #13
[mp #15 #27]: false
25b3a4036a36c70240b5d9e2d0a1d55ba7cba9e7 25 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#11 := (or #10 #8)
#12 := (implies #8 #11)
#13 := (not #12)
#26 := (iff #13 false)
#1 := true
#21 := (not true)
#24 := (iff #21 false)
#25 := [rewrite]: #24
#22 := (iff #13 #21)
#19 := (iff #12 true)
#20 := [rewrite]: #19
#23 := [monotonicity #20]: #22
#27 := [trans #23 #25]: #26
#15 := [asserted]: #13
[mp #15 #27]: false
4e6d14ef22716878d11f1de1592f873bbc16eb75 34 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#12 := (implies #8 #11)
#9 := (not #8)
#13 := (implies #9 #12)
#14 := (not #13)
#35 := (iff #14 false)
#1 := true
#30 := (not true)
#33 := (iff #30 false)
#34 := [rewrite]: #33
#31 := (iff #14 #30)
#28 := (iff #13 true)
#20 := (or #9 #11)
#23 := (implies #9 #20)
#26 := (iff #23 true)
#27 := [rewrite]: #26
#24 := (iff #13 #23)
#21 := (iff #12 #20)
#22 := [rewrite]: #21
#25 := [monotonicity #22]: #24
#29 := [trans #25 #27]: #28
#32 := [monotonicity #29]: #31
#36 := [trans #32 #34]: #35
#16 := [asserted]: #14
[mp #16 #36]: false
bcec35782699eb337715cce60af2a2265320a550 79 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#11 := (not #10)
#99 := (iff #11 false)
#1 := true
#78 := (not true)
#81 := (iff #78 false)
#82 := [rewrite]: #81
#97 := (iff #11 #78)
#95 := (iff #10 true)
#71 := (= f1 f1)
#74 := (iff #71 true)
#75 := [rewrite]: #74
#93 := (iff #10 #71)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#22 := (not #8)
#23 := (or #22 #10)
#90 := (iff #23 #10)
#85 := (or false #10)
#88 := (iff #85 #10)
#89 := [rewrite]: #88
#86 := (iff #23 #85)
#83 := (iff #22 false)
#79 := (iff #22 #78)
#76 := (iff #8 true)
#72 := (iff #8 #71)
#26 := (not #23)
#40 := (or #22 #10 #26)
#45 := (not #40)
#12 := (implies #8 #10)
#13 := (not #12)
#14 := (implies #11 #13)
#15 := (implies #8 #14)
#16 := (not #15)
#46 := (iff #16 #45)
#43 := (iff #15 #40)
#32 := (or #10 #26)
#37 := (implies #8 #32)
#41 := (iff #37 #40)
#42 := [rewrite]: #41
#38 := (iff #15 #37)
#35 := (iff #14 #32)
#29 := (implies #11 #26)
#33 := (iff #29 #32)
#34 := [rewrite]: #33
#30 := (iff #14 #29)
#27 := (iff #13 #26)
#24 := (iff #12 #23)
#25 := [rewrite]: #24
#28 := [monotonicity #25]: #27
#31 := [monotonicity #28]: #30
#36 := [trans #31 #34]: #35
#39 := [monotonicity #36]: #38
#44 := [trans #39 #42]: #43
#47 := [monotonicity #44]: #46
#18 := [asserted]: #16
#48 := [mp #18 #47]: #45
#49 := [not-or-elim #48]: #8
#73 := [monotonicity #49]: #72
#77 := [trans #73 #75]: #76
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#51 := [not-or-elim #48]: #23
#92 := [mp #51 #91]: #10
#94 := [monotonicity #92]: #93
#96 := [trans #94 #75]: #95
#98 := [monotonicity #96]: #97
#100 := [trans #98 #82]: #99
#50 := [not-or-elim #48]: #11
[mp #50 #100]: false
760574e0ad704bb8f35577bec0aff7d25c63c601 58 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: (-> S2 S1)
decl f4 :: S2
#7 := f4
#10 := (f5 f4)
#11 := (= #10 f1)
#57 := (not #11)
#75 := [hypothesis]: #57
decl f3 :: (-> S2 S1)
#8 := (f3 f4)
#9 := (= #8 f1)
#20 := (not #9)
#65 := (or #20 #11)
#12 := (iff #9 #11)
#21 := (iff #20 #11)
#29 := (not #21)
#52 := (iff #29 #12)
#53 := [rewrite]: #52
#22 := (or #21 #12)
#25 := (not #22)
#13 := (implies #12 #12)
#14 := (not #13)
#26 := (iff #14 #25)
#23 := (iff #13 #22)
#24 := [rewrite]: #23
#27 := [monotonicity #24]: #26
#16 := [asserted]: #14
#28 := [mp #16 #27]: #25
#30 := [not-or-elim #28]: #29
#56 := [mp #30 #53]: #12
#31 := (not #12)
#63 := (or #20 #11 #31)
#64 := [def-axiom]: #63
#66 := [unit-resolution #64 #56]: #65
#76 := [unit-resolution #66 #75]: #20
#73 := (or #9 #11)
#54 := (iff #31 #21)
#55 := [rewrite]: #54
#32 := [not-or-elim #28]: #31
#59 := [mp #32 #55]: #21
#71 := (or #9 #11 #29)
#72 := [def-axiom]: #71
#74 := [unit-resolution #72 #59]: #73
#77 := [unit-resolution #74 #76 #75]: false
#78 := [lemma #77]: #11
#61 := (or #9 #57)
#58 := (or #9 #57 #31)
#60 := [def-axiom]: #58
#62 := [unit-resolution #60 #56]: #61
#79 := [unit-resolution #62 #78]: #9
#69 := (or #20 #57)
#67 := (or #20 #57 #29)
#68 := [def-axiom]: #67
#70 := [unit-resolution #68 #59]: #69
[unit-resolution #70 #79 #78]: false
b7a3c12d014ca4816865d67abe41008844e852f3 53 0
unsat
#2 := false
decl f5 :: S2
#10 := f5
decl f3 :: S2
#7 := f3
#12 := (= f3 f5)
#40 := (not #12)
#74 := (iff #40 false)
#1 := true
#69 := (not true)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #40 #69)
#67 := (iff #12 true)
#64 := (= f5 f5)
#62 := (iff #64 true)
#63 := [rewrite]: #62
#65 := (iff #12 #64)
decl f4 :: S2
#8 := f4
#11 := (= f4 f5)
#21 := (not #11)
#9 := (= f3 f4)
#28 := (not #9)
#29 := (or #28 #21 #12)
#34 := (not #29)
#13 := (implies #11 #12)
#14 := (implies #9 #13)
#15 := (not #14)
#35 := (iff #15 #34)
#32 := (iff #14 #29)
#22 := (or #21 #12)
#25 := (implies #9 #22)
#30 := (iff #25 #29)
#31 := [rewrite]: #30
#26 := (iff #14 #25)
#23 := (iff #13 #22)
#24 := [rewrite]: #23
#27 := [monotonicity #24]: #26
#33 := [trans #27 #31]: #32
#36 := [monotonicity #33]: #35
#17 := [asserted]: #15
#37 := [mp #17 #36]: #34
#39 := [not-or-elim #37]: #11
#38 := [not-or-elim #37]: #9
#61 := [trans #38 #39]: #12
#66 := [monotonicity #61]: #65
#68 := [trans #66 #63]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#41 := [not-or-elim #37]: #40
[mp #41 #75]: false
7b6d64f8e2fad3aa032b79fa9487b8cccfe3a0a4 42 0
unsat
#2 := false
decl f5 :: (-> S2 S3)
decl f4 :: S2
#8 := f4
#11 := (f5 f4)
decl f3 :: S2
#7 := f3
#10 := (f5 f3)
#12 := (= #10 #11)
#29 := (not #12)
#63 := (iff #29 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #29 #58)
#56 := (iff #12 true)
#51 := (= #11 #11)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #12 #51)
#9 := (= f3 f4)
#20 := (not #9)
#21 := (or #20 #12)
#24 := (not #21)
#13 := (implies #9 #12)
#14 := (not #13)
#25 := (iff #14 #24)
#22 := (iff #13 #21)
#23 := [rewrite]: #22
#26 := [monotonicity #23]: #25
#16 := [asserted]: #14
#27 := [mp #16 #26]: #24
#28 := [not-or-elim #27]: #9
#50 := [monotonicity #28]: #12
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#30 := [not-or-elim #27]: #29
[mp #30 #64]: false
f511fb1b0e8a27977d86f256b0e8ec93254257bd 47 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S1 S1)
decl f5 :: S1
#12 := f5
decl f4 :: S2
#7 := f4
#13 := (f3 f4 f5)
#14 := (= #13 f1)
#33 := (not #14)
#15 := (= f5 f1)
#8 := (:var 0 S1)
#9 := (f3 f4 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S1)) #10)
#24 := (not #11)
#25 := (or #24 #14 #15)
#28 := (not #25)
#16 := (or #14 #15)
#17 := (implies #11 #16)
#18 := (not #17)
#29 := (iff #18 #28)
#26 := (iff #17 #25)
#27 := [rewrite]: #26
#30 := [monotonicity #27]: #29
#20 := [asserted]: #18
#31 := [mp #20 #30]: #28
#34 := [not-or-elim #31]: #33
#478 := (pattern #9)
#479 := (forall (vars (?v0 S1)) (:pat #478) #10)
#482 := (iff #11 #479)
#480 := (iff #10 #10)
#481 := [refl]: #480
#483 := [quant-intro #481]: #482
#58 := (~ #11 #11)
#56 := (~ #10 #10)
#57 := [refl]: #56
#59 := [nnf-pos #57]: #58
#32 := [not-or-elim #31]: #11
#62 := [mp~ #32 #59]: #11
#484 := [mp #62 #483]: #479
#148 := (not #479)
#149 := (or #148 #14)
#141 := [quant-inst #12]: #149
[unit-resolution #141 #484 #34]: false
c24e42c8de71d8f3805a038868f7d2820e47f725 83 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S2 S1)
decl ?v0!0 :: S2
#60 := ?v0!0
#61 := (f3 ?v0!0 ?v0!0)
#62 := (= #61 f1)
#63 := (not #62)
#8 := (:var 0 S2)
#15 := (f3 #8 #8)
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S2)) #16)
#34 := (not #17)
#64 := (~ #34 #63)
#65 := [sk]: #64
#7 := (:var 1 S2)
#11 := (f3 #8 #7)
#12 := (= #11 f1)
#9 := (f3 #7 #8)
#10 := (= #9 f1)
#13 := (and #10 #12)
#14 := (forall (vars (?v0 S2) (?v1 S2)) #13)
#25 := (not #14)
#26 := (or #25 #17)
#29 := (not #26)
#18 := (implies #14 #17)
#19 := (not #18)
#30 := (iff #19 #29)
#27 := (iff #18 #26)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#21 := [asserted]: #19
#32 := [mp #21 #31]: #29
#35 := [not-or-elim #32]: #34
#66 := [mp~ #35 #65]: #63
#495 := (pattern #11)
#494 := (pattern #9)
#68 := (not #12)
#67 := (not #10)
#69 := (or #67 #68)
#70 := (not #69)
#496 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #494 #495) #70)
#73 := (forall (vars (?v0 S2) (?v1 S2)) #70)
#499 := (iff #73 #496)
#497 := (iff #70 #70)
#498 := [refl]: #497
#500 := [quant-intro #498]: #499
#74 := (iff #14 #73)
#71 := (iff #13 #70)
#72 := [rewrite]: #71
#75 := [quant-intro #72]: #74
#57 := (~ #14 #14)
#55 := (~ #13 #13)
#56 := [refl]: #55
#58 := [nnf-pos #56]: #57
#33 := [not-or-elim #32]: #14
#59 := [mp~ #33 #58]: #14
#76 := [mp #59 #75]: #73
#501 := [mp #76 #500]: #496
#171 := (not #496)
#150 := (or #171 #62)
#77 := (or #63 #63)
#164 := (not #77)
#486 := (or #171 #164)
#144 := (iff #486 #150)
#482 := (iff #150 #150)
#155 := [rewrite]: #482
#170 := (iff #164 #62)
#79 := (not #63)
#168 := (iff #79 #62)
#169 := [rewrite]: #168
#166 := (iff #164 #79)
#78 := (iff #77 #63)
#165 := [rewrite]: #78
#157 := [monotonicity #165]: #166
#167 := [trans #157 #169]: #170
#275 := [monotonicity #167]: #144
#156 := [trans #275 #155]: #144
#488 := [quant-inst #60 #60]: #486
#489 := [mp #488 #156]: #150
[unit-resolution #489 #501 #66]: false
d4525927e0ca94e2a8cd999f8854bd810a0a45a9 30 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#12 := (not #8)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#11 := (or #8 #10)
#13 := (and #11 #12)
#21 := (not #13)
#22 := (or #21 #10)
#25 := (not #22)
#14 := (implies #13 #10)
#15 := (not #14)
#26 := (iff #15 #25)
#23 := (iff #14 #22)
#24 := [rewrite]: #23
#27 := [monotonicity #24]: #26
#17 := [asserted]: #15
#28 := [mp #17 #27]: #25
#29 := [not-or-elim #28]: #13
#31 := [and-elim #29]: #12
#32 := (not #10)
#33 := [not-or-elim #28]: #32
#30 := [and-elim #29]: #11
[unit-resolution #30 #33 #31]: false
55b7bd861df00e9621f738450037b0df80372741 84 0
unsat
#2 := false
decl f1 :: S1
#3 := f1
decl f5 :: S1
#12 := f5
#13 := (= f5 f1)
decl f6 :: S1
#14 := f6
#15 := (= f6 f1)
#64 := (not #15)
#63 := (not #13)
#65 := (or #63 #64)
#66 := (not #65)
decl f4 :: S1
#9 := f4
#10 := (= f4 f1)
#58 := (not #10)
decl f3 :: S1
#7 := f3
#8 := (= f3 f1)
#57 := (not #8)
#59 := (or #57 #58)
#60 := (not #59)
#101 := [hypothesis]: #60
#89 := (or #59 #8)
#90 := [def-axiom]: #89
#102 := [unit-resolution #90 #101]: #8
#91 := (or #59 #10)
#92 := [def-axiom]: #91
#103 := [unit-resolution #92 #101]: #10
#11 := (and #8 #10)
#34 := (not #11)
#78 := (iff #34 #59)
#73 := (not #60)
#76 := (iff #73 #59)
#77 := [rewrite]: #76
#74 := (iff #34 #73)
#61 := (iff #11 #60)
#62 := [rewrite]: #61
#75 := [monotonicity #62]: #74
#79 := [trans #75 #77]: #78
#16 := (and #13 #15)
#17 := (or #11 #16)
#25 := (not #17)
#26 := (or #25 #11 #16)
#29 := (not #26)
#18 := (implies #17 #17)
#19 := (not #18)
#30 := (iff #19 #29)
#27 := (iff #18 #26)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#21 := [asserted]: #19
#32 := [mp #21 #31]: #29
#35 := [not-or-elim #32]: #34
#80 := [mp #35 #79]: #59
#104 := [unit-resolution #80 #103 #102]: false
#105 := [lemma #104]: #59
#69 := (or #60 #66)
#70 := (iff #17 #69)
#67 := (iff #16 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #62 #68]: #70
#33 := [not-or-elim #32]: #17
#72 := [mp #33 #71]: #69
#106 := [unit-resolution #72 #105]: #66
#95 := (or #65 #13)
#96 := [def-axiom]: #95
#107 := [unit-resolution #96 #106]: #13
#97 := (or #65 #15)
#98 := [def-axiom]: #97
#108 := [unit-resolution #98 #106]: #15
#36 := (not #16)
#86 := (iff #36 #65)
#81 := (not #66)
#84 := (iff #81 #65)
#85 := [rewrite]: #84
#82 := (iff #36 #81)
#83 := [monotonicity #68]: #82
#87 := [trans #83 #85]: #86
#37 := [not-or-elim #32]: #36
#88 := [mp #37 #87]: #65
[unit-resolution #88 #108 #107]: false
b837a165a2820c577cec1ceb0af63b70266981a2 21 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#8 := 0::Int
decl f4 :: S2
#7 := f4
#9 := (f3 f4 0::Int)
#10 := (= #9 #9)
#11 := (not #10)
#44 := (iff #11 false)
#1 := true
#39 := (not true)
#42 := (iff #39 false)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 true)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#30 := [asserted]: #11
[mp #30 #45]: false
02dc6935c407b4ef97754e97998a7b070a0b59ca 21 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#8 := 1::Int
decl f4 :: S2
#7 := f4
#9 := (f3 f4 1::Int)
#10 := (= #9 #9)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
44ca1520d643e1582af61ce0d7aa9f785f2ec009 31 0
unsat
#2 := false
#8 := 1::Int
#7 := 0::Int
#9 := (< 0::Int 1::Int)
#10 := (not #9)
#36 := (iff #10 false)
#1 := true
#31 := (not true)
#34 := (iff #31 false)
#35 := [rewrite]: #34
#32 := (iff #10 #31)
#29 := (iff #9 true)
#16 := (<= 1::Int 0::Int)
#17 := (not #16)
#27 := (iff #17 true)
#22 := (not false)
#25 := (iff #22 true)
#26 := [rewrite]: #25
#23 := (iff #17 #22)
#20 := (iff #16 false)
#21 := [rewrite]: #20
#24 := [monotonicity #21]: #23
#28 := [trans #24 #26]: #27
#18 := (iff #9 #17)
#19 := [rewrite]: #18
#30 := [trans #19 #28]: #29
#33 := [monotonicity #30]: #32
#37 := [trans #33 #35]: #36
#12 := [asserted]: #10
[mp #12 #37]: false
805b06e44b11919f00a075b70915715352398ed7 18 0
unsat
#2 := false
#8 := 1::Int
#7 := 0::Int
#9 := (<= 0::Int 1::Int)
#10 := (not #9)
#23 := (iff #10 false)
#1 := true
#18 := (not true)
#21 := (iff #18 false)
#22 := [rewrite]: #21
#19 := (iff #10 #18)
#16 := (iff #9 true)
#17 := [rewrite]: #16
#20 := [monotonicity #17]: #19
#24 := [trans #20 #22]: #23
#12 := [asserted]: #10
[mp #12 #24]: false
cb23173094fd6f97948421b52674d05e743e64af 31 0
unsat
#2 := false
#8 := 2345678901::Int
#7 := 123456789::Int
#9 := (< 123456789::Int 2345678901::Int)
#10 := (not #9)
#37 := (iff #10 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#30 := (iff #9 true)
#16 := (<= 2345678901::Int 123456789::Int)
#17 := (not #16)
#28 := (iff #17 true)
#23 := (not false)
#26 := (iff #23 true)
#27 := [rewrite]: #26
#24 := (iff #17 #23)
#20 := (iff #16 false)
#22 := [rewrite]: #20
#25 := [monotonicity #22]: #24
#29 := [trans #25 #27]: #28
#18 := (iff #9 #17)
#19 := [rewrite]: #18
#31 := [trans #19 #29]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#12 := [asserted]: #10
[mp #12 #38]: false
57796d4943fee61a1421439bead7ffbccb1f7332 32 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 1::Int
decl f4 :: S2
#7 := f4
#12 := (f3 f4 1::Int)
#8 := 0::Int
#10 := (+ 0::Int 1::Int)
#11 := (f3 f4 #10)
#13 := (= #11 #12)
#14 := (not #13)
#55 := (iff #14 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #14 #50)
#48 := (iff #13 true)
#43 := (= #12 #12)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#40 := (= #10 1::Int)
#41 := [rewrite]: #40
#42 := [monotonicity #41]: #13
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#33 := [asserted]: #14
[mp #33 #56]: false
94bb208fb4bd74ca4a0d2702fe8efdee4ab2e9da 39 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#11 := 1::Int
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#9 := f7
decl f6 :: S4
#8 := f6
#10 := (f5 f6 f7)
#12 := (+ #10 1::Int)
decl f4 :: S2
#7 := f4
#13 := (f3 f4 #12)
#14 := (= #13 #13)
#15 := (not #14)
#59 := (iff #15 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #15 #54)
#52 := (iff #14 true)
#41 := (+ 1::Int #10)
#44 := (f3 f4 #41)
#47 := (= #44 #44)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #14 #47)
#45 := (= #13 #44)
#42 := (= #12 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46 #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#34 := [asserted]: #15
[mp #34 #60]: false
c089e88f20d062979d8a0b72e27bcc2d6ec57d80 45 0
unsat
#2 := false
#10 := 1::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#11 := (+ #9 1::Int)
#12 := (< #9 #11)
#13 := (not #12)
#68 := (iff #13 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #13 #63)
#61 := (iff #12 true)
#40 := (+ 1::Int #9)
#46 := (<= #40 #9)
#47 := (not #46)
#59 := (iff #47 true)
#54 := (not false)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #47 #54)
#52 := (iff #46 false)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#50 := (iff #12 #47)
#43 := (< #9 #40)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #12 #43)
#41 := (= #11 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#62 := [trans #51 #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#33 := [asserted]: #13
[mp #33 #69]: false
ff72406b31ddd8b52ba835673c07232596ff0a01 438 0
unsat
#2 := false
decl f5 :: (-> S4 S3 Int)
decl f8 :: S3
#14 := f8
decl f6 :: S4
#8 := f6
#15 := (f5 f6 f8)
#11 := 1::Int
#53 := (+ 1::Int #15)
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#47 := (+ 1::Int #10)
#342 := (= #47 #53)
#309 := (not #342)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#56 := (f3 f4 #53)
#50 := (f3 f4 #47)
#59 := (= #50 #56)
#571 := (f5 f6 #50)
#388 := (f3 f4 #571)
#326 := (= #388 #56)
#320 := (= #56 #388)
#316 := (= #53 #571)
#333 := (= #47 #571)
#250 := -1::Int
#210 := (* -1::Int #571)
#211 := (+ #10 #210)
#560 := (<= #211 -1::Int)
#548 := (= #211 -1::Int)
#562 := (>= #10 -1::Int)
#27 := 0::Int
#409 := (>= #10 0::Int)
#387 := (= #10 0::Int)
#229 := (f3 f4 #10)
#402 := (f5 f6 #229)
#410 := (= #402 0::Int)
#373 := (not #409)
#389 := [hypothesis]: #373
#411 := (or #409 #410)
#28 := (:var 0 Int)
#30 := (f3 f4 #28)
#580 := (pattern #30)
#31 := (f5 f6 #30)
#36 := (= #31 0::Int)
#127 := (>= #28 0::Int)
#138 := (or #127 #36)
#587 := (forall (vars (?v0 Int)) (:pat #580) #138)
#141 := (forall (vars (?v0 Int)) #138)
#590 := (iff #141 #587)
#588 := (iff #138 #138)
#589 := [refl]: #588
#591 := [quant-intro #589]: #590
#155 := (~ #141 #141)
#153 := (~ #138 #138)
#154 := [refl]: #153
#156 := [nnf-pos #154]: #155
#29 := (<= 0::Int #28)
#96 := (or #29 #36)
#101 := (forall (vars (?v0 Int)) #96)
#142 := (iff #101 #141)
#139 := (iff #96 #138)
#125 := (iff #29 #127)
#126 := [rewrite]: #125
#140 := [monotonicity #126]: #139
#143 := [quant-intro #140]: #142
#35 := (< #28 0::Int)
#37 := (implies #35 #36)
#38 := (forall (vars (?v0 Int)) #37)
#102 := (iff #38 #101)
#99 := (iff #37 #96)
#79 := (not #29)
#93 := (implies #79 #36)
#97 := (iff #93 #96)
#98 := [rewrite]: #97
#94 := (iff #37 #93)
#88 := (iff #35 #79)
#90 := (iff #79 #79)
#75 := (iff #29 #29)
#76 := [rewrite]: #75
#91 := [monotonicity #76]: #90
#89 := [rewrite]: #88
#92 := [trans #89 #91]: #88
#95 := [monotonicity #92]: #94
#100 := [trans #95 #98]: #99
#103 := [quant-intro #100]: #102
#43 := [asserted]: #38
#104 := [mp #43 #103]: #101
#144 := [mp #104 #143]: #141
#157 := [mp~ #144 #156]: #141
#592 := [mp #157 #591]: #587
#272 := (not #587)
#414 := (or #272 #409 #410)
#507 := (or #272 #411)
#508 := (iff #507 #414)
#495 := [rewrite]: #508
#504 := [quant-inst #10]: #507
#497 := [mp #504 #495]: #414
#350 := [unit-resolution #497 #592]: #411
#351 := [unit-resolution #350 #389]: #410
#358 := (= #10 #402)
#416 := (= f7 #229)
#565 := (= #229 f7)
#22 := (:var 0 S3)
#23 := (f5 f6 #22)
#573 := (pattern #23)
#24 := (f3 f4 #23)
#25 := (= #24 #22)
#574 := (forall (vars (?v0 S3)) (:pat #573) #25)
#26 := (forall (vars (?v0 S3)) #25)
#577 := (iff #26 #574)
#575 := (iff #25 #25)
#576 := [refl]: #575
#578 := [quant-intro #576]: #577
#147 := (~ #26 #26)
#151 := (~ #25 #25)
#152 := [refl]: #151
#148 := [nnf-pos #152]: #147
#41 := [asserted]: #26
#149 := [mp~ #41 #148]: #26
#579 := [mp #149 #578]: #574
#354 := (not #574)
#561 := (or #354 #565)
#234 := [quant-inst #9]: #561
#395 := [unit-resolution #234 #579]: #565
#371 := [symm #395]: #416
#360 := [monotonicity #371]: #358
#361 := [trans #360 #351]: #387
#362 := (not #387)
#364 := (or #362 #409)
#365 := [th-lemma arith triangle-eq]: #364
#366 := [unit-resolution #365 #389 #361]: false
#367 := [lemma #366]: #409
#338 := (or #373 #562)
#336 := [th-lemma arith farkas 1 1]: #338
#339 := [unit-resolution #336 #367]: #562
#563 := (not #562)
#213 := (or #563 #548)
#32 := (= #31 #28)
#128 := (not #127)
#131 := (or #128 #32)
#581 := (forall (vars (?v0 Int)) (:pat #580) #131)
#134 := (forall (vars (?v0 Int)) #131)
#584 := (iff #134 #581)
#582 := (iff #131 #131)
#583 := [refl]: #582
#585 := [quant-intro #583]: #584
#124 := (~ #134 #134)
#150 := (~ #131 #131)
#123 := [refl]: #150
#145 := [nnf-pos #123]: #124
#80 := (or #79 #32)
#84 := (forall (vars (?v0 Int)) #80)
#135 := (iff #84 #134)
#132 := (iff #80 #131)
#129 := (iff #79 #128)
#130 := [monotonicity #126]: #129
#133 := [monotonicity #130]: #132
#136 := [quant-intro #133]: #135
#33 := (implies #29 #32)
#34 := (forall (vars (?v0 Int)) #33)
#85 := (iff #34 #84)
#81 := (iff #33 #80)
#82 := [rewrite]: #81
#77 := (iff #33 #33)
#78 := [monotonicity #76]: #77
#83 := [trans #78 #82]: #81
#86 := [quant-intro #83]: #85
#42 := [asserted]: #34
#87 := [mp #42 #86]: #84
#137 := [mp #87 #136]: #134
#146 := [mp~ #137 #145]: #134
#586 := [mp #146 #585]: #581
#552 := (not #581)
#553 := (or #552 #563 #548)
#566 := (= #571 #47)
#235 := (>= #47 0::Int)
#568 := (not #235)
#572 := (or #568 #566)
#554 := (or #552 #572)
#198 := (iff #554 #553)
#555 := (or #552 #213)
#558 := (iff #555 #553)
#197 := [rewrite]: #558
#192 := (iff #554 #555)
#550 := (iff #572 #213)
#206 := (iff #566 #548)
#212 := [rewrite]: #206
#222 := (iff #568 #563)
#221 := (iff #235 #562)
#226 := [rewrite]: #221
#564 := [monotonicity #226]: #222
#551 := [monotonicity #564 #212]: #550
#556 := [monotonicity #551]: #192
#559 := [trans #556 #197]: #198
#549 := [quant-inst #47]: #554
#557 := [mp #549 #559]: #553
#393 := [unit-resolution #557 #586]: #213
#327 := [unit-resolution #393 #339]: #548
#359 := (not #548)
#390 := (or #359 #560)
#392 := [th-lemma arith triangle-eq]: #390
#330 := [unit-resolution #392 #327]: #560
#546 := (>= #211 -1::Int)
#401 := (or #359 #546)
#403 := [th-lemma arith triangle-eq]: #401
#332 := [unit-resolution #403 #327]: #546
#329 := [th-lemma arith eq-propagate -1 -1 #332 #330]: #333
#324 := (= #53 #47)
#334 := [hypothesis]: #342
#314 := [symm #334]: #324
#317 := [trans #314 #329]: #316
#321 := [monotonicity #317]: #320
#319 := [symm #321]: #326
#325 := (= #50 #388)
#368 := (= #388 #50)
#370 := (or #354 #368)
#340 := [quant-inst #50]: #370
#337 := [unit-resolution #340 #579]: #368
#318 := [symm #337]: #325
#322 := [trans #318 #319]: #59
#68 := (not #59)
#19 := (= f7 f8)
#567 := (f3 f4 #15)
#223 := (= #567 f8)
#569 := (or #354 #223)
#570 := [quant-inst #14]: #569
#458 := [unit-resolution #570 #579]: #223
#378 := (= f7 #567)
#372 := (= #229 #567)
#405 := (= #10 #15)
#251 := (f5 f6 #56)
#532 := (* -1::Int #251)
#527 := (+ #15 #532)
#355 := (<= #527 -1::Int)
#531 := (= #527 -1::Int)
#535 := (>= #15 -1::Int)
#412 := (>= #15 0::Int)
#488 := (= #15 0::Int)
#413 := (f5 f6 #567)
#489 := (= #413 0::Int)
#492 := (not #412)
#493 := [hypothesis]: #492
#486 := (or #412 #489)
#499 := (or #272 #412 #489)
#500 := (or #272 #486)
#501 := (iff #500 #499)
#490 := [rewrite]: #501
#496 := [quant-inst #15]: #500
#491 := [mp #496 #490]: #499
#477 := [unit-resolution #491 #592]: #486
#457 := [unit-resolution #477 #493]: #489
#462 := (= #15 #413)
#460 := (= f8 #567)
#461 := [symm #458]: #460
#463 := [monotonicity #461]: #462
#464 := [trans #463 #457]: #488
#465 := (not #488)
#466 := (or #465 #412)
#467 := [th-lemma arith triangle-eq]: #466
#468 := [unit-resolution #467 #493 #464]: false
#469 := [lemma #468]: #412
#455 := (or #492 #535)
#450 := [th-lemma arith farkas 1 1]: #455
#456 := [unit-resolution #450 #469]: #535
#529 := (not #535)
#374 := (or #529 #531)
#518 := (or #552 #529 #531)
#534 := (= #251 #53)
#536 := (>= #53 0::Int)
#537 := (not #536)
#538 := (or #537 #534)
#519 := (or #552 #538)
#517 := (iff #519 #518)
#521 := (or #552 #374)
#522 := (iff #521 #518)
#523 := [rewrite]: #522
#515 := (iff #519 #521)
#375 := (iff #538 #374)
#526 := (iff #534 #531)
#533 := [rewrite]: #526
#530 := (iff #537 #529)
#539 := (iff #536 #535)
#528 := [rewrite]: #539
#525 := [monotonicity #528]: #530
#376 := [monotonicity #525 #533]: #375
#516 := [monotonicity #376]: #515
#524 := [trans #516 #523]: #517
#520 := [quant-inst #53]: #519
#353 := [mp #520 #524]: #518
#480 := [unit-resolution #353 #586]: #374
#442 := [unit-resolution #480 #456]: #531
#471 := (not #531)
#472 := (or #471 #355)
#474 := [th-lemma arith triangle-eq]: #472
#438 := [unit-resolution #474 #442]: #355
#356 := (>= #527 -1::Int)
#439 := (or #471 #356)
#440 := [th-lemma arith triangle-eq]: #439
#443 := [unit-resolution #440 #442]: #356
#448 := (+ #251 #210)
#452 := (<= #448 0::Int)
#470 := (= #251 #571)
#445 := (= #571 #251)
#158 := (not #19)
#454 := [hypothesis]: #158
#249 := (or #59 #19)
#69 := (iff #68 #19)
#16 := (+ #15 1::Int)
#17 := (f3 f4 #16)
#12 := (+ #10 1::Int)
#13 := (f3 f4 #12)
#18 := (= #13 #17)
#20 := (iff #18 #19)
#21 := (not #20)
#72 := (iff #21 #69)
#62 := (iff #59 #19)
#65 := (not #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #21 #65)
#63 := (iff #20 #62)
#60 := (iff #18 #59)
#57 := (= #17 #56)
#54 := (= #16 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#51 := (= #13 #50)
#48 := (= #12 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#73 := [trans #67 #71]: #72
#40 := [asserted]: #21
#74 := [mp #40 #73]: #69
#243 := (not #69)
#247 := (or #59 #19 #243)
#248 := [def-axiom]: #247
#246 := [unit-resolution #248 #74]: #249
#444 := [unit-resolution #246 #454]: #59
#446 := [monotonicity #444]: #445
#441 := [symm #446]: #470
#447 := (not #470)
#420 := (or #447 #452)
#421 := [th-lemma arith triangle-eq]: #420
#422 := [unit-resolution #421 #441]: #452
#453 := (>= #448 0::Int)
#315 := (or #447 #453)
#426 := [th-lemma arith triangle-eq]: #315
#427 := [unit-resolution #426 #441]: #453
#547 := (= #571 0::Int)
#418 := (not #547)
#509 := (= #251 0::Int)
#478 := (not #509)
#399 := (iff #478 #418)
#417 := (iff #509 #547)
#432 := (iff #547 #509)
#437 := [monotonicity #446]: #432
#363 := [symm #437]: #417
#423 := [monotonicity #363]: #399
#406 := (<= #251 0::Int)
#428 := (not #406)
#433 := (not #355)
#429 := (or #428 #492 #433)
#430 := [th-lemma arith assign-bounds -1 1]: #429
#431 := [unit-resolution #430 #438 #469]: #428
#434 := (or #478 #406)
#435 := [th-lemma arith triangle-eq]: #434
#436 := [unit-resolution #435 #431]: #478
#424 := [mp #436 #423]: #418
#269 := (or #562 #547)
#165 := (or #272 #562 #547)
#254 := (or #235 #547)
#542 := (or #272 #254)
#545 := (iff #542 #165)
#265 := (or #272 #269)
#544 := (iff #265 #165)
#541 := [rewrite]: #544
#266 := (iff #542 #265)
#270 := (iff #254 #269)
#271 := [monotonicity #226]: #270
#540 := [monotonicity #271]: #266
#255 := [trans #540 #541]: #545
#543 := [quant-inst #47]: #542
#256 := [mp #543 #255]: #165
#419 := [unit-resolution #256 #592]: #269
#425 := [unit-resolution #419 #424]: #562
#400 := [unit-resolution #393 #425]: #548
#394 := [unit-resolution #392 #400]: #560
#404 := [unit-resolution #403 #400]: #546
#415 := [th-lemma arith eq-propagate -1 -1 1 1 1 1 #404 #394 #427 #422 #443 #438]: #405
#377 := [monotonicity #415]: #372
#379 := [trans #371 #377]: #378
#380 := [trans #379 #458]: #19
#381 := [unit-resolution #454 #380]: false
#382 := [lemma #381]: #19
#245 := (or #68 #158)
#159 := (or #68 #158 #243)
#244 := [def-axiom]: #159
#236 := [unit-resolution #244 #74]: #245
#335 := [unit-resolution #236 #382]: #68
#323 := [unit-resolution #335 #322]: false
#311 := [lemma #323]: #309
#343 := (* -1::Int #53)
#349 := (+ #47 #343)
#328 := (<= #349 0::Int)
#383 := (* -1::Int #15)
#384 := (+ #10 #383)
#385 := (<= #384 0::Int)
#312 := [monotonicity #382]: #405
#310 := (not #405)
#313 := (or #310 #385)
#295 := [th-lemma arith triangle-eq]: #313
#297 := [unit-resolution #295 #312]: #385
#298 := (not #385)
#299 := (or #328 #298)
#300 := [th-lemma arith assign-bounds -1]: #299
#301 := [unit-resolution #300 #297]: #328
#331 := (>= #349 0::Int)
#386 := (>= #384 0::Int)
#302 := (or #310 #386)
#303 := [th-lemma arith triangle-eq]: #302
#304 := [unit-resolution #303 #312]: #386
#305 := (not #386)
#306 := (or #331 #305)
#307 := [th-lemma arith assign-bounds -1]: #306
#296 := [unit-resolution #307 #304]: #331
#285 := (not #331)
#308 := (not #328)
#287 := (or #342 #308 #285)
#288 := [th-lemma arith triangle-eq]: #287
#289 := [unit-resolution #288 #296 #301]: #342
[unit-resolution #289 #311]: false
cca0c63f74b94d280921e8468e9a688b21297a96 67 0
unsat
#2 := false
#13 := 1::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#16 := (+ #11 1::Int)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#15 := (+ #9 1::Int)
#17 := (+ #15 #16)
#12 := (+ #9 #11)
#14 := (+ #12 1::Int)
#18 := (< #14 #17)
#19 := (not #18)
#89 := (iff #19 false)
#1 := true
#84 := (not true)
#87 := (iff #84 false)
#88 := [rewrite]: #87
#85 := (iff #19 #84)
#82 := (iff #18 true)
#46 := (+ 1::Int #9 #11)
#58 := 2::Int
#59 := (+ 2::Int #9 #11)
#67 := (<= #59 #46)
#68 := (not #67)
#80 := (iff #68 true)
#75 := (not false)
#78 := (iff #75 true)
#79 := [rewrite]: #78
#76 := (iff #68 #75)
#73 := (iff #67 false)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#71 := (iff #18 #68)
#64 := (< #46 #59)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #18 #64)
#62 := (= #17 #59)
#52 := (+ 1::Int #11)
#49 := (+ 1::Int #9)
#55 := (+ #49 #52)
#60 := (= #55 #59)
#61 := [rewrite]: #60
#56 := (= #17 #55)
#53 := (= #16 #52)
#54 := [rewrite]: #53
#50 := (= #15 #49)
#51 := [rewrite]: #50
#57 := [monotonicity #51 #54]: #56
#63 := [trans #57 #61]: #62
#47 := (= #14 #46)
#48 := [rewrite]: #47
#66 := [monotonicity #48 #63]: #65
#72 := [trans #66 #70]: #71
#83 := [trans #72 #81]: #82
#86 := [monotonicity #83]: #85
#90 := [trans #86 #88]: #89
#39 := [asserted]: #19
[mp #39 #90]: false
4be683229ab203b6ad6e1365fb0baa3afc13e7f9 51 0
unsat
#2 := false
decl f5 :: (-> S4 S3 Int)
#16 := (:var 0 S3)
decl f6 :: S4
#8 := f6
#17 := (f5 f6 #16)
#551 := (pattern #17)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#18 := (f3 f4 #17)
#19 := (= #18 #16)
#552 := (forall (vars (?v0 S3)) (:pat #551) #19)
#20 := (forall (vars (?v0 S3)) #19)
#555 := (iff #20 #552)
#553 := (iff #19 #19)
#554 := [refl]: #553
#556 := [quant-intro #554]: #555
#124 := (~ #20 #20)
#128 := (~ #19 #19)
#129 := [refl]: #128
#125 := [nnf-pos #129]: #124
#34 := [asserted]: #20
#126 := [mp~ #34 #125]: #20
#557 := [mp #126 #556]: #552
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#42 := (f3 f4 #10)
#45 := (= #42 f7)
#48 := (not #45)
#11 := 0::Int
#12 := (+ #10 0::Int)
#13 := (f3 f4 #12)
#14 := (= #13 f7)
#15 := (not #14)
#49 := (iff #15 #48)
#46 := (iff #14 #45)
#43 := (= #13 #42)
#40 := (= #12 #10)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#33 := [asserted]: #15
#51 := [mp #33 #50]: #48
#222 := (not #552)
#223 := (or #222 #45)
#214 := [quant-inst #9]: #223
[unit-resolution #214 #51 #557]: false
36b449ec06f74f034486ed7a3a374426eb6148a7 51 0
unsat
#2 := false
decl f5 :: (-> S4 S3 Int)
#16 := (:var 0 S3)
decl f6 :: S4
#9 := f6
#17 := (f5 f6 #16)
#551 := (pattern #17)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#18 := (f3 f4 #17)
#19 := (= #18 #16)
#552 := (forall (vars (?v0 S3)) (:pat #551) #19)
#20 := (forall (vars (?v0 S3)) #19)
#555 := (iff #20 #552)
#553 := (iff #19 #19)
#554 := [refl]: #553
#556 := [quant-intro #554]: #555
#124 := (~ #20 #20)
#128 := (~ #19 #19)
#129 := [refl]: #128
#125 := [nnf-pos #129]: #124
#34 := [asserted]: #20
#126 := [mp~ #34 #125]: #20
#557 := [mp #126 #556]: #552
decl f7 :: S3
#10 := f7
#11 := (f5 f6 f7)
#42 := (f3 f4 #11)
#45 := (= #42 f7)
#48 := (not #45)
#8 := 0::Int
#12 := (+ 0::Int #11)
#13 := (f3 f4 #12)
#14 := (= #13 f7)
#15 := (not #14)
#49 := (iff #15 #48)
#46 := (iff #14 #45)
#43 := (= #13 #42)
#40 := (= #12 #11)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#33 := [asserted]: #15
#51 := [mp #33 #50]: #48
#222 := (not #552)
#223 := (or #222 #45)
#214 := [quant-inst #10]: #223
[unit-resolution #214 #51 #557]: false
6876f4e575b0c8bc3fe85299f4bf8864b5f3e6ce 41 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#9 := f7
decl f6 :: S4
#8 := f6
#10 := (f5 f6 f7)
decl f8 :: S3
#11 := f8
#12 := (f5 f6 f8)
#15 := (+ #12 #10)
decl f4 :: S2
#7 := f4
#16 := (f3 f4 #15)
#13 := (+ #10 #12)
#14 := (f3 f4 #13)
#17 := (= #14 #16)
#18 := (not #17)
#108 := (iff #18 false)
#1 := true
#103 := (not true)
#106 := (iff #103 false)
#107 := [rewrite]: #106
#104 := (iff #18 #103)
#101 := (iff #17 true)
#96 := (= #14 #14)
#99 := (iff #96 true)
#100 := [rewrite]: #99
#97 := (iff #17 #96)
#94 := (= #16 #14)
#92 := (= #15 #13)
#93 := [rewrite]: #92
#95 := [monotonicity #93]: #94
#98 := [monotonicity #95]: #97
#102 := [trans #98 #100]: #101
#105 := [monotonicity #102]: #104
#109 := [trans #105 #107]: #108
#37 := [asserted]: #18
[mp #37 #109]: false
b54b0a8e9089b1fc3a30b6ccbd0b1a995d0b98ef 52 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 S3 Int)
decl f9 :: S3
#13 := f9
decl f6 :: S4
#8 := f6
#14 := (f5 f6 f9)
decl f8 :: S3
#11 := f8
#12 := (f5 f6 f8)
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#18 := (+ #10 #12)
#19 := (+ #18 #14)
decl f4 :: S2
#7 := f4
#20 := (f3 f4 #19)
#15 := (+ #12 #14)
#16 := (+ #10 #15)
#17 := (f3 f4 #16)
#21 := (= #17 #20)
#22 := (not #21)
#70 := (iff #22 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #22 #65)
#63 := (iff #21 true)
#48 := (+ #10 #12 #14)
#51 := (f3 f4 #48)
#58 := (= #51 #51)
#61 := (iff #58 true)
#62 := [rewrite]: #61
#59 := (iff #21 #58)
#56 := (= #20 #51)
#54 := (= #19 #48)
#55 := [rewrite]: #54
#57 := [monotonicity #55]: #56
#52 := (= #17 #51)
#49 := (= #16 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#60 := [monotonicity #53 #57]: #59
#64 := [trans #60 #62]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#41 := [asserted]: #22
[mp #41 #71]: false
dc4471261a7af4fe9cbee9553569694766037bc0 408 0
unsat
#2 := false
#15 := 0::Int
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#9 := f7
decl f6 :: S4
#8 := f6
#10 := (f5 f6 f7)
#385 := (= #10 0::Int)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#554 := (f3 f4 #10)
#348 := (f5 f6 #554)
#349 := (= #348 0::Int)
decl f8 :: S3
#11 := f8
#12 := (f5 f6 f8)
#228 := (f3 f4 #12)
#505 := (f5 f6 #228)
#350 := (= #505 0::Int)
#346 := (>= #10 0::Int)
#408 := (not #349)
#364 := [hypothesis]: #408
#502 := (or #346 #349)
#28 := (:var 0 Int)
#30 := (f3 f4 #28)
#573 := (pattern #30)
#31 := (f5 f6 #30)
#36 := (= #31 0::Int)
#104 := (>= #28 0::Int)
#115 := (or #104 #36)
#580 := (forall (vars (?v0 Int)) (:pat #573) #115)
#118 := (forall (vars (?v0 Int)) #115)
#583 := (iff #118 #580)
#581 := (iff #115 #115)
#582 := [refl]: #581
#584 := [quant-intro #582]: #583
#132 := (~ #118 #118)
#130 := (~ #115 #115)
#131 := [refl]: #130
#133 := [nnf-pos #131]: #132
#29 := (<= 0::Int #28)
#73 := (or #29 #36)
#78 := (forall (vars (?v0 Int)) #73)
#119 := (iff #78 #118)
#116 := (iff #73 #115)
#102 := (iff #29 #104)
#103 := [rewrite]: #102
#117 := [monotonicity #103]: #116
#120 := [quant-intro #117]: #119
#35 := (< #28 0::Int)
#37 := (implies #35 #36)
#38 := (forall (vars (?v0 Int)) #37)
#79 := (iff #38 #78)
#76 := (iff #37 #73)
#56 := (not #29)
#70 := (implies #56 #36)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #37 #70)
#65 := (iff #35 #56)
#67 := (iff #56 #56)
#52 := (iff #29 #29)
#53 := [rewrite]: #52
#68 := [monotonicity #53]: #67
#66 := [rewrite]: #65
#69 := [trans #66 #68]: #65
#72 := [monotonicity #69]: #71
#77 := [trans #72 #75]: #76
#80 := [quant-intro #77]: #79
#43 := [asserted]: #38
#81 := [mp #43 #80]: #78
#121 := [mp #81 #120]: #118
#134 := [mp~ #121 #133]: #118
#585 := [mp #134 #584]: #580
#263 := (not #580)
#506 := (or #263 #346 #349)
#504 := (or #263 #502)
#389 := (iff #504 #506)
#390 := [rewrite]: #389
#507 := [quant-inst #10]: #504
#391 := [mp #507 #390]: #506
#365 := [unit-resolution #391 #585]: #502
#370 := [unit-resolution #365 #364]: #346
#448 := (not #346)
#392 := (or #448 #350)
#400 := (= #12 0::Int)
#13 := (+ #10 #12)
#14 := (f3 f4 #13)
#219 := (f5 f6 #14)
#347 := -1::Int
#203 := (* -1::Int #219)
#204 := (+ #10 #12 #203)
#550 := (<= #204 0::Int)
#541 := (= #204 0::Int)
#559 := (>= #13 0::Int)
#503 := (>= #12 0::Int)
#453 := (not #350)
#435 := [hypothesis]: #453
#498 := (or #503 #350)
#496 := (or #263 #503 #350)
#499 := (or #263 #498)
#399 := (iff #499 #496)
#401 := [rewrite]: #399
#384 := [quant-inst #12]: #499
#402 := [mp #384 #401]: #496
#431 := [unit-resolution #402 #585]: #498
#432 := [unit-resolution #431 #435]: #503
#457 := [hypothesis]: #346
#433 := (not #503)
#436 := (or #559 #448 #433)
#437 := [th-lemma arith assign-bounds -1 -1]: #436
#438 := [unit-resolution #437 #457 #432]: #559
#565 := (not #559)
#205 := (or #565 #541)
#32 := (= #31 #28)
#105 := (not #104)
#108 := (or #105 #32)
#574 := (forall (vars (?v0 Int)) (:pat #573) #108)
#111 := (forall (vars (?v0 Int)) #108)
#577 := (iff #111 #574)
#575 := (iff #108 #108)
#576 := [refl]: #575
#578 := [quant-intro #576]: #577
#123 := (~ #111 #111)
#125 := (~ #108 #108)
#122 := [refl]: #125
#126 := [nnf-pos #122]: #123
#57 := (or #56 #32)
#61 := (forall (vars (?v0 Int)) #57)
#112 := (iff #61 #111)
#109 := (iff #57 #108)
#106 := (iff #56 #105)
#107 := [monotonicity #103]: #106
#110 := [monotonicity #107]: #109
#113 := [quant-intro #110]: #112
#33 := (implies #29 #32)
#34 := (forall (vars (?v0 Int)) #33)
#62 := (iff #34 #61)
#58 := (iff #33 #57)
#59 := [rewrite]: #58
#54 := (iff #33 #33)
#55 := [monotonicity #53]: #54
#60 := [trans #55 #59]: #58
#63 := [quant-intro #60]: #62
#42 := [asserted]: #34
#64 := [mp #42 #63]: #61
#114 := [mp #64 #113]: #111
#127 := [mp~ #114 #126]: #111
#579 := [mp #127 #578]: #574
#544 := (not #574)
#545 := (or #544 #565 #541)
#556 := (= #219 #13)
#215 := (or #565 #556)
#546 := (or #544 #215)
#190 := (iff #546 #545)
#542 := (or #544 #205)
#549 := (iff #542 #545)
#551 := [rewrite]: #549
#548 := (iff #546 #542)
#206 := (iff #215 #205)
#199 := (iff #556 #541)
#557 := [rewrite]: #199
#543 := [monotonicity #557]: #206
#185 := [monotonicity #543]: #548
#191 := [trans #185 #551]: #190
#547 := [quant-inst #13]: #546
#552 := [mp #547 #191]: #545
#439 := [unit-resolution #552 #579]: #205
#434 := [unit-resolution #439 #438]: #541
#440 := (not #541)
#413 := (or #440 #550)
#414 := [th-lemma arith triangle-eq]: #413
#415 := [unit-resolution #414 #434]: #550
#553 := (>= #204 0::Int)
#259 := (<= #219 0::Int)
#539 := (= #219 0::Int)
#16 := (f3 f4 0::Int)
#537 := (f5 f6 #16)
#534 := (= #537 0::Int)
#524 := (or #544 #534)
#247 := (>= 0::Int 0::Int)
#262 := (not #247)
#538 := (or #262 #534)
#525 := (or #544 #538)
#526 := (iff #525 #524)
#368 := (iff #524 #524)
#369 := [rewrite]: #368
#518 := (iff #538 #534)
#528 := (or false #534)
#522 := (iff #528 #534)
#523 := [rewrite]: #522
#532 := (iff #538 #528)
#527 := (iff #262 false)
#1 := true
#250 := (not true)
#530 := (iff #250 false)
#244 := [rewrite]: #530
#251 := (iff #262 #250)
#248 := (iff #247 true)
#249 := [rewrite]: #248
#529 := [monotonicity #249]: #251
#531 := [trans #529 #244]: #527
#521 := [monotonicity #531]: #532
#519 := [trans #521 #523]: #518
#367 := [monotonicity #519]: #526
#511 := [trans #367 #369]: #526
#520 := [quant-inst #15]: #525
#512 := [mp #520 #511]: #524
#497 := [unit-resolution #512 #579]: #534
#462 := (= #219 #537)
#17 := (= #14 #16)
#19 := (= f8 #16)
#136 := (not #19)
#18 := (= f7 #16)
#135 := (not #18)
#137 := (or #135 #136)
#464 := (= #13 0::Int)
#473 := (= #13 #537)
#491 := (= #12 #537)
#138 := (not #137)
#407 := [hypothesis]: #138
#151 := (or #137 #19)
#237 := [def-axiom]: #151
#501 := [unit-resolution #237 #407]: #19
#492 := [monotonicity #501]: #491
#476 := (= #13 #12)
#395 := (= #10 #12)
#479 := (= f7 f8)
#488 := (= #16 f8)
#490 := [symm #501]: #488
#150 := (or #137 #18)
#236 := [def-axiom]: #150
#482 := [unit-resolution #236 #407]: #18
#481 := [trans #482 #490]: #479
#475 := [monotonicity #481]: #395
#472 := (= #13 #10)
#487 := (= #10 #13)
#495 := (<= #12 0::Int)
#493 := [trans #492 #497]: #400
#489 := (not #400)
#494 := (or #489 #495)
#483 := [th-lemma arith triangle-eq]: #494
#484 := [unit-resolution #483 #493]: #495
#485 := (or #489 #503)
#486 := [th-lemma arith triangle-eq]: #485
#480 := [unit-resolution #486 #493]: #503
#471 := [th-lemma arith eq-propagate -1 -1 #480 #484]: #487
#474 := [symm #471]: #472
#477 := [trans #474 #475]: #476
#478 := [trans #477 #492]: #473
#465 := [trans #478 #497]: #464
#467 := [monotonicity #465]: #17
#47 := (not #17)
#560 := (or #47 #137)
#144 := (iff #17 #137)
#20 := (and #18 #19)
#48 := (iff #47 #20)
#147 := (iff #48 #144)
#141 := (iff #47 #138)
#145 := (iff #141 #144)
#146 := [rewrite]: #145
#142 := (iff #48 #141)
#139 := (iff #20 #138)
#140 := [rewrite]: #139
#143 := [monotonicity #140]: #142
#148 := [trans #143 #146]: #147
#21 := (iff #17 #20)
#22 := (not #21)
#49 := (iff #22 #48)
#50 := [rewrite]: #49
#40 := [asserted]: #22
#51 := [mp #40 #50]: #48
#149 := [mp #51 #148]: #144
#240 := (not #144)
#222 := (or #47 #137 #240)
#558 := [def-axiom]: #222
#216 := [unit-resolution #558 #149]: #560
#500 := [unit-resolution #216 #407]: #47
#468 := [unit-resolution #500 #467]: false
#469 := [lemma #468]: #137
#239 := (or #17 #138)
#241 := (or #17 #138 #240)
#242 := [def-axiom]: #241
#243 := [unit-resolution #242 #149]: #239
#461 := [unit-resolution #243 #469]: #17
#452 := [monotonicity #461]: #462
#463 := [trans #452 #497]: #539
#441 := (not #539)
#442 := (or #441 #259)
#444 := [th-lemma arith triangle-eq]: #442
#445 := [unit-resolution #444 #463]: #259
#308 := (not #259)
#419 := (or #553 #448 #433 #308)
#420 := [th-lemma arith assign-bounds -1 -1 1]: #419
#421 := [unit-resolution #420 #457 #445 #432]: #553
#533 := (>= #219 0::Int)
#426 := (or #441 #533)
#422 := [th-lemma arith triangle-eq]: #426
#423 := [unit-resolution #422 #463]: #533
#403 := (* -1::Int #12)
#404 := (+ #10 #403)
#456 := (<= #404 0::Int)
#447 := (not #550)
#424 := (or #456 #433 #308 #447)
#427 := [th-lemma arith assign-bounds 1 -1/2 -1/2]: #424
#428 := [unit-resolution #427 #415 #432 #445]: #456
#406 := (>= #404 0::Int)
#443 := (or #406 #447 #448)
#458 := (not #406)
#459 := [hypothesis]: #458
#460 := [hypothesis]: #550
#446 := [th-lemma arith farkas -1/2 -1/2 -1/2 1 #445 #460 #459 #457]: false
#449 := [lemma #446]: #443
#429 := [unit-resolution #449 #415 #457]: #406
#425 := [th-lemma arith eq-propagate 1/2 1/2 -1/2 -1/2 -1/2 -1/2 #429 #428 #423 #445 #421 #415]: #400
#430 := (= #505 #12)
#561 := (= #228 f8)
#23 := (:var 0 S3)
#24 := (f5 f6 #23)
#566 := (pattern #24)
#25 := (f3 f4 #24)
#26 := (= #25 #23)
#567 := (forall (vars (?v0 S3)) (:pat #566) #26)
#27 := (forall (vars (?v0 S3)) #26)
#570 := (iff #27 #567)
#568 := (iff #26 #26)
#569 := [refl]: #568
#571 := [quant-intro #569]: #570
#128 := (~ #27 #27)
#100 := (~ #26 #26)
#101 := [refl]: #100
#129 := [nnf-pos #101]: #128
#41 := [asserted]: #27
#124 := [mp~ #41 #129]: #27
#572 := [mp #124 #571]: #567
#562 := (not #567)
#555 := (or #562 #561)
#214 := [quant-inst #11]: #555
#509 := [unit-resolution #214 #572]: #561
#410 := [monotonicity #509]: #430
#356 := [trans #410 #425]: #350
#411 := [unit-resolution #435 #356]: false
#416 := [lemma #411]: #392
#371 := [unit-resolution #416 #370]: #350
#353 := (= #348 #505)
#510 := (= #12 #505)
#515 := (= f8 #228)
#516 := [symm #509]: #515
#517 := [monotonicity #516]: #510
#344 := (= #348 #12)
#372 := [trans #517 #371]: #400
#373 := [unit-resolution #486 #372]: #503
#374 := [unit-resolution #437 #373 #370]: #559
#375 := [unit-resolution #439 #374]: #541
#376 := [unit-resolution #414 #375]: #550
#377 := [unit-resolution #427 #376 #373 #445]: #456
#378 := [unit-resolution #449 #376 #370]: #406
#379 := (not #456)
#380 := (or #395 #379 #458)
#381 := [th-lemma arith triangle-eq]: #380
#366 := [unit-resolution #381 #378 #377]: #395
#382 := (= #348 #10)
#227 := (= #554 f7)
#563 := (or #562 #227)
#564 := [quant-inst #9]: #563
#418 := [unit-resolution #564 #572]: #227
#343 := [monotonicity #418]: #382
#351 := [trans #343 #366]: #344
#354 := [trans #351 #517]: #353
#355 := [trans #354 #371]: #349
#357 := [unit-resolution #364 #355]: false
#358 := [lemma #357]: #349
#352 := (= #10 #348)
#386 := (= f7 #554)
#393 := [symm #418]: #386
#383 := [monotonicity #393]: #352
#360 := [trans #383 #358]: #385
#388 := (or #408 #18)
#394 := (= #554 #16)
#412 := [hypothesis]: #349
#387 := [trans #383 #412]: #385
#396 := [monotonicity #387]: #394
#397 := [trans #393 #396]: #18
#417 := [hypothesis]: #135
#398 := [unit-resolution #417 #397]: false
#409 := [lemma #398]: #388
#361 := [unit-resolution #409 #358]: #18
#238 := (or #138 #135 #136)
#229 := [def-axiom]: #238
#362 := [unit-resolution #229 #361 #469]: #136
#454 := (or #453 #19)
#466 := (= #228 #16)
#508 := [hypothesis]: #350
#405 := [trans #517 #508]: #400
#470 := [monotonicity #405]: #466
#450 := [trans #516 #470]: #19
#514 := [hypothesis]: #136
#451 := [unit-resolution #514 #450]: false
#455 := [lemma #451]: #454
#345 := [unit-resolution #455 #362]: #453
#363 := [unit-resolution #416 #345]: #448
#333 := (not #385)
#334 := (or #333 #346)
#335 := [th-lemma arith triangle-eq]: #334
[unit-resolution #335 #363 #360]: false
3c81c3713e9b37bc83515c2cd6394e0a05b5171d 65 0
unsat
#2 := false
decl f5 :: (-> S4 S3 Int)
#16 := (:var 0 S3)
decl f6 :: S4
#8 := f6
#17 := (f5 f6 #16)
#564 := (pattern #17)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#18 := (f3 f4 #17)
#19 := (= #18 #16)
#565 := (forall (vars (?v0 S3)) (:pat #564) #19)
#20 := (forall (vars (?v0 S3)) #19)
#568 := (iff #20 #565)
#566 := (iff #19 #19)
#567 := [refl]: #566
#569 := [quant-intro #567]: #568
#138 := (~ #20 #20)
#142 := (~ #19 #19)
#143 := [refl]: #142
#139 := [nnf-pos #143]: #138
#34 := [asserted]: #20
#140 := [mp~ #34 #139]: #20
#570 := [mp #140 #569]: #565
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#56 := (f3 f4 #10)
#59 := (= #56 f7)
#62 := (not #59)
#11 := 0::Int
#12 := (- #10 0::Int)
#13 := (f3 f4 #12)
#14 := (= #13 f7)
#15 := (not #14)
#63 := (iff #15 #62)
#60 := (iff #14 #59)
#57 := (= #13 #56)
#54 := (= #12 #10)
#40 := -1::Int
#41 := (* -1::Int 0::Int)
#42 := (+ #10 #41)
#52 := (= #42 #10)
#47 := (+ #10 0::Int)
#50 := (= #47 #10)
#51 := [rewrite]: #50
#48 := (= #42 #47)
#45 := (= #41 0::Int)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#43 := (= #12 #42)
#44 := [rewrite]: #43
#55 := [trans #44 #53]: #54
#58 := [monotonicity #55]: #57
#61 := [monotonicity #58]: #60
#64 := [monotonicity #61]: #63
#33 := [asserted]: #15
#65 := [mp #33 #64]: #62
#150 := (not #565)
#236 := (or #150 #59)
#237 := [quant-inst #9]: #236
[unit-resolution #237 #65 #570]: false
7a1aee105dba714bf6a08b99cf3f498e052aeddf 156 0
unsat
#2 := false
decl f7 :: (-> S4 Int S3)
#16 := 0::Int
decl f8 :: S4
#13 := f8
#17 := (f7 f8 0::Int)
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#49 := -1::Int
#50 := (* -1::Int #11)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#51 := (+ #9 #50)
#54 := (f7 f8 #51)
#57 := (= #54 #17)
#256 := (f3 f4 #54)
#530 := (f7 f8 #256)
#509 := (= #530 #17)
#405 := (= #17 #530)
#403 := (= 0::Int #256)
#219 := (= #256 0::Int)
#26 := (:var 0 Int)
#28 := (f7 f8 #26)
#587 := (pattern #28)
#29 := (f3 f4 #28)
#34 := (= #29 0::Int)
#133 := (>= #26 0::Int)
#145 := (or #133 #34)
#594 := (forall (vars (?v0 Int)) (:pat #587) #145)
#148 := (forall (vars (?v0 Int)) #145)
#597 := (iff #148 #594)
#595 := (iff #145 #145)
#596 := [refl]: #595
#598 := [quant-intro #596]: #597
#162 := (~ #148 #148)
#158 := (~ #145 #145)
#159 := [refl]: #158
#163 := [nnf-pos #159]: #162
#27 := (<= 0::Int #26)
#96 := (or #27 #34)
#101 := (forall (vars (?v0 Int)) #96)
#149 := (iff #101 #148)
#146 := (iff #96 #145)
#132 := (iff #27 #133)
#134 := [rewrite]: #132
#147 := [monotonicity #134]: #146
#150 := [quant-intro #147]: #149
#33 := (< #26 0::Int)
#35 := (implies #33 #34)
#36 := (forall (vars (?v0 Int)) #35)
#102 := (iff #36 #101)
#99 := (iff #35 #96)
#79 := (not #27)
#93 := (implies #79 #34)
#97 := (iff #93 #96)
#98 := [rewrite]: #97
#94 := (iff #35 #93)
#88 := (iff #33 #79)
#90 := (iff #79 #79)
#75 := (iff #27 #27)
#76 := [rewrite]: #75
#91 := [monotonicity #76]: #90
#89 := [rewrite]: #88
#92 := [trans #89 #91]: #88
#95 := [monotonicity #92]: #94
#100 := [trans #95 #98]: #99
#103 := [quant-intro #100]: #102
#41 := [asserted]: #36
#104 := [mp #41 #103]: #101
#151 := [mp #104 #150]: #148
#164 := [mp~ #151 #163]: #148
#599 := [mp #164 #598]: #594
#126 := (>= #51 0::Int)
#128 := (not #126)
#45 := (<= #11 #9)
#46 := (not #45)
#129 := (iff #46 #128)
#125 := (iff #45 #126)
#127 := [rewrite]: #125
#130 := [monotonicity #127]: #129
#63 := (or #45 #57)
#68 := (not #63)
#14 := (- #9 #11)
#15 := (f7 f8 #14)
#18 := (= #15 #17)
#12 := (< #9 #11)
#19 := (implies #12 #18)
#20 := (not #19)
#69 := (iff #20 #68)
#66 := (iff #19 #63)
#60 := (implies #46 #57)
#64 := (iff #60 #63)
#65 := [rewrite]: #64
#61 := (iff #19 #60)
#58 := (iff #18 #57)
#55 := (= #15 #54)
#52 := (= #14 #51)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#59 := [monotonicity #56]: #58
#47 := (iff #12 #46)
#48 := [rewrite]: #47
#62 := [monotonicity #48 #59]: #61
#67 := [trans #62 #65]: #66
#70 := [monotonicity #67]: #69
#38 := [asserted]: #20
#71 := [mp #38 #70]: #68
#72 := [not-or-elim #71]: #46
#131 := [mp #72 #130]: #128
#558 := (not #594)
#559 := (or #558 #126 #219)
#220 := (or #126 #219)
#560 := (or #558 #220)
#556 := (iff #560 #559)
#562 := [rewrite]: #556
#561 := [quant-inst #51]: #560
#200 := [mp #561 #562]: #559
#520 := [unit-resolution #200 #131 #599]: #219
#404 := [symm #520]: #403
#364 := [monotonicity #404]: #405
#510 := [symm #364]: #509
#512 := (= #54 #530)
#524 := (= #530 #54)
#21 := (:var 0 S3)
#22 := (f3 f4 #21)
#580 := (pattern #22)
#23 := (f7 f8 #22)
#24 := (= #23 #21)
#581 := (forall (vars (?v0 S3)) (:pat #580) #24)
#25 := (forall (vars (?v0 S3)) #24)
#584 := (iff #25 #581)
#582 := (iff #24 #24)
#583 := [refl]: #582
#585 := [quant-intro #583]: #584
#156 := (~ #25 #25)
#154 := (~ #24 #24)
#155 := [refl]: #154
#157 := [nnf-pos #155]: #156
#39 := [asserted]: #25
#123 := [mp~ #39 #157]: #25
#586 := [mp #123 #585]: #581
#253 := (not #581)
#518 := (or #253 #524)
#521 := [quant-inst #54]: #518
#519 := [unit-resolution #521 #586]: #524
#414 := [symm #519]: #512
#513 := [trans #414 #510]: #57
#73 := (not #57)
#74 := [not-or-elim #71]: #73
[unit-resolution #74 #513]: false
18cfec257bf09c7e04f15e4363ab463f93e36d3c 297 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#15 := 0::Int
decl f4 :: S2
#7 := f4
#16 := (f3 f4 0::Int)
decl f5 :: (-> S4 S3 Int)
decl f8 :: S3
#11 := f8
decl f6 :: S4
#8 := f6
#12 := (f5 f6 f8)
#51 := -1::Int
#52 := (* -1::Int #12)
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#53 := (+ #10 #52)
#56 := (f3 f4 #53)
#59 := (= #56 #16)
#248 := (f5 f6 #56)
#490 := (f3 f4 #248)
#435 := (= #490 #16)
#453 := (= #16 #490)
#449 := (= 0::Int #248)
#232 := (= #248 0::Int)
#267 := (>= #53 0::Int)
#268 := (not #267)
#66 := (* -1::Int #10)
#128 := (+ #66 #12)
#131 := (f3 f4 #128)
#392 := (f5 f6 #131)
#515 := (<= #392 0::Int)
#463 := (not #515)
#521 := (= #392 0::Int)
#477 := (not #521)
#134 := (= #131 #16)
#497 := (f3 f4 #392)
#484 := (= #497 #16)
#480 := (= #16 #497)
#478 := (= 0::Int #392)
#495 := [hypothesis]: #521
#479 := [symm #495]: #478
#481 := [monotonicity #479]: #480
#485 := [symm #481]: #484
#482 := (= #131 #497)
#499 := (= #497 #131)
#23 := (:var 0 S3)
#24 := (f5 f6 #23)
#591 := (pattern #24)
#25 := (f3 f4 #24)
#26 := (= #25 #23)
#592 := (forall (vars (?v0 S3)) (:pat #591) #26)
#27 := (forall (vars (?v0 S3)) #26)
#595 := (iff #27 #592)
#593 := (iff #26 #26)
#594 := [refl]: #593
#596 := [quant-intro #594]: #595
#171 := (~ #27 #27)
#167 := (~ #26 #26)
#168 := [refl]: #167
#172 := [nnf-pos #168]: #171
#45 := [asserted]: #27
#169 := [mp~ #45 #172]: #27
#597 := [mp #169 #596]: #592
#264 := (not #592)
#493 := (or #264 #499)
#494 := [quant-inst #131]: #493
#491 := [unit-resolution #494 #597]: #499
#483 := [symm #491]: #482
#486 := [trans #483 #485]: #134
#137 := (not #134)
#67 := (+ #12 #66)
#70 := (f3 f4 #67)
#73 := (= #70 #16)
#76 := (not #73)
#138 := (iff #76 #137)
#135 := (iff #73 #134)
#132 := (= #70 #131)
#129 := (= #67 #128)
#130 := [rewrite]: #129
#133 := [monotonicity #130]: #132
#136 := [monotonicity #133]: #135
#139 := [monotonicity #136]: #138
#18 := (- #12 #10)
#19 := (f3 f4 #18)
#20 := (= #19 #16)
#43 := (not #20)
#77 := (iff #43 #76)
#74 := (iff #20 #73)
#71 := (= #19 #70)
#68 := (= #18 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#13 := (- #10 #12)
#14 := (f3 f4 #13)
#17 := (= #14 #16)
#21 := (or #17 #20)
#22 := (not #21)
#40 := [asserted]: #22
#44 := [not-or-elim #40]: #43
#79 := [mp #44 #78]: #76
#142 := [mp #79 #139]: #137
#487 := [unit-resolution #142 #486]: false
#488 := [lemma #487]: #477
#507 := (>= #392 0::Int)
#536 := (<= #53 0::Int)
#409 := (or #536 #521)
#28 := (:var 0 Int)
#30 := (f3 f4 #28)
#598 := (pattern #30)
#31 := (f5 f6 #30)
#36 := (= #31 0::Int)
#144 := (>= #28 0::Int)
#156 := (or #144 #36)
#605 := (forall (vars (?v0 Int)) (:pat #598) #156)
#159 := (forall (vars (?v0 Int)) #156)
#608 := (iff #159 #605)
#606 := (iff #156 #156)
#607 := [refl]: #606
#609 := [quant-intro #607]: #608
#173 := (~ #159 #159)
#165 := (~ #156 #156)
#166 := [refl]: #165
#174 := [nnf-pos #166]: #173
#29 := (<= 0::Int #28)
#101 := (or #29 #36)
#106 := (forall (vars (?v0 Int)) #101)
#160 := (iff #106 #159)
#157 := (iff #101 #156)
#143 := (iff #29 #144)
#145 := [rewrite]: #143
#158 := [monotonicity #145]: #157
#161 := [quant-intro #158]: #160
#35 := (< #28 0::Int)
#37 := (implies #35 #36)
#38 := (forall (vars (?v0 Int)) #37)
#107 := (iff #38 #106)
#104 := (iff #37 #101)
#84 := (not #29)
#98 := (implies #84 #36)
#102 := (iff #98 #101)
#103 := [rewrite]: #102
#99 := (iff #37 #98)
#93 := (iff #35 #84)
#95 := (iff #84 #84)
#80 := (iff #29 #29)
#81 := [rewrite]: #80
#96 := [monotonicity #81]: #95
#94 := [rewrite]: #93
#97 := [trans #94 #96]: #93
#100 := [monotonicity #97]: #99
#105 := [trans #100 #103]: #104
#108 := [quant-intro #105]: #107
#47 := [asserted]: #38
#109 := [mp #47 #108]: #106
#162 := [mp #109 #161]: #159
#175 := [mp~ #162 #174]: #159
#610 := [mp #175 #609]: #605
#571 := (not #605)
#427 := (or #571 #536 #521)
#545 := (>= #128 0::Int)
#524 := (or #545 #521)
#420 := (or #571 #524)
#522 := (iff #420 #427)
#429 := (or #571 #409)
#432 := (iff #429 #427)
#525 := [rewrite]: #432
#430 := (iff #420 #429)
#424 := (iff #524 #409)
#537 := (iff #545 #536)
#538 := [rewrite]: #537
#426 := [monotonicity #538]: #424
#431 := [monotonicity #426]: #430
#526 := [trans #431 #525]: #522
#428 := [quant-inst #128]: #420
#513 := [mp #428 #526]: #427
#544 := [unit-resolution #513 #610]: #409
#471 := [unit-resolution #544 #488]: #536
#540 := (+ #10 #52 #392)
#520 := (>= #540 0::Int)
#541 := (= #540 0::Int)
#539 := (not #536)
#371 := (or #539 #541)
#32 := (= #31 #28)
#146 := (not #144)
#149 := (or #146 #32)
#599 := (forall (vars (?v0 Int)) (:pat #598) #149)
#152 := (forall (vars (?v0 Int)) #149)
#602 := (iff #152 #599)
#600 := (iff #149 #149)
#601 := [refl]: #600
#603 := [quant-intro #601]: #602
#141 := (~ #152 #152)
#170 := (~ #149 #149)
#140 := [refl]: #170
#163 := [nnf-pos #140]: #141
#85 := (or #84 #32)
#89 := (forall (vars (?v0 Int)) #85)
#153 := (iff #89 #152)
#150 := (iff #85 #149)
#147 := (iff #84 #146)
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [quant-intro #151]: #153
#33 := (implies #29 #32)
#34 := (forall (vars (?v0 Int)) #33)
#90 := (iff #34 #89)
#86 := (iff #33 #85)
#87 := [rewrite]: #86
#82 := (iff #33 #33)
#83 := [monotonicity #81]: #82
#88 := [trans #83 #87]: #86
#91 := [quant-intro #88]: #90
#46 := [asserted]: #34
#92 := [mp #46 #91]: #89
#155 := [mp #92 #154]: #152
#164 := [mp~ #155 #163]: #152
#604 := [mp #164 #603]: #599
#589 := (not #599)
#527 := (or #589 #539 #541)
#393 := (= #392 #128)
#551 := (not #545)
#394 := (or #551 #393)
#528 := (or #589 #394)
#416 := (iff #528 #527)
#531 := (or #589 #371)
#414 := (iff #531 #527)
#415 := [rewrite]: #414
#529 := (iff #528 #531)
#373 := (iff #394 #371)
#535 := (iff #393 #541)
#542 := [rewrite]: #535
#533 := (iff #551 #539)
#534 := [monotonicity #538]: #533
#374 := [monotonicity #534 #542]: #373
#532 := [monotonicity #374]: #529
#375 := [trans #532 #415]: #416
#530 := [quant-inst #128]: #528
#523 := [mp #530 #375]: #527
#472 := [unit-resolution #523 #604]: #371
#473 := [unit-resolution #472 #471]: #541
#468 := (not #541)
#474 := (or #468 #520)
#460 := [th-lemma arith triangle-eq]: #474
#456 := [unit-resolution #460 #473]: #520
#457 := (not #520)
#458 := (or #507 #457 #539)
#461 := [th-lemma arith assign-bounds 1 -1]: #458
#462 := [unit-resolution #461 #456 #471]: #507
#464 := (not #507)
#459 := (or #521 #463 #464)
#465 := [th-lemma arith triangle-eq]: #459
#438 := [unit-resolution #465 #462 #488]: #463
#425 := (<= #540 0::Int)
#439 := (or #468 #425)
#440 := [th-lemma arith triangle-eq]: #439
#333 := [unit-resolution #440 #473]: #425
#444 := (not #425)
#445 := (or #268 #515 #444)
#446 := [th-lemma arith assign-bounds 1 -1]: #445
#451 := [unit-resolution #446 #333 #438]: #268
#568 := (or #267 #232)
#572 := (or #571 #267 #232)
#567 := (or #571 #568)
#211 := (iff #567 #572)
#574 := [rewrite]: #211
#573 := [quant-inst #53]: #567
#576 := [mp #573 #574]: #572
#447 := [unit-resolution #576 #610]: #568
#448 := [unit-resolution #447 #451]: #232
#452 := [symm #448]: #449
#454 := [monotonicity #452]: #453
#381 := [symm #454]: #435
#450 := (= #56 #490)
#492 := (= #490 #56)
#469 := (or #264 #492)
#470 := [quant-inst #56]: #469
#543 := [unit-resolution #470 #597]: #492
#455 := [symm #543]: #450
#436 := [trans #455 #381]: #59
#62 := (not #59)
#41 := (not #17)
#63 := (iff #41 #62)
#60 := (iff #17 #59)
#57 := (= #14 #56)
#54 := (= #13 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#61 := [monotonicity #58]: #60
#64 := [monotonicity #61]: #63
#42 := [not-or-elim #40]: #41
#65 := [mp #42 #64]: #62
[unit-resolution #65 #436]: false
1bebcd25606d258ac04a776ceb5aa65b98a4cfcc 287 0
unsat
#2 := false
decl f8 :: S3
#11 := f8
decl f7 :: S3
#9 := f7
#27 := 0::Int
decl f5 :: (-> S4 S3 Int)
decl f6 :: S4
#8 := f6
#12 := (f5 f6 f8)
#47 := -1::Int
#48 := (* -1::Int #12)
#10 := (f5 f6 f7)
#49 := (+ #10 #48)
#144 := (>= #49 0::Int)
#146 := (if #144 f7 f8)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#52 := (f3 f4 #49)
#55 := (f5 f6 #52)
#131 := (+ #12 #55)
#134 := (f3 f4 #131)
#149 := (= #134 #146)
#279 := (= f8 #146)
#194 := (not #144)
#193 := (= f7 #146)
#446 := [hypothesis]: #144
#280 := (or #194 #193)
#281 := [def-axiom]: #280
#447 := [unit-resolution #281 #446]: #193
#477 := (= #134 f7)
#282 := (f3 f4 #10)
#286 := (= #282 f7)
#22 := (:var 0 S3)
#23 := (f5 f6 #22)
#608 := (pattern #23)
#24 := (f3 f4 #23)
#25 := (= #24 #22)
#609 := (forall (vars (?v0 S3)) (:pat #608) #25)
#26 := (forall (vars (?v0 S3)) #25)
#612 := (iff #26 #609)
#610 := (iff #25 #25)
#611 := [refl]: #610
#613 := [quant-intro #611]: #612
#180 := (~ #26 #26)
#186 := (~ #25 #25)
#187 := [refl]: #186
#181 := [nnf-pos #187]: #180
#41 := [asserted]: #26
#158 := [mp~ #41 #181]: #26
#614 := [mp #158 #613]: #609
#265 := (not #609)
#596 := (or #265 #286)
#270 := [quant-inst #9]: #596
#533 := [unit-resolution #270 #614]: #286
#489 := (= #134 #282)
#506 := (= #131 #10)
#536 := (= #10 #131)
#607 := (* -1::Int #55)
#597 := (+ #10 #48 #607)
#584 := (<= #597 0::Int)
#601 := (= #597 0::Int)
#262 := (or #194 #601)
#28 := (:var 0 Int)
#30 := (f3 f4 #28)
#615 := (pattern #30)
#31 := (f5 f6 #30)
#32 := (= #31 #28)
#161 := (>= #28 0::Int)
#163 := (not #161)
#166 := (or #163 #32)
#616 := (forall (vars (?v0 Int)) (:pat #615) #166)
#169 := (forall (vars (?v0 Int)) #166)
#619 := (iff #169 #616)
#617 := (iff #166 #166)
#618 := [refl]: #617
#620 := [quant-intro #618]: #619
#185 := (~ #169 #169)
#159 := (~ #166 #166)
#184 := [refl]: #159
#182 := [nnf-pos #184]: #185
#29 := (<= 0::Int #28)
#87 := (not #29)
#88 := (or #87 #32)
#92 := (forall (vars (?v0 Int)) #88)
#170 := (iff #92 #169)
#167 := (iff #88 #166)
#164 := (iff #87 #163)
#160 := (iff #29 #161)
#162 := [rewrite]: #160
#165 := [monotonicity #162]: #164
#168 := [monotonicity #165]: #167
#171 := [quant-intro #168]: #170
#33 := (implies #29 #32)
#34 := (forall (vars (?v0 Int)) #33)
#93 := (iff #34 #92)
#89 := (iff #33 #88)
#90 := [rewrite]: #89
#85 := (iff #33 #33)
#83 := (iff #29 #29)
#84 := [rewrite]: #83
#86 := [monotonicity #84]: #85
#91 := [trans #86 #90]: #89
#94 := [quant-intro #91]: #93
#42 := [asserted]: #34
#95 := [mp #42 #94]: #92
#172 := [mp #95 #171]: #169
#183 := [mp~ #172 #182]: #169
#621 := [mp #183 #620]: #616
#599 := (not #616)
#242 := (or #599 #194 #601)
#271 := (= #55 #49)
#603 := (or #194 #271)
#583 := (or #599 #603)
#587 := (iff #583 #242)
#247 := (or #599 #262)
#585 := (iff #247 #242)
#586 := [rewrite]: #585
#248 := (iff #583 #247)
#598 := (iff #603 #262)
#606 := (iff #271 #601)
#257 := [rewrite]: #606
#258 := [monotonicity #257]: #598
#249 := [monotonicity #258]: #248
#588 := [trans #249 #586]: #587
#246 := [quant-inst #49]: #583
#589 := [mp #246 #588]: #242
#501 := [unit-resolution #589 #621]: #262
#502 := [unit-resolution #501 #446]: #601
#503 := (not #601)
#504 := (or #503 #584)
#494 := [th-lemma arith triangle-eq]: #504
#505 := [unit-resolution #494 #502]: #584
#590 := (>= #597 0::Int)
#483 := (or #503 #590)
#484 := [th-lemma arith triangle-eq]: #483
#486 := [unit-resolution #484 #502]: #590
#487 := [th-lemma arith eq-propagate -1 -1 #486 #505]: #536
#488 := [symm #487]: #506
#490 := [monotonicity #488]: #489
#473 := [trans #490 #533]: #477
#474 := [trans #473 #447]: #149
#152 := (not #149)
#64 := (<= #12 #10)
#71 := (if #64 f7 f8)
#58 := (+ #55 #12)
#61 := (f3 f4 #58)
#76 := (= #61 #71)
#79 := (not #76)
#155 := (iff #79 #152)
#137 := (= #134 #71)
#140 := (not #137)
#153 := (iff #140 #152)
#150 := (iff #137 #149)
#147 := (= #71 #146)
#143 := (iff #64 #144)
#145 := [rewrite]: #143
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [monotonicity #151]: #153
#141 := (iff #79 #140)
#138 := (iff #76 #137)
#135 := (= #61 #134)
#132 := (= #58 #131)
#133 := [rewrite]: #132
#136 := [monotonicity #133]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#156 := [trans #142 #154]: #155
#18 := (< #10 #12)
#19 := (if #18 f8 f7)
#13 := (- #10 #12)
#14 := (f3 f4 #13)
#15 := (f5 f6 #14)
#16 := (+ #15 #12)
#17 := (f3 f4 #16)
#20 := (= #17 #19)
#21 := (not #20)
#80 := (iff #21 #79)
#77 := (iff #20 #76)
#74 := (= #19 #71)
#65 := (not #64)
#68 := (if #65 f8 f7)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #19 #68)
#66 := (iff #18 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#62 := (= #17 #61)
#59 := (= #16 #58)
#56 := (= #15 #55)
#53 := (= #14 #52)
#50 := (= #13 #49)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#78 := [monotonicity #63 #75]: #77
#81 := [monotonicity #78]: #80
#40 := [asserted]: #21
#82 := [mp #40 #81]: #79
#157 := [mp #82 #156]: #152
#475 := [unit-resolution #157 #474]: false
#478 := [lemma #475]: #194
#272 := (or #144 #279)
#283 := [def-axiom]: #272
#499 := [unit-resolution #283 #478]: #279
#466 := (= #134 f8)
#284 := (f3 f4 #12)
#285 := (= #284 f8)
#600 := (or #265 #285)
#602 := [quant-inst #11]: #600
#500 := [unit-resolution #602 #614]: #285
#463 := (= #134 #284)
#461 := (= #131 #12)
#457 := (= #12 #131)
#305 := (<= #55 0::Int)
#228 := (= #55 0::Int)
#591 := (or #144 #228)
#36 := (= #31 0::Int)
#173 := (or #161 #36)
#622 := (forall (vars (?v0 Int)) (:pat #615) #173)
#176 := (forall (vars (?v0 Int)) #173)
#625 := (iff #176 #622)
#623 := (iff #173 #173)
#624 := [refl]: #623
#626 := [quant-intro #624]: #625
#190 := (~ #176 #176)
#188 := (~ #173 #173)
#189 := [refl]: #188
#191 := [nnf-pos #189]: #190
#104 := (or #29 #36)
#109 := (forall (vars (?v0 Int)) #104)
#177 := (iff #109 #176)
#174 := (iff #104 #173)
#175 := [monotonicity #162]: #174
#178 := [quant-intro #175]: #177
#35 := (< #28 0::Int)
#37 := (implies #35 #36)
#38 := (forall (vars (?v0 Int)) #37)
#110 := (iff #38 #109)
#107 := (iff #37 #104)
#101 := (implies #87 #36)
#105 := (iff #101 #104)
#106 := [rewrite]: #105
#102 := (iff #37 #101)
#96 := (iff #35 #87)
#98 := (iff #87 #87)
#99 := [monotonicity #84]: #98
#97 := [rewrite]: #96
#100 := [trans #97 #99]: #96
#103 := [monotonicity #100]: #102
#108 := [trans #103 #106]: #107
#111 := [quant-intro #108]: #110
#43 := [asserted]: #38
#112 := [mp #43 #111]: #109
#179 := [mp #112 #178]: #176
#192 := [mp~ #179 #191]: #176
#627 := [mp #192 #626]: #622
#234 := (not #622)
#594 := (or #234 #144 #228)
#592 := (or #234 #591)
#581 := (iff #592 #594)
#582 := [rewrite]: #581
#595 := [quant-inst #49]: #592
#304 := [mp #595 #582]: #594
#485 := [unit-resolution #304 #627]: #591
#491 := [unit-resolution #485 #478]: #228
#479 := (not #228)
#480 := (or #479 #305)
#481 := [th-lemma arith triangle-eq]: #480
#476 := [unit-resolution #481 #491]: #305
#306 := (>= #55 0::Int)
#482 := (or #479 #306)
#455 := [th-lemma arith triangle-eq]: #482
#456 := [unit-resolution #455 #491]: #306
#350 := [th-lemma arith eq-propagate 1 1 #456 #476]: #457
#462 := [symm #350]: #461
#468 := [monotonicity #462]: #463
#469 := [trans #468 #500]: #466
#470 := [trans #469 #499]: #149
[unit-resolution #157 #470]: false
f4628a2370e422e0b0b89be90bd88f22cd742f4d 493 0
unsat
#2 := false
#30 := 0::Int
decl f5 :: (-> S4 S3 Int)
decl f3 :: (-> S2 Int S3)
decl f8 :: S3
#11 := f8
decl f6 :: S4
#8 := f6
#12 := (f5 f6 f8)
#50 := -1::Int
#51 := (* -1::Int #12)
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#52 := (+ #10 #51)
decl f4 :: S2
#7 := f4
#55 := (f3 f4 #52)
#58 := (f5 f6 #55)
#604 := (* -1::Int #58)
#610 := (+ #10 #51 #604)
#609 := (= #610 0::Int)
#455 := (not #609)
#587 := (>= #610 0::Int)
#330 := (not #587)
decl f9 :: S3
#16 := f9
#17 := (f5 f6 f9)
#64 := (* -1::Int #17)
#83 := (+ #10 #51 #64)
#548 := (>= #83 0::Int)
#550 := (not #548)
#90 := (f3 f4 #83)
#148 := (+ #64 #58)
#151 := (f3 f4 #148)
#154 := (= #151 #90)
#551 := (f5 f6 #90)
#492 := (f3 f4 #551)
#493 := (= #492 #90)
#25 := (:var 0 S3)
#26 := (f5 f6 #25)
#611 := (pattern #26)
#27 := (f3 f4 #26)
#28 := (= #27 #25)
#612 := (forall (vars (?v0 S3)) (:pat #611) #28)
#29 := (forall (vars (?v0 S3)) #28)
#615 := (iff #29 #612)
#613 := (iff #28 #28)
#614 := [refl]: #613
#616 := [quant-intro #614]: #615
#185 := (~ #29 #29)
#160 := (~ #28 #28)
#161 := [refl]: #160
#186 := [nnf-pos #161]: #185
#44 := [asserted]: #29
#189 := [mp~ #44 #186]: #29
#617 := [mp #189 #616]: #612
#284 := (not #612)
#441 := (or #284 #493)
#442 := [quant-inst #90]: #441
#410 := [unit-resolution #442 #617]: #493
#423 := (= #151 #492)
#335 := (= #148 #551)
#436 := (* -1::Int #551)
#395 := (+ #10 #51 #64 #436)
#545 := (<= #395 0::Int)
#435 := (= #395 0::Int)
#381 := [hypothesis]: #548
#445 := (or #550 #435)
#31 := (:var 0 Int)
#33 := (f3 f4 #31)
#618 := (pattern #33)
#34 := (f5 f6 #33)
#35 := (= #34 #31)
#164 := (>= #31 0::Int)
#166 := (not #164)
#169 := (or #166 #35)
#619 := (forall (vars (?v0 Int)) (:pat #618) #169)
#172 := (forall (vars (?v0 Int)) #169)
#622 := (iff #172 #619)
#620 := (iff #169 #169)
#621 := [refl]: #620
#623 := [quant-intro #621]: #622
#184 := (~ #172 #172)
#190 := (~ #169 #169)
#183 := [refl]: #190
#187 := [nnf-pos #183]: #184
#32 := (<= 0::Int #31)
#104 := (not #32)
#105 := (or #104 #35)
#109 := (forall (vars (?v0 Int)) #105)
#173 := (iff #109 #172)
#170 := (iff #105 #169)
#167 := (iff #104 #166)
#163 := (iff #32 #164)
#165 := [rewrite]: #163
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [quant-intro #171]: #173
#36 := (implies #32 #35)
#37 := (forall (vars (?v0 Int)) #36)
#110 := (iff #37 #109)
#106 := (iff #36 #105)
#107 := [rewrite]: #106
#102 := (iff #36 #36)
#100 := (iff #32 #32)
#101 := [rewrite]: #100
#103 := [monotonicity #101]: #102
#108 := [trans #103 #107]: #106
#111 := [quant-intro #108]: #110
#45 := [asserted]: #37
#112 := [mp #45 #111]: #109
#175 := [mp #112 #174]: #172
#188 := [mp~ #175 #187]: #172
#624 := [mp #188 #623]: #619
#261 := (not #619)
#544 := (or #261 #550 #435)
#549 := (= #551 #83)
#552 := (or #550 #549)
#429 := (or #261 #552)
#450 := (iff #429 #544)
#446 := (or #261 #445)
#448 := (iff #446 #544)
#449 := [rewrite]: #448
#447 := (iff #429 #446)
#540 := (iff #552 #445)
#434 := (iff #549 #435)
#543 := [rewrite]: #434
#541 := [monotonicity #543]: #540
#440 := [monotonicity #541]: #447
#451 := [trans #440 #449]: #450
#444 := [quant-inst #83]: #429
#452 := [mp #444 #451]: #544
#464 := [unit-resolution #452 #624]: #445
#352 := [unit-resolution #464 #381]: #435
#466 := (not #435)
#399 := (or #466 #545)
#400 := [th-lemma arith triangle-eq]: #399
#354 := [unit-resolution #400 #352]: #545
#542 := (>= #395 0::Int)
#471 := (or #466 #542)
#467 := [th-lemma arith triangle-eq]: #471
#355 := [unit-resolution #467 #352]: #542
#592 := (<= #610 0::Int)
#392 := (>= #52 0::Int)
#528 := (>= #551 0::Int)
#358 := (not #545)
#359 := (or #528 #358 #550)
#363 := [th-lemma arith assign-bounds 1 -1]: #359
#356 := [unit-resolution #363 #354 #381]: #528
#473 := (not #542)
#472 := (not #528)
#360 := (or #392 #472 #473)
#535 := (>= #17 0::Int)
#380 := (= #17 0::Int)
#196 := (f3 f4 #17)
#527 := (f5 f6 #196)
#529 := (= #527 0::Int)
#387 := (not #535)
#366 := [hypothesis]: #387
#530 := (or #535 #529)
#39 := (= #34 0::Int)
#176 := (or #164 #39)
#625 := (forall (vars (?v0 Int)) (:pat #618) #176)
#179 := (forall (vars (?v0 Int)) #176)
#628 := (iff #179 #625)
#626 := (iff #176 #176)
#627 := [refl]: #626
#629 := [quant-intro #627]: #628
#193 := (~ #179 #179)
#191 := (~ #176 #176)
#192 := [refl]: #191
#194 := [nnf-pos #192]: #193
#121 := (or #32 #39)
#126 := (forall (vars (?v0 Int)) #121)
#180 := (iff #126 #179)
#177 := (iff #121 #176)
#178 := [monotonicity #165]: #177
#181 := [quant-intro #178]: #180
#38 := (< #31 0::Int)
#40 := (implies #38 #39)
#41 := (forall (vars (?v0 Int)) #40)
#127 := (iff #41 #126)
#124 := (iff #40 #121)
#118 := (implies #104 #39)
#122 := (iff #118 #121)
#123 := [rewrite]: #122
#119 := (iff #40 #118)
#113 := (iff #38 #104)
#115 := (iff #104 #104)
#116 := [monotonicity #101]: #115
#114 := [rewrite]: #113
#117 := [trans #114 #116]: #113
#120 := [monotonicity #117]: #119
#125 := [trans #120 #123]: #124
#128 := [quant-intro #125]: #127
#46 := [asserted]: #41
#129 := [mp #46 #128]: #126
#182 := [mp #129 #181]: #179
#195 := [mp~ #182 #194]: #179
#630 := [mp #195 #629]: #625
#236 := (not #625)
#532 := (or #236 #535 #529)
#516 := (or #236 #530)
#519 := (iff #516 #532)
#520 := [rewrite]: #519
#517 := [quant-inst #17]: #516
#521 := [mp #517 #520]: #532
#369 := [unit-resolution #521 #630]: #530
#373 := [unit-resolution #369 #366]: #529
#377 := (= #17 #527)
#376 := (= f9 #196)
#282 := (= #196 f9)
#275 := (or #284 #282)
#286 := [quant-inst #16]: #275
#375 := [unit-resolution #286 #617]: #282
#374 := [symm #375]: #376
#365 := [monotonicity #374]: #377
#368 := [trans #365 #373]: #380
#370 := (not #380)
#371 := (or #370 #535)
#367 := [th-lemma arith triangle-eq]: #371
#372 := [unit-resolution #367 #366 #368]: false
#362 := [lemma #372]: #535
#364 := (or #387 #392 #472 #473)
#357 := [th-lemma arith assign-bounds 1 1 1]: #364
#361 := [unit-resolution #357 #362]: #360
#347 := [unit-resolution #361 #356 #355]: #392
#599 := (not #392)
#260 := (or #599 #609)
#602 := (or #261 #599 #609)
#606 := (= #58 #52)
#607 := (or #599 #606)
#245 := (or #261 #607)
#589 := (iff #245 #602)
#249 := (or #261 #260)
#252 := (iff #249 #602)
#588 := [rewrite]: #252
#250 := (iff #245 #249)
#265 := (iff #607 #260)
#608 := (iff #606 #609)
#600 := [rewrite]: #608
#601 := [monotonicity #600]: #265
#251 := [monotonicity #601]: #250
#590 := [trans #251 #588]: #589
#586 := [quant-inst #52]: #245
#591 := [mp #586 #590]: #602
#461 := [unit-resolution #591 #624]: #260
#349 := [unit-resolution #461 #347]: #609
#401 := (or #455 #592)
#456 := [th-lemma arith triangle-eq]: #401
#350 := [unit-resolution #456 #349]: #592
#348 := (or #455 #587)
#351 := [th-lemma arith triangle-eq]: #348
#333 := [unit-resolution #351 #349]: #587
#336 := [th-lemma arith eq-propagate 1 1 -1 -1 #333 #350 #355 #354]: #335
#337 := [monotonicity #336]: #423
#338 := [trans #337 #410]: #154
#157 := (not #154)
#65 := (+ #58 #64)
#70 := (f3 f4 #65)
#93 := (= #70 #90)
#96 := (not #93)
#158 := (iff #96 #157)
#155 := (iff #93 #154)
#152 := (= #70 #151)
#149 := (= #65 #148)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#20 := (+ #12 #17)
#21 := (- #10 #20)
#22 := (f3 f4 #21)
#13 := (- #10 #12)
#14 := (f3 f4 #13)
#15 := (f5 f6 #14)
#18 := (- #15 #17)
#19 := (f3 f4 #18)
#23 := (= #19 #22)
#24 := (not #23)
#97 := (iff #24 #96)
#94 := (iff #23 #93)
#91 := (= #22 #90)
#88 := (= #21 #83)
#73 := (* -1::Int #20)
#74 := (+ #10 #73)
#86 := (= #74 #83)
#77 := (+ #51 #64)
#80 := (+ #10 #77)
#84 := (= #80 #83)
#85 := [rewrite]: #84
#81 := (= #74 #80)
#78 := (= #73 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#87 := [trans #82 #85]: #86
#75 := (= #21 #74)
#76 := [rewrite]: #75
#89 := [trans #76 #87]: #88
#92 := [monotonicity #89]: #91
#71 := (= #19 #70)
#68 := (= #18 #65)
#61 := (- #58 #17)
#66 := (= #61 #65)
#67 := [rewrite]: #66
#62 := (= #18 #61)
#59 := (= #15 #58)
#56 := (= #14 #55)
#53 := (= #13 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#95 := [monotonicity #72 #92]: #94
#98 := [monotonicity #95]: #97
#43 := [asserted]: #24
#99 := [mp #43 #98]: #96
#162 := [mp #99 #159]: #157
#339 := [unit-resolution #162 #338]: false
#340 := [lemma #339]: #550
#309 := (f5 f6 #151)
#547 := (>= #309 0::Int)
#580 := (+ #17 #604)
#581 := (<= #580 0::Int)
#546 := (= #551 0::Int)
#479 := (not #546)
#571 := (= #309 0::Int)
#578 := (not #581)
#484 := [hypothesis]: #578
#413 := (or #581 #571)
#557 := (or #236 #581 #571)
#594 := (>= #148 0::Int)
#412 := (or #594 #571)
#558 := (or #236 #412)
#562 := (iff #558 #557)
#553 := (or #236 #413)
#561 := (iff #553 #557)
#555 := [rewrite]: #561
#554 := (iff #558 #553)
#414 := (iff #412 #413)
#303 := (iff #594 #581)
#304 := [rewrite]: #303
#556 := [monotonicity #304]: #414
#560 := [monotonicity #556]: #554
#391 := [trans #560 #555]: #562
#559 := [quant-inst #148]: #558
#393 := [mp #559 #391]: #557
#415 := [unit-resolution #393 #630]: #413
#416 := [unit-resolution #415 #484]: #571
#411 := (not #571)
#427 := (or #479 #411)
#507 := (f3 f4 #309)
#421 := (= #507 #492)
#417 := (= #492 #507)
#454 := (= #551 #309)
#453 := (= 0::Int #309)
#478 := [hypothesis]: #571
#433 := [symm #478]: #453
#443 := [hypothesis]: #546
#409 := [trans #443 #433]: #454
#418 := [monotonicity #409]: #417
#422 := [symm #418]: #421
#419 := (= #151 #507)
#497 := (= #507 #151)
#488 := (or #284 #497)
#494 := [quant-inst #151]: #488
#477 := [unit-resolution #494 #617]: #497
#420 := [symm #477]: #419
#424 := [trans #420 #422]: #423
#425 := [trans #424 #410]: #154
#426 := [unit-resolution #162 #425]: false
#388 := [lemma #426]: #427
#389 := [unit-resolution #388 #416]: #479
#533 := (or #548 #546)
#524 := (or #236 #548 #546)
#526 := (or #236 #533)
#537 := (iff #526 #524)
#538 := [rewrite]: #537
#536 := [quant-inst #83]: #526
#534 := [mp #536 #538]: #524
#460 := [unit-resolution #534 #630]: #533
#396 := [unit-resolution #460 #389]: #548
#398 := [unit-resolution #464 #396]: #435
#402 := [unit-resolution #400 #398]: #545
#539 := (<= #551 0::Int)
#432 := (or #539 #581)
#308 := (>= #58 0::Int)
#593 := (= #58 0::Int)
#469 := (not #592)
#480 := (not #539)
#476 := [hypothesis]: #480
#481 := (or #528 #539)
#482 := [th-lemma arith farkas 1 1]: #481
#483 := [unit-resolution #482 #476]: #528
#485 := (or #479 #539)
#458 := [th-lemma arith triangle-eq]: #485
#459 := [unit-resolution #458 #476]: #479
#353 := [unit-resolution #460 #459]: #548
#465 := [unit-resolution #464 #353]: #435
#468 := [unit-resolution #467 #465]: #542
#474 := (or #469 #581 #472 #473)
#470 := [th-lemma arith assign-bounds 1 1 -1]: #474
#475 := [unit-resolution #470 #468 #484 #483]: #469
#437 := [unit-resolution #456 #475]: #455
#462 := [unit-resolution #461 #437]: #599
#231 := (or #392 #593)
#237 := (or #236 #392 #593)
#597 := (or #236 #231)
#598 := (iff #597 #237)
#584 := [rewrite]: #598
#595 := [quant-inst #52]: #597
#585 := [mp #595 #584]: #237
#457 := [unit-resolution #585 #630]: #231
#463 := [unit-resolution #457 #462]: #593
#431 := (not #593)
#438 := (or #431 #308)
#397 := [th-lemma arith triangle-eq]: #438
#428 := [unit-resolution #397 #463]: #308
#430 := [th-lemma arith farkas 1 1 1 1 1 #484 #462 #483 #468 #428]: false
#439 := [lemma #430]: #432
#403 := [unit-resolution #439 #484]: #539
#404 := (or #546 #480 #472)
#405 := [th-lemma arith triangle-eq]: #404
#406 := [unit-resolution #405 #389 #403]: #472
#407 := [th-lemma arith farkas 1 -1 1 #406 #396 #402]: false
#390 := [lemma #407]: #581
#583 := (+ #17 #604 #309)
#565 := (>= #583 0::Int)
#293 := (= #583 0::Int)
#296 := (or #578 #293)
#290 := (or #261 #578 #293)
#310 := (= #309 #148)
#596 := (not #594)
#203 := (or #596 #310)
#572 := (or #261 #203)
#563 := (iff #572 #290)
#573 := (or #261 #296)
#567 := (iff #573 #290)
#568 := [rewrite]: #567
#577 := (iff #572 #573)
#574 := (iff #203 #296)
#294 := (iff #310 #293)
#295 := [rewrite]: #294
#582 := (iff #596 #578)
#579 := [monotonicity #304]: #582
#575 := [monotonicity #579 #295]: #574
#566 := [monotonicity #575]: #577
#564 := [trans #566 #568]: #563
#576 := [quant-inst #148]: #572
#569 := [mp #576 #564]: #290
#341 := [unit-resolution #569 #624]: #296
#342 := [unit-resolution #341 #390]: #293
#343 := (not #293)
#344 := (or #343 #565)
#345 := [th-lemma arith triangle-eq]: #344
#334 := [unit-resolution #345 #342]: #565
#346 := (not #565)
#323 := (or #547 #346 #578)
#325 := [th-lemma arith assign-bounds 1 -1]: #323
#326 := [unit-resolution #325 #334 #390]: #547
#570 := (<= #583 0::Int)
#327 := (or #343 #570)
#328 := [th-lemma arith triangle-eq]: #327
#329 := [unit-resolution #328 #342]: #570
#324 := (not #570)
#331 := (not #547)
#332 := (or #330 #548 #331 #324)
#317 := [th-lemma arith assign-bounds 1 1 -1]: #332
#318 := [unit-resolution #317 #329 #326 #340]: #330
#319 := [unit-resolution #351 #318]: #455
#307 := (<= #58 0::Int)
#315 := (not #307)
#394 := (<= #309 0::Int)
#322 := (not #394)
#321 := [unit-resolution #460 #340]: #546
#320 := [unit-resolution #388 #321]: #411
#313 := (or #571 #322)
#311 := (or #571 #322 #331)
#312 := [th-lemma arith triangle-eq]: #311
#305 := [unit-resolution #312 #326]: #313
#314 := [unit-resolution #305 #320]: #322
#306 := (or #315 #387 #394 #324)
#316 := [th-lemma arith assign-bounds -1 -1 1]: #306
#297 := [unit-resolution #316 #329 #314 #362]: #315
#298 := (or #431 #307)
#299 := [th-lemma arith triangle-eq]: #298
#291 := [unit-resolution #299 #297]: #431
#300 := [unit-resolution #457 #291]: #392
[unit-resolution #461 #300 #319]: false
9dcff463b5dde1dc69fdd0a078b0bc4466ce47fc 37 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#11 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#9 := f7
decl f6 :: S4
#8 := f6
#10 := (f5 f6 f7)
#12 := (* #10 0::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#16 := (not #15)
#56 := (iff #16 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #16 #51)
#49 := (iff #15 true)
#44 := (= #14 #14)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #15 #44)
#41 := (= #12 0::Int)
#42 := [rewrite]: #41
#43 := [monotonicity #42]: #15
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#34 := [asserted]: #16
[mp #34 #57]: false
7af90292232e0f0b0c8c0c4509e0eab106814f00 37 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#8 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#10 := f7
decl f6 :: S4
#9 := f6
#11 := (f5 f6 f7)
#12 := (* 0::Int #11)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#16 := (not #15)
#56 := (iff #16 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #16 #51)
#49 := (iff #15 true)
#44 := (= #14 #14)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #15 #44)
#41 := (= #12 0::Int)
#42 := [rewrite]: #41
#43 := [monotonicity #42]: #15
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#34 := [asserted]: #16
[mp #34 #57]: false
96ea1637fc28c7299348496b50b04624bb54bbca 51 0
unsat
#2 := false
decl f5 :: (-> S4 S3 Int)
#16 := (:var 0 S3)
decl f6 :: S4
#8 := f6
#17 := (f5 f6 #16)
#551 := (pattern #17)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#18 := (f3 f4 #17)
#19 := (= #18 #16)
#552 := (forall (vars (?v0 S3)) (:pat #551) #19)
#20 := (forall (vars (?v0 S3)) #19)
#555 := (iff #20 #552)
#553 := (iff #19 #19)
#554 := [refl]: #553
#556 := [quant-intro #554]: #555
#125 := (~ #20 #20)
#129 := (~ #19 #19)
#130 := [refl]: #129
#126 := [nnf-pos #130]: #125
#35 := [asserted]: #20
#127 := [mp~ #35 #126]: #20
#557 := [mp #127 #556]: #552
decl f7 :: S3
#9 := f7
#10 := (f5 f6 f7)
#43 := (f3 f4 #10)
#46 := (= #43 f7)
#49 := (not #46)
#11 := 1::Int
#12 := (* #10 1::Int)
#13 := (f3 f4 #12)
#14 := (= #13 f7)
#15 := (not #14)
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (= #13 #43)
#41 := (= #12 #10)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#34 := [asserted]: #15
#52 := [mp #34 #51]: #49
#222 := (not #552)
#223 := (or #222 #46)
#214 := [quant-inst #9]: #223
[unit-resolution #214 #52 #557]: false
7f2d30410f583c1a05e491b41f4eb605721a63ed 51 0
unsat
#2 := false
decl f5 :: (-> S4 S3 Int)
#16 := (:var 0 S3)
decl f6 :: S4
#9 := f6
#17 := (f5 f6 #16)
#551 := (pattern #17)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#18 := (f3 f4 #17)
#19 := (= #18 #16)
#552 := (forall (vars (?v0 S3)) (:pat #551) #19)
#20 := (forall (vars (?v0 S3)) #19)
#555 := (iff #20 #552)
#553 := (iff #19 #19)
#554 := [refl]: #553
#556 := [quant-intro #554]: #555
#125 := (~ #20 #20)
#129 := (~ #19 #19)
#130 := [refl]: #129
#126 := [nnf-pos #130]: #125
#35 := [asserted]: #20
#127 := [mp~ #35 #126]: #20
#557 := [mp #127 #556]: #552
decl f7 :: S3
#10 := f7
#11 := (f5 f6 f7)
#43 := (f3 f4 #11)
#46 := (= #43 f7)
#49 := (not #46)
#8 := 1::Int
#12 := (* 1::Int #11)
#13 := (f3 f4 #12)
#14 := (= #13 f7)
#15 := (not #14)
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (= #13 #43)
#41 := (= #12 #11)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#34 := [asserted]: #15
#52 := [mp #34 #51]: #49
#222 := (not #552)
#223 := (or #222 #46)
#214 := [quant-inst #10]: #223
[unit-resolution #214 #52 #557]: false
0f3423719873455ea9f7115fd0d9b716e38c9561 39 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#8 := 3::Int
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#10 := f7
decl f6 :: S4
#9 := f6
#11 := (f5 f6 f7)
#14 := (* #11 3::Int)
decl f4 :: S2
#7 := f4
#15 := (f3 f4 #14)
#12 := (* 3::Int #11)
#13 := (f3 f4 #12)
#16 := (= #13 #15)
#17 := (not #16)
#59 := (iff #17 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #17 #54)
#52 := (iff #16 true)
#47 := (= #13 #13)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #16 #47)
#45 := (= #15 #13)
#43 := (= #14 #12)
#44 := [rewrite]: #43
#46 := [monotonicity #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#36 := [asserted]: #17
[mp #36 #60]: false
f8dca01b17d79b25cc840adcb38387a94d6a160a 262 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#13 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#11 := (f5 #10 0::Int)
#12 := (f3 f4 #11)
#14 := (= #12 #13)
#462 := (= #11 0::Int)
#22 := (:var 0 Int)
#33 := (:var 1 Int)
#34 := (f6 f7 #33)
#35 := (f5 #34 #22)
#789 := (pattern #35)
#130 := -1::Int
#134 := (* -1::Int #22)
#131 := (* -1::Int #33)
#137 := (div #131 #134)
#328 := (* -1::Int #137)
#329 := (+ #35 #328)
#330 := (= #329 0::Int)
#45 := (div #33 #22)
#325 := (* -1::Int #45)
#326 := (+ #35 #325)
#327 := (= #326 0::Int)
#108 := (<= #22 0::Int)
#220 := (>= #33 0::Int)
#288 := (or #220 #108)
#289 := (not #288)
#104 := (<= #33 0::Int)
#284 := (or #104 #108)
#285 := (not #284)
#292 := (or #285 #289)
#331 := (if #292 #327 #330)
#324 := (= #35 0::Int)
#37 := (= #22 0::Int)
#36 := (= #33 0::Int)
#38 := (or #36 #37)
#332 := (if #38 #324 #331)
#790 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #789) #332)
#335 := (forall (vars (?v0 Int) (?v1 Int)) #332)
#793 := (iff #335 #790)
#791 := (iff #332 #332)
#792 := [refl]: #791
#794 := [quant-intro #792]: #793
#295 := (if #292 #45 #137)
#298 := (if #38 0::Int #295)
#301 := (= #35 #298)
#304 := (forall (vars (?v0 Int) (?v1 Int)) #301)
#336 := (iff #304 #335)
#333 := (iff #301 #332)
#334 := [rewrite]: #333
#337 := [quant-intro #334]: #336
#109 := (not #108)
#223 := (not #220)
#226 := (and #223 #109)
#105 := (not #104)
#112 := (and #105 #109)
#229 := (or #112 #226)
#232 := (if #229 #45 #137)
#235 := (if #38 0::Int #232)
#238 := (= #35 #235)
#241 := (forall (vars (?v0 Int) (?v1 Int)) #238)
#305 := (iff #241 #304)
#302 := (iff #238 #301)
#299 := (= #235 #298)
#296 := (= #232 #295)
#293 := (iff #229 #292)
#290 := (iff #226 #289)
#291 := [rewrite]: #290
#286 := (iff #112 #285)
#287 := [rewrite]: #286
#294 := [monotonicity #287 #291]: #293
#297 := [monotonicity #294]: #296
#300 := [monotonicity #297]: #299
#303 := [monotonicity #300]: #302
#306 := [quant-intro #303]: #305
#276 := (~ #241 #241)
#274 := (~ #238 #238)
#275 := [refl]: #274
#277 := [nnf-pos #275]: #276
#115 := (<= 0::Int #33)
#116 := (not #115)
#124 := (and #116 #109)
#127 := (or #112 #124)
#140 := (if #127 #45 #137)
#143 := (if #38 0::Int #140)
#146 := (= #35 #143)
#149 := (forall (vars (?v0 Int) (?v1 Int)) #146)
#242 := (iff #149 #241)
#239 := (iff #146 #238)
#236 := (= #143 #235)
#233 := (= #140 #232)
#230 := (iff #127 #229)
#227 := (iff #124 #226)
#224 := (iff #116 #223)
#221 := (iff #115 #220)
#222 := [rewrite]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [quant-intro #240]: #242
#47 := (- #22)
#46 := (- #33)
#48 := (div #46 #47)
#40 := (< 0::Int #22)
#42 := (< #33 0::Int)
#43 := (and #42 #40)
#39 := (< 0::Int #33)
#41 := (and #39 #40)
#44 := (or #41 #43)
#49 := (if #44 #45 #48)
#50 := (if #38 0::Int #49)
#51 := (= #35 #50)
#52 := (forall (vars (?v0 Int) (?v1 Int)) #51)
#150 := (iff #52 #149)
#147 := (iff #51 #146)
#144 := (= #50 #143)
#141 := (= #49 #140)
#138 := (= #48 #137)
#135 := (= #47 #134)
#136 := [rewrite]: #135
#132 := (= #46 #131)
#133 := [rewrite]: #132
#139 := [monotonicity #133 #136]: #138
#128 := (iff #44 #127)
#125 := (iff #43 #124)
#110 := (iff #40 #109)
#111 := [rewrite]: #110
#117 := (iff #42 #116)
#121 := (iff #116 #116)
#119 := (iff #115 #115)
#120 := [rewrite]: #119
#122 := [monotonicity #120]: #121
#118 := [rewrite]: #117
#123 := [trans #118 #122]: #117
#126 := [monotonicity #123 #111]: #125
#113 := (iff #41 #112)
#106 := (iff #39 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#129 := [monotonicity #114 #126]: #128
#142 := [monotonicity #129 #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#69 := [asserted]: #52
#152 := [mp #69 #151]: #149
#244 := [mp #152 #243]: #241
#278 := [mp~ #244 #277]: #241
#307 := [mp #278 #306]: #304
#338 := [mp #307 #337]: #335
#795 := [mp #338 #794]: #790
#696 := (not #790)
#692 := (or #696 #462)
#448 := (* -1::Int 0::Int)
#730 := (div #448 #448)
#734 := (* -1::Int #730)
#731 := (+ #11 #734)
#735 := (= #731 0::Int)
#453 := (div 0::Int 0::Int)
#454 := (* -1::Int #453)
#732 := (+ #11 #454)
#733 := (= #732 0::Int)
#736 := (<= 0::Int 0::Int)
#550 := (>= 0::Int 0::Int)
#741 := (or #550 #736)
#451 := (not #741)
#740 := (or #736 #736)
#737 := (not #740)
#452 := (or #737 #451)
#724 := (if #452 #733 #735)
#739 := (= 0::Int 0::Int)
#461 := (or #739 #739)
#725 := (if #461 #462 #724)
#697 := (or #696 #725)
#687 := (iff #697 #692)
#689 := (iff #692 #692)
#683 := [rewrite]: #689
#694 := (iff #725 #462)
#1 := true
#691 := (if true #462 #733)
#682 := (iff #691 #462)
#684 := [rewrite]: #682
#693 := (iff #725 #691)
#700 := (iff #724 #733)
#607 := (if false #733 #733)
#610 := (iff #607 #733)
#703 := [rewrite]: #610
#608 := (iff #724 #607)
#598 := (iff #735 #733)
#604 := (= #731 #732)
#587 := (= #734 #454)
#699 := (= #730 #453)
#603 := (= #448 0::Int)
#698 := [rewrite]: #603
#702 := [monotonicity #698 #698]: #699
#602 := [monotonicity #702]: #587
#605 := [monotonicity #602]: #604
#606 := [monotonicity #605]: #598
#553 := (iff #452 false)
#707 := (or false false)
#593 := (iff #707 false)
#594 := [rewrite]: #593
#710 := (iff #452 #707)
#708 := (iff #451 false)
#419 := (not true)
#744 := (iff #419 false)
#407 := [rewrite]: #744
#705 := (iff #451 #419)
#551 := (iff #741 true)
#722 := (or true true)
#723 := (iff #722 true)
#729 := [rewrite]: #723
#720 := (iff #741 #722)
#572 := (iff #736 true)
#714 := [rewrite]: #572
#423 := (iff #550 true)
#759 := [rewrite]: #423
#549 := [monotonicity #759 #714]: #720
#552 := [trans #549 #729]: #551
#706 := [monotonicity #552]: #705
#709 := [trans #706 #407]: #708
#719 := (iff #737 false)
#712 := (iff #737 #419)
#717 := (iff #740 true)
#715 := (iff #740 #722)
#716 := [monotonicity #714 #714]: #715
#711 := [trans #716 #729]: #717
#718 := [monotonicity #711]: #712
#713 := [trans #718 #407]: #719
#592 := [monotonicity #713 #709]: #710
#701 := [trans #592 #594]: #553
#609 := [monotonicity #701 #606]: #608
#704 := [trans #609 #703]: #700
#570 := (iff #461 true)
#727 := (iff #461 #722)
#726 := (iff #739 true)
#721 := [rewrite]: #726
#728 := [monotonicity #721 #721]: #727
#571 := [trans #728 #729]: #570
#685 := [monotonicity #571 #704]: #693
#695 := [trans #685 #684]: #694
#688 := [monotonicity #695]: #687
#690 := [trans #688 #683]: #687
#686 := [quant-inst #9 #9]: #697
#674 := [mp #686 #690]: #692
#677 := [unit-resolution #674 #795]: #462
#678 := [monotonicity #677]: #14
#15 := (not #14)
#65 := [asserted]: #15
[unit-resolution #65 #678]: false
c5e05aa748f8c52496e5b5ccde5700a56e70c1ef 279 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#13 := 0::Int
decl f4 :: S2
#7 := f4
#16 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#10 := f10
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 0::Int)
#15 := (f3 f4 #14)
#17 := (= #15 #16)
#454 := (= #14 0::Int)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#791 := (pattern #37)
#132 := -1::Int
#136 := (* -1::Int #24)
#133 := (* -1::Int #35)
#139 := (div #133 #136)
#330 := (* -1::Int #139)
#331 := (+ #37 #330)
#332 := (= #331 0::Int)
#47 := (div #35 #24)
#327 := (* -1::Int #47)
#328 := (+ #37 #327)
#329 := (= #328 0::Int)
#110 := (<= #24 0::Int)
#222 := (>= #35 0::Int)
#290 := (or #222 #110)
#291 := (not #290)
#106 := (<= #35 0::Int)
#286 := (or #106 #110)
#287 := (not #286)
#294 := (or #287 #291)
#333 := (if #294 #329 #332)
#326 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#334 := (if #40 #326 #333)
#792 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #791) #334)
#337 := (forall (vars (?v0 Int) (?v1 Int)) #334)
#795 := (iff #337 #792)
#793 := (iff #334 #334)
#794 := [refl]: #793
#796 := [quant-intro #794]: #795
#297 := (if #294 #47 #139)
#300 := (if #40 0::Int #297)
#303 := (= #37 #300)
#306 := (forall (vars (?v0 Int) (?v1 Int)) #303)
#338 := (iff #306 #337)
#335 := (iff #303 #334)
#336 := [rewrite]: #335
#339 := [quant-intro #336]: #338
#111 := (not #110)
#225 := (not #222)
#228 := (and #225 #111)
#107 := (not #106)
#114 := (and #107 #111)
#231 := (or #114 #228)
#234 := (if #231 #47 #139)
#237 := (if #40 0::Int #234)
#240 := (= #37 #237)
#243 := (forall (vars (?v0 Int) (?v1 Int)) #240)
#307 := (iff #243 #306)
#304 := (iff #240 #303)
#301 := (= #237 #300)
#298 := (= #234 #297)
#295 := (iff #231 #294)
#292 := (iff #228 #291)
#293 := [rewrite]: #292
#288 := (iff #114 #287)
#289 := [rewrite]: #288
#296 := [monotonicity #289 #293]: #295
#299 := [monotonicity #296]: #298
#302 := [monotonicity #299]: #301
#305 := [monotonicity #302]: #304
#308 := [quant-intro #305]: #307
#278 := (~ #243 #243)
#276 := (~ #240 #240)
#277 := [refl]: #276
#279 := [nnf-pos #277]: #278
#117 := (<= 0::Int #35)
#118 := (not #117)
#126 := (and #118 #111)
#129 := (or #114 #126)
#142 := (if #129 #47 #139)
#145 := (if #40 0::Int #142)
#148 := (= #37 #145)
#151 := (forall (vars (?v0 Int) (?v1 Int)) #148)
#244 := (iff #151 #243)
#241 := (iff #148 #240)
#238 := (= #145 #237)
#235 := (= #142 #234)
#232 := (iff #129 #231)
#229 := (iff #126 #228)
#226 := (iff #118 #225)
#223 := (iff #117 #222)
#224 := [rewrite]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [quant-intro #242]: #244
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (if #46 #47 #50)
#52 := (if #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#152 := (iff #54 #151)
#149 := (iff #53 #148)
#146 := (= #52 #145)
#143 := (= #51 #142)
#140 := (= #50 #139)
#137 := (= #49 #136)
#138 := [rewrite]: #137
#134 := (= #48 #133)
#135 := [rewrite]: #134
#141 := [monotonicity #135 #138]: #140
#130 := (iff #46 #129)
#127 := (iff #45 #126)
#112 := (iff #42 #111)
#113 := [rewrite]: #112
#119 := (iff #44 #118)
#123 := (iff #118 #118)
#121 := (iff #117 #117)
#122 := [rewrite]: #121
#124 := [monotonicity #122]: #123
#120 := [rewrite]: #119
#125 := [trans #120 #124]: #119
#128 := [monotonicity #125 #113]: #127
#115 := (iff #43 #114)
#108 := (iff #41 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#131 := [monotonicity #116 #128]: #130
#144 := [monotonicity #131 #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#71 := [asserted]: #54
#154 := [mp #71 #153]: #151
#246 := [mp #154 #245]: #243
#280 := [mp~ #246 #279]: #243
#309 := [mp #280 #308]: #306
#340 := [mp #309 #339]: #337
#797 := [mp #340 #796]: #792
#672 := (not #792)
#673 := (or #672 #454)
#724 := (* -1::Int 0::Int)
#723 := (* -1::Int #11)
#729 := (div #723 #724)
#730 := (* -1::Int #729)
#725 := (+ #14 #730)
#731 := (= #725 0::Int)
#737 := (div #11 0::Int)
#726 := (* -1::Int #737)
#727 := (+ #14 #726)
#728 := (= #727 0::Int)
#456 := (<= 0::Int 0::Int)
#450 := (>= #11 0::Int)
#732 := (or #450 #456)
#736 := (not #732)
#455 := (<= #11 0::Int)
#734 := (or #455 #456)
#735 := (not #734)
#733 := (or #735 #736)
#572 := (if #733 #728 #731)
#743 := (= 0::Int 0::Int)
#739 := (= #11 0::Int)
#453 := (or #739 #743)
#573 := (if #453 #454 #572)
#674 := (or #672 #573)
#675 := (iff #674 #673)
#656 := (iff #673 #673)
#658 := [rewrite]: #656
#669 := (iff #573 #454)
#693 := (div #723 0::Int)
#684 := (* -1::Int #693)
#697 := (+ #14 #684)
#699 := (= #697 0::Int)
#1 := true
#680 := (if true #454 #699)
#678 := (iff #680 #454)
#683 := [rewrite]: #678
#681 := (iff #573 #680)
#677 := (iff #572 #699)
#690 := (if false #728 #699)
#692 := (iff #690 #699)
#676 := [rewrite]: #692
#691 := (iff #572 #690)
#688 := (iff #731 #699)
#698 := (= #725 #697)
#686 := (= #730 #684)
#695 := (= #729 #693)
#702 := (= #724 0::Int)
#706 := [rewrite]: #702
#687 := [monotonicity #706]: #695
#696 := [monotonicity #687]: #686
#694 := [monotonicity #696]: #698
#689 := [monotonicity #694]: #688
#612 := (iff #733 false)
#600 := (or false false)
#610 := (iff #600 false)
#611 := [rewrite]: #610
#608 := (iff #733 #600)
#606 := (iff #736 false)
#410 := (not true)
#748 := (iff #410 false)
#749 := [rewrite]: #748
#589 := (iff #736 #410)
#701 := (iff #732 true)
#596 := (or #450 true)
#605 := (iff #596 true)
#700 := [rewrite]: #605
#555 := (iff #732 #596)
#715 := (iff #456 true)
#722 := [rewrite]: #715
#703 := [monotonicity #722]: #555
#704 := [trans #703 #700]: #701
#604 := [monotonicity #704]: #589
#607 := [trans #604 #749]: #606
#594 := (iff #735 false)
#709 := (iff #735 #410)
#710 := (iff #734 true)
#551 := (or #455 true)
#707 := (iff #551 true)
#708 := [rewrite]: #707
#553 := (iff #734 #551)
#554 := [monotonicity #722]: #553
#711 := [trans #554 #708]: #710
#712 := [monotonicity #711]: #709
#595 := [trans #712 #749]: #594
#609 := [monotonicity #595 #607]: #608
#705 := [trans #609 #611]: #612
#685 := [monotonicity #705 #689]: #691
#679 := [trans #685 #676]: #677
#720 := (iff #453 true)
#717 := (or #739 true)
#713 := (iff #717 true)
#714 := [rewrite]: #713
#718 := (iff #453 #717)
#574 := (iff #743 true)
#716 := [rewrite]: #574
#719 := [monotonicity #716]: #718
#721 := [trans #719 #714]: #720
#682 := [monotonicity #721 #679]: #681
#670 := [trans #682 #683]: #669
#655 := [monotonicity #670]: #675
#659 := [trans #655 #658]: #675
#671 := [quant-inst #11 #13]: #674
#660 := [mp #671 #659]: #673
#662 := [unit-resolution #660 #797]: #454
#663 := [monotonicity #662]: #17
#18 := (not #17)
#67 := [asserted]: #18
[unit-resolution #67 #663]: false
471141abc1c5de0524559d60a8710dc5938c99dd 296 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#12 := (f5 #10 1::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#736 := (= #12 0::Int)
#23 := (:var 0 Int)
#34 := (:var 1 Int)
#35 := (f6 f7 #34)
#36 := (f5 #35 #23)
#789 := (pattern #36)
#131 := -1::Int
#135 := (* -1::Int #23)
#132 := (* -1::Int #34)
#138 := (div #132 #135)
#329 := (* -1::Int #138)
#330 := (+ #36 #329)
#331 := (= #330 0::Int)
#46 := (div #34 #23)
#326 := (* -1::Int #46)
#327 := (+ #36 #326)
#328 := (= #327 0::Int)
#109 := (<= #23 0::Int)
#221 := (>= #34 0::Int)
#289 := (or #221 #109)
#290 := (not #289)
#105 := (<= #34 0::Int)
#285 := (or #105 #109)
#286 := (not #285)
#293 := (or #286 #290)
#332 := (if #293 #328 #331)
#325 := (= #36 0::Int)
#38 := (= #23 0::Int)
#37 := (= #34 0::Int)
#39 := (or #37 #38)
#333 := (if #39 #325 #332)
#790 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #789) #333)
#336 := (forall (vars (?v0 Int) (?v1 Int)) #333)
#793 := (iff #336 #790)
#791 := (iff #333 #333)
#792 := [refl]: #791
#794 := [quant-intro #792]: #793
#296 := (if #293 #46 #138)
#299 := (if #39 0::Int #296)
#302 := (= #36 #299)
#305 := (forall (vars (?v0 Int) (?v1 Int)) #302)
#337 := (iff #305 #336)
#334 := (iff #302 #333)
#335 := [rewrite]: #334
#338 := [quant-intro #335]: #337
#110 := (not #109)
#224 := (not #221)
#227 := (and #224 #110)
#106 := (not #105)
#113 := (and #106 #110)
#230 := (or #113 #227)
#233 := (if #230 #46 #138)
#236 := (if #39 0::Int #233)
#239 := (= #36 #236)
#242 := (forall (vars (?v0 Int) (?v1 Int)) #239)
#306 := (iff #242 #305)
#303 := (iff #239 #302)
#300 := (= #236 #299)
#297 := (= #233 #296)
#294 := (iff #230 #293)
#291 := (iff #227 #290)
#292 := [rewrite]: #291
#287 := (iff #113 #286)
#288 := [rewrite]: #287
#295 := [monotonicity #288 #292]: #294
#298 := [monotonicity #295]: #297
#301 := [monotonicity #298]: #300
#304 := [monotonicity #301]: #303
#307 := [quant-intro #304]: #306
#277 := (~ #242 #242)
#275 := (~ #239 #239)
#276 := [refl]: #275
#278 := [nnf-pos #276]: #277
#116 := (<= 0::Int #34)
#117 := (not #116)
#125 := (and #117 #110)
#128 := (or #113 #125)
#141 := (if #128 #46 #138)
#144 := (if #39 0::Int #141)
#147 := (= #36 #144)
#150 := (forall (vars (?v0 Int) (?v1 Int)) #147)
#243 := (iff #150 #242)
#240 := (iff #147 #239)
#237 := (= #144 #236)
#234 := (= #141 #233)
#231 := (iff #128 #230)
#228 := (iff #125 #227)
#225 := (iff #117 #224)
#222 := (iff #116 #221)
#223 := [rewrite]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [monotonicity #238]: #240
#244 := [quant-intro #241]: #243
#48 := (- #23)
#47 := (- #34)
#49 := (div #47 #48)
#41 := (< 0::Int #23)
#43 := (< #34 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #34)
#42 := (and #40 #41)
#45 := (or #42 #44)
#50 := (if #45 #46 #49)
#51 := (if #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#151 := (iff #53 #150)
#148 := (iff #52 #147)
#145 := (= #51 #144)
#142 := (= #50 #141)
#139 := (= #49 #138)
#136 := (= #48 #135)
#137 := [rewrite]: #136
#133 := (= #47 #132)
#134 := [rewrite]: #133
#140 := [monotonicity #134 #137]: #139
#129 := (iff #45 #128)
#126 := (iff #44 #125)
#111 := (iff #41 #110)
#112 := [rewrite]: #111
#118 := (iff #43 #117)
#122 := (iff #117 #117)
#120 := (iff #116 #116)
#121 := [rewrite]: #120
#123 := [monotonicity #121]: #122
#119 := [rewrite]: #118
#124 := [trans #119 #123]: #118
#127 := [monotonicity #124 #112]: #126
#114 := (iff #42 #113)
#107 := (iff #40 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#130 := [monotonicity #115 #127]: #129
#143 := [monotonicity #130 #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#70 := [asserted]: #53
#153 := [mp #70 #152]: #150
#245 := [mp #153 #244]: #242
#279 := [mp~ #245 #278]: #242
#308 := [mp #279 #307]: #305
#339 := [mp #308 #338]: #336
#795 := [mp #339 #794]: #790
#663 := (not #790)
#664 := (or #663 #736)
#731 := (* -1::Int 1::Int)
#734 := (* -1::Int 0::Int)
#735 := (div #734 #731)
#724 := (* -1::Int #735)
#725 := (+ #12 #724)
#726 := (= #725 0::Int)
#732 := (div 0::Int 1::Int)
#733 := (* -1::Int #732)
#448 := (+ #12 #733)
#730 := (= #448 0::Int)
#737 := (<= 1::Int 0::Int)
#550 := (>= 0::Int 0::Int)
#452 := (or #550 #737)
#453 := (not #452)
#740 := (<= 0::Int 0::Int)
#741 := (or #740 #737)
#451 := (not #741)
#454 := (or #451 #453)
#721 := (if #454 #730 #726)
#461 := (= 1::Int 0::Int)
#739 := (= 0::Int 0::Int)
#462 := (or #739 #461)
#722 := (if #462 #736 #721)
#665 := (or #663 #722)
#666 := (iff #665 #664)
#645 := (iff #664 #664)
#647 := [rewrite]: #645
#661 := (iff #722 #736)
#1 := true
#656 := (if true #736 #736)
#659 := (iff #656 #736)
#660 := [rewrite]: #659
#657 := (iff #722 #656)
#653 := (iff #721 #736)
#670 := (if false #736 #736)
#669 := (iff #670 #736)
#673 := [rewrite]: #669
#671 := (iff #721 #670)
#667 := (iff #726 #736)
#676 := (= #725 #12)
#700 := (+ #12 0::Int)
#693 := (= #700 #12)
#685 := [rewrite]: #693
#679 := (= #725 #700)
#677 := (= #724 0::Int)
#608 := (= #734 0::Int)
#609 := [rewrite]: #608
#674 := (= #724 #734)
#683 := (= #735 0::Int)
#697 := (div 0::Int -1::Int)
#688 := (= #697 0::Int)
#689 := [rewrite]: #688
#686 := (= #735 #697)
#696 := (= #731 -1::Int)
#692 := [rewrite]: #696
#687 := [monotonicity #609 #692]: #686
#690 := [trans #687 #689]: #683
#675 := [monotonicity #690]: #674
#678 := [trans #675 #609]: #677
#680 := [monotonicity #678]: #679
#681 := [trans #680 #685]: #676
#668 := [monotonicity #681]: #667
#694 := (iff #730 #736)
#682 := (= #448 #12)
#704 := (= #448 #700)
#610 := (= #733 0::Int)
#606 := (= #733 #734)
#605 := (= #732 0::Int)
#598 := [rewrite]: #605
#607 := [monotonicity #598]: #606
#703 := [trans #607 #609]: #610
#691 := [monotonicity #703]: #704
#684 := [trans #691 #685]: #682
#695 := [monotonicity #684]: #694
#602 := (iff #454 false)
#603 := (or false false)
#702 := (iff #603 false)
#587 := [rewrite]: #702
#698 := (iff #454 #603)
#553 := (iff #453 false)
#419 := (not true)
#744 := (iff #419 false)
#407 := [rewrite]: #744
#593 := (iff #453 #419)
#710 := (iff #452 true)
#570 := (or true false)
#714 := (iff #570 true)
#715 := [rewrite]: #714
#709 := (iff #452 #570)
#718 := (iff #737 false)
#719 := [rewrite]: #718
#423 := (iff #550 true)
#759 := [rewrite]: #423
#707 := [monotonicity #759 #719]: #709
#592 := [trans #707 #715]: #710
#594 := [monotonicity #592]: #593
#701 := [trans #594 #407]: #553
#706 := (iff #451 false)
#552 := (iff #451 #419)
#549 := (iff #741 true)
#713 := (iff #741 #570)
#711 := (iff #740 true)
#712 := [rewrite]: #711
#720 := [monotonicity #712 #719]: #713
#551 := [trans #720 #715]: #549
#705 := [monotonicity #551]: #552
#708 := [trans #705 #407]: #706
#699 := [monotonicity #708 #701]: #698
#604 := [trans #699 #587]: #602
#672 := [monotonicity #604 #695 #668]: #671
#654 := [trans #672 #673]: #653
#716 := (iff #462 true)
#571 := (iff #462 #570)
#723 := (iff #461 false)
#729 := [rewrite]: #723
#727 := (iff #739 true)
#728 := [rewrite]: #727
#572 := [monotonicity #728 #729]: #571
#717 := [trans #572 #715]: #716
#658 := [monotonicity #717 #654]: #657
#662 := [trans #658 #660]: #661
#644 := [monotonicity #662]: #666
#648 := [trans #644 #647]: #666
#655 := [quant-inst #9 #11]: #665
#649 := [mp #655 #648]: #664
#651 := [unit-resolution #649 #795]: #736
#646 := [monotonicity #651]: #15
#16 := (not #15)
#66 := [asserted]: #16
[unit-resolution #66 #646]: false
5f4a21ddc8bb410dbf2483dc973cb115e8b16b3c 299 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 1::Int
decl f4 :: S2
#7 := f4
#13 := (f3 f4 1::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 1::Int)
#11 := (f5 #10 1::Int)
#12 := (f3 f4 #11)
#14 := (= #12 #13)
#695 := (= #11 1::Int)
#23 := (:var 0 Int)
#34 := (:var 1 Int)
#35 := (f6 f7 #34)
#36 := (f5 #35 #23)
#789 := (pattern #36)
#22 := 0::Int
#131 := -1::Int
#135 := (* -1::Int #23)
#132 := (* -1::Int #34)
#138 := (div #132 #135)
#329 := (* -1::Int #138)
#330 := (+ #36 #329)
#331 := (= #330 0::Int)
#46 := (div #34 #23)
#326 := (* -1::Int #46)
#327 := (+ #36 #326)
#328 := (= #327 0::Int)
#109 := (<= #23 0::Int)
#221 := (>= #34 0::Int)
#289 := (or #221 #109)
#290 := (not #289)
#105 := (<= #34 0::Int)
#285 := (or #105 #109)
#286 := (not #285)
#293 := (or #286 #290)
#332 := (if #293 #328 #331)
#325 := (= #36 0::Int)
#38 := (= #23 0::Int)
#37 := (= #34 0::Int)
#39 := (or #37 #38)
#333 := (if #39 #325 #332)
#790 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #789) #333)
#336 := (forall (vars (?v0 Int) (?v1 Int)) #333)
#793 := (iff #336 #790)
#791 := (iff #333 #333)
#792 := [refl]: #791
#794 := [quant-intro #792]: #793
#296 := (if #293 #46 #138)
#299 := (if #39 0::Int #296)
#302 := (= #36 #299)
#305 := (forall (vars (?v0 Int) (?v1 Int)) #302)
#337 := (iff #305 #336)
#334 := (iff #302 #333)
#335 := [rewrite]: #334
#338 := [quant-intro #335]: #337
#110 := (not #109)
#224 := (not #221)
#227 := (and #224 #110)
#106 := (not #105)
#113 := (and #106 #110)
#230 := (or #113 #227)
#233 := (if #230 #46 #138)
#236 := (if #39 0::Int #233)
#239 := (= #36 #236)
#242 := (forall (vars (?v0 Int) (?v1 Int)) #239)
#306 := (iff #242 #305)
#303 := (iff #239 #302)
#300 := (= #236 #299)
#297 := (= #233 #296)
#294 := (iff #230 #293)
#291 := (iff #227 #290)
#292 := [rewrite]: #291
#287 := (iff #113 #286)
#288 := [rewrite]: #287
#295 := [monotonicity #288 #292]: #294
#298 := [monotonicity #295]: #297
#301 := [monotonicity #298]: #300
#304 := [monotonicity #301]: #303
#307 := [quant-intro #304]: #306
#277 := (~ #242 #242)
#275 := (~ #239 #239)
#276 := [refl]: #275
#278 := [nnf-pos #276]: #277
#116 := (<= 0::Int #34)
#117 := (not #116)
#125 := (and #117 #110)
#128 := (or #113 #125)
#141 := (if #128 #46 #138)
#144 := (if #39 0::Int #141)
#147 := (= #36 #144)
#150 := (forall (vars (?v0 Int) (?v1 Int)) #147)
#243 := (iff #150 #242)
#240 := (iff #147 #239)
#237 := (= #144 #236)
#234 := (= #141 #233)
#231 := (iff #128 #230)
#228 := (iff #125 #227)
#225 := (iff #117 #224)
#222 := (iff #116 #221)
#223 := [rewrite]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [monotonicity #238]: #240
#244 := [quant-intro #241]: #243
#48 := (- #23)
#47 := (- #34)
#49 := (div #47 #48)
#41 := (< 0::Int #23)
#43 := (< #34 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #34)
#42 := (and #40 #41)
#45 := (or #42 #44)
#50 := (if #45 #46 #49)
#51 := (if #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#151 := (iff #53 #150)
#148 := (iff #52 #147)
#145 := (= #51 #144)
#142 := (= #50 #141)
#139 := (= #49 #138)
#136 := (= #48 #135)
#137 := [rewrite]: #136
#133 := (= #47 #132)
#134 := [rewrite]: #133
#140 := [monotonicity #134 #137]: #139
#129 := (iff #45 #128)
#126 := (iff #44 #125)
#111 := (iff #41 #110)
#112 := [rewrite]: #111
#118 := (iff #43 #117)
#122 := (iff #117 #117)
#120 := (iff #116 #116)
#121 := [rewrite]: #120
#123 := [monotonicity #121]: #122
#119 := [rewrite]: #118
#124 := [trans #119 #123]: #118
#127 := [monotonicity #124 #112]: #126
#114 := (iff #42 #113)
#107 := (iff #40 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#130 := [monotonicity #115 #127]: #129
#143 := [monotonicity #130 #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#70 := [asserted]: #53
#153 := [mp #70 #152]: #150
#245 := [mp #153 #244]: #242
#279 := [mp~ #245 #278]: #242
#308 := [mp #279 #307]: #305
#339 := [mp #308 #338]: #336
#795 := [mp #339 #794]: #790
#666 := (not #790)
#644 := (or #666 #695)
#730 := (* -1::Int 1::Int)
#734 := (div #730 #730)
#731 := (* -1::Int #734)
#735 := (+ #11 #731)
#724 := (= #735 0::Int)
#454 := (div 1::Int 1::Int)
#732 := (* -1::Int #454)
#733 := (+ #11 #732)
#448 := (= #733 0::Int)
#740 := (<= 1::Int 0::Int)
#550 := (>= 1::Int 0::Int)
#451 := (or #550 #740)
#452 := (not #451)
#737 := (or #740 #740)
#741 := (not #737)
#453 := (or #741 #452)
#725 := (if #453 #448 #724)
#736 := (= #11 0::Int)
#461 := (= 1::Int 0::Int)
#462 := (or #461 #461)
#726 := (if #462 #736 #725)
#645 := (or #666 #726)
#648 := (iff #645 #644)
#650 := (iff #644 #644)
#651 := [rewrite]: #650
#665 := (iff #726 #695)
#660 := (if false #736 #695)
#663 := (iff #660 #695)
#664 := [rewrite]: #663
#661 := (iff #726 #660)
#658 := (iff #725 #695)
#1 := true
#673 := (if true #695 #695)
#656 := (iff #673 #695)
#657 := [rewrite]: #656
#653 := (iff #725 #673)
#672 := (iff #724 #695)
#700 := (+ -1::Int #11)
#682 := (= #700 0::Int)
#696 := (iff #682 #695)
#692 := [rewrite]: #696
#670 := (iff #724 #682)
#667 := (= #735 #700)
#609 := (+ #11 -1::Int)
#704 := (= #609 #700)
#691 := [rewrite]: #704
#676 := (= #735 #609)
#679 := (= #731 -1::Int)
#598 := (= #730 -1::Int)
#606 := [rewrite]: #598
#677 := (= #731 #730)
#674 := (= #734 1::Int)
#687 := (div -1::Int -1::Int)
#683 := (= #687 1::Int)
#690 := [rewrite]: #683
#688 := (= #734 #687)
#689 := [monotonicity #606 #606]: #688
#675 := [trans #689 #690]: #674
#678 := [monotonicity #675]: #677
#680 := [trans #678 #606]: #679
#681 := [monotonicity #680]: #676
#668 := [trans #681 #691]: #667
#671 := [monotonicity #668]: #670
#669 := [trans #671 #692]: #672
#697 := (iff #448 #695)
#684 := (iff #448 #682)
#693 := (= #733 #700)
#610 := (= #733 #609)
#607 := (= #732 -1::Int)
#604 := (= #732 #730)
#587 := (= #454 1::Int)
#602 := [rewrite]: #587
#605 := [monotonicity #602]: #604
#608 := [trans #605 #606]: #607
#703 := [monotonicity #608]: #610
#685 := [trans #703 #691]: #693
#694 := [monotonicity #685]: #684
#686 := [trans #694 #692]: #697
#699 := (iff #453 true)
#705 := (or true false)
#709 := (iff #705 true)
#707 := [rewrite]: #709
#603 := (iff #453 #705)
#553 := (iff #452 false)
#419 := (not true)
#744 := (iff #419 false)
#407 := [rewrite]: #744
#593 := (iff #452 #419)
#710 := (iff #451 true)
#706 := (iff #451 #705)
#714 := (iff #740 false)
#715 := [rewrite]: #714
#423 := (iff #550 true)
#759 := [rewrite]: #423
#708 := [monotonicity #759 #715]: #706
#592 := [trans #708 #707]: #710
#594 := [monotonicity #592]: #593
#701 := [trans #594 #407]: #553
#551 := (iff #741 true)
#718 := (not false)
#720 := (iff #718 true)
#549 := [rewrite]: #720
#719 := (iff #741 #718)
#711 := (iff #737 false)
#727 := (or false false)
#729 := (iff #727 false)
#570 := [rewrite]: #729
#716 := (iff #737 #727)
#717 := [monotonicity #715 #715]: #716
#712 := [trans #717 #570]: #711
#713 := [monotonicity #712]: #719
#552 := [trans #713 #549]: #551
#698 := [monotonicity #552 #701]: #603
#702 := [trans #698 #707]: #699
#654 := [monotonicity #702 #686 #669]: #653
#659 := [trans #654 #657]: #658
#571 := (iff #462 false)
#728 := (iff #462 #727)
#721 := (iff #461 false)
#722 := [rewrite]: #721
#723 := [monotonicity #722 #722]: #728
#572 := [trans #723 #570]: #571
#662 := [monotonicity #572 #659]: #661
#655 := [trans #662 #664]: #665
#649 := [monotonicity #655]: #648
#646 := [trans #649 #651]: #648
#647 := [quant-inst #9 #9]: #645
#652 := [mp #647 #646]: #644
#635 := [unit-resolution #652 #795]: #695
#636 := [monotonicity #635]: #14
#15 := (not #14)
#66 := [asserted]: #15
[unit-resolution #66 #636]: false
68e6a38048a26ed5e2cde0fce9122240abdb6e8c 310 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 3::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 3::Int)
decl f5 :: (-> S4 Int Int)
#11 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 3::Int)
#12 := (f5 #10 1::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#684 := (= #12 3::Int)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#790 := (pattern #37)
#23 := 0::Int
#132 := -1::Int
#136 := (* -1::Int #24)
#133 := (* -1::Int #35)
#139 := (div #133 #136)
#330 := (* -1::Int #139)
#331 := (+ #37 #330)
#332 := (= #331 0::Int)
#47 := (div #35 #24)
#327 := (* -1::Int #47)
#328 := (+ #37 #327)
#329 := (= #328 0::Int)
#110 := (<= #24 0::Int)
#222 := (>= #35 0::Int)
#290 := (or #222 #110)
#291 := (not #290)
#106 := (<= #35 0::Int)
#286 := (or #106 #110)
#287 := (not #286)
#294 := (or #287 #291)
#333 := (if #294 #329 #332)
#326 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#334 := (if #40 #326 #333)
#791 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #790) #334)
#337 := (forall (vars (?v0 Int) (?v1 Int)) #334)
#794 := (iff #337 #791)
#792 := (iff #334 #334)
#793 := [refl]: #792
#795 := [quant-intro #793]: #794
#297 := (if #294 #47 #139)
#300 := (if #40 0::Int #297)
#303 := (= #37 #300)
#306 := (forall (vars (?v0 Int) (?v1 Int)) #303)
#338 := (iff #306 #337)
#335 := (iff #303 #334)
#336 := [rewrite]: #335
#339 := [quant-intro #336]: #338
#111 := (not #110)
#225 := (not #222)
#228 := (and #225 #111)
#107 := (not #106)
#114 := (and #107 #111)
#231 := (or #114 #228)
#234 := (if #231 #47 #139)
#237 := (if #40 0::Int #234)
#240 := (= #37 #237)
#243 := (forall (vars (?v0 Int) (?v1 Int)) #240)
#307 := (iff #243 #306)
#304 := (iff #240 #303)
#301 := (= #237 #300)
#298 := (= #234 #297)
#295 := (iff #231 #294)
#292 := (iff #228 #291)
#293 := [rewrite]: #292
#288 := (iff #114 #287)
#289 := [rewrite]: #288
#296 := [monotonicity #289 #293]: #295
#299 := [monotonicity #296]: #298
#302 := [monotonicity #299]: #301
#305 := [monotonicity #302]: #304
#308 := [quant-intro #305]: #307
#278 := (~ #243 #243)
#276 := (~ #240 #240)
#277 := [refl]: #276
#279 := [nnf-pos #277]: #278
#117 := (<= 0::Int #35)
#118 := (not #117)
#126 := (and #118 #111)
#129 := (or #114 #126)
#142 := (if #129 #47 #139)
#145 := (if #40 0::Int #142)
#148 := (= #37 #145)
#151 := (forall (vars (?v0 Int) (?v1 Int)) #148)
#244 := (iff #151 #243)
#241 := (iff #148 #240)
#238 := (= #145 #237)
#235 := (= #142 #234)
#232 := (iff #129 #231)
#229 := (iff #126 #228)
#226 := (iff #118 #225)
#223 := (iff #117 #222)
#224 := [rewrite]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [quant-intro #242]: #244
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (if #46 #47 #50)
#52 := (if #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#152 := (iff #54 #151)
#149 := (iff #53 #148)
#146 := (= #52 #145)
#143 := (= #51 #142)
#140 := (= #50 #139)
#137 := (= #49 #136)
#138 := [rewrite]: #137
#134 := (= #48 #133)
#135 := [rewrite]: #134
#141 := [monotonicity #135 #138]: #140
#130 := (iff #46 #129)
#127 := (iff #45 #126)
#112 := (iff #42 #111)
#113 := [rewrite]: #112
#119 := (iff #44 #118)
#123 := (iff #118 #118)
#121 := (iff #117 #117)
#122 := [rewrite]: #121
#124 := [monotonicity #122]: #123
#120 := [rewrite]: #119
#125 := [trans #120 #124]: #119
#128 := [monotonicity #125 #113]: #127
#115 := (iff #43 #114)
#108 := (iff #41 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#131 := [monotonicity #116 #128]: #130
#144 := [monotonicity #131 #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#71 := [asserted]: #54
#154 := [mp #71 #153]: #151
#246 := [mp #154 #245]: #243
#280 := [mp~ #246 #279]: #243
#309 := [mp #280 #308]: #306
#340 := [mp #309 #339]: #337
#796 := [mp #340 #795]: #791
#639 := (not #791)
#635 := (or #639 #684)
#736 := (* -1::Int 1::Int)
#732 := (* -1::Int 3::Int)
#725 := (div #732 #736)
#726 := (* -1::Int #725)
#727 := (+ #12 #726)
#722 := (= #727 0::Int)
#734 := (div 3::Int 1::Int)
#449 := (* -1::Int #734)
#731 := (+ #12 #449)
#735 := (= #731 0::Int)
#742 := (<= 1::Int 0::Int)
#551 := (>= 3::Int 0::Int)
#454 := (or #551 #742)
#455 := (not #454)
#738 := (<= 3::Int 0::Int)
#452 := (or #738 #742)
#453 := (not #452)
#733 := (or #453 #455)
#723 := (if #733 #735 #722)
#741 := (= #12 0::Int)
#463 := (= 1::Int 0::Int)
#462 := (= 3::Int 0::Int)
#737 := (or #462 #463)
#728 := (if #737 #741 #723)
#636 := (or #639 #728)
#640 := (iff #636 #635)
#642 := (iff #635 #635)
#643 := [rewrite]: #642
#647 := (iff #728 #684)
#648 := (if false #741 #684)
#651 := (iff #648 #684)
#652 := [rewrite]: #651
#649 := (iff #728 #648)
#645 := (iff #723 #684)
#1 := true
#664 := (if true #684 #684)
#656 := (iff #664 #684)
#667 := [rewrite]: #656
#665 := (iff #723 #664)
#662 := (iff #722 #684)
#701 := -3::Int
#696 := (+ -3::Int #12)
#688 := (= #696 0::Int)
#691 := (iff #688 #684)
#675 := [rewrite]: #691
#660 := (iff #722 #688)
#658 := (= #727 #696)
#683 := (+ #12 -3::Int)
#697 := (= #683 #696)
#693 := [rewrite]: #697
#655 := (= #727 #683)
#674 := (= #726 -3::Int)
#705 := (= #732 -3::Int)
#692 := [rewrite]: #705
#673 := (= #726 #732)
#671 := (= #725 3::Int)
#681 := (div -3::Int -1::Int)
#668 := (= #681 3::Int)
#669 := [rewrite]: #668
#677 := (= #725 #681)
#679 := (= #736 -1::Int)
#680 := [rewrite]: #679
#682 := [monotonicity #692 #680]: #677
#672 := [trans #682 #669]: #671
#670 := [monotonicity #672]: #673
#654 := [trans #670 #692]: #674
#657 := [monotonicity #654]: #655
#659 := [trans #657 #693]: #658
#661 := [monotonicity #659]: #660
#663 := [trans #661 #675]: #662
#676 := (iff #735 #684)
#689 := (iff #735 #688)
#698 := (= #731 #696)
#685 := (= #731 #683)
#694 := (= #449 -3::Int)
#611 := (= #449 #732)
#609 := (= #734 3::Int)
#610 := [rewrite]: #609
#704 := [monotonicity #610]: #611
#686 := [trans #704 #692]: #694
#695 := [monotonicity #686]: #685
#687 := [trans #695 #693]: #698
#690 := [monotonicity #687]: #689
#678 := [trans #690 #675]: #676
#607 := (iff #733 true)
#594 := (or true false)
#702 := (iff #594 true)
#604 := [rewrite]: #702
#606 := (iff #733 #594)
#603 := (iff #455 false)
#420 := (not true)
#745 := (iff #420 false)
#408 := [rewrite]: #745
#703 := (iff #455 #420)
#699 := (iff #454 true)
#595 := (iff #454 #594)
#720 := (iff #742 false)
#714 := [rewrite]: #720
#424 := (iff #551 true)
#760 := [rewrite]: #424
#554 := [monotonicity #760 #714]: #595
#700 := [trans #554 #604]: #699
#588 := [monotonicity #700]: #703
#605 := [trans #588 #408]: #603
#711 := (iff #453 true)
#706 := (not false)
#710 := (iff #706 true)
#708 := [rewrite]: #710
#707 := (iff #453 #706)
#552 := (iff #452 false)
#572 := (or false false)
#716 := (iff #572 false)
#717 := [rewrite]: #716
#721 := (iff #452 #572)
#713 := (iff #738 false)
#719 := [rewrite]: #713
#550 := [monotonicity #719 #714]: #721
#553 := [trans #550 #717]: #552
#709 := [monotonicity #553]: #707
#593 := [trans #709 #708]: #711
#599 := [monotonicity #593 #605]: #606
#608 := [trans #599 #604]: #607
#666 := [monotonicity #608 #678 #663]: #665
#646 := [trans #666 #667]: #645
#718 := (iff #737 false)
#573 := (iff #737 #572)
#730 := (iff #463 false)
#571 := [rewrite]: #730
#729 := (iff #462 false)
#724 := [rewrite]: #729
#715 := [monotonicity #724 #571]: #573
#712 := [trans #715 #717]: #718
#650 := [monotonicity #712 #646]: #649
#653 := [trans #650 #652]: #647
#641 := [monotonicity #653]: #640
#638 := [trans #641 #643]: #640
#637 := [quant-inst #9 #11]: #636
#644 := [mp #637 #638]: #635
#619 := [unit-resolution #644 #796]: #684
#512 := [monotonicity #619]: #15
#16 := (not #15)
#67 := [asserted]: #16
[unit-resolution #67 #512]: false
d21ca909bb9fdc349bb51970eb9c0a08bd158bb5 359 0
unsat
#2 := false
decl f10 :: S3
#10 := f10
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 Int Int)
#13 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 1::Int)
decl f4 :: S2
#7 := f4
#15 := (f3 f4 #14)
#16 := (= #15 f10)
#357 := (f3 f4 #11)
#441 := (= #357 f10)
#18 := (:var 0 S3)
#19 := (f8 f9 #18)
#770 := (pattern #19)
#20 := (f3 f4 #19)
#21 := (= #20 #18)
#771 := (forall (vars (?v0 S3)) (:pat #770) #21)
#22 := (forall (vars (?v0 S3)) #21)
#774 := (iff #22 #771)
#772 := (iff #21 #21)
#773 := [refl]: #772
#775 := [quant-intro #773]: #774
#265 := (~ #22 #22)
#271 := (~ #21 #21)
#272 := [refl]: #271
#266 := [nnf-pos #272]: #265
#68 := [asserted]: #22
#273 := [mp~ #68 #266]: #22
#776 := [mp #273 #775]: #771
#434 := (not #771)
#445 := (or #434 #441)
#446 := [quant-inst #10]: #445
#663 := [unit-resolution #446 #776]: #441
#645 := (= #15 #357)
#665 := (= #14 #11)
#749 := (div #11 1::Int)
#636 := (= #749 #11)
#537 := (= #11 #749)
#23 := 0::Int
#132 := -1::Int
#750 := (* -1::Int #749)
#641 := (+ #11 #750)
#617 := (<= #641 0::Int)
#660 := (= #641 0::Int)
#1 := true
#199 := [true-axiom]: true
#558 := (or false #660)
#559 := [th-lemma arith]: #558
#561 := [unit-resolution #559 #199]: #660
#562 := (not #660)
#563 := (or #562 #617)
#564 := [th-lemma arith triangle-eq]: #563
#565 := [unit-resolution #564 #561]: #617
#618 := (>= #641 0::Int)
#566 := (or #562 #618)
#549 := [th-lemma arith triangle-eq]: #566
#567 := [unit-resolution #549 #561]: #618
#538 := [th-lemma arith eq-propagate 1 1 #567 #565]: #537
#542 := [symm #538]: #636
#555 := (= #14 #749)
#751 := (+ #14 #750)
#608 := (<= #751 0::Int)
#746 := (= #751 0::Int)
#766 := (= #11 0::Int)
#687 := (not #766)
#659 := (= 0::Int #11)
#664 := [hypothesis]: #766
#655 := [symm #664]: #659
#761 := (= #14 0::Int)
#657 := (or #687 #761)
#752 := (* -1::Int #11)
#571 := (div #752 -1::Int)
#715 := (* -1::Int #571)
#718 := (+ #14 #715)
#719 := (= #718 0::Int)
#410 := (>= #11 0::Int)
#726 := (not #410)
#404 := (<= #11 0::Int)
#454 := (not #404)
#723 := (or #454 #726)
#721 := (if #723 #746 #719)
#553 := (if #766 #761 #721)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#790 := (pattern #37)
#136 := (* -1::Int #24)
#133 := (* -1::Int #35)
#139 := (div #133 #136)
#330 := (* -1::Int #139)
#331 := (+ #37 #330)
#332 := (= #331 0::Int)
#47 := (div #35 #24)
#327 := (* -1::Int #47)
#328 := (+ #37 #327)
#329 := (= #328 0::Int)
#110 := (<= #24 0::Int)
#222 := (>= #35 0::Int)
#290 := (or #222 #110)
#291 := (not #290)
#106 := (<= #35 0::Int)
#286 := (or #106 #110)
#287 := (not #286)
#294 := (or #287 #291)
#333 := (if #294 #329 #332)
#326 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#334 := (if #40 #326 #333)
#791 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #790) #334)
#337 := (forall (vars (?v0 Int) (?v1 Int)) #334)
#794 := (iff #337 #791)
#792 := (iff #334 #334)
#793 := [refl]: #792
#795 := [quant-intro #793]: #794
#297 := (if #294 #47 #139)
#300 := (if #40 0::Int #297)
#303 := (= #37 #300)
#306 := (forall (vars (?v0 Int) (?v1 Int)) #303)
#338 := (iff #306 #337)
#335 := (iff #303 #334)
#336 := [rewrite]: #335
#339 := [quant-intro #336]: #338
#111 := (not #110)
#225 := (not #222)
#228 := (and #225 #111)
#107 := (not #106)
#114 := (and #107 #111)
#231 := (or #114 #228)
#234 := (if #231 #47 #139)
#237 := (if #40 0::Int #234)
#240 := (= #37 #237)
#243 := (forall (vars (?v0 Int) (?v1 Int)) #240)
#307 := (iff #243 #306)
#304 := (iff #240 #303)
#301 := (= #237 #300)
#298 := (= #234 #297)
#295 := (iff #231 #294)
#292 := (iff #228 #291)
#293 := [rewrite]: #292
#288 := (iff #114 #287)
#289 := [rewrite]: #288
#296 := [monotonicity #289 #293]: #295
#299 := [monotonicity #296]: #298
#302 := [monotonicity #299]: #301
#305 := [monotonicity #302]: #304
#308 := [quant-intro #305]: #307
#278 := (~ #243 #243)
#276 := (~ #240 #240)
#277 := [refl]: #276
#279 := [nnf-pos #277]: #278
#117 := (<= 0::Int #35)
#118 := (not #117)
#126 := (and #118 #111)
#129 := (or #114 #126)
#142 := (if #129 #47 #139)
#145 := (if #40 0::Int #142)
#148 := (= #37 #145)
#151 := (forall (vars (?v0 Int) (?v1 Int)) #148)
#244 := (iff #151 #243)
#241 := (iff #148 #240)
#238 := (= #145 #237)
#235 := (= #142 #234)
#232 := (iff #129 #231)
#229 := (iff #126 #228)
#226 := (iff #118 #225)
#223 := (iff #117 #222)
#224 := [rewrite]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [quant-intro #242]: #244
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (if #46 #47 #50)
#52 := (if #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#152 := (iff #54 #151)
#149 := (iff #53 #148)
#146 := (= #52 #145)
#143 := (= #51 #142)
#140 := (= #50 #139)
#137 := (= #49 #136)
#138 := [rewrite]: #137
#134 := (= #48 #133)
#135 := [rewrite]: #134
#141 := [monotonicity #135 #138]: #140
#130 := (iff #46 #129)
#127 := (iff #45 #126)
#112 := (iff #42 #111)
#113 := [rewrite]: #112
#119 := (iff #44 #118)
#123 := (iff #118 #118)
#121 := (iff #117 #117)
#122 := [rewrite]: #121
#124 := [monotonicity #122]: #123
#120 := [rewrite]: #119
#125 := [trans #120 #124]: #119
#128 := [monotonicity #125 #113]: #127
#115 := (iff #43 #114)
#108 := (iff #41 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#131 := [monotonicity #116 #128]: #130
#144 := [monotonicity #131 #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#71 := [asserted]: #54
#154 := [mp #71 #153]: #151
#246 := [mp #154 #245]: #243
#280 := [mp~ #246 #279]: #243
#309 := [mp #280 #308]: #306
#340 := [mp #309 #339]: #337
#796 := [mp #340 #795]: #791
#709 := (not #791)
#710 := (or #709 #553)
#390 := (* -1::Int 1::Int)
#753 := (div #752 #390)
#755 := (* -1::Int #753)
#395 := (+ #14 #755)
#396 := (= #395 0::Int)
#745 := (<= 1::Int 0::Int)
#411 := (or #410 #745)
#747 := (not #411)
#408 := (or #404 #745)
#409 := (not #408)
#748 := (or #409 #747)
#756 := (if #748 #746 #396)
#767 := (= 1::Int 0::Int)
#420 := (or #766 #767)
#754 := (if #420 #761 #756)
#708 := (or #709 #754)
#593 := (iff #708 #710)
#595 := (iff #710 #710)
#554 := [rewrite]: #595
#706 := (iff #754 #553)
#550 := (iff #756 #721)
#720 := (iff #396 #719)
#712 := (= #395 #718)
#716 := (= #755 #715)
#572 := (= #753 #571)
#724 := (= #390 -1::Int)
#730 := [rewrite]: #724
#573 := [monotonicity #730]: #572
#717 := [monotonicity #573]: #716
#713 := [monotonicity #717]: #712
#714 := [monotonicity #713]: #720
#728 := (iff #748 #723)
#727 := (iff #747 #726)
#736 := (iff #411 #410)
#734 := (or #410 false)
#735 := (iff #734 #410)
#732 := [rewrite]: #735
#449 := (iff #411 #734)
#740 := (iff #745 false)
#462 := [rewrite]: #740
#731 := [monotonicity #462]: #449
#725 := [trans #731 #732]: #736
#722 := [monotonicity #725]: #727
#455 := (iff #409 #454)
#452 := (iff #408 #404)
#463 := (or #404 false)
#738 := (iff #463 #404)
#742 := [rewrite]: #738
#737 := (iff #408 #463)
#741 := [monotonicity #462]: #737
#453 := [trans #741 #742]: #452
#733 := [monotonicity #453]: #455
#729 := [monotonicity #733 #722]: #728
#552 := [monotonicity #729 #714]: #550
#363 := (iff #420 #766)
#744 := (or #766 false)
#468 := (iff #744 #766)
#469 := [rewrite]: #468
#466 := (iff #420 #744)
#757 := (iff #767 false)
#743 := [rewrite]: #757
#467 := [monotonicity #743]: #466
#739 := [trans #467 #469]: #363
#707 := [monotonicity #739 #552]: #706
#594 := [monotonicity #707]: #593
#702 := [trans #594 #554]: #593
#711 := [quant-inst #11 #13]: #708
#604 := [mp #711 #702]: #710
#631 := [unit-resolution #604 #796]: #553
#698 := (not #553)
#688 := (or #698 #687 #761)
#689 := [def-axiom]: #688
#658 := [unit-resolution #689 #631]: #657
#646 := [unit-resolution #658 #664]: #761
#666 := [trans #646 #655]: #665
#648 := [monotonicity #666]: #645
#661 := [trans #648 #663]: #16
#17 := (not #16)
#67 := [asserted]: #17
#662 := [unit-resolution #67 #661]: false
#623 := [lemma #662]: #687
#621 := (or #766 #746)
#605 := (not #723)
#683 := (not #746)
#627 := [hypothesis]: #683
#628 := [hypothesis]: #687
#632 := (or #766 #721)
#690 := (or #698 #766 #721)
#684 := [def-axiom]: #690
#633 := [unit-resolution #684 #631]: #632
#629 := [unit-resolution #633 #628]: #721
#701 := (not #721)
#705 := (or #701 #605 #746)
#692 := [def-axiom]: #705
#634 := [unit-resolution #692 #629 #627]: #605
#588 := (or #723 #410)
#603 := [def-axiom]: #588
#614 := [unit-resolution #603 #634]: #410
#700 := (or #723 #404)
#703 := [def-axiom]: #700
#560 := [unit-resolution #703 #634]: #404
#615 := (or #766 #454 #726)
#596 := [th-lemma arith triangle-eq]: #615
#620 := [unit-resolution #596 #628 #560 #614]: false
#616 := [lemma #620]: #621
#583 := [unit-resolution #616 #623]: #746
#584 := (or #683 #608)
#585 := [th-lemma arith triangle-eq]: #584
#570 := [unit-resolution #585 #583]: #608
#609 := (>= #751 0::Int)
#586 := (or #683 #609)
#547 := [th-lemma arith triangle-eq]: #586
#548 := [unit-resolution #547 #583]: #609
#557 := [th-lemma arith eq-propagate 1 1 #548 #570]: #555
#543 := [trans #557 #542]: #665
#544 := [monotonicity #543]: #645
#387 := [trans #544 #663]: #16
[unit-resolution #67 #387]: false
6833c76ab94aad24a4f35a6e42e2cc121c836709 297 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#12 := (f5 #10 3::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#737 := (= #12 0::Int)
#23 := (:var 0 Int)
#34 := (:var 1 Int)
#35 := (f6 f7 #34)
#36 := (f5 #35 #23)
#790 := (pattern #36)
#131 := -1::Int
#135 := (* -1::Int #23)
#132 := (* -1::Int #34)
#138 := (div #132 #135)
#329 := (* -1::Int #138)
#330 := (+ #36 #329)
#331 := (= #330 0::Int)
#46 := (div #34 #23)
#326 := (* -1::Int #46)
#327 := (+ #36 #326)
#328 := (= #327 0::Int)
#109 := (<= #23 0::Int)
#221 := (>= #34 0::Int)
#289 := (or #221 #109)
#290 := (not #289)
#105 := (<= #34 0::Int)
#285 := (or #105 #109)
#286 := (not #285)
#293 := (or #286 #290)
#332 := (if #293 #328 #331)
#325 := (= #36 0::Int)
#38 := (= #23 0::Int)
#37 := (= #34 0::Int)
#39 := (or #37 #38)
#333 := (if #39 #325 #332)
#791 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #790) #333)
#336 := (forall (vars (?v0 Int) (?v1 Int)) #333)
#794 := (iff #336 #791)
#792 := (iff #333 #333)
#793 := [refl]: #792
#795 := [quant-intro #793]: #794
#296 := (if #293 #46 #138)
#299 := (if #39 0::Int #296)
#302 := (= #36 #299)
#305 := (forall (vars (?v0 Int) (?v1 Int)) #302)
#337 := (iff #305 #336)
#334 := (iff #302 #333)
#335 := [rewrite]: #334
#338 := [quant-intro #335]: #337
#110 := (not #109)
#224 := (not #221)
#227 := (and #224 #110)
#106 := (not #105)
#113 := (and #106 #110)
#230 := (or #113 #227)
#233 := (if #230 #46 #138)
#236 := (if #39 0::Int #233)
#239 := (= #36 #236)
#242 := (forall (vars (?v0 Int) (?v1 Int)) #239)
#306 := (iff #242 #305)
#303 := (iff #239 #302)
#300 := (= #236 #299)
#297 := (= #233 #296)
#294 := (iff #230 #293)
#291 := (iff #227 #290)
#292 := [rewrite]: #291
#287 := (iff #113 #286)
#288 := [rewrite]: #287
#295 := [monotonicity #288 #292]: #294
#298 := [monotonicity #295]: #297
#301 := [monotonicity #298]: #300
#304 := [monotonicity #301]: #303
#307 := [quant-intro #304]: #306
#277 := (~ #242 #242)
#275 := (~ #239 #239)
#276 := [refl]: #275
#278 := [nnf-pos #276]: #277
#116 := (<= 0::Int #34)
#117 := (not #116)
#125 := (and #117 #110)
#128 := (or #113 #125)
#141 := (if #128 #46 #138)
#144 := (if #39 0::Int #141)
#147 := (= #36 #144)
#150 := (forall (vars (?v0 Int) (?v1 Int)) #147)
#243 := (iff #150 #242)
#240 := (iff #147 #239)
#237 := (= #144 #236)
#234 := (= #141 #233)
#231 := (iff #128 #230)
#228 := (iff #125 #227)
#225 := (iff #117 #224)
#222 := (iff #116 #221)
#223 := [rewrite]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [monotonicity #238]: #240
#244 := [quant-intro #241]: #243
#48 := (- #23)
#47 := (- #34)
#49 := (div #47 #48)
#41 := (< 0::Int #23)
#43 := (< #34 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #34)
#42 := (and #40 #41)
#45 := (or #42 #44)
#50 := (if #45 #46 #49)
#51 := (if #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#151 := (iff #53 #150)
#148 := (iff #52 #147)
#145 := (= #51 #144)
#142 := (= #50 #141)
#139 := (= #49 #138)
#136 := (= #48 #135)
#137 := [rewrite]: #136
#133 := (= #47 #132)
#134 := [rewrite]: #133
#140 := [monotonicity #134 #137]: #139
#129 := (iff #45 #128)
#126 := (iff #44 #125)
#111 := (iff #41 #110)
#112 := [rewrite]: #111
#118 := (iff #43 #117)
#122 := (iff #117 #117)
#120 := (iff #116 #116)
#121 := [rewrite]: #120
#123 := [monotonicity #121]: #122
#119 := [rewrite]: #118
#124 := [trans #119 #123]: #118
#127 := [monotonicity #124 #112]: #126
#114 := (iff #42 #113)
#107 := (iff #40 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#130 := [monotonicity #115 #127]: #129
#143 := [monotonicity #130 #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#70 := [asserted]: #53
#153 := [mp #70 #152]: #150
#245 := [mp #153 #244]: #242
#279 := [mp~ #245 #278]: #242
#308 := [mp #279 #307]: #305
#339 := [mp #308 #338]: #336
#796 := [mp #339 #795]: #791
#665 := (not #791)
#666 := (or #665 #737)
#732 := (* -1::Int 3::Int)
#735 := (* -1::Int 0::Int)
#736 := (div #735 #732)
#725 := (* -1::Int #736)
#726 := (+ #12 #725)
#727 := (= #726 0::Int)
#733 := (div 0::Int 3::Int)
#734 := (* -1::Int #733)
#449 := (+ #12 #734)
#731 := (= #449 0::Int)
#738 := (<= 3::Int 0::Int)
#551 := (>= 0::Int 0::Int)
#453 := (or #551 #738)
#454 := (not #453)
#741 := (<= 0::Int 0::Int)
#742 := (or #741 #738)
#452 := (not #742)
#455 := (or #452 #454)
#722 := (if #455 #731 #727)
#462 := (= 3::Int 0::Int)
#740 := (= 0::Int 0::Int)
#463 := (or #740 #462)
#723 := (if #463 #737 #722)
#656 := (or #665 #723)
#645 := (iff #656 #666)
#648 := (iff #666 #666)
#649 := [rewrite]: #648
#663 := (iff #723 #737)
#1 := true
#658 := (if true #737 #737)
#661 := (iff #658 #737)
#662 := [rewrite]: #661
#659 := (iff #723 #658)
#655 := (iff #722 #737)
#672 := (if false #737 #737)
#674 := (iff #672 #737)
#654 := [rewrite]: #674
#673 := (iff #722 #672)
#669 := (iff #727 #737)
#682 := (= #726 #12)
#701 := (+ #12 0::Int)
#694 := (= #701 #12)
#686 := [rewrite]: #694
#681 := (= #726 #701)
#679 := (= #725 0::Int)
#609 := (= #735 0::Int)
#610 := [rewrite]: #609
#676 := (= #725 #735)
#691 := (= #736 0::Int)
#697 := -3::Int
#687 := (div 0::Int -3::Int)
#690 := (= #687 0::Int)
#684 := [rewrite]: #690
#688 := (= #736 #687)
#693 := (= #732 -3::Int)
#698 := [rewrite]: #693
#689 := [monotonicity #610 #698]: #688
#675 := [trans #689 #684]: #691
#678 := [monotonicity #675]: #676
#680 := [trans #678 #610]: #679
#677 := [monotonicity #680]: #681
#668 := [trans #677 #686]: #682
#671 := [monotonicity #668]: #669
#695 := (iff #731 #737)
#683 := (= #449 #12)
#705 := (= #449 #701)
#611 := (= #734 0::Int)
#607 := (= #734 #735)
#606 := (= #733 0::Int)
#599 := [rewrite]: #606
#608 := [monotonicity #599]: #607
#704 := [trans #608 #610]: #611
#692 := [monotonicity #704]: #705
#685 := [trans #692 #686]: #683
#696 := [monotonicity #685]: #695
#603 := (iff #455 false)
#604 := (or false false)
#703 := (iff #604 false)
#588 := [rewrite]: #703
#699 := (iff #455 #604)
#554 := (iff #454 false)
#420 := (not true)
#745 := (iff #420 false)
#408 := [rewrite]: #745
#594 := (iff #454 #420)
#711 := (iff #453 true)
#571 := (or true false)
#715 := (iff #571 true)
#716 := [rewrite]: #715
#710 := (iff #453 #571)
#719 := (iff #738 false)
#720 := [rewrite]: #719
#424 := (iff #551 true)
#760 := [rewrite]: #424
#708 := [monotonicity #760 #720]: #710
#593 := [trans #708 #716]: #711
#595 := [monotonicity #593]: #594
#702 := [trans #595 #408]: #554
#707 := (iff #452 false)
#553 := (iff #452 #420)
#550 := (iff #742 true)
#714 := (iff #742 #571)
#712 := (iff #741 true)
#713 := [rewrite]: #712
#721 := [monotonicity #713 #720]: #714
#552 := [trans #721 #716]: #550
#706 := [monotonicity #552]: #553
#709 := [trans #706 #408]: #707
#700 := [monotonicity #709 #702]: #699
#605 := [trans #700 #588]: #603
#670 := [monotonicity #605 #696 #671]: #673
#657 := [trans #670 #654]: #655
#717 := (iff #463 true)
#572 := (iff #463 #571)
#724 := (iff #462 false)
#730 := [rewrite]: #724
#728 := (iff #740 true)
#729 := [rewrite]: #728
#573 := [monotonicity #729 #730]: #572
#718 := [trans #573 #716]: #717
#660 := [monotonicity #718 #657]: #659
#664 := [trans #660 #662]: #663
#646 := [monotonicity #664]: #645
#650 := [trans #646 #649]: #645
#667 := [quant-inst #9 #11]: #656
#651 := [mp #667 #650]: #666
#647 := [unit-resolution #651 #796]: #737
#653 := [monotonicity #647]: #15
#16 := (not #15)
#66 := [asserted]: #16
[unit-resolution #66 #653]: false
3a5431ba2dda9bb93e22830a67e761b1aca1ace1 314 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#14 := 0::Int
decl f4 :: S2
#7 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 3::Int
decl f6 :: (-> S5 Int S4)
#9 := 1::Int
decl f7 :: S5
#8 := f7
#10 := (f6 f7 1::Int)
#12 := (f5 #10 3::Int)
#13 := (f3 f4 #12)
#16 := (= #13 #15)
#737 := (= #12 0::Int)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#790 := (pattern #37)
#132 := -1::Int
#136 := (* -1::Int #24)
#133 := (* -1::Int #35)
#139 := (div #133 #136)
#330 := (* -1::Int #139)
#331 := (+ #37 #330)
#332 := (= #331 0::Int)
#47 := (div #35 #24)
#327 := (* -1::Int #47)
#328 := (+ #37 #327)
#329 := (= #328 0::Int)
#110 := (<= #24 0::Int)
#222 := (>= #35 0::Int)
#290 := (or #222 #110)
#291 := (not #290)
#106 := (<= #35 0::Int)
#286 := (or #106 #110)
#287 := (not #286)
#294 := (or #287 #291)
#333 := (if #294 #329 #332)
#326 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#334 := (if #40 #326 #333)
#791 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #790) #334)
#337 := (forall (vars (?v0 Int) (?v1 Int)) #334)
#794 := (iff #337 #791)
#792 := (iff #334 #334)
#793 := [refl]: #792
#795 := [quant-intro #793]: #794
#297 := (if #294 #47 #139)
#300 := (if #40 0::Int #297)
#303 := (= #37 #300)
#306 := (forall (vars (?v0 Int) (?v1 Int)) #303)
#338 := (iff #306 #337)
#335 := (iff #303 #334)
#336 := [rewrite]: #335
#339 := [quant-intro #336]: #338
#111 := (not #110)
#225 := (not #222)
#228 := (and #225 #111)
#107 := (not #106)
#114 := (and #107 #111)
#231 := (or #114 #228)
#234 := (if #231 #47 #139)
#237 := (if #40 0::Int #234)
#240 := (= #37 #237)
#243 := (forall (vars (?v0 Int) (?v1 Int)) #240)
#307 := (iff #243 #306)
#304 := (iff #240 #303)
#301 := (= #237 #300)
#298 := (= #234 #297)
#295 := (iff #231 #294)
#292 := (iff #228 #291)
#293 := [rewrite]: #292
#288 := (iff #114 #287)
#289 := [rewrite]: #288
#296 := [monotonicity #289 #293]: #295
#299 := [monotonicity #296]: #298
#302 := [monotonicity #299]: #301
#305 := [monotonicity #302]: #304
#308 := [quant-intro #305]: #307
#278 := (~ #243 #243)
#276 := (~ #240 #240)
#277 := [refl]: #276
#279 := [nnf-pos #277]: #278
#117 := (<= 0::Int #35)
#118 := (not #117)
#126 := (and #118 #111)
#129 := (or #114 #126)
#142 := (if #129 #47 #139)
#145 := (if #40 0::Int #142)
#148 := (= #37 #145)
#151 := (forall (vars (?v0 Int) (?v1 Int)) #148)
#244 := (iff #151 #243)
#241 := (iff #148 #240)
#238 := (= #145 #237)
#235 := (= #142 #234)
#232 := (iff #129 #231)
#229 := (iff #126 #228)
#226 := (iff #118 #225)
#223 := (iff #117 #222)
#224 := [rewrite]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [quant-intro #242]: #244
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (if #46 #47 #50)
#52 := (if #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#152 := (iff #54 #151)
#149 := (iff #53 #148)
#146 := (= #52 #145)
#143 := (= #51 #142)
#140 := (= #50 #139)
#137 := (= #49 #136)
#138 := [rewrite]: #137
#134 := (= #48 #133)
#135 := [rewrite]: #134
#141 := [monotonicity #135 #138]: #140
#130 := (iff #46 #129)
#127 := (iff #45 #126)
#112 := (iff #42 #111)
#113 := [rewrite]: #112
#119 := (iff #44 #118)
#123 := (iff #118 #118)
#121 := (iff #117 #117)
#122 := [rewrite]: #121
#124 := [monotonicity #122]: #123
#120 := [rewrite]: #119
#125 := [trans #120 #124]: #119
#128 := [monotonicity #125 #113]: #127
#115 := (iff #43 #114)
#108 := (iff #41 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#131 := [monotonicity #116 #128]: #130
#144 := [monotonicity #131 #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#71 := [asserted]: #54
#154 := [mp #71 #153]: #151
#246 := [mp #154 #245]: #243
#280 := [mp~ #246 #279]: #243
#309 := [mp #280 #308]: #306
#340 := [mp #309 #339]: #337
#796 := [mp #340 #795]: #791
#642 := (not #791)
#643 := (or #642 #737)
#736 := (* -1::Int 3::Int)
#732 := (* -1::Int 1::Int)
#725 := (div #732 #736)
#726 := (* -1::Int #725)
#727 := (+ #12 #726)
#722 := (= #727 0::Int)
#734 := (div 1::Int 3::Int)
#449 := (* -1::Int #734)
#731 := (+ #12 #449)
#735 := (= #731 0::Int)
#738 := (<= 3::Int 0::Int)
#453 := (>= 1::Int 0::Int)
#454 := (or #453 #738)
#455 := (not #454)
#741 := (<= 1::Int 0::Int)
#742 := (or #741 #738)
#452 := (not #742)
#733 := (or #452 #455)
#723 := (if #733 #735 #722)
#462 := (= 3::Int 0::Int)
#740 := (= 1::Int 0::Int)
#463 := (or #740 #462)
#728 := (if #463 #737 #723)
#638 := (or #642 #728)
#617 := (iff #638 #643)
#619 := (iff #643 #643)
#512 := [rewrite]: #619
#640 := (iff #728 #737)
#653 := (if false #737 #737)
#636 := (iff #653 #737)
#637 := [rewrite]: #636
#639 := (iff #728 #653)
#652 := (iff #723 #737)
#665 := (= #12 1::Int)
#1 := true
#646 := (if true #737 #665)
#650 := (iff #646 #737)
#651 := [rewrite]: #650
#648 := (iff #723 #646)
#667 := (iff #722 #665)
#657 := (+ -1::Int #12)
#662 := (= #657 0::Int)
#666 := (iff #662 #665)
#656 := [rewrite]: #666
#663 := (iff #722 #662)
#660 := (= #727 #657)
#674 := (+ #12 -1::Int)
#658 := (= #674 #657)
#659 := [rewrite]: #658
#654 := (= #727 #674)
#673 := (= #726 -1::Int)
#684 := (= #732 -1::Int)
#691 := [rewrite]: #684
#671 := (= #726 #732)
#668 := (= #725 1::Int)
#675 := -3::Int
#679 := (div -1::Int -3::Int)
#677 := (= #679 1::Int)
#682 := [rewrite]: #677
#680 := (= #725 #679)
#676 := (= #736 -3::Int)
#678 := [rewrite]: #676
#681 := [monotonicity #691 #678]: #680
#669 := [trans #681 #682]: #668
#672 := [monotonicity #669]: #671
#670 := [trans #672 #691]: #673
#655 := [monotonicity #670]: #654
#661 := [trans #655 #659]: #660
#664 := [monotonicity #661]: #663
#645 := [trans #664 #656]: #667
#689 := (iff #735 #737)
#687 := (= #731 #12)
#695 := (+ #12 0::Int)
#693 := (= #695 #12)
#698 := [rewrite]: #693
#696 := (= #731 #695)
#683 := (= #449 0::Int)
#701 := (* -1::Int 0::Int)
#694 := (= #701 0::Int)
#686 := [rewrite]: #694
#705 := (= #449 #701)
#611 := (= #734 0::Int)
#704 := [rewrite]: #611
#692 := [monotonicity #704]: #705
#685 := [trans #692 #686]: #683
#697 := [monotonicity #685]: #696
#688 := [trans #697 #698]: #687
#690 := [monotonicity #688]: #689
#609 := (iff #733 true)
#554 := (or true false)
#699 := (iff #554 true)
#700 := [rewrite]: #699
#607 := (iff #733 #554)
#606 := (iff #455 false)
#420 := (not true)
#745 := (iff #420 false)
#408 := [rewrite]: #745
#603 := (iff #455 #420)
#703 := (iff #454 true)
#702 := (iff #454 #554)
#720 := (iff #738 false)
#714 := [rewrite]: #720
#594 := (iff #453 true)
#595 := [rewrite]: #594
#604 := [monotonicity #595 #714]: #702
#588 := [trans #604 #700]: #703
#605 := [monotonicity #588]: #603
#599 := [trans #605 #408]: #606
#711 := (iff #452 true)
#706 := (not false)
#710 := (iff #706 true)
#708 := [rewrite]: #710
#707 := (iff #452 #706)
#552 := (iff #742 false)
#572 := (or false false)
#716 := (iff #572 false)
#717 := [rewrite]: #716
#721 := (iff #742 #572)
#713 := (iff #741 false)
#719 := [rewrite]: #713
#550 := [monotonicity #719 #714]: #721
#553 := [trans #550 #717]: #552
#709 := [monotonicity #553]: #707
#593 := [trans #709 #708]: #711
#608 := [monotonicity #593 #599]: #607
#610 := [trans #608 #700]: #609
#649 := [monotonicity #610 #690 #645]: #648
#647 := [trans #649 #651]: #652
#718 := (iff #463 false)
#573 := (iff #463 #572)
#730 := (iff #462 false)
#571 := [rewrite]: #730
#729 := (iff #740 false)
#724 := [rewrite]: #729
#715 := [monotonicity #724 #571]: #573
#712 := [trans #715 #717]: #718
#635 := [monotonicity #712 #647]: #639
#641 := [trans #635 #637]: #640
#618 := [monotonicity #641]: #617
#623 := [trans #618 #512]: #617
#644 := [quant-inst #9 #11]: #638
#624 := [mp #644 #623]: #643
#630 := [unit-resolution #624 #796]: #737
#626 := [monotonicity #630]: #16
#17 := (not #16)
#67 := [asserted]: #17
[unit-resolution #67 #626]: false
68d1ad7f70142308c629f42d1199c9a3061f756d 304 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#13 := 1::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 1::Int)
decl f5 :: (-> S4 Int Int)
#9 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 3::Int)
#11 := (f5 #10 3::Int)
#12 := (f3 f4 #11)
#15 := (= #12 #14)
#687 := (= #11 1::Int)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#790 := (pattern #37)
#23 := 0::Int
#132 := -1::Int
#136 := (* -1::Int #24)
#133 := (* -1::Int #35)
#139 := (div #133 #136)
#330 := (* -1::Int #139)
#331 := (+ #37 #330)
#332 := (= #331 0::Int)
#47 := (div #35 #24)
#327 := (* -1::Int #47)
#328 := (+ #37 #327)
#329 := (= #328 0::Int)
#110 := (<= #24 0::Int)
#222 := (>= #35 0::Int)
#290 := (or #222 #110)
#291 := (not #290)
#106 := (<= #35 0::Int)
#286 := (or #106 #110)
#287 := (not #286)
#294 := (or #287 #291)
#333 := (if #294 #329 #332)
#326 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#334 := (if #40 #326 #333)
#791 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #790) #334)
#337 := (forall (vars (?v0 Int) (?v1 Int)) #334)
#794 := (iff #337 #791)
#792 := (iff #334 #334)
#793 := [refl]: #792
#795 := [quant-intro #793]: #794
#297 := (if #294 #47 #139)
#300 := (if #40 0::Int #297)
#303 := (= #37 #300)
#306 := (forall (vars (?v0 Int) (?v1 Int)) #303)
#338 := (iff #306 #337)
#335 := (iff #303 #334)
#336 := [rewrite]: #335
#339 := [quant-intro #336]: #338
#111 := (not #110)
#225 := (not #222)
#228 := (and #225 #111)
#107 := (not #106)
#114 := (and #107 #111)
#231 := (or #114 #228)
#234 := (if #231 #47 #139)
#237 := (if #40 0::Int #234)
#240 := (= #37 #237)
#243 := (forall (vars (?v0 Int) (?v1 Int)) #240)
#307 := (iff #243 #306)
#304 := (iff #240 #303)
#301 := (= #237 #300)
#298 := (= #234 #297)
#295 := (iff #231 #294)
#292 := (iff #228 #291)
#293 := [rewrite]: #292
#288 := (iff #114 #287)
#289 := [rewrite]: #288
#296 := [monotonicity #289 #293]: #295
#299 := [monotonicity #296]: #298
#302 := [monotonicity #299]: #301
#305 := [monotonicity #302]: #304
#308 := [quant-intro #305]: #307
#278 := (~ #243 #243)
#276 := (~ #240 #240)
#277 := [refl]: #276
#279 := [nnf-pos #277]: #278
#117 := (<= 0::Int #35)
#118 := (not #117)
#126 := (and #118 #111)
#129 := (or #114 #126)
#142 := (if #129 #47 #139)
#145 := (if #40 0::Int #142)
#148 := (= #37 #145)
#151 := (forall (vars (?v0 Int) (?v1 Int)) #148)
#244 := (iff #151 #243)
#241 := (iff #148 #240)
#238 := (= #145 #237)
#235 := (= #142 #234)
#232 := (iff #129 #231)
#229 := (iff #126 #228)
#226 := (iff #118 #225)
#223 := (iff #117 #222)
#224 := [rewrite]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [quant-intro #242]: #244
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (if #46 #47 #50)
#52 := (if #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#152 := (iff #54 #151)
#149 := (iff #53 #148)
#146 := (= #52 #145)
#143 := (= #51 #142)
#140 := (= #50 #139)
#137 := (= #49 #136)
#138 := [rewrite]: #137
#134 := (= #48 #133)
#135 := [rewrite]: #134
#141 := [monotonicity #135 #138]: #140
#130 := (iff #46 #129)
#127 := (iff #45 #126)
#112 := (iff #42 #111)
#113 := [rewrite]: #112
#119 := (iff #44 #118)
#123 := (iff #118 #118)
#121 := (iff #117 #117)
#122 := [rewrite]: #121
#124 := [monotonicity #122]: #123
#120 := [rewrite]: #119
#125 := [trans #120 #124]: #119
#128 := [monotonicity #125 #113]: #127
#115 := (iff #43 #114)
#108 := (iff #41 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#131 := [monotonicity #116 #128]: #130
#144 := [monotonicity #131 #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#71 := [asserted]: #54
#154 := [mp #71 #153]: #151
#246 := [mp #154 #245]: #243
#280 := [mp~ #246 #279]: #243
#309 := [mp #280 #308]: #306
#340 := [mp #309 #339]: #337
#796 := [mp #340 #795]: #791
#652 := (not #791)
#647 := (or #652 #687)
#735 := (* -1::Int 3::Int)
#732 := (div #735 #735)
#736 := (* -1::Int #732)
#725 := (+ #11 #736)
#726 := (= #725 0::Int)
#733 := (div 3::Int 3::Int)
#734 := (* -1::Int #733)
#449 := (+ #11 #734)
#731 := (= #449 0::Int)
#741 := (<= 3::Int 0::Int)
#452 := (>= 3::Int 0::Int)
#453 := (or #452 #741)
#454 := (not #453)
#738 := (or #741 #741)
#742 := (not #738)
#455 := (or #742 #454)
#727 := (if #455 #731 #726)
#737 := (= #11 0::Int)
#462 := (= 3::Int 0::Int)
#463 := (or #462 #462)
#722 := (if #463 #737 #727)
#653 := (or #652 #722)
#635 := (iff #653 #647)
#637 := (iff #647 #647)
#640 := [rewrite]: #637
#650 := (iff #722 #687)
#667 := (if false #737 #687)
#648 := (iff #667 #687)
#649 := [rewrite]: #648
#645 := (iff #722 #667)
#666 := (iff #727 #687)
#1 := true
#661 := (if true #687 #687)
#664 := (iff #661 #687)
#665 := [rewrite]: #664
#662 := (iff #727 #661)
#659 := (iff #726 #687)
#686 := (+ -1::Int #11)
#697 := (= #686 0::Int)
#688 := (iff #697 #687)
#689 := [rewrite]: #688
#657 := (iff #726 #697)
#654 := (= #725 #686)
#705 := (+ #11 -1::Int)
#683 := (= #705 #686)
#685 := [rewrite]: #683
#670 := (= #725 #705)
#672 := (= #736 -1::Int)
#607 := (* -1::Int 1::Int)
#610 := (= #607 -1::Int)
#611 := [rewrite]: #610
#669 := (= #736 #607)
#682 := (= #732 1::Int)
#691 := -3::Int
#678 := (div -3::Int -3::Int)
#681 := (= #678 1::Int)
#677 := [rewrite]: #681
#679 := (= #732 #678)
#675 := (= #735 -3::Int)
#676 := [rewrite]: #675
#680 := [monotonicity #676 #676]: #679
#668 := [trans #680 #677]: #682
#671 := [monotonicity #668]: #669
#673 := [trans #671 #611]: #672
#674 := [monotonicity #673]: #670
#655 := [trans #674 #685]: #654
#658 := [monotonicity #655]: #657
#660 := [trans #658 #689]: #659
#690 := (iff #731 #687)
#693 := (iff #731 #697)
#695 := (= #449 #686)
#692 := (= #449 #705)
#704 := (= #734 -1::Int)
#608 := (= #734 #607)
#606 := (= #733 1::Int)
#599 := [rewrite]: #606
#609 := [monotonicity #599]: #608
#701 := [trans #609 #611]: #704
#694 := [monotonicity #701]: #692
#696 := [trans #694 #685]: #695
#698 := [monotonicity #696]: #693
#684 := [trans #698 #689]: #690
#603 := (iff #455 true)
#710 := (or true false)
#593 := (iff #710 true)
#594 := [rewrite]: #593
#703 := (iff #455 #710)
#699 := (iff #454 false)
#420 := (not true)
#745 := (iff #420 false)
#408 := [rewrite]: #745
#702 := (iff #454 #420)
#595 := (iff #453 true)
#708 := (iff #453 #710)
#716 := (iff #741 false)
#717 := [rewrite]: #716
#707 := (iff #452 true)
#709 := [rewrite]: #707
#711 := [monotonicity #709 #717]: #708
#554 := [trans #711 #594]: #595
#604 := [monotonicity #554]: #702
#700 := [trans #604 #408]: #699
#553 := (iff #742 true)
#720 := (not false)
#550 := (iff #720 true)
#552 := [rewrite]: #550
#714 := (iff #742 #720)
#713 := (iff #738 false)
#729 := (or false false)
#571 := (iff #729 false)
#572 := [rewrite]: #571
#718 := (iff #738 #729)
#712 := [monotonicity #717 #717]: #718
#719 := [trans #712 #572]: #713
#721 := [monotonicity #719]: #714
#706 := [trans #721 #552]: #553
#588 := [monotonicity #706 #700]: #703
#605 := [trans #588 #594]: #603
#663 := [monotonicity #605 #684 #660]: #662
#656 := [trans #663 #665]: #666
#573 := (iff #463 false)
#724 := (iff #463 #729)
#723 := (iff #462 false)
#728 := [rewrite]: #723
#730 := [monotonicity #728 #728]: #724
#715 := [trans #730 #572]: #573
#646 := [monotonicity #715 #656]: #645
#651 := [trans #646 #649]: #650
#636 := [monotonicity #651]: #635
#641 := [trans #636 #640]: #635
#639 := [quant-inst #9 #9]: #653
#642 := [mp #639 #641]: #647
#644 := [unit-resolution #642 #796]: #687
#617 := [monotonicity #644]: #15
#16 := (not #15)
#67 := [asserted]: #16
[unit-resolution #67 #617]: false
c1d414123c29937a6ed9d7b6e1f766000d0e13e1 428 0
unsat
#2 := false
#22 := 0::Int
#12 := 3::Int
decl f6 :: (-> S4 S5 Int)
decl f8 :: S5
#9 := f8
decl f7 :: S4
#8 := f7
#10 := (f6 f7 f8)
#716 := (mod #10 3::Int)
#131 := -1::Int
#690 := (* -1::Int #716)
#442 := (div #10 3::Int)
#750 := -3::Int
#689 := (* -3::Int #442)
#686 := (+ #10 #689 #690)
#688 := (= #686 0::Int)
#1 := true
#198 := [true-axiom]: true
#644 := (or false #688)
#645 := [th-lemma arith]: #644
#646 := [unit-resolution #645 #198]: #688
#680 := (>= #686 0::Int)
#593 := (not #680)
#681 := (>= #716 0::Int)
#625 := (or false #681)
#631 := [th-lemma arith]: #625
#599 := [unit-resolution #631 #198]: #681
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#11 := (f4 f5 #10)
#13 := (f3 #11 3::Int)
#203 := (* -1::Int #13)
#204 := (+ #10 #203)
#202 := (>= #204 0::Int)
#206 := (not #202)
#14 := (<= #13 #10)
#15 := (not #14)
#207 := (iff #15 #206)
#201 := (iff #14 #202)
#205 := [rewrite]: #201
#208 := [monotonicity #205]: #207
#66 := [asserted]: #15
#209 := [mp #66 #208]: #206
#774 := (* -1::Int #442)
#775 := (+ #13 #774)
#718 := (<= #775 0::Int)
#776 := (= #775 0::Int)
#777 := (* -1::Int #10)
#461 := (div #777 -3::Int)
#464 := (* -1::Int #461)
#458 := (+ #13 #464)
#741 := (= #458 0::Int)
#430 := (>= #10 0::Int)
#371 := (not #430)
#457 := (<= #10 0::Int)
#405 := (not #457)
#471 := (or #405 #371)
#735 := (if #471 #776 #741)
#451 := (= #10 0::Int)
#608 := (not #451)
#722 := (<= #13 0::Int)
#453 := (= #13 0::Int)
#693 := [hypothesis]: #451
#700 := (or #608 #453)
#732 := (if #451 #453 #735)
#23 := (:var 0 Int)
#34 := (:var 1 Int)
#35 := (f4 f5 #34)
#36 := (f3 #35 #23)
#799 := (pattern #36)
#135 := (* -1::Int #23)
#132 := (* -1::Int #34)
#138 := (div #132 #135)
#338 := (* -1::Int #138)
#339 := (+ #36 #338)
#340 := (= #339 0::Int)
#46 := (div #34 #23)
#335 := (* -1::Int #46)
#336 := (+ #36 #335)
#337 := (= #336 0::Int)
#109 := (<= #23 0::Int)
#230 := (>= #34 0::Int)
#298 := (or #230 #109)
#299 := (not #298)
#105 := (<= #34 0::Int)
#294 := (or #105 #109)
#295 := (not #294)
#302 := (or #295 #299)
#341 := (if #302 #337 #340)
#334 := (= #36 0::Int)
#38 := (= #23 0::Int)
#37 := (= #34 0::Int)
#39 := (or #37 #38)
#342 := (if #39 #334 #341)
#800 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #799) #342)
#345 := (forall (vars (?v0 Int) (?v1 Int)) #342)
#803 := (iff #345 #800)
#801 := (iff #342 #342)
#802 := [refl]: #801
#804 := [quant-intro #802]: #803
#305 := (if #302 #46 #138)
#308 := (if #39 0::Int #305)
#311 := (= #36 #308)
#314 := (forall (vars (?v0 Int) (?v1 Int)) #311)
#346 := (iff #314 #345)
#343 := (iff #311 #342)
#344 := [rewrite]: #343
#347 := [quant-intro #344]: #346
#110 := (not #109)
#233 := (not #230)
#236 := (and #233 #110)
#106 := (not #105)
#113 := (and #106 #110)
#239 := (or #113 #236)
#242 := (if #239 #46 #138)
#245 := (if #39 0::Int #242)
#248 := (= #36 #245)
#251 := (forall (vars (?v0 Int) (?v1 Int)) #248)
#315 := (iff #251 #314)
#312 := (iff #248 #311)
#309 := (= #245 #308)
#306 := (= #242 #305)
#303 := (iff #239 #302)
#300 := (iff #236 #299)
#301 := [rewrite]: #300
#296 := (iff #113 #295)
#297 := [rewrite]: #296
#304 := [monotonicity #297 #301]: #303
#307 := [monotonicity #304]: #306
#310 := [monotonicity #307]: #309
#313 := [monotonicity #310]: #312
#316 := [quant-intro #313]: #315
#286 := (~ #251 #251)
#284 := (~ #248 #248)
#285 := [refl]: #284
#287 := [nnf-pos #285]: #286
#116 := (<= 0::Int #34)
#117 := (not #116)
#125 := (and #117 #110)
#128 := (or #113 #125)
#141 := (if #128 #46 #138)
#144 := (if #39 0::Int #141)
#147 := (= #36 #144)
#150 := (forall (vars (?v0 Int) (?v1 Int)) #147)
#252 := (iff #150 #251)
#249 := (iff #147 #248)
#246 := (= #144 #245)
#243 := (= #141 #242)
#240 := (iff #128 #239)
#237 := (iff #125 #236)
#234 := (iff #117 #233)
#231 := (iff #116 #230)
#232 := [rewrite]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [quant-intro #250]: #252
#48 := (- #23)
#47 := (- #34)
#49 := (div #47 #48)
#41 := (< 0::Int #23)
#43 := (< #34 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #34)
#42 := (and #40 #41)
#45 := (or #42 #44)
#50 := (if #45 #46 #49)
#51 := (if #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#151 := (iff #53 #150)
#148 := (iff #52 #147)
#145 := (= #51 #144)
#142 := (= #50 #141)
#139 := (= #49 #138)
#136 := (= #48 #135)
#137 := [rewrite]: #136
#133 := (= #47 #132)
#134 := [rewrite]: #133
#140 := [monotonicity #134 #137]: #139
#129 := (iff #45 #128)
#126 := (iff #44 #125)
#111 := (iff #41 #110)
#112 := [rewrite]: #111
#118 := (iff #43 #117)
#122 := (iff #117 #117)
#120 := (iff #116 #116)
#121 := [rewrite]: #120
#123 := [monotonicity #121]: #122
#119 := [rewrite]: #118
#124 := [trans #119 #123]: #118
#127 := [monotonicity #124 #112]: #126
#114 := (iff #42 #113)
#107 := (iff #40 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#130 := [monotonicity #115 #127]: #129
#143 := [monotonicity #130 #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#70 := [asserted]: #53
#153 := [mp #70 #152]: #150
#254 := [mp #153 #253]: #251
#288 := [mp~ #254 #287]: #251
#317 := [mp #288 #316]: #314
#348 := [mp #317 #347]: #345
#805 := [mp #348 #804]: #800
#733 := (not #800)
#739 := (or #733 #732)
#772 := (* -1::Int 3::Int)
#778 := (div #777 #772)
#768 := (* -1::Int #778)
#428 := (+ #13 #768)
#433 := (= #428 0::Int)
#436 := (<= 3::Int 0::Int)
#560 := (or #430 #436)
#767 := (not #560)
#771 := (or #457 #436)
#773 := (not #771)
#441 := (or #773 #767)
#769 := (if #441 #776 #433)
#452 := (= 3::Int 0::Int)
#456 := (or #451 #452)
#429 := (if #456 #453 #769)
#580 := (or #733 #429)
#582 := (iff #580 #739)
#725 := (iff #739 #739)
#726 := [rewrite]: #725
#737 := (iff #429 #732)
#736 := (iff #769 #735)
#745 := (iff #433 #741)
#740 := (= #428 #458)
#742 := (= #768 #464)
#462 := (= #778 #461)
#747 := (= #772 -3::Int)
#751 := [rewrite]: #747
#463 := [monotonicity #751]: #462
#743 := [monotonicity #463]: #742
#744 := [monotonicity #743]: #740
#734 := [monotonicity #744]: #745
#472 := (iff #441 #471)
#748 := (iff #767 #371)
#477 := (iff #560 #430)
#766 := (or #430 false)
#475 := (iff #766 #430)
#476 := [rewrite]: #475
#752 := (iff #560 #766)
#758 := (iff #436 false)
#759 := [rewrite]: #758
#753 := [monotonicity #759]: #752
#478 := [trans #753 #476]: #477
#749 := [monotonicity #478]: #748
#765 := (iff #773 #405)
#764 := (iff #771 #457)
#760 := (or #457 false)
#399 := (iff #760 #457)
#762 := [rewrite]: #399
#755 := (iff #771 #760)
#761 := [monotonicity #759]: #755
#404 := [trans #761 #762]: #764
#763 := [monotonicity #404]: #765
#746 := [monotonicity #763 #749]: #472
#731 := [monotonicity #746 #734]: #736
#756 := (iff #456 #451)
#754 := (or #451 false)
#419 := (iff #754 #451)
#420 := [rewrite]: #419
#417 := (iff #456 #754)
#770 := (iff #452 false)
#413 := [rewrite]: #770
#418 := [monotonicity #413]: #417
#757 := [trans #418 #420]: #756
#738 := [monotonicity #757 #731]: #737
#724 := [monotonicity #738]: #582
#727 := [trans #724 #726]: #582
#581 := [quant-inst #10 #12]: #580
#721 := [mp #581 #727]: #739
#653 := [unit-resolution #721 #805]: #732
#615 := (not #732)
#616 := (or #615 #608 #453)
#617 := [def-axiom]: #616
#684 := [unit-resolution #617 #653]: #700
#685 := [unit-resolution #684 #693]: #453
#620 := (not #453)
#691 := (or #620 #722)
#677 := [th-lemma arith triangle-eq]: #691
#682 := [unit-resolution #677 #685]: #722
#679 := (or #608 #430)
#660 := [th-lemma arith triangle-eq]: #679
#661 := [unit-resolution #660 #693]: #430
#656 := [th-lemma arith farkas -1 1 1 #661 #209 #682]: false
#662 := [lemma #656]: #608
#626 := (or #451 #735)
#618 := (or #615 #451 #735)
#619 := [def-axiom]: #618
#627 := [unit-resolution #619 #653]: #626
#584 := [unit-resolution #627 #662]: #735
decl f9 :: (-> S6 Int S5)
decl f10 :: S6
#16 := f10
#365 := (f9 f10 #10)
#703 := (f6 f7 #365)
#695 := (= #703 0::Int)
#623 := (not #695)
#569 := (iff #608 #623)
#638 := (iff #451 #695)
#641 := (iff #695 #451)
#637 := (= #703 #10)
#450 := (= #365 f8)
#17 := (:var 0 S5)
#18 := (f6 f7 #17)
#779 := (pattern #18)
#19 := (f9 f10 #18)
#20 := (= #19 #17)
#780 := (forall (vars (?v0 S5)) (:pat #779) #20)
#21 := (forall (vars (?v0 S5)) #20)
#783 := (iff #21 #780)
#781 := (iff #20 #20)
#782 := [refl]: #781
#784 := [quant-intro #782]: #783
#279 := (~ #21 #21)
#273 := (~ #20 #20)
#274 := [refl]: #273
#280 := [nnf-pos #274]: #279
#67 := [asserted]: #21
#271 := [mp~ #67 #280]: #21
#785 := [mp #271 #784]: #780
#443 := (not #780)
#454 := (or #443 #450)
#455 := [quant-inst #9]: #454
#636 := [unit-resolution #455 #785]: #450
#640 := [monotonicity #636]: #637
#642 := [monotonicity #640]: #641
#643 := [symm #642]: #638
#624 := [monotonicity #643]: #569
#585 := [mp #662 #624]: #623
#692 := (or #430 #695)
#25 := (f9 f10 #23)
#786 := (pattern #25)
#26 := (f6 f7 #25)
#31 := (= #26 0::Int)
#210 := (>= #23 0::Int)
#223 := (or #210 #31)
#793 := (forall (vars (?v0 Int)) (:pat #786) #223)
#226 := (forall (vars (?v0 Int)) #223)
#796 := (iff #226 #793)
#794 := (iff #223 #223)
#795 := [refl]: #794
#797 := [quant-intro #795]: #796
#277 := (~ #226 #226)
#199 := (~ #223 #223)
#200 := [refl]: #199
#278 := [nnf-pos #200]: #277
#24 := (<= 0::Int #23)
#96 := (or #24 #31)
#101 := (forall (vars (?v0 Int)) #96)
#227 := (iff #101 #226)
#224 := (iff #96 #223)
#211 := (iff #24 #210)
#212 := [rewrite]: #211
#225 := [monotonicity #212]: #224
#228 := [quant-intro #225]: #227
#30 := (< #23 0::Int)
#32 := (implies #30 #31)
#33 := (forall (vars (?v0 Int)) #32)
#102 := (iff #33 #101)
#99 := (iff #32 #96)
#79 := (not #24)
#93 := (implies #79 #31)
#97 := (iff #93 #96)
#98 := [rewrite]: #97
#94 := (iff #32 #93)
#88 := (iff #30 #79)
#90 := (iff #79 #79)
#75 := (iff #24 #24)
#76 := [rewrite]: #75
#91 := [monotonicity #76]: #90
#89 := [rewrite]: #88
#92 := [trans #89 #91]: #88
#95 := [monotonicity #92]: #94
#100 := [trans #95 #98]: #99
#103 := [quant-intro #100]: #102
#69 := [asserted]: #33
#104 := [mp #69 #103]: #101
#229 := [mp #104 #228]: #226
#283 := [mp~ #229 #278]: #226
#798 := [mp #283 #797]: #793
#705 := (not #793)
#706 := (or #705 #430 #695)
#702 := (or #705 #692)
#696 := (iff #702 #706)
#697 := [rewrite]: #696
#707 := [quant-inst #10]: #702
#698 := [mp #707 #697]: #706
#629 := [unit-resolution #698 #798]: #692
#586 := [unit-resolution #629 #585]: #430
#587 := (or #451 #405 #371)
#588 := [th-lemma arith triangle-eq]: #587
#589 := [unit-resolution #588 #586 #662]: #405
#729 := (or #471 #457)
#723 := [def-axiom]: #729
#590 := [unit-resolution #723 #589]: #471
#561 := (not #471)
#603 := (not #735)
#604 := (or #603 #561 #776)
#563 := [def-axiom]: #604
#591 := [unit-resolution #563 #590 #584]: #776
#708 := (not #776)
#634 := (or #708 #718)
#639 := [th-lemma arith triangle-eq]: #634
#592 := [unit-resolution #639 #591]: #718
#579 := (not #718)
#594 := (not #681)
#595 := (or #593 #371 #594 #579 #202)
#556 := [th-lemma arith assign-bounds 2 1 3 3]: #595
#557 := [unit-resolution #556 #586 #592 #209 #599]: #593
#649 := (not #688)
#650 := (or #649 #680)
#651 := [th-lemma arith triangle-eq]: #650
[unit-resolution #651 #557 #646]: false
397f4299b276d431a769b4b4686f5d15236336cb 577 0
unsat
#2 := false
decl f10 :: S3
#10 := f10
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 Int Int)
#13 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 3::Int)
decl f4 :: S2
#7 := f4
#15 := (f3 f4 #14)
#16 := (= #15 f10)
#17 := 0::Int
#18 := (f3 f4 0::Int)
#474 := (= #18 f10)
#19 := (= f10 #18)
#436 := (f3 f4 #11)
#490 := (= #436 #18)
#486 := (= #18 #436)
#500 := (= 0::Int #11)
#442 := (f8 f9 #15)
#534 := (= #442 #11)
#462 := (= #11 #442)
#592 := (= f10 #15)
#365 := (not #19)
#630 := [hypothesis]: #365
#453 := (or #16 #19)
#79 := (not #16)
#80 := (iff #79 #19)
#20 := (iff #16 #19)
#21 := (not #20)
#81 := (iff #21 #80)
#82 := [rewrite]: #81
#70 := [asserted]: #21
#83 := [mp #70 #82]: #80
#450 := (not #80)
#455 := (or #16 #19 #450)
#456 := [def-axiom]: #455
#457 := [unit-resolution #456 #83]: #453
#599 := [unit-resolution #457 #630]: #16
#593 := [symm #599]: #592
#463 := [monotonicity #593]: #462
#498 := [symm #463]: #534
#499 := (= 0::Int #442)
#496 := (= #14 #442)
#774 := (= #442 #14)
#773 := (>= #14 0::Int)
#545 := (or #773 #79)
#744 := (= #11 0::Int)
#776 := (= #442 0::Int)
#541 := (iff #776 #744)
#555 := [hypothesis]: #16
#537 := [monotonicity #555]: #534
#543 := [monotonicity #537]: #541
#430 := (not #773)
#546 := [hypothesis]: #430
#777 := (or #773 #776)
#27 := (:var 0 Int)
#29 := (f3 f4 #27)
#786 := (pattern #29)
#30 := (f8 f9 #29)
#35 := (= #30 0::Int)
#210 := (>= #27 0::Int)
#223 := (or #210 #35)
#793 := (forall (vars (?v0 Int)) (:pat #786) #223)
#226 := (forall (vars (?v0 Int)) #223)
#796 := (iff #226 #793)
#794 := (iff #223 #223)
#795 := [refl]: #794
#797 := [quant-intro #795]: #796
#271 := (~ #226 #226)
#277 := (~ #223 #223)
#278 := [refl]: #277
#272 := [nnf-pos #278]: #271
#28 := (<= 0::Int #27)
#105 := (or #28 #35)
#110 := (forall (vars (?v0 Int)) #105)
#227 := (iff #110 #226)
#224 := (iff #105 #223)
#211 := (iff #28 #210)
#212 := [rewrite]: #211
#225 := [monotonicity #212]: #224
#228 := [quant-intro #225]: #227
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#111 := (iff #37 #110)
#108 := (iff #36 #105)
#88 := (not #28)
#102 := (implies #88 #35)
#106 := (iff #102 #105)
#107 := [rewrite]: #106
#103 := (iff #36 #102)
#97 := (iff #34 #88)
#99 := (iff #88 #88)
#84 := (iff #28 #28)
#85 := [rewrite]: #84
#100 := [monotonicity #85]: #99
#98 := [rewrite]: #97
#101 := [trans #98 #100]: #97
#104 := [monotonicity #101]: #103
#109 := [trans #104 #107]: #108
#112 := [quant-intro #109]: #111
#73 := [asserted]: #37
#113 := [mp #73 #112]: #110
#229 := [mp #113 #228]: #226
#283 := [mp~ #229 #272]: #226
#798 := [mp #283 #797]: #793
#754 := (not #793)
#417 := (or #754 #773 #776)
#418 := (or #754 #777)
#420 := (iff #418 #417)
#756 := [rewrite]: #420
#419 := [quant-inst #14]: #418
#757 := [mp #419 #756]: #417
#554 := [unit-resolution #757 #798]: #777
#550 := [unit-resolution #554 #546]: #776
#544 := [mp #550 #543]: #744
#650 := (not #744)
#734 := (= #14 0::Int)
#626 := (not #734)
#547 := (or #626 #773)
#548 := [th-lemma arith triangle-eq]: #547
#549 := [unit-resolution #548 #546]: #626
#552 := (or #650 #734)
#695 := -3::Int
#140 := -1::Int
#725 := (* -1::Int #11)
#704 := (div #725 -3::Int)
#702 := (* -1::Int #704)
#697 := (+ #14 #702)
#693 := (= #697 0::Int)
#580 := (div #11 3::Int)
#581 := (* -1::Int #580)
#582 := (+ #14 #581)
#724 := (= #582 0::Int)
#737 := (>= #11 0::Int)
#620 := (not #737)
#735 := (<= #11 0::Int)
#712 := (not #735)
#714 := (or #712 #620)
#685 := (if #714 #724 #693)
#689 := (if #744 #734 #685)
#38 := (:var 1 Int)
#39 := (f6 f7 #38)
#40 := (f5 #39 #27)
#799 := (pattern #40)
#144 := (* -1::Int #27)
#141 := (* -1::Int #38)
#147 := (div #141 #144)
#338 := (* -1::Int #147)
#339 := (+ #40 #338)
#340 := (= #339 0::Int)
#50 := (div #38 #27)
#335 := (* -1::Int #50)
#336 := (+ #40 #335)
#337 := (= #336 0::Int)
#118 := (<= #27 0::Int)
#230 := (>= #38 0::Int)
#298 := (or #230 #118)
#299 := (not #298)
#114 := (<= #38 0::Int)
#294 := (or #114 #118)
#295 := (not #294)
#302 := (or #295 #299)
#341 := (if #302 #337 #340)
#334 := (= #40 0::Int)
#42 := (= #27 0::Int)
#41 := (= #38 0::Int)
#43 := (or #41 #42)
#342 := (if #43 #334 #341)
#800 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #799) #342)
#345 := (forall (vars (?v0 Int) (?v1 Int)) #342)
#803 := (iff #345 #800)
#801 := (iff #342 #342)
#802 := [refl]: #801
#804 := [quant-intro #802]: #803
#305 := (if #302 #50 #147)
#308 := (if #43 0::Int #305)
#311 := (= #40 #308)
#314 := (forall (vars (?v0 Int) (?v1 Int)) #311)
#346 := (iff #314 #345)
#343 := (iff #311 #342)
#344 := [rewrite]: #343
#347 := [quant-intro #344]: #346
#119 := (not #118)
#233 := (not #230)
#236 := (and #233 #119)
#115 := (not #114)
#122 := (and #115 #119)
#239 := (or #122 #236)
#242 := (if #239 #50 #147)
#245 := (if #43 0::Int #242)
#248 := (= #40 #245)
#251 := (forall (vars (?v0 Int) (?v1 Int)) #248)
#315 := (iff #251 #314)
#312 := (iff #248 #311)
#309 := (= #245 #308)
#306 := (= #242 #305)
#303 := (iff #239 #302)
#300 := (iff #236 #299)
#301 := [rewrite]: #300
#296 := (iff #122 #295)
#297 := [rewrite]: #296
#304 := [monotonicity #297 #301]: #303
#307 := [monotonicity #304]: #306
#310 := [monotonicity #307]: #309
#313 := [monotonicity #310]: #312
#316 := [quant-intro #313]: #315
#286 := (~ #251 #251)
#284 := (~ #248 #248)
#285 := [refl]: #284
#287 := [nnf-pos #285]: #286
#125 := (<= 0::Int #38)
#126 := (not #125)
#134 := (and #126 #119)
#137 := (or #122 #134)
#150 := (if #137 #50 #147)
#153 := (if #43 0::Int #150)
#156 := (= #40 #153)
#159 := (forall (vars (?v0 Int) (?v1 Int)) #156)
#252 := (iff #159 #251)
#249 := (iff #156 #248)
#246 := (= #153 #245)
#243 := (= #150 #242)
#240 := (iff #137 #239)
#237 := (iff #134 #236)
#234 := (iff #126 #233)
#231 := (iff #125 #230)
#232 := [rewrite]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [quant-intro #250]: #252
#52 := (- #27)
#51 := (- #38)
#53 := (div #51 #52)
#45 := (< 0::Int #27)
#47 := (< #38 0::Int)
#48 := (and #47 #45)
#44 := (< 0::Int #38)
#46 := (and #44 #45)
#49 := (or #46 #48)
#54 := (if #49 #50 #53)
#55 := (if #43 0::Int #54)
#56 := (= #40 #55)
#57 := (forall (vars (?v0 Int) (?v1 Int)) #56)
#160 := (iff #57 #159)
#157 := (iff #56 #156)
#154 := (= #55 #153)
#151 := (= #54 #150)
#148 := (= #53 #147)
#145 := (= #52 #144)
#146 := [rewrite]: #145
#142 := (= #51 #141)
#143 := [rewrite]: #142
#149 := [monotonicity #143 #146]: #148
#138 := (iff #49 #137)
#135 := (iff #48 #134)
#120 := (iff #45 #119)
#121 := [rewrite]: #120
#127 := (iff #47 #126)
#131 := (iff #126 #126)
#129 := (iff #125 #125)
#130 := [rewrite]: #129
#132 := [monotonicity #130]: #131
#128 := [rewrite]: #127
#133 := [trans #128 #132]: #127
#136 := [monotonicity #133 #121]: #135
#123 := (iff #46 #122)
#116 := (iff #44 #115)
#117 := [rewrite]: #116
#124 := [monotonicity #117 #121]: #123
#139 := [monotonicity #124 #136]: #138
#152 := [monotonicity #139 #149]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [quant-intro #158]: #160
#74 := [asserted]: #57
#162 := [mp #74 #161]: #159
#254 := [mp #162 #253]: #251
#288 := [mp~ #254 #287]: #251
#317 := [mp #288 #316]: #314
#348 := [mp #317 #347]: #345
#805 := [mp #348 #804]: #800
#691 := (not #800)
#677 := (or #691 #689)
#726 := (* -1::Int 3::Int)
#727 := (div #725 #726)
#721 := (* -1::Int #727)
#722 := (+ #14 #721)
#728 := (= #722 0::Int)
#736 := (<= 3::Int 0::Int)
#738 := (or #737 #736)
#733 := (not #738)
#731 := (or #735 #736)
#732 := (not #731)
#739 := (or #732 #733)
#729 := (if #739 #724 #728)
#741 := (= 3::Int 0::Int)
#745 := (or #744 #741)
#723 := (if #745 #734 #729)
#678 := (or #691 #723)
#681 := (iff #678 #677)
#679 := (iff #677 #677)
#683 := [rewrite]: #679
#690 := (iff #723 #689)
#687 := (iff #729 #685)
#700 := (iff #728 #693)
#698 := (= #722 #697)
#707 := (= #721 #702)
#705 := (= #727 #704)
#692 := (= #726 -3::Int)
#694 := [rewrite]: #692
#706 := [monotonicity #694]: #705
#696 := [monotonicity #706]: #707
#699 := [monotonicity #696]: #698
#684 := [monotonicity #699]: #700
#701 := (iff #739 #714)
#713 := (iff #733 #620)
#618 := (iff #738 #737)
#614 := (or #737 false)
#616 := (iff #614 #737)
#617 := [rewrite]: #616
#615 := (iff #738 #614)
#720 := (iff #736 false)
#602 := [rewrite]: #720
#608 := [monotonicity #602]: #615
#619 := [trans #608 #617]: #618
#710 := [monotonicity #619]: #713
#597 := (iff #732 #712)
#708 := (iff #731 #735)
#603 := (or #735 false)
#711 := (iff #603 #735)
#613 := [rewrite]: #711
#604 := (iff #731 #603)
#563 := [monotonicity #602]: #604
#709 := [trans #563 #613]: #708
#612 := [monotonicity #709]: #597
#703 := [monotonicity #612 #710]: #701
#688 := [monotonicity #703 #684]: #687
#719 := (iff #745 #744)
#561 := (or #744 false)
#716 := (iff #561 #744)
#718 := [rewrite]: #716
#562 := (iff #745 #561)
#730 := (iff #741 false)
#559 := [rewrite]: #730
#715 := [monotonicity #559]: #562
#717 := [trans #715 #718]: #719
#686 := [monotonicity #717 #688]: #690
#682 := [monotonicity #686]: #681
#663 := [trans #682 #683]: #681
#680 := [quant-inst #11 #13]: #678
#664 := [mp #680 #663]: #677
#551 := [unit-resolution #664 #805]: #689
#649 := (not #689)
#651 := (or #649 #650 #734)
#652 := [def-axiom]: #651
#553 := [unit-resolution #652 #551]: #552
#396 := [unit-resolution #553 #549]: #650
#542 := [unit-resolution #396 #544]: false
#533 := [lemma #542]: #545
#565 := [unit-resolution #533 #599]: #773
#775 := (or #430 #774)
#31 := (= #30 #27)
#213 := (not #210)
#216 := (or #213 #31)
#787 := (forall (vars (?v0 Int)) (:pat #786) #216)
#219 := (forall (vars (?v0 Int)) #216)
#790 := (iff #219 #787)
#788 := (iff #216 #216)
#789 := [refl]: #788
#791 := [quant-intro #789]: #790
#209 := (~ #219 #219)
#282 := (~ #216 #216)
#208 := [refl]: #282
#275 := [nnf-pos #208]: #209
#89 := (or #88 #31)
#93 := (forall (vars (?v0 Int)) #89)
#220 := (iff #93 #219)
#217 := (iff #89 #216)
#214 := (iff #88 #213)
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#32 := (implies #28 #31)
#33 := (forall (vars (?v0 Int)) #32)
#94 := (iff #33 #93)
#90 := (iff #32 #89)
#91 := [rewrite]: #90
#86 := (iff #32 #32)
#87 := [monotonicity #85]: #86
#92 := [trans #87 #91]: #90
#95 := [quant-intro #92]: #94
#72 := [asserted]: #33
#96 := [mp #72 #95]: #93
#222 := [mp #96 #221]: #219
#276 := [mp~ #222 #275]: #219
#792 := [mp #276 #791]: #787
#772 := (not #787)
#778 := (or #772 #430 #774)
#768 := (or #772 #775)
#433 := (iff #768 #778)
#769 := [rewrite]: #433
#428 := [quant-inst #14]: #768
#429 := [mp #428 #769]: #778
#588 := [unit-resolution #429 #792]: #775
#589 := [unit-resolution #588 #565]: #774
#497 := [symm #589]: #496
#494 := (= 0::Int #14)
#624 := (* -1::Int #14)
#609 := (+ #11 #624)
#605 := (>= #609 0::Int)
#569 := (= #11 #14)
#464 := [trans #463 #589]: #569
#742 := (not #569)
#743 := (or #742 #605)
#508 := [th-lemma arith triangle-eq]: #743
#509 := [unit-resolution #508 #464]: #605
#510 := (not #605)
#511 := (or #737 #430 #510)
#512 := [th-lemma arith assign-bounds 1 1]: #511
#513 := [unit-resolution #512 #565 #509]: #737
#610 := (<= #609 0::Int)
#502 := (or #742 #610)
#514 := [th-lemma arith triangle-eq]: #502
#491 := [unit-resolution #514 #464]: #610
#515 := (not #610)
#506 := (or #734 #515 #620 #430)
#674 := (mod #11 3::Int)
#587 := (* -1::Int #674)
#586 := (* -3::Int #580)
#635 := (+ #11 #586 #587)
#636 := (= #635 0::Int)
#1 := true
#207 := [true-axiom]: true
#458 := (or false #636)
#740 := [th-lemma arith]: #458
#583 := [unit-resolution #740 #207]: #636
#590 := (>= #635 0::Int)
#528 := (not #590)
#591 := (>= #674 0::Int)
#585 := (or false #591)
#573 := [th-lemma arith]: #585
#574 := [unit-resolution #573 #207]: #591
#666 := (<= #14 0::Int)
#576 := (not #666)
#575 := [hypothesis]: #773
#558 := [hypothesis]: #626
#577 := (or #734 #576 #430)
#578 := [th-lemma arith triangle-eq]: #577
#536 := [unit-resolution #578 #558 #575]: #576
#538 := [hypothesis]: #610
#675 := (<= #582 0::Int)
#539 := [unit-resolution #553 #558]: #650
#535 := (or #744 #685)
#647 := (or #649 #744 #685)
#653 := [def-axiom]: #647
#540 := [unit-resolution #653 #551]: #535
#530 := [unit-resolution #540 #539]: #685
#520 := [hypothesis]: #737
#522 := (or #744 #712 #620)
#523 := [th-lemma arith triangle-eq]: #522
#526 := [unit-resolution #523 #539 #520]: #712
#667 := (or #714 #735)
#668 := [def-axiom]: #667
#527 := [unit-resolution #668 #526]: #714
#671 := (not #714)
#657 := (not #685)
#658 := (or #657 #671 #724)
#659 := [def-axiom]: #658
#531 := [unit-resolution #659 #527 #530]: #724
#656 := (not #724)
#524 := (or #656 #675)
#532 := [th-lemma arith triangle-eq]: #524
#525 := [unit-resolution #532 #531]: #675
#517 := (not #675)
#529 := (not #591)
#518 := (or #528 #529 #666 #515 #517)
#516 := [th-lemma arith assign-bounds 1 2 1 3]: #518
#519 := [unit-resolution #516 #525 #538 #536 #574]: #528
#501 := (not #636)
#503 := (or #501 #590)
#504 := [th-lemma arith triangle-eq]: #503
#505 := [unit-resolution #504 #519 #583]: false
#507 := [lemma #505]: #506
#493 := [unit-resolution #507 #491 #513 #565]: #734
#495 := [symm #493]: #494
#492 := [trans #495 #497]: #499
#485 := [trans #492 #498]: #500
#487 := [monotonicity #485]: #486
#479 := [symm #487]: #490
#489 := (= f10 #436)
#771 := (= #436 f10)
#22 := (:var 0 S3)
#23 := (f8 f9 #22)
#779 := (pattern #23)
#24 := (f3 f4 #23)
#25 := (= #24 #22)
#780 := (forall (vars (?v0 S3)) (:pat #779) #25)
#26 := (forall (vars (?v0 S3)) #25)
#783 := (iff #26 #780)
#781 := (iff #25 #25)
#782 := [refl]: #781
#784 := [quant-intro #782]: #783
#273 := (~ #26 #26)
#279 := (~ #25 #25)
#280 := [refl]: #279
#274 := [nnf-pos #280]: #273
#71 := [asserted]: #26
#281 := [mp~ #71 #274]: #26
#785 := [mp #281 #784]: #780
#560 := (not #780)
#767 := (or #560 #771)
#441 := [quant-inst #10]: #767
#631 := [unit-resolution #441 #785]: #771
#488 := [symm #631]: #489
#480 := [trans #488 #479]: #19
#481 := [unit-resolution #630 #480]: false
#473 := [lemma #481]: #19
#484 := [symm #473]: #474
#468 := (= #15 #18)
#758 := (f8 f9 #18)
#759 := (= #758 0::Int)
#371 := (or #772 #759)
#770 := (>= 0::Int 0::Int)
#413 := (not #770)
#760 := (or #413 #759)
#748 := (or #772 #760)
#471 := (iff #748 #371)
#746 := (iff #371 #371)
#750 := [rewrite]: #746
#477 := (iff #760 #759)
#766 := (or false #759)
#475 := (iff #766 #759)
#476 := [rewrite]: #475
#752 := (iff #760 #766)
#765 := (iff #413 false)
#399 := (not true)
#404 := (iff #399 false)
#405 := [rewrite]: #404
#762 := (iff #413 #399)
#755 := (iff #770 true)
#761 := [rewrite]: #755
#764 := [monotonicity #761]: #762
#763 := [trans #764 #405]: #765
#753 := [monotonicity #763]: #752
#478 := [trans #753 #476]: #477
#472 := [monotonicity #478]: #471
#747 := [trans #472 #750]: #471
#749 := [quant-inst #17]: #748
#751 := [mp #749 #747]: #371
#483 := [unit-resolution #751 #792]: #759
#465 := (= #11 #758)
#466 := [monotonicity #473]: #465
#467 := [trans #466 #483]: #744
#459 := [unit-resolution #553 #467]: #734
#469 := [monotonicity #459]: #468
#460 := [trans #469 #484]: #16
#443 := (or #79 #365)
#451 := (or #79 #365 #450)
#452 := [def-axiom]: #451
#454 := [unit-resolution #452 #83]: #443
#482 := [unit-resolution #454 #473]: #79
[unit-resolution #482 #460]: false
1a7e6fb939840d6cef72226e157b39c6c463f1a1 283 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#13 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#11 := (f5 #10 0::Int)
#12 := (f3 f4 #11)
#14 := (= #12 #13)
#461 := (= #11 0::Int)
#22 := (:var 0 Int)
#34 := (:var 1 Int)
#54 := (f6 f7 #34)
#55 := (f5 #54 #22)
#796 := (pattern #55)
#130 := -1::Int
#134 := (* -1::Int #22)
#131 := (* -1::Int #34)
#153 := (mod #131 #134)
#344 := (+ #55 #153)
#345 := (= #344 0::Int)
#56 := (mod #34 #22)
#341 := (* -1::Int #56)
#342 := (+ #55 #341)
#343 := (= #342 0::Int)
#108 := (<= #22 0::Int)
#220 := (>= #34 0::Int)
#288 := (or #220 #108)
#289 := (not #288)
#104 := (<= #34 0::Int)
#284 := (or #104 #108)
#285 := (not #284)
#292 := (or #285 #289)
#346 := (if #292 #343 #345)
#340 := (= #55 0::Int)
#37 := (= #34 0::Int)
#347 := (if #37 #340 #346)
#339 := (= #55 #34)
#38 := (= #22 0::Int)
#348 := (if #38 #339 #347)
#797 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #796) #348)
#351 := (forall (vars (?v0 Int) (?v1 Int)) #348)
#800 := (iff #351 #797)
#798 := (iff #348 #348)
#799 := [refl]: #798
#801 := [quant-intro #799]: #800
#159 := (* -1::Int #153)
#308 := (if #292 #56 #159)
#311 := (if #37 0::Int #308)
#314 := (if #38 #34 #311)
#317 := (= #55 #314)
#320 := (forall (vars (?v0 Int) (?v1 Int)) #317)
#352 := (iff #320 #351)
#349 := (iff #317 #348)
#350 := [rewrite]: #349
#353 := [quant-intro #350]: #352
#109 := (not #108)
#223 := (not #220)
#226 := (and #223 #109)
#105 := (not #104)
#112 := (and #105 #109)
#229 := (or #112 #226)
#245 := (if #229 #56 #159)
#248 := (if #37 0::Int #245)
#251 := (if #38 #34 #248)
#254 := (= #55 #251)
#257 := (forall (vars (?v0 Int) (?v1 Int)) #254)
#321 := (iff #257 #320)
#318 := (iff #254 #317)
#315 := (= #251 #314)
#312 := (= #248 #311)
#309 := (= #245 #308)
#293 := (iff #229 #292)
#290 := (iff #226 #289)
#291 := [rewrite]: #290
#286 := (iff #112 #285)
#287 := [rewrite]: #286
#294 := [monotonicity #287 #291]: #293
#310 := [monotonicity #294]: #309
#313 := [monotonicity #310]: #312
#316 := [monotonicity #313]: #315
#319 := [monotonicity #316]: #318
#322 := [quant-intro #319]: #321
#281 := (~ #257 #257)
#279 := (~ #254 #254)
#280 := [refl]: #279
#282 := [nnf-pos #280]: #281
#115 := (<= 0::Int #34)
#116 := (not #115)
#124 := (and #116 #109)
#127 := (or #112 #124)
#164 := (if #127 #56 #159)
#167 := (if #37 0::Int #164)
#170 := (if #38 #34 #167)
#173 := (= #55 #170)
#176 := (forall (vars (?v0 Int) (?v1 Int)) #173)
#258 := (iff #176 #257)
#255 := (iff #173 #254)
#252 := (= #170 #251)
#249 := (= #167 #248)
#246 := (= #164 #245)
#230 := (iff #127 #229)
#227 := (iff #124 #226)
#224 := (iff #116 #223)
#221 := (iff #115 #220)
#222 := [rewrite]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#247 := [monotonicity #231]: #246
#250 := [monotonicity #247]: #249
#253 := [monotonicity #250]: #252
#256 := [monotonicity #253]: #255
#259 := [quant-intro #256]: #258
#48 := (- #22)
#47 := (- #34)
#57 := (mod #47 #48)
#58 := (- #57)
#41 := (< 0::Int #22)
#43 := (< #34 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #34)
#42 := (and #40 #41)
#45 := (or #42 #44)
#59 := (if #45 #56 #58)
#60 := (if #37 0::Int #59)
#61 := (if #38 #34 #60)
#62 := (= #55 #61)
#63 := (forall (vars (?v0 Int) (?v1 Int)) #62)
#177 := (iff #63 #176)
#174 := (iff #62 #173)
#171 := (= #61 #170)
#168 := (= #60 #167)
#165 := (= #59 #164)
#162 := (= #58 #159)
#156 := (- #153)
#160 := (= #156 #159)
#161 := [rewrite]: #160
#157 := (= #58 #156)
#154 := (= #57 #153)
#135 := (= #48 #134)
#136 := [rewrite]: #135
#132 := (= #47 #131)
#133 := [rewrite]: #132
#155 := [monotonicity #133 #136]: #154
#158 := [monotonicity #155]: #157
#163 := [trans #158 #161]: #162
#128 := (iff #45 #127)
#125 := (iff #44 #124)
#110 := (iff #41 #109)
#111 := [rewrite]: #110
#117 := (iff #43 #116)
#121 := (iff #116 #116)
#119 := (iff #115 #115)
#120 := [rewrite]: #119
#122 := [monotonicity #120]: #121
#118 := [rewrite]: #117
#123 := [trans #118 #122]: #117
#126 := [monotonicity #123 #111]: #125
#113 := (iff #42 #112)
#106 := (iff #40 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#129 := [monotonicity #114 #126]: #128
#166 := [monotonicity #129 #163]: #165
#169 := [monotonicity #166]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [quant-intro #175]: #177
#70 := [asserted]: #63
#179 := [mp #70 #178]: #176
#260 := [mp #179 #259]: #257
#283 := [mp~ #260 #282]: #257
#323 := [mp #283 #322]: #320
#354 := [mp #323 #353]: #351
#802 := [mp #354 #801]: #797
#697 := (not #797)
#686 := (or #697 #461)
#733 := (* -1::Int 0::Int)
#448 := (mod #733 #733)
#730 := (+ #11 #448)
#734 := (= #730 0::Int)
#452 := (mod 0::Int 0::Int)
#453 := (* -1::Int #452)
#454 := (+ #11 #453)
#732 := (= #454 0::Int)
#462 := (<= 0::Int 0::Int)
#550 := (>= 0::Int 0::Int)
#737 := (or #550 #462)
#741 := (not #737)
#736 := (or #462 #462)
#740 := (not #736)
#451 := (or #740 #741)
#731 := (if #451 #732 #734)
#739 := (= 0::Int 0::Int)
#735 := (if #739 #461 #731)
#724 := (if #739 #461 #735)
#687 := (or #697 #724)
#689 := (iff #687 #686)
#690 := (iff #686 #686)
#674 := [rewrite]: #690
#696 := (iff #724 #461)
#1 := true
#685 := (if true #461 #461)
#694 := (iff #685 #461)
#695 := [rewrite]: #694
#682 := (iff #724 #685)
#691 := (iff #735 #461)
#701 := (+ #11 #452)
#699 := (= #701 0::Int)
#609 := (if true #461 #699)
#700 := (iff #609 #461)
#704 := [rewrite]: #700
#610 := (iff #735 #609)
#607 := (iff #731 #699)
#602 := (if false #732 #699)
#598 := (iff #602 #699)
#606 := [rewrite]: #598
#604 := (iff #731 #602)
#702 := (iff #734 #699)
#603 := (= #730 #701)
#594 := (= #448 #452)
#592 := (= #733 0::Int)
#593 := [rewrite]: #592
#553 := [monotonicity #593 #593]: #594
#698 := [monotonicity #553]: #603
#587 := [monotonicity #698]: #702
#707 := (iff #451 false)
#552 := (or false false)
#708 := (iff #552 false)
#709 := [rewrite]: #708
#705 := (iff #451 #552)
#549 := (iff #741 false)
#419 := (not true)
#744 := (iff #419 false)
#407 := [rewrite]: #744
#713 := (iff #741 #419)
#718 := (iff #737 true)
#727 := (or true true)
#729 := (iff #727 true)
#570 := [rewrite]: #729
#711 := (iff #737 #727)
#721 := (iff #462 true)
#722 := [rewrite]: #721
#423 := (iff #550 true)
#759 := [rewrite]: #423
#712 := [monotonicity #759 #722]: #711
#719 := [trans #712 #570]: #718
#720 := [monotonicity #719]: #713
#551 := [trans #720 #407]: #549
#716 := (iff #740 false)
#714 := (iff #740 #419)
#571 := (iff #736 true)
#728 := (iff #736 #727)
#723 := [monotonicity #722 #722]: #728
#572 := [trans #723 #570]: #571
#715 := [monotonicity #572]: #714
#717 := [trans #715 #407]: #716
#706 := [monotonicity #717 #551]: #705
#710 := [trans #706 #709]: #707
#605 := [monotonicity #710 #587]: #604
#608 := [trans #605 #606]: #607
#725 := (iff #739 true)
#726 := [rewrite]: #725
#703 := [monotonicity #726 #608]: #610
#693 := [trans #703 #704]: #691
#684 := [monotonicity #726 #693]: #682
#692 := [trans #684 #695]: #696
#683 := [monotonicity #692]: #689
#675 := [trans #683 #674]: #689
#688 := [quant-inst #9 #9]: #687
#677 := [mp #688 #675]: #686
#679 := [unit-resolution #677 #802]: #461
#680 := [monotonicity #679]: #14
#15 := (not #14)
#65 := [asserted]: #15
[unit-resolution #65 #680]: false
936a202ebc7a104f43c75b92a8828d52b8119be5 316 0
unsat
#2 := false
decl f10 :: S3
#10 := f10
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 Int Int)
#13 := 0::Int
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 0::Int)
decl f4 :: S2
#7 := f4
#15 := (f3 f4 #14)
#16 := (= #15 f10)
#356 := (f3 f4 #11)
#441 := (= #356 f10)
#18 := (:var 0 S3)
#19 := (f8 f9 #18)
#770 := (pattern #19)
#20 := (f3 f4 #19)
#21 := (= #20 #18)
#771 := (forall (vars (?v0 S3)) (:pat #770) #21)
#22 := (forall (vars (?v0 S3)) #21)
#774 := (iff #22 #771)
#772 := (iff #21 #21)
#773 := [refl]: #772
#775 := [quant-intro #773]: #774
#264 := (~ #22 #22)
#199 := (~ #21 #21)
#200 := [refl]: #199
#265 := [nnf-pos #200]: #264
#67 := [asserted]: #22
#268 := [mp~ #67 #265]: #22
#776 := [mp #268 #775]: #771
#434 := (not #771)
#445 := (or #434 #441)
#446 := [quant-inst #10]: #445
#609 := [unit-resolution #446 #776]: #441
#611 := (= #15 #356)
#767 := (= #14 #11)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f6 f7 #35)
#56 := (f5 #55 #23)
#797 := (pattern #56)
#131 := -1::Int
#135 := (* -1::Int #23)
#132 := (* -1::Int #35)
#154 := (mod #132 #135)
#345 := (+ #56 #154)
#346 := (= #345 0::Int)
#57 := (mod #35 #23)
#342 := (* -1::Int #57)
#343 := (+ #56 #342)
#344 := (= #343 0::Int)
#109 := (<= #23 0::Int)
#221 := (>= #35 0::Int)
#289 := (or #221 #109)
#290 := (not #289)
#105 := (<= #35 0::Int)
#285 := (or #105 #109)
#286 := (not #285)
#293 := (or #286 #290)
#347 := (if #293 #344 #346)
#341 := (= #56 0::Int)
#38 := (= #35 0::Int)
#348 := (if #38 #341 #347)
#340 := (= #56 #35)
#39 := (= #23 0::Int)
#349 := (if #39 #340 #348)
#798 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #797) #349)
#352 := (forall (vars (?v0 Int) (?v1 Int)) #349)
#801 := (iff #352 #798)
#799 := (iff #349 #349)
#800 := [refl]: #799
#802 := [quant-intro #800]: #801
#160 := (* -1::Int #154)
#309 := (if #293 #57 #160)
#312 := (if #38 0::Int #309)
#315 := (if #39 #35 #312)
#318 := (= #56 #315)
#321 := (forall (vars (?v0 Int) (?v1 Int)) #318)
#353 := (iff #321 #352)
#350 := (iff #318 #349)
#351 := [rewrite]: #350
#354 := [quant-intro #351]: #353
#110 := (not #109)
#224 := (not #221)
#227 := (and #224 #110)
#106 := (not #105)
#113 := (and #106 #110)
#230 := (or #113 #227)
#246 := (if #230 #57 #160)
#249 := (if #38 0::Int #246)
#252 := (if #39 #35 #249)
#255 := (= #56 #252)
#258 := (forall (vars (?v0 Int) (?v1 Int)) #255)
#322 := (iff #258 #321)
#319 := (iff #255 #318)
#316 := (= #252 #315)
#313 := (= #249 #312)
#310 := (= #246 #309)
#294 := (iff #230 #293)
#291 := (iff #227 #290)
#292 := [rewrite]: #291
#287 := (iff #113 #286)
#288 := [rewrite]: #287
#295 := [monotonicity #288 #292]: #294
#311 := [monotonicity #295]: #310
#314 := [monotonicity #311]: #313
#317 := [monotonicity #314]: #316
#320 := [monotonicity #317]: #319
#323 := [quant-intro #320]: #322
#282 := (~ #258 #258)
#280 := (~ #255 #255)
#281 := [refl]: #280
#283 := [nnf-pos #281]: #282
#116 := (<= 0::Int #35)
#117 := (not #116)
#125 := (and #117 #110)
#128 := (or #113 #125)
#165 := (if #128 #57 #160)
#168 := (if #38 0::Int #165)
#171 := (if #39 #35 #168)
#174 := (= #56 #171)
#177 := (forall (vars (?v0 Int) (?v1 Int)) #174)
#259 := (iff #177 #258)
#256 := (iff #174 #255)
#253 := (= #171 #252)
#250 := (= #168 #249)
#247 := (= #165 #246)
#231 := (iff #128 #230)
#228 := (iff #125 #227)
#225 := (iff #117 #224)
#222 := (iff #116 #221)
#223 := [rewrite]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#248 := [monotonicity #232]: #247
#251 := [monotonicity #248]: #250
#254 := [monotonicity #251]: #253
#257 := [monotonicity #254]: #256
#260 := [quant-intro #257]: #259
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#178 := (iff #64 #177)
#175 := (iff #63 #174)
#172 := (= #62 #171)
#169 := (= #61 #168)
#166 := (= #60 #165)
#163 := (= #59 #160)
#157 := (- #154)
#161 := (= #157 #160)
#162 := [rewrite]: #161
#158 := (= #59 #157)
#155 := (= #58 #154)
#136 := (= #49 #135)
#137 := [rewrite]: #136
#133 := (= #48 #132)
#134 := [rewrite]: #133
#156 := [monotonicity #134 #137]: #155
#159 := [monotonicity #156]: #158
#164 := [trans #159 #162]: #163
#129 := (iff #46 #128)
#126 := (iff #45 #125)
#111 := (iff #42 #110)
#112 := [rewrite]: #111
#118 := (iff #44 #117)
#122 := (iff #117 #117)
#120 := (iff #116 #116)
#121 := [rewrite]: #120
#123 := [monotonicity #121]: #122
#119 := [rewrite]: #118
#124 := [trans #119 #123]: #118
#127 := [monotonicity #124 #112]: #126
#114 := (iff #43 #113)
#107 := (iff #41 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#130 := [monotonicity #115 #127]: #129
#167 := [monotonicity #130 #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [quant-intro #176]: #178
#71 := [asserted]: #64
#180 := [mp #71 #179]: #177
#261 := [mp #180 #260]: #258
#284 := [mp~ #261 #283]: #258
#324 := [mp #284 #323]: #321
#355 := [mp #324 #354]: #352
#803 := [mp #355 #802]: #798
#699 := (not #798)
#700 := (or #699 #767)
#390 := (* -1::Int 0::Int)
#752 := (* -1::Int #11)
#753 := (mod #752 #390)
#755 := (+ #14 #753)
#395 := (= #755 0::Int)
#749 := (mod #11 0::Int)
#750 := (* -1::Int #749)
#751 := (+ #14 #750)
#746 := (= #751 0::Int)
#745 := (<= 0::Int 0::Int)
#410 := (>= #11 0::Int)
#411 := (or #410 #745)
#747 := (not #411)
#404 := (<= #11 0::Int)
#408 := (or #404 #745)
#409 := (not #408)
#748 := (or #409 #747)
#396 := (if #748 #746 #395)
#761 := (= #14 0::Int)
#420 := (= #11 0::Int)
#756 := (if #420 #761 #396)
#766 := (= 0::Int 0::Int)
#754 := (if #766 #767 #756)
#703 := (or #699 #754)
#603 := (iff #703 #700)
#606 := (iff #700 #700)
#599 := [rewrite]: #606
#702 := (iff #754 #767)
#573 := (mod #752 0::Int)
#717 := (+ #14 #573)
#713 := (= #717 0::Int)
#709 := (if #420 #761 #713)
#1 := true
#711 := (if true #767 #709)
#595 := (iff #711 #767)
#554 := [rewrite]: #595
#593 := (iff #754 #711)
#710 := (iff #756 #709)
#706 := (iff #396 #713)
#714 := (if false #746 #713)
#552 := (iff #714 #713)
#553 := [rewrite]: #552
#721 := (iff #396 #714)
#719 := (iff #395 #713)
#718 := (= #755 #717)
#715 := (= #753 #573)
#571 := (= #390 0::Int)
#572 := [rewrite]: #571
#716 := [monotonicity #572]: #715
#712 := [monotonicity #716]: #718
#720 := [monotonicity #712]: #719
#724 := (iff #748 false)
#727 := (or false false)
#728 := (iff #727 false)
#729 := [rewrite]: #728
#722 := (iff #748 #727)
#725 := (iff #747 false)
#463 := (not true)
#738 := (iff #463 false)
#742 := [rewrite]: #738
#732 := (iff #747 #463)
#731 := (iff #411 true)
#454 := (or #410 true)
#734 := (iff #454 true)
#449 := [rewrite]: #734
#455 := (iff #411 #454)
#744 := (iff #745 true)
#466 := [rewrite]: #744
#733 := [monotonicity #466]: #455
#735 := [trans #733 #449]: #731
#736 := [monotonicity #735]: #732
#726 := [trans #736 #742]: #725
#452 := (iff #409 false)
#737 := (iff #409 #463)
#740 := (iff #408 true)
#467 := (or #404 true)
#362 := (iff #467 true)
#739 := [rewrite]: #362
#468 := (iff #408 #467)
#469 := [monotonicity #466]: #468
#462 := [trans #469 #739]: #740
#741 := [monotonicity #462]: #737
#453 := [trans #741 #742]: #452
#723 := [monotonicity #453 #726]: #722
#730 := [trans #723 #729]: #724
#550 := [monotonicity #730 #720]: #721
#707 := [trans #550 #553]: #706
#708 := [monotonicity #707]: #710
#757 := (iff #766 true)
#743 := [rewrite]: #757
#594 := [monotonicity #743 #708]: #593
#604 := [trans #594 #554]: #702
#605 := [monotonicity #604]: #603
#607 := [trans #605 #599]: #603
#588 := [quant-inst #11 #13]: #703
#608 := [mp #588 #607]: #700
#610 := [unit-resolution #608 #803]: #767
#704 := [monotonicity #610]: #611
#701 := [trans #704 #609]: #16
#17 := (not #16)
#66 := [asserted]: #17
[unit-resolution #66 #701]: false
364659a809da594253b58b8a2b28d9516abee4db 310 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#12 := (f5 #10 1::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#461 := (= #12 0::Int)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f6 f7 #35)
#56 := (f5 #55 #23)
#796 := (pattern #56)
#131 := -1::Int
#135 := (* -1::Int #23)
#132 := (* -1::Int #35)
#154 := (mod #132 #135)
#345 := (+ #56 #154)
#346 := (= #345 0::Int)
#57 := (mod #35 #23)
#342 := (* -1::Int #57)
#343 := (+ #56 #342)
#344 := (= #343 0::Int)
#109 := (<= #23 0::Int)
#221 := (>= #35 0::Int)
#289 := (or #221 #109)
#290 := (not #289)
#105 := (<= #35 0::Int)
#285 := (or #105 #109)
#286 := (not #285)
#293 := (or #286 #290)
#347 := (if #293 #344 #346)
#341 := (= #56 0::Int)
#38 := (= #35 0::Int)
#348 := (if #38 #341 #347)
#340 := (= #56 #35)
#39 := (= #23 0::Int)
#349 := (if #39 #340 #348)
#797 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #796) #349)
#352 := (forall (vars (?v0 Int) (?v1 Int)) #349)
#800 := (iff #352 #797)
#798 := (iff #349 #349)
#799 := [refl]: #798
#801 := [quant-intro #799]: #800
#160 := (* -1::Int #154)
#309 := (if #293 #57 #160)
#312 := (if #38 0::Int #309)
#315 := (if #39 #35 #312)
#318 := (= #56 #315)
#321 := (forall (vars (?v0 Int) (?v1 Int)) #318)
#353 := (iff #321 #352)
#350 := (iff #318 #349)
#351 := [rewrite]: #350
#354 := [quant-intro #351]: #353
#110 := (not #109)
#224 := (not #221)
#227 := (and #224 #110)
#106 := (not #105)
#113 := (and #106 #110)
#230 := (or #113 #227)
#246 := (if #230 #57 #160)
#249 := (if #38 0::Int #246)
#252 := (if #39 #35 #249)
#255 := (= #56 #252)
#258 := (forall (vars (?v0 Int) (?v1 Int)) #255)
#322 := (iff #258 #321)
#319 := (iff #255 #318)
#316 := (= #252 #315)
#313 := (= #249 #312)
#310 := (= #246 #309)
#294 := (iff #230 #293)
#291 := (iff #227 #290)
#292 := [rewrite]: #291
#287 := (iff #113 #286)
#288 := [rewrite]: #287
#295 := [monotonicity #288 #292]: #294
#311 := [monotonicity #295]: #310
#314 := [monotonicity #311]: #313
#317 := [monotonicity #314]: #316
#320 := [monotonicity #317]: #319
#323 := [quant-intro #320]: #322
#282 := (~ #258 #258)
#280 := (~ #255 #255)
#281 := [refl]: #280
#283 := [nnf-pos #281]: #282
#116 := (<= 0::Int #35)
#117 := (not #116)
#125 := (and #117 #110)
#128 := (or #113 #125)
#165 := (if #128 #57 #160)
#168 := (if #38 0::Int #165)
#171 := (if #39 #35 #168)
#174 := (= #56 #171)
#177 := (forall (vars (?v0 Int) (?v1 Int)) #174)
#259 := (iff #177 #258)
#256 := (iff #174 #255)
#253 := (= #171 #252)
#250 := (= #168 #249)
#247 := (= #165 #246)
#231 := (iff #128 #230)
#228 := (iff #125 #227)
#225 := (iff #117 #224)
#222 := (iff #116 #221)
#223 := [rewrite]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#248 := [monotonicity #232]: #247
#251 := [monotonicity #248]: #250
#254 := [monotonicity #251]: #253
#257 := [monotonicity #254]: #256
#260 := [quant-intro #257]: #259
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#178 := (iff #64 #177)
#175 := (iff #63 #174)
#172 := (= #62 #171)
#169 := (= #61 #168)
#166 := (= #60 #165)
#163 := (= #59 #160)
#157 := (- #154)
#161 := (= #157 #160)
#162 := [rewrite]: #161
#158 := (= #59 #157)
#155 := (= #58 #154)
#136 := (= #49 #135)
#137 := [rewrite]: #136
#133 := (= #48 #132)
#134 := [rewrite]: #133
#156 := [monotonicity #134 #137]: #155
#159 := [monotonicity #156]: #158
#164 := [trans #159 #162]: #163
#129 := (iff #46 #128)
#126 := (iff #45 #125)
#111 := (iff #42 #110)
#112 := [rewrite]: #111
#118 := (iff #44 #117)
#122 := (iff #117 #117)
#120 := (iff #116 #116)
#121 := [rewrite]: #120
#123 := [monotonicity #121]: #122
#119 := [rewrite]: #118
#124 := [trans #119 #123]: #118
#127 := [monotonicity #124 #112]: #126
#114 := (iff #43 #113)
#107 := (iff #41 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#130 := [monotonicity #115 #127]: #129
#167 := [monotonicity #130 #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [quant-intro #176]: #178
#71 := [asserted]: #64
#180 := [mp #71 #179]: #177
#261 := [mp #180 #260]: #258
#284 := [mp~ #261 #283]: #258
#324 := [mp #284 #323]: #321
#355 := [mp #324 #354]: #352
#802 := [mp #355 #801]: #797
#658 := (not #797)
#659 := (or #658 #461)
#734 := (* -1::Int 1::Int)
#730 := (* -1::Int 0::Int)
#731 := (mod #730 #734)
#735 := (+ #12 #731)
#724 := (= #735 0::Int)
#454 := (mod 0::Int 1::Int)
#732 := (* -1::Int #454)
#733 := (+ #12 #732)
#448 := (= #733 0::Int)
#740 := (<= 1::Int 0::Int)
#550 := (>= 0::Int 0::Int)
#451 := (or #550 #740)
#452 := (not #451)
#736 := (<= 0::Int 0::Int)
#737 := (or #736 #740)
#741 := (not #737)
#453 := (or #741 #452)
#725 := (if #453 #448 #724)
#462 := (= 0::Int 0::Int)
#726 := (if #462 #461 #725)
#739 := (= 1::Int 0::Int)
#721 := (if #739 #461 #726)
#660 := (or #658 #721)
#662 := (iff #660 #659)
#664 := (iff #659 #659)
#665 := [rewrite]: #664
#656 := (iff #721 #461)
#675 := (if false #461 #461)
#679 := (iff #675 #461)
#680 := [rewrite]: #679
#653 := (iff #721 #675)
#669 := (iff #726 #461)
#1 := true
#667 := (if true #461 #461)
#671 := (iff #667 #461)
#672 := [rewrite]: #671
#668 := (iff #726 #667)
#676 := (iff #725 #461)
#677 := (iff #725 #675)
#690 := (iff #724 #461)
#689 := (= #735 #12)
#607 := (+ #12 0::Int)
#610 := (= #607 #12)
#703 := [rewrite]: #610
#687 := (= #735 #607)
#697 := (= #731 0::Int)
#684 := (mod 0::Int -1::Int)
#696 := (= #684 0::Int)
#692 := [rewrite]: #696
#694 := (= #731 #684)
#685 := (= #734 -1::Int)
#682 := [rewrite]: #685
#604 := (= #730 0::Int)
#605 := [rewrite]: #604
#695 := [monotonicity #605 #682]: #694
#686 := [trans #695 #692]: #697
#688 := [monotonicity #686]: #687
#683 := [trans #688 #703]: #689
#674 := [monotonicity #683]: #690
#691 := (iff #448 #461)
#700 := (= #733 #12)
#608 := (= #733 #607)
#598 := (= #732 0::Int)
#587 := (= #732 #730)
#699 := (= #454 0::Int)
#702 := [rewrite]: #699
#602 := [monotonicity #702]: #587
#606 := [trans #602 #605]: #598
#609 := [monotonicity #606]: #608
#704 := [trans #609 #703]: #700
#693 := [monotonicity #704]: #691
#603 := (iff #453 false)
#592 := (or false false)
#553 := (iff #592 false)
#701 := [rewrite]: #553
#593 := (iff #453 #592)
#707 := (iff #452 false)
#419 := (not true)
#744 := (iff #419 false)
#407 := [rewrite]: #744
#708 := (iff #452 #419)
#705 := (iff #451 true)
#714 := (or true false)
#717 := (iff #714 true)
#711 := [rewrite]: #717
#551 := (iff #451 #714)
#571 := (iff #740 false)
#572 := [rewrite]: #571
#423 := (iff #550 true)
#759 := [rewrite]: #423
#552 := [monotonicity #759 #572]: #551
#706 := [trans #552 #711]: #705
#709 := [monotonicity #706]: #708
#710 := [trans #709 #407]: #707
#720 := (iff #741 false)
#719 := (iff #741 #419)
#712 := (iff #737 true)
#715 := (iff #737 #714)
#729 := (iff #736 true)
#570 := [rewrite]: #729
#716 := [monotonicity #570 #572]: #715
#718 := [trans #716 #711]: #712
#713 := [monotonicity #718]: #719
#549 := [trans #713 #407]: #720
#594 := [monotonicity #549 #710]: #593
#698 := [trans #594 #701]: #603
#678 := [monotonicity #698 #693 #674]: #677
#681 := [trans #678 #680]: #676
#728 := (iff #462 true)
#723 := [rewrite]: #728
#670 := [monotonicity #723 #681]: #668
#673 := [trans #670 #672]: #669
#722 := (iff #739 false)
#727 := [rewrite]: #722
#654 := [monotonicity #727 #673]: #653
#657 := [trans #654 #680]: #656
#663 := [monotonicity #657]: #662
#655 := [trans #663 #665]: #662
#661 := [quant-inst #9 #11]: #660
#666 := [mp #661 #655]: #659
#645 := [unit-resolution #666 #802]: #461
#647 := [monotonicity #645]: #15
#16 := (not #15)
#66 := [asserted]: #16
[unit-resolution #66 #647]: false
c3b392a5be27990617a5e1dba37905919a3d03ec 311 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#13 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#9 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 1::Int)
#11 := (f5 #10 1::Int)
#12 := (f3 f4 #11)
#15 := (= #12 #14)
#462 := (= #11 0::Int)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f6 f7 #35)
#56 := (f5 #55 #23)
#796 := (pattern #56)
#131 := -1::Int
#135 := (* -1::Int #23)
#132 := (* -1::Int #35)
#154 := (mod #132 #135)
#345 := (+ #56 #154)
#346 := (= #345 0::Int)
#57 := (mod #35 #23)
#342 := (* -1::Int #57)
#343 := (+ #56 #342)
#344 := (= #343 0::Int)
#109 := (<= #23 0::Int)
#221 := (>= #35 0::Int)
#289 := (or #221 #109)
#290 := (not #289)
#105 := (<= #35 0::Int)
#285 := (or #105 #109)
#286 := (not #285)
#293 := (or #286 #290)
#347 := (if #293 #344 #346)
#341 := (= #56 0::Int)
#38 := (= #35 0::Int)
#348 := (if #38 #341 #347)
#340 := (= #56 #35)
#39 := (= #23 0::Int)
#349 := (if #39 #340 #348)
#797 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #796) #349)
#352 := (forall (vars (?v0 Int) (?v1 Int)) #349)
#800 := (iff #352 #797)
#798 := (iff #349 #349)
#799 := [refl]: #798
#801 := [quant-intro #799]: #800
#160 := (* -1::Int #154)
#309 := (if #293 #57 #160)
#312 := (if #38 0::Int #309)
#315 := (if #39 #35 #312)
#318 := (= #56 #315)
#321 := (forall (vars (?v0 Int) (?v1 Int)) #318)
#353 := (iff #321 #352)
#350 := (iff #318 #349)
#351 := [rewrite]: #350
#354 := [quant-intro #351]: #353
#110 := (not #109)
#224 := (not #221)
#227 := (and #224 #110)
#106 := (not #105)
#113 := (and #106 #110)
#230 := (or #113 #227)
#246 := (if #230 #57 #160)
#249 := (if #38 0::Int #246)
#252 := (if #39 #35 #249)
#255 := (= #56 #252)
#258 := (forall (vars (?v0 Int) (?v1 Int)) #255)
#322 := (iff #258 #321)
#319 := (iff #255 #318)
#316 := (= #252 #315)
#313 := (= #249 #312)
#310 := (= #246 #309)
#294 := (iff #230 #293)
#291 := (iff #227 #290)
#292 := [rewrite]: #291
#287 := (iff #113 #286)
#288 := [rewrite]: #287
#295 := [monotonicity #288 #292]: #294
#311 := [monotonicity #295]: #310
#314 := [monotonicity #311]: #313
#317 := [monotonicity #314]: #316
#320 := [monotonicity #317]: #319
#323 := [quant-intro #320]: #322
#282 := (~ #258 #258)
#280 := (~ #255 #255)
#281 := [refl]: #280
#283 := [nnf-pos #281]: #282
#116 := (<= 0::Int #35)
#117 := (not #116)
#125 := (and #117 #110)
#128 := (or #113 #125)
#165 := (if #128 #57 #160)
#168 := (if #38 0::Int #165)
#171 := (if #39 #35 #168)
#174 := (= #56 #171)
#177 := (forall (vars (?v0 Int) (?v1 Int)) #174)
#259 := (iff #177 #258)
#256 := (iff #174 #255)
#253 := (= #171 #252)
#250 := (= #168 #249)
#247 := (= #165 #246)
#231 := (iff #128 #230)
#228 := (iff #125 #227)
#225 := (iff #117 #224)
#222 := (iff #116 #221)
#223 := [rewrite]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#248 := [monotonicity #232]: #247
#251 := [monotonicity #248]: #250
#254 := [monotonicity #251]: #253
#257 := [monotonicity #254]: #256
#260 := [quant-intro #257]: #259
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#178 := (iff #64 #177)
#175 := (iff #63 #174)
#172 := (= #62 #171)
#169 := (= #61 #168)
#166 := (= #60 #165)
#163 := (= #59 #160)
#157 := (- #154)
#161 := (= #157 #160)
#162 := [rewrite]: #161
#158 := (= #59 #157)
#155 := (= #58 #154)
#136 := (= #49 #135)
#137 := [rewrite]: #136
#133 := (= #48 #132)
#134 := [rewrite]: #133
#156 := [monotonicity #134 #137]: #155
#159 := [monotonicity #156]: #158
#164 := [trans #159 #162]: #163
#129 := (iff #46 #128)
#126 := (iff #45 #125)
#111 := (iff #42 #110)
#112 := [rewrite]: #111
#118 := (iff #44 #117)
#122 := (iff #117 #117)
#120 := (iff #116 #116)
#121 := [rewrite]: #120
#123 := [monotonicity #121]: #122
#119 := [rewrite]: #118
#124 := [trans #119 #123]: #118
#127 := [monotonicity #124 #112]: #126
#114 := (iff #43 #113)
#107 := (iff #41 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#130 := [monotonicity #115 #127]: #129
#167 := [monotonicity #130 #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [quant-intro #176]: #178
#71 := [asserted]: #64
#180 := [mp #71 #179]: #177
#261 := [mp #180 #260]: #258
#284 := [mp~ #261 #283]: #258
#324 := [mp #284 #323]: #321
#355 := [mp #324 #354]: #352
#802 := [mp #355 #801]: #797
#662 := (not #797)
#663 := (or #662 #462)
#730 := (* -1::Int 1::Int)
#734 := (mod #730 #730)
#731 := (+ #11 #734)
#735 := (= #731 0::Int)
#454 := (mod 1::Int 1::Int)
#732 := (* -1::Int #454)
#733 := (+ #11 #732)
#448 := (= #733 0::Int)
#736 := (<= 1::Int 0::Int)
#741 := (>= 1::Int 0::Int)
#451 := (or #741 #736)
#452 := (not #451)
#740 := (or #736 #736)
#737 := (not #740)
#453 := (or #737 #452)
#724 := (if #453 #448 #735)
#739 := (= 1::Int 0::Int)
#725 := (if #739 #462 #724)
#461 := (= #11 1::Int)
#726 := (if #739 #461 #725)
#664 := (or #662 #726)
#655 := (iff #664 #663)
#644 := (iff #663 #663)
#645 := [rewrite]: #644
#660 := (iff #726 #462)
#654 := (if false #461 #462)
#658 := (iff #654 #462)
#659 := [rewrite]: #658
#656 := (iff #726 #654)
#673 := (iff #725 #462)
#668 := (if false #462 #462)
#672 := (iff #668 #462)
#669 := [rewrite]: #672
#670 := (iff #725 #668)
#681 := (iff #724 #462)
#1 := true
#677 := (if true #462 #462)
#680 := (iff #677 #462)
#676 := [rewrite]: #680
#678 := (iff #724 #677)
#674 := (iff #735 #462)
#683 := (= #731 #11)
#608 := (+ #11 0::Int)
#703 := (= #608 #11)
#700 := [rewrite]: #703
#688 := (= #731 #608)
#686 := (= #734 0::Int)
#694 := (mod -1::Int -1::Int)
#692 := (= #694 0::Int)
#697 := [rewrite]: #692
#695 := (= #734 #694)
#682 := (= #730 -1::Int)
#684 := [rewrite]: #682
#696 := [monotonicity #684 #684]: #695
#687 := [trans #696 #697]: #686
#689 := [monotonicity #687]: #688
#690 := [trans #689 #700]: #683
#675 := [monotonicity #690]: #674
#693 := (iff #448 #462)
#704 := (= #733 #11)
#609 := (= #733 #608)
#606 := (= #732 0::Int)
#587 := (* -1::Int 0::Int)
#605 := (= #587 0::Int)
#598 := [rewrite]: #605
#602 := (= #732 #587)
#699 := (= #454 0::Int)
#702 := [rewrite]: #699
#604 := [monotonicity #702]: #602
#607 := [trans #604 #598]: #606
#610 := [monotonicity #607]: #609
#691 := [trans #610 #700]: #704
#685 := [monotonicity #691]: #693
#603 := (iff #453 true)
#551 := (or true false)
#706 := (iff #551 true)
#708 := [rewrite]: #706
#553 := (iff #453 #551)
#593 := (iff #452 false)
#419 := (not true)
#744 := (iff #419 false)
#407 := [rewrite]: #744
#710 := (iff #452 #419)
#709 := (iff #451 true)
#552 := (iff #451 #551)
#727 := (iff #736 false)
#728 := [rewrite]: #727
#720 := (iff #741 true)
#549 := [rewrite]: #720
#705 := [monotonicity #549 #728]: #552
#707 := [trans #705 #708]: #709
#592 := [monotonicity #707]: #710
#594 := [trans #592 #407]: #593
#719 := (iff #737 true)
#716 := (not false)
#712 := (iff #716 true)
#718 := [rewrite]: #712
#717 := (iff #737 #716)
#714 := (iff #740 false)
#723 := (or false false)
#571 := (iff #723 false)
#572 := [rewrite]: #571
#729 := (iff #740 #723)
#570 := [monotonicity #728 #728]: #729
#715 := [trans #570 #572]: #714
#711 := [monotonicity #715]: #717
#713 := [trans #711 #718]: #719
#701 := [monotonicity #713 #594]: #553
#698 := [trans #701 #708]: #603
#679 := [monotonicity #698 #685 #675]: #678
#667 := [trans #679 #676]: #681
#721 := (iff #739 false)
#722 := [rewrite]: #721
#671 := [monotonicity #722 #667]: #670
#653 := [trans #671 #669]: #673
#657 := [monotonicity #722 #653]: #656
#661 := [trans #657 #659]: #660
#666 := [monotonicity #661]: #655
#647 := [trans #666 #645]: #655
#665 := [quant-inst #9 #9]: #664
#648 := [mp #665 #647]: #663
#650 := [unit-resolution #648 #802]: #462
#651 := [monotonicity #650]: #15
#16 := (not #15)
#66 := [asserted]: #16
[unit-resolution #66 #651]: false
388588036303efc01fcf566cedf02a315f063404 322 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#14 := 0::Int
decl f4 :: S2
#7 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 1::Int
decl f6 :: (-> S5 Int S4)
#9 := 3::Int
decl f7 :: S5
#8 := f7
#10 := (f6 f7 3::Int)
#12 := (f5 #10 1::Int)
#13 := (f3 f4 #12)
#16 := (= #13 #15)
#737 := (= #12 0::Int)
#24 := (:var 0 Int)
#36 := (:var 1 Int)
#56 := (f6 f7 #36)
#57 := (f5 #56 #24)
#797 := (pattern #57)
#132 := -1::Int
#136 := (* -1::Int #24)
#133 := (* -1::Int #36)
#155 := (mod #133 #136)
#346 := (+ #57 #155)
#347 := (= #346 0::Int)
#58 := (mod #36 #24)
#343 := (* -1::Int #58)
#344 := (+ #57 #343)
#345 := (= #344 0::Int)
#110 := (<= #24 0::Int)
#222 := (>= #36 0::Int)
#290 := (or #222 #110)
#291 := (not #290)
#106 := (<= #36 0::Int)
#286 := (or #106 #110)
#287 := (not #286)
#294 := (or #287 #291)
#348 := (if #294 #345 #347)
#342 := (= #57 0::Int)
#39 := (= #36 0::Int)
#349 := (if #39 #342 #348)
#341 := (= #57 #36)
#40 := (= #24 0::Int)
#350 := (if #40 #341 #349)
#798 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #797) #350)
#353 := (forall (vars (?v0 Int) (?v1 Int)) #350)
#801 := (iff #353 #798)
#799 := (iff #350 #350)
#800 := [refl]: #799
#802 := [quant-intro #800]: #801
#161 := (* -1::Int #155)
#310 := (if #294 #58 #161)
#313 := (if #39 0::Int #310)
#316 := (if #40 #36 #313)
#319 := (= #57 #316)
#322 := (forall (vars (?v0 Int) (?v1 Int)) #319)
#354 := (iff #322 #353)
#351 := (iff #319 #350)
#352 := [rewrite]: #351
#355 := [quant-intro #352]: #354
#111 := (not #110)
#225 := (not #222)
#228 := (and #225 #111)
#107 := (not #106)
#114 := (and #107 #111)
#231 := (or #114 #228)
#247 := (if #231 #58 #161)
#250 := (if #39 0::Int #247)
#253 := (if #40 #36 #250)
#256 := (= #57 #253)
#259 := (forall (vars (?v0 Int) (?v1 Int)) #256)
#323 := (iff #259 #322)
#320 := (iff #256 #319)
#317 := (= #253 #316)
#314 := (= #250 #313)
#311 := (= #247 #310)
#295 := (iff #231 #294)
#292 := (iff #228 #291)
#293 := [rewrite]: #292
#288 := (iff #114 #287)
#289 := [rewrite]: #288
#296 := [monotonicity #289 #293]: #295
#312 := [monotonicity #296]: #311
#315 := [monotonicity #312]: #314
#318 := [monotonicity #315]: #317
#321 := [monotonicity #318]: #320
#324 := [quant-intro #321]: #323
#283 := (~ #259 #259)
#281 := (~ #256 #256)
#282 := [refl]: #281
#284 := [nnf-pos #282]: #283
#117 := (<= 0::Int #36)
#118 := (not #117)
#126 := (and #118 #111)
#129 := (or #114 #126)
#166 := (if #129 #58 #161)
#169 := (if #39 0::Int #166)
#172 := (if #40 #36 #169)
#175 := (= #57 #172)
#178 := (forall (vars (?v0 Int) (?v1 Int)) #175)
#260 := (iff #178 #259)
#257 := (iff #175 #256)
#254 := (= #172 #253)
#251 := (= #169 #250)
#248 := (= #166 #247)
#232 := (iff #129 #231)
#229 := (iff #126 #228)
#226 := (iff #118 #225)
#223 := (iff #117 #222)
#224 := [rewrite]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#249 := [monotonicity #233]: #248
#252 := [monotonicity #249]: #251
#255 := [monotonicity #252]: #254
#258 := [monotonicity #255]: #257
#261 := [quant-intro #258]: #260
#50 := (- #24)
#49 := (- #36)
#59 := (mod #49 #50)
#60 := (- #59)
#43 := (< 0::Int #24)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#61 := (if #47 #58 #60)
#62 := (if #39 0::Int #61)
#63 := (if #40 #36 #62)
#64 := (= #57 #63)
#65 := (forall (vars (?v0 Int) (?v1 Int)) #64)
#179 := (iff #65 #178)
#176 := (iff #64 #175)
#173 := (= #63 #172)
#170 := (= #62 #169)
#167 := (= #61 #166)
#164 := (= #60 #161)
#158 := (- #155)
#162 := (= #158 #161)
#163 := [rewrite]: #162
#159 := (= #60 #158)
#156 := (= #59 #155)
#137 := (= #50 #136)
#138 := [rewrite]: #137
#134 := (= #49 #133)
#135 := [rewrite]: #134
#157 := [monotonicity #135 #138]: #156
#160 := [monotonicity #157]: #159
#165 := [trans #160 #163]: #164
#130 := (iff #47 #129)
#127 := (iff #46 #126)
#112 := (iff #43 #111)
#113 := [rewrite]: #112
#119 := (iff #45 #118)
#123 := (iff #118 #118)
#121 := (iff #117 #117)
#122 := [rewrite]: #121
#124 := [monotonicity #122]: #123
#120 := [rewrite]: #119
#125 := [trans #120 #124]: #119
#128 := [monotonicity #125 #113]: #127
#115 := (iff #44 #114)
#108 := (iff #42 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#131 := [monotonicity #116 #128]: #130
#168 := [monotonicity #131 #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [quant-intro #177]: #179
#72 := [asserted]: #65
#181 := [mp #72 #180]: #178
#262 := [mp #181 #261]: #259
#285 := [mp~ #262 #284]: #259
#325 := [mp #285 #324]: #322
#356 := [mp #325 #355]: #353
#803 := [mp #356 #802]: #798
#650 := (not #798)
#651 := (or #650 #737)
#736 := (* -1::Int 1::Int)
#732 := (* -1::Int 3::Int)
#725 := (mod #732 #736)
#726 := (+ #12 #725)
#727 := (= #726 0::Int)
#734 := (mod 3::Int 1::Int)
#449 := (* -1::Int #734)
#731 := (+ #12 #449)
#735 := (= #731 0::Int)
#738 := (<= 1::Int 0::Int)
#453 := (>= 3::Int 0::Int)
#454 := (or #453 #738)
#455 := (not #454)
#741 := (<= 3::Int 0::Int)
#742 := (or #741 #738)
#452 := (not #742)
#733 := (or #452 #455)
#722 := (if #733 #735 #727)
#463 := (= 3::Int 0::Int)
#723 := (if #463 #737 #722)
#462 := (= #12 3::Int)
#740 := (= 1::Int 0::Int)
#728 := (if #740 #462 #723)
#652 := (or #650 #728)
#653 := (iff #652 #651)
#635 := (iff #651 #651)
#636 := [rewrite]: #635
#648 := (iff #728 #737)
#666 := (if false #462 #737)
#645 := (iff #666 #737)
#646 := [rewrite]: #645
#656 := (iff #728 #666)
#664 := (iff #723 #737)
#659 := (if false #737 #737)
#662 := (iff #659 #737)
#663 := [rewrite]: #662
#660 := (iff #723 #659)
#657 := (iff #722 #737)
#1 := true
#673 := (if true #737 #737)
#654 := (iff #673 #737)
#655 := [rewrite]: #654
#670 := (iff #722 #673)
#671 := (iff #727 #737)
#668 := (= #726 #12)
#694 := (+ #12 0::Int)
#685 := (= #694 #12)
#695 := [rewrite]: #685
#677 := (= #726 #694)
#680 := (= #725 0::Int)
#687 := -3::Int
#691 := (mod -3::Int -1::Int)
#678 := (= #691 0::Int)
#679 := [rewrite]: #678
#675 := (= #725 #691)
#690 := (= #736 -1::Int)
#684 := [rewrite]: #690
#688 := (= #732 -3::Int)
#689 := [rewrite]: #688
#676 := [monotonicity #689 #684]: #675
#681 := [trans #676 #679]: #680
#682 := [monotonicity #681]: #677
#669 := [trans #682 #695]: #668
#672 := [monotonicity #669]: #671
#693 := (iff #735 #737)
#696 := (= #731 #12)
#686 := (= #731 #694)
#705 := (= #449 0::Int)
#609 := (* -1::Int 0::Int)
#704 := (= #609 0::Int)
#701 := [rewrite]: #704
#610 := (= #449 #609)
#607 := (= #734 0::Int)
#608 := [rewrite]: #607
#611 := [monotonicity #608]: #610
#692 := [trans #611 #701]: #705
#683 := [monotonicity #692]: #686
#697 := [trans #683 #695]: #696
#698 := [monotonicity #697]: #693
#606 := (iff #733 true)
#711 := (or true false)
#595 := (iff #711 true)
#554 := [rewrite]: #595
#603 := (iff #733 #711)
#703 := (iff #455 false)
#420 := (not true)
#745 := (iff #420 false)
#408 := [rewrite]: #745
#699 := (iff #455 #420)
#702 := (iff #454 true)
#593 := (iff #454 #711)
#715 := (iff #738 false)
#716 := [rewrite]: #715
#710 := (iff #453 true)
#708 := [rewrite]: #710
#594 := [monotonicity #708 #716]: #593
#604 := [trans #594 #554]: #702
#700 := [monotonicity #604]: #699
#588 := [trans #700 #408]: #703
#707 := (iff #452 true)
#721 := (not false)
#553 := (iff #721 true)
#706 := [rewrite]: #553
#550 := (iff #452 #721)
#720 := (iff #742 false)
#717 := (or false false)
#713 := (iff #717 false)
#719 := [rewrite]: #713
#718 := (iff #742 #717)
#572 := (iff #741 false)
#573 := [rewrite]: #572
#712 := [monotonicity #573 #716]: #718
#714 := [trans #712 #719]: #720
#552 := [monotonicity #714]: #550
#709 := [trans #552 #706]: #707
#605 := [monotonicity #709 #588]: #603
#599 := [trans #605 #554]: #606
#674 := [monotonicity #599 #698 #672]: #670
#658 := [trans #674 #655]: #657
#730 := (iff #463 false)
#571 := [rewrite]: #730
#661 := [monotonicity #571 #658]: #660
#665 := [trans #661 #663]: #664
#729 := (iff #740 false)
#724 := [rewrite]: #729
#667 := [monotonicity #724 #665]: #656
#649 := [trans #667 #646]: #648
#639 := [monotonicity #649]: #653
#637 := [trans #639 #636]: #653
#647 := [quant-inst #9 #11]: #652
#640 := [mp #647 #637]: #651
#642 := [unit-resolution #640 #803]: #737
#643 := [monotonicity #642]: #16
#17 := (not #16)
#67 := [asserted]: #17
[unit-resolution #67 #643]: false
27d83ae74f367979c88ed057145dc22d3bf30f3d 325 0
unsat
#2 := false
#16 := 0::Int
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#10 := f10
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
#450 := (>= #11 0::Int)
#595 := (not #450)
#455 := (<= #11 0::Int)
#551 := (not #455)
#703 := (or #551 #595)
#667 := (not #703)
decl f5 :: (-> S4 Int Int)
#13 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 1::Int)
#454 := (= #14 0::Int)
#648 := (not #454)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#17 := (f3 f4 0::Int)
#15 := (f3 f4 #14)
#18 := (= #15 #17)
#364 := [hypothesis]: #454
#740 := [monotonicity #364]: #18
#19 := (not #18)
#68 := [asserted]: #19
#741 := [unit-resolution #68 #740]: false
#463 := [lemma #741]: #648
#133 := -1::Int
#723 := (* -1::Int #11)
#696 := (mod #723 -1::Int)
#694 := (+ #14 #696)
#689 := (= #694 0::Int)
#685 := (if #703 #454 #689)
#453 := (= #11 0::Int)
#642 := (not #453)
#635 := (or #642 #454)
#677 := (if #453 #454 #685)
#25 := (:var 0 Int)
#37 := (:var 1 Int)
#57 := (f6 f7 #37)
#58 := (f5 #57 #25)
#798 := (pattern #58)
#137 := (* -1::Int #25)
#134 := (* -1::Int #37)
#156 := (mod #134 #137)
#347 := (+ #58 #156)
#348 := (= #347 0::Int)
#59 := (mod #37 #25)
#344 := (* -1::Int #59)
#345 := (+ #58 #344)
#346 := (= #345 0::Int)
#111 := (<= #25 0::Int)
#223 := (>= #37 0::Int)
#291 := (or #223 #111)
#292 := (not #291)
#107 := (<= #37 0::Int)
#287 := (or #107 #111)
#288 := (not #287)
#295 := (or #288 #292)
#349 := (if #295 #346 #348)
#343 := (= #58 0::Int)
#40 := (= #37 0::Int)
#350 := (if #40 #343 #349)
#342 := (= #58 #37)
#41 := (= #25 0::Int)
#351 := (if #41 #342 #350)
#799 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #798) #351)
#354 := (forall (vars (?v0 Int) (?v1 Int)) #351)
#802 := (iff #354 #799)
#800 := (iff #351 #351)
#801 := [refl]: #800
#803 := [quant-intro #801]: #802
#162 := (* -1::Int #156)
#311 := (if #295 #59 #162)
#314 := (if #40 0::Int #311)
#317 := (if #41 #37 #314)
#320 := (= #58 #317)
#323 := (forall (vars (?v0 Int) (?v1 Int)) #320)
#355 := (iff #323 #354)
#352 := (iff #320 #351)
#353 := [rewrite]: #352
#356 := [quant-intro #353]: #355
#112 := (not #111)
#226 := (not #223)
#229 := (and #226 #112)
#108 := (not #107)
#115 := (and #108 #112)
#232 := (or #115 #229)
#248 := (if #232 #59 #162)
#251 := (if #40 0::Int #248)
#254 := (if #41 #37 #251)
#257 := (= #58 #254)
#260 := (forall (vars (?v0 Int) (?v1 Int)) #257)
#324 := (iff #260 #323)
#321 := (iff #257 #320)
#318 := (= #254 #317)
#315 := (= #251 #314)
#312 := (= #248 #311)
#296 := (iff #232 #295)
#293 := (iff #229 #292)
#294 := [rewrite]: #293
#289 := (iff #115 #288)
#290 := [rewrite]: #289
#297 := [monotonicity #290 #294]: #296
#313 := [monotonicity #297]: #312
#316 := [monotonicity #313]: #315
#319 := [monotonicity #316]: #318
#322 := [monotonicity #319]: #321
#325 := [quant-intro #322]: #324
#284 := (~ #260 #260)
#282 := (~ #257 #257)
#283 := [refl]: #282
#285 := [nnf-pos #283]: #284
#118 := (<= 0::Int #37)
#119 := (not #118)
#127 := (and #119 #112)
#130 := (or #115 #127)
#167 := (if #130 #59 #162)
#170 := (if #40 0::Int #167)
#173 := (if #41 #37 #170)
#176 := (= #58 #173)
#179 := (forall (vars (?v0 Int) (?v1 Int)) #176)
#261 := (iff #179 #260)
#258 := (iff #176 #257)
#255 := (= #173 #254)
#252 := (= #170 #251)
#249 := (= #167 #248)
#233 := (iff #130 #232)
#230 := (iff #127 #229)
#227 := (iff #119 #226)
#224 := (iff #118 #223)
#225 := [rewrite]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#250 := [monotonicity #234]: #249
#253 := [monotonicity #250]: #252
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [quant-intro #259]: #261
#51 := (- #25)
#50 := (- #37)
#60 := (mod #50 #51)
#61 := (- #60)
#44 := (< 0::Int #25)
#46 := (< #37 0::Int)
#47 := (and #46 #44)
#43 := (< 0::Int #37)
#45 := (and #43 #44)
#48 := (or #45 #47)
#62 := (if #48 #59 #61)
#63 := (if #40 0::Int #62)
#64 := (if #41 #37 #63)
#65 := (= #58 #64)
#66 := (forall (vars (?v0 Int) (?v1 Int)) #65)
#180 := (iff #66 #179)
#177 := (iff #65 #176)
#174 := (= #64 #173)
#171 := (= #63 #170)
#168 := (= #62 #167)
#165 := (= #61 #162)
#159 := (- #156)
#163 := (= #159 #162)
#164 := [rewrite]: #163
#160 := (= #61 #159)
#157 := (= #60 #156)
#138 := (= #51 #137)
#139 := [rewrite]: #138
#135 := (= #50 #134)
#136 := [rewrite]: #135
#158 := [monotonicity #136 #139]: #157
#161 := [monotonicity #158]: #160
#166 := [trans #161 #164]: #165
#131 := (iff #48 #130)
#128 := (iff #47 #127)
#113 := (iff #44 #112)
#114 := [rewrite]: #113
#120 := (iff #46 #119)
#124 := (iff #119 #119)
#122 := (iff #118 #118)
#123 := [rewrite]: #122
#125 := [monotonicity #123]: #124
#121 := [rewrite]: #120
#126 := [trans #121 #125]: #120
#129 := [monotonicity #126 #114]: #128
#116 := (iff #45 #115)
#109 := (iff #43 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#132 := [monotonicity #117 #129]: #131
#169 := [monotonicity #132 #166]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [quant-intro #178]: #180
#73 := [asserted]: #66
#182 := [mp #73 #181]: #179
#263 := [mp #182 #262]: #260
#286 := [mp~ #263 #285]: #260
#326 := [mp #286 #325]: #323
#357 := [mp #326 #356]: #354
#804 := [mp #357 #803]: #799
#673 := (not #799)
#674 := (or #673 #677)
#724 := (* -1::Int 1::Int)
#729 := (mod #723 #724)
#730 := (+ #14 #729)
#725 := (= #730 0::Int)
#737 := (mod #11 1::Int)
#726 := (* -1::Int #737)
#727 := (+ #14 #726)
#728 := (= #727 0::Int)
#456 := (<= 1::Int 0::Int)
#732 := (or #450 #456)
#736 := (not #732)
#734 := (or #455 #456)
#735 := (not #734)
#733 := (or #735 #736)
#731 := (if #733 #728 #725)
#572 := (if #453 #454 #731)
#743 := (= #14 #11)
#739 := (= 1::Int 0::Int)
#573 := (if #739 #743 #572)
#671 := (or #673 #573)
#655 := (iff #671 #674)
#658 := (iff #674 #674)
#659 := [rewrite]: #658
#670 := (iff #573 #677)
#681 := (if false #743 #677)
#683 := (iff #681 #677)
#669 := [rewrite]: #683
#682 := (iff #573 #681)
#679 := (iff #572 #677)
#692 := (iff #731 #685)
#690 := (iff #725 #689)
#699 := (= #730 #694)
#697 := (= #729 #696)
#684 := (= #724 -1::Int)
#686 := [rewrite]: #684
#698 := [monotonicity #686]: #697
#688 := [monotonicity #698]: #699
#691 := [monotonicity #688]: #690
#695 := (iff #728 #454)
#706 := (= #727 #14)
#610 := (+ #14 0::Int)
#705 := (= #610 #14)
#702 := [rewrite]: #705
#611 := (= #727 #610)
#608 := (= #726 0::Int)
#589 := (* -1::Int 0::Int)
#607 := (= #589 0::Int)
#600 := [rewrite]: #607
#604 := (= #726 #589)
#701 := (= #737 0::Int)
#704 := [rewrite]: #701
#606 := [monotonicity #704]: #604
#609 := [trans #606 #600]: #608
#612 := [monotonicity #609]: #611
#693 := [trans #612 #702]: #706
#687 := [monotonicity #693]: #695
#605 := (iff #733 #703)
#596 := (iff #736 #595)
#712 := (iff #732 #450)
#707 := (or #450 false)
#711 := (iff #707 #450)
#709 := [rewrite]: #711
#708 := (iff #732 #707)
#717 := (iff #456 false)
#718 := [rewrite]: #717
#710 := [monotonicity #718]: #708
#594 := [trans #710 #709]: #712
#555 := [monotonicity #594]: #596
#553 := (iff #735 #551)
#715 := (iff #734 #455)
#719 := (or #455 false)
#720 := (iff #719 #455)
#721 := [rewrite]: #720
#713 := (iff #734 #719)
#714 := [monotonicity #718]: #713
#722 := [trans #714 #721]: #715
#554 := [monotonicity #722]: #553
#700 := [monotonicity #554 #555]: #605
#676 := [monotonicity #700 #687 #691]: #692
#680 := [monotonicity #676]: #679
#574 := (iff #739 false)
#716 := [rewrite]: #574
#678 := [monotonicity #716 #680]: #682
#672 := [trans #678 #669]: #670
#656 := [monotonicity #672]: #655
#660 := [trans #656 #659]: #655
#675 := [quant-inst #11 #13]: #671
#661 := [mp #675 #660]: #674
#627 := [unit-resolution #661 #804]: #677
#641 := (not #677)
#643 := (or #641 #642 #454)
#644 := [def-axiom]: #643
#615 := [unit-resolution #644 #627]: #635
#540 := [unit-resolution #615 #463]: #642
#616 := (or #453 #685)
#639 := (or #641 #453 #685)
#645 := [def-axiom]: #639
#597 := [unit-resolution #645 #627]: #616
#541 := [unit-resolution #597 #540]: #685
#649 := (not #685)
#650 := (or #649 #667 #454)
#651 := [def-axiom]: #650
#543 := [unit-resolution #651 #541 #463]: #667
#665 := (or #703 #450)
#666 := [def-axiom]: #665
#544 := [unit-resolution #666 #543]: #450
#663 := (or #703 #455)
#664 := [def-axiom]: #663
#545 := [unit-resolution #664 #543]: #455
#388 := (or #453 #551 #595)
#546 := [th-lemma arith triangle-eq]: #388
[unit-resolution #546 #540 #545 #544]: false
33c9f7f66858ac0e41501cb38daaa8a8b9d12fcd 311 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#11 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 0::Int)
#12 := (f5 #10 3::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#462 := (= #12 0::Int)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f6 f7 #35)
#56 := (f5 #55 #23)
#797 := (pattern #56)
#131 := -1::Int
#135 := (* -1::Int #23)
#132 := (* -1::Int #35)
#154 := (mod #132 #135)
#345 := (+ #56 #154)
#346 := (= #345 0::Int)
#57 := (mod #35 #23)
#342 := (* -1::Int #57)
#343 := (+ #56 #342)
#344 := (= #343 0::Int)
#109 := (<= #23 0::Int)
#221 := (>= #35 0::Int)
#289 := (or #221 #109)
#290 := (not #289)
#105 := (<= #35 0::Int)
#285 := (or #105 #109)
#286 := (not #285)
#293 := (or #286 #290)
#347 := (if #293 #344 #346)
#341 := (= #56 0::Int)
#38 := (= #35 0::Int)
#348 := (if #38 #341 #347)
#340 := (= #56 #35)
#39 := (= #23 0::Int)
#349 := (if #39 #340 #348)
#798 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #797) #349)
#352 := (forall (vars (?v0 Int) (?v1 Int)) #349)
#801 := (iff #352 #798)
#799 := (iff #349 #349)
#800 := [refl]: #799
#802 := [quant-intro #800]: #801
#160 := (* -1::Int #154)
#309 := (if #293 #57 #160)
#312 := (if #38 0::Int #309)
#315 := (if #39 #35 #312)
#318 := (= #56 #315)
#321 := (forall (vars (?v0 Int) (?v1 Int)) #318)
#353 := (iff #321 #352)
#350 := (iff #318 #349)
#351 := [rewrite]: #350
#354 := [quant-intro #351]: #353
#110 := (not #109)
#224 := (not #221)
#227 := (and #224 #110)
#106 := (not #105)
#113 := (and #106 #110)
#230 := (or #113 #227)
#246 := (if #230 #57 #160)
#249 := (if #38 0::Int #246)
#252 := (if #39 #35 #249)
#255 := (= #56 #252)
#258 := (forall (vars (?v0 Int) (?v1 Int)) #255)
#322 := (iff #258 #321)
#319 := (iff #255 #318)
#316 := (= #252 #315)
#313 := (= #249 #312)
#310 := (= #246 #309)
#294 := (iff #230 #293)
#291 := (iff #227 #290)
#292 := [rewrite]: #291
#287 := (iff #113 #286)
#288 := [rewrite]: #287
#295 := [monotonicity #288 #292]: #294
#311 := [monotonicity #295]: #310
#314 := [monotonicity #311]: #313
#317 := [monotonicity #314]: #316
#320 := [monotonicity #317]: #319
#323 := [quant-intro #320]: #322
#282 := (~ #258 #258)
#280 := (~ #255 #255)
#281 := [refl]: #280
#283 := [nnf-pos #281]: #282
#116 := (<= 0::Int #35)
#117 := (not #116)
#125 := (and #117 #110)
#128 := (or #113 #125)
#165 := (if #128 #57 #160)
#168 := (if #38 0::Int #165)
#171 := (if #39 #35 #168)
#174 := (= #56 #171)
#177 := (forall (vars (?v0 Int) (?v1 Int)) #174)
#259 := (iff #177 #258)
#256 := (iff #174 #255)
#253 := (= #171 #252)
#250 := (= #168 #249)
#247 := (= #165 #246)
#231 := (iff #128 #230)
#228 := (iff #125 #227)
#225 := (iff #117 #224)
#222 := (iff #116 #221)
#223 := [rewrite]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#248 := [monotonicity #232]: #247
#251 := [monotonicity #248]: #250
#254 := [monotonicity #251]: #253
#257 := [monotonicity #254]: #256
#260 := [quant-intro #257]: #259
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#178 := (iff #64 #177)
#175 := (iff #63 #174)
#172 := (= #62 #171)
#169 := (= #61 #168)
#166 := (= #60 #165)
#163 := (= #59 #160)
#157 := (- #154)
#161 := (= #157 #160)
#162 := [rewrite]: #161
#158 := (= #59 #157)
#155 := (= #58 #154)
#136 := (= #49 #135)
#137 := [rewrite]: #136
#133 := (= #48 #132)
#134 := [rewrite]: #133
#156 := [monotonicity #134 #137]: #155
#159 := [monotonicity #156]: #158
#164 := [trans #159 #162]: #163
#129 := (iff #46 #128)
#126 := (iff #45 #125)
#111 := (iff #42 #110)
#112 := [rewrite]: #111
#118 := (iff #44 #117)
#122 := (iff #117 #117)
#120 := (iff #116 #116)
#121 := [rewrite]: #120
#123 := [monotonicity #121]: #122
#119 := [rewrite]: #118
#124 := [trans #119 #123]: #118
#127 := [monotonicity #124 #112]: #126
#114 := (iff #43 #113)
#107 := (iff #41 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#130 := [monotonicity #115 #127]: #129
#167 := [monotonicity #130 #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [quant-intro #176]: #178
#71 := [asserted]: #64
#180 := [mp #71 #179]: #177
#261 := [mp #180 #260]: #258
#284 := [mp~ #261 #283]: #258
#324 := [mp #284 #323]: #321
#355 := [mp #324 #354]: #352
#803 := [mp #355 #802]: #798
#660 := (not #798)
#661 := (or #660 #462)
#735 := (* -1::Int 3::Int)
#731 := (* -1::Int 0::Int)
#732 := (mod #731 #735)
#736 := (+ #12 #732)
#725 := (= #736 0::Int)
#455 := (mod 0::Int 3::Int)
#733 := (* -1::Int #455)
#734 := (+ #12 #733)
#449 := (= #734 0::Int)
#741 := (<= 3::Int 0::Int)
#551 := (>= 0::Int 0::Int)
#452 := (or #551 #741)
#453 := (not #452)
#737 := (<= 0::Int 0::Int)
#738 := (or #737 #741)
#742 := (not #738)
#454 := (or #742 #453)
#726 := (if #454 #449 #725)
#463 := (= 0::Int 0::Int)
#727 := (if #463 #462 #726)
#740 := (= 3::Int 0::Int)
#722 := (if #740 #462 #727)
#662 := (or #660 #722)
#664 := (iff #662 #661)
#666 := (iff #661 #661)
#656 := [rewrite]: #666
#658 := (iff #722 #462)
#678 := (if false #462 #462)
#681 := (iff #678 #462)
#677 := [rewrite]: #681
#655 := (iff #722 #678)
#674 := (iff #727 #462)
#1 := true
#669 := (if true #462 #462)
#673 := (iff #669 #462)
#670 := [rewrite]: #673
#671 := (iff #727 #669)
#682 := (iff #726 #462)
#679 := (iff #726 #678)
#675 := (iff #725 #462)
#684 := (= #736 #12)
#608 := (+ #12 0::Int)
#611 := (= #608 #12)
#704 := [rewrite]: #611
#689 := (= #736 #608)
#687 := (= #732 0::Int)
#686 := -3::Int
#695 := (mod 0::Int -3::Int)
#693 := (= #695 0::Int)
#698 := [rewrite]: #693
#696 := (= #732 #695)
#683 := (= #735 -3::Int)
#685 := [rewrite]: #683
#605 := (= #731 0::Int)
#606 := [rewrite]: #605
#697 := [monotonicity #606 #685]: #696
#688 := [trans #697 #698]: #687
#690 := [monotonicity #688]: #689
#691 := [trans #690 #704]: #684
#676 := [monotonicity #691]: #675
#692 := (iff #449 #462)
#701 := (= #734 #12)
#609 := (= #734 #608)
#599 := (= #733 0::Int)
#588 := (= #733 #731)
#700 := (= #455 0::Int)
#703 := [rewrite]: #700
#603 := [monotonicity #703]: #588
#607 := [trans #603 #606]: #599
#610 := [monotonicity #607]: #609
#705 := [trans #610 #704]: #701
#694 := [monotonicity #705]: #692
#604 := (iff #454 false)
#593 := (or false false)
#554 := (iff #593 false)
#702 := [rewrite]: #554
#594 := (iff #454 #593)
#708 := (iff #453 false)
#420 := (not true)
#745 := (iff #420 false)
#408 := [rewrite]: #745
#709 := (iff #453 #420)
#706 := (iff #452 true)
#715 := (or true false)
#718 := (iff #715 true)
#712 := [rewrite]: #718
#552 := (iff #452 #715)
#572 := (iff #741 false)
#573 := [rewrite]: #572
#424 := (iff #551 true)
#760 := [rewrite]: #424
#553 := [monotonicity #760 #573]: #552
#707 := [trans #553 #712]: #706
#710 := [monotonicity #707]: #709
#711 := [trans #710 #408]: #708
#721 := (iff #742 false)
#720 := (iff #742 #420)
#713 := (iff #738 true)
#716 := (iff #738 #715)
#730 := (iff #737 true)
#571 := [rewrite]: #730
#717 := [monotonicity #571 #573]: #716
#719 := [trans #717 #712]: #713
#714 := [monotonicity #719]: #720
#550 := [trans #714 #408]: #721
#595 := [monotonicity #550 #711]: #594
#699 := [trans #595 #702]: #604
#680 := [monotonicity #699 #694 #676]: #679
#668 := [trans #680 #677]: #682
#729 := (iff #463 true)
#724 := [rewrite]: #729
#672 := [monotonicity #724 #668]: #671
#654 := [trans #672 #670]: #674
#723 := (iff #740 false)
#728 := [rewrite]: #723
#657 := [monotonicity #728 #654]: #655
#659 := [trans #657 #677]: #658
#665 := [monotonicity #659]: #664
#667 := [trans #665 #656]: #664
#663 := [quant-inst #9 #11]: #662
#645 := [mp #663 #667]: #661
#648 := [unit-resolution #645 #803]: #462
#649 := [monotonicity #648]: #15
#16 := (not #15)
#66 := [asserted]: #16
[unit-resolution #66 #649]: false
b6547dc3ec1930e52fec661a7dc0e7e45f2f11a0 337 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 1::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 1::Int)
decl f5 :: (-> S4 Int Int)
#11 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 1::Int)
#12 := (f5 #10 3::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#463 := (= #12 1::Int)
#24 := (:var 0 Int)
#36 := (:var 1 Int)
#56 := (f6 f7 #36)
#57 := (f5 #56 #24)
#797 := (pattern #57)
#23 := 0::Int
#132 := -1::Int
#136 := (* -1::Int #24)
#133 := (* -1::Int #36)
#155 := (mod #133 #136)
#346 := (+ #57 #155)
#347 := (= #346 0::Int)
#58 := (mod #36 #24)
#343 := (* -1::Int #58)
#344 := (+ #57 #343)
#345 := (= #344 0::Int)
#110 := (<= #24 0::Int)
#222 := (>= #36 0::Int)
#290 := (or #222 #110)
#291 := (not #290)
#106 := (<= #36 0::Int)
#286 := (or #106 #110)
#287 := (not #286)
#294 := (or #287 #291)
#348 := (if #294 #345 #347)
#342 := (= #57 0::Int)
#39 := (= #36 0::Int)
#349 := (if #39 #342 #348)
#341 := (= #57 #36)
#40 := (= #24 0::Int)
#350 := (if #40 #341 #349)
#798 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #797) #350)
#353 := (forall (vars (?v0 Int) (?v1 Int)) #350)
#801 := (iff #353 #798)
#799 := (iff #350 #350)
#800 := [refl]: #799
#802 := [quant-intro #800]: #801
#161 := (* -1::Int #155)
#310 := (if #294 #58 #161)
#313 := (if #39 0::Int #310)
#316 := (if #40 #36 #313)
#319 := (= #57 #316)
#322 := (forall (vars (?v0 Int) (?v1 Int)) #319)
#354 := (iff #322 #353)
#351 := (iff #319 #350)
#352 := [rewrite]: #351
#355 := [quant-intro #352]: #354
#111 := (not #110)
#225 := (not #222)
#228 := (and #225 #111)
#107 := (not #106)
#114 := (and #107 #111)
#231 := (or #114 #228)
#247 := (if #231 #58 #161)
#250 := (if #39 0::Int #247)
#253 := (if #40 #36 #250)
#256 := (= #57 #253)
#259 := (forall (vars (?v0 Int) (?v1 Int)) #256)
#323 := (iff #259 #322)
#320 := (iff #256 #319)
#317 := (= #253 #316)
#314 := (= #250 #313)
#311 := (= #247 #310)
#295 := (iff #231 #294)
#292 := (iff #228 #291)
#293 := [rewrite]: #292
#288 := (iff #114 #287)
#289 := [rewrite]: #288
#296 := [monotonicity #289 #293]: #295
#312 := [monotonicity #296]: #311
#315 := [monotonicity #312]: #314
#318 := [monotonicity #315]: #317
#321 := [monotonicity #318]: #320
#324 := [quant-intro #321]: #323
#283 := (~ #259 #259)
#281 := (~ #256 #256)
#282 := [refl]: #281
#284 := [nnf-pos #282]: #283
#117 := (<= 0::Int #36)
#118 := (not #117)
#126 := (and #118 #111)
#129 := (or #114 #126)
#166 := (if #129 #58 #161)
#169 := (if #39 0::Int #166)
#172 := (if #40 #36 #169)
#175 := (= #57 #172)
#178 := (forall (vars (?v0 Int) (?v1 Int)) #175)
#260 := (iff #178 #259)
#257 := (iff #175 #256)
#254 := (= #172 #253)
#251 := (= #169 #250)
#248 := (= #166 #247)
#232 := (iff #129 #231)
#229 := (iff #126 #228)
#226 := (iff #118 #225)
#223 := (iff #117 #222)
#224 := [rewrite]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#249 := [monotonicity #233]: #248
#252 := [monotonicity #249]: #251
#255 := [monotonicity #252]: #254
#258 := [monotonicity #255]: #257
#261 := [quant-intro #258]: #260
#50 := (- #24)
#49 := (- #36)
#59 := (mod #49 #50)
#60 := (- #59)
#43 := (< 0::Int #24)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#61 := (if #47 #58 #60)
#62 := (if #39 0::Int #61)
#63 := (if #40 #36 #62)
#64 := (= #57 #63)
#65 := (forall (vars (?v0 Int) (?v1 Int)) #64)
#179 := (iff #65 #178)
#176 := (iff #64 #175)
#173 := (= #63 #172)
#170 := (= #62 #169)
#167 := (= #61 #166)
#164 := (= #60 #161)
#158 := (- #155)
#162 := (= #158 #161)
#163 := [rewrite]: #162
#159 := (= #60 #158)
#156 := (= #59 #155)
#137 := (= #50 #136)
#138 := [rewrite]: #137
#134 := (= #49 #133)
#135 := [rewrite]: #134
#157 := [monotonicity #135 #138]: #156
#160 := [monotonicity #157]: #159
#165 := [trans #160 #163]: #164
#130 := (iff #47 #129)
#127 := (iff #46 #126)
#112 := (iff #43 #111)
#113 := [rewrite]: #112
#119 := (iff #45 #118)
#123 := (iff #118 #118)
#121 := (iff #117 #117)
#122 := [rewrite]: #121
#124 := [monotonicity #122]: #123
#120 := [rewrite]: #119
#125 := [trans #120 #124]: #119
#128 := [monotonicity #125 #113]: #127
#115 := (iff #44 #114)
#108 := (iff #42 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#131 := [monotonicity #116 #128]: #130
#168 := [monotonicity #131 #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [quant-intro #177]: #179
#72 := [asserted]: #65
#181 := [mp #72 #180]: #178
#262 := [mp #181 #261]: #259
#285 := [mp~ #262 #284]: #259
#325 := [mp #285 #324]: #322
#356 := [mp #325 #355]: #353
#803 := [mp #356 #802]: #798
#638 := (not #798)
#644 := (or #638 #463)
#736 := (* -1::Int 3::Int)
#732 := (* -1::Int 1::Int)
#725 := (mod #732 #736)
#726 := (+ #12 #725)
#727 := (= #726 0::Int)
#734 := (mod 1::Int 3::Int)
#449 := (* -1::Int #734)
#731 := (+ #12 #449)
#735 := (= #731 0::Int)
#742 := (<= 3::Int 0::Int)
#551 := (>= 1::Int 0::Int)
#454 := (or #551 #742)
#455 := (not #454)
#738 := (<= 1::Int 0::Int)
#452 := (or #738 #742)
#453 := (not #452)
#733 := (or #453 #455)
#722 := (if #733 #735 #727)
#741 := (= #12 0::Int)
#737 := (= 1::Int 0::Int)
#723 := (if #737 #741 #722)
#462 := (= 3::Int 0::Int)
#728 := (if #462 #463 #723)
#617 := (or #638 #728)
#619 := (iff #617 #644)
#623 := (iff #644 #644)
#624 := [rewrite]: #623
#642 := (iff #728 #463)
#635 := (if false #463 #463)
#640 := (iff #635 #463)
#641 := [rewrite]: #640
#636 := (iff #728 #635)
#653 := (iff #723 #463)
#649 := (if false #741 #463)
#652 := (iff #649 #463)
#647 := [rewrite]: #652
#650 := (iff #723 #649)
#646 := (iff #722 #463)
#659 := -2::Int
#660 := (= #12 -2::Int)
#1 := true
#665 := (if true #463 #660)
#667 := (iff #665 #463)
#645 := [rewrite]: #667
#666 := (iff #722 #665)
#663 := (iff #727 #660)
#679 := 2::Int
#672 := (+ 2::Int #12)
#655 := (= #672 0::Int)
#661 := (iff #655 #660)
#662 := [rewrite]: #661
#657 := (iff #727 #655)
#674 := (= #726 #672)
#668 := (+ #12 2::Int)
#673 := (= #668 #672)
#670 := [rewrite]: #673
#669 := (= #726 #668)
#677 := (= #725 2::Int)
#690 := -3::Int
#675 := (mod -1::Int -3::Int)
#680 := (= #675 2::Int)
#681 := [rewrite]: #680
#676 := (= #725 #675)
#684 := (= #736 -3::Int)
#691 := [rewrite]: #684
#609 := (= #732 -1::Int)
#610 := [rewrite]: #609
#678 := [monotonicity #610 #691]: #676
#682 := [trans #678 #681]: #677
#671 := [monotonicity #682]: #669
#654 := [trans #671 #670]: #674
#658 := [monotonicity #654]: #657
#664 := [trans #658 #662]: #663
#688 := (iff #735 #463)
#694 := (+ -1::Int #12)
#696 := (= #694 0::Int)
#698 := (iff #696 #463)
#687 := [rewrite]: #698
#697 := (iff #735 #696)
#685 := (= #731 #694)
#701 := (+ #12 -1::Int)
#686 := (= #701 #694)
#683 := [rewrite]: #686
#705 := (= #731 #701)
#611 := (= #449 -1::Int)
#607 := (= #449 #732)
#606 := (= #734 1::Int)
#599 := [rewrite]: #606
#608 := [monotonicity #599]: #607
#704 := [trans #608 #610]: #611
#692 := [monotonicity #704]: #705
#695 := [trans #692 #683]: #685
#693 := [monotonicity #695]: #697
#689 := [trans #693 #687]: #688
#603 := (iff #733 true)
#710 := (or true false)
#593 := (iff #710 true)
#594 := [rewrite]: #593
#703 := (iff #733 #710)
#699 := (iff #455 false)
#420 := (not true)
#745 := (iff #420 false)
#408 := [rewrite]: #745
#702 := (iff #455 #420)
#595 := (iff #454 true)
#708 := (iff #454 #710)
#715 := (iff #742 false)
#716 := [rewrite]: #715
#424 := (iff #551 true)
#760 := [rewrite]: #424
#711 := [monotonicity #760 #716]: #708
#554 := [trans #711 #594]: #595
#604 := [monotonicity #554]: #702
#700 := [trans #604 #408]: #699
#707 := (iff #453 true)
#721 := (not false)
#553 := (iff #721 true)
#706 := [rewrite]: #553
#550 := (iff #453 #721)
#720 := (iff #452 false)
#717 := (or false false)
#713 := (iff #717 false)
#719 := [rewrite]: #713
#718 := (iff #452 #717)
#572 := (iff #738 false)
#573 := [rewrite]: #572
#712 := [monotonicity #573 #716]: #718
#714 := [trans #712 #719]: #720
#552 := [monotonicity #714]: #550
#709 := [trans #552 #706]: #707
#588 := [monotonicity #709 #700]: #703
#605 := [trans #588 #594]: #603
#656 := [monotonicity #605 #689 #664]: #666
#648 := [trans #656 #645]: #646
#730 := (iff #737 false)
#571 := [rewrite]: #730
#651 := [monotonicity #571 #648]: #650
#639 := [trans #651 #647]: #653
#729 := (iff #462 false)
#724 := [rewrite]: #729
#637 := [monotonicity #724 #639]: #636
#643 := [trans #637 #641]: #642
#512 := [monotonicity #643]: #619
#625 := [trans #512 #624]: #619
#618 := [quant-inst #9 #11]: #617
#630 := [mp #618 #625]: #644
#628 := [unit-resolution #630 #803]: #463
#631 := [monotonicity #628]: #15
#16 := (not #15)
#67 := [asserted]: #16
[unit-resolution #67 #631]: false
5598c417fdf3bd603925adc251a35a82567199b0 312 0
unsat
#2 := false
decl f3 :: (-> S2 Int S3)
#13 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#9 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#10 := (f6 f7 3::Int)
#11 := (f5 #10 3::Int)
#12 := (f3 f4 #11)
#15 := (= #12 #14)
#463 := (= #11 0::Int)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f6 f7 #35)
#56 := (f5 #55 #23)
#797 := (pattern #56)
#131 := -1::Int
#135 := (* -1::Int #23)
#132 := (* -1::Int #35)
#154 := (mod #132 #135)
#345 := (+ #56 #154)
#346 := (= #345 0::Int)
#57 := (mod #35 #23)
#342 := (* -1::Int #57)
#343 := (+ #56 #342)
#344 := (= #343 0::Int)
#109 := (<= #23 0::Int)
#221 := (>= #35 0::Int)
#289 := (or #221 #109)
#290 := (not #289)
#105 := (<= #35 0::Int)
#285 := (or #105 #109)
#286 := (not #285)
#293 := (or #286 #290)
#347 := (if #293 #344 #346)
#341 := (= #56 0::Int)
#38 := (= #35 0::Int)
#348 := (if #38 #341 #347)
#340 := (= #56 #35)
#39 := (= #23 0::Int)
#349 := (if #39 #340 #348)
#798 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #797) #349)
#352 := (forall (vars (?v0 Int) (?v1 Int)) #349)
#801 := (iff #352 #798)
#799 := (iff #349 #349)
#800 := [refl]: #799
#802 := [quant-intro #800]: #801
#160 := (* -1::Int #154)
#309 := (if #293 #57 #160)
#312 := (if #38 0::Int #309)
#315 := (if #39 #35 #312)
#318 := (= #56 #315)
#321 := (forall (vars (?v0 Int) (?v1 Int)) #318)
#353 := (iff #321 #352)
#350 := (iff #318 #349)
#351 := [rewrite]: #350
#354 := [quant-intro #351]: #353
#110 := (not #109)
#224 := (not #221)
#227 := (and #224 #110)
#106 := (not #105)
#113 := (and #106 #110)
#230 := (or #113 #227)
#246 := (if #230 #57 #160)
#249 := (if #38 0::Int #246)
#252 := (if #39 #35 #249)
#255 := (= #56 #252)
#258 := (forall (vars (?v0 Int) (?v1 Int)) #255)
#322 := (iff #258 #321)
#319 := (iff #255 #318)
#316 := (= #252 #315)
#313 := (= #249 #312)
#310 := (= #246 #309)
#294 := (iff #230 #293)
#291 := (iff #227 #290)
#292 := [rewrite]: #291
#287 := (iff #113 #286)
#288 := [rewrite]: #287
#295 := [monotonicity #288 #292]: #294
#311 := [monotonicity #295]: #310
#314 := [monotonicity #311]: #313
#317 := [monotonicity #314]: #316
#320 := [monotonicity #317]: #319
#323 := [quant-intro #320]: #322
#282 := (~ #258 #258)
#280 := (~ #255 #255)
#281 := [refl]: #280
#283 := [nnf-pos #281]: #282
#116 := (<= 0::Int #35)
#117 := (not #116)
#125 := (and #117 #110)
#128 := (or #113 #125)
#165 := (if #128 #57 #160)
#168 := (if #38 0::Int #165)
#171 := (if #39 #35 #168)
#174 := (= #56 #171)
#177 := (forall (vars (?v0 Int) (?v1 Int)) #174)
#259 := (iff #177 #258)
#256 := (iff #174 #255)
#253 := (= #171 #252)
#250 := (= #168 #249)
#247 := (= #165 #246)
#231 := (iff #128 #230)
#228 := (iff #125 #227)
#225 := (iff #117 #224)
#222 := (iff #116 #221)
#223 := [rewrite]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#248 := [monotonicity #232]: #247
#251 := [monotonicity #248]: #250
#254 := [monotonicity #251]: #253
#257 := [monotonicity #254]: #256
#260 := [quant-intro #257]: #259
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#178 := (iff #64 #177)
#175 := (iff #63 #174)
#172 := (= #62 #171)
#169 := (= #61 #168)
#166 := (= #60 #165)
#163 := (= #59 #160)
#157 := (- #154)
#161 := (= #157 #160)
#162 := [rewrite]: #161
#158 := (= #59 #157)
#155 := (= #58 #154)
#136 := (= #49 #135)
#137 := [rewrite]: #136
#133 := (= #48 #132)
#134 := [rewrite]: #133
#156 := [monotonicity #134 #137]: #155
#159 := [monotonicity #156]: #158
#164 := [trans #159 #162]: #163
#129 := (iff #46 #128)
#126 := (iff #45 #125)
#111 := (iff #42 #110)
#112 := [rewrite]: #111
#118 := (iff #44 #117)
#122 := (iff #117 #117)
#120 := (iff #116 #116)
#121 := [rewrite]: #120
#123 := [monotonicity #121]: #122
#119 := [rewrite]: #118
#124 := [trans #119 #123]: #118
#127 := [monotonicity #124 #112]: #126
#114 := (iff #43 #113)
#107 := (iff #41 #106)
#108 := [rewrite]: #107
#115 := [monotonicity #108 #112]: #114
#130 := [monotonicity #115 #127]: #129
#167 := [monotonicity #130 #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [quant-intro #176]: #178
#71 := [asserted]: #64
#180 := [mp #71 #179]: #177
#261 := [mp #180 #260]: #258
#284 := [mp~ #261 #283]: #258
#324 := [mp #284 #323]: #321
#355 := [mp #324 #354]: #352
#803 := [mp #355 #802]: #798
#664 := (not #798)
#665 := (or #664 #463)
#731 := (* -1::Int 3::Int)
#735 := (mod #731 #731)
#732 := (+ #11 #735)
#736 := (= #732 0::Int)
#455 := (mod 3::Int 3::Int)
#733 := (* -1::Int #455)
#734 := (+ #11 #733)
#449 := (= #734 0::Int)
#737 := (<= 3::Int 0::Int)
#742 := (>= 3::Int 0::Int)
#452 := (or #742 #737)
#453 := (not #452)
#741 := (or #737 #737)
#738 := (not #741)
#454 := (or #738 #453)
#725 := (if #454 #449 #736)
#740 := (= 3::Int 0::Int)
#726 := (if #740 #463 #725)
#462 := (= #11 3::Int)
#727 := (if #740 #462 #726)
#666 := (or #664 #727)
#667 := (iff #666 #665)
#646 := (iff #665 #665)
#648 := [rewrite]: #646
#662 := (iff #727 #463)
#657 := (if false #462 #463)
#660 := (iff #657 #463)
#661 := [rewrite]: #660
#658 := (iff #727 #657)
#654 := (iff #726 #463)
#671 := (if false #463 #463)
#670 := (iff #671 #463)
#674 := [rewrite]: #670
#672 := (iff #726 #671)
#668 := (iff #725 #463)
#1 := true
#679 := (if true #463 #463)
#677 := (iff #679 #463)
#682 := [rewrite]: #677
#680 := (iff #725 #679)
#676 := (iff #736 #463)
#691 := (= #732 #11)
#609 := (+ #11 0::Int)
#704 := (= #609 #11)
#701 := [rewrite]: #704
#690 := (= #732 #609)
#688 := (= #735 0::Int)
#683 := -3::Int
#696 := (mod -3::Int -3::Int)
#698 := (= #696 0::Int)
#687 := [rewrite]: #698
#697 := (= #735 #696)
#685 := (= #731 -3::Int)
#695 := [rewrite]: #685
#693 := [monotonicity #695 #695]: #697
#689 := [trans #693 #687]: #688
#684 := [monotonicity #689]: #690
#675 := [trans #684 #701]: #691
#678 := [monotonicity #675]: #676
#694 := (iff #449 #463)
#705 := (= #734 #11)
#610 := (= #734 #609)
#607 := (= #733 0::Int)
#588 := (* -1::Int 0::Int)
#606 := (= #588 0::Int)
#599 := [rewrite]: #606
#603 := (= #733 #588)
#700 := (= #455 0::Int)
#703 := [rewrite]: #700
#605 := [monotonicity #703]: #603
#608 := [trans #605 #599]: #607
#611 := [monotonicity #608]: #610
#692 := [trans #611 #701]: #705
#686 := [monotonicity #692]: #694
#604 := (iff #454 true)
#552 := (or true false)
#707 := (iff #552 true)
#709 := [rewrite]: #707
#554 := (iff #454 #552)
#594 := (iff #453 false)
#420 := (not true)
#745 := (iff #420 false)
#408 := [rewrite]: #745
#711 := (iff #453 #420)
#710 := (iff #452 true)
#553 := (iff #452 #552)
#728 := (iff #737 false)
#729 := [rewrite]: #728
#721 := (iff #742 true)
#550 := [rewrite]: #721
#706 := [monotonicity #550 #729]: #553
#708 := [trans #706 #709]: #710
#593 := [monotonicity #708]: #711
#595 := [trans #593 #408]: #594
#720 := (iff #738 true)
#717 := (not false)
#713 := (iff #717 true)
#719 := [rewrite]: #713
#718 := (iff #738 #717)
#715 := (iff #741 false)
#724 := (or false false)
#572 := (iff #724 false)
#573 := [rewrite]: #572
#730 := (iff #741 #724)
#571 := [monotonicity #729 #729]: #730
#716 := [trans #571 #573]: #715
#712 := [monotonicity #716]: #718
#714 := [trans #712 #719]: #720
#702 := [monotonicity #714 #595]: #554
#699 := [trans #702 #709]: #604
#681 := [monotonicity #699 #686 #678]: #680
#669 := [trans #681 #682]: #668
#722 := (iff #740 false)
#723 := [rewrite]: #722
#673 := [monotonicity #723 #669]: #672
#655 := [trans #673 #674]: #654
#659 := [monotonicity #723 #655]: #658
#663 := [trans #659 #661]: #662
#645 := [monotonicity #663]: #667
#649 := [trans #645 #648]: #667
#656 := [quant-inst #9 #9]: #666
#650 := [mp #656 #649]: #665
#652 := [unit-resolution #650 #803]: #463
#647 := [monotonicity #652]: #15
#16 := (not #15)
#66 := [asserted]: #16
[unit-resolution #66 #647]: false
27ee577964e39eea43c2a96bf389faf26aa731a2 437 0
unsat
#2 := false
#12 := 3::Int
decl f6 :: (-> S4 S5 Int)
decl f8 :: S5
#9 := f8
decl f7 :: S4
#8 := f7
#10 := (f6 f7 f8)
#454 := (mod #10 3::Int)
#669 := (>= #454 3::Int)
#670 := (not #669)
#1 := true
#215 := [true-axiom]: true
#661 := (or false #670)
#662 := [th-lemma arith]: #661
#663 := [unit-resolution #662 #215]: #670
#22 := 0::Int
#148 := -1::Int
#786 := (* -1::Int #454)
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#11 := (f4 f5 #10)
#13 := (f3 #11 3::Int)
#787 := (+ #13 #786)
#573 := (<= #787 0::Int)
#788 := (= #787 0::Int)
#490 := -3::Int
#789 := (* -1::Int #10)
#761 := (mod #789 -3::Int)
#758 := (+ #13 #761)
#763 := (= #758 0::Int)
#442 := (>= #10 0::Int)
#778 := (not #442)
#469 := (<= #10 0::Int)
#772 := (not #469)
#487 := (or #772 #778)
#475 := (if #487 #788 #763)
#465 := (= #13 0::Int)
#468 := (= #10 0::Int)
#755 := (if #468 #465 #475)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f4 f5 #35)
#56 := (f3 #55 #23)
#818 := (pattern #56)
#152 := (* -1::Int #23)
#149 := (* -1::Int #35)
#171 := (mod #149 #152)
#366 := (+ #56 #171)
#367 := (= #366 0::Int)
#57 := (mod #35 #23)
#363 := (* -1::Int #57)
#364 := (+ #56 #363)
#365 := (= #364 0::Int)
#126 := (<= #23 0::Int)
#242 := (>= #35 0::Int)
#310 := (or #242 #126)
#311 := (not #310)
#122 := (<= #35 0::Int)
#306 := (or #122 #126)
#307 := (not #306)
#314 := (or #307 #311)
#368 := (if #314 #365 #367)
#362 := (= #56 0::Int)
#38 := (= #35 0::Int)
#369 := (if #38 #362 #368)
#361 := (= #56 #35)
#39 := (= #23 0::Int)
#370 := (if #39 #361 #369)
#819 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #818) #370)
#373 := (forall (vars (?v0 Int) (?v1 Int)) #370)
#822 := (iff #373 #819)
#820 := (iff #370 #370)
#821 := [refl]: #820
#823 := [quant-intro #821]: #822
#177 := (* -1::Int #171)
#330 := (if #314 #57 #177)
#333 := (if #38 0::Int #330)
#336 := (if #39 #35 #333)
#339 := (= #56 #336)
#342 := (forall (vars (?v0 Int) (?v1 Int)) #339)
#374 := (iff #342 #373)
#371 := (iff #339 #370)
#372 := [rewrite]: #371
#375 := [quant-intro #372]: #374
#127 := (not #126)
#245 := (not #242)
#248 := (and #245 #127)
#123 := (not #122)
#130 := (and #123 #127)
#251 := (or #130 #248)
#267 := (if #251 #57 #177)
#270 := (if #38 0::Int #267)
#273 := (if #39 #35 #270)
#276 := (= #56 #273)
#279 := (forall (vars (?v0 Int) (?v1 Int)) #276)
#343 := (iff #279 #342)
#340 := (iff #276 #339)
#337 := (= #273 #336)
#334 := (= #270 #333)
#331 := (= #267 #330)
#315 := (iff #251 #314)
#312 := (iff #248 #311)
#313 := [rewrite]: #312
#308 := (iff #130 #307)
#309 := [rewrite]: #308
#316 := [monotonicity #309 #313]: #315
#332 := [monotonicity #316]: #331
#335 := [monotonicity #332]: #334
#338 := [monotonicity #335]: #337
#341 := [monotonicity #338]: #340
#344 := [quant-intro #341]: #343
#303 := (~ #279 #279)
#301 := (~ #276 #276)
#302 := [refl]: #301
#304 := [nnf-pos #302]: #303
#133 := (<= 0::Int #35)
#134 := (not #133)
#142 := (and #134 #127)
#145 := (or #130 #142)
#182 := (if #145 #57 #177)
#185 := (if #38 0::Int #182)
#188 := (if #39 #35 #185)
#191 := (= #56 #188)
#194 := (forall (vars (?v0 Int) (?v1 Int)) #191)
#280 := (iff #194 #279)
#277 := (iff #191 #276)
#274 := (= #188 #273)
#271 := (= #185 #270)
#268 := (= #182 #267)
#252 := (iff #145 #251)
#249 := (iff #142 #248)
#246 := (iff #134 #245)
#243 := (iff #133 #242)
#244 := [rewrite]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [monotonicity #250]: #252
#269 := [monotonicity #253]: #268
#272 := [monotonicity #269]: #271
#275 := [monotonicity #272]: #274
#278 := [monotonicity #275]: #277
#281 := [quant-intro #278]: #280
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (if #46 #57 #59)
#61 := (if #38 0::Int #60)
#62 := (if #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#195 := (iff #64 #194)
#192 := (iff #63 #191)
#189 := (= #62 #188)
#186 := (= #61 #185)
#183 := (= #60 #182)
#180 := (= #59 #177)
#174 := (- #171)
#178 := (= #174 #177)
#179 := [rewrite]: #178
#175 := (= #59 #174)
#172 := (= #58 #171)
#153 := (= #49 #152)
#154 := [rewrite]: #153
#150 := (= #48 #149)
#151 := [rewrite]: #150
#173 := [monotonicity #151 #154]: #172
#176 := [monotonicity #173]: #175
#181 := [trans #176 #179]: #180
#146 := (iff #46 #145)
#143 := (iff #45 #142)
#128 := (iff #42 #127)
#129 := [rewrite]: #128
#135 := (iff #44 #134)
#139 := (iff #134 #134)
#137 := (iff #133 #133)
#138 := [rewrite]: #137
#140 := [monotonicity #138]: #139
#136 := [rewrite]: #135
#141 := [trans #136 #140]: #135
#144 := [monotonicity #141 #129]: #143
#131 := (iff #43 #130)
#124 := (iff #41 #123)
#125 := [rewrite]: #124
#132 := [monotonicity #125 #129]: #131
#147 := [monotonicity #132 #144]: #146
#184 := [monotonicity #147 #181]: #183
#187 := [monotonicity #184]: #186
#190 := [monotonicity #187]: #189
#193 := [monotonicity #190]: #192
#196 := [quant-intro #193]: #195
#71 := [asserted]: #64
#197 := [mp #71 #196]: #194
#282 := [mp #197 #281]: #279
#305 := [mp~ #282 #304]: #279
#345 := [mp #305 #344]: #342
#376 := [mp #345 #375]: #373
#824 := [mp #376 #823]: #819
#744 := (not #819)
#749 := (or #744 #755)
#784 := (* -1::Int 3::Int)
#790 := (mod #789 #784)
#780 := (+ #13 #790)
#440 := (= #780 0::Int)
#448 := (<= 3::Int 0::Int)
#572 := (or #442 #448)
#779 := (not #572)
#783 := (or #469 #448)
#785 := (not #783)
#453 := (or #785 #779)
#445 := (if #453 #788 #440)
#781 := (if #468 #465 #445)
#464 := (= #13 #10)
#463 := (= 3::Int 0::Int)
#441 := (if #463 #464 #781)
#750 := (or #744 #441)
#751 := (iff #750 #749)
#593 := (iff #749 #749)
#594 := [rewrite]: #593
#748 := (iff #441 #755)
#756 := (if false #464 #755)
#746 := (iff #756 #755)
#747 := [rewrite]: #746
#753 := (iff #441 #756)
#470 := (iff #781 #755)
#476 := (iff #445 #475)
#473 := (iff #440 #763)
#762 := (= #780 #758)
#483 := (= #790 #761)
#383 := (= #784 -3::Int)
#760 := [rewrite]: #383
#484 := [monotonicity #760]: #483
#759 := [monotonicity #484]: #762
#474 := [monotonicity #759]: #473
#488 := (iff #453 #487)
#764 := (iff #779 #778)
#777 := (iff #572 #442)
#411 := (or #442 false)
#416 := (iff #411 #442)
#417 := [rewrite]: #416
#774 := (iff #572 #411)
#766 := (iff #448 false)
#429 := [rewrite]: #766
#776 := [monotonicity #429]: #774
#775 := [trans #776 #417]: #777
#765 := [monotonicity #775]: #764
#767 := (iff #785 #772)
#770 := (iff #783 #469)
#430 := (or #469 false)
#768 := (iff #430 #469)
#769 := [rewrite]: #768
#431 := (iff #783 #430)
#432 := [monotonicity #429]: #431
#771 := [trans #432 #769]: #770
#773 := [monotonicity #771]: #767
#489 := [monotonicity #773 #765]: #488
#754 := [monotonicity #489 #474]: #476
#752 := [monotonicity #754]: #470
#782 := (iff #463 false)
#425 := [rewrite]: #782
#757 := [monotonicity #425 #752]: #753
#743 := [trans #757 #747]: #748
#592 := [monotonicity #743]: #751
#736 := [trans #592 #594]: #751
#745 := [quant-inst #10 #12]: #750
#737 := [mp #745 #736]: #749
#664 := [unit-resolution #737 #824]: #755
#724 := (not #468)
#721 := (not #755)
#646 := (or #721 #724)
#620 := (not #465)
#738 := (<= #13 0::Int)
#659 := (not #738)
#218 := (>= #13 3::Int)
#75 := (<= 3::Int #13)
#217 := (iff #75 #218)
#219 := [rewrite]: #217
#14 := (< #13 3::Int)
#15 := (not #14)
#89 := (iff #15 #75)
#76 := (not #75)
#84 := (not #76)
#87 := (iff #84 #75)
#88 := [rewrite]: #87
#85 := (iff #15 #84)
#77 := (iff #14 #76)
#81 := (iff #76 #76)
#79 := (iff #75 #75)
#80 := [rewrite]: #79
#82 := [monotonicity #80]: #81
#78 := [rewrite]: #77
#83 := [trans #78 #82]: #77
#86 := [monotonicity #83]: #85
#90 := [trans #86 #88]: #89
#66 := [asserted]: #15
#91 := [mp #66 #90]: #75
#220 := [mp #91 #219]: #218
#665 := (not #218)
#638 := (or #659 #665)
#639 := [th-lemma arith farkas 1 1]: #638
#640 := [unit-resolution #639 #220]: #659
#533 := (or #620 #738)
#644 := [th-lemma arith triangle-eq]: #533
#645 := [unit-resolution #644 #640]: #620
#609 := (or #721 #724 #465)
#624 := [def-axiom]: #609
#651 := [unit-resolution #624 #645]: #646
#647 := [unit-resolution #651 #664]: #724
#626 := (or #721 #468 #475)
#627 := [def-axiom]: #626
#648 := [unit-resolution #627 #647 #664]: #475
decl f9 :: (-> S6 Int S5)
decl f10 :: S6
#16 := f10
#377 := (f9 f10 #10)
#632 := (f6 f7 #377)
#725 := (= #632 0::Int)
#581 := (not #725)
#636 := (iff #724 #581)
#655 := (iff #468 #725)
#654 := (iff #725 #468)
#652 := (= #632 #10)
#462 := (= #377 f8)
#17 := (:var 0 S5)
#18 := (f6 f7 #17)
#791 := (pattern #18)
#19 := (f9 f10 #18)
#20 := (= #19 #17)
#792 := (forall (vars (?v0 S5)) (:pat #791) #20)
#21 := (forall (vars (?v0 S5)) #20)
#795 := (iff #21 #792)
#793 := (iff #20 #20)
#794 := [refl]: #793
#796 := [quant-intro #794]: #795
#283 := (~ #21 #21)
#291 := (~ #20 #20)
#292 := [refl]: #291
#284 := [nnf-pos #292]: #283
#67 := [asserted]: #21
#293 := [mp~ #67 #284]: #21
#797 := [mp #293 #796]: #792
#455 := (not #792)
#466 := (or #455 #462)
#467 := [quant-inst #9]: #466
#649 := [unit-resolution #467 #797]: #462
#653 := [monotonicity #649]: #652
#650 := [monotonicity #653]: #654
#635 := [symm #650]: #655
#617 := [monotonicity #635]: #636
#641 := [mp #647 #617]: #581
#722 := (or #442 #725)
#25 := (f9 f10 #23)
#798 := (pattern #25)
#26 := (f6 f7 #25)
#31 := (= #26 0::Int)
#222 := (>= #23 0::Int)
#235 := (or #222 #31)
#805 := (forall (vars (?v0 Int)) (:pat #798) #235)
#238 := (forall (vars (?v0 Int)) #235)
#808 := (iff #238 #805)
#806 := (iff #235 #235)
#807 := [refl]: #806
#809 := [quant-intro #807]: #808
#287 := (~ #238 #238)
#216 := (~ #235 #235)
#221 := [refl]: #216
#288 := [nnf-pos #221]: #287
#24 := (<= 0::Int #23)
#113 := (or #24 #31)
#118 := (forall (vars (?v0 Int)) #113)
#239 := (iff #118 #238)
#236 := (iff #113 #235)
#223 := (iff #24 #222)
#224 := [rewrite]: #223
#237 := [monotonicity #224]: #236
#240 := [quant-intro #237]: #239
#30 := (< #23 0::Int)
#32 := (implies #30 #31)
#33 := (forall (vars (?v0 Int)) #32)
#119 := (iff #33 #118)
#116 := (iff #32 #113)
#96 := (not #24)
#110 := (implies #96 #31)
#114 := (iff #110 #113)
#115 := [rewrite]: #114
#111 := (iff #32 #110)
#105 := (iff #30 #96)
#107 := (iff #96 #96)
#92 := (iff #24 #24)
#93 := [rewrite]: #92
#108 := [monotonicity #93]: #107
#106 := [rewrite]: #105
#109 := [trans #106 #108]: #105
#112 := [monotonicity #109]: #111
#117 := [trans #112 #115]: #116
#120 := [quant-intro #117]: #119
#69 := [asserted]: #33
#121 := [mp #69 #120]: #118
#241 := [mp #121 #240]: #238
#295 := [mp~ #241 #288]: #238
#810 := [mp #295 #809]: #805
#715 := (not #805)
#707 := (or #715 #442 #725)
#704 := (or #715 #722)
#716 := (iff #704 #707)
#717 := [rewrite]: #716
#706 := [quant-inst #10]: #704
#718 := [mp #706 #717]: #707
#642 := [unit-resolution #718 #810]: #722
#637 := [unit-resolution #642 #641]: #442
#643 := (or #468 #772 #778)
#611 := [th-lemma arith triangle-eq]: #643
#618 := [unit-resolution #611 #647]: #487
#577 := [unit-resolution #618 #637]: #772
#733 := (or #487 #469)
#734 := [def-axiom]: #733
#608 := [unit-resolution #734 #577]: #487
#735 := (not #487)
#730 := (not #475)
#731 := (or #730 #735 #788)
#729 := [def-axiom]: #731
#610 := [unit-resolution #729 #608 #648]: #788
#615 := (not #788)
#612 := (or #615 #573)
#619 := [th-lemma arith triangle-eq]: #612
#621 := [unit-resolution #619 #610]: #573
[th-lemma arith farkas -1 1 1 #220 #621 #663]: false
6084ebd236b571d1d73842a11d064afa9bdf415b 618 0
unsat
#2 := false
#13 := 3::Int
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#10 := f10
decl f9 :: S6
#9 := f9
#11 := (f8 f9 f10)
#785 := (mod #11 3::Int)
#643 := (>= #785 3::Int)
#623 := (not #643)
#1 := true
#222 := [true-axiom]: true
#660 := (or false #623)
#646 := [th-lemma arith]: #660
#627 := [unit-resolution #646 #222]: #623
#226 := (>= #11 3::Int)
#387 := (not #226)
#546 := [hypothesis]: #387
#25 := 0::Int
#155 := -1::Int
#788 := (* -1::Int #785)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#8 := f7
#12 := (f6 f7 #11)
#14 := (f5 #12 3::Int)
#774 := (+ #14 #788)
#725 := (<= #774 0::Int)
#775 := (= #774 0::Int)
#781 := (= #11 0::Int)
#707 := (not #781)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#7 := f4
#15 := (f3 f4 #14)
#16 := (= #15 f10)
#477 := (not #16)
#479 := (or #477 #226)
#228 := (iff #16 #226)
#78 := (<= 3::Int #11)
#94 := (iff #16 #78)
#229 := (iff #94 #228)
#225 := (iff #78 #226)
#227 := [rewrite]: #225
#230 := [monotonicity #227]: #229
#17 := (< #11 3::Int)
#18 := (iff #16 #17)
#19 := (not #18)
#96 := (iff #19 #94)
#79 := (not #78)
#87 := (iff #16 #79)
#90 := (not #87)
#93 := (iff #90 #94)
#95 := [rewrite]: #93
#91 := (iff #19 #90)
#88 := (iff #18 #87)
#80 := (iff #17 #79)
#84 := (iff #79 #79)
#82 := (iff #78 #78)
#83 := [rewrite]: #82
#85 := [monotonicity #83]: #84
#81 := [rewrite]: #80
#86 := [trans #81 #85]: #80
#89 := [monotonicity #86]: #88
#92 := [monotonicity #89]: #91
#97 := [trans #92 #95]: #96
#69 := [asserted]: #19
#98 := [mp #69 #97]: #94
#231 := [mp #98 #230]: #228
#472 := (not #228)
#478 := (or #477 #226 #472)
#475 := [def-axiom]: #478
#458 := [unit-resolution #475 #231]: #479
#554 := [unit-resolution #458 #546]: #477
#675 := (or #707 #16)
#793 := (f3 f4 #11)
#795 := (= #793 f10)
#20 := (:var 0 S3)
#21 := (f8 f9 #20)
#801 := (pattern #21)
#22 := (f3 f4 #21)
#23 := (= #22 #20)
#802 := (forall (vars (?v0 S3)) (:pat #801) #23)
#24 := (forall (vars (?v0 S3)) #23)
#805 := (iff #24 #802)
#803 := (iff #23 #23)
#804 := [refl]: #803
#806 := [quant-intro #804]: #805
#295 := (~ #24 #24)
#293 := (~ #23 #23)
#294 := [refl]: #293
#296 := [nnf-pos #294]: #295
#70 := [asserted]: #24
#299 := [mp~ #70 #296]: #24
#807 := [mp #299 #806]: #802
#789 := (not #802)
#463 := (or #789 #795)
#464 := [quant-inst #10]: #463
#683 := [unit-resolution #464 #807]: #795
#672 := (= #15 #793)
#776 := (= #14 #11)
#667 := (= 0::Int #11)
#678 := [hypothesis]: #781
#668 := [symm #678]: #667
#782 := (= #14 0::Int)
#684 := (or #707 #782)
#604 := -3::Int
#497 := (* -1::Int #11)
#748 := (mod #497 -3::Int)
#744 := (+ #14 #748)
#745 := (= #744 0::Int)
#786 := (>= #11 0::Int)
#759 := (not #786)
#777 := (<= #11 0::Int)
#480 := (not #777)
#761 := (or #480 #759)
#583 := (if #761 #775 #745)
#738 := (if #781 #782 #583)
#26 := (:var 0 Int)
#38 := (:var 1 Int)
#58 := (f6 f7 #38)
#59 := (f5 #58 #26)
#828 := (pattern #59)
#159 := (* -1::Int #26)
#156 := (* -1::Int #38)
#178 := (mod #156 #159)
#376 := (+ #59 #178)
#377 := (= #376 0::Int)
#60 := (mod #38 #26)
#373 := (* -1::Int #60)
#374 := (+ #59 #373)
#375 := (= #374 0::Int)
#133 := (<= #26 0::Int)
#252 := (>= #38 0::Int)
#320 := (or #252 #133)
#321 := (not #320)
#129 := (<= #38 0::Int)
#316 := (or #129 #133)
#317 := (not #316)
#324 := (or #317 #321)
#378 := (if #324 #375 #377)
#372 := (= #59 0::Int)
#41 := (= #38 0::Int)
#379 := (if #41 #372 #378)
#371 := (= #59 #38)
#42 := (= #26 0::Int)
#380 := (if #42 #371 #379)
#829 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #828) #380)
#383 := (forall (vars (?v0 Int) (?v1 Int)) #380)
#832 := (iff #383 #829)
#830 := (iff #380 #380)
#831 := [refl]: #830
#833 := [quant-intro #831]: #832
#184 := (* -1::Int #178)
#340 := (if #324 #60 #184)
#343 := (if #41 0::Int #340)
#346 := (if #42 #38 #343)
#349 := (= #59 #346)
#352 := (forall (vars (?v0 Int) (?v1 Int)) #349)
#384 := (iff #352 #383)
#381 := (iff #349 #380)
#382 := [rewrite]: #381
#385 := [quant-intro #382]: #384
#134 := (not #133)
#255 := (not #252)
#258 := (and #255 #134)
#130 := (not #129)
#137 := (and #130 #134)
#261 := (or #137 #258)
#277 := (if #261 #60 #184)
#280 := (if #41 0::Int #277)
#283 := (if #42 #38 #280)
#286 := (= #59 #283)
#289 := (forall (vars (?v0 Int) (?v1 Int)) #286)
#353 := (iff #289 #352)
#350 := (iff #286 #349)
#347 := (= #283 #346)
#344 := (= #280 #343)
#341 := (= #277 #340)
#325 := (iff #261 #324)
#322 := (iff #258 #321)
#323 := [rewrite]: #322
#318 := (iff #137 #317)
#319 := [rewrite]: #318
#326 := [monotonicity #319 #323]: #325
#342 := [monotonicity #326]: #341
#345 := [monotonicity #342]: #344
#348 := [monotonicity #345]: #347
#351 := [monotonicity #348]: #350
#354 := [quant-intro #351]: #353
#313 := (~ #289 #289)
#311 := (~ #286 #286)
#312 := [refl]: #311
#314 := [nnf-pos #312]: #313
#140 := (<= 0::Int #38)
#141 := (not #140)
#149 := (and #141 #134)
#152 := (or #137 #149)
#189 := (if #152 #60 #184)
#192 := (if #41 0::Int #189)
#195 := (if #42 #38 #192)
#198 := (= #59 #195)
#201 := (forall (vars (?v0 Int) (?v1 Int)) #198)
#290 := (iff #201 #289)
#287 := (iff #198 #286)
#284 := (= #195 #283)
#281 := (= #192 #280)
#278 := (= #189 #277)
#262 := (iff #152 #261)
#259 := (iff #149 #258)
#256 := (iff #141 #255)
#253 := (iff #140 #252)
#254 := [rewrite]: #253
#257 := [monotonicity #254]: #256
#260 := [monotonicity #257]: #259
#263 := [monotonicity #260]: #262
#279 := [monotonicity #263]: #278
#282 := [monotonicity #279]: #281
#285 := [monotonicity #282]: #284
#288 := [monotonicity #285]: #287
#291 := [quant-intro #288]: #290
#52 := (- #26)
#51 := (- #38)
#61 := (mod #51 #52)
#62 := (- #61)
#45 := (< 0::Int #26)
#47 := (< #38 0::Int)
#48 := (and #47 #45)
#44 := (< 0::Int #38)
#46 := (and #44 #45)
#49 := (or #46 #48)
#63 := (if #49 #60 #62)
#64 := (if #41 0::Int #63)
#65 := (if #42 #38 #64)
#66 := (= #59 #65)
#67 := (forall (vars (?v0 Int) (?v1 Int)) #66)
#202 := (iff #67 #201)
#199 := (iff #66 #198)
#196 := (= #65 #195)
#193 := (= #64 #192)
#190 := (= #63 #189)
#187 := (= #62 #184)
#181 := (- #178)
#185 := (= #181 #184)
#186 := [rewrite]: #185
#182 := (= #62 #181)
#179 := (= #61 #178)
#160 := (= #52 #159)
#161 := [rewrite]: #160
#157 := (= #51 #156)
#158 := [rewrite]: #157
#180 := [monotonicity #158 #161]: #179
#183 := [monotonicity #180]: #182
#188 := [trans #183 #186]: #187
#153 := (iff #49 #152)
#150 := (iff #48 #149)
#135 := (iff #45 #134)
#136 := [rewrite]: #135
#142 := (iff #47 #141)
#146 := (iff #141 #141)
#144 := (iff #140 #140)
#145 := [rewrite]: #144
#147 := [monotonicity #145]: #146
#143 := [rewrite]: #142
#148 := [trans #143 #147]: #142
#151 := [monotonicity #148 #136]: #150
#138 := (iff #46 #137)
#131 := (iff #44 #130)
#132 := [rewrite]: #131
#139 := [monotonicity #132 #136]: #138
#154 := [monotonicity #139 #151]: #153
#191 := [monotonicity #154 #188]: #190
#194 := [monotonicity #191]: #193
#197 := [monotonicity #194]: #196
#200 := [monotonicity #197]: #199
#203 := [quant-intro #200]: #202
#74 := [asserted]: #67
#204 := [mp #74 #203]: #201
#292 := [mp #204 #291]: #289
#315 := [mp~ #292 #314]: #289
#355 := [mp #315 #354]: #352
#386 := [mp #355 #385]: #383
#834 := [mp #386 #833]: #829
#635 := (not #829)
#730 := (or #635 #738)
#498 := (* -1::Int 3::Int)
#499 := (mod #497 #498)
#500 := (+ #14 #499)
#393 := (= #500 0::Int)
#783 := (<= 3::Int 0::Int)
#426 := (or #786 #783)
#427 := (not #426)
#421 := (or #777 #783)
#784 := (not #421)
#787 := (or #784 #427)
#770 := (if #787 #775 #393)
#771 := (if #781 #782 #770)
#435 := (= 3::Int 0::Int)
#493 := (if #435 #776 #771)
#731 := (or #635 #493)
#619 := (iff #731 #730)
#636 := (iff #730 #730)
#637 := [rewrite]: #636
#585 := (iff #493 #738)
#739 := (if false #776 #738)
#625 := (iff #739 #738)
#626 := [rewrite]: #625
#742 := (iff #493 #739)
#740 := (iff #771 #738)
#584 := (iff #770 #583)
#752 := (iff #393 #745)
#750 := (= #500 #744)
#749 := (= #499 #748)
#746 := (= #498 -3::Int)
#747 := [rewrite]: #746
#743 := [monotonicity #747]: #749
#751 := [monotonicity #743]: #750
#581 := [monotonicity #751]: #752
#602 := (iff #787 #761)
#760 := (iff #427 #759)
#753 := (iff #426 #786)
#763 := (or #786 false)
#757 := (iff #763 #786)
#758 := [rewrite]: #757
#767 := (iff #426 #763)
#772 := (iff #783 false)
#769 := [rewrite]: #772
#756 := [monotonicity #769]: #767
#754 := [trans #756 #758]: #753
#755 := [monotonicity #754]: #760
#762 := (iff #784 #480)
#764 := (iff #421 #777)
#773 := (or #777 false)
#485 := (iff #773 #777)
#486 := [rewrite]: #485
#483 := (iff #421 #773)
#484 := [monotonicity #769]: #483
#765 := [trans #484 #486]: #764
#766 := [monotonicity #765]: #762
#603 := [monotonicity #766 #755]: #602
#737 := [monotonicity #603 #581]: #584
#741 := [monotonicity #737]: #740
#494 := (iff #435 false)
#768 := [rewrite]: #494
#624 := [monotonicity #768 #741]: #742
#733 := [trans #624 #626]: #585
#634 := [monotonicity #733]: #619
#630 := [trans #634 #637]: #619
#734 := [quant-inst #11 #13]: #731
#638 := [mp #734 #630]: #730
#693 := [unit-resolution #638 #834]: #738
#706 := (not #738)
#709 := (or #706 #707 #782)
#710 := [def-axiom]: #709
#670 := [unit-resolution #710 #693]: #684
#666 := [unit-resolution #670 #678]: #782
#671 := [trans #666 #668]: #776
#673 := [monotonicity #671]: #672
#674 := [trans #673 #683]: #16
#682 := [hypothesis]: #477
#669 := [unit-resolution #682 #674]: false
#648 := [lemma #669]: #675
#547 := [unit-resolution #648 #554]: #707
#680 := (or #781 #775)
#705 := [hypothesis]: #707
#732 := (not #761)
#718 := (not #775)
#685 := [hypothesis]: #718
#694 := (or #781 #583)
#711 := (or #706 #781 #583)
#712 := [def-axiom]: #711
#695 := [unit-resolution #712 #693]: #694
#696 := [unit-resolution #695 #705]: #583
#726 := (not #583)
#727 := (or #726 #732 #775)
#728 := [def-axiom]: #727
#697 := [unit-resolution #728 #696 #685]: #732
#640 := (or #761 #777)
#641 := [def-axiom]: #640
#687 := [unit-resolution #641 #697]: #777
#642 := (or #761 #786)
#735 := [def-axiom]: #642
#698 := [unit-resolution #735 #697]: #786
#676 := (or #781 #480 #759)
#677 := [th-lemma arith triangle-eq]: #676
#679 := [unit-resolution #677 #698 #687 #705]: false
#681 := [lemma #679]: #680
#550 := [unit-resolution #681 #547]: #775
#551 := (or #718 #725)
#537 := [th-lemma arith triangle-eq]: #551
#539 := [unit-resolution #537 #550]: #725
#649 := (div #11 3::Int)
#662 := (* -3::Int #649)
#663 := (+ #11 #662 #788)
#665 := (<= #663 0::Int)
#659 := (= #663 0::Int)
#612 := (or false #659)
#613 := [th-lemma arith]: #612
#614 := [unit-resolution #613 #222]: #659
#615 := (not #659)
#590 := (or #615 #665)
#592 := [th-lemma arith triangle-eq]: #590
#593 := [unit-resolution #592 #614]: #665
#405 := 1::Int
#573 := -2::Int
#557 := (* -2::Int #649)
#562 := (+ #11 #557 #788)
#552 := (>= #562 1::Int)
#655 := (* -1::Int #14)
#656 := (+ #11 #655)
#661 := (<= #656 0::Int)
#527 := (not #661)
#611 := (= #11 #14)
#586 := (not #611)
#588 := (or #586 #16)
#616 := [hypothesis]: #611
#601 := [symm #616]: #776
#617 := [monotonicity #601]: #672
#578 := [trans #617 #683]: #16
#579 := [unit-resolution #682 #578]: false
#589 := [lemma #579]: #588
#534 := [unit-resolution #589 #554]: #586
#657 := (>= #656 0::Int)
#664 := (>= #649 0::Int)
#703 := (f8 f9 #793)
#704 := (= #703 0::Int)
#517 := (not #704)
#518 := (iff #707 #517)
#515 := (iff #781 #704)
#536 := (iff #704 #781)
#535 := (= #703 #11)
#524 := [monotonicity #683]: #535
#513 := [monotonicity #524]: #536
#516 := [symm #513]: #515
#519 := [monotonicity #516]: #518
#520 := [mp #547 #519]: #517
#701 := (or #786 #704)
#28 := (f3 f4 #26)
#808 := (pattern #28)
#29 := (f8 f9 #28)
#34 := (= #29 0::Int)
#232 := (>= #26 0::Int)
#245 := (or #232 #34)
#815 := (forall (vars (?v0 Int)) (:pat #808) #245)
#248 := (forall (vars (?v0 Int)) #245)
#818 := (iff #248 #815)
#816 := (iff #245 #245)
#817 := [refl]: #816
#819 := [quant-intro #817]: #818
#297 := (~ #248 #248)
#223 := (~ #245 #245)
#224 := [refl]: #223
#298 := [nnf-pos #224]: #297
#27 := (<= 0::Int #26)
#120 := (or #27 #34)
#125 := (forall (vars (?v0 Int)) #120)
#249 := (iff #125 #248)
#246 := (iff #120 #245)
#233 := (iff #27 #232)
#234 := [rewrite]: #233
#247 := [monotonicity #234]: #246
#250 := [quant-intro #247]: #249
#33 := (< #26 0::Int)
#35 := (implies #33 #34)
#36 := (forall (vars (?v0 Int)) #35)
#126 := (iff #36 #125)
#123 := (iff #35 #120)
#103 := (not #27)
#117 := (implies #103 #34)
#121 := (iff #117 #120)
#122 := [rewrite]: #121
#118 := (iff #35 #117)
#112 := (iff #33 #103)
#114 := (iff #103 #103)
#99 := (iff #27 #27)
#100 := [rewrite]: #99
#115 := [monotonicity #100]: #114
#113 := [rewrite]: #112
#116 := [trans #113 #115]: #112
#119 := [monotonicity #116]: #118
#124 := [trans #119 #122]: #123
#127 := [quant-intro #124]: #126
#72 := [asserted]: #36
#128 := [mp #72 #127]: #125
#251 := [mp #128 #250]: #248
#305 := [mp~ #251 #298]: #248
#820 := [mp #305 #819]: #815
#439 := (not #815)
#686 := (or #439 #786 #704)
#688 := (or #439 #701)
#690 := (iff #688 #686)
#691 := [rewrite]: #690
#689 := [quant-inst #11]: #688
#692 := [mp #689 #691]: #686
#521 := [unit-resolution #692 #820]: #701
#514 := [unit-resolution #521 #520]: #786
#580 := (or #664 #759)
#594 := (not #664)
#595 := [hypothesis]: #594
#596 := [hypothesis]: #786
#597 := [th-lemma arith farkas 1 3 1 1 #596 #595 #593 #627]: false
#598 := [lemma #597]: #580
#522 := [unit-resolution #598 #514]: #664
#605 := (not #725)
#563 := (or #657 #605 #594)
#631 := (not #657)
#632 := [hypothesis]: #631
#645 := (>= #663 0::Int)
#576 := (or #615 #645)
#572 := [th-lemma arith triangle-eq]: #576
#577 := [unit-resolution #572 #614]: #645
#556 := [hypothesis]: #664
#644 := [hypothesis]: #725
#559 := [th-lemma arith farkas 1 -3 -1 1 #644 #556 #577 #632]: false
#565 := [lemma #559]: #563
#507 := [unit-resolution #565 #539 #522]: #657
#508 := (or #611 #527 #631)
#509 := [th-lemma arith triangle-eq]: #508
#511 := [unit-resolution #509 #507 #534]: #527
#717 := (>= #774 0::Int)
#510 := (or #718 #717)
#512 := [th-lemma arith triangle-eq]: #510
#501 := [unit-resolution #512 #550]: #717
#531 := (not #717)
#532 := (or #552 #531 #661)
#541 := (not #552)
#526 := [hypothesis]: #541
#528 := [hypothesis]: #527
#529 := [hypothesis]: #717
#530 := [th-lemma arith farkas -2/3 -1/3 -1/3 1 #577 #529 #528 #526]: false
#533 := [lemma #530]: #532
#502 := [unit-resolution #533 #501 #511]: #552
#452 := (>= #14 0::Int)
#591 := (>= #785 0::Int)
#503 := (or false #591)
#495 := [th-lemma arith]: #503
#504 := [unit-resolution #495 #222]: #591
#505 := (not #591)
#496 := (or #452 #505 #531)
#506 := [th-lemma arith assign-bounds 1 1]: #496
#487 := [unit-resolution #506 #501 #504]: #452
#488 := [th-lemma arith farkas -1 -3 2 1 1 #487 #502 #593 #539 #546]: false
#489 := [lemma #488]: #226
#796 := (f8 f9 #15)
#797 := (= #796 #14)
#456 := (iff #797 #611)
#471 := (= #796 #11)
#465 := (or #16 #387)
#473 := (or #16 #387 #472)
#474 := [def-axiom]: #473
#476 := [unit-resolution #474 #231]: #465
#460 := [unit-resolution #476 #489]: #16
#454 := [monotonicity #460]: #471
#457 := [monotonicity #454]: #456
#482 := (or #480 #387)
#492 := [th-lemma arith farkas 1 1]: #482
#459 := [unit-resolution #492 #489]: #480
#461 := (or #707 #777)
#462 := [th-lemma arith triangle-eq]: #461
#453 := [unit-resolution #462 #459]: #707
#466 := [unit-resolution #681 #453]: #775
#467 := [unit-resolution #512 #466]: #717
#468 := [unit-resolution #506 #467 #504]: #452
#582 := (not #452)
#798 := (or #582 #797)
#30 := (= #29 #26)
#235 := (not #232)
#238 := (or #235 #30)
#809 := (forall (vars (?v0 Int)) (:pat #808) #238)
#241 := (forall (vars (?v0 Int)) #238)
#812 := (iff #241 #809)
#810 := (iff #238 #238)
#811 := [refl]: #810
#813 := [quant-intro #811]: #812
#302 := (~ #241 #241)
#300 := (~ #238 #238)
#301 := [refl]: #300
#303 := [nnf-pos #301]: #302
#104 := (or #103 #30)
#108 := (forall (vars (?v0 Int)) #104)
#242 := (iff #108 #241)
#239 := (iff #104 #238)
#236 := (iff #103 #235)
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [quant-intro #240]: #242
#31 := (implies #27 #30)
#32 := (forall (vars (?v0 Int)) #31)
#109 := (iff #32 #108)
#105 := (iff #31 #104)
#106 := [rewrite]: #105
#101 := (iff #31 #31)
#102 := [monotonicity #100]: #101
#107 := [trans #102 #106]: #105
#110 := [quant-intro #107]: #109
#71 := [asserted]: #32
#111 := [mp #71 #110]: #108
#244 := [mp #111 #243]: #241
#304 := [mp~ #244 #303]: #241
#814 := [mp #304 #813]: #809
#800 := (not #809)
#790 := (or #800 #582 #797)
#450 := (or #800 #798)
#791 := (iff #450 #790)
#451 := [rewrite]: #791
#455 := [quant-inst #14]: #450
#792 := [mp #455 #451]: #790
#469 := [unit-resolution #792 #814]: #798
#470 := [unit-resolution #469 #468]: #797
#436 := [mp #470 #457]: #611
#438 := (or #586 #661)
#443 := [th-lemma arith triangle-eq]: #438
#444 := [unit-resolution #443 #436]: #661
#445 := [unit-resolution #537 #466]: #725
[th-lemma arith farkas 1 1 -1 1 #445 #444 #489 #627]: false
39e38a4cd6cf46af7d8d64c6a30d6324a7b844a7 778 0
unsat
#2 := false
#28 := 0::Int
decl f9 :: (-> S6 S2 Int)
decl f3 :: S2
#7 := f3
decl f10 :: S6
#10 := f10
#11 := (f9 f10 f3)
#762 := (>= #11 0::Int)
#738 := (not #762)
#415 := (<= #11 0::Int)
#749 := (not #415)
#740 := (or #749 #738)
#716 := (not #740)
#429 := (= #11 0::Int)
#692 := (not #429)
decl f4 :: (-> S3 Int S2)
decl f6 :: (-> S4 Int Int)
#13 := 1::Int
decl f7 :: (-> S5 Int S4)
decl f11 :: S5
#16 := f11
#17 := (f7 f11 #11)
#18 := (f6 #17 1::Int)
decl f8 :: S5
#9 := f8
#12 := (f7 f8 #11)
#14 := (f6 #12 1::Int)
#82 := (+ #14 #18)
decl f5 :: S3
#8 := f5
#85 := (f4 f5 #82)
#88 := (= f3 #85)
#466 := (f9 f10 #85)
#445 := (f4 f5 #466)
#424 := (= #445 #85)
#23 := (:var 0 S2)
#24 := (f9 f10 #23)
#789 := (pattern #24)
#25 := (f4 f5 #24)
#26 := (= #25 #23)
#790 := (forall (vars (?v0 S2)) (:pat #789) #26)
#27 := (forall (vars (?v0 S2)) #26)
#793 := (iff #27 #790)
#791 := (iff #26 #26)
#792 := [refl]: #791
#794 := [quant-intro #792]: #793
#219 := (~ #27 #27)
#282 := (~ #26 #26)
#283 := [refl]: #282
#220 := [nnf-pos #283]: #219
#72 := [asserted]: #27
#284 := [mp~ #72 #220]: #27
#795 := [mp #284 #794]: #790
#453 := (not #790)
#555 := (or #453 #424)
#562 := [quant-inst #85]: #555
#535 := [unit-resolution #562 #795]: #424
#541 := (= f3 #445)
#376 := (f4 f5 #11)
#379 := (= #376 #445)
#390 := (= #445 #376)
#536 := (= #466 #11)
#551 := (= 0::Int #11)
#539 := [hypothesis]: #429
#553 := [symm #539]: #551
#427 := (= #466 0::Int)
#772 := (>= #466 0::Int)
#611 := (>= #18 0::Int)
#682 := (= #18 0::Int)
#538 := (or #692 #682)
#151 := -1::Int
#759 := (* -1::Int #11)
#709 := (mod #759 -1::Int)
#643 := (+ #18 #709)
#645 := (= #643 0::Int)
#650 := (if #740 #682 #645)
#648 := (if #429 #682 #650)
#29 := (:var 0 Int)
#40 := (:var 1 Int)
#60 := (f7 f11 #40)
#61 := (f6 #60 #29)
#816 := (pattern #61)
#155 := (* -1::Int #29)
#152 := (* -1::Int #40)
#174 := (mod #152 #155)
#365 := (+ #61 #174)
#366 := (= #365 0::Int)
#62 := (mod #40 #29)
#362 := (* -1::Int #62)
#363 := (+ #61 #362)
#364 := (= #363 0::Int)
#129 := (<= #29 0::Int)
#241 := (>= #40 0::Int)
#309 := (or #241 #129)
#310 := (not #309)
#125 := (<= #40 0::Int)
#305 := (or #125 #129)
#306 := (not #305)
#313 := (or #306 #310)
#367 := (if #313 #364 #366)
#361 := (= #61 0::Int)
#43 := (= #40 0::Int)
#368 := (if #43 #361 #367)
#360 := (= #61 #40)
#44 := (= #29 0::Int)
#369 := (if #44 #360 #368)
#817 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #816) #369)
#372 := (forall (vars (?v0 Int) (?v1 Int)) #369)
#820 := (iff #372 #817)
#818 := (iff #369 #369)
#819 := [refl]: #818
#821 := [quant-intro #819]: #820
#180 := (* -1::Int #174)
#329 := (if #313 #62 #180)
#332 := (if #43 0::Int #329)
#335 := (if #44 #40 #332)
#338 := (= #61 #335)
#341 := (forall (vars (?v0 Int) (?v1 Int)) #338)
#373 := (iff #341 #372)
#370 := (iff #338 #369)
#371 := [rewrite]: #370
#374 := [quant-intro #371]: #373
#130 := (not #129)
#244 := (not #241)
#247 := (and #244 #130)
#126 := (not #125)
#133 := (and #126 #130)
#250 := (or #133 #247)
#266 := (if #250 #62 #180)
#269 := (if #43 0::Int #266)
#272 := (if #44 #40 #269)
#275 := (= #61 #272)
#278 := (forall (vars (?v0 Int) (?v1 Int)) #275)
#342 := (iff #278 #341)
#339 := (iff #275 #338)
#336 := (= #272 #335)
#333 := (= #269 #332)
#330 := (= #266 #329)
#314 := (iff #250 #313)
#311 := (iff #247 #310)
#312 := [rewrite]: #311
#307 := (iff #133 #306)
#308 := [rewrite]: #307
#315 := [monotonicity #308 #312]: #314
#331 := [monotonicity #315]: #330
#334 := [monotonicity #331]: #333
#337 := [monotonicity #334]: #336
#340 := [monotonicity #337]: #339
#343 := [quant-intro #340]: #342
#302 := (~ #278 #278)
#300 := (~ #275 #275)
#301 := [refl]: #300
#303 := [nnf-pos #301]: #302
#136 := (<= 0::Int #40)
#137 := (not #136)
#145 := (and #137 #130)
#148 := (or #133 #145)
#185 := (if #148 #62 #180)
#188 := (if #43 0::Int #185)
#191 := (if #44 #40 #188)
#194 := (= #61 #191)
#197 := (forall (vars (?v0 Int) (?v1 Int)) #194)
#279 := (iff #197 #278)
#276 := (iff #194 #275)
#273 := (= #191 #272)
#270 := (= #188 #269)
#267 := (= #185 #266)
#251 := (iff #148 #250)
#248 := (iff #145 #247)
#245 := (iff #137 #244)
#242 := (iff #136 #241)
#243 := [rewrite]: #242
#246 := [monotonicity #243]: #245
#249 := [monotonicity #246]: #248
#252 := [monotonicity #249]: #251
#268 := [monotonicity #252]: #267
#271 := [monotonicity #268]: #270
#274 := [monotonicity #271]: #273
#277 := [monotonicity #274]: #276
#280 := [quant-intro #277]: #279
#54 := (- #29)
#53 := (- #40)
#63 := (mod #53 #54)
#64 := (- #63)
#47 := (< 0::Int #29)
#49 := (< #40 0::Int)
#50 := (and #49 #47)
#46 := (< 0::Int #40)
#48 := (and #46 #47)
#51 := (or #48 #50)
#65 := (if #51 #62 #64)
#66 := (if #43 0::Int #65)
#67 := (if #44 #40 #66)
#68 := (= #61 #67)
#69 := (forall (vars (?v0 Int) (?v1 Int)) #68)
#198 := (iff #69 #197)
#195 := (iff #68 #194)
#192 := (= #67 #191)
#189 := (= #66 #188)
#186 := (= #65 #185)
#183 := (= #64 #180)
#177 := (- #174)
#181 := (= #177 #180)
#182 := [rewrite]: #181
#178 := (= #64 #177)
#175 := (= #63 #174)
#156 := (= #54 #155)
#157 := [rewrite]: #156
#153 := (= #53 #152)
#154 := [rewrite]: #153
#176 := [monotonicity #154 #157]: #175
#179 := [monotonicity #176]: #178
#184 := [trans #179 #182]: #183
#149 := (iff #51 #148)
#146 := (iff #50 #145)
#131 := (iff #47 #130)
#132 := [rewrite]: #131
#138 := (iff #49 #137)
#142 := (iff #137 #137)
#140 := (iff #136 #136)
#141 := [rewrite]: #140
#143 := [monotonicity #141]: #142
#139 := [rewrite]: #138
#144 := [trans #139 #143]: #138
#147 := [monotonicity #144 #132]: #146
#134 := (iff #48 #133)
#127 := (iff #46 #126)
#128 := [rewrite]: #127
#135 := [monotonicity #128 #132]: #134
#150 := [monotonicity #135 #147]: #149
#187 := [monotonicity #150 #184]: #186
#190 := [monotonicity #187]: #189
#193 := [monotonicity #190]: #192
#196 := [monotonicity #193]: #195
#199 := [quant-intro #196]: #198
#76 := [asserted]: #69
#200 := [mp #76 #199]: #197
#281 := [mp #200 #280]: #278
#304 := [mp~ #281 #303]: #278
#344 := [mp #304 #343]: #341
#375 := [mp #344 #374]: #372
#822 := [mp #375 #821]: #817
#609 := (not #817)
#616 := (or #609 #648)
#481 := (* -1::Int 1::Int)
#675 := (mod #759 #481)
#686 := (+ #18 #675)
#664 := (= #686 0::Int)
#706 := (mod #11 1::Int)
#683 := (* -1::Int #706)
#684 := (+ #18 #683)
#685 := (= #684 0::Int)
#775 := (<= 1::Int 0::Int)
#763 := (or #762 #775)
#485 := (not #763)
#773 := (or #415 #775)
#776 := (not #773)
#486 := (or #776 #485)
#665 := (if #486 #685 #664)
#667 := (if #429 #682 #665)
#681 := (= #18 #11)
#430 := (= 1::Int 0::Int)
#668 := (if #430 #681 #667)
#575 := (or #609 #668)
#608 := (iff #575 #616)
#617 := (iff #616 #616)
#619 := [rewrite]: #617
#635 := (iff #668 #648)
#579 := (if false #681 #648)
#639 := (iff #579 #648)
#640 := [rewrite]: #639
#634 := (iff #668 #579)
#653 := (iff #667 #648)
#651 := (iff #665 #650)
#646 := (iff #664 #645)
#644 := (= #686 #643)
#531 := (= #675 #709)
#572 := (= #481 -1::Int)
#725 := [rewrite]: #572
#642 := [monotonicity #725]: #531
#649 := [monotonicity #642]: #644
#647 := [monotonicity #649]: #646
#637 := (iff #685 #682)
#663 := (= #684 #18)
#659 := (+ #18 0::Int)
#662 := (= #659 #18)
#657 := [rewrite]: #662
#660 := (= #684 #659)
#655 := (= #683 0::Int)
#671 := (* -1::Int 0::Int)
#658 := (= #671 0::Int)
#654 := [rewrite]: #658
#666 := (= #683 #671)
#669 := (= #706 0::Int)
#670 := [rewrite]: #669
#672 := [monotonicity #670]: #666
#656 := [trans #672 #654]: #655
#661 := [monotonicity #656]: #660
#636 := [trans #661 #657]: #663
#638 := [monotonicity #636]: #637
#569 := (iff #486 #740)
#739 := (iff #485 #738)
#731 := (iff #763 #762)
#592 := (or #762 false)
#736 := (iff #592 #762)
#737 := [rewrite]: #736
#734 := (iff #763 #592)
#755 := (iff #775 false)
#744 := [rewrite]: #755
#735 := [monotonicity #744]: #734
#732 := [trans #735 #737]: #731
#733 := [monotonicity #732]: #739
#590 := (iff #776 #749)
#748 := (iff #773 #415)
#745 := (or #415 false)
#742 := (iff #745 #415)
#747 := [rewrite]: #742
#746 := (iff #773 #745)
#741 := [monotonicity #744]: #746
#743 := [trans #741 #747]: #748
#591 := [monotonicity #743]: #590
#571 := [monotonicity #591 #733]: #569
#652 := [monotonicity #571 #638 #647]: #651
#633 := [monotonicity #652]: #653
#472 := (iff #430 false)
#473 := [rewrite]: #472
#615 := [monotonicity #473 #633]: #634
#641 := [trans #615 #640]: #635
#610 := [monotonicity #641]: #608
#620 := [trans #610 #619]: #608
#606 := [quant-inst #11 #13]: #575
#621 := [mp #606 #620]: #616
#434 := [unit-resolution #621 #822]: #648
#603 := (not #648)
#604 := (or #603 #692 #682)
#589 := [def-axiom]: #604
#543 := [unit-resolution #589 #434]: #538
#546 := [unit-resolution #543 #539]: #682
#597 := (not #682)
#419 := (or #597 #611)
#422 := [th-lemma arith triangle-eq]: #419
#525 := [unit-resolution #422 #546]: #611
#705 := (>= #14 0::Int)
#487 := (div #11 1::Int)
#488 := (* -1::Int #487)
#549 := (+ #11 #488)
#548 := (= #549 0::Int)
#1 := true
#218 := [true-axiom]: true
#512 := (or false #548)
#524 := [th-lemma arith]: #512
#501 := [unit-resolution #524 #218]: #548
#532 := (<= #549 0::Int)
#441 := (not #532)
#503 := (not #705)
#504 := [hypothesis]: #503
#382 := (+ #14 #488)
#708 := (>= #382 0::Int)
#758 := (= #382 0::Int)
#726 := (div #759 -1::Int)
#727 := (* -1::Int #726)
#613 := (+ #14 #727)
#721 := (= #613 0::Int)
#719 := (if #740 #758 #721)
#414 := (= #14 0::Int)
#676 := (not #414)
#505 := (or #676 #705)
#506 := [th-lemma arith triangle-eq]: #505
#507 := [unit-resolution #506 #504]: #676
#509 := (or #692 #414)
#622 := (if #429 #414 #719)
#41 := (f7 f8 #40)
#42 := (f6 #41 #29)
#809 := (pattern #42)
#158 := (div #152 #155)
#349 := (* -1::Int #158)
#350 := (+ #42 #349)
#351 := (= #350 0::Int)
#52 := (div #40 #29)
#346 := (* -1::Int #52)
#347 := (+ #42 #346)
#348 := (= #347 0::Int)
#352 := (if #313 #348 #351)
#345 := (= #42 0::Int)
#45 := (or #43 #44)
#353 := (if #45 #345 #352)
#810 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #809) #353)
#356 := (forall (vars (?v0 Int) (?v1 Int)) #353)
#813 := (iff #356 #810)
#811 := (iff #353 #353)
#812 := [refl]: #811
#814 := [quant-intro #812]: #813
#316 := (if #313 #52 #158)
#319 := (if #45 0::Int #316)
#322 := (= #42 #319)
#325 := (forall (vars (?v0 Int) (?v1 Int)) #322)
#357 := (iff #325 #356)
#354 := (iff #322 #353)
#355 := [rewrite]: #354
#358 := [quant-intro #355]: #357
#253 := (if #250 #52 #158)
#256 := (if #45 0::Int #253)
#259 := (= #42 #256)
#262 := (forall (vars (?v0 Int) (?v1 Int)) #259)
#326 := (iff #262 #325)
#323 := (iff #259 #322)
#320 := (= #256 #319)
#317 := (= #253 #316)
#318 := [monotonicity #315]: #317
#321 := [monotonicity #318]: #320
#324 := [monotonicity #321]: #323
#327 := [quant-intro #324]: #326
#297 := (~ #262 #262)
#295 := (~ #259 #259)
#296 := [refl]: #295
#298 := [nnf-pos #296]: #297
#161 := (if #148 #52 #158)
#164 := (if #45 0::Int #161)
#167 := (= #42 #164)
#170 := (forall (vars (?v0 Int) (?v1 Int)) #167)
#263 := (iff #170 #262)
#260 := (iff #167 #259)
#257 := (= #164 #256)
#254 := (= #161 #253)
#255 := [monotonicity #252]: #254
#258 := [monotonicity #255]: #257
#261 := [monotonicity #258]: #260
#264 := [quant-intro #261]: #263
#55 := (div #53 #54)
#56 := (if #51 #52 #55)
#57 := (if #45 0::Int #56)
#58 := (= #42 #57)
#59 := (forall (vars (?v0 Int) (?v1 Int)) #58)
#171 := (iff #59 #170)
#168 := (iff #58 #167)
#165 := (= #57 #164)
#162 := (= #56 #161)
#159 := (= #55 #158)
#160 := [monotonicity #154 #157]: #159
#163 := [monotonicity #150 #160]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#172 := [quant-intro #169]: #171
#75 := [asserted]: #59
#173 := [mp #75 #172]: #170
#265 := [mp #173 #264]: #262
#299 := [mp~ #265 #298]: #262
#328 := [mp #299 #327]: #325
#359 := [mp #328 #358]: #356
#815 := [mp #359 #814]: #810
#618 := (not #810)
#626 := (or #618 #622)
#482 := (div #759 #481)
#756 := (* -1::Int #482)
#760 := (+ #14 #756)
#757 := (= #760 0::Int)
#761 := (if #486 #758 #757)
#774 := (or #429 #430)
#471 := (if #774 #414 #761)
#627 := (or #618 #471)
#629 := (iff #627 #626)
#723 := (iff #626 #626)
#720 := [rewrite]: #723
#624 := (iff #471 #622)
#722 := (iff #761 #719)
#623 := (iff #757 #721)
#614 := (= #760 #613)
#730 := (= #756 #727)
#728 := (= #482 #726)
#729 := [monotonicity #725]: #728
#612 := [monotonicity #729]: #730
#573 := [monotonicity #612]: #614
#718 := [monotonicity #573]: #623
#607 := [monotonicity #571 #718]: #722
#754 := (iff #774 #429)
#474 := (or #429 false)
#468 := (iff #474 #429)
#750 := [rewrite]: #468
#752 := (iff #774 #474)
#753 := [monotonicity #473]: #752
#751 := [trans #753 #750]: #754
#625 := [monotonicity #751 #607]: #624
#630 := [monotonicity #625]: #629
#724 := [trans #630 #720]: #629
#628 := [quant-inst #11 #13]: #627
#711 := [mp #628 #724]: #626
#508 := [unit-resolution #711 #815]: #622
#691 := (not #622)
#689 := (or #691 #692 #414)
#693 := [def-axiom]: #689
#502 := [unit-resolution #693 #508]: #509
#510 := [unit-resolution #502 #507]: #692
#495 := (or #429 #719)
#673 := (or #691 #429 #719)
#674 := [def-axiom]: #673
#496 := [unit-resolution #674 #508]: #495
#497 := [unit-resolution #496 #510]: #719
#578 := (f9 f10 #376)
#580 := (= #578 0::Int)
#492 := (not #580)
#493 := (iff #692 #492)
#491 := (iff #429 #580)
#489 := (iff #580 #429)
#498 := (= #578 #11)
#460 := (= #376 f3)
#464 := (or #453 #460)
#465 := [quant-inst #7]: #464
#499 := [unit-resolution #465 #795]: #460
#500 := [monotonicity #499]: #498
#490 := [monotonicity #500]: #489
#483 := [symm #490]: #491
#484 := [monotonicity #483]: #493
#494 := [mp #510 #484]: #492
#581 := (or #762 #580)
#31 := (f4 f5 #29)
#796 := (pattern #31)
#32 := (f9 f10 #31)
#37 := (= #32 0::Int)
#221 := (>= #29 0::Int)
#234 := (or #221 #37)
#803 := (forall (vars (?v0 Int)) (:pat #796) #234)
#237 := (forall (vars (?v0 Int)) #234)
#806 := (iff #237 #803)
#804 := (iff #234 #234)
#805 := [refl]: #804
#807 := [quant-intro #805]: #806
#288 := (~ #237 #237)
#286 := (~ #234 #234)
#287 := [refl]: #286
#289 := [nnf-pos #287]: #288
#30 := (<= 0::Int #29)
#116 := (or #30 #37)
#121 := (forall (vars (?v0 Int)) #116)
#238 := (iff #121 #237)
#235 := (iff #116 #234)
#222 := (iff #30 #221)
#223 := [rewrite]: #222
#236 := [monotonicity #223]: #235
#239 := [quant-intro #236]: #238
#36 := (< #29 0::Int)
#38 := (implies #36 #37)
#39 := (forall (vars (?v0 Int)) #38)
#122 := (iff #39 #121)
#119 := (iff #38 #116)
#99 := (not #30)
#113 := (implies #99 #37)
#117 := (iff #113 #116)
#118 := [rewrite]: #117
#114 := (iff #38 #113)
#108 := (iff #36 #99)
#110 := (iff #99 #99)
#95 := (iff #30 #30)
#96 := [rewrite]: #95
#111 := [monotonicity #96]: #110
#109 := [rewrite]: #108
#112 := [trans #109 #111]: #108
#115 := [monotonicity #112]: #114
#120 := [trans #115 #118]: #119
#123 := [quant-intro #120]: #122
#74 := [asserted]: #39
#124 := [mp #74 #123]: #121
#240 := [mp #124 #239]: #237
#294 := [mp~ #240 #289]: #237
#808 := [mp #294 #807]: #803
#766 := (not #803)
#584 := (or #766 #762 #580)
#585 := (or #766 #581)
#586 := (iff #585 #584)
#556 := [rewrite]: #586
#568 := [quant-inst #11]: #585
#557 := [mp #568 #556]: #584
#475 := [unit-resolution #557 #808]: #581
#476 := [unit-resolution #475 #494]: #762
#477 := (or #429 #749 #738)
#469 := [th-lemma arith triangle-eq]: #477
#478 := [unit-resolution #469 #510]: #740
#479 := [unit-resolution #478 #476]: #749
#702 := (or #740 #415)
#704 := [def-axiom]: #702
#470 := [unit-resolution #704 #479]: #740
#694 := (not #719)
#695 := (or #694 #716 #758)
#697 := [def-axiom]: #695
#480 := [unit-resolution #697 #470 #497]: #758
#700 := (not #758)
#447 := (or #700 #708)
#449 := [th-lemma arith triangle-eq]: #447
#450 := [unit-resolution #449 #480]: #708
#454 := (not #708)
#455 := (or #441 #738 #705 #454)
#456 := [th-lemma arith assign-bounds 1 1 -1]: #455
#457 := [unit-resolution #456 #476 #450 #504]: #441
#458 := (not #548)
#448 := (or #458 #532)
#459 := [th-lemma arith triangle-eq]: #448
#442 := [unit-resolution #459 #457 #501]: false
#444 := [lemma #442]: #705
#440 := (* -1::Int #466)
#570 := (+ #14 #18 #440)
#423 := (<= #570 0::Int)
#783 := (= #570 0::Int)
#461 := (>= #82 0::Int)
#545 := (not #611)
#550 := (or #461 #503 #545)
#540 := [th-lemma arith assign-bounds 1 -1]: #550
#530 := [unit-resolution #540 #525 #444]: #461
#462 := (not #461)
#777 := (or #462 #783)
#33 := (= #32 #29)
#224 := (not #221)
#227 := (or #224 #33)
#797 := (forall (vars (?v0 Int)) (:pat #796) #227)
#230 := (forall (vars (?v0 Int)) #227)
#800 := (iff #230 #797)
#798 := (iff #227 #227)
#799 := [refl]: #798
#801 := [quant-intro #799]: #800
#291 := (~ #230 #230)
#285 := (~ #227 #227)
#290 := [refl]: #285
#292 := [nnf-pos #290]: #291
#100 := (or #99 #33)
#104 := (forall (vars (?v0 Int)) #100)
#231 := (iff #104 #230)
#228 := (iff #100 #227)
#225 := (iff #99 #224)
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [quant-intro #229]: #231
#34 := (implies #30 #33)
#35 := (forall (vars (?v0 Int)) #34)
#105 := (iff #35 #104)
#101 := (iff #34 #100)
#102 := [rewrite]: #101
#97 := (iff #34 #34)
#98 := [monotonicity #96]: #97
#103 := [trans #98 #102]: #101
#106 := [quant-intro #103]: #105
#73 := [asserted]: #35
#107 := [mp #73 #106]: #104
#233 := [mp #107 #232]: #230
#293 := [mp~ #233 #292]: #230
#802 := [mp #293 #801]: #797
#784 := (not #797)
#785 := (or #784 #462 #783)
#463 := (= #466 #82)
#467 := (or #462 #463)
#786 := (or #784 #467)
#779 := (iff #786 #785)
#782 := (or #784 #777)
#438 := (iff #782 #785)
#443 := [rewrite]: #438
#788 := (iff #786 #782)
#451 := (iff #467 #777)
#781 := (iff #463 #783)
#446 := [rewrite]: #781
#452 := [monotonicity #446]: #451
#778 := [monotonicity #452]: #788
#439 := [trans #778 #443]: #779
#787 := [quant-inst #82]: #786
#780 := [mp #787 #439]: #785
#522 := [unit-resolution #780 #802]: #777
#523 := [unit-resolution #522 #530]: #783
#564 := (not #783)
#511 := (or #564 #423)
#560 := [th-lemma arith triangle-eq]: #511
#565 := [unit-resolution #560 #523]: #423
#544 := (not #423)
#432 := (or #772 #503 #545 #544)
#547 := [th-lemma arith assign-bounds 1 -1 1]: #432
#433 := [unit-resolution #547 #565 #444 #525]: #772
#409 := (<= #466 0::Int)
#631 := (<= #18 0::Int)
#418 := (or #597 #631)
#420 := [th-lemma arith triangle-eq]: #418
#391 := [unit-resolution #420 #546]: #631
#713 := (<= #14 0::Int)
#394 := [unit-resolution #502 #539]: #414
#388 := (or #676 #713)
#542 := [th-lemma arith triangle-eq]: #388
#527 := [unit-resolution #542 #394]: #713
#764 := (>= #570 0::Int)
#521 := (or #564 #764)
#515 := [th-lemma arith triangle-eq]: #521
#528 := [unit-resolution #515 #523]: #764
#529 := (not #764)
#526 := (not #631)
#554 := (not #713)
#513 := (or #409 #554 #526 #529)
#514 := [th-lemma arith assign-bounds -1 -1 1]: #513
#516 := [unit-resolution #514 #528 #527 #391]: #409
#518 := (not #772)
#517 := (not #409)
#519 := (or #427 #517 #518)
#520 := [th-lemma arith triangle-eq]: #519
#552 := [unit-resolution #520 #516 #433]: #427
#534 := [trans #552 #553]: #536
#377 := [monotonicity #534]: #390
#537 := [symm #377]: #379
#399 := (= f3 #376)
#400 := [symm #499]: #399
#824 := [trans #400 #537]: #541
#825 := [trans #824 #535]: #88
#91 := (not #88)
#15 := (* #14 1::Int)
#19 := (+ #15 #18)
#20 := (f4 f5 #19)
#21 := (= f3 #20)
#22 := (not #21)
#92 := (iff #22 #91)
#89 := (iff #21 #88)
#86 := (= #20 #85)
#83 := (= #19 #82)
#80 := (= #15 #14)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#90 := [monotonicity #87]: #89
#93 := [monotonicity #90]: #92
#71 := [asserted]: #22
#94 := [mp #71 #93]: #91
#826 := [unit-resolution #94 #825]: false
#827 := [lemma #826]: #692
#384 := (or #429 #716)
#393 := (= #376 #85)
#395 := (= #11 #82)
#412 := (= #14 #82)
#426 := [hypothesis]: #740
#431 := [hypothesis]: #692
#435 := (or #429 #650)
#605 := (or #603 #429 #650)
#566 := [def-axiom]: #605
#436 := [unit-resolution #566 #434]: #435
#425 := [unit-resolution #436 #431]: #650
#588 := (not #650)
#593 := (or #588 #716 #682)
#594 := [def-axiom]: #593
#437 := [unit-resolution #594 #425 #426]: #682
#421 := [unit-resolution #420 #437]: #631
#410 := [unit-resolution #422 #437]: #611
#413 := [th-lemma arith eq-propagate -1 -1 #410 #421]: #412
#403 := (= #11 #14)
#707 := (<= #382 0::Int)
#416 := [unit-resolution #496 #431]: #719
#411 := [unit-resolution #697 #416 #426]: #758
#417 := (or #700 #707)
#392 := [th-lemma arith triangle-eq]: #417
#396 := [unit-resolution #392 #411]: #707
#397 := [unit-resolution #449 #411]: #708
#402 := [unit-resolution #459 #501]: #532
#533 := (>= #549 0::Int)
#404 := (or #458 #533)
#405 := [th-lemma arith triangle-eq]: #404
#407 := [unit-resolution #405 #501]: #533
#408 := [th-lemma arith eq-propagate 1 1 -1 -1 #407 #402 #397 #396]: #403
#398 := [trans #408 #413]: #395
#401 := [monotonicity #398]: #393
#386 := [trans #400 #401]: #88
#383 := [unit-resolution #94 #386]: false
#387 := [lemma #383]: #384
#389 := [unit-resolution #387 #827]: #716
#381 := (or #429 #738)
#380 := [hypothesis]: #762
#559 := [hypothesis]: #749
#561 := [unit-resolution #704 #559]: #740
#563 := [unit-resolution #387 #561]: #429
#582 := (or #692 #415)
#583 := [th-lemma arith triangle-eq]: #582
#558 := [unit-resolution #583 #563 #559]: false
#406 := [lemma #558]: #415
#378 := [unit-resolution #469 #431 #406 #380]: false
#823 := [lemma #378]: #381
#385 := [unit-resolution #823 #827]: #738
#714 := (or #740 #762)
#715 := [def-axiom]: #714
[unit-resolution #715 #385 #389]: false
727c827bb11139e8216aa2242907ab223b6a5c32 832 0
unsat
#2 := false
#28 := 0::Int
decl f9 :: (-> S6 S2 Int)
decl f3 :: S2
#7 := f3
decl f10 :: S6
#10 := f10
#11 := (f9 f10 f3)
#764 := (>= #11 0::Int)
#740 := (not #764)
#417 := (<= #11 0::Int)
#751 := (not #417)
#742 := (or #751 #740)
#714 := (not #742)
#431 := (= #11 0::Int)
#691 := (not #431)
decl f4 :: (-> S3 Int S2)
decl f6 :: (-> S4 Int Int)
#13 := 3::Int
decl f7 :: (-> S5 Int S4)
decl f11 :: S5
#16 := f11
#17 := (f7 f11 #11)
#18 := (f6 #17 3::Int)
decl f8 :: S5
#9 := f8
#12 := (f7 f8 #11)
#14 := (f6 #12 3::Int)
#80 := (* 3::Int #14)
#83 := (+ #80 #18)
decl f5 :: S3
#8 := f5
#86 := (f4 f5 #83)
#89 := (= f3 #86)
#377 := (f4 f5 #11)
#903 := (= #377 #86)
#901 := (= #86 #377)
#899 := (= #83 #11)
#895 := (= 0::Int #11)
#859 := [hypothesis]: #431
#896 := [symm #859]: #895
#897 := (= #83 0::Int)
#468 := (f9 f10 #86)
#429 := (= #468 0::Int)
#774 := (>= #468 0::Int)
#636 := (>= #18 0::Int)
#685 := (= #18 0::Int)
#840 := (or #691 #685)
#574 := -3::Int
#152 := -1::Int
#761 := (* -1::Int #11)
#705 := (mod #761 -3::Int)
#668 := (+ #18 #705)
#656 := (= #668 0::Int)
#709 := (mod #11 3::Int)
#686 := (* -1::Int #709)
#687 := (+ #18 #686)
#677 := (= #687 0::Int)
#661 := (if #742 #677 #656)
#664 := (if #431 #685 #661)
#29 := (:var 0 Int)
#40 := (:var 1 Int)
#60 := (f7 f11 #40)
#61 := (f6 #60 #29)
#818 := (pattern #61)
#156 := (* -1::Int #29)
#153 := (* -1::Int #40)
#175 := (mod #153 #156)
#366 := (+ #61 #175)
#367 := (= #366 0::Int)
#62 := (mod #40 #29)
#363 := (* -1::Int #62)
#364 := (+ #61 #363)
#365 := (= #364 0::Int)
#130 := (<= #29 0::Int)
#242 := (>= #40 0::Int)
#310 := (or #242 #130)
#311 := (not #310)
#126 := (<= #40 0::Int)
#306 := (or #126 #130)
#307 := (not #306)
#314 := (or #307 #311)
#368 := (if #314 #365 #367)
#362 := (= #61 0::Int)
#43 := (= #40 0::Int)
#369 := (if #43 #362 #368)
#361 := (= #61 #40)
#44 := (= #29 0::Int)
#370 := (if #44 #361 #369)
#819 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #818) #370)
#373 := (forall (vars (?v0 Int) (?v1 Int)) #370)
#822 := (iff #373 #819)
#820 := (iff #370 #370)
#821 := [refl]: #820
#823 := [quant-intro #821]: #822
#181 := (* -1::Int #175)
#330 := (if #314 #62 #181)
#333 := (if #43 0::Int #330)
#336 := (if #44 #40 #333)
#339 := (= #61 #336)
#342 := (forall (vars (?v0 Int) (?v1 Int)) #339)
#374 := (iff #342 #373)
#371 := (iff #339 #370)
#372 := [rewrite]: #371
#375 := [quant-intro #372]: #374
#131 := (not #130)
#245 := (not #242)
#248 := (and #245 #131)
#127 := (not #126)
#134 := (and #127 #131)
#251 := (or #134 #248)
#267 := (if #251 #62 #181)
#270 := (if #43 0::Int #267)
#273 := (if #44 #40 #270)
#276 := (= #61 #273)
#279 := (forall (vars (?v0 Int) (?v1 Int)) #276)
#343 := (iff #279 #342)
#340 := (iff #276 #339)
#337 := (= #273 #336)
#334 := (= #270 #333)
#331 := (= #267 #330)
#315 := (iff #251 #314)
#312 := (iff #248 #311)
#313 := [rewrite]: #312
#308 := (iff #134 #307)
#309 := [rewrite]: #308
#316 := [monotonicity #309 #313]: #315
#332 := [monotonicity #316]: #331
#335 := [monotonicity #332]: #334
#338 := [monotonicity #335]: #337
#341 := [monotonicity #338]: #340
#344 := [quant-intro #341]: #343
#303 := (~ #279 #279)
#301 := (~ #276 #276)
#302 := [refl]: #301
#304 := [nnf-pos #302]: #303
#137 := (<= 0::Int #40)
#138 := (not #137)
#146 := (and #138 #131)
#149 := (or #134 #146)
#186 := (if #149 #62 #181)
#189 := (if #43 0::Int #186)
#192 := (if #44 #40 #189)
#195 := (= #61 #192)
#198 := (forall (vars (?v0 Int) (?v1 Int)) #195)
#280 := (iff #198 #279)
#277 := (iff #195 #276)
#274 := (= #192 #273)
#271 := (= #189 #270)
#268 := (= #186 #267)
#252 := (iff #149 #251)
#249 := (iff #146 #248)
#246 := (iff #138 #245)
#243 := (iff #137 #242)
#244 := [rewrite]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [monotonicity #250]: #252
#269 := [monotonicity #253]: #268
#272 := [monotonicity #269]: #271
#275 := [monotonicity #272]: #274
#278 := [monotonicity #275]: #277
#281 := [quant-intro #278]: #280
#54 := (- #29)
#53 := (- #40)
#63 := (mod #53 #54)
#64 := (- #63)
#47 := (< 0::Int #29)
#49 := (< #40 0::Int)
#50 := (and #49 #47)
#46 := (< 0::Int #40)
#48 := (and #46 #47)
#51 := (or #48 #50)
#65 := (if #51 #62 #64)
#66 := (if #43 0::Int #65)
#67 := (if #44 #40 #66)
#68 := (= #61 #67)
#69 := (forall (vars (?v0 Int) (?v1 Int)) #68)
#199 := (iff #69 #198)
#196 := (iff #68 #195)
#193 := (= #67 #192)
#190 := (= #66 #189)
#187 := (= #65 #186)
#184 := (= #64 #181)
#178 := (- #175)
#182 := (= #178 #181)
#183 := [rewrite]: #182
#179 := (= #64 #178)
#176 := (= #63 #175)
#157 := (= #54 #156)
#158 := [rewrite]: #157
#154 := (= #53 #153)
#155 := [rewrite]: #154
#177 := [monotonicity #155 #158]: #176
#180 := [monotonicity #177]: #179
#185 := [trans #180 #183]: #184
#150 := (iff #51 #149)
#147 := (iff #50 #146)
#132 := (iff #47 #131)
#133 := [rewrite]: #132
#139 := (iff #49 #138)
#143 := (iff #138 #138)
#141 := (iff #137 #137)
#142 := [rewrite]: #141
#144 := [monotonicity #142]: #143
#140 := [rewrite]: #139
#145 := [trans #140 #144]: #139
#148 := [monotonicity #145 #133]: #147
#135 := (iff #48 #134)
#128 := (iff #46 #127)
#129 := [rewrite]: #128
#136 := [monotonicity #129 #133]: #135
#151 := [monotonicity #136 #148]: #150
#188 := [monotonicity #151 #185]: #187
#191 := [monotonicity #188]: #190
#194 := [monotonicity #191]: #193
#197 := [monotonicity #194]: #196
#200 := [quant-intro #197]: #199
#76 := [asserted]: #69
#201 := [mp #76 #200]: #198
#282 := [mp #201 #281]: #279
#305 := [mp~ #282 #304]: #279
#345 := [mp #305 #344]: #342
#376 := [mp #345 #375]: #373
#824 := [mp #376 #823]: #819
#651 := (not #819)
#647 := (or #651 #664)
#483 := (* -1::Int 3::Int)
#688 := (mod #761 #483)
#666 := (+ #18 #688)
#667 := (= #666 0::Int)
#777 := (<= 3::Int 0::Int)
#765 := (or #764 #777)
#487 := (not #765)
#775 := (or #417 #777)
#778 := (not #775)
#488 := (or #778 #487)
#669 := (if #488 #677 #667)
#670 := (if #431 #685 #669)
#684 := (= #18 #11)
#432 := (= 3::Int 0::Int)
#671 := (if #432 #684 #670)
#648 := (or #651 #671)
#652 := (iff #648 #647)
#654 := (iff #647 #647)
#650 := [rewrite]: #654
#645 := (iff #671 #664)
#638 := (if false #684 #664)
#533 := (iff #638 #664)
#644 := [rewrite]: #533
#639 := (iff #671 #638)
#659 := (iff #670 #664)
#662 := (iff #669 #661)
#657 := (iff #667 #656)
#674 := (= #666 #668)
#672 := (= #688 #705)
#727 := (= #483 -3::Int)
#728 := [rewrite]: #727
#673 := [monotonicity #728]: #672
#660 := [monotonicity #673]: #674
#658 := [monotonicity #660]: #657
#571 := (iff #488 #742)
#741 := (iff #487 #740)
#733 := (iff #765 #764)
#594 := (or #764 false)
#738 := (iff #594 #764)
#739 := [rewrite]: #738
#736 := (iff #765 #594)
#757 := (iff #777 false)
#746 := [rewrite]: #757
#737 := [monotonicity #746]: #736
#734 := [trans #737 #739]: #733
#735 := [monotonicity #734]: #741
#592 := (iff #778 #751)
#750 := (iff #775 #417)
#747 := (or #417 false)
#744 := (iff #747 #417)
#749 := [rewrite]: #744
#748 := (iff #775 #747)
#743 := [monotonicity #746]: #748
#745 := [trans #743 #749]: #750
#593 := [monotonicity #745]: #592
#573 := [monotonicity #593 #735]: #571
#663 := [monotonicity #573 #658]: #662
#665 := [monotonicity #663]: #659
#474 := (iff #432 false)
#475 := [rewrite]: #474
#640 := [monotonicity #475 #665]: #639
#646 := [trans #640 #644]: #645
#653 := [monotonicity #646]: #652
#655 := [trans #653 #650]: #652
#649 := [quant-inst #11 #13]: #648
#635 := [mp #649 #655]: #647
#580 := [unit-resolution #635 #824]: #664
#633 := (not #664)
#613 := (or #633 #691 #685)
#634 := [def-axiom]: #613
#837 := [unit-resolution #634 #580]: #840
#850 := [unit-resolution #837 #859]: #685
#595 := (not #685)
#851 := (or #595 #636)
#838 := [th-lemma arith triangle-eq]: #851
#839 := [unit-resolution #838 #850]: #636
#704 := (>= #14 0::Int)
#489 := (div #11 3::Int)
#585 := (* -3::Int #489)
#586 := (+ #11 #585 #686)
#584 := (= #586 0::Int)
#1 := true
#219 := [true-axiom]: true
#539 := (or false #584)
#543 := [th-lemma arith]: #539
#536 := [unit-resolution #543 #219]: #584
#588 := (<= #586 0::Int)
#500 := (not #588)
#545 := (>= #709 3::Int)
#548 := (not #545)
#544 := (or false #548)
#537 := [th-lemma arith]: #544
#540 := [unit-resolution #537 #219]: #548
#541 := (not #704)
#527 := [hypothesis]: #541
#490 := (* -1::Int #489)
#383 := (+ #14 #490)
#711 := (>= #383 0::Int)
#760 := (= #383 0::Int)
#730 := (div #761 -3::Int)
#732 := (* -1::Int #730)
#616 := (+ #14 #732)
#625 := (= #616 0::Int)
#724 := (if #742 #760 #625)
#416 := (= #14 0::Int)
#679 := (not #416)
#529 := (or #679 #704)
#530 := [th-lemma arith triangle-eq]: #529
#528 := [unit-resolution #530 #527]: #679
#513 := (or #691 #416)
#626 := (if #431 #416 #724)
#41 := (f7 f8 #40)
#42 := (f6 #41 #29)
#811 := (pattern #42)
#159 := (div #153 #156)
#350 := (* -1::Int #159)
#351 := (+ #42 #350)
#352 := (= #351 0::Int)
#52 := (div #40 #29)
#347 := (* -1::Int #52)
#348 := (+ #42 #347)
#349 := (= #348 0::Int)
#353 := (if #314 #349 #352)
#346 := (= #42 0::Int)
#45 := (or #43 #44)
#354 := (if #45 #346 #353)
#812 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #811) #354)
#357 := (forall (vars (?v0 Int) (?v1 Int)) #354)
#815 := (iff #357 #812)
#813 := (iff #354 #354)
#814 := [refl]: #813
#816 := [quant-intro #814]: #815
#317 := (if #314 #52 #159)
#320 := (if #45 0::Int #317)
#323 := (= #42 #320)
#326 := (forall (vars (?v0 Int) (?v1 Int)) #323)
#358 := (iff #326 #357)
#355 := (iff #323 #354)
#356 := [rewrite]: #355
#359 := [quant-intro #356]: #358
#254 := (if #251 #52 #159)
#257 := (if #45 0::Int #254)
#260 := (= #42 #257)
#263 := (forall (vars (?v0 Int) (?v1 Int)) #260)
#327 := (iff #263 #326)
#324 := (iff #260 #323)
#321 := (= #257 #320)
#318 := (= #254 #317)
#319 := [monotonicity #316]: #318
#322 := [monotonicity #319]: #321
#325 := [monotonicity #322]: #324
#328 := [quant-intro #325]: #327
#298 := (~ #263 #263)
#296 := (~ #260 #260)
#297 := [refl]: #296
#299 := [nnf-pos #297]: #298
#162 := (if #149 #52 #159)
#165 := (if #45 0::Int #162)
#168 := (= #42 #165)
#171 := (forall (vars (?v0 Int) (?v1 Int)) #168)
#264 := (iff #171 #263)
#261 := (iff #168 #260)
#258 := (= #165 #257)
#255 := (= #162 #254)
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [monotonicity #259]: #261
#265 := [quant-intro #262]: #264
#55 := (div #53 #54)
#56 := (if #51 #52 #55)
#57 := (if #45 0::Int #56)
#58 := (= #42 #57)
#59 := (forall (vars (?v0 Int) (?v1 Int)) #58)
#172 := (iff #59 #171)
#169 := (iff #58 #168)
#166 := (= #57 #165)
#163 := (= #56 #162)
#160 := (= #55 #159)
#161 := [monotonicity #155 #158]: #160
#164 := [monotonicity #151 #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [quant-intro #170]: #172
#75 := [asserted]: #59
#174 := [mp #75 #173]: #171
#266 := [mp #174 #265]: #263
#300 := [mp~ #266 #299]: #263
#329 := [mp #300 #328]: #326
#360 := [mp #329 #359]: #357
#817 := [mp #360 #816]: #812
#628 := (not #812)
#629 := (or #628 #626)
#484 := (div #761 #483)
#758 := (* -1::Int #484)
#762 := (+ #14 #758)
#759 := (= #762 0::Int)
#763 := (if #488 #760 #759)
#776 := (or #431 #432)
#473 := (if #776 #416 #763)
#630 := (or #628 #473)
#632 := (iff #630 #629)
#722 := (iff #629 #629)
#726 := [rewrite]: #722
#627 := (iff #473 #626)
#609 := (iff #763 #724)
#720 := (iff #759 #625)
#575 := (= #762 #616)
#614 := (= #758 #732)
#731 := (= #484 #730)
#729 := [monotonicity #728]: #731
#615 := [monotonicity #729]: #614
#723 := [monotonicity #615]: #575
#721 := [monotonicity #723]: #720
#624 := [monotonicity #573 #721]: #609
#756 := (iff #776 #431)
#476 := (or #431 false)
#470 := (iff #476 #431)
#752 := [rewrite]: #470
#754 := (iff #776 #476)
#755 := [monotonicity #475]: #754
#753 := [trans #755 #752]: #756
#620 := [monotonicity #753 #624]: #627
#725 := [monotonicity #620]: #632
#713 := [trans #725 #726]: #632
#631 := [quant-inst #11 #13]: #630
#715 := [mp #631 #713]: #629
#531 := [unit-resolution #715 #817]: #626
#694 := (not #626)
#695 := (or #694 #691 #416)
#675 := [def-axiom]: #695
#515 := [unit-resolution #675 #531]: #513
#516 := [unit-resolution #515 #528]: #691
#517 := (or #431 #724)
#676 := (or #694 #431 #724)
#678 := [def-axiom]: #676
#518 := [unit-resolution #678 #531]: #517
#519 := [unit-resolution #518 #516]: #724
#600 := (f9 f10 #377)
#601 := (= #600 0::Int)
#526 := (not #601)
#503 := (iff #691 #526)
#525 := (iff #431 #601)
#523 := (iff #601 #431)
#521 := (= #600 #11)
#462 := (= #377 f3)
#23 := (:var 0 S2)
#24 := (f9 f10 #23)
#791 := (pattern #24)
#25 := (f4 f5 #24)
#26 := (= #25 #23)
#792 := (forall (vars (?v0 S2)) (:pat #791) #26)
#27 := (forall (vars (?v0 S2)) #26)
#795 := (iff #27 #792)
#793 := (iff #26 #26)
#794 := [refl]: #793
#796 := [quant-intro #794]: #795
#291 := (~ #27 #27)
#289 := (~ #26 #26)
#290 := [refl]: #289
#292 := [nnf-pos #290]: #291
#72 := [asserted]: #27
#283 := [mp~ #72 #292]: #27
#797 := [mp #283 #796]: #792
#455 := (not #792)
#466 := (or #455 #462)
#467 := [quant-inst #7]: #466
#520 := [unit-resolution #467 #797]: #462
#522 := [monotonicity #520]: #521
#524 := [monotonicity #522]: #523
#514 := [symm #524]: #525
#505 := [monotonicity #514]: #503
#506 := [mp #516 #505]: #526
#602 := (or #764 #601)
#31 := (f4 f5 #29)
#798 := (pattern #31)
#32 := (f9 f10 #31)
#37 := (= #32 0::Int)
#222 := (>= #29 0::Int)
#235 := (or #222 #37)
#805 := (forall (vars (?v0 Int)) (:pat #798) #235)
#238 := (forall (vars (?v0 Int)) #235)
#808 := (iff #238 #805)
#806 := (iff #235 #235)
#807 := [refl]: #806
#809 := [quant-intro #807]: #808
#293 := (~ #238 #238)
#220 := (~ #235 #235)
#221 := [refl]: #220
#294 := [nnf-pos #221]: #293
#30 := (<= 0::Int #29)
#117 := (or #30 #37)
#122 := (forall (vars (?v0 Int)) #117)
#239 := (iff #122 #238)
#236 := (iff #117 #235)
#223 := (iff #30 #222)
#224 := [rewrite]: #223
#237 := [monotonicity #224]: #236
#240 := [quant-intro #237]: #239
#36 := (< #29 0::Int)
#38 := (implies #36 #37)
#39 := (forall (vars (?v0 Int)) #38)
#123 := (iff #39 #122)
#120 := (iff #38 #117)
#100 := (not #30)
#114 := (implies #100 #37)
#118 := (iff #114 #117)
#119 := [rewrite]: #118
#115 := (iff #38 #114)
#109 := (iff #36 #100)
#111 := (iff #100 #100)
#96 := (iff #30 #30)
#97 := [rewrite]: #96
#112 := [monotonicity #97]: #111
#110 := [rewrite]: #109
#113 := [trans #110 #112]: #109
#116 := [monotonicity #113]: #115
#121 := [trans #116 #119]: #120
#124 := [quant-intro #121]: #123
#74 := [asserted]: #39
#125 := [mp #74 #124]: #122
#241 := [mp #125 #240]: #238
#295 := [mp~ #241 #294]: #238
#810 := [mp #295 #809]: #805
#768 := (not #805)
#605 := (or #768 #764 #601)
#606 := (or #768 #602)
#607 := (iff #606 #605)
#568 := [rewrite]: #607
#591 := [quant-inst #11]: #606
#569 := [mp #591 #568]: #605
#507 := [unit-resolution #569 #810]: #602
#508 := [unit-resolution #507 #506]: #764
#509 := (or #431 #751 #740)
#510 := [th-lemma arith triangle-eq]: #509
#511 := [unit-resolution #510 #516]: #742
#504 := [unit-resolution #511 #508]: #751
#706 := (or #742 #417)
#716 := [def-axiom]: #706
#512 := [unit-resolution #716 #504]: #742
#697 := (not #724)
#699 := (or #697 #714 #760)
#700 := [def-axiom]: #699
#497 := [unit-resolution #700 #512 #519]: #760
#698 := (not #760)
#498 := (or #698 #711)
#499 := [th-lemma arith triangle-eq]: #498
#501 := [unit-resolution #499 #497]: #711
#502 := (not #711)
#491 := (or #500 #740 #545 #704 #502)
#492 := [th-lemma arith assign-bounds 1 1 3 -3]: #491
#493 := [unit-resolution #492 #508 #501 #527 #540]: #500
#485 := (not #584)
#494 := (or #485 #588)
#495 := [th-lemma arith triangle-eq]: #494
#486 := [unit-resolution #495 #493 #536]: false
#496 := [lemma #486]: #704
#572 := (* -1::Int #468)
#779 := (+ #80 #18 #572)
#425 := (<= #779 0::Int)
#442 := (= #779 0::Int)
#463 := (>= #83 0::Int)
#565 := (not #636)
#408 := (or #463 #541 #565)
#563 := [th-lemma arith assign-bounds 3 -1]: #408
#458 := [unit-resolution #563 #839 #496]: #463
#464 := (not #463)
#783 := (or #464 #442)
#33 := (= #32 #29)
#225 := (not #222)
#228 := (or #225 #33)
#799 := (forall (vars (?v0 Int)) (:pat #798) #228)
#231 := (forall (vars (?v0 Int)) #228)
#802 := (iff #231 #799)
#800 := (iff #228 #228)
#801 := [refl]: #800
#803 := [quant-intro #801]: #802
#288 := (~ #231 #231)
#284 := (~ #228 #228)
#287 := [refl]: #284
#285 := [nnf-pos #287]: #288
#101 := (or #100 #33)
#105 := (forall (vars (?v0 Int)) #101)
#232 := (iff #105 #231)
#229 := (iff #101 #228)
#226 := (iff #100 #225)
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#34 := (implies #30 #33)
#35 := (forall (vars (?v0 Int)) #34)
#106 := (iff #35 #105)
#102 := (iff #34 #101)
#103 := [rewrite]: #102
#98 := (iff #34 #34)
#99 := [monotonicity #97]: #98
#104 := [trans #99 #103]: #102
#107 := [quant-intro #104]: #106
#73 := [asserted]: #35
#108 := [mp #73 #107]: #105
#234 := [mp #108 #233]: #231
#286 := [mp~ #234 #285]: #231
#804 := [mp #286 #803]: #799
#786 := (not #799)
#787 := (or #786 #464 #442)
#465 := (= #468 #83)
#469 := (or #464 #465)
#788 := (or #786 #469)
#781 := (iff #788 #787)
#784 := (or #786 #783)
#440 := (iff #784 #787)
#445 := [rewrite]: #440
#790 := (iff #788 #784)
#453 := (iff #469 #783)
#785 := (iff #465 #442)
#448 := [rewrite]: #785
#454 := [monotonicity #448]: #453
#780 := [monotonicity #454]: #790
#441 := [trans #780 #445]: #781
#789 := [quant-inst #83]: #788
#782 := [mp #789 #441]: #787
#387 := [unit-resolution #782 #804]: #783
#844 := [unit-resolution #387 #458]: #442
#385 := (not #442)
#388 := (or #385 #425)
#389 := [th-lemma arith triangle-eq]: #388
#858 := [unit-resolution #389 #844]: #425
#386 := (not #425)
#860 := (or #774 #541 #565 #386)
#845 := [th-lemma arith assign-bounds 3 -1 1]: #860
#846 := [unit-resolution #845 #858 #496 #839]: #774
#411 := (<= #468 0::Int)
#581 := (<= #18 0::Int)
#847 := (or #595 #581)
#848 := [th-lemma arith triangle-eq]: #847
#849 := [unit-resolution #848 #850]: #581
#707 := (<= #14 0::Int)
#852 := [unit-resolution #515 #859]: #416
#853 := (or #679 #707)
#854 := [th-lemma arith triangle-eq]: #853
#855 := [unit-resolution #854 #852]: #707
#766 := (>= #779 0::Int)
#381 := (or #385 #766)
#379 := [th-lemma arith triangle-eq]: #381
#842 := [unit-resolution #379 #844]: #766
#825 := (not #766)
#881 := (not #581)
#843 := (not #707)
#882 := (or #411 #843 #881 #825)
#883 := [th-lemma arith assign-bounds -3 -1 1]: #882
#884 := [unit-resolution #883 #842 #855 #849]: #411
#856 := (not #774)
#885 := (not #411)
#857 := (or #429 #885 #856)
#890 := [th-lemma arith triangle-eq]: #857
#891 := [unit-resolution #890 #884 #846]: #429
#482 := (= #83 #468)
#449 := (+ #83 #572)
#459 := (<= #449 0::Int)
#391 := (or #459 #386)
#378 := [th-lemma arith assign-bounds -1]: #391
#892 := [unit-resolution #378 #858]: #459
#460 := (>= #449 0::Int)
#826 := (or #460 #825)
#827 := [th-lemma arith assign-bounds -1]: #826
#893 := [unit-resolution #827 #842]: #460
#830 := (not #460)
#829 := (not #459)
#831 := (or #482 #829 #830)
#832 := [th-lemma arith triangle-eq]: #831
#894 := [unit-resolution #832 #893 #892]: #482
#898 := [trans #894 #891]: #897
#900 := [trans #898 #896]: #899
#902 := [monotonicity #900]: #901
#904 := [symm #902]: #903
#409 := (= f3 #377)
#405 := [symm #520]: #409
#905 := [trans #405 #904]: #89
#92 := (not #89)
#15 := (* #14 3::Int)
#19 := (+ #15 #18)
#20 := (f4 f5 #19)
#21 := (= f3 #20)
#22 := (not #21)
#93 := (iff #22 #92)
#90 := (iff #21 #89)
#87 := (= #20 #86)
#84 := (= #19 #83)
#81 := (= #15 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#88 := [monotonicity #85]: #87
#91 := [monotonicity #88]: #90
#94 := [monotonicity #91]: #93
#71 := [asserted]: #22
#95 := [mp #71 #94]: #92
#906 := [unit-resolution #95 #905]: false
#907 := [lemma #906]: #691
#835 := (or #431 #714)
#710 := (<= #383 0::Int)
#603 := [hypothesis]: #742
#604 := [hypothesis]: #691
#576 := [unit-resolution #518 #604]: #724
#583 := [unit-resolution #700 #576 #603]: #760
#582 := (or #698 #710)
#578 := [th-lemma arith triangle-eq]: #582
#579 := [unit-resolution #578 #583]: #710
#617 := (<= #687 0::Int)
#567 := (or #431 #661)
#589 := (or #633 #431 #661)
#590 := [def-axiom]: #589
#546 := [unit-resolution #590 #580]: #567
#566 := [unit-resolution #546 #604]: #661
#643 := (not #661)
#611 := (or #643 #714 #677)
#618 := [def-axiom]: #611
#562 := [unit-resolution #618 #566 #603]: #677
#610 := (not #677)
#549 := (or #610 #617)
#553 := [th-lemma arith triangle-eq]: #549
#555 := [unit-resolution #553 #562]: #617
#556 := [unit-resolution #499 #583]: #711
#641 := (>= #687 0::Int)
#554 := (or #610 #641)
#557 := [th-lemma arith triangle-eq]: #554
#550 := [unit-resolution #557 #562]: #641
#559 := (>= #709 0::Int)
#551 := (or false #559)
#547 := [th-lemma arith]: #551
#552 := [unit-resolution #547 #219]: #559
#414 := (not #641)
#587 := (not #559)
#570 := (or #636 #587 #414)
#560 := [th-lemma arith assign-bounds 1 1]: #570
#561 := [unit-resolution #560 #550 #552]: #636
#564 := [unit-resolution #563 #561 #496]: #463
#384 := [unit-resolution #387 #564]: #442
#390 := [unit-resolution #389 #384]: #425
#380 := [unit-resolution #378 #390]: #459
#382 := [unit-resolution #379 #384]: #766
#828 := [unit-resolution #827 #382]: #460
#833 := [unit-resolution #832 #828 #380]: #482
#427 := (not #710)
#439 := (not #617)
#402 := (not #482)
#394 := (or #402 #414 #502 #439 #427)
#477 := (f4 f5 #468)
#478 := (= #477 #86)
#480 := (or #455 #478)
#481 := [quant-inst #86]: #480
#426 := [unit-resolution #481 #797]: #478
#396 := (= f3 #477)
#410 := (= #377 #477)
#406 := (= #11 #468)
#428 := [hypothesis]: #482
#450 := (= #11 #83)
#461 := (* -1::Int #83)
#444 := (+ #11 #461)
#447 := (>= #444 0::Int)
#433 := [hypothesis]: #710
#558 := (>= #586 0::Int)
#434 := (or #485 #558)
#435 := [th-lemma arith triangle-eq]: #434
#436 := [unit-resolution #435 #536]: #558
#437 := [hypothesis]: #617
#438 := (not #558)
#420 := (or #447 #438 #427 #439)
#422 := [th-lemma arith assign-bounds -1 3 1]: #420
#423 := [unit-resolution #422 #437 #436 #433]: #447
#446 := (<= #444 0::Int)
#421 := [hypothesis]: #711
#424 := [unit-resolution #495 #536]: #588
#412 := [hypothesis]: #641
#415 := (or #446 #500 #502 #414)
#418 := [th-lemma arith assign-bounds -1 3 1]: #415
#413 := [unit-resolution #418 #412 #424 #421]: #446
#393 := (not #447)
#419 := (not #446)
#398 := (or #450 #419 #393)
#399 := [th-lemma arith triangle-eq]: #398
#404 := [unit-resolution #399 #413 #423]: #450
#407 := [trans #404 #428]: #406
#392 := [monotonicity #407]: #410
#397 := [trans #405 #392]: #396
#400 := [trans #397 #426]: #89
#401 := [unit-resolution #95 #400]: false
#403 := [lemma #401]: #394
#834 := [unit-resolution #403 #833 #550 #556 #555 #579]: false
#836 := [lemma #834]: #835
#908 := [unit-resolution #836 #907]: #714
#888 := (or #431 #740)
#886 := [hypothesis]: #764
#542 := [hypothesis]: #751
#532 := [unit-resolution #716 #542]: #742
#534 := [unit-resolution #836 #532]: #431
#535 := (or #691 #417)
#538 := [th-lemma arith triangle-eq]: #535
#452 := [unit-resolution #538 #534 #542]: false
#443 := [lemma #452]: #417
#887 := [unit-resolution #510 #604 #443 #886]: false
#889 := [lemma #887]: #888
#909 := [unit-resolution #889 #907]: #740
#717 := (or #742 #764)
#718 := [def-axiom]: #717
[unit-resolution #718 #909 #908]: false
810a5a888a26e956d3d96c0f529162bda0f4210f 76 0
unsat
#2 := false
#23 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#93 := -1::Int
#94 := (* -1::Int #11)
#9 := (f3 f4 f5)
#95 := (+ #9 #94)
#96 := (<= #95 0::Int)
#99 := (if #96 f5 f6)
#102 := (f3 f4 #99)
#110 := (* -1::Int #102)
#539 := (+ #11 #110)
#250 := (>= #539 0::Int)
#535 := (= #11 #102)
#238 := (= f6 #99)
#153 := (not #96)
#152 := (= f5 #99)
#534 := (not #152)
#550 := (= #9 #102)
#537 := [hypothesis]: #152
#259 := [monotonicity #537]: #550
#263 := (not #550)
#111 := (+ #9 #110)
#109 := (>= #111 0::Int)
#115 := (not #109)
#12 := (<= #9 #11)
#13 := (if #12 f5 f6)
#14 := (f3 f4 #13)
#15 := (<= #14 #9)
#16 := (not #15)
#116 := (iff #16 #115)
#113 := (iff #15 #109)
#105 := (<= #102 #9)
#108 := (iff #105 #109)
#112 := [rewrite]: #108
#106 := (iff #15 #105)
#103 := (= #14 #102)
#100 := (= #13 #99)
#97 := (iff #12 #96)
#98 := [rewrite]: #97
#101 := [monotonicity #98]: #100
#104 := [monotonicity #101]: #103
#107 := [monotonicity #104]: #106
#114 := [trans #107 #112]: #113
#117 := [monotonicity #114]: #116
#36 := [asserted]: #16
#118 := [mp #36 #117]: #115
#264 := (or #263 #109)
#265 := [th-lemma arith triangle-eq]: #264
#536 := [unit-resolution #265 #118]: #263
#260 := [unit-resolution #536 #259]: false
#538 := [lemma #260]: #534
#239 := (or #153 #152)
#240 := [def-axiom]: #239
#251 := [unit-resolution #240 #538]: #153
#231 := (or #96 #238)
#242 := [def-axiom]: #231
#252 := [unit-resolution #242 #251]: #238
#530 := [monotonicity #252]: #535
#531 := (not #535)
#246 := (or #531 #250)
#528 := [th-lemma arith triangle-eq]: #246
#532 := [unit-resolution #528 #530]: #250
#552 := (<= #111 0::Int)
#529 := (or #552 #109)
#533 := [th-lemma arith farkas 1 1]: #529
#522 := [unit-resolution #533 #118]: #552
[th-lemma arith farkas 1 1 1 #522 #251 #532]: false
c764f14739302794beeeecf4b3e02d727d24560d 70 0
unsat
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f5 :: S3
#8 := f5
#23 := 0::Int
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#93 := -1::Int
#94 := (* -1::Int #11)
#9 := (f3 f4 f5)
#95 := (+ #9 #94)
#96 := (<= #95 0::Int)
#99 := (if #96 f5 f6)
#102 := (f3 f4 #99)
#541 := (= #11 #102)
#238 := (= f6 #99)
#153 := (not #96)
#264 := [hypothesis]: #96
#109 := (* -1::Int #102)
#110 := (+ #11 #109)
#108 := (>= #110 0::Int)
#115 := (not #108)
#12 := (<= #9 #11)
#13 := (if #12 f5 f6)
#14 := (f3 f4 #13)
#15 := (<= #14 #11)
#16 := (not #15)
#116 := (iff #16 #115)
#113 := (iff #15 #108)
#105 := (<= #102 #11)
#111 := (iff #105 #108)
#112 := [rewrite]: #111
#106 := (iff #15 #105)
#103 := (= #14 #102)
#100 := (= #13 #99)
#97 := (iff #12 #96)
#98 := [rewrite]: #97
#101 := [monotonicity #98]: #100
#104 := [monotonicity #101]: #103
#107 := [monotonicity #104]: #106
#114 := [trans #107 #112]: #113
#117 := [monotonicity #114]: #116
#36 := [asserted]: #16
#118 := [mp #36 #117]: #115
#552 := (+ #9 #109)
#263 := (>= #552 0::Int)
#550 := (= #9 #102)
#152 := (= f5 #99)
#239 := (or #153 #152)
#240 := [def-axiom]: #239
#265 := [unit-resolution #240 #264]: #152
#266 := [monotonicity #265]: #550
#159 := (not #550)
#536 := (or #159 #263)
#537 := [th-lemma arith triangle-eq]: #536
#259 := [unit-resolution #537 #266]: #263
#260 := [th-lemma arith farkas -1 1 1 #259 #118 #264]: false
#534 := [lemma #260]: #153
#231 := (or #96 #238)
#242 := [def-axiom]: #231
#535 := [unit-resolution #242 #534]: #238
#539 := [monotonicity #535]: #541
#249 := (not #541)
#250 := (or #249 #108)
#251 := [th-lemma arith triangle-eq]: #250
[unit-resolution #251 #118 #539]: false
70478f198d5c721b2266791e6619f9347bb3a4b8 247 0
unsat
#2 := false
#24 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#505 := (= #9 0::Int)
decl f7 :: (-> S4 Int S3)
decl f8 :: S4
#18 := f8
#244 := (f7 f8 #9)
#563 := (f3 f4 #244)
#566 := (= #563 0::Int)
#231 := (>= #9 0::Int)
#405 := (not #231)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#94 := -1::Int
#95 := (* -1::Int #11)
#96 := (+ #9 #95)
#97 := (<= #96 0::Int)
#100 := (if #97 f5 f6)
#103 := (f3 f4 #100)
#111 := (* -1::Int #103)
#112 := (+ #9 #11 #111)
#110 := (>= #112 0::Int)
#116 := (not #110)
#15 := (+ #9 #11)
#12 := (<= #9 #11)
#13 := (if #12 f5 f6)
#14 := (f3 f4 #13)
#16 := (<= #14 #15)
#17 := (not #16)
#117 := (iff #17 #116)
#114 := (iff #16 #110)
#106 := (<= #103 #15)
#109 := (iff #106 #110)
#113 := [rewrite]: #109
#107 := (iff #16 #106)
#104 := (= #14 #103)
#101 := (= #13 #100)
#98 := (iff #12 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#108 := [monotonicity #105]: #107
#115 := [trans #108 #113]: #114
#118 := [monotonicity #115]: #117
#37 := [asserted]: #17
#119 := [mp #37 #118]: #116
#542 := (+ #11 #111)
#507 := (>= #542 0::Int)
#511 := (= #11 #103)
#239 := (= f6 #100)
#219 := (f7 f8 #103)
#349 := (= #219 #100)
#19 := (:var 0 S3)
#20 := (f3 f4 #19)
#568 := (pattern #20)
#21 := (f7 f8 #20)
#22 := (= #21 #19)
#569 := (forall (vars (?v0 S3)) (:pat #568) #22)
#23 := (forall (vars (?v0 S3)) #22)
#572 := (iff #23 #569)
#570 := (iff #22 #22)
#571 := [refl]: #570
#573 := [quant-intro #571]: #572
#92 := (~ #23 #23)
#142 := (~ #22 #22)
#143 := [refl]: #142
#93 := [nnf-pos #143]: #92
#38 := [asserted]: #23
#146 := [mp~ #38 #93]: #23
#574 := [mp #146 #573]: #569
#225 := (not #569)
#564 := (or #225 #349)
#565 := [quant-inst #100]: #564
#267 := [unit-resolution #565 #574]: #349
#519 := (= f6 #219)
#242 := (f7 f8 #11)
#518 := (= #242 #219)
#209 := (f3 f4 #219)
#371 := (= #209 #103)
#522 := (= #103 #209)
#532 := (= #100 #219)
#247 := [symm #267]: #532
#528 := [monotonicity #247]: #522
#513 := [symm #528]: #371
#516 := (= #11 #209)
#369 := (= 0::Int #209)
#550 := (= #209 0::Int)
#208 := (>= #103 0::Int)
#536 := (not #208)
#553 := (+ #9 #111)
#264 := (>= #553 0::Int)
#551 := (= #9 #103)
#153 := (= f5 #100)
#265 := (not #239)
#266 := [hypothesis]: #265
#232 := (or #97 #239)
#243 := [def-axiom]: #232
#160 := [unit-resolution #243 #266]: #97
#154 := (not #97)
#240 := (or #154 #153)
#241 := [def-axiom]: #240
#537 := [unit-resolution #241 #160]: #153
#538 := [monotonicity #537]: #551
#260 := (not #551)
#261 := (or #260 #264)
#535 := [th-lemma arith triangle-eq]: #261
#539 := [unit-resolution #535 #538]: #264
#540 := (not #264)
#250 := (or #536 #540 #154 #110)
#251 := [th-lemma arith assign-bounds 2 -1 -1]: #250
#252 := [unit-resolution #251 #160 #119 #539]: #536
#188 := (or #208 #550)
#25 := (:var 0 Int)
#27 := (f7 f8 #25)
#575 := (pattern #27)
#28 := (f3 f4 #27)
#33 := (= #28 0::Int)
#121 := (>= #25 0::Int)
#133 := (or #121 #33)
#582 := (forall (vars (?v0 Int)) (:pat #575) #133)
#136 := (forall (vars (?v0 Int)) #133)
#585 := (iff #136 #582)
#583 := (iff #133 #133)
#584 := [refl]: #583
#586 := [quant-intro #584]: #585
#150 := (~ #136 #136)
#148 := (~ #133 #133)
#149 := [refl]: #148
#151 := [nnf-pos #149]: #150
#26 := (<= 0::Int #25)
#65 := (or #26 #33)
#70 := (forall (vars (?v0 Int)) #65)
#137 := (iff #70 #136)
#134 := (iff #65 #133)
#120 := (iff #26 #121)
#122 := [rewrite]: #120
#135 := [monotonicity #122]: #134
#138 := [quant-intro #135]: #137
#32 := (< #25 0::Int)
#34 := (implies #32 #33)
#35 := (forall (vars (?v0 Int)) #34)
#71 := (iff #35 #70)
#68 := (iff #34 #65)
#48 := (not #26)
#62 := (implies #48 #33)
#66 := (iff #62 #65)
#67 := [rewrite]: #66
#63 := (iff #34 #62)
#57 := (iff #32 #48)
#59 := (iff #48 #48)
#44 := (iff #26 #26)
#45 := [rewrite]: #44
#60 := [monotonicity #45]: #59
#58 := [rewrite]: #57
#61 := [trans #58 #60]: #57
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#72 := [quant-intro #69]: #71
#40 := [asserted]: #35
#73 := [mp #40 #72]: #70
#139 := [mp #73 #138]: #136
#152 := [mp~ #139 #151]: #136
#587 := [mp #152 #586]: #582
#217 := (not #582)
#193 := (or #217 #208 #550)
#194 := (or #217 #188)
#552 := (iff #194 #193)
#555 := [rewrite]: #552
#554 := [quant-inst #103]: #194
#541 := [mp #554 #555]: #193
#253 := [unit-resolution #541 #587]: #188
#531 := [unit-resolution #253 #252]: #550
#370 := [symm #531]: #369
#514 := (= #11 0::Int)
#557 := (f3 f4 #242)
#206 := (= #557 0::Int)
#567 := (>= #11 0::Int)
#529 := (not #567)
#533 := (or #529 #540 #110)
#530 := [th-lemma arith assign-bounds 1 -1]: #533
#534 := [unit-resolution #530 #539 #119]: #529
#207 := (or #567 #206)
#545 := (or #217 #567 #206)
#546 := (or #217 #207)
#548 := (iff #546 #545)
#549 := [rewrite]: #548
#547 := [quant-inst #11]: #546
#544 := [mp #547 #549]: #545
#523 := [unit-resolution #544 #587]: #207
#524 := [unit-resolution #523 #534]: #206
#526 := (= #11 #557)
#520 := (= f6 #242)
#246 := (= #242 f6)
#556 := (or #225 #246)
#230 := [quant-inst #10]: #556
#525 := [unit-resolution #230 #574]: #246
#521 := [symm #525]: #520
#527 := [monotonicity #521]: #526
#515 := [trans #527 #524]: #514
#510 := [trans #515 #370]: #516
#517 := [trans #510 #513]: #511
#512 := [monotonicity #517]: #518
#348 := [trans #521 #512]: #519
#350 := [trans #348 #267]: #239
#351 := [unit-resolution #266 #350]: false
#504 := [lemma #351]: #239
#508 := [monotonicity #504]: #511
#497 := (not #507)
#498 := [hypothesis]: #497
#501 := (not #511)
#386 := (or #501 #507)
#401 := [th-lemma arith triangle-eq]: #386
#403 := [unit-resolution #401 #498 #508]: false
#404 := [lemma #403]: #507
#406 := (or #405 #497 #110)
#407 := [th-lemma arith assign-bounds 1 -1]: #406
#408 := [unit-resolution #407 #404 #119]: #405
#561 := (or #231 #566)
#222 := (or #217 #231 #566)
#558 := (or #217 #561)
#559 := (iff #558 #222)
#202 := [rewrite]: #559
#218 := [quant-inst #9]: #558
#543 := [mp #218 #202]: #222
#409 := [unit-resolution #543 #587]: #561
#502 := [unit-resolution #409 #408]: #566
#492 := (= #9 #563)
#503 := (= f5 #244)
#245 := (= #244 f5)
#560 := (or #225 #245)
#562 := [quant-inst #8]: #560
#499 := [unit-resolution #562 #574]: #245
#490 := [symm #499]: #503
#484 := [monotonicity #490]: #492
#481 := [trans #484 #502]: #505
#483 := (not #505)
#493 := (or #483 #231)
#494 := [th-lemma arith triangle-eq]: #493
[unit-resolution #494 #408 #481]: false
989cfc1345d635e466325cf81719187753d0ea0c 134 0
unsat
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f6 :: S3
#10 := f6
#29 := 0::Int
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#131 := -1::Int
#163 := (* -1::Int #14)
#11 := (f3 f4 f6)
#170 := (+ #11 #163)
#171 := (<= #170 0::Int)
#174 := (if #171 f6 f7)
#177 := (f3 f4 #174)
#565 := (= #14 #177)
#290 := (= f7 #174)
#205 := (not #171)
#204 := (= f6 #174)
#422 := (not #204)
#588 := (= #11 #177)
#579 := [hypothesis]: #204
#420 := [monotonicity #579]: #588
#576 := (not #588)
#185 := (* -1::Int #177)
#589 := (+ #11 #185)
#301 := (<= #589 0::Int)
#582 := (not #301)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#186 := (+ #9 #185)
#184 := (>= #186 0::Int)
#17 := (<= #11 #14)
#18 := (if #17 f6 f7)
#19 := (f3 f4 #18)
#60 := (<= #19 #9)
#188 := (iff #60 #184)
#180 := (<= #177 #9)
#183 := (iff #180 #184)
#187 := [rewrite]: #183
#181 := (iff #60 #180)
#178 := (= #19 #177)
#175 := (= #18 #174)
#172 := (iff #17 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#189 := [trans #182 #187]: #188
#61 := (not #60)
#53 := (<= #14 #9)
#54 := (not #53)
#49 := (<= #11 #9)
#50 := (not #49)
#57 := (and #50 #54)
#67 := (not #57)
#68 := (or #67 #61)
#73 := (not #68)
#20 := (< #9 #19)
#15 := (< #9 #14)
#12 := (< #9 #11)
#16 := (and #12 #15)
#21 := (implies #16 #20)
#22 := (not #21)
#74 := (iff #22 #73)
#71 := (iff #21 #68)
#64 := (implies #57 #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #21 #64)
#62 := (iff #20 #61)
#63 := [rewrite]: #62
#58 := (iff #16 #57)
#55 := (iff #15 #54)
#56 := [rewrite]: #55
#51 := (iff #12 #50)
#52 := [rewrite]: #51
#59 := [monotonicity #52 #56]: #58
#66 := [monotonicity #59 #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#42 := [asserted]: #22
#76 := [mp #42 #75]: #73
#80 := [not-or-elim #76]: #60
#190 := [mp #80 #189]: #184
#134 := (* -1::Int #11)
#135 := (+ #9 #134)
#133 := (>= #135 0::Int)
#137 := (not #133)
#138 := (iff #50 #137)
#132 := (iff #49 #133)
#136 := [rewrite]: #132
#139 := [monotonicity #136]: #138
#77 := [not-or-elim #76]: #57
#78 := [and-elim #77]: #50
#140 := [mp #78 #139]: #137
#303 := [hypothesis]: #301
#304 := [th-lemma arith farkas -1 -1 1 #303 #140 #190]: false
#583 := [lemma #304]: #582
#571 := (or #576 #301)
#572 := [th-lemma arith triangle-eq]: #571
#573 := [unit-resolution #572 #583]: #576
#421 := [unit-resolution #573 #420]: false
#564 := [lemma #421]: #422
#291 := (or #205 #204)
#292 := [def-axiom]: #291
#567 := [unit-resolution #292 #564]: #205
#283 := (or #171 #290)
#294 := [def-axiom]: #283
#561 := [unit-resolution #294 #567]: #290
#562 := [monotonicity #561]: #565
#302 := (+ #14 #185)
#298 := (<= #302 0::Int)
#585 := (not #298)
#164 := (+ #9 #163)
#162 := (>= #164 0::Int)
#166 := (not #162)
#167 := (iff #54 #166)
#161 := (iff #53 #162)
#165 := [rewrite]: #161
#168 := [monotonicity #165]: #167
#79 := [and-elim #77]: #54
#169 := [mp #79 #168]: #166
#584 := [hypothesis]: #298
#581 := [th-lemma arith farkas -1 -1 1 #584 #169 #190]: false
#574 := [lemma #581]: #585
#568 := (not #565)
#569 := (or #568 #298)
#563 := [th-lemma arith triangle-eq]: #569
[unit-resolution #563 #574 #562]: false
369b4cfbe0601f80981c4727d0056934614954c0 151 0
unsat
#2 := false
decl f5 :: S3
#8 := f5
decl f6 :: S3
#10 := f6
#24 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#94 := -1::Int
#95 := (* -1::Int #11)
#9 := (f3 f4 f5)
#96 := (+ #9 #95)
#104 := (>= #96 0::Int)
#106 := (if #104 f6 f5)
#97 := (<= #96 0::Int)
#100 := (if #97 f5 f6)
#109 := (= #100 #106)
#240 := (= f6 #106)
#504 := (iff #240 #109)
#501 := (iff #109 #240)
#551 := (= #100 f6)
#235 := (= f6 #100)
#150 := (not #97)
#149 := (= f5 #100)
#507 := (not #149)
#510 := (iff #149 #109)
#367 := (iff #109 #149)
#523 := (= #100 f5)
#365 := (iff #523 #149)
#366 := [commutativity]: #365
#518 := (iff #109 #523)
#248 := (= #106 f5)
#241 := (= f5 #106)
#542 := (not #241)
#543 := [hypothesis]: #542
#556 := (or #104 #241)
#558 := [def-axiom]: #556
#189 := [unit-resolution #558 #543]: #104
#238 := (not #104)
#242 := (or #238 #240)
#221 := [def-axiom]: #242
#190 := [unit-resolution #221 #189]: #240
#519 := (= f5 f6)
decl f7 :: (-> S4 Int S3)
decl f8 :: S4
#18 := f8
#552 := (f7 f8 #11)
#226 := (= #552 f6)
#19 := (:var 0 S3)
#20 := (f3 f4 #19)
#564 := (pattern #20)
#21 := (f7 f8 #20)
#22 := (= #21 #19)
#565 := (forall (vars (?v0 S3)) (:pat #564) #22)
#23 := (forall (vars (?v0 S3)) #22)
#568 := (iff #23 #565)
#566 := (iff #22 #22)
#567 := [refl]: #566
#569 := [quant-intro #567]: #568
#138 := (~ #23 #23)
#140 := (~ #22 #22)
#141 := [refl]: #140
#139 := [nnf-pos #141]: #138
#38 := [asserted]: #23
#136 := [mp~ #38 #139]: #23
#570 := [mp #136 #569]: #565
#227 := (not #565)
#557 := (or #227 #226)
#563 := [quant-inst #10]: #557
#246 := [unit-resolution #563 #570]: #226
#526 := (= f5 #552)
#215 := (f7 f8 #9)
#525 := (= #215 #552)
#249 := (= #552 #215)
#532 := (= #11 #9)
#531 := (= #9 #11)
#156 := (not #235)
#112 := (not #109)
#533 := (iff #112 #156)
#262 := (iff #109 #235)
#260 := (iff #551 #235)
#261 := [commutativity]: #260
#537 := (iff #109 #551)
#550 := (= #106 f6)
#548 := [symm #190]: #550
#538 := [monotonicity #548]: #537
#263 := [trans #538 #261]: #262
#534 := [monotonicity #263]: #533
#14 := (<= #11 #9)
#15 := (if #14 f6 f5)
#12 := (<= #9 #11)
#13 := (if #12 f5 f6)
#16 := (= #13 #15)
#17 := (not #16)
#113 := (iff #17 #112)
#110 := (iff #16 #109)
#107 := (= #15 #106)
#103 := (iff #14 #104)
#105 := [rewrite]: #103
#108 := [monotonicity #105]: #107
#101 := (= #13 #100)
#98 := (iff #12 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#111 := [monotonicity #102 #108]: #110
#114 := [monotonicity #111]: #113
#37 := [asserted]: #17
#115 := [mp #37 #114]: #112
#256 := [mp #115 #534]: #156
#228 := (or #97 #235)
#239 := [def-axiom]: #228
#257 := [unit-resolution #239 #256]: #97
#535 := [th-lemma arith eq-propagate 1 1 #189 #257]: #531
#536 := [symm #535]: #532
#527 := [monotonicity #536]: #249
#529 := [symm #527]: #525
#528 := (= f5 #215)
#345 := (= #215 f5)
#559 := (or #227 #345)
#560 := [quant-inst #8]: #559
#549 := [unit-resolution #560 #570]: #345
#243 := [symm #549]: #528
#530 := [trans #243 #529]: #526
#520 := [trans #530 #246]: #519
#521 := [trans #520 #190]: #241
#516 := [unit-resolution #543 #521]: false
#517 := [lemma #516]: #241
#522 := [symm #517]: #248
#524 := [monotonicity #522]: #518
#509 := [trans #524 #366]: #367
#511 := [symm #509]: #510
#247 := [hypothesis]: #149
#512 := [mp #247 #511]: #109
#506 := [unit-resolution #115 #512]: false
#513 := [lemma #506]: #507
#236 := (or #150 #149)
#237 := [def-axiom]: #236
#514 := [unit-resolution #237 #513]: #150
#347 := [unit-resolution #239 #514]: #235
#500 := [symm #347]: #551
#503 := [monotonicity #500]: #501
#502 := [symm #503]: #504
#508 := (or #104 #97)
#515 := [th-lemma arith farkas 1 1]: #508
#344 := [unit-resolution #515 #514]: #104
#346 := [unit-resolution #221 #344]: #240
#505 := [mp #346 #502]: #109
[unit-resolution #115 #505]: false
07eaca6d75830c4f4db4caa421c6648570513c0f 242 0
unsat
#2 := false
decl f6 :: (-> S4 Int S3)
#11 := 0::Int
decl f7 :: S4
#10 := f7
#12 := (f6 f7 0::Int)
decl f5 :: S3
#8 := f5
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#7 := f4
#13 := (f3 f4 #12)
#92 := -1::Int
#93 := (* -1::Int #13)
#9 := (f3 f4 f5)
#94 := (+ #9 #93)
#95 := (<= #94 0::Int)
#98 := (if #95 f5 #12)
#227 := (= #12 #98)
#141 := (= f5 #98)
#519 := (not #227)
#101 := (= #98 #12)
#104 := (not #101)
#520 := (iff #104 #519)
#240 := (iff #101 #227)
#241 := [commutativity]: #240
#235 := [monotonicity #241]: #520
#14 := (<= #9 #13)
#15 := (if #14 f5 #12)
#16 := (= #15 #12)
#17 := (not #16)
#105 := (iff #17 #104)
#102 := (iff #16 #101)
#99 := (= #15 #98)
#96 := (iff #14 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#103 := [monotonicity #100]: #102
#106 := [monotonicity #103]: #105
#35 := [asserted]: #17
#107 := [mp #35 #106]: #104
#517 := [mp #107 #235]: #519
#220 := (or #95 #227)
#231 := [def-axiom]: #220
#521 := [unit-resolution #231 #517]: #95
#142 := (not #95)
#228 := (or #142 #141)
#229 := [def-axiom]: #228
#503 := [unit-resolution #229 #521]: #141
#496 := (= #12 f5)
#232 := (f6 f7 #9)
#233 := (= #232 f5)
#18 := (:var 0 S3)
#19 := (f3 f4 #18)
#556 := (pattern #19)
#20 := (f6 f7 #19)
#21 := (= #20 #18)
#557 := (forall (vars (?v0 S3)) (:pat #556) #21)
#22 := (forall (vars (?v0 S3)) #21)
#560 := (iff #22 #557)
#558 := (iff #21 #21)
#559 := [refl]: #558
#561 := [quant-intro #559]: #560
#130 := (~ #22 #22)
#128 := (~ #21 #21)
#129 := [refl]: #128
#131 := [nnf-pos #129]: #130
#36 := [asserted]: #22
#134 := [mp~ #36 #131]: #22
#562 := [mp #134 #561]: #557
#213 := (not #557)
#548 := (or #213 #233)
#550 := [quant-inst #8]: #548
#516 := [unit-resolution #550 #562]: #233
#339 := (= #12 #232)
#336 := (= 0::Int #9)
#255 := (f3 f4 #232)
#357 := (= #255 #9)
#499 := (= #9 #255)
#504 := (= f5 #232)
#498 := [symm #516]: #504
#505 := [monotonicity #498]: #499
#507 := [symm #505]: #357
#506 := (= 0::Int #255)
#148 := (= #255 0::Int)
#542 := (= #9 0::Int)
#248 := (<= #9 0::Int)
#541 := (<= #13 0::Int)
#219 := (= #13 0::Int)
#23 := (:var 0 Int)
#25 := (f6 f7 #23)
#563 := (pattern #25)
#26 := (f3 f4 #25)
#27 := (= #26 #23)
#109 := (>= #23 0::Int)
#111 := (not #109)
#114 := (or #111 #27)
#564 := (forall (vars (?v0 Int)) (:pat #563) #114)
#117 := (forall (vars (?v0 Int)) #114)
#567 := (iff #117 #564)
#565 := (iff #114 #114)
#566 := [refl]: #565
#568 := [quant-intro #566]: #567
#133 := (~ #117 #117)
#135 := (~ #114 #114)
#132 := [refl]: #135
#90 := [nnf-pos #132]: #133
#24 := (<= 0::Int #23)
#46 := (not #24)
#47 := (or #46 #27)
#51 := (forall (vars (?v0 Int)) #47)
#118 := (iff #51 #117)
#115 := (iff #47 #114)
#112 := (iff #46 #111)
#108 := (iff #24 #109)
#110 := [rewrite]: #108
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#28 := (implies #24 #27)
#29 := (forall (vars (?v0 Int)) #28)
#52 := (iff #29 #51)
#48 := (iff #28 #47)
#49 := [rewrite]: #48
#44 := (iff #28 #28)
#42 := (iff #24 #24)
#43 := [rewrite]: #42
#45 := [monotonicity #43]: #44
#50 := [trans #45 #49]: #48
#53 := [quant-intro #50]: #52
#37 := [asserted]: #29
#54 := [mp #37 #53]: #51
#120 := [mp #54 #119]: #117
#91 := [mp~ #120 #90]: #117
#569 := [mp #91 #568]: #564
#197 := (not #564)
#533 := (or #197 #219)
#207 := (>= 0::Int 0::Int)
#337 := (not #207)
#551 := (or #337 #219)
#534 := (or #197 #551)
#536 := (iff #534 #533)
#532 := (iff #533 #533)
#538 := [rewrite]: #532
#195 := (iff #551 #219)
#206 := (or false #219)
#531 := (iff #206 #219)
#194 := [rewrite]: #531
#547 := (iff #551 #206)
#210 := (iff #337 false)
#1 := true
#554 := (not true)
#545 := (iff #554 false)
#205 := [rewrite]: #545
#549 := (iff #337 #554)
#552 := (iff #207 true)
#553 := [rewrite]: #552
#555 := [monotonicity #553]: #549
#546 := [trans #555 #205]: #210
#190 := [monotonicity #546]: #547
#196 := [trans #190 #194]: #195
#537 := [monotonicity #196]: #536
#176 := [trans #537 #538]: #536
#535 := [quant-inst #11]: #534
#539 := [mp #535 #176]: #533
#518 := [unit-resolution #539 #569]: #219
#522 := (not #219)
#511 := (or #522 #541)
#512 := [th-lemma arith triangle-eq]: #511
#513 := [unit-resolution #512 #518]: #541
#508 := (not #248)
#509 := [hypothesis]: #508
#514 := [th-lemma arith farkas -1 1 1 #509 #513 #521]: false
#515 := [lemma #514]: #248
#254 := (>= #9 0::Int)
#540 := (not #148)
#543 := [hypothesis]: #540
#525 := (or #254 #148)
#31 := (= #26 0::Int)
#121 := (or #109 #31)
#570 := (forall (vars (?v0 Int)) (:pat #563) #121)
#124 := (forall (vars (?v0 Int)) #121)
#573 := (iff #124 #570)
#571 := (iff #121 #121)
#572 := [refl]: #571
#574 := [quant-intro #572]: #573
#138 := (~ #124 #124)
#136 := (~ #121 #121)
#137 := [refl]: #136
#139 := [nnf-pos #137]: #138
#63 := (or #24 #31)
#68 := (forall (vars (?v0 Int)) #63)
#125 := (iff #68 #124)
#122 := (iff #63 #121)
#123 := [monotonicity #110]: #122
#126 := [quant-intro #123]: #125
#30 := (< #23 0::Int)
#32 := (implies #30 #31)
#33 := (forall (vars (?v0 Int)) #32)
#69 := (iff #33 #68)
#66 := (iff #32 #63)
#60 := (implies #46 #31)
#64 := (iff #60 #63)
#65 := [rewrite]: #64
#61 := (iff #32 #60)
#55 := (iff #30 #46)
#57 := (iff #46 #46)
#58 := [monotonicity #43]: #57
#56 := [rewrite]: #55
#59 := [trans #56 #58]: #55
#62 := [monotonicity #59]: #61
#67 := [trans #62 #65]: #66
#70 := [quant-intro #67]: #69
#38 := [asserted]: #33
#71 := [mp #38 #70]: #68
#127 := [mp #71 #126]: #124
#140 := [mp~ #127 #139]: #124
#575 := [mp #140 #574]: #570
#249 := (not #570)
#523 := (or #249 #254 #148)
#527 := (or #249 #525)
#528 := (iff #527 #523)
#238 := [rewrite]: #528
#524 := [quant-inst #9]: #527
#239 := [mp #524 #238]: #523
#529 := [unit-resolution #239 #575]: #525
#530 := [unit-resolution #529 #543]: #254
#252 := (not #254)
#253 := (or #542 #508 #252)
#526 := [th-lemma arith triangle-eq]: #253
#510 := [unit-resolution #526 #530 #515]: #542
#358 := [monotonicity #516]: #357
#359 := [trans #358 #510]: #148
#501 := [unit-resolution #543 #359]: false
#502 := [lemma #501]: #148
#500 := [symm #502]: #506
#338 := [trans #500 #507]: #336
#492 := [monotonicity #338]: #339
#494 := [trans #492 #516]: #496
#497 := [trans #494 #503]: #227
[unit-resolution #517 #497]: false
023391835b440558305b8b251ef349da3d22790f 70 0
unsat
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f6 :: S3
#10 := f6
#23 := 0::Int
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#93 := -1::Int
#94 := (* -1::Int #11)
#9 := (f3 f4 f5)
#95 := (+ #9 #94)
#96 := (<= #95 0::Int)
#99 := (if #96 f6 f5)
#102 := (f3 f4 #99)
#263 := (= #9 #102)
#238 := (= f5 #99)
#153 := (not #96)
#264 := [hypothesis]: #96
#108 := (* -1::Int #102)
#109 := (+ #9 #108)
#110 := (<= #109 0::Int)
#115 := (not #110)
#12 := (<= #9 #11)
#13 := (if #12 f6 f5)
#14 := (f3 f4 #13)
#15 := (<= #9 #14)
#16 := (not #15)
#116 := (iff #16 #115)
#113 := (iff #15 #110)
#105 := (<= #9 #102)
#111 := (iff #105 #110)
#112 := [rewrite]: #111
#106 := (iff #15 #105)
#103 := (= #14 #102)
#100 := (= #13 #99)
#97 := (iff #12 #96)
#98 := [rewrite]: #97
#101 := [monotonicity #98]: #100
#104 := [monotonicity #101]: #103
#107 := [monotonicity #104]: #106
#114 := [trans #107 #112]: #113
#117 := [monotonicity #114]: #116
#36 := [asserted]: #16
#118 := [mp #36 #117]: #115
#552 := (+ #11 #108)
#541 := (<= #552 0::Int)
#550 := (= #11 #102)
#152 := (= f6 #99)
#239 := (or #153 #152)
#240 := [def-axiom]: #239
#265 := [unit-resolution #240 #264]: #152
#266 := [monotonicity #265]: #550
#159 := (not #550)
#536 := (or #159 #541)
#537 := [th-lemma arith triangle-eq]: #536
#259 := [unit-resolution #537 #266]: #541
#260 := [th-lemma arith farkas 1 -1 1 #259 #118 #264]: false
#534 := [lemma #260]: #153
#231 := (or #96 #238)
#242 := [def-axiom]: #231
#535 := [unit-resolution #242 #534]: #238
#539 := [monotonicity #535]: #263
#249 := (not #263)
#250 := (or #249 #110)
#251 := [th-lemma arith triangle-eq]: #250
[unit-resolution #251 #118 #539]: false
de9a0b9ce99106c695a3982a129801da9aa3b403 76 0
unsat
#2 := false
#23 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#93 := -1::Int
#96 := (* -1::Int #11)
#9 := (f3 f4 f5)
#97 := (+ #9 #96)
#95 := (>= #97 0::Int)
#99 := (if #95 f5 f6)
#102 := (f3 f4 #99)
#108 := (* -1::Int #102)
#539 := (+ #11 #108)
#249 := (<= #539 0::Int)
#535 := (= #11 #102)
#238 := (= f6 #99)
#153 := (not #95)
#152 := (= f5 #99)
#534 := (not #152)
#550 := (= #9 #102)
#537 := [hypothesis]: #152
#259 := [monotonicity #537]: #550
#263 := (not #550)
#109 := (+ #9 #108)
#110 := (<= #109 0::Int)
#115 := (not #110)
#12 := (<= #11 #9)
#13 := (if #12 f5 f6)
#14 := (f3 f4 #13)
#15 := (<= #9 #14)
#16 := (not #15)
#116 := (iff #16 #115)
#113 := (iff #15 #110)
#105 := (<= #9 #102)
#111 := (iff #105 #110)
#112 := [rewrite]: #111
#106 := (iff #15 #105)
#103 := (= #14 #102)
#100 := (= #13 #99)
#94 := (iff #12 #95)
#98 := [rewrite]: #94
#101 := [monotonicity #98]: #100
#104 := [monotonicity #101]: #103
#107 := [monotonicity #104]: #106
#114 := [trans #107 #112]: #113
#117 := [monotonicity #114]: #116
#36 := [asserted]: #16
#118 := [mp #36 #117]: #115
#264 := (or #263 #110)
#265 := [th-lemma arith triangle-eq]: #264
#536 := [unit-resolution #265 #118]: #263
#260 := [unit-resolution #536 #259]: false
#538 := [lemma #260]: #534
#239 := (or #153 #152)
#240 := [def-axiom]: #239
#251 := [unit-resolution #240 #538]: #153
#231 := (or #95 #238)
#242 := [def-axiom]: #231
#252 := [unit-resolution #242 #251]: #238
#530 := [monotonicity #252]: #535
#531 := (not #535)
#246 := (or #531 #249)
#528 := [th-lemma arith triangle-eq]: #246
#532 := [unit-resolution #528 #530]: #249
#552 := (>= #109 0::Int)
#529 := (or #552 #110)
#533 := [th-lemma arith farkas 1 1]: #529
#522 := [unit-resolution #533 #118]: #552
[th-lemma arith farkas 1 1 1 #522 #251 #532]: false
e2d5671413f0e92bd5580899b040818b49d8e5b4 479 0
unsat
#2 := false
#30 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#9 := f7
decl f4 :: S2
#7 := f4
#10 := (f3 f4 f7)
#387 := (= #10 0::Int)
decl f5 :: (-> S4 Int S3)
decl f6 :: S4
#8 := f6
#298 := (f5 f6 #10)
#406 := (f3 f4 #298)
#554 := (= #406 0::Int)
#447 := (>= #10 0::Int)
#384 := (not #447)
decl f8 :: S3
#11 := f8
#12 := (f3 f4 f8)
#50 := -1::Int
#51 := (* -1::Int #12)
#52 := (+ #10 #51)
#147 := (<= #52 0::Int)
#150 := (if #147 f8 f7)
#153 := (f3 f4 #150)
#159 := (* -1::Int #153)
#400 := (+ #12 #159)
#407 := (<= #400 0::Int)
#506 := (= #12 #153)
#207 := (= f8 #150)
#61 := (* -1::Int #10)
#129 := (+ #61 #12)
#132 := (f5 f6 #129)
#135 := (f3 f4 #132)
#570 := (= #135 0::Int)
#435 := (not #570)
#445 := (<= #135 0::Int)
#414 := (not #445)
#541 := (>= #153 0::Int)
#505 := (= #153 0::Int)
#620 := (f5 f6 #153)
#542 := (f3 f4 #620)
#532 := (= #542 0::Int)
#487 := (not #541)
#488 := [hypothesis]: #487
#533 := (or #541 #532)
#31 := (:var 0 Int)
#33 := (f5 f6 #31)
#629 := (pattern #33)
#34 := (f3 f4 #33)
#39 := (= #34 0::Int)
#175 := (>= #31 0::Int)
#187 := (or #175 #39)
#636 := (forall (vars (?v0 Int)) (:pat #629) #187)
#190 := (forall (vars (?v0 Int)) #187)
#639 := (iff #190 #636)
#637 := (iff #187 #187)
#638 := [refl]: #637
#640 := [quant-intro #638]: #639
#204 := (~ #190 #190)
#202 := (~ #187 #187)
#203 := [refl]: #202
#205 := [nnf-pos #203]: #204
#32 := (<= 0::Int #31)
#102 := (or #32 #39)
#107 := (forall (vars (?v0 Int)) #102)
#191 := (iff #107 #190)
#188 := (iff #102 #187)
#174 := (iff #32 #175)
#176 := [rewrite]: #174
#189 := [monotonicity #176]: #188
#192 := [quant-intro #189]: #191
#38 := (< #31 0::Int)
#40 := (implies #38 #39)
#41 := (forall (vars (?v0 Int)) #40)
#108 := (iff #41 #107)
#105 := (iff #40 #102)
#85 := (not #32)
#99 := (implies #85 #39)
#103 := (iff #99 #102)
#104 := [rewrite]: #103
#100 := (iff #40 #99)
#94 := (iff #38 #85)
#96 := (iff #85 #85)
#81 := (iff #32 #32)
#82 := [rewrite]: #81
#97 := [monotonicity #82]: #96
#95 := [rewrite]: #94
#98 := [trans #95 #97]: #94
#101 := [monotonicity #98]: #100
#106 := [trans #101 #104]: #105
#109 := [quant-intro #106]: #108
#46 := [asserted]: #41
#110 := [mp #46 #109]: #107
#193 := [mp #110 #192]: #190
#206 := [mp~ #193 #205]: #190
#641 := [mp #206 #640]: #636
#214 := (not #636)
#520 := (or #214 #541 #532)
#521 := (or #214 #533)
#524 := (iff #521 #520)
#525 := [rewrite]: #524
#523 := [quant-inst #153]: #521
#522 := [mp #523 #525]: #520
#489 := [unit-resolution #522 #641]: #533
#492 := [unit-resolution #489 #488]: #532
#490 := (= #153 #542)
#494 := (= #150 #620)
#615 := (= #620 #150)
#25 := (:var 0 S3)
#26 := (f3 f4 #25)
#622 := (pattern #26)
#27 := (f5 f6 #26)
#28 := (= #27 #25)
#623 := (forall (vars (?v0 S3)) (:pat #622) #28)
#29 := (forall (vars (?v0 S3)) #28)
#626 := (iff #29 #623)
#624 := (iff #28 #28)
#625 := [refl]: #624
#627 := [quant-intro #625]: #626
#198 := (~ #29 #29)
#200 := (~ #28 #28)
#201 := [refl]: #200
#199 := [nnf-pos #201]: #198
#44 := [asserted]: #29
#196 := [mp~ #44 #199]: #29
#628 := [mp #196 #627]: #623
#279 := (not #623)
#612 := (or #279 #615)
#272 := [quant-inst #150]: #612
#493 := [unit-resolution #272 #628]: #615
#495 := [symm #493]: #494
#496 := [monotonicity #495]: #490
#469 := [trans #496 #492]: #505
#470 := (not #505)
#471 := (or #470 #541)
#364 := [th-lemma arith triangle-eq]: #471
#475 := [unit-resolution #364 #488 #469]: false
#476 := [lemma #475]: #541
#55 := (f5 f6 #52)
#58 := (f3 f4 #55)
#160 := (+ #58 #135 #159)
#161 := (<= #160 0::Int)
#166 := (not #161)
#20 := (<= #10 #12)
#21 := (if #20 f8 f7)
#22 := (f3 f4 #21)
#62 := (+ #12 #61)
#65 := (f5 f6 #62)
#68 := (f3 f4 #65)
#71 := (+ #58 #68)
#74 := (<= #71 #22)
#77 := (not #74)
#169 := (iff #77 #166)
#138 := (+ #58 #135)
#141 := (<= #138 #22)
#144 := (not #141)
#167 := (iff #144 #166)
#164 := (iff #141 #161)
#156 := (<= #138 #153)
#162 := (iff #156 #161)
#163 := [rewrite]: #162
#157 := (iff #141 #156)
#154 := (= #22 #153)
#151 := (= #21 #150)
#148 := (iff #20 #147)
#149 := [rewrite]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#165 := [trans #158 #163]: #164
#168 := [monotonicity #165]: #167
#145 := (iff #77 #144)
#142 := (iff #74 #141)
#139 := (= #71 #138)
#136 := (= #68 #135)
#133 := (= #65 #132)
#130 := (= #62 #129)
#131 := [rewrite]: #130
#134 := [monotonicity #131]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#170 := [trans #146 #168]: #169
#16 := (- #12 #10)
#17 := (f5 f6 #16)
#18 := (f3 f4 #17)
#13 := (- #10 #12)
#14 := (f5 f6 #13)
#15 := (f3 f4 #14)
#19 := (+ #15 #18)
#23 := (<= #19 #22)
#24 := (not #23)
#78 := (iff #24 #77)
#75 := (iff #23 #74)
#72 := (= #19 #71)
#69 := (= #18 #68)
#66 := (= #17 #65)
#63 := (= #16 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#59 := (= #15 #58)
#56 := (= #14 #55)
#53 := (= #13 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#73 := [monotonicity #60 #70]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#43 := [asserted]: #24
#80 := [mp #43 #79]: #77
#171 := [mp #80 #170]: #166
#590 := (<= #58 0::Int)
#318 := (= #58 0::Int)
#534 := (+ #10 #159)
#526 := (<= #534 0::Int)
#529 := (= #10 #153)
#293 := (= f7 #150)
#208 := (not #147)
#468 := (not #590)
#512 := (not #318)
#477 := [hypothesis]: #512
#449 := (or #318 #468)
#594 := (>= #58 0::Int)
#273 := (f5 f6 #58)
#461 := (f3 f4 #273)
#462 := (= #461 0::Int)
#500 := (not #462)
#501 := (iff #512 #500)
#497 := (iff #318 #462)
#508 := (iff #462 #318)
#517 := (= #461 #58)
#403 := (= #273 #55)
#618 := (or #279 #403)
#619 := [quant-inst #55]: #618
#516 := [unit-resolution #619 #628]: #403
#518 := [monotonicity #516]: #517
#519 := [monotonicity #518]: #508
#498 := [symm #519]: #497
#502 := [monotonicity #498]: #501
#507 := (not #594)
#509 := [hypothesis]: #507
#513 := (or #512 #594)
#514 := [th-lemma arith triangle-eq]: #513
#515 := [unit-resolution #514 #509]: #512
#503 := [mp #515 #502]: #500
#538 := (or #594 #462)
#547 := (or #214 #594 #462)
#548 := (or #214 #538)
#545 := (iff #548 #547)
#550 := [rewrite]: #545
#549 := [quant-inst #58]: #548
#539 := [mp #549 #550]: #547
#510 := [unit-resolution #539 #641]: #538
#511 := [unit-resolution #510 #509]: #462
#504 := [unit-resolution #511 #503]: false
#499 := [lemma #504]: #594
#474 := (or #318 #468 #507)
#442 := [th-lemma arith triangle-eq]: #474
#408 := [unit-resolution #442 #499]: #449
#439 := [unit-resolution #408 #477]: #468
#260 := (* -1::Int #58)
#261 := (+ #10 #51 #260)
#596 := (>= #261 0::Int)
#597 := (= #261 0::Int)
#271 := (>= #52 0::Int)
#319 := (or #271 #318)
#591 := (or #214 #271 #318)
#592 := (or #214 #319)
#315 := (iff #592 #591)
#589 := [rewrite]: #315
#314 := [quant-inst #52]: #592
#593 := [mp #314 #589]: #591
#441 := [unit-resolution #593 #641]: #319
#443 := [unit-resolution #441 #477]: #271
#276 := (not #271)
#599 := (or #276 #597)
#35 := (= #34 #31)
#177 := (not #175)
#180 := (or #177 #35)
#630 := (forall (vars (?v0 Int)) (:pat #629) #180)
#183 := (forall (vars (?v0 Int)) #180)
#633 := (iff #183 #630)
#631 := (iff #180 #180)
#632 := [refl]: #631
#634 := [quant-intro #632]: #633
#195 := (~ #183 #183)
#197 := (~ #180 #180)
#194 := [refl]: #197
#172 := [nnf-pos #194]: #195
#86 := (or #85 #35)
#90 := (forall (vars (?v0 Int)) #86)
#184 := (iff #90 #183)
#181 := (iff #86 #180)
#178 := (iff #85 #177)
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [quant-intro #182]: #184
#36 := (implies #32 #35)
#37 := (forall (vars (?v0 Int)) #36)
#91 := (iff #37 #90)
#87 := (iff #36 #86)
#88 := [rewrite]: #87
#83 := (iff #36 #36)
#84 := [monotonicity #82]: #83
#89 := [trans #84 #88]: #87
#92 := [quant-intro #89]: #91
#45 := [asserted]: #37
#93 := [mp #45 #92]: #90
#186 := [mp #93 #185]: #183
#173 := [mp~ #186 #172]: #183
#635 := [mp #173 #634]: #630
#602 := (not #630)
#603 := (or #602 #276 #597)
#613 := (= #58 #52)
#256 := (or #276 #613)
#598 := (or #602 #256)
#608 := (iff #598 #603)
#242 := (or #602 #599)
#247 := (iff #242 #603)
#248 := [rewrite]: #247
#605 := (iff #598 #242)
#600 := (iff #256 #599)
#262 := (iff #613 #597)
#263 := [rewrite]: #262
#601 := [monotonicity #263]: #600
#607 := [monotonicity #601]: #605
#606 := [trans #607 #248]: #608
#604 := [quant-inst #52]: #598
#609 := [mp #604 #606]: #603
#450 := [unit-resolution #609 #635]: #599
#452 := [unit-resolution #450 #443]: #597
#453 := (not #597)
#454 := (or #453 #596)
#464 := [th-lemma arith triangle-eq]: #454
#444 := [unit-resolution #464 #452]: #596
#465 := (not #596)
#420 := (or #208 #590 #465)
#421 := [th-lemma arith assign-bounds -1 -1]: #420
#426 := [unit-resolution #421 #444 #439]: #208
#286 := (or #147 #293)
#297 := [def-axiom]: #286
#427 := [unit-resolution #297 #426]: #293
#428 := [monotonicity #427]: #529
#429 := (not #529)
#430 := (or #429 #526)
#431 := [th-lemma arith triangle-eq]: #430
#432 := [unit-resolution #431 #428]: #526
#565 := (or #147 #570)
#566 := (or #214 #147 #570)
#320 := (>= #129 0::Int)
#564 := (or #320 #570)
#573 := (or #214 #564)
#562 := (iff #573 #566)
#404 := (or #214 #565)
#559 := (iff #404 #566)
#561 := [rewrite]: #559
#405 := (iff #573 #404)
#571 := (iff #564 #565)
#306 := (iff #320 #147)
#307 := [rewrite]: #306
#572 := [monotonicity #307]: #571
#558 := [monotonicity #572]: #405
#560 := [trans #558 #561]: #562
#402 := [quant-inst #129]: #573
#563 := [mp #402 #560]: #566
#433 := [unit-resolution #563 #641]: #565
#434 := [unit-resolution #433 #426]: #570
#436 := (or #435 #445)
#437 := [th-lemma arith triangle-eq]: #436
#422 := [unit-resolution #437 #434]: #445
#551 := (>= #12 0::Int)
#491 := (= #12 0::Int)
#296 := (f5 f6 #12)
#552 := (f3 f4 #296)
#459 := (= #552 0::Int)
#482 := (not #551)
#478 := [hypothesis]: #482
#460 := (or #551 #459)
#463 := (or #214 #551 #459)
#556 := (or #214 #460)
#557 := (iff #556 #463)
#544 := [rewrite]: #557
#553 := [quant-inst #12]: #556
#546 := [mp #553 #544]: #463
#479 := [unit-resolution #546 #641]: #460
#480 := [unit-resolution #479 #478]: #459
#481 := (= #12 #552)
#484 := (= f8 #296)
#300 := (= #296 f8)
#610 := (or #279 #300)
#284 := [quant-inst #11]: #610
#483 := [unit-resolution #284 #628]: #300
#485 := [symm #483]: #484
#486 := [monotonicity #485]: #481
#466 := [trans #486 #480]: #491
#412 := (not #491)
#467 := (or #412 #551)
#448 := [th-lemma arith triangle-eq]: #467
#472 := [unit-resolution #448 #478 #466]: false
#473 := [lemma #472]: #551
#438 := [th-lemma arith farkas -1 -1 1 -1 1 #473 #444 #422 #171 #432]: false
#399 := [lemma #438]: #318
#410 := (or #512 #590)
#411 := [th-lemma arith triangle-eq]: #410
#413 := [unit-resolution #411 #399]: #590
#415 := (or #414 #487 #161 #468)
#416 := [th-lemma arith assign-bounds -1 -1 1]: #415
#417 := [unit-resolution #416 #413 #171 #476]: #414
#418 := [unit-resolution #437 #417]: #435
#401 := [unit-resolution #433 #418]: #147
#294 := (or #208 #207)
#295 := [def-axiom]: #294
#419 := [unit-resolution #295 #401]: #207
#389 := [monotonicity #419]: #506
#390 := (not #506)
#391 := (or #390 #407)
#392 := [th-lemma arith triangle-eq]: #391
#394 := [unit-resolution #392 #389]: #407
#301 := (+ #10 #51 #135)
#568 := (<= #301 0::Int)
#583 := (= #301 0::Int)
#588 := (or #208 #583)
#579 := (or #602 #208 #583)
#304 := (= #135 #129)
#321 := (not #320)
#305 := (or #321 #304)
#574 := (or #602 #305)
#424 := (iff #574 #579)
#580 := (or #602 #588)
#582 := (iff #580 #579)
#423 := [rewrite]: #582
#581 := (iff #574 #580)
#577 := (iff #305 #588)
#587 := (iff #304 #583)
#584 := [rewrite]: #587
#585 := (iff #321 #208)
#586 := [monotonicity #307]: #585
#578 := [monotonicity #586 #584]: #577
#576 := [monotonicity #578]: #581
#425 := [trans #576 #423]: #424
#575 := [quant-inst #129]: #574
#567 := [mp #575 #425]: #579
#395 := [unit-resolution #567 #635]: #588
#396 := [unit-resolution #395 #401]: #583
#239 := (not #583)
#397 := (or #239 #568)
#393 := [th-lemma arith triangle-eq]: #397
#398 := [unit-resolution #393 #396]: #568
#377 := [hypothesis]: #447
#380 := [th-lemma arith farkas 1 -1 1 -1 1 #413 #377 #398 #171 #394]: false
#386 := [lemma #380]: #384
#456 := (or #447 #554)
#555 := (or #214 #447 #554)
#440 := (or #214 #456)
#457 := (iff #440 #555)
#458 := [rewrite]: #457
#455 := [quant-inst #10]: #440
#451 := [mp #455 #458]: #555
#388 := [unit-resolution #451 #641]: #456
#376 := [unit-resolution #388 #386]: #554
#378 := (= #10 #406)
#381 := (= f7 #298)
#299 := (= #298 f7)
#614 := (or #279 #299)
#616 := [quant-inst #9]: #614
#379 := [unit-resolution #616 #628]: #299
#382 := [symm #379]: #381
#383 := [monotonicity #382]: #378
#373 := [trans #383 #376]: #387
#363 := (not #387)
#365 := (or #363 #447)
#366 := [th-lemma arith triangle-eq]: #365
[unit-resolution #366 #386 #373]: false
160657a6999b6fa22bbfbba0cea75e9e766dc484 131 0
unsat
#2 := false
#29 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#131 := -1::Int
#161 := (* -1::Int #14)
#9 := (f3 f4 f5)
#170 := (+ #9 #161)
#171 := (<= #170 0::Int)
#174 := (if #171 f7 f5)
#177 := (f3 f4 #174)
#183 := (* -1::Int #177)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#184 := (+ #11 #183)
#185 := (<= #184 0::Int)
#17 := (<= #9 #14)
#18 := (if #17 f7 f5)
#19 := (f3 f4 #18)
#60 := (<= #11 #19)
#188 := (iff #60 #185)
#180 := (<= #11 #177)
#186 := (iff #180 #185)
#187 := [rewrite]: #186
#181 := (iff #60 #180)
#178 := (= #19 #177)
#175 := (= #18 #174)
#172 := (iff #17 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#189 := [trans #182 #187]: #188
#61 := (not #60)
#53 := (<= #11 #14)
#54 := (not #53)
#49 := (<= #11 #9)
#50 := (not #49)
#57 := (and #50 #54)
#67 := (not #57)
#68 := (or #67 #61)
#73 := (not #68)
#20 := (< #19 #11)
#15 := (< #14 #11)
#12 := (< #9 #11)
#16 := (and #12 #15)
#21 := (implies #16 #20)
#22 := (not #21)
#74 := (iff #22 #73)
#71 := (iff #21 #68)
#64 := (implies #57 #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #21 #64)
#62 := (iff #20 #61)
#63 := [rewrite]: #62
#58 := (iff #16 #57)
#55 := (iff #15 #54)
#56 := [rewrite]: #55
#51 := (iff #12 #50)
#52 := [rewrite]: #51
#59 := [monotonicity #52 #56]: #58
#66 := [monotonicity #59 #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#42 := [asserted]: #22
#76 := [mp #42 #75]: #73
#80 := [not-or-elim #76]: #60
#190 := [mp #80 #189]: #185
#134 := (* -1::Int #11)
#135 := (+ #9 #134)
#133 := (>= #135 0::Int)
#137 := (not #133)
#138 := (iff #50 #137)
#132 := (iff #49 #133)
#136 := [rewrite]: #132
#139 := [monotonicity #136]: #138
#77 := [not-or-elim #76]: #57
#78 := [and-elim #77]: #50
#140 := [mp #78 #139]: #137
#579 := (+ #9 #183)
#421 := (>= #579 0::Int)
#573 := (= #9 #177)
#290 := (= f5 #174)
#205 := (not #171)
#204 := (= f7 #174)
#577 := (not #204)
#588 := (= #14 #177)
#576 := [hypothesis]: #204
#571 := [monotonicity #576]: #588
#580 := (not #588)
#589 := (+ #14 #183)
#302 := (>= #589 0::Int)
#582 := (not #302)
#162 := (+ #11 #161)
#163 := (<= #162 0::Int)
#166 := (not #163)
#167 := (iff #54 #166)
#164 := (iff #53 #163)
#165 := [rewrite]: #164
#168 := [monotonicity #165]: #167
#79 := [and-elim #77]: #54
#169 := [mp #79 #168]: #166
#303 := [hypothesis]: #302
#304 := [th-lemma arith farkas -1 -1 1 #303 #169 #190]: false
#583 := [lemma #304]: #582
#584 := (or #580 #302)
#581 := [th-lemma arith triangle-eq]: #584
#575 := [unit-resolution #581 #583]: #580
#572 := [unit-resolution #575 #571]: false
#578 := [lemma #572]: #577
#291 := (or #205 #204)
#292 := [def-axiom]: #291
#422 := [unit-resolution #292 #578]: #205
#283 := (or #171 #290)
#294 := [def-axiom]: #283
#564 := [unit-resolution #294 #422]: #290
#565 := [monotonicity #564]: #573
#566 := (not #573)
#567 := (or #566 #421)
#561 := [th-lemma arith triangle-eq]: #567
#562 := [unit-resolution #561 #565]: #421
[th-lemma arith farkas -1 1 1 #562 #140 #190]: false
fb8c3e38f29442a2c97cb122a92a02cfe400dc8f 149 0
unsat
#2 := false
decl f6 :: S3
#10 := f6
decl f5 :: S3
#8 := f5
#24 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#94 := -1::Int
#95 := (* -1::Int #11)
#9 := (f3 f4 f5)
#96 := (+ #9 #95)
#104 := (>= #96 0::Int)
#106 := (if #104 f5 f6)
#97 := (<= #96 0::Int)
#100 := (if #97 f6 f5)
#109 := (= #100 #106)
#240 := (= f5 #106)
#501 := (iff #240 #109)
#347 := (iff #109 #240)
#551 := (= #100 f5)
#235 := (= f5 #100)
#150 := (not #97)
#149 := (= f6 #100)
#512 := (not #149)
#367 := (iff #149 #109)
#365 := (iff #109 #149)
#517 := (= #100 f6)
#518 := (iff #517 #149)
#524 := [commutativity]: #518
#522 := (iff #109 #517)
#521 := (= #106 f6)
#241 := (= f6 #106)
#542 := (not #241)
#543 := [hypothesis]: #542
#556 := (or #104 #241)
#558 := [def-axiom]: #556
#549 := [unit-resolution #558 #543]: #104
#238 := (not #104)
#242 := (or #238 #240)
#221 := [def-axiom]: #242
#189 := [unit-resolution #221 #549]: #240
#525 := (= f6 f5)
decl f7 :: (-> S4 Int S3)
decl f8 :: S4
#18 := f8
#215 := (f7 f8 #9)
#345 := (= #215 f5)
#19 := (:var 0 S3)
#20 := (f3 f4 #19)
#564 := (pattern #20)
#21 := (f7 f8 #20)
#22 := (= #21 #19)
#565 := (forall (vars (?v0 S3)) (:pat #564) #22)
#23 := (forall (vars (?v0 S3)) #22)
#568 := (iff #23 #565)
#566 := (iff #22 #22)
#567 := [refl]: #566
#569 := [quant-intro #567]: #568
#138 := (~ #23 #23)
#140 := (~ #22 #22)
#141 := [refl]: #140
#139 := [nnf-pos #141]: #138
#38 := [asserted]: #23
#136 := [mp~ #38 #139]: #23
#570 := [mp #136 #569]: #565
#227 := (not #565)
#559 := (or #227 #345)
#560 := [quant-inst #8]: #559
#190 := [unit-resolution #560 #570]: #345
#528 := (= f6 #215)
#552 := (f7 f8 #11)
#249 := (= #552 #215)
#532 := (= #11 #9)
#531 := (= #9 #11)
#156 := (not #235)
#112 := (not #109)
#533 := (iff #112 #156)
#262 := (iff #109 #235)
#260 := (iff #551 #235)
#261 := [commutativity]: #260
#537 := (iff #109 #551)
#550 := (= #106 f5)
#548 := [symm #189]: #550
#538 := [monotonicity #548]: #537
#263 := [trans #538 #261]: #262
#534 := [monotonicity #263]: #533
#14 := (<= #11 #9)
#15 := (if #14 f5 f6)
#12 := (<= #9 #11)
#13 := (if #12 f6 f5)
#16 := (= #13 #15)
#17 := (not #16)
#113 := (iff #17 #112)
#110 := (iff #16 #109)
#107 := (= #15 #106)
#103 := (iff #14 #104)
#105 := [rewrite]: #103
#108 := [monotonicity #105]: #107
#101 := (= #13 #100)
#98 := (iff #12 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#111 := [monotonicity #102 #108]: #110
#114 := [monotonicity #111]: #113
#37 := [asserted]: #17
#115 := [mp #37 #114]: #112
#256 := [mp #115 #534]: #156
#228 := (or #97 #235)
#239 := [def-axiom]: #228
#257 := [unit-resolution #239 #256]: #97
#535 := [th-lemma arith eq-propagate 1 1 #549 #257]: #531
#536 := [symm #535]: #532
#527 := [monotonicity #536]: #249
#247 := (= f6 #552)
#226 := (= #552 f6)
#557 := (or #227 #226)
#563 := [quant-inst #10]: #557
#246 := [unit-resolution #563 #570]: #226
#248 := [symm #246]: #247
#243 := [trans #248 #527]: #528
#529 := [trans #243 #190]: #525
#526 := [trans #529 #189]: #241
#530 := [unit-resolution #543 #526]: false
#519 := [lemma #530]: #241
#516 := [symm #519]: #521
#523 := [monotonicity #516]: #522
#366 := [trans #523 #524]: #365
#509 := [symm #366]: #367
#520 := [hypothesis]: #149
#510 := [mp #520 #509]: #109
#511 := [unit-resolution #115 #510]: false
#506 := [lemma #511]: #512
#236 := (or #150 #149)
#237 := [def-axiom]: #236
#507 := [unit-resolution #237 #506]: #150
#344 := [unit-resolution #239 #507]: #235
#346 := [symm #344]: #551
#500 := [monotonicity #346]: #347
#503 := [symm #500]: #501
#513 := (or #104 #97)
#514 := [th-lemma arith farkas 1 1]: #513
#508 := [unit-resolution #514 #507]: #104
#515 := [unit-resolution #221 #508]: #240
#504 := [mp #515 #503]: #109
[unit-resolution #115 #504]: false
e64a5f6562eb36da4004d28b7f33df8ec768098a 238 0
unsat
#2 := false
decl f5 :: S3
#8 := f5
decl f6 :: (-> S4 Int S3)
#11 := 0::Int
decl f7 :: S4
#10 := f7
#12 := (f6 f7 0::Int)
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#7 := f4
#13 := (f3 f4 #12)
#92 := -1::Int
#93 := (* -1::Int #13)
#9 := (f3 f4 f5)
#94 := (+ #9 #93)
#95 := (<= #94 0::Int)
#98 := (if #95 #12 f5)
#227 := (= f5 #98)
#141 := (= #12 #98)
#519 := (not #227)
#101 := (= #98 f5)
#104 := (not #101)
#520 := (iff #104 #519)
#240 := (iff #101 #227)
#241 := [commutativity]: #240
#235 := [monotonicity #241]: #520
#14 := (<= #9 #13)
#15 := (if #14 #12 f5)
#16 := (= #15 f5)
#17 := (not #16)
#105 := (iff #17 #104)
#102 := (iff #16 #101)
#99 := (= #15 #98)
#96 := (iff #14 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#103 := [monotonicity #100]: #102
#106 := [monotonicity #103]: #105
#35 := [asserted]: #17
#107 := [mp #35 #106]: #104
#517 := [mp #107 #235]: #519
#220 := (or #95 #227)
#231 := [def-axiom]: #220
#521 := [unit-resolution #231 #517]: #95
#142 := (not #95)
#228 := (or #142 #141)
#229 := [def-axiom]: #228
#503 := [unit-resolution #229 #521]: #141
#339 := (= f5 #12)
#232 := (f6 f7 #9)
#500 := (= #232 #12)
#542 := (= #9 0::Int)
#255 := (f3 f4 #232)
#148 := (= #255 0::Int)
#248 := (<= #9 0::Int)
#541 := (<= #13 0::Int)
#219 := (= #13 0::Int)
#23 := (:var 0 Int)
#25 := (f6 f7 #23)
#563 := (pattern #25)
#26 := (f3 f4 #25)
#27 := (= #26 #23)
#109 := (>= #23 0::Int)
#111 := (not #109)
#114 := (or #111 #27)
#564 := (forall (vars (?v0 Int)) (:pat #563) #114)
#117 := (forall (vars (?v0 Int)) #114)
#567 := (iff #117 #564)
#565 := (iff #114 #114)
#566 := [refl]: #565
#568 := [quant-intro #566]: #567
#135 := (~ #117 #117)
#133 := (~ #114 #114)
#134 := [refl]: #133
#130 := [nnf-pos #134]: #135
#24 := (<= 0::Int #23)
#46 := (not #24)
#47 := (or #46 #27)
#51 := (forall (vars (?v0 Int)) #47)
#118 := (iff #51 #117)
#115 := (iff #47 #114)
#112 := (iff #46 #111)
#108 := (iff #24 #109)
#110 := [rewrite]: #108
#113 := [monotonicity #110]: #112
#116 := [monotonicity #113]: #115
#119 := [quant-intro #116]: #118
#28 := (implies #24 #27)
#29 := (forall (vars (?v0 Int)) #28)
#52 := (iff #29 #51)
#48 := (iff #28 #47)
#49 := [rewrite]: #48
#44 := (iff #28 #28)
#42 := (iff #24 #24)
#43 := [rewrite]: #42
#45 := [monotonicity #43]: #44
#50 := [trans #45 #49]: #48
#53 := [quant-intro #50]: #52
#37 := [asserted]: #29
#54 := [mp #37 #53]: #51
#120 := [mp #54 #119]: #117
#131 := [mp~ #120 #130]: #117
#569 := [mp #131 #568]: #564
#197 := (not #564)
#533 := (or #197 #219)
#207 := (>= 0::Int 0::Int)
#337 := (not #207)
#551 := (or #337 #219)
#534 := (or #197 #551)
#536 := (iff #534 #533)
#532 := (iff #533 #533)
#538 := [rewrite]: #532
#195 := (iff #551 #219)
#206 := (or false #219)
#531 := (iff #206 #219)
#194 := [rewrite]: #531
#547 := (iff #551 #206)
#210 := (iff #337 false)
#1 := true
#554 := (not true)
#545 := (iff #554 false)
#205 := [rewrite]: #545
#549 := (iff #337 #554)
#552 := (iff #207 true)
#553 := [rewrite]: #552
#555 := [monotonicity #553]: #549
#546 := [trans #555 #205]: #210
#190 := [monotonicity #546]: #547
#196 := [trans #190 #194]: #195
#537 := [monotonicity #196]: #536
#176 := [trans #537 #538]: #536
#535 := [quant-inst #11]: #534
#539 := [mp #535 #176]: #533
#518 := [unit-resolution #539 #569]: #219
#522 := (not #219)
#511 := (or #522 #541)
#512 := [th-lemma arith triangle-eq]: #511
#513 := [unit-resolution #512 #518]: #541
#508 := (not #248)
#509 := [hypothesis]: #508
#514 := [th-lemma arith farkas -1 1 1 #509 #513 #521]: false
#515 := [lemma #514]: #248
#254 := (>= #9 0::Int)
#540 := (not #148)
#543 := [hypothesis]: #540
#525 := (or #254 #148)
#31 := (= #26 0::Int)
#121 := (or #109 #31)
#570 := (forall (vars (?v0 Int)) (:pat #563) #121)
#124 := (forall (vars (?v0 Int)) #121)
#573 := (iff #124 #570)
#571 := (iff #121 #121)
#572 := [refl]: #571
#574 := [quant-intro #572]: #573
#138 := (~ #124 #124)
#136 := (~ #121 #121)
#137 := [refl]: #136
#139 := [nnf-pos #137]: #138
#63 := (or #24 #31)
#68 := (forall (vars (?v0 Int)) #63)
#125 := (iff #68 #124)
#122 := (iff #63 #121)
#123 := [monotonicity #110]: #122
#126 := [quant-intro #123]: #125
#30 := (< #23 0::Int)
#32 := (implies #30 #31)
#33 := (forall (vars (?v0 Int)) #32)
#69 := (iff #33 #68)
#66 := (iff #32 #63)
#60 := (implies #46 #31)
#64 := (iff #60 #63)
#65 := [rewrite]: #64
#61 := (iff #32 #60)
#55 := (iff #30 #46)
#57 := (iff #46 #46)
#58 := [monotonicity #43]: #57
#56 := [rewrite]: #55
#59 := [trans #56 #58]: #55
#62 := [monotonicity #59]: #61
#67 := [trans #62 #65]: #66
#70 := [quant-intro #67]: #69
#38 := [asserted]: #33
#71 := [mp #38 #70]: #68
#127 := [mp #71 #126]: #124
#140 := [mp~ #127 #139]: #124
#575 := [mp #140 #574]: #570
#249 := (not #570)
#523 := (or #249 #254 #148)
#527 := (or #249 #525)
#528 := (iff #527 #523)
#238 := [rewrite]: #528
#524 := [quant-inst #9]: #527
#239 := [mp #524 #238]: #523
#529 := [unit-resolution #239 #575]: #525
#530 := [unit-resolution #529 #543]: #254
#252 := (not #254)
#253 := (or #542 #508 #252)
#526 := [th-lemma arith triangle-eq]: #253
#510 := [unit-resolution #526 #530 #515]: #542
#357 := (= #255 #9)
#233 := (= #232 f5)
#18 := (:var 0 S3)
#19 := (f3 f4 #18)
#556 := (pattern #19)
#20 := (f6 f7 #19)
#21 := (= #20 #18)
#557 := (forall (vars (?v0 S3)) (:pat #556) #21)
#22 := (forall (vars (?v0 S3)) #21)
#560 := (iff #22 #557)
#558 := (iff #21 #21)
#559 := [refl]: #558
#561 := [quant-intro #559]: #560
#128 := (~ #22 #22)
#90 := (~ #21 #21)
#91 := [refl]: #90
#129 := [nnf-pos #91]: #128
#36 := [asserted]: #22
#132 := [mp~ #36 #129]: #22
#562 := [mp #132 #561]: #557
#213 := (not #557)
#548 := (or #213 #233)
#550 := [quant-inst #8]: #548
#516 := [unit-resolution #550 #562]: #233
#358 := [monotonicity #516]: #357
#359 := [trans #358 #510]: #148
#501 := [unit-resolution #543 #359]: false
#502 := [lemma #501]: #148
#499 := (= #9 #255)
#504 := (= f5 #232)
#498 := [symm #516]: #504
#505 := [monotonicity #498]: #499
#506 := [trans #505 #502]: #542
#507 := [monotonicity #506]: #500
#492 := [trans #498 #507]: #339
#493 := [trans #492 #503]: #227
[unit-resolution #517 #493]: false
296289ecaade249ef4b64fabef5f8f640a51e417 123 0
unsat
#2 := false
#7 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#222 := (= #10 0::Int)
decl f6 :: (-> S4 Int S3)
decl f7 :: S4
#13 := f7
#219 := (f6 f7 #10)
#220 := (f3 f4 #219)
#221 := (= #220 0::Int)
#19 := (:var 0 Int)
#21 := (f6 f7 #19)
#556 := (pattern #21)
#22 := (f3 f4 #21)
#27 := (= #22 0::Int)
#102 := (>= #19 0::Int)
#113 := (or #102 #27)
#563 := (forall (vars (?v0 Int)) (:pat #556) #113)
#116 := (forall (vars (?v0 Int)) #113)
#566 := (iff #116 #563)
#564 := (iff #113 #113)
#565 := [refl]: #564
#567 := [quant-intro #565]: #566
#130 := (~ #116 #116)
#128 := (~ #113 #113)
#129 := [refl]: #128
#131 := [nnf-pos #129]: #130
#20 := (<= 0::Int #19)
#64 := (or #20 #27)
#69 := (forall (vars (?v0 Int)) #64)
#117 := (iff #69 #116)
#114 := (iff #64 #113)
#100 := (iff #20 #102)
#101 := [rewrite]: #100
#115 := [monotonicity #101]: #114
#118 := [quant-intro #115]: #117
#26 := (< #19 0::Int)
#28 := (implies #26 #27)
#29 := (forall (vars (?v0 Int)) #28)
#70 := (iff #29 #69)
#67 := (iff #28 #64)
#47 := (not #20)
#61 := (implies #47 #27)
#65 := (iff #61 #64)
#66 := [rewrite]: #65
#62 := (iff #28 #61)
#56 := (iff #26 #47)
#58 := (iff #47 #47)
#43 := (iff #20 #20)
#44 := [rewrite]: #43
#59 := [monotonicity #44]: #58
#57 := [rewrite]: #56
#60 := [trans #57 #59]: #56
#63 := [monotonicity #60]: #62
#68 := [trans #63 #66]: #67
#71 := [quant-intro #68]: #70
#34 := [asserted]: #29
#72 := [mp #34 #71]: #69
#119 := [mp #72 #118]: #116
#132 := [mp~ #119 #131]: #116
#568 := [mp #132 #567]: #563
#94 := (>= #10 0::Int)
#95 := (not #94)
#11 := (<= 0::Int #10)
#12 := (not #11)
#96 := (iff #12 #95)
#92 := (iff #11 #94)
#93 := [rewrite]: #92
#97 := [monotonicity #93]: #96
#40 := (iff #12 #12)
#38 := (iff #11 #11)
#39 := [rewrite]: #38
#41 := [monotonicity #39]: #40
#31 := [asserted]: #12
#42 := [mp #31 #41]: #12
#98 := [mp #42 #97]: #95
#205 := (not #563)
#541 := (or #205 #94 #221)
#225 := (or #94 #221)
#543 := (or #205 #225)
#330 := (iff #543 #541)
#537 := [rewrite]: #330
#199 := [quant-inst #10]: #543
#210 := [mp #199 #537]: #541
#211 := [unit-resolution #210 #98 #568]: #221
#547 := (= #10 #220)
#545 := (= f5 #219)
#134 := (= #219 f5)
#14 := (:var 0 S3)
#15 := (f3 f4 #14)
#549 := (pattern #15)
#16 := (f6 f7 #15)
#17 := (= #16 #14)
#550 := (forall (vars (?v0 S3)) (:pat #549) #17)
#18 := (forall (vars (?v0 S3)) #17)
#553 := (iff #18 #550)
#551 := (iff #17 #17)
#552 := [refl]: #551
#554 := [quant-intro #552]: #553
#122 := (~ #18 #18)
#91 := (~ #17 #17)
#99 := [refl]: #91
#123 := [nnf-pos #99]: #122
#32 := [asserted]: #18
#126 := [mp~ #32 #123]: #18
#555 := [mp #126 #554]: #550
#212 := (not #550)
#223 := (or #212 #134)
#224 := [quant-inst #9]: #223
#544 := [unit-resolution #224 #555]: #134
#546 := [symm #544]: #545
#542 := [monotonicity #546]: #547
#548 := [trans #542 #211]: #222
#538 := (not #222)
#197 := (or #538 #94)
#202 := [th-lemma arith triangle-eq]: #197
[unit-resolution #202 #98 #548]: false
5c14f8fdcb62dad5c500fbe42194f9994e95aaad 82 0
unsat
#2 := false
decl f6 :: (-> S4 Int S3)
#12 := 1::Int
decl f7 :: S4
#15 := f7
#16 := (f6 f7 1::Int)
decl f5 :: S3
#9 := f5
#17 := (= f5 #16)
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#237 := (f6 f7 #10)
#263 := (= #237 #16)
#554 := (= #16 #237)
#553 := (= 1::Int #10)
#191 := (= #10 1::Int)
#13 := (<= #10 1::Int)
#7 := 0::Int
#44 := (<= #10 0::Int)
#45 := (not #44)
#48 := (and #45 #13)
#54 := (not #48)
#55 := (or #54 #17)
#60 := (not #55)
#11 := (< 0::Int #10)
#14 := (and #11 #13)
#18 := (implies #14 #17)
#19 := (not #18)
#61 := (iff #19 #60)
#58 := (iff #18 #55)
#51 := (implies #48 #17)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #18 #51)
#49 := (iff #14 #48)
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#59 := [trans #53 #57]: #58
#62 := [monotonicity #59]: #61
#37 := [asserted]: #19
#63 := [mp #37 #62]: #60
#64 := [not-or-elim #63]: #48
#66 := [and-elim #64]: #13
#65 := [and-elim #64]: #45
#192 := [th-lemma arith eq-propagate 0 0 #65 #66]: #191
#551 := [symm #192]: #553
#540 := [monotonicity #551]: #554
#264 := [symm #540]: #263
#541 := (= f5 #237)
#153 := (= #237 f5)
#20 := (:var 0 S3)
#21 := (f3 f4 #20)
#567 := (pattern #21)
#22 := (f6 f7 #21)
#23 := (= #22 #20)
#568 := (forall (vars (?v0 S3)) (:pat #567) #23)
#24 := (forall (vars (?v0 S3)) #23)
#571 := (iff #24 #568)
#569 := (iff #23 #23)
#570 := [refl]: #569
#572 := [quant-intro #570]: #571
#141 := (~ #24 #24)
#139 := (~ #23 #23)
#140 := [refl]: #139
#142 := [nnf-pos #140]: #141
#38 := [asserted]: #24
#149 := [mp~ #38 #142]: #24
#573 := [mp #149 #572]: #568
#230 := (not #568)
#241 := (or #230 #153)
#242 := [quant-inst #9]: #241
#552 := [unit-resolution #242 #573]: #153
#248 := [symm #552]: #541
#265 := [trans #248 #264]: #17
#67 := (not #17)
#68 := [not-or-elim #63]: #67
[unit-resolution #68 #265]: false
ca3f6f470a64812f20f034a206f85f1299e90bba 22 0
unsat
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#10 := (<= #9 #9)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
bb3772327fe7ed3d47e357b17ea25e71f87441c8 55 0
unsat
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#106 := -1::Int
#107 := (* -1::Int #11)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#108 := (+ #9 #107)
#109 := (<= #108 0::Int)
#135 := (not #109)
#152 := (iff #135 false)
#1 := true
#147 := (not true)
#150 := (iff #147 false)
#151 := [rewrite]: #150
#148 := (iff #135 #147)
#139 := (iff #109 true)
#12 := (<= #9 #11)
#110 := (iff #12 #109)
#111 := [rewrite]: #110
#13 := 3::Int
#15 := (* 3::Int #11)
#14 := (* 3::Int #9)
#16 := (<= #14 #15)
#45 := (not #12)
#46 := (or #45 #16)
#49 := (not #46)
#17 := (implies #12 #16)
#18 := (not #17)
#50 := (iff #18 #49)
#47 := (iff #17 #46)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#38 := [asserted]: #18
#52 := [mp #38 #51]: #49
#53 := [not-or-elim #52]: #12
#112 := [mp #53 #111]: #109
#140 := [iff-true #112]: #139
#149 := [monotonicity #140]: #148
#153 := [trans #149 #151]: #152
#54 := (not #16)
#136 := (iff #54 #135)
#133 := (iff #16 #109)
#134 := [rewrite]: #133
#137 := [monotonicity #134]: #136
#55 := [not-or-elim #52]: #54
#138 := [mp #55 #137]: #135
[mp #138 #153]: false
a8aaa55cc1afac102005fa52e6f6290192b8b656 58 0
unsat
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#117 := -1::Int
#120 := (* -1::Int #11)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#121 := (+ #9 #120)
#119 := (>= #121 0::Int)
#150 := (iff #119 false)
#123 := (not #119)
#45 := (<= #11 #9)
#46 := (not #45)
#124 := (iff #46 #123)
#118 := (iff #45 #119)
#122 := [rewrite]: #118
#125 := [monotonicity #122]: #124
#13 := 3::Int
#14 := (* 3::Int #9)
#15 := (* 3::Int #11)
#49 := (<= #15 #14)
#50 := (not #49)
#56 := (or #45 #50)
#61 := (not #56)
#16 := (< #14 #15)
#12 := (< #9 #11)
#17 := (implies #12 #16)
#18 := (not #17)
#62 := (iff #18 #61)
#59 := (iff #17 #56)
#53 := (implies #46 #50)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #17 #53)
#51 := (iff #16 #50)
#52 := [rewrite]: #51
#47 := (iff #12 #46)
#48 := [rewrite]: #47
#55 := [monotonicity #48 #52]: #54
#60 := [trans #55 #58]: #59
#63 := [monotonicity #60]: #62
#38 := [asserted]: #18
#64 := [mp #38 #63]: #61
#65 := [not-or-elim #64]: #46
#126 := [mp #65 #125]: #123
#151 := [iff-false #126]: #150
#149 := (iff #49 #119)
#147 := [rewrite]: #149
#66 := [not-or-elim #64]: #49
#148 := [mp #66 #147]: #119
[mp #148 #151]: false
bc68f2688dca4da409b0f564f117c7120d85d804 57 0
unsat
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#111 := -1::Int
#114 := (* -1::Int #11)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#115 := (+ #9 #114)
#141 := (<= #115 0::Int)
#144 := (not #141)
#13 := (<= #9 #11)
#59 := (not #13)
#145 := (iff #59 #144)
#142 := (iff #13 #141)
#143 := [rewrite]: #142
#146 := [monotonicity #143]: #145
#42 := (<= #11 #9)
#49 := (or #42 #13)
#54 := (not #49)
#12 := (< #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#55 := (iff #15 #54)
#52 := (iff #14 #49)
#43 := (not #42)
#46 := (implies #43 #13)
#50 := (iff #46 #49)
#51 := [rewrite]: #50
#47 := (iff #14 #46)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#53 := [trans #48 #51]: #52
#56 := [monotonicity #53]: #55
#35 := [asserted]: #15
#57 := [mp #35 #56]: #54
#60 := [not-or-elim #57]: #59
#147 := [mp #60 #146]: #144
#113 := (>= #115 0::Int)
#117 := (not #113)
#118 := (iff #43 #117)
#112 := (iff #42 #113)
#116 := [rewrite]: #112
#119 := [monotonicity #116]: #118
#58 := [not-or-elim #57]: #43
#120 := [mp #58 #119]: #117
#163 := (or #141 #113)
#247 := [th-lemma arith farkas 1 1]: #163
#164 := [unit-resolution #247 #120]: #141
[unit-resolution #164 #147]: false
2313b6a33df28a371c3d91af7ee3267d8ec1adcb 79 0
unsat
#2 := false
#54 := -1::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
#125 := (* -1::Int #11)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#126 := (+ #9 #125)
#128 := (<= #126 -1::Int)
#24 := 0::Int
#124 := (>= #126 0::Int)
#257 := (not #124)
#168 := (not #128)
#222 := [hypothesis]: #168
#256 := (or #257 #128)
#131 := (iff #124 #128)
#55 := (+ -1::Int #11)
#56 := (<= #9 #55)
#44 := (<= #11 #9)
#67 := (iff #44 #56)
#132 := (iff #67 #131)
#129 := (iff #56 #128)
#130 := [rewrite]: #129
#123 := (iff #44 #124)
#127 := [rewrite]: #123
#133 := [monotonicity #127 #130]: #132
#13 := 1::Int
#14 := (+ #9 1::Int)
#15 := (<= #14 #11)
#12 := (< #9 #11)
#16 := (iff #12 #15)
#17 := (not #16)
#70 := (iff #17 #67)
#45 := (not #44)
#61 := (iff #45 #56)
#64 := (not #61)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #17 #64)
#62 := (iff #16 #61)
#59 := (iff #15 #56)
#48 := (+ 1::Int #9)
#51 := (<= #48 #11)
#57 := (iff #51 #56)
#58 := [rewrite]: #57
#52 := (iff #15 #51)
#49 := (= #14 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#60 := [trans #53 #58]: #59
#46 := (iff #12 #45)
#47 := [rewrite]: #46
#63 := [monotonicity #47 #60]: #62
#66 := [monotonicity #63]: #65
#71 := [trans #66 #69]: #70
#37 := [asserted]: #17
#72 := [mp #37 #71]: #67
#134 := [mp #72 #133]: #131
#253 := (not #131)
#258 := (or #257 #128 #253)
#259 := [def-axiom]: #258
#260 := [unit-resolution #259 #134]: #256
#223 := [unit-resolution #260 #222]: #257
#564 := [th-lemma arith farkas 1 1 #222 #223]: false
#202 := [lemma #564]: #128
#565 := (or #168 #257)
#567 := [th-lemma arith farkas 1 1]: #565
#207 := [unit-resolution #567 #202]: #257
#255 := (or #124 #168)
#169 := (or #124 #168 #253)
#254 := [def-axiom]: #169
#246 := [unit-resolution #254 #134]: #255
[unit-resolution #246 #207 #202]: false
6fee3152946968f658ff9cf86ca496852eca7ae9 40 0
unsat
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#10 := (< #9 #9)
#11 := (not #10)
#12 := (not #11)
#63 := (iff #12 false)
#1 := true
#45 := (not true)
#48 := (iff #45 false)
#49 := [rewrite]: #48
#61 := (iff #12 #45)
#59 := (iff #11 true)
#54 := (not false)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #11 #54)
#52 := (iff #10 false)
#39 := (<= #9 #9)
#40 := (not #39)
#50 := (iff #40 false)
#46 := (iff #40 #45)
#43 := (iff #39 true)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#53 := [trans #42 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#62 := [monotonicity #60]: #61
#64 := [trans #62 #49]: #63
#32 := [asserted]: #12
[mp #32 #64]: false
fcb70069c91934ffce190a7f4790ad5fefc7b891 65 0
unsat
#2 := false
#26 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#117 := -1::Int
#144 := (* -1::Int #14)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#145 := (+ #11 #144)
#146 := (<= #145 0::Int)
#15 := (<= #11 #14)
#147 := (iff #15 #146)
#148 := [rewrite]: #147
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#16 := (<= #9 #14)
#46 := (not #15)
#12 := (<= #9 #11)
#53 := (not #12)
#54 := (or #53 #46 #16)
#59 := (not #54)
#17 := (implies #15 #16)
#18 := (implies #12 #17)
#19 := (not #18)
#60 := (iff #19 #59)
#57 := (iff #18 #54)
#47 := (or #46 #16)
#50 := (implies #12 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #18 #50)
#48 := (iff #17 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58]: #60
#39 := [asserted]: #19
#62 := [mp #39 #61]: #59
#64 := [not-or-elim #62]: #15
#149 := [mp #64 #148]: #146
#150 := (+ #9 #144)
#151 := (<= #150 0::Int)
#154 := (not #151)
#65 := (not #16)
#155 := (iff #65 #154)
#152 := (iff #16 #151)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#66 := [not-or-elim #62]: #65
#157 := [mp #66 #156]: #154
#118 := (* -1::Int #11)
#119 := (+ #9 #118)
#120 := (<= #119 0::Int)
#121 := (iff #12 #120)
#122 := [rewrite]: #121
#63 := [not-or-elim #62]: #12
#123 := [mp #63 #122]: #120
[th-lemma arith farkas 1 -1 1 #123 #157 #149]: false
314578dd8533fcbb8964e37afa9ad18771a56310 71 0
unsat
#2 := false
#26 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#120 := -1::Int
#150 := (* -1::Int #14)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#151 := (+ #11 #150)
#152 := (<= #151 0::Int)
#15 := (<= #11 #14)
#153 := (iff #15 #152)
#154 := [rewrite]: #153
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#16 := (<= #9 #14)
#50 := (not #15)
#46 := (<= #11 #9)
#57 := (or #46 #50 #16)
#62 := (not #57)
#17 := (implies #15 #16)
#12 := (< #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#63 := (iff #19 #62)
#60 := (iff #18 #57)
#51 := (or #50 #16)
#47 := (not #46)
#54 := (implies #47 #51)
#58 := (iff #54 #57)
#59 := [rewrite]: #58
#55 := (iff #18 #54)
#52 := (iff #17 #51)
#53 := [rewrite]: #52
#48 := (iff #12 #47)
#49 := [rewrite]: #48
#56 := [monotonicity #49 #53]: #55
#61 := [trans #56 #59]: #60
#64 := [monotonicity #61]: #63
#39 := [asserted]: #19
#65 := [mp #39 #64]: #62
#67 := [not-or-elim #65]: #15
#155 := [mp #67 #154]: #152
#123 := (* -1::Int #11)
#124 := (+ #9 #123)
#122 := (>= #124 0::Int)
#126 := (not #122)
#127 := (iff #47 #126)
#121 := (iff #46 #122)
#125 := [rewrite]: #121
#128 := [monotonicity #125]: #127
#66 := [not-or-elim #65]: #47
#129 := [mp #66 #128]: #126
#156 := (+ #9 #150)
#157 := (<= #156 0::Int)
#160 := (not #157)
#68 := (not #16)
#161 := (iff #68 #160)
#158 := (iff #16 #157)
#159 := [rewrite]: #158
#162 := [monotonicity #159]: #161
#69 := [not-or-elim #65]: #68
#163 := [mp #69 #162]: #160
[th-lemma arith farkas 1 1 1 #163 #129 #155]: false
171ded070b8a8323b4f2cd46ab63f8d215cdbc40 76 0
unsat
#2 := false
#26 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#125 := -1::Int
#153 := (* -1::Int #14)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#161 := (+ #9 #153)
#162 := (<= #161 0::Int)
#165 := (not #162)
#16 := (<= #9 #14)
#73 := (not #16)
#166 := (iff #73 #165)
#163 := (iff #16 #162)
#164 := [rewrite]: #163
#167 := [monotonicity #164]: #166
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#46 := (<= #14 #11)
#12 := (<= #9 #11)
#61 := (not #12)
#62 := (or #61 #46 #16)
#67 := (not #62)
#15 := (< #11 #14)
#17 := (implies #15 #16)
#18 := (implies #12 #17)
#19 := (not #18)
#68 := (iff #19 #67)
#65 := (iff #18 #62)
#53 := (or #46 #16)
#58 := (implies #12 #53)
#63 := (iff #58 #62)
#64 := [rewrite]: #63
#59 := (iff #18 #58)
#56 := (iff #17 #53)
#47 := (not #46)
#50 := (implies #47 #16)
#54 := (iff #50 #53)
#55 := [rewrite]: #54
#51 := (iff #17 #50)
#48 := (iff #15 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#57 := [trans #52 #55]: #56
#60 := [monotonicity #57]: #59
#66 := [trans #60 #64]: #65
#69 := [monotonicity #66]: #68
#39 := [asserted]: #19
#70 := [mp #39 #69]: #67
#74 := [not-or-elim #70]: #73
#168 := [mp #74 #167]: #165
#154 := (+ #11 #153)
#152 := (>= #154 0::Int)
#157 := (not #152)
#158 := (iff #47 #157)
#155 := (iff #46 #152)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#72 := [not-or-elim #70]: #47
#160 := [mp #72 #159]: #157
#126 := (* -1::Int #11)
#127 := (+ #9 #126)
#128 := (<= #127 0::Int)
#129 := (iff #12 #128)
#130 := [rewrite]: #129
#71 := [not-or-elim #70]: #12
#131 := [mp #71 #130]: #128
[th-lemma arith farkas 1 1 1 #131 #160 #168]: false
3442e0ff683ec86dfe8263beead19ae007eb6c5a 82 0
unsat
#2 := false
#26 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#131 := -1::Int
#162 := (* -1::Int #14)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#172 := (+ #9 #162)
#171 := (>= #172 0::Int)
#54 := (<= #14 #9)
#170 := (iff #54 #171)
#173 := [rewrite]: #170
#55 := (not #54)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#50 := (<= #14 #11)
#46 := (<= #11 #9)
#69 := (or #46 #50 #55)
#74 := (not #69)
#16 := (< #9 #14)
#15 := (< #11 #14)
#17 := (implies #15 #16)
#12 := (< #9 #11)
#18 := (implies #12 #17)
#19 := (not #18)
#75 := (iff #19 #74)
#72 := (iff #18 #69)
#61 := (or #50 #55)
#47 := (not #46)
#66 := (implies #47 #61)
#70 := (iff #66 #69)
#71 := [rewrite]: #70
#67 := (iff #18 #66)
#64 := (iff #17 #61)
#51 := (not #50)
#58 := (implies #51 #55)
#62 := (iff #58 #61)
#63 := [rewrite]: #62
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#57 := [rewrite]: #56
#52 := (iff #15 #51)
#53 := [rewrite]: #52
#60 := [monotonicity #53 #57]: #59
#65 := [trans #60 #63]: #64
#48 := (iff #12 #47)
#49 := [rewrite]: #48
#68 := [monotonicity #49 #65]: #67
#73 := [trans #68 #71]: #72
#76 := [monotonicity #73]: #75
#39 := [asserted]: #19
#77 := [mp #39 #76]: #74
#80 := [not-or-elim #77]: #54
#174 := [mp #80 #173]: #171
#163 := (+ #11 #162)
#161 := (>= #163 0::Int)
#166 := (not #161)
#167 := (iff #51 #166)
#164 := (iff #50 #161)
#165 := [rewrite]: #164
#168 := [monotonicity #165]: #167
#79 := [not-or-elim #77]: #51
#169 := [mp #79 #168]: #166
#134 := (* -1::Int #11)
#135 := (+ #9 #134)
#133 := (>= #135 0::Int)
#137 := (not #133)
#138 := (iff #47 #137)
#132 := (iff #46 #133)
#136 := [rewrite]: #132
#139 := [monotonicity #136]: #138
#78 := [not-or-elim #77]: #47
#140 := [mp #78 #139]: #137
[th-lemma arith farkas 1 1 1 #140 #169 #174]: false
29a6322268f6966071dac48d687e18d152c2d9a2 90 0
unsat
#2 := false
#27 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
#136 := -1::Int
#167 := (* -1::Int #14)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#175 := (+ #9 #167)
#176 := (<= #175 0::Int)
#179 := (not #176)
#58 := (<= #9 #14)
#59 := (not #58)
#180 := (iff #59 #179)
#177 := (iff #58 #176)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#51 := (<= #14 #11)
#52 := (not #51)
#47 := (<= #11 #9)
#48 := (not #47)
#55 := (and #48 #52)
#72 := (not #55)
#73 := (or #72 #58)
#78 := (not #73)
#17 := (< #14 #9)
#18 := (not #17)
#15 := (< #11 #14)
#12 := (< #9 #11)
#16 := (and #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#79 := (iff #20 #78)
#76 := (iff #19 #73)
#69 := (implies #55 #58)
#74 := (iff #69 #73)
#75 := [rewrite]: #74
#70 := (iff #19 #69)
#67 := (iff #18 #58)
#62 := (not #59)
#65 := (iff #62 #58)
#66 := [rewrite]: #65
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#54 := [rewrite]: #53
#49 := (iff #12 #48)
#50 := [rewrite]: #49
#57 := [monotonicity #50 #54]: #56
#71 := [monotonicity #57 #68]: #70
#77 := [trans #71 #75]: #76
#80 := [monotonicity #77]: #79
#40 := [asserted]: #20
#81 := [mp #40 #80]: #78
#85 := [not-or-elim #81]: #59
#182 := [mp #85 #181]: #179
#168 := (+ #11 #167)
#166 := (>= #168 0::Int)
#171 := (not #166)
#172 := (iff #52 #171)
#169 := (iff #51 #166)
#170 := [rewrite]: #169
#173 := [monotonicity #170]: #172
#82 := [not-or-elim #81]: #55
#84 := [and-elim #82]: #52
#174 := [mp #84 #173]: #171
#139 := (* -1::Int #11)
#140 := (+ #9 #139)
#138 := (>= #140 0::Int)
#142 := (not #138)
#143 := (iff #48 #142)
#137 := (iff #47 #138)
#141 := [rewrite]: #137
#144 := [monotonicity #141]: #143
#83 := [and-elim #82]: #48
#145 := [mp #83 #144]: #142
[th-lemma arith farkas 1 1 1 #145 #174 #182]: false
6d0934f7a1554664ef5aab68f018c40077851491 17 0
unsat
#2 := false
#7 := 0::Int
#8 := (= 0::Int 0::Int)
#9 := (not #8)
#22 := (iff #9 false)
#1 := true
#17 := (not true)
#20 := (iff #17 false)
#21 := [rewrite]: #20
#18 := (iff #9 #17)
#15 := (iff #8 true)
#16 := [rewrite]: #15
#19 := [monotonicity #16]: #18
#23 := [trans #19 #21]: #22
#11 := [asserted]: #9
[mp #11 #23]: false
d7b98ca131502dcbf6e72e7a62827571cacaa1f4 25 0
unsat
#2 := false
#7 := 0::Int
#8 := (- 0::Int)
#9 := (= 0::Int #8)
#10 := (not #9)
#30 := (iff #10 false)
#1 := true
#25 := (not true)
#28 := (iff #25 false)
#29 := [rewrite]: #28
#26 := (iff #10 #25)
#23 := (iff #9 true)
#18 := (= 0::Int 0::Int)
#21 := (iff #18 true)
#22 := [rewrite]: #21
#19 := (iff #9 #18)
#16 := (= #8 0::Int)
#17 := [rewrite]: #16
#20 := [monotonicity #17]: #19
#24 := [trans #20 #22]: #23
#27 := [monotonicity #24]: #26
#31 := [trans #27 #29]: #30
#12 := [asserted]: #10
[mp #12 #31]: false
7b0ec950272ab38d7bef78f0f0033a39806c5288 17 0
unsat
#2 := false
#7 := 1::Int
#8 := (= 1::Int 1::Int)
#9 := (not #8)
#23 := (iff #9 false)
#1 := true
#18 := (not true)
#21 := (iff #18 false)
#22 := [rewrite]: #21
#19 := (iff #9 #18)
#16 := (iff #8 true)
#17 := [rewrite]: #16
#20 := [monotonicity #17]: #19
#24 := [trans #20 #22]: #23
#11 := [asserted]: #9
[mp #11 #24]: false
5bacae6f5a25de48b565a5f4f260454983cf0324 34 0
unsat
#2 := false
#7 := 1::Int
#8 := (- 1::Int)
#9 := (= #8 1::Int)
#10 := (not #9)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#29 := (not false)
#32 := (iff #29 true)
#33 := [rewrite]: #32
#30 := (iff #10 #29)
#27 := (iff #9 false)
#17 := -1::Int
#20 := (= -1::Int 1::Int)
#25 := (iff #20 false)
#26 := [rewrite]: #25
#21 := (iff #9 #20)
#18 := (= #8 -1::Int)
#19 := [rewrite]: #18
#22 := [monotonicity #19]: #21
#28 := [trans #22 #26]: #27
#31 := [monotonicity #28]: #30
#35 := [trans #31 #33]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#13 := [asserted]: #11
[mp #13 #42]: false
51cefbb0434bd040121aa77cae27123fd91052b1 50 0
unsat
#2 := false
#11 := 567::Int
#9 := 345::Int
#7 := 123::Int
#8 := (- 123::Int)
#10 := (+ #8 345::Int)
#12 := (< #10 567::Int)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#25 := 222::Int
#33 := (<= 567::Int 222::Int)
#34 := (not #33)
#47 := (iff #34 true)
#42 := (not false)
#45 := (iff #42 true)
#46 := [rewrite]: #45
#43 := (iff #34 #42)
#39 := (iff #33 false)
#41 := [rewrite]: #39
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#37 := (iff #12 #34)
#30 := (< 222::Int 567::Int)
#35 := (iff #30 #34)
#36 := [rewrite]: #35
#31 := (iff #12 #30)
#28 := (= #10 222::Int)
#19 := -123::Int
#22 := (+ -123::Int 345::Int)
#26 := (= #22 222::Int)
#27 := [rewrite]: #26
#23 := (= #10 #22)
#20 := (= #8 -123::Int)
#21 := [rewrite]: #20
#24 := [monotonicity #21]: #23
#29 := [trans #24 #27]: #28
#32 := [monotonicity #29]: #31
#38 := [trans #32 #36]: #37
#50 := [trans #38 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#15 := [asserted]: #13
[mp #15 #57]: false
7a443dccb932d2e9c10f10108463fa3fd7f3208f 40 0
unsat
#2 := false
#9 := 2345678901::Int
#7 := 123456789::Int
#8 := (- 123456789::Int)
#10 := (< #8 2345678901::Int)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#17 := -123456789::Int
#23 := (<= 2345678901::Int -123456789::Int)
#24 := (not #23)
#37 := (iff #24 true)
#32 := (not false)
#35 := (iff #32 true)
#36 := [rewrite]: #35
#33 := (iff #24 #32)
#29 := (iff #23 false)
#31 := [rewrite]: #29
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#27 := (iff #10 #24)
#20 := (< -123456789::Int 2345678901::Int)
#25 := (iff #20 #24)
#26 := [rewrite]: #25
#21 := (iff #10 #20)
#18 := (= #8 -123456789::Int)
#19 := [rewrite]: #18
#22 := [monotonicity #19]: #21
#28 := [trans #22 #26]: #27
#40 := [trans #28 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#13 := [asserted]: #11
[mp #13 #47]: false
50989c5e2e539fd2d1d21182edd10ff7b62c09eb 26 0
unsat
#2 := false
decl f3 :: Int
#7 := f3
#8 := 0::Int
#9 := (+ f3 0::Int)
#10 := (= #9 f3)
#11 := (not #10)
#30 := (iff #11 false)
#1 := true
#25 := (not true)
#28 := (iff #25 false)
#29 := [rewrite]: #28
#26 := (iff #11 #25)
#23 := (iff #10 true)
#18 := (= f3 f3)
#21 := (iff #18 true)
#22 := [rewrite]: #21
#19 := (iff #10 #18)
#17 := [rewrite]: #10
#20 := [monotonicity #17]: #19
#24 := [trans #20 #22]: #23
#27 := [monotonicity #24]: #26
#31 := [trans #27 #29]: #30
#13 := [asserted]: #11
[mp #13 #31]: false
46aef7ce6988ff7631483393ec6098c7fafc37bd 26 0
unsat
#2 := false
decl f3 :: Int
#8 := f3
#7 := 0::Int
#9 := (+ 0::Int f3)
#10 := (= #9 f3)
#11 := (not #10)
#30 := (iff #11 false)
#1 := true
#25 := (not true)
#28 := (iff #25 false)
#29 := [rewrite]: #28
#26 := (iff #11 #25)
#23 := (iff #10 true)
#18 := (= f3 f3)
#21 := (iff #18 true)
#22 := [rewrite]: #21
#19 := (iff #10 #18)
#17 := [rewrite]: #10
#20 := [monotonicity #17]: #19
#24 := [trans #20 #22]: #23
#27 := [monotonicity #24]: #26
#31 := [trans #27 #29]: #30
#13 := [asserted]: #11
[mp #13 #31]: false
9152c9719df8a2e68b390a97f0a98cb0b7ca2d0c 22 0
unsat
#2 := false
decl f3 :: Int
#7 := f3
decl f4 :: Int
#8 := f4
#10 := (+ f4 f3)
#9 := (+ f3 f4)
#11 := (= #9 #10)
#12 := (not #11)
#26 := (iff #12 false)
#1 := true
#21 := (not true)
#24 := (iff #21 false)
#25 := [rewrite]: #24
#22 := (iff #12 #21)
#19 := (iff #11 true)
#20 := [rewrite]: #19
#23 := [monotonicity #20]: #22
#27 := [trans #23 #25]: #26
#14 := [asserted]: #12
[mp #14 #27]: false
95e4d4805727a56da5d566d8d814d0ecdf083226 36 0
unsat
#2 := false
decl f5 :: Int
#9 := f5
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#12 := (+ f3 f4)
#13 := (+ #12 f5)
#10 := (+ f4 f5)
#11 := (+ f3 #10)
#14 := (= #11 #13)
#15 := (not #14)
#39 := (iff #15 false)
#1 := true
#34 := (not true)
#37 := (iff #34 false)
#38 := [rewrite]: #37
#35 := (iff #15 #34)
#32 := (iff #14 true)
#21 := (+ f3 f4 f5)
#26 := (= #21 #21)
#30 := (iff #26 true)
#31 := [rewrite]: #30
#27 := (iff #14 #26)
#24 := (= #13 #21)
#25 := [rewrite]: #24
#22 := (= #11 #21)
#23 := [rewrite]: #22
#28 := [monotonicity #23 #25]: #27
#33 := [trans #28 #31]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#17 := [asserted]: #15
[mp #17 #40]: false
1425e9f9c7d957418c96ef3737bc95f0ad15e232 44 0
unsat
#2 := false
decl f4 :: Int
#8 := f4
#21 := -1::Int
#22 := (* -1::Int f4)
decl f3 :: Int
#7 := f3
#25 := (= f3 #22)
#10 := 0::Int
#9 := (+ f3 f4)
#11 := (= #9 0::Int)
#34 := (not #11)
#35 := (iff #34 #25)
#68 := (iff #35 false)
#63 := (iff #34 #11)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #35 #63)
#61 := (iff #25 #11)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#12 := (- f4)
#13 := (= f3 #12)
#14 := (iff #11 #13)
#15 := (not #14)
#38 := (iff #15 #35)
#28 := (iff #11 #25)
#31 := (not #28)
#36 := (iff #31 #35)
#37 := [rewrite]: #36
#32 := (iff #15 #31)
#29 := (iff #14 #28)
#26 := (iff #13 #25)
#23 := (= #12 #22)
#24 := [rewrite]: #23
#27 := [monotonicity #24]: #26
#30 := [monotonicity #27]: #29
#33 := [monotonicity #30]: #32
#39 := [trans #33 #37]: #38
#17 := [asserted]: #15
#40 := [mp #17 #39]: #35
[mp #40 #69]: false
3d809dbe33000063b4a57a66bb51f680bedfd6e0 26 0
unsat
#2 := false
#7 := 1::Int
#8 := (- 1::Int)
#9 := (= #8 #8)
#10 := (not #9)
#32 := (iff #10 false)
#1 := true
#27 := (not true)
#30 := (iff #27 false)
#31 := [rewrite]: #30
#28 := (iff #10 #27)
#25 := (iff #9 true)
#16 := -1::Int
#19 := (= -1::Int -1::Int)
#23 := (iff #19 true)
#24 := [rewrite]: #23
#20 := (iff #9 #19)
#17 := (= #8 -1::Int)
#18 := [rewrite]: #17
#21 := [monotonicity #18 #18]: #20
#26 := [trans #21 #24]: #25
#29 := [monotonicity #26]: #28
#33 := [trans #29 #31]: #32
#12 := [asserted]: #10
[mp #12 #33]: false
feed10a69235d8fa170bcc786549b25dc16a103c 26 0
unsat
#2 := false
#7 := 3::Int
#8 := (- 3::Int)
#9 := (= #8 #8)
#10 := (not #9)
#32 := (iff #10 false)
#1 := true
#27 := (not true)
#30 := (iff #27 false)
#31 := [rewrite]: #30
#28 := (iff #10 #27)
#25 := (iff #9 true)
#16 := -3::Int
#19 := (= -3::Int -3::Int)
#23 := (iff #19 true)
#24 := [rewrite]: #23
#20 := (iff #9 #19)
#17 := (= #8 -3::Int)
#18 := [rewrite]: #17
#21 := [monotonicity #18 #18]: #20
#26 := [trans #21 #24]: #25
#29 := [monotonicity #26]: #28
#33 := [trans #29 #31]: #32
#12 := [asserted]: #10
[mp #12 #33]: false
e72ea83a2103fac5da57de85cef39aa4509d9d7f 50 0
unsat
#2 := false
decl f3 :: Int
#7 := f3
#9 := 0::Int
#11 := (< 0::Int f3)
#8 := (- f3)
#10 := (< #8 0::Int)
#12 := (iff #10 #11)
#13 := (not #12)
#54 := (iff #13 false)
#1 := true
#49 := (not true)
#52 := (iff #49 false)
#53 := [rewrite]: #52
#50 := (iff #13 #49)
#47 := (iff #12 true)
#32 := (<= f3 0::Int)
#35 := (not #32)
#42 := (iff #35 #35)
#45 := (iff #42 true)
#46 := [rewrite]: #45
#43 := (iff #12 #42)
#40 := (iff #11 #35)
#41 := [rewrite]: #40
#38 := (iff #10 #35)
#19 := -1::Int
#20 := (* -1::Int f3)
#26 := (<= 0::Int #20)
#27 := (not #26)
#36 := (iff #27 #35)
#33 := (iff #26 #32)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#30 := (iff #10 #27)
#23 := (< #20 0::Int)
#28 := (iff #23 #27)
#29 := [rewrite]: #28
#24 := (iff #10 #23)
#21 := (= #8 #20)
#22 := [rewrite]: #21
#25 := [monotonicity #22]: #24
#31 := [trans #25 #29]: #30
#39 := [trans #31 #37]: #38
#44 := [monotonicity #39 #41]: #43
#48 := [trans #44 #46]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#15 := [asserted]: #13
[mp #15 #55]: false
6091664b0a1373cda23f55c1b3120db85d0b3b95 50 0
unsat
#2 := false
#7 := 0::Int
decl f3 :: Int
#8 := f3
#10 := (- f3)
#11 := (< #10 0::Int)
#9 := (< 0::Int f3)
#12 := (implies #9 #11)
#13 := (not #12)
#54 := (iff #13 false)
#1 := true
#49 := (not true)
#52 := (iff #49 false)
#53 := [rewrite]: #52
#50 := (iff #13 #49)
#47 := (iff #12 true)
#19 := (<= f3 0::Int)
#20 := (not #19)
#42 := (implies #20 #20)
#45 := (iff #42 true)
#46 := [rewrite]: #45
#43 := (iff #12 #42)
#40 := (iff #11 #20)
#23 := -1::Int
#24 := (* -1::Int f3)
#30 := (<= 0::Int #24)
#31 := (not #30)
#38 := (iff #31 #20)
#36 := (iff #30 #19)
#37 := [rewrite]: #36
#39 := [monotonicity #37]: #38
#34 := (iff #11 #31)
#27 := (< #24 0::Int)
#32 := (iff #27 #31)
#33 := [rewrite]: #32
#28 := (iff #11 #27)
#25 := (= #10 #24)
#26 := [rewrite]: #25
#29 := [monotonicity #26]: #28
#35 := [trans #29 #33]: #34
#41 := [trans #35 #39]: #40
#21 := (iff #9 #20)
#22 := [rewrite]: #21
#44 := [monotonicity #22 #41]: #43
#48 := [trans #44 #46]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#15 := [asserted]: #13
[mp #15 #55]: false
3e653d037824a2320dc7a17d2f1470042381c4df 61 0
unsat
#2 := false
#8 := 0::Int
decl f3 :: Int
#7 := f3
#41 := (>= f3 0::Int)
#44 := (not #41)
#19 := (<= 0::Int f3)
#52 := (or #19 #44)
#57 := (not #52)
#10 := (- f3)
#11 := (< 0::Int #10)
#9 := (< f3 0::Int)
#12 := (implies #9 #11)
#13 := (not #12)
#58 := (iff #13 #57)
#55 := (iff #12 #52)
#20 := (not #19)
#49 := (implies #20 #44)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #12 #49)
#47 := (iff #11 #44)
#28 := -1::Int
#29 := (* -1::Int f3)
#35 := (<= #29 0::Int)
#36 := (not #35)
#45 := (iff #36 #44)
#42 := (iff #35 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#39 := (iff #11 #36)
#32 := (< 0::Int #29)
#37 := (iff #32 #36)
#38 := [rewrite]: #37
#33 := (iff #11 #32)
#30 := (= #10 #29)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#40 := [trans #34 #38]: #39
#48 := [trans #40 #46]: #47
#21 := (iff #9 #20)
#25 := (iff #20 #20)
#23 := (iff #19 #19)
#24 := [rewrite]: #23
#26 := [monotonicity #24]: #25
#22 := [rewrite]: #21
#27 := [trans #22 #26]: #21
#51 := [monotonicity #27 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#15 := [asserted]: #13
#60 := [mp #15 #59]: #57
#62 := [not-or-elim #60]: #41
#84 := (iff #20 #44)
#82 := (iff #19 #41)
#83 := [rewrite]: #82
#85 := [monotonicity #83]: #84
#61 := [not-or-elim #60]: #20
#86 := [mp #61 #85]: #44
[unit-resolution #86 #62]: false
2b8f6d15a2659a02e850b9785f0f1bc3c34740a1 40 0
unsat
#2 := false
decl f3 :: Int
#7 := f3
#8 := 0::Int
#9 := (- f3 0::Int)
#10 := (= #9 f3)
#11 := (not #10)
#44 := (iff #11 false)
#1 := true
#39 := (not true)
#42 := (iff #39 false)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 true)
#32 := (= f3 f3)
#35 := (iff #32 true)
#36 := [rewrite]: #35
#33 := (iff #10 #32)
#17 := -1::Int
#18 := (* -1::Int 0::Int)
#19 := (+ f3 #18)
#29 := (= #19 f3)
#24 := (+ f3 0::Int)
#27 := (= #24 f3)
#28 := [rewrite]: #27
#25 := (= #19 #24)
#22 := (= #18 0::Int)
#23 := [rewrite]: #22
#26 := [monotonicity #23]: #25
#30 := [trans #26 #28]: #29
#20 := (= #9 #19)
#21 := [rewrite]: #20
#31 := [trans #21 #30]: #10
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#13 := [asserted]: #11
[mp #13 #45]: false
769c85c7c62c5c6e67155574fc1ee91975c07c09 37 0
unsat
#2 := false
decl f3 :: Int
#8 := f3
#10 := (- f3)
#7 := 0::Int
#9 := (- 0::Int f3)
#11 := (= #9 #10)
#12 := (not #11)
#41 := (iff #12 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (iff #11 true)
#18 := -1::Int
#19 := (* -1::Int f3)
#29 := (= #19 #19)
#32 := (iff #29 true)
#33 := [rewrite]: #32
#30 := (iff #11 #29)
#27 := (= #10 #19)
#28 := [rewrite]: #27
#25 := (= #9 #19)
#20 := (+ 0::Int #19)
#23 := (= #20 #19)
#24 := [rewrite]: #23
#21 := (= #9 #20)
#22 := [rewrite]: #21
#26 := [trans #22 #24]: #25
#31 := [monotonicity #26 #28]: #30
#35 := [trans #31 #33]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#14 := [asserted]: #12
[mp #14 #42]: false
179a1947e4f03fe1aa70eea2951bab256e0fd919 61 0
unsat
#2 := false
#11 := 0::Int
decl f4 :: Int
#8 := f4
#24 := -1::Int
#25 := (* -1::Int f4)
decl f3 :: Int
#7 := f3
#26 := (+ f3 #25)
#78 := (>= #26 0::Int)
#32 := (<= 0::Int #26)
#76 := (iff #32 #78)
#84 := [rewrite]: #76
#33 := (not #32)
#20 := (<= f4 f3)
#46 := (or #20 #33)
#51 := (not #46)
#10 := (- f3 f4)
#12 := (< #10 0::Int)
#9 := (< f3 f4)
#13 := (implies #9 #12)
#14 := (not #13)
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#21 := (not #20)
#43 := (implies #21 #33)
#47 := (iff #43 #46)
#48 := [rewrite]: #47
#44 := (iff #13 #43)
#36 := (iff #12 #33)
#40 := (iff #33 #33)
#38 := (iff #32 #32)
#39 := [rewrite]: #38
#41 := [monotonicity #39]: #40
#29 := (< #26 0::Int)
#34 := (iff #29 #33)
#35 := [rewrite]: #34
#30 := (iff #12 #29)
#27 := (= #10 #26)
#28 := [rewrite]: #27
#31 := [monotonicity #28]: #30
#37 := [trans #31 #35]: #36
#42 := [trans #37 #41]: #36
#22 := (iff #9 #21)
#23 := [rewrite]: #22
#45 := [monotonicity #23 #42]: #44
#50 := [trans #45 #48]: #49
#53 := [monotonicity #50]: #52
#16 := [asserted]: #14
#54 := [mp #16 #53]: #51
#56 := [not-or-elim #54]: #32
#85 := [mp #56 #84]: #78
#80 := (not #78)
#81 := (iff #21 #80)
#77 := (iff #20 #78)
#79 := [rewrite]: #77
#82 := [monotonicity #79]: #81
#55 := [not-or-elim #54]: #21
#83 := [mp #55 #82]: #80
[unit-resolution #83 #85]: false
e163b714ba9729323f06150e30f725561ec36e35 58 0
unsat
#2 := false
decl f3 :: Int
#7 := f3
decl f4 :: Int
#8 := f4
#10 := (- f4 f3)
#11 := (- #10)
#9 := (- f3 f4)
#12 := (= #9 #11)
#13 := (not #12)
#62 := (iff #13 false)
#1 := true
#57 := (not true)
#60 := (iff #57 false)
#61 := [rewrite]: #60
#58 := (iff #13 #57)
#55 := (iff #12 true)
#19 := -1::Int
#20 := (* -1::Int f4)
#42 := (+ #20 f3)
#21 := (+ f3 #20)
#49 := (= #21 #42)
#53 := (iff #49 true)
#54 := [rewrite]: #53
#50 := (iff #12 #49)
#47 := (= #11 #42)
#24 := (* -1::Int f3)
#25 := (+ f4 #24)
#31 := (* -1::Int #25)
#45 := (= #31 #42)
#36 := (* -1::Int #24)
#37 := (+ #20 #36)
#43 := (= #37 #42)
#40 := (= #36 f3)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#38 := (= #31 #37)
#39 := [rewrite]: #38
#46 := [trans #39 #44]: #45
#34 := (= #11 #31)
#28 := (- #25)
#32 := (= #28 #31)
#33 := [rewrite]: #32
#29 := (= #11 #28)
#26 := (= #10 #25)
#27 := [rewrite]: #26
#30 := [monotonicity #27]: #29
#35 := [trans #30 #33]: #34
#48 := [trans #35 #46]: #47
#22 := (= #9 #21)
#23 := [rewrite]: #22
#51 := [monotonicity #23 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#15 := [asserted]: #13
[mp #15 #63]: false
76ebef49c2c39345953ea02ba782064201efe7f8 38 0
unsat
#2 := false
decl f3 :: Int
#7 := f3
decl f4 :: Int
#8 := f4
#10 := (- f4)
#11 := (+ #10 f3)
#9 := (- f3 f4)
#12 := (= #9 #11)
#13 := (not #12)
#42 := (iff #13 false)
#1 := true
#37 := (not true)
#40 := (iff #37 false)
#41 := [rewrite]: #40
#38 := (iff #13 #37)
#35 := (iff #12 true)
#19 := -1::Int
#20 := (* -1::Int f4)
#26 := (+ #20 f3)
#21 := (+ f3 #20)
#29 := (= #21 #26)
#33 := (iff #29 true)
#34 := [rewrite]: #33
#30 := (iff #12 #29)
#27 := (= #11 #26)
#24 := (= #10 #20)
#25 := [rewrite]: #24
#28 := [monotonicity #25]: #27
#22 := (= #9 #21)
#23 := [rewrite]: #22
#31 := [monotonicity #23 #28]: #30
#36 := [trans #31 #34]: #35
#39 := [monotonicity #36]: #38
#43 := [trans #39 #41]: #42
#15 := [asserted]: #13
[mp #15 #43]: false
5d73f38cd523b8ddc4eb2499e422417f533163f7 66 0
unsat
#2 := false
decl f5 :: Int
#10 := f5
decl f4 :: Int
#8 := f4
#12 := (+ f4 f5)
decl f3 :: Int
#7 := f3
#13 := (- f3 #12)
#9 := (- f3 f4)
#11 := (- #9 f5)
#14 := (= #11 #13)
#15 := (not #14)
#69 := (iff #15 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #15 #64)
#62 := (iff #14 true)
#21 := -1::Int
#29 := (* -1::Int f5)
#22 := (* -1::Int f4)
#35 := (+ f3 #22 #29)
#56 := (= #35 #35)
#60 := (iff #56 true)
#61 := [rewrite]: #60
#57 := (iff #14 #56)
#54 := (= #13 #35)
#40 := (* -1::Int #12)
#41 := (+ f3 #40)
#52 := (= #41 #35)
#44 := (+ #22 #29)
#47 := (+ f3 #44)
#50 := (= #47 #35)
#51 := [rewrite]: #50
#48 := (= #41 #47)
#45 := (= #40 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#42 := (= #13 #41)
#43 := [rewrite]: #42
#55 := [trans #43 #53]: #54
#38 := (= #11 #35)
#23 := (+ f3 #22)
#30 := (+ #23 #29)
#36 := (= #30 #35)
#37 := [rewrite]: #36
#33 := (= #11 #30)
#26 := (- #23 f5)
#31 := (= #26 #30)
#32 := [rewrite]: #31
#27 := (= #11 #26)
#24 := (= #9 #23)
#25 := [rewrite]: #24
#28 := [monotonicity #25]: #27
#34 := [trans #28 #32]: #33
#39 := [trans #34 #37]: #38
#58 := [monotonicity #39 #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#17 := [asserted]: #15
[mp #17 #70]: false
5f00c1479a6cf5f46157c2337e3fcd3ab961af7a 26 0
unsat
#2 := false
#8 := 0::Int
decl f3 :: Int
#7 := f3
#9 := (* f3 0::Int)
#10 := (= #9 0::Int)
#11 := (not #10)
#30 := (iff #11 false)
#1 := true
#25 := (not true)
#28 := (iff #25 false)
#29 := [rewrite]: #28
#26 := (iff #11 #25)
#23 := (iff #10 true)
#18 := (= 0::Int 0::Int)
#21 := (iff #18 true)
#22 := [rewrite]: #21
#19 := (iff #10 #18)
#17 := [rewrite]: #10
#20 := [monotonicity #17]: #19
#24 := [trans #20 #22]: #23
#27 := [monotonicity #24]: #26
#31 := [trans #27 #29]: #30
#13 := [asserted]: #11
[mp #13 #31]: false
99923a7a287bb7b5f864ee54973e794a9b3c80b0 26 0
unsat
#2 := false
#7 := 0::Int
decl f3 :: Int
#8 := f3
#9 := (* 0::Int f3)
#10 := (= #9 0::Int)
#11 := (not #10)
#30 := (iff #11 false)
#1 := true
#25 := (not true)
#28 := (iff #25 false)
#29 := [rewrite]: #28
#26 := (iff #11 #25)
#23 := (iff #10 true)
#18 := (= 0::Int 0::Int)
#21 := (iff #18 true)
#22 := [rewrite]: #21
#19 := (iff #10 #18)
#17 := [rewrite]: #10
#20 := [monotonicity #17]: #19
#24 := [trans #20 #22]: #23
#27 := [monotonicity #24]: #26
#31 := [trans #27 #29]: #30
#13 := [asserted]: #11
[mp #13 #31]: false
85a0977cd430199dfbbef0919269ea745bb45aab 26 0
unsat
#2 := false
decl f3 :: Int
#7 := f3
#8 := 1::Int
#9 := (* f3 1::Int)
#10 := (= #9 f3)
#11 := (not #10)
#31 := (iff #11 false)
#1 := true
#26 := (not true)
#29 := (iff #26 false)
#30 := [rewrite]: #29
#27 := (iff #11 #26)
#24 := (iff #10 true)
#18 := (= f3 f3)
#22 := (iff #18 true)
#23 := [rewrite]: #22
#19 := (iff #10 #18)
#17 := [rewrite]: #10
#20 := [monotonicity #17]: #19
#25 := [trans #20 #23]: #24
#28 := [monotonicity #25]: #27
#32 := [trans #28 #30]: #31
#13 := [asserted]: #11
[mp #13 #32]: false
eabe283eca86a8acdb0440d8b7874ab4e2e55097 26 0
unsat
#2 := false
decl f3 :: Int
#8 := f3
#7 := 1::Int
#9 := (* 1::Int f3)
#10 := (= #9 f3)
#11 := (not #10)
#31 := (iff #11 false)
#1 := true
#26 := (not true)
#29 := (iff #26 false)
#30 := [rewrite]: #29
#27 := (iff #11 #26)
#24 := (iff #10 true)
#18 := (= f3 f3)
#22 := (iff #18 true)
#23 := [rewrite]: #22
#19 := (iff #10 #18)
#17 := [rewrite]: #10
#20 := [monotonicity #17]: #19
#25 := [trans #20 #23]: #24
#28 := [monotonicity #25]: #27
#32 := [trans #28 #30]: #31
#13 := [asserted]: #11
[mp #13 #32]: false
524caed43f932116157b3dcc870eedde37cec3e7 40 0
unsat
#2 := false
decl f3 :: Int
#7 := f3
#11 := (- f3)
#8 := 1::Int
#9 := (- 1::Int)
#10 := (* f3 #9)
#12 := (= #10 #11)
#13 := (not #12)
#45 := (iff #13 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #13 #40)
#38 := (iff #12 true)
#19 := -1::Int
#25 := (* -1::Int f3)
#32 := (= #25 #25)
#36 := (iff #32 true)
#37 := [rewrite]: #36
#33 := (iff #12 #32)
#30 := (= #11 #25)
#31 := [rewrite]: #30
#28 := (= #10 #25)
#22 := (* f3 -1::Int)
#26 := (= #22 #25)
#27 := [rewrite]: #26
#23 := (= #10 #22)
#20 := (= #9 -1::Int)
#21 := [rewrite]: #20
#24 := [monotonicity #21]: #23
#29 := [trans #24 #27]: #28
#34 := [monotonicity #29 #31]: #33
#39 := [trans #34 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#15 := [asserted]: #13
[mp #15 #46]: false
0a10cdb7548396fe24d3599f572cec679b5a5887 35 0
unsat
#2 := false
decl f3 :: Int
#9 := f3
#11 := (- f3)
#7 := 1::Int
#8 := (- 1::Int)
#10 := (* #8 f3)
#12 := (= #10 #11)
#13 := (not #12)
#40 := (iff #13 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #13 #35)
#33 := (iff #12 true)
#19 := -1::Int
#22 := (* -1::Int f3)
#27 := (= #22 #22)
#31 := (iff #27 true)
#32 := [rewrite]: #31
#28 := (iff #12 #27)
#25 := (= #11 #22)
#26 := [rewrite]: #25
#23 := (= #10 #22)
#20 := (= #8 -1::Int)
#21 := [rewrite]: #20
#24 := [monotonicity #21]: #23
#29 := [monotonicity #24 #26]: #28
#34 := [trans #29 #32]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#15 := [asserted]: #13
[mp #15 #41]: false
d71969b90f628712f4f547371d51686666dd58b0 28 0
unsat
#2 := false
#7 := 3::Int
decl f3 :: Int
#8 := f3
#10 := (* f3 3::Int)
#9 := (* 3::Int f3)
#11 := (= #9 #10)
#12 := (not #11)
#33 := (iff #12 false)
#1 := true
#28 := (not true)
#31 := (iff #28 false)
#32 := [rewrite]: #31
#29 := (iff #12 #28)
#26 := (iff #11 true)
#20 := (= #9 #9)
#24 := (iff #20 true)
#25 := [rewrite]: #24
#21 := (iff #11 #20)
#18 := (= #10 #9)
#19 := [rewrite]: #18
#22 := [monotonicity #19]: #21
#27 := [trans #22 #25]: #26
#30 := [monotonicity #27]: #29
#34 := [trans #30 #32]: #33
#14 := [asserted]: #12
[mp #14 #34]: false
bf2fd8bbd9bf762047f17f623f8a7b706117dda0 254 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#15 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#13 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#14 := (f4 f5 #13)
#16 := (f3 #14 #15)
#682 := (pattern #16)
#8 := 0::Int
#78 := -1::Int
#82 := (* -1::Int #15)
#79 := (* -1::Int #13)
#85 := (div #79 #82)
#241 := (* -1::Int #85)
#242 := (+ #16 #241)
#243 := (= #242 0::Int)
#26 := (div #13 #15)
#238 := (* -1::Int #26)
#239 := (+ #16 #238)
#240 := (= #239 0::Int)
#56 := (<= #15 0::Int)
#148 := (>= #13 0::Int)
#201 := (or #148 #56)
#202 := (not #201)
#52 := (<= #13 0::Int)
#197 := (or #52 #56)
#198 := (not #197)
#205 := (or #198 #202)
#244 := (if #205 #240 #243)
#237 := (= #16 0::Int)
#18 := (= #15 0::Int)
#17 := (= #13 0::Int)
#19 := (or #17 #18)
#245 := (if #19 #237 #244)
#683 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #682) #245)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#686 := (iff #248 #683)
#684 := (iff #245 #245)
#685 := [refl]: #684
#687 := [quant-intro #685]: #686
#208 := (if #205 #26 #85)
#211 := (if #19 0::Int #208)
#214 := (= #16 #211)
#217 := (forall (vars (?v0 Int) (?v1 Int)) #214)
#249 := (iff #217 #248)
#246 := (iff #214 #245)
#247 := [rewrite]: #246
#250 := [quant-intro #247]: #249
#57 := (not #56)
#151 := (not #148)
#154 := (and #151 #57)
#53 := (not #52)
#60 := (and #53 #57)
#157 := (or #60 #154)
#160 := (if #157 #26 #85)
#163 := (if #19 0::Int #160)
#166 := (= #16 #163)
#169 := (forall (vars (?v0 Int) (?v1 Int)) #166)
#218 := (iff #169 #217)
#215 := (iff #166 #214)
#212 := (= #163 #211)
#209 := (= #160 #208)
#206 := (iff #157 #205)
#203 := (iff #154 #202)
#204 := [rewrite]: #203
#199 := (iff #60 #198)
#200 := [rewrite]: #199
#207 := [monotonicity #200 #204]: #206
#210 := [monotonicity #207]: #209
#213 := [monotonicity #210]: #212
#216 := [monotonicity #213]: #215
#219 := [quant-intro #216]: #218
#191 := (~ #169 #169)
#193 := (~ #166 #166)
#194 := [refl]: #193
#192 := [nnf-pos #194]: #191
#63 := (<= 0::Int #13)
#64 := (not #63)
#72 := (and #64 #57)
#75 := (or #60 #72)
#88 := (if #75 #26 #85)
#91 := (if #19 0::Int #88)
#94 := (= #16 #91)
#97 := (forall (vars (?v0 Int) (?v1 Int)) #94)
#170 := (iff #97 #169)
#167 := (iff #94 #166)
#164 := (= #91 #163)
#161 := (= #88 #160)
#158 := (iff #75 #157)
#155 := (iff #72 #154)
#152 := (iff #64 #151)
#149 := (iff #63 #148)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [monotonicity #165]: #167
#171 := [quant-intro #168]: #170
#28 := (- #15)
#27 := (- #13)
#29 := (div #27 #28)
#21 := (< 0::Int #15)
#23 := (< #13 0::Int)
#24 := (and #23 #21)
#20 := (< 0::Int #13)
#22 := (and #20 #21)
#25 := (or #22 #24)
#30 := (if #25 #26 #29)
#31 := (if #19 0::Int #30)
#32 := (= #16 #31)
#33 := (forall (vars (?v0 Int) (?v1 Int)) #32)
#98 := (iff #33 #97)
#95 := (iff #32 #94)
#92 := (= #31 #91)
#89 := (= #30 #88)
#86 := (= #29 #85)
#83 := (= #28 #82)
#84 := [rewrite]: #83
#80 := (= #27 #79)
#81 := [rewrite]: #80
#87 := [monotonicity #81 #84]: #86
#76 := (iff #25 #75)
#73 := (iff #24 #72)
#58 := (iff #21 #57)
#59 := [rewrite]: #58
#65 := (iff #23 #64)
#69 := (iff #64 #64)
#67 := (iff #63 #63)
#68 := [rewrite]: #67
#70 := [monotonicity #68]: #69
#66 := [rewrite]: #65
#71 := [trans #66 #70]: #65
#74 := [monotonicity #71 #59]: #73
#61 := (iff #22 #60)
#54 := (iff #20 #53)
#55 := [rewrite]: #54
#62 := [monotonicity #55 #59]: #61
#77 := [monotonicity #62 #74]: #76
#90 := [monotonicity #77 #87]: #89
#93 := [monotonicity #90]: #92
#96 := [monotonicity #93]: #95
#99 := [quant-intro #96]: #98
#47 := [asserted]: #33
#100 := [mp #47 #99]: #97
#172 := [mp #100 #171]: #169
#189 := [mp~ #172 #192]: #169
#220 := [mp #189 #219]: #217
#251 := [mp #220 #250]: #248
#688 := [mp #251 #687]: #683
#9 := (f4 f5 0::Int)
#10 := (f3 #9 0::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#46 := [asserted]: #12
#641 := (not #683)
#636 := (or #641 #11)
#333 := (* -1::Int 0::Int)
#463 := (div #333 #333)
#670 := (* -1::Int #463)
#344 := (+ #10 #670)
#345 := (= #344 0::Int)
#360 := (div 0::Int 0::Int)
#339 := (* -1::Int #360)
#674 := (+ #10 #339)
#676 := (= #674 0::Int)
#354 := (<= 0::Int 0::Int)
#357 := (>= 0::Int 0::Int)
#358 := (or #357 #354)
#359 := (not #358)
#355 := (or #354 #354)
#346 := (not #355)
#356 := (or #346 #359)
#677 := (if #356 #676 #345)
#268 := (= 0::Int 0::Int)
#353 := (or #268 #268)
#678 := (if #353 #11 #677)
#642 := (or #641 #678)
#484 := (iff #642 #636)
#627 := (iff #636 #636)
#628 := [rewrite]: #627
#635 := (iff #678 #11)
#1 := true
#648 := (if true #11 #676)
#639 := (iff #648 #11)
#634 := [rewrite]: #639
#637 := (iff #678 #648)
#647 := (iff #677 #676)
#367 := (if false #676 #676)
#361 := (iff #367 #676)
#643 := [rewrite]: #361
#645 := (iff #677 #367)
#365 := (iff #345 #676)
#654 := (= #344 #674)
#653 := (= #670 #339)
#375 := (= #463 #360)
#652 := (= #333 0::Int)
#374 := [rewrite]: #652
#649 := [monotonicity #374 #374]: #375
#650 := [monotonicity #649]: #653
#364 := [monotonicity #650]: #654
#366 := [monotonicity #364]: #365
#274 := (iff #356 false)
#656 := (or false false)
#380 := (iff #656 false)
#381 := [rewrite]: #380
#378 := (iff #356 #656)
#669 := (iff #359 false)
#323 := (not true)
#661 := (iff #323 false)
#662 := [rewrite]: #661
#668 := (iff #359 #323)
#307 := (iff #358 true)
#675 := (or true true)
#331 := (iff #675 true)
#336 := [rewrite]: #331
#665 := (iff #358 #675)
#673 := (iff #354 true)
#316 := [rewrite]: #673
#664 := (iff #357 true)
#302 := [rewrite]: #664
#667 := [monotonicity #302 #316]: #665
#308 := [trans #667 #336]: #307
#666 := [monotonicity #308]: #668
#655 := [trans #666 #662]: #669
#663 := (iff #346 false)
#659 := (iff #346 #323)
#321 := (iff #355 true)
#657 := (iff #355 #675)
#320 := [monotonicity #316 #316]: #657
#322 := [trans #320 #336]: #321
#660 := [monotonicity #322]: #659
#658 := [trans #660 #662]: #663
#379 := [monotonicity #658 #655]: #378
#651 := [trans #379 #381]: #274
#646 := [monotonicity #651 #366]: #645
#644 := [trans #646 #643]: #647
#672 := (iff #353 true)
#681 := (iff #353 #675)
#679 := (iff #268 true)
#680 := [rewrite]: #679
#671 := [monotonicity #680 #680]: #681
#332 := [trans #671 #336]: #672
#638 := [monotonicity #332 #644]: #637
#640 := [trans #638 #634]: #635
#485 := [monotonicity #640]: #484
#629 := [trans #485 #628]: #484
#483 := [quant-inst #8 #8]: #642
#630 := [mp #483 #629]: #636
[unit-resolution #630 #46 #688]: false
d3465e8250b8cbddcfc31648b91d12f4e7d1b403 267 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#683 := (pattern #17)
#10 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #16)
#80 := (* -1::Int #14)
#86 := (div #80 #83)
#242 := (* -1::Int #86)
#243 := (+ #17 #242)
#244 := (= #243 0::Int)
#27 := (div #14 #16)
#239 := (* -1::Int #27)
#240 := (+ #17 #239)
#241 := (= #240 0::Int)
#57 := (<= #16 0::Int)
#149 := (>= #14 0::Int)
#202 := (or #149 #57)
#203 := (not #202)
#53 := (<= #14 0::Int)
#198 := (or #53 #57)
#199 := (not #198)
#206 := (or #199 #203)
#245 := (if #206 #241 #244)
#238 := (= #17 0::Int)
#19 := (= #16 0::Int)
#18 := (= #14 0::Int)
#20 := (or #18 #19)
#246 := (if #20 #238 #245)
#684 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #683) #246)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#687 := (iff #249 #684)
#685 := (iff #246 #246)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#209 := (if #206 #27 #86)
#212 := (if #20 0::Int #209)
#215 := (= #17 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#250 := (iff #218 #249)
#247 := (iff #215 #246)
#248 := [rewrite]: #247
#251 := [quant-intro #248]: #250
#58 := (not #57)
#152 := (not #149)
#155 := (and #152 #58)
#54 := (not #53)
#61 := (and #54 #58)
#158 := (or #61 #155)
#161 := (if #158 #27 #86)
#164 := (if #20 0::Int #161)
#167 := (= #17 #164)
#170 := (forall (vars (?v0 Int) (?v1 Int)) #167)
#219 := (iff #170 #218)
#216 := (iff #167 #215)
#213 := (= #164 #212)
#210 := (= #161 #209)
#207 := (iff #158 #206)
#204 := (iff #155 #203)
#205 := [rewrite]: #204
#200 := (iff #61 #199)
#201 := [rewrite]: #200
#208 := [monotonicity #201 #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#192 := (~ #170 #170)
#194 := (~ #167 #167)
#195 := [refl]: #194
#193 := [nnf-pos #195]: #192
#64 := (<= 0::Int #14)
#65 := (not #64)
#73 := (and #65 #58)
#76 := (or #61 #73)
#89 := (if #76 #27 #86)
#92 := (if #20 0::Int #89)
#95 := (= #17 #92)
#98 := (forall (vars (?v0 Int) (?v1 Int)) #95)
#171 := (iff #98 #170)
#168 := (iff #95 #167)
#165 := (= #92 #164)
#162 := (= #89 #161)
#159 := (iff #76 #158)
#156 := (iff #73 #155)
#153 := (iff #65 #152)
#150 := (iff #64 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#172 := [quant-intro #169]: #171
#29 := (- #16)
#28 := (- #14)
#30 := (div #28 #29)
#22 := (< 0::Int #16)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (if #26 #27 #30)
#32 := (if #20 0::Int #31)
#33 := (= #17 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#99 := (iff #34 #98)
#96 := (iff #33 #95)
#93 := (= #32 #92)
#90 := (= #31 #89)
#87 := (= #30 #86)
#84 := (= #29 #83)
#85 := [rewrite]: #84
#81 := (= #28 #80)
#82 := [rewrite]: #81
#88 := [monotonicity #82 #85]: #87
#77 := (iff #26 #76)
#74 := (iff #25 #73)
#59 := (iff #22 #58)
#60 := [rewrite]: #59
#66 := (iff #24 #65)
#70 := (iff #65 #65)
#68 := (iff #64 #64)
#69 := [rewrite]: #68
#71 := [monotonicity #69]: #70
#67 := [rewrite]: #66
#72 := [trans #67 #71]: #66
#75 := [monotonicity #72 #60]: #74
#62 := (iff #23 #61)
#55 := (iff #21 #54)
#56 := [rewrite]: #55
#63 := [monotonicity #56 #60]: #62
#78 := [monotonicity #63 #75]: #77
#91 := [monotonicity #78 #88]: #90
#94 := [monotonicity #91]: #93
#97 := [monotonicity #94]: #96
#100 := [quant-intro #97]: #99
#48 := [asserted]: #34
#101 := [mp #48 #100]: #98
#173 := [mp #101 #172]: #170
#190 := [mp~ #173 #193]: #170
#221 := [mp #190 #220]: #218
#252 := [mp #221 #251]: #249
#689 := [mp #252 #688]: #684
decl f6 :: Int
#8 := f6
#9 := (f4 f5 f6)
#11 := (f3 #9 0::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#47 := [asserted]: #13
#626 := (not #684)
#632 := (or #626 #12)
#345 := (* -1::Int 0::Int)
#671 := (* -1::Int f6)
#346 := (div #671 #345)
#678 := (* -1::Int #346)
#679 := (+ #11 #678)
#680 := (= #679 0::Int)
#675 := (div f6 0::Int)
#677 := (* -1::Int #675)
#334 := (+ #11 #677)
#464 := (= #334 0::Int)
#347 := (<= 0::Int 0::Int)
#360 := (>= f6 0::Int)
#357 := (or #360 #347)
#361 := (not #357)
#356 := (<= f6 0::Int)
#358 := (or #356 #347)
#359 := (not #358)
#340 := (or #359 #361)
#681 := (if #340 #464 #680)
#354 := (= 0::Int 0::Int)
#269 := (= f6 0::Int)
#355 := (or #269 #354)
#676 := (if #355 #12 #681)
#633 := (or #626 #676)
#634 := (iff #633 #632)
#465 := (iff #632 #632)
#466 := [rewrite]: #465
#631 := (iff #676 #12)
#367 := (div #671 0::Int)
#647 := (* -1::Int #367)
#648 := (+ #11 #647)
#638 := (= #648 0::Int)
#1 := true
#485 := (if true #12 #638)
#629 := (iff #485 #12)
#630 := [rewrite]: #629
#486 := (iff #676 #485)
#643 := (iff #681 #638)
#635 := (if false #464 #638)
#642 := (iff #635 #638)
#637 := [rewrite]: #642
#636 := (iff #681 #635)
#639 := (iff #680 #638)
#645 := (= #679 #648)
#362 := (= #678 #647)
#368 := (= #346 #367)
#365 := (= #345 0::Int)
#366 := [rewrite]: #365
#646 := [monotonicity #366]: #368
#644 := [monotonicity #646]: #362
#649 := [monotonicity #644]: #645
#640 := [monotonicity #649]: #639
#651 := (iff #340 false)
#653 := (or false false)
#650 := (iff #653 false)
#654 := [rewrite]: #650
#375 := (iff #340 #653)
#275 := (iff #361 false)
#659 := (not true)
#666 := (iff #659 false)
#668 := [rewrite]: #666
#381 := (iff #361 #659)
#379 := (iff #357 true)
#669 := (or #360 true)
#656 := (iff #669 true)
#657 := [rewrite]: #656
#667 := (iff #357 #669)
#321 := (iff #347 true)
#322 := [rewrite]: #321
#670 := [monotonicity #322]: #667
#380 := [trans #670 #657]: #379
#382 := [monotonicity #380]: #381
#652 := [trans #382 #668]: #275
#308 := (iff #359 false)
#665 := (iff #359 #659)
#663 := (iff #358 true)
#323 := (or #356 true)
#661 := (iff #323 true)
#662 := [rewrite]: #661
#324 := (iff #358 #323)
#660 := [monotonicity #322]: #324
#664 := [trans #660 #662]: #663
#303 := [monotonicity #664]: #665
#309 := [trans #303 #668]: #308
#376 := [monotonicity #309 #652]: #375
#655 := [trans #376 #654]: #651
#641 := [monotonicity #655 #640]: #636
#484 := [trans #641 #637]: #643
#317 := (iff #355 true)
#332 := (or #269 true)
#333 := (iff #332 true)
#674 := [rewrite]: #333
#337 := (iff #355 #332)
#682 := (iff #354 true)
#672 := [rewrite]: #682
#673 := [monotonicity #672]: #337
#658 := [trans #673 #674]: #317
#628 := [monotonicity #658 #484]: #486
#625 := [trans #628 #630]: #631
#463 := [monotonicity #625]: #634
#619 := [trans #463 #466]: #634
#627 := [quant-inst #8 #10]: #633
#620 := [mp #627 #619]: #632
[unit-resolution #620 #47 #689]: false
4a9ad09bb6074d903a151e76b4a561a7a6bdd95b 288 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#682 := (pattern #17)
#8 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #16)
#80 := (* -1::Int #14)
#86 := (div #80 #83)
#242 := (* -1::Int #86)
#243 := (+ #17 #242)
#244 := (= #243 0::Int)
#27 := (div #14 #16)
#239 := (* -1::Int #27)
#240 := (+ #17 #239)
#241 := (= #240 0::Int)
#57 := (<= #16 0::Int)
#149 := (>= #14 0::Int)
#202 := (or #149 #57)
#203 := (not #202)
#53 := (<= #14 0::Int)
#198 := (or #53 #57)
#199 := (not #198)
#206 := (or #199 #203)
#245 := (if #206 #241 #244)
#238 := (= #17 0::Int)
#19 := (= #16 0::Int)
#18 := (= #14 0::Int)
#20 := (or #18 #19)
#246 := (if #20 #238 #245)
#683 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #682) #246)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#686 := (iff #249 #683)
#684 := (iff #246 #246)
#685 := [refl]: #684
#687 := [quant-intro #685]: #686
#209 := (if #206 #27 #86)
#212 := (if #20 0::Int #209)
#215 := (= #17 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#250 := (iff #218 #249)
#247 := (iff #215 #246)
#248 := [rewrite]: #247
#251 := [quant-intro #248]: #250
#58 := (not #57)
#152 := (not #149)
#155 := (and #152 #58)
#54 := (not #53)
#61 := (and #54 #58)
#158 := (or #61 #155)
#161 := (if #158 #27 #86)
#164 := (if #20 0::Int #161)
#167 := (= #17 #164)
#170 := (forall (vars (?v0 Int) (?v1 Int)) #167)
#219 := (iff #170 #218)
#216 := (iff #167 #215)
#213 := (= #164 #212)
#210 := (= #161 #209)
#207 := (iff #158 #206)
#204 := (iff #155 #203)
#205 := [rewrite]: #204
#200 := (iff #61 #199)
#201 := [rewrite]: #200
#208 := [monotonicity #201 #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#192 := (~ #170 #170)
#194 := (~ #167 #167)
#195 := [refl]: #194
#193 := [nnf-pos #195]: #192
#64 := (<= 0::Int #14)
#65 := (not #64)
#73 := (and #65 #58)
#76 := (or #61 #73)
#89 := (if #76 #27 #86)
#92 := (if #20 0::Int #89)
#95 := (= #17 #92)
#98 := (forall (vars (?v0 Int) (?v1 Int)) #95)
#171 := (iff #98 #170)
#168 := (iff #95 #167)
#165 := (= #92 #164)
#162 := (= #89 #161)
#159 := (iff #76 #158)
#156 := (iff #73 #155)
#153 := (iff #65 #152)
#150 := (iff #64 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#172 := [quant-intro #169]: #171
#29 := (- #16)
#28 := (- #14)
#30 := (div #28 #29)
#22 := (< 0::Int #16)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (if #26 #27 #30)
#32 := (if #20 0::Int #31)
#33 := (= #17 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#99 := (iff #34 #98)
#96 := (iff #33 #95)
#93 := (= #32 #92)
#90 := (= #31 #89)
#87 := (= #30 #86)
#84 := (= #29 #83)
#85 := [rewrite]: #84
#81 := (= #28 #80)
#82 := [rewrite]: #81
#88 := [monotonicity #82 #85]: #87
#77 := (iff #26 #76)
#74 := (iff #25 #73)
#59 := (iff #22 #58)
#60 := [rewrite]: #59
#66 := (iff #24 #65)
#70 := (iff #65 #65)
#68 := (iff #64 #64)
#69 := [rewrite]: #68
#71 := [monotonicity #69]: #70
#67 := [rewrite]: #66
#72 := [trans #67 #71]: #66
#75 := [monotonicity #72 #60]: #74
#62 := (iff #23 #61)
#55 := (iff #21 #54)
#56 := [rewrite]: #55
#63 := [monotonicity #56 #60]: #62
#78 := [monotonicity #63 #75]: #77
#91 := [monotonicity #78 #88]: #90
#94 := [monotonicity #91]: #93
#97 := [monotonicity #94]: #96
#100 := [quant-intro #97]: #99
#48 := [asserted]: #34
#101 := [mp #48 #100]: #98
#173 := [mp #101 #172]: #170
#190 := [mp~ #173 #193]: #170
#221 := [mp #190 #220]: #218
#252 := [mp #221 #251]: #249
#688 := [mp #252 #687]: #683
#10 := 1::Int
#9 := (f4 f5 0::Int)
#11 := (f3 #9 1::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#47 := [asserted]: #13
#615 := (not #683)
#500 := (or #615 #12)
#344 := (* -1::Int 1::Int)
#670 := (* -1::Int 0::Int)
#345 := (div #670 #344)
#677 := (* -1::Int #345)
#678 := (+ #11 #677)
#679 := (= #678 0::Int)
#674 := (div 0::Int 1::Int)
#676 := (* -1::Int #674)
#333 := (+ #11 #676)
#463 := (= #333 0::Int)
#346 := (<= 1::Int 0::Int)
#359 := (>= 0::Int 0::Int)
#356 := (or #359 #346)
#360 := (not #356)
#355 := (<= 0::Int 0::Int)
#357 := (or #355 #346)
#358 := (not #357)
#339 := (or #358 #360)
#680 := (if #339 #463 #679)
#353 := (= 1::Int 0::Int)
#269 := (= 0::Int 0::Int)
#354 := (or #269 #353)
#675 := (if #354 #12 #680)
#515 := (or #615 #675)
#518 := (iff #515 #500)
#519 := (iff #500 #500)
#520 := [rewrite]: #519
#611 := (iff #675 #12)
#1 := true
#506 := (if true #12 #12)
#614 := (iff #506 #12)
#516 := [rewrite]: #614
#507 := (iff #675 #506)
#623 := (iff #680 #12)
#618 := (if false #12 #12)
#622 := (iff #618 #12)
#620 := [rewrite]: #622
#619 := (iff #680 #618)
#464 := (iff #679 #12)
#633 := (= #678 #11)
#647 := (+ #11 0::Int)
#637 := (= #647 #11)
#638 := [rewrite]: #637
#632 := (= #678 #647)
#625 := (= #677 0::Int)
#645 := (= #670 0::Int)
#646 := [rewrite]: #645
#630 := (= #677 #670)
#628 := (= #345 0::Int)
#642 := (div 0::Int -1::Int)
#485 := (= #642 0::Int)
#627 := [rewrite]: #485
#483 := (= #345 #642)
#641 := (= #344 -1::Int)
#636 := [rewrite]: #641
#484 := [monotonicity #646 #636]: #483
#629 := [trans #484 #627]: #628
#624 := [monotonicity #629]: #630
#631 := [trans #624 #646]: #625
#626 := [monotonicity #631]: #632
#462 := [trans #626 #638]: #633
#465 := [monotonicity #462]: #464
#635 := (iff #463 #12)
#639 := (= #333 #11)
#644 := (= #333 #647)
#361 := (= #676 0::Int)
#366 := (= #676 #670)
#364 := (= #674 0::Int)
#365 := [rewrite]: #364
#367 := [monotonicity #365]: #366
#643 := [trans #367 #646]: #361
#648 := [monotonicity #643]: #644
#634 := [trans #648 #638]: #639
#640 := [monotonicity #634]: #635
#650 := (iff #339 false)
#652 := (or false false)
#649 := (iff #652 false)
#653 := [rewrite]: #649
#374 := (iff #339 #652)
#275 := (iff #360 false)
#664 := (not true)
#667 := (iff #664 false)
#307 := [rewrite]: #667
#380 := (iff #360 #664)
#378 := (iff #356 true)
#672 := (or true false)
#316 := (iff #672 true)
#657 := [rewrite]: #316
#655 := (iff #356 #672)
#659 := (iff #346 false)
#660 := [rewrite]: #659
#666 := (iff #359 true)
#669 := [rewrite]: #666
#656 := [monotonicity #669 #660]: #655
#379 := [trans #656 #657]: #378
#381 := [monotonicity #379]: #380
#651 := [trans #381 #307]: #275
#308 := (iff #358 false)
#302 := (iff #358 #664)
#663 := (iff #357 true)
#661 := (iff #357 #672)
#322 := (iff #355 true)
#323 := [rewrite]: #322
#662 := [monotonicity #323 #660]: #661
#658 := [trans #662 #657]: #663
#665 := [monotonicity #658]: #302
#668 := [trans #665 #307]: #308
#375 := [monotonicity #668 #651]: #374
#654 := [trans #375 #653]: #650
#621 := [monotonicity #654 #640 #465]: #619
#505 := [trans #621 #620]: #623
#320 := (iff #354 true)
#332 := (iff #354 #672)
#331 := (iff #353 false)
#336 := [rewrite]: #331
#681 := (iff #269 true)
#671 := [rewrite]: #681
#673 := [monotonicity #671 #336]: #332
#321 := [trans #673 #657]: #320
#466 := [monotonicity #321 #505]: #507
#612 := [trans #466 #516]: #611
#511 := [monotonicity #612]: #518
#521 := [trans #511 #520]: #518
#517 := [quant-inst #8 #10]: #515
#522 := [mp #517 #521]: #500
[unit-resolution #522 #47 #688]: false
08b9dc0e318003c903e382519352a2ba5a18727d 291 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#15 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#13 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#14 := (f4 f5 #13)
#16 := (f3 #14 #15)
#682 := (pattern #16)
#17 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #15)
#80 := (* -1::Int #13)
#86 := (div #80 #83)
#242 := (* -1::Int #86)
#243 := (+ #16 #242)
#244 := (= #243 0::Int)
#27 := (div #13 #15)
#239 := (* -1::Int #27)
#240 := (+ #16 #239)
#241 := (= #240 0::Int)
#57 := (<= #15 0::Int)
#149 := (>= #13 0::Int)
#202 := (or #149 #57)
#203 := (not #202)
#53 := (<= #13 0::Int)
#198 := (or #53 #57)
#199 := (not #198)
#206 := (or #199 #203)
#245 := (if #206 #241 #244)
#238 := (= #16 0::Int)
#19 := (= #15 0::Int)
#18 := (= #13 0::Int)
#20 := (or #18 #19)
#246 := (if #20 #238 #245)
#683 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #682) #246)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#686 := (iff #249 #683)
#684 := (iff #246 #246)
#685 := [refl]: #684
#687 := [quant-intro #685]: #686
#209 := (if #206 #27 #86)
#212 := (if #20 0::Int #209)
#215 := (= #16 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#250 := (iff #218 #249)
#247 := (iff #215 #246)
#248 := [rewrite]: #247
#251 := [quant-intro #248]: #250
#58 := (not #57)
#152 := (not #149)
#155 := (and #152 #58)
#54 := (not #53)
#61 := (and #54 #58)
#158 := (or #61 #155)
#161 := (if #158 #27 #86)
#164 := (if #20 0::Int #161)
#167 := (= #16 #164)
#170 := (forall (vars (?v0 Int) (?v1 Int)) #167)
#219 := (iff #170 #218)
#216 := (iff #167 #215)
#213 := (= #164 #212)
#210 := (= #161 #209)
#207 := (iff #158 #206)
#204 := (iff #155 #203)
#205 := [rewrite]: #204
#200 := (iff #61 #199)
#201 := [rewrite]: #200
#208 := [monotonicity #201 #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#192 := (~ #170 #170)
#194 := (~ #167 #167)
#195 := [refl]: #194
#193 := [nnf-pos #195]: #192
#64 := (<= 0::Int #13)
#65 := (not #64)
#73 := (and #65 #58)
#76 := (or #61 #73)
#89 := (if #76 #27 #86)
#92 := (if #20 0::Int #89)
#95 := (= #16 #92)
#98 := (forall (vars (?v0 Int) (?v1 Int)) #95)
#171 := (iff #98 #170)
#168 := (iff #95 #167)
#165 := (= #92 #164)
#162 := (= #89 #161)
#159 := (iff #76 #158)
#156 := (iff #73 #155)
#153 := (iff #65 #152)
#150 := (iff #64 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#172 := [quant-intro #169]: #171
#29 := (- #15)
#28 := (- #13)
#30 := (div #28 #29)
#22 := (< 0::Int #15)
#24 := (< #13 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #13)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (if #26 #27 #30)
#32 := (if #20 0::Int #31)
#33 := (= #16 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#99 := (iff #34 #98)
#96 := (iff #33 #95)
#93 := (= #32 #92)
#90 := (= #31 #89)
#87 := (= #30 #86)
#84 := (= #29 #83)
#85 := [rewrite]: #84
#81 := (= #28 #80)
#82 := [rewrite]: #81
#88 := [monotonicity #82 #85]: #87
#77 := (iff #26 #76)
#74 := (iff #25 #73)
#59 := (iff #22 #58)
#60 := [rewrite]: #59
#66 := (iff #24 #65)
#70 := (iff #65 #65)
#68 := (iff #64 #64)
#69 := [rewrite]: #68
#71 := [monotonicity #69]: #70
#67 := [rewrite]: #66
#72 := [trans #67 #71]: #66
#75 := [monotonicity #72 #60]: #74
#62 := (iff #23 #61)
#55 := (iff #21 #54)
#56 := [rewrite]: #55
#63 := [monotonicity #56 #60]: #62
#78 := [monotonicity #63 #75]: #77
#91 := [monotonicity #78 #88]: #90
#94 := [monotonicity #91]: #93
#97 := [monotonicity #94]: #96
#100 := [quant-intro #97]: #99
#48 := [asserted]: #34
#101 := [mp #48 #100]: #98
#173 := [mp #101 #172]: #170
#190 := [mp~ #173 #193]: #170
#221 := [mp #190 #220]: #218
#252 := [mp #221 #251]: #249
#688 := [mp #252 #687]: #683
#8 := 1::Int
#9 := (f4 f5 1::Int)
#10 := (f3 #9 1::Int)
#11 := (= #10 1::Int)
#12 := (not #11)
#47 := [asserted]: #12
#517 := (not #683)
#518 := (or #517 #11)
#463 := (* -1::Int 1::Int)
#670 := (div #463 #463)
#344 := (* -1::Int #670)
#345 := (+ #10 #344)
#677 := (= #345 0::Int)
#339 := (div 1::Int 1::Int)
#674 := (* -1::Int #339)
#676 := (+ #10 #674)
#333 := (= #676 0::Int)
#355 := (<= 1::Int 0::Int)
#358 := (>= 1::Int 0::Int)
#359 := (or #358 #355)
#356 := (not #359)
#346 := (or #355 #355)
#357 := (not #346)
#360 := (or #357 #356)
#678 := (if #360 #333 #677)
#354 := (= #10 0::Int)
#269 := (= 1::Int 0::Int)
#353 := (or #269 #269)
#679 := (if #353 #354 #678)
#511 := (or #517 #679)
#520 := (iff #511 #518)
#522 := (iff #518 #518)
#523 := [rewrite]: #522
#500 := (iff #679 #11)
#614 := (if false #354 #11)
#612 := (iff #614 #11)
#615 := [rewrite]: #612
#516 := (iff #679 #614)
#507 := (iff #678 #11)
#1 := true
#622 := (if true #11 #11)
#505 := (iff #622 #11)
#506 := [rewrite]: #505
#620 := (iff #678 #622)
#619 := (iff #677 #11)
#647 := (+ -1::Int #10)
#639 := (= #647 0::Int)
#640 := (iff #639 #11)
#641 := [rewrite]: #640
#465 := (iff #677 #639)
#462 := (= #345 #647)
#646 := (+ #10 -1::Int)
#644 := (= #646 #647)
#648 := [rewrite]: #644
#626 := (= #345 #646)
#631 := (= #344 -1::Int)
#365 := (= #463 -1::Int)
#366 := [rewrite]: #365
#624 := (= #344 #463)
#629 := (= #670 1::Int)
#483 := (div -1::Int -1::Int)
#627 := (= #483 1::Int)
#628 := [rewrite]: #627
#484 := (= #670 #483)
#485 := [monotonicity #366 #366]: #484
#630 := [trans #485 #628]: #629
#625 := [monotonicity #630]: #624
#632 := [trans #625 #366]: #631
#633 := [monotonicity #632]: #626
#464 := [trans #633 #648]: #462
#618 := [monotonicity #464]: #465
#621 := [trans #618 #641]: #619
#636 := (iff #333 #11)
#634 := (iff #333 #639)
#637 := (= #676 #647)
#361 := (= #676 #646)
#367 := (= #674 -1::Int)
#654 := (= #674 #463)
#653 := (= #339 1::Int)
#650 := [rewrite]: #653
#364 := [monotonicity #650]: #654
#645 := [trans #364 #366]: #367
#643 := [monotonicity #645]: #361
#638 := [trans #643 #648]: #637
#635 := [monotonicity #638]: #634
#642 := [trans #635 #641]: #636
#375 := (iff #360 true)
#667 := (or true false)
#668 := (iff #667 true)
#666 := [rewrite]: #668
#652 := (iff #360 #667)
#275 := (iff #356 false)
#656 := (not true)
#380 := (iff #656 false)
#381 := [rewrite]: #380
#378 := (iff #356 #656)
#669 := (iff #359 true)
#307 := (iff #359 #667)
#316 := (iff #355 false)
#657 := [rewrite]: #316
#302 := (iff #358 true)
#665 := [rewrite]: #302
#308 := [monotonicity #665 #657]: #307
#655 := [trans #308 #666]: #669
#379 := [monotonicity #655]: #378
#651 := [trans #379 #381]: #275
#658 := (iff #357 true)
#659 := (not false)
#662 := (iff #659 true)
#663 := [rewrite]: #662
#660 := (iff #357 #659)
#322 := (iff #346 false)
#681 := (or false false)
#336 := (iff #681 false)
#672 := [rewrite]: #336
#320 := (iff #346 #681)
#321 := [monotonicity #657 #657]: #320
#323 := [trans #321 #672]: #322
#661 := [monotonicity #323]: #660
#664 := [trans #661 #663]: #658
#374 := [monotonicity #664 #651]: #652
#649 := [trans #374 #666]: #375
#623 := [monotonicity #649 #642 #621]: #620
#466 := [trans #623 #506]: #507
#332 := (iff #353 false)
#671 := (iff #353 #681)
#680 := (iff #269 false)
#675 := [rewrite]: #680
#331 := [monotonicity #675 #675]: #671
#673 := [trans #331 #672]: #332
#611 := [monotonicity #673 #466]: #516
#515 := [trans #611 #615]: #500
#521 := [monotonicity #515]: #520
#616 := [trans #521 #523]: #520
#519 := [quant-inst #8 #8]: #511
#613 := [mp #519 #616]: #518
[unit-resolution #613 #47 #688]: false
ad4c91889628d5e832117b163debdedc3d43ede3 302 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#683 := (pattern #17)
#18 := 0::Int
#80 := -1::Int
#84 := (* -1::Int #16)
#81 := (* -1::Int #14)
#87 := (div #81 #84)
#243 := (* -1::Int #87)
#244 := (+ #17 #243)
#245 := (= #244 0::Int)
#28 := (div #14 #16)
#240 := (* -1::Int #28)
#241 := (+ #17 #240)
#242 := (= #241 0::Int)
#58 := (<= #16 0::Int)
#150 := (>= #14 0::Int)
#203 := (or #150 #58)
#204 := (not #203)
#54 := (<= #14 0::Int)
#199 := (or #54 #58)
#200 := (not #199)
#207 := (or #200 #204)
#246 := (if #207 #242 #245)
#239 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #14 0::Int)
#21 := (or #19 #20)
#247 := (if #21 #239 #246)
#684 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #683) #247)
#250 := (forall (vars (?v0 Int) (?v1 Int)) #247)
#687 := (iff #250 #684)
#685 := (iff #247 #247)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#210 := (if #207 #28 #87)
#213 := (if #21 0::Int #210)
#216 := (= #17 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#251 := (iff #219 #250)
#248 := (iff #216 #247)
#249 := [rewrite]: #248
#252 := [quant-intro #249]: #251
#59 := (not #58)
#153 := (not #150)
#156 := (and #153 #59)
#55 := (not #54)
#62 := (and #55 #59)
#159 := (or #62 #156)
#162 := (if #159 #28 #87)
#165 := (if #21 0::Int #162)
#168 := (= #17 #165)
#171 := (forall (vars (?v0 Int) (?v1 Int)) #168)
#220 := (iff #171 #219)
#217 := (iff #168 #216)
#214 := (= #165 #213)
#211 := (= #162 #210)
#208 := (iff #159 #207)
#205 := (iff #156 #204)
#206 := [rewrite]: #205
#201 := (iff #62 #200)
#202 := [rewrite]: #201
#209 := [monotonicity #202 #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#148 := (~ #171 #171)
#193 := (~ #168 #168)
#194 := [refl]: #193
#149 := [nnf-pos #194]: #148
#65 := (<= 0::Int #14)
#66 := (not #65)
#74 := (and #66 #59)
#77 := (or #62 #74)
#90 := (if #77 #28 #87)
#93 := (if #21 0::Int #90)
#96 := (= #17 #93)
#99 := (forall (vars (?v0 Int) (?v1 Int)) #96)
#172 := (iff #99 #171)
#169 := (iff #96 #168)
#166 := (= #93 #165)
#163 := (= #90 #162)
#160 := (iff #77 #159)
#157 := (iff #74 #156)
#154 := (iff #66 #153)
#151 := (iff #65 #150)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [quant-intro #170]: #172
#30 := (- #16)
#29 := (- #14)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #14 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #14)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#100 := (iff #35 #99)
#97 := (iff #34 #96)
#94 := (= #33 #93)
#91 := (= #32 #90)
#88 := (= #31 #87)
#85 := (= #30 #84)
#86 := [rewrite]: #85
#82 := (= #29 #81)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#78 := (iff #27 #77)
#75 := (iff #26 #74)
#60 := (iff #23 #59)
#61 := [rewrite]: #60
#67 := (iff #25 #66)
#71 := (iff #66 #66)
#69 := (iff #65 #65)
#70 := [rewrite]: #69
#72 := [monotonicity #70]: #71
#68 := [rewrite]: #67
#73 := [trans #68 #72]: #67
#76 := [monotonicity #73 #61]: #75
#63 := (iff #24 #62)
#56 := (iff #22 #55)
#57 := [rewrite]: #56
#64 := [monotonicity #57 #61]: #63
#79 := [monotonicity #64 #76]: #78
#92 := [monotonicity #79 #89]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#101 := [quant-intro #98]: #100
#49 := [asserted]: #35
#102 := [mp #49 #101]: #99
#174 := [mp #102 #173]: #171
#191 := [mp~ #174 #149]: #171
#222 := [mp #191 #221]: #219
#253 := [mp #222 #252]: #250
#689 := [mp #253 #688]: #684
#8 := 3::Int
#10 := 1::Int
#9 := (f4 f5 3::Int)
#11 := (f3 #9 1::Int)
#12 := (= #11 3::Int)
#13 := (not #12)
#48 := [asserted]: #13
#618 := (not #684)
#605 := (or #618 #12)
#346 := (* -1::Int 1::Int)
#345 := (* -1::Int 3::Int)
#678 := (div #345 #346)
#679 := (* -1::Int #678)
#680 := (+ #11 #679)
#681 := (= #680 0::Int)
#677 := (div 3::Int 1::Int)
#334 := (* -1::Int #677)
#464 := (+ #11 #334)
#671 := (= #464 0::Int)
#358 := (<= 1::Int 0::Int)
#357 := (>= 3::Int 0::Int)
#361 := (or #357 #358)
#340 := (not #361)
#347 := (<= 3::Int 0::Int)
#359 := (or #347 #358)
#360 := (not #359)
#675 := (or #360 #340)
#676 := (if #675 #671 #681)
#356 := (= #11 0::Int)
#354 := (= 1::Int 0::Int)
#270 := (= 3::Int 0::Int)
#355 := (or #270 #354)
#682 := (if #355 #356 #676)
#607 := (or #618 #682)
#596 := (iff #607 #605)
#608 := (iff #605 #605)
#609 := [rewrite]: #608
#617 := (iff #682 #12)
#520 := (if false #356 #12)
#523 := (iff #520 #12)
#524 := [rewrite]: #523
#521 := (iff #682 #520)
#519 := (iff #676 #12)
#1 := true
#613 := (if true #12 #12)
#516 := (iff #613 #12)
#518 := [rewrite]: #516
#616 := (iff #676 #613)
#517 := (iff #681 #12)
#648 := -3::Int
#641 := (+ -3::Int #11)
#485 := (= #641 0::Int)
#629 := (iff #485 #12)
#630 := [rewrite]: #629
#467 := (iff #681 #485)
#507 := (= #680 #641)
#640 := (+ #11 -3::Int)
#642 := (= #640 #641)
#637 := [rewrite]: #642
#624 := (= #680 #640)
#623 := (= #679 -3::Int)
#645 := (= #345 -3::Int)
#649 := [rewrite]: #645
#620 := (= #679 #345)
#466 := (= #678 3::Int)
#633 := (div -3::Int -1::Int)
#463 := (= #633 3::Int)
#465 := [rewrite]: #463
#627 := (= #678 #633)
#626 := (= #346 -1::Int)
#632 := [rewrite]: #626
#634 := [monotonicity #649 #632]: #627
#619 := [trans #634 #465]: #466
#622 := [monotonicity #619]: #620
#621 := [trans #622 #649]: #623
#506 := [monotonicity #621]: #624
#508 := [trans #506 #637]: #507
#615 := [monotonicity #508]: #467
#612 := [trans #615 #630]: #517
#631 := (iff #671 #12)
#486 := (iff #671 #485)
#643 := (= #464 #641)
#635 := (= #464 #640)
#638 := (= #334 -3::Int)
#362 := (= #334 #345)
#646 := (= #677 3::Int)
#647 := [rewrite]: #646
#644 := [monotonicity #647]: #362
#639 := [trans #644 #649]: #638
#636 := [monotonicity #639]: #635
#484 := [trans #636 #637]: #643
#628 := [monotonicity #484]: #486
#625 := [trans #628 #630]: #631
#367 := (iff #675 true)
#657 := (or true false)
#381 := (iff #657 true)
#382 := [rewrite]: #381
#365 := (iff #675 #657)
#651 := (iff #340 false)
#653 := (not true)
#650 := (iff #653 false)
#654 := [rewrite]: #650
#375 := (iff #340 #653)
#276 := (iff #361 true)
#379 := (iff #361 #657)
#661 := (iff #358 false)
#662 := [rewrite]: #661
#670 := (iff #357 true)
#656 := [rewrite]: #670
#380 := [monotonicity #656 #662]: #379
#652 := [trans #380 #382]: #276
#376 := [monotonicity #652]: #375
#655 := [trans #376 #654]: #651
#669 := (iff #360 true)
#303 := (not false)
#308 := (iff #303 true)
#309 := [rewrite]: #308
#666 := (iff #360 #303)
#659 := (iff #359 false)
#333 := (or false false)
#658 := (iff #333 false)
#321 := [rewrite]: #658
#663 := (iff #359 #333)
#324 := (iff #347 false)
#660 := [rewrite]: #324
#664 := [monotonicity #660 #662]: #663
#665 := [trans #664 #321]: #659
#668 := [monotonicity #665]: #666
#667 := [trans #668 #309]: #669
#366 := [monotonicity #667 #655]: #365
#368 := [trans #366 #382]: #367
#501 := [monotonicity #368 #625 #612]: #616
#512 := [trans #501 #518]: #519
#322 := (iff #355 false)
#674 := (iff #355 #333)
#337 := (iff #354 false)
#673 := [rewrite]: #337
#672 := (iff #270 false)
#332 := [rewrite]: #672
#317 := [monotonicity #332 #673]: #674
#323 := [trans #317 #321]: #322
#522 := [monotonicity #323 #512]: #521
#614 := [trans #522 #524]: #617
#598 := [monotonicity #614]: #596
#610 := [trans #598 #609]: #596
#599 := [quant-inst #8 #10]: #607
#606 := [mp #599 #610]: #605
[unit-resolution #606 #48 #689]: false
66efac954bb1bd3de1e46f930d0903efeef6fa16 330 0
unsat
#2 := false
#18 := 0::Int
decl f3 :: (-> S2 Int Int)
#10 := 1::Int
decl f4 :: (-> S3 Int S2)
decl f6 :: Int
#8 := f6
decl f5 :: S3
#7 := f5
#9 := (f4 f5 f6)
#11 := (f3 #9 1::Int)
#356 := (= #11 0::Int)
#516 := (not #356)
#12 := (= #11 f6)
#13 := (not #12)
#595 := (iff #13 #516)
#594 := (iff #12 #356)
#589 := (iff #356 #12)
#580 := (= 0::Int f6)
#270 := (= f6 0::Int)
#677 := (div f6 1::Int)
#80 := -1::Int
#334 := (* -1::Int #677)
#464 := (+ #11 #334)
#671 := (= #464 0::Int)
#621 := (not #671)
#585 := (= #677 f6)
#528 := (= f6 #677)
#567 := (+ f6 #334)
#573 := (<= #567 0::Int)
#587 := (= #567 0::Int)
#1 := true
#147 := [true-axiom]: true
#539 := (or false #587)
#540 := [th-lemma arith]: #539
#541 := [unit-resolution #540 #147]: #587
#544 := (not #587)
#545 := (or #544 #573)
#546 := [th-lemma arith triangle-eq]: #545
#542 := [unit-resolution #546 #541]: #573
#574 := (>= #567 0::Int)
#547 := (or #544 #574)
#527 := [th-lemma arith triangle-eq]: #547
#473 := [unit-resolution #527 #541]: #574
#509 := [th-lemma arith eq-propagate 1 1 #473 #542]: #528
#529 := [symm #509]: #585
#538 := (= #11 #677)
#633 := (<= #464 0::Int)
#557 := [hypothesis]: #671
#530 := (or #621 #633)
#531 := [th-lemma arith triangle-eq]: #530
#532 := [unit-resolution #531 #557]: #633
#627 := (>= #464 0::Int)
#425 := (or #621 #627)
#536 := [th-lemma arith triangle-eq]: #425
#537 := [unit-resolution #536 #557]: #627
#543 := [th-lemma arith eq-propagate 1 1 #537 #532]: #538
#535 := [trans #543 #529]: #12
#48 := [asserted]: #13
#503 := [unit-resolution #48 #535]: false
#510 := [lemma #503]: #621
#345 := (* -1::Int f6)
#375 := (div #345 -1::Int)
#654 := (* -1::Int #375)
#365 := (+ #11 #654)
#368 := (= #365 0::Int)
#357 := (>= f6 0::Int)
#657 := (not #357)
#347 := (<= f6 0::Int)
#665 := (not #347)
#381 := (or #665 #657)
#362 := (if #381 #671 #368)
#517 := (not #270)
#607 := [hypothesis]: #517
#601 := (or #270 #362)
#645 := (if #270 #356 #362)
#16 := (:var 0 Int)
#14 := (:var 1 Int)
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#683 := (pattern #17)
#84 := (* -1::Int #16)
#81 := (* -1::Int #14)
#87 := (div #81 #84)
#243 := (* -1::Int #87)
#244 := (+ #17 #243)
#245 := (= #244 0::Int)
#28 := (div #14 #16)
#240 := (* -1::Int #28)
#241 := (+ #17 #240)
#242 := (= #241 0::Int)
#58 := (<= #16 0::Int)
#150 := (>= #14 0::Int)
#203 := (or #150 #58)
#204 := (not #203)
#54 := (<= #14 0::Int)
#199 := (or #54 #58)
#200 := (not #199)
#207 := (or #200 #204)
#246 := (if #207 #242 #245)
#239 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #14 0::Int)
#21 := (or #19 #20)
#247 := (if #21 #239 #246)
#684 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #683) #247)
#250 := (forall (vars (?v0 Int) (?v1 Int)) #247)
#687 := (iff #250 #684)
#685 := (iff #247 #247)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#210 := (if #207 #28 #87)
#213 := (if #21 0::Int #210)
#216 := (= #17 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#251 := (iff #219 #250)
#248 := (iff #216 #247)
#249 := [rewrite]: #248
#252 := [quant-intro #249]: #251
#59 := (not #58)
#153 := (not #150)
#156 := (and #153 #59)
#55 := (not #54)
#62 := (and #55 #59)
#159 := (or #62 #156)
#162 := (if #159 #28 #87)
#165 := (if #21 0::Int #162)
#168 := (= #17 #165)
#171 := (forall (vars (?v0 Int) (?v1 Int)) #168)
#220 := (iff #171 #219)
#217 := (iff #168 #216)
#214 := (= #165 #213)
#211 := (= #162 #210)
#208 := (iff #159 #207)
#205 := (iff #156 #204)
#206 := [rewrite]: #205
#201 := (iff #62 #200)
#202 := [rewrite]: #201
#209 := [monotonicity #202 #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#193 := (~ #171 #171)
#195 := (~ #168 #168)
#196 := [refl]: #195
#194 := [nnf-pos #196]: #193
#65 := (<= 0::Int #14)
#66 := (not #65)
#74 := (and #66 #59)
#77 := (or #62 #74)
#90 := (if #77 #28 #87)
#93 := (if #21 0::Int #90)
#96 := (= #17 #93)
#99 := (forall (vars (?v0 Int) (?v1 Int)) #96)
#172 := (iff #99 #171)
#169 := (iff #96 #168)
#166 := (= #93 #165)
#163 := (= #90 #162)
#160 := (iff #77 #159)
#157 := (iff #74 #156)
#154 := (iff #66 #153)
#151 := (iff #65 #150)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [quant-intro #170]: #172
#30 := (- #16)
#29 := (- #14)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #14 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #14)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#100 := (iff #35 #99)
#97 := (iff #34 #96)
#94 := (= #33 #93)
#91 := (= #32 #90)
#88 := (= #31 #87)
#85 := (= #30 #84)
#86 := [rewrite]: #85
#82 := (= #29 #81)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#78 := (iff #27 #77)
#75 := (iff #26 #74)
#60 := (iff #23 #59)
#61 := [rewrite]: #60
#67 := (iff #25 #66)
#71 := (iff #66 #66)
#69 := (iff #65 #65)
#70 := [rewrite]: #69
#72 := [monotonicity #70]: #71
#68 := [rewrite]: #67
#73 := [trans #68 #72]: #67
#76 := [monotonicity #73 #61]: #75
#63 := (iff #24 #62)
#56 := (iff #22 #55)
#57 := [rewrite]: #56
#64 := [monotonicity #57 #61]: #63
#79 := [monotonicity #64 #76]: #78
#92 := [monotonicity #79 #89]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#101 := [quant-intro #98]: #100
#49 := [asserted]: #35
#102 := [mp #49 #101]: #99
#174 := [mp #102 #173]: #171
#148 := [mp~ #174 #194]: #171
#222 := [mp #148 #221]: #219
#253 := [mp #222 #252]: #250
#689 := [mp #253 #688]: #684
#639 := (not #684)
#640 := (or #639 #645)
#346 := (* -1::Int 1::Int)
#678 := (div #345 #346)
#679 := (* -1::Int #678)
#680 := (+ #11 #679)
#681 := (= #680 0::Int)
#358 := (<= 1::Int 0::Int)
#361 := (or #357 #358)
#340 := (not #361)
#359 := (or #347 #358)
#360 := (not #359)
#675 := (or #360 #340)
#676 := (if #675 #671 #681)
#354 := (= 1::Int 0::Int)
#355 := (or #270 #354)
#682 := (if #355 #356 #676)
#635 := (or #639 #682)
#641 := (iff #635 #640)
#637 := (iff #640 #640)
#643 := [rewrite]: #637
#649 := (iff #682 #645)
#644 := (iff #676 #362)
#646 := (iff #681 #368)
#366 := (= #680 #365)
#651 := (= #679 #654)
#376 := (= #678 #375)
#652 := (= #346 -1::Int)
#653 := [rewrite]: #652
#650 := [monotonicity #653]: #376
#655 := [monotonicity #650]: #651
#367 := [monotonicity #655]: #366
#647 := [monotonicity #367]: #646
#382 := (iff #675 #381)
#379 := (iff #340 #657)
#670 := (iff #361 #357)
#668 := (or #357 false)
#669 := (iff #668 #357)
#667 := [rewrite]: #669
#308 := (iff #361 #668)
#322 := (iff #358 false)
#323 := [rewrite]: #322
#309 := [monotonicity #323]: #308
#656 := [trans #309 #667]: #670
#380 := [monotonicity #656]: #379
#303 := (iff #360 #665)
#664 := (iff #359 #347)
#324 := (or #347 false)
#662 := (iff #324 #347)
#663 := [rewrite]: #662
#660 := (iff #359 #324)
#661 := [monotonicity #323]: #660
#659 := [trans #661 #663]: #664
#666 := [monotonicity #659]: #303
#276 := [monotonicity #666 #380]: #382
#648 := [monotonicity #276 #647]: #644
#658 := (iff #355 #270)
#337 := (or #270 false)
#674 := (iff #337 #270)
#317 := [rewrite]: #674
#673 := (iff #355 #337)
#672 := (iff #354 false)
#332 := [rewrite]: #672
#333 := [monotonicity #332]: #673
#321 := [trans #333 #317]: #658
#638 := [monotonicity #321 #648]: #649
#642 := [monotonicity #638]: #641
#484 := [trans #642 #643]: #641
#636 := [quant-inst #8 #10]: #635
#485 := [mp #636 #484]: #640
#597 := [unit-resolution #485 #689]: #645
#615 := (not #645)
#616 := (or #615 #270 #362)
#501 := [def-axiom]: #616
#602 := [unit-resolution #501 #597]: #601
#603 := [unit-resolution #602 #607]: #362
#609 := (or #381 #270)
#631 := (not #381)
#614 := [hypothesis]: #631
#486 := (or #381 #347)
#628 := [def-axiom]: #486
#618 := [unit-resolution #628 #614]: #347
#629 := (or #381 #357)
#630 := [def-axiom]: #629
#605 := [unit-resolution #630 #614]: #357
#599 := (or #270 #665 #657)
#596 := [th-lemma arith triangle-eq]: #599
#598 := [unit-resolution #596 #607]: #381
#608 := [unit-resolution #598 #605 #618]: false
#610 := [lemma #608]: #609
#575 := [unit-resolution #610 #607]: #381
#466 := (not #362)
#619 := (or #466 #631 #671)
#620 := [def-axiom]: #619
#576 := [unit-resolution #620 #575 #603 #510]: false
#577 := [lemma #576]: #270
#588 := [symm #577]: #580
#593 := [monotonicity #588]: #589
#590 := [symm #593]: #594
#581 := [monotonicity #590]: #595
#582 := [mp #48 #581]: #516
#578 := (or #517 #356)
#612 := (or #615 #517 #356)
#613 := [def-axiom]: #612
#579 := [unit-resolution #613 #597]: #578
#569 := [unit-resolution #579 #577]: #356
[unit-resolution #569 #582]: false
54eadbdaf5a8d862c94033c6a936caca8195fd89 304 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#695 := (pattern #18)
#8 := 0::Int
#54 := -1::Int
#96 := (* -1::Int #17)
#93 := (* -1::Int #15)
#99 := (div #93 #96)
#255 := (* -1::Int #99)
#256 := (+ #18 #255)
#257 := (= #256 0::Int)
#28 := (div #15 #17)
#252 := (* -1::Int #28)
#253 := (+ #18 #252)
#254 := (= #253 0::Int)
#71 := (<= #17 0::Int)
#162 := (>= #15 0::Int)
#215 := (or #162 #71)
#216 := (not #215)
#67 := (<= #15 0::Int)
#211 := (or #67 #71)
#212 := (not #211)
#219 := (or #212 #216)
#258 := (if #219 #254 #257)
#251 := (= #18 0::Int)
#20 := (= #17 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#259 := (if #21 #251 #258)
#696 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #695) #259)
#262 := (forall (vars (?v0 Int) (?v1 Int)) #259)
#699 := (iff #262 #696)
#697 := (iff #259 #259)
#698 := [refl]: #697
#700 := [quant-intro #698]: #699
#222 := (if #219 #28 #99)
#225 := (if #21 0::Int #222)
#228 := (= #18 #225)
#231 := (forall (vars (?v0 Int) (?v1 Int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#72 := (not #71)
#165 := (not #162)
#168 := (and #165 #72)
#68 := (not #67)
#75 := (and #68 #72)
#171 := (or #75 #168)
#174 := (if #171 #28 #99)
#177 := (if #21 0::Int #174)
#180 := (= #18 #177)
#183 := (forall (vars (?v0 Int) (?v1 Int)) #180)
#232 := (iff #183 #231)
#229 := (iff #180 #228)
#226 := (= #177 #225)
#223 := (= #174 #222)
#220 := (iff #171 #219)
#217 := (iff #168 #216)
#218 := [rewrite]: #217
#213 := (iff #75 #212)
#214 := [rewrite]: #213
#221 := [monotonicity #214 #218]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#203 := (~ #183 #183)
#205 := (~ #180 #180)
#206 := [refl]: #205
#204 := [nnf-pos #206]: #203
#78 := (<= 0::Int #15)
#79 := (not #78)
#87 := (and #79 #72)
#90 := (or #75 #87)
#102 := (if #90 #28 #99)
#105 := (if #21 0::Int #102)
#108 := (= #18 #105)
#111 := (forall (vars (?v0 Int) (?v1 Int)) #108)
#184 := (iff #111 #183)
#181 := (iff #108 #180)
#178 := (= #105 #177)
#175 := (= #102 #174)
#172 := (iff #90 #171)
#169 := (iff #87 #168)
#166 := (iff #79 #165)
#163 := (iff #78 #162)
#164 := [rewrite]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [quant-intro #182]: #184
#30 := (- #17)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #18 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#112 := (iff #35 #111)
#109 := (iff #34 #108)
#106 := (= #33 #105)
#103 := (= #32 #102)
#100 := (= #31 #99)
#97 := (= #30 #96)
#98 := [rewrite]: #97
#94 := (= #29 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #27 #90)
#88 := (iff #26 #87)
#73 := (iff #23 #72)
#74 := [rewrite]: #73
#80 := (iff #25 #79)
#84 := (iff #79 #79)
#82 := (iff #78 #78)
#83 := [rewrite]: #82
#85 := [monotonicity #83]: #84
#81 := [rewrite]: #80
#86 := [trans #81 #85]: #80
#89 := [monotonicity #86 #74]: #88
#76 := (iff #24 #75)
#69 := (iff #22 #68)
#70 := [rewrite]: #69
#77 := [monotonicity #70 #74]: #76
#92 := [monotonicity #77 #89]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [monotonicity #104]: #106
#110 := [monotonicity #107]: #109
#113 := [quant-intro #110]: #112
#49 := [asserted]: #35
#114 := [mp #49 #113]: #111
#186 := [mp #114 #185]: #183
#160 := [mp~ #186 #204]: #183
#234 := [mp #160 #233]: #231
#265 := [mp #234 #264]: #262
#701 := [mp #265 #700]: #696
#9 := (f4 f5 0::Int)
#57 := (f3 #9 -1::Int)
#60 := (= #57 0::Int)
#63 := (not #60)
#10 := 1::Int
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#13 := (= #12 0::Int)
#14 := (not #13)
#64 := (iff #14 #63)
#61 := (iff #13 #60)
#58 := (= #12 #57)
#55 := (= #11 -1::Int)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59]: #61
#65 := [monotonicity #62]: #64
#48 := [asserted]: #14
#66 := [mp #48 #65]: #63
#530 := (not #696)
#531 := (or #530 #60)
#357 := (* -1::Int -1::Int)
#683 := (* -1::Int 0::Int)
#358 := (div #683 #357)
#690 := (* -1::Int #358)
#691 := (+ #57 #690)
#692 := (= #691 0::Int)
#687 := (div 0::Int -1::Int)
#689 := (* -1::Int #687)
#346 := (+ #57 #689)
#476 := (= #346 0::Int)
#359 := (<= -1::Int 0::Int)
#372 := (>= 0::Int 0::Int)
#369 := (or #372 #359)
#373 := (not #369)
#368 := (<= 0::Int 0::Int)
#370 := (or #368 #359)
#371 := (not #370)
#352 := (or #371 #373)
#693 := (if #352 #476 #692)
#366 := (= -1::Int 0::Int)
#282 := (= 0::Int 0::Int)
#367 := (or #282 #366)
#688 := (if #367 #60 #693)
#524 := (or #530 #688)
#533 := (iff #524 #531)
#535 := (iff #531 #531)
#536 := [rewrite]: #535
#513 := (iff #688 #60)
#1 := true
#627 := (if true #60 #60)
#625 := (iff #627 #60)
#628 := [rewrite]: #625
#529 := (iff #688 #627)
#520 := (iff #693 #60)
#635 := (if false #60 #60)
#518 := (iff #635 #60)
#519 := [rewrite]: #518
#633 := (iff #693 #635)
#632 := (iff #692 #60)
#478 := (= #691 #57)
#650 := (+ #57 0::Int)
#647 := (= #650 #57)
#648 := [rewrite]: #647
#475 := (= #691 #650)
#639 := (= #690 0::Int)
#656 := (= #683 0::Int)
#660 := [rewrite]: #656
#644 := (= #690 #683)
#637 := (= #358 0::Int)
#498 := (div 0::Int 1::Int)
#642 := (= #498 0::Int)
#643 := [rewrite]: #642
#640 := (= #358 #498)
#496 := (= #357 1::Int)
#497 := [rewrite]: #496
#641 := [monotonicity #660 #497]: #640
#638 := [trans #641 #643]: #637
#645 := [monotonicity #638]: #644
#646 := [trans #645 #660]: #639
#477 := [monotonicity #646]: #475
#631 := [trans #477 #648]: #478
#634 := [monotonicity #631]: #632
#649 := (iff #476 #60)
#653 := (= #346 #57)
#651 := (= #346 #650)
#657 := (= #689 0::Int)
#659 := (= #689 #683)
#380 := (= #687 0::Int)
#658 := [rewrite]: #380
#374 := [monotonicity #658]: #659
#661 := [trans #374 #660]: #657
#652 := [monotonicity #661]: #651
#654 := [trans #652 #648]: #653
#655 := [monotonicity #654]: #649
#378 := (iff #352 false)
#662 := (or false false)
#667 := (iff #662 false)
#377 := [rewrite]: #667
#666 := (iff #352 #662)
#387 := (iff #373 false)
#680 := (not true)
#681 := (iff #680 false)
#679 := [rewrite]: #681
#664 := (iff #373 #680)
#394 := (iff #369 true)
#674 := (or true true)
#671 := (iff #674 true)
#677 := [rewrite]: #671
#392 := (iff #369 #674)
#672 := (iff #359 true)
#673 := [rewrite]: #672
#669 := (iff #372 true)
#391 := [rewrite]: #669
#393 := [monotonicity #391 #673]: #392
#288 := [trans #393 #677]: #394
#665 := [monotonicity #288]: #664
#388 := [trans #665 #679]: #387
#682 := (iff #371 false)
#320 := (iff #371 #680)
#315 := (iff #370 true)
#675 := (iff #370 #674)
#335 := (iff #368 true)
#336 := [rewrite]: #335
#676 := [monotonicity #336 #673]: #675
#678 := [trans #676 #677]: #315
#321 := [monotonicity #678]: #320
#668 := [trans #321 #679]: #682
#663 := [monotonicity #668 #388]: #666
#379 := [trans #663 #377]: #378
#636 := [monotonicity #379 #655 #634]: #633
#479 := [trans #636 #519]: #520
#333 := (iff #367 true)
#685 := (or true false)
#329 := (iff #685 true)
#670 := [rewrite]: #329
#345 := (iff #367 #685)
#344 := (iff #366 false)
#349 := [rewrite]: #344
#694 := (iff #282 true)
#684 := [rewrite]: #694
#686 := [monotonicity #684 #349]: #345
#334 := [trans #686 #670]: #333
#624 := [monotonicity #334 #479]: #529
#528 := [trans #624 #628]: #513
#534 := [monotonicity #528]: #533
#629 := [trans #534 #536]: #533
#532 := [quant-inst #8 #54]: #524
#626 := [mp #532 #629]: #531
[unit-resolution #626 #66 #701]: false
cf9d6de6ed3e36f7abf849890c513c16e310195c 313 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#695 := (pattern #17)
#18 := 0::Int
#54 := -1::Int
#96 := (* -1::Int #16)
#93 := (* -1::Int #14)
#99 := (div #93 #96)
#255 := (* -1::Int #99)
#256 := (+ #17 #255)
#257 := (= #256 0::Int)
#28 := (div #14 #16)
#252 := (* -1::Int #28)
#253 := (+ #17 #252)
#254 := (= #253 0::Int)
#71 := (<= #16 0::Int)
#162 := (>= #14 0::Int)
#215 := (or #162 #71)
#216 := (not #215)
#67 := (<= #14 0::Int)
#211 := (or #67 #71)
#212 := (not #211)
#219 := (or #212 #216)
#258 := (if #219 #254 #257)
#251 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #14 0::Int)
#21 := (or #19 #20)
#259 := (if #21 #251 #258)
#696 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #695) #259)
#262 := (forall (vars (?v0 Int) (?v1 Int)) #259)
#699 := (iff #262 #696)
#697 := (iff #259 #259)
#698 := [refl]: #697
#700 := [quant-intro #698]: #699
#222 := (if #219 #28 #99)
#225 := (if #21 0::Int #222)
#228 := (= #17 #225)
#231 := (forall (vars (?v0 Int) (?v1 Int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#72 := (not #71)
#165 := (not #162)
#168 := (and #165 #72)
#68 := (not #67)
#75 := (and #68 #72)
#171 := (or #75 #168)
#174 := (if #171 #28 #99)
#177 := (if #21 0::Int #174)
#180 := (= #17 #177)
#183 := (forall (vars (?v0 Int) (?v1 Int)) #180)
#232 := (iff #183 #231)
#229 := (iff #180 #228)
#226 := (= #177 #225)
#223 := (= #174 #222)
#220 := (iff #171 #219)
#217 := (iff #168 #216)
#218 := [rewrite]: #217
#213 := (iff #75 #212)
#214 := [rewrite]: #213
#221 := [monotonicity #214 #218]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#160 := (~ #183 #183)
#203 := (~ #180 #180)
#204 := [refl]: #203
#161 := [nnf-pos #204]: #160
#78 := (<= 0::Int #14)
#79 := (not #78)
#87 := (and #79 #72)
#90 := (or #75 #87)
#102 := (if #90 #28 #99)
#105 := (if #21 0::Int #102)
#108 := (= #17 #105)
#111 := (forall (vars (?v0 Int) (?v1 Int)) #108)
#184 := (iff #111 #183)
#181 := (iff #108 #180)
#178 := (= #105 #177)
#175 := (= #102 #174)
#172 := (iff #90 #171)
#169 := (iff #87 #168)
#166 := (iff #79 #165)
#163 := (iff #78 #162)
#164 := [rewrite]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [quant-intro #182]: #184
#30 := (- #16)
#29 := (- #14)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #14 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #14)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#112 := (iff #35 #111)
#109 := (iff #34 #108)
#106 := (= #33 #105)
#103 := (= #32 #102)
#100 := (= #31 #99)
#97 := (= #30 #96)
#98 := [rewrite]: #97
#94 := (= #29 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #27 #90)
#88 := (iff #26 #87)
#73 := (iff #23 #72)
#74 := [rewrite]: #73
#80 := (iff #25 #79)
#84 := (iff #79 #79)
#82 := (iff #78 #78)
#83 := [rewrite]: #82
#85 := [monotonicity #83]: #84
#81 := [rewrite]: #80
#86 := [trans #81 #85]: #80
#89 := [monotonicity #86 #74]: #88
#76 := (iff #24 #75)
#69 := (iff #22 #68)
#70 := [rewrite]: #69
#77 := [monotonicity #70 #74]: #76
#92 := [monotonicity #77 #89]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [monotonicity #104]: #106
#110 := [monotonicity #107]: #109
#113 := [quant-intro #110]: #112
#49 := [asserted]: #35
#114 := [mp #49 #113]: #111
#186 := [mp #114 #185]: #183
#207 := [mp~ #186 #161]: #183
#234 := [mp #207 #233]: #231
#265 := [mp #234 #264]: #262
#701 := [mp #265 #700]: #696
#8 := 1::Int
#9 := (f4 f5 1::Int)
#57 := (f3 #9 -1::Int)
#60 := (= #57 -1::Int)
#63 := (not #60)
#10 := (- 1::Int)
#11 := (f3 #9 #10)
#12 := (= #11 #10)
#13 := (not #12)
#64 := (iff #13 #63)
#61 := (iff #12 #60)
#55 := (= #10 -1::Int)
#56 := [rewrite]: #55
#58 := (= #11 #57)
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59 #56]: #61
#65 := [monotonicity #62]: #64
#48 := [asserted]: #13
#66 := [mp #48 #65]: #63
#626 := (not #696)
#630 := (or #626 #60)
#358 := (* -1::Int -1::Int)
#357 := (* -1::Int 1::Int)
#690 := (div #357 #358)
#691 := (* -1::Int #690)
#692 := (+ #57 #691)
#693 := (= #692 0::Int)
#689 := (div 1::Int -1::Int)
#346 := (* -1::Int #689)
#476 := (+ #57 #346)
#683 := (= #476 0::Int)
#370 := (<= -1::Int 0::Int)
#369 := (>= 1::Int 0::Int)
#373 := (or #369 #370)
#352 := (not #373)
#359 := (<= 1::Int 0::Int)
#371 := (or #359 #370)
#372 := (not #371)
#687 := (or #372 #352)
#688 := (if #687 #683 #693)
#368 := (= #57 0::Int)
#366 := (= -1::Int 0::Int)
#282 := (= 1::Int 0::Int)
#367 := (or #282 #366)
#694 := (if #367 #368 #688)
#617 := (or #626 #694)
#611 := (iff #617 #630)
#610 := (iff #630 #630)
#620 := [rewrite]: #610
#536 := (iff #694 #60)
#524 := (if false #368 #60)
#534 := (iff #524 #60)
#535 := [rewrite]: #534
#532 := (iff #694 #524)
#530 := (iff #688 #60)
#624 := (if false #60 #60)
#513 := (iff #624 #60)
#528 := [rewrite]: #513
#625 := (iff #688 #624)
#627 := (iff #693 #60)
#648 := (+ 1::Int #57)
#496 := (= #648 0::Int)
#640 := (iff #496 #60)
#641 := [rewrite]: #640
#520 := (iff #693 #496)
#518 := (= #692 #648)
#651 := (+ #57 1::Int)
#653 := (= #651 #648)
#654 := [rewrite]: #653
#633 := (= #692 #651)
#634 := (= #691 1::Int)
#660 := (= #358 1::Int)
#657 := [rewrite]: #660
#631 := (= #691 #358)
#477 := (= #690 -1::Int)
#644 := (div -1::Int 1::Int)
#646 := (= #644 -1::Int)
#475 := [rewrite]: #646
#645 := (= #690 #644)
#637 := (= #357 -1::Int)
#638 := [rewrite]: #637
#639 := [monotonicity #638 #657]: #645
#478 := [trans #639 #475]: #477
#632 := [monotonicity #478]: #631
#635 := [trans #632 #657]: #634
#636 := [monotonicity #635]: #633
#519 := [trans #636 #654]: #518
#479 := [monotonicity #519]: #520
#529 := [trans #479 #641]: #627
#642 := (iff #683 #60)
#497 := (iff #683 #496)
#649 := (= #476 #648)
#652 := (= #476 #651)
#661 := (= #346 1::Int)
#374 := (= #346 #358)
#658 := (= #689 -1::Int)
#659 := [rewrite]: #658
#656 := [monotonicity #659]: #374
#650 := [trans #656 #657]: #661
#647 := [monotonicity #650]: #652
#655 := [trans #647 #654]: #649
#498 := [monotonicity #655]: #497
#643 := [trans #498 #641]: #642
#379 := (iff #687 false)
#345 := (or false false)
#670 := (iff #345 false)
#333 := [rewrite]: #670
#377 := (iff #687 #345)
#663 := (iff #352 false)
#1 := true
#320 := (not true)
#679 := (iff #320 false)
#682 := [rewrite]: #679
#662 := (iff #352 #320)
#387 := (iff #373 true)
#393 := (or true true)
#664 := (iff #393 true)
#665 := [rewrite]: #664
#394 := (iff #373 #393)
#673 := (iff #370 true)
#674 := [rewrite]: #673
#391 := (iff #369 true)
#392 := [rewrite]: #391
#288 := [monotonicity #392 #674]: #394
#388 := [trans #288 #665]: #387
#666 := [monotonicity #388]: #662
#667 := [trans #666 #682]: #663
#668 := (iff #372 false)
#321 := (iff #372 #320)
#678 := (iff #371 true)
#675 := (or false true)
#677 := (iff #675 true)
#315 := [rewrite]: #677
#676 := (iff #371 #675)
#336 := (iff #359 false)
#672 := [rewrite]: #336
#671 := [monotonicity #672 #674]: #676
#680 := [trans #671 #315]: #678
#681 := [monotonicity #680]: #321
#669 := [trans #681 #682]: #668
#378 := [monotonicity #669 #667]: #377
#380 := [trans #378 #333]: #379
#628 := [monotonicity #380 #643 #529]: #625
#531 := [trans #628 #528]: #530
#334 := (iff #367 false)
#686 := (iff #367 #345)
#349 := (iff #366 false)
#685 := [rewrite]: #349
#684 := (iff #282 false)
#344 := [rewrite]: #684
#329 := [monotonicity #344 #685]: #686
#335 := [trans #329 #333]: #334
#533 := [monotonicity #335 #531]: #532
#629 := [trans #533 #535]: #536
#608 := [monotonicity #629]: #611
#621 := [trans #608 #620]: #611
#619 := [quant-inst #8 #54]: #617
#622 := [mp #619 #621]: #630
[unit-resolution #622 #66 #701]: false
4a771fcb3bc990f914da773b60610eba4dcd1715 321 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#700 := (pattern #19)
#20 := 0::Int
#56 := -1::Int
#101 := (* -1::Int #18)
#98 := (* -1::Int #16)
#104 := (div #98 #101)
#260 := (* -1::Int #104)
#261 := (+ #19 #260)
#262 := (= #261 0::Int)
#30 := (div #16 #18)
#257 := (* -1::Int #30)
#258 := (+ #19 #257)
#259 := (= #258 0::Int)
#76 := (<= #18 0::Int)
#167 := (>= #16 0::Int)
#220 := (or #167 #76)
#221 := (not #220)
#72 := (<= #16 0::Int)
#216 := (or #72 #76)
#217 := (not #216)
#224 := (or #217 #221)
#263 := (if #224 #259 #262)
#256 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#264 := (if #23 #256 #263)
#701 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #700) #264)
#267 := (forall (vars (?v0 Int) (?v1 Int)) #264)
#704 := (iff #267 #701)
#702 := (iff #264 #264)
#703 := [refl]: #702
#705 := [quant-intro #703]: #704
#227 := (if #224 #30 #104)
#230 := (if #23 0::Int #227)
#233 := (= #19 #230)
#236 := (forall (vars (?v0 Int) (?v1 Int)) #233)
#268 := (iff #236 #267)
#265 := (iff #233 #264)
#266 := [rewrite]: #265
#269 := [quant-intro #266]: #268
#77 := (not #76)
#170 := (not #167)
#173 := (and #170 #77)
#73 := (not #72)
#80 := (and #73 #77)
#176 := (or #80 #173)
#179 := (if #176 #30 #104)
#182 := (if #23 0::Int #179)
#185 := (= #19 #182)
#188 := (forall (vars (?v0 Int) (?v1 Int)) #185)
#237 := (iff #188 #236)
#234 := (iff #185 #233)
#231 := (= #182 #230)
#228 := (= #179 #227)
#225 := (iff #176 #224)
#222 := (iff #173 #221)
#223 := [rewrite]: #222
#218 := (iff #80 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [quant-intro #235]: #237
#165 := (~ #188 #188)
#208 := (~ #185 #185)
#209 := [refl]: #208
#166 := [nnf-pos #209]: #165
#83 := (<= 0::Int #16)
#84 := (not #83)
#92 := (and #84 #77)
#95 := (or #80 #92)
#107 := (if #95 #30 #104)
#110 := (if #23 0::Int #107)
#113 := (= #19 #110)
#116 := (forall (vars (?v0 Int) (?v1 Int)) #113)
#189 := (iff #116 #188)
#186 := (iff #113 #185)
#183 := (= #110 #182)
#180 := (= #107 #179)
#177 := (iff #95 #176)
#174 := (iff #92 #173)
#171 := (iff #84 #170)
#168 := (iff #83 #167)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [quant-intro #187]: #189
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#117 := (iff #37 #116)
#114 := (iff #36 #113)
#111 := (= #35 #110)
#108 := (= #34 #107)
#105 := (= #33 #104)
#102 := (= #32 #101)
#103 := [rewrite]: #102
#99 := (= #31 #98)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #103]: #105
#96 := (iff #29 #95)
#93 := (iff #28 #92)
#78 := (iff #25 #77)
#79 := [rewrite]: #78
#85 := (iff #27 #84)
#89 := (iff #84 #84)
#87 := (iff #83 #83)
#88 := [rewrite]: #87
#90 := [monotonicity #88]: #89
#86 := [rewrite]: #85
#91 := [trans #86 #90]: #85
#94 := [monotonicity #91 #79]: #93
#81 := (iff #26 #80)
#74 := (iff #24 #73)
#75 := [rewrite]: #74
#82 := [monotonicity #75 #79]: #81
#97 := [monotonicity #82 #94]: #96
#109 := [monotonicity #97 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [quant-intro #115]: #117
#51 := [asserted]: #37
#119 := [mp #51 #118]: #116
#191 := [mp #119 #190]: #188
#210 := [mp~ #191 #166]: #188
#239 := [mp #210 #238]: #236
#270 := [mp #239 #269]: #267
#706 := [mp #270 #705]: #701
#62 := -3::Int
#8 := 3::Int
#9 := (f4 f5 3::Int)
#59 := (f3 #9 -1::Int)
#65 := (= #59 -3::Int)
#68 := (not #65)
#13 := (- 3::Int)
#10 := 1::Int
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#14 := (= #12 #13)
#15 := (not #14)
#69 := (iff #15 #68)
#66 := (iff #14 #65)
#63 := (= #13 -3::Int)
#64 := [rewrite]: #63
#60 := (= #12 #59)
#57 := (= #11 -1::Int)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#67 := [monotonicity #61 #64]: #66
#70 := [monotonicity #67]: #69
#50 := [asserted]: #15
#71 := [mp #50 #70]: #68
#624 := (not #701)
#616 := (or #624 #65)
#363 := (* -1::Int -1::Int)
#362 := (* -1::Int 3::Int)
#695 := (div #362 #363)
#696 := (* -1::Int #695)
#697 := (+ #59 #696)
#698 := (= #697 0::Int)
#694 := (div 3::Int -1::Int)
#351 := (* -1::Int #694)
#481 := (+ #59 #351)
#688 := (= #481 0::Int)
#375 := (<= -1::Int 0::Int)
#374 := (>= 3::Int 0::Int)
#378 := (or #374 #375)
#357 := (not #378)
#364 := (<= 3::Int 0::Int)
#376 := (or #364 #375)
#377 := (not #376)
#692 := (or #377 #357)
#693 := (if #692 #688 #698)
#373 := (= #59 0::Int)
#371 := (= -1::Int 0::Int)
#287 := (= 3::Int 0::Int)
#372 := (or #287 #371)
#699 := (if #372 #373 #693)
#613 := (or #624 #699)
#625 := (iff #613 #616)
#627 := (iff #616 #616)
#623 := [rewrite]: #627
#635 := (iff #699 #65)
#539 := (if false #373 #65)
#634 := (iff #539 #65)
#631 := [rewrite]: #634
#540 := (iff #699 #539)
#537 := (iff #693 #65)
#518 := (if false #65 #65)
#536 := (iff #518 #65)
#529 := [rewrite]: #536
#533 := (iff #693 #518)
#630 := (iff #698 #65)
#658 := (+ 3::Int #59)
#502 := (= #658 0::Int)
#646 := (iff #502 #65)
#647 := [rewrite]: #646
#534 := (iff #698 #502)
#484 := (= #697 #658)
#657 := (+ #59 3::Int)
#659 := (= #657 #658)
#654 := [rewrite]: #659
#524 := (= #697 #657)
#641 := (= #696 3::Int)
#379 := (* -1::Int -3::Int)
#662 := (= #379 3::Int)
#666 := [rewrite]: #662
#640 := (= #696 #379)
#637 := (= #695 -3::Int)
#651 := (div -3::Int 1::Int)
#483 := (= #651 -3::Int)
#636 := [rewrite]: #483
#480 := (= #695 #651)
#650 := (= #363 1::Int)
#644 := [rewrite]: #650
#643 := (= #362 -3::Int)
#649 := [rewrite]: #643
#482 := [monotonicity #649 #644]: #480
#639 := [trans #482 #636]: #637
#638 := [monotonicity #639]: #640
#523 := [trans #638 #666]: #641
#525 := [monotonicity #523]: #524
#632 := [trans #525 #654]: #484
#629 := [monotonicity #632]: #534
#633 := [trans #629 #647]: #630
#648 := (iff #688 #65)
#503 := (iff #688 #502)
#660 := (= #481 #658)
#652 := (= #481 #657)
#655 := (= #351 3::Int)
#661 := (= #351 #379)
#663 := (= #694 -3::Int)
#664 := [rewrite]: #663
#665 := [monotonicity #664]: #661
#656 := [trans #665 #666]: #655
#653 := [monotonicity #656]: #652
#501 := [trans #653 #654]: #660
#645 := [monotonicity #501]: #503
#642 := [trans #645 #647]: #648
#384 := (iff #692 false)
#350 := (or false false)
#675 := (iff #350 false)
#338 := [rewrite]: #675
#382 := (iff #692 #350)
#668 := (iff #357 false)
#1 := true
#325 := (not true)
#684 := (iff #325 false)
#687 := [rewrite]: #684
#667 := (iff #357 #325)
#392 := (iff #378 true)
#398 := (or true true)
#669 := (iff #398 true)
#670 := [rewrite]: #669
#399 := (iff #378 #398)
#678 := (iff #375 true)
#679 := [rewrite]: #678
#396 := (iff #374 true)
#397 := [rewrite]: #396
#293 := [monotonicity #397 #679]: #399
#393 := [trans #293 #670]: #392
#671 := [monotonicity #393]: #667
#672 := [trans #671 #687]: #668
#673 := (iff #377 false)
#326 := (iff #377 #325)
#683 := (iff #376 true)
#680 := (or false true)
#682 := (iff #680 true)
#320 := [rewrite]: #682
#681 := (iff #376 #680)
#341 := (iff #364 false)
#677 := [rewrite]: #341
#676 := [monotonicity #677 #679]: #681
#685 := [trans #676 #320]: #683
#686 := [monotonicity #685]: #326
#674 := [trans #686 #687]: #673
#383 := [monotonicity #674 #672]: #382
#385 := [trans #383 #338]: #384
#535 := [monotonicity #385 #642 #633]: #533
#538 := [trans #535 #529]: #537
#339 := (iff #372 false)
#691 := (iff #372 #350)
#354 := (iff #371 false)
#690 := [rewrite]: #354
#689 := (iff #287 false)
#349 := [rewrite]: #689
#334 := [monotonicity #349 #690]: #691
#340 := [trans #334 #338]: #339
#541 := [monotonicity #340 #538]: #540
#622 := [trans #541 #631]: #635
#626 := [monotonicity #622]: #625
#628 := [trans #626 #623]: #625
#615 := [quant-inst #8 #56]: #613
#617 := [mp #615 #628]: #616
[unit-resolution #617 #71 #706]: false
fa2287cb3b9cb63c17ef33b8c249637d75072d26 364 0
unsat
#2 := false
#20 := 0::Int
#10 := 1::Int
decl f6 :: Int
#8 := f6
#56 := -1::Int
#62 := (* -1::Int f6)
#671 := (div #62 1::Int)
#669 := (* -1::Int #671)
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#9 := (f4 f5 f6)
#59 := (f3 #9 -1::Int)
#674 := (+ #59 #669)
#648 := (<= #674 0::Int)
#665 := (= #674 0::Int)
#380 := (= f6 0::Int)
#531 := (not #380)
#384 := (<= f6 0::Int)
#635 := [hypothesis]: #380
#631 := (or #531 #384)
#636 := [th-lemma arith triangle-eq]: #631
#625 := [unit-resolution #636 #635]: #384
#167 := (+ f6 #59)
#295 := (<= #167 0::Int)
#626 := (not #295)
#379 := (>= #167 0::Int)
#365 := (>= f6 0::Int)
#641 := (not #665)
#646 := (>= #674 0::Int)
#578 := (not #646)
#587 := (not #379)
#588 := [hypothesis]: #587
#579 := (or #578 #379)
#586 := [hypothesis]: #646
#622 := (+ f6 #671)
#619 := (>= #622 0::Int)
#629 := (= #622 0::Int)
#1 := true
#164 := [true-axiom]: true
#589 := (or false #629)
#590 := [th-lemma arith]: #589
#585 := [unit-resolution #590 #164]: #629
#591 := (not #629)
#577 := (or #591 #619)
#573 := [th-lemma arith triangle-eq]: #577
#574 := [unit-resolution #573 #585]: #619
#575 := [th-lemma arith farkas 1 -1 1 #574 #588 #586]: false
#580 := [lemma #575]: #579
#545 := [unit-resolution #580 #588]: #578
#549 := (or #641 #646)
#546 := [th-lemma arith triangle-eq]: #549
#547 := [unit-resolution #546 #545]: #641
#639 := (or #380 #665)
#383 := (= #59 0::Int)
#653 := (if #380 #383 #665)
#18 := (:var 0 Int)
#16 := (:var 1 Int)
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#708 := (pattern #19)
#101 := (* -1::Int #18)
#98 := (* -1::Int #16)
#104 := (div #98 #101)
#268 := (* -1::Int #104)
#269 := (+ #19 #268)
#270 := (= #269 0::Int)
#30 := (div #16 #18)
#265 := (* -1::Int #30)
#266 := (+ #19 #265)
#267 := (= #266 0::Int)
#76 := (<= #18 0::Int)
#175 := (>= #16 0::Int)
#228 := (or #175 #76)
#229 := (not #228)
#72 := (<= #16 0::Int)
#224 := (or #72 #76)
#225 := (not #224)
#232 := (or #225 #229)
#271 := (if #232 #267 #270)
#264 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#272 := (if #23 #264 #271)
#709 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #708) #272)
#275 := (forall (vars (?v0 Int) (?v1 Int)) #272)
#712 := (iff #275 #709)
#710 := (iff #272 #272)
#711 := [refl]: #710
#713 := [quant-intro #711]: #712
#235 := (if #232 #30 #104)
#238 := (if #23 0::Int #235)
#241 := (= #19 #238)
#244 := (forall (vars (?v0 Int) (?v1 Int)) #241)
#276 := (iff #244 #275)
#273 := (iff #241 #272)
#274 := [rewrite]: #273
#277 := [quant-intro #274]: #276
#77 := (not #76)
#178 := (not #175)
#181 := (and #178 #77)
#73 := (not #72)
#80 := (and #73 #77)
#184 := (or #80 #181)
#187 := (if #184 #30 #104)
#190 := (if #23 0::Int #187)
#193 := (= #19 #190)
#196 := (forall (vars (?v0 Int) (?v1 Int)) #193)
#245 := (iff #196 #244)
#242 := (iff #193 #241)
#239 := (= #190 #238)
#236 := (= #187 #235)
#233 := (iff #184 #232)
#230 := (iff #181 #229)
#231 := [rewrite]: #230
#226 := (iff #80 #225)
#227 := [rewrite]: #226
#234 := [monotonicity #227 #231]: #233
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [quant-intro #243]: #245
#218 := (~ #196 #196)
#220 := (~ #193 #193)
#221 := [refl]: #220
#219 := [nnf-pos #221]: #218
#83 := (<= 0::Int #16)
#84 := (not #83)
#92 := (and #84 #77)
#95 := (or #80 #92)
#107 := (if #95 #30 #104)
#110 := (if #23 0::Int #107)
#113 := (= #19 #110)
#116 := (forall (vars (?v0 Int) (?v1 Int)) #113)
#197 := (iff #116 #196)
#194 := (iff #113 #193)
#191 := (= #110 #190)
#188 := (= #107 #187)
#185 := (iff #95 #184)
#182 := (iff #92 #181)
#179 := (iff #84 #178)
#176 := (iff #83 #175)
#177 := [rewrite]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [monotonicity #186]: #188
#192 := [monotonicity #189]: #191
#195 := [monotonicity #192]: #194
#198 := [quant-intro #195]: #197
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#117 := (iff #37 #116)
#114 := (iff #36 #113)
#111 := (= #35 #110)
#108 := (= #34 #107)
#105 := (= #33 #104)
#102 := (= #32 #101)
#103 := [rewrite]: #102
#99 := (= #31 #98)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #103]: #105
#96 := (iff #29 #95)
#93 := (iff #28 #92)
#78 := (iff #25 #77)
#79 := [rewrite]: #78
#85 := (iff #27 #84)
#89 := (iff #84 #84)
#87 := (iff #83 #83)
#88 := [rewrite]: #87
#90 := [monotonicity #88]: #89
#86 := [rewrite]: #85
#91 := [trans #86 #90]: #85
#94 := [monotonicity #91 #79]: #93
#81 := (iff #26 #80)
#74 := (iff #24 #73)
#75 := [rewrite]: #74
#82 := [monotonicity #75 #79]: #81
#97 := [monotonicity #82 #94]: #96
#109 := [monotonicity #97 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [quant-intro #115]: #117
#51 := [asserted]: #37
#119 := [mp #51 #118]: #116
#199 := [mp #119 #198]: #196
#165 := [mp~ #199 #219]: #196
#247 := [mp #165 #246]: #244
#278 := [mp #247 #277]: #275
#714 := [mp #278 #713]: #709
#656 := (not #709)
#650 := (or #656 #653)
#703 := (* -1::Int -1::Int)
#704 := (div #62 #703)
#705 := (* -1::Int #704)
#706 := (+ #59 #705)
#701 := (= #706 0::Int)
#489 := (div f6 -1::Int)
#696 := (* -1::Int #489)
#370 := (+ #59 #696)
#371 := (= #370 0::Int)
#385 := (<= -1::Int 0::Int)
#700 := (or #365 #385)
#702 := (not #700)
#382 := (or #384 #385)
#386 := (not #382)
#359 := (or #386 #702)
#707 := (if #359 #371 #701)
#381 := (= -1::Int 0::Int)
#372 := (or #380 #381)
#697 := (if #372 #383 #707)
#651 := (or #656 #697)
#658 := (iff #651 #650)
#659 := (iff #650 #650)
#488 := [rewrite]: #659
#654 := (iff #697 #653)
#510 := (iff #707 #665)
#666 := (if false #371 #665)
#668 := (iff #666 #665)
#509 := [rewrite]: #668
#667 := (iff #707 #666)
#660 := (iff #701 #665)
#663 := (= #706 #674)
#673 := (= #705 #669)
#672 := (= #704 #671)
#392 := (= #703 1::Int)
#393 := [rewrite]: #392
#387 := [monotonicity #393]: #672
#670 := [monotonicity #387]: #673
#664 := [monotonicity #670]: #663
#661 := [monotonicity #664]: #660
#390 := (iff #359 false)
#401 := (or false false)
#676 := (iff #401 false)
#680 := [rewrite]: #676
#675 := (iff #359 #401)
#678 := (iff #702 false)
#328 := (not true)
#333 := (iff #328 false)
#334 := [rewrite]: #333
#301 := (iff #702 #328)
#406 := (iff #700 true)
#695 := (or #365 true)
#404 := (iff #695 true)
#405 := [rewrite]: #404
#681 := (iff #700 #695)
#348 := (iff #385 true)
#349 := [rewrite]: #348
#682 := [monotonicity #349]: #681
#407 := [trans #682 #405]: #406
#677 := [monotonicity #407]: #301
#400 := [trans #677 #334]: #678
#694 := (iff #386 false)
#691 := (iff #386 #328)
#684 := (iff #382 true)
#685 := (or #384 true)
#688 := (iff #685 true)
#689 := [rewrite]: #688
#686 := (iff #382 #685)
#687 := [monotonicity #349]: #686
#690 := [trans #687 #689]: #684
#693 := [monotonicity #690]: #691
#692 := [trans #693 #334]: #694
#679 := [monotonicity #692 #400]: #675
#391 := [trans #679 #680]: #390
#662 := [monotonicity #391 #661]: #667
#511 := [trans #662 #509]: #510
#346 := (iff #372 #380)
#698 := (or #380 false)
#342 := (iff #698 #380)
#683 := [rewrite]: #342
#358 := (iff #372 #698)
#357 := (iff #381 false)
#362 := [rewrite]: #357
#699 := [monotonicity #362]: #358
#347 := [trans #699 #683]: #346
#655 := [monotonicity #347 #511]: #654
#652 := [monotonicity #655]: #658
#490 := [trans #652 #488]: #658
#657 := [quant-inst #8 #56]: #651
#491 := [mp #657 #490]: #650
#548 := [unit-resolution #491 #714]: #653
#649 := (not #653)
#492 := (or #649 #380 #665)
#640 := [def-axiom]: #492
#643 := [unit-resolution #640 #548]: #639
#615 := [unit-resolution #643 #547]: #380
#620 := (or #531 #365)
#606 := [th-lemma arith triangle-eq]: #620
#607 := [unit-resolution #606 #615]: #365
#645 := (>= #59 0::Int)
#609 := (or #531 #383)
#532 := (or #649 #531 #383)
#533 := [def-axiom]: #532
#610 := [unit-resolution #533 #548]: #609
#611 := [unit-resolution #610 #615]: #383
#542 := (not #383)
#630 := (or #542 #645)
#632 := [th-lemma arith triangle-eq]: #630
#623 := [unit-resolution #632 #611]: #645
#633 := [th-lemma arith farkas 1 -1 1 #623 #588 #607]: false
#634 := [lemma #633]: #379
#613 := (or #626 #587)
#168 := (= #167 0::Int)
#171 := (not #168)
#65 := (= #59 #62)
#68 := (not #65)
#172 := (iff #68 #171)
#169 := (iff #65 #168)
#170 := [rewrite]: #169
#173 := [monotonicity #170]: #172
#13 := (- f6)
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#14 := (= #12 #13)
#15 := (not #14)
#69 := (iff #15 #68)
#66 := (iff #14 #65)
#63 := (= #13 #62)
#64 := [rewrite]: #63
#60 := (= #12 #59)
#57 := (= #11 -1::Int)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#67 := [monotonicity #61 #64]: #66
#70 := [monotonicity #67]: #69
#50 := [asserted]: #15
#71 := [mp #50 #70]: #68
#174 := [mp #71 #173]: #171
#627 := (or #168 #626 #587)
#628 := [th-lemma arith triangle-eq]: #627
#614 := [unit-resolution #628 #174]: #613
#616 := [unit-resolution #614 #634]: #626
#644 := (<= #59 0::Int)
#617 := [unit-resolution #610 #635]: #383
#618 := (or #542 #644)
#581 := [th-lemma arith triangle-eq]: #618
#576 := [unit-resolution #581 #617]: #644
#582 := [th-lemma arith farkas 1 -1 1 #576 #616 #625]: false
#555 := [lemma #582]: #531
#539 := [unit-resolution #643 #555]: #665
#540 := (or #641 #648)
#550 := [th-lemma arith triangle-eq]: #540
#530 := [unit-resolution #550 #539]: #648
#563 := (<= #622 0::Int)
#551 := (or #591 #563)
#506 := [th-lemma arith triangle-eq]: #551
#507 := [unit-resolution #506 #585]: #563
[th-lemma arith farkas 1 -1 1 #507 #616 #530]: false
0fa0312c612ec397b0cce6b0237bbb9cfd628037 289 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#683 := (pattern #17)
#8 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #16)
#80 := (* -1::Int #14)
#86 := (div #80 #83)
#242 := (* -1::Int #86)
#243 := (+ #17 #242)
#244 := (= #243 0::Int)
#27 := (div #14 #16)
#239 := (* -1::Int #27)
#240 := (+ #17 #239)
#241 := (= #240 0::Int)
#57 := (<= #16 0::Int)
#149 := (>= #14 0::Int)
#202 := (or #149 #57)
#203 := (not #202)
#53 := (<= #14 0::Int)
#198 := (or #53 #57)
#199 := (not #198)
#206 := (or #199 #203)
#245 := (if #206 #241 #244)
#238 := (= #17 0::Int)
#19 := (= #16 0::Int)
#18 := (= #14 0::Int)
#20 := (or #18 #19)
#246 := (if #20 #238 #245)
#684 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #683) #246)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#687 := (iff #249 #684)
#685 := (iff #246 #246)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#209 := (if #206 #27 #86)
#212 := (if #20 0::Int #209)
#215 := (= #17 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#250 := (iff #218 #249)
#247 := (iff #215 #246)
#248 := [rewrite]: #247
#251 := [quant-intro #248]: #250
#58 := (not #57)
#152 := (not #149)
#155 := (and #152 #58)
#54 := (not #53)
#61 := (and #54 #58)
#158 := (or #61 #155)
#161 := (if #158 #27 #86)
#164 := (if #20 0::Int #161)
#167 := (= #17 #164)
#170 := (forall (vars (?v0 Int) (?v1 Int)) #167)
#219 := (iff #170 #218)
#216 := (iff #167 #215)
#213 := (= #164 #212)
#210 := (= #161 #209)
#207 := (iff #158 #206)
#204 := (iff #155 #203)
#205 := [rewrite]: #204
#200 := (iff #61 #199)
#201 := [rewrite]: #200
#208 := [monotonicity #201 #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#194 := (~ #170 #170)
#192 := (~ #167 #167)
#193 := [refl]: #192
#195 := [nnf-pos #193]: #194
#64 := (<= 0::Int #14)
#65 := (not #64)
#73 := (and #65 #58)
#76 := (or #61 #73)
#89 := (if #76 #27 #86)
#92 := (if #20 0::Int #89)
#95 := (= #17 #92)
#98 := (forall (vars (?v0 Int) (?v1 Int)) #95)
#171 := (iff #98 #170)
#168 := (iff #95 #167)
#165 := (= #92 #164)
#162 := (= #89 #161)
#159 := (iff #76 #158)
#156 := (iff #73 #155)
#153 := (iff #65 #152)
#150 := (iff #64 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#172 := [quant-intro #169]: #171
#29 := (- #16)
#28 := (- #14)
#30 := (div #28 #29)
#22 := (< 0::Int #16)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (if #26 #27 #30)
#32 := (if #20 0::Int #31)
#33 := (= #17 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#99 := (iff #34 #98)
#96 := (iff #33 #95)
#93 := (= #32 #92)
#90 := (= #31 #89)
#87 := (= #30 #86)
#84 := (= #29 #83)
#85 := [rewrite]: #84
#81 := (= #28 #80)
#82 := [rewrite]: #81
#88 := [monotonicity #82 #85]: #87
#77 := (iff #26 #76)
#74 := (iff #25 #73)
#59 := (iff #22 #58)
#60 := [rewrite]: #59
#66 := (iff #24 #65)
#70 := (iff #65 #65)
#68 := (iff #64 #64)
#69 := [rewrite]: #68
#71 := [monotonicity #69]: #70
#67 := [rewrite]: #66
#72 := [trans #67 #71]: #66
#75 := [monotonicity #72 #60]: #74
#62 := (iff #23 #61)
#55 := (iff #21 #54)
#56 := [rewrite]: #55
#63 := [monotonicity #56 #60]: #62
#78 := [monotonicity #63 #75]: #77
#91 := [monotonicity #78 #88]: #90
#94 := [monotonicity #91]: #93
#97 := [monotonicity #94]: #96
#100 := [quant-intro #97]: #99
#48 := [asserted]: #34
#101 := [mp #48 #100]: #98
#173 := [mp #101 #172]: #170
#147 := [mp~ #173 #195]: #170
#221 := [mp #147 #220]: #218
#252 := [mp #221 #251]: #249
#689 := [mp #252 #688]: #684
#10 := 3::Int
#9 := (f4 f5 0::Int)
#11 := (f3 #9 3::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#47 := [asserted]: #13
#501 := (not #684)
#516 := (or #501 #12)
#345 := (* -1::Int 3::Int)
#671 := (* -1::Int 0::Int)
#346 := (div #671 #345)
#678 := (* -1::Int #346)
#679 := (+ #11 #678)
#680 := (= #679 0::Int)
#675 := (div 0::Int 3::Int)
#677 := (* -1::Int #675)
#334 := (+ #11 #677)
#464 := (= #334 0::Int)
#347 := (<= 3::Int 0::Int)
#360 := (>= 0::Int 0::Int)
#357 := (or #360 #347)
#361 := (not #357)
#356 := (<= 0::Int 0::Int)
#358 := (or #356 #347)
#359 := (not #358)
#340 := (or #359 #361)
#681 := (if #340 #464 #680)
#354 := (= 3::Int 0::Int)
#269 := (= 0::Int 0::Int)
#355 := (or #269 #354)
#676 := (if #355 #12 #681)
#518 := (or #501 #676)
#512 := (iff #518 #516)
#521 := (iff #516 #516)
#522 := [rewrite]: #521
#613 := (iff #676 #12)
#1 := true
#508 := (if true #12 #12)
#517 := (iff #508 #12)
#612 := [rewrite]: #517
#467 := (iff #676 #508)
#506 := (iff #681 #12)
#620 := (if false #12 #12)
#621 := (iff #620 #12)
#624 := [rewrite]: #621
#622 := (iff #681 #620)
#466 := (iff #680 #12)
#463 := (= #679 #11)
#648 := (+ #11 0::Int)
#638 := (= #648 #11)
#639 := [rewrite]: #638
#627 := (= #679 #648)
#632 := (= #678 0::Int)
#646 := (= #671 0::Int)
#647 := [rewrite]: #646
#625 := (= #678 #671)
#630 := (= #346 0::Int)
#642 := -3::Int
#484 := (div 0::Int -3::Int)
#628 := (= #484 0::Int)
#629 := [rewrite]: #628
#485 := (= #346 #484)
#637 := (= #345 -3::Int)
#643 := [rewrite]: #637
#486 := [monotonicity #647 #643]: #485
#631 := [trans #486 #629]: #630
#626 := [monotonicity #631]: #625
#633 := [trans #626 #647]: #632
#634 := [monotonicity #633]: #627
#465 := [trans #634 #639]: #463
#619 := [monotonicity #465]: #466
#636 := (iff #464 #12)
#640 := (= #334 #11)
#645 := (= #334 #648)
#362 := (= #677 0::Int)
#367 := (= #677 #671)
#365 := (= #675 0::Int)
#366 := [rewrite]: #365
#368 := [monotonicity #366]: #367
#644 := [trans #368 #647]: #362
#649 := [monotonicity #644]: #645
#635 := [trans #649 #639]: #640
#641 := [monotonicity #635]: #636
#651 := (iff #340 false)
#653 := (or false false)
#650 := (iff #653 false)
#654 := [rewrite]: #650
#375 := (iff #340 #653)
#275 := (iff #361 false)
#665 := (not true)
#668 := (iff #665 false)
#308 := [rewrite]: #668
#381 := (iff #361 #665)
#379 := (iff #357 true)
#673 := (or true false)
#317 := (iff #673 true)
#658 := [rewrite]: #317
#656 := (iff #357 #673)
#660 := (iff #347 false)
#661 := [rewrite]: #660
#667 := (iff #360 true)
#670 := [rewrite]: #667
#657 := [monotonicity #670 #661]: #656
#380 := [trans #657 #658]: #379
#382 := [monotonicity #380]: #381
#652 := [trans #382 #308]: #275
#309 := (iff #359 false)
#303 := (iff #359 #665)
#664 := (iff #358 true)
#662 := (iff #358 #673)
#323 := (iff #356 true)
#324 := [rewrite]: #323
#663 := [monotonicity #324 #661]: #662
#659 := [trans #663 #658]: #664
#666 := [monotonicity #659]: #303
#669 := [trans #666 #308]: #309
#376 := [monotonicity #669 #652]: #375
#655 := [trans #376 #654]: #651
#623 := [monotonicity #655 #641 #619]: #622
#507 := [trans #623 #624]: #506
#321 := (iff #355 true)
#333 := (iff #355 #673)
#332 := (iff #354 false)
#337 := [rewrite]: #332
#682 := (iff #269 true)
#672 := [rewrite]: #682
#674 := [monotonicity #672 #337]: #333
#322 := [trans #674 #658]: #321
#615 := [monotonicity #322 #507]: #467
#616 := [trans #615 #612]: #613
#520 := [monotonicity #616]: #512
#523 := [trans #520 #522]: #512
#519 := [quant-inst #8 #10]: #518
#524 := [mp #519 #523]: #516
[unit-resolution #524 #47 #689]: false
1b013ef09ce577cd8e25f770ced5ed59077a626b 305 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#697 := (pattern #18)
#8 := 0::Int
#93 := -1::Int
#97 := (* -1::Int #17)
#94 := (* -1::Int #15)
#100 := (div #94 #97)
#256 := (* -1::Int #100)
#257 := (+ #18 #256)
#258 := (= #257 0::Int)
#28 := (div #15 #17)
#253 := (* -1::Int #28)
#254 := (+ #18 #253)
#255 := (= #254 0::Int)
#71 := (<= #17 0::Int)
#163 := (>= #15 0::Int)
#216 := (or #163 #71)
#217 := (not #216)
#67 := (<= #15 0::Int)
#212 := (or #67 #71)
#213 := (not #212)
#220 := (or #213 #217)
#259 := (if #220 #255 #258)
#252 := (= #18 0::Int)
#20 := (= #17 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#260 := (if #21 #252 #259)
#698 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #697) #260)
#263 := (forall (vars (?v0 Int) (?v1 Int)) #260)
#701 := (iff #263 #698)
#699 := (iff #260 #260)
#700 := [refl]: #699
#702 := [quant-intro #700]: #701
#223 := (if #220 #28 #100)
#226 := (if #21 0::Int #223)
#229 := (= #18 #226)
#232 := (forall (vars (?v0 Int) (?v1 Int)) #229)
#264 := (iff #232 #263)
#261 := (iff #229 #260)
#262 := [rewrite]: #261
#265 := [quant-intro #262]: #264
#72 := (not #71)
#166 := (not #163)
#169 := (and #166 #72)
#68 := (not #67)
#75 := (and #68 #72)
#172 := (or #75 #169)
#175 := (if #172 #28 #100)
#178 := (if #21 0::Int #175)
#181 := (= #18 #178)
#184 := (forall (vars (?v0 Int) (?v1 Int)) #181)
#233 := (iff #184 #232)
#230 := (iff #181 #229)
#227 := (= #178 #226)
#224 := (= #175 #223)
#221 := (iff #172 #220)
#218 := (iff #169 #217)
#219 := [rewrite]: #218
#214 := (iff #75 #213)
#215 := [rewrite]: #214
#222 := [monotonicity #215 #219]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [quant-intro #231]: #233
#206 := (~ #184 #184)
#208 := (~ #181 #181)
#209 := [refl]: #208
#207 := [nnf-pos #209]: #206
#78 := (<= 0::Int #15)
#79 := (not #78)
#87 := (and #79 #72)
#90 := (or #75 #87)
#103 := (if #90 #28 #100)
#106 := (if #21 0::Int #103)
#109 := (= #18 #106)
#112 := (forall (vars (?v0 Int) (?v1 Int)) #109)
#185 := (iff #112 #184)
#182 := (iff #109 #181)
#179 := (= #106 #178)
#176 := (= #103 #175)
#173 := (iff #90 #172)
#170 := (iff #87 #169)
#167 := (iff #79 #166)
#164 := (iff #78 #163)
#165 := [rewrite]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [quant-intro #183]: #185
#30 := (- #17)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #18 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#113 := (iff #35 #112)
#110 := (iff #34 #109)
#107 := (= #33 #106)
#104 := (= #32 #103)
#101 := (= #31 #100)
#98 := (= #30 #97)
#99 := [rewrite]: #98
#95 := (= #29 #94)
#96 := [rewrite]: #95
#102 := [monotonicity #96 #99]: #101
#91 := (iff #27 #90)
#88 := (iff #26 #87)
#73 := (iff #23 #72)
#74 := [rewrite]: #73
#80 := (iff #25 #79)
#84 := (iff #79 #79)
#82 := (iff #78 #78)
#83 := [rewrite]: #82
#85 := [monotonicity #83]: #84
#81 := [rewrite]: #80
#86 := [trans #81 #85]: #80
#89 := [monotonicity #86 #74]: #88
#76 := (iff #24 #75)
#69 := (iff #22 #68)
#70 := [rewrite]: #69
#77 := [monotonicity #70 #74]: #76
#92 := [monotonicity #77 #89]: #91
#105 := [monotonicity #92 #102]: #104
#108 := [monotonicity #105]: #107
#111 := [monotonicity #108]: #110
#114 := [quant-intro #111]: #113
#49 := [asserted]: #35
#115 := [mp #49 #114]: #112
#187 := [mp #115 #186]: #184
#204 := [mp~ #187 #207]: #184
#235 := [mp #204 #234]: #232
#266 := [mp #235 #265]: #263
#703 := [mp #266 #702]: #698
#54 := -3::Int
#9 := (f4 f5 0::Int)
#57 := (f3 #9 -3::Int)
#60 := (= #57 0::Int)
#63 := (not #60)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#13 := (= #12 0::Int)
#14 := (not #13)
#64 := (iff #14 #63)
#61 := (iff #13 #60)
#58 := (= #12 #57)
#55 := (= #11 -3::Int)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59]: #61
#65 := [monotonicity #62]: #64
#48 := [asserted]: #14
#66 := [mp #48 #65]: #63
#532 := (not #698)
#533 := (or #532 #60)
#359 := (* -1::Int -3::Int)
#685 := (* -1::Int 0::Int)
#360 := (div #685 #359)
#692 := (* -1::Int #360)
#693 := (+ #57 #692)
#694 := (= #693 0::Int)
#689 := (div 0::Int -3::Int)
#691 := (* -1::Int #689)
#348 := (+ #57 #691)
#478 := (= #348 0::Int)
#361 := (<= -3::Int 0::Int)
#374 := (>= 0::Int 0::Int)
#371 := (or #374 #361)
#375 := (not #371)
#370 := (<= 0::Int 0::Int)
#372 := (or #370 #361)
#373 := (not #372)
#354 := (or #373 #375)
#695 := (if #354 #478 #694)
#368 := (= -3::Int 0::Int)
#283 := (= 0::Int 0::Int)
#369 := (or #283 #368)
#690 := (if #369 #60 #695)
#526 := (or #532 #690)
#535 := (iff #526 #533)
#537 := (iff #533 #533)
#538 := [rewrite]: #537
#515 := (iff #690 #60)
#1 := true
#629 := (if true #60 #60)
#627 := (iff #629 #60)
#630 := [rewrite]: #627
#531 := (iff #690 #629)
#522 := (iff #695 #60)
#637 := (if false #60 #60)
#520 := (iff #637 #60)
#521 := [rewrite]: #520
#635 := (iff #695 #637)
#634 := (iff #694 #60)
#480 := (= #693 #57)
#652 := (+ #57 0::Int)
#649 := (= #652 #57)
#650 := [rewrite]: #649
#477 := (= #693 #652)
#641 := (= #692 0::Int)
#658 := (= #685 0::Int)
#662 := [rewrite]: #658
#646 := (= #692 #685)
#639 := (= #360 0::Int)
#500 := (div 0::Int 3::Int)
#644 := (= #500 0::Int)
#645 := [rewrite]: #644
#642 := (= #360 #500)
#498 := (= #359 3::Int)
#499 := [rewrite]: #498
#643 := [monotonicity #662 #499]: #642
#640 := [trans #643 #645]: #639
#647 := [monotonicity #640]: #646
#648 := [trans #647 #662]: #641
#479 := [monotonicity #648]: #477
#633 := [trans #479 #650]: #480
#636 := [monotonicity #633]: #634
#651 := (iff #478 #60)
#655 := (= #348 #57)
#653 := (= #348 #652)
#659 := (= #691 0::Int)
#661 := (= #691 #685)
#382 := (= #689 0::Int)
#660 := [rewrite]: #382
#376 := [monotonicity #660]: #661
#663 := [trans #376 #662]: #659
#654 := [monotonicity #663]: #653
#656 := [trans #654 #650]: #655
#657 := [monotonicity #656]: #651
#380 := (iff #354 false)
#664 := (or false false)
#669 := (iff #664 false)
#379 := [rewrite]: #669
#668 := (iff #354 #664)
#389 := (iff #375 false)
#682 := (not true)
#683 := (iff #682 false)
#681 := [rewrite]: #683
#666 := (iff #375 #682)
#396 := (iff #371 true)
#676 := (or true true)
#673 := (iff #676 true)
#679 := [rewrite]: #673
#394 := (iff #371 #676)
#674 := (iff #361 true)
#675 := [rewrite]: #674
#671 := (iff #374 true)
#393 := [rewrite]: #671
#395 := [monotonicity #393 #675]: #394
#289 := [trans #395 #679]: #396
#667 := [monotonicity #289]: #666
#390 := [trans #667 #681]: #389
#684 := (iff #373 false)
#322 := (iff #373 #682)
#317 := (iff #372 true)
#677 := (iff #372 #676)
#337 := (iff #370 true)
#338 := [rewrite]: #337
#678 := [monotonicity #338 #675]: #677
#680 := [trans #678 #679]: #317
#323 := [monotonicity #680]: #322
#670 := [trans #323 #681]: #684
#665 := [monotonicity #670 #390]: #668
#381 := [trans #665 #379]: #380
#638 := [monotonicity #381 #657 #636]: #635
#481 := [trans #638 #521]: #522
#335 := (iff #369 true)
#687 := (or true false)
#331 := (iff #687 true)
#672 := [rewrite]: #331
#347 := (iff #369 #687)
#346 := (iff #368 false)
#351 := [rewrite]: #346
#696 := (iff #283 true)
#686 := [rewrite]: #696
#688 := [monotonicity #686 #351]: #347
#336 := [trans #688 #672]: #335
#626 := [monotonicity #336 #481]: #531
#530 := [trans #626 #630]: #515
#536 := [monotonicity #530]: #535
#631 := [trans #536 #538]: #535
#534 := [quant-inst #8 #54]: #526
#628 := [mp #534 #631]: #533
[unit-resolution #628 #66 #703]: false
6382d5aff89219a8ada90f5d3d58d36cd0bdab6f 306 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#683 := (pattern #18)
#12 := 0::Int
#80 := -1::Int
#84 := (* -1::Int #17)
#81 := (* -1::Int #15)
#87 := (div #81 #84)
#243 := (* -1::Int #87)
#244 := (+ #18 #243)
#245 := (= #244 0::Int)
#28 := (div #15 #17)
#240 := (* -1::Int #28)
#241 := (+ #18 #240)
#242 := (= #241 0::Int)
#58 := (<= #17 0::Int)
#150 := (>= #15 0::Int)
#203 := (or #150 #58)
#204 := (not #203)
#54 := (<= #15 0::Int)
#199 := (or #54 #58)
#200 := (not #199)
#207 := (or #200 #204)
#246 := (if #207 #242 #245)
#239 := (= #18 0::Int)
#20 := (= #17 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#247 := (if #21 #239 #246)
#684 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #683) #247)
#250 := (forall (vars (?v0 Int) (?v1 Int)) #247)
#687 := (iff #250 #684)
#685 := (iff #247 #247)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#210 := (if #207 #28 #87)
#213 := (if #21 0::Int #210)
#216 := (= #18 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#251 := (iff #219 #250)
#248 := (iff #216 #247)
#249 := [rewrite]: #248
#252 := [quant-intro #249]: #251
#59 := (not #58)
#153 := (not #150)
#156 := (and #153 #59)
#55 := (not #54)
#62 := (and #55 #59)
#159 := (or #62 #156)
#162 := (if #159 #28 #87)
#165 := (if #21 0::Int #162)
#168 := (= #18 #165)
#171 := (forall (vars (?v0 Int) (?v1 Int)) #168)
#220 := (iff #171 #219)
#217 := (iff #168 #216)
#214 := (= #165 #213)
#211 := (= #162 #210)
#208 := (iff #159 #207)
#205 := (iff #156 #204)
#206 := [rewrite]: #205
#201 := (iff #62 #200)
#202 := [rewrite]: #201
#209 := [monotonicity #202 #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#195 := (~ #171 #171)
#193 := (~ #168 #168)
#194 := [refl]: #193
#196 := [nnf-pos #194]: #195
#65 := (<= 0::Int #15)
#66 := (not #65)
#74 := (and #66 #59)
#77 := (or #62 #74)
#90 := (if #77 #28 #87)
#93 := (if #21 0::Int #90)
#96 := (= #18 #93)
#99 := (forall (vars (?v0 Int) (?v1 Int)) #96)
#172 := (iff #99 #171)
#169 := (iff #96 #168)
#166 := (= #93 #165)
#163 := (= #90 #162)
#160 := (iff #77 #159)
#157 := (iff #74 #156)
#154 := (iff #66 #153)
#151 := (iff #65 #150)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [quant-intro #170]: #172
#30 := (- #17)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #18 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#100 := (iff #35 #99)
#97 := (iff #34 #96)
#94 := (= #33 #93)
#91 := (= #32 #90)
#88 := (= #31 #87)
#85 := (= #30 #84)
#86 := [rewrite]: #85
#82 := (= #29 #81)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#78 := (iff #27 #77)
#75 := (iff #26 #74)
#60 := (iff #23 #59)
#61 := [rewrite]: #60
#67 := (iff #25 #66)
#71 := (iff #66 #66)
#69 := (iff #65 #65)
#70 := [rewrite]: #69
#72 := [monotonicity #70]: #71
#68 := [rewrite]: #67
#73 := [trans #68 #72]: #67
#76 := [monotonicity #73 #61]: #75
#63 := (iff #24 #62)
#56 := (iff #22 #55)
#57 := [rewrite]: #56
#64 := [monotonicity #57 #61]: #63
#79 := [monotonicity #64 #76]: #78
#92 := [monotonicity #79 #89]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#101 := [quant-intro #98]: #100
#49 := [asserted]: #35
#102 := [mp #49 #101]: #99
#174 := [mp #102 #173]: #171
#148 := [mp~ #174 #196]: #171
#222 := [mp #148 #221]: #219
#253 := [mp #222 #252]: #250
#689 := [mp #253 #688]: #684
#10 := 3::Int
#8 := 1::Int
#9 := (f4 f5 1::Int)
#11 := (f3 #9 3::Int)
#13 := (= #11 0::Int)
#14 := (not #13)
#48 := [asserted]: #14
#596 := (not #684)
#598 := (or #596 #13)
#345 := (* -1::Int 3::Int)
#671 := (* -1::Int 1::Int)
#346 := (div #671 #345)
#678 := (* -1::Int #346)
#679 := (+ #11 #678)
#680 := (= #679 0::Int)
#675 := (div 1::Int 3::Int)
#677 := (* -1::Int #675)
#334 := (+ #11 #677)
#464 := (= #334 0::Int)
#347 := (<= 3::Int 0::Int)
#360 := (>= 1::Int 0::Int)
#357 := (or #360 #347)
#361 := (not #357)
#356 := (<= 1::Int 0::Int)
#358 := (or #356 #347)
#359 := (not #358)
#340 := (or #359 #361)
#681 := (if #340 #464 #680)
#354 := (= 3::Int 0::Int)
#270 := (= 1::Int 0::Int)
#355 := (or #270 #354)
#676 := (if #355 #13 #681)
#608 := (or #596 #676)
#610 := (iff #608 #598)
#611 := (iff #598 #598)
#600 := [rewrite]: #611
#607 := (iff #676 #13)
#524 := (if false #13 #13)
#618 := (iff #524 #13)
#605 := [rewrite]: #618
#617 := (iff #676 #524)
#522 := (iff #681 #13)
#612 := (= #11 1::Int)
#1 := true
#518 := (if true #13 #612)
#520 := (iff #518 #13)
#521 := [rewrite]: #520
#519 := (iff #681 #518)
#501 := (iff #680 #612)
#621 := (+ -1::Int #11)
#467 := (= #621 0::Int)
#613 := (iff #467 #612)
#616 := [rewrite]: #613
#615 := (iff #680 #467)
#507 := (= #679 #621)
#620 := (+ #11 -1::Int)
#624 := (= #620 #621)
#506 := [rewrite]: #624
#622 := (= #679 #620)
#466 := (= #678 -1::Int)
#485 := (= #671 -1::Int)
#486 := [rewrite]: #485
#463 := (= #678 #671)
#627 := (= #346 1::Int)
#628 := -3::Int
#631 := (div -1::Int -3::Int)
#632 := (= #631 1::Int)
#633 := [rewrite]: #632
#625 := (= #346 #631)
#629 := (= #345 -3::Int)
#630 := [rewrite]: #629
#626 := [monotonicity #486 #630]: #625
#634 := [trans #626 #633]: #627
#465 := [monotonicity #634]: #463
#619 := [trans #465 #486]: #466
#623 := [monotonicity #619]: #622
#508 := [trans #623 #506]: #507
#517 := [monotonicity #508]: #615
#516 := [trans #517 #616]: #501
#643 := (iff #464 #13)
#642 := (= #334 #11)
#639 := (+ #11 0::Int)
#636 := (= #639 #11)
#641 := [rewrite]: #636
#640 := (= #334 #639)
#649 := (= #677 0::Int)
#647 := (* -1::Int 0::Int)
#648 := (= #647 0::Int)
#645 := [rewrite]: #648
#362 := (= #677 #647)
#368 := (= #675 0::Int)
#646 := [rewrite]: #368
#644 := [monotonicity #646]: #362
#638 := [trans #644 #645]: #649
#635 := [monotonicity #638]: #640
#637 := [trans #635 #641]: #642
#484 := [monotonicity #637]: #643
#366 := (iff #340 true)
#656 := (or true false)
#380 := (iff #656 true)
#381 := [rewrite]: #380
#655 := (iff #340 #656)
#654 := (iff #361 false)
#652 := (not true)
#376 := (iff #652 false)
#650 := [rewrite]: #376
#653 := (iff #361 #652)
#382 := (iff #357 true)
#657 := (iff #357 #656)
#660 := (iff #347 false)
#661 := [rewrite]: #660
#667 := (iff #360 true)
#670 := [rewrite]: #667
#379 := [monotonicity #670 #661]: #657
#276 := [trans #379 #381]: #382
#375 := [monotonicity #276]: #653
#651 := [trans #375 #650]: #654
#309 := (iff #359 true)
#665 := (not false)
#668 := (iff #665 true)
#308 := [rewrite]: #668
#303 := (iff #359 #665)
#664 := (iff #358 false)
#673 := (or false false)
#317 := (iff #673 false)
#658 := [rewrite]: #317
#662 := (iff #358 #673)
#323 := (iff #356 false)
#324 := [rewrite]: #323
#663 := [monotonicity #324 #661]: #662
#659 := [trans #663 #658]: #664
#666 := [monotonicity #659]: #303
#669 := [trans #666 #308]: #309
#365 := [monotonicity #669 #651]: #655
#367 := [trans #365 #381]: #366
#512 := [monotonicity #367 #484 #516]: #519
#523 := [trans #512 #521]: #522
#321 := (iff #355 false)
#333 := (iff #355 #673)
#332 := (iff #354 false)
#337 := [rewrite]: #332
#682 := (iff #270 false)
#672 := [rewrite]: #682
#674 := [monotonicity #672 #337]: #333
#322 := [trans #674 #658]: #321
#614 := [monotonicity #322 #523]: #617
#599 := [trans #614 #605]: #607
#606 := [monotonicity #599]: #610
#601 := [trans #606 #600]: #610
#609 := [quant-inst #8 #10]: #608
#602 := [mp #609 #601]: #598
[unit-resolution #602 #48 #689]: false
edcd41cd053f07265d5fea261f85739d8063959d 296 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#683 := (pattern #17)
#18 := 0::Int
#80 := -1::Int
#84 := (* -1::Int #16)
#81 := (* -1::Int #14)
#87 := (div #81 #84)
#243 := (* -1::Int #87)
#244 := (+ #17 #243)
#245 := (= #244 0::Int)
#28 := (div #14 #16)
#240 := (* -1::Int #28)
#241 := (+ #17 #240)
#242 := (= #241 0::Int)
#58 := (<= #16 0::Int)
#150 := (>= #14 0::Int)
#203 := (or #150 #58)
#204 := (not #203)
#54 := (<= #14 0::Int)
#199 := (or #54 #58)
#200 := (not #199)
#207 := (or #200 #204)
#246 := (if #207 #242 #245)
#239 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #14 0::Int)
#21 := (or #19 #20)
#247 := (if #21 #239 #246)
#684 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #683) #247)
#250 := (forall (vars (?v0 Int) (?v1 Int)) #247)
#687 := (iff #250 #684)
#685 := (iff #247 #247)
#686 := [refl]: #685
#688 := [quant-intro #686]: #687
#210 := (if #207 #28 #87)
#213 := (if #21 0::Int #210)
#216 := (= #17 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#251 := (iff #219 #250)
#248 := (iff #216 #247)
#249 := [rewrite]: #248
#252 := [quant-intro #249]: #251
#59 := (not #58)
#153 := (not #150)
#156 := (and #153 #59)
#55 := (not #54)
#62 := (and #55 #59)
#159 := (or #62 #156)
#162 := (if #159 #28 #87)
#165 := (if #21 0::Int #162)
#168 := (= #17 #165)
#171 := (forall (vars (?v0 Int) (?v1 Int)) #168)
#220 := (iff #171 #219)
#217 := (iff #168 #216)
#214 := (= #165 #213)
#211 := (= #162 #210)
#208 := (iff #159 #207)
#205 := (iff #156 #204)
#206 := [rewrite]: #205
#201 := (iff #62 #200)
#202 := [rewrite]: #201
#209 := [monotonicity #202 #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#195 := (~ #171 #171)
#193 := (~ #168 #168)
#194 := [refl]: #193
#196 := [nnf-pos #194]: #195
#65 := (<= 0::Int #14)
#66 := (not #65)
#74 := (and #66 #59)
#77 := (or #62 #74)
#90 := (if #77 #28 #87)
#93 := (if #21 0::Int #90)
#96 := (= #17 #93)
#99 := (forall (vars (?v0 Int) (?v1 Int)) #96)
#172 := (iff #99 #171)
#169 := (iff #96 #168)
#166 := (= #93 #165)
#163 := (= #90 #162)
#160 := (iff #77 #159)
#157 := (iff #74 #156)
#154 := (iff #66 #153)
#151 := (iff #65 #150)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#164 := [monotonicity #161]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [quant-intro #170]: #172
#30 := (- #16)
#29 := (- #14)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #14 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #14)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (if #27 #28 #31)
#33 := (if #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#100 := (iff #35 #99)
#97 := (iff #34 #96)
#94 := (= #33 #93)
#91 := (= #32 #90)
#88 := (= #31 #87)
#85 := (= #30 #84)
#86 := [rewrite]: #85
#82 := (= #29 #81)
#83 := [rewrite]: #82
#89 := [monotonicity #83 #86]: #88
#78 := (iff #27 #77)
#75 := (iff #26 #74)
#60 := (iff #23 #59)
#61 := [rewrite]: #60
#67 := (iff #25 #66)
#71 := (iff #66 #66)
#69 := (iff #65 #65)
#70 := [rewrite]: #69
#72 := [monotonicity #70]: #71
#68 := [rewrite]: #67
#73 := [trans #68 #72]: #67
#76 := [monotonicity #73 #61]: #75
#63 := (iff #24 #62)
#56 := (iff #22 #55)
#57 := [rewrite]: #56
#64 := [monotonicity #57 #61]: #63
#79 := [monotonicity #64 #76]: #78
#92 := [monotonicity #79 #89]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#101 := [quant-intro #98]: #100
#49 := [asserted]: #35
#102 := [mp #49 #101]: #99
#174 := [mp #102 #173]: #171
#148 := [mp~ #174 #196]: #171
#222 := [mp #148 #221]: #219
#253 := [mp #222 #252]: #250
#689 := [mp #253 #688]: #684
#11 := 1::Int
#8 := 3::Int
#9 := (f4 f5 3::Int)
#10 := (f3 #9 3::Int)
#12 := (= #10 1::Int)
#13 := (not #12)
#48 := [asserted]: #13
#521 := (not #684)
#522 := (or #521 #12)
#464 := (* -1::Int 3::Int)
#671 := (div #464 #464)
#345 := (* -1::Int #671)
#346 := (+ #10 #345)
#678 := (= #346 0::Int)
#340 := (div 3::Int 3::Int)
#675 := (* -1::Int #340)
#677 := (+ #10 #675)
#334 := (= #677 0::Int)
#356 := (<= 3::Int 0::Int)
#359 := (>= 3::Int 0::Int)
#360 := (or #359 #356)
#357 := (not #360)
#347 := (or #356 #356)
#358 := (not #347)
#361 := (or #358 #357)
#679 := (if #361 #334 #678)
#355 := (= #10 0::Int)
#270 := (= 3::Int 0::Int)
#354 := (or #270 #270)
#680 := (if #354 #355 #679)
#523 := (or #521 #680)
#617 := (iff #523 #522)
#618 := (iff #522 #522)
#605 := [rewrite]: #618
#512 := (iff #680 #12)
#616 := (if false #355 #12)
#518 := (iff #616 #12)
#519 := [rewrite]: #518
#501 := (iff #680 #616)
#612 := (iff #679 #12)
#1 := true
#507 := (if true #12 #12)
#615 := (iff #507 #12)
#517 := [rewrite]: #615
#508 := (iff #679 #507)
#624 := (iff #678 #12)
#645 := (+ -1::Int #10)
#635 := (= #645 0::Int)
#642 := (iff #635 #12)
#637 := [rewrite]: #642
#623 := (iff #678 #635)
#620 := (= #346 #645)
#362 := (+ #10 -1::Int)
#649 := (= #362 #645)
#638 := [rewrite]: #649
#466 := (= #346 #362)
#463 := (= #345 -1::Int)
#655 := (* -1::Int 1::Int)
#367 := (= #655 -1::Int)
#368 := [rewrite]: #367
#627 := (= #345 #655)
#632 := (= #671 1::Int)
#485 := -3::Int
#629 := (div -3::Int -3::Int)
#625 := (= #629 1::Int)
#626 := [rewrite]: #625
#630 := (= #671 #629)
#486 := (= #464 -3::Int)
#628 := [rewrite]: #486
#631 := [monotonicity #628 #628]: #630
#633 := [trans #631 #626]: #632
#634 := [monotonicity #633]: #627
#465 := [trans #634 #368]: #463
#619 := [monotonicity #465]: #466
#622 := [trans #619 #638]: #620
#621 := [monotonicity #622]: #623
#506 := [trans #621 #637]: #624
#643 := (iff #334 #12)
#636 := (iff #334 #635)
#639 := (= #677 #645)
#644 := (= #677 #362)
#646 := (= #675 -1::Int)
#365 := (= #675 #655)
#654 := (= #340 1::Int)
#651 := [rewrite]: #654
#366 := [monotonicity #651]: #365
#647 := [trans #366 #368]: #646
#648 := [monotonicity #647]: #644
#640 := [trans #648 #638]: #639
#641 := [monotonicity #640]: #636
#484 := [trans #641 #637]: #643
#376 := (iff #361 true)
#668 := (or true false)
#669 := (iff #668 true)
#667 := [rewrite]: #669
#653 := (iff #361 #668)
#276 := (iff #357 false)
#657 := (not true)
#381 := (iff #657 false)
#382 := [rewrite]: #381
#379 := (iff #357 #657)
#670 := (iff #360 true)
#308 := (iff #360 #668)
#317 := (iff #356 false)
#658 := [rewrite]: #317
#303 := (iff #359 true)
#666 := [rewrite]: #303
#309 := [monotonicity #666 #658]: #308
#656 := [trans #309 #667]: #670
#380 := [monotonicity #656]: #379
#652 := [trans #380 #382]: #276
#659 := (iff #358 true)
#660 := (not false)
#663 := (iff #660 true)
#664 := [rewrite]: #663
#661 := (iff #358 #660)
#323 := (iff #347 false)
#682 := (or false false)
#337 := (iff #682 false)
#673 := [rewrite]: #337
#321 := (iff #347 #682)
#322 := [monotonicity #658 #658]: #321
#324 := [trans #322 #673]: #323
#662 := [monotonicity #324]: #661
#665 := [trans #662 #664]: #659
#375 := [monotonicity #665 #652]: #653
#650 := [trans #375 #667]: #376
#467 := [monotonicity #650 #484 #506]: #508
#613 := [trans #467 #517]: #612
#333 := (iff #354 false)
#672 := (iff #354 #682)
#681 := (iff #270 false)
#676 := [rewrite]: #681
#332 := [monotonicity #676 #676]: #672
#674 := [trans #332 #673]: #333
#516 := [monotonicity #674 #613]: #501
#520 := [trans #516 #519]: #512
#614 := [monotonicity #520]: #617
#607 := [trans #614 #605]: #617
#524 := [quant-inst #8 #8]: #523
#599 := [mp #524 #607]: #522
[unit-resolution #599 #48 #689]: false
2aeb178d5528960841f3f6a1d0552953e056dd91 320 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#684 := (pattern #18)
#19 := 0::Int
#81 := -1::Int
#85 := (* -1::Int #17)
#82 := (* -1::Int #15)
#88 := (div #82 #85)
#244 := (* -1::Int #88)
#245 := (+ #18 #244)
#246 := (= #245 0::Int)
#29 := (div #15 #17)
#241 := (* -1::Int #29)
#242 := (+ #18 #241)
#243 := (= #242 0::Int)
#59 := (<= #17 0::Int)
#151 := (>= #15 0::Int)
#204 := (or #151 #59)
#205 := (not #204)
#55 := (<= #15 0::Int)
#200 := (or #55 #59)
#201 := (not #200)
#208 := (or #201 #205)
#247 := (if #208 #243 #246)
#240 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #15 0::Int)
#22 := (or #20 #21)
#248 := (if #22 #240 #247)
#685 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #684) #248)
#251 := (forall (vars (?v0 Int) (?v1 Int)) #248)
#688 := (iff #251 #685)
#686 := (iff #248 #248)
#687 := [refl]: #686
#689 := [quant-intro #687]: #688
#211 := (if #208 #29 #88)
#214 := (if #22 0::Int #211)
#217 := (= #18 #214)
#220 := (forall (vars (?v0 Int) (?v1 Int)) #217)
#252 := (iff #220 #251)
#249 := (iff #217 #248)
#250 := [rewrite]: #249
#253 := [quant-intro #250]: #252
#60 := (not #59)
#154 := (not #151)
#157 := (and #154 #60)
#56 := (not #55)
#63 := (and #56 #60)
#160 := (or #63 #157)
#163 := (if #160 #29 #88)
#166 := (if #22 0::Int #163)
#169 := (= #18 #166)
#172 := (forall (vars (?v0 Int) (?v1 Int)) #169)
#221 := (iff #172 #220)
#218 := (iff #169 #217)
#215 := (= #166 #214)
#212 := (= #163 #211)
#209 := (iff #160 #208)
#206 := (iff #157 #205)
#207 := [rewrite]: #206
#202 := (iff #63 #201)
#203 := [rewrite]: #202
#210 := [monotonicity #203 #207]: #209
#213 := [monotonicity #210]: #212
#216 := [monotonicity #213]: #215
#219 := [monotonicity #216]: #218
#222 := [quant-intro #219]: #221
#149 := (~ #172 #172)
#192 := (~ #169 #169)
#193 := [refl]: #192
#150 := [nnf-pos #193]: #149
#66 := (<= 0::Int #15)
#67 := (not #66)
#75 := (and #67 #60)
#78 := (or #63 #75)
#91 := (if #78 #29 #88)
#94 := (if #22 0::Int #91)
#97 := (= #18 #94)
#100 := (forall (vars (?v0 Int) (?v1 Int)) #97)
#173 := (iff #100 #172)
#170 := (iff #97 #169)
#167 := (= #94 #166)
#164 := (= #91 #163)
#161 := (iff #78 #160)
#158 := (iff #75 #157)
#155 := (iff #67 #154)
#152 := (iff #66 #151)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [quant-intro #171]: #173
#31 := (- #17)
#30 := (- #15)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (if #28 #29 #32)
#34 := (if #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#101 := (iff #36 #100)
#98 := (iff #35 #97)
#95 := (= #34 #94)
#92 := (= #33 #91)
#89 := (= #32 #88)
#86 := (= #31 #85)
#87 := [rewrite]: #86
#83 := (= #30 #82)
#84 := [rewrite]: #83
#90 := [monotonicity #84 #87]: #89
#79 := (iff #28 #78)
#76 := (iff #27 #75)
#61 := (iff #24 #60)
#62 := [rewrite]: #61
#68 := (iff #26 #67)
#72 := (iff #67 #67)
#70 := (iff #66 #66)
#71 := [rewrite]: #70
#73 := [monotonicity #71]: #72
#69 := [rewrite]: #68
#74 := [trans #69 #73]: #68
#77 := [monotonicity #74 #62]: #76
#64 := (iff #25 #63)
#57 := (iff #23 #56)
#58 := [rewrite]: #57
#65 := [monotonicity #58 #62]: #64
#80 := [monotonicity #65 #77]: #79
#93 := [monotonicity #80 #90]: #92
#96 := [monotonicity #93]: #95
#99 := [monotonicity #96]: #98
#102 := [quant-intro #99]: #101
#50 := [asserted]: #36
#103 := [mp #50 #102]: #100
#175 := [mp #103 #174]: #172
#196 := [mp~ #175 #150]: #172
#223 := [mp #196 #222]: #220
#254 := [mp #223 #253]: #251
#690 := [mp #254 #689]: #685
#12 := 1::Int
#10 := 3::Int
#8 := 5::Int
#9 := (f4 f5 5::Int)
#11 := (f3 #9 3::Int)
#13 := (= #11 1::Int)
#14 := (not #13)
#49 := [asserted]: #14
#589 := (not #685)
#590 := (or #589 #13)
#347 := (* -1::Int 3::Int)
#346 := (* -1::Int 5::Int)
#679 := (div #346 #347)
#680 := (* -1::Int #679)
#681 := (+ #11 #680)
#682 := (= #681 0::Int)
#678 := (div 5::Int 3::Int)
#335 := (* -1::Int #678)
#465 := (+ #11 #335)
#672 := (= #465 0::Int)
#359 := (<= 3::Int 0::Int)
#358 := (>= 5::Int 0::Int)
#362 := (or #358 #359)
#341 := (not #362)
#348 := (<= 5::Int 0::Int)
#360 := (or #348 #359)
#361 := (not #360)
#676 := (or #361 #341)
#677 := (if #676 #672 #682)
#357 := (= #11 0::Int)
#355 := (= 3::Int 0::Int)
#271 := (= 5::Int 0::Int)
#356 := (or #271 #355)
#683 := (if #356 #357 #677)
#592 := (or #589 #683)
#594 := (iff #592 #590)
#591 := (iff #590 #590)
#596 := [rewrite]: #591
#598 := (iff #683 #13)
#612 := (if false #357 #13)
#603 := (iff #612 #13)
#604 := [rewrite]: #603
#601 := (iff #683 #612)
#611 := (iff #677 #13)
#621 := 2::Int
#618 := (= #11 2::Int)
#1 := true
#600 := (if true #13 #618)
#609 := (iff #600 #13)
#610 := [rewrite]: #609
#597 := (iff #677 #600)
#606 := (iff #682 #618)
#468 := -2::Int
#519 := (+ -2::Int #11)
#523 := (= #519 0::Int)
#615 := (iff #523 #618)
#619 := [rewrite]: #615
#524 := (iff #682 #523)
#521 := (= #681 #519)
#617 := (+ #11 -2::Int)
#520 := (= #617 #519)
#513 := [rewrite]: #520
#502 := (= #681 #617)
#613 := (= #680 -2::Int)
#507 := (* -1::Int 2::Int)
#616 := (= #507 -2::Int)
#518 := [rewrite]: #616
#508 := (= #680 #507)
#622 := (= #679 2::Int)
#628 := -3::Int
#627 := -5::Int
#466 := (div -5::Int -3::Int)
#623 := (= #466 2::Int)
#624 := [rewrite]: #623
#467 := (= #679 #466)
#635 := (= #347 -3::Int)
#464 := [rewrite]: #635
#633 := (= #346 -5::Int)
#634 := [rewrite]: #633
#620 := [monotonicity #634 #464]: #467
#625 := [trans #620 #624]: #622
#509 := [monotonicity #625]: #508
#614 := [trans #509 #518]: #613
#517 := [monotonicity #614]: #502
#522 := [trans #517 #513]: #521
#525 := [monotonicity #522]: #524
#608 := [trans #525 #619]: #606
#632 := (iff #672 #13)
#642 := (+ -1::Int #11)
#486 := (= #642 0::Int)
#630 := (iff #486 #13)
#631 := [rewrite]: #630
#487 := (iff #672 #486)
#644 := (= #465 #642)
#641 := (+ #11 -1::Int)
#643 := (= #641 #642)
#638 := [rewrite]: #643
#636 := (= #465 #641)
#639 := (= #335 -1::Int)
#363 := (* -1::Int 1::Int)
#646 := (= #363 -1::Int)
#650 := [rewrite]: #646
#645 := (= #335 #363)
#647 := (= #678 1::Int)
#648 := [rewrite]: #647
#649 := [monotonicity #648]: #645
#640 := [trans #649 #650]: #639
#637 := [monotonicity #640]: #636
#485 := [trans #637 #638]: #644
#629 := [monotonicity #485]: #487
#626 := [trans #629 #631]: #632
#368 := (iff #676 true)
#658 := (or true false)
#382 := (iff #658 true)
#383 := [rewrite]: #382
#366 := (iff #676 #658)
#652 := (iff #341 false)
#654 := (not true)
#651 := (iff #654 false)
#655 := [rewrite]: #651
#376 := (iff #341 #654)
#277 := (iff #362 true)
#380 := (iff #362 #658)
#662 := (iff #359 false)
#663 := [rewrite]: #662
#671 := (iff #358 true)
#657 := [rewrite]: #671
#381 := [monotonicity #657 #663]: #380
#653 := [trans #381 #383]: #277
#377 := [monotonicity #653]: #376
#656 := [trans #377 #655]: #652
#670 := (iff #361 true)
#304 := (not false)
#309 := (iff #304 true)
#310 := [rewrite]: #309
#667 := (iff #361 #304)
#660 := (iff #360 false)
#334 := (or false false)
#659 := (iff #334 false)
#322 := [rewrite]: #659
#664 := (iff #360 #334)
#325 := (iff #348 false)
#661 := [rewrite]: #325
#665 := [monotonicity #661 #663]: #664
#666 := [trans #665 #322]: #660
#669 := [monotonicity #666]: #667
#668 := [trans #669 #310]: #670
#367 := [monotonicity #668 #656]: #366
#369 := [trans #367 #383]: #368
#599 := [monotonicity #369 #626 #608]: #597
#607 := [trans #599 #610]: #611
#323 := (iff #356 false)
#675 := (iff #356 #334)
#338 := (iff #355 false)
#674 := [rewrite]: #338
#673 := (iff #271 false)
#333 := [rewrite]: #673
#318 := [monotonicity #333 #674]: #675
#324 := [trans #318 #322]: #323
#602 := [monotonicity #324 #607]: #601
#605 := [trans #602 #604]: #598
#595 := [monotonicity #605]: #594
#582 := [trans #595 #596]: #594
#593 := [quant-inst #8 #10]: #592
#583 := [mp #593 #582]: #590
[unit-resolution #583 #49 #690]: false
07dc79bb7af38a9690966d1d8001aa5e0aaa3f0d 322 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#700 := (pattern #19)
#20 := 0::Int
#62 := -1::Int
#101 := (* -1::Int #18)
#98 := (* -1::Int #16)
#104 := (div #98 #101)
#260 := (* -1::Int #104)
#261 := (+ #19 #260)
#262 := (= #261 0::Int)
#30 := (div #16 #18)
#257 := (* -1::Int #30)
#258 := (+ #19 #257)
#259 := (= #258 0::Int)
#76 := (<= #18 0::Int)
#167 := (>= #16 0::Int)
#220 := (or #167 #76)
#221 := (not #220)
#72 := (<= #16 0::Int)
#216 := (or #72 #76)
#217 := (not #216)
#224 := (or #217 #221)
#263 := (if #224 #259 #262)
#256 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#264 := (if #23 #256 #263)
#701 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #700) #264)
#267 := (forall (vars (?v0 Int) (?v1 Int)) #264)
#704 := (iff #267 #701)
#702 := (iff #264 #264)
#703 := [refl]: #702
#705 := [quant-intro #703]: #704
#227 := (if #224 #30 #104)
#230 := (if #23 0::Int #227)
#233 := (= #19 #230)
#236 := (forall (vars (?v0 Int) (?v1 Int)) #233)
#268 := (iff #236 #267)
#265 := (iff #233 #264)
#266 := [rewrite]: #265
#269 := [quant-intro #266]: #268
#77 := (not #76)
#170 := (not #167)
#173 := (and #170 #77)
#73 := (not #72)
#80 := (and #73 #77)
#176 := (or #80 #173)
#179 := (if #176 #30 #104)
#182 := (if #23 0::Int #179)
#185 := (= #19 #182)
#188 := (forall (vars (?v0 Int) (?v1 Int)) #185)
#237 := (iff #188 #236)
#234 := (iff #185 #233)
#231 := (= #182 #230)
#228 := (= #179 #227)
#225 := (iff #176 #224)
#222 := (iff #173 #221)
#223 := [rewrite]: #222
#218 := (iff #80 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [quant-intro #235]: #237
#208 := (~ #188 #188)
#210 := (~ #185 #185)
#211 := [refl]: #210
#209 := [nnf-pos #211]: #208
#83 := (<= 0::Int #16)
#84 := (not #83)
#92 := (and #84 #77)
#95 := (or #80 #92)
#107 := (if #95 #30 #104)
#110 := (if #23 0::Int #107)
#113 := (= #19 #110)
#116 := (forall (vars (?v0 Int) (?v1 Int)) #113)
#189 := (iff #116 #188)
#186 := (iff #113 #185)
#183 := (= #110 #182)
#180 := (= #107 #179)
#177 := (iff #95 #176)
#174 := (iff #92 #173)
#171 := (iff #84 #170)
#168 := (iff #83 #167)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [quant-intro #187]: #189
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#117 := (iff #37 #116)
#114 := (iff #36 #113)
#111 := (= #35 #110)
#108 := (= #34 #107)
#105 := (= #33 #104)
#102 := (= #32 #101)
#103 := [rewrite]: #102
#99 := (= #31 #98)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #103]: #105
#96 := (iff #29 #95)
#93 := (iff #28 #92)
#78 := (iff #25 #77)
#79 := [rewrite]: #78
#85 := (iff #27 #84)
#89 := (iff #84 #84)
#87 := (iff #83 #83)
#88 := [rewrite]: #87
#90 := [monotonicity #88]: #89
#86 := [rewrite]: #85
#91 := [trans #86 #90]: #85
#94 := [monotonicity #91 #79]: #93
#81 := (iff #26 #80)
#74 := (iff #24 #73)
#75 := [rewrite]: #74
#82 := [monotonicity #75 #79]: #81
#97 := [monotonicity #82 #94]: #96
#109 := [monotonicity #97 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [quant-intro #115]: #117
#51 := [asserted]: #37
#119 := [mp #51 #118]: #116
#191 := [mp #119 #190]: #188
#165 := [mp~ #191 #209]: #188
#239 := [mp #165 #238]: #236
#270 := [mp #239 #269]: #267
#706 := [mp #270 #705]: #701
#56 := -3::Int
#8 := 1::Int
#9 := (f4 f5 1::Int)
#59 := (f3 #9 -3::Int)
#65 := (= #59 -1::Int)
#68 := (not #65)
#13 := (- 1::Int)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#14 := (= #12 #13)
#15 := (not #14)
#69 := (iff #15 #68)
#66 := (iff #14 #65)
#63 := (= #13 -1::Int)
#64 := [rewrite]: #63
#60 := (= #12 #59)
#57 := (= #11 -3::Int)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#67 := [monotonicity #61 #64]: #66
#70 := [monotonicity #67]: #69
#50 := [asserted]: #15
#71 := [mp #50 #70]: #68
#616 := (not #701)
#613 := (or #616 #65)
#363 := (* -1::Int -3::Int)
#362 := (* -1::Int 1::Int)
#695 := (div #362 #363)
#696 := (* -1::Int #695)
#697 := (+ #59 #696)
#698 := (= #697 0::Int)
#694 := (div 1::Int -3::Int)
#351 := (* -1::Int #694)
#481 := (+ #59 #351)
#688 := (= #481 0::Int)
#375 := (<= -3::Int 0::Int)
#374 := (>= 1::Int 0::Int)
#378 := (or #374 #375)
#357 := (not #378)
#364 := (<= 1::Int 0::Int)
#376 := (or #364 #375)
#377 := (not #376)
#692 := (or #377 #357)
#693 := (if #692 #688 #698)
#373 := (= #59 0::Int)
#371 := (= -3::Int 0::Int)
#287 := (= 1::Int 0::Int)
#372 := (or #287 #371)
#699 := (if #372 #373 #693)
#615 := (or #616 #699)
#626 := (iff #615 #613)
#623 := (iff #613 #613)
#628 := [rewrite]: #623
#622 := (iff #699 #65)
#529 := (if false #373 #65)
#539 := (iff #529 #65)
#540 := [rewrite]: #539
#631 := (iff #699 #529)
#541 := (iff #693 #65)
#537 := (iff #693 #529)
#535 := (iff #698 #65)
#524 := (+ 1::Int #59)
#629 := (= #524 0::Int)
#518 := (iff #629 #65)
#533 := [rewrite]: #518
#630 := (iff #698 #629)
#632 := (= #697 #524)
#638 := (+ #59 1::Int)
#525 := (= #638 #524)
#484 := [rewrite]: #525
#641 := (= #697 #638)
#639 := (= #696 1::Int)
#480 := (* -1::Int -1::Int)
#636 := (= #480 1::Int)
#637 := [rewrite]: #636
#482 := (= #696 #480)
#644 := (= #695 -1::Int)
#648 := (div -1::Int 3::Int)
#649 := (= #648 -1::Int)
#650 := [rewrite]: #649
#642 := (= #695 #648)
#646 := (= #363 3::Int)
#647 := [rewrite]: #646
#503 := (= #362 -1::Int)
#645 := [rewrite]: #503
#643 := [monotonicity #645 #647]: #642
#651 := [trans #643 #650]: #644
#483 := [monotonicity #651]: #482
#640 := [trans #483 #637]: #639
#523 := [monotonicity #640]: #641
#534 := [trans #523 #484]: #632
#633 := [monotonicity #534]: #630
#536 := [trans #633 #533]: #535
#501 := (iff #688 #373)
#654 := (= #481 #59)
#657 := (+ #59 0::Int)
#658 := (= #657 #59)
#659 := [rewrite]: #658
#652 := (= #481 #657)
#655 := (= #351 0::Int)
#379 := (* -1::Int 0::Int)
#662 := (= #379 0::Int)
#666 := [rewrite]: #662
#661 := (= #351 #379)
#663 := (= #694 0::Int)
#664 := [rewrite]: #663
#665 := [monotonicity #664]: #661
#656 := [trans #665 #666]: #655
#653 := [monotonicity #656]: #652
#660 := [trans #653 #659]: #654
#502 := [monotonicity #660]: #501
#384 := (iff #692 false)
#350 := (or false false)
#675 := (iff #350 false)
#338 := [rewrite]: #675
#382 := (iff #692 #350)
#668 := (iff #357 false)
#1 := true
#325 := (not true)
#684 := (iff #325 false)
#687 := [rewrite]: #684
#667 := (iff #357 #325)
#392 := (iff #378 true)
#398 := (or true true)
#669 := (iff #398 true)
#670 := [rewrite]: #669
#399 := (iff #378 #398)
#678 := (iff #375 true)
#679 := [rewrite]: #678
#396 := (iff #374 true)
#397 := [rewrite]: #396
#293 := [monotonicity #397 #679]: #399
#393 := [trans #293 #670]: #392
#671 := [monotonicity #393]: #667
#672 := [trans #671 #687]: #668
#673 := (iff #377 false)
#326 := (iff #377 #325)
#683 := (iff #376 true)
#680 := (or false true)
#682 := (iff #680 true)
#320 := [rewrite]: #682
#681 := (iff #376 #680)
#341 := (iff #364 false)
#677 := [rewrite]: #341
#676 := [monotonicity #677 #679]: #681
#685 := [trans #676 #320]: #683
#686 := [monotonicity #685]: #326
#674 := [trans #686 #687]: #673
#383 := [monotonicity #674 #672]: #382
#385 := [trans #383 #338]: #384
#538 := [monotonicity #385 #502 #536]: #537
#634 := [trans #538 #540]: #541
#339 := (iff #372 false)
#691 := (iff #372 #350)
#354 := (iff #371 false)
#690 := [rewrite]: #354
#689 := (iff #287 false)
#349 := [rewrite]: #689
#334 := [monotonicity #349 #690]: #691
#340 := [trans #334 #338]: #339
#635 := [monotonicity #340 #634]: #631
#624 := [trans #635 #540]: #622
#627 := [monotonicity #624]: #626
#617 := [trans #627 #628]: #626
#625 := [quant-inst #8 #56]: #615
#618 := [mp #625 #617]: #613
[unit-resolution #618 #71 #706]: false
2724efda4c32efbff1ae699cb7c49583d776fd69 321 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#700 := (pattern #19)
#20 := 0::Int
#62 := -1::Int
#101 := (* -1::Int #18)
#98 := (* -1::Int #16)
#104 := (div #98 #101)
#260 := (* -1::Int #104)
#261 := (+ #19 #260)
#262 := (= #261 0::Int)
#30 := (div #16 #18)
#257 := (* -1::Int #30)
#258 := (+ #19 #257)
#259 := (= #258 0::Int)
#76 := (<= #18 0::Int)
#167 := (>= #16 0::Int)
#220 := (or #167 #76)
#221 := (not #220)
#72 := (<= #16 0::Int)
#216 := (or #72 #76)
#217 := (not #216)
#224 := (or #217 #221)
#263 := (if #224 #259 #262)
#256 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#264 := (if #23 #256 #263)
#701 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #700) #264)
#267 := (forall (vars (?v0 Int) (?v1 Int)) #264)
#704 := (iff #267 #701)
#702 := (iff #264 #264)
#703 := [refl]: #702
#705 := [quant-intro #703]: #704
#227 := (if #224 #30 #104)
#230 := (if #23 0::Int #227)
#233 := (= #19 #230)
#236 := (forall (vars (?v0 Int) (?v1 Int)) #233)
#268 := (iff #236 #267)
#265 := (iff #233 #264)
#266 := [rewrite]: #265
#269 := [quant-intro #266]: #268
#77 := (not #76)
#170 := (not #167)
#173 := (and #170 #77)
#73 := (not #72)
#80 := (and #73 #77)
#176 := (or #80 #173)
#179 := (if #176 #30 #104)
#182 := (if #23 0::Int #179)
#185 := (= #19 #182)
#188 := (forall (vars (?v0 Int) (?v1 Int)) #185)
#237 := (iff #188 #236)
#234 := (iff #185 #233)
#231 := (= #182 #230)
#228 := (= #179 #227)
#225 := (iff #176 #224)
#222 := (iff #173 #221)
#223 := [rewrite]: #222
#218 := (iff #80 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [quant-intro #235]: #237
#165 := (~ #188 #188)
#208 := (~ #185 #185)
#209 := [refl]: #208
#166 := [nnf-pos #209]: #165
#83 := (<= 0::Int #16)
#84 := (not #83)
#92 := (and #84 #77)
#95 := (or #80 #92)
#107 := (if #95 #30 #104)
#110 := (if #23 0::Int #107)
#113 := (= #19 #110)
#116 := (forall (vars (?v0 Int) (?v1 Int)) #113)
#189 := (iff #116 #188)
#186 := (iff #113 #185)
#183 := (= #110 #182)
#180 := (= #107 #179)
#177 := (iff #95 #176)
#174 := (iff #92 #173)
#171 := (iff #84 #170)
#168 := (iff #83 #167)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [quant-intro #187]: #189
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#117 := (iff #37 #116)
#114 := (iff #36 #113)
#111 := (= #35 #110)
#108 := (= #34 #107)
#105 := (= #33 #104)
#102 := (= #32 #101)
#103 := [rewrite]: #102
#99 := (= #31 #98)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #103]: #105
#96 := (iff #29 #95)
#93 := (iff #28 #92)
#78 := (iff #25 #77)
#79 := [rewrite]: #78
#85 := (iff #27 #84)
#89 := (iff #84 #84)
#87 := (iff #83 #83)
#88 := [rewrite]: #87
#90 := [monotonicity #88]: #89
#86 := [rewrite]: #85
#91 := [trans #86 #90]: #85
#94 := [monotonicity #91 #79]: #93
#81 := (iff #26 #80)
#74 := (iff #24 #73)
#75 := [rewrite]: #74
#82 := [monotonicity #75 #79]: #81
#97 := [monotonicity #82 #94]: #96
#109 := [monotonicity #97 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [quant-intro #115]: #117
#51 := [asserted]: #37
#119 := [mp #51 #118]: #116
#191 := [mp #119 #190]: #188
#210 := [mp~ #191 #166]: #188
#239 := [mp #210 #238]: #236
#270 := [mp #239 #269]: #267
#706 := [mp #270 #705]: #701
#56 := -3::Int
#8 := 3::Int
#9 := (f4 f5 3::Int)
#59 := (f3 #9 -3::Int)
#65 := (= #59 -1::Int)
#68 := (not #65)
#12 := 1::Int
#13 := (- 1::Int)
#10 := (- 3::Int)
#11 := (f3 #9 #10)
#14 := (= #11 #13)
#15 := (not #14)
#69 := (iff #15 #68)
#66 := (iff #14 #65)
#63 := (= #13 -1::Int)
#64 := [rewrite]: #63
#60 := (= #11 #59)
#57 := (= #10 -3::Int)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#67 := [monotonicity #61 #64]: #66
#70 := [monotonicity #67]: #69
#50 := [asserted]: #15
#71 := [mp #50 #70]: #68
#624 := (not #701)
#616 := (or #624 #65)
#363 := (* -1::Int -3::Int)
#362 := (* -1::Int 3::Int)
#695 := (div #362 #363)
#696 := (* -1::Int #695)
#697 := (+ #59 #696)
#698 := (= #697 0::Int)
#694 := (div 3::Int -3::Int)
#351 := (* -1::Int #694)
#481 := (+ #59 #351)
#688 := (= #481 0::Int)
#375 := (<= -3::Int 0::Int)
#374 := (>= 3::Int 0::Int)
#378 := (or #374 #375)
#357 := (not #378)
#364 := (<= 3::Int 0::Int)
#376 := (or #364 #375)
#377 := (not #376)
#692 := (or #377 #357)
#693 := (if #692 #688 #698)
#373 := (= #59 0::Int)
#371 := (= -3::Int 0::Int)
#287 := (= 3::Int 0::Int)
#372 := (or #287 #371)
#699 := (if #372 #373 #693)
#613 := (or #624 #699)
#625 := (iff #613 #616)
#627 := (iff #616 #616)
#623 := [rewrite]: #627
#635 := (iff #699 #65)
#539 := (if false #373 #65)
#634 := (iff #539 #65)
#631 := [rewrite]: #634
#540 := (iff #699 #539)
#537 := (iff #693 #65)
#518 := (if false #65 #65)
#536 := (iff #518 #65)
#529 := [rewrite]: #536
#533 := (iff #693 #518)
#630 := (iff #698 #65)
#658 := (+ 1::Int #59)
#502 := (= #658 0::Int)
#646 := (iff #502 #65)
#647 := [rewrite]: #646
#534 := (iff #698 #502)
#484 := (= #697 #658)
#657 := (+ #59 1::Int)
#659 := (= #657 #658)
#654 := [rewrite]: #659
#524 := (= #697 #657)
#641 := (= #696 1::Int)
#379 := (* -1::Int -1::Int)
#662 := (= #379 1::Int)
#666 := [rewrite]: #662
#640 := (= #696 #379)
#637 := (= #695 -1::Int)
#651 := (div -3::Int 3::Int)
#483 := (= #651 -1::Int)
#636 := [rewrite]: #483
#480 := (= #695 #651)
#650 := (= #363 3::Int)
#644 := [rewrite]: #650
#643 := (= #362 -3::Int)
#649 := [rewrite]: #643
#482 := [monotonicity #649 #644]: #480
#639 := [trans #482 #636]: #637
#638 := [monotonicity #639]: #640
#523 := [trans #638 #666]: #641
#525 := [monotonicity #523]: #524
#632 := [trans #525 #654]: #484
#629 := [monotonicity #632]: #534
#633 := [trans #629 #647]: #630
#648 := (iff #688 #65)
#503 := (iff #688 #502)
#660 := (= #481 #658)
#652 := (= #481 #657)
#655 := (= #351 1::Int)
#661 := (= #351 #379)
#663 := (= #694 -1::Int)
#664 := [rewrite]: #663
#665 := [monotonicity #664]: #661
#656 := [trans #665 #666]: #655
#653 := [monotonicity #656]: #652
#501 := [trans #653 #654]: #660
#645 := [monotonicity #501]: #503
#642 := [trans #645 #647]: #648
#384 := (iff #692 false)
#350 := (or false false)
#675 := (iff #350 false)
#338 := [rewrite]: #675
#382 := (iff #692 #350)
#668 := (iff #357 false)
#1 := true
#325 := (not true)
#684 := (iff #325 false)
#687 := [rewrite]: #684
#667 := (iff #357 #325)
#392 := (iff #378 true)
#398 := (or true true)
#669 := (iff #398 true)
#670 := [rewrite]: #669
#399 := (iff #378 #398)
#678 := (iff #375 true)
#679 := [rewrite]: #678
#396 := (iff #374 true)
#397 := [rewrite]: #396
#293 := [monotonicity #397 #679]: #399
#393 := [trans #293 #670]: #392
#671 := [monotonicity #393]: #667
#672 := [trans #671 #687]: #668
#673 := (iff #377 false)
#326 := (iff #377 #325)
#683 := (iff #376 true)
#680 := (or false true)
#682 := (iff #680 true)
#320 := [rewrite]: #682
#681 := (iff #376 #680)
#341 := (iff #364 false)
#677 := [rewrite]: #341
#676 := [monotonicity #677 #679]: #681
#685 := [trans #676 #320]: #683
#686 := [monotonicity #685]: #326
#674 := [trans #686 #687]: #673
#383 := [monotonicity #674 #672]: #382
#385 := [trans #383 #338]: #384
#535 := [monotonicity #385 #642 #633]: #533
#538 := [trans #535 #529]: #537
#339 := (iff #372 false)
#691 := (iff #372 #350)
#354 := (iff #371 false)
#690 := [rewrite]: #354
#689 := (iff #287 false)
#349 := [rewrite]: #689
#334 := [monotonicity #349 #690]: #691
#340 := [trans #334 #338]: #339
#541 := [monotonicity #340 #538]: #540
#622 := [trans #541 #631]: #635
#626 := [monotonicity #622]: #625
#628 := [trans #626 #623]: #625
#615 := [quant-inst #8 #56]: #613
#617 := [mp #615 #628]: #616
[unit-resolution #617 #71 #706]: false
b17d0a5f28b546cd2d43a494f2d86e3a5351ba17 336 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#703 := (pattern #20)
#21 := 0::Int
#99 := -1::Int
#103 := (* -1::Int #19)
#100 := (* -1::Int #17)
#106 := (div #100 #103)
#262 := (* -1::Int #106)
#263 := (+ #20 #262)
#264 := (= #263 0::Int)
#31 := (div #17 #19)
#259 := (* -1::Int #31)
#260 := (+ #20 #259)
#261 := (= #260 0::Int)
#77 := (<= #19 0::Int)
#169 := (>= #17 0::Int)
#222 := (or #169 #77)
#223 := (not #222)
#73 := (<= #17 0::Int)
#218 := (or #73 #77)
#219 := (not #218)
#226 := (or #219 #223)
#265 := (if #226 #261 #264)
#258 := (= #20 0::Int)
#23 := (= #19 0::Int)
#22 := (= #17 0::Int)
#24 := (or #22 #23)
#266 := (if #24 #258 #265)
#704 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #703) #266)
#269 := (forall (vars (?v0 Int) (?v1 Int)) #266)
#707 := (iff #269 #704)
#705 := (iff #266 #266)
#706 := [refl]: #705
#708 := [quant-intro #706]: #707
#229 := (if #226 #31 #106)
#232 := (if #24 0::Int #229)
#235 := (= #20 #232)
#238 := (forall (vars (?v0 Int) (?v1 Int)) #235)
#270 := (iff #238 #269)
#267 := (iff #235 #266)
#268 := [rewrite]: #267
#271 := [quant-intro #268]: #270
#78 := (not #77)
#172 := (not #169)
#175 := (and #172 #78)
#74 := (not #73)
#81 := (and #74 #78)
#178 := (or #81 #175)
#181 := (if #178 #31 #106)
#184 := (if #24 0::Int #181)
#187 := (= #20 #184)
#190 := (forall (vars (?v0 Int) (?v1 Int)) #187)
#239 := (iff #190 #238)
#236 := (iff #187 #235)
#233 := (= #184 #232)
#230 := (= #181 #229)
#227 := (iff #178 #226)
#224 := (iff #175 #223)
#225 := [rewrite]: #224
#220 := (iff #81 #219)
#221 := [rewrite]: #220
#228 := [monotonicity #221 #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [monotonicity #234]: #236
#240 := [quant-intro #237]: #239
#214 := (~ #190 #190)
#212 := (~ #187 #187)
#213 := [refl]: #212
#215 := [nnf-pos #213]: #214
#84 := (<= 0::Int #17)
#85 := (not #84)
#93 := (and #85 #78)
#96 := (or #81 #93)
#109 := (if #96 #31 #106)
#112 := (if #24 0::Int #109)
#115 := (= #20 #112)
#118 := (forall (vars (?v0 Int) (?v1 Int)) #115)
#191 := (iff #118 #190)
#188 := (iff #115 #187)
#185 := (= #112 #184)
#182 := (= #109 #181)
#179 := (iff #96 #178)
#176 := (iff #93 #175)
#173 := (iff #85 #172)
#170 := (iff #84 #169)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [monotonicity #186]: #188
#192 := [quant-intro #189]: #191
#33 := (- #19)
#32 := (- #17)
#34 := (div #32 #33)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (if #30 #31 #34)
#36 := (if #24 0::Int #35)
#37 := (= #20 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#119 := (iff #38 #118)
#116 := (iff #37 #115)
#113 := (= #36 #112)
#110 := (= #35 #109)
#107 := (= #34 #106)
#104 := (= #33 #103)
#105 := [rewrite]: #104
#101 := (= #32 #100)
#102 := [rewrite]: #101
#108 := [monotonicity #102 #105]: #107
#97 := (iff #30 #96)
#94 := (iff #29 #93)
#79 := (iff #26 #78)
#80 := [rewrite]: #79
#86 := (iff #28 #85)
#90 := (iff #85 #85)
#88 := (iff #84 #84)
#89 := [rewrite]: #88
#91 := [monotonicity #89]: #90
#87 := [rewrite]: #86
#92 := [trans #87 #91]: #86
#95 := [monotonicity #92 #80]: #94
#82 := (iff #27 #81)
#75 := (iff #25 #74)
#76 := [rewrite]: #75
#83 := [monotonicity #76 #80]: #82
#98 := [monotonicity #83 #95]: #97
#111 := [monotonicity #98 #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [quant-intro #117]: #119
#52 := [asserted]: #38
#121 := [mp #52 #120]: #118
#193 := [mp #121 #192]: #190
#167 := [mp~ #193 #215]: #190
#241 := [mp #167 #240]: #238
#272 := [mp #241 #271]: #269
#709 := [mp #272 #708]: #704
#63 := -2::Int
#57 := -3::Int
#8 := 5::Int
#9 := (f4 f5 5::Int)
#60 := (f3 #9 -3::Int)
#66 := (= #60 -2::Int)
#69 := (not #66)
#13 := 2::Int
#14 := (- 2::Int)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#15 := (= #12 #14)
#16 := (not #15)
#70 := (iff #16 #69)
#67 := (iff #15 #66)
#64 := (= #14 -2::Int)
#65 := [rewrite]: #64
#61 := (= #12 #60)
#58 := (= #11 -3::Int)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#68 := [monotonicity #62 #65]: #67
#71 := [monotonicity #68]: #70
#51 := [asserted]: #16
#72 := [mp #51 #71]: #69
#623 := (not #704)
#617 := (or #623 #66)
#366 := (* -1::Int -3::Int)
#365 := (* -1::Int 5::Int)
#698 := (div #365 #366)
#699 := (* -1::Int #698)
#700 := (+ #60 #699)
#701 := (= #700 0::Int)
#697 := (div 5::Int -3::Int)
#354 := (* -1::Int #697)
#484 := (+ #60 #354)
#691 := (= #484 0::Int)
#378 := (<= -3::Int 0::Int)
#377 := (>= 5::Int 0::Int)
#381 := (or #377 #378)
#360 := (not #381)
#367 := (<= 5::Int 0::Int)
#379 := (or #367 #378)
#380 := (not #379)
#695 := (or #380 #360)
#696 := (if #695 #691 #701)
#376 := (= #60 0::Int)
#374 := (= -3::Int 0::Int)
#289 := (= 5::Int 0::Int)
#375 := (or #289 #374)
#702 := (if #375 #376 #696)
#624 := (or #623 #702)
#609 := (iff #624 #617)
#612 := (iff #617 #617)
#613 := [rewrite]: #612
#621 := (iff #702 #66)
#629 := (if false #376 #66)
#631 := (iff #629 #66)
#620 := [rewrite]: #631
#630 := (iff #702 #629)
#618 := (iff #696 #66)
#649 := (= #60 -1::Int)
#638 := (if false #649 #66)
#619 := (iff #638 #66)
#616 := [rewrite]: #619
#625 := (iff #696 #638)
#637 := (iff #701 #66)
#521 := (+ 2::Int #60)
#540 := (= #521 0::Int)
#543 := (iff #540 #66)
#544 := [rewrite]: #543
#541 := (iff #701 #540)
#539 := (= #700 #521)
#632 := (+ #60 2::Int)
#536 := (= #632 #521)
#538 := [rewrite]: #536
#633 := (= #700 #632)
#635 := (= #699 2::Int)
#644 := (* -1::Int -2::Int)
#528 := (= #644 2::Int)
#487 := [rewrite]: #528
#526 := (= #699 #644)
#643 := (= #698 -2::Int)
#652 := -5::Int
#485 := (div -5::Int 3::Int)
#640 := (= #485 -2::Int)
#642 := [rewrite]: #640
#486 := (= #698 #485)
#654 := (= #366 3::Int)
#483 := [rewrite]: #654
#653 := (= #365 -5::Int)
#647 := [rewrite]: #653
#639 := [monotonicity #647 #483]: #486
#641 := [trans #639 #642]: #643
#527 := [monotonicity #641]: #526
#537 := [trans #527 #487]: #635
#636 := [monotonicity #537]: #633
#532 := [trans #636 #538]: #539
#542 := [monotonicity #532]: #541
#634 := [trans #542 #544]: #637
#645 := (iff #691 #649)
#307 := 1::Int
#661 := (+ 1::Int #60)
#505 := (= #661 0::Int)
#650 := (iff #505 #649)
#651 := [rewrite]: #650
#506 := (iff #691 #505)
#663 := (= #484 #661)
#660 := (+ #60 1::Int)
#662 := (= #660 #661)
#657 := [rewrite]: #662
#655 := (= #484 #660)
#658 := (= #354 1::Int)
#382 := (* -1::Int -1::Int)
#665 := (= #382 1::Int)
#669 := [rewrite]: #665
#664 := (= #354 #382)
#666 := (= #697 -1::Int)
#667 := [rewrite]: #666
#668 := [monotonicity #667]: #664
#659 := [trans #668 #669]: #658
#656 := [monotonicity #659]: #655
#504 := [trans #656 #657]: #663
#648 := [monotonicity #504]: #506
#646 := [trans #648 #651]: #645
#387 := (iff #695 false)
#353 := (or false false)
#678 := (iff #353 false)
#341 := [rewrite]: #678
#385 := (iff #695 #353)
#671 := (iff #360 false)
#1 := true
#328 := (not true)
#687 := (iff #328 false)
#690 := [rewrite]: #687
#670 := (iff #360 #328)
#395 := (iff #381 true)
#401 := (or true true)
#672 := (iff #401 true)
#673 := [rewrite]: #672
#402 := (iff #381 #401)
#681 := (iff #378 true)
#682 := [rewrite]: #681
#399 := (iff #377 true)
#400 := [rewrite]: #399
#295 := [monotonicity #400 #682]: #402
#396 := [trans #295 #673]: #395
#674 := [monotonicity #396]: #670
#675 := [trans #674 #690]: #671
#676 := (iff #380 false)
#329 := (iff #380 #328)
#686 := (iff #379 true)
#683 := (or false true)
#685 := (iff #683 true)
#323 := [rewrite]: #685
#684 := (iff #379 #683)
#344 := (iff #367 false)
#680 := [rewrite]: #344
#679 := [monotonicity #680 #682]: #684
#688 := [trans #679 #323]: #686
#689 := [monotonicity #688]: #329
#677 := [trans #689 #690]: #676
#386 := [monotonicity #677 #675]: #385
#388 := [trans #386 #341]: #387
#627 := [monotonicity #388 #646 #634]: #625
#628 := [trans #627 #616]: #618
#342 := (iff #375 false)
#694 := (iff #375 #353)
#357 := (iff #374 false)
#693 := [rewrite]: #357
#692 := (iff #289 false)
#352 := [rewrite]: #692
#337 := [monotonicity #352 #693]: #694
#343 := [trans #337 #341]: #342
#626 := [monotonicity #343 #628]: #630
#622 := [trans #626 #620]: #621
#611 := [monotonicity #622]: #609
#614 := [trans #611 #613]: #609
#608 := [quant-inst #8 #57]: #624
#610 := [mp #608 #614]: #617
[unit-resolution #610 #72 #709]: false
f1eea19af20531a11f6cccfddc40aec123007d40 325 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#699 := (pattern #18)
#19 := 0::Int
#55 := -1::Int
#100 := (* -1::Int #17)
#97 := (* -1::Int #15)
#103 := (div #97 #100)
#259 := (* -1::Int #103)
#260 := (+ #18 #259)
#261 := (= #260 0::Int)
#29 := (div #15 #17)
#256 := (* -1::Int #29)
#257 := (+ #18 #256)
#258 := (= #257 0::Int)
#75 := (<= #17 0::Int)
#166 := (>= #15 0::Int)
#219 := (or #166 #75)
#220 := (not #219)
#71 := (<= #15 0::Int)
#215 := (or #71 #75)
#216 := (not #215)
#223 := (or #216 #220)
#262 := (if #223 #258 #261)
#255 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #15 0::Int)
#22 := (or #20 #21)
#263 := (if #22 #255 #262)
#700 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #699) #263)
#266 := (forall (vars (?v0 Int) (?v1 Int)) #263)
#703 := (iff #266 #700)
#701 := (iff #263 #263)
#702 := [refl]: #701
#704 := [quant-intro #702]: #703
#226 := (if #223 #29 #103)
#229 := (if #22 0::Int #226)
#232 := (= #18 #229)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#76 := (not #75)
#169 := (not #166)
#172 := (and #169 #76)
#72 := (not #71)
#79 := (and #72 #76)
#175 := (or #79 #172)
#178 := (if #175 #29 #103)
#181 := (if #22 0::Int #178)
#184 := (= #18 #181)
#187 := (forall (vars (?v0 Int) (?v1 Int)) #184)
#236 := (iff #187 #235)
#233 := (iff #184 #232)
#230 := (= #181 #229)
#227 := (= #178 #226)
#224 := (iff #175 #223)
#221 := (iff #172 #220)
#222 := [rewrite]: #221
#217 := (iff #79 #216)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#209 := (~ #187 #187)
#211 := (~ #184 #184)
#212 := [refl]: #211
#210 := [nnf-pos #212]: #209
#82 := (<= 0::Int #15)
#83 := (not #82)
#91 := (and #83 #76)
#94 := (or #79 #91)
#106 := (if #94 #29 #103)
#109 := (if #22 0::Int #106)
#112 := (= #18 #109)
#115 := (forall (vars (?v0 Int) (?v1 Int)) #112)
#188 := (iff #115 #187)
#185 := (iff #112 #184)
#182 := (= #109 #181)
#179 := (= #106 #178)
#176 := (iff #94 #175)
#173 := (iff #91 #172)
#170 := (iff #83 #169)
#167 := (iff #82 #166)
#168 := [rewrite]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [quant-intro #186]: #188
#31 := (- #17)
#30 := (- #15)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (if #28 #29 #32)
#34 := (if #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#116 := (iff #36 #115)
#113 := (iff #35 #112)
#110 := (= #34 #109)
#107 := (= #33 #106)
#104 := (= #32 #103)
#101 := (= #31 #100)
#102 := [rewrite]: #101
#98 := (= #30 #97)
#99 := [rewrite]: #98
#105 := [monotonicity #99 #102]: #104
#95 := (iff #28 #94)
#92 := (iff #27 #91)
#77 := (iff #24 #76)
#78 := [rewrite]: #77
#84 := (iff #26 #83)
#88 := (iff #83 #83)
#86 := (iff #82 #82)
#87 := [rewrite]: #86
#89 := [monotonicity #87]: #88
#85 := [rewrite]: #84
#90 := [trans #85 #89]: #84
#93 := [monotonicity #90 #78]: #92
#80 := (iff #25 #79)
#73 := (iff #23 #72)
#74 := [rewrite]: #73
#81 := [monotonicity #74 #78]: #80
#96 := [monotonicity #81 #93]: #95
#108 := [monotonicity #96 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [quant-intro #114]: #116
#50 := [asserted]: #36
#118 := [mp #50 #117]: #115
#190 := [mp #118 #189]: #187
#207 := [mp~ #190 #210]: #187
#238 := [mp #207 #237]: #235
#269 := [mp #238 #268]: #266
#705 := [mp #269 #704]: #700
#11 := 3::Int
#58 := (f4 f5 -1::Int)
#61 := (f3 #58 3::Int)
#64 := (= #61 -1::Int)
#67 := (not #64)
#8 := 1::Int
#9 := (- 1::Int)
#10 := (f4 f5 #9)
#12 := (f3 #10 3::Int)
#13 := (= #12 #9)
#14 := (not #13)
#68 := (iff #14 #67)
#65 := (iff #13 #64)
#56 := (= #9 -1::Int)
#57 := [rewrite]: #56
#62 := (= #12 #61)
#59 := (= #10 #58)
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63 #57]: #65
#69 := [monotonicity #66]: #68
#49 := [asserted]: #14
#70 := [mp #49 #69]: #67
#625 := (not #700)
#626 := (or #625 #64)
#362 := (* -1::Int 3::Int)
#361 := (* -1::Int -1::Int)
#694 := (div #361 #362)
#695 := (* -1::Int #694)
#696 := (+ #61 #695)
#697 := (= #696 0::Int)
#693 := (div -1::Int 3::Int)
#350 := (* -1::Int #693)
#480 := (+ #61 #350)
#687 := (= #480 0::Int)
#374 := (<= 3::Int 0::Int)
#373 := (>= -1::Int 0::Int)
#377 := (or #373 #374)
#356 := (not #377)
#363 := (<= -1::Int 0::Int)
#375 := (or #363 #374)
#376 := (not #375)
#691 := (or #376 #356)
#692 := (if #691 #687 #697)
#372 := (= #61 0::Int)
#370 := (= 3::Int 0::Int)
#286 := (= -1::Int 0::Int)
#371 := (or #286 #370)
#698 := (if #371 #372 #692)
#622 := (or #625 #698)
#616 := (iff #622 #626)
#618 := (iff #626 #626)
#619 := [rewrite]: #618
#614 := (iff #698 #64)
#634 := (if false #372 #64)
#615 := (iff #634 #64)
#612 := [rewrite]: #615
#621 := (iff #698 #634)
#633 := (iff #692 #64)
#1 := true
#536 := (if true #64 #372)
#539 := (iff #536 #64)
#540 := [rewrite]: #539
#537 := (iff #692 #536)
#535 := (iff #697 #372)
#532 := (= #696 #61)
#533 := (+ #61 0::Int)
#632 := (= #533 #61)
#517 := [rewrite]: #632
#628 := (= #696 #533)
#483 := (= #695 0::Int)
#637 := (* -1::Int 0::Int)
#523 := (= #637 0::Int)
#524 := [rewrite]: #523
#640 := (= #695 #637)
#638 := (= #694 0::Int)
#649 := -3::Int
#479 := (div 1::Int -3::Int)
#635 := (= #479 0::Int)
#636 := [rewrite]: #635
#481 := (= #694 #479)
#643 := (= #362 -3::Int)
#650 := [rewrite]: #643
#654 := (= #361 1::Int)
#655 := [rewrite]: #654
#482 := [monotonicity #655 #650]: #481
#639 := [trans #482 #636]: #638
#522 := [monotonicity #639]: #640
#631 := [trans #522 #524]: #483
#629 := [monotonicity #631]: #628
#534 := [trans #629 #517]: #532
#528 := [monotonicity #534]: #535
#642 := (iff #687 #64)
#653 := (+ 1::Int #61)
#644 := (= #653 0::Int)
#647 := (iff #644 #64)
#641 := [rewrite]: #647
#645 := (iff #687 #644)
#501 := (= #480 #653)
#652 := (+ #61 1::Int)
#659 := (= #652 #653)
#500 := [rewrite]: #659
#657 := (= #480 #652)
#656 := (= #350 1::Int)
#661 := (= #350 #361)
#660 := (= #693 -1::Int)
#664 := [rewrite]: #660
#665 := [monotonicity #664]: #661
#651 := [trans #665 #655]: #656
#658 := [monotonicity #651]: #657
#502 := [trans #658 #500]: #501
#646 := [monotonicity #502]: #645
#648 := [trans #646 #641]: #642
#663 := (iff #691 true)
#381 := (or false true)
#384 := (iff #381 true)
#662 := [rewrite]: #384
#382 := (iff #691 #381)
#667 := (iff #356 true)
#669 := (not false)
#666 := (iff #669 true)
#670 := [rewrite]: #666
#391 := (iff #356 #669)
#292 := (iff #377 false)
#349 := (or false false)
#674 := (iff #349 false)
#337 := [rewrite]: #674
#397 := (iff #377 #349)
#677 := (iff #374 false)
#678 := [rewrite]: #677
#395 := (iff #373 false)
#396 := [rewrite]: #395
#398 := [monotonicity #396 #678]: #397
#668 := [trans #398 #337]: #292
#392 := [monotonicity #668]: #391
#671 := [trans #392 #670]: #667
#672 := (iff #376 false)
#324 := (not true)
#683 := (iff #324 false)
#686 := [rewrite]: #683
#325 := (iff #376 #324)
#682 := (iff #375 true)
#679 := (or true false)
#681 := (iff #679 true)
#319 := [rewrite]: #681
#680 := (iff #375 #679)
#340 := (iff #363 true)
#676 := [rewrite]: #340
#675 := [monotonicity #676 #678]: #680
#684 := [trans #675 #319]: #682
#685 := [monotonicity #684]: #325
#673 := [trans #685 #686]: #672
#383 := [monotonicity #673 #671]: #382
#378 := [trans #383 #662]: #663
#538 := [monotonicity #378 #648 #528]: #537
#630 := [trans #538 #540]: #633
#338 := (iff #371 false)
#690 := (iff #371 #349)
#353 := (iff #370 false)
#689 := [rewrite]: #353
#688 := (iff #286 false)
#348 := [rewrite]: #688
#333 := [monotonicity #348 #689]: #690
#339 := [trans #333 #337]: #338
#623 := [monotonicity #339 #630]: #621
#624 := [trans #623 #612]: #614
#617 := [monotonicity #624]: #616
#613 := [trans #617 #619]: #616
#627 := [quant-inst #55 #11]: #622
#620 := [mp #627 #613]: #626
[unit-resolution #620 #70 #705]: false
b3b7ec77601c17fd899065a2138ddfd9bb069c98 327 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#703 := (pattern #19)
#20 := 0::Int
#65 := -1::Int
#104 := (* -1::Int #18)
#101 := (* -1::Int #16)
#107 := (div #101 #104)
#263 := (* -1::Int #107)
#264 := (+ #19 #263)
#265 := (= #264 0::Int)
#30 := (div #16 #18)
#260 := (* -1::Int #30)
#261 := (+ #19 #260)
#262 := (= #261 0::Int)
#79 := (<= #18 0::Int)
#170 := (>= #16 0::Int)
#223 := (or #170 #79)
#224 := (not #223)
#75 := (<= #16 0::Int)
#219 := (or #75 #79)
#220 := (not #219)
#227 := (or #220 #224)
#266 := (if #227 #262 #265)
#259 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#267 := (if #23 #259 #266)
#704 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #703) #267)
#270 := (forall (vars (?v0 Int) (?v1 Int)) #267)
#707 := (iff #270 #704)
#705 := (iff #267 #267)
#706 := [refl]: #705
#708 := [quant-intro #706]: #707
#230 := (if #227 #30 #107)
#233 := (if #23 0::Int #230)
#236 := (= #19 #233)
#239 := (forall (vars (?v0 Int) (?v1 Int)) #236)
#271 := (iff #239 #270)
#268 := (iff #236 #267)
#269 := [rewrite]: #268
#272 := [quant-intro #269]: #271
#80 := (not #79)
#173 := (not #170)
#176 := (and #173 #80)
#76 := (not #75)
#83 := (and #76 #80)
#179 := (or #83 #176)
#182 := (if #179 #30 #107)
#185 := (if #23 0::Int #182)
#188 := (= #19 #185)
#191 := (forall (vars (?v0 Int) (?v1 Int)) #188)
#240 := (iff #191 #239)
#237 := (iff #188 #236)
#234 := (= #185 #233)
#231 := (= #182 #230)
#228 := (iff #179 #227)
#225 := (iff #176 #224)
#226 := [rewrite]: #225
#221 := (iff #83 #220)
#222 := [rewrite]: #221
#229 := [monotonicity #222 #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [quant-intro #238]: #240
#215 := (~ #191 #191)
#213 := (~ #188 #188)
#214 := [refl]: #213
#216 := [nnf-pos #214]: #215
#86 := (<= 0::Int #16)
#87 := (not #86)
#95 := (and #87 #80)
#98 := (or #83 #95)
#110 := (if #98 #30 #107)
#113 := (if #23 0::Int #110)
#116 := (= #19 #113)
#119 := (forall (vars (?v0 Int) (?v1 Int)) #116)
#192 := (iff #119 #191)
#189 := (iff #116 #188)
#186 := (= #113 #185)
#183 := (= #110 #182)
#180 := (iff #98 #179)
#177 := (iff #95 #176)
#174 := (iff #87 #173)
#171 := (iff #86 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [monotonicity #187]: #189
#193 := [quant-intro #190]: #192
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#120 := (iff #37 #119)
#117 := (iff #36 #116)
#114 := (= #35 #113)
#111 := (= #34 #110)
#108 := (= #33 #107)
#105 := (= #32 #104)
#106 := [rewrite]: #105
#102 := (= #31 #101)
#103 := [rewrite]: #102
#109 := [monotonicity #103 #106]: #108
#99 := (iff #29 #98)
#96 := (iff #28 #95)
#81 := (iff #25 #80)
#82 := [rewrite]: #81
#88 := (iff #27 #87)
#92 := (iff #87 #87)
#90 := (iff #86 #86)
#91 := [rewrite]: #90
#93 := [monotonicity #91]: #92
#89 := [rewrite]: #88
#94 := [trans #89 #93]: #88
#97 := [monotonicity #94 #82]: #96
#84 := (iff #26 #83)
#77 := (iff #24 #76)
#78 := [rewrite]: #77
#85 := [monotonicity #78 #82]: #84
#100 := [monotonicity #85 #97]: #99
#112 := [monotonicity #100 #109]: #111
#115 := [monotonicity #112]: #114
#118 := [monotonicity #115]: #117
#121 := [quant-intro #118]: #120
#51 := [asserted]: #37
#122 := [mp #51 #121]: #119
#194 := [mp #122 #193]: #191
#168 := [mp~ #194 #216]: #191
#242 := [mp #168 #241]: #239
#273 := [mp #242 #272]: #270
#709 := [mp #273 #708]: #704
#8 := 3::Int
#56 := -3::Int
#59 := (f4 f5 -3::Int)
#62 := (f3 #59 3::Int)
#68 := (= #62 -1::Int)
#71 := (not #68)
#12 := 1::Int
#13 := (- 1::Int)
#9 := (- 3::Int)
#10 := (f4 f5 #9)
#11 := (f3 #10 3::Int)
#14 := (= #11 #13)
#15 := (not #14)
#72 := (iff #15 #71)
#69 := (iff #14 #68)
#66 := (= #13 -1::Int)
#67 := [rewrite]: #66
#63 := (= #11 #62)
#60 := (= #10 #59)
#57 := (= #9 -3::Int)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#64 := [monotonicity #61]: #63
#70 := [monotonicity #64 #67]: #69
#73 := [monotonicity #70]: #72
#50 := [asserted]: #15
#74 := [mp #50 #73]: #71
#618 := (not #704)
#628 := (or #618 #68)
#366 := (* -1::Int 3::Int)
#365 := (* -1::Int -3::Int)
#698 := (div #365 #366)
#699 := (* -1::Int #698)
#700 := (+ #62 #699)
#701 := (= #700 0::Int)
#697 := (div -3::Int 3::Int)
#354 := (* -1::Int #697)
#484 := (+ #62 #354)
#691 := (= #484 0::Int)
#378 := (<= 3::Int 0::Int)
#377 := (>= -3::Int 0::Int)
#381 := (or #377 #378)
#360 := (not #381)
#367 := (<= -3::Int 0::Int)
#379 := (or #367 #378)
#380 := (not #379)
#695 := (or #380 #360)
#696 := (if #695 #691 #701)
#376 := (= #62 0::Int)
#374 := (= 3::Int 0::Int)
#290 := (= -3::Int 0::Int)
#375 := (or #290 #374)
#702 := (if #375 #376 #696)
#629 := (or #618 #702)
#626 := (iff #629 #628)
#620 := (iff #628 #628)
#621 := [rewrite]: #620
#619 := (iff #702 #68)
#637 := (if false #376 #68)
#625 := (iff #637 #68)
#627 := [rewrite]: #625
#634 := (iff #702 #637)
#543 := (iff #696 #68)
#1 := true
#539 := (if true #68 #68)
#541 := (iff #539 #68)
#542 := [rewrite]: #541
#532 := (iff #696 #539)
#536 := (iff #701 #68)
#663 := (+ 1::Int #62)
#649 := (= #663 0::Int)
#645 := (iff #649 #68)
#646 := [rewrite]: #645
#636 := (iff #701 #649)
#632 := (= #700 #663)
#661 := (+ #62 1::Int)
#504 := (= #661 #663)
#505 := [rewrite]: #504
#635 := (= #700 #661)
#528 := (= #699 1::Int)
#665 := (* -1::Int -1::Int)
#659 := (= #665 1::Int)
#660 := [rewrite]: #659
#526 := (= #699 #665)
#641 := (= #698 -1::Int)
#486 := (div 3::Int -3::Int)
#642 := (= #486 -1::Int)
#643 := [rewrite]: #642
#639 := (= #698 #486)
#483 := (= #366 -3::Int)
#485 := [rewrite]: #483
#647 := (= #365 3::Int)
#654 := [rewrite]: #647
#640 := [monotonicity #654 #485]: #639
#644 := [trans #640 #643]: #641
#527 := [monotonicity #644]: #526
#487 := [trans #527 #660]: #528
#537 := [monotonicity #487]: #635
#633 := [trans #537 #505]: #632
#521 := [monotonicity #633]: #636
#538 := [trans #521 #646]: #536
#652 := (iff #691 #68)
#650 := (iff #691 #649)
#506 := (= #484 #663)
#662 := (= #484 #661)
#655 := (= #354 1::Int)
#669 := (= #354 #665)
#664 := (= #697 -1::Int)
#668 := [rewrite]: #664
#658 := [monotonicity #668]: #669
#656 := [trans #658 #660]: #655
#657 := [monotonicity #656]: #662
#648 := [trans #657 #505]: #506
#651 := [monotonicity #648]: #650
#653 := [trans #651 #646]: #652
#667 := (iff #695 true)
#385 := (or false true)
#388 := (iff #385 true)
#666 := [rewrite]: #388
#386 := (iff #695 #385)
#671 := (iff #360 true)
#673 := (not false)
#670 := (iff #673 true)
#674 := [rewrite]: #670
#395 := (iff #360 #673)
#296 := (iff #381 false)
#353 := (or false false)
#678 := (iff #353 false)
#341 := [rewrite]: #678
#401 := (iff #381 #353)
#681 := (iff #378 false)
#682 := [rewrite]: #681
#399 := (iff #377 false)
#400 := [rewrite]: #399
#402 := [monotonicity #400 #682]: #401
#672 := [trans #402 #341]: #296
#396 := [monotonicity #672]: #395
#675 := [trans #396 #674]: #671
#676 := (iff #380 false)
#328 := (not true)
#687 := (iff #328 false)
#690 := [rewrite]: #687
#329 := (iff #380 #328)
#686 := (iff #379 true)
#683 := (or true false)
#685 := (iff #683 true)
#323 := [rewrite]: #685
#684 := (iff #379 #683)
#344 := (iff #367 true)
#680 := [rewrite]: #344
#679 := [monotonicity #680 #682]: #684
#688 := [trans #679 #323]: #686
#689 := [monotonicity #688]: #329
#677 := [trans #689 #690]: #676
#387 := [monotonicity #677 #675]: #386
#382 := [trans #387 #666]: #667
#540 := [monotonicity #382 #653 #538]: #532
#544 := [trans #540 #542]: #543
#342 := (iff #375 false)
#694 := (iff #375 #353)
#357 := (iff #374 false)
#693 := [rewrite]: #357
#692 := (iff #290 false)
#352 := [rewrite]: #692
#337 := [monotonicity #352 #693]: #694
#343 := [trans #337 #341]: #342
#638 := [monotonicity #343 #544]: #634
#616 := [trans #638 #627]: #619
#631 := [monotonicity #616]: #626
#622 := [trans #631 #621]: #626
#630 := [quant-inst #56 #8]: #629
#623 := [mp #630 #622]: #628
[unit-resolution #623 #74 #709]: false
ce73a3cbcbb282ad675c6218053260f8ce5ee783 342 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#706 := (pattern #20)
#21 := 0::Int
#102 := -1::Int
#106 := (* -1::Int #19)
#103 := (* -1::Int #17)
#109 := (div #103 #106)
#265 := (* -1::Int #109)
#266 := (+ #20 #265)
#267 := (= #266 0::Int)
#31 := (div #17 #19)
#262 := (* -1::Int #31)
#263 := (+ #20 #262)
#264 := (= #263 0::Int)
#80 := (<= #19 0::Int)
#172 := (>= #17 0::Int)
#225 := (or #172 #80)
#226 := (not #225)
#76 := (<= #17 0::Int)
#221 := (or #76 #80)
#222 := (not #221)
#229 := (or #222 #226)
#268 := (if #229 #264 #267)
#261 := (= #20 0::Int)
#23 := (= #19 0::Int)
#22 := (= #17 0::Int)
#24 := (or #22 #23)
#269 := (if #24 #261 #268)
#707 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #706) #269)
#272 := (forall (vars (?v0 Int) (?v1 Int)) #269)
#710 := (iff #272 #707)
#708 := (iff #269 #269)
#709 := [refl]: #708
#711 := [quant-intro #709]: #710
#232 := (if #229 #31 #109)
#235 := (if #24 0::Int #232)
#238 := (= #20 #235)
#241 := (forall (vars (?v0 Int) (?v1 Int)) #238)
#273 := (iff #241 #272)
#270 := (iff #238 #269)
#271 := [rewrite]: #270
#274 := [quant-intro #271]: #273
#81 := (not #80)
#175 := (not #172)
#178 := (and #175 #81)
#77 := (not #76)
#84 := (and #77 #81)
#181 := (or #84 #178)
#184 := (if #181 #31 #109)
#187 := (if #24 0::Int #184)
#190 := (= #20 #187)
#193 := (forall (vars (?v0 Int) (?v1 Int)) #190)
#242 := (iff #193 #241)
#239 := (iff #190 #238)
#236 := (= #187 #235)
#233 := (= #184 #232)
#230 := (iff #181 #229)
#227 := (iff #178 #226)
#228 := [rewrite]: #227
#223 := (iff #84 #222)
#224 := [rewrite]: #223
#231 := [monotonicity #224 #228]: #230
#234 := [monotonicity #231]: #233
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [quant-intro #240]: #242
#213 := (~ #193 #193)
#215 := (~ #190 #190)
#216 := [refl]: #215
#214 := [nnf-pos #216]: #213
#87 := (<= 0::Int #17)
#88 := (not #87)
#96 := (and #88 #81)
#99 := (or #84 #96)
#112 := (if #99 #31 #109)
#115 := (if #24 0::Int #112)
#118 := (= #20 #115)
#121 := (forall (vars (?v0 Int) (?v1 Int)) #118)
#194 := (iff #121 #193)
#191 := (iff #118 #190)
#188 := (= #115 #187)
#185 := (= #112 #184)
#182 := (iff #99 #181)
#179 := (iff #96 #178)
#176 := (iff #88 #175)
#173 := (iff #87 #172)
#174 := [rewrite]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [monotonicity #186]: #188
#192 := [monotonicity #189]: #191
#195 := [quant-intro #192]: #194
#33 := (- #19)
#32 := (- #17)
#34 := (div #32 #33)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (if #30 #31 #34)
#36 := (if #24 0::Int #35)
#37 := (= #20 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#122 := (iff #38 #121)
#119 := (iff #37 #118)
#116 := (= #36 #115)
#113 := (= #35 #112)
#110 := (= #34 #109)
#107 := (= #33 #106)
#108 := [rewrite]: #107
#104 := (= #32 #103)
#105 := [rewrite]: #104
#111 := [monotonicity #105 #108]: #110
#100 := (iff #30 #99)
#97 := (iff #29 #96)
#82 := (iff #26 #81)
#83 := [rewrite]: #82
#89 := (iff #28 #88)
#93 := (iff #88 #88)
#91 := (iff #87 #87)
#92 := [rewrite]: #91
#94 := [monotonicity #92]: #93
#90 := [rewrite]: #89
#95 := [trans #90 #94]: #89
#98 := [monotonicity #95 #83]: #97
#85 := (iff #27 #84)
#78 := (iff #25 #77)
#79 := [rewrite]: #78
#86 := [monotonicity #79 #83]: #85
#101 := [monotonicity #86 #98]: #100
#114 := [monotonicity #101 #111]: #113
#117 := [monotonicity #114]: #116
#120 := [monotonicity #117]: #119
#123 := [quant-intro #120]: #122
#52 := [asserted]: #38
#124 := [mp #52 #123]: #121
#196 := [mp #124 #195]: #193
#170 := [mp~ #196 #214]: #193
#244 := [mp #170 #243]: #241
#275 := [mp #244 #274]: #272
#712 := [mp #275 #711]: #707
#66 := -2::Int
#11 := 3::Int
#57 := -5::Int
#60 := (f4 f5 -5::Int)
#63 := (f3 #60 3::Int)
#69 := (= #63 -2::Int)
#72 := (not #69)
#13 := 2::Int
#14 := (- 2::Int)
#8 := 5::Int
#9 := (- 5::Int)
#10 := (f4 f5 #9)
#12 := (f3 #10 3::Int)
#15 := (= #12 #14)
#16 := (not #15)
#73 := (iff #16 #72)
#70 := (iff #15 #69)
#67 := (= #14 -2::Int)
#68 := [rewrite]: #67
#64 := (= #12 #63)
#61 := (= #10 #60)
#58 := (= #9 -5::Int)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#65 := [monotonicity #62]: #64
#71 := [monotonicity #65 #68]: #70
#74 := [monotonicity #71]: #73
#51 := [asserted]: #16
#75 := [mp #51 #74]: #72
#611 := (not #707)
#612 := (or #611 #69)
#369 := (* -1::Int 3::Int)
#368 := (* -1::Int -5::Int)
#701 := (div #368 #369)
#702 := (* -1::Int #701)
#703 := (+ #63 #702)
#704 := (= #703 0::Int)
#700 := (div -5::Int 3::Int)
#357 := (* -1::Int #700)
#487 := (+ #63 #357)
#694 := (= #487 0::Int)
#381 := (<= 3::Int 0::Int)
#380 := (>= -5::Int 0::Int)
#384 := (or #380 #381)
#363 := (not #384)
#370 := (<= -5::Int 0::Int)
#382 := (or #370 #381)
#383 := (not #382)
#698 := (or #383 #363)
#699 := (if #698 #694 #704)
#379 := (= #63 0::Int)
#377 := (= 3::Int 0::Int)
#292 := (= -5::Int 0::Int)
#378 := (or #292 #377)
#705 := (if #378 #379 #699)
#614 := (or #611 #705)
#616 := (iff #614 #612)
#613 := (iff #612 #612)
#618 := [rewrite]: #613
#620 := (iff #705 #69)
#634 := (if false #379 #69)
#625 := (iff #634 #69)
#626 := [rewrite]: #625
#623 := (iff #705 #634)
#633 := (iff #699 #69)
#640 := (= #63 -1::Int)
#1 := true
#622 := (if true #69 #640)
#631 := (iff #622 #69)
#632 := [rewrite]: #631
#619 := (iff #699 #622)
#628 := (iff #704 #640)
#310 := 1::Int
#541 := (+ 1::Int #63)
#545 := (= #541 0::Int)
#637 := (iff #545 #640)
#641 := [rewrite]: #637
#546 := (iff #704 #545)
#543 := (= #703 #541)
#639 := (+ #63 1::Int)
#542 := (= #639 #541)
#535 := [rewrite]: #542
#524 := (= #703 #639)
#635 := (= #702 1::Int)
#530 := (* -1::Int -1::Int)
#638 := (= #530 1::Int)
#540 := [rewrite]: #638
#531 := (= #702 #530)
#647 := (= #701 -1::Int)
#486 := -3::Int
#642 := (div 5::Int -3::Int)
#646 := (= #642 -1::Int)
#644 := [rewrite]: #646
#643 := (= #701 #642)
#488 := (= #369 -3::Int)
#489 := [rewrite]: #488
#650 := (= #368 5::Int)
#657 := [rewrite]: #650
#645 := [monotonicity #657 #489]: #643
#529 := [trans #645 #644]: #647
#490 := [monotonicity #529]: #531
#636 := [trans #490 #540]: #635
#539 := [monotonicity #636]: #524
#544 := [trans #539 #535]: #543
#547 := [monotonicity #544]: #546
#630 := [trans #547 #641]: #628
#655 := (iff #694 #69)
#666 := (+ 2::Int #63)
#652 := (= #666 0::Int)
#648 := (iff #652 #69)
#649 := [rewrite]: #648
#653 := (iff #694 #652)
#509 := (= #487 #666)
#664 := (+ #63 2::Int)
#507 := (= #664 #666)
#508 := [rewrite]: #507
#665 := (= #487 #664)
#658 := (= #357 2::Int)
#668 := (* -1::Int -2::Int)
#662 := (= #668 2::Int)
#663 := [rewrite]: #662
#672 := (= #357 #668)
#667 := (= #700 -2::Int)
#671 := [rewrite]: #667
#661 := [monotonicity #671]: #672
#659 := [trans #661 #663]: #658
#660 := [monotonicity #659]: #665
#651 := [trans #660 #508]: #509
#654 := [monotonicity #651]: #653
#656 := [trans #654 #649]: #655
#670 := (iff #698 true)
#388 := (or false true)
#391 := (iff #388 true)
#669 := [rewrite]: #391
#389 := (iff #698 #388)
#674 := (iff #363 true)
#676 := (not false)
#673 := (iff #676 true)
#677 := [rewrite]: #673
#398 := (iff #363 #676)
#298 := (iff #384 false)
#356 := (or false false)
#681 := (iff #356 false)
#344 := [rewrite]: #681
#404 := (iff #384 #356)
#684 := (iff #381 false)
#685 := [rewrite]: #684
#402 := (iff #380 false)
#403 := [rewrite]: #402
#405 := [monotonicity #403 #685]: #404
#675 := [trans #405 #344]: #298
#399 := [monotonicity #675]: #398
#678 := [trans #399 #677]: #674
#679 := (iff #383 false)
#331 := (not true)
#690 := (iff #331 false)
#693 := [rewrite]: #690
#332 := (iff #383 #331)
#689 := (iff #382 true)
#686 := (or true false)
#688 := (iff #686 true)
#326 := [rewrite]: #688
#687 := (iff #382 #686)
#347 := (iff #370 true)
#683 := [rewrite]: #347
#682 := [monotonicity #683 #685]: #687
#691 := [trans #682 #326]: #689
#692 := [monotonicity #691]: #332
#680 := [trans #692 #693]: #679
#390 := [monotonicity #680 #678]: #389
#385 := [trans #390 #669]: #670
#621 := [monotonicity #385 #656 #630]: #619
#629 := [trans #621 #632]: #633
#345 := (iff #378 false)
#697 := (iff #378 #356)
#360 := (iff #377 false)
#696 := [rewrite]: #360
#695 := (iff #292 false)
#355 := [rewrite]: #695
#340 := [monotonicity #355 #696]: #697
#346 := [trans #340 #344]: #345
#624 := [monotonicity #346 #629]: #623
#627 := [trans #624 #626]: #620
#617 := [monotonicity #627]: #616
#604 := [trans #617 #618]: #616
#615 := [quant-inst #57 #11]: #614
#605 := [mp #615 #604]: #612
[unit-resolution #605 #75 #712]: false
b9e2cb2587eedfa83c2fb391ad520d91b8574998 328 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#703 := (pattern #20)
#14 := 0::Int
#56 := -1::Int
#104 := (* -1::Int #19)
#101 := (* -1::Int #17)
#107 := (div #101 #104)
#263 := (* -1::Int #107)
#264 := (+ #20 #263)
#265 := (= #264 0::Int)
#30 := (div #17 #19)
#260 := (* -1::Int #30)
#261 := (+ #20 #260)
#262 := (= #261 0::Int)
#79 := (<= #19 0::Int)
#170 := (>= #17 0::Int)
#223 := (or #170 #79)
#224 := (not #223)
#75 := (<= #17 0::Int)
#219 := (or #75 #79)
#220 := (not #219)
#227 := (or #220 #224)
#266 := (if #227 #262 #265)
#259 := (= #20 0::Int)
#22 := (= #19 0::Int)
#21 := (= #17 0::Int)
#23 := (or #21 #22)
#267 := (if #23 #259 #266)
#704 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #703) #267)
#270 := (forall (vars (?v0 Int) (?v1 Int)) #267)
#707 := (iff #270 #704)
#705 := (iff #267 #267)
#706 := [refl]: #705
#708 := [quant-intro #706]: #707
#230 := (if #227 #30 #107)
#233 := (if #23 0::Int #230)
#236 := (= #20 #233)
#239 := (forall (vars (?v0 Int) (?v1 Int)) #236)
#271 := (iff #239 #270)
#268 := (iff #236 #267)
#269 := [rewrite]: #268
#272 := [quant-intro #269]: #271
#80 := (not #79)
#173 := (not #170)
#176 := (and #173 #80)
#76 := (not #75)
#83 := (and #76 #80)
#179 := (or #83 #176)
#182 := (if #179 #30 #107)
#185 := (if #23 0::Int #182)
#188 := (= #20 #185)
#191 := (forall (vars (?v0 Int) (?v1 Int)) #188)
#240 := (iff #191 #239)
#237 := (iff #188 #236)
#234 := (= #185 #233)
#231 := (= #182 #230)
#228 := (iff #179 #227)
#225 := (iff #176 #224)
#226 := [rewrite]: #225
#221 := (iff #83 #220)
#222 := [rewrite]: #221
#229 := [monotonicity #222 #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [quant-intro #238]: #240
#211 := (~ #191 #191)
#213 := (~ #188 #188)
#214 := [refl]: #213
#212 := [nnf-pos #214]: #211
#86 := (<= 0::Int #17)
#87 := (not #86)
#95 := (and #87 #80)
#98 := (or #83 #95)
#110 := (if #98 #30 #107)
#113 := (if #23 0::Int #110)
#116 := (= #20 #113)
#119 := (forall (vars (?v0 Int) (?v1 Int)) #116)
#192 := (iff #119 #191)
#189 := (iff #116 #188)
#186 := (= #113 #185)
#183 := (= #110 #182)
#180 := (iff #98 #179)
#177 := (iff #95 #176)
#174 := (iff #87 #173)
#171 := (iff #86 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [monotonicity #187]: #189
#193 := [quant-intro #190]: #192
#32 := (- #19)
#31 := (- #17)
#33 := (div #31 #32)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (if #29 #30 #33)
#35 := (if #23 0::Int #34)
#36 := (= #20 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#120 := (iff #37 #119)
#117 := (iff #36 #116)
#114 := (= #35 #113)
#111 := (= #34 #110)
#108 := (= #33 #107)
#105 := (= #32 #104)
#106 := [rewrite]: #105
#102 := (= #31 #101)
#103 := [rewrite]: #102
#109 := [monotonicity #103 #106]: #108
#99 := (iff #29 #98)
#96 := (iff #28 #95)
#81 := (iff #25 #80)
#82 := [rewrite]: #81
#88 := (iff #27 #87)
#92 := (iff #87 #87)
#90 := (iff #86 #86)
#91 := [rewrite]: #90
#93 := [monotonicity #91]: #92
#89 := [rewrite]: #88
#94 := [trans #89 #93]: #88
#97 := [monotonicity #94 #82]: #96
#84 := (iff #26 #83)
#77 := (iff #24 #76)
#78 := [rewrite]: #77
#85 := [monotonicity #78 #82]: #84
#100 := [monotonicity #85 #97]: #99
#112 := [monotonicity #100 #109]: #111
#115 := [monotonicity #112]: #114
#118 := [monotonicity #115]: #117
#121 := [quant-intro #118]: #120
#51 := [asserted]: #37
#122 := [mp #51 #121]: #119
#194 := [mp #122 #193]: #191
#168 := [mp~ #194 #212]: #191
#242 := [mp #168 #241]: #239
#273 := [mp #242 #272]: #270
#709 := [mp #273 #708]: #704
#62 := -3::Int
#59 := (f4 f5 -1::Int)
#65 := (f3 #59 -3::Int)
#68 := (= #65 0::Int)
#71 := (not #68)
#11 := 3::Int
#12 := (- 3::Int)
#8 := 1::Int
#9 := (- 1::Int)
#10 := (f4 f5 #9)
#13 := (f3 #10 #12)
#15 := (= #13 0::Int)
#16 := (not #15)
#72 := (iff #16 #71)
#69 := (iff #15 #68)
#66 := (= #13 #65)
#63 := (= #12 -3::Int)
#64 := [rewrite]: #63
#60 := (= #10 #59)
#57 := (= #9 -1::Int)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#67 := [monotonicity #61 #64]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#50 := [asserted]: #16
#74 := [mp #50 #73]: #71
#628 := (not #704)
#629 := (or #628 #68)
#365 := (* -1::Int -3::Int)
#691 := (* -1::Int -1::Int)
#366 := (div #691 #365)
#698 := (* -1::Int #366)
#699 := (+ #65 #698)
#700 := (= #699 0::Int)
#695 := (div -1::Int -3::Int)
#697 := (* -1::Int #695)
#354 := (+ #65 #697)
#484 := (= #354 0::Int)
#367 := (<= -3::Int 0::Int)
#380 := (>= -1::Int 0::Int)
#377 := (or #380 #367)
#381 := (not #377)
#376 := (<= -1::Int 0::Int)
#378 := (or #376 #367)
#379 := (not #378)
#360 := (or #379 #381)
#701 := (if #360 #484 #700)
#374 := (= -3::Int 0::Int)
#290 := (= -1::Int 0::Int)
#375 := (or #290 #374)
#696 := (if #375 #68 #701)
#630 := (or #628 #696)
#631 := (iff #630 #629)
#621 := (iff #629 #629)
#622 := [rewrite]: #621
#616 := (iff #696 #68)
#634 := (if false #68 #68)
#627 := (iff #634 #68)
#619 := [rewrite]: #627
#638 := (iff #696 #634)
#544 := (iff #701 #68)
#648 := (= #65 1::Int)
#532 := (if false #648 #68)
#542 := (iff #532 #68)
#543 := [rewrite]: #542
#540 := (iff #701 #532)
#538 := (iff #700 #68)
#521 := (= #699 #65)
#635 := (+ #65 0::Int)
#633 := (= #635 #65)
#636 := [rewrite]: #633
#537 := (= #699 #635)
#528 := (= #698 0::Int)
#643 := (* -1::Int 0::Int)
#526 := (= #643 0::Int)
#527 := [rewrite]: #526
#641 := (= #698 #643)
#640 := (= #366 0::Int)
#654 := (div 1::Int 3::Int)
#486 := (= #654 0::Int)
#639 := [rewrite]: #486
#483 := (= #366 #654)
#653 := (= #365 3::Int)
#647 := [rewrite]: #653
#646 := (= #691 1::Int)
#652 := [rewrite]: #646
#485 := [monotonicity #652 #647]: #483
#642 := [trans #485 #639]: #640
#644 := [monotonicity #642]: #641
#487 := [trans #644 #527]: #528
#632 := [monotonicity #487]: #537
#536 := [trans #632 #636]: #521
#539 := [monotonicity #536]: #538
#651 := (iff #484 #648)
#656 := (+ -1::Int #65)
#504 := (= #656 0::Int)
#649 := (iff #504 #648)
#650 := [rewrite]: #649
#505 := (iff #484 #504)
#657 := (= #354 #656)
#659 := (+ #65 -1::Int)
#661 := (= #659 #656)
#662 := [rewrite]: #661
#660 := (= #354 #659)
#669 := (= #697 -1::Int)
#667 := (* -1::Int 1::Int)
#668 := (= #667 -1::Int)
#665 := [rewrite]: #668
#382 := (= #697 #667)
#388 := (= #695 1::Int)
#666 := [rewrite]: #388
#664 := [monotonicity #666]: #382
#658 := [trans #664 #665]: #669
#655 := [monotonicity #658]: #660
#663 := [trans #655 #662]: #657
#506 := [monotonicity #663]: #505
#645 := [trans #506 #650]: #651
#386 := (iff #360 false)
#693 := (or false false)
#337 := (iff #693 false)
#678 := [rewrite]: #337
#675 := (iff #360 #693)
#674 := (iff #381 false)
#1 := true
#688 := (not true)
#689 := (iff #688 false)
#687 := [rewrite]: #689
#396 := (iff #381 #688)
#673 := (iff #377 true)
#400 := (or false true)
#296 := (iff #400 true)
#672 := [rewrite]: #296
#401 := (iff #377 #400)
#680 := (iff #367 true)
#681 := [rewrite]: #680
#677 := (iff #380 false)
#399 := [rewrite]: #677
#402 := [monotonicity #399 #681]: #401
#395 := [trans #402 #672]: #673
#670 := [monotonicity #395]: #396
#671 := [trans #670 #687]: #674
#690 := (iff #379 false)
#328 := (iff #379 #688)
#323 := (iff #378 true)
#682 := (or true true)
#679 := (iff #682 true)
#685 := [rewrite]: #679
#683 := (iff #378 #682)
#343 := (iff #376 true)
#344 := [rewrite]: #343
#684 := [monotonicity #344 #681]: #683
#686 := [trans #684 #685]: #323
#329 := [monotonicity #686]: #328
#676 := [trans #329 #687]: #690
#385 := [monotonicity #676 #671]: #675
#387 := [trans #385 #678]: #386
#541 := [monotonicity #387 #645 #539]: #540
#637 := [trans #541 #543]: #544
#341 := (iff #375 false)
#353 := (iff #375 #693)
#352 := (iff #374 false)
#357 := [rewrite]: #352
#702 := (iff #290 false)
#692 := [rewrite]: #702
#694 := [monotonicity #692 #357]: #353
#342 := [trans #694 #678]: #341
#625 := [monotonicity #342 #637]: #638
#618 := [trans #625 #619]: #616
#620 := [monotonicity #618]: #631
#623 := [trans #620 #622]: #631
#626 := [quant-inst #56 #62]: #630
#617 := [mp #626 #623]: #629
[unit-resolution #617 #74 #709]: false
166dc257eef9fb9bbbf145be894cbe683831674b 312 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#700 := (pattern #18)
#19 := 0::Int
#97 := -1::Int
#101 := (* -1::Int #17)
#98 := (* -1::Int #15)
#104 := (div #98 #101)
#260 := (* -1::Int #104)
#261 := (+ #18 #260)
#262 := (= #261 0::Int)
#29 := (div #15 #17)
#257 := (* -1::Int #29)
#258 := (+ #18 #257)
#259 := (= #258 0::Int)
#75 := (<= #17 0::Int)
#167 := (>= #15 0::Int)
#220 := (or #167 #75)
#221 := (not #220)
#71 := (<= #15 0::Int)
#216 := (or #71 #75)
#217 := (not #216)
#224 := (or #217 #221)
#263 := (if #224 #259 #262)
#256 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #15 0::Int)
#22 := (or #20 #21)
#264 := (if #22 #256 #263)
#701 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #700) #264)
#267 := (forall (vars (?v0 Int) (?v1 Int)) #264)
#704 := (iff #267 #701)
#702 := (iff #264 #264)
#703 := [refl]: #702
#705 := [quant-intro #703]: #704
#227 := (if #224 #29 #104)
#230 := (if #22 0::Int #227)
#233 := (= #18 #230)
#236 := (forall (vars (?v0 Int) (?v1 Int)) #233)
#268 := (iff #236 #267)
#265 := (iff #233 #264)
#266 := [rewrite]: #265
#269 := [quant-intro #266]: #268
#76 := (not #75)
#170 := (not #167)
#173 := (and #170 #76)
#72 := (not #71)
#79 := (and #72 #76)
#176 := (or #79 #173)
#179 := (if #176 #29 #104)
#182 := (if #22 0::Int #179)
#185 := (= #18 #182)
#188 := (forall (vars (?v0 Int) (?v1 Int)) #185)
#237 := (iff #188 #236)
#234 := (iff #185 #233)
#231 := (= #182 #230)
#228 := (= #179 #227)
#225 := (iff #176 #224)
#222 := (iff #173 #221)
#223 := [rewrite]: #222
#218 := (iff #79 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [quant-intro #235]: #237
#210 := (~ #188 #188)
#212 := (~ #185 #185)
#213 := [refl]: #212
#211 := [nnf-pos #213]: #210
#82 := (<= 0::Int #15)
#83 := (not #82)
#91 := (and #83 #76)
#94 := (or #79 #91)
#107 := (if #94 #29 #104)
#110 := (if #22 0::Int #107)
#113 := (= #18 #110)
#116 := (forall (vars (?v0 Int) (?v1 Int)) #113)
#189 := (iff #116 #188)
#186 := (iff #113 #185)
#183 := (= #110 #182)
#180 := (= #107 #179)
#177 := (iff #94 #176)
#174 := (iff #91 #173)
#171 := (iff #83 #170)
#168 := (iff #82 #167)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [quant-intro #187]: #189
#31 := (- #17)
#30 := (- #15)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (if #28 #29 #32)
#34 := (if #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#117 := (iff #36 #116)
#114 := (iff #35 #113)
#111 := (= #34 #110)
#108 := (= #33 #107)
#105 := (= #32 #104)
#102 := (= #31 #101)
#103 := [rewrite]: #102
#99 := (= #30 #98)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #103]: #105
#95 := (iff #28 #94)
#92 := (iff #27 #91)
#77 := (iff #24 #76)
#78 := [rewrite]: #77
#84 := (iff #26 #83)
#88 := (iff #83 #83)
#86 := (iff #82 #82)
#87 := [rewrite]: #86
#89 := [monotonicity #87]: #88
#85 := [rewrite]: #84
#90 := [trans #85 #89]: #84
#93 := [monotonicity #90 #78]: #92
#80 := (iff #25 #79)
#73 := (iff #23 #72)
#74 := [rewrite]: #73
#81 := [monotonicity #74 #78]: #80
#96 := [monotonicity #81 #93]: #95
#109 := [monotonicity #96 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [quant-intro #115]: #117
#50 := [asserted]: #36
#119 := [mp #50 #118]: #116
#191 := [mp #119 #190]: #188
#208 := [mp~ #191 #211]: #188
#239 := [mp #208 #238]: #236
#270 := [mp #239 #269]: #267
#706 := [mp #270 #705]: #701
#12 := 1::Int
#55 := -3::Int
#58 := (f4 f5 -3::Int)
#61 := (f3 #58 -3::Int)
#64 := (= #61 1::Int)
#67 := (not #64)
#8 := 3::Int
#9 := (- 3::Int)
#10 := (f4 f5 #9)
#11 := (f3 #10 #9)
#13 := (= #11 1::Int)
#14 := (not #13)
#68 := (iff #14 #67)
#65 := (iff #13 #64)
#62 := (= #11 #61)
#56 := (= #9 -3::Int)
#57 := [rewrite]: #56
#59 := (= #10 #58)
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60 #57]: #62
#66 := [monotonicity #63]: #65
#69 := [monotonicity #66]: #68
#49 := [asserted]: #14
#70 := [mp #49 #69]: #67
#537 := (not #701)
#538 := (or #537 #64)
#481 := (* -1::Int -3::Int)
#688 := (div #481 #481)
#362 := (* -1::Int #688)
#363 := (+ #61 #362)
#695 := (= #363 0::Int)
#357 := (div -3::Int -3::Int)
#692 := (* -1::Int #357)
#694 := (+ #61 #692)
#351 := (= #694 0::Int)
#373 := (<= -3::Int 0::Int)
#376 := (>= -3::Int 0::Int)
#377 := (or #376 #373)
#374 := (not #377)
#364 := (or #373 #373)
#375 := (not #364)
#378 := (or #375 #374)
#696 := (if #378 #351 #695)
#372 := (= #61 0::Int)
#287 := (= -3::Int 0::Int)
#371 := (or #287 #287)
#697 := (if #371 #372 #696)
#539 := (or #537 #697)
#541 := (iff #539 #538)
#631 := (iff #538 #538)
#635 := [rewrite]: #631
#536 := (iff #697 #64)
#630 := (if false #372 #64)
#533 := (iff #630 #64)
#535 := [rewrite]: #533
#633 := (iff #697 #630)
#534 := (iff #696 #64)
#523 := (if false #64 #64)
#484 := (iff #523 #64)
#632 := [rewrite]: #484
#524 := (iff #696 #523)
#638 := (iff #695 #64)
#662 := (+ -1::Int #61)
#652 := (= #662 0::Int)
#659 := (iff #652 #64)
#654 := [rewrite]: #659
#639 := (iff #695 #652)
#636 := (= #363 #662)
#379 := (+ #61 -1::Int)
#666 := (= #379 #662)
#655 := [rewrite]: #666
#482 := (= #363 #379)
#651 := (= #362 -1::Int)
#672 := (* -1::Int 1::Int)
#384 := (= #672 -1::Int)
#385 := [rewrite]: #384
#650 := (= #362 #672)
#643 := (= #688 1::Int)
#645 := (div 3::Int 3::Int)
#648 := (= #645 1::Int)
#642 := [rewrite]: #648
#646 := (= #688 #645)
#502 := (= #481 3::Int)
#503 := [rewrite]: #502
#647 := [monotonicity #503 #503]: #646
#649 := [trans #647 #642]: #643
#644 := [monotonicity #649]: #650
#480 := [trans #644 #385]: #651
#483 := [monotonicity #480]: #482
#637 := [trans #483 #655]: #636
#640 := [monotonicity #637]: #639
#641 := [trans #640 #654]: #638
#660 := (iff #351 #64)
#653 := (iff #351 #652)
#656 := (= #694 #662)
#661 := (= #694 #379)
#663 := (= #692 -1::Int)
#382 := (= #692 #672)
#671 := (= #357 1::Int)
#668 := [rewrite]: #671
#383 := [monotonicity #668]: #382
#664 := [trans #383 #385]: #663
#665 := [monotonicity #664]: #661
#657 := [trans #665 #655]: #656
#658 := [monotonicity #657]: #653
#501 := [trans #658 #654]: #660
#393 := (iff #378 false)
#699 := (or false false)
#354 := (iff #699 false)
#690 := [rewrite]: #354
#670 := (iff #378 #699)
#293 := (iff #374 false)
#1 := true
#680 := (not true)
#682 := (iff #680 false)
#320 := [rewrite]: #682
#398 := (iff #374 #680)
#396 := (iff #377 true)
#686 := (or false true)
#673 := (iff #686 true)
#674 := [rewrite]: #673
#684 := (iff #377 #686)
#334 := (iff #373 true)
#675 := [rewrite]: #334
#325 := (iff #376 false)
#326 := [rewrite]: #325
#687 := [monotonicity #326 #675]: #684
#397 := [trans #687 #674]: #396
#399 := [monotonicity #397]: #398
#669 := [trans #399 #320]: #293
#683 := (iff #375 false)
#681 := (iff #375 #680)
#678 := (iff #364 true)
#338 := (or true true)
#341 := (iff #338 true)
#677 := [rewrite]: #341
#339 := (iff #364 #338)
#340 := [monotonicity #675 #675]: #339
#679 := [trans #340 #677]: #678
#676 := [monotonicity #679]: #681
#685 := [trans #676 #320]: #683
#392 := [monotonicity #685 #669]: #670
#667 := [trans #392 #690]: #393
#525 := [monotonicity #667 #501 #641]: #524
#629 := [trans #525 #632]: #534
#350 := (iff #371 false)
#689 := (iff #371 #699)
#698 := (iff #287 false)
#693 := [rewrite]: #698
#349 := [monotonicity #693 #693]: #689
#691 := [trans #349 #690]: #350
#518 := [monotonicity #691 #629]: #633
#529 := [trans #518 #535]: #536
#634 := [monotonicity #529]: #541
#622 := [trans #634 #635]: #541
#540 := [quant-inst #55 #55]: #539
#624 := [mp #540 #622]: #538
[unit-resolution #624 #70 #706]: false
ac847d4d96ab393b411eb8572de1bfa41757e40d 339 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#705 := (pattern #20)
#21 := 0::Int
#102 := -1::Int
#106 := (* -1::Int #19)
#103 := (* -1::Int #17)
#109 := (div #103 #106)
#265 := (* -1::Int #109)
#266 := (+ #20 #265)
#267 := (= #266 0::Int)
#31 := (div #17 #19)
#262 := (* -1::Int #31)
#263 := (+ #20 #262)
#264 := (= #263 0::Int)
#80 := (<= #19 0::Int)
#172 := (>= #17 0::Int)
#225 := (or #172 #80)
#226 := (not #225)
#76 := (<= #17 0::Int)
#221 := (or #76 #80)
#222 := (not #221)
#229 := (or #222 #226)
#268 := (if #229 #264 #267)
#261 := (= #20 0::Int)
#23 := (= #19 0::Int)
#22 := (= #17 0::Int)
#24 := (or #22 #23)
#269 := (if #24 #261 #268)
#706 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #705) #269)
#272 := (forall (vars (?v0 Int) (?v1 Int)) #269)
#709 := (iff #272 #706)
#707 := (iff #269 #269)
#708 := [refl]: #707
#710 := [quant-intro #708]: #709
#232 := (if #229 #31 #109)
#235 := (if #24 0::Int #232)
#238 := (= #20 #235)
#241 := (forall (vars (?v0 Int) (?v1 Int)) #238)
#273 := (iff #241 #272)
#270 := (iff #238 #269)
#271 := [rewrite]: #270
#274 := [quant-intro #271]: #273
#81 := (not #80)
#175 := (not #172)
#178 := (and #175 #81)
#77 := (not #76)
#84 := (and #77 #81)
#181 := (or #84 #178)
#184 := (if #181 #31 #109)
#187 := (if #24 0::Int #184)
#190 := (= #20 #187)
#193 := (forall (vars (?v0 Int) (?v1 Int)) #190)
#242 := (iff #193 #241)
#239 := (iff #190 #238)
#236 := (= #187 #235)
#233 := (= #184 #232)
#230 := (iff #181 #229)
#227 := (iff #178 #226)
#228 := [rewrite]: #227
#223 := (iff #84 #222)
#224 := [rewrite]: #223
#231 := [monotonicity #224 #228]: #230
#234 := [monotonicity #231]: #233
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [quant-intro #240]: #242
#213 := (~ #193 #193)
#215 := (~ #190 #190)
#216 := [refl]: #215
#214 := [nnf-pos #216]: #213
#87 := (<= 0::Int #17)
#88 := (not #87)
#96 := (and #88 #81)
#99 := (or #84 #96)
#112 := (if #99 #31 #109)
#115 := (if #24 0::Int #112)
#118 := (= #20 #115)
#121 := (forall (vars (?v0 Int) (?v1 Int)) #118)
#194 := (iff #121 #193)
#191 := (iff #118 #190)
#188 := (= #115 #187)
#185 := (= #112 #184)
#182 := (iff #99 #181)
#179 := (iff #96 #178)
#176 := (iff #88 #175)
#173 := (iff #87 #172)
#174 := [rewrite]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [monotonicity #186]: #188
#192 := [monotonicity #189]: #191
#195 := [quant-intro #192]: #194
#33 := (- #19)
#32 := (- #17)
#34 := (div #32 #33)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (if #30 #31 #34)
#36 := (if #24 0::Int #35)
#37 := (= #20 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#122 := (iff #38 #121)
#119 := (iff #37 #118)
#116 := (= #36 #115)
#113 := (= #35 #112)
#110 := (= #34 #109)
#107 := (= #33 #106)
#108 := [rewrite]: #107
#104 := (= #32 #103)
#105 := [rewrite]: #104
#111 := [monotonicity #105 #108]: #110
#100 := (iff #30 #99)
#97 := (iff #29 #96)
#82 := (iff #26 #81)
#83 := [rewrite]: #82
#89 := (iff #28 #88)
#93 := (iff #88 #88)
#91 := (iff #87 #87)
#92 := [rewrite]: #91
#94 := [monotonicity #92]: #93
#90 := [rewrite]: #89
#95 := [trans #90 #94]: #89
#98 := [monotonicity #95 #83]: #97
#85 := (iff #27 #84)
#78 := (iff #25 #77)
#79 := [rewrite]: #78
#86 := [monotonicity #79 #83]: #85
#101 := [monotonicity #86 #98]: #100
#114 := [monotonicity #101 #111]: #113
#117 := [monotonicity #114]: #116
#120 := [monotonicity #117]: #119
#123 := [quant-intro #120]: #122
#52 := [asserted]: #38
#124 := [mp #52 #123]: #121
#196 := [mp #124 #195]: #193
#170 := [mp~ #196 #214]: #193
#244 := [mp #170 #243]: #241
#275 := [mp #244 #274]: #272
#711 := [mp #275 #710]: #706
#14 := 1::Int
#63 := -3::Int
#57 := -5::Int
#60 := (f4 f5 -5::Int)
#66 := (f3 #60 -3::Int)
#69 := (= #66 1::Int)
#72 := (not #69)
#11 := 3::Int
#12 := (- 3::Int)
#8 := 5::Int
#9 := (- 5::Int)
#10 := (f4 f5 #9)
#13 := (f3 #10 #12)
#15 := (= #13 1::Int)
#16 := (not #15)
#73 := (iff #16 #72)
#70 := (iff #15 #69)
#67 := (= #13 #66)
#64 := (= #12 -3::Int)
#65 := [rewrite]: #64
#61 := (= #10 #60)
#58 := (= #9 -5::Int)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#68 := [monotonicity #62 #65]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#51 := [asserted]: #16
#75 := [mp #51 #74]: #72
#619 := (not #706)
#626 := (or #619 #69)
#368 := (* -1::Int -3::Int)
#367 := (* -1::Int -5::Int)
#700 := (div #367 #368)
#701 := (* -1::Int #700)
#702 := (+ #66 #701)
#703 := (= #702 0::Int)
#699 := (div -5::Int -3::Int)
#356 := (* -1::Int #699)
#486 := (+ #66 #356)
#693 := (= #486 0::Int)
#380 := (<= -3::Int 0::Int)
#379 := (>= -5::Int 0::Int)
#383 := (or #379 #380)
#362 := (not #383)
#369 := (<= -5::Int 0::Int)
#381 := (or #369 #380)
#382 := (not #381)
#697 := (or #382 #362)
#698 := (if #697 #693 #703)
#378 := (= #66 0::Int)
#376 := (= -3::Int 0::Int)
#292 := (= -5::Int 0::Int)
#377 := (or #292 #376)
#704 := (if #377 #378 #698)
#610 := (or #619 #704)
#613 := (iff #610 #626)
#615 := (iff #626 #626)
#616 := [rewrite]: #615
#624 := (iff #704 #69)
#632 := (if false #378 #69)
#622 := (iff #632 #69)
#623 := [rewrite]: #622
#628 := (iff #704 #632)
#630 := (iff #698 #69)
#668 := 2::Int
#653 := (= #66 2::Int)
#627 := (if false #653 #69)
#618 := (iff #627 #69)
#620 := [rewrite]: #618
#629 := (iff #698 #627)
#636 := (iff #703 #69)
#538 := (+ -1::Int #66)
#543 := (= #538 0::Int)
#546 := (iff #543 #69)
#639 := [rewrite]: #546
#544 := (iff #703 #543)
#534 := (= #702 #538)
#635 := (+ #66 -1::Int)
#540 := (= #635 #538)
#541 := [rewrite]: #540
#638 := (= #702 #635)
#539 := (= #701 -1::Int)
#528 := (* -1::Int 1::Int)
#489 := (= #528 -1::Int)
#637 := [rewrite]: #489
#529 := (= #701 #528)
#643 := (= #700 1::Int)
#488 := (div 5::Int 3::Int)
#644 := (= #488 1::Int)
#645 := [rewrite]: #644
#641 := (= #700 #488)
#485 := (= #368 3::Int)
#487 := [rewrite]: #485
#649 := (= #367 5::Int)
#656 := [rewrite]: #649
#642 := [monotonicity #656 #487]: #641
#646 := [trans #642 #645]: #643
#530 := [monotonicity #646]: #529
#634 := [trans #530 #637]: #539
#523 := [monotonicity #634]: #638
#542 := [trans #523 #541]: #534
#545 := [monotonicity #542]: #544
#640 := [trans #545 #639]: #636
#654 := (iff #693 #653)
#671 := -2::Int
#659 := (+ -2::Int #66)
#650 := (= #659 0::Int)
#647 := (iff #650 #653)
#648 := [rewrite]: #647
#651 := (iff #693 #650)
#507 := (= #486 #659)
#658 := (+ #66 -2::Int)
#665 := (= #658 #659)
#506 := [rewrite]: #665
#663 := (= #486 #658)
#662 := (= #356 -2::Int)
#666 := (* -1::Int 2::Int)
#660 := (= #666 -2::Int)
#661 := [rewrite]: #660
#670 := (= #356 #666)
#669 := (= #699 2::Int)
#384 := [rewrite]: #669
#667 := [monotonicity #384]: #670
#657 := [trans #667 #661]: #662
#664 := [monotonicity #657]: #663
#508 := [trans #664 #506]: #507
#652 := [monotonicity #508]: #651
#655 := [trans #652 #648]: #654
#389 := (iff #697 false)
#355 := (or false false)
#680 := (iff #355 false)
#343 := [rewrite]: #680
#387 := (iff #697 #355)
#673 := (iff #362 false)
#1 := true
#330 := (not true)
#689 := (iff #330 false)
#692 := [rewrite]: #689
#672 := (iff #362 #330)
#397 := (iff #383 true)
#403 := (or false true)
#674 := (iff #403 true)
#675 := [rewrite]: #674
#404 := (iff #383 #403)
#683 := (iff #380 true)
#684 := [rewrite]: #683
#401 := (iff #379 false)
#402 := [rewrite]: #401
#298 := [monotonicity #402 #684]: #404
#398 := [trans #298 #675]: #397
#676 := [monotonicity #398]: #672
#677 := [trans #676 #692]: #673
#678 := (iff #382 false)
#331 := (iff #382 #330)
#688 := (iff #381 true)
#685 := (or true true)
#687 := (iff #685 true)
#325 := [rewrite]: #687
#686 := (iff #381 #685)
#346 := (iff #369 true)
#682 := [rewrite]: #346
#681 := [monotonicity #682 #684]: #686
#690 := [trans #681 #325]: #688
#691 := [monotonicity #690]: #331
#679 := [trans #691 #692]: #678
#388 := [monotonicity #679 #677]: #387
#390 := [trans #388 #343]: #389
#621 := [monotonicity #390 #655 #640]: #629
#631 := [trans #621 #620]: #630
#344 := (iff #377 false)
#696 := (iff #377 #355)
#359 := (iff #376 false)
#695 := [rewrite]: #359
#694 := (iff #292 false)
#354 := [rewrite]: #694
#339 := [monotonicity #354 #695]: #696
#345 := [trans #339 #343]: #344
#633 := [monotonicity #345 #631]: #628
#625 := [trans #633 #623]: #624
#614 := [monotonicity #625]: #613
#612 := [trans #614 #616]: #613
#611 := [quant-inst #57 #63]: #610
#617 := [mp #611 #612]: #626
[unit-resolution #617 #75 #711]: false
ce1a28b0de5b74c56978e7de07c2e3640f9fb87f 275 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#35 := (f4 f5 #14)
#36 := (f3 #35 #16)
#689 := (pattern #36)
#8 := 0::Int
#78 := -1::Int
#82 := (* -1::Int #16)
#79 := (* -1::Int #14)
#101 := (mod #79 #82)
#257 := (+ #36 #101)
#258 := (= #257 0::Int)
#37 := (mod #14 #16)
#254 := (* -1::Int #37)
#255 := (+ #36 #254)
#256 := (= #255 0::Int)
#56 := (<= #16 0::Int)
#148 := (>= #14 0::Int)
#201 := (or #148 #56)
#202 := (not #201)
#52 := (<= #14 0::Int)
#197 := (or #52 #56)
#198 := (not #197)
#205 := (or #198 #202)
#259 := (if #205 #256 #258)
#253 := (= #36 0::Int)
#18 := (= #14 0::Int)
#260 := (if #18 #253 #259)
#252 := (= #36 #14)
#19 := (= #16 0::Int)
#261 := (if #19 #252 #260)
#690 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #689) #261)
#264 := (forall (vars (?v0 Int) (?v1 Int)) #261)
#693 := (iff #264 #690)
#691 := (iff #261 #261)
#692 := [refl]: #691
#694 := [quant-intro #692]: #693
#107 := (* -1::Int #101)
#221 := (if #205 #37 #107)
#224 := (if #18 0::Int #221)
#227 := (if #19 #14 #224)
#230 := (= #36 #227)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#265 := (iff #233 #264)
#262 := (iff #230 #261)
#263 := [rewrite]: #262
#266 := [quant-intro #263]: #265
#57 := (not #56)
#151 := (not #148)
#154 := (and #151 #57)
#53 := (not #52)
#60 := (and #53 #57)
#157 := (or #60 #154)
#173 := (if #157 #37 #107)
#176 := (if #18 0::Int #173)
#179 := (if #19 #14 #176)
#182 := (= #36 #179)
#185 := (forall (vars (?v0 Int) (?v1 Int)) #182)
#234 := (iff #185 #233)
#231 := (iff #182 #230)
#228 := (= #179 #227)
#225 := (= #176 #224)
#222 := (= #173 #221)
#206 := (iff #157 #205)
#203 := (iff #154 #202)
#204 := [rewrite]: #203
#199 := (iff #60 #198)
#200 := [rewrite]: #199
#207 := [monotonicity #200 #204]: #206
#223 := [monotonicity #207]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#192 := (~ #185 #185)
#147 := (~ #182 #182)
#191 := [refl]: #147
#195 := [nnf-pos #191]: #192
#63 := (<= 0::Int #14)
#64 := (not #63)
#72 := (and #64 #57)
#75 := (or #60 #72)
#112 := (if #75 #37 #107)
#115 := (if #18 0::Int #112)
#118 := (if #19 #14 #115)
#121 := (= #36 #118)
#124 := (forall (vars (?v0 Int) (?v1 Int)) #121)
#186 := (iff #124 #185)
#183 := (iff #121 #182)
#180 := (= #118 #179)
#177 := (= #115 #176)
#174 := (= #112 #173)
#158 := (iff #75 #157)
#155 := (iff #72 #154)
#152 := (iff #64 #151)
#149 := (iff #63 #148)
#150 := [rewrite]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#175 := [monotonicity #159]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [quant-intro #184]: #186
#29 := (- #16)
#28 := (- #14)
#38 := (mod #28 #29)
#39 := (- #38)
#22 := (< 0::Int #16)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#40 := (if #26 #37 #39)
#41 := (if #18 0::Int #40)
#42 := (if #19 #14 #41)
#43 := (= #36 #42)
#44 := (forall (vars (?v0 Int) (?v1 Int)) #43)
#125 := (iff #44 #124)
#122 := (iff #43 #121)
#119 := (= #42 #118)
#116 := (= #41 #115)
#113 := (= #40 #112)
#110 := (= #39 #107)
#104 := (- #101)
#108 := (= #104 #107)
#109 := [rewrite]: #108
#105 := (= #39 #104)
#102 := (= #38 #101)
#83 := (= #29 #82)
#84 := [rewrite]: #83
#80 := (= #28 #79)
#81 := [rewrite]: #80
#103 := [monotonicity #81 #84]: #102
#106 := [monotonicity #103]: #105
#111 := [trans #106 #109]: #110
#76 := (iff #26 #75)
#73 := (iff #25 #72)
#58 := (iff #22 #57)
#59 := [rewrite]: #58
#65 := (iff #24 #64)
#69 := (iff #64 #64)
#67 := (iff #63 #63)
#68 := [rewrite]: #67
#70 := [monotonicity #68]: #69
#66 := [rewrite]: #65
#71 := [trans #66 #70]: #65
#74 := [monotonicity #71 #59]: #73
#61 := (iff #23 #60)
#54 := (iff #21 #53)
#55 := [rewrite]: #54
#62 := [monotonicity #55 #59]: #61
#77 := [monotonicity #62 #74]: #76
#114 := [monotonicity #77 #111]: #113
#117 := [monotonicity #114]: #116
#120 := [monotonicity #117]: #119
#123 := [monotonicity #120]: #122
#126 := [quant-intro #123]: #125
#48 := [asserted]: #44
#127 := [mp #48 #126]: #124
#188 := [mp #127 #187]: #185
#196 := [mp~ #188 #195]: #185
#236 := [mp #196 #235]: #233
#267 := [mp #236 #266]: #264
#695 := [mp #267 #694]: #690
#9 := (f4 f5 0::Int)
#10 := (f3 #9 0::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#46 := [asserted]: #12
#642 := (not #690)
#483 := (or #642 #11)
#676 := (* -1::Int 0::Int)
#333 := (mod #676 #676)
#463 := (+ #10 #333)
#670 := (= #463 0::Int)
#356 := (mod 0::Int 0::Int)
#360 := (* -1::Int #356)
#339 := (+ #10 #360)
#674 := (= #339 0::Int)
#353 := (<= 0::Int 0::Int)
#346 := (>= 0::Int 0::Int)
#357 := (or #346 #353)
#358 := (not #357)
#354 := (or #353 #353)
#355 := (not #354)
#359 := (or #355 #358)
#344 := (if #359 #674 #670)
#268 := (= 0::Int 0::Int)
#345 := (if #268 #11 #344)
#677 := (if #268 #11 #345)
#484 := (or #642 #677)
#627 := (iff #484 #483)
#629 := (iff #483 #483)
#630 := [rewrite]: #629
#641 := (iff #677 #11)
#1 := true
#638 := (if true #11 #11)
#635 := (iff #638 #11)
#640 := [rewrite]: #635
#639 := (iff #677 #638)
#648 := (iff #345 #11)
#651 := (+ #10 #356)
#375 := (= #651 0::Int)
#646 := (if true #11 #375)
#647 := (iff #646 #11)
#644 := [rewrite]: #647
#361 := (iff #345 #646)
#367 := (iff #344 #375)
#650 := (if false #674 #375)
#365 := (iff #650 #375)
#366 := [rewrite]: #365
#654 := (iff #344 #650)
#649 := (iff #670 #375)
#652 := (= #463 #651)
#381 := (= #333 #356)
#379 := (= #676 0::Int)
#380 := [rewrite]: #379
#274 := [monotonicity #380 #380]: #381
#374 := [monotonicity #274]: #652
#653 := [monotonicity #374]: #649
#656 := (iff #359 false)
#308 := (or false false)
#669 := (iff #308 false)
#655 := [rewrite]: #669
#668 := (iff #359 #308)
#667 := (iff #358 false)
#316 := (not true)
#321 := (iff #316 false)
#322 := [rewrite]: #321
#302 := (iff #358 #316)
#658 := (iff #357 true)
#681 := (or true true)
#336 := (iff #681 true)
#672 := [rewrite]: #336
#662 := (iff #357 #681)
#680 := (iff #353 true)
#675 := [rewrite]: #680
#660 := (iff #346 true)
#661 := [rewrite]: #660
#663 := [monotonicity #661 #675]: #662
#664 := [trans #663 #672]: #658
#665 := [monotonicity #664]: #302
#307 := [trans #665 #322]: #667
#323 := (iff #355 false)
#657 := (iff #355 #316)
#332 := (iff #354 true)
#671 := (iff #354 #681)
#331 := [monotonicity #675 #675]: #671
#673 := [trans #331 #672]: #332
#320 := [monotonicity #673]: #657
#659 := [trans #320 #322]: #323
#666 := [monotonicity #659 #307]: #668
#378 := [trans #666 #655]: #656
#364 := [monotonicity #378 #653]: #654
#645 := [trans #364 #366]: #367
#678 := (iff #268 true)
#679 := [rewrite]: #678
#643 := [monotonicity #679 #645]: #361
#637 := [trans #643 #644]: #648
#634 := [monotonicity #679 #637]: #639
#636 := [trans #634 #640]: #641
#628 := [monotonicity #636]: #627
#624 := [trans #628 #630]: #627
#485 := [quant-inst #8 #8]: #484
#625 := [mp #485 #624]: #483
[unit-resolution #625 #46 #695]: false
01e092dd4a496cce0a16abf4e555c06c4ce61922 279 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#36 := (f4 f5 #15)
#37 := (f3 #36 #17)
#690 := (pattern #37)
#10 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #17)
#80 := (* -1::Int #15)
#102 := (mod #80 #83)
#258 := (+ #37 #102)
#259 := (= #258 0::Int)
#38 := (mod #15 #17)
#255 := (* -1::Int #38)
#256 := (+ #37 #255)
#257 := (= #256 0::Int)
#57 := (<= #17 0::Int)
#149 := (>= #15 0::Int)
#202 := (or #149 #57)
#203 := (not #202)
#53 := (<= #15 0::Int)
#198 := (or #53 #57)
#199 := (not #198)
#206 := (or #199 #203)
#260 := (if #206 #257 #259)
#254 := (= #37 0::Int)
#19 := (= #15 0::Int)
#261 := (if #19 #254 #260)
#253 := (= #37 #15)
#20 := (= #17 0::Int)
#262 := (if #20 #253 #261)
#691 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #690) #262)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#694 := (iff #265 #691)
#692 := (iff #262 #262)
#693 := [refl]: #692
#695 := [quant-intro #693]: #694
#108 := (* -1::Int #102)
#222 := (if #206 #38 #108)
#225 := (if #19 0::Int #222)
#228 := (if #20 #15 #225)
#231 := (= #37 #228)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#266 := (iff #234 #265)
#263 := (iff #231 #262)
#264 := [rewrite]: #263
#267 := [quant-intro #264]: #266
#58 := (not #57)
#152 := (not #149)
#155 := (and #152 #58)
#54 := (not #53)
#61 := (and #54 #58)
#158 := (or #61 #155)
#174 := (if #158 #38 #108)
#177 := (if #19 0::Int #174)
#180 := (if #20 #15 #177)
#183 := (= #37 #180)
#186 := (forall (vars (?v0 Int) (?v1 Int)) #183)
#235 := (iff #186 #234)
#232 := (iff #183 #231)
#229 := (= #180 #228)
#226 := (= #177 #225)
#223 := (= #174 #222)
#207 := (iff #158 #206)
#204 := (iff #155 #203)
#205 := [rewrite]: #204
#200 := (iff #61 #199)
#201 := [rewrite]: #200
#208 := [monotonicity #201 #205]: #207
#224 := [monotonicity #208]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#195 := (~ #186 #186)
#191 := (~ #183 #183)
#194 := [refl]: #191
#196 := [nnf-pos #194]: #195
#64 := (<= 0::Int #15)
#65 := (not #64)
#73 := (and #65 #58)
#76 := (or #61 #73)
#113 := (if #76 #38 #108)
#116 := (if #19 0::Int #113)
#119 := (if #20 #15 #116)
#122 := (= #37 #119)
#125 := (forall (vars (?v0 Int) (?v1 Int)) #122)
#187 := (iff #125 #186)
#184 := (iff #122 #183)
#181 := (= #119 #180)
#178 := (= #116 #177)
#175 := (= #113 #174)
#159 := (iff #76 #158)
#156 := (iff #73 #155)
#153 := (iff #65 #152)
#150 := (iff #64 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#176 := [monotonicity #160]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#30 := (- #17)
#29 := (- #15)
#39 := (mod #29 #30)
#40 := (- #39)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#41 := (if #27 #38 #40)
#42 := (if #19 0::Int #41)
#43 := (if #20 #15 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#126 := (iff #45 #125)
#123 := (iff #44 #122)
#120 := (= #43 #119)
#117 := (= #42 #116)
#114 := (= #41 #113)
#111 := (= #40 #108)
#105 := (- #102)
#109 := (= #105 #108)
#110 := [rewrite]: #109
#106 := (= #40 #105)
#103 := (= #39 #102)
#84 := (= #30 #83)
#85 := [rewrite]: #84
#81 := (= #29 #80)
#82 := [rewrite]: #81
#104 := [monotonicity #82 #85]: #103
#107 := [monotonicity #104]: #106
#112 := [trans #107 #110]: #111
#77 := (iff #27 #76)
#74 := (iff #26 #73)
#59 := (iff #23 #58)
#60 := [rewrite]: #59
#66 := (iff #25 #65)
#70 := (iff #65 #65)
#68 := (iff #64 #64)
#69 := [rewrite]: #68
#71 := [monotonicity #69]: #70
#67 := [rewrite]: #66
#72 := [trans #67 #71]: #66
#75 := [monotonicity #72 #60]: #74
#62 := (iff #24 #61)
#55 := (iff #22 #54)
#56 := [rewrite]: #55
#63 := [monotonicity #56 #60]: #62
#78 := [monotonicity #63 #75]: #77
#115 := [monotonicity #78 #112]: #114
#118 := [monotonicity #115]: #117
#121 := [monotonicity #118]: #120
#124 := [monotonicity #121]: #123
#127 := [quant-intro #124]: #126
#49 := [asserted]: #45
#128 := [mp #49 #127]: #125
#189 := [mp #128 #188]: #186
#197 := [mp~ #189 #196]: #186
#237 := [mp #197 #236]: #234
#268 := [mp #237 #267]: #265
#696 := [mp #268 #695]: #691
decl f6 :: Int
#8 := f6
#9 := (f4 f5 f6)
#11 := (f3 #9 0::Int)
#12 := (= #11 f6)
#13 := (not #12)
#47 := [asserted]: #13
#485 := (not #691)
#486 := (or #485 #12)
#345 := (* -1::Int 0::Int)
#671 := (* -1::Int f6)
#346 := (mod #671 #345)
#678 := (+ #11 #346)
#679 := (= #678 0::Int)
#675 := (mod f6 0::Int)
#677 := (* -1::Int #675)
#334 := (+ #11 #677)
#464 := (= #334 0::Int)
#347 := (<= 0::Int 0::Int)
#360 := (>= f6 0::Int)
#357 := (or #360 #347)
#361 := (not #357)
#356 := (<= f6 0::Int)
#358 := (or #356 #347)
#359 := (not #358)
#340 := (or #359 #361)
#680 := (if #340 #464 #679)
#355 := (= #11 0::Int)
#354 := (= f6 0::Int)
#681 := (if #354 #355 #680)
#269 := (= 0::Int 0::Int)
#676 := (if #269 #12 #681)
#628 := (or #485 #676)
#630 := (iff #628 #486)
#625 := (iff #486 #486)
#626 := [rewrite]: #625
#643 := (iff #676 #12)
#376 := (mod #671 0::Int)
#651 := (+ #11 #376)
#366 := (= #651 0::Int)
#638 := (if #354 #355 #366)
#1 := true
#635 := (if true #12 #638)
#642 := (iff #635 #12)
#637 := [rewrite]: #642
#636 := (iff #676 #635)
#639 := (iff #681 #638)
#645 := (iff #680 #366)
#646 := (if false #464 #366)
#644 := (iff #646 #366)
#648 := [rewrite]: #644
#647 := (iff #680 #646)
#367 := (iff #679 #366)
#655 := (= #678 #651)
#650 := (= #346 #376)
#653 := (= #345 0::Int)
#375 := [rewrite]: #653
#654 := [monotonicity #375]: #650
#365 := [monotonicity #654]: #655
#368 := [monotonicity #365]: #367
#275 := (iff #340 false)
#657 := (or false false)
#381 := (iff #657 false)
#382 := [rewrite]: #381
#379 := (iff #340 #657)
#670 := (iff #361 false)
#323 := (not true)
#661 := (iff #323 false)
#662 := [rewrite]: #661
#669 := (iff #361 #323)
#308 := (iff #357 true)
#659 := (or #360 true)
#666 := (iff #659 true)
#668 := [rewrite]: #666
#665 := (iff #357 #659)
#332 := (iff #347 true)
#337 := [rewrite]: #332
#303 := [monotonicity #337]: #665
#309 := [trans #303 #668]: #308
#667 := [monotonicity #309]: #669
#656 := [trans #667 #662]: #670
#663 := (iff #359 false)
#324 := (iff #359 #323)
#321 := (iff #358 true)
#673 := (or #356 true)
#317 := (iff #673 true)
#658 := [rewrite]: #317
#333 := (iff #358 #673)
#674 := [monotonicity #337]: #333
#322 := [trans #674 #658]: #321
#660 := [monotonicity #322]: #324
#664 := [trans #660 #662]: #663
#380 := [monotonicity #664 #656]: #379
#652 := [trans #380 #382]: #275
#362 := [monotonicity #652 #368]: #647
#649 := [trans #362 #648]: #645
#640 := [monotonicity #649]: #639
#682 := (iff #269 true)
#672 := [rewrite]: #682
#641 := [monotonicity #672 #640]: #636
#484 := [trans #641 #637]: #643
#631 := [monotonicity #484]: #630
#632 := [trans #631 #626]: #630
#629 := [quant-inst #8 #10]: #628
#633 := [mp #629 #632]: #486
[unit-resolution #633 #47 #696]: false
eac86f8245b94dc0d52cdc4d9e88e042a740d116 302 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#36 := (f4 f5 #15)
#37 := (f3 #36 #17)
#689 := (pattern #37)
#8 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #17)
#80 := (* -1::Int #15)
#102 := (mod #80 #83)
#258 := (+ #37 #102)
#259 := (= #258 0::Int)
#38 := (mod #15 #17)
#255 := (* -1::Int #38)
#256 := (+ #37 #255)
#257 := (= #256 0::Int)
#57 := (<= #17 0::Int)
#149 := (>= #15 0::Int)
#202 := (or #149 #57)
#203 := (not #202)
#53 := (<= #15 0::Int)
#198 := (or #53 #57)
#199 := (not #198)
#206 := (or #199 #203)
#260 := (if #206 #257 #259)
#254 := (= #37 0::Int)
#19 := (= #15 0::Int)
#261 := (if #19 #254 #260)
#253 := (= #37 #15)
#20 := (= #17 0::Int)
#262 := (if #20 #253 #261)
#690 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #689) #262)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#693 := (iff #265 #690)
#691 := (iff #262 #262)
#692 := [refl]: #691
#694 := [quant-intro #692]: #693
#108 := (* -1::Int #102)
#222 := (if #206 #38 #108)
#225 := (if #19 0::Int #222)
#228 := (if #20 #15 #225)
#231 := (= #37 #228)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#266 := (iff #234 #265)
#263 := (iff #231 #262)
#264 := [rewrite]: #263
#267 := [quant-intro #264]: #266
#58 := (not #57)
#152 := (not #149)
#155 := (and #152 #58)
#54 := (not #53)
#61 := (and #54 #58)
#158 := (or #61 #155)
#174 := (if #158 #38 #108)
#177 := (if #19 0::Int #174)
#180 := (if #20 #15 #177)
#183 := (= #37 #180)
#186 := (forall (vars (?v0 Int) (?v1 Int)) #183)
#235 := (iff #186 #234)
#232 := (iff #183 #231)
#229 := (= #180 #228)
#226 := (= #177 #225)
#223 := (= #174 #222)
#207 := (iff #158 #206)
#204 := (iff #155 #203)
#205 := [rewrite]: #204
#200 := (iff #61 #199)
#201 := [rewrite]: #200
#208 := [monotonicity #201 #205]: #207
#224 := [monotonicity #208]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#193 := (~ #186 #186)
#148 := (~ #183 #183)
#192 := [refl]: #148
#196 := [nnf-pos #192]: #193
#64 := (<= 0::Int #15)
#65 := (not #64)
#73 := (and #65 #58)
#76 := (or #61 #73)
#113 := (if #76 #38 #108)
#116 := (if #19 0::Int #113)
#119 := (if #20 #15 #116)
#122 := (= #37 #119)
#125 := (forall (vars (?v0 Int) (?v1 Int)) #122)
#187 := (iff #125 #186)
#184 := (iff #122 #183)
#181 := (= #119 #180)
#178 := (= #116 #177)
#175 := (= #113 #174)
#159 := (iff #76 #158)
#156 := (iff #73 #155)
#153 := (iff #65 #152)
#150 := (iff #64 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#176 := [monotonicity #160]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#30 := (- #17)
#29 := (- #15)
#39 := (mod #29 #30)
#40 := (- #39)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#41 := (if #27 #38 #40)
#42 := (if #19 0::Int #41)
#43 := (if #20 #15 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#126 := (iff #45 #125)
#123 := (iff #44 #122)
#120 := (= #43 #119)
#117 := (= #42 #116)
#114 := (= #41 #113)
#111 := (= #40 #108)
#105 := (- #102)
#109 := (= #105 #108)
#110 := [rewrite]: #109
#106 := (= #40 #105)
#103 := (= #39 #102)
#84 := (= #30 #83)
#85 := [rewrite]: #84
#81 := (= #29 #80)
#82 := [rewrite]: #81
#104 := [monotonicity #82 #85]: #103
#107 := [monotonicity #104]: #106
#112 := [trans #107 #110]: #111
#77 := (iff #27 #76)
#74 := (iff #26 #73)
#59 := (iff #23 #58)
#60 := [rewrite]: #59
#66 := (iff #25 #65)
#70 := (iff #65 #65)
#68 := (iff #64 #64)
#69 := [rewrite]: #68
#71 := [monotonicity #69]: #70
#67 := [rewrite]: #66
#72 := [trans #67 #71]: #66
#75 := [monotonicity #72 #60]: #74
#62 := (iff #24 #61)
#55 := (iff #22 #54)
#56 := [rewrite]: #55
#63 := [monotonicity #56 #60]: #62
#78 := [monotonicity #63 #75]: #77
#115 := [monotonicity #78 #112]: #114
#118 := [monotonicity #115]: #117
#121 := [monotonicity #118]: #120
#124 := [monotonicity #121]: #123
#127 := [quant-intro #124]: #126
#49 := [asserted]: #45
#128 := [mp #49 #127]: #125
#189 := [mp #128 #188]: #186
#197 := [mp~ #189 #196]: #186
#237 := [mp #197 #236]: #234
#268 := [mp #237 #267]: #265
#695 := [mp #268 #694]: #690
#10 := 1::Int
#9 := (f4 f5 0::Int)
#11 := (f3 #9 1::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#47 := [asserted]: #13
#466 := (not #690)
#614 := (or #466 #12)
#670 := (* -1::Int 1::Int)
#463 := (* -1::Int 0::Int)
#344 := (mod #463 #670)
#345 := (+ #11 #344)
#677 := (= #345 0::Int)
#339 := (mod 0::Int 1::Int)
#674 := (* -1::Int #339)
#676 := (+ #11 #674)
#333 := (= #676 0::Int)
#355 := (<= 1::Int 0::Int)
#358 := (>= 0::Int 0::Int)
#359 := (or #358 #355)
#356 := (not #359)
#354 := (<= 0::Int 0::Int)
#346 := (or #354 #355)
#357 := (not #346)
#360 := (or #357 #356)
#678 := (if #360 #333 #677)
#353 := (= 0::Int 0::Int)
#679 := (if #353 #12 #678)
#269 := (= 1::Int 0::Int)
#680 := (if #269 #12 #679)
#516 := (or #466 #680)
#612 := (iff #516 #614)
#500 := (iff #614 #614)
#515 := [rewrite]: #500
#506 := (iff #680 #12)
#624 := (if false #12 #12)
#632 := (iff #624 #12)
#626 := [rewrite]: #632
#623 := (iff #680 #624)
#622 := (iff #679 #12)
#1 := true
#464 := (if true #12 #12)
#619 := (iff #464 #12)
#621 := [rewrite]: #619
#465 := (iff #679 #464)
#633 := (iff #678 #12)
#625 := (iff #678 #624)
#629 := (iff #677 #12)
#627 := (= #345 #11)
#367 := (+ #11 0::Int)
#361 := (= #367 #11)
#643 := [rewrite]: #361
#484 := (= #345 #367)
#642 := (= #344 0::Int)
#634 := (mod 0::Int -1::Int)
#641 := (= #634 0::Int)
#636 := [rewrite]: #641
#635 := (= #344 #634)
#638 := (= #670 -1::Int)
#639 := [rewrite]: #638
#654 := (= #463 0::Int)
#364 := [rewrite]: #654
#640 := [monotonicity #364 #639]: #635
#483 := [trans #640 #636]: #642
#485 := [monotonicity #483]: #484
#628 := [trans #485 #643]: #627
#630 := [monotonicity #628]: #629
#648 := (iff #333 #12)
#647 := (= #676 #11)
#645 := (= #676 #367)
#365 := (= #674 0::Int)
#653 := (= #674 #463)
#375 := (= #339 0::Int)
#649 := [rewrite]: #375
#650 := [monotonicity #649]: #653
#366 := [trans #650 #364]: #365
#646 := [monotonicity #366]: #645
#644 := [trans #646 #643]: #647
#637 := [monotonicity #644]: #648
#652 := (iff #360 false)
#379 := (or false false)
#275 := (iff #379 false)
#651 := [rewrite]: #275
#380 := (iff #360 #379)
#656 := (iff #356 false)
#660 := (not true)
#663 := (iff #660 false)
#658 := [rewrite]: #663
#669 := (iff #356 #660)
#668 := (iff #359 true)
#316 := (or true false)
#321 := (iff #316 true)
#322 := [rewrite]: #321
#307 := (iff #359 #316)
#332 := (iff #355 false)
#673 := [rewrite]: #332
#665 := (iff #358 true)
#667 := [rewrite]: #665
#308 := [monotonicity #667 #673]: #307
#666 := [trans #308 #322]: #668
#655 := [monotonicity #666]: #669
#378 := [trans #655 #658]: #656
#664 := (iff #357 false)
#661 := (iff #357 #660)
#323 := (iff #346 true)
#657 := (iff #346 #316)
#336 := (iff #354 true)
#672 := [rewrite]: #336
#320 := [monotonicity #672 #673]: #657
#659 := [trans #320 #322]: #323
#662 := [monotonicity #659]: #661
#302 := [trans #662 #658]: #664
#381 := [monotonicity #302 #378]: #380
#374 := [trans #381 #651]: #652
#631 := [monotonicity #374 #637 #630]: #625
#462 := [trans #631 #626]: #633
#671 := (iff #353 true)
#331 := [rewrite]: #671
#618 := [monotonicity #331 #462]: #465
#620 := [trans #618 #621]: #622
#675 := (iff #269 false)
#681 := [rewrite]: #675
#505 := [monotonicity #681 #620]: #623
#507 := [trans #505 #626]: #506
#615 := [monotonicity #507]: #612
#517 := [trans #615 #515]: #612
#611 := [quant-inst #8 #10]: #516
#518 := [mp #611 #517]: #614
[unit-resolution #518 #47 #695]: false
b328a65166639bc9762c0041f148bc92847217f4 303 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#36 := (f4 f5 #15)
#37 := (f3 #36 #17)
#689 := (pattern #37)
#11 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #17)
#80 := (* -1::Int #15)
#102 := (mod #80 #83)
#258 := (+ #37 #102)
#259 := (= #258 0::Int)
#38 := (mod #15 #17)
#255 := (* -1::Int #38)
#256 := (+ #37 #255)
#257 := (= #256 0::Int)
#57 := (<= #17 0::Int)
#149 := (>= #15 0::Int)
#202 := (or #149 #57)
#203 := (not #202)
#53 := (<= #15 0::Int)
#198 := (or #53 #57)
#199 := (not #198)
#206 := (or #199 #203)
#260 := (if #206 #257 #259)
#254 := (= #37 0::Int)
#19 := (= #15 0::Int)
#261 := (if #19 #254 #260)
#253 := (= #37 #15)
#20 := (= #17 0::Int)
#262 := (if #20 #253 #261)
#690 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #689) #262)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#693 := (iff #265 #690)
#691 := (iff #262 #262)
#692 := [refl]: #691
#694 := [quant-intro #692]: #693
#108 := (* -1::Int #102)
#222 := (if #206 #38 #108)
#225 := (if #19 0::Int #222)
#228 := (if #20 #15 #225)
#231 := (= #37 #228)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#266 := (iff #234 #265)
#263 := (iff #231 #262)
#264 := [rewrite]: #263
#267 := [quant-intro #264]: #266
#58 := (not #57)
#152 := (not #149)
#155 := (and #152 #58)
#54 := (not #53)
#61 := (and #54 #58)
#158 := (or #61 #155)
#174 := (if #158 #38 #108)
#177 := (if #19 0::Int #174)
#180 := (if #20 #15 #177)
#183 := (= #37 #180)
#186 := (forall (vars (?v0 Int) (?v1 Int)) #183)
#235 := (iff #186 #234)
#232 := (iff #183 #231)
#229 := (= #180 #228)
#226 := (= #177 #225)
#223 := (= #174 #222)
#207 := (iff #158 #206)
#204 := (iff #155 #203)
#205 := [rewrite]: #204
#200 := (iff #61 #199)
#201 := [rewrite]: #200
#208 := [monotonicity #201 #205]: #207
#224 := [monotonicity #208]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#193 := (~ #186 #186)
#148 := (~ #183 #183)
#192 := [refl]: #148
#196 := [nnf-pos #192]: #193
#64 := (<= 0::Int #15)
#65 := (not #64)
#73 := (and #65 #58)
#76 := (or #61 #73)
#113 := (if #76 #38 #108)
#116 := (if #19 0::Int #113)
#119 := (if #20 #15 #116)
#122 := (= #37 #119)
#125 := (forall (vars (?v0 Int) (?v1 Int)) #122)
#187 := (iff #125 #186)
#184 := (iff #122 #183)
#181 := (= #119 #180)
#178 := (= #116 #177)
#175 := (= #113 #174)
#159 := (iff #76 #158)
#156 := (iff #73 #155)
#153 := (iff #65 #152)
#150 := (iff #64 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#176 := [monotonicity #160]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#30 := (- #17)
#29 := (- #15)
#39 := (mod #29 #30)
#40 := (- #39)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#41 := (if #27 #38 #40)
#42 := (if #19 0::Int #41)
#43 := (if #20 #15 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#126 := (iff #45 #125)
#123 := (iff #44 #122)
#120 := (= #43 #119)
#117 := (= #42 #116)
#114 := (= #41 #113)
#111 := (= #40 #108)
#105 := (- #102)
#109 := (= #105 #108)
#110 := [rewrite]: #109
#106 := (= #40 #105)
#103 := (= #39 #102)
#84 := (= #30 #83)
#85 := [rewrite]: #84
#81 := (= #29 #80)
#82 := [rewrite]: #81
#104 := [monotonicity #82 #85]: #103
#107 := [monotonicity #104]: #106
#112 := [trans #107 #110]: #111
#77 := (iff #27 #76)
#74 := (iff #26 #73)
#59 := (iff #23 #58)
#60 := [rewrite]: #59
#66 := (iff #25 #65)
#70 := (iff #65 #65)
#68 := (iff #64 #64)
#69 := [rewrite]: #68
#71 := [monotonicity #69]: #70
#67 := [rewrite]: #66
#72 := [trans #67 #71]: #66
#75 := [monotonicity #72 #60]: #74
#62 := (iff #24 #61)
#55 := (iff #22 #54)
#56 := [rewrite]: #55
#63 := [monotonicity #56 #60]: #62
#78 := [monotonicity #63 #75]: #77
#115 := [monotonicity #78 #112]: #114
#118 := [monotonicity #115]: #117
#121 := [monotonicity #118]: #120
#124 := [monotonicity #121]: #123
#127 := [quant-intro #124]: #126
#49 := [asserted]: #45
#128 := [mp #49 #127]: #125
#189 := [mp #128 #188]: #186
#197 := [mp~ #189 #196]: #186
#237 := [mp #197 #236]: #234
#268 := [mp #237 #267]: #265
#695 := [mp #268 #694]: #690
#8 := 1::Int
#9 := (f4 f5 1::Int)
#10 := (f3 #9 1::Int)
#12 := (= #10 0::Int)
#13 := (not #12)
#47 := [asserted]: #13
#614 := (not #690)
#516 := (or #614 #12)
#333 := (* -1::Int 1::Int)
#463 := (mod #333 #333)
#670 := (+ #10 #463)
#344 := (= #670 0::Int)
#360 := (mod 1::Int 1::Int)
#339 := (* -1::Int #360)
#674 := (+ #10 #339)
#676 := (= #674 0::Int)
#354 := (<= 1::Int 0::Int)
#357 := (>= 1::Int 0::Int)
#358 := (or #357 #354)
#359 := (not #358)
#355 := (or #354 #354)
#346 := (not #355)
#356 := (or #346 #359)
#345 := (if #356 #676 #344)
#269 := (= 1::Int 0::Int)
#677 := (if #269 #12 #345)
#353 := (= #10 1::Int)
#678 := (if #269 #353 #677)
#611 := (or #614 #678)
#615 := (iff #611 #516)
#515 := (iff #516 #516)
#517 := [rewrite]: #515
#507 := (iff #678 #12)
#622 := (if false #353 #12)
#505 := (iff #622 #12)
#506 := [rewrite]: #505
#620 := (iff #678 #622)
#619 := (iff #677 #12)
#633 := (if false #12 #12)
#465 := (iff #633 #12)
#618 := [rewrite]: #465
#462 := (iff #677 #633)
#632 := (iff #345 #12)
#1 := true
#629 := (if true #12 #12)
#625 := (iff #629 #12)
#631 := [rewrite]: #625
#630 := (iff #345 #629)
#627 := (iff #344 #12)
#484 := (= #670 #10)
#365 := (+ #10 0::Int)
#645 := (= #365 #10)
#646 := [rewrite]: #645
#642 := (= #670 #365)
#641 := (= #463 0::Int)
#638 := (mod -1::Int -1::Int)
#635 := (= #638 0::Int)
#640 := [rewrite]: #635
#639 := (= #463 #638)
#648 := (= #333 -1::Int)
#637 := [rewrite]: #648
#634 := [monotonicity #637 #637]: #639
#636 := [trans #634 #640]: #641
#483 := [monotonicity #636]: #642
#485 := [trans #483 #646]: #484
#628 := [monotonicity #485]: #627
#647 := (iff #676 #12)
#361 := (= #674 #10)
#366 := (= #674 #365)
#654 := (= #339 0::Int)
#374 := (* -1::Int 0::Int)
#653 := (= #374 0::Int)
#650 := [rewrite]: #653
#375 := (= #339 #374)
#651 := (= #360 0::Int)
#652 := [rewrite]: #651
#649 := [monotonicity #652]: #375
#364 := [trans #649 #650]: #654
#367 := [monotonicity #364]: #366
#643 := [trans #367 #646]: #361
#644 := [monotonicity #643]: #647
#381 := (iff #356 true)
#663 := (or true false)
#302 := (iff #663 true)
#665 := [rewrite]: #302
#379 := (iff #356 #663)
#656 := (iff #359 false)
#308 := (not true)
#669 := (iff #308 false)
#655 := [rewrite]: #669
#668 := (iff #359 #308)
#667 := (iff #358 true)
#658 := (iff #358 #663)
#675 := (iff #354 false)
#681 := [rewrite]: #675
#661 := (iff #357 true)
#662 := [rewrite]: #661
#664 := [monotonicity #662 #681]: #658
#307 := [trans #664 #665]: #667
#666 := [monotonicity #307]: #668
#378 := [trans #666 #655]: #656
#659 := (iff #346 true)
#657 := (not false)
#322 := (iff #657 true)
#323 := [rewrite]: #322
#320 := (iff #346 #657)
#673 := (iff #355 false)
#671 := (or false false)
#672 := (iff #671 false)
#332 := [rewrite]: #672
#331 := (iff #355 #671)
#336 := [monotonicity #681 #681]: #331
#316 := [trans #336 #332]: #673
#321 := [monotonicity #316]: #320
#660 := [trans #321 #323]: #659
#380 := [monotonicity #660 #378]: #379
#275 := [trans #380 #665]: #381
#624 := [monotonicity #275 #644 #628]: #630
#626 := [trans #624 #631]: #632
#679 := (iff #269 false)
#680 := [rewrite]: #679
#464 := [monotonicity #680 #626]: #462
#621 := [trans #464 #618]: #619
#623 := [monotonicity #680 #621]: #620
#466 := [trans #623 #506]: #507
#500 := [monotonicity #466]: #615
#518 := [trans #500 #517]: #615
#612 := [quant-inst #8 #8]: #611
#511 := [mp #612 #518]: #516
[unit-resolution #511 #47 #695]: false
c12283e59631fb6e4322b03bf5696f9cba81cc99 314 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#690 := (pattern #38)
#12 := 0::Int
#80 := -1::Int
#84 := (* -1::Int #18)
#81 := (* -1::Int #16)
#103 := (mod #81 #84)
#259 := (+ #38 #103)
#260 := (= #259 0::Int)
#39 := (mod #16 #18)
#256 := (* -1::Int #39)
#257 := (+ #38 #256)
#258 := (= #257 0::Int)
#58 := (<= #18 0::Int)
#150 := (>= #16 0::Int)
#203 := (or #150 #58)
#204 := (not #203)
#54 := (<= #16 0::Int)
#199 := (or #54 #58)
#200 := (not #199)
#207 := (or #200 #204)
#261 := (if #207 #258 #260)
#255 := (= #38 0::Int)
#20 := (= #16 0::Int)
#262 := (if #20 #255 #261)
#254 := (= #38 #16)
#21 := (= #18 0::Int)
#263 := (if #21 #254 #262)
#691 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #690) #263)
#266 := (forall (vars (?v0 Int) (?v1 Int)) #263)
#694 := (iff #266 #691)
#692 := (iff #263 #263)
#693 := [refl]: #692
#695 := [quant-intro #693]: #694
#109 := (* -1::Int #103)
#223 := (if #207 #39 #109)
#226 := (if #20 0::Int #223)
#229 := (if #21 #16 #226)
#232 := (= #38 #229)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#59 := (not #58)
#153 := (not #150)
#156 := (and #153 #59)
#55 := (not #54)
#62 := (and #55 #59)
#159 := (or #62 #156)
#175 := (if #159 #39 #109)
#178 := (if #20 0::Int #175)
#181 := (if #21 #16 #178)
#184 := (= #38 #181)
#187 := (forall (vars (?v0 Int) (?v1 Int)) #184)
#236 := (iff #187 #235)
#233 := (iff #184 #232)
#230 := (= #181 #229)
#227 := (= #178 #226)
#224 := (= #175 #223)
#208 := (iff #159 #207)
#205 := (iff #156 #204)
#206 := [rewrite]: #205
#201 := (iff #62 #200)
#202 := [rewrite]: #201
#209 := [monotonicity #202 #206]: #208
#225 := [monotonicity #209]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#149 := (~ #187 #187)
#194 := (~ #184 #184)
#148 := [refl]: #194
#197 := [nnf-pos #148]: #149
#65 := (<= 0::Int #16)
#66 := (not #65)
#74 := (and #66 #59)
#77 := (or #62 #74)
#114 := (if #77 #39 #109)
#117 := (if #20 0::Int #114)
#120 := (if #21 #16 #117)
#123 := (= #38 #120)
#126 := (forall (vars (?v0 Int) (?v1 Int)) #123)
#188 := (iff #126 #187)
#185 := (iff #123 #184)
#182 := (= #120 #181)
#179 := (= #117 #178)
#176 := (= #114 #175)
#160 := (iff #77 #159)
#157 := (iff #74 #156)
#154 := (iff #66 #153)
#151 := (iff #65 #150)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#177 := [monotonicity #161]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [quant-intro #186]: #188
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#127 := (iff #46 #126)
#124 := (iff #45 #123)
#121 := (= #44 #120)
#118 := (= #43 #117)
#115 := (= #42 #114)
#112 := (= #41 #109)
#106 := (- #103)
#110 := (= #106 #109)
#111 := [rewrite]: #110
#107 := (= #41 #106)
#104 := (= #40 #103)
#85 := (= #31 #84)
#86 := [rewrite]: #85
#82 := (= #30 #81)
#83 := [rewrite]: #82
#105 := [monotonicity #83 #86]: #104
#108 := [monotonicity #105]: #107
#113 := [trans #108 #111]: #112
#78 := (iff #28 #77)
#75 := (iff #27 #74)
#60 := (iff #24 #59)
#61 := [rewrite]: #60
#67 := (iff #26 #66)
#71 := (iff #66 #66)
#69 := (iff #65 #65)
#70 := [rewrite]: #69
#72 := [monotonicity #70]: #71
#68 := [rewrite]: #67
#73 := [trans #68 #72]: #67
#76 := [monotonicity #73 #61]: #75
#63 := (iff #25 #62)
#56 := (iff #23 #55)
#57 := [rewrite]: #56
#64 := [monotonicity #57 #61]: #63
#79 := [monotonicity #64 #76]: #78
#116 := [monotonicity #79 #113]: #115
#119 := [monotonicity #116]: #118
#122 := [monotonicity #119]: #121
#125 := [monotonicity #122]: #124
#128 := [quant-intro #125]: #127
#50 := [asserted]: #46
#129 := [mp #50 #128]: #126
#190 := [mp #129 #189]: #187
#198 := [mp~ #190 #197]: #187
#238 := [mp #198 #237]: #235
#269 := [mp #238 #268]: #266
#696 := [mp #269 #695]: #691
#10 := 1::Int
#8 := 3::Int
#9 := (f4 f5 3::Int)
#11 := (f3 #9 1::Int)
#13 := (= #11 0::Int)
#14 := (not #13)
#48 := [asserted]: #14
#520 := (not #691)
#521 := (or #520 #13)
#345 := (* -1::Int 1::Int)
#671 := (* -1::Int 3::Int)
#346 := (mod #671 #345)
#678 := (+ #11 #346)
#679 := (= #678 0::Int)
#675 := (mod 3::Int 1::Int)
#677 := (* -1::Int #675)
#334 := (+ #11 #677)
#464 := (= #334 0::Int)
#347 := (<= 1::Int 0::Int)
#360 := (>= 3::Int 0::Int)
#357 := (or #360 #347)
#361 := (not #357)
#356 := (<= 3::Int 0::Int)
#358 := (or #356 #347)
#359 := (not #358)
#340 := (or #359 #361)
#680 := (if #340 #464 #679)
#355 := (= 3::Int 0::Int)
#681 := (if #355 #13 #680)
#354 := (= #11 3::Int)
#270 := (= 1::Int 0::Int)
#676 := (if #270 #354 #681)
#522 := (or #520 #676)
#524 := (iff #522 #521)
#614 := (iff #521 #521)
#618 := [rewrite]: #614
#519 := (iff #676 #13)
#613 := (if false #354 #13)
#516 := (iff #613 #13)
#518 := [rewrite]: #516
#616 := (iff #676 #613)
#517 := (iff #681 #13)
#506 := (if false #13 #13)
#467 := (iff #506 #13)
#615 := [rewrite]: #467
#507 := (iff #681 #506)
#621 := (iff #680 #13)
#1 := true
#466 := (if true #13 #13)
#622 := (iff #466 #13)
#623 := [rewrite]: #622
#619 := (iff #680 #466)
#463 := (iff #679 #13)
#627 := (= #678 #11)
#648 := (+ #11 0::Int)
#638 := (= #648 #11)
#639 := [rewrite]: #638
#632 := (= #678 #648)
#625 := (= #346 0::Int)
#642 := -3::Int
#486 := (mod -3::Int -1::Int)
#630 := (= #486 0::Int)
#631 := [rewrite]: #630
#628 := (= #346 #486)
#484 := (= #345 -1::Int)
#485 := [rewrite]: #484
#637 := (= #671 -3::Int)
#643 := [rewrite]: #637
#629 := [monotonicity #643 #485]: #628
#626 := [trans #629 #631]: #625
#633 := [monotonicity #626]: #632
#634 := [trans #633 #639]: #627
#465 := [monotonicity #634]: #463
#636 := (iff #464 #13)
#640 := (= #334 #11)
#645 := (= #334 #648)
#362 := (= #677 0::Int)
#366 := (* -1::Int 0::Int)
#646 := (= #366 0::Int)
#647 := [rewrite]: #646
#367 := (= #677 #366)
#655 := (= #675 0::Int)
#365 := [rewrite]: #655
#368 := [monotonicity #365]: #367
#644 := [trans #368 #647]: #362
#649 := [monotonicity #644]: #645
#635 := [trans #649 #639]: #640
#641 := [monotonicity #635]: #636
#654 := (iff #340 true)
#309 := (or true false)
#670 := (iff #309 true)
#656 := [rewrite]: #670
#376 := (iff #340 #309)
#653 := (iff #361 false)
#380 := (not true)
#276 := (iff #380 false)
#652 := [rewrite]: #276
#381 := (iff #361 #380)
#657 := (iff #357 true)
#669 := (iff #357 #309)
#674 := (iff #347 false)
#317 := [rewrite]: #674
#668 := (iff #360 true)
#308 := [rewrite]: #668
#667 := [monotonicity #308 #317]: #669
#379 := [trans #667 #656]: #657
#382 := [monotonicity #379]: #381
#375 := [trans #382 #652]: #653
#303 := (iff #359 true)
#662 := (not false)
#659 := (iff #662 true)
#665 := [rewrite]: #659
#663 := (iff #359 #662)
#660 := (iff #358 false)
#658 := (or false false)
#323 := (iff #658 false)
#324 := [rewrite]: #323
#321 := (iff #358 #658)
#673 := (iff #356 false)
#333 := [rewrite]: #673
#322 := [monotonicity #333 #317]: #321
#661 := [trans #322 #324]: #660
#664 := [monotonicity #661]: #663
#666 := [trans #664 #665]: #303
#650 := [monotonicity #666 #375]: #376
#651 := [trans #650 #656]: #654
#620 := [monotonicity #651 #641 #465]: #619
#624 := [trans #620 #623]: #621
#332 := (iff #355 false)
#337 := [rewrite]: #332
#508 := [monotonicity #337 #624]: #507
#612 := [trans #508 #615]: #517
#682 := (iff #270 false)
#672 := [rewrite]: #682
#501 := [monotonicity #672 #612]: #616
#512 := [trans #501 #518]: #519
#617 := [monotonicity #512]: #524
#605 := [trans #617 #618]: #524
#523 := [quant-inst #8 #10]: #522
#607 := [mp #523 #605]: #521
[unit-resolution #607 #48 #696]: false
13a0ef36b0a684e9e6fa65ca4317572de1110ac0 310 0
unsat
#2 := false
#12 := 0::Int
decl f6 :: Int
#8 := f6
#360 := (>= f6 0::Int)
#666 := (not #360)
#356 := (<= f6 0::Int)
#323 := (not #356)
#309 := (or #323 #666)
#621 := (not #309)
#80 := -1::Int
#671 := (* -1::Int f6)
#646 := (mod #671 -1::Int)
decl f3 :: (-> S2 Int Int)
#10 := 1::Int
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#9 := (f4 f5 f6)
#11 := (f3 #9 1::Int)
#644 := (+ #11 #646)
#649 := (= #644 0::Int)
#13 := (= #11 0::Int)
#640 := (if #309 #13 #649)
#355 := (= f6 0::Int)
#641 := (if #355 #13 #640)
#18 := (:var 0 Int)
#16 := (:var 1 Int)
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#690 := (pattern #38)
#84 := (* -1::Int #18)
#81 := (* -1::Int #16)
#103 := (mod #81 #84)
#259 := (+ #38 #103)
#260 := (= #259 0::Int)
#39 := (mod #16 #18)
#256 := (* -1::Int #39)
#257 := (+ #38 #256)
#258 := (= #257 0::Int)
#58 := (<= #18 0::Int)
#150 := (>= #16 0::Int)
#203 := (or #150 #58)
#204 := (not #203)
#54 := (<= #16 0::Int)
#199 := (or #54 #58)
#200 := (not #199)
#207 := (or #200 #204)
#261 := (if #207 #258 #260)
#255 := (= #38 0::Int)
#20 := (= #16 0::Int)
#262 := (if #20 #255 #261)
#254 := (= #38 #16)
#21 := (= #18 0::Int)
#263 := (if #21 #254 #262)
#691 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #690) #263)
#266 := (forall (vars (?v0 Int) (?v1 Int)) #263)
#694 := (iff #266 #691)
#692 := (iff #263 #263)
#693 := [refl]: #692
#695 := [quant-intro #693]: #694
#109 := (* -1::Int #103)
#223 := (if #207 #39 #109)
#226 := (if #20 0::Int #223)
#229 := (if #21 #16 #226)
#232 := (= #38 #229)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#59 := (not #58)
#153 := (not #150)
#156 := (and #153 #59)
#55 := (not #54)
#62 := (and #55 #59)
#159 := (or #62 #156)
#175 := (if #159 #39 #109)
#178 := (if #20 0::Int #175)
#181 := (if #21 #16 #178)
#184 := (= #38 #181)
#187 := (forall (vars (?v0 Int) (?v1 Int)) #184)
#236 := (iff #187 #235)
#233 := (iff #184 #232)
#230 := (= #181 #229)
#227 := (= #178 #226)
#224 := (= #175 #223)
#208 := (iff #159 #207)
#205 := (iff #156 #204)
#206 := [rewrite]: #205
#201 := (iff #62 #200)
#202 := [rewrite]: #201
#209 := [monotonicity #202 #206]: #208
#225 := [monotonicity #209]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#149 := (~ #187 #187)
#192 := (~ #184 #184)
#148 := [refl]: #192
#197 := [nnf-pos #148]: #149
#65 := (<= 0::Int #16)
#66 := (not #65)
#74 := (and #66 #59)
#77 := (or #62 #74)
#114 := (if #77 #39 #109)
#117 := (if #20 0::Int #114)
#120 := (if #21 #16 #117)
#123 := (= #38 #120)
#126 := (forall (vars (?v0 Int) (?v1 Int)) #123)
#188 := (iff #126 #187)
#185 := (iff #123 #184)
#182 := (= #120 #181)
#179 := (= #117 #178)
#176 := (= #114 #175)
#160 := (iff #77 #159)
#157 := (iff #74 #156)
#154 := (iff #66 #153)
#151 := (iff #65 #150)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#177 := [monotonicity #161]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [quant-intro #186]: #188
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#127 := (iff #46 #126)
#124 := (iff #45 #123)
#121 := (= #44 #120)
#118 := (= #43 #117)
#115 := (= #42 #114)
#112 := (= #41 #109)
#106 := (- #103)
#110 := (= #106 #109)
#111 := [rewrite]: #110
#107 := (= #41 #106)
#104 := (= #40 #103)
#85 := (= #31 #84)
#86 := [rewrite]: #85
#82 := (= #30 #81)
#83 := [rewrite]: #82
#105 := [monotonicity #83 #86]: #104
#108 := [monotonicity #105]: #107
#113 := [trans #108 #111]: #112
#78 := (iff #28 #77)
#75 := (iff #27 #74)
#60 := (iff #24 #59)
#61 := [rewrite]: #60
#67 := (iff #26 #66)
#71 := (iff #66 #66)
#69 := (iff #65 #65)
#70 := [rewrite]: #69
#72 := [monotonicity #70]: #71
#68 := [rewrite]: #67
#73 := [trans #68 #72]: #67
#76 := [monotonicity #73 #61]: #75
#63 := (iff #25 #62)
#56 := (iff #23 #55)
#57 := [rewrite]: #56
#64 := [monotonicity #57 #61]: #63
#79 := [monotonicity #64 #76]: #78
#116 := [monotonicity #79 #113]: #115
#119 := [monotonicity #116]: #118
#122 := [monotonicity #119]: #121
#125 := [monotonicity #122]: #124
#128 := [quant-intro #125]: #127
#50 := [asserted]: #46
#129 := [mp #50 #128]: #126
#190 := [mp #129 #189]: #187
#198 := [mp~ #190 #197]: #187
#238 := [mp #198 #237]: #235
#269 := [mp #238 #268]: #266
#696 := [mp #269 #695]: #691
#631 := (not #691)
#625 := (or #631 #641)
#345 := (* -1::Int 1::Int)
#346 := (mod #671 #345)
#678 := (+ #11 #346)
#679 := (= #678 0::Int)
#675 := (mod f6 1::Int)
#677 := (* -1::Int #675)
#334 := (+ #11 #677)
#464 := (= #334 0::Int)
#347 := (<= 1::Int 0::Int)
#357 := (or #360 #347)
#361 := (not #357)
#358 := (or #356 #347)
#359 := (not #358)
#340 := (or #359 #361)
#680 := (if #340 #464 #679)
#681 := (if #355 #13 #680)
#354 := (= #11 f6)
#270 := (= 1::Int 0::Int)
#676 := (if #270 #354 #681)
#626 := (or #631 #676)
#633 := (iff #626 #625)
#634 := (iff #625 #625)
#463 := [rewrite]: #634
#629 := (iff #676 #641)
#643 := (if false #354 #641)
#486 := (iff #643 #641)
#628 := [rewrite]: #486
#484 := (iff #676 #643)
#642 := (iff #681 #641)
#635 := (iff #680 #640)
#638 := (iff #679 #649)
#648 := (= #678 #644)
#647 := (= #346 #646)
#367 := (= #345 -1::Int)
#368 := [rewrite]: #367
#362 := [monotonicity #368]: #647
#645 := [monotonicity #362]: #648
#639 := [monotonicity #645]: #638
#365 := (iff #464 #13)
#651 := (= #334 #11)
#653 := (+ #11 0::Int)
#650 := (= #653 #11)
#654 := [rewrite]: #650
#375 := (= #334 #653)
#276 := (= #677 0::Int)
#657 := (* -1::Int 0::Int)
#381 := (= #657 0::Int)
#382 := [rewrite]: #381
#379 := (= #677 #657)
#670 := (= #675 0::Int)
#656 := [rewrite]: #670
#380 := [monotonicity #656]: #379
#652 := [trans #380 #382]: #276
#376 := [monotonicity #652]: #375
#655 := [trans #376 #654]: #651
#366 := [monotonicity #655]: #365
#669 := (iff #340 #309)
#668 := (iff #361 #666)
#665 := (iff #357 #360)
#661 := (or #360 false)
#664 := (iff #661 #360)
#659 := [rewrite]: #664
#662 := (iff #357 #661)
#332 := (iff #347 false)
#337 := [rewrite]: #332
#663 := [monotonicity #337]: #662
#303 := [trans #663 #659]: #665
#308 := [monotonicity #303]: #668
#324 := (iff #359 #323)
#321 := (iff #358 #356)
#673 := (or #356 false)
#317 := (iff #673 #356)
#658 := [rewrite]: #317
#333 := (iff #358 #673)
#674 := [monotonicity #337]: #333
#322 := [trans #674 #658]: #321
#660 := [monotonicity #322]: #324
#667 := [monotonicity #660 #308]: #669
#636 := [monotonicity #667 #366 #639]: #635
#637 := [monotonicity #636]: #642
#682 := (iff #270 false)
#672 := [rewrite]: #682
#485 := [monotonicity #672 #637]: #484
#630 := [trans #485 #628]: #629
#627 := [monotonicity #630]: #633
#465 := [trans #627 #463]: #633
#632 := [quant-inst #8 #10]: #626
#466 := [mp #632 #465]: #625
#563 := [unit-resolution #466 #696]: #641
#520 := (not #355)
#512 := (not #641)
#564 := (or #512 #520)
#14 := (not #13)
#48 := [asserted]: #14
#521 := (or #512 #520 #13)
#522 := [def-axiom]: #521
#565 := [unit-resolution #522 #48]: #564
#560 := [unit-resolution #565 #563]: #520
#523 := (or #512 #355 #640)
#524 := [def-axiom]: #523
#566 := [unit-resolution #524 #560 #563]: #640
#467 := (not #640)
#552 := (or #467 #621)
#615 := (or #467 #621 #13)
#517 := [def-axiom]: #615
#548 := [unit-resolution #517 #48]: #552
#549 := [unit-resolution #548 #566]: #621
#622 := (or #309 #360)
#623 := [def-axiom]: #622
#550 := [unit-resolution #623 #549]: #360
#619 := (or #309 #356)
#620 := [def-axiom]: #619
#553 := [unit-resolution #620 #549]: #356
#554 := (or #355 #323 #666)
#555 := [th-lemma arith triangle-eq]: #554
[unit-resolution #555 #560 #553 #550]: false
1408c1de56e4c2eda00e3072d30651f219cea591 315 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#702 := (pattern #38)
#8 := 0::Int
#54 := -1::Int
#96 := (* -1::Int #18)
#93 := (* -1::Int #16)
#115 := (mod #93 #96)
#271 := (+ #38 #115)
#272 := (= #271 0::Int)
#39 := (mod #16 #18)
#268 := (* -1::Int #39)
#269 := (+ #38 #268)
#270 := (= #269 0::Int)
#71 := (<= #18 0::Int)
#162 := (>= #16 0::Int)
#215 := (or #162 #71)
#216 := (not #215)
#67 := (<= #16 0::Int)
#211 := (or #67 #71)
#212 := (not #211)
#219 := (or #212 #216)
#273 := (if #219 #270 #272)
#267 := (= #38 0::Int)
#20 := (= #16 0::Int)
#274 := (if #20 #267 #273)
#266 := (= #38 #16)
#21 := (= #18 0::Int)
#275 := (if #21 #266 #274)
#703 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #702) #275)
#278 := (forall (vars (?v0 Int) (?v1 Int)) #275)
#706 := (iff #278 #703)
#704 := (iff #275 #275)
#705 := [refl]: #704
#707 := [quant-intro #705]: #706
#121 := (* -1::Int #115)
#235 := (if #219 #39 #121)
#238 := (if #20 0::Int #235)
#241 := (if #21 #16 #238)
#244 := (= #38 #241)
#247 := (forall (vars (?v0 Int) (?v1 Int)) #244)
#279 := (iff #247 #278)
#276 := (iff #244 #275)
#277 := [rewrite]: #276
#280 := [quant-intro #277]: #279
#72 := (not #71)
#165 := (not #162)
#168 := (and #165 #72)
#68 := (not #67)
#75 := (and #68 #72)
#171 := (or #75 #168)
#187 := (if #171 #39 #121)
#190 := (if #20 0::Int #187)
#193 := (if #21 #16 #190)
#196 := (= #38 #193)
#199 := (forall (vars (?v0 Int) (?v1 Int)) #196)
#248 := (iff #199 #247)
#245 := (iff #196 #244)
#242 := (= #193 #241)
#239 := (= #190 #238)
#236 := (= #187 #235)
#220 := (iff #171 #219)
#217 := (iff #168 #216)
#218 := [rewrite]: #217
#213 := (iff #75 #212)
#214 := [rewrite]: #213
#221 := [monotonicity #214 #218]: #220
#237 := [monotonicity #221]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#208 := (~ #199 #199)
#204 := (~ #196 #196)
#207 := [refl]: #204
#209 := [nnf-pos #207]: #208
#78 := (<= 0::Int #16)
#79 := (not #78)
#87 := (and #79 #72)
#90 := (or #75 #87)
#126 := (if #90 #39 #121)
#129 := (if #20 0::Int #126)
#132 := (if #21 #16 #129)
#135 := (= #38 #132)
#138 := (forall (vars (?v0 Int) (?v1 Int)) #135)
#200 := (iff #138 #199)
#197 := (iff #135 #196)
#194 := (= #132 #193)
#191 := (= #129 #190)
#188 := (= #126 #187)
#172 := (iff #90 #171)
#169 := (iff #87 #168)
#166 := (iff #79 #165)
#163 := (iff #78 #162)
#164 := [rewrite]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#189 := [monotonicity #173]: #188
#192 := [monotonicity #189]: #191
#195 := [monotonicity #192]: #194
#198 := [monotonicity #195]: #197
#201 := [quant-intro #198]: #200
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#139 := (iff #46 #138)
#136 := (iff #45 #135)
#133 := (= #44 #132)
#130 := (= #43 #129)
#127 := (= #42 #126)
#124 := (= #41 #121)
#118 := (- #115)
#122 := (= #118 #121)
#123 := [rewrite]: #122
#119 := (= #41 #118)
#116 := (= #40 #115)
#97 := (= #31 #96)
#98 := [rewrite]: #97
#94 := (= #30 #93)
#95 := [rewrite]: #94
#117 := [monotonicity #95 #98]: #116
#120 := [monotonicity #117]: #119
#125 := [trans #120 #123]: #124
#91 := (iff #28 #90)
#88 := (iff #27 #87)
#73 := (iff #24 #72)
#74 := [rewrite]: #73
#80 := (iff #26 #79)
#84 := (iff #79 #79)
#82 := (iff #78 #78)
#83 := [rewrite]: #82
#85 := [monotonicity #83]: #84
#81 := [rewrite]: #80
#86 := [trans #81 #85]: #80
#89 := [monotonicity #86 #74]: #88
#76 := (iff #25 #75)
#69 := (iff #23 #68)
#70 := [rewrite]: #69
#77 := [monotonicity #70 #74]: #76
#92 := [monotonicity #77 #89]: #91
#128 := [monotonicity #92 #125]: #127
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#137 := [monotonicity #134]: #136
#140 := [quant-intro #137]: #139
#50 := [asserted]: #46
#141 := [mp #50 #140]: #138
#202 := [mp #141 #201]: #199
#210 := [mp~ #202 #209]: #199
#250 := [mp #210 #249]: #247
#281 := [mp #250 #280]: #278
#708 := [mp #281 #707]: #703
#9 := (f4 f5 0::Int)
#57 := (f3 #9 -1::Int)
#60 := (= #57 0::Int)
#63 := (not #60)
#10 := 1::Int
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#13 := (= #12 0::Int)
#14 := (not #13)
#64 := (iff #14 #63)
#61 := (iff #13 #60)
#58 := (= #12 #57)
#55 := (= #11 -1::Int)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59]: #61
#65 := [monotonicity #62]: #64
#48 := [asserted]: #14
#66 := [mp #48 #65]: #63
#479 := (not #703)
#627 := (or #479 #60)
#683 := (* -1::Int -1::Int)
#476 := (* -1::Int 0::Int)
#357 := (mod #476 #683)
#358 := (+ #57 #357)
#690 := (= #358 0::Int)
#352 := (mod 0::Int -1::Int)
#687 := (* -1::Int #352)
#689 := (+ #57 #687)
#346 := (= #689 0::Int)
#368 := (<= -1::Int 0::Int)
#371 := (>= 0::Int 0::Int)
#372 := (or #371 #368)
#369 := (not #372)
#367 := (<= 0::Int 0::Int)
#359 := (or #367 #368)
#370 := (not #359)
#373 := (or #370 #369)
#691 := (if #373 #346 #690)
#366 := (= 0::Int 0::Int)
#692 := (if #366 #60 #691)
#282 := (= -1::Int 0::Int)
#693 := (if #282 #60 #692)
#529 := (or #479 #693)
#625 := (iff #529 #627)
#513 := (iff #627 #627)
#528 := [rewrite]: #513
#519 := (iff #693 #60)
#637 := (if false #60 #60)
#645 := (iff #637 #60)
#639 := [rewrite]: #645
#636 := (iff #693 #637)
#635 := (iff #692 #60)
#1 := true
#477 := (if true #60 #60)
#632 := (iff #477 #60)
#634 := [rewrite]: #632
#478 := (iff #692 #477)
#646 := (iff #691 #60)
#638 := (iff #691 #637)
#642 := (iff #690 #60)
#640 := (= #358 #57)
#380 := (+ #57 0::Int)
#374 := (= #380 #57)
#656 := [rewrite]: #374
#497 := (= #358 #380)
#655 := (= #357 0::Int)
#647 := (mod 0::Int 1::Int)
#654 := (= #647 0::Int)
#649 := [rewrite]: #654
#648 := (= #357 #647)
#651 := (= #683 1::Int)
#652 := [rewrite]: #651
#667 := (= #476 0::Int)
#377 := [rewrite]: #667
#653 := [monotonicity #377 #652]: #648
#496 := [trans #653 #649]: #655
#498 := [monotonicity #496]: #497
#641 := [trans #498 #656]: #640
#643 := [monotonicity #641]: #642
#661 := (iff #346 #60)
#660 := (= #689 #57)
#658 := (= #689 #380)
#378 := (= #687 0::Int)
#666 := (= #687 #476)
#388 := (= #352 0::Int)
#662 := [rewrite]: #388
#663 := [monotonicity #662]: #666
#379 := [trans #663 #377]: #378
#659 := [monotonicity #379]: #658
#657 := [trans #659 #656]: #660
#650 := [monotonicity #657]: #661
#665 := (iff #373 false)
#392 := (or false false)
#288 := (iff #392 false)
#664 := [rewrite]: #288
#393 := (iff #373 #392)
#669 := (iff #369 false)
#673 := (not true)
#676 := (iff #673 false)
#671 := [rewrite]: #676
#682 := (iff #369 #673)
#681 := (iff #372 true)
#329 := (or true true)
#334 := (iff #329 true)
#335 := [rewrite]: #334
#320 := (iff #372 #329)
#345 := (iff #368 true)
#686 := [rewrite]: #345
#678 := (iff #371 true)
#680 := [rewrite]: #678
#321 := [monotonicity #680 #686]: #320
#679 := [trans #321 #335]: #681
#668 := [monotonicity #679]: #682
#391 := [trans #668 #671]: #669
#677 := (iff #370 false)
#674 := (iff #370 #673)
#336 := (iff #359 true)
#670 := (iff #359 #329)
#349 := (iff #367 true)
#685 := [rewrite]: #349
#333 := [monotonicity #685 #686]: #670
#672 := [trans #333 #335]: #336
#675 := [monotonicity #672]: #674
#315 := [trans #675 #671]: #677
#394 := [monotonicity #315 #391]: #393
#387 := [trans #394 #664]: #665
#644 := [monotonicity #387 #650 #643]: #638
#475 := [trans #644 #639]: #646
#684 := (iff #366 true)
#344 := [rewrite]: #684
#631 := [monotonicity #344 #475]: #478
#633 := [trans #631 #634]: #635
#688 := (iff #282 false)
#694 := [rewrite]: #688
#518 := [monotonicity #694 #633]: #636
#520 := [trans #518 #639]: #519
#628 := [monotonicity #520]: #625
#530 := [trans #628 #528]: #625
#624 := [quant-inst #8 #54]: #529
#531 := [mp #624 #530]: #627
[unit-resolution #531 #66 #708]: false
d3eb3a34e82f6e4956530fdf12a1b5f1a3da5b8d 322 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#702 := (pattern #38)
#12 := 0::Int
#54 := -1::Int
#96 := (* -1::Int #18)
#93 := (* -1::Int #16)
#115 := (mod #93 #96)
#271 := (+ #38 #115)
#272 := (= #271 0::Int)
#39 := (mod #16 #18)
#268 := (* -1::Int #39)
#269 := (+ #38 #268)
#270 := (= #269 0::Int)
#71 := (<= #18 0::Int)
#162 := (>= #16 0::Int)
#215 := (or #162 #71)
#216 := (not #215)
#67 := (<= #16 0::Int)
#211 := (or #67 #71)
#212 := (not #211)
#219 := (or #212 #216)
#273 := (if #219 #270 #272)
#267 := (= #38 0::Int)
#20 := (= #16 0::Int)
#274 := (if #20 #267 #273)
#266 := (= #38 #16)
#21 := (= #18 0::Int)
#275 := (if #21 #266 #274)
#703 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #702) #275)
#278 := (forall (vars (?v0 Int) (?v1 Int)) #275)
#706 := (iff #278 #703)
#704 := (iff #275 #275)
#705 := [refl]: #704
#707 := [quant-intro #705]: #706
#121 := (* -1::Int #115)
#235 := (if #219 #39 #121)
#238 := (if #20 0::Int #235)
#241 := (if #21 #16 #238)
#244 := (= #38 #241)
#247 := (forall (vars (?v0 Int) (?v1 Int)) #244)
#279 := (iff #247 #278)
#276 := (iff #244 #275)
#277 := [rewrite]: #276
#280 := [quant-intro #277]: #279
#72 := (not #71)
#165 := (not #162)
#168 := (and #165 #72)
#68 := (not #67)
#75 := (and #68 #72)
#171 := (or #75 #168)
#187 := (if #171 #39 #121)
#190 := (if #20 0::Int #187)
#193 := (if #21 #16 #190)
#196 := (= #38 #193)
#199 := (forall (vars (?v0 Int) (?v1 Int)) #196)
#248 := (iff #199 #247)
#245 := (iff #196 #244)
#242 := (= #193 #241)
#239 := (= #190 #238)
#236 := (= #187 #235)
#220 := (iff #171 #219)
#217 := (iff #168 #216)
#218 := [rewrite]: #217
#213 := (iff #75 #212)
#214 := [rewrite]: #213
#221 := [monotonicity #214 #218]: #220
#237 := [monotonicity #221]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#208 := (~ #199 #199)
#204 := (~ #196 #196)
#207 := [refl]: #204
#209 := [nnf-pos #207]: #208
#78 := (<= 0::Int #16)
#79 := (not #78)
#87 := (and #79 #72)
#90 := (or #75 #87)
#126 := (if #90 #39 #121)
#129 := (if #20 0::Int #126)
#132 := (if #21 #16 #129)
#135 := (= #38 #132)
#138 := (forall (vars (?v0 Int) (?v1 Int)) #135)
#200 := (iff #138 #199)
#197 := (iff #135 #196)
#194 := (= #132 #193)
#191 := (= #129 #190)
#188 := (= #126 #187)
#172 := (iff #90 #171)
#169 := (iff #87 #168)
#166 := (iff #79 #165)
#163 := (iff #78 #162)
#164 := [rewrite]: #163
#167 := [monotonicity #164]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#189 := [monotonicity #173]: #188
#192 := [monotonicity #189]: #191
#195 := [monotonicity #192]: #194
#198 := [monotonicity #195]: #197
#201 := [quant-intro #198]: #200
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#139 := (iff #46 #138)
#136 := (iff #45 #135)
#133 := (= #44 #132)
#130 := (= #43 #129)
#127 := (= #42 #126)
#124 := (= #41 #121)
#118 := (- #115)
#122 := (= #118 #121)
#123 := [rewrite]: #122
#119 := (= #41 #118)
#116 := (= #40 #115)
#97 := (= #31 #96)
#98 := [rewrite]: #97
#94 := (= #30 #93)
#95 := [rewrite]: #94
#117 := [monotonicity #95 #98]: #116
#120 := [monotonicity #117]: #119
#125 := [trans #120 #123]: #124
#91 := (iff #28 #90)
#88 := (iff #27 #87)
#73 := (iff #24 #72)
#74 := [rewrite]: #73
#80 := (iff #26 #79)
#84 := (iff #79 #79)
#82 := (iff #78 #78)
#83 := [rewrite]: #82
#85 := [monotonicity #83]: #84
#81 := [rewrite]: #80
#86 := [trans #81 #85]: #80
#89 := [monotonicity #86 #74]: #88
#76 := (iff #25 #75)
#69 := (iff #23 #68)
#70 := [rewrite]: #69
#77 := [monotonicity #70 #74]: #76
#92 := [monotonicity #77 #89]: #91
#128 := [monotonicity #92 #125]: #127
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#137 := [monotonicity #134]: #136
#140 := [quant-intro #137]: #139
#50 := [asserted]: #46
#141 := [mp #50 #140]: #138
#202 := [mp #141 #201]: #199
#210 := [mp~ #202 #209]: #199
#250 := [mp #210 #249]: #247
#281 := [mp #250 #280]: #278
#708 := [mp #281 #707]: #703
#8 := 1::Int
#9 := (f4 f5 1::Int)
#57 := (f3 #9 -1::Int)
#60 := (= #57 0::Int)
#63 := (not #60)
#10 := (- 1::Int)
#11 := (f3 #9 #10)
#13 := (= #11 0::Int)
#14 := (not #13)
#64 := (iff #14 #63)
#61 := (iff #13 #60)
#58 := (= #11 #57)
#55 := (= #10 -1::Int)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59]: #61
#65 := [monotonicity #62]: #64
#48 := [asserted]: #14
#66 := [mp #48 #65]: #63
#528 := (not #703)
#530 := (or #528 #60)
#357 := (* -1::Int -1::Int)
#683 := (* -1::Int 1::Int)
#358 := (mod #683 #357)
#690 := (+ #57 #358)
#691 := (= #690 0::Int)
#687 := (mod 1::Int -1::Int)
#689 := (* -1::Int #687)
#346 := (+ #57 #689)
#476 := (= #346 0::Int)
#359 := (<= -1::Int 0::Int)
#372 := (>= 1::Int 0::Int)
#369 := (or #372 #359)
#373 := (not #369)
#368 := (<= 1::Int 0::Int)
#370 := (or #368 #359)
#371 := (not #370)
#352 := (or #371 #373)
#692 := (if #352 #476 #691)
#367 := (= 1::Int 0::Int)
#693 := (if #367 #60 #692)
#366 := (= #57 1::Int)
#282 := (= -1::Int 0::Int)
#688 := (if #282 #366 #693)
#531 := (or #528 #688)
#532 := (iff #531 #530)
#534 := (iff #530 #530)
#535 := [rewrite]: #534
#628 := (iff #688 #60)
#479 := (if false #366 #60)
#624 := (iff #479 #60)
#625 := [rewrite]: #624
#627 := (iff #688 #479)
#519 := (iff #693 #60)
#477 := (if false #60 #60)
#632 := (iff #477 #60)
#634 := [rewrite]: #632
#636 := (iff #693 #477)
#635 := (iff #692 #60)
#478 := (iff #692 #477)
#646 := (iff #691 #60)
#645 := (= #690 #57)
#660 := (+ #57 0::Int)
#650 := (= #660 #57)
#651 := [rewrite]: #650
#638 := (= #690 #660)
#643 := (= #358 0::Int)
#497 := (mod -1::Int 1::Int)
#641 := (= #497 0::Int)
#642 := [rewrite]: #641
#498 := (= #358 #497)
#655 := (= #357 1::Int)
#496 := [rewrite]: #655
#654 := (= #683 -1::Int)
#649 := [rewrite]: #654
#640 := [monotonicity #649 #496]: #498
#637 := [trans #640 #642]: #643
#644 := [monotonicity #637]: #638
#639 := [trans #644 #651]: #645
#475 := [monotonicity #639]: #646
#648 := (iff #476 #60)
#652 := (= #346 #57)
#657 := (= #346 #660)
#374 := (= #689 0::Int)
#378 := (* -1::Int 0::Int)
#658 := (= #378 0::Int)
#659 := [rewrite]: #658
#379 := (= #689 #378)
#667 := (= #687 0::Int)
#377 := [rewrite]: #667
#380 := [monotonicity #377]: #379
#656 := [trans #380 #659]: #374
#661 := [monotonicity #656]: #657
#647 := [trans #661 #651]: #652
#653 := [monotonicity #647]: #648
#666 := (iff #352 false)
#664 := (or false false)
#388 := (iff #664 false)
#662 := [rewrite]: #388
#665 := (iff #352 #664)
#394 := (iff #373 false)
#1 := true
#674 := (not true)
#671 := (iff #674 false)
#677 := [rewrite]: #671
#392 := (iff #373 #674)
#669 := (iff #369 true)
#321 := (or true true)
#682 := (iff #321 true)
#668 := [rewrite]: #682
#681 := (iff #369 #321)
#686 := (iff #359 true)
#329 := [rewrite]: #686
#680 := (iff #372 true)
#320 := [rewrite]: #680
#679 := [monotonicity #320 #329]: #681
#391 := [trans #679 #668]: #669
#393 := [monotonicity #391]: #392
#288 := [trans #393 #677]: #394
#315 := (iff #371 false)
#675 := (iff #371 #674)
#672 := (iff #370 true)
#670 := (or false true)
#335 := (iff #670 true)
#336 := [rewrite]: #335
#333 := (iff #370 #670)
#685 := (iff #368 false)
#345 := [rewrite]: #685
#334 := [monotonicity #345 #329]: #333
#673 := [trans #334 #336]: #672
#676 := [monotonicity #673]: #675
#678 := [trans #676 #677]: #315
#387 := [monotonicity #678 #288]: #665
#663 := [trans #387 #662]: #666
#631 := [monotonicity #663 #653 #475]: #478
#633 := [trans #631 #634]: #635
#344 := (iff #367 false)
#349 := [rewrite]: #344
#518 := [monotonicity #349 #633]: #636
#520 := [trans #518 #634]: #519
#694 := (iff #282 false)
#684 := [rewrite]: #694
#529 := [monotonicity #684 #520]: #627
#513 := [trans #529 #625]: #628
#533 := [monotonicity #513]: #532
#536 := [trans #533 #535]: #532
#524 := [quant-inst #8 #54]: #531
#629 := [mp #524 #536]: #530
[unit-resolution #629 #66 #708]: false
4aa0b6a1a9a2558065eff1ba9f7dadbceeb2b883 324 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#703 := (pattern #39)
#13 := 0::Int
#55 := -1::Int
#97 := (* -1::Int #19)
#94 := (* -1::Int #17)
#116 := (mod #94 #97)
#272 := (+ #39 #116)
#273 := (= #272 0::Int)
#40 := (mod #17 #19)
#269 := (* -1::Int #40)
#270 := (+ #39 #269)
#271 := (= #270 0::Int)
#72 := (<= #19 0::Int)
#163 := (>= #17 0::Int)
#216 := (or #163 #72)
#217 := (not #216)
#68 := (<= #17 0::Int)
#212 := (or #68 #72)
#213 := (not #212)
#220 := (or #213 #217)
#274 := (if #220 #271 #273)
#268 := (= #39 0::Int)
#21 := (= #17 0::Int)
#275 := (if #21 #268 #274)
#267 := (= #39 #17)
#22 := (= #19 0::Int)
#276 := (if #22 #267 #275)
#704 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #703) #276)
#279 := (forall (vars (?v0 Int) (?v1 Int)) #276)
#707 := (iff #279 #704)
#705 := (iff #276 #276)
#706 := [refl]: #705
#708 := [quant-intro #706]: #707
#122 := (* -1::Int #116)
#236 := (if #220 #40 #122)
#239 := (if #21 0::Int #236)
#242 := (if #22 #17 #239)
#245 := (= #39 #242)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#280 := (iff #248 #279)
#277 := (iff #245 #276)
#278 := [rewrite]: #277
#281 := [quant-intro #278]: #280
#73 := (not #72)
#166 := (not #163)
#169 := (and #166 #73)
#69 := (not #68)
#76 := (and #69 #73)
#172 := (or #76 #169)
#188 := (if #172 #40 #122)
#191 := (if #21 0::Int #188)
#194 := (if #22 #17 #191)
#197 := (= #39 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#249 := (iff #200 #248)
#246 := (iff #197 #245)
#243 := (= #194 #242)
#240 := (= #191 #239)
#237 := (= #188 #236)
#221 := (iff #172 #220)
#218 := (iff #169 #217)
#219 := [rewrite]: #218
#214 := (iff #76 #213)
#215 := [rewrite]: #214
#222 := [monotonicity #215 #219]: #221
#238 := [monotonicity #222]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [quant-intro #247]: #249
#162 := (~ #200 #200)
#207 := (~ #197 #197)
#161 := [refl]: #207
#210 := [nnf-pos #161]: #162
#79 := (<= 0::Int #17)
#80 := (not #79)
#88 := (and #80 #73)
#91 := (or #76 #88)
#127 := (if #91 #40 #122)
#130 := (if #21 0::Int #127)
#133 := (if #22 #17 #130)
#136 := (= #39 #133)
#139 := (forall (vars (?v0 Int) (?v1 Int)) #136)
#201 := (iff #139 #200)
#198 := (iff #136 #197)
#195 := (= #133 #194)
#192 := (= #130 #191)
#189 := (= #127 #188)
#173 := (iff #91 #172)
#170 := (iff #88 #169)
#167 := (iff #80 #166)
#164 := (iff #79 #163)
#165 := [rewrite]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#190 := [monotonicity #174]: #189
#193 := [monotonicity #190]: #192
#196 := [monotonicity #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (if #29 #40 #42)
#44 := (if #21 0::Int #43)
#45 := (if #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#140 := (iff #47 #139)
#137 := (iff #46 #136)
#134 := (= #45 #133)
#131 := (= #44 #130)
#128 := (= #43 #127)
#125 := (= #42 #122)
#119 := (- #116)
#123 := (= #119 #122)
#124 := [rewrite]: #123
#120 := (= #42 #119)
#117 := (= #41 #116)
#98 := (= #32 #97)
#99 := [rewrite]: #98
#95 := (= #31 #94)
#96 := [rewrite]: #95
#118 := [monotonicity #96 #99]: #117
#121 := [monotonicity #118]: #120
#126 := [trans #121 #124]: #125
#92 := (iff #29 #91)
#89 := (iff #28 #88)
#74 := (iff #25 #73)
#75 := [rewrite]: #74
#81 := (iff #27 #80)
#85 := (iff #80 #80)
#83 := (iff #79 #79)
#84 := [rewrite]: #83
#86 := [monotonicity #84]: #85
#82 := [rewrite]: #81
#87 := [trans #82 #86]: #81
#90 := [monotonicity #87 #75]: #89
#77 := (iff #26 #76)
#70 := (iff #24 #69)
#71 := [rewrite]: #70
#78 := [monotonicity #71 #75]: #77
#93 := [monotonicity #78 #90]: #92
#129 := [monotonicity #93 #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [quant-intro #138]: #140
#51 := [asserted]: #47
#142 := [mp #51 #141]: #139
#203 := [mp #142 #202]: #200
#211 := [mp~ #203 #210]: #200
#251 := [mp #211 #250]: #248
#282 := [mp #251 #281]: #279
#709 := [mp #282 #708]: #704
#8 := 3::Int
#9 := (f4 f5 3::Int)
#58 := (f3 #9 -1::Int)
#61 := (= #58 0::Int)
#64 := (not #61)
#10 := 1::Int
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#14 := (= #12 0::Int)
#15 := (not #14)
#65 := (iff #15 #64)
#62 := (iff #14 #61)
#59 := (= #12 #58)
#56 := (= #11 -1::Int)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#49 := [asserted]: #15
#67 := [mp #49 #66]: #64
#531 := (not #704)
#532 := (or #531 #61)
#358 := (* -1::Int -1::Int)
#684 := (* -1::Int 3::Int)
#359 := (mod #684 #358)
#691 := (+ #58 #359)
#692 := (= #691 0::Int)
#688 := (mod 3::Int -1::Int)
#690 := (* -1::Int #688)
#347 := (+ #58 #690)
#477 := (= #347 0::Int)
#360 := (<= -1::Int 0::Int)
#373 := (>= 3::Int 0::Int)
#370 := (or #373 #360)
#374 := (not #370)
#369 := (<= 3::Int 0::Int)
#371 := (or #369 #360)
#372 := (not #371)
#353 := (or #372 #374)
#693 := (if #353 #477 #692)
#368 := (= 3::Int 0::Int)
#694 := (if #368 #61 #693)
#367 := (= #58 3::Int)
#283 := (= -1::Int 0::Int)
#689 := (if #283 #367 #694)
#525 := (or #531 #689)
#534 := (iff #525 #532)
#536 := (iff #532 #532)
#537 := [rewrite]: #536
#514 := (iff #689 #61)
#628 := (if false #367 #61)
#626 := (iff #628 #61)
#629 := [rewrite]: #626
#530 := (iff #689 #628)
#521 := (iff #694 #61)
#479 := (if false #61 #61)
#635 := (iff #479 #61)
#636 := [rewrite]: #635
#519 := (iff #694 #479)
#634 := (iff #693 #61)
#632 := (iff #693 #479)
#476 := (iff #692 #61)
#640 := (= #691 #58)
#661 := (+ #58 0::Int)
#651 := (= #661 #58)
#652 := [rewrite]: #651
#645 := (= #691 #661)
#638 := (= #359 0::Int)
#655 := -3::Int
#499 := (mod -3::Int 1::Int)
#643 := (= #499 0::Int)
#644 := [rewrite]: #643
#641 := (= #359 #499)
#497 := (= #358 1::Int)
#498 := [rewrite]: #497
#650 := (= #684 -3::Int)
#656 := [rewrite]: #650
#642 := [monotonicity #656 #498]: #641
#639 := [trans #642 #644]: #638
#646 := [monotonicity #639]: #645
#647 := [trans #646 #652]: #640
#478 := [monotonicity #647]: #476
#649 := (iff #477 #61)
#653 := (= #347 #58)
#658 := (= #347 #661)
#375 := (= #690 0::Int)
#379 := (* -1::Int 0::Int)
#659 := (= #379 0::Int)
#660 := [rewrite]: #659
#380 := (= #690 #379)
#668 := (= #688 0::Int)
#378 := [rewrite]: #668
#381 := [monotonicity #378]: #380
#657 := [trans #381 #660]: #375
#662 := [monotonicity #657]: #658
#648 := [trans #662 #652]: #653
#654 := [monotonicity #648]: #649
#667 := (iff #353 false)
#665 := (or false false)
#389 := (iff #665 false)
#663 := [rewrite]: #389
#666 := (iff #353 #665)
#395 := (iff #374 false)
#1 := true
#675 := (not true)
#672 := (iff #675 false)
#678 := [rewrite]: #672
#393 := (iff #374 #675)
#670 := (iff #370 true)
#322 := (or true true)
#683 := (iff #322 true)
#669 := [rewrite]: #683
#682 := (iff #370 #322)
#687 := (iff #360 true)
#330 := [rewrite]: #687
#681 := (iff #373 true)
#321 := [rewrite]: #681
#680 := [monotonicity #321 #330]: #682
#392 := [trans #680 #669]: #670
#394 := [monotonicity #392]: #393
#289 := [trans #394 #678]: #395
#316 := (iff #372 false)
#676 := (iff #372 #675)
#673 := (iff #371 true)
#671 := (or false true)
#336 := (iff #671 true)
#337 := [rewrite]: #336
#334 := (iff #371 #671)
#686 := (iff #369 false)
#346 := [rewrite]: #686
#335 := [monotonicity #346 #330]: #334
#674 := [trans #335 #337]: #673
#677 := [monotonicity #674]: #676
#679 := [trans #677 #678]: #316
#388 := [monotonicity #679 #289]: #666
#664 := [trans #388 #663]: #667
#633 := [monotonicity #664 #654 #478]: #632
#637 := [trans #633 #636]: #634
#345 := (iff #368 false)
#350 := [rewrite]: #345
#520 := [monotonicity #350 #637]: #519
#480 := [trans #520 #636]: #521
#695 := (iff #283 false)
#685 := [rewrite]: #695
#625 := [monotonicity #685 #480]: #530
#529 := [trans #625 #629]: #514
#535 := [monotonicity #529]: #534
#630 := [trans #535 #537]: #534
#533 := [quant-inst #8 #55]: #525
#627 := [mp #533 #630]: #532
[unit-resolution #627 #67 #709]: false
6ed556159a25d6cb7b0afc89ba7e23c5523c8b63 304 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#703 := (pattern #39)
#13 := 0::Int
#55 := -1::Int
#97 := (* -1::Int #19)
#94 := (* -1::Int #17)
#116 := (mod #94 #97)
#272 := (+ #39 #116)
#273 := (= #272 0::Int)
#40 := (mod #17 #19)
#269 := (* -1::Int #40)
#270 := (+ #39 #269)
#271 := (= #270 0::Int)
#72 := (<= #19 0::Int)
#163 := (>= #17 0::Int)
#216 := (or #163 #72)
#217 := (not #216)
#68 := (<= #17 0::Int)
#212 := (or #68 #72)
#213 := (not #212)
#220 := (or #213 #217)
#274 := (if #220 #271 #273)
#268 := (= #39 0::Int)
#21 := (= #17 0::Int)
#275 := (if #21 #268 #274)
#267 := (= #39 #17)
#22 := (= #19 0::Int)
#276 := (if #22 #267 #275)
#704 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #703) #276)
#279 := (forall (vars (?v0 Int) (?v1 Int)) #276)
#707 := (iff #279 #704)
#705 := (iff #276 #276)
#706 := [refl]: #705
#708 := [quant-intro #706]: #707
#122 := (* -1::Int #116)
#236 := (if #220 #40 #122)
#239 := (if #21 0::Int #236)
#242 := (if #22 #17 #239)
#245 := (= #39 #242)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#280 := (iff #248 #279)
#277 := (iff #245 #276)
#278 := [rewrite]: #277
#281 := [quant-intro #278]: #280
#73 := (not #72)
#166 := (not #163)
#169 := (and #166 #73)
#69 := (not #68)
#76 := (and #69 #73)
#172 := (or #76 #169)
#188 := (if #172 #40 #122)
#191 := (if #21 0::Int #188)
#194 := (if #22 #17 #191)
#197 := (= #39 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#249 := (iff #200 #248)
#246 := (iff #197 #245)
#243 := (= #194 #242)
#240 := (= #191 #239)
#237 := (= #188 #236)
#221 := (iff #172 #220)
#218 := (iff #169 #217)
#219 := [rewrite]: #218
#214 := (iff #76 #213)
#215 := [rewrite]: #214
#222 := [monotonicity #215 #219]: #221
#238 := [monotonicity #222]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [quant-intro #247]: #249
#205 := (~ #200 #200)
#209 := (~ #197 #197)
#204 := [refl]: #209
#210 := [nnf-pos #204]: #205
#79 := (<= 0::Int #17)
#80 := (not #79)
#88 := (and #80 #73)
#91 := (or #76 #88)
#127 := (if #91 #40 #122)
#130 := (if #21 0::Int #127)
#133 := (if #22 #17 #130)
#136 := (= #39 #133)
#139 := (forall (vars (?v0 Int) (?v1 Int)) #136)
#201 := (iff #139 #200)
#198 := (iff #136 #197)
#195 := (= #133 #194)
#192 := (= #130 #191)
#189 := (= #127 #188)
#173 := (iff #91 #172)
#170 := (iff #88 #169)
#167 := (iff #80 #166)
#164 := (iff #79 #163)
#165 := [rewrite]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#190 := [monotonicity #174]: #189
#193 := [monotonicity #190]: #192
#196 := [monotonicity #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (if #29 #40 #42)
#44 := (if #21 0::Int #43)
#45 := (if #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#140 := (iff #47 #139)
#137 := (iff #46 #136)
#134 := (= #45 #133)
#131 := (= #44 #130)
#128 := (= #43 #127)
#125 := (= #42 #122)
#119 := (- #116)
#123 := (= #119 #122)
#124 := [rewrite]: #123
#120 := (= #42 #119)
#117 := (= #41 #116)
#98 := (= #32 #97)
#99 := [rewrite]: #98
#95 := (= #31 #94)
#96 := [rewrite]: #95
#118 := [monotonicity #96 #99]: #117
#121 := [monotonicity #118]: #120
#126 := [trans #121 #124]: #125
#92 := (iff #29 #91)
#89 := (iff #28 #88)
#74 := (iff #25 #73)
#75 := [rewrite]: #74
#81 := (iff #27 #80)
#85 := (iff #80 #80)
#83 := (iff #79 #79)
#84 := [rewrite]: #83
#86 := [monotonicity #84]: #85
#82 := [rewrite]: #81
#87 := [trans #82 #86]: #81
#90 := [monotonicity #87 #75]: #89
#77 := (iff #26 #76)
#70 := (iff #24 #69)
#71 := [rewrite]: #70
#78 := [monotonicity #71 #75]: #77
#93 := [monotonicity #78 #90]: #92
#129 := [monotonicity #93 #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [quant-intro #138]: #140
#51 := [asserted]: #47
#142 := [mp #51 #141]: #139
#203 := [mp #142 #202]: #200
#211 := [mp~ #203 #210]: #200
#251 := [mp #211 #250]: #248
#282 := [mp #251 #281]: #279
#709 := [mp #282 #708]: #704
decl f6 :: Int
#8 := f6
#9 := (f4 f5 f6)
#58 := (f3 #9 -1::Int)
#61 := (= #58 0::Int)
#64 := (not #61)
#10 := 1::Int
#11 := (- 1::Int)
#12 := (f3 #9 #11)
#14 := (= #12 0::Int)
#15 := (not #14)
#65 := (iff #15 #64)
#62 := (iff #14 #61)
#59 := (= #12 #58)
#56 := (= #11 -1::Int)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#49 := [asserted]: #15
#67 := [mp #49 #66]: #64
#647 := (not #704)
#476 := (or #647 #61)
#358 := (* -1::Int -1::Int)
#684 := (* -1::Int f6)
#359 := (mod #684 #358)
#691 := (+ #58 #359)
#692 := (= #691 0::Int)
#688 := (mod f6 -1::Int)
#690 := (* -1::Int #688)
#347 := (+ #58 #690)
#477 := (= #347 0::Int)
#360 := (<= -1::Int 0::Int)
#373 := (>= f6 0::Int)
#370 := (or #373 #360)
#374 := (not #370)
#369 := (<= f6 0::Int)
#371 := (or #369 #360)
#372 := (not #371)
#353 := (or #372 #374)
#693 := (if #353 #477 #692)
#368 := (= f6 0::Int)
#694 := (if #368 #61 #693)
#367 := (= #58 f6)
#283 := (= -1::Int 0::Int)
#689 := (if #283 #367 #694)
#478 := (or #647 #689)
#632 := (iff #478 #476)
#635 := (iff #476 #476)
#636 := [rewrite]: #635
#646 := (iff #689 #61)
#643 := (if false #367 #61)
#639 := (iff #643 #61)
#645 := [rewrite]: #639
#644 := (iff #689 #643)
#641 := (iff #694 #61)
#650 := (if #368 #61 #61)
#498 := (iff #650 #61)
#499 := [rewrite]: #498
#656 := (iff #694 #650)
#654 := (iff #693 #61)
#651 := (if false #477 #61)
#648 := (iff #651 #61)
#649 := [rewrite]: #648
#652 := (iff #693 #651)
#658 := (iff #692 #61)
#657 := (= #691 #58)
#380 := (+ #58 0::Int)
#660 := (= #380 #58)
#375 := [rewrite]: #660
#381 := (= #691 #380)
#378 := (= #359 0::Int)
#389 := (mod #684 1::Int)
#664 := (= #389 0::Int)
#668 := [rewrite]: #664
#663 := (= #359 #389)
#666 := (= #358 1::Int)
#388 := [rewrite]: #666
#667 := [monotonicity #388]: #663
#379 := [trans #667 #668]: #378
#659 := [monotonicity #379]: #381
#661 := [trans #659 #375]: #657
#662 := [monotonicity #661]: #658
#289 := (iff #353 false)
#670 := (or false false)
#394 := (iff #670 false)
#395 := [rewrite]: #394
#392 := (iff #353 #670)
#683 := (iff #374 false)
#1 := true
#336 := (not true)
#674 := (iff #336 false)
#675 := [rewrite]: #674
#682 := (iff #374 #336)
#321 := (iff #370 true)
#672 := (or #373 true)
#679 := (iff #672 true)
#681 := [rewrite]: #679
#678 := (iff #370 #672)
#345 := (iff #360 true)
#350 := [rewrite]: #345
#316 := [monotonicity #350]: #678
#322 := [trans #316 #681]: #321
#680 := [monotonicity #322]: #682
#669 := [trans #680 #675]: #683
#676 := (iff #372 false)
#337 := (iff #372 #336)
#334 := (iff #371 true)
#686 := (or #369 true)
#330 := (iff #686 true)
#671 := [rewrite]: #330
#346 := (iff #371 #686)
#687 := [monotonicity #350]: #346
#335 := [trans #687 #671]: #334
#673 := [monotonicity #335]: #337
#677 := [trans #673 #675]: #676
#393 := [monotonicity #677 #669]: #392
#665 := [trans #393 #395]: #289
#653 := [monotonicity #665 #662]: #652
#655 := [trans #653 #649]: #654
#497 := [monotonicity #655]: #656
#642 := [trans #497 #499]: #641
#695 := (iff #283 false)
#685 := [rewrite]: #695
#638 := [monotonicity #685 #642]: #644
#640 := [trans #638 #645]: #646
#633 := [monotonicity #640]: #632
#634 := [trans #633 #636]: #632
#479 := [quant-inst #8 #55]: #478
#637 := [mp #479 #634]: #476
[unit-resolution #637 #67 #709]: false
9c9742a1f9e5b5feb0bee490cb17aea9c87b53db 303 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#36 := (f4 f5 #15)
#37 := (f3 #36 #17)
#690 := (pattern #37)
#8 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #17)
#80 := (* -1::Int #15)
#102 := (mod #80 #83)
#258 := (+ #37 #102)
#259 := (= #258 0::Int)
#38 := (mod #15 #17)
#255 := (* -1::Int #38)
#256 := (+ #37 #255)
#257 := (= #256 0::Int)
#57 := (<= #17 0::Int)
#149 := (>= #15 0::Int)
#202 := (or #149 #57)
#203 := (not #202)
#53 := (<= #15 0::Int)
#198 := (or #53 #57)
#199 := (not #198)
#206 := (or #199 #203)
#260 := (if #206 #257 #259)
#254 := (= #37 0::Int)
#19 := (= #15 0::Int)
#261 := (if #19 #254 #260)
#253 := (= #37 #15)
#20 := (= #17 0::Int)
#262 := (if #20 #253 #261)
#691 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #690) #262)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#694 := (iff #265 #691)
#692 := (iff #262 #262)
#693 := [refl]: #692
#695 := [quant-intro #693]: #694
#108 := (* -1::Int #102)
#222 := (if #206 #38 #108)
#225 := (if #19 0::Int #222)
#228 := (if #20 #15 #225)
#231 := (= #37 #228)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#266 := (iff #234 #265)
#263 := (iff #231 #262)
#264 := [rewrite]: #263
#267 := [quant-intro #264]: #266
#58 := (not #57)
#152 := (not #149)
#155 := (and #152 #58)
#54 := (not #53)
#61 := (and #54 #58)
#158 := (or #61 #155)
#174 := (if #158 #38 #108)
#177 := (if #19 0::Int #174)
#180 := (if #20 #15 #177)
#183 := (= #37 #180)
#186 := (forall (vars (?v0 Int) (?v1 Int)) #183)
#235 := (iff #186 #234)
#232 := (iff #183 #231)
#229 := (= #180 #228)
#226 := (= #177 #225)
#223 := (= #174 #222)
#207 := (iff #158 #206)
#204 := (iff #155 #203)
#205 := [rewrite]: #204
#200 := (iff #61 #199)
#201 := [rewrite]: #200
#208 := [monotonicity #201 #205]: #207
#224 := [monotonicity #208]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#148 := (~ #186 #186)
#193 := (~ #183 #183)
#147 := [refl]: #193
#196 := [nnf-pos #147]: #148
#64 := (<= 0::Int #15)
#65 := (not #64)
#73 := (and #65 #58)
#76 := (or #61 #73)
#113 := (if #76 #38 #108)
#116 := (if #19 0::Int #113)
#119 := (if #20 #15 #116)
#122 := (= #37 #119)
#125 := (forall (vars (?v0 Int) (?v1 Int)) #122)
#187 := (iff #125 #186)
#184 := (iff #122 #183)
#181 := (= #119 #180)
#178 := (= #116 #177)
#175 := (= #113 #174)
#159 := (iff #76 #158)
#156 := (iff #73 #155)
#153 := (iff #65 #152)
#150 := (iff #64 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#176 := [monotonicity #160]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#30 := (- #17)
#29 := (- #15)
#39 := (mod #29 #30)
#40 := (- #39)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#41 := (if #27 #38 #40)
#42 := (if #19 0::Int #41)
#43 := (if #20 #15 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#126 := (iff #45 #125)
#123 := (iff #44 #122)
#120 := (= #43 #119)
#117 := (= #42 #116)
#114 := (= #41 #113)
#111 := (= #40 #108)
#105 := (- #102)
#109 := (= #105 #108)
#110 := [rewrite]: #109
#106 := (= #40 #105)
#103 := (= #39 #102)
#84 := (= #30 #83)
#85 := [rewrite]: #84
#81 := (= #29 #80)
#82 := [rewrite]: #81
#104 := [monotonicity #82 #85]: #103
#107 := [monotonicity #104]: #106
#112 := [trans #107 #110]: #111
#77 := (iff #27 #76)
#74 := (iff #26 #73)
#59 := (iff #23 #58)
#60 := [rewrite]: #59
#66 := (iff #25 #65)
#70 := (iff #65 #65)
#68 := (iff #64 #64)
#69 := [rewrite]: #68
#71 := [monotonicity #69]: #70
#67 := [rewrite]: #66
#72 := [trans #67 #71]: #66
#75 := [monotonicity #72 #60]: #74
#62 := (iff #24 #61)
#55 := (iff #22 #54)
#56 := [rewrite]: #55
#63 := [monotonicity #56 #60]: #62
#78 := [monotonicity #63 #75]: #77
#115 := [monotonicity #78 #112]: #114
#118 := [monotonicity #115]: #117
#121 := [monotonicity #118]: #120
#124 := [monotonicity #121]: #123
#127 := [quant-intro #124]: #126
#49 := [asserted]: #45
#128 := [mp #49 #127]: #125
#189 := [mp #128 #188]: #186
#197 := [mp~ #189 #196]: #186
#237 := [mp #197 #236]: #234
#268 := [mp #237 #267]: #265
#696 := [mp #268 #695]: #691
#10 := 3::Int
#9 := (f4 f5 0::Int)
#11 := (f3 #9 3::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#47 := [asserted]: #13
#615 := (not #691)
#517 := (or #615 #12)
#671 := (* -1::Int 3::Int)
#464 := (* -1::Int 0::Int)
#345 := (mod #464 #671)
#346 := (+ #11 #345)
#678 := (= #346 0::Int)
#340 := (mod 0::Int 3::Int)
#675 := (* -1::Int #340)
#677 := (+ #11 #675)
#334 := (= #677 0::Int)
#356 := (<= 3::Int 0::Int)
#359 := (>= 0::Int 0::Int)
#360 := (or #359 #356)
#357 := (not #360)
#355 := (<= 0::Int 0::Int)
#347 := (or #355 #356)
#358 := (not #347)
#361 := (or #358 #357)
#679 := (if #361 #334 #678)
#354 := (= 0::Int 0::Int)
#680 := (if #354 #12 #679)
#269 := (= 3::Int 0::Int)
#681 := (if #269 #12 #680)
#612 := (or #615 #681)
#616 := (iff #612 #517)
#516 := (iff #517 #517)
#518 := [rewrite]: #516
#508 := (iff #681 #12)
#626 := (if false #12 #12)
#627 := (iff #626 #12)
#634 := [rewrite]: #627
#506 := (iff #681 #626)
#621 := (iff #680 #12)
#1 := true
#466 := (if true #12 #12)
#622 := (iff #466 #12)
#623 := [rewrite]: #622
#619 := (iff #680 #466)
#463 := (iff #679 #12)
#632 := (iff #679 #626)
#631 := (iff #678 #12)
#629 := (= #346 #11)
#368 := (+ #11 0::Int)
#362 := (= #368 #11)
#644 := [rewrite]: #362
#486 := (= #346 #368)
#484 := (= #345 0::Int)
#639 := -3::Int
#636 := (mod 0::Int -3::Int)
#637 := (= #636 0::Int)
#643 := [rewrite]: #637
#641 := (= #345 #636)
#640 := (= #671 -3::Int)
#635 := [rewrite]: #640
#655 := (= #464 0::Int)
#365 := [rewrite]: #655
#642 := [monotonicity #365 #635]: #641
#485 := [trans #642 #643]: #484
#628 := [monotonicity #485]: #486
#630 := [trans #628 #644]: #629
#625 := [monotonicity #630]: #631
#649 := (iff #334 #12)
#648 := (= #677 #11)
#646 := (= #677 #368)
#366 := (= #675 0::Int)
#654 := (= #675 #464)
#376 := (= #340 0::Int)
#650 := [rewrite]: #376
#651 := [monotonicity #650]: #654
#367 := [trans #651 #365]: #366
#647 := [monotonicity #367]: #646
#645 := [trans #647 #644]: #648
#638 := [monotonicity #645]: #649
#653 := (iff #361 false)
#380 := (or false false)
#275 := (iff #380 false)
#652 := [rewrite]: #275
#381 := (iff #361 #380)
#657 := (iff #357 false)
#661 := (not true)
#664 := (iff #661 false)
#659 := [rewrite]: #664
#670 := (iff #357 #661)
#669 := (iff #360 true)
#317 := (or true false)
#322 := (iff #317 true)
#323 := [rewrite]: #322
#308 := (iff #360 #317)
#333 := (iff #356 false)
#674 := [rewrite]: #333
#666 := (iff #359 true)
#668 := [rewrite]: #666
#309 := [monotonicity #668 #674]: #308
#667 := [trans #309 #323]: #669
#656 := [monotonicity #667]: #670
#379 := [trans #656 #659]: #657
#665 := (iff #358 false)
#662 := (iff #358 #661)
#324 := (iff #347 true)
#658 := (iff #347 #317)
#337 := (iff #355 true)
#673 := [rewrite]: #337
#321 := [monotonicity #673 #674]: #658
#660 := [trans #321 #323]: #324
#663 := [monotonicity #660]: #662
#303 := [trans #663 #659]: #665
#382 := [monotonicity #303 #379]: #381
#375 := [trans #382 #652]: #653
#633 := [monotonicity #375 #638 #625]: #632
#465 := [trans #633 #634]: #463
#672 := (iff #354 true)
#332 := [rewrite]: #672
#620 := [monotonicity #332 #465]: #619
#624 := [trans #620 #623]: #621
#676 := (iff #269 false)
#682 := [rewrite]: #676
#507 := [monotonicity #682 #624]: #506
#467 := [trans #507 #634]: #508
#501 := [monotonicity #467]: #616
#519 := [trans #501 #518]: #616
#613 := [quant-inst #8 #10]: #612
#512 := [mp #613 #519]: #517
[unit-resolution #512 #47 #696]: false
20cf39716d0e0864db7d929b914c6a23abc44f49 316 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#704 := (pattern #38)
#8 := 0::Int
#93 := -1::Int
#97 := (* -1::Int #18)
#94 := (* -1::Int #16)
#116 := (mod #94 #97)
#272 := (+ #38 #116)
#273 := (= #272 0::Int)
#39 := (mod #16 #18)
#269 := (* -1::Int #39)
#270 := (+ #38 #269)
#271 := (= #270 0::Int)
#71 := (<= #18 0::Int)
#163 := (>= #16 0::Int)
#216 := (or #163 #71)
#217 := (not #216)
#67 := (<= #16 0::Int)
#212 := (or #67 #71)
#213 := (not #212)
#220 := (or #213 #217)
#274 := (if #220 #271 #273)
#268 := (= #38 0::Int)
#20 := (= #16 0::Int)
#275 := (if #20 #268 #274)
#267 := (= #38 #16)
#21 := (= #18 0::Int)
#276 := (if #21 #267 #275)
#705 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #704) #276)
#279 := (forall (vars (?v0 Int) (?v1 Int)) #276)
#708 := (iff #279 #705)
#706 := (iff #276 #276)
#707 := [refl]: #706
#709 := [quant-intro #707]: #708
#122 := (* -1::Int #116)
#236 := (if #220 #39 #122)
#239 := (if #20 0::Int #236)
#242 := (if #21 #16 #239)
#245 := (= #38 #242)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#280 := (iff #248 #279)
#277 := (iff #245 #276)
#278 := [rewrite]: #277
#281 := [quant-intro #278]: #280
#72 := (not #71)
#166 := (not #163)
#169 := (and #166 #72)
#68 := (not #67)
#75 := (and #68 #72)
#172 := (or #75 #169)
#188 := (if #172 #39 #122)
#191 := (if #20 0::Int #188)
#194 := (if #21 #16 #191)
#197 := (= #38 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#249 := (iff #200 #248)
#246 := (iff #197 #245)
#243 := (= #194 #242)
#240 := (= #191 #239)
#237 := (= #188 #236)
#221 := (iff #172 #220)
#218 := (iff #169 #217)
#219 := [rewrite]: #218
#214 := (iff #75 #213)
#215 := [rewrite]: #214
#222 := [monotonicity #215 #219]: #221
#238 := [monotonicity #222]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [quant-intro #247]: #249
#207 := (~ #200 #200)
#162 := (~ #197 #197)
#206 := [refl]: #162
#210 := [nnf-pos #206]: #207
#78 := (<= 0::Int #16)
#79 := (not #78)
#87 := (and #79 #72)
#90 := (or #75 #87)
#127 := (if #90 #39 #122)
#130 := (if #20 0::Int #127)
#133 := (if #21 #16 #130)
#136 := (= #38 #133)
#139 := (forall (vars (?v0 Int) (?v1 Int)) #136)
#201 := (iff #139 #200)
#198 := (iff #136 #197)
#195 := (= #133 #194)
#192 := (= #130 #191)
#189 := (= #127 #188)
#173 := (iff #90 #172)
#170 := (iff #87 #169)
#167 := (iff #79 #166)
#164 := (iff #78 #163)
#165 := [rewrite]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#190 := [monotonicity #174]: #189
#193 := [monotonicity #190]: #192
#196 := [monotonicity #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#140 := (iff #46 #139)
#137 := (iff #45 #136)
#134 := (= #44 #133)
#131 := (= #43 #130)
#128 := (= #42 #127)
#125 := (= #41 #122)
#119 := (- #116)
#123 := (= #119 #122)
#124 := [rewrite]: #123
#120 := (= #41 #119)
#117 := (= #40 #116)
#98 := (= #31 #97)
#99 := [rewrite]: #98
#95 := (= #30 #94)
#96 := [rewrite]: #95
#118 := [monotonicity #96 #99]: #117
#121 := [monotonicity #118]: #120
#126 := [trans #121 #124]: #125
#91 := (iff #28 #90)
#88 := (iff #27 #87)
#73 := (iff #24 #72)
#74 := [rewrite]: #73
#80 := (iff #26 #79)
#84 := (iff #79 #79)
#82 := (iff #78 #78)
#83 := [rewrite]: #82
#85 := [monotonicity #83]: #84
#81 := [rewrite]: #80
#86 := [trans #81 #85]: #80
#89 := [monotonicity #86 #74]: #88
#76 := (iff #25 #75)
#69 := (iff #23 #68)
#70 := [rewrite]: #69
#77 := [monotonicity #70 #74]: #76
#92 := [monotonicity #77 #89]: #91
#129 := [monotonicity #92 #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [quant-intro #138]: #140
#50 := [asserted]: #46
#142 := [mp #50 #141]: #139
#203 := [mp #142 #202]: #200
#211 := [mp~ #203 #210]: #200
#251 := [mp #211 #250]: #248
#282 := [mp #251 #281]: #279
#710 := [mp #282 #709]: #705
#54 := -3::Int
#9 := (f4 f5 0::Int)
#57 := (f3 #9 -3::Int)
#60 := (= #57 0::Int)
#63 := (not #60)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#13 := (= #12 0::Int)
#14 := (not #13)
#64 := (iff #14 #63)
#61 := (iff #13 #60)
#58 := (= #12 #57)
#55 := (= #11 -3::Int)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59]: #61
#65 := [monotonicity #62]: #64
#48 := [asserted]: #14
#66 := [mp #48 #65]: #63
#481 := (not #705)
#629 := (or #481 #60)
#685 := (* -1::Int -3::Int)
#478 := (* -1::Int 0::Int)
#359 := (mod #478 #685)
#360 := (+ #57 #359)
#692 := (= #360 0::Int)
#354 := (mod 0::Int -3::Int)
#689 := (* -1::Int #354)
#691 := (+ #57 #689)
#348 := (= #691 0::Int)
#370 := (<= -3::Int 0::Int)
#373 := (>= 0::Int 0::Int)
#374 := (or #373 #370)
#371 := (not #374)
#369 := (<= 0::Int 0::Int)
#361 := (or #369 #370)
#372 := (not #361)
#375 := (or #372 #371)
#693 := (if #375 #348 #692)
#368 := (= 0::Int 0::Int)
#694 := (if #368 #60 #693)
#283 := (= -3::Int 0::Int)
#695 := (if #283 #60 #694)
#531 := (or #481 #695)
#627 := (iff #531 #629)
#515 := (iff #629 #629)
#530 := [rewrite]: #515
#521 := (iff #695 #60)
#639 := (if false #60 #60)
#647 := (iff #639 #60)
#641 := [rewrite]: #647
#638 := (iff #695 #639)
#637 := (iff #694 #60)
#1 := true
#479 := (if true #60 #60)
#634 := (iff #479 #60)
#636 := [rewrite]: #634
#480 := (iff #694 #479)
#648 := (iff #693 #60)
#640 := (iff #693 #639)
#644 := (iff #692 #60)
#642 := (= #360 #57)
#382 := (+ #57 0::Int)
#376 := (= #382 #57)
#658 := [rewrite]: #376
#499 := (= #360 #382)
#657 := (= #359 0::Int)
#649 := (mod 0::Int 3::Int)
#656 := (= #649 0::Int)
#651 := [rewrite]: #656
#650 := (= #359 #649)
#653 := (= #685 3::Int)
#654 := [rewrite]: #653
#669 := (= #478 0::Int)
#379 := [rewrite]: #669
#655 := [monotonicity #379 #654]: #650
#498 := [trans #655 #651]: #657
#500 := [monotonicity #498]: #499
#643 := [trans #500 #658]: #642
#645 := [monotonicity #643]: #644
#663 := (iff #348 #60)
#662 := (= #691 #57)
#660 := (= #691 #382)
#380 := (= #689 0::Int)
#668 := (= #689 #478)
#390 := (= #354 0::Int)
#664 := [rewrite]: #390
#665 := [monotonicity #664]: #668
#381 := [trans #665 #379]: #380
#661 := [monotonicity #381]: #660
#659 := [trans #661 #658]: #662
#652 := [monotonicity #659]: #663
#667 := (iff #375 false)
#394 := (or false false)
#289 := (iff #394 false)
#666 := [rewrite]: #289
#395 := (iff #375 #394)
#671 := (iff #371 false)
#675 := (not true)
#678 := (iff #675 false)
#673 := [rewrite]: #678
#684 := (iff #371 #675)
#683 := (iff #374 true)
#331 := (or true true)
#336 := (iff #331 true)
#337 := [rewrite]: #336
#322 := (iff #374 #331)
#347 := (iff #370 true)
#688 := [rewrite]: #347
#680 := (iff #373 true)
#682 := [rewrite]: #680
#323 := [monotonicity #682 #688]: #322
#681 := [trans #323 #337]: #683
#670 := [monotonicity #681]: #684
#393 := [trans #670 #673]: #671
#679 := (iff #372 false)
#676 := (iff #372 #675)
#338 := (iff #361 true)
#672 := (iff #361 #331)
#351 := (iff #369 true)
#687 := [rewrite]: #351
#335 := [monotonicity #687 #688]: #672
#674 := [trans #335 #337]: #338
#677 := [monotonicity #674]: #676
#317 := [trans #677 #673]: #679
#396 := [monotonicity #317 #393]: #395
#389 := [trans #396 #666]: #667
#646 := [monotonicity #389 #652 #645]: #640
#477 := [trans #646 #641]: #648
#686 := (iff #368 true)
#346 := [rewrite]: #686
#633 := [monotonicity #346 #477]: #480
#635 := [trans #633 #636]: #637
#690 := (iff #283 false)
#696 := [rewrite]: #690
#520 := [monotonicity #696 #635]: #638
#522 := [trans #520 #641]: #521
#630 := [monotonicity #522]: #627
#532 := [trans #630 #530]: #627
#626 := [quant-inst #8 #54]: #531
#533 := [mp #626 #532]: #629
[unit-resolution #533 #66 #710]: false
3882a63fbf201b6600e36717b769e184385c0d9b 329 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #15)
#38 := (f3 #37 #17)
#690 := (pattern #38)
#19 := 0::Int
#80 := -1::Int
#84 := (* -1::Int #17)
#81 := (* -1::Int #15)
#103 := (mod #81 #84)
#259 := (+ #38 #103)
#260 := (= #259 0::Int)
#39 := (mod #15 #17)
#256 := (* -1::Int #39)
#257 := (+ #38 #256)
#258 := (= #257 0::Int)
#58 := (<= #17 0::Int)
#150 := (>= #15 0::Int)
#203 := (or #150 #58)
#204 := (not #203)
#54 := (<= #15 0::Int)
#199 := (or #54 #58)
#200 := (not #199)
#207 := (or #200 #204)
#261 := (if #207 #258 #260)
#255 := (= #38 0::Int)
#20 := (= #15 0::Int)
#262 := (if #20 #255 #261)
#254 := (= #38 #15)
#21 := (= #17 0::Int)
#263 := (if #21 #254 #262)
#691 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #690) #263)
#266 := (forall (vars (?v0 Int) (?v1 Int)) #263)
#694 := (iff #266 #691)
#692 := (iff #263 #263)
#693 := [refl]: #692
#695 := [quant-intro #693]: #694
#109 := (* -1::Int #103)
#223 := (if #207 #39 #109)
#226 := (if #20 0::Int #223)
#229 := (if #21 #15 #226)
#232 := (= #38 #229)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#59 := (not #58)
#153 := (not #150)
#156 := (and #153 #59)
#55 := (not #54)
#62 := (and #55 #59)
#159 := (or #62 #156)
#175 := (if #159 #39 #109)
#178 := (if #20 0::Int #175)
#181 := (if #21 #15 #178)
#184 := (= #38 #181)
#187 := (forall (vars (?v0 Int) (?v1 Int)) #184)
#236 := (iff #187 #235)
#233 := (iff #184 #232)
#230 := (= #181 #229)
#227 := (= #178 #226)
#224 := (= #175 #223)
#208 := (iff #159 #207)
#205 := (iff #156 #204)
#206 := [rewrite]: #205
#201 := (iff #62 #200)
#202 := [rewrite]: #201
#209 := [monotonicity #202 #206]: #208
#225 := [monotonicity #209]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#149 := (~ #187 #187)
#194 := (~ #184 #184)
#148 := [refl]: #194
#197 := [nnf-pos #148]: #149
#65 := (<= 0::Int #15)
#66 := (not #65)
#74 := (and #66 #59)
#77 := (or #62 #74)
#114 := (if #77 #39 #109)
#117 := (if #20 0::Int #114)
#120 := (if #21 #15 #117)
#123 := (= #38 #120)
#126 := (forall (vars (?v0 Int) (?v1 Int)) #123)
#188 := (iff #126 #187)
#185 := (iff #123 #184)
#182 := (= #120 #181)
#179 := (= #117 #178)
#176 := (= #114 #175)
#160 := (iff #77 #159)
#157 := (iff #74 #156)
#154 := (iff #66 #153)
#151 := (iff #65 #150)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#177 := [monotonicity #161]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [quant-intro #186]: #188
#31 := (- #17)
#30 := (- #15)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #15 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#127 := (iff #46 #126)
#124 := (iff #45 #123)
#121 := (= #44 #120)
#118 := (= #43 #117)
#115 := (= #42 #114)
#112 := (= #41 #109)
#106 := (- #103)
#110 := (= #106 #109)
#111 := [rewrite]: #110
#107 := (= #41 #106)
#104 := (= #40 #103)
#85 := (= #31 #84)
#86 := [rewrite]: #85
#82 := (= #30 #81)
#83 := [rewrite]: #82
#105 := [monotonicity #83 #86]: #104
#108 := [monotonicity #105]: #107
#113 := [trans #108 #111]: #112
#78 := (iff #28 #77)
#75 := (iff #27 #74)
#60 := (iff #24 #59)
#61 := [rewrite]: #60
#67 := (iff #26 #66)
#71 := (iff #66 #66)
#69 := (iff #65 #65)
#70 := [rewrite]: #69
#72 := [monotonicity #70]: #71
#68 := [rewrite]: #67
#73 := [trans #68 #72]: #67
#76 := [monotonicity #73 #61]: #75
#63 := (iff #25 #62)
#56 := (iff #23 #55)
#57 := [rewrite]: #56
#64 := [monotonicity #57 #61]: #63
#79 := [monotonicity #64 #76]: #78
#116 := [monotonicity #79 #113]: #115
#119 := [monotonicity #116]: #118
#122 := [monotonicity #119]: #121
#125 := [monotonicity #122]: #124
#128 := [quant-intro #125]: #127
#50 := [asserted]: #46
#129 := [mp #50 #128]: #126
#190 := [mp #129 #189]: #187
#198 := [mp~ #190 #197]: #187
#238 := [mp #198 #237]: #235
#269 := [mp #238 #268]: #266
#696 := [mp #269 #695]: #691
#8 := 1::Int
#10 := 3::Int
#9 := (f4 f5 1::Int)
#11 := (f3 #9 3::Int)
#12 := (= #11 1::Int)
#13 := (not #12)
#48 := [asserted]: #13
#610 := (not #691)
#606 := (or #610 #12)
#345 := (* -1::Int 3::Int)
#671 := (* -1::Int 1::Int)
#346 := (mod #671 #345)
#678 := (+ #11 #346)
#679 := (= #678 0::Int)
#675 := (mod 1::Int 3::Int)
#677 := (* -1::Int #675)
#334 := (+ #11 #677)
#464 := (= #334 0::Int)
#347 := (<= 3::Int 0::Int)
#360 := (>= 1::Int 0::Int)
#357 := (or #360 #347)
#361 := (not #357)
#356 := (<= 1::Int 0::Int)
#358 := (or #356 #347)
#359 := (not #358)
#340 := (or #359 #361)
#680 := (if #340 #464 #679)
#355 := (= #11 0::Int)
#354 := (= 1::Int 0::Int)
#681 := (if #354 #355 #680)
#270 := (= 3::Int 0::Int)
#676 := (if #270 #12 #681)
#611 := (or #610 #676)
#601 := (iff #611 #606)
#603 := (iff #606 #606)
#597 := [rewrite]: #603
#608 := (iff #676 #12)
#605 := (if false #12 #12)
#596 := (iff #605 #12)
#598 := [rewrite]: #596
#607 := (iff #676 #605)
#614 := (iff #681 #12)
#521 := (if false #355 #12)
#524 := (iff #521 #12)
#617 := [rewrite]: #524
#522 := (iff #681 #521)
#512 := (iff #680 #12)
#508 := -2::Int
#467 := (= #11 -2::Int)
#1 := true
#616 := (if true #12 #467)
#518 := (iff #616 #12)
#519 := [rewrite]: #518
#501 := (iff #680 #616)
#612 := (iff #679 #467)
#626 := 2::Int
#619 := (+ 2::Int #11)
#624 := (= #619 0::Int)
#615 := (iff #624 #467)
#517 := [rewrite]: #615
#506 := (iff #679 #624)
#623 := (= #678 #619)
#463 := (+ #11 2::Int)
#620 := (= #463 #619)
#622 := [rewrite]: #620
#465 := (= #678 #463)
#627 := (= #346 2::Int)
#486 := -3::Int
#630 := (mod -1::Int -3::Int)
#632 := (= #630 2::Int)
#633 := [rewrite]: #632
#631 := (= #346 #630)
#628 := (= #345 -3::Int)
#629 := [rewrite]: #628
#368 := (= #671 -1::Int)
#646 := [rewrite]: #368
#625 := [monotonicity #646 #629]: #631
#634 := [trans #625 #633]: #627
#466 := [monotonicity #634]: #465
#621 := [trans #466 #622]: #623
#507 := [monotonicity #621]: #506
#613 := [trans #507 #517]: #612
#484 := (iff #464 #12)
#649 := (+ -1::Int #11)
#636 := (= #649 0::Int)
#637 := (iff #636 #12)
#643 := [rewrite]: #637
#641 := (iff #464 #636)
#640 := (= #334 #649)
#644 := (+ #11 -1::Int)
#638 := (= #644 #649)
#639 := [rewrite]: #638
#648 := (= #334 #644)
#647 := (= #677 -1::Int)
#366 := (= #677 #671)
#655 := (= #675 1::Int)
#365 := [rewrite]: #655
#367 := [monotonicity #365]: #366
#362 := [trans #367 #646]: #647
#645 := [monotonicity #362]: #648
#635 := [trans #645 #639]: #640
#642 := [monotonicity #635]: #641
#485 := [trans #642 #643]: #484
#654 := (iff #340 true)
#309 := (or true false)
#670 := (iff #309 true)
#656 := [rewrite]: #670
#376 := (iff #340 #309)
#653 := (iff #361 false)
#380 := (not true)
#276 := (iff #380 false)
#652 := [rewrite]: #276
#381 := (iff #361 #380)
#657 := (iff #357 true)
#669 := (iff #357 #309)
#674 := (iff #347 false)
#317 := [rewrite]: #674
#668 := (iff #360 true)
#308 := [rewrite]: #668
#667 := [monotonicity #308 #317]: #669
#379 := [trans #667 #656]: #657
#382 := [monotonicity #379]: #381
#375 := [trans #382 #652]: #653
#303 := (iff #359 true)
#662 := (not false)
#659 := (iff #662 true)
#665 := [rewrite]: #659
#663 := (iff #359 #662)
#660 := (iff #358 false)
#658 := (or false false)
#323 := (iff #658 false)
#324 := [rewrite]: #323
#321 := (iff #358 #658)
#673 := (iff #356 false)
#333 := [rewrite]: #673
#322 := [monotonicity #333 #317]: #321
#661 := [trans #322 #324]: #660
#664 := [monotonicity #661]: #663
#666 := [trans #664 #665]: #303
#650 := [monotonicity #666 #375]: #376
#651 := [trans #650 #656]: #654
#516 := [monotonicity #651 #485 #613]: #501
#520 := [trans #516 #519]: #512
#332 := (iff #354 false)
#337 := [rewrite]: #332
#523 := [monotonicity #337 #520]: #522
#618 := [trans #523 #617]: #614
#682 := (iff #270 false)
#672 := [rewrite]: #682
#599 := [monotonicity #672 #618]: #607
#609 := [trans #599 #598]: #608
#602 := [monotonicity #609]: #601
#604 := [trans #602 #597]: #601
#600 := [quant-inst #8 #10]: #611
#588 := [mp #600 #604]: #606
[unit-resolution #588 #48 #696]: false
8fb8eaf7501da70df2af1f1c31da5641a4aee45b 304 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#36 := (f4 f5 #15)
#37 := (f3 #36 #17)
#690 := (pattern #37)
#11 := 0::Int
#79 := -1::Int
#83 := (* -1::Int #17)
#80 := (* -1::Int #15)
#102 := (mod #80 #83)
#258 := (+ #37 #102)
#259 := (= #258 0::Int)
#38 := (mod #15 #17)
#255 := (* -1::Int #38)
#256 := (+ #37 #255)
#257 := (= #256 0::Int)
#57 := (<= #17 0::Int)
#149 := (>= #15 0::Int)
#202 := (or #149 #57)
#203 := (not #202)
#53 := (<= #15 0::Int)
#198 := (or #53 #57)
#199 := (not #198)
#206 := (or #199 #203)
#260 := (if #206 #257 #259)
#254 := (= #37 0::Int)
#19 := (= #15 0::Int)
#261 := (if #19 #254 #260)
#253 := (= #37 #15)
#20 := (= #17 0::Int)
#262 := (if #20 #253 #261)
#691 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #690) #262)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#694 := (iff #265 #691)
#692 := (iff #262 #262)
#693 := [refl]: #692
#695 := [quant-intro #693]: #694
#108 := (* -1::Int #102)
#222 := (if #206 #38 #108)
#225 := (if #19 0::Int #222)
#228 := (if #20 #15 #225)
#231 := (= #37 #228)
#234 := (forall (vars (?v0 Int) (?v1 Int)) #231)
#266 := (iff #234 #265)
#263 := (iff #231 #262)
#264 := [rewrite]: #263
#267 := [quant-intro #264]: #266
#58 := (not #57)
#152 := (not #149)
#155 := (and #152 #58)
#54 := (not #53)
#61 := (and #54 #58)
#158 := (or #61 #155)
#174 := (if #158 #38 #108)
#177 := (if #19 0::Int #174)
#180 := (if #20 #15 #177)
#183 := (= #37 #180)
#186 := (forall (vars (?v0 Int) (?v1 Int)) #183)
#235 := (iff #186 #234)
#232 := (iff #183 #231)
#229 := (= #180 #228)
#226 := (= #177 #225)
#223 := (= #174 #222)
#207 := (iff #158 #206)
#204 := (iff #155 #203)
#205 := [rewrite]: #204
#200 := (iff #61 #199)
#201 := [rewrite]: #200
#208 := [monotonicity #201 #205]: #207
#224 := [monotonicity #208]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [quant-intro #233]: #235
#193 := (~ #186 #186)
#148 := (~ #183 #183)
#192 := [refl]: #148
#196 := [nnf-pos #192]: #193
#64 := (<= 0::Int #15)
#65 := (not #64)
#73 := (and #65 #58)
#76 := (or #61 #73)
#113 := (if #76 #38 #108)
#116 := (if #19 0::Int #113)
#119 := (if #20 #15 #116)
#122 := (= #37 #119)
#125 := (forall (vars (?v0 Int) (?v1 Int)) #122)
#187 := (iff #125 #186)
#184 := (iff #122 #183)
#181 := (= #119 #180)
#178 := (= #116 #177)
#175 := (= #113 #174)
#159 := (iff #76 #158)
#156 := (iff #73 #155)
#153 := (iff #65 #152)
#150 := (iff #64 #149)
#151 := [rewrite]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#176 := [monotonicity #160]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#30 := (- #17)
#29 := (- #15)
#39 := (mod #29 #30)
#40 := (- #39)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#41 := (if #27 #38 #40)
#42 := (if #19 0::Int #41)
#43 := (if #20 #15 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#126 := (iff #45 #125)
#123 := (iff #44 #122)
#120 := (= #43 #119)
#117 := (= #42 #116)
#114 := (= #41 #113)
#111 := (= #40 #108)
#105 := (- #102)
#109 := (= #105 #108)
#110 := [rewrite]: #109
#106 := (= #40 #105)
#103 := (= #39 #102)
#84 := (= #30 #83)
#85 := [rewrite]: #84
#81 := (= #29 #80)
#82 := [rewrite]: #81
#104 := [monotonicity #82 #85]: #103
#107 := [monotonicity #104]: #106
#112 := [trans #107 #110]: #111
#77 := (iff #27 #76)
#74 := (iff #26 #73)
#59 := (iff #23 #58)
#60 := [rewrite]: #59
#66 := (iff #25 #65)
#70 := (iff #65 #65)
#68 := (iff #64 #64)
#69 := [rewrite]: #68
#71 := [monotonicity #69]: #70
#67 := [rewrite]: #66
#72 := [trans #67 #71]: #66
#75 := [monotonicity #72 #60]: #74
#62 := (iff #24 #61)
#55 := (iff #22 #54)
#56 := [rewrite]: #55
#63 := [monotonicity #56 #60]: #62
#78 := [monotonicity #63 #75]: #77
#115 := [monotonicity #78 #112]: #114
#118 := [monotonicity #115]: #117
#121 := [monotonicity #118]: #120
#124 := [monotonicity #121]: #123
#127 := [quant-intro #124]: #126
#49 := [asserted]: #45
#128 := [mp #49 #127]: #125
#189 := [mp #128 #188]: #186
#197 := [mp~ #189 #196]: #186
#237 := [mp #197 #236]: #234
#268 := [mp #237 #267]: #265
#696 := [mp #268 #695]: #691
#8 := 3::Int
#9 := (f4 f5 3::Int)
#10 := (f3 #9 3::Int)
#12 := (= #10 0::Int)
#13 := (not #12)
#47 := [asserted]: #13
#517 := (not #691)
#612 := (or #517 #12)
#334 := (* -1::Int 3::Int)
#464 := (mod #334 #334)
#671 := (+ #10 #464)
#345 := (= #671 0::Int)
#361 := (mod 3::Int 3::Int)
#340 := (* -1::Int #361)
#675 := (+ #10 #340)
#677 := (= #675 0::Int)
#355 := (<= 3::Int 0::Int)
#358 := (>= 3::Int 0::Int)
#359 := (or #358 #355)
#360 := (not #359)
#356 := (or #355 #355)
#347 := (not #356)
#357 := (or #347 #360)
#346 := (if #357 #677 #345)
#269 := (= 3::Int 0::Int)
#678 := (if #269 #12 #346)
#354 := (= #10 3::Int)
#679 := (if #269 #354 #678)
#613 := (or #517 #679)
#501 := (iff #613 #612)
#518 := (iff #612 #612)
#519 := [rewrite]: #518
#467 := (iff #679 #12)
#621 := (if false #354 #12)
#507 := (iff #621 #12)
#508 := [rewrite]: #507
#624 := (iff #679 #621)
#622 := (iff #678 #12)
#463 := (if false #12 #12)
#619 := (iff #463 #12)
#620 := [rewrite]: #619
#465 := (iff #678 #463)
#627 := (iff #346 #12)
#1 := true
#631 := (if true #12 #12)
#632 := (iff #631 #12)
#633 := [rewrite]: #632
#625 := (iff #346 #631)
#629 := (iff #345 #12)
#486 := (= #671 #10)
#366 := (+ #10 0::Int)
#646 := (= #366 #10)
#647 := [rewrite]: #646
#484 := (= #671 #366)
#637 := (= #464 0::Int)
#649 := -3::Int
#640 := (mod -3::Int -3::Int)
#641 := (= #640 0::Int)
#642 := [rewrite]: #641
#635 := (= #464 #640)
#638 := (= #334 -3::Int)
#639 := [rewrite]: #638
#636 := [monotonicity #639 #639]: #635
#643 := [trans #636 #642]: #637
#485 := [monotonicity #643]: #484
#628 := [trans #485 #647]: #486
#630 := [monotonicity #628]: #629
#648 := (iff #677 #12)
#362 := (= #675 #10)
#367 := (= #675 #366)
#655 := (= #340 0::Int)
#375 := (* -1::Int 0::Int)
#654 := (= #375 0::Int)
#651 := [rewrite]: #654
#376 := (= #340 #375)
#652 := (= #361 0::Int)
#653 := [rewrite]: #652
#650 := [monotonicity #653]: #376
#365 := [trans #650 #651]: #655
#368 := [monotonicity #365]: #367
#644 := [trans #368 #647]: #362
#645 := [monotonicity #644]: #648
#382 := (iff #357 true)
#664 := (or true false)
#303 := (iff #664 true)
#666 := [rewrite]: #303
#380 := (iff #357 #664)
#657 := (iff #360 false)
#309 := (not true)
#670 := (iff #309 false)
#656 := [rewrite]: #670
#669 := (iff #360 #309)
#668 := (iff #359 true)
#659 := (iff #359 #664)
#676 := (iff #355 false)
#682 := [rewrite]: #676
#662 := (iff #358 true)
#663 := [rewrite]: #662
#665 := [monotonicity #663 #682]: #659
#308 := [trans #665 #666]: #668
#667 := [monotonicity #308]: #669
#379 := [trans #667 #656]: #657
#660 := (iff #347 true)
#658 := (not false)
#323 := (iff #658 true)
#324 := [rewrite]: #323
#321 := (iff #347 #658)
#674 := (iff #356 false)
#672 := (or false false)
#673 := (iff #672 false)
#333 := [rewrite]: #673
#332 := (iff #356 #672)
#337 := [monotonicity #682 #682]: #332
#317 := [trans #337 #333]: #674
#322 := [monotonicity #317]: #321
#661 := [trans #322 #324]: #660
#381 := [monotonicity #661 #379]: #380
#275 := [trans #381 #666]: #382
#626 := [monotonicity #275 #645 #630]: #625
#634 := [trans #626 #633]: #627
#680 := (iff #269 false)
#681 := [rewrite]: #680
#466 := [monotonicity #681 #634]: #465
#623 := [trans #466 #620]: #622
#506 := [monotonicity #681 #623]: #624
#615 := [trans #506 #508]: #467
#516 := [monotonicity #615]: #501
#512 := [trans #516 #519]: #501
#616 := [quant-inst #8 #8]: #613
#520 := [mp #616 #512]: #612
[unit-resolution #520 #47 #696]: false
02010738b40a0ce955cc2273aa34fc24db09e1c2 335 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#38 := (f4 f5 #16)
#39 := (f3 #38 #18)
#692 := (pattern #39)
#20 := 0::Int
#81 := -1::Int
#85 := (* -1::Int #18)
#82 := (* -1::Int #16)
#104 := (mod #82 #85)
#260 := (+ #39 #104)
#261 := (= #260 0::Int)
#40 := (mod #16 #18)
#257 := (* -1::Int #40)
#258 := (+ #39 #257)
#259 := (= #258 0::Int)
#59 := (<= #18 0::Int)
#151 := (>= #16 0::Int)
#204 := (or #151 #59)
#205 := (not #204)
#55 := (<= #16 0::Int)
#200 := (or #55 #59)
#201 := (not #200)
#208 := (or #201 #205)
#262 := (if #208 #259 #261)
#256 := (= #39 0::Int)
#21 := (= #16 0::Int)
#263 := (if #21 #256 #262)
#255 := (= #39 #16)
#22 := (= #18 0::Int)
#264 := (if #22 #255 #263)
#693 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #692) #264)
#267 := (forall (vars (?v0 Int) (?v1 Int)) #264)
#696 := (iff #267 #693)
#694 := (iff #264 #264)
#695 := [refl]: #694
#697 := [quant-intro #695]: #696
#110 := (* -1::Int #104)
#224 := (if #208 #40 #110)
#227 := (if #21 0::Int #224)
#230 := (if #22 #16 #227)
#233 := (= #39 #230)
#236 := (forall (vars (?v0 Int) (?v1 Int)) #233)
#268 := (iff #236 #267)
#265 := (iff #233 #264)
#266 := [rewrite]: #265
#269 := [quant-intro #266]: #268
#60 := (not #59)
#154 := (not #151)
#157 := (and #154 #60)
#56 := (not #55)
#63 := (and #56 #60)
#160 := (or #63 #157)
#176 := (if #160 #40 #110)
#179 := (if #21 0::Int #176)
#182 := (if #22 #16 #179)
#185 := (= #39 #182)
#188 := (forall (vars (?v0 Int) (?v1 Int)) #185)
#237 := (iff #188 #236)
#234 := (iff #185 #233)
#231 := (= #182 #230)
#228 := (= #179 #227)
#225 := (= #176 #224)
#209 := (iff #160 #208)
#206 := (iff #157 #205)
#207 := [rewrite]: #206
#202 := (iff #63 #201)
#203 := [rewrite]: #202
#210 := [monotonicity #203 #207]: #209
#226 := [monotonicity #210]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [quant-intro #235]: #237
#195 := (~ #188 #188)
#150 := (~ #185 #185)
#194 := [refl]: #150
#198 := [nnf-pos #194]: #195
#66 := (<= 0::Int #16)
#67 := (not #66)
#75 := (and #67 #60)
#78 := (or #63 #75)
#115 := (if #78 #40 #110)
#118 := (if #21 0::Int #115)
#121 := (if #22 #16 #118)
#124 := (= #39 #121)
#127 := (forall (vars (?v0 Int) (?v1 Int)) #124)
#189 := (iff #127 #188)
#186 := (iff #124 #185)
#183 := (= #121 #182)
#180 := (= #118 #179)
#177 := (= #115 #176)
#161 := (iff #78 #160)
#158 := (iff #75 #157)
#155 := (iff #67 #154)
#152 := (iff #66 #151)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#159 := [monotonicity #156]: #158
#162 := [monotonicity #159]: #161
#178 := [monotonicity #162]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [quant-intro #187]: #189
#32 := (- #18)
#31 := (- #16)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (if #29 #40 #42)
#44 := (if #21 0::Int #43)
#45 := (if #22 #16 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#128 := (iff #47 #127)
#125 := (iff #46 #124)
#122 := (= #45 #121)
#119 := (= #44 #118)
#116 := (= #43 #115)
#113 := (= #42 #110)
#107 := (- #104)
#111 := (= #107 #110)
#112 := [rewrite]: #111
#108 := (= #42 #107)
#105 := (= #41 #104)
#86 := (= #32 #85)
#87 := [rewrite]: #86
#83 := (= #31 #82)
#84 := [rewrite]: #83
#106 := [monotonicity #84 #87]: #105
#109 := [monotonicity #106]: #108
#114 := [trans #109 #112]: #113
#79 := (iff #29 #78)
#76 := (iff #28 #75)
#61 := (iff #25 #60)
#62 := [rewrite]: #61
#68 := (iff #27 #67)
#72 := (iff #67 #67)
#70 := (iff #66 #66)
#71 := [rewrite]: #70
#73 := [monotonicity #71]: #72
#69 := [rewrite]: #68
#74 := [trans #69 #73]: #68
#77 := [monotonicity #74 #62]: #76
#64 := (iff #26 #63)
#57 := (iff #24 #56)
#58 := [rewrite]: #57
#65 := [monotonicity #58 #62]: #64
#80 := [monotonicity #65 #77]: #79
#117 := [monotonicity #80 #114]: #116
#120 := [monotonicity #117]: #119
#123 := [monotonicity #120]: #122
#126 := [monotonicity #123]: #125
#129 := [quant-intro #126]: #128
#51 := [asserted]: #47
#130 := [mp #51 #129]: #127
#191 := [mp #130 #190]: #188
#199 := [mp~ #191 #198]: #188
#239 := [mp #199 #238]: #236
#270 := [mp #239 #269]: #267
#698 := [mp #270 #697]: #693
#12 := 2::Int
#10 := 3::Int
#8 := 5::Int
#9 := (f4 f5 5::Int)
#11 := (f3 #9 3::Int)
#13 := (= #11 2::Int)
#14 := (not #13)
#49 := [asserted]: #14
#603 := (not #693)
#604 := (or #603 #13)
#348 := (* -1::Int 3::Int)
#347 := (* -1::Int 5::Int)
#680 := (mod #347 #348)
#681 := (+ #11 #680)
#682 := (= #681 0::Int)
#679 := (mod 5::Int 3::Int)
#336 := (* -1::Int #679)
#466 := (+ #11 #336)
#673 := (= #466 0::Int)
#360 := (<= 3::Int 0::Int)
#359 := (>= 5::Int 0::Int)
#363 := (or #359 #360)
#342 := (not #363)
#349 := (<= 5::Int 0::Int)
#361 := (or #349 #360)
#362 := (not #361)
#677 := (or #362 #342)
#683 := (if #677 #673 #682)
#358 := (= #11 0::Int)
#357 := (= 5::Int 0::Int)
#678 := (if #357 #358 #683)
#356 := (= #11 5::Int)
#271 := (= 3::Int 0::Int)
#684 := (if #271 #356 #678)
#605 := (or #603 #684)
#606 := (iff #605 #604)
#591 := (iff #604 #604)
#593 := [rewrite]: #591
#613 := (iff #684 #13)
#600 := (if false #356 #13)
#612 := (iff #600 #13)
#608 := [rewrite]: #612
#610 := (iff #684 #600)
#601 := (iff #678 #13)
#619 := (if false #358 #13)
#607 := (iff #619 #13)
#609 := [rewrite]: #607
#616 := (iff #678 #619)
#525 := (iff #683 #13)
#615 := (= #11 -1::Int)
#1 := true
#521 := (if true #13 #615)
#523 := (iff #521 #13)
#524 := [rewrite]: #523
#514 := (iff #683 #521)
#518 := (iff #682 #615)
#289 := 1::Int
#626 := (+ 1::Int #11)
#617 := (= #626 0::Int)
#618 := (iff #617 #615)
#503 := [rewrite]: #618
#519 := (iff #682 #617)
#510 := (= #681 #626)
#624 := (+ #11 1::Int)
#508 := (= #624 #626)
#509 := [rewrite]: #508
#625 := (= #681 #624)
#621 := (= #680 1::Int)
#628 := -3::Int
#632 := -5::Int
#629 := (mod -5::Int -3::Int)
#467 := (= #629 1::Int)
#468 := [rewrite]: #467
#636 := (= #680 #629)
#634 := (= #348 -3::Int)
#635 := [rewrite]: #634
#633 := (= #347 -5::Int)
#627 := [rewrite]: #633
#465 := [monotonicity #627 #635]: #636
#622 := [trans #465 #468]: #621
#623 := [monotonicity #622]: #625
#469 := [trans #623 #509]: #510
#614 := [monotonicity #469]: #519
#520 := [trans #614 #503]: #518
#630 := (iff #673 #13)
#649 := -2::Int
#642 := (+ -2::Int #11)
#639 := (= #642 0::Int)
#487 := (iff #639 #13)
#488 := [rewrite]: #487
#645 := (iff #673 #639)
#643 := (= #466 #642)
#651 := (+ #11 -2::Int)
#637 := (= #651 #642)
#638 := [rewrite]: #637
#640 := (= #466 #651)
#650 := (= #336 -2::Int)
#369 := (* -1::Int 2::Int)
#364 := (= #369 -2::Int)
#646 := [rewrite]: #364
#370 := (= #336 #369)
#367 := (= #679 2::Int)
#368 := [rewrite]: #367
#648 := [monotonicity #368]: #370
#647 := [trans #648 #646]: #650
#641 := [monotonicity #647]: #640
#644 := [trans #641 #638]: #643
#486 := [monotonicity #644]: #645
#631 := [trans #486 #488]: #630
#653 := (iff #677 true)
#671 := (or true false)
#658 := (iff #671 true)
#659 := [rewrite]: #658
#652 := (iff #677 #671)
#377 := (iff #342 false)
#383 := (not true)
#654 := (iff #383 false)
#655 := [rewrite]: #654
#384 := (iff #342 #383)
#381 := (iff #363 true)
#669 := (iff #363 #671)
#319 := (iff #360 false)
#660 := [rewrite]: #319
#310 := (iff #359 true)
#311 := [rewrite]: #310
#672 := [monotonicity #311 #660]: #669
#382 := [trans #672 #659]: #381
#277 := [monotonicity #382]: #384
#378 := [trans #277 #655]: #377
#668 := (iff #362 true)
#665 := (not false)
#667 := (iff #665 true)
#305 := [rewrite]: #667
#666 := (iff #362 #665)
#663 := (iff #361 false)
#323 := (or false false)
#326 := (iff #323 false)
#662 := [rewrite]: #326
#324 := (iff #361 #323)
#335 := (iff #349 false)
#676 := [rewrite]: #335
#325 := [monotonicity #676 #660]: #324
#664 := [trans #325 #662]: #663
#661 := [monotonicity #664]: #666
#670 := [trans #661 #305]: #668
#656 := [monotonicity #670 #378]: #652
#657 := [trans #656 #659]: #653
#522 := [monotonicity #657 #631 #520]: #514
#526 := [trans #522 #524]: #525
#339 := (iff #357 false)
#675 := [rewrite]: #339
#620 := [monotonicity #675 #526]: #616
#598 := [trans #620 #609]: #601
#674 := (iff #271 false)
#334 := [rewrite]: #674
#611 := [monotonicity #334 #598]: #610
#602 := [trans #611 #608]: #613
#590 := [monotonicity #602]: #606
#594 := [trans #590 #593]: #606
#599 := [quant-inst #8 #10]: #605
#595 := [mp #599 #594]: #604
[unit-resolution #595 #49 #698]: false
2b60566cabaa3881d0df54c1bbba88b2e72ec302 342 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#40 := (f4 f5 #18)
#41 := (f3 #40 #20)
#709 := (pattern #41)
#22 := 0::Int
#99 := -1::Int
#103 := (* -1::Int #20)
#100 := (* -1::Int #18)
#122 := (mod #100 #103)
#278 := (+ #41 #122)
#279 := (= #278 0::Int)
#42 := (mod #18 #20)
#275 := (* -1::Int #42)
#276 := (+ #41 #275)
#277 := (= #276 0::Int)
#77 := (<= #20 0::Int)
#169 := (>= #18 0::Int)
#222 := (or #169 #77)
#223 := (not #222)
#73 := (<= #18 0::Int)
#218 := (or #73 #77)
#219 := (not #218)
#226 := (or #219 #223)
#280 := (if #226 #277 #279)
#274 := (= #41 0::Int)
#23 := (= #18 0::Int)
#281 := (if #23 #274 #280)
#273 := (= #41 #18)
#24 := (= #20 0::Int)
#282 := (if #24 #273 #281)
#710 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #709) #282)
#285 := (forall (vars (?v0 Int) (?v1 Int)) #282)
#713 := (iff #285 #710)
#711 := (iff #282 #282)
#712 := [refl]: #711
#714 := [quant-intro #712]: #713
#128 := (* -1::Int #122)
#242 := (if #226 #42 #128)
#245 := (if #23 0::Int #242)
#248 := (if #24 #18 #245)
#251 := (= #41 #248)
#254 := (forall (vars (?v0 Int) (?v1 Int)) #251)
#286 := (iff #254 #285)
#283 := (iff #251 #282)
#284 := [rewrite]: #283
#287 := [quant-intro #284]: #286
#78 := (not #77)
#172 := (not #169)
#175 := (and #172 #78)
#74 := (not #73)
#81 := (and #74 #78)
#178 := (or #81 #175)
#194 := (if #178 #42 #128)
#197 := (if #23 0::Int #194)
#200 := (if #24 #18 #197)
#203 := (= #41 #200)
#206 := (forall (vars (?v0 Int) (?v1 Int)) #203)
#255 := (iff #206 #254)
#252 := (iff #203 #251)
#249 := (= #200 #248)
#246 := (= #197 #245)
#243 := (= #194 #242)
#227 := (iff #178 #226)
#224 := (iff #175 #223)
#225 := [rewrite]: #224
#220 := (iff #81 #219)
#221 := [rewrite]: #220
#228 := [monotonicity #221 #225]: #227
#244 := [monotonicity #228]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [monotonicity #250]: #252
#256 := [quant-intro #253]: #255
#168 := (~ #206 #206)
#213 := (~ #203 #203)
#167 := [refl]: #213
#216 := [nnf-pos #167]: #168
#84 := (<= 0::Int #18)
#85 := (not #84)
#93 := (and #85 #78)
#96 := (or #81 #93)
#133 := (if #96 #42 #128)
#136 := (if #23 0::Int #133)
#139 := (if #24 #18 #136)
#142 := (= #41 #139)
#145 := (forall (vars (?v0 Int) (?v1 Int)) #142)
#207 := (iff #145 #206)
#204 := (iff #142 #203)
#201 := (= #139 #200)
#198 := (= #136 #197)
#195 := (= #133 #194)
#179 := (iff #96 #178)
#176 := (iff #93 #175)
#173 := (iff #85 #172)
#170 := (iff #84 #169)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#196 := [monotonicity #180]: #195
#199 := [monotonicity #196]: #198
#202 := [monotonicity #199]: #201
#205 := [monotonicity #202]: #204
#208 := [quant-intro #205]: #207
#34 := (- #20)
#33 := (- #18)
#43 := (mod #33 #34)
#44 := (- #43)
#27 := (< 0::Int #20)
#29 := (< #18 0::Int)
#30 := (and #29 #27)
#26 := (< 0::Int #18)
#28 := (and #26 #27)
#31 := (or #28 #30)
#45 := (if #31 #42 #44)
#46 := (if #23 0::Int #45)
#47 := (if #24 #18 #46)
#48 := (= #41 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#146 := (iff #49 #145)
#143 := (iff #48 #142)
#140 := (= #47 #139)
#137 := (= #46 #136)
#134 := (= #45 #133)
#131 := (= #44 #128)
#125 := (- #122)
#129 := (= #125 #128)
#130 := [rewrite]: #129
#126 := (= #44 #125)
#123 := (= #43 #122)
#104 := (= #34 #103)
#105 := [rewrite]: #104
#101 := (= #33 #100)
#102 := [rewrite]: #101
#124 := [monotonicity #102 #105]: #123
#127 := [monotonicity #124]: #126
#132 := [trans #127 #130]: #131
#97 := (iff #31 #96)
#94 := (iff #30 #93)
#79 := (iff #27 #78)
#80 := [rewrite]: #79
#86 := (iff #29 #85)
#90 := (iff #85 #85)
#88 := (iff #84 #84)
#89 := [rewrite]: #88
#91 := [monotonicity #89]: #90
#87 := [rewrite]: #86
#92 := [trans #87 #91]: #86
#95 := [monotonicity #92 #80]: #94
#82 := (iff #28 #81)
#75 := (iff #26 #74)
#76 := [rewrite]: #75
#83 := [monotonicity #76 #80]: #82
#98 := [monotonicity #83 #95]: #97
#135 := [monotonicity #98 #132]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#144 := [monotonicity #141]: #143
#147 := [quant-intro #144]: #146
#53 := [asserted]: #49
#148 := [mp #53 #147]: #145
#209 := [mp #148 #208]: #206
#217 := [mp~ #209 #216]: #206
#257 := [mp #217 #256]: #254
#288 := [mp #257 #287]: #285
#715 := [mp #288 #714]: #710
#63 := -2::Int
#57 := -3::Int
#8 := 1::Int
#9 := (f4 f5 1::Int)
#60 := (f3 #9 -3::Int)
#66 := (= #60 -2::Int)
#69 := (not #66)
#13 := 2::Int
#14 := (- 2::Int)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#15 := (= #12 #14)
#16 := (not #15)
#70 := (iff #16 #69)
#67 := (iff #15 #66)
#64 := (= #14 -2::Int)
#65 := [rewrite]: #64
#61 := (= #12 #60)
#58 := (= #11 -3::Int)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#68 := [monotonicity #62 #65]: #67
#71 := [monotonicity #68]: #70
#51 := [asserted]: #16
#72 := [mp #51 #71]: #69
#626 := (not #710)
#618 := (or #626 #66)
#365 := (* -1::Int -3::Int)
#364 := (* -1::Int 1::Int)
#697 := (mod #364 #365)
#698 := (+ #60 #697)
#699 := (= #698 0::Int)
#696 := (mod 1::Int -3::Int)
#353 := (* -1::Int #696)
#483 := (+ #60 #353)
#690 := (= #483 0::Int)
#377 := (<= -3::Int 0::Int)
#376 := (>= 1::Int 0::Int)
#380 := (or #376 #377)
#359 := (not #380)
#366 := (<= 1::Int 0::Int)
#378 := (or #366 #377)
#379 := (not #378)
#694 := (or #379 #359)
#700 := (if #694 #690 #699)
#375 := (= #60 0::Int)
#374 := (= 1::Int 0::Int)
#695 := (if #374 #375 #700)
#373 := (= #60 1::Int)
#289 := (= -3::Int 0::Int)
#701 := (if #289 #373 #695)
#615 := (or #626 #701)
#627 := (iff #615 #618)
#629 := (iff #618 #618)
#625 := [rewrite]: #629
#637 := (iff #701 #66)
#536 := (if false #373 #66)
#635 := (iff #536 #66)
#520 := [rewrite]: #635
#636 := (iff #701 #536)
#542 := (iff #695 #66)
#538 := (if false #375 #66)
#540 := (iff #538 #66)
#541 := [rewrite]: #540
#531 := (iff #695 #538)
#535 := (iff #700 #66)
#631 := (iff #700 #536)
#486 := (iff #699 #66)
#485 := (+ 2::Int #60)
#640 := (= #485 0::Int)
#526 := (iff #640 #66)
#527 := [rewrite]: #526
#643 := (iff #699 #640)
#641 := (= #698 #485)
#653 := (+ #60 2::Int)
#638 := (= #653 #485)
#639 := [rewrite]: #638
#482 := (= #698 #653)
#652 := (= #697 2::Int)
#649 := (mod -1::Int 3::Int)
#645 := (= #649 2::Int)
#651 := [rewrite]: #645
#650 := (= #697 #649)
#647 := (= #365 3::Int)
#648 := [rewrite]: #647
#665 := (= #364 -1::Int)
#666 := [rewrite]: #665
#644 := [monotonicity #666 #648]: #650
#646 := [trans #644 #651]: #652
#484 := [monotonicity #646]: #482
#642 := [trans #484 #639]: #641
#525 := [monotonicity #642]: #643
#634 := [trans #525 #527]: #486
#504 := (iff #690 #373)
#657 := (+ -1::Int #60)
#660 := (= #657 0::Int)
#662 := (iff #660 #373)
#503 := [rewrite]: #662
#661 := (iff #690 #660)
#654 := (= #483 #657)
#667 := (+ #60 -1::Int)
#658 := (= #667 #657)
#659 := [rewrite]: #658
#664 := (= #483 #667)
#381 := (= #353 -1::Int)
#386 := (= #353 #364)
#384 := (= #696 1::Int)
#385 := [rewrite]: #384
#387 := [monotonicity #385]: #386
#663 := [trans #387 #666]: #381
#668 := [monotonicity #663]: #664
#655 := [trans #668 #659]: #654
#656 := [monotonicity #655]: #661
#505 := [trans #656 #503]: #504
#670 := (iff #694 false)
#672 := (or false false)
#669 := (iff #672 false)
#673 := [rewrite]: #669
#394 := (iff #694 #672)
#295 := (iff #359 false)
#1 := true
#682 := (not true)
#684 := (iff #682 false)
#322 := [rewrite]: #684
#400 := (iff #359 #682)
#398 := (iff #380 true)
#688 := (or true true)
#675 := (iff #688 true)
#676 := [rewrite]: #675
#686 := (iff #380 #688)
#336 := (iff #377 true)
#677 := [rewrite]: #336
#327 := (iff #376 true)
#328 := [rewrite]: #327
#689 := [monotonicity #328 #677]: #686
#399 := [trans #689 #676]: #398
#401 := [monotonicity #399]: #400
#671 := [trans #401 #322]: #295
#685 := (iff #379 false)
#683 := (iff #379 #682)
#680 := (iff #378 true)
#340 := (or false true)
#343 := (iff #340 true)
#679 := [rewrite]: #343
#341 := (iff #378 #340)
#352 := (iff #366 false)
#693 := [rewrite]: #352
#342 := [monotonicity #693 #677]: #341
#681 := [trans #342 #679]: #680
#678 := [monotonicity #681]: #683
#687 := [trans #678 #322]: #685
#395 := [monotonicity #687 #671]: #394
#674 := [trans #395 #673]: #670
#632 := [monotonicity #674 #505 #634]: #631
#537 := [trans #632 #520]: #535
#356 := (iff #374 false)
#692 := [rewrite]: #356
#539 := [monotonicity #692 #537]: #531
#543 := [trans #539 #541]: #542
#691 := (iff #289 false)
#351 := [rewrite]: #691
#633 := [monotonicity #351 #543]: #636
#624 := [trans #633 #520]: #637
#628 := [monotonicity #624]: #627
#630 := [trans #628 #625]: #627
#617 := [quant-inst #8 #57]: #615
#619 := [mp #617 #630]: #618
[unit-resolution #619 #72 #715]: false
30bd922ca9cd199af046cdc457f97af241893e95 323 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#704 := (pattern #38)
#12 := 0::Int
#93 := -1::Int
#97 := (* -1::Int #18)
#94 := (* -1::Int #16)
#116 := (mod #94 #97)
#272 := (+ #38 #116)
#273 := (= #272 0::Int)
#39 := (mod #16 #18)
#269 := (* -1::Int #39)
#270 := (+ #38 #269)
#271 := (= #270 0::Int)
#71 := (<= #18 0::Int)
#163 := (>= #16 0::Int)
#216 := (or #163 #71)
#217 := (not #216)
#67 := (<= #16 0::Int)
#212 := (or #67 #71)
#213 := (not #212)
#220 := (or #213 #217)
#274 := (if #220 #271 #273)
#268 := (= #38 0::Int)
#20 := (= #16 0::Int)
#275 := (if #20 #268 #274)
#267 := (= #38 #16)
#21 := (= #18 0::Int)
#276 := (if #21 #267 #275)
#705 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #704) #276)
#279 := (forall (vars (?v0 Int) (?v1 Int)) #276)
#708 := (iff #279 #705)
#706 := (iff #276 #276)
#707 := [refl]: #706
#709 := [quant-intro #707]: #708
#122 := (* -1::Int #116)
#236 := (if #220 #39 #122)
#239 := (if #20 0::Int #236)
#242 := (if #21 #16 #239)
#245 := (= #38 #242)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#280 := (iff #248 #279)
#277 := (iff #245 #276)
#278 := [rewrite]: #277
#281 := [quant-intro #278]: #280
#72 := (not #71)
#166 := (not #163)
#169 := (and #166 #72)
#68 := (not #67)
#75 := (and #68 #72)
#172 := (or #75 #169)
#188 := (if #172 #39 #122)
#191 := (if #20 0::Int #188)
#194 := (if #21 #16 #191)
#197 := (= #38 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#249 := (iff #200 #248)
#246 := (iff #197 #245)
#243 := (= #194 #242)
#240 := (= #191 #239)
#237 := (= #188 #236)
#221 := (iff #172 #220)
#218 := (iff #169 #217)
#219 := [rewrite]: #218
#214 := (iff #75 #213)
#215 := [rewrite]: #214
#222 := [monotonicity #215 #219]: #221
#238 := [monotonicity #222]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [quant-intro #247]: #249
#162 := (~ #200 #200)
#207 := (~ #197 #197)
#161 := [refl]: #207
#210 := [nnf-pos #161]: #162
#78 := (<= 0::Int #16)
#79 := (not #78)
#87 := (and #79 #72)
#90 := (or #75 #87)
#127 := (if #90 #39 #122)
#130 := (if #20 0::Int #127)
#133 := (if #21 #16 #130)
#136 := (= #38 #133)
#139 := (forall (vars (?v0 Int) (?v1 Int)) #136)
#201 := (iff #139 #200)
#198 := (iff #136 #197)
#195 := (= #133 #194)
#192 := (= #130 #191)
#189 := (= #127 #188)
#173 := (iff #90 #172)
#170 := (iff #87 #169)
#167 := (iff #79 #166)
#164 := (iff #78 #163)
#165 := [rewrite]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#190 := [monotonicity #174]: #189
#193 := [monotonicity #190]: #192
#196 := [monotonicity #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#140 := (iff #46 #139)
#137 := (iff #45 #136)
#134 := (= #44 #133)
#131 := (= #43 #130)
#128 := (= #42 #127)
#125 := (= #41 #122)
#119 := (- #116)
#123 := (= #119 #122)
#124 := [rewrite]: #123
#120 := (= #41 #119)
#117 := (= #40 #116)
#98 := (= #31 #97)
#99 := [rewrite]: #98
#95 := (= #30 #94)
#96 := [rewrite]: #95
#118 := [monotonicity #96 #99]: #117
#121 := [monotonicity #118]: #120
#126 := [trans #121 #124]: #125
#91 := (iff #28 #90)
#88 := (iff #27 #87)
#73 := (iff #24 #72)
#74 := [rewrite]: #73
#80 := (iff #26 #79)
#84 := (iff #79 #79)
#82 := (iff #78 #78)
#83 := [rewrite]: #82
#85 := [monotonicity #83]: #84
#81 := [rewrite]: #80
#86 := [trans #81 #85]: #80
#89 := [monotonicity #86 #74]: #88
#76 := (iff #25 #75)
#69 := (iff #23 #68)
#70 := [rewrite]: #69
#77 := [monotonicity #70 #74]: #76
#92 := [monotonicity #77 #89]: #91
#129 := [monotonicity #92 #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [quant-intro #138]: #140
#50 := [asserted]: #46
#142 := [mp #50 #141]: #139
#203 := [mp #142 #202]: #200
#211 := [mp~ #203 #210]: #200
#251 := [mp #211 #250]: #248
#282 := [mp #251 #281]: #279
#710 := [mp #282 #709]: #705
#54 := -3::Int
#8 := 3::Int
#9 := (f4 f5 3::Int)
#57 := (f3 #9 -3::Int)
#60 := (= #57 0::Int)
#63 := (not #60)
#10 := (- 3::Int)
#11 := (f3 #9 #10)
#13 := (= #11 0::Int)
#14 := (not #13)
#64 := (iff #14 #63)
#61 := (iff #13 #60)
#58 := (= #11 #57)
#55 := (= #10 -3::Int)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59]: #61
#65 := [monotonicity #62]: #64
#48 := [asserted]: #14
#66 := [mp #48 #65]: #63
#530 := (not #705)
#532 := (or #530 #60)
#359 := (* -1::Int -3::Int)
#685 := (* -1::Int 3::Int)
#360 := (mod #685 #359)
#692 := (+ #57 #360)
#693 := (= #692 0::Int)
#689 := (mod 3::Int -3::Int)
#691 := (* -1::Int #689)
#348 := (+ #57 #691)
#478 := (= #348 0::Int)
#361 := (<= -3::Int 0::Int)
#374 := (>= 3::Int 0::Int)
#371 := (or #374 #361)
#375 := (not #371)
#370 := (<= 3::Int 0::Int)
#372 := (or #370 #361)
#373 := (not #372)
#354 := (or #373 #375)
#694 := (if #354 #478 #693)
#369 := (= 3::Int 0::Int)
#695 := (if #369 #60 #694)
#368 := (= #57 3::Int)
#283 := (= -3::Int 0::Int)
#690 := (if #283 #368 #695)
#533 := (or #530 #690)
#534 := (iff #533 #532)
#536 := (iff #532 #532)
#537 := [rewrite]: #536
#630 := (iff #690 #60)
#481 := (if false #368 #60)
#626 := (iff #481 #60)
#627 := [rewrite]: #626
#629 := (iff #690 #481)
#521 := (iff #695 #60)
#479 := (if false #60 #60)
#634 := (iff #479 #60)
#636 := [rewrite]: #634
#638 := (iff #695 #479)
#637 := (iff #694 #60)
#480 := (iff #694 #479)
#648 := (iff #693 #60)
#647 := (= #692 #57)
#662 := (+ #57 0::Int)
#652 := (= #662 #57)
#653 := [rewrite]: #652
#640 := (= #692 #662)
#645 := (= #360 0::Int)
#499 := (mod -3::Int 3::Int)
#643 := (= #499 0::Int)
#644 := [rewrite]: #643
#500 := (= #360 #499)
#657 := (= #359 3::Int)
#498 := [rewrite]: #657
#656 := (= #685 -3::Int)
#651 := [rewrite]: #656
#642 := [monotonicity #651 #498]: #500
#639 := [trans #642 #644]: #645
#646 := [monotonicity #639]: #640
#641 := [trans #646 #653]: #647
#477 := [monotonicity #641]: #648
#650 := (iff #478 #60)
#654 := (= #348 #57)
#659 := (= #348 #662)
#376 := (= #691 0::Int)
#380 := (* -1::Int 0::Int)
#660 := (= #380 0::Int)
#661 := [rewrite]: #660
#381 := (= #691 #380)
#669 := (= #689 0::Int)
#379 := [rewrite]: #669
#382 := [monotonicity #379]: #381
#658 := [trans #382 #661]: #376
#663 := [monotonicity #658]: #659
#649 := [trans #663 #653]: #654
#655 := [monotonicity #649]: #650
#668 := (iff #354 false)
#666 := (or false false)
#390 := (iff #666 false)
#664 := [rewrite]: #390
#667 := (iff #354 #666)
#396 := (iff #375 false)
#1 := true
#676 := (not true)
#673 := (iff #676 false)
#679 := [rewrite]: #673
#394 := (iff #375 #676)
#671 := (iff #371 true)
#323 := (or true true)
#684 := (iff #323 true)
#670 := [rewrite]: #684
#683 := (iff #371 #323)
#688 := (iff #361 true)
#331 := [rewrite]: #688
#682 := (iff #374 true)
#322 := [rewrite]: #682
#681 := [monotonicity #322 #331]: #683
#393 := [trans #681 #670]: #671
#395 := [monotonicity #393]: #394
#289 := [trans #395 #679]: #396
#317 := (iff #373 false)
#677 := (iff #373 #676)
#674 := (iff #372 true)
#672 := (or false true)
#337 := (iff #672 true)
#338 := [rewrite]: #337
#335 := (iff #372 #672)
#687 := (iff #370 false)
#347 := [rewrite]: #687
#336 := [monotonicity #347 #331]: #335
#675 := [trans #336 #338]: #674
#678 := [monotonicity #675]: #677
#680 := [trans #678 #679]: #317
#389 := [monotonicity #680 #289]: #667
#665 := [trans #389 #664]: #668
#633 := [monotonicity #665 #655 #477]: #480
#635 := [trans #633 #636]: #637
#346 := (iff #369 false)
#351 := [rewrite]: #346
#520 := [monotonicity #351 #635]: #638
#522 := [trans #520 #636]: #521
#696 := (iff #283 false)
#686 := [rewrite]: #696
#531 := [monotonicity #686 #522]: #629
#515 := [trans #531 #627]: #630
#535 := [monotonicity #515]: #534
#538 := [trans #535 #537]: #534
#526 := [quant-inst #8 #54]: #533
#631 := [mp #526 #538]: #532
[unit-resolution #631 #66 #710]: false
6eef1290fd4184aa5ca07b83a07cebe5b5459f61 351 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#40 := (f4 f5 #18)
#41 := (f3 #40 #20)
#708 := (pattern #41)
#22 := 0::Int
#63 := -1::Int
#102 := (* -1::Int #20)
#99 := (* -1::Int #18)
#121 := (mod #99 #102)
#277 := (+ #41 #121)
#278 := (= #277 0::Int)
#42 := (mod #18 #20)
#274 := (* -1::Int #42)
#275 := (+ #41 #274)
#276 := (= #275 0::Int)
#77 := (<= #20 0::Int)
#168 := (>= #18 0::Int)
#221 := (or #168 #77)
#222 := (not #221)
#73 := (<= #18 0::Int)
#217 := (or #73 #77)
#218 := (not #217)
#225 := (or #218 #222)
#279 := (if #225 #276 #278)
#273 := (= #41 0::Int)
#23 := (= #18 0::Int)
#280 := (if #23 #273 #279)
#272 := (= #41 #18)
#24 := (= #20 0::Int)
#281 := (if #24 #272 #280)
#709 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #708) #281)
#284 := (forall (vars (?v0 Int) (?v1 Int)) #281)
#712 := (iff #284 #709)
#710 := (iff #281 #281)
#711 := [refl]: #710
#713 := [quant-intro #711]: #712
#127 := (* -1::Int #121)
#241 := (if #225 #42 #127)
#244 := (if #23 0::Int #241)
#247 := (if #24 #18 #244)
#250 := (= #41 #247)
#253 := (forall (vars (?v0 Int) (?v1 Int)) #250)
#285 := (iff #253 #284)
#282 := (iff #250 #281)
#283 := [rewrite]: #282
#286 := [quant-intro #283]: #285
#78 := (not #77)
#171 := (not #168)
#174 := (and #171 #78)
#74 := (not #73)
#81 := (and #74 #78)
#177 := (or #81 #174)
#193 := (if #177 #42 #127)
#196 := (if #23 0::Int #193)
#199 := (if #24 #18 #196)
#202 := (= #41 #199)
#205 := (forall (vars (?v0 Int) (?v1 Int)) #202)
#254 := (iff #205 #253)
#251 := (iff #202 #250)
#248 := (= #199 #247)
#245 := (= #196 #244)
#242 := (= #193 #241)
#226 := (iff #177 #225)
#223 := (iff #174 #222)
#224 := [rewrite]: #223
#219 := (iff #81 #218)
#220 := [rewrite]: #219
#227 := [monotonicity #220 #224]: #226
#243 := [monotonicity #227]: #242
#246 := [monotonicity #243]: #245
#249 := [monotonicity #246]: #248
#252 := [monotonicity #249]: #251
#255 := [quant-intro #252]: #254
#167 := (~ #205 #205)
#212 := (~ #202 #202)
#166 := [refl]: #212
#215 := [nnf-pos #166]: #167
#84 := (<= 0::Int #18)
#85 := (not #84)
#93 := (and #85 #78)
#96 := (or #81 #93)
#132 := (if #96 #42 #127)
#135 := (if #23 0::Int #132)
#138 := (if #24 #18 #135)
#141 := (= #41 #138)
#144 := (forall (vars (?v0 Int) (?v1 Int)) #141)
#206 := (iff #144 #205)
#203 := (iff #141 #202)
#200 := (= #138 #199)
#197 := (= #135 #196)
#194 := (= #132 #193)
#178 := (iff #96 #177)
#175 := (iff #93 #174)
#172 := (iff #85 #171)
#169 := (iff #84 #168)
#170 := [rewrite]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#195 := [monotonicity #179]: #194
#198 := [monotonicity #195]: #197
#201 := [monotonicity #198]: #200
#204 := [monotonicity #201]: #203
#207 := [quant-intro #204]: #206
#34 := (- #20)
#33 := (- #18)
#43 := (mod #33 #34)
#44 := (- #43)
#27 := (< 0::Int #20)
#29 := (< #18 0::Int)
#30 := (and #29 #27)
#26 := (< 0::Int #18)
#28 := (and #26 #27)
#31 := (or #28 #30)
#45 := (if #31 #42 #44)
#46 := (if #23 0::Int #45)
#47 := (if #24 #18 #46)
#48 := (= #41 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#145 := (iff #49 #144)
#142 := (iff #48 #141)
#139 := (= #47 #138)
#136 := (= #46 #135)
#133 := (= #45 #132)
#130 := (= #44 #127)
#124 := (- #121)
#128 := (= #124 #127)
#129 := [rewrite]: #128
#125 := (= #44 #124)
#122 := (= #43 #121)
#103 := (= #34 #102)
#104 := [rewrite]: #103
#100 := (= #33 #99)
#101 := [rewrite]: #100
#123 := [monotonicity #101 #104]: #122
#126 := [monotonicity #123]: #125
#131 := [trans #126 #129]: #130
#97 := (iff #31 #96)
#94 := (iff #30 #93)
#79 := (iff #27 #78)
#80 := [rewrite]: #79
#86 := (iff #29 #85)
#90 := (iff #85 #85)
#88 := (iff #84 #84)
#89 := [rewrite]: #88
#91 := [monotonicity #89]: #90
#87 := [rewrite]: #86
#92 := [trans #87 #91]: #86
#95 := [monotonicity #92 #80]: #94
#82 := (iff #28 #81)
#75 := (iff #26 #74)
#76 := [rewrite]: #75
#83 := [monotonicity #76 #80]: #82
#98 := [monotonicity #83 #95]: #97
#134 := [monotonicity #98 #131]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [quant-intro #143]: #145
#53 := [asserted]: #49
#147 := [mp #53 #146]: #144
#208 := [mp #147 #207]: #205
#216 := [mp~ #208 #215]: #205
#256 := [mp #216 #255]: #253
#287 := [mp #256 #286]: #284
#714 := [mp #287 #713]: #709
#57 := -3::Int
#8 := 5::Int
#9 := (f4 f5 5::Int)
#60 := (f3 #9 -3::Int)
#66 := (= #60 -1::Int)
#69 := (not #66)
#13 := 1::Int
#14 := (- 1::Int)
#10 := 3::Int
#11 := (- 3::Int)
#12 := (f3 #9 #11)
#15 := (= #12 #14)
#16 := (not #15)
#70 := (iff #16 #69)
#67 := (iff #15 #66)
#64 := (= #14 -1::Int)
#65 := [rewrite]: #64
#61 := (= #12 #60)
#58 := (= #11 -3::Int)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#68 := [monotonicity #62 #65]: #67
#71 := [monotonicity #68]: #70
#51 := [asserted]: #16
#72 := [mp #51 #71]: #69
#619 := (not #709)
#620 := (or #619 #66)
#364 := (* -1::Int -3::Int)
#363 := (* -1::Int 5::Int)
#696 := (mod #363 #364)
#697 := (+ #60 #696)
#698 := (= #697 0::Int)
#695 := (mod 5::Int -3::Int)
#352 := (* -1::Int #695)
#482 := (+ #60 #352)
#689 := (= #482 0::Int)
#376 := (<= -3::Int 0::Int)
#375 := (>= 5::Int 0::Int)
#379 := (or #375 #376)
#358 := (not #379)
#365 := (<= 5::Int 0::Int)
#377 := (or #365 #376)
#378 := (not #377)
#693 := (or #378 #358)
#699 := (if #693 #689 #698)
#374 := (= #60 0::Int)
#373 := (= 5::Int 0::Int)
#694 := (if #373 #374 #699)
#372 := (= #60 5::Int)
#288 := (= -3::Int 0::Int)
#700 := (if #288 #372 #694)
#621 := (or #619 #700)
#622 := (iff #621 #620)
#607 := (iff #620 #620)
#609 := [rewrite]: #607
#629 := (iff #700 #66)
#616 := (if false #372 #66)
#628 := (iff #616 #66)
#624 := [rewrite]: #628
#626 := (iff #700 #616)
#617 := (iff #694 #66)
#635 := (if false #374 #66)
#623 := (iff #635 #66)
#625 := [rewrite]: #623
#632 := (iff #694 #635)
#541 := (iff #699 #66)
#383 := 2::Int
#504 := (= #60 2::Int)
#537 := (if false #504 #66)
#539 := (iff #537 #66)
#540 := [rewrite]: #539
#530 := (iff #699 #537)
#534 := (iff #698 #66)
#524 := (+ 1::Int #60)
#535 := (= #524 0::Int)
#634 := (iff #535 #66)
#519 := [rewrite]: #634
#630 := (iff #698 #535)
#485 := (= #697 #524)
#641 := (+ #60 1::Int)
#525 := (= #641 #524)
#526 := [rewrite]: #525
#639 := (= #697 #641)
#638 := (= #696 1::Int)
#643 := -5::Int
#652 := (mod -5::Int 3::Int)
#484 := (= #652 1::Int)
#637 := [rewrite]: #484
#481 := (= #696 #652)
#651 := (= #364 3::Int)
#645 := [rewrite]: #651
#644 := (= #363 -5::Int)
#650 := [rewrite]: #644
#483 := [monotonicity #650 #645]: #481
#640 := [trans #483 #637]: #638
#642 := [monotonicity #640]: #639
#633 := [trans #642 #526]: #485
#631 := [monotonicity #633]: #630
#536 := [trans #631 #519]: #534
#648 := (iff #689 #504)
#380 := -2::Int
#653 := (+ -2::Int #60)
#661 := (= #653 0::Int)
#646 := (iff #661 #504)
#647 := [rewrite]: #646
#502 := (iff #689 #661)
#660 := (= #482 #653)
#656 := (+ #60 -2::Int)
#654 := (= #656 #653)
#659 := [rewrite]: #654
#657 := (= #482 #656)
#663 := (= #352 -2::Int)
#386 := (* -1::Int 2::Int)
#662 := (= #386 -2::Int)
#666 := [rewrite]: #662
#664 := (= #352 #386)
#384 := (= #695 2::Int)
#385 := [rewrite]: #384
#665 := [monotonicity #385]: #664
#667 := [trans #665 #666]: #663
#658 := [monotonicity #667]: #657
#655 := [trans #658 #659]: #660
#503 := [monotonicity #655]: #502
#649 := [trans #503 #647]: #648
#669 := (iff #693 false)
#671 := (or false false)
#668 := (iff #671 false)
#672 := [rewrite]: #668
#393 := (iff #693 #671)
#294 := (iff #358 false)
#1 := true
#681 := (not true)
#683 := (iff #681 false)
#321 := [rewrite]: #683
#399 := (iff #358 #681)
#397 := (iff #379 true)
#687 := (or true true)
#674 := (iff #687 true)
#675 := [rewrite]: #674
#685 := (iff #379 #687)
#335 := (iff #376 true)
#676 := [rewrite]: #335
#326 := (iff #375 true)
#327 := [rewrite]: #326
#688 := [monotonicity #327 #676]: #685
#398 := [trans #688 #675]: #397
#400 := [monotonicity #398]: #399
#670 := [trans #400 #321]: #294
#684 := (iff #378 false)
#682 := (iff #378 #681)
#679 := (iff #377 true)
#339 := (or false true)
#342 := (iff #339 true)
#678 := [rewrite]: #342
#340 := (iff #377 #339)
#351 := (iff #365 false)
#692 := [rewrite]: #351
#341 := [monotonicity #692 #676]: #340
#680 := [trans #341 #678]: #679
#677 := [monotonicity #680]: #682
#686 := [trans #677 #321]: #684
#394 := [monotonicity #686 #670]: #393
#673 := [trans #394 #672]: #669
#538 := [monotonicity #673 #649 #536]: #530
#542 := [trans #538 #540]: #541
#355 := (iff #373 false)
#691 := [rewrite]: #355
#636 := [monotonicity #691 #542]: #632
#614 := [trans #636 #625]: #617
#690 := (iff #288 false)
#350 := [rewrite]: #690
#627 := [monotonicity #350 #614]: #626
#618 := [trans #627 #624]: #629
#606 := [monotonicity #618]: #622
#610 := [trans #606 #609]: #622
#615 := [quant-inst #8 #57]: #621
#611 := [mp #615 #610]: #620
[unit-resolution #611 #72 #714]: false
6e4e56fbe00a817abbb464ec634b76cfe95ffdd1 351 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#39 := (f4 f5 #17)
#40 := (f3 #39 #19)
#707 := (pattern #40)
#21 := 0::Int
#56 := -1::Int
#101 := (* -1::Int #19)
#98 := (* -1::Int #17)
#120 := (mod #98 #101)
#276 := (+ #40 #120)
#277 := (= #276 0::Int)
#41 := (mod #17 #19)
#273 := (* -1::Int #41)
#274 := (+ #40 #273)
#275 := (= #274 0::Int)
#76 := (<= #19 0::Int)
#167 := (>= #17 0::Int)
#220 := (or #167 #76)
#221 := (not #220)
#72 := (<= #17 0::Int)
#216 := (or #72 #76)
#217 := (not #216)
#224 := (or #217 #221)
#278 := (if #224 #275 #277)
#272 := (= #40 0::Int)
#22 := (= #17 0::Int)
#279 := (if #22 #272 #278)
#271 := (= #40 #17)
#23 := (= #19 0::Int)
#280 := (if #23 #271 #279)
#708 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #707) #280)
#283 := (forall (vars (?v0 Int) (?v1 Int)) #280)
#711 := (iff #283 #708)
#709 := (iff #280 #280)
#710 := [refl]: #709
#712 := [quant-intro #710]: #711
#126 := (* -1::Int #120)
#240 := (if #224 #41 #126)
#243 := (if #22 0::Int #240)
#246 := (if #23 #17 #243)
#249 := (= #40 #246)
#252 := (forall (vars (?v0 Int) (?v1 Int)) #249)
#284 := (iff #252 #283)
#281 := (iff #249 #280)
#282 := [rewrite]: #281
#285 := [quant-intro #282]: #284
#77 := (not #76)
#170 := (not #167)
#173 := (and #170 #77)
#73 := (not #72)
#80 := (and #73 #77)
#176 := (or #80 #173)
#192 := (if #176 #41 #126)
#195 := (if #22 0::Int #192)
#198 := (if #23 #17 #195)
#201 := (= #40 #198)
#204 := (forall (vars (?v0 Int) (?v1 Int)) #201)
#253 := (iff #204 #252)
#250 := (iff #201 #249)
#247 := (= #198 #246)
#244 := (= #195 #243)
#241 := (= #192 #240)
#225 := (iff #176 #224)
#222 := (iff #173 #221)
#223 := [rewrite]: #222
#218 := (iff #80 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#242 := [monotonicity #226]: #241
#245 := [monotonicity #242]: #244
#248 := [monotonicity #245]: #247
#251 := [monotonicity #248]: #250
#254 := [quant-intro #251]: #253
#166 := (~ #204 #204)
#211 := (~ #201 #201)
#165 := [refl]: #211
#214 := [nnf-pos #165]: #166
#83 := (<= 0::Int #17)
#84 := (not #83)
#92 := (and #84 #77)
#95 := (or #80 #92)
#131 := (if #95 #41 #126)
#134 := (if #22 0::Int #131)
#137 := (if #23 #17 #134)
#140 := (= #40 #137)
#143 := (forall (vars (?v0 Int) (?v1 Int)) #140)
#205 := (iff #143 #204)
#202 := (iff #140 #201)
#199 := (= #137 #198)
#196 := (= #134 #195)
#193 := (= #131 #192)
#177 := (iff #95 #176)
#174 := (iff #92 #173)
#171 := (iff #84 #170)
#168 := (iff #83 #167)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#194 := [monotonicity #178]: #193
#197 := [monotonicity #194]: #196
#200 := [monotonicity #197]: #199
#203 := [monotonicity #200]: #202
#206 := [quant-intro #203]: #205
#33 := (- #19)
#32 := (- #17)
#42 := (mod #32 #33)
#43 := (- #42)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#44 := (if #30 #41 #43)
#45 := (if #22 0::Int #44)
#46 := (if #23 #17 #45)
#47 := (= #40 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#144 := (iff #48 #143)
#141 := (iff #47 #140)
#138 := (= #46 #137)
#135 := (= #45 #134)
#132 := (= #44 #131)
#129 := (= #43 #126)
#123 := (- #120)
#127 := (= #123 #126)
#128 := [rewrite]: #127
#124 := (= #43 #123)
#121 := (= #42 #120)
#102 := (= #33 #101)
#103 := [rewrite]: #102
#99 := (= #32 #98)
#100 := [rewrite]: #99
#122 := [monotonicity #100 #103]: #121
#125 := [monotonicity #122]: #124
#130 := [trans #125 #128]: #129
#96 := (iff #30 #95)
#93 := (iff #29 #92)
#78 := (iff #26 #77)
#79 := [rewrite]: #78
#85 := (iff #28 #84)
#89 := (iff #84 #84)
#87 := (iff #83 #83)
#88 := [rewrite]: #87
#90 := [monotonicity #88]: #89
#86 := [rewrite]: #85
#91 := [trans #86 #90]: #85
#94 := [monotonicity #91 #79]: #93
#81 := (iff #27 #80)
#74 := (iff #25 #73)
#75 := [rewrite]: #74
#82 := [monotonicity #75 #79]: #81
#97 := [monotonicity #82 #94]: #96
#133 := [monotonicity #97 #130]: #132
#136 := [monotonicity #133]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [quant-intro #142]: #144
#52 := [asserted]: #48
#146 := [mp #52 #145]: #143
#207 := [mp #146 #206]: #204
#215 := [mp~ #207 #214]: #204
#255 := [mp #215 #254]: #252
#286 := [mp #255 #285]: #283
#713 := [mp #286 #712]: #708
#13 := 2::Int
#11 := 3::Int
#59 := (f4 f5 -1::Int)
#62 := (f3 #59 3::Int)
#65 := (= #62 2::Int)
#68 := (not #65)
#8 := 1::Int
#9 := (- 1::Int)
#10 := (f4 f5 #9)
#12 := (f3 #10 3::Int)
#14 := (= #12 2::Int)
#15 := (not #14)
#69 := (iff #15 #68)
#66 := (iff #14 #65)
#63 := (= #12 #62)
#60 := (= #10 #59)
#57 := (= #9 -1::Int)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#50 := [asserted]: #15
#71 := [mp #50 #70]: #68
#619 := (not #708)
#620 := (or #619 #65)
#363 := (* -1::Int 3::Int)
#362 := (* -1::Int -1::Int)
#695 := (mod #362 #363)
#696 := (+ #62 #695)
#697 := (= #696 0::Int)
#694 := (mod -1::Int 3::Int)
#351 := (* -1::Int #694)
#481 := (+ #62 #351)
#688 := (= #481 0::Int)
#375 := (<= 3::Int 0::Int)
#374 := (>= -1::Int 0::Int)
#378 := (or #374 #375)
#357 := (not #378)
#364 := (<= -1::Int 0::Int)
#376 := (or #364 #375)
#377 := (not #376)
#692 := (or #377 #357)
#698 := (if #692 #688 #697)
#373 := (= #62 0::Int)
#372 := (= -1::Int 0::Int)
#693 := (if #372 #373 #698)
#371 := (= #62 -1::Int)
#287 := (= 3::Int 0::Int)
#699 := (if #287 #371 #693)
#614 := (or #619 #699)
#605 := (iff #614 #620)
#608 := (iff #620 #620)
#609 := [rewrite]: #608
#617 := (iff #699 #65)
#625 := (if false #371 #65)
#623 := (iff #625 #65)
#628 := [rewrite]: #623
#626 := (iff #699 #625)
#613 := (iff #693 #65)
#631 := (if false #373 #65)
#624 := (iff #631 #65)
#616 := [rewrite]: #624
#635 := (iff #693 #631)
#541 := (iff #698 #65)
#1 := true
#529 := (if true #65 #371)
#539 := (iff #529 #65)
#540 := [rewrite]: #539
#537 := (iff #698 #529)
#535 := (iff #697 #371)
#524 := (+ 1::Int #62)
#629 := (= #524 0::Int)
#518 := (iff #629 #371)
#533 := [rewrite]: #518
#630 := (iff #697 #629)
#632 := (= #696 #524)
#638 := (+ #62 1::Int)
#525 := (= #638 #524)
#484 := [rewrite]: #525
#641 := (= #696 #638)
#639 := (= #695 1::Int)
#650 := -3::Int
#480 := (mod 1::Int -3::Int)
#636 := (= #480 1::Int)
#637 := [rewrite]: #636
#482 := (= #695 #480)
#644 := (= #363 -3::Int)
#651 := [rewrite]: #644
#643 := (= #362 1::Int)
#649 := [rewrite]: #643
#483 := [monotonicity #649 #651]: #482
#640 := [trans #483 #637]: #639
#523 := [monotonicity #640]: #641
#534 := [trans #523 #484]: #632
#633 := [monotonicity #534]: #630
#536 := [trans #633 #533]: #535
#648 := (iff #688 #65)
#665 := -2::Int
#658 := (+ -2::Int #62)
#502 := (= #658 0::Int)
#646 := (iff #502 #65)
#647 := [rewrite]: #646
#503 := (iff #688 #502)
#660 := (= #481 #658)
#657 := (+ #62 -2::Int)
#659 := (= #657 #658)
#654 := [rewrite]: #659
#652 := (= #481 #657)
#655 := (= #351 -2::Int)
#664 := (* -1::Int 2::Int)
#662 := (= #664 -2::Int)
#666 := [rewrite]: #662
#379 := (= #351 #664)
#385 := (= #694 2::Int)
#663 := [rewrite]: #385
#661 := [monotonicity #663]: #379
#656 := [trans #661 #666]: #655
#653 := [monotonicity #656]: #652
#501 := [trans #653 #654]: #660
#645 := [monotonicity #501]: #503
#642 := [trans #645 #647]: #648
#383 := (iff #692 true)
#667 := (or false true)
#672 := (iff #667 true)
#382 := [rewrite]: #672
#671 := (iff #692 #667)
#392 := (iff #357 true)
#398 := (not false)
#669 := (iff #398 true)
#670 := [rewrite]: #669
#399 := (iff #357 #398)
#396 := (iff #378 false)
#686 := (or false false)
#673 := (iff #686 false)
#674 := [rewrite]: #673
#684 := (iff #378 #686)
#334 := (iff #375 false)
#675 := [rewrite]: #334
#325 := (iff #374 false)
#326 := [rewrite]: #325
#687 := [monotonicity #326 #675]: #684
#397 := [trans #687 #674]: #396
#293 := [monotonicity #397]: #399
#393 := [trans #293 #670]: #392
#683 := (iff #377 false)
#680 := (not true)
#682 := (iff #680 false)
#320 := [rewrite]: #682
#681 := (iff #377 #680)
#678 := (iff #376 true)
#338 := (or true false)
#341 := (iff #338 true)
#677 := [rewrite]: #341
#339 := (iff #376 #338)
#350 := (iff #364 true)
#691 := [rewrite]: #350
#340 := [monotonicity #691 #675]: #339
#679 := [trans #340 #677]: #678
#676 := [monotonicity #679]: #681
#685 := [trans #676 #320]: #683
#668 := [monotonicity #685 #393]: #671
#384 := [trans #668 #382]: #383
#538 := [monotonicity #384 #642 #536]: #537
#634 := [trans #538 #540]: #541
#354 := (iff #372 false)
#690 := [rewrite]: #354
#622 := [monotonicity #690 #634]: #635
#615 := [trans #622 #616]: #613
#689 := (iff #287 false)
#349 := [rewrite]: #689
#627 := [monotonicity #349 #615]: #626
#618 := [trans #627 #628]: #617
#606 := [monotonicity #618]: #605
#610 := [trans #606 #609]: #605
#621 := [quant-inst #56 #11]: #614
#611 := [mp #621 #610]: #620
[unit-resolution #611 #71 #713]: false
f9ffecc986aee817cb6d5df5a9e4ebfb5694a737 332 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#707 := (pattern #38)
#12 := 0::Int
#96 := -1::Int
#100 := (* -1::Int #18)
#97 := (* -1::Int #16)
#119 := (mod #97 #100)
#275 := (+ #38 #119)
#276 := (= #275 0::Int)
#39 := (mod #16 #18)
#272 := (* -1::Int #39)
#273 := (+ #38 #272)
#274 := (= #273 0::Int)
#74 := (<= #18 0::Int)
#166 := (>= #16 0::Int)
#219 := (or #166 #74)
#220 := (not #219)
#70 := (<= #16 0::Int)
#215 := (or #70 #74)
#216 := (not #215)
#223 := (or #216 #220)
#277 := (if #223 #274 #276)
#271 := (= #38 0::Int)
#20 := (= #16 0::Int)
#278 := (if #20 #271 #277)
#270 := (= #38 #16)
#21 := (= #18 0::Int)
#279 := (if #21 #270 #278)
#708 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #707) #279)
#282 := (forall (vars (?v0 Int) (?v1 Int)) #279)
#711 := (iff #282 #708)
#709 := (iff #279 #279)
#710 := [refl]: #709
#712 := [quant-intro #710]: #711
#125 := (* -1::Int #119)
#239 := (if #223 #39 #125)
#242 := (if #20 0::Int #239)
#245 := (if #21 #16 #242)
#248 := (= #38 #245)
#251 := (forall (vars (?v0 Int) (?v1 Int)) #248)
#283 := (iff #251 #282)
#280 := (iff #248 #279)
#281 := [rewrite]: #280
#284 := [quant-intro #281]: #283
#75 := (not #74)
#169 := (not #166)
#172 := (and #169 #75)
#71 := (not #70)
#78 := (and #71 #75)
#175 := (or #78 #172)
#191 := (if #175 #39 #125)
#194 := (if #20 0::Int #191)
#197 := (if #21 #16 #194)
#200 := (= #38 #197)
#203 := (forall (vars (?v0 Int) (?v1 Int)) #200)
#252 := (iff #203 #251)
#249 := (iff #200 #248)
#246 := (= #197 #245)
#243 := (= #194 #242)
#240 := (= #191 #239)
#224 := (iff #175 #223)
#221 := (iff #172 #220)
#222 := [rewrite]: #221
#217 := (iff #78 #216)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#241 := [monotonicity #225]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [quant-intro #250]: #252
#165 := (~ #203 #203)
#210 := (~ #200 #200)
#164 := [refl]: #210
#213 := [nnf-pos #164]: #165
#81 := (<= 0::Int #16)
#82 := (not #81)
#90 := (and #82 #75)
#93 := (or #78 #90)
#130 := (if #93 #39 #125)
#133 := (if #20 0::Int #130)
#136 := (if #21 #16 #133)
#139 := (= #38 #136)
#142 := (forall (vars (?v0 Int) (?v1 Int)) #139)
#204 := (iff #142 #203)
#201 := (iff #139 #200)
#198 := (= #136 #197)
#195 := (= #133 #194)
#192 := (= #130 #191)
#176 := (iff #93 #175)
#173 := (iff #90 #172)
#170 := (iff #82 #169)
#167 := (iff #81 #166)
#168 := [rewrite]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#193 := [monotonicity #177]: #192
#196 := [monotonicity #193]: #195
#199 := [monotonicity #196]: #198
#202 := [monotonicity #199]: #201
#205 := [quant-intro #202]: #204
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#143 := (iff #46 #142)
#140 := (iff #45 #139)
#137 := (= #44 #136)
#134 := (= #43 #133)
#131 := (= #42 #130)
#128 := (= #41 #125)
#122 := (- #119)
#126 := (= #122 #125)
#127 := [rewrite]: #126
#123 := (= #41 #122)
#120 := (= #40 #119)
#101 := (= #31 #100)
#102 := [rewrite]: #101
#98 := (= #30 #97)
#99 := [rewrite]: #98
#121 := [monotonicity #99 #102]: #120
#124 := [monotonicity #121]: #123
#129 := [trans #124 #127]: #128
#94 := (iff #28 #93)
#91 := (iff #27 #90)
#76 := (iff #24 #75)
#77 := [rewrite]: #76
#83 := (iff #26 #82)
#87 := (iff #82 #82)
#85 := (iff #81 #81)
#86 := [rewrite]: #85
#88 := [monotonicity #86]: #87
#84 := [rewrite]: #83
#89 := [trans #84 #88]: #83
#92 := [monotonicity #89 #77]: #91
#79 := (iff #25 #78)
#72 := (iff #23 #71)
#73 := [rewrite]: #72
#80 := [monotonicity #73 #77]: #79
#95 := [monotonicity #80 #92]: #94
#132 := [monotonicity #95 #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#144 := [quant-intro #141]: #143
#50 := [asserted]: #46
#145 := [mp #50 #144]: #142
#206 := [mp #145 #205]: #203
#214 := [mp~ #206 #213]: #203
#254 := [mp #214 #253]: #251
#285 := [mp #254 #284]: #282
#713 := [mp #285 #712]: #708
#8 := 3::Int
#54 := -3::Int
#57 := (f4 f5 -3::Int)
#60 := (f3 #57 3::Int)
#63 := (= #60 0::Int)
#66 := (not #63)
#9 := (- 3::Int)
#10 := (f4 f5 #9)
#11 := (f3 #10 3::Int)
#13 := (= #11 0::Int)
#14 := (not #13)
#67 := (iff #14 #66)
#64 := (iff #13 #63)
#61 := (= #11 #60)
#58 := (= #10 #57)
#55 := (= #9 -3::Int)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#48 := [asserted]: #14
#69 := [mp #48 #68]: #66
#539 := (not #708)
#540 := (or #539 #63)
#362 := (* -1::Int 3::Int)
#688 := (* -1::Int -3::Int)
#363 := (mod #688 #362)
#695 := (+ #60 #363)
#696 := (= #695 0::Int)
#692 := (mod -3::Int 3::Int)
#694 := (* -1::Int #692)
#351 := (+ #60 #694)
#481 := (= #351 0::Int)
#364 := (<= 3::Int 0::Int)
#377 := (>= -3::Int 0::Int)
#374 := (or #377 #364)
#378 := (not #374)
#373 := (<= -3::Int 0::Int)
#375 := (or #373 #364)
#376 := (not #375)
#357 := (or #376 #378)
#697 := (if #357 #481 #696)
#372 := (= -3::Int 0::Int)
#698 := (if #372 #63 #697)
#371 := (= #60 -3::Int)
#286 := (= 3::Int 0::Int)
#693 := (if #286 #371 #698)
#541 := (or #539 #693)
#631 := (iff #541 #540)
#622 := (iff #540 #540)
#624 := [rewrite]: #622
#537 := (iff #693 #63)
#518 := (if false #371 #63)
#536 := (iff #518 #63)
#529 := [rewrite]: #536
#533 := (iff #693 #518)
#630 := (iff #698 #63)
#525 := (if false #63 #63)
#534 := (iff #525 #63)
#629 := [rewrite]: #534
#484 := (iff #698 #525)
#523 := (iff #697 #63)
#1 := true
#637 := (if true #63 #63)
#638 := (iff #637 #63)
#641 := [rewrite]: #638
#639 := (iff #697 #637)
#483 := (iff #696 #63)
#480 := (= #695 #60)
#655 := (+ #60 0::Int)
#652 := (= #655 #60)
#653 := [rewrite]: #652
#644 := (= #695 #655)
#649 := (= #363 0::Int)
#646 := (mod 3::Int -3::Int)
#642 := (= #646 0::Int)
#643 := [rewrite]: #642
#647 := (= #363 #646)
#503 := (= #362 -3::Int)
#645 := [rewrite]: #503
#501 := (= #688 3::Int)
#502 := [rewrite]: #501
#648 := [monotonicity #502 #645]: #647
#650 := [trans #648 #643]: #649
#651 := [monotonicity #650]: #644
#482 := [trans #651 #653]: #480
#636 := [monotonicity #482]: #483
#654 := (iff #481 #63)
#658 := (= #351 #60)
#656 := (= #351 #655)
#662 := (= #694 0::Int)
#663 := (* -1::Int 0::Int)
#661 := (= #663 0::Int)
#665 := [rewrite]: #661
#664 := (= #694 #663)
#384 := (= #692 0::Int)
#385 := [rewrite]: #384
#379 := [monotonicity #385]: #664
#666 := [trans #379 #665]: #662
#657 := [monotonicity #666]: #656
#659 := [trans #657 #653]: #658
#660 := [monotonicity #659]: #654
#382 := (iff #357 true)
#393 := (or false true)
#668 := (iff #393 true)
#672 := [rewrite]: #668
#667 := (iff #357 #393)
#670 := (iff #378 true)
#397 := (not false)
#292 := (iff #397 true)
#669 := [rewrite]: #292
#398 := (iff #378 #397)
#674 := (iff #374 false)
#326 := (or false false)
#687 := (iff #326 false)
#673 := [rewrite]: #687
#686 := (iff #374 #326)
#691 := (iff #364 false)
#334 := [rewrite]: #691
#685 := (iff #377 false)
#325 := [rewrite]: #685
#684 := [monotonicity #325 #334]: #686
#396 := [trans #684 #673]: #674
#399 := [monotonicity #396]: #398
#392 := [trans #399 #669]: #670
#320 := (iff #376 false)
#679 := (not true)
#676 := (iff #679 false)
#682 := [rewrite]: #676
#680 := (iff #376 #679)
#677 := (iff #375 true)
#675 := (or true false)
#340 := (iff #675 true)
#341 := [rewrite]: #340
#338 := (iff #375 #675)
#690 := (iff #373 true)
#350 := [rewrite]: #690
#339 := [monotonicity #350 #334]: #338
#678 := [trans #339 #341]: #677
#681 := [monotonicity #678]: #680
#683 := [trans #681 #682]: #320
#671 := [monotonicity #683 #392]: #667
#383 := [trans #671 #672]: #382
#640 := [monotonicity #383 #660 #636]: #639
#524 := [trans #640 #641]: #523
#349 := (iff #372 false)
#354 := [rewrite]: #349
#632 := [monotonicity #354 #524]: #484
#633 := [trans #632 #629]: #630
#699 := (iff #286 false)
#689 := [rewrite]: #699
#535 := [monotonicity #689 #633]: #533
#538 := [trans #535 #529]: #537
#635 := [monotonicity #538]: #631
#616 := [trans #635 #624]: #631
#634 := [quant-inst #54 #8]: #541
#613 := [mp #634 #616]: #540
[unit-resolution #613 #69 #713]: false
3568b4797a3dd6439c3992352594a4fe4c338953 354 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#39 := (f4 f5 #17)
#40 := (f3 #39 #19)
#708 := (pattern #40)
#21 := 0::Int
#98 := -1::Int
#102 := (* -1::Int #19)
#99 := (* -1::Int #17)
#121 := (mod #99 #102)
#277 := (+ #40 #121)
#278 := (= #277 0::Int)
#41 := (mod #17 #19)
#274 := (* -1::Int #41)
#275 := (+ #40 #274)
#276 := (= #275 0::Int)
#76 := (<= #19 0::Int)
#168 := (>= #17 0::Int)
#221 := (or #168 #76)
#222 := (not #221)
#72 := (<= #17 0::Int)
#217 := (or #72 #76)
#218 := (not #217)
#225 := (or #218 #222)
#279 := (if #225 #276 #278)
#273 := (= #40 0::Int)
#22 := (= #17 0::Int)
#280 := (if #22 #273 #279)
#272 := (= #40 #17)
#23 := (= #19 0::Int)
#281 := (if #23 #272 #280)
#709 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #708) #281)
#284 := (forall (vars (?v0 Int) (?v1 Int)) #281)
#712 := (iff #284 #709)
#710 := (iff #281 #281)
#711 := [refl]: #710
#713 := [quant-intro #711]: #712
#127 := (* -1::Int #121)
#241 := (if #225 #41 #127)
#244 := (if #22 0::Int #241)
#247 := (if #23 #17 #244)
#250 := (= #40 #247)
#253 := (forall (vars (?v0 Int) (?v1 Int)) #250)
#285 := (iff #253 #284)
#282 := (iff #250 #281)
#283 := [rewrite]: #282
#286 := [quant-intro #283]: #285
#77 := (not #76)
#171 := (not #168)
#174 := (and #171 #77)
#73 := (not #72)
#80 := (and #73 #77)
#177 := (or #80 #174)
#193 := (if #177 #41 #127)
#196 := (if #22 0::Int #193)
#199 := (if #23 #17 #196)
#202 := (= #40 #199)
#205 := (forall (vars (?v0 Int) (?v1 Int)) #202)
#254 := (iff #205 #253)
#251 := (iff #202 #250)
#248 := (= #199 #247)
#245 := (= #196 #244)
#242 := (= #193 #241)
#226 := (iff #177 #225)
#223 := (iff #174 #222)
#224 := [rewrite]: #223
#219 := (iff #80 #218)
#220 := [rewrite]: #219
#227 := [monotonicity #220 #224]: #226
#243 := [monotonicity #227]: #242
#246 := [monotonicity #243]: #245
#249 := [monotonicity #246]: #248
#252 := [monotonicity #249]: #251
#255 := [quant-intro #252]: #254
#214 := (~ #205 #205)
#210 := (~ #202 #202)
#213 := [refl]: #210
#215 := [nnf-pos #213]: #214
#83 := (<= 0::Int #17)
#84 := (not #83)
#92 := (and #84 #77)
#95 := (or #80 #92)
#132 := (if #95 #41 #127)
#135 := (if #22 0::Int #132)
#138 := (if #23 #17 #135)
#141 := (= #40 #138)
#144 := (forall (vars (?v0 Int) (?v1 Int)) #141)
#206 := (iff #144 #205)
#203 := (iff #141 #202)
#200 := (= #138 #199)
#197 := (= #135 #196)
#194 := (= #132 #193)
#178 := (iff #95 #177)
#175 := (iff #92 #174)
#172 := (iff #84 #171)
#169 := (iff #83 #168)
#170 := [rewrite]: #169
#173 := [monotonicity #170]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#195 := [monotonicity #179]: #194
#198 := [monotonicity #195]: #197
#201 := [monotonicity #198]: #200
#204 := [monotonicity #201]: #203
#207 := [quant-intro #204]: #206
#33 := (- #19)
#32 := (- #17)
#42 := (mod #32 #33)
#43 := (- #42)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#44 := (if #30 #41 #43)
#45 := (if #22 0::Int #44)
#46 := (if #23 #17 #45)
#47 := (= #40 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#145 := (iff #48 #144)
#142 := (iff #47 #141)
#139 := (= #46 #138)
#136 := (= #45 #135)
#133 := (= #44 #132)
#130 := (= #43 #127)
#124 := (- #121)
#128 := (= #124 #127)
#129 := [rewrite]: #128
#125 := (= #43 #124)
#122 := (= #42 #121)
#103 := (= #33 #102)
#104 := [rewrite]: #103
#100 := (= #32 #99)
#101 := [rewrite]: #100
#123 := [monotonicity #101 #104]: #122
#126 := [monotonicity #123]: #125
#131 := [trans #126 #129]: #130
#96 := (iff #30 #95)
#93 := (iff #29 #92)
#78 := (iff #26 #77)
#79 := [rewrite]: #78
#85 := (iff #28 #84)
#89 := (iff #84 #84)
#87 := (iff #83 #83)
#88 := [rewrite]: #87
#90 := [monotonicity #88]: #89
#86 := [rewrite]: #85
#91 := [trans #86 #90]: #85
#94 := [monotonicity #91 #79]: #93
#81 := (iff #27 #80)
#74 := (iff #25 #73)
#75 := [rewrite]: #74
#82 := [monotonicity #75 #79]: #81
#97 := [monotonicity #82 #94]: #96
#134 := [monotonicity #97 #131]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [quant-intro #143]: #145
#52 := [asserted]: #48
#147 := [mp #52 #146]: #144
#208 := [mp #147 #207]: #205
#216 := [mp~ #208 #215]: #205
#256 := [mp #216 #255]: #253
#287 := [mp #256 #286]: #284
#714 := [mp #287 #713]: #709
#13 := 1::Int
#11 := 3::Int
#56 := -5::Int
#59 := (f4 f5 -5::Int)
#62 := (f3 #59 3::Int)
#65 := (= #62 1::Int)
#68 := (not #65)
#8 := 5::Int
#9 := (- 5::Int)
#10 := (f4 f5 #9)
#12 := (f3 #10 3::Int)
#14 := (= #12 1::Int)
#15 := (not #14)
#69 := (iff #15 #68)
#66 := (iff #14 #65)
#63 := (= #12 #62)
#60 := (= #10 #59)
#57 := (= #9 -5::Int)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#50 := [asserted]: #15
#71 := [mp #50 #70]: #68
#615 := (not #709)
#622 := (or #615 #65)
#364 := (* -1::Int 3::Int)
#363 := (* -1::Int -5::Int)
#696 := (mod #363 #364)
#697 := (+ #62 #696)
#698 := (= #697 0::Int)
#695 := (mod -5::Int 3::Int)
#352 := (* -1::Int #695)
#482 := (+ #62 #352)
#689 := (= #482 0::Int)
#376 := (<= 3::Int 0::Int)
#375 := (>= -5::Int 0::Int)
#379 := (or #375 #376)
#358 := (not #379)
#365 := (<= -5::Int 0::Int)
#377 := (or #365 #376)
#378 := (not #377)
#693 := (or #378 #358)
#699 := (if #693 #689 #698)
#374 := (= #62 0::Int)
#373 := (= -5::Int 0::Int)
#694 := (if #373 #374 #699)
#372 := (= #62 -5::Int)
#288 := (= 3::Int 0::Int)
#700 := (if #288 #372 #694)
#606 := (or #615 #700)
#609 := (iff #606 #622)
#611 := (iff #622 #622)
#612 := [rewrite]: #611
#620 := (iff #700 #65)
#628 := (if false #372 #65)
#618 := (iff #628 #65)
#619 := [rewrite]: #618
#624 := (iff #700 #628)
#626 := (iff #694 #65)
#623 := (if false #374 #65)
#614 := (iff #623 #65)
#616 := [rewrite]: #614
#625 := (iff #694 #623)
#632 := (iff #699 #65)
#519 := -2::Int
#534 := (= #62 -2::Int)
#1 := true
#539 := (if true #65 #534)
#542 := (iff #539 #65)
#635 := [rewrite]: #542
#540 := (iff #699 #539)
#530 := (iff #698 #534)
#484 := 2::Int
#525 := (+ 2::Int #62)
#630 := (= #525 0::Int)
#536 := (iff #630 #534)
#537 := [rewrite]: #536
#631 := (iff #698 #630)
#633 := (= #697 #525)
#639 := (+ #62 2::Int)
#526 := (= #639 #525)
#485 := [rewrite]: #526
#642 := (= #697 #639)
#640 := (= #696 2::Int)
#650 := -3::Int
#652 := (mod 5::Int -3::Int)
#637 := (= #652 2::Int)
#638 := [rewrite]: #637
#481 := (= #696 #652)
#651 := (= #364 -3::Int)
#645 := [rewrite]: #651
#643 := (= #363 5::Int)
#644 := [rewrite]: #643
#483 := [monotonicity #644 #645]: #481
#641 := [trans #483 #638]: #640
#524 := [monotonicity #641]: #642
#535 := [trans #524 #485]: #633
#634 := [monotonicity #535]: #631
#538 := [trans #634 #537]: #530
#648 := (iff #689 #65)
#654 := (+ -1::Int #62)
#502 := (= #654 0::Int)
#646 := (iff #502 #65)
#647 := [rewrite]: #646
#503 := (iff #689 #502)
#655 := (= #482 #654)
#657 := (+ #62 -1::Int)
#659 := (= #657 #654)
#660 := [rewrite]: #659
#658 := (= #482 #657)
#667 := (= #352 -1::Int)
#665 := (* -1::Int 1::Int)
#666 := (= #665 -1::Int)
#663 := [rewrite]: #666
#380 := (= #352 #665)
#386 := (= #695 1::Int)
#664 := [rewrite]: #386
#662 := [monotonicity #664]: #380
#656 := [trans #662 #663]: #667
#653 := [monotonicity #656]: #658
#661 := [trans #653 #660]: #655
#504 := [monotonicity #661]: #503
#649 := [trans #504 #647]: #648
#384 := (iff #693 true)
#668 := (or false true)
#673 := (iff #668 true)
#383 := [rewrite]: #673
#672 := (iff #693 #668)
#393 := (iff #358 true)
#399 := (not false)
#670 := (iff #399 true)
#671 := [rewrite]: #670
#400 := (iff #358 #399)
#397 := (iff #379 false)
#687 := (or false false)
#674 := (iff #687 false)
#675 := [rewrite]: #674
#685 := (iff #379 #687)
#335 := (iff #376 false)
#676 := [rewrite]: #335
#326 := (iff #375 false)
#327 := [rewrite]: #326
#688 := [monotonicity #327 #676]: #685
#398 := [trans #688 #675]: #397
#294 := [monotonicity #398]: #400
#394 := [trans #294 #671]: #393
#684 := (iff #378 false)
#681 := (not true)
#683 := (iff #681 false)
#321 := [rewrite]: #683
#682 := (iff #378 #681)
#679 := (iff #377 true)
#339 := (or true false)
#342 := (iff #339 true)
#678 := [rewrite]: #342
#340 := (iff #377 #339)
#351 := (iff #365 true)
#692 := [rewrite]: #351
#341 := [monotonicity #692 #676]: #340
#680 := [trans #341 #678]: #679
#677 := [monotonicity #680]: #682
#686 := [trans #677 #321]: #684
#669 := [monotonicity #686 #394]: #672
#385 := [trans #669 #383]: #384
#541 := [monotonicity #385 #649 #538]: #540
#636 := [trans #541 #635]: #632
#355 := (iff #373 false)
#691 := [rewrite]: #355
#617 := [monotonicity #691 #636]: #625
#627 := [trans #617 #616]: #626
#690 := (iff #288 false)
#350 := [rewrite]: #690
#629 := [monotonicity #350 #627]: #624
#621 := [trans #629 #619]: #620
#610 := [monotonicity #621]: #609
#608 := [trans #610 #612]: #609
#607 := [quant-inst #56 #11]: #606
#613 := [mp #607 #608]: #622
[unit-resolution #613 #71 #714]: false
e74a02aac7e3907e33f4c582e7dc7fb7e61206b6 351 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#39 := (f4 f5 #17)
#40 := (f3 #39 #19)
#710 := (pattern #40)
#21 := 0::Int
#56 := -1::Int
#104 := (* -1::Int #19)
#101 := (* -1::Int #17)
#123 := (mod #101 #104)
#279 := (+ #40 #123)
#280 := (= #279 0::Int)
#41 := (mod #17 #19)
#276 := (* -1::Int #41)
#277 := (+ #40 #276)
#278 := (= #277 0::Int)
#79 := (<= #19 0::Int)
#170 := (>= #17 0::Int)
#223 := (or #170 #79)
#224 := (not #223)
#75 := (<= #17 0::Int)
#219 := (or #75 #79)
#220 := (not #219)
#227 := (or #220 #224)
#281 := (if #227 #278 #280)
#275 := (= #40 0::Int)
#22 := (= #17 0::Int)
#282 := (if #22 #275 #281)
#274 := (= #40 #17)
#23 := (= #19 0::Int)
#283 := (if #23 #274 #282)
#711 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #710) #283)
#286 := (forall (vars (?v0 Int) (?v1 Int)) #283)
#714 := (iff #286 #711)
#712 := (iff #283 #283)
#713 := [refl]: #712
#715 := [quant-intro #713]: #714
#129 := (* -1::Int #123)
#243 := (if #227 #41 #129)
#246 := (if #22 0::Int #243)
#249 := (if #23 #17 #246)
#252 := (= #40 #249)
#255 := (forall (vars (?v0 Int) (?v1 Int)) #252)
#287 := (iff #255 #286)
#284 := (iff #252 #283)
#285 := [rewrite]: #284
#288 := [quant-intro #285]: #287
#80 := (not #79)
#173 := (not #170)
#176 := (and #173 #80)
#76 := (not #75)
#83 := (and #76 #80)
#179 := (or #83 #176)
#195 := (if #179 #41 #129)
#198 := (if #22 0::Int #195)
#201 := (if #23 #17 #198)
#204 := (= #40 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#256 := (iff #207 #255)
#253 := (iff #204 #252)
#250 := (= #201 #249)
#247 := (= #198 #246)
#244 := (= #195 #243)
#228 := (iff #179 #227)
#225 := (iff #176 #224)
#226 := [rewrite]: #225
#221 := (iff #83 #220)
#222 := [rewrite]: #221
#229 := [monotonicity #222 #226]: #228
#245 := [monotonicity #229]: #244
#248 := [monotonicity #245]: #247
#251 := [monotonicity #248]: #250
#254 := [monotonicity #251]: #253
#257 := [quant-intro #254]: #256
#169 := (~ #207 #207)
#214 := (~ #204 #204)
#168 := [refl]: #214
#217 := [nnf-pos #168]: #169
#86 := (<= 0::Int #17)
#87 := (not #86)
#95 := (and #87 #80)
#98 := (or #83 #95)
#134 := (if #98 #41 #129)
#137 := (if #22 0::Int #134)
#140 := (if #23 #17 #137)
#143 := (= #40 #140)
#146 := (forall (vars (?v0 Int) (?v1 Int)) #143)
#208 := (iff #146 #207)
#205 := (iff #143 #204)
#202 := (= #140 #201)
#199 := (= #137 #198)
#196 := (= #134 #195)
#180 := (iff #98 #179)
#177 := (iff #95 #176)
#174 := (iff #87 #173)
#171 := (iff #86 #170)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#197 := [monotonicity #181]: #196
#200 := [monotonicity #197]: #199
#203 := [monotonicity #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#33 := (- #19)
#32 := (- #17)
#42 := (mod #32 #33)
#43 := (- #42)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#44 := (if #30 #41 #43)
#45 := (if #22 0::Int #44)
#46 := (if #23 #17 #45)
#47 := (= #40 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#147 := (iff #48 #146)
#144 := (iff #47 #143)
#141 := (= #46 #140)
#138 := (= #45 #137)
#135 := (= #44 #134)
#132 := (= #43 #129)
#126 := (- #123)
#130 := (= #126 #129)
#131 := [rewrite]: #130
#127 := (= #43 #126)
#124 := (= #42 #123)
#105 := (= #33 #104)
#106 := [rewrite]: #105
#102 := (= #32 #101)
#103 := [rewrite]: #102
#125 := [monotonicity #103 #106]: #124
#128 := [monotonicity #125]: #127
#133 := [trans #128 #131]: #132
#99 := (iff #30 #98)
#96 := (iff #29 #95)
#81 := (iff #26 #80)
#82 := [rewrite]: #81
#88 := (iff #28 #87)
#92 := (iff #87 #87)
#90 := (iff #86 #86)
#91 := [rewrite]: #90
#93 := [monotonicity #91]: #92
#89 := [rewrite]: #88
#94 := [trans #89 #93]: #88
#97 := [monotonicity #94 #82]: #96
#84 := (iff #27 #83)
#77 := (iff #25 #76)
#78 := [rewrite]: #77
#85 := [monotonicity #78 #82]: #84
#100 := [monotonicity #85 #97]: #99
#136 := [monotonicity #100 #133]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [quant-intro #145]: #147
#52 := [asserted]: #48
#149 := [mp #52 #148]: #146
#210 := [mp #149 #209]: #207
#218 := [mp~ #210 #217]: #207
#258 := [mp #218 #257]: #255
#289 := [mp #258 #288]: #286
#716 := [mp #289 #715]: #711
#62 := -3::Int
#59 := (f4 f5 -1::Int)
#65 := (f3 #59 -3::Int)
#68 := (= #65 -1::Int)
#71 := (not #68)
#8 := 1::Int
#9 := (- 1::Int)
#11 := 3::Int
#12 := (- 3::Int)
#10 := (f4 f5 #9)
#13 := (f3 #10 #12)
#14 := (= #13 #9)
#15 := (not #14)
#72 := (iff #15 #71)
#69 := (iff #14 #68)
#57 := (= #9 -1::Int)
#58 := [rewrite]: #57
#66 := (= #13 #65)
#63 := (= #12 -3::Int)
#64 := [rewrite]: #63
#60 := (= #10 #59)
#61 := [monotonicity #58]: #60
#67 := [monotonicity #61 #64]: #66
#70 := [monotonicity #67 #58]: #69
#73 := [monotonicity #70]: #72
#50 := [asserted]: #15
#74 := [mp #50 #73]: #71
#631 := (not #711)
#620 := (or #631 #68)
#365 := (* -1::Int -3::Int)
#691 := (* -1::Int -1::Int)
#366 := (mod #691 #365)
#698 := (+ #65 #366)
#699 := (= #698 0::Int)
#695 := (mod -1::Int -3::Int)
#697 := (* -1::Int #695)
#354 := (+ #65 #697)
#484 := (= #354 0::Int)
#367 := (<= -3::Int 0::Int)
#380 := (>= -1::Int 0::Int)
#377 := (or #380 #367)
#381 := (not #377)
#376 := (<= -1::Int 0::Int)
#378 := (or #376 #367)
#379 := (not #378)
#360 := (or #379 #381)
#700 := (if #360 #484 #699)
#375 := (= #65 0::Int)
#374 := (= -1::Int 0::Int)
#701 := (if #374 #375 #700)
#290 := (= -3::Int 0::Int)
#696 := (if #290 #68 #701)
#621 := (or #631 #696)
#623 := (iff #621 #620)
#624 := (iff #620 #620)
#608 := [rewrite]: #624
#630 := (iff #696 #68)
#619 := (if false #68 #68)
#628 := (iff #619 #68)
#629 := [rewrite]: #628
#616 := (iff #696 #619)
#625 := (iff #701 #68)
#543 := (if false #375 #68)
#634 := (iff #543 #68)
#638 := [rewrite]: #634
#544 := (iff #701 #543)
#541 := (iff #700 #68)
#675 := 2::Int
#505 := (= #65 2::Int)
#536 := (if false #505 #68)
#532 := (iff #536 #68)
#540 := [rewrite]: #532
#538 := (iff #700 #536)
#636 := (iff #699 #68)
#641 := (+ 1::Int #65)
#487 := (= #641 0::Int)
#632 := (iff #487 #68)
#633 := [rewrite]: #632
#635 := (iff #699 #487)
#527 := (= #698 #641)
#640 := (+ #65 1::Int)
#644 := (= #640 #641)
#526 := [rewrite]: #644
#642 := (= #698 #640)
#486 := (= #366 1::Int)
#653 := (mod 1::Int 3::Int)
#483 := (= #653 1::Int)
#485 := [rewrite]: #483
#647 := (= #366 #653)
#646 := (= #365 3::Int)
#652 := [rewrite]: #646
#651 := (= #691 1::Int)
#645 := [rewrite]: #651
#654 := [monotonicity #645 #652]: #647
#639 := [trans #654 #485]: #486
#643 := [monotonicity #639]: #642
#528 := [trans #643 #526]: #527
#537 := [monotonicity #528]: #635
#521 := [trans #537 #633]: #636
#649 := (iff #484 #505)
#667 := -2::Int
#660 := (+ -2::Int #65)
#657 := (= #660 0::Int)
#506 := (iff #657 #505)
#648 := [rewrite]: #506
#663 := (iff #484 #657)
#661 := (= #354 #660)
#669 := (+ #65 -2::Int)
#655 := (= #669 #660)
#656 := [rewrite]: #655
#658 := (= #354 #669)
#668 := (= #697 -2::Int)
#387 := (* -1::Int 2::Int)
#382 := (= #387 -2::Int)
#664 := [rewrite]: #382
#388 := (= #697 #387)
#385 := (= #695 2::Int)
#386 := [rewrite]: #385
#666 := [monotonicity #386]: #388
#665 := [trans #666 #664]: #668
#659 := [monotonicity #665]: #658
#662 := [trans #659 #656]: #661
#504 := [monotonicity #662]: #663
#650 := [trans #504 #648]: #649
#674 := (iff #360 false)
#672 := (or false false)
#396 := (iff #672 false)
#670 := [rewrite]: #396
#673 := (iff #360 #672)
#402 := (iff #381 false)
#1 := true
#682 := (not true)
#679 := (iff #682 false)
#685 := [rewrite]: #679
#400 := (iff #381 #682)
#677 := (iff #377 true)
#329 := (or false true)
#690 := (iff #329 true)
#676 := [rewrite]: #690
#689 := (iff #377 #329)
#694 := (iff #367 true)
#337 := [rewrite]: #694
#688 := (iff #380 false)
#328 := [rewrite]: #688
#687 := [monotonicity #328 #337]: #689
#399 := [trans #687 #676]: #677
#401 := [monotonicity #399]: #400
#296 := [trans #401 #685]: #402
#323 := (iff #379 false)
#683 := (iff #379 #682)
#680 := (iff #378 true)
#678 := (or true true)
#343 := (iff #678 true)
#344 := [rewrite]: #343
#341 := (iff #378 #678)
#693 := (iff #376 true)
#353 := [rewrite]: #693
#342 := [monotonicity #353 #337]: #341
#681 := [trans #342 #344]: #680
#684 := [monotonicity #681]: #683
#686 := [trans #684 #685]: #323
#395 := [monotonicity #686 #296]: #673
#671 := [trans #395 #670]: #674
#539 := [monotonicity #671 #650 #521]: #538
#542 := [trans #539 #540]: #541
#352 := (iff #374 false)
#357 := [rewrite]: #352
#637 := [monotonicity #357 #542]: #544
#627 := [trans #637 #638]: #625
#702 := (iff #290 false)
#692 := [rewrite]: #702
#618 := [monotonicity #692 #627]: #616
#626 := [trans #618 #629]: #630
#617 := [monotonicity #626]: #623
#609 := [trans #617 #608]: #623
#622 := [quant-inst #56 #62]: #621
#611 := [mp #622 #609]: #620
[unit-resolution #611 #74 #716]: false
c218d35497e494bce5a56e2b75fd1bf7144c1ade 317 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#707 := (pattern #38)
#12 := 0::Int
#96 := -1::Int
#100 := (* -1::Int #18)
#97 := (* -1::Int #16)
#119 := (mod #97 #100)
#275 := (+ #38 #119)
#276 := (= #275 0::Int)
#39 := (mod #16 #18)
#272 := (* -1::Int #39)
#273 := (+ #38 #272)
#274 := (= #273 0::Int)
#74 := (<= #18 0::Int)
#166 := (>= #16 0::Int)
#219 := (or #166 #74)
#220 := (not #219)
#70 := (<= #16 0::Int)
#215 := (or #70 #74)
#216 := (not #215)
#223 := (or #216 #220)
#277 := (if #223 #274 #276)
#271 := (= #38 0::Int)
#20 := (= #16 0::Int)
#278 := (if #20 #271 #277)
#270 := (= #38 #16)
#21 := (= #18 0::Int)
#279 := (if #21 #270 #278)
#708 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #707) #279)
#282 := (forall (vars (?v0 Int) (?v1 Int)) #279)
#711 := (iff #282 #708)
#709 := (iff #279 #279)
#710 := [refl]: #709
#712 := [quant-intro #710]: #711
#125 := (* -1::Int #119)
#239 := (if #223 #39 #125)
#242 := (if #20 0::Int #239)
#245 := (if #21 #16 #242)
#248 := (= #38 #245)
#251 := (forall (vars (?v0 Int) (?v1 Int)) #248)
#283 := (iff #251 #282)
#280 := (iff #248 #279)
#281 := [rewrite]: #280
#284 := [quant-intro #281]: #283
#75 := (not #74)
#169 := (not #166)
#172 := (and #169 #75)
#71 := (not #70)
#78 := (and #71 #75)
#175 := (or #78 #172)
#191 := (if #175 #39 #125)
#194 := (if #20 0::Int #191)
#197 := (if #21 #16 #194)
#200 := (= #38 #197)
#203 := (forall (vars (?v0 Int) (?v1 Int)) #200)
#252 := (iff #203 #251)
#249 := (iff #200 #248)
#246 := (= #197 #245)
#243 := (= #194 #242)
#240 := (= #191 #239)
#224 := (iff #175 #223)
#221 := (iff #172 #220)
#222 := [rewrite]: #221
#217 := (iff #78 #216)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#241 := [monotonicity #225]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [quant-intro #250]: #252
#210 := (~ #203 #203)
#165 := (~ #200 #200)
#209 := [refl]: #165
#213 := [nnf-pos #209]: #210
#81 := (<= 0::Int #16)
#82 := (not #81)
#90 := (and #82 #75)
#93 := (or #78 #90)
#130 := (if #93 #39 #125)
#133 := (if #20 0::Int #130)
#136 := (if #21 #16 #133)
#139 := (= #38 #136)
#142 := (forall (vars (?v0 Int) (?v1 Int)) #139)
#204 := (iff #142 #203)
#201 := (iff #139 #200)
#198 := (= #136 #197)
#195 := (= #133 #194)
#192 := (= #130 #191)
#176 := (iff #93 #175)
#173 := (iff #90 #172)
#170 := (iff #82 #169)
#167 := (iff #81 #166)
#168 := [rewrite]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [monotonicity #174]: #176
#193 := [monotonicity #177]: #192
#196 := [monotonicity #193]: #195
#199 := [monotonicity #196]: #198
#202 := [monotonicity #199]: #201
#205 := [quant-intro #202]: #204
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#143 := (iff #46 #142)
#140 := (iff #45 #139)
#137 := (= #44 #136)
#134 := (= #43 #133)
#131 := (= #42 #130)
#128 := (= #41 #125)
#122 := (- #119)
#126 := (= #122 #125)
#127 := [rewrite]: #126
#123 := (= #41 #122)
#120 := (= #40 #119)
#101 := (= #31 #100)
#102 := [rewrite]: #101
#98 := (= #30 #97)
#99 := [rewrite]: #98
#121 := [monotonicity #99 #102]: #120
#124 := [monotonicity #121]: #123
#129 := [trans #124 #127]: #128
#94 := (iff #28 #93)
#91 := (iff #27 #90)
#76 := (iff #24 #75)
#77 := [rewrite]: #76
#83 := (iff #26 #82)
#87 := (iff #82 #82)
#85 := (iff #81 #81)
#86 := [rewrite]: #85
#88 := [monotonicity #86]: #87
#84 := [rewrite]: #83
#89 := [trans #84 #88]: #83
#92 := [monotonicity #89 #77]: #91
#79 := (iff #25 #78)
#72 := (iff #23 #71)
#73 := [rewrite]: #72
#80 := [monotonicity #73 #77]: #79
#95 := [monotonicity #80 #92]: #94
#132 := [monotonicity #95 #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#144 := [quant-intro #141]: #143
#50 := [asserted]: #46
#145 := [mp #50 #144]: #142
#206 := [mp #145 #205]: #203
#214 := [mp~ #206 #213]: #203
#254 := [mp #214 #253]: #251
#285 := [mp #254 #284]: #282
#713 := [mp #285 #712]: #708
#54 := -3::Int
#57 := (f4 f5 -3::Int)
#60 := (f3 #57 -3::Int)
#63 := (= #60 0::Int)
#66 := (not #63)
#8 := 3::Int
#9 := (- 3::Int)
#10 := (f4 f5 #9)
#11 := (f3 #10 #9)
#13 := (= #11 0::Int)
#14 := (not #13)
#67 := (iff #14 #66)
#64 := (iff #13 #63)
#61 := (= #11 #60)
#55 := (= #9 -3::Int)
#56 := [rewrite]: #55
#58 := (= #10 #57)
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59 #56]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#48 := [asserted]: #14
#69 := [mp #48 #68]: #66
#524 := (not #708)
#525 := (or #524 #63)
#351 := (* -1::Int -3::Int)
#481 := (mod #351 #351)
#688 := (+ #60 #481)
#362 := (= #688 0::Int)
#378 := (mod -3::Int -3::Int)
#357 := (* -1::Int #378)
#692 := (+ #60 #357)
#694 := (= #692 0::Int)
#372 := (<= -3::Int 0::Int)
#375 := (>= -3::Int 0::Int)
#376 := (or #375 #372)
#377 := (not #376)
#373 := (or #372 #372)
#364 := (not #373)
#374 := (or #364 #377)
#363 := (if #374 #694 #362)
#286 := (= -3::Int 0::Int)
#695 := (if #286 #63 #363)
#371 := (= #60 -3::Int)
#696 := (if #286 #371 #695)
#484 := (or #524 #696)
#534 := (iff #484 #525)
#630 := (iff #525 #525)
#633 := [rewrite]: #630
#641 := (iff #696 #63)
#636 := (if false #371 #63)
#640 := (iff #636 #63)
#638 := [rewrite]: #640
#637 := (iff #696 #636)
#482 := (iff #695 #63)
#647 := (if false #63 #63)
#643 := (iff #647 #63)
#649 := [rewrite]: #643
#651 := (iff #695 #647)
#650 := (iff #363 #63)
#648 := (iff #363 #647)
#645 := (iff #362 #63)
#502 := (= #688 #60)
#383 := (+ #60 0::Int)
#663 := (= #383 #60)
#664 := [rewrite]: #663
#660 := (= #688 #383)
#659 := (= #481 0::Int)
#656 := (mod 3::Int 3::Int)
#653 := (= #656 0::Int)
#658 := [rewrite]: #653
#657 := (= #481 #656)
#666 := (= #351 3::Int)
#655 := [rewrite]: #666
#652 := [monotonicity #655 #655]: #657
#654 := [trans #652 #658]: #659
#501 := [monotonicity #654]: #660
#503 := [trans #501 #664]: #502
#646 := [monotonicity #503]: #645
#665 := (iff #694 #63)
#379 := (= #692 #60)
#384 := (= #692 #383)
#672 := (= #357 0::Int)
#392 := (* -1::Int 0::Int)
#671 := (= #392 0::Int)
#668 := [rewrite]: #671
#393 := (= #357 #392)
#669 := (= #378 0::Int)
#670 := [rewrite]: #669
#667 := [monotonicity #670]: #393
#382 := [trans #667 #668]: #672
#385 := [monotonicity #382]: #384
#661 := [trans #385 #664]: #379
#662 := [monotonicity #661]: #665
#399 := (iff #374 false)
#673 := (or false false)
#397 := (iff #673 false)
#398 := [rewrite]: #397
#674 := (iff #374 #673)
#684 := (iff #377 false)
#1 := true
#675 := (not true)
#340 := (iff #675 false)
#341 := [rewrite]: #340
#326 := (iff #377 #675)
#685 := (iff #376 true)
#681 := (or false true)
#320 := (iff #681 true)
#683 := [rewrite]: #320
#676 := (iff #376 #681)
#693 := (iff #372 true)
#699 := [rewrite]: #693
#679 := (iff #375 false)
#680 := [rewrite]: #679
#682 := [monotonicity #680 #699]: #676
#325 := [trans #682 #683]: #685
#686 := [monotonicity #325]: #326
#687 := [trans #686 #341]: #684
#677 := (iff #364 false)
#338 := (iff #364 #675)
#691 := (iff #373 true)
#689 := (or true true)
#690 := (iff #689 true)
#350 := [rewrite]: #690
#349 := (iff #373 #689)
#354 := [monotonicity #699 #699]: #349
#334 := [trans #354 #350]: #691
#339 := [monotonicity #334]: #338
#678 := [trans #339 #341]: #677
#396 := [monotonicity #678 #687]: #674
#292 := [trans #396 #398]: #399
#642 := [monotonicity #292 #662 #646]: #648
#644 := [trans #642 #649]: #650
#697 := (iff #286 false)
#698 := [rewrite]: #697
#480 := [monotonicity #698 #644]: #651
#483 := [trans #480 #649]: #482
#639 := [monotonicity #698 #483]: #637
#523 := [trans #639 #638]: #641
#629 := [monotonicity #523]: #534
#518 := [trans #629 #633]: #534
#632 := [quant-inst #54 #54]: #484
#533 := [mp #632 #518]: #525
[unit-resolution #533 #69 #713]: false
bf59e99514afc31c08b47ceb56486f223b9d1199 357 0
unsat
#2 := false
decl f3 :: (-> S2 Int Int)
#21 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#19 := (:var 1 Int)
decl f5 :: S3
#7 := f5
#41 := (f4 f5 #19)
#42 := (f3 #41 #21)
#717 := (pattern #42)
#23 := 0::Int
#106 := -1::Int
#110 := (* -1::Int #21)
#107 := (* -1::Int #19)
#129 := (mod #107 #110)
#285 := (+ #42 #129)
#286 := (= #285 0::Int)
#43 := (mod #19 #21)
#282 := (* -1::Int #43)
#283 := (+ #42 #282)
#284 := (= #283 0::Int)
#84 := (<= #21 0::Int)
#176 := (>= #19 0::Int)
#229 := (or #176 #84)
#230 := (not #229)
#80 := (<= #19 0::Int)
#225 := (or #80 #84)
#226 := (not #225)
#233 := (or #226 #230)
#287 := (if #233 #284 #286)
#281 := (= #42 0::Int)
#24 := (= #19 0::Int)
#288 := (if #24 #281 #287)
#280 := (= #42 #19)
#25 := (= #21 0::Int)
#289 := (if #25 #280 #288)
#718 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #717) #289)
#292 := (forall (vars (?v0 Int) (?v1 Int)) #289)
#721 := (iff #292 #718)
#719 := (iff #289 #289)
#720 := [refl]: #719
#722 := [quant-intro #720]: #721
#135 := (* -1::Int #129)
#249 := (if #233 #43 #135)
#252 := (if #24 0::Int #249)
#255 := (if #25 #19 #252)
#258 := (= #42 #255)
#261 := (forall (vars (?v0 Int) (?v1 Int)) #258)
#293 := (iff #261 #292)
#290 := (iff #258 #289)
#291 := [rewrite]: #290
#294 := [quant-intro #291]: #293
#85 := (not #84)
#179 := (not #176)
#182 := (and #179 #85)
#81 := (not #80)
#88 := (and #81 #85)
#185 := (or #88 #182)
#201 := (if #185 #43 #135)
#204 := (if #24 0::Int #201)
#207 := (if #25 #19 #204)
#210 := (= #42 #207)
#213 := (forall (vars (?v0 Int) (?v1 Int)) #210)
#262 := (iff #213 #261)
#259 := (iff #210 #258)
#256 := (= #207 #255)
#253 := (= #204 #252)
#250 := (= #201 #249)
#234 := (iff #185 #233)
#231 := (iff #182 #230)
#232 := [rewrite]: #231
#227 := (iff #88 #226)
#228 := [rewrite]: #227
#235 := [monotonicity #228 #232]: #234
#251 := [monotonicity #235]: #250
#254 := [monotonicity #251]: #253
#257 := [monotonicity #254]: #256
#260 := [monotonicity #257]: #259
#263 := [quant-intro #260]: #262
#175 := (~ #213 #213)
#220 := (~ #210 #210)
#174 := [refl]: #220
#223 := [nnf-pos #174]: #175
#91 := (<= 0::Int #19)
#92 := (not #91)
#100 := (and #92 #85)
#103 := (or #88 #100)
#140 := (if #103 #43 #135)
#143 := (if #24 0::Int #140)
#146 := (if #25 #19 #143)
#149 := (= #42 #146)
#152 := (forall (vars (?v0 Int) (?v1 Int)) #149)
#214 := (iff #152 #213)
#211 := (iff #149 #210)
#208 := (= #146 #207)
#205 := (= #143 #204)
#202 := (= #140 #201)
#186 := (iff #103 #185)
#183 := (iff #100 #182)
#180 := (iff #92 #179)
#177 := (iff #91 #176)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#203 := [monotonicity #187]: #202
#206 := [monotonicity #203]: #205
#209 := [monotonicity #206]: #208
#212 := [monotonicity #209]: #211
#215 := [quant-intro #212]: #214
#35 := (- #21)
#34 := (- #19)
#44 := (mod #34 #35)
#45 := (- #44)
#28 := (< 0::Int #21)
#30 := (< #19 0::Int)
#31 := (and #30 #28)
#27 := (< 0::Int #19)
#29 := (and #27 #28)
#32 := (or #29 #31)
#46 := (if #32 #43 #45)
#47 := (if #24 0::Int #46)
#48 := (if #25 #19 #47)
#49 := (= #42 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#153 := (iff #50 #152)
#150 := (iff #49 #149)
#147 := (= #48 #146)
#144 := (= #47 #143)
#141 := (= #46 #140)
#138 := (= #45 #135)
#132 := (- #129)
#136 := (= #132 #135)
#137 := [rewrite]: #136
#133 := (= #45 #132)
#130 := (= #44 #129)
#111 := (= #35 #110)
#112 := [rewrite]: #111
#108 := (= #34 #107)
#109 := [rewrite]: #108
#131 := [monotonicity #109 #112]: #130
#134 := [monotonicity #131]: #133
#139 := [trans #134 #137]: #138
#104 := (iff #32 #103)
#101 := (iff #31 #100)
#86 := (iff #28 #85)
#87 := [rewrite]: #86
#93 := (iff #30 #92)
#97 := (iff #92 #92)
#95 := (iff #91 #91)
#96 := [rewrite]: #95
#98 := [monotonicity #96]: #97
#94 := [rewrite]: #93
#99 := [trans #94 #98]: #93
#102 := [monotonicity #99 #87]: #101
#89 := (iff #29 #88)
#82 := (iff #27 #81)
#83 := [rewrite]: #82
#90 := [monotonicity #83 #87]: #89
#105 := [monotonicity #90 #102]: #104
#142 := [monotonicity #105 #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [quant-intro #151]: #153
#54 := [asserted]: #50
#155 := [mp #54 #154]: #152
#216 := [mp #155 #215]: #213
#224 := [mp~ #216 #223]: #213
#264 := [mp #224 #263]: #261
#295 := [mp #264 #294]: #292
#723 := [mp #295 #722]: #718
#70 := -2::Int
#64 := -3::Int
#58 := -5::Int
#61 := (f4 f5 -5::Int)
#67 := (f3 #61 -3::Int)
#73 := (= #67 -2::Int)
#76 := (not #73)
#14 := 2::Int
#15 := (- 2::Int)
#11 := 3::Int
#12 := (- 3::Int)
#8 := 5::Int
#9 := (- 5::Int)
#10 := (f4 f5 #9)
#13 := (f3 #10 #12)
#16 := (= #13 #15)
#17 := (not #16)
#77 := (iff #17 #76)
#74 := (iff #16 #73)
#71 := (= #15 -2::Int)
#72 := [rewrite]: #71
#68 := (= #13 #67)
#65 := (= #12 -3::Int)
#66 := [rewrite]: #65
#62 := (= #10 #61)
#59 := (= #9 -5::Int)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#69 := [monotonicity #63 #66]: #68
#75 := [monotonicity #69 #72]: #74
#78 := [monotonicity #75]: #77
#52 := [asserted]: #17
#79 := [mp #52 #78]: #76
#633 := (not #718)
#638 := (or #633 #73)
#373 := (* -1::Int -3::Int)
#372 := (* -1::Int -5::Int)
#705 := (mod #372 #373)
#706 := (+ #67 #705)
#707 := (= #706 0::Int)
#704 := (mod -5::Int -3::Int)
#361 := (* -1::Int #704)
#491 := (+ #67 #361)
#698 := (= #491 0::Int)
#385 := (<= -3::Int 0::Int)
#384 := (>= -5::Int 0::Int)
#388 := (or #384 #385)
#367 := (not #388)
#374 := (<= -5::Int 0::Int)
#386 := (or #374 #385)
#387 := (not #386)
#702 := (or #387 #367)
#708 := (if #702 #698 #707)
#383 := (= #67 0::Int)
#382 := (= -5::Int 0::Int)
#703 := (if #382 #383 #708)
#381 := (= #67 -5::Int)
#296 := (= -3::Int 0::Int)
#709 := (if #296 #381 #703)
#627 := (or #633 #709)
#629 := (iff #627 #638)
#624 := (iff #638 #638)
#631 := [rewrite]: #624
#636 := (iff #709 #73)
#634 := (if false #381 #73)
#625 := (iff #634 #73)
#635 := [rewrite]: #625
#626 := (iff #709 #634)
#645 := (iff #703 #73)
#549 := (if false #383 #73)
#644 := (iff #549 #73)
#641 := [rewrite]: #644
#550 := (iff #703 #549)
#547 := (iff #708 #73)
#314 := 1::Int
#511 := (= #67 1::Int)
#528 := (if false #511 #73)
#546 := (iff #528 #73)
#539 := [rewrite]: #546
#543 := (iff #708 #528)
#640 := (iff #707 #73)
#650 := (+ 2::Int #67)
#535 := (= #650 0::Int)
#544 := (iff #535 #73)
#639 := [rewrite]: #544
#494 := (iff #707 #535)
#533 := (= #706 #650)
#646 := (+ #67 2::Int)
#648 := (= #646 #650)
#651 := [rewrite]: #648
#647 := (= #706 #646)
#492 := (= #705 2::Int)
#659 := (mod 5::Int 3::Int)
#661 := (= #659 2::Int)
#490 := [rewrite]: #661
#660 := (= #705 #659)
#652 := (= #373 3::Int)
#653 := [rewrite]: #652
#657 := (= #372 5::Int)
#658 := [rewrite]: #657
#654 := [monotonicity #658 #653]: #660
#493 := [trans #654 #490]: #492
#649 := [monotonicity #493]: #647
#534 := [trans #649 #651]: #533
#642 := [monotonicity #534]: #494
#643 := [trans #642 #639]: #640
#655 := (iff #698 #511)
#666 := (+ -1::Int #67)
#669 := (= #666 0::Int)
#512 := (iff #669 #511)
#513 := [rewrite]: #512
#664 := (iff #698 #669)
#663 := (= #491 #666)
#672 := (+ #67 -1::Int)
#667 := (= #672 #666)
#662 := [rewrite]: #667
#676 := (= #491 #672)
#671 := (= #361 -1::Int)
#394 := (* -1::Int 1::Int)
#674 := (= #394 -1::Int)
#389 := [rewrite]: #674
#395 := (= #361 #394)
#392 := (= #704 1::Int)
#393 := [rewrite]: #392
#673 := [monotonicity #393]: #395
#675 := [trans #673 #389]: #671
#665 := [monotonicity #675]: #676
#668 := [trans #665 #662]: #663
#670 := [monotonicity #668]: #664
#656 := [trans #670 #513]: #655
#678 := (iff #702 false)
#680 := (or false false)
#677 := (iff #680 false)
#681 := [rewrite]: #677
#402 := (iff #702 #680)
#302 := (iff #367 false)
#1 := true
#690 := (not true)
#692 := (iff #690 false)
#330 := [rewrite]: #692
#408 := (iff #367 #690)
#406 := (iff #388 true)
#696 := (or false true)
#683 := (iff #696 true)
#684 := [rewrite]: #683
#694 := (iff #388 #696)
#344 := (iff #385 true)
#685 := [rewrite]: #344
#335 := (iff #384 false)
#336 := [rewrite]: #335
#697 := [monotonicity #336 #685]: #694
#407 := [trans #697 #684]: #406
#409 := [monotonicity #407]: #408
#679 := [trans #409 #330]: #302
#693 := (iff #387 false)
#691 := (iff #387 #690)
#688 := (iff #386 true)
#348 := (or true true)
#351 := (iff #348 true)
#687 := [rewrite]: #351
#349 := (iff #386 #348)
#360 := (iff #374 true)
#701 := [rewrite]: #360
#350 := [monotonicity #701 #685]: #349
#689 := [trans #350 #687]: #688
#686 := [monotonicity #689]: #691
#695 := [trans #686 #330]: #693
#403 := [monotonicity #695 #679]: #402
#682 := [trans #403 #681]: #678
#545 := [monotonicity #682 #656 #643]: #543
#548 := [trans #545 #539]: #547
#364 := (iff #382 false)
#700 := [rewrite]: #364
#551 := [monotonicity #700 #548]: #550
#632 := [trans #551 #641]: #645
#699 := (iff #296 false)
#359 := [rewrite]: #699
#623 := [monotonicity #359 #632]: #626
#637 := [trans #623 #635]: #636
#630 := [monotonicity #637]: #629
#615 := [trans #630 #631]: #629
#628 := [quant-inst #58 #64]: #627
#616 := [mp #628 #615]: #638
[unit-resolution #616 #79 #723]: false
ef703ebceb3fa98287d10eb7ea1d68a68c17e1d3 342 0
unsat
#2 := false
#19 := 0::Int
decl f6 :: Int
#8 := f6
#369 := (<= f6 0::Int)
#379 := (>= f6 0::Int)
#690 := (not #379)
#346 := (not #369)
#691 := (or #346 #690)
#653 := (not #691)
#10 := 3::Int
#699 := (mod f6 3::Int)
#97 := -1::Int
#356 := (* -1::Int #699)
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#9 := (f4 f5 f6)
#11 := (f3 #9 3::Int)
#486 := (+ #11 #356)
#693 := (= #486 0::Int)
#644 := (not #693)
#654 := (<= #486 0::Int)
#599 := (not #654)
#603 := (>= #699 3::Int)
#604 := (not #603)
#1 := true
#164 := [true-axiom]: true
#594 := (or false #604)
#595 := [th-lemma arith]: #594
#596 := [unit-resolution #595 #164]: #604
#597 := [hypothesis]: #654
#167 := (>= #11 3::Int)
#54 := (<= 3::Int #11)
#166 := (iff #54 #167)
#168 := [rewrite]: #166
#12 := (< #11 3::Int)
#13 := (not #12)
#68 := (iff #13 #54)
#55 := (not #54)
#63 := (not #55)
#66 := (iff #63 #54)
#67 := [rewrite]: #66
#64 := (iff #13 #63)
#56 := (iff #12 #55)
#60 := (iff #55 #55)
#58 := (iff #54 #54)
#59 := [rewrite]: #58
#61 := [monotonicity #59]: #60
#57 := [rewrite]: #56
#62 := [trans #57 #61]: #56
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#48 := [asserted]: #13
#70 := [mp #48 #69]: #54
#169 := [mp #70 #168]: #167
#598 := [th-lemma arith farkas -1 1 1 #169 #597 #596]: false
#600 := [lemma #598]: #599
#632 := (or #644 #654)
#534 := [th-lemma arith triangle-eq]: #632
#629 := [unit-resolution #534 #600]: #644
#592 := (or #653 #693)
#678 := -3::Int
#367 := (* -1::Int f6)
#402 := (mod #367 -3::Int)
#297 := (+ #11 #402)
#397 := (= #297 0::Int)
#676 := (if #691 #693 #397)
#378 := (= #11 0::Int)
#377 := (= f6 0::Int)
#387 := (if #377 #378 #676)
#17 := (:var 0 Int)
#15 := (:var 1 Int)
#37 := (f4 f5 #15)
#38 := (f3 #37 #17)
#712 := (pattern #38)
#101 := (* -1::Int #17)
#98 := (* -1::Int #15)
#120 := (mod #98 #101)
#280 := (+ #38 #120)
#281 := (= #280 0::Int)
#39 := (mod #15 #17)
#277 := (* -1::Int #39)
#278 := (+ #38 #277)
#279 := (= #278 0::Int)
#75 := (<= #17 0::Int)
#171 := (>= #15 0::Int)
#224 := (or #171 #75)
#225 := (not #224)
#71 := (<= #15 0::Int)
#220 := (or #71 #75)
#221 := (not #220)
#228 := (or #221 #225)
#282 := (if #228 #279 #281)
#276 := (= #38 0::Int)
#20 := (= #15 0::Int)
#283 := (if #20 #276 #282)
#275 := (= #38 #15)
#21 := (= #17 0::Int)
#284 := (if #21 #275 #283)
#713 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #712) #284)
#287 := (forall (vars (?v0 Int) (?v1 Int)) #284)
#716 := (iff #287 #713)
#714 := (iff #284 #284)
#715 := [refl]: #714
#717 := [quant-intro #715]: #716
#126 := (* -1::Int #120)
#244 := (if #228 #39 #126)
#247 := (if #20 0::Int #244)
#250 := (if #21 #15 #247)
#253 := (= #38 #250)
#256 := (forall (vars (?v0 Int) (?v1 Int)) #253)
#288 := (iff #256 #287)
#285 := (iff #253 #284)
#286 := [rewrite]: #285
#289 := [quant-intro #286]: #288
#76 := (not #75)
#174 := (not #171)
#177 := (and #174 #76)
#72 := (not #71)
#79 := (and #72 #76)
#180 := (or #79 #177)
#196 := (if #180 #39 #126)
#199 := (if #20 0::Int #196)
#202 := (if #21 #15 #199)
#205 := (= #38 #202)
#208 := (forall (vars (?v0 Int) (?v1 Int)) #205)
#257 := (iff #208 #256)
#254 := (iff #205 #253)
#251 := (= #202 #250)
#248 := (= #199 #247)
#245 := (= #196 #244)
#229 := (iff #180 #228)
#226 := (iff #177 #225)
#227 := [rewrite]: #226
#222 := (iff #79 #221)
#223 := [rewrite]: #222
#230 := [monotonicity #223 #227]: #229
#246 := [monotonicity #230]: #245
#249 := [monotonicity #246]: #248
#252 := [monotonicity #249]: #251
#255 := [monotonicity #252]: #254
#258 := [quant-intro #255]: #257
#215 := (~ #208 #208)
#170 := (~ #205 #205)
#214 := [refl]: #170
#218 := [nnf-pos #214]: #215
#82 := (<= 0::Int #15)
#83 := (not #82)
#91 := (and #83 #76)
#94 := (or #79 #91)
#131 := (if #94 #39 #126)
#134 := (if #20 0::Int #131)
#137 := (if #21 #15 #134)
#140 := (= #38 #137)
#143 := (forall (vars (?v0 Int) (?v1 Int)) #140)
#209 := (iff #143 #208)
#206 := (iff #140 #205)
#203 := (= #137 #202)
#200 := (= #134 #199)
#197 := (= #131 #196)
#181 := (iff #94 #180)
#178 := (iff #91 #177)
#175 := (iff #83 #174)
#172 := (iff #82 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#198 := [monotonicity #182]: #197
#201 := [monotonicity #198]: #200
#204 := [monotonicity #201]: #203
#207 := [monotonicity #204]: #206
#210 := [quant-intro #207]: #209
#31 := (- #17)
#30 := (- #15)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (if #28 #39 #41)
#43 := (if #20 0::Int #42)
#44 := (if #21 #15 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#144 := (iff #46 #143)
#141 := (iff #45 #140)
#138 := (= #44 #137)
#135 := (= #43 #134)
#132 := (= #42 #131)
#129 := (= #41 #126)
#123 := (- #120)
#127 := (= #123 #126)
#128 := [rewrite]: #127
#124 := (= #41 #123)
#121 := (= #40 #120)
#102 := (= #31 #101)
#103 := [rewrite]: #102
#99 := (= #30 #98)
#100 := [rewrite]: #99
#122 := [monotonicity #100 #103]: #121
#125 := [monotonicity #122]: #124
#130 := [trans #125 #128]: #129
#95 := (iff #28 #94)
#92 := (iff #27 #91)
#77 := (iff #24 #76)
#78 := [rewrite]: #77
#84 := (iff #26 #83)
#88 := (iff #83 #83)
#86 := (iff #82 #82)
#87 := [rewrite]: #86
#89 := [monotonicity #87]: #88
#85 := [rewrite]: #84
#90 := [trans #85 #89]: #84
#93 := [monotonicity #90 #78]: #92
#80 := (iff #25 #79)
#73 := (iff #23 #72)
#74 := [rewrite]: #73
#81 := [monotonicity #74 #78]: #80
#96 := [monotonicity #81 #93]: #95
#133 := [monotonicity #96 #130]: #132
#136 := [monotonicity #133]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [quant-intro #142]: #144
#50 := [asserted]: #46
#146 := [mp #50 #145]: #143
#211 := [mp #146 #210]: #208
#219 := [mp~ #211 #218]: #208
#259 := [mp #219 #258]: #256
#290 := [mp #259 #289]: #287
#718 := [mp #290 #717]: #713
#671 := (not #713)
#660 := (or #671 #387)
#368 := (* -1::Int 3::Int)
#700 := (mod #367 #368)
#701 := (+ #11 #700)
#702 := (= #701 0::Int)
#380 := (<= 3::Int 0::Int)
#383 := (or #379 #380)
#362 := (not #383)
#381 := (or #369 #380)
#382 := (not #381)
#697 := (or #382 #362)
#703 := (if #697 #693 #702)
#698 := (if #377 #378 #703)
#376 := (= #11 f6)
#291 := (= 3::Int 0::Int)
#704 := (if #291 #376 #698)
#661 := (or #671 #704)
#657 := (iff #661 #660)
#663 := (iff #660 #660)
#664 := [rewrite]: #663
#670 := (iff #704 #387)
#390 := (if false #376 #387)
#384 := (iff #390 #387)
#666 := [rewrite]: #384
#668 := (iff #704 #390)
#388 := (iff #698 #387)
#673 := (iff #703 #676)
#398 := (iff #702 #397)
#674 := (= #701 #297)
#403 := (= #700 #402)
#679 := (= #368 -3::Int)
#401 := [rewrite]: #679
#404 := [monotonicity #401]: #403
#675 := [monotonicity #404]: #674
#672 := [monotonicity #675]: #398
#689 := (iff #697 #691)
#330 := (iff #362 #690)
#325 := (iff #383 #379)
#684 := (or #379 false)
#681 := (iff #684 #379)
#687 := [rewrite]: #681
#685 := (iff #383 #684)
#359 := (iff #380 false)
#695 := [rewrite]: #359
#686 := [monotonicity #695]: #685
#688 := [trans #686 #687]: #325
#331 := [monotonicity #688]: #330
#682 := (iff #382 #346)
#344 := (iff #381 #369)
#355 := (or #369 false)
#680 := (iff #355 #369)
#343 := [rewrite]: #680
#696 := (iff #381 #355)
#339 := [monotonicity #695]: #696
#345 := [trans #339 #343]: #344
#683 := [monotonicity #345]: #682
#692 := [monotonicity #683 #331]: #689
#677 := [monotonicity #692 #672]: #673
#389 := [monotonicity #677]: #388
#694 := (iff #291 false)
#354 := [rewrite]: #694
#669 := [monotonicity #354 #389]: #668
#667 := [trans #669 #666]: #670
#658 := [monotonicity #667]: #657
#659 := [trans #658 #664]: #657
#662 := [quant-inst #8 #10]: #661
#665 := [mp #662 #659]: #660
#621 := [unit-resolution #665 #718]: #387
#489 := (not #377)
#530 := (not #387)
#633 := (or #530 #489)
#638 := (not #378)
#506 := (<= #11 0::Int)
#627 := (not #506)
#545 := (not #167)
#546 := (or #627 #545)
#639 := [th-lemma arith farkas 1 1]: #546
#636 := [unit-resolution #639 #169]: #627
#618 := (or #638 #506)
#620 := [th-lemma arith triangle-eq]: #618
#628 := [unit-resolution #620 #636]: #638
#637 := (or #530 #489 #378)
#539 := [def-axiom]: #637
#609 := [unit-resolution #539 #628]: #633
#589 := [unit-resolution #609 #621]: #489
#634 := (or #530 #377 #676)
#635 := [def-axiom]: #634
#590 := [unit-resolution #635 #589 #621]: #676
#485 := (not #676)
#487 := (or #485 #653 #693)
#488 := [def-axiom]: #487
#593 := [unit-resolution #488 #590]: #592
#630 := [unit-resolution #593 #629]: #653
#508 := (or #691 #369)
#650 := [def-axiom]: #508
#631 := [unit-resolution #650 #630]: #369
#651 := (or #691 #379)
#652 := [def-axiom]: #651
#601 := [unit-resolution #652 #630]: #379
#591 := (or #377 #346 #690)
#602 := [th-lemma arith triangle-eq]: #591
#580 := [unit-resolution #602 #589]: #691
[unit-resolution #580 #601 #631]: false
1a816085b7feac64dcd1be391f3e9629f980d336 343 0
unsat
#2 := false
#10 := 3::Int
decl f6 :: Int
#8 := f6
#706 := (mod f6 3::Int)
#625 := (>= #706 3::Int)
#621 := (not #625)
#1 := true
#173 := [true-axiom]: true
#607 := (or false #621)
#608 := [th-lemma arith]: #607
#609 := [unit-resolution #608 #173]: #621
#21 := 0::Int
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#7 := f5
#9 := (f4 f5 f6)
#11 := (f3 #9 3::Int)
#106 := -1::Int
#601 := (* -1::Int #11)
#602 := (+ f6 #601)
#603 := (<= #602 0::Int)
#599 := (= f6 #11)
#12 := (= #11 f6)
#56 := (<= 3::Int f6)
#57 := (not #56)
#68 := (not #12)
#69 := (or #68 #57)
#74 := (not #69)
#13 := (< f6 3::Int)
#14 := (implies #12 #13)
#15 := (not #14)
#75 := (iff #15 #74)
#72 := (iff #14 #69)
#65 := (implies #12 #57)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #14 #65)
#58 := (iff #13 #57)
#62 := (iff #57 #57)
#60 := (iff #56 #56)
#61 := [rewrite]: #60
#63 := [monotonicity #61]: #62
#59 := [rewrite]: #58
#64 := [trans #59 #63]: #58
#67 := [monotonicity #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#50 := [asserted]: #15
#77 := [mp #50 #76]: #74
#78 := [not-or-elim #77]: #12
#610 := [symm #78]: #599
#600 := (not #599)
#611 := (or #600 #603)
#589 := [th-lemma arith triangle-eq]: #611
#590 := [unit-resolution #589 #610]: #603
#217 := (>= f6 3::Int)
#175 := (iff #56 #217)
#218 := [rewrite]: #175
#79 := [not-or-elim #77]: #56
#219 := [mp #79 #218]: #217
#708 := (* -1::Int #706)
#365 := (+ #11 #708)
#662 := (<= #365 0::Int)
#495 := (= #365 0::Int)
#701 := -3::Int
#702 := (* -1::Int f6)
#410 := (mod #702 -3::Int)
#413 := (+ #11 #410)
#684 := (= #413 0::Int)
#391 := (>= f6 0::Int)
#697 := (not #391)
#387 := (<= f6 0::Int)
#354 := (not #387)
#340 := (or #354 #697)
#681 := (if #340 #495 #684)
#386 := (= #11 0::Int)
#385 := (= f6 0::Int)
#686 := (if #385 #386 #681)
#19 := (:var 0 Int)
#17 := (:var 1 Int)
#39 := (f4 f5 #17)
#40 := (f3 #39 #19)
#721 := (pattern #40)
#110 := (* -1::Int #19)
#107 := (* -1::Int #17)
#129 := (mod #107 #110)
#289 := (+ #40 #129)
#290 := (= #289 0::Int)
#41 := (mod #17 #19)
#286 := (* -1::Int #41)
#287 := (+ #40 #286)
#288 := (= #287 0::Int)
#84 := (<= #19 0::Int)
#176 := (>= #17 0::Int)
#233 := (or #176 #84)
#234 := (not #233)
#80 := (<= #17 0::Int)
#231 := (or #80 #84)
#232 := (not #231)
#237 := (or #232 #234)
#291 := (if #237 #288 #290)
#285 := (= #40 0::Int)
#22 := (= #17 0::Int)
#292 := (if #22 #285 #291)
#284 := (= #40 #17)
#23 := (= #19 0::Int)
#293 := (if #23 #284 #292)
#722 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #721) #293)
#296 := (forall (vars (?v0 Int) (?v1 Int)) #293)
#725 := (iff #296 #722)
#723 := (iff #293 #293)
#724 := [refl]: #723
#726 := [quant-intro #724]: #725
#135 := (* -1::Int #129)
#253 := (if #237 #41 #135)
#256 := (if #22 0::Int #253)
#259 := (if #23 #17 #256)
#262 := (= #40 #259)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#297 := (iff #265 #296)
#294 := (iff #262 #293)
#295 := [rewrite]: #294
#298 := [quant-intro #295]: #297
#85 := (not #84)
#179 := (not #176)
#182 := (and #179 #85)
#81 := (not #80)
#88 := (and #81 #85)
#185 := (or #88 #182)
#201 := (if #185 #41 #135)
#204 := (if #22 0::Int #201)
#207 := (if #23 #17 #204)
#210 := (= #40 #207)
#213 := (forall (vars (?v0 Int) (?v1 Int)) #210)
#266 := (iff #213 #265)
#263 := (iff #210 #262)
#260 := (= #207 #259)
#257 := (= #204 #256)
#254 := (= #201 #253)
#238 := (iff #185 #237)
#235 := (iff #182 #234)
#236 := [rewrite]: #235
#229 := (iff #88 #232)
#230 := [rewrite]: #229
#239 := [monotonicity #230 #236]: #238
#255 := [monotonicity #239]: #254
#258 := [monotonicity #255]: #257
#261 := [monotonicity #258]: #260
#264 := [monotonicity #261]: #263
#267 := [quant-intro #264]: #266
#226 := (~ #213 #213)
#228 := (~ #210 #210)
#225 := [refl]: #228
#221 := [nnf-pos #225]: #226
#91 := (<= 0::Int #17)
#92 := (not #91)
#100 := (and #92 #85)
#103 := (or #88 #100)
#140 := (if #103 #41 #135)
#143 := (if #22 0::Int #140)
#146 := (if #23 #17 #143)
#149 := (= #40 #146)
#152 := (forall (vars (?v0 Int) (?v1 Int)) #149)
#214 := (iff #152 #213)
#211 := (iff #149 #210)
#208 := (= #146 #207)
#205 := (= #143 #204)
#202 := (= #140 #201)
#186 := (iff #103 #185)
#183 := (iff #100 #182)
#180 := (iff #92 #179)
#177 := (iff #91 #176)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#203 := [monotonicity #187]: #202
#206 := [monotonicity #203]: #205
#209 := [monotonicity #206]: #208
#212 := [monotonicity #209]: #211
#215 := [quant-intro #212]: #214
#33 := (- #19)
#32 := (- #17)
#42 := (mod #32 #33)
#43 := (- #42)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#44 := (if #30 #41 #43)
#45 := (if #22 0::Int #44)
#46 := (if #23 #17 #45)
#47 := (= #40 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#153 := (iff #48 #152)
#150 := (iff #47 #149)
#147 := (= #46 #146)
#144 := (= #45 #143)
#141 := (= #44 #140)
#138 := (= #43 #135)
#132 := (- #129)
#136 := (= #132 #135)
#137 := [rewrite]: #136
#133 := (= #43 #132)
#130 := (= #42 #129)
#111 := (= #33 #110)
#112 := [rewrite]: #111
#108 := (= #32 #107)
#109 := [rewrite]: #108
#131 := [monotonicity #109 #112]: #130
#134 := [monotonicity #131]: #133
#139 := [trans #134 #137]: #138
#104 := (iff #30 #103)
#101 := (iff #29 #100)
#86 := (iff #26 #85)
#87 := [rewrite]: #86
#93 := (iff #28 #92)
#97 := (iff #92 #92)
#95 := (iff #91 #91)
#96 := [rewrite]: #95
#98 := [monotonicity #96]: #97
#94 := [rewrite]: #93
#99 := [trans #94 #98]: #93
#102 := [monotonicity #99 #87]: #101
#89 := (iff #27 #88)
#82 := (iff #25 #81)
#83 := [rewrite]: #82
#90 := [monotonicity #83 #87]: #89
#105 := [monotonicity #90 #102]: #104
#142 := [monotonicity #105 #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [quant-intro #151]: #153
#52 := [asserted]: #48
#155 := [mp #52 #154]: #152
#216 := [mp #155 #215]: #213
#222 := [mp~ #216 #221]: #213
#268 := [mp #222 #267]: #265
#299 := [mp #268 #298]: #296
#727 := [mp #299 #726]: #722
#676 := (not #722)
#680 := (or #676 #686)
#376 := (* -1::Int 3::Int)
#377 := (mod #702 #376)
#709 := (+ #11 #377)
#710 := (= #709 0::Int)
#378 := (<= 3::Int 0::Int)
#388 := (or #391 #378)
#392 := (not #388)
#389 := (or #387 #378)
#390 := (not #389)
#371 := (or #390 #392)
#711 := (if #371 #495 #710)
#712 := (if #385 #386 #711)
#300 := (= 3::Int 0::Int)
#707 := (if #300 #12 #712)
#669 := (or #676 #707)
#671 := (iff #669 #680)
#667 := (iff #680 #680)
#672 := [rewrite]: #667
#675 := (iff #707 #686)
#398 := (if false #12 #686)
#678 := (iff #398 #686)
#393 := [rewrite]: #678
#399 := (iff #707 #398)
#396 := (iff #712 #686)
#685 := (iff #711 #681)
#406 := (iff #710 #684)
#306 := (= #709 #413)
#411 := (= #377 #410)
#687 := (= #376 -3::Int)
#688 := [rewrite]: #687
#412 := [monotonicity #688]: #411
#683 := [monotonicity #412]: #306
#407 := [monotonicity #683]: #406
#700 := (iff #371 #340)
#699 := (iff #392 #697)
#696 := (iff #388 #391)
#692 := (or #391 false)
#695 := (iff #692 #391)
#690 := [rewrite]: #695
#693 := (iff #388 #692)
#363 := (iff #378 false)
#368 := [rewrite]: #363
#694 := [monotonicity #368]: #693
#334 := [trans #694 #690]: #696
#339 := [monotonicity #334]: #699
#355 := (iff #390 #354)
#352 := (iff #389 #387)
#704 := (or #387 false)
#348 := (iff #704 #387)
#689 := [rewrite]: #348
#364 := (iff #389 #704)
#705 := [monotonicity #368]: #364
#353 := [trans #705 #689]: #352
#691 := [monotonicity #353]: #355
#698 := [monotonicity #691 #339]: #700
#682 := [monotonicity #698 #407]: #685
#397 := [monotonicity #682]: #396
#713 := (iff #300 false)
#703 := [rewrite]: #713
#677 := [monotonicity #703 #397]: #399
#679 := [trans #677 #393]: #675
#666 := [monotonicity #679]: #671
#673 := [trans #666 #672]: #671
#670 := [quant-inst #8 #10]: #669
#668 := [mp #670 #673]: #680
#592 := [unit-resolution #668 #727]: #686
#655 := (not #686)
#579 := (or #655 #681)
#537 := (not #385)
#593 := (not #217)
#594 := (or #354 #593)
#595 := [th-lemma arith farkas 1 1]: #594
#596 := [unit-resolution #595 #219]: #354
#591 := (or #537 #387)
#597 := [th-lemma arith triangle-eq]: #591
#583 := [unit-resolution #597 #596]: #537
#498 := (or #655 #385 #681)
#646 := [def-axiom]: #498
#580 := [unit-resolution #646 #583]: #579
#581 := [unit-resolution #580 #592]: #681
#664 := (not #681)
#585 := (or #664 #495)
#674 := (or #340 #387)
#515 := [def-axiom]: #674
#584 := [unit-resolution #515 #596]: #340
#659 := (not #340)
#658 := (or #664 #659 #495)
#665 := [def-axiom]: #658
#586 := [unit-resolution #665 #584]: #585
#587 := [unit-resolution #586 #581]: #495
#497 := (not #495)
#582 := (or #497 #662)
#588 := [th-lemma arith triangle-eq]: #582
#561 := [unit-resolution #588 #587]: #662
[th-lemma arith farkas 1 -1 1 1 #561 #219 #590 #609]: false
84faad2fa160ef59638bbef257c0b4c92bf64f96 569 0
unsat
#2 := false
#23 := 0::Int
decl f4 :: (-> S2 Int Int)
#10 := 1::Int
decl f5 :: (-> S3 Int S2)
decl f3 :: Int
#7 := f3
decl f7 :: S3
#13 := f7
#14 := (f5 f7 f3)
#15 := (f4 #14 1::Int)
#96 := -1::Int
#167 := (* -1::Int #15)
decl f6 :: S3
#8 := f6
#9 := (f5 f6 f3)
#11 := (f4 #9 1::Int)
#166 := (* -1::Int #11)
#168 := (+ f3 #166 #167)
#380 := (>= #168 0::Int)
#576 := (<= #15 0::Int)
#640 := (= #15 0::Int)
#381 := (= f3 0::Int)
#527 := (not #381)
#558 := (not #640)
#499 := [hypothesis]: #558
#535 := (or #527 #640)
#704 := (* -1::Int f3)
#645 := (mod #704 -1::Int)
#612 := (+ #15 #645)
#593 := (= #612 0::Int)
#366 := (>= f3 0::Int)
#406 := (not #366)
#385 := (<= f3 0::Int)
#692 := (not #385)
#302 := (or #692 #406)
#597 := (if #302 #640 #593)
#600 := (if #381 #640 #597)
#21 := (:var 0 Int)
#19 := (:var 1 Int)
#41 := (f5 f7 #19)
#42 := (f4 #41 #21)
#716 := (pattern #42)
#100 := (* -1::Int #21)
#97 := (* -1::Int #19)
#119 := (mod #97 #100)
#285 := (+ #42 #119)
#286 := (= #285 0::Int)
#43 := (mod #19 #21)
#282 := (* -1::Int #43)
#283 := (+ #42 #282)
#284 := (= #283 0::Int)
#74 := (<= #21 0::Int)
#176 := (>= #19 0::Int)
#229 := (or #176 #74)
#230 := (not #229)
#70 := (<= #19 0::Int)
#225 := (or #70 #74)
#226 := (not #225)
#233 := (or #226 #230)
#287 := (if #233 #284 #286)
#281 := (= #42 0::Int)
#24 := (= #19 0::Int)
#288 := (if #24 #281 #287)
#280 := (= #42 #19)
#25 := (= #21 0::Int)
#289 := (if #25 #280 #288)
#717 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #716) #289)
#292 := (forall (vars (?v0 Int) (?v1 Int)) #289)
#720 := (iff #292 #717)
#718 := (iff #289 #289)
#719 := [refl]: #718
#721 := [quant-intro #719]: #720
#125 := (* -1::Int #119)
#249 := (if #233 #43 #125)
#252 := (if #24 0::Int #249)
#255 := (if #25 #19 #252)
#258 := (= #42 #255)
#261 := (forall (vars (?v0 Int) (?v1 Int)) #258)
#293 := (iff #261 #292)
#290 := (iff #258 #289)
#291 := [rewrite]: #290
#294 := [quant-intro #291]: #293
#75 := (not #74)
#179 := (not #176)
#182 := (and #179 #75)
#71 := (not #70)
#78 := (and #71 #75)
#185 := (or #78 #182)
#201 := (if #185 #43 #125)
#204 := (if #24 0::Int #201)
#207 := (if #25 #19 #204)
#210 := (= #42 #207)
#213 := (forall (vars (?v0 Int) (?v1 Int)) #210)
#262 := (iff #213 #261)
#259 := (iff #210 #258)
#256 := (= #207 #255)
#253 := (= #204 #252)
#250 := (= #201 #249)
#234 := (iff #185 #233)
#231 := (iff #182 #230)
#232 := [rewrite]: #231
#227 := (iff #78 #226)
#228 := [rewrite]: #227
#235 := [monotonicity #228 #232]: #234
#251 := [monotonicity #235]: #250
#254 := [monotonicity #251]: #253
#257 := [monotonicity #254]: #256
#260 := [monotonicity #257]: #259
#263 := [quant-intro #260]: #262
#165 := (~ #213 #213)
#218 := (~ #210 #210)
#164 := [refl]: #218
#223 := [nnf-pos #164]: #165
#81 := (<= 0::Int #19)
#82 := (not #81)
#90 := (and #82 #75)
#93 := (or #78 #90)
#130 := (if #93 #43 #125)
#133 := (if #24 0::Int #130)
#136 := (if #25 #19 #133)
#139 := (= #42 #136)
#142 := (forall (vars (?v0 Int) (?v1 Int)) #139)
#214 := (iff #142 #213)
#211 := (iff #139 #210)
#208 := (= #136 #207)
#205 := (= #133 #204)
#202 := (= #130 #201)
#186 := (iff #93 #185)
#183 := (iff #90 #182)
#180 := (iff #82 #179)
#177 := (iff #81 #176)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#203 := [monotonicity #187]: #202
#206 := [monotonicity #203]: #205
#209 := [monotonicity #206]: #208
#212 := [monotonicity #209]: #211
#215 := [quant-intro #212]: #214
#35 := (- #21)
#34 := (- #19)
#44 := (mod #34 #35)
#45 := (- #44)
#28 := (< 0::Int #21)
#30 := (< #19 0::Int)
#31 := (and #30 #28)
#27 := (< 0::Int #19)
#29 := (and #27 #28)
#32 := (or #29 #31)
#46 := (if #32 #43 #45)
#47 := (if #24 0::Int #46)
#48 := (if #25 #19 #47)
#49 := (= #42 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#143 := (iff #50 #142)
#140 := (iff #49 #139)
#137 := (= #48 #136)
#134 := (= #47 #133)
#131 := (= #46 #130)
#128 := (= #45 #125)
#122 := (- #119)
#126 := (= #122 #125)
#127 := [rewrite]: #126
#123 := (= #45 #122)
#120 := (= #44 #119)
#101 := (= #35 #100)
#102 := [rewrite]: #101
#98 := (= #34 #97)
#99 := [rewrite]: #98
#121 := [monotonicity #99 #102]: #120
#124 := [monotonicity #121]: #123
#129 := [trans #124 #127]: #128
#94 := (iff #32 #93)
#91 := (iff #31 #90)
#76 := (iff #28 #75)
#77 := [rewrite]: #76
#83 := (iff #30 #82)
#87 := (iff #82 #82)
#85 := (iff #81 #81)
#86 := [rewrite]: #85
#88 := [monotonicity #86]: #87
#84 := [rewrite]: #83
#89 := [trans #84 #88]: #83
#92 := [monotonicity #89 #77]: #91
#79 := (iff #29 #78)
#72 := (iff #27 #71)
#73 := [rewrite]: #72
#80 := [monotonicity #73 #77]: #79
#95 := [monotonicity #80 #92]: #94
#132 := [monotonicity #95 #129]: #131
#135 := [monotonicity #132]: #134
#138 := [monotonicity #135]: #137
#141 := [monotonicity #138]: #140
#144 := [quant-intro #141]: #143
#54 := [asserted]: #50
#145 := [mp #54 #144]: #142
#216 := [mp #145 #215]: #213
#224 := [mp~ #216 #223]: #213
#264 := [mp #224 #263]: #261
#295 := [mp #264 #294]: #292
#722 := [mp #295 #721]: #717
#587 := (not #717)
#588 := (or #587 #600)
#705 := (* -1::Int 1::Int)
#625 := (mod #704 #705)
#622 := (+ #15 #625)
#624 := (= #622 0::Int)
#489 := (mod f3 1::Int)
#644 := (* -1::Int #489)
#631 := (+ #15 #644)
#633 := (= #631 0::Int)
#386 := (<= 1::Int 0::Int)
#701 := (or #366 #386)
#703 := (not #701)
#383 := (or #385 #386)
#387 := (not #383)
#360 := (or #387 #703)
#634 := (if #360 #633 #624)
#635 := (if #381 #640 #634)
#643 := (= #15 f3)
#382 := (= 1::Int 0::Int)
#636 := (if #382 #643 #635)
#589 := (or #587 #636)
#591 := (iff #589 #588)
#592 := (iff #588 #588)
#578 := [rewrite]: #592
#584 := (iff #636 #600)
#603 := (if false #643 #600)
#595 := (iff #603 #600)
#606 := [rewrite]: #595
#604 := (iff #636 #603)
#601 := (iff #635 #600)
#598 := (iff #634 #597)
#594 := (iff #624 #593)
#609 := (= #622 #612)
#610 := (= #625 #645)
#401 := (= #705 -1::Int)
#402 := [rewrite]: #401
#611 := [monotonicity #402]: #610
#613 := [monotonicity #611]: #609
#596 := [monotonicity #613]: #594
#607 := (iff #633 #640)
#616 := (= #631 #15)
#615 := (+ #15 0::Int)
#619 := (= #615 #15)
#620 := [rewrite]: #619
#617 := (= #631 #615)
#630 := (= #644 0::Int)
#626 := (* -1::Int 0::Int)
#629 := (= #626 0::Int)
#623 := [rewrite]: #629
#627 := (= #644 #626)
#632 := (= #489 0::Int)
#637 := [rewrite]: #632
#628 := [monotonicity #637]: #627
#614 := [trans #628 #623]: #630
#618 := [monotonicity #614]: #617
#621 := [trans #618 #620]: #616
#608 := [monotonicity #621]: #607
#678 := (iff #360 #302)
#407 := (iff #703 #406)
#683 := (iff #701 #366)
#335 := (or #366 false)
#696 := (iff #335 #366)
#682 := [rewrite]: #696
#695 := (iff #701 #335)
#350 := (iff #386 false)
#686 := [rewrite]: #350
#693 := [monotonicity #686]: #695
#405 := [trans #693 #682]: #683
#408 := [monotonicity #405]: #407
#694 := (iff #387 #692)
#691 := (iff #383 #385)
#687 := (or #385 false)
#690 := (iff #687 #385)
#685 := [rewrite]: #690
#688 := (iff #383 #687)
#689 := [monotonicity #686]: #688
#329 := [trans #689 #685]: #691
#334 := [monotonicity #329]: #694
#679 := [monotonicity #334 #408]: #678
#599 := [monotonicity #679 #608 #596]: #598
#602 := [monotonicity #599]: #601
#363 := (iff #382 false)
#699 := [rewrite]: #363
#605 := [monotonicity #699 #602]: #604
#585 := [trans #605 #606]: #584
#586 := [monotonicity #585]: #591
#574 := [trans #586 #578]: #591
#590 := [quant-inst #7 #10]: #589
#575 := [mp #590 #574]: #588
#554 := [unit-resolution #575 #722]: #600
#565 := (not #600)
#566 := (or #565 #527 #640)
#567 := [def-axiom]: #566
#559 := [unit-resolution #567 #554]: #535
#560 := [unit-resolution #559 #499]: #527
#659 := (not #302)
#555 := (or #381 #597)
#570 := (or #565 #381 #597)
#571 := [def-axiom]: #570
#561 := [unit-resolution #571 #554]: #555
#529 := [unit-resolution #561 #560]: #597
#582 := (not #597)
#577 := (or #582 #659 #640)
#583 := [def-axiom]: #577
#536 := [unit-resolution #583 #529 #499]: #659
#657 := (or #302 #385)
#651 := [def-axiom]: #657
#495 := [unit-resolution #651 #536]: #385
#652 := (or #302 #366)
#658 := [def-axiom]: #652
#526 := [unit-resolution #658 #536]: #366
#528 := (or #381 #692 #406)
#530 := [th-lemma arith triangle-eq]: #528
#537 := [unit-resolution #530 #526 #495 #560]: false
#539 := [lemma #537]: #640
#450 := (or #558 #576)
#452 := [th-lemma arith triangle-eq]: #450
#453 := [unit-resolution #452 #539]: #576
#655 := (<= #11 0::Int)
#384 := (= #11 0::Int)
#508 := [hypothesis]: #527
#490 := (div f3 1::Int)
#697 := (* -1::Int #490)
#371 := (+ #11 #697)
#372 := (= #371 0::Int)
#534 := (not #372)
#486 := (+ f3 #697)
#500 := (>= #486 0::Int)
#525 := (= #486 0::Int)
#1 := true
#163 := [true-axiom]: true
#463 := (or false #525)
#466 := [th-lemma arith]: #463
#468 := [unit-resolution #466 #163]: #525
#469 := (not #525)
#465 := (or #469 #500)
#470 := [th-lemma arith triangle-eq]: #465
#460 := [unit-resolution #470 #468]: #500
#491 := (<= #371 0::Int)
#456 := [hypothesis]: #372
#457 := (or #534 #491)
#461 := [th-lemma arith triangle-eq]: #457
#454 := [unit-resolution #461 #456]: #491
#458 := (not #500)
#455 := (not #491)
#462 := (not #576)
#459 := (or #380 #462 #455 #458)
#445 := [th-lemma arith assign-bounds 1 1 -1]: #459
#447 := [unit-resolution #445 #454 #453 #460]: #380
#296 := (<= #168 0::Int)
#498 := (<= #486 0::Int)
#448 := (or #469 #498)
#446 := [th-lemma arith triangle-eq]: #448
#449 := [unit-resolution #446 #468]: #498
#579 := (>= #15 0::Int)
#431 := (or #558 #579)
#433 := [th-lemma arith triangle-eq]: #431
#434 := [unit-resolution #433 #539]: #579
#492 := (>= #371 0::Int)
#435 := (or #534 #492)
#436 := [th-lemma arith triangle-eq]: #435
#437 := [unit-resolution #436 #456]: #492
#440 := (not #498)
#439 := (not #492)
#438 := (not #579)
#441 := (or #296 #438 #439 #440)
#442 := [th-lemma arith assign-bounds 1 1 -1]: #441
#443 := [unit-resolution #442 #437 #434 #449]: #296
#444 := (not #380)
#432 := (not #296)
#424 := (or #432 #444)
#169 := (= #168 0::Int)
#172 := (not #169)
#60 := (+ #11 #15)
#63 := (= f3 #60)
#66 := (not #63)
#173 := (iff #66 #172)
#170 := (iff #63 #169)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#12 := (* #11 1::Int)
#16 := (+ #12 #15)
#17 := (= f3 #16)
#18 := (not #17)
#67 := (iff #18 #66)
#64 := (iff #17 #63)
#61 := (= #16 #60)
#58 := (= #12 #11)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#52 := [asserted]: #18
#69 := [mp #52 #68]: #66
#175 := [mp #69 #174]: #172
#421 := (or #169 #432 #444)
#423 := [th-lemma arith triangle-eq]: #421
#425 := [unit-resolution #423 #175]: #424
#426 := [unit-resolution #425 #443 #447]: false
#427 := [lemma #426]: #534
#676 := (div #704 -1::Int)
#681 := (* -1::Int #676)
#393 := (+ #11 #681)
#673 := (= #393 0::Int)
#674 := (if #302 #372 #673)
#552 := (or #381 #674)
#664 := (if #381 #384 #674)
#20 := (f5 f6 #19)
#22 := (f4 #20 #21)
#709 := (pattern #22)
#103 := (div #97 #100)
#269 := (* -1::Int #103)
#270 := (+ #22 #269)
#271 := (= #270 0::Int)
#33 := (div #19 #21)
#266 := (* -1::Int #33)
#267 := (+ #22 #266)
#268 := (= #267 0::Int)
#272 := (if #233 #268 #271)
#265 := (= #22 0::Int)
#26 := (or #24 #25)
#273 := (if #26 #265 #272)
#710 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #709) #273)
#276 := (forall (vars (?v0 Int) (?v1 Int)) #273)
#713 := (iff #276 #710)
#711 := (iff #273 #273)
#712 := [refl]: #711
#714 := [quant-intro #712]: #713
#236 := (if #233 #33 #103)
#239 := (if #26 0::Int #236)
#242 := (= #22 #239)
#245 := (forall (vars (?v0 Int) (?v1 Int)) #242)
#277 := (iff #245 #276)
#274 := (iff #242 #273)
#275 := [rewrite]: #274
#278 := [quant-intro #275]: #277
#188 := (if #185 #33 #103)
#191 := (if #26 0::Int #188)
#194 := (= #22 #191)
#197 := (forall (vars (?v0 Int) (?v1 Int)) #194)
#246 := (iff #197 #245)
#243 := (iff #194 #242)
#240 := (= #191 #239)
#237 := (= #188 #236)
#238 := [monotonicity #235]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [quant-intro #244]: #246
#221 := (~ #197 #197)
#219 := (~ #194 #194)
#220 := [refl]: #219
#222 := [nnf-pos #220]: #221
#106 := (if #93 #33 #103)
#109 := (if #26 0::Int #106)
#112 := (= #22 #109)
#115 := (forall (vars (?v0 Int) (?v1 Int)) #112)
#198 := (iff #115 #197)
#195 := (iff #112 #194)
#192 := (= #109 #191)
#189 := (= #106 #188)
#190 := [monotonicity #187]: #189
#193 := [monotonicity #190]: #192
#196 := [monotonicity #193]: #195
#199 := [quant-intro #196]: #198
#36 := (div #34 #35)
#37 := (if #32 #33 #36)
#38 := (if #26 0::Int #37)
#39 := (= #22 #38)
#40 := (forall (vars (?v0 Int) (?v1 Int)) #39)
#116 := (iff #40 #115)
#113 := (iff #39 #112)
#110 := (= #38 #109)
#107 := (= #37 #106)
#104 := (= #36 #103)
#105 := [monotonicity #99 #102]: #104
#108 := [monotonicity #95 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [monotonicity #111]: #113
#117 := [quant-intro #114]: #116
#53 := [asserted]: #40
#118 := [mp #53 #117]: #115
#200 := [mp #118 #199]: #197
#217 := [mp~ #200 #222]: #197
#248 := [mp #217 #247]: #245
#279 := [mp #248 #278]: #276
#715 := [mp #279 #714]: #710
#661 := (not #710)
#662 := (or #661 #664)
#706 := (div #704 #705)
#707 := (* -1::Int #706)
#702 := (+ #11 #707)
#708 := (= #702 0::Int)
#698 := (if #360 #372 #708)
#373 := (or #381 #382)
#358 := (if #373 #384 #698)
#667 := (or #661 #358)
#663 := (iff #667 #662)
#510 := (iff #662 #662)
#511 := [rewrite]: #510
#665 := (iff #358 #664)
#671 := (iff #698 #674)
#388 := (iff #708 #673)
#394 := (= #702 #393)
#391 := (= #707 #681)
#680 := (= #706 #676)
#677 := [monotonicity #402]: #680
#392 := [monotonicity #677]: #391
#672 := [monotonicity #392]: #394
#670 := [monotonicity #672]: #388
#675 := [monotonicity #679 #670]: #671
#348 := (iff #373 #381)
#359 := (or #381 false)
#684 := (iff #359 #381)
#347 := [rewrite]: #684
#700 := (iff #373 #359)
#343 := [monotonicity #699]: #700
#349 := [trans #343 #347]: #348
#666 := [monotonicity #349 #675]: #665
#669 := [monotonicity #666]: #663
#512 := [trans #669 #511]: #663
#668 := [quant-inst #7 #10]: #667
#654 := [mp #668 #512]: #662
#531 := [unit-resolution #654 #715]: #664
#642 := (not #664)
#545 := (or #642 #381 #674)
#538 := [def-axiom]: #545
#507 := [unit-resolution #538 #531]: #552
#501 := [unit-resolution #507 #508]: #674
#649 := (not #674)
#647 := (or #649 #659 #372)
#650 := [def-axiom]: #647
#502 := [unit-resolution #650 #501 #427]: #659
#503 := [unit-resolution #651 #502]: #385
#504 := [unit-resolution #658 #502]: #366
#505 := [unit-resolution #530 #504 #503 #508]: false
#488 := [lemma #505]: #381
#506 := (or #527 #384)
#542 := (or #642 #527 #384)
#544 := [def-axiom]: #542
#514 := [unit-resolution #544 #531]: #506
#515 := [unit-resolution #514 #488]: #384
#546 := (not #384)
#516 := (or #546 #655)
#517 := [th-lemma arith triangle-eq]: #516
#518 := [unit-resolution #517 #515]: #655
#519 := (or #527 #366)
#520 := [th-lemma arith triangle-eq]: #519
#521 := [unit-resolution #520 #488]: #366
#522 := (not #655)
#523 := (or #380 #522 #462 #406)
#524 := [th-lemma arith assign-bounds 1 1 -1]: #523
#509 := [unit-resolution #524 #521 #518 #453]: #380
#656 := (>= #11 0::Int)
#487 := (or #546 #656)
#494 := [th-lemma arith triangle-eq]: #487
#496 := [unit-resolution #494 #515]: #656
#497 := (or #527 #385)
#428 := [th-lemma arith triangle-eq]: #497
#429 := [unit-resolution #428 #488]: #385
#422 := (not #656)
#430 := (or #296 #422 #438 #692)
#415 := [th-lemma arith assign-bounds 1 1 -1]: #430
#416 := [unit-resolution #415 #429 #496 #434]: #296
[unit-resolution #425 #416 #509]: false
34442a78b76a0af7e551b55a4cf9e46f5680194f 558 0
unsat
#2 := false
#23 := 0::Int
decl f4 :: (-> S2 Int Int)
#10 := 3::Int
decl f5 :: (-> S3 Int S2)
decl f3 :: Int
#7 := f3
decl f6 :: S3
#8 := f6
#9 := (f5 f6 f3)
#11 := (f4 #9 3::Int)
#659 := (>= #11 0::Int)
#387 := (= #11 0::Int)
#384 := (= f3 0::Int)
#530 := (not #384)
#566 := [hypothesis]: #530
#388 := (<= f3 0::Int)
#369 := (>= f3 0::Int)
#409 := (not #369)
#695 := (not #388)
#304 := (or #695 #409)
#662 := (not #304)
#167 := -3::Int
#97 := -1::Int
#707 := (* -1::Int f3)
#679 := (div #707 -3::Int)
#684 := (* -1::Int #679)
#396 := (+ #11 #684)
#676 := (= #396 0::Int)
#493 := (div f3 3::Int)
#700 := (* -1::Int #493)
#374 := (+ #11 #700)
#375 := (= #374 0::Int)
#677 := (if #304 #375 #676)
#567 := (or #384 #677)
#667 := (if #384 #387 #677)
#21 := (:var 0 Int)
#19 := (:var 1 Int)
#20 := (f5 f6 #19)
#22 := (f4 #20 #21)
#712 := (pattern #22)
#101 := (* -1::Int #21)
#98 := (* -1::Int #19)
#104 := (div #98 #101)
#271 := (* -1::Int #104)
#272 := (+ #22 #271)
#273 := (= #272 0::Int)
#33 := (div #19 #21)
#268 := (* -1::Int #33)
#269 := (+ #22 #268)
#270 := (= #269 0::Int)
#75 := (<= #21 0::Int)
#178 := (>= #19 0::Int)
#231 := (or #178 #75)
#232 := (not #231)
#71 := (<= #19 0::Int)
#227 := (or #71 #75)
#228 := (not #227)
#235 := (or #228 #232)
#274 := (if #235 #270 #273)
#267 := (= #22 0::Int)
#25 := (= #21 0::Int)
#24 := (= #19 0::Int)
#26 := (or #24 #25)
#275 := (if #26 #267 #274)
#713 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #712) #275)
#278 := (forall (vars (?v0 Int) (?v1 Int)) #275)
#716 := (iff #278 #713)
#714 := (iff #275 #275)
#715 := [refl]: #714
#717 := [quant-intro #715]: #716
#238 := (if #235 #33 #104)
#241 := (if #26 0::Int #238)
#244 := (= #22 #241)
#247 := (forall (vars (?v0 Int) (?v1 Int)) #244)
#279 := (iff #247 #278)
#276 := (iff #244 #275)
#277 := [rewrite]: #276
#280 := [quant-intro #277]: #279
#76 := (not #75)
#181 := (not #178)
#184 := (and #181 #76)
#72 := (not #71)
#79 := (and #72 #76)
#187 := (or #79 #184)
#190 := (if #187 #33 #104)
#193 := (if #26 0::Int #190)
#196 := (= #22 #193)
#199 := (forall (vars (?v0 Int) (?v1 Int)) #196)
#248 := (iff #199 #247)
#245 := (iff #196 #244)
#242 := (= #193 #241)
#239 := (= #190 #238)
#236 := (iff #187 #235)
#233 := (iff #184 #232)
#234 := [rewrite]: #233
#229 := (iff #79 #228)
#230 := [rewrite]: #229
#237 := [monotonicity #230 #234]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [monotonicity #243]: #245
#249 := [quant-intro #246]: #248
#165 := (~ #199 #199)
#221 := (~ #196 #196)
#222 := [refl]: #221
#166 := [nnf-pos #222]: #165
#82 := (<= 0::Int #19)
#83 := (not #82)
#91 := (and #83 #76)
#94 := (or #79 #91)
#107 := (if #94 #33 #104)
#110 := (if #26 0::Int #107)
#113 := (= #22 #110)
#116 := (forall (vars (?v0 Int) (?v1 Int)) #113)
#200 := (iff #116 #199)
#197 := (iff #113 #196)
#194 := (= #110 #193)
#191 := (= #107 #190)
#188 := (iff #94 #187)
#185 := (iff #91 #184)
#182 := (iff #83 #181)
#179 := (iff #82 #178)
#180 := [rewrite]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [monotonicity #186]: #188
#192 := [monotonicity #189]: #191
#195 := [monotonicity #192]: #194
#198 := [monotonicity #195]: #197
#201 := [quant-intro #198]: #200
#35 := (- #21)
#34 := (- #19)
#36 := (div #34 #35)
#28 := (< 0::Int #21)
#30 := (< #19 0::Int)
#31 := (and #30 #28)
#27 := (< 0::Int #19)
#29 := (and #27 #28)
#32 := (or #29 #31)
#37 := (if #32 #33 #36)
#38 := (if #26 0::Int #37)
#39 := (= #22 #38)
#40 := (forall (vars (?v0 Int) (?v1 Int)) #39)
#117 := (iff #40 #116)
#114 := (iff #39 #113)
#111 := (= #38 #110)
#108 := (= #37 #107)
#105 := (= #36 #104)
#102 := (= #35 #101)
#103 := [rewrite]: #102
#99 := (= #34 #98)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #103]: #105
#95 := (iff #32 #94)
#92 := (iff #31 #91)
#77 := (iff #28 #76)
#78 := [rewrite]: #77
#84 := (iff #30 #83)
#88 := (iff #83 #83)
#86 := (iff #82 #82)
#87 := [rewrite]: #86
#89 := [monotonicity #87]: #88
#85 := [rewrite]: #84
#90 := [trans #85 #89]: #84
#93 := [monotonicity #90 #78]: #92
#80 := (iff #29 #79)
#73 := (iff #27 #72)
#74 := [rewrite]: #73
#81 := [monotonicity #74 #78]: #80
#96 := [monotonicity #81 #93]: #95
#109 := [monotonicity #96 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [quant-intro #115]: #117
#53 := [asserted]: #40
#119 := [mp #53 #118]: #116
#202 := [mp #119 #201]: #199
#219 := [mp~ #202 #166]: #199
#250 := [mp #219 #249]: #247
#281 := [mp #250 #280]: #278
#718 := [mp #281 #717]: #713
#664 := (not #713)
#665 := (or #664 #667)
#708 := (* -1::Int 3::Int)
#709 := (div #707 #708)
#710 := (* -1::Int #709)
#705 := (+ #11 #710)
#711 := (= #705 0::Int)
#389 := (<= 3::Int 0::Int)
#704 := (or #369 #389)
#706 := (not #704)
#386 := (or #388 #389)
#390 := (not #386)
#363 := (or #390 #706)
#701 := (if #363 #375 #711)
#385 := (= 3::Int 0::Int)
#376 := (or #384 #385)
#361 := (if #376 #387 #701)
#670 := (or #664 #361)
#666 := (iff #670 #665)
#513 := (iff #665 #665)
#514 := [rewrite]: #513
#668 := (iff #361 #667)
#674 := (iff #701 #677)
#391 := (iff #711 #676)
#397 := (= #705 #396)
#394 := (= #710 #684)
#683 := (= #709 #679)
#404 := (= #708 -3::Int)
#405 := [rewrite]: #404
#680 := [monotonicity #405]: #683
#395 := [monotonicity #680]: #394
#675 := [monotonicity #395]: #397
#673 := [monotonicity #675]: #391
#681 := (iff #363 #304)
#410 := (iff #706 #409)
#686 := (iff #704 #369)
#338 := (or #369 false)
#699 := (iff #338 #369)
#685 := [rewrite]: #699
#698 := (iff #704 #338)
#353 := (iff #389 false)
#689 := [rewrite]: #353
#696 := [monotonicity #689]: #698
#408 := [trans #696 #685]: #686
#411 := [monotonicity #408]: #410
#697 := (iff #390 #695)
#694 := (iff #386 #388)
#690 := (or #388 false)
#693 := (iff #690 #388)
#688 := [rewrite]: #693
#691 := (iff #386 #690)
#692 := [monotonicity #689]: #691
#332 := [trans #692 #688]: #694
#337 := [monotonicity #332]: #697
#682 := [monotonicity #337 #411]: #681
#678 := [monotonicity #682 #673]: #674
#351 := (iff #376 #384)
#362 := (or #384 false)
#687 := (iff #362 #384)
#350 := [rewrite]: #687
#703 := (iff #376 #362)
#366 := (iff #385 false)
#702 := [rewrite]: #366
#346 := [monotonicity #702]: #703
#352 := [trans #346 #350]: #351
#669 := [monotonicity #352 #678]: #668
#672 := [monotonicity #669]: #666
#515 := [trans #672 #514]: #666
#671 := [quant-inst #7 #10]: #670
#657 := [mp #671 #515]: #665
#570 := [unit-resolution #657 #718]: #667
#645 := (not #667)
#548 := (or #645 #384 #677)
#541 := [def-axiom]: #548
#572 := [unit-resolution #541 #570]: #567
#568 := [unit-resolution #572 #566]: #677
#648 := (mod #707 -3::Int)
decl f7 :: S3
#13 := f7
#14 := (f5 f7 f3)
#15 := (f4 #14 3::Int)
#629 := (+ #15 #648)
#632 := (= #629 0::Int)
#492 := (mod f3 3::Int)
#647 := (* -1::Int #492)
#634 := (+ #15 #647)
#636 := (= #634 0::Int)
#617 := (if #304 #636 #632)
#574 := (or #384 #617)
#643 := (= #15 0::Int)
#621 := (if #384 #643 #617)
#41 := (f5 f7 #19)
#42 := (f4 #41 #21)
#719 := (pattern #42)
#120 := (mod #98 #101)
#287 := (+ #42 #120)
#288 := (= #287 0::Int)
#43 := (mod #19 #21)
#284 := (* -1::Int #43)
#285 := (+ #42 #284)
#286 := (= #285 0::Int)
#289 := (if #235 #286 #288)
#283 := (= #42 0::Int)
#290 := (if #24 #283 #289)
#282 := (= #42 #19)
#291 := (if #25 #282 #290)
#720 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #719) #291)
#294 := (forall (vars (?v0 Int) (?v1 Int)) #291)
#723 := (iff #294 #720)
#721 := (iff #291 #291)
#722 := [refl]: #721
#724 := [quant-intro #722]: #723
#126 := (* -1::Int #120)
#251 := (if #235 #43 #126)
#254 := (if #24 0::Int #251)
#257 := (if #25 #19 #254)
#260 := (= #42 #257)
#263 := (forall (vars (?v0 Int) (?v1 Int)) #260)
#295 := (iff #263 #294)
#292 := (iff #260 #291)
#293 := [rewrite]: #292
#296 := [quant-intro #293]: #295
#203 := (if #187 #43 #126)
#206 := (if #24 0::Int #203)
#209 := (if #25 #19 #206)
#212 := (= #42 #209)
#215 := (forall (vars (?v0 Int) (?v1 Int)) #212)
#264 := (iff #215 #263)
#261 := (iff #212 #260)
#258 := (= #209 #257)
#255 := (= #206 #254)
#252 := (= #203 #251)
#253 := [monotonicity #237]: #252
#256 := [monotonicity #253]: #255
#259 := [monotonicity #256]: #258
#262 := [monotonicity #259]: #261
#265 := [quant-intro #262]: #264
#224 := (~ #215 #215)
#220 := (~ #212 #212)
#223 := [refl]: #220
#225 := [nnf-pos #223]: #224
#131 := (if #94 #43 #126)
#134 := (if #24 0::Int #131)
#137 := (if #25 #19 #134)
#140 := (= #42 #137)
#143 := (forall (vars (?v0 Int) (?v1 Int)) #140)
#216 := (iff #143 #215)
#213 := (iff #140 #212)
#210 := (= #137 #209)
#207 := (= #134 #206)
#204 := (= #131 #203)
#205 := [monotonicity #189]: #204
#208 := [monotonicity #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [quant-intro #214]: #216
#44 := (mod #34 #35)
#45 := (- #44)
#46 := (if #32 #43 #45)
#47 := (if #24 0::Int #46)
#48 := (if #25 #19 #47)
#49 := (= #42 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#144 := (iff #50 #143)
#141 := (iff #49 #140)
#138 := (= #48 #137)
#135 := (= #47 #134)
#132 := (= #46 #131)
#129 := (= #45 #126)
#123 := (- #120)
#127 := (= #123 #126)
#128 := [rewrite]: #127
#124 := (= #45 #123)
#121 := (= #44 #120)
#122 := [monotonicity #100 #103]: #121
#125 := [monotonicity #122]: #124
#130 := [trans #125 #128]: #129
#133 := [monotonicity #96 #130]: #132
#136 := [monotonicity #133]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [quant-intro #142]: #144
#54 := [asserted]: #50
#146 := [mp #54 #145]: #143
#218 := [mp #146 #217]: #215
#226 := [mp~ #218 #225]: #215
#266 := [mp #226 #265]: #263
#297 := [mp #266 #296]: #294
#725 := [mp #297 #724]: #720
#612 := (not #720)
#616 := (or #612 #621)
#628 := (mod #707 #708)
#625 := (+ #15 #628)
#627 := (= #625 0::Int)
#637 := (if #363 #636 #627)
#638 := (if #384 #643 #637)
#646 := (= #15 f3)
#639 := (if #385 #646 #638)
#596 := (or #612 #639)
#599 := (iff #596 #616)
#601 := (iff #616 #616)
#602 := [rewrite]: #601
#614 := (iff #639 #621)
#619 := (if false #646 #621)
#611 := (iff #619 #621)
#613 := [rewrite]: #611
#624 := (iff #639 #619)
#622 := (iff #638 #621)
#618 := (iff #637 #617)
#626 := (iff #627 #632)
#630 := (= #625 #629)
#635 := (= #628 #648)
#640 := [monotonicity #405]: #635
#631 := [monotonicity #640]: #630
#633 := [monotonicity #631]: #626
#620 := [monotonicity #682 #633]: #618
#623 := [monotonicity #620]: #622
#610 := [monotonicity #702 #623]: #624
#615 := [trans #610 #613]: #614
#600 := [monotonicity #615]: #599
#603 := [trans #600 #602]: #599
#597 := [quant-inst #7 #10]: #596
#604 := [mp #597 #603]: #616
#573 := [unit-resolution #604 #725]: #621
#578 := (not #621)
#583 := (or #578 #384 #617)
#584 := [def-axiom]: #583
#575 := [unit-resolution #584 #573]: #574
#571 := [unit-resolution #575 #566]: #617
#652 := (not #677)
#587 := (not #617)
#430 := (or #662 #587 #652)
#608 := (>= #634 0::Int)
#489 := [hypothesis]: #617
#490 := [hypothesis]: #304
#588 := (or #587 #662 #636)
#590 := [def-axiom]: #588
#497 := [unit-resolution #590 #490 #489]: #636
#593 := (not #636)
#438 := (or #593 #608)
#439 := [th-lemma arith triangle-eq]: #438
#440 := [unit-resolution #439 #497]: #608
#495 := (>= #374 0::Int)
#480 := [hypothesis]: #677
#650 := (or #652 #662 #375)
#653 := [def-axiom]: #650
#481 := [unit-resolution #653 #490 #480]: #375
#537 := (not #375)
#441 := (or #537 #495)
#442 := [th-lemma arith triangle-eq]: #441
#443 := [unit-resolution #442 #481]: #495
#169 := (* -1::Int #15)
#168 := (* -3::Int #11)
#170 := (+ f3 #168 #169)
#298 := (<= #170 0::Int)
#444 := (not #298)
#383 := (>= #170 0::Int)
#503 := (not #383)
#504 := [hypothesis]: #503
#529 := (or #384 #383)
#329 := (or #662 #383 #587 #652)
#607 := (<= #634 0::Int)
#499 := (or #593 #607)
#500 := [th-lemma arith triangle-eq]: #499
#501 := [unit-resolution #500 #497]: #607
#502 := (* -3::Int #493)
#557 := (+ f3 #647 #502)
#532 := (>= #557 0::Int)
#556 := (= #557 0::Int)
#1 := true
#164 := [true-axiom]: true
#505 := (or false #556)
#506 := [th-lemma arith]: #505
#507 := [unit-resolution #506 #164]: #556
#508 := (not #556)
#491 := (or #508 #532)
#509 := [th-lemma arith triangle-eq]: #491
#479 := [unit-resolution #509 #507]: #532
#494 := (<= #374 0::Int)
#482 := (or #537 #494)
#484 := [th-lemma arith triangle-eq]: #482
#485 := [unit-resolution #484 #481]: #494
#486 := [th-lemma arith farkas 3 -1 1 1 #485 #479 #504 #501]: false
#487 := [lemma #486]: #329
#576 := [unit-resolution #487 #571 #504 #568]: #662
#660 := (or #304 #388)
#654 := [def-axiom]: #660
#538 := [unit-resolution #654 #576]: #388
#655 := (or #304 #369)
#661 := [def-axiom]: #655
#562 := [unit-resolution #661 #576]: #369
#563 := (or #384 #695 #409)
#558 := [th-lemma arith triangle-eq]: #563
#498 := [unit-resolution #558 #562 #538 #566]: false
#525 := [lemma #498]: #529
#526 := [unit-resolution #525 #504]: #384
#527 := (or #530 #369)
#512 := [th-lemma arith triangle-eq]: #527
#528 := [unit-resolution #512 #526]: #369
#605 := (<= #15 0::Int)
#564 := (or #530 #643)
#579 := (or #578 #530 #643)
#582 := [def-axiom]: #579
#483 := [unit-resolution #582 #573]: #564
#488 := [unit-resolution #483 #526]: #643
#585 := (not #643)
#467 := (or #585 #605)
#470 := [th-lemma arith triangle-eq]: #467
#474 := [unit-resolution #470 #488]: #605
#658 := (<= #11 0::Int)
#476 := (or #530 #387)
#545 := (or #645 #530 #387)
#547 := [def-axiom]: #545
#477 := [unit-resolution #547 #570]: #476
#475 := [unit-resolution #477 #526]: #387
#549 := (not #387)
#478 := (or #549 #658)
#466 := [th-lemma arith triangle-eq]: #478
#469 := [unit-resolution #466 #475]: #658
#471 := [th-lemma arith farkas -3 -1 -1 1 #469 #474 #504 #528]: false
#472 := [lemma #471]: #383
#435 := (or #444 #503)
#171 := (= #170 0::Int)
#174 := (not #171)
#58 := (* 3::Int #11)
#61 := (+ #58 #15)
#64 := (= f3 #61)
#67 := (not #64)
#175 := (iff #67 #174)
#172 := (iff #64 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173]: #175
#12 := (* #11 3::Int)
#16 := (+ #12 #15)
#17 := (= f3 #16)
#18 := (not #17)
#68 := (iff #18 #67)
#65 := (iff #17 #64)
#62 := (= #16 #61)
#59 := (= #12 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#69 := [monotonicity #66]: #68
#52 := [asserted]: #18
#70 := [mp #52 #69]: #67
#177 := [mp #70 #176]: #174
#445 := (or #171 #444 #503)
#446 := [th-lemma arith triangle-eq]: #445
#447 := [unit-resolution #446 #177]: #435
#424 := [unit-resolution #447 #472]: #444
#511 := (<= #557 0::Int)
#426 := (or #508 #511)
#427 := [th-lemma arith triangle-eq]: #426
#428 := [unit-resolution #427 #507]: #511
#429 := [th-lemma arith farkas -1 1 3 1 #428 #424 #443 #440]: false
#431 := [lemma #429]: #430
#468 := [unit-resolution #431 #571 #568]: #662
#531 := [unit-resolution #654 #468]: #388
#473 := [unit-resolution #661 #468]: #369
#463 := [unit-resolution #558 #473 #531 #566]: false
#453 := [lemma #463]: #384
#533 := [unit-resolution #477 #453]: #387
#540 := (or #549 #659)
#542 := [th-lemma arith triangle-eq]: #540
#543 := [unit-resolution #542 #533]: #659
#606 := (>= #15 0::Int)
#544 := [unit-resolution #483 #453]: #643
#554 := (or #585 #606)
#534 := [th-lemma arith triangle-eq]: #554
#555 := [unit-resolution #534 #544]: #606
#510 := (or #530 #388)
#516 := [th-lemma arith triangle-eq]: #510
#517 := [unit-resolution #516 #453]: #388
[th-lemma arith farkas -1/3 1/3 1/3 1 #517 #555 #424 #543]: false
44e7de81026e9de87a6d1cf926d12ef2c6a20dc7 86 0
unsat
#2 := false
#7 := 0::Int
decl f3 :: Int
#8 := f3
#28 := -1::Int
#29 := (* -1::Int f3)
#70 := (>= f3 0::Int)
#73 := (if #70 f3 #29)
#93 := (* -1::Int #73)
#96 := (+ #29 #93)
#97 := (<= #96 0::Int)
#69 := (= #29 #73)
#88 := (not #70)
#94 := (+ f3 #93)
#95 := (<= #94 0::Int)
#68 := (= f3 #73)
#100 := [hypothesis]: #70
#89 := (or #88 #68)
#90 := [def-axiom]: #89
#101 := [unit-resolution #90 #100]: #68
#102 := (not #68)
#103 := (or #102 #95)
#104 := [th-lemma arith triangle-eq]: #103
#105 := [unit-resolution #104 #101]: #95
#80 := (>= #73 0::Int)
#84 := (not #80)
#19 := (<= 0::Int f3)
#35 := (if #19 f3 #29)
#40 := (<= 0::Int #35)
#46 := (not #40)
#85 := (iff #46 #84)
#82 := (iff #40 #80)
#76 := (<= 0::Int #73)
#79 := (iff #76 #80)
#81 := [rewrite]: #79
#77 := (iff #40 #76)
#74 := (= #35 #73)
#71 := (iff #19 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#83 := [trans #78 #81]: #82
#86 := [monotonicity #83]: #85
#10 := (- f3)
#9 := (< f3 0::Int)
#11 := (if #9 #10 f3)
#12 := (<= 0::Int #11)
#13 := (not #12)
#47 := (iff #13 #46)
#41 := (iff #12 #40)
#43 := (iff #40 #40)
#44 := [rewrite]: #43
#38 := (= #11 #35)
#20 := (not #19)
#32 := (if #20 #29 f3)
#36 := (= #32 #35)
#37 := [rewrite]: #36
#33 := (= #11 #32)
#30 := (= #10 #29)
#31 := [rewrite]: #30
#21 := (iff #9 #20)
#25 := (iff #20 #20)
#23 := (iff #19 #19)
#24 := [rewrite]: #23
#26 := [monotonicity #24]: #25
#22 := [rewrite]: #21
#27 := [trans #22 #26]: #21
#34 := [monotonicity #27 #31]: #33
#39 := [trans #34 #37]: #38
#42 := [monotonicity #39]: #41
#45 := [trans #42 #44]: #41
#48 := [monotonicity #45]: #47
#15 := [asserted]: #13
#49 := [mp #15 #48]: #46
#87 := [mp #49 #86]: #84
#106 := [th-lemma arith farkas -1 1 1 #100 #87 #105]: false
#107 := [lemma #106]: #88
#91 := (or #70 #69)
#92 := [def-axiom]: #91
#99 := [unit-resolution #92 #107]: #69
#108 := (not #69)
#109 := (or #108 #97)
#110 := [th-lemma arith triangle-eq]: #109
#111 := [unit-resolution #110 #99]: #97
[th-lemma arith farkas 1 1 1 #87 #107 #111]: false
6eee9e55ae7eb673a1282f59fcbd03d15f5bb9fe 165 0
unsat
#2 := false
#8 := 0::Int
decl f3 :: Int
#7 := f3
#30 := -1::Int
#31 := (* -1::Int f3)
#78 := (>= f3 0::Int)
#81 := (if #78 f3 #31)
#77 := (>= #81 0::Int)
#95 := (not #77)
#76 := (<= #81 0::Int)
#94 := (not #76)
#96 := (or #94 #95)
#145 := (* -1::Int #81)
#148 := (+ #31 #145)
#162 := (<= #148 0::Int)
#119 := (= #31 #81)
#109 := (not #78)
#107 := (<= f3 0::Int)
#108 := (not #107)
#110 := (or #108 #109)
#97 := (not #96)
#164 := [hypothesis]: #97
#139 := (or #96 #110)
#111 := (not #110)
#114 := (iff #96 #111)
#13 := (= f3 0::Int)
#84 := (= #81 0::Int)
#87 := (not #84)
#90 := (iff #87 #13)
#115 := (iff #90 #114)
#112 := (iff #13 #111)
#113 := [rewrite]: #112
#105 := (iff #87 #96)
#100 := (not #97)
#103 := (iff #100 #96)
#104 := [rewrite]: #103
#101 := (iff #87 #100)
#98 := (iff #84 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#116 := [monotonicity #106 #113]: #115
#21 := (<= 0::Int f3)
#37 := (if #21 f3 #31)
#42 := (= #37 0::Int)
#51 := (not #42)
#52 := (iff #51 #13)
#91 := (iff #52 #90)
#88 := (iff #51 #87)
#85 := (iff #42 #84)
#82 := (= #37 #81)
#79 := (iff #21 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#86 := [monotonicity #83]: #85
#89 := [monotonicity #86]: #88
#92 := [monotonicity #89]: #91
#10 := (- f3)
#9 := (< f3 0::Int)
#11 := (if #9 #10 f3)
#12 := (= #11 0::Int)
#14 := (iff #12 #13)
#15 := (not #14)
#55 := (iff #15 #52)
#45 := (iff #42 #13)
#48 := (not #45)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #15 #48)
#46 := (iff #14 #45)
#43 := (iff #12 #42)
#40 := (= #11 #37)
#22 := (not #21)
#34 := (if #22 #31 f3)
#38 := (= #34 #37)
#39 := [rewrite]: #38
#35 := (= #11 #34)
#32 := (= #10 #31)
#33 := [rewrite]: #32
#23 := (iff #9 #22)
#27 := (iff #22 #22)
#25 := (iff #21 #21)
#26 := [rewrite]: #25
#28 := [monotonicity #26]: #27
#24 := [rewrite]: #23
#29 := [trans #24 #28]: #23
#36 := [monotonicity #29 #33]: #35
#41 := [trans #36 #39]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#56 := [trans #50 #54]: #55
#17 := [asserted]: #15
#57 := [mp #17 #56]: #52
#93 := [mp #57 #92]: #90
#117 := [mp #93 #116]: #114
#136 := (not #114)
#137 := (or #96 #110 #136)
#138 := [def-axiom]: #137
#140 := [unit-resolution #138 #117]: #139
#165 := [unit-resolution #140 #164]: #110
#124 := (or #96 #76)
#125 := [def-axiom]: #124
#166 := [unit-resolution #125 #164]: #76
#160 := (or #107 #94)
#146 := (+ f3 #145)
#147 := (<= #146 0::Int)
#118 := (= f3 #81)
#149 := [hypothesis]: #108
#150 := (or #107 #78)
#151 := [th-lemma arith farkas 1 1]: #150
#152 := [unit-resolution #151 #149]: #78
#120 := (or #109 #118)
#121 := [def-axiom]: #120
#153 := [unit-resolution #121 #152]: #118
#154 := (not #118)
#155 := (or #154 #147)
#156 := [th-lemma arith triangle-eq]: #155
#157 := [unit-resolution #156 #153]: #147
#158 := [hypothesis]: #76
#159 := [th-lemma arith farkas -1 1 1 #149 #158 #157]: false
#161 := [lemma #159]: #160
#167 := [unit-resolution #161 #166]: #107
#134 := (or #111 #108 #109)
#135 := [def-axiom]: #134
#168 := [unit-resolution #135 #167 #165]: #109
#122 := (or #78 #119)
#123 := [def-axiom]: #122
#169 := [unit-resolution #123 #168]: #119
#170 := (not #119)
#171 := (or #170 #162)
#172 := [th-lemma arith triangle-eq]: #171
#173 := [unit-resolution #172 #169]: #162
#174 := [th-lemma arith farkas 1 1 1 #166 #168 #173]: false
#175 := [lemma #174]: #96
#143 := (or #97 #111)
#141 := (or #97 #111 #136)
#142 := [def-axiom]: #141
#144 := [unit-resolution #142 #117]: #143
#176 := [unit-resolution #144 #175]: #111
#132 := (or #110 #78)
#133 := [def-axiom]: #132
#177 := [unit-resolution #133 #176]: #78
#178 := [unit-resolution #121 #177]: #118
#179 := [unit-resolution #156 #178]: #147
#180 := (not #147)
#181 := (or #77 #109 #180)
#182 := [th-lemma arith assign-bounds -1 1]: #181
#183 := [unit-resolution #182 #177 #179]: #77
#163 := (>= #146 0::Int)
#184 := (or #154 #163)
#185 := [th-lemma arith triangle-eq]: #184
#186 := [unit-resolution #185 #178]: #163
#130 := (or #110 #107)
#131 := [def-axiom]: #130
#187 := [unit-resolution #131 #176]: #107
#188 := (not #163)
#189 := (or #76 #108 #188)
#190 := [th-lemma arith assign-bounds -1 1]: #189
#191 := [unit-resolution #190 #187 #186]: #76
#128 := (or #97 #94 #95)
#129 := [def-axiom]: #128
[unit-resolution #129 #191 #183 #175]: false
1f4bd6ea16be20cad268dc7281facb65139024ab 130 0
unsat
#2 := false
#7 := 0::Int
decl f3 :: Int
#8 := f3
#29 := -1::Int
#30 := (* -1::Int f3)
#76 := (>= f3 0::Int)
#82 := (if #76 f3 #30)
#75 := (* -1::Int #82)
#130 := (+ #30 #75)
#131 := (<= #130 0::Int)
#110 := (= #30 #82)
#79 := (not #76)
#92 := (+ f3 #75)
#93 := (<= #92 0::Int)
#95 := (not #93)
#74 := (>= #92 0::Int)
#94 := (not #74)
#96 := (or #94 #95)
#97 := (not #96)
#109 := (= f3 #82)
#133 := (not #109)
#134 := [hypothesis]: #133
#111 := (or #79 #109)
#112 := [def-axiom]: #111
#135 := [unit-resolution #112 #134]: #79
#124 := (or #76 #97)
#103 := (iff #76 #96)
#85 := (= #82 f3)
#88 := (iff #79 #85)
#106 := (iff #88 #103)
#100 := (iff #79 #97)
#104 := (iff #100 #103)
#105 := [rewrite]: #104
#101 := (iff #88 #100)
#98 := (iff #85 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#107 := [trans #102 #105]: #106
#9 := (<= 0::Int f3)
#36 := (if #9 f3 #30)
#41 := (= #36 f3)
#23 := (not #9)
#50 := (iff #23 #41)
#89 := (iff #50 #88)
#86 := (iff #41 #85)
#83 := (= #36 #82)
#77 := (iff #9 #76)
#78 := [rewrite]: #77
#84 := [monotonicity #78]: #83
#87 := [monotonicity #84]: #86
#80 := (iff #23 #79)
#81 := [monotonicity #78]: #80
#90 := [monotonicity #81 #87]: #89
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (if #10 #11 f3)
#13 := (= #12 f3)
#14 := (iff #9 #13)
#15 := (not #14)
#53 := (iff #15 #50)
#44 := (iff #9 #41)
#47 := (not #44)
#51 := (iff #47 #50)
#52 := [rewrite]: #51
#48 := (iff #15 #47)
#45 := (iff #14 #44)
#42 := (iff #13 #41)
#39 := (= #12 #36)
#33 := (if #23 #30 f3)
#37 := (= #33 #36)
#38 := [rewrite]: #37
#34 := (= #12 #33)
#31 := (= #11 #30)
#32 := [rewrite]: #31
#24 := (iff #10 #23)
#26 := (iff #23 #23)
#21 := (iff #9 #9)
#22 := [rewrite]: #21
#27 := [monotonicity #22]: #26
#25 := [rewrite]: #24
#28 := [trans #25 #27]: #24
#35 := [monotonicity #28 #32]: #34
#40 := [trans #35 #38]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #22 #43]: #45
#49 := [monotonicity #46]: #48
#54 := [trans #49 #52]: #53
#17 := [asserted]: #15
#55 := [mp #17 #54]: #50
#91 := [mp #55 #90]: #88
#108 := [mp #91 #107]: #103
#121 := (not #103)
#122 := (or #76 #97 #121)
#123 := [def-axiom]: #122
#125 := [unit-resolution #123 #108]: #124
#136 := [unit-resolution #125 #135]: #97
#117 := (or #96 #93)
#118 := [def-axiom]: #117
#137 := [unit-resolution #118 #136]: #93
#115 := (or #96 #74)
#116 := [def-axiom]: #115
#138 := [unit-resolution #116 #136]: #74
#139 := (or #109 #95 #94)
#140 := [th-lemma arith triangle-eq]: #139
#141 := [unit-resolution #140 #134 #138 #137]: false
#142 := [lemma #141]: #109
#143 := (or #133 #74)
#144 := [th-lemma arith triangle-eq]: #143
#145 := [unit-resolution #144 #142]: #74
#146 := (or #133 #93)
#147 := [th-lemma arith triangle-eq]: #146
#148 := [unit-resolution #147 #142]: #93
#119 := (or #97 #94 #95)
#120 := [def-axiom]: #119
#149 := [unit-resolution #120 #148 #145]: #97
#128 := (or #79 #96)
#126 := (or #79 #96 #121)
#127 := [def-axiom]: #126
#129 := [unit-resolution #127 #108]: #128
#150 := [unit-resolution #129 #149]: #79
#113 := (or #76 #110)
#114 := [def-axiom]: #113
#151 := [unit-resolution #114 #150]: #110
#152 := (not #110)
#153 := (or #152 #131)
#154 := [th-lemma arith triangle-eq]: #153
#155 := [unit-resolution #154 #151]: #131
[th-lemma arith farkas 2 1 1 #150 #145 #155]: false
d4189e2ade5b8393242e31d994e5b087c3842ddf 143 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#7 := f3
#36 := -1::Int
#37 := (* -1::Int f3)
#58 := (>= f3 0::Int)
#65 := (if #58 f3 #37)
#104 := (* -1::Int #65)
#154 := (+ f3 #104)
#155 := (<= #154 0::Int)
#90 := (= f3 #65)
#105 := (+ #37 #104)
#107 := (>= #105 0::Int)
#91 := (= #37 #65)
#59 := (not #58)
#139 := [hypothesis]: #59
#88 := (or #58 #91)
#89 := [def-axiom]: #88
#140 := [unit-resolution #89 #139]: #91
#133 := (not #91)
#141 := (or #133 #107)
#142 := [th-lemma arith triangle-eq]: #141
#143 := [unit-resolution #142 #140]: #107
#73 := (+ f3 #65)
#86 := (<= #73 0::Int)
#148 := (not #86)
#87 := (>= #73 0::Int)
#106 := (<= #105 0::Int)
#74 := (= #73 0::Int)
#94 := (not #74)
#126 := (not #87)
#127 := [hypothesis]: #126
#128 := (or #94 #87)
#129 := [th-lemma arith triangle-eq]: #128
#130 := [unit-resolution #129 #127]: #94
#124 := (or #59 #74)
#111 := (= f3 0::Int)
#9 := (<= f3 0::Int)
#108 := [hypothesis]: #94
#102 := (or #9 #74)
#52 := (not #9)
#79 := (iff #52 #74)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (if #10 #11 f3)
#13 := (= #12 #11)
#14 := (iff #9 #13)
#15 := (not #14)
#82 := (iff #15 #79)
#40 := (if #10 #37 f3)
#43 := (= #40 #37)
#53 := (iff #52 #43)
#80 := (iff #53 #79)
#77 := (iff #43 #74)
#70 := (= #65 #37)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #43 #70)
#68 := (= #40 #65)
#62 := (if #59 #37 f3)
#66 := (= #62 #65)
#67 := [rewrite]: #66
#63 := (= #40 #62)
#60 := (iff #10 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#72 := [monotonicity #69]: #71
#78 := [trans #72 #76]: #77
#81 := [monotonicity #78]: #80
#56 := (iff #15 #53)
#46 := (iff #9 #43)
#49 := (not #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#38 := (= #11 #37)
#39 := [rewrite]: #38
#41 := (= #12 #40)
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42 #39]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#83 := [trans #57 #81]: #82
#35 := [asserted]: #15
#84 := [mp #35 #83]: #79
#95 := (not #79)
#100 := (or #9 #74 #95)
#101 := [def-axiom]: #100
#103 := [unit-resolution #101 #84]: #102
#109 := [unit-resolution #103 #108]: #9
#110 := [hypothesis]: #58
#112 := [th-lemma arith eq-propagate 0 0 #110 #109]: #111
#120 := (= #73 f3)
#118 := (= #65 f3)
#92 := (or #59 #90)
#93 := [def-axiom]: #92
#113 := [unit-resolution #93 #110]: #90
#119 := [symm #113]: #118
#116 := (= #73 #65)
#114 := (= #65 #73)
#115 := [th-lemma arith eq-propagate 1 1 #110 #109]: #114
#117 := [symm #115]: #116
#121 := [trans #117 #119]: #120
#122 := [trans #121 #112]: #74
#123 := [unit-resolution #108 #122]: false
#125 := [lemma #123]: #124
#131 := [unit-resolution #125 #130]: #59
#132 := [unit-resolution #89 #131]: #91
#134 := (or #133 #106)
#135 := [th-lemma arith triangle-eq]: #134
#136 := [unit-resolution #135 #132]: #106
#137 := [th-lemma arith farkas 1 1 #127 #136]: false
#138 := [lemma #137]: #87
#144 := (or #58 #9)
#145 := [th-lemma arith farkas 1 1]: #144
#146 := [unit-resolution #145 #139]: #9
#98 := (or #52 #94)
#96 := (or #52 #94 #95)
#97 := [def-axiom]: #96
#99 := [unit-resolution #97 #84]: #98
#147 := [unit-resolution #99 #146]: #94
#149 := (or #74 #148 #126)
#150 := [th-lemma arith triangle-eq]: #149
#151 := [unit-resolution #150 #147 #138]: #148
#152 := [th-lemma arith farkas 1 1 #151 #143]: false
#153 := [lemma #152]: #58
#157 := [unit-resolution #93 #153]: #90
#158 := (not #90)
#159 := (or #158 #155)
#160 := [th-lemma arith triangle-eq]: #159
#161 := [unit-resolution #160 #157]: #155
#162 := [unit-resolution #125 #153]: #74
#163 := (or #94 #86)
#164 := [th-lemma arith triangle-eq]: #163
#165 := [unit-resolution #164 #162]: #86
#166 := [unit-resolution #99 #162]: #52
[th-lemma arith farkas 2 1 1 #166 #165 #161]: false
unsat
6e505bbe74d8a0cc7b4aa4675a487119e8023d46 116 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#7 := f3
#37 := -1::Int
#38 := (* -1::Int f3)
#64 := (>= f3 0::Int)
#71 := (if #64 f3 #38)
#85 := (* -1::Int #71)
#125 := (+ #38 #85)
#141 := (<= #125 0::Int)
#113 := (= #38 #71)
#65 := (not #64)
#123 := (+ f3 #85)
#124 := (<= #123 0::Int)
#112 := (= f3 #71)
#126 := [hypothesis]: #64
#108 := (or #65 #112)
#109 := [def-axiom]: #108
#127 := [unit-resolution #109 #126]: #112
#128 := (not #112)
#129 := (or #128 #124)
#130 := [th-lemma arith triangle-eq]: #129
#131 := [unit-resolution #130 #127]: #124
#80 := (>= #71 0::Int)
#79 := (not #80)
#91 := (if #80 #71 #85)
#110 := (= #71 #91)
#134 := (not #110)
#96 := (= #91 #71)
#99 := (not #96)
#135 := (iff #99 #134)
#132 := (iff #96 #110)
#133 := [commutativity]: #132
#136 := [monotonicity #133]: #135
#10 := (- f3)
#9 := (< f3 0::Int)
#11 := (if #9 #10 f3)
#13 := (- #11)
#12 := (< #11 0::Int)
#14 := (if #12 #13 #11)
#15 := (= #14 #11)
#16 := (not #15)
#102 := (iff #16 #99)
#41 := (if #9 #38 f3)
#50 := (* -1::Int #41)
#44 := (< #41 0::Int)
#55 := (if #44 #50 #41)
#58 := (= #55 #41)
#61 := (not #58)
#100 := (iff #61 #99)
#97 := (iff #58 #96)
#74 := (= #41 #71)
#68 := (if #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #9 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#94 := (= #55 #91)
#88 := (if #79 #85 #71)
#92 := (= #88 #91)
#93 := [rewrite]: #92
#89 := (= #55 #88)
#86 := (= #50 #85)
#87 := [monotonicity #75]: #86
#83 := (iff #44 #79)
#76 := (< #71 0::Int)
#81 := (iff #76 #79)
#82 := [rewrite]: #81
#77 := (iff #44 #76)
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#90 := [monotonicity #84 #87 #75]: #89
#95 := [trans #90 #93]: #94
#98 := [monotonicity #95 #75]: #97
#101 := [monotonicity #98]: #100
#62 := (iff #16 #61)
#59 := (iff #15 #58)
#42 := (= #11 #41)
#39 := (= #10 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#56 := (= #14 #55)
#53 := (= #13 #50)
#47 := (- #41)
#51 := (= #47 #50)
#52 := [rewrite]: #51
#48 := (= #13 #47)
#49 := [monotonicity #43]: #48
#54 := [trans #49 #52]: #53
#45 := (iff #12 #44)
#46 := [monotonicity #43]: #45
#57 := [monotonicity #46 #54 #43]: #56
#60 := [monotonicity #57 #43]: #59
#63 := [monotonicity #60]: #62
#103 := [trans #63 #101]: #102
#36 := [asserted]: #16
#104 := [mp #36 #103]: #99
#137 := [mp #104 #136]: #134
#114 := (or #79 #110)
#115 := [def-axiom]: #114
#138 := [unit-resolution #115 #137]: #79
#139 := [th-lemma arith farkas -1 1 1 #126 #138 #131]: false
#140 := [lemma #139]: #65
#106 := (or #64 #113)
#107 := [def-axiom]: #106
#143 := [unit-resolution #107 #140]: #113
#144 := (not #113)
#145 := (or #144 #141)
#146 := [th-lemma arith triangle-eq]: #145
#147 := [unit-resolution #146 #143]: #141
[th-lemma arith farkas 1 1 1 #140 #138 #147]: false
unsat
b84cd4b4d4f113193dc5e0fed03847844f8dc058 57 0
#2 := false
#14 := 0::Int
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Int)
#42 := (if #39 f3 f4)
#50 := (* -1::Int #42)
#59 := (+ f4 #50)
#73 := (>= #59 0::Int)
#63 := (= f4 #42)
#64 := (not #39)
#62 := (= f3 #42)
#67 := (not #62)
#51 := (+ f3 #50)
#49 := (>= #51 0::Int)
#55 := (not #49)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#11 := (<= #10 f3)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #49)
#45 := (<= #42 f3)
#48 := (iff #45 #49)
#52 := [rewrite]: #48
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#66 := [hypothesis]: #62
#68 := (or #67 #49)
#69 := [th-lemma arith triangle-eq]: #68
#70 := [unit-resolution #69 #66 #58]: false
#71 := [lemma #70]: #67
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#74 := [unit-resolution #60 #71]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#75 := [unit-resolution #35 #74]: #63
#76 := (not #63)
#77 := (or #76 #73)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #75]: #73
[th-lemma arith farkas 1 1 1 #58 #74 #79]: false
unsat
57cb3c449627b0e103d175fe91d160e37eb458b9 57 0
#2 := false
#14 := 0::Int
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Int)
#42 := (if #39 f3 f4)
#49 := (* -1::Int #42)
#50 := (+ f4 #49)
#48 := (>= #50 0::Int)
#55 := (not #48)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#11 := (<= #10 f4)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #48)
#45 := (<= #42 f4)
#51 := (iff #45 #48)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#63 := (= f4 #42)
#64 := (not #39)
#68 := [hypothesis]: #39
#59 := (+ f3 #49)
#67 := (>= #59 0::Int)
#62 := (= f3 #42)
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#69 := [unit-resolution #60 #68]: #62
#70 := (not #62)
#71 := (or #70 #67)
#72 := [th-lemma arith triangle-eq]: #71
#73 := [unit-resolution #72 #69]: #67
#74 := [th-lemma arith farkas -1 1 1 #73 #58 #68]: false
#75 := [lemma #74]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#76 := [unit-resolution #35 #75]: #63
#77 := (not #63)
#78 := (or #77 #48)
#79 := [th-lemma arith triangle-eq]: #78
[unit-resolution #79 #76 #58]: false
unsat
ead5d10b3d302f37ae6691af9bffd34bbe254dbf 103 0
#2 := false
#19 := 0::Int
decl f5 :: Int
#10 := f5
decl f4 :: Int
#8 := f4
#46 := -1::Int
#55 := (* -1::Int f5)
#65 := (+ f4 #55)
#66 := (<= #65 0::Int)
#69 := (if #66 f4 f5)
#77 := (* -1::Int #69)
decl f3 :: Int
#7 := f3
#78 := (+ f3 #77)
#76 := (>= #78 0::Int)
#75 := (not #76)
#56 := (+ f3 #55)
#54 := (>= #56 0::Int)
#53 := (not #54)
#49 := (* -1::Int f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Int)
#47 := (not #48)
#59 := (and #47 #53)
#62 := (not #59)
#83 := (or #62 #75)
#86 := (not #83)
#13 := (<= f4 f5)
#14 := (if #13 f4 f5)
#15 := (< f3 #14)
#11 := (< f3 f5)
#9 := (< f3 f4)
#12 := (and #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#89 := (iff #17 #86)
#39 := (not #12)
#40 := (or #39 #15)
#43 := (not #40)
#87 := (iff #43 #86)
#84 := (iff #40 #83)
#81 := (iff #15 #75)
#72 := (< f3 #69)
#79 := (iff #72 #75)
#80 := [rewrite]: #79
#73 := (iff #15 #72)
#70 := (= #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#82 := [trans #74 #80]: #81
#63 := (iff #39 #62)
#60 := (iff #12 #59)
#57 := (iff #11 #53)
#58 := [rewrite]: #57
#51 := (iff #9 #47)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#85 := [monotonicity #64 #82]: #84
#88 := [monotonicity #85]: #87
#44 := (iff #17 #43)
#41 := (iff #16 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#90 := [trans #45 #88]: #89
#38 := [asserted]: #17
#91 := [mp #38 #90]: #86
#95 := [not-or-elim #91]: #76
#92 := [not-or-elim #91]: #59
#94 := [and-elim #92]: #53
#100 := (+ f5 #77)
#117 := (<= #100 0::Int)
#106 := (= f5 #69)
#107 := (not #66)
#105 := (= f4 #69)
#112 := (not #105)
#102 := (+ f4 #77)
#99 := (<= #102 0::Int)
#109 := (not #99)
#93 := [and-elim #92]: #47
#97 := [hypothesis]: #99
#98 := [th-lemma arith farkas -1 -1 1 #97 #93 #95]: false
#110 := [lemma #98]: #109
#111 := [hypothesis]: #105
#113 := (or #112 #99)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111 #110]: false
#116 := [lemma #115]: #112
#108 := (or #107 #105)
#103 := [def-axiom]: #108
#119 := [unit-resolution #103 #116]: #107
#104 := (or #66 #106)
#101 := [def-axiom]: #104
#120 := [unit-resolution #101 #119]: #106
#121 := (not #106)
#122 := (or #121 #117)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #117
[th-lemma arith farkas -1 -1 1 #124 #94 #95]: false
unsat
0b3e4057c520e862b76979ea431eac352d39a39b 94 0
#2 := false
decl f3 :: Int
#7 := f3
decl f4 :: Int
#8 := f4
#16 := 0::Int
#38 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#48 := (>= #40 0::Int)
#50 := (if #48 f4 f3)
#41 := (<= #40 0::Int)
#44 := (if #41 f3 f4)
#53 := (= #44 #50)
#60 := (= f4 #50)
#65 := (not #41)
#63 := (= f3 #44)
#105 := (not #63)
#67 := (= f3 #50)
#74 := (not #67)
#75 := [hypothesis]: #74
#71 := (or #48 #67)
#72 := [def-axiom]: #71
#76 := [unit-resolution #72 #75]: #48
#68 := (not #48)
#69 := (or #68 #60)
#70 := [def-axiom]: #69
#77 := [unit-resolution #70 #76]: #60
#73 := (= f3 f4)
#64 := (= f4 #44)
#87 := (not #64)
#56 := (not #53)
#88 := (iff #56 #87)
#85 := (iff #53 #64)
#83 := (iff #64 #53)
#78 := (= #50 #44)
#81 := (iff #78 #53)
#82 := [commutativity]: #81
#79 := (iff #64 #78)
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#86 := [symm #84]: #85
#89 := [monotonicity #86]: #88
#11 := (<= f4 f3)
#12 := (if #11 f4 f3)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#57 := (iff #14 #56)
#54 := (iff #13 #53)
#51 := (= #12 #50)
#47 := (iff #11 #48)
#49 := [rewrite]: #47
#52 := [monotonicity #49]: #51
#45 := (= #10 #44)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#55 := [monotonicity #46 #52]: #54
#58 := [monotonicity #55]: #57
#35 := [asserted]: #14
#59 := [mp #35 #58]: #56
#90 := [mp #59 #89]: #87
#62 := (or #41 #64)
#37 := [def-axiom]: #62
#91 := [unit-resolution #37 #90]: #41
#94 := (or #73 #65)
#92 := (or #73 #65 #68)
#93 := [th-lemma arith triangle-eq]: #92
#95 := [unit-resolution #93 #76]: #94
#96 := [unit-resolution #95 #91]: #73
#97 := [trans #96 #77]: #67
#98 := [unit-resolution #75 #97]: false
#99 := [lemma #98]: #67
#101 := (= #44 f3)
#100 := [hypothesis]: #63
#102 := [symm #100]: #101
#103 := [trans #102 #99]: #53
#104 := [unit-resolution #59 #103]: false
#106 := [lemma #104]: #105
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#107 := [unit-resolution #61 #106]: #65
#109 := (or #48 #41)
#110 := [th-lemma arith farkas 1 1]: #109
#111 := [unit-resolution #110 #107]: #48
#112 := [unit-resolution #70 #111]: #60
#115 := (= #44 f4)
#108 := [unit-resolution #37 #107]: #64
#116 := [symm #108]: #115
#117 := [trans #116 #112]: #53
[unit-resolution #59 #117]: false
unsat
c34966074811c5f7bd6d1d6b1a5efd6aba6c7ebc 53 0
#2 := false
#7 := 0::Int
decl f3 :: Int
#8 := f3
#10 := (<= f3 0::Int)
#11 := (if #10 f3 0::Int)
#12 := (= #11 0::Int)
#63 := (= f3 0::Int)
#58 := (not #12)
#44 := (>= f3 0::Int)
#45 := (not #44)
#48 := (or #45 #12)
#51 := (not #48)
#9 := (<= 0::Int f3)
#13 := (implies #9 #12)
#14 := (not #13)
#54 := (iff #14 #51)
#35 := (not #9)
#36 := (or #35 #12)
#39 := (not #36)
#52 := (iff #39 #51)
#49 := (iff #36 #48)
#46 := (iff #35 #45)
#42 := (iff #9 #44)
#43 := [rewrite]: #42
#47 := [monotonicity #43]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#55 := [trans #41 #53]: #54
#34 := [asserted]: #14
#56 := [mp #34 #55]: #51
#59 := [not-or-elim #56]: #58
#65 := (or #10 #12)
#66 := [def-axiom]: #65
#64 := [unit-resolution #66 #59]: #10
#57 := [not-or-elim #56]: #44
#68 := (not #10)
#61 := (or #63 #68 #45)
#62 := [th-lemma arith triangle-eq]: #61
#71 := [unit-resolution #62 #57 #64]: #63
#73 := (= #11 f3)
#67 := (= f3 #11)
#69 := (or #68 #67)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #64]: #67
#74 := [symm #72]: #73
#75 := [trans #74 #71]: #12
[unit-resolution #59 #75]: false
unsat
27e0298cf8da33cbbea5b9b24d6cd2a5d79bcdcc 124 0
#2 := false
#12 := 0::Int
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#38 := -1::Int
#40 := (* -1::Int f4)
#53 := (+ f3 #40)
#54 := (<= #53 0::Int)
#57 := (if #54 f3 f4)
#105 := (* -1::Int #57)
#106 := (+ f3 #105)
#108 := (>= #106 0::Int)
#93 := (= f3 #57)
#107 := (+ f4 #105)
#125 := (>= #107 0::Int)
#94 := (= f4 #57)
#95 := (not #54)
#136 := [hypothesis]: #95
#92 := (or #54 #94)
#89 := [def-axiom]: #92
#137 := [unit-resolution #89 #136]: #94
#128 := (not #94)
#129 := (or #128 #125)
#130 := [th-lemma arith triangle-eq]: #129
#138 := [unit-resolution #130 #137]: #125
#39 := (* -1::Int f3)
#41 := (+ #39 #40)
#11 := (+ f3 f4)
#60 := (>= #11 0::Int)
#67 := (if #60 #11 #41)
#75 := (* -1::Int #67)
#104 := (+ #41 #75)
#124 := (<= #104 0::Int)
#97 := (= #41 #67)
#61 := (not #60)
#109 := [hypothesis]: #60
#76 := (+ #57 #75)
#77 := (<= #76 0::Int)
#82 := (not #77)
#14 := (- #11)
#13 := (< #11 0::Int)
#15 := (if #13 #14 #11)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#16 := (<= #10 #15)
#17 := (not #16)
#85 := (iff #17 #82)
#44 := (if #13 #41 #11)
#47 := (<= #10 #44)
#50 := (not #47)
#83 := (iff #50 #82)
#80 := (iff #47 #77)
#72 := (<= #57 #67)
#78 := (iff #72 #77)
#79 := [rewrite]: #78
#73 := (iff #47 #72)
#70 := (= #44 #67)
#64 := (if #61 #41 #11)
#68 := (= #64 #67)
#69 := [rewrite]: #68
#65 := (= #44 #64)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#71 := [trans #66 #69]: #70
#58 := (= #10 #57)
#55 := (iff #9 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#74 := [monotonicity #59 #71]: #73
#81 := [trans #74 #79]: #80
#84 := [monotonicity #81]: #83
#51 := (iff #17 #50)
#48 := (iff #16 #47)
#45 := (= #15 #44)
#42 := (= #14 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#86 := [trans #52 #84]: #85
#37 := [asserted]: #17
#87 := [mp #37 #86]: #82
#122 := (or #95 #61)
#110 := [hypothesis]: #54
#96 := (or #95 #93)
#91 := [def-axiom]: #96
#111 := [unit-resolution #91 #110]: #93
#112 := (not #93)
#113 := (or #112 #108)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111]: #108
#102 := (+ #11 #75)
#103 := (<= #102 0::Int)
#90 := (= #11 #67)
#98 := (or #61 #90)
#99 := [def-axiom]: #98
#116 := [unit-resolution #99 #109]: #90
#117 := (not #90)
#118 := (or #117 #103)
#119 := [th-lemma arith triangle-eq]: #118
#120 := [unit-resolution #119 #116]: #103
#121 := [th-lemma arith farkas 2 2 2 1 1 #120 #115 #87 #110 #109]: false
#123 := [lemma #121]: #122
#126 := [unit-resolution #123 #109]: #95
#127 := [unit-resolution #89 #126]: #94
#131 := [unit-resolution #130 #127]: #125
#132 := [th-lemma arith farkas 2 2 1 2 1 #120 #131 #126 #87 #109]: false
#133 := [lemma #132]: #61
#100 := (or #60 #97)
#101 := [def-axiom]: #100
#139 := [unit-resolution #101 #133]: #97
#140 := (not #97)
#141 := (or #140 #124)
#142 := [th-lemma arith triangle-eq]: #141
#143 := [unit-resolution #142 #139]: #124
#144 := [th-lemma arith farkas 3/2 1/2 1 1 1 #133 #136 #87 #143 #138]: false
#145 := [lemma #144]: #54
#146 := [unit-resolution #91 #145]: #93
#147 := [unit-resolution #114 #146]: #108
[th-lemma arith farkas 1/2 3/2 1 1 1 #145 #133 #87 #143 #147]: false
unsat
6172e7a5fce8d6d8bfd1cb6db3a242b38caaaf52 57 0
#2 := false
#14 := 0::Int
decl f3 :: Int
#7 := f3
decl f4 :: Int
#8 := f4
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Int)
#42 := (if #39 f4 f3)
#48 := (* -1::Int #42)
#49 := (+ f3 #48)
#50 := (<= #49 0::Int)
#55 := (not #50)
#9 := (<= f3 f4)
#10 := (if #9 f4 f3)
#11 := (<= f3 #10)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #50)
#45 := (<= f3 #42)
#51 := (iff #45 #50)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#63 := (= f3 #42)
#64 := (not #39)
#68 := [hypothesis]: #39
#59 := (+ f4 #48)
#66 := (<= #59 0::Int)
#62 := (= f4 #42)
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#69 := [unit-resolution #60 #68]: #62
#70 := (not #62)
#71 := (or #70 #66)
#72 := [th-lemma arith triangle-eq]: #71
#73 := [unit-resolution #72 #69]: #66
#74 := [th-lemma arith farkas 1 -1 1 #73 #58 #68]: false
#75 := [lemma #74]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#76 := [unit-resolution #35 #75]: #63
#77 := (not #63)
#78 := (or #77 #50)
#79 := [th-lemma arith triangle-eq]: #78
[unit-resolution #79 #76 #58]: false
unsat
eb721fdcb56947acb47cbd291d0d784fc39e4176 57 0
#2 := false
#14 := 0::Int
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#36 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#38 := (>= #40 0::Int)
#42 := (if #38 f3 f4)
#48 := (* -1::Int #42)
#59 := (+ f4 #48)
#72 := (<= #59 0::Int)
#63 := (= f4 #42)
#64 := (not #38)
#62 := (= f3 #42)
#67 := (not #62)
#49 := (+ f3 #48)
#50 := (<= #49 0::Int)
#55 := (not #50)
#9 := (<= f4 f3)
#10 := (if #9 f3 f4)
#11 := (<= f3 #10)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #50)
#45 := (<= f3 #42)
#51 := (iff #45 #50)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#37 := (iff #9 #38)
#41 := [rewrite]: #37
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#66 := [hypothesis]: #62
#68 := (or #67 #50)
#69 := [th-lemma arith triangle-eq]: #68
#70 := [unit-resolution #69 #66 #58]: false
#71 := [lemma #70]: #67
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#74 := [unit-resolution #60 #71]: #64
#61 := (or #38 #63)
#35 := [def-axiom]: #61
#75 := [unit-resolution #35 #74]: #63
#76 := (not #63)
#77 := (or #76 #72)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #75]: #72
[th-lemma arith farkas 1 1 1 #58 #74 #79]: false
unsat
34a316044a78671ecbd5861430fe1013fee421ec 103 0
#2 := false
#19 := 0::Int
decl f3 :: Int
#7 := f3
decl f5 :: Int
#10 := f5
#46 := -1::Int
#53 := (* -1::Int f5)
#65 := (+ f3 #53)
#66 := (<= #65 0::Int)
#69 := (if #66 f5 f3)
#75 := (* -1::Int #69)
decl f4 :: Int
#8 := f4
#76 := (+ f4 #75)
#77 := (<= #76 0::Int)
#78 := (not #77)
#54 := (+ f4 #53)
#55 := (<= #54 0::Int)
#56 := (not #55)
#49 := (* -1::Int f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Int)
#47 := (not #48)
#59 := (and #47 #56)
#62 := (not #59)
#83 := (or #62 #78)
#86 := (not #83)
#13 := (<= f3 f5)
#14 := (if #13 f5 f3)
#15 := (< #14 f4)
#11 := (< f5 f4)
#9 := (< f3 f4)
#12 := (and #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#89 := (iff #17 #86)
#39 := (not #12)
#40 := (or #39 #15)
#43 := (not #40)
#87 := (iff #43 #86)
#84 := (iff #40 #83)
#81 := (iff #15 #78)
#72 := (< #69 f4)
#79 := (iff #72 #78)
#80 := [rewrite]: #79
#73 := (iff #15 #72)
#70 := (= #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#82 := [trans #74 #80]: #81
#63 := (iff #39 #62)
#60 := (iff #12 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#51 := (iff #9 #47)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#85 := [monotonicity #64 #82]: #84
#88 := [monotonicity #85]: #87
#44 := (iff #17 #43)
#41 := (iff #16 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#90 := [trans #45 #88]: #89
#38 := [asserted]: #17
#91 := [mp #38 #90]: #86
#95 := [not-or-elim #91]: #77
#92 := [not-or-elim #91]: #59
#93 := [and-elim #92]: #47
#99 := (+ f3 #75)
#118 := (>= #99 0::Int)
#106 := (= f3 #69)
#107 := (not #66)
#105 := (= f5 #69)
#112 := (not #105)
#102 := (+ f5 #75)
#100 := (>= #102 0::Int)
#109 := (not #100)
#94 := [and-elim #92]: #56
#97 := [hypothesis]: #100
#98 := [th-lemma arith farkas -1 -1 1 #97 #94 #95]: false
#110 := [lemma #98]: #109
#111 := [hypothesis]: #105
#113 := (or #112 #100)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111 #110]: false
#116 := [lemma #115]: #112
#108 := (or #107 #105)
#103 := [def-axiom]: #108
#119 := [unit-resolution #103 #116]: #107
#104 := (or #66 #106)
#101 := [def-axiom]: #104
#120 := [unit-resolution #101 #119]: #106
#121 := (not #106)
#122 := (or #121 #118)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #118
[th-lemma arith farkas -1 1 1 #124 #93 #95]: false
unsat
3fa37a402d59529838df2e5f73f6f77682f7982d 96 0
#2 := false
decl f4 :: Int
#8 := f4
decl f3 :: Int
#7 := f3
#16 := 0::Int
#38 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#48 := (>= #40 0::Int)
#50 := (if #48 f3 f4)
#41 := (<= #40 0::Int)
#44 := (if #41 f4 f3)
#53 := (= #44 #50)
#60 := (= f3 #50)
#65 := (not #41)
#63 := (= f4 #44)
#107 := (not #63)
#67 := (= f4 #50)
#74 := (not #67)
#75 := [hypothesis]: #74
#71 := (or #48 #67)
#72 := [def-axiom]: #71
#76 := [unit-resolution #72 #75]: #48
#68 := (not #48)
#69 := (or #68 #60)
#70 := [def-axiom]: #69
#77 := [unit-resolution #70 #76]: #60
#97 := (= f4 f3)
#73 := (= f3 f4)
#64 := (= f3 #44)
#87 := (not #64)
#56 := (not #53)
#88 := (iff #56 #87)
#85 := (iff #53 #64)
#83 := (iff #64 #53)
#78 := (= #50 #44)
#81 := (iff #78 #53)
#82 := [commutativity]: #81
#79 := (iff #64 #78)
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#86 := [symm #84]: #85
#89 := [monotonicity #86]: #88
#11 := (<= f4 f3)
#12 := (if #11 f3 f4)
#9 := (<= f3 f4)
#10 := (if #9 f4 f3)
#13 := (= #10 #12)
#14 := (not #13)
#57 := (iff #14 #56)
#54 := (iff #13 #53)
#51 := (= #12 #50)
#47 := (iff #11 #48)
#49 := [rewrite]: #47
#52 := [monotonicity #49]: #51
#45 := (= #10 #44)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#55 := [monotonicity #46 #52]: #54
#58 := [monotonicity #55]: #57
#35 := [asserted]: #14
#59 := [mp #35 #58]: #56
#90 := [mp #59 #89]: #87
#62 := (or #41 #64)
#37 := [def-axiom]: #62
#91 := [unit-resolution #37 #90]: #41
#94 := (or #73 #65)
#92 := (or #73 #65 #68)
#93 := [th-lemma arith triangle-eq]: #92
#95 := [unit-resolution #93 #76]: #94
#96 := [unit-resolution #95 #91]: #73
#98 := [symm #96]: #97
#99 := [trans #98 #77]: #67
#100 := [unit-resolution #75 #99]: false
#101 := [lemma #100]: #67
#103 := (= #44 f4)
#102 := [hypothesis]: #63
#104 := [symm #102]: #103
#105 := [trans #104 #101]: #53
#106 := [unit-resolution #59 #105]: false
#108 := [lemma #106]: #107
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#109 := [unit-resolution #61 #108]: #65
#111 := (or #48 #41)
#112 := [th-lemma arith farkas 1 1]: #111
#113 := [unit-resolution #112 #109]: #48
#114 := [unit-resolution #70 #113]: #60
#117 := (= #44 f3)
#110 := [unit-resolution #37 #109]: #64
#118 := [symm #110]: #117
#119 := [trans #118 #114]: #53
[unit-resolution #59 #119]: false
unsat
f995c21ac02db2a6cac2e38b26761e729e79b379 60 0
#2 := false
decl f3 :: Int
#8 := f3
#7 := 0::Int
#10 := (<= f3 0::Int)
#11 := (if #10 0::Int f3)
#68 := (= f3 #11)
#80 := (= 0::Int #11)
#67 := (= #11 0::Int)
#71 := (not #68)
#12 := (= #11 f3)
#58 := (not #12)
#72 := (iff #58 #71)
#61 := (iff #12 #68)
#62 := [commutativity]: #61
#73 := [monotonicity #62]: #72
#44 := (>= f3 0::Int)
#45 := (not #44)
#48 := (or #45 #12)
#51 := (not #48)
#9 := (<= 0::Int f3)
#13 := (implies #9 #12)
#14 := (not #13)
#54 := (iff #14 #51)
#35 := (not #9)
#36 := (or #35 #12)
#39 := (not #36)
#52 := (iff #39 #51)
#49 := (iff #36 #48)
#46 := (iff #35 #45)
#42 := (iff #9 #44)
#43 := [rewrite]: #42
#47 := [monotonicity #43]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#55 := [trans #41 #53]: #54
#34 := [asserted]: #14
#56 := [mp #34 #55]: #51
#59 := [not-or-elim #56]: #58
#74 := [mp #59 #73]: #71
#66 := (or #10 #68)
#63 := [def-axiom]: #66
#75 := [unit-resolution #63 #74]: #10
#69 := (not #10)
#70 := (or #69 #67)
#65 := [def-axiom]: #70
#76 := [unit-resolution #65 #75]: #67
#81 := [symm #76]: #80
#64 := (= f3 0::Int)
#57 := [not-or-elim #56]: #44
#77 := (or #64 #69 #45)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #57 #75]: #64
#82 := [trans #79 #81]: #68
[unit-resolution #74 #82]: false
unsat
05cfbef4515b026ca06ebf58a35758847fe6425e 214 0
#2 := false
#8 := 0::Int
decl f4 :: Int
#13 := f4
#42 := -1::Int
#57 := (* -1::Int f4)
#93 := (>= f4 0::Int)
#100 := (if #93 f4 #57)
#105 := (* -1::Int #100)
#160 := (+ #57 #105)
#182 := (<= #160 0::Int)
#136 := (= #57 #100)
#94 := (not #93)
decl f3 :: Int
#7 := f3
#111 := (+ f3 #57)
#112 := (<= #111 0::Int)
#115 := (if #112 f4 f3)
#154 := (* -1::Int #115)
#155 := (+ f4 #154)
#156 := (<= #155 0::Int)
#157 := (+ f3 #154)
#192 := (<= #157 0::Int)
#148 := (= f3 #115)
#149 := (not #112)
#147 := (= f4 #115)
#194 := [hypothesis]: #112
#150 := (or #149 #147)
#151 := [def-axiom]: #150
#195 := [unit-resolution #151 #194]: #147
#196 := (not #147)
#197 := (or #196 #156)
#198 := [th-lemma arith triangle-eq]: #197
#199 := [unit-resolution #198 #195]: #156
#178 := (not #156)
#190 := (or #94 #178)
#158 := (+ f4 #105)
#159 := (<= #158 0::Int)
#135 := (= f4 #100)
#164 := [hypothesis]: #93
#143 := (or #94 #135)
#144 := [def-axiom]: #143
#165 := [unit-resolution #144 #164]: #135
#166 := (not #135)
#167 := (or #166 #159)
#168 := [th-lemma arith triangle-eq]: #167
#169 := [unit-resolution #168 #165]: #159
#78 := (>= f3 0::Int)
#79 := (not #78)
#176 := [hypothesis]: #156
#179 := (or #79 #94 #178)
#124 := (+ #100 #115)
#43 := (* -1::Int f3)
#85 := (if #78 f3 #43)
#125 := (+ #85 #124)
#122 := (>= #125 0::Int)
#128 := (not #122)
#18 := (<= f3 f4)
#19 := (if #18 f4 f3)
#15 := (- f4)
#14 := (< f4 0::Int)
#16 := (if #14 #15 f4)
#10 := (- f3)
#9 := (< f3 0::Int)
#11 := (if #9 #10 f3)
#12 := (- #11)
#17 := (- #12 #16)
#20 := (<= #17 #19)
#21 := (not #20)
#131 := (iff #21 #128)
#60 := (if #14 #57 f4)
#66 := (* -1::Int #60)
#46 := (if #9 #43 f3)
#52 := (* -1::Int #46)
#67 := (+ #52 #66)
#72 := (<= #67 #19)
#75 := (not #72)
#129 := (iff #75 #128)
#126 := (iff #72 #122)
#90 := (* -1::Int #85)
#108 := (+ #90 #105)
#118 := (<= #108 #115)
#121 := (iff #118 #122)
#123 := [rewrite]: #121
#119 := (iff #72 #118)
#116 := (= #19 #115)
#113 := (iff #18 #112)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#109 := (= #67 #108)
#106 := (= #66 #105)
#103 := (= #60 #100)
#97 := (if #94 #57 f4)
#101 := (= #97 #100)
#102 := [rewrite]: #101
#98 := (= #60 #97)
#95 := (iff #14 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#104 := [trans #99 #102]: #103
#107 := [monotonicity #104]: #106
#91 := (= #52 #90)
#88 := (= #46 #85)
#82 := (if #79 #43 f3)
#86 := (= #82 #85)
#87 := [rewrite]: #86
#83 := (= #46 #82)
#80 := (iff #9 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#110 := [monotonicity #92 #107]: #109
#120 := [monotonicity #110 #117]: #119
#127 := [trans #120 #123]: #126
#130 := [monotonicity #127]: #129
#76 := (iff #21 #75)
#73 := (iff #20 #72)
#70 := (= #17 #67)
#63 := (- #52 #60)
#68 := (= #63 #67)
#69 := [rewrite]: #68
#64 := (= #17 #63)
#61 := (= #16 #60)
#58 := (= #15 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#55 := (= #12 #52)
#49 := (- #46)
#53 := (= #49 #52)
#54 := [rewrite]: #53
#50 := (= #12 #49)
#47 := (= #11 #46)
#44 := (= #10 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#65 := [monotonicity #56 #62]: #64
#71 := [trans #65 #69]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#132 := [trans #77 #130]: #131
#41 := [asserted]: #21
#133 := [mp #41 #132]: #128
#161 := (+ f3 #90)
#162 := (<= #161 0::Int)
#139 := (= f3 #85)
#170 := [hypothesis]: #78
#141 := (or #79 #139)
#142 := [def-axiom]: #141
#171 := [unit-resolution #142 #170]: #139
#172 := (not #139)
#173 := (or #172 #162)
#174 := [th-lemma arith triangle-eq]: #173
#175 := [unit-resolution #174 #171]: #162
#177 := [th-lemma arith farkas -2 1 -1 1 1 1 #164 #176 #170 #175 #133 #169]: false
#180 := [lemma #177]: #179
#183 := [unit-resolution #180 #164 #176]: #79
#163 := (+ #43 #90)
#181 := (<= #163 0::Int)
#140 := (= #43 #85)
#137 := (or #78 #140)
#138 := [def-axiom]: #137
#184 := [unit-resolution #138 #183]: #140
#185 := (not #140)
#186 := (or #185 #181)
#187 := [th-lemma arith triangle-eq]: #186
#188 := [unit-resolution #187 #184]: #181
#189 := [th-lemma arith farkas 2 1 1 1 1 1 #164 #176 #133 #188 #183 #169]: false
#191 := [lemma #189]: #190
#200 := [unit-resolution #191 #199]: #94
#145 := (or #93 #136)
#146 := [def-axiom]: #145
#201 := [unit-resolution #146 #200]: #136
#202 := (not #136)
#203 := (or #202 #182)
#204 := [th-lemma arith triangle-eq]: #203
#205 := [unit-resolution #204 #201]: #182
#206 := (or #79 #149 #93)
#207 := [th-lemma arith assign-bounds 1 1]: #206
#208 := [unit-resolution #207 #200 #194]: #79
#209 := [unit-resolution #138 #208]: #140
#210 := [unit-resolution #187 #209]: #181
#211 := [th-lemma arith farkas 1 1 1 1 1 #199 #133 #210 #208 #205]: false
#212 := [lemma #211]: #149
#152 := (or #112 #148)
#153 := [def-axiom]: #152
#223 := [unit-resolution #153 #212]: #148
#224 := (not #148)
#225 := (or #224 #192)
#226 := [th-lemma arith triangle-eq]: #225
#227 := [unit-resolution #226 #223]: #192
#230 := (not #192)
#231 := (or #156 #112 #230)
#232 := [th-lemma arith assign-bounds 1 1]: #231
#233 := [unit-resolution #232 #212 #227]: #156
#234 := [unit-resolution #191 #233]: #94
#235 := [unit-resolution #146 #234]: #136
#236 := [unit-resolution #204 #235]: #182
#215 := [hypothesis]: #79
#216 := (or #94 #78 #112)
#217 := [th-lemma arith assign-bounds 1 1]: #216
#218 := [unit-resolution #217 #215 #212]: #94
#219 := [unit-resolution #146 #218]: #136
#220 := [unit-resolution #204 #219]: #182
#221 := [unit-resolution #138 #215]: #140
#222 := [unit-resolution #187 #221]: #181
#228 := [th-lemma arith farkas 1 1 1 1 1 1 #215 #212 #227 #133 #222 #220]: false
#229 := [lemma #228]: #78
#237 := [unit-resolution #142 #229]: #139
#238 := [unit-resolution #174 #237]: #162
[th-lemma arith farkas 1 1 1 1 1 1 #212 #227 #133 #229 #238 #236]: false
unsat
a4bea54c174a812dc90d41994d00a1b62e09324a 53 0
#2 := false
#10 := 1::Int
decl f3 :: Int
#8 := f3
#76 := (>= f3 1::Int)
#78 := (not #76)
#13 := (= f3 1::Int)
#65 := (not #13)
#11 := (<= f3 1::Int)
#7 := 0::Int
#43 := (<= f3 0::Int)
#44 := (not #43)
#47 := (and #44 #11)
#50 := (not #47)
#53 := (or #50 #13)
#56 := (not #53)
#9 := (< 0::Int f3)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#59 := (iff #15 #56)
#36 := (not #12)
#37 := (or #36 #13)
#40 := (not #37)
#57 := (iff #40 #56)
#54 := (iff #37 #53)
#51 := (iff #36 #50)
#48 := (iff #12 #47)
#45 := (iff #9 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#55 := [monotonicity #52]: #54
#58 := [monotonicity #55]: #57
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#60 := [trans #42 #58]: #59
#35 := [asserted]: #15
#61 := [mp #35 #60]: #56
#66 := [not-or-elim #61]: #65
#75 := (or #13 #78)
#62 := [not-or-elim #61]: #47
#64 := [and-elim #62]: #11
#77 := (not #11)
#79 := (or #13 #77 #78)
#74 := [th-lemma arith triangle-eq]: #79
#72 := [unit-resolution #74 #64]: #75
#73 := [unit-resolution #72 #66]: #78
#63 := [and-elim #62]: #44
[th-lemma arith farkas 1 1 #63 #73]: false
unsat
6b1fd4164c9a3bc3b6f6a1779970e5f9a212ac94 18 0
#2 := false
decl f3 :: Int
#7 := f3
#8 := (<= f3 f3)
#9 := (not #8)
#40 := (iff #9 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #9 #35)
#33 := (iff #8 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #9
[mp #30 #41]: false
unsat
d32e1c3a9584812c7d4ef0093047f73880b01a2e 51 0
#2 := false
decl f4 :: Int
#8 := f4
#10 := 3::Int
#12 := (* 3::Int f4)
decl f3 :: Int
#7 := f3
#11 := (* 3::Int f3)
#13 := (<= #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#69 := (iff #15 false)
#37 := (not #9)
#38 := (or #37 #13)
#41 := (not #38)
#67 := (iff #41 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #41 #62)
#60 := (iff #38 true)
#17 := 0::Int
#44 := -1::Int
#45 := (* -1::Int f4)
#46 := (+ f3 #45)
#47 := (<= #46 0::Int)
#50 := (not #47)
#55 := (or #50 #47)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #38 #55)
#53 := (iff #13 #47)
#54 := [rewrite]: #53
#51 := (iff #37 #50)
#48 := (iff #9 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#57 := [monotonicity #52 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#70 := [trans #43 #68]: #69
#36 := [asserted]: #15
[mp #36 #70]: false
unsat
3ad7098d25ffe898fa92bcf6a3b1bf60731ed829 56 0
#2 := false
decl f4 :: Int
#8 := f4
#10 := 3::Int
#12 := (* 3::Int f4)
decl f3 :: Int
#7 := f3
#11 := (* 3::Int f3)
#13 := (< #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#74 := (iff #15 false)
#37 := (not #9)
#38 := (or #37 #13)
#41 := (not #38)
#72 := (iff #41 false)
#1 := true
#67 := (not true)
#70 := (iff #67 false)
#71 := [rewrite]: #70
#68 := (iff #41 #67)
#65 := (iff #38 true)
#17 := 0::Int
#44 := -1::Int
#47 := (* -1::Int f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::Int)
#45 := (not #46)
#59 := (or #46 #45)
#63 := (iff #59 true)
#64 := [rewrite]: #63
#61 := (iff #38 #59)
#60 := (iff #13 #45)
#58 := [rewrite]: #60
#56 := (iff #37 #46)
#51 := (not #45)
#54 := (iff #51 #46)
#55 := [rewrite]: #54
#52 := (iff #37 #51)
#49 := (iff #9 #45)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#62 := [monotonicity #57 #58]: #61
#66 := [trans #62 #64]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#75 := [trans #43 #73]: #74
#36 := [asserted]: #15
[mp #36 #75]: false
unsat
021a2ccfe2f169916c13de90c0a65b798955c7c4 52 0
#2 := false
#14 := 0::Int
decl f4 :: Int
#8 := f4
#41 := -1::Int
#44 := (* -1::Int f4)
decl f3 :: Int
#7 := f3
#45 := (+ f3 #44)
#55 := (<= #45 0::Int)
#68 := (not #55)
#43 := (>= #45 0::Int)
#58 := (or #43 #55)
#61 := (not #58)
#10 := (<= f3 f4)
#9 := (< f3 f4)
#11 := (implies #9 #10)
#12 := (not #11)
#64 := (iff #12 #61)
#34 := (not #9)
#35 := (or #34 #10)
#38 := (not #35)
#62 := (iff #38 #61)
#59 := (iff #35 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#53 := (iff #34 #43)
#42 := (not #43)
#48 := (not #42)
#51 := (iff #48 #43)
#52 := [rewrite]: #51
#49 := (iff #34 #48)
#46 := (iff #9 #42)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#60 := [monotonicity #54 #57]: #59
#63 := [monotonicity #60]: #62
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#65 := [trans #40 #63]: #64
#33 := [asserted]: #12
#66 := [mp #33 #65]: #61
#69 := [not-or-elim #66]: #68
#67 := [not-or-elim #66]: #42
#77 := (or #55 #43)
#78 := [th-lemma arith farkas 1 1]: #77
#79 := [unit-resolution #78 #67]: #55
[unit-resolution #79 #69]: false
unsat
cd494a327086bb14c2815a5bf50e8d8ef62f947f 73 0
#2 := false
#54 := -1::Int
decl f4 :: Int
#8 := f4
#57 := (* -1::Int f4)
decl f3 :: Int
#7 := f3
#58 := (+ f3 #57)
#68 := (<= #58 -1::Int)
#16 := 0::Int
#56 := (>= #58 0::Int)
#55 := (not #56)
#82 := (not #68)
#88 := [hypothesis]: #82
#86 := (or #55 #68)
#71 := (iff #56 #68)
#10 := 1::Int
#11 := (+ f3 1::Int)
#12 := (<= #11 f4)
#9 := (< f3 f4)
#13 := (iff #9 #12)
#14 := (not #13)
#74 := (iff #14 #71)
#36 := (+ 1::Int f3)
#39 := (<= #36 f4)
#48 := (not #9)
#49 := (iff #48 #39)
#72 := (iff #49 #71)
#69 := (iff #39 #68)
#70 := [rewrite]: #69
#66 := (iff #48 #56)
#61 := (not #55)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #48 #61)
#59 := (iff #9 #55)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#73 := [monotonicity #67 #70]: #72
#52 := (iff #14 #49)
#42 := (iff #9 #39)
#45 := (not #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#75 := [trans #53 #73]: #74
#35 := [asserted]: #14
#76 := [mp #35 #75]: #71
#83 := (not #71)
#78 := (or #55 #68 #83)
#79 := [def-axiom]: #78
#87 := [unit-resolution #79 #76]: #86
#89 := [unit-resolution #87 #88]: #55
#90 := [th-lemma arith farkas 1 1 #88 #89]: false
#91 := [lemma #90]: #68
#92 := (or #82 #55)
#93 := [th-lemma arith farkas 1 1]: #92
#94 := [unit-resolution #93 #91]: #55
#80 := (or #56 #82)
#84 := (or #56 #82 #83)
#85 := [def-axiom]: #84
#81 := [unit-resolution #85 #76]: #80
[unit-resolution #81 #94 #91]: false
unsat
945ffcf16061a167fde6a7075ed9332c98f7d17c 15 0
#2 := false
decl f3 :: Int
#7 := f3
#8 := (< f3 f3)
#9 := (not #8)
#10 := (not #9)
#36 := (iff #10 false)
#34 := (iff #8 false)
#35 := [rewrite]: #34
#32 := (iff #10 #8)
#33 := [rewrite]: #32
#37 := [trans #33 #35]: #36
#31 := [asserted]: #10
[mp #31 #37]: false
unsat
85f19ade787969483a16e4ebd4b917f9f0234f87 75 0
#2 := false
#17 := 0::Int
decl f5 :: Int
#10 := f5
#53 := -1::Int
#54 := (* -1::Int f5)
decl f4 :: Int
#8 := f4
#55 := (+ f4 #54)
#56 := (<= #55 0::Int)
decl f3 :: Int
#7 := f3
#62 := (+ f3 #54)
#63 := (<= #62 0::Int)
#59 := (not #56)
#66 := (* -1::Int f4)
#67 := (+ f3 #66)
#68 := (<= #67 0::Int)
#71 := (not #68)
#80 := (or #71 #59 #63)
#85 := (not #80)
#12 := (<= f3 f5)
#11 := (<= f4 f5)
#13 := (implies #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#88 := (iff #15 #85)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#86 := (iff #50 #85)
#83 := (iff #45 #80)
#74 := (or #59 #63)
#77 := (or #71 #74)
#81 := (iff #77 #80)
#82 := [rewrite]: #81
#78 := (iff #45 #77)
#75 := (iff #38 #74)
#64 := (iff #12 #63)
#65 := [rewrite]: #64
#60 := (iff #37 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#76 := [monotonicity #61 #65]: #75
#72 := (iff #44 #71)
#69 := (iff #9 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#79 := [monotonicity #73 #76]: #78
#84 := [trans #79 #82]: #83
#87 := [monotonicity #84]: #86
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#89 := [trans #52 #87]: #88
#36 := [asserted]: #15
#90 := [mp #36 #89]: #85
#92 := [not-or-elim #90]: #56
#93 := (not #63)
#94 := [not-or-elim #90]: #93
#91 := [not-or-elim #90]: #68
[th-lemma arith farkas 1 -1 1 #91 #94 #92]: false
unsat
931acbba508535ba7d1335a982cf7a172a535d9c 80 0
#2 := false
#17 := 0::Int
decl f5 :: Int
#10 := f5
#53 := -1::Int
#54 := (* -1::Int f5)
decl f4 :: Int
#8 := f4
#55 := (+ f4 #54)
#56 := (<= #55 0::Int)
decl f3 :: Int
#7 := f3
#62 := (+ f3 #54)
#63 := (<= #62 0::Int)
#59 := (not #56)
#68 := (* -1::Int f4)
#69 := (+ f3 #68)
#67 := (>= #69 0::Int)
#85 := (or #67 #59 #63)
#90 := (not #85)
#12 := (<= f3 f5)
#11 := (<= f4 f5)
#13 := (implies #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#93 := (iff #15 #90)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#91 := (iff #50 #90)
#88 := (iff #45 #85)
#79 := (or #59 #63)
#82 := (or #67 #79)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #45 #82)
#80 := (iff #38 #79)
#64 := (iff #12 #63)
#65 := [rewrite]: #64
#60 := (iff #37 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#81 := [monotonicity #61 #65]: #80
#77 := (iff #44 #67)
#66 := (not #67)
#72 := (not #66)
#75 := (iff #72 #67)
#76 := [rewrite]: #75
#73 := (iff #44 #72)
#70 := (iff #9 #66)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#84 := [monotonicity #78 #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#94 := [trans #52 #92]: #93
#36 := [asserted]: #15
#95 := [mp #36 #94]: #90
#97 := [not-or-elim #95]: #56
#96 := [not-or-elim #95]: #66
#98 := (not #63)
#99 := [not-or-elim #95]: #98
[th-lemma arith farkas 1 1 1 #99 #96 #97]: false
unsat
816d4005adca7e29ab45b1020b26b4dce5e836b4 80 0
#2 := false
#17 := 0::Int
decl f5 :: Int
#10 := f5
#53 := -1::Int
#56 := (* -1::Int f5)
decl f3 :: Int
#7 := f3
#67 := (+ f3 #56)
#68 := (<= #67 0::Int)
#98 := (not #68)
decl f4 :: Int
#8 := f4
#57 := (+ f4 #56)
#55 := (>= #57 0::Int)
#71 := (* -1::Int f4)
#72 := (+ f3 #71)
#73 := (<= #72 0::Int)
#76 := (not #73)
#85 := (or #76 #55 #68)
#90 := (not #85)
#12 := (<= f3 f5)
#11 := (< f4 f5)
#13 := (implies #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#93 := (iff #15 #90)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#91 := (iff #50 #90)
#88 := (iff #45 #85)
#79 := (or #55 #68)
#82 := (or #76 #79)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #45 #82)
#80 := (iff #38 #79)
#69 := (iff #12 #68)
#70 := [rewrite]: #69
#65 := (iff #37 #55)
#54 := (not #55)
#60 := (not #54)
#63 := (iff #60 #55)
#64 := [rewrite]: #63
#61 := (iff #37 #60)
#58 := (iff #11 #54)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#81 := [monotonicity #66 #70]: #80
#77 := (iff #44 #76)
#74 := (iff #9 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#84 := [monotonicity #78 #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#94 := [trans #52 #92]: #93
#36 := [asserted]: #15
#95 := [mp #36 #94]: #90
#99 := [not-or-elim #95]: #98
#97 := [not-or-elim #95]: #54
#96 := [not-or-elim #95]: #73
[th-lemma arith farkas 1 1 1 #96 #97 #99]: false
unsat
2e4e306dde5e00fefa942379810b423549afc80a 85 0
#2 := false
#17 := 0::Int
decl f5 :: Int
#10 := f5
#53 := -1::Int
#56 := (* -1::Int f5)
decl f3 :: Int
#7 := f3
#69 := (+ f3 #56)
#68 := (>= #69 0::Int)
#67 := (not #68)
decl f4 :: Int
#8 := f4
#57 := (+ f4 #56)
#55 := (>= #57 0::Int)
#74 := (* -1::Int f4)
#75 := (+ f3 #74)
#73 := (>= #75 0::Int)
#91 := (or #73 #55 #67)
#96 := (not #91)
#12 := (< f3 f5)
#11 := (< f4 f5)
#13 := (implies #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#99 := (iff #15 #96)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#97 := (iff #50 #96)
#94 := (iff #45 #91)
#85 := (or #55 #67)
#88 := (or #73 #85)
#92 := (iff #88 #91)
#93 := [rewrite]: #92
#89 := (iff #45 #88)
#86 := (iff #38 #85)
#70 := (iff #12 #67)
#71 := [rewrite]: #70
#65 := (iff #37 #55)
#54 := (not #55)
#60 := (not #54)
#63 := (iff #60 #55)
#64 := [rewrite]: #63
#61 := (iff #37 #60)
#58 := (iff #11 #54)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#87 := [monotonicity #66 #71]: #86
#83 := (iff #44 #73)
#72 := (not #73)
#78 := (not #72)
#81 := (iff #78 #73)
#82 := [rewrite]: #81
#79 := (iff #44 #78)
#76 := (iff #9 #72)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#90 := [monotonicity #84 #87]: #89
#95 := [trans #90 #93]: #94
#98 := [monotonicity #95]: #97
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#100 := [trans #52 #98]: #99
#36 := [asserted]: #15
#101 := [mp #36 #100]: #96
#104 := [not-or-elim #101]: #68
#103 := [not-or-elim #101]: #54
#102 := [not-or-elim #101]: #72
[th-lemma arith farkas 1 1 1 #102 #103 #104]: false
unsat
6ff3c7abc0fee4a9e14344b48daedbcf5f5fa00f 69 0
#2 := false
#18 := 0::Int
decl f5 :: Int
#10 := f5
#45 := -1::Int
#53 := (* -1::Int f5)
decl f3 :: Int
#7 := f3
#64 := (+ f3 #53)
#65 := (<= #64 0::Int)
#66 := (not #65)
decl f4 :: Int
#8 := f4
#54 := (+ f4 #53)
#52 := (>= #54 0::Int)
#55 := (not #52)
#48 := (* -1::Int f4)
#49 := (+ f3 #48)
#47 := (>= #49 0::Int)
#46 := (not #47)
#58 := (and #46 #55)
#61 := (not #58)
#76 := (or #61 #65)
#79 := (not #76)
#13 := (< f5 f3)
#14 := (not #13)
#11 := (< f4 f5)
#9 := (< f3 f4)
#12 := (and #9 #11)
#15 := (implies #12 #14)
#16 := (not #15)
#82 := (iff #16 #79)
#38 := (not #12)
#39 := (or #38 #14)
#42 := (not #39)
#80 := (iff #42 #79)
#77 := (iff #39 #76)
#74 := (iff #14 #65)
#69 := (not #66)
#72 := (iff #69 #65)
#73 := [rewrite]: #72
#70 := (iff #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#62 := (iff #38 #61)
#59 := (iff #12 #58)
#56 := (iff #11 #55)
#57 := [rewrite]: #56
#50 := (iff #9 #46)
#51 := [rewrite]: #50
#60 := [monotonicity #51 #57]: #59
#63 := [monotonicity #60]: #62
#78 := [monotonicity #63 #75]: #77
#81 := [monotonicity #78]: #80
#43 := (iff #16 #42)
#40 := (iff #15 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#83 := [trans #44 #81]: #82
#37 := [asserted]: #16
#84 := [mp #37 #83]: #79
#88 := [not-or-elim #84]: #66
#85 := [not-or-elim #84]: #58
#87 := [and-elim #85]: #55
#86 := [and-elim #85]: #46
[th-lemma arith farkas 1 1 1 #86 #87 #88]: false
unsat
350ef141a75c095cba28d720b8371e2490c8bb19 17 0
#2 := false
#7 := 0::Real
#8 := (= 0::Real 0::Real)
#9 := (not #8)
#37 := (iff #9 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
21acd48b54433e537e09b8f6f2ffb24eacd32980 25 0
#2 := false
#7 := 0::Real
#8 := (- 0::Real)
#9 := (= 0::Real #8)
#10 := (not #9)
#45 := (iff #10 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#38 := (iff #9 true)
#33 := (= 0::Real 0::Real)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (= #8 0::Real)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #10
[mp #30 #46]: false
unsat
481d09c848302673296d6da57e855bb3bb5428f4 17 0
#2 := false
#7 := 1::Real
#8 := (= 1::Real 1::Real)
#9 := (not #8)
#38 := (iff #9 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #9
[mp #30 #39]: false
unsat
7526daf188c418735315464dcb1bae49e4d1c6a4 34 0
#2 := false
#7 := 1::Real
#8 := (- 1::Real)
#9 := (= #8 1::Real)
#10 := (not #9)
#11 := (not #10)
#55 := (iff #11 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #11 #50)
#48 := (iff #10 true)
#43 := (not false)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #10 #43)
#41 := (iff #9 false)
#33 := -1::Real
#36 := (= -1::Real 1::Real)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #9 #36)
#34 := (= #8 -1::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#32 := [asserted]: #11
[mp #32 #56]: false
unsat
f989bf5d645754958077a25b45a102186a2c8468 18 0
#2 := false
#8 := 1::Real
#7 := 0::Real
#9 := (< 0::Real 1::Real)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
71711cc01c8c80c87657e4ad599846d287b28e35 18 0
#2 := false
#8 := 1::Real
#7 := 0::Real
#9 := (<= 0::Real 1::Real)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
ea4d13d40e3f40148fe15c5ac2bbd56a3256548a 40 0
#2 := false
#11 := 567::Real
#9 := 345::Real
#7 := 123::Real
#8 := (- 123::Real)
#10 := (+ #8 345::Real)
#12 := (< #10 567::Real)
#13 := (not #12)
#61 := (iff #13 false)
#41 := 222::Real
#46 := (< 222::Real 567::Real)
#49 := (not #46)
#59 := (iff #49 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #49 #54)
#52 := (iff #46 true)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#50 := (iff #13 #49)
#47 := (iff #12 #46)
#44 := (= #10 222::Real)
#35 := -123::Real
#38 := (+ -123::Real 345::Real)
#42 := (= #38 222::Real)
#43 := [rewrite]: #42
#39 := (= #10 #38)
#36 := (= #8 -123::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#62 := [trans #51 #60]: #61
#34 := [asserted]: #13
[mp #34 #62]: false
unsat
f37864df8bd3862357cec2b2b3e0079ce8f89a8d 18 0
#2 := false
#8 := 2345678901::Real
#7 := 123456789::Real
#9 := (< 123456789::Real 2345678901::Real)
#10 := (not #9)
#41 := (iff #10 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (iff #9 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #10
[mp #31 #42]: false
unsat
848068d33a75fce3ca7ec5b7cc3564150c9afd1d 30 0
#2 := false
#9 := 2345678901::Real
#7 := 123456789::Real
#8 := (- 123456789::Real)
#10 := (< #8 2345678901::Real)
#11 := (not #10)
#51 := (iff #11 false)
#33 := -123456789::Real
#36 := (< -123456789::Real 2345678901::Real)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (= #8 -123456789::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #11
[mp #32 #52]: false
unsat
31521991dfd970c057cb8150c9652aec59e07704 26 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := 0::Real
#9 := (+ f3 0::Real)
#10 := (= #9 f3)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= f3 f3)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
6757cdf387098ea19b45fbcbcb515eeb487bf8f8 26 0
#2 := false
decl f3 :: Real
#8 := f3
#7 := 0::Real
#9 := (+ 0::Real f3)
#10 := (= #9 f3)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= f3 f3)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
3f2d195dd68cf890f1ca7d83a830eeccc0d57255 29 0
#2 := false
decl f3 :: Real
#7 := f3
decl f4 :: Real
#8 := f4
#10 := (+ f4 f3)
#9 := (+ f3 f4)
#11 := (= #9 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (= #9 #9)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (= #10 #9)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
e8a6e64d56abb2bc442b2a42c9dd8c760a528cdb 33 0
#2 := false
decl f5 :: Real
#9 := f5
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#12 := (+ f3 f4)
#13 := (+ #12 f5)
#10 := (+ f4 f5)
#11 := (+ f3 #10)
#14 := (= #11 #13)
#15 := (not #14)
#51 := (iff #15 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #15 #46)
#44 := (iff #14 true)
#39 := (= #11 #11)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #14 #39)
#37 := (= #13 #11)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#36 := [asserted]: #15
[mp #36 #52]: false
unsat
da67a8554477e4765556fd0a3f279034168c96a4 45 0
#2 := false
decl f4 :: Real
#8 := f4
#12 := (- f4)
decl f3 :: Real
#7 := f3
#13 := (= f3 #12)
#10 := 0::Real
#9 := (+ f3 f4)
#11 := (= #9 0::Real)
#14 := (iff #11 #13)
#15 := (not #14)
#64 := (iff #15 false)
#36 := -1::Real
#37 := (* -1::Real f4)
#40 := (= f3 #37)
#49 := (not #11)
#50 := (iff #49 #40)
#62 := (iff #50 false)
#57 := (iff #49 #11)
#60 := (iff #57 false)
#61 := [rewrite]: #60
#58 := (iff #50 #57)
#55 := (iff #40 #11)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#53 := (iff #15 #50)
#43 := (iff #11 #40)
#46 := (not #43)
#51 := (iff #46 #50)
#52 := [rewrite]: #51
#47 := (iff #15 #46)
#44 := (iff #14 #43)
#41 := (iff #13 #40)
#38 := (= #12 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#54 := [trans #48 #52]: #53
#65 := [trans #54 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
6811cc1a4bfad536ab1a6a586c61daecfd29788f 26 0
#2 := false
#7 := 1::Real
#8 := (- 1::Real)
#9 := (= #8 #8)
#10 := (not #9)
#47 := (iff #10 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #10 #42)
#40 := (iff #9 true)
#32 := -1::Real
#35 := (= -1::Real -1::Real)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #9 #35)
#33 := (= #8 -1::Real)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #10
[mp #31 #48]: false
unsat
aa2cb1d7717b9c49c4e48402428e4ddb7de5523b 26 0
#2 := false
#7 := 3::Real
#8 := (- 3::Real)
#9 := (= #8 #8)
#10 := (not #9)
#47 := (iff #10 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #10 #42)
#40 := (iff #9 true)
#32 := -3::Real
#35 := (= -3::Real -3::Real)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #9 #35)
#33 := (= #8 -3::Real)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #10
[mp #31 #48]: false
unsat
b82f2c57c3991807ae36eb3352dd673d6ee809c4 53 0
#2 := false
decl f3 :: Real
#7 := f3
#9 := 0::Real
#11 := (< 0::Real f3)
#8 := (- f3)
#10 := (< #8 0::Real)
#12 := (iff #10 #11)
#13 := (not #12)
#73 := (iff #13 false)
#34 := -1::Real
#35 := (* -1::Real f3)
#38 := (< #35 0::Real)
#47 := (not #38)
#48 := (iff #47 #11)
#71 := (iff #48 false)
#53 := (<= f3 0::Real)
#54 := (not #53)
#66 := (iff #53 #54)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #48 #66)
#64 := (iff #11 #54)
#65 := [rewrite]: #64
#62 := (iff #47 #53)
#57 := (not #54)
#60 := (iff #57 #53)
#61 := [rewrite]: #60
#58 := (iff #47 #57)
#55 := (iff #38 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#51 := (iff #13 #48)
#41 := (iff #38 #11)
#44 := (not #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (iff #10 #38)
#36 := (= #8 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#74 := [trans #52 #72]: #73
#33 := [asserted]: #13
[mp #33 #74]: false
unsat
49601c2ee192c05037ae2ddde04a749818f5a75e 61 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#10 := (- f3)
#11 := (< #10 0::Real)
#9 := (< 0::Real f3)
#12 := (implies #9 #11)
#13 := (not #12)
#80 := (iff #13 false)
#34 := -1::Real
#35 := (* -1::Real f3)
#38 := (< #35 0::Real)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#78 := (iff #50 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #50 #73)
#71 := (iff #45 true)
#53 := (<= f3 0::Real)
#54 := (not #53)
#66 := (or #53 #54)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #45 #66)
#64 := (iff #38 #54)
#65 := [rewrite]: #64
#62 := (iff #44 #53)
#57 := (not #54)
#60 := (iff #57 #53)
#61 := [rewrite]: #60
#58 := (iff #44 #57)
#55 := (iff #9 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := (iff #13 #50)
#48 := (iff #12 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#33 := [asserted]: #13
[mp #33 #81]: false
unsat
51f38431acaaabbe473cf949af6afab6ca1aafcf 61 0
#2 := false
decl f3 :: Real
#7 := f3
#10 := (- f3)
#8 := 0::Real
#11 := (< 0::Real #10)
#9 := (< f3 0::Real)
#12 := (implies #9 #11)
#13 := (not #12)
#80 := (iff #13 false)
#34 := -1::Real
#35 := (* -1::Real f3)
#38 := (< 0::Real #35)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#78 := (iff #50 false)
#1 := true
#73 := (not true)
#76 := (iff #73 false)
#77 := [rewrite]: #76
#74 := (iff #50 #73)
#71 := (iff #45 true)
#53 := (>= f3 0::Real)
#54 := (not #53)
#66 := (or #53 #54)
#69 := (iff #66 true)
#70 := [rewrite]: #69
#67 := (iff #45 #66)
#64 := (iff #38 #54)
#65 := [rewrite]: #64
#62 := (iff #44 #53)
#57 := (not #54)
#60 := (iff #57 #53)
#61 := [rewrite]: #60
#58 := (iff #44 #57)
#55 := (iff #9 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#68 := [monotonicity #63 #65]: #67
#72 := [trans #68 #70]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#51 := (iff #13 #50)
#48 := (iff #12 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#81 := [trans #52 #79]: #80
#33 := [asserted]: #13
[mp #33 #81]: false
unsat
0b167657d89597cff4ad497a1e580da4d6c11e72 26 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := 0::Real
#9 := (- f3 0::Real)
#10 := (= #9 f3)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= f3 f3)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
ccfbfd13a5b76b3c59e23f1d5b1857adca54db23 32 0
#2 := false
decl f3 :: Real
#8 := f3
#10 := (- f3)
#7 := 0::Real
#9 := (- 0::Real f3)
#11 := (= #9 #10)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := -1::Real
#34 := (* -1::Real f3)
#39 := (= #34 #34)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (= #10 #34)
#38 := [rewrite]: #37
#35 := (= #9 #34)
#36 := [rewrite]: #35
#41 := [monotonicity #36 #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
a5fc90b4c796e1c2116bff64e4df36775c337a04 64 0
#2 := false
#11 := 0::Real
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#10 := (- f3 f4)
#12 := (< #10 0::Real)
#9 := (< f3 f4)
#13 := (implies #9 #12)
#14 := (not #13)
#82 := (iff #14 false)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#40 := (< #37 0::Real)
#46 := (not #9)
#47 := (or #46 #40)
#52 := (not #47)
#80 := (iff #52 false)
#1 := true
#75 := (not true)
#78 := (iff #75 false)
#79 := [rewrite]: #78
#76 := (iff #52 #75)
#73 := (iff #47 true)
#56 := (>= #37 0::Real)
#55 := (not #56)
#68 := (or #56 #55)
#71 := (iff #68 true)
#72 := [rewrite]: #71
#69 := (iff #47 #68)
#66 := (iff #40 #55)
#67 := [rewrite]: #66
#64 := (iff #46 #56)
#59 := (not #55)
#62 := (iff #59 #56)
#63 := [rewrite]: #62
#60 := (iff #46 #59)
#57 := (iff #9 #55)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#70 := [monotonicity #65 #67]: #69
#74 := [trans #70 #72]: #73
#77 := [monotonicity #74]: #76
#81 := [trans #77 #79]: #80
#53 := (iff #14 #52)
#50 := (iff #13 #47)
#43 := (implies #9 #40)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #13 #43)
#41 := (iff #12 #40)
#38 := (= #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [monotonicity #51]: #53
#83 := [trans #54 #81]: #82
#34 := [asserted]: #14
[mp #34 #83]: false
unsat
7ed72828350129130a88941dee3cc368dd21cb65 44 0
#2 := false
decl f3 :: Real
#7 := f3
decl f4 :: Real
#8 := f4
#10 := (- f4 f3)
#11 := (- #10)
#9 := (- f3 f4)
#12 := (= #9 #11)
#13 := (not #12)
#63 := (iff #13 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #13 #58)
#56 := (iff #12 true)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#51 := (= #37 #37)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #12 #51)
#49 := (= #11 #37)
#40 := (* -1::Real f3)
#41 := (+ #40 f4)
#44 := (- #41)
#47 := (= #44 #37)
#48 := [rewrite]: #47
#45 := (= #11 #44)
#42 := (= #10 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#38 := (= #9 #37)
#39 := [rewrite]: #38
#53 := [monotonicity #39 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#34 := [asserted]: #13
[mp #34 #64]: false
unsat
c431a50fe81f19bdf1df51651ad04729ae603478 42 0
#2 := false
decl f3 :: Real
#7 := f3
decl f4 :: Real
#8 := f4
#10 := (- f4)
#11 := (+ #10 f3)
#9 := (- f3 f4)
#12 := (= #9 #11)
#13 := (not #12)
#61 := (iff #13 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #13 #56)
#54 := (iff #12 true)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#49 := (= #37 #37)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #12 #49)
#47 := (= #11 #37)
#42 := (+ #36 f3)
#45 := (= #42 #37)
#46 := [rewrite]: #45
#43 := (= #11 #42)
#40 := (= #10 #36)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#38 := (= #9 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#34 := [asserted]: #13
[mp #34 #62]: false
unsat
65271dc3ab073ac04b3246ac44e6c8414e091882 48 0
#2 := false
decl f5 :: Real
#10 := f5
decl f4 :: Real
#8 := f4
#12 := (+ f4 f5)
decl f3 :: Real
#7 := f3
#13 := (- f3 #12)
#9 := (- f3 f4)
#11 := (- #9 f5)
#14 := (= #11 #13)
#15 := (not #14)
#66 := (iff #15 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #15 #61)
#59 := (iff #14 true)
#37 := -1::Real
#45 := (* -1::Real f5)
#38 := (* -1::Real f4)
#46 := (+ #38 #45)
#47 := (+ f3 #46)
#54 := (= #47 #47)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #14 #54)
#52 := (= #13 #47)
#53 := [rewrite]: #52
#50 := (= #11 #47)
#39 := (+ f3 #38)
#42 := (- #39 f5)
#48 := (= #42 #47)
#49 := [rewrite]: #48
#43 := (= #11 #42)
#40 := (= #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#51 := [trans #44 #49]: #50
#56 := [monotonicity #51 #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#36 := [asserted]: #15
[mp #36 #67]: false
unsat
53812613c50ce7830d84e557641bcca3c4812dd5 26 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#9 := (* f3 0::Real)
#10 := (= #9 0::Real)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= 0::Real 0::Real)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
856e04187cdbc2035a45396cc77f893736b91735 26 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#9 := (* 0::Real f3)
#10 := (= #9 0::Real)
#11 := (not #10)
#45 := (iff #11 false)
#1 := true
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 true)
#33 := (= 0::Real 0::Real)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#32 := [rewrite]: #10
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#31 := [asserted]: #11
[mp #31 #46]: false
unsat
851b09d524dddf4dc26796a2641c88c095c084d1 26 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := 1::Real
#9 := (* f3 1::Real)
#10 := (= #9 f3)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#33 := [rewrite]: #10
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #11
[mp #32 #47]: false
unsat
e644fd725742c5947a76808fa8508e0afd656cd8 26 0
#2 := false
decl f3 :: Real
#8 := f3
#7 := 1::Real
#9 := (* 1::Real f3)
#10 := (= #9 f3)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#33 := [rewrite]: #10
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #11
[mp #32 #47]: false
unsat
0ddad1522f46ecc70264e9eb7e7c8e72b14a1fe7 40 0
#2 := false
decl f3 :: Real
#7 := f3
#11 := (- f3)
#8 := 1::Real
#9 := (- 1::Real)
#10 := (* f3 #9)
#12 := (= #10 #11)
#13 := (not #12)
#60 := (iff #13 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #13 #55)
#53 := (iff #12 true)
#35 := -1::Real
#41 := (* -1::Real f3)
#48 := (= #41 #41)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #12 #48)
#46 := (= #11 #41)
#47 := [rewrite]: #46
#44 := (= #10 #41)
#38 := (* f3 -1::Real)
#42 := (= #38 #41)
#43 := [rewrite]: #42
#39 := (= #10 #38)
#36 := (= #9 -1::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#50 := [monotonicity #45 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#34 := [asserted]: #13
[mp #34 #61]: false
unsat
f5c5be999a961dbeb7007aacb486ddf3fbcad948 35 0
#2 := false
decl f3 :: Real
#9 := f3
#11 := (- f3)
#7 := 1::Real
#8 := (- 1::Real)
#10 := (* #8 f3)
#12 := (= #10 #11)
#13 := (not #12)
#55 := (iff #13 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #13 #50)
#48 := (iff #12 true)
#35 := -1::Real
#38 := (* -1::Real f3)
#43 := (= #38 #38)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (= #11 #38)
#42 := [rewrite]: #41
#39 := (= #10 #38)
#36 := (= #8 -1::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [monotonicity #40 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#34 := [asserted]: #13
[mp #34 #56]: false
unsat
fa62ab1f8f4c43363df0c20a0e78ae4b3d0bf5f6 28 0
#2 := false
#7 := 3::Real
decl f3 :: Real
#8 := f3
#10 := (* f3 3::Real)
#9 := (* 3::Real f3)
#11 := (= #9 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#36 := (= #9 #9)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (= #10 #9)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #12
[mp #33 #49]: false
unsat
ca0e54020823cad060f3d1ba1d831227210c5d87 30 0
#2 := false
#7 := 1::Real
#8 := 2::Real
#9 := (/ 1::Real 2::Real)
#10 := (< #9 1::Real)
#11 := (not #10)
#51 := (iff #11 false)
#33 := 1/2::Real
#36 := (< 1/2::Real 1::Real)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (= #9 1/2::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #11
[mp #32 #52]: false
unsat
ad7a6067815e419f4adff50cf7e013cfa4e44591 27 0
#2 := false
#8 := 3::Real
#7 := 1::Real
#9 := (/ 1::Real 3::Real)
#10 := (= #9 #9)
#11 := (not #10)
#48 := (iff #11 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#41 := (iff #10 true)
#33 := 1/3::Real
#36 := (= 1/3::Real 1/3::Real)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (= #9 1/3::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#32 := [asserted]: #11
[mp #32 #49]: false
unsat
a99a6f9f59161e07ca4bb424da1dda7f3599b9d0 48 0
#2 := false
#8 := 3::Real
#7 := 1::Real
#11 := (- 1::Real)
#12 := (/ #11 3::Real)
#9 := (- 3::Real)
#10 := (/ 1::Real #9)
#13 := (= #10 #12)
#14 := (not #13)
#69 := (iff #14 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #14 #64)
#62 := (iff #13 true)
#42 := -1/3::Real
#57 := (= -1/3::Real -1/3::Real)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #13 #57)
#55 := (= #12 -1/3::Real)
#47 := -1::Real
#50 := (/ -1::Real 3::Real)
#53 := (= #50 -1/3::Real)
#54 := [rewrite]: #53
#51 := (= #12 #50)
#48 := (= #11 -1::Real)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#45 := (= #10 -1/3::Real)
#36 := -3::Real
#39 := (/ 1::Real -3::Real)
#43 := (= #39 -1/3::Real)
#44 := [rewrite]: #43
#40 := (= #10 #39)
#37 := (= #9 -3::Real)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#59 := [monotonicity #46 #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#35 := [asserted]: #14
[mp #35 #70]: false
unsat
73a0b3a2d069b59c661aa11bdb9686097aacba84 36 0
#2 := false
#9 := 3::Real
#7 := 1::Real
#8 := (- 1::Real)
#10 := (/ #8 3::Real)
#11 := (= #10 #10)
#12 := (not #11)
#57 := (iff #12 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #12 #52)
#50 := (iff #11 true)
#40 := -1/3::Real
#45 := (= -1/3::Real -1/3::Real)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #11 #45)
#43 := (= #10 -1/3::Real)
#34 := -1::Real
#37 := (/ -1::Real 3::Real)
#41 := (= #37 -1/3::Real)
#42 := [rewrite]: #41
#38 := (= #10 #37)
#35 := (= #8 -1::Real)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#44 := [trans #39 #42]: #43
#47 := [monotonicity #44 #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#33 := [asserted]: #12
[mp #33 #58]: false
unsat
e455683e14454659c86babd4206469f19c262efb 43 0
#2 := false
#9 := 3::Real
#7 := 1::Real
#12 := (/ 1::Real 3::Real)
#10 := (- 3::Real)
#8 := (- 1::Real)
#11 := (/ #8 #10)
#13 := (= #11 #12)
#14 := (not #13)
#64 := (iff #14 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #14 #59)
#57 := (iff #13 true)
#45 := 1/3::Real
#52 := (= 1/3::Real 1/3::Real)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #13 #52)
#50 := (= #12 1/3::Real)
#51 := [rewrite]: #50
#48 := (= #11 1/3::Real)
#39 := -3::Real
#36 := -1::Real
#42 := (/ -1::Real -3::Real)
#46 := (= #42 1/3::Real)
#47 := [rewrite]: #46
#43 := (= #11 #42)
#40 := (= #10 -3::Real)
#41 := [rewrite]: #40
#37 := (= #8 -1::Real)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #41]: #43
#49 := [trans #44 #47]: #48
#54 := [monotonicity #49 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #14
[mp #35 #65]: false
unsat
4e89ec99c186f4d0cc4950beb34277bc35815fff 26 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := 1::Real
#9 := (/ f3 1::Real)
#10 := (= #9 f3)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#33 := [rewrite]: #10
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #11
[mp #32 #47]: false
unsat
ba8acb319606519055ab94494c9ac613c5c038a0 60 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#67 := 2/3::Real
#68 := (* 2/3::Real f3)
#69 := (<= #68 0::Real)
#65 := (not #69)
#54 := (<= f3 0::Real)
#71 := (or #54 #65)
#74 := (not #71)
#10 := 3::Real
#11 := (/ f3 3::Real)
#12 := (< #11 f3)
#9 := (< 0::Real f3)
#13 := (implies #9 #12)
#14 := (not #13)
#77 := (iff #14 #74)
#35 := 1/3::Real
#36 := (* 1/3::Real f3)
#39 := (< #36 f3)
#45 := (not #9)
#46 := (or #45 #39)
#51 := (not #46)
#75 := (iff #51 #74)
#72 := (iff #46 #71)
#66 := (iff #39 #65)
#70 := [rewrite]: #66
#63 := (iff #45 #54)
#55 := (not #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #9 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#73 := [monotonicity #64 #70]: #72
#76 := [monotonicity #73]: #75
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #9 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#78 := [trans #53 #76]: #77
#34 := [asserted]: #14
#79 := [mp #34 #78]: #74
#81 := [not-or-elim #79]: #69
#80 := [not-or-elim #79]: #55
[th-lemma arith farkas -2/3 1 #80 #81]: false
unsat
c254f7743432efb3168908069776d39b954adceb 60 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#69 := 2/3::Real
#70 := (* 2/3::Real f3)
#67 := (>= #70 0::Real)
#65 := (not #67)
#56 := (>= f3 0::Real)
#71 := (or #56 #65)
#74 := (not #71)
#10 := 3::Real
#11 := (/ f3 3::Real)
#12 := (< f3 #11)
#9 := (< f3 0::Real)
#13 := (implies #9 #12)
#14 := (not #13)
#77 := (iff #14 #74)
#35 := 1/3::Real
#36 := (* 1/3::Real f3)
#39 := (< f3 #36)
#45 := (not #9)
#46 := (or #45 #39)
#51 := (not #46)
#75 := (iff #51 #74)
#72 := (iff #46 #71)
#66 := (iff #39 #65)
#68 := [rewrite]: #66
#63 := (iff #45 #56)
#54 := (not #56)
#58 := (not #54)
#61 := (iff #58 #56)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#55 := (iff #9 #54)
#57 := [rewrite]: #55
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#73 := [monotonicity #64 #68]: #72
#76 := [monotonicity #73]: #75
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #9 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#78 := [trans #53 #76]: #77
#34 := [asserted]: #14
#79 := [mp #34 #78]: #74
#81 := [not-or-elim #79]: #67
#80 := [not-or-elim #79]: #54
[th-lemma arith farkas -2/3 1 #80 #81]: false
unsat
52f1e86ce55eba5021ed07ab92d87cf35261926b 36 0
#2 := false
decl f3 :: Real
#8 := f3
#7 := 3::Real
#9 := (/ f3 3::Real)
#10 := (* 3::Real #9)
#11 := (= #10 f3)
#12 := (not #11)
#56 := (iff #12 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #12 #51)
#49 := (iff #11 true)
#44 := (= f3 f3)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #11 #44)
#34 := 1/3::Real
#35 := (* 1/3::Real f3)
#38 := (* 3::Real #35)
#41 := (= #38 f3)
#42 := [rewrite]: #41
#39 := (= #10 #38)
#36 := (= #9 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [trans #40 #42]: #11
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#33 := [asserted]: #12
[mp #33 #57]: false
unsat
d1e89f661ec44eae20b1e53978b42ef04f82af17 35 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := 3::Real
#9 := (* f3 3::Real)
#10 := (/ #9 3::Real)
#11 := (= #10 f3)
#12 := (not #11)
#55 := (iff #12 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#48 := (iff #11 true)
#43 := (= f3 f3)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#34 := (* 3::Real f3)
#37 := (/ #34 3::Real)
#40 := (= #37 f3)
#41 := [rewrite]: #40
#38 := (= #10 #37)
#35 := (= #9 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [trans #39 #41]: #11
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#33 := [asserted]: #12
[mp #33 #56]: false
unsat
0fdc33b7cc1348a0833bcf7f4b4149307e635b6c 62 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#69 := 1/3::Real
#70 := (* 1/3::Real f3)
#71 := (<= #70 0::Real)
#67 := (not #71)
#56 := (<= f3 0::Real)
#73 := (or #56 #67)
#76 := (not #73)
#12 := 3::Real
#10 := 2::Real
#11 := (* 2::Real f3)
#13 := (/ #11 3::Real)
#14 := (< #13 f3)
#9 := (< 0::Real f3)
#15 := (implies #9 #14)
#16 := (not #15)
#79 := (iff #16 #76)
#38 := 2/3::Real
#39 := (* 2/3::Real f3)
#41 := (< #39 f3)
#47 := (not #9)
#48 := (or #47 #41)
#53 := (not #48)
#77 := (iff #53 #76)
#74 := (iff #48 #73)
#68 := (iff #41 #67)
#72 := [rewrite]: #68
#65 := (iff #47 #56)
#57 := (not #56)
#60 := (not #57)
#63 := (iff #60 #56)
#64 := [rewrite]: #63
#61 := (iff #47 #60)
#58 := (iff #9 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#75 := [monotonicity #66 #72]: #74
#78 := [monotonicity #75]: #77
#54 := (iff #16 #53)
#51 := (iff #15 #48)
#44 := (implies #9 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#37 := (= #13 #39)
#40 := [rewrite]: #37
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#80 := [trans #55 #78]: #79
#36 := [asserted]: #16
#81 := [mp #36 #80]: #76
#83 := [not-or-elim #81]: #71
#82 := [not-or-elim #81]: #57
[th-lemma arith farkas -1/3 1 #82 #83]: false
unsat
f09f517e7e4cbc63db43c6d99d036f9d3a4315bf 62 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#71 := 1/3::Real
#72 := (* 1/3::Real f3)
#69 := (>= #72 0::Real)
#67 := (not #69)
#58 := (>= f3 0::Real)
#73 := (or #58 #67)
#76 := (not #73)
#12 := 3::Real
#10 := 2::Real
#11 := (* 2::Real f3)
#13 := (/ #11 3::Real)
#14 := (< f3 #13)
#9 := (< f3 0::Real)
#15 := (implies #9 #14)
#16 := (not #15)
#79 := (iff #16 #76)
#38 := 2/3::Real
#39 := (* 2/3::Real f3)
#41 := (< f3 #39)
#47 := (not #9)
#48 := (or #47 #41)
#53 := (not #48)
#77 := (iff #53 #76)
#74 := (iff #48 #73)
#68 := (iff #41 #67)
#70 := [rewrite]: #68
#65 := (iff #47 #58)
#56 := (not #58)
#60 := (not #56)
#63 := (iff #60 #58)
#64 := [rewrite]: #63
#61 := (iff #47 #60)
#57 := (iff #9 #56)
#59 := [rewrite]: #57
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#75 := [monotonicity #66 #70]: #74
#78 := [monotonicity #75]: #77
#54 := (iff #16 #53)
#51 := (iff #15 #48)
#44 := (implies #9 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#37 := (= #13 #39)
#40 := [rewrite]: #37
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#80 := [trans #55 #78]: #79
#36 := [asserted]: #16
#81 := [mp #36 #80]: #76
#83 := [not-or-elim #81]: #69
#82 := [not-or-elim #81]: #56
[th-lemma arith farkas -1/3 1 #82 #83]: false
unsat
89b345e26e51ed464cc683659a5ae8f2c05647b0 75 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#34 := -1::Real
#35 := (* -1::Real f3)
#47 := (>= f3 0::Real)
#54 := (if #47 f3 #35)
#74 := (* -1::Real #54)
#83 := (+ #35 #74)
#92 := (<= #83 0::Real)
#79 := (= #35 #54)
#48 := (not #47)
#75 := (+ f3 #74)
#82 := (<= #75 0::Real)
#78 := (= f3 #54)
#84 := [hypothesis]: #47
#80 := (or #48 #78)
#81 := [def-axiom]: #80
#85 := [unit-resolution #81 #84]: #78
#86 := (not #78)
#87 := (or #86 #82)
#88 := [th-lemma arith triangle-eq]: #87
#89 := [unit-resolution #88 #85]: #82
#63 := (>= #54 0::Real)
#67 := (not #63)
#10 := (- f3)
#9 := (< f3 0::Real)
#11 := (if #9 #10 f3)
#12 := (<= 0::Real #11)
#13 := (not #12)
#70 := (iff #13 #67)
#38 := (if #9 #35 f3)
#41 := (<= 0::Real #38)
#44 := (not #41)
#68 := (iff #44 #67)
#65 := (iff #41 #63)
#59 := (<= 0::Real #54)
#62 := (iff #59 #63)
#64 := [rewrite]: #62
#60 := (iff #41 #59)
#57 := (= #38 #54)
#51 := (if #48 #35 f3)
#55 := (= #51 #54)
#56 := [rewrite]: #55
#52 := (= #38 #51)
#49 := (iff #9 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#58 := [trans #53 #56]: #57
#61 := [monotonicity #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (= #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#71 := [trans #46 #69]: #70
#33 := [asserted]: #13
#72 := [mp #33 #71]: #67
#90 := [th-lemma arith farkas -1 1 1 #84 #72 #89]: false
#91 := [lemma #90]: #48
#76 := (or #47 #79)
#77 := [def-axiom]: #76
#94 := [unit-resolution #77 #91]: #79
#95 := (not #79)
#96 := (or #95 #92)
#97 := [th-lemma arith triangle-eq]: #96
#98 := [unit-resolution #97 #94]: #92
[th-lemma arith farkas 1 1 1 #72 #91 #98]: false
unsat
985bcf7e8f8c4a491bb0e856a8f7804095f5404a 103 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#36 := -1::Real
#37 := (* -1::Real f3)
#58 := (>= f3 0::Real)
#65 := (if #58 f3 #37)
#70 := (= #65 0::Real)
#13 := (= f3 0::Real)
#118 := (iff #13 #70)
#87 := (= f3 #65)
#101 := (<= #37 0::Real)
#100 := (= #37 0::Real)
#84 := (not #13)
#59 := (not #58)
#103 := [hypothesis]: #59
#104 := (or #84 #58)
#105 := [th-lemma arith triangle-eq]: #104
#106 := [unit-resolution #105 #103]: #84
#98 := (or #70 #13)
#73 := (not #70)
#76 := (iff #73 #13)
#10 := (- f3)
#9 := (< f3 0::Real)
#11 := (if #9 #10 f3)
#12 := (= #11 0::Real)
#14 := (iff #12 #13)
#15 := (not #14)
#79 := (iff #15 #76)
#40 := (if #9 #37 f3)
#43 := (= #40 0::Real)
#52 := (not #43)
#53 := (iff #52 #13)
#77 := (iff #53 #76)
#74 := (iff #52 #73)
#71 := (iff #43 #70)
#68 := (= #40 #65)
#62 := (if #59 #37 f3)
#66 := (= #62 #65)
#67 := [rewrite]: #66
#63 := (= #40 #62)
#60 := (iff #9 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#56 := (iff #15 #53)
#46 := (iff #43 #13)
#49 := (not #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #12 #43)
#41 := (= #11 #40)
#38 := (= #10 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#80 := [trans #57 #78]: #79
#35 := [asserted]: #15
#81 := [mp #35 #80]: #76
#91 := (not #76)
#96 := (or #70 #13 #91)
#97 := [def-axiom]: #96
#99 := [unit-resolution #97 #81]: #98
#107 := [unit-resolution #99 #106]: #70
#88 := (= #37 #65)
#85 := (or #58 #88)
#86 := [def-axiom]: #85
#108 := [unit-resolution #86 #103]: #88
#109 := [trans #108 #107]: #100
#110 := (not #100)
#111 := (or #110 #101)
#112 := [th-lemma arith triangle-eq]: #111
#113 := [unit-resolution #112 #109]: #101
#114 := [th-lemma arith farkas 1 1 #103 #113]: false
#115 := [lemma #114]: #58
#89 := (or #59 #87)
#90 := [def-axiom]: #89
#117 := [unit-resolution #90 #115]: #87
#119 := [monotonicity #117]: #118
#120 := (iff #84 #73)
#121 := [monotonicity #119]: #120
#102 := [hypothesis]: #84
#122 := [mp #102 #121]: #73
#116 := [unit-resolution #99 #102]: #70
#123 := [unit-resolution #116 #122]: false
#124 := [lemma #123]: #13
#126 := [mp #124 #119]: #70
#94 := (or #73 #84)
#92 := (or #73 #84 #91)
#93 := [def-axiom]: #92
#95 := [unit-resolution #93 #81]: #94
#125 := [unit-resolution #95 #124]: #73
[unit-resolution #125 #126]: false
unsat
54d70864c8e13c2ab5f71e5ded8863232101a991 102 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#36 := -1::Real
#37 := (* -1::Real f3)
#112 := (* -1::Real #37)
#113 := (+ f3 #112)
#115 := (>= #113 0::Real)
#111 := (= f3 #37)
#58 := (>= f3 0::Real)
#69 := (if #58 f3 #37)
#119 := (= #69 #37)
#89 := (= #37 #69)
#61 := (not #58)
#74 := (= #69 f3)
#88 := (= f3 #69)
#105 := (not #88)
#84 := (not #74)
#106 := (iff #84 #105)
#103 := (iff #74 #88)
#104 := [commutativity]: #103
#107 := [monotonicity #104]: #106
#100 := [hypothesis]: #84
#108 := [mp #100 #107]: #105
#98 := (or #58 #74)
#77 := (iff #61 #74)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (if #10 #11 f3)
#13 := (= #12 f3)
#9 := (<= 0::Real f3)
#14 := (iff #9 #13)
#15 := (not #14)
#80 := (iff #15 #77)
#40 := (if #10 #37 f3)
#43 := (= #40 f3)
#52 := (not #9)
#53 := (iff #52 #43)
#78 := (iff #53 #77)
#75 := (iff #43 #74)
#72 := (= #40 #69)
#66 := (if #61 #37 f3)
#70 := (= #66 #69)
#71 := [rewrite]: #70
#67 := (= #40 #66)
#64 := (iff #10 #61)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#76 := [monotonicity #73]: #75
#62 := (iff #52 #61)
#59 := (iff #9 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#79 := [monotonicity #63 #76]: #78
#56 := (iff #15 #53)
#46 := (iff #9 #43)
#49 := (not #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#41 := (= #12 #40)
#38 := (= #11 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#81 := [trans #57 #79]: #80
#35 := [asserted]: #15
#82 := [mp #35 #81]: #77
#85 := (not #77)
#96 := (or #58 #74 #85)
#97 := [def-axiom]: #96
#99 := [unit-resolution #97 #82]: #98
#101 := [unit-resolution #99 #100]: #58
#90 := (or #61 #88)
#91 := [def-axiom]: #90
#102 := [unit-resolution #91 #101]: #88
#109 := [unit-resolution #102 #108]: false
#110 := [lemma #109]: #74
#94 := (or #61 #84)
#92 := (or #61 #84 #85)
#93 := [def-axiom]: #92
#95 := [unit-resolution #93 #82]: #94
#116 := [unit-resolution #95 #110]: #61
#86 := (or #58 #89)
#87 := [def-axiom]: #86
#117 := [unit-resolution #87 #116]: #89
#120 := [symm #117]: #119
#118 := [symm #110]: #88
#121 := [trans #118 #120]: #111
#122 := (not #111)
#123 := (or #122 #115)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #115
[th-lemma arith farkas 2 1 #116 #125]: false
unsat
75f83357dfd0e95b567e5e16d1b564f2aacd5f8b 143 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#36 := -1::Real
#37 := (* -1::Real f3)
#58 := (>= f3 0::Real)
#65 := (if #58 f3 #37)
#104 := (* -1::Real #65)
#154 := (+ f3 #104)
#155 := (<= #154 0::Real)
#90 := (= f3 #65)
#105 := (+ #37 #104)
#107 := (>= #105 0::Real)
#91 := (= #37 #65)
#59 := (not #58)
#139 := [hypothesis]: #59
#88 := (or #58 #91)
#89 := [def-axiom]: #88
#140 := [unit-resolution #89 #139]: #91
#133 := (not #91)
#141 := (or #133 #107)
#142 := [th-lemma arith triangle-eq]: #141
#143 := [unit-resolution #142 #140]: #107
#73 := (+ f3 #65)
#86 := (<= #73 0::Real)
#148 := (not #86)
#87 := (>= #73 0::Real)
#106 := (<= #105 0::Real)
#74 := (= #73 0::Real)
#94 := (not #74)
#126 := (not #87)
#127 := [hypothesis]: #126
#128 := (or #94 #87)
#129 := [th-lemma arith triangle-eq]: #128
#130 := [unit-resolution #129 #127]: #94
#124 := (or #59 #74)
#111 := (= f3 0::Real)
#9 := (<= f3 0::Real)
#108 := [hypothesis]: #94
#102 := (or #9 #74)
#52 := (not #9)
#79 := (iff #52 #74)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (if #10 #11 f3)
#13 := (= #12 #11)
#14 := (iff #9 #13)
#15 := (not #14)
#82 := (iff #15 #79)
#40 := (if #10 #37 f3)
#43 := (= #40 #37)
#53 := (iff #52 #43)
#80 := (iff #53 #79)
#77 := (iff #43 #74)
#70 := (= #65 #37)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #43 #70)
#68 := (= #40 #65)
#62 := (if #59 #37 f3)
#66 := (= #62 #65)
#67 := [rewrite]: #66
#63 := (= #40 #62)
#60 := (iff #10 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#69 := [trans #64 #67]: #68
#72 := [monotonicity #69]: #71
#78 := [trans #72 #76]: #77
#81 := [monotonicity #78]: #80
#56 := (iff #15 #53)
#46 := (iff #9 #43)
#49 := (not #46)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #15 #49)
#47 := (iff #14 #46)
#44 := (iff #13 #43)
#38 := (= #11 #37)
#39 := [rewrite]: #38
#41 := (= #12 #40)
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42 #39]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#57 := [trans #51 #55]: #56
#83 := [trans #57 #81]: #82
#35 := [asserted]: #15
#84 := [mp #35 #83]: #79
#95 := (not #79)
#100 := (or #9 #74 #95)
#101 := [def-axiom]: #100
#103 := [unit-resolution #101 #84]: #102
#109 := [unit-resolution #103 #108]: #9
#110 := [hypothesis]: #58
#112 := [th-lemma arith eq-propagate 0 0 #110 #109]: #111
#120 := (= #73 f3)
#118 := (= #65 f3)
#92 := (or #59 #90)
#93 := [def-axiom]: #92
#113 := [unit-resolution #93 #110]: #90
#119 := [symm #113]: #118
#116 := (= #73 #65)
#114 := (= #65 #73)
#115 := [th-lemma arith eq-propagate 1 1 #110 #109]: #114
#117 := [symm #115]: #116
#121 := [trans #117 #119]: #120
#122 := [trans #121 #112]: #74
#123 := [unit-resolution #108 #122]: false
#125 := [lemma #123]: #124
#131 := [unit-resolution #125 #130]: #59
#132 := [unit-resolution #89 #131]: #91
#134 := (or #133 #106)
#135 := [th-lemma arith triangle-eq]: #134
#136 := [unit-resolution #135 #132]: #106
#137 := [th-lemma arith farkas 1 1 #127 #136]: false
#138 := [lemma #137]: #87
#144 := (or #58 #9)
#145 := [th-lemma arith farkas 1 1]: #144
#146 := [unit-resolution #145 #139]: #9
#98 := (or #52 #94)
#96 := (or #52 #94 #95)
#97 := [def-axiom]: #96
#99 := [unit-resolution #97 #84]: #98
#147 := [unit-resolution #99 #146]: #94
#149 := (or #74 #148 #126)
#150 := [th-lemma arith triangle-eq]: #149
#151 := [unit-resolution #150 #147 #138]: #148
#152 := [th-lemma arith farkas 1 1 #151 #143]: false
#153 := [lemma #152]: #58
#157 := [unit-resolution #93 #153]: #90
#158 := (not #90)
#159 := (or #158 #155)
#160 := [th-lemma arith triangle-eq]: #159
#161 := [unit-resolution #160 #157]: #155
#162 := [unit-resolution #125 #153]: #74
#163 := (or #94 #86)
#164 := [th-lemma arith triangle-eq]: #163
#165 := [unit-resolution #164 #162]: #86
#166 := [unit-resolution #99 #162]: #52
[th-lemma arith farkas 2 1 1 #166 #165 #161]: false
unsat
170a46884b0c93a265ba9103f7b32d3822f6590a 116 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#7 := f3
#37 := -1::Real
#38 := (* -1::Real f3)
#64 := (>= f3 0::Real)
#71 := (if #64 f3 #38)
#85 := (* -1::Real #71)
#125 := (+ #38 #85)
#141 := (<= #125 0::Real)
#113 := (= #38 #71)
#65 := (not #64)
#123 := (+ f3 #85)
#124 := (<= #123 0::Real)
#112 := (= f3 #71)
#126 := [hypothesis]: #64
#108 := (or #65 #112)
#109 := [def-axiom]: #108
#127 := [unit-resolution #109 #126]: #112
#128 := (not #112)
#129 := (or #128 #124)
#130 := [th-lemma arith triangle-eq]: #129
#131 := [unit-resolution #130 #127]: #124
#80 := (>= #71 0::Real)
#79 := (not #80)
#91 := (if #80 #71 #85)
#110 := (= #71 #91)
#134 := (not #110)
#96 := (= #91 #71)
#99 := (not #96)
#135 := (iff #99 #134)
#132 := (iff #96 #110)
#133 := [commutativity]: #132
#136 := [monotonicity #133]: #135
#10 := (- f3)
#9 := (< f3 0::Real)
#11 := (if #9 #10 f3)
#13 := (- #11)
#12 := (< #11 0::Real)
#14 := (if #12 #13 #11)
#15 := (= #14 #11)
#16 := (not #15)
#102 := (iff #16 #99)
#41 := (if #9 #38 f3)
#50 := (* -1::Real #41)
#44 := (< #41 0::Real)
#55 := (if #44 #50 #41)
#58 := (= #55 #41)
#61 := (not #58)
#100 := (iff #61 #99)
#97 := (iff #58 #96)
#74 := (= #41 #71)
#68 := (if #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #9 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#94 := (= #55 #91)
#88 := (if #79 #85 #71)
#92 := (= #88 #91)
#93 := [rewrite]: #92
#89 := (= #55 #88)
#86 := (= #50 #85)
#87 := [monotonicity #75]: #86
#83 := (iff #44 #79)
#76 := (< #71 0::Real)
#81 := (iff #76 #79)
#82 := [rewrite]: #81
#77 := (iff #44 #76)
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#90 := [monotonicity #84 #87 #75]: #89
#95 := [trans #90 #93]: #94
#98 := [monotonicity #95 #75]: #97
#101 := [monotonicity #98]: #100
#62 := (iff #16 #61)
#59 := (iff #15 #58)
#42 := (= #11 #41)
#39 := (= #10 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#56 := (= #14 #55)
#53 := (= #13 #50)
#47 := (- #41)
#51 := (= #47 #50)
#52 := [rewrite]: #51
#48 := (= #13 #47)
#49 := [monotonicity #43]: #48
#54 := [trans #49 #52]: #53
#45 := (iff #12 #44)
#46 := [monotonicity #43]: #45
#57 := [monotonicity #46 #54 #43]: #56
#60 := [monotonicity #57 #43]: #59
#63 := [monotonicity #60]: #62
#103 := [trans #63 #101]: #102
#36 := [asserted]: #16
#104 := [mp #36 #103]: #99
#137 := [mp #104 #136]: #134
#114 := (or #79 #110)
#115 := [def-axiom]: #114
#138 := [unit-resolution #115 #137]: #79
#139 := [th-lemma arith farkas -1 1 1 #126 #138 #131]: false
#140 := [lemma #139]: #65
#106 := (or #64 #113)
#107 := [def-axiom]: #106
#143 := [unit-resolution #107 #140]: #113
#144 := (not #113)
#145 := (or #144 #141)
#146 := [th-lemma arith triangle-eq]: #145
#147 := [unit-resolution #146 #143]: #141
[th-lemma arith farkas 1 1 1 #140 #138 #147]: false
unsat
343b8694d01ceec9aadefda1d9bec8e7b858a0bc 57 0
#2 := false
#15 := 0::Real
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Real)
#42 := (if #39 f3 f4)
#50 := (* -1::Real #42)
#59 := (+ f4 #50)
#73 := (>= #59 0::Real)
#63 := (= f4 #42)
#64 := (not #39)
#62 := (= f3 #42)
#67 := (not #62)
#51 := (+ f3 #50)
#49 := (>= #51 0::Real)
#55 := (not #49)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#11 := (<= #10 f3)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #49)
#45 := (<= #42 f3)
#48 := (iff #45 #49)
#52 := [rewrite]: #48
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#66 := [hypothesis]: #62
#68 := (or #67 #49)
#69 := [th-lemma arith triangle-eq]: #68
#70 := [unit-resolution #69 #66 #58]: false
#71 := [lemma #70]: #67
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#74 := [unit-resolution #60 #71]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#75 := [unit-resolution #35 #74]: #63
#76 := (not #63)
#77 := (or #76 #73)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #75]: #73
[th-lemma arith farkas 1 1 1 #58 #74 #79]: false
unsat
488e735c5af613e8d7cafc6137d916a7f9ebe0e4 57 0
#2 := false
#15 := 0::Real
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Real)
#42 := (if #39 f3 f4)
#49 := (* -1::Real #42)
#50 := (+ f4 #49)
#48 := (>= #50 0::Real)
#55 := (not #48)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#11 := (<= #10 f4)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #48)
#45 := (<= #42 f4)
#51 := (iff #45 #48)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#63 := (= f4 #42)
#64 := (not #39)
#68 := [hypothesis]: #39
#59 := (+ f3 #49)
#67 := (>= #59 0::Real)
#62 := (= f3 #42)
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#69 := [unit-resolution #60 #68]: #62
#70 := (not #62)
#71 := (or #70 #67)
#72 := [th-lemma arith triangle-eq]: #71
#73 := [unit-resolution #72 #69]: #67
#74 := [th-lemma arith farkas -1 1 1 #73 #58 #68]: false
#75 := [lemma #74]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#76 := [unit-resolution #35 #75]: #63
#77 := (not #63)
#78 := (or #77 #48)
#79 := [th-lemma arith triangle-eq]: #78
[unit-resolution #79 #76 #58]: false
unsat
be2bc9d6a85f1d0753b3453c53165fb3cf75d021 103 0
#2 := false
#20 := 0::Real
decl f5 :: Real
#10 := f5
decl f4 :: Real
#8 := f4
#46 := -1::Real
#55 := (* -1::Real f5)
#65 := (+ f4 #55)
#66 := (<= #65 0::Real)
#69 := (if #66 f4 f5)
#77 := (* -1::Real #69)
decl f3 :: Real
#7 := f3
#78 := (+ f3 #77)
#76 := (>= #78 0::Real)
#75 := (not #76)
#56 := (+ f3 #55)
#54 := (>= #56 0::Real)
#53 := (not #54)
#49 := (* -1::Real f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Real)
#47 := (not #48)
#59 := (and #47 #53)
#62 := (not #59)
#83 := (or #62 #75)
#86 := (not #83)
#13 := (<= f4 f5)
#14 := (if #13 f4 f5)
#15 := (< f3 #14)
#11 := (< f3 f5)
#9 := (< f3 f4)
#12 := (and #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#89 := (iff #17 #86)
#39 := (not #12)
#40 := (or #39 #15)
#43 := (not #40)
#87 := (iff #43 #86)
#84 := (iff #40 #83)
#81 := (iff #15 #75)
#72 := (< f3 #69)
#79 := (iff #72 #75)
#80 := [rewrite]: #79
#73 := (iff #15 #72)
#70 := (= #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#82 := [trans #74 #80]: #81
#63 := (iff #39 #62)
#60 := (iff #12 #59)
#57 := (iff #11 #53)
#58 := [rewrite]: #57
#51 := (iff #9 #47)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#85 := [monotonicity #64 #82]: #84
#88 := [monotonicity #85]: #87
#44 := (iff #17 #43)
#41 := (iff #16 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#90 := [trans #45 #88]: #89
#38 := [asserted]: #17
#91 := [mp #38 #90]: #86
#95 := [not-or-elim #91]: #76
#92 := [not-or-elim #91]: #59
#94 := [and-elim #92]: #53
#100 := (+ f5 #77)
#117 := (<= #100 0::Real)
#106 := (= f5 #69)
#107 := (not #66)
#105 := (= f4 #69)
#112 := (not #105)
#102 := (+ f4 #77)
#99 := (<= #102 0::Real)
#109 := (not #99)
#93 := [and-elim #92]: #47
#97 := [hypothesis]: #99
#98 := [th-lemma arith farkas -1 -1 1 #97 #93 #95]: false
#110 := [lemma #98]: #109
#111 := [hypothesis]: #105
#113 := (or #112 #99)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111 #110]: false
#116 := [lemma #115]: #112
#108 := (or #107 #105)
#103 := [def-axiom]: #108
#119 := [unit-resolution #103 #116]: #107
#104 := (or #66 #106)
#101 := [def-axiom]: #104
#120 := [unit-resolution #101 #119]: #106
#121 := (not #106)
#122 := (or #121 #117)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #117
[th-lemma arith farkas -1 -1 1 #124 #94 #95]: false
unsat
8a834764014f7a0fc98f83812b7df5e9e71d3228 94 0
#2 := false
decl f3 :: Real
#7 := f3
decl f4 :: Real
#8 := f4
#17 := 0::Real
#38 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#48 := (>= #40 0::Real)
#50 := (if #48 f4 f3)
#41 := (<= #40 0::Real)
#44 := (if #41 f3 f4)
#53 := (= #44 #50)
#60 := (= f4 #50)
#65 := (not #41)
#63 := (= f3 #44)
#105 := (not #63)
#67 := (= f3 #50)
#74 := (not #67)
#75 := [hypothesis]: #74
#71 := (or #48 #67)
#72 := [def-axiom]: #71
#76 := [unit-resolution #72 #75]: #48
#68 := (not #48)
#69 := (or #68 #60)
#70 := [def-axiom]: #69
#77 := [unit-resolution #70 #76]: #60
#73 := (= f3 f4)
#64 := (= f4 #44)
#87 := (not #64)
#56 := (not #53)
#88 := (iff #56 #87)
#85 := (iff #53 #64)
#83 := (iff #64 #53)
#78 := (= #50 #44)
#81 := (iff #78 #53)
#82 := [commutativity]: #81
#79 := (iff #64 #78)
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#86 := [symm #84]: #85
#89 := [monotonicity #86]: #88
#11 := (<= f4 f3)
#12 := (if #11 f4 f3)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#57 := (iff #14 #56)
#54 := (iff #13 #53)
#51 := (= #12 #50)
#47 := (iff #11 #48)
#49 := [rewrite]: #47
#52 := [monotonicity #49]: #51
#45 := (= #10 #44)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#55 := [monotonicity #46 #52]: #54
#58 := [monotonicity #55]: #57
#35 := [asserted]: #14
#59 := [mp #35 #58]: #56
#90 := [mp #59 #89]: #87
#62 := (or #41 #64)
#37 := [def-axiom]: #62
#91 := [unit-resolution #37 #90]: #41
#94 := (or #73 #65)
#92 := (or #73 #65 #68)
#93 := [th-lemma arith triangle-eq]: #92
#95 := [unit-resolution #93 #76]: #94
#96 := [unit-resolution #95 #91]: #73
#97 := [trans #96 #77]: #67
#98 := [unit-resolution #75 #97]: false
#99 := [lemma #98]: #67
#101 := (= #44 f3)
#100 := [hypothesis]: #63
#102 := [symm #100]: #101
#103 := [trans #102 #99]: #53
#104 := [unit-resolution #59 #103]: false
#106 := [lemma #104]: #105
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#107 := [unit-resolution #61 #106]: #65
#109 := (or #48 #41)
#110 := [th-lemma arith farkas 1 1]: #109
#111 := [unit-resolution #110 #107]: #48
#112 := [unit-resolution #70 #111]: #60
#115 := (= #44 f4)
#108 := [unit-resolution #37 #107]: #64
#116 := [symm #108]: #115
#117 := [trans #116 #112]: #53
[unit-resolution #59 #117]: false
unsat
565ea5cad625ceae443c2aa9665a6caa8c4432ef 53 0
#2 := false
#7 := 0::Real
decl f3 :: Real
#8 := f3
#10 := (<= f3 0::Real)
#11 := (if #10 f3 0::Real)
#12 := (= #11 0::Real)
#63 := (= f3 0::Real)
#58 := (not #12)
#44 := (>= f3 0::Real)
#45 := (not #44)
#48 := (or #45 #12)
#51 := (not #48)
#9 := (<= 0::Real f3)
#13 := (implies #9 #12)
#14 := (not #13)
#54 := (iff #14 #51)
#35 := (not #9)
#36 := (or #35 #12)
#39 := (not #36)
#52 := (iff #39 #51)
#49 := (iff #36 #48)
#46 := (iff #35 #45)
#42 := (iff #9 #44)
#43 := [rewrite]: #42
#47 := [monotonicity #43]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#55 := [trans #41 #53]: #54
#34 := [asserted]: #14
#56 := [mp #34 #55]: #51
#59 := [not-or-elim #56]: #58
#65 := (or #10 #12)
#66 := [def-axiom]: #65
#64 := [unit-resolution #66 #59]: #10
#57 := [not-or-elim #56]: #44
#68 := (not #10)
#61 := (or #63 #68 #45)
#62 := [th-lemma arith triangle-eq]: #61
#71 := [unit-resolution #62 #57 #64]: #63
#73 := (= #11 f3)
#67 := (= f3 #11)
#69 := (or #68 #67)
#70 := [def-axiom]: #69
#72 := [unit-resolution #70 #64]: #67
#74 := [symm #72]: #73
#75 := [trans #74 #71]: #12
[unit-resolution #59 #75]: false
unsat
6b8315813f4cc23842e26ce083c1ccaeb3b9f4ea 124 0
#2 := false
#12 := 0::Real
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#38 := -1::Real
#40 := (* -1::Real f4)
#53 := (+ f3 #40)
#54 := (<= #53 0::Real)
#57 := (if #54 f3 f4)
#105 := (* -1::Real #57)
#106 := (+ f3 #105)
#108 := (>= #106 0::Real)
#93 := (= f3 #57)
#107 := (+ f4 #105)
#125 := (>= #107 0::Real)
#94 := (= f4 #57)
#95 := (not #54)
#136 := [hypothesis]: #95
#92 := (or #54 #94)
#89 := [def-axiom]: #92
#137 := [unit-resolution #89 #136]: #94
#128 := (not #94)
#129 := (or #128 #125)
#130 := [th-lemma arith triangle-eq]: #129
#138 := [unit-resolution #130 #137]: #125
#39 := (* -1::Real f3)
#41 := (+ #39 #40)
#11 := (+ f3 f4)
#60 := (>= #11 0::Real)
#67 := (if #60 #11 #41)
#75 := (* -1::Real #67)
#104 := (+ #41 #75)
#124 := (<= #104 0::Real)
#97 := (= #41 #67)
#61 := (not #60)
#109 := [hypothesis]: #60
#76 := (+ #57 #75)
#77 := (<= #76 0::Real)
#82 := (not #77)
#14 := (- #11)
#13 := (< #11 0::Real)
#15 := (if #13 #14 #11)
#9 := (<= f3 f4)
#10 := (if #9 f3 f4)
#16 := (<= #10 #15)
#17 := (not #16)
#85 := (iff #17 #82)
#44 := (if #13 #41 #11)
#47 := (<= #10 #44)
#50 := (not #47)
#83 := (iff #50 #82)
#80 := (iff #47 #77)
#72 := (<= #57 #67)
#78 := (iff #72 #77)
#79 := [rewrite]: #78
#73 := (iff #47 #72)
#70 := (= #44 #67)
#64 := (if #61 #41 #11)
#68 := (= #64 #67)
#69 := [rewrite]: #68
#65 := (= #44 #64)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#71 := [trans #66 #69]: #70
#58 := (= #10 #57)
#55 := (iff #9 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#74 := [monotonicity #59 #71]: #73
#81 := [trans #74 #79]: #80
#84 := [monotonicity #81]: #83
#51 := (iff #17 #50)
#48 := (iff #16 #47)
#45 := (= #15 #44)
#42 := (= #14 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#86 := [trans #52 #84]: #85
#37 := [asserted]: #17
#87 := [mp #37 #86]: #82
#122 := (or #95 #61)
#110 := [hypothesis]: #54
#96 := (or #95 #93)
#91 := [def-axiom]: #96
#111 := [unit-resolution #91 #110]: #93
#112 := (not #93)
#113 := (or #112 #108)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111]: #108
#102 := (+ #11 #75)
#103 := (<= #102 0::Real)
#90 := (= #11 #67)
#98 := (or #61 #90)
#99 := [def-axiom]: #98
#116 := [unit-resolution #99 #109]: #90
#117 := (not #90)
#118 := (or #117 #103)
#119 := [th-lemma arith triangle-eq]: #118
#120 := [unit-resolution #119 #116]: #103
#121 := [th-lemma arith farkas 2 2 2 1 1 #120 #115 #87 #110 #109]: false
#123 := [lemma #121]: #122
#126 := [unit-resolution #123 #109]: #95
#127 := [unit-resolution #89 #126]: #94
#131 := [unit-resolution #130 #127]: #125
#132 := [th-lemma arith farkas 2 2 1 2 1 #120 #131 #126 #87 #109]: false
#133 := [lemma #132]: #61
#100 := (or #60 #97)
#101 := [def-axiom]: #100
#139 := [unit-resolution #101 #133]: #97
#140 := (not #97)
#141 := (or #140 #124)
#142 := [th-lemma arith triangle-eq]: #141
#143 := [unit-resolution #142 #139]: #124
#144 := [th-lemma arith farkas 3/2 1/2 1 1 1 #133 #136 #87 #143 #138]: false
#145 := [lemma #144]: #54
#146 := [unit-resolution #91 #145]: #93
#147 := [unit-resolution #114 #146]: #108
[th-lemma arith farkas 1/2 3/2 1 1 1 #145 #133 #87 #143 #147]: false
unsat
af561b282d1827f310ac70556912361f746c755e 57 0
#2 := false
#15 := 0::Real
decl f3 :: Real
#7 := f3
decl f4 :: Real
#8 := f4
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#39 := (<= #38 0::Real)
#42 := (if #39 f4 f3)
#48 := (* -1::Real #42)
#49 := (+ f3 #48)
#50 := (<= #49 0::Real)
#55 := (not #50)
#9 := (<= f3 f4)
#10 := (if #9 f4 f3)
#11 := (<= f3 #10)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #50)
#45 := (<= f3 #42)
#51 := (iff #45 #50)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#63 := (= f3 #42)
#64 := (not #39)
#68 := [hypothesis]: #39
#59 := (+ f4 #48)
#66 := (<= #59 0::Real)
#62 := (= f4 #42)
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#69 := [unit-resolution #60 #68]: #62
#70 := (not #62)
#71 := (or #70 #66)
#72 := [th-lemma arith triangle-eq]: #71
#73 := [unit-resolution #72 #69]: #66
#74 := [th-lemma arith farkas 1 -1 1 #73 #58 #68]: false
#75 := [lemma #74]: #64
#61 := (or #39 #63)
#35 := [def-axiom]: #61
#76 := [unit-resolution #35 #75]: #63
#77 := (not #63)
#78 := (or #77 #50)
#79 := [th-lemma arith triangle-eq]: #78
[unit-resolution #79 #76 #58]: false
unsat
c76d8e5e48d2562cff8ec7cba9425b7fcddfd09a 57 0
#2 := false
#15 := 0::Real
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#36 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#38 := (>= #40 0::Real)
#42 := (if #38 f3 f4)
#48 := (* -1::Real #42)
#59 := (+ f4 #48)
#72 := (<= #59 0::Real)
#63 := (= f4 #42)
#64 := (not #38)
#62 := (= f3 #42)
#67 := (not #62)
#49 := (+ f3 #48)
#50 := (<= #49 0::Real)
#55 := (not #50)
#9 := (<= f4 f3)
#10 := (if #9 f3 f4)
#11 := (<= f3 #10)
#12 := (not #11)
#56 := (iff #12 #55)
#53 := (iff #11 #50)
#45 := (<= f3 #42)
#51 := (iff #45 #50)
#52 := [rewrite]: #51
#46 := (iff #11 #45)
#43 := (= #10 #42)
#37 := (iff #9 #38)
#41 := [rewrite]: #37
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#33 := [asserted]: #12
#58 := [mp #33 #57]: #55
#66 := [hypothesis]: #62
#68 := (or #67 #50)
#69 := [th-lemma arith triangle-eq]: #68
#70 := [unit-resolution #69 #66 #58]: false
#71 := [lemma #70]: #67
#65 := (or #64 #62)
#60 := [def-axiom]: #65
#74 := [unit-resolution #60 #71]: #64
#61 := (or #38 #63)
#35 := [def-axiom]: #61
#75 := [unit-resolution #35 #74]: #63
#76 := (not #63)
#77 := (or #76 #72)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #75]: #72
[th-lemma arith farkas 1 1 1 #58 #74 #79]: false
unsat
309c80c26e888c63759e9988268f1cdcc26ef28b 103 0
#2 := false
#20 := 0::Real
decl f3 :: Real
#7 := f3
decl f5 :: Real
#10 := f5
#46 := -1::Real
#53 := (* -1::Real f5)
#65 := (+ f3 #53)
#66 := (<= #65 0::Real)
#69 := (if #66 f5 f3)
#75 := (* -1::Real #69)
decl f4 :: Real
#8 := f4
#76 := (+ f4 #75)
#77 := (<= #76 0::Real)
#78 := (not #77)
#54 := (+ f4 #53)
#55 := (<= #54 0::Real)
#56 := (not #55)
#49 := (* -1::Real f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Real)
#47 := (not #48)
#59 := (and #47 #56)
#62 := (not #59)
#83 := (or #62 #78)
#86 := (not #83)
#13 := (<= f3 f5)
#14 := (if #13 f5 f3)
#15 := (< #14 f4)
#11 := (< f5 f4)
#9 := (< f3 f4)
#12 := (and #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#89 := (iff #17 #86)
#39 := (not #12)
#40 := (or #39 #15)
#43 := (not #40)
#87 := (iff #43 #86)
#84 := (iff #40 #83)
#81 := (iff #15 #78)
#72 := (< #69 f4)
#79 := (iff #72 #78)
#80 := [rewrite]: #79
#73 := (iff #15 #72)
#70 := (= #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [monotonicity #71]: #73
#82 := [trans #74 #80]: #81
#63 := (iff #39 #62)
#60 := (iff #12 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#51 := (iff #9 #47)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#85 := [monotonicity #64 #82]: #84
#88 := [monotonicity #85]: #87
#44 := (iff #17 #43)
#41 := (iff #16 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#90 := [trans #45 #88]: #89
#38 := [asserted]: #17
#91 := [mp #38 #90]: #86
#95 := [not-or-elim #91]: #77
#92 := [not-or-elim #91]: #59
#93 := [and-elim #92]: #47
#99 := (+ f3 #75)
#118 := (>= #99 0::Real)
#106 := (= f3 #69)
#107 := (not #66)
#105 := (= f5 #69)
#112 := (not #105)
#102 := (+ f5 #75)
#100 := (>= #102 0::Real)
#109 := (not #100)
#94 := [and-elim #92]: #56
#97 := [hypothesis]: #100
#98 := [th-lemma arith farkas -1 -1 1 #97 #94 #95]: false
#110 := [lemma #98]: #109
#111 := [hypothesis]: #105
#113 := (or #112 #100)
#114 := [th-lemma arith triangle-eq]: #113
#115 := [unit-resolution #114 #111 #110]: false
#116 := [lemma #115]: #112
#108 := (or #107 #105)
#103 := [def-axiom]: #108
#119 := [unit-resolution #103 #116]: #107
#104 := (or #66 #106)
#101 := [def-axiom]: #104
#120 := [unit-resolution #101 #119]: #106
#121 := (not #106)
#122 := (or #121 #118)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #118
[th-lemma arith farkas -1 1 1 #124 #93 #95]: false
unsat
23c443b999f944a6345020be737a4a7b628ff638 96 0
#2 := false
decl f4 :: Real
#8 := f4
decl f3 :: Real
#7 := f3
#17 := 0::Real
#38 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#48 := (>= #40 0::Real)
#50 := (if #48 f3 f4)
#41 := (<= #40 0::Real)
#44 := (if #41 f4 f3)
#53 := (= #44 #50)
#60 := (= f3 #50)
#65 := (not #41)
#63 := (= f4 #44)
#107 := (not #63)
#67 := (= f4 #50)
#74 := (not #67)
#75 := [hypothesis]: #74
#71 := (or #48 #67)
#72 := [def-axiom]: #71
#76 := [unit-resolution #72 #75]: #48
#68 := (not #48)
#69 := (or #68 #60)
#70 := [def-axiom]: #69
#77 := [unit-resolution #70 #76]: #60
#97 := (= f4 f3)
#73 := (= f3 f4)
#64 := (= f3 #44)
#87 := (not #64)
#56 := (not #53)
#88 := (iff #56 #87)
#85 := (iff #53 #64)
#83 := (iff #64 #53)
#78 := (= #50 #44)
#81 := (iff #78 #53)
#82 := [commutativity]: #81
#79 := (iff #64 #78)
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#86 := [symm #84]: #85
#89 := [monotonicity #86]: #88
#11 := (<= f4 f3)
#12 := (if #11 f3 f4)
#9 := (<= f3 f4)
#10 := (if #9 f4 f3)
#13 := (= #10 #12)
#14 := (not #13)
#57 := (iff #14 #56)
#54 := (iff #13 #53)
#51 := (= #12 #50)
#47 := (iff #11 #48)
#49 := [rewrite]: #47
#52 := [monotonicity #49]: #51
#45 := (= #10 #44)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#55 := [monotonicity #46 #52]: #54
#58 := [monotonicity #55]: #57
#35 := [asserted]: #14
#59 := [mp #35 #58]: #56
#90 := [mp #59 #89]: #87
#62 := (or #41 #64)
#37 := [def-axiom]: #62
#91 := [unit-resolution #37 #90]: #41
#94 := (or #73 #65)
#92 := (or #73 #65 #68)
#93 := [th-lemma arith triangle-eq]: #92
#95 := [unit-resolution #93 #76]: #94
#96 := [unit-resolution #95 #91]: #73
#98 := [symm #96]: #97
#99 := [trans #98 #77]: #67
#100 := [unit-resolution #75 #99]: false
#101 := [lemma #100]: #67
#103 := (= #44 f4)
#102 := [hypothesis]: #63
#104 := [symm #102]: #103
#105 := [trans #104 #101]: #53
#106 := [unit-resolution #59 #105]: false
#108 := [lemma #106]: #107
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#109 := [unit-resolution #61 #108]: #65
#111 := (or #48 #41)
#112 := [th-lemma arith farkas 1 1]: #111
#113 := [unit-resolution #112 #109]: #48
#114 := [unit-resolution #70 #113]: #60
#117 := (= #44 f3)
#110 := [unit-resolution #37 #109]: #64
#118 := [symm #110]: #117
#119 := [trans #118 #114]: #53
[unit-resolution #59 #119]: false
unsat
8fad80a1b745334993da3fb8733536800cca704f 60 0
#2 := false
decl f3 :: Real
#8 := f3
#7 := 0::Real
#10 := (<= f3 0::Real)
#11 := (if #10 0::Real f3)
#68 := (= f3 #11)
#80 := (= 0::Real #11)
#67 := (= #11 0::Real)
#71 := (not #68)
#12 := (= #11 f3)
#58 := (not #12)
#72 := (iff #58 #71)
#61 := (iff #12 #68)
#62 := [commutativity]: #61
#73 := [monotonicity #62]: #72
#44 := (>= f3 0::Real)
#45 := (not #44)
#48 := (or #45 #12)
#51 := (not #48)
#9 := (<= 0::Real f3)
#13 := (implies #9 #12)
#14 := (not #13)
#54 := (iff #14 #51)
#35 := (not #9)
#36 := (or #35 #12)
#39 := (not #36)
#52 := (iff #39 #51)
#49 := (iff #36 #48)
#46 := (iff #35 #45)
#42 := (iff #9 #44)
#43 := [rewrite]: #42
#47 := [monotonicity #43]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#55 := [trans #41 #53]: #54
#34 := [asserted]: #14
#56 := [mp #34 #55]: #51
#59 := [not-or-elim #56]: #58
#74 := [mp #59 #73]: #71
#66 := (or #10 #68)
#63 := [def-axiom]: #66
#75 := [unit-resolution #63 #74]: #10
#69 := (not #10)
#70 := (or #69 #67)
#65 := [def-axiom]: #70
#76 := [unit-resolution #65 #75]: #67
#81 := [symm #76]: #80
#64 := (= f3 0::Real)
#57 := [not-or-elim #56]: #44
#77 := (or #64 #69 #45)
#78 := [th-lemma arith triangle-eq]: #77
#79 := [unit-resolution #78 #57 #75]: #64
#82 := [trans #79 #81]: #68
[unit-resolution #74 #82]: false
unsat
11277aae59b3fc835742651d4832ca0de4c045ff 214 0
#2 := false
#8 := 0::Real
decl f4 :: Real
#13 := f4
#42 := -1::Real
#57 := (* -1::Real f4)
#93 := (>= f4 0::Real)
#100 := (if #93 f4 #57)
#105 := (* -1::Real #100)
#160 := (+ #57 #105)
#182 := (<= #160 0::Real)
#136 := (= #57 #100)
#94 := (not #93)
decl f3 :: Real
#7 := f3
#111 := (+ f3 #57)
#112 := (<= #111 0::Real)
#115 := (if #112 f4 f3)
#154 := (* -1::Real #115)
#155 := (+ f4 #154)
#156 := (<= #155 0::Real)
#157 := (+ f3 #154)
#192 := (<= #157 0::Real)
#148 := (= f3 #115)
#149 := (not #112)
#147 := (= f4 #115)
#194 := [hypothesis]: #112
#150 := (or #149 #147)
#151 := [def-axiom]: #150
#195 := [unit-resolution #151 #194]: #147
#196 := (not #147)
#197 := (or #196 #156)
#198 := [th-lemma arith triangle-eq]: #197
#199 := [unit-resolution #198 #195]: #156
#178 := (not #156)
#190 := (or #94 #178)
#158 := (+ f4 #105)
#159 := (<= #158 0::Real)
#135 := (= f4 #100)
#164 := [hypothesis]: #93
#143 := (or #94 #135)
#144 := [def-axiom]: #143
#165 := [unit-resolution #144 #164]: #135
#166 := (not #135)
#167 := (or #166 #159)
#168 := [th-lemma arith triangle-eq]: #167
#169 := [unit-resolution #168 #165]: #159
#78 := (>= f3 0::Real)
#79 := (not #78)
#176 := [hypothesis]: #156
#179 := (or #79 #94 #178)
#124 := (+ #100 #115)
#43 := (* -1::Real f3)
#85 := (if #78 f3 #43)
#125 := (+ #85 #124)
#122 := (>= #125 0::Real)
#128 := (not #122)
#18 := (<= f3 f4)
#19 := (if #18 f4 f3)
#15 := (- f4)
#14 := (< f4 0::Real)
#16 := (if #14 #15 f4)
#10 := (- f3)
#9 := (< f3 0::Real)
#11 := (if #9 #10 f3)
#12 := (- #11)
#17 := (- #12 #16)
#20 := (<= #17 #19)
#21 := (not #20)
#131 := (iff #21 #128)
#60 := (if #14 #57 f4)
#66 := (* -1::Real #60)
#46 := (if #9 #43 f3)
#52 := (* -1::Real #46)
#67 := (+ #52 #66)
#72 := (<= #67 #19)
#75 := (not #72)
#129 := (iff #75 #128)
#126 := (iff #72 #122)
#90 := (* -1::Real #85)
#108 := (+ #90 #105)
#118 := (<= #108 #115)
#121 := (iff #118 #122)
#123 := [rewrite]: #121
#119 := (iff #72 #118)
#116 := (= #19 #115)
#113 := (iff #18 #112)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#109 := (= #67 #108)
#106 := (= #66 #105)
#103 := (= #60 #100)
#97 := (if #94 #57 f4)
#101 := (= #97 #100)
#102 := [rewrite]: #101
#98 := (= #60 #97)
#95 := (iff #14 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#104 := [trans #99 #102]: #103
#107 := [monotonicity #104]: #106
#91 := (= #52 #90)
#88 := (= #46 #85)
#82 := (if #79 #43 f3)
#86 := (= #82 #85)
#87 := [rewrite]: #86
#83 := (= #46 #82)
#80 := (iff #9 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#110 := [monotonicity #92 #107]: #109
#120 := [monotonicity #110 #117]: #119
#127 := [trans #120 #123]: #126
#130 := [monotonicity #127]: #129
#76 := (iff #21 #75)
#73 := (iff #20 #72)
#70 := (= #17 #67)
#63 := (- #52 #60)
#68 := (= #63 #67)
#69 := [rewrite]: #68
#64 := (= #17 #63)
#61 := (= #16 #60)
#58 := (= #15 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#55 := (= #12 #52)
#49 := (- #46)
#53 := (= #49 #52)
#54 := [rewrite]: #53
#50 := (= #12 #49)
#47 := (= #11 #46)
#44 := (= #10 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#65 := [monotonicity #56 #62]: #64
#71 := [trans #65 #69]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#132 := [trans #77 #130]: #131
#41 := [asserted]: #21
#133 := [mp #41 #132]: #128
#161 := (+ f3 #90)
#162 := (<= #161 0::Real)
#139 := (= f3 #85)
#170 := [hypothesis]: #78
#141 := (or #79 #139)
#142 := [def-axiom]: #141
#171 := [unit-resolution #142 #170]: #139
#172 := (not #139)
#173 := (or #172 #162)
#174 := [th-lemma arith triangle-eq]: #173
#175 := [unit-resolution #174 #171]: #162
#177 := [th-lemma arith farkas -2 1 -1 1 1 1 #164 #176 #170 #175 #133 #169]: false
#180 := [lemma #177]: #179
#183 := [unit-resolution #180 #164 #176]: #79
#163 := (+ #43 #90)
#181 := (<= #163 0::Real)
#140 := (= #43 #85)
#137 := (or #78 #140)
#138 := [def-axiom]: #137
#184 := [unit-resolution #138 #183]: #140
#185 := (not #140)
#186 := (or #185 #181)
#187 := [th-lemma arith triangle-eq]: #186
#188 := [unit-resolution #187 #184]: #181
#189 := [th-lemma arith farkas 2 1 1 1 1 1 #164 #176 #133 #188 #183 #169]: false
#191 := [lemma #189]: #190
#200 := [unit-resolution #191 #199]: #94
#145 := (or #93 #136)
#146 := [def-axiom]: #145
#201 := [unit-resolution #146 #200]: #136
#202 := (not #136)
#203 := (or #202 #182)
#204 := [th-lemma arith triangle-eq]: #203
#205 := [unit-resolution #204 #201]: #182
#206 := (or #79 #149 #93)
#207 := [th-lemma arith assign-bounds 1 1]: #206
#208 := [unit-resolution #207 #200 #194]: #79
#209 := [unit-resolution #138 #208]: #140
#210 := [unit-resolution #187 #209]: #181
#211 := [th-lemma arith farkas 1 1 1 1 1 #199 #133 #210 #208 #205]: false
#212 := [lemma #211]: #149
#152 := (or #112 #148)
#153 := [def-axiom]: #152
#223 := [unit-resolution #153 #212]: #148
#224 := (not #148)
#225 := (or #224 #192)
#226 := [th-lemma arith triangle-eq]: #225
#227 := [unit-resolution #226 #223]: #192
#230 := (not #192)
#231 := (or #156 #112 #230)
#232 := [th-lemma arith assign-bounds 1 1]: #231
#233 := [unit-resolution #232 #212 #227]: #156
#234 := [unit-resolution #191 #233]: #94
#235 := [unit-resolution #146 #234]: #136
#236 := [unit-resolution #204 #235]: #182
#215 := [hypothesis]: #79
#216 := (or #94 #78 #112)
#217 := [th-lemma arith assign-bounds 1 1]: #216
#218 := [unit-resolution #217 #215 #212]: #94
#219 := [unit-resolution #146 #218]: #136
#220 := [unit-resolution #204 #219]: #182
#221 := [unit-resolution #138 #215]: #140
#222 := [unit-resolution #187 #221]: #181
#228 := [th-lemma arith farkas 1 1 1 1 1 1 #215 #212 #227 #133 #222 #220]: false
#229 := [lemma #228]: #78
#237 := [unit-resolution #142 #229]: #139
#238 := [unit-resolution #174 #237]: #162
[th-lemma arith farkas 1 1 1 1 1 1 #212 #227 #133 #229 #238 #236]: false
unsat
2becd4c16c00f4a8b711aba96699b51eb714fa29 18 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := (<= f3 f3)
#9 := (not #8)
#40 := (iff #9 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #9 #35)
#33 := (iff #8 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #9
[mp #30 #41]: false
unsat
ee2f03e2614b76303135a935f1f2b05f83a4efce 50 0
#2 := false
#18 := 0::Real
decl f4 :: Real
#8 := f4
#44 := -1::Real
#45 := (* -1::Real f4)
decl f3 :: Real
#7 := f3
#46 := (+ f3 #45)
#47 := (<= #46 0::Real)
#53 := -3::Real
#54 := (* -3::Real f4)
#10 := 3::Real
#11 := (* 3::Real f3)
#55 := (+ #11 #54)
#56 := (<= #55 0::Real)
#50 := (not #47)
#59 := (or #50 #56)
#62 := (not #59)
#12 := (* 3::Real f4)
#13 := (<= #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#65 := (iff #15 #62)
#37 := (not #9)
#38 := (or #37 #13)
#41 := (not #38)
#63 := (iff #41 #62)
#60 := (iff #38 #59)
#57 := (iff #13 #56)
#58 := [rewrite]: #57
#51 := (iff #37 #50)
#48 := (iff #9 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#66 := [trans #43 #64]: #65
#36 := [asserted]: #15
#67 := [mp #36 #66]: #62
#68 := [not-or-elim #67]: #47
#69 := (not #56)
#70 := [not-or-elim #67]: #69
[th-lemma arith farkas -1/3 1 #70 #68]: false
unsat
3d2fe72db9db1a875a3d783608c94c040b9afc1b 55 0
#2 := false
#18 := 0::Real
decl f4 :: Real
#8 := f4
#58 := -3::Real
#61 := (* -3::Real f4)
decl f3 :: Real
#7 := f3
#10 := 3::Real
#11 := (* 3::Real f3)
#62 := (+ #11 #61)
#60 := (>= #62 0::Real)
#59 := (not #60)
#44 := -1::Real
#47 := (* -1::Real f4)
#48 := (+ f3 #47)
#46 := (>= #48 0::Real)
#65 := (or #46 #59)
#68 := (not #65)
#12 := (* 3::Real f4)
#13 := (< #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#71 := (iff #15 #68)
#37 := (not #9)
#38 := (or #37 #13)
#41 := (not #38)
#69 := (iff #41 #68)
#66 := (iff #38 #65)
#63 := (iff #13 #59)
#64 := [rewrite]: #63
#56 := (iff #37 #46)
#45 := (not #46)
#51 := (not #45)
#54 := (iff #51 #46)
#55 := [rewrite]: #54
#52 := (iff #37 #51)
#49 := (iff #9 #45)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#67 := [monotonicity #57 #64]: #66
#70 := [monotonicity #67]: #69
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#72 := [trans #43 #70]: #71
#36 := [asserted]: #15
#73 := [mp #36 #72]: #68
#75 := [not-or-elim #73]: #60
#74 := [not-or-elim #73]: #45
[th-lemma arith farkas 3 1 #74 #75]: false
unsat
165755fec51f7e6c4b1e62511cb967090732b747 52 0
#2 := false
#15 := 0::Real
decl f4 :: Real
#8 := f4
#41 := -1::Real
#44 := (* -1::Real f4)
decl f3 :: Real
#7 := f3
#45 := (+ f3 #44)
#55 := (<= #45 0::Real)
#68 := (not #55)
#43 := (>= #45 0::Real)
#58 := (or #43 #55)
#61 := (not #58)
#10 := (<= f3 f4)
#9 := (< f3 f4)
#11 := (implies #9 #10)
#12 := (not #11)
#64 := (iff #12 #61)
#34 := (not #9)
#35 := (or #34 #10)
#38 := (not #35)
#62 := (iff #38 #61)
#59 := (iff #35 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#53 := (iff #34 #43)
#42 := (not #43)
#48 := (not #42)
#51 := (iff #48 #43)
#52 := [rewrite]: #51
#49 := (iff #34 #48)
#46 := (iff #9 #42)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#54 := [trans #50 #52]: #53
#60 := [monotonicity #54 #57]: #59
#63 := [monotonicity #60]: #62
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#65 := [trans #40 #63]: #64
#33 := [asserted]: #12
#66 := [mp #33 #65]: #61
#69 := [not-or-elim #66]: #68
#67 := [not-or-elim #66]: #42
#77 := (or #55 #43)
#78 := [th-lemma arith farkas 1 1]: #77
#79 := [unit-resolution #78 #67]: #55
[unit-resolution #79 #69]: false
unsat
33e0b153e51916a2167061300cc75c8e67ab4fda 15 0
#2 := false
decl f3 :: Real
#7 := f3
#8 := (< f3 f3)
#9 := (not #8)
#10 := (not #9)
#36 := (iff #10 false)
#34 := (iff #8 false)
#35 := [rewrite]: #34
#32 := (iff #10 #8)
#33 := [rewrite]: #32
#37 := [trans #33 #35]: #36
#31 := [asserted]: #10
[mp #31 #37]: false
unsat
2340fd8d860bd4e1165d0c23c1f96e5421c798e2 75 0
#2 := false
#18 := 0::Real
decl f5 :: Real
#10 := f5
#53 := -1::Real
#54 := (* -1::Real f5)
decl f4 :: Real
#8 := f4
#55 := (+ f4 #54)
#56 := (<= #55 0::Real)
decl f3 :: Real
#7 := f3
#62 := (+ f3 #54)
#63 := (<= #62 0::Real)
#59 := (not #56)
#66 := (* -1::Real f4)
#67 := (+ f3 #66)
#68 := (<= #67 0::Real)
#71 := (not #68)
#80 := (or #71 #59 #63)
#85 := (not #80)
#12 := (<= f3 f5)
#11 := (<= f4 f5)
#13 := (implies #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#88 := (iff #15 #85)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#86 := (iff #50 #85)
#83 := (iff #45 #80)
#74 := (or #59 #63)
#77 := (or #71 #74)
#81 := (iff #77 #80)
#82 := [rewrite]: #81
#78 := (iff #45 #77)
#75 := (iff #38 #74)
#64 := (iff #12 #63)
#65 := [rewrite]: #64
#60 := (iff #37 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#76 := [monotonicity #61 #65]: #75
#72 := (iff #44 #71)
#69 := (iff #9 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#79 := [monotonicity #73 #76]: #78
#84 := [trans #79 #82]: #83
#87 := [monotonicity #84]: #86
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#89 := [trans #52 #87]: #88
#36 := [asserted]: #15
#90 := [mp #36 #89]: #85
#92 := [not-or-elim #90]: #56
#93 := (not #63)
#94 := [not-or-elim #90]: #93
#91 := [not-or-elim #90]: #68
[th-lemma arith farkas 1 -1 1 #91 #94 #92]: false
unsat
8716c7aaa7f48c44ab9ce5531737a3b55fdf1e37 80 0
#2 := false
#18 := 0::Real
decl f5 :: Real
#10 := f5
#53 := -1::Real
#54 := (* -1::Real f5)
decl f4 :: Real
#8 := f4
#55 := (+ f4 #54)
#56 := (<= #55 0::Real)
decl f3 :: Real
#7 := f3
#62 := (+ f3 #54)
#63 := (<= #62 0::Real)
#59 := (not #56)
#68 := (* -1::Real f4)
#69 := (+ f3 #68)
#67 := (>= #69 0::Real)
#85 := (or #67 #59 #63)
#90 := (not #85)
#12 := (<= f3 f5)
#11 := (<= f4 f5)
#13 := (implies #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#93 := (iff #15 #90)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#91 := (iff #50 #90)
#88 := (iff #45 #85)
#79 := (or #59 #63)
#82 := (or #67 #79)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #45 #82)
#80 := (iff #38 #79)
#64 := (iff #12 #63)
#65 := [rewrite]: #64
#60 := (iff #37 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#81 := [monotonicity #61 #65]: #80
#77 := (iff #44 #67)
#66 := (not #67)
#72 := (not #66)
#75 := (iff #72 #67)
#76 := [rewrite]: #75
#73 := (iff #44 #72)
#70 := (iff #9 #66)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#84 := [monotonicity #78 #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#94 := [trans #52 #92]: #93
#36 := [asserted]: #15
#95 := [mp #36 #94]: #90
#97 := [not-or-elim #95]: #56
#96 := [not-or-elim #95]: #66
#98 := (not #63)
#99 := [not-or-elim #95]: #98
[th-lemma arith farkas 1 1 1 #99 #96 #97]: false
unsat
82e5c8e2d49baa3249133d0cc70e4f9710ed01cc 80 0
#2 := false
#18 := 0::Real
decl f5 :: Real
#10 := f5
#53 := -1::Real
#56 := (* -1::Real f5)
decl f3 :: Real
#7 := f3
#67 := (+ f3 #56)
#68 := (<= #67 0::Real)
#98 := (not #68)
decl f4 :: Real
#8 := f4
#57 := (+ f4 #56)
#55 := (>= #57 0::Real)
#71 := (* -1::Real f4)
#72 := (+ f3 #71)
#73 := (<= #72 0::Real)
#76 := (not #73)
#85 := (or #76 #55 #68)
#90 := (not #85)
#12 := (<= f3 f5)
#11 := (< f4 f5)
#13 := (implies #11 #12)
#9 := (<= f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#93 := (iff #15 #90)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#91 := (iff #50 #90)
#88 := (iff #45 #85)
#79 := (or #55 #68)
#82 := (or #76 #79)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #45 #82)
#80 := (iff #38 #79)
#69 := (iff #12 #68)
#70 := [rewrite]: #69
#65 := (iff #37 #55)
#54 := (not #55)
#60 := (not #54)
#63 := (iff #60 #55)
#64 := [rewrite]: #63
#61 := (iff #37 #60)
#58 := (iff #11 #54)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#81 := [monotonicity #66 #70]: #80
#77 := (iff #44 #76)
#74 := (iff #9 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#84 := [monotonicity #78 #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#94 := [trans #52 #92]: #93
#36 := [asserted]: #15
#95 := [mp #36 #94]: #90
#99 := [not-or-elim #95]: #98
#97 := [not-or-elim #95]: #54
#96 := [not-or-elim #95]: #73
[th-lemma arith farkas 1 1 1 #96 #97 #99]: false
unsat
54f206f7168f092b568f3c4ba80a32ed01dca4e9 85 0
#2 := false
#18 := 0::Real
decl f5 :: Real
#10 := f5
#53 := -1::Real
#56 := (* -1::Real f5)
decl f3 :: Real
#7 := f3
#69 := (+ f3 #56)
#68 := (>= #69 0::Real)
#67 := (not #68)
decl f4 :: Real
#8 := f4
#57 := (+ f4 #56)
#55 := (>= #57 0::Real)
#74 := (* -1::Real f4)
#75 := (+ f3 #74)
#73 := (>= #75 0::Real)
#91 := (or #73 #55 #67)
#96 := (not #91)
#12 := (< f3 f5)
#11 := (< f4 f5)
#13 := (implies #11 #12)
#9 := (< f3 f4)
#14 := (implies #9 #13)
#15 := (not #14)
#99 := (iff #15 #96)
#37 := (not #11)
#38 := (or #37 #12)
#44 := (not #9)
#45 := (or #44 #38)
#50 := (not #45)
#97 := (iff #50 #96)
#94 := (iff #45 #91)
#85 := (or #55 #67)
#88 := (or #73 #85)
#92 := (iff #88 #91)
#93 := [rewrite]: #92
#89 := (iff #45 #88)
#86 := (iff #38 #85)
#70 := (iff #12 #67)
#71 := [rewrite]: #70
#65 := (iff #37 #55)
#54 := (not #55)
#60 := (not #54)
#63 := (iff #60 #55)
#64 := [rewrite]: #63
#61 := (iff #37 #60)
#58 := (iff #11 #54)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#87 := [monotonicity #66 #71]: #86
#83 := (iff #44 #73)
#72 := (not #73)
#78 := (not #72)
#81 := (iff #78 #73)
#82 := [rewrite]: #81
#79 := (iff #44 #78)
#76 := (iff #9 #72)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#90 := [monotonicity #84 #87]: #89
#95 := [trans #90 #93]: #94
#98 := [monotonicity #95]: #97
#51 := (iff #15 #50)
#48 := (iff #14 #45)
#41 := (implies #9 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #14 #41)
#39 := (iff #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#100 := [trans #52 #98]: #99
#36 := [asserted]: #15
#101 := [mp #36 #100]: #96
#104 := [not-or-elim #101]: #68
#103 := [not-or-elim #101]: #54
#102 := [not-or-elim #101]: #72
[th-lemma arith farkas 1 1 1 #102 #103 #104]: false
unsat
8921a5763dbd9b6bdd641b747fbac9ee9c2dd42d 69 0
#2 := false
#19 := 0::Real
decl f5 :: Real
#10 := f5
#45 := -1::Real
#53 := (* -1::Real f5)
decl f3 :: Real
#7 := f3
#64 := (+ f3 #53)
#65 := (<= #64 0::Real)
#66 := (not #65)
decl f4 :: Real
#8 := f4
#54 := (+ f4 #53)
#52 := (>= #54 0::Real)
#55 := (not #52)
#48 := (* -1::Real f4)
#49 := (+ f3 #48)
#47 := (>= #49 0::Real)
#46 := (not #47)
#58 := (and #46 #55)
#61 := (not #58)
#76 := (or #61 #65)
#79 := (not #76)
#13 := (< f5 f3)
#14 := (not #13)
#11 := (< f4 f5)
#9 := (< f3 f4)
#12 := (and #9 #11)
#15 := (implies #12 #14)
#16 := (not #15)
#82 := (iff #16 #79)
#38 := (not #12)
#39 := (or #38 #14)
#42 := (not #39)
#80 := (iff #42 #79)
#77 := (iff #39 #76)
#74 := (iff #14 #65)
#69 := (not #66)
#72 := (iff #69 #65)
#73 := [rewrite]: #72
#70 := (iff #14 #69)
#67 := (iff #13 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#62 := (iff #38 #61)
#59 := (iff #12 #58)
#56 := (iff #11 #55)
#57 := [rewrite]: #56
#50 := (iff #9 #46)
#51 := [rewrite]: #50
#60 := [monotonicity #51 #57]: #59
#63 := [monotonicity #60]: #62
#78 := [monotonicity #63 #75]: #77
#81 := [monotonicity #78]: #80
#43 := (iff #16 #42)
#40 := (iff #15 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#83 := [trans #44 #81]: #82
#37 := [asserted]: #16
#84 := [mp #37 #83]: #79
#88 := [not-or-elim #84]: #66
#85 := [not-or-elim #84]: #58
#87 := [and-elim #85]: #55
#86 := [and-elim #85]: #46
[th-lemma arith farkas 1 1 1 #86 #87 #88]: false
unsat
ba3cc9798e91eb2c981ec527a914f13a432e9973 46 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f10 :: S2
#29 := f10
decl f6 :: (-> S6 S2 S5)
decl f9 :: S2
#27 := f9
decl f7 :: S6
#8 := f7
#28 := (f6 f7 f9)
#30 := (f5 #28 f10)
decl f4 :: S3
#7 := f4
#31 := (f3 f4 #30)
#32 := (= f9 #31)
#136 := (= #31 f9)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#552 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#553 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #552) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#556 := (iff #15 #553)
#554 := (iff #14 #14)
#555 := [refl]: #554
#557 := [quant-intro #555]: #556
#71 := (~ #15 #15)
#69 := (~ #14 #14)
#70 := [refl]: #69
#72 := [nnf-pos #70]: #71
#54 := [asserted]: #15
#59 := [mp~ #54 #72]: #15
#558 := [mp #59 #557]: #553
#223 := (not #553)
#138 := (or #223 #136)
#224 := [quant-inst #27 #29]: #138
#208 := [unit-resolution #224 #558]: #136
#544 := [symm #208]: #32
#33 := (not #32)
#57 := [asserted]: #33
[unit-resolution #57 #544]: false
unsat
a080cdd5a7725df3669f655e4a1ddc1f94e11bc0 46 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f9 :: S2
#27 := f9
decl f6 :: (-> S6 S2 S5)
decl f10 :: S2
#28 := f10
decl f7 :: S6
#8 := f7
#29 := (f6 f7 f10)
#30 := (f5 #29 f9)
decl f8 :: S3
#16 := f8
#31 := (f3 f8 #30)
#32 := (= f9 #31)
#137 := (= #31 f9)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#552 := (pattern #12)
#17 := (f3 f8 #12)
#18 := (= #17 #11)
#559 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #552) #18)
#19 := (forall (vars (?v0 S2) (?v1 S2)) #18)
#562 := (iff #19 #559)
#560 := (iff #18 #18)
#561 := [refl]: #560
#563 := [quant-intro #561]: #562
#61 := (~ #19 #19)
#60 := (~ #18 #18)
#73 := [refl]: #60
#62 := [nnf-pos #73]: #61
#55 := [asserted]: #19
#74 := [mp~ #55 #62]: #19
#564 := [mp #74 #563]: #559
#227 := (not #559)
#228 := (or #227 #137)
#225 := [quant-inst #28 #27]: #228
#208 := [unit-resolution #225 #564]: #137
#544 := [symm #208]: #32
#33 := (not #32)
#57 := [asserted]: #33
[unit-resolution #57 #544]: false
unsat
1b9aec38c55c28fabd079dac192f971ebc6b0be8 86 0
#2 := false
decl f5 :: (-> S5 S2 S4)
decl f9 :: S2
#27 := f9
decl f6 :: (-> S6 S2 S5)
decl f10 :: S2
#29 := f10
decl f7 :: S6
#8 := f7
#31 := (f6 f7 f10)
#32 := (f5 #31 f9)
#28 := (f6 f7 f9)
#30 := (f5 #28 f10)
#33 := (= #30 #32)
#541 := (= f10 f9)
#34 := (= f9 f10)
decl f3 :: (-> S3 S4 S2)
decl f4 :: S3
#7 := f4
#548 := (f3 f4 #32)
#221 := (= #548 f10)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#560 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#561 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #560) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#564 := (iff #15 #561)
#562 := (iff #14 #14)
#563 := [refl]: #562
#565 := [quant-intro #563]: #564
#79 := (~ #15 #15)
#77 := (~ #14 #14)
#78 := [refl]: #77
#80 := [nnf-pos #78]: #79
#57 := [asserted]: #15
#66 := [mp~ #57 #80]: #15
#566 := [mp #66 #565]: #561
#554 := (not #561)
#553 := (or #554 #221)
#559 := [quant-inst #29 #27]: #553
#208 := [unit-resolution #559 #566]: #221
#199 := (= f9 #548)
#233 := (f3 f4 #30)
#197 := (= #233 #548)
#144 := (not #34)
#549 := [hypothesis]: #144
#235 := (or #33 #34)
#61 := (not #33)
#62 := (iff #61 #34)
#35 := (iff #33 #34)
#36 := (not #35)
#63 := (iff #36 #62)
#64 := [rewrite]: #63
#60 := [asserted]: #36
#67 := [mp #60 #64]: #62
#230 := (not #62)
#223 := (or #33 #34 #230)
#234 := [def-axiom]: #223
#236 := [unit-resolution #234 #67]: #235
#209 := [unit-resolution #236 #549]: #33
#198 := [monotonicity #209]: #197
#193 := (= f9 #233)
#237 := (= #233 f9)
#210 := (or #554 #237)
#341 := [quant-inst #27 #29]: #210
#551 := [unit-resolution #341 #566]: #237
#535 := [symm #551]: #193
#200 := [trans #535 #198]: #199
#537 := [trans #200 #208]: #34
#538 := [unit-resolution #549 #537]: false
#539 := [lemma #538]: #34
#536 := [symm #539]: #541
#542 := (= #28 #31)
#179 := [monotonicity #539]: #542
#543 := [monotonicity #179 #536]: #33
#146 := (or #61 #144)
#145 := (or #61 #144 #230)
#231 := [def-axiom]: #145
#232 := [unit-resolution #231 #67]: #146
#540 := [unit-resolution #232 #539]: #61
[unit-resolution #540 #543]: false
unsat
ff46e648b8433631f11b66136c88e13e20652d28 147 0
#2 := false
decl f12 :: S2
#33 := f12
decl f10 :: S2
#29 := f10
#37 := (= f10 f12)
#91 := (not #37)
decl f11 :: S2
#31 := f11
decl f9 :: S2
#27 := f9
#36 := (= f9 f11)
#90 := (not #36)
#77 := (or #90 #91)
decl f5 :: (-> S5 S2 S4)
decl f6 :: (-> S6 S2 S5)
decl f7 :: S6
#8 := f7
#32 := (f6 f7 f11)
#34 := (f5 #32 f12)
#28 := (f6 f7 f9)
#30 := (f5 #28 f10)
#35 := (= #30 #34)
#78 := (not #77)
#570 := [hypothesis]: #78
#164 := (or #77 #37)
#250 := [def-axiom]: #164
#217 := [unit-resolution #250 #570]: #37
#219 := (= #28 #32)
#163 := (or #77 #36)
#249 := [def-axiom]: #163
#218 := [unit-resolution #249 #570]: #36
#556 := [monotonicity #218]: #219
#557 := [monotonicity #556 #217]: #35
#65 := (not #35)
#571 := (or #65 #77)
#95 := (iff #35 #77)
#38 := (and #36 #37)
#66 := (iff #65 #38)
#98 := (iff #66 #95)
#92 := (iff #65 #78)
#96 := (iff #92 #95)
#97 := [rewrite]: #96
#93 := (iff #66 #92)
#79 := (iff #38 #78)
#80 := [rewrite]: #79
#94 := [monotonicity #80]: #93
#99 := [trans #94 #97]: #98
#39 := (iff #35 #38)
#40 := (not #39)
#67 := (iff #40 #66)
#68 := [rewrite]: #67
#64 := [asserted]: #40
#71 := [mp #64 #68]: #66
#100 := [mp #71 #99]: #95
#242 := (not #95)
#256 := (or #65 #77 #242)
#235 := [def-axiom]: #256
#573 := [unit-resolution #235 #100]: #571
#212 := [unit-resolution #573 #570]: #65
#558 := [unit-resolution #212 #557]: false
#559 := [lemma #558]: #77
decl f3 :: (-> S3 S4 S2)
decl f4 :: S3
#7 := f4
#576 := (f3 f4 #34)
#577 := (= #576 f11)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#579 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#580 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #579) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#583 := (iff #15 #580)
#581 := (iff #14 #14)
#582 := [refl]: #581
#584 := [quant-intro #582]: #583
#83 := (~ #15 #15)
#81 := (~ #14 #14)
#82 := [refl]: #81
#84 := [nnf-pos #82]: #83
#61 := [asserted]: #15
#70 := [mp~ #61 #84]: #15
#585 := [mp #70 #584]: #580
#241 := (not #580)
#569 := (or #241 #577)
#228 := [quant-inst #31 #33]: #569
#560 := [unit-resolution #228 #585]: #577
#204 := (= f9 #576)
#229 := (f3 f4 #30)
#564 := (= #229 #576)
#255 := (or #35 #78)
#253 := (or #35 #78 #242)
#254 := [def-axiom]: #253
#252 := [unit-resolution #254 #100]: #255
#555 := [unit-resolution #252 #559]: #35
#203 := [monotonicity #555]: #564
#198 := (= f9 #229)
#360 := (= #229 f9)
#574 := (or #241 #360)
#575 := [quant-inst #27 #29]: #574
#561 := [unit-resolution #575 #585]: #360
#562 := [symm #561]: #198
#565 := [trans #562 #203]: #204
#563 := [trans #565 #560]: #36
decl f8 :: S3
#16 := f8
#227 := (f3 f8 #34)
#232 := (= #227 f12)
#17 := (f3 f8 #12)
#18 := (= #17 #11)
#586 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #579) #18)
#19 := (forall (vars (?v0 S2) (?v1 S2)) #18)
#589 := (iff #19 #586)
#587 := (iff #18 #18)
#588 := [refl]: #587
#590 := [quant-intro #588]: #589
#73 := (~ #19 #19)
#72 := (~ #18 #18)
#85 := [refl]: #72
#74 := [nnf-pos #85]: #73
#62 := [asserted]: #19
#86 := [mp~ #62 #74]: #19
#591 := [mp #86 #590]: #586
#572 := (not #586)
#554 := (or #572 #232)
#216 := [quant-inst #31 #33]: #554
#566 := [unit-resolution #216 #591]: #232
#277 := (= f10 #227)
#567 := (f3 f8 #30)
#275 := (= #567 #227)
#276 := [monotonicity #555]: #275
#553 := (= f10 #567)
#240 := (= #567 f10)
#578 := (or #572 #240)
#568 := [quant-inst #27 #29]: #578
#552 := [unit-resolution #568 #591]: #240
#260 := [symm #552]: #553
#278 := [trans #260 #276]: #277
#171 := [trans #278 #566]: #37
#165 := (or #78 #90 #91)
#251 := [def-axiom]: #165
[unit-resolution #251 #171 #563 #559]: false
unsat
f567b3ec65cba96a359862b5638f10a1c478c9a5 97 0
#2 := false
decl f8 :: (-> S8 S9 S2)
decl f10 :: (-> S10 S5 S9)
decl f5 :: (-> S6 S3 S5)
decl f22 :: S3
#57 := f22
decl f6 :: (-> S7 S2 S6)
decl f21 :: S2
#55 := f21
decl f7 :: S7
#8 := f7
#56 := (f6 f7 f21)
#58 := (f5 #56 f22)
decl f11 :: (-> S11 S2 S10)
decl f20 :: S2
#53 := f20
decl f12 :: S11
#17 := f12
#54 := (f11 f12 f20)
#59 := (f10 #54 #58)
decl f9 :: S8
#16 := f9
#60 := (f8 f9 #59)
decl f19 :: S3
#49 := f19
decl f18 :: S2
#47 := f18
#48 := (f6 f7 f18)
#50 := (f5 #48 f19)
decl f17 :: S2
#45 := f17
#46 := (f11 f12 f17)
#51 := (f10 #46 #50)
#52 := (f8 f9 #51)
#61 := (= #52 #60)
#62 := (= f17 f20)
#198 := (iff #62 #61)
#63 := (iff #61 #62)
#243 := (= #60 f20)
#19 := (:var 0 S5)
#9 := (:var 1 S2)
#18 := (f11 f12 #9)
#20 := (f10 #18 #19)
#613 := (pattern #20)
#21 := (f8 f9 #20)
#22 := (= #21 #9)
#614 := (forall (vars (?v0 S2) (?v1 S5)) (:pat #613) #22)
#23 := (forall (vars (?v0 S2) (?v1 S5)) #22)
#617 := (iff #23 #614)
#615 := (iff #22 #22)
#616 := [refl]: #615
#618 := [quant-intro #616]: #617
#100 := (~ #23 #23)
#99 := (~ #22 #22)
#118 := [refl]: #99
#101 := [nnf-pos #118]: #100
#86 := [asserted]: #23
#119 := [mp~ #86 #101]: #23
#619 := [mp #119 #618]: #614
#597 := (not #614)
#585 := (or #597 #243)
#586 := [quant-inst #53 #58]: #585
#303 := [unit-resolution #586 #619]: #243
#595 := (= #52 f17)
#239 := (or #597 #595)
#581 := [quant-inst #45 #50]: #239
#304 := [unit-resolution #581 #619]: #595
#305 := [monotonicity #304 #303]: #63
#575 := [symm #305]: #198
#92 := (not #61)
#190 := (not #62)
#576 := (iff #190 #92)
#298 := [monotonicity #575]: #576
#579 := [hypothesis]: #190
#299 := [mp #579 #298]: #92
#281 := (or #61 #62)
#93 := (iff #92 #62)
#64 := (not #63)
#94 := (iff #64 #93)
#95 := [rewrite]: #94
#91 := [asserted]: #64
#98 := [mp #91 #95]: #93
#276 := (not #93)
#269 := (or #61 #62 #276)
#280 := [def-axiom]: #269
#282 := [unit-resolution #280 #98]: #281
#580 := [unit-resolution #282 #579]: #61
#573 := [unit-resolution #580 #299]: false
#577 := [lemma #573]: #62
#578 := [mp #577 #575]: #61
#192 := (or #92 #190)
#191 := (or #92 #190 #276)
#277 := [def-axiom]: #191
#278 := [unit-resolution #277 #98]: #192
#574 := [unit-resolution #278 #577]: #92
[unit-resolution #574 #578]: false
unsat
3899473eab3901c51712a93b78ff218465cc80a5 204 0
#2 := false
decl f22 :: S8
#57 := f22
decl f19 :: S8
#49 := f19
#63 := (= f19 f22)
#135 := (not #63)
decl f21 :: S2
#55 := f21
decl f18 :: S2
#47 := f18
#62 := (= f18 f21)
#134 := (not #62)
#112 := (or #134 #135)
decl f15 :: (-> S13 S5 S3)
decl f5 :: (-> S6 S3 S5)
decl f10 :: (-> S10 S8 S3)
decl f11 :: (-> S11 S2 S10)
decl f12 :: S11
#17 := f12
#56 := (f11 f12 f21)
#58 := (f10 #56 f22)
decl f6 :: (-> S7 S2 S6)
decl f20 :: S2
#53 := f20
decl f7 :: S7
#8 := f7
#54 := (f6 f7 f20)
#59 := (f5 #54 #58)
decl f16 :: S13
#28 := f16
#60 := (f15 f16 #59)
#48 := (f11 f12 f18)
#50 := (f10 #48 f19)
decl f17 :: S2
#45 := f17
#46 := (f6 f7 f17)
#51 := (f5 #46 #50)
#52 := (f15 f16 #51)
#61 := (= #52 #60)
#306 := (= #58 #60)
#612 := (= #60 #58)
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#623 := (pattern #12)
#29 := (f15 f16 #12)
#30 := (= #29 #11)
#643 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #623) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3)) #30)
#646 := (iff #31 #643)
#644 := (iff #30 #30)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#106 := (~ #31 #31)
#125 := (~ #30 #30)
#126 := [refl]: #125
#107 := [nnf-pos #126]: #106
#90 := [asserted]: #31
#127 := [mp~ #90 #107]: #31
#648 := [mp #127 #647]: #643
#621 := (not #643)
#614 := (or #621 #612)
#256 := [quant-inst #53 #58]: #614
#593 := [unit-resolution #256 #648]: #612
#307 := [symm #593]: #306
#308 := (= #52 #58)
#595 := (= #50 #58)
#113 := (not #112)
#321 := [hypothesis]: #113
#208 := (or #112 #63)
#294 := [def-axiom]: #208
#315 := [unit-resolution #294 #321]: #63
#590 := (= #48 #56)
#207 := (or #112 #62)
#293 := [def-axiom]: #207
#316 := [unit-resolution #293 #321]: #62
#594 := [monotonicity #316]: #590
#305 := [monotonicity #594 #315]: #595
#611 := (= #52 #50)
#616 := (or #621 #611)
#622 := [quant-inst #45 #50]: #616
#591 := [unit-resolution #622 #648]: #611
#586 := [trans #591 #305]: #308
#587 := [trans #586 #307]: #61
#94 := (not #61)
#615 := (or #94 #112)
#139 := (iff #61 #112)
#64 := (and #62 #63)
#95 := (iff #94 #64)
#142 := (iff #95 #139)
#136 := (iff #94 #113)
#140 := (iff #136 #139)
#141 := [rewrite]: #140
#137 := (iff #95 #136)
#114 := (iff #64 #113)
#115 := [rewrite]: #114
#138 := [monotonicity #115]: #137
#143 := [trans #138 #141]: #142
#65 := (iff #61 #64)
#66 := (not #65)
#96 := (iff #66 #95)
#97 := [rewrite]: #96
#93 := [asserted]: #66
#100 := [mp #93 #97]: #95
#144 := [mp #100 #143]: #139
#286 := (not #139)
#300 := (or #94 #112 #286)
#279 := [def-axiom]: #300
#617 := [unit-resolution #279 #144]: #615
#322 := [unit-resolution #617 #321]: #94
#301 := [unit-resolution #322 #587]: false
#584 := [lemma #301]: #112
decl f8 :: (-> S9 S3 S2)
decl f9 :: S9
#16 := f9
#600 := (f8 f9 #58)
#601 := (= #600 f21)
#19 := (:var 0 S8)
#18 := (f11 f12 #9)
#20 := (f10 #18 #19)
#630 := (pattern #20)
#21 := (f8 f9 #20)
#22 := (= #21 #9)
#631 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #630) #22)
#23 := (forall (vars (?v0 S2) (?v1 S8)) #22)
#634 := (iff #23 #631)
#632 := (iff #22 #22)
#633 := [refl]: #632
#635 := [quant-intro #633]: #634
#102 := (~ #23 #23)
#101 := (~ #22 #22)
#120 := [refl]: #101
#103 := [nnf-pos #120]: #102
#88 := [asserted]: #23
#121 := [mp~ #88 #103]: #23
#636 := [mp #121 #635]: #631
#261 := (not #631)
#242 := (or #261 #601)
#606 := [quant-inst #55 #57]: #242
#588 := [unit-resolution #606 #636]: #601
#424 := (= f18 #600)
#271 := (f8 f9 #50)
#577 := (= #271 #600)
#579 := (= #50 #60)
#299 := (or #61 #113)
#297 := (or #61 #113 #286)
#298 := [def-axiom]: #297
#296 := [unit-resolution #298 #144]: #299
#585 := [unit-resolution #296 #584]: #61
#589 := (= #50 #52)
#578 := [symm #591]: #589
#580 := [trans #578 #585]: #579
#575 := [trans #580 #593]: #595
#583 := [monotonicity #575]: #577
#581 := (= f18 #271)
#272 := (= #271 f18)
#262 := (or #261 #272)
#263 := [quant-inst #47 #49]: #262
#576 := [unit-resolution #263 #636]: #272
#582 := [symm #576]: #581
#425 := [trans #582 #583]: #424
#426 := [trans #425 #588]: #62
decl f13 :: (-> S12 S3 S8)
decl f14 :: S12
#24 := f14
#599 := (f13 f14 #58)
#605 := (= #599 f22)
#25 := (f13 f14 #20)
#26 := (= #25 #19)
#637 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #630) #26)
#27 := (forall (vars (?v0 S2) (?v1 S8)) #26)
#640 := (iff #27 #637)
#638 := (iff #26 #26)
#639 := [refl]: #638
#641 := [quant-intro #639]: #640
#104 := (~ #27 #27)
#122 := (~ #26 #26)
#123 := [refl]: #122
#105 := [nnf-pos #123]: #104
#89 := [asserted]: #27
#124 := [mp~ #89 #105]: #27
#642 := [mp #124 #641]: #637
#602 := (not #637)
#248 := (or #602 #605)
#609 := [quant-inst #55 #57]: #248
#568 := [unit-resolution #609 #642]: #605
#572 := (= f19 #599)
#598 := (f13 f14 #50)
#565 := (= #598 #599)
#566 := [monotonicity #575]: #565
#570 := (= f19 #598)
#260 := (= #598 f19)
#603 := (or #602 #260)
#604 := [quant-inst #47 #49]: #603
#569 := [unit-resolution #604 #642]: #260
#571 := [symm #569]: #570
#573 := [trans #571 #566]: #572
#567 := [trans #573 #568]: #63
#209 := (or #113 #134 #135)
#295 := [def-axiom]: #209
[unit-resolution #295 #567 #426 #584]: false
unsat
66f8caa017bcd510092693efddec3be735f82480 140 0
#2 := false
decl f8 :: (-> S9 S3 S2)
decl f15 :: (-> S13 S5 S3)
decl f5 :: (-> S6 S3 S5)
decl f10 :: (-> S10 S8 S3)
decl f22 :: S8
#58 := f22
decl f11 :: (-> S11 S2 S10)
decl f21 :: S2
#56 := f21
decl f12 :: S11
#17 := f12
#57 := (f11 f12 f21)
#59 := (f10 #57 f22)
decl f6 :: (-> S7 S2 S6)
decl f20 :: S2
#54 := f20
decl f7 :: S7
#8 := f7
#55 := (f6 f7 f20)
#60 := (f5 #55 #59)
decl f16 :: S13
#28 := f16
#61 := (f15 f16 #60)
decl f9 :: S9
#16 := f9
#62 := (f8 f9 #61)
decl f19 :: S8
#49 := f19
decl f18 :: S2
#47 := f18
#48 := (f11 f12 f18)
#50 := (f10 #48 f19)
decl f17 :: S2
#45 := f17
#46 := (f6 f7 f17)
#51 := (f5 #46 #50)
#52 := (f15 f16 #51)
#53 := (f8 f9 #52)
#63 := (= #53 #62)
#64 := (= f18 f21)
#560 := (iff #64 #63)
#65 := (iff #63 #64)
#572 := (= #62 f21)
#583 := (f8 f9 #59)
#245 := (= #583 f21)
#19 := (:var 0 S8)
#9 := (:var 1 S2)
#18 := (f11 f12 #9)
#20 := (f10 #18 #19)
#615 := (pattern #20)
#21 := (f8 f9 #20)
#22 := (= #21 #9)
#616 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #615) #22)
#23 := (forall (vars (?v0 S2) (?v1 S8)) #22)
#619 := (iff #23 #616)
#617 := (iff #22 #22)
#618 := [refl]: #617
#620 := [quant-intro #618]: #619
#102 := (~ #23 #23)
#101 := (~ #22 #22)
#120 := [refl]: #101
#103 := [nnf-pos #120]: #102
#88 := [asserted]: #23
#121 := [mp~ #88 #103]: #23
#621 := [mp #121 #620]: #616
#257 := (not #616)
#587 := (or #257 #245)
#588 := [quant-inst #56 #58]: #587
#291 := [unit-resolution #588 #621]: #245
#293 := (= #62 #583)
#604 := (= #61 #59)
#11 := (:var 0 S3)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#608 := (pattern #12)
#29 := (f15 f16 #12)
#30 := (= #29 #11)
#628 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #608) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3)) #30)
#631 := (iff #31 #628)
#629 := (iff #30 #30)
#630 := [refl]: #629
#632 := [quant-intro #630]: #631
#106 := (~ #31 #31)
#125 := (~ #30 #30)
#126 := [refl]: #125
#107 := [nnf-pos #126]: #106
#90 := [asserted]: #31
#127 := [mp~ #90 #107]: #31
#633 := [mp #127 #632]: #628
#269 := (not #628)
#597 := (or #269 #604)
#256 := [quant-inst #54 #59]: #597
#292 := [unit-resolution #256 #633]: #604
#571 := [monotonicity #292]: #293
#286 := [trans #571 #291]: #572
#563 := (= #53 f18)
#605 := (f8 f9 #50)
#607 := (= #605 f18)
#599 := (or #257 #607)
#241 := [quant-inst #47 #49]: #599
#569 := [unit-resolution #241 #621]: #607
#570 := (= #53 #605)
#264 := (= #52 #50)
#270 := (or #269 #264)
#603 := [quant-inst #45 #50]: #270
#573 := [unit-resolution #603 #633]: #264
#574 := [monotonicity #573]: #570
#564 := [trans #574 #569]: #563
#565 := [monotonicity #564 #286]: #65
#561 := [symm #565]: #560
#94 := (not #63)
#192 := (not #64)
#566 := (iff #192 #94)
#567 := [monotonicity #561]: #566
#579 := [hypothesis]: #192
#562 := [mp #579 #567]: #94
#283 := (or #63 #64)
#95 := (iff #94 #64)
#66 := (not #65)
#96 := (iff #66 #95)
#97 := [rewrite]: #96
#93 := [asserted]: #66
#100 := [mp #93 #97]: #95
#278 := (not #95)
#271 := (or #63 #64 #278)
#282 := [def-axiom]: #271
#284 := [unit-resolution #282 #100]: #283
#576 := [unit-resolution #284 #579]: #63
#568 := [unit-resolution #576 #562]: false
#409 := [lemma #568]: #64
#411 := [mp #409 #561]: #63
#194 := (or #94 #192)
#193 := (or #94 #192 #278)
#279 := [def-axiom]: #193
#280 := [unit-resolution #279 #100]: #194
#410 := [unit-resolution #280 #409]: #94
[unit-resolution #410 #411]: false
unsat
ff6228ca7ad84c97bcf0916e5ffe8db03d1bc6d0 140 0
#2 := false
decl f13 :: (-> S12 S3 S8)
decl f15 :: (-> S13 S5 S3)
decl f5 :: (-> S6 S3 S5)
decl f10 :: (-> S10 S8 S3)
decl f22 :: S8
#58 := f22
decl f11 :: (-> S11 S2 S10)
decl f21 :: S2
#56 := f21
decl f12 :: S11
#17 := f12
#57 := (f11 f12 f21)
#59 := (f10 #57 f22)
decl f6 :: (-> S7 S2 S6)
decl f20 :: S2
#54 := f20
decl f7 :: S7
#8 := f7
#55 := (f6 f7 f20)
#60 := (f5 #55 #59)
decl f16 :: S13
#28 := f16
#61 := (f15 f16 #60)
decl f14 :: S12
#24 := f14
#62 := (f13 f14 #61)
decl f19 :: S8
#49 := f19
decl f18 :: S2
#47 := f18
#48 := (f11 f12 f18)
#50 := (f10 #48 f19)
decl f17 :: S2
#45 := f17
#46 := (f6 f7 f17)
#51 := (f5 #46 #50)
#52 := (f15 f16 #51)
#53 := (f13 f14 #52)
#63 := (= #53 #62)
#64 := (= f19 f22)
#560 := (iff #64 #63)
#65 := (iff #63 #64)
#572 := (= #62 f22)
#585 := (f13 f14 #59)
#586 := (= #585 f22)
#19 := (:var 0 S8)
#9 := (:var 1 S2)
#18 := (f11 f12 #9)
#20 := (f10 #18 #19)
#615 := (pattern #20)
#25 := (f13 f14 #20)
#26 := (= #25 #19)
#622 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #615) #26)
#27 := (forall (vars (?v0 S2) (?v1 S8)) #26)
#625 := (iff #27 #622)
#623 := (iff #26 #26)
#624 := [refl]: #623
#626 := [quant-intro #624]: #625
#104 := (~ #27 #27)
#122 := (~ #26 #26)
#123 := [refl]: #122
#105 := [nnf-pos #123]: #104
#89 := [asserted]: #27
#124 := [mp~ #89 #105]: #27
#627 := [mp #124 #626]: #622
#246 := (not #622)
#590 := (or #246 #586)
#227 := [quant-inst #56 #58]: #590
#291 := [unit-resolution #227 #627]: #586
#293 := (= #62 #585)
#604 := (= #61 #59)
#11 := (:var 0 S3)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#608 := (pattern #12)
#29 := (f15 f16 #12)
#30 := (= #29 #11)
#628 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #608) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3)) #30)
#631 := (iff #31 #628)
#629 := (iff #30 #30)
#630 := [refl]: #629
#632 := [quant-intro #630]: #631
#106 := (~ #31 #31)
#125 := (~ #30 #30)
#126 := [refl]: #125
#107 := [nnf-pos #126]: #106
#90 := [asserted]: #31
#127 := [mp~ #90 #107]: #31
#633 := [mp #127 #632]: #628
#269 := (not #628)
#597 := (or #269 #604)
#256 := [quant-inst #54 #59]: #597
#292 := [unit-resolution #256 #633]: #604
#571 := [monotonicity #292]: #293
#286 := [trans #571 #291]: #572
#563 := (= #53 f19)
#261 := (f13 f14 #50)
#598 := (= #261 f19)
#247 := (or #246 #598)
#248 := [quant-inst #47 #49]: #247
#569 := [unit-resolution #248 #627]: #598
#570 := (= #53 #261)
#264 := (= #52 #50)
#270 := (or #269 #264)
#603 := [quant-inst #45 #50]: #270
#573 := [unit-resolution #603 #633]: #264
#574 := [monotonicity #573]: #570
#564 := [trans #574 #569]: #563
#565 := [monotonicity #564 #286]: #65
#561 := [symm #565]: #560
#94 := (not #63)
#192 := (not #64)
#566 := (iff #192 #94)
#567 := [monotonicity #561]: #566
#579 := [hypothesis]: #192
#562 := [mp #579 #567]: #94
#283 := (or #63 #64)
#95 := (iff #94 #64)
#66 := (not #65)
#96 := (iff #66 #95)
#97 := [rewrite]: #96
#93 := [asserted]: #66
#100 := [mp #93 #97]: #95
#278 := (not #95)
#271 := (or #63 #64 #278)
#282 := [def-axiom]: #271
#284 := [unit-resolution #282 #100]: #283
#576 := [unit-resolution #284 #579]: #63
#568 := [unit-resolution #576 #562]: false
#409 := [lemma #568]: #64
#411 := [mp #409 #561]: #63
#194 := (or #94 #192)
#193 := (or #94 #192 #278)
#279 := [def-axiom]: #193
#280 := [unit-resolution #279 #100]: #194
#410 := [unit-resolution #280 #409]: #94
[unit-resolution #410 #411]: false
unsat
c96488cbaa7f2ec1db1698b5028335098b71d55f 97 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f10 :: S2
#29 := f10
decl f6 :: (-> S6 S2 S5)
decl f9 :: S2
#27 := f9
decl f7 :: S6
#8 := f7
#28 := (f6 f7 f9)
#30 := (f5 #28 f10)
decl f8 :: S3
#16 := f8
#32 := (f3 f8 #30)
decl f4 :: S3
#7 := f4
#31 := (f3 f4 #30)
#33 := (= #31 #32)
#34 := (= f9 f10)
#550 := (iff #34 #33)
#35 := (iff #33 #34)
#237 := (= #32 f10)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#560 := (pattern #12)
#17 := (f3 f8 #12)
#18 := (= #17 #11)
#567 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #560) #18)
#19 := (forall (vars (?v0 S2) (?v1 S2)) #18)
#570 := (iff #19 #567)
#568 := (iff #18 #18)
#569 := [refl]: #568
#571 := [quant-intro #569]: #570
#69 := (~ #19 #19)
#68 := (~ #18 #18)
#81 := [refl]: #68
#70 := [nnf-pos #81]: #69
#58 := [asserted]: #19
#82 := [mp~ #58 #70]: #19
#572 := [mp #82 #571]: #567
#548 := (not #567)
#221 := (or #548 #237)
#222 := [quant-inst #27 #29]: #221
#549 := [unit-resolution #222 #572]: #237
#233 := (= #31 f9)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#561 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #560) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#564 := (iff #15 #561)
#562 := (iff #14 #14)
#563 := [refl]: #562
#565 := [quant-intro #563]: #564
#79 := (~ #15 #15)
#77 := (~ #14 #14)
#78 := [refl]: #77
#80 := [nnf-pos #78]: #79
#57 := [asserted]: #15
#66 := [mp~ #57 #80]: #15
#566 := [mp #66 #565]: #561
#552 := (not #561)
#554 := (or #552 #233)
#210 := [quant-inst #27 #29]: #554
#208 := [unit-resolution #210 #566]: #233
#213 := [monotonicity #208 #549]: #35
#209 := [symm #213]: #550
#61 := (not #33)
#144 := (not #34)
#551 := (iff #144 #61)
#193 := [monotonicity #209]: #551
#556 := [hypothesis]: #144
#535 := [mp #556 #193]: #61
#235 := (or #33 #34)
#62 := (iff #61 #34)
#36 := (not #35)
#63 := (iff #36 #62)
#64 := [rewrite]: #63
#60 := [asserted]: #36
#67 := [mp #60 #64]: #62
#230 := (not #62)
#223 := (or #33 #34 #230)
#234 := [def-axiom]: #223
#236 := [unit-resolution #234 #67]: #235
#557 := [unit-resolution #236 #556]: #33
#197 := [unit-resolution #557 #535]: false
#198 := [lemma #197]: #34
#200 := [mp #198 #209]: #33
#146 := (or #61 #144)
#145 := (or #61 #144 #230)
#231 := [def-axiom]: #145
#232 := [unit-resolution #231 #67]: #146
#199 := [unit-resolution #232 #198]: #61
[unit-resolution #199 #200]: false
unsat
09a45677774b7c719ba58910500f00ef56ae315c 106 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f12 :: S4
#33 := f12
decl f8 :: S3
#16 := f8
#39 := (f3 f8 f12)
decl f9 :: S4
#27 := f9
decl f4 :: S3
#7 := f4
#38 := (f3 f4 f9)
#40 := (= #38 #39)
decl f5 :: (-> S5 S2 S4)
decl f10 :: S2
#28 := f10
decl f6 :: (-> S6 S2 S5)
decl f11 :: S2
#30 := f11
decl f7 :: S6
#8 := f7
#34 := (f6 f7 f11)
#35 := (f5 #34 f10)
#230 := (f3 f8 #35)
#214 := (= #230 #39)
#549 := (= #39 #230)
#36 := (= f12 #35)
#29 := (f6 f7 f10)
#31 := (f5 #29 f11)
#32 := (= f9 #31)
#37 := (and #32 #36)
#67 := (not #37)
#68 := (or #67 #40)
#71 := (not #68)
#41 := (implies #37 #40)
#42 := (not #41)
#72 := (iff #42 #71)
#69 := (iff #41 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#66 := [asserted]: #42
#76 := [mp #66 #73]: #71
#74 := [not-or-elim #76]: #37
#77 := [and-elim #74]: #36
#211 := [monotonicity #77]: #549
#551 := [symm #211]: #214
#554 := (= #38 #230)
#212 := (= f10 #230)
#566 := (= #230 f10)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#574 := (pattern #12)
#17 := (f3 f8 #12)
#18 := (= #17 #11)
#581 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #574) #18)
#19 := (forall (vars (?v0 S2) (?v1 S2)) #18)
#584 := (iff #19 #581)
#582 := (iff #18 #18)
#583 := [refl]: #582
#585 := [quant-intro #583]: #584
#83 := (~ #19 #19)
#82 := (~ #18 #18)
#99 := [refl]: #82
#84 := [nnf-pos #99]: #83
#64 := [asserted]: #19
#100 := [mp~ #64 #84]: #19
#586 := [mp #100 #585]: #581
#250 := (not #581)
#235 := (or #250 #566)
#236 := [quant-inst #30 #28]: #235
#222 := [unit-resolution #236 #586]: #566
#213 := [symm #222]: #212
#552 := (= #38 f10)
#158 := (f3 f4 #31)
#244 := (= #158 f10)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#575 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #574) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#578 := (iff #15 #575)
#576 := (iff #14 #14)
#577 := [refl]: #576
#579 := [quant-intro #577]: #578
#97 := (~ #15 #15)
#95 := (~ #14 #14)
#96 := [refl]: #95
#98 := [nnf-pos #96]: #97
#63 := [asserted]: #15
#81 := [mp~ #63 #98]: #15
#580 := [mp #81 #579]: #575
#160 := (not #575)
#246 := (or #160 #244)
#237 := [quant-inst #28 #30]: #246
#227 := [unit-resolution #237 #580]: #244
#565 := (= #38 #158)
#75 := [and-elim #74]: #32
#207 := [monotonicity #75]: #565
#553 := [trans #207 #227]: #552
#555 := [trans #553 #213]: #554
#550 := [trans #555 #551]: #40
#78 := (not #40)
#79 := [not-or-elim #76]: #78
[unit-resolution #79 #550]: false
unsat
618d08b43560c1458410e7b2d3758883c80902bb 115 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f9 :: S4
#27 := f9
decl f8 :: S3
#16 := f8
#29 := (f3 f8 f9)
decl f4 :: S3
#7 := f4
#28 := (f3 f4 f9)
#30 := (= #28 #29)
decl f5 :: (-> S5 S2 S4)
decl f6 :: (-> S6 S2 S5)
decl f7 :: S6
#8 := f7
#31 := (f6 f7 #29)
#32 := (f5 #31 #28)
#232 := (f3 f4 #32)
#236 := (= #232 #29)
#11 := (:var 0 S2)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#559 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#560 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #559) #14)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#563 := (iff #15 #560)
#561 := (iff #14 #14)
#562 := [refl]: #561
#564 := [quant-intro #562]: #563
#78 := (~ #15 #15)
#76 := (~ #14 #14)
#77 := [refl]: #76
#79 := [nnf-pos #77]: #78
#56 := [asserted]: #15
#65 := [mp~ #56 #79]: #15
#565 := [mp #65 #564]: #560
#553 := (not #560)
#209 := (or #553 #236)
#340 := [quant-inst #29 #28]: #209
#178 := [unit-resolution #340 #565]: #236
#545 := (= #28 #232)
#183 := (= #232 #28)
#535 := (= #32 f9)
#33 := (= f9 #32)
#547 := (f6 f7 #28)
#220 := (f5 #547 #29)
#199 := (= #220 #32)
#534 := (= #32 #220)
#143 := (not #33)
#557 := [hypothesis]: #143
#234 := (or #30 #33)
#60 := (not #30)
#61 := (iff #60 #33)
#34 := (iff #30 #33)
#35 := (not #34)
#62 := (iff #35 #61)
#63 := [rewrite]: #62
#59 := [asserted]: #35
#66 := [mp #59 #63]: #61
#229 := (not #61)
#222 := (or #30 #33 #229)
#233 := [def-axiom]: #222
#235 := [unit-resolution #233 #66]: #234
#212 := [unit-resolution #235 #557]: #30
#550 := (= #31 #547)
#549 := (= #547 #31)
#208 := [monotonicity #212]: #549
#192 := [symm #208]: #550
#196 := [monotonicity #192 #212]: #534
#536 := [symm #196]: #199
#197 := (= f9 #220)
#556 := (= #220 f9)
#20 := (:var 0 S4)
#23 := (f3 f8 #20)
#573 := (pattern #23)
#21 := (f3 f4 #20)
#572 := (pattern #21)
#22 := (f6 f7 #21)
#24 := (f5 #22 #23)
#25 := (= #24 #20)
#574 := (forall (vars (?v0 S4)) (:pat #572 #573) #25)
#26 := (forall (vars (?v0 S4)) #25)
#577 := (iff #26 #574)
#575 := (iff #25 #25)
#576 := [refl]: #575
#578 := [quant-intro #576]: #577
#70 := (~ #26 #26)
#82 := (~ #25 #25)
#83 := [refl]: #82
#71 := [nnf-pos #83]: #70
#58 := [asserted]: #26
#84 := [mp~ #58 #71]: #26
#579 := [mp #84 #578]: #574
#558 := (not #574)
#548 := (or #558 #556)
#207 := [quant-inst #27]: #548
#552 := [unit-resolution #207 #579]: #556
#198 := [symm #552]: #197
#537 := [trans #198 #536]: #33
#538 := [unit-resolution #557 #537]: false
#539 := [lemma #538]: #33
#541 := [symm #539]: #535
#184 := [monotonicity #541]: #183
#543 := [symm #184]: #545
#546 := [trans #543 #178]: #30
#145 := (or #60 #143)
#144 := (or #60 #143 #229)
#230 := [def-axiom]: #144
#231 := [unit-resolution #230 #66]: #145
#540 := [unit-resolution #231 #539]: #60
[unit-resolution #540 #546]: false
unsat
6c74b15206a530ed139b99673954ade36be4efcc 43 0
#2 := false
decl f9 :: S3
#30 := f9
decl f5 :: (-> S5 S3 S3)
decl f6 :: (-> S6 S2 S5)
decl f21 :: S2
#71 := f21
decl f7 :: S6
#8 := f7
#72 := (f6 f7 f21)
#73 := (f5 #72 f9)
#74 := (= #73 f9)
#75 := (not #74)
#76 := (not #75)
#107 := (iff #76 #74)
#108 := [rewrite]: #107
#106 := [asserted]: #76
#111 := [mp #106 #108]: #74
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#647 := (pattern #12)
#34 := (= #12 f9)
#35 := (not #34)
#673 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #647) #35)
#36 := (forall (vars (?v0 S2) (?v1 S3)) #35)
#676 := (iff #36 #673)
#674 := (iff #35 #35)
#675 := [refl]: #674
#677 := [quant-intro #675]: #676
#119 := (~ #36 #36)
#145 := (~ #35 #35)
#146 := [refl]: #145
#120 := [nnf-pos #146]: #119
#101 := [asserted]: #36
#147 := [mp~ #101 #120]: #36
#678 := [mp #147 #677]: #673
#232 := (not #673)
#318 := (or #232 #75)
#233 := [quant-inst #71 #30]: #318
[unit-resolution #233 #678 #111]: false
unsat
3782db2306cc866f72f70a01d2f0b8de7f1467ff 47 0
#2 := false
decl f9 :: S3
#30 := f9
decl f5 :: (-> S5 S3 S3)
decl f6 :: (-> S6 S2 S5)
decl f22 :: S2
#73 := f22
decl f7 :: S6
#8 := f7
#74 := (f6 f7 f22)
#75 := (f5 #74 f9)
decl f21 :: S2
#71 := f21
#72 := (f6 f7 f21)
#76 := (f5 #72 #75)
#77 := (= #76 f9)
#78 := (not #77)
#79 := (not #78)
#110 := (iff #79 #77)
#111 := [rewrite]: #110
#109 := [asserted]: #79
#114 := [mp #109 #111]: #77
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#650 := (pattern #12)
#34 := (= #12 f9)
#35 := (not #34)
#676 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #650) #35)
#36 := (forall (vars (?v0 S2) (?v1 S3)) #35)
#679 := (iff #36 #676)
#677 := (iff #35 #35)
#678 := [refl]: #677
#680 := [quant-intro #678]: #679
#122 := (~ #36 #36)
#148 := (~ #35 #35)
#149 := [refl]: #148
#123 := [nnf-pos #149]: #122
#104 := [asserted]: #36
#150 := [mp~ #104 #123]: #36
#681 := [mp #150 #680]: #676
#236 := (not #676)
#311 := (or #236 #78)
#312 := [quant-inst #71 #75]: #311
[unit-resolution #312 #681 #114]: false
unsat
f728211cb1982632db7d0508cbcfd18907e87e3f 119 0
#2 := false
decl f22 :: S2
#72 := f22
decl f21 :: S2
#71 := f21
#73 := (= f21 f22)
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#30 := f9
decl f6 :: (-> S6 S2 S5)
decl f7 :: S6
#8 := f7
#77 := (f6 f7 f22)
#78 := (f5 #77 f9)
#75 := (f6 f7 f21)
#76 := (f5 #75 f9)
#79 := (= #76 #78)
#634 := (iff #79 #73)
#642 := (not #634)
#80 := (not #79)
#113 := (or #73 #80)
#116 := (not #113)
#74 := (not #73)
#81 := (implies #74 #80)
#82 := (not #81)
#117 := (iff #82 #116)
#114 := (iff #81 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#112 := [asserted]: #82
#121 := [mp #112 #118]: #116
#120 := [not-or-elim #121]: #79
#119 := [not-or-elim #121]: #74
#284 := (or #642 #80 #73)
#645 := [def-axiom]: #284
#484 := [unit-resolution #645 #119 #120]: #642
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#22 := (:var 2 S3)
#20 := (:var 3 S2)
#21 := (f6 f7 #20)
#23 := (f5 #21 #22)
#672 := (pattern #23 #12)
#26 := (= #22 #11)
#175 := (not #26)
#25 := (= #20 #9)
#174 := (not #25)
#141 := (or #174 #175)
#142 := (not #141)
#24 := (= #23 #12)
#143 := (iff #24 #142)
#673 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2) (?v3 S3)) (:pat #672) #143)
#177 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2) (?v3 S3)) #143)
#676 := (iff #177 #673)
#674 := (iff #143 #143)
#675 := [refl]: #674
#677 := [quant-intro #675]: #676
#27 := (and #25 #26)
#28 := (iff #24 #27)
#29 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2) (?v3 S3)) #28)
#178 := (iff #29 #177)
#144 := (iff #28 #143)
#145 := (iff #27 #142)
#146 := [rewrite]: #145
#176 := [monotonicity #146]: #144
#179 := [quant-intro #176]: #178
#127 := (~ #29 #29)
#153 := (~ #28 #28)
#154 := [refl]: #153
#128 := [nnf-pos #154]: #127
#105 := [asserted]: #29
#155 := [mp~ #105 #128]: #29
#180 := [mp #155 #179]: #177
#678 := [mp #180 #677]: #673
#298 := (not #673)
#299 := (or #298 #634)
#244 := (= f9 f9)
#330 := (not #244)
#333 := (or #74 #330)
#334 := (not #333)
#335 := (iff #79 #334)
#636 := (or #298 #335)
#638 := (iff #636 #299)
#640 := (iff #299 #299)
#635 := [rewrite]: #640
#296 := (iff #335 #634)
#650 := (iff #334 #73)
#648 := (not #74)
#649 := (iff #648 #73)
#308 := [rewrite]: #649
#307 := (iff #334 #648)
#652 := (iff #333 #74)
#321 := (or #74 false)
#656 := (iff #321 #74)
#657 := [rewrite]: #656
#654 := (iff #333 #321)
#647 := (iff #330 false)
#1 := true
#315 := (not true)
#309 := (iff #315 false)
#440 := [rewrite]: #309
#651 := (iff #330 #315)
#332 := (iff #244 true)
#336 := [rewrite]: #332
#653 := [monotonicity #336]: #651
#320 := [trans #653 #440]: #647
#655 := [monotonicity #320]: #654
#658 := [trans #655 #657]: #652
#312 := [monotonicity #658]: #307
#292 := [trans #312 #308]: #650
#297 := [monotonicity #292]: #296
#639 := [monotonicity #297]: #638
#641 := [trans #639 #635]: #638
#637 := [quant-inst #71 #30 #72 #30]: #636
#278 := [mp #637 #641]: #299
[unit-resolution #278 #678 #484]: false
unsat
bbfd4143740fa5fa37bb46aa96df37053b73380b 43 0
#2 := false
decl f21 :: S2
#71 := f21
decl f3 :: (-> S4 S3 S2)
decl f5 :: (-> S5 S3 S3)
decl f22 :: S3
#73 := f22
decl f6 :: (-> S6 S2 S5)
decl f7 :: S6
#8 := f7
#72 := (f6 f7 f21)
#74 := (f5 #72 f22)
decl f4 :: S4
#7 := f4
#75 := (f3 f4 #74)
#76 := (= #75 f21)
#77 := (not #76)
#107 := [asserted]: #77
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#645 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#646 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #645) #14)
#15 := (forall (vars (?v0 S2) (?v1 S3)) #14)
#649 := (iff #15 #646)
#647 := (iff #14 #14)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#133 := (~ #15 #15)
#131 := (~ #14 #14)
#132 := [refl]: #131
#134 := [nnf-pos #132]: #133
#98 := [asserted]: #15
#109 := [mp~ #98 #134]: #15
#651 := [mp #109 #650]: #646
#320 := (not #646)
#321 := (or #320 #76)
#318 := [quant-inst #71 #73]: #321
[unit-resolution #318 #651 #107]: false
unsat
faf27be81c50266d2944b770ad1790cac070c271 42 0
#2 := false
decl f22 :: S3
#73 := f22
decl f5 :: (-> S5 S3 S3)
decl f6 :: (-> S6 S2 S5)
decl f21 :: S2
#71 := f21
decl f7 :: S6
#8 := f7
#72 := (f6 f7 f21)
#74 := (f5 #72 f22)
decl f8 :: S5
#16 := f8
#75 := (f5 f8 #74)
#76 := (= #75 f22)
#77 := (not #76)
#107 := [asserted]: #77
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#645 := (pattern #12)
#17 := (f5 f8 #12)
#18 := (= #17 #11)
#652 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #645) #18)
#19 := (forall (vars (?v0 S2) (?v1 S3)) #18)
#655 := (iff #19 #652)
#653 := (iff #18 #18)
#654 := [refl]: #653
#656 := [quant-intro #654]: #655
#111 := (~ #19 #19)
#110 := (~ #18 #18)
#135 := [refl]: #110
#112 := [nnf-pos #135]: #111
#99 := [asserted]: #19
#136 := [mp~ #99 #112]: #19
#657 := [mp #136 #656]: #652
#637 := (not #652)
#639 := (or #637 #76)
#295 := [quant-inst #71 #73]: #639
[unit-resolution #295 #657 #107]: false
unsat
ab24eb2440f220778ada1d51b0fa5d566ee21c5f 51 0
#2 := false
decl f21 :: S2
#71 := f21
decl f3 :: (-> S4 S3 S2)
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#30 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#75 := f23
decl f7 :: S6
#8 := f7
#76 := (f6 f7 f23)
#77 := (f5 #76 f9)
decl f22 :: S2
#73 := f22
#74 := (f6 f7 f22)
#78 := (f5 #74 #77)
#72 := (f6 f7 f21)
#79 := (f5 #72 #78)
decl f4 :: S4
#7 := f4
#80 := (f3 f4 #79)
#81 := (= #80 f21)
#82 := (not #81)
#112 := [asserted]: #82
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#650 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#651 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #650) #14)
#15 := (forall (vars (?v0 S2) (?v1 S3)) #14)
#654 := (iff #15 #651)
#652 := (iff #14 #14)
#653 := [refl]: #652
#655 := [quant-intro #653]: #654
#138 := (~ #15 #15)
#136 := (~ #14 #14)
#137 := [refl]: #136
#139 := [nnf-pos #137]: #138
#103 := [asserted]: #15
#114 := [mp~ #103 #139]: #15
#656 := [mp #114 #655]: #651
#620 := (not #651)
#527 := (or #620 #81)
#533 := [quant-inst #71 #78]: #527
[unit-resolution #533 #656 #112]: false
unsat
d46d7a2ca405083ed110fa917182c9b64d529ecc 50 0
#2 := false
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#30 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#75 := f23
decl f7 :: S6
#8 := f7
#76 := (f6 f7 f23)
#77 := (f5 #76 f9)
decl f22 :: S2
#73 := f22
#74 := (f6 f7 f22)
#78 := (f5 #74 #77)
decl f21 :: S2
#71 := f21
#72 := (f6 f7 f21)
#79 := (f5 #72 #78)
decl f8 :: S5
#16 := f8
#80 := (f5 f8 #79)
#81 := (= #80 #78)
#82 := (not #81)
#112 := [asserted]: #82
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#650 := (pattern #12)
#17 := (f5 f8 #12)
#18 := (= #17 #11)
#657 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #650) #18)
#19 := (forall (vars (?v0 S2) (?v1 S3)) #18)
#660 := (iff #19 #657)
#658 := (iff #18 #18)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#116 := (~ #19 #19)
#115 := (~ #18 #18)
#140 := [refl]: #115
#117 := [nnf-pos #140]: #116
#104 := [asserted]: #19
#141 := [mp~ #104 #117]: #19
#662 := [mp #141 #661]: #657
#618 := (not #657)
#516 := (or #618 #81)
#517 := [quant-inst #71 #78]: #516
[unit-resolution #517 #662 #112]: false
unsat
00d45a2105c65a05afe6de3a3f44dd3d02e667e9 80 0
#2 := false
decl f22 :: S2
#73 := f22
decl f3 :: (-> S4 S3 S2)
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#30 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#75 := f23
decl f7 :: S6
#8 := f7
#76 := (f6 f7 f23)
#77 := (f5 #76 f9)
#74 := (f6 f7 f22)
#78 := (f5 #74 #77)
decl f21 :: S2
#71 := f21
#72 := (f6 f7 f21)
#79 := (f5 #72 #78)
decl f8 :: S5
#16 := f8
#80 := (f5 f8 #79)
decl f4 :: S4
#7 := f4
#81 := (f3 f4 #80)
#82 := (= #81 f22)
#587 := (f3 f4 #78)
#588 := (= #587 f22)
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#651 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#652 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #651) #14)
#15 := (forall (vars (?v0 S2) (?v1 S3)) #14)
#655 := (iff #15 #652)
#653 := (iff #14 #14)
#654 := [refl]: #653
#656 := [quant-intro #654]: #655
#139 := (~ #15 #15)
#137 := (~ #14 #14)
#138 := [refl]: #137
#140 := [nnf-pos #138]: #139
#104 := [asserted]: #15
#115 := [mp~ #104 #140]: #15
#657 := [mp #115 #656]: #652
#621 := (not #652)
#490 := (or #621 #588)
#491 := [quant-inst #73 #77]: #490
#534 := [unit-resolution #491 #657]: #588
#522 := (= #81 #587)
#528 := (= #80 #78)
#17 := (f5 f8 #12)
#18 := (= #17 #11)
#658 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #651) #18)
#19 := (forall (vars (?v0 S2) (?v1 S3)) #18)
#661 := (iff #19 #658)
#659 := (iff #18 #18)
#660 := [refl]: #659
#662 := [quant-intro #660]: #661
#117 := (~ #19 #19)
#116 := (~ #18 #18)
#141 := [refl]: #116
#118 := [nnf-pos #141]: #117
#105 := [asserted]: #19
#142 := [mp~ #105 #118]: #19
#663 := [mp #142 #662]: #658
#619 := (not #658)
#518 := (or #619 #528)
#521 := [quant-inst #71 #78]: #518
#517 := [unit-resolution #521 #663]: #528
#523 := [monotonicity #517]: #522
#524 := [trans #523 #534]: #82
#83 := (not #82)
#113 := [asserted]: #83
[unit-resolution #113 #524]: false
unsat
4d55755ce8670444560059a4a2c5e8c60b925e12 61 0
#2 := false
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#30 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#75 := f23
decl f7 :: S6
#8 := f7
#76 := (f6 f7 f23)
#77 := (f5 #76 f9)
decl f22 :: S2
#73 := f22
#74 := (f6 f7 f22)
#78 := (f5 #74 #77)
decl f21 :: S2
#71 := f21
#72 := (f6 f7 f21)
#79 := (f5 #72 #78)
decl f8 :: S5
#16 := f8
#80 := (f5 f8 #79)
#81 := (f5 f8 #80)
#82 := (= #81 #77)
#488 := (f5 f8 #78)
#489 := (= #488 #77)
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#651 := (pattern #12)
#17 := (f5 f8 #12)
#18 := (= #17 #11)
#658 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #651) #18)
#19 := (forall (vars (?v0 S2) (?v1 S3)) #18)
#661 := (iff #19 #658)
#659 := (iff #18 #18)
#660 := [refl]: #659
#662 := [quant-intro #660]: #661
#117 := (~ #19 #19)
#116 := (~ #18 #18)
#141 := [refl]: #116
#118 := [nnf-pos #141]: #117
#105 := [asserted]: #19
#142 := [mp~ #105 #118]: #19
#663 := [mp #142 #662]: #658
#619 := (not #658)
#582 := (or #619 #489)
#586 := [quant-inst #73 #77]: #582
#534 := [unit-resolution #586 #663]: #489
#522 := (= #81 #488)
#528 := (= #80 #78)
#518 := (or #619 #528)
#521 := [quant-inst #71 #78]: #518
#517 := [unit-resolution #521 #663]: #528
#523 := [monotonicity #517]: #522
#524 := [trans #523 #534]: #82
#83 := (not #82)
#113 := [asserted]: #83
[unit-resolution #113 #524]: false
unsat
1e49cb75a4b4736654a002c06e5405d5c3517634 86 0
#2 := false
decl f28 :: S2
#91 := f28
decl f3 :: (-> S4 S5 S2)
decl f10 :: (-> S10 S9 S5)
decl f12 :: (-> S11 S9 S9)
decl f16 :: S9
#50 := f16
decl f13 :: (-> S12 S5 S11)
decl f5 :: (-> S6 S3 S5)
decl f29 :: S3
#93 := f29
decl f6 :: (-> S7 S2 S6)
decl f7 :: S7
#8 := f7
#92 := (f6 f7 f28)
#94 := (f5 #92 f29)
decl f14 :: S12
#28 := f14
#95 := (f13 f14 #94)
#96 := (f12 #95 f16)
decl f11 :: S10
#27 := f11
#97 := (f10 f11 #96)
decl f4 :: S4
#7 := f4
#98 := (f3 f4 #97)
#99 := (= #98 f28)
#270 := (f3 f4 #94)
#356 := (= #270 f28)
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#686 := (pattern #12)
#13 := (f3 f4 #12)
#14 := (= #13 #9)
#687 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #686) #14)
#15 := (forall (vars (?v0 S2) (?v1 S3)) #14)
#690 := (iff #15 #687)
#688 := (iff #14 #14)
#689 := [refl]: #688
#691 := [quant-intro #689]: #690
#165 := (~ #15 #15)
#163 := (~ #14 #14)
#164 := [refl]: #163
#166 := [nnf-pos #164]: #165
#121 := [asserted]: #15
#135 := [mp~ #121 #166]: #15
#692 := [mp #135 #691]: #687
#272 := (not #687)
#358 := (or #272 #356)
#349 := [quant-inst #91 #93]: #358
#339 := [unit-resolution #349 #692]: #356
#324 := (= #98 #270)
#348 := (= #97 #94)
#31 := (:var 0 S9)
#29 := (:var 1 S5)
#30 := (f13 f14 #29)
#32 := (f12 #30 #31)
#707 := (pattern #32)
#33 := (f10 f11 #32)
#34 := (= #33 #29)
#708 := (forall (vars (?v0 S5) (?v1 S9)) (:pat #707) #34)
#35 := (forall (vars (?v0 S5) (?v1 S9)) #34)
#711 := (iff #35 #708)
#709 := (iff #34 #34)
#710 := [refl]: #709
#712 := [quant-intro #710]: #711
#141 := (~ #35 #35)
#172 := (~ #34 #34)
#173 := [refl]: #172
#142 := [nnf-pos #173]: #141
#124 := [asserted]: #35
#174 := [mp~ #124 #142]: #35
#713 := [mp #174 #712]: #708
#685 := (not #708)
#675 := (or #685 #348)
#334 := [quant-inst #94 #50]: #675
#676 := [unit-resolution #334 #713]: #348
#325 := [monotonicity #676]: #324
#326 := [trans #325 #339]: #99
#100 := (not #99)
#133 := [asserted]: #100
[unit-resolution #133 #326]: false
unsat
4ee836bc63884d52d61c6983c35e39ed91d8e078 86 0
#2 := false
decl f29 :: S3
#93 := f29
decl f8 :: (-> S8 S5 S3)
decl f10 :: (-> S10 S9 S5)
decl f12 :: (-> S11 S9 S9)
decl f16 :: S9
#50 := f16
decl f13 :: (-> S12 S5 S11)
decl f5 :: (-> S6 S3 S5)
decl f6 :: (-> S7 S2 S6)
decl f28 :: S2
#91 := f28
decl f7 :: S7
#8 := f7
#92 := (f6 f7 f28)
#94 := (f5 #92 f29)
decl f14 :: S12
#28 := f14
#95 := (f13 f14 #94)
#96 := (f12 #95 f16)
decl f11 :: S10
#27 := f11
#97 := (f10 f11 #96)
decl f9 :: S8
#16 := f9
#98 := (f8 f9 #97)
#99 := (= #98 f29)
#271 := (f8 f9 #94)
#357 := (= #271 f29)
#11 := (:var 0 S3)
#9 := (:var 1 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#686 := (pattern #12)
#17 := (f8 f9 #12)
#18 := (= #17 #11)
#693 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #686) #18)
#19 := (forall (vars (?v0 S2) (?v1 S3)) #18)
#696 := (iff #19 #693)
#694 := (iff #18 #18)
#695 := [refl]: #694
#697 := [quant-intro #695]: #696
#137 := (~ #19 #19)
#136 := (~ #18 #18)
#167 := [refl]: #136
#138 := [nnf-pos #167]: #137
#122 := [asserted]: #19
#168 := [mp~ #122 #138]: #19
#698 := [mp #168 #697]: #693
#362 := (not #693)
#359 := (or #362 #357)
#363 := [quant-inst #91 #93]: #359
#339 := [unit-resolution #363 #698]: #357
#324 := (= #98 #271)
#348 := (= #97 #94)
#31 := (:var 0 S9)
#29 := (:var 1 S5)
#30 := (f13 f14 #29)
#32 := (f12 #30 #31)
#707 := (pattern #32)
#33 := (f10 f11 #32)
#34 := (= #33 #29)
#708 := (forall (vars (?v0 S5) (?v1 S9)) (:pat #707) #34)
#35 := (forall (vars (?v0 S5) (?v1 S9)) #34)
#711 := (iff #35 #708)
#709 := (iff #34 #34)
#710 := [refl]: #709
#712 := [quant-intro #710]: #711
#141 := (~ #35 #35)
#172 := (~ #34 #34)
#173 := [refl]: #172
#142 := [nnf-pos #173]: #141
#124 := [asserted]: #35
#174 := [mp~ #124 #142]: #35
#713 := [mp #174 #712]: #708
#685 := (not #708)
#675 := (or #685 #348)
#334 := [quant-inst #94 #50]: #675
#676 := [unit-resolution #334 #713]: #348
#325 := [monotonicity #676]: #324
#326 := [trans #325 #339]: #99
#100 := (not #99)
#133 := [asserted]: #100
[unit-resolution #133 #326]: false
unsat
86f6f739d6e836607f1d98b07ede63d2576d444d 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#41 := f15
decl f4 :: S3
#7 := f4
#44 := (f3 f4 f15)
decl f14 :: S4
#40 := f14
#43 := (f3 f4 f14)
#45 := (= #43 #44)
#42 := (= f14 f15)
#75 := (not #42)
#76 := (or #75 #45)
#79 := (not #76)
#46 := (implies #42 #45)
#47 := (not #46)
#80 := (iff #47 #79)
#77 := (iff #46 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#74 := [asserted]: #47
#84 := [mp #74 #81]: #79
#82 := [not-or-elim #84]: #42
#263 := [monotonicity #82]: #45
#83 := (not #45)
#85 := [not-or-elim #84]: #83
[unit-resolution #85 #263]: false
unsat
226b5b35f9edf656c0cea4dba57d64e428e7d1be 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#41 := f15
decl f6 :: S3
#15 := f6
#44 := (f3 f6 f15)
decl f14 :: S4
#40 := f14
#43 := (f3 f6 f14)
#45 := (= #43 #44)
#42 := (= f14 f15)
#75 := (not #42)
#76 := (or #75 #45)
#79 := (not #76)
#46 := (implies #42 #45)
#47 := (not #46)
#80 := (iff #47 #79)
#77 := (iff #46 #76)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#74 := [asserted]: #47
#84 := [mp #74 #81]: #79
#82 := [not-or-elim #84]: #42
#263 := [monotonicity #82]: #45
#83 := (not #45)
#85 := [not-or-elim #84]: #83
[unit-resolution #85 #263]: false
unsat
7e1ce21ff788fbffd8dbff9dda94f87b4ae232e3 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#42 := f15
decl f4 :: S3
#7 := f4
#43 := (f3 f4 f15)
decl f14 :: S4
#40 := f14
#41 := (f3 f4 f14)
#44 := (= #41 #43)
#46 := (= f14 f15)
#47 := (not #46)
#77 := (or #44 #47)
#80 := (not #77)
#45 := (not #44)
#48 := (implies #45 #47)
#49 := (not #48)
#81 := (iff #49 #80)
#78 := (iff #48 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#76 := [asserted]: #49
#85 := [mp #76 #82]: #80
#84 := [not-or-elim #85]: #46
#263 := [monotonicity #84]: #44
#83 := [not-or-elim #85]: #45
[unit-resolution #83 #263]: false
unsat
ef77170e76e2077f1a99823990059fedc25a5572 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#42 := f15
decl f6 :: S3
#15 := f6
#43 := (f3 f6 f15)
decl f14 :: S4
#40 := f14
#41 := (f3 f6 f14)
#44 := (= #41 #43)
#46 := (= f14 f15)
#47 := (not #46)
#77 := (or #44 #47)
#80 := (not #77)
#45 := (not #44)
#48 := (implies #45 #47)
#49 := (not #48)
#81 := (iff #49 #80)
#78 := (iff #48 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#76 := [asserted]: #49
#85 := [mp #76 #82]: #80
#84 := [not-or-elim #85]: #46
#263 := [monotonicity #84]: #44
#83 := [not-or-elim #85]: #45
[unit-resolution #83 #263]: false
unsat
05fabc68a1647a6c0b540f035499c1b64021300b 39 0
#2 := false
#40 := 3::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f14 :: S2
#42 := f14
#41 := 4::Int
#43 := (f5 3::Int 4::Int f14)
decl f4 :: S3
#7 := f4
#44 := (f3 f4 #43)
#45 := (= #44 3::Int)
#46 := (not #45)
#73 := [asserted]: #46
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#165 := (pattern #11)
#12 := (f3 f4 #11)
#13 := (= #12 #8)
#166 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #165) #13)
#14 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #13)
#169 := (iff #14 #166)
#167 := (iff #13 #13)
#168 := [refl]: #167
#170 := [quant-intro #168]: #169
#77 := (~ #14 #14)
#75 := (~ #13 #13)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#67 := [asserted]: #14
#79 := [mp~ #67 #78]: #14
#171 := [mp #79 #170]: #166
#215 := (not #166)
#216 := (or #215 #45)
#217 := [quant-inst #40 #41 #42]: #216
[unit-resolution #217 #171 #73]: false
unsat
8c97cf80a4fd3efed9db6fad38cd7df3e7f9b9e4 39 0
#2 := false
#41 := 4::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f14 :: S2
#42 := f14
#40 := 3::Int
#43 := (f5 3::Int 4::Int f14)
decl f6 :: S3
#15 := f6
#44 := (f3 f6 #43)
#45 := (= #44 4::Int)
#46 := (not #45)
#73 := [asserted]: #46
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#165 := (pattern #11)
#16 := (f3 f6 #11)
#17 := (= #16 #9)
#172 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #165) #17)
#18 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #17)
#175 := (iff #18 #172)
#173 := (iff #17 #17)
#174 := [refl]: #173
#176 := [quant-intro #174]: #175
#82 := (~ #18 #18)
#80 := (~ #17 #17)
#81 := [refl]: #80
#83 := [nnf-pos #81]: #82
#68 := [asserted]: #18
#84 := [mp~ #68 #83]: #18
#177 := [mp #84 #176]: #172
#220 := (not #172)
#221 := (or #220 #45)
#222 := [quant-inst #40 #41 #42]: #221
[unit-resolution #222 #177 #73]: false
unsat
5637fa1d095ac7b67e6203665a505b9e7150a9ea 78 0
#2 := false
#41 := 4::Int
#40 := 3::Int
#234 := (= 3::Int 4::Int)
#236 := (iff #234 false)
#237 := [rewrite]: #236
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f14 :: S2
#42 := f14
#43 := (f5 3::Int 4::Int f14)
decl f6 :: S3
#15 := f6
#45 := (f3 f6 #43)
#216 := (= #45 4::Int)
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#170 := (pattern #11)
#16 := (f3 f6 #11)
#17 := (= #16 #9)
#177 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #170) #17)
#18 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #17)
#180 := (iff #18 #177)
#178 := (iff #17 #17)
#179 := [refl]: #178
#181 := [quant-intro #179]: #180
#87 := (~ #18 #18)
#85 := (~ #17 #17)
#86 := [refl]: #85
#88 := [nnf-pos #86]: #87
#70 := [asserted]: #18
#89 := [mp~ #70 #88]: #18
#182 := [mp #89 #181]: #177
#225 := (not #177)
#226 := (or #225 #216)
#227 := [quant-inst #40 #41 #42]: #226
#220 := [unit-resolution #227 #182]: #216
#232 := (= 3::Int #45)
#230 := (= #45 3::Int)
decl f4 :: S3
#7 := f4
#44 := (f3 f4 #43)
#215 := (= #44 3::Int)
#12 := (f3 f4 #11)
#13 := (= #12 #8)
#171 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #170) #13)
#14 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #13)
#174 := (iff #14 #171)
#172 := (iff #13 #13)
#173 := [refl]: #172
#175 := [quant-intro #173]: #174
#82 := (~ #14 #14)
#79 := (~ #13 #13)
#81 := [refl]: #79
#83 := [nnf-pos #81]: #82
#69 := [asserted]: #14
#84 := [mp~ #69 #83]: #14
#176 := [mp #84 #175]: #171
#221 := (not #171)
#222 := (or #221 #215)
#223 := [quant-inst #40 #41 #42]: #222
#224 := [unit-resolution #223 #176]: #215
#228 := (= #45 #44)
#46 := (= #44 #45)
#47 := (not #46)
#48 := (not #47)
#76 := (iff #48 #46)
#77 := [rewrite]: #76
#75 := [asserted]: #48
#80 := [mp #75 #77]: #46
#229 := [symm #80]: #228
#231 := [trans #229 #224]: #230
#233 := [symm #231]: #232
#235 := [trans #233 #220]: #234
[mp #235 #237]: false
unsat
d9a22c09a63e8097c5f432c6c4b67fcedd7364dd 73 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f15 :: S3
#49 := f15
#48 := 4::Int
#11 := 5::Int
#52 := (f7 5::Int 4::Int f15)
decl f11 :: (-> S2 S5 S5)
#47 := 3::Int
#50 := (f7 3::Int 4::Int f15)
decl f4 :: S2
#7 := f4
#51 := (f11 f4 #50)
#53 := (= #51 #52)
decl f3 :: (-> S2 Int Int)
#248 := (f3 f4 3::Int)
#249 := (f7 #248 4::Int f15)
#278 := (= #249 #52)
#276 := (= #52 #249)
#270 := (= 5::Int #248)
#266 := (= #248 5::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 5::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#86 := (~ #13 #13)
#84 := (~ #12 #12)
#85 := [refl]: #84
#87 := [nnf-pos #85]: #86
#75 := [asserted]: #13
#88 := [mp~ #75 #87]: #13
#271 := (not #13)
#272 := (or #271 #266)
#273 := [quant-inst #47]: #272
#267 := [unit-resolution #273 #88]: #266
#274 := [symm #267]: #270
#277 := [monotonicity #274]: #276
#279 := [symm #277]: #278
#252 := (= #51 #249)
#17 := (:var 0 S3)
#16 := (:var 1 Int)
#15 := (:var 2 Int)
#30 := (:var 3 S2)
#32 := (f3 #30 #15)
#33 := (f7 #32 #16 #17)
#198 := (pattern #33)
#18 := (f7 #15 #16 #17)
#31 := (f11 #30 #18)
#197 := (pattern #31)
#34 := (= #31 #33)
#199 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #197 #198) #34)
#35 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #34)
#202 := (iff #35 #199)
#200 := (iff #34 #34)
#201 := [refl]: #200
#203 := [quant-intro #201]: #202
#106 := (~ #35 #35)
#104 := (~ #34 #34)
#105 := [refl]: #104
#107 := [nnf-pos #105]: #106
#79 := [asserted]: #35
#108 := [mp~ #79 #107]: #35
#204 := [mp #108 #203]: #199
#255 := (not #199)
#256 := (or #255 #252)
#257 := [quant-inst #7 #47 #48 #49]: #256
#275 := [unit-resolution #257 #204]: #252
#280 := [trans #275 #279]: #53
#54 := (not #53)
#82 := [asserted]: #54
[unit-resolution #82 #280]: false
unsat
e70e3b07d4ab1c8f521998d618c1a33076aeafc7 73 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f15 :: S3
#49 := f15
#11 := 6::Int
#47 := 3::Int
#52 := (f7 3::Int 6::Int f15)
decl f12 :: (-> S2 S5 S5)
#48 := 4::Int
#50 := (f7 3::Int 4::Int f15)
decl f4 :: S2
#7 := f4
#51 := (f12 f4 #50)
#53 := (= #51 #52)
decl f3 :: (-> S2 Int Int)
#249 := (f3 f4 4::Int)
#250 := (f7 3::Int #249 f15)
#279 := (= #250 #52)
#277 := (= #52 #250)
#271 := (= 6::Int #249)
#267 := (= #249 6::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 6::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#86 := (~ #13 #13)
#84 := (~ #12 #12)
#85 := [refl]: #84
#87 := [nnf-pos #85]: #86
#75 := [asserted]: #13
#88 := [mp~ #75 #87]: #13
#272 := (not #13)
#273 := (or #272 #267)
#274 := [quant-inst #48]: #273
#268 := [unit-resolution #274 #88]: #267
#275 := [symm #268]: #271
#278 := [monotonicity #275]: #277
#280 := [symm #278]: #279
#253 := (= #51 #250)
#17 := (:var 0 S3)
#16 := (:var 1 Int)
#30 := (:var 3 S2)
#37 := (f3 #30 #16)
#15 := (:var 2 Int)
#38 := (f7 #15 #37 #17)
#207 := (pattern #38)
#18 := (f7 #15 #16 #17)
#36 := (f12 #30 #18)
#206 := (pattern #36)
#39 := (= #36 #38)
#208 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #206 #207) #39)
#40 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #39)
#211 := (iff #40 #208)
#209 := (iff #39 #39)
#210 := [refl]: #209
#212 := [quant-intro #210]: #211
#111 := (~ #40 #40)
#109 := (~ #39 #39)
#110 := [refl]: #109
#112 := [nnf-pos #110]: #111
#80 := [asserted]: #40
#113 := [mp~ #80 #112]: #40
#213 := [mp #113 #212]: #208
#256 := (not #208)
#257 := (or #256 #253)
#258 := [quant-inst #7 #47 #48 #49]: #257
#276 := [unit-resolution #258 #213]: #253
#281 := [trans #276 #280]: #53
#54 := (not #53)
#82 := [asserted]: #54
[unit-resolution #82 #281]: false
unsat
3f33aa966a616642cb71cfd28f64104ffe222a76 141 0
#2 := false
decl f16 :: S5
#53 := f16
decl f13 :: (-> S2 S5 S5)
decl f12 :: (-> S2 S5 S5)
decl f5 :: S2
#14 := f5
#57 := (f12 f5 f16)
decl f4 :: S2
#7 := f4
#58 := (f13 f4 #57)
#59 := (= #58 f16)
decl f8 :: (-> Int Int S3 S5)
decl f17 :: S3
#54 := f17
#11 := 4::Int
#17 := 3::Int
#55 := (f8 3::Int 4::Int f17)
#327 := (= #55 f16)
#56 := (= f16 #55)
#91 := (not #56)
#92 := (or #91 #59)
#95 := (not #92)
#60 := (implies #56 #59)
#61 := (not #60)
#96 := (iff #61 #95)
#93 := (iff #60 #92)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#90 := [asserted]: #61
#100 := [mp #90 #97]: #95
#98 := [not-or-elim #100]: #56
#328 := [symm #98]: #327
#331 := (= #58 #55)
decl f3 :: (-> S2 Int Int)
#285 := (f3 f4 4::Int)
#247 := (f3 f5 3::Int)
#289 := (f8 #247 #285 f17)
#325 := (= #289 #55)
#309 := (= #285 4::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 4::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#105 := (~ #13 #13)
#103 := (~ #12 #12)
#104 := [refl]: #103
#106 := [nnf-pos #104]: #105
#82 := [asserted]: #13
#107 := [mp~ #82 #106]: #13
#314 := (not #13)
#315 := (or #314 #309)
#316 := [quant-inst #11]: #315
#310 := [unit-resolution #316 #107]: #309
#281 := (= #247 3::Int)
#15 := (f3 f5 #8)
#16 := (pattern #15)
#18 := (= #15 3::Int)
#19 := (forall (vars (?v0 Int)) (:pat #16) #18)
#110 := (~ #19 #19)
#108 := (~ #18 #18)
#109 := [refl]: #108
#111 := [nnf-pos #109]: #110
#83 := [asserted]: #19
#112 := [mp~ #83 #111]: #19
#286 := (not #19)
#287 := (or #286 #281)
#288 := [quant-inst #17]: #287
#313 := [unit-resolution #288 #112]: #281
#326 := [monotonicity #313 #310]: #325
#329 := (= #58 #289)
#248 := (f8 #247 4::Int f17)
#282 := (f13 f4 #248)
#290 := (= #282 #289)
#23 := (:var 0 S3)
#22 := (:var 1 Int)
#36 := (:var 3 S2)
#43 := (f3 #36 #22)
#21 := (:var 2 Int)
#44 := (f8 #21 #43 #23)
#231 := (pattern #44)
#24 := (f8 #21 #22 #23)
#42 := (f13 #36 #24)
#230 := (pattern #42)
#45 := (= #42 #44)
#232 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #230 #231) #45)
#46 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #45)
#235 := (iff #46 #232)
#233 := (iff #45 #45)
#234 := [refl]: #233
#236 := [quant-intro #234]: #235
#135 := (~ #46 #46)
#133 := (~ #45 #45)
#134 := [refl]: #133
#136 := [nnf-pos #134]: #135
#88 := [asserted]: #46
#137 := [mp~ #88 #136]: #46
#237 := [mp #137 #236]: #232
#293 := (not #232)
#294 := (or #293 #290)
#295 := [quant-inst #7 #247 #11 #54]: #294
#317 := [unit-resolution #295 #237]: #290
#323 := (= #58 #282)
#321 := (= #57 #248)
#246 := (f12 f5 #55)
#252 := (= #246 #248)
#38 := (f3 #36 #21)
#39 := (f8 #38 #22 #23)
#223 := (pattern #39)
#37 := (f12 #36 #24)
#222 := (pattern #37)
#40 := (= #37 #39)
#224 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #222 #223) #40)
#41 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #40)
#227 := (iff #41 #224)
#225 := (iff #40 #40)
#226 := [refl]: #225
#228 := [quant-intro #226]: #227
#130 := (~ #41 #41)
#128 := (~ #40 #40)
#129 := [refl]: #128
#131 := [nnf-pos #129]: #130
#87 := [asserted]: #41
#132 := [mp~ #87 #131]: #41
#229 := [mp #132 #228]: #224
#255 := (not #224)
#256 := (or #255 #252)
#257 := [quant-inst #14 #17 #11 #54]: #256
#318 := [unit-resolution #257 #229]: #252
#319 := (= #57 #246)
#320 := [monotonicity #98]: #319
#322 := [trans #320 #318]: #321
#324 := [monotonicity #322]: #323
#330 := [trans #324 #317]: #329
#332 := [trans #330 #326]: #331
#333 := [trans #332 #328]: #59
#99 := (not #59)
#101 := [not-or-elim #100]: #99
[unit-resolution #101 #333]: false
unsat
a3dcd98b917fc07cd53b4a7609efe76d08dc0731 141 0
#2 := false
decl f16 :: S5
#53 := f16
decl f12 :: (-> S2 S5 S5)
decl f13 :: (-> S2 S5 S5)
decl f4 :: S2
#7 := f4
#57 := (f13 f4 f16)
decl f5 :: S2
#14 := f5
#58 := (f12 f5 #57)
#59 := (= #58 f16)
decl f8 :: (-> Int Int S3 S5)
decl f17 :: S3
#54 := f17
#11 := 4::Int
#17 := 3::Int
#55 := (f8 3::Int 4::Int f17)
#327 := (= #55 f16)
#56 := (= f16 #55)
#91 := (not #56)
#92 := (or #91 #59)
#95 := (not #92)
#60 := (implies #56 #59)
#61 := (not #60)
#96 := (iff #61 #95)
#93 := (iff #60 #92)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#90 := [asserted]: #61
#100 := [mp #90 #97]: #95
#98 := [not-or-elim #100]: #56
#328 := [symm #98]: #327
#331 := (= #58 #55)
decl f3 :: (-> S2 Int Int)
#247 := (f3 f4 4::Int)
#285 := (f3 f5 3::Int)
#289 := (f8 #285 #247 f17)
#325 := (= #289 #55)
#281 := (= #247 4::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 4::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#105 := (~ #13 #13)
#103 := (~ #12 #12)
#104 := [refl]: #103
#106 := [nnf-pos #104]: #105
#82 := [asserted]: #13
#107 := [mp~ #82 #106]: #13
#286 := (not #13)
#287 := (or #286 #281)
#288 := [quant-inst #11]: #287
#310 := [unit-resolution #288 #107]: #281
#309 := (= #285 3::Int)
#15 := (f3 f5 #8)
#16 := (pattern #15)
#18 := (= #15 3::Int)
#19 := (forall (vars (?v0 Int)) (:pat #16) #18)
#110 := (~ #19 #19)
#108 := (~ #18 #18)
#109 := [refl]: #108
#111 := [nnf-pos #109]: #110
#83 := [asserted]: #19
#112 := [mp~ #83 #111]: #19
#314 := (not #19)
#315 := (or #314 #309)
#316 := [quant-inst #17]: #315
#313 := [unit-resolution #316 #112]: #309
#326 := [monotonicity #313 #310]: #325
#329 := (= #58 #289)
#248 := (f8 3::Int #247 f17)
#282 := (f12 f5 #248)
#290 := (= #282 #289)
#23 := (:var 0 S3)
#22 := (:var 1 Int)
#21 := (:var 2 Int)
#36 := (:var 3 S2)
#38 := (f3 #36 #21)
#39 := (f8 #38 #22 #23)
#223 := (pattern #39)
#24 := (f8 #21 #22 #23)
#37 := (f12 #36 #24)
#222 := (pattern #37)
#40 := (= #37 #39)
#224 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #222 #223) #40)
#41 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #40)
#227 := (iff #41 #224)
#225 := (iff #40 #40)
#226 := [refl]: #225
#228 := [quant-intro #226]: #227
#130 := (~ #41 #41)
#128 := (~ #40 #40)
#129 := [refl]: #128
#131 := [nnf-pos #129]: #130
#87 := [asserted]: #41
#132 := [mp~ #87 #131]: #41
#229 := [mp #132 #228]: #224
#293 := (not #224)
#294 := (or #293 #290)
#295 := [quant-inst #14 #17 #247 #54]: #294
#317 := [unit-resolution #295 #229]: #290
#323 := (= #58 #282)
#321 := (= #57 #248)
#246 := (f13 f4 #55)
#252 := (= #246 #248)
#43 := (f3 #36 #22)
#44 := (f8 #21 #43 #23)
#231 := (pattern #44)
#42 := (f13 #36 #24)
#230 := (pattern #42)
#45 := (= #42 #44)
#232 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #230 #231) #45)
#46 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #45)
#235 := (iff #46 #232)
#233 := (iff #45 #45)
#234 := [refl]: #233
#236 := [quant-intro #234]: #235
#135 := (~ #46 #46)
#133 := (~ #45 #45)
#134 := [refl]: #133
#136 := [nnf-pos #134]: #135
#88 := [asserted]: #46
#137 := [mp~ #88 #136]: #46
#237 := [mp #137 #236]: #232
#255 := (not #232)
#256 := (or #255 #252)
#257 := [quant-inst #7 #17 #11 #54]: #256
#318 := [unit-resolution #257 #237]: #252
#319 := (= #57 #246)
#320 := [monotonicity #98]: #319
#322 := [trans #320 #318]: #321
#324 := [monotonicity #322]: #323
#330 := [trans #324 #317]: #329
#332 := [trans #330 #326]: #331
#333 := [trans #332 #328]: #59
#99 := (not #59)
#101 := [not-or-elim #100]: #99
[unit-resolution #101 #333]: false
unsat
37255a122064839766be2ce2cd0dc79437aeda41 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#73 := f26
decl f4 :: S3
#7 := f4
#76 := (f3 f4 f26)
decl f25 :: S4
#72 := f25
#75 := (f3 f4 f25)
#77 := (= #75 #76)
#74 := (= f25 f26)
#111 := (not #74)
#112 := (or #111 #77)
#115 := (not #112)
#78 := (implies #74 #77)
#79 := (not #78)
#116 := (iff #79 #115)
#113 := (iff #78 #112)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#110 := [asserted]: #79
#120 := [mp #110 #117]: #115
#118 := [not-or-elim #120]: #74
#318 := [monotonicity #118]: #77
#119 := (not #77)
#121 := [not-or-elim #120]: #119
[unit-resolution #121 #318]: false
unsat
f90472be23afe3d7903dfeef3cf374fc3fbde35e 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#73 := f26
decl f6 :: S3
#15 := f6
#76 := (f3 f6 f26)
decl f25 :: S4
#72 := f25
#75 := (f3 f6 f25)
#77 := (= #75 #76)
#74 := (= f25 f26)
#111 := (not #74)
#112 := (or #111 #77)
#115 := (not #112)
#78 := (implies #74 #77)
#79 := (not #78)
#116 := (iff #79 #115)
#113 := (iff #78 #112)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#110 := [asserted]: #79
#120 := [mp #110 #117]: #115
#118 := [not-or-elim #120]: #74
#318 := [monotonicity #118]: #77
#119 := (not #77)
#121 := [not-or-elim #120]: #119
[unit-resolution #121 #318]: false
unsat
3e714d78b380e794ca732c6150fdf6770ae1c84c 61 0
#2 := false
decl f1 :: S1
#3 := f1
decl f14 :: (-> S9 S4 S1)
decl f25 :: S4
#72 := f25
decl f15 :: S9
#40 := f15
#75 := (f14 f15 f25)
#76 := (= #75 f1)
decl f26 :: S4
#73 := f26
#77 := (f14 f15 f26)
#78 := (= #77 f1)
#643 := (iff #78 #76)
#79 := (iff #76 #78)
#649 := (= #75 #77)
#74 := (= f25 f26)
#113 := (not #74)
#114 := (or #113 #79)
#117 := (not #114)
#80 := (implies #74 #79)
#81 := (not #80)
#118 := (iff #81 #117)
#115 := (iff #80 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#112 := [asserted]: #81
#122 := [mp #112 #119]: #117
#120 := [not-or-elim #122]: #74
#305 := [monotonicity #120]: #649
#436 := [monotonicity #305]: #79
#316 := [symm #436]: #643
#149 := (not #76)
#325 := (not #78)
#317 := (iff #325 #149)
#650 := [monotonicity #316]: #317
#311 := [hypothesis]: #325
#651 := [mp #311 #650]: #149
#328 := (or #76 #78)
#150 := (iff #149 #78)
#121 := (not #79)
#151 := (iff #121 #150)
#152 := [rewrite]: #151
#123 := [not-or-elim #122]: #121
#153 := [mp #123 #152]: #150
#326 := (not #150)
#330 := (or #76 #78 #326)
#331 := [def-axiom]: #330
#332 := [unit-resolution #331 #153]: #328
#647 := [unit-resolution #332 #311]: #76
#652 := [unit-resolution #647 #651]: false
#653 := [lemma #652]: #78
#654 := [mp #653 #316]: #76
#318 := (or #149 #325)
#242 := (or #149 #325 #326)
#327 := [def-axiom]: #242
#329 := [unit-resolution #327 #153]: #318
#648 := [unit-resolution #329 #653]: #149
[unit-resolution #648 #654]: false
unsat
c1732efb8247153476fddeec24d6e45ea69ce202 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#74 := f26
decl f4 :: S3
#7 := f4
#75 := (f3 f4 f26)
decl f25 :: S4
#72 := f25
#73 := (f3 f4 f25)
#76 := (= #73 #75)
#78 := (= f25 f26)
#79 := (not #78)
#113 := (or #76 #79)
#116 := (not #113)
#77 := (not #76)
#80 := (implies #77 #79)
#81 := (not #80)
#117 := (iff #81 #116)
#114 := (iff #80 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#112 := [asserted]: #81
#121 := [mp #112 #118]: #116
#120 := [not-or-elim #121]: #78
#318 := [monotonicity #120]: #76
#119 := [not-or-elim #121]: #77
[unit-resolution #119 #318]: false
unsat
195808c9b73d3e779441cc672e062afbf5c02bef 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#74 := f26
decl f6 :: S3
#15 := f6
#75 := (f3 f6 f26)
decl f25 :: S4
#72 := f25
#73 := (f3 f6 f25)
#76 := (= #73 #75)
#78 := (= f25 f26)
#79 := (not #78)
#113 := (or #76 #79)
#116 := (not #113)
#77 := (not #76)
#80 := (implies #77 #79)
#81 := (not #80)
#117 := (iff #81 #116)
#114 := (iff #80 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#112 := [asserted]: #81
#121 := [mp #112 #118]: #116
#120 := [not-or-elim #121]: #78
#318 := [monotonicity #120]: #76
#119 := [not-or-elim #121]: #77
[unit-resolution #119 #318]: false
unsat
0ed7d8750f50d1bb9c926ffbefc40143380c759c 66 0
#2 := false
decl f1 :: S1
#3 := f1
decl f14 :: (-> S9 S4 S1)
decl f25 :: S4
#72 := f25
decl f15 :: S9
#40 := f15
#73 := (f14 f15 f25)
#74 := (= #73 f1)
decl f26 :: S4
#75 := f26
#76 := (f14 f15 f26)
#77 := (= #76 f1)
#648 := (iff #77 #74)
#78 := (iff #74 #77)
#654 := (= #73 #76)
#80 := (= f25 f26)
#81 := (not #80)
#122 := (or #78 #81)
#127 := (not #122)
#79 := (not #78)
#82 := (implies #79 #81)
#83 := (not #82)
#128 := (iff #83 #127)
#125 := (iff #82 #122)
#115 := (not #74)
#116 := (iff #115 #77)
#119 := (implies #116 #81)
#123 := (iff #119 #122)
#124 := [rewrite]: #123
#120 := (iff #82 #119)
#117 := (iff #79 #116)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#126 := [trans #121 #124]: #125
#129 := [monotonicity #126]: #128
#114 := [asserted]: #83
#132 := [mp #114 #129]: #127
#131 := [not-or-elim #132]: #80
#310 := [monotonicity #131]: #654
#441 := [monotonicity #310]: #78
#321 := [symm #441]: #648
#330 := (not #77)
#322 := (iff #330 #115)
#655 := [monotonicity #321]: #322
#316 := [hypothesis]: #330
#656 := [mp #316 #655]: #115
#333 := (or #74 #77)
#130 := [not-or-elim #132]: #79
#156 := [mp #130 #118]: #116
#331 := (not #116)
#335 := (or #74 #77 #331)
#336 := [def-axiom]: #335
#337 := [unit-resolution #336 #156]: #333
#652 := [unit-resolution #337 #316]: #74
#657 := [unit-resolution #652 #656]: false
#658 := [lemma #657]: #77
#659 := [mp #658 #321]: #74
#323 := (or #115 #330)
#247 := (or #115 #330 #331)
#332 := [def-axiom]: #247
#334 := [unit-resolution #332 #156]: #323
#653 := [unit-resolution #334 #658]: #115
[unit-resolution #653 #659]: false
unsat
cedfd03a27d5c110cccc13a70c0f9d024f224ead 47 0
#2 := false
#72 := 3::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#76 := f26
decl f17 :: (-> S11 S1 S10)
decl f25 :: S1
#74 := f25
decl f18 :: S11
#42 := f18
#75 := (f17 f18 f25)
#77 := (f16 #75 f26)
#73 := 4::Int
#78 := (f5 3::Int 4::Int #77)
decl f4 :: S3
#7 := f4
#79 := (f3 f4 #78)
#80 := (= #79 3::Int)
#81 := (not #80)
#112 := [asserted]: #81
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#224 := (pattern #11)
#12 := (f3 f4 #11)
#13 := (= #12 #8)
#225 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #224) #13)
#14 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #13)
#228 := (iff #14 #225)
#226 := (iff #13 #13)
#227 := [refl]: #226
#229 := [quant-intro #227]: #228
#116 := (~ #14 #14)
#114 := (~ #13 #13)
#115 := [refl]: #114
#117 := [nnf-pos #115]: #116
#102 := [asserted]: #14
#118 := [mp~ #102 #117]: #14
#230 := [mp #118 #229]: #225
#326 := (not #225)
#327 := (or #326 #80)
#328 := [quant-inst #72 #73 #77]: #327
[unit-resolution #328 #230 #112]: false
unsat
0b6022e30e4e5ac8cb4953d3a4c8504f4a0609a0 47 0
#2 := false
#73 := 4::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#76 := f26
decl f17 :: (-> S11 S1 S10)
decl f25 :: S1
#74 := f25
decl f18 :: S11
#42 := f18
#75 := (f17 f18 f25)
#77 := (f16 #75 f26)
#72 := 3::Int
#78 := (f5 3::Int 4::Int #77)
decl f6 :: S3
#15 := f6
#79 := (f3 f6 #78)
#80 := (= #79 4::Int)
#81 := (not #80)
#112 := [asserted]: #81
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#224 := (pattern #11)
#16 := (f3 f6 #11)
#17 := (= #16 #9)
#231 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #224) #17)
#18 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #17)
#234 := (iff #18 #231)
#232 := (iff #17 #17)
#233 := [refl]: #232
#235 := [quant-intro #233]: #234
#121 := (~ #18 #18)
#119 := (~ #17 #17)
#120 := [refl]: #119
#122 := [nnf-pos #120]: #121
#103 := [asserted]: #18
#123 := [mp~ #103 #122]: #18
#236 := [mp #123 #235]: #231
#331 := (not #231)
#332 := (or #331 #80)
#333 := [quant-inst #72 #73 #77]: #332
[unit-resolution #333 #236 #112]: false
unsat
2ca5cee26ef695e3928e07d0a44c659cea20c0b2 85 0
#2 := false
decl f1 :: S1
#3 := f1
decl f25 :: S1
#74 := f25
#81 := (= f25 f1)
#303 := (not #81)
#341 := [hypothesis]: #303
decl f14 :: (-> S9 S4 S1)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#76 := f26
decl f17 :: (-> S11 S1 S10)
decl f18 :: S11
#42 := f18
#75 := (f17 f18 f25)
#77 := (f16 #75 f26)
#73 := 4::Int
#72 := 3::Int
#78 := (f5 3::Int 4::Int #77)
decl f15 :: S9
#40 := f15
#79 := (f14 f15 #78)
#80 := (= #79 f1)
#311 := (or #80 #81)
#115 := (not #80)
#116 := (iff #115 #81)
#82 := (iff #80 #81)
#83 := (not #82)
#117 := (iff #83 #116)
#118 := [rewrite]: #117
#114 := [asserted]: #83
#121 := [mp #114 #118]: #116
#304 := (not #116)
#309 := (or #80 #81 #304)
#310 := [def-axiom]: #309
#312 := [unit-resolution #310 #121]: #311
#342 := [unit-resolution #312 #341]: #80
#347 := (or #115 #81)
#45 := (:var 0 S8)
#43 := (:var 1 S1)
#44 := (f17 f18 #43)
#46 := (f16 #44 #45)
#8 := (:var 2 Int)
#41 := (:var 3 Int)
#47 := (f5 #41 #8 #46)
#274 := (pattern #47)
#50 := (= #43 f1)
#48 := (f14 f15 #47)
#49 := (= #48 f1)
#51 := (iff #49 #50)
#275 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S8)) (:pat #274) #51)
#52 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S8)) #51)
#278 := (iff #52 #275)
#276 := (iff #51 #51)
#277 := [refl]: #276
#279 := [quant-intro #277]: #278
#153 := (~ #52 #52)
#151 := (~ #51 #51)
#152 := [refl]: #151
#154 := [nnf-pos #152]: #153
#110 := [asserted]: #52
#155 := [mp~ #110 #154]: #52
#280 := [mp #155 #279]: #275
#315 := (not #275)
#316 := (or #315 #82)
#317 := [quant-inst #72 #73 #74 #76]: #316
#346 := [unit-resolution #317 #280]: #82
#320 := (or #83 #115 #81)
#321 := [def-axiom]: #320
#348 := [unit-resolution #321 #346]: #347
#349 := [unit-resolution #348 #342 #341]: false
#350 := [lemma #349]: #81
#307 := (or #115 #303)
#305 := (or #115 #303 #304)
#306 := [def-axiom]: #305
#308 := [unit-resolution #306 #121]: #307
#351 := [unit-resolution #308 #350]: #115
#352 := (or #80 #303)
#318 := (or #83 #80 #303)
#319 := [def-axiom]: #318
#353 := [unit-resolution #319 #346]: #352
[unit-resolution #353 #351 #350]: false
unsat
6499be1d029719ef95b78f1d0320c11c7fb7a571 86 0
#2 := false
#73 := 4::Int
#72 := 3::Int
#345 := (= 3::Int 4::Int)
#347 := (iff #345 false)
#348 := [rewrite]: #347
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#76 := f26
decl f17 :: (-> S11 S1 S10)
decl f25 :: S1
#74 := f25
decl f18 :: S11
#42 := f18
#75 := (f17 f18 f25)
#77 := (f16 #75 f26)
#78 := (f5 3::Int 4::Int #77)
decl f6 :: S3
#15 := f6
#80 := (f3 f6 #78)
#327 := (= #80 4::Int)
#10 := (:var 0 S2)
#9 := (:var 1 Int)
#8 := (:var 2 Int)
#11 := (f5 #8 #9 #10)
#229 := (pattern #11)
#16 := (f3 f6 #11)
#17 := (= #16 #9)
#236 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #229) #17)
#18 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #17)
#239 := (iff #18 #236)
#237 := (iff #17 #17)
#238 := [refl]: #237
#240 := [quant-intro #238]: #239
#126 := (~ #18 #18)
#124 := (~ #17 #17)
#125 := [refl]: #124
#127 := [nnf-pos #125]: #126
#105 := [asserted]: #18
#128 := [mp~ #105 #127]: #18
#241 := [mp #128 #240]: #236
#336 := (not #236)
#337 := (or #336 #327)
#338 := [quant-inst #72 #73 #77]: #337
#331 := [unit-resolution #338 #241]: #327
#343 := (= 3::Int #80)
#341 := (= #80 3::Int)
decl f4 :: S3
#7 := f4
#79 := (f3 f4 #78)
#326 := (= #79 3::Int)
#12 := (f3 f4 #11)
#13 := (= #12 #8)
#230 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #229) #13)
#14 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #13)
#233 := (iff #14 #230)
#231 := (iff #13 #13)
#232 := [refl]: #231
#234 := [quant-intro #232]: #233
#121 := (~ #14 #14)
#118 := (~ #13 #13)
#120 := [refl]: #118
#122 := [nnf-pos #120]: #121
#104 := [asserted]: #14
#123 := [mp~ #104 #122]: #14
#235 := [mp #123 #234]: #230
#332 := (not #230)
#333 := (or #332 #326)
#334 := [quant-inst #72 #73 #77]: #333
#335 := [unit-resolution #334 #235]: #326
#339 := (= #80 #79)
#81 := (= #79 #80)
#82 := (not #81)
#83 := (not #82)
#115 := (iff #83 #81)
#116 := [rewrite]: #115
#114 := [asserted]: #83
#119 := [mp #114 #116]: #81
#340 := [symm #119]: #339
#342 := [trans #340 #335]: #341
#344 := [symm #342]: #343
#346 := [trans #344 #331]: #345
[mp #346 #348]: false
unsat
bcff91b655305f168f8e2a483ead6b7d06750eb4 81 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f17 :: (-> S10 S8 S3)
decl f27 :: S8
#83 := f27
decl f18 :: (-> S11 S1 S10)
decl f26 :: S1
#81 := f26
decl f19 :: S11
#49 := f19
#82 := (f18 f19 f26)
#84 := (f17 #82 f27)
#80 := 4::Int
#11 := 5::Int
#87 := (f7 5::Int 4::Int #84)
decl f11 :: (-> S2 S5 S5)
#79 := 3::Int
#85 := (f7 3::Int 4::Int #84)
decl f4 :: S2
#7 := f4
#86 := (f11 f4 #85)
#88 := (= #86 #87)
decl f3 :: (-> S2 Int Int)
#378 := (f3 f4 3::Int)
#379 := (f7 #378 4::Int #84)
#427 := (= #379 #87)
#425 := (= #87 #379)
#419 := (= 5::Int #378)
#415 := (= #378 5::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 5::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#125 := (~ #13 #13)
#123 := (~ #12 #12)
#124 := [refl]: #123
#126 := [nnf-pos #124]: #125
#110 := [asserted]: #13
#127 := [mp~ #110 #126]: #13
#420 := (not #13)
#421 := (or #420 #415)
#422 := [quant-inst #79]: #421
#416 := [unit-resolution #422 #127]: #415
#423 := [symm #416]: #419
#426 := [monotonicity #423]: #425
#428 := [symm #426]: #427
#382 := (= #86 #379)
#17 := (:var 0 S3)
#16 := (:var 1 Int)
#15 := (:var 2 Int)
#30 := (:var 3 S2)
#32 := (f3 #30 #15)
#33 := (f7 #32 #16 #17)
#257 := (pattern #33)
#18 := (f7 #15 #16 #17)
#31 := (f11 #30 #18)
#256 := (pattern #31)
#34 := (= #31 #33)
#258 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #256 #257) #34)
#35 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #34)
#261 := (iff #35 #258)
#259 := (iff #34 #34)
#260 := [refl]: #259
#262 := [quant-intro #260]: #261
#145 := (~ #35 #35)
#143 := (~ #34 #34)
#144 := [refl]: #143
#146 := [nnf-pos #144]: #145
#114 := [asserted]: #35
#147 := [mp~ #114 #146]: #35
#263 := [mp #147 #262]: #258
#385 := (not #258)
#386 := (or #385 #382)
#387 := [quant-inst #7 #79 #80 #84]: #386
#424 := [unit-resolution #387 #263]: #382
#429 := [trans #424 #428]: #88
#89 := (not #88)
#121 := [asserted]: #89
[unit-resolution #121 #429]: false
unsat
7462b61994002d474ce748e537732218cde820f6 81 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f17 :: (-> S10 S8 S3)
decl f27 :: S8
#83 := f27
decl f18 :: (-> S11 S1 S10)
decl f26 :: S1
#81 := f26
decl f19 :: S11
#49 := f19
#82 := (f18 f19 f26)
#84 := (f17 #82 f27)
#11 := 6::Int
#79 := 3::Int
#87 := (f7 3::Int 6::Int #84)
decl f12 :: (-> S2 S5 S5)
#80 := 4::Int
#85 := (f7 3::Int 4::Int #84)
decl f4 :: S2
#7 := f4
#86 := (f12 f4 #85)
#88 := (= #86 #87)
decl f3 :: (-> S2 Int Int)
#379 := (f3 f4 4::Int)
#380 := (f7 3::Int #379 #84)
#428 := (= #380 #87)
#426 := (= #87 #380)
#420 := (= 6::Int #379)
#416 := (= #379 6::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 6::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#125 := (~ #13 #13)
#123 := (~ #12 #12)
#124 := [refl]: #123
#126 := [nnf-pos #124]: #125
#110 := [asserted]: #13
#127 := [mp~ #110 #126]: #13
#421 := (not #13)
#422 := (or #421 #416)
#423 := [quant-inst #80]: #422
#417 := [unit-resolution #423 #127]: #416
#424 := [symm #417]: #420
#427 := [monotonicity #424]: #426
#429 := [symm #427]: #428
#383 := (= #86 #380)
#17 := (:var 0 S3)
#16 := (:var 1 Int)
#30 := (:var 3 S2)
#37 := (f3 #30 #16)
#15 := (:var 2 Int)
#38 := (f7 #15 #37 #17)
#266 := (pattern #38)
#18 := (f7 #15 #16 #17)
#36 := (f12 #30 #18)
#265 := (pattern #36)
#39 := (= #36 #38)
#267 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #265 #266) #39)
#40 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #39)
#270 := (iff #40 #267)
#268 := (iff #39 #39)
#269 := [refl]: #268
#271 := [quant-intro #269]: #270
#150 := (~ #40 #40)
#148 := (~ #39 #39)
#149 := [refl]: #148
#151 := [nnf-pos #149]: #150
#115 := [asserted]: #40
#152 := [mp~ #115 #151]: #40
#272 := [mp #152 #271]: #267
#386 := (not #267)
#387 := (or #386 #383)
#388 := [quant-inst #7 #79 #80 #84]: #387
#425 := [unit-resolution #388 #272]: #383
#430 := [trans #425 #429]: #88
#89 := (not #88)
#121 := [asserted]: #89
[unit-resolution #121 #430]: false
unsat
ffaca458bf7a853e37afab709d490432c7fad3af 233 0
#2 := false
decl f28 :: S6
#92 := f28
decl f25 :: (-> S3 S6 S6)
decl f15 :: (-> S2 S6 S6)
decl f14 :: (-> S2 S6 S6)
decl f5 :: S2
#14 := f5
#98 := (f14 f5 f28)
decl f4 :: S2
#7 := f4
#99 := (f15 f4 #98)
decl f7 :: S3
#20 := f7
#100 := (f25 f7 #99)
#101 := (= #100 f28)
decl f10 :: (-> Int Int S4 S6)
decl f20 :: (-> S11 S9 S4)
decl f29 :: S9
#94 := f29
decl f21 :: (-> S12 S1 S11)
decl f1 :: S1
#3 := f1
decl f22 :: S12
#62 := f22
#93 := (f21 f22 f1)
#95 := (f20 #93 f29)
#11 := 4::Int
#17 := 3::Int
#96 := (f10 3::Int 4::Int #95)
#583 := (= #96 f28)
#97 := (= f28 #96)
#144 := (not #97)
#145 := (or #144 #101)
#148 := (not #145)
#102 := (implies #97 #101)
#103 := (not #102)
#149 := (iff #103 #148)
#146 := (iff #102 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#143 := [asserted]: #103
#153 := [mp #143 #150]: #148
#151 := [not-or-elim #153]: #97
#584 := [symm #151]: #583
#587 := (= #100 #96)
decl f6 :: (-> S3 S1 S1)
#496 := (f6 f7 f1)
#500 := (f21 f22 #496)
#501 := (f20 #500 f29)
decl f3 :: (-> S2 Int Int)
#445 := (f3 f4 4::Int)
#502 := (f10 3::Int #445 #501)
#581 := (= #502 #96)
#556 := (= #501 #95)
#549 := (= #500 #93)
#510 := (= #496 f1)
#21 := (:var 0 S1)
#22 := (f6 f7 #21)
#23 := (pattern #22)
#24 := (= #22 f1)
#129 := (forall (vars (?v0 S1)) (:pat #23) #24)
#168 := (~ #129 #129)
#166 := (~ #24 #24)
#167 := [refl]: #166
#169 := [nnf-pos #167]: #168
#1 := true
#25 := (iff #24 true)
#26 := (forall (vars (?v0 S1)) (:pat #23) #25)
#130 := (iff #26 #129)
#127 := (iff #25 #24)
#128 := [rewrite]: #127
#131 := [quant-intro #128]: #130
#126 := [asserted]: #26
#134 := [mp #126 #131]: #129
#170 := [mp~ #134 #169]: #129
#552 := (not #129)
#553 := (or #552 #510)
#554 := [quant-inst #3]: #553
#548 := [unit-resolution #554 #170]: #510
#555 := [monotonicity #548]: #549
#557 := [monotonicity #555]: #556
#492 := (= #445 4::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 4::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#158 := (~ #13 #13)
#156 := (~ #12 #12)
#157 := [refl]: #156
#159 := [nnf-pos #157]: #158
#124 := [asserted]: #13
#160 := [mp~ #124 #159]: #13
#497 := (not #13)
#498 := (or #497 #492)
#499 := [quant-inst #11]: #498
#558 := [unit-resolution #499 #160]: #492
#582 := [monotonicity #558 #557]: #581
#585 := (= #100 #502)
#451 := (f10 3::Int #445 #95)
#493 := (f25 f7 #451)
#503 := (= #493 #502)
#65 := (:var 0 S9)
#63 := (:var 1 S1)
#77 := (:var 4 S3)
#79 := (f6 #77 #63)
#80 := (f21 f22 #79)
#81 := (f20 #80 #65)
#28 := (:var 2 Int)
#61 := (:var 3 Int)
#82 := (f10 #61 #28 #81)
#338 := (pattern #82)
#64 := (f21 f22 #63)
#66 := (f20 #64 #65)
#67 := (f10 #61 #28 #66)
#78 := (f25 #77 #67)
#337 := (pattern #78)
#83 := (= #78 #82)
#339 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) (:pat #337 #338) #83)
#84 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) #83)
#342 := (iff #84 #339)
#340 := (iff #83 #83)
#341 := [refl]: #340
#343 := [quant-intro #341]: #342
#213 := (~ #84 #84)
#211 := (~ #83 #83)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#141 := [asserted]: #84
#215 := [mp~ #141 #214]: #84
#344 := [mp #215 #343]: #339
#506 := (not #339)
#507 := (or #506 #503)
#508 := [quant-inst #20 #17 #445 #3 #94]: #507
#559 := [unit-resolution #508 #344]: #503
#579 := (= #100 #493)
#577 := (= #99 #451)
#355 := (f3 f5 3::Int)
#449 := (f10 #355 #445 #95)
#573 := (= #449 #451)
#571 := (= #451 #449)
#561 := (= 3::Int #355)
#441 := (= #355 3::Int)
#15 := (f3 f5 #8)
#16 := (pattern #15)
#18 := (= #15 3::Int)
#19 := (forall (vars (?v0 Int)) (:pat #16) #18)
#163 := (~ #19 #19)
#161 := (~ #18 #18)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#125 := [asserted]: #19
#165 := [mp~ #125 #164]: #19
#446 := (not #19)
#447 := (or #446 #441)
#448 := [quant-inst #17]: #447
#560 := [unit-resolution #448 #165]: #441
#562 := [symm #560]: #561
#572 := [monotonicity #562]: #571
#574 := [symm #572]: #573
#575 := (= #99 #449)
#354 := (f10 #355 4::Int #95)
#442 := (f15 f4 #354)
#450 := (= #442 #449)
#30 := (:var 0 S4)
#29 := (:var 1 Int)
#43 := (:var 3 S2)
#50 := (f3 #43 #29)
#51 := (f10 #28 #50 #30)
#309 := (pattern #51)
#31 := (f10 #28 #29 #30)
#49 := (f15 #43 #31)
#308 := (pattern #49)
#52 := (= #49 #51)
#310 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #308 #309) #52)
#53 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #52)
#313 := (iff #53 #310)
#311 := (iff #52 #52)
#312 := [refl]: #311
#314 := [quant-intro #312]: #313
#193 := (~ #53 #53)
#191 := (~ #52 #52)
#192 := [refl]: #191
#194 := [nnf-pos #192]: #193
#137 := [asserted]: #53
#195 := [mp~ #137 #194]: #53
#315 := [mp #195 #314]: #310
#453 := (not #310)
#454 := (or #453 #450)
#455 := [quant-inst #7 #355 #11 #95]: #454
#563 := [unit-resolution #455 #315]: #450
#569 := (= #99 #442)
#567 := (= #98 #354)
#353 := (f14 f5 #96)
#361 := (= #353 #354)
#45 := (f3 #43 #28)
#46 := (f10 #45 #29 #30)
#301 := (pattern #46)
#44 := (f14 #43 #31)
#300 := (pattern #44)
#47 := (= #44 #46)
#302 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #300 #301) #47)
#48 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #47)
#305 := (iff #48 #302)
#303 := (iff #47 #47)
#304 := [refl]: #303
#306 := [quant-intro #304]: #305
#188 := (~ #48 #48)
#186 := (~ #47 #47)
#187 := [refl]: #186
#189 := [nnf-pos #187]: #188
#136 := [asserted]: #48
#190 := [mp~ #136 #189]: #48
#307 := [mp #190 #306]: #302
#364 := (not #302)
#365 := (or #364 #361)
#366 := [quant-inst #14 #17 #11 #95]: #365
#564 := [unit-resolution #366 #307]: #361
#565 := (= #98 #353)
#566 := [monotonicity #151]: #565
#568 := [trans #566 #564]: #567
#570 := [monotonicity #568]: #569
#576 := [trans #570 #563]: #575
#578 := [trans #576 #574]: #577
#580 := [monotonicity #578]: #579
#586 := [trans #580 #559]: #585
#588 := [trans #586 #582]: #587
#589 := [trans #588 #584]: #101
#152 := (not #101)
#154 := [not-or-elim #153]: #152
[unit-resolution #154 #589]: false
unsat
9055acfd16334a78cb7c2c28508fdebc2b7c7f63 233 0
#2 := false
decl f28 :: S6
#92 := f28
decl f14 :: (-> S2 S6 S6)
decl f25 :: (-> S3 S6 S6)
decl f15 :: (-> S2 S6 S6)
decl f4 :: S2
#7 := f4
#98 := (f15 f4 f28)
decl f7 :: S3
#20 := f7
#99 := (f25 f7 #98)
decl f5 :: S2
#14 := f5
#100 := (f14 f5 #99)
#101 := (= #100 f28)
decl f10 :: (-> Int Int S4 S6)
decl f20 :: (-> S11 S9 S4)
decl f29 :: S9
#94 := f29
decl f21 :: (-> S12 S1 S11)
decl f1 :: S1
#3 := f1
decl f22 :: S12
#62 := f22
#93 := (f21 f22 f1)
#95 := (f20 #93 f29)
#11 := 4::Int
#17 := 3::Int
#96 := (f10 3::Int 4::Int #95)
#583 := (= #96 f28)
#97 := (= f28 #96)
#144 := (not #97)
#145 := (or #144 #101)
#148 := (not #145)
#102 := (implies #97 #101)
#103 := (not #102)
#149 := (iff #103 #148)
#146 := (iff #102 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#143 := [asserted]: #103
#153 := [mp #143 #150]: #148
#151 := [not-or-elim #153]: #97
#584 := [symm #151]: #583
#587 := (= #100 #96)
decl f6 :: (-> S3 S1 S1)
#445 := (f6 f7 f1)
#449 := (f21 f22 #445)
#450 := (f20 #449 f29)
decl f3 :: (-> S2 Int Int)
#493 := (f3 f5 3::Int)
#499 := (f10 #493 4::Int #450)
#581 := (= #499 #96)
#556 := (= #450 #95)
#551 := (= #449 #93)
#459 := (= #445 f1)
#21 := (:var 0 S1)
#22 := (f6 f7 #21)
#23 := (pattern #22)
#24 := (= #22 f1)
#129 := (forall (vars (?v0 S1)) (:pat #23) #24)
#168 := (~ #129 #129)
#166 := (~ #24 #24)
#167 := [refl]: #166
#169 := [nnf-pos #167]: #168
#1 := true
#25 := (iff #24 true)
#26 := (forall (vars (?v0 S1)) (:pat #23) #25)
#130 := (iff #26 #129)
#127 := (iff #25 #24)
#128 := [rewrite]: #127
#131 := [quant-intro #128]: #130
#126 := [asserted]: #26
#134 := [mp #126 #131]: #129
#170 := [mp~ #134 #169]: #129
#496 := (not #129)
#497 := (or #496 #459)
#498 := [quant-inst #3]: #497
#548 := [unit-resolution #498 #170]: #459
#555 := [monotonicity #548]: #551
#557 := [monotonicity #555]: #556
#547 := (= #493 3::Int)
#8 := (:var 0 Int)
#15 := (f3 f5 #8)
#16 := (pattern #15)
#18 := (= #15 3::Int)
#19 := (forall (vars (?v0 Int)) (:pat #16) #18)
#163 := (~ #19 #19)
#161 := (~ #18 #18)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#125 := [asserted]: #19
#165 := [mp~ #125 #164]: #19
#552 := (not #19)
#553 := (or #552 #547)
#554 := [quant-inst #17]: #553
#558 := [unit-resolution #554 #165]: #547
#582 := [monotonicity #558 #557]: #581
#585 := (= #100 #499)
#453 := (f10 3::Int 4::Int #450)
#492 := (f14 f5 #453)
#500 := (= #492 #499)
#30 := (:var 0 S4)
#29 := (:var 1 Int)
#28 := (:var 2 Int)
#43 := (:var 3 S2)
#45 := (f3 #43 #28)
#46 := (f10 #45 #29 #30)
#301 := (pattern #46)
#31 := (f10 #28 #29 #30)
#44 := (f14 #43 #31)
#300 := (pattern #44)
#47 := (= #44 #46)
#302 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #300 #301) #47)
#48 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #47)
#305 := (iff #48 #302)
#303 := (iff #47 #47)
#304 := [refl]: #303
#306 := [quant-intro #304]: #305
#188 := (~ #48 #48)
#186 := (~ #47 #47)
#187 := [refl]: #186
#189 := [nnf-pos #187]: #188
#136 := [asserted]: #48
#190 := [mp~ #136 #189]: #48
#307 := [mp #190 #306]: #302
#503 := (not #302)
#504 := (or #503 #500)
#505 := [quant-inst #14 #17 #11 #450]: #504
#559 := [unit-resolution #505 #307]: #500
#579 := (= #100 #492)
#577 := (= #99 #453)
#355 := (f3 f4 4::Int)
#451 := (f10 3::Int #355 #450)
#573 := (= #451 #453)
#571 := (= #453 #451)
#561 := (= 4::Int #355)
#441 := (= #355 4::Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 4::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#158 := (~ #13 #13)
#156 := (~ #12 #12)
#157 := [refl]: #156
#159 := [nnf-pos #157]: #158
#124 := [asserted]: #13
#160 := [mp~ #124 #159]: #13
#446 := (not #13)
#447 := (or #446 #441)
#448 := [quant-inst #11]: #447
#560 := [unit-resolution #448 #160]: #441
#562 := [symm #560]: #561
#572 := [monotonicity #562]: #571
#574 := [symm #572]: #573
#575 := (= #99 #451)
#354 := (f10 3::Int #355 #95)
#442 := (f25 f7 #354)
#452 := (= #442 #451)
#65 := (:var 0 S9)
#63 := (:var 1 S1)
#77 := (:var 4 S3)
#79 := (f6 #77 #63)
#80 := (f21 f22 #79)
#81 := (f20 #80 #65)
#61 := (:var 3 Int)
#82 := (f10 #61 #28 #81)
#338 := (pattern #82)
#64 := (f21 f22 #63)
#66 := (f20 #64 #65)
#67 := (f10 #61 #28 #66)
#78 := (f25 #77 #67)
#337 := (pattern #78)
#83 := (= #78 #82)
#339 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) (:pat #337 #338) #83)
#84 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) #83)
#342 := (iff #84 #339)
#340 := (iff #83 #83)
#341 := [refl]: #340
#343 := [quant-intro #341]: #342
#213 := (~ #84 #84)
#211 := (~ #83 #83)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#141 := [asserted]: #84
#215 := [mp~ #141 #214]: #84
#344 := [mp #215 #343]: #339
#455 := (not #339)
#456 := (or #455 #452)
#457 := [quant-inst #20 #17 #355 #3 #94]: #456
#563 := [unit-resolution #457 #344]: #452
#569 := (= #99 #442)
#567 := (= #98 #354)
#353 := (f15 f4 #96)
#361 := (= #353 #354)
#50 := (f3 #43 #29)
#51 := (f10 #28 #50 #30)
#309 := (pattern #51)
#49 := (f15 #43 #31)
#308 := (pattern #49)
#52 := (= #49 #51)
#310 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #308 #309) #52)
#53 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #52)
#313 := (iff #53 #310)
#311 := (iff #52 #52)
#312 := [refl]: #311
#314 := [quant-intro #312]: #313
#193 := (~ #53 #53)
#191 := (~ #52 #52)
#192 := [refl]: #191
#194 := [nnf-pos #192]: #193
#137 := [asserted]: #53
#195 := [mp~ #137 #194]: #53
#315 := [mp #195 #314]: #310
#364 := (not #310)
#365 := (or #364 #361)
#366 := [quant-inst #7 #17 #11 #95]: #365
#564 := [unit-resolution #366 #315]: #361
#565 := (= #98 #353)
#566 := [monotonicity #151]: #565
#568 := [trans #566 #564]: #567
#570 := [monotonicity #568]: #569
#576 := [trans #570 #563]: #575
#578 := [trans #576 #574]: #577
#580 := [monotonicity #578]: #579
#586 := [trans #580 #559]: #585
#588 := [trans #586 #582]: #587
#589 := [trans #588 #584]: #101
#152 := (not #101)
#154 := [not-or-elim #153]: #152
[unit-resolution #154 #589]: false
unsat
67bf97bc391b1b7e654702d4edbfac8730a51707 233 0
#2 := false
decl f28 :: S6
#92 := f28
decl f15 :: (-> S2 S6 S6)
decl f14 :: (-> S2 S6 S6)
decl f25 :: (-> S3 S6 S6)
decl f7 :: S3
#20 := f7
#98 := (f25 f7 f28)
decl f5 :: S2
#14 := f5
#99 := (f14 f5 #98)
decl f4 :: S2
#7 := f4
#100 := (f15 f4 #99)
#101 := (= #100 f28)
decl f10 :: (-> Int Int S4 S6)
decl f20 :: (-> S11 S9 S4)
decl f29 :: S9
#94 := f29
decl f21 :: (-> S12 S1 S11)
decl f1 :: S1
#3 := f1
decl f22 :: S12
#62 := f22
#93 := (f21 f22 f1)
#95 := (f20 #93 f29)
#11 := 4::Int
#17 := 3::Int
#96 := (f10 3::Int 4::Int #95)
#583 := (= #96 f28)
#97 := (= f28 #96)
#144 := (not #97)
#145 := (or #144 #101)
#148 := (not #145)
#102 := (implies #97 #101)
#103 := (not #102)
#149 := (iff #103 #148)
#146 := (iff #102 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#143 := [asserted]: #103
#153 := [mp #143 #150]: #148
#151 := [not-or-elim #153]: #97
#584 := [symm #151]: #583
#587 := (= #100 #96)
decl f3 :: (-> S2 Int Int)
#495 := (f3 f4 4::Int)
#442 := (f3 f5 3::Int)
#499 := (f10 #442 #495 #95)
#581 := (= #499 #96)
#547 := (= #495 4::Int)
#8 := (:var 0 Int)
#9 := (f3 f4 #8)
#10 := (pattern #9)
#12 := (= #9 4::Int)
#13 := (forall (vars (?v0 Int)) (:pat #10) #12)
#158 := (~ #13 #13)
#156 := (~ #12 #12)
#157 := [refl]: #156
#159 := [nnf-pos #157]: #158
#124 := [asserted]: #13
#160 := [mp~ #124 #159]: #13
#552 := (not #13)
#553 := (or #552 #547)
#554 := [quant-inst #11]: #553
#548 := [unit-resolution #554 #160]: #547
#491 := (= #442 3::Int)
#15 := (f3 f5 #8)
#16 := (pattern #15)
#18 := (= #15 3::Int)
#19 := (forall (vars (?v0 Int)) (:pat #16) #18)
#163 := (~ #19 #19)
#161 := (~ #18 #18)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#125 := [asserted]: #19
#165 := [mp~ #125 #164]: #19
#496 := (not #19)
#497 := (or #496 #491)
#498 := [quant-inst #17]: #497
#551 := [unit-resolution #498 #165]: #491
#582 := [monotonicity #551 #548]: #581
#585 := (= #100 #499)
#450 := (f10 #442 4::Int #95)
#492 := (f15 f4 #450)
#500 := (= #492 #499)
#30 := (:var 0 S4)
#29 := (:var 1 Int)
#43 := (:var 3 S2)
#50 := (f3 #43 #29)
#28 := (:var 2 Int)
#51 := (f10 #28 #50 #30)
#309 := (pattern #51)
#31 := (f10 #28 #29 #30)
#49 := (f15 #43 #31)
#308 := (pattern #49)
#52 := (= #49 #51)
#310 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #308 #309) #52)
#53 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #52)
#313 := (iff #53 #310)
#311 := (iff #52 #52)
#312 := [refl]: #311
#314 := [quant-intro #312]: #313
#193 := (~ #53 #53)
#191 := (~ #52 #52)
#192 := [refl]: #191
#194 := [nnf-pos #192]: #193
#137 := [asserted]: #53
#195 := [mp~ #137 #194]: #53
#315 := [mp #195 #314]: #310
#503 := (not #310)
#504 := (or #503 #500)
#505 := [quant-inst #7 #442 #11 #95]: #504
#555 := [unit-resolution #505 #315]: #500
#579 := (= #100 #492)
#577 := (= #99 #450)
decl f6 :: (-> S3 S1 S1)
#355 := (f6 f7 f1)
#354 := (f21 f22 #355)
#361 := (f20 #354 f29)
#448 := (f10 #442 4::Int #361)
#573 := (= #448 #450)
#571 := (= #450 #448)
#561 := (= #95 #361)
#559 := (= #361 #95)
#557 := (= #354 #93)
#412 := (= #355 f1)
#21 := (:var 0 S1)
#22 := (f6 f7 #21)
#23 := (pattern #22)
#24 := (= #22 f1)
#129 := (forall (vars (?v0 S1)) (:pat #23) #24)
#168 := (~ #129 #129)
#166 := (~ #24 #24)
#167 := [refl]: #166
#169 := [nnf-pos #167]: #168
#1 := true
#25 := (iff #24 true)
#26 := (forall (vars (?v0 S1)) (:pat #23) #25)
#130 := (iff #26 #129)
#127 := (iff #25 #24)
#128 := [rewrite]: #127
#131 := [quant-intro #128]: #130
#126 := [asserted]: #26
#134 := [mp #126 #131]: #129
#170 := [mp~ #134 #169]: #129
#445 := (not #129)
#446 := (or #445 #412)
#447 := [quant-inst #3]: #446
#556 := [unit-resolution #447 #170]: #412
#558 := [monotonicity #556]: #557
#560 := [monotonicity #558]: #559
#562 := [symm #560]: #561
#572 := [monotonicity #562]: #571
#574 := [symm #572]: #573
#575 := (= #99 #448)
#362 := (f10 3::Int 4::Int #361)
#441 := (f14 f5 #362)
#449 := (= #441 #448)
#45 := (f3 #43 #28)
#46 := (f10 #45 #29 #30)
#301 := (pattern #46)
#44 := (f14 #43 #31)
#300 := (pattern #44)
#47 := (= #44 #46)
#302 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #300 #301) #47)
#48 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #47)
#305 := (iff #48 #302)
#303 := (iff #47 #47)
#304 := [refl]: #303
#306 := [quant-intro #304]: #305
#188 := (~ #48 #48)
#186 := (~ #47 #47)
#187 := [refl]: #186
#189 := [nnf-pos #187]: #188
#136 := [asserted]: #48
#190 := [mp~ #136 #189]: #48
#307 := [mp #190 #306]: #302
#452 := (not #302)
#453 := (or #452 #449)
#454 := [quant-inst #14 #17 #11 #361]: #453
#563 := [unit-resolution #454 #307]: #449
#569 := (= #99 #441)
#567 := (= #98 #362)
#353 := (f25 f7 #96)
#363 := (= #353 #362)
#65 := (:var 0 S9)
#63 := (:var 1 S1)
#77 := (:var 4 S3)
#79 := (f6 #77 #63)
#80 := (f21 f22 #79)
#81 := (f20 #80 #65)
#61 := (:var 3 Int)
#82 := (f10 #61 #28 #81)
#338 := (pattern #82)
#64 := (f21 f22 #63)
#66 := (f20 #64 #65)
#67 := (f10 #61 #28 #66)
#78 := (f25 #77 #67)
#337 := (pattern #78)
#83 := (= #78 #82)
#339 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) (:pat #337 #338) #83)
#84 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) #83)
#342 := (iff #84 #339)
#340 := (iff #83 #83)
#341 := [refl]: #340
#343 := [quant-intro #341]: #342
#213 := (~ #84 #84)
#211 := (~ #83 #83)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#141 := [asserted]: #84
#215 := [mp~ #141 #214]: #84
#344 := [mp #215 #343]: #339
#366 := (not #339)
#367 := (or #366 #363)
#368 := [quant-inst #20 #17 #11 #3 #94]: #367
#564 := [unit-resolution #368 #344]: #363
#565 := (= #98 #353)
#566 := [monotonicity #151]: #565
#568 := [trans #566 #564]: #567
#570 := [monotonicity #568]: #569
#576 := [trans #570 #563]: #575
#578 := [trans #576 #574]: #577
#580 := [monotonicity #578]: #579
#586 := [trans #580 #555]: #585
#588 := [trans #586 #582]: #587
#589 := [trans #588 #584]: #101
#152 := (not #101)
#154 := [not-or-elim #153]: #152
[unit-resolution #154 #589]: false
unsat
fde09c00a7285975ac7164417c3a5481fc130775 18 0
#2 := false
decl f3 :: S2
#7 := f3
#51 := (= f3 f3)
#52 := (not #51)
#106 := (iff #52 false)
#1 := true
#101 := (not true)
#104 := (iff #101 false)
#105 := [rewrite]: #104
#102 := (iff #52 #101)
#98 := (iff #51 true)
#100 := [rewrite]: #98
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#97 := [asserted]: #52
[mp #97 #107]: false
unsat
17ef6441e1a98a1f31e9a83ffe2622bca36b5e7b 18 0
#2 := false
decl f6 :: S2
#12 := f6
#51 := (= f6 f6)
#52 := (not #51)
#106 := (iff #52 false)
#1 := true
#101 := (not true)
#104 := (iff #101 false)
#105 := [rewrite]: #104
#102 := (iff #52 #101)
#98 := (iff #51 true)
#100 := [rewrite]: #98
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#97 := [asserted]: #52
[mp #97 #107]: false
unsat
463ef29b79712be72c7a08cb850a77bae02ca87d 213 0
#2 := false
#13 := 2::Int
#9 := 1::Int
#243 := (= 1::Int 2::Int)
#255 := (iff #243 false)
#256 := [rewrite]: #255
decl f11 :: (-> S6 S2 Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#8 := f5
#14 := (f4 f5 2::Int)
decl f12 :: S6
#25 := f12
#227 := (f11 f12 #14)
#228 := (= #227 2::Int)
decl f1 :: S1
#3 := f1
decl f13 :: (-> Int S7 S1)
decl f14 :: S7
#33 := f14
#217 := (f13 2::Int f14)
#218 := (= #217 f1)
#226 := (not #218)
#366 := [hypothesis]: #226
#32 := (:var 0 Int)
#34 := (f13 #32 f14)
#190 := (pattern #34)
#17 := 3::Int
#38 := (= #32 3::Int)
#37 := (= #32 2::Int)
#36 := (= #32 1::Int)
#81 := (or #36 #37 #38)
#35 := (= #34 f1)
#84 := (iff #35 #81)
#191 := (forall (vars (?v0 Int)) (:pat #190) #84)
#87 := (forall (vars (?v0 Int)) #84)
#194 := (iff #87 #191)
#192 := (iff #84 #84)
#193 := [refl]: #192
#195 := [quant-intro #193]: #194
#111 := (~ #87 #87)
#109 := (~ #84 #84)
#110 := [refl]: #109
#112 := [nnf-pos #110]: #111
#39 := (or #37 #38)
#40 := (or #36 #39)
#41 := (iff #35 #40)
#42 := (forall (vars (?v0 Int)) #41)
#88 := (iff #42 #87)
#85 := (iff #41 #84)
#82 := (iff #40 #81)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#89 := [quant-intro #86]: #88
#78 := [asserted]: #42
#90 := [mp #78 #89]: #87
#113 := [mp~ #90 #112]: #87
#196 := [mp #113 #195]: #191
#273 := (not #191)
#357 := (or #273 #218)
#334 := (= 2::Int 3::Int)
#331 := (= 2::Int 2::Int)
#330 := (= 2::Int 1::Int)
#335 := (or #330 #331 #334)
#336 := (iff #218 #335)
#358 := (or #273 #336)
#360 := (iff #358 #357)
#362 := (iff #357 #357)
#363 := [rewrite]: #362
#355 := (iff #336 #218)
#1 := true
#350 := (iff #218 true)
#353 := (iff #350 #218)
#354 := [rewrite]: #353
#351 := (iff #336 #350)
#348 := (iff #335 true)
#343 := (or false true false)
#346 := (iff #343 true)
#347 := [rewrite]: #346
#344 := (iff #335 #343)
#341 := (iff #334 false)
#342 := [rewrite]: #341
#339 := (iff #331 true)
#340 := [rewrite]: #339
#337 := (iff #330 false)
#338 := [rewrite]: #337
#345 := [monotonicity #338 #340 #342]: #344
#349 := [trans #345 #347]: #348
#352 := [monotonicity #349]: #351
#356 := [trans #352 #354]: #355
#361 := [monotonicity #356]: #360
#364 := [trans #361 #363]: #360
#359 := [quant-inst #13]: #358
#365 := [mp #359 #364]: #357
#367 := [unit-resolution #365 #196 #366]: false
#368 := [lemma #367]: #218
#229 := (or #226 #228)
#46 := (f4 f5 #32)
#204 := (pattern #46)
#47 := (f11 f12 #46)
#48 := (= #47 #32)
#91 := (not #35)
#92 := (or #91 #48)
#205 := (forall (vars (?v0 Int)) (:pat #190 #204) #92)
#95 := (forall (vars (?v0 Int)) #92)
#208 := (iff #95 #205)
#206 := (iff #92 #92)
#207 := [refl]: #206
#209 := [quant-intro #207]: #208
#121 := (~ #95 #95)
#119 := (~ #92 #92)
#120 := [refl]: #119
#122 := [nnf-pos #120]: #121
#49 := (implies #35 #48)
#50 := (forall (vars (?v0 Int)) #49)
#96 := (iff #50 #95)
#93 := (iff #49 #92)
#94 := [rewrite]: #93
#97 := [quant-intro #94]: #96
#80 := [asserted]: #50
#100 := [mp #80 #97]: #95
#123 := [mp~ #100 #122]: #95
#210 := [mp #123 #209]: #205
#219 := (not #205)
#232 := (or #219 #226 #228)
#233 := (or #219 #229)
#235 := (iff #233 #232)
#236 := [rewrite]: #235
#234 := [quant-inst #13]: #233
#237 := [mp #234 #236]: #232
#369 := [unit-resolution #237 #210]: #229
#370 := [unit-resolution #369 #368]: #228
#387 := (= 1::Int #227)
#385 := (= #227 1::Int)
#10 := (f4 f5 1::Int)
#214 := (f11 f12 #10)
#215 := (= #214 1::Int)
#211 := (f13 1::Int f14)
#212 := (= #211 f1)
#213 := (not #212)
#283 := [hypothesis]: #213
#274 := (or #273 #212)
#250 := (= 1::Int 3::Int)
#242 := (= 1::Int 1::Int)
#251 := (or #242 #243 #250)
#252 := (iff #212 #251)
#275 := (or #273 #252)
#277 := (iff #275 #274)
#279 := (iff #274 #274)
#280 := [rewrite]: #279
#271 := (iff #252 #212)
#266 := (iff #212 true)
#269 := (iff #266 #212)
#270 := [rewrite]: #269
#267 := (iff #252 #266)
#264 := (iff #251 true)
#259 := (or true false false)
#262 := (iff #259 true)
#263 := [rewrite]: #262
#260 := (iff #251 #259)
#257 := (iff #250 false)
#258 := [rewrite]: #257
#253 := (iff #242 true)
#254 := [rewrite]: #253
#261 := [monotonicity #254 #256 #258]: #260
#265 := [trans #261 #263]: #264
#268 := [monotonicity #265]: #267
#272 := [trans #268 #270]: #271
#278 := [monotonicity #272]: #277
#281 := [trans #278 #280]: #277
#276 := [quant-inst #9]: #275
#282 := [mp #276 #281]: #274
#284 := [unit-resolution #282 #196 #283]: false
#285 := [lemma #284]: #212
#216 := (or #213 #215)
#220 := (or #219 #213 #215)
#221 := (or #219 #216)
#223 := (iff #221 #220)
#224 := [rewrite]: #223
#222 := [quant-inst #9]: #221
#225 := [mp #222 #224]: #220
#371 := [unit-resolution #225 #210]: #216
#372 := [unit-resolution #371 #285]: #215
#383 := (= #227 #214)
#381 := (= #14 #10)
decl f3 :: S2
#7 := f3
#11 := (= f3 #10)
#74 := [asserted]: #11
#379 := (= #14 f3)
decl f6 :: S2
#12 := f6
#377 := (= f6 f3)
#51 := (= f3 f6)
#52 := (not #51)
#53 := (not #52)
#99 := (iff #53 #51)
#101 := [rewrite]: #99
#98 := [asserted]: #53
#104 := [mp #98 #101]: #51
#378 := [symm #104]: #377
#375 := (= #14 f6)
#15 := (= f6 #14)
#75 := [asserted]: #15
#376 := [symm #75]: #375
#380 := [trans #376 #378]: #379
#382 := [trans #380 #74]: #381
#384 := [monotonicity #382]: #383
#386 := [trans #384 #372]: #385
#388 := [symm #386]: #387
#389 := [trans #388 #370]: #243
[mp #389 #256]: false
unsat
abf24d28efcf933fd63a125c58e888cf5bd3bb43 229 0
#2 := false
decl f6 :: S2
#12 := f6
decl f8 :: (-> S4 S2 S2)
decl f3 :: S2
#7 := f3
decl f9 :: (-> S5 S2 S4)
decl f10 :: S5
#20 := f10
#51 := (f9 f10 f3)
#52 := (f8 #51 f3)
#53 := (= #52 f6)
decl f4 :: (-> S3 Int S2)
#13 := 2::Int
decl f5 :: S3
#8 := f5
#14 := (f4 f5 2::Int)
#435 := (= #14 f6)
#15 := (= f6 #14)
#76 := [asserted]: #15
#436 := [symm #76]: #435
#439 := (= #52 #14)
decl f11 :: (-> S6 S2 Int)
#9 := 1::Int
#10 := (f4 f5 1::Int)
decl f12 :: S6
#25 := f12
#211 := (f11 f12 #10)
#215 := (* 2::Int #211)
#218 := (f4 f5 #215)
#433 := (= #218 #14)
#431 := (= #14 #218)
#420 := (= 2::Int #215)
#418 := (= #215 2::Int)
#248 := (<= #211 1::Int)
#237 := (= #211 1::Int)
decl f1 :: S1
#3 := f1
decl f13 :: (-> Int S7 S1)
decl f14 :: S7
#33 := f14
#234 := (f13 1::Int f14)
#235 := (= #234 f1)
#236 := (not #235)
#409 := [hypothesis]: #236
#32 := (:var 0 Int)
#34 := (f13 #32 f14)
#188 := (pattern #34)
#17 := 3::Int
#38 := (= #32 3::Int)
#37 := (= #32 2::Int)
#36 := (= #32 1::Int)
#82 := (or #36 #37 #38)
#35 := (= #34 f1)
#85 := (iff #35 #82)
#189 := (forall (vars (?v0 Int)) (:pat #188) #85)
#88 := (forall (vars (?v0 Int)) #85)
#192 := (iff #88 #189)
#190 := (iff #85 #85)
#191 := [refl]: #190
#193 := [quant-intro #191]: #192
#109 := (~ #88 #88)
#107 := (~ #85 #85)
#108 := [refl]: #107
#110 := [nnf-pos #108]: #109
#39 := (or #37 #38)
#40 := (or #36 #39)
#41 := (iff #35 #40)
#42 := (forall (vars (?v0 Int)) #41)
#89 := (iff #42 #88)
#86 := (iff #41 #85)
#83 := (iff #40 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#90 := [quant-intro #87]: #89
#79 := [asserted]: #42
#91 := [mp #79 #90]: #88
#111 := [mp~ #91 #110]: #88
#194 := [mp #111 #193]: #189
#311 := (not #189)
#400 := (or #311 #235)
#377 := (= 1::Int 3::Int)
#376 := (= 1::Int 2::Int)
#375 := (= 1::Int 1::Int)
#378 := (or #375 #376 #377)
#379 := (iff #235 #378)
#401 := (or #311 #379)
#403 := (iff #401 #400)
#405 := (iff #400 #400)
#406 := [rewrite]: #405
#398 := (iff #379 #235)
#1 := true
#393 := (iff #235 true)
#396 := (iff #393 #235)
#397 := [rewrite]: #396
#394 := (iff #379 #393)
#391 := (iff #378 true)
#386 := (or true false false)
#389 := (iff #386 true)
#390 := [rewrite]: #389
#387 := (iff #378 #386)
#384 := (iff #377 false)
#385 := [rewrite]: #384
#382 := (iff #376 false)
#383 := [rewrite]: #382
#380 := (iff #375 true)
#381 := [rewrite]: #380
#388 := [monotonicity #381 #383 #385]: #387
#392 := [trans #388 #390]: #391
#395 := [monotonicity #392]: #394
#399 := [trans #395 #397]: #398
#404 := [monotonicity #399]: #403
#407 := [trans #404 #406]: #403
#402 := [quant-inst #9]: #401
#408 := [mp #402 #407]: #400
#410 := [unit-resolution #408 #194 #409]: false
#411 := [lemma #410]: #235
#238 := (or #236 #237)
#46 := (f4 f5 #32)
#202 := (pattern #46)
#47 := (f11 f12 #46)
#48 := (= #47 #32)
#92 := (not #35)
#93 := (or #92 #48)
#203 := (forall (vars (?v0 Int)) (:pat #188 #202) #93)
#96 := (forall (vars (?v0 Int)) #93)
#206 := (iff #96 #203)
#204 := (iff #93 #93)
#205 := [refl]: #204
#207 := [quant-intro #205]: #206
#119 := (~ #96 #96)
#117 := (~ #93 #93)
#118 := [refl]: #117
#120 := [nnf-pos #118]: #119
#49 := (implies #35 #48)
#50 := (forall (vars (?v0 Int)) #49)
#97 := (iff #50 #96)
#94 := (iff #49 #93)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#81 := [asserted]: #50
#101 := [mp #81 #98]: #96
#121 := [mp~ #101 #120]: #96
#208 := [mp #121 #207]: #203
#241 := (not #203)
#242 := (or #241 #236 #237)
#243 := (or #241 #238)
#245 := (iff #243 #242)
#246 := [rewrite]: #245
#244 := [quant-inst #9]: #243
#247 := [mp #244 #246]: #242
#412 := [unit-resolution #247 #208]: #238
#413 := [unit-resolution #412 #411]: #237
#318 := (not #237)
#357 := (or #318 #248)
#358 := [th-lemma arith triangle-eq]: #357
#414 := [unit-resolution #358 #413]: #248
#249 := (>= #211 1::Int)
#415 := (or #318 #249)
#416 := [th-lemma arith triangle-eq]: #415
#417 := [unit-resolution #416 #413]: #249
#419 := [th-lemma arith eq-propagate -2 -2 #417 #414]: #418
#421 := [symm #419]: #420
#432 := [monotonicity #421]: #431
#434 := [symm #432]: #433
#437 := (= #52 #218)
#209 := (f9 f10 #10)
#210 := (f8 #209 #10)
#221 := (= #210 #218)
#23 := (:var 0 S2)
#21 := (:var 1 S2)
#22 := (f9 f10 #21)
#24 := (f8 #22 #23)
#181 := (pattern #24)
#27 := (f11 f12 #23)
#26 := (f11 f12 #21)
#28 := (+ #26 #27)
#29 := (f4 f5 #28)
#30 := (= #24 #29)
#182 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #181) #30)
#31 := (forall (vars (?v0 S2) (?v1 S2)) #30)
#185 := (iff #31 #182)
#183 := (iff #30 #30)
#184 := [refl]: #183
#186 := [quant-intro #184]: #185
#104 := (~ #31 #31)
#102 := (~ #30 #30)
#103 := [refl]: #102
#105 := [nnf-pos #103]: #104
#78 := [asserted]: #31
#106 := [mp~ #78 #105]: #31
#187 := [mp #106 #186]: #182
#224 := (not #182)
#225 := (or #224 #221)
#212 := (+ #211 #211)
#213 := (f4 f5 #212)
#214 := (= #210 #213)
#226 := (or #224 #214)
#228 := (iff #226 #225)
#230 := (iff #225 #225)
#231 := [rewrite]: #230
#222 := (iff #214 #221)
#219 := (= #213 #218)
#216 := (= #212 #215)
#217 := [rewrite]: #216
#220 := [monotonicity #217]: #219
#223 := [monotonicity #220]: #222
#229 := [monotonicity #223]: #228
#232 := [trans #229 #231]: #228
#227 := [quant-inst #10 #10]: #226
#233 := [mp #227 #232]: #225
#422 := [unit-resolution #233 #187]: #221
#429 := (= #52 #210)
#11 := (= f3 #10)
#75 := [asserted]: #11
#427 := (= #51 #209)
#425 := (= #209 #51)
#423 := (= #10 f3)
#424 := [symm #75]: #423
#426 := [monotonicity #424]: #425
#428 := [symm #426]: #427
#430 := [monotonicity #428 #75]: #429
#438 := [trans #430 #422]: #437
#440 := [trans #438 #434]: #439
#441 := [trans #440 #436]: #53
#54 := (not #53)
#99 := [asserted]: #54
[unit-resolution #99 #441]: false
unsat
260eac824b1f01737479805af42f5db11c25917d 340 0
#2 := false
decl f7 :: S2
#16 := f7
decl f8 :: (-> S4 S2 S2)
decl f6 :: S2
#12 := f6
decl f9 :: (-> S5 S2 S4)
decl f3 :: S2
#7 := f3
decl f10 :: S5
#20 := f10
#51 := (f9 f10 f3)
#52 := (f8 #51 f6)
#53 := (= #52 f7)
decl f4 :: (-> S3 Int S2)
#17 := 3::Int
decl f5 :: S3
#8 := f5
#18 := (f4 f5 3::Int)
#522 := (= #18 f7)
#19 := (= f7 #18)
#77 := [asserted]: #19
#523 := [symm #77]: #522
#526 := (= #52 #18)
decl f11 :: (-> S6 S2 Int)
#13 := 2::Int
#14 := (f4 f5 2::Int)
decl f12 :: S6
#25 := f12
#212 := (f11 f12 #14)
#9 := 1::Int
#10 := (f4 f5 1::Int)
#211 := (f11 f12 #10)
#213 := (+ #211 #212)
#214 := (f4 f5 #213)
#520 := (= #214 #18)
#518 := (= #18 #214)
#474 := (= 3::Int #213)
#383 := (= #213 3::Int)
#246 := (<= #212 2::Int)
#236 := (= #212 2::Int)
decl f1 :: S1
#3 := f1
decl f13 :: (-> Int S7 S1)
decl f14 :: S7
#33 := f14
#224 := (f13 2::Int f14)
#225 := (= #224 f1)
#235 := (not #225)
#513 := [hypothesis]: #235
#32 := (:var 0 Int)
#34 := (f13 #32 f14)
#188 := (pattern #34)
#38 := (= #32 3::Int)
#37 := (= #32 2::Int)
#36 := (= #32 1::Int)
#82 := (or #36 #37 #38)
#35 := (= #34 f1)
#85 := (iff #35 #82)
#189 := (forall (vars (?v0 Int)) (:pat #188) #85)
#88 := (forall (vars (?v0 Int)) #85)
#192 := (iff #88 #189)
#190 := (iff #85 #85)
#191 := [refl]: #190
#193 := [quant-intro #191]: #192
#109 := (~ #88 #88)
#107 := (~ #85 #85)
#108 := [refl]: #107
#110 := [nnf-pos #108]: #109
#39 := (or #37 #38)
#40 := (or #36 #39)
#41 := (iff #35 #40)
#42 := (forall (vars (?v0 Int)) #41)
#89 := (iff #42 #88)
#86 := (iff #41 #85)
#83 := (iff #40 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#90 := [quant-intro #87]: #89
#79 := [asserted]: #42
#91 := [mp #79 #90]: #88
#111 := [mp~ #91 #110]: #88
#194 := [mp #111 #193]: #189
#302 := (not #189)
#504 := (or #302 #225)
#481 := (= 2::Int 3::Int)
#451 := (= 2::Int 2::Int)
#450 := (= 2::Int 1::Int)
#482 := (or #450 #451 #481)
#483 := (iff #225 #482)
#505 := (or #302 #483)
#507 := (iff #505 #504)
#509 := (iff #504 #504)
#510 := [rewrite]: #509
#502 := (iff #483 #225)
#1 := true
#497 := (iff #225 true)
#500 := (iff #497 #225)
#501 := [rewrite]: #500
#498 := (iff #483 #497)
#495 := (iff #482 true)
#490 := (or false true false)
#493 := (iff #490 true)
#494 := [rewrite]: #493
#491 := (iff #482 #490)
#488 := (iff #481 false)
#489 := [rewrite]: #488
#486 := (iff #451 true)
#487 := [rewrite]: #486
#484 := (iff #450 false)
#485 := [rewrite]: #484
#492 := [monotonicity #485 #487 #489]: #491
#496 := [trans #492 #494]: #495
#499 := [monotonicity #496]: #498
#503 := [trans #499 #501]: #502
#508 := [monotonicity #503]: #507
#511 := [trans #508 #510]: #507
#506 := [quant-inst #13]: #505
#512 := [mp #506 #511]: #504
#514 := [unit-resolution #512 #194 #513]: false
#515 := [lemma #514]: #225
#237 := (or #235 #236)
#46 := (f4 f5 #32)
#202 := (pattern #46)
#47 := (f11 f12 #46)
#48 := (= #47 #32)
#92 := (not #35)
#93 := (or #92 #48)
#203 := (forall (vars (?v0 Int)) (:pat #188 #202) #93)
#96 := (forall (vars (?v0 Int)) #93)
#206 := (iff #96 #203)
#204 := (iff #93 #93)
#205 := [refl]: #204
#207 := [quant-intro #205]: #206
#119 := (~ #96 #96)
#117 := (~ #93 #93)
#118 := [refl]: #117
#120 := [nnf-pos #118]: #119
#49 := (implies #35 #48)
#50 := (forall (vars (?v0 Int)) #49)
#97 := (iff #50 #96)
#94 := (iff #49 #93)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#81 := [asserted]: #50
#101 := [mp #81 #98]: #96
#121 := [mp~ #101 #120]: #96
#208 := [mp #121 #207]: #203
#226 := (not #203)
#240 := (or #226 #235 #236)
#241 := (or #226 #237)
#243 := (iff #241 #240)
#244 := [rewrite]: #243
#242 := [quant-inst #13]: #241
#245 := [mp #242 #244]: #240
#460 := [unit-resolution #245 #208]: #237
#461 := [unit-resolution #460 #515]: #236
#312 := (not #236)
#462 := (or #312 #246)
#463 := [th-lemma arith triangle-eq]: #462
#464 := [unit-resolution #463 #461]: #246
#247 := (>= #212 2::Int)
#465 := (or #312 #247)
#466 := [th-lemma arith triangle-eq]: #465
#467 := [unit-resolution #466 #461]: #247
#233 := (<= #211 1::Int)
#222 := (= #211 1::Int)
#216 := (f13 1::Int f14)
#217 := (= #216 f1)
#221 := (not #217)
#447 := [hypothesis]: #221
#392 := (or #302 #217)
#398 := (= 1::Int 3::Int)
#397 := (= 1::Int 2::Int)
#396 := (= 1::Int 1::Int)
#399 := (or #396 #397 #398)
#400 := (iff #217 #399)
#393 := (or #302 #400)
#395 := (iff #393 #392)
#443 := (iff #392 #392)
#444 := [rewrite]: #443
#390 := (iff #400 #217)
#414 := (iff #217 true)
#388 := (iff #414 #217)
#389 := [rewrite]: #388
#415 := (iff #400 #414)
#412 := (iff #399 true)
#407 := (or true false false)
#410 := (iff #407 true)
#411 := [rewrite]: #410
#408 := (iff #399 #407)
#405 := (iff #398 false)
#406 := [rewrite]: #405
#403 := (iff #397 false)
#404 := [rewrite]: #403
#401 := (iff #396 true)
#402 := [rewrite]: #401
#409 := [monotonicity #402 #404 #406]: #408
#413 := [trans #409 #411]: #412
#416 := [monotonicity #413]: #415
#391 := [trans #416 #389]: #390
#442 := [monotonicity #391]: #395
#445 := [trans #442 #444]: #395
#394 := [quant-inst #9]: #393
#446 := [mp #394 #445]: #392
#448 := [unit-resolution #446 #194 #447]: false
#449 := [lemma #448]: #217
#223 := (or #221 #222)
#227 := (or #226 #221 #222)
#228 := (or #226 #223)
#230 := (iff #228 #227)
#231 := [rewrite]: #230
#229 := [quant-inst #9]: #228
#232 := [mp #229 #231]: #227
#468 := [unit-resolution #232 #208]: #223
#469 := [unit-resolution #468 #449]: #222
#351 := (not #222)
#470 := (or #351 #233)
#471 := [th-lemma arith triangle-eq]: #470
#472 := [unit-resolution #471 #469]: #233
#234 := (>= #211 1::Int)
#386 := (not #234)
#387 := [hypothesis]: #386
#417 := (or #351 #234)
#418 := [th-lemma arith triangle-eq]: #417
#419 := [unit-resolution #418 #387]: #351
#333 := (= #211 2::Int)
#354 := (not #333)
#348 := (>= #211 2::Int)
#420 := (not #348)
#421 := (or #420 #234)
#422 := [th-lemma arith farkas 1 1]: #421
#423 := [unit-resolution #422 #387]: #420
#424 := (or #354 #348)
#425 := [th-lemma arith triangle-eq]: #424
#426 := [unit-resolution #425 #423]: #354
#334 := (= #211 3::Int)
#357 := (not #334)
#350 := (>= #211 3::Int)
#427 := (not #350)
#428 := (or #427 #234)
#429 := [th-lemma arith farkas 1 1]: #428
#430 := [unit-resolution #429 #387]: #427
#431 := (or #357 #350)
#432 := [th-lemma arith triangle-eq]: #431
#433 := [unit-resolution #432 #430]: #357
#341 := (or #222 #333 #334)
#289 := (f13 #211 f14)
#290 := (= #289 f1)
#342 := (iff #290 #341)
#345 := (or #302 #342)
#346 := [quant-inst #211]: #345
#434 := [unit-resolution #346 #194]: #342
#363 := (not #342)
#436 := (or #363 #341)
#23 := (:var 0 S2)
#27 := (f11 f12 #23)
#195 := (pattern #27)
#43 := (f13 #27 f14)
#44 := (= #43 f1)
#196 := (forall (vars (?v0 S2)) (:pat #195) #44)
#45 := (forall (vars (?v0 S2)) #44)
#199 := (iff #45 #196)
#197 := (iff #44 #44)
#198 := [refl]: #197
#200 := [quant-intro #198]: #199
#114 := (~ #45 #45)
#112 := (~ #44 #44)
#113 := [refl]: #112
#115 := [nnf-pos #113]: #114
#80 := [asserted]: #45
#116 := [mp~ #80 #115]: #45
#201 := [mp #116 #200]: #196
#291 := (not #196)
#296 := (or #291 #290)
#297 := [quant-inst #10]: #296
#435 := [unit-resolution #297 #201]: #290
#366 := (not #290)
#367 := (or #363 #366 #341)
#368 := [def-axiom]: #367
#437 := [unit-resolution #368 #435]: #436
#438 := [unit-resolution #437 #434]: #341
#360 := (not #341)
#361 := (or #360 #222 #333 #334)
#362 := [def-axiom]: #361
#439 := [unit-resolution #362 #438]: #341
#440 := [unit-resolution #439 #433 #426 #419]: false
#441 := [lemma #440]: #234
#473 := [th-lemma arith eq-propagate -1 -1 -1 -1 #441 #472 #467 #464]: #383
#475 := [symm #473]: #474
#519 := [monotonicity #475]: #518
#521 := [symm #519]: #520
#524 := (= #52 #214)
#209 := (f9 f10 #10)
#210 := (f8 #209 #14)
#215 := (= #210 #214)
#21 := (:var 1 S2)
#22 := (f9 f10 #21)
#24 := (f8 #22 #23)
#181 := (pattern #24)
#26 := (f11 f12 #21)
#28 := (+ #26 #27)
#29 := (f4 f5 #28)
#30 := (= #24 #29)
#182 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #181) #30)
#31 := (forall (vars (?v0 S2) (?v1 S2)) #30)
#185 := (iff #31 #182)
#183 := (iff #30 #30)
#184 := [refl]: #183
#186 := [quant-intro #184]: #185
#104 := (~ #31 #31)
#102 := (~ #30 #30)
#103 := [refl]: #102
#105 := [nnf-pos #103]: #104
#78 := [asserted]: #31
#106 := [mp~ #78 #105]: #31
#187 := [mp #106 #186]: #182
#218 := (not #182)
#219 := (or #218 #215)
#220 := [quant-inst #10 #14]: #219
#476 := [unit-resolution #220 #187]: #215
#516 := (= #52 #210)
#15 := (= f6 #14)
#76 := [asserted]: #15
#452 := (= #51 #209)
#479 := (= #209 #51)
#477 := (= #10 f3)
#11 := (= f3 #10)
#75 := [asserted]: #11
#478 := [symm #75]: #477
#480 := [monotonicity #478]: #479
#453 := [symm #480]: #452
#517 := [monotonicity #453 #76]: #516
#525 := [trans #517 #476]: #524
#527 := [trans #525 #521]: #526
#528 := [trans #527 #523]: #53
#54 := (not #53)
#99 := [asserted]: #54
[unit-resolution #99 #528]: false
unsat
2864d138b390af4e3eeba533641291b4ae179658 1 0
unsat
218fdaddec8daf9fe821ad83145a0f41dc0cea69 1 0
unsat
e4291661842e19946a32d5d03adcb9efafbd09b2 1 0
unsat
c588e986fb0be52b47531527138c9af03115a341 1 0
unsat
0a10387ef30e59cf2ddae7f35bfb8acd6ada3dbd 1 0
unsat
23eac3c9c6bd3afca4e93ad69fc507b57e5a404f 1 0
unsat
11c2a4b88caf165635cfebe8973f704d44d24794 1 0
unsat
3a5f958e4a5b70d0ec5d8d00c8ab6d7e7ae3a517 1 0
unsat
c2efd82298ced7929b47cff71c32d108136ebb30 1 0
unsat
faea053ed25da44e251b8eb4312ac6428fd87ca2 1 0
unsat
9532645b849bc944ead9221c89cd2cc80a79542d 1 0
unsat
0bd015fc8f4761551dbd5c346f08fa03fb671fc0 1 0
unsat
29dffb68812c0d23d7cd53135414df29a1b03811 1 0
unsat
79197392649d8c81d0c1fcf765a24b7acc0b8b25 1 0
unsat
5ba4dc7ee86fa16cd914797b231ce5aa29948232 1 0
unsat
93bc8559470f6db0bac52512a36cd3315e07c85c 1 0
unsat
15320a8380e7a6f54e7cd0deef68d1a7d4b51f43 1 0
unsat
b772de55e89362c844cdba5d1c2c0fa3edb34d7f 1 0
unsat
1f603b5bd7f43c523a79a6bb10a493b3fa72cc85 1 0
unsat
d6873b3ad9377b99f2c3517770dea23f32521508 1 0
unsat
e2bd554f5593f9ef15136cabe0aea65dcfdb5188 1 0
unsat
4f72565e3d34747b9db8c734bc1f9265d086b52b 1 0
unsat
222d8029a2e1d50ba54c31aee7513d2d67ed472e 1 0
unsat
bdd3ac024678b853058c58dd381f33bda892d817 1 0
unsat
e533ec4f43cf59000106bf55690dc0aa11e727f2 1 0
unsat
4e11f3d12b4eddfd39e29aa51612229198e08d79 1 0
unsat
ed132dc37435ef0c545fb72697366d21ce40b8e1 1 0
unsat
1a1d2140097a8893b17dc25e6605282254748963 1 0
unsat
a29ebb3637da825c641bd6c6606b77eb08906d93 1 0
unsat
7353983008a7921466e21b252e0564cb1c6aa577 1 0
unsat
d52fff9b110f160606ec6fce8ca9bd1d06efb350 1 0
unsat
0ffd26abb0a8ec687078a4f337e1548a7bd61def 1 0
unsat
7b0e5b05b2ed758f149f0b55b9223ecaaeeb51cf 1 0
unsat
eafcdd2983b49d76b5488cea98e3f2f7e52876ba 1 0
unsat
7a0d2db24a3fd936064ebfe60cc9e64410f4a1f6 1 0
unsat
594d725c4e08c5276928341fb15c42e790395795 1 0
unsat
0bf7ce26e89090e315b7b54ba17110cc6ea079f1 1 0
unsat
50bcf5c7e82de8f36e24a5d09fdb4b2ff10e80e4 1 0
unsat
e2cab523a51c26eaaa7fe0d9e1059e52e750c834 1 0
unsat
b1153994e02691ad7f1b18a2cbb489a7165319df 1 0
unsat
d6d1c5cce24659e22cc4ed73e92b19fc8deb2c17 1 0
unsat
c50127acd06804ffc4d2b5381e19ed95d4784807 1 0
unsat
7dee0163a1aa13072509bd5a8b6706b711964644 1 0
unsat
171141585148df48367740bbf9c50efea328be41 1 0
unsat
697e36dcaec78bc74ef0344cc9bfbab4fcc473fa 1 0
unsat
66a334fd88037de17eb09cb3087b7d5c3b198b4b 1 0
unsat
2c70ce922a083eaaef42a1b1541bf29fc3cb7e54 1 0
unsat
c03a19c9bc6c365fbc3e7555a82ee1e533d868c7 1 0
unsat
3b50e4f33dd2e10584c63c303e2a234d52c44d12 1 0
unsat
34f76ecd2c593f21adfb82e04699df605d7dde4f 1 0
unsat
13021c851a0cac5f9a6fa998cc01ddbd3e82ecdd 1 0
unsat
97ac538214a4420392823c7a3e55c4e4ae0919d9 1 0
unsat
bfec2f2aa9b262d9b6b7060b5701a5e3814488b2 1 0
unsat
f18271423b6c758ca8234fe9ec2671a9d9855f4f 1 0
unsat
1d9d6a45a95fa36e2cf7fdd489e71cf9eebcc402 1 0
unsat
466f95c3091f0353c12c0b00d563961d31c7ea6c 1 0
unsat
6904c27994e4a6cfee64c86f67dbaa7a374b5aa0 1 0
unsat
0632b158f9a5c6bb65e1e1b6be57c2c08505527a 47 0
#2 := false
decl f10 :: S4
#34 := f10
decl f3 :: (-> S2 S3 S4)
decl f9 :: S3
#32 := f9
decl f4 :: (-> S5 S4 S2)
decl f5 :: (-> S6 S3 S5)
decl f6 :: (-> S7 S2 S6)
decl f8 :: S2
#30 := f8
decl f7 :: S7
#7 := f7
#31 := (f6 f7 f8)
#33 := (f5 #31 f9)
#35 := (f4 #33 f10)
#36 := (f3 #35 f9)
#37 := (= #36 f10)
#38 := (not #37)
#61 := [asserted]: #38
#12 := (:var 0 S4)
#10 := (:var 1 S3)
#8 := (:var 2 S2)
#9 := (f6 f7 #8)
#11 := (f5 #9 #10)
#13 := (f4 #11 #12)
#560 := (pattern #13)
#14 := (f3 #13 #10)
#15 := (= #14 #12)
#561 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #560) #15)
#16 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #15)
#564 := (iff #16 #561)
#562 := (iff #15 #15)
#563 := [refl]: #562
#565 := [quant-intro #563]: #564
#73 := (~ #16 #16)
#71 := (~ #15 #15)
#72 := [refl]: #71
#74 := [nnf-pos #72]: #73
#59 := [asserted]: #16
#63 := [mp~ #59 #74]: #16
#566 := [mp #63 #565]: #561
#145 := (not #561)
#231 := (or #145 #37)
#146 := [quant-inst #30 #32 #34]: #231
[unit-resolution #146 #566 #61]: false
unsat
f6aef6296a02dc2bb756eda92687889cb2a54145 87 0
#2 := false
decl f9 :: S3
#31 := f9
decl f8 :: S3
#30 := f8
#32 := (= f8 f9)
#160 := (= f9 f8)
decl f3 :: (-> S2 S3 S4)
decl f10 :: S2
#34 := f10
#40 := (f3 f10 f9)
decl f4 :: (-> S5 S4 S2)
decl f11 :: S4
#37 := f11
decl f5 :: (-> S6 S3 S5)
decl f6 :: (-> S7 S2 S6)
decl f7 :: S7
#7 := f7
#35 := (f6 f7 f10)
#36 := (f5 #35 f8)
#38 := (f4 #36 f11)
#39 := (f3 #38 f9)
#41 := (= #39 #40)
#246 := (= #39 f11)
#249 := (if #160 #246 #41)
#23 := (:var 0 S3)
#21 := (:var 1 S4)
#19 := (:var 2 S3)
#17 := (:var 3 S2)
#18 := (f6 f7 #17)
#20 := (f5 #18 #19)
#22 := (f4 #20 #21)
#24 := (f3 #22 #23)
#582 := (pattern #24)
#26 := (f3 #17 #23)
#95 := (= #24 #26)
#94 := (= #24 #21)
#25 := (= #23 #19)
#82 := (if #25 #94 #95)
#583 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #582) #82)
#87 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #82)
#586 := (iff #87 #583)
#584 := (iff #82 #82)
#585 := [refl]: #584
#587 := [quant-intro #585]: #586
#27 := (if #25 #21 #26)
#28 := (= #24 #27)
#29 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #28)
#84 := (iff #29 #87)
#83 := (iff #28 #82)
#86 := [rewrite]: #83
#85 := [quant-intro #86]: #84
#80 := (~ #29 #29)
#79 := (~ #28 #28)
#92 := [refl]: #79
#81 := [nnf-pos #92]: #80
#65 := [asserted]: #29
#93 := [mp~ #65 #81]: #29
#96 := [mp #93 #85]: #87
#588 := [mp #96 #587]: #583
#248 := (not #583)
#252 := (or #248 #249)
#231 := [quant-inst #34 #30 #37 #31]: #252
#250 := [unit-resolution #231 #588]: #249
#567 := (not #249)
#251 := (or #567 #160)
#74 := (not #41)
#67 := (or #32 #41)
#70 := (not #67)
#33 := (not #32)
#42 := (implies #33 #41)
#43 := (not #42)
#71 := (iff #43 #70)
#68 := (iff #42 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#66 := [asserted]: #43
#75 := [mp #66 #72]: #70
#76 := [not-or-elim #75]: #74
#563 := (or #567 #160 #41)
#236 := [def-axiom]: #563
#568 := [unit-resolution #236 #76]: #251
#574 := [unit-resolution #568 #250]: #160
#564 := [symm #574]: #32
#73 := [not-or-elim #75]: #33
[unit-resolution #73 #564]: false
unsat
50909234a6a4924829d934c10beb30bac9d44410 119 0
#2 := false
decl f11 :: S4
#37 := f11
decl f3 :: (-> S2 S3 S4)
decl f8 :: S3
#30 := f8
decl f4 :: (-> S5 S4 S2)
decl f12 :: S4
#41 := f12
decl f5 :: (-> S6 S3 S5)
decl f9 :: S3
#31 := f9
decl f6 :: (-> S7 S2 S6)
decl f10 :: S2
#34 := f10
decl f7 :: S7
#7 := f7
#35 := (f6 f7 f10)
#36 := (f5 #35 f8)
#38 := (f4 #36 f11)
#39 := (f6 f7 #38)
#40 := (f5 #39 f9)
#42 := (f4 #40 f12)
#43 := (f3 #42 f8)
#44 := (= #43 f11)
#162 := (f3 #38 f8)
#248 := (= #162 f11)
#12 := (:var 0 S4)
#10 := (:var 1 S3)
#8 := (:var 2 S2)
#9 := (f6 f7 #8)
#11 := (f5 #9 #10)
#13 := (f4 #11 #12)
#578 := (pattern #13)
#14 := (f3 #13 #10)
#15 := (= #14 #12)
#579 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #578) #15)
#16 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #15)
#582 := (iff #16 #579)
#580 := (iff #15 #15)
#581 := [refl]: #580
#583 := [quant-intro #581]: #582
#93 := (~ #16 #16)
#91 := (~ #15 #15)
#92 := [refl]: #91
#94 := [nnf-pos #92]: #93
#67 := [asserted]: #16
#81 := [mp~ #67 #94]: #16
#584 := [mp #81 #583]: #579
#164 := (not #579)
#250 := (or #164 #248)
#241 := [quant-inst #34 #30 #37]: #250
#234 := [unit-resolution #241 #584]: #248
#253 := (= #43 #162)
#252 := (= #43 f12)
#32 := (= f8 f9)
#255 := (if #32 #252 #253)
#23 := (:var 0 S3)
#21 := (:var 1 S4)
#19 := (:var 2 S3)
#17 := (:var 3 S2)
#18 := (f6 f7 #17)
#20 := (f5 #18 #19)
#22 := (f4 #20 #21)
#24 := (f3 #22 #23)
#585 := (pattern #24)
#26 := (f3 #17 #23)
#98 := (= #24 #26)
#97 := (= #24 #21)
#25 := (= #23 #19)
#85 := (if #25 #97 #98)
#586 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #585) #85)
#90 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #85)
#589 := (iff #90 #586)
#587 := (iff #85 #85)
#588 := [refl]: #587
#590 := [quant-intro #588]: #589
#27 := (if #25 #21 #26)
#28 := (= #24 #27)
#29 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #28)
#87 := (iff #29 #90)
#86 := (iff #28 #85)
#89 := [rewrite]: #86
#88 := [quant-intro #89]: #87
#83 := (~ #29 #29)
#82 := (~ #28 #28)
#95 := [refl]: #82
#84 := [nnf-pos #95]: #83
#68 := [asserted]: #29
#96 := [mp~ #68 #84]: #29
#99 := [mp #96 #88]: #90
#591 := [mp #99 #590]: #586
#572 := (not #586)
#228 := (or #572 #255)
#359 := [quant-inst #38 #31 #41 #30]: #228
#570 := [unit-resolution #359 #591]: #255
#566 := (not #255)
#231 := (or #566 #253)
#33 := (not #32)
#70 := (or #32 #44)
#73 := (not #70)
#45 := (implies #33 #44)
#46 := (not #45)
#74 := (iff #46 #73)
#71 := (iff #45 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#69 := [asserted]: #46
#78 := [mp #69 #75]: #73
#76 := [not-or-elim #78]: #33
#573 := (or #566 #32 #253)
#574 := [def-axiom]: #573
#568 := [unit-resolution #574 #76]: #231
#227 := [unit-resolution #568 #570]: #253
#569 := [trans #227 #234]: #44
#77 := (not #44)
#79 := [not-or-elim #78]: #77
[unit-resolution #79 #569]: false
unsat
05bfab9a0b912a45a5d23c900aa9736bbf67a50a 66 0
#2 := false
decl f12 :: S4
#41 := f12
decl f3 :: (-> S2 S3 S4)
decl f9 :: S3
#31 := f9
decl f4 :: (-> S5 S4 S2)
decl f5 :: (-> S6 S3 S5)
decl f6 :: (-> S7 S2 S6)
decl f11 :: S4
#37 := f11
decl f8 :: S3
#30 := f8
decl f10 :: S2
#34 := f10
decl f7 :: S7
#7 := f7
#35 := (f6 f7 f10)
#36 := (f5 #35 f8)
#38 := (f4 #36 f11)
#39 := (f6 f7 #38)
#40 := (f5 #39 f9)
#42 := (f4 #40 f12)
#43 := (f3 #42 f9)
#44 := (= #43 f12)
#77 := (not #44)
#32 := (= f8 f9)
#70 := (or #32 #44)
#73 := (not #70)
#33 := (not #32)
#45 := (implies #33 #44)
#46 := (not #45)
#74 := (iff #46 #73)
#71 := (iff #45 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#69 := [asserted]: #46
#78 := [mp #69 #75]: #73
#79 := [not-or-elim #78]: #77
#12 := (:var 0 S4)
#10 := (:var 1 S3)
#8 := (:var 2 S2)
#9 := (f6 f7 #8)
#11 := (f5 #9 #10)
#13 := (f4 #11 #12)
#578 := (pattern #13)
#14 := (f3 #13 #10)
#15 := (= #14 #12)
#579 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #578) #15)
#16 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #15)
#582 := (iff #16 #579)
#580 := (iff #15 #15)
#581 := [refl]: #580
#583 := [quant-intro #581]: #582
#93 := (~ #16 #16)
#91 := (~ #15 #15)
#92 := [refl]: #91
#94 := [nnf-pos #92]: #93
#67 := [asserted]: #16
#81 := [mp~ #67 #94]: #16
#584 := [mp #81 #583]: #579
#164 := (not #579)
#252 := (or #164 #44)
#253 := [quant-inst #38 #31 #41]: #252
[unit-resolution #253 #584 #79]: false
unsat
4a487b439b5a71496138881872532bead0355621 73 0
#2 := false
decl f12 :: S4
#40 := f12
decl f3 :: (-> S2 S3 S4)
decl f8 :: S3
#30 := f8
decl f4 :: (-> S5 S4 S2)
decl f5 :: (-> S6 S3 S5)
decl f9 :: S3
#31 := f9
decl f6 :: (-> S7 S2 S6)
decl f11 :: S4
#36 := f11
decl f10 :: S2
#33 := f10
decl f7 :: S7
#7 := f7
#34 := (f6 f7 f10)
#35 := (f5 #34 f8)
#37 := (f4 #35 f11)
#38 := (f6 f7 #37)
#39 := (f5 #38 f9)
#41 := (f4 #39 f12)
#42 := (f3 #41 f8)
#43 := (= #42 f12)
#164 := (f3 #41 f9)
#250 := (= #164 f12)
#12 := (:var 0 S4)
#10 := (:var 1 S3)
#8 := (:var 2 S2)
#9 := (f6 f7 #8)
#11 := (f5 #9 #10)
#13 := (f4 #11 #12)
#578 := (pattern #13)
#14 := (f3 #13 #10)
#15 := (= #14 #12)
#579 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #578) #15)
#16 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #15)
#582 := (iff #16 #579)
#580 := (iff #15 #15)
#581 := [refl]: #580
#583 := [quant-intro #581]: #582
#93 := (~ #16 #16)
#91 := (~ #15 #15)
#92 := [refl]: #91
#94 := [nnf-pos #92]: #93
#66 := [asserted]: #16
#81 := [mp~ #66 #94]: #16
#584 := [mp #81 #583]: #579
#241 := (not #579)
#255 := (or #241 #250)
#234 := [quant-inst #37 #31 #40]: #255
#215 := [unit-resolution #234 #584]: #250
#216 := (= #42 #164)
#32 := (= f8 f9)
#69 := (not #32)
#70 := (or #69 #43)
#73 := (not #70)
#44 := (implies #32 #43)
#45 := (not #44)
#74 := (iff #45 #73)
#71 := (iff #44 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#68 := [asserted]: #45
#78 := [mp #68 #75]: #73
#76 := [not-or-elim #78]: #32
#217 := [monotonicity #76]: #216
#218 := [trans #217 #215]: #43
#77 := (not #43)
#79 := [not-or-elim #78]: #77
[unit-resolution #79 #218]: false
unsat
2f89ec4bff68da07bcf5df08cb44abd1cf304bcc 152 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f10 :: S3
#34 := f10
decl f11 :: S2
#41 := f11
#51 := (f3 f11 f10)
decl f4 :: (-> S5 S4 S2)
decl f12 :: S4
#44 := f12
decl f5 :: (-> S6 S3 S5)
decl f8 :: S3
#30 := f8
decl f6 :: (-> S7 S2 S6)
decl f7 :: S7
#7 := f7
#42 := (f6 f7 f11)
#43 := (f5 #42 f8)
#45 := (f4 #43 f12)
#281 := (f3 #45 f10)
#282 := (= #281 #51)
#568 := (= #281 f12)
#567 := (= f10 f8)
#565 := (if #567 #568 #282)
#23 := (:var 0 S3)
#21 := (:var 1 S4)
#19 := (:var 2 S3)
#17 := (:var 3 S2)
#18 := (f6 f7 #17)
#20 := (f5 #18 #19)
#22 := (f4 #20 #21)
#24 := (f3 #22 #23)
#611 := (pattern #24)
#26 := (f3 #17 #23)
#128 := (= #24 #26)
#127 := (= #24 #21)
#25 := (= #23 #19)
#111 := (if #25 #127 #128)
#612 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #611) #111)
#120 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #111)
#615 := (iff #120 #612)
#613 := (iff #111 #111)
#614 := [refl]: #613
#616 := [quant-intro #614]: #615
#27 := (if #25 #21 #26)
#28 := (= #24 #27)
#29 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #28)
#117 := (iff #29 #120)
#112 := (iff #28 #111)
#119 := [rewrite]: #112
#118 := [quant-intro #119]: #117
#109 := (~ #29 #29)
#108 := (~ #28 #28)
#125 := [refl]: #108
#110 := [nnf-pos #125]: #109
#76 := [asserted]: #29
#126 := [mp~ #76 #110]: #29
#115 := [mp #126 #118]: #120
#617 := [mp #115 #616]: #612
#385 := (not #612)
#570 := (or #385 #565)
#559 := [quant-inst #41 #30 #44 #34]: #570
#569 := [unit-resolution #559 #617]: #565
#561 := (not #567)
#35 := (= f8 f10)
#36 := (not #35)
#546 := (iff #36 #561)
#551 := (iff #35 #567)
#566 := (iff #567 #35)
#550 := [commutativity]: #566
#552 := [symm #550]: #551
#547 := [monotonicity #552]: #546
decl f9 :: S3
#31 := f9
#37 := (= f9 f10)
#38 := (not #37)
#32 := (= f8 f9)
#33 := (not #32)
#85 := (and #33 #36 #38)
decl f13 :: S4
#48 := f13
#46 := (f6 f7 #45)
#47 := (f5 #46 f9)
#49 := (f4 #47 f13)
#50 := (f3 #49 f10)
#52 := (= #50 #51)
#88 := (not #85)
#91 := (or #88 #52)
#94 := (not #91)
#39 := (and #36 #38)
#40 := (and #33 #39)
#53 := (implies #40 #52)
#54 := (not #53)
#97 := (iff #54 #94)
#78 := (not #40)
#79 := (or #78 #52)
#82 := (not #79)
#95 := (iff #82 #94)
#92 := (iff #79 #91)
#89 := (iff #78 #88)
#86 := (iff #40 #85)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#93 := [monotonicity #90]: #92
#96 := [monotonicity #93]: #95
#83 := (iff #54 #82)
#80 := (iff #53 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#98 := [trans #84 #96]: #97
#77 := [asserted]: #54
#99 := [mp #77 #98]: #94
#100 := [not-or-elim #99]: #85
#102 := [and-elim #100]: #36
#553 := [mp #102 #547]: #561
#406 := (not #282)
#104 := (not #52)
#388 := (iff #104 #406)
#428 := (iff #52 #282)
#545 := (iff #282 #52)
#544 := (= #281 #50)
#260 := (= #50 #281)
#279 := (= #50 f13)
#278 := (= f10 f9)
#596 := (if #278 #279 #260)
#592 := (or #385 #596)
#265 := [quant-inst #45 #31 #48 #34]: #592
#554 := [unit-resolution #265 #617]: #596
#599 := (not #278)
#387 := (iff #38 #599)
#384 := (iff #37 #278)
#548 := (iff #278 #37)
#555 := [commutativity]: #548
#386 := [symm #555]: #384
#540 := [monotonicity #386]: #387
#103 := [and-elim #100]: #38
#541 := [mp #103 #540]: #599
#266 := (not #596)
#602 := (or #266 #278 #260)
#597 := [def-axiom]: #602
#543 := [unit-resolution #597 #541 #554]: #260
#542 := [symm #543]: #544
#427 := [monotonicity #542]: #545
#429 := [symm #427]: #428
#536 := [monotonicity #429]: #388
#105 := [not-or-elim #99]: #104
#438 := [mp #105 #536]: #406
#560 := (not #565)
#562 := (or #560 #567 #282)
#563 := [def-axiom]: #562
[unit-resolution #563 #438 #553 #569]: false
unsat
88a85966e07fd047108db907b5b652de257cb18b 39 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#8 := f4
decl f10 :: S2
#40 := f10
#41 := (f3 f10 f4)
#42 := (= #41 f1)
#43 := (not #42)
#44 := (not #43)
#70 := (iff #44 #42)
#71 := [rewrite]: #70
#69 := [asserted]: #44
#74 := [mp #69 #71]: #42
#7 := (:var 0 S2)
#9 := (f3 #7 f4)
#585 := (pattern #9)
#10 := (= #9 f1)
#11 := (not #10)
#586 := (forall (vars (?v0 S2)) (:pat #585) #11)
#12 := (forall (vars (?v0 S2)) #11)
#589 := (iff #12 #586)
#587 := (iff #11 #11)
#588 := [refl]: #587
#590 := [quant-intro #588]: #589
#88 := (~ #12 #12)
#86 := (~ #11 #11)
#87 := [refl]: #86
#89 := [nnf-pos #87]: #88
#65 := [asserted]: #12
#73 := [mp~ #65 #89]: #12
#591 := [mp #73 #590]: #586
#256 := (not #586)
#171 := (or #256 #43)
#257 := [quant-inst #40]: #171
[unit-resolution #257 #591 #74]: false
unsat
e52edad337a80ce1b9f167b25fc11aa08d513ef1 34 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#13 := f5
decl f10 :: S2
#40 := f10
#41 := (f3 f10 f5)
#42 := (= #41 f1)
#43 := (not #42)
#68 := [asserted]: #43
#7 := (:var 0 S2)
#14 := (f3 #7 f5)
#588 := (pattern #14)
#15 := (= #14 f1)
#589 := (forall (vars (?v0 S2)) (:pat #588) #15)
#16 := (forall (vars (?v0 S2)) #15)
#592 := (iff #16 #589)
#590 := (iff #15 #15)
#591 := [refl]: #590
#593 := [quant-intro #591]: #592
#72 := (~ #16 #16)
#71 := (~ #15 #15)
#86 := [refl]: #71
#73 := [nnf-pos #86]: #72
#65 := [asserted]: #16
#87 := [mp~ #65 #73]: #16
#594 := [mp #87 #593]: #589
#252 := (not #589)
#167 := (or #252 #42)
#253 := [quant-inst #40]: #167
[unit-resolution #253 #594 #68]: false
unsat
ad95b138cf36827005b5ec90f511d80185776b0d 87 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#43 := f12
decl f10 :: S2
#40 := f10
#49 := (f3 f10 f12)
#50 := (= #49 f1)
decl f11 :: S3
#41 := f11
#47 := (f3 f10 f11)
#48 := (= #47 f1)
#51 := (or #48 #50)
#270 := (not #51)
#258 := [hypothesis]: #270
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#18 := f8
#42 := (f7 f8 f11)
#44 := (f6 #42 f12)
#45 := (f3 f10 #44)
#46 := (= #45 f1)
#584 := (or #46 #51)
#79 := (not #46)
#80 := (iff #79 #51)
#52 := (iff #46 #51)
#53 := (not #52)
#81 := (iff #53 #80)
#82 := [rewrite]: #81
#78 := [asserted]: #53
#85 := [mp #78 #82]: #80
#269 := (not #80)
#246 := (or #46 #51 #269)
#377 := [def-axiom]: #246
#257 := [unit-resolution #377 #85]: #584
#591 := [unit-resolution #257 #258]: #46
#571 := (or #79 #51)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#610 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#611 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #610) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#614 := (iff #31 #611)
#612 := (iff #30 #30)
#613 := [refl]: #612
#615 := [quant-intro #613]: #614
#89 := (~ #31 #31)
#103 := (~ #30 #30)
#104 := [refl]: #103
#90 := [nnf-pos #104]: #89
#76 := [asserted]: #31
#105 := [mp~ #76 #90]: #31
#616 := [mp #105 #615]: #611
#592 := (not #611)
#593 := (or #592 #52)
#594 := [quant-inst #40 #41 #43]: #593
#229 := [unit-resolution #594 #616]: #52
#585 := (or #53 #79 #51)
#244 := [def-axiom]: #585
#233 := [unit-resolution #244 #229]: #571
#234 := [unit-resolution #233 #591 #258]: false
#235 := [lemma #234]: #51
#588 := (or #79 #270)
#273 := (or #79 #270 #269)
#252 := [def-axiom]: #273
#590 := [unit-resolution #252 #85]: #588
#236 := [unit-resolution #590 #235]: #79
#573 := (or #46 #270)
#589 := (or #53 #46 #270)
#595 := [def-axiom]: #589
#574 := [unit-resolution #595 #229]: #573
[unit-resolution #574 #236 #235]: false
unsat
a358148b5f0eff69cab7c01e442584acaffb3f96 121 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f4 :: S3
#8 := f4
decl f7 :: (-> S5 S3 S4)
decl f11 :: S3
#41 := f11
decl f8 :: S5
#18 := f8
#42 := (f7 f8 f11)
#43 := (f6 #42 f4)
decl f10 :: S2
#40 := f10
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#75 := (not #45)
#46 := (f3 f10 f11)
#47 := (= #46 f1)
#262 := (not #47)
#572 := [hypothesis]: #262
#268 := (or #45 #47)
#76 := (iff #75 #47)
#48 := (iff #45 #47)
#49 := (not #48)
#77 := (iff #49 #76)
#78 := [rewrite]: #77
#74 := [asserted]: #49
#81 := [mp #74 #78]: #76
#177 := (not #76)
#266 := (or #45 #47 #177)
#267 := [def-axiom]: #266
#265 := [unit-resolution #267 #81]: #268
#573 := [unit-resolution #265 #572]: #45
#269 := (f3 f10 f4)
#248 := (= #269 f1)
#584 := (or #47 #248)
#591 := (not #584)
#589 := (not #248)
#242 := [hypothesis]: #248
#7 := (:var 0 S2)
#9 := (f3 #7 f4)
#592 := (pattern #9)
#10 := (= #9 f1)
#11 := (not #10)
#593 := (forall (vars (?v0 S2)) (:pat #592) #11)
#12 := (forall (vars (?v0 S2)) #11)
#596 := (iff #12 #593)
#594 := (iff #11 #11)
#595 := [refl]: #594
#597 := [quant-intro #595]: #596
#95 := (~ #12 #12)
#93 := (~ #11 #11)
#94 := [refl]: #93
#96 := [nnf-pos #94]: #95
#70 := [asserted]: #12
#80 := [mp~ #70 #96]: #12
#598 := [mp #80 #597]: #593
#232 := (not #593)
#569 := (or #232 #589)
#570 := [quant-inst #40]: #569
#373 := [unit-resolution #570 #598 #242]: false
#571 := [lemma #373]: #589
#581 := (or #591 #47 #248)
#240 := [def-axiom]: #581
#568 := [unit-resolution #240 #572 #571]: #591
#211 := (or #75 #584)
#586 := (iff #45 #584)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#606 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#607 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #606) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#610 := (iff #31 #607)
#608 := (iff #30 #30)
#609 := [refl]: #608
#611 := [quant-intro #609]: #610
#85 := (~ #31 #31)
#99 := (~ #30 #30)
#100 := [refl]: #99
#86 := [nnf-pos #100]: #85
#72 := [asserted]: #31
#101 := [mp~ #72 #86]: #31
#612 := [mp #101 #611]: #607
#580 := (not #607)
#253 := (or #580 #586)
#254 := [quant-inst #40 #41 #8]: #253
#574 := [unit-resolution #254 #612]: #586
#245 := (not #586)
#583 := (or #245 #75 #584)
#225 := [def-axiom]: #583
#575 := [unit-resolution #225 #574]: #211
#577 := [unit-resolution #575 #568 #573]: false
#216 := [lemma #577]: #47
#264 := (or #75 #262)
#263 := (or #75 #262 #177)
#178 := [def-axiom]: #263
#255 := [unit-resolution #178 #81]: #264
#217 := [unit-resolution #255 #216]: #75
#587 := (or #584 #262)
#588 := [def-axiom]: #587
#578 := [unit-resolution #588 #216]: #584
#576 := (or #45 #591)
#582 := (or #245 #45 #591)
#241 := [def-axiom]: #582
#579 := [unit-resolution #241 #574]: #576
[unit-resolution #579 #578 #217]: false
unsat
91c9ceb101c072b8bb603b688737950bad02faa7 90 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#13 := f5
decl f10 :: S2
#40 := f10
#255 := (f3 f10 f5)
#170 := (= #255 f1)
#234 := (not #170)
decl f11 :: S3
#41 := f11
#254 := (f3 f10 f11)
#169 := (= #254 f1)
#256 := (or #169 #170)
#245 := (not #256)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#18 := f8
#42 := (f7 f8 f11)
#43 := (f6 #42 f5)
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#247 := (iff #45 #256)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#598 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#599 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #598) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#602 := (iff #31 #599)
#600 := (iff #30 #30)
#601 := [refl]: #600
#603 := [quant-intro #601]: #602
#77 := (~ #31 #31)
#91 := (~ #30 #30)
#92 := [refl]: #91
#78 := [nnf-pos #92]: #77
#69 := [asserted]: #31
#93 := [mp~ #69 #78]: #31
#604 := [mp #93 #603]: #599
#260 := (not #599)
#257 := (or #260 #247)
#261 := [quant-inst #40 #41 #13]: #257
#258 := [unit-resolution #261 #604]: #247
#580 := (not #247)
#259 := (or #580 #245)
#46 := (not #45)
#71 := [asserted]: #46
#581 := (or #580 #45 #245)
#582 := [def-axiom]: #581
#559 := [unit-resolution #582 #71]: #259
#221 := [unit-resolution #559 #258]: #245
#365 := (or #256 #234)
#572 := [def-axiom]: #365
#222 := [unit-resolution #572 #221]: #234
#7 := (:var 0 S2)
#14 := (f3 #7 f5)
#591 := (pattern #14)
#15 := (= #14 f1)
#592 := (forall (vars (?v0 S2)) (:pat #591) #15)
#16 := (forall (vars (?v0 S2)) #15)
#595 := (iff #16 #592)
#593 := (iff #15 #15)
#594 := [refl]: #593
#596 := [quant-intro #594]: #595
#75 := (~ #16 #16)
#74 := (~ #15 #15)
#89 := [refl]: #74
#76 := [nnf-pos #89]: #75
#68 := [asserted]: #16
#90 := [mp~ #68 #76]: #16
#597 := [mp #90 #596]: #592
#233 := (not #592)
#575 := (or #233 #170)
#217 := [quant-inst #40]: #575
[unit-resolution #217 #597 #222]: false
unsat
f5d17ecef2699af9d85c677d592ffbcac1a42bd5 131 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#41 := f11
decl f10 :: S2
#40 := f10
#272 := (f3 f10 f11)
#251 := (= #272 f1)
decl f12 :: S3
#43 := f12
#587 := (f3 f10 f12)
#589 := (= #587 f1)
#583 := (or #589 #251)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#18 := f8
#47 := (f7 f8 f12)
#48 := (f6 #47 f11)
#49 := (f3 f10 #48)
#50 := (= #49 f1)
#245 := (or #251 #589)
#42 := (f7 f8 f11)
#44 := (f6 #42 f12)
#45 := (f3 f10 #44)
#46 := (= #45 f1)
#265 := (not #50)
#574 := [hypothesis]: #265
#271 := (or #46 #50)
#78 := (not #46)
#79 := (iff #78 #50)
#51 := (iff #46 #50)
#52 := (not #51)
#80 := (iff #52 #79)
#81 := [rewrite]: #80
#77 := [asserted]: #52
#84 := [mp #77 #81]: #79
#180 := (not #79)
#269 := (or #46 #50 #180)
#270 := [def-axiom]: #269
#268 := [unit-resolution #270 #84]: #271
#575 := [unit-resolution #268 #574]: #46
#564 := (or #78 #245)
#376 := (iff #46 #245)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#609 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#610 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #609) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#613 := (iff #31 #610)
#611 := (iff #30 #30)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#88 := (~ #31 #31)
#102 := (~ #30 #30)
#103 := [refl]: #102
#89 := [nnf-pos #103]: #88
#75 := [asserted]: #31
#104 := [mp~ #75 #89]: #31
#615 := [mp #104 #614]: #610
#257 := (not #610)
#590 := (or #257 #376)
#591 := [quant-inst #40 #41 #43]: #590
#187 := [unit-resolution #591 #615]: #376
#586 := (not #376)
#232 := (or #586 #78 #245)
#233 := [def-axiom]: #232
#565 := [unit-resolution #233 #187]: #564
#287 := [unit-resolution #565 #575]: #245
#594 := (not #589)
#219 := (not #583)
#562 := (or #50 #219)
#256 := (iff #50 #583)
#576 := (or #257 #256)
#571 := [quant-inst #40 #43 #41]: #576
#288 := [unit-resolution #571 #615]: #256
#579 := (not #256)
#582 := (or #579 #50 #219)
#568 := [def-axiom]: #582
#566 := [unit-resolution #568 #288]: #562
#563 := [unit-resolution #566 #574]: #219
#577 := (or #583 #594)
#214 := [def-axiom]: #577
#567 := [unit-resolution #214 #563]: #594
#592 := (not #251)
#578 := (or #583 #592)
#580 := [def-axiom]: #578
#277 := [unit-resolution #580 #563]: #592
#248 := (not #245)
#585 := (or #248 #251 #589)
#244 := [def-axiom]: #585
#278 := [unit-resolution #244 #277 #567 #287]: false
#279 := [lemma #278]: #50
#280 := (or #265 #583)
#569 := (or #579 #265 #583)
#276 := [def-axiom]: #569
#558 := [unit-resolution #276 #288]: #280
#559 := [unit-resolution #558 #279]: #583
#267 := (or #78 #265)
#266 := (or #78 #265 #180)
#181 := [def-axiom]: #266
#258 := [unit-resolution #181 #84]: #267
#273 := [unit-resolution #258 #279]: #78
#556 := (or #46 #248)
#228 := (or #586 #46 #248)
#570 := [def-axiom]: #228
#560 := [unit-resolution #570 #187]: #556
#557 := [unit-resolution #560 #273]: #248
#593 := (or #245 #592)
#588 := [def-axiom]: #593
#561 := [unit-resolution #588 #557]: #592
#584 := (or #245 #594)
#243 := [def-axiom]: #584
#550 := [unit-resolution #243 #557]: #594
#220 := (or #219 #589 #251)
#581 := [def-axiom]: #220
[unit-resolution #581 #550 #561 #559]: false
unsat
7b7f932ab0a4581fa34b6f91edcffafb0fae6833 95 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#41 := f11
decl f10 :: S2
#40 := f10
#46 := (f3 f10 f11)
#47 := (= #46 f1)
#262 := (not #47)
#230 := [hypothesis]: #262
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#18 := f8
#42 := (f7 f8 f11)
#43 := (f6 #42 f11)
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#268 := (or #45 #47)
#75 := (not #45)
#76 := (iff #75 #47)
#48 := (iff #45 #47)
#49 := (not #48)
#77 := (iff #49 #76)
#78 := [rewrite]: #77
#74 := [asserted]: #49
#81 := [mp #74 #78]: #76
#177 := (not #76)
#266 := (or #45 #47 #177)
#267 := [def-axiom]: #266
#265 := [unit-resolution #267 #81]: #268
#231 := [unit-resolution #265 #230]: #45
#569 := (or #75 #47)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#606 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#607 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #606) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#610 := (iff #31 #607)
#608 := (iff #30 #30)
#609 := [refl]: #608
#611 := [quant-intro #609]: #610
#85 := (~ #31 #31)
#99 := (~ #30 #30)
#100 := [refl]: #99
#86 := [nnf-pos #100]: #85
#72 := [asserted]: #31
#101 := [mp~ #72 #86]: #31
#612 := [mp #101 #611]: #607
#580 := (not #607)
#253 := (or #580 #48)
#269 := (or #47 #47)
#248 := (iff #45 #269)
#254 := (or #580 #248)
#588 := (iff #254 #253)
#590 := (iff #253 #253)
#585 := [rewrite]: #590
#242 := (iff #248 #48)
#584 := (iff #269 #47)
#586 := [rewrite]: #584
#373 := [monotonicity #586]: #242
#589 := [monotonicity #373]: #588
#591 := [trans #589 #585]: #588
#587 := [quant-inst #40 #41 #41]: #254
#581 := [mp #587 #591]: #253
#232 := [unit-resolution #581 #612]: #48
#582 := (or #49 #75 #47)
#241 := [def-axiom]: #582
#570 := [unit-resolution #241 #232]: #569
#571 := [unit-resolution #570 #231 #230]: false
#572 := [lemma #571]: #47
#264 := (or #75 #262)
#263 := (or #75 #262 #177)
#178 := [def-axiom]: #263
#255 := [unit-resolution #178 #81]: #264
#573 := [unit-resolution #255 #572]: #75
#568 := (or #45 #262)
#240 := (or #49 #45 #262)
#245 := [def-axiom]: #240
#574 := [unit-resolution #245 #232]: #568
[unit-resolution #574 #573 #572]: false
unsat
43b21f39caa6691199e92bb505d662d92b79c6d5 194 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#43 := f12
decl f10 :: S2
#40 := f10
#581 := (f3 f10 f12)
#218 := (= #581 f1)
decl f11 :: S3
#41 := f11
#276 := (f3 f10 f11)
#255 := (= #276 f1)
#570 := (or #255 #218)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#18 := f8
#42 := (f7 f8 f11)
#50 := (f6 #42 f12)
#587 := (f3 f10 #50)
#260 := (= #587 f1)
#567 := (iff #260 #570)
#379 := (not #567)
#548 := (not #570)
#284 := (not #218)
decl f13 :: S3
#45 := f13
#578 := (f3 f10 f13)
#579 := (= #578 f1)
#571 := (or #218 #579)
#564 := (not #571)
#44 := (f7 f8 f12)
#46 := (f6 #44 f13)
#591 := (f3 f10 #46)
#593 := (= #591 f1)
#281 := (iff #593 #571)
#543 := (not #281)
#400 := [hypothesis]: #543
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 f8 #19)
#22 := (f6 #20 #21)
#17 := (:var 2 S2)
#23 := (f3 #17 #22)
#613 := (pattern #23)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#614 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #613) #30)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#617 := (iff #31 #614)
#615 := (iff #30 #30)
#616 := [refl]: #615
#618 := [quant-intro #616]: #617
#92 := (~ #31 #31)
#106 := (~ #30 #30)
#107 := [refl]: #106
#93 := [nnf-pos #107]: #92
#79 := [asserted]: #31
#108 := [mp~ #79 #93]: #31
#619 := [mp #108 #618]: #614
#261 := (not #614)
#402 := (or #261 #281)
#544 := [quant-inst #40 #43 #45]: #402
#401 := [unit-resolution #544 #619 #400]: false
#537 := [lemma #401]: #281
#598 := (not #593)
#249 := (or #255 #593)
#252 := (not #249)
#47 := (f6 #42 #46)
#48 := (f3 f10 #47)
#49 := (= #48 f1)
#82 := (not #49)
#51 := (f7 f8 #50)
#52 := (f6 #51 f13)
#53 := (f3 f10 #52)
#54 := (= #53 f1)
#269 := (not #54)
#559 := [hypothesis]: #269
#275 := (or #49 #54)
#83 := (iff #82 #54)
#55 := (iff #49 #54)
#56 := (not #55)
#84 := (iff #56 #83)
#85 := [rewrite]: #84
#81 := [asserted]: #56
#88 := [mp #81 #85]: #83
#184 := (not #83)
#273 := (or #49 #54 #184)
#274 := [def-axiom]: #273
#272 := [unit-resolution #274 #88]: #275
#282 := [unit-resolution #272 #559]: #49
#424 := (or #82 #249)
#380 := (iff #49 #249)
#594 := (or #261 #380)
#595 := [quant-inst #40 #41 #46]: #594
#423 := [unit-resolution #595 #619]: #380
#590 := (not #380)
#236 := (or #590 #82 #249)
#237 := [def-axiom]: #236
#383 := [unit-resolution #237 #423]: #424
#531 := [unit-resolution #383 #282]: #249
#596 := (not #255)
#283 := (or #261 #567)
#545 := [quant-inst #40 #41 #43]: #283
#433 := [unit-resolution #545 #619]: #567
#434 := (or #379 #548)
#223 := (not #260)
#580 := (or #260 #579)
#573 := (not #580)
#529 := (or #54 #573)
#575 := (iff #54 #580)
#582 := (or #261 #575)
#584 := [quant-inst #40 #50 #45]: #582
#528 := [unit-resolution #584 #619]: #575
#296 := (not #575)
#297 := (or #296 #54 #573)
#298 := [def-axiom]: #297
#532 := [unit-resolution #298 #528]: #529
#417 := [unit-resolution #532 #559]: #573
#224 := (or #580 #223)
#585 := [def-axiom]: #224
#432 := [unit-resolution #585 #417]: #223
#381 := (or #379 #260 #548)
#382 := [def-axiom]: #381
#435 := [unit-resolution #382 #432]: #434
#428 := [unit-resolution #435 #433]: #548
#546 := (or #570 #596)
#547 := [def-axiom]: #546
#436 := [unit-resolution #547 #428]: #596
#589 := (or #252 #255 #593)
#248 := [def-axiom]: #589
#437 := [unit-resolution #248 #436 #531]: #593
#583 := (not #579)
#586 := (or #580 #583)
#572 := [def-axiom]: #586
#438 := [unit-resolution #572 #417]: #583
#541 := (or #570 #284)
#542 := [def-axiom]: #541
#439 := [unit-resolution #542 #428]: #284
#561 := (or #564 #218 #579)
#565 := [def-axiom]: #561
#440 := [unit-resolution #565 #439 #438]: #564
#556 := (or #543 #598 #571)
#551 := [def-axiom]: #556
#533 := [unit-resolution #551 #440 #437 #537]: false
#530 := [lemma #533]: #54
#271 := (or #82 #269)
#270 := (or #82 #269 #184)
#185 := [def-axiom]: #270
#262 := [unit-resolution #185 #88]: #271
#549 := [unit-resolution #262 #530]: #82
#550 := (or #49 #252)
#232 := (or #590 #49 #252)
#574 := [def-axiom]: #232
#523 := [unit-resolution #574 #423]: #550
#515 := [unit-resolution #523 #549]: #252
#588 := (or #249 #598)
#247 := [def-axiom]: #588
#512 := [unit-resolution #247 #515]: #598
#554 := (or #543 #593 #564)
#555 := [def-axiom]: #554
#514 := [unit-resolution #555 #512 #537]: #564
#562 := (or #571 #284)
#563 := [def-axiom]: #562
#524 := [unit-resolution #563 #514]: #284
#597 := (or #249 #596)
#592 := [def-axiom]: #597
#525 := [unit-resolution #592 #515]: #596
#535 := (or #548 #255 #218)
#536 := [def-axiom]: #535
#526 := [unit-resolution #536 #525 #524]: #548
#522 := (or #269 #580)
#191 := (or #296 #269 #580)
#568 := [def-axiom]: #191
#527 := [unit-resolution #568 #528]: #522
#516 := [unit-resolution #527 #530]: #580
#277 := (or #571 #583)
#560 := [def-axiom]: #277
#517 := [unit-resolution #560 #514]: #583
#280 := (or #573 #260 #579)
#295 := [def-axiom]: #280
#518 := [unit-resolution #295 #517 #516]: #260
#538 := (or #379 #223 #570)
#539 := [def-axiom]: #538
#519 := [unit-resolution #539 #518 #526]: #379
[unit-resolution #545 #619 #519]: false
unsat
397d6346cfc96d3be794b9edcc58a3e463721e51 116 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#43 := f12
decl f10 :: S2
#40 := f10
#49 := (f3 f10 f12)
#50 := (= #49 f1)
#119 := (not #50)
decl f11 :: S3
#41 := f11
#47 := (f3 f10 f11)
#48 := (= #47 f1)
#118 := (not #48)
#120 := (or #118 #119)
#121 := (not #120)
#599 := [hypothesis]: #121
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#42 := (f7 f9 f11)
#44 := (f6 #42 f12)
#45 := (f3 f10 #44)
#46 := (= #45 f1)
#79 := (not #46)
#605 := (or #79 #120)
#127 := (iff #46 #120)
#51 := (and #48 #50)
#80 := (iff #79 #51)
#130 := (iff #80 #127)
#124 := (iff #79 #121)
#128 := (iff #124 #127)
#129 := [rewrite]: #128
#125 := (iff #80 #124)
#122 := (iff #51 #121)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#131 := [trans #126 #129]: #130
#52 := (iff #46 #51)
#53 := (not #52)
#81 := (iff #53 #80)
#82 := [rewrite]: #81
#78 := [asserted]: #53
#85 := [mp #78 #82]: #80
#132 := [mp #85 #131]: #127
#285 := (not #127)
#267 := (or #79 #120 #285)
#603 := [def-axiom]: #267
#261 := [unit-resolution #603 #132]: #605
#272 := [unit-resolution #261 #599]: #79
#244 := (or #46 #120)
#392 := (iff #46 #121)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#632 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#110 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#109 := (not #26)
#93 := (or #109 #110)
#94 := (not #93)
#36 := (= #35 f1)
#111 := (iff #36 #94)
#633 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #632) #111)
#114 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #111)
#636 := (iff #114 #633)
#634 := (iff #111 #111)
#635 := [refl]: #634
#637 := [quant-intro #635]: #636
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#115 := (iff #39 #114)
#112 := (iff #38 #111)
#95 := (iff #37 #94)
#96 := [rewrite]: #95
#113 := [monotonicity #96]: #112
#116 := [quant-intro #113]: #115
#91 := (~ #39 #39)
#106 := (~ #38 #38)
#107 := [refl]: #106
#92 := [nnf-pos #107]: #91
#77 := [asserted]: #39
#108 := [mp~ #77 #92]: #39
#117 := [mp #108 #116]: #114
#638 := [mp #117 #637]: #633
#273 := (not #633)
#606 := (or #273 #392)
#607 := [quant-inst #40 #41 #43]: #606
#602 := [unit-resolution #607 #638]: #392
#608 := (not #392)
#609 := (or #608 #46 #120)
#604 := [def-axiom]: #609
#586 := [unit-resolution #604 #602]: #244
#248 := [unit-resolution #586 #272 #599]: false
#249 := [lemma #248]: #120
#284 := (or #46 #121)
#286 := (or #46 #121 #285)
#287 := [def-axiom]: #286
#288 := [unit-resolution #287 #132]: #284
#250 := [unit-resolution #288 #249]: #46
#251 := (or #79 #121)
#610 := (or #608 #79 #121)
#600 := [def-axiom]: #610
#588 := [unit-resolution #600 #602]: #251
[unit-resolution #588 #250 #249]: false
unsat
25e43ea74050b29942998055a45c2dfa635fcffe 109 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#8 := f4
decl f10 :: S2
#40 := f10
#174 := (f3 f10 f4)
#260 := (= #174 f1)
#251 := (not #260)
decl f11 :: S3
#41 := f11
#258 := (f3 f10 f11)
#173 := (= #258 f1)
#259 := (not #173)
#262 := (or #259 #251)
#263 := (not #262)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#42 := (f7 f9 f11)
#43 := (f6 #42 f4)
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#264 := (iff #45 #263)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#609 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#102 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#101 := (not #26)
#85 := (or #101 #102)
#86 := (not #85)
#36 := (= #35 f1)
#103 := (iff #36 #86)
#610 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #609) #103)
#106 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #103)
#613 := (iff #106 #610)
#611 := (iff #103 #103)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#107 := (iff #39 #106)
#104 := (iff #38 #103)
#87 := (iff #37 #86)
#88 := [rewrite]: #87
#105 := [monotonicity #88]: #104
#108 := [quant-intro #105]: #107
#83 := (~ #39 #39)
#98 := (~ #38 #38)
#99 := [refl]: #98
#84 := [nnf-pos #99]: #83
#71 := [asserted]: #39
#100 := [mp~ #71 #84]: #39
#109 := [mp #100 #108]: #106
#615 := [mp #109 #614]: #610
#244 := (not #610)
#580 := (or #244 #264)
#582 := [quant-inst #40 #41 #8]: #580
#261 := [unit-resolution #582 #615]: #264
#584 := (not #264)
#265 := (or #584 #263)
#46 := (not #45)
#47 := (not #46)
#73 := (iff #47 #45)
#74 := [rewrite]: #73
#72 := [asserted]: #47
#77 := [mp #72 #74]: #45
#581 := (or #584 #46 #263)
#587 := [def-axiom]: #581
#563 := [unit-resolution #587 #77]: #265
#225 := [unit-resolution #563 #261]: #263
#576 := (or #262 #260)
#249 := [def-axiom]: #576
#226 := [unit-resolution #249 #225]: #260
#7 := (:var 0 S2)
#9 := (f3 #7 f4)
#588 := (pattern #9)
#10 := (= #9 f1)
#11 := (not #10)
#589 := (forall (vars (?v0 S2)) (:pat #588) #11)
#12 := (forall (vars (?v0 S2)) #11)
#592 := (iff #12 #589)
#590 := (iff #11 #11)
#591 := [refl]: #590
#593 := [quant-intro #591]: #592
#91 := (~ #12 #12)
#89 := (~ #11 #11)
#90 := [refl]: #89
#92 := [nnf-pos #90]: #91
#68 := [asserted]: #12
#76 := [mp~ #68 #92]: #12
#594 := [mp #76 #593]: #589
#237 := (not #589)
#579 := (or #237 #251)
#221 := [quant-inst #40]: #579
[unit-resolution #221 #594 #226]: false
unsat
aea5829d512de2728ecad3b816f4fb373d3860ab 131 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#13 := f5
decl f10 :: S2
#40 := f10
#269 := (f3 f10 f5)
#248 := (= #269 f1)
#584 := (not #248)
decl f11 :: S3
#41 := f11
#46 := (f3 f10 f11)
#47 := (= #46 f1)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#42 := (f7 f9 f11)
#43 := (f6 #42 f5)
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#262 := (not #47)
#580 := [hypothesis]: #262
#268 := (or #45 #47)
#75 := (not #45)
#76 := (iff #75 #47)
#48 := (iff #45 #47)
#49 := (not #48)
#77 := (iff #49 #76)
#78 := [rewrite]: #77
#74 := [asserted]: #49
#81 := [mp #74 #78]: #76
#177 := (not #76)
#266 := (or #45 #47 #177)
#267 := [def-axiom]: #266
#265 := [unit-resolution #267 #81]: #268
#253 := [unit-resolution #265 #580]: #45
#586 := (or #262 #584)
#589 := (or #586 #47)
#590 := [def-axiom]: #589
#232 := [unit-resolution #590 #580]: #586
#242 := (not #586)
#570 := (or #75 #242)
#373 := (iff #45 #242)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#613 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#106 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#105 := (not #26)
#89 := (or #105 #106)
#90 := (not #89)
#36 := (= #35 f1)
#107 := (iff #36 #90)
#614 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #613) #107)
#110 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #107)
#617 := (iff #110 #614)
#615 := (iff #107 #107)
#616 := [refl]: #615
#618 := [quant-intro #616]: #617
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#111 := (iff #39 #110)
#108 := (iff #38 #107)
#91 := (iff #37 #90)
#92 := [rewrite]: #91
#109 := [monotonicity #92]: #108
#112 := [quant-intro #109]: #111
#87 := (~ #39 #39)
#102 := (~ #38 #38)
#103 := [refl]: #102
#88 := [nnf-pos #103]: #87
#73 := [asserted]: #39
#104 := [mp~ #73 #88]: #39
#113 := [mp #104 #112]: #110
#619 := [mp #113 #618]: #614
#254 := (not #614)
#587 := (or #254 #373)
#588 := [quant-inst #40 #41 #13]: #587
#569 := [unit-resolution #588 #619]: #373
#245 := (not #373)
#583 := (or #245 #75 #242)
#225 := [def-axiom]: #583
#571 := [unit-resolution #225 #569]: #570
#572 := [unit-resolution #571 #232 #253]: false
#573 := [lemma #572]: #47
#264 := (or #75 #262)
#263 := (or #75 #262 #177)
#178 := [def-axiom]: #263
#255 := [unit-resolution #178 #81]: #264
#568 := [unit-resolution #255 #573]: #75
#574 := (or #45 #586)
#582 := (or #245 #45 #586)
#241 := [def-axiom]: #582
#216 := [unit-resolution #241 #569]: #574
#217 := [unit-resolution #216 #568]: #586
#581 := (or #242 #262 #584)
#240 := [def-axiom]: #581
#578 := [unit-resolution #240 #217 #573]: #584
#7 := (:var 0 S2)
#14 := (f3 #7 f5)
#599 := (pattern #14)
#15 := (= #14 f1)
#600 := (forall (vars (?v0 S2)) (:pat #599) #15)
#16 := (forall (vars (?v0 S2)) #15)
#603 := (iff #16 #600)
#601 := (iff #15 #15)
#602 := [refl]: #601
#604 := [quant-intro #602]: #603
#83 := (~ #16 #16)
#82 := (~ #15 #15)
#97 := [refl]: #82
#84 := [nnf-pos #97]: #83
#71 := [asserted]: #16
#98 := [mp~ #71 #84]: #16
#605 := [mp #98 #604]: #600
#211 := (not #600)
#575 := (or #211 #248)
#577 := [quant-inst #40]: #575
[unit-resolution #577 #605 #578]: false
unsat
2c368a83b5623f0f697753a8fe91229b9ba6f049 144 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#41 := f11
decl f10 :: S2
#40 := f10
#272 := (f3 f10 f11)
#251 := (= #272 f1)
#587 := (not #251)
decl f12 :: S3
#43 := f12
#589 := (f3 f10 f12)
#245 := (= #589 f1)
#376 := (not #245)
#590 := (or #376 #587)
#591 := (not #590)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#47 := (f7 f9 f12)
#48 := (f6 #47 f11)
#49 := (f3 f10 #48)
#50 := (= #49 f1)
#265 := (not #50)
#575 := [hypothesis]: #265
#187 := (or #50 #590)
#574 := (iff #50 #591)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#616 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#109 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#108 := (not #26)
#92 := (or #108 #109)
#93 := (not #92)
#36 := (= #35 f1)
#110 := (iff #36 #93)
#617 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #616) #110)
#113 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #110)
#620 := (iff #113 #617)
#618 := (iff #110 #110)
#619 := [refl]: #618
#621 := [quant-intro #619]: #620
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#114 := (iff #39 #113)
#111 := (iff #38 #110)
#94 := (iff #37 #93)
#95 := [rewrite]: #94
#112 := [monotonicity #95]: #111
#115 := [quant-intro #112]: #114
#90 := (~ #39 #39)
#105 := (~ #38 #38)
#106 := [refl]: #105
#91 := [nnf-pos #106]: #90
#76 := [asserted]: #39
#107 := [mp~ #76 #91]: #39
#116 := [mp #107 #115]: #113
#622 := [mp #116 #621]: #617
#592 := (not #617)
#571 := (or #592 #574)
#577 := [quant-inst #40 #43 #41]: #571
#576 := [unit-resolution #577 #622]: #574
#579 := (not #574)
#582 := (or #579 #50 #590)
#568 := [def-axiom]: #582
#564 := [unit-resolution #568 #576]: #187
#565 := [unit-resolution #564 #575]: #590
#583 := (or #587 #376)
#256 := (not #583)
#42 := (f7 f9 f11)
#44 := (f6 #42 f12)
#45 := (f3 f10 #44)
#46 := (= #45 f1)
#271 := (or #46 #50)
#78 := (not #46)
#79 := (iff #78 #50)
#51 := (iff #46 #50)
#52 := (not #51)
#80 := (iff #52 #79)
#81 := [rewrite]: #80
#77 := [asserted]: #52
#84 := [mp #77 #81]: #79
#180 := (not #79)
#269 := (or #46 #50 #180)
#270 := [def-axiom]: #269
#268 := [unit-resolution #270 #84]: #271
#287 := [unit-resolution #268 #575]: #46
#562 := (or #78 #256)
#257 := (iff #46 #256)
#593 := (or #592 #257)
#588 := [quant-inst #40 #41 #43]: #593
#288 := [unit-resolution #588 #622]: #257
#586 := (not #257)
#232 := (or #586 #78 #256)
#233 := [def-axiom]: #232
#566 := [unit-resolution #233 #288]: #562
#563 := [unit-resolution #566 #287]: #256
#594 := (or #583 #251)
#584 := [def-axiom]: #594
#567 := [unit-resolution #584 #563]: #251
#243 := (or #583 #245)
#248 := [def-axiom]: #243
#277 := [unit-resolution #248 #563]: #245
#220 := (or #591 #376 #587)
#581 := [def-axiom]: #220
#278 := [unit-resolution #581 #277 #567 #565]: false
#279 := [lemma #278]: #50
#280 := (or #265 #591)
#569 := (or #579 #265 #591)
#276 := [def-axiom]: #569
#558 := [unit-resolution #276 #576]: #280
#559 := [unit-resolution #558 #279]: #591
#580 := (or #590 #251)
#219 := [def-axiom]: #580
#273 := [unit-resolution #219 #559]: #251
#267 := (or #78 #265)
#266 := (or #78 #265 #180)
#181 := [def-axiom]: #266
#258 := [unit-resolution #181 #84]: #267
#556 := [unit-resolution #258 #279]: #78
#560 := (or #46 #583)
#228 := (or #586 #46 #583)
#570 := [def-axiom]: #228
#557 := [unit-resolution #570 #288]: #560
#561 := [unit-resolution #557 #556]: #583
#214 := (or #590 #245)
#578 := [def-axiom]: #214
#550 := [unit-resolution #578 #559]: #245
#585 := (or #256 #587 #376)
#244 := [def-axiom]: #585
[unit-resolution #244 #550 #561 #273]: false
unsat
786e0baa52e956eb38ebe0e784a4d54d1b6938d2 116 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#41 := f11
decl f10 :: S2
#40 := f10
#46 := (f3 f10 f11)
#47 := (= #46 f1)
#262 := (not #47)
#568 := [hypothesis]: #262
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#42 := (f7 f9 f11)
#43 := (f6 #42 f11)
#44 := (f3 f10 #43)
#45 := (= #44 f1)
#268 := (or #45 #47)
#75 := (not #45)
#76 := (iff #75 #47)
#48 := (iff #45 #47)
#49 := (not #48)
#77 := (iff #49 #76)
#78 := [rewrite]: #77
#74 := [asserted]: #49
#81 := [mp #74 #78]: #76
#177 := (not #76)
#266 := (or #45 #47 #177)
#267 := [def-axiom]: #266
#265 := [unit-resolution #267 #81]: #268
#574 := [unit-resolution #265 #568]: #45
#575 := (or #75 #47)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#613 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#106 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#105 := (not #26)
#89 := (or #105 #106)
#90 := (not #89)
#36 := (= #35 f1)
#107 := (iff #36 #90)
#614 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #613) #107)
#110 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #107)
#617 := (iff #110 #614)
#615 := (iff #107 #107)
#616 := [refl]: #615
#618 := [quant-intro #616]: #617
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#111 := (iff #39 #110)
#108 := (iff #38 #107)
#91 := (iff #37 #90)
#92 := [rewrite]: #91
#109 := [monotonicity #92]: #108
#112 := [quant-intro #109]: #111
#87 := (~ #39 #39)
#102 := (~ #38 #38)
#103 := [refl]: #102
#88 := [nnf-pos #103]: #87
#73 := [asserted]: #39
#104 := [mp~ #73 #88]: #39
#113 := [mp #104 #112]: #110
#619 := [mp #113 #618]: #614
#591 := (not #614)
#581 := (or #591 #48)
#269 := (or #262 #262)
#248 := (not #269)
#584 := (iff #45 #248)
#240 := (or #591 #584)
#582 := (iff #240 #581)
#583 := (iff #581 #581)
#225 := [rewrite]: #583
#590 := (iff #584 #48)
#588 := (iff #248 #47)
#373 := (not #262)
#254 := (iff #373 #47)
#587 := [rewrite]: #254
#580 := (iff #248 #373)
#586 := (iff #269 #262)
#242 := [rewrite]: #586
#253 := [monotonicity #242]: #580
#589 := [trans #253 #587]: #588
#585 := [monotonicity #589]: #590
#241 := [monotonicity #585]: #582
#567 := [trans #241 #225]: #582
#245 := [quant-inst #40 #41 #41]: #240
#229 := [mp #245 #567]: #581
#211 := [unit-resolution #229 #619]: #48
#232 := (or #49 #75 #47)
#569 := [def-axiom]: #232
#577 := [unit-resolution #569 #211]: #575
#216 := [unit-resolution #577 #574 #568]: false
#217 := [lemma #216]: #47
#264 := (or #75 #262)
#263 := (or #75 #262 #177)
#178 := [def-axiom]: #263
#255 := [unit-resolution #178 #81]: #264
#578 := [unit-resolution #255 #217]: #75
#576 := (or #45 #262)
#230 := (or #49 #45 #262)
#231 := [def-axiom]: #230
#579 := [unit-resolution #231 #211]: #576
[unit-resolution #579 #578 #217]: false
unsat
62139c25ee961075afc011e9d98f3a2524600355 207 0
#2 := false
decl f1 :: S1
#3 := f1
decl f3 :: (-> S2 S3 S1)
decl f13 :: S3
#45 := f13
decl f10 :: S2
#40 := f10
#579 := (f3 f10 f13)
#580 := (= #579 f1)
#575 := (not #580)
decl f12 :: S3
#43 := f12
#584 := (f3 f10 f12)
#223 := (= #584 f1)
#570 := (not #223)
#567 := (or #570 #575)
#571 := (not #567)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#32 := f9
#44 := (f7 f9 f12)
#46 := (f6 #44 f13)
#593 := (f3 f10 #46)
#249 := (= #593 f1)
#281 := (iff #249 #571)
#379 := (not #281)
decl f11 :: S3
#41 := f11
#276 := (f3 f10 f11)
#255 := (= #276 f1)
#591 := (not #255)
#282 := (or #591 #570)
#283 := (not #282)
#42 := (f7 f9 f11)
#50 := (f6 #42 f12)
#594 := (f3 f10 #50)
#595 := (= #594 f1)
#400 := (iff #595 #283)
#543 := (not #400)
#401 := [hypothesis]: #543
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#33 := (f7 f9 #19)
#34 := (f6 #33 #21)
#17 := (:var 2 S2)
#35 := (f3 #17 #34)
#620 := (pattern #35)
#27 := (f3 #17 #21)
#28 := (= #27 f1)
#113 := (not #28)
#25 := (f3 #17 #19)
#26 := (= #25 f1)
#112 := (not #26)
#96 := (or #112 #113)
#97 := (not #96)
#36 := (= #35 f1)
#114 := (iff #36 #97)
#621 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #620) #114)
#117 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #114)
#624 := (iff #117 #621)
#622 := (iff #114 #114)
#623 := [refl]: #622
#625 := [quant-intro #623]: #624
#37 := (and #26 #28)
#38 := (iff #36 #37)
#39 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #38)
#118 := (iff #39 #117)
#115 := (iff #38 #114)
#98 := (iff #37 #97)
#99 := [rewrite]: #98
#116 := [monotonicity #99]: #115
#119 := [quant-intro #116]: #118
#94 := (~ #39 #39)
#109 := (~ #38 #38)
#110 := [refl]: #109
#95 := [nnf-pos #110]: #94
#80 := [asserted]: #39
#111 := [mp~ #80 #95]: #39
#120 := [mp #111 #119]: #117
#626 := [mp #120 #625]: #621
#596 := (not #621)
#544 := (or #596 #400)
#545 := [quant-inst #40 #41 #43]: #544
#402 := [unit-resolution #545 #626 #401]: false
#537 := [lemma #402]: #400
#578 := (not #595)
#581 := (or #578 #575)
#218 := (not #581)
#51 := (f7 f9 #50)
#52 := (f6 #51 f13)
#53 := (f3 f10 #52)
#54 := (= #53 f1)
#380 := (not #249)
#587 := (or #591 #380)
#260 := (not #587)
#47 := (f6 #42 #46)
#48 := (f3 f10 #47)
#49 := (= #48 f1)
#269 := (not #54)
#559 := [hypothesis]: #269
#275 := (or #49 #54)
#82 := (not #49)
#83 := (iff #82 #54)
#55 := (iff #49 #54)
#56 := (not #55)
#84 := (iff #56 #83)
#85 := [rewrite]: #84
#81 := [asserted]: #56
#88 := [mp #81 #85]: #83
#184 := (not #83)
#273 := (or #49 #54 #184)
#274 := [def-axiom]: #273
#272 := [unit-resolution #274 #88]: #275
#284 := [unit-resolution #272 #559]: #49
#424 := (or #82 #260)
#261 := (iff #49 #260)
#597 := (or #596 #261)
#592 := [quant-inst #40 #41 #46]: #597
#423 := [unit-resolution #592 #626]: #261
#590 := (not #261)
#236 := (or #590 #82 #260)
#237 := [def-axiom]: #236
#383 := [unit-resolution #237 #423]: #424
#531 := [unit-resolution #383 #284]: #260
#598 := (or #587 #255)
#588 := [def-axiom]: #598
#433 := [unit-resolution #588 #531]: #255
#562 := (or #596 #281)
#546 := [quant-inst #40 #43 #45]: #562
#528 := [unit-resolution #546 #626]: #281
#532 := (or #379 #571)
#247 := (or #587 #249)
#252 := [def-axiom]: #247
#529 := [unit-resolution #252 #531]: #249
#535 := (or #379 #380 #571)
#536 := [def-axiom]: #535
#417 := [unit-resolution #536 #529]: #532
#432 := [unit-resolution #417 #528]: #571
#547 := (or #567 #223)
#541 := [def-axiom]: #547
#434 := [unit-resolution #541 #432]: #223
#561 := (or #283 #591 #570)
#565 := [def-axiom]: #561
#435 := [unit-resolution #565 #434 #433]: #283
#436 := (or #54 #581)
#582 := (iff #54 #218)
#224 := (or #596 #582)
#585 := [quant-inst #40 #50 #45]: #224
#428 := [unit-resolution #585 #626]: #582
#296 := (not #582)
#297 := (or #296 #54 #581)
#298 := [def-axiom]: #297
#437 := [unit-resolution #298 #428]: #436
#438 := [unit-resolution #437 #559]: #581
#542 := (or #567 #580)
#548 := [def-axiom]: #542
#439 := [unit-resolution #548 #432]: #580
#280 := (or #218 #578 #575)
#295 := [def-axiom]: #280
#440 := [unit-resolution #295 #439 #438]: #578
#554 := (or #543 #595 #282)
#555 := [def-axiom]: #554
#533 := [unit-resolution #555 #440 #435 #537]: false
#530 := [lemma #533]: #54
#549 := (or #269 #218)
#191 := (or #296 #269 #218)
#568 := [def-axiom]: #191
#550 := [unit-resolution #568 #428]: #549
#523 := [unit-resolution #550 #530]: #218
#583 := (or #581 #595)
#586 := [def-axiom]: #583
#515 := [unit-resolution #586 #523]: #595
#556 := (or #543 #578 #283)
#551 := [def-axiom]: #556
#512 := [unit-resolution #551 #515 #537]: #283
#560 := (or #282 #223)
#564 := [def-axiom]: #560
#514 := [unit-resolution #564 #512]: #223
#572 := (or #581 #580)
#573 := [def-axiom]: #572
#524 := [unit-resolution #573 #523]: #580
#381 := (or #571 #570 #575)
#382 := [def-axiom]: #381
#525 := [unit-resolution #382 #524 #514]: #571
#271 := (or #82 #269)
#270 := (or #82 #269 #184)
#185 := [def-axiom]: #270
#262 := [unit-resolution #185 #88]: #271
#526 := [unit-resolution #262 #530]: #82
#522 := (or #49 #587)
#232 := (or #590 #49 #587)
#574 := [def-axiom]: #232
#527 := [unit-resolution #574 #423]: #522
#516 := [unit-resolution #527 #526]: #587
#563 := (or #282 #255)
#277 := [def-axiom]: #563
#517 := [unit-resolution #277 #512]: #255
#589 := (or #260 #591 #380)
#248 := [def-axiom]: #589
#518 := [unit-resolution #248 #517 #516]: #380
#538 := (or #379 #249 #567)
#539 := [def-axiom]: #538
#519 := [unit-resolution #539 #518 #525]: #379
[unit-resolution #546 #626 #519]: false
unsat
c39c54f907aa2283011df5d842bdfd51c1629e0d 22 0
#2 := false
decl f13 :: (-> S7 S3 S4)
decl f4 :: S3
#7 := f4
decl f14 :: S7
#49 := f14
#50 := (f13 f14 f4)
#51 := (= #50 #50)
#52 := (not #51)
#86 := (iff #52 false)
#1 := true
#81 := (not true)
#84 := (iff #81 false)
#85 := [rewrite]: #84
#82 := (iff #52 #81)
#79 := (iff #51 true)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#87 := [trans #83 #85]: #86
#78 := [asserted]: #52
[mp #78 #87]: false
unsat
f797db065a8c5b2969ce205bd43175da50729663 62 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (if #59 #9 #11)
#70 := (* -1::Int #62)
#253 := (+ #11 #70)
#602 := (>= #253 0::Int)
#290 := (= #11 #62)
#206 := (not #59)
#205 := (= #9 #62)
#598 := (not #205)
#71 := (+ #9 #70)
#69 := (>= #71 0::Int)
#75 := (not #69)
#12 := (<= #9 #11)
#13 := (if #12 #9 #11)
#14 := (<= #13 #9)
#15 := (not #14)
#76 := (iff #15 #75)
#73 := (iff #14 #69)
#65 := (<= #62 #9)
#68 := (iff #65 #69)
#72 := [rewrite]: #68
#66 := (iff #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#74 := [trans #67 #72]: #73
#77 := [monotonicity #74]: #76
#53 := [asserted]: #15
#78 := [mp #53 #77]: #75
#594 := [hypothesis]: #205
#599 := (or #598 #69)
#600 := [th-lemma arith triangle-eq]: #599
#595 := [unit-resolution #600 #594 #78]: false
#601 := [lemma #595]: #598
#291 := (or #206 #205)
#292 := [def-axiom]: #291
#604 := [unit-resolution #292 #601]: #206
#283 := (or #59 #290)
#294 := [def-axiom]: #283
#244 := [unit-resolution #294 #604]: #290
#245 := (not #290)
#605 := (or #245 #602)
#603 := [th-lemma arith triangle-eq]: #605
#606 := [unit-resolution #603 #244]: #602
[th-lemma arith farkas 1 1 1 #78 #604 #606]: false
unsat
31e82c3a0418f1a5035c07306f1bcb632442caaa 62 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#56 := -1::Int
#57 := (* -1::Int #11)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (if #59 #9 #11)
#69 := (* -1::Int #62)
#70 := (+ #11 #69)
#68 := (>= #70 0::Int)
#75 := (not #68)
#12 := (<= #9 #11)
#13 := (if #12 #9 #11)
#14 := (<= #13 #11)
#15 := (not #14)
#76 := (iff #15 #75)
#73 := (iff #14 #68)
#65 := (<= #62 #11)
#71 := (iff #65 #68)
#72 := [rewrite]: #71
#66 := (iff #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#74 := [trans #67 #72]: #73
#77 := [monotonicity #74]: #76
#53 := [asserted]: #15
#78 := [mp #53 #77]: #75
#290 := (= #11 #62)
#206 := (not #59)
#599 := [hypothesis]: #59
#253 := (+ #9 #69)
#598 := (>= #253 0::Int)
#205 := (= #9 #62)
#291 := (or #206 #205)
#292 := [def-axiom]: #291
#600 := [unit-resolution #292 #599]: #205
#595 := (not #205)
#601 := (or #595 #598)
#239 := [th-lemma arith triangle-eq]: #601
#602 := [unit-resolution #239 #600]: #598
#604 := [th-lemma arith farkas -1 1 1 #602 #78 #599]: false
#244 := [lemma #604]: #206
#283 := (or #59 #290)
#294 := [def-axiom]: #283
#245 := [unit-resolution #294 #244]: #290
#605 := (not #290)
#603 := (or #605 #68)
#606 := [th-lemma arith triangle-eq]: #603
[unit-resolution #606 #245 #78]: false
unsat
255fa9c9d454506807f3975ef67899ee95170888 238 0
#2 := false
#23 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#57 := -1::Int
#58 := (* -1::Int #11)
#59 := (+ #9 #58)
#60 := (<= #59 0::Int)
#63 := (if #60 #9 #11)
#72 := (* -1::Int #63)
#255 := (+ #9 #72)
#600 := (>= #255 0::Int)
#607 := (not #600)
#617 := (>= #11 0::Int)
#586 := (= #11 0::Int)
decl f7 :: (-> S4 Int S3)
decl f8 :: S4
#17 := f8
#295 := (f7 f8 #11)
#618 := (f3 f4 #295)
#271 := (= #618 0::Int)
#592 := (not #617)
#439 := [hypothesis]: #592
#612 := (or #617 #271)
#24 := (:var 0 Int)
#26 := (f7 f8 #24)
#628 := (pattern #26)
#27 := (f3 f4 #26)
#32 := (= #27 0::Int)
#89 := (>= #24 0::Int)
#120 := (or #89 #32)
#635 := (forall (vars (?v0 Int)) (:pat #628) #120)
#123 := (forall (vars (?v0 Int)) #120)
#638 := (iff #123 #635)
#636 := (iff #120 #120)
#637 := [refl]: #636
#639 := [quant-intro #637]: #638
#136 := (~ #123 #123)
#144 := (~ #120 #120)
#145 := [refl]: #144
#137 := [nnf-pos #145]: #136
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#126 := (iff #34 #123)
#104 := (not #31)
#105 := (or #104 #32)
#108 := (forall (vars (?v0 Int)) #105)
#124 := (iff #108 #123)
#121 := (iff #105 #120)
#118 := (iff #104 #89)
#91 := (not #89)
#113 := (not #91)
#116 := (iff #113 #89)
#117 := [rewrite]: #116
#114 := (iff #104 #113)
#111 := (iff #31 #91)
#112 := [rewrite]: #111
#115 := [monotonicity #112]: #114
#119 := [trans #115 #117]: #118
#122 := [monotonicity #119]: #121
#125 := [quant-intro #122]: #124
#109 := (iff #34 #108)
#106 := (iff #33 #105)
#107 := [rewrite]: #106
#110 := [quant-intro #107]: #109
#127 := [trans #110 #125]: #126
#103 := [asserted]: #34
#128 := [mp #103 #127]: #123
#146 := [mp~ #128 #137]: #123
#640 := [mp #146 #639]: #635
#619 := (not #635)
#259 := (or #619 #617 #271)
#260 := (or #619 #612)
#262 := (iff #260 #259)
#598 := [rewrite]: #262
#261 := [quant-inst #11]: #260
#599 := [mp #261 #598]: #259
#304 := [unit-resolution #599 #640]: #612
#454 := [unit-resolution #304 #439]: #271
#300 := (= #11 #618)
#584 := (= f6 #295)
#299 := (= #295 f6)
#18 := (:var 0 S3)
#19 := (f3 f4 #18)
#621 := (pattern #19)
#20 := (f7 f8 #19)
#21 := (= #20 #18)
#622 := (forall (vars (?v0 S3)) (:pat #621) #21)
#22 := (forall (vars (?v0 S3)) #21)
#625 := (iff #22 #622)
#623 := (iff #21 #21)
#624 := [refl]: #623
#626 := [quant-intro #624]: #625
#142 := (~ #22 #22)
#140 := (~ #21 #21)
#141 := [refl]: #140
#143 := [nnf-pos #141]: #142
#55 := [asserted]: #22
#132 := [mp~ #55 #143]: #22
#627 := [mp #132 #626]: #622
#278 := (not #622)
#609 := (or #278 #299)
#283 := [quant-inst #10]: #609
#306 := [unit-resolution #283 #627]: #299
#585 := [symm #306]: #584
#582 := [monotonicity #585]: #300
#456 := [trans #582 #454]: #586
#457 := (not #586)
#450 := (or #457 #617)
#458 := [th-lemma arith triangle-eq]: #450
#459 := [unit-resolution #458 #439 #456]: false
#460 := [lemma #459]: #617
#555 := (or #592 #607)
#73 := (+ #11 #72)
#74 := (+ #9 #73)
#70 := (>= #74 0::Int)
#77 := (not #70)
#14 := (+ #9 #11)
#12 := (<= #9 #11)
#13 := (if #12 #9 #11)
#15 := (<= #13 #14)
#16 := (not #15)
#78 := (iff #16 #77)
#75 := (iff #15 #70)
#66 := (<= #63 #14)
#69 := (iff #66 #70)
#71 := [rewrite]: #69
#67 := (iff #15 #66)
#64 := (= #13 #63)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#76 := [trans #68 #71]: #75
#79 := [monotonicity #76]: #78
#54 := [asserted]: #16
#80 := [mp #54 #79]: #77
#589 := (or #592 #607 #70)
#593 := [th-lemma arith assign-bounds 1 -1]: #589
#552 := [unit-resolution #593 #80]: #555
#556 := [unit-resolution #552 #460]: #607
#207 := (= #9 #63)
#297 := (f7 f8 #9)
#402 := (f3 f4 #297)
#284 := (= #402 0::Int)
#405 := (iff #284 #207)
#445 := (iff #207 #284)
#562 := (= #63 0::Int)
#424 := (>= #73 0::Int)
#292 := (= #11 #63)
#580 := (iff #284 #292)
#574 := (iff #292 #284)
#587 := (= 0::Int #402)
#578 := (iff #587 #284)
#573 := [commutativity]: #578
#576 := (iff #292 #587)
#314 := (= #63 #402)
#591 := (= #9 #402)
#319 := (= f5 #297)
#298 := (= #297 f5)
#613 := (or #278 #298)
#615 := [quant-inst #8]: #613
#318 := [unit-resolution #615 #627]: #298
#320 := [symm #318]: #319
#313 := [monotonicity #320]: #591
#214 := (= #63 #9)
#601 := (not #292)
#602 := [hypothesis]: #601
#285 := (or #60 #292)
#296 := [def-axiom]: #285
#597 := [unit-resolution #296 #602]: #60
#208 := (not #60)
#293 := (or #208 #207)
#294 := [def-axiom]: #293
#603 := [unit-resolution #294 #597]: #207
#590 := [symm #603]: #214
#588 := [trans #590 #313]: #314
#241 := (not #207)
#604 := (or #241 #600)
#606 := [th-lemma arith triangle-eq]: #604
#246 := [unit-resolution #606 #603]: #600
#303 := [unit-resolution #593 #246 #80]: #592
#305 := [unit-resolution #304 #303]: #271
#583 := [trans #582 #305]: #586
#577 := [monotonicity #583 #588]: #576
#579 := [trans #577 #573]: #574
#575 := [symm #579]: #580
#272 := (>= #9 0::Int)
#247 := (not #272)
#605 := (or #247 #208 #607 #70)
#608 := [th-lemma arith assign-bounds -1 1 -1]: #605
#594 := [unit-resolution #608 #597 #80 #246]: #247
#616 := (or #272 #284)
#614 := (or #619 #272 #284)
#620 := (or #619 #616)
#270 := (iff #620 #614)
#275 := [rewrite]: #270
#610 := [quant-inst #9]: #620
#611 := [mp #610 #275]: #614
#595 := [unit-resolution #611 #640]: #616
#317 := [unit-resolution #595 #594]: #284
#581 := [mp #317 #575]: #292
#422 := [unit-resolution #602 #581]: false
#423 := [lemma #422]: #292
#567 := (or #601 #424)
#568 := [th-lemma arith triangle-eq]: #567
#569 := [unit-resolution #568 #423]: #424
#566 := [hypothesis]: #241
#572 := [unit-resolution #294 #566]: #208
#563 := (not #424)
#401 := (or #592 #563 #60 #70)
#403 := [th-lemma arith assign-bounds 1 1 1]: #401
#404 := [unit-resolution #403 #572 #80 #569]: #592
#557 := [unit-resolution #304 #404]: #271
#561 := (= #63 #618)
#558 := (= #63 #11)
#560 := [symm #423]: #558
#559 := [trans #560 #582]: #561
#444 := [trans #559 #557]: #562
#446 := [monotonicity #313 #444]: #445
#553 := [symm #446]: #405
#564 := (or #247 #563 #70)
#570 := [th-lemma arith assign-bounds 1 -1]: #564
#571 := [unit-resolution #570 #569 #80]: #247
#565 := [unit-resolution #595 #571]: #284
#455 := [mp #565 #553]: #207
#550 := [unit-resolution #566 #455]: false
#551 := [lemma #550]: #207
[unit-resolution #606 #551 #556]: false
unsat
045d7d8d25dac55517e319701f444d30bf2a94d9 109 0
#2 := false
#28 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#13 := f7
decl f4 :: S2
#7 := f4
#14 := (f3 f4 f7)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#67 := -1::Int
#76 := (* -1::Int #14)
#86 := (+ #11 #76)
#87 := (<= #86 0::Int)
#90 := (if #87 #11 #14)
#98 := (* -1::Int #90)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#99 := (+ #9 #98)
#97 := (>= #99 0::Int)
#96 := (not #97)
#77 := (+ #9 #76)
#75 := (>= #77 0::Int)
#74 := (not #75)
#70 := (* -1::Int #11)
#71 := (+ #9 #70)
#69 := (>= #71 0::Int)
#68 := (not #69)
#80 := (and #68 #74)
#83 := (not #80)
#104 := (or #83 #96)
#107 := (not #104)
#17 := (<= #11 #14)
#18 := (if #17 #11 #14)
#19 := (< #9 #18)
#15 := (< #9 #14)
#12 := (< #9 #11)
#16 := (and #12 #15)
#20 := (implies #16 #19)
#21 := (not #20)
#110 := (iff #21 #107)
#60 := (not #16)
#61 := (or #60 #19)
#64 := (not #61)
#108 := (iff #64 #107)
#105 := (iff #61 #104)
#102 := (iff #19 #96)
#93 := (< #9 #90)
#100 := (iff #93 #96)
#101 := [rewrite]: #100
#94 := (iff #19 #93)
#91 := (= #18 #90)
#88 := (iff #17 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#95 := [monotonicity #92]: #94
#103 := [trans #95 #101]: #102
#84 := (iff #60 #83)
#81 := (iff #16 #80)
#78 := (iff #15 #74)
#79 := [rewrite]: #78
#72 := (iff #12 #68)
#73 := [rewrite]: #72
#82 := [monotonicity #73 #79]: #81
#85 := [monotonicity #82]: #84
#106 := [monotonicity #85 #103]: #105
#109 := [monotonicity #106]: #108
#65 := (iff #21 #64)
#62 := (iff #20 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#111 := [trans #66 #109]: #110
#59 := [asserted]: #21
#112 := [mp #59 #111]: #107
#116 := [not-or-elim #112]: #97
#113 := [not-or-elim #112]: #80
#115 := [and-elim #113]: #74
#633 := (+ #14 #98)
#630 := (<= #633 0::Int)
#330 := (= #14 #90)
#246 := (not #87)
#245 := (= #11 #90)
#628 := (not #245)
#642 := (+ #11 #98)
#644 := (<= #642 0::Int)
#357 := (not #644)
#114 := [and-elim #113]: #68
#355 := [hypothesis]: #644
#356 := [th-lemma arith farkas -1 -1 1 #355 #114 #116]: false
#358 := [lemma #356]: #357
#252 := [hypothesis]: #245
#629 := (or #628 #644)
#351 := [th-lemma arith triangle-eq]: #629
#352 := [unit-resolution #351 #252 #358]: false
#626 := [lemma #352]: #628
#331 := (or #246 #245)
#332 := [def-axiom]: #331
#631 := [unit-resolution #332 #626]: #246
#323 := (or #87 #330)
#334 := [def-axiom]: #323
#341 := [unit-resolution #334 #631]: #330
#342 := (not #330)
#343 := (or #342 #630)
#344 := [th-lemma arith triangle-eq]: #343
#622 := [unit-resolution #344 #341]: #630
[th-lemma arith farkas -1 -1 1 #622 #115 #116]: false
unsat
1962433f8497846ba06e564f4ca48d7e020eb6e0 141 0
#2 := false
#10 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: (-> S4 Int S3)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
decl f7 :: S4
#12 := f7
#272 := (f6 f7 #9)
#570 := (f3 f4 #272)
#277 := (= #570 0::Int)
#543 := (= #9 0::Int)
#11 := (<= #9 0::Int)
#13 := (f6 f7 0::Int)
#14 := (if #11 f5 #13)
#266 := (= #13 #14)
#567 := (not #266)
#15 := (= #14 #13)
#16 := (not #15)
#564 := (iff #16 #567)
#293 := (iff #15 #266)
#294 := [commutativity]: #293
#568 := [monotonicity #294]: #564
#52 := [asserted]: #16
#278 := [mp #52 #568]: #567
#259 := (or #11 #266)
#270 := [def-axiom]: #259
#279 := [unit-resolution #270 #278]: #11
#569 := (>= #9 0::Int)
#541 := (not #277)
#181 := (= f5 #14)
#182 := (not #11)
#267 := (or #182 #181)
#268 := [def-axiom]: #267
#280 := [unit-resolution #268 #279]: #181
#556 := (= #13 f5)
#269 := (= #272 f5)
#17 := (:var 0 S3)
#18 := (f3 f4 #17)
#596 := (pattern #18)
#19 := (f6 f7 #18)
#20 := (= #19 #17)
#597 := (forall (vars (?v0 S3)) (:pat #596) #20)
#21 := (forall (vars (?v0 S3)) #20)
#600 := (iff #21 #597)
#598 := (iff #20 #20)
#599 := [refl]: #598
#601 := [quant-intro #599]: #600
#116 := (~ #21 #21)
#114 := (~ #20 #20)
#115 := [refl]: #114
#117 := [nnf-pos #115]: #116
#53 := [asserted]: #21
#106 := [mp~ #53 #117]: #21
#602 := [mp #106 #601]: #597
#588 := (not #597)
#590 := (or #588 #269)
#246 := [quant-inst #8]: #590
#281 := [unit-resolution #246 #602]: #269
#549 := (= #13 #272)
#553 := (= 0::Int #9)
#551 := (= #570 #9)
#557 := (= #9 #570)
#560 := (= f5 #272)
#274 := [symm #281]: #560
#561 := [monotonicity #274]: #557
#552 := [symm #561]: #551
#558 := (= 0::Int #570)
#559 := [hypothesis]: #277
#562 := [symm #559]: #558
#548 := [trans #562 #552]: #553
#554 := [monotonicity #548]: #549
#397 := [trans #554 #281]: #556
#398 := [trans #397 #280]: #266
#399 := [unit-resolution #278 #398]: false
#542 := [lemma #399]: #541
#292 := (or #569 #277)
#22 := (:var 0 Int)
#24 := (f6 f7 #22)
#603 := (pattern #24)
#25 := (f3 f4 #24)
#30 := (= #25 0::Int)
#64 := (>= #22 0::Int)
#94 := (or #64 #30)
#610 := (forall (vars (?v0 Int)) (:pat #603) #94)
#97 := (forall (vars (?v0 Int)) #94)
#613 := (iff #97 #610)
#611 := (iff #94 #94)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#110 := (~ #97 #97)
#118 := (~ #94 #94)
#119 := [refl]: #118
#111 := [nnf-pos #119]: #110
#29 := (< #22 0::Int)
#31 := (implies #29 #30)
#32 := (forall (vars (?v0 Int)) #31)
#100 := (iff #32 #97)
#78 := (not #29)
#79 := (or #78 #30)
#82 := (forall (vars (?v0 Int)) #79)
#98 := (iff #82 #97)
#95 := (iff #79 #94)
#92 := (iff #78 #64)
#65 := (not #64)
#87 := (not #65)
#90 := (iff #87 #64)
#91 := [rewrite]: #90
#88 := (iff #78 #87)
#85 := (iff #29 #65)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#93 := [trans #89 #91]: #92
#96 := [monotonicity #93]: #95
#99 := [quant-intro #96]: #98
#83 := (iff #32 #82)
#80 := (iff #31 #79)
#81 := [rewrite]: #80
#84 := [quant-intro #81]: #83
#101 := [trans #84 #99]: #100
#77 := [asserted]: #32
#102 := [mp #77 #101]: #97
#120 := [mp~ #102 #111]: #97
#615 := [mp #120 #614]: #610
#295 := (not #610)
#188 := (or #295 #569 #277)
#565 := (or #295 #292)
#288 := (iff #565 #188)
#289 := [rewrite]: #288
#566 := [quant-inst #9]: #565
#563 := [mp #566 #289]: #188
#555 := [unit-resolution #563 #615]: #292
#550 := [unit-resolution #555 #542]: #569
#544 := [th-lemma arith eq-propagate 0 0 #550 #279]: #543
#538 := [monotonicity #281]: #551
#539 := [trans #538 #544]: #277
[unit-resolution #542 #539]: false
unsat
f80dc9916afc1b74e708843f9de068b19b70dd30 62 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#56 := -1::Int
#57 := (* -1::Int #11)
#58 := (+ #9 #57)
#59 := (<= #58 0::Int)
#62 := (if #59 #11 #9)
#68 := (* -1::Int #62)
#69 := (+ #9 #68)
#70 := (<= #69 0::Int)
#75 := (not #70)
#12 := (<= #9 #11)
#13 := (if #12 #11 #9)
#14 := (<= #9 #13)
#15 := (not #14)
#76 := (iff #15 #75)
#73 := (iff #14 #70)
#65 := (<= #9 #62)
#71 := (iff #65 #70)
#72 := [rewrite]: #71
#66 := (iff #14 #65)
#63 := (= #13 #62)
#60 := (iff #12 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#74 := [trans #67 #72]: #73
#77 := [monotonicity #74]: #76
#53 := [asserted]: #15
#78 := [mp #53 #77]: #75
#290 := (= #9 #62)
#206 := (not #59)
#599 := [hypothesis]: #59
#253 := (+ #11 #68)
#594 := (<= #253 0::Int)
#205 := (= #11 #62)
#291 := (or #206 #205)
#292 := [def-axiom]: #291
#600 := [unit-resolution #292 #599]: #205
#595 := (not #205)
#601 := (or #595 #594)
#239 := [th-lemma arith triangle-eq]: #601
#602 := [unit-resolution #239 #600]: #594
#604 := [th-lemma arith farkas 1 -1 1 #602 #78 #599]: false
#244 := [lemma #604]: #206
#283 := (or #59 #290)
#294 := [def-axiom]: #283
#245 := [unit-resolution #294 #244]: #290
#605 := (not #290)
#603 := (or #605 #70)
#606 := [th-lemma arith triangle-eq]: #603
[unit-resolution #606 #245 #78]: false
unsat
863d026b871fd01ad877b22fe75d3d9947adc4c3 62 0
#2 := false
#22 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#10 := f6
decl f4 :: S2
#7 := f4
#11 := (f3 f4 f6)
decl f5 :: S3
#8 := f5
#9 := (f3 f4 f5)
#56 := -1::Int
#59 := (* -1::Int #11)
#60 := (+ #9 #59)
#58 := (>= #60 0::Int)
#62 := (if #58 #9 #11)
#68 := (* -1::Int #62)
#253 := (+ #11 #68)
#239 := (<= #253 0::Int)
#290 := (= #11 #62)
#206 := (not #58)
#205 := (= #9 #62)
#598 := (not #205)
#69 := (+ #9 #68)
#70 := (<= #69 0::Int)
#75 := (not #70)
#12 := (<= #11 #9)
#13 := (if #12 #9 #11)
#14 := (<= #9 #13)
#15 := (not #14)
#76 := (iff #15 #75)
#73 := (iff #14 #70)
#65 := (<= #9 #62)
#71 := (iff #65 #70)
#72 := [rewrite]: #71
#66 := (iff #14 #65)
#63 := (= #13 #62)
#57 := (iff #12 #58)
#61 := [rewrite]: #57
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#74 := [trans #67 #72]: #73
#77 := [monotonicity #74]: #76
#53 := [asserted]: #15
#78 := [mp #53 #77]: #75
#594 := [hypothesis]: #205
#599 := (or #598 #70)
#600 := [th-lemma arith triangle-eq]: #599
#595 := [unit-resolution #600 #594 #78]: false
#601 := [lemma #595]: #598
#291 := (or #206 #205)
#292 := [def-axiom]: #291
#604 := [unit-resolution #292 #601]: #206
#283 := (or #58 #290)
#294 := [def-axiom]: #283
#244 := [unit-resolution #294 #604]: #290
#245 := (not #290)
#605 := (or #245 #239)
#603 := [th-lemma arith triangle-eq]: #605
#606 := [unit-resolution #603 #244]: #239
[th-lemma arith farkas 1 1 1 #78 #604 #606]: false
unsat
54dc3056c3d64c5f00f83943070ff19ad35f8f48 409 0
#2 := false
#29 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: (-> S4 Int S3)
decl f8 :: S3
#11 := f8
decl f4 :: S2
#7 := f4
#12 := (f3 f4 f8)
decl f7 :: S3
#9 := f7
#10 := (f3 f4 f7)
#61 := -1::Int
#72 := (* -1::Int #10)
#73 := (+ #72 #12)
decl f6 :: S4
#8 := f6
#76 := (f5 f6 #73)
#79 := (f3 f4 #76)
#62 := (* -1::Int #12)
#341 := (+ #62 #79)
#619 := (+ #10 #341)
#459 := (<= #619 0::Int)
#620 := (= #619 0::Int)
#63 := (+ #10 #62)
#91 := (<= #63 0::Int)
#94 := (if #91 #12 #10)
#100 := (* -1::Int #94)
#564 := (+ #10 #100)
#540 := (<= #564 0::Int)
#521 := (not #540)
#594 := (<= #79 0::Int)
#602 := (= #79 0::Int)
#243 := (not #91)
#487 := [hypothesis]: #243
#604 := (or #91 #602)
#30 := (:var 0 Int)
#32 := (f5 f6 #30)
#663 := (pattern #32)
#33 := (f3 f4 #32)
#38 := (= #33 0::Int)
#124 := (>= #30 0::Int)
#155 := (or #124 #38)
#670 := (forall (vars (?v0 Int)) (:pat #663) #155)
#158 := (forall (vars (?v0 Int)) #155)
#673 := (iff #158 #670)
#671 := (iff #155 #155)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#171 := (~ #158 #158)
#179 := (~ #155 #155)
#180 := [refl]: #179
#172 := [nnf-pos #180]: #171
#37 := (< #30 0::Int)
#39 := (implies #37 #38)
#40 := (forall (vars (?v0 Int)) #39)
#161 := (iff #40 #158)
#139 := (not #37)
#140 := (or #139 #38)
#143 := (forall (vars (?v0 Int)) #140)
#159 := (iff #143 #158)
#156 := (iff #140 #155)
#153 := (iff #139 #124)
#126 := (not #124)
#148 := (not #126)
#151 := (iff #148 #124)
#152 := [rewrite]: #151
#149 := (iff #139 #148)
#146 := (iff #37 #126)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#154 := [trans #150 #152]: #153
#157 := [monotonicity #154]: #156
#160 := [quant-intro #157]: #159
#144 := (iff #40 #143)
#141 := (iff #39 #140)
#142 := [rewrite]: #141
#145 := [quant-intro #142]: #144
#162 := [trans #145 #160]: #161
#138 := [asserted]: #40
#163 := [mp #138 #162]: #158
#181 := [mp~ #163 #172]: #158
#675 := [mp #181 #674]: #670
#353 := (not #670)
#605 := (or #353 #91 #602)
#630 := (>= #73 0::Int)
#603 := (or #630 #602)
#606 := (or #353 #603)
#593 := (iff #606 #605)
#607 := (or #353 #604)
#439 := (iff #607 #605)
#592 := [rewrite]: #439
#436 := (iff #606 #607)
#598 := (iff #603 #604)
#628 := (iff #630 #91)
#338 := [rewrite]: #628
#599 := [monotonicity #338]: #598
#438 := [monotonicity #599]: #436
#595 := [trans #438 #592]: #593
#600 := [quant-inst #73]: #606
#596 := [mp #600 #595]: #605
#488 := [unit-resolution #596 #675]: #604
#498 := [unit-resolution #488 #487]: #602
#478 := (not #602)
#499 := (or #478 #594)
#454 := [th-lemma arith triangle-eq]: #499
#455 := [unit-resolution #454 #498]: #594
#539 := (not #594)
#466 := (or #539 #521)
#66 := (f5 f6 #63)
#69 := (f3 f4 #66)
#647 := (* -1::Int #69)
#290 := (+ #62 #647)
#631 := (+ #10 #290)
#640 := (>= #631 0::Int)
#646 := (= #631 0::Int)
#654 := (>= #63 0::Int)
#573 := (+ #12 #100)
#574 := (<= #573 0::Int)
#558 := (not #574)
#349 := (<= #69 0::Int)
#643 := (= #69 0::Int)
#649 := (not #654)
#527 := [hypothesis]: #649
#629 := (or #654 #643)
#354 := (or #353 #654 #643)
#355 := (or #353 #629)
#625 := (iff #355 #354)
#626 := [rewrite]: #625
#249 := [quant-inst #63]: #355
#348 := [mp #249 #626]: #354
#514 := [unit-resolution #348 #675]: #629
#517 := [unit-resolution #514 #527]: #643
#518 := (not #643)
#519 := (or #518 #349)
#515 := [th-lemma arith triangle-eq]: #519
#520 := [unit-resolution #515 #517]: #349
#479 := (>= #10 0::Int)
#560 := (= #10 0::Int)
#332 := (f5 f6 #10)
#480 := (f3 f4 #332)
#481 := (= #480 0::Int)
#554 := (not #479)
#541 := [hypothesis]: #554
#440 := (or #479 #481)
#585 := (or #353 #479 #481)
#586 := (or #353 #440)
#474 := (iff #586 #585)
#489 := [rewrite]: #474
#589 := [quant-inst #10]: #586
#491 := [mp #589 #489]: #585
#543 := [unit-resolution #491 #675]: #440
#544 := [unit-resolution #543 #541]: #481
#548 := (= #10 #480)
#546 := (= f7 #332)
#333 := (= #332 f7)
#24 := (:var 0 S3)
#25 := (f3 f4 #24)
#656 := (pattern #25)
#26 := (f5 f6 #25)
#27 := (= #26 #24)
#657 := (forall (vars (?v0 S3)) (:pat #656) #27)
#28 := (forall (vars (?v0 S3)) #27)
#660 := (iff #28 #657)
#658 := (iff #27 #27)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#177 := (~ #28 #28)
#175 := (~ #27 #27)
#176 := [refl]: #175
#178 := [nnf-pos #176]: #177
#114 := [asserted]: #28
#167 := [mp~ #114 #178]: #28
#662 := [mp #167 #661]: #657
#313 := (not #657)
#648 := (or #313 #333)
#650 := [quant-inst #9]: #648
#545 := [unit-resolution #650 #662]: #333
#547 := [symm #545]: #546
#549 := [monotonicity #547]: #548
#550 := [trans #549 #544]: #560
#551 := (not #560)
#552 := (or #551 #479)
#542 := [th-lemma arith triangle-eq]: #552
#553 := [unit-resolution #542 #541 #550]: false
#531 := [lemma #553]: #479
#500 := (or #654 #91)
#446 := [th-lemma arith farkas 1 1]: #500
#501 := [unit-resolution #446 #527]: #91
#621 := (or #243 #620)
#34 := (= #33 #30)
#129 := (or #126 #34)
#664 := (forall (vars (?v0 Int)) (:pat #663) #129)
#132 := (forall (vars (?v0 Int)) #129)
#667 := (iff #132 #664)
#665 := (iff #129 #129)
#666 := [refl]: #665
#668 := [quant-intro #666]: #667
#169 := (~ #132 #132)
#168 := (~ #129 #129)
#165 := [refl]: #168
#170 := [nnf-pos #165]: #169
#31 := (<= 0::Int #30)
#35 := (implies #31 #34)
#36 := (forall (vars (?v0 Int)) #35)
#135 := (iff #36 #132)
#116 := (not #31)
#117 := (or #116 #34)
#120 := (forall (vars (?v0 Int)) #117)
#133 := (iff #120 #132)
#130 := (iff #117 #129)
#127 := (iff #116 #126)
#123 := (iff #31 #124)
#125 := [rewrite]: #123
#128 := [monotonicity #125]: #127
#131 := [monotonicity #128]: #130
#134 := [quant-intro #131]: #133
#121 := (iff #36 #120)
#118 := (iff #35 #117)
#119 := [rewrite]: #118
#122 := [quant-intro #119]: #121
#136 := [trans #122 #134]: #135
#115 := [asserted]: #36
#137 := [mp #115 #136]: #132
#166 := [mp~ #137 #170]: #132
#669 := [mp #166 #668]: #664
#633 := (not #664)
#611 := (or #633 #243 #620)
#627 := (= #79 #73)
#352 := (not #630)
#624 := (or #352 #627)
#612 := (or #633 #624)
#616 := (iff #612 #611)
#608 := (or #633 #621)
#615 := (iff #608 #611)
#610 := [rewrite]: #615
#609 := (iff #612 #608)
#618 := (iff #624 #621)
#335 := (iff #627 #620)
#617 := [rewrite]: #335
#339 := (iff #352 #243)
#340 := [monotonicity #338]: #339
#622 := [monotonicity #340 #617]: #618
#614 := [monotonicity #622]: #609
#457 := [trans #614 #610]: #616
#613 := [quant-inst #73]: #612
#458 := [mp #613 #457]: #611
#482 := [unit-resolution #458 #669]: #621
#506 := [unit-resolution #482 #501]: #620
#507 := (not #620)
#502 := (or #507 #459)
#508 := [th-lemma arith triangle-eq]: #502
#476 := [unit-resolution #508 #506]: #459
#557 := (not #459)
#555 := (not #349)
#559 := (or #554 #555 #557 #558)
#565 := [hypothesis]: #574
#566 := [hypothesis]: #479
#567 := [hypothesis]: #459
#101 := (+ #79 #100)
#102 := (+ #69 #101)
#103 := (<= #102 0::Int)
#108 := (not #103)
#20 := (<= #10 #12)
#21 := (if #20 #12 #10)
#16 := (- #12 #10)
#17 := (f5 f6 #16)
#18 := (f3 f4 #17)
#13 := (- #10 #12)
#14 := (f5 f6 #13)
#15 := (f3 f4 #14)
#19 := (+ #15 #18)
#22 := (<= #19 #21)
#23 := (not #22)
#111 := (iff #23 #108)
#82 := (+ #69 #79)
#85 := (<= #82 #21)
#88 := (not #85)
#109 := (iff #88 #108)
#106 := (iff #85 #103)
#97 := (<= #82 #94)
#104 := (iff #97 #103)
#105 := [rewrite]: #104
#98 := (iff #85 #97)
#95 := (= #21 #94)
#92 := (iff #20 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#99 := [monotonicity #96]: #98
#107 := [trans #99 #105]: #106
#110 := [monotonicity #107]: #109
#89 := (iff #23 #88)
#86 := (iff #22 #85)
#83 := (= #19 #82)
#80 := (= #18 #79)
#77 := (= #17 #76)
#74 := (= #16 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#70 := (= #15 #69)
#67 := (= #14 #66)
#64 := (= #13 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#71 := [monotonicity #68]: #70
#84 := [monotonicity #71 #81]: #83
#87 := [monotonicity #84]: #86
#90 := [monotonicity #87]: #89
#112 := [trans #90 #110]: #111
#60 := [asserted]: #23
#113 := [mp #60 #112]: #108
#563 := [hypothesis]: #349
#568 := [th-lemma arith farkas 1 -1 1 -1 1 #563 #113 #567 #566 #565]: false
#556 := [lemma #568]: #559
#483 := [unit-resolution #556 #476 #531 #520]: #558
#242 := (= #12 #94)
#328 := (or #243 #242)
#329 := [def-axiom]: #328
#442 := [unit-resolution #329 #501]: #242
#473 := (not #242)
#475 := (or #473 #574)
#477 := [th-lemma arith triangle-eq]: #475
#484 := [unit-resolution #477 #442 #483]: false
#486 := [lemma #484]: #654
#295 := (or #649 #646)
#634 := (or #633 #649 #646)
#305 := (= #69 #63)
#310 := (or #649 #305)
#635 := (or #633 #310)
#641 := (iff #635 #634)
#637 := (or #633 #295)
#276 := (iff #637 #634)
#639 := [rewrite]: #276
#632 := (iff #635 #637)
#296 := (iff #310 #295)
#306 := (iff #305 #646)
#294 := [rewrite]: #306
#297 := [monotonicity #294]: #296
#638 := [monotonicity #297]: #632
#281 := [trans #638 #639]: #641
#636 := [quant-inst #63]: #635
#282 := [mp #636 #281]: #634
#460 := [unit-resolution #282 #669]: #295
#461 := [unit-resolution #460 #486]: #646
#462 := (not #646)
#463 := (or #462 #640)
#464 := [th-lemma arith triangle-eq]: #463
#465 := [unit-resolution #464 #461]: #640
#588 := (>= #12 0::Int)
#526 := (= #12 0::Int)
#330 := (f5 f6 #12)
#490 := (f3 f4 #330)
#492 := (= #490 0::Int)
#533 := (not #588)
#528 := [hypothesis]: #533
#485 := (or #588 #492)
#495 := (or #353 #588 #492)
#496 := (or #353 #485)
#590 := (iff #496 #495)
#587 := [rewrite]: #590
#497 := [quant-inst #12]: #496
#591 := [mp #497 #587]: #495
#529 := [unit-resolution #591 #675]: #485
#524 := [unit-resolution #529 #528]: #492
#505 := (= #12 #490)
#503 := (= f8 #330)
#334 := (= #330 f8)
#644 := (or #313 #334)
#318 := [quant-inst #11]: #644
#530 := [unit-resolution #318 #662]: #334
#504 := [symm #530]: #503
#398 := [monotonicity #504]: #505
#509 := [trans #398 #524]: #526
#510 := (not #526)
#511 := (or #510 #588)
#516 := [th-lemma arith triangle-eq]: #511
#512 := [unit-resolution #516 #528 #509]: false
#513 := [lemma #512]: #588
#525 := (not #640)
#522 := (or #533 #539 #525 #521)
#534 := [hypothesis]: #540
#535 := [hypothesis]: #588
#536 := [hypothesis]: #640
#537 := [hypothesis]: #594
#538 := [th-lemma arith farkas -1 1 -1 -1 1 #113 #537 #536 #535 #534]: false
#523 := [lemma #538]: #522
#467 := [unit-resolution #523 #513 #465]: #466
#468 := [unit-resolution #467 #455]: #521
#327 := (= #10 #94)
#320 := (or #91 #327)
#331 := [def-axiom]: #320
#469 := [unit-resolution #331 #487]: #327
#470 := (not #327)
#471 := (or #470 #540)
#456 := [th-lemma arith triangle-eq]: #471
#472 := [unit-resolution #456 #469 #468]: false
#433 := [lemma #472]: #91
#434 := [unit-resolution #482 #433]: #620
#441 := [unit-resolution #508 #434]: #459
#443 := [unit-resolution #329 #433]: #242
#444 := [unit-resolution #477 #443]: #574
#445 := (or #349 #525 #243)
#447 := [th-lemma arith assign-bounds 1 -1]: #445
#448 := [unit-resolution #447 #465 #433]: #349
#449 := (or #555 #557 #558)
#450 := [unit-resolution #556 #531]: #449
[unit-resolution #450 #448 #444 #441]: false
unsat
a792a04eb456fe8e05c404760a48764de177c4d7 109 0
#2 := false
#28 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#8 := f5
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
decl f7 :: S3
#13 := f7
#14 := (f3 f4 f7)
#67 := -1::Int
#74 := (* -1::Int #14)
#86 := (+ #9 #74)
#87 := (<= #86 0::Int)
#90 := (if #87 #14 #9)
#96 := (* -1::Int #90)
decl f6 :: S3
#10 := f6
#11 := (f3 f4 f6)
#97 := (+ #11 #96)
#98 := (<= #97 0::Int)
#99 := (not #98)
#75 := (+ #11 #74)
#76 := (<= #75 0::Int)
#77 := (not #76)
#70 := (* -1::Int #11)
#71 := (+ #9 #70)
#69 := (>= #71 0::Int)
#68 := (not #69)
#80 := (and #68 #77)
#83 := (not #80)
#104 := (or #83 #99)
#107 := (not #104)
#17 := (<= #9 #14)
#18 := (if #17 #14 #9)
#19 := (< #18 #11)
#15 := (< #14 #11)
#12 := (< #9 #11)
#16 := (and #12 #15)
#20 := (implies #16 #19)
#21 := (not #20)
#110 := (iff #21 #107)
#60 := (not #16)
#61 := (or #60 #19)
#64 := (not #61)
#108 := (iff #64 #107)
#105 := (iff #61 #104)
#102 := (iff #19 #99)
#93 := (< #90 #11)
#100 := (iff #93 #99)
#101 := [rewrite]: #100
#94 := (iff #19 #93)
#91 := (= #18 #90)
#88 := (iff #17 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#95 := [monotonicity #92]: #94
#103 := [trans #95 #101]: #102
#84 := (iff #60 #83)
#81 := (iff #16 #80)
#78 := (iff #15 #77)
#79 := [rewrite]: #78
#72 := (iff #12 #68)
#73 := [rewrite]: #72
#82 := [monotonicity #73 #79]: #81
#85 := [monotonicity #82]: #84
#106 := [monotonicity #85 #103]: #105
#109 := [monotonicity #106]: #108
#65 := (iff #21 #64)
#62 := (iff #20 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#111 := [trans #66 #109]: #110
#59 := [asserted]: #21
#112 := [mp #59 #111]: #107
#116 := [not-or-elim #112]: #98
#113 := [not-or-elim #112]: #80
#114 := [and-elim #113]: #68
#644 := (+ #9 #96)
#627 := (>= #644 0::Int)
#330 := (= #9 #90)
#246 := (not #87)
#245 := (= #14 #90)
#628 := (not #245)
#642 := (+ #14 #96)
#633 := (>= #642 0::Int)
#357 := (not #633)
#115 := [and-elim #113]: #77
#355 := [hypothesis]: #633
#356 := [th-lemma arith farkas -1 -1 1 #355 #115 #116]: false
#358 := [lemma #356]: #357
#252 := [hypothesis]: #245
#629 := (or #628 #633)
#351 := [th-lemma arith triangle-eq]: #629
#352 := [unit-resolution #351 #252 #358]: false
#626 := [lemma #352]: #628
#331 := (or #246 #245)
#332 := [def-axiom]: #331
#631 := [unit-resolution #332 #626]: #246
#323 := (or #87 #330)
#334 := [def-axiom]: #323
#341 := [unit-resolution #334 #631]: #330
#342 := (not #330)
#343 := (or #342 #627)
#344 := [th-lemma arith triangle-eq]: #343
#622 := [unit-resolution #344 #341]: #627
[th-lemma arith farkas -1 1 1 #622 #114 #116]: false
unsat
06ea32eecccdf6605c3b038ea8337a1d74e482b8 137 0
#2 := false
decl f5 :: S3
#8 := f5
decl f6 :: (-> S4 Int S3)
#10 := 0::Int
decl f7 :: S4
#12 := f7
#13 := (f6 f7 0::Int)
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#7 := f4
#9 := (f3 f4 f5)
#11 := (<= #9 0::Int)
#14 := (if #11 #13 f5)
#266 := (= f5 #14)
#181 := (= #13 #14)
#568 := (not #266)
#15 := (= #14 f5)
#16 := (not #15)
#278 := (iff #16 #568)
#567 := (iff #15 #266)
#564 := [commutativity]: #567
#279 := [monotonicity #564]: #278
#52 := [asserted]: #16
#280 := [mp #52 #279]: #568
#259 := (or #11 #266)
#270 := [def-axiom]: #259
#281 := [unit-resolution #270 #280]: #11
#182 := (not #11)
#267 := (or #182 #181)
#268 := [def-axiom]: #267
#548 := [unit-resolution #268 #281]: #181
#399 := (= f5 #13)
#272 := (f6 f7 #9)
#397 := (= #272 #13)
#274 := (= #9 0::Int)
#252 := (f3 f4 #272)
#377 := (= #252 0::Int)
#273 := (>= #9 0::Int)
#289 := (not #377)
#563 := [hypothesis]: #289
#584 := (or #273 #377)
#22 := (:var 0 Int)
#24 := (f6 f7 #22)
#603 := (pattern #24)
#25 := (f3 f4 #24)
#30 := (= #25 0::Int)
#64 := (>= #22 0::Int)
#94 := (or #64 #30)
#610 := (forall (vars (?v0 Int)) (:pat #603) #94)
#97 := (forall (vars (?v0 Int)) #94)
#613 := (iff #97 #610)
#611 := (iff #94 #94)
#612 := [refl]: #611
#614 := [quant-intro #612]: #613
#110 := (~ #97 #97)
#118 := (~ #94 #94)
#119 := [refl]: #118
#111 := [nnf-pos #119]: #110
#29 := (< #22 0::Int)
#31 := (implies #29 #30)
#32 := (forall (vars (?v0 Int)) #31)
#100 := (iff #32 #97)
#78 := (not #29)
#79 := (or #78 #30)
#82 := (forall (vars (?v0 Int)) #79)
#98 := (iff #82 #97)
#95 := (iff #79 #94)
#92 := (iff #78 #64)
#65 := (not #64)
#87 := (not #65)
#90 := (iff #87 #64)
#91 := [rewrite]: #90
#88 := (iff #78 #87)
#85 := (iff #29 #65)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#93 := [trans #89 #91]: #92
#96 := [monotonicity #93]: #95
#99 := [quant-intro #96]: #98
#83 := (iff #32 #82)
#80 := (iff #31 #79)
#81 := [rewrite]: #80
#84 := [quant-intro #81]: #83
#101 := [trans #84 #99]: #100
#77 := [asserted]: #32
#102 := [mp #77 #101]: #97
#120 := [mp~ #102 #111]: #97
#615 := [mp #120 #614]: #610
#591 := (not #610)
#592 := (or #591 #273 #377)
#593 := (or #591 #584)
#589 := (iff #593 #592)
#595 := [rewrite]: #589
#594 := [quant-inst #9]: #593
#585 := [mp #594 #595]: #592
#559 := [unit-resolution #585 #615]: #584
#560 := [unit-resolution #559 #563]: #273
#557 := [th-lemma arith eq-propagate 0 0 #560 #281]: #274
#558 := (= #252 #9)
#269 := (= #272 f5)
#17 := (:var 0 S3)
#18 := (f3 f4 #17)
#596 := (pattern #18)
#19 := (f6 f7 #18)
#20 := (= #19 #17)
#597 := (forall (vars (?v0 S3)) (:pat #596) #20)
#21 := (forall (vars (?v0 S3)) #20)
#600 := (iff #21 #597)
#598 := (iff #20 #20)
#599 := [refl]: #598
#601 := [quant-intro #599]: #600
#116 := (~ #21 #21)
#114 := (~ #20 #20)
#115 := [refl]: #114
#117 := [nnf-pos #115]: #116
#53 := [asserted]: #21
#106 := [mp~ #53 #117]: #21
#602 := [mp #106 #601]: #597
#588 := (not #597)
#590 := (or #588 #269)
#246 := [quant-inst #8]: #590
#561 := [unit-resolution #246 #602]: #269
#562 := [monotonicity #561]: #558
#551 := [trans #562 #557]: #377
#552 := [unit-resolution #563 #551]: false
#553 := [lemma #552]: #377
#555 := (= #9 #252)
#549 := (= f5 #272)
#554 := [symm #561]: #549
#550 := [monotonicity #554]: #555
#556 := [trans #550 #553]: #274
#398 := [monotonicity #556]: #397
#541 := [trans #554 #398]: #399
#542 := [trans #541 #548]: #266
[unit-resolution #280 #542]: false
unsat
