%title%
Isabelle's Logics

%body%

Isabelle can be viewed from two main perspectives.  On the one hand it
may serve as a generic framework for rapid prototyping of deductive
systems.  On the other hand, major existing logics like
<strong>Isabelle/HOL</strong> provide a theorem proving environment
ready to use for sizable applications.


<h2>Isabelle's Logics</h2>

The Isabelle distribution includes a large body of object logics and
other examples (see the <a href="library/">Isabelle theory
library</a>).

<dl>

<dt><a
href="library/HOL/index.html"><strong>Isabelle/HOL</strong></a><dd> is
a version of classical higher-order logic resembling that of the <A
HREF="http://www.cl.cam.ac.uk/Research/HVG/HOL/HOL.html">HOL
System</A>.

<dt><a
href="library/HOLCF/index.html"><strong>Isabelle/HOLCF</strong></a><dd>
adds Scott's Logic for Computable Functions (domain theory) to HOL.

<dt><a
href="library/FOL/index.html"><strong>Isabelle/FOL</strong></a><dd>
provides basic classical and intuitionistic first-order logic.  It is
polymorphic.

<dt><a
href="library/ZF/index.html"><strong>Isabelle/ZF</strong></a><dd>
offers a formulation of Zermelo-Fraenkel set theory on top of FOL.

</dl>

<p>

Isabelle/HOL is currently the best developed object logic, including
an extensive library of (concrete) mathematics, and various packages
for advanced definitional concepts (like (co-)inductive sets and
types, well-founded recursion etc.).  The distribution also includes
some large applications, for example correctness proofs of
cryptographic protocols (<a
href="library/HOL/Auth/index.html">HOL/Auth</a>) or communication
protocols (<a href="library/HOLCF/IOA/index.html">HOLCF/IOA</a>).

<p>

Isabelle/ZF provides another starting point for applications, with a
slightly less developed library.  Its definitional packages are
similar to those of Isabelle/HOL.  Untyped ZF provides more advanced
constructions for sets than simply-typed HOL.

<p>

There are a few minor object logics that may serve as further
examples: <a href="library/CTT/index.html">CTT</a> is an extensional
version of Martin-L&ouml;f's Type Theory, <a
href="library/Cube/index.html">Cube</a> is Barendregt's Lambda Cube.
There are also some sequent calculus examples under <a
href="library/Sequents/index.html">Sequents</a>, including modal and
linear logics.  Again see the <a href="library/index.html">Isabelle
theory library</a> for other examples.


<h3>Defining Logics</h3>

Logics are not hard-wired into Isabelle, but formulated within
Isabelle's meta logic: <strong>Isabelle/Pure</strong>.  There are
quite a lot of syntactic and deductive tools available in generic
Isabelle.  Thus defining new logics or extending existing ones
basically works as follows:

<ol>

<li> declare concrete syntax (via mixfix grammar and syntax macros),

<li> declare abstract syntax (as higher-order constants),

<li> declare inference rules (as meta-logical propositions),

<li> instantiate generic automatic proof tools (simplifier, classical
tableau prover etc.),

<li> manually code special proof procedures (via tacticals or
hand-written ML).

</ol>

The first three steps above are fully declarative and involve no ML
programming at all.  Thus one already gets a decent deductive
environment based on primitive inferences (by employing the built-in
mechanisms of Isabelle/Pure, in particular higher-order unification
and resolution).

For sizable applications some degree of automated reasoning is
essential.  Instantiating existing tools like the classical tableau
prover involves only minimal ML-based setup.  One may also write
arbitrary proof procedures or even theory extension packages in ML,
without breaching system soundness (Isabelle follows the well-known
<em>LCF system approach</em> to achieve a secure system).
